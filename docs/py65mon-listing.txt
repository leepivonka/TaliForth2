
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output TaliForth-py65mon.bin platform/platform-py65mon.asm
; Tue Jun 18 20:01:38 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

=$0100					RStack = $0100 ; begin of 6502 Return stack
=$ff					rsp0      = $ff		; initial Return Stack Pointer (6502 stack)
=$8000					cp_end = $8000 ; LastRAM byte available for Data
=84					PadOffset = 84	; offset from CP to PAD (holds number strings)
=79					MAX_LINE_LENGTH  = 79      ; output line size
=20					DDim = 20	; # of cells in data stack
=10					FDim = 10	; # of entries in floating-point stack
=8					DoStkDim = 8	; # of entries in Do stack
=["lf"]					TALI_OPTION_CR_EOL := [ "lf" ]
=$ff					bsize     = $ff		; size of input/output buffers
>0200					buffer0: .fill bsize	; input buffer

;******  Processing file: platform/../taliforth.asm

=					TALI_OPTIONAL_WORDS := ["fp","fpe", "fpieee","fptrancendentals", "ed", "editor", "ramdrive", "block", "environment?", "assembler", "wordlist" ]
=-1					err_Abort		= -1
=-2					err_AbortQuote		= -2
=-3					err_Stack_Overflow	= -3
=-4					err_Stack_Underflow	= -4
=-5					err_Return_Stack_Overflow = -5
=-6					err_Return_Stack_Underflow = -6
=-7					err_DoLoop_TooDeep	= -7	; do-loops nested too deeply during execution
=-8					err_Dictionary_Overflow	= -8
=-9					err_InvalidMemoryAddr	= -9	; invalid memory address
=-10					err_DivideBy0		= -10	; division by zero
=-11					err_OutOfRange		= -11	; result out of range
=-12					err_ArgTypeMismatch	= -12	; argument type mismatch
=-13					err_UndefinedWord	= -13
=-14					err_CompileOnly		= -14	; interpreting a compile-only word
=-15					err_Forget		= -15	; invalid FORGET
=-16					err_EmptyName		= -16	; attempt to use zero-length string as a name
=-17					err_PicStringOverflow	= -17	; pictured numeric output string overflow
=-18					err_ParsedStringOverflow = -18	; parsed string overflow
=-19					err_NameTooLong		= -19	; definition name too long
=-20					err_WriteToRO		= -20	; write to a read-only location
=-21					err_Unsupported		= -21	; unsupported operation  (e.g., AT-XY on a too-dumb terminal)
=-22					err_ControlMismatch	= -22	; control structure mismatch
=-23					err_AddrAlignment	= -23	; address alignment exception
=-24					err_InvalidNumericArg	= -24	; invalid numeric argument
=-25					err_ReturnStackImbalance = -25	; return stack imbalance
=-26					err_LoopParmUnavailable = -26	; loop parameters unavailable
=-27					err_InvalidRecursion	= -27	; invalid recursion
=-28					err_UserInterrupt	= -28	; user interrupt
=-29					err_CompilerNesting	= -29	; compiler nesting
=-30					err_Obsolete		= -30	; obsolescent feature
=-31					err_NoBody		= -31	; >BODY used on non-CREATEd definition
=-32					err_InvalidName		= -32	; invalid name argument (e.g., TO name)
=-33					err_BlockRead		= -33	; block read exception
=-34					err_BlockWrite		= -34	; block write exception
=-35					err_InvalidBlock	= -35	; invalid block number
=-36					err_InvalidFilePosition = -36	; invalid file position
=-37					err_FileIO		= -37	; file I/O exception
=-38					err_FileMissing		= -38	; non-existent file
=-39					err_EndOfFile		= -39	; unexpected end of file
=-40					err_InvalidBase		= -40	; invalid BASE for floating point conversion
=-41					err_LossOfPrecision	= -41	; loss of precision
=-42					err_FPDivideBy0		= -42	; floating-point divide by zero
=-43					err_FPOutOfRange	= -43	; floating-point result out of range
=-44					err_FPStackOverflow	= -44	; floating-point stack overflow
=-45					err_FPStackUnderflow	= -45	; floating-point stack underflow
=-46					err_FPInvalidArg	= -46	; floating-point invalid argument
=-47					err_CompileWordsDeleted = -47	; compilation word list deleted
=-48					err_PostponeInvalid	= -48	; invalid POSTPONE
=-49					err_SearchOrderOverflow = -49	; search-order overflow
=-50					err_SearchOrderUnderflow = -50	; search-order underflow
=-51					err_CompileWordlistChanged = -51 ; compilation word list changed
=-52					err_ControlStackOverflow = -52	; control-flow stack overflow
=-53					err_ExceptionStackOverflow = -53 ; exception stack overflow
=-54					err_FPUnderflow		= -54	; floating-point underflow
=-55					err_FPFault		= -55	; floating-point unidentified fault
=-56					err_Quit		= -56	; QUIT
=-57					err_ConsoleIO		= -57	; exception in sending or receiving a character
=-58					err_BracketIf		= -58	; [IF], [ELSE], or [THEN] exception
=-59					err_Allocate		= -59	; ALLOCATE
=-60					err_Free		= -60	; FREE
=-61					err_Resize		= -61	; RESIZE
=-62					err_CloseFile		= -62	; CLOSE-FILE
=-63					err_CreateFile		= -63	; CREATE-FILE
=-64					err_DeleteFile		= -64	; DELETE-FILE
=-65					err_FilePosition	= -65	; FILE-POSITION
=-66					err_FileSize		= -66	; FILE-SIZE
=-67					err_FileStatus		= -67	; FILE-STATUS
=-68					err_FlushFile		= -68	; FLUSH-FILE
=-69					err_OpenFile		= -69	; OPEN-FILE
=-70					err_ReadFile		= -70	; READ-FILE
=-71					err_ReadLine		= -71	; READ-LINE
=-72					err_RenameFile		= -72	; RENAME-FILE
=-73					err_RepositionFile	= -73	; REPOSITION-FILE
=-74					err_ResizeFile		= -74	; RESIZE-FILE
=-75					err_WriteFile		= -75	; WRITE-FILE
=-76					err_WriteLine		= -76	; WRITE-LINE
=-77					err_MalformedXChar	= -77	; Malformed xchar
=-78					err_Substitute		= -78	; SUBSTITUTE
=-79					err_Replaces		= -79	; REPLACES
=-149					err_Refill		= -149	; Refill failed
=-150					err_Defer		= -150	; Defer not set
=-151					err_AlreadyInterpreting	= -151	; entering interpret when already interpreting
=-152					err_AlreadyCompiling	= -152	; entering compile when already compiling
=-154					err_TooManyWordlists   	= -154
.0000					zp0:
>0000					cp:	.word ?		; Compiler Pointer (see HERE)
>0002					InSrc:	.word ?		; input Source for SOURCE-ID
>0004					Cib:	.word ?		; address of current input buffer
>0006					CibLen:	.word ?		; length of current input buffer
>0008					ToIn:	.word ?		; pointer to CIB (>IN in Forth)
>000a					state:	.word ?		; STATE: -1 compile, 0 interpret
>000c					status: .word ?		; internal status flags
>000e					WorkWord: .word ?	; nt or xt of word being compiled (see status)
>0010					dp:	.word ?		; Dictionary Pointer temp
>0012					DoIndex: .word ?	; current Do index
>0014					tmp1:	.word ?		; temporary storage
>0016					tmp2:	.word ?		; temporary storage
>0018					tmp3:	.word ?		; temporary storage
>001a					tmp4:	.word ?		; temporary storage (tmpdsp)
>001c					tmp5:	.word ?		; temporary storage (tmptos)
>001e					editor1: .word ?	; temporary for editors
>0020					editor2: .word ?	; temporary for editors
>0022					editor3: .word ?	; temporary for editors
>0024					DStack:	.fill DDim*2	; data stack
=40					DStack0 = *-DStack	;   initial Data Stack index value
.8000					Cold_zp_table:
>8000	66 0b					.word cp0		; cp
>8002	00 00					.word 0			; insrc (SOURCE-ID is 0 for keyboard)
>8004	00 02					.word buffer0		; cib
>8006	00 00					.word 0			; ciblen
>8008	00 00					.word 0			; toin
>800a	00 00					.word 0			; state (0 = interpret)
>800c	00 00					.word 0			; status
=14					Cold_zp_table_length = *-Cold_zp_table
.02ff					User0:
>02ff					PrecisionV: .byte ?	; # of decimal places for FP print
>0300					base:	.word ?		; number radix, default decimal
>0302					nc_limit: .word ?	; limit for Native Compile size
>0304					uf_strip: .word ?	; flag to strip underflow detection code
>0306					output:	.word ?		; vector for EMIT
>0308					input:	.word ?		; vector for KEY
>030a					HaveKey: .word ?	; vector for KEY?
>030c					BlkV:	.word ?		; BLK
>030e					ScrV:	.word ?		; SCR
>0310					CurrentV: .byte ?	; CURRENT (byte) (Compilation wordlist)
>0311					Num_WordlistsV: .byte ?	; #WORDLISTS (byte)
=12					max_wordlists = 12	; Maximum number of wordlists supported
>0312					WordlistsV: .fill 2*max_wordlists	; WORDLISTS (cells)
>032a					Num_OrderV: .byte ?	; #ORDER (byte)
>032b					Search_OrderV: .fill 9	; SEARCH-ORDER (bytes)
.0334					MarkEnd:
>0334					ToHold:	.byte ?		; index for formatted output
>0335					RndState: .dword ?	; random # state
=0					wid_Forth = 0
=1					wid_Editor = 1
=2					wid_Assembler = 2
=3					wid_Root = 3
.800e					Cold_user_table:
>800e	08					.byte 8			; PrecisionV
>800f	0a 00					.word 10		; base
>8011	08 00					.word 8			; nc-limit
>8013	00 00					.word 0			; uf_strip (off by default)
>8015	21 f1					.word kernel_putc	; output
>8017	14 f1					.word kernel_getc	; input
>8019	1d f1					.word kernel_havekey	; havekey
>801b	00 00					.word 0				; BLK
>801d	00 00					.word 0				; SCR
>801f	00					.byte 0				; CURRENT = FORTH-WORDLIST
>8020	04					.byte 4				; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>8021	a6 ce					.word forth_dictionary_start	; FORTH-WORDLIST
>8023	90 d9					.word editor_dictionary_start	; EDITOR-WORDLIST
>8025	91 d7					.word assembler_dictionary_start ; ASSEMBLER-WORDLIST
>8027	ea ce					.word root_dictionary_start	; ROOT-WORDLIST
>8029	00 00 00 00 00 00 00 00			.word 0,0,0,0,0,0,0,0		; User wordlists
>8031	00 00 00 00 00 00 00 00
>8039	02					.byte 2				; #ORDER
>803a	00 02 00 00 00 00 00 00			.byte wid_Forth,wid_Assembler,0,0,0,0,0,0,0	; search-order
>8042	00
=53					Cold_user_table_length = *-Cold_user_table
=$03					AscCC   = $03	; break (CTRL-c)
=$07					AscBELL = $07	; bell sound
=$08					AscBS   = $08	; backspace
=$09					AscHT	= $09	; tab
=$0a					AscLF   = $0a	; line feed
=$0b					AScVT	= $0b	; vertical tab
=$0c					AscFF	= $0c	; form feed
=$0d					AscCR   = $0d	; carriage return
=$0e					AscCN   = $0e	; CTRL-n (used to recall next input history)
=$10					AscCP   = $10	; CTRL-p (used to recall previous input history)
=$1b					AscESC  = $1b	; escape
=$20					AscSP   = $20	; space
=$22					AscDQuote = $22	; double quote
=$5c					AscBackslash = $5c ; backslash
=$7f					AscDEL  = $7f	; delete (CTRL-h)
>0000							.fill $80 ; name, right justified
=127					wh_NameLastChar	= *-1	;last char of name
>0080					wh_HNL:		.byte ?	;
=$e0					wh_HNL_HashMask = $e0		; lo 3 bits of last char of name
=$1f					wh_HNL_NameLengthMask = $1f	; length of name
.0081					wh_
>0081					wh_WordListLink: .word ? ;link to nt of previous word in wordlist chain
>0083					wh_CodeLength:	.byte ?	;size of code (0xff = 255 or greater)
>0084					wh_Flags:	.byte ?	; created by adding the flags defined as:
=1					CO =   1 ; Compile Only
=2					AN =   2 ; Always Native Compile (may not be called by JSR)
=4					IM =   4 ; Immediate Word
=8					NN =   8 ; Never Native Compile (must always be called by JSR)
=$10					UF = $10 ; Includes strippable Underflow Check
=$40					R6 = $40 ; strip 6 bytes from begin & end when native compiling
.0085					wh_xt:
=0					WordListLink .var 0	 ; start of FORTH wordlist
>8043	43 6f 6c 64			L1:	.text "Cold"	;  name of word as a string, ending at wh_NameLastChar
>8047	84					.byte (("Cold"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8048	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>804a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>804b	08					.byte NN	;wh_Flags	dictionary flags
=32711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.804c					Cold:
.804c	d8		cld				cld
.804d	a2 ff		ldx #$ff			ldx #rsp0		; Initialize 6502 stack (Return Stack)
.804f	9a		txs				txs
.8050	a2 0d		ldx #$0d			ldx #Cold_zp_table_length-1
.8052					-
.8052	bd 00 80	lda $8000,x			lda Cold_zp_table,x
.8055	95 00		sta $00,x			sta zp0,x
.8057	ca		dex				dex
.8058	10 f8		bpl $8052			bpl -
.805a	a0 34		ldy #$34			ldy #Cold_user_table_length-1
.805c	b9 0e 80	lda $800e,y	-		lda Cold_user_table,y
.805f	99 ff 02	sta $02ff,y			sta User0,y
.8062	88		dey				dey
.8063	10 f7		bpl $805c			bpl -
.8065	20 92 b4	jsr $b492			jsr Empty_Stack
.8068	20 29 a1	jsr $a129			jsr BlockInit
.806b	20 d7 aa	jsr $aad7			jsr CR
.806e	a9 9c		lda #$9c			lda #<forth_words_start		; push start address
.8070	a0 80		ldy #$80			ldy #>forth_words_start
.8072	20 54 b7	jsr $b754			jsr PushYA
.8075	a9 d2		lda #$d2			lda #<forth_words_len		; push length
.8077	a0 00		ldy #$00			ldy #>forth_words_len
.8079	20 54 b7	jsr $b754			jsr PushYA
.807c	20 89 af	jsr $af89			jsr Evaluate
.807f	a9 00		lda #$00			lda #0
.8081	8d 66 07	sta $0766			sta hist_buff
.8084	8d e6 07	sta $07e6			sta hist_buff+$80
.8087	8d 66 08	sta $0866			sta hist_buff+$100
.808a	8d e6 08	sta $08e6			sta hist_buff+$180
.808d	8d 66 09	sta $0966			sta hist_buff+$200
.8090	8d e6 09	sta $09e6			sta hist_buff+$280
.8093	8d 66 0a	sta $0a66			sta hist_buff+$300
.8096	8d e6 0a	sta $0ae6			sta hist_buff+$380
.8099	4c 43 b4	jmp $b443			jmp Abort_Core2	;Quit
=80					CL	.var *-(WordListLink+wh_Xt)
=$809c					en = *	; remember here
>804a	50					.byte CL	;wh_CodeLength
.809c					forth_words_start:
>809c	20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>80a4	61 6c 69 20 46 6f 72 74 68 20 32 20 72 65 6d 69
>80b4	78 20 66 6f 72 20 74 68 65 20 36 35 30 32 29 20
>80c4	63 72 20 2e 28 20 56 65 72 73 69 6f 6e 20 33 31
>80d4	2e 20 4d 61 79 20 32 30 32 34 20 29 20 63 72 20
>80e4	2e 28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31
>80f4	34 2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53
>8104	74 65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f
>8114	6c 77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c
>8124	69 20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20
>8134	77 69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20
>8144	4e 4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20
>8154	2e 28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f
>8164	20 65 78 69 74 29 20 63 72 20
=210					forth_words_len = *-forth_words_start
.816e					user_words_start:
>816e					.binary "user_words.asc"
=0					user_words_len = *-user_words_start
>816e	4e 6f 4f 70			L1:	.text "NoOp"	;  name of word as a string, ending at wh_NameLastChar
>8172	04					.byte (("NoOp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8173	c7 7f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8175	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8176	00					.byte 0	;wh_Flags	dictionary flags
=33010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8177	ea		nop				nop
=1					CL	.var *-(WordListLink+wh_Xt)
=$8178					en = *	; remember here
>8175	01					.byte CL	;wh_CodeLength
.8178	60		rts				rts
>8179	63 63 40			L1:	.text "cc@"	;  name of word as a string, ending at wh_NameLastChar
>817c	03					.byte (("cc@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>817d	f2 80					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>817f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8180	08					.byte NN	;wh_Flags	dictionary flags
=33020					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8181	4c 26 f1	jmp $f126	CCAt:		jmp platform_CCAt
=3					CL	.var *-(WordListLink+wh_Xt)
=$8184					en = *	; remember here
>817f	03					.byte CL	;wh_CodeLength
>8184	42 79 65			L1:	.text "Bye"	;  name of word as a string, ending at wh_NameLastChar
>8187	a3					.byte (("Bye"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8188	fc 80					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>818a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>818b	08					.byte NN	;wh_Flags	dictionary flags
=33031					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.818c	4c 25 f1	jmp $f125	Bye:		jmp platform_bye
=3					CL	.var *-(WordListLink+wh_Xt)
=$818f					en = *	; remember here
>818a	03					.byte CL	;wh_CodeLength
>818f	54 79 70 65 53 79 6d 62		L1:	.text "TypeSymbol"	;  name of word as a string, ending at wh_NameLastChar
>8197	6f 6c
>8199	8a					.byte (("TypeSymbol"[-1]&7)<<5)+(*-L1)	;wh_HNL
>819a	07 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>819c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>819d	08					.byte NN	;wh_Flags	dictionary flags
=33049					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.819e	20 b9 b7	jsr $b7b9	TypeSymbol:	jsr Two
.81a1	20 0a c4	jsr $c40a			jsr Spaces
.81a4	a9 28		lda #$28			lda #'('
.81a6	20 5e cd	jsr $cd5e			jsr Emit_A
.81a9	20 6b cd	jsr $cd6b			jsr Space
.81ac	20 f0 ce	jsr $cef0			jsr Dup
.81af	a9 24		lda #$24			lda #'$'
.81b1	20 5e cd	jsr $cd5e			jsr Emit_A
.81b4	20 6c a8	jsr $a86c			jsr Dot_Hex
.81b7	20 6b cd	jsr $cd6b			jsr Space
.81ba	20 e1 81	jsr $81e1			jsr DictSearchXt	; ( addr_end addr operand offset nt )
.81bd	20 a4 bd	jsr $bda4			jsr Name_To_String	; Change nt into the name
.81c0	20 78 cd	jsr $cd78			jsr Type		; print it.
.81c3	20 6b cd	jsr $cd6b			jsr Space
.81c6	b5 24		lda $24,x			lda DStack+0,x		; if non-zero offset
.81c8	15 25		ora $25,x			ora DStack+1,x
.81ca	f0 0b		beq $81d7			beq +
.81cc	a9 2b		lda #$2b			lda #'+'		;   print offset
.81ce	20 5e cd	jsr $cd5e			jsr Emit_A
.81d1	20 f0 ce	jsr $cef0			jsr Dup
.81d4	20 9f cb	jsr $cb9f			jsr U_Dot
.81d7	e8		inx		+		inx
.81d8	e8		inx				inx
.81d9	a9 29		lda #$29			lda #')'
.81db	20 5e cd	jsr $cd5e			jsr Emit_A
.81de	4c 6b cd	jmp $cd6b			jmp Space
=67					CL	.var *-(WordListLink+wh_Xt)
=$81e1					en = *	; remember here
>819c	43					.byte CL	;wh_CodeLength
.81e1					DictSearchXt:
.81e1	ca		dex				dex
.81e2	ca		dex				dex
.81e3	20 c7 ce	jsr $cec7			jsr Over
.81e6	a9 ff		lda #$ff			lda #$ff		; init best offset
.81e8	95 29		sta $29,x			sta DStack+5,x		; ( offset nt xt )
.81ea	a9 fe		lda #$fe			lda #$fe		; for each wordlist
.81ec	48		pha				pha
.81ed	68		pla		_ListNext:	pla
.81ee	18		clc				clc
.81ef	69 02		adc #$02			adc #2			; to next wordlist
.81f1	c9 18		cmp #$18			cmp #max_wordlists*2
.81f3	b0 10		bcs $8205			bcs _Done
.81f5	48		pha				pha
.81f6	a8		tay				tay
.81f7	b9 12 03	lda $0312,y			lda WordlistsV+0,y	; Get the DP for that wordlist.
.81fa	85 14		sta $14				sta tmp1+0
.81fc	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.81ff	85 15		sta $15				sta tmp1+1
.8201	d0 14		bne $8217			bne _WordTest
.8203	f0 e8		beq $81ed			beq _ListNext		;   empty list
.8205	e8		inx		_Done:		inx			; Drop xt
.8206	e8		inx				inx
.8207	60		rts				rts
.8208	a0 82		ldy #$82	_WordNext:	ldy #wh_WordListLink+1
.820a	b1 14		lda ($14),y			lda (tmp1),y
.820c	f0 df		beq $81ed			beq _ListNext		; end of Dictionary?
.820e	48		pha				pha
.820f	88		dey				dey
.8210	b1 14		lda ($14),y			lda (tmp1),y
.8212	85 14		sta $14				sta tmp1+0
.8214	68		pla				pla
.8215	85 15		sta $15				sta tmp1+1
.8217	18		clc		_WordTest:	clc			; tmp2 = xt of this word
.8218	a5 14		lda $14				lda tmp1+0
.821a	69 85		adc #$85			adc #wh_xt
.821c	85 16		sta $16				sta tmp2+0
.821e	a5 15		lda $15				lda tmp1+1
.8220	69 00		adc #$00			adc #0
.8222	85 17		sta $17				sta tmp2+1
.8224	38		sec				sec			; tmp2 = xt offset for this word
.8225	b5 24		lda $24,x			lda DStack+0,x
.8227	e5 16		sbc $16				sbc tmp2+0
.8229	85 16		sta $16				sta tmp2+0
.822b	b5 25		lda $25,x			lda DStack+1,x
.822d	e5 17		sbc $17				sbc tmp2+1
.822f	85 17		sta $17				sta tmp2+1
.8231	20 97 82	jsr $8297			jsr _test
.8234	a0 85		ldy #$85			ldy #wh_xt+0		; is this word a constant?
.8236	b1 14		lda ($14),y			lda (tmp1),y
.8238	c9 a0		cmp #$a0			cmp #$a0
.823a	f0 28		beq $8264			beq _PushYA
.823c	c9 a9		cmp #$a9			cmp #$a9
.823e	d0 c8		bne $8208			bne _WordNext
.8240	c8		iny		_PushZA:	iny			; get lda # operand
.8241	b5 24		lda $24,x			lda DStack+0,x
.8243	f1 14		sbc ($14),y			sbc (tmp1),y
.8245	85 16		sta $16				sta tmp2+0
.8247	b5 25		lda $25,x			lda DStack+1,x
.8249	e9 00		sbc #$00			sbc #0
.824b	85 17		sta $17				sta tmp2+1
.824d	c8		iny				iny			; check jmp opcode
.824e	b1 14		lda ($14),y			lda (tmp1),y
.8250	c9 4c		cmp #$4c			cmp #$4c
.8252	d0 b4		bne $8208			bne _WordNext
.8254	c8		iny				iny			; check jmp operand lo
.8255	b1 14		lda ($14),y			lda (tmp1),y
.8257	c9 96		cmp #$96			cmp #<PushZA
.8259	d0 ad		bne $8208			bne _WordNext
.825b	c8		iny				iny			; check jmp operand hi
.825c	b1 14		lda ($14),y			lda (tmp1),y
.825e	c9 b7		cmp #$b7			cmp #>PushZA
.8260	d0 a6		bne $8208			bne _WordNext
.8262	f0 2d		beq $8291			beq _KTest
.8264	a0 87		ldy #$87	_PushYA:	ldy #wh_xt+2		; check LDA # opcode
.8266	b1 14		lda ($14),y			lda (tmp1),y
.8268	c9 a9		cmp #$a9			cmp #$a9
.826a	d0 9c		bne $8208			bne _WordNext
.826c	c8		iny				iny			; get lda # operand
.826d	b5 24		lda $24,x			lda DStack+0,x
.826f	f1 14		sbc ($14),y			sbc (tmp1),y
.8271	85 16		sta $16				sta tmp2+0
.8273	a0 86		ldy #$86			ldy #wh_xt+1		; get LDY # operand
.8275	b5 25		lda $25,x			lda DStack+1,x
.8277	f1 14		sbc ($14),y			sbc (tmp1),y
.8279	85 17		sta $17				sta tmp2+1
.827b	a0 89		ldy #$89			ldy #wh_xt+4		; check JMP opcode
.827d	b1 14		lda ($14),y			lda (tmp1),y
.827f	c9 4c		cmp #$4c			cmp #$4c
.8281	d0 85		bne $8208			bne _WordNext
.8283	c8		iny				iny			; check JMP operand lo
.8284	b1 14		lda ($14),y			lda (tmp1),y
.8286	c9 54		cmp #$54			cmp #<PushYA
.8288	d0 0a		bne $8294			bne _WordNext3
.828a	c8		iny				iny			; check JMP operand hi
.828b	b1 14		lda ($14),y			lda (tmp1),y
.828d	c9 b7		cmp #$b7			cmp #>PushYA
.828f	d0 03		bne $8294			bne _WordNext3
.8291	20 97 82	jsr $8297	_KTest:		jsr _test
.8294	4c 08 82	jmp $8208	_WordNext3:	jmp _WordNext
.8297					_test:
.8297	a5 16		lda $16				lda tmp2+0		; this word have smaller offset?
.8299	d5 28		cmp $28,x			cmp DStack+4,x
.829b	a5 17		lda $17				lda tmp2+1
.829d	f5 29		sbc $29,x			sbc DStack+5,x
.829f	b0 10		bcs $82b1			bcs _trts
.82a1	a5 16		lda $16				lda tmp2+0		;   save this better offset
.82a3	a4 17		ldy $17				ldy tmp2+1
.82a5	95 28		sta $28,x			sta DStack+4,x
.82a7	94 29		sty $29,x			sty DStack+5,x
.82a9	a5 14		lda $14				lda tmp1+0		;   save this better nt
.82ab	a4 15		ldy $15				ldy tmp1+1
.82ad	95 26		sta $26,x			sta DStack+2,x
.82af	94 27		sty $27,x			sty DStack+3,x
.82b1	60		rts		_trts:		rts
>82b2	44 53 74 61 63 6b		L1:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
>82b8	66					.byte (("DStack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>82b9	19 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82bc	08					.byte NN	;wh_Flags	dictionary flags
=33336					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82bd	a9 24		lda #$24			lda #DStack
.82bf	4c 96 b7	jmp $b796			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$82c2					en = *	; remember here
>82bb	05					.byte CL	;wh_CodeLength
>82c2	52 6e 64 53 74 61 74 65		L1:	.text "RndState"	;  name of word as a string, ending at wh_NameLastChar
>82ca	a8					.byte (("RndState"[-1]&7)<<5)+(*-L1)	;wh_HNL
>82cb	38 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82ce	08					.byte NN	;wh_Flags	dictionary flags
=33354					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82cf	a0 03		ldy #$03			ldy #>RndState
.82d1	a9 35		lda #$35			lda #<RndState
.82d3	4c 54 b7	jmp $b754			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$82d6					en = *	; remember here
>82cd	07					.byte CL	;wh_CodeLength
>82d6	52 61 6e 64			L1:	.text "Rand"	;  name of word as a string, ending at wh_NameLastChar
>82da	84					.byte (("Rand"[-1]&7)<<5)+(*-L1)	;wh_HNL
>82db	4a 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82de	00					.byte 0	;wh_Flags	dictionary flags
=33370					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82df					Rand:
.82df	4e 36 03	lsr $0336			lsr RndState+1
.82e2	6e 35 03	ror $0335			ror RndState+0
.82e5	6e 38 03	ror $0338			ror RndState+3
.82e8	6e 37 03	ror $0337			ror RndState+2
.82eb	90 10		bcc $82fd			bcc _19			;  IfCs,
.82ed	ad 36 03	lda $0336			lda RndState+1
.82f0	49 d0		eor #$d0			eor #$d0
.82f2	8d 36 03	sta $0336			sta RndState+1
.82f5	ad 37 03	lda $0337			lda RndState+2
.82f8	49 01		eor #$01			eor #$01
.82fa	8d 37 03	sta $0337			sta RndState+2
.82fd					_19:
.82fd	ad 37 03	lda $0337			lda RndState+2
.8300	ac 38 03	ldy $0338			ldy RndState+3
=36					CL	.var *-(WordListLink+wh_Xt)
=$8303					en = *	; remember here
>82dd	24					.byte CL	;wh_CodeLength
.8303	60		rts				rts
>8304	52 61 6e 64 4d			L1:	.text "RandM"	;  name of word as a string, ending at wh_NameLastChar
>8309	a5					.byte (("RandM"[-1]&7)<<5)+(*-L1)	;wh_HNL
>830a	5a 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>830c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>830d	08					.byte NN	;wh_Flags	dictionary flags
=33417					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.830e	20 f0 ce	jsr $cef0	RandM:		jsr Dup		; ( umod umod )
.8311	20 df 82	jsr $82df			jsr Rand
.8314	4a		lsr a				lsr a		; make positive
.8315	95 27		sta $27,x			sta DStack+3,x
.8317	94 26		sty $26,x			sty DStack+2,x	; ( rand umod )
.8319	4c fb ae	jmp $aefb			jmp Mod
=14					CL	.var *-(WordListLink+wh_Xt)
=$831c					en = *	; remember here
>830c	0e					.byte CL	;wh_CodeLength
>004c					fp:	.byte ?		; floating-point stack index
>004d					FSExp:   .fill FDim	; FP stack exponent     array
>0057					FSMant0: .fill FDim	; FP stack mantissa MSB array
>0061					FSMant1: .fill FDim	; FP stack mantissa 2nd array
>006b					FSMant2: .fill FDim	; FP stack mantissa 3rd array
>0075					FSMant3: .fill FDim	; FP stack mantissa 4th array
>831c	46 50				L1:	.text "FP"	;  name of word as a string, ending at wh_NameLastChar
>831e	02					.byte (("FP"[-1]&7)<<5)+(*-L1)	;wh_HNL
>831f	89 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8321	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8322	08					.byte NN	;wh_Flags	dictionary flags
=33438					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8323	a9 4c		lda #$4c			lda #fp
.8325	4c 96 b7	jmp $b796			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8328					en = *	; remember here
>8321	05					.byte CL	;wh_CodeLength
>8328	46 44 69 6d			L1:	.text "FDim"	;  name of word as a string, ending at wh_NameLastChar
>832c	a4					.byte (("FDim"[-1]&7)<<5)+(*-L1)	;wh_HNL
>832d	9e 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>832f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8330	08					.byte NN	;wh_Flags	dictionary flags
=33452					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8331	a9 0a		lda #$0a			lda #FDim
.8333	4c 96 b7	jmp $b796			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8336					en = *	; remember here
>832f	05					.byte CL	;wh_CodeLength
>8336	46 53 45 78 70			L1:	.text "FSExp"	;  name of word as a string, ending at wh_NameLastChar
>833b	05					.byte (("FSExp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>833c	ac 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>833e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>833f	08					.byte NN	;wh_Flags	dictionary flags
=33467					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8340	a9 4d		lda #$4d			lda #FSExp
.8342	4c 96 b7	jmp $b796			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8345					en = *	; remember here
>833e	05					.byte CL	;wh_CodeLength
>8345	46 53 4d 61 6e 74 30		L1:	.text "FSMant0"	;  name of word as a string, ending at wh_NameLastChar
>834c	07					.byte (("FSMant0"[-1]&7)<<5)+(*-L1)	;wh_HNL
>834d	bb 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>834f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8350	08					.byte NN	;wh_Flags	dictionary flags
=33484					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8351	a9 57		lda #$57			lda #FSMant0
.8353	4c 96 b7	jmp $b796			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8356					en = *	; remember here
>834f	05					.byte CL	;wh_CodeLength
>8356	46 53 4d 61 6e 74 31		L1:	.text "FSMant1"	;  name of word as a string, ending at wh_NameLastChar
>835d	27					.byte (("FSMant1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>835e	cc 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8360	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8361	08					.byte NN	;wh_Flags	dictionary flags
=33501					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8362	a9 61		lda #$61			lda #FSMant1
.8364	4c 96 b7	jmp $b796			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8367					en = *	; remember here
>8360	05					.byte CL	;wh_CodeLength
>8367	46 53 4d 61 6e 74 32		L1:	.text "FSMant2"	;  name of word as a string, ending at wh_NameLastChar
>836e	47					.byte (("FSMant2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>836f	dd 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8371	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8372	08					.byte NN	;wh_Flags	dictionary flags
=33518					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8373	a9 6b		lda #$6b			lda #FSMant2
.8375	4c 96 b7	jmp $b796			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8378					en = *	; remember here
>8371	05					.byte CL	;wh_CodeLength
>8378	46 53 4d 61 6e 74 33		L1:	.text "FSMant3"	;  name of word as a string, ending at wh_NameLastChar
>837f	67					.byte (("FSMant3"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8380	ee 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8382	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8383	08					.byte NN	;wh_Flags	dictionary flags
=33535					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8384	a9 75		lda #$75			lda #FSMant3
.8386	4c 96 b7	jmp $b796			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8389					en = *	; remember here
>8382	05					.byte CL	;wh_CodeLength
>8389	46 6c 6f 61 74 2b		L1:	.text "Float+"	;  name of word as a string, ending at wh_NameLastChar
>838f	66					.byte (("Float+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8390	ff 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8392	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8393	08					.byte NN	;wh_Flags	dictionary flags
=33551					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8394	a9 05		lda #$05	FloatPlus:	lda #5
.8396	4c 95 c9	jmp $c995			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$8399					en = *	; remember here
>8392	05					.byte CL	;wh_CodeLength
>8399	46 6c 6f 61 74 73		L1:	.text "Floats"	;  name of word as a string, ending at wh_NameLastChar
>839f	66					.byte (("Floats"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83a0	0f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83a3	08					.byte NN	;wh_Flags	dictionary flags
=33567					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83a4	a9 05		lda #$05	Floats:		lda #5
.83a6	20 96 b7	jsr $b796			jsr PushZA
.83a9	4c 0b ae	jmp $ae0b			jmp Star
=8					CL	.var *-(WordListLink+wh_Xt)
=$83ac					en = *	; remember here
>83a2	08					.byte CL	;wh_CodeLength
>83ac	50 72 65 63 69 73 69 6f		L1:	.text "Precision"	;  name of word as a string, ending at wh_NameLastChar
>83b4	6e
>83b5	c9					.byte (("Precision"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83b6	1f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83b8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83b9	08					.byte NN	;wh_Flags	dictionary flags
=33589					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83ba	ad ff 02	lda $02ff	Precision:	lda PrecisionV
.83bd	4c 96 b7	jmp $b796			jmp PushZA
=6					CL	.var *-(WordListLink+wh_Xt)
=$83c0					en = *	; remember here
>83b8	06					.byte CL	;wh_CodeLength
.83c0	60		rts				rts
>83c1	53 65 74 2d 50 72 65 63		L1:	.text "Set-Precision"	;  name of word as a string, ending at wh_NameLastChar
>83c9	69 73 69 6f 6e
>83ce	cd					.byte (("Set-Precision"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83cf	35 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83d2	08					.byte NN	;wh_Flags	dictionary flags
=33614					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83d3	20 7e b3	jsr $b37e			jsr PopA
.83d6	8d ff 02	sta $02ff			sta PrecisionV
=6					CL	.var *-(WordListLink+wh_Xt)
=$83d9					en = *	; remember here
>83d1	06					.byte CL	;wh_CodeLength
.83d9	60		rts				rts
>83da	46 44 72 6f 70			L1:	.text "FDrop"	;  name of word as a string, ending at wh_NameLastChar
>83df	05					.byte (("FDrop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83e0	4e 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83e3	00					.byte 0	;wh_Flags	dictionary flags
=33631					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83e4	e6 4c		inc $4c		FDrop:		inc fp
=2					CL	.var *-(WordListLink+wh_Xt)
=$83e6					en = *	; remember here
>83e2	02					.byte CL	;wh_CodeLength
.83e6	60		rts				rts
>83e7	46 32 44 72 6f 70		L1:	.text "F2Drop"	;  name of word as a string, ending at wh_NameLastChar
>83ed	06					.byte (("F2Drop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83ee	5f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83f1	00					.byte 0	;wh_Flags	dictionary flags
=33645					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83f2	e6 4c		inc $4c		F2Drop:		inc fp
.83f4	e6 4c		inc $4c				inc fp
=4					CL	.var *-(WordListLink+wh_Xt)
=$83f6					en = *	; remember here
>83f0	04					.byte CL	;wh_CodeLength
.83f6	60		rts				rts
>83f7	46 44 65 70 74 68		L1:	.text "FDepth"	;  name of word as a string, ending at wh_NameLastChar
>83fd	06					.byte (("FDepth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83fe	6d 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8400	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8401	08					.byte NN	;wh_Flags	dictionary flags
=33661					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8402	a9 0a		lda #$0a	FDepth:		lda #FDim
.8404	38		sec				sec
.8405	e5 4c		sbc $4c				sbc fp
.8407	4c 96 b7	jmp $b796			jmp PushZA
=8					CL	.var *-(WordListLink+wh_Xt)
=$840a					en = *	; remember here
>8400	08					.byte CL	;wh_CodeLength
>840a	46 41 6c 6c 6f 63 58		L1:	.text "FAllocX"	;  name of word as a string, ending at wh_NameLastChar
>8411	07					.byte (("FAllocX"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8412	7d 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8414	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8415	08					.byte NN	;wh_Flags	dictionary flags
=33681					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8416	86 14		stx $14		FAllocX:	stx tmp1+0	; save data stack index
.8418	a6 4c		ldx $4c				ldx fp		; X= floating point stack index
.841a	ca		dex				dex		; alloc FP stack entry
.841b	e0 0a		cpx #$0a			cpx #FDim	; overflow or underflow?
.841d	b0 03		bcs $8422			bcs _err
.841f	86 4c		stx $4c				stx fp
.8421	60		rts				rts		; return X= FP stack index
.8422	0a		asl a		_err:		asl a		; save sign bit
.8423	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.8425	6a		ror a				ror a		; restore sign bit
.8426	4c f2 b3	jmp $b3f2			jmp Throw_FPStack
=19					CL	.var *-(WordListLink+wh_Xt)
=$8429					en = *	; remember here
>8414	13					.byte CL	;wh_CodeLength
>8429	46 4d 61 78			L1:	.text "FMax"	;  name of word as a string, ending at wh_NameLastChar
>842d	04					.byte (("FMax"[-1]&7)<<5)+(*-L1)	;wh_HNL
>842e	91 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8430	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8431	08					.byte NN	;wh_Flags	dictionary flags
=33709					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8432	20 20 86	jsr $8620	FMax:		jsr FCmpA
.8435	10 ad		bpl $83e4			bpl FDrop
.8437	30 19		bmi $8452			bmi FNip
=7					CL	.var *-(WordListLink+wh_Xt)
=$8439					en = *	; remember here
>8430	07					.byte CL	;wh_CodeLength
>8439	46 4d 69 6e			L1:	.text "FMin"	;  name of word as a string, ending at wh_NameLastChar
>843d	c4					.byte (("FMin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>843e	ad 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8440	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8441	08					.byte NN	;wh_Flags	dictionary flags
=33725					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8442	20 20 86	jsr $8620	FMin:		jsr FCmpA
.8445	30 9d		bmi $83e4			bmi FDrop
.8447	10 09		bpl $8452			bpl FNip
=7					CL	.var *-(WordListLink+wh_Xt)
=$8449					en = *	; remember here
>8440	07					.byte CL	;wh_CodeLength
>8449	46 4e 69 70			L1:	.text "FNip"	;  name of word as a string, ending at wh_NameLastChar
>844d	04					.byte (("FNip"[-1]&7)<<5)+(*-L1)	;wh_HNL
>844e	bd 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8450	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8451	00					.byte 0	;wh_Flags	dictionary flags
=33741					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8452	86 14		stx $14		FNip:		stx tmp1		; save data stack index
.8454	a6 4c		ldx $4c				ldx fp			; get FP stack index
.8456	b5 4d		lda $4d,x			lda FSExp+0,x		; copy exponent
.8458	95 4e		sta $4e,x			sta FSExp+1,x
.845a	b5 57		lda $57,x			lda FSMant0+0,x		; copy mantissa
.845c	95 58		sta $58,x			sta FSMant0+1,x
.845e	b5 61		lda $61,x			lda FSMant1+0,x
.8460	95 62		sta $62,x			sta FSMant1+1,x
.8462	b5 6b		lda $6b,x			lda FSMant2+0,x
.8464	95 6c		sta $6c,x			sta FSMant2+1,x
.8466	b5 75		lda $75,x			lda FSMant3+0,x
.8468	95 76		sta $76,x			sta FSMant3+1,x
.846a	e6 4c		inc $4c				inc fp			; FDrop
.846c	a6 14		ldx $14				ldx tmp1		; restore data stack index
=28					CL	.var *-(WordListLink+wh_Xt)
=$846e					en = *	; remember here
>8450	1c					.byte CL	;wh_CodeLength
.846e	60		rts				rts
>846f	46 44 75 70			L1:	.text "FDup"	;  name of word as a string, ending at wh_NameLastChar
>8473	04					.byte (("FDup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8474	cd 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8476	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8477	00					.byte 0	;wh_Flags	dictionary flags
=33779					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8478	20 16 84	jsr $8416	FDup:		jsr FAllocX		; alloc FP stack entry
.847b	b5 4e		lda $4e,x			lda FSExp+1,x		; copy exponent
.847d	95 4d		sta $4d,x			sta FSExp+0,x
.847f	b5 58		lda $58,x			lda FSMant0+1,x		; copy mantissa
.8481	95 57		sta $57,x			sta FSMant0+0,x
.8483	b5 62		lda $62,x			lda FSMant1+1,x
.8485	95 61		sta $61,x			sta FSMant1+0,x
.8487	b5 6c		lda $6c,x			lda FSMant2+1,x
.8489	95 6b		sta $6b,x			sta FSMant2+0,x
.848b	b5 76		lda $76,x			lda FSMant3+1,x
.848d	95 75		sta $75,x			sta FSMant3+0,x
.848f	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CL	.var *-(WordListLink+wh_Xt)
=$8491					en = *	; remember here
>8476	19					.byte CL	;wh_CodeLength
.8491	60		rts				rts
>8492	46 4f 76 65 72			L1:	.text "FOver"	;  name of word as a string, ending at wh_NameLastChar
>8497	45					.byte (("FOver"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8498	f3 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>849a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>849b	00					.byte 0	;wh_Flags	dictionary flags
=33815					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.849c	20 16 84	jsr $8416	FOver:		jsr FAllocX		; alloc FP stack entry
.849f	b5 4f		lda $4f,x			lda FSExp+2,x		; copy exponent
.84a1	95 4d		sta $4d,x			sta FSExp+0,x
.84a3	b5 59		lda $59,x			lda FSMant0+2,x		; copy mantissa
.84a5	95 57		sta $57,x			sta FSMant0+0,x
.84a7	b5 63		lda $63,x			lda FSMant1+2,x
.84a9	95 61		sta $61,x			sta FSMant1+0,x
.84ab	b5 6d		lda $6d,x			lda FSMant2+2,x
.84ad	95 6b		sta $6b,x			sta FSMant2+0,x
.84af	b5 77		lda $77,x			lda FSMant3+2,x
.84b1	95 75		sta $75,x			sta FSMant3+0,x
.84b3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CL	.var *-(WordListLink+wh_Xt)
=$84b5					en = *	; remember here
>849a	19					.byte CL	;wh_CodeLength
.84b5	60		rts				rts
>84b6	46 50 69 63 6b			L1:	.text "FPick"	;  name of word as a string, ending at wh_NameLastChar
>84bb	65					.byte (("FPick"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84bc	17 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84bf	00					.byte 0	;wh_Flags	dictionary flags
=33851					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84c0	20 7e b3	jsr $b37e	FPick:		jsr PopA		; pop u
.84c3	18		clc		FPickA:		clc
.84c4	65 4c		adc $4c				adc fp
.84c6	a8		tay		FPick3:		tay
.84c7	20 16 84	jsr $8416			jsr FAllocX
.84ca	b9 4d 00	lda $004d,y			lda FSExp,y		; copy exponent
.84cd	95 4d		sta $4d,x			sta FSExp,x
.84cf	b9 57 00	lda $0057,y			lda FSMant0,y		; copy mantissa
.84d2	95 57		sta $57,x			sta FSMant0,x
.84d4	b9 61 00	lda $0061,y			lda FSMant1,y
.84d7	95 61		sta $61,x			sta FSMant1,x
.84d9	b9 6b 00	lda $006b,y			lda FSMant2,y
.84dc	95 6b		sta $6b,x			sta FSMant2,x
.84de	b9 75 00	lda $0075,y			lda FSMant3,y
.84e1	95 75		sta $75,x			sta FSMant3,x
.84e3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=37					CL	.var *-(WordListLink+wh_Xt)
=$84e5					en = *	; remember here
>84be	25					.byte CL	;wh_CodeLength
.84e5	60		rts				rts
>84e6	46 32 44 75 70			L1:	.text "F2Dup"	;  name of word as a string, ending at wh_NameLastChar
>84eb	05					.byte (("F2Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84ec	3b 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84ef	08					.byte NN	;wh_Flags	dictionary flags
=33899					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84f0	20 9c 84	jsr $849c	F2Dup:		jsr FOver
.84f3	4c 9c 84	jmp $849c			jmp FOver
=6					CL	.var *-(WordListLink+wh_Xt)
=$84f6					en = *	; remember here
>84ee	06					.byte CL	;wh_CodeLength
>84f6	46 53 77 61 70			L1:	.text "FSwap"	;  name of word as a string, ending at wh_NameLastChar
>84fb	05					.byte (("FSwap"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84fc	6b 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84ff	00					.byte 0	;wh_Flags	dictionary flags
=33915					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8500	86 14		stx $14		FSwap:		stx tmp1		; save data stack index
.8502	a6 4c		ldx $4c				ldx fp			; X=FP stack index
.8504	b5 4d		lda $4d,x			lda FSExp+0,x		; do FSExp
.8506	b4 4e		ldy $4e,x			ldy FSExp+1,x
.8508	95 4e		sta $4e,x			sta FSExp+1,x
.850a	94 4d		sty $4d,x			sty FSExp+0,x
.850c	b5 57		lda $57,x			lda FSMant0+0,x		; do FSMant0
.850e	b4 58		ldy $58,x			ldy FSMant0+1,x
.8510	95 58		sta $58,x			sta FSMant0+1,x
.8512	94 57		sty $57,x			sty FSMant0+0,x
.8514	b5 61		lda $61,x			lda FSMant1+0,x		; do FSMant1
.8516	b4 62		ldy $62,x			ldy FSMant1+1,x
.8518	95 62		sta $62,x			sta FSMant1+1,x
.851a	94 61		sty $61,x			sty FSMant1+0,x
.851c	b5 6b		lda $6b,x			lda FSMant2+0,x		; do FSMant2
.851e	b4 6c		ldy $6c,x			ldy FSMant2+1,x
.8520	95 6c		sta $6c,x			sta FSMant2+1,x
.8522	94 6b		sty $6b,x			sty FSMant2+0,x
.8524	b5 75		lda $75,x			lda FSMant3+0,x		; do FSMant3
.8526	b4 76		ldy $76,x			ldy FSMant3+1,x
.8528	95 76		sta $76,x			sta FSMant3+1,x
.852a	94 75		sty $75,x			sty FSMant3+0,x
.852c	a6 14		ldx $14				ldx tmp1		; restore data stack index
=46					CL	.var *-(WordListLink+wh_Xt)
=$852e					en = *	; remember here
>84fe	2e					.byte CL	;wh_CodeLength
.852e	60		rts				rts
>852f	46 54 75 63 6b			L1:	.text "FTuck"	;  name of word as a string, ending at wh_NameLastChar
>8534	65					.byte (("FTuck"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8535	7b 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8537	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8538	08					.byte NN	;wh_Flags	dictionary flags
=33972					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8539	20 00 85	jsr $8500	FTuck:		jsr FSwap
.853c	4c 9c 84	jmp $849c			jmp FOver
=6					CL	.var *-(WordListLink+wh_Xt)
=$853f					en = *	; remember here
>8537	06					.byte CL	;wh_CodeLength
>853f	46 52 6f 74			L1:	.text "FRot"	;  name of word as a string, ending at wh_NameLastChar
>8543	84					.byte (("FRot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8544	b4 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8546	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8547	00					.byte 0	;wh_Flags	dictionary flags
=33987					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8548	86 14		stx $14		FRot:		stx tmp1		; save data stack index
.854a	a5 4c		lda $4c				lda fp			; for FSMant3, FSMant2, FSMant1, FSMant0, FSExp
.854c	18		clc				clc
.854d	69 28		adc #$28			adc #4*FDim
.854f	d0 03		bne $8554			bne _3
.8551	8a		txa		_2:		txa			;    next byte
.8552	e9 0a		sbc #$0a			sbc #FDim
.8554	aa		tax		_3:		tax
.8555	b5 4f		lda $4f,x			lda FSExp+2,x		;   do a byte
.8557	b4 4e		ldy $4e,x			ldy FSExp+1,x
.8559	94 4f		sty $4f,x			sty FSExp+2,x
.855b	b4 4d		ldy $4d,x			ldy FSExp+0,x
.855d	94 4e		sty $4e,x			sty FSExp+1,x
.855f	95 4d		sta $4d,x			sta FSExp+0,x
.8561	e4 4c		cpx $4c				cpx fp			; done?
.8563	d0 ec		bne $8551			bne _2
.8565	a6 14		ldx $14				ldx tmp1		; restore param stack index
=31					CL	.var *-(WordListLink+wh_Xt)
=$8567					en = *	; remember here
>8546	1f					.byte CL	;wh_CodeLength
.8567	60		rts				rts
>8568	46 2d 52 6f 74			L1:	.text "F-Rot"	;  name of word as a string, ending at wh_NameLastChar
>856d	85					.byte (("F-Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>856e	c3 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8570	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8571	08					.byte NN	;wh_Flags	dictionary flags
=34029					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8572	20 48 85	jsr $8548	FMRot:		jsr FRot
.8575	4c 48 85	jmp $8548			jmp FRot
=6					CL	.var *-(WordListLink+wh_Xt)
=$8578					en = *	; remember here
>8570	06					.byte CL	;wh_CodeLength
>8578	46 40				L1:	.text "F@"	;  name of word as a string, ending at wh_NameLastChar
>857a	02					.byte (("F@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>857b	ed 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>857d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>857e	00					.byte 0	;wh_Flags	dictionary flags
=34042					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.857f	20 9a b3	jsr $b39a	FAt:		jsr PopYA		; pop addr
.8582	85 16		sta $16		FAt_YA:		sta tmp2+0		; save addr
.8584	84 17		sty $17				sty tmp2+1
.8586	20 16 84	jsr $8416	FAt_Tmp2:	jsr FAllocX		; alloc FP stack entry
.8589	a0 00		ldy #$00			ldy #0			; copy mantissa
.858b	b1 16		lda ($16),y			lda (tmp2),y
.858d	95 75		sta $75,x			sta FSMant3,x
.858f	c8		iny				iny
.8590	b1 16		lda ($16),y			lda (tmp2),y
.8592	95 6b		sta $6b,x			sta FSMant2,x
.8594	c8		iny				iny
.8595	b1 16		lda ($16),y			lda (tmp2),y
.8597	95 61		sta $61,x			sta FSMant1,x
.8599	c8		iny				iny
.859a	b1 16		lda ($16),y			lda (tmp2),y
.859c	95 57		sta $57,x			sta FSMant0,x
.859e	c8		iny				iny			; copy exponent
.859f	b1 16		lda ($16),y			lda (tmp2),y
.85a1	95 4d		sta $4d,x			sta FSExp,x
.85a3	a6 14		ldx $14				ldx tmp1		; restore data stack index
=38					CL	.var *-(WordListLink+wh_Xt)
=$85a5					en = *	; remember here
>857d	26					.byte CL	;wh_CodeLength
.85a5	60		rts				rts
>85a6	46 21				L1:	.text "F!"	;  name of word as a string, ending at wh_NameLastChar
>85a8	22					.byte (("F!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>85a9	fa 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85ac	00					.byte 0	;wh_Flags	dictionary flags
=34088					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85ad	20 9a b3	jsr $b39a	FStore:		jsr PopYA		; pop addr
.85b0	85 14		sta $14		FStore_YA:	sta tmp1+0		; save addr
.85b2	84 15		sty $15				sty tmp1+1
.85b4	86 16		stx $16				stx tmp2		; save data stack index
.85b6	a6 4c		ldx $4c				ldx fp			; Y= FP stack index
.85b8	b5 75		lda $75,x			lda FSMant3,x		; copy mantissa
.85ba	a0 00		ldy #$00			ldy #0
.85bc	91 14		sta ($14),y			sta (tmp1),y
.85be	b5 6b		lda $6b,x			lda FSMant2,x
.85c0	c8		iny				iny
.85c1	91 14		sta ($14),y			sta (tmp1),y
.85c3	b5 61		lda $61,x			lda FSMant1,x
.85c5	c8		iny				iny
.85c6	91 14		sta ($14),y			sta (tmp1),y
.85c8	b5 57		lda $57,x			lda FSMant0,x
.85ca	c8		iny				iny
.85cb	91 14		sta ($14),y			sta (tmp1),y
.85cd	b5 4d		lda $4d,x			lda FSExp,x		; copy exponent
.85cf	c8		iny				iny
.85d0	91 14		sta ($14),y			sta (tmp1),y
.85d2	e6 4c		inc $4c				inc fp			; FDrop
.85d4	a6 16		ldx $16				ldx tmp2		; restore data stack index
=41					CL	.var *-(WordListLink+wh_Xt)
=$85d6					en = *	; remember here
>85ab	29					.byte CL	;wh_CodeLength
.85d6	60		rts				rts
>85d7	46 2c				L1:	.text "F,"	;  name of word as a string, ending at wh_NameLastChar
>85d9	82					.byte (("F,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>85da	28 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85dd	08					.byte NN	;wh_Flags	dictionary flags
=34137					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85de	a5 00		lda $00		FComma:		lda cp+0
.85e0	a4 01		ldy $01				ldy cp+1
.85e2	20 b0 85	jsr $85b0			jsr FStore_YA
.85e5	a9 05		lda #$05			lda #5			; Float
.85e7	20 96 b7	jsr $b796			jsr PushZA
.85ea	4c 78 c0	jmp $c078			jmp Allot
=15					CL	.var *-(WordListLink+wh_Xt)
=$85ed					en = *	; remember here
>85dc	0f					.byte CL	;wh_CodeLength
>85ed	46 30 21			L1:	.text "F0!"	;  name of word as a string, ending at wh_NameLastChar
>85f0	23					.byte (("F0!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>85f1	59 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85f4	08					.byte NN	;wh_Flags	dictionary flags
=34160					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85f5	20 9a b3	jsr $b39a	FZStore:	jsr PopYA		; pop addr
.85f8	85 14		sta $14		FZStore_YA:	sta tmp1+0
.85fa	84 15		sty $15				sty tmp1+1
.85fc	a9 00		lda #$00			lda #0
.85fe	a0 04		ldy #$04			ldy #5-1
.8600	91 14		sta ($14),y	-		sta (tmp1),y
.8602	88		dey				dey
.8603	10 fb		bpl $8600			bpl -
=16					CL	.var *-(WordListLink+wh_Xt)
=$8605					en = *	; remember here
>85f3	10					.byte CL	;wh_CodeLength
.8605	60		rts				rts
>8606	46 43 6d 70			L1:	.text "FCmp"	;  name of word as a string, ending at wh_NameLastChar
>860a	04					.byte (("FCmp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>860b	70 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>860d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>860e	08					.byte NN	;wh_Flags	dictionary flags
=34186					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.860f	20 20 86	jsr $8620			jsr FCmpA		; compare #s
.8612	a8		tay				tay			; return >0, 0, <0
.8613	4c 54 b7	jmp $b754			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$8616					en = *	; remember here
>860d	07					.byte CL	;wh_CodeLength
>8616	46 43 6d 70 41			L1:	.text "FCmpA"	;  name of word as a string, ending at wh_NameLastChar
>861b	25					.byte (("FCmpA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>861c	8a 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>861e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>861f	08					.byte NN	;wh_Flags	dictionary flags
=34203					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8620	86 14		stx $14		FCmpA:		stx tmp1		; save data stack index
.8622	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.8624	b5 57		lda $57,x			lda FSMant0+0,x		; r2 mantissa = 0 ?
.8626	f0 35		beq $865d			beq _r2Zero
.8628	b4 58		ldy $58,x			ldy FSMant0+1,x		; r1 mantissa = 0 ?
.862a	f0 2b		beq $8657			beq _r1Zero
.862c	55 58		eor $58,x			eor FSMant0+1,x		; compare mantissa sign
.862e	30 3d		bmi $866d			bmi _MantissaSignDifferent
.8630	38		sec				sec			; compare exponent
.8631	b5 4e		lda $4e,x			lda FSExp+1,x
.8633	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8635	d0 2b		bne $8662			bne _ExponentDifferent
.8637	98		tya				tya			; compare mantissa MSB
.8638	f5 57		sbc $57,x			sbc FSMant0+0,x		;   always same sign so can't overflow
.863a	d0 17		bne $8653			bne _13
.863c	b5 62		lda $62,x			lda FSMant1+1,x		; compare mantissa 1
.863e	f5 61		sbc $61,x			sbc FSMant1+0,x
.8640	d0 0c		bne $864e			bne _12
.8642	b5 6c		lda $6c,x			lda FSMant2+1,x		; compare mantissa 2
.8644	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8646	d0 06		bne $864e			bne _12
.8648	b5 76		lda $76,x			lda FSMant3+1,x		; compare mantissa LSB
.864a	f5 75		sbc $75,x			sbc FSMant3+0,x
.864c	f0 05		beq $8653			beq _13
.864e	6a		ror a		_12:		ror a
.864f	49 80		eor #$80	_14:		eor #$80
.8651	09 01		ora #$01			ora #1
.8653	a6 14		ldx $14		_13:		ldx tmp1		; restore data stack index
.8655	a8		tay				tay			; set CPU flags
.8656	60		rts				rts
.8657	b5 57		lda $57,x	_r1Zero:	lda FSMant0+0,x		; return r2
.8659	d0 f4		bne $864f			bne _14
.865b	f0 f6		beq $8653			beq _13
.865d	b5 58		lda $58,x	_r2Zero:	lda FSMant0+1,x		; return 0-r1
.865f	4c 53 86	jmp $8653			jmp _13
.8662					_ExponentDifferent:
.8662	50 02		bvc $8666			bvc +
.8664	49 80		eor #$80			eor #$80
.8666					+
.8666	55 57		eor $57,x			eor FSMant0+0,x
.8668	a6 14		ldx $14				ldx tmp1		; restore data stack index
.866a	09 01		ora #$01			ora #1			; set CPU flags
.866c	60		rts				rts
.866d					_MantissaSignDifferent:
.866d	98		tya				tya
.866e	a6 14		ldx $14				ldx tmp1		; restore data stack index
.8670	09 01		ora #$01			ora #1
.8672	60		rts				rts
=83					CL	.var *-(WordListLink+wh_Xt)
=$8673					en = *	; remember here
>861e	53					.byte CL	;wh_CodeLength
>8673	46 6c 6f 6f 72			L1:	.text "Floor"	;  name of word as a string, ending at wh_NameLastChar
>8678	45					.byte (("Floor"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8679	9b 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>867b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>867c	08					.byte NN	;wh_Flags	dictionary flags
=34296					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.867d	a4 4c		ldy $4c		Floor:		ldy fp
.867f	b9 57 00	lda $0057,y			lda FSMant0,y		; negative?
.8682	10 19		bpl $869d			bpl _a
.8684	b9 4d 00	lda $004d,y			lda FSExp,y		; > -1 ?
.8687	10 14		bpl $869d			bpl _a
.8689	a9 80		lda #$80			lda #$80		; return -1
.868b	99 57 00	sta $0057,y			sta FSMant0,y
.868e	a9 00		lda #$00			lda #0
.8690	99 4d 00	sta $004d,y			sta FSExp,y
.8693	99 61 00	sta $0061,y			sta FSMant1,y
.8696	99 6b 00	sta $006b,y			sta FSMant2,y
.8699	99 75 00	sta $0075,y			sta FSMant3,y
.869c	60		rts				rts
.869d	a9 1f		lda #$1f	_a:		lda #31
.869f	20 a5 86	jsr $86a5			jsr FIntAlignA
.86a2	4c a0 8a	jmp $8aa0			jmp FNorm
=40					CL	.var *-(WordListLink+wh_Xt)
=$86a5					en = *	; remember here
>867b	28					.byte CL	;wh_CodeLength
.86a5					FIntAlignA:
.86a5	85 16		sta $16				sta tmp2+0		; save alignment
.86a7	46 15		lsr $15				lsr tmp1+1		; init saved lo bit
.86a9	86 14		stx $14				stx tmp1+0		; save data stack index
.86ab	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.86ad	b5 57		lda $57,x			lda FSMant0,x
.86af	b4 4d		ldy $4d,x			ldy FSExp,x
.86b1	10 18		bpl $86cb			bpl _18
.86b3	a4 16		ldy $16				ldy tmp2+0		; return zero
.86b5	a9 00		lda #$00			lda #0
.86b7	95 61		sta $61,x			sta FSMant1,x
.86b9	95 6b		sta $6b,x			sta FSMant2,x
.86bb	95 75		sta $75,x			sta FSMant3,x
.86bd	f0 10		beq $86cf			beq _30
.86bf	c8		iny		_12:		iny			; exp += 1
.86c0	c9 80		cmp #$80			cmp #$80		; mantissa >>=1
.86c2	6a		ror a				ror a
.86c3	76 61		ror $61,x			ror FSMant1,x
.86c5	76 6b		ror $6b,x			ror FSMant2,x
.86c7	76 75		ror $75,x			ror FSMant3,x
.86c9	66 15		ror $15				ror tmp1+1		; save lo bit
.86cb	c4 16		cpy $16		_18:		cpy tmp2+0		; while exp<alignment
.86cd	90 f0		bcc $86bf			bcc _12
.86cf	95 57		sta $57,x	_30:		sta FSMant0,x
.86d1	94 4d		sty $4d,x			sty FSExp,x
.86d3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.86d5	06 15		asl $15				asl tmp1+1		; set carry bit
.86d7	60		rts				rts
>86d8	46 54 72 75 6e 63		L1:	.text "FTrunc"	;  name of word as a string, ending at wh_NameLastChar
>86de	66					.byte (("FTrunc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>86df	f8 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86e2	08					.byte NN	;wh_Flags	dictionary flags
=34398					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86e3	a4 4c		ldy $4c		FTrunc:		ldy fp
.86e5	b9 57 00	lda $0057,y			lda FSMant0,y
.86e8	10 93		bpl $867d			bpl Floor
.86ea	20 a2 8b	jsr $8ba2			jsr FNegate
.86ed	20 7d 86	jsr $867d			jsr Floor
.86f0	4c a2 8b	jmp $8ba2			jmp FNegate
>86f3	46 52 6f 75 6e 64		L1:	.text "FRound"	;  name of word as a string, ending at wh_NameLastChar
>86f9	86					.byte (("FRound"[-1]&7)<<5)+(*-L1)	;wh_HNL
>86fa	5e 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86fd	08					.byte NN	;wh_Flags	dictionary flags
=34425					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86fe	a9 1f		lda #$1f	FRound:		lda #31
.8700	20 a5 86	jsr $86a5			jsr FIntAlignA
.8703	90 03		bcc $8708			bcc _15
.8705	4c 5e 8b	jmp $8b5e			jmp F1Plus
.8708	4c a0 8a	jmp $8aa0	_15:		jmp FNorm
=13					CL	.var *-(WordListLink+wh_Xt)
=$870b					en = *	; remember here
>86fc	0d					.byte CL	;wh_CodeLength
>870b	46 49 6e 74 46 72 63		L1:	.text "FIntFrc"	;  name of word as a string, ending at wh_NameLastChar
>8712	67					.byte (("FIntFrc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8713	79 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8715	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8716	08					.byte NN	;wh_Flags	dictionary flags
=34450					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8717	20 78 84	jsr $8478	FIntFrc:	jsr FDup	; ( r1 r1 )
.871a	20 7d 86	jsr $867d			jsr Floor	; ( r1 rint )
.871d	20 39 85	jsr $8539			jsr FTuck	; ( rint r1 rint )
.8720	20 6b 8b	jsr $8b6b			jsr FMinus	; ( rint rfrac )
.8723	4c 00 85	jmp $8500			jmp FSwap	; ( rfrac rint )
=15					CL	.var *-(WordListLink+wh_Xt)
=$8726					en = *	; remember here
>8715	0f					.byte CL	;wh_CodeLength
>8726	46 30 3d			L1:	.text "F0="	;  name of word as a string, ending at wh_NameLastChar
>8729	a3					.byte (("F0="[-1]&7)<<5)+(*-L1)	;wh_HNL
>872a	92 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>872c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>872d	08					.byte NN	;wh_Flags	dictionary flags
=34473					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.872e	a4 4c		ldy $4c		FZEq:		ldy fp
.8730	b9 57 00	lda $0057,y			lda FSMant0,y
.8733	d0 26		bne $875b			bne FFalse1
.8735					FTrue1:
.8735	e6 4c		inc $4c				inc fp		; FDrop
.8737	4c 74 b7	jmp $b774			jmp True	; return true
=12					CL	.var *-(WordListLink+wh_Xt)
=$873a					en = *	; remember here
>872c	0c					.byte CL	;wh_CodeLength
>873a	46 30 3c 3e			L1:	.text "F0<>"	;  name of word as a string, ending at wh_NameLastChar
>873e	c4					.byte (("F0<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>873f	a9 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8741	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8742	08					.byte NN	;wh_Flags	dictionary flags
=34494					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8743	a4 4c		ldy $4c		FZNe:		ldy fp
.8745	b9 57 00	lda $0057,y			lda FSMant0,y
.8748	f0 11		beq $875b			beq FFalse1
.874a	d0 e9		bne $8735			bne FTrue1
=9					CL	.var *-(WordListLink+wh_Xt)
=$874c					en = *	; remember here
>8741	09					.byte CL	;wh_CodeLength
>874c	46 30 3c			L1:	.text "F0<"	;  name of word as a string, ending at wh_NameLastChar
>874f	83					.byte (("F0<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8750	be 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8752	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8753	08					.byte NN	;wh_Flags	dictionary flags
=34511					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8754	a4 4c		ldy $4c		FZLt:		ldy fp
.8756	b9 57 00	lda $0057,y			lda FSMant0,y
.8759	30 da		bmi $8735			bmi FTrue1
.875b					FFalse1:
.875b	e6 4c		inc $4c				inc fp		; FDrop
.875d	4c 87 b7	jmp $b787			jmp False	; return false
=12					CL	.var *-(WordListLink+wh_Xt)
=$8760					en = *	; remember here
>8752	0c					.byte CL	;wh_CodeLength
>8760	46 30 3e 3d			L1:	.text "F0>="	;  name of word as a string, ending at wh_NameLastChar
>8764	a4					.byte (("F0>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>8765	cf 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8767	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8768	08					.byte NN	;wh_Flags	dictionary flags
=34532					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8769	a4 4c		ldy $4c		FZGe:		ldy fp
.876b	b9 57 00	lda $0057,y			lda FSMant0,y
.876e	10 c5		bpl $8735			bpl FTrue1
.8770	30 e9		bmi $875b			bmi FFalse1
=9					CL	.var *-(WordListLink+wh_Xt)
=$8772					en = *	; remember here
>8767	09					.byte CL	;wh_CodeLength
>8772	46 30 3e			L1:	.text "F0>"	;  name of word as a string, ending at wh_NameLastChar
>8775	c3					.byte (("F0>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8776	e4 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8778	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8779	08					.byte NN	;wh_Flags	dictionary flags
=34549					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.877a	a4 4c		ldy $4c		FZGt:		ldy fp
.877c	b9 57 00	lda $0057,y			lda FSMant0,y
.877f	30 da		bmi $875b			bmi FFalse1
.8781	d0 b2		bne $8735			bne FTrue1
.8783	f0 d6		beq $875b			beq FFalse1
=11					CL	.var *-(WordListLink+wh_Xt)
=$8785					en = *	; remember here
>8778	0b					.byte CL	;wh_CodeLength
>8785	46 30 3c 3d			L1:	.text "F0<="	;  name of word as a string, ending at wh_NameLastChar
>8789	a4					.byte (("F0<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>878a	f5 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>878c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>878d	08					.byte NN	;wh_Flags	dictionary flags
=34569					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.878e	a4 4c		ldy $4c		FZLe:		ldy fp
.8790	b9 57 00	lda $0057,y			lda FSMant0,y
.8793	30 a0		bmi $8735			bmi FTrue1
.8795	d0 c4		bne $875b			bne FFalse1
.8797	f0 9c		beq $8735			beq FTrue1
=11					CL	.var *-(WordListLink+wh_Xt)
=$8799					en = *	; remember here
>878c	0b					.byte CL	;wh_CodeLength
>8799	46 3c				L1:	.text "F<"	;  name of word as a string, ending at wh_NameLastChar
>879b	82					.byte (("F<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>879c	09 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>879e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>879f	08					.byte NN	;wh_Flags	dictionary flags
=34587					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87a0	20 20 86	jsr $8620	FLt:		jsr FCmpA
.87a3	30 35		bmi $87da			bmi FTrue2
.87a5					FFalse2:
.87a5	e6 4c		inc $4c				inc fp		; FDrop
.87a7	e6 4c		inc $4c				inc fp		; FDrop
.87a9	4c 87 b7	jmp $b787			jmp False	; return False
=12					CL	.var *-(WordListLink+wh_Xt)
=$87ac					en = *	; remember here
>879e	0c					.byte CL	;wh_CodeLength
>87ac	46 3e 3d			L1:	.text "F>="	;  name of word as a string, ending at wh_NameLastChar
>87af	a3					.byte (("F>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>87b0	1b 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87b3	08					.byte NN	;wh_Flags	dictionary flags
=34607					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87b4	20 20 86	jsr $8620	FGe:		jsr FCmpA
.87b7	10 21		bpl $87da			bpl FTrue2
.87b9	30 ea		bmi $87a5			bmi FFalse2
=7					CL	.var *-(WordListLink+wh_Xt)
=$87bb					en = *	; remember here
>87b2	07					.byte CL	;wh_CodeLength
>87bb	46 3e				L1:	.text "F>"	;  name of word as a string, ending at wh_NameLastChar
>87bd	c2					.byte (("F>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>87be	2f 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87c0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87c1	08					.byte NN	;wh_Flags	dictionary flags
=34621					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87c2	20 20 86	jsr $8620	FGt:		jsr FCmpA
.87c5	30 de		bmi $87a5			bmi FFalse2
.87c7	d0 11		bne $87da			bne FTrue2
.87c9	f0 da		beq $87a5			beq FFalse2
=9					CL	.var *-(WordListLink+wh_Xt)
=$87cb					en = *	; remember here
>87c0	09					.byte CL	;wh_CodeLength
>87cb	46 3c 3d			L1:	.text "F<="	;  name of word as a string, ending at wh_NameLastChar
>87ce	a3					.byte (("F<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>87cf	3d 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87d2	08					.byte NN	;wh_Flags	dictionary flags
=34638					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87d3	20 20 86	jsr $8620	FLe:		jsr FCmpA
.87d6	30 02		bmi $87da			bmi FTrue2
.87d8	d0 cb		bne $87a5			bne FFalse2
.87da					FTrue2:
.87da	e6 4c		inc $4c				inc fp		; FDrop
.87dc	e6 4c		inc $4c				inc fp		; FDrop
.87de	4c 74 b7	jmp $b774			jmp True	; return True
=14					CL	.var *-(WordListLink+wh_Xt)
=$87e1					en = *	; remember here
>87d1	0e					.byte CL	;wh_CodeLength
>87e1	46 3c 3e			L1:	.text "F<>"	;  name of word as a string, ending at wh_NameLastChar
>87e4	c3					.byte (("F<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>87e5	4e 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87e8	08					.byte NN	;wh_Flags	dictionary flags
=34660					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87e9	20 20 86	jsr $8620	FNe:		jsr FCmpA
.87ec	d0 ec		bne $87da			bne FTrue2
.87ee	f0 b5		beq $87a5			beq FFalse2
=7					CL	.var *-(WordListLink+wh_Xt)
=$87f0					en = *	; remember here
>87e7	07					.byte CL	;wh_CodeLength
>87f0	46 3d				L1:	.text "F="	;  name of word as a string, ending at wh_NameLastChar
>87f2	a2					.byte (("F="[-1]&7)<<5)+(*-L1)	;wh_HNL
>87f3	64 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87f5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87f6	08					.byte NN	;wh_Flags	dictionary flags
=34674					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87f7	20 20 86	jsr $8620	FEq:		jsr FCmpA
.87fa	d0 a9		bne $87a5			bne FFalse2
.87fc	f0 dc		beq $87da			beq FTrue2
=7					CL	.var *-(WordListLink+wh_Xt)
=$87fe					en = *	; remember here
>87f5	07					.byte CL	;wh_CodeLength
>87fe	46 7e 41 62 73			L1:	.text "F~Abs"	;  name of word as a string, ending at wh_NameLastChar
>8803	65					.byte (("F~Abs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8804	72 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8806	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8807	08					.byte NN	;wh_Flags	dictionary flags
=34691					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8808	20 72 85	jsr $8572	FTAbs:		jsr FMRot
.880b	20 6b 8b	jsr $8b6b			jsr FMinus
.880e	20 c9 8b	jsr $8bc9			jsr FAbs
.8811	4c c2 87	jmp $87c2			jmp FGt
=12					CL	.var *-(WordListLink+wh_Xt)
=$8814					en = *	; remember here
>8806	0c					.byte CL	;wh_CodeLength
>8814	46 7e 52 65 6c			L1:	.text "F~Rel"	;  name of word as a string, ending at wh_NameLastChar
>8819	85					.byte (("F~Rel"[-1]&7)<<5)+(*-L1)	;wh_HNL
>881a	83 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>881c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>881d	08					.byte NN	;wh_Flags	dictionary flags
=34713					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.881e	20 9c 84	jsr $849c	FTRel:		jsr FOver
.8821	a9 03		lda #$03			lda #3
.8823	20 c3 84	jsr $84c3			jsr FPickA
.8826	20 29 8b	jsr $8b29			jsr FPlus
.8829	20 c9 8b	jsr $8bc9			jsr FAbs
.882c	20 fd 8b	jsr $8bfd			jsr FStar		; r1 r2 r3*|r1+r2|
.882f	20 72 85	jsr $8572			jsr FMRot		; r3*|r1+r2| r1 r2
.8832	20 6b 8b	jsr $8b6b			jsr FMinus
.8835	20 c9 8b	jsr $8bc9			jsr FAbs
.8838	4c c2 87	jmp $87c2			jmp FGt
=29					CL	.var *-(WordListLink+wh_Xt)
=$883b					en = *	; remember here
>881c	1d					.byte CL	;wh_CodeLength
>883b	46 7e				L1:	.text "F~"	;  name of word as a string, ending at wh_NameLastChar
>883d	c2					.byte (("F~"[-1]&7)<<5)+(*-L1)	;wh_HNL
>883e	99 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8840	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8841	08					.byte NN	;wh_Flags	dictionary flags
=34749					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8842	a4 4c		ldy $4c		FTilde:		ldy fp
.8844	b9 57 00	lda $0057,y			lda FSMant0,y
.8847	30 06		bmi $884f			bmi _10			; r3<0
.8849	d0 bd		bne $8808			bne FTAbs		; r3>0
.884b	e6 4c		inc $4c				inc fp			; r3=0
.884d	d0 a8		bne $87f7			bne FEq
.884f	20 a2 8b	jsr $8ba2	_10:		jsr FNegate
.8852	4c 1e 88	jmp $881e			jmp FTRel
=19					CL	.var *-(WordListLink+wh_Xt)
=$8855					en = *	; remember here
>8840	13					.byte CL	;wh_CodeLength
>8855	46 56 61 72 69 61 62 6c		L1:	.text "FVariable"	;  name of word as a string, ending at wh_NameLastChar
>885d	65
>885e	a9					.byte (("FVariable"[-1]&7)<<5)+(*-L1)	;wh_HNL
>885f	bd 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8861	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8862	0c					.byte IM+NN	;wh_Flags	dictionary flags
=34782					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8863	20 6f c1	jsr $c16f	FVariable:	jsr Create		; compile word header & push PFA adr
.8866	20 a9 bb	jsr $bba9			jsr adjust_z		; fix word code length
.8869	20 ec 88	jsr $88ec			jsr F0			; alloc & init data
.886c	4c de 85	jmp $85de			jmp FComma
=12					CL	.var *-(WordListLink+wh_Xt)
=$886f					en = *	; remember here
>8861	0c					.byte CL	;wh_CodeLength
>886f	46 4c 69 74 65 72 61 6c		L1:	.text "FLiteral"	;  name of word as a string, ending at wh_NameLastChar
>8877	88					.byte (("FLiteral"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8878	de 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>887a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>887b	0c					.byte IM+NN	;wh_Flags	dictionary flags
=34807					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.887c	20 91 88	jsr $8891	FLiteral:	jsr FLitTest
.887f	f0 0a		beq $888b			beq _Short
.8881	a9 cc		lda #$cc			lda #<FLitI		; compile JSR FLitI
.8883	a0 88		ldy #$88			ldy #>FLitI
.8885	20 ce cc	jsr $ccce			jsr Jsr_Comma_YA
.8888	4c de 85	jmp $85de			jmp FComma		; inline operand, return
.888b	20 9d 88	jsr $889d	_Short:		jsr FLitShort
.888e	4c ce cc	jmp $ccce			jmp Jsr_Comma_YA	; compile jsr FLitYA, & return
=21					CL	.var *-(WordListLink+wh_Xt)
=$8891					en = *	; remember here
>887a	15					.byte CL	;wh_CodeLength
.8891					FLitTest:
.8891	a4 4c		ldy $4c				ldy fp
.8893	b9 61 00	lda $0061,y			lda FSMant1,y		; will short work?
.8896	19 6b 00	ora $006b,y			ora FSMant2,y
.8899	19 75 00	ora $0075,y			ora FSMant3,y
.889c	60		rts				rts
.889d					FLitShort:
.889d	a9 a9		lda #$a9			lda #$a9		; compile LDA #mant0
.889f	20 8f cc	jsr $cc8f			jsr C_Comma_A
.88a2	b9 57 00	lda $0057,y			lda FSMant0,y
.88a5	20 8f cc	jsr $cc8f			jsr C_Comma_A
.88a8	a9 a0		lda #$a0			lda #$a0		; compile LDY #exp
.88aa	20 8f cc	jsr $cc8f			jsr C_Comma_A
.88ad	b9 4d 00	lda $004d,y			lda FSExp,y
.88b0	20 8f cc	jsr $cc8f			jsr C_Comma_A
.88b3	e6 4c		inc $4c				inc fp			; FDrop
.88b5	a9 ba		lda #$ba			lda #<FLitYA		; point at FLitYA
.88b7	a0 88		ldy #$88			ldy #>FLitYA
.88b9	60		rts				rts
.88ba					FLitYA:
.88ba	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.88bd	94 4d		sty $4d,x			sty FSExp,x
.88bf	95 57		sta $57,x			sta FSMant0,x
.88c1	a9 00		lda #$00			lda #0
.88c3	95 61		sta $61,x			sta FSMant1,x
.88c5	95 6b		sta $6b,x			sta FSMant2,x
.88c7	95 75		sta $75,x			sta FSMant3,x
.88c9	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.88cb	60		rts				rts
.88cc					FLitI:
.88cc	68		pla				pla			; tmp2= RTS addr
.88cd	85 16		sta $16				sta tmp2+0
.88cf	18		clc				clc			; bump RTS addr over inline data
.88d0	69 05		adc #$05			adc #5
.88d2	a8		tay				tay
.88d3	68		pla				pla
.88d4	85 17		sta $17				sta tmp2+1
.88d6	69 00		adc #$00			adc #0
.88d8	48		pha				pha
.88d9	98		tya				tya
.88da	48		pha				pha
.88db	e6 16		inc $16				inc tmp2+0		; tmp2 +=1 1 (correct RTS addr)
.88dd	d0 02		bne $88e1			bne +
.88df	e6 17		inc $17				inc tmp2+1
.88e1					+
.88e1	4c 86 85	jmp $8586			jmp FAt_Tmp2		; fetch inline data, & return
>88e4	30 2e 65			L1:	.text "0.e"	;  name of word as a string, ending at wh_NameLastChar
>88e7	a3					.byte (("0.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>88e8	f7 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88ea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88eb	08					.byte NN	;wh_Flags	dictionary flags
=34919					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88ec	a9 00		lda #$00	F0:		lda #0
.88ee	a0 80		ldy #$80			ldy #$80
.88f0	d0 c8		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$88f2					en = *	; remember here
>88ea	06					.byte CL	;wh_CodeLength
>88f2	31 30 30 30 2e 65		L1:	.text "1000.e"	;  name of word as a string, ending at wh_NameLastChar
>88f8	a6					.byte (("1000.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>88f9	67 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88fb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88fc	08					.byte NN	;wh_Flags	dictionary flags
=34936					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88fd	a9 7d		lda #$7d	F1000:		lda #$7d
.88ff	a0 0a		ldy #$0a			ldy #10
.8901	d0 b7		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8903					en = *	; remember here
>88fb	06					.byte CL	;wh_CodeLength
>8903	31 30 2e 65			L1:	.text "10.e"	;  name of word as a string, ending at wh_NameLastChar
>8907	a4					.byte (("10.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8908	78 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>890a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>890b	08					.byte NN	;wh_Flags	dictionary flags
=34951					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.890c	a9 50		lda #$50	F10:		lda #$50
.890e	a0 04		ldy #$04			ldy #4
.8910	d0 a8		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8912					en = *	; remember here
>890a	06					.byte CL	;wh_CodeLength
>8912	32 2e 65			L1:	.text "2.e"	;  name of word as a string, ending at wh_NameLastChar
>8915	a3					.byte (("2.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8916	87 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8918	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8919	08					.byte NN	;wh_Flags	dictionary flags
=34965					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.891a	a9 40		lda #$40	F2:		lda #$40
.891c	a0 02		ldy #$02			ldy #2
.891e	d0 9a		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8920					en = *	; remember here
>8918	06					.byte CL	;wh_CodeLength
>8920	31 2e 65			L1:	.text "1.e"	;  name of word as a string, ending at wh_NameLastChar
>8923	a3					.byte (("1.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8924	95 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8926	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8927	08					.byte NN	;wh_Flags	dictionary flags
=34979					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8928	a9 40		lda #$40	F1:		lda #$40
.892a	a0 01		ldy #$01			ldy #1
.892c	d0 8c		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$892e					en = *	; remember here
>8926	06					.byte CL	;wh_CodeLength
>892e	2e 31 65			L1:	.text ".1e"	;  name of word as a string, ending at wh_NameLastChar
>8931	a3					.byte ((".1e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8932	a3 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8934	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8935	08					.byte NN	;wh_Flags	dictionary flags
=34993					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8936	20 bb 89	jsr $89bb	F10th:		jsr FConstantRun
>8939	67 66 66 66					.dword $66666667	; 32 bit signed binary mantissa.  $40000000 = +0.5
>893d	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$893e					en = *	; remember here
>8934	08					.byte CL	;wh_CodeLength
>893e	50 69				L1:	.text "Pi"	;  name of word as a string, ending at wh_NameLastChar
>8940	22					.byte (("Pi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8941	b1 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8943	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8944	08					.byte NN	;wh_Flags	dictionary flags
=35008					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8945	20 bb 89	jsr $89bb	FPi:		jsr FConstantRun
>8948	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>894c	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$894d					en = *	; remember here
>8943	08					.byte CL	;wh_CodeLength
>894d	50 69 2f 32			L1:	.text "Pi/2"	;  name of word as a string, ending at wh_NameLastChar
>8951	44					.byte (("Pi/2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8952	c0 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8954	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8955	08					.byte NN	;wh_Flags	dictionary flags
=35025					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8956	20 bb 89	jsr $89bb	FPiH:		jsr FConstantRun
>8959	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>895d	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$895e					en = *	; remember here
>8954	08					.byte CL	;wh_CodeLength
>895e	50 69 2f 34			L1:	.text "Pi/4"	;  name of word as a string, ending at wh_NameLastChar
>8962	84					.byte (("Pi/4"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8963	d1 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8965	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8966	08					.byte NN	;wh_Flags	dictionary flags
=35042					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8967	20 bb 89	jsr $89bb	FPiQ:		jsr FConstantRun
>896a	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>896e	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$896f					en = *	; remember here
>8965	08					.byte CL	;wh_CodeLength
>896f	32 50 69			L1:	.text "2Pi"	;  name of word as a string, ending at wh_NameLastChar
>8972	23					.byte (("2Pi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8973	e2 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8975	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8976	08					.byte NN	;wh_Flags	dictionary flags
=35058					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8977	20 bb 89	jsr $89bb	F2Pi:		jsr FConstantRun
>897a	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>897e	03						.char 3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$897f					en = *	; remember here
>8975	08					.byte CL	;wh_CodeLength
>897f	46 2e 45			L1:	.text "F.E"	;  name of word as a string, ending at wh_NameLastChar
>8982	a3					.byte (("F.E"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8983	f2 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8985	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8986	08					.byte NN	;wh_Flags	dictionary flags
=35074					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8987	20 bb 89	jsr $89bb	FE:		jsr FConstantRun
>898a	2c 2a fc 56					.dword $56fc2a2c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>898e	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$898f					en = *	; remember here
>8985	08					.byte CL	;wh_CodeLength
>898f	46 43 6f 6e 73 74 61 6e		L1:	.text "FConstant"	;  name of word as a string, ending at wh_NameLastChar
>8997	74
>8998	89					.byte (("FConstant"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8999	02 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>899b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>899c	08					.byte NN	;wh_Flags	dictionary flags
=35096					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.899d	20 d2 c0	jsr $c0d2	FConstant:	jsr Header_Comma	; compile word header
.89a0	20 91 88	jsr $8891			jsr FLitTest		; will short work?
.89a3	f0 0d		beq $89b2			beq _Short
.89a5	a9 bb		lda #$bb			lda #<FConstantRun	; compile call
.89a7	a0 89		ldy #$89			ldy #>FConstantRun
.89a9	20 ce cc	jsr $ccce			jsr Jsr_Comma_YA
.89ac	20 a9 bb	jsr $bba9			jsr adjust_z
.89af	4c de 85	jmp $85de			jmp FComma		; inline operand, & return
.89b2					_Short:
.89b2	20 9d 88	jsr $889d			jsr FLitShort		; compile load value
.89b5	20 e5 cc	jsr $cce5			jsr Jmp_Comma_YA
.89b8	4c a9 bb	jmp $bba9			jmp adjust_z
=30					CL	.var *-(WordListLink+wh_Xt)
=$89bb					en = *	; remember here
>899b	1e					.byte CL	;wh_CodeLength
.89bb					FConstantRun:
.89bb	68		pla				pla			; tmp2= pop RTS addr & add 1
.89bc	18		clc				clc
.89bd	69 01		adc #$01			adc #1
.89bf	85 16		sta $16				sta tmp2+0
.89c1	68		pla				pla
.89c2	69 00		adc #$00			adc #0
.89c4	85 17		sta $17				sta tmp2+1
.89c6	4c 86 85	jmp $8586			jmp FAt_Tmp2		; fetch inline data, & return
>89c9	46 56 61 6c 75 65		L1:	.text "FValue"	;  name of word as a string, ending at wh_NameLastChar
>89cf	a6					.byte (("FValue"[-1]&7)<<5)+(*-L1)	;wh_HNL
>89d0	18 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89d3	0c					.byte IM+NN	;wh_Flags	dictionary flags
=35151					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89d4	20 d2 c0	jsr $c0d2	FValue:		jsr Header_Comma	; compile word header
.89d7	a9 e4		lda #$e4			lda #<FValue_runtime	; compile JSR FValue_runtime
.89d9	a0 89		ldy #$89			ldy #>FValue_runtime
.89db	20 ce cc	jsr $ccce			jsr Jsr_Comma_YA
.89de	20 a9 bb	jsr $bba9			jsr adjust_z		; fix word length
.89e1	4c de 85	jmp $85de			jmp FComma		; alloc & init value
=16					CL	.var *-(WordListLink+wh_Xt)
=$89e4					en = *	; remember here
>89d2	10					.byte CL	;wh_CodeLength
.89e4					FValue_runtime:
.89e4	4c bb 89	jmp $89bb			jmp FConstantRun
>89e7	46 53 63 61 6c 65		L1:	.text "FScale"	;  name of word as a string, ending at wh_NameLastChar
>89ed	a6					.byte (("FScale"[-1]&7)<<5)+(*-L1)	;wh_HNL
>89ee	4f 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89f1	08					.byte NN	;wh_Flags	dictionary flags
=35181					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89f2	20 7e b3	jsr $b37e	FScale:		jsr PopA		; pop n
.89f5	86 14		stx $14		FScaleA:	stx tmp1		; save data stack index
.89f7	a6 4c		ldx $4c				ldx fp
.89f9	b4 57		ldy $57,x			ldy FSMant0,x		; mantissa zero?
.89fb	f0 07		beq $8a04			beq _8
.89fd	18		clc				clc
.89fe	75 4d		adc $4d,x			adc FSExp,x
.8a00	95 4d		sta $4d,x			sta FSExp,x
.8a02	70 03		bvs $8a07			bvs _overflow		; overflow or underflow?
.8a04	a6 14		ldx $14		_8:		ldx tmp1		; restore data stack index
.8a06	60		rts				rts
.8a07					_overflow:
.8a07	a6 14		ldx $14				ldx tmp1		; restore data stack index
.8a09	20 fc b3	jsr $b3fc			jsr Throw_FpOutOfRange
=26					CL	.var *-(WordListLink+wh_Xt)
=$8a0c					en = *	; remember here
>89f0	1a					.byte CL	;wh_CodeLength
>8a0c	46 32 2a			L1:	.text "F2*"	;  name of word as a string, ending at wh_NameLastChar
>8a0f	43					.byte (("F2*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a10	6d 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a12	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a13	08					.byte NN	;wh_Flags	dictionary flags
=35215					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a14	a9 01		lda #$01	F2Star:		lda #1
.8a16	d0 dd		bne $89f5			bne FScaleA
=4					CL	.var *-(WordListLink+wh_Xt)
=$8a18					en = *	; remember here
>8a12	04					.byte CL	;wh_CodeLength
>8a18	46 32 2f			L1:	.text "F2/"	;  name of word as a string, ending at wh_NameLastChar
>8a1b	e3					.byte (("F2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a1c	8f 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a1e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a1f	08					.byte NN	;wh_Flags	dictionary flags
=35227					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a20	a9 ff		lda #$ff	F2Slash:	lda #$ff
.8a22	d0 d1		bne $89f5			bne FScaleA
=4					CL	.var *-(WordListLink+wh_Xt)
=$8a24					en = *	; remember here
>8a1e	04					.byte CL	;wh_CodeLength
>8a24	2b 8a				L1:	.text FMAlignX	;  name of word as a string, ending at wh_NameLastChar
>8a26	82					.byte ((FMAlignX[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a27	9b 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a29	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a2a	08					.byte NN	;wh_Flags	dictionary flags
=35238					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a2b	86 14		stx $14		FMAlignX:	stx tmp1+0	; save data stack index
.8a2d	a6 4c		ldx $4c				ldx fp		; load FP stack index
.8a2f	e0 09		cpx #$09			cpx #FDim-1	; check FP stack for 2 entries
.8a31	b0 60		bcs $8a93			bcs Throw_FPStack_3
.8a33	b5 4d		lda $4d,x			lda FSExp+0,x
.8a35	38		sec				sec
.8a36	f5 4e		sbc $4e,x			sbc FSExp+1,x	; compare exponents
.8a38	a8		tay				tay
.8a39	f0 22		beq $8a5d			beq _rts	; already = ?
.8a3b	10 2b		bpl $8a68			bpl _2		; r2 smaller?
.8a3d					_1:
.8a3d	70 4a		bvs $8a89			bvs _2z		; was this a big positive #?
.8a3f	c0 e0		cpy #$e0			cpy #-32
.8a41	90 1b		bcc $8a5e			bcc _1z		; all significant bits gone?
.8a43	b5 57		lda $57,x			lda FSMant0+0,x
.8a45	29 80		and #$80			and #$80
.8a47	85 15		sta $15				sta tmp1+1	; prepare sign for shifts
.8a49	b5 57		lda $57,x			lda FSMant0+0,x
.8a4b	4a		lsr a		_1s:		lsr a
.8a4c	05 15		ora $15				ora tmp1+1
.8a4e	76 61		ror $61,x			ror FSMant1+0,x
.8a50	76 6b		ror $6b,x			ror FSMant2+0,x
.8a52	76 75		ror $75,x			ror FSMant3+0,x
.8a54	c8		iny				iny
.8a55	d0 f4		bne $8a4b			bne _1s
.8a57	95 57		sta $57,x	_1e:		sta FSMant0+0,x
.8a59	b5 4e		lda $4e,x			lda FSExp+1,x
.8a5b	95 4d		sta $4d,x			sta FSExp+0,x
.8a5d	60		rts		_rts:		rts
.8a5e	a9 00		lda #$00	_1z:		lda #0		; TOS=0
.8a60	95 61		sta $61,x			sta FSMant1+0,x
.8a62	95 6b		sta $6b,x			sta FSMant2+0,x
.8a64	95 75		sta $75,x			sta FSMant3+0,x
.8a66	f0 ef		beq $8a57			beq _1e
.8a68					_2:
.8a68	70 f4		bvs $8a5e			bvs _1z		; was this a big negative #?
.8a6a	c0 20		cpy #$20			cpy #32
.8a6c	b0 1b		bcs $8a89			bcs _2z		; all significant bits gone?
.8a6e	b5 58		lda $58,x			lda FSMant0+1,x
.8a70	29 80		and #$80			and #$80
.8a72	85 15		sta $15				sta tmp1+1	; prepare sign for shifts
.8a74	b5 58		lda $58,x			lda FSMant0+1,x
.8a76	4a		lsr a		_2s:		lsr a
.8a77	05 15		ora $15				ora tmp1+1
.8a79	76 62		ror $62,x			ror FSMant1+1,x
.8a7b	76 6c		ror $6c,x			ror FSMant2+1,x
.8a7d	76 76		ror $76,x			ror FSMant3+1,x
.8a7f	88		dey				dey
.8a80	d0 f4		bne $8a76			bne _2s
.8a82	95 58		sta $58,x	_2e:		sta FSMant0+1,x
.8a84	b5 4d		lda $4d,x			lda FSExp+0,x
.8a86	95 4e		sta $4e,x			sta FSExp+1,x
.8a88	60		rts				rts
.8a89	a9 00		lda #$00	_2z:		lda #0		; NOS=0
.8a8b	95 62		sta $62,x			sta FSMant1+1,x
.8a8d	95 6c		sta $6c,x			sta FSMant2+1,x
.8a8f	95 76		sta $76,x			sta FSMant3+1,x
.8a91	f0 ef		beq $8a82			beq _2e
=104					CL	.var *-(WordListLink+wh_Xt)
=$8a93					en = *	; remember here
>8a29	68					.byte CL	;wh_CodeLength
.8a93	4c f2 b3	jmp $b3f2	Throw_FPStack_3: jmp Throw_FPStack
>8a96	46 4e 6f 72 6d			L1:	.text "FNorm"	;  name of word as a string, ending at wh_NameLastChar
>8a9b	a5					.byte (("FNorm"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a9c	a6 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a9e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a9f	08					.byte NN	;wh_Flags	dictionary flags
=35355					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8aa0	86 14		stx $14		FNorm:		stx tmp1+0		; save data stack index
.8aa2	a6 4c		ldx $4c		FNormX:		ldx fp			; switch to FP stack
.8aa4	b4 4d		ldy $4d,x			ldy FSExp,x
.8aa6	b5 57		lda $57,x			lda FSMant0,x		; mantissa negative?
.8aa8	30 2d		bmi $8ad7			bmi _Neg
.8aaa	d0 0f		bne $8abb			bne _Pos2		; do byte shift
.8aac	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8aaf	d0 0a		bne $8abb			bne _Pos2
.8ab1	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ab4	d0 05		bne $8abb			bne _Pos2
.8ab6	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ab9	f0 43		beq $8afe			beq _zero		; no significant bits left?
.8abb	18		clc		_Pos2:		clc
.8abc	30 0a		bmi $8ac8			bmi _RShft
.8abe	88		dey		_Pos3:		dey			; do bit shift
.8abf	16 75		asl $75,x			asl FSMant3,x
.8ac1	36 6b		rol $6b,x			rol FSMant2,x
.8ac3	36 61		rol $61,x			rol FSMant1,x
.8ac5	2a		rol a				rol a
.8ac6	10 f6		bpl $8abe			bpl _Pos3
.8ac8					_RShft:
.8ac8	c8		iny				iny
.8ac9	6a		ror a				ror a
.8aca	76 61		ror $61,x			ror FSMant1,x
.8acc	76 6b		ror $6b,x			ror FSMant2,x
.8ace	76 75		ror $75,x			ror FSMant3,x
.8ad0					_28:
.8ad0	95 57		sta $57,x			sta FSMant0,x
.8ad2	94 4d		sty $4d,x			sty FSExp,x
.8ad4	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.8ad6	60		rts				rts
.8ad7					_Neg:
.8ad7	c9 ff		cmp #$ff			cmp #$ff
.8ad9	d0 11		bne $8aec			bne _Neg2	; do byte shift
.8adb	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ade	c9 ff		cmp #$ff			cmp #$ff
.8ae0	d0 0a		bne $8aec			bne _Neg2
.8ae2	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ae5	c9 ff		cmp #$ff			cmp #$ff
.8ae7	d0 03		bne $8aec			bne _Neg2
.8ae9	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8aec	c9 00		cmp #$00	_Neg2:		cmp #0
.8aee	10 d8		bpl $8ac8			bpl _RShft
.8af0	88		dey		_Neg3:		dey
.8af1	16 75		asl $75,x			asl FSMant3,x
.8af3	36 6b		rol $6b,x			rol FSMant2,x
.8af5	36 61		rol $61,x			rol FSMant1,x
.8af7	2a		rol a				rol a
.8af8	30 f6		bmi $8af0			bmi _Neg3
.8afa	10 cc		bpl $8ac8			bpl _RShft
.8afc	68		pla		_Zerop:		pla
.8afd	68		pla				pla		; pop rts addr from _ShiftB
.8afe	a9 00		lda #$00	_zero:		lda #0
.8b00	95 75		sta $75,x			sta FSMant3,x
.8b02	95 6b		sta $6b,x			sta FSMant2,x
.8b04	95 61		sta $61,x			sta FSMant1,x
.8b06	a0 80		ldy #$80			ldy #$80
.8b08	d0 c6		bne $8ad0			bne _28
.8b0a					_ShiftB:
.8b0a	98		tya				tya
.8b0b	38		sec				sec
.8b0c	e9 08		sbc #$08			sbc #8
.8b0e	a8		tay				tay
.8b0f	70 eb		bvs $8afc			bvs _zerop	;is this useful? do we need more of them?
.8b11	b5 61		lda $61,x			lda FSMant1,x
.8b13	48		pha				pha
.8b14	b5 6b		lda $6b,x			lda FSMant2,x
.8b16	95 61		sta $61,x			sta FSMant1,x
.8b18	b5 75		lda $75,x			lda FSMant3,x
.8b1a	95 6b		sta $6b,x			sta FSMant2,x
.8b1c	a9 00		lda #$00			lda #0
.8b1e	95 75		sta $75,x			sta FSMant3,x
.8b20	68		pla				pla
.8b21	60		rts				rts
=130					CL	.var *-(WordListLink+wh_Xt)
=$8b22					en = *	; remember here
>8a9e	82					.byte CL	;wh_CodeLength
>8b22	46 2b				L1:	.text "F+"	;  name of word as a string, ending at wh_NameLastChar
>8b24	62					.byte (("F+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b25	1b 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b27	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b28	08					.byte NN	;wh_Flags	dictionary flags
=35492					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b29	20 2b 8a	jsr $8a2b	FPlus:		jsr FMAlignX	; align mantissas
.8b2c	18		clc				clc		; add mantissas
.8b2d	b5 76		lda $76,x			lda FSMant3+1,x
.8b2f	75 75		adc $75,x			adc FSMant3+0,x
.8b31	95 76		sta $76,x			sta FSMant3+1,x
.8b33	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b35	75 6b		adc $6b,x			adc FSMant2+0,x
.8b37	95 6c		sta $6c,x			sta FSMant2+1,x
.8b39	b5 62		lda $62,x			lda FSMant1+1,x
.8b3b	75 61		adc $61,x			adc FSMant1+0,x
.8b3d	95 62		sta $62,x			sta FSMant1+1,x
.8b3f	b5 58		lda $58,x			lda FSMant0+1,x
.8b41	75 57		adc $57,x			adc FSMant0+0,x
.8b43					FPlusFin:
.8b43	e8		inx				inx		; FDrop
.8b44	86 4c		stx $4c				stx fp
.8b46	50 09		bvc $8b51	FPlusFin3:	bvc _19		; if overflow
.8b48	6a		ror a				ror a		;   shift mantissa right 1 bit
.8b49	76 61		ror $61,x			ror FSMant1,x
.8b4b	76 6b		ror $6b,x			ror FSMant2,x
.8b4d	76 75		ror $75,x			ror FSMant3,x
.8b4f	f6 4d		inc $4d,x			inc FSExp,x	;   adjust exponent
.8b51					_19:
.8b51	95 57		sta $57,x			sta FSMant0,x
.8b53	4c a2 8a	jmp $8aa2			jmp FNormX	; normalize, return
=45					CL	.var *-(WordListLink+wh_Xt)
=$8b56					en = *	; remember here
>8b27	2d					.byte CL	;wh_CodeLength
>8b56	46 31 2b			L1:	.text "F1+"	;  name of word as a string, ending at wh_NameLastChar
>8b59	63					.byte (("F1+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b5a	a4 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b5c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b5d	08					.byte NN	;wh_Flags	dictionary flags
=35545					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b5e	20 28 89	jsr $8928	F1Plus:		jsr F1
.8b61	4c 29 8b	jmp $8b29			jmp FPlus
=6					CL	.var *-(WordListLink+wh_Xt)
=$8b64					en = *	; remember here
>8b5c	06					.byte CL	;wh_CodeLength
>8b64	46 2d				L1:	.text "F-"	;  name of word as a string, ending at wh_NameLastChar
>8b66	a2					.byte (("F-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b67	d9 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b69	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b6a	08					.byte NN	;wh_Flags	dictionary flags
=35558					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b6b	20 2b 8a	jsr $8a2b	FMinus:		jsr FMAlignX	; align mantissas
.8b6e	38		sec				sec		; subtract mantissas
.8b6f	b5 76		lda $76,x			lda FSMant3+1,x
.8b71	f5 75		sbc $75,x			sbc FSMant3+0,x
.8b73	95 76		sta $76,x			sta FSMant3+1,x
.8b75	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b77	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8b79	95 6c		sta $6c,x			sta FSMant2+1,x
.8b7b	b5 62		lda $62,x			lda FSMant1+1,x
.8b7d	f5 61		sbc $61,x			sbc FSMant1+0,x
.8b7f	95 62		sta $62,x			sta FSMant1+1,x
.8b81	b5 58		lda $58,x			lda FSMant0+1,x
.8b83	f5 57		sbc $57,x			sbc FSMant0+0,x
.8b85	4c 43 8b	jmp $8b43			jmp FPlusFin
=29					CL	.var *-(WordListLink+wh_Xt)
=$8b88					en = *	; remember here
>8b69	1d					.byte CL	;wh_CodeLength
>8b88	46 31 2d			L1:	.text "F1-"	;  name of word as a string, ending at wh_NameLastChar
>8b8b	a3					.byte (("F1-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b8c	e6 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b8e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b8f	08					.byte NN	;wh_Flags	dictionary flags
=35595					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b90	20 28 89	jsr $8928	F1Minus:	jsr F1
.8b93	4c 6b 8b	jmp $8b6b			jmp FMinus
=6					CL	.var *-(WordListLink+wh_Xt)
=$8b96					en = *	; remember here
>8b8e	06					.byte CL	;wh_CodeLength
>8b96	46 4e 65 67 61 74 65		L1:	.text "FNegate"	;  name of word as a string, ending at wh_NameLastChar
>8b9d	a7					.byte (("FNegate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b9e	0b 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ba0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ba1	08					.byte NN	;wh_Flags	dictionary flags
=35613					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ba2	86 14		stx $14		FNegate:	stx tmp1	; save data stack index
.8ba4	a6 4c		ldx $4c				ldx fp		; X= FP stack index
.8ba6	38		sec				sec		; mantissa = 0 - mantissa
.8ba7	a9 00		lda #$00			lda #0
.8ba9	f5 75		sbc $75,x			sbc FSMant3,x
.8bab	95 75		sta $75,x			sta FSMant3,x
.8bad	a9 00		lda #$00			lda #0
.8baf	f5 6b		sbc $6b,x			sbc FSMant2,x
.8bb1	95 6b		sta $6b,x			sta FSMant2,x
.8bb3	a9 00		lda #$00			lda #0
.8bb5	f5 61		sbc $61,x			sbc FSMant1,x
.8bb7	95 61		sta $61,x			sta FSMant1,x
.8bb9	a9 00		lda #$00			lda #0
.8bbb	f5 57		sbc $57,x			sbc FSMant0,x
.8bbd	4c 46 8b	jmp $8b46			jmp FPlusFin3	; finish up, return
=30					CL	.var *-(WordListLink+wh_Xt)
=$8bc0					en = *	; remember here
>8ba0	1e					.byte CL	;wh_CodeLength
>8bc0	46 41 62 73			L1:	.text "FAbs"	;  name of word as a string, ending at wh_NameLastChar
>8bc4	64					.byte (("FAbs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8bc5	1d 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8bc7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8bc8	08					.byte NN	;wh_Flags	dictionary flags
=35652					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8bc9	a4 4c		ldy $4c		FAbs:		ldy fp
.8bcb	b9 57 00	lda $0057,y			lda FSMant0,y		; mantissa negative?
.8bce	30 d2		bmi $8ba2			bmi FNegate
.8bd0	60		rts				rts
=8					CL	.var *-(WordListLink+wh_Xt)
=$8bd1					en = *	; remember here
>8bc7	08					.byte CL	;wh_CodeLength
.8bd1	4c f2 b3	jmp $b3f2	Throw_FPStack_4: jmp Throw_FPStack
.8bd4	a4 4c		ldy $4c		FPos:		ldy fp			; load FP stack index
.8bd6	c0 09		cpy #$09			cpy #FDim-1		; check FP stack for 2
.8bd8	b0 f7		bcs $8bd1			bcs Throw_FPStack_4
.8bda	b9 57 00	lda $0057,y			lda FSMant0+0,y		; calc result sign
.8bdd	59 58 00	eor $0058,y			eor FSMant0+1,y
.8be0	08		php				php
.8be1	b9 58 00	lda $0058,y			lda FSMant0+1,y		; if NOS negative
.8be4	10 07		bpl $8bed			bpl +
.8be6	e6 4c		inc $4c				inc fp			;   point at NOS
.8be8	20 a2 8b	jsr $8ba2			jsr FNegate		;   negate NOS
.8beb	c6 4c		dec $4c				dec fp			;   restore fp
.8bed					+
.8bed	20 c9 8b	jsr $8bc9			jsr FAbs		; abs TOS
.8bf0	86 14		stx $14				stx tmp1+0		; save data stack index
.8bf2	a6 4c		ldx $4c				ldx fp			; load FP stack index
.8bf4	28		plp				plp			; restore sign flag
.8bf5	60		rts				rts
>8bf6	46 2a				L1:	.text "F*"	;  name of word as a string, ending at wh_NameLastChar
>8bf8	42					.byte (("F*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8bf9	44 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8bfb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8bfc	08					.byte NN	;wh_Flags	dictionary flags
=35704					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8bfd					FStar:
.8bfd	20 d4 8b	jsr $8bd4			jsr FPos		; make r1 & r2 positive,
.8c00	08		php				php			;   save r3 sign
.8c01	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8c03	38		sec				sec
.8c04	75 4e		adc $4e,x			adc FSExp+1,x
.8c06	95 4e		sta $4e,x			sta FSExp+1,x
.8c08	50 12		bvc $8c1c			bvc _49			; IfVs,
.8c0a	b0 06		bcs $8c12			bcs _zero		;   underflow?
.8c0c	a6 14		ldx $14				ldx tmp1+0		;   restore data stack index
.8c0e	28		plp				plp			; RDrop sign flag
.8c0f	20 fc b3	jsr $b3fc			jsr Throw_FpOutOfRange
.8c12	e8		inx		_zero:		inx			; F2Drop
.8c13	e8		inx				inx
.8c14	86 4c		stx $4c				stx fp
.8c16	28		plp				plp			; rdrop saved result sign
.8c17	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c19	4c ec 88	jmp $88ec			jmp F0			; return zero
.8c1c					_49:
.8c1c	b5 58		lda $58,x			lda FSMant0+1,x		; save r1 mantissa
.8c1e	48		pha				pha
.8c1f	b5 62		lda $62,x			lda FSMant1+1,x
.8c21	48		pha				pha
.8c22	b5 6c		lda $6c,x			lda FSMant2+1,x
.8c24	48		pha				pha
.8c25	b5 76		lda $76,x			lda FSMant3+1,x
.8c27	a0 00		ldy #$00			ldy #0			; init r3 mantissa
.8c29	94 58		sty $58,x			sty FSMant0+1,x
.8c2b	94 62		sty $62,x			sty FSMant1+1,x
.8c2d	94 6c		sty $6c,x			sty FSMant2+1,x
.8c2f	94 76		sty $76,x			sty FSMant3+1,x
.8c31	20 4d 8c	jsr $8c4d			jsr _Byte		; do bytes of r1 mantissa
.8c34	68		pla				pla
.8c35	20 4d 8c	jsr $8c4d			jsr _Byte
.8c38	68		pla				pla
.8c39	20 4d 8c	jsr $8c4d			jsr _Byte
.8c3c	68		pla				pla
.8c3d	20 4d 8c	jsr $8c4d			jsr _Byte
.8c40	e6 4c		inc $4c				inc fp			; FDrop
.8c42	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c44	28		plp				plp			; fix result sign
.8c45	10 03		bpl $8c4a			bpl +
.8c47	4c a2 8b	jmp $8ba2			jmp FNegate
.8c4a					+
.8c4a	4c a0 8a	jmp $8aa0			jmp FNorm
.8c4d					_Byte:
.8c4d	85 15		sta $15				sta tmp1+1
.8c4f	a0 08		ldy #$08			ldy #8			; for each bit in byte
.8c51	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8c53	90 19		bcc $8c6e			bcc _b3
.8c55	18		clc				clc			;     r3 += r2
.8c56	b5 76		lda $76,x			lda FSMant3+1,x
.8c58	75 75		adc $75,x			adc FSMant3+0,x
.8c5a	95 76		sta $76,x			sta FSMant3+1,x
.8c5c	b5 6c		lda $6c,x			lda FSMant2+1,x
.8c5e	75 6b		adc $6b,x			adc FSMant2+0,x
.8c60	95 6c		sta $6c,x			sta FSMant2+1,x
.8c62	b5 62		lda $62,x			lda FSMant1+1,x
.8c64	75 61		adc $61,x			adc FSMant1+0,x
.8c66	95 62		sta $62,x			sta FSMant1+1,x
.8c68	b5 58		lda $58,x			lda FSMant0+1,x
.8c6a	75 57		adc $57,x			adc FSMant0+0,x
.8c6c	95 58		sta $58,x			sta FSMant0+1,x
.8c6e	56 58		lsr $58,x	_b3:		lsr FSMant0+1,x		;   r3 >>= 1
.8c70	76 62		ror $62,x			ror FSMant1+1,x
.8c72	76 6c		ror $6c,x			ror FSMant2+1,x
.8c74	76 76		ror $76,x			ror FSMant3+1,x
.8c76	88		dey				dey			;  next bit
.8c77	d0 d8		bne $8c51			bne _b1
.8c79	60		rts				rts
=125					CL	.var *-(WordListLink+wh_Xt)
=$8c7a					en = *	; remember here
>8bfb	7d					.byte CL	;wh_CodeLength
>8c7a	46 53 71 72			L1:	.text "FSqr"	;  name of word as a string, ending at wh_NameLastChar
>8c7e	44					.byte (("FSqr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8c7f	78 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8c81	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8c82	08					.byte NN	;wh_Flags	dictionary flags
=35838					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8c83	20 78 84	jsr $8478	FSqr:		jsr FDup
.8c86	4c fd 8b	jmp $8bfd			jmp FStar
=6					CL	.var *-(WordListLink+wh_Xt)
=$8c89					en = *	; remember here
>8c81	06					.byte CL	;wh_CodeLength
>8c89	46 31 30 2a			L1:	.text "F10*"	;  name of word as a string, ending at wh_NameLastChar
>8c8d	44					.byte (("F10*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8c8e	fe 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8c90	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8c91	08					.byte NN	;wh_Flags	dictionary flags
=35853					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8c92	20 78 84	jsr $8478	F10Star:	jsr FDup
.8c95	a4 4c		ldy $4c				ldy fp
.8c97	b9 4d 00	lda $004d,y			lda FSExp+0,y
.8c9a	18		clc				clc
.8c9b	69 01		adc #$01			adc #1
.8c9d	99 4d 00	sta $004d,y			sta FSExp+0,y
.8ca0	18		clc				clc
.8ca1	69 02		adc #$02			adc #2
.8ca3	99 4e 00	sta $004e,y			sta FSExp+1,y
.8ca6	4c 29 8b	jmp $8b29			jmp FPlus
=23					CL	.var *-(WordListLink+wh_Xt)
=$8ca9					en = *	; remember here
>8c90	17					.byte CL	;wh_CodeLength
>8ca9	46 2f				L1:	.text "F/"	;  name of word as a string, ending at wh_NameLastChar
>8cab	e2					.byte (("F/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8cac	0d 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8cae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8caf	08					.byte NN	;wh_Flags	dictionary flags
=35883					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8cb0	20 d4 8b	jsr $8bd4	FSlash:		jsr FPos		; make r1 & r2 positive
.8cb3	08		php				php			;   save result sign
.8cb4	b5 4e		lda $4e,x			lda FSExp+1,x		; calc exponent
.8cb6	18		clc				clc
.8cb7	69 01		adc #$01			adc #1
.8cb9	38		sec				sec
.8cba	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8cbc	95 4e		sta $4e,x			sta FSExp+1,x
.8cbe	50 12		bvc $8cd2			bvc _49			;  IfVs
.8cc0	b0 06		bcs $8cc8			bcs _Zero		; underflow?
.8cc2	28		plp				plp			; drop saved result sign
.8cc3	a6 15		ldx $15				ldx tmp1+1		; restore data stack index
.8cc5	20 fc b3	jsr $b3fc			jsr Throw_FpOutOfRange	; overflow
.8cc8	e8		inx		_Zero:		inx			; F2Drop
.8cc9	e8		inx				inx
.8cca	86 4c		stx $4c				stx fp
.8ccc	28		plp				plp			; drop saved result sign
.8ccd	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8ccf	4c ec 88	jmp $88ec			jmp F0			; return 0
.8cd2					_49:
.8cd2	b5 76		lda $76,x			lda FSMant3+1,x		; tmp32 = r1
.8cd4	85 16		sta $16				sta tmp2+0
.8cd6	b5 6c		lda $6c,x			lda FSMant2+1,x
.8cd8	85 17		sta $17				sta tmp2+1
.8cda	b5 62		lda $62,x			lda FSMant1+1,x
.8cdc	85 18		sta $18				sta tmp3+0
.8cde	b5 58		lda $58,x			lda FSMant0+1,x
.8ce0	85 19		sta $19				sta tmp3+1
.8ce2	20 0b 8d	jsr $8d0b			jsr _Byte
.8ce5	95 58		sta $58,x			sta FSMant0+1,x
.8ce7	20 0b 8d	jsr $8d0b			jsr _Byte
.8cea	95 62		sta $62,x			sta FSMant1+1,x
.8cec	20 0b 8d	jsr $8d0b			jsr _Byte
.8cef	95 6c		sta $6c,x			sta FSMant2+1,x
.8cf1	20 0b 8d	jsr $8d0b			jsr _Byte
.8cf4	95 76		sta $76,x			sta FSMant3+1,x
.8cf6	56 58		lsr $58,x			lsr FSMant0+1,x
.8cf8	76 62		ror $62,x			ror FSMant1+1,x
.8cfa	76 6c		ror $6c,x			ror FSMant2+1,x
.8cfc	76 76		ror $76,x			ror FSMant3+1,x
.8cfe	e6 4c		inc $4c				inc fp			; FDrop
.8d00	a6 14		ldx $14				ldx tmp1+0		; restore X
.8d02	28		plp				plp			; fix sign
.8d03	10 03		bpl $8d08			bpl +
.8d05	20 a2 8b	jsr $8ba2			jsr FNegate
.8d08	4c a0 8a	jmp $8aa0	+		jmp FNorm
.8d0b					_Byte:
.8d0b	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d0d					_1:
.8d0d	a5 19		lda $19				lda tmp3+1		;   if r1>=r2
.8d0f	d5 57		cmp $57,x			cmp FSMant0+0,x
.8d11	d0 10		bne $8d23			bne _4
.8d13	a5 18		lda $18				lda tmp3+0
.8d15	d5 61		cmp $61,x			cmp FSMant1+0,x
.8d17	d0 0a		bne $8d23			bne _4
.8d19	a5 17		lda $17				lda tmp2+1
.8d1b	d5 6b		cmp $6b,x			cmp FSMant2+0,x
.8d1d	d0 04		bne $8d23			bne _4
.8d1f	a5 16		lda $16				lda tmp2+0
.8d21	d5 75		cmp $75,x			cmp FSMant3+0,x
.8d23	90 18		bcc $8d3d	_4:		bcc _2
.8d25	a5 16		lda $16				lda tmp2+0		;     tmp32 -= r2
.8d27	f5 75		sbc $75,x			sbc FSMant3+0,x
.8d29	85 16		sta $16				sta tmp2+0
.8d2b	a5 17		lda $17				lda tmp2+1
.8d2d	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8d2f	85 17		sta $17				sta tmp2+1
.8d31	a5 18		lda $18				lda tmp3+0
.8d33	f5 61		sbc $61,x			sbc FSMant1+0,x
.8d35	85 18		sta $18				sta tmp3+0
.8d37	a5 19		lda $19				lda tmp3+1
.8d39	f5 57		sbc $57,x			sbc FSMant0+0,x
.8d3b	85 19		sta $19				sta tmp3+1
.8d3d	26 15		rol $15		_2:		rol tmp1+1		;   accum quotient bits
.8d3f	06 16		asl $16				asl tmp2+0
.8d41	26 17		rol $17				rol tmp2+1
.8d43	26 18		rol $18				rol tmp3+0
.8d45	26 19		rol $19				rol tmp3+1		;   tmp32<<=1
.8d47	88		dey				dey			;  next
.8d48	d0 c3		bne $8d0d			bne _1
.8d4a	a5 15		lda $15				lda tmp1+1		; return bits
.8d4c	60		rts				rts
=157					CL	.var *-(WordListLink+wh_Xt)
=$8d4d					en = *	; remember here
>8cae	9d					.byte CL	;wh_CodeLength
>8d4d	46 31 2f			L1:	.text "F1/"	;  name of word as a string, ending at wh_NameLastChar
>8d50	e3					.byte (("F1/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8d51	2b 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8d53	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8d54	08					.byte NN	;wh_Flags	dictionary flags
=36048					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8d55	20 28 89	jsr $8928	F1Slash:	jsr F1
.8d58	20 00 85	jsr $8500			jsr FSwap
.8d5b	4c b0 8c	jmp $8cb0			jmp FSlash
=9					CL	.var *-(WordListLink+wh_Xt)
=$8d5e					en = *	; remember here
>8d53	09					.byte CL	;wh_CodeLength
>8d5e	45 2a				L1:	.text "E*"	;  name of word as a string, ending at wh_NameLastChar
>8d60	42					.byte (("E*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8d61	d0 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8d63	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8d64	08					.byte NN	;wh_Flags	dictionary flags
=36064					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8d65					EStar:
.8d65	20 d4 8b	jsr $8bd4			jsr FPos		; make r1 & r2 positive
.8d68	08		php				php			;   remember result sign
.8d69	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8d6b	38		sec				sec
.8d6c	75 4e		adc $4e,x			adc FSExp+1,x
.8d6e	95 4e		sta $4e,x			sta FSExp+1,x
.8d70	70 15		bvs $8d87			bvs _ExpOvfl
.8d72	b5 58		lda $58,x			lda FSMant0+1,x		; save e1
.8d74	48		pha				pha
.8d75	b5 62		lda $62,x			lda FSMant1+1,x
.8d77	a0 00		ldy #$00			ldy #0
.8d79	94 58		sty $58,x			sty FSMant0+1,x
.8d7b	94 62		sty $62,x			sty FSMant1+1,x		; zero result
.8d7d	20 96 8d	jsr $8d96			jsr _Byte		; do FSMant1+1 byte
.8d80	68		pla				pla
.8d81	20 96 8d	jsr $8d96			jsr _Byte		; do FSMant0+1 byte
.8d84	4c b3 8d	jmp $8db3			jmp EFix3		; finish
.8d87					_ExpOvfl:
.8d87	b0 05		bcs $8d8e			bcs _Zero		;underflow?
.8d89	a6 14		ldx $14				ldx tmp1+0		; restore X
.8d8b	20 fc b3	jsr $b3fc			jsr Throw_FpOutOfRange	;overflow
.8d8e	a9 00		lda #$00	_Zero:		lda #0
.8d90	95 62		sta $62,x			sta FSMant1+1,x
.8d92	95 58		sta $58,x			sta FSMant0+1,x
.8d94	f0 1d		beq $8db3			beq EFix3
.8d96					_Byte:
.8d96	85 15		sta $15				sta tmp1+1
.8d98	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d9a	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8d9c	90 0d		bcc $8dab			bcc _b5
.8d9e	18		clc				clc			;     r3 += r2
.8d9f	b5 61		lda $61,x			lda FSMant1+0,x
.8da1	75 62		adc $62,x			adc FSMant1+1,x
.8da3	95 62		sta $62,x			sta FSMant1+1,x
.8da5	b5 57		lda $57,x			lda FSMant0+0,x
.8da7	75 58		adc $58,x			adc FSMant0+1,x
.8da9	95 58		sta $58,x			sta FSMant0+1,x
.8dab					_b5:
.8dab	76 58		ror $58,x			ror FSMant0+1,x		;   r3 <<= 1
.8dad	76 62		ror $62,x			ror FSMant1+1,x
.8daf	88		dey				dey			;  next bit
.8db0	d0 e8		bne $8d9a			bne _b1
.8db2	60		rts				rts
=78					CL	.var *-(WordListLink+wh_Xt)
=$8db3					en = *	; remember here
>8d63	4e					.byte CL	;wh_CodeLength
.8db3					EFix3:
.8db3	a9 00		lda #$00			lda #0			; zero unused mantissa
.8db5	95 6c		sta $6c,x			sta FSMant2+1,x
.8db7	95 76		sta $76,x			sta FSMant3+1,x
.8db9	e6 4c		inc $4c				inc fp			; FDrop
.8dbb	a6 14		ldx $14				ldx tmp1+0		; restore X
.8dbd	28		plp				plp			;fix result sign
.8dbe	10 03		bpl $8dc3			bpl +
.8dc0	4c a2 8b	jmp $8ba2			jmp FNegate
.8dc3	4c a0 8a	jmp $8aa0	+		jmp FNorm
>8dc6	45 53 71 72			L1:	.text "ESqr"	;  name of word as a string, ending at wh_NameLastChar
>8dca	44					.byte (("ESqr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8dcb	e0 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8dcd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8dce	08					.byte NN	;wh_Flags	dictionary flags
=36170					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8dcf	20 78 84	jsr $8478	ESqr:		jsr FDup
.8dd2	4c 65 8d	jmp $8d65			jmp EStar
=6					CL	.var *-(WordListLink+wh_Xt)
=$8dd5					en = *	; remember here
>8dcd	06					.byte CL	;wh_CodeLength
>8dd5	45 2f				L1:	.text "E/"	;  name of word as a string, ending at wh_NameLastChar
>8dd7	e2					.byte (("E/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8dd8	4a 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8dda	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ddb	08					.byte NN	;wh_Flags	dictionary flags
=36183					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ddc	20 d4 8b	jsr $8bd4	ESlash:		jsr FPos	; make r1 & r2 positive
.8ddf	08		php				php		; remember result sign
.8de0	b5 4e		lda $4e,x			lda FSExp+1,x		; calc r3 exponent
.8de2	38		sec				sec
.8de3	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8de5	70 17		bvs $8dfe			bvs _ExpOvfl
.8de7	18		clc				clc
.8de8	69 01		adc #$01			adc #1
.8dea	95 4e		sta $4e,x			sta FSExp+1,x
.8dec	20 04 8e	jsr $8e04			jsr _Byte		; gen quotient hi byte
.8def	48		pha				pha
.8df0	20 04 8e	jsr $8e04			jsr _Byte		; gen quotient lo byte
.8df3	95 62		sta $62,x			sta FSMant1+1,x
.8df5	68		pla				pla
.8df6	4a		lsr a				lsr a
.8df7	95 58		sta $58,x			sta FSMant0+1,x
.8df9	76 62		ror $62,x			ror FSMant1+1,x
.8dfb	4c b3 8d	jmp $8db3			jmp EFix3
.8dfe					_ExpOvfl:
.8dfe	28		plp				plp			; rdrop saved result sign
.8dff	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e01	20 fc b3	jsr $b3fc			jsr Throw_FpOutOfRange	; overflow
.8e04					_Byte:
.8e04	a0 08		ldy #$08			ldy #8			; for 8 bits
.8e06	b5 62		lda $62,x	_b1:		lda FSMant1+1,x		;   if r1 >= r2
.8e08	d5 61		cmp $61,x			cmp FSMant1+0,x
.8e0a	b5 58		lda $58,x			lda FSMant0+1,x
.8e0c	f5 57		sbc $57,x			sbc FSMant0+0,x
.8e0e	90 09		bcc $8e19			bcc _b5
.8e10	95 58		sta $58,x			sta FSMant0+1,x
.8e12	b5 62		lda $62,x			lda FSMant1+1,x		;     r1 -= r2
.8e14	f5 61		sbc $61,x			sbc FSMant1+0,x
.8e16	95 62		sta $62,x			sta FSMant1+1,x
.8e18	38		sec				sec
.8e19					_b5:
.8e19	26 15		rol $15				rol tmp1+1		;   save quotient bit
.8e1b	16 62		asl $62,x			asl FSMant1+1,x		;   r1 *= 2
.8e1d	36 58		rol $58,x			rol FSMant0+1,x
.8e1f	88		dey				dey			;  next bit
.8e20	d0 e4		bne $8e06			bne _b1
.8e22	a5 15		lda $15				lda tmp1+1		; return bits
.8e24	60		rts				rts
=73					CL	.var *-(WordListLink+wh_Xt)
=$8e25					en = *	; remember here
>8dda	49					.byte CL	;wh_CodeLength
>8e25	45 31 2f			L1:	.text "E1/"	;  name of word as a string, ending at wh_NameLastChar
>8e28	e3					.byte (("E1/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e29	57 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e2b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e2c	08					.byte NN	;wh_Flags	dictionary flags
=36264					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e2d	20 28 89	jsr $8928	E1Slash:	jsr F1
.8e30	20 00 85	jsr $8500			jsr FSwap
.8e33	4c dc 8d	jmp $8ddc			jmp ESlash
=9					CL	.var *-(WordListLink+wh_Xt)
=$8e36					en = *	; remember here
>8e2b	09					.byte CL	;wh_CodeLength
>8e36	53 3e 46			L1:	.text "S>F"	;  name of word as a string, ending at wh_NameLastChar
>8e39	c3					.byte (("S>F"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e3a	a8 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e3c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e3d	08					.byte NN	;wh_Flags	dictionary flags
=36281					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e3e	20 9a b3	jsr $b39a	SToF:		jsr PopYA		; pop n
.8e41	20 16 84	jsr $8416	SToFYA:		jsr FAllocX		; alloc FP stack entry
.8e44	94 57		sty $57,x			sty FSMant0,x		; copy n to mantissa
.8e46	95 61		sta $61,x			sta FSMant1,x
.8e48	a9 00		lda #$00			lda #0			; pad mantissa
.8e4a	95 6b		sta $6b,x			sta FSMant2,x
.8e4c	95 75		sta $75,x			sta FSMant3,x
.8e4e	a9 0f		lda #$0f			lda #15			; set exponent
.8e50	95 4d		sta $4d,x			sta FSExp,x
.8e52	4c a2 8a	jmp $8aa2			jmp FNormX		; normalize, return
=23					CL	.var *-(WordListLink+wh_Xt)
=$8e55					en = *	; remember here
>8e3c	17					.byte CL	;wh_CodeLength
>8e55	44 3e 46			L1:	.text "D>F"	;  name of word as a string, ending at wh_NameLastChar
>8e58	c3					.byte (("D>F"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e59	b9 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e5b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e5c	08					.byte NN	;wh_Flags	dictionary flags
=36312					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e5d	20 16 84	jsr $8416	FDToF:		jsr FAllocX		; alloc FP stack entry
.8e60	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e62	a4 4c		ldy $4c				ldy fp
.8e64	b5 26		lda $26,x			lda DStack+2,x		; mantissa= d
.8e66	99 75 00	sta $0075,y			sta FSMant3,y
.8e69	b5 27		lda $27,x			lda DStack+3,x
.8e6b	99 6b 00	sta $006b,y			sta FSMant2,y
.8e6e	b5 24		lda $24,x			lda DStack+0,x
.8e70	99 61 00	sta $0061,y			sta FSMant1,y
.8e73	b5 25		lda $25,x			lda DStack+1,x
.8e75	99 57 00	sta $0057,y			sta FSMant0,y
.8e78	a9 1f		lda #$1f			lda #31			; set exponent
.8e7a	99 4d 00	sta $004d,y			sta FSExp,y
.8e7d	20 b1 c4	jsr $c4b1			jsr Two_Drop
.8e80	4c a0 8a	jmp $8aa0			jmp FNorm		; normalize, return
=38					CL	.var *-(WordListLink+wh_Xt)
=$8e83					en = *	; remember here
>8e5b	26					.byte CL	;wh_CodeLength
>8e83	46 3e 53			L1:	.text "F>S"	;  name of word as a string, ending at wh_NameLastChar
>8e86	63					.byte (("F>S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e87	d8 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e89	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e8a	08					.byte NN	;wh_Flags	dictionary flags
=36358					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e8b	a4 4c		ldy $4c		FToS:		ldy fp
.8e8d	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8e90	08		php				php
.8e91	10 03		bpl $8e96			bpl +
.8e93	20 a2 8b	jsr $8ba2			jsr FNegate
.8e96					+
.8e96	a9 0f		lda #$0f			lda #15
.8e98	20 a5 86	jsr $86a5			jsr FIntAlignA
.8e9b	c0 10		cpy #$10			cpy #15+1		; always positive, so unsigned compare works
.8e9d	b0 17		bcs $8eb6			bcs _overflow
.8e9f	a4 4c		ldy $4c				ldy fp
.8ea1	ca		dex				dex
.8ea2	ca		dex				dex
.8ea3	b9 57 00	lda $0057,y			lda FSMant0,y
.8ea6	95 25		sta $25,x			sta DStack+1,x
.8ea8	b9 61 00	lda $0061,y			lda FSMant1,y
.8eab	95 24		sta $24,x			sta DStack+0,x
.8ead	e6 4c		inc $4c				inc fp			; FDrop
.8eaf	28		plp				plp			; apply saved sign
.8eb0	30 01		bmi $8eb3			bmi +
.8eb2	60		rts				rts
.8eb3	4c 0a c6	jmp $c60a	+		jmp Negate
.8eb6	28		plp		_overflow:	plp			; RDrop saved sign
.8eb7	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8eb9	20 23 b4	jsr $b423			jsr ThrowA
=49					CL	.var *-(WordListLink+wh_Xt)
=$8ebc					en = *	; remember here
>8e89	31					.byte CL	;wh_CodeLength
>8ebc	46 3e 44			L1:	.text "F>D"	;  name of word as a string, ending at wh_NameLastChar
>8ebf	83					.byte (("F>D"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8ec0	06 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ec2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ec3	08					.byte NN	;wh_Flags	dictionary flags
=36415					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ec4	a4 4c		ldy $4c		FToD:		ldy fp
.8ec6	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8ec9	08		php				php
.8eca	10 03		bpl $8ecf			bpl +
.8ecc	20 a2 8b	jsr $8ba2			jsr FNegate
.8ecf					+
.8ecf	a9 1f		lda #$1f			lda #31
.8ed1	20 a5 86	jsr $86a5			jsr FIntAlignA
.8ed4	c0 20		cpy #$20			cpy #31+1		; always positive, so unsigned compare works
.8ed6	b0 23		bcs $8efb			bcs _overflow
.8ed8	a4 4c		ldy $4c				ldy fp
.8eda	ca		dex				dex			; d= mantissa
.8edb	ca		dex				dex
.8edc	ca		dex				dex
.8edd	ca		dex				dex
.8ede	b9 57 00	lda $0057,y			lda FSMant0,y
.8ee1	95 25		sta $25,x			sta DStack+1,x
.8ee3	b9 61 00	lda $0061,y			lda FSMant1,y
.8ee6	95 24		sta $24,x			sta DStack+0,x
.8ee8	b9 6b 00	lda $006b,y			lda FSMant2,y
.8eeb	95 27		sta $27,x			sta DStack+3,x
.8eed	b9 75 00	lda $0075,y			lda FSMant3,y
.8ef0	95 26		sta $26,x			sta DStack+2,x
.8ef2	e6 4c		inc $4c				inc fp			; FDrop
.8ef4	28		plp				plp			; apply saved sign
.8ef5	30 01		bmi $8ef8			bmi +
.8ef7	60		rts				rts
.8ef8	4c 3b c6	jmp $c63b	+		jmp DNegate
.8efb	28		plp		_overflow:	plp			; RDrop sign
.8efc	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8efe	20 23 b4	jsr $b423			jsr ThrowA
=61					CL	.var *-(WordListLink+wh_Xt)
=$8f01					en = *	; remember here
>8ec2	3d					.byte CL	;wh_CodeLength
>8f01	46 52 6e 64			L1:	.text "FRnd"	;  name of word as a string, ending at wh_NameLastChar
>8f05	84					.byte (("FRnd"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f06	3f 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f08	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f09	08					.byte NN	;wh_Flags	dictionary flags
=36485					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f0a	20 df 82	jsr $82df	FRnd:		jsr Rand		; generate next RndState
.8f0d	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.8f10	4a		lsr a				lsr a			;   make positive
.8f11	95 57		sta $57,x			sta FSMant0,x
.8f13	94 61		sty $61,x			sty FSMant1,x
.8f15	ad 35 03	lda $0335			lda RndState+0
.8f18	95 6b		sta $6b,x			sta FSMant2,x
.8f1a	ad 36 03	lda $0336			lda RndState+1
.8f1d	95 75		sta $75,x			sta FSMant3,x
.8f1f	a9 00		lda #$00			lda #0			; exponent=0
.8f21	95 4d		sta $4d,x			sta FSExp,x
.8f23	4c a2 8a	jmp $8aa2			jmp FNormX		; normalize, return
=28					CL	.var *-(WordListLink+wh_Xt)
=$8f26					en = *	; remember here
>8f08	1c					.byte CL	;wh_CodeLength
>8f26	46 53 71 72 74			L1:	.text "FSqrt"	;  name of word as a string, ending at wh_NameLastChar
>8f2b	85					.byte (("FSqrt"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f2c	85 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f2e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f2f	08					.byte NN	;wh_Flags	dictionary flags
=36523					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f30	a4 4c		ldy $4c		FSqrt:		ldy fp
.8f32	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.8f35	d0 01		bne $8f38			bne +
.8f37	60		rts				rts			;   just return the zero
.8f38					+
.8f38	20 78 84	jsr $8478			jsr FDup		; get trial value
.8f3b	a4 4c		ldy $4c				ldy fp
.8f3d	b9 4d 00	lda $004d,y			lda FSExp,y		; halve the exponent of trial value
.8f40	c9 80		cmp #$80			cmp #$80
.8f42	6a		ror a				ror a
.8f43	99 4d 00	sta $004d,y			sta FSExp,y
.8f46	a9 09		lda #$09			lda #9			; for 9 iterations
.8f48	48		pha		_3:		pha
.8f49	20 f0 84	jsr $84f0			jsr F2Dup		;   calc new trial value
.8f4c	20 b0 8c	jsr $8cb0			jsr FSlash
.8f4f	20 29 8b	jsr $8b29			jsr FPlus
.8f52	20 20 8a	jsr $8a20			jsr F2Slash
.8f55	68		pla				pla			;  next
.8f56	38		sec				sec
.8f57	e9 01		sbc #$01			sbc #1
.8f59	d0 ed		bne $8f48			bne _3
.8f5b	4c 52 84	jmp $8452			jmp FNip		; return trial value
=46					CL	.var *-(WordListLink+wh_Xt)
=$8f5e					en = *	; remember here
>8f2e	2e					.byte CL	;wh_CodeLength
>8f5e	48 65 78 3e 46			L1:	.text "Hex>F"	;  name of word as a string, ending at wh_NameLastChar
>8f63	c5					.byte (("Hex>F"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f64	ab 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f66	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f67	08					.byte NN	;wh_Flags	dictionary flags
=36579					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f68	20 16 84	jsr $8416	HexToF:		jsr FAllocX		; alloc FP stack entry
.8f6b	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8f6d	a4 4c		ldy $4c				ldy fp			; Y= FP stack index
.8f6f	20 7e b3	jsr $b37e			jsr PopA		; pop n_exp
.8f72	99 4d 00	sta $004d,y			sta FSExp,y
.8f75	b5 25		lda $25,x			lda DStack+1,x
.8f77	99 57 00	sta $0057,y			sta FSMant0,y
.8f7a	b5 24		lda $24,x			lda DStack+0,x
.8f7c	99 61 00	sta $0061,y			sta FSMant1,y
.8f7f	b5 27		lda $27,x			lda DStack+3,x
.8f81	99 6b 00	sta $006b,y			sta FSMant2,y
.8f84	b5 26		lda $26,x			lda DStack+2,x
.8f86	99 75 00	sta $0075,y			sta FSMant3,y
.8f89	4c b1 c4	jmp $c4b1			jmp Two_Drop
=36					CL	.var *-(WordListLink+wh_Xt)
=$8f8c					en = *	; remember here
>8f66	24					.byte CL	;wh_CodeLength
>8f8c	46 3e 48 65 78			L1:	.text "F>Hex"	;  name of word as a string, ending at wh_NameLastChar
>8f91	05					.byte (("F>Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f92	e3 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f94	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f95	08					.byte NN	;wh_Flags	dictionary flags
=36625					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f96	a4 4c		ldy $4c		FToHex:		ldy fp		; Y= FP stack index
.8f98	ca		dex				dex
.8f99	ca		dex				dex
.8f9a	ca		dex				dex
.8f9b	ca		dex				dex
.8f9c	ca		dex				dex
.8f9d	ca		dex				dex
.8f9e	b9 57 00	lda $0057,y			lda FSMant0,y	; copy mantissa
.8fa1	95 27		sta $27,x			sta DStack+3,x
.8fa3	b9 61 00	lda $0061,y			lda FSMant1,y
.8fa6	95 26		sta $26,x			sta DStack+2,x
.8fa8	b9 6b 00	lda $006b,y			lda FSMant2,y
.8fab	95 29		sta $29,x			sta DStack+5,x
.8fad	b9 75 00	lda $0075,y			lda FSMant3,y
.8fb0	95 28		sta $28,x			sta DStack+4,x
.8fb2	b9 4d 00	lda $004d,y			lda FSExp,y	; copy exponent
.8fb5	95 24		sta $24,x			sta DStack+0,x
.8fb7	29 80		and #$80			and #$80	;   sign extend
.8fb9	f0 02		beq $8fbd			beq +
.8fbb	a9 ff		lda #$ff			lda #$ff
.8fbd	95 25		sta $25,x	+		sta DStack+1,x
.8fbf	e6 4c		inc $4c				inc fp		; FDrop
.8fc1	60		rts				rts
=44					CL	.var *-(WordListLink+wh_Xt)
=$8fc2					en = *	; remember here
>8f94	2c					.byte CL	;wh_CodeLength
>8fc2	46 2e 48 65 78			L1:	.text "F.Hex"	;  name of word as a string, ending at wh_NameLastChar
>8fc7	05					.byte (("F.Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8fc8	11 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8fca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8fcb	08					.byte NN	;wh_Flags	dictionary flags
=36679					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8fcc	20 96 8f	jsr $8f96	FDotHex:	jsr FToHex	; get parts of r
.8fcf	20 1a ce	jsr $ce1a			jsr Not_Rot
.8fd2	20 6c a8	jsr $a86c			jsr Dot_Hex	; do mantissa
.8fd5	20 6c a8	jsr $a86c			jsr Dot_Hex
.8fd8	a9 3a		lda #$3a			lda #':'
.8fda	20 5e cd	jsr $cd5e			jsr Emit_A
.8fdd	4c 4a a8	jmp $a84a			jmp C_Dot_Hex	; do exponent
=20					CL	.var *-(WordListLink+wh_Xt)
=$8fe0					en = *	; remember here
>8fca	14					.byte CL	;wh_CodeLength
>8fe0	28 46 2e 29			L1:	.text "(F.)"	;  name of word as a string, ending at wh_NameLastChar
>8fe4	24					.byte (("(F.)"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8fe5	47 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8fe7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8fe8	08					.byte NN	;wh_Flags	dictionary flags
=36708					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8fe9	20 66 90	jsr $9066	PFDot:		jsr pfcst		;start collecting chars, make r positive
.8fec	20 f2 8f	jsr $8ff2			jsr PFDotSub
.8fef	4c 84 90	jmp $9084			jmp pfcen
.8ff2					PFDotSub:
.8ff2	20 ba 83	jsr $83ba			jsr Precision	;alloc & init work area
.8ff5	20 af b7	jsr $b7af			jsr One
=$27					_mantNzFound  = DStack+3	; nonzero mantissa digit processed
=$26					_NumSigDigits = DStack+2	; # of significant digits
=$24					_decimalPos   = DStack+0	; decimal point position
.8ff8	20 46 90	jsr $9046			jsr FLt10		; scale down to <10, counting exponent
.8ffb					_c:
.8ffb	b5 24		lda $24,x			lda _decimalPos,x	;  insert decimal point here?
.8ffd	d0 05		bne $9004			bne _c2
.8fff	a9 2e		lda #$2e			lda #'.'
.9001	20 7b 90	jsr $907b			jsr pfch
.9004	d6 24		dec $24,x	_c2:		dec _decimalPos,x
.9006	20 78 84	jsr $8478			jsr FDup		;  do a digit
.9009	20 8b 8e	jsr $8e8b			jsr FToS		; ( work n )
.900c	b5 24		lda $24,x			lda DStack+0,x
.900e	15 29		ora $29,x			ora _mantNzFound+2,x	;  doing significant digits?
.9010	95 29		sta $29,x			sta _mantNzFound+2,x
.9012	f0 08		beq $901c			beq _c7
.9014	d6 28		dec $28,x			dec _NumSigDigits+2,x
.9016	10 04		bpl $901c			bpl +
.9018	e8		inx				inx			;    drop integer
.9019	e8		inx				inx
.901a	d0 17		bne $9033			bne _d
.901c					+
.901c	b5 24		lda $24,x	_c7:		lda DStack+0,x		;  store the char
.901e	09 30		ora #$30			ora #'0'
.9020	20 7b 90	jsr $907b			jsr pfch
.9023	20 3e 8e	jsr $8e3e			jsr SToF		; ( work )
.9026	20 6b 8b	jsr $8b6b			jsr FMinus
.9029	20 92 8c	jsr $8c92			jsr F10Star
.902c	a4 4c		ldy $4c				ldy fp			;  until mantissa==0
.902e	b9 57 00	lda $0057,y			lda FSMant0,y
.9031	d0 c8		bne $8ffb			bne _c
.9033	d6 24		dec $24,x	_d:		dec _decimalPos,x	;do trailing zeros
.9035	30 08		bmi $903f			bmi _d9
.9037	a9 30		lda #$30			lda #'0'
.9039	20 7b 90	jsr $907b			jsr pfch
.903c	4c 33 90	jmp $9033			jmp _d
.903f					_d9:
.903f	e8		inx				inx			; drop work area
.9040	e8		inx				inx
.9041	e8		inx				inx
.9042	e8		inx				inx
.9043	e6 4c		inc $4c				inc fp			; FDrop
.9045	60		rts				rts
=93					CL	.var *-(WordListLink+wh_Xt)
=$9046					en = *	; remember here
>8fe7	5d					.byte CL	;wh_CodeLength
.9046					FLt10:
.9046	a4 4c		ldy $4c		_1:		ldy fp			; while r >= 10
.9048	b9 4d 00	lda $004d,y			lda FSExp,y
.904b	30 18		bmi $9065			bmi _9			;   exponent negative?
.904d	c9 04		cmp #$04			cmp #4
.904f	90 14		bcc $9065			bcc _9			;   < 4 ?
.9051	d0 07		bne $905a			bne _2			;   > 4 ?
.9053	b9 57 00	lda $0057,y			lda FSMant0,y
.9056	c9 50		cmp #$50			cmp #$50
.9058	90 0b		bcc $9065			bcc _9
.905a	f6 24		inc $24,x	_2:		inc DStack+0,x		;   exp ++
.905c	20 0c 89	jsr $890c			jsr F10			;   r /= 10
.905f	20 b0 8c	jsr $8cb0			jsr FSlash
.9062	4c 46 90	jmp $9046			jmp _1
.9065	60		rts		_9:		rts
.9066					pfcst:
.9066	a9 01		lda #$01			lda #1
.9068	8d 34 03	sta $0334			sta ToHold
.906b	a4 4c		ldy $4c				ldy fp			; if r1 negative
.906d	b9 57 00	lda $0057,y			lda FSMant0,y
.9070	10 08		bpl $907a			bpl _19
.9072	a9 2d		lda #$2d			lda #'-'		;   append sign
.9074	20 7b 90	jsr $907b			jsr pfch
.9077	4c a2 8b	jmp $8ba2			jmp FNegate		;   make positive, return
.907a	60		rts		_19:		rts
.907b					pfch:
.907b	ac 34 03	ldy $0334			ldy ToHold
.907e	91 00		sta ($00),y			sta (cp),y
.9080	ee 34 03	inc $0334			inc ToHold
.9083	60		rts				rts
.9084					pfcen:
.9084	ad 34 03	lda $0334			lda ToHold
.9087	38		sec				sec
.9088	e9 01		sbc #$01			sbc #1
.908a	a0 00		ldy #$00			ldy #0
.908c	91 00		sta ($00),y			sta (cp),y		; fill in length
.908e	4c b2 c9	jmp $c9b2			jmp Here		; push start addr
.9091					pfciA:
.9091	a8		tay				tay
.9092	10 0a		bpl $909e			bpl _15			; IfMi,
.9094	49 ff		eor #$ff			eor #$ff
.9096	18		clc				clc
.9097	69 01		adc #$01			adc #1
.9099	48		pha				pha
.909a	a9 2d		lda #$2d			lda #'-'
.909c	d0 03		bne $90a1			bne _19
.909e	48		pha		_15:		pha
.909f	a9 2b		lda #$2b			lda #'+'
.90a1					_19:
.90a1	20 7b 90	jsr $907b			jsr pfch
.90a4	68		pla				pla
.90a5	a0 2f		ldy #$2f			ldy #'0'-1
.90a7	c8		iny		_20:		iny
.90a8	38		sec				sec
.90a9	e9 0a		sbc #$0a			sbc #10
.90ab	b0 fa		bcs $90a7			bcs _20
.90ad	69 0a		adc #$0a			adc #10
.90af	48		pha				pha
.90b0	98		tya				tya
.90b1	20 7b 90	jsr $907b			jsr pfch
.90b4	68		pla				pla
.90b5	09 30		ora #$30			ora #'0'
.90b7	d0 c2		bne $907b			bne pfch
>90b9	46 2e				L1:	.text "F."	;  name of word as a string, ending at wh_NameLastChar
>90bb	c2					.byte (("F."[-1]&7)<<5)+(*-L1)	;wh_HNL
>90bc	64 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90bf	08					.byte NN	;wh_Flags	dictionary flags
=36923					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90c0	20 e9 8f	jsr $8fe9	FDot:		jsr PFDot
.90c3	20 68 b1	jsr $b168	FDot2:		jsr Count
.90c6	20 78 cd	jsr $cd78			jsr Type
.90c9	4c 6b cd	jmp $cd6b			jmp Space
=12					CL	.var *-(WordListLink+wh_Xt)
=$90cc					en = *	; remember here
>90be	0c					.byte CL	;wh_CodeLength
>90cc	46 2e 53			L1:	.text "F.S"	;  name of word as a string, ending at wh_NameLastChar
>90cf	63					.byte (("F.S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>90d0	3b 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90d3	08					.byte NN	;wh_Flags	dictionary flags
=36943					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90d4	a9 09		lda #$09	FDotS:		lda #FDim-1	; for each FP stack entry
.90d6	d0 0b		bne $90e3			bne _8
.90d8	48		pha		_2:		pha
.90d9	20 c6 84	jsr $84c6			jsr FPick3	;   print it
.90dc	20 c0 90	jsr $90c0			jsr FDot
.90df	68		pla				pla		;  next
.90e0	38		sec				sec
.90e1	e9 01		sbc #$01			sbc #1
.90e3	c5 4c		cmp $4c		_8:		cmp fp
.90e5	b0 f1		bcs $90d8			bcs _2
=19					CL	.var *-(WordListLink+wh_Xt)
=$90e7					en = *	; remember here
>90d2	13					.byte CL	;wh_CodeLength
.90e7	60		rts				rts
>90e8	28 46 53 2e 29			L1:	.text "(FS.)"	;  name of word as a string, ending at wh_NameLastChar
>90ed	25					.byte (("(FS.)"[-1]&7)<<5)+(*-L1)	;wh_HNL
>90ee	4f 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90f1	08					.byte NN	;wh_Flags	dictionary flags
=36973					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90f2	20 a5 b7	jsr $b7a5	PFSDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.90f5	20 66 90	jsr $9066			jsr pfcst		; start collecting chars, make r positive
.90f8	20 46 90	jsr $9046			jsr FLt10		; scale down to <10
.90fb	a4 4c		ldy $4c		_c1:		ldy fp			; while r < 1
.90fd	b9 57 00	lda $0057,y			lda FSMant0,y		;   mantissa == 0 ?
.9100	f0 0f		beq $9111			beq _c9
.9102	b9 4d 00	lda $004d,y			lda FSExp,y		;   exp < 1 ?
.9105	f0 02		beq $9109			beq _c2
.9107	10 08		bpl $9111			bpl _c9
.9109	d6 24		dec $24,x	_c2:		dec DStack+0,x		;  exp -= 1
.910b	20 92 8c	jsr $8c92			jsr F10Star		;  r *= 10
.910e	4c fb 90	jmp $90fb			jmp _c1
.9111					_c9:
.9111	20 f2 8f	jsr $8ff2	PFSDotM:	jsr PFDotSub		; do mantissa
.9114	a9 45		lda #$45			lda #'E'
.9116	20 7b 90	jsr $907b			jsr pfch		; do exponent
.9119	b5 24		lda $24,x			lda DStack+0,x		;   _exp
.911b	20 91 90	jsr $9091			jsr pfciA
.911e	e8		inx				inx			; Drop work area
.911f	e8		inx				inx
.9120	4c 84 90	jmp $9084			jmp pfcen		; finish string
=49					CL	.var *-(WordListLink+wh_Xt)
=$9123					en = *	; remember here
>90f0	31					.byte CL	;wh_CodeLength
>9123	46 53 2e			L1:	.text "FS."	;  name of word as a string, ending at wh_NameLastChar
>9126	c3					.byte (("FS."[-1]&7)<<5)+(*-L1)	;wh_HNL
>9127	6d 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9129	03					.byte 3		;wh_CodeLength  (with placeholder value)
>912a	08					.byte NN	;wh_Flags	dictionary flags
=37030					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.912b	20 f2 90	jsr $90f2	FSDot:		jsr PFSDot
.912e	4c c3 90	jmp $90c3			jmp FDot2
=6					CL	.var *-(WordListLink+wh_Xt)
=$9131					en = *	; remember here
>9129	06					.byte CL	;wh_CodeLength
>9131	28 46 45 2e 29			L1:	.text "(FE.)"	;  name of word as a string, ending at wh_NameLastChar
>9136	25					.byte (("(FE.)"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9137	a6 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9139	03					.byte 3		;wh_CodeLength  (with placeholder value)
>913a	08					.byte NN	;wh_Flags	dictionary flags
=37046					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.913b	20 a5 b7	jsr $b7a5	PFEDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.913e	20 66 90	jsr $9066			jsr pfcst		; start collecting chars, make r positive
.9141	a4 4c		ldy $4c		_30:		ldy fp			; while r < 1
.9143	b9 57 00	lda $0057,y			lda FSMant0,y
.9146	f0 16		beq $915e			beq _39
.9148	b9 4d 00	lda $004d,y			lda FSExp,y
.914b	f0 02		beq $914f			beq _31
.914d	10 0f		bpl $915e			bpl _39
.914f	d6 24		dec $24,x	_31:		dec _exp,x		;  exp -= 3
.9151	d6 24		dec $24,x			dec _exp,x
.9153	d6 24		dec $24,x			dec _exp,x
.9155	20 fd 88	jsr $88fd			jsr F1000		;  r *= 1000
.9158	20 fd 8b	jsr $8bfd			jsr FStar
.915b	4c 41 91	jmp $9141			jmp _30
.915e					_39:
.915e	a4 4c		ldy $4c		_a:		ldy fp			; while r >= 1000
.9160	b9 4d 00	lda $004d,y			lda FSExp,y
.9163	30 1c		bmi $9181			bmi _a9			; exponent negative?
.9165	c9 0a		cmp #$0a			cmp #10
.9167	90 18		bcc $9181			bcc _a9			;   < 10 ?
.9169	d0 07		bne $9172			bne _a2			;   > 10 ?
.916b	b9 57 00	lda $0057,y			lda FSMant0,y
.916e	c9 7d		cmp #$7d			cmp #$7d
.9170	90 0f		bcc $9181			bcc _a9
.9172	f6 24		inc $24,x	_a2:		inc _exp,x		;   exp += 3
.9174	f6 24		inc $24,x			inc _exp,x
.9176	f6 24		inc $24,x			inc _exp,x
.9178	20 fd 88	jsr $88fd			jsr F1000		;   r /= 1000
.917b	20 b0 8c	jsr $8cb0			jsr FSlash
.917e	4c 5e 91	jmp $915e			jmp _a
.9181					_a9:
.9181	4c 11 91	jmp $9111			jmp PFSDotM
=73					CL	.var *-(WordListLink+wh_Xt)
=$9184					en = *	; remember here
>9139	49					.byte CL	;wh_CodeLength
>9184	46 45 2e			L1:	.text "FE."	;  name of word as a string, ending at wh_NameLastChar
>9187	c3					.byte (("FE."[-1]&7)<<5)+(*-L1)	;wh_HNL
>9188	b6 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>918a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>918b	08					.byte NN	;wh_Flags	dictionary flags
=37127					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.918c	20 3b 91	jsr $913b	FEDot:		jsr PFEDot
.918f	4c c3 90	jmp $90c3			jmp FDot2
=6					CL	.var *-(WordListLink+wh_Xt)
=$9192					en = *	; remember here
>918a	06					.byte CL	;wh_CodeLength
>9192	46 22				L1:	.text 'F"'	;  name of word as a string, ending at wh_NameLastChar
>9194	42					.byte (('F"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>9195	07 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9197	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9198	0c					.byte IM+NN	;wh_Flags	dictionary flags
=37140					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9199	20 45 ba	jsr $ba45	FQuote:		jsr Parse_Name		; get string
.919c	20 bd 91	jsr $91bd			jsr ToFloat		; convert
.919f	b5 24		lda $24,x			lda DStack+0,x		; error?
.91a1	f0 0a		beq $91ad			beq _Err
.91a3	e8		inx				inx
.91a4	e8		inx				inx
.91a5	a5 0a		lda $0a				lda State		; compiling?
.91a7	d0 01		bne $91aa			bne _compile
.91a9	60		rts				rts
.91aa	4c 7c 88	jmp $887c	_compile:	jmp FLiteral		; compile a FP literal
.91ad	a9 36		lda #$36	_Err:		lda #100+err_FPInvalidArg
.91af	20 23 b4	jsr $b423			jsr ThrowA
=25					CL	.var *-(WordListLink+wh_Xt)
=$91b2					en = *	; remember here
>9197	19					.byte CL	;wh_CodeLength
>91b2	3e 46 6c 6f 61 74		L1:	.text ">Float"	;  name of word as a string, ending at wh_NameLastChar
>91b8	86					.byte ((">Float"[-1]&7)<<5)+(*-L1)	;wh_HNL
>91b9	14 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>91bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>91bc	08					.byte NN	;wh_Flags	dictionary flags
=37176					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.91bd					ToFloat:
.91bd	20 a5 b7	jsr $b7a5			jsr Zero	; alloc & init workspace
.91c0	20 a5 b7	jsr $b7a5			jsr Zero
.91c3	20 a5 b7	jsr $b7a5			jsr Zero
=$2c					_addr		= DStack+8
=$2a					_len		= DStack+6
=$29					_mantfound 	= DStack+5		;mantissa digits found
=$28					_exponent 	= DStack+4		;exponent
=$27					_decimalPos 	= DStack+3		;decimal point position
=$26					_DecPointFound1 = DStack+2
=$25					_MantissaNegative1 = DStack+1
=$24					_ExponentNegative1 = DStack+0
.91c6	20 ec 88	jsr $88ec			jsr F0			; init result
.91c9	20 9b 92	jsr $929b	_11:		jsr _GetChar		; get mantissa prefix
.91cc	b0 57		bcs $9225			bcs _trueb ;_finishb
.91ce	c9 20		cmp #$20			cmp #' '
.91d0	f0 f7		beq $91c9			beq _11
.91d2	c9 2b		cmp #$2b			cmp #'+'
.91d4	f0 06		beq $91dc			beq _20
.91d6	c9 2d		cmp #$2d			cmp #'-'
.91d8	d0 07		bne $91e1			bne _21
.91da	95 25		sta $25,x			sta _MantissaNegative1,x ; remember mantissa is negative
.91dc	20 9b 92	jsr $929b	_20:		jsr _GetChar		; do next mantissa digits
.91df	b0 47		bcs $9228			bcs _finishb
.91e1	c9 2e		cmp #$2e	_21:		cmp #'.'
.91e3	f0 31		beq $9216			beq _27
.91e5	c9 45		cmp #$45			cmp #'E'
.91e7	f0 42		beq $922b			beq _30
.91e9	c9 65		cmp #$65			cmp #'e'
.91eb	f0 3e		beq $922b			beq _30
.91ed	c9 44		cmp #$44			cmp #'D'
.91ef	f0 3a		beq $922b			beq _30
.91f1	c9 64		cmp #$64			cmp #'d'
.91f3	f0 36		beq $922b			beq _30
.91f5	38		sec				sec			;   a digit?
.91f6	e9 30		sbc #$30			sbc #'0'
.91f8	90 24		bcc $921e			bcc _fail
.91fa	c9 0a		cmp #$0a			cmp #9+1
.91fc	b0 20		bcs $921e			bcs _fail
.91fe	48		pha				pha			; append digit to mantissa
.91ff	20 92 8c	jsr $8c92			jsr F10Star
.9202	68		pla				pla
.9203	a0 00		ldy #$00			ldy #0
.9205	20 41 8e	jsr $8e41			jsr SToFYA
.9208	20 29 8b	jsr $8b29			jsr FPlus
.920b	f6 29		inc $29,x			inc _mantfound,x	; remember we found a mantissa digit
.920d	b5 26		lda $26,x			lda _DecPointFound1,x	; if mantissa decimal point found
.920f	f0 02		beq $9213			beq +
.9211	d6 27		dec $27,x			dec _decimalPos,x	;   increment decimal point position
.9213					+
.9213	4c dc 91	jmp $91dc			jmp _20
.9216					_27:
.9216	b4 26		ldy $26,x			ldy _DecPointFound1,x	; already have one?
.9218	d0 04		bne $921e			bne _fail
.921a	95 26		sta $26,x			sta _DecPointFound1,x	; we have one now!
.921c	f0 be		beq $91dc			beq _20
.921e					_fail:
.921e	20 e4 83	jsr $83e4			jsr FDrop
.9221	a9 00		lda #$00			lda #0			;return false
.9223	f0 69		beq $928e			beq _return
.9225	4c 8c 92	jmp $928c	_trueb:		jmp _true
.9228	4c 59 92	jmp $9259	_finishb:	jmp _finish
.922b					_30:
.922b	20 9b 92	jsr $929b			jsr _GetChar
.922e	b0 29		bcs $9259			bcs _finish
.9230	c9 2b		cmp #$2b			cmp #'+'
.9232	f0 06		beq $923a			beq _40
.9234	c9 2d		cmp #$2d			cmp #'-'
.9236	d0 07		bne $923f			bne _41
.9238	95 24		sta $24,x			sta _ExponentNegative1,x ; remember exponent is negative
.923a	20 9b 92	jsr $929b	_40:		jsr _GetChar		;get exponent digits
.923d	b0 1a		bcs $9259			bcs _finish
.923f	38		sec		_41:		sec			;  digit?
.9240	e9 30		sbc #$30			sbc #'0'
.9242	90 da		bcc $921e			bcc _fail
.9244	c9 0a		cmp #$0a			cmp #9+1
.9246	b0 d6		bcs $921e			bcs _fail
.9248	85 14		sta $14				sta tmp1
.924a	16 28		asl $28,x			asl _exponent,x		;  exponent *= 10
.924c	b5 28		lda $28,x			lda _exponent,x
.924e	0a		asl a				asl a
.924f	0a		asl a				asl a
.9250	75 28		adc $28,x			adc _exponent,x
.9252	65 14		adc $14				adc tmp1		;  + digit
.9254	95 28		sta $28,x			sta _exponent,x
.9256	4c 3a 92	jmp $923a			jmp _40
.9259					_finish:
.9259	b5 29		lda $29,x			lda _mantfound,x	;some mantissa digits found?
.925b	f0 c1		beq $921e			beq _fail
.925d	b5 24		lda $24,x			lda _ExponentNegative1,x ;apply exponent sign
.925f	f0 07		beq $9268			beq +
.9261	a9 00		lda #$00			lda #0
.9263	38		sec				sec
.9264	f5 28		sbc $28,x			sbc _exponent,x
.9266	95 28		sta $28,x			sta _exponent,x
.9268					+
.9268	b5 28		lda $28,x			lda _exponent,x		;apply decimal position to exponent
.926a	18		clc				clc
.926b	75 27		adc $27,x			adc _decimalPos,x
.926d	95 28		sta $28,x			sta _exponent,x
.926f	4c 77 92	jmp $9277			jmp _93
.9272	20 92 8c	jsr $8c92	_93b:		jsr F10Star		;apply exponent to mantissa
.9275	d6 28		dec $28,x			dec _exponent,x
.9277	f0 0a		beq $9283	_93:		beq _94
.9279	10 f7		bpl $9272			bpl _93b
.927b	20 0c 89	jsr $890c	_94b:		jsr F10
.927e	20 b0 8c	jsr $8cb0			jsr FSlash
.9281	f6 28		inc $28,x			inc _exponent,x
.9283	30 f6		bmi $927b	_94:		bmi _94b
.9285					_95:
.9285	b5 25		lda $25,x			lda _MantissaNegative1,x ;apply mantissa sign
.9287	f0 03		beq $928c			beq +
.9289	20 a2 8b	jsr $8ba2			jsr FNegate
.928c					+
.928c	a9 ff		lda #$ff	_true:		lda #$ff		;return true
.928e					_return:
.928e	95 2c		sta $2c,x			sta _addr+0,x		; replace _addr with flag
.9290	95 2d		sta $2d,x			sta _addr+1,x
.9292	e8		inx				inx			; Drop work
.9293	e8		inx				inx
.9294	e8		inx				inx			; 2Drop work
.9295	e8		inx				inx
.9296	e8		inx				inx
.9297	e8		inx				inx
.9298	e8		inx				inx			; Drop len
.9299	e8		inx				inx
.929a	60		rts				rts
.929b					_GetChar:
.929b	38		sec				sec
.929c	b5 2a		lda $2a,x			lda _len,x
.929e	f0 0b		beq $92ab			beq _gc_rts		; if end, return C=1
.92a0	d6 2a		dec $2a,x			dec _len,x
.92a2	a1 2c		lda ($2c,x)			lda (_addr,x)
.92a4	f6 2c		inc $2c,x			inc _addr+0,x
.92a6	d0 02		bne $92aa			bne +
.92a8	f6 2d		inc $2d,x			inc _addr+1,x
.92aa					+
.92aa	18		clc				clc			; get char, return C=0
.92ab	60		rts		_gc_rts:	rts
>92ac	53 46 40			L1:	.text "SF@"	;  name of word as a string, ending at wh_NameLastChar
>92af	03					.byte (("SF@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>92b0	38 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>92b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>92b3	08					.byte NN	;wh_Flags	dictionary flags
=37423					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.92b4	20 9a b3	jsr $b39a	SFAt:		jsr PopYA		; pop sf_addr
.92b7	85 16		sta $16		SFAt_YA:	sta tmp2+0		; save sf_addr
.92b9	84 17		sty $17				sty tmp2+1
.92bb	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.92be	a0 01		ldy #$01			ldy #1			; copy exponent
.92c0	b1 16		lda ($16),y			lda (tmp2),y
.92c2	0a		asl a				asl a
.92c3	88		dey				dey
.92c4	b1 16		lda ($16),y			lda (tmp2),y
.92c6	2a		rol a				rol a
.92c7	38		sec				sec
.92c8	e9 7e		sbc #$7e			sbc #126
.92ca	95 4d		sta $4d,x			sta FSExp,x
.92cc	a0 01		ldy #$01			ldy #1			; copy mantissa
.92ce	b1 16		lda ($16),y			lda (tmp2),y
.92d0	09 80		ora #$80			ora #$80
.92d2	4a		lsr a				lsr a
.92d3	95 57		sta $57,x			sta FSMant0,x
.92d5	c8		iny				iny
.92d6	b1 16		lda ($16),y			lda (tmp2),y
.92d8	6a		ror a				ror a
.92d9	95 61		sta $61,x			sta FSMant1,x
.92db	c8		iny				iny
.92dc	b1 16		lda ($16),y			lda (tmp2),y
.92de	6a		ror a				ror a
.92df	95 6b		sta $6b,x			sta FSMant2,x
.92e1	a9 00		lda #$00			lda #0
.92e3	6a		ror a				ror a
.92e4	95 75		sta $75,x			sta FSMant3,x
.92e6	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.92e8	a0 00		ldy #$00			ldy #0			; get sign
.92ea	b1 16		lda ($16),y			lda (tmp2),y
.92ec	10 03		bpl $92f1			bpl +
.92ee	20 a2 8b	jsr $8ba2			jsr FNegate
.92f1					+
=61					CL	.var *-(WordListLink+wh_Xt)
=$92f1					en = *	; remember here
>92b2	3d					.byte CL	;wh_CodeLength
.92f1	60		rts				rts
>92f2	53 46 21			L1:	.text "SF!"	;  name of word as a string, ending at wh_NameLastChar
>92f5	23					.byte (("SF!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>92f6	2f 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>92f8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>92f9	08					.byte NN	;wh_Flags	dictionary flags
=37493					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.92fa	20 9a b3	jsr $b39a	SFStore:	jsr PopYA		; pop sf_addr
.92fd	85 16		sta $16		SFStore_YA:	sta tmp2+0		; save
.92ff	84 17		sty $17				sty tmp2+1
.9301	a4 4c		ldy $4c				ldy fp			; negative?
.9303	b9 57 00	lda $0057,y			lda FSMant0,y
.9306	29 80		and #$80			and #$80		;  save sign
.9308	85 19		sta $19				sta tmp3+1
.930a	10 03		bpl $930f			bpl +
.930c	20 a2 8b	jsr $8ba2			jsr FNegate
.930f					+
.930f	86 14		stx $14				stx tmp1+0		; save data stack index
.9311	a6 4c		ldx $4c				ldx fp			; switch to FP stack index
.9313	b5 4d		lda $4d,x			lda FSExp,x		; +128
.9315	18		clc				clc
.9316	69 7e		adc #$7e			adc #126
.9318	95 4d		sta $4d,x			sta FSExp,x
.931a	16 75		asl $75,x			asl FSMant3,x
.931c	b5 6b		lda $6b,x			lda FSMant2,x
.931e	2a		rol a				rol a
.931f	a0 03		ldy #$03			ldy #3			; +3 IEEE
.9321	91 16		sta ($16),y			sta (tmp2),y
.9323	b5 61		lda $61,x			lda FSMant1,x
.9325	2a		rol a				rol a
.9326	88		dey				dey			; +2 IEEE
.9327	91 16		sta ($16),y			sta (tmp2),y
.9329	b5 57		lda $57,x			lda FSMant0,x
.932b	2a		rol a				rol a
.932c	2a		rol a				rol a
.932d	56 4d		lsr $4d,x			lsr FSExp,x
.932f	6a		ror a				ror a
.9330	88		dey				dey			; +1 IEEE
.9331	91 16		sta ($16),y			sta (tmp2),y
.9333	b5 4d		lda $4d,x			lda FSExp,x
.9335	05 19		ora $19				ora tmp3+1		;  insert sign
.9337	88		dey				dey			; +0 IEEE
.9338	91 16		sta ($16),y			sta (tmp2),y
.933a	e6 4c		inc $4c				inc fp			; FDrop
.933c	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=68					CL	.var *-(WordListLink+wh_Xt)
=$933e					en = *	; remember here
>92f8	44					.byte CL	;wh_CodeLength
.933e	60		rts				rts
>933f	53 46 6c 6f 61 74 2b		L1:	.text "SFloat+"	;  name of word as a string, ending at wh_NameLastChar
>9346	67					.byte (("SFloat+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9347	75 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9349	03					.byte 3		;wh_CodeLength  (with placeholder value)
>934a	08					.byte NN	;wh_Flags	dictionary flags
=37574					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.934b	a9 04		lda #$04	SFloatPlus:	lda #4
.934d	4c 95 c9	jmp $c995			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9350					en = *	; remember here
>9349	05					.byte CL	;wh_CodeLength
>9350	53 46 6c 6f 61 74 73		L1:	.text "SFloats"	;  name of word as a string, ending at wh_NameLastChar
>9357	67					.byte (("SFloats"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9358	c6 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>935a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>935b	08					.byte NN	;wh_Flags	dictionary flags
=37591					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.935c	a9 02		lda #$02	SFloats:	lda #2
.935e	4c d9 ca	jmp $cad9			jmp LShift_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9361					en = *	; remember here
>935a	05					.byte CL	;wh_CodeLength
>9361	44 46 21			L1:	.text "DF!"	;  name of word as a string, ending at wh_NameLastChar
>9364	23					.byte (("DF!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9365	d7 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9367	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9368	08					.byte NN	;wh_Flags	dictionary flags
=37604					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9369	20 9a b3	jsr $b39a	DFStore:	jsr PopYA		; pop df_addr
.936c	85 16		sta $16		DFStore_YA:	sta tmp2+0		; save df_addr
.936e	84 17		sty $17				sty tmp2+1
.9370	a4 4c		ldy $4c				ldy fp			; negative?
.9372	b9 57 00	lda $0057,y			lda FSMant0,y
.9375	29 80		and #$80			and #$80		; remember sign
.9377	85 19		sta $19				sta tmp3+1
.9379	10 03		bpl $937e			bpl +			; make positive
.937b	20 a2 8b	jsr $8ba2			jsr FNegate
.937e					+
.937e	86 14		stx $14				stx tmp1+0		; save data stack index
.9380	a6 4c		ldx $4c				ldx fp
.9382	a9 00		lda #$00			lda #0
.9384	a0 07		ldy #$07			ldy #7			; +7 IEEE
.9386	91 16		sta ($16),y			sta (tmp2),y
.9388	88		dey				dey			; +6 IEEE
.9389	91 16		sta ($16),y			sta (tmp2),y
.938b	20 d3 93	jsr $93d3			jsr _shift		; shift mantissa
.938e	20 d3 93	jsr $93d3			jsr _shift
.9391	88		dey				dey			; +5 IEEE
.9392	91 16		sta ($16),y			sta (tmp2),y
.9394	b5 75		lda $75,x			lda FSMant3,x
.9396	88		dey				dey			; +4 IEEE
.9397	91 16		sta ($16),y			sta (tmp2),y
.9399	b5 6b		lda $6b,x			lda FSMant2,x
.939b	88		dey				dey			; +3 IEEE
.939c	91 16		sta ($16),y			sta (tmp2),y
.939e	b5 61		lda $61,x			lda FSMant1,x
.93a0	88		dey				dey			; +2 IEEE
.93a1	91 16		sta ($16),y			sta (tmp2),y
.93a3	b5 57		lda $57,x			lda FSMant0,x		; clear extra bits
.93a5	29 0f		and #$0f			and #$f
.93a7	95 57		sta $57,x			sta FSMant0,x
.93a9	b5 4d		lda $4d,x			lda FSExp,x
.93ab	38		sec				sec
.93ac	e9 02		sbc #$02			sbc #2
.93ae	95 4d		sta $4d,x			sta FSExp,x
.93b0	0a		asl a				asl a
.93b1	0a		asl a				asl a
.93b2	0a		asl a				asl a
.93b3	0a		asl a				asl a
.93b4	15 57		ora $57,x			ora FSMant0,x
.93b6	88		dey				dey			; +1 IEEE
.93b7	91 16		sta ($16),y			sta (tmp2),y
.93b9	b5 4d		lda $4d,x			lda FSExp,x
.93bb	08		php				php
.93bc	4a		lsr a				lsr a
.93bd	4a		lsr a				lsr a
.93be	4a		lsr a				lsr a
.93bf	4a		lsr a				lsr a
.93c0	18		clc				clc
.93c1	69 30		adc #$30			adc #$30
.93c3	28		plp				plp
.93c4	30 03		bmi $93c9			bmi +
.93c6	18		clc				clc
.93c7	69 10		adc #$10			adc #$10
.93c9	05 19		ora $19		+		ora tmp3+1		; add sign bit
.93cb	88		dey				dey			; +0 IEEE
.93cc	91 16		sta ($16),y			sta (tmp2),y
.93ce	e6 4c		inc $4c				inc fp			; FDrop
.93d0	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.93d2	60		rts				rts
.93d3	56 57		lsr $57,x	_shift:		lsr FSMant0,x
.93d5	76 61		ror $61,x			ror FSMant1,x
.93d7	76 6b		ror $6b,x			ror FSMant2,x
.93d9	76 75		ror $75,x			ror FSMant3,x
.93db	6a		ror a				ror a
=115					CL	.var *-(WordListLink+wh_Xt)
=$93dc					en = *	; remember here
>9367	73					.byte CL	;wh_CodeLength
.93dc	60		rts				rts
>93dd	44 46 40			L1:	.text "DF@"	;  name of word as a string, ending at wh_NameLastChar
>93e0	03					.byte (("DF@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>93e1	e4 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>93e3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>93e4	08					.byte NN	;wh_Flags	dictionary flags
=37728					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.93e5	20 9a b3	jsr $b39a	DFAt:		jsr PopYA		; pop df_addr
.93e8	85 16		sta $16		DFAt_YA:	sta tmp2+0		; save df_addr
.93ea	84 17		sty $17				sty tmp2+1
.93ec	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.93ef	a0 00		ldy #$00			ldy #0			; +0 IEEE byte
.93f1	b1 16		lda ($16),y			lda (tmp2),y
.93f3	95 4d		sta $4d,x			sta FSExp,x
.93f5	c8		iny				iny			; +1 IEEE byte
.93f6	b1 16		lda ($16),y			lda (tmp2),y
.93f8	95 57		sta $57,x			sta FSMant0,x
.93fa	c8		iny				iny			; +2 IEEE byte
.93fb	b1 16		lda ($16),y			lda (tmp2),y
.93fd	95 61		sta $61,x			sta FSMant1,x
.93ff	c8		iny				iny			; +3 IEEE byte
.9400	b1 16		lda ($16),y			lda (tmp2),y
.9402	95 6b		sta $6b,x			sta FSMant2,x
.9404	c8		iny				iny			; +4 IEEE byte
.9405	b1 16		lda ($16),y			lda (tmp2),y
.9407	95 75		sta $75,x			sta FSMant3,x
.9409	c8		iny				iny			; +5 IEEE byte
.940a	b1 16		lda ($16),y			lda (tmp2),y
.940c	20 35 94	jsr $9435			jsr _shifta		; shift exponent & mantissa bits into place
.940f	20 35 94	jsr $9435			jsr _shifta
.9412	b5 57		lda $57,x			lda FSMant0,x		; finish shifting exponent bits
.9414	0a		asl a				asl a
.9415	36 4d		rol $4d,x			rol FSExp,x
.9417	0a		asl a				asl a
.9418	36 4d		rol $4d,x			rol FSExp,x
.941a	b5 4d		lda $4d,x			lda FSExp,x		; remove +1023
.941c	18		clc				clc
.941d	69 02		adc #$02			adc #2
.941f	95 4d		sta $4d,x			sta FSExp,x
.9421	b5 57		lda $57,x			lda FSMant0,x
.9423	29 7f		and #$7f			and #$7f
.9425	09 40		ora #$40			ora #$40		;   insert implied 1
.9427	95 57		sta $57,x			sta FSMant0,x		;   insert sign=0
.9429	a6 14		ldx $14				ldx tmp1		; restore data stack index
.942b	a0 00		ldy #$00			ldy #0			; get sign from +0 IEEE byte
.942d	b1 16		lda ($16),y			lda (tmp2),y
.942f	10 03		bpl $9434			bpl +
.9431	20 a2 8b	jsr $8ba2			jsr FNegate
.9434					+
.9434	60		rts				rts
.9435	0a		asl a		_shifta:	asl a
.9436	36 75		rol $75,x			rol FSMant3,x
.9438	36 6b		rol $6b,x			rol FSMant2,x
.943a	36 61		rol $61,x			rol FSMant1,x
.943c	36 57		rol $57,x			rol FSMant0,x
.943e	36 4d		rol $4d,x			rol FSExp,x
.9440	60		rts				rts
=92					CL	.var *-(WordListLink+wh_Xt)
=$9441					en = *	; remember here
>93e3	5c					.byte CL	;wh_CodeLength
>9441	44 46 6c 6f 61 74 2b		L1:	.text "DFloat+"	;  name of word as a string, ending at wh_NameLastChar
>9448	67					.byte (("DFloat+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9449	60 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>944b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>944c	08					.byte NN	;wh_Flags	dictionary flags
=37832					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.944d	a9 08		lda #$08	DFloatPlus:	lda #8
.944f	4c 95 c9	jmp $c995			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9452					en = *	; remember here
>944b	05					.byte CL	;wh_CodeLength
>9452	44 46 6c 6f 61 74 73		L1:	.text "DFloats"	;  name of word as a string, ending at wh_NameLastChar
>9459	67					.byte (("DFloats"[-1]&7)<<5)+(*-L1)	;wh_HNL
>945a	c8 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>945c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>945d	08					.byte NN	;wh_Flags	dictionary flags
=37849					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.945e	a9 03		lda #$03	DFloats:	lda #3
.9460	4c d9 ca	jmp $cad9			jmp LShift_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9463					en = *	; remember here
>945c	05					.byte CL	;wh_CodeLength
>9463	46 4b 65 79			L1:	.text "FKey"	;  name of word as a string, ending at wh_NameLastChar
>9467	24					.byte (("FKey"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9468	d9 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>946a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>946b	08					.byte NN	;wh_Flags	dictionary flags
=37863					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.946c					FKey:
.946c	20 b2 c9	jsr $c9b2			jsr Here		; ( addr )
.946f	20 b2 c9	jsr $c9b2			jsr Here		; ( addr addr )
.9472	a9 28		lda #$28			lda #40			; ( addr addr 40 )
.9474	20 96 b7	jsr $b796			jsr PushZA
.9477	20 6c c2	jsr $c26c			jsr Accept		; ( addr len )
.947a	20 bd 91	jsr $91bd			jsr ToFloat		; ( true | false)
.947d	e8		inx				inx			; err?
.947e	e8		inx				inx
.947f	b5 22		lda $22,x			lda DStack-2,x
.9481	f0 01		beq $9484			beq _err
.9483	60		rts				rts
.9484	20 75 b8	jsr $b875	_err:		jsr SLiteral_runtime
.9487	4c 8d 94	jmp $948d			  jmp +
>948a	20 3f 20					  .text " ? "
.948d	20 78 cd	jsr $cd78	+		jsr Type
.9490	4c 6c 94	jmp $946c			jmp FKey
>9493	46 4d 50 6f 6c 79		L1:	.text "FMPoly"	;  name of word as a string, ending at wh_NameLastChar
>9499	26					.byte (("FMPoly"[-1]&7)<<5)+(*-L1)	;wh_HNL
>949a	e7 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>949c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>949d	08					.byte NN	;wh_Flags	dictionary flags
=37913					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.949e	20 9a b3	jsr $b39a	FMPoly:		jsr PopYA
.94a1	20 54 b7	jsr $b754	FMPolyYA:	jsr PushYA		; push coefficent addr
.94a4	20 82 85	jsr $8582			jsr FAt_YA		; fetch 1st coefficent
.94a7	4c ba 94	jmp $94ba			jmp _4
.94aa	20 9c 84	jsr $849c	_2:		jsr FOver
.94ad	20 fd 8b	jsr $8bfd			jsr FStar
.94b0	b5 24		lda $24,x			lda DStack+0,x		; fetch next coefficent
.94b2	b4 25		ldy $25,x			ldy DStack+1,x
.94b4	20 82 85	jsr $8582			jsr FAt_YA
.94b7	20 29 8b	jsr $8b29			jsr FPlus
.94ba	a9 05		lda #$05	_4:		lda #5			; bump coefficent ptr
.94bc	20 95 c9	jsr $c995			jsr Plus_A
.94bf	a1 24		lda ($24,x)			lda (DStack+0,x)	; end of coefficent list?
.94c1	d0 e7		bne $94aa			bne _2
.94c3	e8		inx				inx			; Drop coefficent ptr
.94c4	e8		inx				inx
=39					CL	.var *-(WordListLink+wh_Xt)
=$94c5					en = *	; remember here
>949c	27					.byte CL	;wh_CodeLength
.94c5	60		rts				rts
>94c6	46 4c 6f 67 32 4d 31 4d		L1:	.text "FLog2M1M"	;  name of word as a string, ending at wh_NameLastChar
>94ce	a8					.byte (("FLog2M1M"[-1]&7)<<5)+(*-L1)	;wh_HNL
>94cf	19 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>94d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>94d2	08					.byte NN	;wh_Flags	dictionary flags
=37966					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.94d3	a9 dd		lda #$dd	FLog2M1M:	lda #<_c
.94d5	a0 94		ldy #$94			ldy #>_c
.94d7	20 a1 94	jsr $94a1			jsr FMPolyYA
.94da	4c fd 8b	jmp $8bfd			jmp FStar
.94dd					_c:
>94dd	cc cf 97 7c					.dword $7C97CFCC	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94e1	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>94e2	64 87 94 af					.dword $AF948764	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94e6	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>94e7	66 c8 d4 62					.dword $62D4C866	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94eb	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>94ec	e2 9c c3 ac					.dword $ACC39CE2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94f0	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>94f1	1a c6 2b 79					.dword $792BC61A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94f5	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>94f6	07 e1 c4 a3					.dword $A3C4E107	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94fa	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>94fb	91 a5 54 5c					.dword $5C54A591	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94ff	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>9500	00 00						.word 0
=47					CL	.var *-(WordListLink+wh_Xt)
=$9502					en = *	; remember here
>94d1	2f					.byte CL	;wh_CodeLength
>9502	46 4c 6f 67 32			L1:	.text "FLog2"	;  name of word as a string, ending at wh_NameLastChar
>9507	45					.byte (("FLog2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9508	4e 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>950a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>950b	08					.byte NN	;wh_Flags	dictionary flags
=38023					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.950c	a4 4c		ldy $4c		FLog2:		ldy fp
.950e	b9 57 00	lda $0057,y			lda FSMant0,y	; bad param?
.9511	30 20		bmi $9533			bmi _OutOfRange
.9513	f0 1e		beq $9533			beq _OutOfRange
.9515	b9 4d 00	lda $004d,y			lda FSExp,y
.9518	48		pha				pha		; remember orig exponent
.9519	a9 01		lda #$01			lda #1
.951b	99 4d 00	sta $004d,y			sta FSExp,y	; set to 1
.951e	20 90 8b	jsr $8b90			jsr F1Minus
.9521	20 d3 94	jsr $94d3			jsr FLog2M1M
.9524	a0 00		ldy #$00			ldy #0		; add orig exponent to float
.9526	68		pla				pla
.9527	38		sec				sec
.9528	e9 01		sbc #$01			sbc #1
.952a	10 01		bpl $952d			bpl +
.952c	88		dey				dey
.952d					+
.952d	20 41 8e	jsr $8e41			jsr SToFYA
.9530	4c 29 8b	jmp $8b29			jmp FPlus
.9533	4c fc b3	jmp $b3fc	_OutOfRange:	jmp Throw_FpOutOfRange
=42					CL	.var *-(WordListLink+wh_Xt)
=$9536					en = *	; remember here
>950a	2a					.byte CL	;wh_CodeLength
>9536	46 4c 6e			L1:	.text "FLn"	;  name of word as a string, ending at wh_NameLastChar
>9539	c3					.byte (("FLn"[-1]&7)<<5)+(*-L1)	;wh_HNL
>953a	87 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>953c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>953d	08					.byte NN	;wh_Flags	dictionary flags
=38073					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.953e	20 0c 95	jsr $950c	FLn:		jsr FLog2
.9541	20 cc 88	jsr $88cc			jsr FLitI
>9544	f8 0b b9 58					.dword $58b90bf8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9548	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
.9549	4c fd 8b	jmp $8bfd			jmp FStar
=14					CL	.var *-(WordListLink+wh_Xt)
=$954c					en = *	; remember here
>953c	0e					.byte CL	;wh_CodeLength
>954c	46 4c 6e 50 31			L1:	.text "FLnP1"	;  name of word as a string, ending at wh_NameLastChar
>9551	25					.byte (("FLnP1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9552	b9 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9554	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9555	08					.byte NN	;wh_Flags	dictionary flags
=38097					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9556	20 5e 8b	jsr $8b5e	FlnP1:		jsr F1Plus
.9559	4c 3e 95	jmp $953e			jmp FLn
=6					CL	.var *-(WordListLink+wh_Xt)
=$955c					en = *	; remember here
>9554	06					.byte CL	;wh_CodeLength
>955c	46 4c 6f 67			L1:	.text "FLog"	;  name of word as a string, ending at wh_NameLastChar
>9560	e4					.byte (("FLog"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9561	d1 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9563	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9564	08					.byte NN	;wh_Flags	dictionary flags
=38112					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9565	20 0c 95	jsr $950c	FLog:		jsr FLog2
.9568	20 cc 88	jsr $88cc			jsr FLitI
>956b	3c 4d 10 4d					.dword $4d104d3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>956f	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
.9570	4c fd 8b	jmp $8bfd			jmp FStar
=14					CL	.var *-(WordListLink+wh_Xt)
=$9573					en = *	; remember here
>9563	0e					.byte CL	;wh_CodeLength
>9573	46 45 78 70 32 4d 31 4d		L1:	.text "FExp2M1M"	;  name of word as a string, ending at wh_NameLastChar
>957b	a8					.byte (("FExp2M1M"[-1]&7)<<5)+(*-L1)	;wh_HNL
>957c	e0 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>957e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>957f	08					.byte NN	;wh_Flags	dictionary flags
=38139					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9580	a9 8a		lda #$8a	FExp2M1M:	lda #<_c
.9582	a0 95		ldy #$95			ldy #>_c
.9584	20 a1 94	jsr $94a1			jsr FMPolyYA
.9587	4c fd 8b	jmp $8bfd			jmp FStar
=10					CL	.var *-(WordListLink+wh_Xt)
=$958a					en = *	; remember here
>957e	0a					.byte CL	;wh_CodeLength
.958a					_c:
>958a	da dc 4f 7c					.dword $7C4FDCDa	; 32 bit signed binary mantissa.  $40000000 = +0.5
>958e	f7						.char -9		; 8 bit signed exponent.  $00 = 2**0
>958f	d6 ca 4c 49					.dword $494CCAD6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9593	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9594	f0 42 64 72					.dword $726442f0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9598	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9599	44 90 f4 7a					.dword $7AF49044	; 32 bit signed binary mantissa.  $40000000 = +0.5
>959d	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>959e	9b 3c b9 58					.dword $58B93C9b	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95a2	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>95a3	00						.byte 0
>95a4	46 45 78 70 32			L1:	.text "FExp2"	;  name of word as a string, ending at wh_NameLastChar
>95a9	45					.byte (("FExp2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95aa	fb 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95ac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95ad	08					.byte NN	;wh_Flags	dictionary flags
=38185					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95ae	20 17 87	jsr $8717	FExp2:		jsr FIntFrc	; ( f: r_rem r_int )
.95b1	20 8b 8e	jsr $8e8b			jsr FToS
.95b4	20 80 95	jsr $9580			jsr FExp2M1M
.95b7	20 5e 8b	jsr $8b5e			jsr F1Plus
.95ba	20 7e b3	jsr $b37e			jsr PopA
.95bd	a4 4c		ldy $4c				ldy fp
.95bf	18		clc				clc
.95c0	79 4d 00	adc $004d,y			adc FSExp,y
.95c3	99 4d 00	sta $004d,y			sta FSExp,y
=24					CL	.var *-(WordListLink+wh_Xt)
=$95c6					en = *	; remember here
>95ac	18					.byte CL	;wh_CodeLength
.95c6	60		rts				rts
>95c7	46 45 78 70			L1:	.text "FExp"	;  name of word as a string, ending at wh_NameLastChar
>95cb	04					.byte (("FExp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95cc	29 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95cf	08					.byte NN	;wh_Flags	dictionary flags
=38219					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95d0					FExp:
.95d0	20 cc 88	jsr $88cc			jsr FLitI
>95d3	94 1d 55 5c					.dword $5c551d94	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95d7	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
.95d8	20 fd 8b	jsr $8bfd			jsr FStar
.95db	4c ae 95	jmp $95ae			jmp FExp2
=14					CL	.var *-(WordListLink+wh_Xt)
=$95de					en = *	; remember here
>95ce	0e					.byte CL	;wh_CodeLength
>95de	46 45 78 70 4d 31		L1:	.text "FExpM1"	;  name of word as a string, ending at wh_NameLastChar
>95e4	26					.byte (("FExpM1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95e5	4b 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95e8	08					.byte NN	;wh_Flags	dictionary flags
=38244					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95e9	20 d0 95	jsr $95d0	FExpM1:		jsr FExp
.95ec	4c 90 8b	jmp $8b90			jmp F1Minus
=6					CL	.var *-(WordListLink+wh_Xt)
=$95ef					en = *	; remember here
>95e7	06					.byte CL	;wh_CodeLength
>95ef	46 41 4c 6f 67			L1:	.text "FALog"	;  name of word as a string, ending at wh_NameLastChar
>95f4	e5					.byte (("FALog"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95f5	64 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95f8	08					.byte NN	;wh_Flags	dictionary flags
=38260					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95f9					FALog:
.95f9	20 cc 88	jsr $88cc			jsr FLitI
>95fc	20 3c 4d 6a					.dword $6a4d3c20	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9600	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
.9601	20 fd 8b	jsr $8bfd			jsr FStar
.9604	4c ae 95	jmp $95ae			jmp FExp2
=14					CL	.var *-(WordListLink+wh_Xt)
=$9607					en = *	; remember here
>95f7	0e					.byte CL	;wh_CodeLength
>9607	46 2a 2a			L1:	.text "F**"	;  name of word as a string, ending at wh_NameLastChar
>960a	43					.byte (("F**"[-1]&7)<<5)+(*-L1)	;wh_HNL
>960b	74 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>960d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>960e	08					.byte NN	;wh_Flags	dictionary flags
=38282					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.960f	20 00 85	jsr $8500	FPower:		jsr FSwap
.9612	20 0c 95	jsr $950c			jsr FLog2
.9615	20 fd 8b	jsr $8bfd			jsr FStar
.9618	4c ae 95	jmp $95ae			jmp FExp2
=12					CL	.var *-(WordListLink+wh_Xt)
=$961b					en = *	; remember here
>960d	0c					.byte CL	;wh_CodeLength
>961b	44 65 67 32 52 61 64		L1:	.text "Deg2Rad"	;  name of word as a string, ending at wh_NameLastChar
>9622	87					.byte (("Deg2Rad"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9623	8a 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9625	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9626	08					.byte NN	;wh_Flags	dictionary flags
=38306					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9627					Deg2Rad:
.9627	20 cc 88	jsr $88cc			jsr FLitI
>962a	8a 1a 7d 47					.dword $477d1A8A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>962e	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
.962f	4c fd 8b	jmp $8bfd			jmp FStar
=11					CL	.var *-(WordListLink+wh_Xt)
=$9632					en = *	; remember here
>9625	0b					.byte CL	;wh_CodeLength
>9632	52 61 64 32 44 65 67		L1:	.text "Rad2Deg"	;  name of word as a string, ending at wh_NameLastChar
>9639	e7					.byte (("Rad2Deg"[-1]&7)<<5)+(*-L1)	;wh_HNL
>963a	a2 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>963c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>963d	08					.byte NN	;wh_Flags	dictionary flags
=38329					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.963e					Rad2Deg:
.963e	20 cc 88	jsr $88cc			jsr FLitI
>9641	68 70 97 72					.dword $72977068	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9645	06						.char 6		; 8 bit signed exponent.  $00 = 2**0
.9646	4c fd 8b	jmp $8bfd			jmp FStar
=11					CL	.var *-(WordListLink+wh_Xt)
=$9649					en = *	; remember here
>963c	0b					.byte CL	;wh_CodeLength
>9649	46 41 52 65 64 75 63 65		L1:	.text "FAReduce"	;  name of word as a string, ending at wh_NameLastChar
>9651	a8					.byte (("FAReduce"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9652	b9 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9654	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9655	08					.byte NN	;wh_Flags	dictionary flags
=38353					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9656	a4 4c		ldy $4c		FAReduce:	ldy fp
.9658	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.965b	f0 2f		beq $968c			beq _ok
.965d	b9 4d 00	lda $004d,y			lda FSExp,y		; get exponent
.9660	30 2a		bmi $968c			bmi _ok			; small?
.9662	c9 01		cmp #$01			cmp #1			; maybe need mirror?
.9664	30 26		bmi $968c			bmi _ok			;if exponent <=0
.9666	f0 24		beq $968c			beq _ok
.9668	c9 02		cmp #$02			cmp #2			; maybe need rotation?
.966a	b0 22		bcs $968e			bcs _exp2
.966c	b9 57 00	lda $0057,y			lda FSMant0,y
.966f	c9 65		cmp #$65			cmp #$65		;in -pi/2..pi/2 ?
.9671	90 19		bcc $968c			bcc _ok
.9673	c9 9b		cmp #$9b			cmp #$100-$65
.9675	b0 15		bcs $968c			bcs _ok
.9677					_mir:
.9677	20 45 89	jsr $8945			jsr FPi
.967a	a4 4c		ldy $4c				ldy fp
.967c	b9 58 00	lda $0058,y			lda FSMant0+1,y
.967f	10 03		bpl $9684			bpl _3
.9681	20 a2 8b	jsr $8ba2			jsr FNegate
.9684	20 00 85	jsr $8500	_3:		jsr FSwap
.9687	20 6b 8b	jsr $8b6b			jsr FMinus
.968a	38		sec				sec		; mirrored
.968b	60		rts				rts
.968c	18		clc		_ok:		clc		; not mirrored
.968d	60		rts				rts
.968e	d0 0b		bne $969b	_exp2:		bne _rot	;if exp>2 then fix
.9690	b9 57 00	lda $0057,y			lda FSMant0,y
.9693	c9 65		cmp #$65			cmp #$65	;if mant>pi or mant<-pi then fix
.9695	90 e0		bcc $9677			bcc _mir
.9697	c9 9b		cmp #$9b			cmp #$100-$65
.9699	b0 dc		bcs $9677			bcs _mir
.969b	20 77 89	jsr $8977	_rot:		jsr F2Pi
.969e	20 b0 8c	jsr $8cb0			jsr FSlash
.96a1	20 17 87	jsr $8717			jsr FIntFrc
.96a4	e6 4c		inc $4c				inc fp		; FDrop integer part
.96a6	a4 4c		ldy $4c				ldy fp		;if >=.5
.96a8	b9 4d 00	lda $004d,y			lda FSExp,y
.96ab	a8		tay				tay
.96ac	30 03		bmi $96b1			bmi _rot4
.96ae	20 90 8b	jsr $8b90			jsr F1Minus	;  subtract 1
.96b1	20 77 89	jsr $8977	_rot4:		jsr F2Pi
.96b4	20 fd 8b	jsr $8bfd			jsr FStar
.96b7	4c 56 96	jmp $9656			jmp FAReduce	; rotate done, look again
=100					CL	.var *-(WordListLink+wh_Xt)
=$96ba					en = *	; remember here
>9654	64					.byte CL	;wh_CodeLength
>96ba	46 53 69 6e 4d			L1:	.text "FSinM"	;  name of word as a string, ending at wh_NameLastChar
>96bf	a5					.byte (("FSinM"[-1]&7)<<5)+(*-L1)	;wh_HNL
>96c0	d1 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96c3	08					.byte NN	;wh_Flags	dictionary flags
=38463					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.96c4	20 78 84	jsr $8478	FSinM:		jsr FDup
.96c7	20 83 8c	jsr $8c83			jsr FSqr	; x x^2
.96ca	a9 da		lda #$da			lda #<_c
.96cc	a0 96		ldy #$96			ldy #>_c
.96ce	20 a1 94	jsr $94a1			jsr FMPolyYA
.96d1	20 fd 8b	jsr $8bfd			jsr FStar
.96d4	20 5e 8b	jsr $8b5e			jsr F1Plus	; C0 +1.0
.96d7	4c fd 8b	jmp $8bfd			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$96da					en = *	; remember here
>96c2	16					.byte CL	;wh_CodeLength
.96da					_c:
>96da	a6 a7 21 57					.dword $5721a7a6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96de	ee						.char -18		; 8 bit signed exponent.  $00 = 2**0
>96df	4e 0b 2a 98					.dword $982a0b4e	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96e3	f4						.char -12		; 8 bit signed exponent.  $00 = 2**0
>96e4	3c 8f 43 44					.dword $44438f3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96e8	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>96e9	37 ae aa aa					.dword $aaaaae37	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96ed	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>96ee	00						.byte 0
>96ef	46 53 69 6e			L1:	.text "FSin"	;  name of word as a string, ending at wh_NameLastChar
>96f3	c4					.byte (("FSin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>96f4	3f 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96f6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96f7	08					.byte NN	;wh_Flags	dictionary flags
=38515					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.96f8	20 56 96	jsr $9656	FSin:		jsr FAReduce
.96fb	4c c4 96	jmp $96c4			jmp FSinM
=6					CL	.var *-(WordListLink+wh_Xt)
=$96fe					en = *	; remember here
>96f6	06					.byte CL	;wh_CodeLength
>96fe	46 43 6f 73			L1:	.text "FCos"	;  name of word as a string, ending at wh_NameLastChar
>9702	64					.byte (("FCos"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9703	73 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9705	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9706	08					.byte NN	;wh_Flags	dictionary flags
=38530					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9707	20 56 89	jsr $8956	FCos:		jsr FPiH
.970a	20 29 8b	jsr $8b29			jsr FPlus
.970d	4c f8 96	jmp $96f8			jmp FSin
=9					CL	.var *-(WordListLink+wh_Xt)
=$9710					en = *	; remember here
>9705	09					.byte CL	;wh_CodeLength
>9710	46 53 69 6e 43 6f 73		L1:	.text "FSinCos"	;  name of word as a string, ending at wh_NameLastChar
>9717	67					.byte (("FSinCos"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9718	82 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>971a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>971b	08					.byte NN	;wh_Flags	dictionary flags
=38551					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.971c	20 78 84	jsr $8478	FSinCos:	jsr FDup
.971f	20 f8 96	jsr $96f8			jsr FSin
.9722	20 00 85	jsr $8500			jsr FSwap
.9725	4c 07 97	jmp $9707			jmp FCos
=12					CL	.var *-(WordListLink+wh_Xt)
=$9728					en = *	; remember here
>971a	0c					.byte CL	;wh_CodeLength
>9728	46 54 61 6e 4d			L1:	.text "FTanM"	;  name of word as a string, ending at wh_NameLastChar
>972d	a5					.byte (("FTanM"[-1]&7)<<5)+(*-L1)	;wh_HNL
>972e	97 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9730	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9731	08					.byte NN	;wh_Flags	dictionary flags
=38573					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9732	20 78 84	jsr $8478	FTanM:		jsr FDup
.9735	20 83 8c	jsr $8c83			jsr FSqr		; x x^2
.9738	a9 48		lda #$48			lda #<_c
.973a	a0 97		ldy #$97			ldy #>_c
.973c	20 a1 94	jsr $94a1			jsr FMPolyYA
.973f	20 fd 8b	jsr $8bfd			jsr FStar
.9742	20 5e 8b	jsr $8b5e			jsr F1Plus		; c0 1.0
.9745	4c fd 8b	jmp $8bfd			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$9748					en = *	; remember here
>9730	16					.byte CL	;wh_CodeLength
.9748					_c:
>9748	1e ae 4d 58					.dword $584DAE1E	; 32 bit signed binary mantissa.  $40000000 = +0.5
>974c	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>974d	51 0a eb 57					.dword $57EB0A51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9751	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9752	98 d9 14 77					.dword $7714D998	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9756	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9757	f9 10 ea 43					.dword $43EA10F9	; 32 bit signed binary mantissa.  $40000000 = +0.5
>975b	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>975c	1b e2 57 55					.dword $5557E21B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9760	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9761	00						.byte 0
>9762	46 54 61 6e			L1:	.text "FTan"	;  name of word as a string, ending at wh_NameLastChar
>9766	c4					.byte (("FTan"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9767	ad 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9769	03					.byte 3		;wh_CodeLength  (with placeholder value)
>976a	08					.byte NN	;wh_Flags	dictionary flags
=38630					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.976b	20 56 96	jsr $9656	FTan:		jsr FAReduce
.976e	90 06		bcc $9776			bcc _30
.9770	20 76 97	jsr $9776			jsr _30
.9773	4c a2 8b	jmp $8ba2			jmp FNegate
.9776					_30:
.9776	20 78 84	jsr $8478			jsr FDup
.9779	20 c9 8b	jsr $8bc9			jsr FAbs
.977c	20 67 89	jsr $8967			jsr FPiQ
.977f	20 d3 87	jsr $87d3			jsr FLe
.9782	e8		inx				inx			; pop f
.9783	e8		inx				inx
.9784	b5 24		lda $24,x			lda DStack+0,x
.9786	d0 aa		bne $9732			bne FTanM
.9788	20 a2 44	jsr $44a2			jsr FPi/2
.978b	a4 4c		ldy $4c				ldy fp			; get sign
.978d	b9 57 00	lda $0057,y			lda FSMant0,y
.9790	10 03		bpl $9795			bpl +
.9792	20 a2 8b	jsr $8ba2			jsr FNegate
.9795					+
.9795	20 00 85	jsr $8500			jsr FSwap
.9798	20 6b 8b	jsr $8b6b			jsr FMinus
.979b	20 32 97	jsr $9732			jsr FTanM
.979e	4c 55 8d	jmp $8d55			jmp F1Slash
=54					CL	.var *-(WordListLink+wh_Xt)
=$97a1					en = *	; remember here
>9769	36					.byte CL	;wh_CodeLength
>97a1	46 41 43 6f 73			L1:	.text "FACos"	;  name of word as a string, ending at wh_NameLastChar
>97a6	65					.byte (("FACos"[-1]&7)<<5)+(*-L1)	;wh_HNL
>97a7	e6 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>97a9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>97aa	08					.byte NN	;wh_Flags	dictionary flags
=38694					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.97ab	a4 4c		ldy $4c		FACos:		ldy fp
.97ad	b9 57 00	lda $0057,y			lda FSMant0,y
.97b0	08		php				php			; save sign
.97b1	20 c9 8b	jsr $8bc9			jsr FAbs
.97b4	a9 d7		lda #$d7			lda #<_c
.97b6	a0 97		ldy #$97			ldy #>_c
.97b8	20 a1 94	jsr $94a1			jsr FMPolyYA
.97bb	20 00 85	jsr $8500			jsr FSwap
.97be	20 a2 8b	jsr $8ba2			jsr FNegate
.97c1	20 5e 8b	jsr $8b5e			jsr F1Plus
.97c4	20 30 8f	jsr $8f30			jsr FSqrt
.97c7	20 fd 8b	jsr $8bfd			jsr FStar
.97ca	28		plp				plp			; was r1 negative?
.97cb	10 09		bpl $97d6			bpl +
.97cd	20 45 89	jsr $8945			jsr FPi
.97d0	20 00 85	jsr $8500			jsr FSwap
.97d3	20 6b 8b	jsr $8b6b			jsr FMinus
.97d6					+
=43					CL	.var *-(WordListLink+wh_Xt)
=$97d6					en = *	; remember here
>97a9	2b					.byte CL	;wh_CodeLength
.97d6	60		rts				rts
.97d7					_c:
>97d7	8b 5e 9f 4b					.dword $4B9F5E8B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97db	f8						.char -8		; 8 bit signed exponent.  $00 = 2**0
>97dc	ad cc 29 a4					.dword $A429CCAD	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97e0	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>97e1	98 a1 a3 6e					.dword $6EA3A198	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97e5	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>97e6	5a 10 e1 9b					.dword $9BE1105A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97ea	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>97eb	c6 71 ea 5a					.dword $5AEA71C6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97ef	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>97f0	e0 56 21 92					.dword $922156E0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97f4	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>97f5	41 ed 87 64					.dword $6487ED41	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97f9	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>97fa	00						.byte 0
>97fb	46 41 53 69 6e			L1:	.text "FASin"	;  name of word as a string, ending at wh_NameLastChar
>9800	c5					.byte (("FASin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9801	26 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9803	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9804	08					.byte NN	;wh_Flags	dictionary flags
=38784					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9805	20 ab 97	jsr $97ab	FASin:		jsr FACos
.9808	20 a2 8b	jsr $8ba2			jsr FNegate
.980b	20 56 89	jsr $8956			jsr FPiH
.980e	4c 29 8b	jmp $8b29			jmp FPlus
=12					CL	.var *-(WordListLink+wh_Xt)
=$9811					en = *	; remember here
>9803	0c					.byte CL	;wh_CodeLength
>9811	46 41 54 61 6e 4d		L1:	.text "FATanM"	;  name of word as a string, ending at wh_NameLastChar
>9817	a6					.byte (("FATanM"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9818	80 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>981a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>981b	08					.byte NN	;wh_Flags	dictionary flags
=38807					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.981c	20 78 84	jsr $8478	FATanM:		jsr FDup		; x x
.981f	20 83 8c	jsr $8c83			jsr FSqr		; x xsqr
.9822	a9 32		lda #$32			lda #<_c
.9824	a0 98		ldy #$98			ldy #>_c
.9826	20 a1 94	jsr $94a1			jsr FMPolyYA
.9829	20 fd 8b	jsr $8bfd			jsr FStar		; x poly
.982c	20 5e 8b	jsr $8b5e			jsr F1Plus		; x poly
.982f	4c fd 8b	jmp $8bfd			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$9832					en = *	; remember here
>981a	16					.byte CL	;wh_CodeLength
.9832					_c:
>9832	98 08 2d 76					.dword $762D0898	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9836	f9						.char -7		; 8 bit signed exponent.  $00 = 2**0
>9837	55 a1 32 b8					.dword $B832A155	; 32 bit signed binary mantissa.  $40000000 = +0.5
>983b	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>983c	a8 d7 a2 53					.dword $53A2D7A8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9840	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>9841	be 91 85 bb					.dword $BB8591BE	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9845	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9846	06 65 aa 65					.dword $65AA6506	; 32 bit signed binary mantissa.  $40000000 = +0.5
>984a	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>984b	12 21 b0 aa					.dword $AAB02112	; 32 bit signed binary mantissa.  $40000000 = +0.5
>984f	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9850	00						.byte 0
>9851	46 41 54 61 6e			L1:	.text "FATan"	;  name of word as a string, ending at wh_NameLastChar
>9856	c5					.byte (("FATan"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9857	97 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9859	03					.byte 3		;wh_CodeLength  (with placeholder value)
>985a	08					.byte NN	;wh_Flags	dictionary flags
=38870					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.985b					FATan:
.985b	a4 4c		ldy $4c				ldy fp
.985d	b9 4d 00	lda $004d,y			lda FSExp,y		; Abs(r1)<1 ?
.9860	30 ba		bmi $981c			bmi FATanM
.9862	f0 b8		beq $981c			beq FATanM
.9864	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.9867	08		php				php
.9868	20 55 8d	jsr $8d55			jsr F1Slash
.986b	20 1c 98	jsr $981c			jsr FATanM
.986e	20 a2 8b	jsr $8ba2			jsr FNegate
.9871	20 56 89	jsr $8956			jsr FPiH
.9874	28		plp				plp
.9875	10 03		bpl $987a			bpl _18
.9877	20 a2 8b	jsr $8ba2			jsr FNegate
.987a	4c 29 8b	jmp $8b29	_18:		jmp FPlus
>987d	46 41 54 61 6e 32		L1:	.text "FATan2"	;  name of word as a string, ending at wh_NameLastChar
>9883	46					.byte (("FATan2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9884	d6 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9886	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9887	08					.byte NN	;wh_Flags	dictionary flags
=38915					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9888	a4 4c		ldy $4c		FATan2:		ldy fp
.988a	b9 57 00	lda $0057,y			lda FSMant0+0,y	; get rx sign
.988d	f0 1c		beq $98ab			beq _rxzero
.988f	0a		asl a				asl a		;   C=rx sign
.9890	b9 58 00	lda $0058,y			lda FSMant0+1,y	;   N=ry sign
.9893	08		php				php		; save signs
.9894	20 b0 8c	jsr $8cb0			jsr FSlash
.9897	20 5b 98	jsr $985b			jsr FATan
.989a	28		plp				plp		; pop signs
.989b	b0 01		bcs $989e			bcs _rxneg
.989d	60		rts		_rts:		rts
.989e	08		php		_rxneg:		php
.989f	20 45 89	jsr $8945			jsr FPi
.98a2	28		plp				plp
.98a3	10 03		bpl $98a8			bpl +
.98a5	20 a2 8b	jsr $8ba2			jsr FNegate
.98a8	4c 29 8b	jmp $8b29	+		jmp FPlus
.98ab	e6 4c		inc $4c		_rxzero:	inc fp		; FDrop rx
.98ad	b9 57 00	lda $0057,y			lda FSMant0,y
.98b0	08		php				php
.98b1	e6 4c		inc $4c				inc fp		; FDrop ry
.98b3	20 56 89	jsr $8956			jsr FPiH
.98b6	28		plp				plp
.98b7	10 e4		bpl $989d			bpl _rts
.98b9	4c a2 8b	jmp $8ba2			jmp FNegate
=52					CL	.var *-(WordListLink+wh_Xt)
=$98bc					en = *	; remember here
>9886	34					.byte CL	;wh_CodeLength
>98bc	45 64				L1:	.text "Ed"	;  name of word as a string, ending at wh_NameLastChar
>98be	82					.byte (("Ed"[-1]&7)<<5)+(*-L1)	;wh_HNL
>98bf	03 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>98c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>98c2	08					.byte NN	;wh_Flags	dictionary flags
=38974					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.98c3	4c c6 98	jmp $98c6	Ed:		jmp ed6502
=3					CL	.var *-(WordListLink+wh_Xt)
=$98c6					en = *	; remember here
>98c1	03					.byte CL	;wh_CodeLength
=$1e					ed_head	 = editor1  ; pointer to first list element (addr) (2 bytes)
=$20					ed_cur	 = editor2  ; current line number (1 is first line) (2 bytes)
=$22					ed_flags = editor3  ; Flags used by ed, where
.98c6					ed6502:
.98c6	ad 00 03	lda $0300			lda base
.98c9	85 23		sta $23				sta editor3+1
.98cb	20 53 b1	jsr $b153			jsr Decimal
.98ce	a9 00		lda #$00			lda #0
.98d0	85 1e		sta $1e				sta ed_head
.98d2	85 1f		sta $1f				sta ed_head+1
.98d4	85 20		sta $20				sta ed_cur
.98d6	85 21		sta $21				sta ed_cur+1
.98d8	85 22		sta $22				sta ed_flags
.98da	20 a5 b7	jsr $b7a5			jsr Zero
.98dd	20 a5 b7	jsr $b7a5			jsr Zero		; ( addr-t u-t )
.98e0	20 d7 aa	jsr $aad7			jsr CR
.98e3					ed_input_loop:
.98e3	a9 7e		lda #$7e			lda #$ff-%10000001
.98e5	25 22		and $22				and ed_flags
.98e7	85 22		sta $22				sta ed_flags
.98e9	20 8b 9d	jsr $9d8b			jsr ed_get_input
.98ec	a5 06		lda $06				lda ciblen+0
.98ee	d0 1e		bne $990e			bne _command_mode
.98f0	a5 20		lda $20				lda ed_cur+0
.98f2	a4 21		ldy $21				ldy ed_cur+1
.98f4	20 54 b7	jsr $b754			jsr PushYA		; ( addr-t u-t u )
.98f7	a9 80		lda #$80			lda #%10000000
.98f9	05 22		ora $22				ora ed_flags
.98fb	85 22		sta $22				sta ed_flags
.98fd	20 e6 c9	jsr $c9e6			jsr One_Plus		; ( addr-t u-t u+1 )
.9900	20 a6 9d	jsr $9da6			jsr ed_is_valid_line
.9903	b0 03		bcs $9908			bcs +
.9905	4c 7b 9d	jmp $9d7b			jmp ed_error_1drop	; New line number is not legal, abort
.9908					+
.9908	20 a5 b7	jsr $b7a5			jsr Zero		; ( addr-t u-t u+1 0 )
.990b	4c cd 99	jmp $99cd			jmp _line_number_only_from_external
.990e					_command_mode:
.990e	20 a5 b7	jsr $b7a5			jsr Zero		; parameter 1 is NOS ( addr-t u-t 0 )
.9911	20 a5 b7	jsr $b7a5			jsr Zero		; parameter 2 is TOS ( addr-t u-t 0 0 )
.9914	a0 00		ldy #$00			ldy #0			; get char
.9916	b1 04		lda ($04),y			lda (cib),y
.9918	c9 2e		cmp #$2e			cmp #'.'
.991a	d0 31		bne $994d			bne _prefix_dollar
.991c	20 9a 9d	jsr $9d9a			jsr ed_have_text
.991f	a5 20		lda $20				lda ed_cur
.9921	95 26		sta $26,x			sta DStack+2,x
.9923	a5 21		lda $21				lda ed_cur+1
.9925	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9927	a9 80		lda #$80			lda #%10000000
.9929	05 22		ora $22				ora ed_flags
.992b	85 22		sta $22				sta ed_flags
.992d	a5 06		lda $06				lda ciblen
.992f	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9931	d0 03		bne $9936			bne +
.9933	4c cd 99	jmp $99cd			jmp _line_number_only_from_external
.9936					+
.9936	a5 04		lda $04				lda cib+0
.9938	a4 05		ldy $05				ldy cib+1
.993a	20 54 b7	jsr $b754			jsr PushYA
.993d	a5 06		lda $06				lda ciblen+0
.993f	a4 07		ldy $07				ldy ciblen+1
.9941	20 54 b7	jsr $b754			jsr PushYA
.9944	20 c0 c9	jsr $c9c0			jsr One_Minus		; ( addr-t u-t para1 0 addr u-1 )
.9947	20 f0 c9	jsr $c9f0			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr+1 u-1 )
.994a	4c 1f 9a	jmp $9a1f			jmp _check_for_para2
.994d					_prefix_dollar:
.994d	c9 24		cmp #$24			cmp #'$'
.994f	d0 1f		bne $9970			bne _prefix_percent
.9951	20 9a 9d	jsr $9d9a			jsr ed_have_text
.9954	e8		inx				inx
.9955	e8		inx				inx			; ( addr-t u-t 0 )
.9956	20 c7 9d	jsr $9dc7			jsr ed_last_line	; ( addr-t u-t 0 para1 )
.9959	20 0e cf	jsr $cf0e			jsr Swap		; ( addr-t u-t para1 0 )
.995c	a9 80		lda #$80			lda #%10000000
.995e	05 22		ora $22				ora ed_flags
.9960	85 22		sta $22				sta ed_flags
.9962	a5 06		lda $06				lda ciblen
.9964	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9966	d0 03		bne $996b			bne +
.9968	4c cd 99	jmp $99cd			jmp _line_number_only_from_external
.996b					+
.996b	a0 01		ldy #$01			ldy #1
.996d	4c 95 9a	jmp $9a95			jmp _check_command
.9970					_prefix_percent:
.9970	c9 25		cmp #$25			cmp #'%'
.9972	f0 04		beq $9978			beq _whole_text
.9974	c9 2c		cmp #$2c			cmp #','
.9976	d0 1b		bne $9993			bne _prefix_semicolon
.9978					_whole_text:
.9978	20 9a 9d	jsr $9d9a			jsr ed_have_text
.997b	a9 01		lda #$01			lda #1
.997d	95 26		sta $26,x			sta DStack+2,x		; LSB of NOS is para 1
.997f	a9 00		lda #$00			lda #0
.9981	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t para1 0 )
.9983					_semicolon_entry:
.9983	e8		inx				inx
.9984	e8		inx				inx			; DROP ( addr-t u-t para1 )
.9985	20 c7 9d	jsr $9dc7			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9988	a9 80		lda #$80			lda #%10000000
.998a	05 22		ora $22				ora ed_flags
.998c	85 22		sta $22				sta ed_flags
.998e	a0 01		ldy #$01			ldy #1
.9990	4c 95 9a	jmp $9a95			jmp _check_command
.9993					_prefix_semicolon:
.9993	c9 3b		cmp #$3b			cmp #';'
.9995	d0 0e		bne $99a5			bne _prefix_number
.9997	20 9a 9d	jsr $9d9a			jsr ed_have_text
.999a	a5 20		lda $20				lda ed_cur
.999c	95 26		sta $26,x			sta DStack+2,x
.999e	a5 21		lda $21				lda ed_cur+1
.99a0	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.99a2	4c 83 99	jmp $9983			jmp _semicolon_entry
.99a5					_prefix_number:
.99a5	20 a5 b7	jsr $b7a5			jsr Zero
.99a8	20 a5 b7	jsr $b7a5			jsr Zero		; ( addr-t u-t 0 0 0 0 )
.99ab	a5 04		lda $04				lda cib+0
.99ad	a4 05		ldy $05				ldy cib+1
.99af	20 54 b7	jsr $b754			jsr PushYA
.99b2	a5 06		lda $06				lda ciblen+0
.99b4	a4 07		ldy $07				ldy ciblen+1
.99b6	20 54 b7	jsr $b754			jsr PushYA		; ( addr-t u-t 0 0 0 0 cib ciblen )
.99b9	20 d4 af	jsr $afd4			jsr To_Number		; ( addr-t u-t 0 0 ud addr2 u2 )
.99bc	b5 24		lda $24,x			lda DStack+0,x
.99be	15 25		ora $25,x			ora DStack+1,x
.99c0	d0 25		bne $99e7			bne _have_unconverted_chars
.99c2	20 b1 c4	jsr $c4b1			jsr Two_Drop		; ( addr-t u-t 0 0 ud )
.99c5	20 de bf	jsr $bfde			jsr D_To_S		; ( addr-t u-t 0 0 u )
.99c8	20 1a ce	jsr $ce1a			jsr Not_Rot		; ( addr-t u-t u 0 0 )
.99cb	e8		inx				inx
.99cc	e8		inx				inx			; ( addr-t u-t u 0 ) drop through
.99cd					_line_number_only_from_external:
.99cd	20 0e cf	jsr $cf0e			jsr Swap		; ( addr-t u-t 0 u )
.99d0	20 a6 9d	jsr $9da6			jsr ed_is_valid_line
.99d3	b0 03		bcs $99d8			bcs +
.99d5	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.99d8					+
.99d8	20 0e cf	jsr $cf0e			jsr Swap		; ( addr-t u-t u 0 )
.99db	20 06 9e	jsr $9e06			jsr ed_para1_to_cur
.99de	a9 80		lda #$80			lda #%10000000
.99e0	05 22		ora $22				ora ed_flags
.99e2	85 22		sta $22				sta ed_flags
.99e4	4c 64 9c	jmp $9c64			jmp ed_cmd_p_from_external
.99e7					_have_unconverted_chars:
.99e7	a5 06		lda $06				lda ciblen+0
.99e9	d5 24		cmp $24,x			cmp DStack+0,x
.99eb	d0 16		bne $9a03			bne _no_command_yet
.99ed	a5 07		lda $07				lda ciblen+1
.99ef	d5 25		cmp $25,x			cmp DStack+1,x
.99f1	d0 10		bne $9a03			bne _no_command_yet
.99f3	8a		txa				txa
.99f4	18		clc				clc
.99f5	69 08		adc #$08			adc #8
.99f7	aa		tax				tax			; ( addr-t u-t 0 0 )
.99f8	a9 7f		lda #$7f			lda #$ff-%10000000
.99fa	25 22		and $22				and ed_flags
.99fc	85 22		sta $22				sta ed_flags
.99fe	a0 00		ldy #$00			ldy #0
.9a00	4c 95 9a	jmp $9a95			jmp _check_command
.9a03					_no_command_yet:
.9a03	20 75 ce	jsr $ce75			jsr To_R		; >R ( ... 0 0 ud addr2 ) (R: u2)
.9a06	20 1a ce	jsr $ce1a			jsr Not_Rot		; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.9a09	20 de bf	jsr $bfde			jsr D_To_S		; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.9a0c	b5 24		lda $24,x			lda DStack+0,x		; LSB
.9a0e	95 2a		sta $2a,x			sta DStack+6,x
.9a10	b5 25		lda $25,x			lda DStack+1,x		; MSB
.9a12	95 2b		sta $2b,x			sta DStack+7,x		; ( ... para1 0 addr2 para1 ) (R: u2)
.9a14	e8		inx				inx
.9a15	e8		inx				inx			; ( addr-t u-t para1 0 addr2 ) (R: u2)
.9a16	20 94 ce	jsr $ce94			jsr R_From		; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.9a19	a9 80		lda #$80			lda #%10000000
.9a1b	05 22		ora $22				ora ed_flags
.9a1d	85 22		sta $22				sta ed_flags
.9a1f					_check_for_para2:
.9a1f	a1 26		lda ($26,x)			lda (DStack+2,x)
.9a21	c9 2c		cmp #$2c			cmp #','
.9a23	f0 0c		beq $9a31			beq _got_comma
.9a25	38		sec				sec
.9a26	a5 06		lda $06				lda ciblen
.9a28	f5 24		sbc $24,x			sbc DStack+0,x
.9a2a	a8		tay				tay
.9a2b	20 b1 c4	jsr $c4b1			jsr Two_Drop		; Remove the leftover stuff from >NUMBER
.9a2e	4c 95 9a	jmp $9a95			jmp _check_command
.9a31					_got_comma:
.9a31	20 f0 c9	jsr $c9f0			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr2+1 u2 )
.9a34	20 c0 c9	jsr $c9c0			jsr One_Minus		; ( addr-t u-t para1 0 addr2+1 u2-1 )
.9a37	a1 26		lda ($26,x)			lda (DStack+2,x)
.9a39	c9 24		cmp #$24			cmp #'$'
.9a3b	d0 16		bne $9a53			bne _para2_not_dollar
.9a3d	38		sec				sec
.9a3e	a5 06		lda $06				lda ciblen
.9a40	f5 26		sbc $26,x			sbc DStack+2,x
.9a42	a8		tay				tay
.9a43	c8		iny				iny
.9a44	98		tya				tya
.9a45	48		pha				pha
.9a46	8a		txa				txa
.9a47	18		clc				clc
.9a48	69 06		adc #$06			adc #6
.9a4a	aa		tax				tax			; ( addr-t u-t para1 )
.9a4b	20 c7 9d	jsr $9dc7			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9a4e	68		pla				pla
.9a4f	a8		tay				tay
.9a50	4c 95 9a	jmp $9a95			jmp _check_command
.9a53					_para2_not_dollar:
.9a53	20 75 ce	jsr $ce75			jsr To_R		; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.9a56	20 a5 b7	jsr $b7a5			jsr Zero		; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.9a59	20 a5 b7	jsr $b7a5			jsr Zero		; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.9a5c	20 f4 cd	jsr $cdf4			jsr Rot		; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.9a5f	20 94 ce	jsr $ce94			jsr R_From		; R> ( ... para1 0 0 0 addr2+1 u2-1)
.9a62	20 f0 ce	jsr $cef0			jsr Dup		; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.9a65	20 75 ce	jsr $ce75			jsr To_R		; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.9a68	20 d4 af	jsr $afd4			jsr To_Number	; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.9a6b	20 f0 ce	jsr $cef0			jsr Dup		; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.9a6e	20 94 ce	jsr $ce94			jsr R_From		; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.9a71	20 ae c7	jsr $c7ae			jsr Equal		; = ( ... para1 0 ud addr3 u3 f )
.9a74	b5 24		lda $24,x			lda DStack+0,x
.9a76	15 25		ora $25,x			ora DStack+1,x
.9a78	f0 08		beq $9a82			beq _second_number
.9a7a	8a		txa				txa
.9a7b	18		clc				clc
.9a7c	69 0c		adc #$0c			adc #12
.9a7e	aa		tax				tax			; back to ( addr-t u-t )
.9a7f	4c 7d 9d	jmp $9d7d			jmp ed_error
.9a82					_second_number:
.9a82	e8		inx				inx
.9a83	e8		inx				inx			; ( addr-t u-t para1 0 ud addr3 u3 )
.9a84	38		sec				sec
.9a85	a5 06		lda $06				lda ciblen
.9a87	f5 24		sbc $24,x			sbc DStack+0,x
.9a89	48		pha				pha
.9a8a	20 b1 c4	jsr $c4b1			jsr Two_drop		; 2DROP ( addr-t u-t para1 0 ud )
.9a8d	20 de bf	jsr $bfde			jsr D_To_S		; D>S  ( addr-t u-t para1 0 para2 )
.9a90	20 0b c9	jsr $c90b			jsr Nip			; NIP ( addr-t u-t para1 para2 )
.9a93	68		pla				pla
.9a94	a8		tay				tay
.9a95					_check_command:
.9a95	24 22		bit $22				bit ed_flags
.9a97	30 08		bmi $9aa1			bmi _check_command_have_arg
.9a99	a5 20		lda $20				lda ed_cur+0
.9a9b	95 26		sta $26,x			sta DStack+2,x
.9a9d	a5 21		lda $21				lda ed_cur+1
.9a9f	95 27		sta $27,x			sta DStack+3,x
.9aa1					_check_command_have_arg:
.9aa1	b1 04		lda ($04),y			lda (cib),y		; get mystery char from input
.9aa3	85 14		sta $14				sta tmp1+0
.9aa5	85 15		sta $15				sta tmp1+1		; We need X for awhile, so it has to
.9aa7	a2 ff		ldx #$ff			ldx #$ff		; for each char
.9aa9	e8		inx		_cmd_loop:	inx			;   next char
.9aaa	bd 2a 9e	lda $9e2a,x			lda ed_cmd_list,x
.9aad	f0 13		beq $9ac2			beq _illegal_command	;   end of list?
.9aaf	c5 14		cmp $14				cmp tmp1+0
.9ab1	d0 f6		bne $9aa9			bne _cmd_loop		;   not found?
.9ab3	8a		txa				txa
.9ab4	0a		asl a				asl
.9ab5	aa		tax				tax			; X * 2 for table
.9ab6	bd 36 9e	lda $9e36,x			lda ed_cmd_table+1,x
.9ab9	48		pha				pha
.9aba	bd 35 9e	lda $9e35,x			lda ed_Cmd_table+0,x
.9abd	48		pha				pha
.9abe	a6 15		ldx $15				ldx tmp1+1		; restore X
.9ac0	08		php				php
.9ac1	40		rti				rti			; jump to command routine
.9ac2					_illegal_command:
.9ac2	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.9ac5					ed_next_command:
.9ac5	20 b1 c4	jsr $c4b1			jsr Two_Drop		; ( addr-t u-t ) Fall through
.9ac8					_next_command_empty:
.9ac8	4c e3 98	jmp $98e3			jmp ed_input_loop
.9acb					ed_all_done:
.9acb	a9 00		lda #$00			lda #0
.9acd	85 06		sta $06				sta ciblen
.9acf	85 07		sta $07				sta ciblen+1
.9ad1	20 b1 c4	jsr $c4b1			jsr Two_drop			; ( addr-t u-t )
.9ad4	a5 23		lda $23				lda editor3+1
.9ad6	8d 00 03	sta $0300			sta base
.9ad9	60		rts				rts
.9ada					ed_cmd_a:
.9ada	e8		inx				inx
.9adb	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9adc					ed_entry_cmd_i:
.9adc					ed_cmd_a_have_para:
.9adc	20 eb 9d	jsr $9deb			jsr ed_num_to_addr	  ;  ( addr-t u-t addr1 )
.9adf	20 d7 aa	jsr $aad7			jsr CR
.9ae2					_next_string_loop:
.9ae2	20 8b 9d	jsr $9d8b			jsr ed_get_input
.9ae5	a0 00		ldy #$00			ldy #0
.9ae7	b1 04		lda ($04),y			lda (cib),y
.9ae9	c9 2e		cmp #$2e			cmp #'.'
.9aeb	d0 18		bne $9b05			bne _add_line
.9aed	a4 06		ldy $06				ldy ciblen
.9aef	c0 01		cpy #$01			cpy #1
.9af1	d0 12		bne $9b05			bne _add_line
.9af3	a4 07		ldy $07				ldy ciblen+1
.9af5	d0 0e		bne $9b05			bne _add_line
.9af7	e8		inx				inx
.9af8	e8		inx				inx
.9af9	a9 40		lda #$40			lda #%01000000
.9afb	05 22		ora $22				ora ed_flags
.9afd	85 22		sta $22				sta ed_flags
.9aff	20 d7 aa	jsr $aad7			jsr CR
.9b02	4c e3 98	jmp $98e3			jmp ed_input_loop
.9b05					_add_line:
.9b05	20 f0 ce	jsr $cef0			jsr Dup			; ( addr-t u-t addr1 addr1 )
.9b08	20 b2 c9	jsr $c9b2			jsr Here		; ( addr-t u-t addr1 addr1 here )
.9b0b	20 0e cf	jsr $cf0e			jsr Swap		; ( addr-t u-t addr1 here addr1 )
.9b0e	20 5a ce	jsr $ce5a			jsr Fetch		; ( addr-t u-t addr1 here addr2 )
.9b11	20 a6 cc	jsr $cca6			jsr Comma		; ( addr-t u-t addr1 here )
.9b14	20 6b cc	jsr $cc6b			jsr Tuck		; TUCK ( addr-t u-t here addr1 here )
.9b17	20 0e cf	jsr $cf0e			jsr Swap		; ( addr-t u-t here here addr1 )
.9b1a	20 3d ce	jsr $ce3d			jsr Store		; ( addr-t u-t here )
.9b1d	20 b2 c9	jsr $c9b2			jsr Here		; HERE ( addr-t u-t here here2)
.9b20	a9 04		lda #$04			lda #4
.9b22	20 96 b7	jsr $b796			jsr PushZA
.9b25	20 78 c0	jsr $c078			jsr Allot
.9b28	e6 20		inc $20				inc ed_cur
.9b2a	d0 02		bne $9b2e			bne +
.9b2c	e6 21		inc $21				inc ed_cur+1
.9b2e					+
.9b2e	20 b2 c9	jsr $c9b2			jsr Here	; ( addr-t u-t here here2 here3 )
.9b31	a5 04		lda $04				lda cib+0
.9b33	a4 05		ldy $05				ldy cib+1
.9b35	20 54 b7	jsr $b754			jsr PushYA	; ( addr-t u-t here here2 here3 cib )
.9b38	20 c7 ce	jsr $cec7			jsr Over	; ( addr-t u-t here here2 here3 cib here3 )
.9b3b	a5 06		lda $06				lda ciblen+0
.9b3d	a4 07		ldy $07				ldy ciblen+1
.9b3f	20 54 b7	jsr $b754			jsr PushYA	; ( addr-t u-t here here2 here3 cib here3 ciblen )
.9b42	20 f4 ac	jsr $acf4			jsr Move	; ( addr-t u-t here here2 here3 )
.9b45	18		clc				clc
.9b46	a5 00		lda $00				lda cp
.9b48	65 06		adc $06				adc ciblen
.9b4a	85 00		sta $00				sta cp
.9b4c	90 06		bcc $9b54			bcc +
.9b4e	a5 01		lda $01				lda cp+1
.9b50	65 07		adc $07				adc ciblen+1
.9b52	85 01		sta $01				sta cp+1
.9b54					+
.9b54	20 c7 ce	jsr $cec7			jsr Over		; ( addr-t u-t here here2 here3 here2 )
.9b57	20 3d ce	jsr $ce3d			jsr Store		; ( addr-t u-t here here2 )
.9b5a	20 93 c9	jsr $c993			jsr Cell_Plus_NoUf	; ( addr-t u-t here here2+2 )
.9b5d	20 f0 ce	jsr $cef0			jsr Dup			; ( addr-t u-t here here2+2 here2+2 )
.9b60	a5 06		lda $06				lda ciblen
.9b62	95 26		sta $26,x			sta DStack+2,x
.9b64	a5 07		lda $07				lda ciblen+1
.9b66	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t here ciblen here2+2 )
.9b68	20 3d ce	jsr $ce3d			jsr Store		; ( addr-t u-t here )
.9b6b	20 d7 aa	jsr $aad7			jsr CR			; Add a line feed for visuals
.9b6e	4c e2 9a	jmp $9ae2			jmp _next_string_loop
.9b71					ed_cmd_d:
.9b71	20 9a 9d	jsr $9d9a			jsr ed_have_text
.9b74	20 dd 9d	jsr $9ddd			jsr ed_no_line_zero
.9b77	b5 24		lda $24,x			lda DStack+0,x
.9b79	15 25		ora $25,x			ora DStack+1,x
.9b7b	d0 09		bne $9b86			bne +
.9b7d	20 c7 ce	jsr $cec7			jsr Over		; ( addr-t u-t para1 0 para1 )
.9b80	20 bb 9b	jsr $9bbb			jsr _cmd_d_common	; ( addr-t u-t para1 0 )
.9b83	4c af 9b	jmp $9baf			jmp _cmd_d_done
.9b86					+
.9b86	20 a6 9d	jsr $9da6			jsr ed_is_valid_line	  ; result is in C flag
.9b89	b0 03		bcs $9b8e			bcs _cmd_d_loop
.9b8b	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.9b8e					_cmd_d_loop:
.9b8e	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9b90	d5 26		cmp $26,x			cmp DStack+2,x
.9b92	b5 25		lda $25,x			lda DStack+1,x
.9b94	f5 27		sbc $27,x			sbc DStack+3,x
.9b96	90 0c		bcc $9ba4			bcc _cmd_d_done_with_flag
.9b98	20 f0 ce	jsr $cef0			jsr Dup		; DUP ( addr-t u-t para1 para2 para2 )
.9b9b	20 bb 9b	jsr $9bbb			jsr _cmd_d_common	; ( addr-t u-t para1 para2 )
.9b9e	20 c0 c9	jsr $c9c0			jsr One_minus	; 1- ( addr-t u-t para1 para2-1 )
.9ba1	4c 8e 9b	jmp $9b8e			jmp _cmd_d_loop
.9ba4					_cmd_d_done_with_flag:
.9ba4	20 cc c9	jsr $c9cc			jsr NOS_One_Minus
.9ba7	b5 26		lda $26,x			lda DStack+2,x
.9ba9	85 20		sta $20				sta ed_cur
.9bab	b5 27		lda $27,x			lda DStack+3,x
.9bad	85 21		sta $21				sta ed_cur+1		; drop through to _cmd_d_done
.9baf					_cmd_d_done:
.9baf	a9 40		lda #$40			lda #%01000000
.9bb1	05 22		ora $22				ora ed_flags
.9bb3	85 22		sta $22				sta ed_flags
.9bb5	20 d7 aa	jsr $aad7			jsr CR
.9bb8	4c c5 9a	jmp $9ac5			jmp ed_next_command
.9bbb					_cmd_d_common:
.9bbb	20 f0 ce	jsr $cef0			jsr Dup			; ( addr-t u-t u u )
.9bbe	20 eb 9d	jsr $9deb			jsr ed_num_to_addr	; ( addr-t u-t u addr )
.9bc1	20 5a ce	jsr $ce5a			jsr Fetch		; ( addr-t u-t u addr1 )
.9bc4	20 0e cf	jsr $cf0e			jsr Swap		; ( addr-t u-t addr1 u )
.9bc7	20 c0 c9	jsr $c9c0			jsr One_minus		; ( addr-t u-t addr1 u-1 )
.9bca	20 eb 9d	jsr $9deb			jsr ed_num_to_addr	; ( addr-t u-t addr1 addr-1 )
.9bcd	4c 3d ce	jmp $ce3d			jmp Store		; ( addr-t u-t )
.9bd0					ed_cmd_equ:
.9bd0	a5 1e		lda $1e				lda ed_head
.9bd2	05 1f		ora $1f				ora ed_head+1
.9bd4	d0 06		bne $9bdc			bne _cmd_equ_have_text
.9bd6	20 a5 b7	jsr $b7a5			jsr Zero		; ( addr-t u-t para1 para2 0 )
.9bd9	4c fc 9b	jmp $9bfc			jmp _cmd_equ_done
.9bdc					_cmd_equ_have_text:
.9bdc	20 dd 9d	jsr $9ddd			jsr ed_no_line_zero
.9bdf	24 22		bit $22				bit ed_flags
.9be1	30 0a		bmi $9bed			bmi _cmd_equ_have_para
.9be3	a5 20		lda $20				lda ed_cur+0		; ( addr-t u-t para1 para2 ? )
.9be5	a4 21		ldy $21				ldy ed_cur+1
.9be7	20 54 b7	jsr $b754			jsr PushYA
.9bea	4c fc 9b	jmp $9bfc			jmp _cmd_equ_done	; ( addr-t u-t para1 para2 cur )
.9bed					_cmd_equ_have_para:
.9bed	b5 24		lda $24,x			lda DStack+0,x
.9bef	15 25		ora $25,x			ora DStack+1,x
.9bf1	d0 06		bne $9bf9			bne _cmd_equ_two_paras
.9bf3	20 c7 ce	jsr $cec7			jsr Over		; ( addr-t u-t para1 para2 para1)
.9bf6	4c fc 9b	jmp $9bfc			jmp _cmd_equ_done
.9bf9					_cmd_equ_two_paras:
.9bf9	20 f0 ce	jsr $cef0			jsr Dup			; ( addr-t u-t para1 para2 para2) drop through
.9bfc					_cmd_equ_done:
.9bfc	20 d7 aa	jsr $aad7			jsr CR			; number goes on new line
.9bff	20 9f cb	jsr $cb9f			jsr U_Dot		; ( addr-t u-t para1 para2 )
.9c02	20 d7 aa	jsr $aad7			jsr CR
.9c05	4c c5 9a	jmp $9ac5			jmp ed_next_command
.9c08					ed_cmd_f:
.9c08	24 22		bit $22				bit ed_flags
.9c0a	30 18		bmi $9c24			bmi _cmd_f_have_para
.9c0c	20 d7 aa	jsr $aad7			jsr CR
.9c0f	20 75 ce	jsr $ce75			jsr To_R		; ( addr-t u-t 0 ) ( R: 0 )
.9c12	20 f4 cd	jsr $cdf4			jsr Rot			; ( u-t 0 addr-t ) ( R: 0 )
.9c15	20 f0 ce	jsr $cef0			jsr Dup			; ( u-t 0 addr-t addr-t ) ( R: 0 )
.9c18	20 9f cb	jsr $cb9f			jsr U_Dot		; ( u-t 0 addr-t ) ( R: 0 )
.9c1b	20 1a ce	jsr $ce1a			jsr Not_Rot		; ( addr-t u-t 0 ) ( R: 0 )
.9c1e	20 94 ce	jsr $ce94			jsr R_From		; ( addr-t u-t 0 0 )
.9c21	4c 35 9c	jmp $9c35			jmp _cmd_f_done
.9c24					_cmd_f_have_para:
.9c24	20 c7 ce	jsr $cec7			jsr Over
.9c27	20 d7 aa	jsr $aad7			jsr CR
.9c2a	20 9f cb	jsr $cb9f			jsr U_Dot
.9c2d	b5 26		lda $26,x			lda DStack+2,x
.9c2f	95 2a		sta $2a,x			sta DStack+6,x
.9c31	b5 27		lda $27,x			lda DStack+3,x
.9c33	95 2b		sta $2b,x			sta DStack+7,x		; fall through to _cmd_f_done
.9c35					_cmd_f_done:
.9c35	20 d7 aa	jsr $aad7			jsr CR
.9c38	4c c5 9a	jmp $9ac5			jmp ed_next_command
.9c3b					ed_cmd_i:
.9c3b	e8		inx				inx
.9c3c	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9c3d	24 22		bit $22				bit ed_flags
.9c3f	30 08		bmi $9c49			bmi _cmd_i_have_para
.9c41	a5 20		lda $20				lda ed_cur
.9c43	95 24		sta $24,x			sta DStack+0,x
.9c45	a5 21		lda $21				lda ed_cur+1
.9c47	95 25		sta $25,x			sta DStack+1,x		;  ( addr-t u-t cur ) drop through
.9c49					_cmd_i_have_para:
.9c49	b5 24		lda $24,x			lda DStack+0,x
.9c4b	15 25		ora $25,x			ora DStack+1,x
.9c4d	f0 09		beq $9c58			beq _cmd_i_done
.9c4f	20 c0 c9	jsr $c9c0			jsr One_minus		; ( addr-t u-t para1-1 )
.9c52	20 a5 b7	jsr $b7a5			jsr Zero		; ( addr-t u-t para1-1 0 )
.9c55	20 f0 c8	jsr $c8f0			jsr Max			; ( addr-t u-t para1-1 | 0 )
.9c58					_cmd_i_done:
.9c58	4c dc 9a	jmp $9adc			jmp ed_entry_cmd_i
.9c5b					ed_cmd_n:
.9c5b	a9 01		lda #$01			lda #%00000001
.9c5d	05 22		ora $22				ora ed_flags
.9c5f	85 22		sta $22				sta ed_flags
.9c61	4c 6a 9c	jmp $9c6a			jmp ed_cmd_p_entry_for_cmd_n
.9c64					ed_cmd_p:
.9c64					ed_cmd_p_from_external:
.9c64	a9 fe		lda #$fe			lda #$ff-%00000001
.9c66	25 22		and $22				and ed_flags
.9c68	85 22		sta $22				sta ed_flags
.9c6a					ed_cmd_p_entry_for_cmd_n:
.9c6a	20 9a 9d	jsr $9d9a			jsr ed_have_text
.9c6d	20 dd 9d	jsr $9ddd			jsr ed_no_line_zero
.9c70	20 d7 aa	jsr $aad7			jsr CR
.9c73	b5 24		lda $24,x			lda DStack+0,x
.9c75	15 25		ora $25,x			ora DStack+1,x
.9c77	d0 11		bne $9c8a			bne _cmd_p_loop
.9c79	b5 26		lda $26,x			lda DStack+2,x
.9c7b	85 20		sta $20				sta ed_cur
.9c7d	b5 27		lda $27,x			lda DStack+3,x
.9c7f	85 21		sta $21				sta ed_cur+1
.9c81	20 c7 ce	jsr $cec7			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9c84	20 ab 9c	jsr $9cab			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9c87	4c a8 9c	jmp $9ca8			jmp _cmd_p_all_done
.9c8a					_cmd_p_loop:
.9c8a	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9c8c	d5 26		cmp $26,x			cmp DStack+2,x
.9c8e	b5 25		lda $25,x			lda DStack+1,x
.9c90	f5 27		sbc $27,x			sbc DStack+3,x
.9c92	90 0c		bcc $9ca0			bcc _cmd_p_done
.9c94	20 c7 ce	jsr $cec7			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9c97	20 ab 9c	jsr $9cab			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9c9a	20 f0 c9	jsr $c9f0			jsr NOS_One_Plus
.9c9d	4c 8a 9c	jmp $9c8a			jmp _cmd_p_loop
.9ca0					_cmd_p_done:
.9ca0	b5 24		lda $24,x			lda DStack+0,x
.9ca2	85 20		sta $20				sta ed_cur
.9ca4	b5 25		lda $25,x			lda DStack+1,x
.9ca6	85 21		sta $21				sta ed_cur+1
.9ca8					_cmd_p_all_done:
.9ca8	4c c5 9a	jmp $9ac5			jmp ed_next_command
.9cab					_cmd_p_common:
.9cab	a5 22		lda $22				lda ed_flags
.9cad	4a		lsr a				lsr			; bit 0 now in carry
.9cae	90 0b		bcc $9cbb			bcc _cmd_p_common_no_num
.9cb0	20 f0 ce	jsr $cef0			jsr Dup			; ( addr-t u-t para1 para1 )
.9cb3	20 9f cb	jsr $cb9f			jsr U_Dot		; ( addr-t u-t para1 )
.9cb6	a9 09		lda #$09			lda #AscHT
.9cb8	20 5e cd	jsr $cd5e			jsr Emit_A
.9cbb					_cmd_p_common_no_num:
.9cbb	20 eb 9d	jsr $9deb			jsr ed_num_to_addr	  ; ( addr-t u-t addr )
.9cbe	4c 0f 9e	jmp $9e0f			jmp ed_print_addr
.9cc1					ed_cmd_q:
.9cc1	24 22		bit $22				bit ed_flags		; bit 6 is change flag
.9cc3	50 03		bvc $9cc8			bvc +
.9cc5	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.9cc8					+
.9cc8	4c cb 9a	jmp $9acb			jmp ed_all_done		   ; can't fall thru because of PLX
.9ccb					ed_cmd_qq:
.9ccb	4c cb 9a	jmp $9acb			jmp ed_all_done
.9cce					ed_cmd_w:
.9cce	20 9a 9d	jsr $9d9a			jsr ed_have_text
.9cd1	24 22		bit $22				bit ed_flags		; parameter given?
.9cd3	30 12		bmi $9ce7			bmi _cmd_w_have_para
.9cd5	b5 2b		lda $2b,x			lda DStack+7,x		; $0000 thru $00ff ?
.9cd7	d0 03		bne $9cdc			bne +
.9cd9	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.9cdc					+
.9cdc	b5 2a		lda $2a,x			lda DStack+6,x
.9cde	95 26		sta $26,x			sta DStack+2,x
.9ce0	b5 2b		lda $2b,x			lda DStack+7,x
.9ce2	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t addr-t ? )
.9ce4	4c ef 9c	jmp $9cef			jmp _cmd_w_para_ready
.9ce7					_cmd_w_have_para:
.9ce7	b5 26		lda $26,x			lda DStack+2,x
.9ce9	95 2a		sta $2a,x			sta DStack+6,x
.9ceb	b5 27		lda $27,x			lda DStack+3,x
.9ced	95 2b		sta $2b,x			sta DStack+7,x		; drop through to _cmd_w_para_ready
.9cef					_cmd_w_para_ready:
.9cef	a9 1e		lda #$1e			lda #<ed_head
.9cf1	95 24		sta $24,x			sta DStack+0,x
.9cf3	a9 00		lda #$00			lda #>ed_head
.9cf5	95 25		sta $25,x			sta DStack+1,x		; ( addr-t u-t addr-t addr-h )
.9cf7	20 c7 ce	jsr $cec7			jsr Over		; ( addr-t u-t addr-t addr-h addr-t )
.9cfa	20 75 ce	jsr $ce75			jsr To_R		; ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.9cfd					_cmd_w_loop:
.9cfd	20 5a ce	jsr $ce5a			jsr Fetch		; ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.9d00	b5 24		lda $24,x			lda DStack+0,x
.9d02	15 25		ora $25,x			ora DStack+1,x
.9d04	f0 4d		beq $9d53			beq _cmd_w_eol
.9d06	20 4a cc	jsr $cc4a			jsr Two_dup		; ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.9d09	20 c4 c5	jsr $c5c4			jsr Two_to_r		; ( addr-t addr-1 ) (R: ... )
.9d0c	20 93 c9	jsr $c993			jsr Cell_Plus_NoUf	; ( addr-t addr1+2 ) (R: ... )
.9d0f	20 f0 ce	jsr $cef0			jsr Dup			; ( addr-t addr1+2 addr1+2 ) ( R: ... )
.9d12	20 5a ce	jsr $ce5a			jsr Fetch		; ( addr-t addr1+2 addr-s ) ( R: ... )
.9d15	20 0e cf	jsr $cf0e			jsr Swap		; ( addr-t addr-s addr1+2 ) ( R: ... )
.9d18	20 93 c9	jsr $c993			jsr Cell_Plus_NoUf	; ( addr-t addr-s addr1+2 ) (R: ... )
.9d1b	20 5a ce	jsr $ce5a			jsr Fetch		; ( addr-t addr-s u-s ) ( R: ... )
.9d1e	20 1a ce	jsr $ce1a			jsr Not_Rot		; ( u-s addr-t addr-s ) ( R: ... )
.9d21	20 0e cf	jsr $cf0e			jsr Swap		; ( u-s addr-s addr-t ) ( R: ... )
.9d24	20 f4 cd	jsr $cdf4			jsr Rot			; (addr-s addr-t u-s ) ( R: ... )
.9d27	20 f0 ce	jsr $cef0			jsr Dup			; (addr-s addr-t u-s u-s ) ( R: ... )
.9d2a	20 75 ce	jsr $ce75			jsr To_R		; (addr-s addr-t u-s ) ( R: ... u-s )
.9d2d	20 f4 ac	jsr $acf4			jsr Move		; ( )( R: addr-t addr-1 addr-t )
.9d30	20 94 ce	jsr $ce94			jsr R_From		; ( u-s )  ( R: addr-t addr-h addr-t )
.9d33	20 9f c5	jsr $c59f			jsr Two_r_from		; ( u-s addr-t addr-h ) ( R: addr-t )
.9d36	20 1a ce	jsr $ce1a			jsr Not_Rot		; ( addr-h u-s addr-t ) ( R: addr-t )
.9d39	20 3a cb	jsr $cb3a			jsr Plus		; ( addr-h addr-t1 ) ( R: addr-t )
.9d3c	20 f0 ce	jsr $cef0			jsr Dup			; ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.9d3f	a9 0a		lda #$0a			lda #AscLF
.9d41	20 96 b7	jsr $b796			jsr PushZA		; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.9d44	20 0e cf	jsr $cf0e			jsr Swap		; ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.9d47	20 3d ce	jsr $ce3d			jsr Store		; ( addr-h addr-t1 ) ( R: addr-t )
.9d4a	20 e6 c9	jsr $c9e6			jsr One_plus		; ( addr-h addr-t1+1 ) ( R: addr-t )
.9d4d	20 0e cf	jsr $cf0e			jsr Swap		; ( addr-t1+1 addr-h ) ( R: addr-t )
.9d50	4c fd 9c	jmp $9cfd			jmp _cmd_w_loop
.9d53					_cmd_w_eol:
.9d53	20 0e cf	jsr $cf0e			jsr Swap		; ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.9d56	20 94 ce	jsr $ce94			jsr R_From		; ( addr-t u-t addr-n addr-tn addr-t )
.9d59	20 53 cb	jsr $cb53			jsr Minus		; ( addr-t u-t addr-n u )
.9d5c	b5 24		lda $24,x			lda DStack+0,x
.9d5e	95 28		sta $28,x			sta DStack+4,x
.9d60	b5 25		lda $25,x			lda DStack+1,x
.9d62	95 29		sta $29,x			sta DStack+5,x		; ( addr-t u addr-n u )
.9d64	20 d7 aa	jsr $aad7			jsr CR
.9d67	20 f0 ce	jsr $cef0			jsr Dup			; ( addr-t u addr-n u u )
.9d6a	20 9f cb	jsr $cb9f			jsr U_Dot		; ( addr-t u addr-n u )
.9d6d	20 d7 aa	jsr $aad7			jsr CR
.9d70	a9 bf		lda #$bf			lda #$ff-%01000000
.9d72	25 22		and $22				and ed_flags
.9d74	85 22		sta $22				sta ed_flags
.9d76	4c c5 9a	jmp $9ac5			jmp ed_next_command
.9d79					ed_error_2drop:
.9d79	e8		inx				inx			; Drop para2
.9d7a	e8		inx				inx
.9d7b					ed_error_1drop:
.9d7b	e8		inx				inx			; Drop para1
.9d7c	e8		inx				inx
.9d7d					ed_error:
.9d7d	20 d7 aa	jsr $aad7			jsr CR
.9d80	a9 3f		lda #$3f			lda #'?'
.9d82	20 5e cd	jsr $cd5e			jsr Emit_A
.9d85	20 d7 aa	jsr $aad7			jsr CR
.9d88	4c e3 98	jmp $98e3			jmp ed_input_loop
.9d8b					ed_get_input:
.9d8b	20 27 c2	jsr $c227			jsr Refill		;  ( addr-t u-t f )
.9d8e	b5 24		lda $24,x			lda DStack+0,x
.9d90	d0 05		bne $9d97			bne +
.9d92	68		pla				pla
.9d93	68		pla				pla
.9d94	4c 7b 9d	jmp $9d7b			jmp ed_error_1drop
.9d97					+
.9d97	e8		inx				inx
.9d98	e8		inx				inx
.9d99	60		rts				rts
.9d9a					ed_have_text:
.9d9a	a5 1e		lda $1e				lda ed_head
.9d9c	05 1f		ora $1f				ora ed_head+1
.9d9e	d0 05		bne $9da5			bne +
.9da0	68		pla				pla
.9da1	68		pla				pla
.9da2	4c 7d 9d	jmp $9d7d			jmp ed_error
.9da5					+
.9da5	60		rts				rts
.9da6					ed_is_valid_line:
.9da6	38		sec				sec				; default is legal line number
.9da7	b5 24		lda $24,x			lda DStack+0,x
.9da9	15 25		ora $25,x			ora DStack+1,x
.9dab	f0 18		beq $9dc5			beq _nope_zero	; ( n )
.9dad	20 f0 ce	jsr $cef0			jsr Dup				; ( n n )
.9db0	20 c7 9d	jsr $9dc7			jsr ed_last_line		; ( n n last )
.9db3	20 0e cf	jsr $cf0e			jsr Swap			; ( n last n )
.9db6	20 e4 c7	jsr $c7e4			jsr Less_Than			; ( n f )
.9db9	b5 24		lda $24,x			lda DStack+0,x			; 0 flag is good
.9dbb	15 25		ora $25,x			ora DStack+1,x
.9dbd	d0 04		bne $9dc3			bne _too_small
.9dbf	e8		inx				inx
.9dc0	e8		inx				inx			; DROP flag ( n )
.9dc1	38		sec				sec			; signal valid
.9dc2	60		rts				rts
.9dc3					_too_small:
.9dc3	e8		inx				inx
.9dc4	e8		inx				inx
.9dc5					_nope_zero:
.9dc5	18		clc				clc			; signal not valid
.9dc6	60		rts				rts
.9dc7					ed_last_line:
.9dc7	20 a5 b7	jsr $b7a5			jsr Zero		; Set counter to zero
.9dca	a9 1e		lda #$1e			lda #ed_head
.9dcc	20 96 b7	jsr $b796			jsr PushZA		; ( count addr )
.9dcf					_loop:
.9dcf	20 5a ce	jsr $ce5a			jsr Fetch		; ( count addr|0 )
.9dd2	b5 25		lda $25,x			lda DStack+1,x		; at end-of-list?
.9dd4	f0 06		beq $9ddc			beq _done
.9dd6	20 f0 c9	jsr $c9f0			jsr NOS_One_Plus	; Increase counter
.9dd9	4c cf 9d	jmp $9dcf			jmp _loop		; continue
.9ddc					_done:
.9ddc	60		rts				rts
.9ddd					ed_no_line_zero:
.9ddd	b5 26		lda $26,x			lda DStack+2,x
.9ddf	15 27		ora $27,x			ora DStack+3,x
.9de1	d0 07		bne $9dea			bne _done
.9de3	24 22		bit $22				bit ed_flags
.9de5	10 03		bpl $9dea			bpl _done
.9de7	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.9dea					_done:
.9dea	60		rts				rts
.9deb					ed_num_to_addr:
.9deb	a9 1e		lda #$1e			lda #ed_head
.9ded	20 96 b7	jsr $b796			jsr PushZA		; ( u addr-h )
.9df0	4c fd 9d	jmp $9dfd			jmp _test
.9df3					_loop:
.9df3	20 5a ce	jsr $ce5a			jsr Fetch		; @ ( u addr1 )
.9df6	b5 25		lda $25,x			lda DStack+1,x		; at end of list?
.9df8	f0 09		beq $9e03			beq _finished
.9dfa	20 cc c9	jsr $c9cc			jsr NOS_One_Minus	; decrement the line count
.9dfd	b5 26		lda $26,x	_test:		lda DStack+2,x		; is the nth element we're looking for?
.9dff	15 27		ora $27,x			ora DStack+3,x
.9e01	d0 f0		bne $9df3			bne _loop
.9e03					_finished:
.9e03	4c 0b c9	jmp $c90b			jmp Nip			; ( addr )
.9e06					ed_para1_to_cur:
.9e06	b5 26		lda $26,x			lda DStack+2,x
.9e08	85 20		sta $20				sta ed_cur
.9e0a	b5 27		lda $27,x			lda DStack+3,x
.9e0c	85 21		sta $21				sta ed_cur+1
.9e0e	60		rts				rts
.9e0f					ed_print_addr:
.9e0f	20 90 c9	jsr $c990			jsr Cell_Plus		; ( addr+2 )
.9e12	20 f0 ce	jsr $cef0			jsr Dup			; ( addr+2 addr+2 )
.9e15	20 90 c9	jsr $c990			jsr Cell_Plus		; ( addr+2 addr+4 )
.9e18	20 5a ce	jsr $ce5a			jsr Fetch		; ( addr+2 u-s )
.9e1b	20 0e cf	jsr $cf0e			jsr Swap		; ( u-s addr+2 )
.9e1e	20 5a ce	jsr $ce5a			jsr Fetch		; ( u-s addr-s )
.9e21	20 0e cf	jsr $cf0e			jsr Swap		; ( addr-s u-s )
.9e24	20 78 cd	jsr $cd78			jsr Type
.9e27	4c d7 aa	jmp $aad7			jmp CR
>9e2a	61 66 69 64 70 6e 3d 77		ed_cmd_list:	.text "afidpn=wqQ", 0
>9e32	71 51 00
.9e35					ed_cmd_table:
>9e35	da 9a 08 9c 3b 9c 71 9b				.word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>9e3d	64 9c 5b 9c
>9e41	d0 9b ce 9c c1 9c cb 9c				.word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.9e49					ed6502_end:
>9e49	53 65 65			L1:	.text "See"	;  name of word as a string, ending at wh_NameLastChar
>9e4c	a3					.byte (("See"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9e4d	3e 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9e4f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9e50	08					.byte NN	;wh_Flags	dictionary flags
=40396					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9e51					See:
.9e51	20 12 bc	jsr $bc12			jsr Tick_Nt		; ( nt )
.9e54	20 d7 aa	jsr $aad7			jsr CR
.9e57	ad 00 03	lda $0300			lda base		; Save the current number base
.9e5a	48		pha				pha
.9e5b	a9 93		lda #$93			lda #<str_see_nt	; print nt
.9e5d	a0 da		ldy #$da			ldy #>str_see_nt
.9e5f	20 99 cd	jsr $cd99			jsr Print_ASCIIZ_YA_no_lf
.9e62	20 f0 ce	jsr $cef0			jsr Dup			; ( nt nt )
.9e65	20 6c a8	jsr $a86c			jsr Dot_Hex
.9e68	20 6b cd	jsr $cd6b			jsr Space		; ( nt )
.9e6b	20 f0 ce	jsr $cef0			jsr Dup			; ( nt nt )
.9e6e	20 8c bd	jsr $bd8c			jsr Name_To_Int		; ( nt xt )
.9e71	a9 99		lda #$99			lda #<str_see_xt	; print xt
.9e73	a0 da		ldy #$da			ldy #>str_see_xt
.9e75	20 99 cd	jsr $cd99			jsr Print_ASCIIZ_YA_no_lf
.9e78	20 f0 ce	jsr $cef0			jsr Dup			; ( nt xt xt )
.9e7b	20 6c a8	jsr $a86c			jsr Dot_Hex
.9e7e	20 d7 aa	jsr $aad7			jsr CR			; ( nt xt )
.9e81	a9 8c		lda #$8c			lda #<str_see_flags
.9e83	a0 da		ldy #$da			ldy #>str_see_flags
.9e85	20 99 cd	jsr $cd99			jsr Print_ASCIIZ_YA_no_lf
.9e88	20 c7 ce	jsr $cec7			jsr Over		; ( nt xt nt )
.9e8b	a9 84		lda #$84			lda #Wh_Flags
.9e8d	20 95 c9	jsr $c995			jsr Plus_A		; ( nt xt ^flags )
.9e90	a1 24		lda ($24,x)			lda (DStack+0,x)	; ( nt xt ^flags )
.9e92	95 24		sta $24,x			sta DStack+0,x		; ( nt xt flags )
.9e94	a0 0e		ldy #$0e			ldy #2*7		; for bit 7..0
.9e96	20 6b cd	jsr $cd6b	_flag_loop:	jsr Space
.9e99	b9 fd 9e	lda $9efd,y			lda _FlagLabels+0,y	;   print label
.9e9c	20 5e cd	jsr $cd5e			jsr Emit_A
.9e9f	b9 fe 9e	lda $9efe,y			lda _FlagLabels+1,y
.9ea2	20 5e cd	jsr $cd5e			jsr Emit_A
.9ea5	a9 3d		lda #$3d			lda #'='
.9ea7	20 5e cd	jsr $cd5e			jsr Emit_A
.9eaa	16 24		asl $24,x			asl DStack+0,x		;   c = flag, rotate the rest
.9eac	a9 00		lda #$00			lda #0
.9eae	69 30		adc #$30			adc #'0'
.9eb0	20 5e cd	jsr $cd5e			jsr Emit_A
.9eb3	88		dey				dey
.9eb4	88		dey				dey
.9eb5	10 df		bpl $9e96			bpl _flag_loop
.9eb7	e8		inx				inx
.9eb8	e8		inx				inx			; ( nt xt )
.9eb9	20 d7 aa	jsr $aad7			jsr CR
.9ebc	a9 9f		lda #$9f			lda #<str_see_size	; print size
.9ebe	a0 da		ldy #$da			ldy #>str_see_size
.9ec0	20 99 cd	jsr $cd99			jsr Print_ASCIIZ_YA_no_lf
.9ec3	20 0e cf	jsr $cf0e			jsr Swap		; ( xt nt )
.9ec6	20 8b aa	jsr $aa8b			jsr WordSize		; ( xt u )
.9ec9	20 53 b1	jsr $b153			jsr Decimal
.9ecc	b5 24		lda $24,x			lda DStack+0,x		; if = 255
.9ece	c9 ff		cmp #$ff			cmp #$ff
.9ed0	d0 11		bne $9ee3			bne _size5
.9ed2	20 75 b8	jsr $b875			jsr sliteral_runtime	;   type "large"
.9ed5	4c dd 9e	jmp $9edd			  jmp _size2
>9ed8	6c 61 72 67 65					  .text "large"
.9edd	20 78 cd	jsr $cd78	_size2:		jsr Type
.9ee0	4c e9 9e	jmp $9ee9			jmp _size9		;  else
.9ee3	20 f0 ce	jsr $cef0	_size5:		jsr Dup			;    type size
.9ee6	20 9f cb	jsr $cb9f			jsr U_Dot
.9ee9					_size9:
.9ee9	20 d7 aa	jsr $aad7			jsr CR
.9eec	68		pla				pla			; restore base
.9eed	8d 00 03	sta $0300			sta base
.9ef0	20 4a cc	jsr $cc4a			jsr Two_dup
.9ef3	20 c4 a7	jsr $a7c4			jsr Dump		; dump
.9ef6	20 d7 aa	jsr $aad7			jsr CR
.9ef9	20 16 d8	jsr $d816			jsr DisAsm		; disassemble
=171					CL	.var *-(WordListLink+wh_Xt)
=$9efc					en = *	; remember here
>9e4f	ab					.byte CL	;wh_CodeLength
.9efc	60		rts				rts
>9efd	43 4f 41 4e 49 4d 4e 4e		_FlagLabels:	.text "COANIMNNUF__R6__"
>9f05	55 46 5f 5f 52 36 5f 5f
>9f0d	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9f15	72 64 4c 69 73 74
>9f1b	8e					.byte (("Forth-WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f1c	cc 9d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f1e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f1f	08					.byte NN	;wh_Flags	dictionary flags
=40603					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f20	4c a5 b7	jmp $b7a5	Forth_WordList:	jmp Zero
=3					CL	.var *-(WordListLink+wh_Xt)
=$9f23					en = *	; remember here
>9f1e	03					.byte CL	;wh_CodeLength
>9f23	45 64 69 74 6f 72 2d 57		L1:	.text "Editor-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9f2b	6f 72 64 4c 69 73 74
>9f32	8f					.byte (("Editor-WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f33	9b 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f35	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f36	08					.byte NN	;wh_Flags	dictionary flags
=40626					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f37					Editor_WordList:
.9f37	4c af b7	jmp $b7af			jmp One
=3					CL	.var *-(WordListLink+wh_Xt)
=$9f3a					en = *	; remember here
>9f35	03					.byte CL	;wh_CodeLength
>9f3a	41 73 73 65 6d 62 6c 65		L1:	.text "Assembler-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9f42	72 2d 57 6f 72 64 4c 69 73 74
>9f4c	92					.byte (("Assembler-WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f4d	b2 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f4f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f50	08					.byte NN	;wh_Flags	dictionary flags
=40652					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f51					Assembler_WordList:
.9f51	4c b9 b7	jmp $b7b9			jmp Two
=3					CL	.var *-(WordListLink+wh_Xt)
=$9f54					en = *	; remember here
>9f4f	03					.byte CL	;wh_CodeLength
>9f54	52 6f 6f 74 2d 57 6f 72		L1:	.text "Root-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>9f5c	64 6c 69 73 74
>9f61	8d					.byte (("Root-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f62	cc 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f64	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f65	08					.byte NN	;wh_Flags	dictionary flags
=40673					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f66	a9 03		lda #$03	Root_WordList:	lda #wid_Root
.9f68	4c 96 b7	jmp $b796			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$9f6b					en = *	; remember here
>9f64	05					.byte CL	;wh_CodeLength
>9f6b	4f 6e 6c 79			L1:	.text "Only"	;  name of word as a string, ending at wh_NameLastChar
>9f6f	24					.byte (("Only"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f70	e1 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f72	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f73	08					.byte NN	;wh_Flags	dictionary flags
=40687					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f74	20 74 b7	jsr $b774	Only:		jsr True	; Push -1
.9f77	4c dd a0	jmp $a0dd			jmp Set_Order	; set the minimum search order.
=6					CL	.var *-(WordListLink+wh_Xt)
=$9f7a					en = *	; remember here
>9f72	06					.byte CL	;wh_CodeLength
>9f7a	41 6c 73 6f			L1:	.text "Also"	;  name of word as a string, ending at wh_NameLastChar
>9f7e	e4					.byte (("Also"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f7f	ef 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f81	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f82	08					.byte NN	;wh_Flags	dictionary flags
=40702					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f83	20 15 a1	jsr $a115	Also:		jsr Get_Order
.9f86	20 c7 ce	jsr $cec7			jsr Over
.9f89	20 0e cf	jsr $cf0e			jsr Swap
.9f8c	20 e6 c9	jsr $c9e6			jsr One_plus
.9f8f	4c dd a0	jmp $a0dd			jmp Set_Order
=15					CL	.var *-(WordListLink+wh_Xt)
=$9f92					en = *	; remember here
>9f81	0f					.byte CL	;wh_CodeLength
>9f92	50 72 65 76 69 6f 75 73		L1:	.text "Previous"	;  name of word as a string, ending at wh_NameLastChar
>9f9a	68					.byte (("Previous"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f9b	fe 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f9d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f9e	08					.byte NN	;wh_Flags	dictionary flags
=40730					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f9f	20 15 a1	jsr $a115	Previous:	jsr Get_Order
.9fa2	20 0b c9	jsr $c90b			jsr Nip
.9fa5	20 c0 c9	jsr $c9c0			jsr One_minus
.9fa8	4c dd a0	jmp $a0dd			jmp Set_Order
=12					CL	.var *-(WordListLink+wh_Xt)
=$9fab					en = *	; remember here
>9f9d	0c					.byte CL	;wh_CodeLength
>9fab	3e 4f 72 64 65 72		L1:	.text ">Order"	;  name of word as a string, ending at wh_NameLastChar
>9fb1	46					.byte ((">Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9fb2	1a 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fb4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fb5	08					.byte NN	;wh_Flags	dictionary flags
=40753					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9fb6					To_Order:
.9fb6	20 75 ce	jsr $ce75			jsr To_R		; Put the wid on the return stack for now.
.9fb9	20 15 a1	jsr $a115			jsr Get_Order		; Get the current search order.
.9fbc	20 94 ce	jsr $ce94			jsr R_From		; Get back the wid and add it to the list.
.9fbf	20 0e cf	jsr $cf0e			jsr Swap
.9fc2	20 e6 c9	jsr $c9e6			jsr One_plus
.9fc5	4c dd a0	jmp $a0dd			jmp Set_Order		; Set the search order with the new list.
=18					CL	.var *-(WordListLink+wh_Xt)
=$9fc8					en = *	; remember here
>9fb4	12					.byte CL	;wh_CodeLength
>9fc8	4f 72 64 65 72			L1:	.text "Order"	;  name of word as a string, ending at wh_NameLastChar
>9fcd	45					.byte (("Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9fce	31 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fd0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fd1	08					.byte NN	;wh_Flags	dictionary flags
=40781					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9fd2					Order:
.9fd2	20 d7 aa	jsr $aad7			jsr CR
.9fd5	a0 00		ldy #$00			ldy #0			; for each search_orderV[]
.9fd7	f0 0b		beq $9fe4			beq _test
.9fd9	98		tya		_loop:		tya
.9fda	48		pha				pha
.9fdb	b9 2b 03	lda $032b,y			lda Search_orderV,y
.9fde	20 ef 9f	jsr $9fef			jsr order_print_wid_string   ; internal helper function
.9fe1	68		pla				pla
.9fe2	a8		tay				tay
.9fe3	c8		iny				iny			;  next
.9fe4	cc 2a 03	cpy $032a	_test:		cpy Num_orderV
.9fe7	90 f0		bcc $9fd9			bcc _loop
.9fe9	20 d7 aa	jsr $aad7			jsr CR
.9fec	ad 10 03	lda $0310			lda CurrentV		; print the current wordlist.
.9fef					order_print_wid_string:
.9fef	c9 04		cmp #$04			cmp #wid_Root+1		; do we have a string?
.9ff1	90 06		bcc $9ff9			bcc _string
.9ff3	20 96 b7	jsr $b796			jsr PushZA		; print the WID number
.9ff6	4c 9f cb	jmp $cb9f			jmp U_Dot		; JSR/RTS
.9ff9	0a		asl a		_string:	asl		; Get the string based on WID 0 to 3
.9ffa	a8		tay				tay
.9ffb	b9 07 a0	lda $a007,y			lda _wid_Table+0,y
.9ffe	48		pha				pha
.9fff	b9 08 a0	lda $a008,y			lda _wid_Table+1,y
.a002	a8		tay				tay
.a003	68		pla				pla
.a004	4c 99 cd	jmp $cd99			jmp Print_ASCIIZ_YA_no_lf ; Print without a line feed
=53					CL	.var *-(WordListLink+wh_Xt)
=$a007					en = *	; remember here
>9fd0	35					.byte CL	;wh_CodeLength
.a007					_wid_Table:
>a007	7f da					.word str_wid_forth	       ; WID 0: "Forth"
>a009	77 da					.word str_wid_editor	       ; WID 1: "Editor"
>a00b	6c da					.word str_wid_asm	       ; WID 2: "Assembler"
>a00d	86 da					.word str_wid_root	       ; WID 3: "Root"
>a00f	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
>a014	05					.byte (("Forth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a015	4d 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a017	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a018	08					.byte NN	;wh_Flags	dictionary flags
=40852					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a019	a9 00		lda #$00	Forth:		lda #wid_Forth
.a01b	8d 2b 03	sta $032b			sta Search_OrderV+0
=5					CL	.var *-(WordListLink+wh_Xt)
=$a01e					en = *	; remember here
>a017	05					.byte CL	;wh_CodeLength
.a01e	60		rts				rts
>a01f	44 65 66 69 6e 69 74 69		L1:	.text "Definitions"	;  name of word as a string, ending at wh_NameLastChar
>a027	6f 6e 73
>a02a	6b					.byte (("Definitions"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a02b	94 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a02d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a02e	08					.byte NN	;wh_Flags	dictionary flags
=40874					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a02f	ad 2b 03	lda $032b	Definitions:	lda Search_OrderV	; Transfer SEARCH_ORDER[0] to
.a032	8d 10 03	sta $0310			sta CurrentV		;   byte variable CURRENT.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a035					en = *	; remember here
>a02d	06					.byte CL	;wh_CodeLength
.a035	60		rts				rts
>a036	57 6f 72 64 4c 69 73 74		L1:	.text "WordList"	;  name of word as a string, ending at wh_NameLastChar
>a03e	88					.byte (("WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a03f	aa 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a041	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a042	08					.byte NN	;wh_Flags	dictionary flags
=40894					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a043					WordList:
.a043	ad 11 03	lda $0311			lda Num_wordlistsV	; Get the current number of wordlists
.a046	c9 0c		cmp #$0c			cmp #max_wordlists	; already at the max?
.a048	90 05		bcc $a04f			bcc +
.a04a	a9 66		lda #$66			lda #$100+err_TooManyWordlists	;   Print an error message
.a04c	4c 23 b4	jmp $b423			jmp ThrowA
.a04f					+
.a04f	ee 11 03	inc $0311			inc Num_WordlistsV	; increment wordlist count
.a052	4c 96 b7	jmp $b796			jmp PushZA		; and put it on the stack.
=18					CL	.var *-(WordListLink+wh_Xt)
=$a055					en = *	; remember here
>a041	12					.byte CL	;wh_CodeLength
>a055	53 65 61 72 63 68 2d 57		L1:	.text "Search-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a05d	6f 72 64 6c 69 73 74
>a064	8f					.byte (("Search-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a065	be 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a067	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a068	18					.byte UF+NN	;wh_Flags	dictionary flags
=40932					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a069					Search_WordList:
.a069	20 de b3	jsr $b3de			jsr underflow_3
.a06c	b5 24		lda $24,x			lda DStack+0,x		; Pop wid
.a06e	e8		inx				inx
.a06f	e8		inx				inx
.a070	48		pha				pha
.a071	20 bb bc	jsr $bcbb			jsr fina_pattern_prepare ; tmp2 = pseudo-header for pattern name, zeros NOS
.a074	68		pla				pla			; pop wid
.a075	20 e5 bc	jsr $bce5			jsr fina_search_wordlist ; tmp1 = nt of matching word
.a078	f0 25		beq $a09f			beq _fail
.a07a	18		clc				clc
.a07b	a5 14		lda $14				lda tmp1+0		; NOS = xt
.a07d	69 85		adc #$85			adc #Wh_xt
.a07f	95 26		sta $26,x			sta DStack+2,x
.a081	a5 15		lda $15				lda tmp1+1
.a083	69 00		adc #$00			adc #0
.a085	95 27		sta $27,x			sta DStack+3,x
.a087	a0 84		ldy #$84			ldy #Wh_Flags		; get flags
.a089	b1 14		lda ($14),y			lda (tmp1),y
.a08b	29 04		and #$04			and #IM
.a08d	d0 07		bne $a096			bne _immediate		; bit set, we're immediate
.a08f	a9 ff		lda #$ff			lda #$FF		; We're not immediate, return -1
.a091	95 24		sta $24,x			sta DStack+0,x
.a093	95 25		sta $25,x			sta DStack+1,x
.a095	60		rts				rts
.a096					_immediate:
.a096	a9 01		lda #$01			lda #1			; We're immediate, return 1
.a098	95 24		sta $24,x			sta DStack+0,x
.a09a	a9 00		lda #$00			lda #0
.a09c	95 25		sta $25,x			sta DStack+1,x
.a09e	60		rts				rts
.a09f					_fail:
.a09f	e8		inx				inx			; Drop u
.a0a0	e8		inx				inx
.a0a1	60		rts				rts
=57					CL	.var *-(WordListLink+wh_Xt)
=$a0a2					en = *	; remember here
>a067	39					.byte CL	;wh_CodeLength
>a0a2	53 65 74 2d 43 75 72 72		L1:	.text "Set-Current"	;  name of word as a string, ending at wh_NameLastChar
>a0aa	65 6e 74
>a0ad	8b					.byte (("Set-Current"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0ae	e4 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0b0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0b1	00					.byte 0	;wh_Flags	dictionary flags
=41005					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0b2	20 7e b3	jsr $b37e	Set_Current:	jsr PopA	; pop wid
.a0b5	8d 10 03	sta $0310			sta CurrentV	; only the LSB is used.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a0b8					en = *	; remember here
>a0b0	06					.byte CL	;wh_CodeLength
.a0b8	60		rts				rts
>a0b9	47 65 74 2d 43 75 72 72		L1:	.text "Get-Current"	;  name of word as a string, ending at wh_NameLastChar
>a0c1	65 6e 74
>a0c4	8b					.byte (("Get-Current"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0c5	2d a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0c8	08					.byte NN	;wh_Flags	dictionary flags
=41028					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0c9					Get_Current:
.a0c9	ad 10 03	lda $0310			lda CurrentV
.a0cc	4c 96 b7	jmp $b796			jmp PushZA	; CURRENT is a byte variable
=6					CL	.var *-(WordListLink+wh_Xt)
=$a0cf					en = *	; remember here
>a0c7	06					.byte CL	;wh_CodeLength
>a0cf	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>a0d7	72
>a0d8	49					.byte (("Set-Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0d9	44 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0dc	00					.byte 0	;wh_Flags	dictionary flags
=41048					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0dd					Set_Order:
.a0dd	b5 25		lda $25,x			lda DStack+1,x		; Test for -1 TOS
.a0df	10 0b		bpl $a0ec			bpl _start
.a0e1	a9 00		lda #$00			lda #0
.a0e3	95 25		sta $25,x			sta DStack+1,x
.a0e5	a9 03		lda #$03			lda #wid_Root
.a0e7	95 24		sta $24,x			sta DStack+0,x
.a0e9	20 af b7	jsr $b7af			jsr One			; Count is 1.
.a0ec					_start:
.a0ec	b5 24		lda $24,x			lda DStack+0,x
.a0ee	99 2a 03	sta $032a,y			sta Num_orderV,y	; #ORDER is a byte variable.
.a0f1	85 14		sta $14				sta tmp1	; Save a copy for zero check and looping.
.a0f3	e8		inx				inx		; Drop the count off the data stack.
.a0f4	e8		inx				inx
.a0f5	a5 14		lda $14				lda tmp1
.a0f7	f0 0d		beq $a106			beq _done	; If zero, there are no wordlists.
.a0f9	a0 00		ldy #$00			ldy #0
.a0fb					_loop:
.a0fb	20 7e b3	jsr $b37e			jsr PopA		; The search order is a byte array
.a0fe	99 2b 03	sta $032b,y			sta Search_OrderV,y	; so only save the LSB
.a101	c8		iny				iny
.a102	c6 14		dec $14				dec tmp1
.a104	d0 f5		bne $a0fb			bne _loop
.a106					_done:
=41					CL	.var *-(WordListLink+wh_Xt)
=$a106					en = *	; remember here
>a0db	29					.byte CL	;wh_CodeLength
.a106	60		rts				rts
>a107	47 65 74 2d 4f 72 64 65		L1:	.text "Get-Order"	;  name of word as a string, ending at wh_NameLastChar
>a10f	72
>a110	49					.byte (("Get-Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a111	58 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a113	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a114	08					.byte NN	;wh_Flags	dictionary flags
=41104					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a115					Get_Order:
.a115	ac 2a 03	ldy $032a			ldy Num_OrderV	; Get #ORDER - the number of wordlists in the search order.
.a118	f0 09		beq $a123			beq _done	; If zero, there are no wordlists.
.a11a					_loop:
.a11a	b9 2a 03	lda $032a,y			lda Search_OrderV-1,y	; Put that wordlist id on the stack.
.a11d	20 96 b7	jsr $b796			jsr PushZA
.a120	88		dey				dey
.a121	d0 f7		bne $a11a			bne _loop		; See if that was the last one to process (first in the list).
.a123					_done:
.a123	ad 2a 03	lda $032a			lda Num_OrderV		; Put the number of items on the stack.
.a126	4c 96 b7	jmp $b796			jmp PushZA
=20					CL	.var *-(WordListLink+wh_Xt)
=$a129					en = *	; remember here
>a113	14					.byte CL	;wh_CodeLength
>0339					BlockReadV: .word ?	; Vector to block reading routine
>033b					BlockWriteV: .word ?	; Vector to block writing routine
>033d					BuffBlockNumV: .word ?	; Block number current in BlockBuffer
>033f					BuffStatusV: .word ?	; Status of BlockBuffer (bit 0 = used, bit 1 = dirty)
>0341					BlockBuffer: .fill 1024
.a129					BlockInit:
.a129	a9 00		lda #$00			lda #0
.a12b	8d 3f 03	sta $033f			sta BuffStatusV
.a12e	a9 45		lda #$45			lda #<Platform_Block_Read
.a130	a0 f1		ldy #$f1			ldy #>Platform_Block_Read
.a132	8d 39 03	sta $0339			sta BlockReadV+0
.a135	8c 3a 03	sty $033a			sty BlockReadV+1
.a138	a9 70		lda #$70			lda #<Platform_Block_Write
.a13a	a0 f1		ldy #$f1			ldy #>Platform_Block_Write
.a13c	8d 3b 03	sta $033b			sta BlockWriteV+0
.a13f	8c 3c 03	sty $033c			sty BlockWriteV+1
.a142	60		rts				rts
>0741					RamDriveV: .word ?
=0					io_blk_status = 0
=0					io_blk_action = 0
=0					io_blk_number = 0
=0					io_blk_buffer = 0
>a143	42 6c 6f 63 6b 2d 52 61		L1:	.text "Block-RamDrive-Init"	;  name of word as a string, ending at wh_NameLastChar
>a14b	6d 44 72 69 76 65 2d 49 6e 69 74
>a156	93					.byte (("Block-RamDrive-Init"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a157	90 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a159	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a15a	18					.byte UF+NN	;wh_Flags	dictionary flags
=41174					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a15b					Block_RamDrive_Init:
.a15b	a9 0a		lda #$0a			lda #10			; Calculate how many bytes are needed for numblocks blocks
.a15d	20 96 b7	jsr $b796			jsr PushZA
.a160	20 d6 ca	jsr $cad6			jsr LShift
.a163	20 b2 c9	jsr $c9b2			jsr Here		; ( size addr )
.a166	8d 41 07	sta $0741			sta RamDriveV+0
.a169	8c 42 07	sty $0742			sty RamDriveV+1
.a16c	20 c7 ce	jsr $cec7			jsr Over
.a16f	20 78 c0	jsr $c078			jsr Allot		; Create ramdrive buffer
.a172	20 0e cf	jsr $cf0e			jsr Swap		; blank the buffer
.a175	20 ee bd	jsr $bdee			jsr Blank
.a178	a9 8d		lda #$8d			lda #<_read		; set block read vector
.a17a	a0 a1		ldy #$a1			ldy #>_read
.a17c	8d 39 03	sta $0339			sta BlockReadV+0
.a17f	8c 3a 03	sty $033a			sty BlockReadV+1
.a182	a9 9d		lda #$9d			lda #<_write		; set block write vector
.a184	a0 a1		ldy #$a1			ldy #>_write
.a186	8d 3b 03	sta $033b			sta BlockWriteV+0
.a189	8c 3c 03	sty $033c			sty BlockWriteV+1
.a18c	60		rts				rts
=50					CL	.var *-(WordListLink+wh_Xt)
=$a18d					en = *	; remember here
>a159	32					.byte CL	;wh_CodeLength
.a18d					_read:
.a18d	20 aa a1	jsr $a1aa			jsr _addr
.a190	20 0e cf	jsr $cf0e			jsr Swap
.a193	a9 00		lda #$00			lda #0
.a195	a0 04		ldy #$04			ldy #>1024
.a197	20 54 b7	jsr $b754			jsr PushYA
.a19a	4c f4 ac	jmp $acf4			jmp Move
.a19d					_write:
.a19d	20 aa a1	jsr $a1aa			jsr _addr
.a1a0	a9 00		lda #$00			lda #0
.a1a2	a0 04		ldy #$04			ldy #>1024
.a1a4	20 54 b7	jsr $b754			jsr PushYA
.a1a7	4c f4 ac	jmp $acf4			jmp Move
.a1aa					_addr:
.a1aa	a9 0a		lda #$0a			lda #10
.a1ac	20 96 b7	jsr $b796			jsr PushZA
.a1af	20 d6 ca	jsr $cad6			jsr LShift
.a1b2	20 c5 a1	jsr $a1c5			jsr RamDrive
.a1b5	4c 3a cb	jmp $cb3a			jmp Plus
>a1b8	52 61 6d 44 72 69 76 65		L1:	.text "RamDrive"	;  name of word as a string, ending at wh_NameLastChar
>a1c0	a8					.byte (("RamDrive"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a1c1	d6 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1c4	08					.byte NN	;wh_Flags	dictionary flags
=41280					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1c5	ad 41 07	lda $0741	RamDrive:	lda RamDriveV+0
.a1c8	ac 42 07	ldy $0742			ldy RamDriveV+1
.a1cb	4c 54 b7	jmp $b754			jmp PushYA
=9					CL	.var *-(WordListLink+wh_Xt)
=$a1ce					en = *	; remember here
>a1c3	09					.byte CL	;wh_CodeLength
>a1ce	42 75 66 66 53 74 61 74		L1:	.text "BuffStatus"	;  name of word as a string, ending at wh_NameLastChar
>a1d6	75 73
>a1d8	6a					.byte (("BuffStatus"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a1d9	40 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1dc	08					.byte NN	;wh_Flags	dictionary flags
=41304					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1dd	a0 03		ldy #$03	BuffStatus:	ldy #>BuffStatusV
.a1df	a9 3f		lda #$3f			lda #<BuffStatusV
.a1e1	4c 54 b7	jmp $b754			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a1e4					en = *	; remember here
>a1db	07					.byte CL	;wh_CodeLength
>a1e4	42 75 66 66 42 6c 6f 63		L1:	.text "BuffBlockNum"	;  name of word as a string, ending at wh_NameLastChar
>a1ec	6b 4e 75 6d
>a1f0	ac					.byte (("BuffBlockNum"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a1f1	58 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1f4	08					.byte NN	;wh_Flags	dictionary flags
=41328					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1f5	a0 03		ldy #$03	BuffBlockNum:	ldy #>BuffBlockNumV
.a1f7	a9 3d		lda #$3d			lda #<BuffBlockNumV
.a1f9	4c 54 b7	jmp $b754			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a1fc					en = *	; remember here
>a1f3	07					.byte CL	;wh_CodeLength
>a1fc	42 6c 6b 42 75 66 66 65		L1:	.text "BlkBuffer"	;  name of word as a string, ending at wh_NameLastChar
>a204	72
>a205	49					.byte (("BlkBuffer"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a206	70 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a208	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a209	08					.byte NN	;wh_Flags	dictionary flags
=41349					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a20a	a0 03		ldy #$03	BlkBuffer:	ldy #>BlockBuffer
.a20c	a9 41		lda #$41			lda #<BlockBuffer
.a20e	4c 54 b7	jmp $b754			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a211					en = *	; remember here
>a208	07					.byte CL	;wh_CodeLength
>a211	53 63 72			L1:	.text "Scr"	;  name of word as a string, ending at wh_NameLastChar
>a214	43					.byte (("Scr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a215	85 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a217	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a218	08					.byte NN	;wh_Flags	dictionary flags
=41364					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a219	a0 03		ldy #$03	Scr:		ldy #>ScrV
.a21b	a9 0e		lda #$0e			lda #<ScrV
.a21d	4c 54 b7	jmp $b754			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a220					en = *	; remember here
>a217	07					.byte CL	;wh_CodeLength
>a220	42 6c 6b			L1:	.text "Blk"	;  name of word as a string, ending at wh_NameLastChar
>a223	63					.byte (("Blk"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a224	94 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a226	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a227	08					.byte NN	;wh_Flags	dictionary flags
=41379					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a228	a0 03		ldy #$03	Blk:		ldy #>BlkV
.a22a	a9 0c		lda #$0c			lda #<BlkV
.a22c	4c 54 b7	jmp $b754			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a22f					en = *	; remember here
>a226	07					.byte CL	;wh_CodeLength
>a22f	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write"	;  name of word as a string, ending at wh_NameLastChar
>a237	69 74 65
>a23a	ab					.byte (("Block-Write"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a23b	a3 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a23d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a23e	08					.byte NN	;wh_Flags	dictionary flags
=41402					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a23f	6c 3b 03	jmp ($033b)	Block_Write:	jmp (BlockWriteV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-(WordListLink+wh_Xt)
=$a242					en = *	; remember here
>a23d	03					.byte CL	;wh_CodeLength
>a242	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a24a	69 74 65 2d 56 65 63 74 6f 72
>a254	52					.byte (("Block-Write-Vector"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a255	ba a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a257	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a258	08					.byte NN	;wh_Flags	dictionary flags
=41428					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a259					Block_Write_Vector:
.a259	a0 03		ldy #$03			ldy #>BlockWriteV
.a25b	a9 3b		lda #$3b			lda #<BlockWriteV	; Get the BLOCK-WRITE-VECTOR address
.a25d	4c 54 b7	jmp $b754			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a260					en = *	; remember here
>a257	07					.byte CL	;wh_CodeLength
>a260	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read"	;  name of word as a string, ending at wh_NameLastChar
>a268	61 64
>a26a	8a					.byte (("Block-Read"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a26b	d4 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a26d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a26e	08					.byte NN	;wh_Flags	dictionary flags
=41450					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a26f	6c 39 03	jmp ($0339)	Block_Read:	jmp (BlockReadV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-(WordListLink+wh_Xt)
=$a272					en = *	; remember here
>a26d	03					.byte CL	;wh_CodeLength
>a272	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a27a	61 64 2d 56 65 63 74 6f 72
>a283	51					.byte (("Block-Read-Vector"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a284	ea a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a286	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a287	08					.byte NN	;wh_Flags	dictionary flags
=41475					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a288					Block_Read_Vector:
.a288	a0 03		ldy #$03			ldy #>BlockReadV
.a28a	a9 39		lda #$39			lda #<BlockReadV	; Get the BLOCK-READ-VECTOR address
.a28c	4c 54 b7	jmp $b754			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a28f					en = *	; remember here
>a286	07					.byte CL	;wh_CodeLength
>a28f	53 61 76 65 2d 42 75 66		L1:	.text "Save-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a297	66 65 72 73
>a29b	6c					.byte (("Save-Buffers"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a29c	03 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a29e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a29f	00					.byte 0	;wh_Flags	dictionary flags
=41499					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2a0					Save_Buffers:
.a2a0	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a2a3	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a2a5	d0 11		bne $a2b8			bne _done	; Either not used or not dirty = done!
.a2a7	20 0a a2	jsr $a20a			jsr BlkBuffer
.a2aa	20 f5 a1	jsr $a1f5			jsr BuffBlockNum
.a2ad	20 5a ce	jsr $ce5a			jsr Fetch
.a2b0	20 3f a2	jsr $a23f			jsr Block_Write
.a2b3	a9 01		lda #$01			lda #1
.a2b5	8d 3f 03	sta $033f			sta BuffStatusV+0
.a2b8					_done:
=24					CL	.var *-(WordListLink+wh_Xt)
=$a2b8					en = *	; remember here
>a29e	18					.byte CL	;wh_CodeLength
.a2b8	60		rts				rts
>a2b9	42 6c 6f 63 6b			L1:	.text "Block"	;  name of word as a string, ending at wh_NameLastChar
>a2be	65					.byte (("Block"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a2bf	1b a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a2c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a2c2	00					.byte 0	;wh_Flags	dictionary flags
=41534					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2c3					Block:
.a2c3	ad 3d 03	lda $033d			lda BuffBlockNumV+0	; check the LSB
.a2c6	d5 24		cmp $24,x			cmp DStack+0,x
.a2c8	d0 0e		bne $a2d8			bne _not_in_buffer
.a2ca	ad 3e 03	lda $033e			lda BuffBlockNumV+1	; check the MSB
.a2cd	d5 25		cmp $25,x			cmp DStack+1,x
.a2cf	d0 07		bne $a2d8			bne _not_in_buffer
.a2d1	ad 3f 03	lda $033f			lda BuffStatusV+0
.a2d4	29 01		and #$01			and #1		; Check the in-use flag (bit 0)
.a2d6	d0 2d		bne $a305			bne _done	; It's already in the buffer and in use.
.a2d8					_not_in_buffer:
.a2d8	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a2db	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a2dd	d0 0c		bne $a2eb			bne _buffer_available ; Unused or not dirty = available
.a2df	20 0a a2	jsr $a20a			jsr BlkBuffer
.a2e2	20 f5 a1	jsr $a1f5			jsr BuffBlockNum
.a2e5	20 5a ce	jsr $ce5a			jsr Fetch
.a2e8	20 3f a2	jsr $a23f			jsr Block_Write
.a2eb					_buffer_available:
.a2eb	b5 24		lda $24,x			lda DStack+0,x
.a2ed	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a2f0	b5 25		lda $25,x			lda DStack+1,x
.a2f2	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a2f5	20 0a a2	jsr $a20a			jsr BlkBuffer
.a2f8	20 0e cf	jsr $cf0e			jsr Swap
.a2fb	20 6f a2	jsr $a26f			jsr Block_Read
.a2fe	a9 01		lda #$01			lda #1
.a300	8d 3f 03	sta $033f			sta BuffStatusV+0
.a303	ca		dex				dex
.a304	ca		dex				dex
.a305					_done:
.a305	a9 41		lda #$41			lda #<BlockBuffer
.a307	95 24		sta $24,x			sta DStack+0,x
.a309	a9 03		lda #$03			lda #>BlockBuffer
.a30b	95 25		sta $25,x			sta DStack+1,x
=74					CL	.var *-(WordListLink+wh_Xt)
=$a30d					en = *	; remember here
>a2c1	4a					.byte CL	;wh_CodeLength
.a30d	60		rts				rts
>a30e	55 70 64 61 74 65		L1:	.text "Update"	;  name of word as a string, ending at wh_NameLastChar
>a314	a6					.byte (("Update"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a315	3e a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a317	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a318	00					.byte 0	;wh_Flags	dictionary flags
=41620					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a319					Update:
.a319	ad 3f 03	lda $033f			lda BuffStatusV+0
.a31c	09 02		ora #$02			ora #2		; Turn on dirty flag (bit 2)
.a31e	8d 3f 03	sta $033f			sta BuffStatusV+0
=8					CL	.var *-(WordListLink+wh_Xt)
=$a321					en = *	; remember here
>a317	08					.byte CL	;wh_CodeLength
.a321	60		rts				rts
>a322	42 75 66 66 65 72		L1:	.text "Buffer"	;  name of word as a string, ending at wh_NameLastChar
>a328	46					.byte (("Buffer"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a329	94 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a32b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a32c	08					.byte NN	;wh_Flags	dictionary flags
=41640					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a32d					Buffer:
.a32d	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a330	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a332	d0 0c		bne $a340			bne _buffer_available ; Unused or not dirty = available
.a334	20 0a a2	jsr $a20a			jsr BlkBuffer
.a337	20 f5 a1	jsr $a1f5			jsr BuffBlockNum
.a33a	20 5a ce	jsr $ce5a			jsr Fetch
.a33d	20 3f a2	jsr $a23f			jsr Block_Write
.a340					_buffer_available:
.a340	b5 24		lda $24,x			lda DStack+0,x
.a342	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a345	b5 25		lda $25,x			lda DStack+1,x
.a347	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a34a	a9 01		lda #$01			lda #1
.a34c	8d 3f 03	sta $033f			sta BuffStatusV+0
.a34f					_done:
.a34f	a9 41		lda #$41			lda #<BlockBuffer
.a351	95 24		sta $24,x			sta DStack+0,x
.a353	a9 03		lda #$03			lda #>BlockBuffer
.a355	95 25		sta $25,x			sta DStack+1,x
=42					CL	.var *-(WordListLink+wh_Xt)
=$a357					en = *	; remember here
>a32b	2a					.byte CL	;wh_CodeLength
.a357	60		rts				rts
>a358	45 6d 70 74 79 2d 42 75		L1:	.text "Empty-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a360	66 66 65 72 73
>a365	6d					.byte (("Empty-Buffers"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a366	a8 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a368	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a369	08					.byte NN	;wh_Flags	dictionary flags
=41701					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a36a	a9 00		lda #$00	Empty_Buffers:	lda #0		; Set the buffer status to empty.
.a36c	8d 3f 03	sta $033f			sta BuffStatusV+0 ; Only LSB is used.
=5					CL	.var *-(WordListLink+wh_Xt)
=$a36f					en = *	; remember here
>a368	05					.byte CL	;wh_CodeLength
.a36f	60		rts				rts
>a370	46 6c 75 73 68			L1:	.text "Flush"	;  name of word as a string, ending at wh_NameLastChar
>a375	05					.byte (("Flush"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a376	e5 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a378	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a379	08					.byte NN	;wh_Flags	dictionary flags
=41717					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a37a	20 a0 a2	jsr $a2a0	Flush:		jsr Save_Buffers
.a37d	4c 6a a3	jmp $a36a			jmp Empty_Buffers
=6					CL	.var *-(WordListLink+wh_Xt)
=$a380					en = *	; remember here
>a378	06					.byte CL	;wh_CodeLength
>a380	4c 6f 61 64			L1:	.text "Load"	;  name of word as a string, ending at wh_NameLastChar
>a384	84					.byte (("Load"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a385	f5 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a387	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a388	10					.byte UF	;wh_Flags	dictionary flags
=41732					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a389					Load:
.a389	20 c4 b3	jsr $b3c4			jsr underflow_1
.a38c	ad 0d 03	lda $030d			lda BlkV+1		; Save the current value of BLK on the return stack.
.a38f	48		pha				pha
.a390	ad 0c 03	lda $030c			lda BlkV+0
.a393	48		pha				pha
.a394	b5 24		lda $24,x			lda DStack+0,x		; Set BLK to the given block/screen number.
.a396	8d 0c 03	sta $030c			sta BlkV+0
.a399	b5 25		lda $25,x			lda DStack+1,x
.a39b	8d 0d 03	sta $030d			sta BlkV+1
.a39e	20 c3 a2	jsr $a2c3			jsr Block		; Load that block into a buffer
.a3a1	a9 00		lda #$00			lda #<1024		; block length.
.a3a3	a0 04		ldy #$04			ldy #>1024
.a3a5	20 54 b7	jsr $b754			jsr PushYA
.a3a8	38		sec				sec		; Set a flag to not zero BLK
.a3a9	20 8a af	jsr $af8a			jsr load_evaluate
.a3ac	68		pla				pla
.a3ad	8d 0c 03	sta $030c			sta BlkV+0
.a3b0	68		pla				pla
.a3b1	8d 0d 03	sta $030d			sta BlkV+1
.a3b4	0d 0c 03	ora $030c			ora BlkV+0
.a3b7	f0 13		beq $a3cc			beq _done
.a3b9	ad 0c 03	lda $030c			lda BlkV+0
.a3bc	ac 0d 03	ldy $030d			ldy BlkV+1
.a3bf	20 54 b7	jsr $b754			jsr PushYA
.a3c2	20 c3 a2	jsr $a2c3			jsr Block
.a3c5	20 9a b3	jsr $b39a			jsr PopYA	; Pop the buffer address.
.a3c8	85 04		sta $04				sta cib+0
.a3ca	84 05		sty $05				sty cib+1
.a3cc					_done:
=67					CL	.var *-(WordListLink+wh_Xt)
=$a3cc					en = *	; remember here
>a387	43					.byte CL	;wh_CodeLength
.a3cc	60		rts				rts
>a3cd	54 68 72 75			L1:	.text "Thru"	;  name of word as a string, ending at wh_NameLastChar
>a3d1	a4					.byte (("Thru"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a3d2	04 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3d4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3d5	18					.byte UF+NN	;wh_Flags	dictionary flags
=41809					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3d6					Thru:
.a3d6	20 d9 b3	jsr $b3d9			jsr underflow_2
.a3d9	20 75 ce	jsr $ce75			jsr To_R
.a3dc					_loop:
.a3dc	b5 25		lda $25,x			lda DStack+1,x		; copy to return stack
.a3de	48		pha				pha
.a3df	b5 24		lda $24,x			lda DStack+0,x
.a3e1	48		pha				pha
.a3e2	20 89 a3	jsr $a389			jsr Load		; Load this screen.
.a3e5	20 94 ce	jsr $ce94			jsr R_From		; Get the screen # we just loaded.
.a3e8	20 e6 c9	jsr $c9e6			jsr One_plus		; increment
.a3eb	86 14		stx $14				stx tmp1
.a3ed	ba		tsx				tsx
.a3ee	8a		txa				txa
.a3ef	a8		tay				tay
.a3f0	a6 14		ldx $14				ldx tmp1
.a3f2	b9 01 01	lda $0101,y			lda RStack+1,y
.a3f5	d5 24		cmp $24,x			cmp DStack+0,x
.a3f7	b9 02 01	lda $0102,y			lda RStack+2,y
.a3fa	f5 25		sbc $25,x			sbc DStack+1,x
.a3fc	b0 de		bcs $a3dc			bcs _loop
.a3fe	e8		inx				inx			; Drop index
.a3ff	e8		inx				inx
.a400	68		pla				pla			; RDrop limit
.a401	68		pla				pla
=44					CL	.var *-(WordListLink+wh_Xt)
=$a402					en = *	; remember here
>a3d4	2c					.byte CL	;wh_CodeLength
.a402	60		rts				rts
>a403	4c 69 73 74			L1:	.text "List"	;  name of word as a string, ending at wh_NameLastChar
>a407	84					.byte (("List"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a408	51 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a40a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a40b	08					.byte NN	;wh_Flags	dictionary flags
=41863					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a40c	20 9a b3	jsr $b39a	List:		jsr PopYA	; Save the screen number
.a40f	8d 0e 03	sta $030e			sta ScrV+0
.a412	8c 0f 03	sty $030f			sty ScrV+1
.a415					ListScr:
.a415	20 19 a2	jsr $a219			jsr Scr
.a418	20 5a ce	jsr $ce5a			jsr Fetch
.a41b	20 c3 a2	jsr $a2c3			jsr Block	; Get the current screen contents.
.a41e	20 d7 aa	jsr $aad7			jsr CR
.a421	20 75 b8	jsr $b875			jsr SLiteral_Runtime
.a424	4c 2f a4	jmp $a42f			  jmp +				; for SLiteral_Runtime
>a427	53 63 72 65 65 6e 20 23				  .text "Screen #"		; for SLiteral_Runtime
.a42f					+
.a42f	20 78 cd	jsr $cd78			jsr Type
.a432	20 19 a2	jsr $a219			jsr Scr		; print screen number
.a435	20 5a ce	jsr $ce5a			jsr Fetch
.a438	a9 04		lda #$04			lda #4		;    in 4 positions
.a43a	20 d3 cb	jsr $cbd3			jsr U_Dot_R_A
.a43d	a9 00		lda #$00			lda #0			; line #
.a43f					_line_loop:
.a43f	48		pha				pha
.a440	20 d7 aa	jsr $aad7			jsr CR
.a443	68		pla				pla		; Print the line number
.a444	48		pha				pha
.a445	20 96 b7	jsr $b796			jsr PushZA
.a448	a9 02		lda #$02			lda #2		;   in 2 positions
.a44a	20 d3 cb	jsr $cbd3			jsr U_Dot_R_A
.a44d	20 6b cd	jsr $cd6b			jsr Space
.a450	20 f0 ce	jsr $cef0			jsr Dup		; Print one line using the address on the stack.
.a453	a9 40		lda #$40			lda #64
.a455	20 96 b7	jsr $b796			jsr PushZA
.a458	20 78 cd	jsr $cd78			jsr Type
.a45b	a9 40		lda #$40			lda #64		; move address to the next line.
.a45d	20 95 c9	jsr $c995			jsr Plus_A
.a460	68		pla				pla		; Increment the line number
.a461	18		clc				clc
.a462	69 01		adc #$01			adc #1
.a464	c9 10		cmp #$10			cmp #16		; See if we are done.
.a466	d0 d7		bne $a43f			bne _line_loop
.a468	e8		inx				inx		; Drop the address
.a469	e8		inx				inx
.a46a	4c d7 aa	jmp $aad7			jmp CR
=97					CL	.var *-(WordListLink+wh_Xt)
=$a46d					en = *	; remember here
>a40a	61					.byte CL	;wh_CodeLength
>a46d	44 65 66 65 72			L1:	.text "Defer"	;  name of word as a string, ending at wh_NameLastChar
>a472	45					.byte (("Defer"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a473	87 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a475	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a476	08					.byte NN	;wh_Flags	dictionary flags
=41970					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a477					Defer:
.a477	20 d2 c0	jsr $c0d2			jsr Header_Comma	; compile word header
.a47a	a9 84		lda #$84			lda #<_undefined	; compile "jmp _undefined"
.a47c	a0 a4		ldy #$a4			ldy #>_undefined
.a47e	20 e5 cc	jsr $cce5			jsr Jmp_Comma_YA
.a481	4c a9 bb	jmp $bba9			jmp adjust_z	; adjust header to correct length
=13					CL	.var *-(WordListLink+wh_Xt)
=$a484					en = *	; remember here
>a475	0d					.byte CL	;wh_CodeLength
.a484					_undefined:
.a484	a9 6a		lda #$6a			lda #$100+err_Defer	; throw exception
.a486	4c 23 b4	jmp $b423			jmp ThrowA
>a489	44 65 66 65 72 40		L1:	.text "Defer@"	;  name of word as a string, ending at wh_NameLastChar
>a48f	06					.byte (("Defer@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a490	f2 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a492	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a493	08					.byte NN	;wh_Flags	dictionary flags
=41999					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a494					Defer_Fetch:
.a494	20 e6 c9	jsr $c9e6			jsr One_plus	; step over JMP opcode to operand
.a497	4c 5a ce	jmp $ce5a			jmp Fetch	; get JMP operand, return
=6					CL	.var *-(WordListLink+wh_Xt)
=$a49a					en = *	; remember here
>a492	06					.byte CL	;wh_CodeLength
>a49a	44 65 66 65 72 21		L1:	.text "Defer!"	;  name of word as a string, ending at wh_NameLastChar
>a4a0	26					.byte (("Defer!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4a1	0f a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4a3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4a4	08					.byte NN	;wh_Flags	dictionary flags
=42016					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4a5					Defer_Store:
.a4a5	20 e6 c9	jsr $c9e6			jsr One_plus	; step over JMP opcode to operand
.a4a8	4c 3d ce	jmp $ce3d			jmp Store	; set JMP operand, return
=6					CL	.var *-(WordListLink+wh_Xt)
=$a4ab					en = *	; remember here
>a4a3	06					.byte CL	;wh_CodeLength
>a4ab	49 73				L1:	.text "Is"	;  name of word as a string, ending at wh_NameLastChar
>a4ad	62					.byte (("Is"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4ae	20 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4b0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4b1	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42029					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4b2					Is:
.a4b2	a5 0a		lda $0a				lda state		; Check STATE
.a4b4	f0 0a		beq $a4c0			beq _interpreting
.a4b6					_compiling:
.a4b6	20 20 bc	jsr $bc20			jsr Bracket_Tick	; compile the xt of the next word as a literal.
.a4b9	a0 a4		ldy #$a4			ldy #>Defer_Store	; Postpone DEFER! by compiling a JSR to it.
.a4bb	a9 a5		lda #$a5			lda #<Defer_Store
.a4bd	4c ce cc	jmp $ccce			jmp Jsr_Comma_YA
.a4c0					_interpreting:
.a4c0	20 0c bc	jsr $bc0c			jsr Tick
.a4c3	4c a5 a4	jmp $a4a5			jmp Defer_Store
=20					CL	.var *-(WordListLink+wh_Xt)
=$a4c6					en = *	; remember here
>a4b0	14					.byte CL	;wh_CodeLength
>a4c6	41 63 74 69 6f 6e 2d 4f		L1:	.text "Action-Of"	;  name of word as a string, ending at wh_NameLastChar
>a4ce	66
>a4cf	c9					.byte (("Action-Of"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4d0	2d a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4d3	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42063					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4d4					Action_Of:
.a4d4	a5 0a		lda $0a				lda state		; Check STATE
.a4d6	f0 0a		beq $a4e2			beq _interpreting
.a4d8					_compiling:
.a4d8	20 20 bc	jsr $bc20			jsr Bracket_Tick	; compile the xt of the next word as a literal.
.a4db	a0 a4		ldy #$a4			ldy #>Defer_Fetch	; Postpone DEFER@ by compiling a JSR to it.
.a4dd	a9 94		lda #$94			lda #<Defer_Fetch
.a4df	4c ce cc	jmp $ccce			jmp Jsr_Comma_YA
.a4e2					_interpreting:
.a4e2	20 0c bc	jsr $bc0c			jsr Tick
.a4e5	4c 94 a4	jmp $a494			jmp Defer_Fetch
=20					CL	.var *-(WordListLink+wh_Xt)
=$a4e8					en = *	; remember here
>a4d2	14					.byte CL	;wh_CodeLength
>a4e8	55 73 65 72 41 64 64 72		L1:	.text "UserAddr"	;  name of word as a string, ending at wh_NameLastChar
>a4f0	48					.byte (("UserAddr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4f1	4f a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4f4	08					.byte NN	;wh_Flags	dictionary flags
=42096					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4f5	a0 02		ldy #$02	UserAddr:	ldy #>User0
.a4f7	a9 ff		lda #$ff			lda #<User0
.a4f9	4c 54 b7	jmp $b754			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a4fc					en = *	; remember here
>a4f3	07					.byte CL	;wh_CodeLength
>a4fc	42 75 66 66 65 72 3a		L1:	.text "Buffer:"	;  name of word as a string, ending at wh_NameLastChar
>a503	47					.byte (("Buffer:"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a504	70 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a506	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a507	08					.byte NN	;wh_Flags	dictionary flags
=42115					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a508	20 6f c1	jsr $c16f	Buffer_Colon:	jsr Create
.a50b	4c 78 c0	jmp $c078			jmp Allot
=6					CL	.var *-(WordListLink+wh_Xt)
=$a50e					en = *	; remember here
>a506	06					.byte CL	;wh_CodeLength
>a50e	43 61 73 65			L1:	.text "Case"	;  name of word as a string, ending at wh_NameLastChar
>a512	a4					.byte (("Case"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a513	83 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a515	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a516	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42130					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a517					Case:
.a517	4c a5 b7	jmp $b7a5			jmp Zero	; init jmp fixup chain
=3					CL	.var *-(WordListLink+wh_Xt)
=$a51a					en = *	; remember here
>a515	03					.byte CL	;wh_CodeLength
>a51a	45 6e 64 43 61 73 65		L1:	.text "EndCase"	;  name of word as a string, ending at wh_NameLastChar
>a521	a7					.byte (("EndCase"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a522	92 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a524	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a525	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42145					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a526					EndCase:
.a526	20 bd cc	jsr $ccbd			jsr Drop_Comma
.a529					_loop:
.a529	b5 25		lda $25,x			lda DStack+1,x	; while addr fixup entries left
.a52b	f0 06		beq $a533			beq _done
.a52d	20 b0 a5	jsr $a5b0			jsr Then	;   fixup another one
.a530	4c 29 a5	jmp $a529			jmp _loop
.a533					_done:
.a533	e8		inx				inx		; Drop the 0
.a534	e8		inx				inx
=15					CL	.var *-(WordListLink+wh_Xt)
=$a535					en = *	; remember here
>a524	0f					.byte CL	;wh_CodeLength
.a535	60		rts				rts
>a536	4f 66				L1:	.text "Of"	;  name of word as a string, ending at wh_NameLastChar
>a538	c2					.byte (("Of"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a539	a1 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a53b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a53c	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42168					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a53d					Of:
.a53d	a0 a5		ldy #$a5			ldy #>_runtime		; Check if value is equal to this case.
.a53f	a9 52		lda #$52			lda #<_runtime
.a541	20 ce cc	jsr $ccce			jsr Jsr_Comma_YA
.a544	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a546	20 8f cc	jsr $cc8f			jsr C_Comma_A
.a549	20 b2 c9	jsr $c9b2			jsr Here		; Put the origination address on the stack for else/then
.a54c	20 a5 b7	jsr $b7a5			jsr Zero
.a54f	4c a6 cc	jmp $cca6			jmp Comma
=21					CL	.var *-(WordListLink+wh_Xt)
=$a552					en = *	; remember here
>a53b	15					.byte CL	;wh_CodeLength
.a552					_runtime:
.a552	b5 24		lda $24,x			lda DStack+0,x	; compare x1 with x2
.a554	d5 26		cmp $26,x			cmp DStack+2,x
.a556	d0 0a		bne $a562			bne _NotEq
.a558	b5 25		lda $25,x			lda DStack+1,x
.a55a	d5 27		cmp $27,x			cmp DStack+3,x
.a55c	d0 04		bne $a562			bne _NotEq
.a55e	e8		inx				inx		; Drop x2
.a55f	e8		inx				inx
.a560	d0 35		bne $a597			bne zbranch_run2 ; Drop x1 & return to after the jmp abs
.a562	e8		inx		_NotEq:		inx		; Drop x2
.a563	e8		inx				inx
.a564	60		rts				rts		; return to the jmp abs to next test
>a565	45 6e 64 4f 66			L1:	.text "EndOf"	;  name of word as a string, ending at wh_NameLastChar
>a56a	c5					.byte (("EndOf"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a56b	b8 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a56d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a56e	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42218					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a56f					EndOf:
.a56f	4c c2 a5	jmp $a5c2			jmp Else
=3					CL	.var *-(WordListLink+wh_Xt)
=$a572					en = *	; remember here
>a56d	03					.byte CL	;wh_CodeLength
>a572	49 66				L1:	.text "If"	;  name of word as a string, ending at wh_NameLastChar
>a574	c2					.byte (("If"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a575	ea a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a577	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a578	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42228					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a579					If:
.a579	20 8a a5	jsr $a58a	If3:		jsr zbranch_jsr_comma	; Compile a 0BRANCH
.a57c					zbranch_jmp0_comma:
.a57c	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a57e	20 8f cc	jsr $cc8f			jsr C_Comma_A
.a581	20 b2 c9	jsr $c9b2			jsr Here		; save ptr to address for else/then
.a584	a9 00		lda #$00			lda #0			; Stuff zero in for the branch address right now.
.a586	a8		tay				tay			; THEN or ELSE will fix it later.
.a587	4c a9 cc	jmp $cca9			jmp Comma_YA
=17					CL	.var *-(WordListLink+wh_Xt)
=$a58a					en = *	; remember here
>a577	11					.byte CL	;wh_CodeLength
=$cce2					zbranch_jmp_comma = Jmp_Comma		; compile jmp abs
.a58a					zbranch_jsr_comma:
.a58a	a0 a5		ldy #$a5			ldy #>_runtime
.a58c	a9 91		lda #$91			lda #<_runtime
.a58e	4c ce cc	jmp $ccce			jmp Jsr_Comma_YA
.a591					_runtime:
.a591	b5 24		lda $24,x			lda DStack+0,x		;flag is false?
.a593	15 25		ora $25,x			ora DStack+1,x
.a595	f0 0d		beq $a5a4			beq zbranch_run_done
.a597	18		clc		zbranch_run2:	clc			; move RTS addr over the next jmp abs.
.a598	68		pla				pla
.a599	69 03		adc #$03			adc #3
.a59b	90 06		bcc $a5a3			bcc +
.a59d	a8		tay				tay
.a59e	68		pla				pla
.a59f	69 00		adc #$00			adc #0
.a5a1	48		pha				pha
.a5a2	98		tya				tya
.a5a3	48		pha		+		pha
.a5a4					zbranch_run_done:
.a5a4	e8		inx				inx			; Drop f
.a5a5	e8		inx				inx
.a5a6	60		rts				rts
>a5a7	54 68 65 6e			L1:	.text "Then"	;  name of word as a string, ending at wh_NameLastChar
>a5ab	c4					.byte (("Then"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5ac	f4 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5ae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5af	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42283					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5b0					Then:
.a5b0	20 b2 c9	jsr $c9b2			jsr Here
.a5b3	20 0e cf	jsr $cf0e			jsr Swap
.a5b6	4c 3d ce	jmp $ce3d			jmp Store
=9					CL	.var *-(WordListLink+wh_Xt)
=$a5b9					en = *	; remember here
>a5ae	09					.byte CL	;wh_CodeLength
>a5b9	45 6c 73 65			L1:	.text "Else"	;  name of word as a string, ending at wh_NameLastChar
>a5bd	a4					.byte (("Else"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5be	2b a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5c0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5c1	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42301					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5c2					Else:
.a5c2	20 7c a5	jsr $a57c			jsr zbranch_jmp0_comma	; compile jmp 0, push addr of addr
.a5c5	20 b2 c9	jsr $c9b2			jsr Here
.a5c8	20 f4 cd	jsr $cdf4			jsr Rot
.a5cb	4c 3d ce	jmp $ce3d			jmp Store
=12					CL	.var *-(WordListLink+wh_Xt)
=$a5ce					en = *	; remember here
>a5c0	0c					.byte CL	;wh_CodeLength
>a5ce	42 65 67 69 6e			L1:	.text "Begin"	;  name of word as a string, ending at wh_NameLastChar
>a5d3	c5					.byte (("Begin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5d4	3d a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5d6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5d7	0d					.byte NN+CO+IM	;wh_Flags	dictionary flags
=42323					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5d8	20 b2 c9	jsr $c9b2	Begin:		jsr Here	; remember the loop starting location
.a5db	a9 d8		lda #$d8			lda #<Begin	; pairing marker
.a5dd	4c 96 b7	jmp $b796			jmp PushZA
=8					CL	.var *-(WordListLink+wh_Xt)
=$a5e0					en = *	; remember here
>a5d6	08					.byte CL	;wh_CodeLength
>a5e0	41 67 61 69 6e			L1:	.text "Again"	;  name of word as a string, ending at wh_NameLastChar
>a5e5	c5					.byte (("Again"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5e6	53 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5e8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5e9	1d					.byte NN+CO+IM+UF	;wh_Flags	dictionary flags
=42341					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5ea	20 d9 b3	jsr $b3d9	Again:		jsr underflow_2
.a5ed	a9 d8		lda #$d8			lda #<Begin	; check pairing
.a5ef	20 8a b2	jsr $b28a			jsr QPairCtlA
.a5f2	4c e2 cc	jmp $cce2			jmp Jmp_Comma	; Compile a jmp abs.
=11					CL	.var *-(WordListLink+wh_Xt)
=$a5f5					en = *	; remember here
>a5e8	0b					.byte CL	;wh_CodeLength
>a5f5	55 6e 74 69 6c			L1:	.text "Until"	;  name of word as a string, ending at wh_NameLastChar
>a5fa	85					.byte (("Until"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5fb	65 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5fd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5fe	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42362					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5ff	a9 d8		lda #$d8	Until:		lda #<Begin		; check pairing
.a601	20 8a b2	jsr $b28a			jsr QPairCtlA
.a604	4c 3d a6	jmp $a63d			jmp ZBranch_Comma	; The address to loop back to is on the stack.
=8					CL	.var *-(WordListLink+wh_Xt)
=$a607					en = *	; remember here
>a5fd	08					.byte CL	;wh_CodeLength
>a607	57 68 69 6c 65			L1:	.text "While"	;  name of word as a string, ending at wh_NameLastChar
>a60c	a5					.byte (("While"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a60d	7a a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a60f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a610	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42380					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a611	a9 d8		lda #$d8	While:		lda #<Begin	; check pairing
.a613	20 8a b2	jsr $b28a			jsr QPairCtlA
.a616	20 79 a5	jsr $a579			jsr If3		; Compile a 0branch & jmp, push addr of addr
.a619	20 0e cf	jsr $cf0e			jsr Swap	; Swap the two addresses on the stack.
.a61c	a9 d8		lda #$d8			lda #<Begin	; pairing marker
.a61e	4c 96 b7	jmp $b796			jmp PushZA
=16					CL	.var *-(WordListLink+wh_Xt)
=$a621					en = *	; remember here
>a60f	10					.byte CL	;wh_CodeLength
>a621	52 65 70 65 61 74		L1:	.text "Repeat"	;  name of word as a string, ending at wh_NameLastChar
>a627	86					.byte (("Repeat"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a628	8c a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a62a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a62b	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42407					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a62c	a9 d8		lda #$d8	Repeat:		lda #<Begin	; check pairing
.a62e	20 8a b2	jsr $b28a			jsr QPairCtlA
.a631	20 e2 cc	jsr $cce2			jsr Jmp_Comma	; compile the jmp back
.a634	20 b2 c9	jsr $c9b2			jsr Here	; patch the WHILE jmp operand
.a637	20 0e cf	jsr $cf0e			jsr Swap
.a63a	4c 3d ce	jmp $ce3d			jmp Store
=17					CL	.var *-(WordListLink+wh_Xt)
=$a63d					en = *	; remember here
>a62a	11					.byte CL	;wh_CodeLength
.a63d					ZBranch_Comma:
.a63d	a9 e8		lda #$e8			lda #$e8		; compile inx; inx
.a63f	a8		tay				tay
.a640	20 a9 cc	jsr $cca9			jsr Comma_YA
.a643	a9 b5		lda #$b5			lda #$b5		; compile lda DStack-2,x
.a645	a0 22		ldy #$22			ldy #DStack-2
.a647	20 a9 cc	jsr $cca9			jsr Comma_YA
.a64a	a9 15		lda #$15			lda #$15		; compile ora DStack-1,x
.a64c	a0 23		ldy #$23			ldy #DStack-1
.a64e	20 a9 cc	jsr $cca9			jsr Comma_YA
.a651	a9 f0		lda #$f0			lda #$f0		; BEQ
.a653	d0 0c		bne $a661			bne Branch_Comma
>a655	42 72 61 6e 63 68 2c		L1:	.text "Branch,"	;  name of word as a string, ending at wh_NameLastChar
>a65c	87					.byte (("Branch,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a65d	a7 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a65f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a660	08					.byte NN	;wh_Flags	dictionary flags
=42460					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a661					Branch_Comma:
.a661	48		pha				pha			; save branch opcode
.a662	38		sec				sec			; AY= displacement+2
.a663	b5 24		lda $24,x			lda DStack+0,x
.a665	e5 00		sbc $00				sbc cp+0
.a667	a8		tay				tay
.a668	b5 25		lda $25,x			lda DStack+1,x
.a66a	e5 01		sbc $01				sbc cp+1
.a66c	c9 ff		cmp #$ff			cmp #$ff		; offset maybe in range?
.a66e	f0 0b		beq $a67b			beq _rev
.a670	68		pla		_2byte:		pla			; restore branch opcode
.a671	49 20		eor #$20			eor #$20		; reverse branch sense
.a673	a0 03		ldy #$03			ldy #3			; compile Bcc *+5
.a675	20 a9 cc	jsr $cca9			jsr Comma_YA
.a678	4c e2 cc	jmp $cce2			jmp Jmp_Comma		; compile JMP abs
.a67b	c0 82		cpy #$82	_rev:		cpy #$80+2		; offset in range?
.a67d	90 f1		bcc $a670			bcc _2byte
.a67f	e8		inx		_1byte:		inx			; Drop address
.a680	e8		inx				inx
.a681	88		dey				dey			; fix displacement
.a682	88		dey				dey
.a683	68		pla				pla			; restore branch opcode
.a684	4c a9 cc	jmp $cca9			jmp Comma_YA		; compile Bcc
>a687	57 6f 72 64			L1:	.text "Word"	;  name of word as a string, ending at wh_NameLastChar
>a68b	84					.byte (("Word"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a68c	dc a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a68e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a68f	18					.byte UF+NN	;wh_Flags	dictionary flags
=42507					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a690					Word:
.a690	20 c4 b3	jsr $b3c4			jsr underflow_1
.a693	a4 08		ldy $08				ldy toin+0		; >IN
.a695	c4 06		cpy $06		_DelimLoop:	cpy ciblen+0		; quit if end of input
.a697	f0 09		beq $a6a2			beq _found_char
.a699	b1 04		lda ($04),y			lda (cib),y
.a69b	d5 24		cmp $24,x			cmp DStack+0,x		; ASCII of delimiter
.a69d	d0 03		bne $a6a2			bne _found_char
.a69f	c8		iny				iny
.a6a0	d0 f3		bne $a695			bne _DelimLoop
.a6a2					_found_char:
.a6a2	84 08		sty $08				sty toin+0		; Save index of where word starts
.a6a4	20 8d ba	jsr $ba8d			jsr Parse		; The real work is done by parse
.a6a7	20 7e b3	jsr $b37e			jsr PopA		; pop u
.a6aa	85 16		sta $16				sta tmp2+0
.a6ac	20 a5 b3	jsr $b3a5			jsr PopTmp1		; pop addr
.a6af	20 b2 c9	jsr $c9b2			jsr Here		; Return caddr
.a6b2	a5 16		lda $16				lda tmp2+0
.a6b4	a0 00		ldy #$00			ldy #0			; Save length of string
.a6b6	f0 03		beq $a6bb			beq _CopyStart
.a6b8	b1 14		lda ($14),y	_CopyLoop:	lda (tmp1),y
.a6ba	c8		iny				iny
.a6bb	20 8f cc	jsr $cc8f	_CopyStart:	jsr C_Comma_A
.a6be	c4 16		cpy $16				cpy tmp2+0
.a6c0	90 f6		bcc $a6b8			bcc _CopyLoop
=50					CL	.var *-(WordListLink+wh_Xt)
=$a6c2					en = *	; remember here
>a68e	32					.byte CL	;wh_CodeLength
.a6c2	60		rts				rts
>a6c3	28				L1:	.text "("	;  name of word as a string, ending at wh_NameLastChar
>a6c4	01					.byte (("("[-1]&7)<<5)+(*-L1)	;wh_HNL
>a6c5	0b a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6c8	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42564					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6c9	a9 29		lda #$29	Paren:		lda #')'		; separator
.a6cb	20 90 ba	jsr $ba90			jsr Parse_A		; Call parse.
.a6ce	4c b1 c4	jmp $c4b1			jmp Two_drop		; Throw away the result.
=8					CL	.var *-(WordListLink+wh_Xt)
=$a6d1					en = *	; remember here
>a6c7	08					.byte CL	;wh_CodeLength
>a6d1	2e 28				L1:	.text ".("	;  name of word as a string, ending at wh_NameLastChar
>a6d3	02					.byte ((".("[-1]&7)<<5)+(*-L1)	;wh_HNL
>a6d4	44 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6d6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6d7	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42579					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6d8	a9 29		lda #$29	Dot_paren:	lda #')'
.a6da	20 90 ba	jsr $ba90			jsr Parse_A
.a6dd	4c 78 cd	jmp $cd78			jmp Type
=8					CL	.var *-(WordListLink+wh_Xt)
=$a6e0					en = *	; remember here
>a6d6	08					.byte CL	;wh_CodeLength
>a6e0	48 61 73 68			L1:	.text "Hash"	;  name of word as a string, ending at wh_NameLastChar
>a6e4	04					.byte (("Hash"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a6e5	53 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6e8	08					.byte NN	;wh_Flags	dictionary flags
=42596					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6e9	20 7e b3	jsr $b37e	Hash:		jsr PopA		; save length
.a6ec	85 16		sta $16				sta tmp2+0
.a6ee	b5 24		lda $24,x			lda DStack+0,x		; copy addr
.a6f0	b4 25		ldy $25,x			ldy DStack+1,x
.a6f2	85 14		sta $14				sta tmp1+0
.a6f4	84 15		sty $15				sty tmp1+1
.a6f6	a9 b3		lda #$b3			lda #$b3		; init hash
.a6f8	95 24		sta $24,x			sta DStack+0,x
.a6fa	95 25		sta $25,x			sta DStack+1,x
.a6fc	a0 00		ldy #$00			ldy #0			; for each char
.a6fe	f0 15		beq $a715			beq _next
.a700	b1 14		lda ($14),y	_loop:		lda (tmp1),y		;   get char
.a702	c9 61		cmp #$61			cmp #'a'		;   uppercase
.a704	90 06		bcc $a70c			bcc _3
.a706	c9 7b		cmp #$7b			cmp #'z'+1
.a708	b0 02		bcs $a70c			bcs _3
.a70a	29 df		and #$df			and #$df
.a70c	16 24		asl $24,x	_3:		asl DStack+0,x		;   add to hash
.a70e	36 25		rol $25,x			rol DStack+1,x
.a710	75 24		adc $24,x			adc DStack+0,x
.a712	95 24		sta $24,x			sta DStack+0,x
.a714	c8		iny				iny
.a715	c4 16		cpy $16		_Next:		cpy tmp2+0
.a717	90 e7		bcc $a700			bcc _loop
=48					CL	.var *-(WordListLink+wh_Xt)
=$a719					en = *	; remember here
>a6e7	30					.byte CL	;wh_CodeLength
.a719	60		rts				rts
>a71a	45 6e 76 69 72 6f 6e 6d		L1:	.text "Environment?"	;  name of word as a string, ending at wh_NameLastChar
>a722	65 6e 74 3f
>a726	ec					.byte (("Environment?"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a727	64 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a729	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a72a	08					.byte NN	;wh_Flags	dictionary flags
=42662					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a72b					Environment_Q:
.a72b	20 e9 a6	jsr $a6e9			jsr Hash		; ( hash )
.a72e	a0 00		ldy #$00			ldy #0			; Y= table index
.a730	f0 0a		beq $a73c			beq _entry_test
.a732	98		tya		_entry_next:	tya
.a733	c0 30		cpy #$30			cpy #_table_dbl		; if double
.a735	90 02		bcc $a739			bcc +
.a737	69 01		adc #$01			adc #6-4-1		;   skip double
.a739	69 04		adc #$04	+		adc #4			;   skip single
.a73b	a8		tay		_3:		tay
.a73c	b9 70 a7	lda $a770,y	_entry_test:	lda _Table+0,y		; match?
.a73f	f0 28		beq $a769			beq _notfound
.a741	d5 24		cmp $24,x			cmp DStack+0,x
.a743	d0 ed		bne $a732			bne _entry_next
.a745	b9 71 a7	lda $a771,y			lda _Table+1,y
.a748	d5 25		cmp $25,x			cmp DStack+1,x
.a74a	d0 e6		bne $a732			bne _entry_next
.a74c	b9 72 a7	lda $a772,y			lda _Table+2,y
.a74f	95 24		sta $24,x			sta DStack+0,x
.a751	b9 73 a7	lda $a773,y			lda _Table+3,y
.a754	95 25		sta $25,x			sta DStack+1,x
.a756	c0 30		cpy #$30			cpy #_table_dbl		; single or double data?
.a758	90 0c		bcc $a766			bcc _single
.a75a	ca		dex				dex			;  push 2nd cell
.a75b	ca		dex				dex
.a75c	b9 74 a7	lda $a774,y			lda _Table+4,y
.a75f	95 24		sta $24,x			sta DStack+0,x
.a761	b9 75 a7	lda $a775,y			lda _Table+5,y
.a764	95 25		sta $25,x			sta DStack+1,x
.a766					_single:
.a766	4c 74 b7	jmp $b774			jmp True		; return True
.a769					_notfound:
.a769	a9 00		lda #$00			lda #0			; return 0
.a76b	95 24		sta $24,x			sta DStack+0,x
.a76d	95 25		sta $25,x			sta DStack+1,x
.a76f	60		rts				rts
=69					CL	.var *-(WordListLink+wh_Xt)
=$a770					en = *	; remember here
>a729	45					.byte CL	;wh_CodeLength
.a770					_Table:
>a770	5e e6 ff 7f				.word $e65e,$7fff	; "/COUNTED-STRING"
>a774	be 79 ff 00				.word $79BE,$ff		; "/HOLD"
>a778	b9 3c 54 00				.word $3cb9,padoffset	; "/PAD"
>a77c	8b 81 08 00				.word $818b,8		; "ADDRESS-UNIT-BITS"
>a780	57 fc 00 00				.word $fc57,0		; "FLOORED"	we have symmetric)
>a784	4f fb ff 00				.word $fb4f,$ff		; "MAX-CHAR"
>a788	56 7f ff 7f				.word $7f56,$7fff	; "MAX-N"
>a78c	5d 7f ff ff				.word $7f5d,$ffff	; "MAX-U"
>a790	38 ce 80 00				.word $ce38,$80		; "RETURN-STACK-CELLS"
>a794	f2 c0 14 00				.word $c0f2,DStack0/2	; "STACK-CELLS"
>a798	36 e3 09 00				.word $e336,9		; "WORDLISTS"
>a79c	01 99 0a 00				.word $9901,FDim	; "FLOATING-STACK"	n	yes	   If n = zero, floating-point numbers are
=48					_table_dbl = *-_Table	; These return a double-cell number
>a7a0	4c 7f ff ff ff 7f			.word $7f4c,$ffff,$7fff	; "MAX-D"
>a7a6	fe fe ff ff ff ff			.word $fefe,$ffff,$ffff	; "MAX-UD"
>a7ac	00					.byte 0		; end of list
>a7ad	42 65 6c 6c			L1:	.text "Bell"	;  name of word as a string, ending at wh_NameLastChar
>a7b1	84					.byte (("Bell"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a7b2	a6 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a7b4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a7b5	08					.byte NN	;wh_Flags	dictionary flags
=42801					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a7b6	a9 07		lda #$07	Bell:		lda #7		; ASCII value for BELL
.a7b8	4c 5e cd	jmp $cd5e			jmp Emit_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$a7bb					en = *	; remember here
>a7b4	05					.byte CL	;wh_CodeLength
>a7bb	44 75 6d 70			L1:	.text "Dump"	;  name of word as a string, ending at wh_NameLastChar
>a7bf	04					.byte (("Dump"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a7c0	31 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a7c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a7c3	18					.byte UF+NN	;wh_Flags	dictionary flags
=42815					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a7c4					Dump:
.a7c4	20 d9 b3	jsr $b3d9			jsr underflow_2
.a7c7	ca		dex				dex			; alloc work area
.a7c8	ca		dex				dex
.a7c9					_row:
.a7c9	20 d7 aa	jsr $aad7			jsr CR
.a7cc	b5 29		lda $29,x			lda DStack+5,x		; print address number
.a7ce	20 4d a8	jsr $a84d			jsr C_Dot_Hex_A
.a7d1	b5 28		lda $28,x			lda DStack+4,x
.a7d3	20 4d a8	jsr $a84d			jsr C_Dot_Hex_A
.a7d6	20 6b cd	jsr $cd6b			jsr Space
.a7d9	20 6b cd	jsr $cd6b			jsr Space
.a7dc	a9 00		lda #$00			lda #0
.a7de	95 24		sta $24,x			sta DStack+0,x
.a7e0					_loop:
.a7e0	b5 26		lda $26,x			lda DStack+2,x
.a7e2	15 27		ora $27,x			ora DStack+3,x
.a7e4	f0 36		beq $a81c			beq _all_printed
.a7e6	a1 28		lda ($28,x)			lda (DStack+4,x)
.a7e8	20 4d a8	jsr $a84d			jsr C_Dot_Hex_A
.a7eb	20 6b cd	jsr $cd6b			jsr Space
.a7ee	a1 28		lda ($28,x)			lda (DStack+4,x)
.a7f0	20 74 a8	jsr $a874			jsr is_printable
.a7f3	b0 02		bcs $a7f7			bcs _printable
.a7f5	a9 2e		lda #$2e			lda #'.'		 ; Print dot if not printable
.a7f7					_printable:
.a7f7	b4 24		ldy $24,x			ldy DStack+0,x
.a7f9	91 00		sta ($00),y			sta (cp),y
.a7fb	c0 07		cpy #$07			cpy #7
.a7fd	d0 03		bne $a802			bne +
.a7ff	20 6b cd	jsr $cd6b			jsr Space
.a802					+
.a802	f6 28		inc $28,x			inc DStack+4,x
.a804	d0 02		bne $a808			bne +
.a806	f6 29		inc $29,x			inc DStack+5,x
.a808					+
.a808	20 cc c9	jsr $c9cc			jsr NOS_One_Minus	; loop counter
.a80b	f6 24		inc $24,x			inc DStack+0,x
.a80d	b5 24		lda $24,x			lda DStack+0,x
.a80f	c9 10		cmp #$10			cmp #16
.a811	90 cd		bcc $a7e0			bcc _loop		; next byte
.a813	20 6b cd	jsr $cd6b			jsr Space
.a816	20 2b a8	jsr $a82b			jsr dump_print_ascii
.a819	4c c9 a7	jmp $a7c9			jmp _row		; new row
.a81c					_all_printed:
.a81c	b5 24		lda $24,x			lda DStack+0,x
.a81e	f0 06		beq $a826			beq _done
.a820	20 6b cd	jsr $cd6b			jsr Space
.a823	20 2b a8	jsr $a82b			jsr dump_print_ascii
.a826					_done:
.a826	e8		inx				inx			; drop work area
.a827	e8		inx				inx
.a828	4c b1 c4	jmp $c4b1			jmp Two_drop		; one byte less than 4x INX
=103					CL	.var *-(WordListLink+wh_Xt)
=$a82b					en = *	; remember here
>a7c2	67					.byte CL	;wh_CodeLength
.a82b					dump_print_ascii:
.a82b	a0 00		ldy #$00			ldy #0
.a82d					_loop:
.a82d	b1 00		lda ($00),y			lda (cp),y
.a82f	20 5e cd	jsr $cd5e			jsr Emit_A
.a832	c8		iny				iny
.a833	c0 08		cpy #$08			cpy #8
.a835	d0 03		bne $a83a			bne +
.a837	20 6b cd	jsr $cd6b			jsr Space
.a83a					+
.a83a	98		tya				tya
.a83b	d5 24		cmp $24,x			cmp DStack+0,x
.a83d	90 ee		bcc $a82d			bcc _loop
.a83f	60		rts				rts
>a840	43 2e 48 65 78			L1:	.text "C.Hex"	;  name of word as a string, ending at wh_NameLastChar
>a845	05					.byte (("C.Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a846	3f a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a848	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a849	08					.byte NN	;wh_Flags	dictionary flags
=42949					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a84a	20 7e b3	jsr $b37e	C_Dot_Hex:	jsr PopA
.a84d					C_Dot_Hex_A:
.a84d	48		pha		                pha
.a84e	4a		lsr a				lsr		; convert high nibble first
.a84f	4a		lsr a				lsr
.a850	4a		lsr a				lsr
.a851	4a		lsr a				lsr
.a852	20 56 a8	jsr $a856			jsr _nibble_to_ascii
.a855	68		pla				pla
.a856					_nibble_to_ascii:
.a856	29 0f		and #$0f			and #$0F	; only use lower nibble
.a858	c9 0a		cmp #$0a			cmp #9+1
.a85a	90 02		bcc $a85e			bcc +
.a85c	69 06		adc #$06			adc #6
.a85e	69 30		adc #$30	+		adc #'0'
.a860	4c 5e cd	jmp $cd5e			jmp Emit_A
>a863	2e 48 65 78			L1:	.text ".Hex"	;  name of word as a string, ending at wh_NameLastChar
>a867	04					.byte ((".Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a868	c5 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a86a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a86b	08					.byte NN	;wh_Flags	dictionary flags
=42983					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a86c	b5 25		lda $25,x	Dot_Hex:	lda DStack+1,x	; do hi byte
.a86e	20 4d a8	jsr $a84d			jsr C_Dot_Hex_A
.a871	4c 4a a8	jmp $a84a			jmp C_Dot_Hex	; do lo byte
.a874					is_printable:
.a874	c9 20		cmp #$20	                cmp #AscSP              ; $20
.a876	90 07		bcc $a87f	                bcc _done
.a878	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.a87a	b0 02		bcs $a87e	                bcs _failed
.a87c	38		sec		                sec
.a87d	60		rts		                rts
.a87e	18		clc		_failed:	clc
.a87f	60		rts		_done:		rts
>a880	2e 53				L1:	.text ".S"	;  name of word as a string, ending at wh_NameLastChar
>a882	62					.byte ((".S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a883	e7 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a885	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a886	08					.byte NN	;wh_Flags	dictionary flags
=43010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a887					Dot_s:
.a887	a9 3c		lda #$3c			lda #'<'
.a889	20 5e cd	jsr $cd5e			jsr Emit_A
.a88c	20 ee c1	jsr $c1ee			jsr Depth	; ( -- u )
.a88f	20 b9 cb	jsr $cbb9			jsr print_u
.a892	a9 3e		lda #$3e			lda #'>'
.a894	20 5e cd	jsr $cd5e			jsr Emit_A
.a897	20 6b cd	jsr $cd6b			jsr Space
.a89a	a0 28		ldy #$28			ldy #DStack0		; for each cell on the stack
.a89c	88		dey		_loop:		dey
.a89d	88		dey				dey
.a89e	86 14		stx $14				stx tmp1
.a8a0	c4 14		cpy $14				cpy tmp1
.a8a2	90 15		bcc $a8b9			bcc _done
.a8a4	98		tya				tya			; save index
.a8a5	48		pha				pha
.a8a6	ca		dex				dex			; push stack[index]
.a8a7	ca		dex				dex
.a8a8	b9 24 00	lda $0024,y			lda DStack+0,y
.a8ab	95 24		sta $24,x			sta DStack+0,x
.a8ad	b9 25 00	lda $0025,y			lda DStack+1,y
.a8b0	95 25		sta $25,x			sta DStack+1,x
.a8b2	20 6c cb	jsr $cb6c			jsr Dot
.a8b5	68		pla				pla			; restore index
.a8b6	a8		tay				tay
.a8b7	d0 e3		bne $a89c			bne _loop
.a8b9					_done:
=50					CL	.var *-(WordListLink+wh_Xt)
=$a8b9					en = *	; remember here
>a885	32					.byte CL	;wh_CodeLength
.a8b9	60		rts				rts
>a8ba	43 6f 6d 70 61 72 65		L1:	.text "Compare"	;  name of word as a string, ending at wh_NameLastChar
>a8c1	a7					.byte (("Compare"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a8c2	02 a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a8c4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a8c5	18					.byte UF+NN	;wh_Flags	dictionary flags
=43073					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a8c6					Compare:
.a8c6	20 e3 b3	jsr $b3e3			jsr underflow_4
.a8c9	b5 24		lda $24,x			lda DStack+0,x		; tmp3+1= u2.lo
.a8cb	85 19		sta $19				sta tmp3+1
.a8cd	b5 26		lda $26,x			lda DStack+2,x		; tmp2= addr2
.a8cf	b4 27		ldy $27,x			ldy DStack+3,x
.a8d1	85 16		sta $16				sta tmp2+0
.a8d3	84 17		sty $17				sty tmp2+1
.a8d5	b5 28		lda $28,x			lda DStack+4,x		; tmp3+0= u1.lo
.a8d7	85 18		sta $18				sta tmp3+0
.a8d9	b5 2a		lda $2a,x			lda DStack+6,x		; tmp1= addr1
.a8db	b4 2b		ldy $2b,x			ldy DStack+7,x
.a8dd	85 14		sta $14				sta tmp1+0
.a8df	84 15		sty $15				sty tmp1+1
.a8e1	a0 00		ldy #$00			ldy #0		; for each char
.a8e3					_loop:
.a8e3	c4 18		cpy $18				cpy tmp3+0	; string1 empty?
.a8e5	f0 13		beq $a8fa			beq _str1
.a8e7					_L1:
.a8e7	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a8e9	f0 27		beq $a912			beq _str2
.a8eb					_L2:
.a8eb	b1 14		lda ($14),y			lda (tmp1),y	; Are they different?
.a8ed	d1 16		cmp ($16),y			cmp (tmp2),y
.a8ef	d0 19		bne $a90a			bne _neq
.a8f1	c8		iny				iny		; to next char
.a8f2	d0 ef		bne $a8e3			bne _loop
.a8f4	e6 15		inc $15				inc tmp1+1	; to next page
.a8f6	e6 17		inc $17				inc tmp2+1
.a8f8	d0 e9		bne $a8e3			bne _loop
.a8fa	d6 29		dec $29,x	_str1:		dec DStack+5,x	; string1 really empty?
.a8fc	10 e9		bpl $a8e7			bpl _L1
.a8fe	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a900	d0 0a		bne $a90c			bne _less
.a902	b5 25		lda $25,x			lda DStack+1,x
.a904	d0 06		bne $a90c			bne _less
.a906	a9 00		lda #$00	_equal:		lda #0		; Return 0
.a908	f0 0e		beq $a918			beq _gt2
.a90a	b0 0a		bcs $a916	_neq:		bcs _greater
.a90c	a9 ff		lda #$ff	_less:		lda #$FF	; Return -1
.a90e	95 2a		sta $2a,x			sta DStack+6,x
.a910	d0 0a		bne $a91c			bne _done
.a912	d6 25		dec $25,x	_str2:		dec DStack+1,x	; is string2 empty?
.a914	10 d5		bpl $a8eb			bpl _L2
.a916	a9 01		lda #$01	_greater:	lda #1		; Return 1
.a918	95 2a		sta $2a,x	_gt2:		sta DStack+6,x
.a91a	a9 00		lda #$00			lda #0
.a91c	95 2b		sta $2b,x	_done:		sta DStack+7,x
.a91e	8a		txa				txa		; Remove all but the result from the stack.
.a91f	18		clc				clc
.a920	69 06		adc #$06			adc #6
.a922	aa		tax				tax
=93					CL	.var *-(WordListLink+wh_Xt)
=$a923					en = *	; remember here
>a8c4	5d					.byte CL	;wh_CodeLength
.a923	60		rts				rts
>a924	53 65 61 72 63 68		L1:	.text "Search"	;  name of word as a string, ending at wh_NameLastChar
>a92a	06					.byte (("Search"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a92b	41 a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a92d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a92e	18					.byte UF+NN	;wh_Flags	dictionary flags
=43178					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a92f					Search:
.a92f	20 e3 b3	jsr $b3e3			jsr underflow_4
.a932	b5 24		lda $24,x			lda DStack+0,x
.a934	15 25		ora $25,x			ora DStack+1,x
.a936	d0 09		bne $a941			bne _start_search
.a938	e8		inx				inx		; Drop u2
.a939	e8		inx				inx
.a93a	a9 ff		lda #$ff			lda #$FF	; overwrite addr2 with a true flag
.a93c	95 24		sta $24,x			sta DStack+0,x
.a93e	95 25		sta $25,x			sta DStack+1,x
.a940	60		rts				rts
.a941					_start_search:
.a941	20 a5 b7	jsr $b7a5			jsr Zero
.a944					_search_loop:
.a944	18		clc				clc
.a945	b5 24		lda $24,x			lda DStack+0,x
.a947	75 26		adc $26,x			adc DStack+2,x
.a949	85 14		sta $14				sta tmp1+0
.a94b	b5 25		lda $25,x			lda DStack+1,x
.a94d	75 27		adc $27,x			adc DStack+3,x
.a94f	85 15		sta $15				sta tmp1+1
.a951	d5 2b		cmp $2b,x			cmp DStack+7,x
.a953	90 13		bcc $a968			bcc _init_comparison ; Obviously less
.a955	d0 06		bne $a95d			bne _not_found
.a957	b5 2a		lda $2a,x			lda DStack+6,x
.a959	c5 14		cmp $14				cmp tmp1
.a95b	b0 0b		bcs $a968			bcs _init_comparison
.a95d					_not_found:
.a95d	e8		inx				inx		; Remove offset
.a95e	e8		inx				inx
.a95f	e8		inx				inx		; Remove u2
.a960	e8		inx				inx
.a961	a9 00		lda #$00			lda #0
.a963	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a false flag
.a965	95 25		sta $25,x			sta DStack+1,x
.a967	60		rts				rts
.a968					_init_comparison:
.a968	18		clc				clc
.a969	b5 2c		lda $2c,x			lda DStack+8,x
.a96b	75 24		adc $24,x			adc DStack+0,x
.a96d	85 14		sta $14				sta tmp1
.a96f	b5 2d		lda $2d,x			lda DStack+9,x
.a971	75 25		adc $25,x			adc DStack+1,x
.a973	85 15		sta $15				sta tmp1+1
.a975	b5 28		lda $28,x			lda DStack+4,x
.a977	85 16		sta $16				sta tmp2
.a979	b5 29		lda $29,x			lda DStack+5,x
.a97b	85 17		sta $17				sta tmp2+1
.a97d	b5 26		lda $26,x			lda DStack+2,x
.a97f	85 18		sta $18				sta tmp3+0
.a981	b5 27		lda $27,x			lda DStack+3,x
.a983	85 19		sta $19				sta tmp3+1
.a985					_comparison_loop:
.a985	a0 00		ldy #$00			ldy #0
.a987	b1 14		lda ($14),y			lda (tmp1),y
.a989	d1 16		cmp ($16),y			cmp (tmp2),y
.a98b	f0 06		beq $a993			beq _letters_match
.a98d	20 e6 c9	jsr $c9e6			jsr One_plus
.a990	4c 44 a9	jmp $a944			jmp _search_loop
.a993					_letters_match:
.a993	e6 14		inc $14				inc tmp1
.a995	d0 02		bne $a999			bne +
.a997	e6 15		inc $15				inc tmp1+1
.a999					+
.a999	e6 16		inc $16				inc tmp2
.a99b	d0 02		bne $a99f			bne +
.a99d	e6 17		inc $17				inc tmp2+1
.a99f					+
.a99f	a5 18		lda $18				lda tmp3
.a9a1	d0 02		bne $a9a5			bne +
.a9a3	c6 19		dec $19				dec tmp3+1
.a9a5					+
.a9a5	c6 18		dec $18				dec tmp3
.a9a7	a5 18		lda $18				lda tmp3
.a9a9	05 19		ora $19				ora tmp3+1
.a9ab	d0 d8		bne $a985			bne _comparison_loop ; Check the next letter
.a9ad	18		clc				clc
.a9ae	b5 24		lda $24,x			lda DStack+0,x
.a9b0	75 2c		adc $2c,x			adc DStack+8,x
.a9b2	95 2c		sta $2c,x			sta DStack+8,x
.a9b4	b5 25		lda $25,x			lda DStack+1,x
.a9b6	75 2d		adc $2d,x			adc DStack+9,x
.a9b8	95 2d		sta $2d,x			sta DStack+9,x
.a9ba	38		sec				sec
.a9bb	b5 2a		lda $2a,x			lda DStack+6,x
.a9bd	f5 24		sbc $24,x			sbc DStack+0,x
.a9bf	95 2a		sta $2a,x			sta DStack+6,x
.a9c1	b5 2b		lda $2b,x			lda DStack+7,x
.a9c3	f5 25		sbc $25,x			sbc DStack+1,x
.a9c5	95 2b		sta $2b,x			sta DStack+7,x
.a9c7	e8		inx				inx		; drop offset
.a9c8	e8		inx				inx
.a9c9	e8		inx				inx		; drop u2
.a9ca	e8		inx				inx
.a9cb	a9 ff		lda #$ff			lda #$FF
.a9cd	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a true flag.
.a9cf	95 25		sta $25,x			sta DStack+1,x
=162					CL	.var *-(WordListLink+wh_Xt)
=$a9d1					en = *	; remember here
>a92d	a2					.byte CL	;wh_CodeLength
.a9d1	60		rts				rts
>a9d2	4d 61 72 6b 65 72		L1:	.text "Marker"	;  name of word as a string, ending at wh_NameLastChar
>a9d8	46					.byte (("Marker"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a9d9	aa a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9dc	0c					.byte IM+NN	;wh_Flags	dictionary flags
=43352					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9dd					Marker:
.a9dd	20 b2 c9	jsr $c9b2			jsr Here		; Save original CP, which
.a9e0	20 e0 c0	jsr $c0e0			jsr Header_Build	; compile a word header, but don't link into wordlist
.a9e3	a0 a9		ldy #$a9			ldy #>_runtime		; compile JSR _runtime
.a9e5	a9 fd		lda #$fd			lda #<_runtime
.a9e7	20 ce cc	jsr $ccce			jsr Jsr_Comma_YA
.a9ea	20 a6 cc	jsr $cca6			jsr Comma		; Append original CP
.a9ed	a0 00		ldy #$00			ldy #0			; Start at CURRENT
.a9ef	b9 10 03	lda $0310,y	_loop:		lda CurrentV,y
.a9f2	20 8f cc	jsr $cc8f			jsr C_Comma_A
.a9f5	c8		iny				iny
.a9f6	c0 24		cpy #$24			cpy #MarkEnd-CurrentV	; One past the end of the search order.
.a9f8	90 f5		bcc $a9ef			bcc _loop
.a9fa	4c d5 c0	jmp $c0d5			jmp Header_Link		; link built header into current dictionary
=32					CL	.var *-(WordListLink+wh_Xt)
=$a9fd					en = *	; remember here
>a9db	20					.byte CL	;wh_CodeLength
.a9fd					_runtime:
.a9fd	68		pla				pla		; Pop the RTS address off the stack
.a9fe	85 14		sta $14				sta tmp1+0
.aa00	68		pla				pla
.aa01	85 15		sta $15				sta tmp1+1
.aa03	a0 01		ldy #$01			ldy #1		; start just aftet JSR _runtime
.aa05	b1 14		lda ($14),y			lda (tmp1),y	; CP was stored first
.aa07	85 00		sta $00				sta cp+0
.aa09	c8		iny				iny
.aa0a	b1 14		lda ($14),y			lda (tmp1),y
.aa0c	85 01		sta $01				sta cp+1
.aa0e	c8		iny				iny
.aa0f					_rloop:
.aa0f	b1 14		lda ($14),y			lda (tmp1),y
.aa11	99 0d 03	sta $030d,y			sta CurrentV-2-1,y
.aa14	c8		iny				iny
.aa15	c0 27		cpy #$27			cpy #MarkEnd-CurrentV+2+1 ; One past the end of the search order.
.aa17	90 f6		bcc $aa0f			bcc _rloop
.aa19	60		rts				rts
>aa1a	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
>aa1f	65					.byte (("Words"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aa20	58 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa22	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa23	08					.byte NN	;wh_Flags	dictionary flags
=43423					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa24					Words:
.aa24	a9 ff		lda #$ff			lda #$ff
.aa26	20 96 b7	jsr $b796			jsr PushZA		; Alloc space for line size & wordlist #
.aa29	ca		dex				dex			; Alloc space for a nt
.aa2a	ca		dex				dex
.aa2b					_wordlist_next:
.aa2b	20 d7 aa	jsr $aad7			jsr CR			; start wordlist on new line
.aa2e	f6 26		inc $26,x			inc DStack+2,x		; step to next search wordlist
.aa30	b4 26		ldy $26,x			ldy DStack+2,x		; Y= wordlist index
.aa32	cc 2a 03	cpy $032a			cpy Num_OrderV
.aa35	b0 44		bcs $aa7b			bcs _wordslist_done	; ran out of search wordlist entries?
.aa37	b9 2b 03	lda $032b,y			lda Search_OrderV,y	; A= SEARCH-ORDER[Y]	Get the current wordlist id
.aa3a	0a		asl a				asl			; TOS= WORDLISTS[A]
.aa3b	a8		tay				tay
.aa3c	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.aa3f	95 24		sta $24,x			sta DStack+0,x
.aa41	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.aa44	95 25		sta $25,x			sta DStack+1,x
.aa46	f0 e3		beq $aa2b			beq _wordlist_next	; end of list?
.aa48					_word_loop:
.aa48	20 f0 ce	jsr $cef0			jsr Dup			; ( wordlist# nt nt )
.aa4b	20 a4 bd	jsr $bda4			jsr Name_To_String	; ( wordlist# nt addr u )
.aa4e	b5 2b		lda $2b,x			lda DStack+7,x
.aa50	38		sec				sec			; don't forget the space between words
.aa51	75 24		adc $24,x			adc DStack+0,x
.aa53	c9 4e		cmp #$4e			cmp #MAX_LINE_LENGTH-1
.aa55	90 05		bcc $aa5c			bcc +
.aa57	20 d7 aa	jsr $aad7			jsr CR
.aa5a	b5 24		lda $24,x			lda DStack+0,x		; After going to next line, start
.aa5c	95 2b		sta $2b,x	+		sta DStack+7,x
.aa5e	20 78 cd	jsr $cd78			jsr Type		; ( wordlist# nt )
.aa61	20 6b cd	jsr $cd6b			jsr Space
.aa64	b5 24		lda $24,x			lda DStack+0,x
.aa66	85 14		sta $14				sta tmp1+0
.aa68	b5 25		lda $25,x			lda DStack+1,x
.aa6a	85 15		sta $15				sta tmp1+1
.aa6c	a0 81		ldy #$81			ldy #wh_WordListLink	; get next word nt
.aa6e	b1 14		lda ($14),y			lda (tmp1),y
.aa70	95 24		sta $24,x			sta DStack+0,x
.aa72	c8		iny				iny
.aa73	b1 14		lda ($14),y			lda (tmp1),y
.aa75	95 25		sta $25,x			sta DStack+1,x
.aa77	d0 cf		bne $aa48			bne _word_loop		; end of list?
.aa79	f0 b0		beq $aa2b			beq _wordlist_next
.aa7b					_wordslist_done:
.aa7b	4c b1 c4	jmp $c4b1			jmp Two_Drop
=90					CL	.var *-(WordListLink+wh_Xt)
=$aa7e					en = *	; remember here
>aa22	5a					.byte CL	;wh_CodeLength
>aa7e	57 6f 72 64 53 69 7a 65		L1:	.text "WordSize"	;  name of word as a string, ending at wh_NameLastChar
>aa86	a8					.byte (("WordSize"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aa87	9f a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa89	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa8a	08					.byte NN	;wh_Flags	dictionary flags
=43526					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa8b	20 a5 b3	jsr $b3a5	WordSize:	jsr PopTmp1
.aa8e	a0 83		ldy #$83			ldy #Wh_CodeLength
.aa90	b1 14		lda ($14),y			lda (tmp1),y
.aa92	4c 96 b7	jmp $b796			jmp PushZA
=10					CL	.var *-(WordListLink+wh_Xt)
=$aa95					en = *	; remember here
>aa89	0a					.byte CL	;wh_CodeLength
>aa95	41 6c 69 67 6e 65 64		L1:	.text "Aligned"	;  name of word as a string, ending at wh_NameLastChar
>aa9c	87					.byte (("Aligned"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aa9d	06 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa9f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aaa0	00					.byte 0	;wh_Flags	dictionary flags
=43548					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aaa1					Aligned:
=0					CL	.var *-(WordListLink+wh_Xt)
=$aaa1					en = *	; remember here
>aa9f	00					.byte CL	;wh_CodeLength
.aaa1	60		rts				rts
>aaa2	41 6c 69 67 6e			L1:	.text "Align"	;  name of word as a string, ending at wh_NameLastChar
>aaa7	c5					.byte (("Align"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aaa8	1c aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aaaa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aaab	00					.byte 0	;wh_Flags	dictionary flags
=43559					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aaac					Align:
=0					CL	.var *-(WordListLink+wh_Xt)
=$aaac					en = *	; remember here
>aaaa	00					.byte CL	;wh_CodeLength
.aaac	60		rts				rts
>aaad	4f 75 74 70 75 74		L1:	.text "Output"	;  name of word as a string, ending at wh_NameLastChar
>aab3	86					.byte (("Output"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aab4	27 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aab6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aab7	08					.byte NN	;wh_Flags	dictionary flags
=43571					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aab8					xt_output:
.aab8	a0 03		ldy #$03			ldy #>output
.aaba	a9 06		lda #$06			lda #<output
.aabc	4c 54 b7	jmp $b754			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$aabf					en = *	; remember here
>aab6	07					.byte CL	;wh_CodeLength
>aabf	49 6e 70 75 74			L1:	.text "Input"	;  name of word as a string, ending at wh_NameLastChar
>aac4	85					.byte (("Input"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aac5	33 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aac7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aac8	08					.byte NN	;wh_Flags	dictionary flags
=43588					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aac9	a0 03		ldy #$03	xt_input:	ldy #>input
.aacb	a9 08		lda #$08			lda #<input
.aacd	4c 54 b7	jmp $b754			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$aad0					en = *	; remember here
>aac7	07					.byte CL	;wh_CodeLength
>aad0	43 52				L1:	.text "CR"	;  name of word as a string, ending at wh_NameLastChar
>aad2	42					.byte (("CR"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aad3	44 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aad5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aad6	08					.byte NN	;wh_Flags	dictionary flags
=43602					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aad7					CR:
.aad7	a9 0a		lda #$0a			lda #AscLF
.aad9	20 5e cd	jsr $cd5e			jsr Emit_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$aadc					en = *	; remember here
>aad5	05					.byte CL	;wh_CodeLength
.aadc	60		rts				rts
>aadd	50 61 67 65			L1:	.text "Page"	;  name of word as a string, ending at wh_NameLastChar
>aae1	a4					.byte (("Page"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aae2	52 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aae4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aae5	08					.byte NN	;wh_Flags	dictionary flags
=43617					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aae6	20 75 b8	jsr $b875	Page:		jsr SLiteral_Runtime
.aae9	4c f6 aa	jmp $aaf6			  jmp +
>aaec	1b 5b 32 4a					  .text AscESC,"[2J"	; ANSI clear screen
>aaf0	1b 5b 31 3b 31 48				  .text AscESC,"[1;1H"	; move cursor to top left of screen
.aaf6	4c 78 cd	jmp $cd78	+		jmp Type
=19					CL	.var *-(WordListLink+wh_Xt)
=$aaf9					en = *	; remember here
>aae4	13					.byte CL	;wh_CodeLength
>aaf9	41 74 2d 58 59			L1:	.text "At-XY"	;  name of word as a string, ending at wh_NameLastChar
>aafe	25					.byte (("At-XY"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aaff	61 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab01	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab02	18					.byte UF+NN	;wh_Flags	dictionary flags
=43646					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab03					At_XY:
.ab03	20 d9 b3	jsr $b3d9			jsr underflow_2
.ab06	ad 00 03	lda $0300			lda base	; Save the BASE
.ab09	48		pha				pha
.ab0a	20 53 b1	jsr $b153			jsr Decimal	; ANSI escape code values need to be in decimal.
.ab0d	a9 1b		lda #$1b			lda #AscESC
.ab0f	20 5e cd	jsr $cd5e			jsr Emit_A
.ab12	a9 5b		lda #$5b			lda #'['
.ab14	20 5e cd	jsr $cd5e			jsr Emit_A
.ab17	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.ab19	20 b9 cb	jsr $cbb9			jsr print_u
.ab1c	a9 3b		lda #$3b			lda #';'
.ab1e	20 5e cd	jsr $cd5e			jsr Emit_A
.ab21	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.ab23	20 b9 cb	jsr $cbb9			jsr print_u
.ab26	a9 48		lda #$48			lda #'H'
.ab28	20 5e cd	jsr $cd5e			jsr Emit_A
.ab2b	68		pla				pla		; Restore the base
.ab2c	8d 00 03	sta $0300			sta base
=44					CL	.var *-(WordListLink+wh_Xt)
=$ab2f					en = *	; remember here
>ab01	2c					.byte CL	;wh_CodeLength
.ab2f	60		rts				rts
>ab30	50 61 64			L1:	.text "Pad"	;  name of word as a string, ending at wh_NameLastChar
>ab33	83					.byte (("Pad"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab34	7e aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab36	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab37	00					.byte 0	;wh_Flags	dictionary flags
=43699					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab38	ca		dex		Pad:		dex		; push cp+PadOffset
.ab39	ca		dex				dex
.ab3a	18		clc				clc
.ab3b	a5 00		lda $00				lda cp+0
.ab3d	69 54		adc #$54			adc #PadOffset
.ab3f	95 24		sta $24,x			sta DStack+0,x
.ab41	a5 01		lda $01				lda cp+1
.ab43	69 00		adc #$00			adc #0
.ab45	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$ab47					en = *	; remember here
>ab36	0f					.byte CL	;wh_CodeLength
.ab47	60		rts				rts
>ab48	3c 23				L1:	.text "<#"	;  name of word as a string, ending at wh_NameLastChar
>ab4a	62					.byte (("<#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab4b	b3 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab4d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab4e	00					.byte 0	;wh_Flags	dictionary flags
=43722					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab4f					Less_Number_Sign:
.ab4f	a9 54		lda #$54			lda #PadOffset		; init hold buffer index
.ab51	8d 34 03	sta $0334			sta ToHold
=5					CL	.var *-(WordListLink+wh_Xt)
=$ab54					en = *	; remember here
>ab4d	05					.byte CL	;wh_CodeLength
.ab54	60		rts				rts
>ab55	23 3e				L1:	.text "#>"	;  name of word as a string, ending at wh_NameLastChar
>ab57	c2					.byte (("#>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab58	ca aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab5a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab5b	10					.byte UF	;wh_Flags	dictionary flags
=43735					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab5c					Number_Sign_Greater:
.ab5c	20 d9 b3	jsr $b3d9			jsr underflow_2		; double number
.ab5f	18		clc				clc			; addr= cp + ToHold
.ab60	a5 00		lda $00				lda cp+0
.ab62	6d 34 03	adc $0334			adc ToHold
.ab65	95 26		sta $26,x			sta DStack+2,x
.ab67	a5 01		lda $01				lda cp+1
.ab69	69 00		adc #$00			adc #0
.ab6b	95 27		sta $27,x			sta DStack+3,x
.ab6d	38		sec				sec			; u= PadOffset - ToHold
.ab6e	a9 54		lda #$54			lda #PadOffset
.ab70	ed 34 03	sbc $0334			sbc ToHold
.ab73	95 24		sta $24,x			sta DStack+0,x
.ab75	a9 00		lda #$00			lda #0
.ab77	95 25		sta $25,x			sta DStack+1,x
=29					CL	.var *-(WordListLink+wh_Xt)
=$ab79					en = *	; remember here
>ab5a	1d					.byte CL	;wh_CodeLength
.ab79	60		rts				rts
>ab7a	48 6f 6c 64			L1:	.text "Hold"	;  name of word as a string, ending at wh_NameLastChar
>ab7e	84					.byte (("Hold"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab7f	d7 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab81	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab82	00					.byte 0	;wh_Flags	dictionary flags
=43774					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab83	20 7e b3	jsr $b37e	Hold:		jsr PopA
.ab86	ce 34 03	dec $0334	Hold_A:		dec ToHold
.ab89	ac 34 03	ldy $0334			ldy ToHold
.ab8c	91 00		sta ($00),y			sta (cp),y
=11					CL	.var *-(WordListLink+wh_Xt)
=$ab8e					en = *	; remember here
>ab81	0b					.byte CL	;wh_CodeLength
.ab8e	60		rts				rts
>ab8f	23				L1:	.text "#"	;  name of word as a string, ending at wh_NameLastChar
>ab90	61					.byte (("#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab91	fe aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab93	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab94	18					.byte UF+NN	;wh_Flags	dictionary flags
=43792					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab95					Number_Sign:
.ab95	20 d9 b3	jsr $b3d9			jsr underflow_2		; double number
.ab98	a9 00		lda #$00			lda #0			;   init remainder
.ab9a	18		clc				clc
.ab9b	a0 21		ldy #$21			ldy #32+1		;   for each bit
.ab9d					_11:
.ab9d	2a		rol a				rol a			;   shift remainder
.ab9e	cd 00 03	cmp $0300			cmp base		;   will it fit?
.aba1	90 03		bcc $aba6			bcc _27
.aba3	ed 00 03	sbc $0300			sbc base
.aba6					_27:
.aba6	36 26		rol $26,x			rol DStack+2,x		;   shift ud
.aba8	36 27		rol $27,x			rol DStack+3,x
.abaa	36 24		rol $24,x			rol DStack+0,x
.abac	36 25		rol $25,x			rol DStack+1,x
.abae	88		dey				dey
.abaf	d0 ec		bne $ab9d			bne _11
.abb1	c9 0a		cmp #$0a			cmp #9+1		; alternatively this could use s_abc_upper
.abb3	90 02		bcc $abb7			bcc +
.abb5	69 06		adc #$06			adc #7-1
.abb7	69 30		adc #$30	+		adc #'0'
.abb9	d0 cb		bne $ab86			bne Hold_A
=38					CL	.var *-(WordListLink+wh_Xt)
=$abbb					en = *	; remember here
>ab93	26					.byte CL	;wh_CodeLength
>abbb	23 53				L1:	.text "#S"	;  name of word as a string, ending at wh_NameLastChar
>abbd	62					.byte (("#S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>abbe	10 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abc0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abc1	10					.byte UF	;wh_Flags	dictionary flags
=43837					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abc2					Number_Sign_S:
.abc2					_loop:
.abc2	20 95 ab	jsr $ab95			jsr Number_sign	; convert a single number ("#")
.abc5	b5 24		lda $24,x			lda DStack+0,x	; stop when double-celled number in TOS is zero
.abc7	15 25		ora $25,x			ora DStack+1,x
.abc9	15 26		ora $26,x			ora DStack+2,x
.abcb	15 27		ora $27,x			ora DStack+3,x
.abcd	d0 f3		bne $abc2			bne _loop
=13					CL	.var *-(WordListLink+wh_Xt)
=$abcf					en = *	; remember here
>abc0	0d					.byte CL	;wh_CodeLength
.abcf	60		rts				rts
>abd0	53 69 67 6e			L1:	.text "Sign"	;  name of word as a string, ending at wh_NameLastChar
>abd4	c4					.byte (("Sign"[-1]&7)<<5)+(*-L1)	;wh_HNL
>abd5	3d ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abd7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abd8	08					.byte NN	;wh_Flags	dictionary flags
=43860					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abd9	20 9a b3	jsr $b39a	Sign:		jsr PopYA
.abdc	98		tya				tya		; test MSB of TOS
.abdd					Sign_P:
.abdd	30 01		bmi $abe0			bmi _minus
.abdf	60		rts				rts
.abe0	a9 2d		lda #$2d	_minus:		lda #'-'	; add minus sign
.abe2	d0 a2		bne $ab86			bne hold_a
=11					CL	.var *-(WordListLink+wh_Xt)
=$abe4					en = *	; remember here
>abd7	0b					.byte CL	;wh_CodeLength
>abe4	43 6c 65 61 76 65		L1:	.text "Cleave"	;  name of word as a string, ending at wh_NameLastChar
>abea	a6					.byte (("Cleave"[-1]&7)<<5)+(*-L1)	;wh_HNL
>abeb	54 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abed	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abee	18					.byte UF+NN	;wh_Flags	dictionary flags
=43882					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abef					Cleave:
.abef	20 d9 b3	jsr $b3d9			jsr underflow_2
.abf2	20 5e c4	jsr $c45e			jsr Minus_leading	; -LEADING ( addr u )
.abf5	20 a3 c3	jsr $c3a3			jsr Input_To_R	; save old imput state
.abf8	b5 24		lda $24,x			lda DStack+0,x	; u is new ciblen
.abfa	85 06		sta $06				sta ciblen
.abfc	b5 25		lda $25,x			lda DStack+1,x
.abfe	85 07		sta $07				sta ciblen+1
.ac00	b5 26		lda $26,x			lda DStack+2,x	; addr is new cib
.ac02	85 04		sta $04				sta cib
.ac04	b5 27		lda $27,x			lda DStack+3,x
.ac06	85 05		sta $05				sta cib+1
.ac08	a9 00		lda #$00			lda #0
.ac0a	85 08		sta $08				sta toin	; >IN pointer is zero
.ac0c	85 09		sta $09				sta toin+1
.ac0e	20 45 ba	jsr $ba45			jsr parse_name	; ( addr u addr-s u-s )
.ac11	b5 24		lda $24,x			lda DStack+0,x
.ac13	15 25		ora $25,x			ora DStack+1,x
.ac15	f0 23		beq $ac3a			beq _done
.ac17	38		sec				sec
.ac18	b5 28		lda $28,x			lda DStack+4,x	; LSB of original u
.ac1a	f5 24		sbc $24,x			sbc DStack+0,x
.ac1c	95 28		sta $28,x			sta DStack+4,x
.ac1e	b5 29		lda $29,x			lda DStack+5,x	; MSB of original u
.ac20	f5 25		sbc $25,x			sbc DStack+1,x
.ac22	95 29		sta $29,x			sta DStack+5,x
.ac24	18		clc				clc
.ac25	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of original addr
.ac27	75 24		adc $24,x			adc DStack+0,x
.ac29	95 2a		sta $2a,x			sta DStack+6,x
.ac2b	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of original addr
.ac2d	75 25		adc $25,x			adc DStack+1,x
.ac2f	95 2b		sta $2b,x			sta DStack+7,x
.ac31	20 c3 c4	jsr $c4c3			jsr Two_swap		; ( addr-s u-s addr u )
.ac34	20 5e c4	jsr $c45e			jsr Minus_leading
.ac37	20 c3 c4	jsr $c4c3			jsr Two_swap		; ( addr u addr-s u-s )
.ac3a					_done:
.ac3a	20 c5 c3	jsr $c3c5			jsr R_To_Input
=78					CL	.var *-(WordListLink+wh_Xt)
=$ac3d					en = *	; remember here
>abed	4e					.byte CL	;wh_CodeLength
.ac3d	60		rts				rts
>ac3e	48 65 78 53 74 6f 72 65		L1:	.text "HexStore"	;  name of word as a string, ending at wh_NameLastChar
>ac46	a8					.byte (("HexStore"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ac47	6a ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac49	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac4a	18					.byte UF+NN	;wh_Flags	dictionary flags
=43974					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac4b					Hexstore:
.ac4b	20 de b3	jsr $b3de			jsr underflow_3
.ac4e	20 f0 ce	jsr $cef0			jsr Dup		; Save copy of original address
.ac51	20 c4 c5	jsr $c5c4			jsr Two_to_r		; ( addr1 u1 ) ( R: addr2 addr2 )
.ac54					_loop:
.ac54	b5 24		lda $24,x			lda DStack+0,x
.ac56	15 25		ora $25,x			ora DStack+1,x
.ac58	f0 37		beq $ac91			beq _done
.ac5a	20 ef ab	jsr $abef			jsr Cleave		; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.ac5d	20 c4 c5	jsr $c5c4			jsr Two_to_r
.ac60	20 a5 b7	jsr $b7a5			jsr Zero
.ac63	20 a5 b7	jsr $b7a5			jsr Zero
.ac66	20 9f c5	jsr $c59f			jsr Two_r_from	; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.ac69	20 d4 af	jsr $afd4			jsr To_Number	; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.ac6c	b5 24		lda $24,x			lda DStack+0,x
.ac6e	15 25		ora $25,x			ora DStack+1,x
.ac70	d0 18		bne $ac8a			bne _have_chars_left
.ac72	20 b1 c4	jsr $c4b1			jsr Two_drop		; ( addr1 u1 n n ) ( R: addr2 addr2 )
.ac75	20 de bf	jsr $bfde			jsr D_To_S		; ( addr1 u1 n ) ( R: addr2 addr2 )
.ac78	20 b0 ce	jsr $ceb0			jsr R_Fetch		; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.ac7b	20 06 cd	jsr $cd06			jsr C_Store		; ( addr1 u1 ) ( R: addr2 addr2 )
.ac7e	20 94 ce	jsr $ce94			jsr R_From		; R>
.ac81	20 e6 c9	jsr $c9e6			jsr One_plus		; 1+
.ac84	20 75 ce	jsr $ce75			jsr To_R		; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.ac87	4c 54 ac	jmp $ac54			jmp _loop
.ac8a					_have_chars_left:
.ac8a	8a		txa				txa
.ac8b	18		clc				clc
.ac8c	69 08		adc #$08			adc #8
.ac8e	aa		tax				tax
.ac8f	d0 c3		bne $ac54			bne _loop
.ac91					_done:
.ac91	e8		inx				inx
.ac92	e8		inx				inx
.ac93	e8		inx				inx
.ac94	e8		inx				inx			; 2DROP
.ac95	20 9f c5	jsr $c59f			jsr Two_r_from		; ( addr2+n addr2 )
.ac98	20 0e cf	jsr $cf0e			jsr Swap
.ac9b	4c 53 cb	jmp $cb53			jmp Minus		; ( n )
=83					CL	.var *-(WordListLink+wh_Xt)
=$ac9e					en = *	; remember here
>ac49	53					.byte CL	;wh_CodeLength
>ac9e	57 69 74 68 69 6e		L1:	.text "Within"	;  name of word as a string, ending at wh_NameLastChar
>aca4	c6					.byte (("Within"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aca5	c6 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aca7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aca8	18					.byte UF+NN	;wh_Flags	dictionary flags
=44068					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aca9					Within:
.aca9	20 de b3	jsr $b3de			jsr underflow_3
.acac	20 c7 ce	jsr $cec7			jsr Over
.acaf	20 53 cb	jsr $cb53			jsr Minus
.acb2	20 75 ce	jsr $ce75			jsr To_R
.acb5	20 53 cb	jsr $cb53			jsr Minus
.acb8	20 94 ce	jsr $ce94			jsr R_From
.acbb	4c 08 c8	jmp $c808			jmp U_Less_Than
=21					CL	.var *-(WordListLink+wh_Xt)
=$acbe					en = *	; remember here
>aca7	15					.byte CL	;wh_CodeLength
>acbe	5c				L1:	.text "\"	;  name of word as a string, ending at wh_NameLastChar
>acbf	81					.byte (("\"[-1]&7)<<5)+(*-L1)	;wh_HNL
>acc0	24 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>acc2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acc3	0c					.byte IM+NN	;wh_Flags	dictionary flags
=44095					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.acc4					Backslash:
.acc4	ad 0c 03	lda $030c			lda BlkV+0		; interpreting a block?
.acc7	0d 0d 03	ora $030d			ora BlkV+1
.acca	f0 16		beq $ace2			beq _not_block
.accc	a5 08		lda $08				lda toin+0
.acce	29 3f		and #$3f			and #$3F
.acd0	c9 02		cmp #$02			cmp #2
.acd2	90 16		bcc $acea			bcc _rts
.acd4	a5 08		lda $08		                lda toin+0		; Move toin to next multiple of 64.
.acd6	29 c0		and #$c0	                and #$C0        	;   Clear lower bits to move to beginning of line.
.acd8	18		clc		                clc             	;   Add $40 (64 decimal) to move to next line.
.acd9	69 40		adc #$40	                adc #$40
.acdb	85 08		sta $08		                sta toin+0
.acdd	90 0b		bcc $acea	                bcc _rts
.acdf	e6 09		inc $09		                inc toin+1
.ace1	60		rts				rts
.ace2					_not_block:
.ace2	a5 06		lda $06		                lda ciblen+0
.ace4	85 08		sta $08		                sta toin+0
.ace6	a5 07		lda $07		                lda ciblen+1
.ace8	85 09		sta $09		                sta toin+1
=38					CL	.var *-(WordListLink+wh_Xt)
=$acea					en = *	; remember here
>acc2	26					.byte CL	;wh_CodeLength
.acea	60		rts		_rts:		rts
>aceb	4d 6f 76 65			L1:	.text "Move"	;  name of word as a string, ending at wh_NameLastChar
>acef	a4					.byte (("Move"[-1]&7)<<5)+(*-L1)	;wh_HNL
>acf0	3f ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>acf2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acf3	18					.byte NN+UF	;wh_Flags	dictionary flags
=44143					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.acf4					Move:
.acf4	b5 27		lda $27,x			lda DStack+3,x		; MSB of addr2
.acf6	d5 29		cmp $29,x			cmp DStack+5,x		; MSB of addr1
.acf8	d0 04		bne $acfe			bne _ne
.acfa	b5 26		lda $26,x			lda DStack+2,x		; LSB of addr2
.acfc	d5 28		cmp $28,x			cmp DStack+4,x		; LSB of addr1
.acfe	90 5a		bcc $ad5a	_ne:		bcc CMove
.ad00	d0 11		bne $ad13			bne CMove_up
.ad02	8a		txa		ThreeDrop:	txa		; drop three entries from Data Stack
.ad03	18		clc				clc
.ad04	69 06		adc #$06			adc #6
.ad06	aa		tax				tax
=19					CL	.var *-(WordListLink+wh_Xt)
=$ad07					en = *	; remember here
>acf2	13					.byte CL	;wh_CodeLength
.ad07	60		rts				rts
>ad08	43 4d 6f 76 65 3e		L1:	.text "CMove>"	;  name of word as a string, ending at wh_NameLastChar
>ad0e	c6					.byte (("CMove>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ad0f	6f ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad11	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad12	18					.byte UF+NN	;wh_Flags	dictionary flags
=44174					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad13					CMove_up:
.ad13	20 de b3	jsr $b3de			jsr underflow_3
.ad16	b5 26		lda $26,x			lda DStack+2,x
.ad18	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.ad1a	b5 27		lda $27,x			lda DStack+3,x
.ad1c	18		clc				clc
.ad1d	75 25		adc $25,x			adc DStack+1,x
.ad1f	85 17		sta $17				sta tmp2+1	; point to last page of destination
.ad21	b5 28		lda $28,x			lda DStack+4,x
.ad23	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.ad25	b5 29		lda $29,x			lda DStack+5,x
.ad27	18		clc				clc
.ad28	75 25		adc $25,x			adc DStack+1,x
.ad2a	85 15		sta $15				sta tmp1+1	; point to last page of source
.ad2c	f6 25		inc $25,x			inc DStack+1,x	; allows us to use bne with dec DStack+1,x below
.ad2e	b4 24		ldy $24,x			ldy DStack+0,x	; length of last page
.ad30	f0 10		beq $ad42			beq _nopartial
.ad32					_outerloop:
.ad32	88		dey				dey
.ad33	f0 07		beq $ad3c			beq _finishpage
.ad35					_innerloop:
.ad35	b1 14		lda ($14),y			lda (tmp1),y
.ad37	91 16		sta ($16),y			sta (tmp2),y
.ad39	88		dey				dey
.ad3a	d0 f9		bne $ad35			bne _innerloop
.ad3c					_finishpage:
.ad3c	a0 00		ldy #$00			ldy #0
.ad3e	b1 14		lda ($14),y			lda (tmp1),y	; handle y = 0 separately
.ad40	91 16		sta ($16),y			sta (tmp2),y
.ad42					_nopartial:
.ad42	c6 15		dec $15				dec tmp1+1	; back up to previous pages
.ad44	c6 17		dec $17				dec tmp2+1
.ad46	d6 25		dec $25,x			dec DStack+1,x
.ad48	d0 e8		bne $ad32			bne _outerloop
.ad4a					_done:
.ad4a	4c 02 ad	jmp $ad02			jmp ThreeDrop	; clear up the stack and leave
=58					CL	.var *-(WordListLink+wh_Xt)
=$ad4d					en = *	; remember here
>ad11	3a					.byte CL	;wh_CodeLength
.ad4d	4c e8 b3	jmp $b3e8	Throw_Stack_14: jmp Throw_Stack
>ad50	43 4d 6f 76 65			L1:	.text "CMove"	;  name of word as a string, ending at wh_NameLastChar
>ad55	a5					.byte (("CMove"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ad56	8e ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad58	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad59	18					.byte UF+NN	;wh_Flags	dictionary flags
=44245					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad5a					CMove:
.ad5a	20 de b3	jsr $b3de			jsr underflow_3
.ad5d	b5 26		lda $26,x			lda DStack+2,x
.ad5f	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.ad61	b5 27		lda $27,x			lda DStack+3,x
.ad63	85 17		sta $17				sta tmp2+1
.ad65	b5 28		lda $28,x			lda DStack+4,x
.ad67	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.ad69	b5 29		lda $29,x			lda DStack+5,x
.ad6b	85 15		sta $15				sta tmp1+1
.ad6d	a0 00		ldy #$00			ldy #0
.ad6f	b5 25		lda $25,x			lda DStack+1,x	; number of whole pages to move
.ad71	f0 0f		beq $ad82			beq _dopartial
.ad73					_page:
.ad73	b1 14		lda ($14),y			lda (tmp1),y
.ad75	91 16		sta ($16),y			sta (tmp2),y
.ad77	c8		iny				iny
.ad78	d0 f9		bne $ad73			bne _page
.ad7a	e6 15		inc $15				inc tmp1+1
.ad7c	e6 17		inc $17				inc tmp2+1
.ad7e	d6 25		dec $25,x			dec DStack+1,x
.ad80	d0 f1		bne $ad73			bne _page
.ad82					_dopartial:
.ad82	b5 24		lda $24,x			lda DStack+0,x	; length of last page
.ad84	f0 09		beq $ad8f			beq _done
.ad86					_partial:
.ad86	b1 14		lda ($14),y			lda (tmp1),y
.ad88	91 16		sta ($16),y			sta (tmp2),y
.ad8a	c8		iny				iny
.ad8b	d6 24		dec $24,x			dec DStack+0,x
.ad8d	d0 f7		bne $ad86			bne _partial
.ad8f	4c 02 ad	jmp $ad02	_done:		jmp ThreeDrop	; clear the stack
=56					CL	.var *-(WordListLink+wh_Xt)
=$ad92					en = *	; remember here
>ad58	38					.byte CL	;wh_CodeLength
>ad92	55 4d 2a			L1:	.text "UM*"	;  name of word as a string, ending at wh_NameLastChar
>ad95	43					.byte (("UM*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ad96	d5 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad98	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad99	08					.byte NN	;wh_Flags	dictionary flags
=44309					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad9a					UM_Star:
.ad9a	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ad9c	b0 af		bcs $ad4d		bcs Throw_Stack_14
.ad9e	18		clc				clc		; tmp2= divsor-1
.ad9f	b5 24		lda $24,x			lda DStack+0,x
.ada1	e9 00		sbc #$00			sbc #0
.ada3	85 16		sta $16				sta tmp2+0
.ada5	b5 25		lda $25,x			lda DStack+1,x
.ada7	e9 00		sbc #$00			sbc #0
.ada9	85 17		sta $17				sta tmp2+1
.adab	90 2e		bcc $addb			bcc _zero	; is divisor zero?
.adad	a9 00		lda #$00			lda #0
.adaf	85 14		sta $14				sta tmp1
.adb1	86 18		stx $18				stx tmp3	; tested for exit from outer loop
.adb3	ca		dex				dex
.adb4	ca		dex				dex
.adb5					_outer_loop:
.adb5	a0 08		ldy #$08			ldy #8		; counter inner loop
.adb7	56 28		lsr $28,x			lsr DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.adb9					_inner_loop:
.adb9	90 0c		bcc $adc7			bcc _no_add
.adbb	85 15		sta $15				sta tmp1+1	; save time, don't CLC
.adbd	a5 14		lda $14				lda tmp1
.adbf	65 16		adc $16				adc tmp2
.adc1	85 14		sta $14				sta tmp1
.adc3	a5 15		lda $15				lda tmp1+1
.adc5	65 17		adc $17				adc tmp2+1
.adc7					_no_add:
.adc7	6a		ror a				ror
.adc8	66 14		ror $14				ror tmp1
.adca	76 28		ror $28,x			ror DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.adcc	88		dey				dey
.adcd	d0 ea		bne $adb9			bne _inner_loop ; go back for one more shift?
.adcf	e8		inx				inx
.add0	e4 18		cpx $18				cpx tmp3
.add2	d0 e1		bne $adb5			bne _outer_loop ; go back for eight more shifts?
.add4	95 25		sta $25,x			sta DStack+1,x
.add6	a5 14		lda $14				lda tmp1
.add8	95 24		sta $24,x			sta DStack+0,x
.adda	60		rts				rts
.addb	a9 00		lda #$00	_zero:		lda #0
.addd	95 26		sta $26,x			sta DStack+2,x
.addf	95 27		sta $27,x			sta DStack+3,x
.ade1	60		rts				rts
=72					CL	.var *-(WordListLink+wh_Xt)
=$ade2					en = *	; remember here
>ad98	48					.byte CL	;wh_CodeLength
>ade2	4d 2a				L1:	.text "M*"	;  name of word as a string, ending at wh_NameLastChar
>ade4	42					.byte (("M*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ade5	15 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ade7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ade8	08					.byte NN	;wh_Flags	dictionary flags
=44388					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ade9					M_Star:
.ade9	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.adeb	b0 6d		bcs $ae5a		bcs Throw_Stack_15
.aded	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.adef	55 27		eor $27,x			eor DStack+3,x	; MSB of n2
.adf1	08		php				php
.adf2	20 23 c6	jsr $c623			jsr Abs
.adf5	20 0e cf	jsr $cf0e			jsr Swap
.adf8	20 23 c6	jsr $c623			jsr Abs
.adfb	20 9a ad	jsr $ad9a			jsr UM_Star		; ( d )
.adfe	28		plp				plp			; handle the sign
.adff	10 03		bpl $ae04			bpl +
.ae01	4c 3b c6	jmp $c63b			jmp DNegate
.ae04					+
=27					CL	.var *-(WordListLink+wh_Xt)
=$ae04					en = *	; remember here
>ade7	1b					.byte CL	;wh_CodeLength
.ae04	60		rts				rts
>ae05	2a				L1:	.text "*"	;  name of word as a string, ending at wh_NameLastChar
>ae06	41					.byte (("*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ae07	64 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae09	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae0a	00					.byte 0	;wh_Flags	dictionary flags
=44422					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae0b					Star:
.ae0b	20 9a ad	jsr $ad9a			jsr UM_Star
.ae0e	e8		inx				inx		; UD>U	drop hi cell
.ae0f	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$ae10					en = *	; remember here
>ae09	05					.byte CL	;wh_CodeLength
.ae10	60		rts				rts
>ae11	55 4d 2f 4d 6f 64		L1:	.text "UM/Mod"	;  name of word as a string, ending at wh_NameLastChar
>ae17	86					.byte (("UM/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ae18	86 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae1a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae1b	08					.byte NN	;wh_Flags	dictionary flags
=44439					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae1c					UM_Slash_Mod:
.ae1c	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ae1e	b0 3a		bcs $ae5a		bcs Throw_Stack_15
.ae20	b5 24		lda $24,x			lda DStack+0,x		; catch division by zero
.ae22	15 25		ora $25,x			ora DStack+1,x
.ae24	f0 2f		beq $ae55			beq _DivByZero
.ae26	a0 10		ldy #$10			ldy #16			; for 16 bits
.ae28					_loop:
.ae28	36 28		rol $28,x			rol DStack+4,x		;   rotate low cell of dividend one bit left
.ae2a	36 29		rol $29,x			rol DStack+5,x
.ae2c	36 26		rol $26,x			rol DStack+2,x		;   rotate high cell of dividend one bit left
.ae2e	36 27		rol $27,x			rol DStack+3,x
.ae30	b0 0a		bcs $ae3c			bcs _subtract		;   overflow?
.ae32	b5 26		lda $26,x			lda DStack+2,x		;   dividend.hi >= divisor?
.ae34	d5 24		cmp $24,x			cmp DStack+0,x
.ae36	b5 27		lda $27,x			lda DStack+3,x
.ae38	f5 25		sbc $25,x			sbc DStack+1,x
.ae3a	90 0d		bcc $ae49			bcc _next
.ae3c	b5 26		lda $26,x	_subtract:	lda DStack+2,x		;   dividend.hi -= divisor
.ae3e	f5 24		sbc $24,x			sbc DStack+0,x
.ae40	95 26		sta $26,x			sta DStack+2,x
.ae42	b5 27		lda $27,x			lda DStack+3,x
.ae44	f5 25		sbc $25,x			sbc DStack+1,x
.ae46	95 27		sta $27,x			sta DStack+3,x
.ae48	38		sec				sec			;   it always fits
.ae49	88		dey		_next:		dey			;  next
.ae4a	d0 dc		bne $ae28			bne _loop
.ae4c	36 28		rol $28,x			rol DStack+4,x		; finish rotating quotient bit in
.ae4e	36 29		rol $29,x			rol DStack+5,x
.ae50	e8		inx				inx			; drop divisor
.ae51	e8		inx				inx
.ae52	4c 0e cf	jmp $cf0e			jmp Swap
.ae55	a9 f6		lda #$f6	_DivByZero:	lda #$100+err_DivideBy0
.ae57	4c 23 b4	jmp $b423			jmp ThrowA
=62					CL	.var *-(WordListLink+wh_Xt)
=$ae5a					en = *	; remember here
>ae1a	3e					.byte CL	;wh_CodeLength
.ae5a	4c e8 b3	jmp $b3e8	Throw_Stack_15: jmp Throw_Stack
>ae5d	53 4d 2f 52 65 6d		L1:	.text "SM/Rem"	;  name of word as a string, ending at wh_NameLastChar
>ae63	a6					.byte (("SM/Rem"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ae64	97 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae66	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae67	08					.byte NN	;wh_Flags	dictionary flags
=44515					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae68					SM_Slash_Rem:
.ae68	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ae6a	b0 ee		bcs $ae5a		bcs Throw_Stack_15
.ae6c	b5 27		lda $27,x			lda DStack+3,x
.ae6e	08		php				php
.ae6f	55 25		eor $25,x			eor DStack+1,x
.ae71	08		php				php
.ae72	20 23 c6	jsr $c623			jsr Abs
.ae75	e8		inx				inx		; pretend we pushed n1 to R
.ae76	e8		inx				inx
.ae77	20 58 c6	jsr $c658			jsr DAbs
.ae7a	ca		dex				dex
.ae7b	ca		dex				dex
.ae7c	20 1c ae	jsr $ae1c			jsr UM_Slash_Mod	; UM/MOD
.ae7f	28		plp				plp
.ae80	10 03		bpl $ae85			bpl +
.ae82	20 0a c6	jsr $c60a			jsr Negate
.ae85					+
.ae85	28		plp				plp
.ae86	10 07		bpl $ae8f			bpl _done
.ae88	e8		inx				inx		; pretend we pushed quotient to R
.ae89	e8		inx				inx
.ae8a	20 0a c6	jsr $c60a			jsr Negate
.ae8d	ca		dex				dex
.ae8e	ca		dex				dex
.ae8f					_done:
=39					CL	.var *-(WordListLink+wh_Xt)
=$ae8f					en = *	; remember here
>ae66	27					.byte CL	;wh_CodeLength
.ae8f	60		rts				rts
>ae90	46 4d 2f 4d 6f 64		L1:	.text "FM/Mod"	;  name of word as a string, ending at wh_NameLastChar
>ae96	86					.byte (("FM/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ae97	e3 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae99	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae9a	08					.byte NN	;wh_Flags	dictionary flags
=44566					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae9b					FM_Slash_Mod:
.ae9b	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ae9d	b0 bb		bcs $ae5a		bcs Throw_Stack_15
.ae9f	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.aea1	08		php				php		;  save sign
.aea2	10 0a		bpl $aeae			bpl +
.aea4	20 0a c6	jsr $c60a			jsr Negate	; NEGATE
.aea7	e8		inx				inx
.aea8	e8		inx				inx
.aea9	20 3b c6	jsr $c63b			jsr DNegate	; DNEGATE
.aeac	ca		dex				dex
.aead	ca		dex				dex
.aeae					+
.aeae	b5 27		lda $27,x			lda DStack+3,x	; MSB of high word of d
.aeb0	10 0d		bpl $aebf			bpl +
.aeb2	18		clc				clc
.aeb3	b5 24		lda $24,x			lda DStack+0,x	; LSB of n1
.aeb5	75 26		adc $26,x			adc DStack+2,x	; LSB of dh
.aeb7	95 26		sta $26,x			sta DStack+2,x
.aeb9	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.aebb	75 27		adc $27,x			adc DStack+3,x	; MSB of dh
.aebd	95 27		sta $27,x			sta DStack+3,x
.aebf					+
.aebf	20 1c ae	jsr $ae1c			jsr UM_Slash_Mod	; ( d n1 -- rem n2 )
.aec2	28		plp				plp
.aec3	10 07		bpl $aecc			bpl +
.aec5	e8		inx				inx		; pretend that we SWAP
.aec6	e8		inx				inx
.aec7	20 0a c6	jsr $c60a			jsr Negate
.aeca	ca		dex				dex
.aecb	ca		dex				dex
.aecc					+
=49					CL	.var *-(WordListLink+wh_Xt)
=$aecc					en = *	; remember here
>ae99	31					.byte CL	;wh_CodeLength
.aecc	60		rts				rts
>aecd	2f 4d 6f 64			L1:	.text "/Mod"	;  name of word as a string, ending at wh_NameLastChar
>aed1	84					.byte (("/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aed2	16 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aed4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aed5	08					.byte NN	;wh_Flags	dictionary flags
=44625					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aed6	20 f0 ce	jsr $cef0	Slash_Mod:	jsr Dup			; ( n1 n_div n_div )
.aed9	a0 00		ldy #$00			ldy #0			; sign extend n1
.aedb	b5 29		lda $29,x			lda DStack+5,x
.aedd	10 01		bpl $aee0			bpl +
.aedf	88		dey				dey
.aee0	94 26		sty $26,x	+		sty DStack+2,x
.aee2	94 27		sty $27,x			sty DStack+3,x		; ( d1 n_div )
.aee4	4c 68 ae	jmp $ae68			jmp SM_Slash_Rem	; SM/REM
=17					CL	.var *-(WordListLink+wh_Xt)
=$aee7					en = *	; remember here
>aed4	11					.byte CL	;wh_CodeLength
>aee7	2f				L1:	.text "/"	;  name of word as a string, ending at wh_NameLastChar
>aee8	e1					.byte (("/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aee9	51 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aeeb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aeec	08					.byte NN	;wh_Flags	dictionary flags
=44648					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aeed	20 d6 ae	jsr $aed6	Slash:		jsr Slash_Mod
.aef0	4c 0b c9	jmp $c90b			jmp Nip		; Nip remainder
=6					CL	.var *-(WordListLink+wh_Xt)
=$aef3					en = *	; remember here
>aeeb	06					.byte CL	;wh_CodeLength
>aef3	4d 6f 64			L1:	.text "Mod"	;  name of word as a string, ending at wh_NameLastChar
>aef6	83					.byte (("Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aef7	68 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aef9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aefa	00					.byte 0	;wh_Flags	dictionary flags
=44662					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aefb	20 d6 ae	jsr $aed6	Mod:		jsr Slash_Mod
.aefe	e8		inx				inx		; Drop quotient
.aeff	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$af00					en = *	; remember here
>aef9	05					.byte CL	;wh_CodeLength
.af00	60		rts				rts
>af01	2a 2f 4d 6f 64			L1:	.text "*/Mod"	;  name of word as a string, ending at wh_NameLastChar
>af06	85					.byte (("*/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af07	76 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af09	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af0a	18					.byte UF+NN	;wh_Flags	dictionary flags
=44678					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af0b					Star_Slash_Mod:
.af0b	20 de b3	jsr $b3de			jsr underflow_3
.af0e	20 75 ce	jsr $ce75			jsr To_R
.af11	20 e9 ad	jsr $ade9			jsr M_Star
.af14	20 94 ce	jsr $ce94			jsr R_From
.af17	4c 68 ae	jmp $ae68			jmp SM_Slash_Rem
=15					CL	.var *-(WordListLink+wh_Xt)
=$af1a					en = *	; remember here
>af09	0f					.byte CL	;wh_CodeLength
>af1a	2a 2f				L1:	.text "*/"	;  name of word as a string, ending at wh_NameLastChar
>af1c	e2					.byte (("*/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af1d	86 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af1f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af20	08					.byte NN	;wh_Flags	dictionary flags
=44700					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af21					Star_Slash:
.af21	20 0b af	jsr $af0b			jsr Star_Slash_Mod
.af24	4c 0b c9	jmp $c90b			jmp Nip			; mod
=6					CL	.var *-(WordListLink+wh_Xt)
=$af27					en = *	; remember here
>af1f	06					.byte CL	;wh_CodeLength
>af27	4d 2a 2f			L1:	.text "M*/"	;  name of word as a string, ending at wh_NameLastChar
>af2a	e3					.byte (("M*/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af2b	9c ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af2d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af2e	08					.byte NN	;wh_Flags	dictionary flags
=44714					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af2f					m_star_slash:
.af2f	20 e3 b3	jsr $b3e3	                jsr underflow_4
.af32	b5 24		lda $24,x			lda DStack+0,x		; calc result sign
.af34	55 26		eor $26,x			eor DStack+2,x
.af36	55 28		eor $28,x			eor DStack+4,x
.af38	08		php				php
.af39	20 23 c6	jsr $c623	                jsr Abs			; Abs
.af3c	20 75 ce	jsr $ce75	                jsr To_R		; >R		( d1 n1 ) ( R: sign abs(n2) )
.af3f	20 23 c6	jsr $c623	                jsr Abs			; Abs
.af42	20 75 ce	jsr $ce75	                jsr To_R		; >R		( d1 ) ( R: sign abs(n2) abs(n1) )
.af45	20 58 c6	jsr $c658	                jsr DAbs		; DAbs		( abs(d1) ) ( R: sign abs(n2) abs(n1) )
.af48	20 0e cf	jsr $cf0e	                jsr Swap		; Swap
.af4b	20 b0 ce	jsr $ceb0	                jsr R_Fetch		; R@
.af4e	20 9a ad	jsr $ad9a	                jsr UM_Star		; UM*
.af51	20 f4 cd	jsr $cdf4	                jsr Rot			; Rot
.af54	20 94 ce	jsr $ce94	                jsr R_From		; R>
.af57	20 9a ad	jsr $ad9a	                jsr UM_Star		; UM*
.af5a	20 f4 cd	jsr $cdf4	                jsr Rot			; Rot
.af5d	20 ff c9	jsr $c9ff	                jsr UMPlus		; 0 D+
.af60	20 b0 ce	jsr $ceb0	                jsr R_Fetch		; R@
.af63	20 1c ae	jsr $ae1c	                jsr UM_Slash_Mod	; UM/Mod
.af66	20 1a ce	jsr $ce1a	                jsr Not_Rot		; Rot Rot
.af69	20 94 ce	jsr $ce94	                jsr R_From		; R>
.af6c	20 1c ae	jsr $ae1c	                jsr UM_Slash_Mod	; UM/Mod
.af6f	20 0b c9	jsr $c90b	                jsr Nip			; Swap Drop
.af72	20 0e cf	jsr $cf0e	                jsr Swap		; Swap
.af75	28		plp				plp
.af76	10 03		bpl $af7b			bpl _rts		; ... 0< if ...
.af78	4c 3b c6	jmp $c63b	                jmp DNegate
.af7b	60		rts		_rts:		rts
=77					CL	.var *-(WordListLink+wh_Xt)
=$af7c					en = *	; remember here
>af2d	4d					.byte CL	;wh_CodeLength
>af7c	45 76 61 6c 75 61 74 65		L1:	.text "Evaluate"	;  name of word as a string, ending at wh_NameLastChar
>af84	a8					.byte (("Evaluate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af85	aa ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af87	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af88	08					.byte NN	;wh_Flags	dictionary flags
=44804					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af89					Evaluate:
.af89	18		clc				clc			; signal to zero BLK.
.af8a					load_evaluate:
.af8a	ad 0d 03	lda $030d			lda BlkV+1	; Save the current value of BLK on the return stack.
.af8d	48		pha				pha
.af8e	ad 0c 03	lda $030c			lda BlkV+0
.af91	48		pha				pha
.af92	b0 08		bcs $af9c			bcs +		; See if we should zero BLK.
.af94	a9 00		lda #$00			lda #0		; Set BLK to zero.
.af96	8d 0c 03	sta $030c			sta BlkV+0
.af99	8d 0d 03	sta $030d			sta BlkV+1
.af9c					+
.af9c	20 a3 c3	jsr $c3a3			jsr Input_To_R	; Save the input state to the Return Stack
.af9f	a9 ff		lda #$ff			lda #$ff	; SOURCE-ID= -1
.afa1	85 02		sta $02				sta insrc+0
.afa3	85 03		sta $03				sta insrc+1
.afa5	a9 00		lda #$00			lda #0		; >IN= zero
.afa7	85 08		sta $08				sta toin+0
.afa9	85 09		sta $09				sta toin+1
.afab	20 9a b3	jsr $b39a			jsr PopYA	; ciblen= string length (u)
.afae	85 06		sta $06				sta ciblen+0
.afb0	84 07		sty $07				sty ciblen+1
.afb2	20 9a b3	jsr $b39a			jsr PopYA	; cib= string addr
.afb5	85 04		sta $04				sta cib+0
.afb7	84 05		sty $05				sty cib+1
.afb9	20 dd b4	jsr $b4dd			jsr interpret	; ( -- )
.afbc	20 c5 c3	jsr $c3c5			jsr R_To_Input	; restore input state
.afbf	68		pla				pla		; Restore BLK from the return stack.
.afc0	8d 0c 03	sta $030c			sta BlkV+0
.afc3	68		pla				pla
.afc4	8d 0d 03	sta $030d			sta BlkV+1
=62					CL	.var *-(WordListLink+wh_Xt)
=$afc7					en = *	; remember here
>af87	3e					.byte CL	;wh_CodeLength
.afc7	60		rts				rts
>afc8	3e 4e 75 6d 62 65 72		L1:	.text ">Number"	;  name of word as a string, ending at wh_NameLastChar
>afcf	47					.byte ((">Number"[-1]&7)<<5)+(*-L1)	;wh_HNL
>afd0	04 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>afd2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>afd3	18					.byte UF+NN	;wh_Flags	dictionary flags
=44879					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.afd4					To_Number:
.afd4	20 e3 b3	jsr $b3e3			jsr underflow_4
.afd7	b5 24		lda $24,x			lda DStack+0,x		; no chars left?
.afd9	f0 72		beq $b04d			beq _done
.afdb					_Char_loop:
.afdb	a1 26		lda ($26,x)			lda (DStack+2,x)		; Get next character
.afdd	c9 30		cmp #$30			cmp #'0'		; convert to value (Digit_Question)
.afdf	90 6c		bcc $b04d			bcc _done
.afe1	c9 3a		cmp #$3a			cmp #'9'+1
.afe3	90 08		bcc $afed			bcc _digit
.afe5	29 df		and #$df			and #$df		;   ASCII uppercase
.afe7	c9 41		cmp #$41			cmp #'A'
.afe9	90 62		bcc $b04d			bcc _done
.afeb	e9 07		sbc #$07			sbc #7 ;'A'-'0'-10	;   to make 'A'=10 below
.afed	38		sec		_digit:		sec
.afee	e9 30		sbc #$30			sbc #'0'
.aff0	cd 00 03	cmp $0300			cmp base		; must be < base
.aff3	b0 58		bcs $b04d			bcs _done
.aff5	48		pha				pha			; Save char value
.aff6	20 e5 c4	jsr $c4e5			jsr Two_Over		;   copy ud to work (multiplicand)
.aff9	a9 00		lda #$00			lda #0			;   zero ud (product)
.affb	95 2c		sta $2c,x			sta DStack+8,x
.affd	95 2d		sta $2d,x			sta DStack+9,x
.afff	95 2e		sta $2e,x			sta DStack+10,x
.b001	95 2f		sta $2f,x			sta DStack+11,x
.b003	ad 00 03	lda $0300			lda base		;   get multiplier
.b006	d0 23		bne $b02b			bne _Mul_Test
.b008	48		pha		_Mul_Add:	pha			;   save multiplier
.b009	18		clc				clc			;   ud += work
.b00a	b5 26		lda $26,x			lda DStack+2,x
.b00c	75 2e		adc $2e,x			adc DStack+10,x
.b00e	95 2e		sta $2e,x			sta DStack+10,x
.b010	b5 27		lda $27,x			lda DStack+3,x
.b012	75 2f		adc $2f,x			adc DStack+11,x
.b014	95 2f		sta $2f,x			sta DStack+11,x
.b016	b5 24		lda $24,x			lda DStack+0,x
.b018	75 2c		adc $2c,x			adc DStack+8,x
.b01a	95 2c		sta $2c,x			sta DStack+8,x
.b01c	b5 25		lda $25,x			lda DStack+1,x
.b01e	75 2d		adc $2d,x			adc DStack+9,x
.b020	95 2d		sta $2d,x			sta DStack+9,x
.b022	68		pla				pla			;   restore multiplier
.b023	16 26		asl $26,x	_Mul_Shift:	asl DStack+2,x		;   work <<= 1
.b025	36 27		rol $27,x			rol DStack+3,x
.b027	36 24		rol $24,x			rol DStack+0,x
.b029	36 25		rol $25,x			rol DStack+1,x
.b02b	4a		lsr a		_Mul_Test:	lsr a			;   shift multiplier
.b02c	b0 da		bcs $b008			bcs _Mul_Add
.b02e	d0 f3		bne $b023			bne _Mul_Shift
.b030	e8		inx				inx			;   2Drop work
.b031	e8		inx				inx
.b032	e8		inx				inx
.b033	e8		inx				inx
.b034	68		pla				pla			; recover value
.b035	18		clc				clc			; add to ud
.b036	75 2a		adc $2a,x			adc DStack+6,x
.b038	95 2a		sta $2a,x			sta DStack+6,x
.b03a	90 0a		bcc $b046			bcc +
.b03c	f6 2b		inc $2b,x			inc DStack+7,x
.b03e	d0 06		bne $b046			bne +
.b040	f6 28		inc $28,x			inc DStack+4,x
.b042	d0 02		bne $b046			bne +
.b044	f6 29		inc $29,x			inc DStack+5,x
.b046					+
.b046	20 f0 c9	jsr $c9f0			jsr NOS_One_Plus	; consume the char
.b049	d6 24		dec $24,x			dec DStack+0,x
.b04b	d0 8e		bne $afdb			bne _Char_loop
.b04d					_done:
=121					CL	.var *-(WordListLink+wh_Xt)
=$b04d					en = *	; remember here
>afd2	79					.byte CL	;wh_CodeLength
.b04d	60		rts				rts
>b04e	4e 75 6d 62 65 72		L1:	.text "Number"	;  name of word as a string, ending at wh_NameLastChar
>b054	46					.byte (("Number"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b055	4f af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b057	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b058	18					.byte UF+NN	;wh_Flags	dictionary flags
=45012					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b059					Number:
.b059	20 d9 b3	jsr $b3d9			jsr underflow_2
.b05c	a9 00		lda #$00			lda #0
.b05e	85 1a		sta $1a				sta tmp4+0	; flag for double
.b060	85 1b		sta $1b				sta tmp4+1	; flag for minus
.b062	ad 00 03	lda $0300			lda base
.b065	48		pha				pha
.b066	20 4a cc	jsr $cc4a			jsr Two_dup		; ( addr u addr u )
.b069	a1 26		lda ($26,x)			lda (DStack+2,x)	; get 1st char
.b06b	20 2d b1	jsr $b12d			jsr _MinusCheck		; a minus sign?
.b06e	a0 0a		ldy #$0a			ldy #10			; decimal?
.b070	c9 23		cmp #$23			cmp #'#'
.b072	f0 35		beq $b0a9			beq _base_changed
.b074	a0 10		ldy #$10			ldy #16			; hex?
.b076	c9 24		cmp #$24			cmp #'$'
.b078	f0 2f		beq $b0a9			beq _base_changed
.b07a	a0 02		ldy #$02			ldy #2			; binary?
.b07c	c9 25		cmp #$25			cmp #'%'
.b07e	f0 29		beq $b0a9			beq _base_changed
.b080	c9 27		cmp #$27			cmp #$27		; ASCII for "'"
.b082	d0 2f		bne $b0b3			bne _check_dot
.b084	b5 24		lda $24,x			lda DStack+0,x	; length=3 ?
.b086	c9 03		cmp #$03			cmp #3
.b088	d0 1c		bne $b0a6			bne _not_a_char
.b08a	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b08c	85 1c		sta $1c				sta tmp5
.b08e	b5 27		lda $27,x			lda DStack+3,x
.b090	85 1d		sta $1d				sta tmp5+1
.b092	a0 02		ldy #$02			ldy #2
.b094	b1 1c		lda ($1c),y			lda (tmp5),y
.b096	c9 27		cmp #$27			cmp #$27	; ASCII for "'"
.b098	d0 0c		bne $b0a6			bne _not_a_char
.b09a	88		dey				dey		; The char we want is between the single quotes.
.b09b	b1 1c		lda ($1c),y			lda (tmp5),y
.b09d	95 26		sta $26,x			sta DStack+2,x
.b09f	a9 00		lda #$00			lda #0
.b0a1	95 27		sta $27,x			sta DStack+3,x
.b0a3	4c 02 b1	jmp $b102			jmp _drop_original_string ; Single flag will drop the TOS for us.
.b0a6					_not_a_char:
.b0a6	4c df b0	jmp $b0df			jmp _number_error
.b0a9					_base_changed:
.b0a9	8c 00 03	sty $0300			sty base	; Switch to the new base
.b0ac	20 f0 c9	jsr $c9f0			jsr NOS_One_Plus ; start one character later
.b0af	d6 24		dec $24,x			dec DStack+0,x	; decrease string length by one
.b0b1	a1 26		lda ($26,x)			lda (DStack+2,x) ; Load the first char again
.b0b3					_check_dot:
.b0b3	20 2d b1	jsr $b12d			jsr _MinusCheck
.b0b6	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b0b8	85 1c		sta $1c				sta tmp5
.b0ba	b5 27		lda $27,x			lda DStack+3,x
.b0bc	85 1d		sta $1d				sta tmp5+1
.b0be	b4 24		ldy $24,x			ldy DStack+0,x	; Y now points to the first character after the string,
.b0c0	88		dey				dey		; but we need the last character
.b0c1	b1 1c		lda ($1c),y			lda (tmp5),y
.b0c3	c9 2e		cmp #$2e			cmp #'.'
.b0c5	d0 04		bne $b0cb			bne _main
.b0c7	c6 1a		dec $1a				dec tmp4	; Flag the fact
.b0c9	d6 24		dec $24,x			dec DStack+0,x	; reduce string length by one
.b0cb					_main:
.b0cb	20 4a cc	jsr $cc4a			jsr Two_Dup
.b0ce	a9 00		lda #$00			lda #0
.b0d0	95 28		sta $28,x			sta DStack+4,x	; clear ud
.b0d2	95 29		sta $29,x			sta DStack+5,x
.b0d4	95 2a		sta $2a,x			sta DStack+6,x
.b0d6	95 2b		sta $2b,x			sta DStack+7,x
.b0d8	20 d4 af	jsr $afd4			jsr To_Number	; ( ud addr u -- ud addr u )
.b0db	b5 24		lda $24,x			lda DStack+0,x
.b0dd	f0 1f		beq $b0fe			beq _all_converted
.b0df					_number_error:
.b0df	20 b1 c4	jsr $c4b1			jsr Two_drop	; >NUMBER modified addr u
.b0e2	20 b1 c4	jsr $c4b1			jsr Two_drop	; ud   (partially converted number)
.b0e5	a9 3e		lda #$3e			lda #'>'	; print the unknown
.b0e7	20 5e cd	jsr $cd5e			jsr Emit_A	; word using the original addr u we saved at the beginning.
.b0ea	20 78 cd	jsr $cd78			jsr Type
.b0ed	a9 3c		lda #$3c			lda #'<'
.b0ef	20 5e cd	jsr $cd5e			jsr Emit_A
.b0f2	20 6b cd	jsr $cd6b			jsr Space
.b0f5	68		pla				pla		; restore base
.b0f6	8d 00 03	sta $0300			sta base
.b0f9	a9 f3		lda #$f3			lda #$100+err_UndefinedWord
.b0fb	4c 23 b4	jmp $b423			jmp ThrowA
.b0fe					_all_converted:
.b0fe	e8		inx				inx		; Drop the current addr u
.b0ff	e8		inx				inx
.b100	e8		inx				inx
.b101	e8		inx				inx
.b102					_drop_original_string:
.b102	20 a7 bf	jsr $bfa7			jsr TwoNip	 ; Drop the original addr u
.b105	a5 1a		lda $1a				lda tmp4	; flag for double
.b107	f0 10		beq $b119			beq _single
.b109	a9 20		lda #$20			lda #%00100000
.b10b	05 0c		ora $0c				ora status
.b10d	85 0c		sta $0c				sta status
.b10f	a5 1b		lda $1b				lda tmp4+1
.b111	f0 15		beq $b128			beq _done	; no minus, all done
.b113	20 3b c6	jsr $c63b			jsr DNegate
.b116	4c 28 b1	jmp $b128			jmp _done
.b119					_single:
.b119	e8		inx				inx		; convert ud to u
.b11a	e8		inx				inx
.b11b	a9 df		lda #$df			lda #$ff-%00100000
.b11d	25 0c		and $0c				and status
.b11f	85 0c		sta $0c				sta status
.b121	a5 1b		lda $1b				lda tmp4+1
.b123	f0 03		beq $b128			beq _done	; no minus, all done
.b125	20 0a c6	jsr $c60a			jsr Negate
.b128					_done:
.b128	68		pla				pla
.b129	8d 00 03	sta $0300			sta base
=211					CL	.var *-(WordListLink+wh_Xt)
=$b12c					en = *	; remember here
>b057	d3					.byte CL	;wh_CodeLength
.b12c	60		rts				rts
.b12d					_MinusCheck:
.b12d	c9 2d		cmp #$2d			cmp #'-'		; a minus sign?
.b12f	d0 09		bne $b13a			bne +
.b131	c6 1b		dec $1b				dec tmp4+1		; set flag
.b133	20 f0 c9	jsr $c9f0			jsr NOS_One_Plus	; start one character later
.b136	d6 24		dec $24,x			dec DStack+0,x		; decrease string length by one
.b138	a1 26		lda ($26,x)			lda (DStack+2,x)	; get next char
.b13a	60		rts		+		rts
>b13b	48 65 78			L1:	.text "Hex"	;  name of word as a string, ending at wh_NameLastChar
>b13e	03					.byte (("Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b13f	d4 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b141	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b142	08					.byte NN	;wh_Flags	dictionary flags
=45246					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b143	a9 10		lda #$10	Hex:		lda #16
.b145	d0 0e		bne $b155			bne decimal_a
=4					CL	.var *-(WordListLink+wh_Xt)
=$b147					en = *	; remember here
>b141	04					.byte CL	;wh_CodeLength
>b147	44 65 63 69 6d 61 6c		L1:	.text "Decimal"	;  name of word as a string, ending at wh_NameLastChar
>b14e	87					.byte (("Decimal"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b14f	be b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b151	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b152	00					.byte 0	;wh_Flags	dictionary flags
=45262					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b153	a9 0a		lda #$0a	Decimal:	lda #10
.b155	8d 00 03	sta $0300	decimal_a:	sta base+0
.b158	a9 00		lda #$00			lda #0
.b15a	8d 01 03	sta $0301			sta base+1		; paranoid
=10					CL	.var *-(WordListLink+wh_Xt)
=$b15d					en = *	; remember here
>b151	0a					.byte CL	;wh_CodeLength
.b15d	60		rts				rts
>b15e	43 6f 75 6e 74			L1:	.text "Count"	;  name of word as a string, ending at wh_NameLastChar
>b163	85					.byte (("Count"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b164	ce b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b166	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b167	18					.byte UF+NN	;wh_Flags	dictionary flags
=45283					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b168					Count:
.b168	20 c4 b3	jsr $b3c4			jsr underflow_1
.b16b	a1 24		lda ($24,x)			lda (DStack+0,x)	; A= number of characters
.b16d	f6 24		inc $24,x			inc DStack+0,x		; move start address up by one
.b16f	d0 02		bne $b173			bne +
.b171	f6 25		inc $25,x			inc DStack+1,x
.b173					+
.b173	4c 96 b7	jmp $b796			jmp PushZA		; push number of characters, return
=14					CL	.var *-(WordListLink+wh_Xt)
=$b176					en = *	; remember here
>b166	0e					.byte CL	;wh_CodeLength
>0743					DoLeave  .word ?	; head of leave addr patch chain
>0745					DoStkIndex: .byte ?
>0746					DoIndexL: .fill DoStkDim
>074e					DoIndexH: .fill DoStkDim
>0756					DoFufaL:  .fill DoStkDim
>075e					DoFufaH:  .fill DoStkDim
>b176	3f 44 6f			L1:	.text "?Do"	;  name of word as a string, ending at wh_NameLastChar
>b179	e3					.byte (("?Do"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b17a	e3 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b17c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b17d	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45305					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b17e					Question_Do:
.b17e	20 d9 b2	jsr $b2d9			jsr Do_Leave_Init
.b181	a9 95		lda #$95			lda #<_runtime
.b183	a0 b1		ldy #$b1			ldy #>_runtime
.b185	20 ce cc	jsr $ccce			jsr Jsr_Comma_YA	; compile JSR _runtime
.b188	a9 d0		lda #$d0			lda #$d0		; compile BNE *+5
.b18a	a0 03		ldy #$03			ldy #3
.b18c	20 a9 cc	jsr $cca9			jsr Comma_YA
.b18f	20 bc b2	jsr $b2bc			jsr Leave		; compile JMP leave
.b192	4c b3 b1	jmp $b1b3			jmp Do_8		; finish
=23					CL	.var *-(WordListLink+wh_Xt)
=$b195					en = *	; remember here
>b17c	17					.byte CL	;wh_CodeLength
.b195					_runtime:
.b195	20 bb b1	jsr $b1bb			jsr Do_Runtime	; start normally (we assume TOS!=NOS)
.b198	a5 12		lda $12				lda DoIndex+0	; Are TOS and NOS equal?
.b19a	f0 01		beq $b19d			beq _2
.b19c	60		rts				rts		; return Z=0 to signal continue
.b19d	a5 13		lda $13		_2:		lda DoIndex+1
.b19f	c9 80		cmp #$80			cmp #$80
.b1a1	60		rts				rts		; return Z
>b1a2	44 6f				L1:	.text "Do"	;  name of word as a string, ending at wh_NameLastChar
>b1a4	e2					.byte (("Do"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b1a5	f9 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b1a7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b1a8	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45348					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b1a9					Do:
.b1a9	20 d9 b2	jsr $b2d9			jsr Do_Leave_Init
.b1ac	a9 bb		lda #$bb			lda #<Do_runtime
.b1ae	a0 b1		ldy #$b1			ldy #>Do_runtime
.b1b0	20 ce cc	jsr $ccce			jsr Jsr_Comma_YA	; compile JSR _runtime
.b1b3	20 b2 c9	jsr $c9b2	Do_8:		jsr Here		; remember loop body start addr
.b1b6	a9 a9		lda #$a9			lda #<Do		; identifier
.b1b8	4c 96 b7	jmp $b796			jmp PushZA
=18					CL	.var *-(WordListLink+wh_Xt)
=$b1bb					en = *	; remember here
>b1a7	12					.byte CL	;wh_CodeLength
.b1bb					Do_Runtime:
.b1bb	ce 45 07	dec $0745			dec DoStkIndex		; alloc DO stack entry
.b1be	ac 45 07	ldy $0745			ldy DoStkIndex
.b1c1	30 2d		bmi $b1f0			bmi _TooDeep
.b1c3	a5 12		lda $12				lda DoIndex+0		; save previous DoIndex
.b1c5	99 46 07	sta $0746,y			sta DoIndexL,y
.b1c8	a5 13		lda $13				lda DoIndex+1
.b1ca	99 4e 07	sta $074e,y			sta DoIndexH,y
.b1cd	38		sec				sec			; fudge factor (FUFA)= $8000 - limit
.b1ce	a9 00		lda #$00			lda #0			;   the number that will trip the overflow flag
.b1d0	f5 26		sbc $26,x			sbc DStack+2,x
.b1d2	99 56 07	sta $0756,y			sta DoFuFaL,y
.b1d5	a9 80		lda #$80			lda #$80
.b1d7	f5 27		sbc $27,x			sbc DStack+3,x
.b1d9	99 5e 07	sta $075e,y			sta DoFuFaH,y
.b1dc	18		clc				clc			; index= FUFA plus original index
.b1dd	b5 24		lda $24,x			lda DStack+0,x
.b1df	79 56 07	adc $0756,y			adc DoFuFaL,y
.b1e2	85 12		sta $12				sta DoIndex+0
.b1e4	b5 25		lda $25,x			lda DStack+1,x
.b1e6	79 5e 07	adc $075e,y			adc DoFuFaH,y
.b1e9	85 13		sta $13				sta DoIndex+1
.b1eb	e8		inx				inx			; Drop orig index
.b1ec	e8		inx				inx
.b1ed	e8		inx				inx			; Drop orig limit
.b1ee	e8		inx				inx
.b1ef	60		rts				rts			; return
.b1f0	a9 f9		lda #$f9	_TooDeep:	lda #$100+err_DoLoop_TooDeep
.b1f2	20 23 b4	jsr $b423			jsr ThrowA
>b1f5	4c 6f 6f 70			L1:	.text "Loop"	;  name of word as a string, ending at wh_NameLastChar
>b1f9	04					.byte (("Loop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b1fa	24 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b1fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b1fd	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45433					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b1fe					Loop:
.b1fe	a9 05		lda #$05			lda #<_Runtime
.b200	a0 b2		ldy #$b2			ldy #>_Runtime
.b202	4c 21 b2	jmp $b221			jmp Plus_Loop_5
=7					CL	.var *-(WordListLink+wh_Xt)
=$b205					en = *	; remember here
>b1fc	07					.byte CL	;wh_CodeLength
.b205					_Runtime:
.b205	e6 12		inc $12				inc DoIndex+0
.b207	f0 02		beq $b20b			beq _Runtime2
.b209	b8		clv				clv			; return V=0 to signal loop back
.b20a	60		rts				rts
.b20b	18		clc		_Runtime2:	clc
.b20c	a5 13		lda $13				lda DoIndex+1		; handle carry from lo byte
.b20e	69 01		adc #$01			adc #1
.b210	85 13		sta $13				sta DoIndex+1
.b212	60		rts				rts			; return V to signal loop back
>b213	2b 4c 6f 6f 70			L1:	.text "+Loop"	;  name of word as a string, ending at wh_NameLastChar
>b218	05					.byte (("+Loop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b219	79 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b21b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b21c	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45464					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b21d					Plus_Loop:
.b21d	a9 2b		lda #$2b			lda #<Plus_Loop_Runtime
.b21f	a0 b2		ldy #$b2			ldy #>Plus_Loop_Runtime
.b221	20 42 b2	jsr $b242	Plus_Loop_5:	jsr Loop_End		; compile JSR _runtime, BVC back
.b224	a9 a1		lda #$a1			lda #<Unloop
.b226	a0 b2		ldy #$b2			ldy #>Unloop
.b228	4c 4a b6	jmp $b64a			jmp Compile_Comma_WithNT_YA ; compile JSR Unloop, return
=14					CL	.var *-(WordListLink+wh_Xt)
=$b22b					en = *	; remember here
>b21b	0e					.byte CL	;wh_CodeLength
.b22b					Plus_Loop_Runtime:
.b22b	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b22d	b0 10		bcs $b23f		bcs Throw_Stack_12
.b22f	18		clc				clc			; DoIndex += step
.b230	b5 24		lda $24,x			lda DStack+0,x
.b232	65 12		adc $12				adc DoIndex+0
.b234	85 12		sta $12				sta DoIndex+0
.b236	b5 25		lda $25,x			lda DStack+1,x
.b238	65 13		adc $13				adc DoIndex+1
.b23a	85 13		sta $13				sta DoIndex+1
.b23c	e8		inx				inx			; Drop step
.b23d	e8		inx				inx
.b23e	60		rts				rts			; return V=0 to signal loop back
.b23f	4c e8 b3	jmp $b3e8	Throw_Stack_12: jmp Throw_Stack
.b242					Loop_End:
.b242	20 ce cc	jsr $ccce			jsr Jsr_Comma_YA	; compile JSR runtime
.b245	a9 a9		lda #$a9			lda #<Do		; check id
.b247	20 8a b2	jsr $b28a	Loop_End_3:	jsr QPairCtlA
.b24a	a9 50		lda #$50			lda #$50		; compile BVC body
.b24c	20 61 a6	jsr $a661			jsr Branch_Comma
.b24f	ac 43 07	ldy $0743			ldy DoLeave+0		; for each leave addr entry
.b252	ad 44 07	lda $0744			lda DoLeave+1
.b255	f0 1b		beq $b272			beq _p9
.b257	84 14		sty $14		_p1:		sty tmp1+0		;   save entry pointer
.b259	85 15		sta $15				sta tmp1+1
.b25b	a0 01		ldy #$01			ldy #1			;   save link
.b25d	b1 14		lda ($14),y			lda (tmp1),y
.b25f	48		pha				pha
.b260	88		dey				dey
.b261	b1 14		lda ($14),y			lda (tmp1),y
.b263	48		pha				pha
.b264	a5 00		lda $00				lda cp+0		;   patch addr
.b266	91 14		sta ($14),y			sta (tmp1),y
.b268	a5 01		lda $01				lda cp+1
.b26a	c8		iny				iny
.b26b	91 14		sta ($14),y			sta (tmp1),y
.b26d	68		pla				pla			;   get saved link
.b26e	a8		tay				tay
.b26f	68		pla				pla
.b270	d0 e5		bne $b257			bne _p1
.b272					_p9:
.b272	20 9a b3	jsr $b39a			jsr PopYA		; restore DoLeave
.b275	8d 43 07	sta $0743			sta DoLeave+0
.b278	8c 44 07	sty $0744			sty DoLeave+1
.b27b	60		rts				rts
>b27c	3f 50 61 69 72 43 74 6c		L1:	.text "?PairCtlA"	;  name of word as a string, ending at wh_NameLastChar
>b284	41
>b285	29					.byte (("?PairCtlA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b286	98 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b288	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b289	08					.byte NN	;wh_Flags	dictionary flags
=45573					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b28a	d5 24		cmp $24,x	QPairCtlA:	cmp DStack+0,x
.b28c	f0 05		beq $b293			beq _8
.b28e	a9 ea		lda #$ea			lda #$100+err_ControlMismatch
.b290	4c 23 b4	jmp $b423			jmp ThrowA
.b293	e8		inx		_8:		inx
.b294	e8		inx				inx	; Drop n
.b295	60		rts				rts
=12					CL	.var *-(WordListLink+wh_Xt)
=$b296					en = *	; remember here
>b288	0c					.byte CL	;wh_CodeLength
>b296	55 6e 6c 6f 6f 70		L1:	.text "Unloop"	;  name of word as a string, ending at wh_NameLastChar
>b29c	06					.byte (("Unloop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b29d	05 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b29f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2a0	01					.byte CO	;wh_Flags	dictionary flags
=45596					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2a1					Unloop:
.b2a1	ac 45 07	ldy $0745			ldy DoStkIndex
.b2a4	b9 46 07	lda $0746,y			lda DoIndexL,y	; restore Index
.b2a7	85 12		sta $12				sta DoIndex+0
.b2a9	b9 4e 07	lda $074e,y			lda DoIndexH,y
.b2ac	85 13		sta $13				sta DoIndex+1
.b2ae	ee 45 07	inc $0745			inc DoStkIndex	; drop Do stack entry
=16					CL	.var *-(WordListLink+wh_Xt)
=$b2b1					en = *	; remember here
>b29f	10					.byte CL	;wh_CodeLength
.b2b1	60		rts				rts
>b2b2	4c 65 61 76 65			L1:	.text "Leave"	;  name of word as a string, ending at wh_NameLastChar
>b2b7	a5					.byte (("Leave"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b2b8	1c b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2ba	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2bb	0d					.byte IM+NN+CO	;wh_Flags	dictionary flags
=45623					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2bc					Leave:
.b2bc	a9 4c		lda #$4c			lda #$4c	; JMP abs
.b2be	20 8f cc	jsr $cc8f			jsr C_Comma_A
.b2c1	a5 01		lda $01				lda cp+1	; save cp
.b2c3	48		pha				pha
.b2c4	a5 00		lda $00				lda cp+0
.b2c6	48		pha				pha
.b2c7	ad 43 07	lda $0743			lda DoLeave+0	; compile DoLeave link, patched later
.b2ca	ac 44 07	ldy $0744			ldy DoLeave+1
.b2cd	20 a9 cc	jsr $cca9			jsr Comma_YA
.b2d0	68		pla				pla		; update DoLeave
.b2d1	8d 43 07	sta $0743			sta DoLeave+0
.b2d4	68		pla				pla
.b2d5	8d 44 07	sta $0744			sta DoLeave+1
=28					CL	.var *-(WordListLink+wh_Xt)
=$b2d8					en = *	; remember here
>b2ba	1c					.byte CL	;wh_CodeLength
.b2d8	60		rts				rts
.b2d9					Do_Leave_Init:
.b2d9	ad 43 07	lda $0743			lda DoLeave+0
.b2dc	ac 44 07	ldy $0744			ldy DoLeave+1
.b2df	20 54 b7	jsr $b754			jsr PushYA	; save old leave head
.b2e2	a9 00		lda #$00			lda #0		; init
.b2e4	8d 44 07	sta $0744			sta DoLeave+1
.b2e7	60		rts				rts
>b2e8	49				L1:	.text "I"	;  name of word as a string, ending at wh_NameLastChar
>b2e9	21					.byte (("I"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b2ea	37 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2ec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2ed	01					.byte CO	;wh_Flags	dictionary flags
=45673					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2ee	ac 45 07	ldy $0745	I:		ldy DoStkIndex
.b2f1	ca		dex				dex
.b2f2	ca		dex				dex
.b2f3	38		sec				sec		; n= fudged index - fudge factor (FUFA)
.b2f4	a5 12		lda $12				lda DoIndex+0
.b2f6	f9 56 07	sbc $0756,y			sbc DoFuFaL,y
.b2f9	95 24		sta $24,x			sta DStack+0,x
.b2fb	a5 13		lda $13				lda DoIndex+1
.b2fd	f9 5e 07	sbc $075e,y			sbc DoFuFaH,y
.b300	95 25		sta $25,x			sta DStack+1,x
=20					CL	.var *-(WordListLink+wh_Xt)
=$b302					en = *	; remember here
>b2ec	14					.byte CL	;wh_CodeLength
.b302	60		rts				rts
>b303	4a				L1:	.text "J"	;  name of word as a string, ending at wh_NameLastChar
>b304	41					.byte (("J"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b305	69 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b307	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b308	01					.byte CO	;wh_Flags	dictionary flags
=45700					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b309	ac 45 07	ldy $0745	J:		ldy DoStkIndex
.b30c	ca		dex				dex
.b30d	ca		dex				dex
.b30e	38		sec				sec		; n= 2nd fudged index - 2nd fudge factor (FUFA)
.b30f	b9 46 07	lda $0746,y			lda DoIndexL+0,y	; LSB
.b312	f9 57 07	sbc $0757,y			sbc DoFufaL+1,y
.b315	95 24		sta $24,x			sta DStack+0,x
.b317	b9 4e 07	lda $074e,y			lda DoIndexH+0,y	; MSB
.b31a	f9 5f 07	sbc $075f,y			sbc DoFufaH+1,y
.b31d	95 25		sta $25,x			sta DStack+1,x
=22					CL	.var *-(WordListLink+wh_Xt)
=$b31f					en = *	; remember here
>b307	16					.byte CL	;wh_CodeLength
.b31f	60		rts				rts
>b320	52 65 63 75 72 73 65		L1:	.text "Recurse"	;  name of word as a string, ending at wh_NameLastChar
>b327	a7					.byte (("Recurse"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b328	84 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b32a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b32b	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45735					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b32c					Recurse:
.b32c	a5 0e		lda $0e				lda workword+0
.b32e	a4 0f		ldy $0f				ldy workword+1
.b330	20 54 b7	jsr $b754			jsr PushYA
.b333	24 0c		bit $0c				bit status		; does WORKWORD contain xt or nt?
.b335	50 03		bvc $b33a			bvc +
.b337	20 8c bd	jsr $bd8c			jsr Name_To_Int		; convert nt to xt
.b33a					+
.b33a	4c cb cc	jmp $cccb			jmp Jsr_Comma		; compile JSR xt, return
=17					CL	.var *-(WordListLink+wh_Xt)
=$b33d					en = *	; remember here
>b32a	11					.byte CL	;wh_CodeLength
>b33d	41 62 6f 72 74 22		L1:	.text 'Abort"'	;  name of word as a string, ending at wh_NameLastChar
>b343	46					.byte (('Abort"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>b344	a7 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b346	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b347	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45763					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b348					Abort_Quote:
.b348	20 be b8	jsr $b8be			jsr S_Quote		; compile the string literal
.b34b	a0 b3		ldy #$b3			ldy #>_runtime		; compile JSR runtime, return
.b34d	a9 52		lda #$52			lda #<_runtime
.b34f	4c ce cc	jmp $ccce			jmp Jsr_Comma_YA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b352					en = *	; remember here
>b346	0a					.byte CL	;wh_CodeLength
.b352					_runtime:
.b352	b5 28		lda $28,x			lda DStack+4,x
.b354	15 29		ora $29,x			ora DStack+5,x
.b356	d0 03		bne $b35b			bne _do_abort	; true?
.b358	4c 02 ad	jmp $ad02			jmp ThreeDrop	; Drop three entries from the Data Stack
.b35b					_do_abort:
.b35b	20 78 cd	jsr $cd78			jsr Type	; print string
.b35e	20 d7 aa	jsr $aad7			jsr CR		; We follow Gforth in going to a new line
.b361	a9 fe		lda #$fe			lda #$100+err_AbortQuote
.b363	4c 23 b4	jmp $b423			jmp ThrowA
>b366	41 62 6f 72 74			L1:	.text "Abort"	;  name of word as a string, ending at wh_NameLastChar
>b36b	85					.byte (("Abort"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b36c	c3 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b36e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b36f	08					.byte NN	;wh_Flags	dictionary flags
=45803					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b370	a9 ff		lda #$ff	Abort:		lda #$100+err_Abort
.b372	4c 23 b4	jmp $b423			jmp ThrowA
=5					CL	.var *-(WordListLink+wh_Xt)
=$b375					en = *	; remember here
>b36e	05					.byte CL	;wh_CodeLength
>b375	50 6f 70 41			L1:	.text "PopA"	;  name of word as a string, ending at wh_NameLastChar
>b379	24					.byte (("PopA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b37a	eb b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b37c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b37d	08					.byte NN	;wh_Flags	dictionary flags
=45817					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b37e					PopA:
.b37e	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b380	b0 66		bcs $b3e8		bcs Throw_Stack
.b382	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b384	e8		inx				inx
.b385	e8		inx				inx
=8					CL	.var *-(WordListLink+wh_Xt)
=$b386					en = *	; remember here
>b37c	08					.byte CL	;wh_CodeLength
.b386	60		rts		                rts
.b387					PopA2:
.b387	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b389	b0 5d		bcs $b3e8		bcs Throw_Stack
.b38b	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b38d	e8		inx				inx
.b38e	e8		inx				inx
.b38f	60		rts		                rts
>b390	50 6f 70 59 41			L1:	.text "PopYA"	;  name of word as a string, ending at wh_NameLastChar
>b395	25					.byte (("PopYA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b396	f9 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b398	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b399	08					.byte NN	;wh_Flags	dictionary flags
=45845					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b39a					PopYA:
.b39a	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b39c	b0 4a		bcs $b3e8		bcs Throw_Stack
.b39e	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to YA
.b3a0	b4 25		ldy $25,x			ldy DStack+1,x
.b3a2	e8		inx				inx
.b3a3	e8		inx				inx
=10					CL	.var *-(WordListLink+wh_Xt)
=$b3a4					en = *	; remember here
>b398	0a					.byte CL	;wh_CodeLength
.b3a4	60		rts				rts
.b3a5					PopTmp1:
.b3a5	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b3a7	b0 3f		bcs $b3e8		bcs Throw_Stack
.b3a9	b5 24		lda $24,x			lda DStack+0,x	; PopYA
.b3ab	b4 25		ldy $25,x			ldy DStack+1,x
.b3ad	e8		inx				inx
.b3ae	e8		inx				inx
.b3af	85 14		sta $14				sta tmp1+0
.b3b1	84 15		sty $15				sty tmp1+1
.b3b3	60		rts				rts
>b3b4	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_1"	;  name of word as a string, ending at wh_NameLastChar
>b3bc	77 5f 31
>b3bf	2b					.byte (("underflow_1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b3c0	15 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b3c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b3c3	08					.byte NN	;wh_Flags	dictionary flags
=45887					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b3c4					underflow_1:
.b3c4	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b3c6	b0 20		bcs $b3e8		bcs Throw_Stack
=4					CL	.var *-(WordListLink+wh_Xt)
=$b3c8					en = *	; remember here
>b3c2	04					.byte CL	;wh_CodeLength
.b3c8	60		rts				rts
>b3c9	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_2"	;  name of word as a string, ending at wh_NameLastChar
>b3d1	77 5f 32
>b3d4	4b					.byte (("underflow_2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b3d5	3f b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b3d7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b3d8	08					.byte NN	;wh_Flags	dictionary flags
=45908					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b3d9					underflow_2:
.b3d9	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b3db	b0 0b		bcs $b3e8		bcs Throw_Stack
=4					CL	.var *-(WordListLink+wh_Xt)
=$b3dd					en = *	; remember here
>b3d7	04					.byte CL	;wh_CodeLength
.b3dd	60		rts		                rts
.b3de					underflow_3:
.b3de	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.b3e0	b0 06		bcs $b3e8		bcs Throw_Stack
.b3e2	60		rts		                rts
.b3e3					underflow_4:
.b3e3	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.b3e5	b0 01		bcs $b3e8		bcs Throw_Stack
.b3e7	60		rts		                rts
.b3e8					Throw_Stack:
.b3e8	30 04		bmi $b3ee			bmi _over
.b3ea	a9 fc		lda #$fc			lda #$100+err_Stack_Underflow
.b3ec	d0 35		bne $b423			bne ThrowA
.b3ee	a9 fd		lda #$fd	_over:		lda #$100+err_Stack_Overflow
.b3f0	d0 31		bne $b423			bne ThrowA
.b3f2					Throw_FPStack:
.b3f2	30 04		bmi $b3f8			bmi _over
.b3f4	a9 d3		lda #$d3			lda #$100+err_FPStackUnderflow
.b3f6	d0 2b		bne $b423			bne ThrowA
.b3f8	a9 d4		lda #$d4	_over:		lda #$100+err_FPStackOverflow
.b3fa	d0 27		bne $b423			bne ThrowA
.b3fc					Throw_FpOutOfRange:
.b3fc	a9 d5		lda #$d5			lda #$100+err_FpOutOfRange
.b3fe	d0 23		bne $b423			bne ThrowA
>b400	3f 53 74 61 63 6b		L1:	.text "?Stack"	;  name of word as a string, ending at wh_NameLastChar
>b406	66					.byte (("?Stack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b407	54 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b409	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b40a	08					.byte NN	;wh_Flags	dictionary flags
=45958					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b40b					QStack:
.b40b	e0 29		cpx #$29		cpx #-2*0+DStack0+1
.b40d	b0 d9		bcs $b3e8		bcs Throw_Stack
.b40f	a4 4c		ldy $4c				ldy fp			; check floating point stack
.b411	c0 0b		cpy #$0b			cpy #FDim+1
.b413	b0 dd		bcs $b3f2			bcs Throw_FPStack
=10					CL	.var *-(WordListLink+wh_Xt)
=$b415					en = *	; remember here
>b409	0a					.byte CL	;wh_CodeLength
.b415	60		rts				rts			; all OK
>b416	54 68 72 6f 77			L1:	.text "Throw"	;  name of word as a string, ending at wh_NameLastChar
>b41b	e5					.byte (("Throw"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b41c	86 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b41e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b41f	08					.byte NN	;wh_Flags	dictionary flags
=45979					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b420	20 7e b3	jsr $b37e	Throw:		jsr PopA		; pop n
.b423	20 4e b4	jsr $b44e	ThrowA:		jsr Type_Exception_Text_A ; print the associated error string
.b426	a2 28		ldx #$28			ldx #DStack0		; reset data stack (in case of underflow)
.b428					Abort_Core:
.b428	20 75 b8	jsr $b875			jsr SLiteral_runtime
.b42b	4c 31 b4	jmp $b431			  jmp +
>b42e	3f 00 20					  .text "?",0," "	; signal an error to the simulator
.b431	20 78 cd	jsr $cd78	+		jsr Type
.b434	20 94 ce	jsr $ce94			jsr R_From		; show return stack TOS
.b437	20 9e 81	jsr $819e			jsr TypeSymbol
.b43a	20 b0 ce	jsr $ceb0			jsr R_Fetch		; show return stack NOS
.b43d	20 9e 81	jsr $819e			jsr TypeSymbol
.b440	20 d7 aa	jsr $aad7			jsr CR
.b443					Abort_Core2:
.b443	a9 08		lda #$08			lda #DoStkDim		; init do stack
.b445	8d 45 07	sta $0745			sta DoStkIndex
.b448	20 92 b4	jsr $b492			jsr Empty_Stack		; empty the Data Stack & FP stack
.b44b	4c a2 b4	jmp $b4a2			jmp Quit		; continue into QUIT.
.b44e					Type_Exception_Text_A:
.b44e	85 16		sta $16				sta tmp2+0	; save error code
.b450	a9 a7		lda #$a7			lda #<Exception_Text_List
.b452	a0 da		ldy #$da			ldy #>Exception_Text_List	; for each table entry
.b454	85 18		sta $18				sta tmp3+0
.b456	84 19		sty $19				sty tmp3+1
.b458	a0 00		ldy #$00	_TestEntry:	ldy #0		;   code match?
.b45a	b1 18		lda ($18),y			lda (tmp3),y
.b45c	f0 1a		beq $b478			beq _NotFound
.b45e	c5 16		cmp $16				cmp tmp2+0
.b460	f0 11		beq $b473			beq _Found
.b462	c8		iny		-		iny		;   step to end of entry
.b463	b1 18		lda ($18),y			lda (tmp3),y
.b465	d0 fb		bne $b462			bne -
.b467	98		tya				tya		;   step to next entry
.b468	38		sec				sec
.b469	65 18		adc $18				adc tmp3+0
.b46b	85 18		sta $18				sta tmp3+0
.b46d	90 e9		bcc $b458			bcc _TestEntry
.b46f	e6 19		inc $19				inc tmp3+1
.b471	d0 e5		bne $b458			bne _TestEntry
.b473					_Found:
.b473	a0 01		ldy #$01			ldy #1
.b475	4c 9f cd	jmp $cd9f			jmp Print_ASCIIZ_tmp3_no_lf
.b478	a0 ff		ldy #$ff	_NotFound:	ldy #$ff		; print code
.b47a	a5 16		lda $16				lda tmp2+0
.b47c	20 54 b7	jsr $b754			jsr PushYA
.b47f	4c 6c cb	jmp $cb6c			jmp Dot
>b482	45 6d 70 74 79 2d 53 74		L1:	.text "Empty-Stack"	;  name of word as a string, ending at wh_NameLastChar
>b48a	61 63 6b
>b48d	6b					.byte (("Empty-Stack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b48e	9b b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b490	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b491	08					.byte NN	;wh_Flags	dictionary flags
=46093					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b492	a2 28		ldx #$28	Empty_Stack:	ldx #DStack0	; empty data stack
.b494	a9 0a		lda #$0a			lda #FDim	; empty FP stack
.b496	85 4c		sta $4c				sta fp
=6					CL	.var *-(WordListLink+wh_Xt)
=$b498					en = *	; remember here
>b490	06					.byte CL	;wh_CodeLength
.b498	60		rts				rts
>b499	51 75 69 74			L1:	.text "Quit"	;  name of word as a string, ending at wh_NameLastChar
>b49d	84					.byte (("Quit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b49e	0d b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b4a0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b4a1	08					.byte NN	;wh_Flags	dictionary flags
=46109					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b4a2					Quit:
.b4a2	8a		txa				txa		; Save the DStack that we just defined
.b4a3	a2 ff		ldx #$ff			ldx #rsp0
.b4a5	9a		txs				txs
.b4a6	aa		tax				tax		; Restore the DStack. Dude, seriously.
.b4a7	a9 00		lda #$00			lda #0		; SOURCE-ID= zero (keyboard input)
.b4a9	85 02		sta $02				sta insrc+0
.b4ab	85 03		sta $03				sta insrc+1
.b4ad	20 e1 b6	jsr $b6e1			jsr Left_Bracket_NoCheck ; switch to interpret state
.b4b0					_get_line:
.b4b0	a9 00		lda #$00			lda #<buffer0	; input buffer, this is paranoid
.b4b2	85 04		sta $04				sta cib+0
.b4b4	a9 02		lda #$02			lda #>buffer0
.b4b6	85 05		sta $05				sta cib+1
.b4b8	20 27 c2	jsr $c227			jsr Refill		; ( -- f )
.b4bb	b5 24		lda $24,x			lda DStack+0,x
.b4bd	d0 05		bne $b4c4			bne +
.b4bf	a9 6b		lda #$6b			lda #$100+err_Refill	; REFILL returned a FALSE flag, something went wrong
.b4c1	4c 23 b4	jmp $b423			jmp ThrowA
.b4c4	e8		inx		+		inx			; drop the flag
.b4c5	e8		inx				inx
.b4c6	20 dd b4	jsr $b4dd			jsr interpret
.b4c9	a5 0a		lda $0a				lda state
.b4cb	d0 06		bne $b4d3			bne _print_compiled
.b4cd	a9 53		lda #$53			lda #<str_ok
.b4cf	a0 da		ldy #$da			ldy #>str_ok
.b4d1	d0 04		bne $b4d7			bne _print
.b4d3	a9 57		lda #$57	_print_compiled: lda #<str_compiled	; "compile" string
.b4d5	a0 da		ldy #$da			ldy #>str_compiled
.b4d7	20 93 cd	jsr $cd93	_print:		jsr Print_ASCIIZ_YA
.b4da	4c b0 b4	jmp $b4b0			jmp _get_line
=59					CL	.var *-(WordListLink+wh_Xt)
=$b4dd					en = *	; remember here
>b4a0	3b					.byte CL	;wh_CodeLength
.b4dd					Interpret:
.b4dd					_loop:
.b4dd	20 0b b4	jsr $b40b			jsr QStack		; check stack bounds
.b4e0	20 45 ba	jsr $ba45			jsr parse_name		; ( "string" -- addr u )
.b4e3	b5 24		lda $24,x	                lda DStack+0,x		; empty line?
.b4e5	f0 53		beq $b53a	                beq _line_done
.b4e7	20 4a cc	jsr $cc4a			jsr Two_dup		; ( addr u -- addr u addr u )
.b4ea	20 82 bc	jsr $bc82			jsr find_name		; ( addr u addr u -- addr u nt|0 )
.b4ed	b5 25		lda $25,x			lda DStack+1,x		; word found?
.b4ef	d0 1b		bne $b50c			bne _got_name_token
.b4f1	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.b4f2	e8		inx		                inx
.b4f3	20 59 b0	jsr $b059	                jsr Number           ; ( addr u -- u|d )
.b4f6	a5 0a		lda $0a		                lda state		; interpreting?
.b4f8	f0 e3		beq $b4dd	                beq _loop		;   we're done
.b4fa	a9 20		lda #$20	                lda #$20		; double cell number?
.b4fc	24 0c		bit $0c		                bit status
.b4fe	f0 06		beq $b506	                beq _single_number
.b500	20 1b b8	jsr $b81b			jsr Two_literal		; compile a double number
.b503	4c dd b4	jmp $b4dd			jmp _loop
.b506	20 07 b7	jsr $b707	_single_number:	jsr Literal		; compile a single number
.b509	4c dd b4	jmp $b4dd			jmp _loop
.b50c					_got_name_token:
.b50c	20 0b c9	jsr $c90b			jsr Nip
.b50f	20 0b c9	jsr $c90b			jsr Nip			; ( nt )
.b512	85 14		sta $14				sta tmp1+0		; save a work copy of nt
.b514	84 15		sty $15				sty tmp1+1
.b516	20 8c bd	jsr $bd8c			jsr Name_To_Int		; ( nt -- xt )
.b519	a0 84		ldy #$84			ldy #Wh_Flags		; get word flags, we'll need them shortly
.b51b	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b51d	a4 0a		ldy $0a				ldy state		; interpreting or compiling?
.b51f	d0 0f		bne $b530			bne _compile
.b521	29 01		and #$01			and #CO			; is the word COMPILE-ONLY?
.b523	f0 05		beq $b52a			beq _execute
.b525	a9 f2		lda #$f2			lda #$100+err_CompileOnly	;   complain & quit
.b527	4c 23 b4	jmp $b423			jmp ThrowA
.b52a	20 b6 cd	jsr $cdb6	_execute:	jsr Execute		; EXECUTE the xt that is TOS
.b52d	4c dd b4	jmp $b4dd	                jmp _loop
.b530					_compile:
.b530	29 04		and #$04			and #IM			; is the word IMMEDIATE?
.b532	d0 f6		bne $b52a			bne _execute		;   IMMEDIATE word, execute now
.b534	20 4d b6	jsr $b64d			jsr Compile_Comma_WithNT ; Compile the xt into the Dictionary
.b537	4c dd b4	jmp $b4dd			jmp _loop
.b53a					_line_done:
.b53a	e8		inx				inx			; drop stuff from PARSE_NAME
.b53b	e8		inx				inx
.b53c	e8		inx				inx
.b53d	e8		inx				inx
.b53e	60		rts				rts
>b53f	49 6d 6d 65 64 69 61 74		L1:	.text "Immediate"	;  name of word as a string, ending at wh_NameLastChar
>b547	65
>b548	a9					.byte (("Immediate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b549	1d b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b54b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b54c	08					.byte NN	;wh_Flags	dictionary flags
=46280					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b54d	a9 04		lda #$04	Immediate:	lda #IM
.b54f	48		pha		SetFlag:	pha
.b550	20 16 ba	jsr $ba16			jsr current_to_dp
.b553	a0 84		ldy #$84			ldy #Wh_Flags
.b555	68		pla				pla
.b556	11 10		ora ($10),y			ora (dp),y
.b558	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b55a					en = *	; remember here
>b54b	0d					.byte CL	;wh_CodeLength
.b55a	60		rts				rts
>b55b	43 6f 6d 70 69 6c 65 2d		L1:	.text "Compile-only"	;  name of word as a string, ending at wh_NameLastChar
>b563	6f 6e 6c 79
>b567	2c					.byte (("Compile-only"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b568	c8 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b56a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b56b	08					.byte NN	;wh_Flags	dictionary flags
=46311					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b56c	a9 01		lda #$01	Compile_Only:	lda #CO
.b56e	d0 df		bne $b54f			bne SetFlag
=4					CL	.var *-(WordListLink+wh_Xt)
=$b570					en = *	; remember here
>b56a	04					.byte CL	;wh_CodeLength
>b570	6e 65 76 65 72 2d 6e 61		L1:	.text "never-native"	;  name of word as a string, ending at wh_NameLastChar
>b578	74 69 76 65
>b57c	ac					.byte (("never-native"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b57d	e7 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b57f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b580	08					.byte NN	;wh_Flags	dictionary flags
=46332					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b581	20 16 ba	jsr $ba16	Never_Native:	jsr current_to_dp
.b584	a0 84		ldy #$84			ldy #Wh_Flags
.b586	b1 10		lda ($10),y			lda (dp),y
.b588	09 08		ora #$08			ora #NN		; set NN flag
.b58a	29 fd		and #$fd			and #$ff-AN	; clear AN flag
.b58c	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b58e					en = *	; remember here
>b57f	0d					.byte CL	;wh_CodeLength
.b58e	60		rts				rts
>b58f	61 6c 77 61 79 73 2d 6e		L1:	.text "always-native"	;  name of word as a string, ending at wh_NameLastChar
>b597	61 74 69 76 65
>b59c	ad					.byte (("always-native"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b59d	fc b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b59f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5a0	08					.byte NN	;wh_Flags	dictionary flags
=46364					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5a1	20 16 ba	jsr $ba16	Always_Native:	jsr current_to_dp
.b5a4	a0 84		ldy #$84			ldy #Wh_Flags
.b5a6	b1 10		lda ($10),y			lda (dp),y
.b5a8	09 02		ora #$02			ora #AN		; Make sure AN flag is set
.b5aa	29 f7		and #$f7			and #$ff-NN	; and NN flag is clear.
.b5ac	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b5ae					en = *	; remember here
>b59f	0d					.byte CL	;wh_CodeLength
.b5ae	60		rts				rts
>b5af	61 6c 6c 6f 77 2d 6e 61		L1:	.text "allow-native"	;  name of word as a string, ending at wh_NameLastChar
>b5b7	74 69 76 65
>b5bb	ac					.byte (("allow-native"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b5bc	1c b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5bf	08					.byte NN	;wh_Flags	dictionary flags
=46395					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5c0	20 16 ba	jsr $ba16	Allow_Native:	jsr current_to_dp
.b5c3	a0 84		ldy #$84			ldy #Wh_Flags	; offset for status byte
.b5c5	b1 10		lda ($10),y			lda (dp),y
.b5c7	29 f5		and #$f5			and #$ff-NN-AN	; AN and NN flag is clear.
.b5c9	91 10		sta ($10),y			sta (dp),y
=11					CL	.var *-(WordListLink+wh_Xt)
=$b5cb					en = *	; remember here
>b5be	0b					.byte CL	;wh_CodeLength
.b5cb	60		rts				rts
>b5cc	6e 63 2d 6c 69 6d 69 74		L1:	.text "nc-limit"	;  name of word as a string, ending at wh_NameLastChar
>b5d4	88					.byte (("nc-limit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b5d5	3b b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5d7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5d8	08					.byte NN	;wh_Flags	dictionary flags
=46420					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5d9	a0 03		ldy #$03			ldy #>nc_limit
.b5db	a9 02		lda #$02			lda #<nc_limit
.b5dd	4c 54 b7	jmp $b754			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b5e0					en = *	; remember here
>b5d7	07					.byte CL	;wh_CodeLength
>b5e0	73 74 72 69 70 2d 75 6e		L1:	.text "strip-underflow"	;  name of word as a string, ending at wh_NameLastChar
>b5e8	64 65 72 66 6c 6f 77
>b5ef	ef					.byte (("strip-underflow"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b5f0	54 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5f2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5f3	08					.byte NN	;wh_Flags	dictionary flags
=46447					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5f4	a0 03		ldy #$03			ldy #>uf_strip
.b5f6	a9 04		lda #$04			lda #<uf_strip
.b5f8	4c 54 b7	jmp $b754			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b5fb					en = *	; remember here
>b5f2	07					.byte CL	;wh_CodeLength
>b5fb	70 6f 73 74 70 6f 6e 65		L1:	.text "postpone"	;  name of word as a string, ending at wh_NameLastChar
>b603	a8					.byte (("postpone"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b604	6f b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b606	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b607	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=46467					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b608					Postpone:
.b608	20 76 ba	jsr $ba76			jsr parse_name_check	; ( -- addr n )
.b60b	20 ae bc	jsr $bcae			jsr find_name_check	; ( -- nt | 0 )
.b60e	b5 24		lda $24,x			lda DStack+0,x
.b610	85 14		sta $14				sta tmp1+0
.b612	b5 25		lda $25,x			lda DStack+1,x
.b614	85 15		sta $15				sta tmp1+1
.b616	20 8c bd	jsr $bd8c			jsr Name_To_Int	; ( nt -- xt )
.b619	a0 84		ldy #$84			ldy #Wh_Flags		; IMMEDIATE word?
.b61b	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b61d	29 04		and #$04			and #IM
.b61f	f0 03		beq $b624			beq _not_immediate
.b621	4c 4d b6	jmp $b64d			jmp Compile_Comma_WithNT ; compile it
.b624					_not_immediate:
.b624	20 3a b7	jsr $b73a			jsr LDYA_Immed_Comma		; compile LDA #; LDY # with xt of the word
.b627	a0 b6		ldy #$b6			ldy #>Compile_Comma_WithNT_YA	; compile COMPILE,
.b629	a9 4a		lda #$4a			lda #<Compile_Comma_WithNT_YA
.b62b	4c ce cc	jmp $ccce			jmp Jsr_Comma_YA
=38					CL	.var *-(WordListLink+wh_Xt)
=$b62e					en = *	; remember here
>b606	26					.byte CL	;wh_CodeLength
>b62e	43 6f 6d 70 69 6c 65 2c		L1:	.text "Compile,"	;  name of word as a string, ending at wh_NameLastChar
>b636	88					.byte (("Compile,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b637	83 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b639	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b63a	08					.byte NN	;wh_Flags	dictionary flags
=46518					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b63b	20 9a b3	jsr $b39a	Compile_Comma:	jsr PopYA		; pop xt (check stack, skippable)
.b63e	20 54 b7	jsr $b754	Compile_Comma_YA: jsr PushYA		; push xt
.b641	20 f0 ce	jsr $cef0			jsr Dup			; ( xt xt )
.b644	20 34 bd	jsr $bd34			jsr Int_To_Name		; ( xt nt )	does a dictionary search
.b647	4c 55 b6	jmp $b655			jmp Compile_Comma_B
.b64a	20 54 b7	jsr $b754	Compile_Comma_WithNT_YA: jsr PushYA
.b64d					Compile_Comma_WithNT:
.b64d	20 f0 ce	jsr $cef0			jsr Dup
.b650	a9 7b		lda #$7b			lda #$100-wh_xt		; convert xt to nt
.b652	20 d5 c9	jsr $c9d5			jsr Minus_A
.b655					Compile_Comma_B:
.b655	b5 24		lda $24,x			lda DStack+0,x		; tmp5 = nt
.b657	85 1c		sta $1c				sta tmp5+0
.b659	b5 25		lda $25,x			lda DStack+1,x
.b65b	85 1d		sta $1d				sta tmp5+1
.b65d	f0 36		beq $b695			beq _jsr		; no nt found (we have no flags) ?
.b65f	a0 83		ldy #$83			ldy #wh_CodeLength
.b661	b1 1c		lda ($1c),y			lda (tmp5),y
.b663	95 24		sta $24,x			sta DStack+0,x		; ( xt u )
.b665	a0 84		ldy #$84			ldy #Wh_Flags		; save word flags
.b667	b1 1c		lda ($1c),y			lda (tmp5),y
.b669	95 25		sta $25,x			sta DStack+1,x
.b66b	29 02		and #$02			and #AN			; Always Native (AN) word?
.b66d	d0 2b		bne $b69a			bne _inline
.b66f	b5 25		lda $25,x			lda DStack+1,x		; Never Native (NN) word?
.b671	29 08		and #$08			and #NN
.b673	d0 0e		bne $b683			bne _jsr_opt
.b675	ad 03 03	lda $0303			lda nc_limit+1		; wordsize<=nc_limit?
.b678	d0 20		bne $b69a			bne _inline
.b67a	ad 02 03	lda $0302			lda nc_limit+0
.b67d	d5 24		cmp $24,x			cmp DStack+0,x
.b67f	f0 02		beq $b683			beq _jsr_opt
.b681	b0 17		bcs $b69a			bcs _inline
.b683					_jsr_opt:
.b683	ad 04 03	lda $0304			lda uf_strip
.b686	f0 0d		beq $b695			beq _jsr
.b688	b5 25		lda $25,x			lda DStack+1,x		; underflow strip & not stack strip?
.b68a	49 10		eor #$10			eor #UF
.b68c	29 50		and #$50			and #UF+R6
.b68e	d0 05		bne $b695			bne _jsr
.b690	a9 03		lda #$03			lda #3			; skip the underflow check
.b692	20 9f c9	jsr $c99f			jsr Nos_Plus_A
.b695					_jsr:
.b695	e8		inx				inx			; Drop len or nt
.b696	e8		inx				inx
.b697	4c cb cc	jmp $cccb			jmp Jsr_Comma		; compile jsr, return
.b69a					_inline:
.b69a	b5 25		lda $25,x			lda DStack+1,x		; this word contains RTS addr save & restore?
.b69c	29 40		and #$40			and #R6
.b69e	f0 0a		beq $b6aa			beq +
.b6a0	a9 06		lda #$06			lda #6			;   Adjust xt: skip over the leading RTS addr save
.b6a2	20 9f c9	jsr $c99f			jsr Nos_Plus_A
.b6a5	a9 f4		lda #$f4			lda #$f4		;   Adjust u: omit the leading RTS addr save & trailing RTS addr restore
.b6a7	20 d5 c9	jsr $c9d5			jsr minus_a
.b6aa					+
.b6aa	ad 04 03	lda $0304			lda uf_strip+0		; user wants underflow stripping?
.b6ad	f0 10		beq $b6bf			beq +
.b6af	b5 25		lda $25,x			lda DStack+1,x		; this word contains underflow checking?
.b6b1	29 10		and #$10			and #UF
.b6b3	f0 0a		beq $b6bf			beq +
.b6b5	a9 03		lda #$03			lda #3			;   Adjust xt: Start after underflow check
.b6b7	20 9f c9	jsr $c99f			jsr Nos_Plus_A
.b6ba	a9 fd		lda #$fd			lda #$fd		;   Adjust u: omit underflow check
.b6bc	20 d5 c9	jsr $c9d5			jsr minus_a
.b6bf					+
.b6bf	b5 24		lda $24,x			lda DStack+0,x		; compile code bytes
.b6c1	f0 0c		beq $b6cf			beq _copy_end
.b6c3	a1 26		lda ($26,x)	_copy_loop:	lda (DStack+2,x)
.b6c5	20 8f cc	jsr $cc8f			jsr C_Comma_A
.b6c8	20 f0 c9	jsr $c9f0			jsr NOS_One_Plus
.b6cb	d6 24		dec $24,x			dec DStack+0,x
.b6cd	d0 f4		bne $b6c3			bne _copy_loop
.b6cf					_copy_end:
.b6cf	4c b1 c4	jmp $c4b1			jmp Two_drop
=151					CL	.var *-(WordListLink+wh_Xt)
=$b6d2					en = *	; remember here
>b639	97					.byte CL	;wh_CodeLength
>b6d2	5b				L1:	.text "["	;  name of word as a string, ending at wh_NameLastChar
>b6d3	61					.byte (("["[-1]&7)<<5)+(*-L1)	;wh_HNL
>b6d4	b6 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6d6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6d7	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=46675					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6d8	a5 0a		lda $0a		Left_Bracket:	lda state+0		; Already in the interpret state?
.b6da	d0 05		bne $b6e1			bne Left_Bracket_NoCheck
.b6dc	a9 69		lda #$69			lda #$100+err_AlreadyInterpreting
.b6de	4c 23 b4	jmp $b423			jmp ThrowA
.b6e1					Left_Bracket_NoCheck:
.b6e1	a9 00		lda #$00			lda #0
.b6e3	85 0a		sta $0a		Left_Bracket_3:	sta state+0
.b6e5	85 0b		sta $0b				sta state+1
=15					CL	.var *-(WordListLink+wh_Xt)
=$b6e7					en = *	; remember here
>b6d6	0f					.byte CL	;wh_CodeLength
.b6e7	60		rts				rts
>b6e8	5d				L1:	.text "]"	;  name of word as a string, ending at wh_NameLastChar
>b6e9	a1					.byte (("]"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b6ea	53 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6ec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6ed	0c					.byte IM+NN	;wh_Flags	dictionary flags
=46697					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6ee					Right_Bracket:
.b6ee	a5 0a		lda $0a				lda state+0		; Already in the compile state?
.b6f0	f0 05		beq $b6f7			beq +
.b6f2	a9 68		lda #$68			lda #$100+err_AlreadyCompiling ;   complain and quit
.b6f4	4c 23 b4	jmp $b423			jmp ThrowA
.b6f7					+
.b6f7	a9 ff		lda #$ff			lda #$FF
.b6f9	d0 e8		bne $b6e3			bne Left_Bracket_3
=13					CL	.var *-(WordListLink+wh_Xt)
=$b6fb					en = *	; remember here
>b6ec	0d					.byte CL	;wh_CodeLength
>b6fb	4c 69 74 65 72 61 6c		L1:	.text "Literal"	;  name of word as a string, ending at wh_NameLastChar
>b702	87					.byte (("Literal"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b703	69 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b705	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b706	1d					.byte IM+CO+UF+NN	;wh_Flags	dictionary flags
=46722					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b707					Literal:
.b707	20 c4 b3	jsr $b3c4			jsr underflow_1
.b70a	20 10 b7	jsr $b710			jsr LitCompile		; compile load regs, choose a runtime routine
.b70d	4c 4a b6	jmp $b64a			jmp Compile_Comma_WithNT_YA ; compile JSR runtime
=9					CL	.var *-(WordListLink+wh_Xt)
=$b710					en = *	; remember here
>b705	09					.byte CL	;wh_CodeLength
.b710					LitCompile:
.b710	b5 25		lda $25,x			lda DStack+1,x		; hi byte zero?
.b712	f0 08		beq $b71c			beq _ZByte
.b714	20 3a b7	jsr $b73a			jsr ldya_immed_comma	; compile "ldy #; lda #" using TOS
.b717	a9 54		lda #$54			lda #<PushYA		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b719	a0 b7		ldy #$b7			ldy #>PushYA
.b71b	60		rts				rts
.b71c					_ZByte:
.b71c	b4 24		ldy $24,x			ldy DStack+0,x		; is it 0 ?
.b71e	f0 08		beq $b728			beq _zero
.b720	20 41 b7	jsr $b741			jsr lda_immed_comma	; compile "lda #" using TOS
.b723	a9 96		lda #$96			lda #<PushZA		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b725	a0 b7		ldy #$b7			ldy #>PushZA
.b727	60		rts				rts
.b728	e8		inx		_zero:		inx			; drop
.b729	e8		inx				inx
.b72a	a9 a5		lda #$a5			lda #<Zero		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b72c	a0 b7		ldy #$b7			ldy #>Zero
.b72e	60		rts				rts
>b72f	4c 44 59 41 23 2c		L1:	.text "LDYA#,"	;  name of word as a string, ending at wh_NameLastChar
>b735	86					.byte (("LDYA#,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b736	82 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b738	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b739	08					.byte NN	;wh_Flags	dictionary flags
=46773					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b73a					ldya_immed_comma:
.b73a	a9 a0		lda #$a0			lda #$a0		; ldy #
.b73c	b4 25		ldy $25,x			ldy DStack+1,x
.b73e	20 a9 cc	jsr $cca9			jsr Comma_YA
.b741					lda_immed_comma:
.b741	a9 a9		lda #$a9			lda #$a9		; lda #
.b743	20 8f cc	jsr $cc8f			jsr C_Comma_A
.b746	4c 8c cc	jmp $cc8c			jmp C_Comma
=15					CL	.var *-(WordListLink+wh_Xt)
=$b749					en = *	; remember here
>b738	0f					.byte CL	;wh_CodeLength
>b749	50 75 73 68 59 41		L1:	.text "PushYA"	;  name of word as a string, ending at wh_NameLastChar
>b74f	26					.byte (("PushYA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b750	b5 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b752	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b753	00					.byte 0	;wh_Flags	dictionary flags
=46799					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b754	ca		dex		PushYA:		dex
.b755	ca		dex				dex
.b756	95 24		sta $24,x			sta DStack+0,x
.b758	94 25		sty $25,x			sty DStack+1,x
=6					CL	.var *-(WordListLink+wh_Xt)
=$b75a					en = *	; remember here
>b752	06					.byte CL	;wh_CodeLength
.b75a	60		rts				rts
>b75b	42 61 73 65			L1:	.text "Base"	;  name of word as a string, ending at wh_NameLastChar
>b75f	a4					.byte (("Base"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b760	cf b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b762	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b763	08					.byte NN	;wh_Flags	dictionary flags
=46815					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b764	a0 03		ldy #$03			ldy #>base
.b766	a9 00		lda #$00			lda #<base
.b768	4c 54 b7	jmp $b754			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b76b					en = *	; remember here
>b762	07					.byte CL	;wh_CodeLength
>b76b	54 72 75 65			L1:	.text "True"	;  name of word as a string, ending at wh_NameLastChar
>b76f	a4					.byte (("True"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b770	df b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b772	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b773	00					.byte 0	;wh_Flags	dictionary flags
=46831					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b774	a9 ff		lda #$ff	True:		lda #$FF
.b776	ca		dex		PushAA:		dex
.b777	ca		dex				dex
.b778	95 24		sta $24,x			sta DStack+0,x
.b77a	95 25		sta $25,x			sta DStack+1,x
=8					CL	.var *-(WordListLink+wh_Xt)
=$b77c					en = *	; remember here
>b772	08					.byte CL	;wh_CodeLength
.b77c	60		rts				rts
>b77d	46 61 6c 73 65			L1:	.text "False"	;  name of word as a string, ending at wh_NameLastChar
>b782	a5					.byte (("False"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b783	ef b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b785	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b786	08					.byte NN	;wh_Flags	dictionary flags
=46850					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b787	a9 00		lda #$00	False:		lda #0
.b789	f0 0b		beq $b796			beq PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b78b					en = *	; remember here
>b785	04					.byte CL	;wh_CodeLength
>b78b	50 75 73 68 5a 41		L1:	.text "PushZA"	;  name of word as a string, ending at wh_NameLastChar
>b791	26					.byte (("PushZA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b792	02 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b794	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b795	00					.byte 0	;wh_Flags	dictionary flags
=46865					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b796	ca		dex		PushZA:		dex
.b797	ca		dex				dex
.b798	95 24		sta $24,x			sta DStack+0,x
.b79a	a9 00		lda #$00			lda #0
.b79c	95 25		sta $25,x			sta DStack+1,x
=8					CL	.var *-(WordListLink+wh_Xt)
=$b79e					en = *	; remember here
>b794	08					.byte CL	;wh_CodeLength
.b79e	60		rts				rts
>b79f	30				L1:	.text "0"	;  name of word as a string, ending at wh_NameLastChar
>b7a0	01					.byte (("0"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7a1	11 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7a3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7a4	08					.byte NN	;wh_Flags	dictionary flags
=46880					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7a5	a9 00		lda #$00	Zero:		lda #0
.b7a7	f0 ed		beq $b796			beq PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b7a9					en = *	; remember here
>b7a3	04					.byte CL	;wh_CodeLength
>b7a9	31				L1:	.text "1"	;  name of word as a string, ending at wh_NameLastChar
>b7aa	21					.byte (("1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7ab	20 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7ad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7ae	08					.byte NN	;wh_Flags	dictionary flags
=46890					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7af	a9 01		lda #$01	One:		lda #1
.b7b1	d0 e3		bne $b796			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b7b3					en = *	; remember here
>b7ad	04					.byte CL	;wh_CodeLength
>b7b3	32				L1:	.text "2"	;  name of word as a string, ending at wh_NameLastChar
>b7b4	41					.byte (("2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7b5	2a b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7b8	08					.byte NN	;wh_Flags	dictionary flags
=46900					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7b9	a9 02		lda #$02	Two:		lda #2
.b7bb	d0 d9		bne $b796			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b7bd					en = *	; remember here
>b7b7	04					.byte CL	;wh_CodeLength
>b7bd	42 6c				L1:	.text "Bl"	;  name of word as a string, ending at wh_NameLastChar
>b7bf	82					.byte (("Bl"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7c0	34 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7c3	08					.byte NN	;wh_Flags	dictionary flags
=46911					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7c4	a9 20		lda #$20	Bl:		lda #AscSP
.b7c6	d0 ce		bne $b796			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b7c8					en = *	; remember here
>b7c2	04					.byte CL	;wh_CodeLength
>b7c8	3e 49 6e			L1:	.text ">In"	;  name of word as a string, ending at wh_NameLastChar
>b7cb	c3					.byte ((">In"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7cc	3f b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7cf	08					.byte NN	;wh_Flags	dictionary flags
=46923					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7d0	a9 08		lda #$08			lda #ToIn
.b7d2	4c 96 b7	jmp $b796			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b7d5					en = *	; remember here
>b7ce	05					.byte CL	;wh_CodeLength
>b7d5	53 74 61 74 65			L1:	.text "State"	;  name of word as a string, ending at wh_NameLastChar
>b7da	a5					.byte (("State"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7db	4b b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7de	08					.byte NN	;wh_Flags	dictionary flags
=46938					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7df	a9 0a		lda #$0a			lda #state
.b7e1	4c 96 b7	jmp $b796			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b7e4					en = *	; remember here
>b7dd	05					.byte CL	;wh_CodeLength
>b7e4	64 70				L1:	.text "dp"	;  name of word as a string, ending at wh_NameLastChar
>b7e6	02					.byte (("dp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7e7	5a b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7e9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7ea	08					.byte NN	;wh_Flags	dictionary flags
=46950					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7eb	a9 10		lda #$10			lda #dp
.b7ed	4c 96 b7	jmp $b796			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b7f0					en = *	; remember here
>b7e9	05					.byte CL	;wh_CodeLength
>b7f0	54 6d 70 31			L1:	.text "Tmp1"	;  name of word as a string, ending at wh_NameLastChar
>b7f4	24					.byte (("Tmp1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7f5	66 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7f8	08					.byte NN	;wh_Flags	dictionary flags
=46964					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7f9	a9 14		lda #$14			lda #tmp1
.b7fb	4c 96 b7	jmp $b796			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b7fe					en = *	; remember here
>b7f7	05					.byte CL	;wh_CodeLength
>b7fe	44 53 74 61 63 6b		L1:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
>b804	66					.byte (("DStack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b805	74 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b807	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b808	08					.byte NN	;wh_Flags	dictionary flags
=46980					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b809	a9 24		lda #$24			lda #DStack
.b80b	4c 96 b7	jmp $b796			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b80e					en = *	; remember here
>b807	05					.byte CL	;wh_CodeLength
>b80e	32 4c 69 74 65 72 61 6c		L1:	.text "2Literal"	;  name of word as a string, ending at wh_NameLastChar
>b816	88					.byte (("2Literal"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b817	84 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b819	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b81a	1c					.byte UF+IM+NN	;wh_Flags	dictionary flags
=46998					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b81b					Two_literal:
.b81b	20 d9 b3	jsr $b3d9			jsr underflow_2 ; double number
.b81e	20 0e cf	jsr $cf0e			jsr Swap
.b821	20 07 b7	jsr $b707			jsr Literal	; do lo cell
.b824	4c 07 b7	jmp $b707			jmp Literal	; do hi cell
=12					CL	.var *-(WordListLink+wh_Xt)
=$b827					en = *	; remember here
>b819	0c					.byte CL	;wh_CodeLength
>b827	53 4c 69 74 65 72 61 6c		L1:	.text "SLiteral"	;  name of word as a string, ending at wh_NameLastChar
>b82f	88					.byte (("SLiteral"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b830	96 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b832	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b833	1d					.byte CO+IM+UF+NN	;wh_Flags	dictionary flags
=47023					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b834					SLiteral:
.b834	20 d9 b3	jsr $b3d9			jsr underflow_2
.b837	20 57 b8	jsr $b857			jsr SLiteral_Start	; compile header
.b83a	4c 4b b8	jmp $b84b			jmp _Move_Test
.b83d	a1 28		lda ($28,x)	_Move_Loop:	lda (DStack+4,x)
.b83f	20 8f cc	jsr $cc8f			jsr C_Comma_A
.b842	f6 28		inc $28,x			inc DStack+4,x
.b844	d0 02		bne $b848			bne +
.b846	f6 29		inc $29,x			inc DStack+5,x
.b848					+
.b848	20 cc c9	jsr $c9cc			jsr NOS_One_Minus
.b84b	b5 26		lda $26,x	_Move_Test:	lda DStack+2,x
.b84d	15 27		ora $27,x			ora DStack+3,x
.b84f	d0 ec		bne $b83d			bne _Move_Loop
.b851	20 64 b8	jsr $b864			jsr SLiteral_End
.b854	4c b1 c4	jmp $c4b1			jmp Two_Drop		; clean up and leave
=35					CL	.var *-(WordListLink+wh_Xt)
=$b857					en = *	; remember here
>b832	23					.byte CL	;wh_CodeLength
.b857					SLiteral_Start:
.b857	a9 75		lda #$75			lda #<SLiteral_runtime	; compile JSR SLiteral_Runtime
.b859	a0 b8		ldy #$b8			ldy #>SLiteral_runtime
.b85b	20 ce cc	jsr $ccce			jsr Jsr_Comma_YA
.b85e	20 b2 c9	jsr $c9b2			jsr Here		; push addr of start of JMP
.b861	4c e5 cc	jmp $cce5			jmp Jmp_Comma_YA	; compile JMP around string (dummy addr)
.b864					SLiteral_End:
.b864	20 e6 c9	jsr $c9e6			jsr One_Plus
.b867	a5 00		lda $00				lda cp+0		; Update the address of the jump to HERE.
.b869	81 24		sta ($24,x)			sta (DStack+0,x)
.b86b	20 e6 c9	jsr $c9e6			jsr One_Plus
.b86e	a5 01		lda $01				lda cp+1
.b870	81 24		sta ($24,x)			sta (DStack+0,x)
.b872	e8		inx				inx			; drop herej
.b873	e8		inx				inx
.b874	60		rts				rts
.b875					SLiteral_Runtime:
.b875	86 16		stx $16				stx tmp2	; save data stack index
.b877	ba		tsx				tsx
.b878	bd 01 01	lda $0101,x	SLiteral_Run2:	lda RStack+1,x	; tmp1= RTS addr
.b87b	85 14		sta $14				sta tmp1+0
.b87d	bd 02 01	lda $0102,x			lda RStack+2,x
.b880	85 15		sta $15				sta tmp1+1
.b882	a6 16		ldx $16				ldx tmp2	; restore data stack index
.b884	ca		dex				dex		; push string addr
.b885	ca		dex				dex
.b886	18		clc				clc
.b887	a5 14		lda $14				lda tmp1+0
.b889	69 04		adc #$04			adc #3+1	;   just after the following JMP + correcting for JSR behavior
.b88b	95 24		sta $24,x			sta DStack+0,x
.b88d	a5 15		lda $15				lda tmp1+1
.b88f	69 00		adc #$00			adc #0
.b891	95 25		sta $25,x			sta DStack+1,x
.b893	ca		dex				dex		; push string length
.b894	ca		dex				dex
.b895	38		sec				sec
.b896	a0 02		ldy #$02			ldy #2		;   = string_end - string_addr
.b898	b1 14		lda ($14),y			lda (tmp1),y
.b89a	f5 26		sbc $26,x			sbc DStack+2,x
.b89c	95 24		sta $24,x			sta DStack+0,x
.b89e	c8		iny				iny
.b89f	b1 14		lda ($14),y			lda (tmp1),y
.b8a1	f5 27		sbc $27,x			sbc DStack+3,x
.b8a3	95 25		sta $25,x			sta DStack+1,x
.b8a5	60		rts				rts
>b8a6	2e 22				L1:	.text '."'	;  name of word as a string, ending at wh_NameLastChar
>b8a8	42					.byte (('."'[-1]&7)<<5)+(*-L1)	;wh_HNL
>b8a9	af b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b8ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b8ac	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=47144					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b8ad					Dot_quote:
.b8ad	20 be b8	jsr $b8be			jsr S_Quote		; compile the string literal
.b8b0	a0 cd		ldy #$cd			ldy #>Type		; compile: print string
.b8b2	a9 78		lda #$78			lda #<Type
.b8b4	4c ce cc	jmp $ccce			jmp Jsr_Comma_YA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b8b7					en = *	; remember here
>b8ab	0a					.byte CL	;wh_CodeLength
>b8b7	53 22				L1:	.text 'S"'	;  name of word as a string, ending at wh_NameLastChar
>b8b9	42					.byte (('S"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>b8ba	28 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b8bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b8bd	0c					.byte IM+NN	;wh_Flags	dictionary flags
=47161					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b8be					S_Quote:
.b8be	a9 00		lda #$00			lda #0		; Don't handle escaped chars.
.b8c0					S_Quote_start:
.b8c0	48		pha				pha			; save "handle escaped chars" flag
.b8c1	a5 0a		lda $0a				lda state		; compiling?
.b8c3	f0 06		beq $b8cb			beq _15
.b8c5	20 57 b8	jsr $b857			jsr SLiteral_Start	; compile SLiteral header
.b8c8	4c ce b8	jmp $b8ce			jmp _19
.b8cb	20 b2 c9	jsr $c9b2	_15:		jsr Here		; remember start addr
.b8ce					_19:
.b8ce	68		pla				pla			; init t2 flags
.b8cf	20 96 b7	jsr $b796			jsr PushZA
.b8d2	20 a5 b7	jsr $b7a5			jsr Zero		; init t3 flags
.b8d5					_savechars_loop:
.b8d5	a5 08		lda $08				lda toin+0		; LSB
.b8d7	c5 06		cmp $06				cmp ciblen+0
.b8d9	a5 09		lda $09				lda toin+1		; MSB
.b8db	e5 07		sbc $07				sbc ciblen+1
.b8dd	90 10		bcc $b8ef			bcc _input_fine		; input buffer empty?
.b8df	20 27 c2	jsr $c227			jsr Refill		; Refill it  ( -- f )
.b8e2	b5 24		lda $24,x			lda DStack+0,x		; Check result of refill.
.b8e4	d0 05		bne $b8eb			bne +
.b8e6	a9 6b		lda #$6b			lda #$100+err_refill	; Something when wrong with refill.
.b8e8	4c 23 b4	jmp $b423			jmp ThrowA
.b8eb	e8		inx		+		inx			; Drop the refill flag
.b8ec	e8		inx				inx
.b8ed	d0 e6		bne $b8d5			bne _savechars_loop	; jump back up to the empty check, just in
.b8ef					_input_fine:
.b8ef	18		clc				clc			; tmp1= A= the char at Cib+ToIn
.b8f0	a5 04		lda $04				lda cib+0
.b8f2	85 14		sta $14				sta tmp1+0
.b8f4	a5 05		lda $05				lda cib+1
.b8f6	65 09		adc $09				adc toin+1
.b8f8	85 15		sta $15				sta tmp1+1
.b8fa	a4 08		ldy $08				ldy ToIn
.b8fc	b1 14		lda ($14),y			lda (tmp1),y
.b8fe	85 14		sta $14				sta tmp1
.b900	e6 08		inc $08				inc toin+0		; Move on to the next character.
.b902	d0 02		bne $b906			bne +
.b904	e6 09		inc $09				inc toin+1
.b906					+
.b906	b4 26		ldy $26,x			ldy DStack+2,x		; handling escaped characters?
.b908	30 03		bmi $b90d			bmi +
.b90a	4c b0 b9	jmp $b9b0			jmp _regular_char
.b90d					+
.b90d	b4 27		ldy $27,x			ldy DStack+3,x  		; already seen the backslash?
.b90f	30 03		bmi $b914			bmi +
.b911	4c a6 b9	jmp $b9a6			jmp _not_escaped
.b914					+
.b914	84 15		sty $15				sty tmp1+1
.b916	24 15		bit $15				bit tmp1+1		; in the middle of a \x sequence ?
.b918	70 25		bvs $b93f			bvs _check_esc_chars
.b91a	a9 01		lda #$01			lda #1
.b91c	24 15		bit $15				bit tmp1+1
.b91e	d0 11		bne $b931			bne _esc_x_second_digit
.b920	c8		iny				iny			; Adjust flag for second digit next time.
.b921	94 27		sty $27,x			sty DStack+3,x
.b923	a5 14		lda $14				lda tmp1+0		; Get the char again.
.b925	20 d3 b9	jsr $b9d3			jsr convert_hex_value	; Convert to hex
.b928	0a		asl a				asl			; This is the upper nybble, so move it up.
.b929	0a		asl a				asl
.b92a	0a		asl a				asl
.b92b	0a		asl a				asl
.b92c	95 24		sta $24,x			sta DStack+0,x		; Save it for later.
.b92e	4c b7 b9	jmp $b9b7			jmp _next_character
.b931					_esc_x_second_digit:
.b931	a9 00		lda #$00			lda #0			; Clear the escaped character flag
.b933	95 27		sta $27,x			sta DStack+3,x		;   (because we are handling it right here)
.b935	a5 14		lda $14				lda tmp1+0		; Convert to hex
.b937	20 d3 b9	jsr $b9d3			jsr convert_hex_value
.b93a	15 24		ora $24,x			ora DStack+0,x		; combine with value in t3
.b93c	4c b4 b9	jmp $b9b4			jmp _save_character
.b93f					_check_esc_chars:
.b93f	a0 00		ldy #$00			ldy #0
.b941	94 27		sty $27,x			sty DStack+3,x
.b943	a8		tay				tay
.b944	a9 07		lda #$07			lda #AscBELL	      ; BEL (ASCII value 7)
.b946	c0 61		cpy #$61			cpy #'a'
.b948	f0 6a		beq $b9b4			beq _save_character
.b94a	a9 08		lda #$08			lda #AscBS	      ; Backspace (ASCII value 8)
.b94c	c0 62		cpy #$62			cpy #'b'
.b94e	f0 64		beq $b9b4			beq _save_character
.b950	a9 1b		lda #$1b			lda #AscESC	       ; ESC (ASCII value 27)
.b952	c0 65		cpy #$65			cpy #'e'
.b954	f0 5e		beq $b9b4			beq _save_character
.b956	a9 0c		lda #$0c			lda #AscFF	       ; FF (ASCII value 12)
.b958	c0 66		cpy #$66			cpy #'f'
.b95a	f0 58		beq $b9b4			beq _save_character
.b95c	a9 0a		lda #$0a			lda #AscLF	       ; LF (ASCII value 10)
.b95e	c0 6c		cpy #$6c			cpy #'l'
.b960	f0 52		beq $b9b4			beq _save_character
.b962	c0 6e		cpy #$6e			cpy #'n'
.b964	f0 4e		beq $b9b4			beq _save_character
.b966	c0 6d		cpy #$6d			cpy #'m'
.b968	d0 09		bne $b973			bne +
.b96a	a9 0d		lda #$0d			lda #AscCR		; CR/LF pair (ASCII values 13, 10)
.b96c	20 8f cc	jsr $cc8f			jsr C_Comma_A
.b96f	a9 0a		lda #$0a			lda #AscLF
.b971	d0 41		bne $b9b4			bne _save_character
.b973					+
.b973	a9 22		lda #$22			lda #AscDQuote		; Double quote (ASCII value 34)
.b975	c0 71		cpy #$71			cpy #'q'
.b977	f0 3b		beq $b9b4			beq _save_character
.b979	c0 22		cpy #$22			cpy #AscDQuote
.b97b	f0 37		beq $b9b4			beq _save_character
.b97d	a9 0d		lda #$0d			lda #AscCR		; CR (ASCII value 13)
.b97f	c0 72		cpy #$72			cpy #'r'
.b981	f0 31		beq $b9b4			beq _save_character
.b983	a9 09		lda #$09			lda #AscHT		; Horizontal TAB (ASCII value 9)
.b985	c0 74		cpy #$74			cpy #'t'
.b987	f0 2b		beq $b9b4			beq _save_character
.b989	a9 0b		lda #$0b			lda #AscVT		; Vertical TAB (ASCII value 11)
.b98b	c0 76		cpy #$76			cpy #'v'
.b98d	f0 25		beq $b9b4			beq _save_character
.b98f	a9 00		lda #$00			lda #0			; NULL (ASCII value 0)
.b991	c0 7a		cpy #$7a			cpy #'z'
.b993	f0 1f		beq $b9b4			beq _save_character
.b995					_check_esc_x:
.b995	c0 78		cpy #$78			cpy #'x'
.b997	d0 06		bne $b99f			bne +
.b999	a9 be		lda #$be			lda #$BE	; Clear bits 6 and 0
.b99b	95 27		sta $27,x			sta DStack+3,x
.b99d	d0 18		bne $b9b7			bne _next_character
.b99f					+
.b99f	a9 5c		lda #$5c			lda #AscBackslash	; Backslash (ASCII value 92)
.b9a1	c0 5c		cpy #$5c			cpy #AscBackslash
.b9a3	f0 0f		beq $b9b4			beq _save_character
.b9a5	98		tya				tya
.b9a6					_not_escaped:
.b9a6	c9 5c		cmp #$5c			cmp #$5C	; The backslash char
.b9a8	d0 06		bne $b9b0			bne _regular_char
.b9aa	a9 ff		lda #$ff			lda #$FF
.b9ac	95 27		sta $27,x			sta DStack+3,x
.b9ae	d0 07		bne $b9b7			bne _next_character
.b9b0					_regular_char:
.b9b0	c9 22		cmp #$22			cmp #AscDQuote		; ASCII for "
.b9b2	f0 06		beq $b9ba			beq _found_string_end
.b9b4					_save_character:
.b9b4	20 8f cc	jsr $cc8f			jsr C_Comma_A		; compile this character into the dictionary
.b9b7					_next_character:
.b9b7	4c d5 b8	jmp $b8d5			jmp _savechars_loop
.b9ba					_found_string_end:
.b9ba	e8		inx				inx			; Drop t3
.b9bb	e8		inx				inx
.b9bc	a5 0a		lda $0a				lda state		; What happens next depends on the state (which is bad, but
.b9be	d0 0e		bne $b9ce			bne _cmpl		; that's the way it works at the moment).
.b9c0	38		sec				sec			; TOS= length of string = Here - start_addr
.b9c1	a5 00		lda $00				lda cp+0
.b9c3	f5 26		sbc $26,x			sbc DStack+2,x
.b9c5	95 24		sta $24,x			sta DStack+0,x		;   LSB
.b9c7	a5 01		lda $01				lda cp+1
.b9c9	f5 27		sbc $27,x			sbc DStack+3,x
.b9cb	95 25		sta $25,x			sta DStack+1,x		;   MSB
.b9cd	60		rts				rts			; ( startaddr u )
.b9ce					_cmpl:
.b9ce	e8		inx				inx			; Drop t2
.b9cf	e8		inx				inx
.b9d0	4c 64 b8	jmp $b864			jmp SLiteral_End	; ( jmpaddr )
=277					CL	.var *-(WordListLink+wh_Xt)
=$ff					CL	 .var $ff
=$b9d3					en = *	; remember here
>b8bc	ff					.byte CL	;wh_CodeLength
.b9d3					convert_hex_value:
.b9d3	c9 41		cmp #$41			cmp #'A'
.b9d5	90 05		bcc $b9dc			bcc _digit
.b9d7	29 1f		and #$1f	_alpha:		and #$1F		; Make it uppercase.
.b9d9	69 08		adc #$08			adc #9-1		; gives value 10 for 'A'
.b9db	60		rts				rts
.b9dc					_digit:
.b9dc	e9 2f		sbc #$2f			sbc #'0'-1
.b9de	60		rts				rts
>b9df	53 5c 22			L1:	.text 'S\"'	;  name of word as a string, ending at wh_NameLastChar
>b9e2	43					.byte (('S\"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>b9e3	39 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b9e5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b9e6	0c					.byte IM+NN	;wh_Flags	dictionary flags
=47458					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b9e7					S_Backslash_Quote:
.b9e7	a9 ff		lda #$ff			lda #$ff	; Do handle escaped chars.
.b9e9	4c c0 b8	jmp $b8c0			jmp S_Quote_start
=5					CL	.var *-(WordListLink+wh_Xt)
=$b9ec					en = *	; remember here
>b9e5	05					.byte CL	;wh_CodeLength
>b9ec	4c 61 74 65 73 74 58 74		L1:	.text "LatestXt"	;  name of word as a string, ending at wh_NameLastChar
>b9f4	88					.byte (("LatestXt"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b9f5	62 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b9f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b9f8	08					.byte NN	;wh_Flags	dictionary flags
=47476					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b9f9	20 0c ba	jsr $ba0c	LatestXt:	jsr LatestNt	; ( nt )
.b9fc	4c 8c bd	jmp $bd8c			jmp Name_To_Int	; ( xt )
=6					CL	.var *-(WordListLink+wh_Xt)
=$b9ff					en = *	; remember here
>b9f7	06					.byte CL	;wh_CodeLength
>b9ff	4c 61 74 65 73 74 4e 74		L1:	.text "LatestNt"	;  name of word as a string, ending at wh_NameLastChar
>ba07	88					.byte (("LatestNt"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ba08	74 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba0a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba0b	08					.byte NN	;wh_Flags	dictionary flags
=47495					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba0c	20 16 ba	jsr $ba16	LatestNt:	jsr current_to_dp
.ba0f	a5 10		lda $10				lda dp+0
.ba11	a4 11		ldy $11				ldy dp+1
.ba13	4c 54 b7	jmp $b754			jmp PushYA
=10					CL	.var *-(WordListLink+wh_Xt)
=$ba16					en = *	; remember here
>ba0a	0a					.byte CL	;wh_CodeLength
.ba16					current_to_dp:
.ba16	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.ba19	0a		asl a				asl			; dp= wordlists[A]
.ba1a	a8		tay				tay
.ba1b	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.ba1e	85 10		sta $10				sta dp+0
.ba20	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.ba23	85 11		sta $11				sta dp+1
.ba25	60		rts				rts
.ba26					dp_to_current:
.ba26	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.ba29	0a		asl a		                asl			; wordlists[A]=dp
.ba2a	a8		tay		                tay
.ba2b	a5 10		lda $10		                lda dp+0
.ba2d	99 12 03	sta $0312,y			sta WordlistsV+0,y
.ba30	a5 11		lda $11		                lda dp+1
.ba32	99 13 03	sta $0313,y	                sta WordlistsV+1,y
.ba35	60		rts		                rts
>ba36	50 61 72 73 65 2d 4e 61		L1:	.text "Parse-Name"	;  name of word as a string, ending at wh_NameLastChar
>ba3e	6d 65
>ba40	aa					.byte (("Parse-Name"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ba41	87 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba43	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba44	08					.byte NN	;wh_Flags	dictionary flags
=47552					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba45					Parse_Name:
.ba45	a5 04		lda $04				lda cib+0		; tmp2= cib+(toin & $ff00)
.ba47	85 16		sta $16				sta tmp2+0
.ba49	18		clc				clc
.ba4a	a5 05		lda $05				lda cib+1
.ba4c	65 09		adc $09				adc toin+1
.ba4e	85 17		sta $17				sta tmp2+1
.ba50	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.ba52					_skip_loop:
.ba52	c4 06		cpy $06				cpy ciblen+0		; more chars left?
.ba54	a5 09		lda $09				lda toin+1
.ba56	e5 07		sbc $07				sbc ciblen+1
.ba58	b0 11		bcs $ba6b			bcs _empty_line
.ba5a	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.ba5c	c9 21		cmp #$21			cmp #AscSP+1		; is_whitespace
.ba5e	b0 10		bcs $ba70			bcs _char_found
.ba60	c8		iny				iny			; increment toin
.ba61	84 08		sty $08				sty toin+0
.ba63	d0 ed		bne $ba52			bne _skip_loop
.ba65	e6 09		inc $09				inc toin+1
.ba67	e6 17		inc $17				inc tmp2+1
.ba69	d0 e7		bne $ba52			bne _skip_loop
.ba6b					_empty_line:
.ba6b	ca		dex				dex			; junk address
.ba6c	ca		dex				dex
.ba6d	4c a5 b7	jmp $b7a5			jmp Zero		; length=0
.ba70					_char_found:
.ba70	20 c4 b7	jsr $b7c4			jsr Bl			; push delimiter char
.ba73	4c 8d ba	jmp $ba8d			jmp Parse
=49					CL	.var *-(WordListLink+wh_Xt)
=$ba76					en = *	; remember here
>ba43	31					.byte CL	;wh_CodeLength
.ba76					parse_name_check:
.ba76	20 45 ba	jsr $ba45			jsr parse_name		; get character from string
.ba79	b5 24		lda $24,x			lda DStack+0,x		; empty string?
.ba7b	f0 01		beq $ba7e			beq _empty
.ba7d	60		rts				rts
.ba7e	a9 f3		lda #$f3	_empty:		lda #$100+err_UndefinedWord	; complain & abort
.ba80	4c 23 b4	jmp $b423			jmp ThrowA
>ba83	50 61 72 73 65			L1:	.text "Parse"	;  name of word as a string, ending at wh_NameLastChar
>ba88	a5					.byte (("Parse"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ba89	c0 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba8b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba8c	08					.byte NN	;wh_Flags	dictionary flags
=47624					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba8d	20 7e b3	jsr $b37e	Parse:		jsr PopA		; pop c (check for underflow)
.ba90	85 1c		sta $1c		Parse_A:	sta tmp5		; save delimiter
.ba92	ca		dex				dex			; alloc space for addr
.ba93	ca		dex				dex
.ba94	ca		dex				dex			; alloc space for length
.ba95	ca		dex				dex
.ba96	18		clc				clc			; addr= cib+toin
.ba97	a5 08		lda $08				lda toin+0
.ba99	65 04		adc $04				adc cib+0
.ba9b	95 26		sta $26,x			sta DStack+2,x
.ba9d	a5 09		lda $09				lda toin+1
.ba9f	65 05		adc $05				adc cib+1
.baa1	95 27		sta $27,x			sta DStack+3,x
.baa3	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.baa5	84 14		sty $14				sty tmp1+0
.baa7	a5 04		lda $04				lda cib+0		; tmp2= cib + (toin & $ff00)
.baa9	85 16		sta $16				sta tmp2+0
.baab	18		clc				clc
.baac	a5 09		lda $09				lda toin+1		; tmp1= toin
.baae	85 15		sta $15				sta tmp1+1
.bab0	65 05		adc $05				adc cib+1
.bab2	85 17		sta $17				sta tmp2+1
.bab4	a9 00		lda #$00			lda #0		; Initialize the offset we use to adjust EOL or found delimiter
.bab6	85 1d		sta $1d				sta tmp5+1
.bab8					_loop:
.bab8	c4 06		cpy $06				cpy ciblen+0		; end of string?
.baba	a5 09		lda $09				lda toin+1
.babc	e5 07		sbc $07				sbc ciblen+1
.babe	b0 1d		bcs $badd			bcs _eol
.bac0	a5 1c		lda $1c				lda tmp5+0		; get delimiter
.bac2	c9 20		cmp #$20			cmp #AscSP		; is it whitespace?
.bac4	d0 08		bne $bace			bne _not_whitespace
.bac6	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.bac8	c9 21		cmp #$21			cmp #AscSP+1		; we're looking for all whitespace
.baca	90 0f		bcc $badb			bcc _found_delimiter
.bacc	b0 04		bcs $bad2			bcs _not_delimiter
.bace	d1 16		cmp ($16),y	_not_whitespace: cmp (tmp2),y		; compare delimter to cib[toin]
.bad0	f0 09		beq $badb			beq _found_delimiter
.bad2					_not_delimiter:
.bad2	c8		iny				iny			; next character
.bad3	d0 e3		bne $bab8			bne _loop
.bad5	e6 09		inc $09				inc toin+1
.bad7	e6 17		inc $17				inc tmp2+1
.bad9	d0 dd		bne $bab8			bne _loop
.badb					_found_delimiter:
.badb	e6 1d		inc $1d				inc tmp5+1
.badd					_eol:
.badd	38		sec				sec			; length = toin - tmp1
.bade	98		tya				tya
.badf	e5 14		sbc $14				sbc tmp1+0
.bae1	95 24		sta $24,x			sta DStack+0,x
.bae3	a5 09		lda $09				lda toin+1
.bae5	e5 15		sbc $15				sbc tmp1+1
.bae7	95 25		sta $25,x			sta DStack+1,x
.bae9	18		clc				clc			; toin = toin + delimiter_offset
.baea	98		tya				tya
.baeb	65 1d		adc $1d				adc tmp5+1
.baed	85 08		sta $08				sta toin+0
.baef	90 02		bcc $baf3			bcc +
.baf1	e6 09		inc $09				inc toin+1
.baf3					+
=102					CL	.var *-(WordListLink+wh_Xt)
=$baf3					en = *	; remember here
>ba8b	66					.byte CL	;wh_CodeLength
.baf3	60		rts				rts
>baf4	45 78 65 63 75 74 65 2d		L1:	.text "Execute-Parsing"	;  name of word as a string, ending at wh_NameLastChar
>bafc	50 61 72 73 69 6e 67
>bb03	ef					.byte (("Execute-Parsing"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb04	08 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb06	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb07	18					.byte UF+NN	;wh_Flags	dictionary flags
=47747					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb08					Execute_parsing:
.bb08	20 de b3	jsr $b3de			jsr underflow_3
.bb0b	20 a3 c3	jsr $c3a3			jsr Input_To_R		; save existing input for later
.bb0e	20 1a ce	jsr $ce1a			jsr Not_Rot		; -ROT ( xt addr u )
.bb11	20 9a b3	jsr $b39a			jsr PopYA		; TOS is new ciblen
.bb14	85 06		sta $06				sta ciblen+0
.bb16	84 07		sty $07				sty ciblen+1
.bb18	20 9a b3	jsr $b39a			jsr PopYA		; NOS is new cib
.bb1b	85 04		sta $04				sta cib+0
.bb1d	84 05		sty $05				sty cib+1
.bb1f	a9 00		lda #$00			lda #0
.bb21	85 08		sta $08				sta toin+0		; Set >IN to zero
.bb23	85 09		sta $09				sta toin+1
.bb25	20 b6 cd	jsr $cdb6			jsr Execute
.bb28	20 c5 c3	jsr $c3c5			jsr R_To_Input		; restore
=35					CL	.var *-(WordListLink+wh_Xt)
=$bb2b					en = *	; remember here
>bb06	23					.byte CL	;wh_CodeLength
.bb2b	60		rts				rts
>bb2c	53 6f 75 72 63 65		L1:	.text "Source"	;  name of word as a string, ending at wh_NameLastChar
>bb32	a6					.byte (("Source"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb33	83 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb35	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb36	08					.byte NN	;wh_Flags	dictionary flags
=47794					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb37					Source:
.bb37	a5 04		lda $04				lda cib+0	; push address
.bb39	a4 05		ldy $05				ldy cib+1
.bb3b	20 54 b7	jsr $b754			jsr PushYA
.bb3e	a5 06		lda $06				lda ciblen+0	; push size, return
.bb40	a4 07		ldy $07				ldy ciblen+1
.bb42	4c 54 b7	jmp $b754			jmp PushYA
=14					CL	.var *-(WordListLink+wh_Xt)
=$bb45					en = *	; remember here
>bb35	0e					.byte CL	;wh_CodeLength
>bb45	53 6f 75 72 63 65 2d 49		L1:	.text "Source-Id"	;  name of word as a string, ending at wh_NameLastChar
>bb4d	64
>bb4e	89					.byte (("Source-Id"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb4f	b2 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb51	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb52	08					.byte NN	;wh_Flags	dictionary flags
=47822					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb53	a5 02		lda $02		Source_Id:	lda insrc+0
.bb55	a4 03		ldy $03				ldy insrc+1
.bb57	4c 54 b7	jmp $b754			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$bb5a					en = *	; remember here
>bb51	07					.byte CL	;wh_CodeLength
>bb5a	45 78 69 74			L1:	.text "Exit"	;  name of word as a string, ending at wh_NameLastChar
>bb5e	84					.byte (("Exit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb5f	ce ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb61	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb62	03					.byte AN+CO	;wh_Flags	dictionary flags
=47838					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb63					Exit:
.bb63	60		rts				rts		; keep before FEnd so it gets inlined
=1					CL	.var *-(WordListLink+wh_Xt)
=$bb64					en = *	; remember here
>bb61	01					.byte CL	;wh_CodeLength
>bb64	3b				L1:	.text ";"	;  name of word as a string, ending at wh_NameLastChar
>bb65	61					.byte ((";"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb66	de ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb68	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb69	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=47845					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb6a					Semicolon:
.bb6a	20 d8 b6	jsr $b6d8			jsr Left_Bracket	; switch to interpret state
.bb6d	24 0c		bit $0c				bit status		; is this a : word or a :NONAME word?
.bb6f	70 0c		bvs $bb7d			bvs _colonword
.bb71	a9 60		lda #$60			lda #$60		; compile an RTS
.bb73	20 8f cc	jsr $cc8f			jsr C_Comma_A
.bb76	a5 0e		lda $0e				lda workword+0		; push xt, return
.bb78	a4 0f		ldy $0f				ldy workword+1
.bb7a	4c 54 b7	jmp $b754			jmp PushYA
.bb7d					_colonword:
.bb7d	24 0c		bit $0c				bit status
.bb7f	10 1d		bpl $bb9e			bpl _new_word	; Bit 7 is clear = new word
.bb81	a5 0e		lda $0e				lda WorkWord+0		; push our nt
.bb83	a4 0f		ldy $0f				ldy WorkWord+1
.bb85	20 54 b7	jsr $b754			jsr PushYA
.bb88	20 a4 bd	jsr $bda4			jsr Name_To_String	; get our name string
.bb8b	a9 61		lda #$61			lda #<str_redefined	; string "redefined"
.bb8d	a0 da		ldy #$da			ldy #>str_redefined
.bb8f	20 99 cd	jsr $cd99			jsr Print_ASCIIZ_YA_no_lf
.bb92	20 78 cd	jsr $cd78			jsr Type		; print the offending word.
.bb95	20 6b cd	jsr $cd6b			jsr Space
.bb98	a9 7f		lda #$7f			lda #$ff-%10000000
.bb9a	25 0c		and $0c				and status
.bb9c	85 0c		sta $0c				sta status
.bb9e					_new_word:
.bb9e	20 d5 c0	jsr $c0d5			jsr Header_Link		; finish linking into current dictionary
.bba1	20 a9 bb	jsr $bba9			jsr adjust_z		; fix word length
.bba4	a9 60		lda #$60			lda #$60		; compile an RTS
.bba6	4c 8f cc	jmp $cc8f			jmp C_Comma_A
=63					CL	.var *-(WordListLink+wh_Xt)
=$bba9					en = *	; remember here
>bb68	3f					.byte CL	;wh_CodeLength
.bba9					adjust_z:
.bba9	a5 10		lda $10				lda dp+0		; tmp1= xt
.bbab	18		clc				clc
.bbac	69 85		adc #$85			adc #Wh_xt
.bbae	85 14		sta $14				sta tmp1+0
.bbb0	a5 11		lda $11				lda dp+1
.bbb2	69 00		adc #$00			adc #0
.bbb4	85 15		sta $15				sta tmp1+1
.bbb6	38		sec				sec			; length= cp-xt
.bbb7	a5 00		lda $00				lda cp+0
.bbb9	e5 14		sbc $14				sbc tmp1+0
.bbbb	a8		tay				tay
.bbbc	a5 01		lda $01				lda cp+1
.bbbe	e5 15		sbc $15				sbc tmp1+1
.bbc0	f0 0c		beq $bbce			beq _short		; length > $ff ?
.bbc2	a0 84		ldy #$84			ldy #Wh_Flags		; make it NN
.bbc4	b1 10		lda ($10),y			lda (dp),y
.bbc6	29 fd		and #$fd			and #$ff-AN
.bbc8	09 08		ora #$08			ora #NN
.bbca	91 10		sta ($10),y			sta (dp),y
.bbcc	a0 ff		ldy #$ff			ldy #$ff		; set max length for header
.bbce	98		tya		_short:		tya			; fill in length in header
.bbcf	a0 83		ldy #$83			ldy #Wh_CodeLength
.bbd1	91 10		sta ($10),y			sta (dp),y
.bbd3	60		rts				rts
>bbd4	3a				L1:	.text ":"	;  name of word as a string, ending at wh_NameLastChar
>bbd5	41					.byte ((":"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bbd6	e5 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bbd8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bbd9	08					.byte NN	;wh_Flags	dictionary flags
=47957					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bbda					Colon:
.bbda	20 ee b6	jsr $b6ee			jsr Right_Bracket	; switch to compile state
.bbdd	a5 0c		lda $0c				lda status
.bbdf	09 40		ora #$40			ora #%01000000	; tell ";" and RECURSE this is a normal word
.bbe1	09 80		ora #$80			ora #%10000000	; Tell Header_Build not to print warning for duplicate name.
.bbe3	85 0c		sta $0c				sta status
.bbe5	4c e0 c0	jmp $c0e0			jmp Header_Build	; compile word header (but don't link)
=14					CL	.var *-(WordListLink+wh_Xt)
=$bbe8					en = *	; remember here
>bbd8	0e					.byte CL	;wh_CodeLength
>bbe8	3a 4e 6f 4e 61 6d 65		L1:	.text ":NoName"	;  name of word as a string, ending at wh_NameLastChar
>bbef	a7					.byte ((":NoName"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bbf0	55 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bbf2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bbf3	08					.byte NN	;wh_Flags	dictionary flags
=47983					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bbf4					Colon_NoName:
.bbf4	20 ee b6	jsr $b6ee			jsr Right_Bracket	; switch to compile state
.bbf7	a9 bf		lda #$bf			lda #$ff-%01000000	; tell ";" and RECURSE this is
.bbf9	25 0c		and $0c				and status		; a :NONAME word.
.bbfb	85 0c		sta $0c				sta status
.bbfd	a5 00		lda $00				lda cp+0
.bbff	85 0e		sta $0e				sta workword+0
.bc01	a5 01		lda $01				lda cp+1
.bc03	85 0f		sta $0f				sta workword+1
=17					CL	.var *-(WordListLink+wh_Xt)
=$bc05					en = *	; remember here
>bbf2	11					.byte CL	;wh_CodeLength
.bc05	60		rts				rts
>bc06	27				L1:	.text "'"	;  name of word as a string, ending at wh_NameLastChar
>bc07	e1					.byte (("'"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bc08	6f bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc0a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc0b	08					.byte NN	;wh_Flags	dictionary flags
=48007					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc0c	20 12 bc	jsr $bc12	Tick:		jsr Tick_Nt
.bc0f	4c 8c bd	jmp $bd8c			jmp Name_To_Int	; ( nt -- xt )
=6					CL	.var *-(WordListLink+wh_Xt)
=$bc12					en = *	; remember here
>bc0a	06					.byte CL	;wh_CodeLength
.bc12	20 76 ba	jsr $ba76	Tick_Nt:	jsr parse_name_check	; ( -- addr u )
.bc15	4c ae bc	jmp $bcae			jmp find_name_check	; ( addr u -- nt )
>bc18	5b 27 5d			L1:	.text "[']"	;  name of word as a string, ending at wh_NameLastChar
>bc1b	a3					.byte (("[']"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bc1c	87 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc1e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc1f	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=48027					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc20	20 0c bc	jsr $bc0c	Bracket_Tick:	jsr Tick
.bc23	4c 07 b7	jmp $b707			jmp Literal
=6					CL	.var *-(WordListLink+wh_Xt)
=$bc26					en = *	; remember here
>bc1e	06					.byte CL	;wh_CodeLength
>bc26	46 69 6e 64			L1:	.text "Find"	;  name of word as a string, ending at wh_NameLastChar
>bc2a	84					.byte (("Find"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bc2b	9b bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc2d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc2e	18					.byte UF+NN	;wh_Flags	dictionary flags
=48042					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc2f					Find:
.bc2f	20 c4 b3	jsr $b3c4			jsr underflow_1
.bc32	b5 25		lda $25,x			lda DStack+1,x		; MSB
.bc34	48		pha				pha
.bc35	b5 24		lda $24,x			lda DStack+0,x		; LSB
.bc37	48		pha				pha
.bc38	20 68 b1	jsr $b168			jsr Count		; ( caddr -- addr u )
.bc3b	20 82 bc	jsr $bc82			jsr find_name		; ( addr u -- nt | 0 )
.bc3e	b5 25		lda $25,x			lda DStack+1,x		; word found?
.bc40	d0 0a		bne $bc4c			bne _found_word
.bc42	20 87 b7	jsr $b787			jsr False		; ( 0 0 )
.bc45	68		pla				pla			; LSB of address
.bc46	95 26		sta $26,x			sta DStack+2,x
.bc48	68		pla				pla
.bc49	95 27		sta $27,x			sta DStack+3,x		; MSB of address
.bc4b	60		rts				rts			; ( addr 0 )
.bc4c					_found_word:
.bc4c	68		pla				pla			; We don't need the address after all, RDrop it
.bc4d	68		pla				pla
.bc4e	20 f0 ce	jsr $cef0			jsr Dup		; ( nt nt )
.bc51	20 8c bd	jsr $bd8c			jsr Name_To_Int	; ( nt xt )
.bc54	20 0e cf	jsr $cf0e			jsr Swap		; ( xt nt )
.bc57	a0 00		ldy #$00			ldy #0			; Prepare flag
.bc59	a9 84		lda #$84			lda #Wh_Flags		; get flags
.bc5b	20 95 c9	jsr $c995			jsr Plus_A		; ( xt nt+Wh_Flags )
.bc5e	a1 24		lda ($24,x)			lda (DStack+0,x)		; ( xt flags )
.bc60	29 04		and #$04			and #IM
.bc62	d0 07		bne $bc6b			bne _immediate		; bit set, we're immediate
.bc64	a9 ff		lda #$ff			lda #$FF		; We're not immediate, return -1
.bc66	95 24		sta $24,x			sta DStack+0,x
.bc68	95 25		sta $25,x			sta DStack+1,x
.bc6a	60		rts				rts
.bc6b					_immediate:
.bc6b	a9 01		lda #$01			lda #1			; We're immediate, return 1
.bc6d	95 24		sta $24,x			sta DStack+0,x
.bc6f	a9 00		lda #$00			lda #0
.bc71	95 25		sta $25,x			sta DStack+1,x
=68					CL	.var *-(WordListLink+wh_Xt)
=$bc73					en = *	; remember here
>bc2d	44					.byte CL	;wh_CodeLength
.bc73	60		rts				rts
>bc74	46 69 6e 64 2d 4e 61 6d		L1:	.text "Find-Name"	;  name of word as a string, ending at wh_NameLastChar
>bc7c	65
>bc7d	a9					.byte (("Find-Name"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bc7e	aa bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc80	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc81	18					.byte UF+NN	;wh_Flags	dictionary flags
=48125					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc82					find_name:
.bc82	20 d9 b3	jsr $b3d9			jsr underflow_2
.bc85	20 bb bc	jsr $bcbb			jsr fina_pattern_prepare ; tmp2 = pseudo-header of pattern name
.bc88	a9 ff		lda #$ff			lda #$ff		; for each wordlist in the wordlist search order.
.bc8a	95 25		sta $25,x			sta DStack+1,x
.bc8c					_wordlist_next:
.bc8c	f6 25		inc $25,x			inc DStack+1,x
.bc8e	b4 25		ldy $25,x			ldy DStack+1,x
.bc90	cc 2a 03	cpy $032a			cpy Num_OrderV		; at end of list?
.bc93	90 06		bcc $bc9b			bcc _nextS
.bc95	d0 14		bne $bcab			bne _fail
.bc97	a9 03		lda #$03			lda #wid_Root		; also try root wordlist
.bc99	d0 03		bne $bc9e			bne _nextA
.bc9b	b9 2b 03	lda $032b,y	_nextS:		lda Search_OrderV,y	; A = search_order[Y]  get wordlist ID
.bc9e	20 e5 bc	jsr $bce5	_nextA:		jsr fina_search_wordlist
.bca1	f0 e9		beq $bc8c			beq _wordlist_next
.bca3	a5 14		lda $14				lda tmp1+0		; NOS = nt
.bca5	95 26		sta $26,x			sta DStack+2,x
.bca7	a5 15		lda $15				lda tmp1+1
.bca9	95 27		sta $27,x			sta DStack+3,x
.bcab					_fail:
.bcab	e8		inx				inx			; Drop	pattern name length
.bcac	e8		inx				inx
=43					CL	.var *-(WordListLink+wh_Xt)
=$bcad					en = *	; remember here
>bc80	2b					.byte CL	;wh_CodeLength
.bcad	60		rts				rts
.bcae					find_name_check:
.bcae	20 82 bc	jsr $bc82			jsr find_name
.bcb1	b5 25		lda $25,x			lda DStack+1,x		; not found?
.bcb3	f0 01		beq $bcb6			beq _NotFound
.bcb5	60		rts				rts
.bcb6	a9 f3		lda #$f3	_NotFound:	lda #$100+err_UndefinedWord	; complain & quit
.bcb8	4c 23 b4	jmp $b423			jmp ThrowA
.bcbb					fina_pattern_prepare:
.bcbb	38		sec				sec			; A= 0 - name start offset
.bcbc	b5 24		lda $24,x			lda DStack+0,x
.bcbe	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.bcc0	75 26		adc $26,x			adc DStack+2,x		; tmp2 = pattern nt
.bcc2	85 16		sta $16				sta tmp2+0
.bcc4	a9 ff		lda #$ff			lda #$ff
.bcc6	75 27		adc $27,x			adc DStack+3,x
.bcc8	85 17		sta $17				sta tmp2+1
.bcca	a9 7f		lda #$7f			lda #wh_NameLastChar
.bccc	38		sec				sec
.bccd	f5 24		sbc $24,x			sbc DStack+0,x
.bccf	85 1a		sta $1a				sta tmp4+0
.bcd1	a0 7f		ldy #$7f			ldy #wh_NameLastChar	; tmp3+0= wh_HNL (hash & length)
.bcd3	b1 16		lda ($16),y			lda (tmp2),y
.bcd5	0a		asl a				asl a
.bcd6	0a		asl a				asl a
.bcd7	0a		asl a				asl a
.bcd8	0a		asl a				asl a
.bcd9	0a		asl a				asl a
.bcda	15 24		ora $24,x			ora DStack+0,x
.bcdc	85 18		sta $18				sta tmp3+0
.bcde	a9 00		lda #$00			lda #0			; assuming failure
.bce0	95 26		sta $26,x			sta DStack+2,x
.bce2	95 27		sta $27,x			sta DStack+3,x
.bce4	60		rts				rts
.bce5					fina_search_wordlist:
.bce5	86 19		stx $19				stx tmp3+1		; save data stack index
.bce7	0a		asl a				asl			; tmp1 = up->wordlists[A]
.bce8	a8		tay				tay
.bce9	be 12 03	ldx $0312,y			ldx WordlistsV+0,y
.bcec	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bcef	d0 0f		bne $bd00			bne _word_3		;   not end-of-list?
.bcf1	08		php		_rts:		php
.bcf2	a6 19		ldx $19				ldx tmp3+1		; restore data stack index
.bcf4	28		plp				plp
.bcf5	60		rts				rts			; Z= end_of_list
.bcf6					_word_next:
.bcf6	a0 81		ldy #$81			ldy #wh_WordListLink	; tmp1= tmp1->Wh_WordListLink
.bcf8	b1 14		lda ($14),y			lda (tmp1),y
.bcfa	aa		tax				tax
.bcfb	c8		iny				iny
.bcfc	b1 14		lda ($14),y			lda (tmp1),y
.bcfe	f0 f1		beq $bcf1			beq _rts		; end of list?
.bd00	85 15		sta $15		_word_3:	sta tmp1+1
.bd02	86 14		stx $14				stx tmp1+0
.bd04	a0 80		ldy #$80			ldy #Wh_HNL		; Are hash & name length the same?
.bd06	b1 14		lda ($14),y			lda (tmp1),y
.bd08	c5 18		cmp $18				cmp tmp3+0
.bd0a	d0 ea		bne $bcf6			bne _word_next
.bd0c	a4 1a		ldy $1a				ldy tmp4+0		; Y= index of 1st char -1
.bd0e	c8		iny		_char_next:	iny			; to next char
.bd0f	30 e0		bmi $bcf1			bmi _rts		; end of string?
.bd11	b1 16		lda ($16),y			lda (tmp2),y		; char of pattern name
.bd13	51 14		eor ($14),y			eor (tmp1),y		; char of this word name
.bd15	f0 f7		beq $bd0e			beq _char_next		;   exact match?
.bd17	c9 20		cmp #$20			cmp #$20		;   only a case mismatch?
.bd19	d0 db		bne $bcf6			bne _word_next
.bd1b	b1 14		lda ($14),y			lda (tmp1),y		;   verify it is alpha char
.bd1d	29 df		and #$df			and #$df
.bd1f	e9 41		sbc #$41			sbc #'A'
.bd21	c9 1a		cmp #$1a			cmp #'Z'-'A'+1
.bd23	90 e9		bcc $bd0e			bcc _char_next
.bd25	b0 cf		bcs $bcf6			bcs _word_next
>bd27	49 6e 74 3e 4e 61 6d 65		L1:	.text "Int>Name"	;  name of word as a string, ending at wh_NameLastChar
>bd2f	a8					.byte (("Int>Name"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bd30	fd bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd32	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd33	18					.byte UF+NN	;wh_Flags	dictionary flags
=48303					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd34					Int_To_Name:
.bd34	20 c4 b3	jsr $b3c4			jsr underflow_1
.bd37	a9 7b		lda #$7b			lda #$100-Wh_xt		; convert xt on stack to proposed nt
.bd39	20 d5 c9	jsr $c9d5			jsr Minus_A
.bd3c	b5 24		lda $24,x			lda DStack+0,x		; tmp3= proposed nt
.bd3e	b4 25		ldy $25,x			ldy DStack+1,x
.bd40	85 18		sta $18				sta tmp3+0
.bd42	84 19		sty $19				sty tmp3+1
.bd44	86 14		stx $14				stx tmp1+0		; save data stack index
.bd46	a9 fe		lda #$fe			lda #$100-2		; for each wordlist
.bd48	85 15		sta $15				sta tmp1+1
.bd4a					_wordlist_next:
.bd4a	a4 15		ldy $15				ldy tmp1+1		; get next wordlist index
.bd4c	c8		iny				iny
.bd4d	c8		iny				iny
.bd4e	84 15		sty $15				sty tmp1+1
.bd50	c0 0c		cpy #$0c			cpy #(Num_OrderV-WordlistsV)/2
.bd52	b0 22		bcs $bd76			bcs _fail
.bd54	be 12 03	ldx $0312,y			ldx WordlistsV+0,y
.bd57	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bd5a	4c 69 bd	jmp $bd69			jmp _word_3
.bd5d	86 16		stx $16		_word_next:	stx tmp2+0
.bd5f	85 17		sta $17				sta tmp2+1
.bd61	a0 81		ldy #$81			ldy #wh_WordListLink	; follow wh_WordListLink to next word
.bd63	b1 16		lda ($16),y			lda (tmp2),y
.bd65	aa		tax				tax
.bd66	c8		iny				iny
.bd67	b1 16		lda ($16),y			lda (tmp2),y
.bd69	f0 df		beq $bd4a	_word_3:	beq _wordlist_next	;  end of list?
.bd6b	c5 19		cmp $19				cmp tmp3+1		;  match?
.bd6d	d0 ee		bne $bd5d			bne _word_next
.bd6f	e4 18		cpx $18				cpx tmp3+0
.bd71	d0 ea		bne $bd5d			bne _word_next
.bd73	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.bd75	60		rts				rts
.bd76					_fail:
.bd76	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.bd78	a9 00		lda #$00			lda #0			; return a zero to indicate that we didn't find it.
.bd7a	95 24		sta $24,x			sta DStack+0,x
.bd7c	95 25		sta $25,x			sta DStack+1,x
.bd7e	60		rts				rts
=75					CL	.var *-(WordListLink+wh_Xt)
=$bd7f					en = *	; remember here
>bd32	4b					.byte CL	;wh_CodeLength
>bd7f	4e 61 6d 65 3e 49 6e 74		L1:	.text "Name>Int"	;  name of word as a string, ending at wh_NameLastChar
>bd87	88					.byte (("Name>Int"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bd88	af bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd8a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd8b	18					.byte UF+NN	;wh_Flags	dictionary flags
=48391					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd8c					Name_To_Int:
.bd8c	20 c4 b3	jsr $b3c4			jsr underflow_1
.bd8f	a9 85		lda #$85			lda #wh_Xt
.bd91	4c 95 c9	jmp $c995			jmp Plus_A
=8					CL	.var *-(WordListLink+wh_Xt)
=$bd94					en = *	; remember here
>bd8a	08					.byte CL	;wh_CodeLength
>bd94	4e 61 6d 65 3e 53 74 72		L1:	.text "Name>String"	;  name of word as a string, ending at wh_NameLastChar
>bd9c	69 6e 67
>bd9f	eb					.byte (("Name>String"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bda0	07 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bda2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bda3	18					.byte UF+NN	;wh_Flags	dictionary flags
=48415					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bda4					Name_To_String:
.bda4	20 c4 b3	jsr $b3c4			jsr underflow_1
.bda7	b5 24		lda $24,x			lda DStack+0,x		; tmp1 = nt
.bda9	b4 25		ldy $25,x			ldy DStack+1,x
.bdab	85 14		sta $14				sta tmp1+0
.bdad	84 15		sty $15				sty tmp1+1
.bdaf	a0 80		ldy #$80			ldy #Wh_HNL
.bdb1	b1 14		lda ($14),y			lda (tmp1),y
.bdb3	29 1f		and #$1f			and #wh_HNL_NameLengthMask
.bdb5	48		pha				pha
.bdb6	49 ff		eor #$ff			eor #$ff
.bdb8	38		sec				sec
.bdb9	69 80		adc #$80			adc #Wh_NameLastChar+1	; calc start offset
.bdbb	20 95 c9	jsr $c995			jsr Plus_A		; calc start addr
.bdbe	68		pla				pla			; push length
.bdbf	4c 96 b7	jmp $b796			jmp PushZA
=30					CL	.var *-(WordListLink+wh_Xt)
=$bdc2					en = *	; remember here
>bda2	1e					.byte CL	;wh_CodeLength
>bdc2	3e 42 6f 64 79			L1:	.text ">Body"	;  name of word as a string, ending at wh_NameLastChar
>bdc7	25					.byte ((">Body"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bdc8	1f bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bdca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bdcb	18					.byte UF+NN	;wh_Flags	dictionary flags
=48455					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bdcc					To_Body:
.bdcc	20 c4 b3	jsr $b3c4			jsr underflow_1
.bdcf	a9 03		lda #$03			lda #3		; PFA is after the beginning JSR abs
.bdd1	4c 95 c9	jmp $c995			jmp Plus_A
=8					CL	.var *-(WordListLink+wh_Xt)
=$bdd4					en = *	; remember here
>bdca	08					.byte CL	;wh_CodeLength
>bdd4	45 72 61 73 65			L1:	.text "Erase"	;  name of word as a string, ending at wh_NameLastChar
>bdd9	a5					.byte (("Erase"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bdda	47 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bddc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bddd	08					.byte NN	;wh_Flags	dictionary flags
=48473					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bdde					Erase:
.bdde	20 a5 b7	jsr $b7a5			jsr Zero
.bde1	4c fd bd	jmp $bdfd			jmp Fill
=6					CL	.var *-(WordListLink+wh_Xt)
=$bde4					en = *	; remember here
>bddc	06					.byte CL	;wh_CodeLength
>bde4	42 6c 61 6e 6b			L1:	.text "Blank"	;  name of word as a string, ending at wh_NameLastChar
>bde9	65					.byte (("Blank"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bdea	59 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bdec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bded	08					.byte NN	;wh_Flags	dictionary flags
=48489					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bdee					Blank:
.bdee	20 c4 b7	jsr $b7c4			jsr Bl
.bdf1	4c fd bd	jmp $bdfd			jmp Fill
=6					CL	.var *-(WordListLink+wh_Xt)
=$bdf4					en = *	; remember here
>bdec	06					.byte CL	;wh_CodeLength
>bdf4	46 69 6c 6c			L1:	.text "Fill"	;  name of word as a string, ending at wh_NameLastChar
>bdf8	84					.byte (("Fill"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bdf9	69 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bdfb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bdfc	18					.byte UF+NN	;wh_Flags	dictionary flags
=48504					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bdfd					Fill:
.bdfd	20 de b3	jsr $b3de			jsr underflow_3
.be00	b5 28		lda $28,x			lda DStack+4,x		; tmp1= address
.be02	85 14		sta $14				sta tmp1+0
.be04	b5 29		lda $29,x			lda DStack+5,x
.be06	85 15		sta $15				sta tmp1+1
.be08	b5 26		lda $26,x			lda DStack+2,x		; tmp2= counter.lo
.be0a	85 16		sta $16				sta tmp2+0
.be0c	f6 27		inc $27,x			inc DStack+3,x		; so decrement & test for 0 works
.be0e	b5 24		lda $24,x			lda DStack+0,x		; A= fill byte
.be10	a0 00		ldy #$00			ldy #0
.be12	c4 16		cpy $16		_loop:		cpy tmp2+0		; done?
.be14	f0 09		beq $be1f			beq _test2
.be16	91 14		sta ($14),y	_3:		sta (tmp1),y		; store a byte
.be18	c8		iny				iny			; to next byte
.be19	d0 f7		bne $be12			bne _loop
.be1b	e6 15		inc $15				inc tmp1+1		; increment addr page
.be1d	d0 f3		bne $be12			bne _loop
.be1f	d6 27		dec $27,x	_test2:		dec DStack+3,x		; any more pages?
.be21	d0 f3		bne $be16			bne _3
.be23	4c 02 ad	jmp $ad02			jmp ThreeDrop	; Drop three cells off the Data Stack.
=41					CL	.var *-(WordListLink+wh_Xt)
=$be26					en = *	; remember here
>bdfb	29					.byte CL	;wh_CodeLength
>be26	56 61 72 69 61 62 6c 65		L1:	.text "Variable"	;  name of word as a string, ending at wh_NameLastChar
>be2e	a8					.byte (("Variable"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be2f	78 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be31	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be32	08					.byte NN	;wh_Flags	dictionary flags
=48558					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be33	20 6f c1	jsr $c16f	Variable:	jsr Create		; compile word header & push PFA
.be36	a9 00		lda #$00			lda #0			; allot & initialize the variable's data
.be38	a8		tay				tay
.be39	4c a9 cc	jmp $cca9			jmp Comma_YA
=9					CL	.var *-(WordListLink+wh_Xt)
=$be3c					en = *	; remember here
>be31	09					.byte CL	;wh_CodeLength
>be3c	32 56 61 72 69 61 62 6c		L1:	.text "2Variable"	;  name of word as a string, ending at wh_NameLastChar
>be44	65
>be45	a9					.byte (("2Variable"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be46	ae bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be48	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be49	08					.byte NN	;wh_Flags	dictionary flags
=48581					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be4a	20 33 be	jsr $be33	Two_variable:	jsr Variable		; compile word header & push PFA & 1st cell of data
.be4d	4c a9 cc	jmp $cca9			jmp Comma_YA		; alloc & init 2nd cell of data
=6					CL	.var *-(WordListLink+wh_Xt)
=$be50					en = *	; remember here
>be48	06					.byte CL	;wh_CodeLength
>be50	43 6f 6e 73 74 61 6e 74		L1:	.text "Constant"	;  name of word as a string, ending at wh_NameLastChar
>be58	88					.byte (("Constant"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be59	c5 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be5b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be5c	18					.byte UF+NN	;wh_Flags	dictionary flags
=48600					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be5d					Constant:
.be5d	20 c4 b3	jsr $b3c4			jsr underflow_1
.be60	20 d2 c0	jsr $c0d2			jsr Header_Comma	; compile word header
.be63	20 10 b7	jsr $b710			jsr LitCompile		; compile code to load registers, & pick a subroutine
.be66	20 e5 cc	jsr $cce5			jsr Jmp_Comma_YA	; compile code to JMP to the subroutine
.be69	4c a9 bb	jmp $bba9			jmp adjust_z		; fix word length
=15					CL	.var *-(WordListLink+wh_Xt)
=$be6c					en = *	; remember here
>be5b	0f					.byte CL	;wh_CodeLength
>be6c	32 43 6f 6e 73 74 61 6e		L1:	.text "2Constant"	;  name of word as a string, ending at wh_NameLastChar
>be74	74
>be75	89					.byte (("2Constant"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be76	d8 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be78	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be79	18					.byte UF+NN	;wh_Flags	dictionary flags
=48629					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be7a					Two_constant:
.be7a	20 d9 b3	jsr $b3d9			jsr underflow_2
.be7d	20 d2 c0	jsr $c0d2			jsr Header_Comma	; compile word header
.be80	20 0e cf	jsr $cf0e			jsr Swap
.be83	20 07 b7	jsr $b707			jsr Literal		; compile push lo cell
.be86	20 10 b7	jsr $b710			jsr LitCompile		; compile push hi cell, YA=exit routine
.be89	20 e5 cc	jsr $cce5			jsr Jmp_Comma_YA	; compile JMP from above
.be8c	4c a9 bb	jmp $bba9			jmp adjust_z		; fix word length
=21					CL	.var *-(WordListLink+wh_Xt)
=$be8f					en = *	; remember here
>be78	15					.byte CL	;wh_CodeLength
>be8f	56 61 6c 75 65			L1:	.text "Value"	;  name of word as a string, ending at wh_NameLastChar
>be94	a5					.byte (("Value"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be95	f5 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be97	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be98	18					.byte UF+NN	;wh_Flags	dictionary flags
=48660					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be99					Value:
.be99	20 c4 b3	jsr $b3c4			jsr underflow_1
.be9c	20 d2 c0	jsr $c0d2			jsr Header_Comma	; compile word header
.be9f	20 3a b7	jsr $b73a			jsr ldya_immed_comma	; compile lda # & ldy #
.bea2	a9 54		lda #$54			lda #<PushYA		; compile jmp PushYA
.bea4	a0 b7		ldy #$b7			ldy #>PushYA
.bea6	20 e5 cc	jsr $cce5			jsr Jmp_Comma_YA
.bea9	4c a9 bb	jmp $bba9			jmp adjust_z		; fix word length
=19					CL	.var *-(WordListLink+wh_Xt)
=$beac					en = *	; remember here
>be97	13					.byte CL	;wh_CodeLength
>beac	32 56 61 6c 75 65		L1:	.text "2Value"	;  name of word as a string, ending at wh_NameLastChar
>beb2	a6					.byte (("2Value"[-1]&7)<<5)+(*-L1)	;wh_HNL
>beb3	14 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>beb5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>beb6	18					.byte UF+NN	;wh_Flags	dictionary flags
=48690					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.beb7					TwoValue:
.beb7	20 d9 b3	jsr $b3d9			jsr underflow_2
.beba	20 d2 c0	jsr $c0d2			jsr Header_Comma	; compile word header
.bebd	a9 ca		lda #$ca			lda #<TwoValue_Runtime	; compile JSR TValue_Runtime
.bebf	a0 be		ldy #$be			ldy #>TwoValue_Runtime
.bec1	20 ce cc	jsr $ccce			jsr Jsr_Comma_YA
.bec4	20 a9 bb	jsr $bba9			jsr adjust_z		; fix word length
.bec7	4c b7 cc	jmp $ccb7			jmp Two_Comma		; compile the value, return
=19					CL	.var *-(WordListLink+wh_Xt)
=$beca					en = *	; remember here
>beb5	13					.byte CL	;wh_CodeLength
.beca					TwoValue_Runtime:
.beca	68		pla				pla			; pop RTS addr, +1,
.becb	18		clc				clc
.becc	69 01		adc #$01			adc #1
.bece	85 14		sta $14				sta tmp1+0
.bed0	68		pla				pla
.bed1	69 00		adc #$00			adc #0
.bed3	85 15		sta $15				sta tmp1+1
.bed5	4c 2d c5	jmp $c52d			jmp Two_Fetch_tmp1	; fetch the data, return
>bed8	54 6f				L1:	.text "To"	;  name of word as a string, ending at wh_NameLastChar
>beda	e2					.byte (("To"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bedb	32 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bedd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bede	0c					.byte NN+IM	;wh_Flags	dictionary flags
=48730					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bedf					To:
.bedf	20 0c bc	jsr $bc0c			jsr Tick		; We always need the xt of the target word
.bee2	b5 24		lda $24,x			lda DStack+0,x		; tmp1= xt
.bee4	b4 25		ldy $25,x			ldy DStack+1,x
.bee6	85 14		sta $14				sta tmp1+0
.bee8	84 15		sty $15				sty tmp1+1
.beea	a0 00		ldy #$00			ldy #0			; determine what type xt points at
.beec	b1 14		lda ($14),y			lda (tmp1),y
.beee	c9 a0		cmp #$a0			cmp #$a0		;   LDY #
.bef0	d0 38		bne $bf2a			bne _Test2
.bef2	a5 0a		lda $0a				lda state		; check compile state
.bef4	f0 20		beq $bf16			beq _Value_interpret
.bef6	a9 9a		lda #$9a			lda #<PopYA		; compile jsr PopYA
.bef8	a0 b3		ldy #$b3			ldy #>PopYA
.befa	20 ce cc	jsr $ccce			jsr Jsr_Comma_YA
.befd	a9 8c		lda #$8c			lda #$8C		; compile STY xt+1
.beff	20 8f cc	jsr $cc8f			jsr C_Comma_A
.bf02	20 e6 c9	jsr $c9e6			jsr One_plus
.bf05	20 f0 ce	jsr $cef0			jsr Dup
.bf08	20 a6 cc	jsr $cca6			jsr Comma
.bf0b	a9 8d		lda #$8d			lda #$8D		; compile STA xt+3
.bf0d	20 8f cc	jsr $cc8f			jsr C_Comma_A
.bf10	20 90 c9	jsr $c990			jsr Cell_Plus
.bf13	4c a6 cc	jmp $cca6			jmp Comma
.bf16					_Value_interpret:
.bf16	20 d9 b3	jsr $b3d9			jsr underflow_2		; ( n xt )
.bf19	e8		inx				inx			; Drop xt
.bf1a	e8		inx				inx
.bf1b	b5 24		lda $24,x			lda DStack+0,x		; LSB
.bf1d	a0 03		ldy #$03			ldy #3			;   modify LDA # data
.bf1f	91 14		sta ($14),y			sta (tmp1),y
.bf21	b5 25		lda $25,x			lda DStack+1,x		; MSB
.bf23	a0 01		ldy #$01			ldy #1			;   modify LDY # data
.bf25	91 14		sta ($14),y			sta (tmp1),y
.bf27	e8		inx				inx			; Drop n
.bf28	e8		inx				inx
.bf29	60		rts				rts
.bf2a	c9 20		cmp #$20	_Test2:		cmp #$20		;   JSR abs ?
.bf2c	d0 33		bne $bf61			bne _Err
.bf2e	a9 03		lda #$03			lda #3			; advance xt over the JSR abs to the data
.bf30	20 95 c9	jsr $c995			jsr Plus_A
.bf33	a0 01		ldy #$01			ldy #1			; get JSR abs addr lo byte
.bf35	b1 14		lda ($14),y			lda (tmp1),y
.bf37	c9 ca		cmp #$ca			cmp #<TwoValue_Runtime
.bf39	d0 11		bne $bf4c			bne _Test3
.bf3b	a5 0a		lda $0a				lda state		; check compile state
.bf3d	f0 0a		beq $bf49			beq _2Value_runtime
.bf3f	20 3a b7	jsr $b73a			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bf42	a9 01		lda #$01			lda #<Two_Store_YA
.bf44	a0 c5		ldy #$c5			ldy #>Two_Store_YA
.bf46	4c ce cc	jmp $ccce			jmp Jsr_Comma_YA	; compile JSR TwoValue_runtime; return
.bf49	4c fb c4	jmp $c4fb	_2Value_runtime: jmp Two_Store
.bf4c					_Test3:
.bf4c	c9 e4		cmp #$e4			cmp #<FValue_runtime
.bf4e	d0 11		bne $bf61			bne _Err
.bf50	a5 0a		lda $0a				lda state		; check compile state
.bf52	f0 0a		beq $bf5e			beq _FValue_interpret
.bf54	20 3a b7	jsr $b73a			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bf57	a9 b0		lda #$b0			lda #<FStore_YA
.bf59	a0 85		ldy #$85			ldy #>FStore_YA
.bf5b	4c ce cc	jmp $ccce			jmp Jsr_Comma_YA	; compile JSR FValue_runtime; return
.bf5e	4c ad 85	jmp $85ad	_FValue_interpret: jmp FStore
.bf61	a9 e0		lda #$e0	_Err:		lda #$100+err_InvalidName ; unrecognized type.
.bf63	20 23 b4	jsr $b423			jsr ThrowA
=135					CL	.var *-(WordListLink+wh_Xt)
=$bf66					en = *	; remember here
>bedd	87					.byte CL	;wh_CodeLength
>bf66	44 4d 61 78			L1:	.text "DMax"	;  name of word as a string, ending at wh_NameLastChar
>bf6a	04					.byte (("DMax"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bf6b	5a be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf6d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf6e	08					.byte NN	;wh_Flags	dictionary flags
=48874					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf6f	a9 80		lda #$80	DMax:		lda #$80
.bf71	d0 0b		bne $bf7e			bne DMin3
=4					CL	.var *-(WordListLink+wh_Xt)
=$bf73					en = *	; remember here
>bf6d	04					.byte CL	;wh_CodeLength
>bf73	44 4d 69 6e			L1:	.text "DMin"	;  name of word as a string, ending at wh_NameLastChar
>bf77	c4					.byte (("DMin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bf78	ea be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf7a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf7b	08					.byte NN	;wh_Flags	dictionary flags
=48887					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf7c	a9 00		lda #$00	DMin:		lda #0
.bf7e	85 16		sta $16		DMin3:		sta tmp2	; save sign correction
.bf80	20 e3 b3	jsr $b3e3			jsr underflow_4
.bf83	b5 26		lda $26,x			lda DStack+2,x	; compare
.bf85	d5 2a		cmp $2a,x			cmp DStack+6,x
.bf87	b5 27		lda $27,x			lda DStack+3,x
.bf89	f5 2b		sbc $2b,x			sbc DStack+7,x
.bf8b	b5 24		lda $24,x			lda DStack+0,x
.bf8d	f5 28		sbc $28,x			sbc DStack+4,x
.bf8f	b5 25		lda $25,x			lda DStack+1,x
.bf91	f5 29		sbc $29,x			sbc DStack+5,x
.bf93	50 02		bvc $bf97			bvc +
.bf95	49 80		eor #$80			eor #$80	; fix sign
.bf97	45 16		eor $16		+		eor tmp2
.bf99	30 0f		bmi $bfaa			bmi TwoNip_nouf	; if negative, NOS is larger and needs to be kept
.bf9b	4c b1 c4	jmp $c4b1			jmp Two_Drop
=34					CL	.var *-(WordListLink+wh_Xt)
=$bf9e					en = *	; remember here
>bf7a	22					.byte CL	;wh_CodeLength
>bf9e	32 4e 69 70			L1:	.text "2Nip"	;  name of word as a string, ending at wh_NameLastChar
>bfa2	04					.byte (("2Nip"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bfa3	f7 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfa5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfa6	18					.byte UF+NN	;wh_Flags	dictionary flags
=48930					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfa7	20 e3 b3	jsr $b3e3	TwoNip:		jsr underflow_4
.bfaa	b5 24		lda $24,x	TwoNip_NoUf:	lda DStack+0,x	; copy dTOS to dNOS
.bfac	95 28		sta $28,x			sta DStack+4,x
.bfae	b5 25		lda $25,x			lda DStack+1,x
.bfb0	95 29		sta $29,x			sta DStack+5,x
.bfb2	b5 26		lda $26,x			lda DStack+2,x
.bfb4	95 2a		sta $2a,x			sta DStack+6,x
.bfb6	b5 27		lda $27,x			lda DStack+3,x
.bfb8	95 2b		sta $2b,x			sta DStack+7,x
.bfba	4c b1 c4	jmp $c4b1			jmp Two_Drop
=22					CL	.var *-(WordListLink+wh_Xt)
=$bfbd					en = *	; remember here
>bfa5	16					.byte CL	;wh_CodeLength
>bfbd	53 3e 44			L1:	.text "S>D"	;  name of word as a string, ending at wh_NameLastChar
>bfc0	83					.byte (("S>D"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bfc1	22 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfc3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfc4	10					.byte UF	;wh_Flags	dictionary flags
=48960					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfc5					S_To_D:
.bfc5	20 c4 b3	jsr $b3c4			jsr underflow_1
.bfc8	a0 00		ldy #$00			ldy #0			; assume positive
.bfca	b5 25		lda $25,x			lda DStack+1,x		; test n
.bfcc	10 01		bpl $bfcf			bpl +
.bfce	88		dey				dey			; make negative
.bfcf					+
.bfcf	ca		dex				dex			; push new hi cell
.bfd0	ca		dex				dex
.bfd1	94 24		sty $24,x			sty DStack+0,x
.bfd3	94 25		sty $25,x			sty DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$bfd5					en = *	; remember here
>bfc3	10					.byte CL	;wh_CodeLength
.bfd5	60		rts				rts
>bfd6	44 3e 53			L1:	.text "D>S"	;  name of word as a string, ending at wh_NameLastChar
>bfd9	63					.byte (("D>S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bfda	40 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfdc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfdd	10					.byte UF	;wh_Flags	dictionary flags
=48985					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfde					D_To_S:
.bfde	20 d9 b3	jsr $b3d9			jsr underflow_2
.bfe1	e8		inx				inx		; Drop hi cell
.bfe2	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$bfe3					en = *	; remember here
>bfdc	05					.byte CL	;wh_CodeLength
.bfe3	60		rts				rts
>bfe4	44 2d				L1:	.text "D-"	;  name of word as a string, ending at wh_NameLastChar
>bfe6	a2					.byte (("D-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bfe7	59 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfe9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfea	10					.byte UF	;wh_Flags	dictionary flags
=48998					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfeb					D_Minus:
.bfeb	20 e3 b3	jsr $b3e3			jsr underflow_4 ; two double numbers
.bfee	38		sec				sec
.bfef	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of lower word
.bff1	f5 26		sbc $26,x			sbc DStack+2,x
.bff3	95 2a		sta $2a,x			sta DStack+6,x
.bff5	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of lower word
.bff7	f5 27		sbc $27,x			sbc DStack+3,x
.bff9	95 2b		sta $2b,x			sta DStack+7,x
.bffb	b5 28		lda $28,x			lda DStack+4,x	; LSB of upper word
.bffd	f5 24		sbc $24,x			sbc DStack+0,x
.bfff	95 28		sta $28,x			sta DStack+4,x
.c001	b5 29		lda $29,x			lda DStack+5,x	; MSB of upper word
.c003	f5 25		sbc $25,x			sbc DStack+1,x
.c005	95 29		sta $29,x			sta DStack+5,x
.c007	e8		inx				inx
.c008	e8		inx				inx
.c009	e8		inx				inx
.c00a	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c00b					en = *	; remember here
>bfe9	20					.byte CL	;wh_CodeLength
.c00b	60		rts				rts
>c00c	44 2b				L1:	.text "D+"	;  name of word as a string, ending at wh_NameLastChar
>c00e	62					.byte (("D+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c00f	66 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c011	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c012	10					.byte UF	;wh_Flags	dictionary flags
=49038					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c013					D_Plus:
.c013	20 e3 b3	jsr $b3e3			jsr underflow_4 ; two double numbers
.c016	18		clc				clc
.c017	b5 26		lda $26,x			lda DStack+2,x	; LSB of lower word
.c019	75 2a		adc $2a,x			adc DStack+6,x
.c01b	95 2a		sta $2a,x			sta DStack+6,x
.c01d	b5 27		lda $27,x			lda DStack+3,x	; MSB of lower word
.c01f	75 2b		adc $2b,x			adc DStack+7,x
.c021	95 2b		sta $2b,x			sta DStack+7,x
.c023	b5 24		lda $24,x			lda DStack+0,x	; LSB of upper word
.c025	75 28		adc $28,x			adc DStack+4,x
.c027	95 28		sta $28,x			sta DStack+4,x
.c029	b5 25		lda $25,x			lda DStack+1,x	; MSB of upper word
.c02b	75 29		adc $29,x			adc DStack+5,x
.c02d	95 29		sta $29,x			sta DStack+5,x
.c02f	e8		inx				inx
.c030	e8		inx				inx
.c031	e8		inx				inx
.c032	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c033					en = *	; remember here
>c011	20					.byte CL	;wh_CodeLength
.c033	60		rts				rts
>c034	44 31 2b			L1:	.text "D1+"	;  name of word as a string, ending at wh_NameLastChar
>c037	63					.byte (("D1+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c038	8e bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c03a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c03b	10					.byte UF	;wh_Flags	dictionary flags
=49079					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c03c	20 d9 b3	jsr $b3d9	D1Plus:		jsr underflow_2
.c03f	f6 26		inc $26,x			inc DStack+2,x
.c041	d0 0a		bne $c04d			bne +
.c043	f6 27		inc $27,x			inc DStack+3,x
.c045	d0 06		bne $c04d			bne +
.c047	f6 24		inc $24,x			inc DStack+0,x
.c049	d0 02		bne $c04d			bne +
.c04b	f6 25		inc $25,x			inc DStack+1,x
.c04d					+
=17					CL	.var *-(WordListLink+wh_Xt)
=$c04d					en = *	; remember here
>c03a	11					.byte CL	;wh_CodeLength
.c04d	60		rts				rts
>c04e	44 31 2d			L1:	.text "D1-"	;  name of word as a string, ending at wh_NameLastChar
>c051	a3					.byte (("D1-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c052	b7 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c054	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c055	10					.byte UF	;wh_Flags	dictionary flags
=49105					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c056	20 d9 b3	jsr $b3d9	D1Minus:	jsr underflow_2
.c059	b5 26		lda $26,x			lda DStack+2,x
.c05b	d0 0e		bne $c06b			bne _1
.c05d	b5 27		lda $27,x			lda DStack+3,x
.c05f	d0 08		bne $c069			bne _2
.c061	b5 24		lda $24,x			lda DStack+0,x
.c063	d0 02		bne $c067			bne _3
.c065	d6 25		dec $25,x			dec DStack+1,x
.c067	d6 24		dec $24,x	_3:		dec DStack+0,x
.c069	d6 27		dec $27,x	_2:		dec DStack+3,x
.c06b	d6 26		dec $26,x	_1:		dec DStack+2,x
=23					CL	.var *-(WordListLink+wh_Xt)
=$c06d					en = *	; remember here
>c054	17					.byte CL	;wh_CodeLength
.c06d	60		rts				rts
>c06e	41 6c 6c 6f 74			L1:	.text "Allot"	;  name of word as a string, ending at wh_NameLastChar
>c073	85					.byte (("Allot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c074	d1 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c076	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c077	18					.byte UF+NN	;wh_Flags	dictionary flags
=49139					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c078					Allot:
.c078	20 c4 b3	jsr $b3c4			jsr underflow_1
.c07b	18		clc				clc			; adjust cp
.c07c	b5 24		lda $24,x			lda DStack+0,x
.c07e	65 00		adc $00				adc cp+0
.c080	85 00		sta $00				sta cp+0
.c082	a8		tay				tay			;   save lo byte
.c083	b5 25		lda $25,x			lda DStack+1,x
.c085	85 14		sta $14				sta tmp1
.c087	65 01		adc $01				adc cp+1
.c089	85 01		sta $01				sta cp+1
.c08b	24 14		bit $14				bit tmp1
.c08d	30 15		bmi $c0a4			bmi _release
.c08f	b0 06		bcs $c097			bcs _pos_err		; carry from the add is bad
=32600					_last = cp_end-2*PadOffset
.c091	c0 58		cpy #$58			cpy #<_last		; cp < cp_end ?
.c093	e9 7f		sbc #$7f			sbc #>_last
.c095	90 2c		bcc $c0c3			bcc _done		; we're fine.
.c097					_pos_err:
.c097	a9 58		lda #$58			lda #<_last
.c099	85 00		sta $00				sta cp+0
.c09b	a9 7f		lda #$7f			lda #>_last
.c09d	85 01		sta $01				sta cp+1
.c09f	a9 c5		lda #$c5			lda #$100+err_Allocate
.c0a1	4c 23 b4	jmp $b423			jmp ThrowA
.c0a4					_release:
.c0a4	90 06		bcc $c0ac			bcc _neg_err		; borrow indicates we've gone below 0
.c0a6	c0 66		cpy #$66			cpy #<cp0
.c0a8	e9 0b		sbc #$0b			sbc #>cp0
.c0aa	b0 17		bcs $c0c3			bcs _done
.c0ac					_neg_err:
.c0ac	a9 66		lda #$66			lda #<cp0		; Set CP to CP0
.c0ae	85 00		sta $00				sta cp+0
.c0b0	a9 0b		lda #$0b			lda #>cp0
.c0b2	85 01		sta $01				sta cp+1
.c0b4	a9 a6		lda #$a6			lda #<forth_dictionary_start	; set WordLists[Forth] to the first
.c0b6	8d 12 03	sta $0312			sta WordlistsV+0		; word in ROM
.c0b9	a9 ce		lda #$ce			lda #>forth_dictionary_start
.c0bb	8d 13 03	sta $0313			sta WordlistsV+1
.c0be	a9 c4		lda #$c4			lda #$100+err_Free		; abort with an error
.c0c0	4c 23 b4	jmp $b423			jmp ThrowA
.c0c3					_done:
.c0c3	e8		inx				inx			; Drop n
.c0c4	e8		inx				inx
=77					CL	.var *-(WordListLink+wh_Xt)
=$c0c5					en = *	; remember here
>c076	4d					.byte CL	;wh_CodeLength
.c0c5	60		rts				rts
>c0c6	48 65 61 64 65 72 2c		L1:	.text "Header,"	;  name of word as a string, ending at wh_NameLastChar
>c0cd	87					.byte (("Header,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c0ce	f3 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c0d0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c0d1	08					.byte NN	;wh_Flags	dictionary flags
=49229					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c0d2					Header_Comma:
.c0d2	20 e0 c0	jsr $c0e0			jsr Header_Build
.c0d5					Header_Link:
.c0d5	a5 0e		lda $0e				lda WorkWord+0		; dp= WorkWord
.c0d7	85 10		sta $10				sta dp+0
.c0d9	a5 0f		lda $0f				lda WorkWord+1
.c0db	85 11		sta $11				sta dp+1
.c0dd	4c 26 ba	jmp $ba26			jmp dp_to_current	; Update the CURRENT wordlist with the new DP.
.c0e0					Header_Build:
.c0e0	20 76 ba	jsr $ba76			jsr parse_name_check	; get name string, throw error if empty string
.c0e3	20 4a cc	jsr $cc4a			jsr Two_dup		; ( addr u addr u )
.c0e6	20 c9 a0	jsr $a0c9			jsr Get_Current
.c0e9	20 69 a0	jsr $a069			jsr Search_WordList	; ( addr u xt f ) or ( addr u 0 )
.c0ec	e8		inx				inx			; pop flag.
.c0ed	e8		inx				inx
.c0ee	b5 22		lda $22,x			lda DStack-2,x		; not found?
.c0f0	f0 21		beq $c113			beq _new_name		; We haven't seen this one before.
.c0f2	e8		inx				inx			; Drop xt
.c0f3	e8		inx				inx
.c0f4	24 0c		bit $0c				bit status		; Check bit 7
.c0f6	10 08		bpl $c100			bpl _redefined_name	; Bit 7 is zero, so print the message.
.c0f8	a9 80		lda #$80			lda #$80		; Set bit 7 to indicate dup
.c0fa	05 0c		ora $0c				ora status
.c0fc	85 0c		sta $0c				sta status
.c0fe	d0 19		bne $c119			bne _process_name
.c100					_redefined_name:
.c100	a9 61		lda #$61			lda #<str_redefined
.c102	a0 da		ldy #$da			ldy #>str_redefined
.c104	20 99 cd	jsr $cd99			jsr Print_ASCIIZ_YA_no_lf
.c107	20 4a cc	jsr $cc4a			jsr Two_dup		 ; ( addr u addr u )
.c10a	20 78 cd	jsr $cd78			jsr Type
.c10d	20 6b cd	jsr $cd6b			jsr Space
.c110	4c 19 c1	jmp $c119			jmp _process_name
.c113					_new_name:
.c113	a9 7f		lda #$7f			lda #$7F		; Clear bit 0 of status to indicate new word.
.c115	25 0c		and $0c				and status
.c117	85 0c		sta $0c				sta status
.c119					_process_name:
.c119	20 4a cc	jsr $cc4a			jsr Two_dup		; compile name string ending at wh_NameLastChar
.c11c	20 b2 c9	jsr $c9b2			jsr Here
.c11f	20 0e cf	jsr $cf0e			jsr Swap
.c122	20 5a ad	jsr $ad5a			jsr CMove
.c125	20 f0 ce	jsr $cef0			jsr Dup		;   save length
.c128	20 78 c0	jsr $c078			jsr Allot
.c12b	20 b2 c9	jsr $c9b2			jsr Here
.c12e	20 c0 c9	jsr $c9c0			jsr One_Minus
.c131	a1 24		lda ($24,x)			lda (DStack+0,x)
.c133	0a		asl a				asl a
.c134	0a		asl a				asl a
.c135	0a		asl a				asl a
.c136	0a		asl a				asl a
.c137	0a		asl a				asl a
.c138	95 24		sta $24,x			sta DStack+0,x
.c13a	20 08 cb	jsr $cb08			jsr Or
.c13d	20 8c cc	jsr $cc8c			jsr C_Comma		; compile wh_HNL
.c140	e8		inx				inx			; drop name string addr
.c141	e8		inx				inx
.c142	20 16 ba	jsr $ba16			jsr current_to_dp	; Get the CURRENT dictionary pointer.
.c145	a5 10		lda $10				lda dp+0		; compile wh_WordListLink
.c147	a4 11		ldy $11				ldy dp+1
.c149	20 a9 cc	jsr $cca9			jsr Comma_YA
.c14c	a9 03		lda #$03			lda #3			; compile wh_CodeLength (temporary value, see adjust_z)
.c14e	20 8f cc	jsr $cc8f			jsr C_Comma_A
.c151	a9 08		lda #$08			lda #NN			; compile wh_Flags
.c153	20 8f cc	jsr $cc8f			jsr C_Comma_A
.c156	38		sec				sec			; WorkWord= nt
.c157	a5 00		lda $00				lda cp+0
.c159	e9 85		sbc #$85			sbc #wh_xt
.c15b	85 0e		sta $0e				sta WorkWord+0
.c15d	a5 01		lda $01				lda cp+1
.c15f	e9 00		sbc #$00			sbc #0
.c161	85 0f		sta $0f				sta WorkWord+1
.c163	60		rts				rts
=146					CL	.var *-(WordListLink+wh_Xt)
=$c164					en = *	; remember here
>c0d0	92					.byte CL	;wh_CodeLength
>c164	43 72 65 61 74 65		L1:	.text "Create"	;  name of word as a string, ending at wh_NameLastChar
>c16a	a6					.byte (("Create"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c16b	4d c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c16d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c16e	08					.byte NN	;wh_Flags	dictionary flags
=49386					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c16f					Create:
.c16f	20 d2 c0	jsr $c0d2			jsr Header_Comma	; compile word header
.c172	a9 7c		lda #$7c			lda #<DoVar
.c174	a0 c1		ldy #$c1			ldy #>DoVar
.c176	20 ce cc	jsr $ccce			jsr Jsr_Comma_YA
.c179	4c a9 bb	jmp $bba9			jmp adjust_z
=13					CL	.var *-(WordListLink+wh_Xt)
=$c17c					en = *	; remember here
>c16d	0d					.byte CL	;wh_CodeLength
.c17c					DoVar:
.c17c	68		pla				pla		; Pull the return address off the machine's stack
.c17d	18		clc				clc		;   +1 because of the way the JSR works
.c17e	69 01		adc #$01			adc #1
.c180	ca		dex				dex		; push on data stack
.c181	ca		dex				dex
.c182	95 24		sta $24,x			sta DStack+0,x
.c184	68		pla				pla
.c185	69 00		adc #$00			adc #0
.c187	95 25		sta $25,x			sta DStack+1,x
.c189	60		rts				rts		; takes us to the original caller of the
>c18a	44 6f 65 73 3e			L1:	.text "Does>"	;  name of word as a string, ending at wh_NameLastChar
>c18f	c5					.byte (("Does>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c190	ea c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c192	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c193	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=49423					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c194					Does:
.c194	a0 c1		ldy #$c1			ldy #>_runtime
.c196	a9 ae		lda #$ae			lda #<_runtime
.c198	20 ce cc	jsr $ccce			jsr Jsr_Comma_YA
.c19b	a9 68		lda #$68			lda #$68		; compile PLA  to pop RTS addr (PFA-1) to AY
.c19d	a0 a8		ldy #$a8			ldy #$a8		;    & TAY
.c19f	20 a9 cc	jsr $cca9			jsr Comma_YA
.c1a2	a9 68		lda #$68			lda #$68		; compile PLA
.c1a4	20 8f cc	jsr $cc8f			jsr C_Comma_A
.c1a7	a0 c1		ldy #$c1			ldy #>_dodoes
.c1a9	a9 c0		lda #$c0			lda #<_dodoes
.c1ab	4c ce cc	jmp $ccce			jmp Jsr_Comma_YA
=26					CL	.var *-(WordListLink+wh_Xt)
=$c1ae					en = *	; remember here
>c192	1a					.byte CL	;wh_CodeLength
.c1ae					_runtime:
.c1ae	20 16 ba	jsr $ba16			jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.c1b1	18		clc				clc
.c1b2	68		pla				pla		; RTS addr LSB
.c1b3	69 01		adc #$01			adc #1		;   +1 for JSR bahavior
.c1b5	a0 86		ldy #$86			ldy #Wh_xt+1
.c1b7	91 10		sta ($10),y			sta (dp),y
.c1b9	68		pla				pla		; RTS addr MSB
.c1ba	69 00		adc #$00			adc #0
.c1bc	c8		iny				iny
.c1bd	91 10		sta ($10),y			sta (dp),y
.c1bf	60		rts				rts
.c1c0					_dodoes:
.c1c0	c8		iny				iny		; +1 for JSR behavior
.c1c1	d0 03		bne $c1c6			bne +
.c1c3	18		clc				clc
.c1c4	69 01		adc #$01			adc #1
.c1c6					+
.c1c6	4c fe ce	jmp $cefe			jmp PushAY
>c1c9	55 6e 75 73 65 64		L1:	.text "Unused"	;  name of word as a string, ending at wh_NameLastChar
>c1cf	86					.byte (("Unused"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c1d0	0f c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c1d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c1d3	00					.byte 0	;wh_Flags	dictionary flags
=49487					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c1d4					Unused:
=32600					_last = cp_end-2*padoffset
.c1d4	ca		dex				dex
.c1d5	ca		dex				dex
.c1d6	38		sec				sec
.c1d7	a9 58		lda #$58			lda #<_last
.c1d9	e5 00		sbc $00				sbc cp+0
.c1db	95 24		sta $24,x			sta DStack+0,x
.c1dd	a9 7f		lda #$7f			lda #>_last
.c1df	e5 01		sbc $01				sbc cp+1
.c1e1	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$c1e3					en = *	; remember here
>c1d2	0f					.byte CL	;wh_CodeLength
.c1e3	60		rts				rts
>c1e4	44 65 70 74 68			L1:	.text "Depth"	;  name of word as a string, ending at wh_NameLastChar
>c1e9	05					.byte (("Depth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c1ea	4f c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c1ec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c1ed	08					.byte NN	;wh_Flags	dictionary flags
=49513					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c1ee					Depth:
.c1ee	a9 28		lda #$28			lda #DStack0	; A= DStack0 - X
.c1f0	86 1a		stx $1a				stx tmp4
.c1f2	38		sec				sec
.c1f3	e5 1a		sbc $1a				sbc tmp4
.c1f5	4a		lsr a				lsr		; divide by two because each cell is two bytes
.c1f6	4c 96 b7	jmp $b796			jmp PushZA
=11					CL	.var *-(WordListLink+wh_Xt)
=$c1f9					en = *	; remember here
>c1ec	0b					.byte CL	;wh_CodeLength
>c1f9	4b 65 79			L1:	.text "Key"	;  name of word as a string, ending at wh_NameLastChar
>c1fc	23					.byte (("Key"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c1fd	69 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c1ff	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c200	08					.byte NN	;wh_Flags	dictionary flags
=49532					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c201	20 07 c2	jsr $c207	Key:		jsr key_a		; returns char in A
.c204	4c 96 b7	jmp $b796			jmp PushZA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c207					en = *	; remember here
>c1ff	06					.byte CL	;wh_CodeLength
.c207					Key_A:
.c207	6c 08 03	jmp ($0308)			jmp (input)		; JSR/RTS
>c20a	4b 65 79 3f			L1:	.text "Key?"	;  name of word as a string, ending at wh_NameLastChar
>c20e	e4					.byte (("Key?"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c20f	7c c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c211	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c212	08					.byte NN	;wh_Flags	dictionary flags
=49550					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c213	20 19 c2	jsr $c219	KeyQ:		jsr KeyQ_A
.c216	4c 96 b7	jmp $b796			jmp PushZA
.c219	6c 0a 03	jmp ($030a)	KeyQ_A:		jmp (HaveKey)
>c21c	52 65 66 69 6c 6c		L1:	.text "Refill"	;  name of word as a string, ending at wh_NameLastChar
>c222	86					.byte (("Refill"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c223	8e c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c225	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c226	08					.byte NN	;wh_Flags	dictionary flags
=49570					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c227					Refill:
.c227	a9 00		lda #$00			lda #0			; show empty in case of error
.c229	85 06		sta $06				sta ciblen+0
.c22b	85 07		sta $07				sta ciblen+1
.c22d	a5 02		lda $02				lda insrc		; cheat: We only check LSB
.c22f	d0 24		bne $c255			bne _src_not_kbd
.c231	a5 04		lda $04				lda cib+0		; address of CIB is NOS
.c233	a4 05		ldy $05				ldy cib+1
.c235	20 54 b7	jsr $b754			jsr PushYA
.c238	a9 ff		lda #$ff			lda #bsize		; max number of chars is TOS
.c23a	20 96 b7	jsr $b796			jsr PushZA		;  cheat: We only accept max 255
.c23d	20 6c c2	jsr $c26c			jsr Accept		; ( addr n1 -- n2)
.c240	b5 24		lda $24,x			lda DStack+0,x
.c242	85 06		sta $06				sta ciblen+0
.c244	b5 25		lda $25,x			lda DStack+1,x
.c246	85 07		sta $07				sta ciblen+1		; though we only accept 255 chars
.c248	a9 00		lda #$00			lda #0
.c24a	85 08		sta $08				sta toin+0
.c24c	85 09		sta $09				sta toin+1
.c24e	a9 ff		lda #$ff			lda #$FF		; overwrite with TRUE flag
.c250	95 24		sta $24,x			sta DStack+0,x
.c252	95 25		sta $25,x			sta DStack+1,x
.c254	60		rts				rts
.c255					_src_not_kbd:
.c255	c9 ff		cmp #$ff			cmp #$ff
.c257	d0 03		bne $c25c			bne _src_not_string
.c259	4c 87 b7	jmp $b787			jmp False
.c25c					_src_not_string:
.c25c	a9 eb		lda #$eb			lda #$100+err_Unsupported
.c25e	20 23 b4	jsr $b423			jsr ThrowA
=58					CL	.var *-(WordListLink+wh_Xt)
=$c261					en = *	; remember here
>c225	3a					.byte CL	;wh_CodeLength
>c261	41 63 63 65 70 74		L1:	.text "Accept"	;  name of word as a string, ending at wh_NameLastChar
>c267	86					.byte (("Accept"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c268	a2 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c26a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c26b	18					.byte UF+NN	;wh_Flags	dictionary flags
=49639					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c26c					Accept:
.c26c	20 d9 b3	jsr $b3d9			jsr underflow_2
.c26f	b5 24		lda $24,x			lda DStack+0,x		; Abort if we were asked to receive 0 chars
.c271	15 25		ora $25,x			ora DStack+1,x
.c273	d0 09		bne $c27e			bne _not_zero
.c275	e8		inx				inx			; drop n
.c276	e8		inx				inx
.c277	95 24		sta $24,x			sta DStack+0,x		; replace addr with 0
.c279	95 25		sta $25,x			sta DStack+1,x
.c27b	4c 53 c3	jmp $c353			jmp accept_done
.c27e					_not_zero:
.c27e	b5 24		lda $24,x			lda DStack+0,x	; number of chars to get in tmp2 ...
.c280	85 16		sta $16				sta tmp2
.c282	a9 00		lda #$00			lda #0
.c284	85 17		sta $17				sta tmp2+1	; ... but we only accept max 255 chars
.c286	b5 26		lda $26,x			lda DStack+2,x	; address of buffer is NOS, to tmp1
.c288	85 14		sta $14				sta tmp1
.c28a	b5 27		lda $27,x			lda DStack+3,x
.c28c	85 15		sta $15				sta tmp1+1
.c28e	e8		inx				inx
.c28f	e8		inx				inx
.c290	a0 00		ldy #$00			ldy #0
.c292	a5 0c		lda $0c				lda status
.c294	29 f7		and #$f7			and #$f7
.c296	18		clc				clc
.c297	69 01		adc #$01			adc #1
.c299	09 08		ora #$08			ora #$08
.c29b	85 0c		sta $0c				sta status
.c29d					accept_loop:
.c29d	20 07 c2	jsr $c207			jsr key_a
.c2a0	c9 0a		cmp #$0a			cmp #AscLF
.c2a2	f0 20		beq $c2c4			beq _eol
.c2a4	c9 0d		cmp #$0d			cmp #AscCR
.c2a6	f0 1c		beq $c2c4			beq _eol
.c2a8	c9 08		cmp #$08			cmp #AscBS
.c2aa	f0 24		beq $c2d0			beq _backspace
.c2ac	c9 7f		cmp #$7f			cmp #AscDEL	; (CTRL-h)
.c2ae	f0 20		beq $c2d0			beq _backspace
.c2b0	c9 10		cmp #$10			cmp #AscCP
.c2b2	f0 37		beq $c2eb			beq _ctrl_p
.c2b4	c9 0e		cmp #$0e			cmp #AscCN
.c2b6	f0 46		beq $c2fe			beq _ctrl_n
.c2b8	91 14		sta ($14),y			sta (tmp1),y
.c2ba	c8		iny				iny
.c2bb	20 5e cd	jsr $cd5e			jsr Emit_A
.c2be	c4 16		cpy $16				cpy tmp2	; reached character limit?
.c2c0	d0 db		bne $c29d			bne accept_loop	      ; fall through if buffer limit reached
.c2c2	f0 03		beq $c2c7			beq _buffer_full
.c2c4					_eol:
.c2c4	20 6b cd	jsr $cd6b			jsr Space	; print final space
.c2c7					_buffer_full:
.c2c7	94 24		sty $24,x			sty DStack+0,x	; Y contains number of chars accepted already
.c2c9	a9 00		lda #$00			lda #0
.c2cb	95 25		sta $25,x			sta DStack+1,x		; we only accept 256 chars
.c2cd	4c 53 c3	jmp $c353			jmp accept_done
.c2d0					_backspace:
.c2d0	c0 00		cpy #$00			cpy #0		; buffer empty?
.c2d2	d0 06		bne $c2da			bne +
.c2d4	a9 07		lda #$07			lda #AscBELL	; complain and don't delete beyond the start of line
.c2d6	20 5e cd	jsr $cd5e			jsr Emit_A
.c2d9	c8		iny				iny
.c2da					+
.c2da	88		dey				dey
.c2db	a9 08		lda #$08			lda #AscBS	; move back one
.c2dd	20 5e cd	jsr $cd5e			jsr Emit_A
.c2e0	20 6b cd	jsr $cd6b			jsr Space	; print a space (rubout)
.c2e3	a9 08		lda #$08			lda #AscBS	; move back over space
.c2e5	20 5e cd	jsr $cd5e			jsr Emit_A
.c2e8	4c 9d c2	jmp $c29d			jmp accept_loop
.c2eb					_ctrl_p:
.c2eb	a5 0c		lda $0c				lda status
.c2ed	29 07		and #$07			and #7
.c2ef	d0 08		bne $c2f9			bne _ctrl_p_dec
.c2f1	a5 0c		lda $0c				lda status
.c2f3	09 07		ora #$07			ora #7
.c2f5	85 0c		sta $0c				sta status
.c2f7	d0 14		bne $c30d			bne _recall_history
.c2f9					_ctrl_p_dec:
.c2f9	c6 0c		dec $0c				dec status
.c2fb	4c 0d c3	jmp $c30d			jmp _recall_history
.c2fe					_ctrl_n:
.c2fe	a9 08		lda #$08			lda #$8
.c300	24 0c		bit $0c				bit status
.c302	d0 09		bne $c30d			bne _recall_history
.c304	a5 0c		lda $0c				lda status
.c306	29 f7		and #$f7			and #$f7
.c308	18		clc				clc
.c309	69 01		adc #$01			adc #1
.c30b	85 0c		sta $0c				sta status
.c30d					_recall_history:
.c30d	a9 f7		lda #$f7			lda #$ff-%00001000
.c30f	25 0c		and $0c				and status
.c311	85 0c		sta $0c				sta status
.c313	20 6e c3	jsr $c36e			jsr accept_total_recall
.c316	a9 0d		lda #$0d			lda #AscCR
.c318	20 5e cd	jsr $cd5e			jsr Emit_A
.c31b					input_clear:
.c31b	c0 00		cpy #$00			cpy #0
.c31d	f0 07		beq $c326			beq input_cleared
.c31f	20 6b cd	jsr $cd6b			jsr Space
.c322	88		dey				dey
.c323	4c 1b c3	jmp $c31b			jmp input_clear
.c326					input_cleared:
.c326	a9 0d		lda #$0d			lda #AscCR
.c328	20 5e cd	jsr $cd5e			jsr Emit_A
.c32b	b1 18		lda ($18),y			lda (tmp3),y
.c32d	85 0d		sta $0d				sta status+1
.c32f	e6 18		inc $18				inc tmp3
.c331	d0 02		bne $c335			bne +		; Increment the upper byte on carry.
.c333	e6 19		inc $19				inc tmp3+1
.c335					+
.c335	a9 0d		lda #$0d			lda #AscCR
.c337	20 5e cd	jsr $cd5e			jsr Emit_A
.c33a					_history_loop:
.c33a	c4 0d		cpy $0d				cpy status+1
.c33c	d0 03		bne $c341			bne +
.c33e	4c 9d c2	jmp $c29d			jmp accept_loop	      ; Needs a long jump
.c341					+
.c341	c4 16		cpy $16				cpy tmp2
.c343	f0 0a		beq $c34f			beq _hist_filled_buffer
.c345	b1 18		lda ($18),y			lda (tmp3),y
.c347	91 14		sta ($14),y			sta (tmp1),y
.c349	20 5e cd	jsr $cd5e			jsr Emit_A
.c34c	c8		iny				iny
.c34d	d0 eb		bne $c33a			bne _history_loop
.c34f					_hist_filled_buffer:
.c34f	88		dey				dey
.c350	4c 9d c2	jmp $c29d			jmp accept_loop
.c353					accept_done:
.c353	20 6e c3	jsr $c36e			jsr accept_total_recall
.c356	85 0d		sta $0d				sta status+1
.c358	a0 00		ldy #$00			ldy #0
.c35a	91 18		sta ($18),y			sta (tmp3),y
.c35c	e6 18		inc $18				inc tmp3
.c35e	d0 02		bne $c362			bne +		; Increment the upper byte on carry.
.c360	e6 19		inc $19				inc tmp3+1
.c362					+
.c362					_save_history_loop:
.c362	c4 0d		cpy $0d				cpy status+1
.c364	f0 07		beq $c36d			beq _save_history_done
.c366	b1 14		lda ($14),y			lda (tmp1),y
.c368	91 18		sta ($18),y			sta (tmp3),y
.c36a	c8		iny				iny
.c36b	d0 f5		bne $c362			bne _save_history_loop
.c36d					_save_history_done:
=257					CL	.var *-(WordListLink+wh_Xt)
=$ff					CL	 .var $ff
=$c36d					en = *	; remember here
>c26a	ff					.byte CL	;wh_CodeLength
.c36d	60		rts				rts
.c36e					accept_total_recall:
.c36e	a9 66		lda #$66			lda #<hist_buff
.c370	85 18		sta $18				sta tmp3
.c372	a9 07		lda #$07			lda #>hist_buff
.c374	85 19		sta $19				sta tmp3+1
.c376	a5 0c		lda $0c				lda status
.c378	6a		ror a				ror
.c379	29 03		and #$03			and #3
.c37b	18		clc				clc
.c37c	65 19		adc $19				adc tmp3+1
.c37e	85 19		sta $19				sta tmp3+1
.c380	a5 0c		lda $0c				lda status
.c382	6a		ror a				ror		; Rotate through carry into msb.
.c383	6a		ror a				ror
.c384	29 80		and #$80			and #$80
.c386	18		clc				clc
.c387	65 18		adc $18				adc tmp3
.c389	85 18		sta $18				sta tmp3
.c38b	90 02		bcc $c38f			bcc +		; Increment the upper byte on carry.
.c38d	e6 19		inc $19				inc tmp3+1
.c38f					+
.c38f	98		tya				tya
.c390	c9 80		cmp #$80			cmp #$80
.c392	90 02		bcc $c396			bcc +
.c394	a9 7f		lda #$7f			lda #$7F
.c396					+
.c396	60		rts				rts
>c397	49 6e 70 75 74 3e 52		L1:	.text "Input>R"	;  name of word as a string, ending at wh_NameLastChar
>c39e	47					.byte (("Input>R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c39f	e7 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3a1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3a2	08					.byte NN	;wh_Flags	dictionary flags
=49950					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3a3					Input_To_R:
.c3a3	68		pla				pla			; move it out of the way
.c3a4	85 14		sta $14				sta tmp1+0
.c3a6	68		pla				pla
.c3a7	85 15		sta $15				sta tmp1+1
.c3a9	a0 07		ldy #$07			ldy #7
.c3ab	b9 02 00	lda $0002,y	_loop:		lda InSrc,y	; insrc+7 is toin+1
.c3ae	48		pha				pha
.c3af	88		dey				dey
.c3b0	10 f9		bpl $c3ab			bpl _loop
.c3b2	a5 15		lda $15				lda tmp1+1		; Restore address for return jump
.c3b4	48		pha				pha
.c3b5	a5 14		lda $14				lda tmp1+0
.c3b7	48		pha				pha
=21					CL	.var *-(WordListLink+wh_Xt)
=$c3b8					en = *	; remember here
>c3a1	15					.byte CL	;wh_CodeLength
.c3b8	60		rts				rts
>c3b9	52 3e 49 6e 70 75 74		L1:	.text "R>Input"	;  name of word as a string, ending at wh_NameLastChar
>c3c0	87					.byte (("R>Input"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c3c1	1e c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3c4	08					.byte NN	;wh_Flags	dictionary flags
=49984					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3c5					R_To_Input:
.c3c5	68		pla				pla		 ; move it out of the way
.c3c6	85 14		sta $14				sta tmp1+0
.c3c8	68		pla				pla
.c3c9	85 15		sta $15				sta tmp1+1
.c3cb	a0 00		ldy #$00			ldy #0
.c3cd	68		pla		_loop:		pla
.c3ce	99 02 00	sta $0002,y			sta InSrc,y ; also cib ciblen toin
.c3d1	c8		iny				iny
.c3d2	c0 08		cpy #$08			cpy #8
.c3d4	d0 f7		bne $c3cd			bne _loop
.c3d6	a5 15		lda $15				lda tmp1+1		; Restore address for return jump
.c3d8	48		pha				pha
.c3d9	a5 14		lda $14				lda tmp1+0
.c3db	48		pha				pha
=23					CL	.var *-(WordListLink+wh_Xt)
=$c3dc					en = *	; remember here
>c3c3	17					.byte CL	;wh_CodeLength
.c3dc	60		rts				rts
>c3dd	42 6f 75 6e 64 73		L1:	.text "Bounds"	;  name of word as a string, ending at wh_NameLastChar
>c3e3	66					.byte (("Bounds"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c3e4	40 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3e6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3e7	10					.byte UF	;wh_Flags	dictionary flags
=50019					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3e8					Bounds:
.c3e8	20 d9 b3	jsr $b3d9			jsr underflow_2
.c3eb	18		clc				clc
.c3ec	b5 26		lda $26,x			lda DStack+2,x		; LSB addr
.c3ee	a8		tay				tay
.c3ef	75 24		adc $24,x			adc DStack+0,x		; LSB u
.c3f1	95 26		sta $26,x			sta DStack+2,x		; LSB addr+u
.c3f3	94 24		sty $24,x			sty DStack+0,x
.c3f5	b5 27		lda $27,x			lda DStack+3,x		; MSB addr
.c3f7	a8		tay				tay
.c3f8	75 25		adc $25,x			adc DStack+1,x		; MSB u
.c3fa	95 27		sta $27,x			sta DStack+3,x		; MSB addr+u
.c3fc	94 25		sty $25,x			sty DStack+1,x
=22					CL	.var *-(WordListLink+wh_Xt)
=$c3fe					en = *	; remember here
>c3e6	16					.byte CL	;wh_CodeLength
.c3fe	60		rts				rts
>c3ff	53 70 61 63 65 73		L1:	.text "Spaces"	;  name of word as a string, ending at wh_NameLastChar
>c405	66					.byte (("Spaces"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c406	63 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c408	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c409	18					.byte UF+NN	;wh_Flags	dictionary flags
=50053					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c40a					Spaces:
.c40a	20 c4 b3	jsr $b3c4			jsr underflow_1
.c40d	4c 13 c4	jmp $c413			jmp _test
.c410					_loop:
.c410	20 6b cd	jsr $cd6b			jsr Space		; print a space
.c413	d6 24		dec $24,x	_test:		dec DStack+0,x		; decrement & test
.c415	10 f9		bpl $c410			bpl _loop
.c417	e8		inx				inx			; Drop
.c418	e8		inx				inx
=15					CL	.var *-(WordListLink+wh_Xt)
=$c419					en = *	; remember here
>c408	0f					.byte CL	;wh_CodeLength
.c419	60		rts				rts
>c41a	2d 54 72 61 69 6c 69 6e		L1:	.text "-Trailing"	;  name of word as a string, ending at wh_NameLastChar
>c422	67
>c423	e9					.byte (("-Trailing"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c424	85 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c426	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c427	18					.byte UF+NN	;wh_Flags	dictionary flags
=50083					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c428					Minus_trailing:
.c428	20 d9 b3	jsr $b3d9			jsr underflow_2
.c42b	b5 26		lda $26,x			lda DStack+2,x		; tmp1= addr + (u1 & $ff00)
.c42d	85 14		sta $14				sta tmp1+0
.c42f	b5 27		lda $27,x			lda DStack+3,x
.c431	18		clc				clc
.c432	75 25		adc $25,x			adc DStack+1,x
.c434	85 15		sta $15				sta tmp1+1
.c436	b4 24		ldy $24,x			ldy DStack+0,x
.c438	88		dey		_loop:		dey			; back 1 char
.c439	c0 ff		cpy #$ff			cpy #$ff
.c43b	d0 06		bne $c443			bne +
.c43d	c6 15		dec $15				dec tmp1+1		;   back 1 page
.c43f	d6 25		dec $25,x			dec DStack+1,x
.c441	30 06		bmi $c449			bmi _done
.c443					+
.c443	b1 14		lda ($14),y			lda (tmp1),y		; if blank, keep going
.c445	c9 20		cmp #$20			cmp #AscSP
.c447	f0 ef		beq $c438			beq _loop
.c449	c8		iny		_done:		iny			; forward 1 char
.c44a	d0 02		bne $c44e			bne +
.c44c	f6 25		inc $25,x			inc DStack+1,x
.c44e	94 24		sty $24,x	+		sty DStack+0,x
=40					CL	.var *-(WordListLink+wh_Xt)
=$c450					en = *	; remember here
>c426	28					.byte CL	;wh_CodeLength
.c450	60		rts				rts
>c451	2d 4c 65 61 64 69 6e 67		L1:	.text "-Leading"	;  name of word as a string, ending at wh_NameLastChar
>c459	e8					.byte (("-Leading"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c45a	a3 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c45c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c45d	18					.byte UF+NN	;wh_Flags	dictionary flags
=50137					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c45e					Minus_leading:
.c45e	20 d9 b3	jsr $b3d9			jsr underflow_2
.c461					_loop:
.c461	b5 24		lda $24,x			lda DStack+0,x		; chars left?
.c463	15 25		ora $25,x			ora DStack+1,x
.c465	f0 0f		beq $c476			beq _done
.c467	a1 26		lda ($26,x)			lda (DStack+2,x)	; get first character
.c469	c9 21		cmp #$21			cmp #AscSP+1		;   is_whitespace
.c46b	b0 09		bcs $c476			bcs _done
.c46d	20 f0 c9	jsr $c9f0			jsr NOS_One_Plus
.c470	20 c3 c9	jsr $c9c3			jsr One_Minus_NoUF
.c473	4c 61 c4	jmp $c461			jmp _loop
.c476					_done:
=24					CL	.var *-(WordListLink+wh_Xt)
=$c476					en = *	; remember here
>c45c	18					.byte CL	;wh_CodeLength
.c476	60		rts				rts
>c477	2f 53 74 72 69 6e 67		L1:	.text "/String"	;  name of word as a string, ending at wh_NameLastChar
>c47e	e7					.byte (("/String"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c47f	d9 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c481	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c482	18					.byte UF+NN	;wh_Flags	dictionary flags
=50174					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c483					Slash_String:
.c483	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.c485	b0 1d		bcs $c4a4		bcs Throw_Stack_20
.c487	18		clc				clc		; addr += n
.c488	b5 24		lda $24,x			lda DStack+0,x
.c48a	75 28		adc $28,x			adc DStack+4,x
.c48c	95 28		sta $28,x			sta DStack+4,x
.c48e	b5 25		lda $25,x			lda DStack+1,x
.c490	75 29		adc $29,x			adc DStack+5,x
.c492	95 29		sta $29,x			sta DStack+5,x
.c494	38		sec				sec		; u -= n
.c495	b5 26		lda $26,x			lda DStack+2,x
.c497	f5 24		sbc $24,x			sbc DStack+0,x
.c499	95 26		sta $26,x			sta DStack+2,x
.c49b	b5 27		lda $27,x			lda DStack+3,x
.c49d	f5 25		sbc $25,x			sbc DStack+1,x
.c49f	95 27		sta $27,x			sta DStack+3,x
.c4a1	e8		inx				inx		; Drop n
.c4a2	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c4a3					en = *	; remember here
>c481	20					.byte CL	;wh_CodeLength
.c4a3	60		rts				rts
.c4a4	4c e8 b3	jmp $b3e8	Throw_Stack_20: jmp Throw_Stack
>c4a7	32 44 72 6f 70			L1:	.text "2Drop"	;  name of word as a string, ending at wh_NameLastChar
>c4ac	05					.byte (("2Drop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c4ad	fe c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4af	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4b0	10					.byte UF	;wh_Flags	dictionary flags
=50220					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4b1					Two_drop:
.c4b1	20 d9 b3	jsr $b3d9			jsr underflow_2
.c4b4	e8		inx				inx
.c4b5	e8		inx				inx
.c4b6	e8		inx				inx
.c4b7	e8		inx				inx
=7					CL	.var *-(WordListLink+wh_Xt)
=$c4b8					en = *	; remember here
>c4af	07					.byte CL	;wh_CodeLength
.c4b8	60		rts				rts
>c4b9	32 53 77 61 70			L1:	.text "2Swap"	;  name of word as a string, ending at wh_NameLastChar
>c4be	05					.byte (("2Swap"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c4bf	2c c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4c2	08					.byte NN	;wh_Flags	dictionary flags
=50238					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4c3					Two_swap:
.c4c3	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c4c5	b0 dd		bcs $c4a4		bcs Throw_Stack_20
.c4c7	86 14		stx $14				stx tmp1
.c4c9	ca		dex				dex
.c4ca	ca		dex				dex
.c4cb	ca		dex				dex
.c4cc	ca		dex				dex
.c4cd	e8		inx		_loop:		inx
.c4ce	b5 27		lda $27,x			lda DStack+3,x	; 3 <-> 7
.c4d0	b4 2b		ldy $2b,x			ldy DStack+7,x
.c4d2	95 2b		sta $2b,x			sta DStack+7,x
.c4d4	94 27		sty $27,x			sty DStack+3,x
.c4d6	e4 14		cpx $14				cpx tmp1
.c4d8	90 f3		bcc $c4cd			bcc _loop
=23					CL	.var *-(WordListLink+wh_Xt)
=$c4da					en = *	; remember here
>c4c1	17					.byte CL	;wh_CodeLength
.c4da	60		rts				rts
>c4db	32 4f 76 65 72			L1:	.text "2Over"	;  name of word as a string, ending at wh_NameLastChar
>c4e0	45					.byte (("2Over"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c4e1	3e c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4e3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4e4	18					.byte UF+NN	;wh_Flags	dictionary flags
=50272					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4e5					Two_over:
.c4e5	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c4e7	b0 bb		bcs $c4a4		bcs Throw_Stack_20
.c4e9	a0 04		ldy #$04			ldy #4
.c4eb	ca		dex		_loop:		dex
.c4ec	b5 2c		lda $2c,x			lda DStack+8,x
.c4ee	95 24		sta $24,x			sta DStack+0,x
.c4f0	88		dey				dey
.c4f1	d0 f8		bne $c4eb			bne _loop
=14					CL	.var *-(WordListLink+wh_Xt)
=$c4f3					en = *	; remember here
>c4e3	0e					.byte CL	;wh_CodeLength
.c4f3	60		rts				rts
>c4f4	32 21				L1:	.text "2!"	;  name of word as a string, ending at wh_NameLastChar
>c4f6	22					.byte (("2!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c4f7	60 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4f9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4fa	10					.byte UF	;wh_Flags	dictionary flags
=50294					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4fb					Two_Store:
.c4fb	20 de b3	jsr $b3de			jsr underflow_3
.c4fe	20 9a b3	jsr $b39a			jsr PopYA
.c501	85 14		sta $14		Two_Store_YA:	sta tmp1+0	; save addr
.c503	84 15		sty $15				sty tmp1+1
.c505	b5 24		lda $24,x			lda DStack+0,x	; copy MSB
.c507	a0 00		ldy #$00			ldy #0
.c509	91 14		sta ($14),y			sta (tmp1),y
.c50b	b5 25		lda $25,x			lda DStack+1,x	; copy next
.c50d	c8		iny				iny
.c50e	91 14		sta ($14),y			sta (tmp1),y
.c510	b5 26		lda $26,x			lda DStack+2,x	; copy next
.c512	c8		iny				iny
.c513	91 14		sta ($14),y			sta (tmp1),y
.c515	b5 27		lda $27,x			lda DStack+3,x	; copy MSB
.c517	c8		iny				iny
.c518	91 14		sta ($14),y			sta (tmp1),y
.c51a	e8		inx				inx		; 2Drop
.c51b	e8		inx				inx
.c51c	e8		inx				inx
.c51d	e8		inx				inx
=35					CL	.var *-(WordListLink+wh_Xt)
=$c51e					en = *	; remember here
>c4f9	23					.byte CL	;wh_CodeLength
.c51e	60		rts				rts
>c51f	32 40				L1:	.text "2@"	;  name of word as a string, ending at wh_NameLastChar
>c521	02					.byte (("2@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c522	76 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c524	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c525	00					.byte 0	;wh_Flags	dictionary flags
=50337					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c526	20 9a b3	jsr $b39a	Two_fetch:	jsr PopYA
.c529	85 14		sta $14		Two_Fetch_YA:	sta tmp1+0	; save addr
.c52b	84 15		sty $15				sty tmp1+1
.c52d					Two_Fetch_tmp1:
.c52d	ca		dex				dex
.c52e	ca		dex				dex
.c52f	ca		dex				dex
.c530	ca		dex				dex
.c531	a0 00		ldy #$00			ldy #0		; copy LSB
.c533	b1 14		lda ($14),y			lda (tmp1),y
.c535	95 24		sta $24,x			sta DStack+0,x
.c537	c8		iny				iny		; copy next
.c538	b1 14		lda ($14),y			lda (tmp1),y
.c53a	95 25		sta $25,x			sta DStack+1,x
.c53c	c8		iny				iny		; copy next
.c53d	b1 14		lda ($14),y			lda (tmp1),y
.c53f	95 26		sta $26,x			sta DStack+2,x
.c541	c8		iny				iny		; copy next
.c542	b1 14		lda ($14),y			lda (tmp1),y
.c544	95 27		sta $27,x			sta DStack+3,x
=32					CL	.var *-(WordListLink+wh_Xt)
=$c546					en = *	; remember here
>c524	20					.byte CL	;wh_CodeLength
.c546	60		rts				rts
>c547	44 40				L1:	.text "D@"	;  name of word as a string, ending at wh_NameLastChar
>c549	02					.byte (("D@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c54a	a1 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c54c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c54d	08					.byte NN	;wh_Flags	dictionary flags
=50377					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c54e	20 9a b3	jsr $b39a	DFetch:		jsr PopYA
.c551	85 14		sta $14		DFetchYA:	sta tmp1+0	; save addr
.c553	84 15		sty $15				sty tmp1+1
.c555	ca		dex				dex
.c556	ca		dex				dex
.c557	ca		dex				dex
.c558	ca		dex				dex
.c559	a0 00		ldy #$00			ldy #0
.c55b	b1 14		lda ($14),y			lda (tmp1),y
.c55d	95 26		sta $26,x			sta DStack+2,x
.c55f	c8		iny				iny
.c560	b1 14		lda ($14),y			lda (tmp1),y
.c562	95 27		sta $27,x			sta DStack+3,x
.c564	c8		iny				iny
.c565	b1 14		lda ($14),y			lda (tmp1),y
.c567	95 24		sta $24,x			sta DStack+0,x
.c569	c8		iny				iny
.c56a	b1 14		lda ($14),y			lda (tmp1),y
.c56c	95 25		sta $25,x			sta DStack+1,x
=32					CL	.var *-(WordListLink+wh_Xt)
=$c56e					en = *	; remember here
>c54c	20					.byte CL	;wh_CodeLength
.c56e	60		rts				rts
>c56f	32 52 40			L1:	.text "2R@"	;  name of word as a string, ending at wh_NameLastChar
>c572	03					.byte (("2R@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c573	c9 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c575	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c576	09					.byte CO+NN	;wh_Flags	dictionary flags
=50418					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c577					Two_r_fetch:
.c577	8a		txa				txa		; Y= return stack index
.c578	ba		tsx				tsx
.c579	86 14		stx $14				stx tmp1
.c57b	a4 14		ldy $14				ldy tmp1
.c57d	aa		tax				tax
.c57e	ca		dex				dex		; make room on the Data Stack
.c57f	ca		dex				dex
.c580	ca		dex				dex
.c581	ca		dex				dex
.c582	b9 03 01	lda $0103,y			lda RStack+3,y	; LSB of top entry
.c585	95 24		sta $24,x			sta DStack+0,x
.c587	b9 04 01	lda $0104,y			lda RStack+4,y	; MSB of top entry
.c58a	95 25		sta $25,x			sta DStack+1,x
.c58c	b9 05 01	lda $0105,y			lda RStack+5,y	; LSB of bottom entry
.c58f	95 26		sta $26,x			sta DStack+2,x
.c591	b9 06 01	lda $0106,y			lda RStack+6,y	; MSB of bottom entry
.c594	95 27		sta $27,x			sta DStack+3,x
=31					CL	.var *-(WordListLink+wh_Xt)
=$c596					en = *	; remember here
>c575	1f					.byte CL	;wh_CodeLength
.c596	60		rts				rts
>c597	32 52 3e			L1:	.text "2R>"	;  name of word as a string, ending at wh_NameLastChar
>c59a	c3					.byte (("2R>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c59b	f2 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c59d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c59e	41					.byte CO+R6	;wh_Flags	dictionary flags
=50458					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c59f					Two_r_from:
.c59f	68		pla				pla			; save the return address
.c5a0	85 14		sta $14				sta tmp1+0
.c5a2	68		pla				pla
.c5a3	85 15		sta $15				sta tmp1+1
.c5a5	ca		dex				dex			; make room on stack
.c5a6	ca		dex				dex
.c5a7	ca		dex				dex
.c5a8	ca		dex				dex
.c5a9	68		pla				pla			; LSB
.c5aa	95 24		sta $24,x			sta DStack+0,x
.c5ac	68		pla				pla			; MSB
.c5ad	95 25		sta $25,x			sta DStack+1,x
.c5af	68		pla				pla			; LSB
.c5b0	95 26		sta $26,x			sta DStack+2,x
.c5b2	68		pla				pla			; MSB
.c5b3	95 27		sta $27,x			sta DStack+3,x
.c5b5	a5 15		lda $15				lda tmp1+1		; restore return address
.c5b7	48		pha				pha
.c5b8	a5 14		lda $14				lda tmp1+0
.c5ba	48		pha				pha
=28					CL	.var *-(WordListLink+wh_Xt)
=$c5bb					en = *	; remember here
>c59d	1c					.byte CL	;wh_CodeLength
.c5bb	60		rts				rts
>c5bc	32 3e 52			L1:	.text "2>R"	;  name of word as a string, ending at wh_NameLastChar
>c5bf	43					.byte (("2>R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c5c0	1a c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5c3	51					.byte CO+UF+R6	;wh_Flags	dictionary flags
=50495					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5c4					Two_to_r:
.c5c4	68		pla				pla		; save the return address
.c5c5	85 14		sta $14				sta tmp1+0
.c5c7	68		pla				pla
.c5c8	85 15		sta $15				sta tmp1+1
.c5ca	20 d9 b3	jsr $b3d9			jsr underflow_2
.c5cd	b5 27		lda $27,x			lda DStack+3,x	; MSB
.c5cf	48		pha				pha
.c5d0	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c5d2	48		pha				pha
.c5d3	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c5d5	48		pha				pha
.c5d6	b5 24		lda $24,x			lda DStack+0,x	; LSB
.c5d8	48		pha				pha
.c5d9	e8		inx				inx
.c5da	e8		inx				inx
.c5db	e8		inx				inx
.c5dc	e8		inx				inx
.c5dd	a5 15		lda $15				lda tmp1+1	; restore return address
.c5df	48		pha				pha
.c5e0	a5 14		lda $14				lda tmp1+0
.c5e2	48		pha				pha
=31					CL	.var *-(WordListLink+wh_Xt)
=$c5e3					en = *	; remember here
>c5c2	1f					.byte CL	;wh_CodeLength
.c5e3	60		rts				rts
>c5e4	49 6e 76 65 72 74		L1:	.text "Invert"	;  name of word as a string, ending at wh_NameLastChar
>c5ea	86					.byte (("Invert"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c5eb	3f c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5ed	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5ee	10					.byte UF	;wh_Flags	dictionary flags
=50538					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5ef					Invert:
.c5ef	20 c4 b3	jsr $b3c4			jsr underflow_1
.c5f2	a9 ff		lda #$ff			lda #$FF
.c5f4	55 24		eor $24,x			eor DStack+0,x	; LSB
.c5f6	95 24		sta $24,x			sta DStack+0,x
.c5f8	a9 ff		lda #$ff			lda #$FF
.c5fa	55 25		eor $25,x			eor DStack+1,x	; MSB
.c5fc	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$c5fe					en = *	; remember here
>c5ed	0f					.byte CL	;wh_CodeLength
.c5fe	60		rts				rts
>c5ff	4e 65 67 61 74 65		L1:	.text "Negate"	;  name of word as a string, ending at wh_NameLastChar
>c605	a6					.byte (("Negate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c606	6a c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c608	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c609	10					.byte UF	;wh_Flags	dictionary flags
=50565					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c60a					Negate:
.c60a	20 c4 b3	jsr $b3c4			jsr underflow_1
.c60d	38		sec		Negate3:	sec
.c60e	a9 00		lda #$00	Negate4:	lda #0
.c610	f5 24		sbc $24,x			sbc DStack+0,x	; LSB
.c612	95 24		sta $24,x			sta DStack+0,x
.c614	a9 00		lda #$00			lda #0
.c616	f5 25		sbc $25,x			sbc DStack+1,x	; MSB
.c618	95 25		sta $25,x			sta DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$c61a					en = *	; remember here
>c608	10					.byte CL	;wh_CodeLength
.c61a	60		rts				rts
>c61b	41 62 73			L1:	.text "Abs"	;  name of word as a string, ending at wh_NameLastChar
>c61e	63					.byte (("Abs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c61f	85 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c621	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c622	08					.byte NN	;wh_Flags	dictionary flags
=50590					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c623					Abs:
.c623	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c625	b0 05		bcs $c62c		bcs Throw_Stack_17
.c627	b5 25		lda $25,x			lda DStack+1,x	; n negative?
.c629	30 e2		bmi $c60d			bmi Negate3
=8					CL	.var *-(WordListLink+wh_Xt)
=$c62b					en = *	; remember here
>c621	08					.byte CL	;wh_CodeLength
.c62b	60		rts				rts
.c62c	4c e8 b3	jmp $b3e8	Throw_Stack_17: jmp Throw_Stack
>c62f	44 4e 65 67 61 74 65		L1:	.text "DNegate"	;  name of word as a string, ending at wh_NameLastChar
>c636	a7					.byte (("DNegate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c637	9e c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c639	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c63a	08					.byte NN	;wh_Flags	dictionary flags
=50614					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c63b					DNegate:
.c63b	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c63d	b0 ed		bcs $c62c		bcs Throw_Stack_17
.c63f	38		sec		DNegate3:	sec
.c640	a9 00		lda #$00			lda #0
.c642	f5 26		sbc $26,x			sbc DStack+2,x	; LSB of low cell
.c644	95 26		sta $26,x			sta DStack+2,x
.c646	a9 00		lda #$00			lda #0
.c648	f5 27		sbc $27,x			sbc DStack+3,x	; MSB of low cell
.c64a	95 27		sta $27,x			sta DStack+3,x
.c64c	4c 0e c6	jmp $c60e			jmp Negate4
=20					CL	.var *-(WordListLink+wh_Xt)
=$c64f					en = *	; remember here
>c639	14					.byte CL	;wh_CodeLength
>c64f	44 41 62 73			L1:	.text "DAbs"	;  name of word as a string, ending at wh_NameLastChar
>c653	64					.byte (("DAbs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c654	b6 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c656	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c657	08					.byte NN	;wh_Flags	dictionary flags
=50643					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c658					DAbs:
.c658	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c65a	b0 d0		bcs $c62c		bcs Throw_Stack_17
.c65c	b5 25		lda $25,x			lda DStack+1,x	; d negative?
.c65e	30 df		bmi $c63f			bmi DNegate3
=8					CL	.var *-(WordListLink+wh_Xt)
=$c660					en = *	; remember here
>c656	08					.byte CL	;wh_CodeLength
.c660	60		rts				rts
>c661	44 3c 3e			L1:	.text "D<>"	;  name of word as a string, ending at wh_NameLastChar
>c664	c3					.byte (("D<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c665	d3 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c667	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c668	08					.byte NN	;wh_Flags	dictionary flags
=50660					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c669	20 76 c6	jsr $c676	DNEq:		jsr DEqual
.c66c	4c 71 c8	jmp $c871			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c66f					en = *	; remember here
>c667	06					.byte CL	;wh_CodeLength
>c66f	44 3d				L1:	.text "D="	;  name of word as a string, ending at wh_NameLastChar
>c671	a2					.byte (("D="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c672	e4 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c674	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c675	08					.byte NN	;wh_Flags	dictionary flags
=50673					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c676	b5 2a		lda $2a,x	DEqual:		lda DStack+6,x
.c678	d5 26		cmp $26,x			cmp DStack+2,x
.c67a	d0 50		bne $c6cc			bne False3
.c67c	b5 2b		lda $2b,x			lda DStack+7,x
.c67e	d5 27		cmp $27,x			cmp DStack+3,x
.c680	d0 4a		bne $c6cc			bne False3
.c682	b5 24		lda $24,x			lda DStack+0,x
.c684	d5 28		cmp $28,x			cmp DStack+4,x
.c686	d0 44		bne $c6cc			bne False3
.c688	b5 25		lda $25,x			lda DStack+1,x
.c68a	d5 29		cmp $29,x			cmp DStack+5,x
.c68c	d0 3e		bne $c6cc			bne False3
.c68e	f0 62		beq $c6f2			beq True3
=26					CL	.var *-(WordListLink+wh_Xt)
=$c690					en = *	; remember here
>c674	1a					.byte CL	;wh_CodeLength
>c690	44 55 3e			L1:	.text "DU>"	;  name of word as a string, ending at wh_NameLastChar
>c693	c3					.byte (("DU>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c694	f1 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c696	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c697	08					.byte NN	;wh_Flags	dictionary flags
=50707					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c698	20 31 c7	jsr $c731	DUGt:		jsr DGtSub
.c69b	90 55		bcc $c6f2			bcc True3
.c69d	b0 2d		bcs $c6cc			bcs False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c69f					en = *	; remember here
>c696	07					.byte CL	;wh_CodeLength
>c69f	44 55 3c 3d			L1:	.text "DU<="	;  name of word as a string, ending at wh_NameLastChar
>c6a3	a4					.byte (("DU<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6a4	13 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6a6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6a7	08					.byte NN	;wh_Flags	dictionary flags
=50723					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6a8	20 31 c7	jsr $c731	DULe:		jsr DGtSub
.c6ab	b0 45		bcs $c6f2			bcs True3
.c6ad	90 1d		bcc $c6cc			bcc False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c6af					en = *	; remember here
>c6a6	07					.byte CL	;wh_CodeLength
>c6af	44 55 3e 3d			L1:	.text "DU>="	;  name of word as a string, ending at wh_NameLastChar
>c6b3	a4					.byte (("DU>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6b4	23 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6b6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6b7	08					.byte NN	;wh_Flags	dictionary flags
=50739					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6b8	20 ff c6	jsr $c6ff	DUGe:		jsr DLessSub
.c6bb	b0 35		bcs $c6f2			bcs True3
.c6bd	90 0d		bcc $c6cc			bcc False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c6bf					en = *	; remember here
>c6b6	07					.byte CL	;wh_CodeLength
>c6bf	44 55 3c			L1:	.text "DU<"	;  name of word as a string, ending at wh_NameLastChar
>c6c2	83					.byte (("DU<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6c3	33 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6c5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6c6	08					.byte NN	;wh_Flags	dictionary flags
=50754					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6c7	20 ff c6	jsr $c6ff	DULess:		jsr DLessSub
.c6ca	90 26		bcc $c6f2			bcc True3
.c6cc	a9 00		lda #$00	False3:		lda #0
.c6ce	f0 24		beq $c6f4			beq DReturn3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c6d0					en = *	; remember here
>c6c5	09					.byte CL	;wh_CodeLength
.c6d0	4c e8 b3	jmp $b3e8	Throw_Stack_09: jmp Throw_Stack
>c6d3	44 3e 3d			L1:	.text "D>="	;  name of word as a string, ending at wh_NameLastChar
>c6d6	a3					.byte (("D>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6d7	42 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6d9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6da	08					.byte NN	;wh_Flags	dictionary flags
=50774					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6db	20 ff c6	jsr $c6ff	DGEq:		jsr DLessSub
.c6de	70 10		bvs $c6f0			bvs DLess3
.c6e0	10 10		bpl $c6f2	DGEq3:		bpl True3
.c6e2	30 e8		bmi $c6cc			bmi False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c6e4					en = *	; remember here
>c6d9	09					.byte CL	;wh_CodeLength
>c6e4	44 3c				L1:	.text "D<"	;  name of word as a string, ending at wh_NameLastChar
>c6e6	82					.byte (("D<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6e7	56 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6e9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6ea	08					.byte NN	;wh_Flags	dictionary flags
=50790					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6eb	20 ff c6	jsr $c6ff	DLess:		jsr DLessSub
.c6ee	70 f0		bvs $c6e0			bvs DGEq3
.c6f0	10 da		bpl $c6cc	DLess3:		bpl False3
.c6f2	a9 ff		lda #$ff	True3:		lda #$ff
.c6f4					DReturn3:
.c6f4	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c6f6	b0 d8		bcs $c6d0		bcs Throw_Stack_09
.c6f8	95 2a		sta $2a,x			sta DStack+6,x
.c6fa	95 2b		sta $2b,x			sta DStack+7,x
.c6fc	4c 02 ad	jmp $ad02			jmp ThreeDrop
=20					CL	.var *-(WordListLink+wh_Xt)
=$c6ff					en = *	; remember here
>c6e9	14					.byte CL	;wh_CodeLength
.c6ff	b5 2a		lda $2a,x	DLessSub:	lda DStack+6,x
.c701	d5 26		cmp $26,x			cmp DStack+2,x
.c703	b5 2b		lda $2b,x			lda DStack+7,x
.c705	f5 27		sbc $27,x			sbc DStack+3,x
.c707	b5 28		lda $28,x			lda DStack+4,x
.c709	f5 24		sbc $24,x			sbc DStack+0,x
.c70b	b5 29		lda $29,x			lda DStack+5,x
.c70d	f5 25		sbc $25,x			sbc DStack+1,x
.c70f	60		rts				rts
>c710	44 3c 3d			L1:	.text "D<="	;  name of word as a string, ending at wh_NameLastChar
>c713	a3					.byte (("D<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c714	66 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c716	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c717	08					.byte NN	;wh_Flags	dictionary flags
=50835					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c718	20 31 c7	jsr $c731	DLe:		jsr DGtSub
.c71b	70 10		bvs $c72d			bvs DGt3
.c71d	10 d3		bpl $c6f2	DLe3:		bpl True3
.c71f	30 ab		bmi $c6cc			bmi False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c721					en = *	; remember here
>c716	09					.byte CL	;wh_CodeLength
>c721	44 3e				L1:	.text "D>"	;  name of word as a string, ending at wh_NameLastChar
>c723	c2					.byte (("D>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c724	93 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c726	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c727	08					.byte NN	;wh_Flags	dictionary flags
=50851					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c728	20 31 c7	jsr $c731	DGt:		jsr DGtSub
.c72b	70 f0		bvs $c71d			bvs DLe3
.c72d	30 c3		bmi $c6f2	DGt3:		bmi True3
.c72f	10 9b		bpl $c6cc			bpl False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c731					en = *	; remember here
>c726	09					.byte CL	;wh_CodeLength
.c731	b5 26		lda $26,x	DGtSub:		lda DStack+2,x
.c733	d5 2a		cmp $2a,x			cmp DStack+6,x
.c735	b5 27		lda $27,x			lda DStack+3,x
.c737	f5 2b		sbc $2b,x			sbc DStack+7,x
.c739	b5 24		lda $24,x			lda DStack+0,x
.c73b	f5 28		sbc $28,x			sbc DStack+4,x
.c73d	b5 25		lda $25,x			lda DStack+1,x
.c73f	f5 29		sbc $29,x			sbc DStack+5,x
.c741	60		rts				rts
>c742	44 30 3c 3d			L1:	.text "D0<="	;  name of word as a string, ending at wh_NameLastChar
>c746	a4					.byte (("D0<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c747	a3 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c749	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c74a	08					.byte NN	;wh_Flags	dictionary flags
=50886					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c74b	b5 25		lda $25,x	D0Le:		lda DStack+1,x	; test sign
.c74d	30 6b		bmi $c7ba			bmi True1
.c74f	10 27		bpl $c778			bpl D0Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c751					en = *	; remember here
>c749	06					.byte CL	;wh_CodeLength
>c751	44 30 3e			L1:	.text "D0>"	;  name of word as a string, ending at wh_NameLastChar
>c754	c3					.byte (("D0>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c755	c6 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c757	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c758	08					.byte NN	;wh_Flags	dictionary flags
=50900					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c759	b5 25		lda $25,x	D0Gt:		lda DStack+1,x	; test sign
.c75b	10 0c		bpl $c769			bpl D0Ne
.c75d	4c da c7	jmp $c7da			jmp False1
>c760	44 30 3c 3e			L1:	.text "D0<>"	;  name of word as a string, ending at wh_NameLastChar
>c764	c4					.byte (("D0<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c765	d4 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c767	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c768	08					.byte NN	;wh_Flags	dictionary flags
=50916					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c769	20 7f c7	jsr $c77f	D0Ne:		jsr D0EqSub
.c76c	d0 4c		bne $c7ba			bne True1
.c76e	f0 6a		beq $c7da			beq False1
=7					CL	.var *-(WordListLink+wh_Xt)
=$c770					en = *	; remember here
>c767	07					.byte CL	;wh_CodeLength
>c770	44 30 3d			L1:	.text "D0="	;  name of word as a string, ending at wh_NameLastChar
>c773	a3					.byte (("D0="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c774	e4 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c776	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c777	08					.byte NN	;wh_Flags	dictionary flags
=50931					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c778	20 7f c7	jsr $c77f	D0Equal:	jsr D0EqSub
.c77b	d0 5d		bne $c7da			bne False1
.c77d	f0 3b		beq $c7ba			beq True1
=7					CL	.var *-(WordListLink+wh_Xt)
=$c77f					en = *	; remember here
>c776	07					.byte CL	;wh_CodeLength
.c77f	b5 26		lda $26,x	D0EqSub:	lda DStack+2,x
.c781	15 27		ora $27,x			ora DStack+3,x
.c783	15 24		ora $24,x			ora DStack+0,x
.c785	15 25		ora $25,x			ora DStack+1,x
.c787	60		rts				rts
>c788	44 30 3c			L1:	.text "D0<"	;  name of word as a string, ending at wh_NameLastChar
>c78b	83					.byte (("D0<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c78c	f3 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c78e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c78f	08					.byte NN	;wh_Flags	dictionary flags
=50955					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c790	b5 25		lda $25,x	D0Less:		lda DStack+1,x	; test sign
.c792	30 26		bmi $c7ba			bmi True1
.c794	10 44		bpl $c7da			bpl False1
=6					CL	.var *-(WordListLink+wh_Xt)
=$c796					en = *	; remember here
>c78e	06					.byte CL	;wh_CodeLength
>c796	44 30 3e 3d			L1:	.text "D0>="	;  name of word as a string, ending at wh_NameLastChar
>c79a	a4					.byte (("D0>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c79b	0b c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c79d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c79e	08					.byte NN	;wh_Flags	dictionary flags
=50970					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c79f	b5 25		lda $25,x	D0Ge:		lda DStack+1,x	; test sign
.c7a1	10 17		bpl $c7ba			bpl True1
.c7a3	30 35		bmi $c7da			bmi False1
=6					CL	.var *-(WordListLink+wh_Xt)
=$c7a5					en = *	; remember here
>c79d	06					.byte CL	;wh_CodeLength
.c7a5	4c e8 b3	jmp $b3e8	Throw_Stack_08: jmp Throw_Stack
>c7a8	3d				L1:	.text "="	;  name of word as a string, ending at wh_NameLastChar
>c7a9	a1					.byte (("="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7aa	1a c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7ac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7ad	08					.byte NN	;wh_Flags	dictionary flags
=50985					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7ae	b5 24		lda $24,x	Equal:		lda DStack+0,x		; LSB
.c7b0	d5 26		cmp $26,x			cmp DStack+2,x
.c7b2	d0 26		bne $c7da			bne False1
.c7b4	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c7b6	d5 27		cmp $27,x			cmp DStack+3,x
.c7b8	d0 20		bne $c7da			bne False1
.c7ba	a9 ff		lda #$ff	True1:		lda #$ff	; return TRUE
.c7bc					Return1:
.c7bc	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c7be	b0 e5		bcs $c7a5		bcs Throw_Stack_08
.c7c0	e8		inx				inx		; Drop
.c7c1	e8		inx				inx
.c7c2	95 24		sta $24,x			sta DStack+0,x	; store f
.c7c4	95 25		sta $25,x			sta DStack+1,x
.c7c6	60		rts				rts
=25					CL	.var *-(WordListLink+wh_Xt)
=$c7c7					en = *	; remember here
>c7ac	19					.byte CL	;wh_CodeLength
>c7c7	3c 3e				L1:	.text "<>"	;  name of word as a string, ending at wh_NameLastChar
>c7c9	c2					.byte (("<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7ca	29 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7cd	08					.byte NN	;wh_Flags	dictionary flags
=51017					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7ce	b5 24		lda $24,x	Not_Equals:	lda DStack+0,x		; LSB
.c7d0	d5 26		cmp $26,x			cmp DStack+2,x
.c7d2	d0 e6		bne $c7ba			bne True1
.c7d4	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c7d6	d5 27		cmp $27,x			cmp DStack+3,x
.c7d8	d0 e0		bne $c7ba			bne True1
.c7da	a9 00		lda #$00	False1:		lda #0		; return FALSE
.c7dc	f0 de		beq $c7bc			beq Return1
=16					CL	.var *-(WordListLink+wh_Xt)
=$c7de					en = *	; remember here
>c7cc	10					.byte CL	;wh_CodeLength
>c7de	3c				L1:	.text "<"	;  name of word as a string, ending at wh_NameLastChar
>c7df	81					.byte (("<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7e0	49 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7e3	08					.byte NN	;wh_Flags	dictionary flags
=51039					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7e4	b5 26		lda $26,x	Less_Than:	lda DStack+2,x	; compare
.c7e6	d5 24		cmp $24,x			cmp DStack+0,x
.c7e8	b5 27		lda $27,x			lda DStack+3,x
.c7ea	f5 25		sbc $25,x			sbc DStack+1,x
.c7ec	50 02		bvc $c7f0			bvc _c
.c7ee	49 80		eor #$80			eor #$80	; fix sign
.c7f0	10 e8		bpl $c7da	_c:		bpl False1
.c7f2	30 c6		bmi $c7ba			bmi True1
=16					CL	.var *-(WordListLink+wh_Xt)
=$c7f4					en = *	; remember here
>c7e2	10					.byte CL	;wh_CodeLength
>c7f4	3e 3d				L1:	.text ">="	;  name of word as a string, ending at wh_NameLastChar
>c7f6	a2					.byte ((">="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7f7	5f c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7f9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7fa	08					.byte NN	;wh_Flags	dictionary flags
=51062					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7fb	20 e4 c7	jsr $c7e4	Ge:		jsr Less_Than
.c7fe	4c 71 c8	jmp $c871			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c801					en = *	; remember here
>c7f9	06					.byte CL	;wh_CodeLength
>c801	55 3c				L1:	.text "U<"	;  name of word as a string, ending at wh_NameLastChar
>c803	82					.byte (("U<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c804	76 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c806	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c807	08					.byte NN	;wh_Flags	dictionary flags
=51075					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c808	b5 26		lda $26,x	U_Less_Than:	lda DStack+2,x
.c80a	d5 24		cmp $24,x			cmp DStack+0,x
.c80c	b5 27		lda $27,x			lda DStack+3,x
.c80e	f5 25		sbc $25,x			sbc DStack+1,x
.c810	b0 c8		bcs $c7da			bcs False1
.c812	90 a6		bcc $c7ba			bcc True1
=12					CL	.var *-(WordListLink+wh_Xt)
=$c814					en = *	; remember here
>c806	0c					.byte CL	;wh_CodeLength
>c814	55 3e				L1:	.text "U>"	;  name of word as a string, ending at wh_NameLastChar
>c816	c2					.byte (("U>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c817	83 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c819	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c81a	08					.byte NN	;wh_Flags	dictionary flags
=51094					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c81b	b5 24		lda $24,x	U_Greater_Than:	lda DStack+0,x
.c81d	d5 26		cmp $26,x			cmp DStack+2,x
.c81f	b5 25		lda $25,x			lda DStack+1,x
.c821	f5 27		sbc $27,x			sbc DStack+3,x
.c823	b0 b5		bcs $c7da			bcs False1
.c825	90 93		bcc $c7ba			bcc True1
=12					CL	.var *-(WordListLink+wh_Xt)
=$c827					en = *	; remember here
>c819	0c					.byte CL	;wh_CodeLength
>c827	3e				L1:	.text ">"	;  name of word as a string, ending at wh_NameLastChar
>c828	c1					.byte ((">"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c829	96 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c82b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c82c	08					.byte NN	;wh_Flags	dictionary flags
=51112					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c82d	b5 24		lda $24,x	Greater_Than:	lda DStack+0,x	; compare
.c82f	d5 26		cmp $26,x			cmp DStack+2,x
.c831	b5 25		lda $25,x			lda DStack+1,x
.c833	f5 27		sbc $27,x			sbc DStack+3,x
.c835	50 02		bvc $c839			bvc _c
.c837	49 80		eor #$80			eor #$80	; fix sign
.c839	10 9f		bpl $c7da	_c:		bpl False1
.c83b	4c ba c7	jmp $c7ba			jmp True1
=17					CL	.var *-(WordListLink+wh_Xt)
=$c83e					en = *	; remember here
>c82b	11					.byte CL	;wh_CodeLength
>c83e	3c 3d				L1:	.text "<="	;  name of word as a string, ending at wh_NameLastChar
>c840	a2					.byte (("<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c841	a8 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c843	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c844	08					.byte NN	;wh_Flags	dictionary flags
=51136					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c845	20 2d c8	jsr $c82d	Le:		jsr Greater_Than
.c848	4c 71 c8	jmp $c871			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c84b					en = *	; remember here
>c843	06					.byte CL	;wh_CodeLength
>c84b	55 3e 3d			L1:	.text "U>="	;  name of word as a string, ending at wh_NameLastChar
>c84e	a3					.byte (("U>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c84f	c0 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c851	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c852	08					.byte NN	;wh_Flags	dictionary flags
=51150					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c853	20 08 c8	jsr $c808	UGe:		jsr U_Less_Than
.c856	4c 71 c8	jmp $c871			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c859					en = *	; remember here
>c851	06					.byte CL	;wh_CodeLength
>c859	55 3c 3d			L1:	.text "U<="	;  name of word as a string, ending at wh_NameLastChar
>c85c	a3					.byte (("U<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c85d	ce c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c85f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c860	08					.byte NN	;wh_Flags	dictionary flags
=51164					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c861	20 1b c8	jsr $c81b	ULe:		jsr U_Greater_Than
.c864	4c 71 c8	jmp $c871			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c867					en = *	; remember here
>c85f	06					.byte CL	;wh_CodeLength
.c867	4c e8 b3	jmp $b3e8	Throw_Stack_11: jmp Throw_Stack
>c86a	30 3d				L1:	.text "0="	;  name of word as a string, ending at wh_NameLastChar
>c86c	a2					.byte (("0="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c86d	dc c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c86f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c870	08					.byte NN	;wh_Flags	dictionary flags
=51180					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c871	b5 25		lda $25,x	Zero_Equal:	lda DStack+1,x
.c873	15 24		ora $24,x	ZEq3:		ora DStack+0,x
.c875	d0 26		bne $c89d			bne False0
.c877	f0 0e		beq $c887			beq True0
=8					CL	.var *-(WordListLink+wh_Xt)
=$c879					en = *	; remember here
>c86f	08					.byte CL	;wh_CodeLength
>c879	30 3c 3e			L1:	.text "0<>"	;  name of word as a string, ending at wh_NameLastChar
>c87c	c3					.byte (("0<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c87d	ec c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c87f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c880	08					.byte NN	;wh_Flags	dictionary flags
=51196					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c881	b5 25		lda $25,x	Zero_Unequal:	lda DStack+1,x
.c883	15 24		ora $24,x	ZNe3:		ora DStack+0,x
.c885	f0 16		beq $c89d			beq False0
.c887	a9 ff		lda #$ff	True0:		lda #$ff	; return TRUE
.c889	95 24		sta $24,x	Return0:	sta DStack+0,x
.c88b	95 25		sta $25,x			sta DStack+1,x
.c88d	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c88f	b0 39		bcs $c8ca		bcs Throw_Stack_05
.c891	60		rts				rts
=17					CL	.var *-(WordListLink+wh_Xt)
=$c892					en = *	; remember here
>c87f	11					.byte CL	;wh_CodeLength
>c892	30 3e				L1:	.text "0>"	;  name of word as a string, ending at wh_NameLastChar
>c894	c2					.byte (("0>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c895	fc c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c897	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c898	08					.byte NN	;wh_Flags	dictionary flags
=51220					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c899	b5 25		lda $25,x	Zero_Greater:	lda DStack+1,x	; MSB
.c89b	10 e6		bpl $c883			bpl ZNe3	; >= 0 ?
.c89d	a9 00		lda #$00	False0:		lda #0		; return FALSE
.c89f	f0 e8		beq $c889			beq Return0
=8					CL	.var *-(WordListLink+wh_Xt)
=$c8a1					en = *	; remember here
>c897	08					.byte CL	;wh_CodeLength
>c8a1	30 3c 3d			L1:	.text "0<="	;  name of word as a string, ending at wh_NameLastChar
>c8a4	a3					.byte (("0<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8a5	14 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8a7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8a8	08					.byte NN	;wh_Flags	dictionary flags
=51236					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8a9	b5 25		lda $25,x	ZLe:		lda DStack+1,x	; < 0 ?
.c8ab	30 da		bmi $c887			bmi True0
.c8ad	10 c4		bpl $c873			bpl ZEq3
=6					CL	.var *-(WordListLink+wh_Xt)
=$c8af					en = *	; remember here
>c8a7	06					.byte CL	;wh_CodeLength
>c8af	30 3e 3d			L1:	.text "0>="	;  name of word as a string, ending at wh_NameLastChar
>c8b2	a3					.byte (("0>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8b3	24 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8b5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8b6	08					.byte NN	;wh_Flags	dictionary flags
=51250					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8b7	b5 25		lda $25,x	ZGe:		lda DStack+1,x
.c8b9	10 cc		bpl $c887			bpl True0
.c8bb	30 e0		bmi $c89d			bmi False0
=6					CL	.var *-(WordListLink+wh_Xt)
=$c8bd					en = *	; remember here
>c8b5	06					.byte CL	;wh_CodeLength
>c8bd	30 3c				L1:	.text "0<"	;  name of word as a string, ending at wh_NameLastChar
>c8bf	82					.byte (("0<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8c0	32 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8c3	08					.byte NN	;wh_Flags	dictionary flags
=51263					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8c4	b5 25		lda $25,x	Zero_Less:	lda DStack+1,x	; MSB
.c8c6	10 d5		bpl $c89d			bpl False0
.c8c8	30 bd		bmi $c887			bmi True0
=6					CL	.var *-(WordListLink+wh_Xt)
=$c8ca					en = *	; remember here
>c8c2	06					.byte CL	;wh_CodeLength
.c8ca	4c e8 b3	jmp $b3e8	Throw_Stack_05: jmp Throw_Stack
>c8cd	4d 69 6e			L1:	.text "Min"	;  name of word as a string, ending at wh_NameLastChar
>c8d0	c3					.byte (("Min"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8d1	3f c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8d3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8d4	18					.byte UF+NN	;wh_Flags	dictionary flags
=51280					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8d5					Min:
.c8d5	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c8d7	b0 f1		bcs $c8ca		bcs Throw_Stack_05
.c8d9	b5 24		lda $24,x			lda DStack+0,x	; compare n1 & n2; sets V & N but not Z
.c8db	d5 26		cmp $26,x			cmp DStack+2,x
.c8dd	b5 25		lda $25,x			lda DStack+1,x
.c8df	f5 27		sbc $27,x			sbc DStack+3,x
.c8e1	70 1b		bvs $c8fe			bvs Max_3	; if overflow, the sign is backwards
.c8e3	30 29		bmi $c90e	Min_3:		bmi Nip_NoUf	; if negative, NOS is larger and needs to be dumped
.c8e5	e8		inx				inx		; Drop n2
.c8e6	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$c8e7					en = *	; remember here
>c8d3	12					.byte CL	;wh_CodeLength
.c8e7	60		rts				rts
>c8e8	4d 61 78			L1:	.text "Max"	;  name of word as a string, ending at wh_NameLastChar
>c8eb	03					.byte (("Max"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8ec	50 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8ef	08					.byte NN	;wh_Flags	dictionary flags
=51307					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8f0					Max:
.c8f0	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c8f2	b0 d6		bcs $c8ca		bcs Throw_Stack_05
.c8f4	b5 24		lda $24,x			lda DStack+0,x	; Compare n1 & n2; sets V & N but not Z
.c8f6	d5 26		cmp $26,x			cmp DStack+2,x
.c8f8	b5 25		lda $25,x			lda DStack+1,x
.c8fa	f5 27		sbc $27,x			sbc DStack+3,x
.c8fc	70 e5		bvs $c8e3			bvs Min_3	; if overflow, the sign is backwards
.c8fe	10 0e		bpl $c90e	Max_3:		bpl Nip_NoUf	; if negative, NOS is larger and needs to be kept
.c900	e8		inx				inx		; Drop n2
.c901	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$c902					en = *	; remember here
>c8ee	12					.byte CL	;wh_CodeLength
.c902	60		rts				rts
>c903	4e 69 70			L1:	.text "Nip"	;  name of word as a string, ending at wh_NameLastChar
>c906	03					.byte (("Nip"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c907	6b c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c909	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c90a	10					.byte UF	;wh_Flags	dictionary flags
=51334					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c90b					Nip:
.c90b	20 d9 b3	jsr $b3d9			jsr underflow_2
.c90e	b5 24		lda $24,x	Nip_NoUf:	lda DStack+0,x	; PopYA
.c910	b4 25		ldy $25,x			ldy DStack+1,x
.c912	e8		inx				inx
.c913	e8		inx				inx
.c914	95 24		sta $24,x			sta DStack+0,x	; store over n1
.c916	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$c918					en = *	; remember here
>c909	0d					.byte CL	;wh_CodeLength
.c918	60		rts				rts
>c919	50 69 63 6b			L1:	.text "Pick"	;  name of word as a string, ending at wh_NameLastChar
>c91d	64					.byte (("Pick"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c91e	86 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c920	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c921	00					.byte 0	;wh_Flags	dictionary flags
=51357					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c922					Pick:
.c922	16 24		asl $24,x			asl DStack+0,x	; we assume u < 128 (stack is small)
.c924	8a		txa				txa
.c925	75 24		adc $24,x			adc DStack+0,x
.c927	a8		tay				tay
.c928	b9 26 00	lda $0026,y			lda DStack+2,y
.c92b	95 24		sta $24,x			sta DStack+0,x
.c92d	b9 27 00	lda $0027,y			lda DStack+3,y
.c930	95 25		sta $25,x			sta DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$c932					en = *	; remember here
>c920	10					.byte CL	;wh_CodeLength
.c932	60		rts				rts
>c933	43 68 61 72			L1:	.text "Char"	;  name of word as a string, ending at wh_NameLastChar
>c937	44					.byte (("Char"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c938	9d c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c93a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c93b	08					.byte NN	;wh_Flags	dictionary flags
=51383					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c93c					Char:
.c93c	20 76 ba	jsr $ba76			jsr parse_name_check
.c93f	e8		inx				inx		; Drop number of characters, leave addr
.c940	e8		inx				inx
.c941	4c f3 cc	jmp $ccf3			jmp C_Fetch	; get character ( C@ )
=8					CL	.var *-(WordListLink+wh_Xt)
=$c944					en = *	; remember here
>c93a	08					.byte CL	;wh_CodeLength
>c944	5b 43 68 61 72 5d		L1:	.text "[Char]"	;  name of word as a string, ending at wh_NameLastChar
>c94a	a6					.byte (("[Char]"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c94b	b7 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c94d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c94e	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=51402					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c94f	20 3c c9	jsr $c93c	Bracket_Char:	jsr Char
.c952	4c 07 b7	jmp $b707			jmp Literal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c955					en = *	; remember here
>c94d	06					.byte CL	;wh_CodeLength
>c955	43 68 61 72 2b			L1:	.text "Char+"	;  name of word as a string, ending at wh_NameLastChar
>c95a	65					.byte (("Char+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c95b	ca c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c95d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c95e	00					.byte 0	;wh_Flags	dictionary flags
=51418					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c95f					Char_Plus:
.c95f	20 c4 b3	jsr $b3c4			jsr underflow_1
.c962	f6 24		inc $24,x			inc DStack+0,x
.c964	d0 02		bne $c968			bne +
.c966	f6 25		inc $25,x			inc DStack+1,x
.c968					+
=9					CL	.var *-(WordListLink+wh_Xt)
=$c968					en = *	; remember here
>c95d	09					.byte CL	;wh_CodeLength
.c968	60		rts				rts
>c969	43 68 61 72 73			L1:	.text "Chars"	;  name of word as a string, ending at wh_NameLastChar
>c96e	65					.byte (("Chars"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c96f	da c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c971	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c972	02					.byte AN	;wh_Flags	dictionary flags
=51438					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c973					Chars:
=0					CL	.var *-(WordListLink+wh_Xt)
=$c973					en = *	; remember here
>c971	00					.byte CL	;wh_CodeLength
.c973	60		rts				rts
>c974	43 65 6c 6c 73			L1:	.text "Cells"	;  name of word as a string, ending at wh_NameLastChar
>c979	65					.byte (("Cells"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c97a	ee c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c97c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c97d	10					.byte UF	;wh_Flags	dictionary flags
=51449					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c97e					Cells:
.c97e	20 c4 b3	jsr $b3c4			jsr underflow_1
.c981	16 24		asl $24,x			asl DStack+0,x		; 2*
.c983	36 25		rol $25,x			rol DStack+1,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$c985					en = *	; remember here
>c97c	07					.byte CL	;wh_CodeLength
.c985	60		rts				rts
>c986	43 65 6c 6c 2b			L1:	.text "Cell+"	;  name of word as a string, ending at wh_NameLastChar
>c98b	65					.byte (("Cell+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c98c	f9 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c98e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c98f	10					.byte UF	;wh_Flags	dictionary flags
=51467					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c990					Cell_Plus:
.c990	20 c4 b3	jsr $b3c4			jsr underflow_1
.c993	a9 02		lda #$02	Cell_Plus_NoUf:	lda #2		; our cells are 2 bytes
.c995					Plus_A:
.c995	18		clc				clc
.c996	75 24		adc $24,x			adc DStack+0,x
.c998	95 24		sta $24,x			sta DStack+0,x
.c99a	90 02		bcc $c99e			bcc +
.c99c	f6 25		inc $25,x			inc DStack+1,x
.c99e					+
=14					CL	.var *-(WordListLink+wh_Xt)
=$c99e					en = *	; remember here
>c98e	0e					.byte CL	;wh_CodeLength
.c99e	60		rts				rts
.c99f					Nos_Plus_A:
.c99f	18		clc				clc
.c9a0	75 26		adc $26,x			adc DStack+2,x
.c9a2	95 26		sta $26,x			sta DStack+2,x
.c9a4	90 02		bcc $c9a8			bcc +
.c9a6	f6 27		inc $27,x			inc DStack+3,x
.c9a8	60		rts		+		rts
>c9a9	48 65 72 65			L1:	.text "Here"	;  name of word as a string, ending at wh_NameLastChar
>c9ad	a4					.byte (("Here"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9ae	0b c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9b0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9b1	08					.byte NN	;wh_Flags	dictionary flags
=51501					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9b2	a5 00		lda $00		Here:		lda cp+0
.c9b4	a4 01		ldy $01				ldy cp+1
.c9b6	4c 54 b7	jmp $b754			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$c9b9					en = *	; remember here
>c9b0	07					.byte CL	;wh_CodeLength
>c9b9	31 2d				L1:	.text "1-"	;  name of word as a string, ending at wh_NameLastChar
>c9bb	a2					.byte (("1-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9bc	2d c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9bf	10					.byte UF	;wh_Flags	dictionary flags
=51515					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9c0					One_Minus:
.c9c0	20 c4 b3	jsr $b3c4			jsr underflow_1
.c9c3					One_Minus_NoUf:
.c9c3	b5 24		lda $24,x			lda DStack+0,x
.c9c5	d0 02		bne $c9c9			bne +
.c9c7	d6 25		dec $25,x			dec DStack+1,x
.c9c9	d6 24		dec $24,x	+		dec DStack+0,x
=11					CL	.var *-(WordListLink+wh_Xt)
=$c9cb					en = *	; remember here
>c9be	0b					.byte CL	;wh_CodeLength
.c9cb	60		rts				rts
.c9cc					NOS_One_Minus:
.c9cc	b5 26		lda $26,x			lda DStack+2,x
.c9ce	d0 02		bne $c9d2			bne +
.c9d0	d6 27		dec $27,x			dec DStack+3,x
.c9d2	d6 26		dec $26,x	+		dec DStack+2,x
.c9d4	60		rts				rts
.c9d5					Minus_A:
.c9d5	18		clc				clc
.c9d6	75 24		adc $24,x			adc DStack+0,x
.c9d8	95 24		sta $24,x			sta DStack+0,x
.c9da	b0 02		bcs $c9de			bcs +
.c9dc	d6 25		dec $25,x			dec DStack+1,x
.c9de	60		rts		+		rts
>c9df	31 2b				L1:	.text "1+"	;  name of word as a string, ending at wh_NameLastChar
>c9e1	62					.byte (("1+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9e2	3b c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9e4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9e5	10					.byte UF	;wh_Flags	dictionary flags
=51553					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9e6					One_Plus:
.c9e6	20 c4 b3	jsr $b3c4			jsr underflow_1
.c9e9	f6 24		inc $24,x			inc DStack+0,x
.c9eb	d0 02		bne $c9ef			bne +
.c9ed	f6 25		inc $25,x			inc DStack+1,x
.c9ef					+
=9					CL	.var *-(WordListLink+wh_Xt)
=$c9ef					en = *	; remember here
>c9e4	09					.byte CL	;wh_CodeLength
.c9ef	60		rts				rts
.c9f0					NOS_One_Plus:
.c9f0	f6 26		inc $26,x			inc DStack+2,x
.c9f2	d0 02		bne $c9f6			bne +
.c9f4	f6 27		inc $27,x			inc DStack+3,x
.c9f6	60		rts		+		rts
>c9f7	55 4d 2b			L1:	.text "UM+"	;  name of word as a string, ending at wh_NameLastChar
>c9fa	63					.byte (("UM+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9fb	61 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9fd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9fe	00					.byte 0	;wh_Flags	dictionary flags
=51578					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9ff	20 9a b3	jsr $b39a	UMPlus:		jsr PopYA
.ca02	18		clc				clc		; add n to d1.lo
.ca03	75 26		adc $26,x			adc DStack+2,x
.ca05	95 26		sta $26,x			sta DStack+2,x
.ca07	98		tya				tya
.ca08	75 27		adc $27,x			adc DStack+3,x
.ca0a	95 27		sta $27,x			sta DStack+3,x
.ca0c	90 06		bcc $ca14			bcc +		; propagate carry thru d1.hi
.ca0e	f6 24		inc $24,x			inc DStack+0,x
.ca10	d0 02		bne $ca14			bne +
.ca12	f6 25		inc $25,x			inc DStack+1,x
.ca14					+
=21					CL	.var *-(WordListLink+wh_Xt)
=$ca14					en = *	; remember here
>c9fd	15					.byte CL	;wh_CodeLength
.ca14	60		rts				rts
>ca15	4d 2b				L1:	.text "M+"	;  name of word as a string, ending at wh_NameLastChar
>ca17	62					.byte (("M+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca18	7a c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca1a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca1b	08					.byte NN	;wh_Flags	dictionary flags
=51607					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca1c	20 ff c9	jsr $c9ff	MPlus:		jsr UMPlus
.ca1f	98		tya				tya		; if n negative
.ca20	30 a1		bmi $c9c3			bmi One_Minus_NoUf ;   decrement d1.hi
=6					CL	.var *-(WordListLink+wh_Xt)
=$ca22					en = *	; remember here
>ca1a	06					.byte CL	;wh_CodeLength
.ca22	60		rts				rts
>ca23	44 32 2a			L1:	.text "D2*"	;  name of word as a string, ending at wh_NameLastChar
>ca26	43					.byte (("D2*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca27	97 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca29	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca2a	10					.byte UF	;wh_Flags	dictionary flags
=51622					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca2b	20 d9 b3	jsr $b3d9	D2Star:		jsr underflow_2
.ca2e	16 26		asl $26,x			asl DStack+2,x
.ca30	36 27		rol $27,x			rol DStack+3,x
.ca32	36 24		rol $24,x			rol DStack+0,x
.ca34	36 25		rol $25,x			rol DStack+1,x
=11					CL	.var *-(WordListLink+wh_Xt)
=$ca36					en = *	; remember here
>ca29	0b					.byte CL	;wh_CodeLength
.ca36	60		rts				rts
>ca37	44 32 2f			L1:	.text "D2/"	;  name of word as a string, ending at wh_NameLastChar
>ca3a	e3					.byte (("D2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca3b	a6 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca3d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca3e	10					.byte UF	;wh_Flags	dictionary flags
=51642					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca3f	20 d9 b3	jsr $b3d9	D2Slash:	jsr underflow_2
.ca42	b5 25		lda $25,x			lda DStack+1,x		; setup for sign-extended shift right
.ca44	0a		asl a				asl a
.ca45	76 25		ror $25,x	D2SlashU:	ror DStack+1,x
.ca47	76 24		ror $24,x			ror DStack+0,x
.ca49	76 27		ror $27,x			ror DStack+3,x
.ca4b	76 26		ror $26,x			ror DStack+2,x
=14					CL	.var *-(WordListLink+wh_Xt)
=$ca4d					en = *	; remember here
>ca3d	0e					.byte CL	;wh_CodeLength
.ca4d	60		rts				rts
>ca4e	55 44 32 2f			L1:	.text "UD2/"	;  name of word as a string, ending at wh_NameLastChar
>ca52	e4					.byte (("UD2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca53	ba c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca55	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca56	18					.byte UF+NN	;wh_Flags	dictionary flags
=51666					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca57	20 d9 b3	jsr $b3d9	DU2Slash:	jsr underflow_2
.ca5a	18		clc				clc
.ca5b	90 e8		bcc $ca45			bcc D2SlashU
=6					CL	.var *-(WordListLink+wh_Xt)
=$ca5d					en = *	; remember here
>ca55	06					.byte CL	;wh_CodeLength
>ca5d	32 2a				L1:	.text "2*"	;  name of word as a string, ending at wh_NameLastChar
>ca5f	42					.byte (("2*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca60	d2 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca62	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca63	10					.byte UF	;wh_Flags	dictionary flags
=51679					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca64					Two_Star:
.ca64	20 c4 b3	jsr $b3c4			jsr underflow_1
.ca67	16 24		asl $24,x			asl DStack+0,x
.ca69	36 25		rol $25,x			rol DStack+1,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$ca6b					en = *	; remember here
>ca62	07					.byte CL	;wh_CodeLength
.ca6b	60		rts				rts
>ca6c	32 2f				L1:	.text "2/"	;  name of word as a string, ending at wh_NameLastChar
>ca6e	e2					.byte (("2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca6f	df c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca71	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca72	10					.byte UF	;wh_Flags	dictionary flags
=51694					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca73					Two_Slash:
.ca73	20 c4 b3	jsr $b3c4			jsr underflow_1
.ca76	b5 25		lda $25,x			lda DStack+1,x		; load sign into carry, for signed shift
.ca78	0a		asl a				asl
.ca79	76 25		ror $25,x			ror DStack+1,x
.ca7b	76 24		ror $24,x			ror DStack+0,x
=10					CL	.var *-(WordListLink+wh_Xt)
=$ca7d					en = *	; remember here
>ca71	0a					.byte CL	;wh_CodeLength
.ca7d	60		rts				rts
>ca7e	55 32 2f			L1:	.text "U2/"	;  name of word as a string, ending at wh_NameLastChar
>ca81	e3					.byte (("U2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca82	ee c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca84	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca85	10					.byte UF	;wh_Flags	dictionary flags
=51713					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca86					UTwo_Slash:
.ca86	20 c4 b3	jsr $b3c4			jsr underflow_1
.ca89	56 25		lsr $25,x			lsr DStack+1,x
.ca8b	76 24		ror $24,x			ror DStack+0,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$ca8d					en = *	; remember here
>ca84	07					.byte CL	;wh_CodeLength
.ca8d	60		rts				rts
>ca8e	44 52 53 68 69 66 74		L1:	.text "DRShift"	;  name of word as a string, ending at wh_NameLastChar
>ca95	87					.byte (("DRShift"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca96	01 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca98	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca99	00					.byte 0	;wh_Flags	dictionary flags
=51733					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca9a	20 7e b3	jsr $b37e	DRShift:	jsr PopA	; pop u
.ca9d	a8		tay		DRShiftA:	tay
.ca9e	f0 0e		beq $caae			beq _9
.caa0	b5 25		lda $25,x			lda DStack+1,x
.caa2	4a		lsr a		_2:		lsr a
.caa3	76 24		ror $24,x			ror DStack+0,x
.caa5	76 27		ror $27,x			ror DStack+3,x
.caa7	76 26		ror $26,x			ror DStack+2,x
.caa9	88		dey				dey
.caaa	d0 f6		bne $caa2			bne _2
.caac	95 25		sta $25,x			sta DStack+1,x
.caae					_9:
=20					CL	.var *-(WordListLink+wh_Xt)
=$caae					en = *	; remember here
>ca98	14					.byte CL	;wh_CodeLength
.caae	60		rts				rts
>caaf	52 53 68 69 66 74		L1:	.text "RShift"	;  name of word as a string, ending at wh_NameLastChar
>cab5	86					.byte (("RShift"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cab6	15 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cab8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cab9	00					.byte 0	;wh_Flags	dictionary flags
=51765					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.caba	20 87 b3	jsr $b387	RShift:		jsr PopA2	; pop u, check for 2 params
.cabd	a8		tay		RShift_A:	tay		; get shift count
.cabe	f0 0a		beq $caca			beq _done
.cac0	b5 25		lda $25,x			lda DStack+1,x
.cac2	4a		lsr a		_loop:		lsr a
.cac3	76 24		ror $24,x			ror DStack+0,x
.cac5	88		dey				dey
.cac6	d0 fa		bne $cac2			bne _loop
.cac8	95 25		sta $25,x			sta DStack+1,x
.caca					_done:
=16					CL	.var *-(WordListLink+wh_Xt)
=$caca					en = *	; remember here
>cab8	10					.byte CL	;wh_CodeLength
.caca	60		rts				rts
>cacb	4c 53 68 69 66 74		L1:	.text "LShift"	;  name of word as a string, ending at wh_NameLastChar
>cad1	86					.byte (("LShift"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cad2	35 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cad4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cad5	00					.byte 0	;wh_Flags	dictionary flags
=51793					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cad6	20 87 b3	jsr $b387	LShift:		jsr PopA2	; pop u, check for 2 params
.cad9	a8		tay		LShift_A:	tay		; get shift count
.cada	f0 0a		beq $cae6			beq _done
.cadc	b5 25		lda $25,x			lda DStack+1,x
.cade	16 24		asl $24,x	_loop:		asl DStack+0,x
.cae0	2a		rol a				rol a
.cae1	88		dey				dey
.cae2	d0 fa		bne $cade			bne _loop
.cae4	95 25		sta $25,x			sta DStack+1,x
.cae6					_done:
=16					CL	.var *-(WordListLink+wh_Xt)
=$cae6					en = *	; remember here
>cad4	10					.byte CL	;wh_CodeLength
.cae6	60		rts				rts
>cae7	41 6e 64			L1:	.text "And"	;  name of word as a string, ending at wh_NameLastChar
>caea	83					.byte (("And"[-1]&7)<<5)+(*-L1)	;wh_HNL
>caeb	51 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>caed	03					.byte 3		;wh_CodeLength  (with placeholder value)
>caee	10					.byte UF	;wh_Flags	dictionary flags
=51818					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.caef					And2:
.caef	20 d9 b3	jsr $b3d9			jsr underflow_2
.caf2	b5 24		lda $24,x			lda DStack+0,x
.caf4	35 26		and $26,x			and DStack+2,x
.caf6	95 26		sta $26,x			sta DStack+2,x
.caf8	b5 25		lda $25,x			lda DStack+1,x
.cafa	35 27		and $27,x			and DStack+3,x
.cafc	95 27		sta $27,x			sta DStack+3,x
.cafe	e8		inx				inx		; Drop n2
.caff	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$cb00					en = *	; remember here
>caed	11					.byte CL	;wh_CodeLength
.cb00	60		rts				rts
>cb01	4f 72				L1:	.text "Or"	;  name of word as a string, ending at wh_NameLastChar
>cb03	42					.byte (("Or"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb04	6a ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb06	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb07	10					.byte UF	;wh_Flags	dictionary flags
=51843					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb08					Or:
.cb08	20 d9 b3	jsr $b3d9			jsr underflow_2
.cb0b	b5 24		lda $24,x			lda DStack+0,x
.cb0d	15 26		ora $26,x			ora DStack+2,x
.cb0f	95 26		sta $26,x			sta DStack+2,x
.cb11	b5 25		lda $25,x			lda DStack+1,x
.cb13	15 27		ora $27,x			ora DStack+3,x
.cb15	95 27		sta $27,x			sta DStack+3,x
.cb17	e8		inx				inx		; Drop n2
.cb18	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$cb19					en = *	; remember here
>cb06	11					.byte CL	;wh_CodeLength
.cb19	60		rts				rts
>cb1a	58 6f 72			L1:	.text "Xor"	;  name of word as a string, ending at wh_NameLastChar
>cb1d	43					.byte (("Xor"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb1e	83 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb20	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb21	10					.byte UF	;wh_Flags	dictionary flags
=51869					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb22					Xor:
.cb22	20 d9 b3	jsr $b3d9			jsr underflow_2
.cb25	b5 24		lda $24,x			lda DStack+0,x
.cb27	55 26		eor $26,x			eor DStack+2,x
.cb29	95 26		sta $26,x			sta DStack+2,x
.cb2b	b5 25		lda $25,x			lda DStack+1,x
.cb2d	55 27		eor $27,x			eor DStack+3,x
.cb2f	95 27		sta $27,x			sta DStack+3,x
.cb31	e8		inx				inx		; Drop n2
.cb32	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$cb33					en = *	; remember here
>cb20	11					.byte CL	;wh_CodeLength
.cb33	60		rts				rts
>cb34	2b				L1:	.text "+"	;  name of word as a string, ending at wh_NameLastChar
>cb35	61					.byte (("+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb36	9d ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb38	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb39	10					.byte UF	;wh_Flags	dictionary flags
=51893					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb3a					Plus:
.cb3a	20 d9 b3	jsr $b3d9			jsr underflow_2
.cb3d	18		clc				clc
.cb3e	b5 24		lda $24,x			lda DStack+0,x		; LSB
.cb40	75 26		adc $26,x			adc DStack+2,x
.cb42	95 26		sta $26,x			sta DStack+2,x
.cb44	b5 25		lda $25,x			lda DStack+1,x		; MSB. No CLC, conserve carry bit
.cb46	75 27		adc $27,x			adc DStack+3,x
.cb48	95 27		sta $27,x			sta DStack+3,x
.cb4a	e8		inx				inx
.cb4b	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$cb4c					en = *	; remember here
>cb38	12					.byte CL	;wh_CodeLength
.cb4c	60		rts				rts
>cb4d	2d				L1:	.text "-"	;  name of word as a string, ending at wh_NameLastChar
>cb4e	a1					.byte (("-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb4f	b5 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb51	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb52	10					.byte UF	;wh_Flags	dictionary flags
=51918					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb53					Minus:
.cb53	20 d9 b3	jsr $b3d9			jsr underflow_2
.cb56	38		sec				sec
.cb57	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cb59	f5 24		sbc $24,x			sbc DStack+0,x
.cb5b	95 26		sta $26,x			sta DStack+2,x
.cb5d	b5 27		lda $27,x			lda DStack+3,x	; MSB
.cb5f	f5 25		sbc $25,x			sbc DStack+1,x
.cb61	95 27		sta $27,x			sta DStack+3,x
.cb63	e8		inx				inx		; Drop n2
.cb64	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$cb65					en = *	; remember here
>cb51	12					.byte CL	;wh_CodeLength
.cb65	60		rts				rts
>cb66	2e				L1:	.text "."	;  name of word as a string, ending at wh_NameLastChar
>cb67	c1					.byte (("."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb68	ce ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb6a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb6b	08					.byte NN	;wh_Flags	dictionary flags
=51943					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb6c	b5 25		lda $25,x	Dot:		lda DStack+1,x		; ( n )	save sign
.cb6e	08		php				php
.cb6f	20 23 c6	jsr $c623			jsr Abs			; ( u )
.cb72	20 a5 b7	jsr $b7a5			jsr Zero		; ( ud )	u>d  cvt u to ud
.cb75	4c 85 cb	jmp $cb85			jmp fmt_d3
=12					CL	.var *-(WordListLink+wh_Xt)
=$cb78					en = *	; remember here
>cb6a	0c					.byte CL	;wh_CodeLength
>cb78	44 2e				L1:	.text "D."	;  name of word as a string, ending at wh_NameLastChar
>cb7a	c2					.byte (("D."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb7b	e7 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb7d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb7e	08					.byte NN	;wh_Flags	dictionary flags
=51962					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb7f	b5 25		lda $25,x	D_Dot:		lda DStack+1,x		; save sign
.cb81	08		php				php
.cb82	20 58 c6	jsr $c658			jsr DAbs
.cb85	20 4f ab	jsr $ab4f	fmt_d3:		jsr Less_Number_Sign	; ( ud )	start formatting
.cb88	20 c2 ab	jsr $abc2			jsr Number_sign_s	; ( ud )	do all digits
.cb8b	28		plp				plp			; ( ud )	do sign
.cb8c	20 dd ab	jsr $abdd			jsr Sign_P		; ( ud )
.cb8f	20 5c ab	jsr $ab5c			jsr Number_sign_greater	; ( addr u )	end formatting
.cb92	20 78 cd	jsr $cd78			jsr Type
.cb95	4c 6b cd	jmp $cd6b			jmp Space
=25					CL	.var *-(WordListLink+wh_Xt)
=$cb98					en = *	; remember here
>cb7d	19					.byte CL	;wh_CodeLength
>cb98	55 2e				L1:	.text "U."	;  name of word as a string, ending at wh_NameLastChar
>cb9a	c2					.byte (("U."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb9b	fa ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb9d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb9e	18					.byte UF+NN	;wh_Flags	dictionary flags
=51994					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb9f	20 c4 b3	jsr $b3c4	U_Dot:		jsr underflow_1
.cba2	20 b9 cb	jsr $cbb9			jsr print_u
.cba5	4c 6b cd	jmp $cd6b			jmp Space
=9					CL	.var *-(WordListLink+wh_Xt)
=$cba8					en = *	; remember here
>cb9d	09					.byte CL	;wh_CodeLength
>cba8	55 44 2e			L1:	.text "UD."	;  name of word as a string, ending at wh_NameLastChar
>cbab	c3					.byte (("UD."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbac	1a cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbaf	18					.byte UF+NN	;wh_Flags	dictionary flags
=52011					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbb0	20 d9 b3	jsr $b3d9	UD_Dot:		jsr underflow_2 ; double number
.cbb3	20 bc cb	jsr $cbbc			jsr print_ud
.cbb6	4c 6b cd	jmp $cd6b			jmp Space
=9					CL	.var *-(WordListLink+wh_Xt)
=$cbb9					en = *	; remember here
>cbae	09					.byte CL	;wh_CodeLength
.cbb9					print_u:
.cbb9	20 a5 b7	jsr $b7a5			jsr Zero			; convert to ud
.cbbc					print_ud:
.cbbc	20 4f ab	jsr $ab4f			jsr Less_Number_Sign		; <#	start formatting
.cbbf	20 c2 ab	jsr $abc2			jsr Number_sign_s		; #S	do all digits
.cbc2	20 5c ab	jsr $ab5c			jsr Number_sign_greater		; #>	end formatting
.cbc5	4c 78 cd	jmp $cd78			jmp Type
>cbc8	55 2e 52			L1:	.text "U.R"	;  name of word as a string, ending at wh_NameLastChar
>cbcb	43					.byte (("U.R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbcc	2b cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbcf	08					.byte NN	;wh_Flags	dictionary flags
=52043					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbd0	20 7e b3	jsr $b37e	U_Dot_R:	jsr PopA		; save field width
.cbd3	48		pha		U_Dot_R_A:	pha
.cbd4	20 a5 b7	jsr $b7a5			jsr Zero		; u>d  cvt u to ud
.cbd7	4c e7 cb	jmp $cbe7			jmp fmt_udr3
=10					CL	.var *-(WordListLink+wh_Xt)
=$cbda					en = *	; remember here
>cbce	0a					.byte CL	;wh_CodeLength
>cbda	55 44 2e 52			L1:	.text "UD.R"	;  name of word as a string, ending at wh_NameLastChar
>cbde	44					.byte (("UD.R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbdf	4b cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbe1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbe2	08					.byte NN	;wh_Flags	dictionary flags
=52062					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbe3	20 7e b3	jsr $b37e	UD_Dot_R:	jsr PopA			; save field width
.cbe6	48		pha		UD_Dot_R_A:	pha
.cbe7	20 4f ab	jsr $ab4f	fmt_udr3:	jsr Less_Number_Sign		; start formatted
.cbea	20 c2 ab	jsr $abc2			jsr Number_sign_s		; do all digits
.cbed	20 5c ab	jsr $ab5c	fmt_r:		jsr Number_sign_greater		; finish formatted
.cbf0	68		pla				pla				; recover field width
.cbf1	38		sec				sec				; do leading spaces
.cbf2	f5 24		sbc $24,x			sbc DStack+0,x
.cbf4	90 06		bcc $cbfc			bcc +
.cbf6	20 96 b7	jsr $b796			jsr PushZA
.cbf9	20 0a c4	jsr $c40a			jsr Spaces
.cbfc	4c 78 cd	jmp $cd78	+		jmp Type			; type formatted
=28					CL	.var *-(WordListLink+wh_Xt)
=$cbff					en = *	; remember here
>cbe1	1c					.byte CL	;wh_CodeLength
>cbff	2e 52				L1:	.text ".R"	;  name of word as a string, ending at wh_NameLastChar
>cc01	42					.byte ((".R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc02	5e cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc04	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc05	08					.byte NN	;wh_Flags	dictionary flags
=52097					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc06	20 7e b3	jsr $b37e	Dot_R:		jsr PopA		; save field width
.cc09	48		pha		Dot_R_A:	pha
.cc0a	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cc0c	08		php				php
.cc0d	20 23 c6	jsr $c623			jsr Abs
.cc10	20 a5 b7	jsr $b7a5			jsr Zero		; u>d  cvt u to ud
.cc13	4c 28 cc	jmp $cc28			jmp fmt_dr3
=16					CL	.var *-(WordListLink+wh_Xt)
=$cc16					en = *	; remember here
>cc04	10					.byte CL	;wh_CodeLength
>cc16	44 2e 52			L1:	.text "D.R"	;  name of word as a string, ending at wh_NameLastChar
>cc19	43					.byte (("D.R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc1a	81 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc1c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc1d	08					.byte NN	;wh_Flags	dictionary flags
=52121					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc1e	20 7e b3	jsr $b37e	D_Dot_R:	jsr PopA		; save field width
.cc21	48		pha		D_Dot_R_A:	pha
.cc22	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cc24	08		php				php
.cc25	20 58 c6	jsr $c658			jsr DAbs
.cc28	20 4f ab	jsr $ab4f	fmt_dr3:	jsr Less_Number_Sign	; start formatted output
.cc2b	20 c2 ab	jsr $abc2			jsr Number_sign_s	; do all digits
.cc2e	28		plp				plp			; do the sign
.cc2f	20 dd ab	jsr $abdd			jsr Sign_P
.cc32	4c ed cb	jmp $cbed			jmp fmt_r
=23					CL	.var *-(WordListLink+wh_Xt)
=$cc35					en = *	; remember here
>cc1c	17					.byte CL	;wh_CodeLength
>cc35	3f				L1:	.text "?"	;  name of word as a string, ending at wh_NameLastChar
>cc36	e1					.byte (("?"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc37	99 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc39	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc3a	08					.byte NN	;wh_Flags	dictionary flags
=52150					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc3b					Question:
.cc3b	20 5a ce	jsr $ce5a			jsr Fetch
.cc3e	4c 6c cb	jmp $cb6c			jmp Dot
=6					CL	.var *-(WordListLink+wh_Xt)
=$cc41					en = *	; remember here
>cc39	06					.byte CL	;wh_CodeLength
>cc41	32 44 75 70			L1:	.text "2Dup"	;  name of word as a string, ending at wh_NameLastChar
>cc45	04					.byte (("2Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc46	b6 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc48	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc49	10					.byte UF	;wh_Flags	dictionary flags
=52165					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc4a					Two_Dup:
.cc4a	20 d9 b3	jsr $b3d9			jsr underflow_2
.cc4d	ca		dex				dex
.cc4e	ca		dex				dex
.cc4f	ca		dex				dex
.cc50	ca		dex				dex
.cc51	b5 28		lda $28,x			lda DStack+4,x	; TOS
.cc53	95 24		sta $24,x			sta DStack+0,x
.cc55	b5 29		lda $29,x			lda DStack+5,x
.cc57	95 25		sta $25,x			sta DStack+1,x
.cc59	b5 2a		lda $2a,x			lda DStack+6,x	; NOS
.cc5b	95 26		sta $26,x			sta DStack+2,x
.cc5d	b5 2b		lda $2b,x			lda DStack+7,x
.cc5f	95 27		sta $27,x			sta DStack+3,x
=23					CL	.var *-(WordListLink+wh_Xt)
=$cc61					en = *	; remember here
>cc48	17					.byte CL	;wh_CodeLength
.cc61	60		rts				rts
>cc62	54 75 63 6b			L1:	.text "Tuck"	;  name of word as a string, ending at wh_NameLastChar
>cc66	64					.byte (("Tuck"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc67	c5 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc69	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc6a	10					.byte UF	;wh_Flags	dictionary flags
=52198					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc6b					Tuck:
.cc6b	20 d9 b3	jsr $b3d9			jsr underflow_2
.cc6e	ca		dex				dex
.cc6f	ca		dex				dex
.cc70	b4 28		ldy $28,x			ldy DStack+4,x	; LSB
.cc72	b5 26		lda $26,x			lda DStack+2,x
.cc74	95 28		sta $28,x			sta DStack+4,x
.cc76	94 26		sty $26,x			sty DStack+2,x
.cc78	95 24		sta $24,x			sta DStack+0,x
.cc7a	b4 29		ldy $29,x			ldy DStack+5,x	; MSB
.cc7c	b5 27		lda $27,x			lda DStack+3,x
.cc7e	95 29		sta $29,x			sta DStack+5,x
.cc80	94 27		sty $27,x			sty DStack+3,x
.cc82	95 25		sta $25,x			sta DStack+1,x
=25					CL	.var *-(WordListLink+wh_Xt)
=$cc84					en = *	; remember here
>cc69	19					.byte CL	;wh_CodeLength
.cc84	60		rts				rts
>cc85	43 2c				L1:	.text "C,"	;  name of word as a string, ending at wh_NameLastChar
>cc87	82					.byte (("C,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc88	e6 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc8a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc8b	08					.byte NN	;wh_Flags	dictionary flags
=52231					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc8c	20 7e b3	jsr $b37e	C_Comma:	jsr PopA	; pop c, with underflow check
.cc8f					C_Comma_A:
.cc8f	ca		dex				dex
.cc90	94 24		sty $24,x			sty DStack+0,x	; save Y
.cc92	a0 00		ldy #$00			ldy #0		; store A
.cc94	91 00		sta ($00),y			sta (cp),y
.cc96	e6 00		inc $00				inc cp+0	; increment cp
.cc98	d0 02		bne $cc9c			bne +
.cc9a	e6 01		inc $01				inc cp+1
.cc9c					+
.cc9c	b4 24		ldy $24,x			ldy DStack+0,x	; restore Y
.cc9e	e8		inx				inx
=19					CL	.var *-(WordListLink+wh_Xt)
=$cc9f					en = *	; remember here
>cc8a	13					.byte CL	;wh_CodeLength
.cc9f	60		rts				rts
>cca0	2c				L1:	.text ","	;  name of word as a string, ending at wh_NameLastChar
>cca1	81					.byte ((","[-1]&7)<<5)+(*-L1)	;wh_HNL
>cca2	07 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cca4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cca5	08					.byte NN	;wh_Flags	dictionary flags
=52257					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cca6	20 9a b3	jsr $b39a	Comma:		jsr PopYA	; pop n, with underflow check
.cca9					Comma_YA:
.cca9	20 8f cc	jsr $cc8f			jsr C_Comma_A	; compile LSB
.ccac	98		tya				tya		; compile MSB
.ccad	4c 8f cc	jmp $cc8f			jmp C_Comma_A
=10					CL	.var *-(WordListLink+wh_Xt)
=$ccb0					en = *	; remember here
>cca4	0a					.byte CL	;wh_CodeLength
>ccb0	32 2c				L1:	.text "2,"	;  name of word as a string, ending at wh_NameLastChar
>ccb2	82					.byte (("2,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ccb3	21 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccb5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccb6	08					.byte NN	;wh_Flags	dictionary flags
=52274					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccb7	20 a6 cc	jsr $cca6	Two_Comma:	jsr Comma
.ccba	4c a6 cc	jmp $cca6			jmp Comma
=6					CL	.var *-(WordListLink+wh_Xt)
=$ccbd					en = *	; remember here
>ccb5	06					.byte CL	;wh_CodeLength
.ccbd	a9 e8		lda #$e8	Drop_Comma:	lda #$e8	;inx
.ccbf	a8		tay				tay
.ccc0	d0 e7		bne $cca9			bne Comma_YA
>ccc2	4a 73 72 2c			L1:	.text "Jsr,"	;  name of word as a string, ending at wh_NameLastChar
>ccc6	84					.byte (("Jsr,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ccc7	32 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccc9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccca	08					.byte NN	;wh_Flags	dictionary flags
=52294					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cccb	20 9a b3	jsr $b39a	Jsr_Comma:	jsr PopYA	; pop addr (optimize can skip)
.ccce	20 54 b7	jsr $b754	Jsr_Comma_YA:	jsr PushYA	; push addr
.ccd1	a9 20		lda #$20			lda #$20	; JSR abs opcode
.ccd3	20 8f cc	jsr $cc8f	Jsr_Comma_3:	jsr C_Comma_A
.ccd6	4c a6 cc	jmp $cca6			jmp Comma	; compile addr
=14					CL	.var *-(WordListLink+wh_Xt)
=$ccd9					en = *	; remember here
>ccc9	0e					.byte CL	;wh_CodeLength
>ccd9	4a 6d 70 2c			L1:	.text "Jmp,"	;  name of word as a string, ending at wh_NameLastChar
>ccdd	84					.byte (("Jmp,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ccde	46 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cce0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cce1	08					.byte NN	;wh_Flags	dictionary flags
=52317					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cce2	20 9a b3	jsr $b39a	Jmp_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cce5	20 54 b7	jsr $b754	Jmp_Comma_YA:	jsr PushYA	; push addr
.cce8	a9 4c		lda #$4c			lda #$4c	; JMP abs opcode
.ccea	d0 e7		bne $ccd3			bne Jsr_Comma_3
=10					CL	.var *-(WordListLink+wh_Xt)
=$ccec					en = *	; remember here
>cce0	0a					.byte CL	;wh_CodeLength
>ccec	43 40				L1:	.text "C@"	;  name of word as a string, ending at wh_NameLastChar
>ccee	02					.byte (("C@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ccef	5d cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccf1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccf2	10					.byte UF	;wh_Flags	dictionary flags
=52334					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccf3	20 c4 b3	jsr $b3c4	C_Fetch:	jsr underflow_1
.ccf6	a1 24		lda ($24,x)			lda (DStack+0,x)
.ccf8	95 24		sta $24,x			sta DStack+0,x
.ccfa	a9 00		lda #$00			lda #0
.ccfc	95 25		sta $25,x			sta DStack+1,x	; zero MSB
=11					CL	.var *-(WordListLink+wh_Xt)
=$ccfe					en = *	; remember here
>ccf1	0b					.byte CL	;wh_CodeLength
.ccfe	60		rts				rts
>ccff	43 21				L1:	.text "C!"	;  name of word as a string, ending at wh_NameLastChar
>cd01	22					.byte (("C!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd02	6e cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd04	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd05	10					.byte UF	;wh_Flags	dictionary flags
=52353					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd06	20 d9 b3	jsr $b3d9	C_Store:	jsr underflow_2
.cd09	b5 26		lda $26,x			lda DStack+2,x
.cd0b	81 24		sta ($24,x)			sta (DStack+0,x)
.cd0d	e8		inx				inx
.cd0e	e8		inx				inx
.cd0f	e8		inx				inx
.cd10	e8		inx				inx
=11					CL	.var *-(WordListLink+wh_Xt)
=$cd11					en = *	; remember here
>cd04	0b					.byte CL	;wh_CodeLength
.cd11	60		rts				rts
>cd12	31 2b 21			L1:	.text "1+!"	;  name of word as a string, ending at wh_NameLastChar
>cd15	23					.byte (("1+!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd16	81 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd18	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd19	00					.byte 0	;wh_Flags	dictionary flags
=52373					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd1a					OnePlusStore:
.cd1a	a9 01		lda #$01			lda #1
.cd1c	18		clc				clc
.cd1d	61 24		adc ($24,x)			adc (DStack+0,x)	; increment lo byte
.cd1f	81 24		sta ($24,x)			sta (DStack+0,x)
.cd21	90 0c		bcc $cd2f			bcc _7			; if carry
.cd23	f6 24		inc $24,x			inc DStack+0,x		;   point at hi byte
.cd25	d0 02		bne $cd29			bne +
.cd27	f6 25		inc $25,x			inc DStack+1,x
.cd29					+
.cd29	a1 24		lda ($24,x)			lda (DStack+0,x)	;   increment hi byte
.cd2b	69 00		adc #$00			adc #0
.cd2d	81 24		sta ($24,x)			sta (Dstack+0,x)
.cd2f					_7:
.cd2f	e8		inx				inx			; Drop addr
.cd30	e8		inx				inx
=23					CL	.var *-(WordListLink+wh_Xt)
=$cd31					en = *	; remember here
>cd18	17					.byte CL	;wh_CodeLength
.cd31	60		rts				rts
>cd32	2b 21				L1:	.text "+!"	;  name of word as a string, ending at wh_NameLastChar
>cd34	22					.byte (("+!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd35	95 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd37	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd38	18					.byte UF+NN	;wh_Flags	dictionary flags
=52404					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd39					Plus_store:
.cd39	20 d9 b3	jsr $b3d9			jsr underflow_2
.cd3c	18		clc				clc
.cd3d	b5 26		lda $26,x			lda DStack+2,x
.cd3f	61 24		adc ($24,x)			adc (DStack+0,x)
.cd41	81 24		sta ($24,x)			sta (DStack+0,x)
.cd43	f6 24		inc $24,x			inc DStack+0,x
.cd45	d0 02		bne $cd49			bne +
.cd47	f6 25		inc $25,x			inc DStack+1,x
.cd49					+
.cd49	b5 27		lda $27,x			lda DStack+3,x
.cd4b	61 24		adc ($24,x)			adc (DStack+0,x)
.cd4d	81 24		sta ($24,x)			sta (DStack+0,x)
.cd4f	4c b1 c4	jmp $c4b1			jmp Two_Drop
=25					CL	.var *-(WordListLink+wh_Xt)
=$cd52					en = *	; remember here
>cd37	19					.byte CL	;wh_CodeLength
>cd52	45 6d 69 74			L1:	.text "Emit"	;  name of word as a string, ending at wh_NameLastChar
>cd56	84					.byte (("Emit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd57	b4 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd59	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd5a	08					.byte NN	;wh_Flags	dictionary flags
=52438					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd5b	20 7e b3	jsr $b37e	Emit:		jsr PopA		; pop char, with underflow check
.cd5e					Emit_A:
.cd5e	6c 06 03	jmp ($0306)			jmp (output)		; JSR/RTS
=6					CL	.var *-(WordListLink+wh_Xt)
=$cd61					en = *	; remember here
>cd59	06					.byte CL	;wh_CodeLength
>cd61	53 70 61 63 65			L1:	.text "Space"	;  name of word as a string, ending at wh_NameLastChar
>cd66	a5					.byte (("Space"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd67	d6 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd69	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd6a	08					.byte NN	;wh_Flags	dictionary flags
=52454					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd6b	a9 20		lda #$20	Space:		lda #AscSP
.cd6d	d0 ef		bne $cd5e			bne Emit_A
=4					CL	.var *-(WordListLink+wh_Xt)
=$cd6f					en = *	; remember here
>cd69	04					.byte CL	;wh_CodeLength
>cd6f	54 79 70 65			L1:	.text "Type"	;  name of word as a string, ending at wh_NameLastChar
>cd73	a4					.byte (("Type"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd74	e6 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd76	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd77	18					.byte UF+NN	;wh_Flags	dictionary flags
=52467					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd78					Type:
.cd78	20 d9 b3	jsr $b3d9			jsr underflow_2
.cd7b	4c 88 cd	jmp $cd88			jmp _test
.cd7e					_loop:
.cd7e	d6 24		dec $24,x			dec DStack+0,x		; finish length decrement
.cd80	a1 26		lda ($26,x)			lda (DStack+2,x)	; Send the current character
.cd82	20 5e cd	jsr $cd5e			jsr Emit_A
.cd85	20 f0 c9	jsr $c9f0			jsr NOS_One_Plus	; increment address
.cd88	b5 24		lda $24,x	_test:		lda DStack+0,x		; decrement length & test for <0
.cd8a	d0 f2		bne $cd7e			bne _loop
.cd8c	d6 25		dec $25,x			dec DStack+1,x
.cd8e	10 ee		bpl $cd7e			bpl _loop
.cd90	4c b1 c4	jmp $c4b1			jmp Two_drop
=27					CL	.var *-(WordListLink+wh_Xt)
=$cd93					en = *	; remember here
>cd76	1b					.byte CL	;wh_CodeLength
.cd93					Print_ASCIIZ_YA:
.cd93	20 99 cd	jsr $cd99			jsr Print_ASCIIZ_YA_no_lf
.cd96	4c d7 aa	jmp $aad7	                jmp CR
.cd99					Print_ASCIIZ_YA_no_lf:
.cd99	85 18		sta $18				sta tmp3+0		; save string address
.cd9b	84 19		sty $19				sty tmp3+1
.cd9d	a0 00		ldy #$00			ldy #0
.cd9f					Print_ASCIIZ_tmp3_no_lf:
.cd9f	b1 18		lda ($18),y			lda (tmp3),y
.cda1	f0 06		beq $cda9			beq _done		; end of string?
.cda3	20 5e cd	jsr $cd5e			jsr emit_a
.cda6	c8		iny				iny
.cda7	d0 f6		bne $cd9f			bne Print_ASCIIZ_tmp3_no_lf
.cda9					_done:
.cda9	60		rts				rts
>cdaa	45 78 65 63 75 74 65		L1:	.text "Execute"	;  name of word as a string, ending at wh_NameLastChar
>cdb1	a7					.byte (("Execute"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cdb2	f3 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cdb4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdb5	08					.byte NN	;wh_Flags	dictionary flags
=52529					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdb6					Execute:
.cdb6	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.cdb8	b0 2f		bcs $cde9		bcs Throw_Stack_03
.cdba	b5 25		lda $25,x			lda DStack+1,x	; addr for RTI
.cdbc	48		pha				pha
.cdbd	b5 24		lda $24,x			lda DStack+0,x
.cdbf	48		pha				pha
.cdc0	e8		inx				inx		; drop addr
.cdc1	e8		inx				inx
.cdc2	08		php				php		; flags for RTI
.cdc3	40		rti				rti
=14					CL	.var *-(WordListLink+wh_Xt)
=$cdc4					en = *	; remember here
>cdb4	0e					.byte CL	;wh_CodeLength
>cdc4	32 52 6f 74			L1:	.text "2Rot"	;  name of word as a string, ending at wh_NameLastChar
>cdc8	84					.byte (("2Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cdc9	31 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cdcb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdcc	08					.byte NN	;wh_Flags	dictionary flags
=52552					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdcd					TwoRot:
.cdcd	e0 1d		cpx #$1d		cpx #-2*6+DStack0+1
.cdcf	b0 18		bcs $cde9		bcs Throw_Stack_03
.cdd1	86 14		stx $14				stx tmp1+0
.cdd3	e8		inx				inx		; do 4 times
.cdd4	e8		inx				inx
.cdd5	e8		inx				inx
.cdd6	e8		inx				inx
.cdd7	ca		dex		-		dex
.cdd8	b4 2c		ldy $2c,x			ldy DStack+8,x	; do a byte
.cdda	b5 28		lda $28,x			lda DStack+4,x
.cddc	95 2c		sta $2c,x			sta DStack+8,x
.cdde	b5 24		lda $24,x			lda DStack+0,x
.cde0	95 28		sta $28,x			sta DStack+4,x
.cde2	94 24		sty $24,x			sty DStack+0,x
.cde4	e4 14		cpx $14				cpx tmp1+0
.cde6	d0 ef		bne $cdd7			bne -
=27					CL	.var *-(WordListLink+wh_Xt)
=$cde8					en = *	; remember here
>cdcb	1b					.byte CL	;wh_CodeLength
.cde8	60		rts				rts
.cde9	4c e8 b3	jmp $b3e8	Throw_Stack_03: jmp Throw_Stack
>cdec	52 6f 74			L1:	.text "Rot"	;  name of word as a string, ending at wh_NameLastChar
>cdef	83					.byte (("Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cdf0	48 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cdf2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdf3	08					.byte NN	;wh_Flags	dictionary flags
=52591					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdf4					Rot:
.cdf4	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.cdf6	b0 f1		bcs $cde9		bcs Throw_Stack_03
.cdf8	b4 29		ldy $29,x			ldy DStack+5,x	; do MSB
.cdfa	b5 27		lda $27,x			lda DStack+3,x
.cdfc	95 29		sta $29,x			sta DStack+5,x
.cdfe	b5 25		lda $25,x			lda DStack+1,x
.ce00	95 27		sta $27,x			sta DStack+3,x
.ce02	94 25		sty $25,x			sty DStack+1,x
.ce04	b4 28		ldy $28,x			ldy DStack+4,x	; do LSB
.ce06	b5 26		lda $26,x			lda DStack+2,x
.ce08	95 28		sta $28,x			sta DStack+4,x
.ce0a	b5 24		lda $24,x			lda DStack+0,x
.ce0c	95 26		sta $26,x			sta DStack+2,x
.ce0e	94 24		sty $24,x			sty DStack+0,x
=28					CL	.var *-(WordListLink+wh_Xt)
=$ce10					en = *	; remember here
>cdf2	1c					.byte CL	;wh_CodeLength
.ce10	60		rts				rts
>ce11	2d 52 6f 74			L1:	.text "-Rot"	;  name of word as a string, ending at wh_NameLastChar
>ce15	84					.byte (("-Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce16	6f cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce18	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce19	08					.byte NN	;wh_Flags	dictionary flags
=52629					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce1a					Not_Rot:
.ce1a	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ce1c	b0 cb		bcs $cde9		bcs Throw_Stack_03
.ce1e	b4 25		ldy $25,x			ldy DStack+1,x	; do MSB
.ce20	b5 27		lda $27,x			lda DStack+3,x
.ce22	95 25		sta $25,x			sta DStack+1,x
.ce24	b5 29		lda $29,x			lda DStack+5,x
.ce26	95 27		sta $27,x			sta DStack+3,x
.ce28	94 29		sty $29,x			sty DStack+5,x
.ce2a	b4 24		ldy $24,x			ldy DStack+0,x	; do LSB
.ce2c	b5 26		lda $26,x			lda DStack+2,x
.ce2e	95 24		sta $24,x			sta DStack+0,x
.ce30	b5 28		lda $28,x			lda DStack+4,x
.ce32	95 26		sta $26,x			sta DStack+2,x
.ce34	94 28		sty $28,x			sty DStack+4,x
=28					CL	.var *-(WordListLink+wh_Xt)
=$ce36					en = *	; remember here
>ce18	1c					.byte CL	;wh_CodeLength
.ce36	60		rts				rts
>ce37	21				L1:	.text "!"	;  name of word as a string, ending at wh_NameLastChar
>ce38	21					.byte (("!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce39	95 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce3b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce3c	08					.byte NN	;wh_Flags	dictionary flags
=52664					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce3d					Store:
.ce3d	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ce3f	b0 a8		bcs $cde9		bcs Throw_Stack_03
.ce41	b5 26		lda $26,x			lda DStack+2,x	; LSB
.ce43	81 24		sta ($24,x)			sta (DStack+0,x)
.ce45	f6 24		inc $24,x			inc DStack+0,x
.ce47	d0 02		bne $ce4b			bne +
.ce49	f6 25		inc $25,x			inc DStack+1,x
.ce4b					+
.ce4b	b5 27		lda $27,x			lda DStack+3,x	; MSB
.ce4d	81 24		sta ($24,x)			sta (DStack+0,x)
.ce4f	e8		inx				inx		; 2Drop
.ce50	e8		inx				inx
.ce51	e8		inx				inx
.ce52	e8		inx				inx
=22					CL	.var *-(WordListLink+wh_Xt)
=$ce53					en = *	; remember here
>ce3b	16					.byte CL	;wh_CodeLength
.ce53	60		rts				rts
>ce54	40				L1:	.text "@"	;  name of word as a string, ending at wh_NameLastChar
>ce55	01					.byte (("@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce56	b8 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce58	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce59	08					.byte NN	;wh_Flags	dictionary flags
=52693					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce5a					Fetch:
.ce5a	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.ce5c	b0 8b		bcs $cde9		bcs Throw_Stack_03
.ce5e	a1 24		lda ($24,x)			lda (DStack+0,x)		; LSB
.ce60	a8		tay				tay
.ce61	f6 24		inc $24,x			inc DStack+0,x
.ce63	d0 02		bne $ce67			bne +
.ce65	f6 25		inc $25,x			inc DStack+1,x
.ce67					+
.ce67	a1 24		lda ($24,x)			lda (DStack+0,x)		; MSB
.ce69	95 25		sta $25,x			sta DStack+1,x
.ce6b	94 24		sty $24,x			sty DStack+0,x
=19					CL	.var *-(WordListLink+wh_Xt)
=$ce6d					en = *	; remember here
>ce58	13					.byte CL	;wh_CodeLength
.ce6d	60		rts				rts
>ce6e	3e 52				L1:	.text ">R"	;  name of word as a string, ending at wh_NameLastChar
>ce70	42					.byte ((">R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce71	d5 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce73	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce74	41					.byte CO+R6	;wh_Flags	dictionary flags
=52720					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce75					To_R:
.ce75	68		pla				pla		; move the return address out of the way
.ce76	85 1c		sta $1c				sta tmp5+0
.ce78	68		pla				pla
.ce79	85 1d		sta $1d				sta tmp5+1
.ce7b	20 c4 b3	jsr $b3c4			jsr underflow_1
.ce7e	b5 25		lda $25,x			lda DStack+1,x	; MSB
.ce80	48		pha				pha
.ce81	b5 24		lda $24,x			lda DStack+0,x	; LSB
.ce83	48		pha				pha
.ce84	e8		inx				inx
.ce85	e8		inx				inx
.ce86	a5 1d		lda $1d				lda tmp5+1	; move the return address back in
.ce88	48		pha				pha
.ce89	a5 1c		lda $1c				lda tmp5+0
.ce8b	48		pha				pha
=23					CL	.var *-(WordListLink+wh_Xt)
=$ce8c					en = *	; remember here
>ce73	17					.byte CL	;wh_CodeLength
.ce8c	60		rts				rts
>ce8d	52 3e				L1:	.text "R>"	;  name of word as a string, ending at wh_NameLastChar
>ce8f	c2					.byte (("R>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce90	f0 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce92	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce93	41					.byte CO+R6	;wh_Flags	dictionary flags
=52751					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce94					R_From:
.ce94	68		pla				pla		; Move the RTS addr out of the way
.ce95	85 1c		sta $1c				sta tmp5+0
.ce97	68		pla				pla
.ce98	85 1d		sta $1d				sta tmp5+1
.ce9a	ca		dex				dex
.ce9b	ca		dex				dex
.ce9c	68		pla				pla		; LSB
.ce9d	95 24		sta $24,x			sta DStack+0,x
.ce9f	68		pla				pla		; MSB
.cea0	95 25		sta $25,x			sta DStack+1,x
.cea2	a5 1d		lda $1d				lda tmp5+1	; Restore the RTS addr
.cea4	48		pha				pha
.cea5	a5 1c		lda $1c				lda tmp5+0
.cea7	48		pha				pha
=20					CL	.var *-(WordListLink+wh_Xt)
=$cea8					en = *	; remember here
>ce92	14					.byte CL	;wh_CodeLength
.cea8	60		rts				rts
>cea9	52 40				L1:	.text "R@"	;  name of word as a string, ending at wh_NameLastChar
>ceab	02					.byte (("R@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ceac	0f ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ceae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ceaf	09					.byte NN+CO	;wh_Flags	dictionary flags
=52779					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ceb0					R_Fetch:
.ceb0	86 14		stx $14				stx tmp1	; save data stack index
.ceb2	ba		tsx				tsx		; X= return stack index
.ceb3	bd 03 01	lda $0103,x			lda RStack+3,x
.ceb6	bc 04 01	ldy $0104,x			ldy RStack+4,x
.ceb9	a6 14		ldx $14				ldx tmp1	; restore data stack index
.cebb	4c 54 b7	jmp $b754			jmp PushYA
=14					CL	.var *-(WordListLink+wh_Xt)
=$cebe					en = *	; remember here
>ceae	0e					.byte CL	;wh_CodeLength
>cebe	4f 76 65 72			L1:	.text "Over"	;  name of word as a string, ending at wh_NameLastChar
>cec2	44					.byte (("Over"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cec3	2b ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cec5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cec6	10					.byte UF	;wh_Flags	dictionary flags
=52802					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cec7					Over:
.cec7	20 d9 b3	jsr $b3d9			jsr underflow_2
.ceca	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cecc	b4 27		ldy $27,x			ldy DStack+3,x	; MSB
.cece	ca		dex				dex		; PushYA
.cecf	ca		dex				dex
.ced0	95 24		sta $24,x			sta DStack+0,x
.ced2	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$ced4					en = *	; remember here
>cec5	0d					.byte CL	;wh_CodeLength
.ced4	60		rts				rts
>ced5	3f 44 75 70			L1:	.text "?Dup"	;  name of word as a string, ending at wh_NameLastChar
>ced9	04					.byte (("?Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ceda	42 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cedc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cedd	18					.byte UF+NN	;wh_Flags	dictionary flags
=52825					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cede					Question_Dup:
.cede	20 c4 b3	jsr $b3c4			jsr underflow_1
.cee1	b5 24		lda $24,x			lda DStack+0,x	; Check if TOS is zero
.cee3	15 25		ora $25,x			ora DStack+1,x
.cee5	d0 0c		bne $cef3			bne Dup_NoUf
=9					CL	.var *-(WordListLink+wh_Xt)
=$cee7					en = *	; remember here
>cedc	09					.byte CL	;wh_CodeLength
.cee7	60		rts				rts
>cee8	44 75 70			L1:	.text "Dup"	;  name of word as a string, ending at wh_NameLastChar
>ceeb	03					.byte (("Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ceec	59 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ceee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ceef	10					.byte UF	;wh_Flags	dictionary flags
=52843					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cef0					Dup:
.cef0	20 c4 b3	jsr $b3c4			jsr underflow_1
.cef3	b5 24		lda $24,x	Dup_NoUf:	lda DStack+0,x	; LSB
.cef5	b4 25		ldy $25,x			ldy DStack+1,x	; MSB
.cef7	ca		dex				dex
.cef8	ca		dex				dex
.cef9	95 24		sta $24,x			sta DStack+0,x
.cefb	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$cefd					en = *	; remember here
>ceee	0d					.byte CL	;wh_CodeLength
.cefd	60		rts				rts
.cefe					PushAY:
.cefe	ca		dex				dex
.ceff	ca		dex				dex
.cf00	94 24		sty $24,x			sty DStack+0,x
.cf02	95 25		sta $25,x			sta DStack+1,x
.cf04	60		rts				rts
>cf05	53 77 61 70			L1:	.text "Swap"	;  name of word as a string, ending at wh_NameLastChar
>cf09	04					.byte (("Swap"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf0a	6b ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf0c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf0d	10					.byte UF	;wh_Flags	dictionary flags
=52873					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf0e					Swap:
.cf0e	20 d9 b3	jsr $b3d9			jsr underflow_2
.cf11	b5 24		lda $24,x			lda DStack+0,x	; do LSB
.cf13	b4 26		ldy $26,x			ldy DStack+2,x
.cf15	95 26		sta $26,x			sta DStack+2,x
.cf17	94 24		sty $24,x			sty DStack+0,x
.cf19	b5 25		lda $25,x			lda DStack+1,x	; do MSB
.cf1b	b4 27		ldy $27,x			ldy DStack+3,x
.cf1d	95 27		sta $27,x			sta DStack+3,x
.cf1f	94 25		sty $25,x			sty DStack+1,x
=19					CL	.var *-(WordListLink+wh_Xt)
=$cf21					en = *	; remember here
>cf0c	13					.byte CL	;wh_CodeLength
.cf21	60		rts				rts
>cf22	44 72 6f 70			L1:	.text "Drop"	;  name of word as a string, ending at wh_NameLastChar
>cf26	04					.byte (("Drop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf27	89 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf29	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf2a	10					.byte UF	;wh_Flags	dictionary flags
=52902					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf2b					Drop:
.cf2b	20 c4 b3	jsr $b3c4			jsr underflow_1
.cf2e	e8		inx				inx
.cf2f	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$cf30					en = *	; remember here
>cf29	05					.byte CL	;wh_CodeLength
.cf30	60		rts				rts
=52902					forth_dictionary_start = WordListLink ; END of FORTH-WORDLIST
=0					WordListLink .var 0
>cf31	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
>cf36	65					.byte (("Words"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf37	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf39	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf3a	08					.byte NN	;wh_Flags	dictionary flags
=52918					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf3b	4c 24 aa	jmp $aa24			jmp Words
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf3e					en = *	; remember here
>cf39	03					.byte CL	;wh_CodeLength
>cf3e	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>cf46	72 64 6c 69 73 74
>cf4c	8e					.byte (("Forth-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf4d	b6 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf4f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf50	08					.byte NN	;wh_Flags	dictionary flags
=52940					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf51	4c 20 9f	jmp $9f20			jmp Forth_WordList
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf54					en = *	; remember here
>cf4f	03					.byte CL	;wh_CodeLength
>cf54	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
>cf59	05					.byte (("Forth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf5a	cc ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf5c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf5d	08					.byte NN	;wh_Flags	dictionary flags
=52953					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf5e	4c 19 a0	jmp $a019			jmp Forth
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf61					en = *	; remember here
>cf5c	03					.byte CL	;wh_CodeLength
>cf61	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>cf69	72
>cf6a	49					.byte (("Set-Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf6b	d9 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf6d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf6e	08					.byte NN	;wh_Flags	dictionary flags
=52970					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf6f	4c dd a0	jmp $a0dd			jmp Set_Order
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf72					en = *	; remember here
>cf6d	03					.byte CL	;wh_CodeLength
=52970					root_dictionary_start = WordListLink ; END of ROOT-WORDLIST
.cf72					assembler:
=0					WordListLink .var 0
.cf72					asm_r:
.cf72	68		pla			pla		; pop RTS addr
.cf73	a8		tay			tay
.cf74	68		pla			pla
.cf75	20 b4 cf	jsr $cfb4		jsr asm_op	; compile opcode
.cf78	b5 25		lda $25,x		lda DStack+1,x	; check range
.cf7a	f0 09		beq $cf85		beq _plus
.cf7c	c9 ff		cmp #$ff		cmp #$ff
.cf7e	f0 0b		beq $cf8b		beq _minus
.cf80	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cf82	4c 23 b4	jmp $b423		jmp ThrowA
.cf85	b5 24		lda $24,x	_plus:	lda DStack+0,x
.cf87	30 f7		bmi $cf80		bmi _err
.cf89	10 04		bpl $cf8f		bpl _store
.cf8b	b5 24		lda $24,x	_minus:	lda DStack+0,x
.cf8d	10 f1		bpl $cf80		bpl _err
.cf8f	4c 8c cc	jmp $cc8c	_store:	jmp C_Comma
.cf92					asm_1:
.cf92	68		pla			pla		; pop RTS addr
.cf93	a8		tay			tay
.cf94	68		pla			pla
.cf95	20 b4 cf	jsr $cfb4		jsr asm_op	; compile opcode
.cf98	b5 25		lda $25,x		lda DStack+1,x	; compile operand
.cf9a	f0 04		beq $cfa0		beq _store	;   unsigned byte?
.cf9c	c9 ff		cmp #$ff		cmp #$ff	;   signed byte?
.cf9e	d0 03		bne $cfa3		bne _err
.cfa0	4c 8c cc	jmp $cc8c	_store:	jmp C_Comma
.cfa3	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cfa5	4c 23 b4	jmp $b423		jmp ThrowA
.cfa8					asm_2:
.cfa8	68		pla			pla		; pop RTS addr
.cfa9	a8		tay			tay
.cfaa	68		pla			pla
.cfab	20 b4 cf	jsr $cfb4		jsr asm_op	; compile opcode
.cfae	4c a6 cc	jmp $cca6		jmp Comma	; compile operand
.cfb1					asm_0:
.cfb1	68		pla			pla		; pop RTS addr
.cfb2	a8		tay			tay
.cfb3	68		pla			pla
.cfb4	84 14		sty $14		asm_op:	sty tmp1+0	; save RTS addr
.cfb6	85 15		sta $15			sta tmp1+1
.cfb8	a0 01		ldy #$01		ldy #1		; get opcode byte
.cfba	b1 14		lda ($14),y		lda (tmp1),y
.cfbc	4c 8f cc	jmp $cc8f		jmp C_Comma_A	; compile opcode
>cfbf	61 64 63 2e 23			L1:	.text "adc.#"	;  name of word as a string, ending at wh_NameLastChar
>cfc4	65					.byte (("adc.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cfc5	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfc7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfc8	08					.byte NN	;wh_Flags	dictionary flags
=53060					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfc9	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfcc					en = *	; remember here
>cfc7	03					.byte CL	;wh_CodeLength
>cfcc	69					.byte $69
>cfcd	61 64 63 2e 78			L1:	.text "adc.x"	;  name of word as a string, ending at wh_NameLastChar
>cfd2	05					.byte (("adc.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cfd3	44 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfd5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfd6	08					.byte NN	;wh_Flags	dictionary flags
=53074					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfd7	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfda					en = *	; remember here
>cfd5	03					.byte CL	;wh_CodeLength
>cfda	7d					.byte $7d
>cfdb	61 64 63 2e 79			L1:	.text "adc.y"	;  name of word as a string, ending at wh_NameLastChar
>cfe0	25					.byte (("adc.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cfe1	52 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfe3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfe4	08					.byte NN	;wh_Flags	dictionary flags
=53088					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfe5	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfe8					en = *	; remember here
>cfe3	03					.byte CL	;wh_CodeLength
>cfe8	79					.byte $79
>cfe9	61 64 63 2e 7a			L1:	.text "adc.z"	;  name of word as a string, ending at wh_NameLastChar
>cfee	45					.byte (("adc.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cfef	60 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cff1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cff2	08					.byte NN	;wh_Flags	dictionary flags
=53102					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cff3	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cff6					en = *	; remember here
>cff1	03					.byte CL	;wh_CodeLength
>cff6	65					.byte $65
>cff7	61 64 63 2e 7a 69 79		L1:	.text "adc.ziy"	;  name of word as a string, ending at wh_NameLastChar
>cffe	27					.byte (("adc.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cfff	6e cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d001	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d002	08					.byte NN	;wh_Flags	dictionary flags
=53118					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d003	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d006					en = *	; remember here
>d001	03					.byte CL	;wh_CodeLength
>d006	71					.byte $71
>d007	61 64 63 2e 7a 78		L1:	.text "adc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d00d	06					.byte (("adc.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d00e	7e cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d010	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d011	08					.byte NN	;wh_Flags	dictionary flags
=53133					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d012	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d015					en = *	; remember here
>d010	03					.byte CL	;wh_CodeLength
>d015	75					.byte $75
>d016	61 64 63 2e 7a 78 69		L1:	.text "adc.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d01d	27					.byte (("adc.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d01e	8d cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d020	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d021	08					.byte NN	;wh_Flags	dictionary flags
=53149					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d022	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d025					en = *	; remember here
>d020	03					.byte CL	;wh_CodeLength
>d025	61					.byte $61
>d026	61 6e 64 2e			L1:	.text "and."	;  name of word as a string, ending at wh_NameLastChar
>d02a	c4					.byte (("and."[-1]&7)<<5)+(*-L1)	;wh_HNL
>d02b	9d cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d02d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d02e	08					.byte NN	;wh_Flags	dictionary flags
=53162					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d02f	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d032					en = *	; remember here
>d02d	03					.byte CL	;wh_CodeLength
>d032	2d					.byte $2d
>d033	61 6e 64 2e 23			L1:	.text "and.#"	;  name of word as a string, ending at wh_NameLastChar
>d038	65					.byte (("and.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d039	aa cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d03b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d03c	08					.byte NN	;wh_Flags	dictionary flags
=53176					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d03d	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d040					en = *	; remember here
>d03b	03					.byte CL	;wh_CodeLength
>d040	29					.byte $29
>d041	61 6e 64 2e 78			L1:	.text "and.x"	;  name of word as a string, ending at wh_NameLastChar
>d046	05					.byte (("and.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d047	b8 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d049	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d04a	08					.byte NN	;wh_Flags	dictionary flags
=53190					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d04b	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d04e					en = *	; remember here
>d049	03					.byte CL	;wh_CodeLength
>d04e	3d					.byte $3d
>d04f	61 6e 64 2e 79			L1:	.text "and.y"	;  name of word as a string, ending at wh_NameLastChar
>d054	25					.byte (("and.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d055	c6 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d057	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d058	08					.byte NN	;wh_Flags	dictionary flags
=53204					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d059	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d05c					en = *	; remember here
>d057	03					.byte CL	;wh_CodeLength
>d05c	39					.byte $39
>d05d	61 6e 64 2e 7a			L1:	.text "and.z"	;  name of word as a string, ending at wh_NameLastChar
>d062	45					.byte (("and.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d063	d4 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d065	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d066	08					.byte NN	;wh_Flags	dictionary flags
=53218					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d067	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d06a					en = *	; remember here
>d065	03					.byte CL	;wh_CodeLength
>d06a	25					.byte $25
>d06b	61 6e 64 2e 7a 69 79		L1:	.text "and.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d072	27					.byte (("and.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d073	e2 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d075	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d076	08					.byte NN	;wh_Flags	dictionary flags
=53234					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d077	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d07a					en = *	; remember here
>d075	03					.byte CL	;wh_CodeLength
>d07a	31					.byte $31
>d07b	61 6e 64 2e 7a 78		L1:	.text "and.zx"	;  name of word as a string, ending at wh_NameLastChar
>d081	06					.byte (("and.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d082	f2 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d084	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d085	08					.byte NN	;wh_Flags	dictionary flags
=53249					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d086	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d089					en = *	; remember here
>d084	03					.byte CL	;wh_CodeLength
>d089	35					.byte $35
>d08a	61 6e 64 2e 7a 78 69		L1:	.text "and.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d091	27					.byte (("and.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d092	01 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d094	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d095	08					.byte NN	;wh_Flags	dictionary flags
=53265					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d096	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d099					en = *	; remember here
>d094	03					.byte CL	;wh_CodeLength
>d099	21					.byte $21
>d09a	61 73 6c			L1:	.text "asl"	;  name of word as a string, ending at wh_NameLastChar
>d09d	83					.byte (("asl"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d09e	11 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0a0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0a1	08					.byte NN	;wh_Flags	dictionary flags
=53277					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0a2	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0a5					en = *	; remember here
>d0a0	03					.byte CL	;wh_CodeLength
>d0a5	0e					.byte $0e
>d0a6	61 73 6c 2e 61			L1:	.text "asl.a"	;  name of word as a string, ending at wh_NameLastChar
>d0ab	25					.byte (("asl.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0ac	1d d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0ae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0af	08					.byte NN	;wh_Flags	dictionary flags
=53291					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0b0	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0b3					en = *	; remember here
>d0ae	03					.byte CL	;wh_CodeLength
>d0b3	0a					.byte $0a
>d0b4	61 73 6c 2e 78			L1:	.text "asl.x"	;  name of word as a string, ending at wh_NameLastChar
>d0b9	05					.byte (("asl.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0ba	2b d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0bd	08					.byte NN	;wh_Flags	dictionary flags
=53305					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0be	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0c1					en = *	; remember here
>d0bc	03					.byte CL	;wh_CodeLength
>d0c1	1e					.byte $1e
>d0c2	61 73 6c 2e 7a			L1:	.text "asl.z"	;  name of word as a string, ending at wh_NameLastChar
>d0c7	45					.byte (("asl.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0c8	39 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0ca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0cb	08					.byte NN	;wh_Flags	dictionary flags
=53319					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0cc	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0cf					en = *	; remember here
>d0ca	03					.byte CL	;wh_CodeLength
>d0cf	06					.byte $06
>d0d0	61 73 6c 2e 7a 78		L1:	.text "asl.zx"	;  name of word as a string, ending at wh_NameLastChar
>d0d6	06					.byte (("asl.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0d7	47 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0d9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0da	08					.byte NN	;wh_Flags	dictionary flags
=53334					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0db	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0de					en = *	; remember here
>d0d9	03					.byte CL	;wh_CodeLength
>d0de	16					.byte $16
>d0df	62 63 63			L1:	.text "bcc"	;  name of word as a string, ending at wh_NameLastChar
>d0e2	63					.byte (("bcc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0e3	56 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0e5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0e6	08					.byte NN	;wh_Flags	dictionary flags
=53346					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0e7	20 72 cf	jsr $cf72		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0ea					en = *	; remember here
>d0e5	03					.byte CL	;wh_CodeLength
>d0ea	90					.byte $90
>d0eb	62 63 73			L1:	.text "bcs"	;  name of word as a string, ending at wh_NameLastChar
>d0ee	63					.byte (("bcs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0ef	62 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0f1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0f2	08					.byte NN	;wh_Flags	dictionary flags
=53358					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0f3	20 72 cf	jsr $cf72		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0f6					en = *	; remember here
>d0f1	03					.byte CL	;wh_CodeLength
>d0f6	b0					.byte $b0
>d0f7	62 65 71			L1:	.text "beq"	;  name of word as a string, ending at wh_NameLastChar
>d0fa	23					.byte (("beq"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0fb	6e d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0fd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0fe	08					.byte NN	;wh_Flags	dictionary flags
=53370					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0ff	20 72 cf	jsr $cf72		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d102					en = *	; remember here
>d0fd	03					.byte CL	;wh_CodeLength
>d102	f0					.byte $f0
>d103	62 69 74			L1:	.text "bit"	;  name of word as a string, ending at wh_NameLastChar
>d106	83					.byte (("bit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d107	7a d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d109	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d10a	08					.byte NN	;wh_Flags	dictionary flags
=53382					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d10b	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d10e					en = *	; remember here
>d109	03					.byte CL	;wh_CodeLength
>d10e	2c					.byte $2c
>d10f	62 69 74 2e 7a			L1:	.text "bit.z"	;  name of word as a string, ending at wh_NameLastChar
>d114	45					.byte (("bit.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d115	86 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d117	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d118	08					.byte NN	;wh_Flags	dictionary flags
=53396					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d119	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d11c					en = *	; remember here
>d117	03					.byte CL	;wh_CodeLength
>d11c	24					.byte $24
>d11d	62 6d 69			L1:	.text "bmi"	;  name of word as a string, ending at wh_NameLastChar
>d120	23					.byte (("bmi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d121	94 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d123	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d124	08					.byte NN	;wh_Flags	dictionary flags
=53408					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d125	20 72 cf	jsr $cf72		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d128					en = *	; remember here
>d123	03					.byte CL	;wh_CodeLength
>d128	30					.byte $30
>d129	62 6e 65			L1:	.text "bne"	;  name of word as a string, ending at wh_NameLastChar
>d12c	a3					.byte (("bne"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d12d	a0 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d12f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d130	08					.byte NN	;wh_Flags	dictionary flags
=53420					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d131	20 72 cf	jsr $cf72		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d134					en = *	; remember here
>d12f	03					.byte CL	;wh_CodeLength
>d134	d0					.byte $d0
>d135	62 70 6c			L1:	.text "bpl"	;  name of word as a string, ending at wh_NameLastChar
>d138	83					.byte (("bpl"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d139	ac d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d13b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d13c	08					.byte NN	;wh_Flags	dictionary flags
=53432					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d13d	20 72 cf	jsr $cf72		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d140					en = *	; remember here
>d13b	03					.byte CL	;wh_CodeLength
>d140	10					.byte $10
>d141	62 72 6b			L1:	.text "brk"	;  name of word as a string, ending at wh_NameLastChar
>d144	63					.byte (("brk"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d145	b8 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d147	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d148	08					.byte NN	;wh_Flags	dictionary flags
=53444					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d149	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d14c					en = *	; remember here
>d147	03					.byte CL	;wh_CodeLength
>d14c	00					.byte $00
>d14d	62 76 63			L1:	.text "bvc"	;  name of word as a string, ending at wh_NameLastChar
>d150	63					.byte (("bvc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d151	c4 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d153	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d154	08					.byte NN	;wh_Flags	dictionary flags
=53456					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d155	20 72 cf	jsr $cf72		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d158					en = *	; remember here
>d153	03					.byte CL	;wh_CodeLength
>d158	50					.byte $50
>d159	62 76 73			L1:	.text "bvs"	;  name of word as a string, ending at wh_NameLastChar
>d15c	63					.byte (("bvs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d15d	d0 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d15f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d160	08					.byte NN	;wh_Flags	dictionary flags
=53468					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d161	20 72 cf	jsr $cf72		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d164					en = *	; remember here
>d15f	03					.byte CL	;wh_CodeLength
>d164	70					.byte $70
>d165	63 6c 63			L1:	.text "clc"	;  name of word as a string, ending at wh_NameLastChar
>d168	63					.byte (("clc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d169	dc d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d16b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d16c	08					.byte NN	;wh_Flags	dictionary flags
=53480					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d16d	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d170					en = *	; remember here
>d16b	03					.byte CL	;wh_CodeLength
>d170	18					.byte $18
>d171	63 6c 64			L1:	.text "cld"	;  name of word as a string, ending at wh_NameLastChar
>d174	83					.byte (("cld"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d175	e8 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d177	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d178	08					.byte NN	;wh_Flags	dictionary flags
=53492					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d179	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d17c					en = *	; remember here
>d177	03					.byte CL	;wh_CodeLength
>d17c	d8					.byte $d8
>d17d	63 6c 69			L1:	.text "cli"	;  name of word as a string, ending at wh_NameLastChar
>d180	23					.byte (("cli"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d181	f4 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d183	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d184	08					.byte NN	;wh_Flags	dictionary flags
=53504					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d185	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d188					en = *	; remember here
>d183	03					.byte CL	;wh_CodeLength
>d188	58					.byte $58
>d189	63 6c 76			L1:	.text "clv"	;  name of word as a string, ending at wh_NameLastChar
>d18c	c3					.byte (("clv"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d18d	00 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d18f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d190	08					.byte NN	;wh_Flags	dictionary flags
=53516					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d191	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d194					en = *	; remember here
>d18f	03					.byte CL	;wh_CodeLength
>d194	b8					.byte $b8
>d195	63 6d 70			L1:	.text "cmp"	;  name of word as a string, ending at wh_NameLastChar
>d198	03					.byte (("cmp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d199	0c d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d19b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d19c	08					.byte NN	;wh_Flags	dictionary flags
=53528					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d19d	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1a0					en = *	; remember here
>d19b	03					.byte CL	;wh_CodeLength
>d1a0	cd					.byte $cd
>d1a1	63 6d 70 2e 23			L1:	.text "cmp.#"	;  name of word as a string, ending at wh_NameLastChar
>d1a6	65					.byte (("cmp.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1a7	18 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1a9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1aa	08					.byte NN	;wh_Flags	dictionary flags
=53542					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1ab	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1ae					en = *	; remember here
>d1a9	03					.byte CL	;wh_CodeLength
>d1ae	c9					.byte $c9
>d1af	63 6d 70 2e 78			L1:	.text "cmp.x"	;  name of word as a string, ending at wh_NameLastChar
>d1b4	05					.byte (("cmp.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1b5	26 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1b8	08					.byte NN	;wh_Flags	dictionary flags
=53556					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1b9	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1bc					en = *	; remember here
>d1b7	03					.byte CL	;wh_CodeLength
>d1bc	dd					.byte $dd
>d1bd	63 6d 70 2e 79			L1:	.text "cmp.y"	;  name of word as a string, ending at wh_NameLastChar
>d1c2	25					.byte (("cmp.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1c3	34 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1c5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1c6	08					.byte NN	;wh_Flags	dictionary flags
=53570					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1c7	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1ca					en = *	; remember here
>d1c5	03					.byte CL	;wh_CodeLength
>d1ca	d9					.byte $d9
>d1cb	63 6d 70 2e 7a			L1:	.text "cmp.z"	;  name of word as a string, ending at wh_NameLastChar
>d1d0	45					.byte (("cmp.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1d1	42 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1d3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1d4	08					.byte NN	;wh_Flags	dictionary flags
=53584					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1d5	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1d8					en = *	; remember here
>d1d3	03					.byte CL	;wh_CodeLength
>d1d8	c5					.byte $c5
>d1d9	63 6d 70 2e 7a 69 79		L1:	.text "cmp.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d1e0	27					.byte (("cmp.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1e1	50 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1e3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1e4	08					.byte NN	;wh_Flags	dictionary flags
=53600					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1e5	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1e8					en = *	; remember here
>d1e3	03					.byte CL	;wh_CodeLength
>d1e8	d1					.byte $d1
>d1e9	63 6d 70 2e 7a 78		L1:	.text "cmp.zx"	;  name of word as a string, ending at wh_NameLastChar
>d1ef	06					.byte (("cmp.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1f0	60 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1f2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1f3	08					.byte NN	;wh_Flags	dictionary flags
=53615					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1f4	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1f7					en = *	; remember here
>d1f2	03					.byte CL	;wh_CodeLength
>d1f7	d5					.byte $d5
>d1f8	63 6d 70 2e 7a 78 69		L1:	.text "cmp.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d1ff	27					.byte (("cmp.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d200	6f d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d202	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d203	08					.byte NN	;wh_Flags	dictionary flags
=53631					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d204	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d207					en = *	; remember here
>d202	03					.byte CL	;wh_CodeLength
>d207	c1					.byte $c1
>d208	63 70 78			L1:	.text "cpx"	;  name of word as a string, ending at wh_NameLastChar
>d20b	03					.byte (("cpx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d20c	7f d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d20e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d20f	08					.byte NN	;wh_Flags	dictionary flags
=53643					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d210	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d213					en = *	; remember here
>d20e	03					.byte CL	;wh_CodeLength
>d213	ec					.byte $ec
>d214	63 70 78 2e 23			L1:	.text "cpx.#"	;  name of word as a string, ending at wh_NameLastChar
>d219	65					.byte (("cpx.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d21a	8b d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d21c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d21d	08					.byte NN	;wh_Flags	dictionary flags
=53657					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d21e	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d221					en = *	; remember here
>d21c	03					.byte CL	;wh_CodeLength
>d221	e0					.byte $e0
>d222	63 70 78 2e 7a			L1:	.text "cpx.z"	;  name of word as a string, ending at wh_NameLastChar
>d227	45					.byte (("cpx.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d228	99 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d22a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d22b	08					.byte NN	;wh_Flags	dictionary flags
=53671					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d22c	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d22f					en = *	; remember here
>d22a	03					.byte CL	;wh_CodeLength
>d22f	e4					.byte $e4
>d230	63 70 79			L1:	.text "cpy"	;  name of word as a string, ending at wh_NameLastChar
>d233	23					.byte (("cpy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d234	a7 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d236	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d237	08					.byte NN	;wh_Flags	dictionary flags
=53683					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d238	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d23b					en = *	; remember here
>d236	03					.byte CL	;wh_CodeLength
>d23b	cc					.byte $cc
>d23c	63 70 79 2e 23			L1:	.text "cpy.#"	;  name of word as a string, ending at wh_NameLastChar
>d241	65					.byte (("cpy.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d242	b3 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d244	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d245	08					.byte NN	;wh_Flags	dictionary flags
=53697					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d246	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d249					en = *	; remember here
>d244	03					.byte CL	;wh_CodeLength
>d249	c0					.byte $c0
>d24a	63 70 79 2e 7a			L1:	.text "cpy.z"	;  name of word as a string, ending at wh_NameLastChar
>d24f	45					.byte (("cpy.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d250	c1 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d252	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d253	08					.byte NN	;wh_Flags	dictionary flags
=53711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d254	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d257					en = *	; remember here
>d252	03					.byte CL	;wh_CodeLength
>d257	c4					.byte $c4
>d258	64 65 63			L1:	.text "dec"	;  name of word as a string, ending at wh_NameLastChar
>d25b	63					.byte (("dec"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d25c	cf d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d25e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d25f	08					.byte NN	;wh_Flags	dictionary flags
=53723					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d260	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d263					en = *	; remember here
>d25e	03					.byte CL	;wh_CodeLength
>d263	ce					.byte $ce
>d264	64 65 63 2e 61			L1:	.text "dec.a"	;  name of word as a string, ending at wh_NameLastChar
>d269	25					.byte (("dec.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d26a	db d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d26c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d26d	08					.byte NN	;wh_Flags	dictionary flags
=53737					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d26e	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d271					en = *	; remember here
>d26c	03					.byte CL	;wh_CodeLength
>d271	3a					.byte $3a
>d272	64 65 63 2e 78			L1:	.text "dec.x"	;  name of word as a string, ending at wh_NameLastChar
>d277	05					.byte (("dec.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d278	e9 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d27a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d27b	08					.byte NN	;wh_Flags	dictionary flags
=53751					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d27c	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d27f					en = *	; remember here
>d27a	03					.byte CL	;wh_CodeLength
>d27f	de					.byte $de
>d280	64 65 63 2e 7a			L1:	.text "dec.z"	;  name of word as a string, ending at wh_NameLastChar
>d285	45					.byte (("dec.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d286	f7 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d288	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d289	08					.byte NN	;wh_Flags	dictionary flags
=53765					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d28a	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d28d					en = *	; remember here
>d288	03					.byte CL	;wh_CodeLength
>d28d	c6					.byte $c6
>d28e	64 65 63 2e 7a 78		L1:	.text "dec.zx"	;  name of word as a string, ending at wh_NameLastChar
>d294	06					.byte (("dec.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d295	05 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d297	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d298	08					.byte NN	;wh_Flags	dictionary flags
=53780					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d299	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d29c					en = *	; remember here
>d297	03					.byte CL	;wh_CodeLength
>d29c	d6					.byte $d6
>d29d	64 65 78			L1:	.text "dex"	;  name of word as a string, ending at wh_NameLastChar
>d2a0	03					.byte (("dex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2a1	14 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2a3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2a4	08					.byte NN	;wh_Flags	dictionary flags
=53792					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2a5	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2a8					en = *	; remember here
>d2a3	03					.byte CL	;wh_CodeLength
>d2a8	ca					.byte $ca
>d2a9	64 65 79			L1:	.text "dey"	;  name of word as a string, ending at wh_NameLastChar
>d2ac	23					.byte (("dey"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2ad	20 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2af	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2b0	08					.byte NN	;wh_Flags	dictionary flags
=53804					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2b1	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2b4					en = *	; remember here
>d2af	03					.byte CL	;wh_CodeLength
>d2b4	88					.byte $88
>d2b5	65 6f 72			L1:	.text "eor"	;  name of word as a string, ending at wh_NameLastChar
>d2b8	43					.byte (("eor"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2b9	2c d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2bc	08					.byte NN	;wh_Flags	dictionary flags
=53816					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2bd	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2c0					en = *	; remember here
>d2bb	03					.byte CL	;wh_CodeLength
>d2c0	4d					.byte $4d
>d2c1	65 6f 72 2e 23			L1:	.text "eor.#"	;  name of word as a string, ending at wh_NameLastChar
>d2c6	65					.byte (("eor.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2c7	38 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2c9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2ca	08					.byte NN	;wh_Flags	dictionary flags
=53830					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2cb	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2ce					en = *	; remember here
>d2c9	03					.byte CL	;wh_CodeLength
>d2ce	49					.byte $49
>d2cf	65 6f 72 2e 78			L1:	.text "eor.x"	;  name of word as a string, ending at wh_NameLastChar
>d2d4	05					.byte (("eor.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2d5	46 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2d7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2d8	08					.byte NN	;wh_Flags	dictionary flags
=53844					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2d9	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2dc					en = *	; remember here
>d2d7	03					.byte CL	;wh_CodeLength
>d2dc	5d					.byte $5d
>d2dd	65 6f 72 2e 79			L1:	.text "eor.y"	;  name of word as a string, ending at wh_NameLastChar
>d2e2	25					.byte (("eor.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2e3	54 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2e5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2e6	08					.byte NN	;wh_Flags	dictionary flags
=53858					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2e7	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2ea					en = *	; remember here
>d2e5	03					.byte CL	;wh_CodeLength
>d2ea	59					.byte $59
>d2eb	65 6f 72 2e 7a			L1:	.text "eor.z"	;  name of word as a string, ending at wh_NameLastChar
>d2f0	45					.byte (("eor.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2f1	62 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2f4	08					.byte NN	;wh_Flags	dictionary flags
=53872					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2f5	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2f8					en = *	; remember here
>d2f3	03					.byte CL	;wh_CodeLength
>d2f8	45					.byte $45
>d2f9	65 6f 72 2e 7a 69 79		L1:	.text "eor.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d300	27					.byte (("eor.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d301	70 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d303	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d304	08					.byte NN	;wh_Flags	dictionary flags
=53888					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d305	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d308					en = *	; remember here
>d303	03					.byte CL	;wh_CodeLength
>d308	51					.byte $51
>d309	65 6f 72 2e 7a 78		L1:	.text "eor.zx"	;  name of word as a string, ending at wh_NameLastChar
>d30f	06					.byte (("eor.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d310	80 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d312	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d313	08					.byte NN	;wh_Flags	dictionary flags
=53903					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d314	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d317					en = *	; remember here
>d312	03					.byte CL	;wh_CodeLength
>d317	55					.byte $55
>d318	65 6f 72 2e 7a 78 69		L1:	.text "eor.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d31f	27					.byte (("eor.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d320	8f d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d322	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d323	08					.byte NN	;wh_Flags	dictionary flags
=53919					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d324	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d327					en = *	; remember here
>d322	03					.byte CL	;wh_CodeLength
>d327	41					.byte $41
>d328	69 6e 63			L1:	.text "inc"	;  name of word as a string, ending at wh_NameLastChar
>d32b	63					.byte (("inc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d32c	9f d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d32e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d32f	08					.byte NN	;wh_Flags	dictionary flags
=53931					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d330	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d333					en = *	; remember here
>d32e	03					.byte CL	;wh_CodeLength
>d333	ee					.byte $ee
>d334	69 6e 63 2e 61			L1:	.text "inc.a"	;  name of word as a string, ending at wh_NameLastChar
>d339	25					.byte (("inc.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d33a	ab d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d33c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d33d	08					.byte NN	;wh_Flags	dictionary flags
=53945					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d33e	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d341					en = *	; remember here
>d33c	03					.byte CL	;wh_CodeLength
>d341	1a					.byte $1a
>d342	69 6e 63 2e 78			L1:	.text "inc.x"	;  name of word as a string, ending at wh_NameLastChar
>d347	05					.byte (("inc.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d348	b9 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d34a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d34b	08					.byte NN	;wh_Flags	dictionary flags
=53959					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d34c	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d34f					en = *	; remember here
>d34a	03					.byte CL	;wh_CodeLength
>d34f	fe					.byte $fe
>d350	69 6e 63 2e 7a			L1:	.text "inc.z"	;  name of word as a string, ending at wh_NameLastChar
>d355	45					.byte (("inc.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d356	c7 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d358	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d359	08					.byte NN	;wh_Flags	dictionary flags
=53973					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d35a	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d35d					en = *	; remember here
>d358	03					.byte CL	;wh_CodeLength
>d35d	e6					.byte $e6
>d35e	69 6e 63 2e 7a 78		L1:	.text "inc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d364	06					.byte (("inc.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d365	d5 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d367	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d368	08					.byte NN	;wh_Flags	dictionary flags
=53988					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d369	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d36c					en = *	; remember here
>d367	03					.byte CL	;wh_CodeLength
>d36c	f6					.byte $f6
>d36d	69 6e 78			L1:	.text "inx"	;  name of word as a string, ending at wh_NameLastChar
>d370	03					.byte (("inx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d371	e4 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d373	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d374	08					.byte NN	;wh_Flags	dictionary flags
=54000					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d375	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d378					en = *	; remember here
>d373	03					.byte CL	;wh_CodeLength
>d378	e8					.byte $e8
>d379	69 6e 79			L1:	.text "iny"	;  name of word as a string, ending at wh_NameLastChar
>d37c	23					.byte (("iny"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d37d	f0 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d37f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d380	08					.byte NN	;wh_Flags	dictionary flags
=54012					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d381	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d384					en = *	; remember here
>d37f	03					.byte CL	;wh_CodeLength
>d384	c8					.byte $c8
>d385	6a 6d 70			L1:	.text "jmp"	;  name of word as a string, ending at wh_NameLastChar
>d388	03					.byte (("jmp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d389	fc d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d38b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d38c	08					.byte NN	;wh_Flags	dictionary flags
=54024					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d38d	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d390					en = *	; remember here
>d38b	03					.byte CL	;wh_CodeLength
>d390	4c					.byte $4c
>d391	6a 6d 70 2e 69			L1:	.text "jmp.i"	;  name of word as a string, ending at wh_NameLastChar
>d396	25					.byte (("jmp.i"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d397	08 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d399	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d39a	08					.byte NN	;wh_Flags	dictionary flags
=54038					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d39b	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d39e					en = *	; remember here
>d399	03					.byte CL	;wh_CodeLength
>d39e	6c					.byte $6c
>d39f	6a 73 72			L1:	.text "jsr"	;  name of word as a string, ending at wh_NameLastChar
>d3a2	43					.byte (("jsr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3a3	16 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3a5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3a6	08					.byte NN	;wh_Flags	dictionary flags
=54050					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3a7	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3aa					en = *	; remember here
>d3a5	03					.byte CL	;wh_CodeLength
>d3aa	20					.byte $20
>d3ab	6c 64 61			L1:	.text "lda"	;  name of word as a string, ending at wh_NameLastChar
>d3ae	23					.byte (("lda"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3af	22 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3b1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3b2	08					.byte NN	;wh_Flags	dictionary flags
=54062					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3b3	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3b6					en = *	; remember here
>d3b1	03					.byte CL	;wh_CodeLength
>d3b6	ad					.byte $ad
>d3b7	6c 64 61 2e 23			L1:	.text "lda.#"	;  name of word as a string, ending at wh_NameLastChar
>d3bc	65					.byte (("lda.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3bd	2e d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3bf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3c0	08					.byte NN	;wh_Flags	dictionary flags
=54076					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3c1	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3c4					en = *	; remember here
>d3bf	03					.byte CL	;wh_CodeLength
>d3c4	a9					.byte $a9
>d3c5	6c 64 61 2e 78			L1:	.text "lda.x"	;  name of word as a string, ending at wh_NameLastChar
>d3ca	05					.byte (("lda.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3cb	3c d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3ce	08					.byte NN	;wh_Flags	dictionary flags
=54090					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3cf	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3d2					en = *	; remember here
>d3cd	03					.byte CL	;wh_CodeLength
>d3d2	bd					.byte $bd
>d3d3	6c 64 61 2e 79			L1:	.text "lda.y"	;  name of word as a string, ending at wh_NameLastChar
>d3d8	25					.byte (("lda.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3d9	4a d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3dc	08					.byte NN	;wh_Flags	dictionary flags
=54104					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3dd	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3e0					en = *	; remember here
>d3db	03					.byte CL	;wh_CodeLength
>d3e0	b9					.byte $b9
>d3e1	6c 64 61 2e 7a			L1:	.text "lda.z"	;  name of word as a string, ending at wh_NameLastChar
>d3e6	45					.byte (("lda.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3e7	58 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3e9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3ea	08					.byte NN	;wh_Flags	dictionary flags
=54118					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3eb	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3ee					en = *	; remember here
>d3e9	03					.byte CL	;wh_CodeLength
>d3ee	a5					.byte $a5
>d3ef	6c 64 61 2e 7a 69 79		L1:	.text "lda.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d3f6	27					.byte (("lda.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3f7	66 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3f9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3fa	08					.byte NN	;wh_Flags	dictionary flags
=54134					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3fb	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3fe					en = *	; remember here
>d3f9	03					.byte CL	;wh_CodeLength
>d3fe	b1					.byte $b1
>d3ff	6c 64 61 2e 7a 78		L1:	.text "lda.zx"	;  name of word as a string, ending at wh_NameLastChar
>d405	06					.byte (("lda.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d406	76 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d408	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d409	08					.byte NN	;wh_Flags	dictionary flags
=54149					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d40a	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d40d					en = *	; remember here
>d408	03					.byte CL	;wh_CodeLength
>d40d	b5					.byte $b5
>d40e	6c 64 61 2e 7a 78 69		L1:	.text "lda.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d415	27					.byte (("lda.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d416	85 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d418	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d419	08					.byte NN	;wh_Flags	dictionary flags
=54165					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d41a	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d41d					en = *	; remember here
>d418	03					.byte CL	;wh_CodeLength
>d41d	a1					.byte $a1
>d41e	6c 64 78			L1:	.text "ldx"	;  name of word as a string, ending at wh_NameLastChar
>d421	03					.byte (("ldx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d422	95 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d424	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d425	08					.byte NN	;wh_Flags	dictionary flags
=54177					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d426	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d429					en = *	; remember here
>d424	03					.byte CL	;wh_CodeLength
>d429	ae					.byte $ae
>d42a	6c 64 78 2e 23			L1:	.text "ldx.#"	;  name of word as a string, ending at wh_NameLastChar
>d42f	65					.byte (("ldx.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d430	a1 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d432	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d433	08					.byte NN	;wh_Flags	dictionary flags
=54191					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d434	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d437					en = *	; remember here
>d432	03					.byte CL	;wh_CodeLength
>d437	a2					.byte $a2
>d438	6c 64 78 2e 79			L1:	.text "ldx.y"	;  name of word as a string, ending at wh_NameLastChar
>d43d	25					.byte (("ldx.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d43e	af d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d440	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d441	08					.byte NN	;wh_Flags	dictionary flags
=54205					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d442	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d445					en = *	; remember here
>d440	03					.byte CL	;wh_CodeLength
>d445	be					.byte $be
>d446	6c 64 78 2e 7a			L1:	.text "ldx.z"	;  name of word as a string, ending at wh_NameLastChar
>d44b	45					.byte (("ldx.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d44c	bd d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d44e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d44f	08					.byte NN	;wh_Flags	dictionary flags
=54219					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d450	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d453					en = *	; remember here
>d44e	03					.byte CL	;wh_CodeLength
>d453	a6					.byte $a6
>d454	6c 64 78 2e 7a 79		L1:	.text "ldx.zy"	;  name of word as a string, ending at wh_NameLastChar
>d45a	26					.byte (("ldx.zy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d45b	cb d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d45d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d45e	08					.byte NN	;wh_Flags	dictionary flags
=54234					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d45f	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d462					en = *	; remember here
>d45d	03					.byte CL	;wh_CodeLength
>d462	b6					.byte $b6
>d463	6c 64 79			L1:	.text "ldy"	;  name of word as a string, ending at wh_NameLastChar
>d466	23					.byte (("ldy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d467	da d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d469	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d46a	08					.byte NN	;wh_Flags	dictionary flags
=54246					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d46b	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d46e					en = *	; remember here
>d469	03					.byte CL	;wh_CodeLength
>d46e	ac					.byte $ac
>d46f	6c 64 79 2e 23			L1:	.text "ldy.#"	;  name of word as a string, ending at wh_NameLastChar
>d474	65					.byte (("ldy.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d475	e6 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d477	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d478	08					.byte NN	;wh_Flags	dictionary flags
=54260					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d479	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d47c					en = *	; remember here
>d477	03					.byte CL	;wh_CodeLength
>d47c	a0					.byte $a0
>d47d	6c 64 79 2e 78			L1:	.text "ldy.x"	;  name of word as a string, ending at wh_NameLastChar
>d482	05					.byte (("ldy.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d483	f4 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d485	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d486	08					.byte NN	;wh_Flags	dictionary flags
=54274					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d487	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d48a					en = *	; remember here
>d485	03					.byte CL	;wh_CodeLength
>d48a	bc					.byte $bc
>d48b	6c 64 79 2e 7a			L1:	.text "ldy.z"	;  name of word as a string, ending at wh_NameLastChar
>d490	45					.byte (("ldy.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d491	02 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d493	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d494	08					.byte NN	;wh_Flags	dictionary flags
=54288					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d495	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d498					en = *	; remember here
>d493	03					.byte CL	;wh_CodeLength
>d498	a4					.byte $a4
>d499	6c 64 79 2e 7a 78		L1:	.text "ldy.zx"	;  name of word as a string, ending at wh_NameLastChar
>d49f	06					.byte (("ldy.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4a0	10 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4a3	08					.byte NN	;wh_Flags	dictionary flags
=54303					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4a4	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4a7					en = *	; remember here
>d4a2	03					.byte CL	;wh_CodeLength
>d4a7	b4					.byte $b4
>d4a8	6c 73 72			L1:	.text "lsr"	;  name of word as a string, ending at wh_NameLastChar
>d4ab	43					.byte (("lsr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4ac	1f d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4ae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4af	08					.byte NN	;wh_Flags	dictionary flags
=54315					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4b0	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4b3					en = *	; remember here
>d4ae	03					.byte CL	;wh_CodeLength
>d4b3	4e					.byte $4e
>d4b4	6c 73 72 2e 61			L1:	.text "lsr.a"	;  name of word as a string, ending at wh_NameLastChar
>d4b9	25					.byte (("lsr.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4ba	2b d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4bd	08					.byte NN	;wh_Flags	dictionary flags
=54329					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4be	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4c1					en = *	; remember here
>d4bc	03					.byte CL	;wh_CodeLength
>d4c1	4a					.byte $4a
>d4c2	6c 73 72 2e 78			L1:	.text "lsr.x"	;  name of word as a string, ending at wh_NameLastChar
>d4c7	05					.byte (("lsr.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4c8	39 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4ca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4cb	08					.byte NN	;wh_Flags	dictionary flags
=54343					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4cc	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4cf					en = *	; remember here
>d4ca	03					.byte CL	;wh_CodeLength
>d4cf	5e					.byte $5e
>d4d0	6c 73 72 2e 7a			L1:	.text "lsr.z"	;  name of word as a string, ending at wh_NameLastChar
>d4d5	45					.byte (("lsr.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4d6	47 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4d8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4d9	08					.byte NN	;wh_Flags	dictionary flags
=54357					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4da	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4dd					en = *	; remember here
>d4d8	03					.byte CL	;wh_CodeLength
>d4dd	46					.byte $46
>d4de	6c 73 72 2e 7a 78		L1:	.text "lsr.zx"	;  name of word as a string, ending at wh_NameLastChar
>d4e4	06					.byte (("lsr.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4e5	55 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4e8	08					.byte NN	;wh_Flags	dictionary flags
=54372					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4e9	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4ec					en = *	; remember here
>d4e7	03					.byte CL	;wh_CodeLength
>d4ec	56					.byte $56
>d4ed	6e 6f 70			L1:	.text "nop"	;  name of word as a string, ending at wh_NameLastChar
>d4f0	03					.byte (("nop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4f1	64 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4f4	08					.byte NN	;wh_Flags	dictionary flags
=54384					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4f5	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4f8					en = *	; remember here
>d4f3	03					.byte CL	;wh_CodeLength
>d4f8	ea					.byte $ea
>d4f9	6f 72 61			L1:	.text "ora"	;  name of word as a string, ending at wh_NameLastChar
>d4fc	23					.byte (("ora"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4fd	70 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4ff	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d500	08					.byte NN	;wh_Flags	dictionary flags
=54396					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d501	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d504					en = *	; remember here
>d4ff	03					.byte CL	;wh_CodeLength
>d504	0d					.byte $0d
>d505	6f 72 61 2e 23			L1:	.text "ora.#"	;  name of word as a string, ending at wh_NameLastChar
>d50a	65					.byte (("ora.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d50b	7c d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d50d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d50e	08					.byte NN	;wh_Flags	dictionary flags
=54410					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d50f	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d512					en = *	; remember here
>d50d	03					.byte CL	;wh_CodeLength
>d512	09					.byte $09
>d513	6f 72 61 2e 78			L1:	.text "ora.x"	;  name of word as a string, ending at wh_NameLastChar
>d518	05					.byte (("ora.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d519	8a d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d51b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d51c	08					.byte NN	;wh_Flags	dictionary flags
=54424					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d51d	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d520					en = *	; remember here
>d51b	03					.byte CL	;wh_CodeLength
>d520	1d					.byte $1d
>d521	6f 72 61 2e 79			L1:	.text "ora.y"	;  name of word as a string, ending at wh_NameLastChar
>d526	25					.byte (("ora.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d527	98 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d529	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d52a	08					.byte NN	;wh_Flags	dictionary flags
=54438					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d52b	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d52e					en = *	; remember here
>d529	03					.byte CL	;wh_CodeLength
>d52e	19					.byte $19
>d52f	6f 72 61 2e 7a			L1:	.text "ora.z"	;  name of word as a string, ending at wh_NameLastChar
>d534	45					.byte (("ora.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d535	a6 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d537	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d538	08					.byte NN	;wh_Flags	dictionary flags
=54452					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d539	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d53c					en = *	; remember here
>d537	03					.byte CL	;wh_CodeLength
>d53c	05					.byte $05
>d53d	6f 72 61 2e 7a 69 79		L1:	.text "ora.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d544	27					.byte (("ora.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d545	b4 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d547	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d548	08					.byte NN	;wh_Flags	dictionary flags
=54468					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d549	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d54c					en = *	; remember here
>d547	03					.byte CL	;wh_CodeLength
>d54c	11					.byte $11
>d54d	6f 72 61 2e 7a 78		L1:	.text "ora.zx"	;  name of word as a string, ending at wh_NameLastChar
>d553	06					.byte (("ora.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d554	c4 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d556	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d557	08					.byte NN	;wh_Flags	dictionary flags
=54483					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d558	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d55b					en = *	; remember here
>d556	03					.byte CL	;wh_CodeLength
>d55b	15					.byte $15
>d55c	6f 72 61 2e 7a 78 69		L1:	.text "ora.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d563	27					.byte (("ora.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d564	d3 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d566	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d567	08					.byte NN	;wh_Flags	dictionary flags
=54499					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d568	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d56b					en = *	; remember here
>d566	03					.byte CL	;wh_CodeLength
>d56b	01					.byte $01
>d56c	70 68 61			L1:	.text "pha"	;  name of word as a string, ending at wh_NameLastChar
>d56f	23					.byte (("pha"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d570	e3 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d572	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d573	08					.byte NN	;wh_Flags	dictionary flags
=54511					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d574	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d577					en = *	; remember here
>d572	03					.byte CL	;wh_CodeLength
>d577	48					.byte $48
>d578	70 68 70			L1:	.text "php"	;  name of word as a string, ending at wh_NameLastChar
>d57b	03					.byte (("php"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d57c	ef d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d57e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d57f	08					.byte NN	;wh_Flags	dictionary flags
=54523					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d580	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d583					en = *	; remember here
>d57e	03					.byte CL	;wh_CodeLength
>d583	08					.byte $08
>d584	70 6c 61			L1:	.text "pla"	;  name of word as a string, ending at wh_NameLastChar
>d587	23					.byte (("pla"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d588	fb d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d58a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d58b	08					.byte NN	;wh_Flags	dictionary flags
=54535					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d58c	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d58f					en = *	; remember here
>d58a	03					.byte CL	;wh_CodeLength
>d58f	68					.byte $68
>d590	70 6c 70			L1:	.text "plp"	;  name of word as a string, ending at wh_NameLastChar
>d593	03					.byte (("plp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d594	07 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d596	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d597	08					.byte NN	;wh_Flags	dictionary flags
=54547					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d598	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d59b					en = *	; remember here
>d596	03					.byte CL	;wh_CodeLength
>d59b	28					.byte $28
>d59c	72 6f 6c			L1:	.text "rol"	;  name of word as a string, ending at wh_NameLastChar
>d59f	83					.byte (("rol"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5a0	13 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5a3	08					.byte NN	;wh_Flags	dictionary flags
=54559					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5a4	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5a7					en = *	; remember here
>d5a2	03					.byte CL	;wh_CodeLength
>d5a7	2e					.byte $2e
>d5a8	72 6f 6c 2e 61			L1:	.text "rol.a"	;  name of word as a string, ending at wh_NameLastChar
>d5ad	25					.byte (("rol.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5ae	1f d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5b0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5b1	08					.byte NN	;wh_Flags	dictionary flags
=54573					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5b2	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5b5					en = *	; remember here
>d5b0	03					.byte CL	;wh_CodeLength
>d5b5	2a					.byte $2a
>d5b6	72 6f 6c 2e 78			L1:	.text "rol.x"	;  name of word as a string, ending at wh_NameLastChar
>d5bb	05					.byte (("rol.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5bc	2d d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5bf	08					.byte NN	;wh_Flags	dictionary flags
=54587					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5c0	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5c3					en = *	; remember here
>d5be	03					.byte CL	;wh_CodeLength
>d5c3	3e					.byte $3e
>d5c4	72 6f 6c 2e 7a			L1:	.text "rol.z"	;  name of word as a string, ending at wh_NameLastChar
>d5c9	45					.byte (("rol.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5ca	3b d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5cd	08					.byte NN	;wh_Flags	dictionary flags
=54601					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5ce	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5d1					en = *	; remember here
>d5cc	03					.byte CL	;wh_CodeLength
>d5d1	26					.byte $26
>d5d2	72 6f 6c 2e 7a 78		L1:	.text "rol.zx"	;  name of word as a string, ending at wh_NameLastChar
>d5d8	06					.byte (("rol.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5d9	49 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5dc	08					.byte NN	;wh_Flags	dictionary flags
=54616					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5dd	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5e0					en = *	; remember here
>d5db	03					.byte CL	;wh_CodeLength
>d5e0	36					.byte $36
>d5e1	72 6f 72			L1:	.text "ror"	;  name of word as a string, ending at wh_NameLastChar
>d5e4	43					.byte (("ror"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5e5	58 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5e8	08					.byte NN	;wh_Flags	dictionary flags
=54628					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5e9	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5ec					en = *	; remember here
>d5e7	03					.byte CL	;wh_CodeLength
>d5ec	6e					.byte $6e
>d5ed	72 6f 72 2e 61			L1:	.text "ror.a"	;  name of word as a string, ending at wh_NameLastChar
>d5f2	25					.byte (("ror.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5f3	64 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5f5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5f6	08					.byte NN	;wh_Flags	dictionary flags
=54642					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5f7	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5fa					en = *	; remember here
>d5f5	03					.byte CL	;wh_CodeLength
>d5fa	6a					.byte $6a
>d5fb	72 6f 72 2e 78			L1:	.text "ror.x"	;  name of word as a string, ending at wh_NameLastChar
>d600	05					.byte (("ror.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d601	72 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d603	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d604	08					.byte NN	;wh_Flags	dictionary flags
=54656					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d605	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d608					en = *	; remember here
>d603	03					.byte CL	;wh_CodeLength
>d608	7e					.byte $7e
>d609	72 6f 72 2e 7a			L1:	.text "ror.z"	;  name of word as a string, ending at wh_NameLastChar
>d60e	45					.byte (("ror.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d60f	80 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d611	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d612	08					.byte NN	;wh_Flags	dictionary flags
=54670					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d613	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d616					en = *	; remember here
>d611	03					.byte CL	;wh_CodeLength
>d616	66					.byte $66
>d617	72 6f 72 2e 7a 78		L1:	.text "ror.zx"	;  name of word as a string, ending at wh_NameLastChar
>d61d	06					.byte (("ror.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d61e	8e d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d620	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d621	08					.byte NN	;wh_Flags	dictionary flags
=54685					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d622	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d625					en = *	; remember here
>d620	03					.byte CL	;wh_CodeLength
>d625	76					.byte $76
>d626	72 74 69			L1:	.text "rti"	;  name of word as a string, ending at wh_NameLastChar
>d629	23					.byte (("rti"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d62a	9d d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d62c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d62d	08					.byte NN	;wh_Flags	dictionary flags
=54697					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d62e	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d631					en = *	; remember here
>d62c	03					.byte CL	;wh_CodeLength
>d631	40					.byte $40
>d632	72 74 73			L1:	.text "rts"	;  name of word as a string, ending at wh_NameLastChar
>d635	63					.byte (("rts"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d636	a9 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d638	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d639	08					.byte NN	;wh_Flags	dictionary flags
=54709					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d63a	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d63d					en = *	; remember here
>d638	03					.byte CL	;wh_CodeLength
>d63d	60					.byte $60
>d63e	73 62 63			L1:	.text "sbc"	;  name of word as a string, ending at wh_NameLastChar
>d641	63					.byte (("sbc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d642	b5 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d644	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d645	08					.byte NN	;wh_Flags	dictionary flags
=54721					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d646	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d649					en = *	; remember here
>d644	03					.byte CL	;wh_CodeLength
>d649	ed					.byte $ed
>d64a	73 62 63 2e 23			L1:	.text "sbc.#"	;  name of word as a string, ending at wh_NameLastChar
>d64f	65					.byte (("sbc.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d650	c1 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d652	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d653	08					.byte NN	;wh_Flags	dictionary flags
=54735					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d654	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d657					en = *	; remember here
>d652	03					.byte CL	;wh_CodeLength
>d657	e9					.byte $e9
>d658	73 62 63 2e 78			L1:	.text "sbc.x"	;  name of word as a string, ending at wh_NameLastChar
>d65d	05					.byte (("sbc.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d65e	cf d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d660	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d661	08					.byte NN	;wh_Flags	dictionary flags
=54749					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d662	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d665					en = *	; remember here
>d660	03					.byte CL	;wh_CodeLength
>d665	fd					.byte $fd
>d666	73 62 63 2e 79			L1:	.text "sbc.y"	;  name of word as a string, ending at wh_NameLastChar
>d66b	25					.byte (("sbc.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d66c	dd d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d66e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d66f	08					.byte NN	;wh_Flags	dictionary flags
=54763					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d670	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d673					en = *	; remember here
>d66e	03					.byte CL	;wh_CodeLength
>d673	f9					.byte $f9
>d674	73 62 63 2e 7a			L1:	.text "sbc.z"	;  name of word as a string, ending at wh_NameLastChar
>d679	45					.byte (("sbc.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d67a	eb d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d67c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d67d	08					.byte NN	;wh_Flags	dictionary flags
=54777					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d67e	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d681					en = *	; remember here
>d67c	03					.byte CL	;wh_CodeLength
>d681	e5					.byte $e5
>d682	73 62 63 2e 7a 69 79		L1:	.text "sbc.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d689	27					.byte (("sbc.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d68a	f9 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d68c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d68d	08					.byte NN	;wh_Flags	dictionary flags
=54793					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d68e	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d691					en = *	; remember here
>d68c	03					.byte CL	;wh_CodeLength
>d691	f1					.byte $f1
>d692	73 62 63 2e 7a 78		L1:	.text "sbc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d698	06					.byte (("sbc.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d699	09 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d69b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d69c	08					.byte NN	;wh_Flags	dictionary flags
=54808					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d69d	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6a0					en = *	; remember here
>d69b	03					.byte CL	;wh_CodeLength
>d6a0	f5					.byte $f5
>d6a1	73 62 63 2e 7a 78 69		L1:	.text "sbc.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d6a8	27					.byte (("sbc.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6a9	18 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6ac	08					.byte NN	;wh_Flags	dictionary flags
=54824					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6ad	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6b0					en = *	; remember here
>d6ab	03					.byte CL	;wh_CodeLength
>d6b0	e1					.byte $e1
>d6b1	73 65 63			L1:	.text "sec"	;  name of word as a string, ending at wh_NameLastChar
>d6b4	63					.byte (("sec"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6b5	28 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6b8	08					.byte NN	;wh_Flags	dictionary flags
=54836					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6b9	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6bc					en = *	; remember here
>d6b7	03					.byte CL	;wh_CodeLength
>d6bc	38					.byte $38
>d6bd	73 65 64			L1:	.text "sed"	;  name of word as a string, ending at wh_NameLastChar
>d6c0	83					.byte (("sed"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6c1	34 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6c4	08					.byte NN	;wh_Flags	dictionary flags
=54848					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6c5	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6c8					en = *	; remember here
>d6c3	03					.byte CL	;wh_CodeLength
>d6c8	f8					.byte $f8
>d6c9	73 65 69			L1:	.text "sei"	;  name of word as a string, ending at wh_NameLastChar
>d6cc	23					.byte (("sei"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6cd	40 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6cf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6d0	08					.byte NN	;wh_Flags	dictionary flags
=54860					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6d1	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6d4					en = *	; remember here
>d6cf	03					.byte CL	;wh_CodeLength
>d6d4	78					.byte $78
>d6d5	73 74 61			L1:	.text "sta"	;  name of word as a string, ending at wh_NameLastChar
>d6d8	23					.byte (("sta"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6d9	4c d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6dc	08					.byte NN	;wh_Flags	dictionary flags
=54872					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6dd	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6e0					en = *	; remember here
>d6db	03					.byte CL	;wh_CodeLength
>d6e0	8d					.byte $8d
>d6e1	73 74 61 2e 78			L1:	.text "sta.x"	;  name of word as a string, ending at wh_NameLastChar
>d6e6	05					.byte (("sta.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6e7	58 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6e9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6ea	08					.byte NN	;wh_Flags	dictionary flags
=54886					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6eb	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6ee					en = *	; remember here
>d6e9	03					.byte CL	;wh_CodeLength
>d6ee	9d					.byte $9d
>d6ef	73 74 61 2e 79			L1:	.text "sta.y"	;  name of word as a string, ending at wh_NameLastChar
>d6f4	25					.byte (("sta.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6f5	66 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6f8	08					.byte NN	;wh_Flags	dictionary flags
=54900					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6f9	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6fc					en = *	; remember here
>d6f7	03					.byte CL	;wh_CodeLength
>d6fc	99					.byte $99
>d6fd	73 74 61 2e 7a			L1:	.text "sta.z"	;  name of word as a string, ending at wh_NameLastChar
>d702	45					.byte (("sta.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d703	74 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d705	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d706	08					.byte NN	;wh_Flags	dictionary flags
=54914					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d707	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d70a					en = *	; remember here
>d705	03					.byte CL	;wh_CodeLength
>d70a	85					.byte $85
>d70b	73 74 61 2e 7a 69 79		L1:	.text "sta.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d712	27					.byte (("sta.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d713	82 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d715	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d716	08					.byte NN	;wh_Flags	dictionary flags
=54930					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d717	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d71a					en = *	; remember here
>d715	03					.byte CL	;wh_CodeLength
>d71a	91					.byte $91
>d71b	73 74 61 2e 7a 78		L1:	.text "sta.zx"	;  name of word as a string, ending at wh_NameLastChar
>d721	06					.byte (("sta.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d722	92 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d724	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d725	08					.byte NN	;wh_Flags	dictionary flags
=54945					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d726	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d729					en = *	; remember here
>d724	03					.byte CL	;wh_CodeLength
>d729	95					.byte $95
>d72a	73 74 61 2e 7a 78 69		L1:	.text "sta.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d731	27					.byte (("sta.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d732	a1 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d734	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d735	08					.byte NN	;wh_Flags	dictionary flags
=54961					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d736	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d739					en = *	; remember here
>d734	03					.byte CL	;wh_CodeLength
>d739	81					.byte $81
>d73a	73 74 78			L1:	.text "stx"	;  name of word as a string, ending at wh_NameLastChar
>d73d	03					.byte (("stx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d73e	b1 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d740	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d741	08					.byte NN	;wh_Flags	dictionary flags
=54973					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d742	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d745					en = *	; remember here
>d740	03					.byte CL	;wh_CodeLength
>d745	8e					.byte $8e
>d746	73 74 78 2e 7a			L1:	.text "stx.z"	;  name of word as a string, ending at wh_NameLastChar
>d74b	45					.byte (("stx.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d74c	bd d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d74e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d74f	08					.byte NN	;wh_Flags	dictionary flags
=54987					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d750	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d753					en = *	; remember here
>d74e	03					.byte CL	;wh_CodeLength
>d753	86					.byte $86
>d754	73 74 78 2e 7a 79		L1:	.text "stx.zy"	;  name of word as a string, ending at wh_NameLastChar
>d75a	26					.byte (("stx.zy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d75b	cb d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d75d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d75e	08					.byte NN	;wh_Flags	dictionary flags
=55002					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d75f	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d762					en = *	; remember here
>d75d	03					.byte CL	;wh_CodeLength
>d762	96					.byte $96
>d763	73 74 79			L1:	.text "sty"	;  name of word as a string, ending at wh_NameLastChar
>d766	23					.byte (("sty"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d767	da d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d769	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d76a	08					.byte NN	;wh_Flags	dictionary flags
=55014					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d76b	20 a8 cf	jsr $cfa8		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d76e					en = *	; remember here
>d769	03					.byte CL	;wh_CodeLength
>d76e	8c					.byte $8c
>d76f	73 74 79 2e 7a			L1:	.text "sty.z"	;  name of word as a string, ending at wh_NameLastChar
>d774	45					.byte (("sty.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d775	e6 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d777	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d778	08					.byte NN	;wh_Flags	dictionary flags
=55028					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d779	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d77c					en = *	; remember here
>d777	03					.byte CL	;wh_CodeLength
>d77c	84					.byte $84
>d77d	73 74 79 2e 7a 78		L1:	.text "sty.zx"	;  name of word as a string, ending at wh_NameLastChar
>d783	06					.byte (("sty.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d784	f4 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d786	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d787	08					.byte NN	;wh_Flags	dictionary flags
=55043					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d788	20 92 cf	jsr $cf92		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d78b					en = *	; remember here
>d786	03					.byte CL	;wh_CodeLength
>d78b	94					.byte $94
>d78c	74 61 78			L1:	.text "tax"	;  name of word as a string, ending at wh_NameLastChar
>d78f	03					.byte (("tax"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d790	03 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d792	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d793	08					.byte NN	;wh_Flags	dictionary flags
=55055					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d794	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d797					en = *	; remember here
>d792	03					.byte CL	;wh_CodeLength
>d797	aa					.byte $aa
>d798	74 61 79			L1:	.text "tay"	;  name of word as a string, ending at wh_NameLastChar
>d79b	23					.byte (("tay"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d79c	0f d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d79e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d79f	08					.byte NN	;wh_Flags	dictionary flags
=55067					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7a0	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7a3					en = *	; remember here
>d79e	03					.byte CL	;wh_CodeLength
>d7a3	a8					.byte $a8
>d7a4	74 73 78			L1:	.text "tsx"	;  name of word as a string, ending at wh_NameLastChar
>d7a7	03					.byte (("tsx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7a8	1b d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7aa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7ab	08					.byte NN	;wh_Flags	dictionary flags
=55079					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7ac	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7af					en = *	; remember here
>d7aa	03					.byte CL	;wh_CodeLength
>d7af	ba					.byte $BA
>d7b0	74 78 61			L1:	.text "txa"	;  name of word as a string, ending at wh_NameLastChar
>d7b3	23					.byte (("txa"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7b4	27 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7b6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7b7	08					.byte NN	;wh_Flags	dictionary flags
=55091					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7b8	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7bb					en = *	; remember here
>d7b6	03					.byte CL	;wh_CodeLength
>d7bb	8a					.byte $8a
>d7bc	74 78 73			L1:	.text "txs"	;  name of word as a string, ending at wh_NameLastChar
>d7bf	63					.byte (("txs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7c0	33 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7c3	08					.byte NN	;wh_Flags	dictionary flags
=55103					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7c4	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7c7					en = *	; remember here
>d7c2	03					.byte CL	;wh_CodeLength
>d7c7	9a					.byte $9a
>d7c8	74 79 61			L1:	.text "tya"	;  name of word as a string, ending at wh_NameLastChar
>d7cb	23					.byte (("tya"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7cc	3f d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7cf	08					.byte NN	;wh_Flags	dictionary flags
=55115					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7d0	20 b1 cf	jsr $cfb1		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7d3					en = *	; remember here
>d7ce	03					.byte CL	;wh_CodeLength
>d7d3	98					.byte $98
=55115					asm_table = WordListLink ; head of instruction word list for disassembler
>d7d4	70 75 73 68 2d 61		L1:	.text "push-a"	;  name of word as a string, ending at wh_NameLastChar
>d7da	26					.byte (("push-a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7db	4b d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7de	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55130					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7df	a9 96		lda #$96			lda #<PushZA
.d7e1	a0 b7		ldy #$b7			ldy #>PushZA
.d7e3	4c ce cc	jmp $ccce			jmp Jsr_Comma_YA
=7					CL	.var *-(WordListLink+wh_Xt)
=$d7e6					en = *	; remember here
>d7dd	07					.byte CL	;wh_CodeLength
>d7e6	2d 2d 3e			L1:	.text "-->"	;  name of word as a string, ending at wh_NameLastChar
>d7e9	c3					.byte (("-->"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7ea	5a d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7ec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7ed	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55145					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7ee	4c b2 c9	jmp $c9b2			jmp Here
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7f1					en = *	; remember here
>d7ec	03					.byte CL	;wh_CodeLength
>d7f1	3c 6a				L1:	.text "<j"	;  name of word as a string, ending at wh_NameLastChar
>d7f3	42					.byte (("<j"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7f4	69 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7f6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7f7	04					.byte IM	;wh_Flags	dictionary flags
=55155					WordListLink ::= *-wh_xt ; remember the nt of this word for later
=0					CL	.var *-(WordListLink+wh_Xt)
=$d7f8					en = *	; remember here
>d7f6	00					.byte CL	;wh_CodeLength
.d7f8	60		rts				rts
>d7f9	3c 62				L1:	.text "<b"	;  name of word as a string, ending at wh_NameLastChar
>d7fb	42					.byte (("<b"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7fc	73 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7ff	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55163					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d800					asm_back_branch:
.d800	20 b2 c9	jsr $c9b2			jsr Here		; ( addr-l addr-h )
.d803	20 53 cb	jsr $cb53			jsr Minus		; ( offset )
.d806	a9 fe		lda #$fe			lda #$fe
.d808	4c d5 c9	jmp $c9d5			jmp Minus_A
=11					CL	.var *-(WordListLink+wh_Xt)
=$d80b					en = *	; remember here
>d7fe	0b					.byte CL	;wh_CodeLength
>d80b	44 69 73 41 73 6d		L1:	.text "DisAsm"	;  name of word as a string, ending at wh_NameLastChar
>d811	a6					.byte (("DisAsm"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d812	7b d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d814	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d815	08					.byte NN	;wh_Flags	dictionary flags
=55185					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d816					DisAsm:
.d816	20 e8 c3	jsr $c3e8			jsr Bounds		; ( addr_end addr )
.d819					_instr:
.d819	20 d9 b3	jsr $b3d9			jsr underflow_2
.d81c	b5 24		lda $24,x			lda DStack+0,x		; addr >= addr_end?
.d81e	d5 26		cmp $26,x			cmp DStack+2,x
.d820	b5 25		lda $25,x			lda DStack+1,x
.d822	f5 27		sbc $27,x			sbc DStack+3,x
.d824	90 03		bcc $d829			bcc +
.d826	4c b1 c4	jmp $c4b1			jmp Two_drop		; discard parms & return
.d829					+
.d829	20 d7 aa	jsr $aad7			jsr CR			; new line
.d82c	20 f0 ce	jsr $cef0			jsr Dup			; print address
.d82f	20 6c a8	jsr $a86c			jsr Dot_Hex
.d832	20 6b cd	jsr $cd6b			jsr Space
.d835	a1 24		lda ($24,x)			lda (DStack+0,x)	; print opcode byte
.d837	20 78 d9	jsr $d978			jsr _print_a
.d83a	a1 24		lda ($24,x)			lda (DStack+0,x)	; save opcode
.d83c	85 16		sta $16				sta tmp2
.d83e	20 e6 c9	jsr $c9e6			jsr One_plus
.d841	a9 4b		lda #$4b			lda #<asm_table		; for each asm opcode word
.d843	a0 d7		ldy #$d7			ldy #>asm_table
.d845	85 14		sta $14				sta tmp1+0
.d847	84 15		sty $15				sty tmp1+1
.d849	d0 0f		bne $d85a			bne _WTest
.d84b	a0 82		ldy #$82	_WNext:		ldy #wh_WordListLink+1	;   next entry
.d84d	b1 14		lda ($14),y			lda (tmp1),y
.d84f	f0 2e		beq $d87f			beq _unknown
.d851	48		pha				pha
.d852	88		dey				dey
.d853	b1 14		lda ($14),y			lda (tmp1),y
.d855	85 14		sta $14				sta tmp1+0
.d857	68		pla				pla
.d858	85 15		sta $15				sta tmp1+1
.d85a	a0 88		ldy #$88	_WTest:		ldy #wh_Xt+3		;   opcode match?
.d85c	b1 14		lda ($14),y			lda (tmp1),y
.d85e	c5 16		cmp $16				cmp tmp2
.d860	d0 e9		bne $d84b			bne _WNext
.d862	a5 16		lda $16				lda tmp2		; save opcode
.d864	48		pha				pha
.d865	a5 15		lda $15				lda tmp1+1		; save its nt
.d867	48		pha				pha
.d868	a5 14		lda $14				lda tmp1+0
.d86a	48		pha				pha
.d86b	a0 86		ldy #$86			ldy #wh_xt+1		; get processor routine addr lo byte from JSR
.d86d	b1 14		lda ($14),y			lda (tmp1),y
.d86f	c9 b1		cmp #$b1			cmp #<asm_0		; goto disasm processor
.d871	f0 17		beq $d88a			beq _c0
.d873	c9 92		cmp #$92			cmp #<asm_1
.d875	f0 49		beq $d8c0			beq _c1
.d877	c9 a8		cmp #$a8			cmp #<asm_2
.d879	f0 61		beq $d8dc			beq _c2
.d87b	c9 72		cmp #$72			cmp #<asm_r
.d87d	f0 18		beq $d897			beq _cr
.d87f					_unknown:
.d87f	20 59 d9	jsr $d959			jsr _tab		; to source area
.d882	a9 3f		lda #$3f			lda #'?'
.d884	20 5e cd	jsr $cd5e			jsr Emit_A
.d887	4c 19 d8	jmp $d819			jmp _instr
.d88a					_c0:
.d88a	20 59 d9	jsr $d959			jsr _tab		; to source area
.d88d	68		pla				pla			; get opcode word nt
.d88e	a8		tay				tay
.d88f	68		pla				pla
.d890	20 5e d9	jsr $d95e			jsr _print_opcode
.d893	68		pla				pla			; discard opcode
.d894	4c 19 d8	jmp $d819			jmp _instr
.d897					_cr:
.d897	20 6f d9	jsr $d96f			jsr _get_byte		; get displacement byte
.d89a	a0 00		ldy #$00			ldy #0			; sign extend displacement
.d89c	09 00		ora #$00			ora #0
.d89e	10 01		bpl $d8a1			bpl +
.d8a0	88		dey				dey
.d8a1	20 54 b7	jsr $b754	+		jsr PushYA
.d8a4	20 f0 ce	jsr $cef0			jsr Dup			; save for TypeSymbol
.d8a7	20 59 d9	jsr $d959			jsr _tab		; to source area
.d8aa	20 9f cb	jsr $cb9f			jsr U_Dot		; print dest address
.d8ad	68		pla				pla			; get opcode word nt
.d8ae	a8		tay				tay
.d8af	68		pla				pla
.d8b0	20 5e d9	jsr $d95e			jsr _print_opcode
.d8b3	68		pla				pla			; discard opcode
.d8b4	20 c7 ce	jsr $cec7			jsr Over		; calc dest addr
.d8b7	20 3a cb	jsr $cb3a			jsr Plus
.d8ba	20 9e 81	jsr $819e			jsr TypeSymbol		; print dest addr symbolic
.d8bd	4c 19 d8	jmp $d819			jmp _instr
.d8c0					_c1:
.d8c0	20 6f d9	jsr $d96f			jsr _get_byte		; get operand
.d8c3	20 96 b7	jsr $b796			jsr PushZA
.d8c6	20 59 d9	jsr $d959			jsr _tab		; to source area
.d8c9	20 f0 ce	jsr $cef0			jsr Dup
.d8cc	20 9f cb	jsr $cb9f			jsr U_Dot		; print operand
.d8cf	68		pla				pla			; get opcode word nt
.d8d0	a8		tay				tay
.d8d1	68		pla				pla
.d8d2	20 5e d9	jsr $d95e			jsr _print_opcode
.d8d5	68		pla				pla			; discard opcode
.d8d6	20 9e 81	jsr $819e			jsr TypeSymbol
.d8d9	4c 19 d8	jmp $d819			jmp _instr
.d8dc					_c2:
.d8dc	20 6f d9	jsr $d96f			jsr _get_byte		; get operand lo byte
.d8df	48		pha				pha
.d8e0	20 6f d9	jsr $d96f			jsr _get_byte		; get operand hi byte
.d8e3	ca		dex				dex			; push operand bytes
.d8e4	ca		dex				dex
.d8e5	95 25		sta $25,x			sta DStack+1,x
.d8e7	68		pla				pla
.d8e8	95 24		sta $24,x			sta DStack+0,x
.d8ea	20 59 d9	jsr $d959			jsr _tab		; to source area
.d8ed	20 f0 ce	jsr $cef0			jsr Dup
.d8f0	20 9f cb	jsr $cb9f			jsr U_Dot		; print operand
.d8f3	68		pla				pla			; AY= opcode word nt
.d8f4	a8		tay				tay
.d8f5	68		pla				pla
.d8f6	20 5e d9	jsr $d95e			jsr _print_opcode
.d8f9	20 f0 ce	jsr $cef0			jsr Dup
.d8fc	20 9e 81	jsr $819e			jsr TypeSymbol		; print operand as symbol
.d8ff	68		pla				pla			; get opcode
.d900	c9 20		cmp #$20			cmp #$20		;  JSR
.d902	f0 09		beq $d90d			beq _jsr
.d904	e8		inx		_jdrop:		inx			; Drop operand
.d905	e8		inx				inx
.d906	4c 19 d8	jmp $d819			jmp _instr		; ( addr_end addr )
.d909	e8		inx		_2drop:		inx			; Drop jsr_nt
.d90a	e8		inx				inx
.d90b	d0 f7		bne $d904			bne _jdrop
.d90d					_jsr:
.d90d	20 9a b3	jsr $b39a			jsr PopYA
.d910	c9 75		cmp #$75			cmp #<sliteral_runtime	; string literal?
.d912	d0 42		bne $d956			bne _not_sliteral
.d914	c0 b8		cpy #$b8			cpy #>sliteral_runtime
.d916	d0 3e		bne $d956			bne _not_sliteral
.d918	20 d7 aa	jsr $aad7			jsr CR
.d91b	20 f0 ce	jsr $cef0			jsr Dup			; ( addr_end addr addr )
.d91e	20 6c a8	jsr $a86c			jsr Dot_Hex
.d921	20 6b cd	jsr $cd6b			jsr Space
.d924	20 f0 ce	jsr $cef0			jsr Dup			; ( addr_end ? addr )
.d927	20 6f d9	jsr $d96f			jsr _get_byte		; get JMP opcode
.d92a	20 6f d9	jsr $d96f			jsr _get_byte		; get JMP addr lo byte
.d92d	95 26		sta $26,x			sta DStack+2,x
.d92f	20 6f d9	jsr $d96f			jsr _get_byte		; get JMP addr hi byte
.d932	95 27		sta $27,x			sta DStack+3,x		; ( addr_end string_end addr )
.d934	20 d7 aa	jsr $aad7			jsr CR
.d937	20 f0 ce	jsr $cef0			jsr Dup
.d93a	20 6c a8	jsr $a86c			jsr Dot_Hex
.d93d	20 6b cd	jsr $cd6b			jsr Space
.d940	b5 24		lda $24,x	_slit_11:	lda DStack+0,x		; done with string data?
.d942	d5 26		cmp $26,x			cmp DStack+2,x
.d944	b5 25		lda $25,x			lda DStack+1,x
.d946	f5 27		sbc $27,x			sbc DStack+3,x
.d948	b0 06		bcs $d950			bcs _slit_19
.d94a	20 6f d9	jsr $d96f			jsr _get_byte
.d94d	4c 40 d9	jmp $d940			jmp _slit_11
.d950					_slit_19:
.d950	20 0b c9	jsr $c90b			jsr Nip			; ( addr_end addr )
.d953	4c 19 d8	jmp $d819			jmp _instr
.d956					_not_sliteral:
.d956	4c 19 d8	jmp $d819			jmp _instr
.d959					_tab:
.d959	a9 09		lda #$09			lda #9
.d95b	4c 5e cd	jmp $cd5e			jmp Emit_A
.d95e					_print_opcode:
.d95e	20 fe ce	jsr $cefe			jsr PushAY		; save opcode word nt
.d961	20 6b cd	jsr $cd6b			jsr Space
.d964	20 a4 bd	jsr $bda4			jsr Name_To_String	; get name string
.d967	4c 78 cd	jmp $cd78			jmp Type		; type word name
.d96a					_get_byte_silent:
.d96a	a1 24		lda ($24,x)			lda (DStack+0,x)
.d96c	4c e6 c9	jmp $c9e6			jmp One_plus
.d96f					_get_byte:
.d96f	20 6a d9	jsr $d96a			jsr _get_byte_silent
.d972	48		pha				pha
.d973	20 78 d9	jsr $d978			jsr _print_a
.d976	68		pla				pla
.d977	60		rts				rts
.d978					_print_a:
.d978	20 96 b7	jsr $b796			jsr PushZA
.d97b	20 4a a8	jsr $a84a			jsr C_Dot_Hex
.d97e	4c 6b cd	jmp $cd6b			jmp Space
=55185					assembler_dictionary_start = WordListLink ; END of ASSEMBLER-WORDLIST
=0					WordListLink .var 0	; start wordlist
>d981	6c				L1:	.text "l"	;  name of word as a string, ending at wh_NameLastChar
>d982	81					.byte (("l"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d983	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d985	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d986	08					.byte NN	;wh_Flags	dictionary flags
=55554					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d987	4c 15 a4	jmp $a415	Editor_l:	jmp ListScr
=3					CL	.var *-(WordListLink+wh_Xt)
=$d98a					en = *	; remember here
>d985	03					.byte CL	;wh_CodeLength
.d98a					Editor_Screen_Helper:
.d98a	20 f0 ce	jsr $cef0			jsr Dup
.d98d	20 19 a2	jsr $a219			jsr Scr
.d990	20 3d ce	jsr $ce3d			jsr Store
.d993	4c 2d a3	jmp $a32d			jmp Buffer
>d996	65 6e 74 65 72 2d 73 63		L1:	.text "enter-screen"	;  name of word as a string, ending at wh_NameLastChar
>d99e	72 65 65 6e
>d9a2	cc					.byte (("enter-screen"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d9a3	02 d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d9a5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d9a6	08					.byte NN	;wh_Flags	dictionary flags
=55586					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d9a7					Editor_Enter_Screen:
.d9a7	20 8a d9	jsr $d98a			jsr Editor_Screen_Helper
.d9aa	a9 00		lda #$00			lda #0			; Overwrite the lines one at a time.
.d9ac	95 24		sta $24,x	_loop:		sta DStack+0,x
.d9ae	20 96 b7	jsr $b796			jsr PushZA		; Put the current line number on the stack.
.d9b1	20 15 da	jsr $da15			jsr Editor_o		; prompt for overwrite.
.d9b4	f6 24		inc $24,x			inc DStack+0,x		; Move on to the next line.
.d9b6	b5 24		lda $24,x			lda DStack+0,x
.d9b8	c9 10		cmp #$10			cmp #16
.d9ba	90 f0		bcc $d9ac			bcc _loop
.d9bc	e8		inx				inx			; Drop work area
.d9bd	e8		inx				inx
=23					CL	.var *-(WordListLink+wh_Xt)
=$d9be					en = *	; remember here
>d9a5	17					.byte CL	;wh_CodeLength
.d9be	60		rts				rts
>d9bf	6c 69 6e 65			L1:	.text "line"	;  name of word as a string, ending at wh_NameLastChar
>d9c3	a4					.byte (("line"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d9c4	22 d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d9c6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d9c7	08					.byte NN	;wh_Flags	dictionary flags
=55619					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d9c8					Editor_line:
.d9c8	a9 06		lda #$06			lda #6		; Multiply the TOS by 64 (chars/line) to compute offset.
.d9ca	20 d9 ca	jsr $cad9			jsr LShift_A	; *64 is same as left shift 6 times.
.d9cd	20 19 a2	jsr $a219			jsr Scr
.d9d0	20 5a ce	jsr $ce5a			jsr Fetch
.d9d3	20 c3 a2	jsr $a2c3			jsr Block
.d9d6	4c 3a cb	jmp $cb3a			jmp Plus
=17					CL	.var *-(WordListLink+wh_Xt)
=$d9d9					en = *	; remember here
>d9c6	11					.byte CL	;wh_CodeLength
>d9d9	65 72 61 73 65 2d 73 63		L1:	.text "erase-screen"	;  name of word as a string, ending at wh_NameLastChar
>d9e1	72 65 65 6e
>d9e5	cc					.byte (("erase-screen"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d9e6	43 d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d9e8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d9e9	08					.byte NN	;wh_Flags	dictionary flags
=55653					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d9ea					Editor_Erase_Screen:
.d9ea	20 8a d9	jsr $d98a			jsr Editor_Screen_Helper
.d9ed	a9 00		lda #$00			lda #<1024
.d9ef	a0 04		ldy #$04			ldy #>1024
.d9f1	20 54 b7	jsr $b754			jsr PushYA
.d9f4	20 ee bd	jsr $bdee			jsr Blank		; Erase the entire block (fill with spaces).
.d9f7	4c 19 a3	jmp $a319			jmp Update		; Mark buffer as updated.
=16					CL	.var *-(WordListLink+wh_Xt)
=$d9fa					en = *	; remember here
>d9e8	10					.byte CL	;wh_CodeLength
>d9fa	65 6c				L1:	.text "el"	;  name of word as a string, ending at wh_NameLastChar
>d9fc	82					.byte (("el"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d9fd	65 d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d9ff	03					.byte 3		;wh_CodeLength  (with placeholder value)
>da00	08					.byte NN	;wh_Flags	dictionary flags
=55676					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.da01					Editor_el:
.da01	20 c8 d9	jsr $d9c8			jsr Editor_line
.da04	a9 40		lda #$40			lda #64			;(# of chars/line)
.da06	20 96 b7	jsr $b796			jsr PushZA
.da09	20 ee bd	jsr $bdee			jsr Blank		; Fill with spaces.
.da0c	4c 19 a3	jmp $a319			jmp Update		; Mark buffer as updated.
=14					CL	.var *-(WordListLink+wh_Xt)
=$da0f					en = *	; remember here
>d9ff	0e					.byte CL	;wh_CodeLength
>da0f	6f				L1:	.text "o"	;  name of word as a string, ending at wh_NameLastChar
>da10	e1					.byte (("o"[-1]&7)<<5)+(*-L1)	;wh_HNL
>da11	7c d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>da13	03					.byte 3		;wh_CodeLength  (with placeholder value)
>da14	08					.byte NN	;wh_Flags	dictionary flags
=55696					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.da15					Editor_o:
.da15	20 d7 aa	jsr $aad7			jsr CR
.da18	20 f0 ce	jsr $cef0			jsr Dup
.da1b	a9 02		lda #$02			lda #2
.da1d	20 d3 cb	jsr $cbd3			jsr U_Dot_R_A
.da20	20 6b cd	jsr $cd6b			jsr Space
.da23	a9 2a		lda #$2a			lda #'*'
.da25	20 5e cd	jsr $cd5e			jsr Emit_A
.da28	20 6b cd	jsr $cd6b			jsr Space
.da2b	20 c8 d9	jsr $d9c8			jsr Editor_line
.da2e	20 f0 ce	jsr $cef0			jsr Dup		; Save a copy of the line address for later.
.da31	a9 40		lda #$40			lda #64		; chars/line
.da33	20 96 b7	jsr $b796			jsr PushZA
.da36	20 6c c2	jsr $c26c			jsr Accept
.da39	20 f0 ce	jsr $cef0			jsr Dup
.da3c	20 1a ce	jsr $ce1a			jsr Not_Rot
.da3f	20 3a cb	jsr $cb3a			jsr Plus
.da42	a9 40		lda #$40			lda #64		; chars/line
.da44	20 96 b7	jsr $b796			jsr PushZA
.da47	20 f4 cd	jsr $cdf4			jsr Rot
.da4a	20 53 cb	jsr $cb53			jsr Minus
.da4d	20 ee bd	jsr $bdee			jsr Blank
.da50	4c 19 a3	jmp $a319			jmp Update
=62					CL	.var *-(WordListLink+wh_Xt)
=$da53					en = *	; remember here
>da13	3e					.byte CL	;wh_CodeLength
=55696					editor_dictionary_start = WordListLink ; END of EDITOR-WORDLIST

;******  Processing file: platform/../strings.asm

>da53	20 6f 6b 00			str_ok:         .text " ok", 0         ; note space at beginning
>da57	20 63 6f 6d 70 69 6c 65		str_compiled:   .text " compiled", 0   ; note space at beginning
>da5f	64 00
>da61	72 65 64 65 66 69 6e 65		str_redefined:  .text "redefined ", 0  ; note space at end
>da69	64 20 00
>da6c	41 73 73 65 6d 62 6c 65		str_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>da74	72 20 00
>da77	45 64 69 74 6f 72 20 00		str_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>da7f	46 6f 72 74 68 20 00		str_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>da86	52 6f 6f 74 20 00		str_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>da8c	66 6c 61 67 73 3a 00		str_see_flags:  .text "flags:", 0
>da93	6e 74 3a 20 24 00		str_see_nt:     .text "nt: $", 0
>da99	78 74 3a 20 24 00		str_see_xt:     .text "xt: $", 0
>da9f	73 69 7a 65 3a 20 23 00		str_see_size:   .text "size: #", 0
.daa7					Exception_Text_List:
>daa7	ff 00					.text $100+err_Abort,0
>daa9	fe 00					.text $100+err_AbortQuote,0
>daab	fd 53 74 61 63 6b 20 4f			.text $100+err_Stack_Overflow,"Stack Overflow",0
>dab3	76 65 72 66 6c 6f 77 00
>dabb	fc 53 74 61 63 6b 20 55			.text $100+err_Stack_Underflow,"Stack Underflow",0
>dac3	6e 64 65 72 66 6c 6f 77 00
>dacc	f9 64 6f 2d 6c 6f 6f 70			.text $100+err_DoLoop_TooDeep,"do-loops nested too deeply during execution",0
>dad4	73 20 6e 65 73 74 65 64 20 74 6f 6f 20 64 65 65
>dae4	70 6c 79 20 64 75 72 69 6e 67 20 65 78 65 63 75
>daf4	74 69 6f 6e 00
>daf9	f6 44 69 76 69 64 65 20			.text $100+err_DivideBy0,"Divide by 0",0
>db01	62 79 20 30 00
>db06	f5 6f 75 74 20 6f 66 20			.text $100+err_OutOfRange,"out of range",0
>db0e	72 61 6e 67 65 00
>db14	f4 61 72 67 75 6d 65 6e			.text $100+err_ArgTypeMismatch,"argument type mismatch",0
>db1c	74 20 74 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>db2c	f3 55 6e 64 65 66 69 6e			.text $100+err_UndefinedWord,"Undefined word",0
>db34	65 64 20 77 6f 72 64 00
>db3c	f2 49 6e 74 65 72 70 72			.text $100+err_CompileOnly,"Interpreting a Compile-only word",0
>db44	65 74 69 6e 67 20 61 20 43 6f 6d 70 69 6c 65 2d
>db54	6f 6e 6c 79 20 77 6f 72 64 00
>db5e	eb 75 6e 73 75 70 70 6f			.text $100+err_Unsupported,"unsupported operation",0 ;  (e.g., AT-XY on a too-dumb terminal)
>db66	72 74 65 64 20 6f 70 65 72 61 74 69 6f 6e 00
>db75	ea 63 6f 6e 74 72 6f 6c			.text $100+err_ControlMismatch,"control structure mismatch",0
>db7d	20 73 74 72 75 63 74 75 72 65 20 6d 69 73 6d 61
>db8d	74 63 68 00
>db91	e0 69 6e 76 61 6c 69 64			.text $100+err_InvalidName,"invalid name",0 ; argument (e.g., TO name)
>db99	20 6e 61 6d 65 00
>db9f	df 62 6c 6f 63 6b 20 72			.text $100+err_BlockRead,"block read",0
>dba7	65 61 64 00
>dbab	de 62 6c 6f 63 6b 20 77			.text $100+err_BlockWrite,"block write",0
>dbb3	72 69 74 65 00
>dbb8	d6 46 50 20 64 69 76 69			.text $100+err_FPDivideBy0,"FP divide by zero",0
>dbc0	64 65 20 62 79 20 7a 65 72 6f 00
>dbcb	d5 46 50 20 72 65 73 75			.text $100+err_FPOutOfRange,"FP result out of range",0
>dbd3	6c 74 20 6f 75 74 20 6f 66 20 72 61 6e 67 65 00
>dbe3	d4 46 50 20 73 74 61 63			.text $100+err_FPStackOverflow,"FP stack overflow",0
>dbeb	6b 20 6f 76 65 72 66 6c 6f 77 00
>dbf6	d3 46 50 20 73 74 61 63			.text $100+err_FPStackUnderflow,"FP stack underflow",0
>dbfe	6b 20 75 6e 64 65 72 66 6c 6f 77 00
>dc0a	d2 46 50 20 69 6e 76 61			.text $100+err_FPInvalidArg,"FP invalid argument",0
>dc12	6c 69 64 20 61 72 67 75 6d 65 6e 74 00
>dc1f	ca 46 50 20 75 6e 64 65			.text $100+err_FPUnderflow,"FP underflow",0
>dc27	72 66 6c 6f 77 00
>dc2d	c5 41 4c 4c 4f 43 41 54			.text $100+err_Allocate,"ALLOCATE",0
>dc35	45 00
>dc37	c4 46 52 45 45 00			.text $100+err_Free,"FREE",0
>dc3d	6b 52 65 66 69 6c 6c 00			.text $100+err_Refill,"Refill",0
>dc45	6a 44 65 66 65 72 20 6e			.text $100+err_Defer,"Defer not set",0
>dc4d	6f 74 20 73 65 74 00
>dc54	69 41 6c 72 65 61 64 79			.text $100+err_AlreadyInterpreting,"Already interpreting",0
>dc5c	20 69 6e 74 65 72 70 72 65 74 69 6e 67 00
>dc6a	68 41 6c 72 65 61 64 79			.text $100+err_AlreadyCompiling,"Already compiling",0
>dc72	20 63 6f 6d 70 69 6c 69 6e 67 00
>dc7d	66 4e 6f 20 77 6f 72 64			.text $100+err_TooManyWordlists,"No wordlists available",0
>dc85	6c 69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>dc95	00					.text 0 ; end of list

;******  Return to file: platform/../taliforth.asm


;******  Return to file: platform/platform-py65mon.asm

>0766					hist_buff: .fill 8*128	; Input History for ACCEPT
.0b66					cp0:
=$f001					c65_putc	= $f001 ;  putc    Write here to send the byte to stdout
=$f003					c65_kbhit	= $f003 ;  kbit    Return non-zero if key ready to fetch with getc
=$f004					c65_getc	= $f004 ;  getc    Non-blocking read from stdin, returns 0 if no byte ready
=$f006					c65_start	= $f006 ;  start   Reading here starts the cycle counter
=$f007					c65_stop	= $f007 ;  stop    Reading here stops the cycle counter
=$f008					c65_cycles	= $f008 ; cycles  Current 32 bit cycle count in NUXI order
=$f010					c65_blkio	= $f010 ;  blkio   Write here to execute a block IO action (see below)
=$f011					c65_status	= $f011 ;  status  Read block IO status here
=$f012					c65_blknum	= $f012 ; blknum  word, Block number to read/write
=$f014					c65_buffer	= $f014 ; buffer  word, Start of 1024 byte memory buffer to read/write
.f100					v_nmi:
.f100					v_reset:
.f100					v_irq:
.f100					kernel_init:
.f100	78		sei		                sei             ; Disable interrupts
.f101	a2 00		ldx #$00	                ldx #0
.f103	bd 83 f1	lda $f183,x	-               lda s_kernel_id,x
.f106	f0 06		beq $f10e	                beq _done
.f108	20 21 f1	jsr $f121	                jsr kernel_putc
.f10b	e8		inx		                inx
.f10c	d0 f5		bne $f103	                bne -
.f10e					_done:
.f10e	2c 06 f0	bit $f006			bit c65_start		; start the cycle counter
.f111	4c 19 a0	jmp $a019	                jmp forth
.f114					kernel_getc:
.f114					_loop:
.f114	ee 35 03	inc $0335	                inc RndState+0	; randomize
.f117	ad 04 f0	lda $f004	                lda c65_getc
.f11a	f0 f8		beq $f114	                beq _loop
.f11c	60		rts		                rts
.f11d					kernel_havekey:
.f11d	ad 03 f0	lda $f003			lda c65_kbhit
.f120	60		rts				rts
.f121					kernel_putc:
.f121	8d 01 f0	sta $f001	                sta c65_putc
.f124	60		rts		                rts
.f125					platform_bye:
.f125	00		brk #		                brk
.f126					platform_CCAt:
.f126	ca		dex				dex			; allot DStack space
.f127	ca		dex				dex
.f128	ca		dex				dex
.f129	ca		dex				dex
.f12a	2c 07 f0	bit $f007			bit c65_stop		; stop the cycle counter so we can read it
.f12d	ad 08 f0	lda $f008			lda c65_cycles+0	; cycles  Current 32 bit cycle count in NUXI order
.f130	95 24		sta $24,x			sta DStack+0,x
.f132	ad 09 f0	lda $f009			lda c65_cycles+1
.f135	95 25		sta $25,x			sta DStack+1,x
.f137	ad 0a f0	lda $f00a			lda c65_cycles+2
.f13a	95 26		sta $26,x			sta DStack+2,x
.f13c	ad 0b f0	lda $f00b			lda c65_cycles+3
.f13f	95 27		sta $27,x			sta DStack+3,x
.f141	2c 06 f0	bit $f006			bit c65_start		; restart the cycle counter
.f144	60		rts		                rts
.f145					Platform_Block_Read:
.f145	20 58 f1	jsr $f158			jsr Platform_BlockParms
.f148	a9 01		lda #$01			lda #1			; read
.f14a	8d 10 f0	sta $f010			sta c65_blkio
.f14d	ad 11 f0	lda $f011			lda c65_status
.f150	f0 05		beq $f157			beq +
.f152	a9 df		lda #$df			lda #$100+err_BlockRead
.f154	20 23 b4	jsr $b423			jsr ThrowA
.f157	60		rts		+		rts
.f158					Platform_BlockParms:
.f158	20 9a b3	jsr $b39a			jsr PopYA		; set block #
.f15b	8d 12 f0	sta $f012			sta c65_blknum+0
.f15e	8c 13 f0	sty $f013			sty c65_blknum+1
.f161	20 9a b3	jsr $b39a			jsr PopYA		; set buffer addr
.f164	8d 14 f0	sta $f014			sta c65_buffer+0
.f167	8c 15 f0	sty $f015			sty c65_buffer+1
.f16a	a9 ff		lda #$ff			lda #$ff		; in case c65 isn't talking
.f16c	8d 11 f0	sta $f011			sta c65_status
.f16f	60		rts				rts
.f170					Platform_Block_Write:
.f170	20 58 f1	jsr $f158			jsr Platform_BlockParms
.f173	a9 02		lda #$02			lda #2			; write
.f175	8d 10 f0	sta $f010			sta c65_blkio
.f178	ad 11 f0	lda $f011			lda c65_status
.f17b	f0 05		beq $f182			beq +
.f17d	a9 de		lda #$de			lda #$100+err_BlockWrite
.f17f	20 23 b4	jsr $b423			jsr ThrowA
.f182	60		rts		+		rts
.f183					s_kernel_id:
>f183	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 remix default kernel for py65mon (31 May 2024)", AscLF, 0
>f18b	74 68 20 32 20 72 65 6d 69 78 20 64 65 66 61 75
>f19b	6c 74 20 6b 65 72 6e 65 6c 20 66 6f 72 20 70 79
>f1ab	36 35 6d 6f 6e 20 28 33 31 20 4d 61 79 20 32 30
>f1bb	32 34 29 0a 00
>fffa	00 f1				.word v_nmi
>fffc	00 f1				.word v_reset
>fffe	00 f1				.word v_irq

;******  End of listing
