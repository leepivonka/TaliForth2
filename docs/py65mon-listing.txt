
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output TaliForth-py65mon.bin platform/platform-py65mon.asm
; Wed Jun 19 18:55:07 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

=$0100					RStack = $0100 ; begin of 6502 Return stack
=$ff					rsp0      = $ff		; initial Return Stack Pointer (6502 stack)
=$8000					cp_end = $8000 ; LastRAM byte available for Data
=84					PadOffset = 84	; offset from CP to PAD (holds number strings)
=79					MAX_LINE_LENGTH  = 79      ; output line size
=20					DDim = 20	; # of cells in data stack
=10					FDim = 10	; # of entries in floating-point stack
=8					DoStkDim = 8	; # of entries in Do stack
=["lf"]					TALI_OPTION_CR_EOL := [ "lf" ]
=$ff					bsize     = $ff		; size of input/output buffers
>0200					buffer0: .fill bsize	; input buffer

;******  Processing file: platform/../taliforth.asm

=					TALI_OPTIONAL_WORDS := ["fp","fpe", "fpieee","fptrancendentals", "ed", "editor", "ramdrive", "block", "environment?", "assembler", "wordlist" ]
=-1					err_Abort		= -1
=-2					err_AbortQuote		= -2
=-3					err_Stack_Overflow	= -3
=-4					err_Stack_Underflow	= -4
=-5					err_Return_Stack_Overflow = -5
=-6					err_Return_Stack_Underflow = -6
=-7					err_DoLoop_TooDeep	= -7	; do-loops nested too deeply during execution
=-8					err_Dictionary_Overflow	= -8
=-9					err_InvalidMemoryAddr	= -9	; invalid memory address
=-10					err_DivideBy0		= -10	; division by zero
=-11					err_OutOfRange		= -11	; result out of range
=-12					err_ArgTypeMismatch	= -12	; argument type mismatch
=-13					err_UndefinedWord	= -13
=-14					err_CompileOnly		= -14	; interpreting a compile-only word
=-15					err_Forget		= -15	; invalid FORGET
=-16					err_EmptyName		= -16	; attempt to use zero-length string as a name
=-17					err_PicStringOverflow	= -17	; pictured numeric output string overflow
=-18					err_ParsedStringOverflow = -18	; parsed string overflow
=-19					err_NameTooLong		= -19	; definition name too long
=-20					err_WriteToRO		= -20	; write to a read-only location
=-21					err_Unsupported		= -21	; unsupported operation  (e.g., AT-XY on a too-dumb terminal)
=-22					err_ControlMismatch	= -22	; control structure mismatch
=-23					err_AddrAlignment	= -23	; address alignment exception
=-24					err_InvalidNumericArg	= -24	; invalid numeric argument
=-25					err_ReturnStackImbalance = -25	; return stack imbalance
=-26					err_LoopParmUnavailable = -26	; loop parameters unavailable
=-27					err_InvalidRecursion	= -27	; invalid recursion
=-28					err_UserInterrupt	= -28	; user interrupt
=-29					err_CompilerNesting	= -29	; compiler nesting
=-30					err_Obsolete		= -30	; obsolescent feature
=-31					err_NoBody		= -31	; >BODY used on non-CREATEd definition
=-32					err_InvalidName		= -32	; invalid name argument (e.g., TO name)
=-33					err_BlockRead		= -33	; block read exception
=-34					err_BlockWrite		= -34	; block write exception
=-35					err_InvalidBlock	= -35	; invalid block number
=-36					err_InvalidFilePosition = -36	; invalid file position
=-37					err_FileIO		= -37	; file I/O exception
=-38					err_FileMissing		= -38	; non-existent file
=-39					err_EndOfFile		= -39	; unexpected end of file
=-40					err_InvalidBase		= -40	; invalid BASE for floating point conversion
=-41					err_LossOfPrecision	= -41	; loss of precision
=-42					err_FPDivideBy0		= -42	; floating-point divide by zero
=-43					err_FPOutOfRange	= -43	; floating-point result out of range
=-44					err_FPStackOverflow	= -44	; floating-point stack overflow
=-45					err_FPStackUnderflow	= -45	; floating-point stack underflow
=-46					err_FPInvalidArg	= -46	; floating-point invalid argument
=-47					err_CompileWordsDeleted = -47	; compilation word list deleted
=-48					err_PostponeInvalid	= -48	; invalid POSTPONE
=-49					err_SearchOrderOverflow = -49	; search-order overflow
=-50					err_SearchOrderUnderflow = -50	; search-order underflow
=-51					err_CompileWordlistChanged = -51 ; compilation word list changed
=-52					err_ControlStackOverflow = -52	; control-flow stack overflow
=-53					err_ExceptionStackOverflow = -53 ; exception stack overflow
=-54					err_FPUnderflow		= -54	; floating-point underflow
=-55					err_FPFault		= -55	; floating-point unidentified fault
=-56					err_Quit		= -56	; QUIT
=-57					err_ConsoleIO		= -57	; exception in sending or receiving a character
=-58					err_BracketIf		= -58	; [IF], [ELSE], or [THEN] exception
=-59					err_Allocate		= -59	; ALLOCATE
=-60					err_Free		= -60	; FREE
=-61					err_Resize		= -61	; RESIZE
=-62					err_CloseFile		= -62	; CLOSE-FILE
=-63					err_CreateFile		= -63	; CREATE-FILE
=-64					err_DeleteFile		= -64	; DELETE-FILE
=-65					err_FilePosition	= -65	; FILE-POSITION
=-66					err_FileSize		= -66	; FILE-SIZE
=-67					err_FileStatus		= -67	; FILE-STATUS
=-68					err_FlushFile		= -68	; FLUSH-FILE
=-69					err_OpenFile		= -69	; OPEN-FILE
=-70					err_ReadFile		= -70	; READ-FILE
=-71					err_ReadLine		= -71	; READ-LINE
=-72					err_RenameFile		= -72	; RENAME-FILE
=-73					err_RepositionFile	= -73	; REPOSITION-FILE
=-74					err_ResizeFile		= -74	; RESIZE-FILE
=-75					err_WriteFile		= -75	; WRITE-FILE
=-76					err_WriteLine		= -76	; WRITE-LINE
=-77					err_MalformedXChar	= -77	; Malformed xchar
=-78					err_Substitute		= -78	; SUBSTITUTE
=-79					err_Replaces		= -79	; REPLACES
=-149					err_Refill		= -149	; Refill failed
=-150					err_Defer		= -150	; Defer not set
=-151					err_AlreadyInterpreting	= -151	; entering interpret when already interpreting
=-152					err_AlreadyCompiling	= -152	; entering compile when already compiling
=-154					err_TooManyWordlists   	= -154
.0000					zp0:
>0000					cp:	.word ?		; Compiler Pointer (see HERE)
>0002					InSrc:	.word ?		; input Source for SOURCE-ID
>0004					Cib:	.word ?		; address of current input buffer
>0006					CibLen:	.word ?		; length of current input buffer
>0008					ToIn:	.word ?		; pointer to CIB (>IN in Forth)
>000a					state:	.word ?		; STATE: -1 compile, 0 interpret
>000c					status: .word ?		; internal status flags
>000e					WorkWord: .word ?	; nt or xt of word being compiled (see status)
>0010					dp:	.word ?		; Dictionary Pointer temp
>0012					DoIndex: .word ?	; current Do index
>0014					tmp1:	.word ?		; temporary storage
>0016					tmp2:	.word ?		; temporary storage
>0018					tmp3:	.word ?		; temporary storage
>001a					tmp4:	.word ?		; temporary storage (tmpdsp)
>001c					tmp5:	.word ?		; temporary storage (tmptos)
>001e					editor1: .word ?	; temporary for editors
>0020					editor2: .word ?	; temporary for editors
>0022					editor3: .word ?	; temporary for editors
>0024					DStack:	.fill DDim*2	; data stack
=40					DStack0 = *-DStack	;   initial Data Stack index value
.8000					Cold_zp_table:
>8000	66 0b					.word cp0		; cp
>8002	00 00					.word 0			; insrc (SOURCE-ID is 0 for keyboard)
>8004	00 02					.word buffer0		; cib
>8006	00 00					.word 0			; ciblen
>8008	00 00					.word 0			; toin
>800a	00 00					.word 0			; state (0 = interpret)
>800c	00 00					.word 0			; status
=14					Cold_zp_table_length = *-Cold_zp_table
.02ff					User0:
>02ff					PrecisionV: .byte ?	; # of decimal places for FP print
>0300					base:	.word ?		; number radix, default decimal
>0302					nc_limit: .word ?	; limit for Native Compile size
>0304					uf_strip: .word ?	; flag to strip underflow detection code
>0306					output:	.word ?		; vector for EMIT
>0308					input:	.word ?		; vector for KEY
>030a					HaveKey: .word ?	; vector for KEY?
>030c					BlkV:	.word ?		; BLK
>030e					ScrV:	.word ?		; SCR
>0310					CurrentV: .byte ?	; CURRENT (byte) (Compilation wordlist)
>0311					Num_WordlistsV: .byte ?	; #WORDLISTS (byte)
=12					max_wordlists = 12	; Maximum number of wordlists supported
>0312					WordlistsV: .fill 2*max_wordlists	; WORDLISTS (cells)
>032a					Num_OrderV: .byte ?	; #ORDER (byte)
>032b					Search_OrderV: .fill 9	; SEARCH-ORDER (bytes)
.0334					MarkEnd:
>0334					ToHold:	.byte ?		; index for formatted output
>0335					RndState: .dword ?	; random # state
=0					wid_Forth = 0
=1					wid_Editor = 1
=2					wid_Assembler = 2
=3					wid_Root = 3
.800e					Cold_user_table:
>800e	08					.byte 8			; PrecisionV
>800f	0a 00					.word 10		; base
>8011	08 00					.word 8			; nc-limit
>8013	00 00					.word 0			; uf_strip (off by default)
>8015	21 f1					.word kernel_putc	; output
>8017	14 f1					.word kernel_getc	; input
>8019	1d f1					.word kernel_havekey	; havekey
>801b	00 00					.word 0				; BLK
>801d	00 00					.word 0				; SCR
>801f	00					.byte 0				; CURRENT = FORTH-WORDLIST
>8020	04					.byte 4				; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>8021	b8 ce					.word forth_dictionary_start	; FORTH-WORDLIST
>8023	a2 d9					.word editor_dictionary_start	; EDITOR-WORDLIST
>8025	a3 d7					.word assembler_dictionary_start ; ASSEMBLER-WORDLIST
>8027	fc ce					.word root_dictionary_start	; ROOT-WORDLIST
>8029	00 00 00 00 00 00 00 00			.word 0,0,0,0,0,0,0,0		; User wordlists
>8031	00 00 00 00 00 00 00 00
>8039	02					.byte 2				; #ORDER
>803a	00 02 00 00 00 00 00 00			.byte wid_Forth,wid_Assembler,0,0,0,0,0,0,0	; search-order
>8042	00
=53					Cold_user_table_length = *-Cold_user_table
=$03					AscCC   = $03	; break (CTRL-c)
=$07					AscBELL = $07	; bell sound
=$08					AscBS   = $08	; backspace
=$09					AscHT	= $09	; tab
=$0a					AscLF   = $0a	; line feed
=$0b					AScVT	= $0b	; vertical tab
=$0c					AscFF	= $0c	; form feed
=$0d					AscCR   = $0d	; carriage return
=$0e					AscCN   = $0e	; CTRL-n (used to recall next input history)
=$10					AscCP   = $10	; CTRL-p (used to recall previous input history)
=$1b					AscESC  = $1b	; escape
=$20					AscSP   = $20	; space
=$22					AscDQuote = $22	; double quote
=$5c					AscBackslash = $5c ; backslash
=$7f					AscDEL  = $7f	; delete (CTRL-h)
>0000							.fill $80 ; name, right justified
=127					wh_NameLastChar	= *-1	;last char of name
>0080					wh_HNL:		.byte ?	;
=$e0					wh_HNL_HashMask = $e0		; lo 3 bits of last char of name
=$1f					wh_HNL_NameLengthMask = $1f	; length of name
.0081					wh_
>0081					wh_WordListLink: .word ? ;link to nt of previous word in wordlist chain
>0083					wh_CodeLength:	.byte ?	;size of code (0xff = 255 or greater)
>0084					wh_Flags:	.byte ?	; created by adding the flags defined as:
=1					CO =   1 ; Compile Only
=2					AN =   2 ; Always Native Compile (may not be called by JSR)
=4					IM =   4 ; Immediate Word
=8					NN =   8 ; Never Native Compile (must always be called by JSR)
=$10					UF = $10 ; Includes strippable Underflow Check
=$40					R6 = $40 ; strip 6 bytes from begin & end when native compiling
.0085					wh_xt:
=0					WordListLink .var 0	 ; start of FORTH wordlist
>8043	43 6f 6c 64			L1:	.text "Cold"	;  name of word as a string, ending at wh_NameLastChar
>8047	84					.byte (("Cold"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8048	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>804a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>804b	08					.byte NN	;wh_Flags	dictionary flags
=32711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.804c					Cold:
.804c	d8		cld				cld
.804d	a2 ff		ldx #$ff			ldx #rsp0		; Initialize 6502 stack (Return Stack)
.804f	9a		txs				txs
.8050	a2 0d		ldx #$0d			ldx #Cold_zp_table_length-1
.8052					-
.8052	bd 00 80	lda $8000,x			lda Cold_zp_table,x
.8055	95 00		sta $00,x			sta zp0,x
.8057	ca		dex				dex
.8058	10 f8		bpl $8052			bpl -
.805a	a0 34		ldy #$34			ldy #Cold_user_table_length-1
.805c	b9 0e 80	lda $800e,y	-		lda Cold_user_table,y
.805f	99 ff 02	sta $02ff,y			sta User0,y
.8062	88		dey				dey
.8063	10 f7		bpl $805c			bpl -
.8065	20 9d b4	jsr $b49d			jsr Empty_Stack
.8068	20 34 a1	jsr $a134			jsr BlockInit
.806b	20 e2 aa	jsr $aae2			jsr CR
.806e	a9 9c		lda #$9c			lda #<forth_words_start		; push start address
.8070	a0 80		ldy #$80			ldy #>forth_words_start
.8072	20 5f b7	jsr $b75f			jsr PushYA
.8075	a9 d2		lda #$d2			lda #<forth_words_len		; push length
.8077	a0 00		ldy #$00			ldy #>forth_words_len
.8079	20 5f b7	jsr $b75f			jsr PushYA
.807c	20 94 af	jsr $af94			jsr Evaluate
.807f	a9 00		lda #$00			lda #0
.8081	8d 66 07	sta $0766			sta hist_buff
.8084	8d e6 07	sta $07e6			sta hist_buff+$80
.8087	8d 66 08	sta $0866			sta hist_buff+$100
.808a	8d e6 08	sta $08e6			sta hist_buff+$180
.808d	8d 66 09	sta $0966			sta hist_buff+$200
.8090	8d e6 09	sta $09e6			sta hist_buff+$280
.8093	8d 66 0a	sta $0a66			sta hist_buff+$300
.8096	8d e6 0a	sta $0ae6			sta hist_buff+$380
.8099	4c 4e b4	jmp $b44e			jmp Abort_Core2	;Quit
=80					CL	.var *-(WordListLink+wh_Xt)
=$809c					en = *	; remember here
>804a	50					.byte CL	;wh_CodeLength
.809c					forth_words_start:
>809c	20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>80a4	61 6c 69 20 46 6f 72 74 68 20 32 20 72 65 6d 69
>80b4	78 20 66 6f 72 20 74 68 65 20 36 35 30 32 29 20
>80c4	63 72 20 2e 28 20 56 65 72 73 69 6f 6e 20 33 31
>80d4	2e 20 4d 61 79 20 32 30 32 34 20 29 20 63 72 20
>80e4	2e 28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31
>80f4	34 2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53
>8104	74 65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f
>8114	6c 77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c
>8124	69 20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20
>8134	77 69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20
>8144	4e 4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20
>8154	2e 28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f
>8164	20 65 78 69 74 29 20 63 72 20
=210					forth_words_len = *-forth_words_start
.816e					user_words_start:
>816e					.binary "user_words.asc"
=0					user_words_len = *-user_words_start
>816e	4e 6f 4f 70			L1:	.text "NoOp"	;  name of word as a string, ending at wh_NameLastChar
>8172	04					.byte (("NoOp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8173	c7 7f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8175	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8176	00					.byte 0	;wh_Flags	dictionary flags
=33010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8177	ea		nop				nop
=1					CL	.var *-(WordListLink+wh_Xt)
=$8178					en = *	; remember here
>8175	01					.byte CL	;wh_CodeLength
.8178	60		rts				rts
>8179	63 63 40			L1:	.text "cc@"	;  name of word as a string, ending at wh_NameLastChar
>817c	03					.byte (("cc@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>817d	f2 80					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>817f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8180	08					.byte NN	;wh_Flags	dictionary flags
=33020					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8181	4c 26 f1	jmp $f126	CCAt:		jmp platform_CCAt
=3					CL	.var *-(WordListLink+wh_Xt)
=$8184					en = *	; remember here
>817f	03					.byte CL	;wh_CodeLength
>8184	42 79 65			L1:	.text "Bye"	;  name of word as a string, ending at wh_NameLastChar
>8187	a3					.byte (("Bye"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8188	fc 80					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>818a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>818b	08					.byte NN	;wh_Flags	dictionary flags
=33031					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.818c	4c 25 f1	jmp $f125	Bye:		jmp platform_bye
=3					CL	.var *-(WordListLink+wh_Xt)
=$818f					en = *	; remember here
>818a	03					.byte CL	;wh_CodeLength
>818f	54 79 70 65 53 79 6d 62		L1:	.text "TypeSymbol"	;  name of word as a string, ending at wh_NameLastChar
>8197	6f 6c
>8199	8a					.byte (("TypeSymbol"[-1]&7)<<5)+(*-L1)	;wh_HNL
>819a	07 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>819c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>819d	08					.byte NN	;wh_Flags	dictionary flags
=33049					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.819e	20 c4 b7	jsr $b7c4	TypeSymbol:	jsr Two
.81a1	20 15 c4	jsr $c415			jsr Spaces
.81a4	a9 28		lda #$28			lda #'('
.81a6	20 70 cd	jsr $cd70			jsr Emit_A
.81a9	20 7d cd	jsr $cd7d			jsr Space
.81ac	20 02 cf	jsr $cf02			jsr Dup
.81af	a9 24		lda #$24			lda #'$'
.81b1	20 70 cd	jsr $cd70			jsr Emit_A
.81b4	20 77 a8	jsr $a877			jsr Dot_Hex
.81b7	20 7d cd	jsr $cd7d			jsr Space
.81ba	20 e1 81	jsr $81e1			jsr DictSearchXt	; ( addr_end addr operand offset nt )
.81bd	20 af bd	jsr $bdaf			jsr Name_To_String	; Change nt into the name
.81c0	20 8a cd	jsr $cd8a			jsr Type		; print it.
.81c3	20 7d cd	jsr $cd7d			jsr Space
.81c6	b5 24		lda $24,x			lda DStack+0,x		; if non-zero offset
.81c8	15 25		ora $25,x			ora DStack+1,x
.81ca	f0 0b		beq $81d7			beq +
.81cc	a9 2b		lda #$2b			lda #'+'		;   print offset
.81ce	20 70 cd	jsr $cd70			jsr Emit_A
.81d1	20 02 cf	jsr $cf02			jsr Dup
.81d4	20 b1 cb	jsr $cbb1			jsr U_Dot
.81d7	e8		inx		+		inx
.81d8	e8		inx				inx
.81d9	a9 29		lda #$29			lda #')'
.81db	20 70 cd	jsr $cd70			jsr Emit_A
.81de	4c 7d cd	jmp $cd7d			jmp Space
=67					CL	.var *-(WordListLink+wh_Xt)
=$81e1					en = *	; remember here
>819c	43					.byte CL	;wh_CodeLength
.81e1					DictSearchXt:
.81e1	ca		dex				dex
.81e2	ca		dex				dex
.81e3	20 d9 ce	jsr $ced9			jsr Over
.81e6	a9 ff		lda #$ff			lda #$ff		; init best offset
.81e8	95 29		sta $29,x			sta DStack+5,x		; ( offset nt xt )
.81ea	a9 fe		lda #$fe			lda #$fe		; for each wordlist
.81ec	48		pha				pha
.81ed	68		pla		_ListNext:	pla
.81ee	18		clc				clc
.81ef	69 02		adc #$02			adc #2			; to next wordlist
.81f1	c9 18		cmp #$18			cmp #max_wordlists*2
.81f3	b0 10		bcs $8205			bcs _Done
.81f5	48		pha				pha
.81f6	a8		tay				tay
.81f7	b9 12 03	lda $0312,y			lda WordlistsV+0,y	; Get the DP for that wordlist.
.81fa	85 14		sta $14				sta tmp1+0
.81fc	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.81ff	85 15		sta $15				sta tmp1+1
.8201	d0 14		bne $8217			bne _WordTest
.8203	f0 e8		beq $81ed			beq _ListNext		;   empty list
.8205	e8		inx		_Done:		inx			; Drop xt
.8206	e8		inx				inx
.8207	60		rts				rts
.8208	a0 82		ldy #$82	_WordNext:	ldy #wh_WordListLink+1
.820a	b1 14		lda ($14),y			lda (tmp1),y
.820c	f0 df		beq $81ed			beq _ListNext		; end of Dictionary?
.820e	48		pha				pha
.820f	88		dey				dey
.8210	b1 14		lda ($14),y			lda (tmp1),y
.8212	85 14		sta $14				sta tmp1+0
.8214	68		pla				pla
.8215	85 15		sta $15				sta tmp1+1
.8217	18		clc		_WordTest:	clc			; tmp2 = xt of this word
.8218	a5 14		lda $14				lda tmp1+0
.821a	69 85		adc #$85			adc #wh_xt
.821c	85 16		sta $16				sta tmp2+0
.821e	a5 15		lda $15				lda tmp1+1
.8220	69 00		adc #$00			adc #0
.8222	85 17		sta $17				sta tmp2+1
.8224	38		sec				sec			; tmp2 = xt offset for this word
.8225	b5 24		lda $24,x			lda DStack+0,x
.8227	e5 16		sbc $16				sbc tmp2+0
.8229	85 16		sta $16				sta tmp2+0
.822b	b5 25		lda $25,x			lda DStack+1,x
.822d	e5 17		sbc $17				sbc tmp2+1
.822f	85 17		sta $17				sta tmp2+1
.8231	20 97 82	jsr $8297			jsr _test
.8234	a0 85		ldy #$85			ldy #wh_xt+0		; is this word a constant?
.8236	b1 14		lda ($14),y			lda (tmp1),y
.8238	c9 a0		cmp #$a0			cmp #$a0
.823a	f0 28		beq $8264			beq _PushYA
.823c	c9 a9		cmp #$a9			cmp #$a9
.823e	d0 c8		bne $8208			bne _WordNext
.8240	c8		iny		_PushZA:	iny			; get lda # operand
.8241	b5 24		lda $24,x			lda DStack+0,x
.8243	f1 14		sbc ($14),y			sbc (tmp1),y
.8245	85 16		sta $16				sta tmp2+0
.8247	b5 25		lda $25,x			lda DStack+1,x
.8249	e9 00		sbc #$00			sbc #0
.824b	85 17		sta $17				sta tmp2+1
.824d	c8		iny				iny			; check jmp opcode
.824e	b1 14		lda ($14),y			lda (tmp1),y
.8250	c9 4c		cmp #$4c			cmp #$4c
.8252	d0 b4		bne $8208			bne _WordNext
.8254	c8		iny				iny			; check jmp operand lo
.8255	b1 14		lda ($14),y			lda (tmp1),y
.8257	c9 a1		cmp #$a1			cmp #<PushZA
.8259	d0 ad		bne $8208			bne _WordNext
.825b	c8		iny				iny			; check jmp operand hi
.825c	b1 14		lda ($14),y			lda (tmp1),y
.825e	c9 b7		cmp #$b7			cmp #>PushZA
.8260	d0 a6		bne $8208			bne _WordNext
.8262	f0 2d		beq $8291			beq _KTest
.8264	a0 87		ldy #$87	_PushYA:	ldy #wh_xt+2		; check LDA # opcode
.8266	b1 14		lda ($14),y			lda (tmp1),y
.8268	c9 a9		cmp #$a9			cmp #$a9
.826a	d0 9c		bne $8208			bne _WordNext
.826c	c8		iny				iny			; get lda # operand
.826d	b5 24		lda $24,x			lda DStack+0,x
.826f	f1 14		sbc ($14),y			sbc (tmp1),y
.8271	85 16		sta $16				sta tmp2+0
.8273	a0 86		ldy #$86			ldy #wh_xt+1		; get LDY # operand
.8275	b5 25		lda $25,x			lda DStack+1,x
.8277	f1 14		sbc ($14),y			sbc (tmp1),y
.8279	85 17		sta $17				sta tmp2+1
.827b	a0 89		ldy #$89			ldy #wh_xt+4		; check JMP opcode
.827d	b1 14		lda ($14),y			lda (tmp1),y
.827f	c9 4c		cmp #$4c			cmp #$4c
.8281	d0 85		bne $8208			bne _WordNext
.8283	c8		iny				iny			; check JMP operand lo
.8284	b1 14		lda ($14),y			lda (tmp1),y
.8286	c9 5f		cmp #$5f			cmp #<PushYA
.8288	d0 0a		bne $8294			bne _WordNext3
.828a	c8		iny				iny			; check JMP operand hi
.828b	b1 14		lda ($14),y			lda (tmp1),y
.828d	c9 b7		cmp #$b7			cmp #>PushYA
.828f	d0 03		bne $8294			bne _WordNext3
.8291	20 97 82	jsr $8297	_KTest:		jsr _test
.8294	4c 08 82	jmp $8208	_WordNext3:	jmp _WordNext
.8297					_test:
.8297	a5 16		lda $16				lda tmp2+0		; this word have smaller offset?
.8299	d5 28		cmp $28,x			cmp DStack+4,x
.829b	a5 17		lda $17				lda tmp2+1
.829d	f5 29		sbc $29,x			sbc DStack+5,x
.829f	b0 10		bcs $82b1			bcs _trts
.82a1	a5 16		lda $16				lda tmp2+0		;   save this better offset
.82a3	a4 17		ldy $17				ldy tmp2+1
.82a5	95 28		sta $28,x			sta DStack+4,x
.82a7	94 29		sty $29,x			sty DStack+5,x
.82a9	a5 14		lda $14				lda tmp1+0		;   save this better nt
.82ab	a4 15		ldy $15				ldy tmp1+1
.82ad	95 26		sta $26,x			sta DStack+2,x
.82af	94 27		sty $27,x			sty DStack+3,x
.82b1	60		rts		_trts:		rts
>82b2	44 53 74 61 63 6b		L1:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
>82b8	66					.byte (("DStack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>82b9	19 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82bc	08					.byte NN	;wh_Flags	dictionary flags
=33336					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82bd	a9 24		lda #$24			lda #DStack
.82bf	4c a1 b7	jmp $b7a1			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$82c2					en = *	; remember here
>82bb	05					.byte CL	;wh_CodeLength
>82c2	52 6e 64 53 74 61 74 65		L1:	.text "RndState"	;  name of word as a string, ending at wh_NameLastChar
>82ca	a8					.byte (("RndState"[-1]&7)<<5)+(*-L1)	;wh_HNL
>82cb	38 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82ce	08					.byte NN	;wh_Flags	dictionary flags
=33354					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82cf	a0 03		ldy #$03			ldy #>RndState
.82d1	a9 35		lda #$35			lda #<RndState
.82d3	4c 5f b7	jmp $b75f			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$82d6					en = *	; remember here
>82cd	07					.byte CL	;wh_CodeLength
>82d6	52 61 6e 64			L1:	.text "Rand"	;  name of word as a string, ending at wh_NameLastChar
>82da	84					.byte (("Rand"[-1]&7)<<5)+(*-L1)	;wh_HNL
>82db	4a 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82de	00					.byte 0	;wh_Flags	dictionary flags
=33370					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82df					Rand:
.82df	4e 36 03	lsr $0336			lsr RndState+1
.82e2	6e 35 03	ror $0335			ror RndState+0
.82e5	6e 38 03	ror $0338			ror RndState+3
.82e8	6e 37 03	ror $0337			ror RndState+2
.82eb	90 10		bcc $82fd			bcc _19			;  IfCs,
.82ed	ad 36 03	lda $0336			lda RndState+1
.82f0	49 d0		eor #$d0			eor #$d0
.82f2	8d 36 03	sta $0336			sta RndState+1
.82f5	ad 37 03	lda $0337			lda RndState+2
.82f8	49 01		eor #$01			eor #$01
.82fa	8d 37 03	sta $0337			sta RndState+2
.82fd					_19:
.82fd	ad 37 03	lda $0337			lda RndState+2
.8300	ac 38 03	ldy $0338			ldy RndState+3
=36					CL	.var *-(WordListLink+wh_Xt)
=$8303					en = *	; remember here
>82dd	24					.byte CL	;wh_CodeLength
.8303	60		rts				rts
>8304	52 61 6e 64 4d			L1:	.text "RandM"	;  name of word as a string, ending at wh_NameLastChar
>8309	a5					.byte (("RandM"[-1]&7)<<5)+(*-L1)	;wh_HNL
>830a	5a 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>830c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>830d	08					.byte NN	;wh_Flags	dictionary flags
=33417					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.830e	20 02 cf	jsr $cf02	RandM:		jsr Dup		; ( umod umod )
.8311	20 df 82	jsr $82df			jsr Rand
.8314	4a		lsr a				lsr a		; make positive
.8315	95 27		sta $27,x			sta DStack+3,x
.8317	94 26		sty $26,x			sty DStack+2,x	; ( rand umod )
.8319	4c 06 af	jmp $af06			jmp Mod
=14					CL	.var *-(WordListLink+wh_Xt)
=$831c					en = *	; remember here
>830c	0e					.byte CL	;wh_CodeLength
>004c					fp:	.byte ?		; floating-point stack index
>004d					FSExp:   .fill FDim	; FP stack exponent     array
>0057					FSMant0: .fill FDim	; FP stack mantissa MSB array
>0061					FSMant1: .fill FDim	; FP stack mantissa 2nd array
>006b					FSMant2: .fill FDim	; FP stack mantissa 3rd array
>0075					FSMant3: .fill FDim	; FP stack mantissa 4th array
>831c	46 50				L1:	.text "FP"	;  name of word as a string, ending at wh_NameLastChar
>831e	02					.byte (("FP"[-1]&7)<<5)+(*-L1)	;wh_HNL
>831f	89 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8321	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8322	08					.byte NN	;wh_Flags	dictionary flags
=33438					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8323	a9 4c		lda #$4c			lda #fp
.8325	4c a1 b7	jmp $b7a1			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8328					en = *	; remember here
>8321	05					.byte CL	;wh_CodeLength
>8328	46 44 69 6d			L1:	.text "FDim"	;  name of word as a string, ending at wh_NameLastChar
>832c	a4					.byte (("FDim"[-1]&7)<<5)+(*-L1)	;wh_HNL
>832d	9e 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>832f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8330	08					.byte NN	;wh_Flags	dictionary flags
=33452					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8331	a9 0a		lda #$0a			lda #FDim
.8333	4c a1 b7	jmp $b7a1			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8336					en = *	; remember here
>832f	05					.byte CL	;wh_CodeLength
>8336	46 53 45 78 70			L1:	.text "FSExp"	;  name of word as a string, ending at wh_NameLastChar
>833b	05					.byte (("FSExp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>833c	ac 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>833e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>833f	08					.byte NN	;wh_Flags	dictionary flags
=33467					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8340	a9 4d		lda #$4d			lda #FSExp
.8342	4c a1 b7	jmp $b7a1			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8345					en = *	; remember here
>833e	05					.byte CL	;wh_CodeLength
>8345	46 53 4d 61 6e 74 30		L1:	.text "FSMant0"	;  name of word as a string, ending at wh_NameLastChar
>834c	07					.byte (("FSMant0"[-1]&7)<<5)+(*-L1)	;wh_HNL
>834d	bb 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>834f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8350	08					.byte NN	;wh_Flags	dictionary flags
=33484					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8351	a9 57		lda #$57			lda #FSMant0
.8353	4c a1 b7	jmp $b7a1			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8356					en = *	; remember here
>834f	05					.byte CL	;wh_CodeLength
>8356	46 53 4d 61 6e 74 31		L1:	.text "FSMant1"	;  name of word as a string, ending at wh_NameLastChar
>835d	27					.byte (("FSMant1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>835e	cc 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8360	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8361	08					.byte NN	;wh_Flags	dictionary flags
=33501					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8362	a9 61		lda #$61			lda #FSMant1
.8364	4c a1 b7	jmp $b7a1			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8367					en = *	; remember here
>8360	05					.byte CL	;wh_CodeLength
>8367	46 53 4d 61 6e 74 32		L1:	.text "FSMant2"	;  name of word as a string, ending at wh_NameLastChar
>836e	47					.byte (("FSMant2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>836f	dd 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8371	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8372	08					.byte NN	;wh_Flags	dictionary flags
=33518					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8373	a9 6b		lda #$6b			lda #FSMant2
.8375	4c a1 b7	jmp $b7a1			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8378					en = *	; remember here
>8371	05					.byte CL	;wh_CodeLength
>8378	46 53 4d 61 6e 74 33		L1:	.text "FSMant3"	;  name of word as a string, ending at wh_NameLastChar
>837f	67					.byte (("FSMant3"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8380	ee 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8382	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8383	08					.byte NN	;wh_Flags	dictionary flags
=33535					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8384	a9 75		lda #$75			lda #FSMant3
.8386	4c a1 b7	jmp $b7a1			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8389					en = *	; remember here
>8382	05					.byte CL	;wh_CodeLength
>8389	46 6c 6f 61 74 2b		L1:	.text "Float+"	;  name of word as a string, ending at wh_NameLastChar
>838f	66					.byte (("Float+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8390	ff 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8392	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8393	08					.byte NN	;wh_Flags	dictionary flags
=33551					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8394	a9 05		lda #$05	FloatPlus:	lda #5
.8396	4c a7 c9	jmp $c9a7			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$8399					en = *	; remember here
>8392	05					.byte CL	;wh_CodeLength
>8399	46 6c 6f 61 74 73		L1:	.text "Floats"	;  name of word as a string, ending at wh_NameLastChar
>839f	66					.byte (("Floats"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83a0	0f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83a3	08					.byte NN	;wh_Flags	dictionary flags
=33567					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83a4	a9 05		lda #$05	Floats:		lda #5
.83a6	20 a1 b7	jsr $b7a1			jsr PushZA
.83a9	4c 16 ae	jmp $ae16			jmp Star
=8					CL	.var *-(WordListLink+wh_Xt)
=$83ac					en = *	; remember here
>83a2	08					.byte CL	;wh_CodeLength
>83ac	50 72 65 63 69 73 69 6f		L1:	.text "Precision"	;  name of word as a string, ending at wh_NameLastChar
>83b4	6e
>83b5	c9					.byte (("Precision"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83b6	1f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83b8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83b9	08					.byte NN	;wh_Flags	dictionary flags
=33589					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83ba	ad ff 02	lda $02ff	Precision:	lda PrecisionV
.83bd	4c a1 b7	jmp $b7a1			jmp PushZA
=6					CL	.var *-(WordListLink+wh_Xt)
=$83c0					en = *	; remember here
>83b8	06					.byte CL	;wh_CodeLength
.83c0	60		rts				rts
>83c1	53 65 74 2d 50 72 65 63		L1:	.text "Set-Precision"	;  name of word as a string, ending at wh_NameLastChar
>83c9	69 73 69 6f 6e
>83ce	cd					.byte (("Set-Precision"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83cf	35 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83d2	08					.byte NN	;wh_Flags	dictionary flags
=33614					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83d3	20 89 b3	jsr $b389			jsr PopA
.83d6	8d ff 02	sta $02ff			sta PrecisionV
=6					CL	.var *-(WordListLink+wh_Xt)
=$83d9					en = *	; remember here
>83d1	06					.byte CL	;wh_CodeLength
.83d9	60		rts				rts
>83da	46 44 72 6f 70			L1:	.text "FDrop"	;  name of word as a string, ending at wh_NameLastChar
>83df	05					.byte (("FDrop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83e0	4e 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83e3	00					.byte 0	;wh_Flags	dictionary flags
=33631					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83e4	e6 4c		inc $4c		FDrop:		inc fp
=2					CL	.var *-(WordListLink+wh_Xt)
=$83e6					en = *	; remember here
>83e2	02					.byte CL	;wh_CodeLength
.83e6	60		rts				rts
>83e7	46 32 44 72 6f 70		L1:	.text "F2Drop"	;  name of word as a string, ending at wh_NameLastChar
>83ed	06					.byte (("F2Drop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83ee	5f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83f1	00					.byte 0	;wh_Flags	dictionary flags
=33645					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83f2	e6 4c		inc $4c		F2Drop:		inc fp
.83f4	e6 4c		inc $4c				inc fp
=4					CL	.var *-(WordListLink+wh_Xt)
=$83f6					en = *	; remember here
>83f0	04					.byte CL	;wh_CodeLength
.83f6	60		rts				rts
>83f7	46 44 65 70 74 68		L1:	.text "FDepth"	;  name of word as a string, ending at wh_NameLastChar
>83fd	06					.byte (("FDepth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83fe	6d 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8400	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8401	08					.byte NN	;wh_Flags	dictionary flags
=33661					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8402	a9 0a		lda #$0a	FDepth:		lda #FDim
.8404	38		sec				sec
.8405	e5 4c		sbc $4c				sbc fp
.8407	4c a1 b7	jmp $b7a1			jmp PushZA
=8					CL	.var *-(WordListLink+wh_Xt)
=$840a					en = *	; remember here
>8400	08					.byte CL	;wh_CodeLength
>840a	46 41 6c 6c 6f 63 58		L1:	.text "FAllocX"	;  name of word as a string, ending at wh_NameLastChar
>8411	07					.byte (("FAllocX"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8412	7d 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8414	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8415	08					.byte NN	;wh_Flags	dictionary flags
=33681					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8416	86 14		stx $14		FAllocX:	stx tmp1+0	; save data stack index
.8418	a6 4c		ldx $4c				ldx fp		; X= floating point stack index
.841a	ca		dex				dex		; alloc FP stack entry
.841b	e0 0a		cpx #$0a			cpx #FDim	; overflow or underflow?
.841d	b0 03		bcs $8422			bcs _err
.841f	86 4c		stx $4c				stx fp
.8421	60		rts				rts		; return X= FP stack index
.8422	0a		asl a		_err:		asl a		; save sign bit
.8423	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.8425	6a		ror a				ror a		; restore sign bit
.8426	4c fd b3	jmp $b3fd			jmp Throw_FPStack
=19					CL	.var *-(WordListLink+wh_Xt)
=$8429					en = *	; remember here
>8414	13					.byte CL	;wh_CodeLength
>8429	46 4d 61 78			L1:	.text "FMax"	;  name of word as a string, ending at wh_NameLastChar
>842d	04					.byte (("FMax"[-1]&7)<<5)+(*-L1)	;wh_HNL
>842e	91 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8430	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8431	08					.byte NN	;wh_Flags	dictionary flags
=33709					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8432	20 20 86	jsr $8620	FMax:		jsr FCmpA
.8435	10 ad		bpl $83e4			bpl FDrop
.8437	30 19		bmi $8452			bmi FNip
=7					CL	.var *-(WordListLink+wh_Xt)
=$8439					en = *	; remember here
>8430	07					.byte CL	;wh_CodeLength
>8439	46 4d 69 6e			L1:	.text "FMin"	;  name of word as a string, ending at wh_NameLastChar
>843d	c4					.byte (("FMin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>843e	ad 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8440	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8441	08					.byte NN	;wh_Flags	dictionary flags
=33725					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8442	20 20 86	jsr $8620	FMin:		jsr FCmpA
.8445	30 9d		bmi $83e4			bmi FDrop
.8447	10 09		bpl $8452			bpl FNip
=7					CL	.var *-(WordListLink+wh_Xt)
=$8449					en = *	; remember here
>8440	07					.byte CL	;wh_CodeLength
>8449	46 4e 69 70			L1:	.text "FNip"	;  name of word as a string, ending at wh_NameLastChar
>844d	04					.byte (("FNip"[-1]&7)<<5)+(*-L1)	;wh_HNL
>844e	bd 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8450	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8451	00					.byte 0	;wh_Flags	dictionary flags
=33741					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8452	86 14		stx $14		FNip:		stx tmp1		; save data stack index
.8454	a6 4c		ldx $4c				ldx fp			; get FP stack index
.8456	b5 4d		lda $4d,x			lda FSExp+0,x		; copy exponent
.8458	95 4e		sta $4e,x			sta FSExp+1,x
.845a	b5 57		lda $57,x			lda FSMant0+0,x		; copy mantissa
.845c	95 58		sta $58,x			sta FSMant0+1,x
.845e	b5 61		lda $61,x			lda FSMant1+0,x
.8460	95 62		sta $62,x			sta FSMant1+1,x
.8462	b5 6b		lda $6b,x			lda FSMant2+0,x
.8464	95 6c		sta $6c,x			sta FSMant2+1,x
.8466	b5 75		lda $75,x			lda FSMant3+0,x
.8468	95 76		sta $76,x			sta FSMant3+1,x
.846a	e6 4c		inc $4c				inc fp			; FDrop
.846c	a6 14		ldx $14				ldx tmp1		; restore data stack index
=28					CL	.var *-(WordListLink+wh_Xt)
=$846e					en = *	; remember here
>8450	1c					.byte CL	;wh_CodeLength
.846e	60		rts				rts
>846f	46 44 75 70			L1:	.text "FDup"	;  name of word as a string, ending at wh_NameLastChar
>8473	04					.byte (("FDup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8474	cd 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8476	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8477	00					.byte 0	;wh_Flags	dictionary flags
=33779					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8478	20 16 84	jsr $8416	FDup:		jsr FAllocX		; alloc FP stack entry
.847b	b5 4e		lda $4e,x			lda FSExp+1,x		; copy exponent
.847d	95 4d		sta $4d,x			sta FSExp+0,x
.847f	b5 58		lda $58,x			lda FSMant0+1,x		; copy mantissa
.8481	95 57		sta $57,x			sta FSMant0+0,x
.8483	b5 62		lda $62,x			lda FSMant1+1,x
.8485	95 61		sta $61,x			sta FSMant1+0,x
.8487	b5 6c		lda $6c,x			lda FSMant2+1,x
.8489	95 6b		sta $6b,x			sta FSMant2+0,x
.848b	b5 76		lda $76,x			lda FSMant3+1,x
.848d	95 75		sta $75,x			sta FSMant3+0,x
.848f	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CL	.var *-(WordListLink+wh_Xt)
=$8491					en = *	; remember here
>8476	19					.byte CL	;wh_CodeLength
.8491	60		rts				rts
>8492	46 4f 76 65 72			L1:	.text "FOver"	;  name of word as a string, ending at wh_NameLastChar
>8497	45					.byte (("FOver"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8498	f3 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>849a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>849b	00					.byte 0	;wh_Flags	dictionary flags
=33815					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.849c	20 16 84	jsr $8416	FOver:		jsr FAllocX		; alloc FP stack entry
.849f	b5 4f		lda $4f,x			lda FSExp+2,x		; copy exponent
.84a1	95 4d		sta $4d,x			sta FSExp+0,x
.84a3	b5 59		lda $59,x			lda FSMant0+2,x		; copy mantissa
.84a5	95 57		sta $57,x			sta FSMant0+0,x
.84a7	b5 63		lda $63,x			lda FSMant1+2,x
.84a9	95 61		sta $61,x			sta FSMant1+0,x
.84ab	b5 6d		lda $6d,x			lda FSMant2+2,x
.84ad	95 6b		sta $6b,x			sta FSMant2+0,x
.84af	b5 77		lda $77,x			lda FSMant3+2,x
.84b1	95 75		sta $75,x			sta FSMant3+0,x
.84b3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CL	.var *-(WordListLink+wh_Xt)
=$84b5					en = *	; remember here
>849a	19					.byte CL	;wh_CodeLength
.84b5	60		rts				rts
>84b6	46 50 69 63 6b			L1:	.text "FPick"	;  name of word as a string, ending at wh_NameLastChar
>84bb	65					.byte (("FPick"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84bc	17 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84bf	00					.byte 0	;wh_Flags	dictionary flags
=33851					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84c0	20 89 b3	jsr $b389	FPick:		jsr PopA		; pop u
.84c3	18		clc		FPickA:		clc
.84c4	65 4c		adc $4c				adc fp
.84c6	a8		tay		FPick3:		tay
.84c7	20 16 84	jsr $8416			jsr FAllocX
.84ca	b9 4d 00	lda $004d,y			lda FSExp,y		; copy exponent
.84cd	95 4d		sta $4d,x			sta FSExp,x
.84cf	b9 57 00	lda $0057,y			lda FSMant0,y		; copy mantissa
.84d2	95 57		sta $57,x			sta FSMant0,x
.84d4	b9 61 00	lda $0061,y			lda FSMant1,y
.84d7	95 61		sta $61,x			sta FSMant1,x
.84d9	b9 6b 00	lda $006b,y			lda FSMant2,y
.84dc	95 6b		sta $6b,x			sta FSMant2,x
.84de	b9 75 00	lda $0075,y			lda FSMant3,y
.84e1	95 75		sta $75,x			sta FSMant3,x
.84e3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=37					CL	.var *-(WordListLink+wh_Xt)
=$84e5					en = *	; remember here
>84be	25					.byte CL	;wh_CodeLength
.84e5	60		rts				rts
>84e6	46 32 44 75 70			L1:	.text "F2Dup"	;  name of word as a string, ending at wh_NameLastChar
>84eb	05					.byte (("F2Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84ec	3b 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84ef	08					.byte NN	;wh_Flags	dictionary flags
=33899					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84f0	20 9c 84	jsr $849c	F2Dup:		jsr FOver
.84f3	4c 9c 84	jmp $849c			jmp FOver
=6					CL	.var *-(WordListLink+wh_Xt)
=$84f6					en = *	; remember here
>84ee	06					.byte CL	;wh_CodeLength
>84f6	46 53 77 61 70			L1:	.text "FSwap"	;  name of word as a string, ending at wh_NameLastChar
>84fb	05					.byte (("FSwap"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84fc	6b 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84ff	00					.byte 0	;wh_Flags	dictionary flags
=33915					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8500	86 14		stx $14		FSwap:		stx tmp1		; save data stack index
.8502	a6 4c		ldx $4c				ldx fp			; X=FP stack index
.8504	b5 4d		lda $4d,x			lda FSExp+0,x		; do FSExp
.8506	b4 4e		ldy $4e,x			ldy FSExp+1,x
.8508	95 4e		sta $4e,x			sta FSExp+1,x
.850a	94 4d		sty $4d,x			sty FSExp+0,x
.850c	b5 57		lda $57,x			lda FSMant0+0,x		; do FSMant0
.850e	b4 58		ldy $58,x			ldy FSMant0+1,x
.8510	95 58		sta $58,x			sta FSMant0+1,x
.8512	94 57		sty $57,x			sty FSMant0+0,x
.8514	b5 61		lda $61,x			lda FSMant1+0,x		; do FSMant1
.8516	b4 62		ldy $62,x			ldy FSMant1+1,x
.8518	95 62		sta $62,x			sta FSMant1+1,x
.851a	94 61		sty $61,x			sty FSMant1+0,x
.851c	b5 6b		lda $6b,x			lda FSMant2+0,x		; do FSMant2
.851e	b4 6c		ldy $6c,x			ldy FSMant2+1,x
.8520	95 6c		sta $6c,x			sta FSMant2+1,x
.8522	94 6b		sty $6b,x			sty FSMant2+0,x
.8524	b5 75		lda $75,x			lda FSMant3+0,x		; do FSMant3
.8526	b4 76		ldy $76,x			ldy FSMant3+1,x
.8528	95 76		sta $76,x			sta FSMant3+1,x
.852a	94 75		sty $75,x			sty FSMant3+0,x
.852c	a6 14		ldx $14				ldx tmp1		; restore data stack index
=46					CL	.var *-(WordListLink+wh_Xt)
=$852e					en = *	; remember here
>84fe	2e					.byte CL	;wh_CodeLength
.852e	60		rts				rts
>852f	46 54 75 63 6b			L1:	.text "FTuck"	;  name of word as a string, ending at wh_NameLastChar
>8534	65					.byte (("FTuck"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8535	7b 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8537	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8538	08					.byte NN	;wh_Flags	dictionary flags
=33972					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8539	20 00 85	jsr $8500	FTuck:		jsr FSwap
.853c	4c 9c 84	jmp $849c			jmp FOver
=6					CL	.var *-(WordListLink+wh_Xt)
=$853f					en = *	; remember here
>8537	06					.byte CL	;wh_CodeLength
>853f	46 52 6f 74			L1:	.text "FRot"	;  name of word as a string, ending at wh_NameLastChar
>8543	84					.byte (("FRot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8544	b4 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8546	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8547	00					.byte 0	;wh_Flags	dictionary flags
=33987					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8548	86 14		stx $14		FRot:		stx tmp1		; save data stack index
.854a	a5 4c		lda $4c				lda fp			; for FSMant3, FSMant2, FSMant1, FSMant0, FSExp
.854c	18		clc				clc
.854d	69 28		adc #$28			adc #4*FDim
.854f	d0 03		bne $8554			bne _3
.8551	8a		txa		_2:		txa			;    next byte
.8552	e9 0a		sbc #$0a			sbc #FDim
.8554	aa		tax		_3:		tax
.8555	b5 4f		lda $4f,x			lda FSExp+2,x		;   do a byte
.8557	b4 4e		ldy $4e,x			ldy FSExp+1,x
.8559	94 4f		sty $4f,x			sty FSExp+2,x
.855b	b4 4d		ldy $4d,x			ldy FSExp+0,x
.855d	94 4e		sty $4e,x			sty FSExp+1,x
.855f	95 4d		sta $4d,x			sta FSExp+0,x
.8561	e4 4c		cpx $4c				cpx fp			; done?
.8563	d0 ec		bne $8551			bne _2
.8565	a6 14		ldx $14				ldx tmp1		; restore param stack index
=31					CL	.var *-(WordListLink+wh_Xt)
=$8567					en = *	; remember here
>8546	1f					.byte CL	;wh_CodeLength
.8567	60		rts				rts
>8568	46 2d 52 6f 74			L1:	.text "F-Rot"	;  name of word as a string, ending at wh_NameLastChar
>856d	85					.byte (("F-Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>856e	c3 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8570	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8571	08					.byte NN	;wh_Flags	dictionary flags
=34029					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8572	20 48 85	jsr $8548	FMRot:		jsr FRot
.8575	4c 48 85	jmp $8548			jmp FRot
=6					CL	.var *-(WordListLink+wh_Xt)
=$8578					en = *	; remember here
>8570	06					.byte CL	;wh_CodeLength
>8578	46 40				L1:	.text "F@"	;  name of word as a string, ending at wh_NameLastChar
>857a	02					.byte (("F@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>857b	ed 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>857d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>857e	00					.byte 0	;wh_Flags	dictionary flags
=34042					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.857f	20 a5 b3	jsr $b3a5	FAt:		jsr PopYA		; pop addr
.8582	85 16		sta $16		FAt_YA:		sta tmp2+0		; save addr
.8584	84 17		sty $17				sty tmp2+1
.8586	20 16 84	jsr $8416	FAt_Tmp2:	jsr FAllocX		; alloc FP stack entry
.8589	a0 00		ldy #$00			ldy #0			; copy mantissa
.858b	b1 16		lda ($16),y			lda (tmp2),y
.858d	95 75		sta $75,x			sta FSMant3,x
.858f	c8		iny				iny
.8590	b1 16		lda ($16),y			lda (tmp2),y
.8592	95 6b		sta $6b,x			sta FSMant2,x
.8594	c8		iny				iny
.8595	b1 16		lda ($16),y			lda (tmp2),y
.8597	95 61		sta $61,x			sta FSMant1,x
.8599	c8		iny				iny
.859a	b1 16		lda ($16),y			lda (tmp2),y
.859c	95 57		sta $57,x			sta FSMant0,x
.859e	c8		iny				iny			; copy exponent
.859f	b1 16		lda ($16),y			lda (tmp2),y
.85a1	95 4d		sta $4d,x			sta FSExp,x
.85a3	a6 14		ldx $14				ldx tmp1		; restore data stack index
=38					CL	.var *-(WordListLink+wh_Xt)
=$85a5					en = *	; remember here
>857d	26					.byte CL	;wh_CodeLength
.85a5	60		rts				rts
>85a6	46 21				L1:	.text "F!"	;  name of word as a string, ending at wh_NameLastChar
>85a8	22					.byte (("F!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>85a9	fa 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85ac	00					.byte 0	;wh_Flags	dictionary flags
=34088					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85ad	20 a5 b3	jsr $b3a5	FStore:		jsr PopYA		; pop addr
.85b0	85 14		sta $14		FStore_YA:	sta tmp1+0		; save addr
.85b2	84 15		sty $15				sty tmp1+1
.85b4	86 16		stx $16				stx tmp2		; save data stack index
.85b6	a6 4c		ldx $4c				ldx fp			; Y= FP stack index
.85b8	b5 75		lda $75,x			lda FSMant3,x		; copy mantissa
.85ba	a0 00		ldy #$00			ldy #0
.85bc	91 14		sta ($14),y			sta (tmp1),y
.85be	b5 6b		lda $6b,x			lda FSMant2,x
.85c0	c8		iny				iny
.85c1	91 14		sta ($14),y			sta (tmp1),y
.85c3	b5 61		lda $61,x			lda FSMant1,x
.85c5	c8		iny				iny
.85c6	91 14		sta ($14),y			sta (tmp1),y
.85c8	b5 57		lda $57,x			lda FSMant0,x
.85ca	c8		iny				iny
.85cb	91 14		sta ($14),y			sta (tmp1),y
.85cd	b5 4d		lda $4d,x			lda FSExp,x		; copy exponent
.85cf	c8		iny				iny
.85d0	91 14		sta ($14),y			sta (tmp1),y
.85d2	e6 4c		inc $4c				inc fp			; FDrop
.85d4	a6 16		ldx $16				ldx tmp2		; restore data stack index
=41					CL	.var *-(WordListLink+wh_Xt)
=$85d6					en = *	; remember here
>85ab	29					.byte CL	;wh_CodeLength
.85d6	60		rts				rts
>85d7	46 2c				L1:	.text "F,"	;  name of word as a string, ending at wh_NameLastChar
>85d9	82					.byte (("F,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>85da	28 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85dd	08					.byte NN	;wh_Flags	dictionary flags
=34137					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85de	a5 00		lda $00		FComma:		lda cp+0
.85e0	a4 01		ldy $01				ldy cp+1
.85e2	20 b0 85	jsr $85b0			jsr FStore_YA
.85e5	a9 05		lda #$05			lda #5			; Float
.85e7	20 a1 b7	jsr $b7a1			jsr PushZA
.85ea	4c 83 c0	jmp $c083			jmp Allot
=15					CL	.var *-(WordListLink+wh_Xt)
=$85ed					en = *	; remember here
>85dc	0f					.byte CL	;wh_CodeLength
>85ed	46 30 21			L1:	.text "F0!"	;  name of word as a string, ending at wh_NameLastChar
>85f0	23					.byte (("F0!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>85f1	59 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85f4	08					.byte NN	;wh_Flags	dictionary flags
=34160					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85f5	20 a5 b3	jsr $b3a5	FZStore:	jsr PopYA		; pop addr
.85f8	85 14		sta $14		FZStore_YA:	sta tmp1+0
.85fa	84 15		sty $15				sty tmp1+1
.85fc	a9 00		lda #$00			lda #0
.85fe	a0 04		ldy #$04			ldy #5-1
.8600	91 14		sta ($14),y	-		sta (tmp1),y
.8602	88		dey				dey
.8603	10 fb		bpl $8600			bpl -
=16					CL	.var *-(WordListLink+wh_Xt)
=$8605					en = *	; remember here
>85f3	10					.byte CL	;wh_CodeLength
.8605	60		rts				rts
>8606	46 43 6d 70			L1:	.text "FCmp"	;  name of word as a string, ending at wh_NameLastChar
>860a	04					.byte (("FCmp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>860b	70 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>860d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>860e	08					.byte NN	;wh_Flags	dictionary flags
=34186					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.860f	20 20 86	jsr $8620			jsr FCmpA		; compare #s
.8612	a8		tay				tay			; return >0, 0, <0
.8613	4c 5f b7	jmp $b75f			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$8616					en = *	; remember here
>860d	07					.byte CL	;wh_CodeLength
>8616	46 43 6d 70 41			L1:	.text "FCmpA"	;  name of word as a string, ending at wh_NameLastChar
>861b	25					.byte (("FCmpA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>861c	8a 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>861e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>861f	08					.byte NN	;wh_Flags	dictionary flags
=34203					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8620	86 14		stx $14		FCmpA:		stx tmp1		; save data stack index
.8622	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.8624	b5 57		lda $57,x			lda FSMant0+0,x		; r2 mantissa = 0 ?
.8626	f0 35		beq $865d			beq _r2Zero
.8628	b4 58		ldy $58,x			ldy FSMant0+1,x		; r1 mantissa = 0 ?
.862a	f0 2b		beq $8657			beq _r1Zero
.862c	55 58		eor $58,x			eor FSMant0+1,x		; compare mantissa sign
.862e	30 3d		bmi $866d			bmi _MantissaSignDifferent
.8630	38		sec				sec			; compare exponent
.8631	b5 4e		lda $4e,x			lda FSExp+1,x
.8633	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8635	d0 2b		bne $8662			bne _ExponentDifferent
.8637	98		tya				tya			; compare mantissa MSB
.8638	f5 57		sbc $57,x			sbc FSMant0+0,x		;   always same sign so can't overflow
.863a	d0 17		bne $8653			bne _13
.863c	b5 62		lda $62,x			lda FSMant1+1,x		; compare mantissa 1
.863e	f5 61		sbc $61,x			sbc FSMant1+0,x
.8640	d0 0c		bne $864e			bne _12
.8642	b5 6c		lda $6c,x			lda FSMant2+1,x		; compare mantissa 2
.8644	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8646	d0 06		bne $864e			bne _12
.8648	b5 76		lda $76,x			lda FSMant3+1,x		; compare mantissa LSB
.864a	f5 75		sbc $75,x			sbc FSMant3+0,x
.864c	f0 05		beq $8653			beq _13
.864e	6a		ror a		_12:		ror a
.864f	49 80		eor #$80	_14:		eor #$80
.8651	09 01		ora #$01			ora #1
.8653	a6 14		ldx $14		_13:		ldx tmp1		; restore data stack index
.8655	a8		tay				tay			; set CPU flags
.8656	60		rts				rts
.8657	b5 57		lda $57,x	_r1Zero:	lda FSMant0+0,x		; return r2
.8659	d0 f4		bne $864f			bne _14
.865b	f0 f6		beq $8653			beq _13
.865d	b5 58		lda $58,x	_r2Zero:	lda FSMant0+1,x		; return 0-r1
.865f	4c 53 86	jmp $8653			jmp _13
.8662					_ExponentDifferent:
.8662	50 02		bvc $8666			bvc +
.8664	49 80		eor #$80			eor #$80
.8666					+
.8666	55 57		eor $57,x			eor FSMant0+0,x
.8668	a6 14		ldx $14				ldx tmp1		; restore data stack index
.866a	09 01		ora #$01			ora #1			; set CPU flags
.866c	60		rts				rts
.866d					_MantissaSignDifferent:
.866d	98		tya				tya
.866e	a6 14		ldx $14				ldx tmp1		; restore data stack index
.8670	09 01		ora #$01			ora #1
.8672	60		rts				rts
=83					CL	.var *-(WordListLink+wh_Xt)
=$8673					en = *	; remember here
>861e	53					.byte CL	;wh_CodeLength
>8673	46 6c 6f 6f 72			L1:	.text "Floor"	;  name of word as a string, ending at wh_NameLastChar
>8678	45					.byte (("Floor"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8679	9b 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>867b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>867c	08					.byte NN	;wh_Flags	dictionary flags
=34296					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.867d	a4 4c		ldy $4c		Floor:		ldy fp
.867f	b9 57 00	lda $0057,y			lda FSMant0,y		; negative?
.8682	10 19		bpl $869d			bpl _a
.8684	b9 4d 00	lda $004d,y			lda FSExp,y		; > -1 ?
.8687	10 14		bpl $869d			bpl _a
.8689	a9 80		lda #$80			lda #$80		; return -1
.868b	99 57 00	sta $0057,y			sta FSMant0,y
.868e	a9 00		lda #$00			lda #0
.8690	99 4d 00	sta $004d,y			sta FSExp,y
.8693	99 61 00	sta $0061,y			sta FSMant1,y
.8696	99 6b 00	sta $006b,y			sta FSMant2,y
.8699	99 75 00	sta $0075,y			sta FSMant3,y
.869c	60		rts				rts
.869d	a9 1f		lda #$1f	_a:		lda #31
.869f	20 a5 86	jsr $86a5			jsr FIntAlignA
.86a2	4c a0 8a	jmp $8aa0			jmp FNorm
=40					CL	.var *-(WordListLink+wh_Xt)
=$86a5					en = *	; remember here
>867b	28					.byte CL	;wh_CodeLength
.86a5					FIntAlignA:
.86a5	85 16		sta $16				sta tmp2+0		; save alignment
.86a7	46 15		lsr $15				lsr tmp1+1		; init saved lo bit
.86a9	86 14		stx $14				stx tmp1+0		; save data stack index
.86ab	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.86ad	b5 57		lda $57,x			lda FSMant0,x
.86af	b4 4d		ldy $4d,x			ldy FSExp,x
.86b1	10 18		bpl $86cb			bpl _18
.86b3	a4 16		ldy $16				ldy tmp2+0		; return zero
.86b5	a9 00		lda #$00			lda #0
.86b7	95 61		sta $61,x			sta FSMant1,x
.86b9	95 6b		sta $6b,x			sta FSMant2,x
.86bb	95 75		sta $75,x			sta FSMant3,x
.86bd	f0 10		beq $86cf			beq _30
.86bf	c8		iny		_12:		iny			; exp += 1
.86c0	c9 80		cmp #$80			cmp #$80		; mantissa >>=1
.86c2	6a		ror a				ror a
.86c3	76 61		ror $61,x			ror FSMant1,x
.86c5	76 6b		ror $6b,x			ror FSMant2,x
.86c7	76 75		ror $75,x			ror FSMant3,x
.86c9	66 15		ror $15				ror tmp1+1		; save lo bit
.86cb	c4 16		cpy $16		_18:		cpy tmp2+0		; while exp<alignment
.86cd	90 f0		bcc $86bf			bcc _12
.86cf	95 57		sta $57,x	_30:		sta FSMant0,x
.86d1	94 4d		sty $4d,x			sty FSExp,x
.86d3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.86d5	06 15		asl $15				asl tmp1+1		; set carry bit
.86d7	60		rts				rts
>86d8	46 54 72 75 6e 63		L1:	.text "FTrunc"	;  name of word as a string, ending at wh_NameLastChar
>86de	66					.byte (("FTrunc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>86df	f8 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86e2	08					.byte NN	;wh_Flags	dictionary flags
=34398					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86e3	a4 4c		ldy $4c		FTrunc:		ldy fp
.86e5	b9 57 00	lda $0057,y			lda FSMant0,y
.86e8	10 93		bpl $867d			bpl Floor
.86ea	20 a2 8b	jsr $8ba2			jsr FNegate
.86ed	20 7d 86	jsr $867d			jsr Floor
.86f0	4c a2 8b	jmp $8ba2			jmp FNegate
>86f3	46 52 6f 75 6e 64		L1:	.text "FRound"	;  name of word as a string, ending at wh_NameLastChar
>86f9	86					.byte (("FRound"[-1]&7)<<5)+(*-L1)	;wh_HNL
>86fa	5e 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86fd	08					.byte NN	;wh_Flags	dictionary flags
=34425					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86fe	a9 1f		lda #$1f	FRound:		lda #31
.8700	20 a5 86	jsr $86a5			jsr FIntAlignA
.8703	90 03		bcc $8708			bcc _15
.8705	4c 5e 8b	jmp $8b5e			jmp F1Plus
.8708	4c a0 8a	jmp $8aa0	_15:		jmp FNorm
=13					CL	.var *-(WordListLink+wh_Xt)
=$870b					en = *	; remember here
>86fc	0d					.byte CL	;wh_CodeLength
>870b	46 49 6e 74 46 72 63		L1:	.text "FIntFrc"	;  name of word as a string, ending at wh_NameLastChar
>8712	67					.byte (("FIntFrc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8713	79 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8715	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8716	08					.byte NN	;wh_Flags	dictionary flags
=34450					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8717	20 78 84	jsr $8478	FIntFrc:	jsr FDup	; ( r1 r1 )
.871a	20 7d 86	jsr $867d			jsr Floor	; ( r1 rint )
.871d	20 39 85	jsr $8539			jsr FTuck	; ( rint r1 rint )
.8720	20 6b 8b	jsr $8b6b			jsr FMinus	; ( rint rfrac )
.8723	4c 00 85	jmp $8500			jmp FSwap	; ( rfrac rint )
=15					CL	.var *-(WordListLink+wh_Xt)
=$8726					en = *	; remember here
>8715	0f					.byte CL	;wh_CodeLength
>8726	46 30 3d			L1:	.text "F0="	;  name of word as a string, ending at wh_NameLastChar
>8729	a3					.byte (("F0="[-1]&7)<<5)+(*-L1)	;wh_HNL
>872a	92 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>872c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>872d	08					.byte NN	;wh_Flags	dictionary flags
=34473					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.872e	a4 4c		ldy $4c		FZEq:		ldy fp
.8730	b9 57 00	lda $0057,y			lda FSMant0,y
.8733	d0 26		bne $875b			bne FFalse1
.8735					FTrue1:
.8735	e6 4c		inc $4c				inc fp		; FDrop
.8737	4c 7f b7	jmp $b77f			jmp True	; return true
=12					CL	.var *-(WordListLink+wh_Xt)
=$873a					en = *	; remember here
>872c	0c					.byte CL	;wh_CodeLength
>873a	46 30 3c 3e			L1:	.text "F0<>"	;  name of word as a string, ending at wh_NameLastChar
>873e	c4					.byte (("F0<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>873f	a9 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8741	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8742	08					.byte NN	;wh_Flags	dictionary flags
=34494					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8743	a4 4c		ldy $4c		FZNe:		ldy fp
.8745	b9 57 00	lda $0057,y			lda FSMant0,y
.8748	f0 11		beq $875b			beq FFalse1
.874a	d0 e9		bne $8735			bne FTrue1
=9					CL	.var *-(WordListLink+wh_Xt)
=$874c					en = *	; remember here
>8741	09					.byte CL	;wh_CodeLength
>874c	46 30 3c			L1:	.text "F0<"	;  name of word as a string, ending at wh_NameLastChar
>874f	83					.byte (("F0<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8750	be 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8752	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8753	08					.byte NN	;wh_Flags	dictionary flags
=34511					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8754	a4 4c		ldy $4c		FZLt:		ldy fp
.8756	b9 57 00	lda $0057,y			lda FSMant0,y
.8759	30 da		bmi $8735			bmi FTrue1
.875b					FFalse1:
.875b	e6 4c		inc $4c				inc fp		; FDrop
.875d	4c 92 b7	jmp $b792			jmp False	; return false
=12					CL	.var *-(WordListLink+wh_Xt)
=$8760					en = *	; remember here
>8752	0c					.byte CL	;wh_CodeLength
>8760	46 30 3e 3d			L1:	.text "F0>="	;  name of word as a string, ending at wh_NameLastChar
>8764	a4					.byte (("F0>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>8765	cf 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8767	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8768	08					.byte NN	;wh_Flags	dictionary flags
=34532					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8769	a4 4c		ldy $4c		FZGe:		ldy fp
.876b	b9 57 00	lda $0057,y			lda FSMant0,y
.876e	10 c5		bpl $8735			bpl FTrue1
.8770	30 e9		bmi $875b			bmi FFalse1
=9					CL	.var *-(WordListLink+wh_Xt)
=$8772					en = *	; remember here
>8767	09					.byte CL	;wh_CodeLength
>8772	46 30 3e			L1:	.text "F0>"	;  name of word as a string, ending at wh_NameLastChar
>8775	c3					.byte (("F0>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8776	e4 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8778	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8779	08					.byte NN	;wh_Flags	dictionary flags
=34549					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.877a	a4 4c		ldy $4c		FZGt:		ldy fp
.877c	b9 57 00	lda $0057,y			lda FSMant0,y
.877f	30 da		bmi $875b			bmi FFalse1
.8781	d0 b2		bne $8735			bne FTrue1
.8783	f0 d6		beq $875b			beq FFalse1
=11					CL	.var *-(WordListLink+wh_Xt)
=$8785					en = *	; remember here
>8778	0b					.byte CL	;wh_CodeLength
>8785	46 30 3c 3d			L1:	.text "F0<="	;  name of word as a string, ending at wh_NameLastChar
>8789	a4					.byte (("F0<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>878a	f5 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>878c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>878d	08					.byte NN	;wh_Flags	dictionary flags
=34569					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.878e	a4 4c		ldy $4c		FZLe:		ldy fp
.8790	b9 57 00	lda $0057,y			lda FSMant0,y
.8793	30 a0		bmi $8735			bmi FTrue1
.8795	d0 c4		bne $875b			bne FFalse1
.8797	f0 9c		beq $8735			beq FTrue1
=11					CL	.var *-(WordListLink+wh_Xt)
=$8799					en = *	; remember here
>878c	0b					.byte CL	;wh_CodeLength
>8799	46 3c				L1:	.text "F<"	;  name of word as a string, ending at wh_NameLastChar
>879b	82					.byte (("F<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>879c	09 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>879e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>879f	08					.byte NN	;wh_Flags	dictionary flags
=34587					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87a0	20 20 86	jsr $8620	FLt:		jsr FCmpA
.87a3	30 35		bmi $87da			bmi FTrue2
.87a5					FFalse2:
.87a5	e6 4c		inc $4c				inc fp		; FDrop
.87a7	e6 4c		inc $4c				inc fp		; FDrop
.87a9	4c 92 b7	jmp $b792			jmp False	; return False
=12					CL	.var *-(WordListLink+wh_Xt)
=$87ac					en = *	; remember here
>879e	0c					.byte CL	;wh_CodeLength
>87ac	46 3e 3d			L1:	.text "F>="	;  name of word as a string, ending at wh_NameLastChar
>87af	a3					.byte (("F>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>87b0	1b 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87b3	08					.byte NN	;wh_Flags	dictionary flags
=34607					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87b4	20 20 86	jsr $8620	FGe:		jsr FCmpA
.87b7	10 21		bpl $87da			bpl FTrue2
.87b9	30 ea		bmi $87a5			bmi FFalse2
=7					CL	.var *-(WordListLink+wh_Xt)
=$87bb					en = *	; remember here
>87b2	07					.byte CL	;wh_CodeLength
>87bb	46 3e				L1:	.text "F>"	;  name of word as a string, ending at wh_NameLastChar
>87bd	c2					.byte (("F>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>87be	2f 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87c0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87c1	08					.byte NN	;wh_Flags	dictionary flags
=34621					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87c2	20 20 86	jsr $8620	FGt:		jsr FCmpA
.87c5	30 de		bmi $87a5			bmi FFalse2
.87c7	d0 11		bne $87da			bne FTrue2
.87c9	f0 da		beq $87a5			beq FFalse2
=9					CL	.var *-(WordListLink+wh_Xt)
=$87cb					en = *	; remember here
>87c0	09					.byte CL	;wh_CodeLength
>87cb	46 3c 3d			L1:	.text "F<="	;  name of word as a string, ending at wh_NameLastChar
>87ce	a3					.byte (("F<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>87cf	3d 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87d2	08					.byte NN	;wh_Flags	dictionary flags
=34638					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87d3	20 20 86	jsr $8620	FLe:		jsr FCmpA
.87d6	30 02		bmi $87da			bmi FTrue2
.87d8	d0 cb		bne $87a5			bne FFalse2
.87da					FTrue2:
.87da	e6 4c		inc $4c				inc fp		; FDrop
.87dc	e6 4c		inc $4c				inc fp		; FDrop
.87de	4c 7f b7	jmp $b77f			jmp True	; return True
=14					CL	.var *-(WordListLink+wh_Xt)
=$87e1					en = *	; remember here
>87d1	0e					.byte CL	;wh_CodeLength
>87e1	46 3c 3e			L1:	.text "F<>"	;  name of word as a string, ending at wh_NameLastChar
>87e4	c3					.byte (("F<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>87e5	4e 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87e8	08					.byte NN	;wh_Flags	dictionary flags
=34660					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87e9	20 20 86	jsr $8620	FNe:		jsr FCmpA
.87ec	d0 ec		bne $87da			bne FTrue2
.87ee	f0 b5		beq $87a5			beq FFalse2
=7					CL	.var *-(WordListLink+wh_Xt)
=$87f0					en = *	; remember here
>87e7	07					.byte CL	;wh_CodeLength
>87f0	46 3d				L1:	.text "F="	;  name of word as a string, ending at wh_NameLastChar
>87f2	a2					.byte (("F="[-1]&7)<<5)+(*-L1)	;wh_HNL
>87f3	64 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87f5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87f6	08					.byte NN	;wh_Flags	dictionary flags
=34674					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87f7	20 20 86	jsr $8620	FEq:		jsr FCmpA
.87fa	d0 a9		bne $87a5			bne FFalse2
.87fc	f0 dc		beq $87da			beq FTrue2
=7					CL	.var *-(WordListLink+wh_Xt)
=$87fe					en = *	; remember here
>87f5	07					.byte CL	;wh_CodeLength
>87fe	46 7e 41 62 73			L1:	.text "F~Abs"	;  name of word as a string, ending at wh_NameLastChar
>8803	65					.byte (("F~Abs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8804	72 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8806	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8807	08					.byte NN	;wh_Flags	dictionary flags
=34691					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8808	20 72 85	jsr $8572	FTAbs:		jsr FMRot
.880b	20 6b 8b	jsr $8b6b			jsr FMinus
.880e	20 c9 8b	jsr $8bc9			jsr FAbs
.8811	4c c2 87	jmp $87c2			jmp FGt
=12					CL	.var *-(WordListLink+wh_Xt)
=$8814					en = *	; remember here
>8806	0c					.byte CL	;wh_CodeLength
>8814	46 7e 52 65 6c			L1:	.text "F~Rel"	;  name of word as a string, ending at wh_NameLastChar
>8819	85					.byte (("F~Rel"[-1]&7)<<5)+(*-L1)	;wh_HNL
>881a	83 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>881c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>881d	08					.byte NN	;wh_Flags	dictionary flags
=34713					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.881e	20 9c 84	jsr $849c	FTRel:		jsr FOver
.8821	a9 03		lda #$03			lda #3
.8823	20 c3 84	jsr $84c3			jsr FPickA
.8826	20 29 8b	jsr $8b29			jsr FPlus
.8829	20 c9 8b	jsr $8bc9			jsr FAbs
.882c	20 fd 8b	jsr $8bfd			jsr FStar		; r1 r2 r3*|r1+r2|
.882f	20 72 85	jsr $8572			jsr FMRot		; r3*|r1+r2| r1 r2
.8832	20 6b 8b	jsr $8b6b			jsr FMinus
.8835	20 c9 8b	jsr $8bc9			jsr FAbs
.8838	4c c2 87	jmp $87c2			jmp FGt
=29					CL	.var *-(WordListLink+wh_Xt)
=$883b					en = *	; remember here
>881c	1d					.byte CL	;wh_CodeLength
>883b	46 7e				L1:	.text "F~"	;  name of word as a string, ending at wh_NameLastChar
>883d	c2					.byte (("F~"[-1]&7)<<5)+(*-L1)	;wh_HNL
>883e	99 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8840	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8841	08					.byte NN	;wh_Flags	dictionary flags
=34749					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8842	a4 4c		ldy $4c		FTilde:		ldy fp
.8844	b9 57 00	lda $0057,y			lda FSMant0,y
.8847	30 06		bmi $884f			bmi _10			; r3<0
.8849	d0 bd		bne $8808			bne FTAbs		; r3>0
.884b	e6 4c		inc $4c				inc fp			; r3=0
.884d	d0 a8		bne $87f7			bne FEq
.884f	20 a2 8b	jsr $8ba2	_10:		jsr FNegate
.8852	4c 1e 88	jmp $881e			jmp FTRel
=19					CL	.var *-(WordListLink+wh_Xt)
=$8855					en = *	; remember here
>8840	13					.byte CL	;wh_CodeLength
>8855	46 56 61 72 69 61 62 6c		L1:	.text "FVariable"	;  name of word as a string, ending at wh_NameLastChar
>885d	65
>885e	a9					.byte (("FVariable"[-1]&7)<<5)+(*-L1)	;wh_HNL
>885f	bd 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8861	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8862	0c					.byte IM+NN	;wh_Flags	dictionary flags
=34782					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8863	20 7a c1	jsr $c17a	FVariable:	jsr Create		; compile word header & push PFA adr
.8866	20 b4 bb	jsr $bbb4			jsr adjust_z		; fix word code length
.8869	20 ec 88	jsr $88ec			jsr F0			; alloc & init data
.886c	4c de 85	jmp $85de			jmp FComma
=12					CL	.var *-(WordListLink+wh_Xt)
=$886f					en = *	; remember here
>8861	0c					.byte CL	;wh_CodeLength
>886f	46 4c 69 74 65 72 61 6c		L1:	.text "FLiteral"	;  name of word as a string, ending at wh_NameLastChar
>8877	88					.byte (("FLiteral"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8878	de 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>887a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>887b	0c					.byte IM+NN	;wh_Flags	dictionary flags
=34807					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.887c	20 91 88	jsr $8891	FLiteral:	jsr FLitTest
.887f	f0 0a		beq $888b			beq _Short
.8881	a9 cc		lda #$cc			lda #<FLitI		; compile JSR FLitI
.8883	a0 88		ldy #$88			ldy #>FLitI
.8885	20 e0 cc	jsr $cce0			jsr Jsr_Comma_YA
.8888	4c de 85	jmp $85de			jmp FComma		; inline operand, return
.888b	20 9d 88	jsr $889d	_Short:		jsr FLitShort
.888e	4c e0 cc	jmp $cce0			jmp Jsr_Comma_YA	; compile jsr FLitYA, & return
=21					CL	.var *-(WordListLink+wh_Xt)
=$8891					en = *	; remember here
>887a	15					.byte CL	;wh_CodeLength
.8891					FLitTest:
.8891	a4 4c		ldy $4c				ldy fp
.8893	b9 61 00	lda $0061,y			lda FSMant1,y		; will short work?
.8896	19 6b 00	ora $006b,y			ora FSMant2,y
.8899	19 75 00	ora $0075,y			ora FSMant3,y
.889c	60		rts				rts
.889d					FLitShort:
.889d	a9 a9		lda #$a9			lda #$a9		; compile LDA #mant0
.889f	20 a1 cc	jsr $cca1			jsr C_Comma_A
.88a2	b9 57 00	lda $0057,y			lda FSMant0,y
.88a5	20 a1 cc	jsr $cca1			jsr C_Comma_A
.88a8	a9 a0		lda #$a0			lda #$a0		; compile LDY #exp
.88aa	20 a1 cc	jsr $cca1			jsr C_Comma_A
.88ad	b9 4d 00	lda $004d,y			lda FSExp,y
.88b0	20 a1 cc	jsr $cca1			jsr C_Comma_A
.88b3	e6 4c		inc $4c				inc fp			; FDrop
.88b5	a9 ba		lda #$ba			lda #<FLitYA		; point at FLitYA
.88b7	a0 88		ldy #$88			ldy #>FLitYA
.88b9	60		rts				rts
.88ba					FLitYA:
.88ba	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.88bd	94 4d		sty $4d,x			sty FSExp,x
.88bf	95 57		sta $57,x			sta FSMant0,x
.88c1	a9 00		lda #$00			lda #0
.88c3	95 61		sta $61,x			sta FSMant1,x
.88c5	95 6b		sta $6b,x			sta FSMant2,x
.88c7	95 75		sta $75,x			sta FSMant3,x
.88c9	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.88cb	60		rts				rts
.88cc					FLitI:
.88cc	68		pla				pla			; tmp2= RTS addr
.88cd	85 16		sta $16				sta tmp2+0
.88cf	18		clc				clc			; bump RTS addr over inline data
.88d0	69 05		adc #$05			adc #5
.88d2	a8		tay				tay
.88d3	68		pla				pla
.88d4	85 17		sta $17				sta tmp2+1
.88d6	69 00		adc #$00			adc #0
.88d8	48		pha				pha
.88d9	98		tya				tya
.88da	48		pha				pha
.88db	e6 16		inc $16				inc tmp2+0		; tmp2 +=1 1 (correct RTS addr)
.88dd	d0 02		bne $88e1			bne +
.88df	e6 17		inc $17				inc tmp2+1
.88e1					+
.88e1	4c 86 85	jmp $8586			jmp FAt_Tmp2		; fetch inline data, & return
>88e4	30 2e 65			L1:	.text "0.e"	;  name of word as a string, ending at wh_NameLastChar
>88e7	a3					.byte (("0.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>88e8	f7 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88ea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88eb	08					.byte NN	;wh_Flags	dictionary flags
=34919					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88ec	a9 00		lda #$00	F0:		lda #0
.88ee	a0 80		ldy #$80			ldy #$80
.88f0	d0 c8		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$88f2					en = *	; remember here
>88ea	06					.byte CL	;wh_CodeLength
>88f2	31 30 30 30 2e 65		L1:	.text "1000.e"	;  name of word as a string, ending at wh_NameLastChar
>88f8	a6					.byte (("1000.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>88f9	67 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88fb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88fc	08					.byte NN	;wh_Flags	dictionary flags
=34936					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88fd	a9 7d		lda #$7d	F1000:		lda #$7d
.88ff	a0 0a		ldy #$0a			ldy #10
.8901	d0 b7		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8903					en = *	; remember here
>88fb	06					.byte CL	;wh_CodeLength
>8903	31 30 2e 65			L1:	.text "10.e"	;  name of word as a string, ending at wh_NameLastChar
>8907	a4					.byte (("10.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8908	78 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>890a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>890b	08					.byte NN	;wh_Flags	dictionary flags
=34951					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.890c	a9 50		lda #$50	F10:		lda #$50
.890e	a0 04		ldy #$04			ldy #4
.8910	d0 a8		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8912					en = *	; remember here
>890a	06					.byte CL	;wh_CodeLength
>8912	32 2e 65			L1:	.text "2.e"	;  name of word as a string, ending at wh_NameLastChar
>8915	a3					.byte (("2.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8916	87 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8918	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8919	08					.byte NN	;wh_Flags	dictionary flags
=34965					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.891a	a9 40		lda #$40	F2:		lda #$40
.891c	a0 02		ldy #$02			ldy #2
.891e	d0 9a		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8920					en = *	; remember here
>8918	06					.byte CL	;wh_CodeLength
>8920	31 2e 65			L1:	.text "1.e"	;  name of word as a string, ending at wh_NameLastChar
>8923	a3					.byte (("1.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8924	95 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8926	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8927	08					.byte NN	;wh_Flags	dictionary flags
=34979					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8928	a9 40		lda #$40	F1:		lda #$40
.892a	a0 01		ldy #$01			ldy #1
.892c	d0 8c		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$892e					en = *	; remember here
>8926	06					.byte CL	;wh_CodeLength
>892e	2e 31 65			L1:	.text ".1e"	;  name of word as a string, ending at wh_NameLastChar
>8931	a3					.byte ((".1e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8932	a3 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8934	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8935	08					.byte NN	;wh_Flags	dictionary flags
=34993					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8936	20 bb 89	jsr $89bb	F10th:		jsr FConstantRun
>8939	67 66 66 66					.dword $66666667	; 32 bit signed binary mantissa.  $40000000 = +0.5
>893d	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$893e					en = *	; remember here
>8934	08					.byte CL	;wh_CodeLength
>893e	50 69				L1:	.text "Pi"	;  name of word as a string, ending at wh_NameLastChar
>8940	22					.byte (("Pi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8941	b1 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8943	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8944	08					.byte NN	;wh_Flags	dictionary flags
=35008					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8945	20 bb 89	jsr $89bb	FPi:		jsr FConstantRun
>8948	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>894c	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$894d					en = *	; remember here
>8943	08					.byte CL	;wh_CodeLength
>894d	50 69 2f 32			L1:	.text "Pi/2"	;  name of word as a string, ending at wh_NameLastChar
>8951	44					.byte (("Pi/2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8952	c0 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8954	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8955	08					.byte NN	;wh_Flags	dictionary flags
=35025					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8956	20 bb 89	jsr $89bb	FPiH:		jsr FConstantRun
>8959	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>895d	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$895e					en = *	; remember here
>8954	08					.byte CL	;wh_CodeLength
>895e	50 69 2f 34			L1:	.text "Pi/4"	;  name of word as a string, ending at wh_NameLastChar
>8962	84					.byte (("Pi/4"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8963	d1 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8965	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8966	08					.byte NN	;wh_Flags	dictionary flags
=35042					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8967	20 bb 89	jsr $89bb	FPiQ:		jsr FConstantRun
>896a	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>896e	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$896f					en = *	; remember here
>8965	08					.byte CL	;wh_CodeLength
>896f	32 50 69			L1:	.text "2Pi"	;  name of word as a string, ending at wh_NameLastChar
>8972	23					.byte (("2Pi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8973	e2 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8975	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8976	08					.byte NN	;wh_Flags	dictionary flags
=35058					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8977	20 bb 89	jsr $89bb	F2Pi:		jsr FConstantRun
>897a	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>897e	03						.char 3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$897f					en = *	; remember here
>8975	08					.byte CL	;wh_CodeLength
>897f	46 2e 45			L1:	.text "F.E"	;  name of word as a string, ending at wh_NameLastChar
>8982	a3					.byte (("F.E"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8983	f2 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8985	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8986	08					.byte NN	;wh_Flags	dictionary flags
=35074					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8987	20 bb 89	jsr $89bb	FE:		jsr FConstantRun
>898a	2c 2a fc 56					.dword $56fc2a2c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>898e	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$898f					en = *	; remember here
>8985	08					.byte CL	;wh_CodeLength
>898f	46 43 6f 6e 73 74 61 6e		L1:	.text "FConstant"	;  name of word as a string, ending at wh_NameLastChar
>8997	74
>8998	89					.byte (("FConstant"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8999	02 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>899b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>899c	08					.byte NN	;wh_Flags	dictionary flags
=35096					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.899d	20 dd c0	jsr $c0dd	FConstant:	jsr Header_Comma	; compile word header
.89a0	20 91 88	jsr $8891			jsr FLitTest		; will short work?
.89a3	f0 0d		beq $89b2			beq _Short
.89a5	a9 bb		lda #$bb			lda #<FConstantRun	; compile call
.89a7	a0 89		ldy #$89			ldy #>FConstantRun
.89a9	20 e0 cc	jsr $cce0			jsr Jsr_Comma_YA
.89ac	20 b4 bb	jsr $bbb4			jsr adjust_z
.89af	4c de 85	jmp $85de			jmp FComma		; inline operand, & return
.89b2					_Short:
.89b2	20 9d 88	jsr $889d			jsr FLitShort		; compile load value
.89b5	20 f7 cc	jsr $ccf7			jsr Jmp_Comma_YA
.89b8	4c b4 bb	jmp $bbb4			jmp adjust_z
=30					CL	.var *-(WordListLink+wh_Xt)
=$89bb					en = *	; remember here
>899b	1e					.byte CL	;wh_CodeLength
.89bb					FConstantRun:
.89bb	68		pla				pla			; tmp2= pop RTS addr & add 1
.89bc	18		clc				clc
.89bd	69 01		adc #$01			adc #1
.89bf	85 16		sta $16				sta tmp2+0
.89c1	68		pla				pla
.89c2	69 00		adc #$00			adc #0
.89c4	85 17		sta $17				sta tmp2+1
.89c6	4c 86 85	jmp $8586			jmp FAt_Tmp2		; fetch inline data, & return
>89c9	46 56 61 6c 75 65		L1:	.text "FValue"	;  name of word as a string, ending at wh_NameLastChar
>89cf	a6					.byte (("FValue"[-1]&7)<<5)+(*-L1)	;wh_HNL
>89d0	18 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89d3	0c					.byte IM+NN	;wh_Flags	dictionary flags
=35151					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89d4	20 dd c0	jsr $c0dd	FValue:		jsr Header_Comma	; compile word header
.89d7	a9 e4		lda #$e4			lda #<FValue_runtime	; compile JSR FValue_runtime
.89d9	a0 89		ldy #$89			ldy #>FValue_runtime
.89db	20 e0 cc	jsr $cce0			jsr Jsr_Comma_YA
.89de	20 b4 bb	jsr $bbb4			jsr adjust_z		; fix word length
.89e1	4c de 85	jmp $85de			jmp FComma		; alloc & init value
=16					CL	.var *-(WordListLink+wh_Xt)
=$89e4					en = *	; remember here
>89d2	10					.byte CL	;wh_CodeLength
.89e4					FValue_runtime:
.89e4	4c bb 89	jmp $89bb			jmp FConstantRun
>89e7	46 53 63 61 6c 65		L1:	.text "FScale"	;  name of word as a string, ending at wh_NameLastChar
>89ed	a6					.byte (("FScale"[-1]&7)<<5)+(*-L1)	;wh_HNL
>89ee	4f 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89f1	08					.byte NN	;wh_Flags	dictionary flags
=35181					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89f2	20 89 b3	jsr $b389	FScale:		jsr PopA		; pop n
.89f5	86 14		stx $14		FScaleA:	stx tmp1		; save data stack index
.89f7	a6 4c		ldx $4c				ldx fp
.89f9	b4 57		ldy $57,x			ldy FSMant0,x		; mantissa zero?
.89fb	f0 07		beq $8a04			beq _8
.89fd	18		clc				clc
.89fe	75 4d		adc $4d,x			adc FSExp,x
.8a00	95 4d		sta $4d,x			sta FSExp,x
.8a02	70 03		bvs $8a07			bvs _overflow		; overflow or underflow?
.8a04	a6 14		ldx $14		_8:		ldx tmp1		; restore data stack index
.8a06	60		rts				rts
.8a07					_overflow:
.8a07	a6 14		ldx $14				ldx tmp1		; restore data stack index
.8a09	20 07 b4	jsr $b407			jsr Throw_FpOutOfRange
=26					CL	.var *-(WordListLink+wh_Xt)
=$8a0c					en = *	; remember here
>89f0	1a					.byte CL	;wh_CodeLength
>8a0c	46 32 2a			L1:	.text "F2*"	;  name of word as a string, ending at wh_NameLastChar
>8a0f	43					.byte (("F2*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a10	6d 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a12	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a13	08					.byte NN	;wh_Flags	dictionary flags
=35215					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a14	a9 01		lda #$01	F2Star:		lda #1
.8a16	d0 dd		bne $89f5			bne FScaleA
=4					CL	.var *-(WordListLink+wh_Xt)
=$8a18					en = *	; remember here
>8a12	04					.byte CL	;wh_CodeLength
>8a18	46 32 2f			L1:	.text "F2/"	;  name of word as a string, ending at wh_NameLastChar
>8a1b	e3					.byte (("F2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a1c	8f 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a1e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a1f	08					.byte NN	;wh_Flags	dictionary flags
=35227					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a20	a9 ff		lda #$ff	F2Slash:	lda #$ff
.8a22	d0 d1		bne $89f5			bne FScaleA
=4					CL	.var *-(WordListLink+wh_Xt)
=$8a24					en = *	; remember here
>8a1e	04					.byte CL	;wh_CodeLength
>8a24	2b 8a				L1:	.text FMAlignX	;  name of word as a string, ending at wh_NameLastChar
>8a26	82					.byte ((FMAlignX[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a27	9b 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a29	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a2a	08					.byte NN	;wh_Flags	dictionary flags
=35238					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a2b	86 14		stx $14		FMAlignX:	stx tmp1+0	; save data stack index
.8a2d	a6 4c		ldx $4c				ldx fp		; load FP stack index
.8a2f	e0 09		cpx #$09			cpx #FDim-1	; check FP stack for 2 entries
.8a31	b0 60		bcs $8a93			bcs Throw_FPStack_3
.8a33	b5 4d		lda $4d,x			lda FSExp+0,x
.8a35	38		sec				sec
.8a36	f5 4e		sbc $4e,x			sbc FSExp+1,x	; compare exponents
.8a38	a8		tay				tay
.8a39	f0 22		beq $8a5d			beq _rts	; already = ?
.8a3b	10 2b		bpl $8a68			bpl _2		; r2 smaller?
.8a3d					_1:
.8a3d	70 4a		bvs $8a89			bvs _2z		; was this a big positive #?
.8a3f	c0 e0		cpy #$e0			cpy #-32
.8a41	90 1b		bcc $8a5e			bcc _1z		; all significant bits gone?
.8a43	b5 57		lda $57,x			lda FSMant0+0,x
.8a45	29 80		and #$80			and #$80
.8a47	85 15		sta $15				sta tmp1+1	; prepare sign for shifts
.8a49	b5 57		lda $57,x			lda FSMant0+0,x
.8a4b	4a		lsr a		_1s:		lsr a
.8a4c	05 15		ora $15				ora tmp1+1
.8a4e	76 61		ror $61,x			ror FSMant1+0,x
.8a50	76 6b		ror $6b,x			ror FSMant2+0,x
.8a52	76 75		ror $75,x			ror FSMant3+0,x
.8a54	c8		iny				iny
.8a55	d0 f4		bne $8a4b			bne _1s
.8a57	95 57		sta $57,x	_1e:		sta FSMant0+0,x
.8a59	b5 4e		lda $4e,x			lda FSExp+1,x
.8a5b	95 4d		sta $4d,x			sta FSExp+0,x
.8a5d	60		rts		_rts:		rts
.8a5e	a9 00		lda #$00	_1z:		lda #0		; TOS=0
.8a60	95 61		sta $61,x			sta FSMant1+0,x
.8a62	95 6b		sta $6b,x			sta FSMant2+0,x
.8a64	95 75		sta $75,x			sta FSMant3+0,x
.8a66	f0 ef		beq $8a57			beq _1e
.8a68					_2:
.8a68	70 f4		bvs $8a5e			bvs _1z		; was this a big negative #?
.8a6a	c0 20		cpy #$20			cpy #32
.8a6c	b0 1b		bcs $8a89			bcs _2z		; all significant bits gone?
.8a6e	b5 58		lda $58,x			lda FSMant0+1,x
.8a70	29 80		and #$80			and #$80
.8a72	85 15		sta $15				sta tmp1+1	; prepare sign for shifts
.8a74	b5 58		lda $58,x			lda FSMant0+1,x
.8a76	4a		lsr a		_2s:		lsr a
.8a77	05 15		ora $15				ora tmp1+1
.8a79	76 62		ror $62,x			ror FSMant1+1,x
.8a7b	76 6c		ror $6c,x			ror FSMant2+1,x
.8a7d	76 76		ror $76,x			ror FSMant3+1,x
.8a7f	88		dey				dey
.8a80	d0 f4		bne $8a76			bne _2s
.8a82	95 58		sta $58,x	_2e:		sta FSMant0+1,x
.8a84	b5 4d		lda $4d,x			lda FSExp+0,x
.8a86	95 4e		sta $4e,x			sta FSExp+1,x
.8a88	60		rts				rts
.8a89	a9 00		lda #$00	_2z:		lda #0		; NOS=0
.8a8b	95 62		sta $62,x			sta FSMant1+1,x
.8a8d	95 6c		sta $6c,x			sta FSMant2+1,x
.8a8f	95 76		sta $76,x			sta FSMant3+1,x
.8a91	f0 ef		beq $8a82			beq _2e
=104					CL	.var *-(WordListLink+wh_Xt)
=$8a93					en = *	; remember here
>8a29	68					.byte CL	;wh_CodeLength
.8a93	4c fd b3	jmp $b3fd	Throw_FPStack_3: jmp Throw_FPStack
>8a96	46 4e 6f 72 6d			L1:	.text "FNorm"	;  name of word as a string, ending at wh_NameLastChar
>8a9b	a5					.byte (("FNorm"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a9c	a6 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a9e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a9f	08					.byte NN	;wh_Flags	dictionary flags
=35355					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8aa0	86 14		stx $14		FNorm:		stx tmp1+0		; save data stack index
.8aa2	a6 4c		ldx $4c		FNormX:		ldx fp			; switch to FP stack
.8aa4	b4 4d		ldy $4d,x			ldy FSExp,x
.8aa6	b5 57		lda $57,x			lda FSMant0,x		; mantissa negative?
.8aa8	30 2d		bmi $8ad7			bmi _Neg
.8aaa	d0 0f		bne $8abb			bne _Pos2		; do byte shift
.8aac	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8aaf	d0 0a		bne $8abb			bne _Pos2
.8ab1	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ab4	d0 05		bne $8abb			bne _Pos2
.8ab6	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ab9	f0 43		beq $8afe			beq _zero		; no significant bits left?
.8abb	18		clc		_Pos2:		clc
.8abc	30 0a		bmi $8ac8			bmi _RShft
.8abe	88		dey		_Pos3:		dey			; do bit shift
.8abf	16 75		asl $75,x			asl FSMant3,x
.8ac1	36 6b		rol $6b,x			rol FSMant2,x
.8ac3	36 61		rol $61,x			rol FSMant1,x
.8ac5	2a		rol a				rol a
.8ac6	10 f6		bpl $8abe			bpl _Pos3
.8ac8					_RShft:
.8ac8	c8		iny				iny
.8ac9	6a		ror a				ror a
.8aca	76 61		ror $61,x			ror FSMant1,x
.8acc	76 6b		ror $6b,x			ror FSMant2,x
.8ace	76 75		ror $75,x			ror FSMant3,x
.8ad0					_28:
.8ad0	95 57		sta $57,x			sta FSMant0,x
.8ad2	94 4d		sty $4d,x			sty FSExp,x
.8ad4	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.8ad6	60		rts				rts
.8ad7					_Neg:
.8ad7	c9 ff		cmp #$ff			cmp #$ff
.8ad9	d0 11		bne $8aec			bne _Neg2	; do byte shift
.8adb	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ade	c9 ff		cmp #$ff			cmp #$ff
.8ae0	d0 0a		bne $8aec			bne _Neg2
.8ae2	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ae5	c9 ff		cmp #$ff			cmp #$ff
.8ae7	d0 03		bne $8aec			bne _Neg2
.8ae9	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8aec	c9 00		cmp #$00	_Neg2:		cmp #0
.8aee	10 d8		bpl $8ac8			bpl _RShft
.8af0	88		dey		_Neg3:		dey
.8af1	16 75		asl $75,x			asl FSMant3,x
.8af3	36 6b		rol $6b,x			rol FSMant2,x
.8af5	36 61		rol $61,x			rol FSMant1,x
.8af7	2a		rol a				rol a
.8af8	30 f6		bmi $8af0			bmi _Neg3
.8afa	10 cc		bpl $8ac8			bpl _RShft
.8afc	68		pla		_Zerop:		pla
.8afd	68		pla				pla		; pop rts addr from _ShiftB
.8afe	a9 00		lda #$00	_zero:		lda #0
.8b00	95 75		sta $75,x			sta FSMant3,x
.8b02	95 6b		sta $6b,x			sta FSMant2,x
.8b04	95 61		sta $61,x			sta FSMant1,x
.8b06	a0 80		ldy #$80			ldy #$80
.8b08	d0 c6		bne $8ad0			bne _28
.8b0a					_ShiftB:
.8b0a	98		tya				tya
.8b0b	38		sec				sec
.8b0c	e9 08		sbc #$08			sbc #8
.8b0e	a8		tay				tay
.8b0f	70 eb		bvs $8afc			bvs _zerop	;is this useful? do we need more of them?
.8b11	b5 61		lda $61,x			lda FSMant1,x
.8b13	48		pha				pha
.8b14	b5 6b		lda $6b,x			lda FSMant2,x
.8b16	95 61		sta $61,x			sta FSMant1,x
.8b18	b5 75		lda $75,x			lda FSMant3,x
.8b1a	95 6b		sta $6b,x			sta FSMant2,x
.8b1c	a9 00		lda #$00			lda #0
.8b1e	95 75		sta $75,x			sta FSMant3,x
.8b20	68		pla				pla
.8b21	60		rts				rts
=130					CL	.var *-(WordListLink+wh_Xt)
=$8b22					en = *	; remember here
>8a9e	82					.byte CL	;wh_CodeLength
>8b22	46 2b				L1:	.text "F+"	;  name of word as a string, ending at wh_NameLastChar
>8b24	62					.byte (("F+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b25	1b 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b27	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b28	08					.byte NN	;wh_Flags	dictionary flags
=35492					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b29	20 2b 8a	jsr $8a2b	FPlus:		jsr FMAlignX	; align mantissas
.8b2c	18		clc				clc		; add mantissas
.8b2d	b5 76		lda $76,x			lda FSMant3+1,x
.8b2f	75 75		adc $75,x			adc FSMant3+0,x
.8b31	95 76		sta $76,x			sta FSMant3+1,x
.8b33	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b35	75 6b		adc $6b,x			adc FSMant2+0,x
.8b37	95 6c		sta $6c,x			sta FSMant2+1,x
.8b39	b5 62		lda $62,x			lda FSMant1+1,x
.8b3b	75 61		adc $61,x			adc FSMant1+0,x
.8b3d	95 62		sta $62,x			sta FSMant1+1,x
.8b3f	b5 58		lda $58,x			lda FSMant0+1,x
.8b41	75 57		adc $57,x			adc FSMant0+0,x
.8b43					FPlusFin:
.8b43	e8		inx				inx		; FDrop
.8b44	86 4c		stx $4c				stx fp
.8b46	50 09		bvc $8b51	FPlusFin3:	bvc _19		; if overflow
.8b48	6a		ror a				ror a		;   shift mantissa right 1 bit
.8b49	76 61		ror $61,x			ror FSMant1,x
.8b4b	76 6b		ror $6b,x			ror FSMant2,x
.8b4d	76 75		ror $75,x			ror FSMant3,x
.8b4f	f6 4d		inc $4d,x			inc FSExp,x	;   adjust exponent
.8b51					_19:
.8b51	95 57		sta $57,x			sta FSMant0,x
.8b53	4c a2 8a	jmp $8aa2			jmp FNormX	; normalize, return
=45					CL	.var *-(WordListLink+wh_Xt)
=$8b56					en = *	; remember here
>8b27	2d					.byte CL	;wh_CodeLength
>8b56	46 31 2b			L1:	.text "F1+"	;  name of word as a string, ending at wh_NameLastChar
>8b59	63					.byte (("F1+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b5a	a4 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b5c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b5d	08					.byte NN	;wh_Flags	dictionary flags
=35545					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b5e	20 28 89	jsr $8928	F1Plus:		jsr F1
.8b61	4c 29 8b	jmp $8b29			jmp FPlus
=6					CL	.var *-(WordListLink+wh_Xt)
=$8b64					en = *	; remember here
>8b5c	06					.byte CL	;wh_CodeLength
>8b64	46 2d				L1:	.text "F-"	;  name of word as a string, ending at wh_NameLastChar
>8b66	a2					.byte (("F-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b67	d9 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b69	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b6a	08					.byte NN	;wh_Flags	dictionary flags
=35558					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b6b	20 2b 8a	jsr $8a2b	FMinus:		jsr FMAlignX	; align mantissas
.8b6e	38		sec				sec		; subtract mantissas
.8b6f	b5 76		lda $76,x			lda FSMant3+1,x
.8b71	f5 75		sbc $75,x			sbc FSMant3+0,x
.8b73	95 76		sta $76,x			sta FSMant3+1,x
.8b75	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b77	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8b79	95 6c		sta $6c,x			sta FSMant2+1,x
.8b7b	b5 62		lda $62,x			lda FSMant1+1,x
.8b7d	f5 61		sbc $61,x			sbc FSMant1+0,x
.8b7f	95 62		sta $62,x			sta FSMant1+1,x
.8b81	b5 58		lda $58,x			lda FSMant0+1,x
.8b83	f5 57		sbc $57,x			sbc FSMant0+0,x
.8b85	4c 43 8b	jmp $8b43			jmp FPlusFin
=29					CL	.var *-(WordListLink+wh_Xt)
=$8b88					en = *	; remember here
>8b69	1d					.byte CL	;wh_CodeLength
>8b88	46 31 2d			L1:	.text "F1-"	;  name of word as a string, ending at wh_NameLastChar
>8b8b	a3					.byte (("F1-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b8c	e6 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b8e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b8f	08					.byte NN	;wh_Flags	dictionary flags
=35595					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b90	20 28 89	jsr $8928	F1Minus:	jsr F1
.8b93	4c 6b 8b	jmp $8b6b			jmp FMinus
=6					CL	.var *-(WordListLink+wh_Xt)
=$8b96					en = *	; remember here
>8b8e	06					.byte CL	;wh_CodeLength
>8b96	46 4e 65 67 61 74 65		L1:	.text "FNegate"	;  name of word as a string, ending at wh_NameLastChar
>8b9d	a7					.byte (("FNegate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b9e	0b 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ba0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ba1	08					.byte NN	;wh_Flags	dictionary flags
=35613					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ba2	86 14		stx $14		FNegate:	stx tmp1	; save data stack index
.8ba4	a6 4c		ldx $4c				ldx fp		; X= FP stack index
.8ba6	38		sec				sec		; mantissa = 0 - mantissa
.8ba7	a9 00		lda #$00			lda #0
.8ba9	f5 75		sbc $75,x			sbc FSMant3,x
.8bab	95 75		sta $75,x			sta FSMant3,x
.8bad	a9 00		lda #$00			lda #0
.8baf	f5 6b		sbc $6b,x			sbc FSMant2,x
.8bb1	95 6b		sta $6b,x			sta FSMant2,x
.8bb3	a9 00		lda #$00			lda #0
.8bb5	f5 61		sbc $61,x			sbc FSMant1,x
.8bb7	95 61		sta $61,x			sta FSMant1,x
.8bb9	a9 00		lda #$00			lda #0
.8bbb	f5 57		sbc $57,x			sbc FSMant0,x
.8bbd	4c 46 8b	jmp $8b46			jmp FPlusFin3	; finish up, return
=30					CL	.var *-(WordListLink+wh_Xt)
=$8bc0					en = *	; remember here
>8ba0	1e					.byte CL	;wh_CodeLength
>8bc0	46 41 62 73			L1:	.text "FAbs"	;  name of word as a string, ending at wh_NameLastChar
>8bc4	64					.byte (("FAbs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8bc5	1d 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8bc7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8bc8	08					.byte NN	;wh_Flags	dictionary flags
=35652					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8bc9	a4 4c		ldy $4c		FAbs:		ldy fp
.8bcb	b9 57 00	lda $0057,y			lda FSMant0,y		; mantissa negative?
.8bce	30 d2		bmi $8ba2			bmi FNegate
.8bd0	60		rts				rts
=8					CL	.var *-(WordListLink+wh_Xt)
=$8bd1					en = *	; remember here
>8bc7	08					.byte CL	;wh_CodeLength
.8bd1	4c fd b3	jmp $b3fd	Throw_FPStack_4: jmp Throw_FPStack
.8bd4	a4 4c		ldy $4c		FPos:		ldy fp			; load FP stack index
.8bd6	c0 09		cpy #$09			cpy #FDim-1		; check FP stack for 2
.8bd8	b0 f7		bcs $8bd1			bcs Throw_FPStack_4
.8bda	b9 57 00	lda $0057,y			lda FSMant0+0,y		; calc result sign
.8bdd	59 58 00	eor $0058,y			eor FSMant0+1,y
.8be0	08		php				php
.8be1	b9 58 00	lda $0058,y			lda FSMant0+1,y		; if NOS negative
.8be4	10 07		bpl $8bed			bpl +
.8be6	e6 4c		inc $4c				inc fp			;   point at NOS
.8be8	20 a2 8b	jsr $8ba2			jsr FNegate		;   negate NOS
.8beb	c6 4c		dec $4c				dec fp			;   restore fp
.8bed					+
.8bed	20 c9 8b	jsr $8bc9			jsr FAbs		; abs TOS
.8bf0	86 14		stx $14				stx tmp1+0		; save data stack index
.8bf2	a6 4c		ldx $4c				ldx fp			; load FP stack index
.8bf4	28		plp				plp			; restore sign flag
.8bf5	60		rts				rts
>8bf6	46 2a				L1:	.text "F*"	;  name of word as a string, ending at wh_NameLastChar
>8bf8	42					.byte (("F*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8bf9	44 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8bfb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8bfc	08					.byte NN	;wh_Flags	dictionary flags
=35704					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8bfd					FStar:
.8bfd	20 d4 8b	jsr $8bd4			jsr FPos		; make r1 & r2 positive,
.8c00	08		php				php			;   save r3 sign
.8c01	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8c03	38		sec				sec
.8c04	75 4e		adc $4e,x			adc FSExp+1,x
.8c06	95 4e		sta $4e,x			sta FSExp+1,x
.8c08	50 12		bvc $8c1c			bvc _49			; IfVs,
.8c0a	b0 06		bcs $8c12			bcs _zero		;   underflow?
.8c0c	a6 14		ldx $14				ldx tmp1+0		;   restore data stack index
.8c0e	28		plp				plp			; RDrop sign flag
.8c0f	20 07 b4	jsr $b407			jsr Throw_FpOutOfRange
.8c12	e8		inx		_zero:		inx			; F2Drop
.8c13	e8		inx				inx
.8c14	86 4c		stx $4c				stx fp
.8c16	28		plp				plp			; rdrop saved result sign
.8c17	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c19	4c ec 88	jmp $88ec			jmp F0			; return zero
.8c1c					_49:
.8c1c	a9 00		lda #$00			lda #0			; tmp32= 0
.8c1e	85 16		sta $16				sta tmp2+0
.8c20	85 17		sta $17				sta tmp2+1
.8c22	85 18		sta $18				sta tmp3+0
.8c24	85 19		sta $19				sta tmp3+1
.8c26	b5 76		lda $76,x			lda FSMant3+1,x
.8c28	20 57 8c	jsr $8c57			jsr _Byte		; do bytes of r1 mantissa
.8c2b	b5 6c		lda $6c,x			lda FSMant2+1,x
.8c2d	20 57 8c	jsr $8c57			jsr _Byte
.8c30	b5 62		lda $62,x			lda FSMant1+1,x
.8c32	20 57 8c	jsr $8c57			jsr _Byte
.8c35	b5 58		lda $58,x			lda FSMant0+1,x
.8c37	20 57 8c	jsr $8c57			jsr _Byte
.8c3a	a5 16		lda $16				lda tmp2+0		; r1.mant= tmp32
.8c3c	95 76		sta $76,x			sta FSMant3+1,x
.8c3e	a5 17		lda $17				lda tmp2+1
.8c40	95 6c		sta $6c,x			sta FSMant2+1,x
.8c42	a5 18		lda $18				lda tmp3+0
.8c44	95 62		sta $62,x			sta FSMant1+1,x
.8c46	a5 19		lda $19				lda tmp3+1
.8c48	95 58		sta $58,x			sta FSMant0+1,x
.8c4a	e6 4c		inc $4c				inc fp			; FDrop
.8c4c	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c4e	28		plp				plp			; fix result sign
.8c4f	10 03		bpl $8c54			bpl +
.8c51	4c a2 8b	jmp $8ba2			jmp FNegate
.8c54					+
.8c54	4c a0 8a	jmp $8aa0			jmp FNorm
.8c57					_Byte:
.8c57	49 ff		eor #$ff			eor #$ff
.8c59	85 15		sta $15				sta tmp1+1
.8c5b	a0 08		ldy #$08			ldy #8			; for each bit in byte
.8c5d	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8c5f	b0 18		bcs $8c79			bcs _b3
.8c61	a5 16		lda $16				lda tmp2+0		;     tmp32 += r2
.8c63	75 75		adc $75,x			adc FSMant3+0,x
.8c65	85 16		sta $16				sta tmp2+0
.8c67	a5 17		lda $17				lda tmp2+1
.8c69	75 6b		adc $6b,x			adc FSMant2+0,x
.8c6b	85 17		sta $17				sta tmp2+1
.8c6d	a5 18		lda $18				lda tmp3+0
.8c6f	75 61		adc $61,x			adc FSMant1+0,x
.8c71	85 18		sta $18				sta tmp3+0
.8c73	a5 19		lda $19				lda tmp3+1
.8c75	75 57		adc $57,x			adc FSMant0+0,x
.8c77	85 19		sta $19				sta tmp3+1
.8c79	46 19		lsr $19		_b3:		lsr tmp3+1		;   tmp32 >>= 1
.8c7b	66 18		ror $18				ror tmp3+0
.8c7d	66 17		ror $17				ror tmp2+1
.8c7f	66 16		ror $16				ror tmp2+0
.8c81	88		dey				dey			;  next bit
.8c82	d0 d9		bne $8c5d			bne _b1
.8c84	60		rts				rts
=136					CL	.var *-(WordListLink+wh_Xt)
=$8c85					en = *	; remember here
>8bfb	88					.byte CL	;wh_CodeLength
>8c85	46 53 71 72			L1:	.text "FSqr"	;  name of word as a string, ending at wh_NameLastChar
>8c89	44					.byte (("FSqr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8c8a	78 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8c8c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8c8d	08					.byte NN	;wh_Flags	dictionary flags
=35849					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8c8e	20 78 84	jsr $8478	FSqr:		jsr FDup
.8c91	4c fd 8b	jmp $8bfd			jmp FStar
=6					CL	.var *-(WordListLink+wh_Xt)
=$8c94					en = *	; remember here
>8c8c	06					.byte CL	;wh_CodeLength
>8c94	46 31 30 2a			L1:	.text "F10*"	;  name of word as a string, ending at wh_NameLastChar
>8c98	44					.byte (("F10*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8c99	09 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8c9b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8c9c	08					.byte NN	;wh_Flags	dictionary flags
=35864					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8c9d	20 78 84	jsr $8478	F10Star:	jsr FDup
.8ca0	a4 4c		ldy $4c				ldy fp
.8ca2	b9 4d 00	lda $004d,y			lda FSExp+0,y
.8ca5	18		clc				clc
.8ca6	69 01		adc #$01			adc #1
.8ca8	99 4d 00	sta $004d,y			sta FSExp+0,y
.8cab	18		clc				clc
.8cac	69 02		adc #$02			adc #2
.8cae	99 4e 00	sta $004e,y			sta FSExp+1,y
.8cb1	4c 29 8b	jmp $8b29			jmp FPlus
=23					CL	.var *-(WordListLink+wh_Xt)
=$8cb4					en = *	; remember here
>8c9b	17					.byte CL	;wh_CodeLength
>8cb4	46 2f				L1:	.text "F/"	;  name of word as a string, ending at wh_NameLastChar
>8cb6	e2					.byte (("F/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8cb7	18 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8cb9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8cba	08					.byte NN	;wh_Flags	dictionary flags
=35894					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8cbb	20 d4 8b	jsr $8bd4	FSlash:		jsr FPos		; make r1 & r2 positive
.8cbe	08		php				php			;   save result sign
.8cbf	b5 4e		lda $4e,x			lda FSExp+1,x		; calc exponent
.8cc1	18		clc				clc
.8cc2	69 01		adc #$01			adc #1
.8cc4	38		sec				sec
.8cc5	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8cc7	95 4e		sta $4e,x			sta FSExp+1,x
.8cc9	50 12		bvc $8cdd			bvc _49			;  IfVs
.8ccb	b0 06		bcs $8cd3			bcs _Zero		; underflow?
.8ccd	28		plp				plp			; drop saved result sign
.8cce	a6 15		ldx $15				ldx tmp1+1		; restore data stack index
.8cd0	20 07 b4	jsr $b407			jsr Throw_FpOutOfRange	; overflow
.8cd3	e8		inx		_Zero:		inx			; F2Drop
.8cd4	e8		inx				inx
.8cd5	86 4c		stx $4c				stx fp
.8cd7	28		plp				plp			; drop saved result sign
.8cd8	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8cda	4c ec 88	jmp $88ec			jmp F0			; return 0
.8cdd					_49:
.8cdd	b5 76		lda $76,x			lda FSMant3+1,x		; tmp32 = r1
.8cdf	85 16		sta $16				sta tmp2+0
.8ce1	b5 6c		lda $6c,x			lda FSMant2+1,x
.8ce3	85 17		sta $17				sta tmp2+1
.8ce5	b5 62		lda $62,x			lda FSMant1+1,x
.8ce7	85 18		sta $18				sta tmp3+0
.8ce9	b5 58		lda $58,x			lda FSMant0+1,x
.8ceb	85 19		sta $19				sta tmp3+1
.8ced	20 16 8d	jsr $8d16			jsr _Byte
.8cf0	95 58		sta $58,x			sta FSMant0+1,x
.8cf2	20 16 8d	jsr $8d16			jsr _Byte
.8cf5	95 62		sta $62,x			sta FSMant1+1,x
.8cf7	20 16 8d	jsr $8d16			jsr _Byte
.8cfa	95 6c		sta $6c,x			sta FSMant2+1,x
.8cfc	20 16 8d	jsr $8d16			jsr _Byte
.8cff	95 76		sta $76,x			sta FSMant3+1,x
.8d01	56 58		lsr $58,x			lsr FSMant0+1,x
.8d03	76 62		ror $62,x			ror FSMant1+1,x
.8d05	76 6c		ror $6c,x			ror FSMant2+1,x
.8d07	76 76		ror $76,x			ror FSMant3+1,x
.8d09	e6 4c		inc $4c				inc fp			; FDrop
.8d0b	a6 14		ldx $14				ldx tmp1+0		; restore X
.8d0d	28		plp				plp			; fix sign
.8d0e	10 03		bpl $8d13			bpl +
.8d10	20 a2 8b	jsr $8ba2			jsr FNegate
.8d13	4c a0 8a	jmp $8aa0	+		jmp FNorm
.8d16					_Byte:
.8d16	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d18					_1:
.8d18	a5 19		lda $19				lda tmp3+1		;   if r1>=r2
.8d1a	d5 57		cmp $57,x			cmp FSMant0+0,x
.8d1c	d0 10		bne $8d2e			bne _4
.8d1e	a5 18		lda $18				lda tmp3+0
.8d20	d5 61		cmp $61,x			cmp FSMant1+0,x
.8d22	d0 0a		bne $8d2e			bne _4
.8d24	a5 17		lda $17				lda tmp2+1
.8d26	d5 6b		cmp $6b,x			cmp FSMant2+0,x
.8d28	d0 04		bne $8d2e			bne _4
.8d2a	a5 16		lda $16				lda tmp2+0
.8d2c	d5 75		cmp $75,x			cmp FSMant3+0,x
.8d2e	90 18		bcc $8d48	_4:		bcc _2
.8d30	a5 16		lda $16				lda tmp2+0		;     tmp32 -= r2
.8d32	f5 75		sbc $75,x			sbc FSMant3+0,x
.8d34	85 16		sta $16				sta tmp2+0
.8d36	a5 17		lda $17				lda tmp2+1
.8d38	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8d3a	85 17		sta $17				sta tmp2+1
.8d3c	a5 18		lda $18				lda tmp3+0
.8d3e	f5 61		sbc $61,x			sbc FSMant1+0,x
.8d40	85 18		sta $18				sta tmp3+0
.8d42	a5 19		lda $19				lda tmp3+1
.8d44	f5 57		sbc $57,x			sbc FSMant0+0,x
.8d46	85 19		sta $19				sta tmp3+1
.8d48	26 15		rol $15		_2:		rol tmp1+1		;   accum quotient bits
.8d4a	06 16		asl $16				asl tmp2+0
.8d4c	26 17		rol $17				rol tmp2+1
.8d4e	26 18		rol $18				rol tmp3+0
.8d50	26 19		rol $19				rol tmp3+1		;   tmp32<<=1
.8d52	88		dey				dey			;  next
.8d53	d0 c3		bne $8d18			bne _1
.8d55	a5 15		lda $15				lda tmp1+1		; return bits
.8d57	60		rts				rts
=157					CL	.var *-(WordListLink+wh_Xt)
=$8d58					en = *	; remember here
>8cb9	9d					.byte CL	;wh_CodeLength
>8d58	46 31 2f			L1:	.text "F1/"	;  name of word as a string, ending at wh_NameLastChar
>8d5b	e3					.byte (("F1/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8d5c	36 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8d5e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8d5f	08					.byte NN	;wh_Flags	dictionary flags
=36059					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8d60	20 28 89	jsr $8928	F1Slash:	jsr F1
.8d63	20 00 85	jsr $8500			jsr FSwap
.8d66	4c bb 8c	jmp $8cbb			jmp FSlash
=9					CL	.var *-(WordListLink+wh_Xt)
=$8d69					en = *	; remember here
>8d5e	09					.byte CL	;wh_CodeLength
>8d69	45 2a				L1:	.text "E*"	;  name of word as a string, ending at wh_NameLastChar
>8d6b	42					.byte (("E*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8d6c	db 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8d6e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8d6f	08					.byte NN	;wh_Flags	dictionary flags
=36075					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8d70					EStar:
.8d70	20 d4 8b	jsr $8bd4			jsr FPos		; make r1 & r2 positive
.8d73	08		php				php			;   remember result sign
.8d74	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8d76	38		sec				sec
.8d77	75 4e		adc $4e,x			adc FSExp+1,x
.8d79	95 4e		sta $4e,x			sta FSExp+1,x
.8d7b	70 15		bvs $8d92			bvs _ExpOvfl
.8d7d	b5 58		lda $58,x			lda FSMant0+1,x		; save e1
.8d7f	48		pha				pha
.8d80	b5 62		lda $62,x			lda FSMant1+1,x
.8d82	a0 00		ldy #$00			ldy #0
.8d84	94 58		sty $58,x			sty FSMant0+1,x
.8d86	94 62		sty $62,x			sty FSMant1+1,x		; zero result
.8d88	20 a1 8d	jsr $8da1			jsr _Byte		; do FSMant1+1 byte
.8d8b	68		pla				pla
.8d8c	20 a1 8d	jsr $8da1			jsr _Byte		; do FSMant0+1 byte
.8d8f	4c be 8d	jmp $8dbe			jmp EFix3		; finish
.8d92					_ExpOvfl:
.8d92	b0 05		bcs $8d99			bcs _Zero		;underflow?
.8d94	a6 14		ldx $14				ldx tmp1+0		; restore X
.8d96	20 07 b4	jsr $b407			jsr Throw_FpOutOfRange	;overflow
.8d99	a9 00		lda #$00	_Zero:		lda #0
.8d9b	95 62		sta $62,x			sta FSMant1+1,x
.8d9d	95 58		sta $58,x			sta FSMant0+1,x
.8d9f	f0 1d		beq $8dbe			beq EFix3
.8da1					_Byte:
.8da1	85 15		sta $15				sta tmp1+1
.8da3	a0 08		ldy #$08			ldy #8			; for 8 bits
.8da5	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8da7	90 0d		bcc $8db6			bcc _b5
.8da9	18		clc				clc			;     r3 += r2
.8daa	b5 61		lda $61,x			lda FSMant1+0,x
.8dac	75 62		adc $62,x			adc FSMant1+1,x
.8dae	95 62		sta $62,x			sta FSMant1+1,x
.8db0	b5 57		lda $57,x			lda FSMant0+0,x
.8db2	75 58		adc $58,x			adc FSMant0+1,x
.8db4	95 58		sta $58,x			sta FSMant0+1,x
.8db6					_b5:
.8db6	76 58		ror $58,x			ror FSMant0+1,x		;   r3 <<= 1
.8db8	76 62		ror $62,x			ror FSMant1+1,x
.8dba	88		dey				dey			;  next bit
.8dbb	d0 e8		bne $8da5			bne _b1
.8dbd	60		rts				rts
=78					CL	.var *-(WordListLink+wh_Xt)
=$8dbe					en = *	; remember here
>8d6e	4e					.byte CL	;wh_CodeLength
.8dbe					EFix3:
.8dbe	a9 00		lda #$00			lda #0			; zero unused mantissa
.8dc0	95 6c		sta $6c,x			sta FSMant2+1,x
.8dc2	95 76		sta $76,x			sta FSMant3+1,x
.8dc4	e6 4c		inc $4c				inc fp			; FDrop
.8dc6	a6 14		ldx $14				ldx tmp1+0		; restore X
.8dc8	28		plp				plp			;fix result sign
.8dc9	10 03		bpl $8dce			bpl +
.8dcb	4c a2 8b	jmp $8ba2			jmp FNegate
.8dce	4c a0 8a	jmp $8aa0	+		jmp FNorm
>8dd1	45 53 71 72			L1:	.text "ESqr"	;  name of word as a string, ending at wh_NameLastChar
>8dd5	44					.byte (("ESqr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8dd6	eb 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8dd8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8dd9	08					.byte NN	;wh_Flags	dictionary flags
=36181					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8dda	20 78 84	jsr $8478	ESqr:		jsr FDup
.8ddd	4c 70 8d	jmp $8d70			jmp EStar
=6					CL	.var *-(WordListLink+wh_Xt)
=$8de0					en = *	; remember here
>8dd8	06					.byte CL	;wh_CodeLength
>8de0	45 2f				L1:	.text "E/"	;  name of word as a string, ending at wh_NameLastChar
>8de2	e2					.byte (("E/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8de3	55 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8de5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8de6	08					.byte NN	;wh_Flags	dictionary flags
=36194					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8de7	20 d4 8b	jsr $8bd4	ESlash:		jsr FPos	; make r1 & r2 positive
.8dea	08		php				php		; remember result sign
.8deb	b5 4e		lda $4e,x			lda FSExp+1,x		; calc r3 exponent
.8ded	38		sec				sec
.8dee	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8df0	70 17		bvs $8e09			bvs _ExpOvfl
.8df2	18		clc				clc
.8df3	69 01		adc #$01			adc #1
.8df5	95 4e		sta $4e,x			sta FSExp+1,x
.8df7	20 0f 8e	jsr $8e0f			jsr _Byte		; gen quotient hi byte
.8dfa	48		pha				pha
.8dfb	20 0f 8e	jsr $8e0f			jsr _Byte		; gen quotient lo byte
.8dfe	95 62		sta $62,x			sta FSMant1+1,x
.8e00	68		pla				pla
.8e01	4a		lsr a				lsr a
.8e02	95 58		sta $58,x			sta FSMant0+1,x
.8e04	76 62		ror $62,x			ror FSMant1+1,x
.8e06	4c be 8d	jmp $8dbe			jmp EFix3
.8e09					_ExpOvfl:
.8e09	28		plp				plp			; rdrop saved result sign
.8e0a	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e0c	20 07 b4	jsr $b407			jsr Throw_FpOutOfRange	; overflow
.8e0f					_Byte:
.8e0f	a0 08		ldy #$08			ldy #8			; for 8 bits
.8e11	b5 62		lda $62,x	_b1:		lda FSMant1+1,x		;   if r1 >= r2
.8e13	d5 61		cmp $61,x			cmp FSMant1+0,x
.8e15	b5 58		lda $58,x			lda FSMant0+1,x
.8e17	f5 57		sbc $57,x			sbc FSMant0+0,x
.8e19	90 09		bcc $8e24			bcc _b5
.8e1b	95 58		sta $58,x			sta FSMant0+1,x
.8e1d	b5 62		lda $62,x			lda FSMant1+1,x		;     r1 -= r2
.8e1f	f5 61		sbc $61,x			sbc FSMant1+0,x
.8e21	95 62		sta $62,x			sta FSMant1+1,x
.8e23	38		sec				sec
.8e24					_b5:
.8e24	26 15		rol $15				rol tmp1+1		;   save quotient bit
.8e26	16 62		asl $62,x			asl FSMant1+1,x		;   r1 *= 2
.8e28	36 58		rol $58,x			rol FSMant0+1,x
.8e2a	88		dey				dey			;  next bit
.8e2b	d0 e4		bne $8e11			bne _b1
.8e2d	a5 15		lda $15				lda tmp1+1		; return bits
.8e2f	60		rts				rts
=73					CL	.var *-(WordListLink+wh_Xt)
=$8e30					en = *	; remember here
>8de5	49					.byte CL	;wh_CodeLength
>8e30	45 31 2f			L1:	.text "E1/"	;  name of word as a string, ending at wh_NameLastChar
>8e33	e3					.byte (("E1/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e34	62 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e36	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e37	08					.byte NN	;wh_Flags	dictionary flags
=36275					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e38	20 28 89	jsr $8928	E1Slash:	jsr F1
.8e3b	20 00 85	jsr $8500			jsr FSwap
.8e3e	4c e7 8d	jmp $8de7			jmp ESlash
=9					CL	.var *-(WordListLink+wh_Xt)
=$8e41					en = *	; remember here
>8e36	09					.byte CL	;wh_CodeLength
>8e41	53 3e 46			L1:	.text "S>F"	;  name of word as a string, ending at wh_NameLastChar
>8e44	c3					.byte (("S>F"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e45	b3 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e47	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e48	08					.byte NN	;wh_Flags	dictionary flags
=36292					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e49	20 a5 b3	jsr $b3a5	SToF:		jsr PopYA		; pop n
.8e4c	20 16 84	jsr $8416	SToFYA:		jsr FAllocX		; alloc FP stack entry
.8e4f	94 57		sty $57,x			sty FSMant0,x		; copy n to mantissa
.8e51	95 61		sta $61,x			sta FSMant1,x
.8e53	a9 00		lda #$00			lda #0			; pad mantissa
.8e55	95 6b		sta $6b,x			sta FSMant2,x
.8e57	95 75		sta $75,x			sta FSMant3,x
.8e59	a9 0f		lda #$0f			lda #15			; set exponent
.8e5b	95 4d		sta $4d,x			sta FSExp,x
.8e5d	4c a2 8a	jmp $8aa2			jmp FNormX		; normalize, return
=23					CL	.var *-(WordListLink+wh_Xt)
=$8e60					en = *	; remember here
>8e47	17					.byte CL	;wh_CodeLength
>8e60	44 3e 46			L1:	.text "D>F"	;  name of word as a string, ending at wh_NameLastChar
>8e63	c3					.byte (("D>F"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e64	c4 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e66	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e67	08					.byte NN	;wh_Flags	dictionary flags
=36323					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e68	20 16 84	jsr $8416	FDToF:		jsr FAllocX		; alloc FP stack entry
.8e6b	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e6d	a4 4c		ldy $4c				ldy fp
.8e6f	b5 26		lda $26,x			lda DStack+2,x		; mantissa= d
.8e71	99 75 00	sta $0075,y			sta FSMant3,y
.8e74	b5 27		lda $27,x			lda DStack+3,x
.8e76	99 6b 00	sta $006b,y			sta FSMant2,y
.8e79	b5 24		lda $24,x			lda DStack+0,x
.8e7b	99 61 00	sta $0061,y			sta FSMant1,y
.8e7e	b5 25		lda $25,x			lda DStack+1,x
.8e80	99 57 00	sta $0057,y			sta FSMant0,y
.8e83	a9 1f		lda #$1f			lda #31			; set exponent
.8e85	99 4d 00	sta $004d,y			sta FSExp,y
.8e88	20 bc c4	jsr $c4bc			jsr Two_Drop
.8e8b	4c a0 8a	jmp $8aa0			jmp FNorm		; normalize, return
=38					CL	.var *-(WordListLink+wh_Xt)
=$8e8e					en = *	; remember here
>8e66	26					.byte CL	;wh_CodeLength
>8e8e	46 3e 53			L1:	.text "F>S"	;  name of word as a string, ending at wh_NameLastChar
>8e91	63					.byte (("F>S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e92	e3 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e94	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e95	08					.byte NN	;wh_Flags	dictionary flags
=36369					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e96	a4 4c		ldy $4c		FToS:		ldy fp
.8e98	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8e9b	08		php				php
.8e9c	10 03		bpl $8ea1			bpl +
.8e9e	20 a2 8b	jsr $8ba2			jsr FNegate
.8ea1					+
.8ea1	a9 0f		lda #$0f			lda #15
.8ea3	20 a5 86	jsr $86a5			jsr FIntAlignA
.8ea6	c0 10		cpy #$10			cpy #15+1		; always positive, so unsigned compare works
.8ea8	b0 17		bcs $8ec1			bcs _overflow
.8eaa	a4 4c		ldy $4c				ldy fp
.8eac	ca		dex				dex
.8ead	ca		dex				dex
.8eae	b9 57 00	lda $0057,y			lda FSMant0,y
.8eb1	95 25		sta $25,x			sta DStack+1,x
.8eb3	b9 61 00	lda $0061,y			lda FSMant1,y
.8eb6	95 24		sta $24,x			sta DStack+0,x
.8eb8	e6 4c		inc $4c				inc fp			; FDrop
.8eba	28		plp				plp			; apply saved sign
.8ebb	30 01		bmi $8ebe			bmi +
.8ebd	60		rts				rts
.8ebe	4c 15 c6	jmp $c615	+		jmp Negate
.8ec1	28		plp		_overflow:	plp			; RDrop saved sign
.8ec2	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8ec4	20 2e b4	jsr $b42e			jsr ThrowA
=49					CL	.var *-(WordListLink+wh_Xt)
=$8ec7					en = *	; remember here
>8e94	31					.byte CL	;wh_CodeLength
>8ec7	46 3e 44			L1:	.text "F>D"	;  name of word as a string, ending at wh_NameLastChar
>8eca	83					.byte (("F>D"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8ecb	11 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ecd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ece	08					.byte NN	;wh_Flags	dictionary flags
=36426					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ecf	a4 4c		ldy $4c		FToD:		ldy fp
.8ed1	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8ed4	08		php				php
.8ed5	10 03		bpl $8eda			bpl +
.8ed7	20 a2 8b	jsr $8ba2			jsr FNegate
.8eda					+
.8eda	a9 1f		lda #$1f			lda #31
.8edc	20 a5 86	jsr $86a5			jsr FIntAlignA
.8edf	c0 20		cpy #$20			cpy #31+1		; always positive, so unsigned compare works
.8ee1	b0 23		bcs $8f06			bcs _overflow
.8ee3	a4 4c		ldy $4c				ldy fp
.8ee5	ca		dex				dex			; d= mantissa
.8ee6	ca		dex				dex
.8ee7	ca		dex				dex
.8ee8	ca		dex				dex
.8ee9	b9 57 00	lda $0057,y			lda FSMant0,y
.8eec	95 25		sta $25,x			sta DStack+1,x
.8eee	b9 61 00	lda $0061,y			lda FSMant1,y
.8ef1	95 24		sta $24,x			sta DStack+0,x
.8ef3	b9 6b 00	lda $006b,y			lda FSMant2,y
.8ef6	95 27		sta $27,x			sta DStack+3,x
.8ef8	b9 75 00	lda $0075,y			lda FSMant3,y
.8efb	95 26		sta $26,x			sta DStack+2,x
.8efd	e6 4c		inc $4c				inc fp			; FDrop
.8eff	28		plp				plp			; apply saved sign
.8f00	30 01		bmi $8f03			bmi +
.8f02	60		rts				rts
.8f03	4c 46 c6	jmp $c646	+		jmp DNegate
.8f06	28		plp		_overflow:	plp			; RDrop sign
.8f07	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8f09	20 2e b4	jsr $b42e			jsr ThrowA
=61					CL	.var *-(WordListLink+wh_Xt)
=$8f0c					en = *	; remember here
>8ecd	3d					.byte CL	;wh_CodeLength
>8f0c	46 52 6e 64			L1:	.text "FRnd"	;  name of word as a string, ending at wh_NameLastChar
>8f10	84					.byte (("FRnd"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f11	4a 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f13	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f14	08					.byte NN	;wh_Flags	dictionary flags
=36496					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f15	20 df 82	jsr $82df	FRnd:		jsr Rand		; generate next RndState
.8f18	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.8f1b	4a		lsr a				lsr a			;   make positive
.8f1c	95 57		sta $57,x			sta FSMant0,x
.8f1e	94 61		sty $61,x			sty FSMant1,x
.8f20	ad 35 03	lda $0335			lda RndState+0
.8f23	95 6b		sta $6b,x			sta FSMant2,x
.8f25	ad 36 03	lda $0336			lda RndState+1
.8f28	95 75		sta $75,x			sta FSMant3,x
.8f2a	a9 00		lda #$00			lda #0			; exponent=0
.8f2c	95 4d		sta $4d,x			sta FSExp,x
.8f2e	4c a2 8a	jmp $8aa2			jmp FNormX		; normalize, return
=28					CL	.var *-(WordListLink+wh_Xt)
=$8f31					en = *	; remember here
>8f13	1c					.byte CL	;wh_CodeLength
>8f31	46 53 71 72 74			L1:	.text "FSqrt"	;  name of word as a string, ending at wh_NameLastChar
>8f36	85					.byte (("FSqrt"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f37	90 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f39	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f3a	08					.byte NN	;wh_Flags	dictionary flags
=36534					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f3b	a4 4c		ldy $4c		FSqrt:		ldy fp
.8f3d	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.8f40	d0 01		bne $8f43			bne +
.8f42	60		rts				rts			;   just return the zero
.8f43					+
.8f43	20 78 84	jsr $8478			jsr FDup		; get trial value
.8f46	a4 4c		ldy $4c				ldy fp
.8f48	b9 4d 00	lda $004d,y			lda FSExp,y		; halve the exponent of trial value
.8f4b	c9 80		cmp #$80			cmp #$80
.8f4d	6a		ror a				ror a
.8f4e	99 4d 00	sta $004d,y			sta FSExp,y
.8f51	a9 09		lda #$09			lda #9			; for 9 iterations
.8f53	48		pha		_3:		pha
.8f54	20 f0 84	jsr $84f0			jsr F2Dup		;   calc new trial value
.8f57	20 bb 8c	jsr $8cbb			jsr FSlash
.8f5a	20 29 8b	jsr $8b29			jsr FPlus
.8f5d	20 20 8a	jsr $8a20			jsr F2Slash
.8f60	68		pla				pla			;  next
.8f61	38		sec				sec
.8f62	e9 01		sbc #$01			sbc #1
.8f64	d0 ed		bne $8f53			bne _3
.8f66	4c 52 84	jmp $8452			jmp FNip		; return trial value
=46					CL	.var *-(WordListLink+wh_Xt)
=$8f69					en = *	; remember here
>8f39	2e					.byte CL	;wh_CodeLength
>8f69	48 65 78 3e 46			L1:	.text "Hex>F"	;  name of word as a string, ending at wh_NameLastChar
>8f6e	c5					.byte (("Hex>F"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f6f	b6 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f71	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f72	08					.byte NN	;wh_Flags	dictionary flags
=36590					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f73	20 16 84	jsr $8416	HexToF:		jsr FAllocX		; alloc FP stack entry
.8f76	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8f78	a4 4c		ldy $4c				ldy fp			; Y= FP stack index
.8f7a	20 89 b3	jsr $b389			jsr PopA		; pop n_exp
.8f7d	99 4d 00	sta $004d,y			sta FSExp,y
.8f80	b5 25		lda $25,x			lda DStack+1,x
.8f82	99 57 00	sta $0057,y			sta FSMant0,y
.8f85	b5 24		lda $24,x			lda DStack+0,x
.8f87	99 61 00	sta $0061,y			sta FSMant1,y
.8f8a	b5 27		lda $27,x			lda DStack+3,x
.8f8c	99 6b 00	sta $006b,y			sta FSMant2,y
.8f8f	b5 26		lda $26,x			lda DStack+2,x
.8f91	99 75 00	sta $0075,y			sta FSMant3,y
.8f94	4c bc c4	jmp $c4bc			jmp Two_Drop
=36					CL	.var *-(WordListLink+wh_Xt)
=$8f97					en = *	; remember here
>8f71	24					.byte CL	;wh_CodeLength
>8f97	46 3e 48 65 78			L1:	.text "F>Hex"	;  name of word as a string, ending at wh_NameLastChar
>8f9c	05					.byte (("F>Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f9d	ee 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f9f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8fa0	08					.byte NN	;wh_Flags	dictionary flags
=36636					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8fa1	a4 4c		ldy $4c		FToHex:		ldy fp		; Y= FP stack index
.8fa3	ca		dex				dex
.8fa4	ca		dex				dex
.8fa5	ca		dex				dex
.8fa6	ca		dex				dex
.8fa7	ca		dex				dex
.8fa8	ca		dex				dex
.8fa9	b9 57 00	lda $0057,y			lda FSMant0,y	; copy mantissa
.8fac	95 27		sta $27,x			sta DStack+3,x
.8fae	b9 61 00	lda $0061,y			lda FSMant1,y
.8fb1	95 26		sta $26,x			sta DStack+2,x
.8fb3	b9 6b 00	lda $006b,y			lda FSMant2,y
.8fb6	95 29		sta $29,x			sta DStack+5,x
.8fb8	b9 75 00	lda $0075,y			lda FSMant3,y
.8fbb	95 28		sta $28,x			sta DStack+4,x
.8fbd	b9 4d 00	lda $004d,y			lda FSExp,y	; copy exponent
.8fc0	95 24		sta $24,x			sta DStack+0,x
.8fc2	29 80		and #$80			and #$80	;   sign extend
.8fc4	f0 02		beq $8fc8			beq +
.8fc6	a9 ff		lda #$ff			lda #$ff
.8fc8	95 25		sta $25,x	+		sta DStack+1,x
.8fca	e6 4c		inc $4c				inc fp		; FDrop
.8fcc	60		rts				rts
=44					CL	.var *-(WordListLink+wh_Xt)
=$8fcd					en = *	; remember here
>8f9f	2c					.byte CL	;wh_CodeLength
>8fcd	46 2e 48 65 78			L1:	.text "F.Hex"	;  name of word as a string, ending at wh_NameLastChar
>8fd2	05					.byte (("F.Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8fd3	1c 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8fd5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8fd6	08					.byte NN	;wh_Flags	dictionary flags
=36690					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8fd7	20 a1 8f	jsr $8fa1	FDotHex:	jsr FToHex	; get parts of r
.8fda	20 2c ce	jsr $ce2c			jsr Not_Rot
.8fdd	20 77 a8	jsr $a877			jsr Dot_Hex	; do mantissa
.8fe0	20 77 a8	jsr $a877			jsr Dot_Hex
.8fe3	a9 3a		lda #$3a			lda #':'
.8fe5	20 70 cd	jsr $cd70			jsr Emit_A
.8fe8	4c 55 a8	jmp $a855			jmp C_Dot_Hex	; do exponent
=20					CL	.var *-(WordListLink+wh_Xt)
=$8feb					en = *	; remember here
>8fd5	14					.byte CL	;wh_CodeLength
>8feb	28 46 2e 29			L1:	.text "(F.)"	;  name of word as a string, ending at wh_NameLastChar
>8fef	24					.byte (("(F.)"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8ff0	52 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ff2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ff3	08					.byte NN	;wh_Flags	dictionary flags
=36719					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ff4	20 71 90	jsr $9071	PFDot:		jsr pfcst		;start collecting chars, make r positive
.8ff7	20 fd 8f	jsr $8ffd			jsr PFDotSub
.8ffa	4c 8f 90	jmp $908f			jmp pfcen
.8ffd					PFDotSub:
.8ffd	20 ba 83	jsr $83ba			jsr Precision	;alloc & init work area
.9000	20 ba b7	jsr $b7ba			jsr One
=$27					_mantNzFound  = DStack+3	; nonzero mantissa digit processed
=$26					_NumSigDigits = DStack+2	; # of significant digits
=$24					_decimalPos   = DStack+0	; decimal point position
.9003	20 51 90	jsr $9051			jsr FLt10		; scale down to <10, counting exponent
.9006					_c:
.9006	b5 24		lda $24,x			lda _decimalPos,x	;  insert decimal point here?
.9008	d0 05		bne $900f			bne _c2
.900a	a9 2e		lda #$2e			lda #'.'
.900c	20 86 90	jsr $9086			jsr pfch
.900f	d6 24		dec $24,x	_c2:		dec _decimalPos,x
.9011	20 78 84	jsr $8478			jsr FDup		;  do a digit
.9014	20 96 8e	jsr $8e96			jsr FToS		; ( work n )
.9017	b5 24		lda $24,x			lda DStack+0,x
.9019	15 29		ora $29,x			ora _mantNzFound+2,x	;  doing significant digits?
.901b	95 29		sta $29,x			sta _mantNzFound+2,x
.901d	f0 08		beq $9027			beq _c7
.901f	d6 28		dec $28,x			dec _NumSigDigits+2,x
.9021	10 04		bpl $9027			bpl +
.9023	e8		inx				inx			;    drop integer
.9024	e8		inx				inx
.9025	d0 17		bne $903e			bne _d
.9027					+
.9027	b5 24		lda $24,x	_c7:		lda DStack+0,x		;  store the char
.9029	09 30		ora #$30			ora #'0'
.902b	20 86 90	jsr $9086			jsr pfch
.902e	20 49 8e	jsr $8e49			jsr SToF		; ( work )
.9031	20 6b 8b	jsr $8b6b			jsr FMinus
.9034	20 9d 8c	jsr $8c9d			jsr F10Star
.9037	a4 4c		ldy $4c				ldy fp			;  until mantissa==0
.9039	b9 57 00	lda $0057,y			lda FSMant0,y
.903c	d0 c8		bne $9006			bne _c
.903e	d6 24		dec $24,x	_d:		dec _decimalPos,x	;do trailing zeros
.9040	30 08		bmi $904a			bmi _d9
.9042	a9 30		lda #$30			lda #'0'
.9044	20 86 90	jsr $9086			jsr pfch
.9047	4c 3e 90	jmp $903e			jmp _d
.904a					_d9:
.904a	e8		inx				inx			; drop work area
.904b	e8		inx				inx
.904c	e8		inx				inx
.904d	e8		inx				inx
.904e	e6 4c		inc $4c				inc fp			; FDrop
.9050	60		rts				rts
=93					CL	.var *-(WordListLink+wh_Xt)
=$9051					en = *	; remember here
>8ff2	5d					.byte CL	;wh_CodeLength
.9051					FLt10:
.9051	a4 4c		ldy $4c		_1:		ldy fp			; while r >= 10
.9053	b9 4d 00	lda $004d,y			lda FSExp,y
.9056	30 18		bmi $9070			bmi _9			;   exponent negative?
.9058	c9 04		cmp #$04			cmp #4
.905a	90 14		bcc $9070			bcc _9			;   < 4 ?
.905c	d0 07		bne $9065			bne _2			;   > 4 ?
.905e	b9 57 00	lda $0057,y			lda FSMant0,y
.9061	c9 50		cmp #$50			cmp #$50
.9063	90 0b		bcc $9070			bcc _9
.9065	f6 24		inc $24,x	_2:		inc DStack+0,x		;   exp ++
.9067	20 0c 89	jsr $890c			jsr F10			;   r /= 10
.906a	20 bb 8c	jsr $8cbb			jsr FSlash
.906d	4c 51 90	jmp $9051			jmp _1
.9070	60		rts		_9:		rts
.9071					pfcst:
.9071	a9 01		lda #$01			lda #1
.9073	8d 34 03	sta $0334			sta ToHold
.9076	a4 4c		ldy $4c				ldy fp			; if r1 negative
.9078	b9 57 00	lda $0057,y			lda FSMant0,y
.907b	10 08		bpl $9085			bpl _19
.907d	a9 2d		lda #$2d			lda #'-'		;   append sign
.907f	20 86 90	jsr $9086			jsr pfch
.9082	4c a2 8b	jmp $8ba2			jmp FNegate		;   make positive, return
.9085	60		rts		_19:		rts
.9086					pfch:
.9086	ac 34 03	ldy $0334			ldy ToHold
.9089	91 00		sta ($00),y			sta (cp),y
.908b	ee 34 03	inc $0334			inc ToHold
.908e	60		rts				rts
.908f					pfcen:
.908f	ad 34 03	lda $0334			lda ToHold
.9092	38		sec				sec
.9093	e9 01		sbc #$01			sbc #1
.9095	a0 00		ldy #$00			ldy #0
.9097	91 00		sta ($00),y			sta (cp),y		; fill in length
.9099	4c c4 c9	jmp $c9c4			jmp Here		; push start addr
.909c					pfciA:
.909c	a8		tay				tay
.909d	10 0a		bpl $90a9			bpl _15			; IfMi,
.909f	49 ff		eor #$ff			eor #$ff
.90a1	18		clc				clc
.90a2	69 01		adc #$01			adc #1
.90a4	48		pha				pha
.90a5	a9 2d		lda #$2d			lda #'-'
.90a7	d0 03		bne $90ac			bne _19
.90a9	48		pha		_15:		pha
.90aa	a9 2b		lda #$2b			lda #'+'
.90ac					_19:
.90ac	20 86 90	jsr $9086			jsr pfch
.90af	68		pla				pla
.90b0	a0 2f		ldy #$2f			ldy #'0'-1
.90b2	c8		iny		_20:		iny
.90b3	38		sec				sec
.90b4	e9 0a		sbc #$0a			sbc #10
.90b6	b0 fa		bcs $90b2			bcs _20
.90b8	69 0a		adc #$0a			adc #10
.90ba	48		pha				pha
.90bb	98		tya				tya
.90bc	20 86 90	jsr $9086			jsr pfch
.90bf	68		pla				pla
.90c0	09 30		ora #$30			ora #'0'
.90c2	d0 c2		bne $9086			bne pfch
>90c4	46 2e				L1:	.text "F."	;  name of word as a string, ending at wh_NameLastChar
>90c6	c2					.byte (("F."[-1]&7)<<5)+(*-L1)	;wh_HNL
>90c7	6f 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90c9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90ca	08					.byte NN	;wh_Flags	dictionary flags
=36934					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90cb	20 f4 8f	jsr $8ff4	FDot:		jsr PFDot
.90ce	20 73 b1	jsr $b173	FDot2:		jsr Count
.90d1	20 8a cd	jsr $cd8a			jsr Type
.90d4	4c 7d cd	jmp $cd7d			jmp Space
=12					CL	.var *-(WordListLink+wh_Xt)
=$90d7					en = *	; remember here
>90c9	0c					.byte CL	;wh_CodeLength
>90d7	46 2e 53			L1:	.text "F.S"	;  name of word as a string, ending at wh_NameLastChar
>90da	63					.byte (("F.S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>90db	46 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90de	08					.byte NN	;wh_Flags	dictionary flags
=36954					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90df	a9 09		lda #$09	FDotS:		lda #FDim-1	; for each FP stack entry
.90e1	d0 0b		bne $90ee			bne _8
.90e3	48		pha		_2:		pha
.90e4	20 c6 84	jsr $84c6			jsr FPick3	;   print it
.90e7	20 cb 90	jsr $90cb			jsr FDot
.90ea	68		pla				pla		;  next
.90eb	38		sec				sec
.90ec	e9 01		sbc #$01			sbc #1
.90ee	c5 4c		cmp $4c		_8:		cmp fp
.90f0	b0 f1		bcs $90e3			bcs _2
=19					CL	.var *-(WordListLink+wh_Xt)
=$90f2					en = *	; remember here
>90dd	13					.byte CL	;wh_CodeLength
.90f2	60		rts				rts
>90f3	28 46 53 2e 29			L1:	.text "(FS.)"	;  name of word as a string, ending at wh_NameLastChar
>90f8	25					.byte (("(FS.)"[-1]&7)<<5)+(*-L1)	;wh_HNL
>90f9	5a 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90fb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90fc	08					.byte NN	;wh_Flags	dictionary flags
=36984					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90fd	20 b0 b7	jsr $b7b0	PFSDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.9100	20 71 90	jsr $9071			jsr pfcst		; start collecting chars, make r positive
.9103	20 51 90	jsr $9051			jsr FLt10		; scale down to <10
.9106	a4 4c		ldy $4c		_c1:		ldy fp			; while r < 1
.9108	b9 57 00	lda $0057,y			lda FSMant0,y		;   mantissa == 0 ?
.910b	f0 0f		beq $911c			beq _c9
.910d	b9 4d 00	lda $004d,y			lda FSExp,y		;   exp < 1 ?
.9110	f0 02		beq $9114			beq _c2
.9112	10 08		bpl $911c			bpl _c9
.9114	d6 24		dec $24,x	_c2:		dec DStack+0,x		;  exp -= 1
.9116	20 9d 8c	jsr $8c9d			jsr F10Star		;  r *= 10
.9119	4c 06 91	jmp $9106			jmp _c1
.911c					_c9:
.911c	20 fd 8f	jsr $8ffd	PFSDotM:	jsr PFDotSub		; do mantissa
.911f	a9 45		lda #$45			lda #'E'
.9121	20 86 90	jsr $9086			jsr pfch		; do exponent
.9124	b5 24		lda $24,x			lda DStack+0,x		;   _exp
.9126	20 9c 90	jsr $909c			jsr pfciA
.9129	e8		inx				inx			; Drop work area
.912a	e8		inx				inx
.912b	4c 8f 90	jmp $908f			jmp pfcen		; finish string
=49					CL	.var *-(WordListLink+wh_Xt)
=$912e					en = *	; remember here
>90fb	31					.byte CL	;wh_CodeLength
>912e	46 53 2e			L1:	.text "FS."	;  name of word as a string, ending at wh_NameLastChar
>9131	c3					.byte (("FS."[-1]&7)<<5)+(*-L1)	;wh_HNL
>9132	78 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9134	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9135	08					.byte NN	;wh_Flags	dictionary flags
=37041					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9136	20 fd 90	jsr $90fd	FSDot:		jsr PFSDot
.9139	4c ce 90	jmp $90ce			jmp FDot2
=6					CL	.var *-(WordListLink+wh_Xt)
=$913c					en = *	; remember here
>9134	06					.byte CL	;wh_CodeLength
>913c	28 46 45 2e 29			L1:	.text "(FE.)"	;  name of word as a string, ending at wh_NameLastChar
>9141	25					.byte (("(FE.)"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9142	b1 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9144	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9145	08					.byte NN	;wh_Flags	dictionary flags
=37057					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9146	20 b0 b7	jsr $b7b0	PFEDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.9149	20 71 90	jsr $9071			jsr pfcst		; start collecting chars, make r positive
.914c	a4 4c		ldy $4c		_30:		ldy fp			; while r < 1
.914e	b9 57 00	lda $0057,y			lda FSMant0,y
.9151	f0 16		beq $9169			beq _39
.9153	b9 4d 00	lda $004d,y			lda FSExp,y
.9156	f0 02		beq $915a			beq _31
.9158	10 0f		bpl $9169			bpl _39
.915a	d6 24		dec $24,x	_31:		dec _exp,x		;  exp -= 3
.915c	d6 24		dec $24,x			dec _exp,x
.915e	d6 24		dec $24,x			dec _exp,x
.9160	20 fd 88	jsr $88fd			jsr F1000		;  r *= 1000
.9163	20 fd 8b	jsr $8bfd			jsr FStar
.9166	4c 4c 91	jmp $914c			jmp _30
.9169					_39:
.9169	a4 4c		ldy $4c		_a:		ldy fp			; while r >= 1000
.916b	b9 4d 00	lda $004d,y			lda FSExp,y
.916e	30 1c		bmi $918c			bmi _a9			; exponent negative?
.9170	c9 0a		cmp #$0a			cmp #10
.9172	90 18		bcc $918c			bcc _a9			;   < 10 ?
.9174	d0 07		bne $917d			bne _a2			;   > 10 ?
.9176	b9 57 00	lda $0057,y			lda FSMant0,y
.9179	c9 7d		cmp #$7d			cmp #$7d
.917b	90 0f		bcc $918c			bcc _a9
.917d	f6 24		inc $24,x	_a2:		inc _exp,x		;   exp += 3
.917f	f6 24		inc $24,x			inc _exp,x
.9181	f6 24		inc $24,x			inc _exp,x
.9183	20 fd 88	jsr $88fd			jsr F1000		;   r /= 1000
.9186	20 bb 8c	jsr $8cbb			jsr FSlash
.9189	4c 69 91	jmp $9169			jmp _a
.918c					_a9:
.918c	4c 1c 91	jmp $911c			jmp PFSDotM
=73					CL	.var *-(WordListLink+wh_Xt)
=$918f					en = *	; remember here
>9144	49					.byte CL	;wh_CodeLength
>918f	46 45 2e			L1:	.text "FE."	;  name of word as a string, ending at wh_NameLastChar
>9192	c3					.byte (("FE."[-1]&7)<<5)+(*-L1)	;wh_HNL
>9193	c1 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9195	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9196	08					.byte NN	;wh_Flags	dictionary flags
=37138					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9197	20 46 91	jsr $9146	FEDot:		jsr PFEDot
.919a	4c ce 90	jmp $90ce			jmp FDot2
=6					CL	.var *-(WordListLink+wh_Xt)
=$919d					en = *	; remember here
>9195	06					.byte CL	;wh_CodeLength
>919d	46 22				L1:	.text 'F"'	;  name of word as a string, ending at wh_NameLastChar
>919f	42					.byte (('F"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>91a0	12 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>91a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>91a3	0c					.byte IM+NN	;wh_Flags	dictionary flags
=37151					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.91a4	20 50 ba	jsr $ba50	FQuote:		jsr Parse_Name		; get string
.91a7	20 c8 91	jsr $91c8			jsr ToFloat		; convert
.91aa	b5 24		lda $24,x			lda DStack+0,x		; error?
.91ac	f0 0a		beq $91b8			beq _Err
.91ae	e8		inx				inx
.91af	e8		inx				inx
.91b0	a5 0a		lda $0a				lda State		; compiling?
.91b2	d0 01		bne $91b5			bne _compile
.91b4	60		rts				rts
.91b5	4c 7c 88	jmp $887c	_compile:	jmp FLiteral		; compile a FP literal
.91b8	a9 36		lda #$36	_Err:		lda #100+err_FPInvalidArg
.91ba	20 2e b4	jsr $b42e			jsr ThrowA
=25					CL	.var *-(WordListLink+wh_Xt)
=$91bd					en = *	; remember here
>91a2	19					.byte CL	;wh_CodeLength
>91bd	3e 46 6c 6f 61 74		L1:	.text ">Float"	;  name of word as a string, ending at wh_NameLastChar
>91c3	86					.byte ((">Float"[-1]&7)<<5)+(*-L1)	;wh_HNL
>91c4	1f 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>91c6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>91c7	08					.byte NN	;wh_Flags	dictionary flags
=37187					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.91c8					ToFloat:
.91c8	20 b0 b7	jsr $b7b0			jsr Zero	; alloc & init workspace
.91cb	20 b0 b7	jsr $b7b0			jsr Zero
.91ce	20 b0 b7	jsr $b7b0			jsr Zero
=$2c					_addr		= DStack+8
=$2a					_len		= DStack+6
=$29					_mantfound 	= DStack+5		;mantissa digits found
=$28					_exponent 	= DStack+4		;exponent
=$27					_decimalPos 	= DStack+3		;decimal point position
=$26					_DecPointFound1 = DStack+2
=$25					_MantissaNegative1 = DStack+1
=$24					_ExponentNegative1 = DStack+0
.91d1	20 ec 88	jsr $88ec			jsr F0			; init result
.91d4	20 a6 92	jsr $92a6	_11:		jsr _GetChar		; get mantissa prefix
.91d7	b0 57		bcs $9230			bcs _trueb ;_finishb
.91d9	c9 20		cmp #$20			cmp #' '
.91db	f0 f7		beq $91d4			beq _11
.91dd	c9 2b		cmp #$2b			cmp #'+'
.91df	f0 06		beq $91e7			beq _20
.91e1	c9 2d		cmp #$2d			cmp #'-'
.91e3	d0 07		bne $91ec			bne _21
.91e5	95 25		sta $25,x			sta _MantissaNegative1,x ; remember mantissa is negative
.91e7	20 a6 92	jsr $92a6	_20:		jsr _GetChar		; do next mantissa digits
.91ea	b0 47		bcs $9233			bcs _finishb
.91ec	c9 2e		cmp #$2e	_21:		cmp #'.'
.91ee	f0 31		beq $9221			beq _27
.91f0	c9 45		cmp #$45			cmp #'E'
.91f2	f0 42		beq $9236			beq _30
.91f4	c9 65		cmp #$65			cmp #'e'
.91f6	f0 3e		beq $9236			beq _30
.91f8	c9 44		cmp #$44			cmp #'D'
.91fa	f0 3a		beq $9236			beq _30
.91fc	c9 64		cmp #$64			cmp #'d'
.91fe	f0 36		beq $9236			beq _30
.9200	38		sec				sec			;   a digit?
.9201	e9 30		sbc #$30			sbc #'0'
.9203	90 24		bcc $9229			bcc _fail
.9205	c9 0a		cmp #$0a			cmp #9+1
.9207	b0 20		bcs $9229			bcs _fail
.9209	48		pha				pha			; append digit to mantissa
.920a	20 9d 8c	jsr $8c9d			jsr F10Star
.920d	68		pla				pla
.920e	a0 00		ldy #$00			ldy #0
.9210	20 4c 8e	jsr $8e4c			jsr SToFYA
.9213	20 29 8b	jsr $8b29			jsr FPlus
.9216	f6 29		inc $29,x			inc _mantfound,x	; remember we found a mantissa digit
.9218	b5 26		lda $26,x			lda _DecPointFound1,x	; if mantissa decimal point found
.921a	f0 02		beq $921e			beq +
.921c	d6 27		dec $27,x			dec _decimalPos,x	;   increment decimal point position
.921e					+
.921e	4c e7 91	jmp $91e7			jmp _20
.9221					_27:
.9221	b4 26		ldy $26,x			ldy _DecPointFound1,x	; already have one?
.9223	d0 04		bne $9229			bne _fail
.9225	95 26		sta $26,x			sta _DecPointFound1,x	; we have one now!
.9227	f0 be		beq $91e7			beq _20
.9229					_fail:
.9229	20 e4 83	jsr $83e4			jsr FDrop
.922c	a9 00		lda #$00			lda #0			;return false
.922e	f0 69		beq $9299			beq _return
.9230	4c 97 92	jmp $9297	_trueb:		jmp _true
.9233	4c 64 92	jmp $9264	_finishb:	jmp _finish
.9236					_30:
.9236	20 a6 92	jsr $92a6			jsr _GetChar
.9239	b0 29		bcs $9264			bcs _finish
.923b	c9 2b		cmp #$2b			cmp #'+'
.923d	f0 06		beq $9245			beq _40
.923f	c9 2d		cmp #$2d			cmp #'-'
.9241	d0 07		bne $924a			bne _41
.9243	95 24		sta $24,x			sta _ExponentNegative1,x ; remember exponent is negative
.9245	20 a6 92	jsr $92a6	_40:		jsr _GetChar		;get exponent digits
.9248	b0 1a		bcs $9264			bcs _finish
.924a	38		sec		_41:		sec			;  digit?
.924b	e9 30		sbc #$30			sbc #'0'
.924d	90 da		bcc $9229			bcc _fail
.924f	c9 0a		cmp #$0a			cmp #9+1
.9251	b0 d6		bcs $9229			bcs _fail
.9253	85 14		sta $14				sta tmp1
.9255	16 28		asl $28,x			asl _exponent,x		;  exponent *= 10
.9257	b5 28		lda $28,x			lda _exponent,x
.9259	0a		asl a				asl a
.925a	0a		asl a				asl a
.925b	75 28		adc $28,x			adc _exponent,x
.925d	65 14		adc $14				adc tmp1		;  + digit
.925f	95 28		sta $28,x			sta _exponent,x
.9261	4c 45 92	jmp $9245			jmp _40
.9264					_finish:
.9264	b5 29		lda $29,x			lda _mantfound,x	;some mantissa digits found?
.9266	f0 c1		beq $9229			beq _fail
.9268	b5 24		lda $24,x			lda _ExponentNegative1,x ;apply exponent sign
.926a	f0 07		beq $9273			beq +
.926c	a9 00		lda #$00			lda #0
.926e	38		sec				sec
.926f	f5 28		sbc $28,x			sbc _exponent,x
.9271	95 28		sta $28,x			sta _exponent,x
.9273					+
.9273	b5 28		lda $28,x			lda _exponent,x		;apply decimal position to exponent
.9275	18		clc				clc
.9276	75 27		adc $27,x			adc _decimalPos,x
.9278	95 28		sta $28,x			sta _exponent,x
.927a	4c 82 92	jmp $9282			jmp _93
.927d	20 9d 8c	jsr $8c9d	_93b:		jsr F10Star		;apply exponent to mantissa
.9280	d6 28		dec $28,x			dec _exponent,x
.9282	f0 0a		beq $928e	_93:		beq _94
.9284	10 f7		bpl $927d			bpl _93b
.9286	20 0c 89	jsr $890c	_94b:		jsr F10
.9289	20 bb 8c	jsr $8cbb			jsr FSlash
.928c	f6 28		inc $28,x			inc _exponent,x
.928e	30 f6		bmi $9286	_94:		bmi _94b
.9290					_95:
.9290	b5 25		lda $25,x			lda _MantissaNegative1,x ;apply mantissa sign
.9292	f0 03		beq $9297			beq +
.9294	20 a2 8b	jsr $8ba2			jsr FNegate
.9297					+
.9297	a9 ff		lda #$ff	_true:		lda #$ff		;return true
.9299					_return:
.9299	95 2c		sta $2c,x			sta _addr+0,x		; replace _addr with flag
.929b	95 2d		sta $2d,x			sta _addr+1,x
.929d	e8		inx				inx			; Drop work
.929e	e8		inx				inx
.929f	e8		inx				inx			; 2Drop work
.92a0	e8		inx				inx
.92a1	e8		inx				inx
.92a2	e8		inx				inx
.92a3	e8		inx				inx			; Drop len
.92a4	e8		inx				inx
.92a5	60		rts				rts
.92a6					_GetChar:
.92a6	38		sec				sec
.92a7	b5 2a		lda $2a,x			lda _len,x
.92a9	f0 0b		beq $92b6			beq _gc_rts		; if end, return C=1
.92ab	d6 2a		dec $2a,x			dec _len,x
.92ad	a1 2c		lda ($2c,x)			lda (_addr,x)
.92af	f6 2c		inc $2c,x			inc _addr+0,x
.92b1	d0 02		bne $92b5			bne +
.92b3	f6 2d		inc $2d,x			inc _addr+1,x
.92b5					+
.92b5	18		clc				clc			; get char, return C=0
.92b6	60		rts		_gc_rts:	rts
>92b7	53 46 40			L1:	.text "SF@"	;  name of word as a string, ending at wh_NameLastChar
>92ba	03					.byte (("SF@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>92bb	43 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>92bd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>92be	08					.byte NN	;wh_Flags	dictionary flags
=37434					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.92bf	20 a5 b3	jsr $b3a5	SFAt:		jsr PopYA		; pop sf_addr
.92c2	85 16		sta $16		SFAt_YA:	sta tmp2+0		; save sf_addr
.92c4	84 17		sty $17				sty tmp2+1
.92c6	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.92c9	a0 01		ldy #$01			ldy #1			; copy exponent
.92cb	b1 16		lda ($16),y			lda (tmp2),y
.92cd	0a		asl a				asl a
.92ce	88		dey				dey
.92cf	b1 16		lda ($16),y			lda (tmp2),y
.92d1	2a		rol a				rol a
.92d2	38		sec				sec
.92d3	e9 7e		sbc #$7e			sbc #126
.92d5	95 4d		sta $4d,x			sta FSExp,x
.92d7	a0 01		ldy #$01			ldy #1			; copy mantissa
.92d9	b1 16		lda ($16),y			lda (tmp2),y
.92db	09 80		ora #$80			ora #$80
.92dd	4a		lsr a				lsr a
.92de	95 57		sta $57,x			sta FSMant0,x
.92e0	c8		iny				iny
.92e1	b1 16		lda ($16),y			lda (tmp2),y
.92e3	6a		ror a				ror a
.92e4	95 61		sta $61,x			sta FSMant1,x
.92e6	c8		iny				iny
.92e7	b1 16		lda ($16),y			lda (tmp2),y
.92e9	6a		ror a				ror a
.92ea	95 6b		sta $6b,x			sta FSMant2,x
.92ec	a9 00		lda #$00			lda #0
.92ee	6a		ror a				ror a
.92ef	95 75		sta $75,x			sta FSMant3,x
.92f1	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.92f3	a0 00		ldy #$00			ldy #0			; get sign
.92f5	b1 16		lda ($16),y			lda (tmp2),y
.92f7	10 03		bpl $92fc			bpl +
.92f9	20 a2 8b	jsr $8ba2			jsr FNegate
.92fc					+
=61					CL	.var *-(WordListLink+wh_Xt)
=$92fc					en = *	; remember here
>92bd	3d					.byte CL	;wh_CodeLength
.92fc	60		rts				rts
>92fd	53 46 21			L1:	.text "SF!"	;  name of word as a string, ending at wh_NameLastChar
>9300	23					.byte (("SF!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9301	3a 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9303	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9304	08					.byte NN	;wh_Flags	dictionary flags
=37504					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9305	20 a5 b3	jsr $b3a5	SFStore:	jsr PopYA		; pop sf_addr
.9308	85 16		sta $16		SFStore_YA:	sta tmp2+0		; save
.930a	84 17		sty $17				sty tmp2+1
.930c	a4 4c		ldy $4c				ldy fp			; negative?
.930e	b9 57 00	lda $0057,y			lda FSMant0,y
.9311	29 80		and #$80			and #$80		;  save sign
.9313	85 19		sta $19				sta tmp3+1
.9315	10 03		bpl $931a			bpl +
.9317	20 a2 8b	jsr $8ba2			jsr FNegate
.931a					+
.931a	86 14		stx $14				stx tmp1+0		; save data stack index
.931c	a6 4c		ldx $4c				ldx fp			; switch to FP stack index
.931e	b5 4d		lda $4d,x			lda FSExp,x		; +128
.9320	18		clc				clc
.9321	69 7e		adc #$7e			adc #126
.9323	95 4d		sta $4d,x			sta FSExp,x
.9325	16 75		asl $75,x			asl FSMant3,x
.9327	b5 6b		lda $6b,x			lda FSMant2,x
.9329	2a		rol a				rol a
.932a	a0 03		ldy #$03			ldy #3			; +3 IEEE
.932c	91 16		sta ($16),y			sta (tmp2),y
.932e	b5 61		lda $61,x			lda FSMant1,x
.9330	2a		rol a				rol a
.9331	88		dey				dey			; +2 IEEE
.9332	91 16		sta ($16),y			sta (tmp2),y
.9334	b5 57		lda $57,x			lda FSMant0,x
.9336	2a		rol a				rol a
.9337	2a		rol a				rol a
.9338	56 4d		lsr $4d,x			lsr FSExp,x
.933a	6a		ror a				ror a
.933b	88		dey				dey			; +1 IEEE
.933c	91 16		sta ($16),y			sta (tmp2),y
.933e	b5 4d		lda $4d,x			lda FSExp,x
.9340	05 19		ora $19				ora tmp3+1		;  insert sign
.9342	88		dey				dey			; +0 IEEE
.9343	91 16		sta ($16),y			sta (tmp2),y
.9345	e6 4c		inc $4c				inc fp			; FDrop
.9347	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=68					CL	.var *-(WordListLink+wh_Xt)
=$9349					en = *	; remember here
>9303	44					.byte CL	;wh_CodeLength
.9349	60		rts				rts
>934a	53 46 6c 6f 61 74 2b		L1:	.text "SFloat+"	;  name of word as a string, ending at wh_NameLastChar
>9351	67					.byte (("SFloat+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9352	80 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9354	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9355	08					.byte NN	;wh_Flags	dictionary flags
=37585					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9356	a9 04		lda #$04	SFloatPlus:	lda #4
.9358	4c a7 c9	jmp $c9a7			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$935b					en = *	; remember here
>9354	05					.byte CL	;wh_CodeLength
>935b	53 46 6c 6f 61 74 73		L1:	.text "SFloats"	;  name of word as a string, ending at wh_NameLastChar
>9362	67					.byte (("SFloats"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9363	d1 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9365	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9366	08					.byte NN	;wh_Flags	dictionary flags
=37602					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9367	a9 02		lda #$02	SFloats:	lda #2
.9369	4c eb ca	jmp $caeb			jmp LShift_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$936c					en = *	; remember here
>9365	05					.byte CL	;wh_CodeLength
>936c	44 46 21			L1:	.text "DF!"	;  name of word as a string, ending at wh_NameLastChar
>936f	23					.byte (("DF!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9370	e2 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9372	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9373	08					.byte NN	;wh_Flags	dictionary flags
=37615					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9374	20 a5 b3	jsr $b3a5	DFStore:	jsr PopYA		; pop df_addr
.9377	85 16		sta $16		DFStore_YA:	sta tmp2+0		; save df_addr
.9379	84 17		sty $17				sty tmp2+1
.937b	a4 4c		ldy $4c				ldy fp			; negative?
.937d	b9 57 00	lda $0057,y			lda FSMant0,y
.9380	29 80		and #$80			and #$80		; remember sign
.9382	85 19		sta $19				sta tmp3+1
.9384	10 03		bpl $9389			bpl +			; make positive
.9386	20 a2 8b	jsr $8ba2			jsr FNegate
.9389					+
.9389	86 14		stx $14				stx tmp1+0		; save data stack index
.938b	a6 4c		ldx $4c				ldx fp
.938d	a9 00		lda #$00			lda #0
.938f	a0 07		ldy #$07			ldy #7			; +7 IEEE
.9391	91 16		sta ($16),y			sta (tmp2),y
.9393	88		dey				dey			; +6 IEEE
.9394	91 16		sta ($16),y			sta (tmp2),y
.9396	20 de 93	jsr $93de			jsr _shift		; shift mantissa
.9399	20 de 93	jsr $93de			jsr _shift
.939c	88		dey				dey			; +5 IEEE
.939d	91 16		sta ($16),y			sta (tmp2),y
.939f	b5 75		lda $75,x			lda FSMant3,x
.93a1	88		dey				dey			; +4 IEEE
.93a2	91 16		sta ($16),y			sta (tmp2),y
.93a4	b5 6b		lda $6b,x			lda FSMant2,x
.93a6	88		dey				dey			; +3 IEEE
.93a7	91 16		sta ($16),y			sta (tmp2),y
.93a9	b5 61		lda $61,x			lda FSMant1,x
.93ab	88		dey				dey			; +2 IEEE
.93ac	91 16		sta ($16),y			sta (tmp2),y
.93ae	b5 57		lda $57,x			lda FSMant0,x		; clear extra bits
.93b0	29 0f		and #$0f			and #$f
.93b2	95 57		sta $57,x			sta FSMant0,x
.93b4	b5 4d		lda $4d,x			lda FSExp,x
.93b6	38		sec				sec
.93b7	e9 02		sbc #$02			sbc #2
.93b9	95 4d		sta $4d,x			sta FSExp,x
.93bb	0a		asl a				asl a
.93bc	0a		asl a				asl a
.93bd	0a		asl a				asl a
.93be	0a		asl a				asl a
.93bf	15 57		ora $57,x			ora FSMant0,x
.93c1	88		dey				dey			; +1 IEEE
.93c2	91 16		sta ($16),y			sta (tmp2),y
.93c4	b5 4d		lda $4d,x			lda FSExp,x
.93c6	08		php				php
.93c7	4a		lsr a				lsr a
.93c8	4a		lsr a				lsr a
.93c9	4a		lsr a				lsr a
.93ca	4a		lsr a				lsr a
.93cb	18		clc				clc
.93cc	69 30		adc #$30			adc #$30
.93ce	28		plp				plp
.93cf	30 03		bmi $93d4			bmi +
.93d1	18		clc				clc
.93d2	69 10		adc #$10			adc #$10
.93d4	05 19		ora $19		+		ora tmp3+1		; add sign bit
.93d6	88		dey				dey			; +0 IEEE
.93d7	91 16		sta ($16),y			sta (tmp2),y
.93d9	e6 4c		inc $4c				inc fp			; FDrop
.93db	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.93dd	60		rts				rts
.93de	56 57		lsr $57,x	_shift:		lsr FSMant0,x
.93e0	76 61		ror $61,x			ror FSMant1,x
.93e2	76 6b		ror $6b,x			ror FSMant2,x
.93e4	76 75		ror $75,x			ror FSMant3,x
.93e6	6a		ror a				ror a
=115					CL	.var *-(WordListLink+wh_Xt)
=$93e7					en = *	; remember here
>9372	73					.byte CL	;wh_CodeLength
.93e7	60		rts				rts
>93e8	44 46 40			L1:	.text "DF@"	;  name of word as a string, ending at wh_NameLastChar
>93eb	03					.byte (("DF@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>93ec	ef 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>93ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>93ef	08					.byte NN	;wh_Flags	dictionary flags
=37739					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.93f0	20 a5 b3	jsr $b3a5	DFAt:		jsr PopYA		; pop df_addr
.93f3	85 16		sta $16		DFAt_YA:	sta tmp2+0		; save df_addr
.93f5	84 17		sty $17				sty tmp2+1
.93f7	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.93fa	a0 00		ldy #$00			ldy #0			; +0 IEEE byte
.93fc	b1 16		lda ($16),y			lda (tmp2),y
.93fe	95 4d		sta $4d,x			sta FSExp,x
.9400	c8		iny				iny			; +1 IEEE byte
.9401	b1 16		lda ($16),y			lda (tmp2),y
.9403	95 57		sta $57,x			sta FSMant0,x
.9405	c8		iny				iny			; +2 IEEE byte
.9406	b1 16		lda ($16),y			lda (tmp2),y
.9408	95 61		sta $61,x			sta FSMant1,x
.940a	c8		iny				iny			; +3 IEEE byte
.940b	b1 16		lda ($16),y			lda (tmp2),y
.940d	95 6b		sta $6b,x			sta FSMant2,x
.940f	c8		iny				iny			; +4 IEEE byte
.9410	b1 16		lda ($16),y			lda (tmp2),y
.9412	95 75		sta $75,x			sta FSMant3,x
.9414	c8		iny				iny			; +5 IEEE byte
.9415	b1 16		lda ($16),y			lda (tmp2),y
.9417	20 40 94	jsr $9440			jsr _shifta		; shift exponent & mantissa bits into place
.941a	20 40 94	jsr $9440			jsr _shifta
.941d	b5 57		lda $57,x			lda FSMant0,x		; finish shifting exponent bits
.941f	0a		asl a				asl a
.9420	36 4d		rol $4d,x			rol FSExp,x
.9422	0a		asl a				asl a
.9423	36 4d		rol $4d,x			rol FSExp,x
.9425	b5 4d		lda $4d,x			lda FSExp,x		; remove +1023
.9427	18		clc				clc
.9428	69 02		adc #$02			adc #2
.942a	95 4d		sta $4d,x			sta FSExp,x
.942c	b5 57		lda $57,x			lda FSMant0,x
.942e	29 7f		and #$7f			and #$7f
.9430	09 40		ora #$40			ora #$40		;   insert implied 1
.9432	95 57		sta $57,x			sta FSMant0,x		;   insert sign=0
.9434	a6 14		ldx $14				ldx tmp1		; restore data stack index
.9436	a0 00		ldy #$00			ldy #0			; get sign from +0 IEEE byte
.9438	b1 16		lda ($16),y			lda (tmp2),y
.943a	10 03		bpl $943f			bpl +
.943c	20 a2 8b	jsr $8ba2			jsr FNegate
.943f					+
.943f	60		rts				rts
.9440	0a		asl a		_shifta:	asl a
.9441	36 75		rol $75,x			rol FSMant3,x
.9443	36 6b		rol $6b,x			rol FSMant2,x
.9445	36 61		rol $61,x			rol FSMant1,x
.9447	36 57		rol $57,x			rol FSMant0,x
.9449	36 4d		rol $4d,x			rol FSExp,x
.944b	60		rts				rts
=92					CL	.var *-(WordListLink+wh_Xt)
=$944c					en = *	; remember here
>93ee	5c					.byte CL	;wh_CodeLength
>944c	44 46 6c 6f 61 74 2b		L1:	.text "DFloat+"	;  name of word as a string, ending at wh_NameLastChar
>9453	67					.byte (("DFloat+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9454	6b 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9456	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9457	08					.byte NN	;wh_Flags	dictionary flags
=37843					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9458	a9 08		lda #$08	DFloatPlus:	lda #8
.945a	4c a7 c9	jmp $c9a7			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$945d					en = *	; remember here
>9456	05					.byte CL	;wh_CodeLength
>945d	44 46 6c 6f 61 74 73		L1:	.text "DFloats"	;  name of word as a string, ending at wh_NameLastChar
>9464	67					.byte (("DFloats"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9465	d3 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9467	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9468	08					.byte NN	;wh_Flags	dictionary flags
=37860					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9469	a9 03		lda #$03	DFloats:	lda #3
.946b	4c eb ca	jmp $caeb			jmp LShift_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$946e					en = *	; remember here
>9467	05					.byte CL	;wh_CodeLength
>946e	46 4b 65 79			L1:	.text "FKey"	;  name of word as a string, ending at wh_NameLastChar
>9472	24					.byte (("FKey"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9473	e4 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9475	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9476	08					.byte NN	;wh_Flags	dictionary flags
=37874					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9477					FKey:
.9477	20 c4 c9	jsr $c9c4			jsr Here		; ( addr )
.947a	20 c4 c9	jsr $c9c4			jsr Here		; ( addr addr )
.947d	a9 28		lda #$28			lda #40			; ( addr addr 40 )
.947f	20 a1 b7	jsr $b7a1			jsr PushZA
.9482	20 77 c2	jsr $c277			jsr Accept		; ( addr len )
.9485	20 c8 91	jsr $91c8			jsr ToFloat		; ( true | false)
.9488	e8		inx				inx			; err?
.9489	e8		inx				inx
.948a	b5 22		lda $22,x			lda DStack-2,x
.948c	f0 01		beq $948f			beq _err
.948e	60		rts				rts
.948f	20 80 b8	jsr $b880	_err:		jsr SLiteral_runtime
.9492	4c 98 94	jmp $9498			  jmp +
>9495	20 3f 20					  .text " ? "
.9498	20 8a cd	jsr $cd8a	+		jsr Type
.949b	4c 77 94	jmp $9477			jmp FKey
>949e	46 4d 50 6f 6c 79		L1:	.text "FMPoly"	;  name of word as a string, ending at wh_NameLastChar
>94a4	26					.byte (("FMPoly"[-1]&7)<<5)+(*-L1)	;wh_HNL
>94a5	f2 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>94a7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>94a8	08					.byte NN	;wh_Flags	dictionary flags
=37924					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.94a9	20 a5 b3	jsr $b3a5	FMPoly:		jsr PopYA
.94ac	20 5f b7	jsr $b75f	FMPolyYA:	jsr PushYA		; push coefficent addr
.94af	20 82 85	jsr $8582			jsr FAt_YA		; fetch 1st coefficent
.94b2	4c c5 94	jmp $94c5			jmp _4
.94b5	20 9c 84	jsr $849c	_2:		jsr FOver
.94b8	20 fd 8b	jsr $8bfd			jsr FStar
.94bb	b5 24		lda $24,x			lda DStack+0,x		; fetch next coefficent
.94bd	b4 25		ldy $25,x			ldy DStack+1,x
.94bf	20 82 85	jsr $8582			jsr FAt_YA
.94c2	20 29 8b	jsr $8b29			jsr FPlus
.94c5	a9 05		lda #$05	_4:		lda #5			; bump coefficent ptr
.94c7	20 a7 c9	jsr $c9a7			jsr Plus_A
.94ca	a1 24		lda ($24,x)			lda (DStack+0,x)	; end of coefficent list?
.94cc	d0 e7		bne $94b5			bne _2
.94ce	e8		inx				inx			; Drop coefficent ptr
.94cf	e8		inx				inx
=39					CL	.var *-(WordListLink+wh_Xt)
=$94d0					en = *	; remember here
>94a7	27					.byte CL	;wh_CodeLength
.94d0	60		rts				rts
>94d1	46 4c 6f 67 32 4d 31 4d		L1:	.text "FLog2M1M"	;  name of word as a string, ending at wh_NameLastChar
>94d9	a8					.byte (("FLog2M1M"[-1]&7)<<5)+(*-L1)	;wh_HNL
>94da	24 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>94dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>94dd	08					.byte NN	;wh_Flags	dictionary flags
=37977					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.94de	a9 e8		lda #$e8	FLog2M1M:	lda #<_c
.94e0	a0 94		ldy #$94			ldy #>_c
.94e2	20 ac 94	jsr $94ac			jsr FMPolyYA
.94e5	4c fd 8b	jmp $8bfd			jmp FStar
.94e8					_c:
>94e8	cc cf 97 7c					.dword $7C97CFCC	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94ec	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>94ed	64 87 94 af					.dword $AF948764	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94f1	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>94f2	66 c8 d4 62					.dword $62D4C866	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94f6	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>94f7	e2 9c c3 ac					.dword $ACC39CE2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94fb	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>94fc	1a c6 2b 79					.dword $792BC61A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9500	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9501	07 e1 c4 a3					.dword $A3C4E107	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9505	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>9506	91 a5 54 5c					.dword $5C54A591	; 32 bit signed binary mantissa.  $40000000 = +0.5
>950a	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>950b	00 00						.word 0
=47					CL	.var *-(WordListLink+wh_Xt)
=$950d					en = *	; remember here
>94dc	2f					.byte CL	;wh_CodeLength
>950d	46 4c 6f 67 32			L1:	.text "FLog2"	;  name of word as a string, ending at wh_NameLastChar
>9512	45					.byte (("FLog2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9513	59 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9515	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9516	08					.byte NN	;wh_Flags	dictionary flags
=38034					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9517	a4 4c		ldy $4c		FLog2:		ldy fp
.9519	b9 57 00	lda $0057,y			lda FSMant0,y	; bad param?
.951c	30 20		bmi $953e			bmi _OutOfRange
.951e	f0 1e		beq $953e			beq _OutOfRange
.9520	b9 4d 00	lda $004d,y			lda FSExp,y
.9523	48		pha				pha		; remember orig exponent
.9524	a9 01		lda #$01			lda #1
.9526	99 4d 00	sta $004d,y			sta FSExp,y	; set to 1
.9529	20 90 8b	jsr $8b90			jsr F1Minus
.952c	20 de 94	jsr $94de			jsr FLog2M1M
.952f	a0 00		ldy #$00			ldy #0		; add orig exponent to float
.9531	68		pla				pla
.9532	38		sec				sec
.9533	e9 01		sbc #$01			sbc #1
.9535	10 01		bpl $9538			bpl +
.9537	88		dey				dey
.9538					+
.9538	20 4c 8e	jsr $8e4c			jsr SToFYA
.953b	4c 29 8b	jmp $8b29			jmp FPlus
.953e	4c 07 b4	jmp $b407	_OutOfRange:	jmp Throw_FpOutOfRange
=42					CL	.var *-(WordListLink+wh_Xt)
=$9541					en = *	; remember here
>9515	2a					.byte CL	;wh_CodeLength
>9541	46 4c 6e			L1:	.text "FLn"	;  name of word as a string, ending at wh_NameLastChar
>9544	c3					.byte (("FLn"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9545	92 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9547	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9548	08					.byte NN	;wh_Flags	dictionary flags
=38084					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9549	20 17 95	jsr $9517	FLn:		jsr FLog2
.954c	20 cc 88	jsr $88cc			jsr FLitI
>954f	f8 0b b9 58					.dword $58b90bf8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9553	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
.9554	4c fd 8b	jmp $8bfd			jmp FStar
=14					CL	.var *-(WordListLink+wh_Xt)
=$9557					en = *	; remember here
>9547	0e					.byte CL	;wh_CodeLength
>9557	46 4c 6e 50 31			L1:	.text "FLnP1"	;  name of word as a string, ending at wh_NameLastChar
>955c	25					.byte (("FLnP1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>955d	c4 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>955f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9560	08					.byte NN	;wh_Flags	dictionary flags
=38108					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9561	20 5e 8b	jsr $8b5e	FlnP1:		jsr F1Plus
.9564	4c 49 95	jmp $9549			jmp FLn
=6					CL	.var *-(WordListLink+wh_Xt)
=$9567					en = *	; remember here
>955f	06					.byte CL	;wh_CodeLength
>9567	46 4c 6f 67			L1:	.text "FLog"	;  name of word as a string, ending at wh_NameLastChar
>956b	e4					.byte (("FLog"[-1]&7)<<5)+(*-L1)	;wh_HNL
>956c	dc 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>956e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>956f	08					.byte NN	;wh_Flags	dictionary flags
=38123					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9570	20 17 95	jsr $9517	FLog:		jsr FLog2
.9573	20 cc 88	jsr $88cc			jsr FLitI
>9576	3c 4d 10 4d					.dword $4d104d3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>957a	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
.957b	4c fd 8b	jmp $8bfd			jmp FStar
=14					CL	.var *-(WordListLink+wh_Xt)
=$957e					en = *	; remember here
>956e	0e					.byte CL	;wh_CodeLength
>957e	46 45 78 70 32 4d 31 4d		L1:	.text "FExp2M1M"	;  name of word as a string, ending at wh_NameLastChar
>9586	a8					.byte (("FExp2M1M"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9587	eb 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9589	03					.byte 3		;wh_CodeLength  (with placeholder value)
>958a	08					.byte NN	;wh_Flags	dictionary flags
=38150					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.958b	a9 95		lda #$95	FExp2M1M:	lda #<_c
.958d	a0 95		ldy #$95			ldy #>_c
.958f	20 ac 94	jsr $94ac			jsr FMPolyYA
.9592	4c fd 8b	jmp $8bfd			jmp FStar
=10					CL	.var *-(WordListLink+wh_Xt)
=$9595					en = *	; remember here
>9589	0a					.byte CL	;wh_CodeLength
.9595					_c:
>9595	da dc 4f 7c					.dword $7C4FDCDa	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9599	f7						.char -9		; 8 bit signed exponent.  $00 = 2**0
>959a	d6 ca 4c 49					.dword $494CCAD6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>959e	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>959f	f0 42 64 72					.dword $726442f0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95a3	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>95a4	44 90 f4 7a					.dword $7AF49044	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95a8	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>95a9	9b 3c b9 58					.dword $58B93C9b	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95ad	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>95ae	00						.byte 0
>95af	46 45 78 70 32			L1:	.text "FExp2"	;  name of word as a string, ending at wh_NameLastChar
>95b4	45					.byte (("FExp2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95b5	06 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95b8	08					.byte NN	;wh_Flags	dictionary flags
=38196					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95b9	20 17 87	jsr $8717	FExp2:		jsr FIntFrc	; ( f: r_rem r_int )
.95bc	20 96 8e	jsr $8e96			jsr FToS
.95bf	20 8b 95	jsr $958b			jsr FExp2M1M
.95c2	20 5e 8b	jsr $8b5e			jsr F1Plus
.95c5	20 89 b3	jsr $b389			jsr PopA
.95c8	a4 4c		ldy $4c				ldy fp
.95ca	18		clc				clc
.95cb	79 4d 00	adc $004d,y			adc FSExp,y
.95ce	99 4d 00	sta $004d,y			sta FSExp,y
=24					CL	.var *-(WordListLink+wh_Xt)
=$95d1					en = *	; remember here
>95b7	18					.byte CL	;wh_CodeLength
.95d1	60		rts				rts
>95d2	46 45 78 70			L1:	.text "FExp"	;  name of word as a string, ending at wh_NameLastChar
>95d6	04					.byte (("FExp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95d7	34 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95d9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95da	08					.byte NN	;wh_Flags	dictionary flags
=38230					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95db					FExp:
.95db	20 cc 88	jsr $88cc			jsr FLitI
>95de	94 1d 55 5c					.dword $5c551d94	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95e2	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
.95e3	20 fd 8b	jsr $8bfd			jsr FStar
.95e6	4c b9 95	jmp $95b9			jmp FExp2
=14					CL	.var *-(WordListLink+wh_Xt)
=$95e9					en = *	; remember here
>95d9	0e					.byte CL	;wh_CodeLength
>95e9	46 45 78 70 4d 31		L1:	.text "FExpM1"	;  name of word as a string, ending at wh_NameLastChar
>95ef	26					.byte (("FExpM1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95f0	56 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95f2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95f3	08					.byte NN	;wh_Flags	dictionary flags
=38255					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95f4	20 db 95	jsr $95db	FExpM1:		jsr FExp
.95f7	4c 90 8b	jmp $8b90			jmp F1Minus
=6					CL	.var *-(WordListLink+wh_Xt)
=$95fa					en = *	; remember here
>95f2	06					.byte CL	;wh_CodeLength
>95fa	46 41 4c 6f 67			L1:	.text "FALog"	;  name of word as a string, ending at wh_NameLastChar
>95ff	e5					.byte (("FALog"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9600	6f 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9602	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9603	08					.byte NN	;wh_Flags	dictionary flags
=38271					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9604					FALog:
.9604	20 cc 88	jsr $88cc			jsr FLitI
>9607	20 3c 4d 6a					.dword $6a4d3c20	; 32 bit signed binary mantissa.  $40000000 = +0.5
>960b	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
.960c	20 fd 8b	jsr $8bfd			jsr FStar
.960f	4c b9 95	jmp $95b9			jmp FExp2
=14					CL	.var *-(WordListLink+wh_Xt)
=$9612					en = *	; remember here
>9602	0e					.byte CL	;wh_CodeLength
>9612	46 2a 2a			L1:	.text "F**"	;  name of word as a string, ending at wh_NameLastChar
>9615	43					.byte (("F**"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9616	7f 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9618	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9619	08					.byte NN	;wh_Flags	dictionary flags
=38293					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.961a	20 00 85	jsr $8500	FPower:		jsr FSwap
.961d	20 17 95	jsr $9517			jsr FLog2
.9620	20 fd 8b	jsr $8bfd			jsr FStar
.9623	4c b9 95	jmp $95b9			jmp FExp2
=12					CL	.var *-(WordListLink+wh_Xt)
=$9626					en = *	; remember here
>9618	0c					.byte CL	;wh_CodeLength
>9626	44 65 67 32 52 61 64		L1:	.text "Deg2Rad"	;  name of word as a string, ending at wh_NameLastChar
>962d	87					.byte (("Deg2Rad"[-1]&7)<<5)+(*-L1)	;wh_HNL
>962e	95 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9630	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9631	08					.byte NN	;wh_Flags	dictionary flags
=38317					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9632					Deg2Rad:
.9632	20 cc 88	jsr $88cc			jsr FLitI
>9635	8a 1a 7d 47					.dword $477d1A8A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9639	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
.963a	4c fd 8b	jmp $8bfd			jmp FStar
=11					CL	.var *-(WordListLink+wh_Xt)
=$963d					en = *	; remember here
>9630	0b					.byte CL	;wh_CodeLength
>963d	52 61 64 32 44 65 67		L1:	.text "Rad2Deg"	;  name of word as a string, ending at wh_NameLastChar
>9644	e7					.byte (("Rad2Deg"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9645	ad 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9647	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9648	08					.byte NN	;wh_Flags	dictionary flags
=38340					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9649					Rad2Deg:
.9649	20 cc 88	jsr $88cc			jsr FLitI
>964c	68 70 97 72					.dword $72977068	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9650	06						.char 6		; 8 bit signed exponent.  $00 = 2**0
.9651	4c fd 8b	jmp $8bfd			jmp FStar
=11					CL	.var *-(WordListLink+wh_Xt)
=$9654					en = *	; remember here
>9647	0b					.byte CL	;wh_CodeLength
>9654	46 41 52 65 64 75 63 65		L1:	.text "FAReduce"	;  name of word as a string, ending at wh_NameLastChar
>965c	a8					.byte (("FAReduce"[-1]&7)<<5)+(*-L1)	;wh_HNL
>965d	c4 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>965f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9660	08					.byte NN	;wh_Flags	dictionary flags
=38364					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9661	a4 4c		ldy $4c		FAReduce:	ldy fp
.9663	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.9666	f0 2f		beq $9697			beq _ok
.9668	b9 4d 00	lda $004d,y			lda FSExp,y		; get exponent
.966b	30 2a		bmi $9697			bmi _ok			; small?
.966d	c9 01		cmp #$01			cmp #1			; maybe need mirror?
.966f	30 26		bmi $9697			bmi _ok			;if exponent <=0
.9671	f0 24		beq $9697			beq _ok
.9673	c9 02		cmp #$02			cmp #2			; maybe need rotation?
.9675	b0 22		bcs $9699			bcs _exp2
.9677	b9 57 00	lda $0057,y			lda FSMant0,y
.967a	c9 65		cmp #$65			cmp #$65		;in -pi/2..pi/2 ?
.967c	90 19		bcc $9697			bcc _ok
.967e	c9 9b		cmp #$9b			cmp #$100-$65
.9680	b0 15		bcs $9697			bcs _ok
.9682					_mir:
.9682	20 45 89	jsr $8945			jsr FPi
.9685	a4 4c		ldy $4c				ldy fp
.9687	b9 58 00	lda $0058,y			lda FSMant0+1,y
.968a	10 03		bpl $968f			bpl _3
.968c	20 a2 8b	jsr $8ba2			jsr FNegate
.968f	20 00 85	jsr $8500	_3:		jsr FSwap
.9692	20 6b 8b	jsr $8b6b			jsr FMinus
.9695	38		sec				sec		; mirrored
.9696	60		rts				rts
.9697	18		clc		_ok:		clc		; not mirrored
.9698	60		rts				rts
.9699	d0 0b		bne $96a6	_exp2:		bne _rot	;if exp>2 then fix
.969b	b9 57 00	lda $0057,y			lda FSMant0,y
.969e	c9 65		cmp #$65			cmp #$65	;if mant>pi or mant<-pi then fix
.96a0	90 e0		bcc $9682			bcc _mir
.96a2	c9 9b		cmp #$9b			cmp #$100-$65
.96a4	b0 dc		bcs $9682			bcs _mir
.96a6	20 77 89	jsr $8977	_rot:		jsr F2Pi
.96a9	20 bb 8c	jsr $8cbb			jsr FSlash
.96ac	20 17 87	jsr $8717			jsr FIntFrc
.96af	e6 4c		inc $4c				inc fp		; FDrop integer part
.96b1	a4 4c		ldy $4c				ldy fp		;if >=.5
.96b3	b9 4d 00	lda $004d,y			lda FSExp,y
.96b6	a8		tay				tay
.96b7	30 03		bmi $96bc			bmi _rot4
.96b9	20 90 8b	jsr $8b90			jsr F1Minus	;  subtract 1
.96bc	20 77 89	jsr $8977	_rot4:		jsr F2Pi
.96bf	20 fd 8b	jsr $8bfd			jsr FStar
.96c2	4c 61 96	jmp $9661			jmp FAReduce	; rotate done, look again
=100					CL	.var *-(WordListLink+wh_Xt)
=$96c5					en = *	; remember here
>965f	64					.byte CL	;wh_CodeLength
>96c5	46 53 69 6e 4d			L1:	.text "FSinM"	;  name of word as a string, ending at wh_NameLastChar
>96ca	a5					.byte (("FSinM"[-1]&7)<<5)+(*-L1)	;wh_HNL
>96cb	dc 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96ce	08					.byte NN	;wh_Flags	dictionary flags
=38474					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.96cf	20 78 84	jsr $8478	FSinM:		jsr FDup
.96d2	20 8e 8c	jsr $8c8e			jsr FSqr	; x x^2
.96d5	a9 e5		lda #$e5			lda #<_c
.96d7	a0 96		ldy #$96			ldy #>_c
.96d9	20 ac 94	jsr $94ac			jsr FMPolyYA
.96dc	20 fd 8b	jsr $8bfd			jsr FStar
.96df	20 5e 8b	jsr $8b5e			jsr F1Plus	; C0 +1.0
.96e2	4c fd 8b	jmp $8bfd			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$96e5					en = *	; remember here
>96cd	16					.byte CL	;wh_CodeLength
.96e5					_c:
>96e5	a6 a7 21 57					.dword $5721a7a6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96e9	ee						.char -18		; 8 bit signed exponent.  $00 = 2**0
>96ea	4e 0b 2a 98					.dword $982a0b4e	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96ee	f4						.char -12		; 8 bit signed exponent.  $00 = 2**0
>96ef	3c 8f 43 44					.dword $44438f3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96f3	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>96f4	37 ae aa aa					.dword $aaaaae37	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96f8	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>96f9	00						.byte 0
>96fa	46 53 69 6e			L1:	.text "FSin"	;  name of word as a string, ending at wh_NameLastChar
>96fe	c4					.byte (("FSin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>96ff	4a 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9701	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9702	08					.byte NN	;wh_Flags	dictionary flags
=38526					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9703	20 61 96	jsr $9661	FSin:		jsr FAReduce
.9706	4c cf 96	jmp $96cf			jmp FSinM
=6					CL	.var *-(WordListLink+wh_Xt)
=$9709					en = *	; remember here
>9701	06					.byte CL	;wh_CodeLength
>9709	46 43 6f 73			L1:	.text "FCos"	;  name of word as a string, ending at wh_NameLastChar
>970d	64					.byte (("FCos"[-1]&7)<<5)+(*-L1)	;wh_HNL
>970e	7e 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9710	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9711	08					.byte NN	;wh_Flags	dictionary flags
=38541					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9712	20 56 89	jsr $8956	FCos:		jsr FPiH
.9715	20 29 8b	jsr $8b29			jsr FPlus
.9718	4c 03 97	jmp $9703			jmp FSin
=9					CL	.var *-(WordListLink+wh_Xt)
=$971b					en = *	; remember here
>9710	09					.byte CL	;wh_CodeLength
>971b	46 53 69 6e 43 6f 73		L1:	.text "FSinCos"	;  name of word as a string, ending at wh_NameLastChar
>9722	67					.byte (("FSinCos"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9723	8d 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9725	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9726	08					.byte NN	;wh_Flags	dictionary flags
=38562					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9727	20 78 84	jsr $8478	FSinCos:	jsr FDup
.972a	20 03 97	jsr $9703			jsr FSin
.972d	20 00 85	jsr $8500			jsr FSwap
.9730	4c 12 97	jmp $9712			jmp FCos
=12					CL	.var *-(WordListLink+wh_Xt)
=$9733					en = *	; remember here
>9725	0c					.byte CL	;wh_CodeLength
>9733	46 54 61 6e 4d			L1:	.text "FTanM"	;  name of word as a string, ending at wh_NameLastChar
>9738	a5					.byte (("FTanM"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9739	a2 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>973b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>973c	08					.byte NN	;wh_Flags	dictionary flags
=38584					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.973d	20 78 84	jsr $8478	FTanM:		jsr FDup
.9740	20 8e 8c	jsr $8c8e			jsr FSqr		; x x^2
.9743	a9 53		lda #$53			lda #<_c
.9745	a0 97		ldy #$97			ldy #>_c
.9747	20 ac 94	jsr $94ac			jsr FMPolyYA
.974a	20 fd 8b	jsr $8bfd			jsr FStar
.974d	20 5e 8b	jsr $8b5e			jsr F1Plus		; c0 1.0
.9750	4c fd 8b	jmp $8bfd			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$9753					en = *	; remember here
>973b	16					.byte CL	;wh_CodeLength
.9753					_c:
>9753	1e ae 4d 58					.dword $584DAE1E	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9757	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>9758	51 0a eb 57					.dword $57EB0A51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>975c	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>975d	98 d9 14 77					.dword $7714D998	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9761	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9762	f9 10 ea 43					.dword $43EA10F9	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9766	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9767	1b e2 57 55					.dword $5557E21B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>976b	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>976c	00						.byte 0
>976d	46 54 61 6e			L1:	.text "FTan"	;  name of word as a string, ending at wh_NameLastChar
>9771	c4					.byte (("FTan"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9772	b8 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9774	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9775	08					.byte NN	;wh_Flags	dictionary flags
=38641					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9776	20 61 96	jsr $9661	FTan:		jsr FAReduce
.9779	90 06		bcc $9781			bcc _30
.977b	20 81 97	jsr $9781			jsr _30
.977e	4c a2 8b	jmp $8ba2			jmp FNegate
.9781					_30:
.9781	20 78 84	jsr $8478			jsr FDup
.9784	20 c9 8b	jsr $8bc9			jsr FAbs
.9787	20 67 89	jsr $8967			jsr FPiQ
.978a	20 d3 87	jsr $87d3			jsr FLe
.978d	e8		inx				inx			; pop f
.978e	e8		inx				inx
.978f	b5 24		lda $24,x			lda DStack+0,x
.9791	d0 aa		bne $973d			bne FTanM
.9793	20 a2 44	jsr $44a2			jsr FPi/2
.9796	a4 4c		ldy $4c				ldy fp			; get sign
.9798	b9 57 00	lda $0057,y			lda FSMant0,y
.979b	10 03		bpl $97a0			bpl +
.979d	20 a2 8b	jsr $8ba2			jsr FNegate
.97a0					+
.97a0	20 00 85	jsr $8500			jsr FSwap
.97a3	20 6b 8b	jsr $8b6b			jsr FMinus
.97a6	20 3d 97	jsr $973d			jsr FTanM
.97a9	4c 60 8d	jmp $8d60			jmp F1Slash
=54					CL	.var *-(WordListLink+wh_Xt)
=$97ac					en = *	; remember here
>9774	36					.byte CL	;wh_CodeLength
>97ac	46 41 43 6f 73			L1:	.text "FACos"	;  name of word as a string, ending at wh_NameLastChar
>97b1	65					.byte (("FACos"[-1]&7)<<5)+(*-L1)	;wh_HNL
>97b2	f1 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>97b4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>97b5	08					.byte NN	;wh_Flags	dictionary flags
=38705					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.97b6	a4 4c		ldy $4c		FACos:		ldy fp
.97b8	b9 57 00	lda $0057,y			lda FSMant0,y
.97bb	08		php				php			; save sign
.97bc	20 c9 8b	jsr $8bc9			jsr FAbs
.97bf	a9 e2		lda #$e2			lda #<_c
.97c1	a0 97		ldy #$97			ldy #>_c
.97c3	20 ac 94	jsr $94ac			jsr FMPolyYA
.97c6	20 00 85	jsr $8500			jsr FSwap
.97c9	20 a2 8b	jsr $8ba2			jsr FNegate
.97cc	20 5e 8b	jsr $8b5e			jsr F1Plus
.97cf	20 3b 8f	jsr $8f3b			jsr FSqrt
.97d2	20 fd 8b	jsr $8bfd			jsr FStar
.97d5	28		plp				plp			; was r1 negative?
.97d6	10 09		bpl $97e1			bpl +
.97d8	20 45 89	jsr $8945			jsr FPi
.97db	20 00 85	jsr $8500			jsr FSwap
.97de	20 6b 8b	jsr $8b6b			jsr FMinus
.97e1					+
=43					CL	.var *-(WordListLink+wh_Xt)
=$97e1					en = *	; remember here
>97b4	2b					.byte CL	;wh_CodeLength
.97e1	60		rts				rts
.97e2					_c:
>97e2	8b 5e 9f 4b					.dword $4B9F5E8B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97e6	f8						.char -8		; 8 bit signed exponent.  $00 = 2**0
>97e7	ad cc 29 a4					.dword $A429CCAD	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97eb	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>97ec	98 a1 a3 6e					.dword $6EA3A198	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97f0	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>97f1	5a 10 e1 9b					.dword $9BE1105A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97f5	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>97f6	c6 71 ea 5a					.dword $5AEA71C6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97fa	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>97fb	e0 56 21 92					.dword $922156E0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97ff	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9800	41 ed 87 64					.dword $6487ED41	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9804	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>9805	00						.byte 0
>9806	46 41 53 69 6e			L1:	.text "FASin"	;  name of word as a string, ending at wh_NameLastChar
>980b	c5					.byte (("FASin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>980c	31 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>980e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>980f	08					.byte NN	;wh_Flags	dictionary flags
=38795					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9810	20 b6 97	jsr $97b6	FASin:		jsr FACos
.9813	20 a2 8b	jsr $8ba2			jsr FNegate
.9816	20 56 89	jsr $8956			jsr FPiH
.9819	4c 29 8b	jmp $8b29			jmp FPlus
=12					CL	.var *-(WordListLink+wh_Xt)
=$981c					en = *	; remember here
>980e	0c					.byte CL	;wh_CodeLength
>981c	46 41 54 61 6e 4d		L1:	.text "FATanM"	;  name of word as a string, ending at wh_NameLastChar
>9822	a6					.byte (("FATanM"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9823	8b 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9825	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9826	08					.byte NN	;wh_Flags	dictionary flags
=38818					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9827	20 78 84	jsr $8478	FATanM:		jsr FDup		; x x
.982a	20 8e 8c	jsr $8c8e			jsr FSqr		; x xsqr
.982d	a9 3d		lda #$3d			lda #<_c
.982f	a0 98		ldy #$98			ldy #>_c
.9831	20 ac 94	jsr $94ac			jsr FMPolyYA
.9834	20 fd 8b	jsr $8bfd			jsr FStar		; x poly
.9837	20 5e 8b	jsr $8b5e			jsr F1Plus		; x poly
.983a	4c fd 8b	jmp $8bfd			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$983d					en = *	; remember here
>9825	16					.byte CL	;wh_CodeLength
.983d					_c:
>983d	98 08 2d 76					.dword $762D0898	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9841	f9						.char -7		; 8 bit signed exponent.  $00 = 2**0
>9842	55 a1 32 b8					.dword $B832A155	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9846	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9847	a8 d7 a2 53					.dword $53A2D7A8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>984b	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>984c	be 91 85 bb					.dword $BB8591BE	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9850	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9851	06 65 aa 65					.dword $65AA6506	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9855	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9856	12 21 b0 aa					.dword $AAB02112	; 32 bit signed binary mantissa.  $40000000 = +0.5
>985a	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>985b	00						.byte 0
>985c	46 41 54 61 6e			L1:	.text "FATan"	;  name of word as a string, ending at wh_NameLastChar
>9861	c5					.byte (("FATan"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9862	a2 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9864	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9865	08					.byte NN	;wh_Flags	dictionary flags
=38881					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9866					FATan:
.9866	a4 4c		ldy $4c				ldy fp
.9868	b9 4d 00	lda $004d,y			lda FSExp,y		; Abs(r1)<1 ?
.986b	30 ba		bmi $9827			bmi FATanM
.986d	f0 b8		beq $9827			beq FATanM
.986f	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.9872	08		php				php
.9873	20 60 8d	jsr $8d60			jsr F1Slash
.9876	20 27 98	jsr $9827			jsr FATanM
.9879	20 a2 8b	jsr $8ba2			jsr FNegate
.987c	20 56 89	jsr $8956			jsr FPiH
.987f	28		plp				plp
.9880	10 03		bpl $9885			bpl _18
.9882	20 a2 8b	jsr $8ba2			jsr FNegate
.9885	4c 29 8b	jmp $8b29	_18:		jmp FPlus
>9888	46 41 54 61 6e 32		L1:	.text "FATan2"	;  name of word as a string, ending at wh_NameLastChar
>988e	46					.byte (("FATan2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>988f	e1 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9891	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9892	08					.byte NN	;wh_Flags	dictionary flags
=38926					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9893	a4 4c		ldy $4c		FATan2:		ldy fp
.9895	b9 57 00	lda $0057,y			lda FSMant0+0,y	; get rx sign
.9898	f0 1c		beq $98b6			beq _rxzero
.989a	0a		asl a				asl a		;   C=rx sign
.989b	b9 58 00	lda $0058,y			lda FSMant0+1,y	;   N=ry sign
.989e	08		php				php		; save signs
.989f	20 bb 8c	jsr $8cbb			jsr FSlash
.98a2	20 66 98	jsr $9866			jsr FATan
.98a5	28		plp				plp		; pop signs
.98a6	b0 01		bcs $98a9			bcs _rxneg
.98a8	60		rts		_rts:		rts
.98a9	08		php		_rxneg:		php
.98aa	20 45 89	jsr $8945			jsr FPi
.98ad	28		plp				plp
.98ae	10 03		bpl $98b3			bpl +
.98b0	20 a2 8b	jsr $8ba2			jsr FNegate
.98b3	4c 29 8b	jmp $8b29	+		jmp FPlus
.98b6	e6 4c		inc $4c		_rxzero:	inc fp		; FDrop rx
.98b8	b9 57 00	lda $0057,y			lda FSMant0,y
.98bb	08		php				php
.98bc	e6 4c		inc $4c				inc fp		; FDrop ry
.98be	20 56 89	jsr $8956			jsr FPiH
.98c1	28		plp				plp
.98c2	10 e4		bpl $98a8			bpl _rts
.98c4	4c a2 8b	jmp $8ba2			jmp FNegate
=52					CL	.var *-(WordListLink+wh_Xt)
=$98c7					en = *	; remember here
>9891	34					.byte CL	;wh_CodeLength
>98c7	45 64				L1:	.text "Ed"	;  name of word as a string, ending at wh_NameLastChar
>98c9	82					.byte (("Ed"[-1]&7)<<5)+(*-L1)	;wh_HNL
>98ca	0e 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>98cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>98cd	08					.byte NN	;wh_Flags	dictionary flags
=38985					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.98ce	4c d1 98	jmp $98d1	Ed:		jmp ed6502
=3					CL	.var *-(WordListLink+wh_Xt)
=$98d1					en = *	; remember here
>98cc	03					.byte CL	;wh_CodeLength
=$1e					ed_head	 = editor1  ; pointer to first list element (addr) (2 bytes)
=$20					ed_cur	 = editor2  ; current line number (1 is first line) (2 bytes)
=$22					ed_flags = editor3  ; Flags used by ed, where
.98d1					ed6502:
.98d1	ad 00 03	lda $0300			lda base
.98d4	85 23		sta $23				sta editor3+1
.98d6	20 5e b1	jsr $b15e			jsr Decimal
.98d9	a9 00		lda #$00			lda #0
.98db	85 1e		sta $1e				sta ed_head
.98dd	85 1f		sta $1f				sta ed_head+1
.98df	85 20		sta $20				sta ed_cur
.98e1	85 21		sta $21				sta ed_cur+1
.98e3	85 22		sta $22				sta ed_flags
.98e5	20 b0 b7	jsr $b7b0			jsr Zero
.98e8	20 b0 b7	jsr $b7b0			jsr Zero		; ( addr-t u-t )
.98eb	20 e2 aa	jsr $aae2			jsr CR
.98ee					ed_input_loop:
.98ee	a9 7e		lda #$7e			lda #$ff-%10000001
.98f0	25 22		and $22				and ed_flags
.98f2	85 22		sta $22				sta ed_flags
.98f4	20 96 9d	jsr $9d96			jsr ed_get_input
.98f7	a5 06		lda $06				lda ciblen+0
.98f9	d0 1e		bne $9919			bne _command_mode
.98fb	a5 20		lda $20				lda ed_cur+0
.98fd	a4 21		ldy $21				ldy ed_cur+1
.98ff	20 5f b7	jsr $b75f			jsr PushYA		; ( addr-t u-t u )
.9902	a9 80		lda #$80			lda #%10000000
.9904	05 22		ora $22				ora ed_flags
.9906	85 22		sta $22				sta ed_flags
.9908	20 f8 c9	jsr $c9f8			jsr One_Plus		; ( addr-t u-t u+1 )
.990b	20 b1 9d	jsr $9db1			jsr ed_is_valid_line
.990e	b0 03		bcs $9913			bcs +
.9910	4c 86 9d	jmp $9d86			jmp ed_error_1drop	; New line number is not legal, abort
.9913					+
.9913	20 b0 b7	jsr $b7b0			jsr Zero		; ( addr-t u-t u+1 0 )
.9916	4c d8 99	jmp $99d8			jmp _line_number_only_from_external
.9919					_command_mode:
.9919	20 b0 b7	jsr $b7b0			jsr Zero		; parameter 1 is NOS ( addr-t u-t 0 )
.991c	20 b0 b7	jsr $b7b0			jsr Zero		; parameter 2 is TOS ( addr-t u-t 0 0 )
.991f	a0 00		ldy #$00			ldy #0			; get char
.9921	b1 04		lda ($04),y			lda (cib),y
.9923	c9 2e		cmp #$2e			cmp #'.'
.9925	d0 31		bne $9958			bne _prefix_dollar
.9927	20 a5 9d	jsr $9da5			jsr ed_have_text
.992a	a5 20		lda $20				lda ed_cur
.992c	95 26		sta $26,x			sta DStack+2,x
.992e	a5 21		lda $21				lda ed_cur+1
.9930	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9932	a9 80		lda #$80			lda #%10000000
.9934	05 22		ora $22				ora ed_flags
.9936	85 22		sta $22				sta ed_flags
.9938	a5 06		lda $06				lda ciblen
.993a	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.993c	d0 03		bne $9941			bne +
.993e	4c d8 99	jmp $99d8			jmp _line_number_only_from_external
.9941					+
.9941	a5 04		lda $04				lda cib+0
.9943	a4 05		ldy $05				ldy cib+1
.9945	20 5f b7	jsr $b75f			jsr PushYA
.9948	a5 06		lda $06				lda ciblen+0
.994a	a4 07		ldy $07				ldy ciblen+1
.994c	20 5f b7	jsr $b75f			jsr PushYA
.994f	20 d2 c9	jsr $c9d2			jsr One_Minus		; ( addr-t u-t para1 0 addr u-1 )
.9952	20 02 ca	jsr $ca02			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr+1 u-1 )
.9955	4c 2a 9a	jmp $9a2a			jmp _check_for_para2
.9958					_prefix_dollar:
.9958	c9 24		cmp #$24			cmp #'$'
.995a	d0 1f		bne $997b			bne _prefix_percent
.995c	20 a5 9d	jsr $9da5			jsr ed_have_text
.995f	e8		inx				inx
.9960	e8		inx				inx			; ( addr-t u-t 0 )
.9961	20 d2 9d	jsr $9dd2			jsr ed_last_line	; ( addr-t u-t 0 para1 )
.9964	20 20 cf	jsr $cf20			jsr Swap		; ( addr-t u-t para1 0 )
.9967	a9 80		lda #$80			lda #%10000000
.9969	05 22		ora $22				ora ed_flags
.996b	85 22		sta $22				sta ed_flags
.996d	a5 06		lda $06				lda ciblen
.996f	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9971	d0 03		bne $9976			bne +
.9973	4c d8 99	jmp $99d8			jmp _line_number_only_from_external
.9976					+
.9976	a0 01		ldy #$01			ldy #1
.9978	4c a0 9a	jmp $9aa0			jmp _check_command
.997b					_prefix_percent:
.997b	c9 25		cmp #$25			cmp #'%'
.997d	f0 04		beq $9983			beq _whole_text
.997f	c9 2c		cmp #$2c			cmp #','
.9981	d0 1b		bne $999e			bne _prefix_semicolon
.9983					_whole_text:
.9983	20 a5 9d	jsr $9da5			jsr ed_have_text
.9986	a9 01		lda #$01			lda #1
.9988	95 26		sta $26,x			sta DStack+2,x		; LSB of NOS is para 1
.998a	a9 00		lda #$00			lda #0
.998c	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t para1 0 )
.998e					_semicolon_entry:
.998e	e8		inx				inx
.998f	e8		inx				inx			; DROP ( addr-t u-t para1 )
.9990	20 d2 9d	jsr $9dd2			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9993	a9 80		lda #$80			lda #%10000000
.9995	05 22		ora $22				ora ed_flags
.9997	85 22		sta $22				sta ed_flags
.9999	a0 01		ldy #$01			ldy #1
.999b	4c a0 9a	jmp $9aa0			jmp _check_command
.999e					_prefix_semicolon:
.999e	c9 3b		cmp #$3b			cmp #';'
.99a0	d0 0e		bne $99b0			bne _prefix_number
.99a2	20 a5 9d	jsr $9da5			jsr ed_have_text
.99a5	a5 20		lda $20				lda ed_cur
.99a7	95 26		sta $26,x			sta DStack+2,x
.99a9	a5 21		lda $21				lda ed_cur+1
.99ab	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.99ad	4c 8e 99	jmp $998e			jmp _semicolon_entry
.99b0					_prefix_number:
.99b0	20 b0 b7	jsr $b7b0			jsr Zero
.99b3	20 b0 b7	jsr $b7b0			jsr Zero		; ( addr-t u-t 0 0 0 0 )
.99b6	a5 04		lda $04				lda cib+0
.99b8	a4 05		ldy $05				ldy cib+1
.99ba	20 5f b7	jsr $b75f			jsr PushYA
.99bd	a5 06		lda $06				lda ciblen+0
.99bf	a4 07		ldy $07				ldy ciblen+1
.99c1	20 5f b7	jsr $b75f			jsr PushYA		; ( addr-t u-t 0 0 0 0 cib ciblen )
.99c4	20 df af	jsr $afdf			jsr To_Number		; ( addr-t u-t 0 0 ud addr2 u2 )
.99c7	b5 24		lda $24,x			lda DStack+0,x
.99c9	15 25		ora $25,x			ora DStack+1,x
.99cb	d0 25		bne $99f2			bne _have_unconverted_chars
.99cd	20 bc c4	jsr $c4bc			jsr Two_Drop		; ( addr-t u-t 0 0 ud )
.99d0	20 e9 bf	jsr $bfe9			jsr D_To_S		; ( addr-t u-t 0 0 u )
.99d3	20 2c ce	jsr $ce2c			jsr Not_Rot		; ( addr-t u-t u 0 0 )
.99d6	e8		inx				inx
.99d7	e8		inx				inx			; ( addr-t u-t u 0 ) drop through
.99d8					_line_number_only_from_external:
.99d8	20 20 cf	jsr $cf20			jsr Swap		; ( addr-t u-t 0 u )
.99db	20 b1 9d	jsr $9db1			jsr ed_is_valid_line
.99de	b0 03		bcs $99e3			bcs +
.99e0	4c 84 9d	jmp $9d84			jmp ed_error_2drop
.99e3					+
.99e3	20 20 cf	jsr $cf20			jsr Swap		; ( addr-t u-t u 0 )
.99e6	20 11 9e	jsr $9e11			jsr ed_para1_to_cur
.99e9	a9 80		lda #$80			lda #%10000000
.99eb	05 22		ora $22				ora ed_flags
.99ed	85 22		sta $22				sta ed_flags
.99ef	4c 6f 9c	jmp $9c6f			jmp ed_cmd_p_from_external
.99f2					_have_unconverted_chars:
.99f2	a5 06		lda $06				lda ciblen+0
.99f4	d5 24		cmp $24,x			cmp DStack+0,x
.99f6	d0 16		bne $9a0e			bne _no_command_yet
.99f8	a5 07		lda $07				lda ciblen+1
.99fa	d5 25		cmp $25,x			cmp DStack+1,x
.99fc	d0 10		bne $9a0e			bne _no_command_yet
.99fe	8a		txa				txa
.99ff	18		clc				clc
.9a00	69 08		adc #$08			adc #8
.9a02	aa		tax				tax			; ( addr-t u-t 0 0 )
.9a03	a9 7f		lda #$7f			lda #$ff-%10000000
.9a05	25 22		and $22				and ed_flags
.9a07	85 22		sta $22				sta ed_flags
.9a09	a0 00		ldy #$00			ldy #0
.9a0b	4c a0 9a	jmp $9aa0			jmp _check_command
.9a0e					_no_command_yet:
.9a0e	20 87 ce	jsr $ce87			jsr To_R		; >R ( ... 0 0 ud addr2 ) (R: u2)
.9a11	20 2c ce	jsr $ce2c			jsr Not_Rot		; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.9a14	20 e9 bf	jsr $bfe9			jsr D_To_S		; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.9a17	b5 24		lda $24,x			lda DStack+0,x		; LSB
.9a19	95 2a		sta $2a,x			sta DStack+6,x
.9a1b	b5 25		lda $25,x			lda DStack+1,x		; MSB
.9a1d	95 2b		sta $2b,x			sta DStack+7,x		; ( ... para1 0 addr2 para1 ) (R: u2)
.9a1f	e8		inx				inx
.9a20	e8		inx				inx			; ( addr-t u-t para1 0 addr2 ) (R: u2)
.9a21	20 a6 ce	jsr $cea6			jsr R_From		; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.9a24	a9 80		lda #$80			lda #%10000000
.9a26	05 22		ora $22				ora ed_flags
.9a28	85 22		sta $22				sta ed_flags
.9a2a					_check_for_para2:
.9a2a	a1 26		lda ($26,x)			lda (DStack+2,x)
.9a2c	c9 2c		cmp #$2c			cmp #','
.9a2e	f0 0c		beq $9a3c			beq _got_comma
.9a30	38		sec				sec
.9a31	a5 06		lda $06				lda ciblen
.9a33	f5 24		sbc $24,x			sbc DStack+0,x
.9a35	a8		tay				tay
.9a36	20 bc c4	jsr $c4bc			jsr Two_Drop		; Remove the leftover stuff from >NUMBER
.9a39	4c a0 9a	jmp $9aa0			jmp _check_command
.9a3c					_got_comma:
.9a3c	20 02 ca	jsr $ca02			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr2+1 u2 )
.9a3f	20 d2 c9	jsr $c9d2			jsr One_Minus		; ( addr-t u-t para1 0 addr2+1 u2-1 )
.9a42	a1 26		lda ($26,x)			lda (DStack+2,x)
.9a44	c9 24		cmp #$24			cmp #'$'
.9a46	d0 16		bne $9a5e			bne _para2_not_dollar
.9a48	38		sec				sec
.9a49	a5 06		lda $06				lda ciblen
.9a4b	f5 26		sbc $26,x			sbc DStack+2,x
.9a4d	a8		tay				tay
.9a4e	c8		iny				iny
.9a4f	98		tya				tya
.9a50	48		pha				pha
.9a51	8a		txa				txa
.9a52	18		clc				clc
.9a53	69 06		adc #$06			adc #6
.9a55	aa		tax				tax			; ( addr-t u-t para1 )
.9a56	20 d2 9d	jsr $9dd2			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9a59	68		pla				pla
.9a5a	a8		tay				tay
.9a5b	4c a0 9a	jmp $9aa0			jmp _check_command
.9a5e					_para2_not_dollar:
.9a5e	20 87 ce	jsr $ce87			jsr To_R		; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.9a61	20 b0 b7	jsr $b7b0			jsr Zero		; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.9a64	20 b0 b7	jsr $b7b0			jsr Zero		; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.9a67	20 06 ce	jsr $ce06			jsr Rot		; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.9a6a	20 a6 ce	jsr $cea6			jsr R_From		; R> ( ... para1 0 0 0 addr2+1 u2-1)
.9a6d	20 02 cf	jsr $cf02			jsr Dup		; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.9a70	20 87 ce	jsr $ce87			jsr To_R		; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.9a73	20 df af	jsr $afdf			jsr To_Number	; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.9a76	20 02 cf	jsr $cf02			jsr Dup		; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.9a79	20 a6 ce	jsr $cea6			jsr R_From		; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.9a7c	20 b9 c7	jsr $c7b9			jsr Equal		; = ( ... para1 0 ud addr3 u3 f )
.9a7f	b5 24		lda $24,x			lda DStack+0,x
.9a81	15 25		ora $25,x			ora DStack+1,x
.9a83	f0 08		beq $9a8d			beq _second_number
.9a85	8a		txa				txa
.9a86	18		clc				clc
.9a87	69 0c		adc #$0c			adc #12
.9a89	aa		tax				tax			; back to ( addr-t u-t )
.9a8a	4c 88 9d	jmp $9d88			jmp ed_error
.9a8d					_second_number:
.9a8d	e8		inx				inx
.9a8e	e8		inx				inx			; ( addr-t u-t para1 0 ud addr3 u3 )
.9a8f	38		sec				sec
.9a90	a5 06		lda $06				lda ciblen
.9a92	f5 24		sbc $24,x			sbc DStack+0,x
.9a94	48		pha				pha
.9a95	20 bc c4	jsr $c4bc			jsr Two_drop		; 2DROP ( addr-t u-t para1 0 ud )
.9a98	20 e9 bf	jsr $bfe9			jsr D_To_S		; D>S  ( addr-t u-t para1 0 para2 )
.9a9b	20 1d c9	jsr $c91d			jsr Nip			; NIP ( addr-t u-t para1 para2 )
.9a9e	68		pla				pla
.9a9f	a8		tay				tay
.9aa0					_check_command:
.9aa0	24 22		bit $22				bit ed_flags
.9aa2	30 08		bmi $9aac			bmi _check_command_have_arg
.9aa4	a5 20		lda $20				lda ed_cur+0
.9aa6	95 26		sta $26,x			sta DStack+2,x
.9aa8	a5 21		lda $21				lda ed_cur+1
.9aaa	95 27		sta $27,x			sta DStack+3,x
.9aac					_check_command_have_arg:
.9aac	b1 04		lda ($04),y			lda (cib),y		; get mystery char from input
.9aae	85 14		sta $14				sta tmp1+0
.9ab0	85 15		sta $15				sta tmp1+1		; We need X for awhile, so it has to
.9ab2	a2 ff		ldx #$ff			ldx #$ff		; for each char
.9ab4	e8		inx		_cmd_loop:	inx			;   next char
.9ab5	bd 35 9e	lda $9e35,x			lda ed_cmd_list,x
.9ab8	f0 13		beq $9acd			beq _illegal_command	;   end of list?
.9aba	c5 14		cmp $14				cmp tmp1+0
.9abc	d0 f6		bne $9ab4			bne _cmd_loop		;   not found?
.9abe	8a		txa				txa
.9abf	0a		asl a				asl
.9ac0	aa		tax				tax			; X * 2 for table
.9ac1	bd 41 9e	lda $9e41,x			lda ed_cmd_table+1,x
.9ac4	48		pha				pha
.9ac5	bd 40 9e	lda $9e40,x			lda ed_Cmd_table+0,x
.9ac8	48		pha				pha
.9ac9	a6 15		ldx $15				ldx tmp1+1		; restore X
.9acb	08		php				php
.9acc	40		rti				rti			; jump to command routine
.9acd					_illegal_command:
.9acd	4c 84 9d	jmp $9d84			jmp ed_error_2drop
.9ad0					ed_next_command:
.9ad0	20 bc c4	jsr $c4bc			jsr Two_Drop		; ( addr-t u-t ) Fall through
.9ad3					_next_command_empty:
.9ad3	4c ee 98	jmp $98ee			jmp ed_input_loop
.9ad6					ed_all_done:
.9ad6	a9 00		lda #$00			lda #0
.9ad8	85 06		sta $06				sta ciblen
.9ada	85 07		sta $07				sta ciblen+1
.9adc	20 bc c4	jsr $c4bc			jsr Two_drop			; ( addr-t u-t )
.9adf	a5 23		lda $23				lda editor3+1
.9ae1	8d 00 03	sta $0300			sta base
.9ae4	60		rts				rts
.9ae5					ed_cmd_a:
.9ae5	e8		inx				inx
.9ae6	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9ae7					ed_entry_cmd_i:
.9ae7					ed_cmd_a_have_para:
.9ae7	20 f6 9d	jsr $9df6			jsr ed_num_to_addr	  ;  ( addr-t u-t addr1 )
.9aea	20 e2 aa	jsr $aae2			jsr CR
.9aed					_next_string_loop:
.9aed	20 96 9d	jsr $9d96			jsr ed_get_input
.9af0	a0 00		ldy #$00			ldy #0
.9af2	b1 04		lda ($04),y			lda (cib),y
.9af4	c9 2e		cmp #$2e			cmp #'.'
.9af6	d0 18		bne $9b10			bne _add_line
.9af8	a4 06		ldy $06				ldy ciblen
.9afa	c0 01		cpy #$01			cpy #1
.9afc	d0 12		bne $9b10			bne _add_line
.9afe	a4 07		ldy $07				ldy ciblen+1
.9b00	d0 0e		bne $9b10			bne _add_line
.9b02	e8		inx				inx
.9b03	e8		inx				inx
.9b04	a9 40		lda #$40			lda #%01000000
.9b06	05 22		ora $22				ora ed_flags
.9b08	85 22		sta $22				sta ed_flags
.9b0a	20 e2 aa	jsr $aae2			jsr CR
.9b0d	4c ee 98	jmp $98ee			jmp ed_input_loop
.9b10					_add_line:
.9b10	20 02 cf	jsr $cf02			jsr Dup			; ( addr-t u-t addr1 addr1 )
.9b13	20 c4 c9	jsr $c9c4			jsr Here		; ( addr-t u-t addr1 addr1 here )
.9b16	20 20 cf	jsr $cf20			jsr Swap		; ( addr-t u-t addr1 here addr1 )
.9b19	20 6c ce	jsr $ce6c			jsr Fetch		; ( addr-t u-t addr1 here addr2 )
.9b1c	20 b8 cc	jsr $ccb8			jsr Comma		; ( addr-t u-t addr1 here )
.9b1f	20 7d cc	jsr $cc7d			jsr Tuck		; TUCK ( addr-t u-t here addr1 here )
.9b22	20 20 cf	jsr $cf20			jsr Swap		; ( addr-t u-t here here addr1 )
.9b25	20 4f ce	jsr $ce4f			jsr Store		; ( addr-t u-t here )
.9b28	20 c4 c9	jsr $c9c4			jsr Here		; HERE ( addr-t u-t here here2)
.9b2b	a9 04		lda #$04			lda #4
.9b2d	20 a1 b7	jsr $b7a1			jsr PushZA
.9b30	20 83 c0	jsr $c083			jsr Allot
.9b33	e6 20		inc $20				inc ed_cur
.9b35	d0 02		bne $9b39			bne +
.9b37	e6 21		inc $21				inc ed_cur+1
.9b39					+
.9b39	20 c4 c9	jsr $c9c4			jsr Here	; ( addr-t u-t here here2 here3 )
.9b3c	a5 04		lda $04				lda cib+0
.9b3e	a4 05		ldy $05				ldy cib+1
.9b40	20 5f b7	jsr $b75f			jsr PushYA	; ( addr-t u-t here here2 here3 cib )
.9b43	20 d9 ce	jsr $ced9			jsr Over	; ( addr-t u-t here here2 here3 cib here3 )
.9b46	a5 06		lda $06				lda ciblen+0
.9b48	a4 07		ldy $07				ldy ciblen+1
.9b4a	20 5f b7	jsr $b75f			jsr PushYA	; ( addr-t u-t here here2 here3 cib here3 ciblen )
.9b4d	20 ff ac	jsr $acff			jsr Move	; ( addr-t u-t here here2 here3 )
.9b50	18		clc				clc
.9b51	a5 00		lda $00				lda cp
.9b53	65 06		adc $06				adc ciblen
.9b55	85 00		sta $00				sta cp
.9b57	90 06		bcc $9b5f			bcc +
.9b59	a5 01		lda $01				lda cp+1
.9b5b	65 07		adc $07				adc ciblen+1
.9b5d	85 01		sta $01				sta cp+1
.9b5f					+
.9b5f	20 d9 ce	jsr $ced9			jsr Over		; ( addr-t u-t here here2 here3 here2 )
.9b62	20 4f ce	jsr $ce4f			jsr Store		; ( addr-t u-t here here2 )
.9b65	20 a5 c9	jsr $c9a5			jsr Cell_Plus_NoUf	; ( addr-t u-t here here2+2 )
.9b68	20 02 cf	jsr $cf02			jsr Dup			; ( addr-t u-t here here2+2 here2+2 )
.9b6b	a5 06		lda $06				lda ciblen
.9b6d	95 26		sta $26,x			sta DStack+2,x
.9b6f	a5 07		lda $07				lda ciblen+1
.9b71	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t here ciblen here2+2 )
.9b73	20 4f ce	jsr $ce4f			jsr Store		; ( addr-t u-t here )
.9b76	20 e2 aa	jsr $aae2			jsr CR			; Add a line feed for visuals
.9b79	4c ed 9a	jmp $9aed			jmp _next_string_loop
.9b7c					ed_cmd_d:
.9b7c	20 a5 9d	jsr $9da5			jsr ed_have_text
.9b7f	20 e8 9d	jsr $9de8			jsr ed_no_line_zero
.9b82	b5 24		lda $24,x			lda DStack+0,x
.9b84	15 25		ora $25,x			ora DStack+1,x
.9b86	d0 09		bne $9b91			bne +
.9b88	20 d9 ce	jsr $ced9			jsr Over		; ( addr-t u-t para1 0 para1 )
.9b8b	20 c6 9b	jsr $9bc6			jsr _cmd_d_common	; ( addr-t u-t para1 0 )
.9b8e	4c ba 9b	jmp $9bba			jmp _cmd_d_done
.9b91					+
.9b91	20 b1 9d	jsr $9db1			jsr ed_is_valid_line	  ; result is in C flag
.9b94	b0 03		bcs $9b99			bcs _cmd_d_loop
.9b96	4c 84 9d	jmp $9d84			jmp ed_error_2drop
.9b99					_cmd_d_loop:
.9b99	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9b9b	d5 26		cmp $26,x			cmp DStack+2,x
.9b9d	b5 25		lda $25,x			lda DStack+1,x
.9b9f	f5 27		sbc $27,x			sbc DStack+3,x
.9ba1	90 0c		bcc $9baf			bcc _cmd_d_done_with_flag
.9ba3	20 02 cf	jsr $cf02			jsr Dup		; DUP ( addr-t u-t para1 para2 para2 )
.9ba6	20 c6 9b	jsr $9bc6			jsr _cmd_d_common	; ( addr-t u-t para1 para2 )
.9ba9	20 d2 c9	jsr $c9d2			jsr One_minus	; 1- ( addr-t u-t para1 para2-1 )
.9bac	4c 99 9b	jmp $9b99			jmp _cmd_d_loop
.9baf					_cmd_d_done_with_flag:
.9baf	20 de c9	jsr $c9de			jsr NOS_One_Minus
.9bb2	b5 26		lda $26,x			lda DStack+2,x
.9bb4	85 20		sta $20				sta ed_cur
.9bb6	b5 27		lda $27,x			lda DStack+3,x
.9bb8	85 21		sta $21				sta ed_cur+1		; drop through to _cmd_d_done
.9bba					_cmd_d_done:
.9bba	a9 40		lda #$40			lda #%01000000
.9bbc	05 22		ora $22				ora ed_flags
.9bbe	85 22		sta $22				sta ed_flags
.9bc0	20 e2 aa	jsr $aae2			jsr CR
.9bc3	4c d0 9a	jmp $9ad0			jmp ed_next_command
.9bc6					_cmd_d_common:
.9bc6	20 02 cf	jsr $cf02			jsr Dup			; ( addr-t u-t u u )
.9bc9	20 f6 9d	jsr $9df6			jsr ed_num_to_addr	; ( addr-t u-t u addr )
.9bcc	20 6c ce	jsr $ce6c			jsr Fetch		; ( addr-t u-t u addr1 )
.9bcf	20 20 cf	jsr $cf20			jsr Swap		; ( addr-t u-t addr1 u )
.9bd2	20 d2 c9	jsr $c9d2			jsr One_minus		; ( addr-t u-t addr1 u-1 )
.9bd5	20 f6 9d	jsr $9df6			jsr ed_num_to_addr	; ( addr-t u-t addr1 addr-1 )
.9bd8	4c 4f ce	jmp $ce4f			jmp Store		; ( addr-t u-t )
.9bdb					ed_cmd_equ:
.9bdb	a5 1e		lda $1e				lda ed_head
.9bdd	05 1f		ora $1f				ora ed_head+1
.9bdf	d0 06		bne $9be7			bne _cmd_equ_have_text
.9be1	20 b0 b7	jsr $b7b0			jsr Zero		; ( addr-t u-t para1 para2 0 )
.9be4	4c 07 9c	jmp $9c07			jmp _cmd_equ_done
.9be7					_cmd_equ_have_text:
.9be7	20 e8 9d	jsr $9de8			jsr ed_no_line_zero
.9bea	24 22		bit $22				bit ed_flags
.9bec	30 0a		bmi $9bf8			bmi _cmd_equ_have_para
.9bee	a5 20		lda $20				lda ed_cur+0		; ( addr-t u-t para1 para2 ? )
.9bf0	a4 21		ldy $21				ldy ed_cur+1
.9bf2	20 5f b7	jsr $b75f			jsr PushYA
.9bf5	4c 07 9c	jmp $9c07			jmp _cmd_equ_done	; ( addr-t u-t para1 para2 cur )
.9bf8					_cmd_equ_have_para:
.9bf8	b5 24		lda $24,x			lda DStack+0,x
.9bfa	15 25		ora $25,x			ora DStack+1,x
.9bfc	d0 06		bne $9c04			bne _cmd_equ_two_paras
.9bfe	20 d9 ce	jsr $ced9			jsr Over		; ( addr-t u-t para1 para2 para1)
.9c01	4c 07 9c	jmp $9c07			jmp _cmd_equ_done
.9c04					_cmd_equ_two_paras:
.9c04	20 02 cf	jsr $cf02			jsr Dup			; ( addr-t u-t para1 para2 para2) drop through
.9c07					_cmd_equ_done:
.9c07	20 e2 aa	jsr $aae2			jsr CR			; number goes on new line
.9c0a	20 b1 cb	jsr $cbb1			jsr U_Dot		; ( addr-t u-t para1 para2 )
.9c0d	20 e2 aa	jsr $aae2			jsr CR
.9c10	4c d0 9a	jmp $9ad0			jmp ed_next_command
.9c13					ed_cmd_f:
.9c13	24 22		bit $22				bit ed_flags
.9c15	30 18		bmi $9c2f			bmi _cmd_f_have_para
.9c17	20 e2 aa	jsr $aae2			jsr CR
.9c1a	20 87 ce	jsr $ce87			jsr To_R		; ( addr-t u-t 0 ) ( R: 0 )
.9c1d	20 06 ce	jsr $ce06			jsr Rot			; ( u-t 0 addr-t ) ( R: 0 )
.9c20	20 02 cf	jsr $cf02			jsr Dup			; ( u-t 0 addr-t addr-t ) ( R: 0 )
.9c23	20 b1 cb	jsr $cbb1			jsr U_Dot		; ( u-t 0 addr-t ) ( R: 0 )
.9c26	20 2c ce	jsr $ce2c			jsr Not_Rot		; ( addr-t u-t 0 ) ( R: 0 )
.9c29	20 a6 ce	jsr $cea6			jsr R_From		; ( addr-t u-t 0 0 )
.9c2c	4c 40 9c	jmp $9c40			jmp _cmd_f_done
.9c2f					_cmd_f_have_para:
.9c2f	20 d9 ce	jsr $ced9			jsr Over
.9c32	20 e2 aa	jsr $aae2			jsr CR
.9c35	20 b1 cb	jsr $cbb1			jsr U_Dot
.9c38	b5 26		lda $26,x			lda DStack+2,x
.9c3a	95 2a		sta $2a,x			sta DStack+6,x
.9c3c	b5 27		lda $27,x			lda DStack+3,x
.9c3e	95 2b		sta $2b,x			sta DStack+7,x		; fall through to _cmd_f_done
.9c40					_cmd_f_done:
.9c40	20 e2 aa	jsr $aae2			jsr CR
.9c43	4c d0 9a	jmp $9ad0			jmp ed_next_command
.9c46					ed_cmd_i:
.9c46	e8		inx				inx
.9c47	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9c48	24 22		bit $22				bit ed_flags
.9c4a	30 08		bmi $9c54			bmi _cmd_i_have_para
.9c4c	a5 20		lda $20				lda ed_cur
.9c4e	95 24		sta $24,x			sta DStack+0,x
.9c50	a5 21		lda $21				lda ed_cur+1
.9c52	95 25		sta $25,x			sta DStack+1,x		;  ( addr-t u-t cur ) drop through
.9c54					_cmd_i_have_para:
.9c54	b5 24		lda $24,x			lda DStack+0,x
.9c56	15 25		ora $25,x			ora DStack+1,x
.9c58	f0 09		beq $9c63			beq _cmd_i_done
.9c5a	20 d2 c9	jsr $c9d2			jsr One_minus		; ( addr-t u-t para1-1 )
.9c5d	20 b0 b7	jsr $b7b0			jsr Zero		; ( addr-t u-t para1-1 0 )
.9c60	20 02 c9	jsr $c902			jsr Max			; ( addr-t u-t para1-1 | 0 )
.9c63					_cmd_i_done:
.9c63	4c e7 9a	jmp $9ae7			jmp ed_entry_cmd_i
.9c66					ed_cmd_n:
.9c66	a9 01		lda #$01			lda #%00000001
.9c68	05 22		ora $22				ora ed_flags
.9c6a	85 22		sta $22				sta ed_flags
.9c6c	4c 75 9c	jmp $9c75			jmp ed_cmd_p_entry_for_cmd_n
.9c6f					ed_cmd_p:
.9c6f					ed_cmd_p_from_external:
.9c6f	a9 fe		lda #$fe			lda #$ff-%00000001
.9c71	25 22		and $22				and ed_flags
.9c73	85 22		sta $22				sta ed_flags
.9c75					ed_cmd_p_entry_for_cmd_n:
.9c75	20 a5 9d	jsr $9da5			jsr ed_have_text
.9c78	20 e8 9d	jsr $9de8			jsr ed_no_line_zero
.9c7b	20 e2 aa	jsr $aae2			jsr CR
.9c7e	b5 24		lda $24,x			lda DStack+0,x
.9c80	15 25		ora $25,x			ora DStack+1,x
.9c82	d0 11		bne $9c95			bne _cmd_p_loop
.9c84	b5 26		lda $26,x			lda DStack+2,x
.9c86	85 20		sta $20				sta ed_cur
.9c88	b5 27		lda $27,x			lda DStack+3,x
.9c8a	85 21		sta $21				sta ed_cur+1
.9c8c	20 d9 ce	jsr $ced9			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9c8f	20 b6 9c	jsr $9cb6			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9c92	4c b3 9c	jmp $9cb3			jmp _cmd_p_all_done
.9c95					_cmd_p_loop:
.9c95	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9c97	d5 26		cmp $26,x			cmp DStack+2,x
.9c99	b5 25		lda $25,x			lda DStack+1,x
.9c9b	f5 27		sbc $27,x			sbc DStack+3,x
.9c9d	90 0c		bcc $9cab			bcc _cmd_p_done
.9c9f	20 d9 ce	jsr $ced9			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9ca2	20 b6 9c	jsr $9cb6			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9ca5	20 02 ca	jsr $ca02			jsr NOS_One_Plus
.9ca8	4c 95 9c	jmp $9c95			jmp _cmd_p_loop
.9cab					_cmd_p_done:
.9cab	b5 24		lda $24,x			lda DStack+0,x
.9cad	85 20		sta $20				sta ed_cur
.9caf	b5 25		lda $25,x			lda DStack+1,x
.9cb1	85 21		sta $21				sta ed_cur+1
.9cb3					_cmd_p_all_done:
.9cb3	4c d0 9a	jmp $9ad0			jmp ed_next_command
.9cb6					_cmd_p_common:
.9cb6	a5 22		lda $22				lda ed_flags
.9cb8	4a		lsr a				lsr			; bit 0 now in carry
.9cb9	90 0b		bcc $9cc6			bcc _cmd_p_common_no_num
.9cbb	20 02 cf	jsr $cf02			jsr Dup			; ( addr-t u-t para1 para1 )
.9cbe	20 b1 cb	jsr $cbb1			jsr U_Dot		; ( addr-t u-t para1 )
.9cc1	a9 09		lda #$09			lda #AscHT
.9cc3	20 70 cd	jsr $cd70			jsr Emit_A
.9cc6					_cmd_p_common_no_num:
.9cc6	20 f6 9d	jsr $9df6			jsr ed_num_to_addr	  ; ( addr-t u-t addr )
.9cc9	4c 1a 9e	jmp $9e1a			jmp ed_print_addr
.9ccc					ed_cmd_q:
.9ccc	24 22		bit $22				bit ed_flags		; bit 6 is change flag
.9cce	50 03		bvc $9cd3			bvc +
.9cd0	4c 84 9d	jmp $9d84			jmp ed_error_2drop
.9cd3					+
.9cd3	4c d6 9a	jmp $9ad6			jmp ed_all_done		   ; can't fall thru because of PLX
.9cd6					ed_cmd_qq:
.9cd6	4c d6 9a	jmp $9ad6			jmp ed_all_done
.9cd9					ed_cmd_w:
.9cd9	20 a5 9d	jsr $9da5			jsr ed_have_text
.9cdc	24 22		bit $22				bit ed_flags		; parameter given?
.9cde	30 12		bmi $9cf2			bmi _cmd_w_have_para
.9ce0	b5 2b		lda $2b,x			lda DStack+7,x		; $0000 thru $00ff ?
.9ce2	d0 03		bne $9ce7			bne +
.9ce4	4c 84 9d	jmp $9d84			jmp ed_error_2drop
.9ce7					+
.9ce7	b5 2a		lda $2a,x			lda DStack+6,x
.9ce9	95 26		sta $26,x			sta DStack+2,x
.9ceb	b5 2b		lda $2b,x			lda DStack+7,x
.9ced	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t addr-t ? )
.9cef	4c fa 9c	jmp $9cfa			jmp _cmd_w_para_ready
.9cf2					_cmd_w_have_para:
.9cf2	b5 26		lda $26,x			lda DStack+2,x
.9cf4	95 2a		sta $2a,x			sta DStack+6,x
.9cf6	b5 27		lda $27,x			lda DStack+3,x
.9cf8	95 2b		sta $2b,x			sta DStack+7,x		; drop through to _cmd_w_para_ready
.9cfa					_cmd_w_para_ready:
.9cfa	a9 1e		lda #$1e			lda #<ed_head
.9cfc	95 24		sta $24,x			sta DStack+0,x
.9cfe	a9 00		lda #$00			lda #>ed_head
.9d00	95 25		sta $25,x			sta DStack+1,x		; ( addr-t u-t addr-t addr-h )
.9d02	20 d9 ce	jsr $ced9			jsr Over		; ( addr-t u-t addr-t addr-h addr-t )
.9d05	20 87 ce	jsr $ce87			jsr To_R		; ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.9d08					_cmd_w_loop:
.9d08	20 6c ce	jsr $ce6c			jsr Fetch		; ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.9d0b	b5 24		lda $24,x			lda DStack+0,x
.9d0d	15 25		ora $25,x			ora DStack+1,x
.9d0f	f0 4d		beq $9d5e			beq _cmd_w_eol
.9d11	20 5c cc	jsr $cc5c			jsr Two_dup		; ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.9d14	20 cf c5	jsr $c5cf			jsr Two_to_r		; ( addr-t addr-1 ) (R: ... )
.9d17	20 a5 c9	jsr $c9a5			jsr Cell_Plus_NoUf	; ( addr-t addr1+2 ) (R: ... )
.9d1a	20 02 cf	jsr $cf02			jsr Dup			; ( addr-t addr1+2 addr1+2 ) ( R: ... )
.9d1d	20 6c ce	jsr $ce6c			jsr Fetch		; ( addr-t addr1+2 addr-s ) ( R: ... )
.9d20	20 20 cf	jsr $cf20			jsr Swap		; ( addr-t addr-s addr1+2 ) ( R: ... )
.9d23	20 a5 c9	jsr $c9a5			jsr Cell_Plus_NoUf	; ( addr-t addr-s addr1+2 ) (R: ... )
.9d26	20 6c ce	jsr $ce6c			jsr Fetch		; ( addr-t addr-s u-s ) ( R: ... )
.9d29	20 2c ce	jsr $ce2c			jsr Not_Rot		; ( u-s addr-t addr-s ) ( R: ... )
.9d2c	20 20 cf	jsr $cf20			jsr Swap		; ( u-s addr-s addr-t ) ( R: ... )
.9d2f	20 06 ce	jsr $ce06			jsr Rot			; (addr-s addr-t u-s ) ( R: ... )
.9d32	20 02 cf	jsr $cf02			jsr Dup			; (addr-s addr-t u-s u-s ) ( R: ... )
.9d35	20 87 ce	jsr $ce87			jsr To_R		; (addr-s addr-t u-s ) ( R: ... u-s )
.9d38	20 ff ac	jsr $acff			jsr Move		; ( )( R: addr-t addr-1 addr-t )
.9d3b	20 a6 ce	jsr $cea6			jsr R_From		; ( u-s )  ( R: addr-t addr-h addr-t )
.9d3e	20 aa c5	jsr $c5aa			jsr Two_r_from		; ( u-s addr-t addr-h ) ( R: addr-t )
.9d41	20 2c ce	jsr $ce2c			jsr Not_Rot		; ( addr-h u-s addr-t ) ( R: addr-t )
.9d44	20 4c cb	jsr $cb4c			jsr Plus		; ( addr-h addr-t1 ) ( R: addr-t )
.9d47	20 02 cf	jsr $cf02			jsr Dup			; ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.9d4a	a9 0a		lda #$0a			lda #AscLF
.9d4c	20 a1 b7	jsr $b7a1			jsr PushZA		; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.9d4f	20 20 cf	jsr $cf20			jsr Swap		; ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.9d52	20 4f ce	jsr $ce4f			jsr Store		; ( addr-h addr-t1 ) ( R: addr-t )
.9d55	20 f8 c9	jsr $c9f8			jsr One_plus		; ( addr-h addr-t1+1 ) ( R: addr-t )
.9d58	20 20 cf	jsr $cf20			jsr Swap		; ( addr-t1+1 addr-h ) ( R: addr-t )
.9d5b	4c 08 9d	jmp $9d08			jmp _cmd_w_loop
.9d5e					_cmd_w_eol:
.9d5e	20 20 cf	jsr $cf20			jsr Swap		; ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.9d61	20 a6 ce	jsr $cea6			jsr R_From		; ( addr-t u-t addr-n addr-tn addr-t )
.9d64	20 65 cb	jsr $cb65			jsr Minus		; ( addr-t u-t addr-n u )
.9d67	b5 24		lda $24,x			lda DStack+0,x
.9d69	95 28		sta $28,x			sta DStack+4,x
.9d6b	b5 25		lda $25,x			lda DStack+1,x
.9d6d	95 29		sta $29,x			sta DStack+5,x		; ( addr-t u addr-n u )
.9d6f	20 e2 aa	jsr $aae2			jsr CR
.9d72	20 02 cf	jsr $cf02			jsr Dup			; ( addr-t u addr-n u u )
.9d75	20 b1 cb	jsr $cbb1			jsr U_Dot		; ( addr-t u addr-n u )
.9d78	20 e2 aa	jsr $aae2			jsr CR
.9d7b	a9 bf		lda #$bf			lda #$ff-%01000000
.9d7d	25 22		and $22				and ed_flags
.9d7f	85 22		sta $22				sta ed_flags
.9d81	4c d0 9a	jmp $9ad0			jmp ed_next_command
.9d84					ed_error_2drop:
.9d84	e8		inx				inx			; Drop para2
.9d85	e8		inx				inx
.9d86					ed_error_1drop:
.9d86	e8		inx				inx			; Drop para1
.9d87	e8		inx				inx
.9d88					ed_error:
.9d88	20 e2 aa	jsr $aae2			jsr CR
.9d8b	a9 3f		lda #$3f			lda #'?'
.9d8d	20 70 cd	jsr $cd70			jsr Emit_A
.9d90	20 e2 aa	jsr $aae2			jsr CR
.9d93	4c ee 98	jmp $98ee			jmp ed_input_loop
.9d96					ed_get_input:
.9d96	20 32 c2	jsr $c232			jsr Refill		;  ( addr-t u-t f )
.9d99	b5 24		lda $24,x			lda DStack+0,x
.9d9b	d0 05		bne $9da2			bne +
.9d9d	68		pla				pla
.9d9e	68		pla				pla
.9d9f	4c 86 9d	jmp $9d86			jmp ed_error_1drop
.9da2					+
.9da2	e8		inx				inx
.9da3	e8		inx				inx
.9da4	60		rts				rts
.9da5					ed_have_text:
.9da5	a5 1e		lda $1e				lda ed_head
.9da7	05 1f		ora $1f				ora ed_head+1
.9da9	d0 05		bne $9db0			bne +
.9dab	68		pla				pla
.9dac	68		pla				pla
.9dad	4c 88 9d	jmp $9d88			jmp ed_error
.9db0					+
.9db0	60		rts				rts
.9db1					ed_is_valid_line:
.9db1	38		sec				sec				; default is legal line number
.9db2	b5 24		lda $24,x			lda DStack+0,x
.9db4	15 25		ora $25,x			ora DStack+1,x
.9db6	f0 18		beq $9dd0			beq _nope_zero	; ( n )
.9db8	20 02 cf	jsr $cf02			jsr Dup				; ( n n )
.9dbb	20 d2 9d	jsr $9dd2			jsr ed_last_line		; ( n n last )
.9dbe	20 20 cf	jsr $cf20			jsr Swap			; ( n last n )
.9dc1	20 ef c7	jsr $c7ef			jsr Less_Than			; ( n f )
.9dc4	b5 24		lda $24,x			lda DStack+0,x			; 0 flag is good
.9dc6	15 25		ora $25,x			ora DStack+1,x
.9dc8	d0 04		bne $9dce			bne _too_small
.9dca	e8		inx				inx
.9dcb	e8		inx				inx			; DROP flag ( n )
.9dcc	38		sec				sec			; signal valid
.9dcd	60		rts				rts
.9dce					_too_small:
.9dce	e8		inx				inx
.9dcf	e8		inx				inx
.9dd0					_nope_zero:
.9dd0	18		clc				clc			; signal not valid
.9dd1	60		rts				rts
.9dd2					ed_last_line:
.9dd2	20 b0 b7	jsr $b7b0			jsr Zero		; Set counter to zero
.9dd5	a9 1e		lda #$1e			lda #ed_head
.9dd7	20 a1 b7	jsr $b7a1			jsr PushZA		; ( count addr )
.9dda					_loop:
.9dda	20 6c ce	jsr $ce6c			jsr Fetch		; ( count addr|0 )
.9ddd	b5 25		lda $25,x			lda DStack+1,x		; at end-of-list?
.9ddf	f0 06		beq $9de7			beq _done
.9de1	20 02 ca	jsr $ca02			jsr NOS_One_Plus	; Increase counter
.9de4	4c da 9d	jmp $9dda			jmp _loop		; continue
.9de7					_done:
.9de7	60		rts				rts
.9de8					ed_no_line_zero:
.9de8	b5 26		lda $26,x			lda DStack+2,x
.9dea	15 27		ora $27,x			ora DStack+3,x
.9dec	d0 07		bne $9df5			bne _done
.9dee	24 22		bit $22				bit ed_flags
.9df0	10 03		bpl $9df5			bpl _done
.9df2	4c 84 9d	jmp $9d84			jmp ed_error_2drop
.9df5					_done:
.9df5	60		rts				rts
.9df6					ed_num_to_addr:
.9df6	a9 1e		lda #$1e			lda #ed_head
.9df8	20 a1 b7	jsr $b7a1			jsr PushZA		; ( u addr-h )
.9dfb	4c 08 9e	jmp $9e08			jmp _test
.9dfe					_loop:
.9dfe	20 6c ce	jsr $ce6c			jsr Fetch		; @ ( u addr1 )
.9e01	b5 25		lda $25,x			lda DStack+1,x		; at end of list?
.9e03	f0 09		beq $9e0e			beq _finished
.9e05	20 de c9	jsr $c9de			jsr NOS_One_Minus	; decrement the line count
.9e08	b5 26		lda $26,x	_test:		lda DStack+2,x		; is the nth element we're looking for?
.9e0a	15 27		ora $27,x			ora DStack+3,x
.9e0c	d0 f0		bne $9dfe			bne _loop
.9e0e					_finished:
.9e0e	4c 1d c9	jmp $c91d			jmp Nip			; ( addr )
.9e11					ed_para1_to_cur:
.9e11	b5 26		lda $26,x			lda DStack+2,x
.9e13	85 20		sta $20				sta ed_cur
.9e15	b5 27		lda $27,x			lda DStack+3,x
.9e17	85 21		sta $21				sta ed_cur+1
.9e19	60		rts				rts
.9e1a					ed_print_addr:
.9e1a	20 a2 c9	jsr $c9a2			jsr Cell_Plus		; ( addr+2 )
.9e1d	20 02 cf	jsr $cf02			jsr Dup			; ( addr+2 addr+2 )
.9e20	20 a2 c9	jsr $c9a2			jsr Cell_Plus		; ( addr+2 addr+4 )
.9e23	20 6c ce	jsr $ce6c			jsr Fetch		; ( addr+2 u-s )
.9e26	20 20 cf	jsr $cf20			jsr Swap		; ( u-s addr+2 )
.9e29	20 6c ce	jsr $ce6c			jsr Fetch		; ( u-s addr-s )
.9e2c	20 20 cf	jsr $cf20			jsr Swap		; ( addr-s u-s )
.9e2f	20 8a cd	jsr $cd8a			jsr Type
.9e32	4c e2 aa	jmp $aae2			jmp CR
>9e35	61 66 69 64 70 6e 3d 77		ed_cmd_list:	.text "afidpn=wqQ", 0
>9e3d	71 51 00
.9e40					ed_cmd_table:
>9e40	e5 9a 13 9c 46 9c 7c 9b				.word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>9e48	6f 9c 66 9c
>9e4c	db 9b d9 9c cc 9c d6 9c				.word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.9e54					ed6502_end:
>9e54	53 65 65			L1:	.text "See"	;  name of word as a string, ending at wh_NameLastChar
>9e57	a3					.byte (("See"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9e58	49 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9e5a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9e5b	08					.byte NN	;wh_Flags	dictionary flags
=40407					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9e5c					See:
.9e5c	20 1d bc	jsr $bc1d			jsr Tick_Nt		; ( nt )
.9e5f	20 e2 aa	jsr $aae2			jsr CR
.9e62	ad 00 03	lda $0300			lda base		; Save the current number base
.9e65	48		pha				pha
.9e66	a9 a5		lda #$a5			lda #<str_see_nt	; print nt
.9e68	a0 da		ldy #$da			ldy #>str_see_nt
.9e6a	20 ab cd	jsr $cdab			jsr Print_ASCIIZ_YA_no_lf
.9e6d	20 02 cf	jsr $cf02			jsr Dup			; ( nt nt )
.9e70	20 77 a8	jsr $a877			jsr Dot_Hex
.9e73	20 7d cd	jsr $cd7d			jsr Space		; ( nt )
.9e76	20 02 cf	jsr $cf02			jsr Dup			; ( nt nt )
.9e79	20 97 bd	jsr $bd97			jsr Name_To_Int		; ( nt xt )
.9e7c	a9 ab		lda #$ab			lda #<str_see_xt	; print xt
.9e7e	a0 da		ldy #$da			ldy #>str_see_xt
.9e80	20 ab cd	jsr $cdab			jsr Print_ASCIIZ_YA_no_lf
.9e83	20 02 cf	jsr $cf02			jsr Dup			; ( nt xt xt )
.9e86	20 77 a8	jsr $a877			jsr Dot_Hex
.9e89	20 e2 aa	jsr $aae2			jsr CR			; ( nt xt )
.9e8c	a9 9e		lda #$9e			lda #<str_see_flags
.9e8e	a0 da		ldy #$da			ldy #>str_see_flags
.9e90	20 ab cd	jsr $cdab			jsr Print_ASCIIZ_YA_no_lf
.9e93	20 d9 ce	jsr $ced9			jsr Over		; ( nt xt nt )
.9e96	a9 84		lda #$84			lda #Wh_Flags
.9e98	20 a7 c9	jsr $c9a7			jsr Plus_A		; ( nt xt ^flags )
.9e9b	a1 24		lda ($24,x)			lda (DStack+0,x)	; ( nt xt ^flags )
.9e9d	95 24		sta $24,x			sta DStack+0,x		; ( nt xt flags )
.9e9f	a0 0e		ldy #$0e			ldy #2*7		; for bit 7..0
.9ea1	20 7d cd	jsr $cd7d	_flag_loop:	jsr Space
.9ea4	b9 08 9f	lda $9f08,y			lda _FlagLabels+0,y	;   print label
.9ea7	20 70 cd	jsr $cd70			jsr Emit_A
.9eaa	b9 09 9f	lda $9f09,y			lda _FlagLabels+1,y
.9ead	20 70 cd	jsr $cd70			jsr Emit_A
.9eb0	a9 3d		lda #$3d			lda #'='
.9eb2	20 70 cd	jsr $cd70			jsr Emit_A
.9eb5	16 24		asl $24,x			asl DStack+0,x		;   c = flag, rotate the rest
.9eb7	a9 00		lda #$00			lda #0
.9eb9	69 30		adc #$30			adc #'0'
.9ebb	20 70 cd	jsr $cd70			jsr Emit_A
.9ebe	88		dey				dey
.9ebf	88		dey				dey
.9ec0	10 df		bpl $9ea1			bpl _flag_loop
.9ec2	e8		inx				inx
.9ec3	e8		inx				inx			; ( nt xt )
.9ec4	20 e2 aa	jsr $aae2			jsr CR
.9ec7	a9 b1		lda #$b1			lda #<str_see_size	; print size
.9ec9	a0 da		ldy #$da			ldy #>str_see_size
.9ecb	20 ab cd	jsr $cdab			jsr Print_ASCIIZ_YA_no_lf
.9ece	20 20 cf	jsr $cf20			jsr Swap		; ( xt nt )
.9ed1	20 96 aa	jsr $aa96			jsr WordSize		; ( xt u )
.9ed4	20 5e b1	jsr $b15e			jsr Decimal
.9ed7	b5 24		lda $24,x			lda DStack+0,x		; if = 255
.9ed9	c9 ff		cmp #$ff			cmp #$ff
.9edb	d0 11		bne $9eee			bne _size5
.9edd	20 80 b8	jsr $b880			jsr sliteral_runtime	;   type "large"
.9ee0	4c e8 9e	jmp $9ee8			  jmp _size2
>9ee3	6c 61 72 67 65					  .text "large"
.9ee8	20 8a cd	jsr $cd8a	_size2:		jsr Type
.9eeb	4c f4 9e	jmp $9ef4			jmp _size9		;  else
.9eee	20 02 cf	jsr $cf02	_size5:		jsr Dup			;    type size
.9ef1	20 b1 cb	jsr $cbb1			jsr U_Dot
.9ef4					_size9:
.9ef4	20 e2 aa	jsr $aae2			jsr CR
.9ef7	68		pla				pla			; restore base
.9ef8	8d 00 03	sta $0300			sta base
.9efb	20 5c cc	jsr $cc5c			jsr Two_dup
.9efe	20 cf a7	jsr $a7cf			jsr Dump		; dump
.9f01	20 e2 aa	jsr $aae2			jsr CR
.9f04	20 28 d8	jsr $d828			jsr DisAsm		; disassemble
=171					CL	.var *-(WordListLink+wh_Xt)
=$9f07					en = *	; remember here
>9e5a	ab					.byte CL	;wh_CodeLength
.9f07	60		rts				rts
>9f08	43 4f 41 4e 49 4d 4e 4e		_FlagLabels:	.text "COANIMNNUF__R6__"
>9f10	55 46 5f 5f 52 36 5f 5f
>9f18	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9f20	72 64 4c 69 73 74
>9f26	8e					.byte (("Forth-WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f27	d7 9d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f29	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f2a	08					.byte NN	;wh_Flags	dictionary flags
=40614					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f2b	4c b0 b7	jmp $b7b0	Forth_WordList:	jmp Zero
=3					CL	.var *-(WordListLink+wh_Xt)
=$9f2e					en = *	; remember here
>9f29	03					.byte CL	;wh_CodeLength
>9f2e	45 64 69 74 6f 72 2d 57		L1:	.text "Editor-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9f36	6f 72 64 4c 69 73 74
>9f3d	8f					.byte (("Editor-WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f3e	a6 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f40	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f41	08					.byte NN	;wh_Flags	dictionary flags
=40637					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f42					Editor_WordList:
.9f42	4c ba b7	jmp $b7ba			jmp One
=3					CL	.var *-(WordListLink+wh_Xt)
=$9f45					en = *	; remember here
>9f40	03					.byte CL	;wh_CodeLength
>9f45	41 73 73 65 6d 62 6c 65		L1:	.text "Assembler-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9f4d	72 2d 57 6f 72 64 4c 69 73 74
>9f57	92					.byte (("Assembler-WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f58	bd 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f5a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f5b	08					.byte NN	;wh_Flags	dictionary flags
=40663					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f5c					Assembler_WordList:
.9f5c	4c c4 b7	jmp $b7c4			jmp Two
=3					CL	.var *-(WordListLink+wh_Xt)
=$9f5f					en = *	; remember here
>9f5a	03					.byte CL	;wh_CodeLength
>9f5f	52 6f 6f 74 2d 57 6f 72		L1:	.text "Root-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>9f67	64 6c 69 73 74
>9f6c	8d					.byte (("Root-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f6d	d7 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f6f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f70	08					.byte NN	;wh_Flags	dictionary flags
=40684					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f71	a9 03		lda #$03	Root_WordList:	lda #wid_Root
.9f73	4c a1 b7	jmp $b7a1			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$9f76					en = *	; remember here
>9f6f	05					.byte CL	;wh_CodeLength
>9f76	4f 6e 6c 79			L1:	.text "Only"	;  name of word as a string, ending at wh_NameLastChar
>9f7a	24					.byte (("Only"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f7b	ec 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f7d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f7e	08					.byte NN	;wh_Flags	dictionary flags
=40698					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f7f	20 7f b7	jsr $b77f	Only:		jsr True	; Push -1
.9f82	4c e8 a0	jmp $a0e8			jmp Set_Order	; set the minimum search order.
=6					CL	.var *-(WordListLink+wh_Xt)
=$9f85					en = *	; remember here
>9f7d	06					.byte CL	;wh_CodeLength
>9f85	41 6c 73 6f			L1:	.text "Also"	;  name of word as a string, ending at wh_NameLastChar
>9f89	e4					.byte (("Also"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f8a	fa 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f8c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f8d	08					.byte NN	;wh_Flags	dictionary flags
=40713					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f8e	20 20 a1	jsr $a120	Also:		jsr Get_Order
.9f91	20 d9 ce	jsr $ced9			jsr Over
.9f94	20 20 cf	jsr $cf20			jsr Swap
.9f97	20 f8 c9	jsr $c9f8			jsr One_plus
.9f9a	4c e8 a0	jmp $a0e8			jmp Set_Order
=15					CL	.var *-(WordListLink+wh_Xt)
=$9f9d					en = *	; remember here
>9f8c	0f					.byte CL	;wh_CodeLength
>9f9d	50 72 65 76 69 6f 75 73		L1:	.text "Previous"	;  name of word as a string, ending at wh_NameLastChar
>9fa5	68					.byte (("Previous"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9fa6	09 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fa8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fa9	08					.byte NN	;wh_Flags	dictionary flags
=40741					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9faa	20 20 a1	jsr $a120	Previous:	jsr Get_Order
.9fad	20 1d c9	jsr $c91d			jsr Nip
.9fb0	20 d2 c9	jsr $c9d2			jsr One_minus
.9fb3	4c e8 a0	jmp $a0e8			jmp Set_Order
=12					CL	.var *-(WordListLink+wh_Xt)
=$9fb6					en = *	; remember here
>9fa8	0c					.byte CL	;wh_CodeLength
>9fb6	3e 4f 72 64 65 72		L1:	.text ">Order"	;  name of word as a string, ending at wh_NameLastChar
>9fbc	46					.byte ((">Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9fbd	25 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fbf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fc0	08					.byte NN	;wh_Flags	dictionary flags
=40764					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9fc1					To_Order:
.9fc1	20 87 ce	jsr $ce87			jsr To_R		; Put the wid on the return stack for now.
.9fc4	20 20 a1	jsr $a120			jsr Get_Order		; Get the current search order.
.9fc7	20 a6 ce	jsr $cea6			jsr R_From		; Get back the wid and add it to the list.
.9fca	20 20 cf	jsr $cf20			jsr Swap
.9fcd	20 f8 c9	jsr $c9f8			jsr One_plus
.9fd0	4c e8 a0	jmp $a0e8			jmp Set_Order		; Set the search order with the new list.
=18					CL	.var *-(WordListLink+wh_Xt)
=$9fd3					en = *	; remember here
>9fbf	12					.byte CL	;wh_CodeLength
>9fd3	4f 72 64 65 72			L1:	.text "Order"	;  name of word as a string, ending at wh_NameLastChar
>9fd8	45					.byte (("Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9fd9	3c 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fdb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fdc	08					.byte NN	;wh_Flags	dictionary flags
=40792					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9fdd					Order:
.9fdd	20 e2 aa	jsr $aae2			jsr CR
.9fe0	a0 00		ldy #$00			ldy #0			; for each search_orderV[]
.9fe2	f0 0b		beq $9fef			beq _test
.9fe4	98		tya		_loop:		tya
.9fe5	48		pha				pha
.9fe6	b9 2b 03	lda $032b,y			lda Search_orderV,y
.9fe9	20 fa 9f	jsr $9ffa			jsr order_print_wid_string   ; internal helper function
.9fec	68		pla				pla
.9fed	a8		tay				tay
.9fee	c8		iny				iny			;  next
.9fef	cc 2a 03	cpy $032a	_test:		cpy Num_orderV
.9ff2	90 f0		bcc $9fe4			bcc _loop
.9ff4	20 e2 aa	jsr $aae2			jsr CR
.9ff7	ad 10 03	lda $0310			lda CurrentV		; print the current wordlist.
.9ffa					order_print_wid_string:
.9ffa	c9 04		cmp #$04			cmp #wid_Root+1		; do we have a string?
.9ffc	90 06		bcc $a004			bcc _string
.9ffe	20 a1 b7	jsr $b7a1			jsr PushZA		; print the WID number
.a001	4c b1 cb	jmp $cbb1			jmp U_Dot		; JSR/RTS
.a004	0a		asl a		_string:	asl		; Get the string based on WID 0 to 3
.a005	a8		tay				tay
.a006	b9 12 a0	lda $a012,y			lda _wid_Table+0,y
.a009	48		pha				pha
.a00a	b9 13 a0	lda $a013,y			lda _wid_Table+1,y
.a00d	a8		tay				tay
.a00e	68		pla				pla
.a00f	4c ab cd	jmp $cdab			jmp Print_ASCIIZ_YA_no_lf ; Print without a line feed
=53					CL	.var *-(WordListLink+wh_Xt)
=$a012					en = *	; remember here
>9fdb	35					.byte CL	;wh_CodeLength
.a012					_wid_Table:
>a012	91 da					.word str_wid_forth	       ; WID 0: "Forth"
>a014	89 da					.word str_wid_editor	       ; WID 1: "Editor"
>a016	7e da					.word str_wid_asm	       ; WID 2: "Assembler"
>a018	98 da					.word str_wid_root	       ; WID 3: "Root"
>a01a	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
>a01f	05					.byte (("Forth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a020	58 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a022	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a023	08					.byte NN	;wh_Flags	dictionary flags
=40863					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a024	a9 00		lda #$00	Forth:		lda #wid_Forth
.a026	8d 2b 03	sta $032b			sta Search_OrderV+0
=5					CL	.var *-(WordListLink+wh_Xt)
=$a029					en = *	; remember here
>a022	05					.byte CL	;wh_CodeLength
.a029	60		rts				rts
>a02a	44 65 66 69 6e 69 74 69		L1:	.text "Definitions"	;  name of word as a string, ending at wh_NameLastChar
>a032	6f 6e 73
>a035	6b					.byte (("Definitions"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a036	9f 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a038	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a039	08					.byte NN	;wh_Flags	dictionary flags
=40885					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a03a	ad 2b 03	lda $032b	Definitions:	lda Search_OrderV	; Transfer SEARCH_ORDER[0] to
.a03d	8d 10 03	sta $0310			sta CurrentV		;   byte variable CURRENT.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a040					en = *	; remember here
>a038	06					.byte CL	;wh_CodeLength
.a040	60		rts				rts
>a041	57 6f 72 64 4c 69 73 74		L1:	.text "WordList"	;  name of word as a string, ending at wh_NameLastChar
>a049	88					.byte (("WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a04a	b5 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a04c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a04d	08					.byte NN	;wh_Flags	dictionary flags
=40905					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a04e					WordList:
.a04e	ad 11 03	lda $0311			lda Num_wordlistsV	; Get the current number of wordlists
.a051	c9 0c		cmp #$0c			cmp #max_wordlists	; already at the max?
.a053	90 05		bcc $a05a			bcc +
.a055	a9 66		lda #$66			lda #$100+err_TooManyWordlists	;   Print an error message
.a057	4c 2e b4	jmp $b42e			jmp ThrowA
.a05a					+
.a05a	ee 11 03	inc $0311			inc Num_WordlistsV	; increment wordlist count
.a05d	4c a1 b7	jmp $b7a1			jmp PushZA		; and put it on the stack.
=18					CL	.var *-(WordListLink+wh_Xt)
=$a060					en = *	; remember here
>a04c	12					.byte CL	;wh_CodeLength
>a060	53 65 61 72 63 68 2d 57		L1:	.text "Search-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a068	6f 72 64 6c 69 73 74
>a06f	8f					.byte (("Search-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a070	c9 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a072	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a073	18					.byte UF+NN	;wh_Flags	dictionary flags
=40943					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a074					Search_WordList:
.a074	20 e9 b3	jsr $b3e9			jsr underflow_3
.a077	b5 24		lda $24,x			lda DStack+0,x		; Pop wid
.a079	e8		inx				inx
.a07a	e8		inx				inx
.a07b	48		pha				pha
.a07c	20 c6 bc	jsr $bcc6			jsr fina_pattern_prepare ; tmp2 = pseudo-header for pattern name, zeros NOS
.a07f	68		pla				pla			; pop wid
.a080	20 f0 bc	jsr $bcf0			jsr fina_search_wordlist ; tmp1 = nt of matching word
.a083	f0 25		beq $a0aa			beq _fail
.a085	18		clc				clc
.a086	a5 14		lda $14				lda tmp1+0		; NOS = xt
.a088	69 85		adc #$85			adc #Wh_xt
.a08a	95 26		sta $26,x			sta DStack+2,x
.a08c	a5 15		lda $15				lda tmp1+1
.a08e	69 00		adc #$00			adc #0
.a090	95 27		sta $27,x			sta DStack+3,x
.a092	a0 84		ldy #$84			ldy #Wh_Flags		; get flags
.a094	b1 14		lda ($14),y			lda (tmp1),y
.a096	29 04		and #$04			and #IM
.a098	d0 07		bne $a0a1			bne _immediate		; bit set, we're immediate
.a09a	a9 ff		lda #$ff			lda #$FF		; We're not immediate, return -1
.a09c	95 24		sta $24,x			sta DStack+0,x
.a09e	95 25		sta $25,x			sta DStack+1,x
.a0a0	60		rts				rts
.a0a1					_immediate:
.a0a1	a9 01		lda #$01			lda #1			; We're immediate, return 1
.a0a3	95 24		sta $24,x			sta DStack+0,x
.a0a5	a9 00		lda #$00			lda #0
.a0a7	95 25		sta $25,x			sta DStack+1,x
.a0a9	60		rts				rts
.a0aa					_fail:
.a0aa	e8		inx				inx			; Drop u
.a0ab	e8		inx				inx
.a0ac	60		rts				rts
=57					CL	.var *-(WordListLink+wh_Xt)
=$a0ad					en = *	; remember here
>a072	39					.byte CL	;wh_CodeLength
>a0ad	53 65 74 2d 43 75 72 72		L1:	.text "Set-Current"	;  name of word as a string, ending at wh_NameLastChar
>a0b5	65 6e 74
>a0b8	8b					.byte (("Set-Current"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0b9	ef 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0bc	00					.byte 0	;wh_Flags	dictionary flags
=41016					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0bd	20 89 b3	jsr $b389	Set_Current:	jsr PopA	; pop wid
.a0c0	8d 10 03	sta $0310			sta CurrentV	; only the LSB is used.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a0c3					en = *	; remember here
>a0bb	06					.byte CL	;wh_CodeLength
.a0c3	60		rts				rts
>a0c4	47 65 74 2d 43 75 72 72		L1:	.text "Get-Current"	;  name of word as a string, ending at wh_NameLastChar
>a0cc	65 6e 74
>a0cf	8b					.byte (("Get-Current"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0d0	38 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0d3	08					.byte NN	;wh_Flags	dictionary flags
=41039					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0d4					Get_Current:
.a0d4	ad 10 03	lda $0310			lda CurrentV
.a0d7	4c a1 b7	jmp $b7a1			jmp PushZA	; CURRENT is a byte variable
=6					CL	.var *-(WordListLink+wh_Xt)
=$a0da					en = *	; remember here
>a0d2	06					.byte CL	;wh_CodeLength
>a0da	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>a0e2	72
>a0e3	49					.byte (("Set-Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0e4	4f a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0e6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0e7	00					.byte 0	;wh_Flags	dictionary flags
=41059					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0e8					Set_Order:
.a0e8	b5 25		lda $25,x			lda DStack+1,x		; Test for -1 TOS
.a0ea	10 0b		bpl $a0f7			bpl _start
.a0ec	a9 00		lda #$00			lda #0
.a0ee	95 25		sta $25,x			sta DStack+1,x
.a0f0	a9 03		lda #$03			lda #wid_Root
.a0f2	95 24		sta $24,x			sta DStack+0,x
.a0f4	20 ba b7	jsr $b7ba			jsr One			; Count is 1.
.a0f7					_start:
.a0f7	b5 24		lda $24,x			lda DStack+0,x
.a0f9	99 2a 03	sta $032a,y			sta Num_orderV,y	; #ORDER is a byte variable.
.a0fc	85 14		sta $14				sta tmp1	; Save a copy for zero check and looping.
.a0fe	e8		inx				inx		; Drop the count off the data stack.
.a0ff	e8		inx				inx
.a100	a5 14		lda $14				lda tmp1
.a102	f0 0d		beq $a111			beq _done	; If zero, there are no wordlists.
.a104	a0 00		ldy #$00			ldy #0
.a106					_loop:
.a106	20 89 b3	jsr $b389			jsr PopA		; The search order is a byte array
.a109	99 2b 03	sta $032b,y			sta Search_OrderV,y	; so only save the LSB
.a10c	c8		iny				iny
.a10d	c6 14		dec $14				dec tmp1
.a10f	d0 f5		bne $a106			bne _loop
.a111					_done:
=41					CL	.var *-(WordListLink+wh_Xt)
=$a111					en = *	; remember here
>a0e6	29					.byte CL	;wh_CodeLength
.a111	60		rts				rts
>a112	47 65 74 2d 4f 72 64 65		L1:	.text "Get-Order"	;  name of word as a string, ending at wh_NameLastChar
>a11a	72
>a11b	49					.byte (("Get-Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a11c	63 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a11e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a11f	08					.byte NN	;wh_Flags	dictionary flags
=41115					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a120					Get_Order:
.a120	ac 2a 03	ldy $032a			ldy Num_OrderV	; Get #ORDER - the number of wordlists in the search order.
.a123	f0 09		beq $a12e			beq _done	; If zero, there are no wordlists.
.a125					_loop:
.a125	b9 2a 03	lda $032a,y			lda Search_OrderV-1,y	; Put that wordlist id on the stack.
.a128	20 a1 b7	jsr $b7a1			jsr PushZA
.a12b	88		dey				dey
.a12c	d0 f7		bne $a125			bne _loop		; See if that was the last one to process (first in the list).
.a12e					_done:
.a12e	ad 2a 03	lda $032a			lda Num_OrderV		; Put the number of items on the stack.
.a131	4c a1 b7	jmp $b7a1			jmp PushZA
=20					CL	.var *-(WordListLink+wh_Xt)
=$a134					en = *	; remember here
>a11e	14					.byte CL	;wh_CodeLength
>0339					BlockReadV: .word ?	; Vector to block reading routine
>033b					BlockWriteV: .word ?	; Vector to block writing routine
>033d					BuffBlockNumV: .word ?	; Block number current in BlockBuffer
>033f					BuffStatusV: .word ?	; Status of BlockBuffer (bit 0 = used, bit 1 = dirty)
>0341					BlockBuffer: .fill 1024
.a134					BlockInit:
.a134	a9 00		lda #$00			lda #0
.a136	8d 3f 03	sta $033f			sta BuffStatusV
.a139	a9 45		lda #$45			lda #<Platform_Block_Read
.a13b	a0 f1		ldy #$f1			ldy #>Platform_Block_Read
.a13d	8d 39 03	sta $0339			sta BlockReadV+0
.a140	8c 3a 03	sty $033a			sty BlockReadV+1
.a143	a9 70		lda #$70			lda #<Platform_Block_Write
.a145	a0 f1		ldy #$f1			ldy #>Platform_Block_Write
.a147	8d 3b 03	sta $033b			sta BlockWriteV+0
.a14a	8c 3c 03	sty $033c			sty BlockWriteV+1
.a14d	60		rts				rts
>0741					RamDriveV: .word ?
=0					io_blk_status = 0
=0					io_blk_action = 0
=0					io_blk_number = 0
=0					io_blk_buffer = 0
>a14e	42 6c 6f 63 6b 2d 52 61		L1:	.text "Block-RamDrive-Init"	;  name of word as a string, ending at wh_NameLastChar
>a156	6d 44 72 69 76 65 2d 49 6e 69 74
>a161	93					.byte (("Block-RamDrive-Init"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a162	9b a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a164	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a165	18					.byte UF+NN	;wh_Flags	dictionary flags
=41185					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a166					Block_RamDrive_Init:
.a166	a9 0a		lda #$0a			lda #10			; Calculate how many bytes are needed for numblocks blocks
.a168	20 a1 b7	jsr $b7a1			jsr PushZA
.a16b	20 e8 ca	jsr $cae8			jsr LShift
.a16e	20 c4 c9	jsr $c9c4			jsr Here		; ( size addr )
.a171	8d 41 07	sta $0741			sta RamDriveV+0
.a174	8c 42 07	sty $0742			sty RamDriveV+1
.a177	20 d9 ce	jsr $ced9			jsr Over
.a17a	20 83 c0	jsr $c083			jsr Allot		; Create ramdrive buffer
.a17d	20 20 cf	jsr $cf20			jsr Swap		; blank the buffer
.a180	20 f9 bd	jsr $bdf9			jsr Blank
.a183	a9 98		lda #$98			lda #<_read		; set block read vector
.a185	a0 a1		ldy #$a1			ldy #>_read
.a187	8d 39 03	sta $0339			sta BlockReadV+0
.a18a	8c 3a 03	sty $033a			sty BlockReadV+1
.a18d	a9 a8		lda #$a8			lda #<_write		; set block write vector
.a18f	a0 a1		ldy #$a1			ldy #>_write
.a191	8d 3b 03	sta $033b			sta BlockWriteV+0
.a194	8c 3c 03	sty $033c			sty BlockWriteV+1
.a197	60		rts				rts
=50					CL	.var *-(WordListLink+wh_Xt)
=$a198					en = *	; remember here
>a164	32					.byte CL	;wh_CodeLength
.a198					_read:
.a198	20 b5 a1	jsr $a1b5			jsr _addr
.a19b	20 20 cf	jsr $cf20			jsr Swap
.a19e	a9 00		lda #$00			lda #0
.a1a0	a0 04		ldy #$04			ldy #>1024
.a1a2	20 5f b7	jsr $b75f			jsr PushYA
.a1a5	4c ff ac	jmp $acff			jmp Move
.a1a8					_write:
.a1a8	20 b5 a1	jsr $a1b5			jsr _addr
.a1ab	a9 00		lda #$00			lda #0
.a1ad	a0 04		ldy #$04			ldy #>1024
.a1af	20 5f b7	jsr $b75f			jsr PushYA
.a1b2	4c ff ac	jmp $acff			jmp Move
.a1b5					_addr:
.a1b5	a9 0a		lda #$0a			lda #10
.a1b7	20 a1 b7	jsr $b7a1			jsr PushZA
.a1ba	20 e8 ca	jsr $cae8			jsr LShift
.a1bd	20 d0 a1	jsr $a1d0			jsr RamDrive
.a1c0	4c 4c cb	jmp $cb4c			jmp Plus
>a1c3	52 61 6d 44 72 69 76 65		L1:	.text "RamDrive"	;  name of word as a string, ending at wh_NameLastChar
>a1cb	a8					.byte (("RamDrive"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a1cc	e1 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1cf	08					.byte NN	;wh_Flags	dictionary flags
=41291					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1d0	ad 41 07	lda $0741	RamDrive:	lda RamDriveV+0
.a1d3	ac 42 07	ldy $0742			ldy RamDriveV+1
.a1d6	4c 5f b7	jmp $b75f			jmp PushYA
=9					CL	.var *-(WordListLink+wh_Xt)
=$a1d9					en = *	; remember here
>a1ce	09					.byte CL	;wh_CodeLength
>a1d9	42 75 66 66 53 74 61 74		L1:	.text "BuffStatus"	;  name of word as a string, ending at wh_NameLastChar
>a1e1	75 73
>a1e3	6a					.byte (("BuffStatus"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a1e4	4b a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1e6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1e7	08					.byte NN	;wh_Flags	dictionary flags
=41315					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1e8	a0 03		ldy #$03	BuffStatus:	ldy #>BuffStatusV
.a1ea	a9 3f		lda #$3f			lda #<BuffStatusV
.a1ec	4c 5f b7	jmp $b75f			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a1ef					en = *	; remember here
>a1e6	07					.byte CL	;wh_CodeLength
>a1ef	42 75 66 66 42 6c 6f 63		L1:	.text "BuffBlockNum"	;  name of word as a string, ending at wh_NameLastChar
>a1f7	6b 4e 75 6d
>a1fb	ac					.byte (("BuffBlockNum"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a1fc	63 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1ff	08					.byte NN	;wh_Flags	dictionary flags
=41339					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a200	a0 03		ldy #$03	BuffBlockNum:	ldy #>BuffBlockNumV
.a202	a9 3d		lda #$3d			lda #<BuffBlockNumV
.a204	4c 5f b7	jmp $b75f			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a207					en = *	; remember here
>a1fe	07					.byte CL	;wh_CodeLength
>a207	42 6c 6b 42 75 66 66 65		L1:	.text "BlkBuffer"	;  name of word as a string, ending at wh_NameLastChar
>a20f	72
>a210	49					.byte (("BlkBuffer"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a211	7b a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a213	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a214	08					.byte NN	;wh_Flags	dictionary flags
=41360					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a215	a0 03		ldy #$03	BlkBuffer:	ldy #>BlockBuffer
.a217	a9 41		lda #$41			lda #<BlockBuffer
.a219	4c 5f b7	jmp $b75f			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a21c					en = *	; remember here
>a213	07					.byte CL	;wh_CodeLength
>a21c	53 63 72			L1:	.text "Scr"	;  name of word as a string, ending at wh_NameLastChar
>a21f	43					.byte (("Scr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a220	90 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a222	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a223	08					.byte NN	;wh_Flags	dictionary flags
=41375					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a224	a0 03		ldy #$03	Scr:		ldy #>ScrV
.a226	a9 0e		lda #$0e			lda #<ScrV
.a228	4c 5f b7	jmp $b75f			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a22b					en = *	; remember here
>a222	07					.byte CL	;wh_CodeLength
>a22b	42 6c 6b			L1:	.text "Blk"	;  name of word as a string, ending at wh_NameLastChar
>a22e	63					.byte (("Blk"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a22f	9f a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a231	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a232	08					.byte NN	;wh_Flags	dictionary flags
=41390					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a233	a0 03		ldy #$03	Blk:		ldy #>BlkV
.a235	a9 0c		lda #$0c			lda #<BlkV
.a237	4c 5f b7	jmp $b75f			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a23a					en = *	; remember here
>a231	07					.byte CL	;wh_CodeLength
>a23a	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write"	;  name of word as a string, ending at wh_NameLastChar
>a242	69 74 65
>a245	ab					.byte (("Block-Write"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a246	ae a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a248	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a249	08					.byte NN	;wh_Flags	dictionary flags
=41413					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a24a	6c 3b 03	jmp ($033b)	Block_Write:	jmp (BlockWriteV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-(WordListLink+wh_Xt)
=$a24d					en = *	; remember here
>a248	03					.byte CL	;wh_CodeLength
>a24d	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a255	69 74 65 2d 56 65 63 74 6f 72
>a25f	52					.byte (("Block-Write-Vector"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a260	c5 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a262	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a263	08					.byte NN	;wh_Flags	dictionary flags
=41439					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a264					Block_Write_Vector:
.a264	a0 03		ldy #$03			ldy #>BlockWriteV
.a266	a9 3b		lda #$3b			lda #<BlockWriteV	; Get the BLOCK-WRITE-VECTOR address
.a268	4c 5f b7	jmp $b75f			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a26b					en = *	; remember here
>a262	07					.byte CL	;wh_CodeLength
>a26b	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read"	;  name of word as a string, ending at wh_NameLastChar
>a273	61 64
>a275	8a					.byte (("Block-Read"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a276	df a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a278	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a279	08					.byte NN	;wh_Flags	dictionary flags
=41461					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a27a	6c 39 03	jmp ($0339)	Block_Read:	jmp (BlockReadV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-(WordListLink+wh_Xt)
=$a27d					en = *	; remember here
>a278	03					.byte CL	;wh_CodeLength
>a27d	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a285	61 64 2d 56 65 63 74 6f 72
>a28e	51					.byte (("Block-Read-Vector"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a28f	f5 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a291	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a292	08					.byte NN	;wh_Flags	dictionary flags
=41486					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a293					Block_Read_Vector:
.a293	a0 03		ldy #$03			ldy #>BlockReadV
.a295	a9 39		lda #$39			lda #<BlockReadV	; Get the BLOCK-READ-VECTOR address
.a297	4c 5f b7	jmp $b75f			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a29a					en = *	; remember here
>a291	07					.byte CL	;wh_CodeLength
>a29a	53 61 76 65 2d 42 75 66		L1:	.text "Save-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a2a2	66 65 72 73
>a2a6	6c					.byte (("Save-Buffers"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a2a7	0e a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a2a9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a2aa	00					.byte 0	;wh_Flags	dictionary flags
=41510					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2ab					Save_Buffers:
.a2ab	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a2ae	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a2b0	d0 11		bne $a2c3			bne _done	; Either not used or not dirty = done!
.a2b2	20 15 a2	jsr $a215			jsr BlkBuffer
.a2b5	20 00 a2	jsr $a200			jsr BuffBlockNum
.a2b8	20 6c ce	jsr $ce6c			jsr Fetch
.a2bb	20 4a a2	jsr $a24a			jsr Block_Write
.a2be	a9 01		lda #$01			lda #1
.a2c0	8d 3f 03	sta $033f			sta BuffStatusV+0
.a2c3					_done:
=24					CL	.var *-(WordListLink+wh_Xt)
=$a2c3					en = *	; remember here
>a2a9	18					.byte CL	;wh_CodeLength
.a2c3	60		rts				rts
>a2c4	42 6c 6f 63 6b			L1:	.text "Block"	;  name of word as a string, ending at wh_NameLastChar
>a2c9	65					.byte (("Block"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a2ca	26 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a2cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a2cd	00					.byte 0	;wh_Flags	dictionary flags
=41545					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2ce					Block:
.a2ce	ad 3d 03	lda $033d			lda BuffBlockNumV+0	; check the LSB
.a2d1	d5 24		cmp $24,x			cmp DStack+0,x
.a2d3	d0 0e		bne $a2e3			bne _not_in_buffer
.a2d5	ad 3e 03	lda $033e			lda BuffBlockNumV+1	; check the MSB
.a2d8	d5 25		cmp $25,x			cmp DStack+1,x
.a2da	d0 07		bne $a2e3			bne _not_in_buffer
.a2dc	ad 3f 03	lda $033f			lda BuffStatusV+0
.a2df	29 01		and #$01			and #1		; Check the in-use flag (bit 0)
.a2e1	d0 2d		bne $a310			bne _done	; It's already in the buffer and in use.
.a2e3					_not_in_buffer:
.a2e3	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a2e6	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a2e8	d0 0c		bne $a2f6			bne _buffer_available ; Unused or not dirty = available
.a2ea	20 15 a2	jsr $a215			jsr BlkBuffer
.a2ed	20 00 a2	jsr $a200			jsr BuffBlockNum
.a2f0	20 6c ce	jsr $ce6c			jsr Fetch
.a2f3	20 4a a2	jsr $a24a			jsr Block_Write
.a2f6					_buffer_available:
.a2f6	b5 24		lda $24,x			lda DStack+0,x
.a2f8	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a2fb	b5 25		lda $25,x			lda DStack+1,x
.a2fd	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a300	20 15 a2	jsr $a215			jsr BlkBuffer
.a303	20 20 cf	jsr $cf20			jsr Swap
.a306	20 7a a2	jsr $a27a			jsr Block_Read
.a309	a9 01		lda #$01			lda #1
.a30b	8d 3f 03	sta $033f			sta BuffStatusV+0
.a30e	ca		dex				dex
.a30f	ca		dex				dex
.a310					_done:
.a310	a9 41		lda #$41			lda #<BlockBuffer
.a312	95 24		sta $24,x			sta DStack+0,x
.a314	a9 03		lda #$03			lda #>BlockBuffer
.a316	95 25		sta $25,x			sta DStack+1,x
=74					CL	.var *-(WordListLink+wh_Xt)
=$a318					en = *	; remember here
>a2cc	4a					.byte CL	;wh_CodeLength
.a318	60		rts				rts
>a319	55 70 64 61 74 65		L1:	.text "Update"	;  name of word as a string, ending at wh_NameLastChar
>a31f	a6					.byte (("Update"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a320	49 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a322	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a323	00					.byte 0	;wh_Flags	dictionary flags
=41631					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a324					Update:
.a324	ad 3f 03	lda $033f			lda BuffStatusV+0
.a327	09 02		ora #$02			ora #2		; Turn on dirty flag (bit 2)
.a329	8d 3f 03	sta $033f			sta BuffStatusV+0
=8					CL	.var *-(WordListLink+wh_Xt)
=$a32c					en = *	; remember here
>a322	08					.byte CL	;wh_CodeLength
.a32c	60		rts				rts
>a32d	42 75 66 66 65 72		L1:	.text "Buffer"	;  name of word as a string, ending at wh_NameLastChar
>a333	46					.byte (("Buffer"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a334	9f a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a336	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a337	08					.byte NN	;wh_Flags	dictionary flags
=41651					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a338					Buffer:
.a338	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a33b	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a33d	d0 0c		bne $a34b			bne _buffer_available ; Unused or not dirty = available
.a33f	20 15 a2	jsr $a215			jsr BlkBuffer
.a342	20 00 a2	jsr $a200			jsr BuffBlockNum
.a345	20 6c ce	jsr $ce6c			jsr Fetch
.a348	20 4a a2	jsr $a24a			jsr Block_Write
.a34b					_buffer_available:
.a34b	b5 24		lda $24,x			lda DStack+0,x
.a34d	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a350	b5 25		lda $25,x			lda DStack+1,x
.a352	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a355	a9 01		lda #$01			lda #1
.a357	8d 3f 03	sta $033f			sta BuffStatusV+0
.a35a					_done:
.a35a	a9 41		lda #$41			lda #<BlockBuffer
.a35c	95 24		sta $24,x			sta DStack+0,x
.a35e	a9 03		lda #$03			lda #>BlockBuffer
.a360	95 25		sta $25,x			sta DStack+1,x
=42					CL	.var *-(WordListLink+wh_Xt)
=$a362					en = *	; remember here
>a336	2a					.byte CL	;wh_CodeLength
.a362	60		rts				rts
>a363	45 6d 70 74 79 2d 42 75		L1:	.text "Empty-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a36b	66 66 65 72 73
>a370	6d					.byte (("Empty-Buffers"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a371	b3 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a373	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a374	08					.byte NN	;wh_Flags	dictionary flags
=41712					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a375	a9 00		lda #$00	Empty_Buffers:	lda #0		; Set the buffer status to empty.
.a377	8d 3f 03	sta $033f			sta BuffStatusV+0 ; Only LSB is used.
=5					CL	.var *-(WordListLink+wh_Xt)
=$a37a					en = *	; remember here
>a373	05					.byte CL	;wh_CodeLength
.a37a	60		rts				rts
>a37b	46 6c 75 73 68			L1:	.text "Flush"	;  name of word as a string, ending at wh_NameLastChar
>a380	05					.byte (("Flush"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a381	f0 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a383	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a384	08					.byte NN	;wh_Flags	dictionary flags
=41728					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a385	20 ab a2	jsr $a2ab	Flush:		jsr Save_Buffers
.a388	4c 75 a3	jmp $a375			jmp Empty_Buffers
=6					CL	.var *-(WordListLink+wh_Xt)
=$a38b					en = *	; remember here
>a383	06					.byte CL	;wh_CodeLength
>a38b	4c 6f 61 64			L1:	.text "Load"	;  name of word as a string, ending at wh_NameLastChar
>a38f	84					.byte (("Load"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a390	00 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a392	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a393	10					.byte UF	;wh_Flags	dictionary flags
=41743					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a394					Load:
.a394	20 cf b3	jsr $b3cf			jsr underflow_1
.a397	ad 0d 03	lda $030d			lda BlkV+1		; Save the current value of BLK on the return stack.
.a39a	48		pha				pha
.a39b	ad 0c 03	lda $030c			lda BlkV+0
.a39e	48		pha				pha
.a39f	b5 24		lda $24,x			lda DStack+0,x		; Set BLK to the given block/screen number.
.a3a1	8d 0c 03	sta $030c			sta BlkV+0
.a3a4	b5 25		lda $25,x			lda DStack+1,x
.a3a6	8d 0d 03	sta $030d			sta BlkV+1
.a3a9	20 ce a2	jsr $a2ce			jsr Block		; Load that block into a buffer
.a3ac	a9 00		lda #$00			lda #<1024		; block length.
.a3ae	a0 04		ldy #$04			ldy #>1024
.a3b0	20 5f b7	jsr $b75f			jsr PushYA
.a3b3	38		sec				sec		; Set a flag to not zero BLK
.a3b4	20 95 af	jsr $af95			jsr load_evaluate
.a3b7	68		pla				pla
.a3b8	8d 0c 03	sta $030c			sta BlkV+0
.a3bb	68		pla				pla
.a3bc	8d 0d 03	sta $030d			sta BlkV+1
.a3bf	0d 0c 03	ora $030c			ora BlkV+0
.a3c2	f0 13		beq $a3d7			beq _done
.a3c4	ad 0c 03	lda $030c			lda BlkV+0
.a3c7	ac 0d 03	ldy $030d			ldy BlkV+1
.a3ca	20 5f b7	jsr $b75f			jsr PushYA
.a3cd	20 ce a2	jsr $a2ce			jsr Block
.a3d0	20 a5 b3	jsr $b3a5			jsr PopYA	; Pop the buffer address.
.a3d3	85 04		sta $04				sta cib+0
.a3d5	84 05		sty $05				sty cib+1
.a3d7					_done:
=67					CL	.var *-(WordListLink+wh_Xt)
=$a3d7					en = *	; remember here
>a392	43					.byte CL	;wh_CodeLength
.a3d7	60		rts				rts
>a3d8	54 68 72 75			L1:	.text "Thru"	;  name of word as a string, ending at wh_NameLastChar
>a3dc	a4					.byte (("Thru"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a3dd	0f a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3df	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3e0	18					.byte UF+NN	;wh_Flags	dictionary flags
=41820					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3e1					Thru:
.a3e1	20 e4 b3	jsr $b3e4			jsr underflow_2
.a3e4	20 87 ce	jsr $ce87			jsr To_R
.a3e7					_loop:
.a3e7	b5 25		lda $25,x			lda DStack+1,x		; copy to return stack
.a3e9	48		pha				pha
.a3ea	b5 24		lda $24,x			lda DStack+0,x
.a3ec	48		pha				pha
.a3ed	20 94 a3	jsr $a394			jsr Load		; Load this screen.
.a3f0	20 a6 ce	jsr $cea6			jsr R_From		; Get the screen # we just loaded.
.a3f3	20 f8 c9	jsr $c9f8			jsr One_plus		; increment
.a3f6	86 14		stx $14				stx tmp1
.a3f8	ba		tsx				tsx
.a3f9	8a		txa				txa
.a3fa	a8		tay				tay
.a3fb	a6 14		ldx $14				ldx tmp1
.a3fd	b9 01 01	lda $0101,y			lda RStack+1,y
.a400	d5 24		cmp $24,x			cmp DStack+0,x
.a402	b9 02 01	lda $0102,y			lda RStack+2,y
.a405	f5 25		sbc $25,x			sbc DStack+1,x
.a407	b0 de		bcs $a3e7			bcs _loop
.a409	e8		inx				inx			; Drop index
.a40a	e8		inx				inx
.a40b	68		pla				pla			; RDrop limit
.a40c	68		pla				pla
=44					CL	.var *-(WordListLink+wh_Xt)
=$a40d					en = *	; remember here
>a3df	2c					.byte CL	;wh_CodeLength
.a40d	60		rts				rts
>a40e	4c 69 73 74			L1:	.text "List"	;  name of word as a string, ending at wh_NameLastChar
>a412	84					.byte (("List"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a413	5c a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a415	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a416	08					.byte NN	;wh_Flags	dictionary flags
=41874					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a417	20 a5 b3	jsr $b3a5	List:		jsr PopYA	; Save the screen number
.a41a	8d 0e 03	sta $030e			sta ScrV+0
.a41d	8c 0f 03	sty $030f			sty ScrV+1
.a420					ListScr:
.a420	20 24 a2	jsr $a224			jsr Scr
.a423	20 6c ce	jsr $ce6c			jsr Fetch
.a426	20 ce a2	jsr $a2ce			jsr Block	; Get the current screen contents.
.a429	20 e2 aa	jsr $aae2			jsr CR
.a42c	20 80 b8	jsr $b880			jsr SLiteral_Runtime
.a42f	4c 3a a4	jmp $a43a			  jmp +				; for SLiteral_Runtime
>a432	53 63 72 65 65 6e 20 23				  .text "Screen #"		; for SLiteral_Runtime
.a43a					+
.a43a	20 8a cd	jsr $cd8a			jsr Type
.a43d	20 24 a2	jsr $a224			jsr Scr		; print screen number
.a440	20 6c ce	jsr $ce6c			jsr Fetch
.a443	a9 04		lda #$04			lda #4		;    in 4 positions
.a445	20 e5 cb	jsr $cbe5			jsr U_Dot_R_A
.a448	a9 00		lda #$00			lda #0			; line #
.a44a					_line_loop:
.a44a	48		pha				pha
.a44b	20 e2 aa	jsr $aae2			jsr CR
.a44e	68		pla				pla		; Print the line number
.a44f	48		pha				pha
.a450	20 a1 b7	jsr $b7a1			jsr PushZA
.a453	a9 02		lda #$02			lda #2		;   in 2 positions
.a455	20 e5 cb	jsr $cbe5			jsr U_Dot_R_A
.a458	20 7d cd	jsr $cd7d			jsr Space
.a45b	20 02 cf	jsr $cf02			jsr Dup		; Print one line using the address on the stack.
.a45e	a9 40		lda #$40			lda #64
.a460	20 a1 b7	jsr $b7a1			jsr PushZA
.a463	20 8a cd	jsr $cd8a			jsr Type
.a466	a9 40		lda #$40			lda #64		; move address to the next line.
.a468	20 a7 c9	jsr $c9a7			jsr Plus_A
.a46b	68		pla				pla		; Increment the line number
.a46c	18		clc				clc
.a46d	69 01		adc #$01			adc #1
.a46f	c9 10		cmp #$10			cmp #16		; See if we are done.
.a471	d0 d7		bne $a44a			bne _line_loop
.a473	e8		inx				inx		; Drop the address
.a474	e8		inx				inx
.a475	4c e2 aa	jmp $aae2			jmp CR
=97					CL	.var *-(WordListLink+wh_Xt)
=$a478					en = *	; remember here
>a415	61					.byte CL	;wh_CodeLength
>a478	44 65 66 65 72			L1:	.text "Defer"	;  name of word as a string, ending at wh_NameLastChar
>a47d	45					.byte (("Defer"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a47e	92 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a480	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a481	08					.byte NN	;wh_Flags	dictionary flags
=41981					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a482					Defer:
.a482	20 dd c0	jsr $c0dd			jsr Header_Comma	; compile word header
.a485	a9 8f		lda #$8f			lda #<_undefined	; compile "jmp _undefined"
.a487	a0 a4		ldy #$a4			ldy #>_undefined
.a489	20 f7 cc	jsr $ccf7			jsr Jmp_Comma_YA
.a48c	4c b4 bb	jmp $bbb4			jmp adjust_z	; adjust header to correct length
=13					CL	.var *-(WordListLink+wh_Xt)
=$a48f					en = *	; remember here
>a480	0d					.byte CL	;wh_CodeLength
.a48f					_undefined:
.a48f	a9 6a		lda #$6a			lda #$100+err_Defer	; throw exception
.a491	4c 2e b4	jmp $b42e			jmp ThrowA
>a494	44 65 66 65 72 40		L1:	.text "Defer@"	;  name of word as a string, ending at wh_NameLastChar
>a49a	06					.byte (("Defer@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a49b	fd a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a49d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a49e	08					.byte NN	;wh_Flags	dictionary flags
=42010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a49f					Defer_Fetch:
.a49f	20 f8 c9	jsr $c9f8			jsr One_plus	; step over JMP opcode to operand
.a4a2	4c 6c ce	jmp $ce6c			jmp Fetch	; get JMP operand, return
=6					CL	.var *-(WordListLink+wh_Xt)
=$a4a5					en = *	; remember here
>a49d	06					.byte CL	;wh_CodeLength
>a4a5	44 65 66 65 72 21		L1:	.text "Defer!"	;  name of word as a string, ending at wh_NameLastChar
>a4ab	26					.byte (("Defer!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4ac	1a a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4ae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4af	08					.byte NN	;wh_Flags	dictionary flags
=42027					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4b0					Defer_Store:
.a4b0	20 f8 c9	jsr $c9f8			jsr One_plus	; step over JMP opcode to operand
.a4b3	4c 4f ce	jmp $ce4f			jmp Store	; set JMP operand, return
=6					CL	.var *-(WordListLink+wh_Xt)
=$a4b6					en = *	; remember here
>a4ae	06					.byte CL	;wh_CodeLength
>a4b6	49 73				L1:	.text "Is"	;  name of word as a string, ending at wh_NameLastChar
>a4b8	62					.byte (("Is"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4b9	2b a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4bc	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42040					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4bd					Is:
.a4bd	a5 0a		lda $0a				lda state		; Check STATE
.a4bf	f0 0a		beq $a4cb			beq _interpreting
.a4c1					_compiling:
.a4c1	20 2b bc	jsr $bc2b			jsr Bracket_Tick	; compile the xt of the next word as a literal.
.a4c4	a0 a4		ldy #$a4			ldy #>Defer_Store	; Postpone DEFER! by compiling a JSR to it.
.a4c6	a9 b0		lda #$b0			lda #<Defer_Store
.a4c8	4c e0 cc	jmp $cce0			jmp Jsr_Comma_YA
.a4cb					_interpreting:
.a4cb	20 17 bc	jsr $bc17			jsr Tick
.a4ce	4c b0 a4	jmp $a4b0			jmp Defer_Store
=20					CL	.var *-(WordListLink+wh_Xt)
=$a4d1					en = *	; remember here
>a4bb	14					.byte CL	;wh_CodeLength
>a4d1	41 63 74 69 6f 6e 2d 4f		L1:	.text "Action-Of"	;  name of word as a string, ending at wh_NameLastChar
>a4d9	66
>a4da	c9					.byte (("Action-Of"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4db	38 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4de	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42074					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4df					Action_Of:
.a4df	a5 0a		lda $0a				lda state		; Check STATE
.a4e1	f0 0a		beq $a4ed			beq _interpreting
.a4e3					_compiling:
.a4e3	20 2b bc	jsr $bc2b			jsr Bracket_Tick	; compile the xt of the next word as a literal.
.a4e6	a0 a4		ldy #$a4			ldy #>Defer_Fetch	; Postpone DEFER@ by compiling a JSR to it.
.a4e8	a9 9f		lda #$9f			lda #<Defer_Fetch
.a4ea	4c e0 cc	jmp $cce0			jmp Jsr_Comma_YA
.a4ed					_interpreting:
.a4ed	20 17 bc	jsr $bc17			jsr Tick
.a4f0	4c 9f a4	jmp $a49f			jmp Defer_Fetch
=20					CL	.var *-(WordListLink+wh_Xt)
=$a4f3					en = *	; remember here
>a4dd	14					.byte CL	;wh_CodeLength
>a4f3	55 73 65 72 41 64 64 72		L1:	.text "UserAddr"	;  name of word as a string, ending at wh_NameLastChar
>a4fb	48					.byte (("UserAddr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4fc	5a a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4ff	08					.byte NN	;wh_Flags	dictionary flags
=42107					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a500	a0 02		ldy #$02	UserAddr:	ldy #>User0
.a502	a9 ff		lda #$ff			lda #<User0
.a504	4c 5f b7	jmp $b75f			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a507					en = *	; remember here
>a4fe	07					.byte CL	;wh_CodeLength
>a507	42 75 66 66 65 72 3a		L1:	.text "Buffer:"	;  name of word as a string, ending at wh_NameLastChar
>a50e	47					.byte (("Buffer:"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a50f	7b a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a511	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a512	08					.byte NN	;wh_Flags	dictionary flags
=42126					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a513	20 7a c1	jsr $c17a	Buffer_Colon:	jsr Create
.a516	4c 83 c0	jmp $c083			jmp Allot
=6					CL	.var *-(WordListLink+wh_Xt)
=$a519					en = *	; remember here
>a511	06					.byte CL	;wh_CodeLength
>a519	43 61 73 65			L1:	.text "Case"	;  name of word as a string, ending at wh_NameLastChar
>a51d	a4					.byte (("Case"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a51e	8e a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a520	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a521	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42141					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a522					Case:
.a522	4c b0 b7	jmp $b7b0			jmp Zero	; init jmp fixup chain
=3					CL	.var *-(WordListLink+wh_Xt)
=$a525					en = *	; remember here
>a520	03					.byte CL	;wh_CodeLength
>a525	45 6e 64 43 61 73 65		L1:	.text "EndCase"	;  name of word as a string, ending at wh_NameLastChar
>a52c	a7					.byte (("EndCase"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a52d	9d a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a52f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a530	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42156					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a531					EndCase:
.a531	20 cf cc	jsr $cccf			jsr Drop_Comma
.a534					_loop:
.a534	b5 25		lda $25,x			lda DStack+1,x	; while addr fixup entries left
.a536	f0 06		beq $a53e			beq _done
.a538	20 bb a5	jsr $a5bb			jsr Then	;   fixup another one
.a53b	4c 34 a5	jmp $a534			jmp _loop
.a53e					_done:
.a53e	e8		inx				inx		; Drop the 0
.a53f	e8		inx				inx
=15					CL	.var *-(WordListLink+wh_Xt)
=$a540					en = *	; remember here
>a52f	0f					.byte CL	;wh_CodeLength
.a540	60		rts				rts
>a541	4f 66				L1:	.text "Of"	;  name of word as a string, ending at wh_NameLastChar
>a543	c2					.byte (("Of"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a544	ac a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a546	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a547	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42179					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a548					Of:
.a548	a0 a5		ldy #$a5			ldy #>_runtime		; Check if value is equal to this case.
.a54a	a9 5d		lda #$5d			lda #<_runtime
.a54c	20 e0 cc	jsr $cce0			jsr Jsr_Comma_YA
.a54f	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a551	20 a1 cc	jsr $cca1			jsr C_Comma_A
.a554	20 c4 c9	jsr $c9c4			jsr Here		; Put the origination address on the stack for else/then
.a557	20 b0 b7	jsr $b7b0			jsr Zero
.a55a	4c b8 cc	jmp $ccb8			jmp Comma
=21					CL	.var *-(WordListLink+wh_Xt)
=$a55d					en = *	; remember here
>a546	15					.byte CL	;wh_CodeLength
.a55d					_runtime:
.a55d	b5 24		lda $24,x			lda DStack+0,x	; compare x1 with x2
.a55f	d5 26		cmp $26,x			cmp DStack+2,x
.a561	d0 0a		bne $a56d			bne _NotEq
.a563	b5 25		lda $25,x			lda DStack+1,x
.a565	d5 27		cmp $27,x			cmp DStack+3,x
.a567	d0 04		bne $a56d			bne _NotEq
.a569	e8		inx				inx		; Drop x2
.a56a	e8		inx				inx
.a56b	d0 35		bne $a5a2			bne zbranch_run2 ; Drop x1 & return to after the jmp abs
.a56d	e8		inx		_NotEq:		inx		; Drop x2
.a56e	e8		inx				inx
.a56f	60		rts				rts		; return to the jmp abs to next test
>a570	45 6e 64 4f 66			L1:	.text "EndOf"	;  name of word as a string, ending at wh_NameLastChar
>a575	c5					.byte (("EndOf"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a576	c3 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a578	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a579	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42229					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a57a					EndOf:
.a57a	4c cd a5	jmp $a5cd			jmp Else
=3					CL	.var *-(WordListLink+wh_Xt)
=$a57d					en = *	; remember here
>a578	03					.byte CL	;wh_CodeLength
>a57d	49 66				L1:	.text "If"	;  name of word as a string, ending at wh_NameLastChar
>a57f	c2					.byte (("If"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a580	f5 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a582	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a583	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42239					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a584					If:
.a584	20 95 a5	jsr $a595	If3:		jsr zbranch_jsr_comma	; Compile a 0BRANCH
.a587					zbranch_jmp0_comma:
.a587	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a589	20 a1 cc	jsr $cca1			jsr C_Comma_A
.a58c	20 c4 c9	jsr $c9c4			jsr Here		; save ptr to address for else/then
.a58f	a9 00		lda #$00			lda #0			; Stuff zero in for the branch address right now.
.a591	a8		tay				tay			; THEN or ELSE will fix it later.
.a592	4c bb cc	jmp $ccbb			jmp Comma_YA
=17					CL	.var *-(WordListLink+wh_Xt)
=$a595					en = *	; remember here
>a582	11					.byte CL	;wh_CodeLength
=$ccf4					zbranch_jmp_comma = Jmp_Comma		; compile jmp abs
.a595					zbranch_jsr_comma:
.a595	a0 a5		ldy #$a5			ldy #>_runtime
.a597	a9 9c		lda #$9c			lda #<_runtime
.a599	4c e0 cc	jmp $cce0			jmp Jsr_Comma_YA
.a59c					_runtime:
.a59c	b5 24		lda $24,x			lda DStack+0,x		;flag is false?
.a59e	15 25		ora $25,x			ora DStack+1,x
.a5a0	f0 0d		beq $a5af			beq zbranch_run_done
.a5a2	18		clc		zbranch_run2:	clc			; move RTS addr over the next jmp abs.
.a5a3	68		pla				pla
.a5a4	69 03		adc #$03			adc #3
.a5a6	90 06		bcc $a5ae			bcc +
.a5a8	a8		tay				tay
.a5a9	68		pla				pla
.a5aa	69 00		adc #$00			adc #0
.a5ac	48		pha				pha
.a5ad	98		tya				tya
.a5ae	48		pha		+		pha
.a5af					zbranch_run_done:
.a5af	e8		inx				inx			; Drop f
.a5b0	e8		inx				inx
.a5b1	60		rts				rts
>a5b2	54 68 65 6e			L1:	.text "Then"	;  name of word as a string, ending at wh_NameLastChar
>a5b6	c4					.byte (("Then"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5b7	ff a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5b9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5ba	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42294					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5bb					Then:
.a5bb	20 c4 c9	jsr $c9c4			jsr Here
.a5be	20 20 cf	jsr $cf20			jsr Swap
.a5c1	4c 4f ce	jmp $ce4f			jmp Store
=9					CL	.var *-(WordListLink+wh_Xt)
=$a5c4					en = *	; remember here
>a5b9	09					.byte CL	;wh_CodeLength
>a5c4	45 6c 73 65			L1:	.text "Else"	;  name of word as a string, ending at wh_NameLastChar
>a5c8	a4					.byte (("Else"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5c9	36 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5cb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5cc	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42312					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5cd					Else:
.a5cd	20 87 a5	jsr $a587			jsr zbranch_jmp0_comma	; compile jmp 0, push addr of addr
.a5d0	20 c4 c9	jsr $c9c4			jsr Here
.a5d3	20 06 ce	jsr $ce06			jsr Rot
.a5d6	4c 4f ce	jmp $ce4f			jmp Store
=12					CL	.var *-(WordListLink+wh_Xt)
=$a5d9					en = *	; remember here
>a5cb	0c					.byte CL	;wh_CodeLength
>a5d9	42 65 67 69 6e			L1:	.text "Begin"	;  name of word as a string, ending at wh_NameLastChar
>a5de	c5					.byte (("Begin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5df	48 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5e2	0d					.byte NN+CO+IM	;wh_Flags	dictionary flags
=42334					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5e3	20 c4 c9	jsr $c9c4	Begin:		jsr Here	; remember the loop starting location
.a5e6	a9 e3		lda #$e3			lda #<Begin	; pairing marker
.a5e8	4c a1 b7	jmp $b7a1			jmp PushZA
=8					CL	.var *-(WordListLink+wh_Xt)
=$a5eb					en = *	; remember here
>a5e1	08					.byte CL	;wh_CodeLength
>a5eb	41 67 61 69 6e			L1:	.text "Again"	;  name of word as a string, ending at wh_NameLastChar
>a5f0	c5					.byte (("Again"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5f1	5e a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5f4	1d					.byte NN+CO+IM+UF	;wh_Flags	dictionary flags
=42352					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5f5	20 e4 b3	jsr $b3e4	Again:		jsr underflow_2
.a5f8	a9 e3		lda #$e3			lda #<Begin	; check pairing
.a5fa	20 95 b2	jsr $b295			jsr QPairCtlA
.a5fd	4c f4 cc	jmp $ccf4			jmp Jmp_Comma	; Compile a jmp abs.
=11					CL	.var *-(WordListLink+wh_Xt)
=$a600					en = *	; remember here
>a5f3	0b					.byte CL	;wh_CodeLength
>a600	55 6e 74 69 6c			L1:	.text "Until"	;  name of word as a string, ending at wh_NameLastChar
>a605	85					.byte (("Until"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a606	70 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a608	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a609	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42373					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a60a	a9 e3		lda #$e3	Until:		lda #<Begin		; check pairing
.a60c	20 95 b2	jsr $b295			jsr QPairCtlA
.a60f	4c 48 a6	jmp $a648			jmp ZBranch_Comma	; The address to loop back to is on the stack.
=8					CL	.var *-(WordListLink+wh_Xt)
=$a612					en = *	; remember here
>a608	08					.byte CL	;wh_CodeLength
>a612	57 68 69 6c 65			L1:	.text "While"	;  name of word as a string, ending at wh_NameLastChar
>a617	a5					.byte (("While"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a618	85 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a61a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a61b	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42391					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a61c	a9 e3		lda #$e3	While:		lda #<Begin	; check pairing
.a61e	20 95 b2	jsr $b295			jsr QPairCtlA
.a621	20 84 a5	jsr $a584			jsr If3		; Compile a 0branch & jmp, push addr of addr
.a624	20 20 cf	jsr $cf20			jsr Swap	; Swap the two addresses on the stack.
.a627	a9 e3		lda #$e3			lda #<Begin	; pairing marker
.a629	4c a1 b7	jmp $b7a1			jmp PushZA
=16					CL	.var *-(WordListLink+wh_Xt)
=$a62c					en = *	; remember here
>a61a	10					.byte CL	;wh_CodeLength
>a62c	52 65 70 65 61 74		L1:	.text "Repeat"	;  name of word as a string, ending at wh_NameLastChar
>a632	86					.byte (("Repeat"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a633	97 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a635	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a636	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42418					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a637	a9 e3		lda #$e3	Repeat:		lda #<Begin	; check pairing
.a639	20 95 b2	jsr $b295			jsr QPairCtlA
.a63c	20 f4 cc	jsr $ccf4			jsr Jmp_Comma	; compile the jmp back
.a63f	20 c4 c9	jsr $c9c4			jsr Here	; patch the WHILE jmp operand
.a642	20 20 cf	jsr $cf20			jsr Swap
.a645	4c 4f ce	jmp $ce4f			jmp Store
=17					CL	.var *-(WordListLink+wh_Xt)
=$a648					en = *	; remember here
>a635	11					.byte CL	;wh_CodeLength
.a648					ZBranch_Comma:
.a648	a9 e8		lda #$e8			lda #$e8		; compile inx; inx
.a64a	a8		tay				tay
.a64b	20 bb cc	jsr $ccbb			jsr Comma_YA
.a64e	a9 b5		lda #$b5			lda #$b5		; compile lda DStack-2,x
.a650	a0 22		ldy #$22			ldy #DStack-2
.a652	20 bb cc	jsr $ccbb			jsr Comma_YA
.a655	a9 15		lda #$15			lda #$15		; compile ora DStack-1,x
.a657	a0 23		ldy #$23			ldy #DStack-1
.a659	20 bb cc	jsr $ccbb			jsr Comma_YA
.a65c	a9 f0		lda #$f0			lda #$f0		; BEQ
.a65e	d0 0c		bne $a66c			bne Branch_Comma
>a660	42 72 61 6e 63 68 2c		L1:	.text "Branch,"	;  name of word as a string, ending at wh_NameLastChar
>a667	87					.byte (("Branch,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a668	b2 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a66a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a66b	08					.byte NN	;wh_Flags	dictionary flags
=42471					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a66c					Branch_Comma:
.a66c	48		pha				pha			; save branch opcode
.a66d	38		sec				sec			; AY= displacement+2
.a66e	b5 24		lda $24,x			lda DStack+0,x
.a670	e5 00		sbc $00				sbc cp+0
.a672	a8		tay				tay
.a673	b5 25		lda $25,x			lda DStack+1,x
.a675	e5 01		sbc $01				sbc cp+1
.a677	c9 ff		cmp #$ff			cmp #$ff		; offset maybe in range?
.a679	f0 0b		beq $a686			beq _rev
.a67b	68		pla		_2byte:		pla			; restore branch opcode
.a67c	49 20		eor #$20			eor #$20		; reverse branch sense
.a67e	a0 03		ldy #$03			ldy #3			; compile Bcc *+5
.a680	20 bb cc	jsr $ccbb			jsr Comma_YA
.a683	4c f4 cc	jmp $ccf4			jmp Jmp_Comma		; compile JMP abs
.a686	c0 82		cpy #$82	_rev:		cpy #$80+2		; offset in range?
.a688	90 f1		bcc $a67b			bcc _2byte
.a68a	e8		inx		_1byte:		inx			; Drop address
.a68b	e8		inx				inx
.a68c	88		dey				dey			; fix displacement
.a68d	88		dey				dey
.a68e	68		pla				pla			; restore branch opcode
.a68f	4c bb cc	jmp $ccbb			jmp Comma_YA		; compile Bcc
>a692	57 6f 72 64			L1:	.text "Word"	;  name of word as a string, ending at wh_NameLastChar
>a696	84					.byte (("Word"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a697	e7 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a699	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a69a	18					.byte UF+NN	;wh_Flags	dictionary flags
=42518					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a69b					Word:
.a69b	20 cf b3	jsr $b3cf			jsr underflow_1
.a69e	a4 08		ldy $08				ldy toin+0		; >IN
.a6a0	c4 06		cpy $06		_DelimLoop:	cpy ciblen+0		; quit if end of input
.a6a2	f0 09		beq $a6ad			beq _found_char
.a6a4	b1 04		lda ($04),y			lda (cib),y
.a6a6	d5 24		cmp $24,x			cmp DStack+0,x		; ASCII of delimiter
.a6a8	d0 03		bne $a6ad			bne _found_char
.a6aa	c8		iny				iny
.a6ab	d0 f3		bne $a6a0			bne _DelimLoop
.a6ad					_found_char:
.a6ad	84 08		sty $08				sty toin+0		; Save index of where word starts
.a6af	20 98 ba	jsr $ba98			jsr Parse		; The real work is done by parse
.a6b2	20 89 b3	jsr $b389			jsr PopA		; pop u
.a6b5	85 16		sta $16				sta tmp2+0
.a6b7	20 b0 b3	jsr $b3b0			jsr PopTmp1		; pop addr
.a6ba	20 c4 c9	jsr $c9c4			jsr Here		; Return caddr
.a6bd	a5 16		lda $16				lda tmp2+0
.a6bf	a0 00		ldy #$00			ldy #0			; Save length of string
.a6c1	f0 03		beq $a6c6			beq _CopyStart
.a6c3	b1 14		lda ($14),y	_CopyLoop:	lda (tmp1),y
.a6c5	c8		iny				iny
.a6c6	20 a1 cc	jsr $cca1	_CopyStart:	jsr C_Comma_A
.a6c9	c4 16		cpy $16				cpy tmp2+0
.a6cb	90 f6		bcc $a6c3			bcc _CopyLoop
=50					CL	.var *-(WordListLink+wh_Xt)
=$a6cd					en = *	; remember here
>a699	32					.byte CL	;wh_CodeLength
.a6cd	60		rts				rts
>a6ce	28				L1:	.text "("	;  name of word as a string, ending at wh_NameLastChar
>a6cf	01					.byte (("("[-1]&7)<<5)+(*-L1)	;wh_HNL
>a6d0	16 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6d3	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42575					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6d4	a9 29		lda #$29	Paren:		lda #')'		; separator
.a6d6	20 9b ba	jsr $ba9b			jsr Parse_A		; Call parse.
.a6d9	4c bc c4	jmp $c4bc			jmp Two_drop		; Throw away the result.
=8					CL	.var *-(WordListLink+wh_Xt)
=$a6dc					en = *	; remember here
>a6d2	08					.byte CL	;wh_CodeLength
>a6dc	2e 28				L1:	.text ".("	;  name of word as a string, ending at wh_NameLastChar
>a6de	02					.byte ((".("[-1]&7)<<5)+(*-L1)	;wh_HNL
>a6df	4f a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6e2	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42590					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6e3	a9 29		lda #$29	Dot_paren:	lda #')'
.a6e5	20 9b ba	jsr $ba9b			jsr Parse_A
.a6e8	4c 8a cd	jmp $cd8a			jmp Type
=8					CL	.var *-(WordListLink+wh_Xt)
=$a6eb					en = *	; remember here
>a6e1	08					.byte CL	;wh_CodeLength
>a6eb	48 61 73 68			L1:	.text "Hash"	;  name of word as a string, ending at wh_NameLastChar
>a6ef	04					.byte (("Hash"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a6f0	5e a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6f2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6f3	08					.byte NN	;wh_Flags	dictionary flags
=42607					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6f4	20 89 b3	jsr $b389	Hash:		jsr PopA		; save length
.a6f7	85 16		sta $16				sta tmp2+0
.a6f9	b5 24		lda $24,x			lda DStack+0,x		; copy addr
.a6fb	b4 25		ldy $25,x			ldy DStack+1,x
.a6fd	85 14		sta $14				sta tmp1+0
.a6ff	84 15		sty $15				sty tmp1+1
.a701	a9 b3		lda #$b3			lda #$b3		; init hash
.a703	95 24		sta $24,x			sta DStack+0,x
.a705	95 25		sta $25,x			sta DStack+1,x
.a707	a0 00		ldy #$00			ldy #0			; for each char
.a709	f0 15		beq $a720			beq _next
.a70b	b1 14		lda ($14),y	_loop:		lda (tmp1),y		;   get char
.a70d	c9 61		cmp #$61			cmp #'a'		;   uppercase
.a70f	90 06		bcc $a717			bcc _3
.a711	c9 7b		cmp #$7b			cmp #'z'+1
.a713	b0 02		bcs $a717			bcs _3
.a715	29 df		and #$df			and #$df
.a717	16 24		asl $24,x	_3:		asl DStack+0,x		;   add to hash
.a719	36 25		rol $25,x			rol DStack+1,x
.a71b	75 24		adc $24,x			adc DStack+0,x
.a71d	95 24		sta $24,x			sta DStack+0,x
.a71f	c8		iny				iny
.a720	c4 16		cpy $16		_Next:		cpy tmp2+0
.a722	90 e7		bcc $a70b			bcc _loop
=48					CL	.var *-(WordListLink+wh_Xt)
=$a724					en = *	; remember here
>a6f2	30					.byte CL	;wh_CodeLength
.a724	60		rts				rts
>a725	45 6e 76 69 72 6f 6e 6d		L1:	.text "Environment?"	;  name of word as a string, ending at wh_NameLastChar
>a72d	65 6e 74 3f
>a731	ec					.byte (("Environment?"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a732	6f a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a734	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a735	08					.byte NN	;wh_Flags	dictionary flags
=42673					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a736					Environment_Q:
.a736	20 f4 a6	jsr $a6f4			jsr Hash		; ( hash )
.a739	a0 00		ldy #$00			ldy #0			; Y= table index
.a73b	f0 0a		beq $a747			beq _entry_test
.a73d	98		tya		_entry_next:	tya
.a73e	c0 30		cpy #$30			cpy #_table_dbl		; if double
.a740	90 02		bcc $a744			bcc +
.a742	69 01		adc #$01			adc #6-4-1		;   skip double
.a744	69 04		adc #$04	+		adc #4			;   skip single
.a746	a8		tay		_3:		tay
.a747	b9 7b a7	lda $a77b,y	_entry_test:	lda _Table+0,y		; match?
.a74a	f0 28		beq $a774			beq _notfound
.a74c	d5 24		cmp $24,x			cmp DStack+0,x
.a74e	d0 ed		bne $a73d			bne _entry_next
.a750	b9 7c a7	lda $a77c,y			lda _Table+1,y
.a753	d5 25		cmp $25,x			cmp DStack+1,x
.a755	d0 e6		bne $a73d			bne _entry_next
.a757	b9 7d a7	lda $a77d,y			lda _Table+2,y
.a75a	95 24		sta $24,x			sta DStack+0,x
.a75c	b9 7e a7	lda $a77e,y			lda _Table+3,y
.a75f	95 25		sta $25,x			sta DStack+1,x
.a761	c0 30		cpy #$30			cpy #_table_dbl		; single or double data?
.a763	90 0c		bcc $a771			bcc _single
.a765	ca		dex				dex			;  push 2nd cell
.a766	ca		dex				dex
.a767	b9 7f a7	lda $a77f,y			lda _Table+4,y
.a76a	95 24		sta $24,x			sta DStack+0,x
.a76c	b9 80 a7	lda $a780,y			lda _Table+5,y
.a76f	95 25		sta $25,x			sta DStack+1,x
.a771					_single:
.a771	4c 7f b7	jmp $b77f			jmp True		; return True
.a774					_notfound:
.a774	a9 00		lda #$00			lda #0			; return 0
.a776	95 24		sta $24,x			sta DStack+0,x
.a778	95 25		sta $25,x			sta DStack+1,x
.a77a	60		rts				rts
=69					CL	.var *-(WordListLink+wh_Xt)
=$a77b					en = *	; remember here
>a734	45					.byte CL	;wh_CodeLength
.a77b					_Table:
>a77b	5e e6 ff 7f				.word $e65e,$7fff	; "/COUNTED-STRING"
>a77f	be 79 ff 00				.word $79BE,$ff		; "/HOLD"
>a783	b9 3c 54 00				.word $3cb9,padoffset	; "/PAD"
>a787	8b 81 08 00				.word $818b,8		; "ADDRESS-UNIT-BITS"
>a78b	57 fc 00 00				.word $fc57,0		; "FLOORED"	we have symmetric)
>a78f	4f fb ff 00				.word $fb4f,$ff		; "MAX-CHAR"
>a793	56 7f ff 7f				.word $7f56,$7fff	; "MAX-N"
>a797	5d 7f ff ff				.word $7f5d,$ffff	; "MAX-U"
>a79b	38 ce 80 00				.word $ce38,$80		; "RETURN-STACK-CELLS"
>a79f	f2 c0 14 00				.word $c0f2,DStack0/2	; "STACK-CELLS"
>a7a3	36 e3 09 00				.word $e336,9		; "WORDLISTS"
>a7a7	01 99 0a 00				.word $9901,FDim	; "FLOATING-STACK"	n	yes	   If n = zero, floating-point numbers are
=48					_table_dbl = *-_Table	; These return a double-cell number
>a7ab	4c 7f ff ff ff 7f			.word $7f4c,$ffff,$7fff	; "MAX-D"
>a7b1	fe fe ff ff ff ff			.word $fefe,$ffff,$ffff	; "MAX-UD"
>a7b7	00					.byte 0		; end of list
>a7b8	42 65 6c 6c			L1:	.text "Bell"	;  name of word as a string, ending at wh_NameLastChar
>a7bc	84					.byte (("Bell"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a7bd	b1 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a7bf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a7c0	08					.byte NN	;wh_Flags	dictionary flags
=42812					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a7c1	a9 07		lda #$07	Bell:		lda #7		; ASCII value for BELL
.a7c3	4c 70 cd	jmp $cd70			jmp Emit_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$a7c6					en = *	; remember here
>a7bf	05					.byte CL	;wh_CodeLength
>a7c6	44 75 6d 70			L1:	.text "Dump"	;  name of word as a string, ending at wh_NameLastChar
>a7ca	04					.byte (("Dump"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a7cb	3c a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a7cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a7ce	18					.byte UF+NN	;wh_Flags	dictionary flags
=42826					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a7cf					Dump:
.a7cf	20 e4 b3	jsr $b3e4			jsr underflow_2
.a7d2	ca		dex				dex			; alloc work area
.a7d3	ca		dex				dex
.a7d4					_row:
.a7d4	20 e2 aa	jsr $aae2			jsr CR
.a7d7	b5 29		lda $29,x			lda DStack+5,x		; print address number
.a7d9	20 58 a8	jsr $a858			jsr C_Dot_Hex_A
.a7dc	b5 28		lda $28,x			lda DStack+4,x
.a7de	20 58 a8	jsr $a858			jsr C_Dot_Hex_A
.a7e1	20 7d cd	jsr $cd7d			jsr Space
.a7e4	20 7d cd	jsr $cd7d			jsr Space
.a7e7	a9 00		lda #$00			lda #0
.a7e9	95 24		sta $24,x			sta DStack+0,x
.a7eb					_loop:
.a7eb	b5 26		lda $26,x			lda DStack+2,x
.a7ed	15 27		ora $27,x			ora DStack+3,x
.a7ef	f0 36		beq $a827			beq _all_printed
.a7f1	a1 28		lda ($28,x)			lda (DStack+4,x)
.a7f3	20 58 a8	jsr $a858			jsr C_Dot_Hex_A
.a7f6	20 7d cd	jsr $cd7d			jsr Space
.a7f9	a1 28		lda ($28,x)			lda (DStack+4,x)
.a7fb	20 7f a8	jsr $a87f			jsr is_printable
.a7fe	b0 02		bcs $a802			bcs _printable
.a800	a9 2e		lda #$2e			lda #'.'		 ; Print dot if not printable
.a802					_printable:
.a802	b4 24		ldy $24,x			ldy DStack+0,x
.a804	91 00		sta ($00),y			sta (cp),y
.a806	c0 07		cpy #$07			cpy #7
.a808	d0 03		bne $a80d			bne +
.a80a	20 7d cd	jsr $cd7d			jsr Space
.a80d					+
.a80d	f6 28		inc $28,x			inc DStack+4,x
.a80f	d0 02		bne $a813			bne +
.a811	f6 29		inc $29,x			inc DStack+5,x
.a813					+
.a813	20 de c9	jsr $c9de			jsr NOS_One_Minus	; loop counter
.a816	f6 24		inc $24,x			inc DStack+0,x
.a818	b5 24		lda $24,x			lda DStack+0,x
.a81a	c9 10		cmp #$10			cmp #16
.a81c	90 cd		bcc $a7eb			bcc _loop		; next byte
.a81e	20 7d cd	jsr $cd7d			jsr Space
.a821	20 36 a8	jsr $a836			jsr dump_print_ascii
.a824	4c d4 a7	jmp $a7d4			jmp _row		; new row
.a827					_all_printed:
.a827	b5 24		lda $24,x			lda DStack+0,x
.a829	f0 06		beq $a831			beq _done
.a82b	20 7d cd	jsr $cd7d			jsr Space
.a82e	20 36 a8	jsr $a836			jsr dump_print_ascii
.a831					_done:
.a831	e8		inx				inx			; drop work area
.a832	e8		inx				inx
.a833	4c bc c4	jmp $c4bc			jmp Two_drop		; one byte less than 4x INX
=103					CL	.var *-(WordListLink+wh_Xt)
=$a836					en = *	; remember here
>a7cd	67					.byte CL	;wh_CodeLength
.a836					dump_print_ascii:
.a836	a0 00		ldy #$00			ldy #0
.a838					_loop:
.a838	b1 00		lda ($00),y			lda (cp),y
.a83a	20 70 cd	jsr $cd70			jsr Emit_A
.a83d	c8		iny				iny
.a83e	c0 08		cpy #$08			cpy #8
.a840	d0 03		bne $a845			bne +
.a842	20 7d cd	jsr $cd7d			jsr Space
.a845					+
.a845	98		tya				tya
.a846	d5 24		cmp $24,x			cmp DStack+0,x
.a848	90 ee		bcc $a838			bcc _loop
.a84a	60		rts				rts
>a84b	43 2e 48 65 78			L1:	.text "C.Hex"	;  name of word as a string, ending at wh_NameLastChar
>a850	05					.byte (("C.Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a851	4a a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a853	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a854	08					.byte NN	;wh_Flags	dictionary flags
=42960					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a855	20 89 b3	jsr $b389	C_Dot_Hex:	jsr PopA
.a858					C_Dot_Hex_A:
.a858	48		pha		                pha
.a859	4a		lsr a				lsr		; convert high nibble first
.a85a	4a		lsr a				lsr
.a85b	4a		lsr a				lsr
.a85c	4a		lsr a				lsr
.a85d	20 61 a8	jsr $a861			jsr _nibble_to_ascii
.a860	68		pla				pla
.a861					_nibble_to_ascii:
.a861	29 0f		and #$0f			and #$0F	; only use lower nibble
.a863	c9 0a		cmp #$0a			cmp #9+1
.a865	90 02		bcc $a869			bcc +
.a867	69 06		adc #$06			adc #6
.a869	69 30		adc #$30	+		adc #'0'
.a86b	4c 70 cd	jmp $cd70			jmp Emit_A
>a86e	2e 48 65 78			L1:	.text ".Hex"	;  name of word as a string, ending at wh_NameLastChar
>a872	04					.byte ((".Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a873	d0 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a875	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a876	08					.byte NN	;wh_Flags	dictionary flags
=42994					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a877	b5 25		lda $25,x	Dot_Hex:	lda DStack+1,x	; do hi byte
.a879	20 58 a8	jsr $a858			jsr C_Dot_Hex_A
.a87c	4c 55 a8	jmp $a855			jmp C_Dot_Hex	; do lo byte
.a87f					is_printable:
.a87f	c9 20		cmp #$20	                cmp #AscSP              ; $20
.a881	90 07		bcc $a88a	                bcc _done
.a883	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.a885	b0 02		bcs $a889	                bcs _failed
.a887	38		sec		                sec
.a888	60		rts		                rts
.a889	18		clc		_failed:	clc
.a88a	60		rts		_done:		rts
>a88b	2e 53				L1:	.text ".S"	;  name of word as a string, ending at wh_NameLastChar
>a88d	62					.byte ((".S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a88e	f2 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a890	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a891	08					.byte NN	;wh_Flags	dictionary flags
=43021					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a892					Dot_s:
.a892	a9 3c		lda #$3c			lda #'<'
.a894	20 70 cd	jsr $cd70			jsr Emit_A
.a897	20 f9 c1	jsr $c1f9			jsr Depth	; ( -- u )
.a89a	20 cb cb	jsr $cbcb			jsr print_u
.a89d	a9 3e		lda #$3e			lda #'>'
.a89f	20 70 cd	jsr $cd70			jsr Emit_A
.a8a2	20 7d cd	jsr $cd7d			jsr Space
.a8a5	a0 28		ldy #$28			ldy #DStack0		; for each cell on the stack
.a8a7	88		dey		_loop:		dey
.a8a8	88		dey				dey
.a8a9	86 14		stx $14				stx tmp1
.a8ab	c4 14		cpy $14				cpy tmp1
.a8ad	90 15		bcc $a8c4			bcc _done
.a8af	98		tya				tya			; save index
.a8b0	48		pha				pha
.a8b1	ca		dex				dex			; push stack[index]
.a8b2	ca		dex				dex
.a8b3	b9 24 00	lda $0024,y			lda DStack+0,y
.a8b6	95 24		sta $24,x			sta DStack+0,x
.a8b8	b9 25 00	lda $0025,y			lda DStack+1,y
.a8bb	95 25		sta $25,x			sta DStack+1,x
.a8bd	20 7e cb	jsr $cb7e			jsr Dot
.a8c0	68		pla				pla			; restore index
.a8c1	a8		tay				tay
.a8c2	d0 e3		bne $a8a7			bne _loop
.a8c4					_done:
=50					CL	.var *-(WordListLink+wh_Xt)
=$a8c4					en = *	; remember here
>a890	32					.byte CL	;wh_CodeLength
.a8c4	60		rts				rts
>a8c5	43 6f 6d 70 61 72 65		L1:	.text "Compare"	;  name of word as a string, ending at wh_NameLastChar
>a8cc	a7					.byte (("Compare"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a8cd	0d a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a8cf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a8d0	18					.byte UF+NN	;wh_Flags	dictionary flags
=43084					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a8d1					Compare:
.a8d1	20 ee b3	jsr $b3ee			jsr underflow_4
.a8d4	b5 24		lda $24,x			lda DStack+0,x		; tmp3+1= u2.lo
.a8d6	85 19		sta $19				sta tmp3+1
.a8d8	b5 26		lda $26,x			lda DStack+2,x		; tmp2= addr2
.a8da	b4 27		ldy $27,x			ldy DStack+3,x
.a8dc	85 16		sta $16				sta tmp2+0
.a8de	84 17		sty $17				sty tmp2+1
.a8e0	b5 28		lda $28,x			lda DStack+4,x		; tmp3+0= u1.lo
.a8e2	85 18		sta $18				sta tmp3+0
.a8e4	b5 2a		lda $2a,x			lda DStack+6,x		; tmp1= addr1
.a8e6	b4 2b		ldy $2b,x			ldy DStack+7,x
.a8e8	85 14		sta $14				sta tmp1+0
.a8ea	84 15		sty $15				sty tmp1+1
.a8ec	a0 00		ldy #$00			ldy #0		; for each char
.a8ee					_loop:
.a8ee	c4 18		cpy $18				cpy tmp3+0	; string1 empty?
.a8f0	f0 13		beq $a905			beq _str1
.a8f2					_L1:
.a8f2	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a8f4	f0 27		beq $a91d			beq _str2
.a8f6					_L2:
.a8f6	b1 14		lda ($14),y			lda (tmp1),y	; Are they different?
.a8f8	d1 16		cmp ($16),y			cmp (tmp2),y
.a8fa	d0 19		bne $a915			bne _neq
.a8fc	c8		iny				iny		; to next char
.a8fd	d0 ef		bne $a8ee			bne _loop
.a8ff	e6 15		inc $15				inc tmp1+1	; to next page
.a901	e6 17		inc $17				inc tmp2+1
.a903	d0 e9		bne $a8ee			bne _loop
.a905	d6 29		dec $29,x	_str1:		dec DStack+5,x	; string1 really empty?
.a907	10 e9		bpl $a8f2			bpl _L1
.a909	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a90b	d0 0a		bne $a917			bne _less
.a90d	b5 25		lda $25,x			lda DStack+1,x
.a90f	d0 06		bne $a917			bne _less
.a911	a9 00		lda #$00	_equal:		lda #0		; Return 0
.a913	f0 0e		beq $a923			beq _gt2
.a915	b0 0a		bcs $a921	_neq:		bcs _greater
.a917	a9 ff		lda #$ff	_less:		lda #$FF	; Return -1
.a919	95 2a		sta $2a,x			sta DStack+6,x
.a91b	d0 0a		bne $a927			bne _done
.a91d	d6 25		dec $25,x	_str2:		dec DStack+1,x	; is string2 empty?
.a91f	10 d5		bpl $a8f6			bpl _L2
.a921	a9 01		lda #$01	_greater:	lda #1		; Return 1
.a923	95 2a		sta $2a,x	_gt2:		sta DStack+6,x
.a925	a9 00		lda #$00			lda #0
.a927	95 2b		sta $2b,x	_done:		sta DStack+7,x
.a929	8a		txa				txa		; Remove all but the result from the stack.
.a92a	18		clc				clc
.a92b	69 06		adc #$06			adc #6
.a92d	aa		tax				tax
=93					CL	.var *-(WordListLink+wh_Xt)
=$a92e					en = *	; remember here
>a8cf	5d					.byte CL	;wh_CodeLength
.a92e	60		rts				rts
>a92f	53 65 61 72 63 68		L1:	.text "Search"	;  name of word as a string, ending at wh_NameLastChar
>a935	06					.byte (("Search"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a936	4c a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a938	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a939	18					.byte UF+NN	;wh_Flags	dictionary flags
=43189					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a93a					Search:
.a93a	20 ee b3	jsr $b3ee			jsr underflow_4
.a93d	b5 24		lda $24,x			lda DStack+0,x
.a93f	15 25		ora $25,x			ora DStack+1,x
.a941	d0 09		bne $a94c			bne _start_search
.a943	e8		inx				inx		; Drop u2
.a944	e8		inx				inx
.a945	a9 ff		lda #$ff			lda #$FF	; overwrite addr2 with a true flag
.a947	95 24		sta $24,x			sta DStack+0,x
.a949	95 25		sta $25,x			sta DStack+1,x
.a94b	60		rts				rts
.a94c					_start_search:
.a94c	20 b0 b7	jsr $b7b0			jsr Zero
.a94f					_search_loop:
.a94f	18		clc				clc
.a950	b5 24		lda $24,x			lda DStack+0,x
.a952	75 26		adc $26,x			adc DStack+2,x
.a954	85 14		sta $14				sta tmp1+0
.a956	b5 25		lda $25,x			lda DStack+1,x
.a958	75 27		adc $27,x			adc DStack+3,x
.a95a	85 15		sta $15				sta tmp1+1
.a95c	d5 2b		cmp $2b,x			cmp DStack+7,x
.a95e	90 13		bcc $a973			bcc _init_comparison ; Obviously less
.a960	d0 06		bne $a968			bne _not_found
.a962	b5 2a		lda $2a,x			lda DStack+6,x
.a964	c5 14		cmp $14				cmp tmp1
.a966	b0 0b		bcs $a973			bcs _init_comparison
.a968					_not_found:
.a968	e8		inx				inx		; Remove offset
.a969	e8		inx				inx
.a96a	e8		inx				inx		; Remove u2
.a96b	e8		inx				inx
.a96c	a9 00		lda #$00			lda #0
.a96e	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a false flag
.a970	95 25		sta $25,x			sta DStack+1,x
.a972	60		rts				rts
.a973					_init_comparison:
.a973	18		clc				clc
.a974	b5 2c		lda $2c,x			lda DStack+8,x
.a976	75 24		adc $24,x			adc DStack+0,x
.a978	85 14		sta $14				sta tmp1
.a97a	b5 2d		lda $2d,x			lda DStack+9,x
.a97c	75 25		adc $25,x			adc DStack+1,x
.a97e	85 15		sta $15				sta tmp1+1
.a980	b5 28		lda $28,x			lda DStack+4,x
.a982	85 16		sta $16				sta tmp2
.a984	b5 29		lda $29,x			lda DStack+5,x
.a986	85 17		sta $17				sta tmp2+1
.a988	b5 26		lda $26,x			lda DStack+2,x
.a98a	85 18		sta $18				sta tmp3+0
.a98c	b5 27		lda $27,x			lda DStack+3,x
.a98e	85 19		sta $19				sta tmp3+1
.a990					_comparison_loop:
.a990	a0 00		ldy #$00			ldy #0
.a992	b1 14		lda ($14),y			lda (tmp1),y
.a994	d1 16		cmp ($16),y			cmp (tmp2),y
.a996	f0 06		beq $a99e			beq _letters_match
.a998	20 f8 c9	jsr $c9f8			jsr One_plus
.a99b	4c 4f a9	jmp $a94f			jmp _search_loop
.a99e					_letters_match:
.a99e	e6 14		inc $14				inc tmp1
.a9a0	d0 02		bne $a9a4			bne +
.a9a2	e6 15		inc $15				inc tmp1+1
.a9a4					+
.a9a4	e6 16		inc $16				inc tmp2
.a9a6	d0 02		bne $a9aa			bne +
.a9a8	e6 17		inc $17				inc tmp2+1
.a9aa					+
.a9aa	a5 18		lda $18				lda tmp3
.a9ac	d0 02		bne $a9b0			bne +
.a9ae	c6 19		dec $19				dec tmp3+1
.a9b0					+
.a9b0	c6 18		dec $18				dec tmp3
.a9b2	a5 18		lda $18				lda tmp3
.a9b4	05 19		ora $19				ora tmp3+1
.a9b6	d0 d8		bne $a990			bne _comparison_loop ; Check the next letter
.a9b8	18		clc				clc
.a9b9	b5 24		lda $24,x			lda DStack+0,x
.a9bb	75 2c		adc $2c,x			adc DStack+8,x
.a9bd	95 2c		sta $2c,x			sta DStack+8,x
.a9bf	b5 25		lda $25,x			lda DStack+1,x
.a9c1	75 2d		adc $2d,x			adc DStack+9,x
.a9c3	95 2d		sta $2d,x			sta DStack+9,x
.a9c5	38		sec				sec
.a9c6	b5 2a		lda $2a,x			lda DStack+6,x
.a9c8	f5 24		sbc $24,x			sbc DStack+0,x
.a9ca	95 2a		sta $2a,x			sta DStack+6,x
.a9cc	b5 2b		lda $2b,x			lda DStack+7,x
.a9ce	f5 25		sbc $25,x			sbc DStack+1,x
.a9d0	95 2b		sta $2b,x			sta DStack+7,x
.a9d2	e8		inx				inx		; drop offset
.a9d3	e8		inx				inx
.a9d4	e8		inx				inx		; drop u2
.a9d5	e8		inx				inx
.a9d6	a9 ff		lda #$ff			lda #$FF
.a9d8	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a true flag.
.a9da	95 25		sta $25,x			sta DStack+1,x
=162					CL	.var *-(WordListLink+wh_Xt)
=$a9dc					en = *	; remember here
>a938	a2					.byte CL	;wh_CodeLength
.a9dc	60		rts				rts
>a9dd	4d 61 72 6b 65 72		L1:	.text "Marker"	;  name of word as a string, ending at wh_NameLastChar
>a9e3	46					.byte (("Marker"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a9e4	b5 a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9e6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9e7	0c					.byte IM+NN	;wh_Flags	dictionary flags
=43363					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9e8					Marker:
.a9e8	20 c4 c9	jsr $c9c4			jsr Here		; Save original CP, which
.a9eb	20 eb c0	jsr $c0eb			jsr Header_Build	; compile a word header, but don't link into wordlist
.a9ee	a0 aa		ldy #$aa			ldy #>_runtime		; compile JSR _runtime
.a9f0	a9 08		lda #$08			lda #<_runtime
.a9f2	20 e0 cc	jsr $cce0			jsr Jsr_Comma_YA
.a9f5	20 b8 cc	jsr $ccb8			jsr Comma		; Append original CP
.a9f8	a0 00		ldy #$00			ldy #0			; Start at CURRENT
.a9fa	b9 10 03	lda $0310,y	_loop:		lda CurrentV,y
.a9fd	20 a1 cc	jsr $cca1			jsr C_Comma_A
.aa00	c8		iny				iny
.aa01	c0 24		cpy #$24			cpy #MarkEnd-CurrentV	; One past the end of the search order.
.aa03	90 f5		bcc $a9fa			bcc _loop
.aa05	4c e0 c0	jmp $c0e0			jmp Header_Link		; link built header into current dictionary
=32					CL	.var *-(WordListLink+wh_Xt)
=$aa08					en = *	; remember here
>a9e6	20					.byte CL	;wh_CodeLength
.aa08					_runtime:
.aa08	68		pla				pla		; Pop the RTS address off the stack
.aa09	85 14		sta $14				sta tmp1+0
.aa0b	68		pla				pla
.aa0c	85 15		sta $15				sta tmp1+1
.aa0e	a0 01		ldy #$01			ldy #1		; start just aftet JSR _runtime
.aa10	b1 14		lda ($14),y			lda (tmp1),y	; CP was stored first
.aa12	85 00		sta $00				sta cp+0
.aa14	c8		iny				iny
.aa15	b1 14		lda ($14),y			lda (tmp1),y
.aa17	85 01		sta $01				sta cp+1
.aa19	c8		iny				iny
.aa1a					_rloop:
.aa1a	b1 14		lda ($14),y			lda (tmp1),y
.aa1c	99 0d 03	sta $030d,y			sta CurrentV-2-1,y
.aa1f	c8		iny				iny
.aa20	c0 27		cpy #$27			cpy #MarkEnd-CurrentV+2+1 ; One past the end of the search order.
.aa22	90 f6		bcc $aa1a			bcc _rloop
.aa24	60		rts				rts
>aa25	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
>aa2a	65					.byte (("Words"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aa2b	63 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa2d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa2e	08					.byte NN	;wh_Flags	dictionary flags
=43434					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa2f					Words:
.aa2f	a9 ff		lda #$ff			lda #$ff
.aa31	20 a1 b7	jsr $b7a1			jsr PushZA		; Alloc space for line size & wordlist #
.aa34	ca		dex				dex			; Alloc space for a nt
.aa35	ca		dex				dex
.aa36					_wordlist_next:
.aa36	20 e2 aa	jsr $aae2			jsr CR			; start wordlist on new line
.aa39	f6 26		inc $26,x			inc DStack+2,x		; step to next search wordlist
.aa3b	b4 26		ldy $26,x			ldy DStack+2,x		; Y= wordlist index
.aa3d	cc 2a 03	cpy $032a			cpy Num_OrderV
.aa40	b0 44		bcs $aa86			bcs _wordslist_done	; ran out of search wordlist entries?
.aa42	b9 2b 03	lda $032b,y			lda Search_OrderV,y	; A= SEARCH-ORDER[Y]	Get the current wordlist id
.aa45	0a		asl a				asl			; TOS= WORDLISTS[A]
.aa46	a8		tay				tay
.aa47	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.aa4a	95 24		sta $24,x			sta DStack+0,x
.aa4c	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.aa4f	95 25		sta $25,x			sta DStack+1,x
.aa51	f0 e3		beq $aa36			beq _wordlist_next	; end of list?
.aa53					_word_loop:
.aa53	20 02 cf	jsr $cf02			jsr Dup			; ( wordlist# nt nt )
.aa56	20 af bd	jsr $bdaf			jsr Name_To_String	; ( wordlist# nt addr u )
.aa59	b5 2b		lda $2b,x			lda DStack+7,x
.aa5b	38		sec				sec			; don't forget the space between words
.aa5c	75 24		adc $24,x			adc DStack+0,x
.aa5e	c9 4e		cmp #$4e			cmp #MAX_LINE_LENGTH-1
.aa60	90 05		bcc $aa67			bcc +
.aa62	20 e2 aa	jsr $aae2			jsr CR
.aa65	b5 24		lda $24,x			lda DStack+0,x		; After going to next line, start
.aa67	95 2b		sta $2b,x	+		sta DStack+7,x
.aa69	20 8a cd	jsr $cd8a			jsr Type		; ( wordlist# nt )
.aa6c	20 7d cd	jsr $cd7d			jsr Space
.aa6f	b5 24		lda $24,x			lda DStack+0,x
.aa71	85 14		sta $14				sta tmp1+0
.aa73	b5 25		lda $25,x			lda DStack+1,x
.aa75	85 15		sta $15				sta tmp1+1
.aa77	a0 81		ldy #$81			ldy #wh_WordListLink	; get next word nt
.aa79	b1 14		lda ($14),y			lda (tmp1),y
.aa7b	95 24		sta $24,x			sta DStack+0,x
.aa7d	c8		iny				iny
.aa7e	b1 14		lda ($14),y			lda (tmp1),y
.aa80	95 25		sta $25,x			sta DStack+1,x
.aa82	d0 cf		bne $aa53			bne _word_loop		; end of list?
.aa84	f0 b0		beq $aa36			beq _wordlist_next
.aa86					_wordslist_done:
.aa86	4c bc c4	jmp $c4bc			jmp Two_Drop
=90					CL	.var *-(WordListLink+wh_Xt)
=$aa89					en = *	; remember here
>aa2d	5a					.byte CL	;wh_CodeLength
>aa89	57 6f 72 64 53 69 7a 65		L1:	.text "WordSize"	;  name of word as a string, ending at wh_NameLastChar
>aa91	a8					.byte (("WordSize"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aa92	aa a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa94	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa95	08					.byte NN	;wh_Flags	dictionary flags
=43537					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa96	20 b0 b3	jsr $b3b0	WordSize:	jsr PopTmp1
.aa99	a0 83		ldy #$83			ldy #Wh_CodeLength
.aa9b	b1 14		lda ($14),y			lda (tmp1),y
.aa9d	4c a1 b7	jmp $b7a1			jmp PushZA
=10					CL	.var *-(WordListLink+wh_Xt)
=$aaa0					en = *	; remember here
>aa94	0a					.byte CL	;wh_CodeLength
>aaa0	41 6c 69 67 6e 65 64		L1:	.text "Aligned"	;  name of word as a string, ending at wh_NameLastChar
>aaa7	87					.byte (("Aligned"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aaa8	11 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aaaa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aaab	00					.byte 0	;wh_Flags	dictionary flags
=43559					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aaac					Aligned:
=0					CL	.var *-(WordListLink+wh_Xt)
=$aaac					en = *	; remember here
>aaaa	00					.byte CL	;wh_CodeLength
.aaac	60		rts				rts
>aaad	41 6c 69 67 6e			L1:	.text "Align"	;  name of word as a string, ending at wh_NameLastChar
>aab2	c5					.byte (("Align"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aab3	27 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aab5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aab6	00					.byte 0	;wh_Flags	dictionary flags
=43570					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aab7					Align:
=0					CL	.var *-(WordListLink+wh_Xt)
=$aab7					en = *	; remember here
>aab5	00					.byte CL	;wh_CodeLength
.aab7	60		rts				rts
>aab8	4f 75 74 70 75 74		L1:	.text "Output"	;  name of word as a string, ending at wh_NameLastChar
>aabe	86					.byte (("Output"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aabf	32 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aac1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aac2	08					.byte NN	;wh_Flags	dictionary flags
=43582					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aac3					xt_output:
.aac3	a0 03		ldy #$03			ldy #>output
.aac5	a9 06		lda #$06			lda #<output
.aac7	4c 5f b7	jmp $b75f			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$aaca					en = *	; remember here
>aac1	07					.byte CL	;wh_CodeLength
>aaca	49 6e 70 75 74			L1:	.text "Input"	;  name of word as a string, ending at wh_NameLastChar
>aacf	85					.byte (("Input"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aad0	3e aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aad2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aad3	08					.byte NN	;wh_Flags	dictionary flags
=43599					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aad4	a0 03		ldy #$03	xt_input:	ldy #>input
.aad6	a9 08		lda #$08			lda #<input
.aad8	4c 5f b7	jmp $b75f			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$aadb					en = *	; remember here
>aad2	07					.byte CL	;wh_CodeLength
>aadb	43 52				L1:	.text "CR"	;  name of word as a string, ending at wh_NameLastChar
>aadd	42					.byte (("CR"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aade	4f aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aae0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aae1	08					.byte NN	;wh_Flags	dictionary flags
=43613					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aae2					CR:
.aae2	a9 0a		lda #$0a			lda #AscLF
.aae4	20 70 cd	jsr $cd70			jsr Emit_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$aae7					en = *	; remember here
>aae0	05					.byte CL	;wh_CodeLength
.aae7	60		rts				rts
>aae8	50 61 67 65			L1:	.text "Page"	;  name of word as a string, ending at wh_NameLastChar
>aaec	a4					.byte (("Page"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aaed	5d aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aaef	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aaf0	08					.byte NN	;wh_Flags	dictionary flags
=43628					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aaf1	20 80 b8	jsr $b880	Page:		jsr SLiteral_Runtime
.aaf4	4c 01 ab	jmp $ab01			  jmp +
>aaf7	1b 5b 32 4a					  .text AscESC,"[2J"	; ANSI clear screen
>aafb	1b 5b 31 3b 31 48				  .text AscESC,"[1;1H"	; move cursor to top left of screen
.ab01	4c 8a cd	jmp $cd8a	+		jmp Type
=19					CL	.var *-(WordListLink+wh_Xt)
=$ab04					en = *	; remember here
>aaef	13					.byte CL	;wh_CodeLength
>ab04	41 74 2d 58 59			L1:	.text "At-XY"	;  name of word as a string, ending at wh_NameLastChar
>ab09	25					.byte (("At-XY"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab0a	6c aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab0c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab0d	18					.byte UF+NN	;wh_Flags	dictionary flags
=43657					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab0e					At_XY:
.ab0e	20 e4 b3	jsr $b3e4			jsr underflow_2
.ab11	ad 00 03	lda $0300			lda base	; Save the BASE
.ab14	48		pha				pha
.ab15	20 5e b1	jsr $b15e			jsr Decimal	; ANSI escape code values need to be in decimal.
.ab18	a9 1b		lda #$1b			lda #AscESC
.ab1a	20 70 cd	jsr $cd70			jsr Emit_A
.ab1d	a9 5b		lda #$5b			lda #'['
.ab1f	20 70 cd	jsr $cd70			jsr Emit_A
.ab22	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.ab24	20 cb cb	jsr $cbcb			jsr print_u
.ab27	a9 3b		lda #$3b			lda #';'
.ab29	20 70 cd	jsr $cd70			jsr Emit_A
.ab2c	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.ab2e	20 cb cb	jsr $cbcb			jsr print_u
.ab31	a9 48		lda #$48			lda #'H'
.ab33	20 70 cd	jsr $cd70			jsr Emit_A
.ab36	68		pla				pla		; Restore the base
.ab37	8d 00 03	sta $0300			sta base
=44					CL	.var *-(WordListLink+wh_Xt)
=$ab3a					en = *	; remember here
>ab0c	2c					.byte CL	;wh_CodeLength
.ab3a	60		rts				rts
>ab3b	50 61 64			L1:	.text "Pad"	;  name of word as a string, ending at wh_NameLastChar
>ab3e	83					.byte (("Pad"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab3f	89 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab41	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab42	00					.byte 0	;wh_Flags	dictionary flags
=43710					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab43	ca		dex		Pad:		dex		; push cp+PadOffset
.ab44	ca		dex				dex
.ab45	18		clc				clc
.ab46	a5 00		lda $00				lda cp+0
.ab48	69 54		adc #$54			adc #PadOffset
.ab4a	95 24		sta $24,x			sta DStack+0,x
.ab4c	a5 01		lda $01				lda cp+1
.ab4e	69 00		adc #$00			adc #0
.ab50	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$ab52					en = *	; remember here
>ab41	0f					.byte CL	;wh_CodeLength
.ab52	60		rts				rts
>ab53	3c 23				L1:	.text "<#"	;  name of word as a string, ending at wh_NameLastChar
>ab55	62					.byte (("<#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab56	be aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab58	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab59	00					.byte 0	;wh_Flags	dictionary flags
=43733					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab5a					Less_Number_Sign:
.ab5a	a9 54		lda #$54			lda #PadOffset		; init hold buffer index
.ab5c	8d 34 03	sta $0334			sta ToHold
=5					CL	.var *-(WordListLink+wh_Xt)
=$ab5f					en = *	; remember here
>ab58	05					.byte CL	;wh_CodeLength
.ab5f	60		rts				rts
>ab60	23 3e				L1:	.text "#>"	;  name of word as a string, ending at wh_NameLastChar
>ab62	c2					.byte (("#>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab63	d5 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab65	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab66	10					.byte UF	;wh_Flags	dictionary flags
=43746					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab67					Number_Sign_Greater:
.ab67	20 e4 b3	jsr $b3e4			jsr underflow_2		; double number
.ab6a	18		clc				clc			; addr= cp + ToHold
.ab6b	a5 00		lda $00				lda cp+0
.ab6d	6d 34 03	adc $0334			adc ToHold
.ab70	95 26		sta $26,x			sta DStack+2,x
.ab72	a5 01		lda $01				lda cp+1
.ab74	69 00		adc #$00			adc #0
.ab76	95 27		sta $27,x			sta DStack+3,x
.ab78	38		sec				sec			; u= PadOffset - ToHold
.ab79	a9 54		lda #$54			lda #PadOffset
.ab7b	ed 34 03	sbc $0334			sbc ToHold
.ab7e	95 24		sta $24,x			sta DStack+0,x
.ab80	a9 00		lda #$00			lda #0
.ab82	95 25		sta $25,x			sta DStack+1,x
=29					CL	.var *-(WordListLink+wh_Xt)
=$ab84					en = *	; remember here
>ab65	1d					.byte CL	;wh_CodeLength
.ab84	60		rts				rts
>ab85	48 6f 6c 64			L1:	.text "Hold"	;  name of word as a string, ending at wh_NameLastChar
>ab89	84					.byte (("Hold"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab8a	e2 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab8c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab8d	00					.byte 0	;wh_Flags	dictionary flags
=43785					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab8e	20 89 b3	jsr $b389	Hold:		jsr PopA
.ab91	ce 34 03	dec $0334	Hold_A:		dec ToHold
.ab94	ac 34 03	ldy $0334			ldy ToHold
.ab97	91 00		sta ($00),y			sta (cp),y
=11					CL	.var *-(WordListLink+wh_Xt)
=$ab99					en = *	; remember here
>ab8c	0b					.byte CL	;wh_CodeLength
.ab99	60		rts				rts
>ab9a	23				L1:	.text "#"	;  name of word as a string, ending at wh_NameLastChar
>ab9b	61					.byte (("#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab9c	09 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab9e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab9f	18					.byte UF+NN	;wh_Flags	dictionary flags
=43803					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aba0					Number_Sign:
.aba0	20 e4 b3	jsr $b3e4			jsr underflow_2		; double number
.aba3	a9 00		lda #$00			lda #0			;   init remainder
.aba5	18		clc				clc
.aba6	a0 21		ldy #$21			ldy #32+1		;   for each bit
.aba8					_11:
.aba8	2a		rol a				rol a			;   shift remainder
.aba9	cd 00 03	cmp $0300			cmp base		;   will it fit?
.abac	90 03		bcc $abb1			bcc _27
.abae	ed 00 03	sbc $0300			sbc base
.abb1					_27:
.abb1	36 26		rol $26,x			rol DStack+2,x		;   shift ud
.abb3	36 27		rol $27,x			rol DStack+3,x
.abb5	36 24		rol $24,x			rol DStack+0,x
.abb7	36 25		rol $25,x			rol DStack+1,x
.abb9	88		dey				dey
.abba	d0 ec		bne $aba8			bne _11
.abbc	c9 0a		cmp #$0a			cmp #9+1		; alternatively this could use s_abc_upper
.abbe	90 02		bcc $abc2			bcc +
.abc0	69 06		adc #$06			adc #7-1
.abc2	69 30		adc #$30	+		adc #'0'
.abc4	d0 cb		bne $ab91			bne Hold_A
=38					CL	.var *-(WordListLink+wh_Xt)
=$abc6					en = *	; remember here
>ab9e	26					.byte CL	;wh_CodeLength
>abc6	23 53				L1:	.text "#S"	;  name of word as a string, ending at wh_NameLastChar
>abc8	62					.byte (("#S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>abc9	1b ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abcb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abcc	00					.byte 0	;wh_Flags	dictionary flags
=43848					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abcd					Number_Sign_S:
.abcd					_loop:
.abcd	20 a0 ab	jsr $aba0			jsr Number_sign	; convert a single number ("#")
.abd0	b5 24		lda $24,x			lda DStack+0,x	; stop when double-celled number in TOS is zero
.abd2	15 25		ora $25,x			ora DStack+1,x
.abd4	15 26		ora $26,x			ora DStack+2,x
.abd6	15 27		ora $27,x			ora DStack+3,x
.abd8	d0 f3		bne $abcd			bne _loop
=13					CL	.var *-(WordListLink+wh_Xt)
=$abda					en = *	; remember here
>abcb	0d					.byte CL	;wh_CodeLength
.abda	60		rts				rts
>abdb	53 69 67 6e			L1:	.text "Sign"	;  name of word as a string, ending at wh_NameLastChar
>abdf	c4					.byte (("Sign"[-1]&7)<<5)+(*-L1)	;wh_HNL
>abe0	48 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abe2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abe3	08					.byte NN	;wh_Flags	dictionary flags
=43871					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abe4	20 a5 b3	jsr $b3a5	Sign:		jsr PopYA
.abe7	98		tya				tya		; test MSB of TOS
.abe8					Sign_P:
.abe8	30 01		bmi $abeb			bmi _minus
.abea	60		rts				rts
.abeb	a9 2d		lda #$2d	_minus:		lda #'-'	; add minus sign
.abed	d0 a2		bne $ab91			bne hold_a
=11					CL	.var *-(WordListLink+wh_Xt)
=$abef					en = *	; remember here
>abe2	0b					.byte CL	;wh_CodeLength
>abef	43 6c 65 61 76 65		L1:	.text "Cleave"	;  name of word as a string, ending at wh_NameLastChar
>abf5	a6					.byte (("Cleave"[-1]&7)<<5)+(*-L1)	;wh_HNL
>abf6	5f ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abf8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abf9	18					.byte UF+NN	;wh_Flags	dictionary flags
=43893					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abfa					Cleave:
.abfa	20 e4 b3	jsr $b3e4			jsr underflow_2
.abfd	20 69 c4	jsr $c469			jsr Minus_leading	; -LEADING ( addr u )
.ac00	20 ae c3	jsr $c3ae			jsr Input_To_R	; save old imput state
.ac03	b5 24		lda $24,x			lda DStack+0,x	; u is new ciblen
.ac05	85 06		sta $06				sta ciblen
.ac07	b5 25		lda $25,x			lda DStack+1,x
.ac09	85 07		sta $07				sta ciblen+1
.ac0b	b5 26		lda $26,x			lda DStack+2,x	; addr is new cib
.ac0d	85 04		sta $04				sta cib
.ac0f	b5 27		lda $27,x			lda DStack+3,x
.ac11	85 05		sta $05				sta cib+1
.ac13	a9 00		lda #$00			lda #0
.ac15	85 08		sta $08				sta toin	; >IN pointer is zero
.ac17	85 09		sta $09				sta toin+1
.ac19	20 50 ba	jsr $ba50			jsr parse_name	; ( addr u addr-s u-s )
.ac1c	b5 24		lda $24,x			lda DStack+0,x
.ac1e	15 25		ora $25,x			ora DStack+1,x
.ac20	f0 23		beq $ac45			beq _done
.ac22	38		sec				sec
.ac23	b5 28		lda $28,x			lda DStack+4,x	; LSB of original u
.ac25	f5 24		sbc $24,x			sbc DStack+0,x
.ac27	95 28		sta $28,x			sta DStack+4,x
.ac29	b5 29		lda $29,x			lda DStack+5,x	; MSB of original u
.ac2b	f5 25		sbc $25,x			sbc DStack+1,x
.ac2d	95 29		sta $29,x			sta DStack+5,x
.ac2f	18		clc				clc
.ac30	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of original addr
.ac32	75 24		adc $24,x			adc DStack+0,x
.ac34	95 2a		sta $2a,x			sta DStack+6,x
.ac36	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of original addr
.ac38	75 25		adc $25,x			adc DStack+1,x
.ac3a	95 2b		sta $2b,x			sta DStack+7,x
.ac3c	20 ce c4	jsr $c4ce			jsr Two_swap		; ( addr-s u-s addr u )
.ac3f	20 69 c4	jsr $c469			jsr Minus_leading
.ac42	20 ce c4	jsr $c4ce			jsr Two_swap		; ( addr u addr-s u-s )
.ac45					_done:
.ac45	20 d0 c3	jsr $c3d0			jsr R_To_Input
=78					CL	.var *-(WordListLink+wh_Xt)
=$ac48					en = *	; remember here
>abf8	4e					.byte CL	;wh_CodeLength
.ac48	60		rts				rts
>ac49	48 65 78 53 74 6f 72 65		L1:	.text "HexStore"	;  name of word as a string, ending at wh_NameLastChar
>ac51	a8					.byte (("HexStore"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ac52	75 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac54	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac55	18					.byte UF+NN	;wh_Flags	dictionary flags
=43985					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac56					Hexstore:
.ac56	20 e9 b3	jsr $b3e9			jsr underflow_3
.ac59	20 02 cf	jsr $cf02			jsr Dup		; Save copy of original address
.ac5c	20 cf c5	jsr $c5cf			jsr Two_to_r		; ( addr1 u1 ) ( R: addr2 addr2 )
.ac5f					_loop:
.ac5f	b5 24		lda $24,x			lda DStack+0,x
.ac61	15 25		ora $25,x			ora DStack+1,x
.ac63	f0 37		beq $ac9c			beq _done
.ac65	20 fa ab	jsr $abfa			jsr Cleave		; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.ac68	20 cf c5	jsr $c5cf			jsr Two_to_r
.ac6b	20 b0 b7	jsr $b7b0			jsr Zero
.ac6e	20 b0 b7	jsr $b7b0			jsr Zero
.ac71	20 aa c5	jsr $c5aa			jsr Two_r_from	; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.ac74	20 df af	jsr $afdf			jsr To_Number	; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.ac77	b5 24		lda $24,x			lda DStack+0,x
.ac79	15 25		ora $25,x			ora DStack+1,x
.ac7b	d0 18		bne $ac95			bne _have_chars_left
.ac7d	20 bc c4	jsr $c4bc			jsr Two_drop		; ( addr1 u1 n n ) ( R: addr2 addr2 )
.ac80	20 e9 bf	jsr $bfe9			jsr D_To_S		; ( addr1 u1 n ) ( R: addr2 addr2 )
.ac83	20 c2 ce	jsr $cec2			jsr R_Fetch		; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.ac86	20 18 cd	jsr $cd18			jsr C_Store		; ( addr1 u1 ) ( R: addr2 addr2 )
.ac89	20 a6 ce	jsr $cea6			jsr R_From		; R>
.ac8c	20 f8 c9	jsr $c9f8			jsr One_plus		; 1+
.ac8f	20 87 ce	jsr $ce87			jsr To_R		; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.ac92	4c 5f ac	jmp $ac5f			jmp _loop
.ac95					_have_chars_left:
.ac95	8a		txa				txa
.ac96	18		clc				clc
.ac97	69 08		adc #$08			adc #8
.ac99	aa		tax				tax
.ac9a	d0 c3		bne $ac5f			bne _loop
.ac9c					_done:
.ac9c	e8		inx				inx
.ac9d	e8		inx				inx
.ac9e	e8		inx				inx
.ac9f	e8		inx				inx			; 2DROP
.aca0	20 aa c5	jsr $c5aa			jsr Two_r_from		; ( addr2+n addr2 )
.aca3	20 20 cf	jsr $cf20			jsr Swap
.aca6	4c 65 cb	jmp $cb65			jmp Minus		; ( n )
=83					CL	.var *-(WordListLink+wh_Xt)
=$aca9					en = *	; remember here
>ac54	53					.byte CL	;wh_CodeLength
>aca9	57 69 74 68 69 6e		L1:	.text "Within"	;  name of word as a string, ending at wh_NameLastChar
>acaf	c6					.byte (("Within"[-1]&7)<<5)+(*-L1)	;wh_HNL
>acb0	d1 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>acb2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acb3	18					.byte UF+NN	;wh_Flags	dictionary flags
=44079					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.acb4					Within:
.acb4	20 e9 b3	jsr $b3e9			jsr underflow_3
.acb7	20 d9 ce	jsr $ced9			jsr Over
.acba	20 65 cb	jsr $cb65			jsr Minus
.acbd	20 87 ce	jsr $ce87			jsr To_R
.acc0	20 65 cb	jsr $cb65			jsr Minus
.acc3	20 a6 ce	jsr $cea6			jsr R_From
.acc6	4c 13 c8	jmp $c813			jmp U_Less_Than
=21					CL	.var *-(WordListLink+wh_Xt)
=$acc9					en = *	; remember here
>acb2	15					.byte CL	;wh_CodeLength
>acc9	5c				L1:	.text "\"	;  name of word as a string, ending at wh_NameLastChar
>acca	81					.byte (("\"[-1]&7)<<5)+(*-L1)	;wh_HNL
>accb	2f ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>accd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acce	0c					.byte IM+NN	;wh_Flags	dictionary flags
=44106					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.accf					Backslash:
.accf	ad 0c 03	lda $030c			lda BlkV+0		; interpreting a block?
.acd2	0d 0d 03	ora $030d			ora BlkV+1
.acd5	f0 16		beq $aced			beq _not_block
.acd7	a5 08		lda $08				lda toin+0
.acd9	29 3f		and #$3f			and #$3F
.acdb	c9 02		cmp #$02			cmp #2
.acdd	90 16		bcc $acf5			bcc _rts
.acdf	a5 08		lda $08		                lda toin+0		; Move toin to next multiple of 64.
.ace1	29 c0		and #$c0	                and #$C0        	;   Clear lower bits to move to beginning of line.
.ace3	18		clc		                clc             	;   Add $40 (64 decimal) to move to next line.
.ace4	69 40		adc #$40	                adc #$40
.ace6	85 08		sta $08		                sta toin+0
.ace8	90 0b		bcc $acf5	                bcc _rts
.acea	e6 09		inc $09		                inc toin+1
.acec	60		rts				rts
.aced					_not_block:
.aced	a5 06		lda $06		                lda ciblen+0
.acef	85 08		sta $08		                sta toin+0
.acf1	a5 07		lda $07		                lda ciblen+1
.acf3	85 09		sta $09		                sta toin+1
=38					CL	.var *-(WordListLink+wh_Xt)
=$acf5					en = *	; remember here
>accd	26					.byte CL	;wh_CodeLength
.acf5	60		rts		_rts:		rts
>acf6	4d 6f 76 65			L1:	.text "Move"	;  name of word as a string, ending at wh_NameLastChar
>acfa	a4					.byte (("Move"[-1]&7)<<5)+(*-L1)	;wh_HNL
>acfb	4a ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>acfd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acfe	18					.byte NN+UF	;wh_Flags	dictionary flags
=44154					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.acff					Move:
.acff	b5 27		lda $27,x			lda DStack+3,x		; MSB of addr2
.ad01	d5 29		cmp $29,x			cmp DStack+5,x		; MSB of addr1
.ad03	d0 04		bne $ad09			bne _ne
.ad05	b5 26		lda $26,x			lda DStack+2,x		; LSB of addr2
.ad07	d5 28		cmp $28,x			cmp DStack+4,x		; LSB of addr1
.ad09	90 5a		bcc $ad65	_ne:		bcc CMove
.ad0b	d0 11		bne $ad1e			bne CMove_up
.ad0d	8a		txa		ThreeDrop:	txa		; drop three entries from Data Stack
.ad0e	18		clc				clc
.ad0f	69 06		adc #$06			adc #6
.ad11	aa		tax				tax
=19					CL	.var *-(WordListLink+wh_Xt)
=$ad12					en = *	; remember here
>acfd	13					.byte CL	;wh_CodeLength
.ad12	60		rts				rts
>ad13	43 4d 6f 76 65 3e		L1:	.text "CMove>"	;  name of word as a string, ending at wh_NameLastChar
>ad19	c6					.byte (("CMove>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ad1a	7a ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad1c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad1d	18					.byte UF+NN	;wh_Flags	dictionary flags
=44185					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad1e					CMove_up:
.ad1e	20 e9 b3	jsr $b3e9			jsr underflow_3
.ad21	b5 26		lda $26,x			lda DStack+2,x
.ad23	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.ad25	b5 27		lda $27,x			lda DStack+3,x
.ad27	18		clc				clc
.ad28	75 25		adc $25,x			adc DStack+1,x
.ad2a	85 17		sta $17				sta tmp2+1	; point to last page of destination
.ad2c	b5 28		lda $28,x			lda DStack+4,x
.ad2e	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.ad30	b5 29		lda $29,x			lda DStack+5,x
.ad32	18		clc				clc
.ad33	75 25		adc $25,x			adc DStack+1,x
.ad35	85 15		sta $15				sta tmp1+1	; point to last page of source
.ad37	f6 25		inc $25,x			inc DStack+1,x	; allows us to use bne with dec DStack+1,x below
.ad39	b4 24		ldy $24,x			ldy DStack+0,x	; length of last page
.ad3b	f0 10		beq $ad4d			beq _nopartial
.ad3d					_outerloop:
.ad3d	88		dey				dey
.ad3e	f0 07		beq $ad47			beq _finishpage
.ad40					_innerloop:
.ad40	b1 14		lda ($14),y			lda (tmp1),y
.ad42	91 16		sta ($16),y			sta (tmp2),y
.ad44	88		dey				dey
.ad45	d0 f9		bne $ad40			bne _innerloop
.ad47					_finishpage:
.ad47	a0 00		ldy #$00			ldy #0
.ad49	b1 14		lda ($14),y			lda (tmp1),y	; handle y = 0 separately
.ad4b	91 16		sta ($16),y			sta (tmp2),y
.ad4d					_nopartial:
.ad4d	c6 15		dec $15				dec tmp1+1	; back up to previous pages
.ad4f	c6 17		dec $17				dec tmp2+1
.ad51	d6 25		dec $25,x			dec DStack+1,x
.ad53	d0 e8		bne $ad3d			bne _outerloop
.ad55					_done:
.ad55	4c 0d ad	jmp $ad0d			jmp ThreeDrop	; clear up the stack and leave
=58					CL	.var *-(WordListLink+wh_Xt)
=$ad58					en = *	; remember here
>ad1c	3a					.byte CL	;wh_CodeLength
.ad58	4c f3 b3	jmp $b3f3	Throw_Stack_14: jmp Throw_Stack
>ad5b	43 4d 6f 76 65			L1:	.text "CMove"	;  name of word as a string, ending at wh_NameLastChar
>ad60	a5					.byte (("CMove"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ad61	99 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad63	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad64	18					.byte UF+NN	;wh_Flags	dictionary flags
=44256					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad65					CMove:
.ad65	20 e9 b3	jsr $b3e9			jsr underflow_3
.ad68	b5 26		lda $26,x			lda DStack+2,x
.ad6a	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.ad6c	b5 27		lda $27,x			lda DStack+3,x
.ad6e	85 17		sta $17				sta tmp2+1
.ad70	b5 28		lda $28,x			lda DStack+4,x
.ad72	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.ad74	b5 29		lda $29,x			lda DStack+5,x
.ad76	85 15		sta $15				sta tmp1+1
.ad78	a0 00		ldy #$00			ldy #0
.ad7a	b5 25		lda $25,x			lda DStack+1,x	; number of whole pages to move
.ad7c	f0 0f		beq $ad8d			beq _dopartial
.ad7e					_page:
.ad7e	b1 14		lda ($14),y			lda (tmp1),y
.ad80	91 16		sta ($16),y			sta (tmp2),y
.ad82	c8		iny				iny
.ad83	d0 f9		bne $ad7e			bne _page
.ad85	e6 15		inc $15				inc tmp1+1
.ad87	e6 17		inc $17				inc tmp2+1
.ad89	d6 25		dec $25,x			dec DStack+1,x
.ad8b	d0 f1		bne $ad7e			bne _page
.ad8d					_dopartial:
.ad8d	b5 24		lda $24,x			lda DStack+0,x	; length of last page
.ad8f	f0 09		beq $ad9a			beq _done
.ad91					_partial:
.ad91	b1 14		lda ($14),y			lda (tmp1),y
.ad93	91 16		sta ($16),y			sta (tmp2),y
.ad95	c8		iny				iny
.ad96	d6 24		dec $24,x			dec DStack+0,x
.ad98	d0 f7		bne $ad91			bne _partial
.ad9a	4c 0d ad	jmp $ad0d	_done:		jmp ThreeDrop	; clear the stack
=56					CL	.var *-(WordListLink+wh_Xt)
=$ad9d					en = *	; remember here
>ad63	38					.byte CL	;wh_CodeLength
>ad9d	55 4d 2a			L1:	.text "UM*"	;  name of word as a string, ending at wh_NameLastChar
>ada0	43					.byte (("UM*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ada1	e0 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ada3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ada4	08					.byte NN	;wh_Flags	dictionary flags
=44320					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ada5					UM_Star:
.ada5	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ada7	b0 af		bcs $ad58		bcs Throw_Stack_14
.ada9	18		clc				clc		; tmp2= divsor-1
.adaa	b5 24		lda $24,x			lda DStack+0,x
.adac	e9 00		sbc #$00			sbc #0
.adae	85 16		sta $16				sta tmp2+0
.adb0	b5 25		lda $25,x			lda DStack+1,x
.adb2	e9 00		sbc #$00			sbc #0
.adb4	85 17		sta $17				sta tmp2+1
.adb6	90 2e		bcc $ade6			bcc _zero	; is divisor zero?
.adb8	a9 00		lda #$00			lda #0
.adba	85 14		sta $14				sta tmp1
.adbc	86 18		stx $18				stx tmp3	; tested for exit from outer loop
.adbe	ca		dex				dex
.adbf	ca		dex				dex
.adc0					_outer_loop:
.adc0	a0 08		ldy #$08			ldy #8		; counter inner loop
.adc2	56 28		lsr $28,x			lsr DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.adc4					_inner_loop:
.adc4	90 0c		bcc $add2			bcc _no_add
.adc6	85 15		sta $15				sta tmp1+1	; save time, don't CLC
.adc8	a5 14		lda $14				lda tmp1
.adca	65 16		adc $16				adc tmp2
.adcc	85 14		sta $14				sta tmp1
.adce	a5 15		lda $15				lda tmp1+1
.add0	65 17		adc $17				adc tmp2+1
.add2					_no_add:
.add2	6a		ror a				ror
.add3	66 14		ror $14				ror tmp1
.add5	76 28		ror $28,x			ror DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.add7	88		dey				dey
.add8	d0 ea		bne $adc4			bne _inner_loop ; go back for one more shift?
.adda	e8		inx				inx
.addb	e4 18		cpx $18				cpx tmp3
.addd	d0 e1		bne $adc0			bne _outer_loop ; go back for eight more shifts?
.addf	95 25		sta $25,x			sta DStack+1,x
.ade1	a5 14		lda $14				lda tmp1
.ade3	95 24		sta $24,x			sta DStack+0,x
.ade5	60		rts				rts
.ade6	a9 00		lda #$00	_zero:		lda #0
.ade8	95 26		sta $26,x			sta DStack+2,x
.adea	95 27		sta $27,x			sta DStack+3,x
.adec	60		rts				rts
=72					CL	.var *-(WordListLink+wh_Xt)
=$aded					en = *	; remember here
>ada3	48					.byte CL	;wh_CodeLength
>aded	4d 2a				L1:	.text "M*"	;  name of word as a string, ending at wh_NameLastChar
>adef	42					.byte (("M*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>adf0	20 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>adf2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>adf3	08					.byte NN	;wh_Flags	dictionary flags
=44399					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.adf4					M_Star:
.adf4	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.adf6	b0 6d		bcs $ae65		bcs Throw_Stack_15
.adf8	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.adfa	55 27		eor $27,x			eor DStack+3,x	; MSB of n2
.adfc	08		php				php
.adfd	20 2e c6	jsr $c62e			jsr Abs
.ae00	20 20 cf	jsr $cf20			jsr Swap
.ae03	20 2e c6	jsr $c62e			jsr Abs
.ae06	20 a5 ad	jsr $ada5			jsr UM_Star		; ( d )
.ae09	28		plp				plp			; handle the sign
.ae0a	10 03		bpl $ae0f			bpl +
.ae0c	4c 46 c6	jmp $c646			jmp DNegate
.ae0f					+
=27					CL	.var *-(WordListLink+wh_Xt)
=$ae0f					en = *	; remember here
>adf2	1b					.byte CL	;wh_CodeLength
.ae0f	60		rts				rts
>ae10	2a				L1:	.text "*"	;  name of word as a string, ending at wh_NameLastChar
>ae11	41					.byte (("*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ae12	6f ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae14	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae15	00					.byte 0	;wh_Flags	dictionary flags
=44433					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae16					Star:
.ae16	20 a5 ad	jsr $ada5			jsr UM_Star
.ae19	e8		inx				inx		; UD>U	drop hi cell
.ae1a	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$ae1b					en = *	; remember here
>ae14	05					.byte CL	;wh_CodeLength
.ae1b	60		rts				rts
>ae1c	55 4d 2f 4d 6f 64		L1:	.text "UM/Mod"	;  name of word as a string, ending at wh_NameLastChar
>ae22	86					.byte (("UM/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ae23	91 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae25	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae26	08					.byte NN	;wh_Flags	dictionary flags
=44450					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae27					UM_Slash_Mod:
.ae27	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ae29	b0 3a		bcs $ae65		bcs Throw_Stack_15
.ae2b	b5 24		lda $24,x			lda DStack+0,x		; catch division by zero
.ae2d	15 25		ora $25,x			ora DStack+1,x
.ae2f	f0 2f		beq $ae60			beq _DivByZero
.ae31	a0 10		ldy #$10			ldy #16			; for 16 bits
.ae33					_loop:
.ae33	36 28		rol $28,x			rol DStack+4,x		;   rotate low cell of dividend one bit left
.ae35	36 29		rol $29,x			rol DStack+5,x
.ae37	36 26		rol $26,x			rol DStack+2,x		;   rotate high cell of dividend one bit left
.ae39	36 27		rol $27,x			rol DStack+3,x
.ae3b	b0 0a		bcs $ae47			bcs _subtract		;   overflow?
.ae3d	b5 26		lda $26,x			lda DStack+2,x		;   dividend.hi >= divisor?
.ae3f	d5 24		cmp $24,x			cmp DStack+0,x
.ae41	b5 27		lda $27,x			lda DStack+3,x
.ae43	f5 25		sbc $25,x			sbc DStack+1,x
.ae45	90 0d		bcc $ae54			bcc _next
.ae47	b5 26		lda $26,x	_subtract:	lda DStack+2,x		;   dividend.hi -= divisor
.ae49	f5 24		sbc $24,x			sbc DStack+0,x
.ae4b	95 26		sta $26,x			sta DStack+2,x
.ae4d	b5 27		lda $27,x			lda DStack+3,x
.ae4f	f5 25		sbc $25,x			sbc DStack+1,x
.ae51	95 27		sta $27,x			sta DStack+3,x
.ae53	38		sec				sec			;   it always fits
.ae54	88		dey		_next:		dey			;  next
.ae55	d0 dc		bne $ae33			bne _loop
.ae57	36 28		rol $28,x			rol DStack+4,x		; finish rotating quotient bit in
.ae59	36 29		rol $29,x			rol DStack+5,x
.ae5b	e8		inx				inx			; drop divisor
.ae5c	e8		inx				inx
.ae5d	4c 20 cf	jmp $cf20			jmp Swap
.ae60	a9 f6		lda #$f6	_DivByZero:	lda #$100+err_DivideBy0
.ae62	4c 2e b4	jmp $b42e			jmp ThrowA
=62					CL	.var *-(WordListLink+wh_Xt)
=$ae65					en = *	; remember here
>ae25	3e					.byte CL	;wh_CodeLength
.ae65	4c f3 b3	jmp $b3f3	Throw_Stack_15: jmp Throw_Stack
>ae68	53 4d 2f 52 65 6d		L1:	.text "SM/Rem"	;  name of word as a string, ending at wh_NameLastChar
>ae6e	a6					.byte (("SM/Rem"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ae6f	a2 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae71	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae72	08					.byte NN	;wh_Flags	dictionary flags
=44526					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae73					SM_Slash_Rem:
.ae73	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ae75	b0 ee		bcs $ae65		bcs Throw_Stack_15
.ae77	b5 27		lda $27,x			lda DStack+3,x
.ae79	08		php				php
.ae7a	55 25		eor $25,x			eor DStack+1,x
.ae7c	08		php				php
.ae7d	20 2e c6	jsr $c62e			jsr Abs
.ae80	e8		inx				inx		; pretend we pushed n1 to R
.ae81	e8		inx				inx
.ae82	20 63 c6	jsr $c663			jsr DAbs
.ae85	ca		dex				dex
.ae86	ca		dex				dex
.ae87	20 27 ae	jsr $ae27			jsr UM_Slash_Mod	; UM/MOD
.ae8a	28		plp				plp
.ae8b	10 03		bpl $ae90			bpl +
.ae8d	20 15 c6	jsr $c615			jsr Negate
.ae90					+
.ae90	28		plp				plp
.ae91	10 07		bpl $ae9a			bpl _done
.ae93	e8		inx				inx		; pretend we pushed quotient to R
.ae94	e8		inx				inx
.ae95	20 15 c6	jsr $c615			jsr Negate
.ae98	ca		dex				dex
.ae99	ca		dex				dex
.ae9a					_done:
=39					CL	.var *-(WordListLink+wh_Xt)
=$ae9a					en = *	; remember here
>ae71	27					.byte CL	;wh_CodeLength
.ae9a	60		rts				rts
>ae9b	46 4d 2f 4d 6f 64		L1:	.text "FM/Mod"	;  name of word as a string, ending at wh_NameLastChar
>aea1	86					.byte (("FM/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aea2	ee ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aea4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aea5	08					.byte NN	;wh_Flags	dictionary flags
=44577					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aea6					FM_Slash_Mod:
.aea6	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.aea8	b0 bb		bcs $ae65		bcs Throw_Stack_15
.aeaa	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.aeac	08		php				php		;  save sign
.aead	10 0a		bpl $aeb9			bpl +
.aeaf	20 15 c6	jsr $c615			jsr Negate	; NEGATE
.aeb2	e8		inx				inx
.aeb3	e8		inx				inx
.aeb4	20 46 c6	jsr $c646			jsr DNegate	; DNEGATE
.aeb7	ca		dex				dex
.aeb8	ca		dex				dex
.aeb9					+
.aeb9	b5 27		lda $27,x			lda DStack+3,x	; MSB of high word of d
.aebb	10 0d		bpl $aeca			bpl +
.aebd	18		clc				clc
.aebe	b5 24		lda $24,x			lda DStack+0,x	; LSB of n1
.aec0	75 26		adc $26,x			adc DStack+2,x	; LSB of dh
.aec2	95 26		sta $26,x			sta DStack+2,x
.aec4	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.aec6	75 27		adc $27,x			adc DStack+3,x	; MSB of dh
.aec8	95 27		sta $27,x			sta DStack+3,x
.aeca					+
.aeca	20 27 ae	jsr $ae27			jsr UM_Slash_Mod	; ( d n1 -- rem n2 )
.aecd	28		plp				plp
.aece	10 07		bpl $aed7			bpl +
.aed0	e8		inx				inx		; pretend that we SWAP
.aed1	e8		inx				inx
.aed2	20 15 c6	jsr $c615			jsr Negate
.aed5	ca		dex				dex
.aed6	ca		dex				dex
.aed7					+
=49					CL	.var *-(WordListLink+wh_Xt)
=$aed7					en = *	; remember here
>aea4	31					.byte CL	;wh_CodeLength
.aed7	60		rts				rts
>aed8	2f 4d 6f 64			L1:	.text "/Mod"	;  name of word as a string, ending at wh_NameLastChar
>aedc	84					.byte (("/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aedd	21 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aedf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aee0	08					.byte NN	;wh_Flags	dictionary flags
=44636					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aee1	20 02 cf	jsr $cf02	Slash_Mod:	jsr Dup			; ( n1 n_div n_div )
.aee4	a0 00		ldy #$00			ldy #0			; sign extend n1
.aee6	b5 29		lda $29,x			lda DStack+5,x
.aee8	10 01		bpl $aeeb			bpl +
.aeea	88		dey				dey
.aeeb	94 26		sty $26,x	+		sty DStack+2,x
.aeed	94 27		sty $27,x			sty DStack+3,x		; ( d1 n_div )
.aeef	4c 73 ae	jmp $ae73			jmp SM_Slash_Rem	; SM/REM
=17					CL	.var *-(WordListLink+wh_Xt)
=$aef2					en = *	; remember here
>aedf	11					.byte CL	;wh_CodeLength
>aef2	2f				L1:	.text "/"	;  name of word as a string, ending at wh_NameLastChar
>aef3	e1					.byte (("/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aef4	5c ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aef6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aef7	08					.byte NN	;wh_Flags	dictionary flags
=44659					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aef8	20 e1 ae	jsr $aee1	Slash:		jsr Slash_Mod
.aefb	4c 1d c9	jmp $c91d			jmp Nip		; Nip remainder
=6					CL	.var *-(WordListLink+wh_Xt)
=$aefe					en = *	; remember here
>aef6	06					.byte CL	;wh_CodeLength
>aefe	4d 6f 64			L1:	.text "Mod"	;  name of word as a string, ending at wh_NameLastChar
>af01	83					.byte (("Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af02	73 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af04	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af05	00					.byte 0	;wh_Flags	dictionary flags
=44673					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af06	20 e1 ae	jsr $aee1	Mod:		jsr Slash_Mod
.af09	e8		inx				inx		; Drop quotient
.af0a	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$af0b					en = *	; remember here
>af04	05					.byte CL	;wh_CodeLength
.af0b	60		rts				rts
>af0c	2a 2f 4d 6f 64			L1:	.text "*/Mod"	;  name of word as a string, ending at wh_NameLastChar
>af11	85					.byte (("*/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af12	81 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af14	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af15	18					.byte UF+NN	;wh_Flags	dictionary flags
=44689					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af16					Star_Slash_Mod:
.af16	20 e9 b3	jsr $b3e9			jsr underflow_3
.af19	20 87 ce	jsr $ce87			jsr To_R
.af1c	20 f4 ad	jsr $adf4			jsr M_Star
.af1f	20 a6 ce	jsr $cea6			jsr R_From
.af22	4c 73 ae	jmp $ae73			jmp SM_Slash_Rem
=15					CL	.var *-(WordListLink+wh_Xt)
=$af25					en = *	; remember here
>af14	0f					.byte CL	;wh_CodeLength
>af25	2a 2f				L1:	.text "*/"	;  name of word as a string, ending at wh_NameLastChar
>af27	e2					.byte (("*/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af28	91 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af2a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af2b	08					.byte NN	;wh_Flags	dictionary flags
=44711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af2c					Star_Slash:
.af2c	20 16 af	jsr $af16			jsr Star_Slash_Mod
.af2f	4c 1d c9	jmp $c91d			jmp Nip			; mod
=6					CL	.var *-(WordListLink+wh_Xt)
=$af32					en = *	; remember here
>af2a	06					.byte CL	;wh_CodeLength
>af32	4d 2a 2f			L1:	.text "M*/"	;  name of word as a string, ending at wh_NameLastChar
>af35	e3					.byte (("M*/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af36	a7 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af38	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af39	08					.byte NN	;wh_Flags	dictionary flags
=44725					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af3a					m_star_slash:
.af3a	20 ee b3	jsr $b3ee	                jsr underflow_4
.af3d	b5 24		lda $24,x			lda DStack+0,x		; calc result sign
.af3f	55 26		eor $26,x			eor DStack+2,x
.af41	55 28		eor $28,x			eor DStack+4,x
.af43	08		php				php
.af44	20 2e c6	jsr $c62e	                jsr Abs			; Abs
.af47	20 87 ce	jsr $ce87	                jsr To_R		; >R		( d1 n1 ) ( R: sign abs(n2) )
.af4a	20 2e c6	jsr $c62e	                jsr Abs			; Abs
.af4d	20 87 ce	jsr $ce87	                jsr To_R		; >R		( d1 ) ( R: sign abs(n2) abs(n1) )
.af50	20 63 c6	jsr $c663	                jsr DAbs		; DAbs		( abs(d1) ) ( R: sign abs(n2) abs(n1) )
.af53	20 20 cf	jsr $cf20	                jsr Swap		; Swap
.af56	20 c2 ce	jsr $cec2	                jsr R_Fetch		; R@
.af59	20 a5 ad	jsr $ada5	                jsr UM_Star		; UM*
.af5c	20 06 ce	jsr $ce06	                jsr Rot			; Rot
.af5f	20 a6 ce	jsr $cea6	                jsr R_From		; R>
.af62	20 a5 ad	jsr $ada5	                jsr UM_Star		; UM*
.af65	20 06 ce	jsr $ce06	                jsr Rot			; Rot
.af68	20 11 ca	jsr $ca11	                jsr UMPlus		; 0 D+
.af6b	20 c2 ce	jsr $cec2	                jsr R_Fetch		; R@
.af6e	20 27 ae	jsr $ae27	                jsr UM_Slash_Mod	; UM/Mod
.af71	20 2c ce	jsr $ce2c	                jsr Not_Rot		; Rot Rot
.af74	20 a6 ce	jsr $cea6	                jsr R_From		; R>
.af77	20 27 ae	jsr $ae27	                jsr UM_Slash_Mod	; UM/Mod
.af7a	20 1d c9	jsr $c91d	                jsr Nip			; Swap Drop
.af7d	20 20 cf	jsr $cf20	                jsr Swap		; Swap
.af80	28		plp				plp
.af81	10 03		bpl $af86			bpl _rts		; ... 0< if ...
.af83	4c 46 c6	jmp $c646	                jmp DNegate
.af86	60		rts		_rts:		rts
=77					CL	.var *-(WordListLink+wh_Xt)
=$af87					en = *	; remember here
>af38	4d					.byte CL	;wh_CodeLength
>af87	45 76 61 6c 75 61 74 65		L1:	.text "Evaluate"	;  name of word as a string, ending at wh_NameLastChar
>af8f	a8					.byte (("Evaluate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af90	b5 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af92	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af93	08					.byte NN	;wh_Flags	dictionary flags
=44815					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af94					Evaluate:
.af94	18		clc				clc			; signal to zero BLK.
.af95					load_evaluate:
.af95	ad 0d 03	lda $030d			lda BlkV+1	; Save the current value of BLK on the return stack.
.af98	48		pha				pha
.af99	ad 0c 03	lda $030c			lda BlkV+0
.af9c	48		pha				pha
.af9d	b0 08		bcs $afa7			bcs +		; See if we should zero BLK.
.af9f	a9 00		lda #$00			lda #0		; Set BLK to zero.
.afa1	8d 0c 03	sta $030c			sta BlkV+0
.afa4	8d 0d 03	sta $030d			sta BlkV+1
.afa7					+
.afa7	20 ae c3	jsr $c3ae			jsr Input_To_R	; Save the input state to the Return Stack
.afaa	a9 ff		lda #$ff			lda #$ff	; SOURCE-ID= -1
.afac	85 02		sta $02				sta insrc+0
.afae	85 03		sta $03				sta insrc+1
.afb0	a9 00		lda #$00			lda #0		; >IN= zero
.afb2	85 08		sta $08				sta toin+0
.afb4	85 09		sta $09				sta toin+1
.afb6	20 a5 b3	jsr $b3a5			jsr PopYA	; ciblen= string length (u)
.afb9	85 06		sta $06				sta ciblen+0
.afbb	84 07		sty $07				sty ciblen+1
.afbd	20 a5 b3	jsr $b3a5			jsr PopYA	; cib= string addr
.afc0	85 04		sta $04				sta cib+0
.afc2	84 05		sty $05				sty cib+1
.afc4	20 e8 b4	jsr $b4e8			jsr interpret	; ( -- )
.afc7	20 d0 c3	jsr $c3d0			jsr R_To_Input	; restore input state
.afca	68		pla				pla		; Restore BLK from the return stack.
.afcb	8d 0c 03	sta $030c			sta BlkV+0
.afce	68		pla				pla
.afcf	8d 0d 03	sta $030d			sta BlkV+1
=62					CL	.var *-(WordListLink+wh_Xt)
=$afd2					en = *	; remember here
>af92	3e					.byte CL	;wh_CodeLength
.afd2	60		rts				rts
>afd3	3e 4e 75 6d 62 65 72		L1:	.text ">Number"	;  name of word as a string, ending at wh_NameLastChar
>afda	47					.byte ((">Number"[-1]&7)<<5)+(*-L1)	;wh_HNL
>afdb	0f af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>afdd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>afde	18					.byte UF+NN	;wh_Flags	dictionary flags
=44890					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.afdf					To_Number:
.afdf	20 ee b3	jsr $b3ee			jsr underflow_4
.afe2	b5 24		lda $24,x			lda DStack+0,x		; no chars left?
.afe4	f0 72		beq $b058			beq _done
.afe6					_Char_loop:
.afe6	a1 26		lda ($26,x)			lda (DStack+2,x)		; Get next character
.afe8	c9 30		cmp #$30			cmp #'0'		; convert to value (Digit_Question)
.afea	90 6c		bcc $b058			bcc _done
.afec	c9 3a		cmp #$3a			cmp #'9'+1
.afee	90 08		bcc $aff8			bcc _digit
.aff0	29 df		and #$df			and #$df		;   ASCII uppercase
.aff2	c9 41		cmp #$41			cmp #'A'
.aff4	90 62		bcc $b058			bcc _done
.aff6	e9 07		sbc #$07			sbc #7 ;'A'-'0'-10	;   to make 'A'=10 below
.aff8	38		sec		_digit:		sec
.aff9	e9 30		sbc #$30			sbc #'0'
.affb	cd 00 03	cmp $0300			cmp base		; must be < base
.affe	b0 58		bcs $b058			bcs _done
.b000	48		pha				pha			; Save char value
.b001	20 f0 c4	jsr $c4f0			jsr Two_Over		;   copy ud to work (multiplicand)
.b004	a9 00		lda #$00			lda #0			;   zero ud (product)
.b006	95 2c		sta $2c,x			sta DStack+8,x
.b008	95 2d		sta $2d,x			sta DStack+9,x
.b00a	95 2e		sta $2e,x			sta DStack+10,x
.b00c	95 2f		sta $2f,x			sta DStack+11,x
.b00e	ad 00 03	lda $0300			lda base		;   get multiplier
.b011	d0 23		bne $b036			bne _Mul_Test
.b013	48		pha		_Mul_Add:	pha			;   save multiplier
.b014	18		clc				clc			;   ud += work
.b015	b5 26		lda $26,x			lda DStack+2,x
.b017	75 2e		adc $2e,x			adc DStack+10,x
.b019	95 2e		sta $2e,x			sta DStack+10,x
.b01b	b5 27		lda $27,x			lda DStack+3,x
.b01d	75 2f		adc $2f,x			adc DStack+11,x
.b01f	95 2f		sta $2f,x			sta DStack+11,x
.b021	b5 24		lda $24,x			lda DStack+0,x
.b023	75 2c		adc $2c,x			adc DStack+8,x
.b025	95 2c		sta $2c,x			sta DStack+8,x
.b027	b5 25		lda $25,x			lda DStack+1,x
.b029	75 2d		adc $2d,x			adc DStack+9,x
.b02b	95 2d		sta $2d,x			sta DStack+9,x
.b02d	68		pla				pla			;   restore multiplier
.b02e	16 26		asl $26,x	_Mul_Shift:	asl DStack+2,x		;   work <<= 1
.b030	36 27		rol $27,x			rol DStack+3,x
.b032	36 24		rol $24,x			rol DStack+0,x
.b034	36 25		rol $25,x			rol DStack+1,x
.b036	4a		lsr a		_Mul_Test:	lsr a			;   shift multiplier
.b037	b0 da		bcs $b013			bcs _Mul_Add
.b039	d0 f3		bne $b02e			bne _Mul_Shift
.b03b	e8		inx				inx			;   2Drop work
.b03c	e8		inx				inx
.b03d	e8		inx				inx
.b03e	e8		inx				inx
.b03f	68		pla				pla			; recover value
.b040	18		clc				clc			; add to ud
.b041	75 2a		adc $2a,x			adc DStack+6,x
.b043	95 2a		sta $2a,x			sta DStack+6,x
.b045	90 0a		bcc $b051			bcc +
.b047	f6 2b		inc $2b,x			inc DStack+7,x
.b049	d0 06		bne $b051			bne +
.b04b	f6 28		inc $28,x			inc DStack+4,x
.b04d	d0 02		bne $b051			bne +
.b04f	f6 29		inc $29,x			inc DStack+5,x
.b051					+
.b051	20 02 ca	jsr $ca02			jsr NOS_One_Plus	; consume the char
.b054	d6 24		dec $24,x			dec DStack+0,x
.b056	d0 8e		bne $afe6			bne _Char_loop
.b058					_done:
=121					CL	.var *-(WordListLink+wh_Xt)
=$b058					en = *	; remember here
>afdd	79					.byte CL	;wh_CodeLength
.b058	60		rts				rts
>b059	4e 75 6d 62 65 72		L1:	.text "Number"	;  name of word as a string, ending at wh_NameLastChar
>b05f	46					.byte (("Number"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b060	5a af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b062	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b063	18					.byte UF+NN	;wh_Flags	dictionary flags
=45023					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b064					Number:
.b064	20 e4 b3	jsr $b3e4			jsr underflow_2
.b067	a9 00		lda #$00			lda #0
.b069	85 1a		sta $1a				sta tmp4+0	; flag for double
.b06b	85 1b		sta $1b				sta tmp4+1	; flag for minus
.b06d	ad 00 03	lda $0300			lda base
.b070	48		pha				pha
.b071	20 5c cc	jsr $cc5c			jsr Two_dup		; ( addr u addr u )
.b074	a1 26		lda ($26,x)			lda (DStack+2,x)	; get 1st char
.b076	20 38 b1	jsr $b138			jsr _MinusCheck		; a minus sign?
.b079	a0 0a		ldy #$0a			ldy #10			; decimal?
.b07b	c9 23		cmp #$23			cmp #'#'
.b07d	f0 35		beq $b0b4			beq _base_changed
.b07f	a0 10		ldy #$10			ldy #16			; hex?
.b081	c9 24		cmp #$24			cmp #'$'
.b083	f0 2f		beq $b0b4			beq _base_changed
.b085	a0 02		ldy #$02			ldy #2			; binary?
.b087	c9 25		cmp #$25			cmp #'%'
.b089	f0 29		beq $b0b4			beq _base_changed
.b08b	c9 27		cmp #$27			cmp #$27		; ASCII for "'"
.b08d	d0 2f		bne $b0be			bne _check_dot
.b08f	b5 24		lda $24,x			lda DStack+0,x	; length=3 ?
.b091	c9 03		cmp #$03			cmp #3
.b093	d0 1c		bne $b0b1			bne _not_a_char
.b095	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b097	85 1c		sta $1c				sta tmp5
.b099	b5 27		lda $27,x			lda DStack+3,x
.b09b	85 1d		sta $1d				sta tmp5+1
.b09d	a0 02		ldy #$02			ldy #2
.b09f	b1 1c		lda ($1c),y			lda (tmp5),y
.b0a1	c9 27		cmp #$27			cmp #$27	; ASCII for "'"
.b0a3	d0 0c		bne $b0b1			bne _not_a_char
.b0a5	88		dey				dey		; The char we want is between the single quotes.
.b0a6	b1 1c		lda ($1c),y			lda (tmp5),y
.b0a8	95 26		sta $26,x			sta DStack+2,x
.b0aa	a9 00		lda #$00			lda #0
.b0ac	95 27		sta $27,x			sta DStack+3,x
.b0ae	4c 0d b1	jmp $b10d			jmp _drop_original_string ; Single flag will drop the TOS for us.
.b0b1					_not_a_char:
.b0b1	4c ea b0	jmp $b0ea			jmp _number_error
.b0b4					_base_changed:
.b0b4	8c 00 03	sty $0300			sty base	; Switch to the new base
.b0b7	20 02 ca	jsr $ca02			jsr NOS_One_Plus ; start one character later
.b0ba	d6 24		dec $24,x			dec DStack+0,x	; decrease string length by one
.b0bc	a1 26		lda ($26,x)			lda (DStack+2,x) ; Load the first char again
.b0be					_check_dot:
.b0be	20 38 b1	jsr $b138			jsr _MinusCheck
.b0c1	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b0c3	85 1c		sta $1c				sta tmp5
.b0c5	b5 27		lda $27,x			lda DStack+3,x
.b0c7	85 1d		sta $1d				sta tmp5+1
.b0c9	b4 24		ldy $24,x			ldy DStack+0,x	; Y now points to the first character after the string,
.b0cb	88		dey				dey		; but we need the last character
.b0cc	b1 1c		lda ($1c),y			lda (tmp5),y
.b0ce	c9 2e		cmp #$2e			cmp #'.'
.b0d0	d0 04		bne $b0d6			bne _main
.b0d2	c6 1a		dec $1a				dec tmp4	; Flag the fact
.b0d4	d6 24		dec $24,x			dec DStack+0,x	; reduce string length by one
.b0d6					_main:
.b0d6	20 5c cc	jsr $cc5c			jsr Two_Dup
.b0d9	a9 00		lda #$00			lda #0
.b0db	95 28		sta $28,x			sta DStack+4,x	; clear ud
.b0dd	95 29		sta $29,x			sta DStack+5,x
.b0df	95 2a		sta $2a,x			sta DStack+6,x
.b0e1	95 2b		sta $2b,x			sta DStack+7,x
.b0e3	20 df af	jsr $afdf			jsr To_Number	; ( ud addr u -- ud addr u )
.b0e6	b5 24		lda $24,x			lda DStack+0,x
.b0e8	f0 1f		beq $b109			beq _all_converted
.b0ea					_number_error:
.b0ea	20 bc c4	jsr $c4bc			jsr Two_drop	; >NUMBER modified addr u
.b0ed	20 bc c4	jsr $c4bc			jsr Two_drop	; ud   (partially converted number)
.b0f0	a9 3e		lda #$3e			lda #'>'	; print the unknown
.b0f2	20 70 cd	jsr $cd70			jsr Emit_A	; word using the original addr u we saved at the beginning.
.b0f5	20 8a cd	jsr $cd8a			jsr Type
.b0f8	a9 3c		lda #$3c			lda #'<'
.b0fa	20 70 cd	jsr $cd70			jsr Emit_A
.b0fd	20 7d cd	jsr $cd7d			jsr Space
.b100	68		pla				pla		; restore base
.b101	8d 00 03	sta $0300			sta base
.b104	a9 f3		lda #$f3			lda #$100+err_UndefinedWord
.b106	4c 2e b4	jmp $b42e			jmp ThrowA
.b109					_all_converted:
.b109	e8		inx				inx		; Drop the current addr u
.b10a	e8		inx				inx
.b10b	e8		inx				inx
.b10c	e8		inx				inx
.b10d					_drop_original_string:
.b10d	20 b2 bf	jsr $bfb2			jsr TwoNip	 ; Drop the original addr u
.b110	a5 1a		lda $1a				lda tmp4	; flag for double
.b112	f0 10		beq $b124			beq _single
.b114	a9 20		lda #$20			lda #%00100000
.b116	05 0c		ora $0c				ora status
.b118	85 0c		sta $0c				sta status
.b11a	a5 1b		lda $1b				lda tmp4+1
.b11c	f0 15		beq $b133			beq _done	; no minus, all done
.b11e	20 46 c6	jsr $c646			jsr DNegate
.b121	4c 33 b1	jmp $b133			jmp _done
.b124					_single:
.b124	e8		inx				inx		; convert ud to u
.b125	e8		inx				inx
.b126	a9 df		lda #$df			lda #$ff-%00100000
.b128	25 0c		and $0c				and status
.b12a	85 0c		sta $0c				sta status
.b12c	a5 1b		lda $1b				lda tmp4+1
.b12e	f0 03		beq $b133			beq _done	; no minus, all done
.b130	20 15 c6	jsr $c615			jsr Negate
.b133					_done:
.b133	68		pla				pla
.b134	8d 00 03	sta $0300			sta base
=211					CL	.var *-(WordListLink+wh_Xt)
=$b137					en = *	; remember here
>b062	d3					.byte CL	;wh_CodeLength
.b137	60		rts				rts
.b138					_MinusCheck:
.b138	c9 2d		cmp #$2d			cmp #'-'		; a minus sign?
.b13a	d0 09		bne $b145			bne +
.b13c	c6 1b		dec $1b				dec tmp4+1		; set flag
.b13e	20 02 ca	jsr $ca02			jsr NOS_One_Plus	; start one character later
.b141	d6 24		dec $24,x			dec DStack+0,x		; decrease string length by one
.b143	a1 26		lda ($26,x)			lda (DStack+2,x)	; get next char
.b145	60		rts		+		rts
>b146	48 65 78			L1:	.text "Hex"	;  name of word as a string, ending at wh_NameLastChar
>b149	03					.byte (("Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b14a	df af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b14c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b14d	08					.byte NN	;wh_Flags	dictionary flags
=45257					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b14e	a9 10		lda #$10	Hex:		lda #16
.b150	d0 0e		bne $b160			bne decimal_a
=4					CL	.var *-(WordListLink+wh_Xt)
=$b152					en = *	; remember here
>b14c	04					.byte CL	;wh_CodeLength
>b152	44 65 63 69 6d 61 6c		L1:	.text "Decimal"	;  name of word as a string, ending at wh_NameLastChar
>b159	87					.byte (("Decimal"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b15a	c9 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b15c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b15d	00					.byte 0	;wh_Flags	dictionary flags
=45273					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b15e	a9 0a		lda #$0a	Decimal:	lda #10
.b160	8d 00 03	sta $0300	decimal_a:	sta base+0
.b163	a9 00		lda #$00			lda #0
.b165	8d 01 03	sta $0301			sta base+1		; paranoid
=10					CL	.var *-(WordListLink+wh_Xt)
=$b168					en = *	; remember here
>b15c	0a					.byte CL	;wh_CodeLength
.b168	60		rts				rts
>b169	43 6f 75 6e 74			L1:	.text "Count"	;  name of word as a string, ending at wh_NameLastChar
>b16e	85					.byte (("Count"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b16f	d9 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b171	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b172	18					.byte UF+NN	;wh_Flags	dictionary flags
=45294					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b173					Count:
.b173	20 cf b3	jsr $b3cf			jsr underflow_1
.b176	a1 24		lda ($24,x)			lda (DStack+0,x)	; A= number of characters
.b178	f6 24		inc $24,x			inc DStack+0,x		; move start address up by one
.b17a	d0 02		bne $b17e			bne +
.b17c	f6 25		inc $25,x			inc DStack+1,x
.b17e					+
.b17e	4c a1 b7	jmp $b7a1			jmp PushZA		; push number of characters, return
=14					CL	.var *-(WordListLink+wh_Xt)
=$b181					en = *	; remember here
>b171	0e					.byte CL	;wh_CodeLength
>0743					DoLeave  .word ?	; head of leave addr patch chain
>0745					DoStkIndex: .byte ?
>0746					DoIndexL: .fill DoStkDim
>074e					DoIndexH: .fill DoStkDim
>0756					DoFufaL:  .fill DoStkDim
>075e					DoFufaH:  .fill DoStkDim
>b181	3f 44 6f			L1:	.text "?Do"	;  name of word as a string, ending at wh_NameLastChar
>b184	e3					.byte (("?Do"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b185	ee b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b187	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b188	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45316					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b189					Question_Do:
.b189	20 e4 b2	jsr $b2e4			jsr Do_Leave_Init
.b18c	a9 a0		lda #$a0			lda #<_runtime
.b18e	a0 b1		ldy #$b1			ldy #>_runtime
.b190	20 e0 cc	jsr $cce0			jsr Jsr_Comma_YA	; compile JSR _runtime
.b193	a9 d0		lda #$d0			lda #$d0		; compile BNE *+5
.b195	a0 03		ldy #$03			ldy #3
.b197	20 bb cc	jsr $ccbb			jsr Comma_YA
.b19a	20 c7 b2	jsr $b2c7			jsr Leave		; compile JMP leave
.b19d	4c be b1	jmp $b1be			jmp Do_8		; finish
=23					CL	.var *-(WordListLink+wh_Xt)
=$b1a0					en = *	; remember here
>b187	17					.byte CL	;wh_CodeLength
.b1a0					_runtime:
.b1a0	20 c6 b1	jsr $b1c6			jsr Do_Runtime	; start normally (we assume TOS!=NOS)
.b1a3	a5 12		lda $12				lda DoIndex+0	; Are TOS and NOS equal?
.b1a5	f0 01		beq $b1a8			beq _2
.b1a7	60		rts				rts		; return Z=0 to signal continue
.b1a8	a5 13		lda $13		_2:		lda DoIndex+1
.b1aa	c9 80		cmp #$80			cmp #$80
.b1ac	60		rts				rts		; return Z
>b1ad	44 6f				L1:	.text "Do"	;  name of word as a string, ending at wh_NameLastChar
>b1af	e2					.byte (("Do"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b1b0	04 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b1b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b1b3	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45359					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b1b4					Do:
.b1b4	20 e4 b2	jsr $b2e4			jsr Do_Leave_Init
.b1b7	a9 c6		lda #$c6			lda #<Do_runtime
.b1b9	a0 b1		ldy #$b1			ldy #>Do_runtime
.b1bb	20 e0 cc	jsr $cce0			jsr Jsr_Comma_YA	; compile JSR _runtime
.b1be	20 c4 c9	jsr $c9c4	Do_8:		jsr Here		; remember loop body start addr
.b1c1	a9 b4		lda #$b4			lda #<Do		; identifier
.b1c3	4c a1 b7	jmp $b7a1			jmp PushZA
=18					CL	.var *-(WordListLink+wh_Xt)
=$b1c6					en = *	; remember here
>b1b2	12					.byte CL	;wh_CodeLength
.b1c6					Do_Runtime:
.b1c6	ce 45 07	dec $0745			dec DoStkIndex		; alloc DO stack entry
.b1c9	ac 45 07	ldy $0745			ldy DoStkIndex
.b1cc	30 2d		bmi $b1fb			bmi _TooDeep
.b1ce	a5 12		lda $12				lda DoIndex+0		; save previous DoIndex
.b1d0	99 46 07	sta $0746,y			sta DoIndexL,y
.b1d3	a5 13		lda $13				lda DoIndex+1
.b1d5	99 4e 07	sta $074e,y			sta DoIndexH,y
.b1d8	38		sec				sec			; fudge factor (FUFA)= $8000 - limit
.b1d9	a9 00		lda #$00			lda #0			;   the number that will trip the overflow flag
.b1db	f5 26		sbc $26,x			sbc DStack+2,x
.b1dd	99 56 07	sta $0756,y			sta DoFuFaL,y
.b1e0	a9 80		lda #$80			lda #$80
.b1e2	f5 27		sbc $27,x			sbc DStack+3,x
.b1e4	99 5e 07	sta $075e,y			sta DoFuFaH,y
.b1e7	18		clc				clc			; index= FUFA plus original index
.b1e8	b5 24		lda $24,x			lda DStack+0,x
.b1ea	79 56 07	adc $0756,y			adc DoFuFaL,y
.b1ed	85 12		sta $12				sta DoIndex+0
.b1ef	b5 25		lda $25,x			lda DStack+1,x
.b1f1	79 5e 07	adc $075e,y			adc DoFuFaH,y
.b1f4	85 13		sta $13				sta DoIndex+1
.b1f6	e8		inx				inx			; Drop orig index
.b1f7	e8		inx				inx
.b1f8	e8		inx				inx			; Drop orig limit
.b1f9	e8		inx				inx
.b1fa	60		rts				rts			; return
.b1fb	a9 f9		lda #$f9	_TooDeep:	lda #$100+err_DoLoop_TooDeep
.b1fd	20 2e b4	jsr $b42e			jsr ThrowA
>b200	4c 6f 6f 70			L1:	.text "Loop"	;  name of word as a string, ending at wh_NameLastChar
>b204	04					.byte (("Loop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b205	2f b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b207	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b208	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45444					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b209					Loop:
.b209	a9 10		lda #$10			lda #<_Runtime
.b20b	a0 b2		ldy #$b2			ldy #>_Runtime
.b20d	4c 2c b2	jmp $b22c			jmp Plus_Loop_5
=7					CL	.var *-(WordListLink+wh_Xt)
=$b210					en = *	; remember here
>b207	07					.byte CL	;wh_CodeLength
.b210					_Runtime:
.b210	e6 12		inc $12				inc DoIndex+0
.b212	f0 02		beq $b216			beq _Runtime2
.b214	b8		clv				clv			; return V=0 to signal loop back
.b215	60		rts				rts
.b216	18		clc		_Runtime2:	clc
.b217	a5 13		lda $13				lda DoIndex+1		; handle carry from lo byte
.b219	69 01		adc #$01			adc #1
.b21b	85 13		sta $13				sta DoIndex+1
.b21d	60		rts				rts			; return V to signal loop back
>b21e	2b 4c 6f 6f 70			L1:	.text "+Loop"	;  name of word as a string, ending at wh_NameLastChar
>b223	05					.byte (("+Loop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b224	84 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b226	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b227	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45475					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b228					Plus_Loop:
.b228	a9 36		lda #$36			lda #<Plus_Loop_Runtime
.b22a	a0 b2		ldy #$b2			ldy #>Plus_Loop_Runtime
.b22c	20 4d b2	jsr $b24d	Plus_Loop_5:	jsr Loop_End		; compile JSR _runtime, BVC back
.b22f	a9 ac		lda #$ac			lda #<Unloop
.b231	a0 b2		ldy #$b2			ldy #>Unloop
.b233	4c 55 b6	jmp $b655			jmp Compile_Comma_WithNT_YA ; compile JSR Unloop, return
=14					CL	.var *-(WordListLink+wh_Xt)
=$b236					en = *	; remember here
>b226	0e					.byte CL	;wh_CodeLength
.b236					Plus_Loop_Runtime:
.b236	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b238	b0 10		bcs $b24a		bcs Throw_Stack_12
.b23a	18		clc				clc			; DoIndex += step
.b23b	b5 24		lda $24,x			lda DStack+0,x
.b23d	65 12		adc $12				adc DoIndex+0
.b23f	85 12		sta $12				sta DoIndex+0
.b241	b5 25		lda $25,x			lda DStack+1,x
.b243	65 13		adc $13				adc DoIndex+1
.b245	85 13		sta $13				sta DoIndex+1
.b247	e8		inx				inx			; Drop step
.b248	e8		inx				inx
.b249	60		rts				rts			; return V=0 to signal loop back
.b24a	4c f3 b3	jmp $b3f3	Throw_Stack_12: jmp Throw_Stack
.b24d					Loop_End:
.b24d	20 e0 cc	jsr $cce0			jsr Jsr_Comma_YA	; compile JSR runtime
.b250	a9 b4		lda #$b4			lda #<Do		; check id
.b252	20 95 b2	jsr $b295	Loop_End_3:	jsr QPairCtlA
.b255	a9 50		lda #$50			lda #$50		; compile BVC body
.b257	20 6c a6	jsr $a66c			jsr Branch_Comma
.b25a	ac 43 07	ldy $0743			ldy DoLeave+0		; for each leave addr entry
.b25d	ad 44 07	lda $0744			lda DoLeave+1
.b260	f0 1b		beq $b27d			beq _p9
.b262	84 14		sty $14		_p1:		sty tmp1+0		;   save entry pointer
.b264	85 15		sta $15				sta tmp1+1
.b266	a0 01		ldy #$01			ldy #1			;   save link
.b268	b1 14		lda ($14),y			lda (tmp1),y
.b26a	48		pha				pha
.b26b	88		dey				dey
.b26c	b1 14		lda ($14),y			lda (tmp1),y
.b26e	48		pha				pha
.b26f	a5 00		lda $00				lda cp+0		;   patch addr
.b271	91 14		sta ($14),y			sta (tmp1),y
.b273	a5 01		lda $01				lda cp+1
.b275	c8		iny				iny
.b276	91 14		sta ($14),y			sta (tmp1),y
.b278	68		pla				pla			;   get saved link
.b279	a8		tay				tay
.b27a	68		pla				pla
.b27b	d0 e5		bne $b262			bne _p1
.b27d					_p9:
.b27d	20 a5 b3	jsr $b3a5			jsr PopYA		; restore DoLeave
.b280	8d 43 07	sta $0743			sta DoLeave+0
.b283	8c 44 07	sty $0744			sty DoLeave+1
.b286	60		rts				rts
>b287	3f 50 61 69 72 43 74 6c		L1:	.text "?PairCtlA"	;  name of word as a string, ending at wh_NameLastChar
>b28f	41
>b290	29					.byte (("?PairCtlA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b291	a3 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b293	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b294	08					.byte NN	;wh_Flags	dictionary flags
=45584					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b295	d5 24		cmp $24,x	QPairCtlA:	cmp DStack+0,x
.b297	f0 05		beq $b29e			beq _8
.b299	a9 ea		lda #$ea			lda #$100+err_ControlMismatch
.b29b	4c 2e b4	jmp $b42e			jmp ThrowA
.b29e	e8		inx		_8:		inx
.b29f	e8		inx				inx	; Drop n
.b2a0	60		rts				rts
=12					CL	.var *-(WordListLink+wh_Xt)
=$b2a1					en = *	; remember here
>b293	0c					.byte CL	;wh_CodeLength
>b2a1	55 6e 6c 6f 6f 70		L1:	.text "Unloop"	;  name of word as a string, ending at wh_NameLastChar
>b2a7	06					.byte (("Unloop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b2a8	10 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2aa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2ab	01					.byte CO	;wh_Flags	dictionary flags
=45607					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2ac					Unloop:
.b2ac	ac 45 07	ldy $0745			ldy DoStkIndex
.b2af	b9 46 07	lda $0746,y			lda DoIndexL,y	; restore Index
.b2b2	85 12		sta $12				sta DoIndex+0
.b2b4	b9 4e 07	lda $074e,y			lda DoIndexH,y
.b2b7	85 13		sta $13				sta DoIndex+1
.b2b9	ee 45 07	inc $0745			inc DoStkIndex	; drop Do stack entry
=16					CL	.var *-(WordListLink+wh_Xt)
=$b2bc					en = *	; remember here
>b2aa	10					.byte CL	;wh_CodeLength
.b2bc	60		rts				rts
>b2bd	4c 65 61 76 65			L1:	.text "Leave"	;  name of word as a string, ending at wh_NameLastChar
>b2c2	a5					.byte (("Leave"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b2c3	27 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2c5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2c6	0d					.byte IM+NN+CO	;wh_Flags	dictionary flags
=45634					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2c7					Leave:
.b2c7	a9 4c		lda #$4c			lda #$4c	; JMP abs
.b2c9	20 a1 cc	jsr $cca1			jsr C_Comma_A
.b2cc	a5 01		lda $01				lda cp+1	; save cp
.b2ce	48		pha				pha
.b2cf	a5 00		lda $00				lda cp+0
.b2d1	48		pha				pha
.b2d2	ad 43 07	lda $0743			lda DoLeave+0	; compile DoLeave link, patched later
.b2d5	ac 44 07	ldy $0744			ldy DoLeave+1
.b2d8	20 bb cc	jsr $ccbb			jsr Comma_YA
.b2db	68		pla				pla		; update DoLeave
.b2dc	8d 43 07	sta $0743			sta DoLeave+0
.b2df	68		pla				pla
.b2e0	8d 44 07	sta $0744			sta DoLeave+1
=28					CL	.var *-(WordListLink+wh_Xt)
=$b2e3					en = *	; remember here
>b2c5	1c					.byte CL	;wh_CodeLength
.b2e3	60		rts				rts
.b2e4					Do_Leave_Init:
.b2e4	ad 43 07	lda $0743			lda DoLeave+0
.b2e7	ac 44 07	ldy $0744			ldy DoLeave+1
.b2ea	20 5f b7	jsr $b75f			jsr PushYA	; save old leave head
.b2ed	a9 00		lda #$00			lda #0		; init
.b2ef	8d 44 07	sta $0744			sta DoLeave+1
.b2f2	60		rts				rts
>b2f3	49				L1:	.text "I"	;  name of word as a string, ending at wh_NameLastChar
>b2f4	21					.byte (("I"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b2f5	42 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2f8	01					.byte CO	;wh_Flags	dictionary flags
=45684					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2f9	ac 45 07	ldy $0745	I:		ldy DoStkIndex
.b2fc	ca		dex				dex
.b2fd	ca		dex				dex
.b2fe	38		sec				sec		; n= fudged index - fudge factor (FUFA)
.b2ff	a5 12		lda $12				lda DoIndex+0
.b301	f9 56 07	sbc $0756,y			sbc DoFuFaL,y
.b304	95 24		sta $24,x			sta DStack+0,x
.b306	a5 13		lda $13				lda DoIndex+1
.b308	f9 5e 07	sbc $075e,y			sbc DoFuFaH,y
.b30b	95 25		sta $25,x			sta DStack+1,x
=20					CL	.var *-(WordListLink+wh_Xt)
=$b30d					en = *	; remember here
>b2f7	14					.byte CL	;wh_CodeLength
.b30d	60		rts				rts
>b30e	4a				L1:	.text "J"	;  name of word as a string, ending at wh_NameLastChar
>b30f	41					.byte (("J"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b310	74 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b312	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b313	01					.byte CO	;wh_Flags	dictionary flags
=45711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b314	ac 45 07	ldy $0745	J:		ldy DoStkIndex
.b317	ca		dex				dex
.b318	ca		dex				dex
.b319	38		sec				sec		; n= 2nd fudged index - 2nd fudge factor (FUFA)
.b31a	b9 46 07	lda $0746,y			lda DoIndexL+0,y	; LSB
.b31d	f9 57 07	sbc $0757,y			sbc DoFufaL+1,y
.b320	95 24		sta $24,x			sta DStack+0,x
.b322	b9 4e 07	lda $074e,y			lda DoIndexH+0,y	; MSB
.b325	f9 5f 07	sbc $075f,y			sbc DoFufaH+1,y
.b328	95 25		sta $25,x			sta DStack+1,x
=22					CL	.var *-(WordListLink+wh_Xt)
=$b32a					en = *	; remember here
>b312	16					.byte CL	;wh_CodeLength
.b32a	60		rts				rts
>b32b	52 65 63 75 72 73 65		L1:	.text "Recurse"	;  name of word as a string, ending at wh_NameLastChar
>b332	a7					.byte (("Recurse"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b333	8f b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b335	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b336	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45746					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b337					Recurse:
.b337	a5 0e		lda $0e				lda workword+0
.b339	a4 0f		ldy $0f				ldy workword+1
.b33b	20 5f b7	jsr $b75f			jsr PushYA
.b33e	24 0c		bit $0c				bit status		; does WORKWORD contain xt or nt?
.b340	50 03		bvc $b345			bvc +
.b342	20 97 bd	jsr $bd97			jsr Name_To_Int		; convert nt to xt
.b345					+
.b345	4c dd cc	jmp $ccdd			jmp Jsr_Comma		; compile JSR xt, return
=17					CL	.var *-(WordListLink+wh_Xt)
=$b348					en = *	; remember here
>b335	11					.byte CL	;wh_CodeLength
>b348	41 62 6f 72 74 22		L1:	.text 'Abort"'	;  name of word as a string, ending at wh_NameLastChar
>b34e	46					.byte (('Abort"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>b34f	b2 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b351	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b352	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45774					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b353					Abort_Quote:
.b353	20 c9 b8	jsr $b8c9			jsr S_Quote		; compile the string literal
.b356	a0 b3		ldy #$b3			ldy #>_runtime		; compile JSR runtime, return
.b358	a9 5d		lda #$5d			lda #<_runtime
.b35a	4c e0 cc	jmp $cce0			jmp Jsr_Comma_YA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b35d					en = *	; remember here
>b351	0a					.byte CL	;wh_CodeLength
.b35d					_runtime:
.b35d	b5 28		lda $28,x			lda DStack+4,x
.b35f	15 29		ora $29,x			ora DStack+5,x
.b361	d0 03		bne $b366			bne _do_abort	; true?
.b363	4c 0d ad	jmp $ad0d			jmp ThreeDrop	; Drop three entries from the Data Stack
.b366					_do_abort:
.b366	20 8a cd	jsr $cd8a			jsr Type	; print string
.b369	20 e2 aa	jsr $aae2			jsr CR		; We follow Gforth in going to a new line
.b36c	a9 fe		lda #$fe			lda #$100+err_AbortQuote
.b36e	4c 2e b4	jmp $b42e			jmp ThrowA
>b371	41 62 6f 72 74			L1:	.text "Abort"	;  name of word as a string, ending at wh_NameLastChar
>b376	85					.byte (("Abort"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b377	ce b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b379	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b37a	08					.byte NN	;wh_Flags	dictionary flags
=45814					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b37b	a9 ff		lda #$ff	Abort:		lda #$100+err_Abort
.b37d	4c 2e b4	jmp $b42e			jmp ThrowA
=5					CL	.var *-(WordListLink+wh_Xt)
=$b380					en = *	; remember here
>b379	05					.byte CL	;wh_CodeLength
>b380	50 6f 70 41			L1:	.text "PopA"	;  name of word as a string, ending at wh_NameLastChar
>b384	24					.byte (("PopA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b385	f6 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b387	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b388	08					.byte NN	;wh_Flags	dictionary flags
=45828					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b389					PopA:
.b389	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b38b	b0 66		bcs $b3f3		bcs Throw_Stack
.b38d	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b38f	e8		inx				inx
.b390	e8		inx				inx
=8					CL	.var *-(WordListLink+wh_Xt)
=$b391					en = *	; remember here
>b387	08					.byte CL	;wh_CodeLength
.b391	60		rts		                rts
.b392					PopA2:
.b392	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b394	b0 5d		bcs $b3f3		bcs Throw_Stack
.b396	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b398	e8		inx				inx
.b399	e8		inx				inx
.b39a	60		rts		                rts
>b39b	50 6f 70 59 41			L1:	.text "PopYA"	;  name of word as a string, ending at wh_NameLastChar
>b3a0	25					.byte (("PopYA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b3a1	04 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b3a3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b3a4	08					.byte NN	;wh_Flags	dictionary flags
=45856					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b3a5					PopYA:
.b3a5	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b3a7	b0 4a		bcs $b3f3		bcs Throw_Stack
.b3a9	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to YA
.b3ab	b4 25		ldy $25,x			ldy DStack+1,x
.b3ad	e8		inx				inx
.b3ae	e8		inx				inx
=10					CL	.var *-(WordListLink+wh_Xt)
=$b3af					en = *	; remember here
>b3a3	0a					.byte CL	;wh_CodeLength
.b3af	60		rts				rts
.b3b0					PopTmp1:
.b3b0	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b3b2	b0 3f		bcs $b3f3		bcs Throw_Stack
.b3b4	b5 24		lda $24,x			lda DStack+0,x	; PopYA
.b3b6	b4 25		ldy $25,x			ldy DStack+1,x
.b3b8	e8		inx				inx
.b3b9	e8		inx				inx
.b3ba	85 14		sta $14				sta tmp1+0
.b3bc	84 15		sty $15				sty tmp1+1
.b3be	60		rts				rts
>b3bf	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_1"	;  name of word as a string, ending at wh_NameLastChar
>b3c7	77 5f 31
>b3ca	2b					.byte (("underflow_1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b3cb	20 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b3cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b3ce	08					.byte NN	;wh_Flags	dictionary flags
=45898					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b3cf					underflow_1:
.b3cf	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b3d1	b0 20		bcs $b3f3		bcs Throw_Stack
=4					CL	.var *-(WordListLink+wh_Xt)
=$b3d3					en = *	; remember here
>b3cd	04					.byte CL	;wh_CodeLength
.b3d3	60		rts				rts
>b3d4	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_2"	;  name of word as a string, ending at wh_NameLastChar
>b3dc	77 5f 32
>b3df	4b					.byte (("underflow_2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b3e0	4a b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b3e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b3e3	08					.byte NN	;wh_Flags	dictionary flags
=45919					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b3e4					underflow_2:
.b3e4	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b3e6	b0 0b		bcs $b3f3		bcs Throw_Stack
=4					CL	.var *-(WordListLink+wh_Xt)
=$b3e8					en = *	; remember here
>b3e2	04					.byte CL	;wh_CodeLength
.b3e8	60		rts		                rts
.b3e9					underflow_3:
.b3e9	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.b3eb	b0 06		bcs $b3f3		bcs Throw_Stack
.b3ed	60		rts		                rts
.b3ee					underflow_4:
.b3ee	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.b3f0	b0 01		bcs $b3f3		bcs Throw_Stack
.b3f2	60		rts		                rts
.b3f3					Throw_Stack:
.b3f3	30 04		bmi $b3f9			bmi _over
.b3f5	a9 fc		lda #$fc			lda #$100+err_Stack_Underflow
.b3f7	d0 35		bne $b42e			bne ThrowA
.b3f9	a9 fd		lda #$fd	_over:		lda #$100+err_Stack_Overflow
.b3fb	d0 31		bne $b42e			bne ThrowA
.b3fd					Throw_FPStack:
.b3fd	30 04		bmi $b403			bmi _over
.b3ff	a9 d3		lda #$d3			lda #$100+err_FPStackUnderflow
.b401	d0 2b		bne $b42e			bne ThrowA
.b403	a9 d4		lda #$d4	_over:		lda #$100+err_FPStackOverflow
.b405	d0 27		bne $b42e			bne ThrowA
.b407					Throw_FpOutOfRange:
.b407	a9 d5		lda #$d5			lda #$100+err_FpOutOfRange
.b409	d0 23		bne $b42e			bne ThrowA
>b40b	3f 53 74 61 63 6b		L1:	.text "?Stack"	;  name of word as a string, ending at wh_NameLastChar
>b411	66					.byte (("?Stack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b412	5f b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b414	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b415	08					.byte NN	;wh_Flags	dictionary flags
=45969					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b416					QStack:
.b416	e0 29		cpx #$29		cpx #-2*0+DStack0+1
.b418	b0 d9		bcs $b3f3		bcs Throw_Stack
.b41a	a4 4c		ldy $4c				ldy fp			; check floating point stack
.b41c	c0 0b		cpy #$0b			cpy #FDim+1
.b41e	b0 dd		bcs $b3fd			bcs Throw_FPStack
=10					CL	.var *-(WordListLink+wh_Xt)
=$b420					en = *	; remember here
>b414	0a					.byte CL	;wh_CodeLength
.b420	60		rts				rts			; all OK
>b421	54 68 72 6f 77			L1:	.text "Throw"	;  name of word as a string, ending at wh_NameLastChar
>b426	e5					.byte (("Throw"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b427	91 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b429	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b42a	08					.byte NN	;wh_Flags	dictionary flags
=45990					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b42b	20 89 b3	jsr $b389	Throw:		jsr PopA		; pop n
.b42e	20 59 b4	jsr $b459	ThrowA:		jsr Type_Exception_Text_A ; print the associated error string
.b431	a2 28		ldx #$28			ldx #DStack0		; reset data stack (in case of underflow)
.b433					Abort_Core:
.b433	20 80 b8	jsr $b880			jsr SLiteral_runtime
.b436	4c 3c b4	jmp $b43c			  jmp +
>b439	3f 00 20					  .text "?",0," "	; signal an error to the simulator
.b43c	20 8a cd	jsr $cd8a	+		jsr Type
.b43f	20 a6 ce	jsr $cea6			jsr R_From		; show return stack TOS
.b442	20 9e 81	jsr $819e			jsr TypeSymbol
.b445	20 c2 ce	jsr $cec2			jsr R_Fetch		; show return stack NOS
.b448	20 9e 81	jsr $819e			jsr TypeSymbol
.b44b	20 e2 aa	jsr $aae2			jsr CR
.b44e					Abort_Core2:
.b44e	a9 08		lda #$08			lda #DoStkDim		; init do stack
.b450	8d 45 07	sta $0745			sta DoStkIndex
.b453	20 9d b4	jsr $b49d			jsr Empty_Stack		; empty the Data Stack & FP stack
.b456	4c ad b4	jmp $b4ad			jmp Quit		; continue into QUIT.
.b459					Type_Exception_Text_A:
.b459	85 16		sta $16				sta tmp2+0	; save error code
.b45b	a9 b9		lda #$b9			lda #<Exception_Text_List
.b45d	a0 da		ldy #$da			ldy #>Exception_Text_List	; for each table entry
.b45f	85 18		sta $18				sta tmp3+0
.b461	84 19		sty $19				sty tmp3+1
.b463	a0 00		ldy #$00	_TestEntry:	ldy #0		;   code match?
.b465	b1 18		lda ($18),y			lda (tmp3),y
.b467	f0 1a		beq $b483			beq _NotFound
.b469	c5 16		cmp $16				cmp tmp2+0
.b46b	f0 11		beq $b47e			beq _Found
.b46d	c8		iny		-		iny		;   step to end of entry
.b46e	b1 18		lda ($18),y			lda (tmp3),y
.b470	d0 fb		bne $b46d			bne -
.b472	98		tya				tya		;   step to next entry
.b473	38		sec				sec
.b474	65 18		adc $18				adc tmp3+0
.b476	85 18		sta $18				sta tmp3+0
.b478	90 e9		bcc $b463			bcc _TestEntry
.b47a	e6 19		inc $19				inc tmp3+1
.b47c	d0 e5		bne $b463			bne _TestEntry
.b47e					_Found:
.b47e	a0 01		ldy #$01			ldy #1
.b480	4c b1 cd	jmp $cdb1			jmp Print_ASCIIZ_tmp3_no_lf
.b483	a0 ff		ldy #$ff	_NotFound:	ldy #$ff		; print code
.b485	a5 16		lda $16				lda tmp2+0
.b487	20 5f b7	jsr $b75f			jsr PushYA
.b48a	4c 7e cb	jmp $cb7e			jmp Dot
>b48d	45 6d 70 74 79 2d 53 74		L1:	.text "Empty-Stack"	;  name of word as a string, ending at wh_NameLastChar
>b495	61 63 6b
>b498	6b					.byte (("Empty-Stack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b499	a6 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b49b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b49c	08					.byte NN	;wh_Flags	dictionary flags
=46104					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b49d	a2 28		ldx #$28	Empty_Stack:	ldx #DStack0	; empty data stack
.b49f	a9 0a		lda #$0a			lda #FDim	; empty FP stack
.b4a1	85 4c		sta $4c				sta fp
=6					CL	.var *-(WordListLink+wh_Xt)
=$b4a3					en = *	; remember here
>b49b	06					.byte CL	;wh_CodeLength
.b4a3	60		rts				rts
>b4a4	51 75 69 74			L1:	.text "Quit"	;  name of word as a string, ending at wh_NameLastChar
>b4a8	84					.byte (("Quit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b4a9	18 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b4ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b4ac	08					.byte NN	;wh_Flags	dictionary flags
=46120					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b4ad					Quit:
.b4ad	8a		txa				txa		; Save the DStack that we just defined
.b4ae	a2 ff		ldx #$ff			ldx #rsp0
.b4b0	9a		txs				txs
.b4b1	aa		tax				tax		; Restore the DStack. Dude, seriously.
.b4b2	a9 00		lda #$00			lda #0		; SOURCE-ID= zero (keyboard input)
.b4b4	85 02		sta $02				sta insrc+0
.b4b6	85 03		sta $03				sta insrc+1
.b4b8	20 ec b6	jsr $b6ec			jsr Left_Bracket_NoCheck ; switch to interpret state
.b4bb					_get_line:
.b4bb	a9 00		lda #$00			lda #<buffer0	; input buffer, this is paranoid
.b4bd	85 04		sta $04				sta cib+0
.b4bf	a9 02		lda #$02			lda #>buffer0
.b4c1	85 05		sta $05				sta cib+1
.b4c3	20 32 c2	jsr $c232			jsr Refill		; ( -- f )
.b4c6	b5 24		lda $24,x			lda DStack+0,x
.b4c8	d0 05		bne $b4cf			bne +
.b4ca	a9 6b		lda #$6b			lda #$100+err_Refill	; REFILL returned a FALSE flag, something went wrong
.b4cc	4c 2e b4	jmp $b42e			jmp ThrowA
.b4cf	e8		inx		+		inx			; drop the flag
.b4d0	e8		inx				inx
.b4d1	20 e8 b4	jsr $b4e8			jsr interpret
.b4d4	a5 0a		lda $0a				lda state
.b4d6	d0 06		bne $b4de			bne _print_compiled
.b4d8	a9 65		lda #$65			lda #<str_ok
.b4da	a0 da		ldy #$da			ldy #>str_ok
.b4dc	d0 04		bne $b4e2			bne _print
.b4de	a9 69		lda #$69	_print_compiled: lda #<str_compiled	; "compile" string
.b4e0	a0 da		ldy #$da			ldy #>str_compiled
.b4e2	20 a5 cd	jsr $cda5	_print:		jsr Print_ASCIIZ_YA
.b4e5	4c bb b4	jmp $b4bb			jmp _get_line
=59					CL	.var *-(WordListLink+wh_Xt)
=$b4e8					en = *	; remember here
>b4ab	3b					.byte CL	;wh_CodeLength
.b4e8					Interpret:
.b4e8					_loop:
.b4e8	20 16 b4	jsr $b416			jsr QStack		; check stack bounds
.b4eb	20 50 ba	jsr $ba50			jsr parse_name		; ( "string" -- addr u )
.b4ee	b5 24		lda $24,x	                lda DStack+0,x		; empty line?
.b4f0	f0 53		beq $b545	                beq _line_done
.b4f2	20 5c cc	jsr $cc5c			jsr Two_dup		; ( addr u -- addr u addr u )
.b4f5	20 8d bc	jsr $bc8d			jsr find_name		; ( addr u addr u -- addr u nt|0 )
.b4f8	b5 25		lda $25,x			lda DStack+1,x		; word found?
.b4fa	d0 1b		bne $b517			bne _got_name_token
.b4fc	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.b4fd	e8		inx		                inx
.b4fe	20 64 b0	jsr $b064	                jsr Number           ; ( addr u -- u|d )
.b501	a5 0a		lda $0a		                lda state		; interpreting?
.b503	f0 e3		beq $b4e8	                beq _loop		;   we're done
.b505	a9 20		lda #$20	                lda #$20		; double cell number?
.b507	24 0c		bit $0c		                bit status
.b509	f0 06		beq $b511	                beq _single_number
.b50b	20 26 b8	jsr $b826			jsr Two_literal		; compile a double number
.b50e	4c e8 b4	jmp $b4e8			jmp _loop
.b511	20 12 b7	jsr $b712	_single_number:	jsr Literal		; compile a single number
.b514	4c e8 b4	jmp $b4e8			jmp _loop
.b517					_got_name_token:
.b517	20 1d c9	jsr $c91d			jsr Nip
.b51a	20 1d c9	jsr $c91d			jsr Nip			; ( nt )
.b51d	85 14		sta $14				sta tmp1+0		; save a work copy of nt
.b51f	84 15		sty $15				sty tmp1+1
.b521	20 97 bd	jsr $bd97			jsr Name_To_Int		; ( nt -- xt )
.b524	a0 84		ldy #$84			ldy #Wh_Flags		; get word flags, we'll need them shortly
.b526	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b528	a4 0a		ldy $0a				ldy state		; interpreting or compiling?
.b52a	d0 0f		bne $b53b			bne _compile
.b52c	29 01		and #$01			and #CO			; is the word COMPILE-ONLY?
.b52e	f0 05		beq $b535			beq _execute
.b530	a9 f2		lda #$f2			lda #$100+err_CompileOnly	;   complain & quit
.b532	4c 2e b4	jmp $b42e			jmp ThrowA
.b535	20 c8 cd	jsr $cdc8	_execute:	jsr Execute		; EXECUTE the xt that is TOS
.b538	4c e8 b4	jmp $b4e8	                jmp _loop
.b53b					_compile:
.b53b	29 04		and #$04			and #IM			; is the word IMMEDIATE?
.b53d	d0 f6		bne $b535			bne _execute		;   IMMEDIATE word, execute now
.b53f	20 58 b6	jsr $b658			jsr Compile_Comma_WithNT ; Compile the xt into the Dictionary
.b542	4c e8 b4	jmp $b4e8			jmp _loop
.b545					_line_done:
.b545	e8		inx				inx			; drop stuff from PARSE_NAME
.b546	e8		inx				inx
.b547	e8		inx				inx
.b548	e8		inx				inx
.b549	60		rts				rts
>b54a	49 6d 6d 65 64 69 61 74		L1:	.text "Immediate"	;  name of word as a string, ending at wh_NameLastChar
>b552	65
>b553	a9					.byte (("Immediate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b554	28 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b556	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b557	08					.byte NN	;wh_Flags	dictionary flags
=46291					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b558	a9 04		lda #$04	Immediate:	lda #IM
.b55a	48		pha		SetFlag:	pha
.b55b	20 21 ba	jsr $ba21			jsr current_to_dp
.b55e	a0 84		ldy #$84			ldy #Wh_Flags
.b560	68		pla				pla
.b561	11 10		ora ($10),y			ora (dp),y
.b563	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b565					en = *	; remember here
>b556	0d					.byte CL	;wh_CodeLength
.b565	60		rts				rts
>b566	43 6f 6d 70 69 6c 65 2d		L1:	.text "Compile-only"	;  name of word as a string, ending at wh_NameLastChar
>b56e	6f 6e 6c 79
>b572	2c					.byte (("Compile-only"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b573	d3 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b575	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b576	08					.byte NN	;wh_Flags	dictionary flags
=46322					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b577	a9 01		lda #$01	Compile_Only:	lda #CO
.b579	d0 df		bne $b55a			bne SetFlag
=4					CL	.var *-(WordListLink+wh_Xt)
=$b57b					en = *	; remember here
>b575	04					.byte CL	;wh_CodeLength
>b57b	6e 65 76 65 72 2d 6e 61		L1:	.text "never-native"	;  name of word as a string, ending at wh_NameLastChar
>b583	74 69 76 65
>b587	ac					.byte (("never-native"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b588	f2 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b58a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b58b	08					.byte NN	;wh_Flags	dictionary flags
=46343					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b58c	20 21 ba	jsr $ba21	Never_Native:	jsr current_to_dp
.b58f	a0 84		ldy #$84			ldy #Wh_Flags
.b591	b1 10		lda ($10),y			lda (dp),y
.b593	09 08		ora #$08			ora #NN		; set NN flag
.b595	29 fd		and #$fd			and #$ff-AN	; clear AN flag
.b597	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b599					en = *	; remember here
>b58a	0d					.byte CL	;wh_CodeLength
.b599	60		rts				rts
>b59a	61 6c 77 61 79 73 2d 6e		L1:	.text "always-native"	;  name of word as a string, ending at wh_NameLastChar
>b5a2	61 74 69 76 65
>b5a7	ad					.byte (("always-native"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b5a8	07 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5aa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5ab	08					.byte NN	;wh_Flags	dictionary flags
=46375					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5ac	20 21 ba	jsr $ba21	Always_Native:	jsr current_to_dp
.b5af	a0 84		ldy #$84			ldy #Wh_Flags
.b5b1	b1 10		lda ($10),y			lda (dp),y
.b5b3	09 02		ora #$02			ora #AN		; Make sure AN flag is set
.b5b5	29 f7		and #$f7			and #$ff-NN	; and NN flag is clear.
.b5b7	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b5b9					en = *	; remember here
>b5aa	0d					.byte CL	;wh_CodeLength
.b5b9	60		rts				rts
>b5ba	61 6c 6c 6f 77 2d 6e 61		L1:	.text "allow-native"	;  name of word as a string, ending at wh_NameLastChar
>b5c2	74 69 76 65
>b5c6	ac					.byte (("allow-native"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b5c7	27 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5c9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5ca	08					.byte NN	;wh_Flags	dictionary flags
=46406					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5cb	20 21 ba	jsr $ba21	Allow_Native:	jsr current_to_dp
.b5ce	a0 84		ldy #$84			ldy #Wh_Flags	; offset for status byte
.b5d0	b1 10		lda ($10),y			lda (dp),y
.b5d2	29 f5		and #$f5			and #$ff-NN-AN	; AN and NN flag is clear.
.b5d4	91 10		sta ($10),y			sta (dp),y
=11					CL	.var *-(WordListLink+wh_Xt)
=$b5d6					en = *	; remember here
>b5c9	0b					.byte CL	;wh_CodeLength
.b5d6	60		rts				rts
>b5d7	6e 63 2d 6c 69 6d 69 74		L1:	.text "nc-limit"	;  name of word as a string, ending at wh_NameLastChar
>b5df	88					.byte (("nc-limit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b5e0	46 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5e3	08					.byte NN	;wh_Flags	dictionary flags
=46431					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5e4	a0 03		ldy #$03			ldy #>nc_limit
.b5e6	a9 02		lda #$02			lda #<nc_limit
.b5e8	4c 5f b7	jmp $b75f			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b5eb					en = *	; remember here
>b5e2	07					.byte CL	;wh_CodeLength
>b5eb	73 74 72 69 70 2d 75 6e		L1:	.text "strip-underflow"	;  name of word as a string, ending at wh_NameLastChar
>b5f3	64 65 72 66 6c 6f 77
>b5fa	ef					.byte (("strip-underflow"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b5fb	5f b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5fd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5fe	08					.byte NN	;wh_Flags	dictionary flags
=46458					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5ff	a0 03		ldy #$03			ldy #>uf_strip
.b601	a9 04		lda #$04			lda #<uf_strip
.b603	4c 5f b7	jmp $b75f			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b606					en = *	; remember here
>b5fd	07					.byte CL	;wh_CodeLength
>b606	70 6f 73 74 70 6f 6e 65		L1:	.text "postpone"	;  name of word as a string, ending at wh_NameLastChar
>b60e	a8					.byte (("postpone"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b60f	7a b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b611	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b612	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=46478					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b613					Postpone:
.b613	20 81 ba	jsr $ba81			jsr parse_name_check	; ( -- addr n )
.b616	20 b9 bc	jsr $bcb9			jsr find_name_check	; ( -- nt | 0 )
.b619	b5 24		lda $24,x			lda DStack+0,x
.b61b	85 14		sta $14				sta tmp1+0
.b61d	b5 25		lda $25,x			lda DStack+1,x
.b61f	85 15		sta $15				sta tmp1+1
.b621	20 97 bd	jsr $bd97			jsr Name_To_Int	; ( nt -- xt )
.b624	a0 84		ldy #$84			ldy #Wh_Flags		; IMMEDIATE word?
.b626	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b628	29 04		and #$04			and #IM
.b62a	f0 03		beq $b62f			beq _not_immediate
.b62c	4c 58 b6	jmp $b658			jmp Compile_Comma_WithNT ; compile it
.b62f					_not_immediate:
.b62f	20 45 b7	jsr $b745			jsr LDYA_Immed_Comma		; compile LDA #; LDY # with xt of the word
.b632	a0 b6		ldy #$b6			ldy #>Compile_Comma_WithNT_YA	; compile COMPILE,
.b634	a9 55		lda #$55			lda #<Compile_Comma_WithNT_YA
.b636	4c e0 cc	jmp $cce0			jmp Jsr_Comma_YA
=38					CL	.var *-(WordListLink+wh_Xt)
=$b639					en = *	; remember here
>b611	26					.byte CL	;wh_CodeLength
>b639	43 6f 6d 70 69 6c 65 2c		L1:	.text "Compile,"	;  name of word as a string, ending at wh_NameLastChar
>b641	88					.byte (("Compile,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b642	8e b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b644	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b645	08					.byte NN	;wh_Flags	dictionary flags
=46529					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b646	20 a5 b3	jsr $b3a5	Compile_Comma:	jsr PopYA		; pop xt (check stack, skippable)
.b649	20 5f b7	jsr $b75f	Compile_Comma_YA: jsr PushYA		; push xt
.b64c	20 02 cf	jsr $cf02			jsr Dup			; ( xt xt )
.b64f	20 3f bd	jsr $bd3f			jsr Int_To_Name		; ( xt nt )	does a dictionary search
.b652	4c 60 b6	jmp $b660			jmp Compile_Comma_B
.b655	20 5f b7	jsr $b75f	Compile_Comma_WithNT_YA: jsr PushYA
.b658					Compile_Comma_WithNT:
.b658	20 02 cf	jsr $cf02			jsr Dup
.b65b	a9 7b		lda #$7b			lda #$100-wh_xt		; convert xt to nt
.b65d	20 e7 c9	jsr $c9e7			jsr Minus_A
.b660					Compile_Comma_B:
.b660	b5 24		lda $24,x			lda DStack+0,x		; tmp5 = nt
.b662	85 1c		sta $1c				sta tmp5+0
.b664	b5 25		lda $25,x			lda DStack+1,x
.b666	85 1d		sta $1d				sta tmp5+1
.b668	f0 36		beq $b6a0			beq _jsr		; no nt found (we have no flags) ?
.b66a	a0 83		ldy #$83			ldy #wh_CodeLength
.b66c	b1 1c		lda ($1c),y			lda (tmp5),y
.b66e	95 24		sta $24,x			sta DStack+0,x		; ( xt u )
.b670	a0 84		ldy #$84			ldy #Wh_Flags		; save word flags
.b672	b1 1c		lda ($1c),y			lda (tmp5),y
.b674	95 25		sta $25,x			sta DStack+1,x
.b676	29 02		and #$02			and #AN			; Always Native (AN) word?
.b678	d0 2b		bne $b6a5			bne _inline
.b67a	b5 25		lda $25,x			lda DStack+1,x		; Never Native (NN) word?
.b67c	29 08		and #$08			and #NN
.b67e	d0 0e		bne $b68e			bne _jsr_opt
.b680	ad 03 03	lda $0303			lda nc_limit+1		; wordsize<=nc_limit?
.b683	d0 20		bne $b6a5			bne _inline
.b685	ad 02 03	lda $0302			lda nc_limit+0
.b688	d5 24		cmp $24,x			cmp DStack+0,x
.b68a	f0 02		beq $b68e			beq _jsr_opt
.b68c	b0 17		bcs $b6a5			bcs _inline
.b68e					_jsr_opt:
.b68e	ad 04 03	lda $0304			lda uf_strip
.b691	f0 0d		beq $b6a0			beq _jsr
.b693	b5 25		lda $25,x			lda DStack+1,x		; underflow strip & not stack strip?
.b695	49 10		eor #$10			eor #UF
.b697	29 50		and #$50			and #UF+R6
.b699	d0 05		bne $b6a0			bne _jsr
.b69b	a9 03		lda #$03			lda #3			; skip the underflow check
.b69d	20 b1 c9	jsr $c9b1			jsr Nos_Plus_A
.b6a0					_jsr:
.b6a0	e8		inx				inx			; Drop len or nt
.b6a1	e8		inx				inx
.b6a2	4c dd cc	jmp $ccdd			jmp Jsr_Comma		; compile jsr, return
.b6a5					_inline:
.b6a5	b5 25		lda $25,x			lda DStack+1,x		; this word contains RTS addr save & restore?
.b6a7	29 40		and #$40			and #R6
.b6a9	f0 0a		beq $b6b5			beq +
.b6ab	a9 06		lda #$06			lda #6			;   Adjust xt: skip over the leading RTS addr save
.b6ad	20 b1 c9	jsr $c9b1			jsr Nos_Plus_A
.b6b0	a9 f4		lda #$f4			lda #$f4		;   Adjust u: omit the leading RTS addr save & trailing RTS addr restore
.b6b2	20 e7 c9	jsr $c9e7			jsr minus_a
.b6b5					+
.b6b5	ad 04 03	lda $0304			lda uf_strip+0		; user wants underflow stripping?
.b6b8	f0 10		beq $b6ca			beq +
.b6ba	b5 25		lda $25,x			lda DStack+1,x		; this word contains underflow checking?
.b6bc	29 10		and #$10			and #UF
.b6be	f0 0a		beq $b6ca			beq +
.b6c0	a9 03		lda #$03			lda #3			;   Adjust xt: Start after underflow check
.b6c2	20 b1 c9	jsr $c9b1			jsr Nos_Plus_A
.b6c5	a9 fd		lda #$fd			lda #$fd		;   Adjust u: omit underflow check
.b6c7	20 e7 c9	jsr $c9e7			jsr minus_a
.b6ca					+
.b6ca	b5 24		lda $24,x			lda DStack+0,x		; compile code bytes
.b6cc	f0 0c		beq $b6da			beq _copy_end
.b6ce	a1 26		lda ($26,x)	_copy_loop:	lda (DStack+2,x)
.b6d0	20 a1 cc	jsr $cca1			jsr C_Comma_A
.b6d3	20 02 ca	jsr $ca02			jsr NOS_One_Plus
.b6d6	d6 24		dec $24,x			dec DStack+0,x
.b6d8	d0 f4		bne $b6ce			bne _copy_loop
.b6da					_copy_end:
.b6da	4c bc c4	jmp $c4bc			jmp Two_drop
=151					CL	.var *-(WordListLink+wh_Xt)
=$b6dd					en = *	; remember here
>b644	97					.byte CL	;wh_CodeLength
>b6dd	5b				L1:	.text "["	;  name of word as a string, ending at wh_NameLastChar
>b6de	61					.byte (("["[-1]&7)<<5)+(*-L1)	;wh_HNL
>b6df	c1 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6e2	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=46686					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6e3	a5 0a		lda $0a		Left_Bracket:	lda state+0		; Already in the interpret state?
.b6e5	d0 05		bne $b6ec			bne Left_Bracket_NoCheck
.b6e7	a9 69		lda #$69			lda #$100+err_AlreadyInterpreting
.b6e9	4c 2e b4	jmp $b42e			jmp ThrowA
.b6ec					Left_Bracket_NoCheck:
.b6ec	a9 00		lda #$00			lda #0
.b6ee	85 0a		sta $0a		Left_Bracket_3:	sta state+0
.b6f0	85 0b		sta $0b				sta state+1
=15					CL	.var *-(WordListLink+wh_Xt)
=$b6f2					en = *	; remember here
>b6e1	0f					.byte CL	;wh_CodeLength
.b6f2	60		rts				rts
>b6f3	5d				L1:	.text "]"	;  name of word as a string, ending at wh_NameLastChar
>b6f4	a1					.byte (("]"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b6f5	5e b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6f8	0c					.byte IM+NN	;wh_Flags	dictionary flags
=46708					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6f9					Right_Bracket:
.b6f9	a5 0a		lda $0a				lda state+0		; Already in the compile state?
.b6fb	f0 05		beq $b702			beq +
.b6fd	a9 68		lda #$68			lda #$100+err_AlreadyCompiling ;   complain and quit
.b6ff	4c 2e b4	jmp $b42e			jmp ThrowA
.b702					+
.b702	a9 ff		lda #$ff			lda #$FF
.b704	d0 e8		bne $b6ee			bne Left_Bracket_3
=13					CL	.var *-(WordListLink+wh_Xt)
=$b706					en = *	; remember here
>b6f7	0d					.byte CL	;wh_CodeLength
>b706	4c 69 74 65 72 61 6c		L1:	.text "Literal"	;  name of word as a string, ending at wh_NameLastChar
>b70d	87					.byte (("Literal"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b70e	74 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b710	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b711	1d					.byte IM+CO+UF+NN	;wh_Flags	dictionary flags
=46733					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b712					Literal:
.b712	20 cf b3	jsr $b3cf			jsr underflow_1
.b715	20 1b b7	jsr $b71b			jsr LitCompile		; compile load regs, choose a runtime routine
.b718	4c 55 b6	jmp $b655			jmp Compile_Comma_WithNT_YA ; compile JSR runtime
=9					CL	.var *-(WordListLink+wh_Xt)
=$b71b					en = *	; remember here
>b710	09					.byte CL	;wh_CodeLength
.b71b					LitCompile:
.b71b	b5 25		lda $25,x			lda DStack+1,x		; hi byte zero?
.b71d	f0 08		beq $b727			beq _ZByte
.b71f	20 45 b7	jsr $b745			jsr ldya_immed_comma	; compile "ldy #; lda #" using TOS
.b722	a9 5f		lda #$5f			lda #<PushYA		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b724	a0 b7		ldy #$b7			ldy #>PushYA
.b726	60		rts				rts
.b727					_ZByte:
.b727	b4 24		ldy $24,x			ldy DStack+0,x		; is it 0 ?
.b729	f0 08		beq $b733			beq _zero
.b72b	20 4c b7	jsr $b74c			jsr lda_immed_comma	; compile "lda #" using TOS
.b72e	a9 a1		lda #$a1			lda #<PushZA		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b730	a0 b7		ldy #$b7			ldy #>PushZA
.b732	60		rts				rts
.b733	e8		inx		_zero:		inx			; drop
.b734	e8		inx				inx
.b735	a9 b0		lda #$b0			lda #<Zero		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b737	a0 b7		ldy #$b7			ldy #>Zero
.b739	60		rts				rts
>b73a	4c 44 59 41 23 2c		L1:	.text "LDYA#,"	;  name of word as a string, ending at wh_NameLastChar
>b740	86					.byte (("LDYA#,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b741	8d b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b743	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b744	08					.byte NN	;wh_Flags	dictionary flags
=46784					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b745					ldya_immed_comma:
.b745	a9 a0		lda #$a0			lda #$a0		; ldy #
.b747	b4 25		ldy $25,x			ldy DStack+1,x
.b749	20 bb cc	jsr $ccbb			jsr Comma_YA
.b74c					lda_immed_comma:
.b74c	a9 a9		lda #$a9			lda #$a9		; lda #
.b74e	20 a1 cc	jsr $cca1			jsr C_Comma_A
.b751	4c 9e cc	jmp $cc9e			jmp C_Comma
=15					CL	.var *-(WordListLink+wh_Xt)
=$b754					en = *	; remember here
>b743	0f					.byte CL	;wh_CodeLength
>b754	50 75 73 68 59 41		L1:	.text "PushYA"	;  name of word as a string, ending at wh_NameLastChar
>b75a	26					.byte (("PushYA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b75b	c0 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b75d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b75e	00					.byte 0	;wh_Flags	dictionary flags
=46810					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b75f	ca		dex		PushYA:		dex
.b760	ca		dex				dex
.b761	95 24		sta $24,x			sta DStack+0,x
.b763	94 25		sty $25,x			sty DStack+1,x
=6					CL	.var *-(WordListLink+wh_Xt)
=$b765					en = *	; remember here
>b75d	06					.byte CL	;wh_CodeLength
.b765	60		rts				rts
>b766	42 61 73 65			L1:	.text "Base"	;  name of word as a string, ending at wh_NameLastChar
>b76a	a4					.byte (("Base"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b76b	da b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b76d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b76e	08					.byte NN	;wh_Flags	dictionary flags
=46826					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b76f	a0 03		ldy #$03			ldy #>base
.b771	a9 00		lda #$00			lda #<base
.b773	4c 5f b7	jmp $b75f			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b776					en = *	; remember here
>b76d	07					.byte CL	;wh_CodeLength
>b776	54 72 75 65			L1:	.text "True"	;  name of word as a string, ending at wh_NameLastChar
>b77a	a4					.byte (("True"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b77b	ea b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b77d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b77e	00					.byte 0	;wh_Flags	dictionary flags
=46842					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b77f	a9 ff		lda #$ff	True:		lda #$FF
.b781	ca		dex		PushAA:		dex
.b782	ca		dex				dex
.b783	95 24		sta $24,x			sta DStack+0,x
.b785	95 25		sta $25,x			sta DStack+1,x
=8					CL	.var *-(WordListLink+wh_Xt)
=$b787					en = *	; remember here
>b77d	08					.byte CL	;wh_CodeLength
.b787	60		rts				rts
>b788	46 61 6c 73 65			L1:	.text "False"	;  name of word as a string, ending at wh_NameLastChar
>b78d	a5					.byte (("False"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b78e	fa b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b790	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b791	08					.byte NN	;wh_Flags	dictionary flags
=46861					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b792	a9 00		lda #$00	False:		lda #0
.b794	f0 0b		beq $b7a1			beq PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b796					en = *	; remember here
>b790	04					.byte CL	;wh_CodeLength
>b796	50 75 73 68 5a 41		L1:	.text "PushZA"	;  name of word as a string, ending at wh_NameLastChar
>b79c	26					.byte (("PushZA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b79d	0d b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b79f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7a0	00					.byte 0	;wh_Flags	dictionary flags
=46876					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7a1	ca		dex		PushZA:		dex
.b7a2	ca		dex				dex
.b7a3	95 24		sta $24,x			sta DStack+0,x
.b7a5	a9 00		lda #$00			lda #0
.b7a7	95 25		sta $25,x			sta DStack+1,x
=8					CL	.var *-(WordListLink+wh_Xt)
=$b7a9					en = *	; remember here
>b79f	08					.byte CL	;wh_CodeLength
.b7a9	60		rts				rts
>b7aa	30				L1:	.text "0"	;  name of word as a string, ending at wh_NameLastChar
>b7ab	01					.byte (("0"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7ac	1c b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7ae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7af	08					.byte NN	;wh_Flags	dictionary flags
=46891					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7b0	a9 00		lda #$00	Zero:		lda #0
.b7b2	f0 ed		beq $b7a1			beq PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b7b4					en = *	; remember here
>b7ae	04					.byte CL	;wh_CodeLength
>b7b4	31				L1:	.text "1"	;  name of word as a string, ending at wh_NameLastChar
>b7b5	21					.byte (("1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7b6	2b b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7b8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7b9	08					.byte NN	;wh_Flags	dictionary flags
=46901					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7ba	a9 01		lda #$01	One:		lda #1
.b7bc	d0 e3		bne $b7a1			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b7be					en = *	; remember here
>b7b8	04					.byte CL	;wh_CodeLength
>b7be	32				L1:	.text "2"	;  name of word as a string, ending at wh_NameLastChar
>b7bf	41					.byte (("2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7c0	35 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7c3	08					.byte NN	;wh_Flags	dictionary flags
=46911					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7c4	a9 02		lda #$02	Two:		lda #2
.b7c6	d0 d9		bne $b7a1			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b7c8					en = *	; remember here
>b7c2	04					.byte CL	;wh_CodeLength
>b7c8	42 6c				L1:	.text "Bl"	;  name of word as a string, ending at wh_NameLastChar
>b7ca	82					.byte (("Bl"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7cb	3f b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7ce	08					.byte NN	;wh_Flags	dictionary flags
=46922					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7cf	a9 20		lda #$20	Bl:		lda #AscSP
.b7d1	d0 ce		bne $b7a1			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b7d3					en = *	; remember here
>b7cd	04					.byte CL	;wh_CodeLength
>b7d3	3e 49 6e			L1:	.text ">In"	;  name of word as a string, ending at wh_NameLastChar
>b7d6	c3					.byte ((">In"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7d7	4a b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7d9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7da	08					.byte NN	;wh_Flags	dictionary flags
=46934					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7db	a9 08		lda #$08			lda #ToIn
.b7dd	4c a1 b7	jmp $b7a1			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b7e0					en = *	; remember here
>b7d9	05					.byte CL	;wh_CodeLength
>b7e0	53 74 61 74 65			L1:	.text "State"	;  name of word as a string, ending at wh_NameLastChar
>b7e5	a5					.byte (("State"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7e6	56 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7e8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7e9	08					.byte NN	;wh_Flags	dictionary flags
=46949					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7ea	a9 0a		lda #$0a			lda #state
.b7ec	4c a1 b7	jmp $b7a1			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b7ef					en = *	; remember here
>b7e8	05					.byte CL	;wh_CodeLength
>b7ef	64 70				L1:	.text "dp"	;  name of word as a string, ending at wh_NameLastChar
>b7f1	02					.byte (("dp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7f2	65 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7f4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7f5	08					.byte NN	;wh_Flags	dictionary flags
=46961					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7f6	a9 10		lda #$10			lda #dp
.b7f8	4c a1 b7	jmp $b7a1			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b7fb					en = *	; remember here
>b7f4	05					.byte CL	;wh_CodeLength
>b7fb	54 6d 70 31			L1:	.text "Tmp1"	;  name of word as a string, ending at wh_NameLastChar
>b7ff	24					.byte (("Tmp1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b800	71 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b802	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b803	08					.byte NN	;wh_Flags	dictionary flags
=46975					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b804	a9 14		lda #$14			lda #tmp1
.b806	4c a1 b7	jmp $b7a1			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b809					en = *	; remember here
>b802	05					.byte CL	;wh_CodeLength
>b809	44 53 74 61 63 6b		L1:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
>b80f	66					.byte (("DStack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b810	7f b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b812	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b813	08					.byte NN	;wh_Flags	dictionary flags
=46991					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b814	a9 24		lda #$24			lda #DStack
.b816	4c a1 b7	jmp $b7a1			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b819					en = *	; remember here
>b812	05					.byte CL	;wh_CodeLength
>b819	32 4c 69 74 65 72 61 6c		L1:	.text "2Literal"	;  name of word as a string, ending at wh_NameLastChar
>b821	88					.byte (("2Literal"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b822	8f b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b824	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b825	1c					.byte UF+IM+NN	;wh_Flags	dictionary flags
=47009					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b826					Two_literal:
.b826	20 e4 b3	jsr $b3e4			jsr underflow_2 ; double number
.b829	20 20 cf	jsr $cf20			jsr Swap
.b82c	20 12 b7	jsr $b712			jsr Literal	; do lo cell
.b82f	4c 12 b7	jmp $b712			jmp Literal	; do hi cell
=12					CL	.var *-(WordListLink+wh_Xt)
=$b832					en = *	; remember here
>b824	0c					.byte CL	;wh_CodeLength
>b832	53 4c 69 74 65 72 61 6c		L1:	.text "SLiteral"	;  name of word as a string, ending at wh_NameLastChar
>b83a	88					.byte (("SLiteral"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b83b	a1 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b83d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b83e	1d					.byte CO+IM+UF+NN	;wh_Flags	dictionary flags
=47034					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b83f					SLiteral:
.b83f	20 e4 b3	jsr $b3e4			jsr underflow_2
.b842	20 62 b8	jsr $b862			jsr SLiteral_Start	; compile header
.b845	4c 56 b8	jmp $b856			jmp _Move_Test
.b848	a1 28		lda ($28,x)	_Move_Loop:	lda (DStack+4,x)
.b84a	20 a1 cc	jsr $cca1			jsr C_Comma_A
.b84d	f6 28		inc $28,x			inc DStack+4,x
.b84f	d0 02		bne $b853			bne +
.b851	f6 29		inc $29,x			inc DStack+5,x
.b853					+
.b853	20 de c9	jsr $c9de			jsr NOS_One_Minus
.b856	b5 26		lda $26,x	_Move_Test:	lda DStack+2,x
.b858	15 27		ora $27,x			ora DStack+3,x
.b85a	d0 ec		bne $b848			bne _Move_Loop
.b85c	20 6f b8	jsr $b86f			jsr SLiteral_End
.b85f	4c bc c4	jmp $c4bc			jmp Two_Drop		; clean up and leave
=35					CL	.var *-(WordListLink+wh_Xt)
=$b862					en = *	; remember here
>b83d	23					.byte CL	;wh_CodeLength
.b862					SLiteral_Start:
.b862	a9 80		lda #$80			lda #<SLiteral_runtime	; compile JSR SLiteral_Runtime
.b864	a0 b8		ldy #$b8			ldy #>SLiteral_runtime
.b866	20 e0 cc	jsr $cce0			jsr Jsr_Comma_YA
.b869	20 c4 c9	jsr $c9c4			jsr Here		; push addr of start of JMP
.b86c	4c f7 cc	jmp $ccf7			jmp Jmp_Comma_YA	; compile JMP around string (dummy addr)
.b86f					SLiteral_End:
.b86f	20 f8 c9	jsr $c9f8			jsr One_Plus
.b872	a5 00		lda $00				lda cp+0		; Update the address of the jump to HERE.
.b874	81 24		sta ($24,x)			sta (DStack+0,x)
.b876	20 f8 c9	jsr $c9f8			jsr One_Plus
.b879	a5 01		lda $01				lda cp+1
.b87b	81 24		sta ($24,x)			sta (DStack+0,x)
.b87d	e8		inx				inx			; drop herej
.b87e	e8		inx				inx
.b87f	60		rts				rts
.b880					SLiteral_Runtime:
.b880	86 16		stx $16				stx tmp2	; save data stack index
.b882	ba		tsx				tsx
.b883	bd 01 01	lda $0101,x	SLiteral_Run2:	lda RStack+1,x	; tmp1= RTS addr
.b886	85 14		sta $14				sta tmp1+0
.b888	bd 02 01	lda $0102,x			lda RStack+2,x
.b88b	85 15		sta $15				sta tmp1+1
.b88d	a6 16		ldx $16				ldx tmp2	; restore data stack index
.b88f	ca		dex				dex		; push string addr
.b890	ca		dex				dex
.b891	18		clc				clc
.b892	a5 14		lda $14				lda tmp1+0
.b894	69 04		adc #$04			adc #3+1	;   just after the following JMP + correcting for JSR behavior
.b896	95 24		sta $24,x			sta DStack+0,x
.b898	a5 15		lda $15				lda tmp1+1
.b89a	69 00		adc #$00			adc #0
.b89c	95 25		sta $25,x			sta DStack+1,x
.b89e	ca		dex				dex		; push string length
.b89f	ca		dex				dex
.b8a0	38		sec				sec
.b8a1	a0 02		ldy #$02			ldy #2		;   = string_end - string_addr
.b8a3	b1 14		lda ($14),y			lda (tmp1),y
.b8a5	f5 26		sbc $26,x			sbc DStack+2,x
.b8a7	95 24		sta $24,x			sta DStack+0,x
.b8a9	c8		iny				iny
.b8aa	b1 14		lda ($14),y			lda (tmp1),y
.b8ac	f5 27		sbc $27,x			sbc DStack+3,x
.b8ae	95 25		sta $25,x			sta DStack+1,x
.b8b0	60		rts				rts
>b8b1	2e 22				L1:	.text '."'	;  name of word as a string, ending at wh_NameLastChar
>b8b3	42					.byte (('."'[-1]&7)<<5)+(*-L1)	;wh_HNL
>b8b4	ba b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b8b6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b8b7	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=47155					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b8b8					Dot_quote:
.b8b8	20 c9 b8	jsr $b8c9			jsr S_Quote		; compile the string literal
.b8bb	a0 cd		ldy #$cd			ldy #>Type		; compile: print string
.b8bd	a9 8a		lda #$8a			lda #<Type
.b8bf	4c e0 cc	jmp $cce0			jmp Jsr_Comma_YA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b8c2					en = *	; remember here
>b8b6	0a					.byte CL	;wh_CodeLength
>b8c2	53 22				L1:	.text 'S"'	;  name of word as a string, ending at wh_NameLastChar
>b8c4	42					.byte (('S"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>b8c5	33 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b8c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b8c8	0c					.byte IM+NN	;wh_Flags	dictionary flags
=47172					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b8c9					S_Quote:
.b8c9	a9 00		lda #$00			lda #0		; Don't handle escaped chars.
.b8cb					S_Quote_start:
.b8cb	48		pha				pha			; save "handle escaped chars" flag
.b8cc	a5 0a		lda $0a				lda state		; compiling?
.b8ce	f0 06		beq $b8d6			beq _15
.b8d0	20 62 b8	jsr $b862			jsr SLiteral_Start	; compile SLiteral header
.b8d3	4c d9 b8	jmp $b8d9			jmp _19
.b8d6	20 c4 c9	jsr $c9c4	_15:		jsr Here		; remember start addr
.b8d9					_19:
.b8d9	68		pla				pla			; init t2 flags
.b8da	20 a1 b7	jsr $b7a1			jsr PushZA
.b8dd	20 b0 b7	jsr $b7b0			jsr Zero		; init t3 flags
.b8e0					_savechars_loop:
.b8e0	a5 08		lda $08				lda toin+0		; LSB
.b8e2	c5 06		cmp $06				cmp ciblen+0
.b8e4	a5 09		lda $09				lda toin+1		; MSB
.b8e6	e5 07		sbc $07				sbc ciblen+1
.b8e8	90 10		bcc $b8fa			bcc _input_fine		; input buffer empty?
.b8ea	20 32 c2	jsr $c232			jsr Refill		; Refill it  ( -- f )
.b8ed	b5 24		lda $24,x			lda DStack+0,x		; Check result of refill.
.b8ef	d0 05		bne $b8f6			bne +
.b8f1	a9 6b		lda #$6b			lda #$100+err_refill	; Something when wrong with refill.
.b8f3	4c 2e b4	jmp $b42e			jmp ThrowA
.b8f6	e8		inx		+		inx			; Drop the refill flag
.b8f7	e8		inx				inx
.b8f8	d0 e6		bne $b8e0			bne _savechars_loop	; jump back up to the empty check, just in
.b8fa					_input_fine:
.b8fa	18		clc				clc			; tmp1= A= the char at Cib+ToIn
.b8fb	a5 04		lda $04				lda cib+0
.b8fd	85 14		sta $14				sta tmp1+0
.b8ff	a5 05		lda $05				lda cib+1
.b901	65 09		adc $09				adc toin+1
.b903	85 15		sta $15				sta tmp1+1
.b905	a4 08		ldy $08				ldy ToIn
.b907	b1 14		lda ($14),y			lda (tmp1),y
.b909	85 14		sta $14				sta tmp1
.b90b	e6 08		inc $08				inc toin+0		; Move on to the next character.
.b90d	d0 02		bne $b911			bne +
.b90f	e6 09		inc $09				inc toin+1
.b911					+
.b911	b4 26		ldy $26,x			ldy DStack+2,x		; handling escaped characters?
.b913	30 03		bmi $b918			bmi +
.b915	4c bb b9	jmp $b9bb			jmp _regular_char
.b918					+
.b918	b4 27		ldy $27,x			ldy DStack+3,x  		; already seen the backslash?
.b91a	30 03		bmi $b91f			bmi +
.b91c	4c b1 b9	jmp $b9b1			jmp _not_escaped
.b91f					+
.b91f	84 15		sty $15				sty tmp1+1
.b921	24 15		bit $15				bit tmp1+1		; in the middle of a \x sequence ?
.b923	70 25		bvs $b94a			bvs _check_esc_chars
.b925	a9 01		lda #$01			lda #1
.b927	24 15		bit $15				bit tmp1+1
.b929	d0 11		bne $b93c			bne _esc_x_second_digit
.b92b	c8		iny				iny			; Adjust flag for second digit next time.
.b92c	94 27		sty $27,x			sty DStack+3,x
.b92e	a5 14		lda $14				lda tmp1+0		; Get the char again.
.b930	20 de b9	jsr $b9de			jsr convert_hex_value	; Convert to hex
.b933	0a		asl a				asl			; This is the upper nybble, so move it up.
.b934	0a		asl a				asl
.b935	0a		asl a				asl
.b936	0a		asl a				asl
.b937	95 24		sta $24,x			sta DStack+0,x		; Save it for later.
.b939	4c c2 b9	jmp $b9c2			jmp _next_character
.b93c					_esc_x_second_digit:
.b93c	a9 00		lda #$00			lda #0			; Clear the escaped character flag
.b93e	95 27		sta $27,x			sta DStack+3,x		;   (because we are handling it right here)
.b940	a5 14		lda $14				lda tmp1+0		; Convert to hex
.b942	20 de b9	jsr $b9de			jsr convert_hex_value
.b945	15 24		ora $24,x			ora DStack+0,x		; combine with value in t3
.b947	4c bf b9	jmp $b9bf			jmp _save_character
.b94a					_check_esc_chars:
.b94a	a0 00		ldy #$00			ldy #0
.b94c	94 27		sty $27,x			sty DStack+3,x
.b94e	a8		tay				tay
.b94f	a9 07		lda #$07			lda #AscBELL	      ; BEL (ASCII value 7)
.b951	c0 61		cpy #$61			cpy #'a'
.b953	f0 6a		beq $b9bf			beq _save_character
.b955	a9 08		lda #$08			lda #AscBS	      ; Backspace (ASCII value 8)
.b957	c0 62		cpy #$62			cpy #'b'
.b959	f0 64		beq $b9bf			beq _save_character
.b95b	a9 1b		lda #$1b			lda #AscESC	       ; ESC (ASCII value 27)
.b95d	c0 65		cpy #$65			cpy #'e'
.b95f	f0 5e		beq $b9bf			beq _save_character
.b961	a9 0c		lda #$0c			lda #AscFF	       ; FF (ASCII value 12)
.b963	c0 66		cpy #$66			cpy #'f'
.b965	f0 58		beq $b9bf			beq _save_character
.b967	a9 0a		lda #$0a			lda #AscLF	       ; LF (ASCII value 10)
.b969	c0 6c		cpy #$6c			cpy #'l'
.b96b	f0 52		beq $b9bf			beq _save_character
.b96d	c0 6e		cpy #$6e			cpy #'n'
.b96f	f0 4e		beq $b9bf			beq _save_character
.b971	c0 6d		cpy #$6d			cpy #'m'
.b973	d0 09		bne $b97e			bne +
.b975	a9 0d		lda #$0d			lda #AscCR		; CR/LF pair (ASCII values 13, 10)
.b977	20 a1 cc	jsr $cca1			jsr C_Comma_A
.b97a	a9 0a		lda #$0a			lda #AscLF
.b97c	d0 41		bne $b9bf			bne _save_character
.b97e					+
.b97e	a9 22		lda #$22			lda #AscDQuote		; Double quote (ASCII value 34)
.b980	c0 71		cpy #$71			cpy #'q'
.b982	f0 3b		beq $b9bf			beq _save_character
.b984	c0 22		cpy #$22			cpy #AscDQuote
.b986	f0 37		beq $b9bf			beq _save_character
.b988	a9 0d		lda #$0d			lda #AscCR		; CR (ASCII value 13)
.b98a	c0 72		cpy #$72			cpy #'r'
.b98c	f0 31		beq $b9bf			beq _save_character
.b98e	a9 09		lda #$09			lda #AscHT		; Horizontal TAB (ASCII value 9)
.b990	c0 74		cpy #$74			cpy #'t'
.b992	f0 2b		beq $b9bf			beq _save_character
.b994	a9 0b		lda #$0b			lda #AscVT		; Vertical TAB (ASCII value 11)
.b996	c0 76		cpy #$76			cpy #'v'
.b998	f0 25		beq $b9bf			beq _save_character
.b99a	a9 00		lda #$00			lda #0			; NULL (ASCII value 0)
.b99c	c0 7a		cpy #$7a			cpy #'z'
.b99e	f0 1f		beq $b9bf			beq _save_character
.b9a0					_check_esc_x:
.b9a0	c0 78		cpy #$78			cpy #'x'
.b9a2	d0 06		bne $b9aa			bne +
.b9a4	a9 be		lda #$be			lda #$BE	; Clear bits 6 and 0
.b9a6	95 27		sta $27,x			sta DStack+3,x
.b9a8	d0 18		bne $b9c2			bne _next_character
.b9aa					+
.b9aa	a9 5c		lda #$5c			lda #AscBackslash	; Backslash (ASCII value 92)
.b9ac	c0 5c		cpy #$5c			cpy #AscBackslash
.b9ae	f0 0f		beq $b9bf			beq _save_character
.b9b0	98		tya				tya
.b9b1					_not_escaped:
.b9b1	c9 5c		cmp #$5c			cmp #$5C	; The backslash char
.b9b3	d0 06		bne $b9bb			bne _regular_char
.b9b5	a9 ff		lda #$ff			lda #$FF
.b9b7	95 27		sta $27,x			sta DStack+3,x
.b9b9	d0 07		bne $b9c2			bne _next_character
.b9bb					_regular_char:
.b9bb	c9 22		cmp #$22			cmp #AscDQuote		; ASCII for "
.b9bd	f0 06		beq $b9c5			beq _found_string_end
.b9bf					_save_character:
.b9bf	20 a1 cc	jsr $cca1			jsr C_Comma_A		; compile this character into the dictionary
.b9c2					_next_character:
.b9c2	4c e0 b8	jmp $b8e0			jmp _savechars_loop
.b9c5					_found_string_end:
.b9c5	e8		inx				inx			; Drop t3
.b9c6	e8		inx				inx
.b9c7	a5 0a		lda $0a				lda state		; What happens next depends on the state (which is bad, but
.b9c9	d0 0e		bne $b9d9			bne _cmpl		; that's the way it works at the moment).
.b9cb	38		sec				sec			; TOS= length of string = Here - start_addr
.b9cc	a5 00		lda $00				lda cp+0
.b9ce	f5 26		sbc $26,x			sbc DStack+2,x
.b9d0	95 24		sta $24,x			sta DStack+0,x		;   LSB
.b9d2	a5 01		lda $01				lda cp+1
.b9d4	f5 27		sbc $27,x			sbc DStack+3,x
.b9d6	95 25		sta $25,x			sta DStack+1,x		;   MSB
.b9d8	60		rts				rts			; ( startaddr u )
.b9d9					_cmpl:
.b9d9	e8		inx				inx			; Drop t2
.b9da	e8		inx				inx
.b9db	4c 6f b8	jmp $b86f			jmp SLiteral_End	; ( jmpaddr )
=277					CL	.var *-(WordListLink+wh_Xt)
=$ff					CL	 .var $ff
=$b9de					en = *	; remember here
>b8c7	ff					.byte CL	;wh_CodeLength
.b9de					convert_hex_value:
.b9de	c9 41		cmp #$41			cmp #'A'
.b9e0	90 05		bcc $b9e7			bcc _digit
.b9e2	29 1f		and #$1f	_alpha:		and #$1F		; Make it uppercase.
.b9e4	69 08		adc #$08			adc #9-1		; gives value 10 for 'A'
.b9e6	60		rts				rts
.b9e7					_digit:
.b9e7	e9 2f		sbc #$2f			sbc #'0'-1
.b9e9	60		rts				rts
>b9ea	53 5c 22			L1:	.text 'S\"'	;  name of word as a string, ending at wh_NameLastChar
>b9ed	43					.byte (('S\"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>b9ee	44 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b9f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b9f1	0c					.byte IM+NN	;wh_Flags	dictionary flags
=47469					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b9f2					S_Backslash_Quote:
.b9f2	a9 ff		lda #$ff			lda #$ff	; Do handle escaped chars.
.b9f4	4c cb b8	jmp $b8cb			jmp S_Quote_start
=5					CL	.var *-(WordListLink+wh_Xt)
=$b9f7					en = *	; remember here
>b9f0	05					.byte CL	;wh_CodeLength
>b9f7	4c 61 74 65 73 74 58 74		L1:	.text "LatestXt"	;  name of word as a string, ending at wh_NameLastChar
>b9ff	88					.byte (("LatestXt"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ba00	6d b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba02	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba03	08					.byte NN	;wh_Flags	dictionary flags
=47487					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba04	20 17 ba	jsr $ba17	LatestXt:	jsr LatestNt	; ( nt )
.ba07	4c 97 bd	jmp $bd97			jmp Name_To_Int	; ( xt )
=6					CL	.var *-(WordListLink+wh_Xt)
=$ba0a					en = *	; remember here
>ba02	06					.byte CL	;wh_CodeLength
>ba0a	4c 61 74 65 73 74 4e 74		L1:	.text "LatestNt"	;  name of word as a string, ending at wh_NameLastChar
>ba12	88					.byte (("LatestNt"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ba13	7f b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba15	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba16	08					.byte NN	;wh_Flags	dictionary flags
=47506					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba17	20 21 ba	jsr $ba21	LatestNt:	jsr current_to_dp
.ba1a	a5 10		lda $10				lda dp+0
.ba1c	a4 11		ldy $11				ldy dp+1
.ba1e	4c 5f b7	jmp $b75f			jmp PushYA
=10					CL	.var *-(WordListLink+wh_Xt)
=$ba21					en = *	; remember here
>ba15	0a					.byte CL	;wh_CodeLength
.ba21					current_to_dp:
.ba21	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.ba24	0a		asl a				asl			; dp= wordlists[A]
.ba25	a8		tay				tay
.ba26	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.ba29	85 10		sta $10				sta dp+0
.ba2b	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.ba2e	85 11		sta $11				sta dp+1
.ba30	60		rts				rts
.ba31					dp_to_current:
.ba31	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.ba34	0a		asl a		                asl			; wordlists[A]=dp
.ba35	a8		tay		                tay
.ba36	a5 10		lda $10		                lda dp+0
.ba38	99 12 03	sta $0312,y			sta WordlistsV+0,y
.ba3b	a5 11		lda $11		                lda dp+1
.ba3d	99 13 03	sta $0313,y	                sta WordlistsV+1,y
.ba40	60		rts		                rts
>ba41	50 61 72 73 65 2d 4e 61		L1:	.text "Parse-Name"	;  name of word as a string, ending at wh_NameLastChar
>ba49	6d 65
>ba4b	aa					.byte (("Parse-Name"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ba4c	92 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba4e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba4f	08					.byte NN	;wh_Flags	dictionary flags
=47563					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba50					Parse_Name:
.ba50	a5 04		lda $04				lda cib+0		; tmp2= cib+(toin & $ff00)
.ba52	85 16		sta $16				sta tmp2+0
.ba54	18		clc				clc
.ba55	a5 05		lda $05				lda cib+1
.ba57	65 09		adc $09				adc toin+1
.ba59	85 17		sta $17				sta tmp2+1
.ba5b	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.ba5d					_skip_loop:
.ba5d	c4 06		cpy $06				cpy ciblen+0		; more chars left?
.ba5f	a5 09		lda $09				lda toin+1
.ba61	e5 07		sbc $07				sbc ciblen+1
.ba63	b0 11		bcs $ba76			bcs _empty_line
.ba65	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.ba67	c9 21		cmp #$21			cmp #AscSP+1		; is_whitespace
.ba69	b0 10		bcs $ba7b			bcs _char_found
.ba6b	c8		iny				iny			; increment toin
.ba6c	84 08		sty $08				sty toin+0
.ba6e	d0 ed		bne $ba5d			bne _skip_loop
.ba70	e6 09		inc $09				inc toin+1
.ba72	e6 17		inc $17				inc tmp2+1
.ba74	d0 e7		bne $ba5d			bne _skip_loop
.ba76					_empty_line:
.ba76	ca		dex				dex			; junk address
.ba77	ca		dex				dex
.ba78	4c b0 b7	jmp $b7b0			jmp Zero		; length=0
.ba7b					_char_found:
.ba7b	20 cf b7	jsr $b7cf			jsr Bl			; push delimiter char
.ba7e	4c 98 ba	jmp $ba98			jmp Parse
=49					CL	.var *-(WordListLink+wh_Xt)
=$ba81					en = *	; remember here
>ba4e	31					.byte CL	;wh_CodeLength
.ba81					parse_name_check:
.ba81	20 50 ba	jsr $ba50			jsr parse_name		; get character from string
.ba84	b5 24		lda $24,x			lda DStack+0,x		; empty string?
.ba86	f0 01		beq $ba89			beq _empty
.ba88	60		rts				rts
.ba89	a9 f3		lda #$f3	_empty:		lda #$100+err_UndefinedWord	; complain & abort
.ba8b	4c 2e b4	jmp $b42e			jmp ThrowA
>ba8e	50 61 72 73 65			L1:	.text "Parse"	;  name of word as a string, ending at wh_NameLastChar
>ba93	a5					.byte (("Parse"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ba94	cb b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba96	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba97	08					.byte NN	;wh_Flags	dictionary flags
=47635					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba98	20 89 b3	jsr $b389	Parse:		jsr PopA		; pop c (check for underflow)
.ba9b	85 1c		sta $1c		Parse_A:	sta tmp5		; save delimiter
.ba9d	ca		dex				dex			; alloc space for addr
.ba9e	ca		dex				dex
.ba9f	ca		dex				dex			; alloc space for length
.baa0	ca		dex				dex
.baa1	18		clc				clc			; addr= cib+toin
.baa2	a5 08		lda $08				lda toin+0
.baa4	65 04		adc $04				adc cib+0
.baa6	95 26		sta $26,x			sta DStack+2,x
.baa8	a5 09		lda $09				lda toin+1
.baaa	65 05		adc $05				adc cib+1
.baac	95 27		sta $27,x			sta DStack+3,x
.baae	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.bab0	84 14		sty $14				sty tmp1+0
.bab2	a5 04		lda $04				lda cib+0		; tmp2= cib + (toin & $ff00)
.bab4	85 16		sta $16				sta tmp2+0
.bab6	18		clc				clc
.bab7	a5 09		lda $09				lda toin+1		; tmp1= toin
.bab9	85 15		sta $15				sta tmp1+1
.babb	65 05		adc $05				adc cib+1
.babd	85 17		sta $17				sta tmp2+1
.babf	a9 00		lda #$00			lda #0		; Initialize the offset we use to adjust EOL or found delimiter
.bac1	85 1d		sta $1d				sta tmp5+1
.bac3					_loop:
.bac3	c4 06		cpy $06				cpy ciblen+0		; end of string?
.bac5	a5 09		lda $09				lda toin+1
.bac7	e5 07		sbc $07				sbc ciblen+1
.bac9	b0 1d		bcs $bae8			bcs _eol
.bacb	a5 1c		lda $1c				lda tmp5+0		; get delimiter
.bacd	c9 20		cmp #$20			cmp #AscSP		; is it whitespace?
.bacf	d0 08		bne $bad9			bne _not_whitespace
.bad1	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.bad3	c9 21		cmp #$21			cmp #AscSP+1		; we're looking for all whitespace
.bad5	90 0f		bcc $bae6			bcc _found_delimiter
.bad7	b0 04		bcs $badd			bcs _not_delimiter
.bad9	d1 16		cmp ($16),y	_not_whitespace: cmp (tmp2),y		; compare delimter to cib[toin]
.badb	f0 09		beq $bae6			beq _found_delimiter
.badd					_not_delimiter:
.badd	c8		iny				iny			; next character
.bade	d0 e3		bne $bac3			bne _loop
.bae0	e6 09		inc $09				inc toin+1
.bae2	e6 17		inc $17				inc tmp2+1
.bae4	d0 dd		bne $bac3			bne _loop
.bae6					_found_delimiter:
.bae6	e6 1d		inc $1d				inc tmp5+1
.bae8					_eol:
.bae8	38		sec				sec			; length = toin - tmp1
.bae9	98		tya				tya
.baea	e5 14		sbc $14				sbc tmp1+0
.baec	95 24		sta $24,x			sta DStack+0,x
.baee	a5 09		lda $09				lda toin+1
.baf0	e5 15		sbc $15				sbc tmp1+1
.baf2	95 25		sta $25,x			sta DStack+1,x
.baf4	18		clc				clc			; toin = toin + delimiter_offset
.baf5	98		tya				tya
.baf6	65 1d		adc $1d				adc tmp5+1
.baf8	85 08		sta $08				sta toin+0
.bafa	90 02		bcc $bafe			bcc +
.bafc	e6 09		inc $09				inc toin+1
.bafe					+
=102					CL	.var *-(WordListLink+wh_Xt)
=$bafe					en = *	; remember here
>ba96	66					.byte CL	;wh_CodeLength
.bafe	60		rts				rts
>baff	45 78 65 63 75 74 65 2d		L1:	.text "Execute-Parsing"	;  name of word as a string, ending at wh_NameLastChar
>bb07	50 61 72 73 69 6e 67
>bb0e	ef					.byte (("Execute-Parsing"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb0f	13 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb11	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb12	18					.byte UF+NN	;wh_Flags	dictionary flags
=47758					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb13					Execute_parsing:
.bb13	20 e9 b3	jsr $b3e9			jsr underflow_3
.bb16	20 ae c3	jsr $c3ae			jsr Input_To_R		; save existing input for later
.bb19	20 2c ce	jsr $ce2c			jsr Not_Rot		; -ROT ( xt addr u )
.bb1c	20 a5 b3	jsr $b3a5			jsr PopYA		; TOS is new ciblen
.bb1f	85 06		sta $06				sta ciblen+0
.bb21	84 07		sty $07				sty ciblen+1
.bb23	20 a5 b3	jsr $b3a5			jsr PopYA		; NOS is new cib
.bb26	85 04		sta $04				sta cib+0
.bb28	84 05		sty $05				sty cib+1
.bb2a	a9 00		lda #$00			lda #0
.bb2c	85 08		sta $08				sta toin+0		; Set >IN to zero
.bb2e	85 09		sta $09				sta toin+1
.bb30	20 c8 cd	jsr $cdc8			jsr Execute
.bb33	20 d0 c3	jsr $c3d0			jsr R_To_Input		; restore
=35					CL	.var *-(WordListLink+wh_Xt)
=$bb36					en = *	; remember here
>bb11	23					.byte CL	;wh_CodeLength
.bb36	60		rts				rts
>bb37	53 6f 75 72 63 65		L1:	.text "Source"	;  name of word as a string, ending at wh_NameLastChar
>bb3d	a6					.byte (("Source"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb3e	8e ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb40	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb41	08					.byte NN	;wh_Flags	dictionary flags
=47805					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb42					Source:
.bb42	a5 04		lda $04				lda cib+0	; push address
.bb44	a4 05		ldy $05				ldy cib+1
.bb46	20 5f b7	jsr $b75f			jsr PushYA
.bb49	a5 06		lda $06				lda ciblen+0	; push size, return
.bb4b	a4 07		ldy $07				ldy ciblen+1
.bb4d	4c 5f b7	jmp $b75f			jmp PushYA
=14					CL	.var *-(WordListLink+wh_Xt)
=$bb50					en = *	; remember here
>bb40	0e					.byte CL	;wh_CodeLength
>bb50	53 6f 75 72 63 65 2d 49		L1:	.text "Source-Id"	;  name of word as a string, ending at wh_NameLastChar
>bb58	64
>bb59	89					.byte (("Source-Id"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb5a	bd ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb5c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb5d	08					.byte NN	;wh_Flags	dictionary flags
=47833					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb5e	a5 02		lda $02		Source_Id:	lda insrc+0
.bb60	a4 03		ldy $03				ldy insrc+1
.bb62	4c 5f b7	jmp $b75f			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$bb65					en = *	; remember here
>bb5c	07					.byte CL	;wh_CodeLength
>bb65	45 78 69 74			L1:	.text "Exit"	;  name of word as a string, ending at wh_NameLastChar
>bb69	84					.byte (("Exit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb6a	d9 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb6c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb6d	03					.byte AN+CO	;wh_Flags	dictionary flags
=47849					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb6e					Exit:
.bb6e	60		rts				rts		; keep before FEnd so it gets inlined
=1					CL	.var *-(WordListLink+wh_Xt)
=$bb6f					en = *	; remember here
>bb6c	01					.byte CL	;wh_CodeLength
>bb6f	3b				L1:	.text ";"	;  name of word as a string, ending at wh_NameLastChar
>bb70	61					.byte ((";"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb71	e9 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb73	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb74	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=47856					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb75					Semicolon:
.bb75	20 e3 b6	jsr $b6e3			jsr Left_Bracket	; switch to interpret state
.bb78	24 0c		bit $0c				bit status		; is this a : word or a :NONAME word?
.bb7a	70 0c		bvs $bb88			bvs _colonword
.bb7c	a9 60		lda #$60			lda #$60		; compile an RTS
.bb7e	20 a1 cc	jsr $cca1			jsr C_Comma_A
.bb81	a5 0e		lda $0e				lda workword+0		; push xt, return
.bb83	a4 0f		ldy $0f				ldy workword+1
.bb85	4c 5f b7	jmp $b75f			jmp PushYA
.bb88					_colonword:
.bb88	24 0c		bit $0c				bit status
.bb8a	10 1d		bpl $bba9			bpl _new_word	; Bit 7 is clear = new word
.bb8c	a5 0e		lda $0e				lda WorkWord+0		; push our nt
.bb8e	a4 0f		ldy $0f				ldy WorkWord+1
.bb90	20 5f b7	jsr $b75f			jsr PushYA
.bb93	20 af bd	jsr $bdaf			jsr Name_To_String	; get our name string
.bb96	a9 73		lda #$73			lda #<str_redefined	; string "redefined"
.bb98	a0 da		ldy #$da			ldy #>str_redefined
.bb9a	20 ab cd	jsr $cdab			jsr Print_ASCIIZ_YA_no_lf
.bb9d	20 8a cd	jsr $cd8a			jsr Type		; print the offending word.
.bba0	20 7d cd	jsr $cd7d			jsr Space
.bba3	a9 7f		lda #$7f			lda #$ff-%10000000
.bba5	25 0c		and $0c				and status
.bba7	85 0c		sta $0c				sta status
.bba9					_new_word:
.bba9	20 e0 c0	jsr $c0e0			jsr Header_Link		; finish linking into current dictionary
.bbac	20 b4 bb	jsr $bbb4			jsr adjust_z		; fix word length
.bbaf	a9 60		lda #$60			lda #$60		; compile an RTS
.bbb1	4c a1 cc	jmp $cca1			jmp C_Comma_A
=63					CL	.var *-(WordListLink+wh_Xt)
=$bbb4					en = *	; remember here
>bb73	3f					.byte CL	;wh_CodeLength
.bbb4					adjust_z:
.bbb4	a5 10		lda $10				lda dp+0		; tmp1= xt
.bbb6	18		clc				clc
.bbb7	69 85		adc #$85			adc #Wh_xt
.bbb9	85 14		sta $14				sta tmp1+0
.bbbb	a5 11		lda $11				lda dp+1
.bbbd	69 00		adc #$00			adc #0
.bbbf	85 15		sta $15				sta tmp1+1
.bbc1	38		sec				sec			; length= cp-xt
.bbc2	a5 00		lda $00				lda cp+0
.bbc4	e5 14		sbc $14				sbc tmp1+0
.bbc6	a8		tay				tay
.bbc7	a5 01		lda $01				lda cp+1
.bbc9	e5 15		sbc $15				sbc tmp1+1
.bbcb	f0 0c		beq $bbd9			beq _short		; length > $ff ?
.bbcd	a0 84		ldy #$84			ldy #Wh_Flags		; make it NN
.bbcf	b1 10		lda ($10),y			lda (dp),y
.bbd1	29 fd		and #$fd			and #$ff-AN
.bbd3	09 08		ora #$08			ora #NN
.bbd5	91 10		sta ($10),y			sta (dp),y
.bbd7	a0 ff		ldy #$ff			ldy #$ff		; set max length for header
.bbd9	98		tya		_short:		tya			; fill in length in header
.bbda	a0 83		ldy #$83			ldy #Wh_CodeLength
.bbdc	91 10		sta ($10),y			sta (dp),y
.bbde	60		rts				rts
>bbdf	3a				L1:	.text ":"	;  name of word as a string, ending at wh_NameLastChar
>bbe0	41					.byte ((":"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bbe1	f0 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bbe3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bbe4	08					.byte NN	;wh_Flags	dictionary flags
=47968					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bbe5					Colon:
.bbe5	20 f9 b6	jsr $b6f9			jsr Right_Bracket	; switch to compile state
.bbe8	a5 0c		lda $0c				lda status
.bbea	09 40		ora #$40			ora #%01000000	; tell ";" and RECURSE this is a normal word
.bbec	09 80		ora #$80			ora #%10000000	; Tell Header_Build not to print warning for duplicate name.
.bbee	85 0c		sta $0c				sta status
.bbf0	4c eb c0	jmp $c0eb			jmp Header_Build	; compile word header (but don't link)
=14					CL	.var *-(WordListLink+wh_Xt)
=$bbf3					en = *	; remember here
>bbe3	0e					.byte CL	;wh_CodeLength
>bbf3	3a 4e 6f 4e 61 6d 65		L1:	.text ":NoName"	;  name of word as a string, ending at wh_NameLastChar
>bbfa	a7					.byte ((":NoName"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bbfb	60 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bbfd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bbfe	08					.byte NN	;wh_Flags	dictionary flags
=47994					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bbff					Colon_NoName:
.bbff	20 f9 b6	jsr $b6f9			jsr Right_Bracket	; switch to compile state
.bc02	a9 bf		lda #$bf			lda #$ff-%01000000	; tell ";" and RECURSE this is
.bc04	25 0c		and $0c				and status		; a :NONAME word.
.bc06	85 0c		sta $0c				sta status
.bc08	a5 00		lda $00				lda cp+0
.bc0a	85 0e		sta $0e				sta workword+0
.bc0c	a5 01		lda $01				lda cp+1
.bc0e	85 0f		sta $0f				sta workword+1
=17					CL	.var *-(WordListLink+wh_Xt)
=$bc10					en = *	; remember here
>bbfd	11					.byte CL	;wh_CodeLength
.bc10	60		rts				rts
>bc11	27				L1:	.text "'"	;  name of word as a string, ending at wh_NameLastChar
>bc12	e1					.byte (("'"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bc13	7a bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc15	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc16	08					.byte NN	;wh_Flags	dictionary flags
=48018					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc17	20 1d bc	jsr $bc1d	Tick:		jsr Tick_Nt
.bc1a	4c 97 bd	jmp $bd97			jmp Name_To_Int	; ( nt -- xt )
=6					CL	.var *-(WordListLink+wh_Xt)
=$bc1d					en = *	; remember here
>bc15	06					.byte CL	;wh_CodeLength
.bc1d	20 81 ba	jsr $ba81	Tick_Nt:	jsr parse_name_check	; ( -- addr u )
.bc20	4c b9 bc	jmp $bcb9			jmp find_name_check	; ( addr u -- nt )
>bc23	5b 27 5d			L1:	.text "[']"	;  name of word as a string, ending at wh_NameLastChar
>bc26	a3					.byte (("[']"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bc27	92 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc29	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc2a	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=48038					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc2b	20 17 bc	jsr $bc17	Bracket_Tick:	jsr Tick
.bc2e	4c 12 b7	jmp $b712			jmp Literal
=6					CL	.var *-(WordListLink+wh_Xt)
=$bc31					en = *	; remember here
>bc29	06					.byte CL	;wh_CodeLength
>bc31	46 69 6e 64			L1:	.text "Find"	;  name of word as a string, ending at wh_NameLastChar
>bc35	84					.byte (("Find"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bc36	a6 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc38	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc39	18					.byte UF+NN	;wh_Flags	dictionary flags
=48053					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc3a					Find:
.bc3a	20 cf b3	jsr $b3cf			jsr underflow_1
.bc3d	b5 25		lda $25,x			lda DStack+1,x		; MSB
.bc3f	48		pha				pha
.bc40	b5 24		lda $24,x			lda DStack+0,x		; LSB
.bc42	48		pha				pha
.bc43	20 73 b1	jsr $b173			jsr Count		; ( caddr -- addr u )
.bc46	20 8d bc	jsr $bc8d			jsr find_name		; ( addr u -- nt | 0 )
.bc49	b5 25		lda $25,x			lda DStack+1,x		; word found?
.bc4b	d0 0a		bne $bc57			bne _found_word
.bc4d	20 92 b7	jsr $b792			jsr False		; ( 0 0 )
.bc50	68		pla				pla			; LSB of address
.bc51	95 26		sta $26,x			sta DStack+2,x
.bc53	68		pla				pla
.bc54	95 27		sta $27,x			sta DStack+3,x		; MSB of address
.bc56	60		rts				rts			; ( addr 0 )
.bc57					_found_word:
.bc57	68		pla				pla			; We don't need the address after all, RDrop it
.bc58	68		pla				pla
.bc59	20 02 cf	jsr $cf02			jsr Dup		; ( nt nt )
.bc5c	20 97 bd	jsr $bd97			jsr Name_To_Int	; ( nt xt )
.bc5f	20 20 cf	jsr $cf20			jsr Swap		; ( xt nt )
.bc62	a0 00		ldy #$00			ldy #0			; Prepare flag
.bc64	a9 84		lda #$84			lda #Wh_Flags		; get flags
.bc66	20 a7 c9	jsr $c9a7			jsr Plus_A		; ( xt nt+Wh_Flags )
.bc69	a1 24		lda ($24,x)			lda (DStack+0,x)		; ( xt flags )
.bc6b	29 04		and #$04			and #IM
.bc6d	d0 07		bne $bc76			bne _immediate		; bit set, we're immediate
.bc6f	a9 ff		lda #$ff			lda #$FF		; We're not immediate, return -1
.bc71	95 24		sta $24,x			sta DStack+0,x
.bc73	95 25		sta $25,x			sta DStack+1,x
.bc75	60		rts				rts
.bc76					_immediate:
.bc76	a9 01		lda #$01			lda #1			; We're immediate, return 1
.bc78	95 24		sta $24,x			sta DStack+0,x
.bc7a	a9 00		lda #$00			lda #0
.bc7c	95 25		sta $25,x			sta DStack+1,x
=68					CL	.var *-(WordListLink+wh_Xt)
=$bc7e					en = *	; remember here
>bc38	44					.byte CL	;wh_CodeLength
.bc7e	60		rts				rts
>bc7f	46 69 6e 64 2d 4e 61 6d		L1:	.text "Find-Name"	;  name of word as a string, ending at wh_NameLastChar
>bc87	65
>bc88	a9					.byte (("Find-Name"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bc89	b5 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc8b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc8c	18					.byte UF+NN	;wh_Flags	dictionary flags
=48136					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc8d					find_name:
.bc8d	20 e4 b3	jsr $b3e4			jsr underflow_2
.bc90	20 c6 bc	jsr $bcc6			jsr fina_pattern_prepare ; tmp2 = pseudo-header of pattern name
.bc93	a9 ff		lda #$ff			lda #$ff		; for each wordlist in the wordlist search order.
.bc95	95 25		sta $25,x			sta DStack+1,x
.bc97					_wordlist_next:
.bc97	f6 25		inc $25,x			inc DStack+1,x
.bc99	b4 25		ldy $25,x			ldy DStack+1,x
.bc9b	cc 2a 03	cpy $032a			cpy Num_OrderV		; at end of list?
.bc9e	90 06		bcc $bca6			bcc _nextS
.bca0	d0 14		bne $bcb6			bne _fail
.bca2	a9 03		lda #$03			lda #wid_Root		; also try root wordlist
.bca4	d0 03		bne $bca9			bne _nextA
.bca6	b9 2b 03	lda $032b,y	_nextS:		lda Search_OrderV,y	; A = search_order[Y]  get wordlist ID
.bca9	20 f0 bc	jsr $bcf0	_nextA:		jsr fina_search_wordlist
.bcac	f0 e9		beq $bc97			beq _wordlist_next
.bcae	a5 14		lda $14				lda tmp1+0		; NOS = nt
.bcb0	95 26		sta $26,x			sta DStack+2,x
.bcb2	a5 15		lda $15				lda tmp1+1
.bcb4	95 27		sta $27,x			sta DStack+3,x
.bcb6					_fail:
.bcb6	e8		inx				inx			; Drop	pattern name length
.bcb7	e8		inx				inx
=43					CL	.var *-(WordListLink+wh_Xt)
=$bcb8					en = *	; remember here
>bc8b	2b					.byte CL	;wh_CodeLength
.bcb8	60		rts				rts
.bcb9					find_name_check:
.bcb9	20 8d bc	jsr $bc8d			jsr find_name
.bcbc	b5 25		lda $25,x			lda DStack+1,x		; not found?
.bcbe	f0 01		beq $bcc1			beq _NotFound
.bcc0	60		rts				rts
.bcc1	a9 f3		lda #$f3	_NotFound:	lda #$100+err_UndefinedWord	; complain & quit
.bcc3	4c 2e b4	jmp $b42e			jmp ThrowA
.bcc6					fina_pattern_prepare:
.bcc6	38		sec				sec			; A= 0 - name start offset
.bcc7	b5 24		lda $24,x			lda DStack+0,x
.bcc9	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.bccb	75 26		adc $26,x			adc DStack+2,x		; tmp2 = pattern nt
.bccd	85 16		sta $16				sta tmp2+0
.bccf	a9 ff		lda #$ff			lda #$ff
.bcd1	75 27		adc $27,x			adc DStack+3,x
.bcd3	85 17		sta $17				sta tmp2+1
.bcd5	a9 7f		lda #$7f			lda #wh_NameLastChar
.bcd7	38		sec				sec
.bcd8	f5 24		sbc $24,x			sbc DStack+0,x
.bcda	85 1a		sta $1a				sta tmp4+0
.bcdc	a0 7f		ldy #$7f			ldy #wh_NameLastChar	; tmp3+0= wh_HNL (hash & length)
.bcde	b1 16		lda ($16),y			lda (tmp2),y
.bce0	0a		asl a				asl a
.bce1	0a		asl a				asl a
.bce2	0a		asl a				asl a
.bce3	0a		asl a				asl a
.bce4	0a		asl a				asl a
.bce5	15 24		ora $24,x			ora DStack+0,x
.bce7	85 18		sta $18				sta tmp3+0
.bce9	a9 00		lda #$00			lda #0			; assuming failure
.bceb	95 26		sta $26,x			sta DStack+2,x
.bced	95 27		sta $27,x			sta DStack+3,x
.bcef	60		rts				rts
.bcf0					fina_search_wordlist:
.bcf0	86 19		stx $19				stx tmp3+1		; save data stack index
.bcf2	0a		asl a				asl			; tmp1 = up->wordlists[A]
.bcf3	a8		tay				tay
.bcf4	be 12 03	ldx $0312,y			ldx WordlistsV+0,y
.bcf7	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bcfa	d0 0f		bne $bd0b			bne _word_3		;   not end-of-list?
.bcfc	08		php		_rts:		php
.bcfd	a6 19		ldx $19				ldx tmp3+1		; restore data stack index
.bcff	28		plp				plp
.bd00	60		rts				rts			; Z= end_of_list
.bd01					_word_next:
.bd01	a0 81		ldy #$81			ldy #wh_WordListLink	; tmp1= tmp1->Wh_WordListLink
.bd03	b1 14		lda ($14),y			lda (tmp1),y
.bd05	aa		tax				tax
.bd06	c8		iny				iny
.bd07	b1 14		lda ($14),y			lda (tmp1),y
.bd09	f0 f1		beq $bcfc			beq _rts		; end of list?
.bd0b	85 15		sta $15		_word_3:	sta tmp1+1
.bd0d	86 14		stx $14				stx tmp1+0
.bd0f	a0 80		ldy #$80			ldy #Wh_HNL		; Are hash & name length the same?
.bd11	b1 14		lda ($14),y			lda (tmp1),y
.bd13	c5 18		cmp $18				cmp tmp3+0
.bd15	d0 ea		bne $bd01			bne _word_next
.bd17	a4 1a		ldy $1a				ldy tmp4+0		; Y= index of 1st char -1
.bd19	c8		iny		_char_next:	iny			; to next char
.bd1a	30 e0		bmi $bcfc			bmi _rts		; end of string?
.bd1c	b1 16		lda ($16),y			lda (tmp2),y		; char of pattern name
.bd1e	51 14		eor ($14),y			eor (tmp1),y		; char of this word name
.bd20	f0 f7		beq $bd19			beq _char_next		;   exact match?
.bd22	c9 20		cmp #$20			cmp #$20		;   only a case mismatch?
.bd24	d0 db		bne $bd01			bne _word_next
.bd26	b1 14		lda ($14),y			lda (tmp1),y		;   verify it is alpha char
.bd28	29 df		and #$df			and #$df
.bd2a	e9 41		sbc #$41			sbc #'A'
.bd2c	c9 1a		cmp #$1a			cmp #'Z'-'A'+1
.bd2e	90 e9		bcc $bd19			bcc _char_next
.bd30	b0 cf		bcs $bd01			bcs _word_next
>bd32	49 6e 74 3e 4e 61 6d 65		L1:	.text "Int>Name"	;  name of word as a string, ending at wh_NameLastChar
>bd3a	a8					.byte (("Int>Name"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bd3b	08 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd3d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd3e	18					.byte UF+NN	;wh_Flags	dictionary flags
=48314					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd3f					Int_To_Name:
.bd3f	20 cf b3	jsr $b3cf			jsr underflow_1
.bd42	a9 7b		lda #$7b			lda #$100-Wh_xt		; convert xt on stack to proposed nt
.bd44	20 e7 c9	jsr $c9e7			jsr Minus_A
.bd47	b5 24		lda $24,x			lda DStack+0,x		; tmp3= proposed nt
.bd49	b4 25		ldy $25,x			ldy DStack+1,x
.bd4b	85 18		sta $18				sta tmp3+0
.bd4d	84 19		sty $19				sty tmp3+1
.bd4f	86 14		stx $14				stx tmp1+0		; save data stack index
.bd51	a9 fe		lda #$fe			lda #$100-2		; for each wordlist
.bd53	85 15		sta $15				sta tmp1+1
.bd55					_wordlist_next:
.bd55	a4 15		ldy $15				ldy tmp1+1		; get next wordlist index
.bd57	c8		iny				iny
.bd58	c8		iny				iny
.bd59	84 15		sty $15				sty tmp1+1
.bd5b	c0 0c		cpy #$0c			cpy #(Num_OrderV-WordlistsV)/2
.bd5d	b0 22		bcs $bd81			bcs _fail
.bd5f	be 12 03	ldx $0312,y			ldx WordlistsV+0,y
.bd62	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bd65	4c 74 bd	jmp $bd74			jmp _word_3
.bd68	86 16		stx $16		_word_next:	stx tmp2+0
.bd6a	85 17		sta $17				sta tmp2+1
.bd6c	a0 81		ldy #$81			ldy #wh_WordListLink	; follow wh_WordListLink to next word
.bd6e	b1 16		lda ($16),y			lda (tmp2),y
.bd70	aa		tax				tax
.bd71	c8		iny				iny
.bd72	b1 16		lda ($16),y			lda (tmp2),y
.bd74	f0 df		beq $bd55	_word_3:	beq _wordlist_next	;  end of list?
.bd76	c5 19		cmp $19				cmp tmp3+1		;  match?
.bd78	d0 ee		bne $bd68			bne _word_next
.bd7a	e4 18		cpx $18				cpx tmp3+0
.bd7c	d0 ea		bne $bd68			bne _word_next
.bd7e	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.bd80	60		rts				rts
.bd81					_fail:
.bd81	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.bd83	a9 00		lda #$00			lda #0			; return a zero to indicate that we didn't find it.
.bd85	95 24		sta $24,x			sta DStack+0,x
.bd87	95 25		sta $25,x			sta DStack+1,x
.bd89	60		rts				rts
=75					CL	.var *-(WordListLink+wh_Xt)
=$bd8a					en = *	; remember here
>bd3d	4b					.byte CL	;wh_CodeLength
>bd8a	4e 61 6d 65 3e 49 6e 74		L1:	.text "Name>Int"	;  name of word as a string, ending at wh_NameLastChar
>bd92	88					.byte (("Name>Int"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bd93	ba bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd95	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd96	18					.byte UF+NN	;wh_Flags	dictionary flags
=48402					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd97					Name_To_Int:
.bd97	20 cf b3	jsr $b3cf			jsr underflow_1
.bd9a	a9 85		lda #$85			lda #wh_Xt
.bd9c	4c a7 c9	jmp $c9a7			jmp Plus_A
=8					CL	.var *-(WordListLink+wh_Xt)
=$bd9f					en = *	; remember here
>bd95	08					.byte CL	;wh_CodeLength
>bd9f	4e 61 6d 65 3e 53 74 72		L1:	.text "Name>String"	;  name of word as a string, ending at wh_NameLastChar
>bda7	69 6e 67
>bdaa	eb					.byte (("Name>String"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bdab	12 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bdad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bdae	18					.byte UF+NN	;wh_Flags	dictionary flags
=48426					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bdaf					Name_To_String:
.bdaf	20 cf b3	jsr $b3cf			jsr underflow_1
.bdb2	b5 24		lda $24,x			lda DStack+0,x		; tmp1 = nt
.bdb4	b4 25		ldy $25,x			ldy DStack+1,x
.bdb6	85 14		sta $14				sta tmp1+0
.bdb8	84 15		sty $15				sty tmp1+1
.bdba	a0 80		ldy #$80			ldy #Wh_HNL
.bdbc	b1 14		lda ($14),y			lda (tmp1),y
.bdbe	29 1f		and #$1f			and #wh_HNL_NameLengthMask
.bdc0	48		pha				pha
.bdc1	49 ff		eor #$ff			eor #$ff
.bdc3	38		sec				sec
.bdc4	69 80		adc #$80			adc #Wh_NameLastChar+1	; calc start offset
.bdc6	20 a7 c9	jsr $c9a7			jsr Plus_A		; calc start addr
.bdc9	68		pla				pla			; push length
.bdca	4c a1 b7	jmp $b7a1			jmp PushZA
=30					CL	.var *-(WordListLink+wh_Xt)
=$bdcd					en = *	; remember here
>bdad	1e					.byte CL	;wh_CodeLength
>bdcd	3e 42 6f 64 79			L1:	.text ">Body"	;  name of word as a string, ending at wh_NameLastChar
>bdd2	25					.byte ((">Body"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bdd3	2a bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bdd5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bdd6	18					.byte UF+NN	;wh_Flags	dictionary flags
=48466					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bdd7					To_Body:
.bdd7	20 cf b3	jsr $b3cf			jsr underflow_1
.bdda	a9 03		lda #$03			lda #3		; PFA is after the beginning JSR abs
.bddc	4c a7 c9	jmp $c9a7			jmp Plus_A
=8					CL	.var *-(WordListLink+wh_Xt)
=$bddf					en = *	; remember here
>bdd5	08					.byte CL	;wh_CodeLength
>bddf	45 72 61 73 65			L1:	.text "Erase"	;  name of word as a string, ending at wh_NameLastChar
>bde4	a5					.byte (("Erase"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bde5	52 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bde7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bde8	08					.byte NN	;wh_Flags	dictionary flags
=48484					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bde9					Erase:
.bde9	20 b0 b7	jsr $b7b0			jsr Zero
.bdec	4c 08 be	jmp $be08			jmp Fill
=6					CL	.var *-(WordListLink+wh_Xt)
=$bdef					en = *	; remember here
>bde7	06					.byte CL	;wh_CodeLength
>bdef	42 6c 61 6e 6b			L1:	.text "Blank"	;  name of word as a string, ending at wh_NameLastChar
>bdf4	65					.byte (("Blank"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bdf5	64 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bdf7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bdf8	08					.byte NN	;wh_Flags	dictionary flags
=48500					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bdf9					Blank:
.bdf9	20 cf b7	jsr $b7cf			jsr Bl
.bdfc	4c 08 be	jmp $be08			jmp Fill
=6					CL	.var *-(WordListLink+wh_Xt)
=$bdff					en = *	; remember here
>bdf7	06					.byte CL	;wh_CodeLength
>bdff	46 69 6c 6c			L1:	.text "Fill"	;  name of word as a string, ending at wh_NameLastChar
>be03	84					.byte (("Fill"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be04	74 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be06	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be07	18					.byte UF+NN	;wh_Flags	dictionary flags
=48515					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be08					Fill:
.be08	20 e9 b3	jsr $b3e9			jsr underflow_3
.be0b	b5 28		lda $28,x			lda DStack+4,x		; tmp1= address
.be0d	85 14		sta $14				sta tmp1+0
.be0f	b5 29		lda $29,x			lda DStack+5,x
.be11	85 15		sta $15				sta tmp1+1
.be13	b5 26		lda $26,x			lda DStack+2,x		; tmp2= counter.lo
.be15	85 16		sta $16				sta tmp2+0
.be17	f6 27		inc $27,x			inc DStack+3,x		; so decrement & test for 0 works
.be19	b5 24		lda $24,x			lda DStack+0,x		; A= fill byte
.be1b	a0 00		ldy #$00			ldy #0
.be1d	c4 16		cpy $16		_loop:		cpy tmp2+0		; done?
.be1f	f0 09		beq $be2a			beq _test2
.be21	91 14		sta ($14),y	_3:		sta (tmp1),y		; store a byte
.be23	c8		iny				iny			; to next byte
.be24	d0 f7		bne $be1d			bne _loop
.be26	e6 15		inc $15				inc tmp1+1		; increment addr page
.be28	d0 f3		bne $be1d			bne _loop
.be2a	d6 27		dec $27,x	_test2:		dec DStack+3,x		; any more pages?
.be2c	d0 f3		bne $be21			bne _3
.be2e	4c 0d ad	jmp $ad0d			jmp ThreeDrop	; Drop three cells off the Data Stack.
=41					CL	.var *-(WordListLink+wh_Xt)
=$be31					en = *	; remember here
>be06	29					.byte CL	;wh_CodeLength
>be31	56 61 72 69 61 62 6c 65		L1:	.text "Variable"	;  name of word as a string, ending at wh_NameLastChar
>be39	a8					.byte (("Variable"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be3a	83 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be3c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be3d	08					.byte NN	;wh_Flags	dictionary flags
=48569					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be3e	20 7a c1	jsr $c17a	Variable:	jsr Create		; compile word header & push PFA
.be41	a9 00		lda #$00			lda #0			; allot & initialize the variable's data
.be43	a8		tay				tay
.be44	4c bb cc	jmp $ccbb			jmp Comma_YA
=9					CL	.var *-(WordListLink+wh_Xt)
=$be47					en = *	; remember here
>be3c	09					.byte CL	;wh_CodeLength
>be47	32 56 61 72 69 61 62 6c		L1:	.text "2Variable"	;  name of word as a string, ending at wh_NameLastChar
>be4f	65
>be50	a9					.byte (("2Variable"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be51	b9 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be53	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be54	08					.byte NN	;wh_Flags	dictionary flags
=48592					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be55	20 3e be	jsr $be3e	Two_variable:	jsr Variable		; compile word header & push PFA & 1st cell of data
.be58	4c bb cc	jmp $ccbb			jmp Comma_YA		; alloc & init 2nd cell of data
=6					CL	.var *-(WordListLink+wh_Xt)
=$be5b					en = *	; remember here
>be53	06					.byte CL	;wh_CodeLength
>be5b	43 6f 6e 73 74 61 6e 74		L1:	.text "Constant"	;  name of word as a string, ending at wh_NameLastChar
>be63	88					.byte (("Constant"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be64	d0 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be66	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be67	18					.byte UF+NN	;wh_Flags	dictionary flags
=48611					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be68					Constant:
.be68	20 cf b3	jsr $b3cf			jsr underflow_1
.be6b	20 dd c0	jsr $c0dd			jsr Header_Comma	; compile word header
.be6e	20 1b b7	jsr $b71b			jsr LitCompile		; compile code to load registers, & pick a subroutine
.be71	20 f7 cc	jsr $ccf7			jsr Jmp_Comma_YA	; compile code to JMP to the subroutine
.be74	4c b4 bb	jmp $bbb4			jmp adjust_z		; fix word length
=15					CL	.var *-(WordListLink+wh_Xt)
=$be77					en = *	; remember here
>be66	0f					.byte CL	;wh_CodeLength
>be77	32 43 6f 6e 73 74 61 6e		L1:	.text "2Constant"	;  name of word as a string, ending at wh_NameLastChar
>be7f	74
>be80	89					.byte (("2Constant"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be81	e3 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be83	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be84	18					.byte UF+NN	;wh_Flags	dictionary flags
=48640					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be85					Two_constant:
.be85	20 e4 b3	jsr $b3e4			jsr underflow_2
.be88	20 dd c0	jsr $c0dd			jsr Header_Comma	; compile word header
.be8b	20 20 cf	jsr $cf20			jsr Swap
.be8e	20 12 b7	jsr $b712			jsr Literal		; compile push lo cell
.be91	20 1b b7	jsr $b71b			jsr LitCompile		; compile push hi cell, YA=exit routine
.be94	20 f7 cc	jsr $ccf7			jsr Jmp_Comma_YA	; compile JMP from above
.be97	4c b4 bb	jmp $bbb4			jmp adjust_z		; fix word length
=21					CL	.var *-(WordListLink+wh_Xt)
=$be9a					en = *	; remember here
>be83	15					.byte CL	;wh_CodeLength
>be9a	56 61 6c 75 65			L1:	.text "Value"	;  name of word as a string, ending at wh_NameLastChar
>be9f	a5					.byte (("Value"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bea0	00 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bea2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bea3	18					.byte UF+NN	;wh_Flags	dictionary flags
=48671					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bea4					Value:
.bea4	20 cf b3	jsr $b3cf			jsr underflow_1
.bea7	20 dd c0	jsr $c0dd			jsr Header_Comma	; compile word header
.beaa	20 45 b7	jsr $b745			jsr ldya_immed_comma	; compile lda # & ldy #
.bead	a9 5f		lda #$5f			lda #<PushYA		; compile jmp PushYA
.beaf	a0 b7		ldy #$b7			ldy #>PushYA
.beb1	20 f7 cc	jsr $ccf7			jsr Jmp_Comma_YA
.beb4	4c b4 bb	jmp $bbb4			jmp adjust_z		; fix word length
=19					CL	.var *-(WordListLink+wh_Xt)
=$beb7					en = *	; remember here
>bea2	13					.byte CL	;wh_CodeLength
>beb7	32 56 61 6c 75 65		L1:	.text "2Value"	;  name of word as a string, ending at wh_NameLastChar
>bebd	a6					.byte (("2Value"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bebe	1f be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bec0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bec1	18					.byte UF+NN	;wh_Flags	dictionary flags
=48701					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bec2					TwoValue:
.bec2	20 e4 b3	jsr $b3e4			jsr underflow_2
.bec5	20 dd c0	jsr $c0dd			jsr Header_Comma	; compile word header
.bec8	a9 d5		lda #$d5			lda #<TwoValue_Runtime	; compile JSR TValue_Runtime
.beca	a0 be		ldy #$be			ldy #>TwoValue_Runtime
.becc	20 e0 cc	jsr $cce0			jsr Jsr_Comma_YA
.becf	20 b4 bb	jsr $bbb4			jsr adjust_z		; fix word length
.bed2	4c c9 cc	jmp $ccc9			jmp Two_Comma		; compile the value, return
=19					CL	.var *-(WordListLink+wh_Xt)
=$bed5					en = *	; remember here
>bec0	13					.byte CL	;wh_CodeLength
.bed5					TwoValue_Runtime:
.bed5	68		pla				pla			; pop RTS addr, +1,
.bed6	18		clc				clc
.bed7	69 01		adc #$01			adc #1
.bed9	85 14		sta $14				sta tmp1+0
.bedb	68		pla				pla
.bedc	69 00		adc #$00			adc #0
.bede	85 15		sta $15				sta tmp1+1
.bee0	4c 38 c5	jmp $c538			jmp Two_Fetch_tmp1	; fetch the data, return
>bee3	54 6f				L1:	.text "To"	;  name of word as a string, ending at wh_NameLastChar
>bee5	e2					.byte (("To"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bee6	3d be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bee8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bee9	0c					.byte NN+IM	;wh_Flags	dictionary flags
=48741					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.beea					To:
.beea	20 17 bc	jsr $bc17			jsr Tick		; We always need the xt of the target word
.beed	b5 24		lda $24,x			lda DStack+0,x		; tmp1= xt
.beef	b4 25		ldy $25,x			ldy DStack+1,x
.bef1	85 14		sta $14				sta tmp1+0
.bef3	84 15		sty $15				sty tmp1+1
.bef5	a0 00		ldy #$00			ldy #0			; determine what type xt points at
.bef7	b1 14		lda ($14),y			lda (tmp1),y
.bef9	c9 a0		cmp #$a0			cmp #$a0		;   LDY #
.befb	d0 38		bne $bf35			bne _Test2
.befd	a5 0a		lda $0a				lda state		; check compile state
.beff	f0 20		beq $bf21			beq _Value_interpret
.bf01	a9 a5		lda #$a5			lda #<PopYA		; compile jsr PopYA
.bf03	a0 b3		ldy #$b3			ldy #>PopYA
.bf05	20 e0 cc	jsr $cce0			jsr Jsr_Comma_YA
.bf08	a9 8c		lda #$8c			lda #$8C		; compile STY xt+1
.bf0a	20 a1 cc	jsr $cca1			jsr C_Comma_A
.bf0d	20 f8 c9	jsr $c9f8			jsr One_plus
.bf10	20 02 cf	jsr $cf02			jsr Dup
.bf13	20 b8 cc	jsr $ccb8			jsr Comma
.bf16	a9 8d		lda #$8d			lda #$8D		; compile STA xt+3
.bf18	20 a1 cc	jsr $cca1			jsr C_Comma_A
.bf1b	20 a2 c9	jsr $c9a2			jsr Cell_Plus
.bf1e	4c b8 cc	jmp $ccb8			jmp Comma
.bf21					_Value_interpret:
.bf21	20 e4 b3	jsr $b3e4			jsr underflow_2		; ( n xt )
.bf24	e8		inx				inx			; Drop xt
.bf25	e8		inx				inx
.bf26	b5 24		lda $24,x			lda DStack+0,x		; LSB
.bf28	a0 03		ldy #$03			ldy #3			;   modify LDA # data
.bf2a	91 14		sta ($14),y			sta (tmp1),y
.bf2c	b5 25		lda $25,x			lda DStack+1,x		; MSB
.bf2e	a0 01		ldy #$01			ldy #1			;   modify LDY # data
.bf30	91 14		sta ($14),y			sta (tmp1),y
.bf32	e8		inx				inx			; Drop n
.bf33	e8		inx				inx
.bf34	60		rts				rts
.bf35	c9 20		cmp #$20	_Test2:		cmp #$20		;   JSR abs ?
.bf37	d0 33		bne $bf6c			bne _Err
.bf39	a9 03		lda #$03			lda #3			; advance xt over the JSR abs to the data
.bf3b	20 a7 c9	jsr $c9a7			jsr Plus_A
.bf3e	a0 01		ldy #$01			ldy #1			; get JSR abs addr lo byte
.bf40	b1 14		lda ($14),y			lda (tmp1),y
.bf42	c9 d5		cmp #$d5			cmp #<TwoValue_Runtime
.bf44	d0 11		bne $bf57			bne _Test3
.bf46	a5 0a		lda $0a				lda state		; check compile state
.bf48	f0 0a		beq $bf54			beq _2Value_runtime
.bf4a	20 45 b7	jsr $b745			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bf4d	a9 0c		lda #$0c			lda #<Two_Store_YA
.bf4f	a0 c5		ldy #$c5			ldy #>Two_Store_YA
.bf51	4c e0 cc	jmp $cce0			jmp Jsr_Comma_YA	; compile JSR TwoValue_runtime; return
.bf54	4c 06 c5	jmp $c506	_2Value_runtime: jmp Two_Store
.bf57					_Test3:
.bf57	c9 e4		cmp #$e4			cmp #<FValue_runtime
.bf59	d0 11		bne $bf6c			bne _Err
.bf5b	a5 0a		lda $0a				lda state		; check compile state
.bf5d	f0 0a		beq $bf69			beq _FValue_interpret
.bf5f	20 45 b7	jsr $b745			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bf62	a9 b0		lda #$b0			lda #<FStore_YA
.bf64	a0 85		ldy #$85			ldy #>FStore_YA
.bf66	4c e0 cc	jmp $cce0			jmp Jsr_Comma_YA	; compile JSR FValue_runtime; return
.bf69	4c ad 85	jmp $85ad	_FValue_interpret: jmp FStore
.bf6c	a9 e0		lda #$e0	_Err:		lda #$100+err_InvalidName ; unrecognized type.
.bf6e	20 2e b4	jsr $b42e			jsr ThrowA
=135					CL	.var *-(WordListLink+wh_Xt)
=$bf71					en = *	; remember here
>bee8	87					.byte CL	;wh_CodeLength
>bf71	44 4d 61 78			L1:	.text "DMax"	;  name of word as a string, ending at wh_NameLastChar
>bf75	04					.byte (("DMax"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bf76	65 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf78	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf79	08					.byte NN	;wh_Flags	dictionary flags
=48885					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf7a	a9 80		lda #$80	DMax:		lda #$80
.bf7c	d0 0b		bne $bf89			bne DMin3
=4					CL	.var *-(WordListLink+wh_Xt)
=$bf7e					en = *	; remember here
>bf78	04					.byte CL	;wh_CodeLength
>bf7e	44 4d 69 6e			L1:	.text "DMin"	;  name of word as a string, ending at wh_NameLastChar
>bf82	c4					.byte (("DMin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bf83	f5 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf85	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf86	08					.byte NN	;wh_Flags	dictionary flags
=48898					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf87	a9 00		lda #$00	DMin:		lda #0
.bf89	85 16		sta $16		DMin3:		sta tmp2	; save sign correction
.bf8b	20 ee b3	jsr $b3ee			jsr underflow_4
.bf8e	b5 26		lda $26,x			lda DStack+2,x	; compare
.bf90	d5 2a		cmp $2a,x			cmp DStack+6,x
.bf92	b5 27		lda $27,x			lda DStack+3,x
.bf94	f5 2b		sbc $2b,x			sbc DStack+7,x
.bf96	b5 24		lda $24,x			lda DStack+0,x
.bf98	f5 28		sbc $28,x			sbc DStack+4,x
.bf9a	b5 25		lda $25,x			lda DStack+1,x
.bf9c	f5 29		sbc $29,x			sbc DStack+5,x
.bf9e	50 02		bvc $bfa2			bvc +
.bfa0	49 80		eor #$80			eor #$80	; fix sign
.bfa2	45 16		eor $16		+		eor tmp2
.bfa4	30 0f		bmi $bfb5			bmi TwoNip_nouf	; if negative, NOS is larger and needs to be kept
.bfa6	4c bc c4	jmp $c4bc			jmp Two_Drop
=34					CL	.var *-(WordListLink+wh_Xt)
=$bfa9					en = *	; remember here
>bf85	22					.byte CL	;wh_CodeLength
>bfa9	32 4e 69 70			L1:	.text "2Nip"	;  name of word as a string, ending at wh_NameLastChar
>bfad	04					.byte (("2Nip"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bfae	02 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfb0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfb1	18					.byte UF+NN	;wh_Flags	dictionary flags
=48941					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfb2	20 ee b3	jsr $b3ee	TwoNip:		jsr underflow_4
.bfb5	b5 24		lda $24,x	TwoNip_NoUf:	lda DStack+0,x	; copy dTOS to dNOS
.bfb7	95 28		sta $28,x			sta DStack+4,x
.bfb9	b5 25		lda $25,x			lda DStack+1,x
.bfbb	95 29		sta $29,x			sta DStack+5,x
.bfbd	b5 26		lda $26,x			lda DStack+2,x
.bfbf	95 2a		sta $2a,x			sta DStack+6,x
.bfc1	b5 27		lda $27,x			lda DStack+3,x
.bfc3	95 2b		sta $2b,x			sta DStack+7,x
.bfc5	4c bc c4	jmp $c4bc			jmp Two_Drop
=22					CL	.var *-(WordListLink+wh_Xt)
=$bfc8					en = *	; remember here
>bfb0	16					.byte CL	;wh_CodeLength
>bfc8	53 3e 44			L1:	.text "S>D"	;  name of word as a string, ending at wh_NameLastChar
>bfcb	83					.byte (("S>D"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bfcc	2d bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfcf	10					.byte UF	;wh_Flags	dictionary flags
=48971					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfd0					S_To_D:
.bfd0	20 cf b3	jsr $b3cf			jsr underflow_1
.bfd3	a0 00		ldy #$00			ldy #0			; assume positive
.bfd5	b5 25		lda $25,x			lda DStack+1,x		; test n
.bfd7	10 01		bpl $bfda			bpl +
.bfd9	88		dey				dey			; make negative
.bfda					+
.bfda	ca		dex				dex			; push new hi cell
.bfdb	ca		dex				dex
.bfdc	94 24		sty $24,x			sty DStack+0,x
.bfde	94 25		sty $25,x			sty DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$bfe0					en = *	; remember here
>bfce	10					.byte CL	;wh_CodeLength
.bfe0	60		rts				rts
>bfe1	44 3e 53			L1:	.text "D>S"	;  name of word as a string, ending at wh_NameLastChar
>bfe4	63					.byte (("D>S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bfe5	4b bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfe7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfe8	10					.byte UF	;wh_Flags	dictionary flags
=48996					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfe9					D_To_S:
.bfe9	20 e4 b3	jsr $b3e4			jsr underflow_2
.bfec	e8		inx				inx		; Drop hi cell
.bfed	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$bfee					en = *	; remember here
>bfe7	05					.byte CL	;wh_CodeLength
.bfee	60		rts				rts
>bfef	44 2d				L1:	.text "D-"	;  name of word as a string, ending at wh_NameLastChar
>bff1	a2					.byte (("D-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bff2	64 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bff4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bff5	10					.byte UF	;wh_Flags	dictionary flags
=49009					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bff6					D_Minus:
.bff6	20 ee b3	jsr $b3ee			jsr underflow_4 ; two double numbers
.bff9	38		sec				sec
.bffa	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of lower word
.bffc	f5 26		sbc $26,x			sbc DStack+2,x
.bffe	95 2a		sta $2a,x			sta DStack+6,x
.c000	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of lower word
.c002	f5 27		sbc $27,x			sbc DStack+3,x
.c004	95 2b		sta $2b,x			sta DStack+7,x
.c006	b5 28		lda $28,x			lda DStack+4,x	; LSB of upper word
.c008	f5 24		sbc $24,x			sbc DStack+0,x
.c00a	95 28		sta $28,x			sta DStack+4,x
.c00c	b5 29		lda $29,x			lda DStack+5,x	; MSB of upper word
.c00e	f5 25		sbc $25,x			sbc DStack+1,x
.c010	95 29		sta $29,x			sta DStack+5,x
.c012	e8		inx				inx
.c013	e8		inx				inx
.c014	e8		inx				inx
.c015	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c016					en = *	; remember here
>bff4	20					.byte CL	;wh_CodeLength
.c016	60		rts				rts
>c017	44 2b				L1:	.text "D+"	;  name of word as a string, ending at wh_NameLastChar
>c019	62					.byte (("D+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c01a	71 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c01c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c01d	10					.byte UF	;wh_Flags	dictionary flags
=49049					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c01e					D_Plus:
.c01e	20 ee b3	jsr $b3ee			jsr underflow_4 ; two double numbers
.c021	18		clc				clc
.c022	b5 26		lda $26,x			lda DStack+2,x	; LSB of lower word
.c024	75 2a		adc $2a,x			adc DStack+6,x
.c026	95 2a		sta $2a,x			sta DStack+6,x
.c028	b5 27		lda $27,x			lda DStack+3,x	; MSB of lower word
.c02a	75 2b		adc $2b,x			adc DStack+7,x
.c02c	95 2b		sta $2b,x			sta DStack+7,x
.c02e	b5 24		lda $24,x			lda DStack+0,x	; LSB of upper word
.c030	75 28		adc $28,x			adc DStack+4,x
.c032	95 28		sta $28,x			sta DStack+4,x
.c034	b5 25		lda $25,x			lda DStack+1,x	; MSB of upper word
.c036	75 29		adc $29,x			adc DStack+5,x
.c038	95 29		sta $29,x			sta DStack+5,x
.c03a	e8		inx				inx
.c03b	e8		inx				inx
.c03c	e8		inx				inx
.c03d	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c03e					en = *	; remember here
>c01c	20					.byte CL	;wh_CodeLength
.c03e	60		rts				rts
>c03f	44 31 2b			L1:	.text "D1+"	;  name of word as a string, ending at wh_NameLastChar
>c042	63					.byte (("D1+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c043	99 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c045	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c046	10					.byte UF	;wh_Flags	dictionary flags
=49090					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c047	20 e4 b3	jsr $b3e4	D1Plus:		jsr underflow_2
.c04a	f6 26		inc $26,x			inc DStack+2,x
.c04c	d0 0a		bne $c058			bne +
.c04e	f6 27		inc $27,x			inc DStack+3,x
.c050	d0 06		bne $c058			bne +
.c052	f6 24		inc $24,x			inc DStack+0,x
.c054	d0 02		bne $c058			bne +
.c056	f6 25		inc $25,x			inc DStack+1,x
.c058					+
=17					CL	.var *-(WordListLink+wh_Xt)
=$c058					en = *	; remember here
>c045	11					.byte CL	;wh_CodeLength
.c058	60		rts				rts
>c059	44 31 2d			L1:	.text "D1-"	;  name of word as a string, ending at wh_NameLastChar
>c05c	a3					.byte (("D1-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c05d	c2 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c05f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c060	10					.byte UF	;wh_Flags	dictionary flags
=49116					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c061	20 e4 b3	jsr $b3e4	D1Minus:	jsr underflow_2
.c064	b5 26		lda $26,x			lda DStack+2,x
.c066	d0 0e		bne $c076			bne _1
.c068	b5 27		lda $27,x			lda DStack+3,x
.c06a	d0 08		bne $c074			bne _2
.c06c	b5 24		lda $24,x			lda DStack+0,x
.c06e	d0 02		bne $c072			bne _3
.c070	d6 25		dec $25,x			dec DStack+1,x
.c072	d6 24		dec $24,x	_3:		dec DStack+0,x
.c074	d6 27		dec $27,x	_2:		dec DStack+3,x
.c076	d6 26		dec $26,x	_1:		dec DStack+2,x
=23					CL	.var *-(WordListLink+wh_Xt)
=$c078					en = *	; remember here
>c05f	17					.byte CL	;wh_CodeLength
.c078	60		rts				rts
>c079	41 6c 6c 6f 74			L1:	.text "Allot"	;  name of word as a string, ending at wh_NameLastChar
>c07e	85					.byte (("Allot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c07f	dc bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c081	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c082	18					.byte UF+NN	;wh_Flags	dictionary flags
=49150					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c083					Allot:
.c083	20 cf b3	jsr $b3cf			jsr underflow_1
.c086	18		clc				clc			; adjust cp
.c087	b5 24		lda $24,x			lda DStack+0,x
.c089	65 00		adc $00				adc cp+0
.c08b	85 00		sta $00				sta cp+0
.c08d	a8		tay				tay			;   save lo byte
.c08e	b5 25		lda $25,x			lda DStack+1,x
.c090	85 14		sta $14				sta tmp1
.c092	65 01		adc $01				adc cp+1
.c094	85 01		sta $01				sta cp+1
.c096	24 14		bit $14				bit tmp1
.c098	30 15		bmi $c0af			bmi _release
.c09a	b0 06		bcs $c0a2			bcs _pos_err		; carry from the add is bad
=32600					_last = cp_end-2*PadOffset
.c09c	c0 58		cpy #$58			cpy #<_last		; cp < cp_end ?
.c09e	e9 7f		sbc #$7f			sbc #>_last
.c0a0	90 2c		bcc $c0ce			bcc _done		; we're fine.
.c0a2					_pos_err:
.c0a2	a9 58		lda #$58			lda #<_last
.c0a4	85 00		sta $00				sta cp+0
.c0a6	a9 7f		lda #$7f			lda #>_last
.c0a8	85 01		sta $01				sta cp+1
.c0aa	a9 c5		lda #$c5			lda #$100+err_Allocate
.c0ac	4c 2e b4	jmp $b42e			jmp ThrowA
.c0af					_release:
.c0af	90 06		bcc $c0b7			bcc _neg_err		; borrow indicates we've gone below 0
.c0b1	c0 66		cpy #$66			cpy #<cp0
.c0b3	e9 0b		sbc #$0b			sbc #>cp0
.c0b5	b0 17		bcs $c0ce			bcs _done
.c0b7					_neg_err:
.c0b7	a9 66		lda #$66			lda #<cp0		; Set CP to CP0
.c0b9	85 00		sta $00				sta cp+0
.c0bb	a9 0b		lda #$0b			lda #>cp0
.c0bd	85 01		sta $01				sta cp+1
.c0bf	a9 b8		lda #$b8			lda #<forth_dictionary_start	; set WordLists[Forth] to the first
.c0c1	8d 12 03	sta $0312			sta WordlistsV+0		; word in ROM
.c0c4	a9 ce		lda #$ce			lda #>forth_dictionary_start
.c0c6	8d 13 03	sta $0313			sta WordlistsV+1
.c0c9	a9 c4		lda #$c4			lda #$100+err_Free		; abort with an error
.c0cb	4c 2e b4	jmp $b42e			jmp ThrowA
.c0ce					_done:
.c0ce	e8		inx				inx			; Drop n
.c0cf	e8		inx				inx
=77					CL	.var *-(WordListLink+wh_Xt)
=$c0d0					en = *	; remember here
>c081	4d					.byte CL	;wh_CodeLength
.c0d0	60		rts				rts
>c0d1	48 65 61 64 65 72 2c		L1:	.text "Header,"	;  name of word as a string, ending at wh_NameLastChar
>c0d8	87					.byte (("Header,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c0d9	fe bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c0db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c0dc	08					.byte NN	;wh_Flags	dictionary flags
=49240					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c0dd					Header_Comma:
.c0dd	20 eb c0	jsr $c0eb			jsr Header_Build
.c0e0					Header_Link:
.c0e0	a5 0e		lda $0e				lda WorkWord+0		; dp= WorkWord
.c0e2	85 10		sta $10				sta dp+0
.c0e4	a5 0f		lda $0f				lda WorkWord+1
.c0e6	85 11		sta $11				sta dp+1
.c0e8	4c 31 ba	jmp $ba31			jmp dp_to_current	; Update the CURRENT wordlist with the new DP.
.c0eb					Header_Build:
.c0eb	20 81 ba	jsr $ba81			jsr parse_name_check	; get name string, throw error if empty string
.c0ee	20 5c cc	jsr $cc5c			jsr Two_dup		; ( addr u addr u )
.c0f1	20 d4 a0	jsr $a0d4			jsr Get_Current
.c0f4	20 74 a0	jsr $a074			jsr Search_WordList	; ( addr u xt f ) or ( addr u 0 )
.c0f7	e8		inx				inx			; pop flag.
.c0f8	e8		inx				inx
.c0f9	b5 22		lda $22,x			lda DStack-2,x		; not found?
.c0fb	f0 21		beq $c11e			beq _new_name		; We haven't seen this one before.
.c0fd	e8		inx				inx			; Drop xt
.c0fe	e8		inx				inx
.c0ff	24 0c		bit $0c				bit status		; Check bit 7
.c101	10 08		bpl $c10b			bpl _redefined_name	; Bit 7 is zero, so print the message.
.c103	a9 80		lda #$80			lda #$80		; Set bit 7 to indicate dup
.c105	05 0c		ora $0c				ora status
.c107	85 0c		sta $0c				sta status
.c109	d0 19		bne $c124			bne _process_name
.c10b					_redefined_name:
.c10b	a9 73		lda #$73			lda #<str_redefined
.c10d	a0 da		ldy #$da			ldy #>str_redefined
.c10f	20 ab cd	jsr $cdab			jsr Print_ASCIIZ_YA_no_lf
.c112	20 5c cc	jsr $cc5c			jsr Two_dup		 ; ( addr u addr u )
.c115	20 8a cd	jsr $cd8a			jsr Type
.c118	20 7d cd	jsr $cd7d			jsr Space
.c11b	4c 24 c1	jmp $c124			jmp _process_name
.c11e					_new_name:
.c11e	a9 7f		lda #$7f			lda #$7F		; Clear bit 0 of status to indicate new word.
.c120	25 0c		and $0c				and status
.c122	85 0c		sta $0c				sta status
.c124					_process_name:
.c124	20 5c cc	jsr $cc5c			jsr Two_dup		; compile name string ending at wh_NameLastChar
.c127	20 c4 c9	jsr $c9c4			jsr Here
.c12a	20 20 cf	jsr $cf20			jsr Swap
.c12d	20 65 ad	jsr $ad65			jsr CMove
.c130	20 02 cf	jsr $cf02			jsr Dup		;   save length
.c133	20 83 c0	jsr $c083			jsr Allot
.c136	20 c4 c9	jsr $c9c4			jsr Here
.c139	20 d2 c9	jsr $c9d2			jsr One_Minus
.c13c	a1 24		lda ($24,x)			lda (DStack+0,x)
.c13e	0a		asl a				asl a
.c13f	0a		asl a				asl a
.c140	0a		asl a				asl a
.c141	0a		asl a				asl a
.c142	0a		asl a				asl a
.c143	95 24		sta $24,x			sta DStack+0,x
.c145	20 1a cb	jsr $cb1a			jsr Or
.c148	20 9e cc	jsr $cc9e			jsr C_Comma		; compile wh_HNL
.c14b	e8		inx				inx			; drop name string addr
.c14c	e8		inx				inx
.c14d	20 21 ba	jsr $ba21			jsr current_to_dp	; Get the CURRENT dictionary pointer.
.c150	a5 10		lda $10				lda dp+0		; compile wh_WordListLink
.c152	a4 11		ldy $11				ldy dp+1
.c154	20 bb cc	jsr $ccbb			jsr Comma_YA
.c157	a9 03		lda #$03			lda #3			; compile wh_CodeLength (temporary value, see adjust_z)
.c159	20 a1 cc	jsr $cca1			jsr C_Comma_A
.c15c	a9 08		lda #$08			lda #NN			; compile wh_Flags
.c15e	20 a1 cc	jsr $cca1			jsr C_Comma_A
.c161	38		sec				sec			; WorkWord= nt
.c162	a5 00		lda $00				lda cp+0
.c164	e9 85		sbc #$85			sbc #wh_xt
.c166	85 0e		sta $0e				sta WorkWord+0
.c168	a5 01		lda $01				lda cp+1
.c16a	e9 00		sbc #$00			sbc #0
.c16c	85 0f		sta $0f				sta WorkWord+1
.c16e	60		rts				rts
=146					CL	.var *-(WordListLink+wh_Xt)
=$c16f					en = *	; remember here
>c0db	92					.byte CL	;wh_CodeLength
>c16f	43 72 65 61 74 65		L1:	.text "Create"	;  name of word as a string, ending at wh_NameLastChar
>c175	a6					.byte (("Create"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c176	58 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c178	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c179	08					.byte NN	;wh_Flags	dictionary flags
=49397					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c17a					Create:
.c17a	20 dd c0	jsr $c0dd			jsr Header_Comma	; compile word header
.c17d	a9 87		lda #$87			lda #<DoVar
.c17f	a0 c1		ldy #$c1			ldy #>DoVar
.c181	20 e0 cc	jsr $cce0			jsr Jsr_Comma_YA
.c184	4c b4 bb	jmp $bbb4			jmp adjust_z
=13					CL	.var *-(WordListLink+wh_Xt)
=$c187					en = *	; remember here
>c178	0d					.byte CL	;wh_CodeLength
.c187					DoVar:
.c187	68		pla				pla		; Pull the return address off the machine's stack
.c188	18		clc				clc		;   +1 because of the way the JSR works
.c189	69 01		adc #$01			adc #1
.c18b	ca		dex				dex		; push on data stack
.c18c	ca		dex				dex
.c18d	95 24		sta $24,x			sta DStack+0,x
.c18f	68		pla				pla
.c190	69 00		adc #$00			adc #0
.c192	95 25		sta $25,x			sta DStack+1,x
.c194	60		rts				rts		; takes us to the original caller of the
>c195	44 6f 65 73 3e			L1:	.text "Does>"	;  name of word as a string, ending at wh_NameLastChar
>c19a	c5					.byte (("Does>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c19b	f5 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c19d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c19e	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=49434					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c19f					Does:
.c19f	a0 c1		ldy #$c1			ldy #>_runtime
.c1a1	a9 b9		lda #$b9			lda #<_runtime
.c1a3	20 e0 cc	jsr $cce0			jsr Jsr_Comma_YA
.c1a6	a9 68		lda #$68			lda #$68		; compile PLA  to pop RTS addr (PFA-1) to AY
.c1a8	a0 a8		ldy #$a8			ldy #$a8		;    & TAY
.c1aa	20 bb cc	jsr $ccbb			jsr Comma_YA
.c1ad	a9 68		lda #$68			lda #$68		; compile PLA
.c1af	20 a1 cc	jsr $cca1			jsr C_Comma_A
.c1b2	a0 c1		ldy #$c1			ldy #>_dodoes
.c1b4	a9 cb		lda #$cb			lda #<_dodoes
.c1b6	4c e0 cc	jmp $cce0			jmp Jsr_Comma_YA
=26					CL	.var *-(WordListLink+wh_Xt)
=$c1b9					en = *	; remember here
>c19d	1a					.byte CL	;wh_CodeLength
.c1b9					_runtime:
.c1b9	20 21 ba	jsr $ba21			jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.c1bc	18		clc				clc
.c1bd	68		pla				pla		; RTS addr LSB
.c1be	69 01		adc #$01			adc #1		;   +1 for JSR bahavior
.c1c0	a0 86		ldy #$86			ldy #Wh_xt+1
.c1c2	91 10		sta ($10),y			sta (dp),y
.c1c4	68		pla				pla		; RTS addr MSB
.c1c5	69 00		adc #$00			adc #0
.c1c7	c8		iny				iny
.c1c8	91 10		sta ($10),y			sta (dp),y
.c1ca	60		rts				rts
.c1cb					_dodoes:
.c1cb	c8		iny				iny		; +1 for JSR behavior
.c1cc	d0 03		bne $c1d1			bne +
.c1ce	18		clc				clc
.c1cf	69 01		adc #$01			adc #1
.c1d1					+
.c1d1	4c 10 cf	jmp $cf10			jmp PushAY
>c1d4	55 6e 75 73 65 64		L1:	.text "Unused"	;  name of word as a string, ending at wh_NameLastChar
>c1da	86					.byte (("Unused"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c1db	1a c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c1dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c1de	00					.byte 0	;wh_Flags	dictionary flags
=49498					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c1df					Unused:
=32600					_last = cp_end-2*padoffset
.c1df	ca		dex				dex
.c1e0	ca		dex				dex
.c1e1	38		sec				sec
.c1e2	a9 58		lda #$58			lda #<_last
.c1e4	e5 00		sbc $00				sbc cp+0
.c1e6	95 24		sta $24,x			sta DStack+0,x
.c1e8	a9 7f		lda #$7f			lda #>_last
.c1ea	e5 01		sbc $01				sbc cp+1
.c1ec	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$c1ee					en = *	; remember here
>c1dd	0f					.byte CL	;wh_CodeLength
.c1ee	60		rts				rts
>c1ef	44 65 70 74 68			L1:	.text "Depth"	;  name of word as a string, ending at wh_NameLastChar
>c1f4	05					.byte (("Depth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c1f5	5a c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c1f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c1f8	08					.byte NN	;wh_Flags	dictionary flags
=49524					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c1f9					Depth:
.c1f9	a9 28		lda #$28			lda #DStack0	; A= DStack0 - X
.c1fb	86 1a		stx $1a				stx tmp4
.c1fd	38		sec				sec
.c1fe	e5 1a		sbc $1a				sbc tmp4
.c200	4a		lsr a				lsr		; divide by two because each cell is two bytes
.c201	4c a1 b7	jmp $b7a1			jmp PushZA
=11					CL	.var *-(WordListLink+wh_Xt)
=$c204					en = *	; remember here
>c1f7	0b					.byte CL	;wh_CodeLength
>c204	4b 65 79			L1:	.text "Key"	;  name of word as a string, ending at wh_NameLastChar
>c207	23					.byte (("Key"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c208	74 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c20a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c20b	08					.byte NN	;wh_Flags	dictionary flags
=49543					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c20c	20 12 c2	jsr $c212	Key:		jsr key_a		; returns char in A
.c20f	4c a1 b7	jmp $b7a1			jmp PushZA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c212					en = *	; remember here
>c20a	06					.byte CL	;wh_CodeLength
.c212					Key_A:
.c212	6c 08 03	jmp ($0308)			jmp (input)		; JSR/RTS
>c215	4b 65 79 3f			L1:	.text "Key?"	;  name of word as a string, ending at wh_NameLastChar
>c219	e4					.byte (("Key?"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c21a	87 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c21c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c21d	08					.byte NN	;wh_Flags	dictionary flags
=49561					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c21e	20 24 c2	jsr $c224	KeyQ:		jsr KeyQ_A
.c221	4c a1 b7	jmp $b7a1			jmp PushZA
.c224	6c 0a 03	jmp ($030a)	KeyQ_A:		jmp (HaveKey)
>c227	52 65 66 69 6c 6c		L1:	.text "Refill"	;  name of word as a string, ending at wh_NameLastChar
>c22d	86					.byte (("Refill"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c22e	99 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c230	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c231	08					.byte NN	;wh_Flags	dictionary flags
=49581					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c232					Refill:
.c232	a9 00		lda #$00			lda #0			; show empty in case of error
.c234	85 06		sta $06				sta ciblen+0
.c236	85 07		sta $07				sta ciblen+1
.c238	a5 02		lda $02				lda insrc		; cheat: We only check LSB
.c23a	d0 24		bne $c260			bne _src_not_kbd
.c23c	a5 04		lda $04				lda cib+0		; address of CIB is NOS
.c23e	a4 05		ldy $05				ldy cib+1
.c240	20 5f b7	jsr $b75f			jsr PushYA
.c243	a9 ff		lda #$ff			lda #bsize		; max number of chars is TOS
.c245	20 a1 b7	jsr $b7a1			jsr PushZA		;  cheat: We only accept max 255
.c248	20 77 c2	jsr $c277			jsr Accept		; ( addr n1 -- n2)
.c24b	b5 24		lda $24,x			lda DStack+0,x
.c24d	85 06		sta $06				sta ciblen+0
.c24f	b5 25		lda $25,x			lda DStack+1,x
.c251	85 07		sta $07				sta ciblen+1		; though we only accept 255 chars
.c253	a9 00		lda #$00			lda #0
.c255	85 08		sta $08				sta toin+0
.c257	85 09		sta $09				sta toin+1
.c259	a9 ff		lda #$ff			lda #$FF		; overwrite with TRUE flag
.c25b	95 24		sta $24,x			sta DStack+0,x
.c25d	95 25		sta $25,x			sta DStack+1,x
.c25f	60		rts				rts
.c260					_src_not_kbd:
.c260	c9 ff		cmp #$ff			cmp #$ff
.c262	d0 03		bne $c267			bne _src_not_string
.c264	4c 92 b7	jmp $b792			jmp False
.c267					_src_not_string:
.c267	a9 eb		lda #$eb			lda #$100+err_Unsupported
.c269	20 2e b4	jsr $b42e			jsr ThrowA
=58					CL	.var *-(WordListLink+wh_Xt)
=$c26c					en = *	; remember here
>c230	3a					.byte CL	;wh_CodeLength
>c26c	41 63 63 65 70 74		L1:	.text "Accept"	;  name of word as a string, ending at wh_NameLastChar
>c272	86					.byte (("Accept"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c273	ad c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c275	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c276	18					.byte UF+NN	;wh_Flags	dictionary flags
=49650					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c277					Accept:
.c277	20 e4 b3	jsr $b3e4			jsr underflow_2
.c27a	b5 24		lda $24,x			lda DStack+0,x		; Abort if we were asked to receive 0 chars
.c27c	15 25		ora $25,x			ora DStack+1,x
.c27e	d0 09		bne $c289			bne _not_zero
.c280	e8		inx				inx			; drop n
.c281	e8		inx				inx
.c282	95 24		sta $24,x			sta DStack+0,x		; replace addr with 0
.c284	95 25		sta $25,x			sta DStack+1,x
.c286	4c 5e c3	jmp $c35e			jmp accept_done
.c289					_not_zero:
.c289	b5 24		lda $24,x			lda DStack+0,x	; number of chars to get in tmp2 ...
.c28b	85 16		sta $16				sta tmp2
.c28d	a9 00		lda #$00			lda #0
.c28f	85 17		sta $17				sta tmp2+1	; ... but we only accept max 255 chars
.c291	b5 26		lda $26,x			lda DStack+2,x	; address of buffer is NOS, to tmp1
.c293	85 14		sta $14				sta tmp1
.c295	b5 27		lda $27,x			lda DStack+3,x
.c297	85 15		sta $15				sta tmp1+1
.c299	e8		inx				inx
.c29a	e8		inx				inx
.c29b	a0 00		ldy #$00			ldy #0
.c29d	a5 0c		lda $0c				lda status
.c29f	29 f7		and #$f7			and #$f7
.c2a1	18		clc				clc
.c2a2	69 01		adc #$01			adc #1
.c2a4	09 08		ora #$08			ora #$08
.c2a6	85 0c		sta $0c				sta status
.c2a8					accept_loop:
.c2a8	20 12 c2	jsr $c212			jsr key_a
.c2ab	c9 0a		cmp #$0a			cmp #AscLF
.c2ad	f0 20		beq $c2cf			beq _eol
.c2af	c9 0d		cmp #$0d			cmp #AscCR
.c2b1	f0 1c		beq $c2cf			beq _eol
.c2b3	c9 08		cmp #$08			cmp #AscBS
.c2b5	f0 24		beq $c2db			beq _backspace
.c2b7	c9 7f		cmp #$7f			cmp #AscDEL	; (CTRL-h)
.c2b9	f0 20		beq $c2db			beq _backspace
.c2bb	c9 10		cmp #$10			cmp #AscCP
.c2bd	f0 37		beq $c2f6			beq _ctrl_p
.c2bf	c9 0e		cmp #$0e			cmp #AscCN
.c2c1	f0 46		beq $c309			beq _ctrl_n
.c2c3	91 14		sta ($14),y			sta (tmp1),y
.c2c5	c8		iny				iny
.c2c6	20 70 cd	jsr $cd70			jsr Emit_A
.c2c9	c4 16		cpy $16				cpy tmp2	; reached character limit?
.c2cb	d0 db		bne $c2a8			bne accept_loop	      ; fall through if buffer limit reached
.c2cd	f0 03		beq $c2d2			beq _buffer_full
.c2cf					_eol:
.c2cf	20 7d cd	jsr $cd7d			jsr Space	; print final space
.c2d2					_buffer_full:
.c2d2	94 24		sty $24,x			sty DStack+0,x	; Y contains number of chars accepted already
.c2d4	a9 00		lda #$00			lda #0
.c2d6	95 25		sta $25,x			sta DStack+1,x		; we only accept 256 chars
.c2d8	4c 5e c3	jmp $c35e			jmp accept_done
.c2db					_backspace:
.c2db	c0 00		cpy #$00			cpy #0		; buffer empty?
.c2dd	d0 06		bne $c2e5			bne +
.c2df	a9 07		lda #$07			lda #AscBELL	; complain and don't delete beyond the start of line
.c2e1	20 70 cd	jsr $cd70			jsr Emit_A
.c2e4	c8		iny				iny
.c2e5					+
.c2e5	88		dey				dey
.c2e6	a9 08		lda #$08			lda #AscBS	; move back one
.c2e8	20 70 cd	jsr $cd70			jsr Emit_A
.c2eb	20 7d cd	jsr $cd7d			jsr Space	; print a space (rubout)
.c2ee	a9 08		lda #$08			lda #AscBS	; move back over space
.c2f0	20 70 cd	jsr $cd70			jsr Emit_A
.c2f3	4c a8 c2	jmp $c2a8			jmp accept_loop
.c2f6					_ctrl_p:
.c2f6	a5 0c		lda $0c				lda status
.c2f8	29 07		and #$07			and #7
.c2fa	d0 08		bne $c304			bne _ctrl_p_dec
.c2fc	a5 0c		lda $0c				lda status
.c2fe	09 07		ora #$07			ora #7
.c300	85 0c		sta $0c				sta status
.c302	d0 14		bne $c318			bne _recall_history
.c304					_ctrl_p_dec:
.c304	c6 0c		dec $0c				dec status
.c306	4c 18 c3	jmp $c318			jmp _recall_history
.c309					_ctrl_n:
.c309	a9 08		lda #$08			lda #$8
.c30b	24 0c		bit $0c				bit status
.c30d	d0 09		bne $c318			bne _recall_history
.c30f	a5 0c		lda $0c				lda status
.c311	29 f7		and #$f7			and #$f7
.c313	18		clc				clc
.c314	69 01		adc #$01			adc #1
.c316	85 0c		sta $0c				sta status
.c318					_recall_history:
.c318	a9 f7		lda #$f7			lda #$ff-%00001000
.c31a	25 0c		and $0c				and status
.c31c	85 0c		sta $0c				sta status
.c31e	20 79 c3	jsr $c379			jsr accept_total_recall
.c321	a9 0d		lda #$0d			lda #AscCR
.c323	20 70 cd	jsr $cd70			jsr Emit_A
.c326					input_clear:
.c326	c0 00		cpy #$00			cpy #0
.c328	f0 07		beq $c331			beq input_cleared
.c32a	20 7d cd	jsr $cd7d			jsr Space
.c32d	88		dey				dey
.c32e	4c 26 c3	jmp $c326			jmp input_clear
.c331					input_cleared:
.c331	a9 0d		lda #$0d			lda #AscCR
.c333	20 70 cd	jsr $cd70			jsr Emit_A
.c336	b1 18		lda ($18),y			lda (tmp3),y
.c338	85 0d		sta $0d				sta status+1
.c33a	e6 18		inc $18				inc tmp3
.c33c	d0 02		bne $c340			bne +		; Increment the upper byte on carry.
.c33e	e6 19		inc $19				inc tmp3+1
.c340					+
.c340	a9 0d		lda #$0d			lda #AscCR
.c342	20 70 cd	jsr $cd70			jsr Emit_A
.c345					_history_loop:
.c345	c4 0d		cpy $0d				cpy status+1
.c347	d0 03		bne $c34c			bne +
.c349	4c a8 c2	jmp $c2a8			jmp accept_loop	      ; Needs a long jump
.c34c					+
.c34c	c4 16		cpy $16				cpy tmp2
.c34e	f0 0a		beq $c35a			beq _hist_filled_buffer
.c350	b1 18		lda ($18),y			lda (tmp3),y
.c352	91 14		sta ($14),y			sta (tmp1),y
.c354	20 70 cd	jsr $cd70			jsr Emit_A
.c357	c8		iny				iny
.c358	d0 eb		bne $c345			bne _history_loop
.c35a					_hist_filled_buffer:
.c35a	88		dey				dey
.c35b	4c a8 c2	jmp $c2a8			jmp accept_loop
.c35e					accept_done:
.c35e	20 79 c3	jsr $c379			jsr accept_total_recall
.c361	85 0d		sta $0d				sta status+1
.c363	a0 00		ldy #$00			ldy #0
.c365	91 18		sta ($18),y			sta (tmp3),y
.c367	e6 18		inc $18				inc tmp3
.c369	d0 02		bne $c36d			bne +		; Increment the upper byte on carry.
.c36b	e6 19		inc $19				inc tmp3+1
.c36d					+
.c36d					_save_history_loop:
.c36d	c4 0d		cpy $0d				cpy status+1
.c36f	f0 07		beq $c378			beq _save_history_done
.c371	b1 14		lda ($14),y			lda (tmp1),y
.c373	91 18		sta ($18),y			sta (tmp3),y
.c375	c8		iny				iny
.c376	d0 f5		bne $c36d			bne _save_history_loop
.c378					_save_history_done:
=257					CL	.var *-(WordListLink+wh_Xt)
=$ff					CL	 .var $ff
=$c378					en = *	; remember here
>c275	ff					.byte CL	;wh_CodeLength
.c378	60		rts				rts
.c379					accept_total_recall:
.c379	a9 66		lda #$66			lda #<hist_buff
.c37b	85 18		sta $18				sta tmp3
.c37d	a9 07		lda #$07			lda #>hist_buff
.c37f	85 19		sta $19				sta tmp3+1
.c381	a5 0c		lda $0c				lda status
.c383	6a		ror a				ror
.c384	29 03		and #$03			and #3
.c386	18		clc				clc
.c387	65 19		adc $19				adc tmp3+1
.c389	85 19		sta $19				sta tmp3+1
.c38b	a5 0c		lda $0c				lda status
.c38d	6a		ror a				ror		; Rotate through carry into msb.
.c38e	6a		ror a				ror
.c38f	29 80		and #$80			and #$80
.c391	18		clc				clc
.c392	65 18		adc $18				adc tmp3
.c394	85 18		sta $18				sta tmp3
.c396	90 02		bcc $c39a			bcc +		; Increment the upper byte on carry.
.c398	e6 19		inc $19				inc tmp3+1
.c39a					+
.c39a	98		tya				tya
.c39b	c9 80		cmp #$80			cmp #$80
.c39d	90 02		bcc $c3a1			bcc +
.c39f	a9 7f		lda #$7f			lda #$7F
.c3a1					+
.c3a1	60		rts				rts
>c3a2	49 6e 70 75 74 3e 52		L1:	.text "Input>R"	;  name of word as a string, ending at wh_NameLastChar
>c3a9	47					.byte (("Input>R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c3aa	f2 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3ac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3ad	08					.byte NN	;wh_Flags	dictionary flags
=49961					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3ae					Input_To_R:
.c3ae	68		pla				pla			; move it out of the way
.c3af	85 14		sta $14				sta tmp1+0
.c3b1	68		pla				pla
.c3b2	85 15		sta $15				sta tmp1+1
.c3b4	a0 07		ldy #$07			ldy #7
.c3b6	b9 02 00	lda $0002,y	_loop:		lda InSrc,y	; insrc+7 is toin+1
.c3b9	48		pha				pha
.c3ba	88		dey				dey
.c3bb	10 f9		bpl $c3b6			bpl _loop
.c3bd	a5 15		lda $15				lda tmp1+1		; Restore address for return jump
.c3bf	48		pha				pha
.c3c0	a5 14		lda $14				lda tmp1+0
.c3c2	48		pha				pha
=21					CL	.var *-(WordListLink+wh_Xt)
=$c3c3					en = *	; remember here
>c3ac	15					.byte CL	;wh_CodeLength
.c3c3	60		rts				rts
>c3c4	52 3e 49 6e 70 75 74		L1:	.text "R>Input"	;  name of word as a string, ending at wh_NameLastChar
>c3cb	87					.byte (("R>Input"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c3cc	29 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3cf	08					.byte NN	;wh_Flags	dictionary flags
=49995					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3d0					R_To_Input:
.c3d0	68		pla				pla		 ; move it out of the way
.c3d1	85 14		sta $14				sta tmp1+0
.c3d3	68		pla				pla
.c3d4	85 15		sta $15				sta tmp1+1
.c3d6	a0 00		ldy #$00			ldy #0
.c3d8	68		pla		_loop:		pla
.c3d9	99 02 00	sta $0002,y			sta InSrc,y ; also cib ciblen toin
.c3dc	c8		iny				iny
.c3dd	c0 08		cpy #$08			cpy #8
.c3df	d0 f7		bne $c3d8			bne _loop
.c3e1	a5 15		lda $15				lda tmp1+1		; Restore address for return jump
.c3e3	48		pha				pha
.c3e4	a5 14		lda $14				lda tmp1+0
.c3e6	48		pha				pha
=23					CL	.var *-(WordListLink+wh_Xt)
=$c3e7					en = *	; remember here
>c3ce	17					.byte CL	;wh_CodeLength
.c3e7	60		rts				rts
>c3e8	42 6f 75 6e 64 73		L1:	.text "Bounds"	;  name of word as a string, ending at wh_NameLastChar
>c3ee	66					.byte (("Bounds"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c3ef	4b c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3f1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3f2	10					.byte UF	;wh_Flags	dictionary flags
=50030					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3f3					Bounds:
.c3f3	20 e4 b3	jsr $b3e4			jsr underflow_2
.c3f6	18		clc				clc
.c3f7	b5 26		lda $26,x			lda DStack+2,x		; LSB addr
.c3f9	a8		tay				tay
.c3fa	75 24		adc $24,x			adc DStack+0,x		; LSB u
.c3fc	95 26		sta $26,x			sta DStack+2,x		; LSB addr+u
.c3fe	94 24		sty $24,x			sty DStack+0,x
.c400	b5 27		lda $27,x			lda DStack+3,x		; MSB addr
.c402	a8		tay				tay
.c403	75 25		adc $25,x			adc DStack+1,x		; MSB u
.c405	95 27		sta $27,x			sta DStack+3,x		; MSB addr+u
.c407	94 25		sty $25,x			sty DStack+1,x
=22					CL	.var *-(WordListLink+wh_Xt)
=$c409					en = *	; remember here
>c3f1	16					.byte CL	;wh_CodeLength
.c409	60		rts				rts
>c40a	53 70 61 63 65 73		L1:	.text "Spaces"	;  name of word as a string, ending at wh_NameLastChar
>c410	66					.byte (("Spaces"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c411	6e c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c413	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c414	18					.byte UF+NN	;wh_Flags	dictionary flags
=50064					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c415					Spaces:
.c415	20 cf b3	jsr $b3cf			jsr underflow_1
.c418	4c 1e c4	jmp $c41e			jmp _test
.c41b					_loop:
.c41b	20 7d cd	jsr $cd7d			jsr Space		; print a space
.c41e	d6 24		dec $24,x	_test:		dec DStack+0,x		; decrement & test
.c420	10 f9		bpl $c41b			bpl _loop
.c422	e8		inx				inx			; Drop
.c423	e8		inx				inx
=15					CL	.var *-(WordListLink+wh_Xt)
=$c424					en = *	; remember here
>c413	0f					.byte CL	;wh_CodeLength
.c424	60		rts				rts
>c425	2d 54 72 61 69 6c 69 6e		L1:	.text "-Trailing"	;  name of word as a string, ending at wh_NameLastChar
>c42d	67
>c42e	e9					.byte (("-Trailing"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c42f	90 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c431	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c432	18					.byte UF+NN	;wh_Flags	dictionary flags
=50094					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c433					Minus_trailing:
.c433	20 e4 b3	jsr $b3e4			jsr underflow_2
.c436	b5 26		lda $26,x			lda DStack+2,x		; tmp1= addr + (u1 & $ff00)
.c438	85 14		sta $14				sta tmp1+0
.c43a	b5 27		lda $27,x			lda DStack+3,x
.c43c	18		clc				clc
.c43d	75 25		adc $25,x			adc DStack+1,x
.c43f	85 15		sta $15				sta tmp1+1
.c441	b4 24		ldy $24,x			ldy DStack+0,x
.c443	88		dey		_loop:		dey			; back 1 char
.c444	c0 ff		cpy #$ff			cpy #$ff
.c446	d0 06		bne $c44e			bne +
.c448	c6 15		dec $15				dec tmp1+1		;   back 1 page
.c44a	d6 25		dec $25,x			dec DStack+1,x
.c44c	30 06		bmi $c454			bmi _done
.c44e					+
.c44e	b1 14		lda ($14),y			lda (tmp1),y		; if blank, keep going
.c450	c9 20		cmp #$20			cmp #AscSP
.c452	f0 ef		beq $c443			beq _loop
.c454	c8		iny		_done:		iny			; forward 1 char
.c455	d0 02		bne $c459			bne +
.c457	f6 25		inc $25,x			inc DStack+1,x
.c459	94 24		sty $24,x	+		sty DStack+0,x
=40					CL	.var *-(WordListLink+wh_Xt)
=$c45b					en = *	; remember here
>c431	28					.byte CL	;wh_CodeLength
.c45b	60		rts				rts
>c45c	2d 4c 65 61 64 69 6e 67		L1:	.text "-Leading"	;  name of word as a string, ending at wh_NameLastChar
>c464	e8					.byte (("-Leading"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c465	ae c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c467	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c468	18					.byte UF+NN	;wh_Flags	dictionary flags
=50148					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c469					Minus_leading:
.c469	20 e4 b3	jsr $b3e4			jsr underflow_2
.c46c					_loop:
.c46c	b5 24		lda $24,x			lda DStack+0,x		; chars left?
.c46e	15 25		ora $25,x			ora DStack+1,x
.c470	f0 0f		beq $c481			beq _done
.c472	a1 26		lda ($26,x)			lda (DStack+2,x)	; get first character
.c474	c9 21		cmp #$21			cmp #AscSP+1		;   is_whitespace
.c476	b0 09		bcs $c481			bcs _done
.c478	20 02 ca	jsr $ca02			jsr NOS_One_Plus
.c47b	20 d5 c9	jsr $c9d5			jsr One_Minus_NoUF
.c47e	4c 6c c4	jmp $c46c			jmp _loop
.c481					_done:
=24					CL	.var *-(WordListLink+wh_Xt)
=$c481					en = *	; remember here
>c467	18					.byte CL	;wh_CodeLength
.c481	60		rts				rts
>c482	2f 53 74 72 69 6e 67		L1:	.text "/String"	;  name of word as a string, ending at wh_NameLastChar
>c489	e7					.byte (("/String"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c48a	e4 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c48c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c48d	18					.byte UF+NN	;wh_Flags	dictionary flags
=50185					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c48e					Slash_String:
.c48e	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.c490	b0 1d		bcs $c4af		bcs Throw_Stack_20
.c492	18		clc				clc		; addr += n
.c493	b5 24		lda $24,x			lda DStack+0,x
.c495	75 28		adc $28,x			adc DStack+4,x
.c497	95 28		sta $28,x			sta DStack+4,x
.c499	b5 25		lda $25,x			lda DStack+1,x
.c49b	75 29		adc $29,x			adc DStack+5,x
.c49d	95 29		sta $29,x			sta DStack+5,x
.c49f	38		sec				sec		; u -= n
.c4a0	b5 26		lda $26,x			lda DStack+2,x
.c4a2	f5 24		sbc $24,x			sbc DStack+0,x
.c4a4	95 26		sta $26,x			sta DStack+2,x
.c4a6	b5 27		lda $27,x			lda DStack+3,x
.c4a8	f5 25		sbc $25,x			sbc DStack+1,x
.c4aa	95 27		sta $27,x			sta DStack+3,x
.c4ac	e8		inx				inx		; Drop n
.c4ad	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c4ae					en = *	; remember here
>c48c	20					.byte CL	;wh_CodeLength
.c4ae	60		rts				rts
.c4af	4c f3 b3	jmp $b3f3	Throw_Stack_20: jmp Throw_Stack
>c4b2	32 44 72 6f 70			L1:	.text "2Drop"	;  name of word as a string, ending at wh_NameLastChar
>c4b7	05					.byte (("2Drop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c4b8	09 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4ba	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4bb	10					.byte UF	;wh_Flags	dictionary flags
=50231					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4bc					Two_drop:
.c4bc	20 e4 b3	jsr $b3e4			jsr underflow_2
.c4bf	e8		inx				inx
.c4c0	e8		inx				inx
.c4c1	e8		inx				inx
.c4c2	e8		inx				inx
=7					CL	.var *-(WordListLink+wh_Xt)
=$c4c3					en = *	; remember here
>c4ba	07					.byte CL	;wh_CodeLength
.c4c3	60		rts				rts
>c4c4	32 53 77 61 70			L1:	.text "2Swap"	;  name of word as a string, ending at wh_NameLastChar
>c4c9	05					.byte (("2Swap"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c4ca	37 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4cd	08					.byte NN	;wh_Flags	dictionary flags
=50249					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4ce					Two_swap:
.c4ce	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c4d0	b0 dd		bcs $c4af		bcs Throw_Stack_20
.c4d2	86 14		stx $14				stx tmp1
.c4d4	ca		dex				dex
.c4d5	ca		dex				dex
.c4d6	ca		dex				dex
.c4d7	ca		dex				dex
.c4d8	e8		inx		_loop:		inx
.c4d9	b5 27		lda $27,x			lda DStack+3,x	; 3 <-> 7
.c4db	b4 2b		ldy $2b,x			ldy DStack+7,x
.c4dd	95 2b		sta $2b,x			sta DStack+7,x
.c4df	94 27		sty $27,x			sty DStack+3,x
.c4e1	e4 14		cpx $14				cpx tmp1
.c4e3	90 f3		bcc $c4d8			bcc _loop
=23					CL	.var *-(WordListLink+wh_Xt)
=$c4e5					en = *	; remember here
>c4cc	17					.byte CL	;wh_CodeLength
.c4e5	60		rts				rts
>c4e6	32 4f 76 65 72			L1:	.text "2Over"	;  name of word as a string, ending at wh_NameLastChar
>c4eb	45					.byte (("2Over"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c4ec	49 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4ef	18					.byte UF+NN	;wh_Flags	dictionary flags
=50283					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4f0					Two_over:
.c4f0	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c4f2	b0 bb		bcs $c4af		bcs Throw_Stack_20
.c4f4	a0 04		ldy #$04			ldy #4
.c4f6	ca		dex		_loop:		dex
.c4f7	b5 2c		lda $2c,x			lda DStack+8,x
.c4f9	95 24		sta $24,x			sta DStack+0,x
.c4fb	88		dey				dey
.c4fc	d0 f8		bne $c4f6			bne _loop
=14					CL	.var *-(WordListLink+wh_Xt)
=$c4fe					en = *	; remember here
>c4ee	0e					.byte CL	;wh_CodeLength
.c4fe	60		rts				rts
>c4ff	32 21				L1:	.text "2!"	;  name of word as a string, ending at wh_NameLastChar
>c501	22					.byte (("2!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c502	6b c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c504	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c505	10					.byte UF	;wh_Flags	dictionary flags
=50305					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c506					Two_Store:
.c506	20 e9 b3	jsr $b3e9			jsr underflow_3
.c509	20 a5 b3	jsr $b3a5			jsr PopYA
.c50c	85 14		sta $14		Two_Store_YA:	sta tmp1+0	; save addr
.c50e	84 15		sty $15				sty tmp1+1
.c510	b5 24		lda $24,x			lda DStack+0,x	; copy MSB
.c512	a0 00		ldy #$00			ldy #0
.c514	91 14		sta ($14),y			sta (tmp1),y
.c516	b5 25		lda $25,x			lda DStack+1,x	; copy next
.c518	c8		iny				iny
.c519	91 14		sta ($14),y			sta (tmp1),y
.c51b	b5 26		lda $26,x			lda DStack+2,x	; copy next
.c51d	c8		iny				iny
.c51e	91 14		sta ($14),y			sta (tmp1),y
.c520	b5 27		lda $27,x			lda DStack+3,x	; copy MSB
.c522	c8		iny				iny
.c523	91 14		sta ($14),y			sta (tmp1),y
.c525	e8		inx				inx		; 2Drop
.c526	e8		inx				inx
.c527	e8		inx				inx
.c528	e8		inx				inx
=35					CL	.var *-(WordListLink+wh_Xt)
=$c529					en = *	; remember here
>c504	23					.byte CL	;wh_CodeLength
.c529	60		rts				rts
>c52a	32 40				L1:	.text "2@"	;  name of word as a string, ending at wh_NameLastChar
>c52c	02					.byte (("2@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c52d	81 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c52f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c530	00					.byte 0	;wh_Flags	dictionary flags
=50348					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c531	20 a5 b3	jsr $b3a5	Two_fetch:	jsr PopYA
.c534	85 14		sta $14		Two_Fetch_YA:	sta tmp1+0	; save addr
.c536	84 15		sty $15				sty tmp1+1
.c538					Two_Fetch_tmp1:
.c538	ca		dex				dex
.c539	ca		dex				dex
.c53a	ca		dex				dex
.c53b	ca		dex				dex
.c53c	a0 00		ldy #$00			ldy #0		; copy LSB
.c53e	b1 14		lda ($14),y			lda (tmp1),y
.c540	95 24		sta $24,x			sta DStack+0,x
.c542	c8		iny				iny		; copy next
.c543	b1 14		lda ($14),y			lda (tmp1),y
.c545	95 25		sta $25,x			sta DStack+1,x
.c547	c8		iny				iny		; copy next
.c548	b1 14		lda ($14),y			lda (tmp1),y
.c54a	95 26		sta $26,x			sta DStack+2,x
.c54c	c8		iny				iny		; copy next
.c54d	b1 14		lda ($14),y			lda (tmp1),y
.c54f	95 27		sta $27,x			sta DStack+3,x
=32					CL	.var *-(WordListLink+wh_Xt)
=$c551					en = *	; remember here
>c52f	20					.byte CL	;wh_CodeLength
.c551	60		rts				rts
>c552	44 40				L1:	.text "D@"	;  name of word as a string, ending at wh_NameLastChar
>c554	02					.byte (("D@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c555	ac c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c557	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c558	08					.byte NN	;wh_Flags	dictionary flags
=50388					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c559	20 a5 b3	jsr $b3a5	DFetch:		jsr PopYA
.c55c	85 14		sta $14		DFetchYA:	sta tmp1+0	; save addr
.c55e	84 15		sty $15				sty tmp1+1
.c560	ca		dex				dex
.c561	ca		dex				dex
.c562	ca		dex				dex
.c563	ca		dex				dex
.c564	a0 00		ldy #$00			ldy #0
.c566	b1 14		lda ($14),y			lda (tmp1),y
.c568	95 26		sta $26,x			sta DStack+2,x
.c56a	c8		iny				iny
.c56b	b1 14		lda ($14),y			lda (tmp1),y
.c56d	95 27		sta $27,x			sta DStack+3,x
.c56f	c8		iny				iny
.c570	b1 14		lda ($14),y			lda (tmp1),y
.c572	95 24		sta $24,x			sta DStack+0,x
.c574	c8		iny				iny
.c575	b1 14		lda ($14),y			lda (tmp1),y
.c577	95 25		sta $25,x			sta DStack+1,x
=32					CL	.var *-(WordListLink+wh_Xt)
=$c579					en = *	; remember here
>c557	20					.byte CL	;wh_CodeLength
.c579	60		rts				rts
>c57a	32 52 40			L1:	.text "2R@"	;  name of word as a string, ending at wh_NameLastChar
>c57d	03					.byte (("2R@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c57e	d4 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c580	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c581	09					.byte CO+NN	;wh_Flags	dictionary flags
=50429					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c582					Two_r_fetch:
.c582	8a		txa				txa		; Y= return stack index
.c583	ba		tsx				tsx
.c584	86 14		stx $14				stx tmp1
.c586	a4 14		ldy $14				ldy tmp1
.c588	aa		tax				tax
.c589	ca		dex				dex		; make room on the Data Stack
.c58a	ca		dex				dex
.c58b	ca		dex				dex
.c58c	ca		dex				dex
.c58d	b9 03 01	lda $0103,y			lda RStack+3,y	; LSB of top entry
.c590	95 24		sta $24,x			sta DStack+0,x
.c592	b9 04 01	lda $0104,y			lda RStack+4,y	; MSB of top entry
.c595	95 25		sta $25,x			sta DStack+1,x
.c597	b9 05 01	lda $0105,y			lda RStack+5,y	; LSB of bottom entry
.c59a	95 26		sta $26,x			sta DStack+2,x
.c59c	b9 06 01	lda $0106,y			lda RStack+6,y	; MSB of bottom entry
.c59f	95 27		sta $27,x			sta DStack+3,x
=31					CL	.var *-(WordListLink+wh_Xt)
=$c5a1					en = *	; remember here
>c580	1f					.byte CL	;wh_CodeLength
.c5a1	60		rts				rts
>c5a2	32 52 3e			L1:	.text "2R>"	;  name of word as a string, ending at wh_NameLastChar
>c5a5	c3					.byte (("2R>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c5a6	fd c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5a8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5a9	41					.byte CO+R6	;wh_Flags	dictionary flags
=50469					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5aa					Two_r_from:
.c5aa	68		pla				pla			; save the return address
.c5ab	85 14		sta $14				sta tmp1+0
.c5ad	68		pla				pla
.c5ae	85 15		sta $15				sta tmp1+1
.c5b0	ca		dex				dex			; make room on stack
.c5b1	ca		dex				dex
.c5b2	ca		dex				dex
.c5b3	ca		dex				dex
.c5b4	68		pla				pla			; LSB
.c5b5	95 24		sta $24,x			sta DStack+0,x
.c5b7	68		pla				pla			; MSB
.c5b8	95 25		sta $25,x			sta DStack+1,x
.c5ba	68		pla				pla			; LSB
.c5bb	95 26		sta $26,x			sta DStack+2,x
.c5bd	68		pla				pla			; MSB
.c5be	95 27		sta $27,x			sta DStack+3,x
.c5c0	a5 15		lda $15				lda tmp1+1		; restore return address
.c5c2	48		pha				pha
.c5c3	a5 14		lda $14				lda tmp1+0
.c5c5	48		pha				pha
=28					CL	.var *-(WordListLink+wh_Xt)
=$c5c6					en = *	; remember here
>c5a8	1c					.byte CL	;wh_CodeLength
.c5c6	60		rts				rts
>c5c7	32 3e 52			L1:	.text "2>R"	;  name of word as a string, ending at wh_NameLastChar
>c5ca	43					.byte (("2>R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c5cb	25 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5ce	51					.byte CO+UF+R6	;wh_Flags	dictionary flags
=50506					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5cf					Two_to_r:
.c5cf	68		pla				pla		; save the return address
.c5d0	85 14		sta $14				sta tmp1+0
.c5d2	68		pla				pla
.c5d3	85 15		sta $15				sta tmp1+1
.c5d5	20 e4 b3	jsr $b3e4			jsr underflow_2
.c5d8	b5 27		lda $27,x			lda DStack+3,x	; MSB
.c5da	48		pha				pha
.c5db	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c5dd	48		pha				pha
.c5de	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c5e0	48		pha				pha
.c5e1	b5 24		lda $24,x			lda DStack+0,x	; LSB
.c5e3	48		pha				pha
.c5e4	e8		inx				inx
.c5e5	e8		inx				inx
.c5e6	e8		inx				inx
.c5e7	e8		inx				inx
.c5e8	a5 15		lda $15				lda tmp1+1	; restore return address
.c5ea	48		pha				pha
.c5eb	a5 14		lda $14				lda tmp1+0
.c5ed	48		pha				pha
=31					CL	.var *-(WordListLink+wh_Xt)
=$c5ee					en = *	; remember here
>c5cd	1f					.byte CL	;wh_CodeLength
.c5ee	60		rts				rts
>c5ef	49 6e 76 65 72 74		L1:	.text "Invert"	;  name of word as a string, ending at wh_NameLastChar
>c5f5	86					.byte (("Invert"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c5f6	4a c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5f8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5f9	10					.byte UF	;wh_Flags	dictionary flags
=50549					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5fa					Invert:
.c5fa	20 cf b3	jsr $b3cf			jsr underflow_1
.c5fd	a9 ff		lda #$ff			lda #$FF
.c5ff	55 24		eor $24,x			eor DStack+0,x	; LSB
.c601	95 24		sta $24,x			sta DStack+0,x
.c603	a9 ff		lda #$ff			lda #$FF
.c605	55 25		eor $25,x			eor DStack+1,x	; MSB
.c607	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$c609					en = *	; remember here
>c5f8	0f					.byte CL	;wh_CodeLength
.c609	60		rts				rts
>c60a	4e 65 67 61 74 65		L1:	.text "Negate"	;  name of word as a string, ending at wh_NameLastChar
>c610	a6					.byte (("Negate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c611	75 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c613	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c614	10					.byte UF	;wh_Flags	dictionary flags
=50576					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c615					Negate:
.c615	20 cf b3	jsr $b3cf			jsr underflow_1
.c618	38		sec		Negate3:	sec
.c619	a9 00		lda #$00	Negate4:	lda #0
.c61b	f5 24		sbc $24,x			sbc DStack+0,x	; LSB
.c61d	95 24		sta $24,x			sta DStack+0,x
.c61f	a9 00		lda #$00			lda #0
.c621	f5 25		sbc $25,x			sbc DStack+1,x	; MSB
.c623	95 25		sta $25,x			sta DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$c625					en = *	; remember here
>c613	10					.byte CL	;wh_CodeLength
.c625	60		rts				rts
>c626	41 62 73			L1:	.text "Abs"	;  name of word as a string, ending at wh_NameLastChar
>c629	63					.byte (("Abs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c62a	90 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c62c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c62d	08					.byte NN	;wh_Flags	dictionary flags
=50601					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c62e					Abs:
.c62e	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c630	b0 05		bcs $c637		bcs Throw_Stack_17
.c632	b5 25		lda $25,x			lda DStack+1,x	; n negative?
.c634	30 e2		bmi $c618			bmi Negate3
=8					CL	.var *-(WordListLink+wh_Xt)
=$c636					en = *	; remember here
>c62c	08					.byte CL	;wh_CodeLength
.c636	60		rts				rts
.c637	4c f3 b3	jmp $b3f3	Throw_Stack_17: jmp Throw_Stack
>c63a	44 4e 65 67 61 74 65		L1:	.text "DNegate"	;  name of word as a string, ending at wh_NameLastChar
>c641	a7					.byte (("DNegate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c642	a9 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c644	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c645	08					.byte NN	;wh_Flags	dictionary flags
=50625					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c646					DNegate:
.c646	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c648	b0 ed		bcs $c637		bcs Throw_Stack_17
.c64a	38		sec		DNegate3:	sec
.c64b	a9 00		lda #$00			lda #0
.c64d	f5 26		sbc $26,x			sbc DStack+2,x	; LSB of low cell
.c64f	95 26		sta $26,x			sta DStack+2,x
.c651	a9 00		lda #$00			lda #0
.c653	f5 27		sbc $27,x			sbc DStack+3,x	; MSB of low cell
.c655	95 27		sta $27,x			sta DStack+3,x
.c657	4c 19 c6	jmp $c619			jmp Negate4
=20					CL	.var *-(WordListLink+wh_Xt)
=$c65a					en = *	; remember here
>c644	14					.byte CL	;wh_CodeLength
>c65a	44 41 62 73			L1:	.text "DAbs"	;  name of word as a string, ending at wh_NameLastChar
>c65e	64					.byte (("DAbs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c65f	c1 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c661	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c662	08					.byte NN	;wh_Flags	dictionary flags
=50654					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c663					DAbs:
.c663	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c665	b0 d0		bcs $c637		bcs Throw_Stack_17
.c667	b5 25		lda $25,x			lda DStack+1,x	; d negative?
.c669	30 df		bmi $c64a			bmi DNegate3
=8					CL	.var *-(WordListLink+wh_Xt)
=$c66b					en = *	; remember here
>c661	08					.byte CL	;wh_CodeLength
.c66b	60		rts				rts
>c66c	44 3c 3e			L1:	.text "D<>"	;  name of word as a string, ending at wh_NameLastChar
>c66f	c3					.byte (("D<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c670	de c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c672	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c673	08					.byte NN	;wh_Flags	dictionary flags
=50671					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c674	20 81 c6	jsr $c681	DNEq:		jsr DEqual
.c677	4c 84 c8	jmp $c884			jmp ZEqA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c67a					en = *	; remember here
>c672	06					.byte CL	;wh_CodeLength
>c67a	44 3d				L1:	.text "D="	;  name of word as a string, ending at wh_NameLastChar
>c67c	a2					.byte (("D="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c67d	ef c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c67f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c680	08					.byte NN	;wh_Flags	dictionary flags
=50684					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c681	b5 2a		lda $2a,x	DEqual:		lda DStack+6,x
.c683	d5 26		cmp $26,x			cmp DStack+2,x
.c685	d0 50		bne $c6d7			bne False3
.c687	b5 2b		lda $2b,x			lda DStack+7,x
.c689	d5 27		cmp $27,x			cmp DStack+3,x
.c68b	d0 4a		bne $c6d7			bne False3
.c68d	b5 24		lda $24,x			lda DStack+0,x
.c68f	d5 28		cmp $28,x			cmp DStack+4,x
.c691	d0 44		bne $c6d7			bne False3
.c693	b5 25		lda $25,x			lda DStack+1,x
.c695	d5 29		cmp $29,x			cmp DStack+5,x
.c697	d0 3e		bne $c6d7			bne False3
.c699	f0 62		beq $c6fd			beq True3
=26					CL	.var *-(WordListLink+wh_Xt)
=$c69b					en = *	; remember here
>c67f	1a					.byte CL	;wh_CodeLength
>c69b	44 55 3e			L1:	.text "DU>"	;  name of word as a string, ending at wh_NameLastChar
>c69e	c3					.byte (("DU>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c69f	fc c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6a1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6a2	08					.byte NN	;wh_Flags	dictionary flags
=50718					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6a3	20 3c c7	jsr $c73c	DUGt:		jsr DGtSub
.c6a6	90 55		bcc $c6fd			bcc True3
.c6a8	b0 2d		bcs $c6d7			bcs False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c6aa					en = *	; remember here
>c6a1	07					.byte CL	;wh_CodeLength
>c6aa	44 55 3c 3d			L1:	.text "DU<="	;  name of word as a string, ending at wh_NameLastChar
>c6ae	a4					.byte (("DU<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6af	1e c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6b1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6b2	08					.byte NN	;wh_Flags	dictionary flags
=50734					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6b3	20 3c c7	jsr $c73c	DULe:		jsr DGtSub
.c6b6	b0 45		bcs $c6fd			bcs True3
.c6b8	90 1d		bcc $c6d7			bcc False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c6ba					en = *	; remember here
>c6b1	07					.byte CL	;wh_CodeLength
>c6ba	44 55 3e 3d			L1:	.text "DU>="	;  name of word as a string, ending at wh_NameLastChar
>c6be	a4					.byte (("DU>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6bf	2e c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6c2	08					.byte NN	;wh_Flags	dictionary flags
=50750					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6c3	20 0a c7	jsr $c70a	DUGe:		jsr DLessSub
.c6c6	b0 35		bcs $c6fd			bcs True3
.c6c8	90 0d		bcc $c6d7			bcc False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c6ca					en = *	; remember here
>c6c1	07					.byte CL	;wh_CodeLength
>c6ca	44 55 3c			L1:	.text "DU<"	;  name of word as a string, ending at wh_NameLastChar
>c6cd	83					.byte (("DU<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6ce	3e c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6d0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6d1	08					.byte NN	;wh_Flags	dictionary flags
=50765					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6d2	20 0a c7	jsr $c70a	DULess:		jsr DLessSub
.c6d5	90 26		bcc $c6fd			bcc True3
.c6d7	a9 00		lda #$00	False3:		lda #0
.c6d9	f0 24		beq $c6ff			beq DReturn3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c6db					en = *	; remember here
>c6d0	09					.byte CL	;wh_CodeLength
.c6db	4c f3 b3	jmp $b3f3	Throw_Stack_09: jmp Throw_Stack
>c6de	44 3e 3d			L1:	.text "D>="	;  name of word as a string, ending at wh_NameLastChar
>c6e1	a3					.byte (("D>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6e2	4d c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6e4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6e5	08					.byte NN	;wh_Flags	dictionary flags
=50785					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6e6	20 0a c7	jsr $c70a	DGEq:		jsr DLessSub
.c6e9	70 10		bvs $c6fb			bvs DLess3
.c6eb	10 10		bpl $c6fd	DGEq3:		bpl True3
.c6ed	30 e8		bmi $c6d7			bmi False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c6ef					en = *	; remember here
>c6e4	09					.byte CL	;wh_CodeLength
>c6ef	44 3c				L1:	.text "D<"	;  name of word as a string, ending at wh_NameLastChar
>c6f1	82					.byte (("D<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6f2	61 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6f4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6f5	08					.byte NN	;wh_Flags	dictionary flags
=50801					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6f6	20 0a c7	jsr $c70a	DLess:		jsr DLessSub
.c6f9	70 f0		bvs $c6eb			bvs DGEq3
.c6fb	10 da		bpl $c6d7	DLess3:		bpl False3
.c6fd	a9 ff		lda #$ff	True3:		lda #$ff
.c6ff					DReturn3:
.c6ff	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c701	b0 d8		bcs $c6db		bcs Throw_Stack_09
.c703	95 2a		sta $2a,x			sta DStack+6,x
.c705	95 2b		sta $2b,x			sta DStack+7,x
.c707	4c 0d ad	jmp $ad0d			jmp ThreeDrop
=20					CL	.var *-(WordListLink+wh_Xt)
=$c70a					en = *	; remember here
>c6f4	14					.byte CL	;wh_CodeLength
.c70a	b5 2a		lda $2a,x	DLessSub:	lda DStack+6,x
.c70c	d5 26		cmp $26,x			cmp DStack+2,x
.c70e	b5 2b		lda $2b,x			lda DStack+7,x
.c710	f5 27		sbc $27,x			sbc DStack+3,x
.c712	b5 28		lda $28,x			lda DStack+4,x
.c714	f5 24		sbc $24,x			sbc DStack+0,x
.c716	b5 29		lda $29,x			lda DStack+5,x
.c718	f5 25		sbc $25,x			sbc DStack+1,x
.c71a	60		rts				rts
>c71b	44 3c 3d			L1:	.text "D<="	;  name of word as a string, ending at wh_NameLastChar
>c71e	a3					.byte (("D<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c71f	71 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c721	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c722	08					.byte NN	;wh_Flags	dictionary flags
=50846					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c723	20 3c c7	jsr $c73c	DLe:		jsr DGtSub
.c726	70 10		bvs $c738			bvs DGt3
.c728	10 d3		bpl $c6fd	DLe3:		bpl True3
.c72a	30 ab		bmi $c6d7			bmi False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c72c					en = *	; remember here
>c721	09					.byte CL	;wh_CodeLength
>c72c	44 3e				L1:	.text "D>"	;  name of word as a string, ending at wh_NameLastChar
>c72e	c2					.byte (("D>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c72f	9e c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c731	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c732	08					.byte NN	;wh_Flags	dictionary flags
=50862					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c733	20 3c c7	jsr $c73c	DGt:		jsr DGtSub
.c736	70 f0		bvs $c728			bvs DLe3
.c738	30 c3		bmi $c6fd	DGt3:		bmi True3
.c73a	10 9b		bpl $c6d7			bpl False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c73c					en = *	; remember here
>c731	09					.byte CL	;wh_CodeLength
.c73c	b5 26		lda $26,x	DGtSub:		lda DStack+2,x
.c73e	d5 2a		cmp $2a,x			cmp DStack+6,x
.c740	b5 27		lda $27,x			lda DStack+3,x
.c742	f5 2b		sbc $2b,x			sbc DStack+7,x
.c744	b5 24		lda $24,x			lda DStack+0,x
.c746	f5 28		sbc $28,x			sbc DStack+4,x
.c748	b5 25		lda $25,x			lda DStack+1,x
.c74a	f5 29		sbc $29,x			sbc DStack+5,x
.c74c	60		rts				rts
>c74d	44 30 3c 3d			L1:	.text "D0<="	;  name of word as a string, ending at wh_NameLastChar
>c751	a4					.byte (("D0<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c752	ae c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c754	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c755	08					.byte NN	;wh_Flags	dictionary flags
=50897					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c756	b5 25		lda $25,x	D0Le:		lda DStack+1,x	; test sign
.c758	30 6b		bmi $c7c5			bmi True1
.c75a	10 27		bpl $c783			bpl D0Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c75c					en = *	; remember here
>c754	06					.byte CL	;wh_CodeLength
>c75c	44 30 3e			L1:	.text "D0>"	;  name of word as a string, ending at wh_NameLastChar
>c75f	c3					.byte (("D0>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c760	d1 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c762	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c763	08					.byte NN	;wh_Flags	dictionary flags
=50911					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c764	b5 25		lda $25,x	D0Gt:		lda DStack+1,x	; test sign
.c766	10 0c		bpl $c774			bpl D0Ne
.c768	4c e5 c7	jmp $c7e5			jmp False1
>c76b	44 30 3c 3e			L1:	.text "D0<>"	;  name of word as a string, ending at wh_NameLastChar
>c76f	c4					.byte (("D0<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c770	df c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c772	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c773	08					.byte NN	;wh_Flags	dictionary flags
=50927					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c774	20 8a c7	jsr $c78a	D0Ne:		jsr D0EqSub
.c777	d0 4c		bne $c7c5			bne True1
.c779	f0 6a		beq $c7e5			beq False1
=7					CL	.var *-(WordListLink+wh_Xt)
=$c77b					en = *	; remember here
>c772	07					.byte CL	;wh_CodeLength
>c77b	44 30 3d			L1:	.text "D0="	;  name of word as a string, ending at wh_NameLastChar
>c77e	a3					.byte (("D0="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c77f	ef c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c781	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c782	08					.byte NN	;wh_Flags	dictionary flags
=50942					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c783	20 8a c7	jsr $c78a	D0Equal:	jsr D0EqSub
.c786	d0 5d		bne $c7e5			bne False1
.c788	f0 3b		beq $c7c5			beq True1
=7					CL	.var *-(WordListLink+wh_Xt)
=$c78a					en = *	; remember here
>c781	07					.byte CL	;wh_CodeLength
.c78a	b5 26		lda $26,x	D0EqSub:	lda DStack+2,x
.c78c	15 27		ora $27,x			ora DStack+3,x
.c78e	15 24		ora $24,x			ora DStack+0,x
.c790	15 25		ora $25,x			ora DStack+1,x
.c792	60		rts				rts
>c793	44 30 3c			L1:	.text "D0<"	;  name of word as a string, ending at wh_NameLastChar
>c796	83					.byte (("D0<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c797	fe c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c799	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c79a	08					.byte NN	;wh_Flags	dictionary flags
=50966					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c79b	b5 25		lda $25,x	D0Less:		lda DStack+1,x	; test sign
.c79d	30 26		bmi $c7c5			bmi True1
.c79f	10 44		bpl $c7e5			bpl False1
=6					CL	.var *-(WordListLink+wh_Xt)
=$c7a1					en = *	; remember here
>c799	06					.byte CL	;wh_CodeLength
>c7a1	44 30 3e 3d			L1:	.text "D0>="	;  name of word as a string, ending at wh_NameLastChar
>c7a5	a4					.byte (("D0>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7a6	16 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7a8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7a9	08					.byte NN	;wh_Flags	dictionary flags
=50981					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7aa	b5 25		lda $25,x	D0Ge:		lda DStack+1,x	; test sign
.c7ac	10 17		bpl $c7c5			bpl True1
.c7ae	30 35		bmi $c7e5			bmi False1
=6					CL	.var *-(WordListLink+wh_Xt)
=$c7b0					en = *	; remember here
>c7a8	06					.byte CL	;wh_CodeLength
.c7b0	4c f3 b3	jmp $b3f3	Throw_Stack_08: jmp Throw_Stack
>c7b3	3d				L1:	.text "="	;  name of word as a string, ending at wh_NameLastChar
>c7b4	a1					.byte (("="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7b5	25 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7b8	08					.byte NN	;wh_Flags	dictionary flags
=50996					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7b9	b5 24		lda $24,x	Equal:		lda DStack+0,x		; LSB
.c7bb	d5 26		cmp $26,x			cmp DStack+2,x
.c7bd	d0 26		bne $c7e5			bne False1
.c7bf	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c7c1	d5 27		cmp $27,x			cmp DStack+3,x
.c7c3	d0 20		bne $c7e5			bne False1
.c7c5	a9 ff		lda #$ff	True1:		lda #$ff	; return TRUE
.c7c7					Return1:
.c7c7	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c7c9	b0 e5		bcs $c7b0		bcs Throw_Stack_08
.c7cb	e8		inx				inx		; Drop
.c7cc	e8		inx				inx
.c7cd	95 24		sta $24,x			sta DStack+0,x	; store f
.c7cf	95 25		sta $25,x			sta DStack+1,x
.c7d1	60		rts				rts
=25					CL	.var *-(WordListLink+wh_Xt)
=$c7d2					en = *	; remember here
>c7b7	19					.byte CL	;wh_CodeLength
>c7d2	3c 3e				L1:	.text "<>"	;  name of word as a string, ending at wh_NameLastChar
>c7d4	c2					.byte (("<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7d5	34 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7d7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7d8	08					.byte NN	;wh_Flags	dictionary flags
=51028					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7d9	b5 24		lda $24,x	Not_Equals:	lda DStack+0,x		; LSB
.c7db	d5 26		cmp $26,x			cmp DStack+2,x
.c7dd	d0 e6		bne $c7c5			bne True1
.c7df	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c7e1	d5 27		cmp $27,x			cmp DStack+3,x
.c7e3	d0 e0		bne $c7c5			bne True1
.c7e5	a9 00		lda #$00	False1:		lda #0		; return FALSE
.c7e7	f0 de		beq $c7c7			beq Return1
=16					CL	.var *-(WordListLink+wh_Xt)
=$c7e9					en = *	; remember here
>c7d7	10					.byte CL	;wh_CodeLength
>c7e9	3c				L1:	.text "<"	;  name of word as a string, ending at wh_NameLastChar
>c7ea	81					.byte (("<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7eb	54 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7ed	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7ee	08					.byte NN	;wh_Flags	dictionary flags
=51050					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7ef	b5 26		lda $26,x	Less_Than:	lda DStack+2,x	; compare
.c7f1	d5 24		cmp $24,x			cmp DStack+0,x
.c7f3	b5 27		lda $27,x			lda DStack+3,x
.c7f5	f5 25		sbc $25,x			sbc DStack+1,x
.c7f7	50 02		bvc $c7fb			bvc _c
.c7f9	49 80		eor #$80			eor #$80	; fix sign
.c7fb	10 e8		bpl $c7e5	_c:		bpl False1
.c7fd	30 c6		bmi $c7c5			bmi True1
=16					CL	.var *-(WordListLink+wh_Xt)
=$c7ff					en = *	; remember here
>c7ed	10					.byte CL	;wh_CodeLength
>c7ff	3e 3d				L1:	.text ">="	;  name of word as a string, ending at wh_NameLastChar
>c801	a2					.byte ((">="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c802	6a c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c804	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c805	08					.byte NN	;wh_Flags	dictionary flags
=51073					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c806	20 ef c7	jsr $c7ef	Ge:		jsr Less_Than
.c809	4c 84 c8	jmp $c884			jmp ZEqA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c80c					en = *	; remember here
>c804	06					.byte CL	;wh_CodeLength
>c80c	55 3c				L1:	.text "U<"	;  name of word as a string, ending at wh_NameLastChar
>c80e	82					.byte (("U<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c80f	81 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c811	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c812	08					.byte NN	;wh_Flags	dictionary flags
=51086					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c813	b5 26		lda $26,x	U_Less_Than:	lda DStack+2,x
.c815	d5 24		cmp $24,x			cmp DStack+0,x
.c817	b5 27		lda $27,x			lda DStack+3,x
.c819	f5 25		sbc $25,x			sbc DStack+1,x
.c81b	b0 c8		bcs $c7e5			bcs False1
.c81d	90 a6		bcc $c7c5			bcc True1
=12					CL	.var *-(WordListLink+wh_Xt)
=$c81f					en = *	; remember here
>c811	0c					.byte CL	;wh_CodeLength
>c81f	55 3e				L1:	.text "U>"	;  name of word as a string, ending at wh_NameLastChar
>c821	c2					.byte (("U>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c822	8e c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c824	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c825	08					.byte NN	;wh_Flags	dictionary flags
=51105					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c826	b5 24		lda $24,x	U_Greater_Than:	lda DStack+0,x
.c828	d5 26		cmp $26,x			cmp DStack+2,x
.c82a	b5 25		lda $25,x			lda DStack+1,x
.c82c	f5 27		sbc $27,x			sbc DStack+3,x
.c82e	b0 b5		bcs $c7e5			bcs False1
.c830	90 93		bcc $c7c5			bcc True1
=12					CL	.var *-(WordListLink+wh_Xt)
=$c832					en = *	; remember here
>c824	0c					.byte CL	;wh_CodeLength
>c832	3e				L1:	.text ">"	;  name of word as a string, ending at wh_NameLastChar
>c833	c1					.byte ((">"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c834	a1 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c836	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c837	08					.byte NN	;wh_Flags	dictionary flags
=51123					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c838	b5 24		lda $24,x	Greater_Than:	lda DStack+0,x	; compare
.c83a	d5 26		cmp $26,x			cmp DStack+2,x
.c83c	b5 25		lda $25,x			lda DStack+1,x
.c83e	f5 27		sbc $27,x			sbc DStack+3,x
.c840	50 02		bvc $c844			bvc _c
.c842	49 80		eor #$80			eor #$80	; fix sign
.c844	10 9f		bpl $c7e5	_c:		bpl False1
.c846	4c c5 c7	jmp $c7c5			jmp True1
=17					CL	.var *-(WordListLink+wh_Xt)
=$c849					en = *	; remember here
>c836	11					.byte CL	;wh_CodeLength
>c849	3c 3d				L1:	.text "<="	;  name of word as a string, ending at wh_NameLastChar
>c84b	a2					.byte (("<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c84c	b3 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c84e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c84f	08					.byte NN	;wh_Flags	dictionary flags
=51147					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c850	20 38 c8	jsr $c838	Le:		jsr Greater_Than
.c853	4c 84 c8	jmp $c884			jmp ZEqA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c856					en = *	; remember here
>c84e	06					.byte CL	;wh_CodeLength
>c856	55 3e 3d			L1:	.text "U>="	;  name of word as a string, ending at wh_NameLastChar
>c859	a3					.byte (("U>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c85a	cb c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c85c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c85d	08					.byte NN	;wh_Flags	dictionary flags
=51161					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c85e	20 13 c8	jsr $c813	UGe:		jsr U_Less_Than
.c861	4c 84 c8	jmp $c884			jmp ZEqA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c864					en = *	; remember here
>c85c	06					.byte CL	;wh_CodeLength
>c864	55 3c 3d			L1:	.text "U<="	;  name of word as a string, ending at wh_NameLastChar
>c867	a3					.byte (("U<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c868	d9 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c86a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c86b	08					.byte NN	;wh_Flags	dictionary flags
=51175					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c86c	20 26 c8	jsr $c826	ULe:		jsr U_Greater_Than
.c86f	4c 84 c8	jmp $c884			jmp ZEqA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c872					en = *	; remember here
>c86a	06					.byte CL	;wh_CodeLength
.c872	4c f3 b3	jmp $b3f3	Throw_Stack_11: jmp Throw_Stack
>c875	30 3d				L1:	.text "0="	;  name of word as a string, ending at wh_NameLastChar
>c877	a2					.byte (("0="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c878	e7 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c87a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c87b	08					.byte NN	;wh_Flags	dictionary flags
=51191					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c87c	b5 25		lda $25,x	Zero_Equal:	lda DStack+1,x
.c87e	15 24		ora $24,x	ZEq3:		ora DStack+0,x
.c880	d0 2d		bne $c8af			bne False0
.c882	f0 15		beq $c899			beq True0
=8					CL	.var *-(WordListLink+wh_Xt)
=$c884					en = *	; remember here
>c87a	08					.byte CL	;wh_CodeLength
.c884					ZEqA:
.c884	49 ff		eor #$ff			eor #$ff
.c886	95 24		sta $24,x			sta DStack+0,x
.c888	95 25		sta $25,x			sta DStack+1,x
.c88a	60		rts				rts
>c88b	30 3c 3e			L1:	.text "0<>"	;  name of word as a string, ending at wh_NameLastChar
>c88e	c3					.byte (("0<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c88f	f7 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c891	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c892	08					.byte NN	;wh_Flags	dictionary flags
=51214					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c893	b5 25		lda $25,x	Zero_Unequal:	lda DStack+1,x
.c895	15 24		ora $24,x	ZNe3:		ora DStack+0,x
.c897	f0 16		beq $c8af			beq False0
.c899	a9 ff		lda #$ff	True0:		lda #$ff	; return TRUE
.c89b	95 24		sta $24,x	Return0:	sta DStack+0,x
.c89d	95 25		sta $25,x			sta DStack+1,x
.c89f	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c8a1	b0 39		bcs $c8dc		bcs Throw_Stack_05
.c8a3	60		rts				rts
=17					CL	.var *-(WordListLink+wh_Xt)
=$c8a4					en = *	; remember here
>c891	11					.byte CL	;wh_CodeLength
>c8a4	30 3e				L1:	.text "0>"	;  name of word as a string, ending at wh_NameLastChar
>c8a6	c2					.byte (("0>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8a7	0e c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8a9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8aa	08					.byte NN	;wh_Flags	dictionary flags
=51238					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8ab	b5 25		lda $25,x	Zero_Greater:	lda DStack+1,x	; MSB
.c8ad	10 e6		bpl $c895			bpl ZNe3	; >= 0 ?
.c8af	a9 00		lda #$00	False0:		lda #0		; return FALSE
.c8b1	f0 e8		beq $c89b			beq Return0
=8					CL	.var *-(WordListLink+wh_Xt)
=$c8b3					en = *	; remember here
>c8a9	08					.byte CL	;wh_CodeLength
>c8b3	30 3c 3d			L1:	.text "0<="	;  name of word as a string, ending at wh_NameLastChar
>c8b6	a3					.byte (("0<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8b7	26 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8b9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8ba	08					.byte NN	;wh_Flags	dictionary flags
=51254					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8bb	b5 25		lda $25,x	ZLe:		lda DStack+1,x	; < 0 ?
.c8bd	30 da		bmi $c899			bmi True0
.c8bf	10 bd		bpl $c87e			bpl ZEq3
=6					CL	.var *-(WordListLink+wh_Xt)
=$c8c1					en = *	; remember here
>c8b9	06					.byte CL	;wh_CodeLength
>c8c1	30 3e 3d			L1:	.text "0>="	;  name of word as a string, ending at wh_NameLastChar
>c8c4	a3					.byte (("0>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8c5	36 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8c8	08					.byte NN	;wh_Flags	dictionary flags
=51268					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8c9	b5 25		lda $25,x	ZGe:		lda DStack+1,x
.c8cb	10 cc		bpl $c899			bpl True0
.c8cd	30 e0		bmi $c8af			bmi False0
=6					CL	.var *-(WordListLink+wh_Xt)
=$c8cf					en = *	; remember here
>c8c7	06					.byte CL	;wh_CodeLength
>c8cf	30 3c				L1:	.text "0<"	;  name of word as a string, ending at wh_NameLastChar
>c8d1	82					.byte (("0<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8d2	44 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8d4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8d5	08					.byte NN	;wh_Flags	dictionary flags
=51281					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8d6	b5 25		lda $25,x	Zero_Less:	lda DStack+1,x	; MSB
.c8d8	10 d5		bpl $c8af			bpl False0
.c8da	30 bd		bmi $c899			bmi True0
=6					CL	.var *-(WordListLink+wh_Xt)
=$c8dc					en = *	; remember here
>c8d4	06					.byte CL	;wh_CodeLength
.c8dc	4c f3 b3	jmp $b3f3	Throw_Stack_05: jmp Throw_Stack
>c8df	4d 69 6e			L1:	.text "Min"	;  name of word as a string, ending at wh_NameLastChar
>c8e2	c3					.byte (("Min"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8e3	51 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8e5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8e6	18					.byte UF+NN	;wh_Flags	dictionary flags
=51298					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8e7					Min:
.c8e7	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c8e9	b0 f1		bcs $c8dc		bcs Throw_Stack_05
.c8eb	b5 24		lda $24,x			lda DStack+0,x	; compare n1 & n2; sets V & N but not Z
.c8ed	d5 26		cmp $26,x			cmp DStack+2,x
.c8ef	b5 25		lda $25,x			lda DStack+1,x
.c8f1	f5 27		sbc $27,x			sbc DStack+3,x
.c8f3	70 1b		bvs $c910			bvs Max_3	; if overflow, the sign is backwards
.c8f5	30 29		bmi $c920	Min_3:		bmi Nip_NoUf	; if negative, NOS is larger and needs to be dumped
.c8f7	e8		inx				inx		; Drop n2
.c8f8	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$c8f9					en = *	; remember here
>c8e5	12					.byte CL	;wh_CodeLength
.c8f9	60		rts				rts
>c8fa	4d 61 78			L1:	.text "Max"	;  name of word as a string, ending at wh_NameLastChar
>c8fd	03					.byte (("Max"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8fe	62 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c900	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c901	08					.byte NN	;wh_Flags	dictionary flags
=51325					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c902					Max:
.c902	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c904	b0 d6		bcs $c8dc		bcs Throw_Stack_05
.c906	b5 24		lda $24,x			lda DStack+0,x	; Compare n1 & n2; sets V & N but not Z
.c908	d5 26		cmp $26,x			cmp DStack+2,x
.c90a	b5 25		lda $25,x			lda DStack+1,x
.c90c	f5 27		sbc $27,x			sbc DStack+3,x
.c90e	70 e5		bvs $c8f5			bvs Min_3	; if overflow, the sign is backwards
.c910	10 0e		bpl $c920	Max_3:		bpl Nip_NoUf	; if negative, NOS is larger and needs to be kept
.c912	e8		inx				inx		; Drop n2
.c913	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$c914					en = *	; remember here
>c900	12					.byte CL	;wh_CodeLength
.c914	60		rts				rts
>c915	4e 69 70			L1:	.text "Nip"	;  name of word as a string, ending at wh_NameLastChar
>c918	03					.byte (("Nip"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c919	7d c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c91b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c91c	10					.byte UF	;wh_Flags	dictionary flags
=51352					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c91d					Nip:
.c91d	20 e4 b3	jsr $b3e4			jsr underflow_2
.c920	b5 24		lda $24,x	Nip_NoUf:	lda DStack+0,x	; PopYA
.c922	b4 25		ldy $25,x			ldy DStack+1,x
.c924	e8		inx				inx
.c925	e8		inx				inx
.c926	95 24		sta $24,x			sta DStack+0,x	; store over n1
.c928	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$c92a					en = *	; remember here
>c91b	0d					.byte CL	;wh_CodeLength
.c92a	60		rts				rts
>c92b	50 69 63 6b			L1:	.text "Pick"	;  name of word as a string, ending at wh_NameLastChar
>c92f	64					.byte (("Pick"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c930	98 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c932	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c933	00					.byte 0	;wh_Flags	dictionary flags
=51375					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c934					Pick:
.c934	16 24		asl $24,x			asl DStack+0,x	; we assume u < 128 (stack is small)
.c936	8a		txa				txa
.c937	75 24		adc $24,x			adc DStack+0,x
.c939	a8		tay				tay
.c93a	b9 26 00	lda $0026,y			lda DStack+2,y
.c93d	95 24		sta $24,x			sta DStack+0,x
.c93f	b9 27 00	lda $0027,y			lda DStack+3,y
.c942	95 25		sta $25,x			sta DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$c944					en = *	; remember here
>c932	10					.byte CL	;wh_CodeLength
.c944	60		rts				rts
>c945	43 68 61 72			L1:	.text "Char"	;  name of word as a string, ending at wh_NameLastChar
>c949	44					.byte (("Char"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c94a	af c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c94c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c94d	08					.byte NN	;wh_Flags	dictionary flags
=51401					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c94e					Char:
.c94e	20 81 ba	jsr $ba81			jsr parse_name_check
.c951	e8		inx				inx		; Drop number of characters, leave addr
.c952	e8		inx				inx
.c953	4c 05 cd	jmp $cd05			jmp C_Fetch	; get character ( C@ )
=8					CL	.var *-(WordListLink+wh_Xt)
=$c956					en = *	; remember here
>c94c	08					.byte CL	;wh_CodeLength
>c956	5b 43 68 61 72 5d		L1:	.text "[Char]"	;  name of word as a string, ending at wh_NameLastChar
>c95c	a6					.byte (("[Char]"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c95d	c9 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c95f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c960	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=51420					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c961	20 4e c9	jsr $c94e	Bracket_Char:	jsr Char
.c964	4c 12 b7	jmp $b712			jmp Literal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c967					en = *	; remember here
>c95f	06					.byte CL	;wh_CodeLength
>c967	43 68 61 72 2b			L1:	.text "Char+"	;  name of word as a string, ending at wh_NameLastChar
>c96c	65					.byte (("Char+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c96d	dc c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c96f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c970	00					.byte 0	;wh_Flags	dictionary flags
=51436					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c971					Char_Plus:
.c971	20 cf b3	jsr $b3cf			jsr underflow_1
.c974	f6 24		inc $24,x			inc DStack+0,x
.c976	d0 02		bne $c97a			bne +
.c978	f6 25		inc $25,x			inc DStack+1,x
.c97a					+
=9					CL	.var *-(WordListLink+wh_Xt)
=$c97a					en = *	; remember here
>c96f	09					.byte CL	;wh_CodeLength
.c97a	60		rts				rts
>c97b	43 68 61 72 73			L1:	.text "Chars"	;  name of word as a string, ending at wh_NameLastChar
>c980	65					.byte (("Chars"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c981	ec c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c983	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c984	02					.byte AN	;wh_Flags	dictionary flags
=51456					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c985					Chars:
=0					CL	.var *-(WordListLink+wh_Xt)
=$c985					en = *	; remember here
>c983	00					.byte CL	;wh_CodeLength
.c985	60		rts				rts
>c986	43 65 6c 6c 73			L1:	.text "Cells"	;  name of word as a string, ending at wh_NameLastChar
>c98b	65					.byte (("Cells"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c98c	00 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c98e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c98f	10					.byte UF	;wh_Flags	dictionary flags
=51467					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c990					Cells:
.c990	20 cf b3	jsr $b3cf			jsr underflow_1
.c993	16 24		asl $24,x			asl DStack+0,x		; 2*
.c995	36 25		rol $25,x			rol DStack+1,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$c997					en = *	; remember here
>c98e	07					.byte CL	;wh_CodeLength
.c997	60		rts				rts
>c998	43 65 6c 6c 2b			L1:	.text "Cell+"	;  name of word as a string, ending at wh_NameLastChar
>c99d	65					.byte (("Cell+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c99e	0b c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9a0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9a1	10					.byte UF	;wh_Flags	dictionary flags
=51485					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9a2					Cell_Plus:
.c9a2	20 cf b3	jsr $b3cf			jsr underflow_1
.c9a5	a9 02		lda #$02	Cell_Plus_NoUf:	lda #2		; our cells are 2 bytes
.c9a7					Plus_A:
.c9a7	18		clc				clc
.c9a8	75 24		adc $24,x			adc DStack+0,x
.c9aa	95 24		sta $24,x			sta DStack+0,x
.c9ac	90 02		bcc $c9b0			bcc +
.c9ae	f6 25		inc $25,x			inc DStack+1,x
.c9b0					+
=14					CL	.var *-(WordListLink+wh_Xt)
=$c9b0					en = *	; remember here
>c9a0	0e					.byte CL	;wh_CodeLength
.c9b0	60		rts				rts
.c9b1					Nos_Plus_A:
.c9b1	18		clc				clc
.c9b2	75 26		adc $26,x			adc DStack+2,x
.c9b4	95 26		sta $26,x			sta DStack+2,x
.c9b6	90 02		bcc $c9ba			bcc +
.c9b8	f6 27		inc $27,x			inc DStack+3,x
.c9ba	60		rts		+		rts
>c9bb	48 65 72 65			L1:	.text "Here"	;  name of word as a string, ending at wh_NameLastChar
>c9bf	a4					.byte (("Here"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9c0	1d c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9c3	08					.byte NN	;wh_Flags	dictionary flags
=51519					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9c4	a5 00		lda $00		Here:		lda cp+0
.c9c6	a4 01		ldy $01				ldy cp+1
.c9c8	4c 5f b7	jmp $b75f			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$c9cb					en = *	; remember here
>c9c2	07					.byte CL	;wh_CodeLength
>c9cb	31 2d				L1:	.text "1-"	;  name of word as a string, ending at wh_NameLastChar
>c9cd	a2					.byte (("1-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9ce	3f c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9d0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9d1	10					.byte UF	;wh_Flags	dictionary flags
=51533					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9d2					One_Minus:
.c9d2	20 cf b3	jsr $b3cf			jsr underflow_1
.c9d5					One_Minus_NoUf:
.c9d5	b5 24		lda $24,x			lda DStack+0,x
.c9d7	d0 02		bne $c9db			bne +
.c9d9	d6 25		dec $25,x			dec DStack+1,x
.c9db	d6 24		dec $24,x	+		dec DStack+0,x
=11					CL	.var *-(WordListLink+wh_Xt)
=$c9dd					en = *	; remember here
>c9d0	0b					.byte CL	;wh_CodeLength
.c9dd	60		rts				rts
.c9de					NOS_One_Minus:
.c9de	b5 26		lda $26,x			lda DStack+2,x
.c9e0	d0 02		bne $c9e4			bne +
.c9e2	d6 27		dec $27,x			dec DStack+3,x
.c9e4	d6 26		dec $26,x	+		dec DStack+2,x
.c9e6	60		rts				rts
.c9e7					Minus_A:
.c9e7	18		clc				clc
.c9e8	75 24		adc $24,x			adc DStack+0,x
.c9ea	95 24		sta $24,x			sta DStack+0,x
.c9ec	b0 02		bcs $c9f0			bcs +
.c9ee	d6 25		dec $25,x			dec DStack+1,x
.c9f0	60		rts		+		rts
>c9f1	31 2b				L1:	.text "1+"	;  name of word as a string, ending at wh_NameLastChar
>c9f3	62					.byte (("1+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9f4	4d c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9f6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9f7	10					.byte UF	;wh_Flags	dictionary flags
=51571					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9f8					One_Plus:
.c9f8	20 cf b3	jsr $b3cf			jsr underflow_1
.c9fb	f6 24		inc $24,x			inc DStack+0,x
.c9fd	d0 02		bne $ca01			bne +
.c9ff	f6 25		inc $25,x			inc DStack+1,x
.ca01					+
=9					CL	.var *-(WordListLink+wh_Xt)
=$ca01					en = *	; remember here
>c9f6	09					.byte CL	;wh_CodeLength
.ca01	60		rts				rts
.ca02					NOS_One_Plus:
.ca02	f6 26		inc $26,x			inc DStack+2,x
.ca04	d0 02		bne $ca08			bne +
.ca06	f6 27		inc $27,x			inc DStack+3,x
.ca08	60		rts		+		rts
>ca09	55 4d 2b			L1:	.text "UM+"	;  name of word as a string, ending at wh_NameLastChar
>ca0c	63					.byte (("UM+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca0d	73 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca0f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca10	00					.byte 0	;wh_Flags	dictionary flags
=51596					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca11	20 a5 b3	jsr $b3a5	UMPlus:		jsr PopYA
.ca14	18		clc				clc		; add n to d1.lo
.ca15	75 26		adc $26,x			adc DStack+2,x
.ca17	95 26		sta $26,x			sta DStack+2,x
.ca19	98		tya				tya
.ca1a	75 27		adc $27,x			adc DStack+3,x
.ca1c	95 27		sta $27,x			sta DStack+3,x
.ca1e	90 06		bcc $ca26			bcc +		; propagate carry thru d1.hi
.ca20	f6 24		inc $24,x			inc DStack+0,x
.ca22	d0 02		bne $ca26			bne +
.ca24	f6 25		inc $25,x			inc DStack+1,x
.ca26					+
=21					CL	.var *-(WordListLink+wh_Xt)
=$ca26					en = *	; remember here
>ca0f	15					.byte CL	;wh_CodeLength
.ca26	60		rts				rts
>ca27	4d 2b				L1:	.text "M+"	;  name of word as a string, ending at wh_NameLastChar
>ca29	62					.byte (("M+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca2a	8c c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca2c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca2d	08					.byte NN	;wh_Flags	dictionary flags
=51625					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca2e	20 11 ca	jsr $ca11	MPlus:		jsr UMPlus
.ca31	98		tya				tya		; if n negative
.ca32	30 a1		bmi $c9d5			bmi One_Minus_NoUf ;   decrement d1.hi
=6					CL	.var *-(WordListLink+wh_Xt)
=$ca34					en = *	; remember here
>ca2c	06					.byte CL	;wh_CodeLength
.ca34	60		rts				rts
>ca35	44 32 2a			L1:	.text "D2*"	;  name of word as a string, ending at wh_NameLastChar
>ca38	43					.byte (("D2*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca39	a9 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca3b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca3c	10					.byte UF	;wh_Flags	dictionary flags
=51640					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca3d	20 e4 b3	jsr $b3e4	D2Star:		jsr underflow_2
.ca40	16 26		asl $26,x			asl DStack+2,x
.ca42	36 27		rol $27,x			rol DStack+3,x
.ca44	36 24		rol $24,x			rol DStack+0,x
.ca46	36 25		rol $25,x			rol DStack+1,x
=11					CL	.var *-(WordListLink+wh_Xt)
=$ca48					en = *	; remember here
>ca3b	0b					.byte CL	;wh_CodeLength
.ca48	60		rts				rts
>ca49	44 32 2f			L1:	.text "D2/"	;  name of word as a string, ending at wh_NameLastChar
>ca4c	e3					.byte (("D2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca4d	b8 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca4f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca50	10					.byte UF	;wh_Flags	dictionary flags
=51660					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca51	20 e4 b3	jsr $b3e4	D2Slash:	jsr underflow_2
.ca54	b5 25		lda $25,x			lda DStack+1,x		; setup for sign-extended shift right
.ca56	0a		asl a				asl a
.ca57	76 25		ror $25,x	D2SlashU:	ror DStack+1,x
.ca59	76 24		ror $24,x			ror DStack+0,x
.ca5b	76 27		ror $27,x			ror DStack+3,x
.ca5d	76 26		ror $26,x			ror DStack+2,x
=14					CL	.var *-(WordListLink+wh_Xt)
=$ca5f					en = *	; remember here
>ca4f	0e					.byte CL	;wh_CodeLength
.ca5f	60		rts				rts
>ca60	55 44 32 2f			L1:	.text "UD2/"	;  name of word as a string, ending at wh_NameLastChar
>ca64	e4					.byte (("UD2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca65	cc c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca67	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca68	18					.byte UF+NN	;wh_Flags	dictionary flags
=51684					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca69	20 e4 b3	jsr $b3e4	DU2Slash:	jsr underflow_2
.ca6c	18		clc				clc
.ca6d	90 e8		bcc $ca57			bcc D2SlashU
=6					CL	.var *-(WordListLink+wh_Xt)
=$ca6f					en = *	; remember here
>ca67	06					.byte CL	;wh_CodeLength
>ca6f	32 2a				L1:	.text "2*"	;  name of word as a string, ending at wh_NameLastChar
>ca71	42					.byte (("2*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca72	e4 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca74	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca75	10					.byte UF	;wh_Flags	dictionary flags
=51697					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca76					Two_Star:
.ca76	20 cf b3	jsr $b3cf			jsr underflow_1
.ca79	16 24		asl $24,x			asl DStack+0,x
.ca7b	36 25		rol $25,x			rol DStack+1,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$ca7d					en = *	; remember here
>ca74	07					.byte CL	;wh_CodeLength
.ca7d	60		rts				rts
>ca7e	32 2f				L1:	.text "2/"	;  name of word as a string, ending at wh_NameLastChar
>ca80	e2					.byte (("2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca81	f1 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca83	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca84	10					.byte UF	;wh_Flags	dictionary flags
=51712					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca85					Two_Slash:
.ca85	20 cf b3	jsr $b3cf			jsr underflow_1
.ca88	b5 25		lda $25,x			lda DStack+1,x		; load sign into carry, for signed shift
.ca8a	0a		asl a				asl
.ca8b	76 25		ror $25,x			ror DStack+1,x
.ca8d	76 24		ror $24,x			ror DStack+0,x
=10					CL	.var *-(WordListLink+wh_Xt)
=$ca8f					en = *	; remember here
>ca83	0a					.byte CL	;wh_CodeLength
.ca8f	60		rts				rts
>ca90	55 32 2f			L1:	.text "U2/"	;  name of word as a string, ending at wh_NameLastChar
>ca93	e3					.byte (("U2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca94	00 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca96	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca97	10					.byte UF	;wh_Flags	dictionary flags
=51731					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca98					UTwo_Slash:
.ca98	20 cf b3	jsr $b3cf			jsr underflow_1
.ca9b	56 25		lsr $25,x			lsr DStack+1,x
.ca9d	76 24		ror $24,x			ror DStack+0,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$ca9f					en = *	; remember here
>ca96	07					.byte CL	;wh_CodeLength
.ca9f	60		rts				rts
>caa0	44 52 53 68 69 66 74		L1:	.text "DRShift"	;  name of word as a string, ending at wh_NameLastChar
>caa7	87					.byte (("DRShift"[-1]&7)<<5)+(*-L1)	;wh_HNL
>caa8	13 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>caaa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>caab	00					.byte 0	;wh_Flags	dictionary flags
=51751					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.caac	20 89 b3	jsr $b389	DRShift:	jsr PopA	; pop u
.caaf	a8		tay		DRShiftA:	tay
.cab0	f0 0e		beq $cac0			beq _9
.cab2	b5 25		lda $25,x			lda DStack+1,x
.cab4	4a		lsr a		_2:		lsr a
.cab5	76 24		ror $24,x			ror DStack+0,x
.cab7	76 27		ror $27,x			ror DStack+3,x
.cab9	76 26		ror $26,x			ror DStack+2,x
.cabb	88		dey				dey
.cabc	d0 f6		bne $cab4			bne _2
.cabe	95 25		sta $25,x			sta DStack+1,x
.cac0					_9:
=20					CL	.var *-(WordListLink+wh_Xt)
=$cac0					en = *	; remember here
>caaa	14					.byte CL	;wh_CodeLength
.cac0	60		rts				rts
>cac1	52 53 68 69 66 74		L1:	.text "RShift"	;  name of word as a string, ending at wh_NameLastChar
>cac7	86					.byte (("RShift"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cac8	27 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>caca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cacb	00					.byte 0	;wh_Flags	dictionary flags
=51783					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cacc	20 92 b3	jsr $b392	RShift:		jsr PopA2	; pop u, check for 2 params
.cacf	a8		tay		RShift_A:	tay		; get shift count
.cad0	f0 0a		beq $cadc			beq _done
.cad2	b5 25		lda $25,x			lda DStack+1,x
.cad4	4a		lsr a		_loop:		lsr a
.cad5	76 24		ror $24,x			ror DStack+0,x
.cad7	88		dey				dey
.cad8	d0 fa		bne $cad4			bne _loop
.cada	95 25		sta $25,x			sta DStack+1,x
.cadc					_done:
=16					CL	.var *-(WordListLink+wh_Xt)
=$cadc					en = *	; remember here
>caca	10					.byte CL	;wh_CodeLength
.cadc	60		rts				rts
>cadd	4c 53 68 69 66 74		L1:	.text "LShift"	;  name of word as a string, ending at wh_NameLastChar
>cae3	86					.byte (("LShift"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cae4	47 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cae6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cae7	00					.byte 0	;wh_Flags	dictionary flags
=51811					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cae8	20 92 b3	jsr $b392	LShift:		jsr PopA2	; pop u, check for 2 params
.caeb	a8		tay		LShift_A:	tay		; get shift count
.caec	f0 0a		beq $caf8			beq _done
.caee	b5 25		lda $25,x			lda DStack+1,x
.caf0	16 24		asl $24,x	_loop:		asl DStack+0,x
.caf2	2a		rol a				rol a
.caf3	88		dey				dey
.caf4	d0 fa		bne $caf0			bne _loop
.caf6	95 25		sta $25,x			sta DStack+1,x
.caf8					_done:
=16					CL	.var *-(WordListLink+wh_Xt)
=$caf8					en = *	; remember here
>cae6	10					.byte CL	;wh_CodeLength
.caf8	60		rts				rts
>caf9	41 6e 64			L1:	.text "And"	;  name of word as a string, ending at wh_NameLastChar
>cafc	83					.byte (("And"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cafd	63 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>caff	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb00	10					.byte UF	;wh_Flags	dictionary flags
=51836					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb01					And2:
.cb01	20 e4 b3	jsr $b3e4			jsr underflow_2
.cb04	b5 24		lda $24,x			lda DStack+0,x
.cb06	35 26		and $26,x			and DStack+2,x
.cb08	95 26		sta $26,x			sta DStack+2,x
.cb0a	b5 25		lda $25,x			lda DStack+1,x
.cb0c	35 27		and $27,x			and DStack+3,x
.cb0e	95 27		sta $27,x			sta DStack+3,x
.cb10	e8		inx				inx		; Drop n2
.cb11	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$cb12					en = *	; remember here
>caff	11					.byte CL	;wh_CodeLength
.cb12	60		rts				rts
>cb13	4f 72				L1:	.text "Or"	;  name of word as a string, ending at wh_NameLastChar
>cb15	42					.byte (("Or"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb16	7c ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb18	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb19	10					.byte UF	;wh_Flags	dictionary flags
=51861					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb1a					Or:
.cb1a	20 e4 b3	jsr $b3e4			jsr underflow_2
.cb1d	b5 24		lda $24,x			lda DStack+0,x
.cb1f	15 26		ora $26,x			ora DStack+2,x
.cb21	95 26		sta $26,x			sta DStack+2,x
.cb23	b5 25		lda $25,x			lda DStack+1,x
.cb25	15 27		ora $27,x			ora DStack+3,x
.cb27	95 27		sta $27,x			sta DStack+3,x
.cb29	e8		inx				inx		; Drop n2
.cb2a	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$cb2b					en = *	; remember here
>cb18	11					.byte CL	;wh_CodeLength
.cb2b	60		rts				rts
>cb2c	58 6f 72			L1:	.text "Xor"	;  name of word as a string, ending at wh_NameLastChar
>cb2f	43					.byte (("Xor"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb30	95 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb32	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb33	10					.byte UF	;wh_Flags	dictionary flags
=51887					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb34					Xor:
.cb34	20 e4 b3	jsr $b3e4			jsr underflow_2
.cb37	b5 24		lda $24,x			lda DStack+0,x
.cb39	55 26		eor $26,x			eor DStack+2,x
.cb3b	95 26		sta $26,x			sta DStack+2,x
.cb3d	b5 25		lda $25,x			lda DStack+1,x
.cb3f	55 27		eor $27,x			eor DStack+3,x
.cb41	95 27		sta $27,x			sta DStack+3,x
.cb43	e8		inx				inx		; Drop n2
.cb44	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$cb45					en = *	; remember here
>cb32	11					.byte CL	;wh_CodeLength
.cb45	60		rts				rts
>cb46	2b				L1:	.text "+"	;  name of word as a string, ending at wh_NameLastChar
>cb47	61					.byte (("+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb48	af ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb4a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb4b	10					.byte UF	;wh_Flags	dictionary flags
=51911					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb4c					Plus:
.cb4c	20 e4 b3	jsr $b3e4			jsr underflow_2
.cb4f	18		clc				clc
.cb50	b5 24		lda $24,x			lda DStack+0,x		; LSB
.cb52	75 26		adc $26,x			adc DStack+2,x
.cb54	95 26		sta $26,x			sta DStack+2,x
.cb56	b5 25		lda $25,x			lda DStack+1,x		; MSB. No CLC, conserve carry bit
.cb58	75 27		adc $27,x			adc DStack+3,x
.cb5a	95 27		sta $27,x			sta DStack+3,x
.cb5c	e8		inx				inx
.cb5d	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$cb5e					en = *	; remember here
>cb4a	12					.byte CL	;wh_CodeLength
.cb5e	60		rts				rts
>cb5f	2d				L1:	.text "-"	;  name of word as a string, ending at wh_NameLastChar
>cb60	a1					.byte (("-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb61	c7 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb63	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb64	10					.byte UF	;wh_Flags	dictionary flags
=51936					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb65					Minus:
.cb65	20 e4 b3	jsr $b3e4			jsr underflow_2
.cb68	38		sec				sec
.cb69	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cb6b	f5 24		sbc $24,x			sbc DStack+0,x
.cb6d	95 26		sta $26,x			sta DStack+2,x
.cb6f	b5 27		lda $27,x			lda DStack+3,x	; MSB
.cb71	f5 25		sbc $25,x			sbc DStack+1,x
.cb73	95 27		sta $27,x			sta DStack+3,x
.cb75	e8		inx				inx		; Drop n2
.cb76	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$cb77					en = *	; remember here
>cb63	12					.byte CL	;wh_CodeLength
.cb77	60		rts				rts
>cb78	2e				L1:	.text "."	;  name of word as a string, ending at wh_NameLastChar
>cb79	c1					.byte (("."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb7a	e0 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb7c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb7d	08					.byte NN	;wh_Flags	dictionary flags
=51961					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb7e	b5 25		lda $25,x	Dot:		lda DStack+1,x		; ( n )	save sign
.cb80	08		php				php
.cb81	20 2e c6	jsr $c62e			jsr Abs			; ( u )
.cb84	20 b0 b7	jsr $b7b0			jsr Zero		; ( ud )	u>d  cvt u to ud
.cb87	4c 97 cb	jmp $cb97			jmp fmt_d3
=12					CL	.var *-(WordListLink+wh_Xt)
=$cb8a					en = *	; remember here
>cb7c	0c					.byte CL	;wh_CodeLength
>cb8a	44 2e				L1:	.text "D."	;  name of word as a string, ending at wh_NameLastChar
>cb8c	c2					.byte (("D."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb8d	f9 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb8f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb90	08					.byte NN	;wh_Flags	dictionary flags
=51980					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb91	b5 25		lda $25,x	D_Dot:		lda DStack+1,x		; save sign
.cb93	08		php				php
.cb94	20 63 c6	jsr $c663			jsr DAbs
.cb97	20 5a ab	jsr $ab5a	fmt_d3:		jsr Less_Number_Sign	; ( ud )	start formatting
.cb9a	20 cd ab	jsr $abcd			jsr Number_sign_s	; ( ud )	do all digits
.cb9d	28		plp				plp			; ( ud )	do sign
.cb9e	20 e8 ab	jsr $abe8			jsr Sign_P		; ( ud )
.cba1	20 67 ab	jsr $ab67			jsr Number_sign_greater	; ( addr u )	end formatting
.cba4	20 8a cd	jsr $cd8a			jsr Type
.cba7	4c 7d cd	jmp $cd7d			jmp Space
=25					CL	.var *-(WordListLink+wh_Xt)
=$cbaa					en = *	; remember here
>cb8f	19					.byte CL	;wh_CodeLength
>cbaa	55 2e				L1:	.text "U."	;  name of word as a string, ending at wh_NameLastChar
>cbac	c2					.byte (("U."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbad	0c cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbaf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbb0	18					.byte UF+NN	;wh_Flags	dictionary flags
=52012					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbb1	20 cf b3	jsr $b3cf	U_Dot:		jsr underflow_1
.cbb4	20 cb cb	jsr $cbcb			jsr print_u
.cbb7	4c 7d cd	jmp $cd7d			jmp Space
=9					CL	.var *-(WordListLink+wh_Xt)
=$cbba					en = *	; remember here
>cbaf	09					.byte CL	;wh_CodeLength
>cbba	55 44 2e			L1:	.text "UD."	;  name of word as a string, ending at wh_NameLastChar
>cbbd	c3					.byte (("UD."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbbe	2c cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbc0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbc1	18					.byte UF+NN	;wh_Flags	dictionary flags
=52029					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbc2	20 e4 b3	jsr $b3e4	UD_Dot:		jsr underflow_2 ; double number
.cbc5	20 ce cb	jsr $cbce			jsr print_ud
.cbc8	4c 7d cd	jmp $cd7d			jmp Space
=9					CL	.var *-(WordListLink+wh_Xt)
=$cbcb					en = *	; remember here
>cbc0	09					.byte CL	;wh_CodeLength
.cbcb					print_u:
.cbcb	20 b0 b7	jsr $b7b0			jsr Zero			; convert to ud
.cbce					print_ud:
.cbce	20 5a ab	jsr $ab5a			jsr Less_Number_Sign		; <#	start formatting
.cbd1	20 cd ab	jsr $abcd			jsr Number_sign_s		; #S	do all digits
.cbd4	20 67 ab	jsr $ab67			jsr Number_sign_greater		; #>	end formatting
.cbd7	4c 8a cd	jmp $cd8a			jmp Type
>cbda	55 2e 52			L1:	.text "U.R"	;  name of word as a string, ending at wh_NameLastChar
>cbdd	43					.byte (("U.R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbde	3d cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbe0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbe1	08					.byte NN	;wh_Flags	dictionary flags
=52061					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbe2	20 89 b3	jsr $b389	U_Dot_R:	jsr PopA		; save field width
.cbe5	48		pha		U_Dot_R_A:	pha
.cbe6	20 b0 b7	jsr $b7b0			jsr Zero		; u>d  cvt u to ud
.cbe9	4c f9 cb	jmp $cbf9			jmp fmt_udr3
=10					CL	.var *-(WordListLink+wh_Xt)
=$cbec					en = *	; remember here
>cbe0	0a					.byte CL	;wh_CodeLength
>cbec	55 44 2e 52			L1:	.text "UD.R"	;  name of word as a string, ending at wh_NameLastChar
>cbf0	44					.byte (("UD.R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbf1	5d cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbf3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbf4	08					.byte NN	;wh_Flags	dictionary flags
=52080					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbf5	20 89 b3	jsr $b389	UD_Dot_R:	jsr PopA			; save field width
.cbf8	48		pha		UD_Dot_R_A:	pha
.cbf9	20 5a ab	jsr $ab5a	fmt_udr3:	jsr Less_Number_Sign		; start formatted
.cbfc	20 cd ab	jsr $abcd			jsr Number_sign_s		; do all digits
.cbff	20 67 ab	jsr $ab67	fmt_r:		jsr Number_sign_greater		; finish formatted
.cc02	68		pla				pla				; recover field width
.cc03	38		sec				sec				; do leading spaces
.cc04	f5 24		sbc $24,x			sbc DStack+0,x
.cc06	90 06		bcc $cc0e			bcc +
.cc08	20 a1 b7	jsr $b7a1			jsr PushZA
.cc0b	20 15 c4	jsr $c415			jsr Spaces
.cc0e	4c 8a cd	jmp $cd8a	+		jmp Type			; type formatted
=28					CL	.var *-(WordListLink+wh_Xt)
=$cc11					en = *	; remember here
>cbf3	1c					.byte CL	;wh_CodeLength
>cc11	2e 52				L1:	.text ".R"	;  name of word as a string, ending at wh_NameLastChar
>cc13	42					.byte ((".R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc14	70 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc16	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc17	08					.byte NN	;wh_Flags	dictionary flags
=52115					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc18	20 89 b3	jsr $b389	Dot_R:		jsr PopA		; save field width
.cc1b	48		pha		Dot_R_A:	pha
.cc1c	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cc1e	08		php				php
.cc1f	20 2e c6	jsr $c62e			jsr Abs
.cc22	20 b0 b7	jsr $b7b0			jsr Zero		; u>d  cvt u to ud
.cc25	4c 3a cc	jmp $cc3a			jmp fmt_dr3
=16					CL	.var *-(WordListLink+wh_Xt)
=$cc28					en = *	; remember here
>cc16	10					.byte CL	;wh_CodeLength
>cc28	44 2e 52			L1:	.text "D.R"	;  name of word as a string, ending at wh_NameLastChar
>cc2b	43					.byte (("D.R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc2c	93 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc2e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc2f	08					.byte NN	;wh_Flags	dictionary flags
=52139					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc30	20 89 b3	jsr $b389	D_Dot_R:	jsr PopA		; save field width
.cc33	48		pha		D_Dot_R_A:	pha
.cc34	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cc36	08		php				php
.cc37	20 63 c6	jsr $c663			jsr DAbs
.cc3a	20 5a ab	jsr $ab5a	fmt_dr3:	jsr Less_Number_Sign	; start formatted output
.cc3d	20 cd ab	jsr $abcd			jsr Number_sign_s	; do all digits
.cc40	28		plp				plp			; do the sign
.cc41	20 e8 ab	jsr $abe8			jsr Sign_P
.cc44	4c ff cb	jmp $cbff			jmp fmt_r
=23					CL	.var *-(WordListLink+wh_Xt)
=$cc47					en = *	; remember here
>cc2e	17					.byte CL	;wh_CodeLength
>cc47	3f				L1:	.text "?"	;  name of word as a string, ending at wh_NameLastChar
>cc48	e1					.byte (("?"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc49	ab cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc4b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc4c	08					.byte NN	;wh_Flags	dictionary flags
=52168					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc4d					Question:
.cc4d	20 6c ce	jsr $ce6c			jsr Fetch
.cc50	4c 7e cb	jmp $cb7e			jmp Dot
=6					CL	.var *-(WordListLink+wh_Xt)
=$cc53					en = *	; remember here
>cc4b	06					.byte CL	;wh_CodeLength
>cc53	32 44 75 70			L1:	.text "2Dup"	;  name of word as a string, ending at wh_NameLastChar
>cc57	04					.byte (("2Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc58	c8 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc5a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc5b	10					.byte UF	;wh_Flags	dictionary flags
=52183					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc5c					Two_Dup:
.cc5c	20 e4 b3	jsr $b3e4			jsr underflow_2
.cc5f	ca		dex				dex
.cc60	ca		dex				dex
.cc61	ca		dex				dex
.cc62	ca		dex				dex
.cc63	b5 28		lda $28,x			lda DStack+4,x	; TOS
.cc65	95 24		sta $24,x			sta DStack+0,x
.cc67	b5 29		lda $29,x			lda DStack+5,x
.cc69	95 25		sta $25,x			sta DStack+1,x
.cc6b	b5 2a		lda $2a,x			lda DStack+6,x	; NOS
.cc6d	95 26		sta $26,x			sta DStack+2,x
.cc6f	b5 2b		lda $2b,x			lda DStack+7,x
.cc71	95 27		sta $27,x			sta DStack+3,x
=23					CL	.var *-(WordListLink+wh_Xt)
=$cc73					en = *	; remember here
>cc5a	17					.byte CL	;wh_CodeLength
.cc73	60		rts				rts
>cc74	54 75 63 6b			L1:	.text "Tuck"	;  name of word as a string, ending at wh_NameLastChar
>cc78	64					.byte (("Tuck"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc79	d7 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc7b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc7c	10					.byte UF	;wh_Flags	dictionary flags
=52216					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc7d					Tuck:
.cc7d	20 e4 b3	jsr $b3e4			jsr underflow_2
.cc80	ca		dex				dex
.cc81	ca		dex				dex
.cc82	b4 28		ldy $28,x			ldy DStack+4,x	; LSB
.cc84	b5 26		lda $26,x			lda DStack+2,x
.cc86	95 28		sta $28,x			sta DStack+4,x
.cc88	94 26		sty $26,x			sty DStack+2,x
.cc8a	95 24		sta $24,x			sta DStack+0,x
.cc8c	b4 29		ldy $29,x			ldy DStack+5,x	; MSB
.cc8e	b5 27		lda $27,x			lda DStack+3,x
.cc90	95 29		sta $29,x			sta DStack+5,x
.cc92	94 27		sty $27,x			sty DStack+3,x
.cc94	95 25		sta $25,x			sta DStack+1,x
=25					CL	.var *-(WordListLink+wh_Xt)
=$cc96					en = *	; remember here
>cc7b	19					.byte CL	;wh_CodeLength
.cc96	60		rts				rts
>cc97	43 2c				L1:	.text "C,"	;  name of word as a string, ending at wh_NameLastChar
>cc99	82					.byte (("C,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc9a	f8 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc9c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc9d	08					.byte NN	;wh_Flags	dictionary flags
=52249					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc9e	20 89 b3	jsr $b389	C_Comma:	jsr PopA	; pop c, with underflow check
.cca1					C_Comma_A:
.cca1	ca		dex				dex
.cca2	94 24		sty $24,x			sty DStack+0,x	; save Y
.cca4	a0 00		ldy #$00			ldy #0		; store A
.cca6	91 00		sta ($00),y			sta (cp),y
.cca8	e6 00		inc $00				inc cp+0	; increment cp
.ccaa	d0 02		bne $ccae			bne +
.ccac	e6 01		inc $01				inc cp+1
.ccae					+
.ccae	b4 24		ldy $24,x			ldy DStack+0,x	; restore Y
.ccb0	e8		inx				inx
=19					CL	.var *-(WordListLink+wh_Xt)
=$ccb1					en = *	; remember here
>cc9c	13					.byte CL	;wh_CodeLength
.ccb1	60		rts				rts
>ccb2	2c				L1:	.text ","	;  name of word as a string, ending at wh_NameLastChar
>ccb3	81					.byte ((","[-1]&7)<<5)+(*-L1)	;wh_HNL
>ccb4	19 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccb6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccb7	08					.byte NN	;wh_Flags	dictionary flags
=52275					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccb8	20 a5 b3	jsr $b3a5	Comma:		jsr PopYA	; pop n, with underflow check
.ccbb					Comma_YA:
.ccbb	20 a1 cc	jsr $cca1			jsr C_Comma_A	; compile LSB
.ccbe	98		tya				tya		; compile MSB
.ccbf	4c a1 cc	jmp $cca1			jmp C_Comma_A
=10					CL	.var *-(WordListLink+wh_Xt)
=$ccc2					en = *	; remember here
>ccb6	0a					.byte CL	;wh_CodeLength
>ccc2	32 2c				L1:	.text "2,"	;  name of word as a string, ending at wh_NameLastChar
>ccc4	82					.byte (("2,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ccc5	33 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccc7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccc8	08					.byte NN	;wh_Flags	dictionary flags
=52292					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccc9	20 b8 cc	jsr $ccb8	Two_Comma:	jsr Comma
.cccc	4c b8 cc	jmp $ccb8			jmp Comma
=6					CL	.var *-(WordListLink+wh_Xt)
=$cccf					en = *	; remember here
>ccc7	06					.byte CL	;wh_CodeLength
.cccf	a9 e8		lda #$e8	Drop_Comma:	lda #$e8	;inx
.ccd1	a8		tay				tay
.ccd2	d0 e7		bne $ccbb			bne Comma_YA
>ccd4	4a 73 72 2c			L1:	.text "Jsr,"	;  name of word as a string, ending at wh_NameLastChar
>ccd8	84					.byte (("Jsr,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ccd9	44 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccdb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccdc	08					.byte NN	;wh_Flags	dictionary flags
=52312					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccdd	20 a5 b3	jsr $b3a5	Jsr_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cce0	20 5f b7	jsr $b75f	Jsr_Comma_YA:	jsr PushYA	; push addr
.cce3	a9 20		lda #$20			lda #$20	; JSR abs opcode
.cce5	20 a1 cc	jsr $cca1	Jsr_Comma_3:	jsr C_Comma_A
.cce8	4c b8 cc	jmp $ccb8			jmp Comma	; compile addr
=14					CL	.var *-(WordListLink+wh_Xt)
=$cceb					en = *	; remember here
>ccdb	0e					.byte CL	;wh_CodeLength
>cceb	4a 6d 70 2c			L1:	.text "Jmp,"	;  name of word as a string, ending at wh_NameLastChar
>ccef	84					.byte (("Jmp,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ccf0	58 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccf2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccf3	08					.byte NN	;wh_Flags	dictionary flags
=52335					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccf4	20 a5 b3	jsr $b3a5	Jmp_Comma:	jsr PopYA	; pop addr (optimize can skip)
.ccf7	20 5f b7	jsr $b75f	Jmp_Comma_YA:	jsr PushYA	; push addr
.ccfa	a9 4c		lda #$4c			lda #$4c	; JMP abs opcode
.ccfc	d0 e7		bne $cce5			bne Jsr_Comma_3
=10					CL	.var *-(WordListLink+wh_Xt)
=$ccfe					en = *	; remember here
>ccf2	0a					.byte CL	;wh_CodeLength
>ccfe	43 40				L1:	.text "C@"	;  name of word as a string, ending at wh_NameLastChar
>cd00	02					.byte (("C@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd01	6f cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd03	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd04	10					.byte UF	;wh_Flags	dictionary flags
=52352					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd05	20 cf b3	jsr $b3cf	C_Fetch:	jsr underflow_1
.cd08	a1 24		lda ($24,x)			lda (DStack+0,x)
.cd0a	95 24		sta $24,x			sta DStack+0,x
.cd0c	a9 00		lda #$00			lda #0
.cd0e	95 25		sta $25,x			sta DStack+1,x	; zero MSB
=11					CL	.var *-(WordListLink+wh_Xt)
=$cd10					en = *	; remember here
>cd03	0b					.byte CL	;wh_CodeLength
.cd10	60		rts				rts
>cd11	43 21				L1:	.text "C!"	;  name of word as a string, ending at wh_NameLastChar
>cd13	22					.byte (("C!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd14	80 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd16	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd17	10					.byte UF	;wh_Flags	dictionary flags
=52371					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd18	20 e4 b3	jsr $b3e4	C_Store:	jsr underflow_2
.cd1b	b5 26		lda $26,x			lda DStack+2,x
.cd1d	81 24		sta ($24,x)			sta (DStack+0,x)
.cd1f	e8		inx				inx
.cd20	e8		inx				inx
.cd21	e8		inx				inx
.cd22	e8		inx				inx
=11					CL	.var *-(WordListLink+wh_Xt)
=$cd23					en = *	; remember here
>cd16	0b					.byte CL	;wh_CodeLength
.cd23	60		rts				rts
>cd24	31 2b 21			L1:	.text "1+!"	;  name of word as a string, ending at wh_NameLastChar
>cd27	23					.byte (("1+!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd28	93 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd2a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd2b	00					.byte 0	;wh_Flags	dictionary flags
=52391					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd2c					OnePlusStore:
.cd2c	a9 01		lda #$01			lda #1
.cd2e	18		clc				clc
.cd2f	61 24		adc ($24,x)			adc (DStack+0,x)	; increment lo byte
.cd31	81 24		sta ($24,x)			sta (DStack+0,x)
.cd33	90 0c		bcc $cd41			bcc _7			; if carry
.cd35	f6 24		inc $24,x			inc DStack+0,x		;   point at hi byte
.cd37	d0 02		bne $cd3b			bne +
.cd39	f6 25		inc $25,x			inc DStack+1,x
.cd3b					+
.cd3b	a1 24		lda ($24,x)			lda (DStack+0,x)	;   increment hi byte
.cd3d	69 00		adc #$00			adc #0
.cd3f	81 24		sta ($24,x)			sta (Dstack+0,x)
.cd41					_7:
.cd41	e8		inx				inx			; Drop addr
.cd42	e8		inx				inx
=23					CL	.var *-(WordListLink+wh_Xt)
=$cd43					en = *	; remember here
>cd2a	17					.byte CL	;wh_CodeLength
.cd43	60		rts				rts
>cd44	2b 21				L1:	.text "+!"	;  name of word as a string, ending at wh_NameLastChar
>cd46	22					.byte (("+!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd47	a7 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd49	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd4a	18					.byte UF+NN	;wh_Flags	dictionary flags
=52422					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd4b					Plus_store:
.cd4b	20 e4 b3	jsr $b3e4			jsr underflow_2
.cd4e	18		clc				clc
.cd4f	b5 26		lda $26,x			lda DStack+2,x
.cd51	61 24		adc ($24,x)			adc (DStack+0,x)
.cd53	81 24		sta ($24,x)			sta (DStack+0,x)
.cd55	f6 24		inc $24,x			inc DStack+0,x
.cd57	d0 02		bne $cd5b			bne +
.cd59	f6 25		inc $25,x			inc DStack+1,x
.cd5b					+
.cd5b	b5 27		lda $27,x			lda DStack+3,x
.cd5d	61 24		adc ($24,x)			adc (DStack+0,x)
.cd5f	81 24		sta ($24,x)			sta (DStack+0,x)
.cd61	4c bc c4	jmp $c4bc			jmp Two_Drop
=25					CL	.var *-(WordListLink+wh_Xt)
=$cd64					en = *	; remember here
>cd49	19					.byte CL	;wh_CodeLength
>cd64	45 6d 69 74			L1:	.text "Emit"	;  name of word as a string, ending at wh_NameLastChar
>cd68	84					.byte (("Emit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd69	c6 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd6b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd6c	08					.byte NN	;wh_Flags	dictionary flags
=52456					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd6d	20 89 b3	jsr $b389	Emit:		jsr PopA		; pop char, with underflow check
.cd70					Emit_A:
.cd70	6c 06 03	jmp ($0306)			jmp (output)		; JSR/RTS
=6					CL	.var *-(WordListLink+wh_Xt)
=$cd73					en = *	; remember here
>cd6b	06					.byte CL	;wh_CodeLength
>cd73	53 70 61 63 65			L1:	.text "Space"	;  name of word as a string, ending at wh_NameLastChar
>cd78	a5					.byte (("Space"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd79	e8 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd7b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd7c	08					.byte NN	;wh_Flags	dictionary flags
=52472					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd7d	a9 20		lda #$20	Space:		lda #AscSP
.cd7f	d0 ef		bne $cd70			bne Emit_A
=4					CL	.var *-(WordListLink+wh_Xt)
=$cd81					en = *	; remember here
>cd7b	04					.byte CL	;wh_CodeLength
>cd81	54 79 70 65			L1:	.text "Type"	;  name of word as a string, ending at wh_NameLastChar
>cd85	a4					.byte (("Type"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd86	f8 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd88	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd89	18					.byte UF+NN	;wh_Flags	dictionary flags
=52485					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd8a					Type:
.cd8a	20 e4 b3	jsr $b3e4			jsr underflow_2
.cd8d	4c 9a cd	jmp $cd9a			jmp _test
.cd90					_loop:
.cd90	d6 24		dec $24,x			dec DStack+0,x		; finish length decrement
.cd92	a1 26		lda ($26,x)			lda (DStack+2,x)	; Send the current character
.cd94	20 70 cd	jsr $cd70			jsr Emit_A
.cd97	20 02 ca	jsr $ca02			jsr NOS_One_Plus	; increment address
.cd9a	b5 24		lda $24,x	_test:		lda DStack+0,x		; decrement length & test for <0
.cd9c	d0 f2		bne $cd90			bne _loop
.cd9e	d6 25		dec $25,x			dec DStack+1,x
.cda0	10 ee		bpl $cd90			bpl _loop
.cda2	4c bc c4	jmp $c4bc			jmp Two_drop
=27					CL	.var *-(WordListLink+wh_Xt)
=$cda5					en = *	; remember here
>cd88	1b					.byte CL	;wh_CodeLength
.cda5					Print_ASCIIZ_YA:
.cda5	20 ab cd	jsr $cdab			jsr Print_ASCIIZ_YA_no_lf
.cda8	4c e2 aa	jmp $aae2	                jmp CR
.cdab					Print_ASCIIZ_YA_no_lf:
.cdab	85 18		sta $18				sta tmp3+0		; save string address
.cdad	84 19		sty $19				sty tmp3+1
.cdaf	a0 00		ldy #$00			ldy #0
.cdb1					Print_ASCIIZ_tmp3_no_lf:
.cdb1	b1 18		lda ($18),y			lda (tmp3),y
.cdb3	f0 06		beq $cdbb			beq _done		; end of string?
.cdb5	20 70 cd	jsr $cd70			jsr emit_a
.cdb8	c8		iny				iny
.cdb9	d0 f6		bne $cdb1			bne Print_ASCIIZ_tmp3_no_lf
.cdbb					_done:
.cdbb	60		rts				rts
>cdbc	45 78 65 63 75 74 65		L1:	.text "Execute"	;  name of word as a string, ending at wh_NameLastChar
>cdc3	a7					.byte (("Execute"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cdc4	05 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cdc6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdc7	08					.byte NN	;wh_Flags	dictionary flags
=52547					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdc8					Execute:
.cdc8	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.cdca	b0 2f		bcs $cdfb		bcs Throw_Stack_03
.cdcc	b5 25		lda $25,x			lda DStack+1,x	; addr for RTI
.cdce	48		pha				pha
.cdcf	b5 24		lda $24,x			lda DStack+0,x
.cdd1	48		pha				pha
.cdd2	e8		inx				inx		; drop addr
.cdd3	e8		inx				inx
.cdd4	08		php				php		; flags for RTI
.cdd5	40		rti				rti
=14					CL	.var *-(WordListLink+wh_Xt)
=$cdd6					en = *	; remember here
>cdc6	0e					.byte CL	;wh_CodeLength
>cdd6	32 52 6f 74			L1:	.text "2Rot"	;  name of word as a string, ending at wh_NameLastChar
>cdda	84					.byte (("2Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cddb	43 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cddd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdde	08					.byte NN	;wh_Flags	dictionary flags
=52570					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cddf					TwoRot:
.cddf	e0 1d		cpx #$1d		cpx #-2*6+DStack0+1
.cde1	b0 18		bcs $cdfb		bcs Throw_Stack_03
.cde3	86 14		stx $14				stx tmp1+0
.cde5	e8		inx				inx		; do 4 times
.cde6	e8		inx				inx
.cde7	e8		inx				inx
.cde8	e8		inx				inx
.cde9	ca		dex		-		dex
.cdea	b4 2c		ldy $2c,x			ldy DStack+8,x	; do a byte
.cdec	b5 28		lda $28,x			lda DStack+4,x
.cdee	95 2c		sta $2c,x			sta DStack+8,x
.cdf0	b5 24		lda $24,x			lda DStack+0,x
.cdf2	95 28		sta $28,x			sta DStack+4,x
.cdf4	94 24		sty $24,x			sty DStack+0,x
.cdf6	e4 14		cpx $14				cpx tmp1+0
.cdf8	d0 ef		bne $cde9			bne -
=27					CL	.var *-(WordListLink+wh_Xt)
=$cdfa					en = *	; remember here
>cddd	1b					.byte CL	;wh_CodeLength
.cdfa	60		rts				rts
.cdfb	4c f3 b3	jmp $b3f3	Throw_Stack_03: jmp Throw_Stack
>cdfe	52 6f 74			L1:	.text "Rot"	;  name of word as a string, ending at wh_NameLastChar
>ce01	83					.byte (("Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce02	5a cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce04	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce05	08					.byte NN	;wh_Flags	dictionary flags
=52609					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce06					Rot:
.ce06	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ce08	b0 f1		bcs $cdfb		bcs Throw_Stack_03
.ce0a	b4 29		ldy $29,x			ldy DStack+5,x	; do MSB
.ce0c	b5 27		lda $27,x			lda DStack+3,x
.ce0e	95 29		sta $29,x			sta DStack+5,x
.ce10	b5 25		lda $25,x			lda DStack+1,x
.ce12	95 27		sta $27,x			sta DStack+3,x
.ce14	94 25		sty $25,x			sty DStack+1,x
.ce16	b4 28		ldy $28,x			ldy DStack+4,x	; do LSB
.ce18	b5 26		lda $26,x			lda DStack+2,x
.ce1a	95 28		sta $28,x			sta DStack+4,x
.ce1c	b5 24		lda $24,x			lda DStack+0,x
.ce1e	95 26		sta $26,x			sta DStack+2,x
.ce20	94 24		sty $24,x			sty DStack+0,x
=28					CL	.var *-(WordListLink+wh_Xt)
=$ce22					en = *	; remember here
>ce04	1c					.byte CL	;wh_CodeLength
.ce22	60		rts				rts
>ce23	2d 52 6f 74			L1:	.text "-Rot"	;  name of word as a string, ending at wh_NameLastChar
>ce27	84					.byte (("-Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce28	81 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce2a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce2b	08					.byte NN	;wh_Flags	dictionary flags
=52647					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce2c					Not_Rot:
.ce2c	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ce2e	b0 cb		bcs $cdfb		bcs Throw_Stack_03
.ce30	b4 25		ldy $25,x			ldy DStack+1,x	; do MSB
.ce32	b5 27		lda $27,x			lda DStack+3,x
.ce34	95 25		sta $25,x			sta DStack+1,x
.ce36	b5 29		lda $29,x			lda DStack+5,x
.ce38	95 27		sta $27,x			sta DStack+3,x
.ce3a	94 29		sty $29,x			sty DStack+5,x
.ce3c	b4 24		ldy $24,x			ldy DStack+0,x	; do LSB
.ce3e	b5 26		lda $26,x			lda DStack+2,x
.ce40	95 24		sta $24,x			sta DStack+0,x
.ce42	b5 28		lda $28,x			lda DStack+4,x
.ce44	95 26		sta $26,x			sta DStack+2,x
.ce46	94 28		sty $28,x			sty DStack+4,x
=28					CL	.var *-(WordListLink+wh_Xt)
=$ce48					en = *	; remember here
>ce2a	1c					.byte CL	;wh_CodeLength
.ce48	60		rts				rts
>ce49	21				L1:	.text "!"	;  name of word as a string, ending at wh_NameLastChar
>ce4a	21					.byte (("!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce4b	a7 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce4d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce4e	08					.byte NN	;wh_Flags	dictionary flags
=52682					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce4f					Store:
.ce4f	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ce51	b0 a8		bcs $cdfb		bcs Throw_Stack_03
.ce53	b5 26		lda $26,x			lda DStack+2,x	; LSB
.ce55	81 24		sta ($24,x)			sta (DStack+0,x)
.ce57	f6 24		inc $24,x			inc DStack+0,x
.ce59	d0 02		bne $ce5d			bne +
.ce5b	f6 25		inc $25,x			inc DStack+1,x
.ce5d					+
.ce5d	b5 27		lda $27,x			lda DStack+3,x	; MSB
.ce5f	81 24		sta ($24,x)			sta (DStack+0,x)
.ce61	e8		inx				inx		; 2Drop
.ce62	e8		inx				inx
.ce63	e8		inx				inx
.ce64	e8		inx				inx
=22					CL	.var *-(WordListLink+wh_Xt)
=$ce65					en = *	; remember here
>ce4d	16					.byte CL	;wh_CodeLength
.ce65	60		rts				rts
>ce66	40				L1:	.text "@"	;  name of word as a string, ending at wh_NameLastChar
>ce67	01					.byte (("@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce68	ca cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce6a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce6b	08					.byte NN	;wh_Flags	dictionary flags
=52711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce6c					Fetch:
.ce6c	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.ce6e	b0 8b		bcs $cdfb		bcs Throw_Stack_03
.ce70	a1 24		lda ($24,x)			lda (DStack+0,x)		; LSB
.ce72	a8		tay				tay
.ce73	f6 24		inc $24,x			inc DStack+0,x
.ce75	d0 02		bne $ce79			bne +
.ce77	f6 25		inc $25,x			inc DStack+1,x
.ce79					+
.ce79	a1 24		lda ($24,x)			lda (DStack+0,x)		; MSB
.ce7b	95 25		sta $25,x			sta DStack+1,x
.ce7d	94 24		sty $24,x			sty DStack+0,x
=19					CL	.var *-(WordListLink+wh_Xt)
=$ce7f					en = *	; remember here
>ce6a	13					.byte CL	;wh_CodeLength
.ce7f	60		rts				rts
>ce80	3e 52				L1:	.text ">R"	;  name of word as a string, ending at wh_NameLastChar
>ce82	42					.byte ((">R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce83	e7 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce85	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce86	41					.byte CO+R6	;wh_Flags	dictionary flags
=52738					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce87					To_R:
.ce87	68		pla				pla		; move the return address out of the way
.ce88	85 1c		sta $1c				sta tmp5+0
.ce8a	68		pla				pla
.ce8b	85 1d		sta $1d				sta tmp5+1
.ce8d	20 cf b3	jsr $b3cf			jsr underflow_1
.ce90	b5 25		lda $25,x			lda DStack+1,x	; MSB
.ce92	48		pha				pha
.ce93	b5 24		lda $24,x			lda DStack+0,x	; LSB
.ce95	48		pha				pha
.ce96	e8		inx				inx
.ce97	e8		inx				inx
.ce98	a5 1d		lda $1d				lda tmp5+1	; move the return address back in
.ce9a	48		pha				pha
.ce9b	a5 1c		lda $1c				lda tmp5+0
.ce9d	48		pha				pha
=23					CL	.var *-(WordListLink+wh_Xt)
=$ce9e					en = *	; remember here
>ce85	17					.byte CL	;wh_CodeLength
.ce9e	60		rts				rts
>ce9f	52 3e				L1:	.text "R>"	;  name of word as a string, ending at wh_NameLastChar
>cea1	c2					.byte (("R>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cea2	02 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cea4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cea5	41					.byte CO+R6	;wh_Flags	dictionary flags
=52769					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cea6					R_From:
.cea6	68		pla				pla		; Move the RTS addr out of the way
.cea7	85 1c		sta $1c				sta tmp5+0
.cea9	68		pla				pla
.ceaa	85 1d		sta $1d				sta tmp5+1
.ceac	ca		dex				dex
.cead	ca		dex				dex
.ceae	68		pla				pla		; LSB
.ceaf	95 24		sta $24,x			sta DStack+0,x
.ceb1	68		pla				pla		; MSB
.ceb2	95 25		sta $25,x			sta DStack+1,x
.ceb4	a5 1d		lda $1d				lda tmp5+1	; Restore the RTS addr
.ceb6	48		pha				pha
.ceb7	a5 1c		lda $1c				lda tmp5+0
.ceb9	48		pha				pha
=20					CL	.var *-(WordListLink+wh_Xt)
=$ceba					en = *	; remember here
>cea4	14					.byte CL	;wh_CodeLength
.ceba	60		rts				rts
>cebb	52 40				L1:	.text "R@"	;  name of word as a string, ending at wh_NameLastChar
>cebd	02					.byte (("R@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cebe	21 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cec0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cec1	09					.byte NN+CO	;wh_Flags	dictionary flags
=52797					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cec2					R_Fetch:
.cec2	86 14		stx $14				stx tmp1	; save data stack index
.cec4	ba		tsx				tsx		; X= return stack index
.cec5	bd 03 01	lda $0103,x			lda RStack+3,x
.cec8	bc 04 01	ldy $0104,x			ldy RStack+4,x
.cecb	a6 14		ldx $14				ldx tmp1	; restore data stack index
.cecd	4c 5f b7	jmp $b75f			jmp PushYA
=14					CL	.var *-(WordListLink+wh_Xt)
=$ced0					en = *	; remember here
>cec0	0e					.byte CL	;wh_CodeLength
>ced0	4f 76 65 72			L1:	.text "Over"	;  name of word as a string, ending at wh_NameLastChar
>ced4	44					.byte (("Over"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ced5	3d ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ced7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ced8	10					.byte UF	;wh_Flags	dictionary flags
=52820					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ced9					Over:
.ced9	20 e4 b3	jsr $b3e4			jsr underflow_2
.cedc	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cede	b4 27		ldy $27,x			ldy DStack+3,x	; MSB
.cee0	ca		dex				dex		; PushYA
.cee1	ca		dex				dex
.cee2	95 24		sta $24,x			sta DStack+0,x
.cee4	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$cee6					en = *	; remember here
>ced7	0d					.byte CL	;wh_CodeLength
.cee6	60		rts				rts
>cee7	3f 44 75 70			L1:	.text "?Dup"	;  name of word as a string, ending at wh_NameLastChar
>ceeb	04					.byte (("?Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ceec	54 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ceee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ceef	18					.byte UF+NN	;wh_Flags	dictionary flags
=52843					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cef0					Question_Dup:
.cef0	20 cf b3	jsr $b3cf			jsr underflow_1
.cef3	b5 24		lda $24,x			lda DStack+0,x	; Check if TOS is zero
.cef5	15 25		ora $25,x			ora DStack+1,x
.cef7	d0 0c		bne $cf05			bne Dup_NoUf
=9					CL	.var *-(WordListLink+wh_Xt)
=$cef9					en = *	; remember here
>ceee	09					.byte CL	;wh_CodeLength
.cef9	60		rts				rts
>cefa	44 75 70			L1:	.text "Dup"	;  name of word as a string, ending at wh_NameLastChar
>cefd	03					.byte (("Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cefe	6b ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf00	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf01	10					.byte UF	;wh_Flags	dictionary flags
=52861					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf02					Dup:
.cf02	20 cf b3	jsr $b3cf			jsr underflow_1
.cf05	b5 24		lda $24,x	Dup_NoUf:	lda DStack+0,x	; LSB
.cf07	b4 25		ldy $25,x			ldy DStack+1,x	; MSB
.cf09	ca		dex				dex
.cf0a	ca		dex				dex
.cf0b	95 24		sta $24,x			sta DStack+0,x
.cf0d	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$cf0f					en = *	; remember here
>cf00	0d					.byte CL	;wh_CodeLength
.cf0f	60		rts				rts
.cf10					PushAY:
.cf10	ca		dex				dex
.cf11	ca		dex				dex
.cf12	94 24		sty $24,x			sty DStack+0,x
.cf14	95 25		sta $25,x			sta DStack+1,x
.cf16	60		rts				rts
>cf17	53 77 61 70			L1:	.text "Swap"	;  name of word as a string, ending at wh_NameLastChar
>cf1b	04					.byte (("Swap"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf1c	7d ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf1e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf1f	10					.byte UF	;wh_Flags	dictionary flags
=52891					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf20					Swap:
.cf20	20 e4 b3	jsr $b3e4			jsr underflow_2
.cf23	b5 24		lda $24,x			lda DStack+0,x	; do LSB
.cf25	b4 26		ldy $26,x			ldy DStack+2,x
.cf27	95 26		sta $26,x			sta DStack+2,x
.cf29	94 24		sty $24,x			sty DStack+0,x
.cf2b	b5 25		lda $25,x			lda DStack+1,x	; do MSB
.cf2d	b4 27		ldy $27,x			ldy DStack+3,x
.cf2f	95 27		sta $27,x			sta DStack+3,x
.cf31	94 25		sty $25,x			sty DStack+1,x
=19					CL	.var *-(WordListLink+wh_Xt)
=$cf33					en = *	; remember here
>cf1e	13					.byte CL	;wh_CodeLength
.cf33	60		rts				rts
>cf34	44 72 6f 70			L1:	.text "Drop"	;  name of word as a string, ending at wh_NameLastChar
>cf38	04					.byte (("Drop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf39	9b ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf3b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf3c	10					.byte UF	;wh_Flags	dictionary flags
=52920					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf3d					Drop:
.cf3d	20 cf b3	jsr $b3cf			jsr underflow_1
.cf40	e8		inx				inx
.cf41	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$cf42					en = *	; remember here
>cf3b	05					.byte CL	;wh_CodeLength
.cf42	60		rts				rts
=52920					forth_dictionary_start = WordListLink ; END of FORTH-WORDLIST
=0					WordListLink .var 0
>cf43	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
>cf48	65					.byte (("Words"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf49	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf4b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf4c	08					.byte NN	;wh_Flags	dictionary flags
=52936					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf4d	4c 2f aa	jmp $aa2f			jmp Words
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf50					en = *	; remember here
>cf4b	03					.byte CL	;wh_CodeLength
>cf50	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>cf58	72 64 6c 69 73 74
>cf5e	8e					.byte (("Forth-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf5f	c8 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf61	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf62	08					.byte NN	;wh_Flags	dictionary flags
=52958					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf63	4c 2b 9f	jmp $9f2b			jmp Forth_WordList
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf66					en = *	; remember here
>cf61	03					.byte CL	;wh_CodeLength
>cf66	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
>cf6b	05					.byte (("Forth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf6c	de ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf6e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf6f	08					.byte NN	;wh_Flags	dictionary flags
=52971					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf70	4c 24 a0	jmp $a024			jmp Forth
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf73					en = *	; remember here
>cf6e	03					.byte CL	;wh_CodeLength
>cf73	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>cf7b	72
>cf7c	49					.byte (("Set-Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf7d	eb ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf7f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf80	08					.byte NN	;wh_Flags	dictionary flags
=52988					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf81	4c e8 a0	jmp $a0e8			jmp Set_Order
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf84					en = *	; remember here
>cf7f	03					.byte CL	;wh_CodeLength
=52988					root_dictionary_start = WordListLink ; END of ROOT-WORDLIST
.cf84					assembler:
=0					WordListLink .var 0
.cf84					asm_r:
.cf84	68		pla			pla		; pop RTS addr
.cf85	a8		tay			tay
.cf86	68		pla			pla
.cf87	20 c6 cf	jsr $cfc6		jsr asm_op	; compile opcode
.cf8a	b5 25		lda $25,x		lda DStack+1,x	; check range
.cf8c	f0 09		beq $cf97		beq _plus
.cf8e	c9 ff		cmp #$ff		cmp #$ff
.cf90	f0 0b		beq $cf9d		beq _minus
.cf92	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cf94	4c 2e b4	jmp $b42e		jmp ThrowA
.cf97	b5 24		lda $24,x	_plus:	lda DStack+0,x
.cf99	30 f7		bmi $cf92		bmi _err
.cf9b	10 04		bpl $cfa1		bpl _store
.cf9d	b5 24		lda $24,x	_minus:	lda DStack+0,x
.cf9f	10 f1		bpl $cf92		bpl _err
.cfa1	4c 9e cc	jmp $cc9e	_store:	jmp C_Comma
.cfa4					asm_1:
.cfa4	68		pla			pla		; pop RTS addr
.cfa5	a8		tay			tay
.cfa6	68		pla			pla
.cfa7	20 c6 cf	jsr $cfc6		jsr asm_op	; compile opcode
.cfaa	b5 25		lda $25,x		lda DStack+1,x	; compile operand
.cfac	f0 04		beq $cfb2		beq _store	;   unsigned byte?
.cfae	c9 ff		cmp #$ff		cmp #$ff	;   signed byte?
.cfb0	d0 03		bne $cfb5		bne _err
.cfb2	4c 9e cc	jmp $cc9e	_store:	jmp C_Comma
.cfb5	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cfb7	4c 2e b4	jmp $b42e		jmp ThrowA
.cfba					asm_2:
.cfba	68		pla			pla		; pop RTS addr
.cfbb	a8		tay			tay
.cfbc	68		pla			pla
.cfbd	20 c6 cf	jsr $cfc6		jsr asm_op	; compile opcode
.cfc0	4c b8 cc	jmp $ccb8		jmp Comma	; compile operand
.cfc3					asm_0:
.cfc3	68		pla			pla		; pop RTS addr
.cfc4	a8		tay			tay
.cfc5	68		pla			pla
.cfc6	84 14		sty $14		asm_op:	sty tmp1+0	; save RTS addr
.cfc8	85 15		sta $15			sta tmp1+1
.cfca	a0 01		ldy #$01		ldy #1		; get opcode byte
.cfcc	b1 14		lda ($14),y		lda (tmp1),y
.cfce	4c a1 cc	jmp $cca1		jmp C_Comma_A	; compile opcode
>cfd1	61 64 63 2e 23			L1:	.text "adc.#"	;  name of word as a string, ending at wh_NameLastChar
>cfd6	65					.byte (("adc.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cfd7	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfd9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfda	08					.byte NN	;wh_Flags	dictionary flags
=53078					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfdb	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfde					en = *	; remember here
>cfd9	03					.byte CL	;wh_CodeLength
>cfde	69					.byte $69
>cfdf	61 64 63 2e 78			L1:	.text "adc.x"	;  name of word as a string, ending at wh_NameLastChar
>cfe4	05					.byte (("adc.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cfe5	56 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfe7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfe8	08					.byte NN	;wh_Flags	dictionary flags
=53092					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfe9	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfec					en = *	; remember here
>cfe7	03					.byte CL	;wh_CodeLength
>cfec	7d					.byte $7d
>cfed	61 64 63 2e 79			L1:	.text "adc.y"	;  name of word as a string, ending at wh_NameLastChar
>cff2	25					.byte (("adc.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cff3	64 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cff5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cff6	08					.byte NN	;wh_Flags	dictionary flags
=53106					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cff7	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cffa					en = *	; remember here
>cff5	03					.byte CL	;wh_CodeLength
>cffa	79					.byte $79
>cffb	61 64 63 2e 7a			L1:	.text "adc.z"	;  name of word as a string, ending at wh_NameLastChar
>d000	45					.byte (("adc.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d001	72 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d003	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d004	08					.byte NN	;wh_Flags	dictionary flags
=53120					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d005	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d008					en = *	; remember here
>d003	03					.byte CL	;wh_CodeLength
>d008	65					.byte $65
>d009	61 64 63 2e 7a 69 79		L1:	.text "adc.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d010	27					.byte (("adc.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d011	80 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d013	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d014	08					.byte NN	;wh_Flags	dictionary flags
=53136					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d015	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d018					en = *	; remember here
>d013	03					.byte CL	;wh_CodeLength
>d018	71					.byte $71
>d019	61 64 63 2e 7a 78		L1:	.text "adc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d01f	06					.byte (("adc.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d020	90 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d022	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d023	08					.byte NN	;wh_Flags	dictionary flags
=53151					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d024	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d027					en = *	; remember here
>d022	03					.byte CL	;wh_CodeLength
>d027	75					.byte $75
>d028	61 64 63 2e 7a 78 69		L1:	.text "adc.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d02f	27					.byte (("adc.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d030	9f cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d032	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d033	08					.byte NN	;wh_Flags	dictionary flags
=53167					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d034	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d037					en = *	; remember here
>d032	03					.byte CL	;wh_CodeLength
>d037	61					.byte $61
>d038	61 6e 64 2e			L1:	.text "and."	;  name of word as a string, ending at wh_NameLastChar
>d03c	c4					.byte (("and."[-1]&7)<<5)+(*-L1)	;wh_HNL
>d03d	af cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d03f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d040	08					.byte NN	;wh_Flags	dictionary flags
=53180					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d041	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d044					en = *	; remember here
>d03f	03					.byte CL	;wh_CodeLength
>d044	2d					.byte $2d
>d045	61 6e 64 2e 23			L1:	.text "and.#"	;  name of word as a string, ending at wh_NameLastChar
>d04a	65					.byte (("and.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d04b	bc cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d04d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d04e	08					.byte NN	;wh_Flags	dictionary flags
=53194					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d04f	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d052					en = *	; remember here
>d04d	03					.byte CL	;wh_CodeLength
>d052	29					.byte $29
>d053	61 6e 64 2e 78			L1:	.text "and.x"	;  name of word as a string, ending at wh_NameLastChar
>d058	05					.byte (("and.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d059	ca cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d05b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d05c	08					.byte NN	;wh_Flags	dictionary flags
=53208					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d05d	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d060					en = *	; remember here
>d05b	03					.byte CL	;wh_CodeLength
>d060	3d					.byte $3d
>d061	61 6e 64 2e 79			L1:	.text "and.y"	;  name of word as a string, ending at wh_NameLastChar
>d066	25					.byte (("and.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d067	d8 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d069	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d06a	08					.byte NN	;wh_Flags	dictionary flags
=53222					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d06b	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d06e					en = *	; remember here
>d069	03					.byte CL	;wh_CodeLength
>d06e	39					.byte $39
>d06f	61 6e 64 2e 7a			L1:	.text "and.z"	;  name of word as a string, ending at wh_NameLastChar
>d074	45					.byte (("and.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d075	e6 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d077	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d078	08					.byte NN	;wh_Flags	dictionary flags
=53236					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d079	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d07c					en = *	; remember here
>d077	03					.byte CL	;wh_CodeLength
>d07c	25					.byte $25
>d07d	61 6e 64 2e 7a 69 79		L1:	.text "and.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d084	27					.byte (("and.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d085	f4 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d087	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d088	08					.byte NN	;wh_Flags	dictionary flags
=53252					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d089	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d08c					en = *	; remember here
>d087	03					.byte CL	;wh_CodeLength
>d08c	31					.byte $31
>d08d	61 6e 64 2e 7a 78		L1:	.text "and.zx"	;  name of word as a string, ending at wh_NameLastChar
>d093	06					.byte (("and.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d094	04 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d096	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d097	08					.byte NN	;wh_Flags	dictionary flags
=53267					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d098	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d09b					en = *	; remember here
>d096	03					.byte CL	;wh_CodeLength
>d09b	35					.byte $35
>d09c	61 6e 64 2e 7a 78 69		L1:	.text "and.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d0a3	27					.byte (("and.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0a4	13 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0a6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0a7	08					.byte NN	;wh_Flags	dictionary flags
=53283					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0a8	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0ab					en = *	; remember here
>d0a6	03					.byte CL	;wh_CodeLength
>d0ab	21					.byte $21
>d0ac	61 73 6c			L1:	.text "asl"	;  name of word as a string, ending at wh_NameLastChar
>d0af	83					.byte (("asl"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0b0	23 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0b3	08					.byte NN	;wh_Flags	dictionary flags
=53295					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0b4	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0b7					en = *	; remember here
>d0b2	03					.byte CL	;wh_CodeLength
>d0b7	0e					.byte $0e
>d0b8	61 73 6c 2e 61			L1:	.text "asl.a"	;  name of word as a string, ending at wh_NameLastChar
>d0bd	25					.byte (("asl.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0be	2f d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0c0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0c1	08					.byte NN	;wh_Flags	dictionary flags
=53309					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0c2	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0c5					en = *	; remember here
>d0c0	03					.byte CL	;wh_CodeLength
>d0c5	0a					.byte $0a
>d0c6	61 73 6c 2e 78			L1:	.text "asl.x"	;  name of word as a string, ending at wh_NameLastChar
>d0cb	05					.byte (("asl.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0cc	3d d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0cf	08					.byte NN	;wh_Flags	dictionary flags
=53323					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0d0	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0d3					en = *	; remember here
>d0ce	03					.byte CL	;wh_CodeLength
>d0d3	1e					.byte $1e
>d0d4	61 73 6c 2e 7a			L1:	.text "asl.z"	;  name of word as a string, ending at wh_NameLastChar
>d0d9	45					.byte (("asl.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0da	4b d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0dd	08					.byte NN	;wh_Flags	dictionary flags
=53337					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0de	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0e1					en = *	; remember here
>d0dc	03					.byte CL	;wh_CodeLength
>d0e1	06					.byte $06
>d0e2	61 73 6c 2e 7a 78		L1:	.text "asl.zx"	;  name of word as a string, ending at wh_NameLastChar
>d0e8	06					.byte (("asl.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0e9	59 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0eb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0ec	08					.byte NN	;wh_Flags	dictionary flags
=53352					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0ed	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0f0					en = *	; remember here
>d0eb	03					.byte CL	;wh_CodeLength
>d0f0	16					.byte $16
>d0f1	62 63 63			L1:	.text "bcc"	;  name of word as a string, ending at wh_NameLastChar
>d0f4	63					.byte (("bcc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0f5	68 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0f8	08					.byte NN	;wh_Flags	dictionary flags
=53364					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0f9	20 84 cf	jsr $cf84		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0fc					en = *	; remember here
>d0f7	03					.byte CL	;wh_CodeLength
>d0fc	90					.byte $90
>d0fd	62 63 73			L1:	.text "bcs"	;  name of word as a string, ending at wh_NameLastChar
>d100	63					.byte (("bcs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d101	74 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d103	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d104	08					.byte NN	;wh_Flags	dictionary flags
=53376					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d105	20 84 cf	jsr $cf84		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d108					en = *	; remember here
>d103	03					.byte CL	;wh_CodeLength
>d108	b0					.byte $b0
>d109	62 65 71			L1:	.text "beq"	;  name of word as a string, ending at wh_NameLastChar
>d10c	23					.byte (("beq"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d10d	80 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d10f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d110	08					.byte NN	;wh_Flags	dictionary flags
=53388					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d111	20 84 cf	jsr $cf84		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d114					en = *	; remember here
>d10f	03					.byte CL	;wh_CodeLength
>d114	f0					.byte $f0
>d115	62 69 74			L1:	.text "bit"	;  name of word as a string, ending at wh_NameLastChar
>d118	83					.byte (("bit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d119	8c d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d11b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d11c	08					.byte NN	;wh_Flags	dictionary flags
=53400					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d11d	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d120					en = *	; remember here
>d11b	03					.byte CL	;wh_CodeLength
>d120	2c					.byte $2c
>d121	62 69 74 2e 7a			L1:	.text "bit.z"	;  name of word as a string, ending at wh_NameLastChar
>d126	45					.byte (("bit.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d127	98 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d129	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d12a	08					.byte NN	;wh_Flags	dictionary flags
=53414					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d12b	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d12e					en = *	; remember here
>d129	03					.byte CL	;wh_CodeLength
>d12e	24					.byte $24
>d12f	62 6d 69			L1:	.text "bmi"	;  name of word as a string, ending at wh_NameLastChar
>d132	23					.byte (("bmi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d133	a6 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d135	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d136	08					.byte NN	;wh_Flags	dictionary flags
=53426					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d137	20 84 cf	jsr $cf84		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d13a					en = *	; remember here
>d135	03					.byte CL	;wh_CodeLength
>d13a	30					.byte $30
>d13b	62 6e 65			L1:	.text "bne"	;  name of word as a string, ending at wh_NameLastChar
>d13e	a3					.byte (("bne"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d13f	b2 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d141	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d142	08					.byte NN	;wh_Flags	dictionary flags
=53438					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d143	20 84 cf	jsr $cf84		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d146					en = *	; remember here
>d141	03					.byte CL	;wh_CodeLength
>d146	d0					.byte $d0
>d147	62 70 6c			L1:	.text "bpl"	;  name of word as a string, ending at wh_NameLastChar
>d14a	83					.byte (("bpl"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d14b	be d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d14d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d14e	08					.byte NN	;wh_Flags	dictionary flags
=53450					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d14f	20 84 cf	jsr $cf84		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d152					en = *	; remember here
>d14d	03					.byte CL	;wh_CodeLength
>d152	10					.byte $10
>d153	62 72 6b			L1:	.text "brk"	;  name of word as a string, ending at wh_NameLastChar
>d156	63					.byte (("brk"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d157	ca d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d159	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d15a	08					.byte NN	;wh_Flags	dictionary flags
=53462					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d15b	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d15e					en = *	; remember here
>d159	03					.byte CL	;wh_CodeLength
>d15e	00					.byte $00
>d15f	62 76 63			L1:	.text "bvc"	;  name of word as a string, ending at wh_NameLastChar
>d162	63					.byte (("bvc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d163	d6 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d165	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d166	08					.byte NN	;wh_Flags	dictionary flags
=53474					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d167	20 84 cf	jsr $cf84		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d16a					en = *	; remember here
>d165	03					.byte CL	;wh_CodeLength
>d16a	50					.byte $50
>d16b	62 76 73			L1:	.text "bvs"	;  name of word as a string, ending at wh_NameLastChar
>d16e	63					.byte (("bvs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d16f	e2 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d171	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d172	08					.byte NN	;wh_Flags	dictionary flags
=53486					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d173	20 84 cf	jsr $cf84		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d176					en = *	; remember here
>d171	03					.byte CL	;wh_CodeLength
>d176	70					.byte $70
>d177	63 6c 63			L1:	.text "clc"	;  name of word as a string, ending at wh_NameLastChar
>d17a	63					.byte (("clc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d17b	ee d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d17d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d17e	08					.byte NN	;wh_Flags	dictionary flags
=53498					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d17f	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d182					en = *	; remember here
>d17d	03					.byte CL	;wh_CodeLength
>d182	18					.byte $18
>d183	63 6c 64			L1:	.text "cld"	;  name of word as a string, ending at wh_NameLastChar
>d186	83					.byte (("cld"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d187	fa d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d189	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d18a	08					.byte NN	;wh_Flags	dictionary flags
=53510					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d18b	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d18e					en = *	; remember here
>d189	03					.byte CL	;wh_CodeLength
>d18e	d8					.byte $d8
>d18f	63 6c 69			L1:	.text "cli"	;  name of word as a string, ending at wh_NameLastChar
>d192	23					.byte (("cli"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d193	06 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d195	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d196	08					.byte NN	;wh_Flags	dictionary flags
=53522					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d197	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d19a					en = *	; remember here
>d195	03					.byte CL	;wh_CodeLength
>d19a	58					.byte $58
>d19b	63 6c 76			L1:	.text "clv"	;  name of word as a string, ending at wh_NameLastChar
>d19e	c3					.byte (("clv"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d19f	12 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1a1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1a2	08					.byte NN	;wh_Flags	dictionary flags
=53534					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1a3	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1a6					en = *	; remember here
>d1a1	03					.byte CL	;wh_CodeLength
>d1a6	b8					.byte $b8
>d1a7	63 6d 70			L1:	.text "cmp"	;  name of word as a string, ending at wh_NameLastChar
>d1aa	03					.byte (("cmp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1ab	1e d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1ad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1ae	08					.byte NN	;wh_Flags	dictionary flags
=53546					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1af	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1b2					en = *	; remember here
>d1ad	03					.byte CL	;wh_CodeLength
>d1b2	cd					.byte $cd
>d1b3	63 6d 70 2e 23			L1:	.text "cmp.#"	;  name of word as a string, ending at wh_NameLastChar
>d1b8	65					.byte (("cmp.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1b9	2a d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1bc	08					.byte NN	;wh_Flags	dictionary flags
=53560					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1bd	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1c0					en = *	; remember here
>d1bb	03					.byte CL	;wh_CodeLength
>d1c0	c9					.byte $c9
>d1c1	63 6d 70 2e 78			L1:	.text "cmp.x"	;  name of word as a string, ending at wh_NameLastChar
>d1c6	05					.byte (("cmp.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1c7	38 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1c9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1ca	08					.byte NN	;wh_Flags	dictionary flags
=53574					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1cb	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1ce					en = *	; remember here
>d1c9	03					.byte CL	;wh_CodeLength
>d1ce	dd					.byte $dd
>d1cf	63 6d 70 2e 79			L1:	.text "cmp.y"	;  name of word as a string, ending at wh_NameLastChar
>d1d4	25					.byte (("cmp.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1d5	46 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1d7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1d8	08					.byte NN	;wh_Flags	dictionary flags
=53588					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1d9	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1dc					en = *	; remember here
>d1d7	03					.byte CL	;wh_CodeLength
>d1dc	d9					.byte $d9
>d1dd	63 6d 70 2e 7a			L1:	.text "cmp.z"	;  name of word as a string, ending at wh_NameLastChar
>d1e2	45					.byte (("cmp.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1e3	54 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1e5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1e6	08					.byte NN	;wh_Flags	dictionary flags
=53602					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1e7	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1ea					en = *	; remember here
>d1e5	03					.byte CL	;wh_CodeLength
>d1ea	c5					.byte $c5
>d1eb	63 6d 70 2e 7a 69 79		L1:	.text "cmp.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d1f2	27					.byte (("cmp.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1f3	62 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1f5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1f6	08					.byte NN	;wh_Flags	dictionary flags
=53618					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1f7	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1fa					en = *	; remember here
>d1f5	03					.byte CL	;wh_CodeLength
>d1fa	d1					.byte $d1
>d1fb	63 6d 70 2e 7a 78		L1:	.text "cmp.zx"	;  name of word as a string, ending at wh_NameLastChar
>d201	06					.byte (("cmp.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d202	72 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d204	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d205	08					.byte NN	;wh_Flags	dictionary flags
=53633					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d206	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d209					en = *	; remember here
>d204	03					.byte CL	;wh_CodeLength
>d209	d5					.byte $d5
>d20a	63 6d 70 2e 7a 78 69		L1:	.text "cmp.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d211	27					.byte (("cmp.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d212	81 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d214	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d215	08					.byte NN	;wh_Flags	dictionary flags
=53649					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d216	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d219					en = *	; remember here
>d214	03					.byte CL	;wh_CodeLength
>d219	c1					.byte $c1
>d21a	63 70 78			L1:	.text "cpx"	;  name of word as a string, ending at wh_NameLastChar
>d21d	03					.byte (("cpx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d21e	91 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d220	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d221	08					.byte NN	;wh_Flags	dictionary flags
=53661					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d222	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d225					en = *	; remember here
>d220	03					.byte CL	;wh_CodeLength
>d225	ec					.byte $ec
>d226	63 70 78 2e 23			L1:	.text "cpx.#"	;  name of word as a string, ending at wh_NameLastChar
>d22b	65					.byte (("cpx.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d22c	9d d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d22e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d22f	08					.byte NN	;wh_Flags	dictionary flags
=53675					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d230	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d233					en = *	; remember here
>d22e	03					.byte CL	;wh_CodeLength
>d233	e0					.byte $e0
>d234	63 70 78 2e 7a			L1:	.text "cpx.z"	;  name of word as a string, ending at wh_NameLastChar
>d239	45					.byte (("cpx.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d23a	ab d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d23c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d23d	08					.byte NN	;wh_Flags	dictionary flags
=53689					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d23e	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d241					en = *	; remember here
>d23c	03					.byte CL	;wh_CodeLength
>d241	e4					.byte $e4
>d242	63 70 79			L1:	.text "cpy"	;  name of word as a string, ending at wh_NameLastChar
>d245	23					.byte (("cpy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d246	b9 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d248	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d249	08					.byte NN	;wh_Flags	dictionary flags
=53701					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d24a	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d24d					en = *	; remember here
>d248	03					.byte CL	;wh_CodeLength
>d24d	cc					.byte $cc
>d24e	63 70 79 2e 23			L1:	.text "cpy.#"	;  name of word as a string, ending at wh_NameLastChar
>d253	65					.byte (("cpy.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d254	c5 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d256	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d257	08					.byte NN	;wh_Flags	dictionary flags
=53715					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d258	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d25b					en = *	; remember here
>d256	03					.byte CL	;wh_CodeLength
>d25b	c0					.byte $c0
>d25c	63 70 79 2e 7a			L1:	.text "cpy.z"	;  name of word as a string, ending at wh_NameLastChar
>d261	45					.byte (("cpy.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d262	d3 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d264	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d265	08					.byte NN	;wh_Flags	dictionary flags
=53729					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d266	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d269					en = *	; remember here
>d264	03					.byte CL	;wh_CodeLength
>d269	c4					.byte $c4
>d26a	64 65 63			L1:	.text "dec"	;  name of word as a string, ending at wh_NameLastChar
>d26d	63					.byte (("dec"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d26e	e1 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d270	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d271	08					.byte NN	;wh_Flags	dictionary flags
=53741					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d272	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d275					en = *	; remember here
>d270	03					.byte CL	;wh_CodeLength
>d275	ce					.byte $ce
>d276	64 65 63 2e 61			L1:	.text "dec.a"	;  name of word as a string, ending at wh_NameLastChar
>d27b	25					.byte (("dec.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d27c	ed d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d27e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d27f	08					.byte NN	;wh_Flags	dictionary flags
=53755					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d280	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d283					en = *	; remember here
>d27e	03					.byte CL	;wh_CodeLength
>d283	3a					.byte $3a
>d284	64 65 63 2e 78			L1:	.text "dec.x"	;  name of word as a string, ending at wh_NameLastChar
>d289	05					.byte (("dec.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d28a	fb d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d28c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d28d	08					.byte NN	;wh_Flags	dictionary flags
=53769					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d28e	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d291					en = *	; remember here
>d28c	03					.byte CL	;wh_CodeLength
>d291	de					.byte $de
>d292	64 65 63 2e 7a			L1:	.text "dec.z"	;  name of word as a string, ending at wh_NameLastChar
>d297	45					.byte (("dec.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d298	09 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d29a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d29b	08					.byte NN	;wh_Flags	dictionary flags
=53783					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d29c	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d29f					en = *	; remember here
>d29a	03					.byte CL	;wh_CodeLength
>d29f	c6					.byte $c6
>d2a0	64 65 63 2e 7a 78		L1:	.text "dec.zx"	;  name of word as a string, ending at wh_NameLastChar
>d2a6	06					.byte (("dec.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2a7	17 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2a9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2aa	08					.byte NN	;wh_Flags	dictionary flags
=53798					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2ab	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2ae					en = *	; remember here
>d2a9	03					.byte CL	;wh_CodeLength
>d2ae	d6					.byte $d6
>d2af	64 65 78			L1:	.text "dex"	;  name of word as a string, ending at wh_NameLastChar
>d2b2	03					.byte (("dex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2b3	26 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2b5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2b6	08					.byte NN	;wh_Flags	dictionary flags
=53810					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2b7	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2ba					en = *	; remember here
>d2b5	03					.byte CL	;wh_CodeLength
>d2ba	ca					.byte $ca
>d2bb	64 65 79			L1:	.text "dey"	;  name of word as a string, ending at wh_NameLastChar
>d2be	23					.byte (("dey"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2bf	32 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2c2	08					.byte NN	;wh_Flags	dictionary flags
=53822					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2c3	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2c6					en = *	; remember here
>d2c1	03					.byte CL	;wh_CodeLength
>d2c6	88					.byte $88
>d2c7	65 6f 72			L1:	.text "eor"	;  name of word as a string, ending at wh_NameLastChar
>d2ca	43					.byte (("eor"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2cb	3e d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2ce	08					.byte NN	;wh_Flags	dictionary flags
=53834					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2cf	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2d2					en = *	; remember here
>d2cd	03					.byte CL	;wh_CodeLength
>d2d2	4d					.byte $4d
>d2d3	65 6f 72 2e 23			L1:	.text "eor.#"	;  name of word as a string, ending at wh_NameLastChar
>d2d8	65					.byte (("eor.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2d9	4a d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2dc	08					.byte NN	;wh_Flags	dictionary flags
=53848					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2dd	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2e0					en = *	; remember here
>d2db	03					.byte CL	;wh_CodeLength
>d2e0	49					.byte $49
>d2e1	65 6f 72 2e 78			L1:	.text "eor.x"	;  name of word as a string, ending at wh_NameLastChar
>d2e6	05					.byte (("eor.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2e7	58 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2e9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2ea	08					.byte NN	;wh_Flags	dictionary flags
=53862					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2eb	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2ee					en = *	; remember here
>d2e9	03					.byte CL	;wh_CodeLength
>d2ee	5d					.byte $5d
>d2ef	65 6f 72 2e 79			L1:	.text "eor.y"	;  name of word as a string, ending at wh_NameLastChar
>d2f4	25					.byte (("eor.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2f5	66 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2f8	08					.byte NN	;wh_Flags	dictionary flags
=53876					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2f9	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2fc					en = *	; remember here
>d2f7	03					.byte CL	;wh_CodeLength
>d2fc	59					.byte $59
>d2fd	65 6f 72 2e 7a			L1:	.text "eor.z"	;  name of word as a string, ending at wh_NameLastChar
>d302	45					.byte (("eor.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d303	74 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d305	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d306	08					.byte NN	;wh_Flags	dictionary flags
=53890					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d307	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d30a					en = *	; remember here
>d305	03					.byte CL	;wh_CodeLength
>d30a	45					.byte $45
>d30b	65 6f 72 2e 7a 69 79		L1:	.text "eor.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d312	27					.byte (("eor.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d313	82 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d315	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d316	08					.byte NN	;wh_Flags	dictionary flags
=53906					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d317	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d31a					en = *	; remember here
>d315	03					.byte CL	;wh_CodeLength
>d31a	51					.byte $51
>d31b	65 6f 72 2e 7a 78		L1:	.text "eor.zx"	;  name of word as a string, ending at wh_NameLastChar
>d321	06					.byte (("eor.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d322	92 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d324	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d325	08					.byte NN	;wh_Flags	dictionary flags
=53921					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d326	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d329					en = *	; remember here
>d324	03					.byte CL	;wh_CodeLength
>d329	55					.byte $55
>d32a	65 6f 72 2e 7a 78 69		L1:	.text "eor.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d331	27					.byte (("eor.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d332	a1 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d334	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d335	08					.byte NN	;wh_Flags	dictionary flags
=53937					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d336	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d339					en = *	; remember here
>d334	03					.byte CL	;wh_CodeLength
>d339	41					.byte $41
>d33a	69 6e 63			L1:	.text "inc"	;  name of word as a string, ending at wh_NameLastChar
>d33d	63					.byte (("inc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d33e	b1 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d340	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d341	08					.byte NN	;wh_Flags	dictionary flags
=53949					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d342	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d345					en = *	; remember here
>d340	03					.byte CL	;wh_CodeLength
>d345	ee					.byte $ee
>d346	69 6e 63 2e 61			L1:	.text "inc.a"	;  name of word as a string, ending at wh_NameLastChar
>d34b	25					.byte (("inc.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d34c	bd d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d34e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d34f	08					.byte NN	;wh_Flags	dictionary flags
=53963					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d350	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d353					en = *	; remember here
>d34e	03					.byte CL	;wh_CodeLength
>d353	1a					.byte $1a
>d354	69 6e 63 2e 78			L1:	.text "inc.x"	;  name of word as a string, ending at wh_NameLastChar
>d359	05					.byte (("inc.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d35a	cb d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d35c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d35d	08					.byte NN	;wh_Flags	dictionary flags
=53977					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d35e	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d361					en = *	; remember here
>d35c	03					.byte CL	;wh_CodeLength
>d361	fe					.byte $fe
>d362	69 6e 63 2e 7a			L1:	.text "inc.z"	;  name of word as a string, ending at wh_NameLastChar
>d367	45					.byte (("inc.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d368	d9 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d36a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d36b	08					.byte NN	;wh_Flags	dictionary flags
=53991					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d36c	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d36f					en = *	; remember here
>d36a	03					.byte CL	;wh_CodeLength
>d36f	e6					.byte $e6
>d370	69 6e 63 2e 7a 78		L1:	.text "inc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d376	06					.byte (("inc.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d377	e7 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d379	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d37a	08					.byte NN	;wh_Flags	dictionary flags
=54006					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d37b	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d37e					en = *	; remember here
>d379	03					.byte CL	;wh_CodeLength
>d37e	f6					.byte $f6
>d37f	69 6e 78			L1:	.text "inx"	;  name of word as a string, ending at wh_NameLastChar
>d382	03					.byte (("inx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d383	f6 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d385	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d386	08					.byte NN	;wh_Flags	dictionary flags
=54018					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d387	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d38a					en = *	; remember here
>d385	03					.byte CL	;wh_CodeLength
>d38a	e8					.byte $e8
>d38b	69 6e 79			L1:	.text "iny"	;  name of word as a string, ending at wh_NameLastChar
>d38e	23					.byte (("iny"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d38f	02 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d391	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d392	08					.byte NN	;wh_Flags	dictionary flags
=54030					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d393	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d396					en = *	; remember here
>d391	03					.byte CL	;wh_CodeLength
>d396	c8					.byte $c8
>d397	6a 6d 70			L1:	.text "jmp"	;  name of word as a string, ending at wh_NameLastChar
>d39a	03					.byte (("jmp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d39b	0e d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d39d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d39e	08					.byte NN	;wh_Flags	dictionary flags
=54042					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d39f	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3a2					en = *	; remember here
>d39d	03					.byte CL	;wh_CodeLength
>d3a2	4c					.byte $4c
>d3a3	6a 6d 70 2e 69			L1:	.text "jmp.i"	;  name of word as a string, ending at wh_NameLastChar
>d3a8	25					.byte (("jmp.i"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3a9	1a d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3ac	08					.byte NN	;wh_Flags	dictionary flags
=54056					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3ad	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3b0					en = *	; remember here
>d3ab	03					.byte CL	;wh_CodeLength
>d3b0	6c					.byte $6c
>d3b1	6a 73 72			L1:	.text "jsr"	;  name of word as a string, ending at wh_NameLastChar
>d3b4	43					.byte (("jsr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3b5	28 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3b8	08					.byte NN	;wh_Flags	dictionary flags
=54068					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3b9	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3bc					en = *	; remember here
>d3b7	03					.byte CL	;wh_CodeLength
>d3bc	20					.byte $20
>d3bd	6c 64 61			L1:	.text "lda"	;  name of word as a string, ending at wh_NameLastChar
>d3c0	23					.byte (("lda"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3c1	34 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3c4	08					.byte NN	;wh_Flags	dictionary flags
=54080					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3c5	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3c8					en = *	; remember here
>d3c3	03					.byte CL	;wh_CodeLength
>d3c8	ad					.byte $ad
>d3c9	6c 64 61 2e 23			L1:	.text "lda.#"	;  name of word as a string, ending at wh_NameLastChar
>d3ce	65					.byte (("lda.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3cf	40 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3d2	08					.byte NN	;wh_Flags	dictionary flags
=54094					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3d3	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3d6					en = *	; remember here
>d3d1	03					.byte CL	;wh_CodeLength
>d3d6	a9					.byte $a9
>d3d7	6c 64 61 2e 78			L1:	.text "lda.x"	;  name of word as a string, ending at wh_NameLastChar
>d3dc	05					.byte (("lda.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3dd	4e d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3df	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3e0	08					.byte NN	;wh_Flags	dictionary flags
=54108					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3e1	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3e4					en = *	; remember here
>d3df	03					.byte CL	;wh_CodeLength
>d3e4	bd					.byte $bd
>d3e5	6c 64 61 2e 79			L1:	.text "lda.y"	;  name of word as a string, ending at wh_NameLastChar
>d3ea	25					.byte (("lda.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3eb	5c d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3ed	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3ee	08					.byte NN	;wh_Flags	dictionary flags
=54122					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3ef	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3f2					en = *	; remember here
>d3ed	03					.byte CL	;wh_CodeLength
>d3f2	b9					.byte $b9
>d3f3	6c 64 61 2e 7a			L1:	.text "lda.z"	;  name of word as a string, ending at wh_NameLastChar
>d3f8	45					.byte (("lda.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3f9	6a d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3fb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3fc	08					.byte NN	;wh_Flags	dictionary flags
=54136					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3fd	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d400					en = *	; remember here
>d3fb	03					.byte CL	;wh_CodeLength
>d400	a5					.byte $a5
>d401	6c 64 61 2e 7a 69 79		L1:	.text "lda.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d408	27					.byte (("lda.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d409	78 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d40b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d40c	08					.byte NN	;wh_Flags	dictionary flags
=54152					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d40d	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d410					en = *	; remember here
>d40b	03					.byte CL	;wh_CodeLength
>d410	b1					.byte $b1
>d411	6c 64 61 2e 7a 78		L1:	.text "lda.zx"	;  name of word as a string, ending at wh_NameLastChar
>d417	06					.byte (("lda.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d418	88 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d41a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d41b	08					.byte NN	;wh_Flags	dictionary flags
=54167					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d41c	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d41f					en = *	; remember here
>d41a	03					.byte CL	;wh_CodeLength
>d41f	b5					.byte $b5
>d420	6c 64 61 2e 7a 78 69		L1:	.text "lda.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d427	27					.byte (("lda.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d428	97 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d42a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d42b	08					.byte NN	;wh_Flags	dictionary flags
=54183					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d42c	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d42f					en = *	; remember here
>d42a	03					.byte CL	;wh_CodeLength
>d42f	a1					.byte $a1
>d430	6c 64 78			L1:	.text "ldx"	;  name of word as a string, ending at wh_NameLastChar
>d433	03					.byte (("ldx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d434	a7 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d436	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d437	08					.byte NN	;wh_Flags	dictionary flags
=54195					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d438	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d43b					en = *	; remember here
>d436	03					.byte CL	;wh_CodeLength
>d43b	ae					.byte $ae
>d43c	6c 64 78 2e 23			L1:	.text "ldx.#"	;  name of word as a string, ending at wh_NameLastChar
>d441	65					.byte (("ldx.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d442	b3 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d444	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d445	08					.byte NN	;wh_Flags	dictionary flags
=54209					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d446	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d449					en = *	; remember here
>d444	03					.byte CL	;wh_CodeLength
>d449	a2					.byte $a2
>d44a	6c 64 78 2e 79			L1:	.text "ldx.y"	;  name of word as a string, ending at wh_NameLastChar
>d44f	25					.byte (("ldx.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d450	c1 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d452	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d453	08					.byte NN	;wh_Flags	dictionary flags
=54223					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d454	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d457					en = *	; remember here
>d452	03					.byte CL	;wh_CodeLength
>d457	be					.byte $be
>d458	6c 64 78 2e 7a			L1:	.text "ldx.z"	;  name of word as a string, ending at wh_NameLastChar
>d45d	45					.byte (("ldx.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d45e	cf d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d460	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d461	08					.byte NN	;wh_Flags	dictionary flags
=54237					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d462	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d465					en = *	; remember here
>d460	03					.byte CL	;wh_CodeLength
>d465	a6					.byte $a6
>d466	6c 64 78 2e 7a 79		L1:	.text "ldx.zy"	;  name of word as a string, ending at wh_NameLastChar
>d46c	26					.byte (("ldx.zy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d46d	dd d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d46f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d470	08					.byte NN	;wh_Flags	dictionary flags
=54252					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d471	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d474					en = *	; remember here
>d46f	03					.byte CL	;wh_CodeLength
>d474	b6					.byte $b6
>d475	6c 64 79			L1:	.text "ldy"	;  name of word as a string, ending at wh_NameLastChar
>d478	23					.byte (("ldy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d479	ec d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d47b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d47c	08					.byte NN	;wh_Flags	dictionary flags
=54264					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d47d	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d480					en = *	; remember here
>d47b	03					.byte CL	;wh_CodeLength
>d480	ac					.byte $ac
>d481	6c 64 79 2e 23			L1:	.text "ldy.#"	;  name of word as a string, ending at wh_NameLastChar
>d486	65					.byte (("ldy.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d487	f8 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d489	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d48a	08					.byte NN	;wh_Flags	dictionary flags
=54278					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d48b	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d48e					en = *	; remember here
>d489	03					.byte CL	;wh_CodeLength
>d48e	a0					.byte $a0
>d48f	6c 64 79 2e 78			L1:	.text "ldy.x"	;  name of word as a string, ending at wh_NameLastChar
>d494	05					.byte (("ldy.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d495	06 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d497	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d498	08					.byte NN	;wh_Flags	dictionary flags
=54292					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d499	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d49c					en = *	; remember here
>d497	03					.byte CL	;wh_CodeLength
>d49c	bc					.byte $bc
>d49d	6c 64 79 2e 7a			L1:	.text "ldy.z"	;  name of word as a string, ending at wh_NameLastChar
>d4a2	45					.byte (("ldy.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4a3	14 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4a5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4a6	08					.byte NN	;wh_Flags	dictionary flags
=54306					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4a7	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4aa					en = *	; remember here
>d4a5	03					.byte CL	;wh_CodeLength
>d4aa	a4					.byte $a4
>d4ab	6c 64 79 2e 7a 78		L1:	.text "ldy.zx"	;  name of word as a string, ending at wh_NameLastChar
>d4b1	06					.byte (("ldy.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4b2	22 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4b4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4b5	08					.byte NN	;wh_Flags	dictionary flags
=54321					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4b6	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4b9					en = *	; remember here
>d4b4	03					.byte CL	;wh_CodeLength
>d4b9	b4					.byte $b4
>d4ba	6c 73 72			L1:	.text "lsr"	;  name of word as a string, ending at wh_NameLastChar
>d4bd	43					.byte (("lsr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4be	31 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4c0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4c1	08					.byte NN	;wh_Flags	dictionary flags
=54333					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4c2	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4c5					en = *	; remember here
>d4c0	03					.byte CL	;wh_CodeLength
>d4c5	4e					.byte $4e
>d4c6	6c 73 72 2e 61			L1:	.text "lsr.a"	;  name of word as a string, ending at wh_NameLastChar
>d4cb	25					.byte (("lsr.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4cc	3d d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4cf	08					.byte NN	;wh_Flags	dictionary flags
=54347					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4d0	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4d3					en = *	; remember here
>d4ce	03					.byte CL	;wh_CodeLength
>d4d3	4a					.byte $4a
>d4d4	6c 73 72 2e 78			L1:	.text "lsr.x"	;  name of word as a string, ending at wh_NameLastChar
>d4d9	05					.byte (("lsr.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4da	4b d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4dd	08					.byte NN	;wh_Flags	dictionary flags
=54361					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4de	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4e1					en = *	; remember here
>d4dc	03					.byte CL	;wh_CodeLength
>d4e1	5e					.byte $5e
>d4e2	6c 73 72 2e 7a			L1:	.text "lsr.z"	;  name of word as a string, ending at wh_NameLastChar
>d4e7	45					.byte (("lsr.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4e8	59 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4ea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4eb	08					.byte NN	;wh_Flags	dictionary flags
=54375					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4ec	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4ef					en = *	; remember here
>d4ea	03					.byte CL	;wh_CodeLength
>d4ef	46					.byte $46
>d4f0	6c 73 72 2e 7a 78		L1:	.text "lsr.zx"	;  name of word as a string, ending at wh_NameLastChar
>d4f6	06					.byte (("lsr.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4f7	67 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4f9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4fa	08					.byte NN	;wh_Flags	dictionary flags
=54390					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4fb	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4fe					en = *	; remember here
>d4f9	03					.byte CL	;wh_CodeLength
>d4fe	56					.byte $56
>d4ff	6e 6f 70			L1:	.text "nop"	;  name of word as a string, ending at wh_NameLastChar
>d502	03					.byte (("nop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d503	76 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d505	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d506	08					.byte NN	;wh_Flags	dictionary flags
=54402					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d507	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d50a					en = *	; remember here
>d505	03					.byte CL	;wh_CodeLength
>d50a	ea					.byte $ea
>d50b	6f 72 61			L1:	.text "ora"	;  name of word as a string, ending at wh_NameLastChar
>d50e	23					.byte (("ora"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d50f	82 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d511	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d512	08					.byte NN	;wh_Flags	dictionary flags
=54414					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d513	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d516					en = *	; remember here
>d511	03					.byte CL	;wh_CodeLength
>d516	0d					.byte $0d
>d517	6f 72 61 2e 23			L1:	.text "ora.#"	;  name of word as a string, ending at wh_NameLastChar
>d51c	65					.byte (("ora.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d51d	8e d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d51f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d520	08					.byte NN	;wh_Flags	dictionary flags
=54428					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d521	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d524					en = *	; remember here
>d51f	03					.byte CL	;wh_CodeLength
>d524	09					.byte $09
>d525	6f 72 61 2e 78			L1:	.text "ora.x"	;  name of word as a string, ending at wh_NameLastChar
>d52a	05					.byte (("ora.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d52b	9c d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d52d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d52e	08					.byte NN	;wh_Flags	dictionary flags
=54442					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d52f	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d532					en = *	; remember here
>d52d	03					.byte CL	;wh_CodeLength
>d532	1d					.byte $1d
>d533	6f 72 61 2e 79			L1:	.text "ora.y"	;  name of word as a string, ending at wh_NameLastChar
>d538	25					.byte (("ora.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d539	aa d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d53b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d53c	08					.byte NN	;wh_Flags	dictionary flags
=54456					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d53d	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d540					en = *	; remember here
>d53b	03					.byte CL	;wh_CodeLength
>d540	19					.byte $19
>d541	6f 72 61 2e 7a			L1:	.text "ora.z"	;  name of word as a string, ending at wh_NameLastChar
>d546	45					.byte (("ora.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d547	b8 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d549	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d54a	08					.byte NN	;wh_Flags	dictionary flags
=54470					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d54b	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d54e					en = *	; remember here
>d549	03					.byte CL	;wh_CodeLength
>d54e	05					.byte $05
>d54f	6f 72 61 2e 7a 69 79		L1:	.text "ora.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d556	27					.byte (("ora.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d557	c6 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d559	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d55a	08					.byte NN	;wh_Flags	dictionary flags
=54486					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d55b	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d55e					en = *	; remember here
>d559	03					.byte CL	;wh_CodeLength
>d55e	11					.byte $11
>d55f	6f 72 61 2e 7a 78		L1:	.text "ora.zx"	;  name of word as a string, ending at wh_NameLastChar
>d565	06					.byte (("ora.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d566	d6 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d568	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d569	08					.byte NN	;wh_Flags	dictionary flags
=54501					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d56a	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d56d					en = *	; remember here
>d568	03					.byte CL	;wh_CodeLength
>d56d	15					.byte $15
>d56e	6f 72 61 2e 7a 78 69		L1:	.text "ora.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d575	27					.byte (("ora.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d576	e5 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d578	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d579	08					.byte NN	;wh_Flags	dictionary flags
=54517					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d57a	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d57d					en = *	; remember here
>d578	03					.byte CL	;wh_CodeLength
>d57d	01					.byte $01
>d57e	70 68 61			L1:	.text "pha"	;  name of word as a string, ending at wh_NameLastChar
>d581	23					.byte (("pha"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d582	f5 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d584	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d585	08					.byte NN	;wh_Flags	dictionary flags
=54529					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d586	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d589					en = *	; remember here
>d584	03					.byte CL	;wh_CodeLength
>d589	48					.byte $48
>d58a	70 68 70			L1:	.text "php"	;  name of word as a string, ending at wh_NameLastChar
>d58d	03					.byte (("php"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d58e	01 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d590	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d591	08					.byte NN	;wh_Flags	dictionary flags
=54541					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d592	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d595					en = *	; remember here
>d590	03					.byte CL	;wh_CodeLength
>d595	08					.byte $08
>d596	70 6c 61			L1:	.text "pla"	;  name of word as a string, ending at wh_NameLastChar
>d599	23					.byte (("pla"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d59a	0d d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d59c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d59d	08					.byte NN	;wh_Flags	dictionary flags
=54553					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d59e	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5a1					en = *	; remember here
>d59c	03					.byte CL	;wh_CodeLength
>d5a1	68					.byte $68
>d5a2	70 6c 70			L1:	.text "plp"	;  name of word as a string, ending at wh_NameLastChar
>d5a5	03					.byte (("plp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5a6	19 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5a8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5a9	08					.byte NN	;wh_Flags	dictionary flags
=54565					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5aa	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5ad					en = *	; remember here
>d5a8	03					.byte CL	;wh_CodeLength
>d5ad	28					.byte $28
>d5ae	72 6f 6c			L1:	.text "rol"	;  name of word as a string, ending at wh_NameLastChar
>d5b1	83					.byte (("rol"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5b2	25 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5b4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5b5	08					.byte NN	;wh_Flags	dictionary flags
=54577					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5b6	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5b9					en = *	; remember here
>d5b4	03					.byte CL	;wh_CodeLength
>d5b9	2e					.byte $2e
>d5ba	72 6f 6c 2e 61			L1:	.text "rol.a"	;  name of word as a string, ending at wh_NameLastChar
>d5bf	25					.byte (("rol.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5c0	31 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5c3	08					.byte NN	;wh_Flags	dictionary flags
=54591					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5c4	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5c7					en = *	; remember here
>d5c2	03					.byte CL	;wh_CodeLength
>d5c7	2a					.byte $2a
>d5c8	72 6f 6c 2e 78			L1:	.text "rol.x"	;  name of word as a string, ending at wh_NameLastChar
>d5cd	05					.byte (("rol.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5ce	3f d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5d0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5d1	08					.byte NN	;wh_Flags	dictionary flags
=54605					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5d2	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5d5					en = *	; remember here
>d5d0	03					.byte CL	;wh_CodeLength
>d5d5	3e					.byte $3e
>d5d6	72 6f 6c 2e 7a			L1:	.text "rol.z"	;  name of word as a string, ending at wh_NameLastChar
>d5db	45					.byte (("rol.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5dc	4d d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5df	08					.byte NN	;wh_Flags	dictionary flags
=54619					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5e0	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5e3					en = *	; remember here
>d5de	03					.byte CL	;wh_CodeLength
>d5e3	26					.byte $26
>d5e4	72 6f 6c 2e 7a 78		L1:	.text "rol.zx"	;  name of word as a string, ending at wh_NameLastChar
>d5ea	06					.byte (("rol.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5eb	5b d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5ed	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5ee	08					.byte NN	;wh_Flags	dictionary flags
=54634					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5ef	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5f2					en = *	; remember here
>d5ed	03					.byte CL	;wh_CodeLength
>d5f2	36					.byte $36
>d5f3	72 6f 72			L1:	.text "ror"	;  name of word as a string, ending at wh_NameLastChar
>d5f6	43					.byte (("ror"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5f7	6a d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5f9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5fa	08					.byte NN	;wh_Flags	dictionary flags
=54646					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5fb	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5fe					en = *	; remember here
>d5f9	03					.byte CL	;wh_CodeLength
>d5fe	6e					.byte $6e
>d5ff	72 6f 72 2e 61			L1:	.text "ror.a"	;  name of word as a string, ending at wh_NameLastChar
>d604	25					.byte (("ror.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d605	76 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d607	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d608	08					.byte NN	;wh_Flags	dictionary flags
=54660					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d609	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d60c					en = *	; remember here
>d607	03					.byte CL	;wh_CodeLength
>d60c	6a					.byte $6a
>d60d	72 6f 72 2e 78			L1:	.text "ror.x"	;  name of word as a string, ending at wh_NameLastChar
>d612	05					.byte (("ror.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d613	84 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d615	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d616	08					.byte NN	;wh_Flags	dictionary flags
=54674					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d617	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d61a					en = *	; remember here
>d615	03					.byte CL	;wh_CodeLength
>d61a	7e					.byte $7e
>d61b	72 6f 72 2e 7a			L1:	.text "ror.z"	;  name of word as a string, ending at wh_NameLastChar
>d620	45					.byte (("ror.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d621	92 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d623	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d624	08					.byte NN	;wh_Flags	dictionary flags
=54688					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d625	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d628					en = *	; remember here
>d623	03					.byte CL	;wh_CodeLength
>d628	66					.byte $66
>d629	72 6f 72 2e 7a 78		L1:	.text "ror.zx"	;  name of word as a string, ending at wh_NameLastChar
>d62f	06					.byte (("ror.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d630	a0 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d632	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d633	08					.byte NN	;wh_Flags	dictionary flags
=54703					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d634	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d637					en = *	; remember here
>d632	03					.byte CL	;wh_CodeLength
>d637	76					.byte $76
>d638	72 74 69			L1:	.text "rti"	;  name of word as a string, ending at wh_NameLastChar
>d63b	23					.byte (("rti"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d63c	af d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d63e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d63f	08					.byte NN	;wh_Flags	dictionary flags
=54715					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d640	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d643					en = *	; remember here
>d63e	03					.byte CL	;wh_CodeLength
>d643	40					.byte $40
>d644	72 74 73			L1:	.text "rts"	;  name of word as a string, ending at wh_NameLastChar
>d647	63					.byte (("rts"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d648	bb d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d64a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d64b	08					.byte NN	;wh_Flags	dictionary flags
=54727					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d64c	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d64f					en = *	; remember here
>d64a	03					.byte CL	;wh_CodeLength
>d64f	60					.byte $60
>d650	73 62 63			L1:	.text "sbc"	;  name of word as a string, ending at wh_NameLastChar
>d653	63					.byte (("sbc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d654	c7 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d656	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d657	08					.byte NN	;wh_Flags	dictionary flags
=54739					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d658	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d65b					en = *	; remember here
>d656	03					.byte CL	;wh_CodeLength
>d65b	ed					.byte $ed
>d65c	73 62 63 2e 23			L1:	.text "sbc.#"	;  name of word as a string, ending at wh_NameLastChar
>d661	65					.byte (("sbc.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d662	d3 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d664	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d665	08					.byte NN	;wh_Flags	dictionary flags
=54753					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d666	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d669					en = *	; remember here
>d664	03					.byte CL	;wh_CodeLength
>d669	e9					.byte $e9
>d66a	73 62 63 2e 78			L1:	.text "sbc.x"	;  name of word as a string, ending at wh_NameLastChar
>d66f	05					.byte (("sbc.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d670	e1 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d672	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d673	08					.byte NN	;wh_Flags	dictionary flags
=54767					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d674	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d677					en = *	; remember here
>d672	03					.byte CL	;wh_CodeLength
>d677	fd					.byte $fd
>d678	73 62 63 2e 79			L1:	.text "sbc.y"	;  name of word as a string, ending at wh_NameLastChar
>d67d	25					.byte (("sbc.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d67e	ef d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d680	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d681	08					.byte NN	;wh_Flags	dictionary flags
=54781					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d682	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d685					en = *	; remember here
>d680	03					.byte CL	;wh_CodeLength
>d685	f9					.byte $f9
>d686	73 62 63 2e 7a			L1:	.text "sbc.z"	;  name of word as a string, ending at wh_NameLastChar
>d68b	45					.byte (("sbc.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d68c	fd d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d68e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d68f	08					.byte NN	;wh_Flags	dictionary flags
=54795					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d690	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d693					en = *	; remember here
>d68e	03					.byte CL	;wh_CodeLength
>d693	e5					.byte $e5
>d694	73 62 63 2e 7a 69 79		L1:	.text "sbc.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d69b	27					.byte (("sbc.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d69c	0b d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d69e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d69f	08					.byte NN	;wh_Flags	dictionary flags
=54811					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6a0	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6a3					en = *	; remember here
>d69e	03					.byte CL	;wh_CodeLength
>d6a3	f1					.byte $f1
>d6a4	73 62 63 2e 7a 78		L1:	.text "sbc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d6aa	06					.byte (("sbc.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6ab	1b d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6ad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6ae	08					.byte NN	;wh_Flags	dictionary flags
=54826					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6af	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6b2					en = *	; remember here
>d6ad	03					.byte CL	;wh_CodeLength
>d6b2	f5					.byte $f5
>d6b3	73 62 63 2e 7a 78 69		L1:	.text "sbc.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d6ba	27					.byte (("sbc.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6bb	2a d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6bd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6be	08					.byte NN	;wh_Flags	dictionary flags
=54842					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6bf	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6c2					en = *	; remember here
>d6bd	03					.byte CL	;wh_CodeLength
>d6c2	e1					.byte $e1
>d6c3	73 65 63			L1:	.text "sec"	;  name of word as a string, ending at wh_NameLastChar
>d6c6	63					.byte (("sec"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6c7	3a d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6c9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6ca	08					.byte NN	;wh_Flags	dictionary flags
=54854					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6cb	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6ce					en = *	; remember here
>d6c9	03					.byte CL	;wh_CodeLength
>d6ce	38					.byte $38
>d6cf	73 65 64			L1:	.text "sed"	;  name of word as a string, ending at wh_NameLastChar
>d6d2	83					.byte (("sed"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6d3	46 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6d5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6d6	08					.byte NN	;wh_Flags	dictionary flags
=54866					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6d7	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6da					en = *	; remember here
>d6d5	03					.byte CL	;wh_CodeLength
>d6da	f8					.byte $f8
>d6db	73 65 69			L1:	.text "sei"	;  name of word as a string, ending at wh_NameLastChar
>d6de	23					.byte (("sei"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6df	52 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6e2	08					.byte NN	;wh_Flags	dictionary flags
=54878					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6e3	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6e6					en = *	; remember here
>d6e1	03					.byte CL	;wh_CodeLength
>d6e6	78					.byte $78
>d6e7	73 74 61			L1:	.text "sta"	;  name of word as a string, ending at wh_NameLastChar
>d6ea	23					.byte (("sta"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6eb	5e d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6ed	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6ee	08					.byte NN	;wh_Flags	dictionary flags
=54890					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6ef	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6f2					en = *	; remember here
>d6ed	03					.byte CL	;wh_CodeLength
>d6f2	8d					.byte $8d
>d6f3	73 74 61 2e 78			L1:	.text "sta.x"	;  name of word as a string, ending at wh_NameLastChar
>d6f8	05					.byte (("sta.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6f9	6a d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6fb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6fc	08					.byte NN	;wh_Flags	dictionary flags
=54904					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6fd	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d700					en = *	; remember here
>d6fb	03					.byte CL	;wh_CodeLength
>d700	9d					.byte $9d
>d701	73 74 61 2e 79			L1:	.text "sta.y"	;  name of word as a string, ending at wh_NameLastChar
>d706	25					.byte (("sta.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d707	78 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d709	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d70a	08					.byte NN	;wh_Flags	dictionary flags
=54918					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d70b	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d70e					en = *	; remember here
>d709	03					.byte CL	;wh_CodeLength
>d70e	99					.byte $99
>d70f	73 74 61 2e 7a			L1:	.text "sta.z"	;  name of word as a string, ending at wh_NameLastChar
>d714	45					.byte (("sta.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d715	86 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d717	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d718	08					.byte NN	;wh_Flags	dictionary flags
=54932					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d719	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d71c					en = *	; remember here
>d717	03					.byte CL	;wh_CodeLength
>d71c	85					.byte $85
>d71d	73 74 61 2e 7a 69 79		L1:	.text "sta.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d724	27					.byte (("sta.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d725	94 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d727	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d728	08					.byte NN	;wh_Flags	dictionary flags
=54948					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d729	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d72c					en = *	; remember here
>d727	03					.byte CL	;wh_CodeLength
>d72c	91					.byte $91
>d72d	73 74 61 2e 7a 78		L1:	.text "sta.zx"	;  name of word as a string, ending at wh_NameLastChar
>d733	06					.byte (("sta.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d734	a4 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d736	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d737	08					.byte NN	;wh_Flags	dictionary flags
=54963					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d738	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d73b					en = *	; remember here
>d736	03					.byte CL	;wh_CodeLength
>d73b	95					.byte $95
>d73c	73 74 61 2e 7a 78 69		L1:	.text "sta.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d743	27					.byte (("sta.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d744	b3 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d746	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d747	08					.byte NN	;wh_Flags	dictionary flags
=54979					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d748	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d74b					en = *	; remember here
>d746	03					.byte CL	;wh_CodeLength
>d74b	81					.byte $81
>d74c	73 74 78			L1:	.text "stx"	;  name of word as a string, ending at wh_NameLastChar
>d74f	03					.byte (("stx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d750	c3 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d752	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d753	08					.byte NN	;wh_Flags	dictionary flags
=54991					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d754	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d757					en = *	; remember here
>d752	03					.byte CL	;wh_CodeLength
>d757	8e					.byte $8e
>d758	73 74 78 2e 7a			L1:	.text "stx.z"	;  name of word as a string, ending at wh_NameLastChar
>d75d	45					.byte (("stx.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d75e	cf d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d760	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d761	08					.byte NN	;wh_Flags	dictionary flags
=55005					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d762	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d765					en = *	; remember here
>d760	03					.byte CL	;wh_CodeLength
>d765	86					.byte $86
>d766	73 74 78 2e 7a 79		L1:	.text "stx.zy"	;  name of word as a string, ending at wh_NameLastChar
>d76c	26					.byte (("stx.zy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d76d	dd d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d76f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d770	08					.byte NN	;wh_Flags	dictionary flags
=55020					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d771	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d774					en = *	; remember here
>d76f	03					.byte CL	;wh_CodeLength
>d774	96					.byte $96
>d775	73 74 79			L1:	.text "sty"	;  name of word as a string, ending at wh_NameLastChar
>d778	23					.byte (("sty"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d779	ec d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d77b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d77c	08					.byte NN	;wh_Flags	dictionary flags
=55032					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d77d	20 ba cf	jsr $cfba		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d780					en = *	; remember here
>d77b	03					.byte CL	;wh_CodeLength
>d780	8c					.byte $8c
>d781	73 74 79 2e 7a			L1:	.text "sty.z"	;  name of word as a string, ending at wh_NameLastChar
>d786	45					.byte (("sty.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d787	f8 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d789	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d78a	08					.byte NN	;wh_Flags	dictionary flags
=55046					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d78b	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d78e					en = *	; remember here
>d789	03					.byte CL	;wh_CodeLength
>d78e	84					.byte $84
>d78f	73 74 79 2e 7a 78		L1:	.text "sty.zx"	;  name of word as a string, ending at wh_NameLastChar
>d795	06					.byte (("sty.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d796	06 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d798	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d799	08					.byte NN	;wh_Flags	dictionary flags
=55061					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d79a	20 a4 cf	jsr $cfa4		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d79d					en = *	; remember here
>d798	03					.byte CL	;wh_CodeLength
>d79d	94					.byte $94
>d79e	74 61 78			L1:	.text "tax"	;  name of word as a string, ending at wh_NameLastChar
>d7a1	03					.byte (("tax"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7a2	15 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7a4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7a5	08					.byte NN	;wh_Flags	dictionary flags
=55073					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7a6	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7a9					en = *	; remember here
>d7a4	03					.byte CL	;wh_CodeLength
>d7a9	aa					.byte $aa
>d7aa	74 61 79			L1:	.text "tay"	;  name of word as a string, ending at wh_NameLastChar
>d7ad	23					.byte (("tay"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7ae	21 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7b0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7b1	08					.byte NN	;wh_Flags	dictionary flags
=55085					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7b2	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7b5					en = *	; remember here
>d7b0	03					.byte CL	;wh_CodeLength
>d7b5	a8					.byte $a8
>d7b6	74 73 78			L1:	.text "tsx"	;  name of word as a string, ending at wh_NameLastChar
>d7b9	03					.byte (("tsx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7ba	2d d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7bd	08					.byte NN	;wh_Flags	dictionary flags
=55097					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7be	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7c1					en = *	; remember here
>d7bc	03					.byte CL	;wh_CodeLength
>d7c1	ba					.byte $BA
>d7c2	74 78 61			L1:	.text "txa"	;  name of word as a string, ending at wh_NameLastChar
>d7c5	23					.byte (("txa"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7c6	39 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7c8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7c9	08					.byte NN	;wh_Flags	dictionary flags
=55109					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7ca	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7cd					en = *	; remember here
>d7c8	03					.byte CL	;wh_CodeLength
>d7cd	8a					.byte $8a
>d7ce	74 78 73			L1:	.text "txs"	;  name of word as a string, ending at wh_NameLastChar
>d7d1	63					.byte (("txs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7d2	45 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7d4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7d5	08					.byte NN	;wh_Flags	dictionary flags
=55121					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7d6	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7d9					en = *	; remember here
>d7d4	03					.byte CL	;wh_CodeLength
>d7d9	9a					.byte $9a
>d7da	74 79 61			L1:	.text "tya"	;  name of word as a string, ending at wh_NameLastChar
>d7dd	23					.byte (("tya"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7de	51 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7e0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7e1	08					.byte NN	;wh_Flags	dictionary flags
=55133					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7e2	20 c3 cf	jsr $cfc3		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7e5					en = *	; remember here
>d7e0	03					.byte CL	;wh_CodeLength
>d7e5	98					.byte $98
=55133					asm_table = WordListLink ; head of instruction word list for disassembler
>d7e6	70 75 73 68 2d 61		L1:	.text "push-a"	;  name of word as a string, ending at wh_NameLastChar
>d7ec	26					.byte (("push-a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7ed	5d d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7ef	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7f0	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55148					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7f1	a9 a1		lda #$a1			lda #<PushZA
.d7f3	a0 b7		ldy #$b7			ldy #>PushZA
.d7f5	4c e0 cc	jmp $cce0			jmp Jsr_Comma_YA
=7					CL	.var *-(WordListLink+wh_Xt)
=$d7f8					en = *	; remember here
>d7ef	07					.byte CL	;wh_CodeLength
>d7f8	2d 2d 3e			L1:	.text "-->"	;  name of word as a string, ending at wh_NameLastChar
>d7fb	c3					.byte (("-->"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7fc	6c d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7ff	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55163					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d800	4c c4 c9	jmp $c9c4			jmp Here
=3					CL	.var *-(WordListLink+wh_Xt)
=$d803					en = *	; remember here
>d7fe	03					.byte CL	;wh_CodeLength
>d803	3c 6a				L1:	.text "<j"	;  name of word as a string, ending at wh_NameLastChar
>d805	42					.byte (("<j"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d806	7b d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d808	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d809	04					.byte IM	;wh_Flags	dictionary flags
=55173					WordListLink ::= *-wh_xt ; remember the nt of this word for later
=0					CL	.var *-(WordListLink+wh_Xt)
=$d80a					en = *	; remember here
>d808	00					.byte CL	;wh_CodeLength
.d80a	60		rts				rts
>d80b	3c 62				L1:	.text "<b"	;  name of word as a string, ending at wh_NameLastChar
>d80d	42					.byte (("<b"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d80e	85 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d810	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d811	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55181					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d812					asm_back_branch:
.d812	20 c4 c9	jsr $c9c4			jsr Here		; ( addr-l addr-h )
.d815	20 65 cb	jsr $cb65			jsr Minus		; ( offset )
.d818	a9 fe		lda #$fe			lda #$fe
.d81a	4c e7 c9	jmp $c9e7			jmp Minus_A
=11					CL	.var *-(WordListLink+wh_Xt)
=$d81d					en = *	; remember here
>d810	0b					.byte CL	;wh_CodeLength
>d81d	44 69 73 41 73 6d		L1:	.text "DisAsm"	;  name of word as a string, ending at wh_NameLastChar
>d823	a6					.byte (("DisAsm"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d824	8d d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d826	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d827	08					.byte NN	;wh_Flags	dictionary flags
=55203					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d828					DisAsm:
.d828	20 f3 c3	jsr $c3f3			jsr Bounds		; ( addr_end addr )
.d82b					_instr:
.d82b	20 e4 b3	jsr $b3e4			jsr underflow_2
.d82e	b5 24		lda $24,x			lda DStack+0,x		; addr >= addr_end?
.d830	d5 26		cmp $26,x			cmp DStack+2,x
.d832	b5 25		lda $25,x			lda DStack+1,x
.d834	f5 27		sbc $27,x			sbc DStack+3,x
.d836	90 03		bcc $d83b			bcc +
.d838	4c bc c4	jmp $c4bc			jmp Two_drop		; discard parms & return
.d83b					+
.d83b	20 e2 aa	jsr $aae2			jsr CR			; new line
.d83e	20 02 cf	jsr $cf02			jsr Dup			; print address
.d841	20 77 a8	jsr $a877			jsr Dot_Hex
.d844	20 7d cd	jsr $cd7d			jsr Space
.d847	a1 24		lda ($24,x)			lda (DStack+0,x)	; print opcode byte
.d849	20 8a d9	jsr $d98a			jsr _print_a
.d84c	a1 24		lda ($24,x)			lda (DStack+0,x)	; save opcode
.d84e	85 16		sta $16				sta tmp2
.d850	20 f8 c9	jsr $c9f8			jsr One_plus
.d853	a9 5d		lda #$5d			lda #<asm_table		; for each asm opcode word
.d855	a0 d7		ldy #$d7			ldy #>asm_table
.d857	85 14		sta $14				sta tmp1+0
.d859	84 15		sty $15				sty tmp1+1
.d85b	d0 0f		bne $d86c			bne _WTest
.d85d	a0 82		ldy #$82	_WNext:		ldy #wh_WordListLink+1	;   next entry
.d85f	b1 14		lda ($14),y			lda (tmp1),y
.d861	f0 2e		beq $d891			beq _unknown
.d863	48		pha				pha
.d864	88		dey				dey
.d865	b1 14		lda ($14),y			lda (tmp1),y
.d867	85 14		sta $14				sta tmp1+0
.d869	68		pla				pla
.d86a	85 15		sta $15				sta tmp1+1
.d86c	a0 88		ldy #$88	_WTest:		ldy #wh_Xt+3		;   opcode match?
.d86e	b1 14		lda ($14),y			lda (tmp1),y
.d870	c5 16		cmp $16				cmp tmp2
.d872	d0 e9		bne $d85d			bne _WNext
.d874	a5 16		lda $16				lda tmp2		; save opcode
.d876	48		pha				pha
.d877	a5 15		lda $15				lda tmp1+1		; save its nt
.d879	48		pha				pha
.d87a	a5 14		lda $14				lda tmp1+0
.d87c	48		pha				pha
.d87d	a0 86		ldy #$86			ldy #wh_xt+1		; get processor routine addr lo byte from JSR
.d87f	b1 14		lda ($14),y			lda (tmp1),y
.d881	c9 c3		cmp #$c3			cmp #<asm_0		; goto disasm processor
.d883	f0 17		beq $d89c			beq _c0
.d885	c9 a4		cmp #$a4			cmp #<asm_1
.d887	f0 49		beq $d8d2			beq _c1
.d889	c9 ba		cmp #$ba			cmp #<asm_2
.d88b	f0 61		beq $d8ee			beq _c2
.d88d	c9 84		cmp #$84			cmp #<asm_r
.d88f	f0 18		beq $d8a9			beq _cr
.d891					_unknown:
.d891	20 6b d9	jsr $d96b			jsr _tab		; to source area
.d894	a9 3f		lda #$3f			lda #'?'
.d896	20 70 cd	jsr $cd70			jsr Emit_A
.d899	4c 2b d8	jmp $d82b			jmp _instr
.d89c					_c0:
.d89c	20 6b d9	jsr $d96b			jsr _tab		; to source area
.d89f	68		pla				pla			; get opcode word nt
.d8a0	a8		tay				tay
.d8a1	68		pla				pla
.d8a2	20 70 d9	jsr $d970			jsr _print_opcode
.d8a5	68		pla				pla			; discard opcode
.d8a6	4c 2b d8	jmp $d82b			jmp _instr
.d8a9					_cr:
.d8a9	20 81 d9	jsr $d981			jsr _get_byte		; get displacement byte
.d8ac	a0 00		ldy #$00			ldy #0			; sign extend displacement
.d8ae	09 00		ora #$00			ora #0
.d8b0	10 01		bpl $d8b3			bpl +
.d8b2	88		dey				dey
.d8b3	20 5f b7	jsr $b75f	+		jsr PushYA
.d8b6	20 02 cf	jsr $cf02			jsr Dup			; save for TypeSymbol
.d8b9	20 6b d9	jsr $d96b			jsr _tab		; to source area
.d8bc	20 b1 cb	jsr $cbb1			jsr U_Dot		; print dest address
.d8bf	68		pla				pla			; get opcode word nt
.d8c0	a8		tay				tay
.d8c1	68		pla				pla
.d8c2	20 70 d9	jsr $d970			jsr _print_opcode
.d8c5	68		pla				pla			; discard opcode
.d8c6	20 d9 ce	jsr $ced9			jsr Over		; calc dest addr
.d8c9	20 4c cb	jsr $cb4c			jsr Plus
.d8cc	20 9e 81	jsr $819e			jsr TypeSymbol		; print dest addr symbolic
.d8cf	4c 2b d8	jmp $d82b			jmp _instr
.d8d2					_c1:
.d8d2	20 81 d9	jsr $d981			jsr _get_byte		; get operand
.d8d5	20 a1 b7	jsr $b7a1			jsr PushZA
.d8d8	20 6b d9	jsr $d96b			jsr _tab		; to source area
.d8db	20 02 cf	jsr $cf02			jsr Dup
.d8de	20 b1 cb	jsr $cbb1			jsr U_Dot		; print operand
.d8e1	68		pla				pla			; get opcode word nt
.d8e2	a8		tay				tay
.d8e3	68		pla				pla
.d8e4	20 70 d9	jsr $d970			jsr _print_opcode
.d8e7	68		pla				pla			; discard opcode
.d8e8	20 9e 81	jsr $819e			jsr TypeSymbol
.d8eb	4c 2b d8	jmp $d82b			jmp _instr
.d8ee					_c2:
.d8ee	20 81 d9	jsr $d981			jsr _get_byte		; get operand lo byte
.d8f1	48		pha				pha
.d8f2	20 81 d9	jsr $d981			jsr _get_byte		; get operand hi byte
.d8f5	ca		dex				dex			; push operand bytes
.d8f6	ca		dex				dex
.d8f7	95 25		sta $25,x			sta DStack+1,x
.d8f9	68		pla				pla
.d8fa	95 24		sta $24,x			sta DStack+0,x
.d8fc	20 6b d9	jsr $d96b			jsr _tab		; to source area
.d8ff	20 02 cf	jsr $cf02			jsr Dup
.d902	20 b1 cb	jsr $cbb1			jsr U_Dot		; print operand
.d905	68		pla				pla			; AY= opcode word nt
.d906	a8		tay				tay
.d907	68		pla				pla
.d908	20 70 d9	jsr $d970			jsr _print_opcode
.d90b	20 02 cf	jsr $cf02			jsr Dup
.d90e	20 9e 81	jsr $819e			jsr TypeSymbol		; print operand as symbol
.d911	68		pla				pla			; get opcode
.d912	c9 20		cmp #$20			cmp #$20		;  JSR
.d914	f0 09		beq $d91f			beq _jsr
.d916	e8		inx		_jdrop:		inx			; Drop operand
.d917	e8		inx				inx
.d918	4c 2b d8	jmp $d82b			jmp _instr		; ( addr_end addr )
.d91b	e8		inx		_2drop:		inx			; Drop jsr_nt
.d91c	e8		inx				inx
.d91d	d0 f7		bne $d916			bne _jdrop
.d91f					_jsr:
.d91f	20 a5 b3	jsr $b3a5			jsr PopYA
.d922	c9 80		cmp #$80			cmp #<sliteral_runtime	; string literal?
.d924	d0 42		bne $d968			bne _not_sliteral
.d926	c0 b8		cpy #$b8			cpy #>sliteral_runtime
.d928	d0 3e		bne $d968			bne _not_sliteral
.d92a	20 e2 aa	jsr $aae2			jsr CR
.d92d	20 02 cf	jsr $cf02			jsr Dup			; ( addr_end addr addr )
.d930	20 77 a8	jsr $a877			jsr Dot_Hex
.d933	20 7d cd	jsr $cd7d			jsr Space
.d936	20 02 cf	jsr $cf02			jsr Dup			; ( addr_end ? addr )
.d939	20 81 d9	jsr $d981			jsr _get_byte		; get JMP opcode
.d93c	20 81 d9	jsr $d981			jsr _get_byte		; get JMP addr lo byte
.d93f	95 26		sta $26,x			sta DStack+2,x
.d941	20 81 d9	jsr $d981			jsr _get_byte		; get JMP addr hi byte
.d944	95 27		sta $27,x			sta DStack+3,x		; ( addr_end string_end addr )
.d946	20 e2 aa	jsr $aae2			jsr CR
.d949	20 02 cf	jsr $cf02			jsr Dup
.d94c	20 77 a8	jsr $a877			jsr Dot_Hex
.d94f	20 7d cd	jsr $cd7d			jsr Space
.d952	b5 24		lda $24,x	_slit_11:	lda DStack+0,x		; done with string data?
.d954	d5 26		cmp $26,x			cmp DStack+2,x
.d956	b5 25		lda $25,x			lda DStack+1,x
.d958	f5 27		sbc $27,x			sbc DStack+3,x
.d95a	b0 06		bcs $d962			bcs _slit_19
.d95c	20 81 d9	jsr $d981			jsr _get_byte
.d95f	4c 52 d9	jmp $d952			jmp _slit_11
.d962					_slit_19:
.d962	20 1d c9	jsr $c91d			jsr Nip			; ( addr_end addr )
.d965	4c 2b d8	jmp $d82b			jmp _instr
.d968					_not_sliteral:
.d968	4c 2b d8	jmp $d82b			jmp _instr
.d96b					_tab:
.d96b	a9 09		lda #$09			lda #9
.d96d	4c 70 cd	jmp $cd70			jmp Emit_A
.d970					_print_opcode:
.d970	20 10 cf	jsr $cf10			jsr PushAY		; save opcode word nt
.d973	20 7d cd	jsr $cd7d			jsr Space
.d976	20 af bd	jsr $bdaf			jsr Name_To_String	; get name string
.d979	4c 8a cd	jmp $cd8a			jmp Type		; type word name
.d97c					_get_byte_silent:
.d97c	a1 24		lda ($24,x)			lda (DStack+0,x)
.d97e	4c f8 c9	jmp $c9f8			jmp One_plus
.d981					_get_byte:
.d981	20 7c d9	jsr $d97c			jsr _get_byte_silent
.d984	48		pha				pha
.d985	20 8a d9	jsr $d98a			jsr _print_a
.d988	68		pla				pla
.d989	60		rts				rts
.d98a					_print_a:
.d98a	20 a1 b7	jsr $b7a1			jsr PushZA
.d98d	20 55 a8	jsr $a855			jsr C_Dot_Hex
.d990	4c 7d cd	jmp $cd7d			jmp Space
=55203					assembler_dictionary_start = WordListLink ; END of ASSEMBLER-WORDLIST
=0					WordListLink .var 0	; start wordlist
>d993	6c				L1:	.text "l"	;  name of word as a string, ending at wh_NameLastChar
>d994	81					.byte (("l"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d995	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d997	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d998	08					.byte NN	;wh_Flags	dictionary flags
=55572					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d999	4c 20 a4	jmp $a420	Editor_l:	jmp ListScr
=3					CL	.var *-(WordListLink+wh_Xt)
=$d99c					en = *	; remember here
>d997	03					.byte CL	;wh_CodeLength
.d99c					Editor_Screen_Helper:
.d99c	20 02 cf	jsr $cf02			jsr Dup
.d99f	20 24 a2	jsr $a224			jsr Scr
.d9a2	20 4f ce	jsr $ce4f			jsr Store
.d9a5	4c 38 a3	jmp $a338			jmp Buffer
>d9a8	65 6e 74 65 72 2d 73 63		L1:	.text "enter-screen"	;  name of word as a string, ending at wh_NameLastChar
>d9b0	72 65 65 6e
>d9b4	cc					.byte (("enter-screen"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d9b5	14 d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d9b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d9b8	08					.byte NN	;wh_Flags	dictionary flags
=55604					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d9b9					Editor_Enter_Screen:
.d9b9	20 9c d9	jsr $d99c			jsr Editor_Screen_Helper
.d9bc	a9 00		lda #$00			lda #0			; Overwrite the lines one at a time.
.d9be	95 24		sta $24,x	_loop:		sta DStack+0,x
.d9c0	20 a1 b7	jsr $b7a1			jsr PushZA		; Put the current line number on the stack.
.d9c3	20 27 da	jsr $da27			jsr Editor_o		; prompt for overwrite.
.d9c6	f6 24		inc $24,x			inc DStack+0,x		; Move on to the next line.
.d9c8	b5 24		lda $24,x			lda DStack+0,x
.d9ca	c9 10		cmp #$10			cmp #16
.d9cc	90 f0		bcc $d9be			bcc _loop
.d9ce	e8		inx				inx			; Drop work area
.d9cf	e8		inx				inx
=23					CL	.var *-(WordListLink+wh_Xt)
=$d9d0					en = *	; remember here
>d9b7	17					.byte CL	;wh_CodeLength
.d9d0	60		rts				rts
>d9d1	6c 69 6e 65			L1:	.text "line"	;  name of word as a string, ending at wh_NameLastChar
>d9d5	a4					.byte (("line"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d9d6	34 d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d9d8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d9d9	08					.byte NN	;wh_Flags	dictionary flags
=55637					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d9da					Editor_line:
.d9da	a9 06		lda #$06			lda #6		; Multiply the TOS by 64 (chars/line) to compute offset.
.d9dc	20 eb ca	jsr $caeb			jsr LShift_A	; *64 is same as left shift 6 times.
.d9df	20 24 a2	jsr $a224			jsr Scr
.d9e2	20 6c ce	jsr $ce6c			jsr Fetch
.d9e5	20 ce a2	jsr $a2ce			jsr Block
.d9e8	4c 4c cb	jmp $cb4c			jmp Plus
=17					CL	.var *-(WordListLink+wh_Xt)
=$d9eb					en = *	; remember here
>d9d8	11					.byte CL	;wh_CodeLength
>d9eb	65 72 61 73 65 2d 73 63		L1:	.text "erase-screen"	;  name of word as a string, ending at wh_NameLastChar
>d9f3	72 65 65 6e
>d9f7	cc					.byte (("erase-screen"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d9f8	55 d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d9fa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d9fb	08					.byte NN	;wh_Flags	dictionary flags
=55671					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d9fc					Editor_Erase_Screen:
.d9fc	20 9c d9	jsr $d99c			jsr Editor_Screen_Helper
.d9ff	a9 00		lda #$00			lda #<1024
.da01	a0 04		ldy #$04			ldy #>1024
.da03	20 5f b7	jsr $b75f			jsr PushYA
.da06	20 f9 bd	jsr $bdf9			jsr Blank		; Erase the entire block (fill with spaces).
.da09	4c 24 a3	jmp $a324			jmp Update		; Mark buffer as updated.
=16					CL	.var *-(WordListLink+wh_Xt)
=$da0c					en = *	; remember here
>d9fa	10					.byte CL	;wh_CodeLength
>da0c	65 6c				L1:	.text "el"	;  name of word as a string, ending at wh_NameLastChar
>da0e	82					.byte (("el"[-1]&7)<<5)+(*-L1)	;wh_HNL
>da0f	77 d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>da11	03					.byte 3		;wh_CodeLength  (with placeholder value)
>da12	08					.byte NN	;wh_Flags	dictionary flags
=55694					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.da13					Editor_el:
.da13	20 da d9	jsr $d9da			jsr Editor_line
.da16	a9 40		lda #$40			lda #64			;(# of chars/line)
.da18	20 a1 b7	jsr $b7a1			jsr PushZA
.da1b	20 f9 bd	jsr $bdf9			jsr Blank		; Fill with spaces.
.da1e	4c 24 a3	jmp $a324			jmp Update		; Mark buffer as updated.
=14					CL	.var *-(WordListLink+wh_Xt)
=$da21					en = *	; remember here
>da11	0e					.byte CL	;wh_CodeLength
>da21	6f				L1:	.text "o"	;  name of word as a string, ending at wh_NameLastChar
>da22	e1					.byte (("o"[-1]&7)<<5)+(*-L1)	;wh_HNL
>da23	8e d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>da25	03					.byte 3		;wh_CodeLength  (with placeholder value)
>da26	08					.byte NN	;wh_Flags	dictionary flags
=55714					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.da27					Editor_o:
.da27	20 e2 aa	jsr $aae2			jsr CR
.da2a	20 02 cf	jsr $cf02			jsr Dup
.da2d	a9 02		lda #$02			lda #2
.da2f	20 e5 cb	jsr $cbe5			jsr U_Dot_R_A
.da32	20 7d cd	jsr $cd7d			jsr Space
.da35	a9 2a		lda #$2a			lda #'*'
.da37	20 70 cd	jsr $cd70			jsr Emit_A
.da3a	20 7d cd	jsr $cd7d			jsr Space
.da3d	20 da d9	jsr $d9da			jsr Editor_line
.da40	20 02 cf	jsr $cf02			jsr Dup		; Save a copy of the line address for later.
.da43	a9 40		lda #$40			lda #64		; chars/line
.da45	20 a1 b7	jsr $b7a1			jsr PushZA
.da48	20 77 c2	jsr $c277			jsr Accept
.da4b	20 02 cf	jsr $cf02			jsr Dup
.da4e	20 2c ce	jsr $ce2c			jsr Not_Rot
.da51	20 4c cb	jsr $cb4c			jsr Plus
.da54	a9 40		lda #$40			lda #64		; chars/line
.da56	20 a1 b7	jsr $b7a1			jsr PushZA
.da59	20 06 ce	jsr $ce06			jsr Rot
.da5c	20 65 cb	jsr $cb65			jsr Minus
.da5f	20 f9 bd	jsr $bdf9			jsr Blank
.da62	4c 24 a3	jmp $a324			jmp Update
=62					CL	.var *-(WordListLink+wh_Xt)
=$da65					en = *	; remember here
>da25	3e					.byte CL	;wh_CodeLength
=55714					editor_dictionary_start = WordListLink ; END of EDITOR-WORDLIST

;******  Processing file: platform/../strings.asm

>da65	20 6f 6b 00			str_ok:         .text " ok", 0         ; note space at beginning
>da69	20 63 6f 6d 70 69 6c 65		str_compiled:   .text " compiled", 0   ; note space at beginning
>da71	64 00
>da73	72 65 64 65 66 69 6e 65		str_redefined:  .text "redefined ", 0  ; note space at end
>da7b	64 20 00
>da7e	41 73 73 65 6d 62 6c 65		str_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>da86	72 20 00
>da89	45 64 69 74 6f 72 20 00		str_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>da91	46 6f 72 74 68 20 00		str_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>da98	52 6f 6f 74 20 00		str_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>da9e	66 6c 61 67 73 3a 00		str_see_flags:  .text "flags:", 0
>daa5	6e 74 3a 20 24 00		str_see_nt:     .text "nt: $", 0
>daab	78 74 3a 20 24 00		str_see_xt:     .text "xt: $", 0
>dab1	73 69 7a 65 3a 20 23 00		str_see_size:   .text "size: #", 0
.dab9					Exception_Text_List:
>dab9	ff 00					.text $100+err_Abort,0
>dabb	fe 00					.text $100+err_AbortQuote,0
>dabd	fd 53 74 61 63 6b 20 4f			.text $100+err_Stack_Overflow,"Stack Overflow",0
>dac5	76 65 72 66 6c 6f 77 00
>dacd	fc 53 74 61 63 6b 20 55			.text $100+err_Stack_Underflow,"Stack Underflow",0
>dad5	6e 64 65 72 66 6c 6f 77 00
>dade	f9 64 6f 2d 6c 6f 6f 70			.text $100+err_DoLoop_TooDeep,"do-loops nested too deeply during execution",0
>dae6	73 20 6e 65 73 74 65 64 20 74 6f 6f 20 64 65 65
>daf6	70 6c 79 20 64 75 72 69 6e 67 20 65 78 65 63 75
>db06	74 69 6f 6e 00
>db0b	f6 44 69 76 69 64 65 20			.text $100+err_DivideBy0,"Divide by 0",0
>db13	62 79 20 30 00
>db18	f5 6f 75 74 20 6f 66 20			.text $100+err_OutOfRange,"out of range",0
>db20	72 61 6e 67 65 00
>db26	f4 61 72 67 75 6d 65 6e			.text $100+err_ArgTypeMismatch,"argument type mismatch",0
>db2e	74 20 74 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>db3e	f3 55 6e 64 65 66 69 6e			.text $100+err_UndefinedWord,"Undefined word",0
>db46	65 64 20 77 6f 72 64 00
>db4e	f2 49 6e 74 65 72 70 72			.text $100+err_CompileOnly,"Interpreting a Compile-only word",0
>db56	65 74 69 6e 67 20 61 20 43 6f 6d 70 69 6c 65 2d
>db66	6f 6e 6c 79 20 77 6f 72 64 00
>db70	eb 75 6e 73 75 70 70 6f			.text $100+err_Unsupported,"unsupported operation",0 ;  (e.g., AT-XY on a too-dumb terminal)
>db78	72 74 65 64 20 6f 70 65 72 61 74 69 6f 6e 00
>db87	ea 63 6f 6e 74 72 6f 6c			.text $100+err_ControlMismatch,"control structure mismatch",0
>db8f	20 73 74 72 75 63 74 75 72 65 20 6d 69 73 6d 61
>db9f	74 63 68 00
>dba3	e0 69 6e 76 61 6c 69 64			.text $100+err_InvalidName,"invalid name",0 ; argument (e.g., TO name)
>dbab	20 6e 61 6d 65 00
>dbb1	df 62 6c 6f 63 6b 20 72			.text $100+err_BlockRead,"block read",0
>dbb9	65 61 64 00
>dbbd	de 62 6c 6f 63 6b 20 77			.text $100+err_BlockWrite,"block write",0
>dbc5	72 69 74 65 00
>dbca	d6 46 50 20 64 69 76 69			.text $100+err_FPDivideBy0,"FP divide by zero",0
>dbd2	64 65 20 62 79 20 7a 65 72 6f 00
>dbdd	d5 46 50 20 72 65 73 75			.text $100+err_FPOutOfRange,"FP result out of range",0
>dbe5	6c 74 20 6f 75 74 20 6f 66 20 72 61 6e 67 65 00
>dbf5	d4 46 50 20 73 74 61 63			.text $100+err_FPStackOverflow,"FP stack overflow",0
>dbfd	6b 20 6f 76 65 72 66 6c 6f 77 00
>dc08	d3 46 50 20 73 74 61 63			.text $100+err_FPStackUnderflow,"FP stack underflow",0
>dc10	6b 20 75 6e 64 65 72 66 6c 6f 77 00
>dc1c	d2 46 50 20 69 6e 76 61			.text $100+err_FPInvalidArg,"FP invalid argument",0
>dc24	6c 69 64 20 61 72 67 75 6d 65 6e 74 00
>dc31	ca 46 50 20 75 6e 64 65			.text $100+err_FPUnderflow,"FP underflow",0
>dc39	72 66 6c 6f 77 00
>dc3f	c5 41 4c 4c 4f 43 41 54			.text $100+err_Allocate,"ALLOCATE",0
>dc47	45 00
>dc49	c4 46 52 45 45 00			.text $100+err_Free,"FREE",0
>dc4f	6b 52 65 66 69 6c 6c 00			.text $100+err_Refill,"Refill",0
>dc57	6a 44 65 66 65 72 20 6e			.text $100+err_Defer,"Defer not set",0
>dc5f	6f 74 20 73 65 74 00
>dc66	69 41 6c 72 65 61 64 79			.text $100+err_AlreadyInterpreting,"Already interpreting",0
>dc6e	20 69 6e 74 65 72 70 72 65 74 69 6e 67 00
>dc7c	68 41 6c 72 65 61 64 79			.text $100+err_AlreadyCompiling,"Already compiling",0
>dc84	20 63 6f 6d 70 69 6c 69 6e 67 00
>dc8f	66 4e 6f 20 77 6f 72 64			.text $100+err_TooManyWordlists,"No wordlists available",0
>dc97	6c 69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>dca7	00					.text 0 ; end of list

;******  Return to file: platform/../taliforth.asm


;******  Return to file: platform/platform-py65mon.asm

>0766					hist_buff: .fill 8*128	; Input History for ACCEPT
.0b66					cp0:
=$f001					c65_putc	= $f001 ;  putc    Write here to send the byte to stdout
=$f003					c65_kbhit	= $f003 ;  kbit    Return non-zero if key ready to fetch with getc
=$f004					c65_getc	= $f004 ;  getc    Non-blocking read from stdin, returns 0 if no byte ready
=$f006					c65_start	= $f006 ;  start   Reading here starts the cycle counter
=$f007					c65_stop	= $f007 ;  stop    Reading here stops the cycle counter
=$f008					c65_cycles	= $f008 ; cycles  Current 32 bit cycle count in NUXI order
=$f010					c65_blkio	= $f010 ;  blkio   Write here to execute a block IO action (see below)
=$f011					c65_status	= $f011 ;  status  Read block IO status here
=$f012					c65_blknum	= $f012 ; blknum  word, Block number to read/write
=$f014					c65_buffer	= $f014 ; buffer  word, Start of 1024 byte memory buffer to read/write
.f100					v_nmi:
.f100					v_reset:
.f100					v_irq:
.f100					kernel_init:
.f100	78		sei		                sei             ; Disable interrupts
.f101	a2 00		ldx #$00	                ldx #0
.f103	bd 83 f1	lda $f183,x	-               lda s_kernel_id,x
.f106	f0 06		beq $f10e	                beq _done
.f108	20 21 f1	jsr $f121	                jsr kernel_putc
.f10b	e8		inx		                inx
.f10c	d0 f5		bne $f103	                bne -
.f10e					_done:
.f10e	2c 06 f0	bit $f006			bit c65_start		; start the cycle counter
.f111	4c 24 a0	jmp $a024	                jmp forth
.f114					kernel_getc:
.f114					_loop:
.f114	ee 35 03	inc $0335	                inc RndState+0	; randomize
.f117	ad 04 f0	lda $f004	                lda c65_getc
.f11a	f0 f8		beq $f114	                beq _loop
.f11c	60		rts		                rts
.f11d					kernel_havekey:
.f11d	ad 03 f0	lda $f003			lda c65_kbhit
.f120	60		rts				rts
.f121					kernel_putc:
.f121	8d 01 f0	sta $f001	                sta c65_putc
.f124	60		rts		                rts
.f125					platform_bye:
.f125	00		brk #		                brk
.f126					platform_CCAt:
.f126	ca		dex				dex			; allot DStack space
.f127	ca		dex				dex
.f128	ca		dex				dex
.f129	ca		dex				dex
.f12a	2c 07 f0	bit $f007			bit c65_stop		; stop the cycle counter so we can read it
.f12d	ad 08 f0	lda $f008			lda c65_cycles+0	; cycles  Current 32 bit cycle count in NUXI order
.f130	95 24		sta $24,x			sta DStack+0,x
.f132	ad 09 f0	lda $f009			lda c65_cycles+1
.f135	95 25		sta $25,x			sta DStack+1,x
.f137	ad 0a f0	lda $f00a			lda c65_cycles+2
.f13a	95 26		sta $26,x			sta DStack+2,x
.f13c	ad 0b f0	lda $f00b			lda c65_cycles+3
.f13f	95 27		sta $27,x			sta DStack+3,x
.f141	2c 06 f0	bit $f006			bit c65_start		; restart the cycle counter
.f144	60		rts		                rts
.f145					Platform_Block_Read:
.f145	20 58 f1	jsr $f158			jsr Platform_BlockParms
.f148	a9 01		lda #$01			lda #1			; read
.f14a	8d 10 f0	sta $f010			sta c65_blkio
.f14d	ad 11 f0	lda $f011			lda c65_status
.f150	f0 05		beq $f157			beq +
.f152	a9 df		lda #$df			lda #$100+err_BlockRead
.f154	20 2e b4	jsr $b42e			jsr ThrowA
.f157	60		rts		+		rts
.f158					Platform_BlockParms:
.f158	20 a5 b3	jsr $b3a5			jsr PopYA		; set block #
.f15b	8d 12 f0	sta $f012			sta c65_blknum+0
.f15e	8c 13 f0	sty $f013			sty c65_blknum+1
.f161	20 a5 b3	jsr $b3a5			jsr PopYA		; set buffer addr
.f164	8d 14 f0	sta $f014			sta c65_buffer+0
.f167	8c 15 f0	sty $f015			sty c65_buffer+1
.f16a	a9 ff		lda #$ff			lda #$ff		; in case c65 isn't talking
.f16c	8d 11 f0	sta $f011			sta c65_status
.f16f	60		rts				rts
.f170					Platform_Block_Write:
.f170	20 58 f1	jsr $f158			jsr Platform_BlockParms
.f173	a9 02		lda #$02			lda #2			; write
.f175	8d 10 f0	sta $f010			sta c65_blkio
.f178	ad 11 f0	lda $f011			lda c65_status
.f17b	f0 05		beq $f182			beq +
.f17d	a9 de		lda #$de			lda #$100+err_BlockWrite
.f17f	20 2e b4	jsr $b42e			jsr ThrowA
.f182	60		rts		+		rts
.f183					s_kernel_id:
>f183	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 remix default kernel for py65mon (31 May 2024)", AscLF, 0
>f18b	74 68 20 32 20 72 65 6d 69 78 20 64 65 66 61 75
>f19b	6c 74 20 6b 65 72 6e 65 6c 20 66 6f 72 20 70 79
>f1ab	36 35 6d 6f 6e 20 28 33 31 20 4d 61 79 20 32 30
>f1bb	32 34 29 0a 00
>fffa	00 f1				.word v_nmi
>fffc	00 f1				.word v_reset
>fffe	00 f1				.word v_irq

;******  End of listing
