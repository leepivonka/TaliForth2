
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output TaliForth-py65mon.bin platform/platform-py65mon.asm
; Fri Jul 05 17:38:45 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

=$0100					RStack = $0100 ; begin of 6502 Return stack
=$ff					rsp0      = $ff		; initial Return Stack Pointer (6502 stack)
=$8000					cp_end = $8000 ; LastRAM byte available for Data
=84					PadOffset = 84	; offset from CP to PAD (holds number strings)
=79					MAX_LINE_LENGTH  = 79      ; output line size
=20					DDim = 20	; # of cells in data stack
=10					FDim = 10	; # of entries in floating-point stack
=8					DoStkDim = 8	; # of entries in Do stack
=["lf"]					TALI_OPTION_CR_EOL := [ "lf" ]
=$ff					bsize     = $ff		; size of input/output buffers
>0200					buffer0: .fill bsize	; input buffer

;******  Processing file: platform/../taliforth.asm

=					TALI_OPTIONAL_WORDS := ["fp","fpe", "fpieee","fptrancendentals", "fphyperbolic", "ed", "editor", "ramdrive", "block", "environment?", "assembler", "wordlist" ]
=-1					err_Abort		= -1
=-2					err_AbortQuote		= -2
=-3					err_Stack_Overflow	= -3
=-4					err_Stack_Underflow	= -4
=-5					err_Return_Stack_Overflow = -5
=-6					err_Return_Stack_Underflow = -6
=-7					err_DoLoop_TooDeep	= -7	; do-loops nested too deeply during execution
=-8					err_Dictionary_Overflow	= -8
=-9					err_InvalidMemoryAddr	= -9	; invalid memory address
=-10					err_DivideBy0		= -10	; division by zero
=-11					err_OutOfRange		= -11	; result out of range
=-12					err_ArgTypeMismatch	= -12	; argument type mismatch
=-13					err_UndefinedWord	= -13
=-14					err_CompileOnly		= -14	; interpreting a compile-only word
=-15					err_Forget		= -15	; invalid FORGET
=-16					err_EmptyName		= -16	; attempt to use zero-length string as a name
=-17					err_PicStringOverflow	= -17	; pictured numeric output string overflow
=-18					err_ParsedStringOverflow = -18	; parsed string overflow
=-19					err_NameTooLong		= -19	; definition name too long
=-20					err_WriteToRO		= -20	; write to a read-only location
=-21					err_Unsupported		= -21	; unsupported operation  (e.g., AT-XY on a too-dumb terminal)
=-22					err_ControlMismatch	= -22	; control structure mismatch
=-23					err_AddrAlignment	= -23	; address alignment exception
=-24					err_InvalidNumericArg	= -24	; invalid numeric argument
=-25					err_ReturnStackImbalance = -25	; return stack imbalance
=-26					err_LoopParmUnavailable = -26	; loop parameters unavailable
=-27					err_InvalidRecursion	= -27	; invalid recursion
=-28					err_UserInterrupt	= -28	; user interrupt
=-29					err_CompilerNesting	= -29	; compiler nesting
=-30					err_Obsolete		= -30	; obsolescent feature
=-31					err_NoBody		= -31	; >BODY used on non-CREATEd definition
=-32					err_InvalidName		= -32	; invalid name argument (e.g., TO name)
=-33					err_BlockRead		= -33	; block read exception
=-34					err_BlockWrite		= -34	; block write exception
=-35					err_InvalidBlock	= -35	; invalid block number
=-36					err_InvalidFilePosition = -36	; invalid file position
=-37					err_FileIO		= -37	; file I/O exception
=-38					err_FileMissing		= -38	; non-existent file
=-39					err_EndOfFile		= -39	; unexpected end of file
=-40					err_InvalidBase		= -40	; invalid BASE for floating point conversion
=-41					err_LossOfPrecision	= -41	; loss of precision
=-42					err_FPDivideBy0		= -42	; floating-point divide by zero
=-43					err_FPOutOfRange	= -43	; floating-point result out of range
=-44					err_FPStackOverflow	= -44	; floating-point stack overflow
=-45					err_FPStackUnderflow	= -45	; floating-point stack underflow
=-46					err_FPInvalidArg	= -46	; floating-point invalid argument
=-47					err_CompileWordsDeleted = -47	; compilation word list deleted
=-48					err_PostponeInvalid	= -48	; invalid POSTPONE
=-49					err_SearchOrderOverflow = -49	; search-order overflow
=-50					err_SearchOrderUnderflow = -50	; search-order underflow
=-51					err_CompileWordlistChanged = -51 ; compilation word list changed
=-52					err_ControlStackOverflow = -52	; control-flow stack overflow
=-53					err_ExceptionStackOverflow = -53 ; exception stack overflow
=-54					err_FPUnderflow		= -54	; floating-point underflow
=-55					err_FPFault		= -55	; floating-point unidentified fault
=-56					err_Quit		= -56	; QUIT
=-57					err_ConsoleIO		= -57	; exception in sending or receiving a character
=-58					err_BracketIf		= -58	; [IF], [ELSE], or [THEN] exception
=-59					err_Allocate		= -59	; ALLOCATE
=-60					err_Free		= -60	; FREE
=-61					err_Resize		= -61	; RESIZE
=-62					err_CloseFile		= -62	; CLOSE-FILE
=-63					err_CreateFile		= -63	; CREATE-FILE
=-64					err_DeleteFile		= -64	; DELETE-FILE
=-65					err_FilePosition	= -65	; FILE-POSITION
=-66					err_FileSize		= -66	; FILE-SIZE
=-67					err_FileStatus		= -67	; FILE-STATUS
=-68					err_FlushFile		= -68	; FLUSH-FILE
=-69					err_OpenFile		= -69	; OPEN-FILE
=-70					err_ReadFile		= -70	; READ-FILE
=-71					err_ReadLine		= -71	; READ-LINE
=-72					err_RenameFile		= -72	; RENAME-FILE
=-73					err_RepositionFile	= -73	; REPOSITION-FILE
=-74					err_ResizeFile		= -74	; RESIZE-FILE
=-75					err_WriteFile		= -75	; WRITE-FILE
=-76					err_WriteLine		= -76	; WRITE-LINE
=-77					err_MalformedXChar	= -77	; Malformed xchar
=-78					err_Substitute		= -78	; SUBSTITUTE
=-79					err_Replaces		= -79	; REPLACES
=-149					err_Refill		= -149	; Refill failed
=-150					err_Defer		= -150	; Defer not set
=-151					err_AlreadyInterpreting	= -151	; entering interpret when already interpreting
=-152					err_AlreadyCompiling	= -152	; entering compile when already compiling
=-154					err_TooManyWordlists   	= -154
.0000					zp0:
>0000					cp:	.word ?		; Compiler Pointer (see HERE)
>0002					InSrc:	.word ?		; input Source for SOURCE-ID
>0004					Cib:	.word ?		; address of current input buffer
>0006					CibLen:	.word ?		; length of current input buffer
>0008					ToIn:	.word ?		; pointer to CIB (>IN in Forth)
>000a					state:	.word ?		; STATE: -1 compile, 0 interpret
>000c					status: .word ?		; internal status flags
>000e					WorkWord: .word ?	; nt or xt of word being compiled (see status)
>0010					dp:	.word ?		; Dictionary Pointer temp
>0012					DoIndex: .word ?	; current Do index
>0014					tmp1:	.word ?		; temporary storage
>0016					tmp2:	.word ?		; temporary storage
>0018					tmp3:	.word ?		; temporary storage
>001a					tmp4:	.word ?		; temporary storage (tmpdsp)
>001c					tmp5:	.word ?		; temporary storage (tmptos)
>001e					editor1: .word ?	; temporary for editors
>0020					editor2: .word ?	; temporary for editors
>0022					editor3: .word ?	; temporary for editors
>0024					DStack:	.fill DDim*2	; data stack
=40					DStack0 = *-DStack	;   initial Data Stack index value
.8000					Cold_zp_table:
>8000	66 0b					.word cp0		; cp
>8002	00 00					.word 0			; insrc (SOURCE-ID is 0 for keyboard)
>8004	00 02					.word buffer0		; cib
>8006	00 00					.word 0			; ciblen
>8008	00 00					.word 0			; toin
>800a	00 00					.word 0			; state (0 = interpret)
>800c	00 00					.word 0			; status
=14					Cold_zp_table_length = *-Cold_zp_table
.02ff					User0:
>02ff					PrecisionV: .byte ?	; # of decimal places for FP print
>0300					base:	.word ?		; number radix, default decimal
>0302					nc_limit: .word ?	; limit for Native Compile size
>0304					uf_strip: .word ?	; flag to strip underflow detection code
>0306					output:	.word ?		; vector for EMIT
>0308					input:	.word ?		; vector for KEY
>030a					HaveKey: .word ?	; vector for KEY?
>030c					BlkV:	.word ?		; BLK
>030e					ScrV:	.word ?		; SCR
>0310					CurrentV: .byte ?	; CURRENT (byte) (Compilation wordlist)
>0311					Num_WordlistsV: .byte ?	; #WORDLISTS (byte)
=12					max_wordlists = 12	; Maximum number of wordlists supported
>0312					WordlistsV: .fill 2*max_wordlists	; WORDLISTS (cells)
>032a					Num_OrderV: .byte ?	; #ORDER (byte)
>032b					Search_OrderV: .fill 9	; SEARCH-ORDER (bytes)
.0334					MarkEnd:
>0334					ToHold:	.byte ?		; pad buffer index for formatted output
>0335					RndState: .dword ?	; random # state
=0					wid_Forth = 0
=1					wid_Editor = 1
=2					wid_Assembler = 2
=3					wid_Root = 3
.800e					Cold_user_table:
>800e	08					.byte 8			; PrecisionV
>800f	0a 00					.word 10		; base
>8011	08 00					.word 8			; nc-limit
>8013	00 00					.word 0			; uf_strip (off by default)
>8015	21 f1					.word kernel_putc	; output
>8017	14 f1					.word kernel_getc	; input
>8019	1d f1					.word kernel_havekey	; havekey
>801b	00 00					.word 0				; BLK
>801d	00 00					.word 0				; SCR
>801f	00					.byte 0				; CURRENT = FORTH-WORDLIST
>8020	04					.byte 4				; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>8021	23 cf					.word forth_dictionary_start	; FORTH-WORDLIST
>8023	61 d9					.word editor_dictionary_start	; EDITOR-WORDLIST
>8025	6b d7					.word assembler_dictionary_start ; ASSEMBLER-WORDLIST
>8027	64 cf					.word root_dictionary_start	; ROOT-WORDLIST
>8029	00 00 00 00 00 00 00 00			.word 0,0,0,0,0,0,0,0		; User wordlists
>8031	00 00 00 00 00 00 00 00
>8039	02					.byte 2				; #ORDER
>803a	00 02 00 00 00 00 00 00			.byte wid_Forth,wid_Assembler,0,0,0,0,0,0,0	; search-order
>8042	00
=53					Cold_user_table_length = *-Cold_user_table
=$03					AscCC   = $03	; break (CTRL-c)
=$07					AscBELL = $07	; bell sound
=$08					AscBS   = $08	; backspace
=$09					AscHT	= $09	; tab
=$0a					AscLF   = $0a	; line feed
=$0b					AScVT	= $0b	; vertical tab
=$0c					AscFF	= $0c	; form feed
=$0d					AscCR   = $0d	; carriage return
=$0e					AscCN   = $0e	; CTRL-n (used to recall next input history)
=$10					AscCP   = $10	; CTRL-p (used to recall previous input history)
=$1b					AscESC  = $1b	; escape
=$20					AscSP   = $20	; space
=$22					AscDQuote = $22	; double quote
=$5c					AscBackslash = $5c ; backslash
=$7f					AscDEL  = $7f	; delete (CTRL-h)
>0000							.fill $80	; |  unused space |   To align the last char of name.
=127					wh_NameLastChar	= *-1		; |		  |   Last char of name.
>0080					wh_HashNameLen:			    .byte ?	; |
=$e0					wh_HNL_HashMask		=	    %11100000	; |      lo 3 bits of last char of name
=$1f					wh_HNL_NameLengthMask	=	    %00011111	; |      length of name
>0081					wh_Flags:			    .byte ?	; |  flag bits
=$01					FP	=			    %00000001	; |	Far previous NT (two byte pointer rather than one byte offset)
=$02					DB	=			    %00000010	; |	Disjoint body (two byte pointer rather than adjoining body code)
=$04					CO	=			    %00000100	; |	Compile Only
=$08					IM	=			    %00001000	; |     Immediate Word
=$10					NN	=			    %00010000	; |	    | 1 | 0 |  NN : Word can only be called by JSR (never native)
=$20					AN	=			    %00100000  	; |	    | 0 | 1 |  AN : Word can only be inlined (always native)
=$30					ST	=			    %00110000	; |	    | 1 | 1 |  ST : Normal word with return stack juggling that
=3					wh_HeaderExtendMask =		     FP+DB	; |	of the header length directly by adding 4 to `flags & %00000011`.
=$40					UF	=			    %01000000   ; |     strippable underflow
>0082					wh_CodeLength:			   .byte ?	; |  Code length  |   Code length for native compile, max 255
.0083					wh_LinkNt:
=0					WordFlags .var 0 ; initialize for macro
=0					XtPtr1  .var 0  ; initialize for macro
=0					WordListLink .var 0	 ; start of FORTH wordlist
>8043	43 6f 6c 64			Name0:	.text "Cold"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=32711					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8047	84					.byte (("Cold"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=32711					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>8048	11					.byte WordFlags	;wh_Flags
>8049	03					.byte 3	;wh_CodeLength
>804a	00 00					  .word WordListLink
=$804c					XtPtr1 ::= *
=32711					WordListLink ::= Nt0 ; remember the nt of this word for later
.804c					Cold:
.804c	d8		cld				cld
.804d	a2 ff		ldx #$ff			ldx #rsp0		; Initialize 6502 stack (Return Stack)
.804f	9a		txs				txs
.8050	a2 0d		ldx #$0d			ldx #Cold_zp_table_length-1 ; Initialize important zero page variables from ROM
.8052	bd 00 80	lda $8000,x	-		lda Cold_zp_table,x	;   We can use X here
.8055	95 00		sta $00,x			sta zp0,x		;   because Tali hasn't set up the param stack yet.
.8057	ca		dex				dex
.8058	10 f8		bpl $8052			bpl -
.805a	a0 34		ldy #$34			ldy #Cold_user_table_length-1	; Initialize the user variables.
.805c	b9 0e 80	lda $800e,y	-		lda Cold_user_table,y
.805f	99 ff 02	sta $02ff,y			sta User0,y
.8062	88		dey				dey
.8063	10 f7		bpl $805c			bpl -
.8065	20 f5 b4	jsr $b4f5			jsr Empty_Stack		; Clear Data Stack. This is repeated in ABORT, but this way we
.8068	20 fc a1	jsr $a1fc			jsr BlockInit
.806b	20 7c ab	jsr $ab7c			jsr CR
.806e	a9 9c		lda #$9c			lda #<forth_words_start		; push start address
.8070	a0 80		ldy #$80			ldy #>forth_words_start
.8072	20 c1 b7	jsr $b7c1			jsr PushYA
.8075	a9 d2		lda #$d2			lda #<forth_words_len		; push length
.8077	a0 00		ldy #$00			ldy #>forth_words_len
.8079	20 c1 b7	jsr $b7c1			jsr PushYA
.807c	20 11 b0	jsr $b011			jsr Evaluate
.807f	a9 00		lda #$00			lda #0
.8081	8d 66 07	sta $0766			sta hist_buff
.8084	8d e6 07	sta $07e6			sta hist_buff+$80
.8087	8d 66 08	sta $0866			sta hist_buff+$100
.808a	8d e6 08	sta $08e6			sta hist_buff+$180
.808d	8d 66 09	sta $0966			sta hist_buff+$200
.8090	8d e6 09	sta $09e6			sta hist_buff+$280
.8093	8d 66 0a	sta $0a66			sta hist_buff+$300
.8096	8d e6 0a	sta $0ae6			sta hist_buff+$380
.8099	4c a7 b4	jmp $b4a7			jmp Abort_Core2	;Quit
=80					CodeLen	.var *-XtPtr1
=$809c					Here1 = *	; remember here
>8049	50					.byte CodeLen	;patch wh_CodeLength
>809c	20 63 72 20 2e 28 20 54		forth_words_start: .binary "forth_words.asc" ; High-level Forth words, see forth_code/README.md
>80a4	61 6c 69 20 46 6f 72 74 68 20 32 20 72 65 6d 69
>80b4	78 20 66 6f 72 20 74 68 65 20 36 35 30 32 29 20
>80c4	63 72 20 2e 28 20 56 65 72 73 69 6f 6e 20 33 31
>80d4	2e 20 4d 61 79 20 32 30 32 34 20 29 20 63 72 20
>80e4	2e 28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31
>80f4	34 2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53
>8104	74 65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f
>8114	6c 77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c
>8124	69 20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20
>8134	77 69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20
>8144	4e 4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20
>8154	2e 28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f
>8164	20 65 78 69 74 29 20 63 72 20
=210					forth_words_len = *-forth_words_start
>816e					user_words_start: .binary "user_words.asc" ; User-defined Forth words, see forth_code/README.md
=0					user_words_len = *-user_words_start
>816e	4e 6f 4f 70			Name0:	.text "NoOp"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33010					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8172	04					.byte (("NoOp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=299					LinkDisplacement = Nt0-WordListLink
=1						  WordFlags ::= WordFlags | FP
>8173	01					.byte WordFlags	;wh_Flags
>8174	03					.byte 3	;wh_CodeLength
>8175	c7 7f					  .word WordListLink
=$8177					XtPtr1 ::= *
=33010					WordListLink ::= Nt0 ; remember the nt of this word for later
.8177	ea		nop				nop
=1					CodeLen	.var *-XtPtr1
=$8178					Here1 = *	; remember here
>8174	01					.byte CodeLen	;patch wh_CodeLength
.8178	60		rts				rts
>8179	43 43 40			Name0:	.text "CC@"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=33020					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>817c	03					.byte (("CC@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
=$12						  WordFlags ::= WordFlags | DB
>817d	12					.byte WordFlags	;wh_Flags
>817e	03					.byte 3	;wh_CodeLength
>817f	0a					  .byte LinkDisplacement	; offset to previous nt
>8180	26 f1					  .word platform_CCAT		; pointer to xt
=0					XtPtr1 ::= 0
=33020					WordListLink ::= Nt0 ; remember the nt of this word for later
>8182	42 79 65			Name0:	.text "Bye"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=33029					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8185	a3					.byte (("Bye"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
=$12						  WordFlags ::= WordFlags | DB
>8186	12					.byte WordFlags	;wh_Flags
>8187	03					.byte 3	;wh_CodeLength
>8188	09					  .byte LinkDisplacement	; offset to previous nt
>8189	25 f1					  .word platform_bye		; pointer to xt
=0					XtPtr1 ::= 0
=33029					WordListLink ::= Nt0 ; remember the nt of this word for later
>818b	54 79 70 65 53 79 6d 62		Name0:	.text "TypeSymbol"	;  name of word as a string, ending at wh_NameLastChar
>8193	6f 6c
=10					NameLength = *-Name0
=33045					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8195	8a					.byte (("TypeSymbol"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8196	10					.byte WordFlags	;wh_Flags
>8197	03					.byte 3	;wh_CodeLength
>8198	10					  .byte LinkDisplacement	; offset to previous nt
=$8199					XtPtr1 ::= *
=33045					WordListLink ::= Nt0 ; remember the nt of this word for later
.8199	20 10 b8	jsr $b810	TypeSymbol:	jsr Two
.819c	20 ab c4	jsr $c4ab			jsr Spaces
.819f	a9 28		lda #$28			lda #'('
.81a1	20 d8 cd	jsr $cdd8			jsr Emit_A
.81a4	20 e4 cd	jsr $cde4			jsr Space
.81a7	20 6e cf	jsr $cf6e			jsr Dup
.81aa	a9 24		lda #$24			lda #'$'
.81ac	20 d8 cd	jsr $cdd8			jsr Emit_A
.81af	20 1c a9	jsr $a91c			jsr Dot_Hex
.81b2	20 e4 cd	jsr $cde4			jsr Space
.81b5	20 dc 81	jsr $81dc			jsr DictSearchXt	; ( addr_end addr operand offset nt )
.81b8	20 fe bd	jsr $bdfe			jsr Name_To_String	; Change nt into the name
.81bb	20 f0 cd	jsr $cdf0			jsr Type		; print it.
.81be	20 e4 cd	jsr $cde4			jsr Space
.81c1	b5 24		lda $24,x			lda DStack+0,x		; if non-zero offset
.81c3	15 25		ora $25,x			ora DStack+1,x
.81c5	f0 0b		beq $81d2			beq +
.81c7	a9 2b		lda #$2b			lda #'+'		;   print offset
.81c9	20 d8 cd	jsr $cdd8			jsr Emit_A
.81cc	20 6e cf	jsr $cf6e			jsr Dup
.81cf	20 18 cc	jsr $cc18			jsr U_Dot
.81d2	e8		inx		+		inx
.81d3	e8		inx				inx
.81d4	a9 29		lda #$29			lda #')'
.81d6	20 d8 cd	jsr $cdd8			jsr Emit_A
.81d9	4c e4 cd	jmp $cde4			jmp Space
=67					CodeLen	.var *-XtPtr1
=$81dc					Here1 = *	; remember here
>8197	43					.byte CodeLen	;patch wh_CodeLength
.81dc					DictSearchXt:
.81dc	ca		dex				dex
.81dd	ca		dex				dex
.81de	20 47 cf	jsr $cf47			jsr Over
.81e1	a9 ff		lda #$ff			lda #$ff		; init best offset
.81e3	95 29		sta $29,x			sta DStack+5,x		; ( offset nt xt )
.81e5	a9 fe		lda #$fe			lda #$100-2		; for each wordlist
.81e7	48		pha				pha
.81e8	68		pla		_ListNext:	pla
.81e9	18		clc				clc
.81ea	69 02		adc #$02			adc #2			; to next wordlist
.81ec	c9 18		cmp #$18			cmp #max_wordlists*2
.81ee	b0 10		bcs $8200			bcs _ListDone
.81f0	48		pha				pha
.81f1	a8		tay				tay
.81f2	b9 12 03	lda $0312,y			lda WordlistsV+0,y	; Get the DP for that wordlist.
.81f5	85 14		sta $14				sta tmp1+0
.81f7	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.81fa	85 15		sta $15				sta tmp1+1
.81fc	d0 0a		bne $8208			bne _WordTest
.81fe	f0 e8		beq $81e8			beq _ListNext		;   empty list
.8200	e8		inx		_ListDone:	inx			; Drop pattern xt
.8201	e8		inx				inx			; ( offset nt )
.8202	60		rts				rts
.8203	20 9b 82	jsr $829b	_WordNext:	jsr LinkNext		; tmp1= next nt in list
.8206	f0 e0		beq $81e8			beq _ListNext		; end of Dictionary?
.8208	20 c2 bd	jsr $bdc2	_WordTest:	jsr NameToIntTmp	; tmp2 = xt of this word
.820b	38		sec				sec			; tmp3 = xt offset for this word
.820c	b5 24		lda $24,x			lda DStack+0,x
.820e	e5 16		sbc $16				sbc tmp2+0
.8210	85 18		sta $18				sta tmp3+0
.8212	b5 25		lda $25,x			lda DStack+1,x
.8214	e5 17		sbc $17				sbc tmp2+1
.8216	85 19		sta $19				sta tmp3+1
.8218	20 80 82	jsr $8280			jsr _test
.821b	a0 00		ldy #$00			ldy #0			; is this word a constant?
.821d	b1 16		lda ($16),y			lda (tmp2),y
.821f	c9 a0		cmp #$a0			cmp #$a0
.8221	f0 2a		beq $824d			beq _PushYA
.8223	c9 a9		cmp #$a9			cmp #$a9
.8225	f0 02		beq $8229			beq _PushZA
.8227	d0 da		bne $8203			bne _WordNext
.8229	c8		iny		_PushZA:	iny			; get lda # operand
.822a	b5 24		lda $24,x			lda DStack+0,x
.822c	f1 16		sbc ($16),y			sbc (tmp2),y
.822e	85 18		sta $18				sta tmp3+0
.8230	b5 25		lda $25,x			lda DStack+1,x
.8232	e9 00		sbc #$00			sbc #0
.8234	85 19		sta $19				sta tmp3+1
.8236	c8		iny				iny			; check jmp opcode
.8237	b1 16		lda ($16),y			lda (tmp2),y
.8239	c9 4c		cmp #$4c			cmp #$4c
.823b	d0 c6		bne $8203			bne _WordNext
.823d	c8		iny				iny			; check jmp operand lo
.823e	b1 16		lda ($16),y			lda (tmp2),y
.8240	c9 f0		cmp #$f0			cmp #<PushZA
.8242	d0 bf		bne $8203			bne _WordNext
.8244	c8		iny				iny			; check jmp operand hi
.8245	b1 16		lda ($16),y			lda (tmp2),y
.8247	c9 b7		cmp #$b7			cmp #>PushZA
.8249	f0 2f		beq $827a			beq _KTest
.824b	d0 b6		bne $8203			bne _WordNext
.824d	a0 02		ldy #$02	_PushYA:	ldy #2			; check LDA # opcode
.824f	b1 16		lda ($16),y			lda (tmp2),y
.8251	c9 a9		cmp #$a9			cmp #$a9
.8253	d0 ae		bne $8203			bne _WordNext
.8255	c8		iny				iny			; get lda # operand
.8256	b5 24		lda $24,x			lda DStack+0,x
.8258	f1 16		sbc ($16),y			sbc (tmp2),y
.825a	85 18		sta $18				sta tmp3+0
.825c	a0 01		ldy #$01			ldy #1			; get LDY # operand
.825e	b5 25		lda $25,x			lda DStack+1,x
.8260	f1 16		sbc ($16),y			sbc (tmp2),y
.8262	85 19		sta $19				sta tmp3+1
.8264	a0 04		ldy #$04			ldy #4			; check JMP opcode
.8266	b1 16		lda ($16),y			lda (tmp2),y
.8268	c9 4c		cmp #$4c			cmp #$4c
.826a	d0 97		bne $8203			bne _WordNext
.826c	c8		iny				iny			; check JMP operand lo
.826d	b1 16		lda ($16),y			lda (tmp2),y
.826f	c9 c1		cmp #$c1			cmp #<PushYA
.8271	d0 0a		bne $827d			bne _WordNext3
.8273	c8		iny				iny			; check JMP operand hi
.8274	b1 16		lda ($16),y			lda (tmp2),y
.8276	c9 b7		cmp #$b7			cmp #>PushYA
.8278	d0 03		bne $827d			bne _WordNext3
.827a	20 80 82	jsr $8280	_KTest:		jsr _test
.827d	4c 03 82	jmp $8203	_WordNext3:	jmp _WordNext
.8280					_test:
.8280	a5 18		lda $18				lda tmp3+0		; this word have smaller offset?
.8282	d5 28		cmp $28,x			cmp DStack+4,x
.8284	a5 19		lda $19				lda tmp3+1
.8286	f5 29		sbc $29,x			sbc DStack+5,x
.8288	b0 10		bcs $829a			bcs _trts
.828a	a5 18		lda $18				lda tmp3+0		;   save this better offset
.828c	a4 19		ldy $19				ldy tmp3+1
.828e	95 28		sta $28,x			sta DStack+4,x
.8290	94 29		sty $29,x			sty DStack+5,x
.8292	a5 14		lda $14				lda tmp1+0		;   save this better nt
.8294	a4 15		ldy $15				ldy tmp1+1
.8296	95 26		sta $26,x			sta DStack+2,x
.8298	94 27		sty $27,x			sty DStack+3,x
.829a	60		rts		_trts:		rts
.829b					LinkNext:
.829b	a0 81		ldy #$81			ldy #wh_Flags
.829d	b1 14		lda ($14),y			lda (tmp1),y
.829f	29 01		and #$01			and #FP
.82a1	f0 0e		beq $82b1			beq _LinkShort
.82a3	a0 84		ldy #$84	_LinkLong:	ldy #wh_LinkNt+1	; tmp1 = tmp1->LinkNt (ptr)
.82a5	b1 14		lda ($14),y			lda (tmp1),y
.82a7	48		pha				pha
.82a8	88		dey				dey
.82a9	b1 14		lda ($14),y			lda (tmp1),y
.82ab	85 14		sta $14				sta tmp1+0
.82ad	68		pla				pla
.82ae	85 15		sta $15				sta tmp1+1
.82b0	60		rts				rts
.82b1	a0 83		ldy #$83	_LinkShort:	ldy #wh_LinkNt		; tmp1 -= tmp1->LinkNt byte offset
.82b3	38		sec				sec
.82b4	a5 14		lda $14				lda tmp1+0
.82b6	f1 14		sbc ($14),y			sbc (tmp1),y
.82b8	85 14		sta $14				sta tmp1+0
.82ba	a5 15		lda $15				lda tmp1+1
.82bc	e9 00		sbc #$00			sbc #0
.82be	85 15		sta $15				sta tmp1+1
.82c0	60		rts				rts
>82c1	44 53 74 61 63 6b		Name0:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33351					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82c7	66					.byte (("DStack"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=306					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>82c8	11					.byte WordFlags	;wh_Flags
>82c9	03					.byte 3	;wh_CodeLength
>82ca	15 81					  .word WordListLink
=$82cc					XtPtr1 ::= *
=33351					WordListLink ::= Nt0 ; remember the nt of this word for later
.82cc	a9 24		lda #$24			lda #DStack
.82ce	4c f0 b7	jmp $b7f0			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$82d1					Here1 = *	; remember here
>82c9	05					.byte CodeLen	;patch wh_CodeLength
>82d1	52 53 74 61 63 6b		Name0:	.text "RStack"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33367					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82d7	66					.byte (("RStack"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>82d8	10					.byte WordFlags	;wh_Flags
>82d9	03					.byte 3	;wh_CodeLength
>82da	10					  .byte LinkDisplacement	; offset to previous nt
=$82db					XtPtr1 ::= *
=33367					WordListLink ::= Nt0 ; remember the nt of this word for later
.82db	a0 01		ldy #$01			ldy #>RStack
.82dd	a9 00		lda #$00			lda #<RStack
.82df	4c c1 b7	jmp $b7c1			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$82e2					Here1 = *	; remember here
>82d9	07					.byte CodeLen	;patch wh_CodeLength
>82e2	52 6e 64 53 74 61 74 65		Name0:	.text "RndState"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=33386					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82ea	a8					.byte (("RndState"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>82eb	10					.byte WordFlags	;wh_Flags
>82ec	03					.byte 3	;wh_CodeLength
>82ed	13					  .byte LinkDisplacement	; offset to previous nt
=$82ee					XtPtr1 ::= *
=33386					WordListLink ::= Nt0 ; remember the nt of this word for later
.82ee	a0 03		ldy #$03			ldy #>RndState
.82f0	a9 35		lda #$35			lda #<RndState
.82f2	4c c1 b7	jmp $b7c1			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$82f5					Here1 = *	; remember here
>82ec	07					.byte CodeLen	;patch wh_CodeLength
>82f5	52 61 6e 64			Name0:	.text "Rand"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33401					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82f9	84					.byte (("Rand"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>82fa	00					.byte WordFlags	;wh_Flags
>82fb	03					.byte 3	;wh_CodeLength
>82fc	0f					  .byte LinkDisplacement	; offset to previous nt
=$82fd					XtPtr1 ::= *
=33401					WordListLink ::= Nt0 ; remember the nt of this word for later
.82fd					Rand:
.82fd	4e 36 03	lsr $0336			lsr RndState+1
.8300	6e 35 03	ror $0335			ror RndState+0
.8303	6e 38 03	ror $0338			ror RndState+3
.8306	6e 37 03	ror $0337			ror RndState+2
.8309	90 10		bcc $831b			bcc _19			;  IfCs,
.830b	ad 36 03	lda $0336			lda RndState+1
.830e	49 d0		eor #$d0			eor #$d0
.8310	8d 36 03	sta $0336			sta RndState+1
.8313	ad 37 03	lda $0337			lda RndState+2
.8316	49 01		eor #$01			eor #$01
.8318	8d 37 03	sta $0337			sta RndState+2
.831b					_19:
.831b	ad 37 03	lda $0337			lda RndState+2
.831e	ac 38 03	ldy $0338			ldy RndState+3
=36					CodeLen	.var *-XtPtr1
=$8321					Here1 = *	; remember here
>82fb	24					.byte CodeLen	;patch wh_CodeLength
.8321	60		rts				rts
>8322	52 61 6e 64 4d			Name0:	.text "RandM"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33447					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8327	a5					.byte (("RandM"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=46					LinkDisplacement = Nt0-WordListLink
>8328	10					.byte WordFlags	;wh_Flags
>8329	03					.byte 3	;wh_CodeLength
>832a	2e					  .byte LinkDisplacement	; offset to previous nt
=$832b					XtPtr1 ::= *
=33447					WordListLink ::= Nt0 ; remember the nt of this word for later
.832b	20 6e cf	jsr $cf6e	RandM:		jsr Dup		; ( umod umod )
.832e	20 fd 82	jsr $82fd			jsr Rand
.8331	4a		lsr a				lsr a		; make positive
.8332	95 27		sta $27,x			sta DStack+3,x
.8334	94 26		sty $26,x			sty DStack+2,x	; ( rand umod )
.8336	4c 87 af	jmp $af87			jmp Mod
=14					CodeLen	.var *-XtPtr1
=$8339					Here1 = *	; remember here
>8329	0e					.byte CodeLen	;patch wh_CodeLength
>004c					FIndex:	.byte ?		; floating-point stack index. empty=FDim, full=0
>004d					FSExp:   .fill FDim	; FP stack exponent        array
>0057					FSMant0: .fill FDim	; FP stack mantissa MSByte array
>0061					FSMant1: .fill FDim	; FP stack mantissa 2nd    array
>006b					FSMant2: .fill FDim	; FP stack mantissa 3rd    array
>0075					FSMant3: .fill FDim	; FP stack mantissa 4th    array
>8339	46 49 6e 64 65 78		Name0:	.text "FIndex"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33471					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>833f	06					.byte (("FIndex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>8340	10					.byte WordFlags	;wh_Flags
>8341	03					.byte 3	;wh_CodeLength
>8342	18					  .byte LinkDisplacement	; offset to previous nt
=$8343					XtPtr1 ::= *
=33471					WordListLink ::= Nt0 ; remember the nt of this word for later
.8343	a9 4c		lda #$4c			lda #FIndex
.8345	4c f0 b7	jmp $b7f0			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$8348					Here1 = *	; remember here
>8341	05					.byte CodeLen	;patch wh_CodeLength
>8348	46 44 69 6d			Name0:	.text "FDim"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33484					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>834c	a4					.byte (("FDim"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>834d	10					.byte WordFlags	;wh_Flags
>834e	03					.byte 3	;wh_CodeLength
>834f	0d					  .byte LinkDisplacement	; offset to previous nt
=$8350					XtPtr1 ::= *
=33484					WordListLink ::= Nt0 ; remember the nt of this word for later
.8350	a9 0a		lda #$0a			lda #FDim
.8352	4c f0 b7	jmp $b7f0			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$8355					Here1 = *	; remember here
>834e	05					.byte CodeLen	;patch wh_CodeLength
>8355	46 53 45 78 70			Name0:	.text "FSExp"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33498					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>835a	05					.byte (("FSExp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>835b	10					.byte WordFlags	;wh_Flags
>835c	03					.byte 3	;wh_CodeLength
>835d	0e					  .byte LinkDisplacement	; offset to previous nt
=$835e					XtPtr1 ::= *
=33498					WordListLink ::= Nt0 ; remember the nt of this word for later
.835e	a9 4d		lda #$4d			lda #FSExp
.8360	4c f0 b7	jmp $b7f0			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$8363					Here1 = *	; remember here
>835c	05					.byte CodeLen	;patch wh_CodeLength
>8363	46 53 4d 61 6e 74 30		Name0:	.text "FSMant0"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=33514					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>836a	07					.byte (("FSMant0"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>836b	10					.byte WordFlags	;wh_Flags
>836c	03					.byte 3	;wh_CodeLength
>836d	10					  .byte LinkDisplacement	; offset to previous nt
=$836e					XtPtr1 ::= *
=33514					WordListLink ::= Nt0 ; remember the nt of this word for later
.836e	a9 57		lda #$57			lda #FSMant0
.8370	4c f0 b7	jmp $b7f0			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$8373					Here1 = *	; remember here
>836c	05					.byte CodeLen	;patch wh_CodeLength
>8373	46 53 4d 61 6e 74 31		Name0:	.text "FSMant1"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=33530					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>837a	27					.byte (("FSMant1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>837b	10					.byte WordFlags	;wh_Flags
>837c	03					.byte 3	;wh_CodeLength
>837d	10					  .byte LinkDisplacement	; offset to previous nt
=$837e					XtPtr1 ::= *
=33530					WordListLink ::= Nt0 ; remember the nt of this word for later
.837e	a9 61		lda #$61			lda #FSMant1
.8380	4c f0 b7	jmp $b7f0			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$8383					Here1 = *	; remember here
>837c	05					.byte CodeLen	;patch wh_CodeLength
>8383	46 53 4d 61 6e 74 32		Name0:	.text "FSMant2"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=33546					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>838a	47					.byte (("FSMant2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>838b	10					.byte WordFlags	;wh_Flags
>838c	03					.byte 3	;wh_CodeLength
>838d	10					  .byte LinkDisplacement	; offset to previous nt
=$838e					XtPtr1 ::= *
=33546					WordListLink ::= Nt0 ; remember the nt of this word for later
.838e	a9 6b		lda #$6b			lda #FSMant2
.8390	4c f0 b7	jmp $b7f0			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$8393					Here1 = *	; remember here
>838c	05					.byte CodeLen	;patch wh_CodeLength
>8393	46 53 4d 61 6e 74 33		Name0:	.text "FSMant3"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=33562					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>839a	67					.byte (("FSMant3"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>839b	10					.byte WordFlags	;wh_Flags
>839c	03					.byte 3	;wh_CodeLength
>839d	10					  .byte LinkDisplacement	; offset to previous nt
=$839e					XtPtr1 ::= *
=33562					WordListLink ::= Nt0 ; remember the nt of this word for later
.839e	a9 75		lda #$75			lda #FSMant3
.83a0	4c f0 b7	jmp $b7f0			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$83a3					Here1 = *	; remember here
>839c	05					.byte CodeLen	;patch wh_CodeLength
>83a3	46 6c 6f 61 74 2b		Name0:	.text "Float+"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33577					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83a9	66					.byte (("Float+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>83aa	10					.byte WordFlags	;wh_Flags
>83ab	03					.byte 3	;wh_CodeLength
>83ac	0f					  .byte LinkDisplacement	; offset to previous nt
=$83ad					XtPtr1 ::= *
=33577					WordListLink ::= Nt0 ; remember the nt of this word for later
.83ad	a9 05		lda #$05	FloatPlus:	lda #5
.83af	4c 24 ca	jmp $ca24			jmp Plus_A
=5					CodeLen	.var *-XtPtr1
=$83b2					Here1 = *	; remember here
>83ab	05					.byte CodeLen	;patch wh_CodeLength
>83b2	46 6c 6f 61 74 73		Name0:	.text "Floats"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33592					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83b8	66					.byte (("Floats"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>83b9	10					.byte WordFlags	;wh_Flags
>83ba	03					.byte 3	;wh_CodeLength
>83bb	0f					  .byte LinkDisplacement	; offset to previous nt
=$83bc					XtPtr1 ::= *
=33592					WordListLink ::= Nt0 ; remember the nt of this word for later
.83bc	a9 05		lda #$05	Floats:		lda #5
.83be	20 f0 b7	jsr $b7f0			jsr PushZA
.83c1	4c 9d ae	jmp $ae9d			jmp Star
=8					CodeLen	.var *-XtPtr1
=$83c4					Here1 = *	; remember here
>83ba	08					.byte CodeLen	;patch wh_CodeLength
>83c4	46 41 6c 69 67 6e		Name0:	.text "FAlign"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33610					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83ca	c6					.byte (("FAlign"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>83cb	00					.byte WordFlags	;wh_Flags
>83cc	03					.byte 3	;wh_CodeLength
>83cd	12					  .byte LinkDisplacement	; offset to previous nt
=$83ce					XtPtr1 ::= *
=33610					WordListLink ::= Nt0 ; remember the nt of this word for later
.83ce					FAlign:
=0					CodeLen	.var *-XtPtr1
=$83ce					Here1 = *	; remember here
>83cc	00					.byte CodeLen	;patch wh_CodeLength
.83ce	60		rts				rts
>83cf	46 41 6c 69 67 6e 65 64		Name0:	.text "FAligned"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=33623					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83d7	88					.byte (("FAligned"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>83d8	00					.byte WordFlags	;wh_Flags
>83d9	03					.byte 3	;wh_CodeLength
>83da	0d					  .byte LinkDisplacement	; offset to previous nt
=$83db					XtPtr1 ::= *
=33623					WordListLink ::= Nt0 ; remember the nt of this word for later
.83db					FAligned:
=0					CodeLen	.var *-XtPtr1
=$83db					Here1 = *	; remember here
>83d9	00					.byte CodeLen	;patch wh_CodeLength
.83db	60		rts				rts
>83dc	48 65 78 3e 46			Name0:	.text "Hex>F"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33633					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83e1	c5					.byte (("Hex>F"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>83e2	10					.byte WordFlags	;wh_Flags
>83e3	03					.byte 3	;wh_CodeLength
>83e4	0a					  .byte LinkDisplacement	; offset to previous nt
=$83e5					XtPtr1 ::= *
=33633					WordListLink ::= Nt0 ; remember the nt of this word for later
.83e5	20 c2 84	jsr $84c2	HexToF:		jsr FAllocX		; alloc FP stack entry, X= fp stack index
.83e8	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.83ea	a4 4c		ldy $4c				ldy FIndex		; Y= FP stack index
.83ec	20 e7 b3	jsr $b3e7			jsr PopA		; pop n_exp
.83ef	99 4d 00	sta $004d,y			sta FSExp,y
.83f2	b5 25		lda $25,x			lda DStack+1,x
.83f4	99 57 00	sta $0057,y			sta FSMant0,y
.83f7	b5 24		lda $24,x			lda DStack+0,x
.83f9	99 61 00	sta $0061,y			sta FSMant1,y
.83fc	b5 27		lda $27,x			lda DStack+3,x
.83fe	99 6b 00	sta $006b,y			sta FSMant2,y
.8401	b5 26		lda $26,x			lda DStack+2,x
.8403	99 75 00	sta $0075,y			sta FSMant3,y
.8406	4c 4e c5	jmp $c54e			jmp Two_Drop
=36					CodeLen	.var *-XtPtr1
=$8409					Here1 = *	; remember here
>83e3	24					.byte CodeLen	;patch wh_CodeLength
>8409	46 3e 48 65 78			Name0:	.text "F>Hex"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33678					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>840e	05					.byte (("F>Hex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>840f	10					.byte WordFlags	;wh_Flags
>8410	03					.byte 3	;wh_CodeLength
>8411	2d					  .byte LinkDisplacement	; offset to previous nt
=$8412					XtPtr1 ::= *
=33678					WordListLink ::= Nt0 ; remember the nt of this word for later
.8412	a4 4c		ldy $4c		FToHex:		ldy FIndex	; Y= FP stack index
.8414	ca		dex				dex
.8415	ca		dex				dex
.8416	ca		dex				dex
.8417	ca		dex				dex
.8418	ca		dex				dex
.8419	ca		dex				dex
.841a	b9 57 00	lda $0057,y			lda FSMant0,y	; copy mantissa
.841d	95 27		sta $27,x			sta DStack+3,x
.841f	b9 61 00	lda $0061,y			lda FSMant1,y
.8422	95 26		sta $26,x			sta DStack+2,x
.8424	b9 6b 00	lda $006b,y			lda FSMant2,y
.8427	95 29		sta $29,x			sta DStack+5,x
.8429	b9 75 00	lda $0075,y			lda FSMant3,y
.842c	95 28		sta $28,x			sta DStack+4,x
.842e	b9 4d 00	lda $004d,y			lda FSExp,y	; copy exponent
.8431	95 24		sta $24,x			sta DStack+0,x
.8433	29 80		and #$80			and #$80	;   sign extend
.8435	f0 02		beq $8439			beq +
.8437	a9 ff		lda #$ff			lda #$ff
.8439	95 25		sta $25,x	+		sta DStack+1,x
.843b	e6 4c		inc $4c				inc FIndex	; FDrop
.843d	60		rts				rts
=44					CodeLen	.var *-XtPtr1
=$843e					Here1 = *	; remember here
>8410	2c					.byte CodeLen	;patch wh_CodeLength
>843e	46 2e 48 65 78			Name0:	.text "F.Hex"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33731					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8443	05					.byte (("F.Hex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>8444	10					.byte WordFlags	;wh_Flags
>8445	03					.byte 3	;wh_CodeLength
>8446	35					  .byte LinkDisplacement	; offset to previous nt
=$8447					XtPtr1 ::= *
=33731					WordListLink ::= Nt0 ; remember the nt of this word for later
.8447	20 12 84	jsr $8412	FDotHex:	jsr FToHex	; get parts of r
.844a	20 8e ce	jsr $ce8e			jsr Not_Rot
.844d	20 1c a9	jsr $a91c			jsr Dot_Hex	; do mantissa
.8450	20 1c a9	jsr $a91c			jsr Dot_Hex
.8453	a9 3a		lda #$3a			lda #':'
.8455	20 d8 cd	jsr $cdd8			jsr Emit_A
.8458	4c fb a8	jmp $a8fb			jmp C_Dot_Hex	; do exponent
=20					CodeLen	.var *-XtPtr1
=$845b					Here1 = *	; remember here
>8445	14					.byte CodeLen	;patch wh_CodeLength
>845b	46 43 6d 70 41			Name0:	.text "FCmpA"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33760					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8460	25					.byte (("FCmpA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>8461	10					.byte WordFlags	;wh_Flags
>8462	03					.byte 3	;wh_CodeLength
>8463	1d					  .byte LinkDisplacement	; offset to previous nt
=$8464					XtPtr1 ::= *
=33760					WordListLink ::= Nt0 ; remember the nt of this word for later
.8464	86 14		stx $14		FCmpA:		stx tmp1		; save data stack index
.8466	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.8468	b5 57		lda $57,x			lda FSMant0+0,x		; r2 mantissa = 0 ?
.846a	f0 35		beq $84a1			beq _r2Zero
.846c	b4 58		ldy $58,x			ldy FSMant0+1,x		; r1 mantissa = 0 ?
.846e	f0 2b		beq $849b			beq _r1Zero
.8470	55 58		eor $58,x			eor FSMant0+1,x		; compare mantissa sign
.8472	30 3d		bmi $84b1			bmi _MantissaSignDifferent
.8474	38		sec				sec			; compare exponent
.8475	b5 4e		lda $4e,x			lda FSExp+1,x
.8477	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8479	d0 2b		bne $84a6			bne _ExponentDifferent
.847b	98		tya				tya			; compare mantissa MSB
.847c	f5 57		sbc $57,x			sbc FSMant0+0,x		;   always same sign so can't overflow
.847e	d0 17		bne $8497			bne _13
.8480	b5 62		lda $62,x			lda FSMant1+1,x		; compare mantissa 1
.8482	f5 61		sbc $61,x			sbc FSMant1+0,x
.8484	d0 0c		bne $8492			bne _12
.8486	b5 6c		lda $6c,x			lda FSMant2+1,x		; compare mantissa 2
.8488	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.848a	d0 06		bne $8492			bne _12
.848c	b5 76		lda $76,x			lda FSMant3+1,x		; compare mantissa LSB
.848e	f5 75		sbc $75,x			sbc FSMant3+0,x
.8490	f0 05		beq $8497			beq _13
.8492	6a		ror a		_12:		ror a
.8493	49 80		eor #$80	_14:		eor #$80
.8495	09 01		ora #$01			ora #1
.8497	a6 14		ldx $14		_13:		ldx tmp1		; restore data stack index
.8499	a8		tay				tay			; set CPU flags
.849a	60		rts				rts
.849b	b5 57		lda $57,x	_r1Zero:	lda FSMant0+0,x		; return r2
.849d	d0 f4		bne $8493			bne _14
.849f	f0 f6		beq $8497			beq _13
.84a1	b5 58		lda $58,x	_r2Zero:	lda FSMant0+1,x		; return 0-r1
.84a3	4c 97 84	jmp $8497			jmp _13
.84a6					_ExponentDifferent:
.84a6	50 02		bvc $84aa			bvc +
.84a8	49 80		eor #$80			eor #$80
.84aa					+
.84aa	55 57		eor $57,x			eor FSMant0+0,x
.84ac	a6 14		ldx $14				ldx tmp1		; restore data stack index
.84ae	09 01		ora #$01			ora #1			; set CPU flags
.84b0	60		rts				rts
.84b1					_MantissaSignDifferent:
.84b1	98		tya				tya
.84b2	a6 14		ldx $14				ldx tmp1		; restore data stack index
.84b4	09 01		ora #$01			ora #1
.84b6	60		rts				rts
=83					CodeLen	.var *-XtPtr1
=$84b7					Here1 = *	; remember here
>8462	53					.byte CodeLen	;patch wh_CodeLength
>84b7	46 41 6c 6c 6f 63 58		Name0:	.text "FAllocX"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=33854					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84be	07					.byte (("FAllocX"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=94					LinkDisplacement = Nt0-WordListLink
>84bf	10					.byte WordFlags	;wh_Flags
>84c0	03					.byte 3	;wh_CodeLength
>84c1	5e					  .byte LinkDisplacement	; offset to previous nt
=$84c2					XtPtr1 ::= *
=33854					WordListLink ::= Nt0 ; remember the nt of this word for later
.84c2	86 14		stx $14		FAllocX:	stx tmp1+0	; save data stack index
.84c4	a6 4c		ldx $4c				ldx FIndex	; X= floating point stack index
.84c6	ca		dex				dex		; alloc FP stack entry
.84c7	e0 0a		cpx #$0a			cpx #FDim	; overflow or underflow?
.84c9	b0 03		bcs $84ce			bcs _err
.84cb	86 4c		stx $4c				stx FIndex
.84cd	60		rts				rts		; return X= FP stack index
.84ce	08		php		_err:		php		; save sign bit
.84cf	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.84d1	28		plp				plp		; restore sign bit
.84d2	4c 58 b4	jmp $b458			jmp Throw_FPStack
=19					CodeLen	.var *-XtPtr1
=$84d5					Here1 = *	; remember here
>84c0	13					.byte CodeLen	;patch wh_CodeLength
>84d5	46 4d 61 78			Name0:	.text "FMax"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33881					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84d9	04					.byte (("FMax"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>84da	10					.byte WordFlags	;wh_Flags
>84db	03					.byte 3	;wh_CodeLength
>84dc	1b					  .byte LinkDisplacement	; offset to previous nt
=$84dd					XtPtr1 ::= *
=33881					WordListLink ::= Nt0 ; remember the nt of this word for later
.84dd	20 64 84	jsr $8464	FMax:		jsr FCmpA
.84e0	10 2c		bpl $850e			bpl FDrop
.84e2	30 44		bmi $8528			bmi FNip
=7					CodeLen	.var *-XtPtr1
=$84e4					Here1 = *	; remember here
>84db	07					.byte CodeLen	;patch wh_CodeLength
>84e4	46 4d 69 6e			Name0:	.text "FMin"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33896					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84e8	c4					.byte (("FMin"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>84e9	10					.byte WordFlags	;wh_Flags
>84ea	03					.byte 3	;wh_CodeLength
>84eb	0f					  .byte LinkDisplacement	; offset to previous nt
=$84ec					XtPtr1 ::= *
=33896					WordListLink ::= Nt0 ; remember the nt of this word for later
.84ec	20 64 84	jsr $8464	FMin:		jsr FCmpA
.84ef	30 1d		bmi $850e			bmi FDrop
.84f1	10 35		bpl $8528			bpl FNip
=7					CodeLen	.var *-XtPtr1
=$84f3					Here1 = *	; remember here
>84ea	07					.byte CodeLen	;patch wh_CodeLength
>84f3	46 44 65 70 74 68		Name0:	.text "FDepth"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33913					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84f9	06					.byte (("FDepth"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>84fa	10					.byte WordFlags	;wh_Flags
>84fb	03					.byte 3	;wh_CodeLength
>84fc	11					  .byte LinkDisplacement	; offset to previous nt
=$84fd					XtPtr1 ::= *
=33913					WordListLink ::= Nt0 ; remember the nt of this word for later
.84fd	a9 0a		lda #$0a	FDepth:		lda #FDim
.84ff	38		sec				sec
.8500	e5 4c		sbc $4c				sbc FIndex
.8502	4c f0 b7	jmp $b7f0			jmp PushZA
=8					CodeLen	.var *-XtPtr1
=$8505					Here1 = *	; remember here
>84fb	08					.byte CodeLen	;patch wh_CodeLength
>8505	46 44 72 6f 70			Name0:	.text "FDrop"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33930					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>850a	05					.byte (("FDrop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>850b	00					.byte WordFlags	;wh_Flags
>850c	03					.byte 3	;wh_CodeLength
>850d	11					  .byte LinkDisplacement	; offset to previous nt
=$850e					XtPtr1 ::= *
=33930					WordListLink ::= Nt0 ; remember the nt of this word for later
.850e	e6 4c		inc $4c		FDrop:		inc FIndex
=2					CodeLen	.var *-XtPtr1
=$8510					Here1 = *	; remember here
>850c	02					.byte CodeLen	;patch wh_CodeLength
.8510	60		rts				rts
>8511	46 32 44 72 6f 70		Name0:	.text "F2Drop"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33943					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8517	06					.byte (("F2Drop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8518	00					.byte WordFlags	;wh_Flags
>8519	03					.byte 3	;wh_CodeLength
>851a	0d					  .byte LinkDisplacement	; offset to previous nt
=$851b					XtPtr1 ::= *
=33943					WordListLink ::= Nt0 ; remember the nt of this word for later
.851b	e6 4c		inc $4c		F2Drop:		inc FIndex
.851d	e6 4c		inc $4c				inc FIndex
=4					CodeLen	.var *-XtPtr1
=$851f					Here1 = *	; remember here
>8519	04					.byte CodeLen	;patch wh_CodeLength
.851f	60		rts				rts
>8520	46 4e 69 70			Name0:	.text "FNip"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33956					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8524	04					.byte (("FNip"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8525	00					.byte WordFlags	;wh_Flags
>8526	03					.byte 3	;wh_CodeLength
>8527	0d					  .byte LinkDisplacement	; offset to previous nt
=$8528					XtPtr1 ::= *
=33956					WordListLink ::= Nt0 ; remember the nt of this word for later
.8528	86 14		stx $14		FNip:		stx tmp1		; save data stack index
.852a	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.852c	b5 4d		lda $4d,x			lda FSExp+0,x		; copy exponent
.852e	95 4e		sta $4e,x			sta FSExp+1,x
.8530	b5 57		lda $57,x			lda FSMant0+0,x		; copy mantissa
.8532	95 58		sta $58,x			sta FSMant0+1,x
.8534	b5 61		lda $61,x			lda FSMant1+0,x
.8536	95 62		sta $62,x			sta FSMant1+1,x
.8538	b5 6b		lda $6b,x			lda FSMant2+0,x
.853a	95 6c		sta $6c,x			sta FSMant2+1,x
.853c	b5 75		lda $75,x			lda FSMant3+0,x
.853e	95 76		sta $76,x			sta FSMant3+1,x
.8540	e6 4c		inc $4c				inc FIndex		; FDrop
.8542	a6 14		ldx $14				ldx tmp1		; restore data stack index
=28					CodeLen	.var *-XtPtr1
=$8544					Here1 = *	; remember here
>8526	1c					.byte CodeLen	;patch wh_CodeLength
.8544	60		rts				rts
>8545	46 44 75 70			Name0:	.text "FDup"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33993					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8549	04					.byte (("FDup"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>854a	00					.byte WordFlags	;wh_Flags
>854b	03					.byte 3	;wh_CodeLength
>854c	25					  .byte LinkDisplacement	; offset to previous nt
=$854d					XtPtr1 ::= *
=33993					WordListLink ::= Nt0 ; remember the nt of this word for later
.854d	20 c2 84	jsr $84c2	FDup:		jsr FAllocX		; alloc FP stack entry, X=fp stack index
.8550	b5 4e		lda $4e,x			lda FSExp+1,x		; copy exponent
.8552	95 4d		sta $4d,x			sta FSExp+0,x
.8554	b5 58		lda $58,x			lda FSMant0+1,x		; copy mantissa
.8556	95 57		sta $57,x			sta FSMant0+0,x
.8558	b5 62		lda $62,x			lda FSMant1+1,x
.855a	95 61		sta $61,x			sta FSMant1+0,x
.855c	b5 6c		lda $6c,x			lda FSMant2+1,x
.855e	95 6b		sta $6b,x			sta FSMant2+0,x
.8560	b5 76		lda $76,x			lda FSMant3+1,x
.8562	95 75		sta $75,x			sta FSMant3+0,x
.8564	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CodeLen	.var *-XtPtr1
=$8566					Here1 = *	; remember here
>854b	19					.byte CodeLen	;patch wh_CodeLength
.8566	60		rts				rts
>8567	46 4f 76 65 72			Name0:	.text "FOver"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34028					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>856c	45					.byte (("FOver"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>856d	00					.byte WordFlags	;wh_Flags
>856e	03					.byte 3	;wh_CodeLength
>856f	23					  .byte LinkDisplacement	; offset to previous nt
=$8570					XtPtr1 ::= *
=34028					WordListLink ::= Nt0 ; remember the nt of this word for later
.8570	20 c2 84	jsr $84c2	FOver:		jsr FAllocX		; alloc FP stack entry, X=fp stack index
.8573	b5 4f		lda $4f,x			lda FSExp+2,x		; copy exponent
.8575	95 4d		sta $4d,x			sta FSExp+0,x
.8577	b5 59		lda $59,x			lda FSMant0+2,x		; copy mantissa
.8579	95 57		sta $57,x			sta FSMant0+0,x
.857b	b5 63		lda $63,x			lda FSMant1+2,x
.857d	95 61		sta $61,x			sta FSMant1+0,x
.857f	b5 6d		lda $6d,x			lda FSMant2+2,x
.8581	95 6b		sta $6b,x			sta FSMant2+0,x
.8583	b5 77		lda $77,x			lda FSMant3+2,x
.8585	95 75		sta $75,x			sta FSMant3+0,x
.8587	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CodeLen	.var *-XtPtr1
=$8589					Here1 = *	; remember here
>856e	19					.byte CodeLen	;patch wh_CodeLength
.8589	60		rts				rts
>858a	46 50 69 63 6b			Name0:	.text "FPick"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34063					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>858f	65					.byte (("FPick"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>8590	00					.byte WordFlags	;wh_Flags
>8591	03					.byte 3	;wh_CodeLength
>8592	23					  .byte LinkDisplacement	; offset to previous nt
=$8593					XtPtr1 ::= *
=34063					WordListLink ::= Nt0 ; remember the nt of this word for later
.8593	20 e7 b3	jsr $b3e7	FPick:		jsr PopA		; pop u (desired entry #)
.8596	18		clc		FPickA:		clc			; Y= fp stack index of [u]
.8597	65 4c		adc $4c				adc FIndex
.8599	a8		tay		FPick3:		tay
.859a	20 c2 84	jsr $84c2			jsr FAllocX		; alloc FP stack entry, X=fp stack index
.859d	b9 4d 00	lda $004d,y			lda FSExp,y		; copy exponent
.85a0	95 4d		sta $4d,x			sta FSExp,x
.85a2	b9 57 00	lda $0057,y			lda FSMant0,y		; copy mantissa
.85a5	95 57		sta $57,x			sta FSMant0,x
.85a7	b9 61 00	lda $0061,y			lda FSMant1,y
.85aa	95 61		sta $61,x			sta FSMant1,x
.85ac	b9 6b 00	lda $006b,y			lda FSMant2,y
.85af	95 6b		sta $6b,x			sta FSMant2,x
.85b1	b9 75 00	lda $0075,y			lda FSMant3,y
.85b4	95 75		sta $75,x			sta FSMant3,x
.85b6	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=37					CodeLen	.var *-XtPtr1
=$85b8					Here1 = *	; remember here
>8591	25					.byte CodeLen	;patch wh_CodeLength
.85b8	60		rts				rts
>85b9	46 32 44 75 70			Name0:	.text "F2Dup"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34110					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>85be	05					.byte (("F2Dup"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=47					LinkDisplacement = Nt0-WordListLink
>85bf	10					.byte WordFlags	;wh_Flags
>85c0	03					.byte 3	;wh_CodeLength
>85c1	2f					  .byte LinkDisplacement	; offset to previous nt
=$85c2					XtPtr1 ::= *
=34110					WordListLink ::= Nt0 ; remember the nt of this word for later
.85c2	20 70 85	jsr $8570	F2Dup:		jsr FOver
.85c5	4c 70 85	jmp $8570			jmp FOver
=6					CodeLen	.var *-XtPtr1
=$85c8					Here1 = *	; remember here
>85c0	06					.byte CodeLen	;patch wh_CodeLength
>85c8	46 53 77 61 70			Name0:	.text "FSwap"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34125					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>85cd	05					.byte (("FSwap"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>85ce	00					.byte WordFlags	;wh_Flags
>85cf	03					.byte 3	;wh_CodeLength
>85d0	0f					  .byte LinkDisplacement	; offset to previous nt
=$85d1					XtPtr1 ::= *
=34125					WordListLink ::= Nt0 ; remember the nt of this word for later
.85d1	86 14		stx $14		FSwap:		stx tmp1+0		; save data stack index
.85d3	a6 4c		ldx $4c				ldx FIndex		; X=FP stack index
.85d5	b5 4d		lda $4d,x			lda FSExp+0,x		; do FSExp
.85d7	b4 4e		ldy $4e,x			ldy FSExp+1,x
.85d9	95 4e		sta $4e,x			sta FSExp+1,x
.85db	94 4d		sty $4d,x			sty FSExp+0,x
.85dd	b5 57		lda $57,x			lda FSMant0+0,x		; do FSMant0
.85df	b4 58		ldy $58,x			ldy FSMant0+1,x
.85e1	95 58		sta $58,x			sta FSMant0+1,x
.85e3	94 57		sty $57,x			sty FSMant0+0,x
.85e5	b5 61		lda $61,x			lda FSMant1+0,x		; do FSMant1
.85e7	b4 62		ldy $62,x			ldy FSMant1+1,x
.85e9	95 62		sta $62,x			sta FSMant1+1,x
.85eb	94 61		sty $61,x			sty FSMant1+0,x
.85ed	b5 6b		lda $6b,x			lda FSMant2+0,x		; do FSMant2
.85ef	b4 6c		ldy $6c,x			ldy FSMant2+1,x
.85f1	95 6c		sta $6c,x			sta FSMant2+1,x
.85f3	94 6b		sty $6b,x			sty FSMant2+0,x
.85f5	b5 75		lda $75,x			lda FSMant3+0,x		; do FSMant3
.85f7	b4 76		ldy $76,x			ldy FSMant3+1,x
.85f9	95 76		sta $76,x			sta FSMant3+1,x
.85fb	94 75		sty $75,x			sty FSMant3+0,x
.85fd	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=46					CodeLen	.var *-XtPtr1
=$85ff					Here1 = *	; remember here
>85cf	2e					.byte CodeLen	;patch wh_CodeLength
.85ff	60		rts				rts
>8600	46 54 75 63 6b			Name0:	.text "FTuck"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34181					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8605	65					.byte (("FTuck"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>8606	10					.byte WordFlags	;wh_Flags
>8607	03					.byte 3	;wh_CodeLength
>8608	38					  .byte LinkDisplacement	; offset to previous nt
=$8609					XtPtr1 ::= *
=34181					WordListLink ::= Nt0 ; remember the nt of this word for later
.8609	20 d1 85	jsr $85d1	FTuck:		jsr FSwap
.860c	4c 70 85	jmp $8570			jmp FOver
=6					CodeLen	.var *-XtPtr1
=$860f					Here1 = *	; remember here
>8607	06					.byte CodeLen	;patch wh_CodeLength
>860f	46 52 6f 74			Name0:	.text "FRot"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34195					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8613	84					.byte (("FRot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>8614	00					.byte WordFlags	;wh_Flags
>8615	03					.byte 3	;wh_CodeLength
>8616	0e					  .byte LinkDisplacement	; offset to previous nt
=$8617					XtPtr1 ::= *
=34195					WordListLink ::= Nt0 ; remember the nt of this word for later
.8617	86 14		stx $14		FRot:		stx tmp1		; save data stack index
.8619	a5 4c		lda $4c				lda FIndex		; for FSMant3, FSMant2, FSMant1, FSMant0, FSExp
.861b	18		clc				clc
.861c	69 28		adc #$28			adc #4*FDim
.861e	d0 03		bne $8623			bne _3
.8620	8a		txa		_2:		txa			;    next byte
.8621	e9 0a		sbc #$0a			sbc #FDim
.8623	aa		tax		_3:		tax
.8624	b5 4f		lda $4f,x			lda FSExp+2,x		;   do a byte
.8626	b4 4e		ldy $4e,x			ldy FSExp+1,x
.8628	94 4f		sty $4f,x			sty FSExp+2,x
.862a	b4 4d		ldy $4d,x			ldy FSExp+0,x
.862c	94 4e		sty $4e,x			sty FSExp+1,x
.862e	95 4d		sta $4d,x			sta FSExp+0,x
.8630	e4 4c		cpx $4c				cpx FIndex		; done?
.8632	d0 ec		bne $8620			bne _2
.8634	a6 14		ldx $14				ldx tmp1		; restore param stack index
=31					CodeLen	.var *-XtPtr1
=$8636					Here1 = *	; remember here
>8615	1f					.byte CodeLen	;patch wh_CodeLength
.8636	60		rts				rts
>8637	46 2d 52 6f 74			Name0:	.text "F-Rot"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34236					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>863c	85					.byte (("F-Rot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=41					LinkDisplacement = Nt0-WordListLink
>863d	10					.byte WordFlags	;wh_Flags
>863e	03					.byte 3	;wh_CodeLength
>863f	29					  .byte LinkDisplacement	; offset to previous nt
=$8640					XtPtr1 ::= *
=34236					WordListLink ::= Nt0 ; remember the nt of this word for later
.8640	20 17 86	jsr $8617	FMRot:		jsr FRot
.8643	4c 17 86	jmp $8617			jmp FRot
=6					CodeLen	.var *-XtPtr1
=$8646					Here1 = *	; remember here
>863e	06					.byte CodeLen	;patch wh_CodeLength
>8646	46 40				Name0:	.text "F@"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34248					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8648	02					.byte (("F@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>8649	00					.byte WordFlags	;wh_Flags
>864a	03					.byte 3	;wh_CodeLength
>864b	0c					  .byte LinkDisplacement	; offset to previous nt
=$864c					XtPtr1 ::= *
=34248					WordListLink ::= Nt0 ; remember the nt of this word for later
.864c	20 02 b4	jsr $b402	FAt:		jsr PopYA		; pop addr
.864f	85 16		sta $16		FAt_YA:		sta tmp2+0		; save addr
.8651	84 17		sty $17				sty tmp2+1
.8653	a0 00		ldy #$00			ldy #0			; starting offset from tmp2
.8655	20 c2 84	jsr $84c2	FAt_Tmp2Y:	jsr FAllocX		; alloc FP stack entry, X= fp stack index
.8658	b1 16		lda ($16),y			lda (tmp2),y		; copy mantissa
.865a	95 75		sta $75,x			sta FSMant3,x
.865c	c8		iny				iny
.865d	b1 16		lda ($16),y			lda (tmp2),y
.865f	95 6b		sta $6b,x			sta FSMant2,x
.8661	c8		iny				iny
.8662	b1 16		lda ($16),y			lda (tmp2),y
.8664	95 61		sta $61,x			sta FSMant1,x
.8666	c8		iny				iny
.8667	b1 16		lda ($16),y			lda (tmp2),y
.8669	95 57		sta $57,x			sta FSMant0,x
.866b	c8		iny				iny			; copy exponent
.866c	b1 16		lda ($16),y			lda (tmp2),y
.866e	95 4d		sta $4d,x			sta FSExp,x
.8670	a6 14		ldx $14				ldx tmp1		; restore data stack index
=38					CodeLen	.var *-XtPtr1
=$8672					Here1 = *	; remember here
>864a	26					.byte CodeLen	;patch wh_CodeLength
.8672	60		rts				rts
>8673	46 21				Name0:	.text "F!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34293					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8675	22					.byte (("F!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>8676	00					.byte WordFlags	;wh_Flags
>8677	03					.byte 3	;wh_CodeLength
>8678	2d					  .byte LinkDisplacement	; offset to previous nt
=$8679					XtPtr1 ::= *
=34293					WordListLink ::= Nt0 ; remember the nt of this word for later
.8679	20 02 b4	jsr $b402	FStore:		jsr PopYA		; pop addr
.867c	85 14		sta $14		FStore_YA:	sta tmp1+0		; save addr
.867e	84 15		sty $15				sty tmp1+1
.8680	a0 00		ldy #$00			ldy #0
.8682	86 16		stx $16				stx tmp2		; save data stack index
.8684	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.8686	b5 75		lda $75,x			lda FSMant3,x		; copy mantissa
.8688	91 14		sta ($14),y			sta (tmp1),y
.868a	b5 6b		lda $6b,x			lda FSMant2,x
.868c	c8		iny				iny
.868d	91 14		sta ($14),y			sta (tmp1),y
.868f	b5 61		lda $61,x			lda FSMant1,x
.8691	c8		iny				iny
.8692	91 14		sta ($14),y			sta (tmp1),y
.8694	b5 57		lda $57,x			lda FSMant0,x
.8696	c8		iny				iny
.8697	91 14		sta ($14),y			sta (tmp1),y
.8699	b5 4d		lda $4d,x			lda FSExp,x		; copy exponent
.869b	c8		iny				iny
.869c	91 14		sta ($14),y			sta (tmp1),y
.869e	e6 4c		inc $4c				inc FIndex		; FDrop
.86a0	a6 16		ldx $16				ldx tmp2		; restore data stack index
=41					CodeLen	.var *-XtPtr1
=$86a2					Here1 = *	; remember here
>8677	29					.byte CodeLen	;patch wh_CodeLength
.86a2	60		rts				rts
>86a3	46 2c				Name0:	.text "F,"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34341					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86a5	82					.byte (("F,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=48					LinkDisplacement = Nt0-WordListLink
>86a6	10					.byte WordFlags	;wh_Flags
>86a7	03					.byte 3	;wh_CodeLength
>86a8	30					  .byte LinkDisplacement	; offset to previous nt
=$86a9					XtPtr1 ::= *
=34341					WordListLink ::= Nt0 ; remember the nt of this word for later
.86a9	a5 00		lda $00		FComma:		lda cp+0		; store f at Here
.86ab	a4 01		ldy $01				ldy cp+1
.86ad	20 7c 86	jsr $867c			jsr FStore_YA
.86b0	a9 05		lda #$05			lda #5			; Float
.86b2	20 f0 b7	jsr $b7f0			jsr PushZA
.86b5	4c ba c0	jmp $c0ba			jmp Allot
=15					CodeLen	.var *-XtPtr1
=$86b8					Here1 = *	; remember here
>86a7	0f					.byte CodeLen	;patch wh_CodeLength
>86b8	46 30 21			Name0:	.text "F0!"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34363					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86bb	23					.byte (("F0!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>86bc	10					.byte WordFlags	;wh_Flags
>86bd	03					.byte 3	;wh_CodeLength
>86be	16					  .byte LinkDisplacement	; offset to previous nt
=$86bf					XtPtr1 ::= *
=34363					WordListLink ::= Nt0 ; remember the nt of this word for later
.86bf	20 ab 88	jsr $88ab	FZStore:	jsr F0
.86c2	4c 79 86	jmp $8679			jmp FStore
=6					CodeLen	.var *-XtPtr1
=$86c5					Here1 = *	; remember here
>86bd	06					.byte CodeLen	;patch wh_CodeLength
>86c5	46 30 3d			Name0:	.text "F0="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34376					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86c8	a3					.byte (("F0="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>86c9	10					.byte WordFlags	;wh_Flags
>86ca	03					.byte 3	;wh_CodeLength
>86cb	0d					  .byte LinkDisplacement	; offset to previous nt
=$86cc					XtPtr1 ::= *
=34376					WordListLink ::= Nt0 ; remember the nt of this word for later
.86cc	a4 4c		ldy $4c		FZEq:		ldy FIndex
.86ce	b9 57 00	lda $0057,y			lda FSMant0,y
.86d1	d0 24		bne $86f7			bne FFalse1
.86d3					FTrue1:
.86d3	e6 4c		inc $4c				inc FIndex	; FDrop
.86d5	4c d0 b7	jmp $b7d0			jmp True	; return true
=12					CodeLen	.var *-XtPtr1
=$86d8					Here1 = *	; remember here
>86ca	0c					.byte CodeLen	;patch wh_CodeLength
>86d8	46 30 3c 3e			Name0:	.text "F0<>"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34396					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86dc	c4					.byte (("F0<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>86dd	10					.byte WordFlags	;wh_Flags
>86de	03					.byte 3	;wh_CodeLength
>86df	14					  .byte LinkDisplacement	; offset to previous nt
=$86e0					XtPtr1 ::= *
=34396					WordListLink ::= Nt0 ; remember the nt of this word for later
.86e0	a4 4c		ldy $4c		FZNe:		ldy FIndex
.86e2	b9 57 00	lda $0057,y			lda FSMant0,y
.86e5	d0 ec		bne $86d3			bne FTrue1
.86e7	f0 0e		beq $86f7			beq FFalse1
=9					CodeLen	.var *-XtPtr1
=$86e9					Here1 = *	; remember here
>86de	09					.byte CodeLen	;patch wh_CodeLength
>86e9	46 30 3c			Name0:	.text "F0<"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34412					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86ec	83					.byte (("F0<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>86ed	10					.byte WordFlags	;wh_Flags
>86ee	03					.byte 3	;wh_CodeLength
>86ef	10					  .byte LinkDisplacement	; offset to previous nt
=$86f0					XtPtr1 ::= *
=34412					WordListLink ::= Nt0 ; remember the nt of this word for later
.86f0	a4 4c		ldy $4c		FZLt:		ldy FIndex
.86f2	b9 57 00	lda $0057,y			lda FSMant0,y
.86f5	30 dc		bmi $86d3			bmi FTrue1
.86f7					FFalse1:
.86f7	e6 4c		inc $4c				inc FIndex	; FDrop
.86f9	4c e2 b7	jmp $b7e2			jmp False	; return false
=12					CodeLen	.var *-XtPtr1
=$86fc					Here1 = *	; remember here
>86ee	0c					.byte CodeLen	;patch wh_CodeLength
>86fc	46 30 3e 3d			Name0:	.text "F0>="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34432					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8700	a4					.byte (("F0>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>8701	10					.byte WordFlags	;wh_Flags
>8702	03					.byte 3	;wh_CodeLength
>8703	14					  .byte LinkDisplacement	; offset to previous nt
=$8704					XtPtr1 ::= *
=34432					WordListLink ::= Nt0 ; remember the nt of this word for later
.8704	a4 4c		ldy $4c		FZGe:		ldy FIndex
.8706	b9 57 00	lda $0057,y			lda FSMant0,y
.8709	10 c8		bpl $86d3			bpl FTrue1
.870b	30 ea		bmi $86f7			bmi FFalse1
=9					CodeLen	.var *-XtPtr1
=$870d					Here1 = *	; remember here
>8702	09					.byte CodeLen	;patch wh_CodeLength
>870d	46 30 3e			Name0:	.text "F0>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34448					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8710	c3					.byte (("F0>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8711	10					.byte WordFlags	;wh_Flags
>8712	03					.byte 3	;wh_CodeLength
>8713	10					  .byte LinkDisplacement	; offset to previous nt
=$8714					XtPtr1 ::= *
=34448					WordListLink ::= Nt0 ; remember the nt of this word for later
.8714	a4 4c		ldy $4c		FZGt:		ldy FIndex
.8716	b9 57 00	lda $0057,y			lda FSMant0,y
.8719	30 dc		bmi $86f7			bmi FFalse1
.871b	d0 b6		bne $86d3			bne FTrue1
.871d	f0 d8		beq $86f7			beq FFalse1
=11					CodeLen	.var *-XtPtr1
=$871f					Here1 = *	; remember here
>8712	0b					.byte CodeLen	;patch wh_CodeLength
>871f	46 30 3c 3d			Name0:	.text "F0<="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34467					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8723	a4					.byte (("F0<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>8724	10					.byte WordFlags	;wh_Flags
>8725	03					.byte 3	;wh_CodeLength
>8726	13					  .byte LinkDisplacement	; offset to previous nt
=$8727					XtPtr1 ::= *
=34467					WordListLink ::= Nt0 ; remember the nt of this word for later
.8727	a4 4c		ldy $4c		FZLe:		ldy FIndex
.8729	b9 57 00	lda $0057,y			lda FSMant0,y
.872c	30 a5		bmi $86d3			bmi FTrue1
.872e	d0 c7		bne $86f7			bne FFalse1
.8730	f0 a1		beq $86d3			beq FTrue1
=11					CodeLen	.var *-XtPtr1
=$8732					Here1 = *	; remember here
>8725	0b					.byte CodeLen	;patch wh_CodeLength
>8732	46 3c				Name0:	.text "F<"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34484					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8734	82					.byte (("F<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>8735	10					.byte WordFlags	;wh_Flags
>8736	03					.byte 3	;wh_CodeLength
>8737	11					  .byte LinkDisplacement	; offset to previous nt
=$8738					XtPtr1 ::= *
=34484					WordListLink ::= Nt0 ; remember the nt of this word for later
.8738	20 64 84	jsr $8464	FLt:		jsr FCmpA
.873b	30 32		bmi $876f			bmi FTrue2
.873d					FFalse2:
.873d	e6 4c		inc $4c				inc FIndex	; FDrop
.873f	e6 4c		inc $4c				inc FIndex	; FDrop
.8741	4c e2 b7	jmp $b7e2			jmp False	; return False
=12					CodeLen	.var *-XtPtr1
=$8744					Here1 = *	; remember here
>8736	0c					.byte CodeLen	;patch wh_CodeLength
>8744	46 3e 3d			Name0:	.text "F>="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34503					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8747	a3					.byte (("F>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>8748	10					.byte WordFlags	;wh_Flags
>8749	03					.byte 3	;wh_CodeLength
>874a	13					  .byte LinkDisplacement	; offset to previous nt
=$874b					XtPtr1 ::= *
=34503					WordListLink ::= Nt0 ; remember the nt of this word for later
.874b	20 64 84	jsr $8464	FGe:		jsr FCmpA
.874e	10 1f		bpl $876f			bpl FTrue2
.8750	30 eb		bmi $873d			bmi FFalse2
=7					CodeLen	.var *-XtPtr1
=$8752					Here1 = *	; remember here
>8749	07					.byte CodeLen	;patch wh_CodeLength
>8752	46 3e				Name0:	.text "F>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34516					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8754	c2					.byte (("F>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8755	10					.byte WordFlags	;wh_Flags
>8756	03					.byte 3	;wh_CodeLength
>8757	0d					  .byte LinkDisplacement	; offset to previous nt
=$8758					XtPtr1 ::= *
=34516					WordListLink ::= Nt0 ; remember the nt of this word for later
.8758	20 64 84	jsr $8464	FGt:		jsr FCmpA
.875b	30 e0		bmi $873d			bmi FFalse2
.875d	d0 10		bne $876f			bne FTrue2
.875f	f0 dc		beq $873d			beq FFalse2
=9					CodeLen	.var *-XtPtr1
=$8761					Here1 = *	; remember here
>8756	09					.byte CodeLen	;patch wh_CodeLength
>8761	46 3c 3d			Name0:	.text "F<="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34532					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8764	a3					.byte (("F<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8765	10					.byte WordFlags	;wh_Flags
>8766	03					.byte 3	;wh_CodeLength
>8767	10					  .byte LinkDisplacement	; offset to previous nt
=$8768					XtPtr1 ::= *
=34532					WordListLink ::= Nt0 ; remember the nt of this word for later
.8768	20 64 84	jsr $8464	FLe:		jsr FCmpA
.876b	30 02		bmi $876f			bmi FTrue2
.876d	d0 ce		bne $873d			bne FFalse2
.876f					FTrue2:
.876f	e6 4c		inc $4c				inc FIndex	; FDrop
.8771	e6 4c		inc $4c				inc FIndex	; FDrop
.8773	4c d0 b7	jmp $b7d0			jmp True	; return True
=14					CodeLen	.var *-XtPtr1
=$8776					Here1 = *	; remember here
>8766	0e					.byte CodeLen	;patch wh_CodeLength
>8776	46 3c 3e			Name0:	.text "F<>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34553					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8779	c3					.byte (("F<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>877a	10					.byte WordFlags	;wh_Flags
>877b	03					.byte 3	;wh_CodeLength
>877c	15					  .byte LinkDisplacement	; offset to previous nt
=$877d					XtPtr1 ::= *
=34553					WordListLink ::= Nt0 ; remember the nt of this word for later
.877d	20 64 84	jsr $8464	FNe:		jsr FCmpA
.8780	d0 ed		bne $876f			bne FTrue2
.8782	f0 b9		beq $873d			beq FFalse2
=7					CodeLen	.var *-XtPtr1
=$8784					Here1 = *	; remember here
>877b	07					.byte CodeLen	;patch wh_CodeLength
>8784	46 3d				Name0:	.text "F="	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34566					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8786	a2					.byte (("F="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8787	10					.byte WordFlags	;wh_Flags
>8788	03					.byte 3	;wh_CodeLength
>8789	0d					  .byte LinkDisplacement	; offset to previous nt
=$878a					XtPtr1 ::= *
=34566					WordListLink ::= Nt0 ; remember the nt of this word for later
.878a	20 64 84	jsr $8464	FEq:		jsr FCmpA
.878d	d0 ae		bne $873d			bne FFalse2
.878f	f0 de		beq $876f			beq FTrue2
=7					CodeLen	.var *-XtPtr1
=$8791					Here1 = *	; remember here
>8788	07					.byte CodeLen	;patch wh_CodeLength
>8791	46 7e 41 62 73			Name0:	.text "F~Abs"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34582					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8796	65					.byte (("F~Abs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8797	10					.byte WordFlags	;wh_Flags
>8798	03					.byte 3	;wh_CodeLength
>8799	10					  .byte LinkDisplacement	; offset to previous nt
=$879a					XtPtr1 ::= *
=34582					WordListLink ::= Nt0 ; remember the nt of this word for later
.879a	20 40 86	jsr $8640	FTAbs:		jsr FMRot
.879d	20 55 8b	jsr $8b55			jsr FMinus
.87a0	20 b0 8b	jsr $8bb0			jsr FAbs
.87a3	4c 58 87	jmp $8758			jmp FGt
=12					CodeLen	.var *-XtPtr1
=$87a6					Here1 = *	; remember here
>8798	0c					.byte CodeLen	;patch wh_CodeLength
>87a6	46 7e 52 65 6c			Name0:	.text "F~Rel"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34603					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>87ab	85					.byte (("F~Rel"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>87ac	10					.byte WordFlags	;wh_Flags
>87ad	03					.byte 3	;wh_CodeLength
>87ae	15					  .byte LinkDisplacement	; offset to previous nt
=$87af					XtPtr1 ::= *
=34603					WordListLink ::= Nt0 ; remember the nt of this word for later
.87af	20 70 85	jsr $8570	FTRel:		jsr FOver
.87b2	a9 03		lda #$03			lda #3
.87b4	20 96 85	jsr $8596			jsr FPickA
.87b7	20 15 8b	jsr $8b15			jsr FPlus
.87ba	20 b0 8b	jsr $8bb0			jsr FAbs
.87bd	20 e3 8b	jsr $8be3			jsr FStar		; r1 r2 r3*|r1+r2|
.87c0	20 40 86	jsr $8640			jsr FMRot		; r3*|r1+r2| r1 r2
.87c3	20 55 8b	jsr $8b55			jsr FMinus
.87c6	20 b0 8b	jsr $8bb0			jsr FAbs
.87c9	4c 58 87	jmp $8758			jmp FGt
=29					CodeLen	.var *-XtPtr1
=$87cc					Here1 = *	; remember here
>87ad	1d					.byte CodeLen	;patch wh_CodeLength
>87cc	46 7e				Name0:	.text "F~"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34638					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>87ce	c2					.byte (("F~"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>87cf	10					.byte WordFlags	;wh_Flags
>87d0	03					.byte 3	;wh_CodeLength
>87d1	23					  .byte LinkDisplacement	; offset to previous nt
=$87d2					XtPtr1 ::= *
=34638					WordListLink ::= Nt0 ; remember the nt of this word for later
.87d2	a4 4c		ldy $4c		FTilde:		ldy FIndex
.87d4	b9 57 00	lda $0057,y			lda FSMant0,y
.87d7	30 06		bmi $87df			bmi _10			; r3<0
.87d9	d0 bf		bne $879a			bne FTAbs		; r3>0
.87db	e6 4c		inc $4c				inc FIndex		; r3=0
.87dd	d0 ab		bne $878a			bne FEq
.87df	20 8a 8b	jsr $8b8a	_10:		jsr FNegate
.87e2	4c af 87	jmp $87af			jmp FTRel
=19					CodeLen	.var *-XtPtr1
=$87e5					Here1 = *	; remember here
>87d0	13					.byte CodeLen	;patch wh_CodeLength
>87e5	46 56 61 72 69 61 62 6c		Name0:	.text "FVariable"	;  name of word as a string, ending at wh_NameLastChar
>87ed	65
=9					NameLength = *-Name0
=34670					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>87ee	a9					.byte (("FVariable"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>87ef	18					.byte WordFlags	;wh_Flags
>87f0	03					.byte 3	;wh_CodeLength
>87f1	20					  .byte LinkDisplacement	; offset to previous nt
=$87f2					XtPtr1 ::= *
=34670					WordListLink ::= Nt0 ; remember the nt of this word for later
.87f2	20 c1 c1	jsr $c1c1	FVariable:	jsr Create		; compile word header & push PFA adr
.87f5	20 de bb	jsr $bbde			jsr adjust_z		; fix word code length
.87f8	20 ab 88	jsr $88ab			jsr F0			; alloc & init data
.87fb	4c a9 86	jmp $86a9			jmp FComma
=12					CodeLen	.var *-XtPtr1
=$87fe					Here1 = *	; remember here
>87f0	0c					.byte CodeLen	;patch wh_CodeLength
>87fe	46 4c 69 74 65 72 61 6c		Name0:	.text "FLiteral"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=34694					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8806	88					.byte (("FLiteral"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>8807	18					.byte WordFlags	;wh_Flags
>8808	03					.byte 3	;wh_CodeLength
>8809	18					  .byte LinkDisplacement	; offset to previous nt
=$880a					XtPtr1 ::= *
=34694					WordListLink ::= Nt0 ; remember the nt of this word for later
.880a	20 1f 88	jsr $881f	FLiteral:	jsr FLitTest
.880d	f0 0a		beq $8819			beq _Short
.880f	a9 48		lda #$48			lda #<FLitI		; compile JSR FLitI
.8811	a0 88		ldy #$88			ldy #>FLitI
.8813	20 39 cd	jsr $cd39			jsr Jsr_Comma_YA
.8816	4c a9 86	jmp $86a9			jmp FComma		; inline operand, return
.8819	20 2b 88	jsr $882b	_Short:		jsr FLitShort
.881c	4c 39 cd	jmp $cd39			jmp Jsr_Comma_YA	; compile jsr FLitYA, & return
=21					CodeLen	.var *-XtPtr1
=$881f					Here1 = *	; remember here
>8808	15					.byte CodeLen	;patch wh_CodeLength
.881f					FLitTest:
.881f	a4 4c		ldy $4c				ldy FIndex
.8821	b9 61 00	lda $0061,y			lda FSMant1,y		; will short work?
.8824	19 6b 00	ora $006b,y			ora FSMant2,y
.8827	19 75 00	ora $0075,y			ora FSMant3,y
.882a	60		rts				rts
.882b					FLitShort:
.882b	a9 a9		lda #$a9			lda #$a9		; compile LDA #mant0
.882d	20 ff cc	jsr $ccff			jsr C_Comma_A
.8830	b9 57 00	lda $0057,y			lda FSMant0,y
.8833	20 ff cc	jsr $ccff			jsr C_Comma_A
.8836	a9 a0		lda #$a0			lda #$a0		; compile LDY #exp
.8838	20 ff cc	jsr $ccff			jsr C_Comma_A
.883b	b9 4d 00	lda $004d,y			lda FSExp,y
.883e	20 ff cc	jsr $ccff			jsr C_Comma_A
.8841	e6 4c		inc $4c				inc FIndex		; FDrop
.8843	a9 92		lda #$92			lda #<FLitYA		; point at FLitYA
.8845	a0 88		ldy #$88			ldy #>FLitYA
.8847	60		rts				rts
.8848					FLitI:
.8848	68		pla				pla			; tmp2= RTS addr
.8849	85 16		sta $16				sta tmp2+0
.884b	18		clc				clc			; bump RTS addr over inline float data
.884c	69 05		adc #$05			adc #5
.884e	a8		tay				tay
.884f	68		pla				pla
.8850	85 17		sta $17				sta tmp2+1
.8852	69 00		adc #$00			adc #0
.8854	48		pha				pha
.8855	98		tya				tya
.8856	48		pha				pha
.8857	a0 01		ldy #$01			ldy #1			; correct for RTS addr
.8859	4c 55 86	jmp $8655			jmp FAt_Tmp2Y		; fetch inline data, & return
>885c	46 43 6f 6e 73 74 61 6e		Name0:	.text "FConstant"	;  name of word as a string, ending at wh_NameLastChar
>8864	74
=9					NameLength = *-Name0
=34789					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8865	89					.byte (("FConstant"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=95					LinkDisplacement = Nt0-WordListLink
>8866	10					.byte WordFlags	;wh_Flags
>8867	03					.byte 3	;wh_CodeLength
>8868	5f					  .byte LinkDisplacement	; offset to previous nt
=$8869					XtPtr1 ::= *
=34789					WordListLink ::= Nt0 ; remember the nt of this word for later
.8869	20 13 c1	jsr $c113	FConstant:	jsr Header_Comma	; compile word header
.886c	20 1f 88	jsr $881f			jsr FLitTest		; will short work?
.886f	f0 0d		beq $887e			beq _Short
.8871	a9 87		lda #$87			lda #<FConstantRun	; compile call
.8873	a0 88		ldy #$88			ldy #>FConstantRun
.8875	20 39 cd	jsr $cd39			jsr Jsr_Comma_YA
.8878	20 de bb	jsr $bbde			jsr adjust_z
.887b	4c a9 86	jmp $86a9			jmp FComma		; inline operand, & return
.887e					_Short:
.887e	20 2b 88	jsr $882b			jsr FLitShort		; compile load value
.8881	20 4f cd	jsr $cd4f			jsr Jmp_Comma_YA	; compile JMP
.8884	4c de bb	jmp $bbde			jmp adjust_z
=30					CodeLen	.var *-XtPtr1
=$8887					Here1 = *	; remember here
>8867	1e					.byte CodeLen	;patch wh_CodeLength
.8887					FConstantRun:
.8887	68		pla				pla			; tmp2= pop RTS addr
.8888	85 16		sta $16				sta tmp2+0
.888a	68		pla				pla
.888b	85 17		sta $17				sta tmp2+1
.888d	a0 01		ldy #$01			ldy #1			; correct for RTS addr
.888f	4c 55 86	jmp $8655			jmp FAt_Tmp2Y		; fetch inline data, & return
.8892					FLitYA:
.8892	20 c2 84	jsr $84c2			jsr FAllocX		; alloc FP stack entry, X=fp stack index
.8895	94 4d		sty $4d,x			sty FSExp,x		; exp= Y
.8897	95 57		sta $57,x			sta FSMant0,x		; Mant= A,0,0,0
.8899	a9 00		lda #$00			lda #0
.889b	95 61		sta $61,x			sta FSMant1,x
.889d	95 6b		sta $6b,x			sta FSMant2,x
.889f	95 75		sta $75,x			sta FSMant3,x
.88a1	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.88a3	60		rts				rts
>88a4	30 2e 65			Name0:	.text "0.e"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34855					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88a7	a3					.byte (("0.e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=66					LinkDisplacement = Nt0-WordListLink
>88a8	10					.byte WordFlags	;wh_Flags
>88a9	03					.byte 3	;wh_CodeLength
>88aa	42					  .byte LinkDisplacement	; offset to previous nt
=$88ab					XtPtr1 ::= *
=34855					WordListLink ::= Nt0 ; remember the nt of this word for later
.88ab	a9 00		lda #$00	F0:		lda #0
.88ad	a0 80		ldy #$80			ldy #$80
.88af	d0 e1		bne $8892			bne FLitYA
=6					CodeLen	.var *-XtPtr1
=$88b1					Here1 = *	; remember here
>88a9	06					.byte CodeLen	;patch wh_CodeLength
>88b1	31 30 30 30 2e 65		Name0:	.text "1000.e"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=34871					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88b7	a6					.byte (("1000.e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>88b8	10					.byte WordFlags	;wh_Flags
>88b9	03					.byte 3	;wh_CodeLength
>88ba	10					  .byte LinkDisplacement	; offset to previous nt
=$88bb					XtPtr1 ::= *
=34871					WordListLink ::= Nt0 ; remember the nt of this word for later
.88bb	a9 7d		lda #$7d	F1000:		lda #$7d
.88bd	a0 0a		ldy #$0a			ldy #10
.88bf	d0 d1		bne $8892			bne FLitYA
=6					CodeLen	.var *-XtPtr1
=$88c1					Here1 = *	; remember here
>88b9	06					.byte CodeLen	;patch wh_CodeLength
>88c1	31 30 2e 65			Name0:	.text "10.e"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34885					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88c5	a4					.byte (("10.e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>88c6	10					.byte WordFlags	;wh_Flags
>88c7	03					.byte 3	;wh_CodeLength
>88c8	0e					  .byte LinkDisplacement	; offset to previous nt
=$88c9					XtPtr1 ::= *
=34885					WordListLink ::= Nt0 ; remember the nt of this word for later
.88c9	a9 50		lda #$50	F10:		lda #$50
.88cb	a0 04		ldy #$04			ldy #4
.88cd	d0 c3		bne $8892			bne FLitYA
=6					CodeLen	.var *-XtPtr1
=$88cf					Here1 = *	; remember here
>88c7	06					.byte CodeLen	;patch wh_CodeLength
>88cf	32 2e 65			Name0:	.text "2.e"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34898					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88d2	a3					.byte (("2.e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>88d3	10					.byte WordFlags	;wh_Flags
>88d4	03					.byte 3	;wh_CodeLength
>88d5	0d					  .byte LinkDisplacement	; offset to previous nt
=$88d6					XtPtr1 ::= *
=34898					WordListLink ::= Nt0 ; remember the nt of this word for later
.88d6	a9 40		lda #$40	F2:		lda #$40
.88d8	a0 02		ldy #$02			ldy #2
.88da	d0 b6		bne $8892			bne FLitYA
=6					CodeLen	.var *-XtPtr1
=$88dc					Here1 = *	; remember here
>88d4	06					.byte CodeLen	;patch wh_CodeLength
>88dc	31 2e 65			Name0:	.text "1.e"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34911					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88df	a3					.byte (("1.e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>88e0	10					.byte WordFlags	;wh_Flags
>88e1	03					.byte 3	;wh_CodeLength
>88e2	0d					  .byte LinkDisplacement	; offset to previous nt
=$88e3					XtPtr1 ::= *
=34911					WordListLink ::= Nt0 ; remember the nt of this word for later
.88e3	a9 40		lda #$40	F1:		lda #$40
.88e5	a0 01		ldy #$01			ldy #1
.88e7	d0 a9		bne $8892			bne FLitYA
=6					CodeLen	.var *-XtPtr1
=$88e9					Here1 = *	; remember here
>88e1	06					.byte CodeLen	;patch wh_CodeLength
>88e9	2e 31 65			Name0:	.text ".1e"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34924					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88ec	a3					.byte ((".1e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>88ed	10					.byte WordFlags	;wh_Flags
>88ee	03					.byte 3	;wh_CodeLength
>88ef	0d					  .byte LinkDisplacement	; offset to previous nt
=$88f0					XtPtr1 ::= *
=34924					WordListLink ::= Nt0 ; remember the nt of this word for later
.88f0	20 87 88	jsr $8887	F10th:		jsr FConstantRun
>88f3	67 66 66 66					.dword $66666667	; 32 bit signed binary mantissa.  $40000000 = +0.5
>88f7	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$88f8					Here1 = *	; remember here
>88ee	08					.byte CodeLen	;patch wh_CodeLength
>88f8	50 69				Name0:	.text "Pi"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34938					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88fa	22					.byte (("Pi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>88fb	10					.byte WordFlags	;wh_Flags
>88fc	03					.byte 3	;wh_CodeLength
>88fd	0e					  .byte LinkDisplacement	; offset to previous nt
=$88fe					XtPtr1 ::= *
=34938					WordListLink ::= Nt0 ; remember the nt of this word for later
.88fe	20 87 88	jsr $8887	FPi:		jsr FConstantRun
>8901	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8905	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$8906					Here1 = *	; remember here
>88fc	08					.byte CodeLen	;patch wh_CodeLength
>8906	50 69 2f 32			Name0:	.text "Pi/2"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34954					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>890a	44					.byte (("Pi/2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>890b	10					.byte WordFlags	;wh_Flags
>890c	03					.byte 3	;wh_CodeLength
>890d	10					  .byte LinkDisplacement	; offset to previous nt
=$890e					XtPtr1 ::= *
=34954					WordListLink ::= Nt0 ; remember the nt of this word for later
.890e	20 87 88	jsr $8887	FPiH:		jsr FConstantRun
>8911	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8915	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$8916					Here1 = *	; remember here
>890c	08					.byte CodeLen	;patch wh_CodeLength
>8916	50 69 2f 34			Name0:	.text "Pi/4"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34970					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>891a	84					.byte (("Pi/4"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>891b	10					.byte WordFlags	;wh_Flags
>891c	03					.byte 3	;wh_CodeLength
>891d	10					  .byte LinkDisplacement	; offset to previous nt
=$891e					XtPtr1 ::= *
=34970					WordListLink ::= Nt0 ; remember the nt of this word for later
.891e	20 87 88	jsr $8887	FPiQ:		jsr FConstantRun
>8921	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8925	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$8926					Here1 = *	; remember here
>891c	08					.byte CodeLen	;patch wh_CodeLength
>8926	32 50 69			Name0:	.text "2Pi"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34985					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8929	23					.byte (("2Pi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>892a	10					.byte WordFlags	;wh_Flags
>892b	03					.byte 3	;wh_CodeLength
>892c	0f					  .byte LinkDisplacement	; offset to previous nt
=$892d					XtPtr1 ::= *
=34985					WordListLink ::= Nt0 ; remember the nt of this word for later
.892d	20 87 88	jsr $8887	F2Pi:		jsr FConstantRun
>8930	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8934	03						.char 3		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$8935					Here1 = *	; remember here
>892b	08					.byte CodeLen	;patch wh_CodeLength
>8935	46 2e 45			Name0:	.text "F.E"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=35000					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8938	a3					.byte (("F.E"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>8939	10					.byte WordFlags	;wh_Flags
>893a	03					.byte 3	;wh_CodeLength
>893b	0f					  .byte LinkDisplacement	; offset to previous nt
=$893c					XtPtr1 ::= *
=35000					WordListLink ::= Nt0 ; remember the nt of this word for later
.893c	20 87 88	jsr $8887	FE:		jsr FConstantRun
>893f	2c 2a fc 56					.dword $56fc2a2c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8943	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$8944					Here1 = *	; remember here
>893a	08					.byte CodeLen	;patch wh_CodeLength
>8944	46 56 61 6c 75 65		Name0:	.text "FValue"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=35018					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>894a	a6					.byte (("FValue"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>894b	18					.byte WordFlags	;wh_Flags
>894c	03					.byte 3	;wh_CodeLength
>894d	12					  .byte LinkDisplacement	; offset to previous nt
=$894e					XtPtr1 ::= *
=35018					WordListLink ::= Nt0 ; remember the nt of this word for later
.894e	20 13 c1	jsr $c113	FValue:		jsr Header_Comma	; compile word header
.8951	a9 5e		lda #$5e			lda #<FValue_runtime	; compile JSR FValue_runtime
.8953	a0 89		ldy #$89			ldy #>FValue_runtime
.8955	20 39 cd	jsr $cd39			jsr Jsr_Comma_YA
.8958	20 de bb	jsr $bbde			jsr adjust_z		; fix word length
.895b	4c a9 86	jmp $86a9			jmp FComma		; alloc & init value
=16					CodeLen	.var *-XtPtr1
=$895e					Here1 = *	; remember here
>894c	10					.byte CodeLen	;patch wh_CodeLength
.895e					FValue_runtime:
.895e	4c 87 88	jmp $8887			jmp FConstantRun
>8961	46 53 63 61 6c 65		Name0:	.text "FScale"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=35047					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8967	a6					.byte (("FScale"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>8968	10					.byte WordFlags	;wh_Flags
>8969	03					.byte 3	;wh_CodeLength
>896a	1d					  .byte LinkDisplacement	; offset to previous nt
=$896b					XtPtr1 ::= *
=35047					WordListLink ::= Nt0 ; remember the nt of this word for later
.896b	20 e7 b3	jsr $b3e7	FScale:		jsr PopA		; pop n
.896e	86 14		stx $14		FScaleA:	stx tmp1		; save data stack index
.8970	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.8972	b4 57		ldy $57,x			ldy FSMant0,x		; mantissa zero?
.8974	f0 07		beq $897d			beq _8
.8976	18		clc				clc
.8977	75 4d		adc $4d,x			adc FSExp,x
.8979	95 4d		sta $4d,x			sta FSExp,x
.897b	70 03		bvs $8980			bvs _overflow		; overflow or underflow?
.897d	a6 14		ldx $14		_8:		ldx tmp1		; restore data stack index
.897f	60		rts				rts
.8980					_overflow:
.8980	a6 14		ldx $14				ldx tmp1		; restore data stack index
.8982	20 62 b4	jsr $b462			jsr Throw_FpOutOfRange
=26					CodeLen	.var *-XtPtr1
=$8985					Here1 = *	; remember here
>8969	1a					.byte CodeLen	;patch wh_CodeLength
>8985	46 32 2a			Name0:	.text "F2*"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=35080					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8988	43					.byte (("F2*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>8989	10					.byte WordFlags	;wh_Flags
>898a	03					.byte 3	;wh_CodeLength
>898b	21					  .byte LinkDisplacement	; offset to previous nt
=$898c					XtPtr1 ::= *
=35080					WordListLink ::= Nt0 ; remember the nt of this word for later
.898c	a9 01		lda #$01	F2Star:		lda #1
.898e	d0 de		bne $896e			bne FScaleA
=4					CodeLen	.var *-XtPtr1
=$8990					Here1 = *	; remember here
>898a	04					.byte CodeLen	;patch wh_CodeLength
>8990	46 32 2f			Name0:	.text "F2/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=35091					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8993	e3					.byte (("F2/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>8994	10					.byte WordFlags	;wh_Flags
>8995	03					.byte 3	;wh_CodeLength
>8996	0b					  .byte LinkDisplacement	; offset to previous nt
=$8997					XtPtr1 ::= *
=35091					WordListLink ::= Nt0 ; remember the nt of this word for later
.8997	a9 ff		lda #$ff	F2Slash:	lda #$ff
.8999	d0 d3		bne $896e			bne FScaleA
=4					CodeLen	.var *-XtPtr1
=$899b					Here1 = *	; remember here
>8995	04					.byte CodeLen	;patch wh_CodeLength
>899b	46 6c 6f 6f 72			Name0:	.text "Floor"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=35104					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>89a0	45					.byte (("Floor"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>89a1	10					.byte WordFlags	;wh_Flags
>89a2	03					.byte 3	;wh_CodeLength
>89a3	0d					  .byte LinkDisplacement	; offset to previous nt
=$89a4					XtPtr1 ::= *
=35104					WordListLink ::= Nt0 ; remember the nt of this word for later
.89a4	a4 4c		ldy $4c		Floor:		ldy FIndex
.89a6	b9 57 00	lda $0057,y			lda FSMant0,y		; negative?
.89a9	10 19		bpl $89c4			bpl _a
.89ab	b9 4d 00	lda $004d,y			lda FSExp,y		; > -1 ?
.89ae	10 14		bpl $89c4			bpl _a
.89b0	a9 80		lda #$80			lda #$80		; return -1
.89b2	99 57 00	sta $0057,y			sta FSMant0,y
.89b5	a9 00		lda #$00			lda #0
.89b7	99 4d 00	sta $004d,y			sta FSExp,y
.89ba	99 61 00	sta $0061,y			sta FSMant1,y
.89bd	99 6b 00	sta $006b,y			sta FSMant2,y
.89c0	99 75 00	sta $0075,y			sta FSMant3,y
.89c3	60		rts				rts
.89c4	a9 1f		lda #$1f	_a:		lda #31
.89c6	20 cc 89	jsr $89cc			jsr FShiftA
.89c9	4c 8f 8a	jmp $8a8f			jmp FNormX
=40					CodeLen	.var *-XtPtr1
=$89cc					Here1 = *	; remember here
>89a2	28					.byte CodeLen	;patch wh_CodeLength
.89cc	86 14		stx $14		FShiftA:	stx tmp1+0		; save data stack index
.89ce	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.89d0	a8		tay		FShiftAX:	tay			; save desired alignment
.89d1	38		sec				sec			; calc bit shift count
.89d2	f5 4d		sbc $4d,x			sbc FSExp,x
.89d4	f0 2e		beq $8a04			beq _leave
.89d6	70 1e		bvs $89f6			bvs _overflow
.89d8	30 2a		bmi $8a04			bmi _leave
.89da	c9 20		cmp #$20			cmp #32
.89dc	b0 1a		bcs $89f8			bcs _zero
.89de	94 4d		sty $4d,x			sty FSExp,x
.89e0	a8		tay				tay
.89e1	b5 57		lda $57,x			lda FSMant0,x
.89e3	c9 80		cmp #$80	_12:		cmp #$80		; mantissa >>=1
.89e5	6a		ror a				ror a
.89e6	76 61		ror $61,x			ror FSMant1,x
.89e8	76 6b		ror $6b,x			ror FSMant2,x
.89ea	76 75		ror $75,x			ror FSMant3,x
.89ec	88		dey				dey
.89ed	d0 f4		bne $89e3			bne _12
.89ef	95 57		sta $57,x			sta FSMant0,x
.89f1	b4 4d		ldy $4d,x	_30:		ldy FSExp,x
.89f3	a6 4c		ldx $4c				ldx FIndex		; restore fp stack index (FShiftAX could have had a funny one)
.89f5	60		rts				rts
.89f6	10 0c		bpl $8a04	_overflow:	bpl _leave
.89f8	94 4d		sty $4d,x	_zero:		sty FSExp,x		; return zero
.89fa	a9 00		lda #$00			lda #0
.89fc	95 57		sta $57,x			sta FSMant0,x
.89fe	95 61		sta $61,x			sta FSMant1,x
.8a00	95 6b		sta $6b,x			sta FSMant2,x
.8a02	95 75		sta $75,x			sta FSMant3,x
.8a04	18		clc		_leave:		clc
.8a05	90 ea		bcc $89f1			bcc _30
>8a07	46 54 72 75 6e 63		Name0:	.text "FTrunc"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=35213					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a0d	66					.byte (("FTrunc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=109					LinkDisplacement = Nt0-WordListLink
>8a0e	10					.byte WordFlags	;wh_Flags
>8a0f	03					.byte 3	;wh_CodeLength
>8a10	6d					  .byte LinkDisplacement	; offset to previous nt
=$8a11					XtPtr1 ::= *
=35213					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a11	a4 4c		ldy $4c		FTrunc:		ldy FIndex
.8a13	b9 57 00	lda $0057,y			lda FSMant0,y
.8a16	10 8c		bpl $89a4			bpl Floor
.8a18	20 8a 8b	jsr $8b8a			jsr FNegate
.8a1b	20 a4 89	jsr $89a4			jsr Floor
.8a1e	4c 8a 8b	jmp $8b8a			jmp FNegate
>8a21	46 52 6f 75 6e 64		Name0:	.text "FRound"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=35239					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a27	86					.byte (("FRound"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>8a28	10					.byte WordFlags	;wh_Flags
>8a29	03					.byte 3	;wh_CodeLength
>8a2a	1a					  .byte LinkDisplacement	; offset to previous nt
=$8a2b					XtPtr1 ::= *
=35239					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a2b	a9 1f		lda #$1f	FRound:		lda #31
.8a2d	20 cc 89	jsr $89cc			jsr FShiftA
.8a30	90 05		bcc $8a37			bcc _15
.8a32	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8a34	4c 49 8b	jmp $8b49			jmp F1Plus
.8a37	4c 8f 8a	jmp $8a8f	_15:		jmp FNormX
=15					CodeLen	.var *-XtPtr1
=$8a3a					Here1 = *	; remember here
>8a29	0f					.byte CodeLen	;patch wh_CodeLength
>8a3a	46 49 6e 74 46 72 63		Name0:	.text "FIntFrc"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=35265					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a41	67					.byte (("FIntFrc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>8a42	10					.byte WordFlags	;wh_Flags
>8a43	03					.byte 3	;wh_CodeLength
>8a44	1a					  .byte LinkDisplacement	; offset to previous nt
=$8a45					XtPtr1 ::= *
=35265					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a45	20 4d 85	jsr $854d	FIntFrc:	jsr FDup	; ( r1 r1 )
.8a48	20 a4 89	jsr $89a4			jsr Floor	; ( r1 rint )
.8a4b	20 09 86	jsr $8609			jsr FTuck	; ( rint r1 rint )
.8a4e	20 55 8b	jsr $8b55			jsr FMinus	; ( rint rfrac )
.8a51	4c d1 85	jmp $85d1			jmp FSwap	; ( rfrac rint )
=15					CodeLen	.var *-XtPtr1
=$8a54					Here1 = *	; remember here
>8a43	0f					.byte CodeLen	;patch wh_CodeLength
>8a54	46 4d 41 6c 69 67 6e 58		Name0:	.text "FMAlignX"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=35292					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a5c	08					.byte (("FMAlignX"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>8a5d	10					.byte WordFlags	;wh_Flags
>8a5e	03					.byte 3	;wh_CodeLength
>8a5f	1b					  .byte LinkDisplacement	; offset to previous nt
=$8a60					XtPtr1 ::= *
=35292					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a60	86 14		stx $14		FMAlignX:	stx tmp1+0	; save data stack index
.8a62	a6 4c		ldx $4c				ldx FIndex	; load FP stack index
.8a64	e0 09		cpx #$09			cpx #FDim-1	; check FP stack for >=2 entries
.8a66	b0 19		bcs $8a81			bcs Throw_FPStack_3
.8a68	b5 4d		lda $4d,x			lda FSExp+0,x	; compare exponents
.8a6a	38		sec				sec
.8a6b	f5 4e		sbc $4e,x			sbc FSExp+1,x
.8a6d	30 03		bmi $8a72			bmi _1		; r1 smaller?
.8a6f	d0 08		bne $8a79			bne _2		; r2 smaller?
.8a71	60		rts				rts
.8a72					_1:
.8a72	70 07		bvs $8a7b			bvs _2b		; was this a big positive #?
.8a74	b5 4e		lda $4e,x	_1b:		lda FSExp+1,x	; make r1 like r2
.8a76	4c d0 89	jmp $89d0			jmp FShiftAX
.8a79					_2:
.8a79	70 f7		bvs $8a72			bvs _1		; was this a big negative #?
.8a7b	b5 4d		lda $4d,x	_2b:		lda FSExp+0,x	; make r2 like r1
.8a7d	e8		inx				inx
.8a7e	4c d0 89	jmp $89d0			jmp FShiftAX
=33					CodeLen	.var *-XtPtr1
=$8a81					Here1 = *	; remember here
>8a5e	21					.byte CodeLen	;patch wh_CodeLength
.8a81	20 58 b4	jsr $b458	Throw_FPStack_3: jsr Throw_FPStack
>8a84	46 4e 6f 72 6d			Name0:	.text "FNorm"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=35337					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a89	a5					.byte (("FNorm"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>8a8a	10					.byte WordFlags	;wh_Flags
>8a8b	03					.byte 3	;wh_CodeLength
>8a8c	2d					  .byte LinkDisplacement	; offset to previous nt
=$8a8d					XtPtr1 ::= *
=35337					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a8d	86 14		stx $14		FNorm:		stx tmp1+0		; save data stack index
.8a8f	a6 4c		ldx $4c		FNormX:		ldx FIndex		; switch to FP stack
.8a91	b4 4d		ldy $4d,x			ldy FSExp,x
.8a93	b5 57		lda $57,x			lda FSMant0,x		; mantissa negative?
.8a95	30 2d		bmi $8ac4			bmi _Neg
.8a97	d0 0f		bne $8aa8			bne _Pos2		; do byte shift
.8a99	20 f7 8a	jsr $8af7			jsr _ShiftB
.8a9c	d0 0a		bne $8aa8			bne _Pos2
.8a9e	20 f7 8a	jsr $8af7			jsr _ShiftB
.8aa1	d0 05		bne $8aa8			bne _Pos2
.8aa3	20 f7 8a	jsr $8af7			jsr _ShiftB
.8aa6	f0 43		beq $8aeb			beq _zero		; no significant bits left?
.8aa8	18		clc		_Pos2:		clc
.8aa9	30 0a		bmi $8ab5			bmi _RShft
.8aab	88		dey		_Pos3:		dey			; do bit shift
.8aac	16 75		asl $75,x			asl FSMant3,x
.8aae	36 6b		rol $6b,x			rol FSMant2,x
.8ab0	36 61		rol $61,x			rol FSMant1,x
.8ab2	2a		rol a				rol a
.8ab3	10 f6		bpl $8aab			bpl _Pos3
.8ab5					_RShft:
.8ab5	c8		iny				iny
.8ab6	6a		ror a				ror a
.8ab7	76 61		ror $61,x			ror FSMant1,x
.8ab9	76 6b		ror $6b,x			ror FSMant2,x
.8abb	76 75		ror $75,x			ror FSMant3,x
.8abd					_28:
.8abd	95 57		sta $57,x			sta FSMant0,x
.8abf	94 4d		sty $4d,x			sty FSExp,x
.8ac1	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.8ac3	60		rts				rts
.8ac4					_Neg:
.8ac4	c9 ff		cmp #$ff			cmp #$ff
.8ac6	d0 11		bne $8ad9			bne _Neg2	; do byte shift
.8ac8	20 f7 8a	jsr $8af7			jsr _ShiftB
.8acb	c9 ff		cmp #$ff			cmp #$ff
.8acd	d0 0a		bne $8ad9			bne _Neg2
.8acf	20 f7 8a	jsr $8af7			jsr _ShiftB
.8ad2	c9 ff		cmp #$ff			cmp #$ff
.8ad4	d0 03		bne $8ad9			bne _Neg2
.8ad6	20 f7 8a	jsr $8af7			jsr _ShiftB
.8ad9	c9 00		cmp #$00	_Neg2:		cmp #0
.8adb	10 d8		bpl $8ab5			bpl _RShft
.8add	88		dey		_Neg3:		dey
.8ade	16 75		asl $75,x			asl FSMant3,x
.8ae0	36 6b		rol $6b,x			rol FSMant2,x
.8ae2	36 61		rol $61,x			rol FSMant1,x
.8ae4	2a		rol a				rol a
.8ae5	30 f6		bmi $8add			bmi _Neg3
.8ae7	10 cc		bpl $8ab5			bpl _RShft
.8ae9	68		pla		_Zerop:		pla
.8aea	68		pla				pla		; pop rts addr from _ShiftB
.8aeb	a9 00		lda #$00	_zero:		lda #0
.8aed	95 75		sta $75,x			sta FSMant3,x
.8aef	95 6b		sta $6b,x			sta FSMant2,x
.8af1	95 61		sta $61,x			sta FSMant1,x
.8af3	a0 80		ldy #$80			ldy #$80
.8af5	d0 c6		bne $8abd			bne _28
.8af7					_ShiftB:
.8af7	98		tya				tya		; exponent -= 8
.8af8	38		sec				sec
.8af9	e9 08		sbc #$08			sbc #8
.8afb	a8		tay				tay
.8afc	70 eb		bvs $8ae9			bvs _zerop	;is this useful? do we need more of them?
.8afe	b5 61		lda $61,x			lda FSMant1,x
.8b00	48		pha				pha
.8b01	b5 6b		lda $6b,x			lda FSMant2,x
.8b03	95 61		sta $61,x			sta FSMant1,x
.8b05	b5 75		lda $75,x			lda FSMant3,x
.8b07	95 6b		sta $6b,x			sta FSMant2,x
.8b09	a9 00		lda #$00			lda #0
.8b0b	95 75		sta $75,x			sta FSMant3,x
.8b0d	68		pla				pla
.8b0e	60		rts				rts
=130					CodeLen	.var *-XtPtr1
=$8b0f					Here1 = *	; remember here
>8a8b	82					.byte CodeLen	;patch wh_CodeLength
>8b0f	46 2b				Name0:	.text "F+"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=35473					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b11	62					.byte (("F+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=136					LinkDisplacement = Nt0-WordListLink
>8b12	10					.byte WordFlags	;wh_Flags
>8b13	03					.byte 3	;wh_CodeLength
>8b14	88					  .byte LinkDisplacement	; offset to previous nt
=$8b15					XtPtr1 ::= *
=35473					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b15	20 60 8a	jsr $8a60	FPlus:		jsr FMAlignX	; align mantissas, X= fp stack index
.8b18	18		clc				clc		; add mantissas
.8b19	b5 76		lda $76,x			lda FSMant3+1,x
.8b1b	75 75		adc $75,x			adc FSMant3+0,x
.8b1d	95 76		sta $76,x			sta FSMant3+1,x
.8b1f	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b21	75 6b		adc $6b,x			adc FSMant2+0,x
.8b23	95 6c		sta $6c,x			sta FSMant2+1,x
.8b25	b5 62		lda $62,x			lda FSMant1+1,x
.8b27	75 61		adc $61,x			adc FSMant1+0,x
.8b29	95 62		sta $62,x			sta FSMant1+1,x
.8b2b	b5 58		lda $58,x			lda FSMant0+1,x
.8b2d	75 57		adc $57,x			adc FSMant0+0,x
.8b2f					FPlusFin:
.8b2f	e8		inx				inx		; FDrop r2
.8b30	86 4c		stx $4c				stx FIndex
.8b32	50 09		bvc $8b3d	FPlusFin3:	bvc _19		; if overflow
.8b34	6a		ror a				ror a		;   shift mantissa right 1 bit
.8b35	76 61		ror $61,x			ror FSMant1,x
.8b37	76 6b		ror $6b,x			ror FSMant2,x
.8b39	76 75		ror $75,x			ror FSMant3,x
.8b3b	f6 4d		inc $4d,x			inc FSExp,x	;   adjust exponent
.8b3d					_19:
.8b3d	95 57		sta $57,x			sta FSMant0,x
.8b3f	4c 8f 8a	jmp $8a8f			jmp FNormX	; normalize, return
=45					CodeLen	.var *-XtPtr1
=$8b42					Here1 = *	; remember here
>8b13	2d					.byte CodeLen	;patch wh_CodeLength
>8b42	46 31 2b			Name0:	.text "F1+"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=35525					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b45	63					.byte (("F1+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>8b46	10					.byte WordFlags	;wh_Flags
>8b47	03					.byte 3	;wh_CodeLength
>8b48	34					  .byte LinkDisplacement	; offset to previous nt
=$8b49					XtPtr1 ::= *
=35525					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b49	20 e3 88	jsr $88e3	F1Plus:		jsr F1
.8b4c	4c 15 8b	jmp $8b15			jmp FPlus
=6					CodeLen	.var *-XtPtr1
=$8b4f					Here1 = *	; remember here
>8b47	06					.byte CodeLen	;patch wh_CodeLength
>8b4f	46 2d				Name0:	.text "F-"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=35537					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b51	a2					.byte (("F-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>8b52	10					.byte WordFlags	;wh_Flags
>8b53	03					.byte 3	;wh_CodeLength
>8b54	0c					  .byte LinkDisplacement	; offset to previous nt
=$8b55					XtPtr1 ::= *
=35537					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b55	20 60 8a	jsr $8a60	FMinus:		jsr FMAlignX	; align mantissas
.8b58	38		sec				sec		; subtract mantissas
.8b59	b5 76		lda $76,x			lda FSMant3+1,x
.8b5b	f5 75		sbc $75,x			sbc FSMant3+0,x
.8b5d	95 76		sta $76,x			sta FSMant3+1,x
.8b5f	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b61	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8b63	95 6c		sta $6c,x			sta FSMant2+1,x
.8b65	b5 62		lda $62,x			lda FSMant1+1,x
.8b67	f5 61		sbc $61,x			sbc FSMant1+0,x
.8b69	95 62		sta $62,x			sta FSMant1+1,x
.8b6b	b5 58		lda $58,x			lda FSMant0+1,x
.8b6d	f5 57		sbc $57,x			sbc FSMant0+0,x
.8b6f	4c 2f 8b	jmp $8b2f			jmp FPlusFin
=29					CodeLen	.var *-XtPtr1
=$8b72					Here1 = *	; remember here
>8b53	1d					.byte CodeLen	;patch wh_CodeLength
>8b72	46 31 2d			Name0:	.text "F1-"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=35573					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b75	a3					.byte (("F1-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>8b76	10					.byte WordFlags	;wh_Flags
>8b77	03					.byte 3	;wh_CodeLength
>8b78	24					  .byte LinkDisplacement	; offset to previous nt
=$8b79					XtPtr1 ::= *
=35573					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b79	20 e3 88	jsr $88e3	F1Minus:	jsr F1
.8b7c	4c 55 8b	jmp $8b55			jmp FMinus
=6					CodeLen	.var *-XtPtr1
=$8b7f					Here1 = *	; remember here
>8b77	06					.byte CodeLen	;patch wh_CodeLength
>8b7f	46 4e 65 67 61 74 65		Name0:	.text "FNegate"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=35590					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b86	a7					.byte (("FNegate"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>8b87	10					.byte WordFlags	;wh_Flags
>8b88	03					.byte 3	;wh_CodeLength
>8b89	11					  .byte LinkDisplacement	; offset to previous nt
=$8b8a					XtPtr1 ::= *
=35590					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b8a	86 14		stx $14		FNegate:	stx tmp1	; save data stack index
.8b8c	a6 4c		ldx $4c				ldx FIndex	; X= FP stack index
.8b8e	38		sec				sec		; mantissa = 0 - mantissa
.8b8f	a9 00		lda #$00			lda #0
.8b91	f5 75		sbc $75,x			sbc FSMant3,x
.8b93	95 75		sta $75,x			sta FSMant3,x
.8b95	a9 00		lda #$00			lda #0
.8b97	f5 6b		sbc $6b,x			sbc FSMant2,x
.8b99	95 6b		sta $6b,x			sta FSMant2,x
.8b9b	a9 00		lda #$00			lda #0
.8b9d	f5 61		sbc $61,x			sbc FSMant1,x
.8b9f	95 61		sta $61,x			sta FSMant1,x
.8ba1	a9 00		lda #$00			lda #0
.8ba3	f5 57		sbc $57,x			sbc FSMant0,x
.8ba5	4c 32 8b	jmp $8b32			jmp FPlusFin3	; finish up, return
=30					CodeLen	.var *-XtPtr1
=$8ba8					Here1 = *	; remember here
>8b88	1e					.byte CodeLen	;patch wh_CodeLength
>8ba8	46 41 62 73			Name0:	.text "FAbs"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=35628					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8bac	64					.byte (("FAbs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>8bad	10					.byte WordFlags	;wh_Flags
>8bae	03					.byte 3	;wh_CodeLength
>8baf	26					  .byte LinkDisplacement	; offset to previous nt
=$8bb0					XtPtr1 ::= *
=35628					WordListLink ::= Nt0 ; remember the nt of this word for later
.8bb0	a4 4c		ldy $4c		FAbs:		ldy FIndex
.8bb2	b9 57 00	lda $0057,y			lda FSMant0,y		; mantissa negative?
.8bb5	30 d3		bmi $8b8a			bmi FNegate
.8bb7	60		rts				rts
=8					CodeLen	.var *-XtPtr1
=$8bb8					Here1 = *	; remember here
>8bae	08					.byte CodeLen	;patch wh_CodeLength
.8bb8	4c 58 b4	jmp $b458	Throw_FPStack_4: jmp Throw_FPStack
.8bbb	a4 4c		ldy $4c		FPos:		ldy FIndex		; load FP stack index
.8bbd	c0 09		cpy #$09			cpy #FDim-1		; check FP stack for 2
.8bbf	b0 f7		bcs $8bb8			bcs Throw_FPStack_4
.8bc1	b9 57 00	lda $0057,y			lda FSMant0+0,y		; calc result sign
.8bc4	59 58 00	eor $0058,y			eor FSMant0+1,y
.8bc7	08		php				php
.8bc8	b9 58 00	lda $0058,y			lda FSMant0+1,y		; if NOS negative
.8bcb	10 07		bpl $8bd4			bpl +
.8bcd	e6 4c		inc $4c				inc FIndex		;   point at NOS
.8bcf	20 8a 8b	jsr $8b8a			jsr FNegate		;   negate NOS
.8bd2	c6 4c		dec $4c				dec FIndex		;   restore fp
.8bd4					+
.8bd4	20 b0 8b	jsr $8bb0			jsr FAbs		; abs TOS
.8bd7	86 14		stx $14				stx tmp1+0		; save data stack index
.8bd9	a6 4c		ldx $4c				ldx FIndex		; load FP stack index
.8bdb	28		plp				plp			; restore sign flag
.8bdc	60		rts				rts
>8bdd	46 2a				Name0:	.text "F*"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=35679					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8bdf	42					.byte (("F*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=51					LinkDisplacement = Nt0-WordListLink
>8be0	10					.byte WordFlags	;wh_Flags
>8be1	03					.byte 3	;wh_CodeLength
>8be2	33					  .byte LinkDisplacement	; offset to previous nt
=$8be3					XtPtr1 ::= *
=35679					WordListLink ::= Nt0 ; remember the nt of this word for later
.8be3					FStar:
.8be3	20 bb 8b	jsr $8bbb			jsr FPos		; make r1 & r2 positive,
.8be6	08		php				php			;   save r3 sign
.8be7	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8be9	38		sec				sec
.8bea	75 4e		adc $4e,x			adc FSExp+1,x
.8bec	95 4e		sta $4e,x			sta FSExp+1,x
.8bee	50 12		bvc $8c02			bvc _49			; IfVs,
.8bf0	b0 06		bcs $8bf8			bcs _zero		;   underflow?
.8bf2	a6 14		ldx $14				ldx tmp1+0		;   restore data stack index
.8bf4	28		plp				plp			; RDrop sign flag
.8bf5	20 62 b4	jsr $b462			jsr Throw_FpOutOfRange
.8bf8	e8		inx		_zero:		inx			; F2Drop r1 & r2
.8bf9	e8		inx				inx
.8bfa	86 4c		stx $4c				stx FIndex
.8bfc	28		plp				plp			; RDrop saved result sign
.8bfd	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8bff	4c ab 88	jmp $88ab			jmp F0			; return zero
.8c02					_49:
.8c02	a9 00		lda #$00			lda #0			; tmp32= 0
.8c04	85 16		sta $16				sta tmp2+0
.8c06	85 17		sta $17				sta tmp2+1
.8c08	85 18		sta $18				sta tmp3+0
.8c0a	85 19		sta $19				sta tmp3+1
.8c0c	b5 76		lda $76,x			lda FSMant3+1,x
.8c0e	20 3d 8c	jsr $8c3d			jsr _Byte		; do bytes of r1 mantissa
.8c11	b5 6c		lda $6c,x			lda FSMant2+1,x
.8c13	20 3d 8c	jsr $8c3d			jsr _Byte
.8c16	b5 62		lda $62,x			lda FSMant1+1,x
.8c18	20 3d 8c	jsr $8c3d			jsr _Byte
.8c1b	b5 58		lda $58,x			lda FSMant0+1,x
.8c1d	20 3d 8c	jsr $8c3d			jsr _Byte
.8c20	a5 16		lda $16				lda tmp2+0		; r1.mant= tmp32
.8c22	95 76		sta $76,x			sta FSMant3+1,x
.8c24	a5 17		lda $17				lda tmp2+1
.8c26	95 6c		sta $6c,x			sta FSMant2+1,x
.8c28	a5 18		lda $18				lda tmp3+0
.8c2a	95 62		sta $62,x			sta FSMant1+1,x
.8c2c	a5 19		lda $19				lda tmp3+1
.8c2e	95 58		sta $58,x			sta FSMant0+1,x
.8c30	e6 4c		inc $4c				inc FIndex		; FDrop
.8c32	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c34	28		plp				plp			; fix result sign
.8c35	10 03		bpl $8c3a			bpl +
.8c37	4c 8a 8b	jmp $8b8a			jmp FNegate
.8c3a					+
.8c3a	4c 8d 8a	jmp $8a8d			jmp FNorm
.8c3d					_Byte:
.8c3d	49 ff		eor #$ff			eor #$ff
.8c3f	85 15		sta $15				sta tmp1+1
.8c41	a0 08		ldy #$08			ldy #8			; for each bit in byte
.8c43	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8c45	b0 18		bcs $8c5f			bcs _b3
.8c47	a5 16		lda $16				lda tmp2+0		;     tmp32 += r2
.8c49	75 75		adc $75,x			adc FSMant3+0,x
.8c4b	85 16		sta $16				sta tmp2+0
.8c4d	a5 17		lda $17				lda tmp2+1
.8c4f	75 6b		adc $6b,x			adc FSMant2+0,x
.8c51	85 17		sta $17				sta tmp2+1
.8c53	a5 18		lda $18				lda tmp3+0
.8c55	75 61		adc $61,x			adc FSMant1+0,x
.8c57	85 18		sta $18				sta tmp3+0
.8c59	a5 19		lda $19				lda tmp3+1
.8c5b	75 57		adc $57,x			adc FSMant0+0,x
.8c5d	85 19		sta $19				sta tmp3+1
.8c5f	46 19		lsr $19		_b3:		lsr tmp3+1		;   tmp32 >>= 1
.8c61	66 18		ror $18				ror tmp3+0
.8c63	66 17		ror $17				ror tmp2+1
.8c65	66 16		ror $16				ror tmp2+0
.8c67	88		dey				dey			;  next bit
.8c68	d0 d9		bne $8c43			bne _b1
.8c6a	60		rts				rts
=136					CodeLen	.var *-XtPtr1
=$8c6b					Here1 = *	; remember here
>8be1	88					.byte CodeLen	;patch wh_CodeLength
>8c6b	46 53 71 72			Name0:	.text "FSqr"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=35823					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8c6f	44					.byte (("FSqr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=144					LinkDisplacement = Nt0-WordListLink
>8c70	10					.byte WordFlags	;wh_Flags
>8c71	03					.byte 3	;wh_CodeLength
>8c72	90					  .byte LinkDisplacement	; offset to previous nt
=$8c73					XtPtr1 ::= *
=35823					WordListLink ::= Nt0 ; remember the nt of this word for later
.8c73	20 4d 85	jsr $854d	FSqr:		jsr FDup
.8c76	4c e3 8b	jmp $8be3			jmp FStar
=6					CodeLen	.var *-XtPtr1
=$8c79					Here1 = *	; remember here
>8c71	06					.byte CodeLen	;patch wh_CodeLength
>8c79	46 31 30 2a			Name0:	.text "F10*"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=35837					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8c7d	44					.byte (("F10*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>8c7e	10					.byte WordFlags	;wh_Flags
>8c7f	03					.byte 3	;wh_CodeLength
>8c80	0e					  .byte LinkDisplacement	; offset to previous nt
=$8c81					XtPtr1 ::= *
=35837					WordListLink ::= Nt0 ; remember the nt of this word for later
.8c81	20 4d 85	jsr $854d	F10Star:	jsr FDup
.8c84	a4 4c		ldy $4c				ldy FIndex
.8c86	b9 4d 00	lda $004d,y			lda FSExp+0,y
.8c89	18		clc				clc
.8c8a	69 01		adc #$01			adc #1
.8c8c	99 4d 00	sta $004d,y			sta FSExp+0,y
.8c8f	18		clc				clc
.8c90	69 02		adc #$02			adc #2
.8c92	99 4e 00	sta $004e,y			sta FSExp+1,y
.8c95	4c 15 8b	jmp $8b15			jmp FPlus
=23					CodeLen	.var *-XtPtr1
=$8c98					Here1 = *	; remember here
>8c7f	17					.byte CodeLen	;patch wh_CodeLength
>8c98	46 2f				Name0:	.text "F/"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=35866					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8c9a	e2					.byte (("F/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>8c9b	10					.byte WordFlags	;wh_Flags
>8c9c	03					.byte 3	;wh_CodeLength
>8c9d	1d					  .byte LinkDisplacement	; offset to previous nt
=$8c9e					XtPtr1 ::= *
=35866					WordListLink ::= Nt0 ; remember the nt of this word for later
.8c9e	20 bb 8b	jsr $8bbb	FSlash:		jsr FPos		; make r1 & r2 positive
.8ca1	08		php				php			;   save result sign
.8ca2	b5 4e		lda $4e,x			lda FSExp+1,x		; calc exponent
.8ca4	18		clc				clc
.8ca5	69 01		adc #$01			adc #1
.8ca7	38		sec				sec
.8ca8	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8caa	95 4e		sta $4e,x			sta FSExp+1,x
.8cac	50 12		bvc $8cc0			bvc _49			;  IfVs
.8cae	b0 06		bcs $8cb6			bcs _Zero		; underflow?
.8cb0	28		plp				plp			; drop saved result sign
.8cb1	a6 15		ldx $15				ldx tmp1+1		; restore data stack index
.8cb3	20 62 b4	jsr $b462			jsr Throw_FpOutOfRange	; overflow
.8cb6	e8		inx		_Zero:		inx			; F2Drop
.8cb7	e8		inx				inx
.8cb8	86 4c		stx $4c				stx FIndex
.8cba	28		plp				plp			; drop saved result sign
.8cbb	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8cbd	4c ab 88	jmp $88ab			jmp F0			; return 0
.8cc0					_49:
.8cc0	b5 76		lda $76,x			lda FSMant3+1,x		; tmp32 = r1
.8cc2	85 16		sta $16				sta tmp2+0
.8cc4	b5 6c		lda $6c,x			lda FSMant2+1,x
.8cc6	85 17		sta $17				sta tmp2+1
.8cc8	b5 62		lda $62,x			lda FSMant1+1,x
.8cca	85 18		sta $18				sta tmp3+0
.8ccc	b5 58		lda $58,x			lda FSMant0+1,x
.8cce	85 19		sta $19				sta tmp3+1
.8cd0	20 f9 8c	jsr $8cf9			jsr _Byte
.8cd3	95 58		sta $58,x			sta FSMant0+1,x
.8cd5	20 f9 8c	jsr $8cf9			jsr _Byte
.8cd8	95 62		sta $62,x			sta FSMant1+1,x
.8cda	20 f9 8c	jsr $8cf9			jsr _Byte
.8cdd	95 6c		sta $6c,x			sta FSMant2+1,x
.8cdf	20 f9 8c	jsr $8cf9			jsr _Byte
.8ce2	95 76		sta $76,x			sta FSMant3+1,x
.8ce4	56 58		lsr $58,x			lsr FSMant0+1,x
.8ce6	76 62		ror $62,x			ror FSMant1+1,x
.8ce8	76 6c		ror $6c,x			ror FSMant2+1,x
.8cea	76 76		ror $76,x			ror FSMant3+1,x
.8cec	e6 4c		inc $4c				inc FIndex		; FDrop
.8cee	a6 14		ldx $14				ldx tmp1+0		; restore X
.8cf0	28		plp				plp			; fix sign
.8cf1	10 03		bpl $8cf6			bpl +
.8cf3	20 8a 8b	jsr $8b8a			jsr FNegate
.8cf6	4c 8d 8a	jmp $8a8d	+		jmp FNorm
.8cf9					_Byte:
.8cf9	a0 08		ldy #$08			ldy #8			; for 8 bits
.8cfb					_1:
.8cfb	a5 19		lda $19				lda tmp3+1		;   if r1>=r2
.8cfd	d5 57		cmp $57,x			cmp FSMant0+0,x
.8cff	d0 10		bne $8d11			bne _4
.8d01	a5 18		lda $18				lda tmp3+0
.8d03	d5 61		cmp $61,x			cmp FSMant1+0,x
.8d05	d0 0a		bne $8d11			bne _4
.8d07	a5 17		lda $17				lda tmp2+1
.8d09	d5 6b		cmp $6b,x			cmp FSMant2+0,x
.8d0b	d0 04		bne $8d11			bne _4
.8d0d	a5 16		lda $16				lda tmp2+0
.8d0f	d5 75		cmp $75,x			cmp FSMant3+0,x
.8d11	90 18		bcc $8d2b	_4:		bcc _2
.8d13	a5 16		lda $16				lda tmp2+0		;     tmp32 -= r2
.8d15	f5 75		sbc $75,x			sbc FSMant3+0,x
.8d17	85 16		sta $16				sta tmp2+0
.8d19	a5 17		lda $17				lda tmp2+1
.8d1b	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8d1d	85 17		sta $17				sta tmp2+1
.8d1f	a5 18		lda $18				lda tmp3+0
.8d21	f5 61		sbc $61,x			sbc FSMant1+0,x
.8d23	85 18		sta $18				sta tmp3+0
.8d25	a5 19		lda $19				lda tmp3+1
.8d27	f5 57		sbc $57,x			sbc FSMant0+0,x
.8d29	85 19		sta $19				sta tmp3+1
.8d2b	26 15		rol $15		_2:		rol tmp1+1		;   accum quotient bits
.8d2d	06 16		asl $16				asl tmp2+0
.8d2f	26 17		rol $17				rol tmp2+1
.8d31	26 18		rol $18				rol tmp3+0
.8d33	26 19		rol $19				rol tmp3+1		;   tmp32<<=1
.8d35	88		dey				dey			;  next
.8d36	d0 c3		bne $8cfb			bne _1
.8d38	a5 15		lda $15				lda tmp1+1		; return bits
.8d3a	60		rts				rts
=157					CodeLen	.var *-XtPtr1
=$8d3b					Here1 = *	; remember here
>8c9c	9d					.byte CodeLen	;patch wh_CodeLength
>8d3b	46 31 2f			Name0:	.text "F1/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36030					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8d3e	e3					.byte (("F1/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=164					LinkDisplacement = Nt0-WordListLink
>8d3f	10					.byte WordFlags	;wh_Flags
>8d40	03					.byte 3	;wh_CodeLength
>8d41	a4					  .byte LinkDisplacement	; offset to previous nt
=$8d42					XtPtr1 ::= *
=36030					WordListLink ::= Nt0 ; remember the nt of this word for later
.8d42	20 e3 88	jsr $88e3	F1Slash:	jsr F1
.8d45	20 d1 85	jsr $85d1			jsr FSwap
.8d48	4c 9e 8c	jmp $8c9e			jmp FSlash
=9					CodeLen	.var *-XtPtr1
=$8d4b					Here1 = *	; remember here
>8d40	09					.byte CodeLen	;patch wh_CodeLength
>8d4b	45 2a				Name0:	.text "E*"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=36045					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8d4d	42					.byte (("E*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>8d4e	10					.byte WordFlags	;wh_Flags
>8d4f	03					.byte 3	;wh_CodeLength
>8d50	0f					  .byte LinkDisplacement	; offset to previous nt
=$8d51					XtPtr1 ::= *
=36045					WordListLink ::= Nt0 ; remember the nt of this word for later
.8d51					EStar:
.8d51	20 bb 8b	jsr $8bbb			jsr FPos		; make r1 & r2 positive
.8d54	08		php				php			;   remember result sign
.8d55	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8d57	38		sec				sec
.8d58	75 4e		adc $4e,x			adc FSExp+1,x
.8d5a	95 4e		sta $4e,x			sta FSExp+1,x
.8d5c	70 1b		bvs $8d79			bvs _ExpOvfl
.8d5e	a0 00		ldy #$00			ldy #0
.8d60	84 16		sty $16				sty tmp2+0
.8d62	84 17		sty $17				sty tmp2+1		; zero result
.8d64	b5 62		lda $62,x			lda FSMant1+1,x
.8d66	20 88 8d	jsr $8d88			jsr _Byte		; do FSMant1+1 byte
.8d69	b5 58		lda $58,x			lda FSMant0+1,x
.8d6b	20 88 8d	jsr $8d88			jsr _Byte		; do FSMant0+1 byte
.8d6e	a5 16		lda $16				lda tmp2+0		; r3 = tmp2
.8d70	95 62		sta $62,x			sta FSMant1+1,x
.8d72	a5 17		lda $17				lda tmp2+1
.8d74	95 58		sta $58,x			sta FSMant0+1,x
.8d76	4c a6 8d	jmp $8da6			jmp EFix3		; finish
.8d79					_ExpOvfl:
.8d79	b0 05		bcs $8d80			bcs _Zero		;underflow?
.8d7b	a6 14		ldx $14				ldx tmp1+0		; restore X
.8d7d	20 62 b4	jsr $b462			jsr Throw_FpOutOfRange	;overflow
.8d80	a9 00		lda #$00	_Zero:		lda #0
.8d82	95 62		sta $62,x			sta FSMant1+1,x
.8d84	95 58		sta $58,x			sta FSMant0+1,x
.8d86	f0 1e		beq $8da6			beq EFix3
.8d88					_Byte:
.8d88	49 ff		eor #$ff			eor #$ff
.8d8a	85 15		sta $15				sta tmp1+1
.8d8c	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d8e	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8d90	b0 0c		bcs $8d9e			bcs _b5
.8d92	a5 16		lda $16				lda tmp2+0		;     tmp2 += r2
.8d94	75 61		adc $61,x			adc FSMant1+0,x
.8d96	85 16		sta $16				sta tmp2+0
.8d98	a5 17		lda $17				lda tmp2+1
.8d9a	75 57		adc $57,x			adc FSMant0+0,x
.8d9c	85 17		sta $17				sta tmp2+1
.8d9e	46 17		lsr $17		_b5:		lsr tmp2+1		;   tmp2 <<= 1
.8da0	66 16		ror $16				ror tmp2+0
.8da2	88		dey				dey			;  next bit
.8da3	d0 e9		bne $8d8e			bne _b1
.8da5	60		rts				rts
=85					CodeLen	.var *-XtPtr1
=$8da6					Here1 = *	; remember here
>8d4f	55					.byte CodeLen	;patch wh_CodeLength
.8da6					EFix3:
.8da6	a9 00		lda #$00			lda #0			; zero unused mantissa
.8da8	95 6c		sta $6c,x			sta FSMant2+1,x
.8daa	95 76		sta $76,x			sta FSMant3+1,x
.8dac	e6 4c		inc $4c				inc FIndex		; FDrop
.8dae	a6 14		ldx $14				ldx tmp1+0		; restore X
.8db0	28		plp				plp			;fix result sign
.8db1	10 03		bpl $8db6			bpl +
.8db3	4c 8a 8b	jmp $8b8a			jmp FNegate
.8db6	4c 8d 8a	jmp $8a8d	+		jmp FNorm
>8db9	45 53 71 72			Name0:	.text "ESqr"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=36157					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8dbd	44					.byte (("ESqr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=112					LinkDisplacement = Nt0-WordListLink
>8dbe	10					.byte WordFlags	;wh_Flags
>8dbf	03					.byte 3	;wh_CodeLength
>8dc0	70					  .byte LinkDisplacement	; offset to previous nt
=$8dc1					XtPtr1 ::= *
=36157					WordListLink ::= Nt0 ; remember the nt of this word for later
.8dc1	20 4d 85	jsr $854d	ESqr:		jsr FDup
.8dc4	4c 51 8d	jmp $8d51			jmp EStar
=6					CodeLen	.var *-XtPtr1
=$8dc7					Here1 = *	; remember here
>8dbf	06					.byte CodeLen	;patch wh_CodeLength
>8dc7	45 2f				Name0:	.text "E/"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=36169					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8dc9	e2					.byte (("E/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>8dca	10					.byte WordFlags	;wh_Flags
>8dcb	03					.byte 3	;wh_CodeLength
>8dcc	0c					  .byte LinkDisplacement	; offset to previous nt
=$8dcd					XtPtr1 ::= *
=36169					WordListLink ::= Nt0 ; remember the nt of this word for later
.8dcd	20 bb 8b	jsr $8bbb	ESlash:		jsr FPos	; make r1 & r2 positive
.8dd0	08		php				php		; remember result sign
.8dd1	b5 4e		lda $4e,x			lda FSExp+1,x		; calc r3 exponent
.8dd3	38		sec				sec
.8dd4	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8dd6	70 17		bvs $8def			bvs _ExpOvfl
.8dd8	18		clc				clc
.8dd9	69 01		adc #$01			adc #1
.8ddb	95 4e		sta $4e,x			sta FSExp+1,x
.8ddd	20 f5 8d	jsr $8df5			jsr _Byte		; gen quotient hi byte
.8de0	48		pha				pha
.8de1	20 f5 8d	jsr $8df5			jsr _Byte		; gen quotient lo byte
.8de4	95 62		sta $62,x			sta FSMant1+1,x
.8de6	68		pla				pla
.8de7	4a		lsr a				lsr a
.8de8	95 58		sta $58,x			sta FSMant0+1,x
.8dea	76 62		ror $62,x			ror FSMant1+1,x
.8dec	4c a6 8d	jmp $8da6			jmp EFix3
.8def					_ExpOvfl:
.8def	28		plp				plp			; rdrop saved result sign
.8df0	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8df2	20 62 b4	jsr $b462			jsr Throw_FpOutOfRange	; overflow
.8df5					_Byte:
.8df5	a0 08		ldy #$08			ldy #8			; for 8 bits
.8df7	b5 62		lda $62,x	_b1:		lda FSMant1+1,x		;   if r1 >= r2
.8df9	d5 61		cmp $61,x			cmp FSMant1+0,x
.8dfb	b5 58		lda $58,x			lda FSMant0+1,x
.8dfd	f5 57		sbc $57,x			sbc FSMant0+0,x
.8dff	90 09		bcc $8e0a			bcc _b5
.8e01	95 58		sta $58,x			sta FSMant0+1,x
.8e03	b5 62		lda $62,x			lda FSMant1+1,x		;     r1 -= r2
.8e05	f5 61		sbc $61,x			sbc FSMant1+0,x
.8e07	95 62		sta $62,x			sta FSMant1+1,x
.8e09	38		sec				sec
.8e0a					_b5:
.8e0a	26 15		rol $15				rol tmp1+1		;   save quotient bit
.8e0c	16 62		asl $62,x			asl FSMant1+1,x		;   r1 *= 2
.8e0e	36 58		rol $58,x			rol FSMant0+1,x
.8e10	88		dey				dey			;  next bit
.8e11	d0 e4		bne $8df7			bne _b1
.8e13	a5 15		lda $15				lda tmp1+1		; return bits
.8e15	60		rts				rts
=73					CodeLen	.var *-XtPtr1
=$8e16					Here1 = *	; remember here
>8dcb	49					.byte CodeLen	;patch wh_CodeLength
>8e16	45 31 2f			Name0:	.text "E1/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36249					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e19	e3					.byte (("E1/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>8e1a	10					.byte WordFlags	;wh_Flags
>8e1b	03					.byte 3	;wh_CodeLength
>8e1c	50					  .byte LinkDisplacement	; offset to previous nt
=$8e1d					XtPtr1 ::= *
=36249					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e1d	20 e3 88	jsr $88e3	E1Slash:	jsr F1
.8e20	20 d1 85	jsr $85d1			jsr FSwap
.8e23	4c cd 8d	jmp $8dcd			jmp ESlash
=9					CodeLen	.var *-XtPtr1
=$8e26					Here1 = *	; remember here
>8e1b	09					.byte CodeLen	;patch wh_CodeLength
>8e26	53 3e 46			Name0:	.text "S>F"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36265					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e29	c3					.byte (("S>F"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8e2a	10					.byte WordFlags	;wh_Flags
>8e2b	03					.byte 3	;wh_CodeLength
>8e2c	10					  .byte LinkDisplacement	; offset to previous nt
=$8e2d					XtPtr1 ::= *
=36265					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e2d	20 02 b4	jsr $b402	SToF:		jsr PopYA		; pop n
.8e30	20 c2 84	jsr $84c2	SToFYA:		jsr FAllocX		; alloc FP stack entry
.8e33	94 57		sty $57,x			sty FSMant0,x		; copy n to mantissa
.8e35	95 61		sta $61,x			sta FSMant1,x
.8e37	a9 00		lda #$00			lda #0			; pad mantissa
.8e39	95 6b		sta $6b,x			sta FSMant2,x
.8e3b	95 75		sta $75,x			sta FSMant3,x
.8e3d	a9 0f		lda #$0f			lda #15			; set exponent
.8e3f	95 4d		sta $4d,x			sta FSExp,x
.8e41	4c 8f 8a	jmp $8a8f			jmp FNormX		; normalize, return
=23					CodeLen	.var *-XtPtr1
=$8e44					Here1 = *	; remember here
>8e2b	17					.byte CodeLen	;patch wh_CodeLength
>8e44	44 3e 46			Name0:	.text "D>F"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36295					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e47	c3					.byte (("D>F"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>8e48	10					.byte WordFlags	;wh_Flags
>8e49	03					.byte 3	;wh_CodeLength
>8e4a	1e					  .byte LinkDisplacement	; offset to previous nt
=$8e4b					XtPtr1 ::= *
=36295					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e4b	20 c2 84	jsr $84c2	FDToF:		jsr FAllocX		; alloc FP stack entry
.8e4e	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e50	a4 4c		ldy $4c				ldy FIndex		; Y= fp stack index
.8e52	b5 26		lda $26,x			lda DStack+2,x		; mantissa= d
.8e54	99 75 00	sta $0075,y			sta FSMant3,y
.8e57	b5 27		lda $27,x			lda DStack+3,x
.8e59	99 6b 00	sta $006b,y			sta FSMant2,y
.8e5c	b5 24		lda $24,x			lda DStack+0,x
.8e5e	99 61 00	sta $0061,y			sta FSMant1,y
.8e61	b5 25		lda $25,x			lda DStack+1,x
.8e63	99 57 00	sta $0057,y			sta FSMant0,y
.8e66	a9 1f		lda #$1f			lda #31			; set exponent
.8e68	99 4d 00	sta $004d,y			sta FSExp,y
.8e6b	20 4e c5	jsr $c54e			jsr Two_Drop
.8e6e	4c 8d 8a	jmp $8a8d			jmp FNorm		; normalize, return
=38					CodeLen	.var *-XtPtr1
=$8e71					Here1 = *	; remember here
>8e49	26					.byte CodeLen	;patch wh_CodeLength
>8e71	46 3e 53			Name0:	.text "F>S"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36340					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e74	63					.byte (("F>S"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>8e75	10					.byte WordFlags	;wh_Flags
>8e76	03					.byte 3	;wh_CodeLength
>8e77	2d					  .byte LinkDisplacement	; offset to previous nt
=$8e78					XtPtr1 ::= *
=36340					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e78	a4 4c		ldy $4c		FToS:		ldy FIndex
.8e7a	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8e7d	08		php				php
.8e7e	10 03		bpl $8e83			bpl +
.8e80	20 8a 8b	jsr $8b8a			jsr FNegate
.8e83					+
.8e83	a9 0f		lda #$0f			lda #15
.8e85	20 cc 89	jsr $89cc			jsr FShiftA
.8e88	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e8a	c0 10		cpy #$10			cpy #15+1		; always positive, so unsigned compare works
.8e8c	b0 17		bcs $8ea5			bcs _overflow
.8e8e	a4 4c		ldy $4c				ldy FIndex
.8e90	ca		dex				dex
.8e91	ca		dex				dex
.8e92	b9 57 00	lda $0057,y			lda FSMant0,y
.8e95	95 25		sta $25,x			sta DStack+1,x
.8e97	b9 61 00	lda $0061,y			lda FSMant1,y
.8e9a	95 24		sta $24,x			sta DStack+0,x
.8e9c	e6 4c		inc $4c				inc FIndex		; FDrop
.8e9e	28		plp				plp			; apply saved sign
.8e9f	30 01		bmi $8ea2			bmi +
.8ea1	60		rts				rts
.8ea2	4c c2 c6	jmp $c6c2	+		jmp Negate
.8ea5	28		plp		_overflow:	plp			; RDrop saved sign
.8ea6	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8ea8	20 87 b4	jsr $b487			jsr ThrowA
=51					CodeLen	.var *-XtPtr1
=$8eab					Here1 = *	; remember here
>8e76	33					.byte CodeLen	;patch wh_CodeLength
>8eab	46 3e 44			Name0:	.text "F>D"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36398					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8eae	83					.byte (("F>D"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=58					LinkDisplacement = Nt0-WordListLink
>8eaf	10					.byte WordFlags	;wh_Flags
>8eb0	03					.byte 3	;wh_CodeLength
>8eb1	3a					  .byte LinkDisplacement	; offset to previous nt
=$8eb2					XtPtr1 ::= *
=36398					WordListLink ::= Nt0 ; remember the nt of this word for later
.8eb2	a4 4c		ldy $4c		FToD:		ldy FIndex
.8eb4	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8eb7	08		php				php
.8eb8	10 03		bpl $8ebd			bpl +
.8eba	20 8a 8b	jsr $8b8a			jsr FNegate
.8ebd					+
.8ebd	a9 1f		lda #$1f			lda #31
.8ebf	20 cc 89	jsr $89cc			jsr FShiftA
.8ec2	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8ec4	c0 20		cpy #$20			cpy #31+1		; always positive, so unsigned compare works
.8ec6	b0 23		bcs $8eeb			bcs _overflow
.8ec8	a4 4c		ldy $4c				ldy FIndex
.8eca	ca		dex				dex			; d= mantissa
.8ecb	ca		dex				dex
.8ecc	ca		dex				dex
.8ecd	ca		dex				dex
.8ece	b9 57 00	lda $0057,y			lda FSMant0,y
.8ed1	95 25		sta $25,x			sta DStack+1,x
.8ed3	b9 61 00	lda $0061,y			lda FSMant1,y
.8ed6	95 24		sta $24,x			sta DStack+0,x
.8ed8	b9 6b 00	lda $006b,y			lda FSMant2,y
.8edb	95 27		sta $27,x			sta DStack+3,x
.8edd	b9 75 00	lda $0075,y			lda FSMant3,y
.8ee0	95 26		sta $26,x			sta DStack+2,x
.8ee2	e6 4c		inc $4c				inc FIndex		; FDrop
.8ee4	28		plp				plp			; apply saved sign
.8ee5	30 01		bmi $8ee8			bmi +
.8ee7	60		rts				rts
.8ee8	4c f1 c6	jmp $c6f1	+		jmp DNegate
.8eeb	28		plp		_overflow:	plp			; RDrop sign
.8eec	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8eee	20 87 b4	jsr $b487			jsr ThrowA
=63					CodeLen	.var *-XtPtr1
=$8ef1					Here1 = *	; remember here
>8eb0	3f					.byte CodeLen	;patch wh_CodeLength
>8ef1	46 52 6e 64			Name0:	.text "FRnd"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=36469					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8ef5	84					.byte (("FRnd"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=71					LinkDisplacement = Nt0-WordListLink
>8ef6	10					.byte WordFlags	;wh_Flags
>8ef7	03					.byte 3	;wh_CodeLength
>8ef8	47					  .byte LinkDisplacement	; offset to previous nt
=$8ef9					XtPtr1 ::= *
=36469					WordListLink ::= Nt0 ; remember the nt of this word for later
.8ef9	20 fd 82	jsr $82fd	FRnd:		jsr Rand		; generate next RndState
.8efc	20 c2 84	jsr $84c2			jsr FAllocX		; alloc FP stack entry
.8eff	4a		lsr a				lsr a			;   make positive
.8f00	95 57		sta $57,x			sta FSMant0,x
.8f02	94 61		sty $61,x			sty FSMant1,x
.8f04	ad 35 03	lda $0335			lda RndState+0
.8f07	95 6b		sta $6b,x			sta FSMant2,x
.8f09	ad 36 03	lda $0336			lda RndState+1
.8f0c	95 75		sta $75,x			sta FSMant3,x
.8f0e	a9 00		lda #$00			lda #0			; exponent=0
.8f10	95 4d		sta $4d,x			sta FSExp,x
.8f12	4c 8f 8a	jmp $8a8f			jmp FNormX		; normalize, return
=28					CodeLen	.var *-XtPtr1
=$8f15					Here1 = *	; remember here
>8ef7	1c					.byte CodeLen	;patch wh_CodeLength
>8f15	46 53 71 72 74			Name0:	.text "FSqrt"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=36506					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f1a	85					.byte (("FSqrt"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>8f1b	10					.byte WordFlags	;wh_Flags
>8f1c	03					.byte 3	;wh_CodeLength
>8f1d	25					  .byte LinkDisplacement	; offset to previous nt
=$8f1e					XtPtr1 ::= *
=36506					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f1e	a4 4c		ldy $4c		FSqrt:		ldy FIndex
.8f20	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.8f23	d0 01		bne $8f26			bne +
.8f25	60		rts				rts			;   just return the zero
.8f26					+
.8f26	20 4d 85	jsr $854d			jsr FDup		; get trial value
.8f29	a4 4c		ldy $4c				ldy FIndex
.8f2b	b9 4d 00	lda $004d,y			lda FSExp,y		; halve the exponent of trial value
.8f2e	c9 80		cmp #$80			cmp #$80
.8f30	6a		ror a				ror a
.8f31	99 4d 00	sta $004d,y			sta FSExp,y
.8f34	a9 09		lda #$09			lda #9			; for 9 iterations
.8f36	48		pha		_3:		pha
.8f37	20 c2 85	jsr $85c2			jsr F2Dup		;   calc new trial value
.8f3a	20 9e 8c	jsr $8c9e			jsr FSlash
.8f3d	20 15 8b	jsr $8b15			jsr FPlus
.8f40	20 97 89	jsr $8997			jsr F2Slash
.8f43	68		pla				pla			;  next
.8f44	38		sec				sec
.8f45	e9 01		sbc #$01			sbc #1
.8f47	d0 ed		bne $8f36			bne _3
.8f49	4c 28 85	jmp $8528			jmp FNip		; return trial value
=46					CodeLen	.var *-XtPtr1
=$8f4c					Here1 = *	; remember here
>8f1c	2e					.byte CodeLen	;patch wh_CodeLength
>8f4c	50 72 65 63 69 73 69 6f		Name0:	.text "Precision"	;  name of word as a string, ending at wh_NameLastChar
>8f54	6e
=9					NameLength = *-Name0
=36565					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f55	c9					.byte (("Precision"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=59					LinkDisplacement = Nt0-WordListLink
>8f56	10					.byte WordFlags	;wh_Flags
>8f57	03					.byte 3	;wh_CodeLength
>8f58	3b					  .byte LinkDisplacement	; offset to previous nt
=$8f59					XtPtr1 ::= *
=36565					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f59	ad ff 02	lda $02ff	Precision:	lda PrecisionV
.8f5c	4c f0 b7	jmp $b7f0			jmp PushZA
=6					CodeLen	.var *-XtPtr1
=$8f5f					Here1 = *	; remember here
>8f57	06					.byte CodeLen	;patch wh_CodeLength
.8f5f	60		rts				rts
>8f60	53 65 74 2d 50 72 65 63		Name0:	.text "Set-Precision"	;  name of word as a string, ending at wh_NameLastChar
>8f68	69 73 69 6f 6e
=13					NameLength = *-Name0
=36589					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f6d	cd					.byte (("Set-Precision"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>8f6e	10					.byte WordFlags	;wh_Flags
>8f6f	03					.byte 3	;wh_CodeLength
>8f70	18					  .byte LinkDisplacement	; offset to previous nt
=$8f71					XtPtr1 ::= *
=36589					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f71	20 e7 b3	jsr $b3e7			jsr PopA
.8f74	8d ff 02	sta $02ff			sta PrecisionV
=6					CodeLen	.var *-XtPtr1
=$8f77					Here1 = *	; remember here
>8f6f	06					.byte CodeLen	;patch wh_CodeLength
.8f77	60		rts				rts
>8f78	28 46 2e 29			Name0:	.text "(F.)"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=36604					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f7c	24					.byte (("(F.)"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>8f7d	10					.byte WordFlags	;wh_Flags
>8f7e	03					.byte 3	;wh_CodeLength
>8f7f	0f					  .byte LinkDisplacement	; offset to previous nt
=$8f80					XtPtr1 ::= *
=36604					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f80	20 fd 8f	jsr $8ffd	PFDot:		jsr pfcst		;start collecting chars, make r positive
.8f83	20 89 8f	jsr $8f89			jsr PFDotSub
.8f86	4c 1b 90	jmp $901b			jmp pfcen
.8f89					PFDotSub:
.8f89	20 59 8f	jsr $8f59			jsr Precision	;alloc & init work area
.8f8c	20 07 b8	jsr $b807			jsr One
=$27					_mantNzFound  = DStack+3	; nonzero mantissa digit processed
=$26					_NumSigDigits = DStack+2	; # of significant digits
=$24					_decimalPos   = DStack+0	; decimal point position
.8f8f	20 dd 8f	jsr $8fdd			jsr FLt10		; scale down to <10, counting exponent
.8f92					_c:
.8f92	b5 24		lda $24,x			lda _decimalPos,x	;  insert decimal point here?
.8f94	d0 05		bne $8f9b			bne _c2
.8f96	a9 2e		lda #$2e			lda #'.'
.8f98	20 12 90	jsr $9012			jsr pfch
.8f9b	d6 24		dec $24,x	_c2:		dec _decimalPos,x
.8f9d	20 4d 85	jsr $854d			jsr FDup		;  do a digit
.8fa0	20 78 8e	jsr $8e78			jsr FToS		; ( work n )
.8fa3	b5 24		lda $24,x			lda DStack+0,x
.8fa5	15 29		ora $29,x			ora _mantNzFound+2,x	;  doing significant digits?
.8fa7	95 29		sta $29,x			sta _mantNzFound+2,x
.8fa9	f0 08		beq $8fb3			beq _c7
.8fab	d6 28		dec $28,x			dec _NumSigDigits+2,x
.8fad	10 04		bpl $8fb3			bpl +
.8faf	e8		inx				inx			;    drop integer
.8fb0	e8		inx				inx
.8fb1	d0 17		bne $8fca			bne _d
.8fb3					+
.8fb3	b5 24		lda $24,x	_c7:		lda DStack+0,x		;  store the char
.8fb5	09 30		ora #$30			ora #'0'
.8fb7	20 12 90	jsr $9012			jsr pfch
.8fba	20 2d 8e	jsr $8e2d			jsr SToF		; ( work )
.8fbd	20 55 8b	jsr $8b55			jsr FMinus
.8fc0	20 81 8c	jsr $8c81			jsr F10Star
.8fc3	a4 4c		ldy $4c				ldy FIndex		;  until mantissa==0
.8fc5	b9 57 00	lda $0057,y			lda FSMant0,y
.8fc8	d0 c8		bne $8f92			bne _c
.8fca	d6 24		dec $24,x	_d:		dec _decimalPos,x	;do trailing zeros
.8fcc	30 08		bmi $8fd6			bmi _d9
.8fce	a9 30		lda #$30			lda #'0'
.8fd0	20 12 90	jsr $9012			jsr pfch
.8fd3	4c ca 8f	jmp $8fca			jmp _d
.8fd6					_d9:
.8fd6	e8		inx				inx			; drop work area
.8fd7	e8		inx				inx
.8fd8	e8		inx				inx
.8fd9	e8		inx				inx
.8fda	e6 4c		inc $4c				inc FIndex		; FDrop
.8fdc	60		rts				rts
=93					CodeLen	.var *-XtPtr1
=$8fdd					Here1 = *	; remember here
>8f7e	5d					.byte CodeLen	;patch wh_CodeLength
.8fdd					FLt10:
.8fdd	a4 4c		ldy $4c		_1:		ldy FIndex		; while r >= 10
.8fdf	b9 4d 00	lda $004d,y			lda FSExp,y
.8fe2	30 18		bmi $8ffc			bmi _9			;   exponent negative?
.8fe4	c9 04		cmp #$04			cmp #4
.8fe6	90 14		bcc $8ffc			bcc _9			;   < 4 ?
.8fe8	d0 07		bne $8ff1			bne _2			;   > 4 ?
.8fea	b9 57 00	lda $0057,y			lda FSMant0,y
.8fed	c9 50		cmp #$50			cmp #$50
.8fef	90 0b		bcc $8ffc			bcc _9
.8ff1	f6 24		inc $24,x	_2:		inc DStack+0,x		;   exp ++
.8ff3	20 c9 88	jsr $88c9			jsr F10			;   r /= 10
.8ff6	20 9e 8c	jsr $8c9e			jsr FSlash
.8ff9	4c dd 8f	jmp $8fdd			jmp _1
.8ffc	60		rts		_9:		rts
.8ffd					pfcst:
.8ffd	a9 01		lda #$01			lda #1
.8fff	8d 34 03	sta $0334			sta ToHold
.9002	a4 4c		ldy $4c				ldy FIndex		; if r1 negative
.9004	b9 57 00	lda $0057,y			lda FSMant0,y
.9007	10 08		bpl $9011			bpl _19
.9009	a9 2d		lda #$2d			lda #'-'		;   append sign
.900b	20 12 90	jsr $9012			jsr pfch
.900e	4c 8a 8b	jmp $8b8a			jmp FNegate		;   make positive, return
.9011	60		rts		_19:		rts
.9012					pfch:
.9012	ac 34 03	ldy $0334			ldy ToHold
.9015	91 00		sta ($00),y			sta (cp),y
.9017	ee 34 03	inc $0334			inc ToHold
.901a	60		rts				rts
.901b					pfcen:
.901b	ad 34 03	lda $0334			lda ToHold
.901e	38		sec				sec
.901f	e9 01		sbc #$01			sbc #1
.9021	a0 00		ldy #$00			ldy #0
.9023	91 00		sta ($00),y			sta (cp),y		; fill in length
.9025	4c 40 ca	jmp $ca40			jmp Here		; push start addr
.9028					pfciA:
.9028	a8		tay				tay
.9029	10 0a		bpl $9035			bpl _15			; IfMi,
.902b	49 ff		eor #$ff			eor #$ff
.902d	18		clc				clc
.902e	69 01		adc #$01			adc #1
.9030	48		pha				pha
.9031	a9 2d		lda #$2d			lda #'-'
.9033	d0 03		bne $9038			bne _19
.9035	48		pha		_15:		pha
.9036	a9 2b		lda #$2b			lda #'+'
.9038					_19:
.9038	20 12 90	jsr $9012			jsr pfch
.903b	68		pla				pla
.903c	a0 2f		ldy #$2f			ldy #'0'-1
.903e	c8		iny		_20:		iny
.903f	38		sec				sec
.9040	e9 0a		sbc #$0a			sbc #10
.9042	b0 fa		bcs $903e			bcs _20
.9044	69 0a		adc #$0a			adc #10
.9046	48		pha				pha
.9047	98		tya				tya
.9048	20 12 90	jsr $9012			jsr pfch
.904b	68		pla				pla
.904c	09 30		ora #$30			ora #'0'
.904e	d0 c2		bne $9012			bne pfch
>9050	46 2e				Name0:	.text "F."	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=36818					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9052	c2					.byte (("F."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=214					LinkDisplacement = Nt0-WordListLink
>9053	10					.byte WordFlags	;wh_Flags
>9054	03					.byte 3	;wh_CodeLength
>9055	d6					  .byte LinkDisplacement	; offset to previous nt
=$9056					XtPtr1 ::= *
=36818					WordListLink ::= Nt0 ; remember the nt of this word for later
.9056	20 80 8f	jsr $8f80	FDot:		jsr PFDot
.9059	20 fa b1	jsr $b1fa	FDot2:		jsr Count
.905c	20 f0 cd	jsr $cdf0			jsr Type
.905f	4c e4 cd	jmp $cde4			jmp Space
=12					CodeLen	.var *-XtPtr1
=$9062					Here1 = *	; remember here
>9054	0c					.byte CodeLen	;patch wh_CodeLength
>9062	46 2e 53			Name0:	.text "F.S"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36837					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9065	63					.byte (("F.S"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>9066	10					.byte WordFlags	;wh_Flags
>9067	03					.byte 3	;wh_CodeLength
>9068	13					  .byte LinkDisplacement	; offset to previous nt
=$9069					XtPtr1 ::= *
=36837					WordListLink ::= Nt0 ; remember the nt of this word for later
.9069	a9 09		lda #$09	FDotS:		lda #FDim-1	; for each FP stack entry
.906b	d0 0b		bne $9078			bne _8
.906d	48		pha		_2:		pha
.906e	20 99 85	jsr $8599			jsr FPick3	;   print it
.9071	20 56 90	jsr $9056			jsr FDot
.9074	68		pla				pla		;  next
.9075	38		sec				sec
.9076	e9 01		sbc #$01			sbc #1
.9078	c5 4c		cmp $4c		_8:		cmp FIndex
.907a	b0 f1		bcs $906d			bcs _2
=19					CodeLen	.var *-XtPtr1
=$907c					Here1 = *	; remember here
>9067	13					.byte CodeLen	;patch wh_CodeLength
.907c	60		rts				rts
>907d	28 46 53 2e 29			Name0:	.text "(FS.)"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=36866					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9082	25					.byte (("(FS.)"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>9083	10					.byte WordFlags	;wh_Flags
>9084	03					.byte 3	;wh_CodeLength
>9085	1d					  .byte LinkDisplacement	; offset to previous nt
=$9086					XtPtr1 ::= *
=36866					WordListLink ::= Nt0 ; remember the nt of this word for later
.9086	20 fe b7	jsr $b7fe	PFSDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.9089	20 fd 8f	jsr $8ffd			jsr pfcst		; start collecting chars, make r positive
.908c	20 dd 8f	jsr $8fdd			jsr FLt10		; scale down to <10
.908f	a4 4c		ldy $4c		_c1:		ldy FIndex		; while r < 1
.9091	b9 57 00	lda $0057,y			lda FSMant0,y		;   mantissa == 0 ?
.9094	f0 0f		beq $90a5			beq _c9
.9096	b9 4d 00	lda $004d,y			lda FSExp,y		;   exp < 1 ?
.9099	f0 02		beq $909d			beq _c2
.909b	10 08		bpl $90a5			bpl _c9
.909d	d6 24		dec $24,x	_c2:		dec DStack+0,x		;  exp -= 1
.909f	20 81 8c	jsr $8c81			jsr F10Star		;  r *= 10
.90a2	4c 8f 90	jmp $908f			jmp _c1
.90a5					_c9:
.90a5	20 89 8f	jsr $8f89	PFSDotM:	jsr PFDotSub		; do mantissa
.90a8	a9 45		lda #$45			lda #'E'
.90aa	20 12 90	jsr $9012			jsr pfch		; do exponent
.90ad	b5 24		lda $24,x			lda DStack+0,x		;   _exp
.90af	20 28 90	jsr $9028			jsr pfciA
.90b2	e8		inx				inx			; Drop work area
.90b3	e8		inx				inx
.90b4	4c 1b 90	jmp $901b			jmp pfcen		; finish string
=49					CodeLen	.var *-XtPtr1
=$90b7					Here1 = *	; remember here
>9084	31					.byte CodeLen	;patch wh_CodeLength
>90b7	46 53 2e			Name0:	.text "FS."	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36922					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>90ba	c3					.byte (("FS."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>90bb	10					.byte WordFlags	;wh_Flags
>90bc	03					.byte 3	;wh_CodeLength
>90bd	38					  .byte LinkDisplacement	; offset to previous nt
=$90be					XtPtr1 ::= *
=36922					WordListLink ::= Nt0 ; remember the nt of this word for later
.90be	20 86 90	jsr $9086	FSDot:		jsr PFSDot
.90c1	4c 59 90	jmp $9059			jmp FDot2
=6					CodeLen	.var *-XtPtr1
=$90c4					Here1 = *	; remember here
>90bc	06					.byte CodeLen	;patch wh_CodeLength
>90c4	28 46 45 2e 29			Name0:	.text "(FE.)"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=36937					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>90c9	25					.byte (("(FE.)"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>90ca	10					.byte WordFlags	;wh_Flags
>90cb	03					.byte 3	;wh_CodeLength
>90cc	0f					  .byte LinkDisplacement	; offset to previous nt
=$90cd					XtPtr1 ::= *
=36937					WordListLink ::= Nt0 ; remember the nt of this word for later
.90cd	20 fe b7	jsr $b7fe	PFEDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.90d0	20 fd 8f	jsr $8ffd			jsr pfcst		; start collecting chars, make r positive
.90d3	a4 4c		ldy $4c		_30:		ldy FIndex		; while r < 1
.90d5	b9 57 00	lda $0057,y			lda FSMant0,y
.90d8	f0 16		beq $90f0			beq _39
.90da	b9 4d 00	lda $004d,y			lda FSExp,y
.90dd	f0 02		beq $90e1			beq _31
.90df	10 0f		bpl $90f0			bpl _39
.90e1	d6 24		dec $24,x	_31:		dec _exp,x		;  exp -= 3
.90e3	d6 24		dec $24,x			dec _exp,x
.90e5	d6 24		dec $24,x			dec _exp,x
.90e7	20 bb 88	jsr $88bb			jsr F1000		;  r *= 1000
.90ea	20 e3 8b	jsr $8be3			jsr FStar
.90ed	4c d3 90	jmp $90d3			jmp _30
.90f0					_39:
.90f0	a4 4c		ldy $4c		_a:		ldy FIndex		; while r >= 1000
.90f2	b9 4d 00	lda $004d,y			lda FSExp,y
.90f5	30 1c		bmi $9113			bmi _a9			; exponent negative?
.90f7	c9 0a		cmp #$0a			cmp #10
.90f9	90 18		bcc $9113			bcc _a9			;   < 10 ?
.90fb	d0 07		bne $9104			bne _a2			;   > 10 ?
.90fd	b9 57 00	lda $0057,y			lda FSMant0,y
.9100	c9 7d		cmp #$7d			cmp #$7d
.9102	90 0f		bcc $9113			bcc _a9
.9104	f6 24		inc $24,x	_a2:		inc _exp,x		;   exp += 3
.9106	f6 24		inc $24,x			inc _exp,x
.9108	f6 24		inc $24,x			inc _exp,x
.910a	20 bb 88	jsr $88bb			jsr F1000		;   r /= 1000
.910d	20 9e 8c	jsr $8c9e			jsr FSlash
.9110	4c f0 90	jmp $90f0			jmp _a
.9113					_a9:
.9113	4c a5 90	jmp $90a5			jmp PFSDotM
=73					CodeLen	.var *-XtPtr1
=$9116					Here1 = *	; remember here
>90cb	49					.byte CodeLen	;patch wh_CodeLength
>9116	46 45 2e			Name0:	.text "FE."	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37017					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9119	c3					.byte (("FE."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>911a	10					.byte WordFlags	;wh_Flags
>911b	03					.byte 3	;wh_CodeLength
>911c	50					  .byte LinkDisplacement	; offset to previous nt
=$911d					XtPtr1 ::= *
=37017					WordListLink ::= Nt0 ; remember the nt of this word for later
.911d	20 cd 90	jsr $90cd	FEDot:		jsr PFEDot
.9120	4c 59 90	jmp $9059			jmp FDot2
=6					CodeLen	.var *-XtPtr1
=$9123					Here1 = *	; remember here
>911b	06					.byte CodeLen	;patch wh_CodeLength
>9123	46 22				Name0:	.text 'F"'	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=37029					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9125	42					.byte (('F"'[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>9126	18					.byte WordFlags	;wh_Flags
>9127	03					.byte 3	;wh_CodeLength
>9128	0c					  .byte LinkDisplacement	; offset to previous nt
=$9129					XtPtr1 ::= *
=37029					WordListLink ::= Nt0 ; remember the nt of this word for later
.9129	20 80 ba	jsr $ba80	FQuote:		jsr Parse_Name		; get string
.912c	20 4c 91	jsr $914c			jsr ToFloat		; convert
.912f	b5 24		lda $24,x			lda DStack+0,x		; error?
.9131	f0 0a		beq $913d			beq _Err
.9133	e8		inx				inx
.9134	e8		inx				inx
.9135	a5 0a		lda $0a				lda State		; compiling?
.9137	d0 01		bne $913a			bne _compile
.9139	60		rts				rts
.913a	4c 0a 88	jmp $880a	_compile:	jmp FLiteral		; compile a FP literal
.913d	a9 36		lda #$36	_Err:		lda #100+err_FPInvalidArg
.913f	20 87 b4	jsr $b487			jsr ThrowA
=25					CodeLen	.var *-XtPtr1
=$9142					Here1 = *	; remember here
>9127	19					.byte CodeLen	;patch wh_CodeLength
>9142	3e 46 6c 6f 61 74		Name0:	.text ">Float"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=37064					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9148	86					.byte ((">Float"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>9149	10					.byte WordFlags	;wh_Flags
>914a	03					.byte 3	;wh_CodeLength
>914b	23					  .byte LinkDisplacement	; offset to previous nt
=$914c					XtPtr1 ::= *
=37064					WordListLink ::= Nt0 ; remember the nt of this word for later
.914c					ToFloat:
.914c	20 fe b7	jsr $b7fe			jsr Zero	; alloc & init workspace
.914f	20 fe b7	jsr $b7fe			jsr Zero
.9152	20 fe b7	jsr $b7fe			jsr Zero
=$2c					_addr		= DStack+8
=$2a					_len		= DStack+6
=$29					_mantfound 	= DStack+5		;mantissa digits found
=$28					_exponent 	= DStack+4		;exponent
=$27					_decimalPos 	= DStack+3		;decimal point position
=$26					_DecPointFound1 = DStack+2
=$25					_MantissaNegative1 = DStack+1
=$24					_ExponentNegative1 = DStack+0
.9155	20 ab 88	jsr $88ab			jsr F0			; init result
.9158	20 2a 92	jsr $922a	_11:		jsr _GetChar		; get mantissa prefix
.915b	b0 57		bcs $91b4			bcs _trueb ;_finishb
.915d	c9 20		cmp #$20			cmp #' '
.915f	f0 f7		beq $9158			beq _11
.9161	c9 2b		cmp #$2b			cmp #'+'
.9163	f0 06		beq $916b			beq _20
.9165	c9 2d		cmp #$2d			cmp #'-'
.9167	d0 07		bne $9170			bne _21
.9169	95 25		sta $25,x			sta _MantissaNegative1,x ; remember mantissa is negative
.916b	20 2a 92	jsr $922a	_20:		jsr _GetChar		; do next mantissa digits
.916e	b0 47		bcs $91b7			bcs _finishb
.9170	c9 2e		cmp #$2e	_21:		cmp #'.'
.9172	f0 31		beq $91a5			beq _27
.9174	c9 45		cmp #$45			cmp #'E'
.9176	f0 42		beq $91ba			beq _30
.9178	c9 65		cmp #$65			cmp #'e'
.917a	f0 3e		beq $91ba			beq _30
.917c	c9 44		cmp #$44			cmp #'D'
.917e	f0 3a		beq $91ba			beq _30
.9180	c9 64		cmp #$64			cmp #'d'
.9182	f0 36		beq $91ba			beq _30
.9184	38		sec				sec			;   a digit?
.9185	e9 30		sbc #$30			sbc #'0'
.9187	90 24		bcc $91ad			bcc _fail
.9189	c9 0a		cmp #$0a			cmp #9+1
.918b	b0 20		bcs $91ad			bcs _fail
.918d	48		pha				pha			; append digit to mantissa
.918e	20 81 8c	jsr $8c81			jsr F10Star
.9191	68		pla				pla
.9192	a0 00		ldy #$00			ldy #0
.9194	20 30 8e	jsr $8e30			jsr SToFYA
.9197	20 15 8b	jsr $8b15			jsr FPlus
.919a	f6 29		inc $29,x			inc _mantfound,x	; remember we found a mantissa digit
.919c	b5 26		lda $26,x			lda _DecPointFound1,x	; if mantissa decimal point found
.919e	f0 02		beq $91a2			beq +
.91a0	d6 27		dec $27,x			dec _decimalPos,x	;   increment decimal point position
.91a2					+
.91a2	4c 6b 91	jmp $916b			jmp _20
.91a5					_27:
.91a5	b4 26		ldy $26,x			ldy _DecPointFound1,x	; already have one?
.91a7	d0 04		bne $91ad			bne _fail
.91a9	95 26		sta $26,x			sta _DecPointFound1,x	; we have one now!
.91ab	f0 be		beq $916b			beq _20
.91ad					_fail:
.91ad	20 0e 85	jsr $850e			jsr FDrop
.91b0	a9 00		lda #$00			lda #0			;return false
.91b2	f0 69		beq $921d			beq _return
.91b4	4c 1b 92	jmp $921b	_trueb:		jmp _true
.91b7	4c e8 91	jmp $91e8	_finishb:	jmp _finish
.91ba					_30:
.91ba	20 2a 92	jsr $922a			jsr _GetChar
.91bd	b0 29		bcs $91e8			bcs _finish
.91bf	c9 2b		cmp #$2b			cmp #'+'
.91c1	f0 06		beq $91c9			beq _40
.91c3	c9 2d		cmp #$2d			cmp #'-'
.91c5	d0 07		bne $91ce			bne _41
.91c7	95 24		sta $24,x			sta _ExponentNegative1,x ; remember exponent is negative
.91c9	20 2a 92	jsr $922a	_40:		jsr _GetChar		;get exponent digits
.91cc	b0 1a		bcs $91e8			bcs _finish
.91ce	38		sec		_41:		sec			;  digit?
.91cf	e9 30		sbc #$30			sbc #'0'
.91d1	90 da		bcc $91ad			bcc _fail
.91d3	c9 0a		cmp #$0a			cmp #9+1
.91d5	b0 d6		bcs $91ad			bcs _fail
.91d7	85 14		sta $14				sta tmp1
.91d9	16 28		asl $28,x			asl _exponent,x		;  exponent *= 10
.91db	b5 28		lda $28,x			lda _exponent,x
.91dd	0a		asl a				asl a
.91de	0a		asl a				asl a
.91df	75 28		adc $28,x			adc _exponent,x
.91e1	65 14		adc $14				adc tmp1		;  + digit
.91e3	95 28		sta $28,x			sta _exponent,x
.91e5	4c c9 91	jmp $91c9			jmp _40
.91e8					_finish:
.91e8	b5 29		lda $29,x			lda _mantfound,x	;some mantissa digits found?
.91ea	f0 c1		beq $91ad			beq _fail
.91ec	b5 24		lda $24,x			lda _ExponentNegative1,x ;apply exponent sign
.91ee	f0 07		beq $91f7			beq +
.91f0	a9 00		lda #$00			lda #0
.91f2	38		sec				sec
.91f3	f5 28		sbc $28,x			sbc _exponent,x
.91f5	95 28		sta $28,x			sta _exponent,x
.91f7					+
.91f7	b5 28		lda $28,x			lda _exponent,x		;apply decimal position to exponent
.91f9	18		clc				clc
.91fa	75 27		adc $27,x			adc _decimalPos,x
.91fc	95 28		sta $28,x			sta _exponent,x
.91fe	4c 06 92	jmp $9206			jmp _93
.9201	20 81 8c	jsr $8c81	_93b:		jsr F10Star		;apply exponent to mantissa
.9204	d6 28		dec $28,x			dec _exponent,x
.9206	f0 0a		beq $9212	_93:		beq _94
.9208	10 f7		bpl $9201			bpl _93b
.920a	20 c9 88	jsr $88c9	_94b:		jsr F10
.920d	20 9e 8c	jsr $8c9e			jsr FSlash
.9210	f6 28		inc $28,x			inc _exponent,x
.9212	30 f6		bmi $920a	_94:		bmi _94b
.9214					_95:
.9214	b5 25		lda $25,x			lda _MantissaNegative1,x ;apply mantissa sign
.9216	f0 03		beq $921b			beq +
.9218	20 8a 8b	jsr $8b8a			jsr FNegate
.921b					+
.921b	a9 ff		lda #$ff	_true:		lda #$ff		;return true
.921d					_return:
.921d	95 2c		sta $2c,x			sta _addr+0,x		; replace _addr with flag
.921f	95 2d		sta $2d,x			sta _addr+1,x
.9221	e8		inx				inx			; Drop work
.9222	e8		inx				inx
.9223	e8		inx				inx			; 2Drop work
.9224	e8		inx				inx
.9225	e8		inx				inx
.9226	e8		inx				inx
.9227	e8		inx				inx			; Drop len
.9228	e8		inx				inx
.9229	60		rts				rts
.922a					_GetChar:
.922a	38		sec				sec
.922b	b5 2a		lda $2a,x			lda _len,x
.922d	f0 0b		beq $923a			beq _gc_rts		; if end, return C=1
.922f	d6 2a		dec $2a,x			dec _len,x
.9231	a1 2c		lda ($2c,x)			lda (_addr,x)
.9233	f6 2c		inc $2c,x			inc _addr+0,x
.9235	d0 02		bne $9239			bne +
.9237	f6 2d		inc $2d,x			inc _addr+1,x
.9239					+
.9239	18		clc				clc			; get char, return C=0
.923a	60		rts		_gc_rts:	rts
>923b	46 4b 65 79			Name0:	.text "FKey"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=37311					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>923f	24					.byte (("FKey"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=247					LinkDisplacement = Nt0-WordListLink
>9240	10					.byte WordFlags	;wh_Flags
>9241	03					.byte 3	;wh_CodeLength
>9242	f7					  .byte LinkDisplacement	; offset to previous nt
=$9243					XtPtr1 ::= *
=37311					WordListLink ::= Nt0 ; remember the nt of this word for later
.9243					FKey:
.9243	20 40 ca	jsr $ca40			jsr Here		; ( addr )
.9246	20 40 ca	jsr $ca40			jsr Here		; ( addr addr )
.9249	a9 28		lda #$28			lda #40			; ( addr addr 40 )
.924b	20 f0 b7	jsr $b7f0			jsr PushZA
.924e	20 c2 c2	jsr $c2c2			jsr Accept		; ( addr len )
.9251	20 4c 91	jsr $914c			jsr ToFloat		; ( true | false)
.9254	e8		inx				inx			; err?
.9255	e8		inx				inx
.9256	b5 22		lda $22,x			lda DStack-2,x
.9258	f0 01		beq $925b			beq _err
.925a	60		rts				rts
.925b	20 b5 b8	jsr $b8b5	_err:		jsr SLiteral_runtime
.925e	4c 64 92	jmp $9264			  jmp +
>9261	20 3f 20					  .text " ? "
.9264	20 f0 cd	jsr $cdf0	+		jsr Type
.9267	4c 43 92	jmp $9243			jmp FKey
>926a	53 46 40			Name0:	.text "SF@"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37357					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>926d	03					.byte (("SF@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=46					LinkDisplacement = Nt0-WordListLink
>926e	10					.byte WordFlags	;wh_Flags
>926f	03					.byte 3	;wh_CodeLength
>9270	2e					  .byte LinkDisplacement	; offset to previous nt
=$9271					XtPtr1 ::= *
=37357					WordListLink ::= Nt0 ; remember the nt of this word for later
.9271	20 02 b4	jsr $b402	SFAt:		jsr PopYA		; pop sf_addr
.9274	85 16		sta $16		SFAt_YA:	sta tmp2+0		; save sf_addr
.9276	84 17		sty $17				sty tmp2+1
.9278	20 c2 84	jsr $84c2			jsr FAllocX		; alloc FP stack entry
.927b	a0 01		ldy #$01			ldy #1			; copy exponent
.927d	b1 16		lda ($16),y			lda (tmp2),y
.927f	0a		asl a				asl a
.9280	88		dey				dey
.9281	b1 16		lda ($16),y			lda (tmp2),y
.9283	2a		rol a				rol a
.9284	38		sec				sec
.9285	e9 7e		sbc #$7e			sbc #126
.9287	95 4d		sta $4d,x			sta FSExp,x
.9289	a0 01		ldy #$01			ldy #1			; copy mantissa
.928b	b1 16		lda ($16),y			lda (tmp2),y
.928d	09 80		ora #$80			ora #$80
.928f	4a		lsr a				lsr a
.9290	95 57		sta $57,x			sta FSMant0,x
.9292	c8		iny				iny
.9293	b1 16		lda ($16),y			lda (tmp2),y
.9295	6a		ror a				ror a
.9296	95 61		sta $61,x			sta FSMant1,x
.9298	c8		iny				iny
.9299	b1 16		lda ($16),y			lda (tmp2),y
.929b	6a		ror a				ror a
.929c	95 6b		sta $6b,x			sta FSMant2,x
.929e	a9 00		lda #$00			lda #0
.92a0	6a		ror a				ror a
.92a1	95 75		sta $75,x			sta FSMant3,x
.92a3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.92a5	a0 00		ldy #$00			ldy #0			; get sign
.92a7	b1 16		lda ($16),y			lda (tmp2),y
.92a9	10 03		bpl $92ae			bpl +
.92ab	20 8a 8b	jsr $8b8a			jsr FNegate
.92ae					+
=61					CodeLen	.var *-XtPtr1
=$92ae					Here1 = *	; remember here
>926f	3d					.byte CodeLen	;patch wh_CodeLength
.92ae	60		rts				rts
>92af	53 46 21			Name0:	.text "SF!"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37426					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>92b2	23					.byte (("SF!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=69					LinkDisplacement = Nt0-WordListLink
>92b3	10					.byte WordFlags	;wh_Flags
>92b4	03					.byte 3	;wh_CodeLength
>92b5	45					  .byte LinkDisplacement	; offset to previous nt
=$92b6					XtPtr1 ::= *
=37426					WordListLink ::= Nt0 ; remember the nt of this word for later
.92b6	20 02 b4	jsr $b402	SFStore:	jsr PopYA		; pop sf_addr
.92b9	85 16		sta $16		SFStore_YA:	sta tmp2+0		; save
.92bb	84 17		sty $17				sty tmp2+1
.92bd	a4 4c		ldy $4c				ldy FIndex		; negative?
.92bf	b9 57 00	lda $0057,y			lda FSMant0,y
.92c2	29 80		and #$80			and #$80		;  save sign
.92c4	85 19		sta $19				sta tmp3+1
.92c6	10 03		bpl $92cb			bpl +
.92c8	20 8a 8b	jsr $8b8a			jsr FNegate
.92cb					+
.92cb	86 14		stx $14				stx tmp1+0		; save data stack index
.92cd	a6 4c		ldx $4c				ldx FIndex		; switch to FP stack index
.92cf	b5 4d		lda $4d,x			lda FSExp,x		; +128
.92d1	18		clc				clc
.92d2	69 7e		adc #$7e			adc #126
.92d4	95 4d		sta $4d,x			sta FSExp,x
.92d6	16 75		asl $75,x			asl FSMant3,x
.92d8	b5 6b		lda $6b,x			lda FSMant2,x
.92da	2a		rol a				rol a
.92db	a0 03		ldy #$03			ldy #3			; +3 IEEE
.92dd	91 16		sta ($16),y			sta (tmp2),y
.92df	b5 61		lda $61,x			lda FSMant1,x
.92e1	2a		rol a				rol a
.92e2	88		dey				dey			; +2 IEEE
.92e3	91 16		sta ($16),y			sta (tmp2),y
.92e5	b5 57		lda $57,x			lda FSMant0,x
.92e7	2a		rol a				rol a
.92e8	2a		rol a				rol a
.92e9	56 4d		lsr $4d,x			lsr FSExp,x
.92eb	6a		ror a				ror a
.92ec	88		dey				dey			; +1 IEEE
.92ed	91 16		sta ($16),y			sta (tmp2),y
.92ef	b5 4d		lda $4d,x			lda FSExp,x
.92f1	05 19		ora $19				ora tmp3+1		;  insert sign
.92f3	88		dey				dey			; +0 IEEE
.92f4	91 16		sta ($16),y			sta (tmp2),y
.92f6	e6 4c		inc $4c				inc FIndex		; FDrop
.92f8	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=68					CodeLen	.var *-XtPtr1
=$92fa					Here1 = *	; remember here
>92b4	44					.byte CodeLen	;patch wh_CodeLength
.92fa	60		rts				rts
>92fb	53 46 6c 6f 61 74 2b		Name0:	.text "SFloat+"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=37506					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9302	67					.byte (("SFloat+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>9303	10					.byte WordFlags	;wh_Flags
>9304	03					.byte 3	;wh_CodeLength
>9305	50					  .byte LinkDisplacement	; offset to previous nt
=$9306					XtPtr1 ::= *
=37506					WordListLink ::= Nt0 ; remember the nt of this word for later
.9306	a9 04		lda #$04	SFloatPlus:	lda #4
.9308	4c 24 ca	jmp $ca24			jmp Plus_A
=5					CodeLen	.var *-XtPtr1
=$930b					Here1 = *	; remember here
>9304	05					.byte CodeLen	;patch wh_CodeLength
>930b	53 46 6c 6f 61 74 73		Name0:	.text "SFloats"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=37522					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9312	67					.byte (("SFloats"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>9313	10					.byte WordFlags	;wh_Flags
>9314	03					.byte 3	;wh_CodeLength
>9315	10					  .byte LinkDisplacement	; offset to previous nt
=$9316					XtPtr1 ::= *
=37522					WordListLink ::= Nt0 ; remember the nt of this word for later
.9316	a9 02		lda #$02	SFloats:	lda #2
.9318	4c 5a cb	jmp $cb5a			jmp LShift_A
=5					CodeLen	.var *-XtPtr1
=$931b					Here1 = *	; remember here
>9314	05					.byte CodeLen	;patch wh_CodeLength
>931b	44 46 21			Name0:	.text "DF!"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37534					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>931e	23					.byte (("DF!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>931f	10					.byte WordFlags	;wh_Flags
>9320	03					.byte 3	;wh_CodeLength
>9321	0c					  .byte LinkDisplacement	; offset to previous nt
=$9322					XtPtr1 ::= *
=37534					WordListLink ::= Nt0 ; remember the nt of this word for later
.9322	20 02 b4	jsr $b402	DFStore:	jsr PopYA		; pop df_addr
.9325	85 16		sta $16		DFStore_YA:	sta tmp2+0		; save df_addr
.9327	84 17		sty $17				sty tmp2+1
.9329	a4 4c		ldy $4c				ldy FIndex		; negative?
.932b	b9 57 00	lda $0057,y			lda FSMant0,y
.932e	29 80		and #$80			and #$80		; remember sign
.9330	85 19		sta $19				sta tmp3+1
.9332	10 03		bpl $9337			bpl +			; make positive
.9334	20 8a 8b	jsr $8b8a			jsr FNegate
.9337					+
.9337	86 14		stx $14				stx tmp1+0		; save data stack index
.9339	a6 4c		ldx $4c				ldx FIndex
.933b	a9 00		lda #$00			lda #0
.933d	a0 07		ldy #$07			ldy #7			; +7 IEEE
.933f	91 16		sta ($16),y			sta (tmp2),y
.9341	88		dey				dey			; +6 IEEE
.9342	91 16		sta ($16),y			sta (tmp2),y
.9344	20 8c 93	jsr $938c			jsr _shift		; shift mantissa
.9347	20 8c 93	jsr $938c			jsr _shift
.934a	88		dey				dey			; +5 IEEE
.934b	91 16		sta ($16),y			sta (tmp2),y
.934d	b5 75		lda $75,x			lda FSMant3,x
.934f	88		dey				dey			; +4 IEEE
.9350	91 16		sta ($16),y			sta (tmp2),y
.9352	b5 6b		lda $6b,x			lda FSMant2,x
.9354	88		dey				dey			; +3 IEEE
.9355	91 16		sta ($16),y			sta (tmp2),y
.9357	b5 61		lda $61,x			lda FSMant1,x
.9359	88		dey				dey			; +2 IEEE
.935a	91 16		sta ($16),y			sta (tmp2),y
.935c	b5 57		lda $57,x			lda FSMant0,x		; clear extra bits
.935e	29 0f		and #$0f			and #$f
.9360	95 57		sta $57,x			sta FSMant0,x
.9362	b5 4d		lda $4d,x			lda FSExp,x
.9364	38		sec				sec
.9365	e9 02		sbc #$02			sbc #2
.9367	95 4d		sta $4d,x			sta FSExp,x
.9369	0a		asl a				asl a
.936a	0a		asl a				asl a
.936b	0a		asl a				asl a
.936c	0a		asl a				asl a
.936d	15 57		ora $57,x			ora FSMant0,x
.936f	88		dey				dey			; +1 IEEE
.9370	91 16		sta ($16),y			sta (tmp2),y
.9372	b5 4d		lda $4d,x			lda FSExp,x
.9374	08		php				php
.9375	4a		lsr a				lsr a
.9376	4a		lsr a				lsr a
.9377	4a		lsr a				lsr a
.9378	4a		lsr a				lsr a
.9379	18		clc				clc
.937a	69 30		adc #$30			adc #$30
.937c	28		plp				plp
.937d	30 03		bmi $9382			bmi +
.937f	18		clc				clc
.9380	69 10		adc #$10			adc #$10
.9382	05 19		ora $19		+		ora tmp3+1		; add sign bit
.9384	88		dey				dey			; +0 IEEE
.9385	91 16		sta ($16),y			sta (tmp2),y
.9387	e6 4c		inc $4c				inc FIndex		; FDrop
.9389	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.938b	60		rts				rts
.938c	56 57		lsr $57,x	_shift:		lsr FSMant0,x
.938e	76 61		ror $61,x			ror FSMant1,x
.9390	76 6b		ror $6b,x			ror FSMant2,x
.9392	76 75		ror $75,x			ror FSMant3,x
.9394	6a		ror a				ror a
=115					CodeLen	.var *-XtPtr1
=$9395					Here1 = *	; remember here
>9320	73					.byte CodeLen	;patch wh_CodeLength
.9395	60		rts				rts
>9396	44 46 40			Name0:	.text "DF@"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37657					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9399	03					.byte (("DF@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=123					LinkDisplacement = Nt0-WordListLink
>939a	10					.byte WordFlags	;wh_Flags
>939b	03					.byte 3	;wh_CodeLength
>939c	7b					  .byte LinkDisplacement	; offset to previous nt
=$939d					XtPtr1 ::= *
=37657					WordListLink ::= Nt0 ; remember the nt of this word for later
.939d	20 02 b4	jsr $b402	DFAt:		jsr PopYA		; pop df_addr
.93a0	85 16		sta $16		DFAt_YA:	sta tmp2+0		; save df_addr
.93a2	84 17		sty $17				sty tmp2+1
.93a4	20 c2 84	jsr $84c2			jsr FAllocX		; alloc FP stack entry
.93a7	a0 00		ldy #$00			ldy #0			; +0 IEEE byte
.93a9	b1 16		lda ($16),y			lda (tmp2),y
.93ab	95 4d		sta $4d,x			sta FSExp,x
.93ad	c8		iny				iny			; +1 IEEE byte
.93ae	b1 16		lda ($16),y			lda (tmp2),y
.93b0	95 57		sta $57,x			sta FSMant0,x
.93b2	c8		iny				iny			; +2 IEEE byte
.93b3	b1 16		lda ($16),y			lda (tmp2),y
.93b5	95 61		sta $61,x			sta FSMant1,x
.93b7	c8		iny				iny			; +3 IEEE byte
.93b8	b1 16		lda ($16),y			lda (tmp2),y
.93ba	95 6b		sta $6b,x			sta FSMant2,x
.93bc	c8		iny				iny			; +4 IEEE byte
.93bd	b1 16		lda ($16),y			lda (tmp2),y
.93bf	95 75		sta $75,x			sta FSMant3,x
.93c1	c8		iny				iny			; +5 IEEE byte
.93c2	b1 16		lda ($16),y			lda (tmp2),y
.93c4	20 ed 93	jsr $93ed			jsr _shifta		; shift exponent & mantissa bits into place
.93c7	20 ed 93	jsr $93ed			jsr _shifta
.93ca	b5 57		lda $57,x			lda FSMant0,x		; finish shifting exponent bits
.93cc	0a		asl a				asl a
.93cd	36 4d		rol $4d,x			rol FSExp,x
.93cf	0a		asl a				asl a
.93d0	36 4d		rol $4d,x			rol FSExp,x
.93d2	b5 4d		lda $4d,x			lda FSExp,x		; remove +1023
.93d4	18		clc				clc
.93d5	69 02		adc #$02			adc #2
.93d7	95 4d		sta $4d,x			sta FSExp,x
.93d9	b5 57		lda $57,x			lda FSMant0,x
.93db	29 7f		and #$7f			and #$7f
.93dd	09 40		ora #$40			ora #$40		;   insert implied 1
.93df	95 57		sta $57,x			sta FSMant0,x		;   insert sign=0
.93e1	a6 14		ldx $14				ldx tmp1		; restore data stack index
.93e3	a0 00		ldy #$00			ldy #0			; get sign from +0 IEEE byte
.93e5	b1 16		lda ($16),y			lda (tmp2),y
.93e7	10 03		bpl $93ec			bpl +
.93e9	20 8a 8b	jsr $8b8a			jsr FNegate
.93ec					+
.93ec	60		rts				rts
.93ed	0a		asl a		_shifta:	asl a
.93ee	36 75		rol $75,x			rol FSMant3,x
.93f0	36 6b		rol $6b,x			rol FSMant2,x
.93f2	36 61		rol $61,x			rol FSMant1,x
.93f4	36 57		rol $57,x			rol FSMant0,x
.93f6	36 4d		rol $4d,x			rol FSExp,x
.93f8	60		rts				rts
=92					CodeLen	.var *-XtPtr1
=$93f9					Here1 = *	; remember here
>939b	5c					.byte CodeLen	;patch wh_CodeLength
>93f9	44 46 6c 6f 61 74 2b		Name0:	.text "DFloat+"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=37760					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9400	67					.byte (("DFloat+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=103					LinkDisplacement = Nt0-WordListLink
>9401	10					.byte WordFlags	;wh_Flags
>9402	03					.byte 3	;wh_CodeLength
>9403	67					  .byte LinkDisplacement	; offset to previous nt
=$9404					XtPtr1 ::= *
=37760					WordListLink ::= Nt0 ; remember the nt of this word for later
.9404	a9 08		lda #$08	DFloatPlus:	lda #8
.9406	4c 24 ca	jmp $ca24			jmp Plus_A
=5					CodeLen	.var *-XtPtr1
=$9409					Here1 = *	; remember here
>9402	05					.byte CodeLen	;patch wh_CodeLength
>9409	44 46 6c 6f 61 74 73		Name0:	.text "DFloats"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=37776					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9410	67					.byte (("DFloats"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>9411	10					.byte WordFlags	;wh_Flags
>9412	03					.byte 3	;wh_CodeLength
>9413	10					  .byte LinkDisplacement	; offset to previous nt
=$9414					XtPtr1 ::= *
=37776					WordListLink ::= Nt0 ; remember the nt of this word for later
.9414	a9 03		lda #$03	DFloats:	lda #3
.9416	4c 5a cb	jmp $cb5a			jmp LShift_A
=5					CodeLen	.var *-XtPtr1
=$9419					Here1 = *	; remember here
>9412	05					.byte CodeLen	;patch wh_CodeLength
>9419	46 4d 50 6f 6c 79		Name0:	.text "FMPoly"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=37791					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>941f	26					.byte (("FMPoly"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>9420	10					.byte WordFlags	;wh_Flags
>9421	03					.byte 3	;wh_CodeLength
>9422	0f					  .byte LinkDisplacement	; offset to previous nt
=$9423					XtPtr1 ::= *
=37791					WordListLink ::= Nt0 ; remember the nt of this word for later
.9423	20 02 b4	jsr $b402	FMPoly:		jsr PopYA
.9426	20 c1 b7	jsr $b7c1	FMPolyYA:	jsr PushYA		; push coefficent addr
.9429	20 4f 86	jsr $864f			jsr FAt_YA		; fetch 1st coefficent
.942c	4c 3f 94	jmp $943f			jmp _4
.942f	20 70 85	jsr $8570	_2:		jsr FOver
.9432	20 e3 8b	jsr $8be3			jsr FStar
.9435	b5 24		lda $24,x			lda DStack+0,x		; fetch next coefficent
.9437	b4 25		ldy $25,x			ldy DStack+1,x
.9439	20 4f 86	jsr $864f			jsr FAt_YA
.943c	20 15 8b	jsr $8b15			jsr FPlus
.943f	a9 05		lda #$05	_4:		lda #5			; bump coefficent ptr
.9441	20 24 ca	jsr $ca24			jsr Plus_A
.9444	a1 24		lda ($24,x)			lda (DStack+0,x)	; end of coefficent list?
.9446	d0 e7		bne $942f			bne _2
.9448	e8		inx				inx			; Drop coefficent ptr
.9449	e8		inx				inx
=39					CodeLen	.var *-XtPtr1
=$944a					Here1 = *	; remember here
>9421	27					.byte CodeLen	;patch wh_CodeLength
.944a	60		rts				rts
>944b	46 4c 6f 67 32 4d 31 4d		Name0:	.text "FLog2M1M"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=37843					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9453	a8					.byte (("FLog2M1M"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>9454	10					.byte WordFlags	;wh_Flags
>9455	03					.byte 3	;wh_CodeLength
>9456	34					  .byte LinkDisplacement	; offset to previous nt
=$9457					XtPtr1 ::= *
=37843					WordListLink ::= Nt0 ; remember the nt of this word for later
.9457	a9 61		lda #$61	FLog2M1M:	lda #<_c
.9459	a0 94		ldy #$94			ldy #>_c
.945b	20 26 94	jsr $9426			jsr FMPolyYA
.945e	4c e3 8b	jmp $8be3			jmp FStar
=10					CodeLen	.var *-XtPtr1
=$9461					Here1 = *	; remember here
>9455	0a					.byte CodeLen	;patch wh_CodeLength
.9461					_c:
>9461	cc cf 97 7c					.dword $7C97CFCC	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9465	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9466	64 87 94 af					.dword $AF948764	; 32 bit signed binary mantissa.  $40000000 = +0.5
>946a	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>946b	66 c8 d4 62					.dword $62D4C866	; 32 bit signed binary mantissa.  $40000000 = +0.5
>946f	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9470	e2 9c c3 ac					.dword $ACC39CE2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9474	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9475	1a c6 2b 79					.dword $792BC61A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9479	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>947a	07 e1 c4 a3					.dword $A3C4E107	; 32 bit signed binary mantissa.  $40000000 = +0.5
>947e	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>947f	91 a5 54 5c					.dword $5C54A591	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9483	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>9484	00 00						.word 0
>9486	46 4c 6f 67 32			Name0:	.text "FLog2"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=37899					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>948b	45					.byte (("FLog2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>948c	10					.byte WordFlags	;wh_Flags
>948d	03					.byte 3	;wh_CodeLength
>948e	38					  .byte LinkDisplacement	; offset to previous nt
=$948f					XtPtr1 ::= *
=37899					WordListLink ::= Nt0 ; remember the nt of this word for later
.948f	a4 4c		ldy $4c		FLog2:		ldy FIndex
.9491	b9 57 00	lda $0057,y			lda FSMant0,y	; bad param?
.9494	30 20		bmi $94b6			bmi _OutOfRange
.9496	f0 1e		beq $94b6			beq _OutOfRange
.9498	b9 4d 00	lda $004d,y			lda FSExp,y
.949b	48		pha				pha		; remember orig exponent
.949c	a9 01		lda #$01			lda #1
.949e	99 4d 00	sta $004d,y			sta FSExp,y	; set to 1
.94a1	20 79 8b	jsr $8b79			jsr F1Minus
.94a4	20 57 94	jsr $9457			jsr FLog2M1M
.94a7	a0 00		ldy #$00			ldy #0		; add orig exponent to float
.94a9	68		pla				pla
.94aa	38		sec				sec
.94ab	e9 01		sbc #$01			sbc #1
.94ad	10 01		bpl $94b0			bpl +
.94af	88		dey				dey
.94b0					+
.94b0	20 30 8e	jsr $8e30			jsr SToFYA
.94b3	4c 15 8b	jmp $8b15			jmp FPlus
.94b6	4c 62 b4	jmp $b462	_OutOfRange:	jmp Throw_FpOutOfRange
=42					CodeLen	.var *-XtPtr1
=$94b9					Here1 = *	; remember here
>948d	2a					.byte CodeLen	;patch wh_CodeLength
>94b9	46 4c 6e			Name0:	.text "FLn"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37948					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94bc	c3					.byte (("FLn"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>94bd	10					.byte WordFlags	;wh_Flags
>94be	03					.byte 3	;wh_CodeLength
>94bf	31					  .byte LinkDisplacement	; offset to previous nt
=$94c0					XtPtr1 ::= *
=37948					WordListLink ::= Nt0 ; remember the nt of this word for later
.94c0	20 8f 94	jsr $948f	FLn:		jsr FLog2
.94c3	20 48 88	jsr $8848			jsr FLitI
>94c6	f8 0b b9 58					.dword $58b90bf8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94ca	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
.94cb	4c e3 8b	jmp $8be3			jmp FStar
=14					CodeLen	.var *-XtPtr1
=$94ce					Here1 = *	; remember here
>94be	0e					.byte CodeLen	;patch wh_CodeLength
>94ce	46 4c 6e 50 31			Name0:	.text "FLnP1"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=37971					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94d3	25					.byte (("FLnP1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>94d4	10					.byte WordFlags	;wh_Flags
>94d5	03					.byte 3	;wh_CodeLength
>94d6	17					  .byte LinkDisplacement	; offset to previous nt
=$94d7					XtPtr1 ::= *
=37971					WordListLink ::= Nt0 ; remember the nt of this word for later
.94d7	20 49 8b	jsr $8b49	FlnP1:		jsr F1Plus
.94da	4c c0 94	jmp $94c0			jmp FLn
=6					CodeLen	.var *-XtPtr1
=$94dd					Here1 = *	; remember here
>94d5	06					.byte CodeLen	;patch wh_CodeLength
>94dd	46 4c 6f 67			Name0:	.text "FLog"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=37985					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94e1	e4					.byte (("FLog"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>94e2	10					.byte WordFlags	;wh_Flags
>94e3	03					.byte 3	;wh_CodeLength
>94e4	0e					  .byte LinkDisplacement	; offset to previous nt
=$94e5					XtPtr1 ::= *
=37985					WordListLink ::= Nt0 ; remember the nt of this word for later
.94e5	20 8f 94	jsr $948f	FLog:		jsr FLog2
.94e8	20 48 88	jsr $8848			jsr FLitI
>94eb	3c 4d 10 4d					.dword $4d104d3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94ef	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
.94f0	4c e3 8b	jmp $8be3			jmp FStar
=14					CodeLen	.var *-XtPtr1
=$94f3					Here1 = *	; remember here
>94e3	0e					.byte CodeLen	;patch wh_CodeLength
>94f3	46 45 78 70 32 4d 31 4d		Name0:	.text "FExp2M1M"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=38011					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94fb	a8					.byte (("FExp2M1M"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>94fc	10					.byte WordFlags	;wh_Flags
>94fd	03					.byte 3	;wh_CodeLength
>94fe	1a					  .byte LinkDisplacement	; offset to previous nt
=$94ff					XtPtr1 ::= *
=38011					WordListLink ::= Nt0 ; remember the nt of this word for later
.94ff	a9 09		lda #$09	FExp2M1M:	lda #<_c
.9501	a0 95		ldy #$95			ldy #>_c
.9503	20 26 94	jsr $9426			jsr FMPolyYA
.9506	4c e3 8b	jmp $8be3			jmp FStar
=10					CodeLen	.var *-XtPtr1
=$9509					Here1 = *	; remember here
>94fd	0a					.byte CodeLen	;patch wh_CodeLength
.9509					_c:
>9509	e7 dc 4f 7c					.dword $7C4FDCe7	; 32 bit signed binary mantissa.  $40000000 = +0.5
>950d	f7						.char -9		; 8 bit signed exponent.  $00 = 2**0
>950e	de ca 4c 49					.dword $494CCADe	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9512	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9513	fb 42 64 72					.dword $726442fb	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9517	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9518	50 90 f4 7a					.dword $7AF49050	; 32 bit signed binary mantissa.  $40000000 = +0.5
>951c	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>951d	a2 3c b9 58					.dword $58B93Ca2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9521	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>9522	00						.byte 0
>9523	46 45 78 70 32			Name0:	.text "FExp2"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38056					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9528	45					.byte (("FExp2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>9529	10					.byte WordFlags	;wh_Flags
>952a	03					.byte 3	;wh_CodeLength
>952b	2d					  .byte LinkDisplacement	; offset to previous nt
=$952c					XtPtr1 ::= *
=38056					WordListLink ::= Nt0 ; remember the nt of this word for later
.952c	20 45 8a	jsr $8a45	FExp2:		jsr FIntFrc	; ( f: r_rem r_int )
.952f	20 78 8e	jsr $8e78			jsr FToS
.9532	20 ff 94	jsr $94ff			jsr FExp2M1M
.9535	20 49 8b	jsr $8b49			jsr F1Plus
.9538	20 e7 b3	jsr $b3e7			jsr PopA
.953b	a4 4c		ldy $4c				ldy FIndex
.953d	18		clc				clc
.953e	79 4d 00	adc $004d,y			adc FSExp,y
.9541	99 4d 00	sta $004d,y			sta FSExp,y
=24					CodeLen	.var *-XtPtr1
=$9544					Here1 = *	; remember here
>952a	18					.byte CodeLen	;patch wh_CodeLength
.9544	60		rts				rts
>9545	46 45 78 70			Name0:	.text "FExp"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38089					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9549	04					.byte (("FExp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>954a	10					.byte WordFlags	;wh_Flags
>954b	03					.byte 3	;wh_CodeLength
>954c	21					  .byte LinkDisplacement	; offset to previous nt
=$954d					XtPtr1 ::= *
=38089					WordListLink ::= Nt0 ; remember the nt of this word for later
.954d					FExp:
.954d	20 48 88	jsr $8848			jsr FLitI
>9550	94 1d 55 5c					.dword $5c551d94	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9554	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
.9555	20 e3 8b	jsr $8be3			jsr FStar
.9558	4c 2c 95	jmp $952c			jmp FExp2
=14					CodeLen	.var *-XtPtr1
=$955b					Here1 = *	; remember here
>954b	0e					.byte CodeLen	;patch wh_CodeLength
>955b	46 45 78 70 4d 31		Name0:	.text "FExpM1"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=38113					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9561	26					.byte (("FExpM1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>9562	10					.byte WordFlags	;wh_Flags
>9563	03					.byte 3	;wh_CodeLength
>9564	18					  .byte LinkDisplacement	; offset to previous nt
=$9565					XtPtr1 ::= *
=38113					WordListLink ::= Nt0 ; remember the nt of this word for later
.9565	20 4d 95	jsr $954d	FExpM1:		jsr FExp
.9568	4c 79 8b	jmp $8b79			jmp F1Minus
=6					CodeLen	.var *-XtPtr1
=$956b					Here1 = *	; remember here
>9563	06					.byte CodeLen	;patch wh_CodeLength
>956b	46 41 4c 6f 67			Name0:	.text "FALog"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38128					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9570	e5					.byte (("FALog"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>9571	10					.byte WordFlags	;wh_Flags
>9572	03					.byte 3	;wh_CodeLength
>9573	0f					  .byte LinkDisplacement	; offset to previous nt
=$9574					XtPtr1 ::= *
=38128					WordListLink ::= Nt0 ; remember the nt of this word for later
.9574					FALog:
.9574	20 48 88	jsr $8848			jsr FLitI
>9577	25 3c 4d 6a					.dword $6a4d3c25	; 32 bit signed binary mantissa.  $40000000 = +0.5
>957b	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
.957c	20 e3 8b	jsr $8be3			jsr FStar
.957f	4c 2c 95	jmp $952c			jmp FExp2
=14					CodeLen	.var *-XtPtr1
=$9582					Here1 = *	; remember here
>9572	0e					.byte CodeLen	;patch wh_CodeLength
>9582	46 2a 2a			Name0:	.text "F**"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=38149					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9585	43					.byte (("F**"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>9586	10					.byte WordFlags	;wh_Flags
>9587	03					.byte 3	;wh_CodeLength
>9588	15					  .byte LinkDisplacement	; offset to previous nt
=$9589					XtPtr1 ::= *
=38149					WordListLink ::= Nt0 ; remember the nt of this word for later
.9589	20 d1 85	jsr $85d1	FPower:		jsr FSwap
.958c	20 8f 94	jsr $948f			jsr FLog2
.958f	20 e3 8b	jsr $8be3			jsr FStar
.9592	4c 2c 95	jmp $952c			jmp FExp2
=12					CodeLen	.var *-XtPtr1
=$9595					Here1 = *	; remember here
>9587	0c					.byte CodeLen	;patch wh_CodeLength
>9595	44 65 67 32 52 61 64		Name0:	.text "Deg2Rad"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=38172					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>959c	87					.byte (("Deg2Rad"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>959d	10					.byte WordFlags	;wh_Flags
>959e	03					.byte 3	;wh_CodeLength
>959f	17					  .byte LinkDisplacement	; offset to previous nt
=$95a0					XtPtr1 ::= *
=38172					WordListLink ::= Nt0 ; remember the nt of this word for later
.95a0					Deg2Rad:
.95a0	20 48 88	jsr $8848			jsr FLitI
>95a3	8a 1a 7d 47					.dword $477d1A8A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95a7	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
.95a8	4c e3 8b	jmp $8be3			jmp FStar
=11					CodeLen	.var *-XtPtr1
=$95ab					Here1 = *	; remember here
>959e	0b					.byte CodeLen	;patch wh_CodeLength
>95ab	52 61 64 32 44 65 67		Name0:	.text "Rad2Deg"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=38194					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>95b2	e7					.byte (("Rad2Deg"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>95b3	10					.byte WordFlags	;wh_Flags
>95b4	03					.byte 3	;wh_CodeLength
>95b5	16					  .byte LinkDisplacement	; offset to previous nt
=$95b6					XtPtr1 ::= *
=38194					WordListLink ::= Nt0 ; remember the nt of this word for later
.95b6					Rad2Deg:
.95b6	20 48 88	jsr $8848			jsr FLitI
>95b9	68 70 97 72					.dword $72977068	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95bd	06						.char 6		; 8 bit signed exponent.  $00 = 2**0
.95be	4c e3 8b	jmp $8be3			jmp FStar
=11					CodeLen	.var *-XtPtr1
=$95c1					Here1 = *	; remember here
>95b4	0b					.byte CodeLen	;patch wh_CodeLength
>95c1	46 41 52 65 64 75 63 65		Name0:	.text "FAReduce"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=38217					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>95c9	a8					.byte (("FAReduce"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>95ca	10					.byte WordFlags	;wh_Flags
>95cb	03					.byte 3	;wh_CodeLength
>95cc	17					  .byte LinkDisplacement	; offset to previous nt
=$95cd					XtPtr1 ::= *
=38217					WordListLink ::= Nt0 ; remember the nt of this word for later
.95cd	a4 4c		ldy $4c		FAReduce:	ldy FIndex
.95cf	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.95d2	f0 2f		beq $9603			beq _ok
.95d4	b9 4d 00	lda $004d,y			lda FSExp,y		; get exponent
.95d7	30 2a		bmi $9603			bmi _ok			; small?
.95d9	c9 01		cmp #$01			cmp #1			; maybe need mirror?
.95db	30 26		bmi $9603			bmi _ok			;if exponent <=0
.95dd	f0 24		beq $9603			beq _ok
.95df	c9 02		cmp #$02			cmp #2			; maybe need rotation?
.95e1	b0 22		bcs $9605			bcs _exp2
.95e3	b9 57 00	lda $0057,y			lda FSMant0,y
.95e6	c9 65		cmp #$65			cmp #$65		;in -pi/2..pi/2 ?
.95e8	90 19		bcc $9603			bcc _ok
.95ea	c9 9b		cmp #$9b			cmp #$100-$65
.95ec	b0 15		bcs $9603			bcs _ok
.95ee					_mir:
.95ee	20 fe 88	jsr $88fe			jsr FPi
.95f1	a4 4c		ldy $4c				ldy FIndex
.95f3	b9 58 00	lda $0058,y			lda FSMant0+1,y
.95f6	10 03		bpl $95fb			bpl _3
.95f8	20 8a 8b	jsr $8b8a			jsr FNegate
.95fb	20 d1 85	jsr $85d1	_3:		jsr FSwap
.95fe	20 55 8b	jsr $8b55			jsr FMinus
.9601	38		sec				sec		; mirrored
.9602	60		rts				rts
.9603	18		clc		_ok:		clc		; not mirrored
.9604	60		rts				rts
.9605	d0 0b		bne $9612	_exp2:		bne _rot	;if exp>2 then fix
.9607	b9 57 00	lda $0057,y			lda FSMant0,y
.960a	c9 65		cmp #$65			cmp #$65	;if mant>pi or mant<-pi then fix
.960c	90 e0		bcc $95ee			bcc _mir
.960e	c9 9b		cmp #$9b			cmp #$100-$65
.9610	b0 dc		bcs $95ee			bcs _mir
.9612	20 2d 89	jsr $892d	_rot:		jsr F2Pi
.9615	20 9e 8c	jsr $8c9e			jsr FSlash
.9618	20 45 8a	jsr $8a45			jsr FIntFrc
.961b	e6 4c		inc $4c				inc FIndex	; FDrop integer part
.961d	a4 4c		ldy $4c				ldy FIndex	;if >=.5
.961f	b9 4d 00	lda $004d,y			lda FSExp,y
.9622	a8		tay				tay
.9623	30 03		bmi $9628			bmi _rot4
.9625	20 79 8b	jsr $8b79			jsr F1Minus	;  subtract 1
.9628	20 2d 89	jsr $892d	_rot4:		jsr F2Pi
.962b	20 e3 8b	jsr $8be3			jsr FStar
.962e	4c cd 95	jmp $95cd			jmp FAReduce	; rotate done, look again
=100					CodeLen	.var *-XtPtr1
=$9631					Here1 = *	; remember here
>95cb	64					.byte CodeLen	;patch wh_CodeLength
>9631	46 53 69 6e			Name0:	.text "FSin"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38325					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9635	c4					.byte (("FSin"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=108					LinkDisplacement = Nt0-WordListLink
>9636	10					.byte WordFlags	;wh_Flags
>9637	03					.byte 3	;wh_CodeLength
>9638	6c					  .byte LinkDisplacement	; offset to previous nt
=$9639					XtPtr1 ::= *
=38325					WordListLink ::= Nt0 ; remember the nt of this word for later
.9639	20 cd 95	jsr $95cd	FSin:		jsr FAReduce
.963c	4c 3f 96	jmp $963f			jmp FSinM
=6					CodeLen	.var *-XtPtr1
=$963f					Here1 = *	; remember here
>9637	06					.byte CodeLen	;patch wh_CodeLength
.963f	20 4d 85	jsr $854d	FSinM:		jsr FDup
.9642	20 73 8c	jsr $8c73			jsr FSqr	; x x^2
.9645	a9 55		lda #$55			lda #<_c
.9647	a0 96		ldy #$96			ldy #>_c
.9649	20 26 94	jsr $9426			jsr FMPolyYA
.964c	20 e3 8b	jsr $8be3			jsr FStar
.964f	20 49 8b	jsr $8b49			jsr F1Plus	; C0 +1.0
.9652	4c e3 8b	jmp $8be3			jmp FStar
.9655					_c:
>9655	ba a7 21 57					.dword $5721a7ba	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9659	ee						.char -18		; 8 bit signed exponent.  $00 = 2**0
>965a	3a 0b 2a 98					.dword $982a0b3a	; 32 bit signed binary mantissa.  $40000000 = +0.5
>965e	f4						.char -12		; 8 bit signed exponent.  $00 = 2**0
>965f	4c 8f 43 44					.dword $44438f4c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9663	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9664	2b ae aa aa					.dword $aaaaae2b	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9668	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9669	00						.byte 0
>966a	46 43 73 63			Name0:	.text "FCsc"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38382					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>966e	64					.byte (("FCsc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=57					LinkDisplacement = Nt0-WordListLink
>966f	10					.byte WordFlags	;wh_Flags
>9670	03					.byte 3	;wh_CodeLength
>9671	39					  .byte LinkDisplacement	; offset to previous nt
=$9672					XtPtr1 ::= *
=38382					WordListLink ::= Nt0 ; remember the nt of this word for later
.9672	20 39 96	jsr $9639	FCsc:		jsr FSin
.9675	4c 42 8d	jmp $8d42			jmp F1Slash		; 1/SIN(r1)
=6					CodeLen	.var *-XtPtr1
=$9678					Here1 = *	; remember here
>9670	06					.byte CodeLen	;patch wh_CodeLength
>9678	46 43 6f 73			Name0:	.text "FCos"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38396					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>967c	64					.byte (("FCos"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>967d	10					.byte WordFlags	;wh_Flags
>967e	03					.byte 3	;wh_CodeLength
>967f	0e					  .byte LinkDisplacement	; offset to previous nt
=$9680					XtPtr1 ::= *
=38396					WordListLink ::= Nt0 ; remember the nt of this word for later
.9680	20 0e 89	jsr $890e	FCos:		jsr FPiH
.9683	20 15 8b	jsr $8b15			jsr FPlus
.9686	4c 39 96	jmp $9639			jmp FSin
=9					CodeLen	.var *-XtPtr1
=$9689					Here1 = *	; remember here
>967e	09					.byte CodeLen	;patch wh_CodeLength
>9689	46 53 65 63			Name0:	.text "FSec"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38413					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>968d	64					.byte (("FSec"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>968e	10					.byte WordFlags	;wh_Flags
>968f	03					.byte 3	;wh_CodeLength
>9690	11					  .byte LinkDisplacement	; offset to previous nt
=$9691					XtPtr1 ::= *
=38413					WordListLink ::= Nt0 ; remember the nt of this word for later
.9691	20 80 96	jsr $9680	FSec:		jsr FCos
.9694	4c 42 8d	jmp $8d42			jmp F1Slash		; 1/COS(r1)
=6					CodeLen	.var *-XtPtr1
=$9697					Here1 = *	; remember here
>968f	06					.byte CodeLen	;patch wh_CodeLength
>9697	46 53 69 6e 43 6f 73		Name0:	.text "FSinCos"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=38430					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>969e	67					.byte (("FSinCos"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>969f	10					.byte WordFlags	;wh_Flags
>96a0	03					.byte 3	;wh_CodeLength
>96a1	11					  .byte LinkDisplacement	; offset to previous nt
=$96a2					XtPtr1 ::= *
=38430					WordListLink ::= Nt0 ; remember the nt of this word for later
.96a2	20 4d 85	jsr $854d	FSinCos:	jsr FDup
.96a5	20 39 96	jsr $9639			jsr FSin
.96a8	20 d1 85	jsr $85d1			jsr FSwap
.96ab	4c 80 96	jmp $9680			jmp FCos
=12					CodeLen	.var *-XtPtr1
=$96ae					Here1 = *	; remember here
>96a0	0c					.byte CodeLen	;patch wh_CodeLength
>96ae	46 54 61 6e			Name0:	.text "FTan"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38450					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>96b2	c4					.byte (("FTan"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>96b3	10					.byte WordFlags	;wh_Flags
>96b4	03					.byte 3	;wh_CodeLength
>96b5	14					  .byte LinkDisplacement	; offset to previous nt
=$96b6					XtPtr1 ::= *
=38450					WordListLink ::= Nt0 ; remember the nt of this word for later
.96b6	20 cd 95	jsr $95cd	FTan:		jsr FAReduce
.96b9	90 06		bcc $96c1			bcc _30
.96bb	20 c1 96	jsr $96c1			jsr _30
.96be	4c 8a 8b	jmp $8b8a			jmp FNegate
.96c1					_30:
.96c1	20 4d 85	jsr $854d			jsr FDup
.96c4	20 b0 8b	jsr $8bb0			jsr FAbs
.96c7	20 1e 89	jsr $891e			jsr FPiQ
.96ca	20 68 87	jsr $8768			jsr FLe
.96cd	e8		inx				inx			; pop f
.96ce	e8		inx				inx
.96cf	b5 24		lda $24,x			lda DStack+0,x
.96d1	d0 19		bne $96ec			bne FTanM
.96d3	20 0e 89	jsr $890e			jsr FPiH
.96d6	a4 4c		ldy $4c				ldy FIndex		; get sign
.96d8	b9 57 00	lda $0057,y			lda FSMant0,y
.96db	10 03		bpl $96e0			bpl +
.96dd	20 8a 8b	jsr $8b8a			jsr FNegate
.96e0					+
.96e0	20 d1 85	jsr $85d1			jsr FSwap
.96e3	20 55 8b	jsr $8b55			jsr FMinus
.96e6	20 ec 96	jsr $96ec			jsr FTanM
.96e9	4c 42 8d	jmp $8d42			jmp F1Slash
=54					CodeLen	.var *-XtPtr1
=$96ec					Here1 = *	; remember here
>96b4	36					.byte CodeLen	;patch wh_CodeLength
.96ec	20 4d 85	jsr $854d	FTanM:		jsr FDup
.96ef	20 73 8c	jsr $8c73			jsr FSqr		; x x^2
.96f2	a9 02		lda #$02			lda #<_c
.96f4	a0 97		ldy #$97			ldy #>_c
.96f6	20 26 94	jsr $9426			jsr FMPolyYA
.96f9	20 e3 8b	jsr $8be3			jsr FStar
.96fc	20 49 8b	jsr $8b49			jsr F1Plus		; c0 1.0
.96ff	4c e3 8b	jmp $8be3			jmp FStar
.9702					_c:
>9702	1e ae 4d 58					.dword $584DAE1E	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9706	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>9707	51 0a eb 57					.dword $57EB0A51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>970b	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>970c	98 d9 14 77					.dword $7714D998	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9710	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9711	f9 10 ea 43					.dword $43EA10F9	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9715	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9716	1b e2 57 55					.dword $5557E21B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>971a	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>971b	00						.byte 0
>971c	46 43 6f 74			Name0:	.text "FCot"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38560					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9720	84					.byte (("FCot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=110					LinkDisplacement = Nt0-WordListLink
>9721	10					.byte WordFlags	;wh_Flags
>9722	03					.byte 3	;wh_CodeLength
>9723	6e					  .byte LinkDisplacement	; offset to previous nt
=$9724					XtPtr1 ::= *
=38560					WordListLink ::= Nt0 ; remember the nt of this word for later
.9724	20 b6 96	jsr $96b6	FCot:		jsr FTan
.9727	4c 42 8d	jmp $8d42			jmp F1Slash	; =1/TAN(r1)
=6					CodeLen	.var *-XtPtr1
=$972a					Here1 = *	; remember here
>9722	06					.byte CodeLen	;patch wh_CodeLength
>972a	46 41 43 6f 73			Name0:	.text "FACos"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38575					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>972f	65					.byte (("FACos"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>9730	10					.byte WordFlags	;wh_Flags
>9731	03					.byte 3	;wh_CodeLength
>9732	0f					  .byte LinkDisplacement	; offset to previous nt
=$9733					XtPtr1 ::= *
=38575					WordListLink ::= Nt0 ; remember the nt of this word for later
.9733	a4 4c		ldy $4c		FACos:		ldy FIndex
.9735	b9 57 00	lda $0057,y			lda FSMant0,y
.9738	08		php				php			; save sign
.9739	20 b0 8b	jsr $8bb0			jsr FAbs
.973c	a9 5f		lda #$5f			lda #<_c
.973e	a0 97		ldy #$97			ldy #>_c
.9740	20 26 94	jsr $9426			jsr FMPolyYA
.9743	20 d1 85	jsr $85d1			jsr FSwap
.9746	20 8a 8b	jsr $8b8a			jsr FNegate
.9749	20 49 8b	jsr $8b49			jsr F1Plus
.974c	20 1e 8f	jsr $8f1e			jsr FSqrt
.974f	20 e3 8b	jsr $8be3			jsr FStar
.9752	28		plp				plp			; was r1 negative?
.9753	10 09		bpl $975e			bpl +
.9755	20 fe 88	jsr $88fe			jsr FPi
.9758	20 d1 85	jsr $85d1			jsr FSwap
.975b	20 55 8b	jsr $8b55			jsr FMinus
.975e					+
=43					CodeLen	.var *-XtPtr1
=$975e					Here1 = *	; remember here
>9731	2b					.byte CodeLen	;patch wh_CodeLength
.975e	60		rts				rts
.975f					_c:
>975f	8b 5e 9f 4b					.dword $4B9F5E8B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9763	f8						.char -8		; 8 bit signed exponent.  $00 = 2**0
>9764	ad cc 29 a4					.dword $A429CCAD	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9768	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9769	98 a1 a3 6e					.dword $6EA3A198	; 32 bit signed binary mantissa.  $40000000 = +0.5
>976d	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>976e	5a 10 e1 9b					.dword $9BE1105A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9772	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9773	c6 71 ea 5a					.dword $5AEA71C6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9777	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>9778	e0 56 21 92					.dword $922156E0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>977c	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>977d	41 ed 87 64					.dword $6487ED41	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9781	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>9782	00						.byte 0
>9783	46 41 53 65 63			Name0:	.text "FASec"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38664					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9788	65					.byte (("FASec"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=89					LinkDisplacement = Nt0-WordListLink
>9789	10					.byte WordFlags	;wh_Flags
>978a	03					.byte 3	;wh_CodeLength
>978b	59					  .byte LinkDisplacement	; offset to previous nt
=$978c					XtPtr1 ::= *
=38664					WordListLink ::= Nt0 ; remember the nt of this word for later
.978c	20 42 8d	jsr $8d42	FASec:		jsr F1Slash
.978f	4c 33 97	jmp $9733			jmp FACos
=6					CodeLen	.var *-XtPtr1
=$9792					Here1 = *	; remember here
>978a	06					.byte CodeLen	;patch wh_CodeLength
>9792	46 41 53 69 6e			Name0:	.text "FASin"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38679					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9797	c5					.byte (("FASin"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>9798	10					.byte WordFlags	;wh_Flags
>9799	03					.byte 3	;wh_CodeLength
>979a	0f					  .byte LinkDisplacement	; offset to previous nt
=$979b					XtPtr1 ::= *
=38679					WordListLink ::= Nt0 ; remember the nt of this word for later
.979b	20 33 97	jsr $9733	FASin:		jsr FACos
.979e	20 8a 8b	jsr $8b8a			jsr FNegate
.97a1	20 0e 89	jsr $890e			jsr FPiH
.97a4	4c 15 8b	jmp $8b15			jmp FPlus
=12					CodeLen	.var *-XtPtr1
=$97a7					Here1 = *	; remember here
>9799	0c					.byte CodeLen	;patch wh_CodeLength
>97a7	46 41 43 73 63			Name0:	.text "FACsc"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38700					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>97ac	65					.byte (("FACsc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>97ad	10					.byte WordFlags	;wh_Flags
>97ae	03					.byte 3	;wh_CodeLength
>97af	15					  .byte LinkDisplacement	; offset to previous nt
=$97b0					XtPtr1 ::= *
=38700					WordListLink ::= Nt0 ; remember the nt of this word for later
.97b0	20 42 8d	jsr $8d42	FACsc:		jsr F1Slash
.97b3	4c 9b 97	jmp $979b			jmp FASin
=6					CodeLen	.var *-XtPtr1
=$97b6					Here1 = *	; remember here
>97ae	06					.byte CodeLen	;patch wh_CodeLength
>97b6	46 41 54 61 6e			Name0:	.text "FATan"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38715					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>97bb	c5					.byte (("FATan"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>97bc	10					.byte WordFlags	;wh_Flags
>97bd	03					.byte 3	;wh_CodeLength
>97be	0f					  .byte LinkDisplacement	; offset to previous nt
=$97bf					XtPtr1 ::= *
=38715					WordListLink ::= Nt0 ; remember the nt of this word for later
.97bf					FATan:
.97bf	a4 4c		ldy $4c				ldy FIndex
.97c1	b9 4d 00	lda $004d,y			lda FSExp,y		; Abs(r1)<1 ?
.97c4	30 1b		bmi $97e1			bmi FATanM
.97c6	f0 19		beq $97e1			beq FATanM
.97c8	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.97cb	08		php				php
.97cc	20 42 8d	jsr $8d42			jsr F1Slash
.97cf	20 e1 97	jsr $97e1			jsr FATanM
.97d2	20 8a 8b	jsr $8b8a			jsr FNegate
.97d5	20 0e 89	jsr $890e			jsr FPiH
.97d8	28		plp				plp
.97d9	10 03		bpl $97de			bpl _18
.97db	20 8a 8b	jsr $8b8a			jsr FNegate
.97de	4c 15 8b	jmp $8b15	_18:		jmp FPlus
.97e1	20 4d 85	jsr $854d	FATanM:		jsr FDup		; x x
.97e4	20 73 8c	jsr $8c73			jsr FSqr		; x xsqr
.97e7	a9 f7		lda #$f7			lda #<_c
.97e9	a0 97		ldy #$97			ldy #>_c
.97eb	20 26 94	jsr $9426			jsr FMPolyYA
.97ee	20 e3 8b	jsr $8be3			jsr FStar		; x poly
.97f1	20 49 8b	jsr $8b49			jsr F1Plus		; x poly
.97f4	4c e3 8b	jmp $8be3			jmp FStar
.97f7					_c:
>97f7	98 08 2d 76					.dword $762D0898	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97fb	f9						.char -7		; 8 bit signed exponent.  $00 = 2**0
>97fc	55 a1 32 b8					.dword $B832A155	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9800	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9801	a8 d7 a2 53					.dword $53A2D7A8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9805	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>9806	be 91 85 bb					.dword $BB8591BE	; 32 bit signed binary mantissa.  $40000000 = +0.5
>980a	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>980b	06 65 aa 65					.dword $65AA6506	; 32 bit signed binary mantissa.  $40000000 = +0.5
>980f	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9810	12 21 b0 aa					.dword $AAB02112	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9814	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9815	00						.byte 0
>9816	46 41 43 6f 74			Name0:	.text "FACot"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38811					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>981b	85					.byte (("FACot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=96					LinkDisplacement = Nt0-WordListLink
>981c	10					.byte WordFlags	;wh_Flags
>981d	03					.byte 3	;wh_CodeLength
>981e	60					  .byte LinkDisplacement	; offset to previous nt
=$981f					XtPtr1 ::= *
=38811					WordListLink ::= Nt0 ; remember the nt of this word for later
.981f	20 42 8d	jsr $8d42	FACot:		jsr F1Slash
.9822	4c bf 97	jmp $97bf			jmp FATan
=6					CodeLen	.var *-XtPtr1
=$9825					Here1 = *	; remember here
>981d	06					.byte CodeLen	;patch wh_CodeLength
>9825	46 41 54 61 6e 32		Name0:	.text "FATan2"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=38827					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>982b	46					.byte (("FATan2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>982c	10					.byte WordFlags	;wh_Flags
>982d	03					.byte 3	;wh_CodeLength
>982e	10					  .byte LinkDisplacement	; offset to previous nt
=$982f					XtPtr1 ::= *
=38827					WordListLink ::= Nt0 ; remember the nt of this word for later
.982f	a4 4c		ldy $4c		FATan2:		ldy FIndex
.9831	b9 57 00	lda $0057,y			lda FSMant0+0,y	; get rx sign
.9834	f0 1c		beq $9852			beq _rxzero
.9836	0a		asl a				asl a		;   C=rx sign
.9837	b9 58 00	lda $0058,y			lda FSMant0+1,y	;   N=ry sign
.983a	08		php				php		; save signs
.983b	20 9e 8c	jsr $8c9e			jsr FSlash
.983e	20 bf 97	jsr $97bf			jsr FATan
.9841	28		plp				plp		; pop signs
.9842	b0 01		bcs $9845			bcs _rxneg
.9844	60		rts		_rts:		rts
.9845	08		php		_rxneg:		php
.9846	20 fe 88	jsr $88fe			jsr FPi
.9849	28		plp				plp
.984a	10 03		bpl $984f			bpl +
.984c	20 8a 8b	jsr $8b8a			jsr FNegate
.984f	4c 15 8b	jmp $8b15	+		jmp FPlus
.9852	e6 4c		inc $4c		_rxzero:	inc FIndex	; FDrop rx
.9854	b9 57 00	lda $0057,y			lda FSMant0,y
.9857	08		php				php
.9858	e6 4c		inc $4c				inc FIndex	; FDrop ry
.985a	20 0e 89	jsr $890e			jsr FPiH
.985d	28		plp				plp
.985e	10 e4		bpl $9844			bpl _rts
.9860	4c 8a 8b	jmp $8b8a			jmp FNegate
=52					CodeLen	.var *-XtPtr1
=$9863					Here1 = *	; remember here
>982d	34					.byte CodeLen	;patch wh_CodeLength
>9863	46 53 67 6e			Name0:	.text "FSgn"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38887					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9867	c4					.byte (("FSgn"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=60					LinkDisplacement = Nt0-WordListLink
>9868	10					.byte WordFlags	;wh_Flags
>9869	03					.byte 3	;wh_CodeLength
>986a	3c					  .byte LinkDisplacement	; offset to previous nt
=$986b					XtPtr1 ::= *
=38887					WordListLink ::= Nt0 ; remember the nt of this word for later
.986b	a4 4c		ldy $4c		FSgn:		ldy FIndex
.986d	b9 57 00	lda $0057,y			lda FSMant0,y
.9870	f0 0a		beq $987c			beq _zero
.9872	e6 4c		inc $4c				inc FIndex
.9874	b9 57 00	lda $0057,y			lda FSMant0,y
.9877	30 04		bmi $987d			bmi FM1
.9879	4c e3 88	jmp $88e3			jmp F1
.987c	60		rts		_zero:		rts
=18					CodeLen	.var *-XtPtr1
=$987d					Here1 = *	; remember here
>9869	12					.byte CodeLen	;patch wh_CodeLength
.987d	a9 80		lda #$80	FM1:		lda #$80
.987f	a0 00		ldy #$00			ldy #0
.9881	4c 92 88	jmp $8892			jmp FLitYA
>9884	46 53 69 6e 48			Name0:	.text "FSinH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38921					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9889	05					.byte (("FSinH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>988a	10					.byte WordFlags	;wh_Flags
>988b	03					.byte 3	;wh_CodeLength
>988c	22					  .byte LinkDisplacement	; offset to previous nt
=$988d					XtPtr1 ::= *
=38921					WordListLink ::= Nt0 ; remember the nt of this word for later
.988d	20 4d 85	jsr $854d	FSinH:		jsr FDup
.9890	20 4d 95	jsr $954d			jsr FExp
.9893	20 d1 85	jsr $85d1			jsr FSwap
.9896	20 8a 8b	jsr $8b8a			jsr FNegate
.9899	20 4d 95	jsr $954d			jsr FExp
.989c	20 55 8b	jsr $8b55			jsr FMinus
.989f	4c 97 89	jmp $8997			jmp F2Slash
=21					CodeLen	.var *-XtPtr1
=$98a2					Here1 = *	; remember here
>988b	15					.byte CodeLen	;patch wh_CodeLength
>98a2	46 43 73 63 48			Name0:	.text "FCscH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38951					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98a7	05					.byte (("FCscH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>98a8	10					.byte WordFlags	;wh_Flags
>98a9	03					.byte 3	;wh_CodeLength
>98aa	1e					  .byte LinkDisplacement	; offset to previous nt
=$98ab					XtPtr1 ::= *
=38951					WordListLink ::= Nt0 ; remember the nt of this word for later
.98ab	20 8d 98	jsr $988d	FCscH:		jsr FSinH
.98ae	4c 42 8d	jmp $8d42			jmp F1Slash
=6					CodeLen	.var *-XtPtr1
=$98b1					Here1 = *	; remember here
>98a9	06					.byte CodeLen	;patch wh_CodeLength
>98b1	46 43 6f 73 48			Name0:	.text "FCosH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38966					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98b6	05					.byte (("FCosH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>98b7	10					.byte WordFlags	;wh_Flags
>98b8	03					.byte 3	;wh_CodeLength
>98b9	0f					  .byte LinkDisplacement	; offset to previous nt
=$98ba					XtPtr1 ::= *
=38966					WordListLink ::= Nt0 ; remember the nt of this word for later
.98ba	20 4d 85	jsr $854d	FCosH:		jsr FDup
.98bd	20 4d 95	jsr $954d			jsr FExp
.98c0	20 d1 85	jsr $85d1			jsr FSwap
.98c3	20 8a 8b	jsr $8b8a			jsr FNegate
.98c6	20 4d 95	jsr $954d			jsr FExp
.98c9	20 15 8b	jsr $8b15			jsr FPlus
.98cc	4c 97 89	jmp $8997			jmp F2Slash
=21					CodeLen	.var *-XtPtr1
=$98cf					Here1 = *	; remember here
>98b8	15					.byte CodeLen	;patch wh_CodeLength
>98cf	46 53 65 63 48			Name0:	.text "FSecH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38996					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98d4	05					.byte (("FSecH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>98d5	10					.byte WordFlags	;wh_Flags
>98d6	03					.byte 3	;wh_CodeLength
>98d7	1e					  .byte LinkDisplacement	; offset to previous nt
=$98d8					XtPtr1 ::= *
=38996					WordListLink ::= Nt0 ; remember the nt of this word for later
.98d8	20 ba 98	jsr $98ba	FSecH:		jsr FCosH
.98db	4c 42 8d	jmp $8d42			jmp F1Slash
=6					CodeLen	.var *-XtPtr1
=$98de					Here1 = *	; remember here
>98d6	06					.byte CodeLen	;patch wh_CodeLength
>98de	46 54 61 6e 48			Name0:	.text "FTanH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=39011					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98e3	05					.byte (("FTanH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>98e4	10					.byte WordFlags	;wh_Flags
>98e5	03					.byte 3	;wh_CodeLength
>98e6	0f					  .byte LinkDisplacement	; offset to previous nt
=$98e7					XtPtr1 ::= *
=39011					WordListLink ::= Nt0 ; remember the nt of this word for later
.98e7	20 4d 85	jsr $854d	FTanH:		jsr FDup
.98ea	20 8a 8b	jsr $8b8a			jsr FNegate	; X -X
.98ed	20 4d 95	jsr $954d			jsr FExp	; X Exp(-X)
.98f0	20 d1 85	jsr $85d1			jsr FSwap	; Exp(-X) X
.98f3	20 4d 95	jsr $954d			jsr FExp	; Exp(-X) Exp(X)
.98f6	20 70 85	jsr $8570			jsr FOver	; Exp(-X) Exp(X) Exp(-X)
.98f9	20 15 8b	jsr $8b15			jsr FPlus	; Exp(-X) Exp(X)+Exp(-X)
.98fc	20 9e 8c	jsr $8c9e			jsr FSlash	; Exp(-X)/(Exp(X)+Exp(-X))
.98ff	20 8c 89	jsr $898c			jsr F2Star	; Exp(-X)/(Exp(X)+Exp(-X))*2
.9902	20 8a 8b	jsr $8b8a			jsr FNegate
.9905	4c 49 8b	jmp $8b49			jmp F1Plus
=33					CodeLen	.var *-XtPtr1
=$9908					Here1 = *	; remember here
>98e5	21					.byte CodeLen	;patch wh_CodeLength
>9908	46 43 6f 74 48			Name0:	.text "FCotH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=39053					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>990d	05					.byte (("FCotH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>990e	10					.byte WordFlags	;wh_Flags
>990f	03					.byte 3	;wh_CodeLength
>9910	2a					  .byte LinkDisplacement	; offset to previous nt
=$9911					XtPtr1 ::= *
=39053					WordListLink ::= Nt0 ; remember the nt of this word for later
.9911	20 e7 98	jsr $98e7	FCotH:		jsr FTanH
.9914	4c 42 8d	jmp $8d42			jmp F1Slash
=6					CodeLen	.var *-XtPtr1
=$9917					Here1 = *	; remember here
>990f	06					.byte CodeLen	;patch wh_CodeLength
>9917	46 41 53 69 6e 48		Name0:	.text "FASinH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39069					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>991d	06					.byte (("FASinH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>991e	10					.byte WordFlags	;wh_Flags
>991f	03					.byte 3	;wh_CodeLength
>9920	10					  .byte LinkDisplacement	; offset to previous nt
=$9921					XtPtr1 ::= *
=39069					WordListLink ::= Nt0 ; remember the nt of this word for later
.9921	20 4d 85	jsr $854d	FASinH:		jsr FDup	; X X
.9924	20 73 8c	jsr $8c73			jsr FSqr	; X X*X
.9927	20 49 8b	jsr $8b49			jsr F1Plus	; X X*X+1
.992a	20 1e 8f	jsr $8f1e			jsr FSqrt	; X sqrt(X*X+1)
.992d	20 15 8b	jsr $8b15			jsr FPlus	;
.9930	4c c0 94	jmp $94c0			jmp FLn
=18					CodeLen	.var *-XtPtr1
=$9933					Here1 = *	; remember here
>991f	12					.byte CodeLen	;patch wh_CodeLength
>9933	46 41 43 73 63 48		Name0:	.text "FACscH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39097					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9939	06					.byte (("FACscH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>993a	10					.byte WordFlags	;wh_Flags
>993b	03					.byte 3	;wh_CodeLength
>993c	1c					  .byte LinkDisplacement	; offset to previous nt
=$993d					XtPtr1 ::= *
=39097					WordListLink ::= Nt0 ; remember the nt of this word for later
.993d	20 42 8d	jsr $8d42	FACscH:		jsr F1Slash
.9940	4c 21 99	jmp $9921			jmp FASinH
=6					CodeLen	.var *-XtPtr1
=$9943					Here1 = *	; remember here
>993b	06					.byte CodeLen	;patch wh_CodeLength
>9943	46 41 43 6f 73 48		Name0:	.text "FACosH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39113					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9949	06					.byte (("FACosH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>994a	10					.byte WordFlags	;wh_Flags
>994b	03					.byte 3	;wh_CodeLength
>994c	10					  .byte LinkDisplacement	; offset to previous nt
=$994d					XtPtr1 ::= *
=39113					WordListLink ::= Nt0 ; remember the nt of this word for later
.994d	20 4d 85	jsr $854d	FACosH:		jsr FDup
.9950	20 73 8c	jsr $8c73			jsr FSqr
.9953	20 79 8b	jsr $8b79			jsr F1Minus
.9956	20 1e 8f	jsr $8f1e			jsr FSqrt
.9959	20 15 8b	jsr $8b15			jsr FPlus
.995c	4c c0 94	jmp $94c0			jmp FLn
=18					CodeLen	.var *-XtPtr1
=$995f					Here1 = *	; remember here
>994b	12					.byte CodeLen	;patch wh_CodeLength
>995f	46 41 53 65 63 48		Name0:	.text "FASecH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39141					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9965	06					.byte (("FASecH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>9966	10					.byte WordFlags	;wh_Flags
>9967	03					.byte 3	;wh_CodeLength
>9968	1c					  .byte LinkDisplacement	; offset to previous nt
=$9969					XtPtr1 ::= *
=39141					WordListLink ::= Nt0 ; remember the nt of this word for later
.9969	20 42 8d	jsr $8d42	FASecH:		jsr F1Slash
.996c	4c 4d 99	jmp $994d			jmp FACosH
=6					CodeLen	.var *-XtPtr1
=$996f					Here1 = *	; remember here
>9967	06					.byte CodeLen	;patch wh_CodeLength
>996f	46 41 54 61 6e 48		Name0:	.text "FATanH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39157					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9975	06					.byte (("FATanH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>9976	10					.byte WordFlags	;wh_Flags
>9977	03					.byte 3	;wh_CodeLength
>9978	10					  .byte LinkDisplacement	; offset to previous nt
=$9979					XtPtr1 ::= *
=39157					WordListLink ::= Nt0 ; remember the nt of this word for later
.9979	20 4d 85	jsr $854d	FAtanH:		jsr FDup	; x x
.997c	20 49 8b	jsr $8b49			jsr F1Plus	; x x+1
.997f	20 d1 85	jsr $85d1			jsr FSwap	; 1+x x
.9982	20 e3 88	jsr $88e3			jsr F1
.9985	20 d1 85	jsr $85d1			jsr FSwap
.9988	20 55 8b	jsr $8b55			jsr FMinus	; 1+x 1-x
.998b	20 9e 8c	jsr $8c9e			jsr FSlash	; (1+x)/(1-x)
.998e	20 c0 94	jsr $94c0			jsr FLn
.9991	4c 97 89	jmp $8997			jmp F2Slash
=27					CodeLen	.var *-XtPtr1
=$9994					Here1 = *	; remember here
>9977	1b					.byte CodeLen	;patch wh_CodeLength
>9994	46 41 43 6f 74 48		Name0:	.text "FACotH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39194					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>999a	06					.byte (("FACotH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>999b	10					.byte WordFlags	;wh_Flags
>999c	03					.byte 3	;wh_CodeLength
>999d	25					  .byte LinkDisplacement	; offset to previous nt
=$999e					XtPtr1 ::= *
=39194					WordListLink ::= Nt0 ; remember the nt of this word for later
.999e	20 42 8d	jsr $8d42	FACotH: 	jsr F1Slash
.99a1	4c 79 99	jmp $9979			jmp FATanH
=6					CodeLen	.var *-XtPtr1
=$99a4					Here1 = *	; remember here
>999c	06					.byte CodeLen	;patch wh_CodeLength
>99a4	45 64				Name0:	.text "Ed"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=39206					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>99a6	82					.byte (("Ed"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>99a7	10					.byte WordFlags	;wh_Flags
>99a8	03					.byte 3	;wh_CodeLength
>99a9	0c					  .byte LinkDisplacement	; offset to previous nt
=$99aa					XtPtr1 ::= *
=39206					WordListLink ::= Nt0 ; remember the nt of this word for later
.99aa	4c ad 99	jmp $99ad	Ed:		jmp ed6502
=3					CodeLen	.var *-XtPtr1
=$99ad					Here1 = *	; remember here
>99a8	03					.byte CodeLen	;patch wh_CodeLength
=$1e					ed_head	 = editor1  ; pointer to first list element (addr) (2 bytes)
=$20					ed_cur	 = editor2  ; current line number (1 is first line) (2 bytes)
=$22					ed_flags = editor3  ; Flags used by ed, where
.99ad					ed6502:
.99ad	ad 00 03	lda $0300			lda base
.99b0	85 23		sta $23				sta editor3+1
.99b2	20 d7 b1	jsr $b1d7			jsr Decimal
.99b5	a9 00		lda #$00			lda #0
.99b7	85 1e		sta $1e				sta ed_head
.99b9	85 1f		sta $1f				sta ed_head+1
.99bb	85 20		sta $20				sta ed_cur
.99bd	85 21		sta $21				sta ed_cur+1
.99bf	85 22		sta $22				sta ed_flags
.99c1	20 fe b7	jsr $b7fe			jsr Zero
.99c4	20 fe b7	jsr $b7fe			jsr Zero		; ( addr-t u-t )
.99c7	20 7c ab	jsr $ab7c			jsr CR
.99ca					ed_input_loop:
.99ca	a9 7e		lda #$7e			lda #$ff-%10000001
.99cc	25 22		and $22				and ed_flags
.99ce	85 22		sta $22				sta ed_flags
.99d0	20 72 9e	jsr $9e72			jsr ed_get_input
.99d3	a5 06		lda $06				lda ciblen+0
.99d5	d0 1e		bne $99f5			bne _command_mode
.99d7	a5 20		lda $20				lda ed_cur+0
.99d9	a4 21		ldy $21				ldy ed_cur+1
.99db	20 c1 b7	jsr $b7c1			jsr PushYA		; ( addr-t u-t u )
.99de	a9 80		lda #$80			lda #%10000000
.99e0	05 22		ora $22				ora ed_flags
.99e2	85 22		sta $22				sta ed_flags
.99e4	20 72 ca	jsr $ca72			jsr One_Plus		; ( addr-t u-t u+1 )
.99e7	20 8d 9e	jsr $9e8d			jsr ed_is_valid_line
.99ea	b0 03		bcs $99ef			bcs +
.99ec	4c 62 9e	jmp $9e62			jmp ed_error_1drop	; New line number is not legal, abort
.99ef					+
.99ef	20 fe b7	jsr $b7fe			jsr Zero		; ( addr-t u-t u+1 0 )
.99f2	4c b4 9a	jmp $9ab4			jmp _line_number_only_from_external
.99f5					_command_mode:
.99f5	20 fe b7	jsr $b7fe			jsr Zero		; parameter 1 is NOS ( addr-t u-t 0 )
.99f8	20 fe b7	jsr $b7fe			jsr Zero		; parameter 2 is TOS ( addr-t u-t 0 0 )
.99fb	a0 00		ldy #$00			ldy #0			; get char
.99fd	b1 04		lda ($04),y			lda (cib),y
.99ff	c9 2e		cmp #$2e			cmp #'.'
.9a01	d0 31		bne $9a34			bne _prefix_dollar
.9a03	20 81 9e	jsr $9e81			jsr ed_have_text
.9a06	a5 20		lda $20				lda ed_cur
.9a08	95 26		sta $26,x			sta DStack+2,x
.9a0a	a5 21		lda $21				lda ed_cur+1
.9a0c	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9a0e	a9 80		lda #$80			lda #%10000000
.9a10	05 22		ora $22				ora ed_flags
.9a12	85 22		sta $22				sta ed_flags
.9a14	a5 06		lda $06				lda ciblen
.9a16	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9a18	d0 03		bne $9a1d			bne +
.9a1a	4c b4 9a	jmp $9ab4			jmp _line_number_only_from_external
.9a1d					+
.9a1d	a5 04		lda $04				lda cib+0
.9a1f	a4 05		ldy $05				ldy cib+1
.9a21	20 c1 b7	jsr $b7c1			jsr PushYA
.9a24	a5 06		lda $06				lda ciblen+0
.9a26	a4 07		ldy $07				ldy ciblen+1
.9a28	20 c1 b7	jsr $b7c1			jsr PushYA
.9a2b	20 4d ca	jsr $ca4d			jsr One_Minus		; ( addr-t u-t para1 0 addr u-1 )
.9a2e	20 7c ca	jsr $ca7c			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr+1 u-1 )
.9a31	4c 06 9b	jmp $9b06			jmp _check_for_para2
.9a34					_prefix_dollar:
.9a34	c9 24		cmp #$24			cmp #'$'
.9a36	d0 1f		bne $9a57			bne _prefix_percent
.9a38	20 81 9e	jsr $9e81			jsr ed_have_text
.9a3b	e8		inx				inx
.9a3c	e8		inx				inx			; ( addr-t u-t 0 )
.9a3d	20 ae 9e	jsr $9eae			jsr ed_last_line	; ( addr-t u-t 0 para1 )
.9a40	20 8b cf	jsr $cf8b			jsr Swap		; ( addr-t u-t para1 0 )
.9a43	a9 80		lda #$80			lda #%10000000
.9a45	05 22		ora $22				ora ed_flags
.9a47	85 22		sta $22				sta ed_flags
.9a49	a5 06		lda $06				lda ciblen
.9a4b	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9a4d	d0 03		bne $9a52			bne +
.9a4f	4c b4 9a	jmp $9ab4			jmp _line_number_only_from_external
.9a52					+
.9a52	a0 01		ldy #$01			ldy #1
.9a54	4c 7c 9b	jmp $9b7c			jmp _check_command
.9a57					_prefix_percent:
.9a57	c9 25		cmp #$25			cmp #'%'
.9a59	f0 04		beq $9a5f			beq _whole_text
.9a5b	c9 2c		cmp #$2c			cmp #','
.9a5d	d0 1b		bne $9a7a			bne _prefix_semicolon
.9a5f					_whole_text:
.9a5f	20 81 9e	jsr $9e81			jsr ed_have_text
.9a62	a9 01		lda #$01			lda #1
.9a64	95 26		sta $26,x			sta DStack+2,x		; LSB of NOS is para 1
.9a66	a9 00		lda #$00			lda #0
.9a68	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t para1 0 )
.9a6a					_semicolon_entry:
.9a6a	e8		inx				inx
.9a6b	e8		inx				inx			; DROP ( addr-t u-t para1 )
.9a6c	20 ae 9e	jsr $9eae			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9a6f	a9 80		lda #$80			lda #%10000000
.9a71	05 22		ora $22				ora ed_flags
.9a73	85 22		sta $22				sta ed_flags
.9a75	a0 01		ldy #$01			ldy #1
.9a77	4c 7c 9b	jmp $9b7c			jmp _check_command
.9a7a					_prefix_semicolon:
.9a7a	c9 3b		cmp #$3b			cmp #';'
.9a7c	d0 0e		bne $9a8c			bne _prefix_number
.9a7e	20 81 9e	jsr $9e81			jsr ed_have_text
.9a81	a5 20		lda $20				lda ed_cur
.9a83	95 26		sta $26,x			sta DStack+2,x
.9a85	a5 21		lda $21				lda ed_cur+1
.9a87	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9a89	4c 6a 9a	jmp $9a6a			jmp _semicolon_entry
.9a8c					_prefix_number:
.9a8c	20 fe b7	jsr $b7fe			jsr Zero
.9a8f	20 fe b7	jsr $b7fe			jsr Zero		; ( addr-t u-t 0 0 0 0 )
.9a92	a5 04		lda $04				lda cib+0
.9a94	a4 05		ldy $05				ldy cib+1
.9a96	20 c1 b7	jsr $b7c1			jsr PushYA
.9a99	a5 06		lda $06				lda ciblen+0
.9a9b	a4 07		ldy $07				ldy ciblen+1
.9a9d	20 c1 b7	jsr $b7c1			jsr PushYA		; ( addr-t u-t 0 0 0 0 cib ciblen )
.9aa0	20 5b b0	jsr $b05b			jsr To_Number		; ( addr-t u-t 0 0 ud addr2 u2 )
.9aa3	b5 24		lda $24,x			lda DStack+0,x
.9aa5	15 25		ora $25,x			ora DStack+1,x
.9aa7	d0 25		bne $9ace			bne _have_unconverted_chars
.9aa9	20 4e c5	jsr $c54e			jsr Two_Drop		; ( addr-t u-t 0 0 ud )
.9aac	20 25 c0	jsr $c025			jsr D_To_S		; ( addr-t u-t 0 0 u )
.9aaf	20 8e ce	jsr $ce8e			jsr Not_Rot		; ( addr-t u-t u 0 0 )
.9ab2	e8		inx				inx
.9ab3	e8		inx				inx			; ( addr-t u-t u 0 ) drop through
.9ab4					_line_number_only_from_external:
.9ab4	20 8b cf	jsr $cf8b			jsr Swap		; ( addr-t u-t 0 u )
.9ab7	20 8d 9e	jsr $9e8d			jsr ed_is_valid_line
.9aba	b0 03		bcs $9abf			bcs +
.9abc	4c 60 9e	jmp $9e60			jmp ed_error_2drop
.9abf					+
.9abf	20 8b cf	jsr $cf8b			jsr Swap		; ( addr-t u-t u 0 )
.9ac2	20 ed 9e	jsr $9eed			jsr ed_para1_to_cur
.9ac5	a9 80		lda #$80			lda #%10000000
.9ac7	05 22		ora $22				ora ed_flags
.9ac9	85 22		sta $22				sta ed_flags
.9acb	4c 4b 9d	jmp $9d4b			jmp ed_cmd_p_from_external
.9ace					_have_unconverted_chars:
.9ace	a5 06		lda $06				lda ciblen+0
.9ad0	d5 24		cmp $24,x			cmp DStack+0,x
.9ad2	d0 16		bne $9aea			bne _no_command_yet
.9ad4	a5 07		lda $07				lda ciblen+1
.9ad6	d5 25		cmp $25,x			cmp DStack+1,x
.9ad8	d0 10		bne $9aea			bne _no_command_yet
.9ada	8a		txa				txa
.9adb	18		clc				clc
.9adc	69 08		adc #$08			adc #8
.9ade	aa		tax				tax			; ( addr-t u-t 0 0 )
.9adf	a9 7f		lda #$7f			lda #$ff-%10000000
.9ae1	25 22		and $22				and ed_flags
.9ae3	85 22		sta $22				sta ed_flags
.9ae5	a0 00		ldy #$00			ldy #0
.9ae7	4c 7c 9b	jmp $9b7c			jmp _check_command
.9aea					_no_command_yet:
.9aea	20 f8 ce	jsr $cef8			jsr To_R		; >R ( ... 0 0 ud addr2 ) (R: u2)
.9aed	20 8e ce	jsr $ce8e			jsr Not_Rot		; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.9af0	20 25 c0	jsr $c025			jsr D_To_S		; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.9af3	b5 24		lda $24,x			lda DStack+0,x		; LSB
.9af5	95 2a		sta $2a,x			sta DStack+6,x
.9af7	b5 25		lda $25,x			lda DStack+1,x		; MSB
.9af9	95 2b		sta $2b,x			sta DStack+7,x		; ( ... para1 0 addr2 para1 ) (R: u2)
.9afb	e8		inx				inx
.9afc	e8		inx				inx			; ( addr-t u-t para1 0 addr2 ) (R: u2)
.9afd	20 16 cf	jsr $cf16			jsr R_From		; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.9b00	a9 80		lda #$80			lda #%10000000
.9b02	05 22		ora $22				ora ed_flags
.9b04	85 22		sta $22				sta ed_flags
.9b06					_check_for_para2:
.9b06	a1 26		lda ($26,x)			lda (DStack+2,x)
.9b08	c9 2c		cmp #$2c			cmp #','
.9b0a	f0 0c		beq $9b18			beq _got_comma
.9b0c	38		sec				sec
.9b0d	a5 06		lda $06				lda ciblen
.9b0f	f5 24		sbc $24,x			sbc DStack+0,x
.9b11	a8		tay				tay
.9b12	20 4e c5	jsr $c54e			jsr Two_Drop		; Remove the leftover stuff from >NUMBER
.9b15	4c 7c 9b	jmp $9b7c			jmp _check_command
.9b18					_got_comma:
.9b18	20 7c ca	jsr $ca7c			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr2+1 u2 )
.9b1b	20 4d ca	jsr $ca4d			jsr One_Minus		; ( addr-t u-t para1 0 addr2+1 u2-1 )
.9b1e	a1 26		lda ($26,x)			lda (DStack+2,x)
.9b20	c9 24		cmp #$24			cmp #'$'
.9b22	d0 16		bne $9b3a			bne _para2_not_dollar
.9b24	38		sec				sec
.9b25	a5 06		lda $06				lda ciblen
.9b27	f5 26		sbc $26,x			sbc DStack+2,x
.9b29	a8		tay				tay
.9b2a	c8		iny				iny
.9b2b	98		tya				tya
.9b2c	48		pha				pha
.9b2d	8a		txa				txa
.9b2e	18		clc				clc
.9b2f	69 06		adc #$06			adc #6
.9b31	aa		tax				tax			; ( addr-t u-t para1 )
.9b32	20 ae 9e	jsr $9eae			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9b35	68		pla				pla
.9b36	a8		tay				tay
.9b37	4c 7c 9b	jmp $9b7c			jmp _check_command
.9b3a					_para2_not_dollar:
.9b3a	20 f8 ce	jsr $cef8			jsr To_R		; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.9b3d	20 fe b7	jsr $b7fe			jsr Zero		; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.9b40	20 fe b7	jsr $b7fe			jsr Zero		; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.9b43	20 69 ce	jsr $ce69			jsr Rot		; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.9b46	20 16 cf	jsr $cf16			jsr R_From		; R> ( ... para1 0 0 0 addr2+1 u2-1)
.9b49	20 6e cf	jsr $cf6e			jsr Dup		; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.9b4c	20 f8 ce	jsr $cef8			jsr To_R		; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.9b4f	20 5b b0	jsr $b05b			jsr To_Number	; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.9b52	20 6e cf	jsr $cf6e			jsr Dup		; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.9b55	20 16 cf	jsr $cf16			jsr R_From		; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.9b58	20 56 c8	jsr $c856			jsr Equal		; = ( ... para1 0 ud addr3 u3 f )
.9b5b	b5 24		lda $24,x			lda DStack+0,x
.9b5d	15 25		ora $25,x			ora DStack+1,x
.9b5f	f0 08		beq $9b69			beq _second_number
.9b61	8a		txa				txa
.9b62	18		clc				clc
.9b63	69 0c		adc #$0c			adc #12
.9b65	aa		tax				tax			; back to ( addr-t u-t )
.9b66	4c 64 9e	jmp $9e64			jmp ed_error
.9b69					_second_number:
.9b69	e8		inx				inx
.9b6a	e8		inx				inx			; ( addr-t u-t para1 0 ud addr3 u3 )
.9b6b	38		sec				sec
.9b6c	a5 06		lda $06				lda ciblen
.9b6e	f5 24		sbc $24,x			sbc DStack+0,x
.9b70	48		pha				pha
.9b71	20 4e c5	jsr $c54e			jsr Two_drop		; 2DROP ( addr-t u-t para1 0 ud )
.9b74	20 25 c0	jsr $c025			jsr D_To_S		; D>S  ( addr-t u-t para1 0 para2 )
.9b77	20 a8 c9	jsr $c9a8			jsr Nip			; NIP ( addr-t u-t para1 para2 )
.9b7a	68		pla				pla
.9b7b	a8		tay				tay
.9b7c					_check_command:
.9b7c	24 22		bit $22				bit ed_flags
.9b7e	30 08		bmi $9b88			bmi _check_command_have_arg
.9b80	a5 20		lda $20				lda ed_cur+0
.9b82	95 26		sta $26,x			sta DStack+2,x
.9b84	a5 21		lda $21				lda ed_cur+1
.9b86	95 27		sta $27,x			sta DStack+3,x
.9b88					_check_command_have_arg:
.9b88	b1 04		lda ($04),y			lda (cib),y		; get mystery char from input
.9b8a	85 14		sta $14				sta tmp1+0
.9b8c	85 15		sta $15				sta tmp1+1		; We need X for awhile, so it has to
.9b8e	a2 ff		ldx #$ff			ldx #$ff		; for each char
.9b90	e8		inx		_cmd_loop:	inx			;   next char
.9b91	bd 11 9f	lda $9f11,x			lda ed_cmd_list,x
.9b94	f0 13		beq $9ba9			beq _illegal_command	;   end of list?
.9b96	c5 14		cmp $14				cmp tmp1+0
.9b98	d0 f6		bne $9b90			bne _cmd_loop		;   not found?
.9b9a	8a		txa				txa
.9b9b	0a		asl a				asl
.9b9c	aa		tax				tax			; X * 2 for table
.9b9d	bd 1d 9f	lda $9f1d,x			lda ed_cmd_table+1,x
.9ba0	48		pha				pha
.9ba1	bd 1c 9f	lda $9f1c,x			lda ed_Cmd_table+0,x
.9ba4	48		pha				pha
.9ba5	a6 15		ldx $15				ldx tmp1+1		; restore X
.9ba7	08		php				php
.9ba8	40		rti				rti			; jump to command routine
.9ba9					_illegal_command:
.9ba9	4c 60 9e	jmp $9e60			jmp ed_error_2drop
.9bac					ed_next_command:
.9bac	20 4e c5	jsr $c54e			jsr Two_Drop		; ( addr-t u-t ) Fall through
.9baf					_next_command_empty:
.9baf	4c ca 99	jmp $99ca			jmp ed_input_loop
.9bb2					ed_all_done:
.9bb2	a9 00		lda #$00			lda #0
.9bb4	85 06		sta $06				sta ciblen
.9bb6	85 07		sta $07				sta ciblen+1
.9bb8	20 4e c5	jsr $c54e			jsr Two_drop			; ( addr-t u-t )
.9bbb	a5 23		lda $23				lda editor3+1
.9bbd	8d 00 03	sta $0300			sta base
.9bc0	60		rts				rts
.9bc1					ed_cmd_a:
.9bc1	e8		inx				inx
.9bc2	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9bc3					ed_entry_cmd_i:
.9bc3					ed_cmd_a_have_para:
.9bc3	20 d2 9e	jsr $9ed2			jsr ed_num_to_addr	  ;  ( addr-t u-t addr1 )
.9bc6	20 7c ab	jsr $ab7c			jsr CR
.9bc9					_next_string_loop:
.9bc9	20 72 9e	jsr $9e72			jsr ed_get_input
.9bcc	a0 00		ldy #$00			ldy #0
.9bce	b1 04		lda ($04),y			lda (cib),y
.9bd0	c9 2e		cmp #$2e			cmp #'.'
.9bd2	d0 18		bne $9bec			bne _add_line
.9bd4	a4 06		ldy $06				ldy ciblen
.9bd6	c0 01		cpy #$01			cpy #1
.9bd8	d0 12		bne $9bec			bne _add_line
.9bda	a4 07		ldy $07				ldy ciblen+1
.9bdc	d0 0e		bne $9bec			bne _add_line
.9bde	e8		inx				inx
.9bdf	e8		inx				inx
.9be0	a9 40		lda #$40			lda #%01000000
.9be2	05 22		ora $22				ora ed_flags
.9be4	85 22		sta $22				sta ed_flags
.9be6	20 7c ab	jsr $ab7c			jsr CR
.9be9	4c ca 99	jmp $99ca			jmp ed_input_loop
.9bec					_add_line:
.9bec	20 6e cf	jsr $cf6e			jsr Dup			; ( addr-t u-t addr1 addr1 )
.9bef	20 40 ca	jsr $ca40			jsr Here		; ( addr-t u-t addr1 addr1 here )
.9bf2	20 8b cf	jsr $cf8b			jsr Swap		; ( addr-t u-t addr1 here addr1 )
.9bf5	20 b0 ce	jsr $ceb0			jsr Fetch		; ( addr-t u-t addr1 here addr2 )
.9bf8	20 13 cd	jsr $cd13			jsr Comma		; ( addr-t u-t addr1 here )
.9bfb	20 dc cc	jsr $ccdc			jsr Tuck		; TUCK ( addr-t u-t here addr1 here )
.9bfe	20 8b cf	jsr $cf8b			jsr Swap		; ( addr-t u-t here here addr1 )
.9c01	20 c9 ce	jsr $cec9			jsr Store		; ( addr-t u-t here )
.9c04	20 40 ca	jsr $ca40			jsr Here		; HERE ( addr-t u-t here here2)
.9c07	a9 04		lda #$04			lda #4
.9c09	20 f0 b7	jsr $b7f0			jsr PushZA
.9c0c	20 ba c0	jsr $c0ba			jsr Allot
.9c0f	e6 20		inc $20				inc ed_cur
.9c11	d0 02		bne $9c15			bne +
.9c13	e6 21		inc $21				inc ed_cur+1
.9c15					+
.9c15	20 40 ca	jsr $ca40			jsr Here	; ( addr-t u-t here here2 here3 )
.9c18	a5 04		lda $04				lda cib+0
.9c1a	a4 05		ldy $05				ldy cib+1
.9c1c	20 c1 b7	jsr $b7c1			jsr PushYA	; ( addr-t u-t here here2 here3 cib )
.9c1f	20 47 cf	jsr $cf47			jsr Over	; ( addr-t u-t here here2 here3 cib here3 )
.9c22	a5 06		lda $06				lda ciblen+0
.9c24	a4 07		ldy $07				ldy ciblen+1
.9c26	20 c1 b7	jsr $b7c1			jsr PushYA	; ( addr-t u-t here here2 here3 cib here3 ciblen )
.9c29	20 8b ad	jsr $ad8b			jsr Move	; ( addr-t u-t here here2 here3 )
.9c2c	18		clc				clc
.9c2d	a5 00		lda $00				lda cp
.9c2f	65 06		adc $06				adc ciblen
.9c31	85 00		sta $00				sta cp
.9c33	90 06		bcc $9c3b			bcc +
.9c35	a5 01		lda $01				lda cp+1
.9c37	65 07		adc $07				adc ciblen+1
.9c39	85 01		sta $01				sta cp+1
.9c3b					+
.9c3b	20 47 cf	jsr $cf47			jsr Over		; ( addr-t u-t here here2 here3 here2 )
.9c3e	20 c9 ce	jsr $cec9			jsr Store		; ( addr-t u-t here here2 )
.9c41	20 22 ca	jsr $ca22			jsr Cell_Plus_NoUf	; ( addr-t u-t here here2+2 )
.9c44	20 6e cf	jsr $cf6e			jsr Dup			; ( addr-t u-t here here2+2 here2+2 )
.9c47	a5 06		lda $06				lda ciblen
.9c49	95 26		sta $26,x			sta DStack+2,x
.9c4b	a5 07		lda $07				lda ciblen+1
.9c4d	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t here ciblen here2+2 )
.9c4f	20 c9 ce	jsr $cec9			jsr Store		; ( addr-t u-t here )
.9c52	20 7c ab	jsr $ab7c			jsr CR			; Add a line feed for visuals
.9c55	4c c9 9b	jmp $9bc9			jmp _next_string_loop
.9c58					ed_cmd_d:
.9c58	20 81 9e	jsr $9e81			jsr ed_have_text
.9c5b	20 c4 9e	jsr $9ec4			jsr ed_no_line_zero
.9c5e	b5 24		lda $24,x			lda DStack+0,x
.9c60	15 25		ora $25,x			ora DStack+1,x
.9c62	d0 09		bne $9c6d			bne +
.9c64	20 47 cf	jsr $cf47			jsr Over		; ( addr-t u-t para1 0 para1 )
.9c67	20 a2 9c	jsr $9ca2			jsr _cmd_d_common	; ( addr-t u-t para1 0 )
.9c6a	4c 96 9c	jmp $9c96			jmp _cmd_d_done
.9c6d					+
.9c6d	20 8d 9e	jsr $9e8d			jsr ed_is_valid_line	  ; result is in C flag
.9c70	b0 03		bcs $9c75			bcs _cmd_d_loop
.9c72	4c 60 9e	jmp $9e60			jmp ed_error_2drop
.9c75					_cmd_d_loop:
.9c75	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9c77	d5 26		cmp $26,x			cmp DStack+2,x
.9c79	b5 25		lda $25,x			lda DStack+1,x
.9c7b	f5 27		sbc $27,x			sbc DStack+3,x
.9c7d	90 0c		bcc $9c8b			bcc _cmd_d_done_with_flag
.9c7f	20 6e cf	jsr $cf6e			jsr Dup		; DUP ( addr-t u-t para1 para2 para2 )
.9c82	20 a2 9c	jsr $9ca2			jsr _cmd_d_common	; ( addr-t u-t para1 para2 )
.9c85	20 4d ca	jsr $ca4d			jsr One_minus	; 1- ( addr-t u-t para1 para2-1 )
.9c88	4c 75 9c	jmp $9c75			jmp _cmd_d_loop
.9c8b					_cmd_d_done_with_flag:
.9c8b	20 59 ca	jsr $ca59			jsr NOS_One_Minus
.9c8e	b5 26		lda $26,x			lda DStack+2,x
.9c90	85 20		sta $20				sta ed_cur
.9c92	b5 27		lda $27,x			lda DStack+3,x
.9c94	85 21		sta $21				sta ed_cur+1		; drop through to _cmd_d_done
.9c96					_cmd_d_done:
.9c96	a9 40		lda #$40			lda #%01000000
.9c98	05 22		ora $22				ora ed_flags
.9c9a	85 22		sta $22				sta ed_flags
.9c9c	20 7c ab	jsr $ab7c			jsr CR
.9c9f	4c ac 9b	jmp $9bac			jmp ed_next_command
.9ca2					_cmd_d_common:
.9ca2	20 6e cf	jsr $cf6e			jsr Dup			; ( addr-t u-t u u )
.9ca5	20 d2 9e	jsr $9ed2			jsr ed_num_to_addr	; ( addr-t u-t u addr )
.9ca8	20 b0 ce	jsr $ceb0			jsr Fetch		; ( addr-t u-t u addr1 )
.9cab	20 8b cf	jsr $cf8b			jsr Swap		; ( addr-t u-t addr1 u )
.9cae	20 4d ca	jsr $ca4d			jsr One_minus		; ( addr-t u-t addr1 u-1 )
.9cb1	20 d2 9e	jsr $9ed2			jsr ed_num_to_addr	; ( addr-t u-t addr1 addr-1 )
.9cb4	4c c9 ce	jmp $cec9			jmp Store		; ( addr-t u-t )
.9cb7					ed_cmd_equ:
.9cb7	a5 1e		lda $1e				lda ed_head
.9cb9	05 1f		ora $1f				ora ed_head+1
.9cbb	d0 06		bne $9cc3			bne _cmd_equ_have_text
.9cbd	20 fe b7	jsr $b7fe			jsr Zero		; ( addr-t u-t para1 para2 0 )
.9cc0	4c e3 9c	jmp $9ce3			jmp _cmd_equ_done
.9cc3					_cmd_equ_have_text:
.9cc3	20 c4 9e	jsr $9ec4			jsr ed_no_line_zero
.9cc6	24 22		bit $22				bit ed_flags
.9cc8	30 0a		bmi $9cd4			bmi _cmd_equ_have_para
.9cca	a5 20		lda $20				lda ed_cur+0		; ( addr-t u-t para1 para2 ? )
.9ccc	a4 21		ldy $21				ldy ed_cur+1
.9cce	20 c1 b7	jsr $b7c1			jsr PushYA
.9cd1	4c e3 9c	jmp $9ce3			jmp _cmd_equ_done	; ( addr-t u-t para1 para2 cur )
.9cd4					_cmd_equ_have_para:
.9cd4	b5 24		lda $24,x			lda DStack+0,x
.9cd6	15 25		ora $25,x			ora DStack+1,x
.9cd8	d0 06		bne $9ce0			bne _cmd_equ_two_paras
.9cda	20 47 cf	jsr $cf47			jsr Over		; ( addr-t u-t para1 para2 para1)
.9cdd	4c e3 9c	jmp $9ce3			jmp _cmd_equ_done
.9ce0					_cmd_equ_two_paras:
.9ce0	20 6e cf	jsr $cf6e			jsr Dup			; ( addr-t u-t para1 para2 para2) drop through
.9ce3					_cmd_equ_done:
.9ce3	20 7c ab	jsr $ab7c			jsr CR			; number goes on new line
.9ce6	20 18 cc	jsr $cc18			jsr U_Dot		; ( addr-t u-t para1 para2 )
.9ce9	20 7c ab	jsr $ab7c			jsr CR
.9cec	4c ac 9b	jmp $9bac			jmp ed_next_command
.9cef					ed_cmd_f:
.9cef	24 22		bit $22				bit ed_flags
.9cf1	30 18		bmi $9d0b			bmi _cmd_f_have_para
.9cf3	20 7c ab	jsr $ab7c			jsr CR
.9cf6	20 f8 ce	jsr $cef8			jsr To_R		; ( addr-t u-t 0 ) ( R: 0 )
.9cf9	20 69 ce	jsr $ce69			jsr Rot			; ( u-t 0 addr-t ) ( R: 0 )
.9cfc	20 6e cf	jsr $cf6e			jsr Dup			; ( u-t 0 addr-t addr-t ) ( R: 0 )
.9cff	20 18 cc	jsr $cc18			jsr U_Dot		; ( u-t 0 addr-t ) ( R: 0 )
.9d02	20 8e ce	jsr $ce8e			jsr Not_Rot		; ( addr-t u-t 0 ) ( R: 0 )
.9d05	20 16 cf	jsr $cf16			jsr R_From		; ( addr-t u-t 0 0 )
.9d08	4c 1c 9d	jmp $9d1c			jmp _cmd_f_done
.9d0b					_cmd_f_have_para:
.9d0b	20 47 cf	jsr $cf47			jsr Over
.9d0e	20 7c ab	jsr $ab7c			jsr CR
.9d11	20 18 cc	jsr $cc18			jsr U_Dot
.9d14	b5 26		lda $26,x			lda DStack+2,x
.9d16	95 2a		sta $2a,x			sta DStack+6,x
.9d18	b5 27		lda $27,x			lda DStack+3,x
.9d1a	95 2b		sta $2b,x			sta DStack+7,x		; fall through to _cmd_f_done
.9d1c					_cmd_f_done:
.9d1c	20 7c ab	jsr $ab7c			jsr CR
.9d1f	4c ac 9b	jmp $9bac			jmp ed_next_command
.9d22					ed_cmd_i:
.9d22	e8		inx				inx
.9d23	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9d24	24 22		bit $22				bit ed_flags
.9d26	30 08		bmi $9d30			bmi _cmd_i_have_para
.9d28	a5 20		lda $20				lda ed_cur
.9d2a	95 24		sta $24,x			sta DStack+0,x
.9d2c	a5 21		lda $21				lda ed_cur+1
.9d2e	95 25		sta $25,x			sta DStack+1,x		;  ( addr-t u-t cur ) drop through
.9d30					_cmd_i_have_para:
.9d30	b5 24		lda $24,x			lda DStack+0,x
.9d32	15 25		ora $25,x			ora DStack+1,x
.9d34	f0 09		beq $9d3f			beq _cmd_i_done
.9d36	20 4d ca	jsr $ca4d			jsr One_minus		; ( addr-t u-t para1-1 )
.9d39	20 fe b7	jsr $b7fe			jsr Zero		; ( addr-t u-t para1-1 0 )
.9d3c	20 8e c9	jsr $c98e			jsr Max			; ( addr-t u-t para1-1 | 0 )
.9d3f					_cmd_i_done:
.9d3f	4c c3 9b	jmp $9bc3			jmp ed_entry_cmd_i
.9d42					ed_cmd_n:
.9d42	a9 01		lda #$01			lda #%00000001
.9d44	05 22		ora $22				ora ed_flags
.9d46	85 22		sta $22				sta ed_flags
.9d48	4c 51 9d	jmp $9d51			jmp ed_cmd_p_entry_for_cmd_n
.9d4b					ed_cmd_p:
.9d4b					ed_cmd_p_from_external:
.9d4b	a9 fe		lda #$fe			lda #$ff-%00000001
.9d4d	25 22		and $22				and ed_flags
.9d4f	85 22		sta $22				sta ed_flags
.9d51					ed_cmd_p_entry_for_cmd_n:
.9d51	20 81 9e	jsr $9e81			jsr ed_have_text
.9d54	20 c4 9e	jsr $9ec4			jsr ed_no_line_zero
.9d57	20 7c ab	jsr $ab7c			jsr CR
.9d5a	b5 24		lda $24,x			lda DStack+0,x
.9d5c	15 25		ora $25,x			ora DStack+1,x
.9d5e	d0 11		bne $9d71			bne _cmd_p_loop
.9d60	b5 26		lda $26,x			lda DStack+2,x
.9d62	85 20		sta $20				sta ed_cur
.9d64	b5 27		lda $27,x			lda DStack+3,x
.9d66	85 21		sta $21				sta ed_cur+1
.9d68	20 47 cf	jsr $cf47			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9d6b	20 92 9d	jsr $9d92			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9d6e	4c 8f 9d	jmp $9d8f			jmp _cmd_p_all_done
.9d71					_cmd_p_loop:
.9d71	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9d73	d5 26		cmp $26,x			cmp DStack+2,x
.9d75	b5 25		lda $25,x			lda DStack+1,x
.9d77	f5 27		sbc $27,x			sbc DStack+3,x
.9d79	90 0c		bcc $9d87			bcc _cmd_p_done
.9d7b	20 47 cf	jsr $cf47			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9d7e	20 92 9d	jsr $9d92			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9d81	20 7c ca	jsr $ca7c			jsr NOS_One_Plus
.9d84	4c 71 9d	jmp $9d71			jmp _cmd_p_loop
.9d87					_cmd_p_done:
.9d87	b5 24		lda $24,x			lda DStack+0,x
.9d89	85 20		sta $20				sta ed_cur
.9d8b	b5 25		lda $25,x			lda DStack+1,x
.9d8d	85 21		sta $21				sta ed_cur+1
.9d8f					_cmd_p_all_done:
.9d8f	4c ac 9b	jmp $9bac			jmp ed_next_command
.9d92					_cmd_p_common:
.9d92	a5 22		lda $22				lda ed_flags
.9d94	4a		lsr a				lsr			; bit 0 now in carry
.9d95	90 0b		bcc $9da2			bcc _cmd_p_common_no_num
.9d97	20 6e cf	jsr $cf6e			jsr Dup			; ( addr-t u-t para1 para1 )
.9d9a	20 18 cc	jsr $cc18			jsr U_Dot		; ( addr-t u-t para1 )
.9d9d	a9 09		lda #$09			lda #AscHT
.9d9f	20 d8 cd	jsr $cdd8			jsr Emit_A
.9da2					_cmd_p_common_no_num:
.9da2	20 d2 9e	jsr $9ed2			jsr ed_num_to_addr	  ; ( addr-t u-t addr )
.9da5	4c f6 9e	jmp $9ef6			jmp ed_print_addr
.9da8					ed_cmd_q:
.9da8	24 22		bit $22				bit ed_flags		; bit 6 is change flag
.9daa	50 03		bvc $9daf			bvc +
.9dac	4c 60 9e	jmp $9e60			jmp ed_error_2drop
.9daf					+
.9daf	4c b2 9b	jmp $9bb2			jmp ed_all_done		   ; can't fall thru because of PLX
.9db2					ed_cmd_qq:
.9db2	4c b2 9b	jmp $9bb2			jmp ed_all_done
.9db5					ed_cmd_w:
.9db5	20 81 9e	jsr $9e81			jsr ed_have_text
.9db8	24 22		bit $22				bit ed_flags		; parameter given?
.9dba	30 12		bmi $9dce			bmi _cmd_w_have_para
.9dbc	b5 2b		lda $2b,x			lda DStack+7,x		; $0000 thru $00ff ?
.9dbe	d0 03		bne $9dc3			bne +
.9dc0	4c 60 9e	jmp $9e60			jmp ed_error_2drop
.9dc3					+
.9dc3	b5 2a		lda $2a,x			lda DStack+6,x
.9dc5	95 26		sta $26,x			sta DStack+2,x
.9dc7	b5 2b		lda $2b,x			lda DStack+7,x
.9dc9	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t addr-t ? )
.9dcb	4c d6 9d	jmp $9dd6			jmp _cmd_w_para_ready
.9dce					_cmd_w_have_para:
.9dce	b5 26		lda $26,x			lda DStack+2,x
.9dd0	95 2a		sta $2a,x			sta DStack+6,x
.9dd2	b5 27		lda $27,x			lda DStack+3,x
.9dd4	95 2b		sta $2b,x			sta DStack+7,x		; drop through to _cmd_w_para_ready
.9dd6					_cmd_w_para_ready:
.9dd6	a9 1e		lda #$1e			lda #<ed_head
.9dd8	95 24		sta $24,x			sta DStack+0,x
.9dda	a9 00		lda #$00			lda #>ed_head
.9ddc	95 25		sta $25,x			sta DStack+1,x		; ( addr-t u-t addr-t addr-h )
.9dde	20 47 cf	jsr $cf47			jsr Over		; ( addr-t u-t addr-t addr-h addr-t )
.9de1	20 f8 ce	jsr $cef8			jsr To_R		; ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.9de4					_cmd_w_loop:
.9de4	20 b0 ce	jsr $ceb0			jsr Fetch		; ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.9de7	b5 24		lda $24,x			lda DStack+0,x
.9de9	15 25		ora $25,x			ora DStack+1,x
.9deb	f0 4d		beq $9e3a			beq _cmd_w_eol
.9ded	20 bc cc	jsr $ccbc			jsr Two_dup		; ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.9df0	20 7e c6	jsr $c67e			jsr Two_to_r		; ( addr-t addr-1 ) (R: ... )
.9df3	20 22 ca	jsr $ca22			jsr Cell_Plus_NoUf	; ( addr-t addr1+2 ) (R: ... )
.9df6	20 6e cf	jsr $cf6e			jsr Dup			; ( addr-t addr1+2 addr1+2 ) ( R: ... )
.9df9	20 b0 ce	jsr $ceb0			jsr Fetch		; ( addr-t addr1+2 addr-s ) ( R: ... )
.9dfc	20 8b cf	jsr $cf8b			jsr Swap		; ( addr-t addr-s addr1+2 ) ( R: ... )
.9dff	20 22 ca	jsr $ca22			jsr Cell_Plus_NoUf	; ( addr-t addr-s addr1+2 ) (R: ... )
.9e02	20 b0 ce	jsr $ceb0			jsr Fetch		; ( addr-t addr-s u-s ) ( R: ... )
.9e05	20 8e ce	jsr $ce8e			jsr Not_Rot		; ( u-s addr-t addr-s ) ( R: ... )
.9e08	20 8b cf	jsr $cf8b			jsr Swap		; ( u-s addr-s addr-t ) ( R: ... )
.9e0b	20 69 ce	jsr $ce69			jsr Rot			; (addr-s addr-t u-s ) ( R: ... )
.9e0e	20 6e cf	jsr $cf6e			jsr Dup			; (addr-s addr-t u-s u-s ) ( R: ... )
.9e11	20 f8 ce	jsr $cef8			jsr To_R		; (addr-s addr-t u-s ) ( R: ... u-s )
.9e14	20 8b ad	jsr $ad8b			jsr Move		; ( )( R: addr-t addr-1 addr-t )
.9e17	20 16 cf	jsr $cf16			jsr R_From		; ( u-s )  ( R: addr-t addr-h addr-t )
.9e1a	20 5a c6	jsr $c65a			jsr Two_r_from		; ( u-s addr-t addr-h ) ( R: addr-t )
.9e1d	20 8e ce	jsr $ce8e			jsr Not_Rot		; ( addr-h u-s addr-t ) ( R: addr-t )
.9e20	20 b7 cb	jsr $cbb7			jsr Plus		; ( addr-h addr-t1 ) ( R: addr-t )
.9e23	20 6e cf	jsr $cf6e			jsr Dup			; ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.9e26	a9 0a		lda #$0a			lda #AscLF
.9e28	20 f0 b7	jsr $b7f0			jsr PushZA		; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.9e2b	20 8b cf	jsr $cf8b			jsr Swap		; ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.9e2e	20 c9 ce	jsr $cec9			jsr Store		; ( addr-h addr-t1 ) ( R: addr-t )
.9e31	20 72 ca	jsr $ca72			jsr One_plus		; ( addr-h addr-t1+1 ) ( R: addr-t )
.9e34	20 8b cf	jsr $cf8b			jsr Swap		; ( addr-t1+1 addr-h ) ( R: addr-t )
.9e37	4c e4 9d	jmp $9de4			jmp _cmd_w_loop
.9e3a					_cmd_w_eol:
.9e3a	20 8b cf	jsr $cf8b			jsr Swap		; ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.9e3d	20 16 cf	jsr $cf16			jsr R_From		; ( addr-t u-t addr-n addr-tn addr-t )
.9e40	20 cf cb	jsr $cbcf			jsr Minus		; ( addr-t u-t addr-n u )
.9e43	b5 24		lda $24,x			lda DStack+0,x
.9e45	95 28		sta $28,x			sta DStack+4,x
.9e47	b5 25		lda $25,x			lda DStack+1,x
.9e49	95 29		sta $29,x			sta DStack+5,x		; ( addr-t u addr-n u )
.9e4b	20 7c ab	jsr $ab7c			jsr CR
.9e4e	20 6e cf	jsr $cf6e			jsr Dup			; ( addr-t u addr-n u u )
.9e51	20 18 cc	jsr $cc18			jsr U_Dot		; ( addr-t u addr-n u )
.9e54	20 7c ab	jsr $ab7c			jsr CR
.9e57	a9 bf		lda #$bf			lda #$ff-%01000000
.9e59	25 22		and $22				and ed_flags
.9e5b	85 22		sta $22				sta ed_flags
.9e5d	4c ac 9b	jmp $9bac			jmp ed_next_command
.9e60					ed_error_2drop:
.9e60	e8		inx				inx			; Drop para2
.9e61	e8		inx				inx
.9e62					ed_error_1drop:
.9e62	e8		inx				inx			; Drop para1
.9e63	e8		inx				inx
.9e64					ed_error:
.9e64	20 7c ab	jsr $ab7c			jsr CR
.9e67	a9 3f		lda #$3f			lda #'?'
.9e69	20 d8 cd	jsr $cdd8			jsr Emit_A
.9e6c	20 7c ab	jsr $ab7c			jsr CR
.9e6f	4c ca 99	jmp $99ca			jmp ed_input_loop
.9e72					ed_get_input:
.9e72	20 7e c2	jsr $c27e			jsr Refill		;  ( addr-t u-t f )
.9e75	b5 24		lda $24,x			lda DStack+0,x
.9e77	d0 05		bne $9e7e			bne +
.9e79	68		pla				pla
.9e7a	68		pla				pla
.9e7b	4c 62 9e	jmp $9e62			jmp ed_error_1drop
.9e7e					+
.9e7e	e8		inx				inx
.9e7f	e8		inx				inx
.9e80	60		rts				rts
.9e81					ed_have_text:
.9e81	a5 1e		lda $1e				lda ed_head
.9e83	05 1f		ora $1f				ora ed_head+1
.9e85	d0 05		bne $9e8c			bne +
.9e87	68		pla				pla
.9e88	68		pla				pla
.9e89	4c 64 9e	jmp $9e64			jmp ed_error
.9e8c					+
.9e8c	60		rts				rts
.9e8d					ed_is_valid_line:
.9e8d	38		sec				sec				; default is legal line number
.9e8e	b5 24		lda $24,x			lda DStack+0,x
.9e90	15 25		ora $25,x			ora DStack+1,x
.9e92	f0 18		beq $9eac			beq _nope_zero	; ( n )
.9e94	20 6e cf	jsr $cf6e			jsr Dup				; ( n n )
.9e97	20 ae 9e	jsr $9eae			jsr ed_last_line		; ( n n last )
.9e9a	20 8b cf	jsr $cf8b			jsr Swap			; ( n last n )
.9e9d	20 8a c8	jsr $c88a			jsr Less_Than			; ( n f )
.9ea0	b5 24		lda $24,x			lda DStack+0,x			; 0 flag is good
.9ea2	15 25		ora $25,x			ora DStack+1,x
.9ea4	d0 04		bne $9eaa			bne _too_small
.9ea6	e8		inx				inx
.9ea7	e8		inx				inx			; DROP flag ( n )
.9ea8	38		sec				sec			; signal valid
.9ea9	60		rts				rts
.9eaa					_too_small:
.9eaa	e8		inx				inx
.9eab	e8		inx				inx
.9eac					_nope_zero:
.9eac	18		clc				clc			; signal not valid
.9ead	60		rts				rts
.9eae					ed_last_line:
.9eae	20 fe b7	jsr $b7fe			jsr Zero		; Set counter to zero
.9eb1	a9 1e		lda #$1e			lda #ed_head
.9eb3	20 f0 b7	jsr $b7f0			jsr PushZA		; ( count addr )
.9eb6					_loop:
.9eb6	20 b0 ce	jsr $ceb0			jsr Fetch		; ( count addr|0 )
.9eb9	b5 25		lda $25,x			lda DStack+1,x		; at end-of-list?
.9ebb	f0 06		beq $9ec3			beq _done
.9ebd	20 7c ca	jsr $ca7c			jsr NOS_One_Plus	; Increase counter
.9ec0	4c b6 9e	jmp $9eb6			jmp _loop		; continue
.9ec3					_done:
.9ec3	60		rts				rts
.9ec4					ed_no_line_zero:
.9ec4	b5 26		lda $26,x			lda DStack+2,x
.9ec6	15 27		ora $27,x			ora DStack+3,x
.9ec8	d0 07		bne $9ed1			bne _done
.9eca	24 22		bit $22				bit ed_flags
.9ecc	10 03		bpl $9ed1			bpl _done
.9ece	4c 60 9e	jmp $9e60			jmp ed_error_2drop
.9ed1					_done:
.9ed1	60		rts				rts
.9ed2					ed_num_to_addr:
.9ed2	a9 1e		lda #$1e			lda #ed_head
.9ed4	20 f0 b7	jsr $b7f0			jsr PushZA		; ( u addr-h )
.9ed7	4c e4 9e	jmp $9ee4			jmp _test
.9eda					_loop:
.9eda	20 b0 ce	jsr $ceb0			jsr Fetch		; @ ( u addr1 )
.9edd	b5 25		lda $25,x			lda DStack+1,x		; at end of list?
.9edf	f0 09		beq $9eea			beq _finished
.9ee1	20 59 ca	jsr $ca59			jsr NOS_One_Minus	; decrement the line count
.9ee4	b5 26		lda $26,x	_test:		lda DStack+2,x		; is the nth element we're looking for?
.9ee6	15 27		ora $27,x			ora DStack+3,x
.9ee8	d0 f0		bne $9eda			bne _loop
.9eea					_finished:
.9eea	4c a8 c9	jmp $c9a8			jmp Nip			; ( addr )
.9eed					ed_para1_to_cur:
.9eed	b5 26		lda $26,x			lda DStack+2,x
.9eef	85 20		sta $20				sta ed_cur
.9ef1	b5 27		lda $27,x			lda DStack+3,x
.9ef3	85 21		sta $21				sta ed_cur+1
.9ef5	60		rts				rts
.9ef6					ed_print_addr:
.9ef6	20 1f ca	jsr $ca1f			jsr Cell_Plus		; ( addr+2 )
.9ef9	20 6e cf	jsr $cf6e			jsr Dup			; ( addr+2 addr+2 )
.9efc	20 1f ca	jsr $ca1f			jsr Cell_Plus		; ( addr+2 addr+4 )
.9eff	20 b0 ce	jsr $ceb0			jsr Fetch		; ( addr+2 u-s )
.9f02	20 8b cf	jsr $cf8b			jsr Swap		; ( u-s addr+2 )
.9f05	20 b0 ce	jsr $ceb0			jsr Fetch		; ( u-s addr-s )
.9f08	20 8b cf	jsr $cf8b			jsr Swap		; ( addr-s u-s )
.9f0b	20 f0 cd	jsr $cdf0			jsr Type
.9f0e	4c 7c ab	jmp $ab7c			jmp CR
>9f11	61 66 69 64 70 6e 3d 77		ed_cmd_list:	.text "afidpn=wqQ", 0
>9f19	71 51 00
.9f1c					ed_cmd_table:
>9f1c	c1 9b ef 9c 22 9d 58 9c				.word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>9f24	4b 9d 42 9d
>9f28	b7 9c b5 9d a8 9d b2 9d				.word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.9f30					ed6502_end:
>9f30	53 65 65			Name0:	.text "See"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=40627					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9f33	a3					.byte (("See"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=1421					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>9f34	11					.byte WordFlags	;wh_Flags
>9f35	03					.byte 3	;wh_CodeLength
>9f36	26 99					  .word WordListLink
=$9f38					XtPtr1 ::= *
=40627					WordListLink ::= Nt0 ; remember the nt of this word for later
.9f38					See:
.9f38	20 4a bc	jsr $bc4a			jsr Tick_Nt		; ( nt )
.9f3b	20 7c ab	jsr $ab7c			jsr CR
.9f3e	ad 00 03	lda $0300			lda base		; Save the current number base
.9f41	48		pha				pha
.9f42	a9 43		lda #$43			lda #<str_see_nt	; print nt
.9f44	a0 da		ldy #$da			ldy #>str_see_nt
.9f46	20 0b ce	jsr $ce0b			jsr Print_ASCIIZ_YA_no_lf
.9f49	20 6e cf	jsr $cf6e			jsr Dup			; ( nt nt )
.9f4c	20 1c a9	jsr $a91c			jsr Dot_Hex
.9f4f	20 e4 cd	jsr $cde4			jsr Space		; ( nt )
.9f52	20 6e cf	jsr $cf6e			jsr Dup			; ( nt nt )
.9f55	20 b5 bd	jsr $bdb5			jsr Name_To_Int		; ( nt xt )
.9f58	a9 49		lda #$49			lda #<str_see_xt	; print xt
.9f5a	a0 da		ldy #$da			ldy #>str_see_xt
.9f5c	20 0b ce	jsr $ce0b			jsr Print_ASCIIZ_YA_no_lf
.9f5f	20 6e cf	jsr $cf6e			jsr Dup			; ( nt xt xt )
.9f62	20 1c a9	jsr $a91c			jsr Dot_Hex
.9f65	20 7c ab	jsr $ab7c			jsr CR			; ( nt xt )
.9f68	a9 3c		lda #$3c			lda #<str_see_flags
.9f6a	a0 da		ldy #$da			ldy #>str_see_flags
.9f6c	20 0b ce	jsr $ce0b			jsr Print_ASCIIZ_YA_no_lf
.9f6f	20 47 cf	jsr $cf47			jsr Over		; ( nt xt nt )
.9f72	a9 81		lda #$81			lda #Wh_Flags
.9f74	20 24 ca	jsr $ca24			jsr Plus_A		; ( nt xt ^flags )
.9f77	a1 24		lda ($24,x)			lda (DStack+0,x)	; ( nt xt ^flags )
.9f79	95 24		sta $24,x			sta DStack+0,x		; ( nt xt flags )
.9f7b	a0 0e		ldy #$0e			ldy #2*7		; for bit 7..0
.9f7d	20 e4 cd	jsr $cde4	_flag_loop:	jsr Space
.9f80	b9 e4 9f	lda $9fe4,y			lda _FlagLabels+0,y	;   print label
.9f83	20 d8 cd	jsr $cdd8			jsr Emit_A
.9f86	b9 e5 9f	lda $9fe5,y			lda _FlagLabels+1,y
.9f89	20 d8 cd	jsr $cdd8			jsr Emit_A
.9f8c	a9 3d		lda #$3d			lda #'='
.9f8e	20 d8 cd	jsr $cdd8			jsr Emit_A
.9f91	16 24		asl $24,x			asl DStack+0,x		;   c = flag, rotate the rest
.9f93	a9 00		lda #$00			lda #0
.9f95	69 30		adc #$30			adc #'0'
.9f97	20 d8 cd	jsr $cdd8			jsr Emit_A
.9f9a	88		dey				dey
.9f9b	88		dey				dey
.9f9c	10 df		bpl $9f7d			bpl _flag_loop
.9f9e	e8		inx				inx
.9f9f	e8		inx				inx			; ( nt xt )
.9fa0	20 7c ab	jsr $ab7c			jsr CR
.9fa3	a9 4f		lda #$4f			lda #<str_see_size	; print size
.9fa5	a0 da		ldy #$da			ldy #>str_see_size
.9fa7	20 0b ce	jsr $ce0b			jsr Print_ASCIIZ_YA_no_lf
.9faa	20 8b cf	jsr $cf8b			jsr Swap		; ( xt nt )
.9fad	20 35 ab	jsr $ab35			jsr WordSize		; ( xt u )
.9fb0	20 d7 b1	jsr $b1d7			jsr Decimal
.9fb3	b5 24		lda $24,x			lda DStack+0,x		; if = 255
.9fb5	c9 ff		cmp #$ff			cmp #$ff
.9fb7	d0 11		bne $9fca			bne _size5
.9fb9	20 b5 b8	jsr $b8b5			jsr sliteral_runtime	;   type "large"
.9fbc	4c c4 9f	jmp $9fc4			  jmp _size2
>9fbf	6c 61 72 67 65					  .text "large"
.9fc4	20 f0 cd	jsr $cdf0	_size2:		jsr Type
.9fc7	4c d0 9f	jmp $9fd0			jmp _size9		;  else
.9fca	20 6e cf	jsr $cf6e	_size5:		jsr Dup			;    type size
.9fcd	20 18 cc	jsr $cc18			jsr U_Dot
.9fd0					_size9:
.9fd0	20 7c ab	jsr $ab7c			jsr CR
.9fd3	68		pla				pla			; restore base
.9fd4	8d 00 03	sta $0300			sta base
.9fd7	20 bc cc	jsr $ccbc			jsr Two_dup
.9fda	20 76 a8	jsr $a876			jsr Dump		; dump
.9fdd	20 7c ab	jsr $ab7c			jsr CR
.9fe0	20 ef d7	jsr $d7ef			jsr DisAsm		; disassemble
=171					CodeLen	.var *-XtPtr1
=$9fe3					Here1 = *	; remember here
>9f35	ab					.byte CodeLen	;patch wh_CodeLength
.9fe3	60		rts				rts
>9fe4	46 50 44 42 43 4f 49 4d		_FlagLabels:	.text "FPDBCOIMNNANUF__"
>9fec	4e 4e 41 4e 55 46 5f 5f
>9ff4	46 6f 72 74 68 2d 57 6f		Name0:	.text "Forth-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9ffc	72 64 4c 69 73 74
=14					NameLength = *-Name0
=40834					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a002	8e					.byte (("Forth-WordList"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=207					LinkDisplacement = Nt0-WordListLink
>a003	10					.byte WordFlags	;wh_Flags
>a004	03					.byte 3	;wh_CodeLength
>a005	cf					  .byte LinkDisplacement	; offset to previous nt
=$a006					XtPtr1 ::= *
=40834					WordListLink ::= Nt0 ; remember the nt of this word for later
.a006	4c fe b7	jmp $b7fe	Forth_WordList:	jmp Zero
=3					CodeLen	.var *-XtPtr1
=$a009					Here1 = *	; remember here
>a004	03					.byte CodeLen	;patch wh_CodeLength
>a009	45 64 69 74 6f 72 2d 57		Name0:	.text "Editor-WordList"	;  name of word as a string, ending at wh_NameLastChar
>a011	6f 72 64 4c 69 73 74
=15					NameLength = *-Name0
=40856					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a018	8f					.byte (("Editor-WordList"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a019	10					.byte WordFlags	;wh_Flags
>a01a	03					.byte 3	;wh_CodeLength
>a01b	16					  .byte LinkDisplacement	; offset to previous nt
=$a01c					XtPtr1 ::= *
=40856					WordListLink ::= Nt0 ; remember the nt of this word for later
.a01c					Editor_WordList:
.a01c	4c 07 b8	jmp $b807			jmp One
=3					CodeLen	.var *-XtPtr1
=$a01f					Here1 = *	; remember here
>a01a	03					.byte CodeLen	;patch wh_CodeLength
>a01f	41 73 73 65 6d 62 6c 65		Name0:	.text "Assembler-WordList"	;  name of word as a string, ending at wh_NameLastChar
>a027	72 2d 57 6f 72 64 4c 69 73 74
=18					NameLength = *-Name0
=40881					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a031	92					.byte (("Assembler-WordList"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>a032	10					.byte WordFlags	;wh_Flags
>a033	03					.byte 3	;wh_CodeLength
>a034	19					  .byte LinkDisplacement	; offset to previous nt
=$a035					XtPtr1 ::= *
=40881					WordListLink ::= Nt0 ; remember the nt of this word for later
.a035					Assembler_WordList:
.a035	4c 10 b8	jmp $b810			jmp Two
=3					CodeLen	.var *-XtPtr1
=$a038					Here1 = *	; remember here
>a033	03					.byte CodeLen	;patch wh_CodeLength
>a038	52 6f 6f 74 2d 57 6f 72		Name0:	.text "Root-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a040	64 6c 69 73 74
=13					NameLength = *-Name0
=40901					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a045	8d					.byte (("Root-Wordlist"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>a046	10					.byte WordFlags	;wh_Flags
>a047	03					.byte 3	;wh_CodeLength
>a048	14					  .byte LinkDisplacement	; offset to previous nt
=$a049					XtPtr1 ::= *
=40901					WordListLink ::= Nt0 ; remember the nt of this word for later
.a049	a9 03		lda #$03	Root_WordList:	lda #wid_Root
.a04b	4c f0 b7	jmp $b7f0			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$a04e					Here1 = *	; remember here
>a047	05					.byte CodeLen	;patch wh_CodeLength
>a04e	4f 6e 6c 79			Name0:	.text "Only"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=40914					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a052	24					.byte (("Only"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>a053	10					.byte WordFlags	;wh_Flags
>a054	03					.byte 3	;wh_CodeLength
>a055	0d					  .byte LinkDisplacement	; offset to previous nt
=$a056					XtPtr1 ::= *
=40914					WordListLink ::= Nt0 ; remember the nt of this word for later
.a056	20 d0 b7	jsr $b7d0	Only:		jsr True	; Push -1
.a059	4c 76 a1	jmp $a176			jmp Set_Order	; set the minimum search order.
=6					CodeLen	.var *-XtPtr1
=$a05c					Here1 = *	; remember here
>a054	06					.byte CodeLen	;patch wh_CodeLength
>a05c	41 6c 73 6f			Name0:	.text "Also"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=40928					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a060	e4					.byte (("Also"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a061	10					.byte WordFlags	;wh_Flags
>a062	03					.byte 3	;wh_CodeLength
>a063	0e					  .byte LinkDisplacement	; offset to previous nt
=$a064					XtPtr1 ::= *
=40928					WordListLink ::= Nt0 ; remember the nt of this word for later
.a064	20 a6 a1	jsr $a1a6	Also:		jsr Get_Order
.a067	20 47 cf	jsr $cf47			jsr Over
.a06a	20 8b cf	jsr $cf8b			jsr Swap
.a06d	20 72 ca	jsr $ca72			jsr One_plus
.a070	4c 76 a1	jmp $a176			jmp Set_Order
=15					CodeLen	.var *-XtPtr1
=$a073					Here1 = *	; remember here
>a062	0f					.byte CodeLen	;patch wh_CodeLength
>a073	50 72 65 76 69 6f 75 73		Name0:	.text "Previous"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=40955					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a07b	68					.byte (("Previous"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>a07c	10					.byte WordFlags	;wh_Flags
>a07d	03					.byte 3	;wh_CodeLength
>a07e	1b					  .byte LinkDisplacement	; offset to previous nt
=$a07f					XtPtr1 ::= *
=40955					WordListLink ::= Nt0 ; remember the nt of this word for later
.a07f	20 a6 a1	jsr $a1a6	Previous:	jsr Get_Order
.a082	20 a8 c9	jsr $c9a8			jsr Nip
.a085	20 4d ca	jsr $ca4d			jsr One_minus
.a088	4c 76 a1	jmp $a176			jmp Set_Order
=12					CodeLen	.var *-XtPtr1
=$a08b					Here1 = *	; remember here
>a07d	0c					.byte CodeLen	;patch wh_CodeLength
>a08b	3e 4f 72 64 65 72		Name0:	.text ">Order"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=40977					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a091	46					.byte ((">Order"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a092	10					.byte WordFlags	;wh_Flags
>a093	03					.byte 3	;wh_CodeLength
>a094	16					  .byte LinkDisplacement	; offset to previous nt
=$a095					XtPtr1 ::= *
=40977					WordListLink ::= Nt0 ; remember the nt of this word for later
.a095					To_Order:
.a095	20 f8 ce	jsr $cef8			jsr To_R		; Put the wid on the return stack for now.
.a098	20 a6 a1	jsr $a1a6			jsr Get_Order		; Get the current search order.
.a09b	20 16 cf	jsr $cf16			jsr R_From		; Get back the wid and add it to the list.
.a09e	20 8b cf	jsr $cf8b			jsr Swap
.a0a1	20 72 ca	jsr $ca72			jsr One_plus
.a0a4	4c 76 a1	jmp $a176			jmp Set_Order		; Set the search order with the new list.
=18					CodeLen	.var *-XtPtr1
=$a0a7					Here1 = *	; remember here
>a093	12					.byte CodeLen	;patch wh_CodeLength
>a0a7	4f 72 64 65 72			Name0:	.text "Order"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=41004					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a0ac	45					.byte (("Order"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>a0ad	10					.byte WordFlags	;wh_Flags
>a0ae	03					.byte 3	;wh_CodeLength
>a0af	1b					  .byte LinkDisplacement	; offset to previous nt
=$a0b0					XtPtr1 ::= *
=41004					WordListLink ::= Nt0 ; remember the nt of this word for later
.a0b0					Order:
.a0b0	20 7c ab	jsr $ab7c			jsr CR
.a0b3	a0 00		ldy #$00			ldy #0			; for each search_orderV[]
.a0b5	f0 0b		beq $a0c2			beq _test
.a0b7	98		tya		_loop:		tya
.a0b8	48		pha				pha
.a0b9	b9 2b 03	lda $032b,y			lda Search_orderV,y
.a0bc	20 cd a0	jsr $a0cd			jsr print_wid_stringA	; internal helper function
.a0bf	68		pla				pla
.a0c0	a8		tay				tay
.a0c1	c8		iny				iny			;  next
.a0c2	cc 2a 03	cpy $032a	_test:		cpy Num_orderV
.a0c5	90 f0		bcc $a0b7			bcc _loop
.a0c7	20 7c ab	jsr $ab7c			jsr CR
.a0ca	ad 10 03	lda $0310			lda CurrentV		; print the current wordlist.
.a0cd					print_wid_stringA:
.a0cd	c9 04		cmp #$04			cmp #wid_Root+1		; do we have a string?
.a0cf	90 06		bcc $a0d7			bcc _string
.a0d1	20 f0 b7	jsr $b7f0			jsr PushZA		; print the WID number
.a0d4	4c 18 cc	jmp $cc18			jmp U_Dot		; JSR/RTS
.a0d7	0a		asl a		_string:	asl			; Get the word index based on WID 0 to 3
.a0d8	a8		tay				tay
.a0d9	ca		dex				dex			; TOS= word nt
.a0da	ca		dex				dex
.a0db	b9 f3 a0	lda $a0f3,y			lda _wid_Table+0,y
.a0de	95 24		sta $24,x			sta DStack+0,x
.a0e0	b9 f4 a0	lda $a0f4,y			lda _wid_Table+1,y
.a0e3	95 25		sta $25,x			sta DStack+1,x		; ( nt )
.a0e5	20 fe bd	jsr $bdfe			jsr Name_To_String	; ( addr u )
.a0e8	a9 f7		lda #$f7			lda #$100-9		;   cut off "_wordlist"
.a0ea	20 62 ca	jsr $ca62			jsr Minus_A
.a0ed	20 f0 cd	jsr $cdf0			jsr Type		; Print
.a0f0	4c e4 cd	jmp $cde4			jmp Space
=67					CodeLen	.var *-XtPtr1
=$a0f3					Here1 = *	; remember here
>a0ae	43					.byte CodeLen	;patch wh_CodeLength
.a0f3					_wid_Table:
>a0f3	82 9f					.word forth_wordlist-wh_LinkNt-1	; WID 0:
>a0f5	98 9f					.word editor_wordlist-wh_LinkNt-1	; WID 1:
>a0f7	b1 9f					.word assembler_wordlist-wh_LinkNt-1	; WID 2:
>a0f9	c5 9f					.word root_wordlist-wh_LinkNt-1		; WID 3:
>a0fb	46 6f 72 74 68			Name0:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=41088					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a100	05					.byte (("Forth"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=84					LinkDisplacement = Nt0-WordListLink
>a101	10					.byte WordFlags	;wh_Flags
>a102	03					.byte 3	;wh_CodeLength
>a103	54					  .byte LinkDisplacement	; offset to previous nt
=$a104					XtPtr1 ::= *
=41088					WordListLink ::= Nt0 ; remember the nt of this word for later
.a104	a9 00		lda #$00	Forth:		lda #wid_Forth
.a106	8d 2b 03	sta $032b			sta Search_OrderV+0
=5					CodeLen	.var *-XtPtr1
=$a109					Here1 = *	; remember here
>a102	05					.byte CodeLen	;patch wh_CodeLength
.a109	60		rts				rts
>a10a	44 65 66 69 6e 69 74 69		Name0:	.text "Definitions"	;  name of word as a string, ending at wh_NameLastChar
>a112	6f 6e 73
=11					NameLength = *-Name0
=41109					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a115	6b					.byte (("Definitions"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>a116	10					.byte WordFlags	;wh_Flags
>a117	03					.byte 3	;wh_CodeLength
>a118	15					  .byte LinkDisplacement	; offset to previous nt
=$a119					XtPtr1 ::= *
=41109					WordListLink ::= Nt0 ; remember the nt of this word for later
.a119	ad 2b 03	lda $032b	Definitions:	lda Search_OrderV	; Transfer SEARCH_ORDER[0] to
.a11c	8d 10 03	sta $0310			sta CurrentV		;   byte variable CURRENT.
=6					CodeLen	.var *-XtPtr1
=$a11f					Here1 = *	; remember here
>a117	06					.byte CodeLen	;patch wh_CodeLength
.a11f	60		rts				rts
>a120	57 6f 72 64 4c 69 73 74		Name0:	.text "WordList"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=41128					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a128	88					.byte (("WordList"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>a129	10					.byte WordFlags	;wh_Flags
>a12a	03					.byte 3	;wh_CodeLength
>a12b	13					  .byte LinkDisplacement	; offset to previous nt
=$a12c					XtPtr1 ::= *
=41128					WordListLink ::= Nt0 ; remember the nt of this word for later
.a12c					WordList:
.a12c	ad 11 03	lda $0311			lda Num_wordlistsV	; Get the current number of wordlists
.a12f	c9 0c		cmp #$0c			cmp #max_wordlists	; already at the max?
.a131	90 05		bcc $a138			bcc +
.a133	a9 66		lda #$66			lda #$100+err_TooManyWordlists	;   Print an error message
.a135	4c 87 b4	jmp $b487			jmp ThrowA
.a138					+
.a138	ee 11 03	inc $0311			inc Num_WordlistsV	; increment wordlist count
.a13b	4c f0 b7	jmp $b7f0			jmp PushZA		; and put it on the stack.
=18					CodeLen	.var *-XtPtr1
=$a13e					Here1 = *	; remember here
>a12a	12					.byte CodeLen	;patch wh_CodeLength
>a13e	53 65 74 2d 43 75 72 72		Name0:	.text "Set-Current"	;  name of word as a string, ending at wh_NameLastChar
>a146	65 6e 74
=11					NameLength = *-Name0
=41161					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a149	8b					.byte (("Set-Current"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>a14a	00					.byte WordFlags	;wh_Flags
>a14b	03					.byte 3	;wh_CodeLength
>a14c	21					  .byte LinkDisplacement	; offset to previous nt
=$a14d					XtPtr1 ::= *
=41161					WordListLink ::= Nt0 ; remember the nt of this word for later
.a14d	20 e7 b3	jsr $b3e7	Set_Current:	jsr PopA	; pop wid
.a150	8d 10 03	sta $0310			sta CurrentV	; only the LSB is used.
=6					CodeLen	.var *-XtPtr1
=$a153					Here1 = *	; remember here
>a14b	06					.byte CodeLen	;patch wh_CodeLength
.a153	60		rts				rts
>a154	47 65 74 2d 43 75 72 72		Name0:	.text "Get-Current"	;  name of word as a string, ending at wh_NameLastChar
>a15c	65 6e 74
=11					NameLength = *-Name0
=41183					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a15f	8b					.byte (("Get-Current"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a160	10					.byte WordFlags	;wh_Flags
>a161	03					.byte 3	;wh_CodeLength
>a162	16					  .byte LinkDisplacement	; offset to previous nt
=$a163					XtPtr1 ::= *
=41183					WordListLink ::= Nt0 ; remember the nt of this word for later
.a163					Get_Current:
.a163	ad 10 03	lda $0310			lda CurrentV
.a166	4c f0 b7	jmp $b7f0			jmp PushZA	; CURRENT is a byte variable
=6					CodeLen	.var *-XtPtr1
=$a169					Here1 = *	; remember here
>a161	06					.byte CodeLen	;patch wh_CodeLength
>a169	53 65 74 2d 4f 72 64 65		Name0:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>a171	72
=9					NameLength = *-Name0
=41202					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a172	49					.byte (("Set-Order"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>a173	10					.byte WordFlags	;wh_Flags
>a174	03					.byte 3	;wh_CodeLength
>a175	13					  .byte LinkDisplacement	; offset to previous nt
=$a176					XtPtr1 ::= *
=41202					WordListLink ::= Nt0 ; remember the nt of this word for later
.a176					Set_Order:
.a176	b5 25		lda $25,x			lda DStack+1,x		; Test for -1 TOS
.a178	10 08		bpl $a182			bpl _start
.a17a	e8		inx				inx			; Drop
.a17b	e8		inx				inx
.a17c	20 49 a0	jsr $a049			jsr Root_Wordlist	; wid
.a17f	20 07 b8	jsr $b807			jsr One			; Count is 1.
.a182					_start:
.a182	20 e7 b3	jsr $b3e7			jsr PopA	; pop count
.a185	8d 2a 03	sta $032a			sta Num_orderV	; #ORDER is a byte variable.
.a188	a0 00		ldy #$00			ldy #0
.a18a	f0 07		beq $a193			beq _test
.a18c					_loop:
.a18c	20 e7 b3	jsr $b3e7			jsr PopA		; The search order is a byte array
.a18f	99 2b 03	sta $032b,y			sta Search_OrderV,y	; so only save the LSB
.a192	c8		iny				iny
.a193					_test:
.a193	cc 2a 03	cpy $032a			cpy Num_orderV
.a196	d0 f4		bne $a18c			bne _loop
=34					CodeLen	.var *-XtPtr1
=$a198					Here1 = *	; remember here
>a174	22					.byte CodeLen	;patch wh_CodeLength
.a198	60		rts				rts
>a199	47 65 74 2d 4f 72 64 65		Name0:	.text "Get-Order"	;  name of word as a string, ending at wh_NameLastChar
>a1a1	72
=9					NameLength = *-Name0
=41250					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a1a2	49					.byte (("Get-Order"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=48					LinkDisplacement = Nt0-WordListLink
>a1a3	10					.byte WordFlags	;wh_Flags
>a1a4	03					.byte 3	;wh_CodeLength
>a1a5	30					  .byte LinkDisplacement	; offset to previous nt
=$a1a6					XtPtr1 ::= *
=41250					WordListLink ::= Nt0 ; remember the nt of this word for later
.a1a6					Get_Order:
.a1a6	ac 2a 03	ldy $032a			ldy Num_OrderV	; Get #ORDER - the number of wordlists in the search order.
.a1a9	f0 09		beq $a1b4			beq _done	; If zero, there are no wordlists.
.a1ab					_loop:
.a1ab	b9 2a 03	lda $032a,y			lda Search_OrderV-1,y	; Put that wordlist id on the stack.
.a1ae	20 f0 b7	jsr $b7f0			jsr PushZA
.a1b1	88		dey				dey
.a1b2	d0 f7		bne $a1ab			bne _loop		; See if that was the last one to process (first in the list).
.a1b4					_done:
.a1b4	ad 2a 03	lda $032a			lda Num_OrderV		; Push the number of items
.a1b7	4c f0 b7	jmp $b7f0			jmp PushZA
=20					CodeLen	.var *-XtPtr1
=$a1ba					Here1 = *	; remember here
>a1a4	14					.byte CodeLen	;patch wh_CodeLength
>a1ba	53 65 61 72 63 68 2d 57		Name0:	.text "Search-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a1c2	6f 72 64 6c 69 73 74
=15					NameLength = *-Name0
=41289					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a1c9	8f					.byte (("Search-Wordlist"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>a1ca	10					.byte WordFlags	;wh_Flags
>a1cb	03					.byte 3	;wh_CodeLength
>a1cc	27					  .byte LinkDisplacement	; offset to previous nt
=$a1cd					XtPtr1 ::= *
=41289					WordListLink ::= Nt0 ; remember the nt of this word for later
.a1cd					Search_WordList:
.a1cd	20 e7 b3	jsr $b3e7			jsr PopA		; Pop wid
.a1d0	48		pha				pha
.a1d1	20 a0 bc	jsr $bca0			jsr swl_prepare 	; ( 0 u )
.a1d4	e8		inx				inx
.a1d5	e8		inx				inx			; ( 0 )
.a1d6	68		pla				pla			; pop wid
.a1d7	20 cd bc	jsr $bccd			jsr swl_search_wordlist ; tmp1= nt of matching word
.a1da	f0 1f		beq $a1fb			beq _NotFound
.a1dc	a0 81		ldy #$81			ldy #wh_Flags
.a1de	b1 14		lda ($14),y			lda (tmp1),y
.a1e0	29 03		and #$03			and #FP+DB
.a1e2	18		clc				clc
.a1e3	69 82		adc #$82			adc #wh_LinkNt-1
.a1e5	65 14		adc $14				adc tmp1+0		; TOS= xt
.a1e7	95 24		sta $24,x			sta DStack+0,x
.a1e9	a9 00		lda #$00			lda #0
.a1eb	65 15		adc $15				adc tmp1+1
.a1ed	95 25		sta $25,x			sta DStack+1,x
.a1ef	b1 14		lda ($14),y			lda (tmp1),y
.a1f1	29 08		and #$08			and #IM
.a1f3	d0 03		bne $a1f8			bne _immediate		; bit set, we're immediate
.a1f5	4c d0 b7	jmp $b7d0			jmp True		; We're not immediate, return -1
.a1f8	4c 07 b8	jmp $b807	_immediate:	jmp One			; We're immediate, return 1
.a1fb					_NotFound:
.a1fb	60		rts				rts
=47					CodeLen	.var *-XtPtr1
=$a1fc					Here1 = *	; remember here
>a1cb	2f					.byte CodeLen	;patch wh_CodeLength
>0339					BlockReadV: .word ?	; Vector to block reading routine
>033b					BlockWriteV: .word ?	; Vector to block writing routine
>033d					BuffBlockNumV: .word ?	; Block number current in BlockBuffer
>033f					BuffStatusV: .word ?	; Status of BlockBuffer (bit 0 = used, bit 1 = dirty)
>0341					BlockBuffer: .fill 1024
.a1fc					BlockInit:
.a1fc	a9 00		lda #$00			lda #0
.a1fe	8d 3f 03	sta $033f			sta BuffStatusV
.a201	a9 45		lda #$45			lda #<Platform_Block_Read
.a203	a0 f1		ldy #$f1			ldy #>Platform_Block_Read
.a205	8d 39 03	sta $0339			sta BlockReadV+0
.a208	8c 3a 03	sty $033a			sty BlockReadV+1
.a20b	a9 70		lda #$70			lda #<Platform_Block_Write
.a20d	a0 f1		ldy #$f1			ldy #>Platform_Block_Write
.a20f	8d 3b 03	sta $033b			sta BlockWriteV+0
.a212	8c 3c 03	sty $033c			sty BlockWriteV+1
.a215	60		rts				rts
>0741					RamDriveV: .word ?	; ptr to RamDrive storage area
=0					io_blk_status = 0
=0					io_blk_action = 0
=0					io_blk_number = 0
=0					io_blk_buffer = 0
>a216	42 6c 6f 63 6b 2d 52 61		Name0:	.text "Block-RamDrive-Init"	;  name of word as a string, ending at wh_NameLastChar
>a21e	6d 44 72 69 76 65 2d 49 6e 69 74
=19					NameLength = *-Name0
=41385					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a229	93					.byte (("Block-RamDrive-Init"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=96					LinkDisplacement = Nt0-WordListLink
>a22a	50					.byte WordFlags	;wh_Flags
>a22b	03					.byte 3	;wh_CodeLength
>a22c	60					  .byte LinkDisplacement	; offset to previous nt
=$a22d					XtPtr1 ::= *
=41385					WordListLink ::= Nt0 ; remember the nt of this word for later
.a22d					Block_RamDrive_Init:
.a22d	a9 0a		lda #$0a			lda #10			; Calculate how many bytes are needed for numblocks blocks
.a22f	20 f0 b7	jsr $b7f0			jsr PushZA
.a232	20 57 cb	jsr $cb57			jsr LShift
.a235	20 40 ca	jsr $ca40			jsr Here		; ( size addr )
.a238	8d 41 07	sta $0741			sta RamDriveV+0
.a23b	8c 42 07	sty $0742			sty RamDriveV+1
.a23e	20 47 cf	jsr $cf47			jsr Over
.a241	20 ba c0	jsr $c0ba			jsr Allot		; Create ramdrive buffer
.a244	20 8b cf	jsr $cf8b			jsr Swap		; blank the buffer
.a247	20 45 be	jsr $be45			jsr Blank
.a24a	a9 5f		lda #$5f			lda #<_read		; set block read vector
.a24c	a0 a2		ldy #$a2			ldy #>_read
.a24e	8d 39 03	sta $0339			sta BlockReadV+0
.a251	8c 3a 03	sty $033a			sty BlockReadV+1
.a254	a9 6f		lda #$6f			lda #<_write		; set block write vector
.a256	a0 a2		ldy #$a2			ldy #>_write
.a258	8d 3b 03	sta $033b			sta BlockWriteV+0
.a25b	8c 3c 03	sty $033c			sty BlockWriteV+1
.a25e	60		rts				rts
=50					CodeLen	.var *-XtPtr1
=$a25f					Here1 = *	; remember here
>a22b	32					.byte CodeLen	;patch wh_CodeLength
.a25f					_read:
.a25f	20 7c a2	jsr $a27c			jsr _addr
.a262	20 8b cf	jsr $cf8b			jsr Swap
.a265	a9 00		lda #$00			lda #0
.a267	a0 04		ldy #$04			ldy #>1024
.a269	20 c1 b7	jsr $b7c1			jsr PushYA
.a26c	4c 8b ad	jmp $ad8b			jmp Move
.a26f					_write:
.a26f	20 7c a2	jsr $a27c			jsr _addr
.a272	a9 00		lda #$00			lda #0
.a274	a0 04		ldy #$04			ldy #>1024
.a276	20 c1 b7	jsr $b7c1			jsr PushYA
.a279	4c 8b ad	jmp $ad8b			jmp Move
.a27c					_addr:
.a27c	a9 0a		lda #$0a			lda #10
.a27e	20 f0 b7	jsr $b7f0			jsr PushZA
.a281	20 57 cb	jsr $cb57			jsr LShift
.a284	20 96 a2	jsr $a296			jsr RamDrive
.a287	4c b7 cb	jmp $cbb7			jmp Plus
>a28a	52 61 6d 44 72 69 76 65		Name0:	.text "RamDrive"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=41490					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a292	a8					.byte (("RamDrive"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=105					LinkDisplacement = Nt0-WordListLink
>a293	10					.byte WordFlags	;wh_Flags
>a294	03					.byte 3	;wh_CodeLength
>a295	69					  .byte LinkDisplacement	; offset to previous nt
=$a296					XtPtr1 ::= *
=41490					WordListLink ::= Nt0 ; remember the nt of this word for later
.a296	ad 41 07	lda $0741	RamDrive:	lda RamDriveV+0
.a299	ac 42 07	ldy $0742			ldy RamDriveV+1
.a29c	4c c1 b7	jmp $b7c1			jmp PushYA
=9					CodeLen	.var *-XtPtr1
=$a29f					Here1 = *	; remember here
>a294	09					.byte CodeLen	;patch wh_CodeLength
>a29f	42 75 66 66 53 74 61 74		Name0:	.text "BuffStatus"	;  name of word as a string, ending at wh_NameLastChar
>a2a7	75 73
=10					NameLength = *-Name0
=41513					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2a9	6a					.byte (("BuffStatus"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>a2aa	10					.byte WordFlags	;wh_Flags
>a2ab	03					.byte 3	;wh_CodeLength
>a2ac	17					  .byte LinkDisplacement	; offset to previous nt
=$a2ad					XtPtr1 ::= *
=41513					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2ad	a0 03		ldy #$03	BuffStatus:	ldy #>BuffStatusV
.a2af	a9 3f		lda #$3f			lda #<BuffStatusV
.a2b1	4c c1 b7	jmp $b7c1			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a2b4					Here1 = *	; remember here
>a2ab	07					.byte CodeLen	;patch wh_CodeLength
>a2b4	42 75 66 66 42 6c 6f 63		Name0:	.text "BuffBlockNum"	;  name of word as a string, ending at wh_NameLastChar
>a2bc	6b 4e 75 6d
=12					NameLength = *-Name0
=41536					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2c0	ac					.byte (("BuffBlockNum"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>a2c1	10					.byte WordFlags	;wh_Flags
>a2c2	03					.byte 3	;wh_CodeLength
>a2c3	17					  .byte LinkDisplacement	; offset to previous nt
=$a2c4					XtPtr1 ::= *
=41536					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2c4	a0 03		ldy #$03	BuffBlockNum:	ldy #>BuffBlockNumV
.a2c6	a9 3d		lda #$3d			lda #<BuffBlockNumV
.a2c8	4c c1 b7	jmp $b7c1			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a2cb					Here1 = *	; remember here
>a2c2	07					.byte CodeLen	;patch wh_CodeLength
>a2cb	42 6c 6b 42 75 66 66 65		Name0:	.text "BlkBuffer"	;  name of word as a string, ending at wh_NameLastChar
>a2d3	72
=9					NameLength = *-Name0
=41556					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2d4	49					.byte (("BlkBuffer"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>a2d5	10					.byte WordFlags	;wh_Flags
>a2d6	03					.byte 3	;wh_CodeLength
>a2d7	14					  .byte LinkDisplacement	; offset to previous nt
=$a2d8					XtPtr1 ::= *
=41556					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2d8	a0 03		ldy #$03	BlkBuffer:	ldy #>BlockBuffer
.a2da	a9 41		lda #$41			lda #<BlockBuffer
.a2dc	4c c1 b7	jmp $b7c1			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a2df					Here1 = *	; remember here
>a2d6	07					.byte CodeLen	;patch wh_CodeLength
>a2df	53 63 72			Name0:	.text "Scr"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=41570					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2e2	43					.byte (("Scr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a2e3	10					.byte WordFlags	;wh_Flags
>a2e4	03					.byte 3	;wh_CodeLength
>a2e5	0e					  .byte LinkDisplacement	; offset to previous nt
=$a2e6					XtPtr1 ::= *
=41570					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2e6	a0 03		ldy #$03	Scr:		ldy #>ScrV
.a2e8	a9 0e		lda #$0e			lda #<ScrV
.a2ea	4c c1 b7	jmp $b7c1			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a2ed					Here1 = *	; remember here
>a2e4	07					.byte CodeLen	;patch wh_CodeLength
>a2ed	42 6c 6b			Name0:	.text "Blk"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=41584					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2f0	63					.byte (("Blk"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a2f1	10					.byte WordFlags	;wh_Flags
>a2f2	03					.byte 3	;wh_CodeLength
>a2f3	0e					  .byte LinkDisplacement	; offset to previous nt
=$a2f4					XtPtr1 ::= *
=41584					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2f4	a0 03		ldy #$03	Blk:		ldy #>BlkV
.a2f6	a9 0c		lda #$0c			lda #<BlkV
.a2f8	4c c1 b7	jmp $b7c1			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a2fb					Here1 = *	; remember here
>a2f2	07					.byte CodeLen	;patch wh_CodeLength
>a2fb	42 6c 6f 63 6b 2d 57 72		Name0:	.text "Block-Write"	;  name of word as a string, ending at wh_NameLastChar
>a303	69 74 65
=11					NameLength = *-Name0
=41606					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a306	ab					.byte (("Block-Write"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a307	10					.byte WordFlags	;wh_Flags
>a308	03					.byte 3	;wh_CodeLength
>a309	16					  .byte LinkDisplacement	; offset to previous nt
=$a30a					XtPtr1 ::= *
=41606					WordListLink ::= Nt0 ; remember the nt of this word for later
.a30a	6c 3b 03	jmp ($033b)	Block_Write:	jmp (BlockWriteV)	; Execute the BLOCK-READ-VECTOR
=3					CodeLen	.var *-XtPtr1
=$a30d					Here1 = *	; remember here
>a308	03					.byte CodeLen	;patch wh_CodeLength
>a30d	42 6c 6f 63 6b 2d 57 72		Name0:	.text "Block-Write-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a315	69 74 65 2d 56 65 63 74 6f 72
=18					NameLength = *-Name0
=41631					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a31f	52					.byte (("Block-Write-Vector"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>a320	10					.byte WordFlags	;wh_Flags
>a321	03					.byte 3	;wh_CodeLength
>a322	19					  .byte LinkDisplacement	; offset to previous nt
=$a323					XtPtr1 ::= *
=41631					WordListLink ::= Nt0 ; remember the nt of this word for later
.a323					Block_Write_Vector:
.a323	a0 03		ldy #$03			ldy #>BlockWriteV
.a325	a9 3b		lda #$3b			lda #<BlockWriteV	; Get the BLOCK-WRITE-VECTOR address
.a327	4c c1 b7	jmp $b7c1			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a32a					Here1 = *	; remember here
>a321	07					.byte CodeLen	;patch wh_CodeLength
>a32a	42 6c 6f 63 6b 2d 52 65		Name0:	.text "Block-Read"	;  name of word as a string, ending at wh_NameLastChar
>a332	61 64
=10					NameLength = *-Name0
=41652					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a334	8a					.byte (("Block-Read"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>a335	10					.byte WordFlags	;wh_Flags
>a336	03					.byte 3	;wh_CodeLength
>a337	15					  .byte LinkDisplacement	; offset to previous nt
=$a338					XtPtr1 ::= *
=41652					WordListLink ::= Nt0 ; remember the nt of this word for later
.a338	6c 39 03	jmp ($0339)	Block_Read:	jmp (BlockReadV)	; Execute the BLOCK-READ-VECTOR
=3					CodeLen	.var *-XtPtr1
=$a33b					Here1 = *	; remember here
>a336	03					.byte CodeLen	;patch wh_CodeLength
>a33b	42 6c 6f 63 6b 2d 52 65		Name0:	.text "Block-Read-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a343	61 64 2d 56 65 63 74 6f 72
=17					NameLength = *-Name0
=41676					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a34c	51					.byte (("Block-Read-Vector"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>a34d	10					.byte WordFlags	;wh_Flags
>a34e	03					.byte 3	;wh_CodeLength
>a34f	18					  .byte LinkDisplacement	; offset to previous nt
=$a350					XtPtr1 ::= *
=41676					WordListLink ::= Nt0 ; remember the nt of this word for later
.a350					Block_Read_Vector:
.a350	a0 03		ldy #$03			ldy #>BlockReadV
.a352	a9 39		lda #$39			lda #<BlockReadV	; Get the BLOCK-READ-VECTOR address
.a354	4c c1 b7	jmp $b7c1			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a357					Here1 = *	; remember here
>a34e	07					.byte CodeLen	;patch wh_CodeLength
>a357	53 61 76 65 2d 42 75 66		Name0:	.text "Save-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a35f	66 65 72 73
=12					NameLength = *-Name0
=41699					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a363	6c					.byte (("Save-Buffers"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>a364	00					.byte WordFlags	;wh_Flags
>a365	03					.byte 3	;wh_CodeLength
>a366	17					  .byte LinkDisplacement	; offset to previous nt
=$a367					XtPtr1 ::= *
=41699					WordListLink ::= Nt0 ; remember the nt of this word for later
.a367					Save_Buffers:
.a367	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a36a	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a36c	d0 11		bne $a37f			bne _done	; Either not used or not dirty = done!
.a36e	20 d8 a2	jsr $a2d8			jsr BlkBuffer
.a371	20 c4 a2	jsr $a2c4			jsr BuffBlockNum
.a374	20 b0 ce	jsr $ceb0			jsr Fetch
.a377	20 0a a3	jsr $a30a			jsr Block_Write
.a37a	a9 01		lda #$01			lda #1
.a37c	8d 3f 03	sta $033f			sta BuffStatusV+0
.a37f					_done:
=24					CodeLen	.var *-XtPtr1
=$a37f					Here1 = *	; remember here
>a365	18					.byte CodeLen	;patch wh_CodeLength
.a37f	60		rts				rts
>a380	42 6c 6f 63 6b			Name0:	.text "Block"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=41733					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a385	65					.byte (("Block"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>a386	00					.byte WordFlags	;wh_Flags
>a387	03					.byte 3	;wh_CodeLength
>a388	22					  .byte LinkDisplacement	; offset to previous nt
=$a389					XtPtr1 ::= *
=41733					WordListLink ::= Nt0 ; remember the nt of this word for later
.a389					Block:
.a389	ad 3d 03	lda $033d			lda BuffBlockNumV+0	; check the LSB
.a38c	d5 24		cmp $24,x			cmp DStack+0,x
.a38e	d0 0e		bne $a39e			bne _not_in_buffer
.a390	ad 3e 03	lda $033e			lda BuffBlockNumV+1	; check the MSB
.a393	d5 25		cmp $25,x			cmp DStack+1,x
.a395	d0 07		bne $a39e			bne _not_in_buffer
.a397	ad 3f 03	lda $033f			lda BuffStatusV+0
.a39a	29 01		and #$01			and #1		; Check the in-use flag (bit 0)
.a39c	d0 2d		bne $a3cb			bne _done	; It's already in the buffer and in use.
.a39e					_not_in_buffer:
.a39e	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a3a1	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a3a3	d0 0c		bne $a3b1			bne _buffer_available ; Unused or not dirty = available
.a3a5	20 d8 a2	jsr $a2d8			jsr BlkBuffer
.a3a8	20 c4 a2	jsr $a2c4			jsr BuffBlockNum
.a3ab	20 b0 ce	jsr $ceb0			jsr Fetch
.a3ae	20 0a a3	jsr $a30a			jsr Block_Write
.a3b1					_buffer_available:
.a3b1	b5 24		lda $24,x			lda DStack+0,x
.a3b3	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a3b6	b5 25		lda $25,x			lda DStack+1,x
.a3b8	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a3bb	20 d8 a2	jsr $a2d8			jsr BlkBuffer
.a3be	20 8b cf	jsr $cf8b			jsr Swap
.a3c1	20 38 a3	jsr $a338			jsr Block_Read
.a3c4	a9 01		lda #$01			lda #1
.a3c6	8d 3f 03	sta $033f			sta BuffStatusV+0
.a3c9	ca		dex				dex
.a3ca	ca		dex				dex
.a3cb					_done:
.a3cb	a9 41		lda #$41			lda #<BlockBuffer
.a3cd	95 24		sta $24,x			sta DStack+0,x
.a3cf	a9 03		lda #$03			lda #>BlockBuffer
.a3d1	95 25		sta $25,x			sta DStack+1,x
=74					CodeLen	.var *-XtPtr1
=$a3d3					Here1 = *	; remember here
>a387	4a					.byte CodeLen	;patch wh_CodeLength
.a3d3	60		rts				rts
>a3d4	55 70 64 61 74 65		Name0:	.text "Update"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=41818					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a3da	a6					.byte (("Update"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=85					LinkDisplacement = Nt0-WordListLink
>a3db	00					.byte WordFlags	;wh_Flags
>a3dc	03					.byte 3	;wh_CodeLength
>a3dd	55					  .byte LinkDisplacement	; offset to previous nt
=$a3de					XtPtr1 ::= *
=41818					WordListLink ::= Nt0 ; remember the nt of this word for later
.a3de					Update:
.a3de	ad 3f 03	lda $033f			lda BuffStatusV+0
.a3e1	09 02		ora #$02			ora #2		; Turn on dirty flag (bit 2)
.a3e3	8d 3f 03	sta $033f			sta BuffStatusV+0
=8					CodeLen	.var *-XtPtr1
=$a3e6					Here1 = *	; remember here
>a3dc	08					.byte CodeLen	;patch wh_CodeLength
.a3e6	60		rts				rts
>a3e7	42 75 66 66 65 72		Name0:	.text "Buffer"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=41837					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a3ed	46					.byte (("Buffer"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>a3ee	10					.byte WordFlags	;wh_Flags
>a3ef	03					.byte 3	;wh_CodeLength
>a3f0	13					  .byte LinkDisplacement	; offset to previous nt
=$a3f1					XtPtr1 ::= *
=41837					WordListLink ::= Nt0 ; remember the nt of this word for later
.a3f1					Buffer:
.a3f1	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a3f4	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a3f6	d0 0c		bne $a404			bne _buffer_available ; Unused or not dirty = available
.a3f8	20 d8 a2	jsr $a2d8			jsr BlkBuffer
.a3fb	20 c4 a2	jsr $a2c4			jsr BuffBlockNum
.a3fe	20 b0 ce	jsr $ceb0			jsr Fetch
.a401	20 0a a3	jsr $a30a			jsr Block_Write
.a404					_buffer_available:
.a404	b5 24		lda $24,x			lda DStack+0,x
.a406	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a409	b5 25		lda $25,x			lda DStack+1,x
.a40b	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a40e	a9 01		lda #$01			lda #1
.a410	8d 3f 03	sta $033f			sta BuffStatusV+0
.a413					_done:
.a413	a9 41		lda #$41			lda #<BlockBuffer
.a415	95 24		sta $24,x			sta DStack+0,x
.a417	a9 03		lda #$03			lda #>BlockBuffer
.a419	95 25		sta $25,x			sta DStack+1,x
=42					CodeLen	.var *-XtPtr1
=$a41b					Here1 = *	; remember here
>a3ef	2a					.byte CodeLen	;patch wh_CodeLength
.a41b	60		rts				rts
>a41c	45 6d 70 74 79 2d 42 75		Name0:	.text "Empty-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a424	66 66 65 72 73
=13					NameLength = *-Name0
=41897					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a429	6d					.byte (("Empty-Buffers"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=60					LinkDisplacement = Nt0-WordListLink
>a42a	10					.byte WordFlags	;wh_Flags
>a42b	03					.byte 3	;wh_CodeLength
>a42c	3c					  .byte LinkDisplacement	; offset to previous nt
=$a42d					XtPtr1 ::= *
=41897					WordListLink ::= Nt0 ; remember the nt of this word for later
.a42d	a9 00		lda #$00	Empty_Buffers:	lda #0		; Set the buffer status to empty.
.a42f	8d 3f 03	sta $033f			sta BuffStatusV+0 ; Only LSB is used.
=5					CodeLen	.var *-XtPtr1
=$a432					Here1 = *	; remember here
>a42b	05					.byte CodeLen	;patch wh_CodeLength
.a432	60		rts				rts
>a433	46 6c 75 73 68			Name0:	.text "Flush"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=41912					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a438	05					.byte (("Flush"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>a439	10					.byte WordFlags	;wh_Flags
>a43a	03					.byte 3	;wh_CodeLength
>a43b	0f					  .byte LinkDisplacement	; offset to previous nt
=$a43c					XtPtr1 ::= *
=41912					WordListLink ::= Nt0 ; remember the nt of this word for later
.a43c	20 67 a3	jsr $a367	Flush:		jsr Save_Buffers
.a43f	4c 2d a4	jmp $a42d			jmp Empty_Buffers
=6					CodeLen	.var *-XtPtr1
=$a442					Here1 = *	; remember here
>a43a	06					.byte CodeLen	;patch wh_CodeLength
>a442	4c 6f 61 64			Name0:	.text "Load"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=41926					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a446	84					.byte (("Load"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a447	40					.byte WordFlags	;wh_Flags
>a448	03					.byte 3	;wh_CodeLength
>a449	0e					  .byte LinkDisplacement	; offset to previous nt
=$a44a					XtPtr1 ::= *
=41926					WordListLink ::= Nt0 ; remember the nt of this word for later
.a44a					Load:
.a44a	20 2b b4	jsr $b42b			jsr underflow_1
.a44d	ad 0d 03	lda $030d			lda BlkV+1		; Save the current value of BLK on the return stack.
.a450	48		pha				pha
.a451	ad 0c 03	lda $030c			lda BlkV+0
.a454	48		pha				pha
.a455	b5 24		lda $24,x			lda DStack+0,x		; Set BLK to the given block/screen number.
.a457	8d 0c 03	sta $030c			sta BlkV+0
.a45a	b5 25		lda $25,x			lda DStack+1,x
.a45c	8d 0d 03	sta $030d			sta BlkV+1
.a45f	20 89 a3	jsr $a389			jsr Block		; Load that block into a buffer
.a462	a9 00		lda #$00			lda #<1024		; block length.
.a464	a0 04		ldy #$04			ldy #>1024
.a466	20 c1 b7	jsr $b7c1			jsr PushYA
.a469	38		sec				sec		; Set a flag to not zero BLK
.a46a	20 12 b0	jsr $b012			jsr load_evaluate
.a46d	68		pla				pla
.a46e	8d 0c 03	sta $030c			sta BlkV+0
.a471	68		pla				pla
.a472	8d 0d 03	sta $030d			sta BlkV+1
.a475	0d 0c 03	ora $030c			ora BlkV+0
.a478	f0 13		beq $a48d			beq _done
.a47a	ad 0c 03	lda $030c			lda BlkV+0
.a47d	ac 0d 03	ldy $030d			ldy BlkV+1
.a480	20 c1 b7	jsr $b7c1			jsr PushYA
.a483	20 89 a3	jsr $a389			jsr Block
.a486	20 02 b4	jsr $b402			jsr PopYA	; Pop the buffer address.
.a489	85 04		sta $04				sta cib+0
.a48b	84 05		sty $05				sty cib+1
.a48d					_done:
=67					CodeLen	.var *-XtPtr1
=$a48d					Here1 = *	; remember here
>a448	43					.byte CodeLen	;patch wh_CodeLength
.a48d	60		rts				rts
>a48e	54 68 72 75			Name0:	.text "Thru"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42002					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a492	a4					.byte (("Thru"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=76					LinkDisplacement = Nt0-WordListLink
>a493	50					.byte WordFlags	;wh_Flags
>a494	03					.byte 3	;wh_CodeLength
>a495	4c					  .byte LinkDisplacement	; offset to previous nt
=$a496					XtPtr1 ::= *
=42002					WordListLink ::= Nt0 ; remember the nt of this word for later
.a496					Thru:
.a496	20 3f b4	jsr $b43f			jsr underflow_2
.a499	20 f8 ce	jsr $cef8			jsr To_R
.a49c					_loop:
.a49c	b5 25		lda $25,x			lda DStack+1,x		; copy to return stack
.a49e	48		pha				pha
.a49f	b5 24		lda $24,x			lda DStack+0,x
.a4a1	48		pha				pha
.a4a2	20 4a a4	jsr $a44a			jsr Load		; Load this screen.
.a4a5	20 16 cf	jsr $cf16			jsr R_From		; Get the screen # we just loaded.
.a4a8	20 72 ca	jsr $ca72			jsr One_plus		; increment
.a4ab	86 14		stx $14				stx tmp1
.a4ad	ba		tsx				tsx
.a4ae	8a		txa				txa
.a4af	a8		tay				tay
.a4b0	a6 14		ldx $14				ldx tmp1
.a4b2	b9 01 01	lda $0101,y			lda RStack+1,y
.a4b5	d5 24		cmp $24,x			cmp DStack+0,x
.a4b7	b9 02 01	lda $0102,y			lda RStack+2,y
.a4ba	f5 25		sbc $25,x			sbc DStack+1,x
.a4bc	b0 de		bcs $a49c			bcs _loop
.a4be	e8		inx				inx			; Drop index
.a4bf	e8		inx				inx
.a4c0	68		pla				pla			; RDrop limit
.a4c1	68		pla				pla
=44					CodeLen	.var *-XtPtr1
=$a4c2					Here1 = *	; remember here
>a494	2c					.byte CodeLen	;patch wh_CodeLength
.a4c2	60		rts				rts
>a4c3	4c 69 73 74			Name0:	.text "List"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42055					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a4c7	84					.byte (("List"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>a4c8	10					.byte WordFlags	;wh_Flags
>a4c9	03					.byte 3	;wh_CodeLength
>a4ca	35					  .byte LinkDisplacement	; offset to previous nt
=$a4cb					XtPtr1 ::= *
=42055					WordListLink ::= Nt0 ; remember the nt of this word for later
.a4cb	20 02 b4	jsr $b402	List:		jsr PopYA	; Save the screen number
.a4ce	8d 0e 03	sta $030e			sta ScrV+0
.a4d1	8c 0f 03	sty $030f			sty ScrV+1
.a4d4					ListScr:
.a4d4	20 e6 a2	jsr $a2e6			jsr Scr
.a4d7	20 b0 ce	jsr $ceb0			jsr Fetch
.a4da	20 89 a3	jsr $a389			jsr Block	; Get the current screen contents.
.a4dd	20 7c ab	jsr $ab7c			jsr CR
.a4e0	20 b5 b8	jsr $b8b5			jsr SLiteral_Runtime
.a4e3	4c ee a4	jmp $a4ee			  jmp +				; for SLiteral_Runtime
>a4e6	53 63 72 65 65 6e 20 23				  .text "Screen #"		; for SLiteral_Runtime
.a4ee					+
.a4ee	20 f0 cd	jsr $cdf0			jsr Type
.a4f1	20 e6 a2	jsr $a2e6			jsr Scr		; print screen number
.a4f4	20 b0 ce	jsr $ceb0			jsr Fetch
.a4f7	a9 04		lda #$04			lda #4		;    in 4 positions
.a4f9	20 4a cc	jsr $cc4a			jsr U_Dot_R_A
.a4fc	a9 00		lda #$00			lda #0			; line #
.a4fe					_line_loop:
.a4fe	48		pha				pha
.a4ff	20 7c ab	jsr $ab7c			jsr CR
.a502	68		pla				pla		; Print the line number
.a503	48		pha				pha
.a504	20 f0 b7	jsr $b7f0			jsr PushZA
.a507	a9 02		lda #$02			lda #2		;   in 2 positions
.a509	20 4a cc	jsr $cc4a			jsr U_Dot_R_A
.a50c	20 e4 cd	jsr $cde4			jsr Space
.a50f	20 6e cf	jsr $cf6e			jsr Dup		; Print one line using the address on the stack.
.a512	a9 40		lda #$40			lda #64
.a514	20 f0 b7	jsr $b7f0			jsr PushZA
.a517	20 f0 cd	jsr $cdf0			jsr Type
.a51a	a9 40		lda #$40			lda #64		; move address to the next line.
.a51c	20 24 ca	jsr $ca24			jsr Plus_A
.a51f	68		pla				pla		; Increment the line number
.a520	18		clc				clc
.a521	69 01		adc #$01			adc #1
.a523	c9 10		cmp #$10			cmp #16		; See if we are done.
.a525	d0 d7		bne $a4fe			bne _line_loop
.a527	e8		inx				inx		; Drop the address
.a528	e8		inx				inx
.a529	4c 7c ab	jmp $ab7c			jmp CR
=97					CodeLen	.var *-XtPtr1
=$a52c					Here1 = *	; remember here
>a4c9	61					.byte CodeLen	;patch wh_CodeLength
>a52c	44 65 66 65 72			Name0:	.text "Defer"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42161					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a531	45					.byte (("Defer"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=106					LinkDisplacement = Nt0-WordListLink
>a532	10					.byte WordFlags	;wh_Flags
>a533	03					.byte 3	;wh_CodeLength
>a534	6a					  .byte LinkDisplacement	; offset to previous nt
=$a535					XtPtr1 ::= *
=42161					WordListLink ::= Nt0 ; remember the nt of this word for later
.a535					Defer:
.a535	20 13 c1	jsr $c113			jsr Header_Comma	; compile word header
.a538	a9 42		lda #$42			lda #<_undefined	; compile "jmp _undefined" (patched later)
.a53a	a0 a5		ldy #$a5			ldy #>_undefined
.a53c	20 4f cd	jsr $cd4f			jsr Jmp_Comma_YA
.a53f	4c de bb	jmp $bbde			jmp adjust_z		; set word length
=13					CodeLen	.var *-XtPtr1
=$a542					Here1 = *	; remember here
>a533	0d					.byte CodeLen	;patch wh_CodeLength
.a542					_undefined:
.a542	a9 6a		lda #$6a			lda #$100+err_Defer	; throw exception
.a544	4c 87 b4	jmp $b487			jmp ThrowA
>a547	44 65 66 65 72 21		Name0:	.text "Defer!"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=42189					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a54d	26					.byte (("Defer!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>a54e	10					.byte WordFlags	;wh_Flags
>a54f	03					.byte 3	;wh_CodeLength
>a550	1c					  .byte LinkDisplacement	; offset to previous nt
=$a551					XtPtr1 ::= *
=42189					WordListLink ::= Nt0 ; remember the nt of this word for later
.a551	20 02 b4	jsr $b402	Defer_Store:	jsr PopYA
.a554	85 14		sta $14		Defer_Store_YA:	sta tmp1+0
.a556	84 15		sty $15				sty tmp1+1
.a558	b5 24		lda $24,x			lda DStack+0,x		; DEFERs JMP abs operand= xt2
.a55a	a0 01		ldy #$01			ldy #1
.a55c	91 14		sta ($14),y			sta (tmp1),y
.a55e	b5 25		lda $25,x			lda DStack+1,x
.a560	c8		iny				iny
.a561	91 14		sta ($14),y			sta (tmp1),y
.a563	4c a7 cf	jmp $cfa7			jmp Drop		; Drop xt2
=21					CodeLen	.var *-XtPtr1
=$a566					Here1 = *	; remember here
>a54f	15					.byte CodeLen	;patch wh_CodeLength
>a566	44 65 66 65 72 40		Name0:	.text "Defer@"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=42220					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a56c	06					.byte (("Defer@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>a56d	10					.byte WordFlags	;wh_Flags
>a56e	03					.byte 3	;wh_CodeLength
>a56f	1f					  .byte LinkDisplacement	; offset to previous nt
=$a570					XtPtr1 ::= *
=42220					WordListLink ::= Nt0 ; remember the nt of this word for later
.a570	20 02 b4	jsr $b402	Defer_Fetch:	jsr PopYA	; pop xt1, check underflow
.a573	85 14		sta $14		Defer_Fetch_YA:	sta tmp1+0
.a575	84 15		sty $15				sty tmp1+1
.a577	ca		dex				dex		; push DEFERs JMP abs operand
.a578	ca		dex				dex
.a579	a0 01		ldy #$01			ldy #1
.a57b	b1 14		lda ($14),y			lda (tmp1),y
.a57d	95 24		sta $24,x			sta DStack+0,x
.a57f	c8		iny				iny
.a580	b1 14		lda ($14),y			lda (tmp1),y
.a582	95 25		sta $25,x			sta DStack+1,x
.a584	60		rts				rts
=21					CodeLen	.var *-XtPtr1
=$a585					Here1 = *	; remember here
>a56e	15					.byte CodeLen	;patch wh_CodeLength
>a585	49 73				Name0:	.text "Is"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=42247					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a587	62					.byte (("Is"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>a588	18					.byte WordFlags	;wh_Flags
>a589	03					.byte 3	;wh_CodeLength
>a58a	1b					  .byte LinkDisplacement	; offset to previous nt
=$a58b					XtPtr1 ::= *
=42247					WordListLink ::= Nt0 ; remember the nt of this word for later
.a58b					Is:
.a58b	20 44 bc	jsr $bc44			jsr Tick		; get xt of "name"
.a58e	a5 0a		lda $0a				lda state		; Check STATE
.a590	f0 bf		beq $a551			beq Defer_Store		; interpreting, put xt in the DEFER word
.a592					_compiling:
.a592	20 a8 b7	jsr $b7a8			jsr ldya_immed_comma	; compile LDY #; LDA # of the xt of "name"
.a595	a0 a5		ldy #$a5			ldy #>Defer_Store_YA	; Postpone DEFER! by compiling a JSR to it.
.a597	a9 54		lda #$54			lda #<Defer_Store_YA
.a599	4c 39 cd	jmp $cd39			jmp Jsr_Comma_YA
=17					CodeLen	.var *-XtPtr1
=$a59c					Here1 = *	; remember here
>a589	11					.byte CodeLen	;patch wh_CodeLength
>a59c	41 63 74 69 6f 6e 2d 4f		Name0:	.text "Action-Of"	;  name of word as a string, ending at wh_NameLastChar
>a5a4	66
=9					NameLength = *-Name0
=42277					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5a5	c9					.byte (("Action-Of"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>a5a6	18					.byte WordFlags	;wh_Flags
>a5a7	03					.byte 3	;wh_CodeLength
>a5a8	1e					  .byte LinkDisplacement	; offset to previous nt
=$a5a9					XtPtr1 ::= *
=42277					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5a9					Action_Of:
.a5a9	20 44 bc	jsr $bc44			jsr Tick		; get xt of "name"
.a5ac	a5 0a		lda $0a				lda state		; Check STATE
.a5ae	f0 c0		beq $a570			beq Defer_Fetch		; interpreting, get xt in the DEFER word
.a5b0					_compiling:
.a5b0	20 a8 b7	jsr $b7a8			jsr ldya_immed_comma	; compile LDY #; LDA # of the xt of "name"
.a5b3	a0 a5		ldy #$a5			ldy #>Defer_Fetch_YA	; Postpone DEFER@ by compiling a JSR to it.
.a5b5	a9 73		lda #$73			lda #<Defer_Fetch_YA
.a5b7	4c 39 cd	jmp $cd39			jmp Jsr_Comma_YA
=17					CodeLen	.var *-XtPtr1
=$a5ba					Here1 = *	; remember here
>a5a7	11					.byte CodeLen	;patch wh_CodeLength
>a5ba	55 73 65 72 41 64 64 72		Name0:	.text "UserAddr"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=42306					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5c2	48					.byte (("UserAddr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>a5c3	10					.byte WordFlags	;wh_Flags
>a5c4	03					.byte 3	;wh_CodeLength
>a5c5	1d					  .byte LinkDisplacement	; offset to previous nt
=$a5c6					XtPtr1 ::= *
=42306					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5c6	a0 02		ldy #$02	UserAddr:	ldy #>User0
.a5c8	a9 ff		lda #$ff			lda #<User0
.a5ca	4c c1 b7	jmp $b7c1			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a5cd					Here1 = *	; remember here
>a5c4	07					.byte CodeLen	;patch wh_CodeLength
>a5cd	42 75 66 66 65 72 3a		Name0:	.text "Buffer:"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=42324					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5d4	47					.byte (("Buffer:"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>a5d5	10					.byte WordFlags	;wh_Flags
>a5d6	03					.byte 3	;wh_CodeLength
>a5d7	12					  .byte LinkDisplacement	; offset to previous nt
=$a5d8					XtPtr1 ::= *
=42324					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5d8	20 c1 c1	jsr $c1c1	Buffer_Colon:	jsr Create
.a5db	4c ba c0	jmp $c0ba			jmp Allot
=6					CodeLen	.var *-XtPtr1
=$a5de					Here1 = *	; remember here
>a5d6	06					.byte CodeLen	;patch wh_CodeLength
>a5de	43 61 73 65			Name0:	.text "Case"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42338					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5e2	a4					.byte (("Case"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a5e3	1c					.byte WordFlags	;wh_Flags
>a5e4	03					.byte 3	;wh_CodeLength
>a5e5	0e					  .byte LinkDisplacement	; offset to previous nt
=$a5e6					XtPtr1 ::= *
=42338					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5e6					Case:
.a5e6	4c fe b7	jmp $b7fe			jmp Zero	; init jmp fixup chain
=3					CodeLen	.var *-XtPtr1
=$a5e9					Here1 = *	; remember here
>a5e4	03					.byte CodeLen	;patch wh_CodeLength
>a5e9	45 6e 64 43 61 73 65		Name0:	.text "EndCase"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=42352					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5f0	a7					.byte (("EndCase"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a5f1	1c					.byte WordFlags	;wh_Flags
>a5f2	03					.byte 3	;wh_CodeLength
>a5f3	0e					  .byte LinkDisplacement	; offset to previous nt
=$a5f4					XtPtr1 ::= *
=42352					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5f4					EndCase:
.a5f4	20 29 cd	jsr $cd29			jsr Drop_Comma
.a5f7					_loop:
.a5f7	b5 25		lda $25,x			lda DStack+1,x	; while addr fixup entries left
.a5f9	f0 06		beq $a601			beq _done
.a5fb	20 76 a6	jsr $a676			jsr Then	;   fixup another one
.a5fe	4c f7 a5	jmp $a5f7			jmp _loop
.a601					_done:
.a601	e8		inx				inx		; Drop the 0
.a602	e8		inx				inx
=15					CodeLen	.var *-XtPtr1
=$a603					Here1 = *	; remember here
>a5f2	0f					.byte CodeLen	;patch wh_CodeLength
.a603	60		rts				rts
>a604	4f 66				Name0:	.text "Of"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=42374					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a606	c2					.byte (("Of"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a607	1c					.byte WordFlags	;wh_Flags
>a608	03					.byte 3	;wh_CodeLength
>a609	16					  .byte LinkDisplacement	; offset to previous nt
=$a60a					XtPtr1 ::= *
=42374					WordListLink ::= Nt0 ; remember the nt of this word for later
.a60a					Of:
.a60a	a0 a6		ldy #$a6			ldy #>_runtime		; Check if value is equal to this case.
.a60c	a9 1f		lda #$1f			lda #<_runtime
.a60e	20 39 cd	jsr $cd39			jsr Jsr_Comma_YA
.a611	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a613	20 ff cc	jsr $ccff			jsr C_Comma_A
.a616	20 40 ca	jsr $ca40			jsr Here		; Put the origination address on the stack for else/then
.a619	20 fe b7	jsr $b7fe			jsr Zero
.a61c	4c 13 cd	jmp $cd13			jmp Comma
=21					CodeLen	.var *-XtPtr1
=$a61f					Here1 = *	; remember here
>a608	15					.byte CodeLen	;patch wh_CodeLength
.a61f					_runtime:
.a61f	e8		inx				inx		; Drop x2
.a620	e8		inx				inx
.a621	b5 22		lda $22,x			lda DStack-2,x	; compare x1 with x2
.a623	d5 24		cmp $24,x			cmp DStack+0,x
.a625	d0 06		bne $a62d			bne _NotEq
.a627	b5 23		lda $23,x			lda DStack-1,x
.a629	d5 25		cmp $25,x			cmp DStack+1,x
.a62b	f0 31		beq $a65e			beq zbranch_run2 ; Drop x1 & return to after the jmp abs
.a62d	60		rts		_NotEq:		rts		; return to the jmp abs to next test
>a62e	45 6e 64 4f 66			Name0:	.text "EndOf"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42419					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a633	c5					.byte (("EndOf"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>a634	1c					.byte WordFlags	;wh_Flags
>a635	03					.byte 3	;wh_CodeLength
>a636	2d					  .byte LinkDisplacement	; offset to previous nt
=$a637					XtPtr1 ::= *
=42419					WordListLink ::= Nt0 ; remember the nt of this word for later
.a637	4c 87 a6	jmp $a687	EndOf:		jmp Else
=3					CodeLen	.var *-XtPtr1
=$a63a					Here1 = *	; remember here
>a635	03					.byte CodeLen	;patch wh_CodeLength
>a63a	49 66				Name0:	.text "If"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=42428					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a63c	c2					.byte (("If"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>a63d	1c					.byte WordFlags	;wh_Flags
>a63e	03					.byte 3	;wh_CodeLength
>a63f	09					  .byte LinkDisplacement	; offset to previous nt
=$a640					XtPtr1 ::= *
=42428					WordListLink ::= Nt0 ; remember the nt of this word for later
.a640					If:
.a640	20 51 a6	jsr $a651	If3:		jsr zbranch_jsr_comma	; Compile a 0BRANCH
.a643					zbranch_jmp0_comma:
.a643	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a645	20 ff cc	jsr $ccff			jsr C_Comma_A
.a648	20 40 ca	jsr $ca40			jsr Here		; save ptr to address for else/then
.a64b	a9 00		lda #$00			lda #0			; Stuff zero in for the branch address right now.
.a64d	a8		tay				tay			; THEN or ELSE will fix it later.
.a64e	4c 16 cd	jmp $cd16			jmp Comma_YA
=17					CodeLen	.var *-XtPtr1
=$a651					Here1 = *	; remember here
>a63e	11					.byte CodeLen	;patch wh_CodeLength
=$cd4c					zbranch_jmp_comma = Jmp_Comma		; compile jmp abs
.a651					zbranch_jsr_comma:
.a651	a0 a6		ldy #$a6			ldy #>_runtime
.a653	a9 58		lda #$58			lda #<_runtime
.a655	4c 39 cd	jmp $cd39			jmp Jsr_Comma_YA
.a658					_runtime:
.a658	b5 24		lda $24,x			lda DStack+0,x		;flag is false?
.a65a	15 25		ora $25,x			ora DStack+1,x
.a65c	f0 0d		beq $a66b			beq zbranch_run_done
.a65e	18		clc		zbranch_run2:	clc			; move RTS addr over the next jmp abs.
.a65f	68		pla				pla
.a660	69 03		adc #$03			adc #3
.a662	90 06		bcc $a66a			bcc +
.a664	a8		tay				tay
.a665	68		pla				pla
.a666	69 00		adc #$00			adc #0
.a668	48		pha				pha
.a669	98		tya				tya
.a66a	48		pha		+		pha
.a66b					zbranch_run_done:
.a66b	e8		inx				inx			; Drop f
.a66c	e8		inx				inx
.a66d	60		rts				rts
>a66e	54 68 65 6e			Name0:	.text "Then"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42482					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a672	c4					.byte (("Then"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=54					LinkDisplacement = Nt0-WordListLink
>a673	1c					.byte WordFlags	;wh_Flags
>a674	03					.byte 3	;wh_CodeLength
>a675	36					  .byte LinkDisplacement	; offset to previous nt
=$a676					XtPtr1 ::= *
=42482					WordListLink ::= Nt0 ; remember the nt of this word for later
.a676					Then:
.a676	20 40 ca	jsr $ca40			jsr Here
.a679	20 8b cf	jsr $cf8b			jsr Swap
.a67c	4c c9 ce	jmp $cec9			jmp Store
=9					CodeLen	.var *-XtPtr1
=$a67f					Here1 = *	; remember here
>a674	09					.byte CodeLen	;patch wh_CodeLength
>a67f	45 6c 73 65			Name0:	.text "Else"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42499					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a683	a4					.byte (("Else"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>a684	1c					.byte WordFlags	;wh_Flags
>a685	03					.byte 3	;wh_CodeLength
>a686	11					  .byte LinkDisplacement	; offset to previous nt
=$a687					XtPtr1 ::= *
=42499					WordListLink ::= Nt0 ; remember the nt of this word for later
.a687					Else:
.a687	20 43 a6	jsr $a643			jsr zbranch_jmp0_comma	; compile jmp 0, push addr of addr
.a68a	20 40 ca	jsr $ca40			jsr Here
.a68d	20 69 ce	jsr $ce69			jsr Rot
.a690	4c c9 ce	jmp $cec9			jmp Store
=12					CodeLen	.var *-XtPtr1
=$a693					Here1 = *	; remember here
>a685	0c					.byte CodeLen	;patch wh_CodeLength
>a693	42 65 67 69 6e			Name0:	.text "Begin"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42520					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a698	c5					.byte (("Begin"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= NN+CO+IM	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>a699	1c					.byte WordFlags	;wh_Flags
>a69a	03					.byte 3	;wh_CodeLength
>a69b	15					  .byte LinkDisplacement	; offset to previous nt
=$a69c					XtPtr1 ::= *
=42520					WordListLink ::= Nt0 ; remember the nt of this word for later
.a69c	20 40 ca	jsr $ca40	Begin:		jsr Here	; remember the loop starting location
.a69f	a9 9c		lda #$9c			lda #<Begin	; pairing marker
.a6a1	4c f0 b7	jmp $b7f0			jmp PushZA
=8					CodeLen	.var *-XtPtr1
=$a6a4					Here1 = *	; remember here
>a69a	08					.byte CodeLen	;patch wh_CodeLength
>a6a4	41 67 61 69 6e			Name0:	.text "Again"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42537					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6a9	c5					.byte (("Again"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=92					WordFlags ::= NN+CO+IM+UF	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>a6aa	5c					.byte WordFlags	;wh_Flags
>a6ab	03					.byte 3	;wh_CodeLength
>a6ac	11					  .byte LinkDisplacement	; offset to previous nt
=$a6ad					XtPtr1 ::= *
=42537					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6ad	20 3f b4	jsr $b43f	Again:		jsr underflow_2
.a6b0	a9 9c		lda #$9c			lda #<Begin	; check pairing
.a6b2	20 15 b2	jsr $b215			jsr QPairCtlA
.a6b5	4c 4c cd	jmp $cd4c			jmp Jmp_Comma	; Compile a jmp abs.
=11					CodeLen	.var *-XtPtr1
=$a6b8					Here1 = *	; remember here
>a6ab	0b					.byte CodeLen	;patch wh_CodeLength
>a6b8	55 6e 74 69 6c			Name0:	.text "Until"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42557					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6bd	85					.byte (("Until"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>a6be	1c					.byte WordFlags	;wh_Flags
>a6bf	03					.byte 3	;wh_CodeLength
>a6c0	14					  .byte LinkDisplacement	; offset to previous nt
=$a6c1					XtPtr1 ::= *
=42557					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6c1	a9 9c		lda #$9c	Until:		lda #<Begin		; check pairing
.a6c3	20 15 b2	jsr $b215			jsr QPairCtlA
.a6c6	4c fd a6	jmp $a6fd			jmp ZBranch_Comma	; The address to loop back to is on the stack.
=8					CodeLen	.var *-XtPtr1
=$a6c9					Here1 = *	; remember here
>a6bf	08					.byte CodeLen	;patch wh_CodeLength
>a6c9	57 68 69 6c 65			Name0:	.text "While"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42574					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6ce	a5					.byte (("While"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>a6cf	1c					.byte WordFlags	;wh_Flags
>a6d0	03					.byte 3	;wh_CodeLength
>a6d1	11					  .byte LinkDisplacement	; offset to previous nt
=$a6d2					XtPtr1 ::= *
=42574					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6d2	a9 9c		lda #$9c	While:		lda #<Begin	; check pairing
.a6d4	20 15 b2	jsr $b215			jsr QPairCtlA
.a6d7	20 40 a6	jsr $a640			jsr If3		; Compile a 0branch & jmp, push addr of addr
.a6da	20 8b cf	jsr $cf8b			jsr Swap	; Swap the two addresses on the stack.
.a6dd	a9 9c		lda #$9c			lda #<Begin	; pairing marker
.a6df	4c f0 b7	jmp $b7f0			jmp PushZA
=16					CodeLen	.var *-XtPtr1
=$a6e2					Here1 = *	; remember here
>a6d0	10					.byte CodeLen	;patch wh_CodeLength
>a6e2	52 65 70 65 61 74		Name0:	.text "Repeat"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=42600					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6e8	86					.byte (("Repeat"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>a6e9	1c					.byte WordFlags	;wh_Flags
>a6ea	03					.byte 3	;wh_CodeLength
>a6eb	1a					  .byte LinkDisplacement	; offset to previous nt
=$a6ec					XtPtr1 ::= *
=42600					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6ec	a9 9c		lda #$9c	Repeat:		lda #<Begin	; check pairing
.a6ee	20 15 b2	jsr $b215			jsr QPairCtlA
.a6f1	20 4c cd	jsr $cd4c			jsr Jmp_Comma	; compile the jmp back
.a6f4	20 40 ca	jsr $ca40			jsr Here	; patch the WHILE jmp operand
.a6f7	20 8b cf	jsr $cf8b			jsr Swap
.a6fa	4c c9 ce	jmp $cec9			jmp Store
=17					CodeLen	.var *-XtPtr1
=$a6fd					Here1 = *	; remember here
>a6ea	11					.byte CodeLen	;patch wh_CodeLength
.a6fd					ZBranch_Comma:
.a6fd	a9 e8		lda #$e8			lda #$e8		; compile inx; inx
.a6ff	a8		tay				tay
.a700	20 16 cd	jsr $cd16			jsr Comma_YA
.a703	a9 b5		lda #$b5			lda #$b5		; compile lda DStack-2,x
.a705	a0 22		ldy #$22			ldy #DStack-2
.a707	20 16 cd	jsr $cd16			jsr Comma_YA
.a70a	a9 15		lda #$15			lda #$15		; compile ora DStack-1,x
.a70c	a0 23		ldy #$23			ldy #DStack-1
.a70e	20 16 cd	jsr $cd16			jsr Comma_YA
.a711	a9 f0		lda #$f0			lda #$f0		; BEQ
.a713	d0 0e		bne $a723			bne Branch_CommaA
>a715	42 72 61 6e 63 68 2c		Name0:	.text "Branch,"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=42652					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a71c	87					.byte (("Branch,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>a71d	10					.byte WordFlags	;wh_Flags
>a71e	03					.byte 3	;wh_CodeLength
>a71f	34					  .byte LinkDisplacement	; offset to previous nt
=$a720					XtPtr1 ::= *
=42652					WordListLink ::= Nt0 ; remember the nt of this word for later
.a720	20 e7 b3	jsr $b3e7			jsr PopA		; pop opcode to A
.a723					Branch_CommaA:
.a723	48		pha				pha			; save branch opcode
.a724	38		sec				sec			; AY= displacement+2
.a725	b5 24		lda $24,x			lda DStack+0,x
.a727	e5 00		sbc $00				sbc cp+0
.a729	a8		tay				tay
.a72a	b5 25		lda $25,x			lda DStack+1,x
.a72c	e5 01		sbc $01				sbc cp+1
.a72e	c9 ff		cmp #$ff			cmp #$ff		; offset maybe in range?
.a730	f0 0b		beq $a73d			beq _rev
.a732	68		pla		_2byte:		pla			; restore branch opcode
.a733	49 20		eor #$20			eor #$20		; reverse branch sense
.a735	a0 03		ldy #$03			ldy #3			; compile Bcc *+5
.a737	20 16 cd	jsr $cd16			jsr Comma_YA
.a73a	4c 4c cd	jmp $cd4c			jmp Jmp_Comma		; compile JMP abs
.a73d	c0 82		cpy #$82	_rev:		cpy #$80+2		; offset in range?
.a73f	90 f1		bcc $a732			bcc _2byte
.a741	e8		inx		_1byte:		inx			; Drop address
.a742	e8		inx				inx
.a743	88		dey				dey			; fix displacement
.a744	88		dey				dey
.a745	68		pla				pla			; restore branch opcode
.a746	4c 16 cd	jmp $cd16			jmp Comma_YA		; compile Bcc
>a749	57 6f 72 64			Name0:	.text "Word"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42701					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a74d	84					.byte (("Word"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>a74e	50					.byte WordFlags	;wh_Flags
>a74f	03					.byte 3	;wh_CodeLength
>a750	31					  .byte LinkDisplacement	; offset to previous nt
=$a751					XtPtr1 ::= *
=42701					WordListLink ::= Nt0 ; remember the nt of this word for later
.a751					Word:
.a751	20 2b b4	jsr $b42b			jsr underflow_1
.a754	a4 08		ldy $08				ldy toin+0		; >IN
.a756	c4 06		cpy $06		_DelimLoop:	cpy ciblen+0		; quit if end of input
.a758	f0 09		beq $a763			beq _found_char
.a75a	b1 04		lda ($04),y			lda (cib),y
.a75c	d5 24		cmp $24,x			cmp DStack+0,x		; ASCII of delimiter
.a75e	d0 03		bne $a763			bne _found_char
.a760	c8		iny				iny
.a761	d0 f3		bne $a756			bne _DelimLoop
.a763					_found_char:
.a763	84 08		sty $08				sty toin+0		; Save index of where word starts
.a765	20 c7 ba	jsr $bac7			jsr Parse		; The real work is done by parse
.a768	20 e7 b3	jsr $b3e7			jsr PopA		; pop u
.a76b	85 16		sta $16				sta tmp2+0
.a76d	20 0d b4	jsr $b40d			jsr PopTmp1		; pop addr
.a770	20 40 ca	jsr $ca40			jsr Here		; Return caddr
.a773	a5 16		lda $16				lda tmp2+0
.a775	a0 00		ldy #$00			ldy #0			; Save length of string
.a777	f0 03		beq $a77c			beq _CopyStart
.a779	b1 14		lda ($14),y	_CopyLoop:	lda (tmp1),y
.a77b	c8		iny				iny
.a77c	20 ff cc	jsr $ccff	_CopyStart:	jsr C_Comma_A
.a77f	c4 16		cpy $16				cpy tmp2+0
.a781	90 f6		bcc $a779			bcc _CopyLoop
=50					CodeLen	.var *-XtPtr1
=$a783					Here1 = *	; remember here
>a74f	32					.byte CodeLen	;patch wh_CodeLength
.a783	60		rts				rts
>a784	28				Name0:	.text "("	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=42757					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a785	01					.byte (("("[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>a786	18					.byte WordFlags	;wh_Flags
>a787	03					.byte 3	;wh_CodeLength
>a788	38					  .byte LinkDisplacement	; offset to previous nt
=$a789					XtPtr1 ::= *
=42757					WordListLink ::= Nt0 ; remember the nt of this word for later
.a789	a9 29		lda #$29	Paren:		lda #')'		; separator
.a78b	20 ca ba	jsr $baca			jsr Parse_A		; Call parse.
.a78e	4c 4e c5	jmp $c54e			jmp Two_drop		; 2Drop the result.
=8					CodeLen	.var *-XtPtr1
=$a791					Here1 = *	; remember here
>a787	08					.byte CodeLen	;patch wh_CodeLength
>a791	2e 28				Name0:	.text ".("	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=42771					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a793	02					.byte ((".("[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a794	18					.byte WordFlags	;wh_Flags
>a795	03					.byte 3	;wh_CodeLength
>a796	0e					  .byte LinkDisplacement	; offset to previous nt
=$a797					XtPtr1 ::= *
=42771					WordListLink ::= Nt0 ; remember the nt of this word for later
.a797	a9 29		lda #$29	Dot_paren:	lda #')'
.a799	20 ca ba	jsr $baca			jsr Parse_A
.a79c	4c f0 cd	jmp $cdf0			jmp Type
=8					CodeLen	.var *-XtPtr1
=$a79f					Here1 = *	; remember here
>a795	08					.byte CodeLen	;patch wh_CodeLength
>a79f	48 61 73 68			Name0:	.text "Hash"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42787					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a7a3	04					.byte (("Hash"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>a7a4	10					.byte WordFlags	;wh_Flags
>a7a5	03					.byte 3	;wh_CodeLength
>a7a6	10					  .byte LinkDisplacement	; offset to previous nt
=$a7a7					XtPtr1 ::= *
=42787					WordListLink ::= Nt0 ; remember the nt of this word for later
.a7a7	20 e7 b3	jsr $b3e7	Hash:		jsr PopA		; save length
.a7aa	85 16		sta $16				sta tmp2+0
.a7ac	b5 24		lda $24,x			lda DStack+0,x		; copy addr
.a7ae	b4 25		ldy $25,x			ldy DStack+1,x
.a7b0	85 14		sta $14				sta tmp1+0
.a7b2	84 15		sty $15				sty tmp1+1
.a7b4	a9 b3		lda #$b3			lda #$b3		; init hash
.a7b6	95 24		sta $24,x			sta DStack+0,x
.a7b8	95 25		sta $25,x			sta DStack+1,x
.a7ba	a0 00		ldy #$00			ldy #0			; for each char
.a7bc	f0 15		beq $a7d3			beq _next
.a7be	b1 14		lda ($14),y	_loop:		lda (tmp1),y		;   get char
.a7c0	c9 61		cmp #$61			cmp #'a'		;   uppercase
.a7c2	90 06		bcc $a7ca			bcc _3
.a7c4	c9 7b		cmp #$7b			cmp #'z'+1
.a7c6	b0 02		bcs $a7ca			bcs _3
.a7c8	29 df		and #$df			and #$df
.a7ca	16 24		asl $24,x	_3:		asl DStack+0,x		;   add to hash
.a7cc	36 25		rol $25,x			rol DStack+1,x
.a7ce	75 24		adc $24,x			adc DStack+0,x
.a7d0	95 24		sta $24,x			sta DStack+0,x
.a7d2	c8		iny				iny
.a7d3	c4 16		cpy $16		_Next:		cpy tmp2+0
.a7d5	90 e7		bcc $a7be			bcc _loop
=48					CodeLen	.var *-XtPtr1
=$a7d7					Here1 = *	; remember here
>a7a5	30					.byte CodeLen	;patch wh_CodeLength
.a7d7	60		rts				rts
>a7d8	45 6e 76 69 72 6f 6e 6d		Name0:	.text "Environment?"	;  name of word as a string, ending at wh_NameLastChar
>a7e0	65 6e 74 3f
=12					NameLength = *-Name0
=42852					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a7e4	ec					.byte (("Environment?"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=65					LinkDisplacement = Nt0-WordListLink
>a7e5	10					.byte WordFlags	;wh_Flags
>a7e6	03					.byte 3	;wh_CodeLength
>a7e7	41					  .byte LinkDisplacement	; offset to previous nt
=$a7e8					XtPtr1 ::= *
=42852					WordListLink ::= Nt0 ; remember the nt of this word for later
.a7e8					Environment_Q:
.a7e8	20 a7 a7	jsr $a7a7			jsr Hash		; ( hash )
.a7eb	a0 00		ldy #$00			ldy #0			; Y= table index
.a7ed	f0 0a		beq $a7f9			beq _entry_test
.a7ef	98		tya		_entry_next:	tya
.a7f0	c0 34		cpy #$34			cpy #_table_dbl		; if double
.a7f2	90 02		bcc $a7f6			bcc +
.a7f4	69 01		adc #$01			adc #6-4-1		;   skip double
.a7f6	69 04		adc #$04	+		adc #4			;   skip single
.a7f8	a8		tay		_3:		tay
.a7f9	b9 2d a8	lda $a82d,y	_entry_test:	lda _Table+0,y		; match?
.a7fc	f0 28		beq $a826			beq _notfound
.a7fe	d5 24		cmp $24,x			cmp DStack+0,x
.a800	d0 ed		bne $a7ef			bne _entry_next
.a802	b9 2e a8	lda $a82e,y			lda _Table+1,y
.a805	d5 25		cmp $25,x			cmp DStack+1,x
.a807	d0 e6		bne $a7ef			bne _entry_next
.a809	b9 2f a8	lda $a82f,y			lda _Table+2,y
.a80c	95 24		sta $24,x			sta DStack+0,x
.a80e	b9 30 a8	lda $a830,y			lda _Table+3,y
.a811	95 25		sta $25,x			sta DStack+1,x
.a813	c0 34		cpy #$34			cpy #_table_dbl		; single or double data?
.a815	90 0c		bcc $a823			bcc _single
.a817	ca		dex				dex			;  push 2nd cell
.a818	ca		dex				dex
.a819	b9 31 a8	lda $a831,y			lda _Table+4,y
.a81c	95 24		sta $24,x			sta DStack+0,x
.a81e	b9 32 a8	lda $a832,y			lda _Table+5,y
.a821	95 25		sta $25,x			sta DStack+1,x
.a823					_single:
.a823	4c d0 b7	jmp $b7d0			jmp True		; return True
.a826					_notfound:
.a826	a9 00		lda #$00			lda #0			; return 0
.a828	95 24		sta $24,x			sta DStack+0,x
.a82a	95 25		sta $25,x			sta DStack+1,x
.a82c	60		rts				rts
=69					CodeLen	.var *-XtPtr1
=$a82d					Here1 = *	; remember here
>a7e6	45					.byte CodeLen	;patch wh_CodeLength
.a82d					_Table:
>a82d	5e e6 ff 7f				.word $e65e,$7fff	; "/COUNTED-STRING"
>a831	be 79 ff 00				.word $79BE,$ff		; "/HOLD"
>a835	b9 3c 54 00				.word $3cb9,padoffset	; "/PAD"
>a839	8b 81 08 00				.word $818b,8		; "ADDRESS-UNIT-BITS"
>a83d	57 fc 00 00				.word $fc57,0		; "FLOORED"	we have symmetric)
>a841	4f fb ff 00				.word $fb4f,$ff		; "MAX-CHAR"
>a845	56 7f ff 7f				.word $7f56,$7fff	; "MAX-N"
>a849	5d 7f ff ff				.word $7f5d,$ffff	; "MAX-U"
>a84d	38 ce 80 00				.word $ce38,$80		; "RETURN-STACK-CELLS"
>a851	f2 c0 14 00				.word $c0f2,DStack0/2	; "STACK-CELLS"
>a855	36 e3 09 00				.word $e336,9		; "WORDLISTS"
>a859	4a f2 ff ff				.word $f24a,$ffff	; "FLOATING"		flag	no	   floating-point word set present
>a85d	01 99 0a 00				.word $9901,FDim	; "FLOATING-STACK"	n	yes	   If n = zero, floating-point numbers are
=52					_table_dbl = *-_Table	; These return a double-cell number
>a861	4c 7f ff ff ff 7f			.word $7f4c,$ffff,$7fff	; "MAX-D"
>a867	fe fe ff ff ff ff			.word $fefe,$ffff,$ffff	; "MAX-UD"
>a86d	00					.byte 0		; end of list
>a86e	44 75 6d 70			Name0:	.text "Dump"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42994					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a872	04					.byte (("Dump"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=142					LinkDisplacement = Nt0-WordListLink
>a873	50					.byte WordFlags	;wh_Flags
>a874	03					.byte 3	;wh_CodeLength
>a875	8e					  .byte LinkDisplacement	; offset to previous nt
=$a876					XtPtr1 ::= *
=42994					WordListLink ::= Nt0 ; remember the nt of this word for later
.a876					Dump:
.a876	20 3f b4	jsr $b43f			jsr underflow_2
.a879	ca		dex				dex			; alloc work area
.a87a	ca		dex				dex
.a87b					_row:
.a87b	20 7c ab	jsr $ab7c			jsr CR
.a87e	b5 29		lda $29,x			lda DStack+5,x		; print address number
.a880	20 fe a8	jsr $a8fe			jsr C_Dot_Hex_A
.a883	b5 28		lda $28,x			lda DStack+4,x
.a885	20 fe a8	jsr $a8fe			jsr C_Dot_Hex_A
.a888	20 e4 cd	jsr $cde4			jsr Space
.a88b	20 e4 cd	jsr $cde4			jsr Space
.a88e	a9 00		lda #$00			lda #0
.a890	95 24		sta $24,x			sta DStack+0,x
.a892					_loop:
.a892	b5 26		lda $26,x			lda DStack+2,x
.a894	15 27		ora $27,x			ora DStack+3,x
.a896	f0 36		beq $a8ce			beq _all_printed
.a898	a1 28		lda ($28,x)			lda (DStack+4,x)
.a89a	20 fe a8	jsr $a8fe			jsr C_Dot_Hex_A
.a89d	20 e4 cd	jsr $cde4			jsr Space
.a8a0	a1 28		lda ($28,x)			lda (DStack+4,x)
.a8a2	20 24 a9	jsr $a924			jsr is_printable
.a8a5	b0 02		bcs $a8a9			bcs _printable
.a8a7	a9 2e		lda #$2e			lda #'.'		 ; Print dot if not printable
.a8a9					_printable:
.a8a9	b4 24		ldy $24,x			ldy DStack+0,x
.a8ab	91 00		sta ($00),y			sta (cp),y
.a8ad	c0 07		cpy #$07			cpy #7
.a8af	d0 03		bne $a8b4			bne +
.a8b1	20 e4 cd	jsr $cde4			jsr Space
.a8b4					+
.a8b4	f6 28		inc $28,x			inc DStack+4,x
.a8b6	d0 02		bne $a8ba			bne +
.a8b8	f6 29		inc $29,x			inc DStack+5,x
.a8ba					+
.a8ba	20 59 ca	jsr $ca59			jsr NOS_One_Minus	; loop counter
.a8bd	f6 24		inc $24,x			inc DStack+0,x
.a8bf	b5 24		lda $24,x			lda DStack+0,x
.a8c1	c9 10		cmp #$10			cmp #16
.a8c3	90 cd		bcc $a892			bcc _loop		; next byte
.a8c5	20 e4 cd	jsr $cde4			jsr Space
.a8c8	20 dd a8	jsr $a8dd			jsr dump_print_ascii
.a8cb	4c 7b a8	jmp $a87b			jmp _row		; new row
.a8ce					_all_printed:
.a8ce	b5 24		lda $24,x			lda DStack+0,x
.a8d0	f0 06		beq $a8d8			beq _done
.a8d2	20 e4 cd	jsr $cde4			jsr Space
.a8d5	20 dd a8	jsr $a8dd			jsr dump_print_ascii
.a8d8					_done:
.a8d8	e8		inx				inx			; drop work area
.a8d9	e8		inx				inx
.a8da	4c 4e c5	jmp $c54e			jmp Two_drop		; one byte less than 4x INX
.a8dd					dump_print_ascii:
.a8dd	a0 00		ldy #$00			ldy #0
.a8df					_loop:
.a8df	b1 00		lda ($00),y			lda (cp),y
.a8e1	20 d8 cd	jsr $cdd8			jsr Emit_A
.a8e4	c8		iny				iny
.a8e5	c0 08		cpy #$08			cpy #8
.a8e7	d0 03		bne $a8ec			bne +
.a8e9	20 e4 cd	jsr $cde4			jsr Space
.a8ec					+
.a8ec	98		tya				tya
.a8ed	d5 24		cmp $24,x			cmp DStack+0,x
.a8ef	90 ee		bcc $a8df			bcc _loop
.a8f1	60		rts				rts
=124					CodeLen	.var *-XtPtr1
=$a8f2					Here1 = *	; remember here
>a874	7c					.byte CodeLen	;patch wh_CodeLength
>a8f2	43 2e 48 65 78			Name0:	.text "C.Hex"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=43127					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a8f7	05					.byte (("C.Hex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=133					LinkDisplacement = Nt0-WordListLink
>a8f8	10					.byte WordFlags	;wh_Flags
>a8f9	03					.byte 3	;wh_CodeLength
>a8fa	85					  .byte LinkDisplacement	; offset to previous nt
=$a8fb					XtPtr1 ::= *
=43127					WordListLink ::= Nt0 ; remember the nt of this word for later
.a8fb	20 e7 b3	jsr $b3e7	C_Dot_Hex:	jsr PopA
.a8fe	48		pha		C_Dot_Hex_A:	pha
.a8ff	4a		lsr a				lsr		; convert high nibble first
.a900	4a		lsr a				lsr
.a901	4a		lsr a				lsr
.a902	4a		lsr a				lsr
.a903	20 07 a9	jsr $a907			jsr _nibble_to_ascii
.a906	68		pla				pla
.a907					_nibble_to_ascii:
.a907	29 0f		and #$0f			and #$0F	; only use lower nibble
.a909	c9 0a		cmp #$0a			cmp #9+1
.a90b	90 02		bcc $a90f			bcc +
.a90d	69 06		adc #$06			adc #6
.a90f	69 30		adc #$30	+		adc #'0'
.a911	4c d8 cd	jmp $cdd8			jmp Emit_A
=25					CodeLen	.var *-XtPtr1
=$a914					Here1 = *	; remember here
>a8f9	19					.byte CodeLen	;patch wh_CodeLength
>a914	2e 48 65 78			Name0:	.text ".Hex"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=43160					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a918	04					.byte ((".Hex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>a919	10					.byte WordFlags	;wh_Flags
>a91a	03					.byte 3	;wh_CodeLength
>a91b	21					  .byte LinkDisplacement	; offset to previous nt
=$a91c					XtPtr1 ::= *
=43160					WordListLink ::= Nt0 ; remember the nt of this word for later
.a91c	b5 25		lda $25,x	Dot_Hex:	lda DStack+1,x	; do hi byte
.a91e	20 fe a8	jsr $a8fe			jsr C_Dot_Hex_A
.a921	4c fb a8	jmp $a8fb			jmp C_Dot_Hex	; do lo byte
=8					CodeLen	.var *-XtPtr1
=$a924					Here1 = *	; remember here
>a91a	08					.byte CodeLen	;patch wh_CodeLength
.a924					is_printable:
.a924	c9 20		cmp #$20	                cmp #AscSP              ; $20
.a926	90 07		bcc $a92f	                bcc _done
.a928	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.a92a	b0 02		bcs $a92e	                bcs _failed
.a92c	38		sec		                sec
.a92d	60		rts		                rts
.a92e	18		clc		_failed:	clc
.a92f	60		rts		_done:		rts
>a930	2e 53				Name0:	.text ".S"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=43186					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a932	62					.byte ((".S"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>a933	10					.byte WordFlags	;wh_Flags
>a934	03					.byte 3	;wh_CodeLength
>a935	1a					  .byte LinkDisplacement	; offset to previous nt
=$a936					XtPtr1 ::= *
=43186					WordListLink ::= Nt0 ; remember the nt of this word for later
.a936					Dot_s:
.a936	a9 3c		lda #$3c			lda #'<'
.a938	20 d8 cd	jsr $cdd8			jsr Emit_A
.a93b	20 48 c2	jsr $c248			jsr Depth	; ( -- u )
.a93e	20 31 cc	jsr $cc31			jsr print_u
.a941	a9 3e		lda #$3e			lda #'>'
.a943	20 d8 cd	jsr $cdd8			jsr Emit_A
.a946	20 e4 cd	jsr $cde4			jsr Space
.a949	a0 28		ldy #$28			ldy #DStack0		; for each cell on the stack
.a94b	88		dey		_loop:		dey
.a94c	88		dey				dey
.a94d	86 14		stx $14				stx tmp1
.a94f	c4 14		cpy $14				cpy tmp1
.a951	90 15		bcc $a968			bcc _done
.a953	98		tya				tya			; save index
.a954	48		pha				pha
.a955	ca		dex				dex			; push stack[index]
.a956	ca		dex				dex
.a957	b9 24 00	lda $0024,y			lda DStack+0,y
.a95a	95 24		sta $24,x			sta DStack+0,x
.a95c	b9 25 00	lda $0025,y			lda DStack+1,y
.a95f	95 25		sta $25,x			sta DStack+1,x
.a961	20 e7 cb	jsr $cbe7			jsr Dot
.a964	68		pla				pla			; restore index
.a965	a8		tay				tay
.a966	d0 e3		bne $a94b			bne _loop
.a968					_done:
=50					CodeLen	.var *-XtPtr1
=$a968					Here1 = *	; remember here
>a934	32					.byte CodeLen	;patch wh_CodeLength
.a968	60		rts				rts
>a969	43 6f 6d 70 61 72 65		Name0:	.text "Compare"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=43248					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a970	a7					.byte (("Compare"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=62					LinkDisplacement = Nt0-WordListLink
>a971	50					.byte WordFlags	;wh_Flags
>a972	03					.byte 3	;wh_CodeLength
>a973	3e					  .byte LinkDisplacement	; offset to previous nt
=$a974					XtPtr1 ::= *
=43248					WordListLink ::= Nt0 ; remember the nt of this word for later
.a974					Compare:
.a974	20 49 b4	jsr $b449			jsr underflow_4
.a977	b5 24		lda $24,x			lda DStack+0,x		; tmp3+1= u2.lo
.a979	85 19		sta $19				sta tmp3+1
.a97b	b5 26		lda $26,x			lda DStack+2,x		; tmp2= addr2
.a97d	b4 27		ldy $27,x			ldy DStack+3,x
.a97f	85 16		sta $16				sta tmp2+0
.a981	84 17		sty $17				sty tmp2+1
.a983	b5 28		lda $28,x			lda DStack+4,x		; tmp3+0= u1.lo
.a985	85 18		sta $18				sta tmp3+0
.a987	b5 2a		lda $2a,x			lda DStack+6,x		; tmp1= addr1
.a989	b4 2b		ldy $2b,x			ldy DStack+7,x
.a98b	85 14		sta $14				sta tmp1+0
.a98d	84 15		sty $15				sty tmp1+1
.a98f	a0 00		ldy #$00			ldy #0		; for each char
.a991					_loop:
.a991	c4 18		cpy $18				cpy tmp3+0	; string1 empty?
.a993	f0 13		beq $a9a8			beq _str1
.a995					_L1:
.a995	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a997	f0 27		beq $a9c0			beq _str2
.a999					_L2:
.a999	b1 14		lda ($14),y			lda (tmp1),y	; Are they different?
.a99b	d1 16		cmp ($16),y			cmp (tmp2),y
.a99d	d0 19		bne $a9b8			bne _neq
.a99f	c8		iny				iny		; to next char
.a9a0	d0 ef		bne $a991			bne _loop
.a9a2	e6 15		inc $15				inc tmp1+1	; to next page
.a9a4	e6 17		inc $17				inc tmp2+1
.a9a6	d0 e9		bne $a991			bne _loop
.a9a8	d6 29		dec $29,x	_str1:		dec DStack+5,x	; string1 really empty?
.a9aa	10 e9		bpl $a995			bpl _L1
.a9ac	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a9ae	d0 0a		bne $a9ba			bne _less
.a9b0	b5 25		lda $25,x			lda DStack+1,x
.a9b2	d0 06		bne $a9ba			bne _less
.a9b4	a9 00		lda #$00	_equal:		lda #0		; Return 0
.a9b6	f0 0e		beq $a9c6			beq _gt2
.a9b8	b0 0a		bcs $a9c4	_neq:		bcs _greater
.a9ba	a9 ff		lda #$ff	_less:		lda #$FF	; Return -1
.a9bc	95 2a		sta $2a,x			sta DStack+6,x
.a9be	d0 0a		bne $a9ca			bne _done
.a9c0	d6 25		dec $25,x	_str2:		dec DStack+1,x	; is string2 empty?
.a9c2	10 d5		bpl $a999			bpl _L2
.a9c4	a9 01		lda #$01	_greater:	lda #1		; Return 1
.a9c6	95 2a		sta $2a,x	_gt2:		sta DStack+6,x
.a9c8	a9 00		lda #$00			lda #0
.a9ca	95 2b		sta $2b,x	_done:		sta DStack+7,x
.a9cc	8a		txa				txa		; Remove all but the result from the stack.
.a9cd	18		clc				clc
.a9ce	69 06		adc #$06			adc #6
.a9d0	aa		tax				tax
=93					CodeLen	.var *-XtPtr1
=$a9d1					Here1 = *	; remember here
>a972	5d					.byte CodeLen	;patch wh_CodeLength
.a9d1	60		rts				rts
>a9d2	53 65 61 72 63 68		Name0:	.text "Search"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=43352					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a9d8	06					.byte (("Search"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=104					LinkDisplacement = Nt0-WordListLink
>a9d9	50					.byte WordFlags	;wh_Flags
>a9da	03					.byte 3	;wh_CodeLength
>a9db	68					  .byte LinkDisplacement	; offset to previous nt
=$a9dc					XtPtr1 ::= *
=43352					WordListLink ::= Nt0 ; remember the nt of this word for later
.a9dc					Search:
.a9dc	20 49 b4	jsr $b449			jsr underflow_4
.a9df	b5 24		lda $24,x			lda DStack+0,x
.a9e1	15 25		ora $25,x			ora DStack+1,x
.a9e3	d0 09		bne $a9ee			bne _start_search
.a9e5	e8		inx				inx		; Drop u2
.a9e6	e8		inx				inx
.a9e7	a9 ff		lda #$ff			lda #$FF	; overwrite addr2 with a true flag
.a9e9	95 24		sta $24,x			sta DStack+0,x
.a9eb	95 25		sta $25,x			sta DStack+1,x
.a9ed	60		rts				rts
.a9ee					_start_search:
.a9ee	20 fe b7	jsr $b7fe			jsr Zero
.a9f1					_search_loop:
.a9f1	18		clc				clc
.a9f2	b5 24		lda $24,x			lda DStack+0,x
.a9f4	75 26		adc $26,x			adc DStack+2,x
.a9f6	85 14		sta $14				sta tmp1+0
.a9f8	b5 25		lda $25,x			lda DStack+1,x
.a9fa	75 27		adc $27,x			adc DStack+3,x
.a9fc	85 15		sta $15				sta tmp1+1
.a9fe	d5 2b		cmp $2b,x			cmp DStack+7,x
.aa00	90 13		bcc $aa15			bcc _init_comparison ; Obviously less
.aa02	d0 06		bne $aa0a			bne _not_found
.aa04	b5 2a		lda $2a,x			lda DStack+6,x
.aa06	c5 14		cmp $14				cmp tmp1
.aa08	b0 0b		bcs $aa15			bcs _init_comparison
.aa0a					_not_found:
.aa0a	e8		inx				inx		; Remove offset
.aa0b	e8		inx				inx
.aa0c	e8		inx				inx		; Remove u2
.aa0d	e8		inx				inx
.aa0e	a9 00		lda #$00			lda #0
.aa10	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a false flag
.aa12	95 25		sta $25,x			sta DStack+1,x
.aa14	60		rts				rts
.aa15					_init_comparison:
.aa15	18		clc				clc
.aa16	b5 2c		lda $2c,x			lda DStack+8,x
.aa18	75 24		adc $24,x			adc DStack+0,x
.aa1a	85 14		sta $14				sta tmp1
.aa1c	b5 2d		lda $2d,x			lda DStack+9,x
.aa1e	75 25		adc $25,x			adc DStack+1,x
.aa20	85 15		sta $15				sta tmp1+1
.aa22	b5 28		lda $28,x			lda DStack+4,x
.aa24	85 16		sta $16				sta tmp2
.aa26	b5 29		lda $29,x			lda DStack+5,x
.aa28	85 17		sta $17				sta tmp2+1
.aa2a	b5 26		lda $26,x			lda DStack+2,x
.aa2c	85 18		sta $18				sta tmp3+0
.aa2e	b5 27		lda $27,x			lda DStack+3,x
.aa30	85 19		sta $19				sta tmp3+1
.aa32					_comparison_loop:
.aa32	a0 00		ldy #$00			ldy #0
.aa34	b1 14		lda ($14),y			lda (tmp1),y
.aa36	d1 16		cmp ($16),y			cmp (tmp2),y
.aa38	f0 06		beq $aa40			beq _letters_match
.aa3a	20 72 ca	jsr $ca72			jsr One_plus
.aa3d	4c f1 a9	jmp $a9f1			jmp _search_loop
.aa40					_letters_match:
.aa40	e6 14		inc $14				inc tmp1
.aa42	d0 02		bne $aa46			bne +
.aa44	e6 15		inc $15				inc tmp1+1
.aa46					+
.aa46	e6 16		inc $16				inc tmp2
.aa48	d0 02		bne $aa4c			bne +
.aa4a	e6 17		inc $17				inc tmp2+1
.aa4c					+
.aa4c	a5 18		lda $18				lda tmp3
.aa4e	d0 02		bne $aa52			bne +
.aa50	c6 19		dec $19				dec tmp3+1
.aa52					+
.aa52	c6 18		dec $18				dec tmp3
.aa54	a5 18		lda $18				lda tmp3
.aa56	05 19		ora $19				ora tmp3+1
.aa58	d0 d8		bne $aa32			bne _comparison_loop ; Check the next letter
.aa5a	18		clc				clc
.aa5b	b5 24		lda $24,x			lda DStack+0,x
.aa5d	75 2c		adc $2c,x			adc DStack+8,x
.aa5f	95 2c		sta $2c,x			sta DStack+8,x
.aa61	b5 25		lda $25,x			lda DStack+1,x
.aa63	75 2d		adc $2d,x			adc DStack+9,x
.aa65	95 2d		sta $2d,x			sta DStack+9,x
.aa67	38		sec				sec
.aa68	b5 2a		lda $2a,x			lda DStack+6,x
.aa6a	f5 24		sbc $24,x			sbc DStack+0,x
.aa6c	95 2a		sta $2a,x			sta DStack+6,x
.aa6e	b5 2b		lda $2b,x			lda DStack+7,x
.aa70	f5 25		sbc $25,x			sbc DStack+1,x
.aa72	95 2b		sta $2b,x			sta DStack+7,x
.aa74	e8		inx				inx		; drop offset
.aa75	e8		inx				inx
.aa76	e8		inx				inx		; drop u2
.aa77	e8		inx				inx
.aa78	a9 ff		lda #$ff			lda #$FF
.aa7a	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a true flag.
.aa7c	95 25		sta $25,x			sta DStack+1,x
=162					CodeLen	.var *-XtPtr1
=$aa7e					Here1 = *	; remember here
>a9da	a2					.byte CodeLen	;patch wh_CodeLength
.aa7e	60		rts				rts
>aa7f	4d 61 72 6b 65 72		Name0:	.text "Marker"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=43525					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aa85	46					.byte (("Marker"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=173					LinkDisplacement = Nt0-WordListLink
>aa86	18					.byte WordFlags	;wh_Flags
>aa87	03					.byte 3	;wh_CodeLength
>aa88	ad					  .byte LinkDisplacement	; offset to previous nt
=$aa89					XtPtr1 ::= *
=43525					WordListLink ::= Nt0 ; remember the nt of this word for later
.aa89					Marker:
.aa89	20 40 ca	jsr $ca40			jsr Here		; Save original CP, which
.aa8c	20 21 c1	jsr $c121			jsr Header_Build	; compile a word header, but don't link into wordlist
.aa8f	a0 aa		ldy #$aa			ldy #>_runtime		; compile JSR _runtime
.aa91	a9 a9		lda #$a9			lda #<_runtime
.aa93	20 39 cd	jsr $cd39			jsr Jsr_Comma_YA
.aa96	20 13 cd	jsr $cd13			jsr Comma		; Append original CP
.aa99	a0 00		ldy #$00			ldy #0			; Start at CURRENT
.aa9b	b9 10 03	lda $0310,y	_loop:		lda CurrentV,y
.aa9e	20 ff cc	jsr $ccff			jsr C_Comma_A
.aaa1	c8		iny				iny
.aaa2	c0 24		cpy #$24			cpy #MarkEnd-CurrentV	; One past the end of the search order.
.aaa4	90 f5		bcc $aa9b			bcc _loop
.aaa6	4c 16 c1	jmp $c116			jmp Header_Link		; link built header into current dictionary
=32					CodeLen	.var *-XtPtr1
=$aaa9					Here1 = *	; remember here
>aa87	20					.byte CodeLen	;patch wh_CodeLength
.aaa9					_runtime:
.aaa9	68		pla				pla		; Pop the RTS address off the stack
.aaaa	85 14		sta $14				sta tmp1+0
.aaac	68		pla				pla
.aaad	85 15		sta $15				sta tmp1+1
.aaaf	a0 01		ldy #$01			ldy #1		; start just aftet JSR _runtime
.aab1	b1 14		lda ($14),y			lda (tmp1),y	; CP was stored first
.aab3	85 00		sta $00				sta cp+0
.aab5	c8		iny				iny
.aab6	b1 14		lda ($14),y			lda (tmp1),y
.aab8	85 01		sta $01				sta cp+1
.aaba	c8		iny				iny
.aabb					_rloop:
.aabb	b1 14		lda ($14),y			lda (tmp1),y
.aabd	99 0d 03	sta $030d,y			sta CurrentV-2-1,y
.aac0	c8		iny				iny
.aac1	c0 27		cpy #$27			cpy #MarkEnd-CurrentV+2+1 ; One past the end of the search order.
.aac3	90 f6		bcc $aabb			bcc _rloop
.aac5	60		rts				rts
>aac6	57 6f 72 64 73			Name0:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=43595					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aacb	65					.byte (("Words"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=70					LinkDisplacement = Nt0-WordListLink
>aacc	10					.byte WordFlags	;wh_Flags
>aacd	03					.byte 3	;wh_CodeLength
>aace	46					  .byte LinkDisplacement	; offset to previous nt
=$aacf					XtPtr1 ::= *
=43595					WordListLink ::= Nt0 ; remember the nt of this word for later
.aacf					Words:
.aacf	a9 ff		lda #$ff			lda #$ff
.aad1	20 f0 b7	jsr $b7f0			jsr PushZA		; Alloc space for line size & wordlist #
.aad4	ca		dex				dex			; Alloc space for a nt
.aad5	ca		dex				dex
.aad6					_wordlist_next:
.aad6	20 7c ab	jsr $ab7c			jsr CR			; start wordlist on new line
.aad9	f6 26		inc $26,x			inc DStack+2,x		; step to next search wordlist
.aadb	b4 26		ldy $26,x			ldy DStack+2,x		; Y= wordlist index
.aadd	cc 2a 03	cpy $032a			cpy Num_OrderV
.aae0	b0 44		bcs $ab26			bcs _wordslist_done	; ran out of search wordlist entries?
.aae2	b9 2b 03	lda $032b,y			lda Search_OrderV,y	; A= SEARCH-ORDER[Y]	Get the current wordlist id
.aae5	0a		asl a				asl			; TOS= WORDLISTS[A]
.aae6	a8		tay				tay
.aae7	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.aaea	95 24		sta $24,x			sta DStack+0,x
.aaec	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.aaef	95 25		sta $25,x			sta DStack+1,x
.aaf1	f0 e3		beq $aad6			beq _wordlist_next	; end of list?
.aaf3					_word_loop:
.aaf3	20 6e cf	jsr $cf6e			jsr Dup			; ( wordlist# nt nt )
.aaf6	20 fe bd	jsr $bdfe			jsr Name_To_String	; ( wordlist# nt addr u )
.aaf9	b5 2b		lda $2b,x			lda DStack+7,x
.aafb	38		sec				sec			; don't forget the space between words
.aafc	75 24		adc $24,x			adc DStack+0,x
.aafe	c9 4e		cmp #$4e			cmp #MAX_LINE_LENGTH-1
.ab00	90 05		bcc $ab07			bcc +
.ab02	20 7c ab	jsr $ab7c			jsr CR
.ab05	b5 24		lda $24,x			lda DStack+0,x		; After going to next line, start
.ab07	95 2b		sta $2b,x	+		sta DStack+7,x
.ab09	20 f0 cd	jsr $cdf0			jsr Type		; ( wordlist# nt )
.ab0c	20 e4 cd	jsr $cde4			jsr Space
.ab0f	b5 24		lda $24,x			lda DStack+0,x
.ab11	85 14		sta $14				sta tmp1+0
.ab13	b5 25		lda $25,x			lda DStack+1,x
.ab15	85 15		sta $15				sta tmp1+1
.ab17	20 9b 82	jsr $829b			jsr LinkNext		; tmp1= next word nt in list
.ab1a	a5 14		lda $14				lda tmp1+0
.ab1c	95 24		sta $24,x			sta DStack+0,x
.ab1e	a5 15		lda $15				lda tmp1+1
.ab20	95 25		sta $25,x			sta DStack+1,x
.ab22	d0 cf		bne $aaf3			bne _word_loop		; end of list?
.ab24	f0 b0		beq $aad6			beq _wordlist_next
.ab26					_wordslist_done:
.ab26	4c 4e c5	jmp $c54e			jmp Two_Drop
=90					CodeLen	.var *-XtPtr1
=$ab29					Here1 = *	; remember here
>aacd	5a					.byte CodeLen	;patch wh_CodeLength
>ab29	57 6f 72 64 53 69 7a 65		Name0:	.text "WordSize"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=43697					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab31	a8					.byte (("WordSize"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=102					LinkDisplacement = Nt0-WordListLink
>ab32	10					.byte WordFlags	;wh_Flags
>ab33	03					.byte 3	;wh_CodeLength
>ab34	66					  .byte LinkDisplacement	; offset to previous nt
=$ab35					XtPtr1 ::= *
=43697					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab35	20 0d b4	jsr $b40d	WordSize:	jsr PopTmp1
.ab38	a0 82		ldy #$82			ldy #Wh_CodeLength
.ab3a	b1 14		lda ($14),y			lda (tmp1),y
.ab3c	4c f0 b7	jmp $b7f0			jmp PushZA
=10					CodeLen	.var *-XtPtr1
=$ab3f					Here1 = *	; remember here
>ab33	0a					.byte CodeLen	;patch wh_CodeLength
>ab3f	41 6c 69 67 6e 65 64		Name0:	.text "Aligned"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=43718					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab46	87					.byte (("Aligned"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>ab47	00					.byte WordFlags	;wh_Flags
>ab48	03					.byte 3	;wh_CodeLength
>ab49	15					  .byte LinkDisplacement	; offset to previous nt
=$ab4a					XtPtr1 ::= *
=43718					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab4a					Aligned:
=0					CodeLen	.var *-XtPtr1
=$ab4a					Here1 = *	; remember here
>ab48	00					.byte CodeLen	;patch wh_CodeLength
.ab4a	60		rts				rts
>ab4b	41 6c 69 67 6e			Name0:	.text "Align"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=43728					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab50	c5					.byte (("Align"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>ab51	00					.byte WordFlags	;wh_Flags
>ab52	03					.byte 3	;wh_CodeLength
>ab53	0a					  .byte LinkDisplacement	; offset to previous nt
=$ab54					XtPtr1 ::= *
=43728					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab54					Align:
=0					CodeLen	.var *-XtPtr1
=$ab54					Here1 = *	; remember here
>ab52	00					.byte CodeLen	;patch wh_CodeLength
.ab54	60		rts				rts
>ab55	4f 75 74 70 75 74		Name0:	.text "Output"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=43739					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab5b	86					.byte (("Output"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>ab5c	10					.byte WordFlags	;wh_Flags
>ab5d	03					.byte 3	;wh_CodeLength
>ab5e	0b					  .byte LinkDisplacement	; offset to previous nt
=$ab5f					XtPtr1 ::= *
=43739					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab5f					xt_output:
.ab5f	a0 03		ldy #$03			ldy #>output
.ab61	a9 06		lda #$06			lda #<output
.ab63	4c c1 b7	jmp $b7c1			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$ab66					Here1 = *	; remember here
>ab5d	07					.byte CodeLen	;patch wh_CodeLength
>ab66	49 6e 70 75 74			Name0:	.text "Input"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=43755					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab6b	85					.byte (("Input"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>ab6c	10					.byte WordFlags	;wh_Flags
>ab6d	03					.byte 3	;wh_CodeLength
>ab6e	10					  .byte LinkDisplacement	; offset to previous nt
=$ab6f					XtPtr1 ::= *
=43755					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab6f	a0 03		ldy #$03	xt_input:	ldy #>input
.ab71	a9 08		lda #$08			lda #<input
.ab73	4c c1 b7	jmp $b7c1			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$ab76					Here1 = *	; remember here
>ab6d	07					.byte CodeLen	;patch wh_CodeLength
>ab76	43 52				Name0:	.text "CR"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=43768					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab78	42					.byte (("CR"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>ab79	10					.byte WordFlags	;wh_Flags
>ab7a	03					.byte 3	;wh_CodeLength
>ab7b	0d					  .byte LinkDisplacement	; offset to previous nt
=$ab7c					XtPtr1 ::= *
=43768					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab7c					CR:
.ab7c	a9 0a		lda #$0a			lda #AscLF
.ab7e	20 d8 cd	jsr $cdd8			jsr Emit_A
=5					CodeLen	.var *-XtPtr1
=$ab81					Here1 = *	; remember here
>ab7a	05					.byte CodeLen	;patch wh_CodeLength
.ab81	60		rts				rts
>ab82	50 61 67 65			Name0:	.text "Page"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=43782					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab86	a4					.byte (("Page"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>ab87	10					.byte WordFlags	;wh_Flags
>ab88	03					.byte 3	;wh_CodeLength
>ab89	0e					  .byte LinkDisplacement	; offset to previous nt
=$ab8a					XtPtr1 ::= *
=43782					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab8a	20 b5 b8	jsr $b8b5	Page:		jsr SLiteral_Runtime
.ab8d	4c 9a ab	jmp $ab9a			  jmp +
>ab90	1b 5b 32 4a					  .text AscESC,"[2J"	; ANSI clear screen
>ab94	1b 5b 31 3b 31 48				  .text AscESC,"[1;1H"	; move cursor to top left of screen
.ab9a	4c f0 cd	jmp $cdf0	+		jmp Type
=19					CodeLen	.var *-XtPtr1
=$ab9d					Here1 = *	; remember here
>ab88	13					.byte CodeLen	;patch wh_CodeLength
>ab9d	41 74 2d 58 59			Name0:	.text "At-XY"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=43810					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aba2	25					.byte (("At-XY"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>aba3	50					.byte WordFlags	;wh_Flags
>aba4	03					.byte 3	;wh_CodeLength
>aba5	1c					  .byte LinkDisplacement	; offset to previous nt
=$aba6					XtPtr1 ::= *
=43810					WordListLink ::= Nt0 ; remember the nt of this word for later
.aba6					At_XY:
.aba6	20 3f b4	jsr $b43f			jsr underflow_2
.aba9	ad 00 03	lda $0300			lda base	; Save the BASE
.abac	48		pha				pha
.abad	20 d7 b1	jsr $b1d7			jsr Decimal	; ANSI escape code values need to be in decimal.
.abb0	a9 1b		lda #$1b			lda #AscESC
.abb2	20 d8 cd	jsr $cdd8			jsr Emit_A
.abb5	a9 5b		lda #$5b			lda #'['
.abb7	20 d8 cd	jsr $cdd8			jsr Emit_A
.abba	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.abbc	20 31 cc	jsr $cc31			jsr print_u
.abbf	a9 3b		lda #$3b			lda #';'
.abc1	20 d8 cd	jsr $cdd8			jsr Emit_A
.abc4	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.abc6	20 31 cc	jsr $cc31			jsr print_u
.abc9	a9 48		lda #$48			lda #'H'
.abcb	20 d8 cd	jsr $cdd8			jsr Emit_A
.abce	68		pla				pla		; Restore the base
.abcf	8d 00 03	sta $0300			sta base
=44					CodeLen	.var *-XtPtr1
=$abd2					Here1 = *	; remember here
>aba4	2c					.byte CodeLen	;patch wh_CodeLength
.abd2	60		rts				rts
>abd3	50 61 64			Name0:	.text "Pad"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=43862					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>abd6	83					.byte (("Pad"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>abd7	00					.byte WordFlags	;wh_Flags
>abd8	03					.byte 3	;wh_CodeLength
>abd9	34					  .byte LinkDisplacement	; offset to previous nt
=$abda					XtPtr1 ::= *
=43862					WordListLink ::= Nt0 ; remember the nt of this word for later
.abda	ca		dex		Pad:		dex		; push cp+PadOffset
.abdb	ca		dex				dex
.abdc	18		clc				clc
.abdd	a5 00		lda $00				lda cp+0
.abdf	69 54		adc #$54			adc #PadOffset
.abe1	95 24		sta $24,x			sta DStack+0,x
.abe3	a5 01		lda $01				lda cp+1
.abe5	69 00		adc #$00			adc #0
.abe7	95 25		sta $25,x			sta DStack+1,x
=15					CodeLen	.var *-XtPtr1
=$abe9					Here1 = *	; remember here
>abd8	0f					.byte CodeLen	;patch wh_CodeLength
.abe9	60		rts				rts
>abea	3c 23				Name0:	.text "<#"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=43884					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>abec	62					.byte (("<#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>abed	00					.byte WordFlags	;wh_Flags
>abee	03					.byte 3	;wh_CodeLength
>abef	16					  .byte LinkDisplacement	; offset to previous nt
=$abf0					XtPtr1 ::= *
=43884					WordListLink ::= Nt0 ; remember the nt of this word for later
.abf0					Less_Number_Sign:
.abf0	a9 54		lda #$54			lda #PadOffset		; init hold buffer index
.abf2	8d 34 03	sta $0334			sta ToHold
=5					CodeLen	.var *-XtPtr1
=$abf5					Here1 = *	; remember here
>abee	05					.byte CodeLen	;patch wh_CodeLength
.abf5	60		rts				rts
>abf6	23 3e				Name0:	.text "#>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=43896					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>abf8	c2					.byte (("#>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>abf9	40					.byte WordFlags	;wh_Flags
>abfa	03					.byte 3	;wh_CodeLength
>abfb	0c					  .byte LinkDisplacement	; offset to previous nt
=$abfc					XtPtr1 ::= *
=43896					WordListLink ::= Nt0 ; remember the nt of this word for later
.abfc					Number_Sign_Greater:
.abfc	20 3f b4	jsr $b43f			jsr underflow_2		; double number
.abff	18		clc				clc			; addr= cp + ToHold
.ac00	a5 00		lda $00				lda cp+0
.ac02	6d 34 03	adc $0334			adc ToHold
.ac05	95 26		sta $26,x			sta DStack+2,x
.ac07	a5 01		lda $01				lda cp+1
.ac09	69 00		adc #$00			adc #0
.ac0b	95 27		sta $27,x			sta DStack+3,x
.ac0d	38		sec				sec			; u= PadOffset - ToHold
.ac0e	a9 54		lda #$54			lda #PadOffset
.ac10	ed 34 03	sbc $0334			sbc ToHold
.ac13	95 24		sta $24,x			sta DStack+0,x
.ac15	a9 00		lda #$00			lda #0
.ac17	95 25		sta $25,x			sta DStack+1,x
=29					CodeLen	.var *-XtPtr1
=$ac19					Here1 = *	; remember here
>abfa	1d					.byte CodeLen	;patch wh_CodeLength
.ac19	60		rts				rts
>ac1a	48 6f 6c 64			Name0:	.text "Hold"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=43934					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac1e	84					.byte (("Hold"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>ac1f	00					.byte WordFlags	;wh_Flags
>ac20	03					.byte 3	;wh_CodeLength
>ac21	26					  .byte LinkDisplacement	; offset to previous nt
=$ac22					XtPtr1 ::= *
=43934					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac22	20 e7 b3	jsr $b3e7	Hold:		jsr PopA
.ac25	ce 34 03	dec $0334	Hold_A:		dec ToHold
.ac28	ac 34 03	ldy $0334			ldy ToHold
.ac2b	91 00		sta ($00),y			sta (cp),y
=11					CodeLen	.var *-XtPtr1
=$ac2d					Here1 = *	; remember here
>ac20	0b					.byte CodeLen	;patch wh_CodeLength
.ac2d	60		rts				rts
>ac2e	23				Name0:	.text "#"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=43951					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac2f	61					.byte (("#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>ac30	50					.byte WordFlags	;wh_Flags
>ac31	03					.byte 3	;wh_CodeLength
>ac32	11					  .byte LinkDisplacement	; offset to previous nt
=$ac33					XtPtr1 ::= *
=43951					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac33					Number_Sign:
.ac33	20 3f b4	jsr $b43f			jsr underflow_2		; double number
.ac36	a9 00		lda #$00			lda #0			;   init remainder
.ac38	18		clc				clc
.ac39	a0 21		ldy #$21			ldy #32+1		;   for each bit
.ac3b					_11:
.ac3b	2a		rol a				rol a			;   shift remainder
.ac3c	cd 00 03	cmp $0300			cmp base		;   will it fit?
.ac3f	90 03		bcc $ac44			bcc _27
.ac41	ed 00 03	sbc $0300			sbc base
.ac44					_27:
.ac44	36 26		rol $26,x			rol DStack+2,x		;   shift ud
.ac46	36 27		rol $27,x			rol DStack+3,x
.ac48	36 24		rol $24,x			rol DStack+0,x
.ac4a	36 25		rol $25,x			rol DStack+1,x
.ac4c	88		dey				dey
.ac4d	d0 ec		bne $ac3b			bne _11
.ac4f	c9 0a		cmp #$0a			cmp #9+1		; alternatively this could use s_abc_upper
.ac51	90 02		bcc $ac55			bcc +
.ac53	69 06		adc #$06			adc #7-1
.ac55	69 30		adc #$30	+		adc #'0'
.ac57	d0 cc		bne $ac25			bne Hold_A
=38					CodeLen	.var *-XtPtr1
=$ac59					Here1 = *	; remember here
>ac31	26					.byte CodeLen	;patch wh_CodeLength
>ac59	23 53				Name0:	.text "#S"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=43995					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac5b	62					.byte (("#S"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=44					LinkDisplacement = Nt0-WordListLink
>ac5c	00					.byte WordFlags	;wh_Flags
>ac5d	03					.byte 3	;wh_CodeLength
>ac5e	2c					  .byte LinkDisplacement	; offset to previous nt
=$ac5f					XtPtr1 ::= *
=43995					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac5f					Number_Sign_S:
.ac5f					_loop:
.ac5f	20 33 ac	jsr $ac33			jsr Number_sign	; convert a single number ("#")
.ac62	b5 24		lda $24,x			lda DStack+0,x	; until d is zero
.ac64	15 25		ora $25,x			ora DStack+1,x
.ac66	15 26		ora $26,x			ora DStack+2,x
.ac68	15 27		ora $27,x			ora DStack+3,x
.ac6a	d0 f3		bne $ac5f			bne _loop
=13					CodeLen	.var *-XtPtr1
=$ac6c					Here1 = *	; remember here
>ac5d	0d					.byte CodeLen	;patch wh_CodeLength
.ac6c	60		rts				rts
>ac6d	53 69 67 6e			Name0:	.text "Sign"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=44017					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac71	c4					.byte (("Sign"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>ac72	10					.byte WordFlags	;wh_Flags
>ac73	03					.byte 3	;wh_CodeLength
>ac74	16					  .byte LinkDisplacement	; offset to previous nt
=$ac75					XtPtr1 ::= *
=44017					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac75	20 02 b4	jsr $b402	Sign:		jsr PopYA
.ac78	98		tya				tya		; test MSB of TOS
.ac79					Sign_P:
.ac79	30 01		bmi $ac7c			bmi _minus
.ac7b	60		rts				rts
.ac7c	a9 2d		lda #$2d	_minus:		lda #'-'	; add minus sign
.ac7e	d0 a5		bne $ac25			bne hold_a
=11					CodeLen	.var *-XtPtr1
=$ac80					Here1 = *	; remember here
>ac73	0b					.byte CodeLen	;patch wh_CodeLength
>ac80	43 6c 65 61 76 65		Name0:	.text "Cleave"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44038					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac86	a6					.byte (("Cleave"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>ac87	50					.byte WordFlags	;wh_Flags
>ac88	03					.byte 3	;wh_CodeLength
>ac89	15					  .byte LinkDisplacement	; offset to previous nt
=$ac8a					XtPtr1 ::= *
=44038					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac8a					Cleave:
.ac8a	20 3f b4	jsr $b43f			jsr underflow_2
.ac8d	20 fd c4	jsr $c4fd			jsr Minus_leading	; -LEADING ( addr u )
.ac90	20 f9 c3	jsr $c3f9			jsr Input_To_R	; save old imput state
.ac93	b5 24		lda $24,x			lda DStack+0,x	; u is new ciblen
.ac95	85 06		sta $06				sta ciblen
.ac97	b5 25		lda $25,x			lda DStack+1,x
.ac99	85 07		sta $07				sta ciblen+1
.ac9b	b5 26		lda $26,x			lda DStack+2,x	; addr is new cib
.ac9d	85 04		sta $04				sta cib
.ac9f	b5 27		lda $27,x			lda DStack+3,x
.aca1	85 05		sta $05				sta cib+1
.aca3	a9 00		lda #$00			lda #0
.aca5	85 08		sta $08				sta toin	; >IN pointer is zero
.aca7	85 09		sta $09				sta toin+1
.aca9	20 80 ba	jsr $ba80			jsr parse_name	; ( addr u addr-s u-s )
.acac	b5 24		lda $24,x			lda DStack+0,x
.acae	15 25		ora $25,x			ora DStack+1,x
.acb0	f0 23		beq $acd5			beq _done
.acb2	38		sec				sec
.acb3	b5 28		lda $28,x			lda DStack+4,x	; LSB of original u
.acb5	f5 24		sbc $24,x			sbc DStack+0,x
.acb7	95 28		sta $28,x			sta DStack+4,x
.acb9	b5 29		lda $29,x			lda DStack+5,x	; MSB of original u
.acbb	f5 25		sbc $25,x			sbc DStack+1,x
.acbd	95 29		sta $29,x			sta DStack+5,x
.acbf	18		clc				clc
.acc0	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of original addr
.acc2	75 24		adc $24,x			adc DStack+0,x
.acc4	95 2a		sta $2a,x			sta DStack+6,x
.acc6	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of original addr
.acc8	75 25		adc $25,x			adc DStack+1,x
.acca	95 2b		sta $2b,x			sta DStack+7,x
.accc	20 5f c5	jsr $c55f			jsr Two_swap		; ( addr-s u-s addr u )
.accf	20 fd c4	jsr $c4fd			jsr Minus_leading
.acd2	20 5f c5	jsr $c55f			jsr Two_swap		; ( addr u addr-s u-s )
.acd5					_done:
.acd5	20 1a c4	jsr $c41a			jsr R_To_Input
=78					CodeLen	.var *-XtPtr1
=$acd8					Here1 = *	; remember here
>ac88	4e					.byte CodeLen	;patch wh_CodeLength
.acd8	60		rts				rts
>acd9	48 65 78 53 74 6f 72 65		Name0:	.text "HexStore"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=44129					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ace1	a8					.byte (("HexStore"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=91					LinkDisplacement = Nt0-WordListLink
>ace2	50					.byte WordFlags	;wh_Flags
>ace3	03					.byte 3	;wh_CodeLength
>ace4	5b					  .byte LinkDisplacement	; offset to previous nt
=$ace5					XtPtr1 ::= *
=44129					WordListLink ::= Nt0 ; remember the nt of this word for later
.ace5					Hexstore:
.ace5	20 44 b4	jsr $b444			jsr underflow_3
.ace8	20 6e cf	jsr $cf6e			jsr Dup		; Save copy of original address
.aceb	20 7e c6	jsr $c67e			jsr Two_to_r		; ( addr1 u1 ) ( R: addr2 addr2 )
.acee					_loop:
.acee	b5 24		lda $24,x			lda DStack+0,x
.acf0	15 25		ora $25,x			ora DStack+1,x
.acf2	f0 37		beq $ad2b			beq _done
.acf4	20 8a ac	jsr $ac8a			jsr Cleave		; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.acf7	20 7e c6	jsr $c67e			jsr Two_to_r
.acfa	20 fe b7	jsr $b7fe			jsr Zero
.acfd	20 fe b7	jsr $b7fe			jsr Zero
.ad00	20 5a c6	jsr $c65a			jsr Two_r_from	; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.ad03	20 5b b0	jsr $b05b			jsr To_Number	; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.ad06	b5 24		lda $24,x			lda DStack+0,x
.ad08	15 25		ora $25,x			ora DStack+1,x
.ad0a	d0 18		bne $ad24			bne _have_chars_left
.ad0c	20 4e c5	jsr $c54e			jsr Two_drop		; ( addr1 u1 n n ) ( R: addr2 addr2 )
.ad0f	20 25 c0	jsr $c025			jsr D_To_S		; ( addr1 u1 n ) ( R: addr2 addr2 )
.ad12	20 31 cf	jsr $cf31			jsr R_Fetch		; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.ad15	20 77 cd	jsr $cd77			jsr C_Store		; ( addr1 u1 ) ( R: addr2 addr2 )
.ad18	20 16 cf	jsr $cf16			jsr R_From		; R>
.ad1b	20 72 ca	jsr $ca72			jsr One_plus		; 1+
.ad1e	20 f8 ce	jsr $cef8			jsr To_R		; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.ad21	4c ee ac	jmp $acee			jmp _loop
.ad24					_have_chars_left:
.ad24	8a		txa				txa
.ad25	18		clc				clc
.ad26	69 08		adc #$08			adc #8
.ad28	aa		tax				tax
.ad29	d0 c3		bne $acee			bne _loop
.ad2b					_done:
.ad2b	e8		inx				inx
.ad2c	e8		inx				inx
.ad2d	e8		inx				inx
.ad2e	e8		inx				inx			; 2DROP
.ad2f	20 5a c6	jsr $c65a			jsr Two_r_from		; ( addr2+n addr2 )
.ad32	20 8b cf	jsr $cf8b			jsr Swap
.ad35	4c cf cb	jmp $cbcf			jmp Minus		; ( n )
=83					CodeLen	.var *-XtPtr1
=$ad38					Here1 = *	; remember here
>ace3	53					.byte CodeLen	;patch wh_CodeLength
>ad38	57 69 74 68 69 6e		Name0:	.text "Within"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44222					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ad3e	c6					.byte (("Within"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=93					LinkDisplacement = Nt0-WordListLink
>ad3f	50					.byte WordFlags	;wh_Flags
>ad40	03					.byte 3	;wh_CodeLength
>ad41	5d					  .byte LinkDisplacement	; offset to previous nt
=$ad42					XtPtr1 ::= *
=44222					WordListLink ::= Nt0 ; remember the nt of this word for later
.ad42					Within:
.ad42	20 44 b4	jsr $b444			jsr underflow_3
.ad45	20 47 cf	jsr $cf47			jsr Over
.ad48	20 cf cb	jsr $cbcf			jsr Minus
.ad4b	20 f8 ce	jsr $cef8			jsr To_R
.ad4e	20 cf cb	jsr $cbcf			jsr Minus
.ad51	20 16 cf	jsr $cf16			jsr R_From
.ad54	4c ac c8	jmp $c8ac			jmp U_Less_Than
=21					CodeLen	.var *-XtPtr1
=$ad57					Here1 = *	; remember here
>ad40	15					.byte CodeLen	;patch wh_CodeLength
>ad57	5c				Name0:	.text "\"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=44248					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ad58	81					.byte (("\"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>ad59	18					.byte WordFlags	;wh_Flags
>ad5a	03					.byte 3	;wh_CodeLength
>ad5b	1a					  .byte LinkDisplacement	; offset to previous nt
=$ad5c					XtPtr1 ::= *
=44248					WordListLink ::= Nt0 ; remember the nt of this word for later
.ad5c					Backslash:
.ad5c	ad 0c 03	lda $030c			lda BlkV+0		; interpreting a block?
.ad5f	0d 0d 03	ora $030d			ora BlkV+1
.ad62	f0 16		beq $ad7a			beq _not_block
.ad64	a5 08		lda $08				lda toin+0
.ad66	29 3f		and #$3f			and #$3F
.ad68	c9 02		cmp #$02			cmp #2
.ad6a	90 16		bcc $ad82			bcc _rts
.ad6c	a5 08		lda $08		                lda toin+0		; Move toin to next multiple of 64.
.ad6e	29 c0		and #$c0	                and #$C0        	;   Clear lower bits to move to beginning of line.
.ad70	18		clc		                clc             	;   Add $40 (64 decimal) to move to next line.
.ad71	69 40		adc #$40	                adc #$40
.ad73	85 08		sta $08		                sta toin+0
.ad75	90 0b		bcc $ad82	                bcc _rts
.ad77	e6 09		inc $09		                inc toin+1
.ad79	60		rts				rts
.ad7a					_not_block:
.ad7a	a5 06		lda $06		                lda ciblen+0
.ad7c	85 08		sta $08		                sta toin+0
.ad7e	a5 07		lda $07		                lda ciblen+1
.ad80	85 09		sta $09		                sta toin+1
=38					CodeLen	.var *-XtPtr1
=$ad82					Here1 = *	; remember here
>ad5a	26					.byte CodeLen	;patch wh_CodeLength
.ad82	60		rts		_rts:		rts
>ad83	4d 6f 76 65			Name0:	.text "Move"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=44295					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ad87	a4					.byte (("Move"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= NN+UF	; modifiable copy, remember for later
=47					LinkDisplacement = Nt0-WordListLink
>ad88	50					.byte WordFlags	;wh_Flags
>ad89	03					.byte 3	;wh_CodeLength
>ad8a	2f					  .byte LinkDisplacement	; offset to previous nt
=$ad8b					XtPtr1 ::= *
=44295					WordListLink ::= Nt0 ; remember the nt of this word for later
.ad8b					Move:
.ad8b	b5 27		lda $27,x			lda DStack+3,x		; MSB of addr2
.ad8d	d5 29		cmp $29,x			cmp DStack+5,x		; MSB of addr1
.ad8f	d0 04		bne $ad95			bne _ne
.ad91	b5 26		lda $26,x			lda DStack+2,x		; LSB of addr2
.ad93	d5 28		cmp $28,x			cmp DStack+4,x		; LSB of addr1
.ad95	90 58		bcc $adef	_ne:		bcc CMove
.ad97	d0 10		bne $ada9			bne CMove_up
.ad99	8a		txa		ThreeDrop:	txa		; drop three entries from Data Stack
.ad9a	18		clc				clc
.ad9b	69 06		adc #$06			adc #6
.ad9d	aa		tax				tax
=19					CodeLen	.var *-XtPtr1
=$ad9e					Here1 = *	; remember here
>ad89	13					.byte CodeLen	;patch wh_CodeLength
.ad9e	60		rts				rts
>ad9f	43 4d 6f 76 65 3e		Name0:	.text "CMove>"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44325					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ada5	c6					.byte (("CMove>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>ada6	50					.byte WordFlags	;wh_Flags
>ada7	03					.byte 3	;wh_CodeLength
>ada8	1e					  .byte LinkDisplacement	; offset to previous nt
=$ada9					XtPtr1 ::= *
=44325					WordListLink ::= Nt0 ; remember the nt of this word for later
.ada9					CMove_up:
.ada9	20 44 b4	jsr $b444			jsr underflow_3
.adac	b5 26		lda $26,x			lda DStack+2,x
.adae	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.adb0	b5 27		lda $27,x			lda DStack+3,x
.adb2	18		clc				clc
.adb3	75 25		adc $25,x			adc DStack+1,x
.adb5	85 17		sta $17				sta tmp2+1	; point to last page of destination
.adb7	b5 28		lda $28,x			lda DStack+4,x
.adb9	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.adbb	b5 29		lda $29,x			lda DStack+5,x
.adbd	18		clc				clc
.adbe	75 25		adc $25,x			adc DStack+1,x
.adc0	85 15		sta $15				sta tmp1+1	; point to last page of source
.adc2	f6 25		inc $25,x			inc DStack+1,x	; allows us to use bne with dec DStack+1,x below
.adc4	b4 24		ldy $24,x			ldy DStack+0,x	; length of last page
.adc6	f0 10		beq $add8			beq _nopartial
.adc8					_outerloop:
.adc8	88		dey				dey
.adc9	f0 07		beq $add2			beq _finishpage
.adcb					_innerloop:
.adcb	b1 14		lda ($14),y			lda (tmp1),y
.adcd	91 16		sta ($16),y			sta (tmp2),y
.adcf	88		dey				dey
.add0	d0 f9		bne $adcb			bne _innerloop
.add2					_finishpage:
.add2	a0 00		ldy #$00			ldy #0
.add4	b1 14		lda ($14),y			lda (tmp1),y	; handle y = 0 separately
.add6	91 16		sta ($16),y			sta (tmp2),y
.add8					_nopartial:
.add8	c6 15		dec $15				dec tmp1+1	; back up to previous pages
.adda	c6 17		dec $17				dec tmp2+1
.addc	d6 25		dec $25,x			dec DStack+1,x
.adde	d0 e8		bne $adc8			bne _outerloop
.ade0					_done:
.ade0	4c 99 ad	jmp $ad99			jmp ThreeDrop	; clear up the stack and leave
=58					CodeLen	.var *-XtPtr1
=$ade3					Here1 = *	; remember here
>ada7	3a					.byte CodeLen	;patch wh_CodeLength
.ade3	4c 4e b4	jmp $b44e	Throw_Stack_14: jmp Throw_Stack
>ade6	43 4d 6f 76 65			Name0:	.text "CMove"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=44395					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>adeb	a5					.byte (("CMove"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=70					LinkDisplacement = Nt0-WordListLink
>adec	50					.byte WordFlags	;wh_Flags
>aded	03					.byte 3	;wh_CodeLength
>adee	46					  .byte LinkDisplacement	; offset to previous nt
=$adef					XtPtr1 ::= *
=44395					WordListLink ::= Nt0 ; remember the nt of this word for later
.adef					CMove:
.adef	20 44 b4	jsr $b444			jsr underflow_3
.adf2	b5 26		lda $26,x			lda DStack+2,x
.adf4	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.adf6	b5 27		lda $27,x			lda DStack+3,x
.adf8	85 17		sta $17				sta tmp2+1
.adfa	b5 28		lda $28,x			lda DStack+4,x
.adfc	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.adfe	b5 29		lda $29,x			lda DStack+5,x
.ae00	85 15		sta $15				sta tmp1+1
.ae02	a0 00		ldy #$00			ldy #0
.ae04	b5 25		lda $25,x			lda DStack+1,x	; number of whole pages to move
.ae06	f0 0f		beq $ae17			beq _dopartial
.ae08					_page:
.ae08	b1 14		lda ($14),y			lda (tmp1),y
.ae0a	91 16		sta ($16),y			sta (tmp2),y
.ae0c	c8		iny				iny
.ae0d	d0 f9		bne $ae08			bne _page
.ae0f	e6 15		inc $15				inc tmp1+1
.ae11	e6 17		inc $17				inc tmp2+1
.ae13	d6 25		dec $25,x			dec DStack+1,x
.ae15	d0 f1		bne $ae08			bne _page
.ae17					_dopartial:
.ae17	b5 24		lda $24,x			lda DStack+0,x	; length of last page
.ae19	f0 09		beq $ae24			beq _done
.ae1b					_partial:
.ae1b	b1 14		lda ($14),y			lda (tmp1),y
.ae1d	91 16		sta ($16),y			sta (tmp2),y
.ae1f	c8		iny				iny
.ae20	d6 24		dec $24,x			dec DStack+0,x
.ae22	d0 f7		bne $ae1b			bne _partial
.ae24	4c 99 ad	jmp $ad99	_done:		jmp ThreeDrop	; clear the stack
=56					CodeLen	.var *-XtPtr1
=$ae27					Here1 = *	; remember here
>aded	38					.byte CodeLen	;patch wh_CodeLength
>ae27	55 4d 2a			Name0:	.text "UM*"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=44458					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ae2a	43					.byte (("UM*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=63					LinkDisplacement = Nt0-WordListLink
>ae2b	10					.byte WordFlags	;wh_Flags
>ae2c	03					.byte 3	;wh_CodeLength
>ae2d	3f					  .byte LinkDisplacement	; offset to previous nt
=$ae2e					XtPtr1 ::= *
=44458					WordListLink ::= Nt0 ; remember the nt of this word for later
.ae2e					UM_Star:
.ae2e	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ae30	b0 b1		bcs $ade3		bcs Throw_Stack_14
.ae32	18		clc				clc		; tmp2= divsor-1
.ae33	b5 24		lda $24,x			lda DStack+0,x
.ae35	e9 00		sbc #$00			sbc #0
.ae37	85 16		sta $16				sta tmp2+0
.ae39	b5 25		lda $25,x			lda DStack+1,x
.ae3b	e9 00		sbc #$00			sbc #0
.ae3d	85 17		sta $17				sta tmp2+1
.ae3f	90 2e		bcc $ae6f			bcc _zero	; is divisor zero?
.ae41	a9 00		lda #$00			lda #0
.ae43	85 14		sta $14				sta tmp1
.ae45	86 18		stx $18				stx tmp3	; tested for exit from outer loop
.ae47	ca		dex				dex
.ae48	ca		dex				dex
.ae49					_outer_loop:
.ae49	a0 08		ldy #$08			ldy #8		; counter inner loop
.ae4b	56 28		lsr $28,x			lsr DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.ae4d					_inner_loop:
.ae4d	90 0c		bcc $ae5b			bcc _no_add
.ae4f	85 15		sta $15				sta tmp1+1	; save time, don't CLC
.ae51	a5 14		lda $14				lda tmp1
.ae53	65 16		adc $16				adc tmp2
.ae55	85 14		sta $14				sta tmp1
.ae57	a5 15		lda $15				lda tmp1+1
.ae59	65 17		adc $17				adc tmp2+1
.ae5b					_no_add:
.ae5b	6a		ror a				ror
.ae5c	66 14		ror $14				ror tmp1
.ae5e	76 28		ror $28,x			ror DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.ae60	88		dey				dey
.ae61	d0 ea		bne $ae4d			bne _inner_loop ; go back for one more shift?
.ae63	e8		inx				inx
.ae64	e4 18		cpx $18				cpx tmp3
.ae66	d0 e1		bne $ae49			bne _outer_loop ; go back for eight more shifts?
.ae68	95 25		sta $25,x			sta DStack+1,x
.ae6a	a5 14		lda $14				lda tmp1
.ae6c	95 24		sta $24,x			sta DStack+0,x
.ae6e	60		rts				rts
.ae6f	a9 00		lda #$00	_zero:		lda #0
.ae71	95 26		sta $26,x			sta DStack+2,x
.ae73	95 27		sta $27,x			sta DStack+3,x
.ae75	60		rts				rts
=72					CodeLen	.var *-XtPtr1
=$ae76					Here1 = *	; remember here
>ae2c	48					.byte CodeLen	;patch wh_CodeLength
>ae76	4d 2a				Name0:	.text "M*"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=44536					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ae78	42					.byte (("M*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=78					LinkDisplacement = Nt0-WordListLink
>ae79	10					.byte WordFlags	;wh_Flags
>ae7a	03					.byte 3	;wh_CodeLength
>ae7b	4e					  .byte LinkDisplacement	; offset to previous nt
=$ae7c					XtPtr1 ::= *
=44536					WordListLink ::= Nt0 ; remember the nt of this word for later
.ae7c					M_Star:
.ae7c	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ae7e	b0 6b		bcs $aeeb		bcs Throw_Stack_15
.ae80	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.ae82	55 27		eor $27,x			eor DStack+3,x	; MSB of n2
.ae84	08		php				php
.ae85	20 da c6	jsr $c6da			jsr Abs
.ae88	20 8b cf	jsr $cf8b			jsr Swap
.ae8b	20 da c6	jsr $c6da			jsr Abs
.ae8e	20 2e ae	jsr $ae2e			jsr UM_Star		; ( d )
.ae91	28		plp				plp			; handle the sign
.ae92	10 03		bpl $ae97			bpl +
.ae94	4c f1 c6	jmp $c6f1			jmp DNegate
.ae97					+
=27					CodeLen	.var *-XtPtr1
=$ae97					Here1 = *	; remember here
>ae7a	1b					.byte CodeLen	;patch wh_CodeLength
.ae97	60		rts				rts
>ae98	2a				Name0:	.text "*"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=44569					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ae99	41					.byte (("*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>ae9a	00					.byte WordFlags	;wh_Flags
>ae9b	03					.byte 3	;wh_CodeLength
>ae9c	21					  .byte LinkDisplacement	; offset to previous nt
=$ae9d					XtPtr1 ::= *
=44569					WordListLink ::= Nt0 ; remember the nt of this word for later
.ae9d					Star:
.ae9d	20 2e ae	jsr $ae2e			jsr UM_Star
.aea0	e8		inx				inx		; D>S	drop hi cell
.aea1	e8		inx				inx
=5					CodeLen	.var *-XtPtr1
=$aea2					Here1 = *	; remember here
>ae9b	05					.byte CodeLen	;patch wh_CodeLength
.aea2	60		rts				rts
>aea3	55 4d 2f 4d 6f 64		Name0:	.text "UM/Mod"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44585					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aea9	86					.byte (("UM/Mod"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>aeaa	10					.byte WordFlags	;wh_Flags
>aeab	03					.byte 3	;wh_CodeLength
>aeac	10					  .byte LinkDisplacement	; offset to previous nt
=$aead					XtPtr1 ::= *
=44585					WordListLink ::= Nt0 ; remember the nt of this word for later
.aead					UM_Slash_Mod:
.aead	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.aeaf	b0 3a		bcs $aeeb		bcs Throw_Stack_15
.aeb1	b5 24		lda $24,x			lda DStack+0,x		; catch division by zero
.aeb3	15 25		ora $25,x			ora DStack+1,x
.aeb5	f0 2f		beq $aee6			beq _DivByZero
.aeb7	a0 10		ldy #$10			ldy #16			; for 16 bits
.aeb9					_loop:
.aeb9	36 28		rol $28,x			rol DStack+4,x		;   rotate low cell of dividend one bit left
.aebb	36 29		rol $29,x			rol DStack+5,x
.aebd	36 26		rol $26,x			rol DStack+2,x		;   rotate high cell of dividend one bit left
.aebf	36 27		rol $27,x			rol DStack+3,x
.aec1	b0 0a		bcs $aecd			bcs _subtract		;   overflow?
.aec3	b5 26		lda $26,x			lda DStack+2,x		;   dividend.hi >= divisor?
.aec5	d5 24		cmp $24,x			cmp DStack+0,x
.aec7	b5 27		lda $27,x			lda DStack+3,x
.aec9	f5 25		sbc $25,x			sbc DStack+1,x
.aecb	90 0d		bcc $aeda			bcc _next
.aecd	b5 26		lda $26,x	_subtract:	lda DStack+2,x		;   dividend.hi -= divisor
.aecf	f5 24		sbc $24,x			sbc DStack+0,x
.aed1	95 26		sta $26,x			sta DStack+2,x
.aed3	b5 27		lda $27,x			lda DStack+3,x
.aed5	f5 25		sbc $25,x			sbc DStack+1,x
.aed7	95 27		sta $27,x			sta DStack+3,x
.aed9	38		sec				sec			;   it always fits
.aeda	88		dey		_next:		dey			;  next
.aedb	d0 dc		bne $aeb9			bne _loop
.aedd	36 28		rol $28,x			rol DStack+4,x		; finish rotating quotient bit in
.aedf	36 29		rol $29,x			rol DStack+5,x
.aee1	e8		inx				inx			; drop divisor
.aee2	e8		inx				inx
.aee3	4c 8b cf	jmp $cf8b			jmp Swap
.aee6	a9 f6		lda #$f6	_DivByZero:	lda #$100+err_DivideBy0
.aee8	4c 87 b4	jmp $b487			jmp ThrowA
=62					CodeLen	.var *-XtPtr1
=$aeeb					Here1 = *	; remember here
>aeab	3e					.byte CodeLen	;patch wh_CodeLength
.aeeb	4c 4e b4	jmp $b44e	Throw_Stack_15: jmp Throw_Stack
>aeee	53 4d 2f 52 65 6d		Name0:	.text "SM/Rem"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44660					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aef4	a6					.byte (("SM/Rem"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=75					LinkDisplacement = Nt0-WordListLink
>aef5	10					.byte WordFlags	;wh_Flags
>aef6	03					.byte 3	;wh_CodeLength
>aef7	4b					  .byte LinkDisplacement	; offset to previous nt
=$aef8					XtPtr1 ::= *
=44660					WordListLink ::= Nt0 ; remember the nt of this word for later
.aef8					SM_Slash_Rem:
.aef8	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.aefa	b0 ef		bcs $aeeb		bcs Throw_Stack_15
.aefc	b5 27		lda $27,x			lda DStack+3,x
.aefe	08		php				php
.aeff	55 25		eor $25,x			eor DStack+1,x
.af01	08		php				php
.af02	20 da c6	jsr $c6da			jsr Abs
.af05	e8		inx				inx		; pretend we pushed n1 to R
.af06	e8		inx				inx
.af07	20 0d c7	jsr $c70d			jsr DAbs
.af0a	ca		dex				dex
.af0b	ca		dex				dex
.af0c	20 ad ae	jsr $aead			jsr UM_Slash_Mod	; UM/MOD
.af0f	28		plp				plp
.af10	10 03		bpl $af15			bpl +
.af12	20 c2 c6	jsr $c6c2			jsr Negate
.af15					+
.af15	28		plp				plp
.af16	10 07		bpl $af1f			bpl _done
.af18	e8		inx				inx		; pretend we pushed quotient to R
.af19	e8		inx				inx
.af1a	20 c2 c6	jsr $c6c2			jsr Negate
.af1d	ca		dex				dex
.af1e	ca		dex				dex
.af1f					_done:
=39					CodeLen	.var *-XtPtr1
=$af1f					Here1 = *	; remember here
>aef6	27					.byte CodeLen	;patch wh_CodeLength
.af1f	60		rts				rts
>af20	46 4d 2f 4d 6f 64		Name0:	.text "FM/Mod"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44710					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af26	86					.byte (("FM/Mod"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=50					LinkDisplacement = Nt0-WordListLink
>af27	10					.byte WordFlags	;wh_Flags
>af28	03					.byte 3	;wh_CodeLength
>af29	32					  .byte LinkDisplacement	; offset to previous nt
=$af2a					XtPtr1 ::= *
=44710					WordListLink ::= Nt0 ; remember the nt of this word for later
.af2a					FM_Slash_Mod:
.af2a	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.af2c	b0 bd		bcs $aeeb		bcs Throw_Stack_15
.af2e	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.af30	08		php				php		;  save sign
.af31	10 0a		bpl $af3d			bpl +
.af33	20 c2 c6	jsr $c6c2			jsr Negate	; NEGATE
.af36	e8		inx				inx
.af37	e8		inx				inx
.af38	20 f1 c6	jsr $c6f1			jsr DNegate	; DNEGATE
.af3b	ca		dex				dex
.af3c	ca		dex				dex
.af3d					+
.af3d	b5 27		lda $27,x			lda DStack+3,x	; MSB of high word of d
.af3f	10 0d		bpl $af4e			bpl +
.af41	18		clc				clc
.af42	b5 24		lda $24,x			lda DStack+0,x	; LSB of n1
.af44	75 26		adc $26,x			adc DStack+2,x	; LSB of dh
.af46	95 26		sta $26,x			sta DStack+2,x
.af48	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.af4a	75 27		adc $27,x			adc DStack+3,x	; MSB of dh
.af4c	95 27		sta $27,x			sta DStack+3,x
.af4e					+
.af4e	20 ad ae	jsr $aead			jsr UM_Slash_Mod	; ( d n1 -- rem n2 )
.af51	28		plp				plp
.af52	10 07		bpl $af5b			bpl +
.af54	e8		inx				inx		; pretend that we SWAP
.af55	e8		inx				inx
.af56	20 c2 c6	jsr $c6c2			jsr Negate
.af59	ca		dex				dex
.af5a	ca		dex				dex
.af5b					+
=49					CodeLen	.var *-XtPtr1
=$af5b					Here1 = *	; remember here
>af28	31					.byte CodeLen	;patch wh_CodeLength
.af5b	60		rts				rts
>af5c	2f 4d 6f 64			Name0:	.text "/Mod"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=44768					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af60	84					.byte (("/Mod"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=58					LinkDisplacement = Nt0-WordListLink
>af61	10					.byte WordFlags	;wh_Flags
>af62	03					.byte 3	;wh_CodeLength
>af63	3a					  .byte LinkDisplacement	; offset to previous nt
=$af64					XtPtr1 ::= *
=44768					WordListLink ::= Nt0 ; remember the nt of this word for later
.af64	20 6e cf	jsr $cf6e	Slash_Mod:	jsr Dup			; ( n1 n_div n_div )
.af67	a0 00		ldy #$00			ldy #0			; sign extend n1
.af69	b5 29		lda $29,x			lda DStack+5,x
.af6b	10 01		bpl $af6e			bpl +
.af6d	88		dey				dey
.af6e	94 26		sty $26,x	+		sty DStack+2,x
.af70	94 27		sty $27,x			sty DStack+3,x		; ( d1 n_div )
.af72	4c f8 ae	jmp $aef8			jmp SM_Slash_Rem	; SM/REM
=17					CodeLen	.var *-XtPtr1
=$af75					Here1 = *	; remember here
>af62	11					.byte CodeLen	;patch wh_CodeLength
>af75	2f				Name0:	.text "/"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=44790					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af76	e1					.byte (("/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>af77	10					.byte WordFlags	;wh_Flags
>af78	03					.byte 3	;wh_CodeLength
>af79	16					  .byte LinkDisplacement	; offset to previous nt
=$af7a					XtPtr1 ::= *
=44790					WordListLink ::= Nt0 ; remember the nt of this word for later
.af7a	20 64 af	jsr $af64	Slash:		jsr Slash_Mod
.af7d	4c a8 c9	jmp $c9a8			jmp Nip		; Nip remainder
=6					CodeLen	.var *-XtPtr1
=$af80					Here1 = *	; remember here
>af78	06					.byte CodeLen	;patch wh_CodeLength
>af80	4d 6f 64			Name0:	.text "Mod"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=44803					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af83	83					.byte (("Mod"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>af84	00					.byte WordFlags	;wh_Flags
>af85	03					.byte 3	;wh_CodeLength
>af86	0d					  .byte LinkDisplacement	; offset to previous nt
=$af87					XtPtr1 ::= *
=44803					WordListLink ::= Nt0 ; remember the nt of this word for later
.af87	20 64 af	jsr $af64	Mod:		jsr Slash_Mod
.af8a	e8		inx				inx		; Drop quotient
.af8b	e8		inx				inx
=5					CodeLen	.var *-XtPtr1
=$af8c					Here1 = *	; remember here
>af85	05					.byte CodeLen	;patch wh_CodeLength
.af8c	60		rts				rts
>af8d	2a 2f 4d 6f 64			Name0:	.text "*/Mod"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=44818					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af92	85					.byte (("*/Mod"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>af93	50					.byte WordFlags	;wh_Flags
>af94	03					.byte 3	;wh_CodeLength
>af95	0f					  .byte LinkDisplacement	; offset to previous nt
=$af96					XtPtr1 ::= *
=44818					WordListLink ::= Nt0 ; remember the nt of this word for later
.af96					Star_Slash_Mod:
.af96	20 44 b4	jsr $b444			jsr underflow_3
.af99	20 f8 ce	jsr $cef8			jsr To_R
.af9c	20 7c ae	jsr $ae7c			jsr M_Star
.af9f	20 16 cf	jsr $cf16			jsr R_From
.afa2	4c f8 ae	jmp $aef8			jmp SM_Slash_Rem
=15					CodeLen	.var *-XtPtr1
=$afa5					Here1 = *	; remember here
>af94	0f					.byte CodeLen	;patch wh_CodeLength
>afa5	2a 2f				Name0:	.text "*/"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=44839					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>afa7	e2					.byte (("*/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>afa8	10					.byte WordFlags	;wh_Flags
>afa9	03					.byte 3	;wh_CodeLength
>afaa	15					  .byte LinkDisplacement	; offset to previous nt
=$afab					XtPtr1 ::= *
=44839					WordListLink ::= Nt0 ; remember the nt of this word for later
.afab					Star_Slash:
.afab	20 96 af	jsr $af96			jsr Star_Slash_Mod
.afae	4c a8 c9	jmp $c9a8			jmp Nip			; mod
=6					CodeLen	.var *-XtPtr1
=$afb1					Here1 = *	; remember here
>afa9	06					.byte CodeLen	;patch wh_CodeLength
>afb1	4d 2a 2f			Name0:	.text "M*/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=44852					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>afb4	e3					.byte (("M*/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>afb5	10					.byte WordFlags	;wh_Flags
>afb6	03					.byte 3	;wh_CodeLength
>afb7	0d					  .byte LinkDisplacement	; offset to previous nt
=$afb8					XtPtr1 ::= *
=44852					WordListLink ::= Nt0 ; remember the nt of this word for later
.afb8					m_star_slash:
.afb8	20 49 b4	jsr $b449	                jsr underflow_4
.afbb	b5 25		lda $25,x			lda DStack+1,x		; calc result sign
.afbd	55 27		eor $27,x			eor DStack+3,x
.afbf	55 29		eor $29,x			eor DStack+5,x
.afc1	08		php				php
.afc2	20 da c6	jsr $c6da	                jsr Abs			; Abs
.afc5	20 f8 ce	jsr $cef8	                jsr To_R		; >R		( d1 n1 ) ( R: sign abs(n2) )
.afc8	20 da c6	jsr $c6da	                jsr Abs			; Abs
.afcb	20 f8 ce	jsr $cef8	                jsr To_R		; >R		( d1 ) ( R: sign abs(n2) abs(n1) )
.afce	20 0d c7	jsr $c70d	                jsr DAbs		; DAbs		( abs(d1) ) ( R: sign abs(n2) abs(n1) )
.afd1	20 8b cf	jsr $cf8b	                jsr Swap		; Swap
.afd4	20 31 cf	jsr $cf31	                jsr R_Fetch		; R@
.afd7	20 2e ae	jsr $ae2e	                jsr UM_Star		; UM*
.afda	20 69 ce	jsr $ce69	                jsr Rot			; Rot
.afdd	20 16 cf	jsr $cf16	                jsr R_From		; R>
.afe0	20 2e ae	jsr $ae2e	                jsr UM_Star		; UM*
.afe3	20 69 ce	jsr $ce69	                jsr Rot			; Rot
.afe6	20 8a ca	jsr $ca8a	                jsr UMPlus		; 0 D+
.afe9	20 31 cf	jsr $cf31	                jsr R_Fetch		; R@
.afec	20 ad ae	jsr $aead	                jsr UM_Slash_Mod	; UM/Mod
.afef	20 8e ce	jsr $ce8e	                jsr Not_Rot		; Rot Rot
.aff2	20 16 cf	jsr $cf16	                jsr R_From		; R>
.aff5	20 ad ae	jsr $aead	                jsr UM_Slash_Mod	; UM/Mod
.aff8	20 a8 c9	jsr $c9a8	                jsr Nip			; Swap Drop
.affb	20 8b cf	jsr $cf8b	                jsr Swap		; Swap
.affe	28		plp				plp
.afff	10 03		bpl $b004			bpl _rts		; ... 0< if ...
.b001	4c f1 c6	jmp $c6f1	                jmp DNegate
.b004	60		rts		_rts:		rts
=77					CodeLen	.var *-XtPtr1
=$b005					Here1 = *	; remember here
>afb6	4d					.byte CodeLen	;patch wh_CodeLength
>b005	45 76 61 6c 75 61 74 65		Name0:	.text "Evaluate"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=44941					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b00d	a8					.byte (("Evaluate"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=89					LinkDisplacement = Nt0-WordListLink
>b00e	10					.byte WordFlags	;wh_Flags
>b00f	03					.byte 3	;wh_CodeLength
>b010	59					  .byte LinkDisplacement	; offset to previous nt
=$b011					XtPtr1 ::= *
=44941					WordListLink ::= Nt0 ; remember the nt of this word for later
.b011					Evaluate:
.b011	18		clc				clc			; signal to zero BLK.
.b012					load_evaluate:
.b012	ad 0d 03	lda $030d			lda BlkV+1	; Save the current value of BLK on the return stack.
.b015	48		pha				pha
.b016	ad 0c 03	lda $030c			lda BlkV+0
.b019	48		pha				pha
.b01a	b0 08		bcs $b024			bcs +		; See if we should zero BLK.
.b01c	a9 00		lda #$00			lda #0		; Set BLK to zero.
.b01e	8d 0c 03	sta $030c			sta BlkV+0
.b021	8d 0d 03	sta $030d			sta BlkV+1
.b024					+
.b024	20 f9 c3	jsr $c3f9			jsr Input_To_R	; Save the input state to the Return Stack
.b027	a9 ff		lda #$ff			lda #$ff	; SOURCE-ID= -1
.b029	85 02		sta $02				sta insrc+0
.b02b	85 03		sta $03				sta insrc+1
.b02d	a9 00		lda #$00			lda #0		; >IN= zero
.b02f	85 08		sta $08				sta toin+0
.b031	85 09		sta $09				sta toin+1
.b033	20 02 b4	jsr $b402			jsr PopYA	; ciblen= string length (u)
.b036	85 06		sta $06				sta ciblen+0
.b038	84 07		sty $07				sty ciblen+1
.b03a	20 02 b4	jsr $b402			jsr PopYA	; cib= string addr
.b03d	85 04		sta $04				sta cib+0
.b03f	84 05		sty $05				sty cib+1
.b041	20 3f b5	jsr $b53f			jsr interpret	; ( -- )
.b044	20 1a c4	jsr $c41a			jsr R_To_Input	; restore input state
.b047	68		pla				pla		; Restore BLK from the return stack.
.b048	8d 0c 03	sta $030c			sta BlkV+0
.b04b	68		pla				pla
.b04c	8d 0d 03	sta $030d			sta BlkV+1
=62					CodeLen	.var *-XtPtr1
=$b04f					Here1 = *	; remember here
>b00f	3e					.byte CodeLen	;patch wh_CodeLength
.b04f	60		rts				rts
>b050	3e 4e 75 6d 62 65 72		Name0:	.text ">Number"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=45015					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b057	47					.byte ((">Number"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=74					LinkDisplacement = Nt0-WordListLink
>b058	50					.byte WordFlags	;wh_Flags
>b059	03					.byte 3	;wh_CodeLength
>b05a	4a					  .byte LinkDisplacement	; offset to previous nt
=$b05b					XtPtr1 ::= *
=45015					WordListLink ::= Nt0 ; remember the nt of this word for later
.b05b					To_Number:
.b05b	20 49 b4	jsr $b449			jsr underflow_4
.b05e	b5 24		lda $24,x			lda DStack+0,x		; no chars left?
.b060	f0 72		beq $b0d4			beq _done
.b062					_Char_loop:
.b062	a1 26		lda ($26,x)			lda (DStack+2,x)		; Get next character
.b064	c9 30		cmp #$30			cmp #'0'		; convert to value (Digit_Question)
.b066	90 6c		bcc $b0d4			bcc _done
.b068	c9 3a		cmp #$3a			cmp #'9'+1
.b06a	90 08		bcc $b074			bcc _digit
.b06c	29 df		and #$df			and #$df		;   ASCII uppercase
.b06e	c9 41		cmp #$41			cmp #'A'
.b070	90 62		bcc $b0d4			bcc _done
.b072	e9 07		sbc #$07			sbc #7 ;'A'-'0'-10	;   to make 'A'=10 below
.b074	38		sec		_digit:		sec
.b075	e9 30		sbc #$30			sbc #'0'
.b077	cd 00 03	cmp $0300			cmp base		; must be < base
.b07a	b0 58		bcs $b0d4			bcs _done
.b07c	48		pha				pha			; Save char value
.b07d	20 80 c5	jsr $c580			jsr Two_Over		;   copy ud to work (multiplicand)
.b080	a9 00		lda #$00			lda #0			;   zero ud (product)
.b082	95 2c		sta $2c,x			sta DStack+8,x
.b084	95 2d		sta $2d,x			sta DStack+9,x
.b086	95 2e		sta $2e,x			sta DStack+10,x
.b088	95 2f		sta $2f,x			sta DStack+11,x
.b08a	ad 00 03	lda $0300			lda base		;   get multiplier
.b08d	d0 23		bne $b0b2			bne _Mul_Test
.b08f	48		pha		_Mul_Add:	pha			;   save multiplier
.b090	18		clc				clc			;   ud += work
.b091	b5 26		lda $26,x			lda DStack+2,x
.b093	75 2e		adc $2e,x			adc DStack+10,x
.b095	95 2e		sta $2e,x			sta DStack+10,x
.b097	b5 27		lda $27,x			lda DStack+3,x
.b099	75 2f		adc $2f,x			adc DStack+11,x
.b09b	95 2f		sta $2f,x			sta DStack+11,x
.b09d	b5 24		lda $24,x			lda DStack+0,x
.b09f	75 2c		adc $2c,x			adc DStack+8,x
.b0a1	95 2c		sta $2c,x			sta DStack+8,x
.b0a3	b5 25		lda $25,x			lda DStack+1,x
.b0a5	75 2d		adc $2d,x			adc DStack+9,x
.b0a7	95 2d		sta $2d,x			sta DStack+9,x
.b0a9	68		pla				pla			;   restore multiplier
.b0aa	16 26		asl $26,x	_Mul_Shift:	asl DStack+2,x		;   work <<= 1
.b0ac	36 27		rol $27,x			rol DStack+3,x
.b0ae	36 24		rol $24,x			rol DStack+0,x
.b0b0	36 25		rol $25,x			rol DStack+1,x
.b0b2	4a		lsr a		_Mul_Test:	lsr a			;   shift multiplier
.b0b3	b0 da		bcs $b08f			bcs _Mul_Add
.b0b5	d0 f3		bne $b0aa			bne _Mul_Shift
.b0b7	e8		inx				inx			;   2Drop work
.b0b8	e8		inx				inx
.b0b9	e8		inx				inx
.b0ba	e8		inx				inx
.b0bb	68		pla				pla			; recover value
.b0bc	18		clc				clc			; add to ud
.b0bd	75 2a		adc $2a,x			adc DStack+6,x
.b0bf	95 2a		sta $2a,x			sta DStack+6,x
.b0c1	90 0a		bcc $b0cd			bcc +
.b0c3	f6 2b		inc $2b,x			inc DStack+7,x
.b0c5	d0 06		bne $b0cd			bne +
.b0c7	f6 28		inc $28,x			inc DStack+4,x
.b0c9	d0 02		bne $b0cd			bne +
.b0cb	f6 29		inc $29,x			inc DStack+5,x
.b0cd					+
.b0cd	20 7c ca	jsr $ca7c			jsr NOS_One_Plus	; consume the char
.b0d0	d6 24		dec $24,x			dec DStack+0,x
.b0d2	d0 8e		bne $b062			bne _Char_loop
.b0d4					_done:
=121					CodeLen	.var *-XtPtr1
=$b0d4					Here1 = *	; remember here
>b059	79					.byte CodeLen	;patch wh_CodeLength
.b0d4	60		rts				rts
>b0d5	4e 75 6d 62 65 72		Name0:	.text "Number"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=45147					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b0db	46					.byte (("Number"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=132					LinkDisplacement = Nt0-WordListLink
>b0dc	50					.byte WordFlags	;wh_Flags
>b0dd	03					.byte 3	;wh_CodeLength
>b0de	84					  .byte LinkDisplacement	; offset to previous nt
=$b0df					XtPtr1 ::= *
=45147					WordListLink ::= Nt0 ; remember the nt of this word for later
.b0df					Number:
.b0df	20 3f b4	jsr $b43f			jsr underflow_2
.b0e2	a9 00		lda #$00			lda #0
.b0e4	85 1a		sta $1a				sta tmp4+0	; flag for double
.b0e6	85 1b		sta $1b				sta tmp4+1	; flag for minus
.b0e8	ad 00 03	lda $0300			lda base
.b0eb	48		pha				pha
.b0ec	20 bc cc	jsr $ccbc			jsr Two_dup		; ( addr u addr u )
.b0ef	a1 26		lda ($26,x)			lda (DStack+2,x)	; get 1st char
.b0f1	20 b3 b1	jsr $b1b3			jsr _MinusCheck		; a minus sign?
.b0f4	a0 0a		ldy #$0a			ldy #10			; decimal?
.b0f6	c9 23		cmp #$23			cmp #'#'
.b0f8	f0 35		beq $b12f			beq _base_changed
.b0fa	a0 10		ldy #$10			ldy #16			; hex?
.b0fc	c9 24		cmp #$24			cmp #'$'
.b0fe	f0 2f		beq $b12f			beq _base_changed
.b100	a0 02		ldy #$02			ldy #2			; binary?
.b102	c9 25		cmp #$25			cmp #'%'
.b104	f0 29		beq $b12f			beq _base_changed
.b106	c9 27		cmp #$27			cmp #$27		; ASCII for "'"
.b108	d0 2f		bne $b139			bne _check_dot
.b10a	b5 24		lda $24,x			lda DStack+0,x	; length=3 ?
.b10c	c9 03		cmp #$03			cmp #3
.b10e	d0 1c		bne $b12c			bne _not_a_char
.b110	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b112	85 1c		sta $1c				sta tmp5
.b114	b5 27		lda $27,x			lda DStack+3,x
.b116	85 1d		sta $1d				sta tmp5+1
.b118	a0 02		ldy #$02			ldy #2
.b11a	b1 1c		lda ($1c),y			lda (tmp5),y
.b11c	c9 27		cmp #$27			cmp #$27	; ASCII for "'"
.b11e	d0 0c		bne $b12c			bne _not_a_char
.b120	88		dey				dey		; The char we want is between the single quotes.
.b121	b1 1c		lda ($1c),y			lda (tmp5),y
.b123	95 26		sta $26,x			sta DStack+2,x
.b125	a9 00		lda #$00			lda #0
.b127	95 27		sta $27,x			sta DStack+3,x
.b129	4c 88 b1	jmp $b188			jmp _drop_original_string ; Single flag will drop the TOS for us.
.b12c					_not_a_char:
.b12c	4c 65 b1	jmp $b165			jmp _number_error
.b12f					_base_changed:
.b12f	8c 00 03	sty $0300			sty base	; Switch to the new base
.b132	20 7c ca	jsr $ca7c			jsr NOS_One_Plus ; start one character later
.b135	d6 24		dec $24,x			dec DStack+0,x	; decrease string length by one
.b137	a1 26		lda ($26,x)			lda (DStack+2,x) ; Load the first char again
.b139					_check_dot:
.b139	20 b3 b1	jsr $b1b3			jsr _MinusCheck
.b13c	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b13e	85 1c		sta $1c				sta tmp5
.b140	b5 27		lda $27,x			lda DStack+3,x
.b142	85 1d		sta $1d				sta tmp5+1
.b144	b4 24		ldy $24,x			ldy DStack+0,x	; Y now points to the first character after the string,
.b146	88		dey				dey		; but we need the last character
.b147	b1 1c		lda ($1c),y			lda (tmp5),y
.b149	c9 2e		cmp #$2e			cmp #'.'
.b14b	d0 04		bne $b151			bne _main
.b14d	c6 1a		dec $1a				dec tmp4	; Flag the fact
.b14f	d6 24		dec $24,x			dec DStack+0,x	; reduce string length by one
.b151					_main:
.b151	20 bc cc	jsr $ccbc			jsr Two_Dup
.b154	a9 00		lda #$00			lda #0
.b156	95 28		sta $28,x			sta DStack+4,x	; clear ud
.b158	95 29		sta $29,x			sta DStack+5,x
.b15a	95 2a		sta $2a,x			sta DStack+6,x
.b15c	95 2b		sta $2b,x			sta DStack+7,x
.b15e	20 5b b0	jsr $b05b			jsr To_Number	; ( ud addr u -- ud addr u )
.b161	b5 24		lda $24,x			lda DStack+0,x
.b163	f0 1f		beq $b184			beq _all_converted
.b165					_number_error:
.b165	20 4e c5	jsr $c54e			jsr Two_drop	; >NUMBER modified addr u
.b168	20 4e c5	jsr $c54e			jsr Two_drop	; ud   (partially converted number)
.b16b	a9 3e		lda #$3e			lda #'>'	; print the unknown
.b16d	20 d8 cd	jsr $cdd8			jsr Emit_A	; word using the original addr u we saved at the beginning.
.b170	20 f0 cd	jsr $cdf0			jsr Type
.b173	a9 3c		lda #$3c			lda #'<'
.b175	20 d8 cd	jsr $cdd8			jsr Emit_A
.b178	20 e4 cd	jsr $cde4			jsr Space
.b17b	68		pla				pla		; restore base
.b17c	8d 00 03	sta $0300			sta base
.b17f	a9 f3		lda #$f3			lda #$100+err_UndefinedWord
.b181	4c 87 b4	jmp $b487			jmp ThrowA
.b184					_all_converted:
.b184	e8		inx				inx		; Drop the current addr u
.b185	e8		inx				inx
.b186	e8		inx				inx
.b187	e8		inx				inx
.b188					_drop_original_string:
.b188	20 f0 bf	jsr $bff0			jsr TwoNip	 ; Drop the original addr u
.b18b	a5 1a		lda $1a				lda tmp4	; flag for double
.b18d	f0 10		beq $b19f			beq _single
.b18f	a9 20		lda #$20			lda #%00100000
.b191	05 0c		ora $0c				ora status
.b193	85 0c		sta $0c				sta status
.b195	a5 1b		lda $1b				lda tmp4+1
.b197	f0 15		beq $b1ae			beq _done	; no minus, all done
.b199	20 f1 c6	jsr $c6f1			jsr DNegate
.b19c	4c ae b1	jmp $b1ae			jmp _done
.b19f					_single:
.b19f	e8		inx				inx		; convert ud to u
.b1a0	e8		inx				inx
.b1a1	a9 df		lda #$df			lda #$ff-%00100000
.b1a3	25 0c		and $0c				and status
.b1a5	85 0c		sta $0c				sta status
.b1a7	a5 1b		lda $1b				lda tmp4+1
.b1a9	f0 03		beq $b1ae			beq _done	; no minus, all done
.b1ab	20 c2 c6	jsr $c6c2			jsr Negate
.b1ae					_done:
.b1ae	68		pla				pla
.b1af	8d 00 03	sta $0300			sta base
=211					CodeLen	.var *-XtPtr1
=$b1b2					Here1 = *	; remember here
>b0dd	d3					.byte CodeLen	;patch wh_CodeLength
.b1b2	60		rts				rts
.b1b3					_MinusCheck:
.b1b3	c9 2d		cmp #$2d			cmp #'-'		; a minus sign?
.b1b5	d0 09		bne $b1c0			bne +
.b1b7	c6 1b		dec $1b				dec tmp4+1		; set flag
.b1b9	20 7c ca	jsr $ca7c			jsr NOS_One_Plus	; start one character later
.b1bc	d6 24		dec $24,x			dec DStack+0,x		; decrease string length by one
.b1be	a1 26		lda ($26,x)			lda (DStack+2,x)	; get next char
.b1c0	60		rts		+		rts
>b1c1	48 65 78			Name0:	.text "Hex"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=45380					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1c4	03					.byte (("Hex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=233					LinkDisplacement = Nt0-WordListLink
>b1c5	10					.byte WordFlags	;wh_Flags
>b1c6	03					.byte 3	;wh_CodeLength
>b1c7	e9					  .byte LinkDisplacement	; offset to previous nt
=$b1c8					XtPtr1 ::= *
=45380					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1c8	a9 10		lda #$10	Hex:		lda #16
.b1ca	d0 0d		bne $b1d9			bne decimal_a
=4					CodeLen	.var *-XtPtr1
=$b1cc					Here1 = *	; remember here
>b1c6	04					.byte CodeLen	;patch wh_CodeLength
>b1cc	44 65 63 69 6d 61 6c		Name0:	.text "Decimal"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=45395					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1d3	87					.byte (("Decimal"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>b1d4	00					.byte WordFlags	;wh_Flags
>b1d5	03					.byte 3	;wh_CodeLength
>b1d6	0f					  .byte LinkDisplacement	; offset to previous nt
=$b1d7					XtPtr1 ::= *
=45395					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1d7	a9 0a		lda #$0a	Decimal:	lda #10
.b1d9	8d 00 03	sta $0300	decimal_a:	sta base+0
.b1dc	a9 00		lda #$00			lda #0
.b1de	8d 01 03	sta $0301			sta base+1		; paranoid
=10					CodeLen	.var *-XtPtr1
=$b1e1					Here1 = *	; remember here
>b1d5	0a					.byte CodeLen	;patch wh_CodeLength
.b1e1	60		rts				rts
>b1e2	42 61 73 65			Name0:	.text "Base"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=45414					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1e6	a4					.byte (("Base"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>b1e7	10					.byte WordFlags	;wh_Flags
>b1e8	03					.byte 3	;wh_CodeLength
>b1e9	13					  .byte LinkDisplacement	; offset to previous nt
=$b1ea					XtPtr1 ::= *
=45414					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1ea	a0 03		ldy #$03			ldy #>base
.b1ec	a9 00		lda #$00			lda #<base
.b1ee	4c c1 b7	jmp $b7c1			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$b1f1					Here1 = *	; remember here
>b1e8	07					.byte CodeLen	;patch wh_CodeLength
>b1f1	43 6f 75 6e 74			Name0:	.text "Count"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=45430					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1f6	85					.byte (("Count"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>b1f7	50					.byte WordFlags	;wh_Flags
>b1f8	03					.byte 3	;wh_CodeLength
>b1f9	10					  .byte LinkDisplacement	; offset to previous nt
=$b1fa					XtPtr1 ::= *
=45430					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1fa					Count:
.b1fa	20 2b b4	jsr $b42b			jsr underflow_1
.b1fd	a1 24		lda ($24,x)			lda (DStack+0,x)	; A= number of characters
.b1ff	f6 24		inc $24,x			inc DStack+0,x		; move start address up by one
.b201	d0 02		bne $b205			bne +
.b203	f6 25		inc $25,x			inc DStack+1,x
.b205					+
.b205	4c f0 b7	jmp $b7f0			jmp PushZA		; push number of characters, return
=14					CodeLen	.var *-XtPtr1
=$b208					Here1 = *	; remember here
>b1f8	0e					.byte CodeLen	;patch wh_CodeLength
>b208	3f 50 61 69 72 43 74 6c		Name0:	.text "?PairCtlA"	;  name of word as a string, ending at wh_NameLastChar
>b210	41
=9					NameLength = *-Name0
=45457					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b211	29					.byte (("?PairCtlA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>b212	10					.byte WordFlags	;wh_Flags
>b213	03					.byte 3	;wh_CodeLength
>b214	1b					  .byte LinkDisplacement	; offset to previous nt
=$b215					XtPtr1 ::= *
=45457					WordListLink ::= Nt0 ; remember the nt of this word for later
.b215	d5 24		cmp $24,x	QPairCtlA:	cmp DStack+0,x
.b217	f0 05		beq $b21e			beq _8
.b219	a9 ea		lda #$ea			lda #$100+err_ControlMismatch
.b21b	4c 87 b4	jmp $b487			jmp ThrowA
.b21e	e8		inx		_8:		inx
.b21f	e8		inx				inx	; Drop n
.b220	60		rts				rts
=12					CodeLen	.var *-XtPtr1
=$b221					Here1 = *	; remember here
>b213	0c					.byte CodeLen	;patch wh_CodeLength
>0743					DoLeave  .word ?	; head of leave addr patch chain
>0745					DoStkIndex: .byte ?
>0746					DoIndexL: .fill DoStkDim
>074e					DoIndexH: .fill DoStkDim
>0756					DoFufaL:  .fill DoStkDim
>075e					DoFufaH:  .fill DoStkDim
>b221	3f 44 6f			Name0:	.text "?Do"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=45476					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b224	e3					.byte (("?Do"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>b225	1c					.byte WordFlags	;wh_Flags
>b226	03					.byte 3	;wh_CodeLength
>b227	13					  .byte LinkDisplacement	; offset to previous nt
=$b228					XtPtr1 ::= *
=45476					WordListLink ::= Nt0 ; remember the nt of this word for later
.b228					Question_Do:
.b228	20 64 b3	jsr $b364			jsr Do_Leave_Init
.b22b	a9 3f		lda #$3f			lda #<_runtime
.b22d	a0 b2		ldy #$b2			ldy #>_runtime
.b22f	20 39 cd	jsr $cd39			jsr Jsr_Comma_YA	; compile JSR _runtime
.b232	a9 d0		lda #$d0			lda #$d0		; compile BNE *+5
.b234	a0 03		ldy #$03			ldy #3
.b236	20 16 cd	jsr $cd16			jsr Comma_YA
.b239	20 47 b3	jsr $b347			jsr Leave		; compile JMP leave
.b23c	4c 5c b2	jmp $b25c			jmp Do_8		; finish
=23					CodeLen	.var *-XtPtr1
=$b23f					Here1 = *	; remember here
>b226	17					.byte CodeLen	;patch wh_CodeLength
.b23f					_runtime:
.b23f	20 64 b2	jsr $b264			jsr Do_Runtime	; start normally (we assume TOS!=NOS)
.b242	a5 12		lda $12				lda DoIndex+0	; Are TOS and NOS equal?
.b244	f0 01		beq $b247			beq _2
.b246	60		rts				rts		; return Z=0 to signal continue
.b247	a5 13		lda $13		_2:		lda DoIndex+1
.b249	c9 80		cmp #$80			cmp #$80
.b24b	60		rts				rts		; return Z
>b24c	44 6f				Name0:	.text "Do"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=45518					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b24e	e2					.byte (("Do"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>b24f	1c					.byte WordFlags	;wh_Flags
>b250	03					.byte 3	;wh_CodeLength
>b251	2a					  .byte LinkDisplacement	; offset to previous nt
=$b252					XtPtr1 ::= *
=45518					WordListLink ::= Nt0 ; remember the nt of this word for later
.b252					Do:
.b252	20 64 b3	jsr $b364			jsr Do_Leave_Init
.b255	a9 64		lda #$64			lda #<Do_runtime
.b257	a0 b2		ldy #$b2			ldy #>Do_runtime
.b259	20 39 cd	jsr $cd39			jsr Jsr_Comma_YA	; compile JSR _runtime
.b25c	20 40 ca	jsr $ca40	Do_8:		jsr Here		; remember loop body start addr
.b25f	a9 52		lda #$52			lda #<Do		; identifier
.b261	4c f0 b7	jmp $b7f0			jmp PushZA
=18					CodeLen	.var *-XtPtr1
=$b264					Here1 = *	; remember here
>b250	12					.byte CodeLen	;patch wh_CodeLength
.b264					Do_Runtime:
.b264	ce 45 07	dec $0745			dec DoStkIndex		; alloc DO stack entry
.b267	ac 45 07	ldy $0745			ldy DoStkIndex
.b26a	30 2d		bmi $b299			bmi _TooDeep
.b26c	a5 12		lda $12				lda DoIndex+0		; save previous DoIndex
.b26e	99 46 07	sta $0746,y			sta DoIndexL,y
.b271	a5 13		lda $13				lda DoIndex+1
.b273	99 4e 07	sta $074e,y			sta DoIndexH,y
.b276	38		sec				sec			; fudge factor (FUFA)= $8000 - limit
.b277	a9 00		lda #$00			lda #0			;   the number that will trip the overflow flag
.b279	f5 26		sbc $26,x			sbc DStack+2,x
.b27b	99 56 07	sta $0756,y			sta DoFuFaL,y
.b27e	a9 80		lda #$80			lda #$80
.b280	f5 27		sbc $27,x			sbc DStack+3,x
.b282	99 5e 07	sta $075e,y			sta DoFuFaH,y
.b285	18		clc				clc			; index= FUFA plus original index
.b286	b5 24		lda $24,x			lda DStack+0,x
.b288	79 56 07	adc $0756,y			adc DoFuFaL,y
.b28b	85 12		sta $12				sta DoIndex+0
.b28d	b5 25		lda $25,x			lda DStack+1,x
.b28f	79 5e 07	adc $075e,y			adc DoFuFaH,y
.b292	85 13		sta $13				sta DoIndex+1
.b294	e8		inx				inx			; Drop orig index
.b295	e8		inx				inx
.b296	e8		inx				inx			; Drop orig limit
.b297	e8		inx				inx
.b298	60		rts				rts			; return
.b299	a9 f9		lda #$f9	_TooDeep:	lda #$100+err_DoLoop_TooDeep
.b29b	20 87 b4	jsr $b487			jsr ThrowA
>b29e	4c 6f 6f 70			Name0:	.text "Loop"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=45602					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b2a2	04					.byte (("Loop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=84					LinkDisplacement = Nt0-WordListLink
>b2a3	1c					.byte WordFlags	;wh_Flags
>b2a4	03					.byte 3	;wh_CodeLength
>b2a5	54					  .byte LinkDisplacement	; offset to previous nt
=$b2a6					XtPtr1 ::= *
=45602					WordListLink ::= Nt0 ; remember the nt of this word for later
.b2a6					Loop:
.b2a6	a9 ad		lda #$ad			lda #<_Runtime
.b2a8	a0 b2		ldy #$b2			ldy #>_Runtime
.b2aa	4c c8 b2	jmp $b2c8			jmp Plus_Loop_5
=7					CodeLen	.var *-XtPtr1
=$b2ad					Here1 = *	; remember here
>b2a4	07					.byte CodeLen	;patch wh_CodeLength
.b2ad					_Runtime:
.b2ad	e6 12		inc $12				inc DoIndex+0
.b2af	f0 02		beq $b2b3			beq _Runtime2
.b2b1	b8		clv				clv			; return V=0 to signal loop back
.b2b2	60		rts				rts
.b2b3	18		clc		_Runtime2:	clc
.b2b4	a5 13		lda $13				lda DoIndex+1		; handle carry from lo byte
.b2b6	69 01		adc #$01			adc #1
.b2b8	85 13		sta $13				sta DoIndex+1
.b2ba	60		rts				rts			; return V to signal loop back
>b2bb	2b 4c 6f 6f 70			Name0:	.text "+Loop"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=45632					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b2c0	05					.byte (("+Loop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>b2c1	1c					.byte WordFlags	;wh_Flags
>b2c2	03					.byte 3	;wh_CodeLength
>b2c3	1e					  .byte LinkDisplacement	; offset to previous nt
=$b2c4					XtPtr1 ::= *
=45632					WordListLink ::= Nt0 ; remember the nt of this word for later
.b2c4					Plus_Loop:
.b2c4	a9 d2		lda #$d2			lda #<Plus_Loop_Runtime
.b2c6	a0 b2		ldy #$b2			ldy #>Plus_Loop_Runtime
.b2c8	20 e9 b2	jsr $b2e9	Plus_Loop_5:	jsr Loop_End		; compile JSR _runtime, BVC back
.b2cb	a9 a9		lda #$a9			lda #<(Unloop-wh_LinkNt-1)
.b2cd	a0 b2		ldy #$b2			ldy #>(Unloop-wh_LinkNt-1)
.b2cf	4c c4 b6	jmp $b6c4			jmp Compile_Comma_NT_YA ; compile Unloop, return
=14					CodeLen	.var *-XtPtr1
=$b2d2					Here1 = *	; remember here
>b2c2	0e					.byte CodeLen	;patch wh_CodeLength
.b2d2					Plus_Loop_Runtime:
.b2d2	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b2d4	b0 10		bcs $b2e6		bcs Throw_Stack_12
.b2d6	18		clc				clc			; DoIndex += step
.b2d7	b5 24		lda $24,x			lda DStack+0,x
.b2d9	65 12		adc $12				adc DoIndex+0
.b2db	85 12		sta $12				sta DoIndex+0
.b2dd	b5 25		lda $25,x			lda DStack+1,x
.b2df	65 13		adc $13				adc DoIndex+1
.b2e1	85 13		sta $13				sta DoIndex+1
.b2e3	e8		inx				inx			; Drop step
.b2e4	e8		inx				inx
.b2e5	60		rts				rts			; return V=0 to signal loop back
.b2e6	4c 4e b4	jmp $b44e	Throw_Stack_12: jmp Throw_Stack
.b2e9					Loop_End:
.b2e9	20 39 cd	jsr $cd39			jsr Jsr_Comma_YA	; compile JSR runtime
.b2ec	a9 52		lda #$52			lda #<Do		; check id
.b2ee	20 15 b2	jsr $b215	Loop_End_3:	jsr QPairCtlA
.b2f1	a9 50		lda #$50			lda #$50		; compile BVC body
.b2f3	20 23 a7	jsr $a723			jsr Branch_CommaA
.b2f6	ac 43 07	ldy $0743			ldy DoLeave+0		; for each leave addr entry
.b2f9	ad 44 07	lda $0744			lda DoLeave+1
.b2fc	f0 1b		beq $b319			beq _p9
.b2fe	84 14		sty $14		_p1:		sty tmp1+0		;   save entry pointer
.b300	85 15		sta $15				sta tmp1+1
.b302	a0 01		ldy #$01			ldy #1			;   save link
.b304	b1 14		lda ($14),y			lda (tmp1),y
.b306	48		pha				pha
.b307	88		dey				dey
.b308	b1 14		lda ($14),y			lda (tmp1),y
.b30a	48		pha				pha
.b30b	a5 00		lda $00				lda cp+0		;   patch addr
.b30d	91 14		sta ($14),y			sta (tmp1),y
.b30f	a5 01		lda $01				lda cp+1
.b311	c8		iny				iny
.b312	91 14		sta ($14),y			sta (tmp1),y
.b314	68		pla				pla			;   get saved link
.b315	a8		tay				tay
.b316	68		pla				pla
.b317	d0 e5		bne $b2fe			bne _p1
.b319					_p9:
.b319	20 02 b4	jsr $b402			jsr PopYA		; restore DoLeave
.b31c	8d 43 07	sta $0743			sta DoLeave+0
.b31f	8c 44 07	sty $0744			sty DoLeave+1
.b322	60		rts				rts
>b323	55 6e 6c 6f 6f 70		Name0:	.text "Unloop"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=45737					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b329	06					.byte (("Unloop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$04					WordFlags ::= CO	; modifiable copy, remember for later
=105					LinkDisplacement = Nt0-WordListLink
>b32a	04					.byte WordFlags	;wh_Flags
>b32b	03					.byte 3	;wh_CodeLength
>b32c	69					  .byte LinkDisplacement	; offset to previous nt
=$b32d					XtPtr1 ::= *
=45737					WordListLink ::= Nt0 ; remember the nt of this word for later
.b32d					Unloop:
.b32d	ac 45 07	ldy $0745			ldy DoStkIndex
.b330	b9 46 07	lda $0746,y			lda DoIndexL,y	; restore Index
.b333	85 12		sta $12				sta DoIndex+0
.b335	b9 4e 07	lda $074e,y			lda DoIndexH,y
.b338	85 13		sta $13				sta DoIndex+1
.b33a	ee 45 07	inc $0745			inc DoStkIndex	; drop Do stack entry
=16					CodeLen	.var *-XtPtr1
=$b33d					Here1 = *	; remember here
>b32b	10					.byte CodeLen	;patch wh_CodeLength
.b33d	60		rts				rts
>b33e	4c 65 61 76 65			Name0:	.text "Leave"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=45763					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b343	a5					.byte (("Leave"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+NN+CO	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>b344	1c					.byte WordFlags	;wh_Flags
>b345	03					.byte 3	;wh_CodeLength
>b346	1a					  .byte LinkDisplacement	; offset to previous nt
=$b347					XtPtr1 ::= *
=45763					WordListLink ::= Nt0 ; remember the nt of this word for later
.b347					Leave:
.b347	a9 4c		lda #$4c			lda #$4c	; JMP abs
.b349	20 ff cc	jsr $ccff			jsr C_Comma_A
.b34c	a5 01		lda $01				lda cp+1	; save cp
.b34e	48		pha				pha
.b34f	a5 00		lda $00				lda cp+0
.b351	48		pha				pha
.b352	ad 43 07	lda $0743			lda DoLeave+0	; compile DoLeave link, patched later
.b355	ac 44 07	ldy $0744			ldy DoLeave+1
.b358	20 16 cd	jsr $cd16			jsr Comma_YA
.b35b	68		pla				pla		; update DoLeave
.b35c	8d 43 07	sta $0743			sta DoLeave+0
.b35f	68		pla				pla
.b360	8d 44 07	sta $0744			sta DoLeave+1
=28					CodeLen	.var *-XtPtr1
=$b363					Here1 = *	; remember here
>b345	1c					.byte CodeLen	;patch wh_CodeLength
.b363	60		rts				rts
.b364					Do_Leave_Init:
.b364	ad 43 07	lda $0743			lda DoLeave+0
.b367	ac 44 07	ldy $0744			ldy DoLeave+1
.b36a	20 c1 b7	jsr $b7c1			jsr PushYA	; save old leave head
.b36d	a9 00		lda #$00			lda #0		; init
.b36f	8d 44 07	sta $0744			sta DoLeave+1
.b372	60		rts				rts
>b373	49				Name0:	.text "I"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=45812					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b374	21					.byte (("I"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$04					WordFlags ::= CO	; modifiable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>b375	04					.byte WordFlags	;wh_Flags
>b376	03					.byte 3	;wh_CodeLength
>b377	31					  .byte LinkDisplacement	; offset to previous nt
=$b378					XtPtr1 ::= *
=45812					WordListLink ::= Nt0 ; remember the nt of this word for later
.b378	ac 45 07	ldy $0745	I:		ldy DoStkIndex
.b37b	ca		dex				dex
.b37c	ca		dex				dex
.b37d	38		sec				sec		; n= fudged index - fudge factor (FUFA)
.b37e	a5 12		lda $12				lda DoIndex+0
.b380	f9 56 07	sbc $0756,y			sbc DoFuFaL,y
.b383	95 24		sta $24,x			sta DStack+0,x
.b385	a5 13		lda $13				lda DoIndex+1
.b387	f9 5e 07	sbc $075e,y			sbc DoFuFaH,y
.b38a	95 25		sta $25,x			sta DStack+1,x
=20					CodeLen	.var *-XtPtr1
=$b38c					Here1 = *	; remember here
>b376	14					.byte CodeLen	;patch wh_CodeLength
.b38c	60		rts				rts
>b38d	4a				Name0:	.text "J"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=45838					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b38e	41					.byte (("J"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$04					WordFlags ::= CO	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>b38f	04					.byte WordFlags	;wh_Flags
>b390	03					.byte 3	;wh_CodeLength
>b391	1a					  .byte LinkDisplacement	; offset to previous nt
=$b392					XtPtr1 ::= *
=45838					WordListLink ::= Nt0 ; remember the nt of this word for later
.b392	ac 45 07	ldy $0745	J:		ldy DoStkIndex
.b395	ca		dex				dex
.b396	ca		dex				dex
.b397	38		sec				sec		; n= 2nd fudged index - 2nd fudge factor (FUFA)
.b398	b9 46 07	lda $0746,y			lda DoIndexL+0,y	; LSB
.b39b	f9 57 07	sbc $0757,y			sbc DoFufaL+1,y
.b39e	95 24		sta $24,x			sta DStack+0,x
.b3a0	b9 4e 07	lda $074e,y			lda DoIndexH+0,y	; MSB
.b3a3	f9 5f 07	sbc $075f,y			sbc DoFufaH+1,y
.b3a6	95 25		sta $25,x			sta DStack+1,x
=22					CodeLen	.var *-XtPtr1
=$b3a8					Here1 = *	; remember here
>b390	16					.byte CodeLen	;patch wh_CodeLength
.b3a8	60		rts				rts
>b3a9	41 62 6f 72 74 22		Name0:	.text 'Abort"'	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=45871					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3af	46					.byte (('Abort"'[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>b3b0	1c					.byte WordFlags	;wh_Flags
>b3b1	03					.byte 3	;wh_CodeLength
>b3b2	21					  .byte LinkDisplacement	; offset to previous nt
=$b3b3					XtPtr1 ::= *
=45871					WordListLink ::= Nt0 ; remember the nt of this word for later
.b3b3					Abort_Quote:
.b3b3	20 fc b8	jsr $b8fc			jsr S_Quote		; compile the string literal
.b3b6	a0 b3		ldy #$b3			ldy #>_runtime		; compile JSR runtime, return
.b3b8	a9 bd		lda #$bd			lda #<_runtime
.b3ba	4c 39 cd	jmp $cd39			jmp Jsr_Comma_YA
=10					CodeLen	.var *-XtPtr1
=$b3bd					Here1 = *	; remember here
>b3b1	0a					.byte CodeLen	;patch wh_CodeLength
.b3bd					_runtime:
.b3bd	b5 28		lda $28,x			lda DStack+4,x
.b3bf	15 29		ora $29,x			ora DStack+5,x
.b3c1	d0 03		bne $b3c6			bne _do_abort	; true?
.b3c3	4c 99 ad	jmp $ad99			jmp ThreeDrop	; Drop three entries from the Data Stack
.b3c6					_do_abort:
.b3c6	20 f0 cd	jsr $cdf0			jsr Type	; print string
.b3c9	20 7c ab	jsr $ab7c			jsr CR		; We follow Gforth in going to a new line
.b3cc	a9 fe		lda #$fe			lda #$100+err_AbortQuote
.b3ce	4c 87 b4	jmp $b487			jmp ThrowA
>b3d1	41 62 6f 72 74			Name0:	.text "Abort"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=45910					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3d6	85					.byte (("Abort"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>b3d7	10					.byte WordFlags	;wh_Flags
>b3d8	03					.byte 3	;wh_CodeLength
>b3d9	27					  .byte LinkDisplacement	; offset to previous nt
=$b3da					XtPtr1 ::= *
=45910					WordListLink ::= Nt0 ; remember the nt of this word for later
.b3da	a9 ff		lda #$ff	Abort:		lda #$100+err_Abort
.b3dc	4c 87 b4	jmp $b487			jmp ThrowA
=5					CodeLen	.var *-XtPtr1
=$b3df					Here1 = *	; remember here
>b3d8	05					.byte CodeLen	;patch wh_CodeLength
>b3df	50 6f 70 41			Name0:	.text "PopA"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=45923					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3e3	24					.byte (("PopA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>b3e4	10					.byte WordFlags	;wh_Flags
>b3e5	03					.byte 3	;wh_CodeLength
>b3e6	0d					  .byte LinkDisplacement	; offset to previous nt
=$b3e7					XtPtr1 ::= *
=45923					WordListLink ::= Nt0 ; remember the nt of this word for later
.b3e7					PopA:
.b3e7	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b3e9	b0 63		bcs $b44e		bcs Throw_Stack
.b3eb	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b3ed	e8		inx				inx
.b3ee	e8		inx				inx
=8					CodeLen	.var *-XtPtr1
=$b3ef					Here1 = *	; remember here
>b3e5	08					.byte CodeLen	;patch wh_CodeLength
.b3ef	60		rts		                rts
.b3f0					PopA2:
.b3f0	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b3f2	b0 5a		bcs $b44e		bcs Throw_Stack
.b3f4	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b3f6	e8		inx				inx
.b3f7	e8		inx				inx
.b3f8	60		rts		                rts
>b3f9	50 6f 70 59 41			Name0:	.text "PopYA"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=45950					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3fe	25					.byte (("PopYA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>b3ff	10					.byte WordFlags	;wh_Flags
>b400	03					.byte 3	;wh_CodeLength
>b401	1b					  .byte LinkDisplacement	; offset to previous nt
=$b402					XtPtr1 ::= *
=45950					WordListLink ::= Nt0 ; remember the nt of this word for later
.b402					PopYA:
.b402	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b404	b0 48		bcs $b44e		bcs Throw_Stack
.b406	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to YA
.b408	b4 25		ldy $25,x			ldy DStack+1,x
.b40a	e8		inx				inx
.b40b	e8		inx				inx
=10					CodeLen	.var *-XtPtr1
=$b40c					Here1 = *	; remember here
>b400	0a					.byte CodeLen	;patch wh_CodeLength
.b40c	60		rts				rts
.b40d					PopTmp1:
.b40d	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b40f	b0 3d		bcs $b44e		bcs Throw_Stack
.b411	b5 24		lda $24,x			lda DStack+0,x	; PopYA
.b413	b4 25		ldy $25,x			ldy DStack+1,x
.b415	e8		inx				inx
.b416	e8		inx				inx
.b417	85 14		sta $14				sta tmp1+0
.b419	84 15		sty $15				sty tmp1+1
.b41b	60		rts				rts
>b41c	75 6e 64 65 72 66 6c 6f		Name0:	.text "underflow_1"	;  name of word as a string, ending at wh_NameLastChar
>b424	77 5f 31
=11					NameLength = *-Name0
=45991					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b427	2b					.byte (("underflow_1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=41					LinkDisplacement = Nt0-WordListLink
>b428	10					.byte WordFlags	;wh_Flags
>b429	03					.byte 3	;wh_CodeLength
>b42a	29					  .byte LinkDisplacement	; offset to previous nt
=$b42b					XtPtr1 ::= *
=45991					WordListLink ::= Nt0 ; remember the nt of this word for later
.b42b					underflow_1:
.b42b	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b42d	b0 1f		bcs $b44e		bcs Throw_Stack
=4					CodeLen	.var *-XtPtr1
=$b42f					Here1 = *	; remember here
>b429	04					.byte CodeLen	;patch wh_CodeLength
.b42f	60		rts				rts
>b430	75 6e 64 65 72 66 6c 6f		Name0:	.text "underflow_2"	;  name of word as a string, ending at wh_NameLastChar
>b438	77 5f 32
=11					NameLength = *-Name0
=46011					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b43b	4b					.byte (("underflow_2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>b43c	10					.byte WordFlags	;wh_Flags
>b43d	03					.byte 3	;wh_CodeLength
>b43e	14					  .byte LinkDisplacement	; offset to previous nt
=$b43f					XtPtr1 ::= *
=46011					WordListLink ::= Nt0 ; remember the nt of this word for later
.b43f					underflow_2:
.b43f	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b441	b0 0b		bcs $b44e		bcs Throw_Stack
=4					CodeLen	.var *-XtPtr1
=$b443					Here1 = *	; remember here
>b43d	04					.byte CodeLen	;patch wh_CodeLength
.b443	60		rts		                rts
.b444					underflow_3:
.b444	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.b446	b0 06		bcs $b44e		bcs Throw_Stack
.b448	60		rts		                rts
.b449					underflow_4:
.b449	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.b44b	b0 01		bcs $b44e		bcs Throw_Stack
.b44d	60		rts		                rts
.b44e					Throw_Stack:
.b44e	30 04		bmi $b454			bmi _over
.b450	a9 fc		lda #$fc			lda #$100+err_Stack_Underflow
.b452	d0 33		bne $b487			bne ThrowA
.b454	a9 fd		lda #$fd	_over:		lda #$100+err_Stack_Overflow
.b456	d0 2f		bne $b487			bne ThrowA
.b458					Throw_FPStack:
.b458	30 04		bmi $b45e			bmi _over
.b45a	a9 d3		lda #$d3			lda #$100+err_FPStackUnderflow
.b45c	d0 29		bne $b487			bne ThrowA
.b45e	a9 d4		lda #$d4	_over:		lda #$100+err_FPStackOverflow
.b460	d0 25		bne $b487			bne ThrowA
.b462					Throw_FpOutOfRange:
.b462	a9 d5		lda #$d5			lda #$100+err_FpOutOfRange
.b464	d0 21		bne $b487			bne ThrowA
>b466	3f 53 74 61 63 6b		Name0:	.text "?Stack"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=46060					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b46c	66					.byte (("?Stack"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>b46d	10					.byte WordFlags	;wh_Flags
>b46e	03					.byte 3	;wh_CodeLength
>b46f	31					  .byte LinkDisplacement	; offset to previous nt
=$b470					XtPtr1 ::= *
=46060					WordListLink ::= Nt0 ; remember the nt of this word for later
.b470					QStack:
.b470	e0 29		cpx #$29		cpx #-2*0+DStack0+1
.b472	b0 da		bcs $b44e		bcs Throw_Stack
.b474	a4 4c		ldy $4c				ldy FIndex		; check floating point stack
.b476	c0 0b		cpy #$0b			cpy #FDim+1
.b478	b0 de		bcs $b458			bcs Throw_FPStack
=10					CodeLen	.var *-XtPtr1
=$b47a					Here1 = *	; remember here
>b46e	0a					.byte CodeLen	;patch wh_CodeLength
.b47a	60		rts				rts			; all OK
>b47b	54 68 72 6f 77			Name0:	.text "Throw"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=46080					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b480	e5					.byte (("Throw"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>b481	10					.byte WordFlags	;wh_Flags
>b482	03					.byte 3	;wh_CodeLength
>b483	14					  .byte LinkDisplacement	; offset to previous nt
=$b484					XtPtr1 ::= *
=46080					WordListLink ::= Nt0 ; remember the nt of this word for later
.b484	20 e7 b3	jsr $b3e7	Throw:		jsr PopA		; pop n
.b487	20 b2 b4	jsr $b4b2	ThrowA:		jsr Type_Exception_Text_A ; print the associated error string
.b48a	a2 28		ldx #$28			ldx #DStack0		; reset data stack (in case of underflow)
.b48c					Abort_Core:
.b48c	20 b5 b8	jsr $b8b5			jsr SLiteral_runtime
.b48f	4c 95 b4	jmp $b495			  jmp +
>b492	3f 00 20					  .text "?",0," "	; signal an error to the simulator
.b495	20 f0 cd	jsr $cdf0	+		jsr Type
.b498	20 16 cf	jsr $cf16			jsr R_From		; show return stack TOS
.b49b	20 99 81	jsr $8199			jsr TypeSymbol
.b49e	20 31 cf	jsr $cf31			jsr R_Fetch		; show return stack NOS
.b4a1	20 99 81	jsr $8199			jsr TypeSymbol
.b4a4	20 7c ab	jsr $ab7c			jsr CR
.b4a7					Abort_Core2:
.b4a7	a9 08		lda #$08			lda #DoStkDim		; init do stack
.b4a9	8d 45 07	sta $0745			sta DoStkIndex
.b4ac	20 f5 b4	jsr $b4f5			jsr Empty_Stack		; empty the Data Stack & FP stack
.b4af	4c 04 b5	jmp $b504			jmp Quit		; continue into QUIT.
.b4b2					Type_Exception_Text_A:
.b4b2	85 16		sta $16				sta tmp2+0	; save error code
.b4b4	a9 57		lda #$57			lda #<Exception_Text_List
.b4b6	a0 da		ldy #$da			ldy #>Exception_Text_List	; for each table entry
.b4b8	85 18		sta $18				sta tmp3+0
.b4ba	84 19		sty $19				sty tmp3+1
.b4bc	a0 00		ldy #$00	_TestEntry:	ldy #0		;   code match?
.b4be	b1 18		lda ($18),y			lda (tmp3),y
.b4c0	f0 1a		beq $b4dc			beq _NotFound
.b4c2	c5 16		cmp $16				cmp tmp2+0
.b4c4	f0 11		beq $b4d7			beq _Found
.b4c6	c8		iny		-		iny		;   step to end of entry
.b4c7	b1 18		lda ($18),y			lda (tmp3),y
.b4c9	d0 fb		bne $b4c6			bne -
.b4cb	98		tya				tya		;   step to next entry
.b4cc	38		sec				sec
.b4cd	65 18		adc $18				adc tmp3+0
.b4cf	85 18		sta $18				sta tmp3+0
.b4d1	90 e9		bcc $b4bc			bcc _TestEntry
.b4d3	e6 19		inc $19				inc tmp3+1
.b4d5	d0 e5		bne $b4bc			bne _TestEntry
.b4d7					_Found:
.b4d7	a0 01		ldy #$01			ldy #1
.b4d9	4c 11 ce	jmp $ce11			jmp Print_ASCIIZ_tmp3_no_lf
.b4dc	a0 ff		ldy #$ff	_NotFound:	ldy #$ff		; print code
.b4de	a5 16		lda $16				lda tmp2+0
.b4e0	20 c1 b7	jsr $b7c1			jsr PushYA
.b4e3	4c e7 cb	jmp $cbe7			jmp Dot
=98					CodeLen	.var *-XtPtr1
=$b4e6					Here1 = *	; remember here
>b482	62					.byte CodeLen	;patch wh_CodeLength
>b4e6	45 6d 70 74 79 2d 53 74		Name0:	.text "Empty-Stack"	;  name of word as a string, ending at wh_NameLastChar
>b4ee	61 63 6b
=11					NameLength = *-Name0
=46193					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b4f1	6b					.byte (("Empty-Stack"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=113					LinkDisplacement = Nt0-WordListLink
>b4f2	10					.byte WordFlags	;wh_Flags
>b4f3	03					.byte 3	;wh_CodeLength
>b4f4	71					  .byte LinkDisplacement	; offset to previous nt
=$b4f5					XtPtr1 ::= *
=46193					WordListLink ::= Nt0 ; remember the nt of this word for later
.b4f5	a2 28		ldx #$28	Empty_Stack:	ldx #DStack0	; init data stack
.b4f7	a9 0a		lda #$0a			lda #FDim	; init FP stack
.b4f9	85 4c		sta $4c				sta FIndex
=6					CodeLen	.var *-XtPtr1
=$b4fb					Here1 = *	; remember here
>b4f3	06					.byte CodeLen	;patch wh_CodeLength
.b4fb	60		rts				rts
>b4fc	51 75 69 74			Name0:	.text "Quit"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=46208					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b500	84					.byte (("Quit"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>b501	10					.byte WordFlags	;wh_Flags
>b502	03					.byte 3	;wh_CodeLength
>b503	0f					  .byte LinkDisplacement	; offset to previous nt
=$b504					XtPtr1 ::= *
=46208					WordListLink ::= Nt0 ; remember the nt of this word for later
.b504					Quit:
.b504	8a		txa				txa		; Save the DStack that we just defined
.b505	a2 ff		ldx #$ff			ldx #rsp0
.b507	9a		txs				txs
.b508	aa		tax				tax		; Restore the DStack. Dude, seriously.
.b509	a9 00		lda #$00			lda #0		; SOURCE-ID= zero (keyboard input)
.b50b	85 02		sta $02				sta insrc+0
.b50d	85 03		sta $03				sta insrc+1
.b50f	20 52 b7	jsr $b752			jsr Left_Bracket_NoCheck ; switch to interpret state
.b512					_get_line:
.b512	a9 00		lda #$00			lda #<buffer0	; input buffer, this is paranoid
.b514	85 04		sta $04				sta cib+0
.b516	a9 02		lda #$02			lda #>buffer0
.b518	85 05		sta $05				sta cib+1
.b51a	20 7e c2	jsr $c27e			jsr Refill		; ( -- f )
.b51d	b5 24		lda $24,x			lda DStack+0,x
.b51f	d0 05		bne $b526			bne +
.b521	a9 6b		lda #$6b			lda #$100+err_Refill	; REFILL returned a FALSE flag, something went wrong
.b523	4c 87 b4	jmp $b487			jmp ThrowA
.b526	e8		inx		+		inx			; drop the flag
.b527	e8		inx				inx
.b528	20 3f b5	jsr $b53f			jsr interpret
.b52b	a5 0a		lda $0a				lda state
.b52d	d0 06		bne $b535			bne _print_compiled
.b52f	a9 23		lda #$23			lda #<str_ok
.b531	a0 da		ldy #$da			ldy #>str_ok
.b533	d0 04		bne $b539			bne _print
.b535	a9 27		lda #$27	_print_compiled: lda #<str_compiled	; "compile" string
.b537	a0 da		ldy #$da			ldy #>str_compiled
.b539	20 1c ce	jsr $ce1c	_print:		jsr Print_ASCIIZ_YA
.b53c	4c 12 b5	jmp $b512			jmp _get_line
=59					CodeLen	.var *-XtPtr1
=$b53f					Here1 = *	; remember here
>b502	3b					.byte CodeLen	;patch wh_CodeLength
.b53f					Interpret:
.b53f					_loop:
.b53f	20 70 b4	jsr $b470			jsr QStack		; check stack bounds
.b542	20 80 ba	jsr $ba80			jsr parse_name		; ( "string" -- addr u )
.b545	b5 24		lda $24,x	                lda DStack+0,x		; empty line?
.b547	f0 53		beq $b59c	                beq _line_done
.b549	20 bc cc	jsr $ccbc			jsr Two_dup		; ( addr u -- addr u addr u )
.b54c	20 6a bc	jsr $bc6a			jsr find_name		; ( addr u addr u -- addr u nt|0 )
.b54f	b5 25		lda $25,x			lda DStack+1,x		; word found?
.b551	d0 1b		bne $b56e			bne _got_name_token
.b553	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.b554	e8		inx		                inx
.b555	20 df b0	jsr $b0df	                jsr Number           ; ( addr u -- u|d )
.b558	a5 0a		lda $0a		                lda state		; interpreting?
.b55a	f0 e3		beq $b53f	                beq _loop		;   we're done
.b55c	a9 20		lda #$20	                lda #$20		; double cell number?
.b55e	24 0c		bit $0c		                bit status
.b560	f0 06		beq $b568	                beq _single_number
.b562	20 5c b8	jsr $b85c			jsr Two_literal		; compile a double number
.b565	4c 3f b5	jmp $b53f			jmp _loop
.b568	20 76 b7	jsr $b776	_single_number:	jsr Literal		; compile a single number
.b56b	4c 3f b5	jmp $b53f			jmp _loop
.b56e					_got_name_token:
.b56e	20 a8 c9	jsr $c9a8			jsr Nip
.b571	20 a8 c9	jsr $c9a8			jsr Nip			; ( nt )
.b574	85 14		sta $14				sta tmp1+0		; save a work copy of nt
.b576	84 15		sty $15				sty tmp1+1
.b578	a0 81		ldy #$81			ldy #Wh_Flags		; get word flags, we'll need them shortly
.b57a	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b57c	a4 0a		ldy $0a				ldy state		; interpreting or compiling?
.b57e	d0 12		bne $b592			bne _compile
.b580	29 04		and #$04			and #CO			; is the word COMPILE-ONLY?
.b582	f0 05		beq $b589			beq _execute
.b584	a9 f2		lda #$f2			lda #$100+err_CompileOnly ;   complain & quit
.b586	20 87 b4	jsr $b487			jsr ThrowA
.b589	20 b5 bd	jsr $bdb5	_execute:	jsr Name_To_Int		; ( nt -- xt )
.b58c	20 2d ce	jsr $ce2d			jsr Execute		; EXECUTE the xt that is TOS
.b58f	4c 3f b5	jmp $b53f	                jmp _loop
.b592					_compile:
.b592	29 08		and #$08			and #IM			; is the word IMMEDIATE?
.b594	d0 f3		bne $b589			bne _execute		;   IMMEDIATE word, execute now
.b596	20 c1 b6	jsr $b6c1			jsr Compile_Comma_NT	; Compile the nt into the Dictionary
.b599	4c 3f b5	jmp $b53f			jmp _loop
.b59c					_line_done:
.b59c	e8		inx				inx			; drop stuff from PARSE_NAME
.b59d	e8		inx				inx
.b59e	e8		inx				inx
.b59f	e8		inx				inx
.b5a0	60		rts				rts
>b5a1	49 6d 6d 65 64 69 61 74		Name0:	.text "Immediate"	;  name of word as a string, ending at wh_NameLastChar
>b5a9	65
=9					NameLength = *-Name0
=46378					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b5aa	a9					.byte (("Immediate"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=170					LinkDisplacement = Nt0-WordListLink
>b5ab	10					.byte WordFlags	;wh_Flags
>b5ac	03					.byte 3	;wh_CodeLength
>b5ad	aa					  .byte LinkDisplacement	; offset to previous nt
=$b5ae					XtPtr1 ::= *
=46378					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5ae	a9 08		lda #$08	Immediate:	lda #IM
.b5b0	48		pha		SetFlag:	pha
.b5b1	20 52 ba	jsr $ba52			jsr current_to_dp
.b5b4	a0 81		ldy #$81			ldy #Wh_Flags
.b5b6	68		pla				pla
.b5b7	11 10		ora ($10),y			ora (dp),y
.b5b9	91 10		sta ($10),y			sta (dp),y
=13					CodeLen	.var *-XtPtr1
=$b5bb					Here1 = *	; remember here
>b5ac	0d					.byte CodeLen	;patch wh_CodeLength
.b5bb	60		rts				rts
>b5bc	43 6f 6d 70 69 6c 65 2d		Name0:	.text "Compile-only"	;  name of word as a string, ending at wh_NameLastChar
>b5c4	6f 6e 6c 79
=12					NameLength = *-Name0
=46408					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b5c8	2c					.byte (("Compile-only"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>b5c9	10					.byte WordFlags	;wh_Flags
>b5ca	03					.byte 3	;wh_CodeLength
>b5cb	1e					  .byte LinkDisplacement	; offset to previous nt
=$b5cc					XtPtr1 ::= *
=46408					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5cc	a9 04		lda #$04	Compile_Only:	lda #CO
.b5ce	d0 e0		bne $b5b0			bne SetFlag
=4					CodeLen	.var *-XtPtr1
=$b5d0					Here1 = *	; remember here
>b5ca	04					.byte CodeLen	;patch wh_CodeLength
>b5d0	6e 65 76 65 72 2d 6e 61		Name0:	.text "never-native"	;  name of word as a string, ending at wh_NameLastChar
>b5d8	74 69 76 65
=12					NameLength = *-Name0
=46428					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b5dc	ac					.byte (("never-native"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>b5dd	10					.byte WordFlags	;wh_Flags
>b5de	03					.byte 3	;wh_CodeLength
>b5df	14					  .byte LinkDisplacement	; offset to previous nt
=$b5e0					XtPtr1 ::= *
=46428					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5e0	20 52 ba	jsr $ba52	Never_Native:	jsr current_to_dp
.b5e3	a0 81		ldy #$81			ldy #Wh_Flags
.b5e5	b1 10		lda ($10),y			lda (dp),y
.b5e7	09 10		ora #$10			ora #NN		; set NN flag
.b5e9	29 df		and #$df			and #$ff-AN	; clear AN flag
.b5eb	91 10		sta ($10),y			sta (dp),y
=13					CodeLen	.var *-XtPtr1
=$b5ed					Here1 = *	; remember here
>b5de	0d					.byte CodeLen	;patch wh_CodeLength
.b5ed	60		rts				rts
>b5ee	61 6c 77 61 79 73 2d 6e		Name0:	.text "always-native"	;  name of word as a string, ending at wh_NameLastChar
>b5f6	61 74 69 76 65
=13					NameLength = *-Name0
=46459					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b5fb	ad					.byte (("always-native"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>b5fc	10					.byte WordFlags	;wh_Flags
>b5fd	03					.byte 3	;wh_CodeLength
>b5fe	1f					  .byte LinkDisplacement	; offset to previous nt
=$b5ff					XtPtr1 ::= *
=46459					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5ff	20 52 ba	jsr $ba52	Always_Native:	jsr current_to_dp
.b602	a0 81		ldy #$81			ldy #Wh_Flags
.b604	b1 10		lda ($10),y			lda (dp),y
.b606	09 20		ora #$20			ora #AN		; Make sure AN flag is set
.b608	29 ef		and #$ef			and #$ff-NN	; and NN flag is clear.
.b60a	91 10		sta ($10),y			sta (dp),y
=13					CodeLen	.var *-XtPtr1
=$b60c					Here1 = *	; remember here
>b5fd	0d					.byte CodeLen	;patch wh_CodeLength
.b60c	60		rts				rts
>b60d	61 6c 6c 6f 77 2d 6e 61		Name0:	.text "allow-native"	;  name of word as a string, ending at wh_NameLastChar
>b615	74 69 76 65
=12					NameLength = *-Name0
=46489					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b619	ac					.byte (("allow-native"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>b61a	10					.byte WordFlags	;wh_Flags
>b61b	03					.byte 3	;wh_CodeLength
>b61c	1e					  .byte LinkDisplacement	; offset to previous nt
=$b61d					XtPtr1 ::= *
=46489					WordListLink ::= Nt0 ; remember the nt of this word for later
.b61d	20 52 ba	jsr $ba52	Allow_Native:	jsr current_to_dp
.b620	a0 81		ldy #$81			ldy #Wh_Flags	; offset for status byte
.b622	b1 10		lda ($10),y			lda (dp),y
.b624	29 cf		and #$cf			and #$ff-NN-AN	; AN and NN flag is clear.
.b626	91 10		sta ($10),y			sta (dp),y
=11					CodeLen	.var *-XtPtr1
=$b628					Here1 = *	; remember here
>b61b	0b					.byte CodeLen	;patch wh_CodeLength
.b628	60		rts				rts
>b629	6e 63 2d 6c 69 6d 69 74		Name0:	.text "nc-limit"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=46513					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b631	88					.byte (("nc-limit"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>b632	10					.byte WordFlags	;wh_Flags
>b633	03					.byte 3	;wh_CodeLength
>b634	18					  .byte LinkDisplacement	; offset to previous nt
=$b635					XtPtr1 ::= *
=46513					WordListLink ::= Nt0 ; remember the nt of this word for later
.b635	a0 03		ldy #$03			ldy #>nc_limit
.b637	a9 02		lda #$02			lda #<nc_limit
.b639	4c c1 b7	jmp $b7c1			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$b63c					Here1 = *	; remember here
>b633	07					.byte CodeLen	;patch wh_CodeLength
>b63c	73 74 72 69 70 2d 75 6e		Name0:	.text "strip-underflow"	;  name of word as a string, ending at wh_NameLastChar
>b644	64 65 72 66 6c 6f 77
=15					NameLength = *-Name0
=46539					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b64b	ef					.byte (("strip-underflow"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>b64c	10					.byte WordFlags	;wh_Flags
>b64d	03					.byte 3	;wh_CodeLength
>b64e	1a					  .byte LinkDisplacement	; offset to previous nt
=$b64f					XtPtr1 ::= *
=46539					WordListLink ::= Nt0 ; remember the nt of this word for later
.b64f	a0 03		ldy #$03			ldy #>uf_strip
.b651	a9 04		lda #$04			lda #<uf_strip
.b653	4c c1 b7	jmp $b7c1			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$b656					Here1 = *	; remember here
>b64d	07					.byte CodeLen	;patch wh_CodeLength
>b656	70 6f 73 74 70 6f 6e 65		Name0:	.text "postpone"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=46558					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b65e	a8					.byte (("postpone"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>b65f	1c					.byte WordFlags	;wh_Flags
>b660	03					.byte 3	;wh_CodeLength
>b661	13					  .byte LinkDisplacement	; offset to previous nt
=$b662					XtPtr1 ::= *
=46558					WordListLink ::= Nt0 ; remember the nt of this word for later
.b662					Postpone:
.b662	20 b1 ba	jsr $bab1			jsr parse_name_check	; get name string
.b665	20 93 bc	jsr $bc93			jsr find_name_check	; lookup name
.b668	a0 81		ldy #$81			ldy #Wh_Flags		; IMMEDIATE word?
.b66a	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b66c	29 08		and #$08			and #IM
.b66e	f0 03		beq $b673			beq _not_immediate
.b670	4c c1 b6	jmp $b6c1			jmp Compile_Comma_NT	; compile it as if it was not IMMEDIATE
.b673					_not_immediate:
.b673	20 a8 b7	jsr $b7a8			jsr LDYA_Immed_Comma		; compile LDA #; LDY # with nt of the word
.b676	a0 b6		ldy #$b6			ldy #>Compile_Comma_NT_YA	; compile COMPILE,
.b678	a9 c4		lda #$c4			lda #<Compile_Comma_NT_YA
.b67a	4c 39 cd	jmp $cd39			jmp Jsr_Comma_YA
=27					CodeLen	.var *-XtPtr1
=$b67d					Here1 = *	; remember here
>b660	1b					.byte CodeLen	;patch wh_CodeLength
>b67d	52 65 63 75 72 73 65		Name0:	.text "Recurse"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=46596					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b684	a7					.byte (("Recurse"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>b685	1c					.byte WordFlags	;wh_Flags
>b686	03					.byte 3	;wh_CodeLength
>b687	26					  .byte LinkDisplacement	; offset to previous nt
=$b688					XtPtr1 ::= *
=46596					WordListLink ::= Nt0 ; remember the nt of this word for later
.b688					Recurse:
.b688	a5 0e		lda $0e				lda WorkWord+0
.b68a	a4 0f		ldy $0f				ldy WorkWord+1
.b68c	20 c1 b7	jsr $b7c1			jsr PushYA
.b68f	24 0c		bit $0c				bit status		; does WorkWord contain xt or nt?
.b691	50 10		bvc $b6a3			bvc _xt
.b693	a0 81		ldy #$81			ldy #wh_Flags		; is it Always-Native ?
.b695	b1 0e		lda ($0e),y			lda (WorkWord),y
.b697	29 20		and #$20			and #AN
.b699	f0 05		beq $b6a0			beq _NotAn
.b69b	a9 e5		lda #$e5			lda #$100+err_InvalidRecursion
.b69d	20 87 b4	jsr $b487			jsr ThrowA
.b6a0					_NotAN:
.b6a0	20 b5 bd	jsr $bdb5			jsr Name_To_Int		; convert nt to xt
.b6a3					_xt:
.b6a3	4c 36 cd	jmp $cd36			jmp Jsr_Comma		; compile JSR xt, return
=30					CodeLen	.var *-XtPtr1
=$b6a6					Here1 = *	; remember here
>b686	1e					.byte CodeLen	;patch wh_CodeLength
>b6a6	43 6f 6d 70 69 6c 65 2c		Name0:	.text "Compile,"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=46638					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b6ae	88					.byte (("Compile,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>b6af	10					.byte WordFlags	;wh_Flags
>b6b0	03					.byte 3	;wh_CodeLength
>b6b1	2a					  .byte LinkDisplacement	; offset to previous nt
=$b6b2					XtPtr1 ::= *
=46638					WordListLink ::= Nt0 ; remember the nt of this word for later
.b6b2					Compile_Comma:
.b6b2	20 6e cf	jsr $cf6e			jsr Dup			; ( xt xt )
.b6b5	20 64 bd	jsr $bd64			jsr Int_To_Name		; ( xt nt )	does a dictionary search, tmp1=nt
.b6b8	e8		inx				inx			; drop nt
.b6b9	e8		inx				inx
.b6ba	a5 15		lda $15				lda tmp1+1
.b6bc	d0 0a		bne $b6c8			bne Compile_Comma_NT_Tmp1
.b6be	4c 36 cd	jmp $cd36			jmp Jsr_Comma		; compile jsr, return
.b6c1					Compile_Comma_NT:
.b6c1	20 02 b4	jsr $b402			jsr PopYA
.b6c4					Compile_Comma_NT_YA:
.b6c4	85 14		sta $14				sta tmp1+0		; tmp1= nt
.b6c6	84 15		sty $15				sty tmp1+1
.b6c8					Compile_Comma_NT_Tmp1:
.b6c8	20 c2 bd	jsr $bdc2			jsr NameToIntTmp	; tmp2= xt
.b6cb	a5 16		lda $16				lda tmp2+0
.b6cd	a4 17		ldy $17				ldy tmp2+1
.b6cf	20 c1 b7	jsr $b7c1			jsr PushYA		; ( xt )
.b6d2	a0 82		ldy #$82			ldy #wh_CodeLength
.b6d4	b1 14		lda ($14),y			lda (tmp1),y
.b6d6	20 f0 b7	jsr $b7f0			jsr PushZA		; ( xt u )
.b6d9	a0 81		ldy #$81			ldy #Wh_Flags		; save word flags
.b6db	b1 14		lda ($14),y			lda (tmp1),y
.b6dd	29 30		and #$30			and #ST
.b6df	c9 30		cmp #$30			cmp #ST			; inline & strip RTS addr save/restore?
.b6e1	f0 2d		beq $b710			beq _strip
.b6e3	c9 10		cmp #$10			cmp #NN			; Never Native word?
.b6e5	f0 12		beq $b6f9			beq _jsr_opt
.b6e7	c9 20		cmp #$20			cmp #AN			; Always Native word?
.b6e9	f0 2f		beq $b71a			beq _inline
.b6eb	ad 03 03	lda $0303			lda nc_limit+1		; wordsize<=nc_limit?
.b6ee	d0 2a		bne $b71a			bne _inline
.b6f0	ad 02 03	lda $0302			lda nc_limit+0
.b6f3	d5 24		cmp $24,x			cmp DStack+0,x
.b6f5	f0 02		beq $b6f9			beq _jsr_opt
.b6f7	b0 21		bcs $b71a			bcs _inline
.b6f9					_jsr_opt:
.b6f9	ad 04 03	lda $0304			lda uf_strip
.b6fc	f0 0d		beq $b70b			beq _jsr
.b6fe	a0 81		ldy #$81			ldy #wh_Flags		; underflow strip & not stack strip?
.b700	b1 14		lda ($14),y			lda (tmp1),y
.b702	29 40		and #$40			and #UF
.b704	f0 05		beq $b70b			beq _jsr
.b706	a9 03		lda #$03			lda #3			;   strip the underflow check
.b708	20 2e ca	jsr $ca2e			jsr Nos_Plus_A
.b70b					_jsr:
.b70b	e8		inx				inx			; Drop len
.b70c	e8		inx				inx
.b70d	4c 36 cd	jmp $cd36			jmp Jsr_Comma		; compile jsr, return
.b710					_strip:
.b710	a9 06		lda #$06			lda #6			;   Adjust xt: skip over the leading RTS addr save
.b712	20 2e ca	jsr $ca2e			jsr Nos_Plus_A
.b715	a9 f4		lda #$f4			lda #$100-12		;   Adjust u: omit the leading RTS addr save & trailing RTS addr restore
.b717	20 62 ca	jsr $ca62			jsr minus_a
.b71a					_inline:
.b71a	ad 04 03	lda $0304			lda uf_strip+0		; user wants underflow stripping?
.b71d	f0 12		beq $b731			beq +
.b71f	a0 81		ldy #$81			ldy #wh_Flags		; this word contains underflow checking?
.b721	b1 14		lda ($14),y			lda (tmp1),y
.b723	29 40		and #$40			and #UF
.b725	f0 0a		beq $b731			beq +
.b727	a9 03		lda #$03			lda #3			;   Adjust xt: Start after underflow check
.b729	20 2e ca	jsr $ca2e			jsr Nos_Plus_A
.b72c	a9 fd		lda #$fd			lda #$100-3		;   Adjust u: omit underflow check
.b72e	20 62 ca	jsr $ca62			jsr minus_a
.b731					+
.b731	b5 24		lda $24,x			lda DStack+0,x		; compile code bytes
.b733	f0 0c		beq $b741			beq _copy_end
.b735	a1 26		lda ($26,x)	_copy_loop:	lda (DStack+2,x)
.b737	20 ff cc	jsr $ccff			jsr C_Comma_A
.b73a	20 7c ca	jsr $ca7c			jsr NOS_One_Plus
.b73d	d6 24		dec $24,x			dec DStack+0,x
.b73f	d0 f4		bne $b735			bne _copy_loop
.b741					_copy_end:
.b741	4c 4e c5	jmp $c54e			jmp Two_drop
=146					CodeLen	.var *-XtPtr1
=$b744					Here1 = *	; remember here
>b6b0	92					.byte CodeLen	;patch wh_CodeLength
>b744	5b				Name0:	.text "["	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=46789					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b745	61					.byte (("["[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=151					LinkDisplacement = Nt0-WordListLink
>b746	1c					.byte WordFlags	;wh_Flags
>b747	03					.byte 3	;wh_CodeLength
>b748	97					  .byte LinkDisplacement	; offset to previous nt
=$b749					XtPtr1 ::= *
=46789					WordListLink ::= Nt0 ; remember the nt of this word for later
.b749	a5 0a		lda $0a		Left_Bracket:	lda state+0		; Already in the interpret state?
.b74b	d0 05		bne $b752			bne Left_Bracket_NoCheck
.b74d	a9 69		lda #$69			lda #$100+err_AlreadyInterpreting
.b74f	4c 87 b4	jmp $b487			jmp ThrowA
.b752					Left_Bracket_NoCheck:
.b752	a9 00		lda #$00			lda #0
.b754	85 0a		sta $0a		Left_Bracket_3:	sta state+0
.b756	85 0b		sta $0b				sta state+1
=15					CodeLen	.var *-XtPtr1
=$b758					Here1 = *	; remember here
>b747	0f					.byte CodeLen	;patch wh_CodeLength
.b758	60		rts				rts
>b759	5d				Name0:	.text "]"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=46810					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b75a	a1					.byte (("]"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>b75b	18					.byte WordFlags	;wh_Flags
>b75c	03					.byte 3	;wh_CodeLength
>b75d	15					  .byte LinkDisplacement	; offset to previous nt
=$b75e					XtPtr1 ::= *
=46810					WordListLink ::= Nt0 ; remember the nt of this word for later
.b75e					Right_Bracket:
.b75e	a5 0a		lda $0a				lda state+0		; Already in the compile state?
.b760	f0 05		beq $b767			beq +
.b762	a9 68		lda #$68			lda #$100+err_AlreadyCompiling ;   complain and quit
.b764	4c 87 b4	jmp $b487			jmp ThrowA
.b767					+
.b767	a9 ff		lda #$ff			lda #$FF
.b769	d0 e9		bne $b754			bne Left_Bracket_3
=13					CodeLen	.var *-XtPtr1
=$b76b					Here1 = *	; remember here
>b75c	0d					.byte CodeLen	;patch wh_CodeLength
>b76b	4c 69 74 65 72 61 6c		Name0:	.text "Literal"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=46834					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b772	87					.byte (("Literal"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=92					WordFlags ::= IM+CO+UF+NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>b773	5c					.byte WordFlags	;wh_Flags
>b774	03					.byte 3	;wh_CodeLength
>b775	18					  .byte LinkDisplacement	; offset to previous nt
=$b776					XtPtr1 ::= *
=46834					WordListLink ::= Nt0 ; remember the nt of this word for later
.b776					Literal:
.b776	20 2b b4	jsr $b42b			jsr underflow_1
.b779	20 7f b7	jsr $b77f			jsr LitCompile		; compile load regs, choose a runtime routine
.b77c	4c c4 b6	jmp $b6c4			jmp Compile_Comma_NT_YA ; compile JSR runtime
=9					CodeLen	.var *-XtPtr1
=$b77f					Here1 = *	; remember here
>b774	09					.byte CodeLen	;patch wh_CodeLength
.b77f					LitCompile:
.b77f	b5 25		lda $25,x			lda DStack+1,x		; hi byte zero?
.b781	f0 08		beq $b78b			beq _ZByte
.b783	20 a8 b7	jsr $b7a8			jsr ldya_immed_comma	; compile "ldy #; lda #" using TOS
.b786	a9 3d		lda #$3d			lda #<(PushYA-wh_LinkNt-1) ; prepare for Compile_Comma_NT_YA or Jmp_Comma_NT_YA
.b788	a0 b7		ldy #$b7			ldy #>(PushYA-wh_LinkNt-1)
.b78a	60		rts				rts
.b78b					_ZByte:
.b78b	b4 24		ldy $24,x			ldy DStack+0,x		; is it 0 ?
.b78d	f0 08		beq $b797			beq _zero
.b78f	20 af b7	jsr $b7af			jsr lda_immed_comma	; compile "lda #" using TOS
.b792	a9 6c		lda #$6c			lda #<(PushZA-wh_LinkNt-1) ; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b794	a0 b7		ldy #$b7			ldy #>(PushZA-wh_LinkNt-1)
.b796	60		rts				rts
.b797	e8		inx		_zero:		inx			; drop
.b798	e8		inx				inx
.b799	a9 7a		lda #$7a			lda #<(Zero-wh_LinkNt-1)	; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b79b	a0 b7		ldy #$b7			ldy #>(Zero-wh_LinkNt-1)
.b79d	60		rts				rts
>b79e	4c 44 59 41 23 2c		Name0:	.text "LDYA#,"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=46884					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7a4	86					.byte (("LDYA#,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=50					LinkDisplacement = Nt0-WordListLink
>b7a5	10					.byte WordFlags	;wh_Flags
>b7a6	03					.byte 3	;wh_CodeLength
>b7a7	32					  .byte LinkDisplacement	; offset to previous nt
=$b7a8					XtPtr1 ::= *
=46884					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7a8					ldya_immed_comma:
.b7a8	a9 a0		lda #$a0			lda #$a0		; ldy #
.b7aa	b4 25		ldy $25,x			ldy DStack+1,x
.b7ac	20 16 cd	jsr $cd16			jsr Comma_YA
.b7af					lda_immed_comma:
.b7af	a9 a9		lda #$a9			lda #$a9		; lda #
.b7b1	20 ff cc	jsr $ccff			jsr C_Comma_A
.b7b4	4c fc cc	jmp $ccfc			jmp C_Comma
=15					CodeLen	.var *-XtPtr1
=$b7b7					Here1 = *	; remember here
>b7a6	0f					.byte CodeLen	;patch wh_CodeLength
>b7b7	50 75 73 68 59 41		Name0:	.text "PushYA"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=46909					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7bd	26					.byte (("PushYA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>b7be	00					.byte WordFlags	;wh_Flags
>b7bf	03					.byte 3	;wh_CodeLength
>b7c0	19					  .byte LinkDisplacement	; offset to previous nt
=$b7c1					XtPtr1 ::= *
=46909					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7c1	ca		dex		PushYA:		dex
.b7c2	ca		dex				dex
.b7c3	95 24		sta $24,x			sta DStack+0,x
.b7c5	94 25		sty $25,x			sty DStack+1,x
=6					CodeLen	.var *-XtPtr1
=$b7c7					Here1 = *	; remember here
>b7bf	06					.byte CodeLen	;patch wh_CodeLength
.b7c7	60		rts				rts
>b7c8	54 72 75 65			Name0:	.text "True"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=46924					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7cc	a4					.byte (("True"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>b7cd	00					.byte WordFlags	;wh_Flags
>b7ce	03					.byte 3	;wh_CodeLength
>b7cf	0f					  .byte LinkDisplacement	; offset to previous nt
=$b7d0					XtPtr1 ::= *
=46924					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7d0	a9 ff		lda #$ff	True:		lda #$FF
.b7d2	ca		dex		PushAA:		dex
.b7d3	ca		dex				dex
.b7d4	95 24		sta $24,x			sta DStack+0,x
.b7d6	95 25		sta $25,x			sta DStack+1,x
=8					CodeLen	.var *-XtPtr1
=$b7d8					Here1 = *	; remember here
>b7ce	08					.byte CodeLen	;patch wh_CodeLength
.b7d8	60		rts				rts
>b7d9	46 61 6c 73 65			Name0:	.text "False"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=46942					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7de	a5					.byte (("False"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>b7df	10					.byte WordFlags	;wh_Flags
>b7e0	03					.byte 3	;wh_CodeLength
>b7e1	12					  .byte LinkDisplacement	; offset to previous nt
=$b7e2					XtPtr1 ::= *
=46942					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7e2	a9 00		lda #$00	False:		lda #0
.b7e4	f0 0a		beq $b7f0			beq PushZA
=4					CodeLen	.var *-XtPtr1
=$b7e6					Here1 = *	; remember here
>b7e0	04					.byte CodeLen	;patch wh_CodeLength
>b7e6	50 75 73 68 5a 41		Name0:	.text "PushZA"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=46956					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7ec	26					.byte (("PushZA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>b7ed	00					.byte WordFlags	;wh_Flags
>b7ee	03					.byte 3	;wh_CodeLength
>b7ef	0e					  .byte LinkDisplacement	; offset to previous nt
=$b7f0					XtPtr1 ::= *
=46956					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7f0	ca		dex		PushZA:		dex
.b7f1	ca		dex				dex
.b7f2	95 24		sta $24,x			sta DStack+0,x
.b7f4	a9 00		lda #$00			lda #0
.b7f6	95 25		sta $25,x			sta DStack+1,x
=8					CodeLen	.var *-XtPtr1
=$b7f8					Here1 = *	; remember here
>b7ee	08					.byte CodeLen	;patch wh_CodeLength
.b7f8	60		rts				rts
>b7f9	30				Name0:	.text "0"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=46970					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7fa	01					.byte (("0"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>b7fb	10					.byte WordFlags	;wh_Flags
>b7fc	03					.byte 3	;wh_CodeLength
>b7fd	0e					  .byte LinkDisplacement	; offset to previous nt
=$b7fe					XtPtr1 ::= *
=46970					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7fe	a9 00		lda #$00	Zero:		lda #0
.b800	f0 ee		beq $b7f0			beq PushZA
=4					CodeLen	.var *-XtPtr1
=$b802					Here1 = *	; remember here
>b7fc	04					.byte CodeLen	;patch wh_CodeLength
>b802	31				Name0:	.text "1"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=46979					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b803	21					.byte (("1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>b804	10					.byte WordFlags	;wh_Flags
>b805	03					.byte 3	;wh_CodeLength
>b806	09					  .byte LinkDisplacement	; offset to previous nt
=$b807					XtPtr1 ::= *
=46979					WordListLink ::= Nt0 ; remember the nt of this word for later
.b807	a9 01		lda #$01	One:		lda #1
.b809	d0 e5		bne $b7f0			bne PushZA
=4					CodeLen	.var *-XtPtr1
=$b80b					Here1 = *	; remember here
>b805	04					.byte CodeLen	;patch wh_CodeLength
>b80b	32				Name0:	.text "2"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=46988					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b80c	41					.byte (("2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>b80d	10					.byte WordFlags	;wh_Flags
>b80e	03					.byte 3	;wh_CodeLength
>b80f	09					  .byte LinkDisplacement	; offset to previous nt
=$b810					XtPtr1 ::= *
=46988					WordListLink ::= Nt0 ; remember the nt of this word for later
.b810	a9 02		lda #$02	Two:		lda #2
.b812	d0 dc		bne $b7f0			bne PushZA
=4					CodeLen	.var *-XtPtr1
=$b814					Here1 = *	; remember here
>b80e	04					.byte CodeLen	;patch wh_CodeLength
>b814	42 6c				Name0:	.text "Bl"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=46998					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b816	82					.byte (("Bl"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>b817	10					.byte WordFlags	;wh_Flags
>b818	03					.byte 3	;wh_CodeLength
>b819	0a					  .byte LinkDisplacement	; offset to previous nt
=$b81a					XtPtr1 ::= *
=46998					WordListLink ::= Nt0 ; remember the nt of this word for later
.b81a	a9 20		lda #$20	Bl:		lda #AscSP
.b81c	d0 d2		bne $b7f0			bne PushZA
=4					CodeLen	.var *-XtPtr1
=$b81e					Here1 = *	; remember here
>b818	04					.byte CodeLen	;patch wh_CodeLength
>b81e	3e 49 6e			Name0:	.text ">In"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=47009					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b821	c3					.byte ((">In"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>b822	10					.byte WordFlags	;wh_Flags
>b823	03					.byte 3	;wh_CodeLength
>b824	0b					  .byte LinkDisplacement	; offset to previous nt
=$b825					XtPtr1 ::= *
=47009					WordListLink ::= Nt0 ; remember the nt of this word for later
.b825	a9 08		lda #$08			lda #ToIn
.b827	4c f0 b7	jmp $b7f0			jmp PushZA	; jmp to be a recognizable constant
=5					CodeLen	.var *-XtPtr1
=$b82a					Here1 = *	; remember here
>b823	05					.byte CodeLen	;patch wh_CodeLength
>b82a	53 74 61 74 65			Name0:	.text "State"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=47023					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b82f	a5					.byte (("State"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>b830	10					.byte WordFlags	;wh_Flags
>b831	03					.byte 3	;wh_CodeLength
>b832	0e					  .byte LinkDisplacement	; offset to previous nt
=$b833					XtPtr1 ::= *
=47023					WordListLink ::= Nt0 ; remember the nt of this word for later
.b833	a9 0a		lda #$0a			lda #state
.b835	4c f0 b7	jmp $b7f0			jmp PushZA	; jmp to be a recognizable constant
=5					CodeLen	.var *-XtPtr1
=$b838					Here1 = *	; remember here
>b831	05					.byte CodeLen	;patch wh_CodeLength
>b838	64 70				Name0:	.text "dp"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=47034					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b83a	02					.byte (("dp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>b83b	10					.byte WordFlags	;wh_Flags
>b83c	03					.byte 3	;wh_CodeLength
>b83d	0b					  .byte LinkDisplacement	; offset to previous nt
=$b83e					XtPtr1 ::= *
=47034					WordListLink ::= Nt0 ; remember the nt of this word for later
.b83e	a9 10		lda #$10			lda #dp
.b840	4c f0 b7	jmp $b7f0			jmp PushZA	; jmp to be a recognizable constant
=5					CodeLen	.var *-XtPtr1
=$b843					Here1 = *	; remember here
>b83c	05					.byte CodeLen	;patch wh_CodeLength
>b843	54 6d 70 31			Name0:	.text "Tmp1"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=47047					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b847	24					.byte (("Tmp1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>b848	10					.byte WordFlags	;wh_Flags
>b849	03					.byte 3	;wh_CodeLength
>b84a	0d					  .byte LinkDisplacement	; offset to previous nt
=$b84b					XtPtr1 ::= *
=47047					WordListLink ::= Nt0 ; remember the nt of this word for later
.b84b	a9 14		lda #$14			lda #tmp1
.b84d	4c f0 b7	jmp $b7f0			jmp PushZA	; jmp to be a recognizable constant
=5					CodeLen	.var *-XtPtr1
=$b850					Here1 = *	; remember here
>b849	05					.byte CodeLen	;patch wh_CodeLength
>b850	32 4c 69 74 65 72 61 6c		Name0:	.text "2Literal"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=47064					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b858	88					.byte (("2Literal"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=88					WordFlags ::= UF+IM+NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>b859	58					.byte WordFlags	;wh_Flags
>b85a	03					.byte 3	;wh_CodeLength
>b85b	11					  .byte LinkDisplacement	; offset to previous nt
=$b85c					XtPtr1 ::= *
=47064					WordListLink ::= Nt0 ; remember the nt of this word for later
.b85c					Two_literal:
.b85c	20 3f b4	jsr $b43f			jsr underflow_2 ; check double number
.b85f	20 8b cf	jsr $cf8b			jsr Swap
.b862	20 76 b7	jsr $b776			jsr Literal	; do lo cell
.b865	4c 76 b7	jmp $b776			jmp Literal	; do hi cell
=12					CodeLen	.var *-XtPtr1
=$b868					Here1 = *	; remember here
>b85a	0c					.byte CodeLen	;patch wh_CodeLength
>b868	53 4c 69 74 65 72 61 6c		Name0:	.text "SLiteral"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=47088					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b870	88					.byte (("SLiteral"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=92					WordFlags ::= CO+IM+UF+NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>b871	5c					.byte WordFlags	;wh_Flags
>b872	03					.byte 3	;wh_CodeLength
>b873	18					  .byte LinkDisplacement	; offset to previous nt
=$b874					XtPtr1 ::= *
=47088					WordListLink ::= Nt0 ; remember the nt of this word for later
.b874					SLiteral:
.b874	20 3f b4	jsr $b43f			jsr underflow_2
.b877	20 97 b8	jsr $b897			jsr SLiteral_Start	; compile header
.b87a	4c 8b b8	jmp $b88b			jmp _Move_Test
.b87d	a1 28		lda ($28,x)	_Move_Loop:	lda (DStack+4,x)
.b87f	20 ff cc	jsr $ccff			jsr C_Comma_A
.b882	f6 28		inc $28,x			inc DStack+4,x
.b884	d0 02		bne $b888			bne +
.b886	f6 29		inc $29,x			inc DStack+5,x
.b888					+
.b888	20 59 ca	jsr $ca59			jsr NOS_One_Minus
.b88b	b5 26		lda $26,x	_Move_Test:	lda DStack+2,x
.b88d	15 27		ora $27,x			ora DStack+3,x
.b88f	d0 ec		bne $b87d			bne _Move_Loop
.b891	20 a4 b8	jsr $b8a4			jsr SLiteral_End
.b894	4c 4e c5	jmp $c54e			jmp Two_Drop		; clean up and leave
=35					CodeLen	.var *-XtPtr1
=$b897					Here1 = *	; remember here
>b872	23					.byte CodeLen	;patch wh_CodeLength
.b897					SLiteral_Start:
.b897	a9 b5		lda #$b5			lda #<SLiteral_runtime	; compile JSR SLiteral_Runtime
.b899	a0 b8		ldy #$b8			ldy #>SLiteral_runtime
.b89b	20 39 cd	jsr $cd39			jsr Jsr_Comma_YA
.b89e	20 40 ca	jsr $ca40			jsr Here		; push addr of start of JMP
.b8a1	4c 4f cd	jmp $cd4f			jmp Jmp_Comma_YA	; compile JMP around string (dummy addr)
.b8a4					SLiteral_End:
.b8a4	20 72 ca	jsr $ca72			jsr One_Plus
.b8a7	a5 00		lda $00				lda cp+0		; Update the address of the jump to HERE.
.b8a9	81 24		sta ($24,x)			sta (DStack+0,x)
.b8ab	20 72 ca	jsr $ca72			jsr One_Plus
.b8ae	a5 01		lda $01				lda cp+1
.b8b0	81 24		sta ($24,x)			sta (DStack+0,x)
.b8b2	e8		inx				inx			; drop herej
.b8b3	e8		inx				inx
.b8b4	60		rts				rts
.b8b5					SLiteral_Runtime:
.b8b5	86 16		stx $16				stx tmp2	; save data stack index
.b8b7	ba		tsx				tsx
.b8b8	bd 01 01	lda $0101,x	SLiteral_Run2:	lda RStack+1,x	; tmp1= RTS addr
.b8bb	85 14		sta $14				sta tmp1+0
.b8bd	bd 02 01	lda $0102,x			lda RStack+2,x
.b8c0	85 15		sta $15				sta tmp1+1
.b8c2	a6 16		ldx $16				ldx tmp2	; restore data stack index
.b8c4	ca		dex				dex		; push string addr
.b8c5	ca		dex				dex
.b8c6	18		clc				clc
.b8c7	a5 14		lda $14				lda tmp1+0
.b8c9	69 04		adc #$04			adc #3+1	;   just after the following JMP + correcting for JSR behavior
.b8cb	95 24		sta $24,x			sta DStack+0,x
.b8cd	a5 15		lda $15				lda tmp1+1
.b8cf	69 00		adc #$00			adc #0
.b8d1	95 25		sta $25,x			sta DStack+1,x
.b8d3	ca		dex				dex		; push string length
.b8d4	ca		dex				dex
.b8d5	38		sec				sec
.b8d6	a0 02		ldy #$02			ldy #2		;   = string_end - string_addr
.b8d8	b1 14		lda ($14),y			lda (tmp1),y
.b8da	f5 26		sbc $26,x			sbc DStack+2,x
.b8dc	95 24		sta $24,x			sta DStack+0,x
.b8de	c8		iny				iny
.b8df	b1 14		lda ($14),y			lda (tmp1),y
.b8e1	f5 27		sbc $27,x			sbc DStack+3,x
.b8e3	95 25		sta $25,x			sta DStack+1,x
.b8e5	60		rts				rts
>b8e6	2e 22				Name0:	.text '."'	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=47208					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b8e8	42					.byte (('."'[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=120					LinkDisplacement = Nt0-WordListLink
>b8e9	1c					.byte WordFlags	;wh_Flags
>b8ea	03					.byte 3	;wh_CodeLength
>b8eb	78					  .byte LinkDisplacement	; offset to previous nt
=$b8ec					XtPtr1 ::= *
=47208					WordListLink ::= Nt0 ; remember the nt of this word for later
.b8ec					Dot_quote:
.b8ec	20 fc b8	jsr $b8fc			jsr S_Quote		; compile the string literal
.b8ef	a0 cd		ldy #$cd			ldy #>Type		; compile: print string
.b8f1	a9 f0		lda #$f0			lda #<Type
.b8f3	4c 39 cd	jmp $cd39			jmp Jsr_Comma_YA
=10					CodeLen	.var *-XtPtr1
=$b8f6					Here1 = *	; remember here
>b8ea	0a					.byte CodeLen	;patch wh_CodeLength
>b8f6	53 22				Name0:	.text 'S"'	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=47224					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b8f8	42					.byte (('S"'[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>b8f9	18					.byte WordFlags	;wh_Flags
>b8fa	03					.byte 3	;wh_CodeLength
>b8fb	10					  .byte LinkDisplacement	; offset to previous nt
=$b8fc					XtPtr1 ::= *
=47224					WordListLink ::= Nt0 ; remember the nt of this word for later
.b8fc					S_Quote:
.b8fc	a9 00		lda #$00			lda #0		; Don't handle escaped chars.
.b8fe					S_Quote_start:
.b8fe	48		pha				pha			; save "handle escaped chars" flag
.b8ff	a5 0a		lda $0a				lda state		; compiling?
.b901	f0 06		beq $b909			beq _15
.b903	20 97 b8	jsr $b897			jsr SLiteral_Start	; compile SLiteral header
.b906	4c 0c b9	jmp $b90c			jmp _19
.b909	20 40 ca	jsr $ca40	_15:		jsr Here		; remember start addr
.b90c					_19:
.b90c	68		pla				pla			; init t2 flags
.b90d	20 f0 b7	jsr $b7f0			jsr PushZA
.b910	20 fe b7	jsr $b7fe			jsr Zero		; init t3 flags
.b913					_savechars_loop:
.b913	a5 08		lda $08				lda toin+0		; LSB
.b915	c5 06		cmp $06				cmp ciblen+0
.b917	a5 09		lda $09				lda toin+1		; MSB
.b919	e5 07		sbc $07				sbc ciblen+1
.b91b	90 10		bcc $b92d			bcc _input_fine		; input buffer empty?
.b91d	20 7e c2	jsr $c27e			jsr Refill		; Refill it  ( -- f )
.b920	b5 24		lda $24,x			lda DStack+0,x		; Check result of refill.
.b922	d0 05		bne $b929			bne +
.b924	a9 6b		lda #$6b			lda #$100+err_refill	; Something when wrong with refill.
.b926	4c 87 b4	jmp $b487			jmp ThrowA
.b929	e8		inx		+		inx			; Drop the refill flag
.b92a	e8		inx				inx
.b92b	d0 e6		bne $b913			bne _savechars_loop	; jump back up to the empty check, just in
.b92d					_input_fine:
.b92d	18		clc				clc			; tmp1= A= the char at Cib+ToIn
.b92e	a5 04		lda $04				lda cib+0
.b930	85 14		sta $14				sta tmp1+0
.b932	a5 05		lda $05				lda cib+1
.b934	65 09		adc $09				adc toin+1
.b936	85 15		sta $15				sta tmp1+1
.b938	a4 08		ldy $08				ldy ToIn
.b93a	b1 14		lda ($14),y			lda (tmp1),y
.b93c	85 14		sta $14				sta tmp1
.b93e	e6 08		inc $08				inc toin+0		; Move on to the next character.
.b940	d0 02		bne $b944			bne +
.b942	e6 09		inc $09				inc toin+1
.b944					+
.b944	b4 26		ldy $26,x			ldy DStack+2,x		; handling escaped characters?
.b946	30 03		bmi $b94b			bmi +
.b948	4c ee b9	jmp $b9ee			jmp _regular_char
.b94b					+
.b94b	b4 27		ldy $27,x			ldy DStack+3,x  		; already seen the backslash?
.b94d	30 03		bmi $b952			bmi +
.b94f	4c e4 b9	jmp $b9e4			jmp _not_escaped
.b952					+
.b952	84 15		sty $15				sty tmp1+1
.b954	24 15		bit $15				bit tmp1+1		; in the middle of a \x sequence ?
.b956	70 25		bvs $b97d			bvs _check_esc_chars
.b958	a9 01		lda #$01			lda #1
.b95a	24 15		bit $15				bit tmp1+1
.b95c	d0 11		bne $b96f			bne _esc_x_second_digit
.b95e	c8		iny				iny			; Adjust flag for second digit next time.
.b95f	94 27		sty $27,x			sty DStack+3,x
.b961	a5 14		lda $14				lda tmp1+0		; Get the char again.
.b963	20 11 ba	jsr $ba11			jsr convert_hex_value	; Convert to hex
.b966	0a		asl a				asl			; This is the upper nybble, so move it up.
.b967	0a		asl a				asl
.b968	0a		asl a				asl
.b969	0a		asl a				asl
.b96a	95 24		sta $24,x			sta DStack+0,x		; Save it for later.
.b96c	4c f5 b9	jmp $b9f5			jmp _next_character
.b96f					_esc_x_second_digit:
.b96f	a9 00		lda #$00			lda #0			; Clear the escaped character flag
.b971	95 27		sta $27,x			sta DStack+3,x		;   (because we are handling it right here)
.b973	a5 14		lda $14				lda tmp1+0		; Convert to hex
.b975	20 11 ba	jsr $ba11			jsr convert_hex_value
.b978	15 24		ora $24,x			ora DStack+0,x		; combine with value in t3
.b97a	4c f2 b9	jmp $b9f2			jmp _save_character
.b97d					_check_esc_chars:
.b97d	a0 00		ldy #$00			ldy #0
.b97f	94 27		sty $27,x			sty DStack+3,x
.b981	a8		tay				tay
.b982	a9 07		lda #$07			lda #AscBELL	      ; BEL (ASCII value 7)
.b984	c0 61		cpy #$61			cpy #'a'
.b986	f0 6a		beq $b9f2			beq _save_character
.b988	a9 08		lda #$08			lda #AscBS	      ; Backspace (ASCII value 8)
.b98a	c0 62		cpy #$62			cpy #'b'
.b98c	f0 64		beq $b9f2			beq _save_character
.b98e	a9 1b		lda #$1b			lda #AscESC	       ; ESC (ASCII value 27)
.b990	c0 65		cpy #$65			cpy #'e'
.b992	f0 5e		beq $b9f2			beq _save_character
.b994	a9 0c		lda #$0c			lda #AscFF	       ; FF (ASCII value 12)
.b996	c0 66		cpy #$66			cpy #'f'
.b998	f0 58		beq $b9f2			beq _save_character
.b99a	a9 0a		lda #$0a			lda #AscLF	       ; LF (ASCII value 10)
.b99c	c0 6c		cpy #$6c			cpy #'l'
.b99e	f0 52		beq $b9f2			beq _save_character
.b9a0	c0 6e		cpy #$6e			cpy #'n'
.b9a2	f0 4e		beq $b9f2			beq _save_character
.b9a4	c0 6d		cpy #$6d			cpy #'m'
.b9a6	d0 09		bne $b9b1			bne +
.b9a8	a9 0d		lda #$0d			lda #AscCR		; CR/LF pair (ASCII values 13, 10)
.b9aa	20 ff cc	jsr $ccff			jsr C_Comma_A
.b9ad	a9 0a		lda #$0a			lda #AscLF
.b9af	d0 41		bne $b9f2			bne _save_character
.b9b1					+
.b9b1	a9 22		lda #$22			lda #AscDQuote		; Double quote (ASCII value 34)
.b9b3	c0 71		cpy #$71			cpy #'q'
.b9b5	f0 3b		beq $b9f2			beq _save_character
.b9b7	c0 22		cpy #$22			cpy #AscDQuote
.b9b9	f0 37		beq $b9f2			beq _save_character
.b9bb	a9 0d		lda #$0d			lda #AscCR		; CR (ASCII value 13)
.b9bd	c0 72		cpy #$72			cpy #'r'
.b9bf	f0 31		beq $b9f2			beq _save_character
.b9c1	a9 09		lda #$09			lda #AscHT		; Horizontal TAB (ASCII value 9)
.b9c3	c0 74		cpy #$74			cpy #'t'
.b9c5	f0 2b		beq $b9f2			beq _save_character
.b9c7	a9 0b		lda #$0b			lda #AscVT		; Vertical TAB (ASCII value 11)
.b9c9	c0 76		cpy #$76			cpy #'v'
.b9cb	f0 25		beq $b9f2			beq _save_character
.b9cd	a9 00		lda #$00			lda #0			; NULL (ASCII value 0)
.b9cf	c0 7a		cpy #$7a			cpy #'z'
.b9d1	f0 1f		beq $b9f2			beq _save_character
.b9d3					_check_esc_x:
.b9d3	c0 78		cpy #$78			cpy #'x'
.b9d5	d0 06		bne $b9dd			bne +
.b9d7	a9 be		lda #$be			lda #$BE	; Clear bits 6 and 0
.b9d9	95 27		sta $27,x			sta DStack+3,x
.b9db	d0 18		bne $b9f5			bne _next_character
.b9dd					+
.b9dd	a9 5c		lda #$5c			lda #AscBackslash	; Backslash (ASCII value 92)
.b9df	c0 5c		cpy #$5c			cpy #AscBackslash
.b9e1	f0 0f		beq $b9f2			beq _save_character
.b9e3	98		tya				tya
.b9e4					_not_escaped:
.b9e4	c9 5c		cmp #$5c			cmp #$5C	; The backslash char
.b9e6	d0 06		bne $b9ee			bne _regular_char
.b9e8	a9 ff		lda #$ff			lda #$FF
.b9ea	95 27		sta $27,x			sta DStack+3,x
.b9ec	d0 07		bne $b9f5			bne _next_character
.b9ee					_regular_char:
.b9ee	c9 22		cmp #$22			cmp #AscDQuote		; ASCII for "
.b9f0	f0 06		beq $b9f8			beq _found_string_end
.b9f2					_save_character:
.b9f2	20 ff cc	jsr $ccff			jsr C_Comma_A		; compile this character into the dictionary
.b9f5					_next_character:
.b9f5	4c 13 b9	jmp $b913			jmp _savechars_loop
.b9f8					_found_string_end:
.b9f8	e8		inx				inx			; Drop t3
.b9f9	e8		inx				inx
.b9fa	a5 0a		lda $0a				lda state		; What happens next depends on the state (which is bad, but
.b9fc	d0 0e		bne $ba0c			bne _cmpl		; that's the way it works at the moment).
.b9fe	38		sec				sec			; TOS= length of string = Here - start_addr
.b9ff	a5 00		lda $00				lda cp+0
.ba01	f5 26		sbc $26,x			sbc DStack+2,x
.ba03	95 24		sta $24,x			sta DStack+0,x		;   LSB
.ba05	a5 01		lda $01				lda cp+1
.ba07	f5 27		sbc $27,x			sbc DStack+3,x
.ba09	95 25		sta $25,x			sta DStack+1,x		;   MSB
.ba0b	60		rts				rts			; ( startaddr u )
.ba0c					_cmpl:
.ba0c	e8		inx				inx			; Drop t2
.ba0d	e8		inx				inx
.ba0e	4c a4 b8	jmp $b8a4			jmp SLiteral_End	; ( jmpaddr )
=277					CodeLen	.var *-XtPtr1
=$ff					CodeLen	 .var $ff
=$ba11					Here1 = *	; remember here
>b8fa	ff					.byte CodeLen	;patch wh_CodeLength
.ba11					convert_hex_value:
.ba11	c9 41		cmp #$41			cmp #'A'
.ba13	90 05		bcc $ba1a			bcc _digit
.ba15	29 1f		and #$1f	_alpha:		and #$1F		; Make it uppercase.
.ba17	69 08		adc #$08			adc #9-1		; gives value 10 for 'A'
.ba19	60		rts				rts
.ba1a					_digit:
.ba1a	e9 2f		sbc #$2f			sbc #'0'-1
.ba1c	60		rts				rts
>ba1d	53 5c 22			Name0:	.text 'S\"'	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=47520					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba20	43					.byte (('S\"'[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=296					LinkDisplacement = Nt0-WordListLink
=25						  WordFlags ::= WordFlags | FP
>ba21	19					.byte WordFlags	;wh_Flags
>ba22	03					.byte 3	;wh_CodeLength
>ba23	78 b8					  .word WordListLink
=$ba25					XtPtr1 ::= *
=47520					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba25					S_Backslash_Quote:
.ba25	a9 ff		lda #$ff			lda #$ff	; Do handle escaped chars.
.ba27	4c fe b8	jmp $b8fe			jmp S_Quote_start
=5					CodeLen	.var *-XtPtr1
=$ba2a					Here1 = *	; remember here
>ba22	05					.byte CodeLen	;patch wh_CodeLength
>ba2a	4c 61 74 65 73 74 58 74		Name0:	.text "LatestXt"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=47538					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba32	88					.byte (("LatestXt"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>ba33	10					.byte WordFlags	;wh_Flags
>ba34	03					.byte 3	;wh_CodeLength
>ba35	12					  .byte LinkDisplacement	; offset to previous nt
=$ba36					XtPtr1 ::= *
=47538					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba36	20 48 ba	jsr $ba48	LatestXt:	jsr LatestNt	; ( nt )
.ba39	4c b5 bd	jmp $bdb5			jmp Name_To_Int	; ( xt )
=6					CodeLen	.var *-XtPtr1
=$ba3c					Here1 = *	; remember here
>ba34	06					.byte CodeLen	;patch wh_CodeLength
>ba3c	4c 61 74 65 73 74 4e 74		Name0:	.text "LatestNt"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=47556					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba44	88					.byte (("LatestNt"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>ba45	10					.byte WordFlags	;wh_Flags
>ba46	03					.byte 3	;wh_CodeLength
>ba47	12					  .byte LinkDisplacement	; offset to previous nt
=$ba48					XtPtr1 ::= *
=47556					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba48	20 52 ba	jsr $ba52	LatestNt:	jsr current_to_dp
.ba4b	a5 10		lda $10				lda dp+0
.ba4d	a4 11		ldy $11				ldy dp+1
.ba4f	4c c1 b7	jmp $b7c1			jmp PushYA
=10					CodeLen	.var *-XtPtr1
=$ba52					Here1 = *	; remember here
>ba46	0a					.byte CodeLen	;patch wh_CodeLength
.ba52					current_to_dp:
.ba52	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.ba55	0a		asl a				asl			; dp= wordlists[A]
.ba56	a8		tay				tay
.ba57	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.ba5a	85 10		sta $10				sta dp+0
.ba5c	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.ba5f	85 11		sta $11				sta dp+1
.ba61	60		rts				rts
.ba62					dp_to_current:
.ba62	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.ba65	0a		asl a		                asl			; wordlists[A]=dp
.ba66	a8		tay		                tay
.ba67	a5 10		lda $10		                lda dp+0
.ba69	99 12 03	sta $0312,y			sta WordlistsV+0,y
.ba6c	a5 11		lda $11		                lda dp+1
.ba6e	99 13 03	sta $0313,y	                sta WordlistsV+1,y
.ba71	60		rts		                rts
>ba72	50 61 72 73 65 2d 4e 61		Name0:	.text "Parse-Name"	;  name of word as a string, ending at wh_NameLastChar
>ba7a	6d 65
=10					NameLength = *-Name0
=47612					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba7c	aa					.byte (("Parse-Name"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>ba7d	10					.byte WordFlags	;wh_Flags
>ba7e	03					.byte 3	;wh_CodeLength
>ba7f	38					  .byte LinkDisplacement	; offset to previous nt
=$ba80					XtPtr1 ::= *
=47612					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba80					Parse_Name:
.ba80	a5 04		lda $04				lda cib+0		; tmp2= cib+(toin & $ff00)
.ba82	85 16		sta $16				sta tmp2+0
.ba84	18		clc				clc
.ba85	a5 05		lda $05				lda cib+1
.ba87	65 09		adc $09				adc toin+1
.ba89	85 17		sta $17				sta tmp2+1
.ba8b	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.ba8d					_skip_loop:
.ba8d	c4 06		cpy $06				cpy ciblen+0		; more chars left?
.ba8f	a5 09		lda $09				lda toin+1
.ba91	e5 07		sbc $07				sbc ciblen+1
.ba93	b0 11		bcs $baa6			bcs _empty_line
.ba95	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.ba97	c9 21		cmp #$21			cmp #AscSP+1		; is_whitespace
.ba99	b0 10		bcs $baab			bcs _char_found
.ba9b	c8		iny				iny			; increment toin
.ba9c	84 08		sty $08				sty toin+0
.ba9e	d0 ed		bne $ba8d			bne _skip_loop
.baa0	e6 09		inc $09				inc toin+1
.baa2	e6 17		inc $17				inc tmp2+1
.baa4	d0 e7		bne $ba8d			bne _skip_loop
.baa6					_empty_line:
.baa6	ca		dex				dex			; junk address
.baa7	ca		dex				dex
.baa8	4c fe b7	jmp $b7fe			jmp Zero		; length=0
.baab					_char_found:
.baab	20 1a b8	jsr $b81a			jsr Bl			; push delimiter char
.baae	4c c7 ba	jmp $bac7			jmp Parse
=49					CodeLen	.var *-XtPtr1
=$bab1					Here1 = *	; remember here
>ba7e	31					.byte CodeLen	;patch wh_CodeLength
.bab1					parse_name_check:
.bab1	20 80 ba	jsr $ba80			jsr parse_name		; get character from string
.bab4	b5 24		lda $24,x			lda DStack+0,x		; empty string?
.bab6	f0 01		beq $bab9			beq _empty
.bab8	60		rts				rts
.bab9	a9 f3		lda #$f3	_empty:		lda #$100+err_UndefinedWord	; complain & abort
.babb	4c 87 b4	jmp $b487			jmp ThrowA
>babe	50 61 72 73 65			Name0:	.text "Parse"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=47683					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bac3	a5					.byte (("Parse"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=71					LinkDisplacement = Nt0-WordListLink
>bac4	10					.byte WordFlags	;wh_Flags
>bac5	03					.byte 3	;wh_CodeLength
>bac6	47					  .byte LinkDisplacement	; offset to previous nt
=$bac7					XtPtr1 ::= *
=47683					WordListLink ::= Nt0 ; remember the nt of this word for later
.bac7	20 e7 b3	jsr $b3e7	Parse:		jsr PopA		; pop c (check for underflow)
.baca	85 1c		sta $1c		Parse_A:	sta tmp5		; save delimiter
.bacc	ca		dex				dex			; alloc space for addr
.bacd	ca		dex				dex
.bace	ca		dex				dex			; alloc space for length
.bacf	ca		dex				dex
.bad0	18		clc				clc			; addr= cib+toin
.bad1	a5 08		lda $08				lda toin+0
.bad3	65 04		adc $04				adc cib+0
.bad5	95 26		sta $26,x			sta DStack+2,x
.bad7	a5 09		lda $09				lda toin+1
.bad9	65 05		adc $05				adc cib+1
.badb	95 27		sta $27,x			sta DStack+3,x
.badd	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.badf	84 14		sty $14				sty tmp1+0
.bae1	a5 04		lda $04				lda cib+0		; tmp2= cib + (toin & $ff00)
.bae3	85 16		sta $16				sta tmp2+0
.bae5	18		clc				clc
.bae6	a5 09		lda $09				lda toin+1		; tmp1= toin
.bae8	85 15		sta $15				sta tmp1+1
.baea	65 05		adc $05				adc cib+1
.baec	85 17		sta $17				sta tmp2+1
.baee	a9 00		lda #$00			lda #0		; Initialize the offset we use to adjust EOL or found delimiter
.baf0	85 1d		sta $1d				sta tmp5+1
.baf2					_loop:
.baf2	c4 06		cpy $06				cpy ciblen+0		; end of string?
.baf4	a5 09		lda $09				lda toin+1
.baf6	e5 07		sbc $07				sbc ciblen+1
.baf8	b0 1d		bcs $bb17			bcs _eol
.bafa	a5 1c		lda $1c				lda tmp5+0		; get delimiter
.bafc	c9 20		cmp #$20			cmp #AscSP		; is it whitespace?
.bafe	d0 08		bne $bb08			bne _not_whitespace
.bb00	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.bb02	c9 21		cmp #$21			cmp #AscSP+1		; we're looking for all whitespace
.bb04	90 0f		bcc $bb15			bcc _found_delimiter
.bb06	b0 04		bcs $bb0c			bcs _not_delimiter
.bb08	d1 16		cmp ($16),y	_not_whitespace: cmp (tmp2),y		; compare delimter to cib[toin]
.bb0a	f0 09		beq $bb15			beq _found_delimiter
.bb0c					_not_delimiter:
.bb0c	c8		iny				iny			; next character
.bb0d	d0 e3		bne $baf2			bne _loop
.bb0f	e6 09		inc $09				inc toin+1
.bb11	e6 17		inc $17				inc tmp2+1
.bb13	d0 dd		bne $baf2			bne _loop
.bb15					_found_delimiter:
.bb15	e6 1d		inc $1d				inc tmp5+1
.bb17					_eol:
.bb17	38		sec				sec			; length = toin - tmp1
.bb18	98		tya				tya
.bb19	e5 14		sbc $14				sbc tmp1+0
.bb1b	95 24		sta $24,x			sta DStack+0,x
.bb1d	a5 09		lda $09				lda toin+1
.bb1f	e5 15		sbc $15				sbc tmp1+1
.bb21	95 25		sta $25,x			sta DStack+1,x
.bb23	18		clc				clc			; toin = toin + delimiter_offset
.bb24	98		tya				tya
.bb25	65 1d		adc $1d				adc tmp5+1
.bb27	85 08		sta $08				sta toin+0
.bb29	90 02		bcc $bb2d			bcc +
.bb2b	e6 09		inc $09				inc toin+1
.bb2d					+
=102					CodeLen	.var *-XtPtr1
=$bb2d					Here1 = *	; remember here
>bac5	66					.byte CodeLen	;patch wh_CodeLength
.bb2d	60		rts				rts
>bb2e	45 78 65 63 75 74 65 2d		Name0:	.text "Execute-Parsing"	;  name of word as a string, ending at wh_NameLastChar
>bb36	50 61 72 73 69 6e 67
=15					NameLength = *-Name0
=47805					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb3d	ef					.byte (("Execute-Parsing"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=122					LinkDisplacement = Nt0-WordListLink
>bb3e	50					.byte WordFlags	;wh_Flags
>bb3f	03					.byte 3	;wh_CodeLength
>bb40	7a					  .byte LinkDisplacement	; offset to previous nt
=$bb41					XtPtr1 ::= *
=47805					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb41					Execute_parsing:
.bb41	20 44 b4	jsr $b444			jsr underflow_3
.bb44	20 f9 c3	jsr $c3f9			jsr Input_To_R		; save existing input for later
.bb47	20 8e ce	jsr $ce8e			jsr Not_Rot		; -ROT ( xt addr u )
.bb4a	20 02 b4	jsr $b402			jsr PopYA		; TOS is new ciblen
.bb4d	85 06		sta $06				sta ciblen+0
.bb4f	84 07		sty $07				sty ciblen+1
.bb51	20 02 b4	jsr $b402			jsr PopYA		; NOS is new cib
.bb54	85 04		sta $04				sta cib+0
.bb56	84 05		sty $05				sty cib+1
.bb58	a9 00		lda #$00			lda #0
.bb5a	85 08		sta $08				sta toin+0		; Set >IN to zero
.bb5c	85 09		sta $09				sta toin+1
.bb5e	20 2d ce	jsr $ce2d			jsr Execute
.bb61	20 1a c4	jsr $c41a			jsr R_To_Input		; restore
=35					CodeLen	.var *-XtPtr1
=$bb64					Here1 = *	; remember here
>bb3f	23					.byte CodeLen	;patch wh_CodeLength
.bb64	60		rts				rts
>bb65	53 6f 75 72 63 65		Name0:	.text "Source"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=47851					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb6b	a6					.byte (("Source"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=46					LinkDisplacement = Nt0-WordListLink
>bb6c	10					.byte WordFlags	;wh_Flags
>bb6d	03					.byte 3	;wh_CodeLength
>bb6e	2e					  .byte LinkDisplacement	; offset to previous nt
=$bb6f					XtPtr1 ::= *
=47851					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb6f					Source:
.bb6f	a5 04		lda $04				lda cib+0	; push address
.bb71	a4 05		ldy $05				ldy cib+1
.bb73	20 c1 b7	jsr $b7c1			jsr PushYA
.bb76	a5 06		lda $06				lda ciblen+0	; push size, return
.bb78	a4 07		ldy $07				ldy ciblen+1
.bb7a	4c c1 b7	jmp $b7c1			jmp PushYA
=14					CodeLen	.var *-XtPtr1
=$bb7d					Here1 = *	; remember here
>bb6d	0e					.byte CodeLen	;patch wh_CodeLength
>bb7d	53 6f 75 72 63 65 2d 49		Name0:	.text "Source-Id"	;  name of word as a string, ending at wh_NameLastChar
>bb85	64
=9					NameLength = *-Name0
=47878					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb86	89					.byte (("Source-Id"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>bb87	10					.byte WordFlags	;wh_Flags
>bb88	03					.byte 3	;wh_CodeLength
>bb89	1b					  .byte LinkDisplacement	; offset to previous nt
=$bb8a					XtPtr1 ::= *
=47878					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb8a	a5 02		lda $02		Source_Id:	lda insrc+0
.bb8c	a4 03		ldy $03				ldy insrc+1
.bb8e	4c c1 b7	jmp $b7c1			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$bb91					Here1 = *	; remember here
>bb88	07					.byte CodeLen	;patch wh_CodeLength
>bb91	45 78 69 74			Name0:	.text "Exit"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=47893					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb95	84					.byte (("Exit"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=36					WordFlags ::= AN+CO	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>bb96	24					.byte WordFlags	;wh_Flags
>bb97	03					.byte 3	;wh_CodeLength
>bb98	0f					  .byte LinkDisplacement	; offset to previous nt
=$bb99					XtPtr1 ::= *
=47893					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb99					Exit:
.bb99	60		rts				rts		; keep before WordEnd so it gets inlined
=1					CodeLen	.var *-XtPtr1
=$bb9a					Here1 = *	; remember here
>bb97	01					.byte CodeLen	;patch wh_CodeLength
>bb9a	3b				Name0:	.text ";"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=47899					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb9b	61					.byte ((";"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=6					LinkDisplacement = Nt0-WordListLink
>bb9c	1c					.byte WordFlags	;wh_Flags
>bb9d	03					.byte 3	;wh_CodeLength
>bb9e	06					  .byte LinkDisplacement	; offset to previous nt
=$bb9f					XtPtr1 ::= *
=47899					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb9f					Semicolon:
.bb9f	20 49 b7	jsr $b749			jsr Left_Bracket	; switch to interpret state
.bba2	24 0c		bit $0c				bit status		; is this a : word or a :NONAME word?
.bba4	70 0c		bvs $bbb2			bvs _colonword
.bba6	a9 60		lda #$60			lda #$60		; compile an RTS
.bba8	20 ff cc	jsr $ccff			jsr C_Comma_A
.bbab	a5 0e		lda $0e				lda WorkWord+0		; push xt, return
.bbad	a4 0f		ldy $0f				ldy WorkWord+1
.bbaf	4c c1 b7	jmp $b7c1			jmp PushYA
.bbb2					_colonword:
.bbb2	24 0c		bit $0c				bit status
.bbb4	10 1d		bpl $bbd3			bpl _new_word	; Bit 7 is clear = new word
.bbb6	a5 0e		lda $0e				lda WorkWord+0		; push our nt
.bbb8	a4 0f		ldy $0f				ldy WorkWord+1
.bbba	20 c1 b7	jsr $b7c1			jsr PushYA
.bbbd	20 fe bd	jsr $bdfe			jsr Name_To_String	; get our name string
.bbc0	a9 31		lda #$31			lda #<str_redefined	; string "redefined"
.bbc2	a0 da		ldy #$da			ldy #>str_redefined
.bbc4	20 0b ce	jsr $ce0b			jsr Print_ASCIIZ_YA_no_lf
.bbc7	20 f0 cd	jsr $cdf0			jsr Type		; print the ofWordEnding word.
.bbca	20 e4 cd	jsr $cde4			jsr Space
.bbcd	a9 7f		lda #$7f			lda #$ff-%10000000
.bbcf	25 0c		and $0c				and status
.bbd1	85 0c		sta $0c				sta status
.bbd3					_new_word:
.bbd3	20 16 c1	jsr $c116			jsr Header_Link		; finish linking into current dictionary
.bbd6	20 de bb	jsr $bbde			jsr adjust_z		; fix word length
.bbd9	a9 60		lda #$60			lda #$60		; compile an RTS
.bbdb	4c ff cc	jmp $ccff			jmp C_Comma_A
=63					CodeLen	.var *-XtPtr1
=$bbde					Here1 = *	; remember here
>bb9d	3f					.byte CodeLen	;patch wh_CodeLength
.bbde					adjust_z:
.bbde	a0 81		ldy #$81			ldy #wh_Flags		; tmp1= xt
.bbe0	b1 10		lda ($10),y			lda (dp),y
.bbe2	29 03		and #$03			and #FP+DB
.bbe4	18		clc				clc
.bbe5	69 84		adc #$84			adc #wh_LinkNt+1
.bbe7	65 10		adc $10				adc dp+0
.bbe9	85 14		sta $14				sta tmp1+0
.bbeb	a9 00		lda #$00			lda #0
.bbed	65 11		adc $11				adc dp+1
.bbef	85 15		sta $15				sta tmp1+1
.bbf1	38		sec				sec			; length= cp-xt
.bbf2	a5 00		lda $00				lda cp+0
.bbf4	e5 14		sbc $14				sbc tmp1+0
.bbf6	a8		tay				tay
.bbf7	a5 01		lda $01				lda cp+1
.bbf9	e5 15		sbc $15				sbc tmp1+1
.bbfb	f0 0c		beq $bc09			beq _short		; length > $ff ?
.bbfd	a0 81		ldy #$81			ldy #Wh_Flags		; make it NN
.bbff	b1 10		lda ($10),y			lda (dp),y
.bc01	29 df		and #$df			and #$ff-AN
.bc03	09 10		ora #$10			ora #NN
.bc05	91 10		sta ($10),y			sta (dp),y
.bc07	a0 ff		ldy #$ff			ldy #$ff		; set max length for header
.bc09	98		tya		_short:		tya			; fill in length in header
.bc0a	a0 82		ldy #$82			ldy #Wh_CodeLength
.bc0c	91 10		sta ($10),y			sta (dp),y
.bc0e	60		rts				rts
>bc0f	3a				Name0:	.text ":"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=48016					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc10	41					.byte ((":"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=117					LinkDisplacement = Nt0-WordListLink
>bc11	10					.byte WordFlags	;wh_Flags
>bc12	03					.byte 3	;wh_CodeLength
>bc13	75					  .byte LinkDisplacement	; offset to previous nt
=$bc14					XtPtr1 ::= *
=48016					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc14					Colon:
.bc14	20 5e b7	jsr $b75e			jsr Right_Bracket	; switch to compile state
.bc17	a5 0c		lda $0c				lda status
.bc19	09 40		ora #$40			ora #%01000000	; tell ";" and RECURSE this is a normal word
.bc1b	09 80		ora #$80			ora #%10000000	; Tell Header_Build not to print warning for duplicate name.
.bc1d	85 0c		sta $0c				sta status
.bc1f	4c 21 c1	jmp $c121			jmp Header_Build	; compile word header (but don't link)
=14					CodeLen	.var *-XtPtr1
=$bc22					Here1 = *	; remember here
>bc12	0e					.byte CodeLen	;patch wh_CodeLength
>bc22	3a 4e 6f 4e 61 6d 65		Name0:	.text ":NoName"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=48041					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc29	a7					.byte ((":NoName"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>bc2a	10					.byte WordFlags	;wh_Flags
>bc2b	03					.byte 3	;wh_CodeLength
>bc2c	19					  .byte LinkDisplacement	; offset to previous nt
=$bc2d					XtPtr1 ::= *
=48041					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc2d					Colon_NoName:
.bc2d	20 5e b7	jsr $b75e			jsr Right_Bracket	; switch to compile state
.bc30	a9 bf		lda #$bf			lda #$ff-%01000000	; tell ";" and RECURSE this is
.bc32	25 0c		and $0c				and status		; a :NONAME word.
.bc34	85 0c		sta $0c				sta status
.bc36	a5 00		lda $00				lda cp+0
.bc38	85 0e		sta $0e				sta WorkWord+0
.bc3a	a5 01		lda $01				lda cp+1
.bc3c	85 0f		sta $0f				sta WorkWord+1
=17					CodeLen	.var *-XtPtr1
=$bc3e					Here1 = *	; remember here
>bc2b	11					.byte CodeLen	;patch wh_CodeLength
.bc3e	60		rts				rts
>bc3f	27				Name0:	.text "'"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=48064					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc40	e1					.byte (("'"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>bc41	10					.byte WordFlags	;wh_Flags
>bc42	03					.byte 3	;wh_CodeLength
>bc43	17					  .byte LinkDisplacement	; offset to previous nt
=$bc44					XtPtr1 ::= *
=48064					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc44	20 4a bc	jsr $bc4a	Tick:		jsr Tick_Nt
.bc47	4c b5 bd	jmp $bdb5			jmp Name_To_Int	; ( nt -- xt )
=6					CodeLen	.var *-XtPtr1
=$bc4a					Here1 = *	; remember here
>bc42	06					.byte CodeLen	;patch wh_CodeLength
.bc4a	20 b1 ba	jsr $bab1	Tick_Nt:	jsr parse_name_check	; ( -- addr u )
.bc4d	4c 93 bc	jmp $bc93			jmp find_name_check	; ( addr u -- nt )
>bc50	5b 27 5d			Name0:	.text "[']"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=48083					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc53	a3					.byte (("[']"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>bc54	1c					.byte WordFlags	;wh_Flags
>bc55	03					.byte 3	;wh_CodeLength
>bc56	13					  .byte LinkDisplacement	; offset to previous nt
=$bc57					XtPtr1 ::= *
=48083					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc57	20 44 bc	jsr $bc44	Bracket_Tick:	jsr Tick
.bc5a	4c 76 b7	jmp $b776			jmp Literal
=6					CodeLen	.var *-XtPtr1
=$bc5d					Here1 = *	; remember here
>bc55	06					.byte CodeLen	;patch wh_CodeLength
>bc5d	46 69 6e 64 2d 4e 61 6d		Name0:	.text "Find-Name"	;  name of word as a string, ending at wh_NameLastChar
>bc65	65
=9					NameLength = *-Name0
=48102					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc66	a9					.byte (("Find-Name"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>bc67	10					.byte WordFlags	;wh_Flags
>bc68	03					.byte 3	;wh_CodeLength
>bc69	13					  .byte LinkDisplacement	; offset to previous nt
=$bc6a					XtPtr1 ::= *
=48102					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc6a					find_name:
.bc6a	20 a0 bc	jsr $bca0			jsr swl_prepare 	; setup for search
.bc6d	a9 ff		lda #$ff			lda #$ff		; for each wordlist in the wordlist search order.
.bc6f	95 25		sta $25,x			sta DStack+1,x
.bc71					_wordlist_next:
.bc71	f6 25		inc $25,x			inc DStack+1,x
.bc73	b4 25		ldy $25,x			ldy DStack+1,x
.bc75	cc 2a 03	cpy $032a			cpy Num_OrderV		; at end of list?
.bc78	90 06		bcc $bc80			bcc _nextS
.bc7a	d0 14		bne $bc90			bne _fail
.bc7c	a9 03		lda #$03			lda #wid_Root		; also try root wordlist
.bc7e	d0 03		bne $bc83			bne _nextA
.bc80	b9 2b 03	lda $032b,y	_nextS:		lda Search_OrderV,y	; A = search_order[Y]  get wordlist ID
.bc83	20 cd bc	jsr $bccd	_nextA:		jsr swl_search_wordlist
.bc86	f0 e9		beq $bc71			beq _wordlist_next
.bc88	a5 14		lda $14				lda tmp1+0		; NOS= nt
.bc8a	95 26		sta $26,x			sta DStack+2,x
.bc8c	a5 15		lda $15				lda tmp1+1
.bc8e	95 27		sta $27,x			sta DStack+3,x
.bc90					_fail:
.bc90	e8		inx				inx			; Drop work cell
.bc91	e8		inx				inx
=40					CodeLen	.var *-XtPtr1
=$bc92					Here1 = *	; remember here
>bc68	28					.byte CodeLen	;patch wh_CodeLength
.bc92	60		rts				rts
.bc93					find_name_check:
.bc93	20 6a bc	jsr $bc6a			jsr find_name
.bc96	b5 25		lda $25,x			lda DStack+1,x		; check that we found a word
.bc98	f0 01		beq $bc9b			beq _NotFound
.bc9a	60		rts				rts
.bc9b	a9 f3		lda #$f3	_NotFound:	lda #$100+err_UndefinedWord	; complain & quit
.bc9d	4c 87 b4	jmp $b487			jmp ThrowA
.bca0					swl_prepare:
.bca0	20 3f b4	jsr $b43f			jsr underflow_2
.bca3	38		sec				sec			; A= 0 - name start offset
.bca4	b5 24		lda $24,x			lda DStack+0,x
.bca6	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.bca8	75 26		adc $26,x			adc DStack+2,x		; tmp2= pattern nt
.bcaa	85 16		sta $16				sta tmp2+0
.bcac	a9 ff		lda #$ff			lda #$ff
.bcae	75 27		adc $27,x			adc DStack+3,x
.bcb0	85 17		sta $17				sta tmp2+1
.bcb2	a9 7f		lda #$7f			lda #wh_NameLastChar	; tmp4+0= starting name char index -1
.bcb4	38		sec				sec
.bcb5	f5 24		sbc $24,x			sbc DStack+0,x
.bcb7	85 1a		sta $1a				sta tmp4+0
.bcb9	a0 7f		ldy #$7f			ldy #wh_NameLastChar	; tmp3+0= wh_HNL (hash & length)
.bcbb	b1 16		lda ($16),y			lda (tmp2),y
.bcbd	0a		asl a				asl a
.bcbe	0a		asl a				asl a
.bcbf	0a		asl a				asl a
.bcc0	0a		asl a				asl a
.bcc1	0a		asl a				asl a
.bcc2	15 24		ora $24,x			ora DStack+0,x
.bcc4	85 18		sta $18				sta tmp3+0
.bcc6	a9 00		lda #$00			lda #0			; assuming failure
.bcc8	95 26		sta $26,x			sta DStack+2,x
.bcca	95 27		sta $27,x			sta DStack+3,x
.bccc	60		rts				rts
.bccd					swl_search_wordlist:
.bccd	86 19		stx $19				stx tmp3+1		; save data stack index
.bccf	0a		asl a				asl			; tmp1 = up->wordlists[A]
.bcd0	a8		tay				tay
.bcd1	be 12 03	ldx $0312,y			ldx WordlistsV+0,y
.bcd4	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bcd7	d0 15		bne $bcee			bne _word_3		;   not end-of-list?
.bcd9	08		php		_rts:		php
.bcda	a6 19		ldx $19				ldx tmp3+1		; restore data stack index
.bcdc	28		plp				plp
.bcdd	60		rts				rts			; Z= end_of_list
.bcde					_word_next:
.bcde	a0 81		ldy #$81			ldy #wh_Flags		; what kind of LinkNt?
.bce0	b1 14		lda ($14),y			lda (tmp1),y
.bce2	a0 83		ldy #$83			ldy #wh_LinkNt
.bce4	29 01		and #$01			and #FP
.bce6	f0 0e		beq $bcf6			beq _LinkShort
.bce8	b1 14		lda ($14),y	_LinkLong:	lda (tmp1),y		; tmp1= tmp1->Wh_LinkNt_word
.bcea	aa		tax				tax
.bceb	c8		iny				iny
.bcec	b1 14		lda ($14),y			lda (tmp1),y
.bcee	85 15		sta $15		_word_3:	sta tmp1+1
.bcf0	86 14		stx $14				stx tmp1+0
.bcf2	d0 0d		bne $bd01			bne _Test
.bcf4	f0 e3		beq $bcd9			beq _rts
.bcf6	a5 14		lda $14		_LinkShort:	lda tmp1+0		; tmp1 -= tmp1->wh_LinkNt offset byte
.bcf8	38		sec				sec
.bcf9	f1 14		sbc ($14),y			sbc (tmp1),y
.bcfb	85 14		sta $14				sta tmp1+0
.bcfd	b0 02		bcs $bd01			bcs +
.bcff	c6 15		dec $15				dec tmp1+1
.bd01					+
.bd01	a0 80		ldy #$80	_Test:		ldy #Wh_HashNameLen	; Are hash & name length the same?
.bd03	b1 14		lda ($14),y			lda (tmp1),y
.bd05	c5 18		cmp $18				cmp tmp3+0
.bd07	d0 d5		bne $bcde			bne _word_next
.bd09	a4 1a		ldy $1a				ldy tmp4+0		; Y= index of 1st char -1
.bd0b	c8		iny		_char_next:	iny			; to next char
.bd0c	30 cb		bmi $bcd9			bmi _rts		; end of string?
.bd0e	b1 16		lda ($16),y			lda (tmp2),y		; char of pattern name
.bd10	51 14		eor ($14),y			eor (tmp1),y		; char of this word name
.bd12	f0 f7		beq $bd0b			beq _char_next		;   exact match?
.bd14	c9 20		cmp #$20			cmp #$20		;   only a case mismatch?
.bd16	d0 c6		bne $bcde			bne _word_next
.bd18	b1 16		lda ($16),y			lda (tmp2),y		;   verify it is alpha char
.bd1a	29 df		and #$df			and #$df
.bd1c	e9 41		sbc #$41			sbc #'A'
.bd1e	c9 1a		cmp #$1a			cmp #'Z'-'A'+1
.bd20	90 e9		bcc $bd0b			bcc _char_next
.bd22	b0 ba		bcs $bcde			bcs _word_next
>bd24	46 69 6e 64			Name0:	.text "Find"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=48296					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bd28	84					.byte (("Find"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=194					LinkDisplacement = Nt0-WordListLink
>bd29	10					.byte WordFlags	;wh_Flags
>bd2a	03					.byte 3	;wh_CodeLength
>bd2b	c2					  .byte LinkDisplacement	; offset to previous nt
=$bd2c					XtPtr1 ::= *
=48296					WordListLink ::= Nt0 ; remember the nt of this word for later
.bd2c					Find:
.bd2c	b5 25		lda $25,x			lda DStack+1,x		; Save caddr in case conversion fails.
.bd2e	48		pha				pha
.bd2f	b5 24		lda $24,x			lda DStack+0,x
.bd31	48		pha				pha
.bd32	20 fa b1	jsr $b1fa			jsr Count		; ( caddr -- addr u )
.bd35	20 6a bc	jsr $bc6a			jsr find_name		; ( addr u -- nt | 0 )
.bd38	b5 25		lda $25,x			lda DStack+1,x		; word found?
.bd3a	d0 09		bne $bd45			bne _found_word
.bd3c	68		pla				pla			; restore caddr
.bd3d	95 24		sta $24,x			sta DStack+0,x
.bd3f	68		pla				pla
.bd40	95 25		sta $25,x			sta DStack+1,x
.bd42	4c e2 b7	jmp $b7e2			jmp False		; ( addr 0 )
.bd45					_found_word:
.bd45	68		pla				pla			; RDrop saved caddr
.bd46	68		pla				pla
.bd47	20 b5 bd	jsr $bdb5			jsr Name_To_Int		; convert the return values to FIND's format
.bd4a	a0 81		ldy #$81			ldy #Wh_Flags		; get flags
.bd4c	b1 14		lda ($14),y			lda (tmp1),y
.bd4e	29 08		and #$08			and #IM
.bd50	d0 03		bne $bd55			bne _immediate
.bd52	4c d0 b7	jmp $b7d0			jmp True		; We're not immediate, return -1
.bd55	4c 07 b8	jmp $b807	_immediate:	jmp One			; We're immediate, return 1
=44					CodeLen	.var *-XtPtr1
=$bd58					Here1 = *	; remember here
>bd2a	2c					.byte CodeLen	;patch wh_CodeLength
>bd58	49 6e 74 3e 4e 61 6d 65		Name0:	.text "Int>Name"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=48352					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bd60	a8					.byte (("Int>Name"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>bd61	50					.byte WordFlags	;wh_Flags
>bd62	03					.byte 3	;wh_CodeLength
>bd63	38					  .byte LinkDisplacement	; offset to previous nt
=$bd64					XtPtr1 ::= *
=48352					WordListLink ::= Nt0 ; remember the nt of this word for later
.bd64					Int_To_Name:
.bd64	20 2b b4	jsr $b42b			jsr underflow_1
.bd67	a9 fe		lda #$fe			lda #$100-2		; for each wordlist
.bd69	85 19		sta $19				sta tmp3+1
.bd6b					_wordlist_next:
.bd6b	a4 19		ldy $19				ldy tmp3+1		; get next wordlist index
.bd6d	c8		iny				iny
.bd6e	c8		iny				iny
.bd6f	84 19		sty $19				sty tmp3+1
.bd71	c0 0c		cpy #$0c			cpy #(Num_OrderV-WordlistsV)/2
.bd73	b0 2b		bcs $bda0			bcs _fail
.bd75	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.bd78	85 14		sta $14				sta tmp1+0
.bd7a	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bd7d	85 15		sta $15				sta tmp1+1
.bd7f	d0 07		bne $bd88			bne _calc
.bd81	f0 e8		beq $bd6b			beq _wordlist_next
.bd83	20 9b 82	jsr $829b	_word_next:	jsr LinkNext		; step to next word
.bd86	f0 e3		beq $bd6b			beq _wordlist_next
.bd88	20 c2 bd	jsr $bdc2	_calc:		jsr NameToIntTmp	; tmp2= xt
.bd8b	a5 16		lda $16				lda tmp2+0
.bd8d	d5 24		cmp $24,x			cmp DStack+0,x		;  match?
.bd8f	d0 f2		bne $bd83			bne _word_next
.bd91	a5 17		lda $17				lda tmp2+1
.bd93	d5 25		cmp $25,x			cmp DStack+1,x
.bd95	d0 ec		bne $bd83			bne _word_next
.bd97	a5 14		lda $14				lda tmp1+0
.bd99	95 24		sta $24,x			sta DStack+0,x
.bd9b	a5 15		lda $15				lda tmp1+1
.bd9d	95 25		sta $25,x			sta DStack+1,x
.bd9f	60		rts				rts			; return P.Z=0
.bda0					_fail:
.bda0	a9 00		lda #$00			lda #0			; return a zero to indicate that we didn't find it.
.bda2	95 24		sta $24,x			sta DStack+0,x
.bda4	95 25		sta $25,x			sta DStack+1,x
.bda6	85 15		sta $15				sta tmp1+1
.bda8	60		rts				rts			; return P.Z=1
=69					CodeLen	.var *-XtPtr1
=$bda9					Here1 = *	; remember here
>bd62	45					.byte CodeLen	;patch wh_CodeLength
>bda9	4e 61 6d 65 3e 49 6e 74		Name0:	.text "Name>Int"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=48433					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bdb1	88					.byte (("Name>Int"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=81					LinkDisplacement = Nt0-WordListLink
>bdb2	10					.byte WordFlags	;wh_Flags
>bdb3	03					.byte 3	;wh_CodeLength
>bdb4	51					  .byte LinkDisplacement	; offset to previous nt
=$bdb5					XtPtr1 ::= *
=48433					WordListLink ::= Nt0 ; remember the nt of this word for later
.bdb5	20 0d b4	jsr $b40d	Name_To_Int:	jsr PopTmp1
.bdb8	20 c2 bd	jsr $bdc2			jsr NameToIntTmp
.bdbb	a5 16		lda $16				lda tmp2+0
.bdbd	a4 17		ldy $17				ldy tmp2+1
.bdbf	4c c1 b7	jmp $b7c1			jmp PushYA
=13					CodeLen	.var *-XtPtr1
=$bdc2					Here1 = *	; remember here
>bdb3	0d					.byte CodeLen	;patch wh_CodeLength
.bdc2					NameToIntTmp:
.bdc2	a0 81		ldy #$81			ldy #wh_Flags
.bdc4	b1 14		lda ($14),y			lda (tmp1),y
.bdc6	29 02		and #$02			and #DB			; has XT ptr?
.bdc8	d0 12		bne $bddc			bne _HasXtPtr
.bdca	b1 14		lda ($14),y			lda (tmp1),y		; A= header length
.bdcc	29 03		and #$03			and #DB+FP
.bdce	18		clc				clc
.bdcf	69 84		adc #$84			adc #wh_LinkNt+1
.bdd1	65 14		adc $14				adc tmp1+0		; TOS=tmp1+A
.bdd3	85 16		sta $16				sta tmp2+0
.bdd5	a9 00		lda #$00			lda #0
.bdd7	65 15		adc $15				adc tmp1+1
.bdd9	85 17		sta $17				sta tmp2+1
.bddb	60		rts				rts
.bddc	b1 14		lda ($14),y	_HasXtPtr:	lda (tmp1),y		; get wh_Flags again
.bdde	a0 84		ldy #$84			ldy #wh_LinkNt+1
.bde0	29 01		and #$01			and #FP			; has long LinkNt ?
.bde2	f0 01		beq $bde5			beq _short
.bde4	c8		iny				iny			;   skip extra byte
.bde5	b1 14		lda ($14),y	_short:		lda (tmp1),y		; tmp2= xt pointer
.bde7	85 16		sta $16				sta tmp2+0
.bde9	c8		iny				iny
.bdea	b1 14		lda ($14),y			lda (tmp1),y
.bdec	85 17		sta $17				sta tmp2+1
.bdee	60		rts				rts
>bdef	4e 61 6d 65 3e 53 74 72		Name0:	.text "Name>String"	;  name of word as a string, ending at wh_NameLastChar
>bdf7	69 6e 67
=11					NameLength = *-Name0
=48506					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bdfa	eb					.byte (("Name>String"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=73					LinkDisplacement = Nt0-WordListLink
>bdfb	50					.byte WordFlags	;wh_Flags
>bdfc	03					.byte 3	;wh_CodeLength
>bdfd	49					  .byte LinkDisplacement	; offset to previous nt
=$bdfe					XtPtr1 ::= *
=48506					WordListLink ::= Nt0 ; remember the nt of this word for later
.bdfe					Name_To_String:
.bdfe	20 2b b4	jsr $b42b			jsr underflow_1
.be01	b5 24		lda $24,x			lda DStack+0,x		; tmp1= nt
.be03	b4 25		ldy $25,x			ldy DStack+1,x
.be05	85 14		sta $14				sta tmp1+0
.be07	84 15		sty $15				sty tmp1+1		; ( nt )
.be09	a0 80		ldy #$80			ldy #Wh_HashNameLen
.be0b	b1 14		lda ($14),y			lda (tmp1),y
.be0d	29 1f		and #$1f			and #wh_HNL_NameLengthMask
.be0f	48		pha				pha
.be10	49 ff		eor #$ff			eor #$ff
.be12	38		sec				sec
.be13	69 80		adc #$80			adc #Wh_NameLastChar+1	; calc string start offset
.be15	20 24 ca	jsr $ca24			jsr Plus_A		; calc string start addr
.be18	68		pla				pla			; push string length
.be19	4c f0 b7	jmp $b7f0			jmp PushZA
=30					CodeLen	.var *-XtPtr1
=$be1c					Here1 = *	; remember here
>bdfc	1e					.byte CodeLen	;patch wh_CodeLength
>be1c	3e 42 6f 64 79			Name0:	.text ">Body"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=48545					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be21	25					.byte ((">Body"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>be22	50					.byte WordFlags	;wh_Flags
>be23	03					.byte 3	;wh_CodeLength
>be24	27					  .byte LinkDisplacement	; offset to previous nt
=$be25					XtPtr1 ::= *
=48545					WordListLink ::= Nt0 ; remember the nt of this word for later
.be25					To_Body:
.be25	20 2b b4	jsr $b42b			jsr underflow_1
.be28	a9 03		lda #$03			lda #3		; PFA is after the beginning JSR abs
.be2a	4c 24 ca	jmp $ca24			jmp Plus_A
=8					CodeLen	.var *-XtPtr1
=$be2d					Here1 = *	; remember here
>be23	08					.byte CodeLen	;patch wh_CodeLength
>be2d	45 72 61 73 65			Name0:	.text "Erase"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=48562					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be32	a5					.byte (("Erase"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>be33	10					.byte WordFlags	;wh_Flags
>be34	03					.byte 3	;wh_CodeLength
>be35	11					  .byte LinkDisplacement	; offset to previous nt
=$be36					XtPtr1 ::= *
=48562					WordListLink ::= Nt0 ; remember the nt of this word for later
.be36					Erase:
.be36	20 fe b7	jsr $b7fe			jsr Zero
.be39	4c 53 be	jmp $be53			jmp Fill
=6					CodeLen	.var *-XtPtr1
=$be3c					Here1 = *	; remember here
>be34	06					.byte CodeLen	;patch wh_CodeLength
>be3c	42 6c 61 6e 6b			Name0:	.text "Blank"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=48577					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be41	65					.byte (("Blank"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>be42	10					.byte WordFlags	;wh_Flags
>be43	03					.byte 3	;wh_CodeLength
>be44	0f					  .byte LinkDisplacement	; offset to previous nt
=$be45					XtPtr1 ::= *
=48577					WordListLink ::= Nt0 ; remember the nt of this word for later
.be45					Blank:
.be45	20 1a b8	jsr $b81a			jsr Bl
.be48	4c 53 be	jmp $be53			jmp Fill
=6					CodeLen	.var *-XtPtr1
=$be4b					Here1 = *	; remember here
>be43	06					.byte CodeLen	;patch wh_CodeLength
>be4b	46 69 6c 6c			Name0:	.text "Fill"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=48591					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be4f	84					.byte (("Fill"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>be50	50					.byte WordFlags	;wh_Flags
>be51	03					.byte 3	;wh_CodeLength
>be52	0e					  .byte LinkDisplacement	; offset to previous nt
=$be53					XtPtr1 ::= *
=48591					WordListLink ::= Nt0 ; remember the nt of this word for later
.be53					Fill:
.be53	20 44 b4	jsr $b444			jsr underflow_3
.be56	b5 28		lda $28,x			lda DStack+4,x		; tmp1= address
.be58	85 14		sta $14				sta tmp1+0
.be5a	b5 29		lda $29,x			lda DStack+5,x
.be5c	85 15		sta $15				sta tmp1+1
.be5e	b5 26		lda $26,x			lda DStack+2,x		; tmp2= counter.lo
.be60	85 16		sta $16				sta tmp2+0
.be62	f6 27		inc $27,x			inc DStack+3,x		; so decrement & test for 0 works
.be64	b5 24		lda $24,x			lda DStack+0,x		; A= fill byte
.be66	a0 00		ldy #$00			ldy #0
.be68	c4 16		cpy $16		_loop:		cpy tmp2+0		; done?
.be6a	f0 09		beq $be75			beq _test2
.be6c	91 14		sta ($14),y	_3:		sta (tmp1),y		; store a byte
.be6e	c8		iny				iny			; to next byte
.be6f	d0 f7		bne $be68			bne _loop
.be71	e6 15		inc $15				inc tmp1+1		; increment addr page
.be73	d0 f3		bne $be68			bne _loop
.be75	d6 27		dec $27,x	_test2:		dec DStack+3,x		; any more pages?
.be77	d0 f3		bne $be6c			bne _3
.be79	4c 99 ad	jmp $ad99			jmp ThreeDrop	; Drop three cells off the Data Stack.
=41					CodeLen	.var *-XtPtr1
=$be7c					Here1 = *	; remember here
>be51	29					.byte CodeLen	;patch wh_CodeLength
>be7c	56 61 72 69 61 62 6c 65		Name0:	.text "Variable"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=48644					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be84	a8					.byte (("Variable"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>be85	10					.byte WordFlags	;wh_Flags
>be86	03					.byte 3	;wh_CodeLength
>be87	35					  .byte LinkDisplacement	; offset to previous nt
=$be88					XtPtr1 ::= *
=48644					WordListLink ::= Nt0 ; remember the nt of this word for later
.be88	20 c1 c1	jsr $c1c1	Variable:	jsr Create		; compile word header & push PFA
.be8b	a9 00		lda #$00			lda #0			; allot & initialize the variable's data
.be8d	a8		tay				tay
.be8e	4c 16 cd	jmp $cd16			jmp Comma_YA
=9					CodeLen	.var *-XtPtr1
=$be91					Here1 = *	; remember here
>be86	09					.byte CodeLen	;patch wh_CodeLength
>be91	32 56 61 72 69 61 62 6c		Name0:	.text "2Variable"	;  name of word as a string, ending at wh_NameLastChar
>be99	65
=9					NameLength = *-Name0
=48666					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be9a	a9					.byte (("2Variable"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>be9b	10					.byte WordFlags	;wh_Flags
>be9c	03					.byte 3	;wh_CodeLength
>be9d	16					  .byte LinkDisplacement	; offset to previous nt
=$be9e					XtPtr1 ::= *
=48666					WordListLink ::= Nt0 ; remember the nt of this word for later
.be9e	20 88 be	jsr $be88	Two_variable:	jsr Variable		; compile word header & push PFA & 1st cell of data
.bea1	4c 16 cd	jmp $cd16			jmp Comma_YA		; alloc & init 2nd cell of data
=6					CodeLen	.var *-XtPtr1
=$bea4					Here1 = *	; remember here
>be9c	06					.byte CodeLen	;patch wh_CodeLength
>bea4	43 6f 6e 73 74 61 6e 74		Name0:	.text "Constant"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=48684					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>beac	88					.byte (("Constant"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>bead	50					.byte WordFlags	;wh_Flags
>beae	03					.byte 3	;wh_CodeLength
>beaf	12					  .byte LinkDisplacement	; offset to previous nt
=$beb0					XtPtr1 ::= *
=48684					WordListLink ::= Nt0 ; remember the nt of this word for later
.beb0					Constant:
.beb0	20 2b b4	jsr $b42b			jsr underflow_1
.beb3	20 13 c1	jsr $c113			jsr Header_Comma	; compile word header
.beb6	20 7f b7	jsr $b77f			jsr LitCompile		; compile code to load registers, & pick a subroutine
.beb9	20 56 cd	jsr $cd56			jsr Jmp_Comma_NT_YA	; compile code to JMP to the subroutine
.bebc	4c de bb	jmp $bbde			jmp adjust_z		; fix word length
=15					CodeLen	.var *-XtPtr1
=$bebf					Here1 = *	; remember here
>beae	0f					.byte CodeLen	;patch wh_CodeLength
>bebf	32 43 6f 6e 73 74 61 6e		Name0:	.text "2Constant"	;  name of word as a string, ending at wh_NameLastChar
>bec7	74
=9					NameLength = *-Name0
=48712					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bec8	89					.byte (("2Constant"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>bec9	50					.byte WordFlags	;wh_Flags
>beca	03					.byte 3	;wh_CodeLength
>becb	1c					  .byte LinkDisplacement	; offset to previous nt
=$becc					XtPtr1 ::= *
=48712					WordListLink ::= Nt0 ; remember the nt of this word for later
.becc					Two_constant:
.becc	20 3f b4	jsr $b43f			jsr underflow_2
.becf	20 13 c1	jsr $c113			jsr Header_Comma	; compile word header
.bed2	20 8b cf	jsr $cf8b			jsr Swap
.bed5	20 76 b7	jsr $b776			jsr Literal		; compile push lo cell
.bed8	20 7f b7	jsr $b77f			jsr LitCompile		; compile push hi cell, YA=exit routine
.bedb	20 56 cd	jsr $cd56			jsr Jmp_Comma_NT_YA	; compile JMP from above
.bede	4c de bb	jmp $bbde			jmp adjust_z		; fix word length
=21					CodeLen	.var *-XtPtr1
=$bee1					Here1 = *	; remember here
>beca	15					.byte CodeLen	;patch wh_CodeLength
>bee1	56 61 6c 75 65			Name0:	.text "Value"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=48742					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bee6	a5					.byte (("Value"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>bee7	50					.byte WordFlags	;wh_Flags
>bee8	03					.byte 3	;wh_CodeLength
>bee9	1e					  .byte LinkDisplacement	; offset to previous nt
=$beea					XtPtr1 ::= *
=48742					WordListLink ::= Nt0 ; remember the nt of this word for later
.beea					Value:
.beea	20 2b b4	jsr $b42b			jsr underflow_1
.beed	20 13 c1	jsr $c113			jsr Header_Comma	; compile word header
.bef0	20 a8 b7	jsr $b7a8			jsr ldya_immed_comma	; compile lda # & ldy #
.bef3	a9 c1		lda #$c1			lda #<PushYA		; compile jmp PushYA
.bef5	a0 b7		ldy #$b7			ldy #>PushYA
.bef7	20 4f cd	jsr $cd4f			jsr Jmp_Comma_YA
.befa	4c de bb	jmp $bbde			jmp adjust_z		; fix word length
=19					CodeLen	.var *-XtPtr1
=$befd					Here1 = *	; remember here
>bee8	13					.byte CodeLen	;patch wh_CodeLength
>befd	32 56 61 6c 75 65		Name0:	.text "2Value"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=48771					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bf03	a6					.byte (("2Value"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>bf04	50					.byte WordFlags	;wh_Flags
>bf05	03					.byte 3	;wh_CodeLength
>bf06	1d					  .byte LinkDisplacement	; offset to previous nt
=$bf07					XtPtr1 ::= *
=48771					WordListLink ::= Nt0 ; remember the nt of this word for later
.bf07					TwoValue:
.bf07	20 3f b4	jsr $b43f			jsr underflow_2
.bf0a	20 13 c1	jsr $c113			jsr Header_Comma	; compile word header
.bf0d	a9 1a		lda #$1a			lda #<TwoValue_Runtime	; compile JSR TValue_Runtime
.bf0f	a0 bf		ldy #$bf			ldy #>TwoValue_Runtime
.bf11	20 39 cd	jsr $cd39			jsr Jsr_Comma_YA
.bf14	20 de bb	jsr $bbde			jsr adjust_z		; fix word length
.bf17	4c 23 cd	jmp $cd23			jmp Two_Comma		; compile the value, return
=19					CodeLen	.var *-XtPtr1
=$bf1a					Here1 = *	; remember here
>bf05	13					.byte CodeLen	;patch wh_CodeLength
.bf1a					TwoValue_Runtime:
.bf1a	68		pla				pla			; pop RTS addr
.bf1b	85 14		sta $14				sta tmp1+0
.bf1d	68		pla				pla
.bf1e	85 15		sta $15				sta tmp1+1
.bf20	a0 01		ldy #$01			ldy #1			; start at offset 1 (for RTS addr behavior)
.bf22	4c c8 c5	jmp $c5c8			jmp Two_Fetch_Tmp1Y	; fetch the data, return
>bf25	54 6f				Name0:	.text "To"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=48807					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bf27	e2					.byte (("To"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= NN+IM	; modifiable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>bf28	18					.byte WordFlags	;wh_Flags
>bf29	03					.byte 3	;wh_CodeLength
>bf2a	24					  .byte LinkDisplacement	; offset to previous nt
=$bf2b					XtPtr1 ::= *
=48807					WordListLink ::= Nt0 ; remember the nt of this word for later
.bf2b					To:
.bf2b	20 44 bc	jsr $bc44			jsr Tick		; We always need the xt of the target word
.bf2e	b5 24		lda $24,x			lda DStack+0,x		; tmp1= xt
.bf30	b4 25		ldy $25,x			ldy DStack+1,x
.bf32	85 14		sta $14				sta tmp1+0
.bf34	84 15		sty $15				sty tmp1+1
.bf36	a0 00		ldy #$00			ldy #0			; determine what type xt points at
.bf38	b1 14		lda ($14),y			lda (tmp1),y
.bf3a	c9 a0		cmp #$a0			cmp #$a0		;   LDY #
.bf3c	d0 38		bne $bf76			bne _Test2
.bf3e	a5 0a		lda $0a				lda state		; check compile state
.bf40	f0 20		beq $bf62			beq _Value_interpret
.bf42	a9 02		lda #$02			lda #<PopYA		; compile jsr PopYA
.bf44	a0 b4		ldy #$b4			ldy #>PopYA
.bf46	20 39 cd	jsr $cd39			jsr Jsr_Comma_YA
.bf49	a9 8c		lda #$8c			lda #$8C		; compile STY xt+1
.bf4b	20 ff cc	jsr $ccff			jsr C_Comma_A
.bf4e	20 72 ca	jsr $ca72			jsr One_plus
.bf51	20 6e cf	jsr $cf6e			jsr Dup
.bf54	20 13 cd	jsr $cd13			jsr Comma
.bf57	a9 8d		lda #$8d			lda #$8D		; compile STA xt+3
.bf59	20 ff cc	jsr $ccff			jsr C_Comma_A
.bf5c	20 1f ca	jsr $ca1f			jsr Cell_Plus
.bf5f	4c 13 cd	jmp $cd13			jmp Comma
.bf62					_Value_interpret:
.bf62	20 3f b4	jsr $b43f			jsr underflow_2		; ( n xt )
.bf65	e8		inx				inx			; Drop xt
.bf66	e8		inx				inx
.bf67	b5 24		lda $24,x			lda DStack+0,x		; LSB
.bf69	a0 03		ldy #$03			ldy #3			;   modify LDA # data
.bf6b	91 14		sta ($14),y			sta (tmp1),y
.bf6d	b5 25		lda $25,x			lda DStack+1,x		; MSB
.bf6f	a0 01		ldy #$01			ldy #1			;   modify LDY # data
.bf71	91 14		sta ($14),y			sta (tmp1),y
.bf73	e8		inx				inx			; Drop n
.bf74	e8		inx				inx
.bf75	60		rts				rts
.bf76	c9 20		cmp #$20	_Test2:		cmp #$20		;   JSR abs ?
.bf78	d0 33		bne $bfad			bne _Err
.bf7a	a9 03		lda #$03			lda #3			; advance xt over the JSR abs to the data
.bf7c	20 24 ca	jsr $ca24			jsr Plus_A
.bf7f	a0 01		ldy #$01			ldy #1			; get JSR abs addr lo byte
.bf81	b1 14		lda ($14),y			lda (tmp1),y
.bf83	c9 1a		cmp #$1a			cmp #<TwoValue_Runtime
.bf85	d0 11		bne $bf98			bne _Test3
.bf87	a5 0a		lda $0a				lda state		; check compile state
.bf89	f0 0a		beq $bf95			beq _2Value_runtime
.bf8b	20 a8 b7	jsr $b7a8			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bf8e	a9 9b		lda #$9b			lda #<Two_Store_YA
.bf90	a0 c5		ldy #$c5			ldy #>Two_Store_YA
.bf92	4c 39 cd	jmp $cd39			jmp Jsr_Comma_YA	; compile JSR Two_Store_YA; return
.bf95	4c 95 c5	jmp $c595	_2Value_runtime: jmp Two_Store
.bf98					_Test3:
.bf98	c9 5e		cmp #$5e			cmp #<FValue_runtime
.bf9a	d0 11		bne $bfad			bne _Err
.bf9c	a5 0a		lda $0a				lda state		; check compile state
.bf9e	f0 0a		beq $bfaa			beq _FValue_interpret
.bfa0	20 a8 b7	jsr $b7a8			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bfa3	a9 7c		lda #$7c			lda #<FStore_YA
.bfa5	a0 86		ldy #$86			ldy #>FStore_YA
.bfa7	4c 39 cd	jmp $cd39			jmp Jsr_Comma_YA	; compile JSR FStore_YA; return
.bfaa	4c 79 86	jmp $8679	_FValue_interpret: jmp FStore
.bfad	a9 e0		lda #$e0	_Err:		lda #$100+err_InvalidName ; unrecognized type.
.bfaf	20 87 b4	jsr $b487			jsr ThrowA
=135					CodeLen	.var *-XtPtr1
=$bfb2					Here1 = *	; remember here
>bf29	87					.byte CodeLen	;patch wh_CodeLength
>bfb2	44 4d 61 78			Name0:	.text "DMax"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=48950					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bfb6	04					.byte (("DMax"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=143					LinkDisplacement = Nt0-WordListLink
>bfb7	10					.byte WordFlags	;wh_Flags
>bfb8	03					.byte 3	;wh_CodeLength
>bfb9	8f					  .byte LinkDisplacement	; offset to previous nt
=$bfba					XtPtr1 ::= *
=48950					WordListLink ::= Nt0 ; remember the nt of this word for later
.bfba	a9 80		lda #$80	DMax:		lda #$80
.bfbc	d0 0a		bne $bfc8			bne DMin3
=4					CodeLen	.var *-XtPtr1
=$bfbe					Here1 = *	; remember here
>bfb8	04					.byte CodeLen	;patch wh_CodeLength
>bfbe	44 4d 69 6e			Name0:	.text "DMin"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=48962					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bfc2	c4					.byte (("DMin"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>bfc3	10					.byte WordFlags	;wh_Flags
>bfc4	03					.byte 3	;wh_CodeLength
>bfc5	0c					  .byte LinkDisplacement	; offset to previous nt
=$bfc6					XtPtr1 ::= *
=48962					WordListLink ::= Nt0 ; remember the nt of this word for later
.bfc6	a9 00		lda #$00	DMin:		lda #0
.bfc8	85 16		sta $16		DMin3:		sta tmp2	; save sign correction
.bfca	20 49 b4	jsr $b449			jsr underflow_4
.bfcd	b5 26		lda $26,x			lda DStack+2,x	; compare
.bfcf	d5 2a		cmp $2a,x			cmp DStack+6,x
.bfd1	b5 27		lda $27,x			lda DStack+3,x
.bfd3	f5 2b		sbc $2b,x			sbc DStack+7,x
.bfd5	b5 24		lda $24,x			lda DStack+0,x
.bfd7	f5 28		sbc $28,x			sbc DStack+4,x
.bfd9	b5 25		lda $25,x			lda DStack+1,x
.bfdb	f5 29		sbc $29,x			sbc DStack+5,x
.bfdd	50 02		bvc $bfe1			bvc +
.bfdf	49 80		eor #$80			eor #$80	; fix sign
.bfe1	45 16		eor $16		+		eor tmp2
.bfe3	30 0e		bmi $bff3			bmi TwoNip_nouf	; if negative, NOS is larger and needs to be kept
.bfe5	4c 4e c5	jmp $c54e			jmp Two_Drop
=34					CodeLen	.var *-XtPtr1
=$bfe8					Here1 = *	; remember here
>bfc4	22					.byte CodeLen	;patch wh_CodeLength
>bfe8	32 4e 69 70			Name0:	.text "2Nip"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=49004					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bfec	04					.byte (("2Nip"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>bfed	50					.byte WordFlags	;wh_Flags
>bfee	03					.byte 3	;wh_CodeLength
>bfef	2a					  .byte LinkDisplacement	; offset to previous nt
=$bff0					XtPtr1 ::= *
=49004					WordListLink ::= Nt0 ; remember the nt of this word for later
.bff0	20 49 b4	jsr $b449	TwoNip:		jsr underflow_4
.bff3	b5 24		lda $24,x	TwoNip_NoUf:	lda DStack+0,x	; copy dTOS to dNOS
.bff5	95 28		sta $28,x			sta DStack+4,x
.bff7	b5 25		lda $25,x			lda DStack+1,x
.bff9	95 29		sta $29,x			sta DStack+5,x
.bffb	b5 26		lda $26,x			lda DStack+2,x
.bffd	95 2a		sta $2a,x			sta DStack+6,x
.bfff	b5 27		lda $27,x			lda DStack+3,x
.c001	95 2b		sta $2b,x			sta DStack+7,x
.c003	4c 4e c5	jmp $c54e			jmp Two_Drop
=22					CodeLen	.var *-XtPtr1
=$c006					Here1 = *	; remember here
>bfee	16					.byte CodeLen	;patch wh_CodeLength
>c006	53 3e 44			Name0:	.text "S>D"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=49033					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c009	83					.byte (("S>D"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>c00a	40					.byte WordFlags	;wh_Flags
>c00b	03					.byte 3	;wh_CodeLength
>c00c	1d					  .byte LinkDisplacement	; offset to previous nt
=$c00d					XtPtr1 ::= *
=49033					WordListLink ::= Nt0 ; remember the nt of this word for later
.c00d					S_To_D:
.c00d	20 2b b4	jsr $b42b			jsr underflow_1
.c010	a0 00		ldy #$00			ldy #0			; assume positive
.c012	b5 25		lda $25,x			lda DStack+1,x		; test n
.c014	10 01		bpl $c017			bpl +
.c016	88		dey				dey			; make negative
.c017					+
.c017	ca		dex				dex			; push new hi cell
.c018	ca		dex				dex
.c019	94 24		sty $24,x			sty DStack+0,x
.c01b	94 25		sty $25,x			sty DStack+1,x
=16					CodeLen	.var *-XtPtr1
=$c01d					Here1 = *	; remember here
>c00b	10					.byte CodeLen	;patch wh_CodeLength
.c01d	60		rts				rts
>c01e	44 3e 53			Name0:	.text "D>S"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=49057					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c021	63					.byte (("D>S"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>c022	40					.byte WordFlags	;wh_Flags
>c023	03					.byte 3	;wh_CodeLength
>c024	18					  .byte LinkDisplacement	; offset to previous nt
=$c025					XtPtr1 ::= *
=49057					WordListLink ::= Nt0 ; remember the nt of this word for later
.c025					D_To_S:
.c025	20 3f b4	jsr $b43f			jsr underflow_2
.c028	e8		inx				inx		; Drop hi cell
.c029	e8		inx				inx
=5					CodeLen	.var *-XtPtr1
=$c02a					Here1 = *	; remember here
>c023	05					.byte CodeLen	;patch wh_CodeLength
.c02a	60		rts				rts
>c02b	44 2d				Name0:	.text "D-"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=49069					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c02d	a2					.byte (("D-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c02e	40					.byte WordFlags	;wh_Flags
>c02f	03					.byte 3	;wh_CodeLength
>c030	0c					  .byte LinkDisplacement	; offset to previous nt
=$c031					XtPtr1 ::= *
=49069					WordListLink ::= Nt0 ; remember the nt of this word for later
.c031					D_Minus:
.c031	20 49 b4	jsr $b449			jsr underflow_4 ; two double numbers
.c034	38		sec				sec
.c035	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of lower word
.c037	f5 26		sbc $26,x			sbc DStack+2,x
.c039	95 2a		sta $2a,x			sta DStack+6,x
.c03b	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of lower word
.c03d	f5 27		sbc $27,x			sbc DStack+3,x
.c03f	95 2b		sta $2b,x			sta DStack+7,x
.c041	b5 28		lda $28,x			lda DStack+4,x	; LSB of upper word
.c043	f5 24		sbc $24,x			sbc DStack+0,x
.c045	95 28		sta $28,x			sta DStack+4,x
.c047	b5 29		lda $29,x			lda DStack+5,x	; MSB of upper word
.c049	f5 25		sbc $25,x			sbc DStack+1,x
.c04b	95 29		sta $29,x			sta DStack+5,x
.c04d	e8		inx				inx
.c04e	e8		inx				inx
.c04f	e8		inx				inx
.c050	e8		inx				inx
=32					CodeLen	.var *-XtPtr1
=$c051					Here1 = *	; remember here
>c02f	20					.byte CodeLen	;patch wh_CodeLength
.c051	60		rts				rts
>c052	44 2b				Name0:	.text "D+"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=49108					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c054	62					.byte (("D+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c055	40					.byte WordFlags	;wh_Flags
>c056	03					.byte 3	;wh_CodeLength
>c057	27					  .byte LinkDisplacement	; offset to previous nt
=$c058					XtPtr1 ::= *
=49108					WordListLink ::= Nt0 ; remember the nt of this word for later
.c058					D_Plus:
.c058	20 49 b4	jsr $b449			jsr underflow_4 ; two double numbers
.c05b	18		clc				clc
.c05c	b5 26		lda $26,x			lda DStack+2,x	; LSB of lower word
.c05e	75 2a		adc $2a,x			adc DStack+6,x
.c060	95 2a		sta $2a,x			sta DStack+6,x
.c062	b5 27		lda $27,x			lda DStack+3,x	; MSB of lower word
.c064	75 2b		adc $2b,x			adc DStack+7,x
.c066	95 2b		sta $2b,x			sta DStack+7,x
.c068	b5 24		lda $24,x			lda DStack+0,x	; LSB of upper word
.c06a	75 28		adc $28,x			adc DStack+4,x
.c06c	95 28		sta $28,x			sta DStack+4,x
.c06e	b5 25		lda $25,x			lda DStack+1,x	; MSB of upper word
.c070	75 29		adc $29,x			adc DStack+5,x
.c072	95 29		sta $29,x			sta DStack+5,x
.c074	e8		inx				inx
.c075	e8		inx				inx
.c076	e8		inx				inx
.c077	e8		inx				inx
=32					CodeLen	.var *-XtPtr1
=$c078					Here1 = *	; remember here
>c056	20					.byte CodeLen	;patch wh_CodeLength
.c078	60		rts				rts
>c079	44 31 2b			Name0:	.text "D1+"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=49148					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c07c	63					.byte (("D1+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=40					LinkDisplacement = Nt0-WordListLink
>c07d	40					.byte WordFlags	;wh_Flags
>c07e	03					.byte 3	;wh_CodeLength
>c07f	28					  .byte LinkDisplacement	; offset to previous nt
=$c080					XtPtr1 ::= *
=49148					WordListLink ::= Nt0 ; remember the nt of this word for later
.c080	20 3f b4	jsr $b43f	D1Plus:		jsr underflow_2
.c083	f6 26		inc $26,x			inc DStack+2,x
.c085	d0 0a		bne $c091			bne +
.c087	f6 27		inc $27,x			inc DStack+3,x
.c089	d0 06		bne $c091			bne +
.c08b	f6 24		inc $24,x			inc DStack+0,x
.c08d	d0 02		bne $c091			bne +
.c08f	f6 25		inc $25,x			inc DStack+1,x
.c091					+
=17					CodeLen	.var *-XtPtr1
=$c091					Here1 = *	; remember here
>c07e	11					.byte CodeLen	;patch wh_CodeLength
.c091	60		rts				rts
>c092	44 31 2d			Name0:	.text "D1-"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=49173					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c095	a3					.byte (("D1-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>c096	40					.byte WordFlags	;wh_Flags
>c097	03					.byte 3	;wh_CodeLength
>c098	19					  .byte LinkDisplacement	; offset to previous nt
=$c099					XtPtr1 ::= *
=49173					WordListLink ::= Nt0 ; remember the nt of this word for later
.c099	20 3f b4	jsr $b43f	D1Minus:	jsr underflow_2
.c09c	b5 26		lda $26,x			lda DStack+2,x
.c09e	d0 0e		bne $c0ae			bne _1
.c0a0	b5 27		lda $27,x			lda DStack+3,x
.c0a2	d0 08		bne $c0ac			bne _2
.c0a4	b5 24		lda $24,x			lda DStack+0,x
.c0a6	d0 02		bne $c0aa			bne _3
.c0a8	d6 25		dec $25,x			dec DStack+1,x
.c0aa	d6 24		dec $24,x	_3:		dec DStack+0,x
.c0ac	d6 27		dec $27,x	_2:		dec DStack+3,x
.c0ae	d6 26		dec $26,x	_1:		dec DStack+2,x
=23					CodeLen	.var *-XtPtr1
=$c0b0					Here1 = *	; remember here
>c097	17					.byte CodeLen	;patch wh_CodeLength
.c0b0	60		rts				rts
>c0b1	41 6c 6c 6f 74			Name0:	.text "Allot"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=49206					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c0b6	85					.byte (("Allot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c0b7	50					.byte WordFlags	;wh_Flags
>c0b8	03					.byte 3	;wh_CodeLength
>c0b9	21					  .byte LinkDisplacement	; offset to previous nt
=$c0ba					XtPtr1 ::= *
=49206					WordListLink ::= Nt0 ; remember the nt of this word for later
.c0ba					Allot:
.c0ba	20 2b b4	jsr $b42b			jsr underflow_1
.c0bd	18		clc				clc			; adjust cp
.c0be	b5 24		lda $24,x			lda DStack+0,x
.c0c0	65 00		adc $00				adc cp+0
.c0c2	85 00		sta $00				sta cp+0
.c0c4	a8		tay				tay			;   save lo byte
.c0c5	b5 25		lda $25,x			lda DStack+1,x
.c0c7	85 14		sta $14				sta tmp1
.c0c9	65 01		adc $01				adc cp+1
.c0cb	85 01		sta $01				sta cp+1
.c0cd	24 14		bit $14				bit tmp1
.c0cf	30 15		bmi $c0e6			bmi _release
.c0d1	b0 06		bcs $c0d9			bcs _pos_err		; carry from the add is bad
=32600					_last = cp_end-2*PadOffset
.c0d3	c0 58		cpy #$58			cpy #<_last		; cp < cp_end ?
.c0d5	e9 7f		sbc #$7f			sbc #>_last
.c0d7	90 2c		bcc $c105			bcc _done		; we're fine.
.c0d9					_pos_err:
.c0d9	a9 58		lda #$58			lda #<_last
.c0db	85 00		sta $00				sta cp+0
.c0dd	a9 7f		lda #$7f			lda #>_last
.c0df	85 01		sta $01				sta cp+1
.c0e1	a9 c5		lda #$c5			lda #$100+err_Allocate
.c0e3	4c 87 b4	jmp $b487			jmp ThrowA
.c0e6					_release:
.c0e6	90 06		bcc $c0ee			bcc _neg_err		; borrow indicates we've gone below 0
.c0e8	c0 66		cpy #$66			cpy #<cp0
.c0ea	e9 0b		sbc #$0b			sbc #>cp0
.c0ec	b0 17		bcs $c105			bcs _done
.c0ee					_neg_err:
.c0ee	a9 66		lda #$66			lda #<cp0		; Set CP to CP0
.c0f0	85 00		sta $00				sta cp+0
.c0f2	a9 0b		lda #$0b			lda #>cp0
.c0f4	85 01		sta $01				sta cp+1
.c0f6	a9 23		lda #$23			lda #<forth_dictionary_start	; set WordLists[Forth] to the first
.c0f8	8d 12 03	sta $0312			sta WordlistsV+0		; word in ROM
.c0fb	a9 cf		lda #$cf			lda #>forth_dictionary_start
.c0fd	8d 13 03	sta $0313			sta WordlistsV+1
.c100	a9 c4		lda #$c4			lda #$100+err_Free		; abort with an error
.c102	4c 87 b4	jmp $b487			jmp ThrowA
.c105					_done:
.c105	e8		inx				inx			; Drop n
.c106	e8		inx				inx
=77					CodeLen	.var *-XtPtr1
=$c107					Here1 = *	; remember here
>c0b8	4d					.byte CodeLen	;patch wh_CodeLength
.c107	60		rts				rts
>c108	48 65 61 64 65 72 2c		Name0:	.text "Header,"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=49295					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c10f	87					.byte (("Header,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=89					LinkDisplacement = Nt0-WordListLink
>c110	10					.byte WordFlags	;wh_Flags
>c111	03					.byte 3	;wh_CodeLength
>c112	59					  .byte LinkDisplacement	; offset to previous nt
=$c113					XtPtr1 ::= *
=49295					WordListLink ::= Nt0 ; remember the nt of this word for later
.c113					Header_Comma:
.c113	20 21 c1	jsr $c121			jsr Header_Build
.c116					Header_Link:
.c116	a5 0e		lda $0e				lda WorkWord+0		; dp= WorkWord
.c118	85 10		sta $10				sta dp+0
.c11a	a5 0f		lda $0f				lda WorkWord+1
.c11c	85 11		sta $11				sta dp+1
.c11e	4c 62 ba	jmp $ba62			jmp dp_to_current	; Update the CURRENT wordlist with the new DP.
.c121					Header_Build:
.c121	20 b1 ba	jsr $bab1			jsr parse_name_check	; get name string, throw error if empty string
.c124	20 bc cc	jsr $ccbc			jsr Two_dup		; ( addr u addr u )
.c127	20 63 a1	jsr $a163			jsr Get_Current
.c12a	20 cd a1	jsr $a1cd			jsr Search_WordList	; ( addr u xt f ) or ( addr u 0 )
.c12d	e8		inx				inx			; pop flag.
.c12e	e8		inx				inx
.c12f	b5 22		lda $22,x			lda DStack-2,x		; not found?
.c131	f0 21		beq $c154			beq _new_name		; We haven't seen this one before.
.c133	e8		inx				inx			; Drop xt
.c134	e8		inx				inx
.c135	24 0c		bit $0c				bit status		; Check bit 7
.c137	10 08		bpl $c141			bpl _redefined_name	; Bit 7 is zero, so print the message.
.c139	a9 80		lda #$80			lda #$80		; Set bit 7 to indicate dup
.c13b	05 0c		ora $0c				ora status
.c13d	85 0c		sta $0c				sta status
.c13f	d0 19		bne $c15a			bne _process_name
.c141					_redefined_name:
.c141	a9 31		lda #$31			lda #<str_redefined
.c143	a0 da		ldy #$da			ldy #>str_redefined
.c145	20 0b ce	jsr $ce0b			jsr Print_ASCIIZ_YA_no_lf
.c148	20 bc cc	jsr $ccbc			jsr Two_dup		 ; ( addr u addr u )
.c14b	20 f0 cd	jsr $cdf0			jsr Type
.c14e	20 e4 cd	jsr $cde4			jsr Space
.c151	4c 5a c1	jmp $c15a			jmp _process_name
.c154					_new_name:
.c154	a9 7f		lda #$7f			lda #$7F		; Clear bit 0 of status to indicate new word.
.c156	25 0c		and $0c				and status
.c158	85 0c		sta $0c				sta status
.c15a					_process_name:
.c15a	20 bc cc	jsr $ccbc			jsr Two_dup		; compile name string ending at wh_NameLastChar
.c15d	20 40 ca	jsr $ca40			jsr Here
.c160	20 8b cf	jsr $cf8b			jsr Swap
.c163	20 ef ad	jsr $adef			jsr CMove
.c166	20 6e cf	jsr $cf6e			jsr Dup			;   save length
.c169	20 ba c0	jsr $c0ba			jsr Allot
.c16c	38		sec				sec
.c16d	a5 00		lda $00				lda cp+0		; WorkWord= nt
.c16f	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.c171	85 0e		sta $0e				sta WorkWord+0
.c173	a5 01		lda $01				lda cp+1
.c175	e9 00		sbc #$00			sbc #0
.c177	85 0f		sta $0f				sta WorkWord+1
.c179	a0 7f		ldy #$7f			ldy #wh_NameLastChar
.c17b	b1 0e		lda ($0e),y			lda (WorkWord),y
.c17d	0a		asl a				asl a
.c17e	0a		asl a				asl a
.c17f	0a		asl a				asl a
.c180	0a		asl a				asl a
.c181	0a		asl a				asl a
.c182	15 24		ora $24,x			ora DStack+0,x
.c184	95 24		sta $24,x			sta DStack+0,x
.c186	20 fc cc	jsr $ccfc			jsr C_Comma		; compile wh_HashNameLen
.c189	e8		inx				inx			; drop name string addr
.c18a	e8		inx				inx
.c18b	a9 10		lda #$10			lda #NN			; compile wh_Flags
.c18d	20 ff cc	jsr $ccff			jsr C_Comma_A
.c190	a9 03		lda #$03			lda #3			; compile wh_CodeLength (temporary value, see adjust_z)
.c192	20 ff cc	jsr $ccff			jsr C_Comma_A
.c195	20 52 ba	jsr $ba52			jsr current_to_dp	; Get the CURRENT dictionary pointer.
.c198	38		sec				sec
.c199	a5 0e		lda $0e				lda WorkWord+0
.c19b	e5 10		sbc $10				sbc dp+0
.c19d	a8		tay				tay
.c19e	a5 0f		lda $0f				lda WorkWord+1
.c1a0	e5 11		sbc $11				sbc dp+1
.c1a2	f0 0f		beq $c1b3			beq _LinkShort
.c1a4	a0 81		ldy #$81			ldy #wh_Flags		; set FP flag
.c1a6	b1 0e		lda ($0e),y			lda (WorkWord),y
.c1a8	09 01		ora #$01			ora #FP
.c1aa	91 0e		sta ($0e),y			sta (WorkWord),y
.c1ac	a5 10		lda $10				lda dp+0		; compile wh_LinkNt ptr word
.c1ae	a4 11		ldy $11				ldy dp+1
.c1b0	4c 16 cd	jmp $cd16			jmp Comma_YA
.c1b3	98		tya		_LinkShort:	tya			; compile wh_LinkNt offset byte
.c1b4	4c ff cc	jmp $ccff			jmp C_Comma_A
=164					CodeLen	.var *-XtPtr1
=$c1b7					Here1 = *	; remember here
>c111	a4					.byte CodeLen	;patch wh_CodeLength
>c1b7	43 72 65 61 74 65		Name0:	.text "Create"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=49469					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c1bd	a6					.byte (("Create"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=174					LinkDisplacement = Nt0-WordListLink
>c1be	10					.byte WordFlags	;wh_Flags
>c1bf	03					.byte 3	;wh_CodeLength
>c1c0	ae					  .byte LinkDisplacement	; offset to previous nt
=$c1c1					XtPtr1 ::= *
=49469					WordListLink ::= Nt0 ; remember the nt of this word for later
.c1c1					Create:
.c1c1	20 13 c1	jsr $c113			jsr Header_Comma	; compile word header
.c1c4	a9 ce		lda #$ce			lda #<DoVar		; compile JSR DoVar
.c1c6	a0 c1		ldy #$c1			ldy #>DoVar
.c1c8	20 39 cd	jsr $cd39			jsr Jsr_Comma_YA
.c1cb	4c de bb	jmp $bbde			jmp adjust_z
=13					CodeLen	.var *-XtPtr1
=$c1ce					Here1 = *	; remember here
>c1bf	0d					.byte CodeLen	;patch wh_CodeLength
.c1ce					DoVar:
.c1ce	68		pla				pla		; Pull the return address off the machine's stack
.c1cf	18		clc				clc		;   +1 because of the way the JSR works
.c1d0	69 01		adc #$01			adc #1
.c1d2	ca		dex				dex		; push on data stack
.c1d3	ca		dex				dex
.c1d4	95 24		sta $24,x			sta DStack+0,x
.c1d6	68		pla				pla
.c1d7	69 00		adc #$00			adc #0
.c1d9	95 25		sta $25,x			sta DStack+1,x
.c1db	60		rts				rts		; takes us to the original caller of the
>c1dc	44 6f 65 73 3e			Name0:	.text "Does>"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=49505					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c1e1	c5					.byte (("Does>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>c1e2	1c					.byte WordFlags	;wh_Flags
>c1e3	03					.byte 3	;wh_CodeLength
>c1e4	24					  .byte LinkDisplacement	; offset to previous nt
=$c1e5					XtPtr1 ::= *
=49505					WordListLink ::= Nt0 ; remember the nt of this word for later
.c1e5					Does:
.c1e5	a0 c1		ldy #$c1			ldy #>_runtime		; compile JSR _runtime
.c1e7	a9 ff		lda #$ff			lda #<_runtime
.c1e9	20 39 cd	jsr $cd39			jsr Jsr_Comma_YA
.c1ec	a9 68		lda #$68			lda #$68		; compile PLA  to pop RTS addr (PFA-1) to AY
.c1ee	a0 a8		ldy #$a8			ldy #$a8		;    & TAY
.c1f0	20 16 cd	jsr $cd16			jsr Comma_YA
.c1f3	a9 68		lda #$68			lda #$68		; compile PLA
.c1f5	20 ff cc	jsr $ccff			jsr C_Comma_A
.c1f8	a0 c2		ldy #$c2			ldy #>_DoDoes		; compile JSR _DoDoes
.c1fa	a9 1c		lda #$1c			lda #<_DoDoes
.c1fc	4c 39 cd	jmp $cd39			jmp Jsr_Comma_YA
=26					CodeLen	.var *-XtPtr1
=$c1ff					Here1 = *	; remember here
>c1e3	1a					.byte CodeLen	;patch wh_CodeLength
.c1ff					_runtime:
.c1ff	20 52 ba	jsr $ba52			jsr current_to_dp	; Grab the DP from the CURRENT wordlist.
.c202	a5 10		lda $10				lda dp+0		; tmp1= dp
.c204	a4 11		ldy $11				ldy dp+1
.c206	85 14		sta $14				sta tmp1+0
.c208	84 15		sty $15				sty tmp1+1
.c20a	20 c2 bd	jsr $bdc2			jsr NameToIntTmp	; tmp2= xt
.c20d	18		clc				clc
.c20e	68		pla				pla		; RTS addr LSB
.c20f	69 01		adc #$01			adc #1		;   +1 for JSR bahavior
.c211	a0 01		ldy #$01			ldy #1
.c213	91 16		sta ($16),y			sta (tmp2),y
.c215	68		pla				pla		; RTS addr MSB
.c216	69 00		adc #$00			adc #0
.c218	c8		iny				iny
.c219	91 16		sta ($16),y			sta (tmp2),y
.c21b	60		rts				rts
.c21c					_DoDoes:
.c21c	c8		iny				iny		; +1 for JSR behavior
.c21d	d0 03		bne $c222			bne +
.c21f	18		clc				clc
.c220	69 01		adc #$01			adc #1
.c222					+
.c222	4c 7c cf	jmp $cf7c			jmp PushAY
>c225	55 6e 75 73 65 64		Name0:	.text "Unused"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=49579					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c22b	86					.byte (("Unused"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=74					LinkDisplacement = Nt0-WordListLink
>c22c	00					.byte WordFlags	;wh_Flags
>c22d	03					.byte 3	;wh_CodeLength
>c22e	4a					  .byte LinkDisplacement	; offset to previous nt
=$c22f					XtPtr1 ::= *
=49579					WordListLink ::= Nt0 ; remember the nt of this word for later
.c22f					Unused:
=32600					_last = cp_end-2*padoffset
.c22f	ca		dex				dex
.c230	ca		dex				dex
.c231	38		sec				sec
.c232	a9 58		lda #$58			lda #<_last
.c234	e5 00		sbc $00				sbc cp+0
.c236	95 24		sta $24,x			sta DStack+0,x
.c238	a9 7f		lda #$7f			lda #>_last
.c23a	e5 01		sbc $01				sbc cp+1
.c23c	95 25		sta $25,x			sta DStack+1,x
=15					CodeLen	.var *-XtPtr1
=$c23e					Here1 = *	; remember here
>c22d	0f					.byte CodeLen	;patch wh_CodeLength
.c23e	60		rts				rts
>c23f	44 65 70 74 68			Name0:	.text "Depth"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=49604					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c244	05					.byte (("Depth"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>c245	10					.byte WordFlags	;wh_Flags
>c246	03					.byte 3	;wh_CodeLength
>c247	19					  .byte LinkDisplacement	; offset to previous nt
=$c248					XtPtr1 ::= *
=49604					WordListLink ::= Nt0 ; remember the nt of this word for later
.c248					Depth:
.c248	a9 28		lda #$28			lda #DStack0	; A= DStack0 - X
.c24a	86 1a		stx $1a				stx tmp4
.c24c	38		sec				sec
.c24d	e5 1a		sbc $1a				sbc tmp4
.c24f	4a		lsr a				lsr		; divide by two because each cell is two bytes
.c250	4c f0 b7	jmp $b7f0			jmp PushZA
=11					CodeLen	.var *-XtPtr1
=$c253					Here1 = *	; remember here
>c246	0b					.byte CodeLen	;patch wh_CodeLength
>c253	4b 65 79			Name0:	.text "Key"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=49622					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c256	23					.byte (("Key"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>c257	10					.byte WordFlags	;wh_Flags
>c258	03					.byte 3	;wh_CodeLength
>c259	12					  .byte LinkDisplacement	; offset to previous nt
=$c25a					XtPtr1 ::= *
=49622					WordListLink ::= Nt0 ; remember the nt of this word for later
.c25a	20 60 c2	jsr $c260	Key:		jsr key_a		; returns char in A
.c25d	4c f0 b7	jmp $b7f0			jmp PushZA
=6					CodeLen	.var *-XtPtr1
=$c260					Here1 = *	; remember here
>c258	06					.byte CodeLen	;patch wh_CodeLength
.c260					Key_A:
.c260	6c 08 03	jmp ($0308)			jmp (input)		; JSR/RTS
>c263	4b 65 79 3f			Name0:	.text "Key?"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=49639					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c267	e4					.byte (("Key?"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>c268	10					.byte WordFlags	;wh_Flags
>c269	03					.byte 3	;wh_CodeLength
>c26a	11					  .byte LinkDisplacement	; offset to previous nt
=$c26b					XtPtr1 ::= *
=49639					WordListLink ::= Nt0 ; remember the nt of this word for later
.c26b	20 71 c2	jsr $c271	KeyQ:		jsr KeyQ_A
.c26e	4c f0 b7	jmp $b7f0			jmp PushZA
.c271	6c 0a 03	jmp ($030a)	KeyQ_A:		jmp (HaveKey)
>c274	52 65 66 69 6c 6c		Name0:	.text "Refill"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=49658					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c27a	86					.byte (("Refill"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>c27b	10					.byte WordFlags	;wh_Flags
>c27c	03					.byte 3	;wh_CodeLength
>c27d	13					  .byte LinkDisplacement	; offset to previous nt
=$c27e					XtPtr1 ::= *
=49658					WordListLink ::= Nt0 ; remember the nt of this word for later
.c27e					Refill:
.c27e	a9 00		lda #$00			lda #0			; show empty in case of error
.c280	85 06		sta $06				sta ciblen+0
.c282	85 07		sta $07				sta ciblen+1
.c284	a5 02		lda $02				lda insrc		; cheat: We only check LSB
.c286	d0 24		bne $c2ac			bne _src_not_kbd
.c288	a5 04		lda $04				lda cib+0		; address of CIB is NOS
.c28a	a4 05		ldy $05				ldy cib+1
.c28c	20 c1 b7	jsr $b7c1			jsr PushYA
.c28f	a9 ff		lda #$ff			lda #bsize		; max number of chars is TOS
.c291	20 f0 b7	jsr $b7f0			jsr PushZA		;  cheat: We only accept max 255
.c294	20 c2 c2	jsr $c2c2			jsr Accept		; ( addr n1 -- n2)
.c297	b5 24		lda $24,x			lda DStack+0,x
.c299	85 06		sta $06				sta ciblen+0
.c29b	b5 25		lda $25,x			lda DStack+1,x
.c29d	85 07		sta $07				sta ciblen+1		; though we only accept 255 chars
.c29f	a9 00		lda #$00			lda #0
.c2a1	85 08		sta $08				sta toin+0
.c2a3	85 09		sta $09				sta toin+1
.c2a5	a9 ff		lda #$ff			lda #$FF		; overwrite with TRUE flag
.c2a7	95 24		sta $24,x			sta DStack+0,x
.c2a9	95 25		sta $25,x			sta DStack+1,x
.c2ab	60		rts				rts
.c2ac					_src_not_kbd:
.c2ac	c9 ff		cmp #$ff			cmp #$ff
.c2ae	d0 03		bne $c2b3			bne _src_not_string
.c2b0	4c e2 b7	jmp $b7e2			jmp False
.c2b3					_src_not_string:
.c2b3	a9 eb		lda #$eb			lda #$100+err_Unsupported
.c2b5	20 87 b4	jsr $b487			jsr ThrowA
=58					CodeLen	.var *-XtPtr1
=$c2b8					Here1 = *	; remember here
>c27c	3a					.byte CodeLen	;patch wh_CodeLength
>c2b8	41 63 63 65 70 74		Name0:	.text "Accept"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=49726					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c2be	86					.byte (("Accept"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=68					LinkDisplacement = Nt0-WordListLink
>c2bf	50					.byte WordFlags	;wh_Flags
>c2c0	03					.byte 3	;wh_CodeLength
>c2c1	44					  .byte LinkDisplacement	; offset to previous nt
=$c2c2					XtPtr1 ::= *
=49726					WordListLink ::= Nt0 ; remember the nt of this word for later
.c2c2					Accept:
.c2c2	20 3f b4	jsr $b43f			jsr underflow_2
.c2c5	b5 24		lda $24,x			lda DStack+0,x		; Abort if we were asked to receive 0 chars
.c2c7	15 25		ora $25,x			ora DStack+1,x
.c2c9	d0 09		bne $c2d4			bne _not_zero
.c2cb	e8		inx				inx			; drop n
.c2cc	e8		inx				inx
.c2cd	95 24		sta $24,x			sta DStack+0,x		; replace addr with 0
.c2cf	95 25		sta $25,x			sta DStack+1,x
.c2d1	4c a9 c3	jmp $c3a9			jmp accept_done
.c2d4					_not_zero:
.c2d4	b5 24		lda $24,x			lda DStack+0,x	; number of chars to get in tmp2 ...
.c2d6	85 16		sta $16				sta tmp2
.c2d8	a9 00		lda #$00			lda #0
.c2da	85 17		sta $17				sta tmp2+1	; ... but we only accept max 255 chars
.c2dc	b5 26		lda $26,x			lda DStack+2,x	; address of buffer is NOS, to tmp1
.c2de	85 14		sta $14				sta tmp1
.c2e0	b5 27		lda $27,x			lda DStack+3,x
.c2e2	85 15		sta $15				sta tmp1+1
.c2e4	e8		inx				inx
.c2e5	e8		inx				inx
.c2e6	a0 00		ldy #$00			ldy #0
.c2e8	a5 0c		lda $0c				lda status
.c2ea	29 f7		and #$f7			and #$f7
.c2ec	18		clc				clc
.c2ed	69 01		adc #$01			adc #1
.c2ef	09 08		ora #$08			ora #$08
.c2f1	85 0c		sta $0c				sta status
.c2f3					accept_loop:
.c2f3	20 60 c2	jsr $c260			jsr key_a
.c2f6	c9 0a		cmp #$0a			cmp #AscLF
.c2f8	f0 20		beq $c31a			beq _eol
.c2fa	c9 0d		cmp #$0d			cmp #AscCR
.c2fc	f0 1c		beq $c31a			beq _eol
.c2fe	c9 08		cmp #$08			cmp #AscBS
.c300	f0 24		beq $c326			beq _backspace
.c302	c9 7f		cmp #$7f			cmp #AscDEL	; (CTRL-h)
.c304	f0 20		beq $c326			beq _backspace
.c306	c9 10		cmp #$10			cmp #AscCP
.c308	f0 37		beq $c341			beq _ctrl_p
.c30a	c9 0e		cmp #$0e			cmp #AscCN
.c30c	f0 46		beq $c354			beq _ctrl_n
.c30e	91 14		sta ($14),y			sta (tmp1),y
.c310	c8		iny				iny
.c311	20 d8 cd	jsr $cdd8			jsr Emit_A
.c314	c4 16		cpy $16				cpy tmp2	; reached character limit?
.c316	d0 db		bne $c2f3			bne accept_loop	      ; fall through if buffer limit reached
.c318	f0 03		beq $c31d			beq _buffer_full
.c31a					_eol:
.c31a	20 e4 cd	jsr $cde4			jsr Space	; print final space
.c31d					_buffer_full:
.c31d	94 24		sty $24,x			sty DStack+0,x	; Y contains number of chars accepted already
.c31f	a9 00		lda #$00			lda #0
.c321	95 25		sta $25,x			sta DStack+1,x		; we only accept 256 chars
.c323	4c a9 c3	jmp $c3a9			jmp accept_done
.c326					_backspace:
.c326	c0 00		cpy #$00			cpy #0		; buffer empty?
.c328	d0 06		bne $c330			bne +
.c32a	a9 07		lda #$07			lda #AscBELL	; complain and don't delete beyond the start of line
.c32c	20 d8 cd	jsr $cdd8			jsr Emit_A
.c32f	c8		iny				iny
.c330					+
.c330	88		dey				dey
.c331	a9 08		lda #$08			lda #AscBS	; move back one
.c333	20 d8 cd	jsr $cdd8			jsr Emit_A
.c336	20 e4 cd	jsr $cde4			jsr Space	; print a space (rubout)
.c339	a9 08		lda #$08			lda #AscBS	; move back over space
.c33b	20 d8 cd	jsr $cdd8			jsr Emit_A
.c33e	4c f3 c2	jmp $c2f3			jmp accept_loop
.c341					_ctrl_p:
.c341	a5 0c		lda $0c				lda status
.c343	29 07		and #$07			and #7
.c345	d0 08		bne $c34f			bne _ctrl_p_dec
.c347	a5 0c		lda $0c				lda status
.c349	09 07		ora #$07			ora #7
.c34b	85 0c		sta $0c				sta status
.c34d	d0 14		bne $c363			bne _recall_history
.c34f					_ctrl_p_dec:
.c34f	c6 0c		dec $0c				dec status
.c351	4c 63 c3	jmp $c363			jmp _recall_history
.c354					_ctrl_n:
.c354	a9 08		lda #$08			lda #$8
.c356	24 0c		bit $0c				bit status
.c358	d0 09		bne $c363			bne _recall_history
.c35a	a5 0c		lda $0c				lda status
.c35c	29 f7		and #$f7			and #$f7
.c35e	18		clc				clc
.c35f	69 01		adc #$01			adc #1
.c361	85 0c		sta $0c				sta status
.c363					_recall_history:
.c363	a9 f7		lda #$f7			lda #$ff-%00001000
.c365	25 0c		and $0c				and status
.c367	85 0c		sta $0c				sta status
.c369	20 c4 c3	jsr $c3c4			jsr accept_total_recall
.c36c	a9 0d		lda #$0d			lda #AscCR
.c36e	20 d8 cd	jsr $cdd8			jsr Emit_A
.c371					input_clear:
.c371	c0 00		cpy #$00			cpy #0
.c373	f0 07		beq $c37c			beq input_cleared
.c375	20 e4 cd	jsr $cde4			jsr Space
.c378	88		dey				dey
.c379	4c 71 c3	jmp $c371			jmp input_clear
.c37c					input_cleared:
.c37c	a9 0d		lda #$0d			lda #AscCR
.c37e	20 d8 cd	jsr $cdd8			jsr Emit_A
.c381	b1 18		lda ($18),y			lda (tmp3),y
.c383	85 0d		sta $0d				sta status+1
.c385	e6 18		inc $18				inc tmp3
.c387	d0 02		bne $c38b			bne +		; Increment the upper byte on carry.
.c389	e6 19		inc $19				inc tmp3+1
.c38b					+
.c38b	a9 0d		lda #$0d			lda #AscCR
.c38d	20 d8 cd	jsr $cdd8			jsr Emit_A
.c390					_history_loop:
.c390	c4 0d		cpy $0d				cpy status+1
.c392	d0 03		bne $c397			bne +
.c394	4c f3 c2	jmp $c2f3			jmp accept_loop	      ; Needs a long jump
.c397					+
.c397	c4 16		cpy $16				cpy tmp2
.c399	f0 0a		beq $c3a5			beq _hist_filled_buffer
.c39b	b1 18		lda ($18),y			lda (tmp3),y
.c39d	91 14		sta ($14),y			sta (tmp1),y
.c39f	20 d8 cd	jsr $cdd8			jsr Emit_A
.c3a2	c8		iny				iny
.c3a3	d0 eb		bne $c390			bne _history_loop
.c3a5					_hist_filled_buffer:
.c3a5	88		dey				dey
.c3a6	4c f3 c2	jmp $c2f3			jmp accept_loop
.c3a9					accept_done:
.c3a9	20 c4 c3	jsr $c3c4			jsr accept_total_recall
.c3ac	85 0d		sta $0d				sta status+1
.c3ae	a0 00		ldy #$00			ldy #0
.c3b0	91 18		sta ($18),y			sta (tmp3),y
.c3b2	e6 18		inc $18				inc tmp3
.c3b4	d0 02		bne $c3b8			bne +		; Increment the upper byte on carry.
.c3b6	e6 19		inc $19				inc tmp3+1
.c3b8					+
.c3b8					_save_history_loop:
.c3b8	c4 0d		cpy $0d				cpy status+1
.c3ba	f0 07		beq $c3c3			beq _save_history_done
.c3bc	b1 14		lda ($14),y			lda (tmp1),y
.c3be	91 18		sta ($18),y			sta (tmp3),y
.c3c0	c8		iny				iny
.c3c1	d0 f5		bne $c3b8			bne _save_history_loop
.c3c3					_save_history_done:
=257					CodeLen	.var *-XtPtr1
=$ff					CodeLen	 .var $ff
=$c3c3					Here1 = *	; remember here
>c2c0	ff					.byte CodeLen	;patch wh_CodeLength
.c3c3	60		rts				rts
.c3c4					accept_total_recall:
.c3c4	a9 66		lda #$66			lda #<hist_buff
.c3c6	85 18		sta $18				sta tmp3
.c3c8	a9 07		lda #$07			lda #>hist_buff
.c3ca	85 19		sta $19				sta tmp3+1
.c3cc	a5 0c		lda $0c				lda status
.c3ce	6a		ror a				ror
.c3cf	29 03		and #$03			and #3
.c3d1	18		clc				clc
.c3d2	65 19		adc $19				adc tmp3+1
.c3d4	85 19		sta $19				sta tmp3+1
.c3d6	a5 0c		lda $0c				lda status
.c3d8	6a		ror a				ror		; Rotate through carry into msb.
.c3d9	6a		ror a				ror
.c3da	29 80		and #$80			and #$80
.c3dc	18		clc				clc
.c3dd	65 18		adc $18				adc tmp3
.c3df	85 18		sta $18				sta tmp3
.c3e1	90 02		bcc $c3e5			bcc +		; Increment the upper byte on carry.
.c3e3	e6 19		inc $19				inc tmp3+1
.c3e5					+
.c3e5	98		tya				tya
.c3e6	c9 80		cmp #$80			cmp #$80
.c3e8	90 02		bcc $c3ec			bcc +
.c3ea	a9 7f		lda #$7f			lda #$7F
.c3ec					+
.c3ec	60		rts				rts
>c3ed	49 6e 70 75 74 3e 52		Name0:	.text "Input>R"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=50036					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c3f4	47					.byte (("Input>R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$30					WordFlags ::= NN|ST	; modifiable copy, remember for later
=310					LinkDisplacement = Nt0-WordListLink
=$31						  WordFlags ::= WordFlags | FP
>c3f5	31					.byte WordFlags	;wh_Flags
>c3f6	03					.byte 3	;wh_CodeLength
>c3f7	3e c2					  .word WordListLink
=$c3f9					XtPtr1 ::= *
=50036					WordListLink ::= Nt0 ; remember the nt of this word for later
.c3f9					Input_To_R:
.c3f9	68		pla				pla			; move it out of the way
.c3fa	85 14		sta $14				sta tmp1+0
.c3fc	68		pla				pla
.c3fd	85 15		sta $15				sta tmp1+1
.c3ff	a0 07		ldy #$07			ldy #7
.c401	b9 02 00	lda $0002,y	_loop:		lda InSrc,y	; insrc+7 is toin+1
.c404	48		pha				pha
.c405	88		dey				dey
.c406	10 f9		bpl $c401			bpl _loop
.c408	a5 15		lda $15				lda tmp1+1		; Restore address for return jump
.c40a	48		pha				pha
.c40b	a5 14		lda $14				lda tmp1+0
.c40d	48		pha				pha
=21					CodeLen	.var *-XtPtr1
=$c40e					Here1 = *	; remember here
>c3f6	15					.byte CodeLen	;patch wh_CodeLength
.c40e	60		rts				rts
>c40f	52 3e 49 6e 70 75 74		Name0:	.text "R>Input"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=50070					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c416	87					.byte (("R>Input"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$30					WordFlags ::= ST	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>c417	30					.byte WordFlags	;wh_Flags
>c418	03					.byte 3	;wh_CodeLength
>c419	22					  .byte LinkDisplacement	; offset to previous nt
=$c41a					XtPtr1 ::= *
=50070					WordListLink ::= Nt0 ; remember the nt of this word for later
.c41a					R_To_Input:
.c41a	68		pla				pla		 ; move RTS addr out of the way
.c41b	85 14		sta $14				sta tmp1+0
.c41d	68		pla				pla
.c41e	85 15		sta $15				sta tmp1+1
.c420	a0 00		ldy #$00			ldy #0
.c422	68		pla		_loop:		pla
.c423	99 02 00	sta $0002,y			sta InSrc,y ; also cib ciblen toin
.c426	c8		iny				iny
.c427	c0 08		cpy #$08			cpy #8
.c429	d0 f7		bne $c422			bne _loop
.c42b	a5 15		lda $15				lda tmp1+1	; Restore RTS address
.c42d	48		pha				pha
.c42e	a5 14		lda $14				lda tmp1+0
.c430	48		pha				pha
=23					CodeLen	.var *-XtPtr1
=$c431					Here1 = *	; remember here
>c418	17					.byte CodeLen	;patch wh_CodeLength
.c431	60		rts				rts
>c432	49 4b 65 79			Name0:	.text "IKey"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=50102					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c436	24					.byte (("IKey"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>c437	10					.byte WordFlags	;wh_Flags
>c438	03					.byte 3	;wh_CodeLength
>c439	20					  .byte LinkDisplacement	; offset to previous nt
=$c43a					XtPtr1 ::= *
=50102					WordListLink ::= Nt0 ; remember the nt of this word for later
.c43a					IKey:
.c43a	20 fe b7	jsr $b7fe	_again:		jsr Zero
.c43d	20 fe b7	jsr $b7fe			jsr Zero	; ( ud )
.c440	20 40 ca	jsr $ca40			jsr Here
.c443	20 6e cf	jsr $cf6e			jsr Dup		; get text
.c446	a9 10		lda #$10			lda #16
.c448	20 f0 b7	jsr $b7f0			jsr PushZA
.c44b	20 c2 c2	jsr $c2c2			jsr Accept	; ( ud addr len )
.c44e	a1 26		lda ($26,x)			lda (DStack+2,x) ; negative?
.c450	c9 2d		cmp #$2d			cmp #'-'
.c452	08		php				php		;  save sign
.c453	d0 06		bne $c45b			bne +
.c455	20 7c ca	jsr $ca7c			jsr NOS_One_Plus ;   eat the '-'
.c458	20 4d ca	jsr $ca4d			jsr One_Minus
.c45b					+
.c45b	20 5b b0	jsr $b05b			jsr To_Number ; ( ud addr u -- ud addr u )  Continue convert a string to an integer
.c45e	e8		inx				inx		; Drop len
.c45f	e8		inx				inx
.c460	e8		inx				inx		; Drop addr
.c461	e8		inx				inx
.c462	e8		inx				inx		; UD>S
.c463	e8		inx				inx
.c464	b5 1e		lda $1e,x			lda DStack-6,x	; string all consumed?
.c466	f0 11		beq $c479			beq _ok
.c468	e8		inx		_err:		inx		; Drop u
.c469	e8		inx				inx
.c46a	28		plp				plp		; RDrop saved sign
.c46b	20 e4 cd	jsr $cde4			jsr Space	; prompt again
.c46e	a9 3f		lda #$3f			lda #'?'
.c470	20 d8 cd	jsr $cdd8			jsr Emit_A
.c473	20 e4 cd	jsr $cde4			jsr Space
.c476	4c 3a c4	jmp $c43a			jmp _again	; try it again
.c479	28		plp		_ok:		plp		; apply sign
.c47a	d0 03		bne $c47f			bne +
.c47c	20 c2 c6	jsr $c6c2			jsr Negate
.c47f					+
.c47f	60		rts				rts
=70					CodeLen	.var *-XtPtr1
=$c480					Here1 = *	; remember here
>c438	46					.byte CodeLen	;patch wh_CodeLength
>c480	42 6f 75 6e 64 73		Name0:	.text "Bounds"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=50182					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c486	66					.byte (("Bounds"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>c487	40					.byte WordFlags	;wh_Flags
>c488	03					.byte 3	;wh_CodeLength
>c489	50					  .byte LinkDisplacement	; offset to previous nt
=$c48a					XtPtr1 ::= *
=50182					WordListLink ::= Nt0 ; remember the nt of this word for later
.c48a					Bounds:
.c48a	20 3f b4	jsr $b43f			jsr underflow_2
.c48d	18		clc				clc
.c48e	b5 26		lda $26,x			lda DStack+2,x		; LSB addr
.c490	a8		tay				tay
.c491	75 24		adc $24,x			adc DStack+0,x		; LSB u
.c493	95 26		sta $26,x			sta DStack+2,x		; LSB addr+u
.c495	94 24		sty $24,x			sty DStack+0,x
.c497	b5 27		lda $27,x			lda DStack+3,x		; MSB addr
.c499	a8		tay				tay
.c49a	75 25		adc $25,x			adc DStack+1,x		; MSB u
.c49c	95 27		sta $27,x			sta DStack+3,x		; MSB addr+u
.c49e	94 25		sty $25,x			sty DStack+1,x
=22					CodeLen	.var *-XtPtr1
=$c4a0					Here1 = *	; remember here
>c488	16					.byte CodeLen	;patch wh_CodeLength
.c4a0	60		rts				rts
>c4a1	53 70 61 63 65 73		Name0:	.text "Spaces"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=50215					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c4a7	66					.byte (("Spaces"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c4a8	50					.byte WordFlags	;wh_Flags
>c4a9	03					.byte 3	;wh_CodeLength
>c4aa	21					  .byte LinkDisplacement	; offset to previous nt
=$c4ab					XtPtr1 ::= *
=50215					WordListLink ::= Nt0 ; remember the nt of this word for later
.c4ab					 Spaces:
.c4ab	20 2b b4	jsr $b42b			jsr underflow_1
.c4ae	4c b4 c4	jmp $c4b4			jmp _test
.c4b1					_loop:
.c4b1	20 e4 cd	jsr $cde4			jsr Space		; print a space
.c4b4	d6 24		dec $24,x	_test:		dec DStack+0,x		; decrement & test
.c4b6	10 f9		bpl $c4b1			bpl _loop
.c4b8	e8		inx				inx			; Drop
.c4b9	e8		inx				inx
=15					CodeLen	.var *-XtPtr1
=$c4ba					Here1 = *	; remember here
>c4a9	0f					.byte CodeLen	;patch wh_CodeLength
.c4ba	60		rts				rts
>c4bb	2d 54 72 61 69 6c 69 6e		Name0:	.text "-Trailing"	;  name of word as a string, ending at wh_NameLastChar
>c4c3	67
=9					NameLength = *-Name0
=50244					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c4c4	e9					.byte (("-Trailing"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>c4c5	50					.byte WordFlags	;wh_Flags
>c4c6	03					.byte 3	;wh_CodeLength
>c4c7	1d					  .byte LinkDisplacement	; offset to previous nt
=$c4c8					XtPtr1 ::= *
=50244					WordListLink ::= Nt0 ; remember the nt of this word for later
.c4c8					Minus_trailing:
.c4c8	20 3f b4	jsr $b43f			jsr underflow_2
.c4cb	b5 26		lda $26,x			lda DStack+2,x		; tmp1= addr + (u1 & $ff00)
.c4cd	85 14		sta $14				sta tmp1+0
.c4cf	b5 27		lda $27,x			lda DStack+3,x
.c4d1	18		clc				clc
.c4d2	75 25		adc $25,x			adc DStack+1,x
.c4d4	85 15		sta $15				sta tmp1+1
.c4d6	b4 24		ldy $24,x			ldy DStack+0,x
.c4d8	88		dey		_loop:		dey			; back 1 char
.c4d9	c0 ff		cpy #$ff			cpy #$ff
.c4db	d0 06		bne $c4e3			bne +
.c4dd	c6 15		dec $15				dec tmp1+1		;   back 1 page
.c4df	d6 25		dec $25,x			dec DStack+1,x
.c4e1	30 06		bmi $c4e9			bmi _done
.c4e3					+
.c4e3	b1 14		lda ($14),y			lda (tmp1),y		; if blank, keep going
.c4e5	c9 20		cmp #$20			cmp #AscSP
.c4e7	f0 ef		beq $c4d8			beq _loop
.c4e9	c8		iny		_done:		iny			; forward 1 char
.c4ea	d0 02		bne $c4ee			bne +
.c4ec	f6 25		inc $25,x			inc DStack+1,x
.c4ee	94 24		sty $24,x	+		sty DStack+0,x
=40					CodeLen	.var *-XtPtr1
=$c4f0					Here1 = *	; remember here
>c4c6	28					.byte CodeLen	;patch wh_CodeLength
.c4f0	60		rts				rts
>c4f1	2d 4c 65 61 64 69 6e 67		Name0:	.text "-Leading"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=50297					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c4f9	e8					.byte (("-Leading"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>c4fa	50					.byte WordFlags	;wh_Flags
>c4fb	03					.byte 3	;wh_CodeLength
>c4fc	35					  .byte LinkDisplacement	; offset to previous nt
=$c4fd					XtPtr1 ::= *
=50297					WordListLink ::= Nt0 ; remember the nt of this word for later
.c4fd					Minus_leading:
.c4fd	20 3f b4	jsr $b43f			jsr underflow_2
.c500					_loop:
.c500	b5 24		lda $24,x			lda DStack+0,x		; chars left?
.c502	15 25		ora $25,x			ora DStack+1,x
.c504	f0 0f		beq $c515			beq _done
.c506	a1 26		lda ($26,x)			lda (DStack+2,x)	; get first character
.c508	c9 21		cmp #$21			cmp #AscSP+1		;   is_whitespace
.c50a	b0 09		bcs $c515			bcs _done
.c50c	20 7c ca	jsr $ca7c			jsr NOS_One_Plus
.c50f	20 50 ca	jsr $ca50			jsr One_Minus_NoUF
.c512	4c 00 c5	jmp $c500			jmp _loop
.c515					_done:
=24					CodeLen	.var *-XtPtr1
=$c515					Here1 = *	; remember here
>c4fb	18					.byte CodeLen	;patch wh_CodeLength
.c515	60		rts				rts
>c516	2f 53 74 72 69 6e 67		Name0:	.text "/String"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=50333					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c51d	e7					.byte (("/String"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>c51e	50					.byte WordFlags	;wh_Flags
>c51f	03					.byte 3	;wh_CodeLength
>c520	24					  .byte LinkDisplacement	; offset to previous nt
=$c521					XtPtr1 ::= *
=50333					WordListLink ::= Nt0 ; remember the nt of this word for later
.c521					Slash_String:
.c521	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.c523	b0 1d		bcs $c542		bcs Throw_Stack_20
.c525	18		clc				clc		; addr += n
.c526	b5 24		lda $24,x			lda DStack+0,x
.c528	75 28		adc $28,x			adc DStack+4,x
.c52a	95 28		sta $28,x			sta DStack+4,x
.c52c	b5 25		lda $25,x			lda DStack+1,x
.c52e	75 29		adc $29,x			adc DStack+5,x
.c530	95 29		sta $29,x			sta DStack+5,x
.c532	38		sec				sec		; u -= n
.c533	b5 26		lda $26,x			lda DStack+2,x
.c535	f5 24		sbc $24,x			sbc DStack+0,x
.c537	95 26		sta $26,x			sta DStack+2,x
.c539	b5 27		lda $27,x			lda DStack+3,x
.c53b	f5 25		sbc $25,x			sbc DStack+1,x
.c53d	95 27		sta $27,x			sta DStack+3,x
.c53f	e8		inx				inx		; Drop n
.c540	e8		inx				inx
=32					CodeLen	.var *-XtPtr1
=$c541					Here1 = *	; remember here
>c51f	20					.byte CodeLen	;patch wh_CodeLength
.c541	60		rts				rts
.c542	4c 4e b4	jmp $b44e	Throw_Stack_20: jmp Throw_Stack
>c545	32 44 72 6f 70			Name0:	.text "2Drop"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=50378					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c54a	05					.byte (("2Drop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>c54b	40					.byte WordFlags	;wh_Flags
>c54c	03					.byte 3	;wh_CodeLength
>c54d	2d					  .byte LinkDisplacement	; offset to previous nt
=$c54e					XtPtr1 ::= *
=50378					WordListLink ::= Nt0 ; remember the nt of this word for later
.c54e					Two_drop:
.c54e	20 3f b4	jsr $b43f			jsr underflow_2
.c551	e8		inx				inx
.c552	e8		inx				inx
.c553	e8		inx				inx
.c554	e8		inx				inx
=7					CodeLen	.var *-XtPtr1
=$c555					Here1 = *	; remember here
>c54c	07					.byte CodeLen	;patch wh_CodeLength
.c555	60		rts				rts
>c556	32 53 77 61 70			Name0:	.text "2Swap"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=50395					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c55b	05					.byte (("2Swap"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>c55c	10					.byte WordFlags	;wh_Flags
>c55d	03					.byte 3	;wh_CodeLength
>c55e	11					  .byte LinkDisplacement	; offset to previous nt
=$c55f					XtPtr1 ::= *
=50395					WordListLink ::= Nt0 ; remember the nt of this word for later
.c55f					Two_Swap:
.c55f	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c561	b0 df		bcs $c542		bcs Throw_Stack_20
.c563	86 14		stx $14				stx tmp1
.c565	ca		dex				dex
.c566	ca		dex				dex
.c567	ca		dex				dex
.c568	ca		dex				dex
.c569	e8		inx		_loop:		inx
.c56a	b5 27		lda $27,x			lda DStack+3,x	; 3 <-> 7
.c56c	b4 2b		ldy $2b,x			ldy DStack+7,x
.c56e	95 2b		sta $2b,x			sta DStack+7,x
.c570	94 27		sty $27,x			sty DStack+3,x
.c572	e4 14		cpx $14				cpx tmp1
.c574	90 f3		bcc $c569			bcc _loop
=23					CodeLen	.var *-XtPtr1
=$c576					Here1 = *	; remember here
>c55d	17					.byte CodeLen	;patch wh_CodeLength
.c576	60		rts				rts
>c577	32 4f 76 65 72			Name0:	.text "2Over"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=50428					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c57c	45					.byte (("2Over"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c57d	50					.byte WordFlags	;wh_Flags
>c57e	03					.byte 3	;wh_CodeLength
>c57f	21					  .byte LinkDisplacement	; offset to previous nt
=$c580					XtPtr1 ::= *
=50428					WordListLink ::= Nt0 ; remember the nt of this word for later
.c580					Two_over:
.c580	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c582	b0 be		bcs $c542		bcs Throw_Stack_20
.c584	a0 04		ldy #$04			ldy #4
.c586	ca		dex		_loop:		dex
.c587	b5 2c		lda $2c,x			lda DStack+8,x
.c589	95 24		sta $24,x			sta DStack+0,x
.c58b	88		dey				dey
.c58c	d0 f8		bne $c586			bne _loop
=14					CodeLen	.var *-XtPtr1
=$c58e					Here1 = *	; remember here
>c57e	0e					.byte CodeLen	;patch wh_CodeLength
.c58e	60		rts				rts
>c58f	32 21				Name0:	.text "2!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50449					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c591	22					.byte (("2!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>c592	40					.byte WordFlags	;wh_Flags
>c593	03					.byte 3	;wh_CodeLength
>c594	15					  .byte LinkDisplacement	; offset to previous nt
=$c595					XtPtr1 ::= *
=50449					WordListLink ::= Nt0 ; remember the nt of this word for later
.c595					Two_Store:
.c595	20 44 b4	jsr $b444			jsr underflow_3
.c598	20 02 b4	jsr $b402			jsr PopYA
.c59b	85 14		sta $14		Two_Store_YA:	sta tmp1+0	; save addr
.c59d	84 15		sty $15				sty tmp1+1
.c59f	b5 24		lda $24,x			lda DStack+0,x	; copy MSB
.c5a1	a0 00		ldy #$00			ldy #0
.c5a3	91 14		sta ($14),y			sta (tmp1),y
.c5a5	b5 25		lda $25,x			lda DStack+1,x	; copy next
.c5a7	c8		iny				iny
.c5a8	91 14		sta ($14),y			sta (tmp1),y
.c5aa	b5 26		lda $26,x			lda DStack+2,x	; copy next
.c5ac	c8		iny				iny
.c5ad	91 14		sta ($14),y			sta (tmp1),y
.c5af	b5 27		lda $27,x			lda DStack+3,x	; copy MSB
.c5b1	c8		iny				iny
.c5b2	91 14		sta ($14),y			sta (tmp1),y
.c5b4	e8		inx				inx		; 2Drop
.c5b5	e8		inx				inx
.c5b6	e8		inx				inx
.c5b7	e8		inx				inx
=35					CodeLen	.var *-XtPtr1
=$c5b8					Here1 = *	; remember here
>c593	23					.byte CodeLen	;patch wh_CodeLength
.c5b8	60		rts				rts
>c5b9	32 40				Name0:	.text "2@"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50491					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c5bb	02					.byte (("2@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>c5bc	00					.byte WordFlags	;wh_Flags
>c5bd	03					.byte 3	;wh_CodeLength
>c5be	2a					  .byte LinkDisplacement	; offset to previous nt
=$c5bf					XtPtr1 ::= *
=50491					WordListLink ::= Nt0 ; remember the nt of this word for later
.c5bf	20 02 b4	jsr $b402	Two_fetch:	jsr PopYA
.c5c2	85 14		sta $14		Two_Fetch_YA:	sta tmp1+0	; save addr
.c5c4	84 15		sty $15				sty tmp1+1
.c5c6	a0 00		ldy #$00			ldy #0
.c5c8					Two_Fetch_Tmp1Y:
.c5c8	ca		dex				dex
.c5c9	ca		dex				dex
.c5ca	ca		dex				dex
.c5cb	ca		dex				dex
.c5cc	b1 14		lda ($14),y			lda (tmp1),y	; copy LSB
.c5ce	95 24		sta $24,x			sta DStack+0,x
.c5d0	c8		iny				iny		; copy next
.c5d1	b1 14		lda ($14),y			lda (tmp1),y
.c5d3	95 25		sta $25,x			sta DStack+1,x
.c5d5	c8		iny				iny		; copy next
.c5d6	b1 14		lda ($14),y			lda (tmp1),y
.c5d8	95 26		sta $26,x			sta DStack+2,x
.c5da	c8		iny				iny		; copy next
.c5db	b1 14		lda ($14),y			lda (tmp1),y
.c5dd	95 27		sta $27,x			sta DStack+3,x
=32					CodeLen	.var *-XtPtr1
=$c5df					Here1 = *	; remember here
>c5bd	20					.byte CodeLen	;patch wh_CodeLength
.c5df	60		rts				rts
>c5e0	44 40				Name0:	.text "D@"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50530					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c5e2	02					.byte (("D@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c5e3	10					.byte WordFlags	;wh_Flags
>c5e4	03					.byte 3	;wh_CodeLength
>c5e5	27					  .byte LinkDisplacement	; offset to previous nt
=$c5e6					XtPtr1 ::= *
=50530					WordListLink ::= Nt0 ; remember the nt of this word for later
.c5e6	20 02 b4	jsr $b402	DFetch:		jsr PopYA
.c5e9	85 14		sta $14		DFetchYA:	sta tmp1+0	; save addr
.c5eb	84 15		sty $15				sty tmp1+1
.c5ed	ca		dex				dex
.c5ee	ca		dex				dex
.c5ef	ca		dex				dex
.c5f0	ca		dex				dex
.c5f1	a0 00		ldy #$00			ldy #0
.c5f3	b1 14		lda ($14),y			lda (tmp1),y
.c5f5	95 26		sta $26,x			sta DStack+2,x
.c5f7	c8		iny				iny
.c5f8	b1 14		lda ($14),y			lda (tmp1),y
.c5fa	95 27		sta $27,x			sta DStack+3,x
.c5fc	c8		iny				iny
.c5fd	b1 14		lda ($14),y			lda (tmp1),y
.c5ff	95 24		sta $24,x			sta DStack+0,x
.c601	c8		iny				iny
.c602	b1 14		lda ($14),y			lda (tmp1),y
.c604	95 25		sta $25,x			sta DStack+1,x
=32					CodeLen	.var *-XtPtr1
=$c606					Here1 = *	; remember here
>c5e4	20					.byte CodeLen	;patch wh_CodeLength
.c606	60		rts				rts
>c607	44 21				Name0:	.text "D!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50569					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c609	22					.byte (("D!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c60a	10					.byte WordFlags	;wh_Flags
>c60b	03					.byte 3	;wh_CodeLength
>c60c	27					  .byte LinkDisplacement	; offset to previous nt
=$c60d					XtPtr1 ::= *
=50569					WordListLink ::= Nt0 ; remember the nt of this word for later
.c60d	20 02 b4	jsr $b402	DStore:		jsr PopYA
.c610	85 14		sta $14		DStoreYA:	sta tmp1+0	; save addr
.c612	84 15		sty $15				sty tmp1+1
.c614	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c616	a0 00		ldy #$00			ldy #0
.c618	91 14		sta ($14),y			sta (tmp1),y
.c61a	b5 27		lda $27,x			lda DStack+3,x
.c61c	c8		iny				iny
.c61d	91 14		sta ($14),y			sta (tmp1),y
.c61f	b5 24		lda $24,x			lda DStack+0,x
.c621	c8		iny				iny
.c622	91 14		sta ($14),y			sta (tmp1),y
.c624	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c626	c8		iny				iny
.c627	91 14		sta ($14),y			sta (tmp1),y
.c629	4c 4e c5	jmp $c54e			jmp Two_Drop	; also check underflow, return
=31					CodeLen	.var *-XtPtr1
=$c62c					Here1 = *	; remember here
>c60b	1f					.byte CodeLen	;patch wh_CodeLength
>c62c	32 52 40			Name0:	.text "2R@"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50607					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c62f	03					.byte (("2R@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=20					WordFlags ::= CO+NN	; modifiable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>c630	14					.byte WordFlags	;wh_Flags
>c631	03					.byte 3	;wh_CodeLength
>c632	26					  .byte LinkDisplacement	; offset to previous nt
=$c633					XtPtr1 ::= *
=50607					WordListLink ::= Nt0 ; remember the nt of this word for later
.c633					Two_r_fetch:
.c633	8a		txa				txa		; Y= return stack index
.c634	ba		tsx				tsx
.c635	86 14		stx $14				stx tmp1
.c637	a4 14		ldy $14				ldy tmp1
.c639	aa		tax				tax
.c63a	ca		dex				dex		; make room on the Data Stack
.c63b	ca		dex				dex
.c63c	ca		dex				dex
.c63d	ca		dex				dex
.c63e	b9 03 01	lda $0103,y			lda RStack+3,y	; LSB of top entry
.c641	95 24		sta $24,x			sta DStack+0,x
.c643	b9 04 01	lda $0104,y			lda RStack+4,y	; MSB of top entry
.c646	95 25		sta $25,x			sta DStack+1,x
.c648	b9 05 01	lda $0105,y			lda RStack+5,y	; LSB of bottom entry
.c64b	95 26		sta $26,x			sta DStack+2,x
.c64d	b9 06 01	lda $0106,y			lda RStack+6,y	; MSB of bottom entry
.c650	95 27		sta $27,x			sta DStack+3,x
=31					CodeLen	.var *-XtPtr1
=$c652					Here1 = *	; remember here
>c631	1f					.byte CodeLen	;patch wh_CodeLength
.c652	60		rts				rts
>c653	32 52 3e			Name0:	.text "2R>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50646					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c656	c3					.byte (("2R>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=52					WordFlags ::= CO+ST	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c657	34					.byte WordFlags	;wh_Flags
>c658	03					.byte 3	;wh_CodeLength
>c659	27					  .byte LinkDisplacement	; offset to previous nt
=$c65a					XtPtr1 ::= *
=50646					WordListLink ::= Nt0 ; remember the nt of this word for later
.c65a					Two_r_from:
.c65a	68		pla				pla			; save the return address
.c65b	85 14		sta $14				sta tmp1+0
.c65d	68		pla				pla
.c65e	85 15		sta $15				sta tmp1+1
.c660	ca		dex				dex			; make room on stack
.c661	ca		dex				dex
.c662	ca		dex				dex
.c663	ca		dex				dex
.c664	68		pla				pla			; LSB
.c665	95 24		sta $24,x			sta DStack+0,x
.c667	68		pla				pla			; MSB
.c668	95 25		sta $25,x			sta DStack+1,x
.c66a	68		pla				pla			; LSB
.c66b	95 26		sta $26,x			sta DStack+2,x
.c66d	68		pla				pla			; MSB
.c66e	95 27		sta $27,x			sta DStack+3,x
.c670	a5 15		lda $15				lda tmp1+1		; restore return address
.c672	48		pha				pha
.c673	a5 14		lda $14				lda tmp1+0
.c675	48		pha				pha
=28					CodeLen	.var *-XtPtr1
=$c676					Here1 = *	; remember here
>c658	1c					.byte CodeLen	;patch wh_CodeLength
.c676	60		rts				rts
>c677	32 3e 52			Name0:	.text "2>R"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50682					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c67a	43					.byte (("2>R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=116					WordFlags ::= CO+UF+ST	; modifiable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>c67b	74					.byte WordFlags	;wh_Flags
>c67c	03					.byte 3	;wh_CodeLength
>c67d	24					  .byte LinkDisplacement	; offset to previous nt
=$c67e					XtPtr1 ::= *
=50682					WordListLink ::= Nt0 ; remember the nt of this word for later
.c67e					Two_to_r:
.c67e	68		pla				pla		; save the return address
.c67f	85 14		sta $14				sta tmp1+0
.c681	68		pla				pla
.c682	85 15		sta $15				sta tmp1+1
.c684	20 3f b4	jsr $b43f			jsr underflow_2
.c687	b5 27		lda $27,x			lda DStack+3,x	; MSB
.c689	48		pha				pha
.c68a	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c68c	48		pha				pha
.c68d	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c68f	48		pha				pha
.c690	b5 24		lda $24,x			lda DStack+0,x	; LSB
.c692	48		pha				pha
.c693	e8		inx				inx
.c694	e8		inx				inx
.c695	e8		inx				inx
.c696	e8		inx				inx
.c697	a5 15		lda $15				lda tmp1+1	; restore return address
.c699	48		pha				pha
.c69a	a5 14		lda $14				lda tmp1+0
.c69c	48		pha				pha
=31					CodeLen	.var *-XtPtr1
=$c69d					Here1 = *	; remember here
>c67c	1f					.byte CodeLen	;patch wh_CodeLength
.c69d	60		rts				rts
>c69e	49 6e 76 65 72 74		Name0:	.text "Invert"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=50724					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6a4	86					.byte (("Invert"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>c6a5	40					.byte WordFlags	;wh_Flags
>c6a6	03					.byte 3	;wh_CodeLength
>c6a7	2a					  .byte LinkDisplacement	; offset to previous nt
=$c6a8					XtPtr1 ::= *
=50724					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6a8					Invert:
.c6a8	20 2b b4	jsr $b42b			jsr underflow_1
.c6ab	a9 ff		lda #$ff			lda #$FF
.c6ad	55 24		eor $24,x			eor DStack+0,x	; LSB
.c6af	95 24		sta $24,x			sta DStack+0,x
.c6b1	a9 ff		lda #$ff			lda #$FF
.c6b3	55 25		eor $25,x			eor DStack+1,x	; MSB
.c6b5	95 25		sta $25,x			sta DStack+1,x
=15					CodeLen	.var *-XtPtr1
=$c6b7					Here1 = *	; remember here
>c6a6	0f					.byte CodeLen	;patch wh_CodeLength
.c6b7	60		rts				rts
>c6b8	4e 65 67 61 74 65		Name0:	.text "Negate"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=50750					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6be	a6					.byte (("Negate"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>c6bf	40					.byte WordFlags	;wh_Flags
>c6c0	03					.byte 3	;wh_CodeLength
>c6c1	1a					  .byte LinkDisplacement	; offset to previous nt
=$c6c2					XtPtr1 ::= *
=50750					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6c2					Negate:
.c6c2	20 2b b4	jsr $b42b			jsr underflow_1
.c6c5	38		sec		Negate3:	sec
.c6c6	a9 00		lda #$00	Negate4:	lda #0
.c6c8	f5 24		sbc $24,x			sbc DStack+0,x	; LSB
.c6ca	95 24		sta $24,x			sta DStack+0,x
.c6cc	a9 00		lda #$00			lda #0
.c6ce	f5 25		sbc $25,x			sbc DStack+1,x	; MSB
.c6d0	95 25		sta $25,x			sta DStack+1,x
=16					CodeLen	.var *-XtPtr1
=$c6d2					Here1 = *	; remember here
>c6c0	10					.byte CodeLen	;patch wh_CodeLength
.c6d2	60		rts				rts
>c6d3	41 62 73			Name0:	.text "Abs"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50774					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6d6	63					.byte (("Abs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>c6d7	10					.byte WordFlags	;wh_Flags
>c6d8	03					.byte 3	;wh_CodeLength
>c6d9	18					  .byte LinkDisplacement	; offset to previous nt
=$c6da					XtPtr1 ::= *
=50774					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6da					Abs:
.c6da	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c6dc	b0 05		bcs $c6e3		bcs Throw_Stack_17
.c6de	b5 25		lda $25,x			lda DStack+1,x	; n negative?
.c6e0	30 e3		bmi $c6c5			bmi Negate3
=8					CodeLen	.var *-XtPtr1
=$c6e2					Here1 = *	; remember here
>c6d8	08					.byte CodeLen	;patch wh_CodeLength
.c6e2	60		rts				rts
.c6e3	4c 4e b4	jmp $b44e	Throw_Stack_17: jmp Throw_Stack
>c6e6	44 4e 65 67 61 74 65		Name0:	.text "DNegate"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=50797					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6ed	a7					.byte (("DNegate"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c6ee	10					.byte WordFlags	;wh_Flags
>c6ef	03					.byte 3	;wh_CodeLength
>c6f0	17					  .byte LinkDisplacement	; offset to previous nt
=$c6f1					XtPtr1 ::= *
=50797					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6f1					DNegate:
.c6f1	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c6f3	b0 ee		bcs $c6e3		bcs Throw_Stack_17
.c6f5	38		sec		DNegate3:	sec
.c6f6	a9 00		lda #$00			lda #0
.c6f8	f5 26		sbc $26,x			sbc DStack+2,x	; LSB of low cell
.c6fa	95 26		sta $26,x			sta DStack+2,x
.c6fc	a9 00		lda #$00			lda #0
.c6fe	f5 27		sbc $27,x			sbc DStack+3,x	; MSB of low cell
.c700	95 27		sta $27,x			sta DStack+3,x
.c702	4c c6 c6	jmp $c6c6			jmp Negate4
=20					CodeLen	.var *-XtPtr1
=$c705					Here1 = *	; remember here
>c6ef	14					.byte CodeLen	;patch wh_CodeLength
>c705	44 41 62 73			Name0:	.text "DAbs"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=50825					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c709	64					.byte (("DAbs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>c70a	10					.byte WordFlags	;wh_Flags
>c70b	03					.byte 3	;wh_CodeLength
>c70c	1c					  .byte LinkDisplacement	; offset to previous nt
=$c70d					XtPtr1 ::= *
=50825					WordListLink ::= Nt0 ; remember the nt of this word for later
.c70d					DAbs:
.c70d	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c70f	b0 d2		bcs $c6e3		bcs Throw_Stack_17
.c711	b5 25		lda $25,x			lda DStack+1,x	; d negative?
.c713	30 e0		bmi $c6f5			bmi DNegate3
=8					CodeLen	.var *-XtPtr1
=$c715					Here1 = *	; remember here
>c70b	08					.byte CodeLen	;patch wh_CodeLength
.c715	60		rts				rts
>c716	44 3c 3e			Name0:	.text "D<>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50841					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c719	c3					.byte (("D<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>c71a	10					.byte WordFlags	;wh_Flags
>c71b	03					.byte 3	;wh_CodeLength
>c71c	10					  .byte LinkDisplacement	; offset to previous nt
=$c71d					XtPtr1 ::= *
=50841					WordListLink ::= Nt0 ; remember the nt of this word for later
.c71d	20 29 c7	jsr $c729	DNEq:		jsr DEqual
.c720	4c 17 c9	jmp $c917			jmp ZEqA
=6					CodeLen	.var *-XtPtr1
=$c723					Here1 = *	; remember here
>c71b	06					.byte CodeLen	;patch wh_CodeLength
>c723	44 3d				Name0:	.text "D="	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50853					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c725	a2					.byte (("D="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c726	10					.byte WordFlags	;wh_Flags
>c727	03					.byte 3	;wh_CodeLength
>c728	0c					  .byte LinkDisplacement	; offset to previous nt
=$c729					XtPtr1 ::= *
=50853					WordListLink ::= Nt0 ; remember the nt of this word for later
.c729	b5 2a		lda $2a,x	DEqual:		lda DStack+6,x
.c72b	d5 26		cmp $26,x			cmp DStack+2,x
.c72d	d0 4c		bne $c77b			bne False3
.c72f	b5 2b		lda $2b,x			lda DStack+7,x
.c731	d5 27		cmp $27,x			cmp DStack+3,x
.c733	d0 46		bne $c77b			bne False3
.c735	b5 24		lda $24,x			lda DStack+0,x
.c737	d5 28		cmp $28,x			cmp DStack+4,x
.c739	d0 40		bne $c77b			bne False3
.c73b	b5 25		lda $25,x			lda DStack+1,x
.c73d	d5 29		cmp $29,x			cmp DStack+5,x
.c73f	d0 3a		bne $c77b			bne False3
.c741	f0 5c		beq $c79f			beq True3
=26					CodeLen	.var *-XtPtr1
=$c743					Here1 = *	; remember here
>c727	1a					.byte CodeLen	;patch wh_CodeLength
>c743	44 55 3e			Name0:	.text "DU>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50886					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c746	c3					.byte (("DU>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c747	10					.byte WordFlags	;wh_Flags
>c748	03					.byte 3	;wh_CodeLength
>c749	21					  .byte LinkDisplacement	; offset to previous nt
=$c74a					XtPtr1 ::= *
=50886					WordListLink ::= Nt0 ; remember the nt of this word for later
.c74a	20 e0 c7	jsr $c7e0	DUGt:		jsr DGtSub
.c74d	90 50		bcc $c79f			bcc True3
.c74f	b0 2a		bcs $c77b			bcs False3
=7					CodeLen	.var *-XtPtr1
=$c751					Here1 = *	; remember here
>c748	07					.byte CodeLen	;patch wh_CodeLength
>c751	44 55 3c 3d			Name0:	.text "DU<="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=50901					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c755	a4					.byte (("DU<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c756	10					.byte WordFlags	;wh_Flags
>c757	03					.byte 3	;wh_CodeLength
>c758	0f					  .byte LinkDisplacement	; offset to previous nt
=$c759					XtPtr1 ::= *
=50901					WordListLink ::= Nt0 ; remember the nt of this word for later
.c759	20 e0 c7	jsr $c7e0	DULe:		jsr DGtSub
.c75c	b0 41		bcs $c79f			bcs True3
.c75e	90 1b		bcc $c77b			bcc False3
=7					CodeLen	.var *-XtPtr1
=$c760					Here1 = *	; remember here
>c757	07					.byte CodeLen	;patch wh_CodeLength
>c760	44 55 3e 3d			Name0:	.text "DU>="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=50916					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c764	a4					.byte (("DU>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c765	10					.byte WordFlags	;wh_Flags
>c766	03					.byte 3	;wh_CodeLength
>c767	0f					  .byte LinkDisplacement	; offset to previous nt
=$c768					XtPtr1 ::= *
=50916					WordListLink ::= Nt0 ; remember the nt of this word for later
.c768	20 b0 c7	jsr $c7b0	DUGe:		jsr DLessSub
.c76b	b0 32		bcs $c79f			bcs True3
.c76d	90 0c		bcc $c77b			bcc False3
=7					CodeLen	.var *-XtPtr1
=$c76f					Here1 = *	; remember here
>c766	07					.byte CodeLen	;patch wh_CodeLength
>c76f	44 55 3c			Name0:	.text "DU<"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50930					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c772	83					.byte (("DU<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c773	10					.byte WordFlags	;wh_Flags
>c774	03					.byte 3	;wh_CodeLength
>c775	0e					  .byte LinkDisplacement	; offset to previous nt
=$c776					XtPtr1 ::= *
=50930					WordListLink ::= Nt0 ; remember the nt of this word for later
.c776	20 b0 c7	jsr $c7b0	DULess:		jsr DLessSub
.c779	90 24		bcc $c79f			bcc True3
.c77b	a9 00		lda #$00	False3:		lda #0
.c77d	f0 22		beq $c7a1			beq DReturn3
=9					CodeLen	.var *-XtPtr1
=$c77f					Here1 = *	; remember here
>c774	09					.byte CodeLen	;patch wh_CodeLength
.c77f	4c 4e b4	jmp $b44e	Throw_Stack_09: jmp Throw_Stack
>c782	44 3e 3d			Name0:	.text "D>="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50949					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c785	a3					.byte (("D>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>c786	10					.byte WordFlags	;wh_Flags
>c787	03					.byte 3	;wh_CodeLength
>c788	13					  .byte LinkDisplacement	; offset to previous nt
=$c789					XtPtr1 ::= *
=50949					WordListLink ::= Nt0 ; remember the nt of this word for later
.c789	20 b0 c7	jsr $c7b0	DGEq:		jsr DLessSub
.c78c	70 0f		bvs $c79d			bvs DLess3
.c78e	10 0f		bpl $c79f	DGEq3:		bpl True3
.c790	30 e9		bmi $c77b			bmi False3
=9					CodeLen	.var *-XtPtr1
=$c792					Here1 = *	; remember here
>c787	09					.byte CodeLen	;patch wh_CodeLength
>c792	44 3c				Name0:	.text "D<"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50964					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c794	82					.byte (("D<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c795	10					.byte WordFlags	;wh_Flags
>c796	03					.byte 3	;wh_CodeLength
>c797	0f					  .byte LinkDisplacement	; offset to previous nt
=$c798					XtPtr1 ::= *
=50964					WordListLink ::= Nt0 ; remember the nt of this word for later
.c798	20 b0 c7	jsr $c7b0	DLess:		jsr DLessSub
.c79b	70 f1		bvs $c78e			bvs DGEq3
.c79d	10 dc		bpl $c77b	DLess3:		bpl False3
.c79f	a9 ff		lda #$ff	True3:		lda #$ff
.c7a1					DReturn3:
.c7a1	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c7a3	b0 da		bcs $c77f		bcs Throw_Stack_09
.c7a5	95 2a		sta $2a,x			sta DStack+6,x
.c7a7	95 2b		sta $2b,x			sta DStack+7,x
.c7a9	e8		inx				inx			; preserve A, don't use ThreeDrop
.c7aa	e8		inx				inx
.c7ab	e8		inx				inx
.c7ac	e8		inx				inx
.c7ad	e8		inx				inx
.c7ae	e8		inx				inx
.c7af	60		rts				rts
=24					CodeLen	.var *-XtPtr1
=$c7b0					Here1 = *	; remember here
>c796	18					.byte CodeLen	;patch wh_CodeLength
.c7b0	b5 2a		lda $2a,x	DLessSub:	lda DStack+6,x
.c7b2	d5 26		cmp $26,x			cmp DStack+2,x
.c7b4	b5 2b		lda $2b,x			lda DStack+7,x
.c7b6	f5 27		sbc $27,x			sbc DStack+3,x
.c7b8	b5 28		lda $28,x			lda DStack+4,x
.c7ba	f5 24		sbc $24,x			sbc DStack+0,x
.c7bc	b5 29		lda $29,x			lda DStack+5,x
.c7be	f5 25		sbc $25,x			sbc DStack+1,x
.c7c0	60		rts				rts
>c7c1	44 3c 3d			Name0:	.text "D<="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51012					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7c4	a3					.byte (("D<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=48					LinkDisplacement = Nt0-WordListLink
>c7c5	10					.byte WordFlags	;wh_Flags
>c7c6	03					.byte 3	;wh_CodeLength
>c7c7	30					  .byte LinkDisplacement	; offset to previous nt
=$c7c8					XtPtr1 ::= *
=51012					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7c8	20 e0 c7	jsr $c7e0	DLe:		jsr DGtSub
.c7cb	70 0f		bvs $c7dc			bvs DGt3
.c7cd	10 d0		bpl $c79f	DLe3:		bpl True3
.c7cf	30 aa		bmi $c77b			bmi False3
=9					CodeLen	.var *-XtPtr1
=$c7d1					Here1 = *	; remember here
>c7c6	09					.byte CodeLen	;patch wh_CodeLength
>c7d1	44 3e				Name0:	.text "D>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51027					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7d3	c2					.byte (("D>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c7d4	10					.byte WordFlags	;wh_Flags
>c7d5	03					.byte 3	;wh_CodeLength
>c7d6	0f					  .byte LinkDisplacement	; offset to previous nt
=$c7d7					XtPtr1 ::= *
=51027					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7d7	20 e0 c7	jsr $c7e0	DGt:		jsr DGtSub
.c7da	70 f1		bvs $c7cd			bvs DLe3
.c7dc	30 c1		bmi $c79f	DGt3:		bmi True3
.c7de	10 9b		bpl $c77b			bpl False3
=9					CodeLen	.var *-XtPtr1
=$c7e0					Here1 = *	; remember here
>c7d5	09					.byte CodeLen	;patch wh_CodeLength
.c7e0	b5 26		lda $26,x	DGtSub:		lda DStack+2,x
.c7e2	d5 2a		cmp $2a,x			cmp DStack+6,x
.c7e4	b5 27		lda $27,x			lda DStack+3,x
.c7e6	f5 2b		sbc $2b,x			sbc DStack+7,x
.c7e8	b5 24		lda $24,x			lda DStack+0,x
.c7ea	f5 28		sbc $28,x			sbc DStack+4,x
.c7ec	b5 25		lda $25,x			lda DStack+1,x
.c7ee	f5 29		sbc $29,x			sbc DStack+5,x
.c7f0	60		rts				rts
>c7f1	44 30 3c 3d			Name0:	.text "D0<="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51061					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7f5	a4					.byte (("D0<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>c7f6	10					.byte WordFlags	;wh_Flags
>c7f7	03					.byte 3	;wh_CodeLength
>c7f8	22					  .byte LinkDisplacement	; offset to previous nt
=$c7f9					XtPtr1 ::= *
=51061					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7f9	b5 25		lda $25,x	D0Le:		lda DStack+1,x	; test sign
.c7fb	30 65		bmi $c862			bmi True1
.c7fd	10 24		bpl $c823			bpl D0Equal
=6					CodeLen	.var *-XtPtr1
=$c7ff					Here1 = *	; remember here
>c7f7	06					.byte CodeLen	;patch wh_CodeLength
>c7ff	44 30 3e			Name0:	.text "D0>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51074					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c802	c3					.byte (("D0>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c803	10					.byte WordFlags	;wh_Flags
>c804	03					.byte 3	;wh_CodeLength
>c805	0d					  .byte LinkDisplacement	; offset to previous nt
=$c806					XtPtr1 ::= *
=51074					WordListLink ::= Nt0 ; remember the nt of this word for later
.c806	b5 25		lda $25,x	D0Gt:		lda DStack+1,x	; test sign
.c808	10 0b		bpl $c815			bpl D0Ne
.c80a	4c 81 c8	jmp $c881			jmp False1
>c80d	44 30 3c 3e			Name0:	.text "D0<>"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51089					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c811	c4					.byte (("D0<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c812	10					.byte WordFlags	;wh_Flags
>c813	03					.byte 3	;wh_CodeLength
>c814	0f					  .byte LinkDisplacement	; offset to previous nt
=$c815					XtPtr1 ::= *
=51089					WordListLink ::= Nt0 ; remember the nt of this word for later
.c815	20 2a c8	jsr $c82a	D0Ne:		jsr D0EqSub
.c818	d0 48		bne $c862			bne True1
.c81a	f0 65		beq $c881			beq False1
=7					CodeLen	.var *-XtPtr1
=$c81c					Here1 = *	; remember here
>c813	07					.byte CodeLen	;patch wh_CodeLength
>c81c	44 30 3d			Name0:	.text "D0="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51103					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c81f	a3					.byte (("D0="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c820	10					.byte WordFlags	;wh_Flags
>c821	03					.byte 3	;wh_CodeLength
>c822	0e					  .byte LinkDisplacement	; offset to previous nt
=$c823					XtPtr1 ::= *
=51103					WordListLink ::= Nt0 ; remember the nt of this word for later
.c823	20 2a c8	jsr $c82a	D0Equal:	jsr D0EqSub
.c826	d0 59		bne $c881			bne False1
.c828	f0 38		beq $c862			beq True1
=7					CodeLen	.var *-XtPtr1
=$c82a					Here1 = *	; remember here
>c821	07					.byte CodeLen	;patch wh_CodeLength
.c82a	b5 26		lda $26,x	D0EqSub:	lda DStack+2,x
.c82c	15 27		ora $27,x			ora DStack+3,x
.c82e	15 24		ora $24,x			ora DStack+0,x
.c830	15 25		ora $25,x			ora DStack+1,x
.c832	60		rts				rts
>c833	44 30 3c			Name0:	.text "D0<"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51126					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c836	83					.byte (("D0<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c837	10					.byte WordFlags	;wh_Flags
>c838	03					.byte 3	;wh_CodeLength
>c839	17					  .byte LinkDisplacement	; offset to previous nt
=$c83a					XtPtr1 ::= *
=51126					WordListLink ::= Nt0 ; remember the nt of this word for later
.c83a	b5 25		lda $25,x	D0Less:		lda DStack+1,x	; test sign
.c83c	30 24		bmi $c862			bmi True1
.c83e	10 41		bpl $c881			bpl False1
=6					CodeLen	.var *-XtPtr1
=$c840					Here1 = *	; remember here
>c838	06					.byte CodeLen	;patch wh_CodeLength
>c840	44 30 3e 3d			Name0:	.text "D0>="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51140					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c844	a4					.byte (("D0>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c845	10					.byte WordFlags	;wh_Flags
>c846	03					.byte 3	;wh_CodeLength
>c847	0e					  .byte LinkDisplacement	; offset to previous nt
=$c848					XtPtr1 ::= *
=51140					WordListLink ::= Nt0 ; remember the nt of this word for later
.c848	b5 25		lda $25,x	D0Ge:		lda DStack+1,x	; test sign
.c84a	10 16		bpl $c862			bpl True1
.c84c	30 33		bmi $c881			bmi False1
=6					CodeLen	.var *-XtPtr1
=$c84e					Here1 = *	; remember here
>c846	06					.byte CodeLen	;patch wh_CodeLength
.c84e	4c 4e b4	jmp $b44e	Throw_Stack_08: jmp Throw_Stack
>c851	3d				Name0:	.text "="	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=51154					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c852	a1					.byte (("="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c853	10					.byte WordFlags	;wh_Flags
>c854	03					.byte 3	;wh_CodeLength
>c855	0e					  .byte LinkDisplacement	; offset to previous nt
=$c856					XtPtr1 ::= *
=51154					WordListLink ::= Nt0 ; remember the nt of this word for later
.c856	b5 24		lda $24,x	Equal:		lda DStack+0,x		; LSB
.c858	d5 26		cmp $26,x			cmp DStack+2,x
.c85a	d0 25		bne $c881			bne False1
.c85c	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c85e	d5 27		cmp $27,x			cmp DStack+3,x
.c860	d0 1f		bne $c881			bne False1
.c862	a9 ff		lda #$ff	True1:		lda #$ff	; return TRUE
.c864					Return1:
.c864	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c866	b0 e6		bcs $c84e		bcs Throw_Stack_08
.c868	e8		inx				inx		; Drop
.c869	e8		inx				inx
.c86a	95 24		sta $24,x			sta DStack+0,x	; store f
.c86c	95 25		sta $25,x			sta DStack+1,x
.c86e	60		rts				rts
=25					CodeLen	.var *-XtPtr1
=$c86f					Here1 = *	; remember here
>c854	19					.byte CodeLen	;patch wh_CodeLength
>c86f	3c 3e				Name0:	.text "<>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51185					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c871	c2					.byte (("<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>c872	10					.byte WordFlags	;wh_Flags
>c873	03					.byte 3	;wh_CodeLength
>c874	1f					  .byte LinkDisplacement	; offset to previous nt
=$c875					XtPtr1 ::= *
=51185					WordListLink ::= Nt0 ; remember the nt of this word for later
.c875	b5 24		lda $24,x	Not_Equals:	lda DStack+0,x		; LSB
.c877	d5 26		cmp $26,x			cmp DStack+2,x
.c879	d0 e7		bne $c862			bne True1
.c87b	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c87d	d5 27		cmp $27,x			cmp DStack+3,x
.c87f	d0 e1		bne $c862			bne True1
.c881	a9 00		lda #$00	False1:		lda #0		; return FALSE
.c883	f0 df		beq $c864			beq Return1
=16					CodeLen	.var *-XtPtr1
=$c885					Here1 = *	; remember here
>c873	10					.byte CodeLen	;patch wh_CodeLength
>c885	3c				Name0:	.text "<"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=51206					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c886	81					.byte (("<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>c887	10					.byte WordFlags	;wh_Flags
>c888	03					.byte 3	;wh_CodeLength
>c889	15					  .byte LinkDisplacement	; offset to previous nt
=$c88a					XtPtr1 ::= *
=51206					WordListLink ::= Nt0 ; remember the nt of this word for later
.c88a	b5 26		lda $26,x	Less_Than:	lda DStack+2,x	; compare
.c88c	d5 24		cmp $24,x			cmp DStack+0,x
.c88e	b5 27		lda $27,x			lda DStack+3,x
.c890	f5 25		sbc $25,x			sbc DStack+1,x
.c892	50 02		bvc $c896			bvc _c
.c894	49 80		eor #$80			eor #$80	; fix sign
.c896	10 e9		bpl $c881	_c:		bpl False1
.c898	30 c8		bmi $c862			bmi True1
=16					CodeLen	.var *-XtPtr1
=$c89a					Here1 = *	; remember here
>c888	10					.byte CodeLen	;patch wh_CodeLength
>c89a	3e 3d				Name0:	.text ">="	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51228					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c89c	a2					.byte ((">="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>c89d	10					.byte WordFlags	;wh_Flags
>c89e	03					.byte 3	;wh_CodeLength
>c89f	16					  .byte LinkDisplacement	; offset to previous nt
=$c8a0					XtPtr1 ::= *
=51228					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8a0	20 8a c8	jsr $c88a	Ge:		jsr Less_Than
.c8a3	4c 17 c9	jmp $c917			jmp ZEqA
=6					CodeLen	.var *-XtPtr1
=$c8a6					Here1 = *	; remember here
>c89e	06					.byte CodeLen	;patch wh_CodeLength
>c8a6	55 3c				Name0:	.text "U<"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51240					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8a8	82					.byte (("U<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c8a9	10					.byte WordFlags	;wh_Flags
>c8aa	03					.byte 3	;wh_CodeLength
>c8ab	0c					  .byte LinkDisplacement	; offset to previous nt
=$c8ac					XtPtr1 ::= *
=51240					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8ac	b5 26		lda $26,x	U_Less_Than:	lda DStack+2,x
.c8ae	d5 24		cmp $24,x			cmp DStack+0,x
.c8b0	b5 27		lda $27,x			lda DStack+3,x
.c8b2	f5 25		sbc $25,x			sbc DStack+1,x
.c8b4	b0 cb		bcs $c881			bcs False1
.c8b6	90 aa		bcc $c862			bcc True1
=12					CodeLen	.var *-XtPtr1
=$c8b8					Here1 = *	; remember here
>c8aa	0c					.byte CodeLen	;patch wh_CodeLength
>c8b8	55 3e				Name0:	.text "U>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51258					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8ba	c2					.byte (("U>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>c8bb	10					.byte WordFlags	;wh_Flags
>c8bc	03					.byte 3	;wh_CodeLength
>c8bd	12					  .byte LinkDisplacement	; offset to previous nt
=$c8be					XtPtr1 ::= *
=51258					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8be	b5 24		lda $24,x	U_Greater_Than:	lda DStack+0,x
.c8c0	d5 26		cmp $26,x			cmp DStack+2,x
.c8c2	b5 25		lda $25,x			lda DStack+1,x
.c8c4	f5 27		sbc $27,x			sbc DStack+3,x
.c8c6	b0 b9		bcs $c881			bcs False1
.c8c8	90 98		bcc $c862			bcc True1
=12					CodeLen	.var *-XtPtr1
=$c8ca					Here1 = *	; remember here
>c8bc	0c					.byte CodeLen	;patch wh_CodeLength
>c8ca	3e				Name0:	.text ">"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=51275					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8cb	c1					.byte ((">"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>c8cc	10					.byte WordFlags	;wh_Flags
>c8cd	03					.byte 3	;wh_CodeLength
>c8ce	11					  .byte LinkDisplacement	; offset to previous nt
=$c8cf					XtPtr1 ::= *
=51275					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8cf	b5 24		lda $24,x	Greater_Than:	lda DStack+0,x	; compare
.c8d1	d5 26		cmp $26,x			cmp DStack+2,x
.c8d3	b5 25		lda $25,x			lda DStack+1,x
.c8d5	f5 27		sbc $27,x			sbc DStack+3,x
.c8d7	50 02		bvc $c8db			bvc _c
.c8d9	49 80		eor #$80			eor #$80	; fix sign
.c8db	10 a4		bpl $c881	_c:		bpl False1
.c8dd	4c 62 c8	jmp $c862			jmp True1
=17					CodeLen	.var *-XtPtr1
=$c8e0					Here1 = *	; remember here
>c8cd	11					.byte CodeLen	;patch wh_CodeLength
>c8e0	3c 3d				Name0:	.text "<="	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51298					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8e2	a2					.byte (("<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c8e3	10					.byte WordFlags	;wh_Flags
>c8e4	03					.byte 3	;wh_CodeLength
>c8e5	17					  .byte LinkDisplacement	; offset to previous nt
=$c8e6					XtPtr1 ::= *
=51298					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8e6	20 cf c8	jsr $c8cf	Le:		jsr Greater_Than
.c8e9	4c 17 c9	jmp $c917			jmp ZEqA
=6					CodeLen	.var *-XtPtr1
=$c8ec					Here1 = *	; remember here
>c8e4	06					.byte CodeLen	;patch wh_CodeLength
>c8ec	55 3e 3d			Name0:	.text "U>="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51311					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8ef	a3					.byte (("U>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c8f0	10					.byte WordFlags	;wh_Flags
>c8f1	03					.byte 3	;wh_CodeLength
>c8f2	0d					  .byte LinkDisplacement	; offset to previous nt
=$c8f3					XtPtr1 ::= *
=51311					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8f3	20 ac c8	jsr $c8ac	UGe:		jsr U_Less_Than
.c8f6	4c 17 c9	jmp $c917			jmp ZEqA
=6					CodeLen	.var *-XtPtr1
=$c8f9					Here1 = *	; remember here
>c8f1	06					.byte CodeLen	;patch wh_CodeLength
>c8f9	55 3c 3d			Name0:	.text "U<="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51324					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8fc	a3					.byte (("U<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c8fd	10					.byte WordFlags	;wh_Flags
>c8fe	03					.byte 3	;wh_CodeLength
>c8ff	0d					  .byte LinkDisplacement	; offset to previous nt
=$c900					XtPtr1 ::= *
=51324					WordListLink ::= Nt0 ; remember the nt of this word for later
.c900	20 be c8	jsr $c8be	ULe:		jsr U_Greater_Than
.c903	4c 17 c9	jmp $c917			jmp ZEqA
=6					CodeLen	.var *-XtPtr1
=$c906					Here1 = *	; remember here
>c8fe	06					.byte CodeLen	;patch wh_CodeLength
.c906	4c 4e b4	jmp $b44e	Throw_Stack_11: jmp Throw_Stack
>c909	30 3d				Name0:	.text "0="	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51339					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c90b	a2					.byte (("0="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c90c	10					.byte WordFlags	;wh_Flags
>c90d	03					.byte 3	;wh_CodeLength
>c90e	0f					  .byte LinkDisplacement	; offset to previous nt
=$c90f					XtPtr1 ::= *
=51339					WordListLink ::= Nt0 ; remember the nt of this word for later
.c90f	b5 25		lda $25,x	Zero_Equal:	lda DStack+1,x
.c911	15 24		ora $24,x	ZEq3:		ora DStack+0,x
.c913	d0 2b		bne $c940			bne False0
.c915	f0 14		beq $c92b			beq True0
=8					CodeLen	.var *-XtPtr1
=$c917					Here1 = *	; remember here
>c90d	08					.byte CodeLen	;patch wh_CodeLength
.c917					ZEqA:
.c917	49 ff		eor #$ff			eor #$ff
.c919	95 24		sta $24,x			sta DStack+0,x
.c91b	95 25		sta $25,x			sta DStack+1,x
.c91d	60		rts				rts
>c91e	30 3c 3e			Name0:	.text "0<>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51361					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c921	c3					.byte (("0<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>c922	10					.byte WordFlags	;wh_Flags
>c923	03					.byte 3	;wh_CodeLength
>c924	16					  .byte LinkDisplacement	; offset to previous nt
=$c925					XtPtr1 ::= *
=51361					WordListLink ::= Nt0 ; remember the nt of this word for later
.c925	b5 25		lda $25,x	Zero_Unequal:	lda DStack+1,x
.c927	15 24		ora $24,x	ZNe3:		ora DStack+0,x
.c929	f0 15		beq $c940			beq False0
.c92b	a9 ff		lda #$ff	True0:		lda #$ff	; return TRUE
.c92d	95 24		sta $24,x	Return0:	sta DStack+0,x
.c92f	95 25		sta $25,x			sta DStack+1,x
.c931	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c933	b0 35		bcs $c96a		bcs Throw_Stack_05
.c935	60		rts				rts
=17					CodeLen	.var *-XtPtr1
=$c936					Here1 = *	; remember here
>c923	11					.byte CodeLen	;patch wh_CodeLength
>c936	30 3e				Name0:	.text "0>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51384					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c938	c2					.byte (("0>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c939	10					.byte WordFlags	;wh_Flags
>c93a	03					.byte 3	;wh_CodeLength
>c93b	17					  .byte LinkDisplacement	; offset to previous nt
=$c93c					XtPtr1 ::= *
=51384					WordListLink ::= Nt0 ; remember the nt of this word for later
.c93c	b5 25		lda $25,x	Zero_Greater:	lda DStack+1,x	; MSB
.c93e	10 e7		bpl $c927			bpl ZNe3	; >= 0 ?
.c940	a9 00		lda #$00	False0:		lda #0		; return FALSE
.c942	f0 e9		beq $c92d			beq Return0
=8					CodeLen	.var *-XtPtr1
=$c944					Here1 = *	; remember here
>c93a	08					.byte CodeLen	;patch wh_CodeLength
>c944	30 3c 3d			Name0:	.text "0<="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51399					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c947	a3					.byte (("0<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c948	10					.byte WordFlags	;wh_Flags
>c949	03					.byte 3	;wh_CodeLength
>c94a	0f					  .byte LinkDisplacement	; offset to previous nt
=$c94b					XtPtr1 ::= *
=51399					WordListLink ::= Nt0 ; remember the nt of this word for later
.c94b	b5 25		lda $25,x	ZLe:		lda DStack+1,x	; < 0 ?
.c94d	30 dc		bmi $c92b			bmi True0
.c94f	10 c0		bpl $c911			bpl ZEq3
=6					CodeLen	.var *-XtPtr1
=$c951					Here1 = *	; remember here
>c949	06					.byte CodeLen	;patch wh_CodeLength
>c951	30 3e 3d			Name0:	.text "0>="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51412					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c954	a3					.byte (("0>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c955	10					.byte WordFlags	;wh_Flags
>c956	03					.byte 3	;wh_CodeLength
>c957	0d					  .byte LinkDisplacement	; offset to previous nt
=$c958					XtPtr1 ::= *
=51412					WordListLink ::= Nt0 ; remember the nt of this word for later
.c958	b5 25		lda $25,x	ZGe:		lda DStack+1,x
.c95a	10 cf		bpl $c92b			bpl True0
.c95c	30 e2		bmi $c940			bmi False0
=6					CodeLen	.var *-XtPtr1
=$c95e					Here1 = *	; remember here
>c956	06					.byte CodeLen	;patch wh_CodeLength
>c95e	30 3c				Name0:	.text "0<"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51424					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c960	82					.byte (("0<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c961	10					.byte WordFlags	;wh_Flags
>c962	03					.byte 3	;wh_CodeLength
>c963	0c					  .byte LinkDisplacement	; offset to previous nt
=$c964					XtPtr1 ::= *
=51424					WordListLink ::= Nt0 ; remember the nt of this word for later
.c964	b5 25		lda $25,x	Zero_Less:	lda DStack+1,x	; MSB
.c966	10 d8		bpl $c940			bpl False0
.c968	30 c1		bmi $c92b			bmi True0
=6					CodeLen	.var *-XtPtr1
=$c96a					Here1 = *	; remember here
>c962	06					.byte CodeLen	;patch wh_CodeLength
.c96a	4c 4e b4	jmp $b44e	Throw_Stack_05: jmp Throw_Stack
>c96d	4d 69 6e			Name0:	.text "Min"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51440					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c970	c3					.byte (("Min"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>c971	50					.byte WordFlags	;wh_Flags
>c972	03					.byte 3	;wh_CodeLength
>c973	10					  .byte LinkDisplacement	; offset to previous nt
=$c974					XtPtr1 ::= *
=51440					WordListLink ::= Nt0 ; remember the nt of this word for later
.c974					Min:
.c974	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c976	b0 f2		bcs $c96a		bcs Throw_Stack_05
.c978	b5 24		lda $24,x			lda DStack+0,x	; compare n1 & n2; sets V & N but not Z
.c97a	d5 26		cmp $26,x			cmp DStack+2,x
.c97c	b5 25		lda $25,x			lda DStack+1,x
.c97e	f5 27		sbc $27,x			sbc DStack+3,x
.c980	70 1a		bvs $c99c			bvs Max_3	; if overflow, the sign is backwards
.c982	30 27		bmi $c9ab	Min_3:		bmi Nip_NoUf	; if negative, NOS is larger and needs to be dumped
.c984	e8		inx				inx		; Drop n2
.c985	e8		inx				inx
=18					CodeLen	.var *-XtPtr1
=$c986					Here1 = *	; remember here
>c972	12					.byte CodeLen	;patch wh_CodeLength
.c986	60		rts				rts
>c987	4d 61 78			Name0:	.text "Max"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51466					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c98a	03					.byte (("Max"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>c98b	10					.byte WordFlags	;wh_Flags
>c98c	03					.byte 3	;wh_CodeLength
>c98d	1a					  .byte LinkDisplacement	; offset to previous nt
=$c98e					XtPtr1 ::= *
=51466					WordListLink ::= Nt0 ; remember the nt of this word for later
.c98e					Max:
.c98e	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c990	b0 d8		bcs $c96a		bcs Throw_Stack_05
.c992	b5 24		lda $24,x			lda DStack+0,x	; Compare n1 & n2; sets V & N but not Z
.c994	d5 26		cmp $26,x			cmp DStack+2,x
.c996	b5 25		lda $25,x			lda DStack+1,x
.c998	f5 27		sbc $27,x			sbc DStack+3,x
.c99a	70 e6		bvs $c982			bvs Min_3	; if overflow, the sign is backwards
.c99c	10 0d		bpl $c9ab	Max_3:		bpl Nip_NoUf	; if negative, NOS is larger and needs to be kept
.c99e	e8		inx				inx		; Drop n2
.c99f	e8		inx				inx
=18					CodeLen	.var *-XtPtr1
=$c9a0					Here1 = *	; remember here
>c98c	12					.byte CodeLen	;patch wh_CodeLength
.c9a0	60		rts				rts
>c9a1	4e 69 70			Name0:	.text "Nip"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51492					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9a4	03					.byte (("Nip"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>c9a5	40					.byte WordFlags	;wh_Flags
>c9a6	03					.byte 3	;wh_CodeLength
>c9a7	1a					  .byte LinkDisplacement	; offset to previous nt
=$c9a8					XtPtr1 ::= *
=51492					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9a8					Nip:
.c9a8	20 3f b4	jsr $b43f			jsr underflow_2
.c9ab	b5 24		lda $24,x	Nip_NoUf:	lda DStack+0,x	; PopYA
.c9ad	b4 25		ldy $25,x			ldy DStack+1,x
.c9af	e8		inx				inx
.c9b0	e8		inx				inx
.c9b1	95 24		sta $24,x			sta DStack+0,x	; store over n1
.c9b3	94 25		sty $25,x			sty DStack+1,x
=13					CodeLen	.var *-XtPtr1
=$c9b5					Here1 = *	; remember here
>c9a6	0d					.byte CodeLen	;patch wh_CodeLength
.c9b5	60		rts				rts
>c9b6	50 69 63 6b			Name0:	.text "Pick"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51514					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9ba	64					.byte (("Pick"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>c9bb	00					.byte WordFlags	;wh_Flags
>c9bc	03					.byte 3	;wh_CodeLength
>c9bd	16					  .byte LinkDisplacement	; offset to previous nt
=$c9be					XtPtr1 ::= *
=51514					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9be					Pick:
.c9be	16 24		asl $24,x			asl DStack+0,x	; we assume u < 128 (stack is small)
.c9c0	8a		txa				txa
.c9c1	75 24		adc $24,x			adc DStack+0,x
.c9c3	a8		tay				tay
.c9c4	b9 26 00	lda $0026,y			lda DStack+2,y
.c9c7	95 24		sta $24,x			sta DStack+0,x
.c9c9	b9 27 00	lda $0027,y			lda DStack+3,y
.c9cc	95 25		sta $25,x			sta DStack+1,x
=16					CodeLen	.var *-XtPtr1
=$c9ce					Here1 = *	; remember here
>c9bc	10					.byte CodeLen	;patch wh_CodeLength
.c9ce	60		rts				rts
>c9cf	43 68 61 72			Name0:	.text "Char"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51539					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9d3	44					.byte (("Char"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>c9d4	10					.byte WordFlags	;wh_Flags
>c9d5	03					.byte 3	;wh_CodeLength
>c9d6	19					  .byte LinkDisplacement	; offset to previous nt
=$c9d7					XtPtr1 ::= *
=51539					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9d7					Char:
.c9d7	20 b1 ba	jsr $bab1			jsr parse_name_check
.c9da	e8		inx				inx		; Drop number of characters, leave addr
.c9db	e8		inx				inx
.c9dc	4c 65 cd	jmp $cd65			jmp C_Fetch	; get character ( C@ )
=8					CodeLen	.var *-XtPtr1
=$c9df					Here1 = *	; remember here
>c9d5	08					.byte CodeLen	;patch wh_CodeLength
>c9df	5b 43 68 61 72 5d		Name0:	.text "[Char]"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=51557					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9e5	a6					.byte (("[Char]"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>c9e6	1c					.byte WordFlags	;wh_Flags
>c9e7	03					.byte 3	;wh_CodeLength
>c9e8	12					  .byte LinkDisplacement	; offset to previous nt
=$c9e9					XtPtr1 ::= *
=51557					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9e9	20 d7 c9	jsr $c9d7	Bracket_Char:	jsr Char
.c9ec	4c 76 b7	jmp $b776			jmp Literal
=6					CodeLen	.var *-XtPtr1
=$c9ef					Here1 = *	; remember here
>c9e7	06					.byte CodeLen	;patch wh_CodeLength
>c9ef	43 68 61 72 2b			Name0:	.text "Char+"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=51572					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9f4	65					.byte (("Char+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c9f5	10					.byte WordFlags	;wh_Flags
>c9f6	03					.byte 3	;wh_CodeLength
>c9f7	0f					  .byte LinkDisplacement	; offset to previous nt
=$c9f8					XtPtr1 ::= *
=51572					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9f8	4c 72 ca	jmp $ca72	Char_Plus:	jmp One_Plus
=3					CodeLen	.var *-XtPtr1
=$c9fb					Here1 = *	; remember here
>c9f6	03					.byte CodeLen	;patch wh_CodeLength
>c9fb	43 68 61 72 73			Name0:	.text "Chars"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=51584					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca00	65					.byte (("Chars"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$20					WordFlags ::= AN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>ca01	20					.byte WordFlags	;wh_Flags
>ca02	03					.byte 3	;wh_CodeLength
>ca03	0c					  .byte LinkDisplacement	; offset to previous nt
=$ca04					XtPtr1 ::= *
=51584					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca04					Chars:
=0					CodeLen	.var *-XtPtr1
=$ca04					Here1 = *	; remember here
>ca02	00					.byte CodeLen	;patch wh_CodeLength
.ca04	60		rts				rts
>ca05	43 65 6c 6c 73			Name0:	.text "Cells"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=51594					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca0a	65					.byte (("Cells"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>ca0b	40					.byte WordFlags	;wh_Flags
>ca0c	03					.byte 3	;wh_CodeLength
>ca0d	0a					  .byte LinkDisplacement	; offset to previous nt
=$ca0e					XtPtr1 ::= *
=51594					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca0e	20 2b b4	jsr $b42b	Cells:		jsr underflow_1
.ca11	16 24		asl $24,x			asl DStack+0,x		; 2*
.ca13	36 25		rol $25,x			rol DStack+1,x
=7					CodeLen	.var *-XtPtr1
=$ca15					Here1 = *	; remember here
>ca0c	07					.byte CodeLen	;patch wh_CodeLength
.ca15	60		rts				rts
>ca16	43 65 6c 6c 2b			Name0:	.text "Cell+"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=51611					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca1b	65					.byte (("Cell+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>ca1c	40					.byte WordFlags	;wh_Flags
>ca1d	03					.byte 3	;wh_CodeLength
>ca1e	11					  .byte LinkDisplacement	; offset to previous nt
=$ca1f					XtPtr1 ::= *
=51611					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca1f	20 2b b4	jsr $b42b	Cell_Plus:	jsr underflow_1
.ca22	a9 02		lda #$02	Cell_Plus_NoUf:	lda #2		; our cells are 2 bytes
.ca24					Plus_A:
.ca24	18		clc				clc
.ca25	75 24		adc $24,x			adc DStack+0,x
.ca27	95 24		sta $24,x			sta DStack+0,x
.ca29	90 02		bcc $ca2d			bcc +
.ca2b	f6 25		inc $25,x			inc DStack+1,x
.ca2d					+
=14					CodeLen	.var *-XtPtr1
=$ca2d					Here1 = *	; remember here
>ca1d	0e					.byte CodeLen	;patch wh_CodeLength
.ca2d	60		rts				rts
.ca2e					Nos_Plus_A:
.ca2e	18		clc				clc
.ca2f	75 26		adc $26,x			adc DStack+2,x
.ca31	95 26		sta $26,x			sta DStack+2,x
.ca33	90 02		bcc $ca37			bcc +
.ca35	f6 27		inc $27,x			inc DStack+3,x
.ca37	60		rts		+		rts
>ca38	48 65 72 65			Name0:	.text "Here"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51644					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca3c	a4					.byte (("Here"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>ca3d	10					.byte WordFlags	;wh_Flags
>ca3e	03					.byte 3	;wh_CodeLength
>ca3f	21					  .byte LinkDisplacement	; offset to previous nt
=$ca40					XtPtr1 ::= *
=51644					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca40	a5 00		lda $00		Here:		lda cp+0
.ca42	a4 01		ldy $01				ldy cp+1
.ca44	4c c1 b7	jmp $b7c1			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$ca47					Here1 = *	; remember here
>ca3e	07					.byte CodeLen	;patch wh_CodeLength
>ca47	31 2d				Name0:	.text "1-"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51657					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca49	a2					.byte (("1-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>ca4a	40					.byte WordFlags	;wh_Flags
>ca4b	03					.byte 3	;wh_CodeLength
>ca4c	0d					  .byte LinkDisplacement	; offset to previous nt
=$ca4d					XtPtr1 ::= *
=51657					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca4d	20 2b b4	jsr $b42b	One_Minus:	jsr underflow_1
.ca50					One_Minus_NoUf:
.ca50	b5 24		lda $24,x			lda DStack+0,x
.ca52	d0 02		bne $ca56			bne +
.ca54	d6 25		dec $25,x			dec DStack+1,x
.ca56	d6 24		dec $24,x	+		dec DStack+0,x
=11					CodeLen	.var *-XtPtr1
=$ca58					Here1 = *	; remember here
>ca4b	0b					.byte CodeLen	;patch wh_CodeLength
.ca58	60		rts				rts
.ca59					NOS_One_Minus:
.ca59	b5 26		lda $26,x			lda DStack+2,x
.ca5b	d0 02		bne $ca5f			bne +
.ca5d	d6 27		dec $27,x			dec DStack+3,x
.ca5f	d6 26		dec $26,x	+		dec DStack+2,x
.ca61	60		rts				rts
.ca62					Minus_A:
.ca62	18		clc				clc
.ca63	75 24		adc $24,x			adc DStack+0,x
.ca65	95 24		sta $24,x			sta DStack+0,x
.ca67	b0 02		bcs $ca6b			bcs +
.ca69	d6 25		dec $25,x			dec DStack+1,x
.ca6b	60		rts		+		rts
>ca6c	31 2b				Name0:	.text "1+"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51694					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca6e	62					.byte (("1+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>ca6f	40					.byte WordFlags	;wh_Flags
>ca70	03					.byte 3	;wh_CodeLength
>ca71	25					  .byte LinkDisplacement	; offset to previous nt
=$ca72					XtPtr1 ::= *
=51694					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca72	20 2b b4	jsr $b42b	One_Plus:	jsr underflow_1
.ca75	f6 24		inc $24,x			inc DStack+0,x
.ca77	d0 02		bne $ca7b			bne +
.ca79	f6 25		inc $25,x			inc DStack+1,x
.ca7b					+
=9					CodeLen	.var *-XtPtr1
=$ca7b					Here1 = *	; remember here
>ca70	09					.byte CodeLen	;patch wh_CodeLength
.ca7b	60		rts				rts
.ca7c					NOS_One_Plus:
.ca7c	f6 26		inc $26,x			inc DStack+2,x
.ca7e	d0 02		bne $ca82			bne +
.ca80	f6 27		inc $27,x			inc DStack+3,x
.ca82	60		rts		+		rts
>ca83	55 4d 2b			Name0:	.text "UM+"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51718					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca86	63					.byte (("UM+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>ca87	00					.byte WordFlags	;wh_Flags
>ca88	03					.byte 3	;wh_CodeLength
>ca89	18					  .byte LinkDisplacement	; offset to previous nt
=$ca8a					XtPtr1 ::= *
=51718					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca8a	20 02 b4	jsr $b402	UMPlus:		jsr PopYA
.ca8d	18		clc				clc		; add n to d1.lo
.ca8e	75 26		adc $26,x			adc DStack+2,x
.ca90	95 26		sta $26,x			sta DStack+2,x
.ca92	98		tya				tya
.ca93	75 27		adc $27,x			adc DStack+3,x
.ca95	95 27		sta $27,x			sta DStack+3,x
.ca97	90 06		bcc $ca9f			bcc +		; propagate carry thru d1.hi
.ca99	f6 24		inc $24,x			inc DStack+0,x
.ca9b	d0 02		bne $ca9f			bne +
.ca9d	f6 25		inc $25,x			inc DStack+1,x
.ca9f					+
=21					CodeLen	.var *-XtPtr1
=$ca9f					Here1 = *	; remember here
>ca88	15					.byte CodeLen	;patch wh_CodeLength
.ca9f	60		rts				rts
>caa0	4d 2b				Name0:	.text "M+"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51746					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>caa2	62					.byte (("M+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>caa3	10					.byte WordFlags	;wh_Flags
>caa4	03					.byte 3	;wh_CodeLength
>caa5	1c					  .byte LinkDisplacement	; offset to previous nt
=$caa6					XtPtr1 ::= *
=51746					WordListLink ::= Nt0 ; remember the nt of this word for later
.caa6	20 8a ca	jsr $ca8a	MPlus:		jsr UMPlus
.caa9	98		tya				tya		; if n negative
.caaa	30 a4		bmi $ca50			bmi One_Minus_NoUf ;   decrement d1.hi
=6					CodeLen	.var *-XtPtr1
=$caac					Here1 = *	; remember here
>caa4	06					.byte CodeLen	;patch wh_CodeLength
.caac	60		rts				rts
>caad	44 32 2a			Name0:	.text "D2*"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51760					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cab0	43					.byte (("D2*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>cab1	40					.byte WordFlags	;wh_Flags
>cab2	03					.byte 3	;wh_CodeLength
>cab3	0e					  .byte LinkDisplacement	; offset to previous nt
=$cab4					XtPtr1 ::= *
=51760					WordListLink ::= Nt0 ; remember the nt of this word for later
.cab4	20 3f b4	jsr $b43f	D2Star:		jsr underflow_2
.cab7	16 26		asl $26,x			asl DStack+2,x
.cab9	36 27		rol $27,x			rol DStack+3,x
.cabb	36 24		rol $24,x			rol DStack+0,x
.cabd	36 25		rol $25,x			rol DStack+1,x
=11					CodeLen	.var *-XtPtr1
=$cabf					Here1 = *	; remember here
>cab2	0b					.byte CodeLen	;patch wh_CodeLength
.cabf	60		rts				rts
>cac0	44 32 2f			Name0:	.text "D2/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51779					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cac3	e3					.byte (("D2/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cac4	40					.byte WordFlags	;wh_Flags
>cac5	03					.byte 3	;wh_CodeLength
>cac6	13					  .byte LinkDisplacement	; offset to previous nt
=$cac7					XtPtr1 ::= *
=51779					WordListLink ::= Nt0 ; remember the nt of this word for later
.cac7	20 3f b4	jsr $b43f	D2Slash:	jsr underflow_2
.caca	b5 25		lda $25,x			lda DStack+1,x		; setup for sign-extended shift right
.cacc	0a		asl a				asl a
.cacd	76 25		ror $25,x	D2SlashU:	ror DStack+1,x
.cacf	76 24		ror $24,x			ror DStack+0,x
.cad1	76 27		ror $27,x			ror DStack+3,x
.cad3	76 26		ror $26,x			ror DStack+2,x
=14					CodeLen	.var *-XtPtr1
=$cad5					Here1 = *	; remember here
>cac5	0e					.byte CodeLen	;patch wh_CodeLength
.cad5	60		rts				rts
>cad6	55 44 32 2f			Name0:	.text "UD2/"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51802					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cada	e4					.byte (("UD2/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>cadb	50					.byte WordFlags	;wh_Flags
>cadc	03					.byte 3	;wh_CodeLength
>cadd	17					  .byte LinkDisplacement	; offset to previous nt
=$cade					XtPtr1 ::= *
=51802					WordListLink ::= Nt0 ; remember the nt of this word for later
.cade	20 3f b4	jsr $b43f	DU2Slash:	jsr underflow_2
.cae1	18		clc				clc
.cae2	90 e9		bcc $cacd			bcc D2SlashU
=6					CodeLen	.var *-XtPtr1
=$cae4					Here1 = *	; remember here
>cadc	06					.byte CodeLen	;patch wh_CodeLength
>cae4	32 2a				Name0:	.text "2*"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51814					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cae6	42					.byte (("2*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cae7	40					.byte WordFlags	;wh_Flags
>cae8	03					.byte 3	;wh_CodeLength
>cae9	0c					  .byte LinkDisplacement	; offset to previous nt
=$caea					XtPtr1 ::= *
=51814					WordListLink ::= Nt0 ; remember the nt of this word for later
.caea					Two_Star:
.caea	20 2b b4	jsr $b42b			jsr underflow_1
.caed	16 24		asl $24,x			asl DStack+0,x
.caef	36 25		rol $25,x			rol DStack+1,x
=7					CodeLen	.var *-XtPtr1
=$caf1					Here1 = *	; remember here
>cae8	07					.byte CodeLen	;patch wh_CodeLength
.caf1	60		rts				rts
>caf2	32 2f				Name0:	.text "2/"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51828					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>caf4	e2					.byte (("2/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>caf5	40					.byte WordFlags	;wh_Flags
>caf6	03					.byte 3	;wh_CodeLength
>caf7	0e					  .byte LinkDisplacement	; offset to previous nt
=$caf8					XtPtr1 ::= *
=51828					WordListLink ::= Nt0 ; remember the nt of this word for later
.caf8					Two_Slash:
.caf8	20 2b b4	jsr $b42b			jsr underflow_1
.cafb	b5 25		lda $25,x			lda DStack+1,x		; load sign into carry, for signed shift
.cafd	0a		asl a				asl
.cafe	76 25		ror $25,x			ror DStack+1,x
.cb00	76 24		ror $24,x			ror DStack+0,x
=10					CodeLen	.var *-XtPtr1
=$cb02					Here1 = *	; remember here
>caf6	0a					.byte CodeLen	;patch wh_CodeLength
.cb02	60		rts				rts
>cb03	55 32 2f			Name0:	.text "U2/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51846					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb06	e3					.byte (("U2/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cb07	40					.byte WordFlags	;wh_Flags
>cb08	03					.byte 3	;wh_CodeLength
>cb09	12					  .byte LinkDisplacement	; offset to previous nt
=$cb0a					XtPtr1 ::= *
=51846					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb0a					UTwo_Slash:
.cb0a	20 2b b4	jsr $b42b			jsr underflow_1
.cb0d	56 25		lsr $25,x			lsr DStack+1,x
.cb0f	76 24		ror $24,x			ror DStack+0,x
=7					CodeLen	.var *-XtPtr1
=$cb11					Here1 = *	; remember here
>cb08	07					.byte CodeLen	;patch wh_CodeLength
.cb11	60		rts				rts
>cb12	44 52 53 68 69 66 74		Name0:	.text "DRShift"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=51865					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb19	87					.byte (("DRShift"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cb1a	00					.byte WordFlags	;wh_Flags
>cb1b	03					.byte 3	;wh_CodeLength
>cb1c	13					  .byte LinkDisplacement	; offset to previous nt
=$cb1d					XtPtr1 ::= *
=51865					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb1d	20 e7 b3	jsr $b3e7	DRShift:	jsr PopA	; pop u
.cb20	a8		tay		DRShiftA:	tay
.cb21	f0 0e		beq $cb31			beq _9
.cb23	b5 25		lda $25,x			lda DStack+1,x
.cb25	4a		lsr a		_2:		lsr a
.cb26	76 24		ror $24,x			ror DStack+0,x
.cb28	76 27		ror $27,x			ror DStack+3,x
.cb2a	76 26		ror $26,x			ror DStack+2,x
.cb2c	88		dey				dey
.cb2d	d0 f6		bne $cb25			bne _2
.cb2f	95 25		sta $25,x			sta DStack+1,x
.cb31					_9:
=20					CodeLen	.var *-XtPtr1
=$cb31					Here1 = *	; remember here
>cb1b	14					.byte CodeLen	;patch wh_CodeLength
.cb31	60		rts				rts
>cb32	52 53 68 69 66 74		Name0:	.text "RShift"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=51896					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb38	86					.byte (("RShift"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>cb39	00					.byte WordFlags	;wh_Flags
>cb3a	03					.byte 3	;wh_CodeLength
>cb3b	1f					  .byte LinkDisplacement	; offset to previous nt
=$cb3c					XtPtr1 ::= *
=51896					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb3c	20 f0 b3	jsr $b3f0	RShift:		jsr PopA2	; pop u, check for 2 params
.cb3f	a8		tay		RShift_A:	tay		; get shift count
.cb40	f0 0a		beq $cb4c			beq _done
.cb42	b5 25		lda $25,x			lda DStack+1,x
.cb44	4a		lsr a		_loop:		lsr a
.cb45	76 24		ror $24,x			ror DStack+0,x
.cb47	88		dey				dey
.cb48	d0 fa		bne $cb44			bne _loop
.cb4a	95 25		sta $25,x			sta DStack+1,x
.cb4c					_done:
=16					CodeLen	.var *-XtPtr1
=$cb4c					Here1 = *	; remember here
>cb3a	10					.byte CodeLen	;patch wh_CodeLength
.cb4c	60		rts				rts
>cb4d	4c 53 68 69 66 74		Name0:	.text "LShift"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=51923					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb53	86					.byte (("LShift"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>cb54	00					.byte WordFlags	;wh_Flags
>cb55	03					.byte 3	;wh_CodeLength
>cb56	1b					  .byte LinkDisplacement	; offset to previous nt
=$cb57					XtPtr1 ::= *
=51923					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb57	20 f0 b3	jsr $b3f0	LShift:		jsr PopA2	; pop u, check for 2 params
.cb5a	a8		tay		LShift_A:	tay		; get shift count
.cb5b	f0 0a		beq $cb67			beq _done
.cb5d	b5 25		lda $25,x			lda DStack+1,x
.cb5f	16 24		asl $24,x	_loop:		asl DStack+0,x
.cb61	2a		rol a				rol a
.cb62	88		dey				dey
.cb63	d0 fa		bne $cb5f			bne _loop
.cb65	95 25		sta $25,x			sta DStack+1,x
.cb67					_done:
=16					CodeLen	.var *-XtPtr1
=$cb67					Here1 = *	; remember here
>cb55	10					.byte CodeLen	;patch wh_CodeLength
.cb67	60		rts				rts
>cb68	41 6e 64			Name0:	.text "And"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51947					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb6b	83					.byte (("And"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cb6c	40					.byte WordFlags	;wh_Flags
>cb6d	03					.byte 3	;wh_CodeLength
>cb6e	18					  .byte LinkDisplacement	; offset to previous nt
=$cb6f					XtPtr1 ::= *
=51947					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb6f					And2:
.cb6f	20 3f b4	jsr $b43f			jsr underflow_2
.cb72	b5 24		lda $24,x			lda DStack+0,x
.cb74	35 26		and $26,x			and DStack+2,x
.cb76	95 26		sta $26,x			sta DStack+2,x
.cb78	b5 25		lda $25,x			lda DStack+1,x
.cb7a	35 27		and $27,x			and DStack+3,x
.cb7c	95 27		sta $27,x			sta DStack+3,x
.cb7e	e8		inx				inx		; Drop n2
.cb7f	e8		inx				inx
=17					CodeLen	.var *-XtPtr1
=$cb80					Here1 = *	; remember here
>cb6d	11					.byte CodeLen	;patch wh_CodeLength
.cb80	60		rts				rts
>cb81	4f 72				Name0:	.text "Or"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51971					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb83	42					.byte (("Or"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cb84	40					.byte WordFlags	;wh_Flags
>cb85	03					.byte 3	;wh_CodeLength
>cb86	18					  .byte LinkDisplacement	; offset to previous nt
=$cb87					XtPtr1 ::= *
=51971					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb87					Or:
.cb87	20 3f b4	jsr $b43f			jsr underflow_2
.cb8a	b5 24		lda $24,x			lda DStack+0,x
.cb8c	15 26		ora $26,x			ora DStack+2,x
.cb8e	95 26		sta $26,x			sta DStack+2,x
.cb90	b5 25		lda $25,x			lda DStack+1,x
.cb92	15 27		ora $27,x			ora DStack+3,x
.cb94	95 27		sta $27,x			sta DStack+3,x
.cb96	e8		inx				inx		; Drop n2
.cb97	e8		inx				inx
=17					CodeLen	.var *-XtPtr1
=$cb98					Here1 = *	; remember here
>cb85	11					.byte CodeLen	;patch wh_CodeLength
.cb98	60		rts				rts
>cb99	58 6f 72			Name0:	.text "Xor"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51996					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb9c	43					.byte (("Xor"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>cb9d	40					.byte WordFlags	;wh_Flags
>cb9e	03					.byte 3	;wh_CodeLength
>cb9f	19					  .byte LinkDisplacement	; offset to previous nt
=$cba0					XtPtr1 ::= *
=51996					WordListLink ::= Nt0 ; remember the nt of this word for later
.cba0					Xor:
.cba0	20 3f b4	jsr $b43f			jsr underflow_2
.cba3	b5 24		lda $24,x			lda DStack+0,x
.cba5	55 26		eor $26,x			eor DStack+2,x
.cba7	95 26		sta $26,x			sta DStack+2,x
.cba9	b5 25		lda $25,x			lda DStack+1,x
.cbab	55 27		eor $27,x			eor DStack+3,x
.cbad	95 27		sta $27,x			sta DStack+3,x
.cbaf	e8		inx				inx		; Drop n2
.cbb0	e8		inx				inx
=17					CodeLen	.var *-XtPtr1
=$cbb1					Here1 = *	; remember here
>cb9e	11					.byte CodeLen	;patch wh_CodeLength
.cbb1	60		rts				rts
>cbb2	2b				Name0:	.text "+"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52019					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbb3	61					.byte (("+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>cbb4	40					.byte WordFlags	;wh_Flags
>cbb5	03					.byte 3	;wh_CodeLength
>cbb6	17					  .byte LinkDisplacement	; offset to previous nt
=$cbb7					XtPtr1 ::= *
=52019					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbb7					Plus:
.cbb7	20 3f b4	jsr $b43f			jsr underflow_2
.cbba	18		clc				clc
.cbbb	b5 24		lda $24,x			lda DStack+0,x		; LSB
.cbbd	75 26		adc $26,x			adc DStack+2,x
.cbbf	95 26		sta $26,x			sta DStack+2,x
.cbc1	b5 25		lda $25,x			lda DStack+1,x		; MSB. No CLC, conserve carry bit
.cbc3	75 27		adc $27,x			adc DStack+3,x
.cbc5	95 27		sta $27,x			sta DStack+3,x
.cbc7	e8		inx				inx
.cbc8	e8		inx				inx
=18					CodeLen	.var *-XtPtr1
=$cbc9					Here1 = *	; remember here
>cbb5	12					.byte CodeLen	;patch wh_CodeLength
.cbc9	60		rts				rts
>cbca	2d				Name0:	.text "-"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52043					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbcb	a1					.byte (("-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cbcc	40					.byte WordFlags	;wh_Flags
>cbcd	03					.byte 3	;wh_CodeLength
>cbce	18					  .byte LinkDisplacement	; offset to previous nt
=$cbcf					XtPtr1 ::= *
=52043					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbcf					Minus:
.cbcf	20 3f b4	jsr $b43f			jsr underflow_2
.cbd2	38		sec				sec
.cbd3	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cbd5	f5 24		sbc $24,x			sbc DStack+0,x
.cbd7	95 26		sta $26,x			sta DStack+2,x
.cbd9	b5 27		lda $27,x			lda DStack+3,x	; MSB
.cbdb	f5 25		sbc $25,x			sbc DStack+1,x
.cbdd	95 27		sta $27,x			sta DStack+3,x
.cbdf	e8		inx				inx		; Drop n2
.cbe0	e8		inx				inx
=18					CodeLen	.var *-XtPtr1
=$cbe1					Here1 = *	; remember here
>cbcd	12					.byte CodeLen	;patch wh_CodeLength
.cbe1	60		rts				rts
>cbe2	2e				Name0:	.text "."	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52067					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbe3	c1					.byte (("."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cbe4	10					.byte WordFlags	;wh_Flags
>cbe5	03					.byte 3	;wh_CodeLength
>cbe6	18					  .byte LinkDisplacement	; offset to previous nt
=$cbe7					XtPtr1 ::= *
=52067					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbe7	b5 25		lda $25,x	Dot:		lda DStack+1,x		; ( n )	save sign
.cbe9	08		php				php
.cbea	20 da c6	jsr $c6da			jsr Abs			; ( u )
.cbed	20 fe b7	jsr $b7fe			jsr Zero		; ( ud )	u>d  cvt u to ud
.cbf0	4c ff cb	jmp $cbff			jmp fmt_d3
=12					CodeLen	.var *-XtPtr1
=$cbf3					Here1 = *	; remember here
>cbe5	0c					.byte CodeLen	;patch wh_CodeLength
>cbf3	44 2e				Name0:	.text "D."	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52085					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbf5	c2					.byte (("D."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cbf6	10					.byte WordFlags	;wh_Flags
>cbf7	03					.byte 3	;wh_CodeLength
>cbf8	12					  .byte LinkDisplacement	; offset to previous nt
=$cbf9					XtPtr1 ::= *
=52085					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbf9	b5 25		lda $25,x	D_Dot:		lda DStack+1,x		; save sign
.cbfb	08		php				php
.cbfc	20 0d c7	jsr $c70d			jsr DAbs
.cbff	20 f0 ab	jsr $abf0	fmt_d3:		jsr Less_Number_Sign	; ( ud )	start formatting
.cc02	20 5f ac	jsr $ac5f			jsr Number_sign_s	; ( ud )	do all digits
.cc05	28		plp				plp			; ( ud )	do sign
.cc06	20 79 ac	jsr $ac79			jsr Sign_P		; ( ud )
.cc09	20 fc ab	jsr $abfc			jsr Number_sign_greater	; ( addr u )	end formatting
.cc0c	20 f0 cd	jsr $cdf0			jsr Type
.cc0f	4c e4 cd	jmp $cde4			jmp Space
=25					CodeLen	.var *-XtPtr1
=$cc12					Here1 = *	; remember here
>cbf7	19					.byte CodeLen	;patch wh_CodeLength
>cc12	55 2e				Name0:	.text "U."	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52116					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc14	c2					.byte (("U."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>cc15	50					.byte WordFlags	;wh_Flags
>cc16	03					.byte 3	;wh_CodeLength
>cc17	1f					  .byte LinkDisplacement	; offset to previous nt
=$cc18					XtPtr1 ::= *
=52116					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc18	20 2b b4	jsr $b42b	U_Dot:		jsr underflow_1
.cc1b	20 31 cc	jsr $cc31			jsr print_u
.cc1e	4c e4 cd	jmp $cde4			jmp Space
=9					CodeLen	.var *-XtPtr1
=$cc21					Here1 = *	; remember here
>cc16	09					.byte CodeLen	;patch wh_CodeLength
>cc21	55 44 2e			Name0:	.text "UD."	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52132					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc24	c3					.byte (("UD."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>cc25	50					.byte WordFlags	;wh_Flags
>cc26	03					.byte 3	;wh_CodeLength
>cc27	10					  .byte LinkDisplacement	; offset to previous nt
=$cc28					XtPtr1 ::= *
=52132					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc28	20 3f b4	jsr $b43f	UD_Dot:		jsr underflow_2 ; double number
.cc2b	20 34 cc	jsr $cc34			jsr print_ud
.cc2e	4c e4 cd	jmp $cde4			jmp Space
=9					CodeLen	.var *-XtPtr1
=$cc31					Here1 = *	; remember here
>cc26	09					.byte CodeLen	;patch wh_CodeLength
.cc31					print_u:
.cc31	20 fe b7	jsr $b7fe			jsr Zero			; convert to ud
.cc34					print_ud:
.cc34	20 f0 ab	jsr $abf0			jsr Less_Number_Sign		; <#	start formatting
.cc37	20 5f ac	jsr $ac5f			jsr Number_sign_s		; #S	do all digits
.cc3a	20 fc ab	jsr $abfc			jsr Number_sign_greater		; #>	end formatting
.cc3d	4c f0 cd	jmp $cdf0			jmp Type
>cc40	55 2e 52			Name0:	.text "U.R"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52163					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc43	43					.byte (("U.R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>cc44	10					.byte WordFlags	;wh_Flags
>cc45	03					.byte 3	;wh_CodeLength
>cc46	1f					  .byte LinkDisplacement	; offset to previous nt
=$cc47					XtPtr1 ::= *
=52163					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc47	20 e7 b3	jsr $b3e7	U_Dot_R:	jsr PopA		; save field width
.cc4a	48		pha		U_Dot_R_A:	pha
.cc4b	20 fe b7	jsr $b7fe			jsr Zero		; u>d  cvt u to ud
.cc4e	4c 5d cc	jmp $cc5d			jmp fmt_udr3
=10					CodeLen	.var *-XtPtr1
=$cc51					Here1 = *	; remember here
>cc45	0a					.byte CodeLen	;patch wh_CodeLength
>cc51	55 44 2e 52			Name0:	.text "UD.R"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52181					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc55	44					.byte (("UD.R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cc56	10					.byte WordFlags	;wh_Flags
>cc57	03					.byte 3	;wh_CodeLength
>cc58	12					  .byte LinkDisplacement	; offset to previous nt
=$cc59					XtPtr1 ::= *
=52181					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc59	20 e7 b3	jsr $b3e7	UD_Dot_R:	jsr PopA			; save field width
.cc5c	48		pha		UD_Dot_R_A:	pha
.cc5d	20 f0 ab	jsr $abf0	fmt_udr3:	jsr Less_Number_Sign		; start formatted
.cc60	20 5f ac	jsr $ac5f			jsr Number_sign_s		; do all digits
.cc63	20 fc ab	jsr $abfc	fmt_r:		jsr Number_sign_greater		; finish formatted
.cc66	68		pla				pla				; recover field width
.cc67	38		sec				sec				; do leading spaces
.cc68	f5 24		sbc $24,x			sbc DStack+0,x
.cc6a	90 06		bcc $cc72			bcc +
.cc6c	20 f0 b7	jsr $b7f0			jsr PushZA
.cc6f	20 ab c4	jsr $c4ab			jsr Spaces
.cc72	4c f0 cd	jmp $cdf0	+		jmp Type			; type formatted
=28					CodeLen	.var *-XtPtr1
=$cc75					Here1 = *	; remember here
>cc57	1c					.byte CodeLen	;patch wh_CodeLength
>cc75	2e 52				Name0:	.text ".R"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52215					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc77	42					.byte ((".R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>cc78	10					.byte WordFlags	;wh_Flags
>cc79	03					.byte 3	;wh_CodeLength
>cc7a	22					  .byte LinkDisplacement	; offset to previous nt
=$cc7b					XtPtr1 ::= *
=52215					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc7b	20 e7 b3	jsr $b3e7	Dot_R:		jsr PopA		; save field width
.cc7e	48		pha		Dot_R_A:	pha
.cc7f	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cc81	08		php				php
.cc82	20 da c6	jsr $c6da			jsr Abs
.cc85	20 fe b7	jsr $b7fe			jsr Zero		; u>d  cvt u to ud
.cc88	4c 9c cc	jmp $cc9c			jmp fmt_dr3
=16					CodeLen	.var *-XtPtr1
=$cc8b					Here1 = *	; remember here
>cc79	10					.byte CodeLen	;patch wh_CodeLength
>cc8b	44 2e 52			Name0:	.text "D.R"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52238					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc8e	43					.byte (("D.R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>cc8f	10					.byte WordFlags	;wh_Flags
>cc90	03					.byte 3	;wh_CodeLength
>cc91	17					  .byte LinkDisplacement	; offset to previous nt
=$cc92					XtPtr1 ::= *
=52238					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc92	20 e7 b3	jsr $b3e7	D_Dot_R:	jsr PopA		; save field width
.cc95	48		pha		D_Dot_R_A:	pha
.cc96	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cc98	08		php				php
.cc99	20 0d c7	jsr $c70d			jsr DAbs
.cc9c	20 f0 ab	jsr $abf0	fmt_dr3:	jsr Less_Number_Sign	; start formatted output
.cc9f	20 5f ac	jsr $ac5f			jsr Number_sign_s	; do all digits
.cca2	28		plp				plp			; do the sign
.cca3	20 79 ac	jsr $ac79			jsr Sign_P
.cca6	4c 63 cc	jmp $cc63			jmp fmt_r
=23					CodeLen	.var *-XtPtr1
=$cca9					Here1 = *	; remember here
>cc90	17					.byte CodeLen	;patch wh_CodeLength
>cca9	3f				Name0:	.text "?"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52266					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ccaa	e1					.byte (("?"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>ccab	10					.byte WordFlags	;wh_Flags
>ccac	03					.byte 3	;wh_CodeLength
>ccad	1c					  .byte LinkDisplacement	; offset to previous nt
=$ccae					XtPtr1 ::= *
=52266					WordListLink ::= Nt0 ; remember the nt of this word for later
.ccae					Question:
.ccae	20 b0 ce	jsr $ceb0			jsr Fetch
.ccb1	4c e7 cb	jmp $cbe7			jmp Dot
=6					CodeLen	.var *-XtPtr1
=$ccb4					Here1 = *	; remember here
>ccac	06					.byte CodeLen	;patch wh_CodeLength
>ccb4	32 44 75 70			Name0:	.text "2Dup"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52280					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ccb8	04					.byte (("2Dup"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>ccb9	40					.byte WordFlags	;wh_Flags
>ccba	03					.byte 3	;wh_CodeLength
>ccbb	0e					  .byte LinkDisplacement	; offset to previous nt
=$ccbc					XtPtr1 ::= *
=52280					WordListLink ::= Nt0 ; remember the nt of this word for later
.ccbc					Two_Dup:
.ccbc	20 3f b4	jsr $b43f			jsr underflow_2
.ccbf	ca		dex				dex
.ccc0	ca		dex				dex
.ccc1	ca		dex				dex
.ccc2	ca		dex				dex
.ccc3	b5 28		lda $28,x			lda DStack+4,x	; TOS
.ccc5	95 24		sta $24,x			sta DStack+0,x
.ccc7	b5 29		lda $29,x			lda DStack+5,x
.ccc9	95 25		sta $25,x			sta DStack+1,x
.cccb	b5 2a		lda $2a,x			lda DStack+6,x	; NOS
.cccd	95 26		sta $26,x			sta DStack+2,x
.cccf	b5 2b		lda $2b,x			lda DStack+7,x
.ccd1	95 27		sta $27,x			sta DStack+3,x
=23					CodeLen	.var *-XtPtr1
=$ccd3					Here1 = *	; remember here
>ccba	17					.byte CodeLen	;patch wh_CodeLength
.ccd3	60		rts				rts
>ccd4	54 75 63 6b			Name0:	.text "Tuck"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52312					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ccd8	64					.byte (("Tuck"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>ccd9	40					.byte WordFlags	;wh_Flags
>ccda	03					.byte 3	;wh_CodeLength
>ccdb	20					  .byte LinkDisplacement	; offset to previous nt
=$ccdc					XtPtr1 ::= *
=52312					WordListLink ::= Nt0 ; remember the nt of this word for later
.ccdc					Tuck:
.ccdc	20 3f b4	jsr $b43f			jsr underflow_2
.ccdf	ca		dex				dex
.cce0	ca		dex				dex
.cce1	b4 28		ldy $28,x			ldy DStack+4,x	; LSB
.cce3	b5 26		lda $26,x			lda DStack+2,x
.cce5	95 28		sta $28,x			sta DStack+4,x
.cce7	94 26		sty $26,x			sty DStack+2,x
.cce9	95 24		sta $24,x			sta DStack+0,x
.cceb	b4 29		ldy $29,x			ldy DStack+5,x	; MSB
.cced	b5 27		lda $27,x			lda DStack+3,x
.ccef	95 29		sta $29,x			sta DStack+5,x
.ccf1	94 27		sty $27,x			sty DStack+3,x
.ccf3	95 25		sta $25,x			sta DStack+1,x
=25					CodeLen	.var *-XtPtr1
=$ccf5					Here1 = *	; remember here
>ccda	19					.byte CodeLen	;patch wh_CodeLength
.ccf5	60		rts				rts
>ccf6	43 2c				Name0:	.text "C,"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52344					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ccf8	82					.byte (("C,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>ccf9	10					.byte WordFlags	;wh_Flags
>ccfa	03					.byte 3	;wh_CodeLength
>ccfb	20					  .byte LinkDisplacement	; offset to previous nt
=$ccfc					XtPtr1 ::= *
=52344					WordListLink ::= Nt0 ; remember the nt of this word for later
.ccfc	20 e7 b3	jsr $b3e7	C_Comma:	jsr PopA	; pop c, with underflow check
.ccff					C_Comma_A:
.ccff	94 23		sty $23,x			sty DStack-1,x	; save Y
.cd01	a0 00		ldy #$00			ldy #0		; store A
.cd03	91 00		sta ($00),y			sta (cp),y
.cd05	e6 00		inc $00				inc cp+0	; increment cp
.cd07	d0 02		bne $cd0b			bne +
.cd09	e6 01		inc $01				inc cp+1
.cd0b					+
.cd0b	b4 23		ldy $23,x			ldy DStack-1,x	; restore Y
=17					CodeLen	.var *-XtPtr1
=$cd0d					Here1 = *	; remember here
>ccfa	11					.byte CodeLen	;patch wh_CodeLength
.cd0d	60		rts				rts
>cd0e	2c				Name0:	.text ","	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52367					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd0f	81					.byte ((","[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>cd10	10					.byte WordFlags	;wh_Flags
>cd11	03					.byte 3	;wh_CodeLength
>cd12	17					  .byte LinkDisplacement	; offset to previous nt
=$cd13					XtPtr1 ::= *
=52367					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd13	20 02 b4	jsr $b402	Comma:		jsr PopYA	; pop n, with underflow check
.cd16					Comma_YA:
.cd16	20 ff cc	jsr $ccff			jsr C_Comma_A	; compile LSB
.cd19	98		tya				tya		; compile MSB
.cd1a	4c ff cc	jmp $ccff			jmp C_Comma_A
=10					CodeLen	.var *-XtPtr1
=$cd1d					Here1 = *	; remember here
>cd11	0a					.byte CodeLen	;patch wh_CodeLength
>cd1d	32 2c				Name0:	.text "2,"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52383					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd1f	82					.byte (("2,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>cd20	10					.byte WordFlags	;wh_Flags
>cd21	03					.byte 3	;wh_CodeLength
>cd22	10					  .byte LinkDisplacement	; offset to previous nt
=$cd23					XtPtr1 ::= *
=52383					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd23	20 13 cd	jsr $cd13	Two_Comma:	jsr Comma
.cd26	4c 13 cd	jmp $cd13			jmp Comma
=6					CodeLen	.var *-XtPtr1
=$cd29					Here1 = *	; remember here
>cd21	06					.byte CodeLen	;patch wh_CodeLength
.cd29	a9 e8		lda #$e8	Drop_Comma:	lda #$e8	;inx
.cd2b	a8		tay				tay
.cd2c	d0 e8		bne $cd16			bne Comma_YA
>cd2e	4a 73 72 2c			Name0:	.text "Jsr,"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52402					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd32	84					.byte (("Jsr,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cd33	10					.byte WordFlags	;wh_Flags
>cd34	03					.byte 3	;wh_CodeLength
>cd35	13					  .byte LinkDisplacement	; offset to previous nt
=$cd36					XtPtr1 ::= *
=52402					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd36	20 02 b4	jsr $b402	Jsr_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cd39	20 c1 b7	jsr $b7c1	Jsr_Comma_YA:	jsr PushYA	; push addr
.cd3c	a9 20		lda #$20			lda #$20	; JSR abs opcode
.cd3e	20 ff cc	jsr $ccff	Jsr_Comma_3:	jsr C_Comma_A
.cd41	4c 13 cd	jmp $cd13			jmp Comma	; compile addr
=14					CodeLen	.var *-XtPtr1
=$cd44					Here1 = *	; remember here
>cd34	0e					.byte CodeLen	;patch wh_CodeLength
>cd44	4a 6d 70 2c			Name0:	.text "Jmp,"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52424					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd48	84					.byte (("Jmp,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cd49	10					.byte WordFlags	;wh_Flags
>cd4a	03					.byte 3	;wh_CodeLength
>cd4b	16					  .byte LinkDisplacement	; offset to previous nt
=$cd4c					XtPtr1 ::= *
=52424					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd4c	20 02 b4	jsr $b402	Jmp_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cd4f	20 c1 b7	jsr $b7c1	Jmp_Comma_YA:	jsr PushYA	; push addr
.cd52	a9 4c		lda #$4c			lda #$4c	; JMP abs opcode
.cd54	d0 e8		bne $cd3e			bne Jsr_Comma_3
.cd56					Jmp_Comma_NT_YA:
.cd56	20 c1 b7	jsr $b7c1			jsr PushYA
.cd59	20 b5 bd	jsr $bdb5			jsr Name_To_Int	; convert nt to xt
.cd5c	4c 4c cd	jmp $cd4c			jmp Jmp_Comma
=19					CodeLen	.var *-XtPtr1
=$cd5f					Here1 = *	; remember here
>cd4a	13					.byte CodeLen	;patch wh_CodeLength
>cd5f	43 40				Name0:	.text "C@"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52449					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd61	02					.byte (("C@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>cd62	40					.byte WordFlags	;wh_Flags
>cd63	03					.byte 3	;wh_CodeLength
>cd64	19					  .byte LinkDisplacement	; offset to previous nt
=$cd65					XtPtr1 ::= *
=52449					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd65	20 2b b4	jsr $b42b	C_Fetch:	jsr underflow_1
.cd68	a1 24		lda ($24,x)			lda (DStack+0,x)
.cd6a	95 24		sta $24,x			sta DStack+0,x
.cd6c	a9 00		lda #$00			lda #0
.cd6e	95 25		sta $25,x			sta DStack+1,x	; zero MSB
=11					CodeLen	.var *-XtPtr1
=$cd70					Here1 = *	; remember here
>cd63	0b					.byte CodeLen	;patch wh_CodeLength
.cd70	60		rts				rts
>cd71	43 21				Name0:	.text "C!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52467					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd73	22					.byte (("C!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cd74	40					.byte WordFlags	;wh_Flags
>cd75	03					.byte 3	;wh_CodeLength
>cd76	12					  .byte LinkDisplacement	; offset to previous nt
=$cd77					XtPtr1 ::= *
=52467					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd77	20 3f b4	jsr $b43f	C_Store:	jsr underflow_2
.cd7a	b5 26		lda $26,x			lda DStack+2,x
.cd7c	81 24		sta ($24,x)			sta (DStack+0,x)
.cd7e	e8		inx				inx
.cd7f	e8		inx				inx
.cd80	e8		inx				inx
.cd81	e8		inx				inx
=11					CodeLen	.var *-XtPtr1
=$cd82					Here1 = *	; remember here
>cd75	0b					.byte CodeLen	;patch wh_CodeLength
.cd82	60		rts				rts
>cd83	31 2b 21			Name0:	.text "1+!"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52486					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd86	23					.byte (("1+!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cd87	00					.byte WordFlags	;wh_Flags
>cd88	03					.byte 3	;wh_CodeLength
>cd89	13					  .byte LinkDisplacement	; offset to previous nt
=$cd8a					XtPtr1 ::= *
=52486					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd8a					OnePlusStore:
.cd8a	a9 01		lda #$01			lda #1
.cd8c	18		clc				clc
.cd8d	61 24		adc ($24,x)			adc (DStack+0,x)	; increment lo byte
.cd8f	81 24		sta ($24,x)			sta (DStack+0,x)
.cd91	90 0c		bcc $cd9f			bcc _7			; if carry
.cd93	f6 24		inc $24,x			inc DStack+0,x		;   point at hi byte
.cd95	d0 02		bne $cd99			bne +
.cd97	f6 25		inc $25,x			inc DStack+1,x
.cd99					+
.cd99	a1 24		lda ($24,x)			lda (DStack+0,x)	;   increment hi byte
.cd9b	69 00		adc #$00			adc #0
.cd9d	81 24		sta ($24,x)			sta (Dstack+0,x)
.cd9f					_7:
.cd9f	e8		inx				inx			; Drop addr
.cda0	e8		inx				inx
=23					CodeLen	.var *-XtPtr1
=$cda1					Here1 = *	; remember here
>cd88	17					.byte CodeLen	;patch wh_CodeLength
.cda1	60		rts				rts
>cda2	2b 21				Name0:	.text "+!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52516					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cda4	22					.byte (("+!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>cda5	50					.byte WordFlags	;wh_Flags
>cda6	03					.byte 3	;wh_CodeLength
>cda7	1e					  .byte LinkDisplacement	; offset to previous nt
=$cda8					XtPtr1 ::= *
=52516					WordListLink ::= Nt0 ; remember the nt of this word for later
.cda8					Plus_store:
.cda8	20 3f b4	jsr $b43f			jsr underflow_2
.cdab	18		clc				clc
.cdac	b5 26		lda $26,x			lda DStack+2,x
.cdae	61 24		adc ($24,x)			adc (DStack+0,x)
.cdb0	81 24		sta ($24,x)			sta (DStack+0,x)
.cdb2	f6 24		inc $24,x			inc DStack+0,x
.cdb4	d0 02		bne $cdb8			bne +
.cdb6	f6 25		inc $25,x			inc DStack+1,x
.cdb8					+
.cdb8	b5 27		lda $27,x			lda DStack+3,x
.cdba	61 24		adc ($24,x)			adc (DStack+0,x)
.cdbc	81 24		sta ($24,x)			sta (DStack+0,x)
.cdbe	4c 4e c5	jmp $c54e			jmp Two_Drop
=25					CodeLen	.var *-XtPtr1
=$cdc1					Here1 = *	; remember here
>cda6	19					.byte CodeLen	;patch wh_CodeLength
>cdc1	42 65 6c 6c			Name0:	.text "Bell"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52549					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cdc5	84					.byte (("Bell"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>cdc6	10					.byte WordFlags	;wh_Flags
>cdc7	03					.byte 3	;wh_CodeLength
>cdc8	21					  .byte LinkDisplacement	; offset to previous nt
=$cdc9					XtPtr1 ::= *
=52549					WordListLink ::= Nt0 ; remember the nt of this word for later
.cdc9	a9 07		lda #$07	Bell:		lda #7		; ASCII value for BELL
.cdcb	d0 0b		bne $cdd8			bne Emit_A
=4					CodeLen	.var *-XtPtr1
=$cdcd					Here1 = *	; remember here
>cdc7	04					.byte CodeLen	;patch wh_CodeLength
>cdcd	45 6d 69 74			Name0:	.text "Emit"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52561					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cdd1	84					.byte (("Emit"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cdd2	10					.byte WordFlags	;wh_Flags
>cdd3	03					.byte 3	;wh_CodeLength
>cdd4	0c					  .byte LinkDisplacement	; offset to previous nt
=$cdd5					XtPtr1 ::= *
=52561					WordListLink ::= Nt0 ; remember the nt of this word for later
.cdd5	20 e7 b3	jsr $b3e7	Emit:		jsr PopA		; pop char, with underflow check
.cdd8					Emit_A:
.cdd8	6c 06 03	jmp ($0306)			jmp (output)		; JSR/RTS
=6					CodeLen	.var *-XtPtr1
=$cddb					Here1 = *	; remember here
>cdd3	06					.byte CodeLen	;patch wh_CodeLength
>cddb	53 70 61 63 65			Name0:	.text "Space"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=52576					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cde0	a5					.byte (("Space"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>cde1	10					.byte WordFlags	;wh_Flags
>cde2	03					.byte 3	;wh_CodeLength
>cde3	0f					  .byte LinkDisplacement	; offset to previous nt
=$cde4					XtPtr1 ::= *
=52576					WordListLink ::= Nt0 ; remember the nt of this word for later
.cde4	a9 20		lda #$20	Space:		lda #AscSP
.cde6	d0 f0		bne $cdd8			bne Emit_A
=4					CodeLen	.var *-XtPtr1
=$cde8					Here1 = *	; remember here
>cde2	04					.byte CodeLen	;patch wh_CodeLength
>cde8	54 79 70 65			Name0:	.text "Type"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52588					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cdec	a4					.byte (("Type"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cded	50					.byte WordFlags	;wh_Flags
>cdee	03					.byte 3	;wh_CodeLength
>cdef	0c					  .byte LinkDisplacement	; offset to previous nt
=$cdf0					XtPtr1 ::= *
=52588					WordListLink ::= Nt0 ; remember the nt of this word for later
.cdf0					Type:
.cdf0	20 3f b4	jsr $b43f			jsr underflow_2
.cdf3	4c 00 ce	jmp $ce00			jmp _test
.cdf6					_loop:
.cdf6	d6 24		dec $24,x			dec DStack+0,x		; finish length decrement
.cdf8	a1 26		lda ($26,x)			lda (DStack+2,x)	; Send the current character
.cdfa	20 d8 cd	jsr $cdd8			jsr Emit_A
.cdfd	20 7c ca	jsr $ca7c			jsr NOS_One_Plus	; increment address
.ce00	b5 24		lda $24,x	_test:		lda DStack+0,x		; decrement length & test for <0
.ce02	d0 f2		bne $cdf6			bne _loop
.ce04	d6 25		dec $25,x			dec DStack+1,x
.ce06	10 ee		bpl $cdf6			bpl _loop
.ce08	4c 4e c5	jmp $c54e			jmp Two_drop
=27					CodeLen	.var *-XtPtr1
=$ce0b					Here1 = *	; remember here
>cdee	1b					.byte CodeLen	;patch wh_CodeLength
.ce0b					Print_ASCIIZ_YA_no_lf:
.ce0b	85 18		sta $18				sta tmp3+0		; save string address
.ce0d	84 19		sty $19				sty tmp3+1
.ce0f	a0 00		ldy #$00			ldy #0
.ce11					Print_ASCIIZ_tmp3_no_lf:
.ce11	b1 18		lda ($18),y			lda (tmp3),y
.ce13	f0 06		beq $ce1b			beq _done		; end of string?
.ce15	20 d8 cd	jsr $cdd8			jsr emit_a
.ce18	c8		iny				iny
.ce19	d0 f6		bne $ce11			bne Print_ASCIIZ_tmp3_no_lf
.ce1b					_done:
.ce1b	60		rts				rts
.ce1c					Print_ASCIIZ_YA:
.ce1c	20 0b ce	jsr $ce0b			jsr Print_ASCIIZ_YA_no_lf
.ce1f	4c 7c ab	jmp $ab7c	                jmp CR
>ce22	45 78 65 63 75 74 65		Name0:	.text "Execute"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=52649					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce29	a7					.byte (("Execute"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=61					LinkDisplacement = Nt0-WordListLink
>ce2a	10					.byte WordFlags	;wh_Flags
>ce2b	03					.byte 3	;wh_CodeLength
>ce2c	3d					  .byte LinkDisplacement	; offset to previous nt
=$ce2d					XtPtr1 ::= *
=52649					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce2d					Execute:
.ce2d	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.ce2f	b0 2e		bcs $ce5f		bcs Throw_Stack_03
.ce31	b5 25		lda $25,x			lda DStack+1,x	; addr for RTI
.ce33	48		pha				pha
.ce34	b5 24		lda $24,x			lda DStack+0,x
.ce36	48		pha				pha
.ce37	e8		inx				inx		; drop addr
.ce38	e8		inx				inx
.ce39	08		php				php		; flags for RTI
.ce3a	40		rti				rti
=14					CodeLen	.var *-XtPtr1
=$ce3b					Here1 = *	; remember here
>ce2b	0e					.byte CodeLen	;patch wh_CodeLength
>ce3b	32 52 6f 74			Name0:	.text "2Rot"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52671					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce3f	84					.byte (("2Rot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>ce40	10					.byte WordFlags	;wh_Flags
>ce41	03					.byte 3	;wh_CodeLength
>ce42	16					  .byte LinkDisplacement	; offset to previous nt
=$ce43					XtPtr1 ::= *
=52671					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce43					TwoRot:
.ce43	e0 1d		cpx #$1d		cpx #-2*6+DStack0+1
.ce45	b0 18		bcs $ce5f		bcs Throw_Stack_03
.ce47	86 14		stx $14				stx tmp1+0
.ce49	e8		inx				inx		; do 4 times
.ce4a	e8		inx				inx
.ce4b	e8		inx				inx
.ce4c	e8		inx				inx
.ce4d	ca		dex		-		dex
.ce4e	b4 2c		ldy $2c,x			ldy DStack+8,x	; do a byte
.ce50	b5 28		lda $28,x			lda DStack+4,x
.ce52	95 2c		sta $2c,x			sta DStack+8,x
.ce54	b5 24		lda $24,x			lda DStack+0,x
.ce56	95 28		sta $28,x			sta DStack+4,x
.ce58	94 24		sty $24,x			sty DStack+0,x
.ce5a	e4 14		cpx $14				cpx tmp1+0
.ce5c	d0 ef		bne $ce4d			bne -
=27					CodeLen	.var *-XtPtr1
=$ce5e					Here1 = *	; remember here
>ce41	1b					.byte CodeLen	;patch wh_CodeLength
.ce5e	60		rts				rts
.ce5f	4c 4e b4	jmp $b44e	Throw_Stack_03: jmp Throw_Stack
>ce62	52 6f 74			Name0:	.text "Rot"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52709					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce65	83					.byte (("Rot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>ce66	10					.byte WordFlags	;wh_Flags
>ce67	03					.byte 3	;wh_CodeLength
>ce68	26					  .byte LinkDisplacement	; offset to previous nt
=$ce69					XtPtr1 ::= *
=52709					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce69					Rot:
.ce69	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ce6b	b0 f2		bcs $ce5f		bcs Throw_Stack_03
.ce6d	b4 29		ldy $29,x			ldy DStack+5,x	; do MSB
.ce6f	b5 27		lda $27,x			lda DStack+3,x
.ce71	95 29		sta $29,x			sta DStack+5,x
.ce73	b5 25		lda $25,x			lda DStack+1,x
.ce75	95 27		sta $27,x			sta DStack+3,x
.ce77	94 25		sty $25,x			sty DStack+1,x
.ce79	b4 28		ldy $28,x			ldy DStack+4,x	; do LSB
.ce7b	b5 26		lda $26,x			lda DStack+2,x
.ce7d	95 28		sta $28,x			sta DStack+4,x
.ce7f	b5 24		lda $24,x			lda DStack+0,x
.ce81	95 26		sta $26,x			sta DStack+2,x
.ce83	94 24		sty $24,x			sty DStack+0,x
=28					CodeLen	.var *-XtPtr1
=$ce85					Here1 = *	; remember here
>ce67	1c					.byte CodeLen	;patch wh_CodeLength
.ce85	60		rts				rts
>ce86	2d 52 6f 74			Name0:	.text "-Rot"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52746					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce8a	84					.byte (("-Rot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>ce8b	10					.byte WordFlags	;wh_Flags
>ce8c	03					.byte 3	;wh_CodeLength
>ce8d	25					  .byte LinkDisplacement	; offset to previous nt
=$ce8e					XtPtr1 ::= *
=52746					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce8e					Not_Rot:
.ce8e	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ce90	b0 cd		bcs $ce5f		bcs Throw_Stack_03
.ce92	b4 25		ldy $25,x			ldy DStack+1,x	; do MSB
.ce94	b5 27		lda $27,x			lda DStack+3,x
.ce96	95 25		sta $25,x			sta DStack+1,x
.ce98	b5 29		lda $29,x			lda DStack+5,x
.ce9a	95 27		sta $27,x			sta DStack+3,x
.ce9c	94 29		sty $29,x			sty DStack+5,x
.ce9e	b4 24		ldy $24,x			ldy DStack+0,x	; do LSB
.cea0	b5 26		lda $26,x			lda DStack+2,x
.cea2	95 24		sta $24,x			sta DStack+0,x
.cea4	b5 28		lda $28,x			lda DStack+4,x
.cea6	95 26		sta $26,x			sta DStack+2,x
.cea8	94 28		sty $28,x			sty DStack+4,x
=28					CodeLen	.var *-XtPtr1
=$ceaa					Here1 = *	; remember here
>ce8c	1c					.byte CodeLen	;patch wh_CodeLength
.ceaa	60		rts				rts
>ceab	40				Name0:	.text "@"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52780					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ceac	01					.byte (("@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>cead	10					.byte WordFlags	;wh_Flags
>ceae	03					.byte 3	;wh_CodeLength
>ceaf	22					  .byte LinkDisplacement	; offset to previous nt
=$ceb0					XtPtr1 ::= *
=52780					WordListLink ::= Nt0 ; remember the nt of this word for later
.ceb0					Fetch:
.ceb0	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.ceb2	b0 ab		bcs $ce5f		bcs Throw_Stack_03
.ceb4	a1 24		lda ($24,x)			lda (DStack+0,x)		; LSB
.ceb6	a8		tay				tay
.ceb7	f6 24		inc $24,x			inc DStack+0,x
.ceb9	d0 02		bne $cebd			bne +
.cebb	f6 25		inc $25,x			inc DStack+1,x
.cebd					+
.cebd	a1 24		lda ($24,x)			lda (DStack+0,x)		; MSB
.cebf	95 25		sta $25,x			sta DStack+1,x
.cec1	94 24		sty $24,x			sty DStack+0,x
=19					CodeLen	.var *-XtPtr1
=$cec3					Here1 = *	; remember here
>ceae	13					.byte CodeLen	;patch wh_CodeLength
.cec3	60		rts				rts
>cec4	21				Name0:	.text "!"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52805					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cec5	21					.byte (("!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>cec6	10					.byte WordFlags	;wh_Flags
>cec7	03					.byte 3	;wh_CodeLength
>cec8	19					  .byte LinkDisplacement	; offset to previous nt
=$cec9					XtPtr1 ::= *
=52805					WordListLink ::= Nt0 ; remember the nt of this word for later
.cec9					Store:
.cec9	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.cecb	b0 92		bcs $ce5f		bcs Throw_Stack_03
.cecd	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cecf	81 24		sta ($24,x)			sta (DStack+0,x)
.ced1	f6 24		inc $24,x			inc DStack+0,x
.ced3	d0 02		bne $ced7			bne +
.ced5	f6 25		inc $25,x			inc DStack+1,x
.ced7					+
.ced7	b5 27		lda $27,x			lda DStack+3,x	; MSB
.ced9	81 24		sta ($24,x)			sta (DStack+0,x)
.cedb	e8		inx				inx		; 2Drop
.cedc	e8		inx				inx
.cedd	e8		inx				inx
.cede	e8		inx				inx
=22					CodeLen	.var *-XtPtr1
=$cedf					Here1 = *	; remember here
>cec7	16					.byte CodeLen	;patch wh_CodeLength
.cedf	60		rts				rts
>cee0	30 21				Name0:	.text "0!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52834					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cee2	22					.byte (("0!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>cee3	00					.byte WordFlags	;wh_Flags
>cee4	03					.byte 3	;wh_CodeLength
>cee5	1d					  .byte LinkDisplacement	; offset to previous nt
=$cee6					XtPtr1 ::= *
=52834					WordListLink ::= Nt0 ; remember the nt of this word for later
.cee6	20 0d b4	jsr $b40d	ZStore:		jsr PopTmp1	; pop addr, check underflow
.cee9	a9 00		lda #$00			lda #0
.ceeb	a8		tay				tay		; clear LSB
.ceec	91 14		sta ($14),y			sta (tmp1),y
.ceee	c8		iny				iny		; clear MSB
.ceef	91 14		sta ($14),y			sta (tmp1),y
=11					CodeLen	.var *-XtPtr1
=$cef1					Here1 = *	; remember here
>cee4	0b					.byte CodeLen	;patch wh_CodeLength
.cef1	60		rts				rts
>cef2	3e 52				Name0:	.text ">R"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52852					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cef4	42					.byte ((">R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=52					WordFlags ::= CO+ST	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cef5	34					.byte WordFlags	;wh_Flags
>cef6	03					.byte 3	;wh_CodeLength
>cef7	12					  .byte LinkDisplacement	; offset to previous nt
=$cef8					XtPtr1 ::= *
=52852					WordListLink ::= Nt0 ; remember the nt of this word for later
.cef8					To_R:
.cef8	68		pla				pla		; move the RTS address out of the way
.cef9	85 1c		sta $1c				sta tmp5+0
.cefb	68		pla				pla
.cefc	85 1d		sta $1d				sta tmp5+1
.cefe	20 2b b4	jsr $b42b			jsr underflow_1
.cf01	b5 25		lda $25,x			lda DStack+1,x	; MSB
.cf03	48		pha				pha
.cf04	b5 24		lda $24,x			lda DStack+0,x	; LSB
.cf06	48		pha				pha
.cf07	e8		inx				inx
.cf08	e8		inx				inx
.cf09	a5 1d		lda $1d				lda tmp5+1	; move the RTS address back in
.cf0b	48		pha				pha
.cf0c	a5 1c		lda $1c				lda tmp5+0
.cf0e	48		pha				pha
=23					CodeLen	.var *-XtPtr1
=$cf0f					Here1 = *	; remember here
>cef6	17					.byte CodeLen	;patch wh_CodeLength
.cf0f	60		rts				rts
>cf10	52 3e				Name0:	.text "R>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52882					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf12	c2					.byte (("R>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=52					WordFlags ::= CO+ST	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>cf13	34					.byte WordFlags	;wh_Flags
>cf14	03					.byte 3	;wh_CodeLength
>cf15	1e					  .byte LinkDisplacement	; offset to previous nt
=$cf16					XtPtr1 ::= *
=52882					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf16					R_From:
.cf16	68		pla				pla		; Move the RTS addr out of the way
.cf17	85 1c		sta $1c				sta tmp5+0
.cf19	68		pla				pla
.cf1a	85 1d		sta $1d				sta tmp5+1
.cf1c	ca		dex				dex
.cf1d	ca		dex				dex
.cf1e	68		pla				pla		; LSB
.cf1f	95 24		sta $24,x			sta DStack+0,x
.cf21	68		pla				pla		; MSB
.cf22	95 25		sta $25,x			sta DStack+1,x
.cf24	a5 1d		lda $1d				lda tmp5+1	; Restore the RTS addr
.cf26	48		pha				pha
.cf27	a5 1c		lda $1c				lda tmp5+0
.cf29	48		pha				pha
=20					CodeLen	.var *-XtPtr1
=$cf2a					Here1 = *	; remember here
>cf14	14					.byte CodeLen	;patch wh_CodeLength
.cf2a	60		rts				rts
>cf2b	52 40				Name0:	.text "R@"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52909					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf2d	02					.byte (("R@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=20					WordFlags ::= NN+CO	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>cf2e	14					.byte WordFlags	;wh_Flags
>cf2f	03					.byte 3	;wh_CodeLength
>cf30	1b					  .byte LinkDisplacement	; offset to previous nt
=$cf31					XtPtr1 ::= *
=52909					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf31					R_Fetch:
.cf31	86 14		stx $14				stx tmp1	; save data stack index
.cf33	ba		tsx				tsx		; X= return stack index
.cf34	bd 03 01	lda $0103,x			lda RStack+3,x
.cf37	bc 04 01	ldy $0104,x			ldy RStack+4,x
.cf3a	a6 14		ldx $14				ldx tmp1	; restore data stack index
.cf3c	4c c1 b7	jmp $b7c1			jmp PushYA
=14					CodeLen	.var *-XtPtr1
=$cf3f					Here1 = *	; remember here
>cf2f	0e					.byte CodeLen	;patch wh_CodeLength
>cf3f	4f 76 65 72			Name0:	.text "Over"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52931					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf43	44					.byte (("Over"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cf44	40					.byte WordFlags	;wh_Flags
>cf45	03					.byte 3	;wh_CodeLength
>cf46	16					  .byte LinkDisplacement	; offset to previous nt
=$cf47					XtPtr1 ::= *
=52931					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf47					Over:
.cf47	20 3f b4	jsr $b43f			jsr underflow_2
.cf4a	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cf4c	b4 27		ldy $27,x			ldy DStack+3,x	; MSB
.cf4e	ca		dex				dex		; PushYA
.cf4f	ca		dex				dex
.cf50	95 24		sta $24,x			sta DStack+0,x
.cf52	94 25		sty $25,x			sty DStack+1,x
=13					CodeLen	.var *-XtPtr1
=$cf54					Here1 = *	; remember here
>cf45	0d					.byte CodeLen	;patch wh_CodeLength
.cf54	60		rts				rts
>cf55	3f 44 75 70			Name0:	.text "?Dup"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52953					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf59	04					.byte (("?Dup"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cf5a	50					.byte WordFlags	;wh_Flags
>cf5b	03					.byte 3	;wh_CodeLength
>cf5c	16					  .byte LinkDisplacement	; offset to previous nt
=$cf5d					XtPtr1 ::= *
=52953					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf5d					Question_Dup:
.cf5d	20 2b b4	jsr $b42b			jsr underflow_1
.cf60	b5 24		lda $24,x			lda DStack+0,x	; Check if TOS is zero
.cf62	15 25		ora $25,x			ora DStack+1,x
.cf64	d0 0b		bne $cf71			bne Dup_NoUf
=9					CodeLen	.var *-XtPtr1
=$cf66					Here1 = *	; remember here
>cf5b	09					.byte CodeLen	;patch wh_CodeLength
.cf66	60		rts				rts
>cf67	44 75 70			Name0:	.text "Dup"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52970					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf6a	03					.byte (("Dup"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>cf6b	40					.byte WordFlags	;wh_Flags
>cf6c	03					.byte 3	;wh_CodeLength
>cf6d	11					  .byte LinkDisplacement	; offset to previous nt
=$cf6e					XtPtr1 ::= *
=52970					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf6e					Dup:
.cf6e	20 2b b4	jsr $b42b			jsr underflow_1
.cf71	b5 24		lda $24,x	Dup_NoUf:	lda DStack+0,x	; LSB
.cf73	b4 25		ldy $25,x			ldy DStack+1,x	; MSB
.cf75	ca		dex				dex
.cf76	ca		dex				dex
.cf77	95 24		sta $24,x			sta DStack+0,x
.cf79	94 25		sty $25,x			sty DStack+1,x
=13					CodeLen	.var *-XtPtr1
=$cf7b					Here1 = *	; remember here
>cf6c	0d					.byte CodeLen	;patch wh_CodeLength
.cf7b	60		rts				rts
.cf7c					PushAY:
.cf7c	ca		dex				dex
.cf7d	ca		dex				dex
.cf7e	94 24		sty $24,x			sty DStack+0,x
.cf80	95 25		sta $25,x			sta DStack+1,x
.cf82	60		rts				rts
>cf83	53 77 61 70			Name0:	.text "Swap"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52999					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf87	04					.byte (("Swap"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>cf88	40					.byte WordFlags	;wh_Flags
>cf89	03					.byte 3	;wh_CodeLength
>cf8a	1d					  .byte LinkDisplacement	; offset to previous nt
=$cf8b					XtPtr1 ::= *
=52999					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf8b					Swap:
.cf8b	20 3f b4	jsr $b43f			jsr underflow_2
.cf8e	b5 24		lda $24,x			lda DStack+0,x	; do LSB
.cf90	b4 26		ldy $26,x			ldy DStack+2,x
.cf92	95 26		sta $26,x			sta DStack+2,x
.cf94	94 24		sty $24,x			sty DStack+0,x
.cf96	b5 25		lda $25,x			lda DStack+1,x	; do MSB
.cf98	b4 27		ldy $27,x			ldy DStack+3,x
.cf9a	95 27		sta $27,x			sta DStack+3,x
.cf9c	94 25		sty $25,x			sty DStack+1,x
=19					CodeLen	.var *-XtPtr1
=$cf9e					Here1 = *	; remember here
>cf89	13					.byte CodeLen	;patch wh_CodeLength
.cf9e	60		rts				rts
>cf9f	44 72 6f 70			Name0:	.text "Drop"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=53027					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfa3	04					.byte (("Drop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>cfa4	40					.byte WordFlags	;wh_Flags
>cfa5	03					.byte 3	;wh_CodeLength
>cfa6	1c					  .byte LinkDisplacement	; offset to previous nt
=$cfa7					XtPtr1 ::= *
=53027					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfa7					Drop:
.cfa7	20 2b b4	jsr $b42b			jsr underflow_1
.cfaa	e8		inx				inx
.cfab	e8		inx				inx
=5					CodeLen	.var *-XtPtr1
=$cfac					Here1 = *	; remember here
>cfa5	05					.byte CodeLen	;patch wh_CodeLength
.cfac	60		rts				rts
=53027					forth_dictionary_start = WordListLink ; END of FORTH-WORDLIST
=0					WordListLink .var 0
>cfad	57 6f 72 64 73			Name0:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53042					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfb2	65					.byte (("Words"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=53042					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>cfb3	11					.byte WordFlags	;wh_Flags
>cfb4	03					.byte 3	;wh_CodeLength
>cfb5	00 00					  .word WordListLink
=$cfb7					XtPtr1 ::= *
=53042					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfb7	4c cf aa	jmp $aacf			jmp Words
=3					CodeLen	.var *-XtPtr1
=$cfba					Here1 = *	; remember here
>cfb4	03					.byte CodeLen	;patch wh_CodeLength
>cfba	46 6f 72 74 68 2d 57 6f		Name0:	.text "Forth-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>cfc2	72 64 6c 69 73 74
=14					NameLength = *-Name0
=53064					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfc8	8e					.byte (("Forth-Wordlist"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cfc9	10					.byte WordFlags	;wh_Flags
>cfca	03					.byte 3	;wh_CodeLength
>cfcb	16					  .byte LinkDisplacement	; offset to previous nt
=$cfcc					XtPtr1 ::= *
=53064					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfcc	4c 06 a0	jmp $a006			jmp Forth_WordList
=3					CodeLen	.var *-XtPtr1
=$cfcf					Here1 = *	; remember here
>cfca	03					.byte CodeLen	;patch wh_CodeLength
>cfcf	46 6f 72 74 68			Name0:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53076					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfd4	05					.byte (("Forth"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cfd5	10					.byte WordFlags	;wh_Flags
>cfd6	03					.byte 3	;wh_CodeLength
>cfd7	0c					  .byte LinkDisplacement	; offset to previous nt
=$cfd8					XtPtr1 ::= *
=53076					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfd8	4c 04 a1	jmp $a104			jmp Forth
=3					CodeLen	.var *-XtPtr1
=$cfdb					Here1 = *	; remember here
>cfd6	03					.byte CodeLen	;patch wh_CodeLength
>cfdb	53 65 74 2d 4f 72 64 65		Name0:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>cfe3	72
=9					NameLength = *-Name0
=53092					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfe4	49					.byte (("Set-Order"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>cfe5	10					.byte WordFlags	;wh_Flags
>cfe6	03					.byte 3	;wh_CodeLength
>cfe7	10					  .byte LinkDisplacement	; offset to previous nt
=$cfe8					XtPtr1 ::= *
=53092					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfe8	4c 76 a1	jmp $a176			jmp Set_Order
=3					CodeLen	.var *-XtPtr1
=$cfeb					Here1 = *	; remember here
>cfe6	03					.byte CodeLen	;patch wh_CodeLength
=53092					root_dictionary_start = WordListLink ; END of ROOT-WORDLIST
=0					WordListLink .var 0
.cfeb					asm_r:
.cfeb	68		pla			pla		; pop RTS addr
.cfec	a8		tay			tay
.cfed	68		pla			pla
.cfee	20 29 d0	jsr $d029		jsr asm_op	; compile opcode
.cff1	b5 25		lda $25,x		lda DStack+1,x	; check range
.cff3	f0 09		beq $cffe		beq _plus
.cff5	c9 ff		cmp #$ff		cmp #$ff
.cff7	f0 0b		beq $d004		beq _minus
.cff9	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cffb	4c 87 b4	jmp $b487		jmp ThrowA
.cffe	b5 24		lda $24,x	_plus:	lda DStack+0,x
.d000	30 f7		bmi $cff9		bmi _err
.d002	10 04		bpl $d008		bpl _store
.d004	b5 24		lda $24,x	_minus:	lda DStack+0,x
.d006	10 f1		bpl $cff9		bpl _err
.d008	4c fc cc	jmp $ccfc	_store:	jmp C_Comma
.d00b					asm_1:
.d00b	68		pla			pla		; pop RTS addr
.d00c	a8		tay			tay
.d00d	68		pla			pla
.d00e	20 29 d0	jsr $d029		jsr asm_op	; compile opcode
.d011	b5 25		lda $25,x		lda DStack+1,x	; compile operand
.d013	f0 00		beq $d015		beq _store	;   unsigned byte?
.d015	4c fc cc	jmp $ccfc	_store:	jmp C_Comma
.d018	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.d01a	4c 87 b4	jmp $b487		jmp ThrowA
.d01d					asm_2:
.d01d	68		pla			pla		; pop RTS addr
.d01e	a8		tay			tay
.d01f	68		pla			pla
.d020	20 29 d0	jsr $d029		jsr asm_op	; compile opcode
.d023	4c 13 cd	jmp $cd13		jmp Comma	; compile operand
.d026					asm_0:
.d026	68		pla			pla		; pop RTS addr
.d027	a8		tay			tay
.d028	68		pla			pla
.d029	84 14		sty $14		asm_op:	sty tmp1+0	; save RTS addr
.d02b	85 15		sta $15			sta tmp1+1
.d02d	a0 01		ldy #$01		ldy #1		; get opcode byte
.d02f	b1 14		lda ($14),y		lda (tmp1),y
.d031	4c ff cc	jmp $ccff		jmp C_Comma_A	; compile opcode
>d034	61 64 63 2e 23			Name0:	.text "adc.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53177					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d039	65					.byte (("adc.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=53177					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>d03a	11					.byte WordFlags	;wh_Flags
>d03b	03					.byte 3	;wh_CodeLength
>d03c	00 00					  .word WordListLink
=$d03e					XtPtr1 ::= *
=53177					WordListLink ::= Nt0 ; remember the nt of this word for later
.d03e	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d041					Here1 = *	; remember here
>d03b	03					.byte CodeLen	;patch wh_CodeLength
>d041	69					.byte $69
>d042	61 64 63 2e 78			Name0:	.text "adc.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53191					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d047	05					.byte (("adc.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d048	10					.byte WordFlags	;wh_Flags
>d049	03					.byte 3	;wh_CodeLength
>d04a	0e					  .byte LinkDisplacement	; offset to previous nt
=$d04b					XtPtr1 ::= *
=53191					WordListLink ::= Nt0 ; remember the nt of this word for later
.d04b	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d04e					Here1 = *	; remember here
>d049	03					.byte CodeLen	;patch wh_CodeLength
>d04e	7d					.byte $7d
>d04f	61 64 63 2e 79			Name0:	.text "adc.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53204					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d054	25					.byte (("adc.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d055	10					.byte WordFlags	;wh_Flags
>d056	03					.byte 3	;wh_CodeLength
>d057	0d					  .byte LinkDisplacement	; offset to previous nt
=$d058					XtPtr1 ::= *
=53204					WordListLink ::= Nt0 ; remember the nt of this word for later
.d058	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d05b					Here1 = *	; remember here
>d056	03					.byte CodeLen	;patch wh_CodeLength
>d05b	79					.byte $79
>d05c	61 64 63 2e 7a			Name0:	.text "adc.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53217					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d061	45					.byte (("adc.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d062	10					.byte WordFlags	;wh_Flags
>d063	03					.byte 3	;wh_CodeLength
>d064	0d					  .byte LinkDisplacement	; offset to previous nt
=$d065					XtPtr1 ::= *
=53217					WordListLink ::= Nt0 ; remember the nt of this word for later
.d065	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d068					Here1 = *	; remember here
>d063	03					.byte CodeLen	;patch wh_CodeLength
>d068	65					.byte $65
>d069	61 64 63 2e 7a 69 79		Name0:	.text "adc.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53232					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d070	27					.byte (("adc.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d071	10					.byte WordFlags	;wh_Flags
>d072	03					.byte 3	;wh_CodeLength
>d073	0f					  .byte LinkDisplacement	; offset to previous nt
=$d074					XtPtr1 ::= *
=53232					WordListLink ::= Nt0 ; remember the nt of this word for later
.d074	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d077					Here1 = *	; remember here
>d072	03					.byte CodeLen	;patch wh_CodeLength
>d077	71					.byte $71
>d078	61 64 63 2e 7a 78		Name0:	.text "adc.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53246					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d07e	06					.byte (("adc.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d07f	10					.byte WordFlags	;wh_Flags
>d080	03					.byte 3	;wh_CodeLength
>d081	0e					  .byte LinkDisplacement	; offset to previous nt
=$d082					XtPtr1 ::= *
=53246					WordListLink ::= Nt0 ; remember the nt of this word for later
.d082	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d085					Here1 = *	; remember here
>d080	03					.byte CodeLen	;patch wh_CodeLength
>d085	75					.byte $75
>d086	61 64 63 2e 7a 78 69		Name0:	.text "adc.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53261					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d08d	27					.byte (("adc.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d08e	10					.byte WordFlags	;wh_Flags
>d08f	03					.byte 3	;wh_CodeLength
>d090	0f					  .byte LinkDisplacement	; offset to previous nt
=$d091					XtPtr1 ::= *
=53261					WordListLink ::= Nt0 ; remember the nt of this word for later
.d091	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d094					Here1 = *	; remember here
>d08f	03					.byte CodeLen	;patch wh_CodeLength
>d094	61					.byte $61
>d095	61 6e 64 2e			Name0:	.text "and."	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=53273					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d099	c4					.byte (("and."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>d09a	10					.byte WordFlags	;wh_Flags
>d09b	03					.byte 3	;wh_CodeLength
>d09c	0c					  .byte LinkDisplacement	; offset to previous nt
=$d09d					XtPtr1 ::= *
=53273					WordListLink ::= Nt0 ; remember the nt of this word for later
.d09d	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d0a0					Here1 = *	; remember here
>d09b	03					.byte CodeLen	;patch wh_CodeLength
>d0a0	2d					.byte $2d
>d0a1	61 6e 64 2e 23			Name0:	.text "and.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53286					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0a6	65					.byte (("and.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0a7	10					.byte WordFlags	;wh_Flags
>d0a8	03					.byte 3	;wh_CodeLength
>d0a9	0d					  .byte LinkDisplacement	; offset to previous nt
=$d0aa					XtPtr1 ::= *
=53286					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0aa	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d0ad					Here1 = *	; remember here
>d0a8	03					.byte CodeLen	;patch wh_CodeLength
>d0ad	29					.byte $29
>d0ae	61 6e 64 2e 78			Name0:	.text "and.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53299					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0b3	05					.byte (("and.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0b4	10					.byte WordFlags	;wh_Flags
>d0b5	03					.byte 3	;wh_CodeLength
>d0b6	0d					  .byte LinkDisplacement	; offset to previous nt
=$d0b7					XtPtr1 ::= *
=53299					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0b7	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d0ba					Here1 = *	; remember here
>d0b5	03					.byte CodeLen	;patch wh_CodeLength
>d0ba	3d					.byte $3d
>d0bb	61 6e 64 2e 79			Name0:	.text "and.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53312					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0c0	25					.byte (("and.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0c1	10					.byte WordFlags	;wh_Flags
>d0c2	03					.byte 3	;wh_CodeLength
>d0c3	0d					  .byte LinkDisplacement	; offset to previous nt
=$d0c4					XtPtr1 ::= *
=53312					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0c4	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d0c7					Here1 = *	; remember here
>d0c2	03					.byte CodeLen	;patch wh_CodeLength
>d0c7	39					.byte $39
>d0c8	61 6e 64 2e 7a			Name0:	.text "and.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53325					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0cd	45					.byte (("and.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0ce	10					.byte WordFlags	;wh_Flags
>d0cf	03					.byte 3	;wh_CodeLength
>d0d0	0d					  .byte LinkDisplacement	; offset to previous nt
=$d0d1					XtPtr1 ::= *
=53325					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0d1	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d0d4					Here1 = *	; remember here
>d0cf	03					.byte CodeLen	;patch wh_CodeLength
>d0d4	25					.byte $25
>d0d5	61 6e 64 2e 7a 69 79		Name0:	.text "and.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53340					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0dc	27					.byte (("and.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d0dd	10					.byte WordFlags	;wh_Flags
>d0de	03					.byte 3	;wh_CodeLength
>d0df	0f					  .byte LinkDisplacement	; offset to previous nt
=$d0e0					XtPtr1 ::= *
=53340					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0e0	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d0e3					Here1 = *	; remember here
>d0de	03					.byte CodeLen	;patch wh_CodeLength
>d0e3	31					.byte $31
>d0e4	61 6e 64 2e 7a 78		Name0:	.text "and.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53354					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0ea	06					.byte (("and.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d0eb	10					.byte WordFlags	;wh_Flags
>d0ec	03					.byte 3	;wh_CodeLength
>d0ed	0e					  .byte LinkDisplacement	; offset to previous nt
=$d0ee					XtPtr1 ::= *
=53354					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0ee	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d0f1					Here1 = *	; remember here
>d0ec	03					.byte CodeLen	;patch wh_CodeLength
>d0f1	35					.byte $35
>d0f2	61 6e 64 2e 7a 78 69		Name0:	.text "and.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53369					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0f9	27					.byte (("and.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d0fa	10					.byte WordFlags	;wh_Flags
>d0fb	03					.byte 3	;wh_CodeLength
>d0fc	0f					  .byte LinkDisplacement	; offset to previous nt
=$d0fd					XtPtr1 ::= *
=53369					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0fd	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d100					Here1 = *	; remember here
>d0fb	03					.byte CodeLen	;patch wh_CodeLength
>d100	21					.byte $21
>d101	61 73 6c			Name0:	.text "asl"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53380					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d104	83					.byte (("asl"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d105	10					.byte WordFlags	;wh_Flags
>d106	03					.byte 3	;wh_CodeLength
>d107	0b					  .byte LinkDisplacement	; offset to previous nt
=$d108					XtPtr1 ::= *
=53380					WordListLink ::= Nt0 ; remember the nt of this word for later
.d108	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d10b					Here1 = *	; remember here
>d106	03					.byte CodeLen	;patch wh_CodeLength
>d10b	0e					.byte $0e
>d10c	61 73 6c 2e 61			Name0:	.text "asl.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53393					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d111	25					.byte (("asl.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d112	10					.byte WordFlags	;wh_Flags
>d113	03					.byte 3	;wh_CodeLength
>d114	0d					  .byte LinkDisplacement	; offset to previous nt
=$d115					XtPtr1 ::= *
=53393					WordListLink ::= Nt0 ; remember the nt of this word for later
.d115	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d118					Here1 = *	; remember here
>d113	03					.byte CodeLen	;patch wh_CodeLength
>d118	0a					.byte $0a
>d119	61 73 6c 2e 78			Name0:	.text "asl.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53406					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d11e	05					.byte (("asl.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d11f	10					.byte WordFlags	;wh_Flags
>d120	03					.byte 3	;wh_CodeLength
>d121	0d					  .byte LinkDisplacement	; offset to previous nt
=$d122					XtPtr1 ::= *
=53406					WordListLink ::= Nt0 ; remember the nt of this word for later
.d122	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d125					Here1 = *	; remember here
>d120	03					.byte CodeLen	;patch wh_CodeLength
>d125	1e					.byte $1e
>d126	61 73 6c 2e 7a			Name0:	.text "asl.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53419					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d12b	45					.byte (("asl.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d12c	10					.byte WordFlags	;wh_Flags
>d12d	03					.byte 3	;wh_CodeLength
>d12e	0d					  .byte LinkDisplacement	; offset to previous nt
=$d12f					XtPtr1 ::= *
=53419					WordListLink ::= Nt0 ; remember the nt of this word for later
.d12f	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d132					Here1 = *	; remember here
>d12d	03					.byte CodeLen	;patch wh_CodeLength
>d132	06					.byte $06
>d133	61 73 6c 2e 7a 78		Name0:	.text "asl.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53433					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d139	06					.byte (("asl.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d13a	10					.byte WordFlags	;wh_Flags
>d13b	03					.byte 3	;wh_CodeLength
>d13c	0e					  .byte LinkDisplacement	; offset to previous nt
=$d13d					XtPtr1 ::= *
=53433					WordListLink ::= Nt0 ; remember the nt of this word for later
.d13d	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d140					Here1 = *	; remember here
>d13b	03					.byte CodeLen	;patch wh_CodeLength
>d140	16					.byte $16
>d141	62 63 63			Name0:	.text "bcc"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53444					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d144	63					.byte (("bcc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d145	10					.byte WordFlags	;wh_Flags
>d146	03					.byte 3	;wh_CodeLength
>d147	0b					  .byte LinkDisplacement	; offset to previous nt
=$d148					XtPtr1 ::= *
=53444					WordListLink ::= Nt0 ; remember the nt of this word for later
.d148	20 eb cf	jsr $cfeb		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d14b					Here1 = *	; remember here
>d146	03					.byte CodeLen	;patch wh_CodeLength
>d14b	90					.byte $90
>d14c	62 63 73			Name0:	.text "bcs"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53455					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d14f	63					.byte (("bcs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d150	10					.byte WordFlags	;wh_Flags
>d151	03					.byte 3	;wh_CodeLength
>d152	0b					  .byte LinkDisplacement	; offset to previous nt
=$d153					XtPtr1 ::= *
=53455					WordListLink ::= Nt0 ; remember the nt of this word for later
.d153	20 eb cf	jsr $cfeb		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d156					Here1 = *	; remember here
>d151	03					.byte CodeLen	;patch wh_CodeLength
>d156	b0					.byte $b0
>d157	62 65 71			Name0:	.text "beq"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53466					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d15a	23					.byte (("beq"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d15b	10					.byte WordFlags	;wh_Flags
>d15c	03					.byte 3	;wh_CodeLength
>d15d	0b					  .byte LinkDisplacement	; offset to previous nt
=$d15e					XtPtr1 ::= *
=53466					WordListLink ::= Nt0 ; remember the nt of this word for later
.d15e	20 eb cf	jsr $cfeb		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d161					Here1 = *	; remember here
>d15c	03					.byte CodeLen	;patch wh_CodeLength
>d161	f0					.byte $f0
>d162	62 69 74			Name0:	.text "bit"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53477					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d165	83					.byte (("bit"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d166	10					.byte WordFlags	;wh_Flags
>d167	03					.byte 3	;wh_CodeLength
>d168	0b					  .byte LinkDisplacement	; offset to previous nt
=$d169					XtPtr1 ::= *
=53477					WordListLink ::= Nt0 ; remember the nt of this word for later
.d169	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d16c					Here1 = *	; remember here
>d167	03					.byte CodeLen	;patch wh_CodeLength
>d16c	2c					.byte $2c
>d16d	62 69 74 2e 7a			Name0:	.text "bit.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53490					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d172	45					.byte (("bit.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d173	10					.byte WordFlags	;wh_Flags
>d174	03					.byte 3	;wh_CodeLength
>d175	0d					  .byte LinkDisplacement	; offset to previous nt
=$d176					XtPtr1 ::= *
=53490					WordListLink ::= Nt0 ; remember the nt of this word for later
.d176	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d179					Here1 = *	; remember here
>d174	03					.byte CodeLen	;patch wh_CodeLength
>d179	24					.byte $24
>d17a	62 6d 69			Name0:	.text "bmi"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53501					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d17d	23					.byte (("bmi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d17e	10					.byte WordFlags	;wh_Flags
>d17f	03					.byte 3	;wh_CodeLength
>d180	0b					  .byte LinkDisplacement	; offset to previous nt
=$d181					XtPtr1 ::= *
=53501					WordListLink ::= Nt0 ; remember the nt of this word for later
.d181	20 eb cf	jsr $cfeb		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d184					Here1 = *	; remember here
>d17f	03					.byte CodeLen	;patch wh_CodeLength
>d184	30					.byte $30
>d185	62 6e 65			Name0:	.text "bne"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53512					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d188	a3					.byte (("bne"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d189	10					.byte WordFlags	;wh_Flags
>d18a	03					.byte 3	;wh_CodeLength
>d18b	0b					  .byte LinkDisplacement	; offset to previous nt
=$d18c					XtPtr1 ::= *
=53512					WordListLink ::= Nt0 ; remember the nt of this word for later
.d18c	20 eb cf	jsr $cfeb		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d18f					Here1 = *	; remember here
>d18a	03					.byte CodeLen	;patch wh_CodeLength
>d18f	d0					.byte $d0
>d190	62 70 6c			Name0:	.text "bpl"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53523					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d193	83					.byte (("bpl"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d194	10					.byte WordFlags	;wh_Flags
>d195	03					.byte 3	;wh_CodeLength
>d196	0b					  .byte LinkDisplacement	; offset to previous nt
=$d197					XtPtr1 ::= *
=53523					WordListLink ::= Nt0 ; remember the nt of this word for later
.d197	20 eb cf	jsr $cfeb		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d19a					Here1 = *	; remember here
>d195	03					.byte CodeLen	;patch wh_CodeLength
>d19a	10					.byte $10
>d19b	62 72 6b			Name0:	.text "brk"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53534					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d19e	63					.byte (("brk"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d19f	10					.byte WordFlags	;wh_Flags
>d1a0	03					.byte 3	;wh_CodeLength
>d1a1	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1a2					XtPtr1 ::= *
=53534					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1a2	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d1a5					Here1 = *	; remember here
>d1a0	03					.byte CodeLen	;patch wh_CodeLength
>d1a5	00					.byte $00
>d1a6	62 76 63			Name0:	.text "bvc"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53545					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1a9	63					.byte (("bvc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1aa	10					.byte WordFlags	;wh_Flags
>d1ab	03					.byte 3	;wh_CodeLength
>d1ac	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1ad					XtPtr1 ::= *
=53545					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1ad	20 eb cf	jsr $cfeb		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d1b0					Here1 = *	; remember here
>d1ab	03					.byte CodeLen	;patch wh_CodeLength
>d1b0	50					.byte $50
>d1b1	62 76 73			Name0:	.text "bvs"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53556					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1b4	63					.byte (("bvs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1b5	10					.byte WordFlags	;wh_Flags
>d1b6	03					.byte 3	;wh_CodeLength
>d1b7	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1b8					XtPtr1 ::= *
=53556					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1b8	20 eb cf	jsr $cfeb		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d1bb					Here1 = *	; remember here
>d1b6	03					.byte CodeLen	;patch wh_CodeLength
>d1bb	70					.byte $70
>d1bc	63 6c 63			Name0:	.text "clc"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53567					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1bf	63					.byte (("clc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1c0	10					.byte WordFlags	;wh_Flags
>d1c1	03					.byte 3	;wh_CodeLength
>d1c2	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1c3					XtPtr1 ::= *
=53567					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1c3	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d1c6					Here1 = *	; remember here
>d1c1	03					.byte CodeLen	;patch wh_CodeLength
>d1c6	18					.byte $18
>d1c7	63 6c 64			Name0:	.text "cld"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53578					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1ca	83					.byte (("cld"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1cb	10					.byte WordFlags	;wh_Flags
>d1cc	03					.byte 3	;wh_CodeLength
>d1cd	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1ce					XtPtr1 ::= *
=53578					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1ce	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d1d1					Here1 = *	; remember here
>d1cc	03					.byte CodeLen	;patch wh_CodeLength
>d1d1	d8					.byte $d8
>d1d2	63 6c 69			Name0:	.text "cli"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53589					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1d5	23					.byte (("cli"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1d6	10					.byte WordFlags	;wh_Flags
>d1d7	03					.byte 3	;wh_CodeLength
>d1d8	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1d9					XtPtr1 ::= *
=53589					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1d9	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d1dc					Here1 = *	; remember here
>d1d7	03					.byte CodeLen	;patch wh_CodeLength
>d1dc	58					.byte $58
>d1dd	63 6c 76			Name0:	.text "clv"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53600					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1e0	c3					.byte (("clv"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1e1	10					.byte WordFlags	;wh_Flags
>d1e2	03					.byte 3	;wh_CodeLength
>d1e3	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1e4					XtPtr1 ::= *
=53600					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1e4	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d1e7					Here1 = *	; remember here
>d1e2	03					.byte CodeLen	;patch wh_CodeLength
>d1e7	b8					.byte $b8
>d1e8	63 6d 70			Name0:	.text "cmp"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53611					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1eb	03					.byte (("cmp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1ec	10					.byte WordFlags	;wh_Flags
>d1ed	03					.byte 3	;wh_CodeLength
>d1ee	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1ef					XtPtr1 ::= *
=53611					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1ef	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d1f2					Here1 = *	; remember here
>d1ed	03					.byte CodeLen	;patch wh_CodeLength
>d1f2	cd					.byte $cd
>d1f3	63 6d 70 2e 23			Name0:	.text "cmp.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53624					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1f8	65					.byte (("cmp.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d1f9	10					.byte WordFlags	;wh_Flags
>d1fa	03					.byte 3	;wh_CodeLength
>d1fb	0d					  .byte LinkDisplacement	; offset to previous nt
=$d1fc					XtPtr1 ::= *
=53624					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1fc	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d1ff					Here1 = *	; remember here
>d1fa	03					.byte CodeLen	;patch wh_CodeLength
>d1ff	c9					.byte $c9
>d200	63 6d 70 2e 78			Name0:	.text "cmp.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53637					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d205	05					.byte (("cmp.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d206	10					.byte WordFlags	;wh_Flags
>d207	03					.byte 3	;wh_CodeLength
>d208	0d					  .byte LinkDisplacement	; offset to previous nt
=$d209					XtPtr1 ::= *
=53637					WordListLink ::= Nt0 ; remember the nt of this word for later
.d209	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d20c					Here1 = *	; remember here
>d207	03					.byte CodeLen	;patch wh_CodeLength
>d20c	dd					.byte $dd
>d20d	63 6d 70 2e 79			Name0:	.text "cmp.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53650					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d212	25					.byte (("cmp.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d213	10					.byte WordFlags	;wh_Flags
>d214	03					.byte 3	;wh_CodeLength
>d215	0d					  .byte LinkDisplacement	; offset to previous nt
=$d216					XtPtr1 ::= *
=53650					WordListLink ::= Nt0 ; remember the nt of this word for later
.d216	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d219					Here1 = *	; remember here
>d214	03					.byte CodeLen	;patch wh_CodeLength
>d219	d9					.byte $d9
>d21a	63 6d 70 2e 7a			Name0:	.text "cmp.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53663					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d21f	45					.byte (("cmp.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d220	10					.byte WordFlags	;wh_Flags
>d221	03					.byte 3	;wh_CodeLength
>d222	0d					  .byte LinkDisplacement	; offset to previous nt
=$d223					XtPtr1 ::= *
=53663					WordListLink ::= Nt0 ; remember the nt of this word for later
.d223	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d226					Here1 = *	; remember here
>d221	03					.byte CodeLen	;patch wh_CodeLength
>d226	c5					.byte $c5
>d227	63 6d 70 2e 7a 69 79		Name0:	.text "cmp.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53678					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d22e	27					.byte (("cmp.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d22f	10					.byte WordFlags	;wh_Flags
>d230	03					.byte 3	;wh_CodeLength
>d231	0f					  .byte LinkDisplacement	; offset to previous nt
=$d232					XtPtr1 ::= *
=53678					WordListLink ::= Nt0 ; remember the nt of this word for later
.d232	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d235					Here1 = *	; remember here
>d230	03					.byte CodeLen	;patch wh_CodeLength
>d235	d1					.byte $d1
>d236	63 6d 70 2e 7a 78		Name0:	.text "cmp.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53692					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d23c	06					.byte (("cmp.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d23d	10					.byte WordFlags	;wh_Flags
>d23e	03					.byte 3	;wh_CodeLength
>d23f	0e					  .byte LinkDisplacement	; offset to previous nt
=$d240					XtPtr1 ::= *
=53692					WordListLink ::= Nt0 ; remember the nt of this word for later
.d240	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d243					Here1 = *	; remember here
>d23e	03					.byte CodeLen	;patch wh_CodeLength
>d243	d5					.byte $d5
>d244	63 6d 70 2e 7a 78 69		Name0:	.text "cmp.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53707					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d24b	27					.byte (("cmp.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d24c	10					.byte WordFlags	;wh_Flags
>d24d	03					.byte 3	;wh_CodeLength
>d24e	0f					  .byte LinkDisplacement	; offset to previous nt
=$d24f					XtPtr1 ::= *
=53707					WordListLink ::= Nt0 ; remember the nt of this word for later
.d24f	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d252					Here1 = *	; remember here
>d24d	03					.byte CodeLen	;patch wh_CodeLength
>d252	c1					.byte $c1
>d253	63 70 78			Name0:	.text "cpx"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53718					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d256	03					.byte (("cpx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d257	10					.byte WordFlags	;wh_Flags
>d258	03					.byte 3	;wh_CodeLength
>d259	0b					  .byte LinkDisplacement	; offset to previous nt
=$d25a					XtPtr1 ::= *
=53718					WordListLink ::= Nt0 ; remember the nt of this word for later
.d25a	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d25d					Here1 = *	; remember here
>d258	03					.byte CodeLen	;patch wh_CodeLength
>d25d	ec					.byte $ec
>d25e	63 70 78 2e 23			Name0:	.text "cpx.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53731					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d263	65					.byte (("cpx.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d264	10					.byte WordFlags	;wh_Flags
>d265	03					.byte 3	;wh_CodeLength
>d266	0d					  .byte LinkDisplacement	; offset to previous nt
=$d267					XtPtr1 ::= *
=53731					WordListLink ::= Nt0 ; remember the nt of this word for later
.d267	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d26a					Here1 = *	; remember here
>d265	03					.byte CodeLen	;patch wh_CodeLength
>d26a	e0					.byte $e0
>d26b	63 70 78 2e 7a			Name0:	.text "cpx.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53744					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d270	45					.byte (("cpx.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d271	10					.byte WordFlags	;wh_Flags
>d272	03					.byte 3	;wh_CodeLength
>d273	0d					  .byte LinkDisplacement	; offset to previous nt
=$d274					XtPtr1 ::= *
=53744					WordListLink ::= Nt0 ; remember the nt of this word for later
.d274	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d277					Here1 = *	; remember here
>d272	03					.byte CodeLen	;patch wh_CodeLength
>d277	e4					.byte $e4
>d278	63 70 79			Name0:	.text "cpy"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53755					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d27b	23					.byte (("cpy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d27c	10					.byte WordFlags	;wh_Flags
>d27d	03					.byte 3	;wh_CodeLength
>d27e	0b					  .byte LinkDisplacement	; offset to previous nt
=$d27f					XtPtr1 ::= *
=53755					WordListLink ::= Nt0 ; remember the nt of this word for later
.d27f	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d282					Here1 = *	; remember here
>d27d	03					.byte CodeLen	;patch wh_CodeLength
>d282	cc					.byte $cc
>d283	63 70 79 2e 23			Name0:	.text "cpy.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53768					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d288	65					.byte (("cpy.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d289	10					.byte WordFlags	;wh_Flags
>d28a	03					.byte 3	;wh_CodeLength
>d28b	0d					  .byte LinkDisplacement	; offset to previous nt
=$d28c					XtPtr1 ::= *
=53768					WordListLink ::= Nt0 ; remember the nt of this word for later
.d28c	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d28f					Here1 = *	; remember here
>d28a	03					.byte CodeLen	;patch wh_CodeLength
>d28f	c0					.byte $c0
>d290	63 70 79 2e 7a			Name0:	.text "cpy.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53781					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d295	45					.byte (("cpy.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d296	10					.byte WordFlags	;wh_Flags
>d297	03					.byte 3	;wh_CodeLength
>d298	0d					  .byte LinkDisplacement	; offset to previous nt
=$d299					XtPtr1 ::= *
=53781					WordListLink ::= Nt0 ; remember the nt of this word for later
.d299	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d29c					Here1 = *	; remember here
>d297	03					.byte CodeLen	;patch wh_CodeLength
>d29c	c4					.byte $c4
>d29d	64 65 63			Name0:	.text "dec"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53792					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2a0	63					.byte (("dec"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d2a1	10					.byte WordFlags	;wh_Flags
>d2a2	03					.byte 3	;wh_CodeLength
>d2a3	0b					  .byte LinkDisplacement	; offset to previous nt
=$d2a4					XtPtr1 ::= *
=53792					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2a4	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d2a7					Here1 = *	; remember here
>d2a2	03					.byte CodeLen	;patch wh_CodeLength
>d2a7	ce					.byte $ce
>d2a8	64 65 63 2e 61			Name0:	.text "dec.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53805					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2ad	25					.byte (("dec.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d2ae	10					.byte WordFlags	;wh_Flags
>d2af	03					.byte 3	;wh_CodeLength
>d2b0	0d					  .byte LinkDisplacement	; offset to previous nt
=$d2b1					XtPtr1 ::= *
=53805					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2b1	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d2b4					Here1 = *	; remember here
>d2af	03					.byte CodeLen	;patch wh_CodeLength
>d2b4	3a					.byte $3a
>d2b5	64 65 63 2e 78			Name0:	.text "dec.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53818					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2ba	05					.byte (("dec.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d2bb	10					.byte WordFlags	;wh_Flags
>d2bc	03					.byte 3	;wh_CodeLength
>d2bd	0d					  .byte LinkDisplacement	; offset to previous nt
=$d2be					XtPtr1 ::= *
=53818					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2be	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d2c1					Here1 = *	; remember here
>d2bc	03					.byte CodeLen	;patch wh_CodeLength
>d2c1	de					.byte $de
>d2c2	64 65 63 2e 7a			Name0:	.text "dec.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53831					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2c7	45					.byte (("dec.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d2c8	10					.byte WordFlags	;wh_Flags
>d2c9	03					.byte 3	;wh_CodeLength
>d2ca	0d					  .byte LinkDisplacement	; offset to previous nt
=$d2cb					XtPtr1 ::= *
=53831					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2cb	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d2ce					Here1 = *	; remember here
>d2c9	03					.byte CodeLen	;patch wh_CodeLength
>d2ce	c6					.byte $c6
>d2cf	64 65 63 2e 7a 78		Name0:	.text "dec.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53845					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2d5	06					.byte (("dec.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d2d6	10					.byte WordFlags	;wh_Flags
>d2d7	03					.byte 3	;wh_CodeLength
>d2d8	0e					  .byte LinkDisplacement	; offset to previous nt
=$d2d9					XtPtr1 ::= *
=53845					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2d9	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d2dc					Here1 = *	; remember here
>d2d7	03					.byte CodeLen	;patch wh_CodeLength
>d2dc	d6					.byte $d6
>d2dd	64 65 78			Name0:	.text "dex"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53856					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2e0	03					.byte (("dex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d2e1	10					.byte WordFlags	;wh_Flags
>d2e2	03					.byte 3	;wh_CodeLength
>d2e3	0b					  .byte LinkDisplacement	; offset to previous nt
=$d2e4					XtPtr1 ::= *
=53856					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2e4	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d2e7					Here1 = *	; remember here
>d2e2	03					.byte CodeLen	;patch wh_CodeLength
>d2e7	ca					.byte $ca
>d2e8	64 65 79			Name0:	.text "dey"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53867					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2eb	23					.byte (("dey"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d2ec	10					.byte WordFlags	;wh_Flags
>d2ed	03					.byte 3	;wh_CodeLength
>d2ee	0b					  .byte LinkDisplacement	; offset to previous nt
=$d2ef					XtPtr1 ::= *
=53867					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2ef	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d2f2					Here1 = *	; remember here
>d2ed	03					.byte CodeLen	;patch wh_CodeLength
>d2f2	88					.byte $88
>d2f3	65 6f 72			Name0:	.text "eor"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53878					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2f6	43					.byte (("eor"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d2f7	10					.byte WordFlags	;wh_Flags
>d2f8	03					.byte 3	;wh_CodeLength
>d2f9	0b					  .byte LinkDisplacement	; offset to previous nt
=$d2fa					XtPtr1 ::= *
=53878					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2fa	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d2fd					Here1 = *	; remember here
>d2f8	03					.byte CodeLen	;patch wh_CodeLength
>d2fd	4d					.byte $4d
>d2fe	65 6f 72 2e 23			Name0:	.text "eor.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53891					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d303	65					.byte (("eor.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d304	10					.byte WordFlags	;wh_Flags
>d305	03					.byte 3	;wh_CodeLength
>d306	0d					  .byte LinkDisplacement	; offset to previous nt
=$d307					XtPtr1 ::= *
=53891					WordListLink ::= Nt0 ; remember the nt of this word for later
.d307	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d30a					Here1 = *	; remember here
>d305	03					.byte CodeLen	;patch wh_CodeLength
>d30a	49					.byte $49
>d30b	65 6f 72 2e 78			Name0:	.text "eor.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53904					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d310	05					.byte (("eor.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d311	10					.byte WordFlags	;wh_Flags
>d312	03					.byte 3	;wh_CodeLength
>d313	0d					  .byte LinkDisplacement	; offset to previous nt
=$d314					XtPtr1 ::= *
=53904					WordListLink ::= Nt0 ; remember the nt of this word for later
.d314	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d317					Here1 = *	; remember here
>d312	03					.byte CodeLen	;patch wh_CodeLength
>d317	5d					.byte $5d
>d318	65 6f 72 2e 79			Name0:	.text "eor.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53917					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d31d	25					.byte (("eor.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d31e	10					.byte WordFlags	;wh_Flags
>d31f	03					.byte 3	;wh_CodeLength
>d320	0d					  .byte LinkDisplacement	; offset to previous nt
=$d321					XtPtr1 ::= *
=53917					WordListLink ::= Nt0 ; remember the nt of this word for later
.d321	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d324					Here1 = *	; remember here
>d31f	03					.byte CodeLen	;patch wh_CodeLength
>d324	59					.byte $59
>d325	65 6f 72 2e 7a			Name0:	.text "eor.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53930					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d32a	45					.byte (("eor.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d32b	10					.byte WordFlags	;wh_Flags
>d32c	03					.byte 3	;wh_CodeLength
>d32d	0d					  .byte LinkDisplacement	; offset to previous nt
=$d32e					XtPtr1 ::= *
=53930					WordListLink ::= Nt0 ; remember the nt of this word for later
.d32e	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d331					Here1 = *	; remember here
>d32c	03					.byte CodeLen	;patch wh_CodeLength
>d331	45					.byte $45
>d332	65 6f 72 2e 7a 69 79		Name0:	.text "eor.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53945					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d339	27					.byte (("eor.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d33a	10					.byte WordFlags	;wh_Flags
>d33b	03					.byte 3	;wh_CodeLength
>d33c	0f					  .byte LinkDisplacement	; offset to previous nt
=$d33d					XtPtr1 ::= *
=53945					WordListLink ::= Nt0 ; remember the nt of this word for later
.d33d	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d340					Here1 = *	; remember here
>d33b	03					.byte CodeLen	;patch wh_CodeLength
>d340	51					.byte $51
>d341	65 6f 72 2e 7a 78		Name0:	.text "eor.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53959					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d347	06					.byte (("eor.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d348	10					.byte WordFlags	;wh_Flags
>d349	03					.byte 3	;wh_CodeLength
>d34a	0e					  .byte LinkDisplacement	; offset to previous nt
=$d34b					XtPtr1 ::= *
=53959					WordListLink ::= Nt0 ; remember the nt of this word for later
.d34b	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d34e					Here1 = *	; remember here
>d349	03					.byte CodeLen	;patch wh_CodeLength
>d34e	55					.byte $55
>d34f	65 6f 72 2e 7a 78 69		Name0:	.text "eor.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53974					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d356	27					.byte (("eor.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d357	10					.byte WordFlags	;wh_Flags
>d358	03					.byte 3	;wh_CodeLength
>d359	0f					  .byte LinkDisplacement	; offset to previous nt
=$d35a					XtPtr1 ::= *
=53974					WordListLink ::= Nt0 ; remember the nt of this word for later
.d35a	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d35d					Here1 = *	; remember here
>d358	03					.byte CodeLen	;patch wh_CodeLength
>d35d	41					.byte $41
>d35e	69 6e 63			Name0:	.text "inc"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53985					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d361	63					.byte (("inc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d362	10					.byte WordFlags	;wh_Flags
>d363	03					.byte 3	;wh_CodeLength
>d364	0b					  .byte LinkDisplacement	; offset to previous nt
=$d365					XtPtr1 ::= *
=53985					WordListLink ::= Nt0 ; remember the nt of this word for later
.d365	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d368					Here1 = *	; remember here
>d363	03					.byte CodeLen	;patch wh_CodeLength
>d368	ee					.byte $ee
>d369	69 6e 63 2e 61			Name0:	.text "inc.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53998					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d36e	25					.byte (("inc.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d36f	10					.byte WordFlags	;wh_Flags
>d370	03					.byte 3	;wh_CodeLength
>d371	0d					  .byte LinkDisplacement	; offset to previous nt
=$d372					XtPtr1 ::= *
=53998					WordListLink ::= Nt0 ; remember the nt of this word for later
.d372	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d375					Here1 = *	; remember here
>d370	03					.byte CodeLen	;patch wh_CodeLength
>d375	1a					.byte $1a
>d376	69 6e 63 2e 78			Name0:	.text "inc.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54011					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d37b	05					.byte (("inc.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d37c	10					.byte WordFlags	;wh_Flags
>d37d	03					.byte 3	;wh_CodeLength
>d37e	0d					  .byte LinkDisplacement	; offset to previous nt
=$d37f					XtPtr1 ::= *
=54011					WordListLink ::= Nt0 ; remember the nt of this word for later
.d37f	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d382					Here1 = *	; remember here
>d37d	03					.byte CodeLen	;patch wh_CodeLength
>d382	fe					.byte $fe
>d383	69 6e 63 2e 7a			Name0:	.text "inc.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54024					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d388	45					.byte (("inc.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d389	10					.byte WordFlags	;wh_Flags
>d38a	03					.byte 3	;wh_CodeLength
>d38b	0d					  .byte LinkDisplacement	; offset to previous nt
=$d38c					XtPtr1 ::= *
=54024					WordListLink ::= Nt0 ; remember the nt of this word for later
.d38c	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d38f					Here1 = *	; remember here
>d38a	03					.byte CodeLen	;patch wh_CodeLength
>d38f	e6					.byte $e6
>d390	69 6e 63 2e 7a 78		Name0:	.text "inc.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54038					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d396	06					.byte (("inc.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d397	10					.byte WordFlags	;wh_Flags
>d398	03					.byte 3	;wh_CodeLength
>d399	0e					  .byte LinkDisplacement	; offset to previous nt
=$d39a					XtPtr1 ::= *
=54038					WordListLink ::= Nt0 ; remember the nt of this word for later
.d39a	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d39d					Here1 = *	; remember here
>d398	03					.byte CodeLen	;patch wh_CodeLength
>d39d	f6					.byte $f6
>d39e	69 6e 78			Name0:	.text "inx"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54049					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3a1	03					.byte (("inx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3a2	10					.byte WordFlags	;wh_Flags
>d3a3	03					.byte 3	;wh_CodeLength
>d3a4	0b					  .byte LinkDisplacement	; offset to previous nt
=$d3a5					XtPtr1 ::= *
=54049					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3a5	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d3a8					Here1 = *	; remember here
>d3a3	03					.byte CodeLen	;patch wh_CodeLength
>d3a8	e8					.byte $e8
>d3a9	69 6e 79			Name0:	.text "iny"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54060					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3ac	23					.byte (("iny"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3ad	10					.byte WordFlags	;wh_Flags
>d3ae	03					.byte 3	;wh_CodeLength
>d3af	0b					  .byte LinkDisplacement	; offset to previous nt
=$d3b0					XtPtr1 ::= *
=54060					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3b0	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d3b3					Here1 = *	; remember here
>d3ae	03					.byte CodeLen	;patch wh_CodeLength
>d3b3	c8					.byte $c8
>d3b4	6a 6d 70			Name0:	.text "jmp"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54071					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3b7	03					.byte (("jmp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3b8	10					.byte WordFlags	;wh_Flags
>d3b9	03					.byte 3	;wh_CodeLength
>d3ba	0b					  .byte LinkDisplacement	; offset to previous nt
=$d3bb					XtPtr1 ::= *
=54071					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3bb	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d3be					Here1 = *	; remember here
>d3b9	03					.byte CodeLen	;patch wh_CodeLength
>d3be	4c					.byte $4c
>d3bf	6a 6d 70 2e 69			Name0:	.text "jmp.i"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54084					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3c4	25					.byte (("jmp.i"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3c5	10					.byte WordFlags	;wh_Flags
>d3c6	03					.byte 3	;wh_CodeLength
>d3c7	0d					  .byte LinkDisplacement	; offset to previous nt
=$d3c8					XtPtr1 ::= *
=54084					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3c8	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d3cb					Here1 = *	; remember here
>d3c6	03					.byte CodeLen	;patch wh_CodeLength
>d3cb	6c					.byte $6c
>d3cc	6a 73 72			Name0:	.text "jsr"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54095					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3cf	43					.byte (("jsr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3d0	10					.byte WordFlags	;wh_Flags
>d3d1	03					.byte 3	;wh_CodeLength
>d3d2	0b					  .byte LinkDisplacement	; offset to previous nt
=$d3d3					XtPtr1 ::= *
=54095					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3d3	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d3d6					Here1 = *	; remember here
>d3d1	03					.byte CodeLen	;patch wh_CodeLength
>d3d6	20					.byte $20
>d3d7	6c 64 61			Name0:	.text "lda"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54106					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3da	23					.byte (("lda"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3db	10					.byte WordFlags	;wh_Flags
>d3dc	03					.byte 3	;wh_CodeLength
>d3dd	0b					  .byte LinkDisplacement	; offset to previous nt
=$d3de					XtPtr1 ::= *
=54106					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3de	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d3e1					Here1 = *	; remember here
>d3dc	03					.byte CodeLen	;patch wh_CodeLength
>d3e1	ad					.byte $ad
>d3e2	6c 64 61 2e 23			Name0:	.text "lda.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54119					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3e7	65					.byte (("lda.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3e8	10					.byte WordFlags	;wh_Flags
>d3e9	03					.byte 3	;wh_CodeLength
>d3ea	0d					  .byte LinkDisplacement	; offset to previous nt
=$d3eb					XtPtr1 ::= *
=54119					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3eb	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d3ee					Here1 = *	; remember here
>d3e9	03					.byte CodeLen	;patch wh_CodeLength
>d3ee	a9					.byte $a9
>d3ef	6c 64 61 2e 78			Name0:	.text "lda.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54132					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3f4	05					.byte (("lda.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3f5	10					.byte WordFlags	;wh_Flags
>d3f6	03					.byte 3	;wh_CodeLength
>d3f7	0d					  .byte LinkDisplacement	; offset to previous nt
=$d3f8					XtPtr1 ::= *
=54132					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3f8	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d3fb					Here1 = *	; remember here
>d3f6	03					.byte CodeLen	;patch wh_CodeLength
>d3fb	bd					.byte $bd
>d3fc	6c 64 61 2e 79			Name0:	.text "lda.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54145					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d401	25					.byte (("lda.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d402	10					.byte WordFlags	;wh_Flags
>d403	03					.byte 3	;wh_CodeLength
>d404	0d					  .byte LinkDisplacement	; offset to previous nt
=$d405					XtPtr1 ::= *
=54145					WordListLink ::= Nt0 ; remember the nt of this word for later
.d405	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d408					Here1 = *	; remember here
>d403	03					.byte CodeLen	;patch wh_CodeLength
>d408	b9					.byte $b9
>d409	6c 64 61 2e 7a			Name0:	.text "lda.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54158					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d40e	45					.byte (("lda.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d40f	10					.byte WordFlags	;wh_Flags
>d410	03					.byte 3	;wh_CodeLength
>d411	0d					  .byte LinkDisplacement	; offset to previous nt
=$d412					XtPtr1 ::= *
=54158					WordListLink ::= Nt0 ; remember the nt of this word for later
.d412	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d415					Here1 = *	; remember here
>d410	03					.byte CodeLen	;patch wh_CodeLength
>d415	a5					.byte $a5
>d416	6c 64 61 2e 7a 69 79		Name0:	.text "lda.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54173					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d41d	27					.byte (("lda.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d41e	10					.byte WordFlags	;wh_Flags
>d41f	03					.byte 3	;wh_CodeLength
>d420	0f					  .byte LinkDisplacement	; offset to previous nt
=$d421					XtPtr1 ::= *
=54173					WordListLink ::= Nt0 ; remember the nt of this word for later
.d421	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d424					Here1 = *	; remember here
>d41f	03					.byte CodeLen	;patch wh_CodeLength
>d424	b1					.byte $b1
>d425	6c 64 61 2e 7a 78		Name0:	.text "lda.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54187					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d42b	06					.byte (("lda.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d42c	10					.byte WordFlags	;wh_Flags
>d42d	03					.byte 3	;wh_CodeLength
>d42e	0e					  .byte LinkDisplacement	; offset to previous nt
=$d42f					XtPtr1 ::= *
=54187					WordListLink ::= Nt0 ; remember the nt of this word for later
.d42f	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d432					Here1 = *	; remember here
>d42d	03					.byte CodeLen	;patch wh_CodeLength
>d432	b5					.byte $b5
>d433	6c 64 61 2e 7a 78 69		Name0:	.text "lda.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54202					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d43a	27					.byte (("lda.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d43b	10					.byte WordFlags	;wh_Flags
>d43c	03					.byte 3	;wh_CodeLength
>d43d	0f					  .byte LinkDisplacement	; offset to previous nt
=$d43e					XtPtr1 ::= *
=54202					WordListLink ::= Nt0 ; remember the nt of this word for later
.d43e	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d441					Here1 = *	; remember here
>d43c	03					.byte CodeLen	;patch wh_CodeLength
>d441	a1					.byte $a1
>d442	6c 64 78			Name0:	.text "ldx"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54213					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d445	03					.byte (("ldx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d446	10					.byte WordFlags	;wh_Flags
>d447	03					.byte 3	;wh_CodeLength
>d448	0b					  .byte LinkDisplacement	; offset to previous nt
=$d449					XtPtr1 ::= *
=54213					WordListLink ::= Nt0 ; remember the nt of this word for later
.d449	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d44c					Here1 = *	; remember here
>d447	03					.byte CodeLen	;patch wh_CodeLength
>d44c	ae					.byte $ae
>d44d	6c 64 78 2e 23			Name0:	.text "ldx.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54226					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d452	65					.byte (("ldx.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d453	10					.byte WordFlags	;wh_Flags
>d454	03					.byte 3	;wh_CodeLength
>d455	0d					  .byte LinkDisplacement	; offset to previous nt
=$d456					XtPtr1 ::= *
=54226					WordListLink ::= Nt0 ; remember the nt of this word for later
.d456	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d459					Here1 = *	; remember here
>d454	03					.byte CodeLen	;patch wh_CodeLength
>d459	a2					.byte $a2
>d45a	6c 64 78 2e 79			Name0:	.text "ldx.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54239					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d45f	25					.byte (("ldx.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d460	10					.byte WordFlags	;wh_Flags
>d461	03					.byte 3	;wh_CodeLength
>d462	0d					  .byte LinkDisplacement	; offset to previous nt
=$d463					XtPtr1 ::= *
=54239					WordListLink ::= Nt0 ; remember the nt of this word for later
.d463	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d466					Here1 = *	; remember here
>d461	03					.byte CodeLen	;patch wh_CodeLength
>d466	be					.byte $be
>d467	6c 64 78 2e 7a			Name0:	.text "ldx.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54252					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d46c	45					.byte (("ldx.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d46d	10					.byte WordFlags	;wh_Flags
>d46e	03					.byte 3	;wh_CodeLength
>d46f	0d					  .byte LinkDisplacement	; offset to previous nt
=$d470					XtPtr1 ::= *
=54252					WordListLink ::= Nt0 ; remember the nt of this word for later
.d470	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d473					Here1 = *	; remember here
>d46e	03					.byte CodeLen	;patch wh_CodeLength
>d473	a6					.byte $a6
>d474	6c 64 78 2e 7a 79		Name0:	.text "ldx.zy"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54266					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d47a	26					.byte (("ldx.zy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d47b	10					.byte WordFlags	;wh_Flags
>d47c	03					.byte 3	;wh_CodeLength
>d47d	0e					  .byte LinkDisplacement	; offset to previous nt
=$d47e					XtPtr1 ::= *
=54266					WordListLink ::= Nt0 ; remember the nt of this word for later
.d47e	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d481					Here1 = *	; remember here
>d47c	03					.byte CodeLen	;patch wh_CodeLength
>d481	b6					.byte $b6
>d482	6c 64 79			Name0:	.text "ldy"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54277					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d485	23					.byte (("ldy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d486	10					.byte WordFlags	;wh_Flags
>d487	03					.byte 3	;wh_CodeLength
>d488	0b					  .byte LinkDisplacement	; offset to previous nt
=$d489					XtPtr1 ::= *
=54277					WordListLink ::= Nt0 ; remember the nt of this word for later
.d489	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d48c					Here1 = *	; remember here
>d487	03					.byte CodeLen	;patch wh_CodeLength
>d48c	ac					.byte $ac
>d48d	6c 64 79 2e 23			Name0:	.text "ldy.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54290					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d492	65					.byte (("ldy.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d493	10					.byte WordFlags	;wh_Flags
>d494	03					.byte 3	;wh_CodeLength
>d495	0d					  .byte LinkDisplacement	; offset to previous nt
=$d496					XtPtr1 ::= *
=54290					WordListLink ::= Nt0 ; remember the nt of this word for later
.d496	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d499					Here1 = *	; remember here
>d494	03					.byte CodeLen	;patch wh_CodeLength
>d499	a0					.byte $a0
>d49a	6c 64 79 2e 78			Name0:	.text "ldy.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54303					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d49f	05					.byte (("ldy.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4a0	10					.byte WordFlags	;wh_Flags
>d4a1	03					.byte 3	;wh_CodeLength
>d4a2	0d					  .byte LinkDisplacement	; offset to previous nt
=$d4a3					XtPtr1 ::= *
=54303					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4a3	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d4a6					Here1 = *	; remember here
>d4a1	03					.byte CodeLen	;patch wh_CodeLength
>d4a6	bc					.byte $bc
>d4a7	6c 64 79 2e 7a			Name0:	.text "ldy.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54316					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4ac	45					.byte (("ldy.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4ad	10					.byte WordFlags	;wh_Flags
>d4ae	03					.byte 3	;wh_CodeLength
>d4af	0d					  .byte LinkDisplacement	; offset to previous nt
=$d4b0					XtPtr1 ::= *
=54316					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4b0	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d4b3					Here1 = *	; remember here
>d4ae	03					.byte CodeLen	;patch wh_CodeLength
>d4b3	a4					.byte $a4
>d4b4	6c 64 79 2e 7a 78		Name0:	.text "ldy.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54330					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4ba	06					.byte (("ldy.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d4bb	10					.byte WordFlags	;wh_Flags
>d4bc	03					.byte 3	;wh_CodeLength
>d4bd	0e					  .byte LinkDisplacement	; offset to previous nt
=$d4be					XtPtr1 ::= *
=54330					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4be	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d4c1					Here1 = *	; remember here
>d4bc	03					.byte CodeLen	;patch wh_CodeLength
>d4c1	b4					.byte $b4
>d4c2	6c 73 72			Name0:	.text "lsr"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54341					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4c5	43					.byte (("lsr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d4c6	10					.byte WordFlags	;wh_Flags
>d4c7	03					.byte 3	;wh_CodeLength
>d4c8	0b					  .byte LinkDisplacement	; offset to previous nt
=$d4c9					XtPtr1 ::= *
=54341					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4c9	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d4cc					Here1 = *	; remember here
>d4c7	03					.byte CodeLen	;patch wh_CodeLength
>d4cc	4e					.byte $4e
>d4cd	6c 73 72 2e 61			Name0:	.text "lsr.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54354					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4d2	25					.byte (("lsr.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4d3	10					.byte WordFlags	;wh_Flags
>d4d4	03					.byte 3	;wh_CodeLength
>d4d5	0d					  .byte LinkDisplacement	; offset to previous nt
=$d4d6					XtPtr1 ::= *
=54354					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4d6	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d4d9					Here1 = *	; remember here
>d4d4	03					.byte CodeLen	;patch wh_CodeLength
>d4d9	4a					.byte $4a
>d4da	6c 73 72 2e 78			Name0:	.text "lsr.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54367					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4df	05					.byte (("lsr.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4e0	10					.byte WordFlags	;wh_Flags
>d4e1	03					.byte 3	;wh_CodeLength
>d4e2	0d					  .byte LinkDisplacement	; offset to previous nt
=$d4e3					XtPtr1 ::= *
=54367					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4e3	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d4e6					Here1 = *	; remember here
>d4e1	03					.byte CodeLen	;patch wh_CodeLength
>d4e6	5e					.byte $5e
>d4e7	6c 73 72 2e 7a			Name0:	.text "lsr.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54380					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4ec	45					.byte (("lsr.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4ed	10					.byte WordFlags	;wh_Flags
>d4ee	03					.byte 3	;wh_CodeLength
>d4ef	0d					  .byte LinkDisplacement	; offset to previous nt
=$d4f0					XtPtr1 ::= *
=54380					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4f0	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d4f3					Here1 = *	; remember here
>d4ee	03					.byte CodeLen	;patch wh_CodeLength
>d4f3	46					.byte $46
>d4f4	6c 73 72 2e 7a 78		Name0:	.text "lsr.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54394					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4fa	06					.byte (("lsr.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d4fb	10					.byte WordFlags	;wh_Flags
>d4fc	03					.byte 3	;wh_CodeLength
>d4fd	0e					  .byte LinkDisplacement	; offset to previous nt
=$d4fe					XtPtr1 ::= *
=54394					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4fe	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d501					Here1 = *	; remember here
>d4fc	03					.byte CodeLen	;patch wh_CodeLength
>d501	56					.byte $56
>d502	6e 6f 70			Name0:	.text "nop"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54405					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d505	03					.byte (("nop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d506	10					.byte WordFlags	;wh_Flags
>d507	03					.byte 3	;wh_CodeLength
>d508	0b					  .byte LinkDisplacement	; offset to previous nt
=$d509					XtPtr1 ::= *
=54405					WordListLink ::= Nt0 ; remember the nt of this word for later
.d509	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d50c					Here1 = *	; remember here
>d507	03					.byte CodeLen	;patch wh_CodeLength
>d50c	ea					.byte $ea
>d50d	6f 72 61			Name0:	.text "ora"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54416					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d510	23					.byte (("ora"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d511	10					.byte WordFlags	;wh_Flags
>d512	03					.byte 3	;wh_CodeLength
>d513	0b					  .byte LinkDisplacement	; offset to previous nt
=$d514					XtPtr1 ::= *
=54416					WordListLink ::= Nt0 ; remember the nt of this word for later
.d514	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d517					Here1 = *	; remember here
>d512	03					.byte CodeLen	;patch wh_CodeLength
>d517	0d					.byte $0d
>d518	6f 72 61 2e 23			Name0:	.text "ora.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54429					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d51d	65					.byte (("ora.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d51e	10					.byte WordFlags	;wh_Flags
>d51f	03					.byte 3	;wh_CodeLength
>d520	0d					  .byte LinkDisplacement	; offset to previous nt
=$d521					XtPtr1 ::= *
=54429					WordListLink ::= Nt0 ; remember the nt of this word for later
.d521	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d524					Here1 = *	; remember here
>d51f	03					.byte CodeLen	;patch wh_CodeLength
>d524	09					.byte $09
>d525	6f 72 61 2e 78			Name0:	.text "ora.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54442					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d52a	05					.byte (("ora.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d52b	10					.byte WordFlags	;wh_Flags
>d52c	03					.byte 3	;wh_CodeLength
>d52d	0d					  .byte LinkDisplacement	; offset to previous nt
=$d52e					XtPtr1 ::= *
=54442					WordListLink ::= Nt0 ; remember the nt of this word for later
.d52e	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d531					Here1 = *	; remember here
>d52c	03					.byte CodeLen	;patch wh_CodeLength
>d531	1d					.byte $1d
>d532	6f 72 61 2e 79			Name0:	.text "ora.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54455					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d537	25					.byte (("ora.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d538	10					.byte WordFlags	;wh_Flags
>d539	03					.byte 3	;wh_CodeLength
>d53a	0d					  .byte LinkDisplacement	; offset to previous nt
=$d53b					XtPtr1 ::= *
=54455					WordListLink ::= Nt0 ; remember the nt of this word for later
.d53b	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d53e					Here1 = *	; remember here
>d539	03					.byte CodeLen	;patch wh_CodeLength
>d53e	19					.byte $19
>d53f	6f 72 61 2e 7a			Name0:	.text "ora.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54468					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d544	45					.byte (("ora.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d545	10					.byte WordFlags	;wh_Flags
>d546	03					.byte 3	;wh_CodeLength
>d547	0d					  .byte LinkDisplacement	; offset to previous nt
=$d548					XtPtr1 ::= *
=54468					WordListLink ::= Nt0 ; remember the nt of this word for later
.d548	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d54b					Here1 = *	; remember here
>d546	03					.byte CodeLen	;patch wh_CodeLength
>d54b	05					.byte $05
>d54c	6f 72 61 2e 7a 69 79		Name0:	.text "ora.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54483					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d553	27					.byte (("ora.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d554	10					.byte WordFlags	;wh_Flags
>d555	03					.byte 3	;wh_CodeLength
>d556	0f					  .byte LinkDisplacement	; offset to previous nt
=$d557					XtPtr1 ::= *
=54483					WordListLink ::= Nt0 ; remember the nt of this word for later
.d557	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d55a					Here1 = *	; remember here
>d555	03					.byte CodeLen	;patch wh_CodeLength
>d55a	11					.byte $11
>d55b	6f 72 61 2e 7a 78		Name0:	.text "ora.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54497					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d561	06					.byte (("ora.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d562	10					.byte WordFlags	;wh_Flags
>d563	03					.byte 3	;wh_CodeLength
>d564	0e					  .byte LinkDisplacement	; offset to previous nt
=$d565					XtPtr1 ::= *
=54497					WordListLink ::= Nt0 ; remember the nt of this word for later
.d565	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d568					Here1 = *	; remember here
>d563	03					.byte CodeLen	;patch wh_CodeLength
>d568	15					.byte $15
>d569	6f 72 61 2e 7a 78 69		Name0:	.text "ora.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54512					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d570	27					.byte (("ora.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d571	10					.byte WordFlags	;wh_Flags
>d572	03					.byte 3	;wh_CodeLength
>d573	0f					  .byte LinkDisplacement	; offset to previous nt
=$d574					XtPtr1 ::= *
=54512					WordListLink ::= Nt0 ; remember the nt of this word for later
.d574	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d577					Here1 = *	; remember here
>d572	03					.byte CodeLen	;patch wh_CodeLength
>d577	01					.byte $01
>d578	70 68 61			Name0:	.text "pha"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54523					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d57b	23					.byte (("pha"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d57c	10					.byte WordFlags	;wh_Flags
>d57d	03					.byte 3	;wh_CodeLength
>d57e	0b					  .byte LinkDisplacement	; offset to previous nt
=$d57f					XtPtr1 ::= *
=54523					WordListLink ::= Nt0 ; remember the nt of this word for later
.d57f	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d582					Here1 = *	; remember here
>d57d	03					.byte CodeLen	;patch wh_CodeLength
>d582	48					.byte $48
>d583	70 68 70			Name0:	.text "php"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54534					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d586	03					.byte (("php"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d587	10					.byte WordFlags	;wh_Flags
>d588	03					.byte 3	;wh_CodeLength
>d589	0b					  .byte LinkDisplacement	; offset to previous nt
=$d58a					XtPtr1 ::= *
=54534					WordListLink ::= Nt0 ; remember the nt of this word for later
.d58a	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d58d					Here1 = *	; remember here
>d588	03					.byte CodeLen	;patch wh_CodeLength
>d58d	08					.byte $08
>d58e	70 6c 61			Name0:	.text "pla"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54545					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d591	23					.byte (("pla"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d592	10					.byte WordFlags	;wh_Flags
>d593	03					.byte 3	;wh_CodeLength
>d594	0b					  .byte LinkDisplacement	; offset to previous nt
=$d595					XtPtr1 ::= *
=54545					WordListLink ::= Nt0 ; remember the nt of this word for later
.d595	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d598					Here1 = *	; remember here
>d593	03					.byte CodeLen	;patch wh_CodeLength
>d598	68					.byte $68
>d599	70 6c 70			Name0:	.text "plp"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54556					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d59c	03					.byte (("plp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d59d	10					.byte WordFlags	;wh_Flags
>d59e	03					.byte 3	;wh_CodeLength
>d59f	0b					  .byte LinkDisplacement	; offset to previous nt
=$d5a0					XtPtr1 ::= *
=54556					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5a0	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d5a3					Here1 = *	; remember here
>d59e	03					.byte CodeLen	;patch wh_CodeLength
>d5a3	28					.byte $28
>d5a4	72 6f 6c			Name0:	.text "rol"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54567					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5a7	83					.byte (("rol"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d5a8	10					.byte WordFlags	;wh_Flags
>d5a9	03					.byte 3	;wh_CodeLength
>d5aa	0b					  .byte LinkDisplacement	; offset to previous nt
=$d5ab					XtPtr1 ::= *
=54567					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5ab	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d5ae					Here1 = *	; remember here
>d5a9	03					.byte CodeLen	;patch wh_CodeLength
>d5ae	2e					.byte $2e
>d5af	72 6f 6c 2e 61			Name0:	.text "rol.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54580					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5b4	25					.byte (("rol.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5b5	10					.byte WordFlags	;wh_Flags
>d5b6	03					.byte 3	;wh_CodeLength
>d5b7	0d					  .byte LinkDisplacement	; offset to previous nt
=$d5b8					XtPtr1 ::= *
=54580					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5b8	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d5bb					Here1 = *	; remember here
>d5b6	03					.byte CodeLen	;patch wh_CodeLength
>d5bb	2a					.byte $2a
>d5bc	72 6f 6c 2e 78			Name0:	.text "rol.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54593					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5c1	05					.byte (("rol.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5c2	10					.byte WordFlags	;wh_Flags
>d5c3	03					.byte 3	;wh_CodeLength
>d5c4	0d					  .byte LinkDisplacement	; offset to previous nt
=$d5c5					XtPtr1 ::= *
=54593					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5c5	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d5c8					Here1 = *	; remember here
>d5c3	03					.byte CodeLen	;patch wh_CodeLength
>d5c8	3e					.byte $3e
>d5c9	72 6f 6c 2e 7a			Name0:	.text "rol.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54606					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5ce	45					.byte (("rol.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5cf	10					.byte WordFlags	;wh_Flags
>d5d0	03					.byte 3	;wh_CodeLength
>d5d1	0d					  .byte LinkDisplacement	; offset to previous nt
=$d5d2					XtPtr1 ::= *
=54606					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5d2	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d5d5					Here1 = *	; remember here
>d5d0	03					.byte CodeLen	;patch wh_CodeLength
>d5d5	26					.byte $26
>d5d6	72 6f 6c 2e 7a 78		Name0:	.text "rol.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54620					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5dc	06					.byte (("rol.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d5dd	10					.byte WordFlags	;wh_Flags
>d5de	03					.byte 3	;wh_CodeLength
>d5df	0e					  .byte LinkDisplacement	; offset to previous nt
=$d5e0					XtPtr1 ::= *
=54620					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5e0	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d5e3					Here1 = *	; remember here
>d5de	03					.byte CodeLen	;patch wh_CodeLength
>d5e3	36					.byte $36
>d5e4	72 6f 72			Name0:	.text "ror"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54631					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5e7	43					.byte (("ror"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d5e8	10					.byte WordFlags	;wh_Flags
>d5e9	03					.byte 3	;wh_CodeLength
>d5ea	0b					  .byte LinkDisplacement	; offset to previous nt
=$d5eb					XtPtr1 ::= *
=54631					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5eb	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d5ee					Here1 = *	; remember here
>d5e9	03					.byte CodeLen	;patch wh_CodeLength
>d5ee	6e					.byte $6e
>d5ef	72 6f 72 2e 61			Name0:	.text "ror.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54644					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5f4	25					.byte (("ror.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5f5	10					.byte WordFlags	;wh_Flags
>d5f6	03					.byte 3	;wh_CodeLength
>d5f7	0d					  .byte LinkDisplacement	; offset to previous nt
=$d5f8					XtPtr1 ::= *
=54644					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5f8	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d5fb					Here1 = *	; remember here
>d5f6	03					.byte CodeLen	;patch wh_CodeLength
>d5fb	6a					.byte $6a
>d5fc	72 6f 72 2e 78			Name0:	.text "ror.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54657					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d601	05					.byte (("ror.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d602	10					.byte WordFlags	;wh_Flags
>d603	03					.byte 3	;wh_CodeLength
>d604	0d					  .byte LinkDisplacement	; offset to previous nt
=$d605					XtPtr1 ::= *
=54657					WordListLink ::= Nt0 ; remember the nt of this word for later
.d605	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d608					Here1 = *	; remember here
>d603	03					.byte CodeLen	;patch wh_CodeLength
>d608	7e					.byte $7e
>d609	72 6f 72 2e 7a			Name0:	.text "ror.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54670					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d60e	45					.byte (("ror.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d60f	10					.byte WordFlags	;wh_Flags
>d610	03					.byte 3	;wh_CodeLength
>d611	0d					  .byte LinkDisplacement	; offset to previous nt
=$d612					XtPtr1 ::= *
=54670					WordListLink ::= Nt0 ; remember the nt of this word for later
.d612	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d615					Here1 = *	; remember here
>d610	03					.byte CodeLen	;patch wh_CodeLength
>d615	66					.byte $66
>d616	72 6f 72 2e 7a 78		Name0:	.text "ror.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54684					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d61c	06					.byte (("ror.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d61d	10					.byte WordFlags	;wh_Flags
>d61e	03					.byte 3	;wh_CodeLength
>d61f	0e					  .byte LinkDisplacement	; offset to previous nt
=$d620					XtPtr1 ::= *
=54684					WordListLink ::= Nt0 ; remember the nt of this word for later
.d620	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d623					Here1 = *	; remember here
>d61e	03					.byte CodeLen	;patch wh_CodeLength
>d623	76					.byte $76
>d624	72 74 69			Name0:	.text "rti"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54695					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d627	23					.byte (("rti"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d628	10					.byte WordFlags	;wh_Flags
>d629	03					.byte 3	;wh_CodeLength
>d62a	0b					  .byte LinkDisplacement	; offset to previous nt
=$d62b					XtPtr1 ::= *
=54695					WordListLink ::= Nt0 ; remember the nt of this word for later
.d62b	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d62e					Here1 = *	; remember here
>d629	03					.byte CodeLen	;patch wh_CodeLength
>d62e	40					.byte $40
>d62f	72 74 73			Name0:	.text "rts"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54706					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d632	63					.byte (("rts"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d633	10					.byte WordFlags	;wh_Flags
>d634	03					.byte 3	;wh_CodeLength
>d635	0b					  .byte LinkDisplacement	; offset to previous nt
=$d636					XtPtr1 ::= *
=54706					WordListLink ::= Nt0 ; remember the nt of this word for later
.d636	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d639					Here1 = *	; remember here
>d634	03					.byte CodeLen	;patch wh_CodeLength
>d639	60					.byte $60
>d63a	73 62 63			Name0:	.text "sbc"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54717					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d63d	63					.byte (("sbc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d63e	10					.byte WordFlags	;wh_Flags
>d63f	03					.byte 3	;wh_CodeLength
>d640	0b					  .byte LinkDisplacement	; offset to previous nt
=$d641					XtPtr1 ::= *
=54717					WordListLink ::= Nt0 ; remember the nt of this word for later
.d641	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d644					Here1 = *	; remember here
>d63f	03					.byte CodeLen	;patch wh_CodeLength
>d644	ed					.byte $ed
>d645	73 62 63 2e 23			Name0:	.text "sbc.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54730					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d64a	65					.byte (("sbc.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d64b	10					.byte WordFlags	;wh_Flags
>d64c	03					.byte 3	;wh_CodeLength
>d64d	0d					  .byte LinkDisplacement	; offset to previous nt
=$d64e					XtPtr1 ::= *
=54730					WordListLink ::= Nt0 ; remember the nt of this word for later
.d64e	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d651					Here1 = *	; remember here
>d64c	03					.byte CodeLen	;patch wh_CodeLength
>d651	e9					.byte $e9
>d652	73 62 63 2e 78			Name0:	.text "sbc.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54743					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d657	05					.byte (("sbc.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d658	10					.byte WordFlags	;wh_Flags
>d659	03					.byte 3	;wh_CodeLength
>d65a	0d					  .byte LinkDisplacement	; offset to previous nt
=$d65b					XtPtr1 ::= *
=54743					WordListLink ::= Nt0 ; remember the nt of this word for later
.d65b	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d65e					Here1 = *	; remember here
>d659	03					.byte CodeLen	;patch wh_CodeLength
>d65e	fd					.byte $fd
>d65f	73 62 63 2e 79			Name0:	.text "sbc.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54756					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d664	25					.byte (("sbc.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d665	10					.byte WordFlags	;wh_Flags
>d666	03					.byte 3	;wh_CodeLength
>d667	0d					  .byte LinkDisplacement	; offset to previous nt
=$d668					XtPtr1 ::= *
=54756					WordListLink ::= Nt0 ; remember the nt of this word for later
.d668	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d66b					Here1 = *	; remember here
>d666	03					.byte CodeLen	;patch wh_CodeLength
>d66b	f9					.byte $f9
>d66c	73 62 63 2e 7a			Name0:	.text "sbc.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54769					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d671	45					.byte (("sbc.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d672	10					.byte WordFlags	;wh_Flags
>d673	03					.byte 3	;wh_CodeLength
>d674	0d					  .byte LinkDisplacement	; offset to previous nt
=$d675					XtPtr1 ::= *
=54769					WordListLink ::= Nt0 ; remember the nt of this word for later
.d675	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d678					Here1 = *	; remember here
>d673	03					.byte CodeLen	;patch wh_CodeLength
>d678	e5					.byte $e5
>d679	73 62 63 2e 7a 69 79		Name0:	.text "sbc.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54784					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d680	27					.byte (("sbc.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d681	10					.byte WordFlags	;wh_Flags
>d682	03					.byte 3	;wh_CodeLength
>d683	0f					  .byte LinkDisplacement	; offset to previous nt
=$d684					XtPtr1 ::= *
=54784					WordListLink ::= Nt0 ; remember the nt of this word for later
.d684	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d687					Here1 = *	; remember here
>d682	03					.byte CodeLen	;patch wh_CodeLength
>d687	f1					.byte $f1
>d688	73 62 63 2e 7a 78		Name0:	.text "sbc.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54798					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d68e	06					.byte (("sbc.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d68f	10					.byte WordFlags	;wh_Flags
>d690	03					.byte 3	;wh_CodeLength
>d691	0e					  .byte LinkDisplacement	; offset to previous nt
=$d692					XtPtr1 ::= *
=54798					WordListLink ::= Nt0 ; remember the nt of this word for later
.d692	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d695					Here1 = *	; remember here
>d690	03					.byte CodeLen	;patch wh_CodeLength
>d695	f5					.byte $f5
>d696	73 62 63 2e 7a 78 69		Name0:	.text "sbc.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54813					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d69d	27					.byte (("sbc.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d69e	10					.byte WordFlags	;wh_Flags
>d69f	03					.byte 3	;wh_CodeLength
>d6a0	0f					  .byte LinkDisplacement	; offset to previous nt
=$d6a1					XtPtr1 ::= *
=54813					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6a1	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d6a4					Here1 = *	; remember here
>d69f	03					.byte CodeLen	;patch wh_CodeLength
>d6a4	e1					.byte $e1
>d6a5	73 65 63			Name0:	.text "sec"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54824					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6a8	63					.byte (("sec"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d6a9	10					.byte WordFlags	;wh_Flags
>d6aa	03					.byte 3	;wh_CodeLength
>d6ab	0b					  .byte LinkDisplacement	; offset to previous nt
=$d6ac					XtPtr1 ::= *
=54824					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6ac	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d6af					Here1 = *	; remember here
>d6aa	03					.byte CodeLen	;patch wh_CodeLength
>d6af	38					.byte $38
>d6b0	73 65 64			Name0:	.text "sed"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54835					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6b3	83					.byte (("sed"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d6b4	10					.byte WordFlags	;wh_Flags
>d6b5	03					.byte 3	;wh_CodeLength
>d6b6	0b					  .byte LinkDisplacement	; offset to previous nt
=$d6b7					XtPtr1 ::= *
=54835					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6b7	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d6ba					Here1 = *	; remember here
>d6b5	03					.byte CodeLen	;patch wh_CodeLength
>d6ba	f8					.byte $f8
>d6bb	73 65 69			Name0:	.text "sei"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54846					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6be	23					.byte (("sei"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d6bf	10					.byte WordFlags	;wh_Flags
>d6c0	03					.byte 3	;wh_CodeLength
>d6c1	0b					  .byte LinkDisplacement	; offset to previous nt
=$d6c2					XtPtr1 ::= *
=54846					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6c2	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d6c5					Here1 = *	; remember here
>d6c0	03					.byte CodeLen	;patch wh_CodeLength
>d6c5	78					.byte $78
>d6c6	73 74 61			Name0:	.text "sta"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54857					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6c9	23					.byte (("sta"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d6ca	10					.byte WordFlags	;wh_Flags
>d6cb	03					.byte 3	;wh_CodeLength
>d6cc	0b					  .byte LinkDisplacement	; offset to previous nt
=$d6cd					XtPtr1 ::= *
=54857					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6cd	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d6d0					Here1 = *	; remember here
>d6cb	03					.byte CodeLen	;patch wh_CodeLength
>d6d0	8d					.byte $8d
>d6d1	73 74 61 2e 78			Name0:	.text "sta.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54870					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6d6	05					.byte (("sta.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d6d7	10					.byte WordFlags	;wh_Flags
>d6d8	03					.byte 3	;wh_CodeLength
>d6d9	0d					  .byte LinkDisplacement	; offset to previous nt
=$d6da					XtPtr1 ::= *
=54870					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6da	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d6dd					Here1 = *	; remember here
>d6d8	03					.byte CodeLen	;patch wh_CodeLength
>d6dd	9d					.byte $9d
>d6de	73 74 61 2e 79			Name0:	.text "sta.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54883					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6e3	25					.byte (("sta.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d6e4	10					.byte WordFlags	;wh_Flags
>d6e5	03					.byte 3	;wh_CodeLength
>d6e6	0d					  .byte LinkDisplacement	; offset to previous nt
=$d6e7					XtPtr1 ::= *
=54883					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6e7	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d6ea					Here1 = *	; remember here
>d6e5	03					.byte CodeLen	;patch wh_CodeLength
>d6ea	99					.byte $99
>d6eb	73 74 61 2e 7a			Name0:	.text "sta.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54896					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6f0	45					.byte (("sta.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d6f1	10					.byte WordFlags	;wh_Flags
>d6f2	03					.byte 3	;wh_CodeLength
>d6f3	0d					  .byte LinkDisplacement	; offset to previous nt
=$d6f4					XtPtr1 ::= *
=54896					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6f4	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d6f7					Here1 = *	; remember here
>d6f2	03					.byte CodeLen	;patch wh_CodeLength
>d6f7	85					.byte $85
>d6f8	73 74 61 2e 7a 69 79		Name0:	.text "sta.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54911					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6ff	27					.byte (("sta.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d700	10					.byte WordFlags	;wh_Flags
>d701	03					.byte 3	;wh_CodeLength
>d702	0f					  .byte LinkDisplacement	; offset to previous nt
=$d703					XtPtr1 ::= *
=54911					WordListLink ::= Nt0 ; remember the nt of this word for later
.d703	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d706					Here1 = *	; remember here
>d701	03					.byte CodeLen	;patch wh_CodeLength
>d706	91					.byte $91
>d707	73 74 61 2e 7a 78		Name0:	.text "sta.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54925					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d70d	06					.byte (("sta.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d70e	10					.byte WordFlags	;wh_Flags
>d70f	03					.byte 3	;wh_CodeLength
>d710	0e					  .byte LinkDisplacement	; offset to previous nt
=$d711					XtPtr1 ::= *
=54925					WordListLink ::= Nt0 ; remember the nt of this word for later
.d711	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d714					Here1 = *	; remember here
>d70f	03					.byte CodeLen	;patch wh_CodeLength
>d714	95					.byte $95
>d715	73 74 61 2e 7a 78 69		Name0:	.text "sta.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54940					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d71c	27					.byte (("sta.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d71d	10					.byte WordFlags	;wh_Flags
>d71e	03					.byte 3	;wh_CodeLength
>d71f	0f					  .byte LinkDisplacement	; offset to previous nt
=$d720					XtPtr1 ::= *
=54940					WordListLink ::= Nt0 ; remember the nt of this word for later
.d720	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d723					Here1 = *	; remember here
>d71e	03					.byte CodeLen	;patch wh_CodeLength
>d723	81					.byte $81
>d724	73 74 78			Name0:	.text "stx"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54951					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d727	03					.byte (("stx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d728	10					.byte WordFlags	;wh_Flags
>d729	03					.byte 3	;wh_CodeLength
>d72a	0b					  .byte LinkDisplacement	; offset to previous nt
=$d72b					XtPtr1 ::= *
=54951					WordListLink ::= Nt0 ; remember the nt of this word for later
.d72b	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d72e					Here1 = *	; remember here
>d729	03					.byte CodeLen	;patch wh_CodeLength
>d72e	8e					.byte $8e
>d72f	73 74 78 2e 7a			Name0:	.text "stx.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54964					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d734	45					.byte (("stx.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d735	10					.byte WordFlags	;wh_Flags
>d736	03					.byte 3	;wh_CodeLength
>d737	0d					  .byte LinkDisplacement	; offset to previous nt
=$d738					XtPtr1 ::= *
=54964					WordListLink ::= Nt0 ; remember the nt of this word for later
.d738	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d73b					Here1 = *	; remember here
>d736	03					.byte CodeLen	;patch wh_CodeLength
>d73b	86					.byte $86
>d73c	73 74 78 2e 7a 79		Name0:	.text "stx.zy"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54978					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d742	26					.byte (("stx.zy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d743	10					.byte WordFlags	;wh_Flags
>d744	03					.byte 3	;wh_CodeLength
>d745	0e					  .byte LinkDisplacement	; offset to previous nt
=$d746					XtPtr1 ::= *
=54978					WordListLink ::= Nt0 ; remember the nt of this word for later
.d746	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d749					Here1 = *	; remember here
>d744	03					.byte CodeLen	;patch wh_CodeLength
>d749	96					.byte $96
>d74a	73 74 79			Name0:	.text "sty"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54989					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d74d	23					.byte (("sty"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d74e	10					.byte WordFlags	;wh_Flags
>d74f	03					.byte 3	;wh_CodeLength
>d750	0b					  .byte LinkDisplacement	; offset to previous nt
=$d751					XtPtr1 ::= *
=54989					WordListLink ::= Nt0 ; remember the nt of this word for later
.d751	20 1d d0	jsr $d01d		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d754					Here1 = *	; remember here
>d74f	03					.byte CodeLen	;patch wh_CodeLength
>d754	8c					.byte $8c
>d755	73 74 79 2e 7a			Name0:	.text "sty.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=55002					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d75a	45					.byte (("sty.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d75b	10					.byte WordFlags	;wh_Flags
>d75c	03					.byte 3	;wh_CodeLength
>d75d	0d					  .byte LinkDisplacement	; offset to previous nt
=$d75e					XtPtr1 ::= *
=55002					WordListLink ::= Nt0 ; remember the nt of this word for later
.d75e	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d761					Here1 = *	; remember here
>d75c	03					.byte CodeLen	;patch wh_CodeLength
>d761	84					.byte $84
>d762	73 74 79 2e 7a 78		Name0:	.text "sty.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=55016					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d768	06					.byte (("sty.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d769	10					.byte WordFlags	;wh_Flags
>d76a	03					.byte 3	;wh_CodeLength
>d76b	0e					  .byte LinkDisplacement	; offset to previous nt
=$d76c					XtPtr1 ::= *
=55016					WordListLink ::= Nt0 ; remember the nt of this word for later
.d76c	20 0b d0	jsr $d00b		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d76f					Here1 = *	; remember here
>d76a	03					.byte CodeLen	;patch wh_CodeLength
>d76f	94					.byte $94
>d770	74 61 78			Name0:	.text "tax"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55027					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d773	03					.byte (("tax"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d774	10					.byte WordFlags	;wh_Flags
>d775	03					.byte 3	;wh_CodeLength
>d776	0b					  .byte LinkDisplacement	; offset to previous nt
=$d777					XtPtr1 ::= *
=55027					WordListLink ::= Nt0 ; remember the nt of this word for later
.d777	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d77a					Here1 = *	; remember here
>d775	03					.byte CodeLen	;patch wh_CodeLength
>d77a	aa					.byte $aa
>d77b	74 61 79			Name0:	.text "tay"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55038					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d77e	23					.byte (("tay"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d77f	10					.byte WordFlags	;wh_Flags
>d780	03					.byte 3	;wh_CodeLength
>d781	0b					  .byte LinkDisplacement	; offset to previous nt
=$d782					XtPtr1 ::= *
=55038					WordListLink ::= Nt0 ; remember the nt of this word for later
.d782	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d785					Here1 = *	; remember here
>d780	03					.byte CodeLen	;patch wh_CodeLength
>d785	a8					.byte $a8
>d786	74 73 78			Name0:	.text "tsx"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55049					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d789	03					.byte (("tsx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d78a	10					.byte WordFlags	;wh_Flags
>d78b	03					.byte 3	;wh_CodeLength
>d78c	0b					  .byte LinkDisplacement	; offset to previous nt
=$d78d					XtPtr1 ::= *
=55049					WordListLink ::= Nt0 ; remember the nt of this word for later
.d78d	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d790					Here1 = *	; remember here
>d78b	03					.byte CodeLen	;patch wh_CodeLength
>d790	ba					.byte $BA
>d791	74 78 61			Name0:	.text "txa"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55060					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d794	23					.byte (("txa"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d795	10					.byte WordFlags	;wh_Flags
>d796	03					.byte 3	;wh_CodeLength
>d797	0b					  .byte LinkDisplacement	; offset to previous nt
=$d798					XtPtr1 ::= *
=55060					WordListLink ::= Nt0 ; remember the nt of this word for later
.d798	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d79b					Here1 = *	; remember here
>d796	03					.byte CodeLen	;patch wh_CodeLength
>d79b	8a					.byte $8a
>d79c	74 78 73			Name0:	.text "txs"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55071					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d79f	63					.byte (("txs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d7a0	10					.byte WordFlags	;wh_Flags
>d7a1	03					.byte 3	;wh_CodeLength
>d7a2	0b					  .byte LinkDisplacement	; offset to previous nt
=$d7a3					XtPtr1 ::= *
=55071					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7a3	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d7a6					Here1 = *	; remember here
>d7a1	03					.byte CodeLen	;patch wh_CodeLength
>d7a6	9a					.byte $9a
>d7a7	74 79 61			Name0:	.text "tya"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55082					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7aa	23					.byte (("tya"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d7ab	10					.byte WordFlags	;wh_Flags
>d7ac	03					.byte 3	;wh_CodeLength
>d7ad	0b					  .byte LinkDisplacement	; offset to previous nt
=$d7ae					XtPtr1 ::= *
=55082					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7ae	20 26 d0	jsr $d026		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d7b1					Here1 = *	; remember here
>d7ac	03					.byte CodeLen	;patch wh_CodeLength
>d7b1	98					.byte $98
=55082					asm_table = WordListLink ; head of instruction word list for disassembler
>d7b2	70 75 73 68 2d 61		Name0:	.text "push-a"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=55096					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7b8	26					.byte (("push-a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d7b9	18					.byte WordFlags	;wh_Flags
>d7ba	03					.byte 3	;wh_CodeLength
>d7bb	0e					  .byte LinkDisplacement	; offset to previous nt
=$d7bc					XtPtr1 ::= *
=55096					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7bc	a9 f0		lda #$f0			lda #<PushZA
.d7be	a0 b7		ldy #$b7			ldy #>PushZA
.d7c0	4c 39 cd	jmp $cd39			jmp Jsr_Comma_YA
=7					CodeLen	.var *-XtPtr1
=$d7c3					Here1 = *	; remember here
>d7ba	07					.byte CodeLen	;patch wh_CodeLength
>d7c3	2d 2d 3e			Name0:	.text "-->"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55110					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7c6	c3					.byte (("-->"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d7c7	18					.byte WordFlags	;wh_Flags
>d7c8	03					.byte 3	;wh_CodeLength
>d7c9	0e					  .byte LinkDisplacement	; offset to previous nt
=$d7ca					XtPtr1 ::= *
=55110					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7ca	4c 40 ca	jmp $ca40			jmp Here
=3					CodeLen	.var *-XtPtr1
=$d7cd					Here1 = *	; remember here
>d7c8	03					.byte CodeLen	;patch wh_CodeLength
>d7cd	3c 6a				Name0:	.text "<j"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=55119					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7cf	42					.byte (("<j"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$08					WordFlags ::= IM	; modifiable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>d7d0	08					.byte WordFlags	;wh_Flags
>d7d1	03					.byte 3	;wh_CodeLength
>d7d2	09					  .byte LinkDisplacement	; offset to previous nt
=$d7d3					XtPtr1 ::= *
=55119					WordListLink ::= Nt0 ; remember the nt of this word for later
=0					CodeLen	.var *-XtPtr1
=$d7d3					Here1 = *	; remember here
>d7d1	00					.byte CodeLen	;patch wh_CodeLength
.d7d3	60		rts				rts
>d7d4	3c 62				Name0:	.text "<b"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=55126					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7d6	42					.byte (("<b"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=7					LinkDisplacement = Nt0-WordListLink
>d7d7	18					.byte WordFlags	;wh_Flags
>d7d8	03					.byte 3	;wh_CodeLength
>d7d9	07					  .byte LinkDisplacement	; offset to previous nt
=$d7da					XtPtr1 ::= *
=55126					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7da					asm_back_branch:
.d7da	20 40 ca	jsr $ca40			jsr Here		; ( addr-l addr-h )
.d7dd	20 cf cb	jsr $cbcf			jsr Minus		; ( offset )
.d7e0	a9 fe		lda #$fe			lda #$fe
.d7e2	4c 62 ca	jmp $ca62			jmp Minus_A
=11					CodeLen	.var *-XtPtr1
=$d7e5					Here1 = *	; remember here
>d7d8	0b					.byte CodeLen	;patch wh_CodeLength
>d7e5	44 69 73 41 73 6d		Name0:	.text "DisAsm"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=55147					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7eb	a6					.byte (("DisAsm"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>d7ec	10					.byte WordFlags	;wh_Flags
>d7ed	03					.byte 3	;wh_CodeLength
>d7ee	15					  .byte LinkDisplacement	; offset to previous nt
=$d7ef					XtPtr1 ::= *
=55147					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7ef					DisAsm:
.d7ef	20 8a c4	jsr $c48a			jsr Bounds		; ( addr_end addr )
.d7f2					_instr:
.d7f2	20 3f b4	jsr $b43f			jsr underflow_2
.d7f5	b5 24		lda $24,x			lda DStack+0,x		; addr >= addr_end?
.d7f7	d5 26		cmp $26,x			cmp DStack+2,x
.d7f9	b5 25		lda $25,x			lda DStack+1,x
.d7fb	f5 27		sbc $27,x			sbc DStack+3,x
.d7fd	90 03		bcc $d802			bcc +
.d7ff	4c 4e c5	jmp $c54e			jmp Two_drop		; discard parms & return
.d802					+
.d802	20 7c ab	jsr $ab7c			jsr CR			; new line
.d805	20 6e cf	jsr $cf6e			jsr Dup			; print address
.d808	20 1c a9	jsr $a91c			jsr Dot_Hex
.d80b	20 e4 cd	jsr $cde4			jsr Space
.d80e	a1 24		lda ($24,x)			lda (DStack+0,x)	; print opcode byte
.d810	20 4d d9	jsr $d94d			jsr _print_a
.d813	a1 24		lda ($24,x)			lda (DStack+0,x)	; save opcode
.d815	85 18		sta $18				sta tmp3
.d817	20 72 ca	jsr $ca72			jsr One_plus
.d81a	a9 2a		lda #$2a			lda #<asm_table		; for each asm opcode word
.d81c	a0 d7		ldy #$d7			ldy #>asm_table
.d81e	85 14		sta $14				sta tmp1+0
.d820	84 15		sty $15				sty tmp1+1
.d822	d0 05		bne $d829			bne _WTest
.d824	20 9b 82	jsr $829b	_WNext:		jsr LinkNext		;   next entry
.d827	f0 28		beq $d851			beq _unknown
.d829	20 c2 bd	jsr $bdc2	_WTest:		jsr NameToIntTmp	; tmp2= xt
.d82c	a0 03		ldy #$03			ldy #3			;   opcode match?
.d82e	b1 16		lda ($16),y			lda (tmp2),y
.d830	c5 18		cmp $18				cmp tmp3
.d832	d0 f0		bne $d824			bne _WNext
.d834	a5 18		lda $18				lda tmp3		; save opcode
.d836	48		pha				pha
.d837	a5 15		lda $15				lda tmp1+1		; save its nt
.d839	48		pha				pha
.d83a	a5 14		lda $14				lda tmp1+0
.d83c	48		pha				pha
.d83d	a0 01		ldy #$01			ldy #1			; get processor routine addr lo byte from JSR
.d83f	b1 16		lda ($16),y			lda (tmp2),y
.d841	c9 26		cmp #$26			cmp #<asm_0		; goto disasm processor
.d843	f0 1a		beq $d85f			beq _c0
.d845	c9 0b		cmp #$0b			cmp #<asm_1
.d847	f0 4c		beq $d895			beq _c1
.d849	c9 1d		cmp #$1d			cmp #<asm_2
.d84b	f0 64		beq $d8b1			beq _c2
.d84d	c9 eb		cmp #$eb			cmp #<asm_r
.d84f	f0 1b		beq $d86c			beq _cr
.d851					_unknown:
.d851	20 2e d9	jsr $d92e			jsr _tab		; to source area
.d854	a9 3f		lda #$3f			lda #'?'
.d856	20 d8 cd	jsr $cdd8			jsr Emit_A
.d859	68		pla				pla			; RDrop nt
.d85a	68		pla				pla
.d85b	68		pla				pla			; RDrop opcode
.d85c	4c f2 d7	jmp $d7f2			jmp _instr
.d85f					_c0:
.d85f	20 2e d9	jsr $d92e			jsr _tab		; to source area
.d862	68		pla				pla			; get opcode word nt
.d863	a8		tay				tay
.d864	68		pla				pla
.d865	20 33 d9	jsr $d933			jsr _print_opcode
.d868	68		pla				pla			; discard opcode
.d869	4c f2 d7	jmp $d7f2			jmp _instr
.d86c					_cr:
.d86c	20 44 d9	jsr $d944			jsr _get_byte		; get displacement byte
.d86f	a0 00		ldy #$00			ldy #0			; sign extend displacement
.d871	09 00		ora #$00			ora #0
.d873	10 01		bpl $d876			bpl +
.d875	88		dey				dey
.d876	20 c1 b7	jsr $b7c1	+		jsr PushYA
.d879	20 6e cf	jsr $cf6e			jsr Dup			; save for TypeSymbol
.d87c	20 2e d9	jsr $d92e			jsr _tab		; to source area
.d87f	20 e7 cb	jsr $cbe7			jsr Dot			; print dest address
.d882	68		pla				pla			; get opcode word nt
.d883	a8		tay				tay
.d884	68		pla				pla
.d885	20 33 d9	jsr $d933			jsr _print_opcode
.d888	68		pla				pla			; discard opcode
.d889	20 47 cf	jsr $cf47			jsr Over		; calc dest addr
.d88c	20 b7 cb	jsr $cbb7			jsr Plus
.d88f	20 99 81	jsr $8199			jsr TypeSymbol		; print dest addr symbolic
.d892	4c f2 d7	jmp $d7f2			jmp _instr
.d895					_c1:
.d895	20 44 d9	jsr $d944			jsr _get_byte		; get operand
.d898	20 f0 b7	jsr $b7f0			jsr PushZA
.d89b	20 2e d9	jsr $d92e			jsr _tab		; to source area
.d89e	20 6e cf	jsr $cf6e			jsr Dup
.d8a1	20 18 cc	jsr $cc18			jsr U_Dot		; print operand
.d8a4	68		pla				pla			; get opcode word nt
.d8a5	a8		tay				tay
.d8a6	68		pla				pla
.d8a7	20 33 d9	jsr $d933			jsr _print_opcode
.d8aa	68		pla				pla			; discard opcode
.d8ab	20 99 81	jsr $8199			jsr TypeSymbol
.d8ae	4c f2 d7	jmp $d7f2			jmp _instr
.d8b1					_c2:
.d8b1	20 44 d9	jsr $d944			jsr _get_byte		; get operand lo byte
.d8b4	48		pha				pha
.d8b5	20 44 d9	jsr $d944			jsr _get_byte		; get operand hi byte
.d8b8	ca		dex				dex			; push operand bytes
.d8b9	ca		dex				dex
.d8ba	95 25		sta $25,x			sta DStack+1,x
.d8bc	68		pla				pla
.d8bd	95 24		sta $24,x			sta DStack+0,x
.d8bf	20 2e d9	jsr $d92e			jsr _tab		; to source area
.d8c2	20 6e cf	jsr $cf6e			jsr Dup
.d8c5	20 18 cc	jsr $cc18			jsr U_Dot		; print operand
.d8c8	68		pla				pla			; AY= opcode word nt
.d8c9	a8		tay				tay
.d8ca	68		pla				pla
.d8cb	20 33 d9	jsr $d933			jsr _print_opcode
.d8ce	20 6e cf	jsr $cf6e			jsr Dup
.d8d1	20 99 81	jsr $8199			jsr TypeSymbol		; print operand as symbol
.d8d4	68		pla				pla			; get opcode
.d8d5	c9 20		cmp #$20			cmp #$20		;  JSR
.d8d7	f0 09		beq $d8e2			beq _jsr
.d8d9	e8		inx		_jdrop:		inx			; Drop operand
.d8da	e8		inx				inx
.d8db	4c f2 d7	jmp $d7f2			jmp _instr		; ( addr_end addr )
.d8de	e8		inx		_2drop:		inx			; Drop jsr_nt
.d8df	e8		inx				inx
.d8e0	d0 f7		bne $d8d9			bne _jdrop
.d8e2					_jsr:
.d8e2	20 02 b4	jsr $b402			jsr PopYA
.d8e5	c9 b5		cmp #$b5			cmp #<sliteral_runtime	; string literal?
.d8e7	d0 42		bne $d92b			bne _not_sliteral
.d8e9	c0 b8		cpy #$b8			cpy #>sliteral_runtime
.d8eb	d0 3e		bne $d92b			bne _not_sliteral
.d8ed	20 7c ab	jsr $ab7c			jsr CR
.d8f0	20 6e cf	jsr $cf6e			jsr Dup			; ( addr_end addr addr )
.d8f3	20 1c a9	jsr $a91c			jsr Dot_Hex
.d8f6	20 e4 cd	jsr $cde4			jsr Space
.d8f9	20 6e cf	jsr $cf6e			jsr Dup			; ( addr_end ? addr )
.d8fc	20 44 d9	jsr $d944			jsr _get_byte		; get JMP opcode
.d8ff	20 44 d9	jsr $d944			jsr _get_byte		; get JMP addr lo byte
.d902	95 26		sta $26,x			sta DStack+2,x
.d904	20 44 d9	jsr $d944			jsr _get_byte		; get JMP addr hi byte
.d907	95 27		sta $27,x			sta DStack+3,x		; ( addr_end string_end addr )
.d909	20 7c ab	jsr $ab7c			jsr CR
.d90c	20 6e cf	jsr $cf6e			jsr Dup
.d90f	20 1c a9	jsr $a91c			jsr Dot_Hex
.d912	20 e4 cd	jsr $cde4			jsr Space
.d915	b5 24		lda $24,x	_slit_11:	lda DStack+0,x		; done with string data?
.d917	d5 26		cmp $26,x			cmp DStack+2,x
.d919	b5 25		lda $25,x			lda DStack+1,x
.d91b	f5 27		sbc $27,x			sbc DStack+3,x
.d91d	b0 06		bcs $d925			bcs _slit_19
.d91f	20 44 d9	jsr $d944			jsr _get_byte
.d922	4c 15 d9	jmp $d915			jmp _slit_11
.d925					_slit_19:
.d925	20 a8 c9	jsr $c9a8			jsr Nip			; ( addr_end addr )
.d928	4c f2 d7	jmp $d7f2			jmp _instr
.d92b					_not_sliteral:
.d92b	4c f2 d7	jmp $d7f2			jmp _instr
.d92e					_tab:
.d92e	a9 09		lda #$09			lda #9
.d930	4c d8 cd	jmp $cdd8			jmp Emit_A
.d933					_print_opcode:
.d933	20 7c cf	jsr $cf7c			jsr PushAY		; save opcode word nt
.d936	20 e4 cd	jsr $cde4			jsr Space
.d939	20 fe bd	jsr $bdfe			jsr Name_To_String	; get name string
.d93c	4c f0 cd	jmp $cdf0			jmp Type		; type word name
.d93f					_get_byte_silent:
.d93f	a1 24		lda ($24,x)			lda (DStack+0,x)
.d941	4c 72 ca	jmp $ca72			jmp One_plus
.d944					_get_byte:
.d944	20 3f d9	jsr $d93f			jsr _get_byte_silent
.d947	48		pha				pha
.d948	20 4d d9	jsr $d94d			jsr _print_a
.d94b	68		pla				pla
.d94c	60		rts				rts
.d94d					_print_a:
.d94d	20 f0 b7	jsr $b7f0			jsr PushZA
.d950	20 fb a8	jsr $a8fb			jsr C_Dot_Hex
.d953	4c e4 cd	jmp $cde4			jmp Space
=55147					assembler_dictionary_start = WordListLink ; END of ASSEMBLER-WORDLIST
=0					WordListLink .var 0	; start wordlist
>d956	6c				Name0:	.text "l"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=55511					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d957	81					.byte (("l"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=55511					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>d958	11					.byte WordFlags	;wh_Flags
>d959	03					.byte 3	;wh_CodeLength
>d95a	00 00					  .word WordListLink
=$d95c					XtPtr1 ::= *
=55511					WordListLink ::= Nt0 ; remember the nt of this word for later
.d95c	4c d4 a4	jmp $a4d4	Editor_l:	jmp ListScr
=3					CodeLen	.var *-XtPtr1
=$d95f					Here1 = *	; remember here
>d959	03					.byte CodeLen	;patch wh_CodeLength
.d95f					Editor_Screen_Helper:
.d95f	20 6e cf	jsr $cf6e			jsr Dup
.d962	20 e6 a2	jsr $a2e6			jsr Scr
.d965	20 c9 ce	jsr $cec9			jsr Store
.d968	4c f1 a3	jmp $a3f1			jmp Buffer
>d96b	65 6e 74 65 72 2d 73 63		Name0:	.text "enter-screen"	;  name of word as a string, ending at wh_NameLastChar
>d973	72 65 65 6e
=12					NameLength = *-Name0
=55543					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d977	cc					.byte (("enter-screen"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>d978	10					.byte WordFlags	;wh_Flags
>d979	03					.byte 3	;wh_CodeLength
>d97a	20					  .byte LinkDisplacement	; offset to previous nt
=$d97b					XtPtr1 ::= *
=55543					WordListLink ::= Nt0 ; remember the nt of this word for later
.d97b					Editor_Enter_Screen:
.d97b	20 5f d9	jsr $d95f			jsr Editor_Screen_Helper
.d97e	a9 00		lda #$00			lda #0			; Overwrite the lines one at a time.
.d980	95 24		sta $24,x	_loop:		sta DStack+0,x
.d982	20 f0 b7	jsr $b7f0			jsr PushZA		; Put the current line number on the stack.
.d985	20 e5 d9	jsr $d9e5			jsr Editor_o		; prompt for overwrite.
.d988	f6 24		inc $24,x			inc DStack+0,x		; Move on to the next line.
.d98a	b5 24		lda $24,x			lda DStack+0,x
.d98c	c9 10		cmp #$10			cmp #16
.d98e	90 f0		bcc $d980			bcc _loop
.d990	e8		inx				inx			; Drop work area
.d991	e8		inx				inx
=23					CodeLen	.var *-XtPtr1
=$d992					Here1 = *	; remember here
>d979	17					.byte CodeLen	;patch wh_CodeLength
.d992	60		rts				rts
>d993	6c 69 6e 65			Name0:	.text "line"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=55575					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d997	a4					.byte (("line"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>d998	10					.byte WordFlags	;wh_Flags
>d999	03					.byte 3	;wh_CodeLength
>d99a	20					  .byte LinkDisplacement	; offset to previous nt
=$d99b					XtPtr1 ::= *
=55575					WordListLink ::= Nt0 ; remember the nt of this word for later
.d99b					Editor_line:
.d99b	a9 06		lda #$06			lda #6		; Multiply the TOS by 64 (chars/line) to compute offset.
.d99d	20 5a cb	jsr $cb5a			jsr LShift_A	; *64 is same as left shift 6 times.
.d9a0	20 e6 a2	jsr $a2e6			jsr Scr
.d9a3	20 b0 ce	jsr $ceb0			jsr Fetch
.d9a6	20 89 a3	jsr $a389			jsr Block
.d9a9	4c b7 cb	jmp $cbb7			jmp Plus
=17					CodeLen	.var *-XtPtr1
=$d9ac					Here1 = *	; remember here
>d999	11					.byte CodeLen	;patch wh_CodeLength
>d9ac	65 72 61 73 65 2d 73 63		Name0:	.text "erase-screen"	;  name of word as a string, ending at wh_NameLastChar
>d9b4	72 65 65 6e
=12					NameLength = *-Name0
=55608					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d9b8	cc					.byte (("erase-screen"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>d9b9	10					.byte WordFlags	;wh_Flags
>d9ba	03					.byte 3	;wh_CodeLength
>d9bb	21					  .byte LinkDisplacement	; offset to previous nt
=$d9bc					XtPtr1 ::= *
=55608					WordListLink ::= Nt0 ; remember the nt of this word for later
.d9bc					Editor_Erase_Screen:
.d9bc	20 5f d9	jsr $d95f			jsr Editor_Screen_Helper
.d9bf	a9 00		lda #$00			lda #<1024
.d9c1	a0 04		ldy #$04			ldy #>1024
.d9c3	20 c1 b7	jsr $b7c1			jsr PushYA
.d9c6	20 45 be	jsr $be45			jsr Blank		; Erase the entire block (fill with spaces).
.d9c9	4c de a3	jmp $a3de			jmp Update		; Mark buffer as updated.
=16					CodeLen	.var *-XtPtr1
=$d9cc					Here1 = *	; remember here
>d9ba	10					.byte CodeLen	;patch wh_CodeLength
>d9cc	65 6c				Name0:	.text "el"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=55630					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d9ce	82					.byte (("el"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>d9cf	10					.byte WordFlags	;wh_Flags
>d9d0	03					.byte 3	;wh_CodeLength
>d9d1	16					  .byte LinkDisplacement	; offset to previous nt
=$d9d2					XtPtr1 ::= *
=55630					WordListLink ::= Nt0 ; remember the nt of this word for later
.d9d2					Editor_el:
.d9d2	20 9b d9	jsr $d99b			jsr Editor_line
.d9d5	a9 40		lda #$40			lda #64			;(# of chars/line)
.d9d7	20 f0 b7	jsr $b7f0			jsr PushZA
.d9da	20 45 be	jsr $be45			jsr Blank		; Fill with spaces.
.d9dd	4c de a3	jmp $a3de			jmp Update		; Mark buffer as updated.
=14					CodeLen	.var *-XtPtr1
=$d9e0					Here1 = *	; remember here
>d9d0	0e					.byte CodeLen	;patch wh_CodeLength
>d9e0	6f				Name0:	.text "o"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=55649					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d9e1	e1					.byte (("o"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>d9e2	10					.byte WordFlags	;wh_Flags
>d9e3	03					.byte 3	;wh_CodeLength
>d9e4	13					  .byte LinkDisplacement	; offset to previous nt
=$d9e5					XtPtr1 ::= *
=55649					WordListLink ::= Nt0 ; remember the nt of this word for later
.d9e5					Editor_o:
.d9e5	20 7c ab	jsr $ab7c			jsr CR
.d9e8	20 6e cf	jsr $cf6e			jsr Dup
.d9eb	a9 02		lda #$02			lda #2
.d9ed	20 4a cc	jsr $cc4a			jsr U_Dot_R_A
.d9f0	20 e4 cd	jsr $cde4			jsr Space
.d9f3	a9 2a		lda #$2a			lda #'*'
.d9f5	20 d8 cd	jsr $cdd8			jsr Emit_A
.d9f8	20 e4 cd	jsr $cde4			jsr Space
.d9fb	20 9b d9	jsr $d99b			jsr Editor_line
.d9fe	20 6e cf	jsr $cf6e			jsr Dup		; Save a copy of the line address for later.
.da01	a9 40		lda #$40			lda #64		; chars/line
.da03	20 f0 b7	jsr $b7f0			jsr PushZA
.da06	20 c2 c2	jsr $c2c2			jsr Accept
.da09	20 6e cf	jsr $cf6e			jsr Dup
.da0c	20 8e ce	jsr $ce8e			jsr Not_Rot
.da0f	20 b7 cb	jsr $cbb7			jsr Plus
.da12	a9 40		lda #$40			lda #64		; chars/line
.da14	20 f0 b7	jsr $b7f0			jsr PushZA
.da17	20 69 ce	jsr $ce69			jsr Rot
.da1a	20 cf cb	jsr $cbcf			jsr Minus
.da1d	20 45 be	jsr $be45			jsr Blank
.da20	4c de a3	jmp $a3de			jmp Update
=62					CodeLen	.var *-XtPtr1
=$da23					Here1 = *	; remember here
>d9e3	3e					.byte CodeLen	;patch wh_CodeLength
=55649					editor_dictionary_start = WordListLink ; END of EDITOR-WORDLIST

;******  Processing file: platform/../strings.asm

>da23	20 6f 6b 00			str_ok:         .text " ok", 0         ; note space at beginning
>da27	20 63 6f 6d 70 69 6c 65		str_compiled:   .text " compiled", 0   ; note space at beginning
>da2f	64 00
>da31	72 65 64 65 66 69 6e 65		str_redefined:  .text "redefined ", 0  ; note space at end
>da39	64 20 00
>da3c	66 6c 61 67 73 3a 00		str_see_flags:  .text "flags:", 0
>da43	6e 74 3a 20 24 00		str_see_nt:     .text "nt: $", 0
>da49	78 74 3a 20 24 00		str_see_xt:     .text "xt: $", 0
>da4f	73 69 7a 65 3a 20 23 00		str_see_size:   .text "size: #", 0
.da57					Exception_Text_List:
>da57	ff 00					.text $100+err_Abort,0
>da59	fe 00					.text $100+err_AbortQuote,0
>da5b	fd 53 74 61 63 6b 20 4f			.text $100+err_Stack_Overflow,"Stack Overflow",0
>da63	76 65 72 66 6c 6f 77 00
>da6b	fc 53 74 61 63 6b 20 55			.text $100+err_Stack_Underflow,"Stack Underflow",0
>da73	6e 64 65 72 66 6c 6f 77 00
>da7c	f9 64 6f 2d 6c 6f 6f 70			.text $100+err_DoLoop_TooDeep,"do-loops nested too deeply during execution",0
>da84	73 20 6e 65 73 74 65 64 20 74 6f 6f 20 64 65 65
>da94	70 6c 79 20 64 75 72 69 6e 67 20 65 78 65 63 75
>daa4	74 69 6f 6e 00
>daa9	f6 44 69 76 69 64 65 20			.text $100+err_DivideBy0,"Divide by 0",0
>dab1	62 79 20 30 00
>dab6	f5 6f 75 74 20 6f 66 20			.text $100+err_OutOfRange,"out of range",0
>dabe	72 61 6e 67 65 00
>dac4	f4 61 72 67 75 6d 65 6e			.text $100+err_ArgTypeMismatch,"argument type mismatch",0
>dacc	74 20 74 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>dadc	f3 55 6e 64 65 66 69 6e			.text $100+err_UndefinedWord,"Undefined word",0
>dae4	65 64 20 77 6f 72 64 00
>daec	f2 49 6e 74 65 72 70 72			.text $100+err_CompileOnly,"Interpreting a Compile-only word",0
>daf4	65 74 69 6e 67 20 61 20 43 6f 6d 70 69 6c 65 2d
>db04	6f 6e 6c 79 20 77 6f 72 64 00
>db0e	eb 75 6e 73 75 70 70 6f			.text $100+err_Unsupported,"unsupported operation",0 ;  (e.g., AT-XY on a too-dumb terminal)
>db16	72 74 65 64 20 6f 70 65 72 61 74 69 6f 6e 00
>db25	ea 63 6f 6e 74 72 6f 6c			.text $100+err_ControlMismatch,"control structure mismatch",0
>db2d	20 73 74 72 75 63 74 75 72 65 20 6d 69 73 6d 61
>db3d	74 63 68 00
>db41	e0 69 6e 76 61 6c 69 64			.text $100+err_InvalidName,"invalid name",0 ; argument (e.g., TO name)
>db49	20 6e 61 6d 65 00
>db4f	df 62 6c 6f 63 6b 20 72			.text $100+err_BlockRead,"block read",0
>db57	65 61 64 00
>db5b	de 62 6c 6f 63 6b 20 77			.text $100+err_BlockWrite,"block write",0
>db63	72 69 74 65 00
>db68	d6 46 50 20 64 69 76 69			.text $100+err_FPDivideBy0,"FP divide by zero",0
>db70	64 65 20 62 79 20 7a 65 72 6f 00
>db7b	d5 46 50 20 72 65 73 75			.text $100+err_FPOutOfRange,"FP result out of range",0
>db83	6c 74 20 6f 75 74 20 6f 66 20 72 61 6e 67 65 00
>db93	d4 46 50 20 73 74 61 63			.text $100+err_FPStackOverflow,"FP stack overflow",0
>db9b	6b 20 6f 76 65 72 66 6c 6f 77 00
>dba6	d3 46 50 20 73 74 61 63			.text $100+err_FPStackUnderflow,"FP stack underflow",0
>dbae	6b 20 75 6e 64 65 72 66 6c 6f 77 00
>dbba	d2 46 50 20 69 6e 76 61			.text $100+err_FPInvalidArg,"FP invalid argument",0
>dbc2	6c 69 64 20 61 72 67 75 6d 65 6e 74 00
>dbcf	ca 46 50 20 75 6e 64 65			.text $100+err_FPUnderflow,"FP underflow",0
>dbd7	72 66 6c 6f 77 00
>dbdd	c5 41 4c 4c 4f 43 41 54			.text $100+err_Allocate,"ALLOCATE",0
>dbe5	45 00
>dbe7	c4 46 52 45 45 00			.text $100+err_Free,"FREE",0
>dbed	6b 52 65 66 69 6c 6c 00			.text $100+err_Refill,"Refill",0
>dbf5	6a 44 65 66 65 72 20 6e			.text $100+err_Defer,"Defer not set",0
>dbfd	6f 74 20 73 65 74 00
>dc04	69 41 6c 72 65 61 64 79			.text $100+err_AlreadyInterpreting,"Already interpreting",0
>dc0c	20 69 6e 74 65 72 70 72 65 74 69 6e 67 00
>dc1a	68 41 6c 72 65 61 64 79			.text $100+err_AlreadyCompiling,"Already compiling",0
>dc22	20 63 6f 6d 70 69 6c 69 6e 67 00
>dc2d	66 4e 6f 20 77 6f 72 64			.text $100+err_TooManyWordlists,"No wordlists available",0
>dc35	6c 69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>dc45	00					.text 0 ; end of list

;******  Return to file: platform/../taliforth.asm


;******  Return to file: platform/platform-py65mon.asm

>0766					hist_buff: .fill 8*128	; Input History for ACCEPT
.0b66					cp0:
=$f001					c65_putc	= $f001 ;  putc    Write here to send the byte to stdout
=$f003					c65_kbhit	= $f003 ;  kbit    Return non-zero if key ready to fetch with getc
=$f004					c65_getc	= $f004 ;  getc    Non-blocking read from stdin, returns 0 if no byte ready
=$f006					c65_start	= $f006 ;  start   Reading here starts the cycle counter
=$f007					c65_stop	= $f007 ;  stop    Reading here stops the cycle counter
=$f008					c65_cycles	= $f008 ; cycles  Current 32 bit cycle count in NUXI order
=$f010					c65_blkio	= $f010 ;  blkio   Write here to execute a block IO action (see below)
=$f011					c65_status	= $f011 ;  status  Read block IO status here
=$f012					c65_blknum	= $f012 ; blknum  word, Block number to read/write
=$f014					c65_buffer	= $f014 ; buffer  word, Start of 1024 byte memory buffer to read/write
.f100					v_nmi:
.f100					v_reset:
.f100					v_irq:
.f100					kernel_init:
.f100	78		sei		                sei             ; Disable interrupts
.f101	a2 00		ldx #$00	                ldx #0
.f103	bd 83 f1	lda $f183,x	-               lda s_kernel_id,x
.f106	f0 06		beq $f10e	                beq _done
.f108	20 21 f1	jsr $f121	                jsr kernel_putc
.f10b	e8		inx		                inx
.f10c	d0 f5		bne $f103	                bne -
.f10e					_done:
.f10e	2c 06 f0	bit $f006			bit c65_start		; start the cycle counter
.f111	4c 04 a1	jmp $a104	                jmp forth
.f114					kernel_getc:
.f114					_loop:
.f114	ee 35 03	inc $0335	                inc RndState+0	; randomize
.f117	ad 04 f0	lda $f004	                lda c65_getc
.f11a	f0 f8		beq $f114	                beq _loop
.f11c	60		rts		                rts
.f11d					kernel_havekey:
.f11d	ad 03 f0	lda $f003			lda c65_kbhit
.f120	60		rts				rts
.f121					kernel_putc:
.f121	8d 01 f0	sta $f001	                sta c65_putc
.f124	60		rts		                rts
.f125					platform_bye:
.f125	00		brk #		                brk
.f126					platform_CCAt:
.f126	ca		dex				dex			; allot DStack space
.f127	ca		dex				dex
.f128	ca		dex				dex
.f129	ca		dex				dex
.f12a	2c 07 f0	bit $f007			bit c65_stop		; stop the cycle counter so we can read it
.f12d	ad 08 f0	lda $f008			lda c65_cycles+0	; cycles  Current 32 bit cycle count in NUXI order
.f130	95 24		sta $24,x			sta DStack+0,x
.f132	ad 09 f0	lda $f009			lda c65_cycles+1
.f135	95 25		sta $25,x			sta DStack+1,x
.f137	ad 0a f0	lda $f00a			lda c65_cycles+2
.f13a	95 26		sta $26,x			sta DStack+2,x
.f13c	ad 0b f0	lda $f00b			lda c65_cycles+3
.f13f	95 27		sta $27,x			sta DStack+3,x
.f141	2c 06 f0	bit $f006			bit c65_start		; restart the cycle counter
.f144	60		rts		                rts
.f145					Platform_Block_Read:
.f145	20 58 f1	jsr $f158			jsr Platform_BlockParms
.f148	a9 01		lda #$01			lda #1			; read
.f14a	8d 10 f0	sta $f010			sta c65_blkio
.f14d	ad 11 f0	lda $f011			lda c65_status
.f150	f0 05		beq $f157			beq +
.f152	a9 df		lda #$df			lda #$100+err_BlockRead
.f154	20 87 b4	jsr $b487			jsr ThrowA
.f157	60		rts		+		rts
.f158					Platform_BlockParms:
.f158	20 02 b4	jsr $b402			jsr PopYA		; set block #
.f15b	8d 12 f0	sta $f012			sta c65_blknum+0
.f15e	8c 13 f0	sty $f013			sty c65_blknum+1
.f161	20 02 b4	jsr $b402			jsr PopYA		; set buffer addr
.f164	8d 14 f0	sta $f014			sta c65_buffer+0
.f167	8c 15 f0	sty $f015			sty c65_buffer+1
.f16a	a9 ff		lda #$ff			lda #$ff		; in case c65 isn't talking
.f16c	8d 11 f0	sta $f011			sta c65_status
.f16f	60		rts				rts
.f170					Platform_Block_Write:
.f170	20 58 f1	jsr $f158			jsr Platform_BlockParms
.f173	a9 02		lda #$02			lda #2			; write
.f175	8d 10 f0	sta $f010			sta c65_blkio
.f178	ad 11 f0	lda $f011			lda c65_status
.f17b	f0 05		beq $f182			beq +
.f17d	a9 de		lda #$de			lda #$100+err_BlockWrite
.f17f	20 87 b4	jsr $b487			jsr ThrowA
.f182	60		rts		+		rts
.f183					s_kernel_id:
>f183	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 remix default kernel for py65mon (31 May 2024)", AscLF, 0
>f18b	74 68 20 32 20 72 65 6d 69 78 20 64 65 66 61 75
>f19b	6c 74 20 6b 65 72 6e 65 6c 20 66 6f 72 20 70 79
>f1ab	36 35 6d 6f 6e 20 28 33 31 20 4d 61 79 20 32 30
>f1bb	32 34 29 0a 00
>fffa	00 f1				.word v_nmi
>fffc	00 f1				.word v_reset
>fffe	00 f1				.word v_irq

;******  End of listing
