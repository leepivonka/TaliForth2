
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/pu65mon-labelmap.txt --output TaliForth-py65mon.bin platform/platform-py65mon.asm
; Sun Jun 16 12:25:02 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

=$0100					RStack = $0100 ; begin of 6502 Return stack
=$ff					rsp0      = $ff		; initial Return Stack Pointer (6502 stack)
=$8000					cp_end = $8000 ; LastRAM byte available for Data
=84					PadOffset = 84	; offset from CP to PAD (holds number strings)
=79					MAX_LINE_LENGTH  = 79      ; output line size
=20					DDim = 20	; # of cells in data stack
=10					FDim = 10	; # of entries in floating-point stack
=8					DoStkDim = 8	; # of entries in Do stack
=["lf"]					TALI_OPTION_CR_EOL := [ "lf" ]
=$ff					bsize     = $ff		; size of input/output buffers
>0200					buffer0: .fill bsize	; input buffer

;******  Processing file: platform/../taliforth.asm

=					TALI_OPTIONAL_WORDS := ["fp","fpe", "fpieee","fptrancendentals", "ed", "editor", "ramdrive", "block", "environment?", "assembler", "wordlist" ]
=-1					err_Abort		= -1
=-2					err_AbortQuote		= -2
=-3					err_Stack_Overflow	= -3
=-4					err_Stack_Underflow	= -4
=-5					err_Return_Stack_Overflow = -5
=-6					err_Return_Stack_Underflow = -6
=-7					err_DoLoop_TooDeep	= -7	; do-loops nested too deeply during execution
=-8					err_Dictionary_Overflow	= -8
=-9					err_InvalidMemoryAddr	= -9	; invalid memory address
=-10					err_DivideBy0		= -10	; division by zero
=-11					err_OutOfRange		= -11	; result out of range
=-12					err_ArgTypeMismatch	= -12	; argument type mismatch
=-13					err_UndefinedWord	= -13
=-14					err_CompileOnly		= -14	; interpreting a compile-only word
=-15					err_Forget		= -15	; invalid FORGET
=-16					err_EmptyName		= -16	; attempt to use zero-length string as a name
=-17					err_PicStringOverflow	= -17	; pictured numeric output string overflow
=-18					err_ParsedStringOverflow = -18	; parsed string overflow
=-19					err_NameTooLong		= -19	; definition name too long
=-20					err_WriteToRO		= -20	; write to a read-only location
=-21					err_Unsupported		= -21	; unsupported operation  (e.g., AT-XY on a too-dumb terminal)
=-22					err_ControlMismatch	= -22	; control structure mismatch
=-23					err_AddrAlignment	= -23	; address alignment exception
=-24					err_InvalidNumericArg	= -24	; invalid numeric argument
=-25					err_ReturnStackImbalance = -25	; return stack imbalance
=-26					err_LoopParmUnavailable = -26	; loop parameters unavailable
=-27					err_InvalidRecursion	= -27	; invalid recursion
=-28					err_UserInterrupt	= -28	; user interrupt
=-29					err_CompilerNesting	= -29	; compiler nesting
=-30					err_Obsolete		= -30	; obsolescent feature
=-31					err_NoBody		= -31	; >BODY used on non-CREATEd definition
=-32					err_InvalidName		= -32	; invalid name argument (e.g., TO name)
=-33					err_BlockRead		= -33	; block read exception
=-34					err_BlockWrite		= -34	; block write exception
=-35					err_InvalidBlock	= -35	; invalid block number
=-36					err_InvalidFilePosition = -36	; invalid file position
=-37					err_FileIO		= -37	; file I/O exception
=-38					err_FileMissing		= -38	; non-existent file
=-39					err_EndOfFile		= -39	; unexpected end of file
=-40					err_InvalidBase		= -40	; invalid BASE for floating point conversion
=-41					err_LossOfPrecision	= -41	; loss of precision
=-42					err_FPDivideBy0		= -42	; floating-point divide by zero
=-43					err_FPOutOfRange	= -43	; floating-point result out of range
=-44					err_FPStackOverflow	= -44	; floating-point stack overflow
=-45					err_FPStackUnderflow	= -45	; floating-point stack underflow
=-46					err_FPInvalidArg	= -46	; floating-point invalid argument
=-47					err_CompileWordsDeleted = -47	; compilation word list deleted
=-48					err_PostponeInvalid	= -48	; invalid POSTPONE
=-49					err_SearchOrderOverflow = -49	; search-order overflow
=-50					err_SearchOrderUnderflow = -50	; search-order underflow
=-51					err_CompileWordlistChanged = -51 ; compilation word list changed
=-52					err_ControlStackOverflow = -52	; control-flow stack overflow
=-53					err_ExceptionStackOverflow = -53 ; exception stack overflow
=-54					err_FPUnderflow		= -54	; floating-point underflow
=-55					err_FPFault		= -55	; floating-point unidentified fault
=-56					err_Quit		= -56	; QUIT
=-57					err_ConsoleIO		= -57	; exception in sending or receiving a character
=-58					err_BracketIf		= -58	; [IF], [ELSE], or [THEN] exception
=-59					err_Allocate		= -59	; ALLOCATE
=-60					err_Free		= -60	; FREE
=-61					err_Resize		= -61	; RESIZE
=-62					err_CloseFile		= -62	; CLOSE-FILE
=-63					err_CreateFile		= -63	; CREATE-FILE
=-64					err_DeleteFile		= -64	; DELETE-FILE
=-65					err_FilePosition	= -65	; FILE-POSITION
=-66					err_FileSize		= -66	; FILE-SIZE
=-67					err_FileStatus		= -67	; FILE-STATUS
=-68					err_FlushFile		= -68	; FLUSH-FILE
=-69					err_OpenFile		= -69	; OPEN-FILE
=-70					err_ReadFile		= -70	; READ-FILE
=-71					err_ReadLine		= -71	; READ-LINE
=-72					err_RenameFile		= -72	; RENAME-FILE
=-73					err_RepositionFile	= -73	; REPOSITION-FILE
=-74					err_ResizeFile		= -74	; RESIZE-FILE
=-75					err_WriteFile		= -75	; WRITE-FILE
=-76					err_WriteLine		= -76	; WRITE-LINE
=-77					err_MalformedXChar	= -77	; Malformed xchar
=-78					err_Substitute		= -78	; SUBSTITUTE
=-79					err_Replaces		= -79	; REPLACES
=-149					err_Refill		= -149	; Refill failed
=-150					err_Defer		= -150	; Defer not set
=-151					err_NotCompiling	= -151
=-152					err_AlreadyCompiling	= -152
=-153					err_BlockWordsNotSet	= -153
=-154					err_wordlist     	= -154
.0000					zp0:
>0000					cp:	.word ?		; Compiler Pointer (see HERE)
>0002					InSrc:	.word ?		; input Source for SOURCE-ID
>0004					Cib:	.word ?		; address of current input buffer
>0006					CibLen:	.word ?		; length of current input buffer
>0008					ToIn:	.word ?		; pointer to CIB (>IN in Forth)
>000a					state:	.word ?		; STATE: -1 compile, 0 interpret
>000c					status: .word ?		; internal status flags
>000e					WorkWord: .word ?	; nt or xt of word being compiled (see status)
>0010					dp:	.word ?		; Dictionary Pointer temp
>0012					DoIndex: .word ?	; current Do index
>0014					tmp1:	.word ?		; temporary storage
>0016					tmp2:	.word ?		; temporary storage
>0018					tmp3:	.word ?		; temporary storage
>001a					tmp4:	.word ?		; temporary storage (tmpdsp)
>001c					tmp5:	.word ?		; temporary storage (tmptos)
>001e					editor1: .word ?	; temporary for editors
>0020					editor2: .word ?	; temporary for editors
>0022					editor3: .word ?	; temporary for editors
>0024					DStack:	.fill DDim*2	; data stack
=40					DStack0 = *-DStack	;   initial Data Stack index value
.8000					Cold_zp_table:
>8000	66 0b					.word cp0		; cp
>8002	00 00					.word 0			; insrc (SOURCE-ID is 0 for keyboard)
>8004	00 02					.word buffer0		; cib
>8006	00 00					.word 0			; ciblen
>8008	00 00					.word 0			; toin
>800a	00 00					.word 0			; state (0 = interpret)
>800c	00 00					.word 0			; status
=14					Cold_zp_table_length = *-Cold_zp_table
.02ff					User0:
>02ff					PrecisionV: .byte ?	; # of decimal places for FP print
>0300					base:	.word ?		; number radix, default decimal
>0302					nc_limit: .word ?	; limit for Native Compile size
>0304					uf_strip: .word ?	; flag to strip underflow detection code
>0306					output:	.word ?		; vector for EMIT
>0308					input:	.word ?		; vector for KEY
>030a					HaveKey: .word ?	; vector for KEY?
>030c					BlkV:	.word ?		; BLK
>030e					ScrV:	.word ?		; SCR
>0310					CurrentV: .byte ?	; CURRENT (byte) (Compilation wordlist)
>0311					Num_WordlistsV: .byte ?	; #WORDLISTS (byte)
=12					max_wordlists = 12	; Maximum number of wordlists supported
>0312					WordlistsV: .fill 2*max_wordlists	; WORDLISTS (cells)
>032a					Num_OrderV: .byte ?	; #ORDER (byte)
>032b					Search_OrderV: .fill 9	; SEARCH-ORDER (bytes)
.0334					MarkEnd:
>0334					ToHold:	.byte ?		; index for formatted output
>0335					RndState: .dword ?	; random # state
=0					wid_Forth = 0
=1					wid_Editor = 1
=2					wid_Assembler = 2
=3					wid_Root = 3
.800e					Cold_user_table:
>800e	08					.byte 8			; PrecisionV
>800f	0a 00					.word 10		; base
>8011	08 00					.word 8			; nc-limit
>8013	00 00					.word 0			; uf_strip (off by default)
>8015	2a f0					.word kernel_putc	; output
>8017	21 f0					.word kernel_getc	; input
>8019	11 b3					.word Abort		; havekey
>801b	00 00					.word 0				; BLK
>801d	00 00					.word 0				; SCR
>801f	00					.byte 0				; CURRENT = FORTH-WORDLIST
>8020	04					.byte 4				; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>8021	1b ce					.word forth_dictionary_start	; FORTH-WORDLIST
>8023	5a d9					.word editor_dictionary_start	; EDITOR-WORDLIST
>8025	06 d7					.word assembler_dictionary_start ; ASSEMBLER-WORDLIST
>8027	5f ce					.word root_dictionary_start	; ROOT-WORDLIST
>8029	00 00 00 00 00 00 00 00			.word 0,0,0,0,0,0,0,0		; User wordlists
>8031	00 00 00 00 00 00 00 00
>8039	02					.byte 2				; #ORDER
>803a	00 02 00 00 00 00 00 00			.byte wid_Forth,wid_Assembler,0,0,0,0,0,0,0	; search-order
>8042	00
=53					Cold_user_table_length = *-Cold_user_table
=$03					AscCC   = $03	; break (CTRL-c)
=$07					AscBELL = $07	; bell sound
=$08					AscBS   = $08	; backspace
=$09					AscHT	= $09	; tab
=$0a					AscLF   = $0a	; line feed
=$0b					AScVT	= $0b	; vertical tab
=$0c					AscFF	= $0c	; form feed
=$0d					AscCR   = $0d	; carriage return
=$0e					AscCN   = $0e	; CTRL-n (used to recall next input history)
=$10					AscCP   = $10	; CTRL-p (used to recall previous input history)
=$1b					AscESC  = $1b	; escape
=$20					AscSP   = $20	; space
=$22					AscDQuote = $22	; double quote
=$5c					AscBackslash = $5c ; backslash
=$7f					AscDEL  = $7f	; delete (CTRL-h)
>0000							.fill $80 ; name, right justified
=127					wh_NameLastChar	= *-1	;last char of name
>0080					wh_NameLength:	.byte ?	;length of name
>0081					wh_WordListLink: .word ? ;link to nt of previous word in wordlist chain
>0083					wh_CodeLength:	.byte ?	;size of code (0xff = 255 or greater)
>0084					wh_Flags:	.byte ?	; created by adding the flags defined as:
=1					CO =   1 ; Compile Only
=2					AN =   2 ; Always Native Compile (may not be called by JSR)
=4					IM =   4 ; Immediate Word
=8					NN =   8 ; Never Native Compile (must always be called by JSR)
=$10					UF = $10 ; Includes strippable Underflow Check
=$40					R6 = $40 ; strip 6 bytes from begin & end when native compiling
.0085					wh_xt:
=0					WordListLink .var 0	 ; start of FORTH wordlist
>8043	43 6f 6c 64			L1:	.text "Cold"	;  name of word as a string, ending at wh_NameLastChar
>8047	04					.byte *-L1	;wh_NameLength	length of name
>8048	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>804a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>804b	08					.byte NN	;wh_Flags	dictionary flags
=32711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.804c					Cold:
.804c	d8		cld				cld
.804d	a2 ff		ldx #$ff			ldx #rsp0		; Initialize 6502 stack (Return Stack)
.804f	9a		txs				txs
.8050	a2 0d		ldx #$0d			ldx #Cold_zp_table_length-1
.8052					-
.8052	bd 00 80	lda $8000,x			lda Cold_zp_table,x
.8055	95 00		sta $00,x			sta zp0,x
.8057	ca		dex				dex
.8058	10 f8		bpl $8052			bpl -
.805a	a0 34		ldy #$34			ldy #Cold_user_table_length-1
.805c	b9 0e 80	lda $800e,y	-		lda Cold_user_table,y
.805f	99 ff 02	sta $02ff,y			sta User0,y
.8062	88		dey				dey
.8063	10 f7		bpl $805c			bpl -
.8065	20 31 b4	jsr $b431			jsr Empty_Stack
.8068	20 29 a1	jsr $a129			jsr BlockInit
.806b	20 7d aa	jsr $aa7d			jsr CR
.806e	a9 9c		lda #$9c			lda #<forth_words_start		; push start address
.8070	a0 80		ldy #$80			ldy #>forth_words_start
.8072	20 f3 b6	jsr $b6f3			jsr PushYA
.8075	a9 d2		lda #$d2			lda #<forth_words_len		; push length
.8077	a0 00		ldy #$00			ldy #>forth_words_len
.8079	20 f3 b6	jsr $b6f3			jsr PushYA
.807c	20 27 af	jsr $af27			jsr Evaluate
.807f	a9 00		lda #$00			lda #0
.8081	8d 66 07	sta $0766			sta hist_buff
.8084	8d e6 07	sta $07e6			sta hist_buff+$80
.8087	8d 66 08	sta $0866			sta hist_buff+$100
.808a	8d e6 08	sta $08e6			sta hist_buff+$180
.808d	8d 66 09	sta $0966			sta hist_buff+$200
.8090	8d e6 09	sta $09e6			sta hist_buff+$280
.8093	8d 66 0a	sta $0a66			sta hist_buff+$300
.8096	8d e6 0a	sta $0ae6			sta hist_buff+$380
.8099	4c e2 b3	jmp $b3e2			jmp Abort_Core2	;Quit
=80					CL	.var *-(WordListLink+wh_Xt)
=$809c					en = *	; remember here
>804a	50					.byte CL	;wh_CodeLength
.809c					forth_words_start:
>809c	20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>80a4	61 6c 69 20 46 6f 72 74 68 20 32 20 72 65 6d 69
>80b4	78 20 66 6f 72 20 74 68 65 20 36 35 30 32 29 20
>80c4	63 72 20 2e 28 20 56 65 72 73 69 6f 6e 20 33 31
>80d4	2e 20 4d 61 79 20 32 30 32 34 20 29 20 63 72 20
>80e4	2e 28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31
>80f4	34 2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53
>8104	74 65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f
>8114	6c 77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c
>8124	69 20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20
>8134	77 69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20
>8144	4e 4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20
>8154	2e 28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f
>8164	20 65 78 69 74 29 20 63 72 20
=210					forth_words_len = *-forth_words_start
.816e					user_words_start:
>816e					.binary "user_words.asc"
=0					user_words_len = *-user_words_start
>816e	4e 6f 4f 70			L1:	.text "NoOp"	;  name of word as a string, ending at wh_NameLastChar
>8172	04					.byte *-L1	;wh_NameLength	length of name
>8173	c7 7f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8175	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8176	00					.byte 0	;wh_Flags	dictionary flags
=33010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8177	ea		nop				nop
=1					CL	.var *-(WordListLink+wh_Xt)
=$8178					en = *	; remember here
>8175	01					.byte CL	;wh_CodeLength
.8178	60		rts				rts
>8179	63 63 40			L1:	.text "cc@"	;  name of word as a string, ending at wh_NameLastChar
>817c	03					.byte *-L1	;wh_NameLength	length of name
>817d	f2 80					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>817f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8180	08					.byte NN	;wh_Flags	dictionary flags
=33020					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8181	4c 2f f0	jmp $f02f	CCAt:		jmp platform_CCAt
=3					CL	.var *-(WordListLink+wh_Xt)
=$8184					en = *	; remember here
>817f	03					.byte CL	;wh_CodeLength
>8184	42 79 65			L1:	.text "Bye"	;  name of word as a string, ending at wh_NameLastChar
>8187	03					.byte *-L1	;wh_NameLength	length of name
>8188	fc 80					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>818a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>818b	08					.byte NN	;wh_Flags	dictionary flags
=33031					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.818c	4c 2e f0	jmp $f02e	Bye:		jmp platform_bye
=3					CL	.var *-(WordListLink+wh_Xt)
=$818f					en = *	; remember here
>818a	03					.byte CL	;wh_CodeLength
>818f	54 79 70 65 53 79 6d 62		L1:	.text "TypeSymbol"	;  name of word as a string, ending at wh_NameLastChar
>8197	6f 6c
>8199	0a					.byte *-L1	;wh_NameLength	length of name
>819a	07 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>819c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>819d	08					.byte NN	;wh_Flags	dictionary flags
=33049					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.819e	20 58 b7	jsr $b758	TypeSymbol:	jsr Two
.81a1	20 7f c3	jsr $c37f			jsr Spaces
.81a4	a9 28		lda #$28			lda #'('
.81a6	20 d3 cc	jsr $ccd3			jsr Emit_A
.81a9	20 e0 cc	jsr $cce0			jsr Space
.81ac	20 65 ce	jsr $ce65			jsr Dup
.81af	a9 24		lda #$24			lda #'$'
.81b1	20 d3 cc	jsr $ccd3			jsr Emit_A
.81b4	20 12 a8	jsr $a812			jsr Dot_Hex
.81b7	20 e0 cc	jsr $cce0			jsr Space
.81ba	20 e1 81	jsr $81e1			jsr DictSearchXt	; ( addr_end addr operand offset nt )
.81bd	20 33 bd	jsr $bd33			jsr Name_To_String	; Change nt into the name
.81c0	20 ed cc	jsr $cced			jsr Type		; print it.
.81c3	20 e0 cc	jsr $cce0			jsr Space
.81c6	b5 24		lda $24,x			lda DStack+0,x		; if non-zero offset
.81c8	15 25		ora $25,x			ora DStack+1,x
.81ca	f0 0b		beq $81d7			beq +
.81cc	a9 2b		lda #$2b			lda #'+'		;   print offset
.81ce	20 d3 cc	jsr $ccd3			jsr Emit_A
.81d1	20 65 ce	jsr $ce65			jsr Dup
.81d4	20 14 cb	jsr $cb14			jsr U_Dot
.81d7	e8		inx		+		inx
.81d8	e8		inx				inx
.81d9	a9 29		lda #$29			lda #')'
.81db	20 d3 cc	jsr $ccd3			jsr Emit_A
.81de	4c e0 cc	jmp $cce0			jmp Space
=67					CL	.var *-(WordListLink+wh_Xt)
=$81e1					en = *	; remember here
>819c	43					.byte CL	;wh_CodeLength
.81e1					DictSearchXt:
.81e1	ca		dex				dex
.81e2	ca		dex				dex
.81e3	20 3c ce	jsr $ce3c			jsr Over
.81e6	a9 ff		lda #$ff			lda #$ff		; init best offset
.81e8	95 29		sta $29,x			sta DStack+5,x		; ( offset nt xt )
.81ea	a9 fe		lda #$fe			lda #$fe		; for each wordlist
.81ec	48		pha				pha
.81ed	68		pla		_ListNext:	pla
.81ee	18		clc				clc
.81ef	69 02		adc #$02			adc #2			; to next wordlist
.81f1	c9 18		cmp #$18			cmp #max_wordlists*2
.81f3	b0 10		bcs $8205			bcs _Done
.81f5	48		pha				pha
.81f6	a8		tay				tay
.81f7	b9 12 03	lda $0312,y			lda WordlistsV+0,y	; Get the DP for that wordlist.
.81fa	85 14		sta $14				sta tmp1+0
.81fc	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.81ff	85 15		sta $15				sta tmp1+1
.8201	d0 14		bne $8217			bne _WordTest
.8203	f0 e8		beq $81ed			beq _ListNext		;   empty list
.8205	e8		inx		_Done:		inx			; Drop xt
.8206	e8		inx				inx
.8207	60		rts				rts
.8208	a0 82		ldy #$82	_WordNext:	ldy #wh_WordListLink+1
.820a	b1 14		lda ($14),y			lda (tmp1),y
.820c	f0 df		beq $81ed			beq _ListNext		; end of Dictionary?
.820e	48		pha				pha
.820f	88		dey				dey
.8210	b1 14		lda ($14),y			lda (tmp1),y
.8212	85 14		sta $14				sta tmp1+0
.8214	68		pla				pla
.8215	85 15		sta $15				sta tmp1+1
.8217	18		clc		_WordTest:	clc			; tmp2 = xt of this word
.8218	a5 14		lda $14				lda tmp1+0
.821a	69 85		adc #$85			adc #wh_xt
.821c	85 16		sta $16				sta tmp2+0
.821e	a5 15		lda $15				lda tmp1+1
.8220	69 00		adc #$00			adc #0
.8222	85 17		sta $17				sta tmp2+1
.8224	38		sec				sec			; tmp2 = xt offset for this word
.8225	b5 24		lda $24,x			lda DStack+0,x
.8227	e5 16		sbc $16				sbc tmp2+0
.8229	85 16		sta $16				sta tmp2+0
.822b	b5 25		lda $25,x			lda DStack+1,x
.822d	e5 17		sbc $17				sbc tmp2+1
.822f	85 17		sta $17				sta tmp2+1
.8231	20 97 82	jsr $8297			jsr _test
.8234	a0 85		ldy #$85			ldy #wh_xt+0		; is this word a constant?
.8236	b1 14		lda ($14),y			lda (tmp1),y
.8238	c9 a0		cmp #$a0			cmp #$a0
.823a	f0 28		beq $8264			beq _PushYA
.823c	c9 a9		cmp #$a9			cmp #$a9
.823e	d0 c8		bne $8208			bne _WordNext
.8240	c8		iny		_PushZA:	iny			; get lda # operand
.8241	b5 24		lda $24,x			lda DStack+0,x
.8243	f1 14		sbc ($14),y			sbc (tmp1),y
.8245	85 16		sta $16				sta tmp2+0
.8247	b5 25		lda $25,x			lda DStack+1,x
.8249	e9 00		sbc #$00			sbc #0
.824b	85 17		sta $17				sta tmp2+1
.824d	c8		iny				iny			; check jmp opcode
.824e	b1 14		lda ($14),y			lda (tmp1),y
.8250	c9 4c		cmp #$4c			cmp #$4c
.8252	d0 b4		bne $8208			bne _WordNext
.8254	c8		iny				iny			; check jmp operand lo
.8255	b1 14		lda ($14),y			lda (tmp1),y
.8257	c9 35		cmp #$35			cmp #<PushZA
.8259	d0 ad		bne $8208			bne _WordNext
.825b	c8		iny				iny			; check jmp operand hi
.825c	b1 14		lda ($14),y			lda (tmp1),y
.825e	c9 b7		cmp #$b7			cmp #>PushZA
.8260	d0 a6		bne $8208			bne _WordNext
.8262	f0 2d		beq $8291			beq _KTest
.8264	a0 87		ldy #$87	_PushYA:	ldy #wh_xt+2		; check LDA # opcode
.8266	b1 14		lda ($14),y			lda (tmp1),y
.8268	c9 a9		cmp #$a9			cmp #$a9
.826a	d0 9c		bne $8208			bne _WordNext
.826c	c8		iny				iny			; get lda # operand
.826d	b5 24		lda $24,x			lda DStack+0,x
.826f	f1 14		sbc ($14),y			sbc (tmp1),y
.8271	85 16		sta $16				sta tmp2+0
.8273	a0 86		ldy #$86			ldy #wh_xt+1		; get LDY # operand
.8275	b5 25		lda $25,x			lda DStack+1,x
.8277	f1 14		sbc ($14),y			sbc (tmp1),y
.8279	85 17		sta $17				sta tmp2+1
.827b	a0 89		ldy #$89			ldy #wh_xt+4		; check JMP opcode
.827d	b1 14		lda ($14),y			lda (tmp1),y
.827f	c9 4c		cmp #$4c			cmp #$4c
.8281	d0 85		bne $8208			bne _WordNext
.8283	c8		iny				iny			; check JMP operand lo
.8284	b1 14		lda ($14),y			lda (tmp1),y
.8286	c9 f3		cmp #$f3			cmp #<PushYA
.8288	d0 0a		bne $8294			bne _WordNext3
.828a	c8		iny				iny			; check JMP operand hi
.828b	b1 14		lda ($14),y			lda (tmp1),y
.828d	c9 b6		cmp #$b6			cmp #>PushYA
.828f	d0 03		bne $8294			bne _WordNext3
.8291	20 97 82	jsr $8297	_KTest:		jsr _test
.8294	4c 08 82	jmp $8208	_WordNext3:	jmp _WordNext
.8297					_test:
.8297	a5 16		lda $16				lda tmp2+0		; this word have smaller offset?
.8299	d5 28		cmp $28,x			cmp DStack+4,x
.829b	a5 17		lda $17				lda tmp2+1
.829d	f5 29		sbc $29,x			sbc DStack+5,x
.829f	b0 10		bcs $82b1			bcs _trts
.82a1	a5 16		lda $16				lda tmp2+0		;   save this better offset
.82a3	a4 17		ldy $17				ldy tmp2+1
.82a5	95 28		sta $28,x			sta DStack+4,x
.82a7	94 29		sty $29,x			sty DStack+5,x
.82a9	a5 14		lda $14				lda tmp1+0		;   save this better nt
.82ab	a4 15		ldy $15				ldy tmp1+1
.82ad	95 26		sta $26,x			sta DStack+2,x
.82af	94 27		sty $27,x			sty DStack+3,x
.82b1	60		rts		_trts:		rts
>82b2	44 53 74 61 63 6b		L1:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
>82b8	06					.byte *-L1	;wh_NameLength	length of name
>82b9	19 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82bc	08					.byte NN	;wh_Flags	dictionary flags
=33336					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82bd	a9 24		lda #$24			lda #DStack
.82bf	4c 35 b7	jmp $b735			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$82c2					en = *	; remember here
>82bb	05					.byte CL	;wh_CodeLength
>82c2	52 6e 64 53 74 61 74 65		L1:	.text "RndState"	;  name of word as a string, ending at wh_NameLastChar
>82ca	08					.byte *-L1	;wh_NameLength	length of name
>82cb	38 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82ce	08					.byte NN	;wh_Flags	dictionary flags
=33354					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82cf	a0 03		ldy #$03			ldy #>RndState
.82d1	a9 35		lda #$35			lda #<RndState
.82d3	4c f3 b6	jmp $b6f3			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$82d6					en = *	; remember here
>82cd	07					.byte CL	;wh_CodeLength
>82d6	52 61 6e 64			L1:	.text "Rand"	;  name of word as a string, ending at wh_NameLastChar
>82da	04					.byte *-L1	;wh_NameLength	length of name
>82db	4a 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82de	00					.byte 0	;wh_Flags	dictionary flags
=33370					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82df					Rand:
.82df	4e 36 03	lsr $0336			lsr RndState+1
.82e2	6e 35 03	ror $0335			ror RndState+0
.82e5	6e 38 03	ror $0338			ror RndState+3
.82e8	6e 37 03	ror $0337			ror RndState+2
.82eb	90 10		bcc $82fd			bcc _19			;  IfCs,
.82ed	ad 36 03	lda $0336			lda RndState+1
.82f0	49 d0		eor #$d0			eor #$d0
.82f2	8d 36 03	sta $0336			sta RndState+1
.82f5	ad 37 03	lda $0337			lda RndState+2
.82f8	49 01		eor #$01			eor #$01
.82fa	8d 37 03	sta $0337			sta RndState+2
.82fd					_19:
.82fd	ad 37 03	lda $0337			lda RndState+2
.8300	ac 38 03	ldy $0338			ldy RndState+3
=36					CL	.var *-(WordListLink+wh_Xt)
=$8303					en = *	; remember here
>82dd	24					.byte CL	;wh_CodeLength
.8303	60		rts				rts
>8304	52 61 6e 64 4d			L1:	.text "RandM"	;  name of word as a string, ending at wh_NameLastChar
>8309	05					.byte *-L1	;wh_NameLength	length of name
>830a	5a 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>830c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>830d	08					.byte NN	;wh_Flags	dictionary flags
=33417					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.830e	20 65 ce	jsr $ce65	RandM:		jsr Dup		; ( umod umod )
.8311	20 df 82	jsr $82df			jsr Rand
.8314	4a		lsr a				lsr a		; make positive
.8315	95 27		sta $27,x			sta DStack+3,x
.8317	94 26		sty $26,x			sty DStack+2,x	; ( rand umod )
.8319	4c 99 ae	jmp $ae99			jmp Mod
=14					CL	.var *-(WordListLink+wh_Xt)
=$831c					en = *	; remember here
>830c	0e					.byte CL	;wh_CodeLength
>004c					fp:	.byte ?		; floating-point stack index
>004d					FSExp:   .fill FDim	; FP stack exponent     array
>0057					FSMant0: .fill FDim	; FP stack mantissa MSB array
>0061					FSMant1: .fill FDim	; FP stack mantissa 2nd array
>006b					FSMant2: .fill FDim	; FP stack mantissa 3rd array
>0075					FSMant3: .fill FDim	; FP stack mantissa 4th array
>831c	46 50				L1:	.text "FP"	;  name of word as a string, ending at wh_NameLastChar
>831e	02					.byte *-L1	;wh_NameLength	length of name
>831f	89 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8321	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8322	08					.byte NN	;wh_Flags	dictionary flags
=33438					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8323	a9 4c		lda #$4c			lda #fp
.8325	4c 35 b7	jmp $b735			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8328					en = *	; remember here
>8321	05					.byte CL	;wh_CodeLength
>8328	46 44 69 6d			L1:	.text "FDim"	;  name of word as a string, ending at wh_NameLastChar
>832c	04					.byte *-L1	;wh_NameLength	length of name
>832d	9e 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>832f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8330	08					.byte NN	;wh_Flags	dictionary flags
=33452					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8331	a9 0a		lda #$0a			lda #FDim
.8333	4c 35 b7	jmp $b735			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8336					en = *	; remember here
>832f	05					.byte CL	;wh_CodeLength
>8336	46 53 45 78 70			L1:	.text "FSExp"	;  name of word as a string, ending at wh_NameLastChar
>833b	05					.byte *-L1	;wh_NameLength	length of name
>833c	ac 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>833e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>833f	08					.byte NN	;wh_Flags	dictionary flags
=33467					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8340	a9 4d		lda #$4d			lda #FSExp
.8342	4c 35 b7	jmp $b735			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8345					en = *	; remember here
>833e	05					.byte CL	;wh_CodeLength
>8345	46 53 4d 61 6e 74 30		L1:	.text "FSMant0"	;  name of word as a string, ending at wh_NameLastChar
>834c	07					.byte *-L1	;wh_NameLength	length of name
>834d	bb 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>834f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8350	08					.byte NN	;wh_Flags	dictionary flags
=33484					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8351	a9 57		lda #$57			lda #FSMant0
.8353	4c 35 b7	jmp $b735			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8356					en = *	; remember here
>834f	05					.byte CL	;wh_CodeLength
>8356	46 53 4d 61 6e 74 31		L1:	.text "FSMant1"	;  name of word as a string, ending at wh_NameLastChar
>835d	07					.byte *-L1	;wh_NameLength	length of name
>835e	cc 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8360	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8361	08					.byte NN	;wh_Flags	dictionary flags
=33501					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8362	a9 61		lda #$61			lda #FSMant1
.8364	4c 35 b7	jmp $b735			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8367					en = *	; remember here
>8360	05					.byte CL	;wh_CodeLength
>8367	46 53 4d 61 6e 74 32		L1:	.text "FSMant2"	;  name of word as a string, ending at wh_NameLastChar
>836e	07					.byte *-L1	;wh_NameLength	length of name
>836f	dd 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8371	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8372	08					.byte NN	;wh_Flags	dictionary flags
=33518					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8373	a9 6b		lda #$6b			lda #FSMant2
.8375	4c 35 b7	jmp $b735			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8378					en = *	; remember here
>8371	05					.byte CL	;wh_CodeLength
>8378	46 53 4d 61 6e 74 33		L1:	.text "FSMant3"	;  name of word as a string, ending at wh_NameLastChar
>837f	07					.byte *-L1	;wh_NameLength	length of name
>8380	ee 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8382	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8383	08					.byte NN	;wh_Flags	dictionary flags
=33535					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8384	a9 75		lda #$75			lda #FSMant3
.8386	4c 35 b7	jmp $b735			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8389					en = *	; remember here
>8382	05					.byte CL	;wh_CodeLength
>8389	46 6c 6f 61 74 2b		L1:	.text "Float+"	;  name of word as a string, ending at wh_NameLastChar
>838f	06					.byte *-L1	;wh_NameLength	length of name
>8390	ff 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8392	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8393	08					.byte NN	;wh_Flags	dictionary flags
=33551					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8394	a9 05		lda #$05	FloatPlus:	lda #5
.8396	4c 0a c9	jmp $c90a			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$8399					en = *	; remember here
>8392	05					.byte CL	;wh_CodeLength
>8399	46 6c 6f 61 74 73		L1:	.text "Floats"	;  name of word as a string, ending at wh_NameLastChar
>839f	06					.byte *-L1	;wh_NameLength	length of name
>83a0	0f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83a3	08					.byte NN	;wh_Flags	dictionary flags
=33567					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83a4	a9 05		lda #$05	Floats:		lda #5
.83a6	20 35 b7	jsr $b735			jsr PushZA
.83a9	4c a9 ad	jmp $ada9			jmp Star
=8					CL	.var *-(WordListLink+wh_Xt)
=$83ac					en = *	; remember here
>83a2	08					.byte CL	;wh_CodeLength
>83ac	50 72 65 63 69 73 69 6f		L1:	.text "Precision"	;  name of word as a string, ending at wh_NameLastChar
>83b4	6e
>83b5	09					.byte *-L1	;wh_NameLength	length of name
>83b6	1f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83b8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83b9	08					.byte NN	;wh_Flags	dictionary flags
=33589					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83ba	ad ff 02	lda $02ff	Precision:	lda PrecisionV
.83bd	4c 35 b7	jmp $b735			jmp PushZA
=6					CL	.var *-(WordListLink+wh_Xt)
=$83c0					en = *	; remember here
>83b8	06					.byte CL	;wh_CodeLength
.83c0	60		rts				rts
>83c1	53 65 74 2d 50 72 65 63		L1:	.text "Set-Precision"	;  name of word as a string, ending at wh_NameLastChar
>83c9	69 73 69 6f 6e
>83ce	0d					.byte *-L1	;wh_NameLength	length of name
>83cf	35 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83d2	08					.byte NN	;wh_Flags	dictionary flags
=33614					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83d3	20 1f b3	jsr $b31f			jsr PopA
.83d6	8d ff 02	sta $02ff			sta PrecisionV
=6					CL	.var *-(WordListLink+wh_Xt)
=$83d9					en = *	; remember here
>83d1	06					.byte CL	;wh_CodeLength
.83d9	60		rts				rts
>83da	46 44 72 6f 70			L1:	.text "FDrop"	;  name of word as a string, ending at wh_NameLastChar
>83df	05					.byte *-L1	;wh_NameLength	length of name
>83e0	4e 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83e3	00					.byte 0	;wh_Flags	dictionary flags
=33631					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83e4	e6 4c		inc $4c		FDrop:		inc fp
=2					CL	.var *-(WordListLink+wh_Xt)
=$83e6					en = *	; remember here
>83e2	02					.byte CL	;wh_CodeLength
.83e6	60		rts				rts
>83e7	46 32 44 72 6f 70		L1:	.text "F2Drop"	;  name of word as a string, ending at wh_NameLastChar
>83ed	06					.byte *-L1	;wh_NameLength	length of name
>83ee	5f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83f1	00					.byte 0	;wh_Flags	dictionary flags
=33645					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83f2	e6 4c		inc $4c		F2Drop:		inc fp
.83f4	e6 4c		inc $4c				inc fp
=4					CL	.var *-(WordListLink+wh_Xt)
=$83f6					en = *	; remember here
>83f0	04					.byte CL	;wh_CodeLength
.83f6	60		rts				rts
>83f7	46 44 65 70 74 68		L1:	.text "FDepth"	;  name of word as a string, ending at wh_NameLastChar
>83fd	06					.byte *-L1	;wh_NameLength	length of name
>83fe	6d 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8400	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8401	08					.byte NN	;wh_Flags	dictionary flags
=33661					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8402	a9 0a		lda #$0a	FDepth:		lda #FDim
.8404	38		sec				sec
.8405	e5 4c		sbc $4c				sbc fp
.8407	4c 35 b7	jmp $b735			jmp PushZA
=8					CL	.var *-(WordListLink+wh_Xt)
=$840a					en = *	; remember here
>8400	08					.byte CL	;wh_CodeLength
>840a	46 41 6c 6c 6f 63 58		L1:	.text "FAllocX"	;  name of word as a string, ending at wh_NameLastChar
>8411	07					.byte *-L1	;wh_NameLength	length of name
>8412	7d 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8414	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8415	08					.byte NN	;wh_Flags	dictionary flags
=33681					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8416	86 14		stx $14		FAllocX:	stx tmp1+0	; save data stack index
.8418	a6 4c		ldx $4c				ldx fp		; X= floating point stack index
.841a	ca		dex				dex		; alloc FP stack entry
.841b	e0 0a		cpx #$0a			cpx #FDim	; overflow or underflow?
.841d	b0 03		bcs $8422			bcs _err
.841f	86 4c		stx $4c				stx fp
.8421	60		rts				rts		; return X= FP stack index
.8422	0a		asl a		_err:		asl a		; save sign bit
.8423	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.8425	6a		ror a				ror a		; restore sign bit
.8426	4c 93 b3	jmp $b393			jmp Throw_FPStack
=19					CL	.var *-(WordListLink+wh_Xt)
=$8429					en = *	; remember here
>8414	13					.byte CL	;wh_CodeLength
>8429	46 4d 61 78			L1:	.text "FMax"	;  name of word as a string, ending at wh_NameLastChar
>842d	04					.byte *-L1	;wh_NameLength	length of name
>842e	91 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8430	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8431	08					.byte NN	;wh_Flags	dictionary flags
=33709					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8432	20 20 86	jsr $8620	FMax:		jsr FCmpA
.8435	10 ad		bpl $83e4			bpl FDrop
.8437	30 19		bmi $8452			bmi FNip
=7					CL	.var *-(WordListLink+wh_Xt)
=$8439					en = *	; remember here
>8430	07					.byte CL	;wh_CodeLength
>8439	46 4d 69 6e			L1:	.text "FMin"	;  name of word as a string, ending at wh_NameLastChar
>843d	04					.byte *-L1	;wh_NameLength	length of name
>843e	ad 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8440	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8441	08					.byte NN	;wh_Flags	dictionary flags
=33725					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8442	20 20 86	jsr $8620	FMin:		jsr FCmpA
.8445	30 9d		bmi $83e4			bmi FDrop
.8447	10 09		bpl $8452			bpl FNip
=7					CL	.var *-(WordListLink+wh_Xt)
=$8449					en = *	; remember here
>8440	07					.byte CL	;wh_CodeLength
>8449	46 4e 69 70			L1:	.text "FNip"	;  name of word as a string, ending at wh_NameLastChar
>844d	04					.byte *-L1	;wh_NameLength	length of name
>844e	bd 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8450	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8451	00					.byte 0	;wh_Flags	dictionary flags
=33741					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8452	86 14		stx $14		FNip:		stx tmp1		; save data stack index
.8454	a6 4c		ldx $4c				ldx fp			; get FP stack index
.8456	b5 4d		lda $4d,x			lda FSExp+0,x		; copy exponent
.8458	95 4e		sta $4e,x			sta FSExp+1,x
.845a	b5 57		lda $57,x			lda FSMant0+0,x		; copy mantissa
.845c	95 58		sta $58,x			sta FSMant0+1,x
.845e	b5 61		lda $61,x			lda FSMant1+0,x
.8460	95 62		sta $62,x			sta FSMant1+1,x
.8462	b5 6b		lda $6b,x			lda FSMant2+0,x
.8464	95 6c		sta $6c,x			sta FSMant2+1,x
.8466	b5 75		lda $75,x			lda FSMant3+0,x
.8468	95 76		sta $76,x			sta FSMant3+1,x
.846a	e6 4c		inc $4c				inc fp			; FDrop
.846c	a6 14		ldx $14				ldx tmp1		; restore data stack index
=28					CL	.var *-(WordListLink+wh_Xt)
=$846e					en = *	; remember here
>8450	1c					.byte CL	;wh_CodeLength
.846e	60		rts				rts
>846f	46 44 75 70			L1:	.text "FDup"	;  name of word as a string, ending at wh_NameLastChar
>8473	04					.byte *-L1	;wh_NameLength	length of name
>8474	cd 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8476	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8477	00					.byte 0	;wh_Flags	dictionary flags
=33779					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8478	20 16 84	jsr $8416	FDup:		jsr FAllocX		; alloc FP stack entry
.847b	b5 4e		lda $4e,x			lda FSExp+1,x		; copy exponent
.847d	95 4d		sta $4d,x			sta FSExp+0,x
.847f	b5 58		lda $58,x			lda FSMant0+1,x		; copy mantissa
.8481	95 57		sta $57,x			sta FSMant0+0,x
.8483	b5 62		lda $62,x			lda FSMant1+1,x
.8485	95 61		sta $61,x			sta FSMant1+0,x
.8487	b5 6c		lda $6c,x			lda FSMant2+1,x
.8489	95 6b		sta $6b,x			sta FSMant2+0,x
.848b	b5 76		lda $76,x			lda FSMant3+1,x
.848d	95 75		sta $75,x			sta FSMant3+0,x
.848f	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CL	.var *-(WordListLink+wh_Xt)
=$8491					en = *	; remember here
>8476	19					.byte CL	;wh_CodeLength
.8491	60		rts				rts
>8492	46 4f 76 65 72			L1:	.text "FOver"	;  name of word as a string, ending at wh_NameLastChar
>8497	05					.byte *-L1	;wh_NameLength	length of name
>8498	f3 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>849a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>849b	00					.byte 0	;wh_Flags	dictionary flags
=33815					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.849c	20 16 84	jsr $8416	FOver:		jsr FAllocX		; alloc FP stack entry
.849f	b5 4f		lda $4f,x			lda FSExp+2,x		; copy exponent
.84a1	95 4d		sta $4d,x			sta FSExp+0,x
.84a3	b5 59		lda $59,x			lda FSMant0+2,x		; copy mantissa
.84a5	95 57		sta $57,x			sta FSMant0+0,x
.84a7	b5 63		lda $63,x			lda FSMant1+2,x
.84a9	95 61		sta $61,x			sta FSMant1+0,x
.84ab	b5 6d		lda $6d,x			lda FSMant2+2,x
.84ad	95 6b		sta $6b,x			sta FSMant2+0,x
.84af	b5 77		lda $77,x			lda FSMant3+2,x
.84b1	95 75		sta $75,x			sta FSMant3+0,x
.84b3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CL	.var *-(WordListLink+wh_Xt)
=$84b5					en = *	; remember here
>849a	19					.byte CL	;wh_CodeLength
.84b5	60		rts				rts
>84b6	46 50 69 63 6b			L1:	.text "FPick"	;  name of word as a string, ending at wh_NameLastChar
>84bb	05					.byte *-L1	;wh_NameLength	length of name
>84bc	17 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84bf	00					.byte 0	;wh_Flags	dictionary flags
=33851					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84c0	20 1f b3	jsr $b31f	FPick:		jsr PopA		; pop u
.84c3	18		clc		FPickA:		clc
.84c4	65 4c		adc $4c				adc fp
.84c6	a8		tay		FPick3:		tay
.84c7	20 16 84	jsr $8416			jsr FAllocX
.84ca	b9 4d 00	lda $004d,y			lda FSExp,y		; copy exponent
.84cd	95 4d		sta $4d,x			sta FSExp,x
.84cf	b9 57 00	lda $0057,y			lda FSMant0,y		; copy mantissa
.84d2	95 57		sta $57,x			sta FSMant0,x
.84d4	b9 61 00	lda $0061,y			lda FSMant1,y
.84d7	95 61		sta $61,x			sta FSMant1,x
.84d9	b9 6b 00	lda $006b,y			lda FSMant2,y
.84dc	95 6b		sta $6b,x			sta FSMant2,x
.84de	b9 75 00	lda $0075,y			lda FSMant3,y
.84e1	95 75		sta $75,x			sta FSMant3,x
.84e3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=37					CL	.var *-(WordListLink+wh_Xt)
=$84e5					en = *	; remember here
>84be	25					.byte CL	;wh_CodeLength
.84e5	60		rts				rts
>84e6	46 32 44 75 70			L1:	.text "F2Dup"	;  name of word as a string, ending at wh_NameLastChar
>84eb	05					.byte *-L1	;wh_NameLength	length of name
>84ec	3b 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84ef	08					.byte NN	;wh_Flags	dictionary flags
=33899					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84f0	20 9c 84	jsr $849c	F2Dup:		jsr FOver
.84f3	4c 9c 84	jmp $849c			jmp FOver
=6					CL	.var *-(WordListLink+wh_Xt)
=$84f6					en = *	; remember here
>84ee	06					.byte CL	;wh_CodeLength
>84f6	46 53 77 61 70			L1:	.text "FSwap"	;  name of word as a string, ending at wh_NameLastChar
>84fb	05					.byte *-L1	;wh_NameLength	length of name
>84fc	6b 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84ff	00					.byte 0	;wh_Flags	dictionary flags
=33915					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8500	86 14		stx $14		FSwap:		stx tmp1		; save data stack index
.8502	a6 4c		ldx $4c				ldx fp			; X=FP stack index
.8504	b5 4d		lda $4d,x			lda FSExp+0,x		; do FSExp
.8506	b4 4e		ldy $4e,x			ldy FSExp+1,x
.8508	95 4e		sta $4e,x			sta FSExp+1,x
.850a	94 4d		sty $4d,x			sty FSExp+0,x
.850c	b5 57		lda $57,x			lda FSMant0+0,x		; do FSMant0
.850e	b4 58		ldy $58,x			ldy FSMant0+1,x
.8510	95 58		sta $58,x			sta FSMant0+1,x
.8512	94 57		sty $57,x			sty FSMant0+0,x
.8514	b5 61		lda $61,x			lda FSMant1+0,x		; do FSMant1
.8516	b4 62		ldy $62,x			ldy FSMant1+1,x
.8518	95 62		sta $62,x			sta FSMant1+1,x
.851a	94 61		sty $61,x			sty FSMant1+0,x
.851c	b5 6b		lda $6b,x			lda FSMant2+0,x		; do FSMant2
.851e	b4 6c		ldy $6c,x			ldy FSMant2+1,x
.8520	95 6c		sta $6c,x			sta FSMant2+1,x
.8522	94 6b		sty $6b,x			sty FSMant2+0,x
.8524	b5 75		lda $75,x			lda FSMant3+0,x		; do FSMant3
.8526	b4 76		ldy $76,x			ldy FSMant3+1,x
.8528	95 76		sta $76,x			sta FSMant3+1,x
.852a	94 75		sty $75,x			sty FSMant3+0,x
.852c	a6 14		ldx $14				ldx tmp1		; restore data stack index
=46					CL	.var *-(WordListLink+wh_Xt)
=$852e					en = *	; remember here
>84fe	2e					.byte CL	;wh_CodeLength
.852e	60		rts				rts
>852f	46 54 75 63 6b			L1:	.text "FTuck"	;  name of word as a string, ending at wh_NameLastChar
>8534	05					.byte *-L1	;wh_NameLength	length of name
>8535	7b 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8537	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8538	08					.byte NN	;wh_Flags	dictionary flags
=33972					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8539	20 00 85	jsr $8500	FTuck:		jsr FSwap
.853c	4c 9c 84	jmp $849c			jmp FOver
=6					CL	.var *-(WordListLink+wh_Xt)
=$853f					en = *	; remember here
>8537	06					.byte CL	;wh_CodeLength
>853f	46 52 6f 74			L1:	.text "FRot"	;  name of word as a string, ending at wh_NameLastChar
>8543	04					.byte *-L1	;wh_NameLength	length of name
>8544	b4 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8546	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8547	00					.byte 0	;wh_Flags	dictionary flags
=33987					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8548	86 14		stx $14		FRot:		stx tmp1		; save data stack index
.854a	a5 4c		lda $4c				lda fp			; for FSMant3, FSMant2, FSMant1, FSMant0, FSExp
.854c	18		clc				clc
.854d	69 28		adc #$28			adc #4*FDim
.854f	d0 03		bne $8554			bne _3
.8551	8a		txa		_2:		txa			;    next byte
.8552	e9 0a		sbc #$0a			sbc #FDim
.8554	aa		tax		_3:		tax
.8555	b5 4f		lda $4f,x			lda FSExp+2,x		;   do a byte
.8557	b4 4e		ldy $4e,x			ldy FSExp+1,x
.8559	94 4f		sty $4f,x			sty FSExp+2,x
.855b	b4 4d		ldy $4d,x			ldy FSExp+0,x
.855d	94 4e		sty $4e,x			sty FSExp+1,x
.855f	95 4d		sta $4d,x			sta FSExp+0,x
.8561	e4 4c		cpx $4c				cpx fp			; done?
.8563	d0 ec		bne $8551			bne _2
.8565	a6 14		ldx $14				ldx tmp1		; restore param stack index
=31					CL	.var *-(WordListLink+wh_Xt)
=$8567					en = *	; remember here
>8546	1f					.byte CL	;wh_CodeLength
.8567	60		rts				rts
>8568	46 2d 52 6f 74			L1:	.text "F-Rot"	;  name of word as a string, ending at wh_NameLastChar
>856d	05					.byte *-L1	;wh_NameLength	length of name
>856e	c3 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8570	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8571	08					.byte NN	;wh_Flags	dictionary flags
=34029					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8572	20 48 85	jsr $8548	FMRot:		jsr FRot
.8575	4c 48 85	jmp $8548			jmp FRot
=6					CL	.var *-(WordListLink+wh_Xt)
=$8578					en = *	; remember here
>8570	06					.byte CL	;wh_CodeLength
>8578	46 40				L1:	.text "F@"	;  name of word as a string, ending at wh_NameLastChar
>857a	02					.byte *-L1	;wh_NameLength	length of name
>857b	ed 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>857d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>857e	00					.byte 0	;wh_Flags	dictionary flags
=34042					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.857f	20 3b b3	jsr $b33b	FAt:		jsr PopYA		; pop addr
.8582	85 16		sta $16		FAt_YA:		sta tmp2+0		; save addr
.8584	84 17		sty $17				sty tmp2+1
.8586	20 16 84	jsr $8416	FAt_Tmp2:	jsr FAllocX		; alloc FP stack entry
.8589	a0 00		ldy #$00			ldy #0			; copy mantissa
.858b	b1 16		lda ($16),y			lda (tmp2),y
.858d	95 75		sta $75,x			sta FSMant3,x
.858f	c8		iny				iny
.8590	b1 16		lda ($16),y			lda (tmp2),y
.8592	95 6b		sta $6b,x			sta FSMant2,x
.8594	c8		iny				iny
.8595	b1 16		lda ($16),y			lda (tmp2),y
.8597	95 61		sta $61,x			sta FSMant1,x
.8599	c8		iny				iny
.859a	b1 16		lda ($16),y			lda (tmp2),y
.859c	95 57		sta $57,x			sta FSMant0,x
.859e	c8		iny				iny			; copy exponent
.859f	b1 16		lda ($16),y			lda (tmp2),y
.85a1	95 4d		sta $4d,x			sta FSExp,x
.85a3	a6 14		ldx $14				ldx tmp1		; restore data stack index
=38					CL	.var *-(WordListLink+wh_Xt)
=$85a5					en = *	; remember here
>857d	26					.byte CL	;wh_CodeLength
.85a5	60		rts				rts
>85a6	46 21				L1:	.text "F!"	;  name of word as a string, ending at wh_NameLastChar
>85a8	02					.byte *-L1	;wh_NameLength	length of name
>85a9	fa 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85ac	00					.byte 0	;wh_Flags	dictionary flags
=34088					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85ad	20 3b b3	jsr $b33b	FStore:		jsr PopYA		; pop addr
.85b0	85 14		sta $14		FStore_YA:	sta tmp1+0		; save addr
.85b2	84 15		sty $15				sty tmp1+1
.85b4	86 16		stx $16				stx tmp2		; save data stack index
.85b6	a6 4c		ldx $4c				ldx fp			; Y= FP stack index
.85b8	b5 75		lda $75,x			lda FSMant3,x		; copy mantissa
.85ba	a0 00		ldy #$00			ldy #0
.85bc	91 14		sta ($14),y			sta (tmp1),y
.85be	b5 6b		lda $6b,x			lda FSMant2,x
.85c0	c8		iny				iny
.85c1	91 14		sta ($14),y			sta (tmp1),y
.85c3	b5 61		lda $61,x			lda FSMant1,x
.85c5	c8		iny				iny
.85c6	91 14		sta ($14),y			sta (tmp1),y
.85c8	b5 57		lda $57,x			lda FSMant0,x
.85ca	c8		iny				iny
.85cb	91 14		sta ($14),y			sta (tmp1),y
.85cd	b5 4d		lda $4d,x			lda FSExp,x		; copy exponent
.85cf	c8		iny				iny
.85d0	91 14		sta ($14),y			sta (tmp1),y
.85d2	e6 4c		inc $4c				inc fp			; FDrop
.85d4	a6 16		ldx $16				ldx tmp2		; restore data stack index
=41					CL	.var *-(WordListLink+wh_Xt)
=$85d6					en = *	; remember here
>85ab	29					.byte CL	;wh_CodeLength
.85d6	60		rts				rts
>85d7	46 2c				L1:	.text "F,"	;  name of word as a string, ending at wh_NameLastChar
>85d9	02					.byte *-L1	;wh_NameLength	length of name
>85da	28 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85dd	08					.byte NN	;wh_Flags	dictionary flags
=34137					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85de	a5 00		lda $00		FComma:		lda cp+0
.85e0	a4 01		ldy $01				ldy cp+1
.85e2	20 b0 85	jsr $85b0			jsr FStore_YA
.85e5	a9 05		lda #$05			lda #5			; Float
.85e7	20 35 b7	jsr $b735			jsr PushZA
.85ea	4c 03 c0	jmp $c003			jmp Allot
=15					CL	.var *-(WordListLink+wh_Xt)
=$85ed					en = *	; remember here
>85dc	0f					.byte CL	;wh_CodeLength
>85ed	46 30 21			L1:	.text "F0!"	;  name of word as a string, ending at wh_NameLastChar
>85f0	03					.byte *-L1	;wh_NameLength	length of name
>85f1	59 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85f4	08					.byte NN	;wh_Flags	dictionary flags
=34160					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85f5	20 3b b3	jsr $b33b	FZStore:	jsr PopYA		; pop addr
.85f8	85 14		sta $14		FZStore_YA:	sta tmp1+0
.85fa	84 15		sty $15				sty tmp1+1
.85fc	a9 00		lda #$00			lda #0
.85fe	a0 04		ldy #$04			ldy #5-1
.8600	91 14		sta ($14),y	-		sta (tmp1),y
.8602	88		dey				dey
.8603	10 fb		bpl $8600			bpl -
=16					CL	.var *-(WordListLink+wh_Xt)
=$8605					en = *	; remember here
>85f3	10					.byte CL	;wh_CodeLength
.8605	60		rts				rts
>8606	46 43 6d 70			L1:	.text "FCmp"	;  name of word as a string, ending at wh_NameLastChar
>860a	04					.byte *-L1	;wh_NameLength	length of name
>860b	70 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>860d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>860e	08					.byte NN	;wh_Flags	dictionary flags
=34186					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.860f	20 20 86	jsr $8620			jsr FCmpA		; compare #s
.8612	a8		tay				tay			; return >0, 0, <0
.8613	4c f3 b6	jmp $b6f3			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$8616					en = *	; remember here
>860d	07					.byte CL	;wh_CodeLength
>8616	46 43 6d 70 41			L1:	.text "FCmpA"	;  name of word as a string, ending at wh_NameLastChar
>861b	05					.byte *-L1	;wh_NameLength	length of name
>861c	8a 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>861e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>861f	08					.byte NN	;wh_Flags	dictionary flags
=34203					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8620	86 14		stx $14		FCmpA:		stx tmp1		; save data stack index
.8622	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.8624	b5 57		lda $57,x			lda FSMant0+0,x		; r2 mantissa = 0 ?
.8626	f0 35		beq $865d			beq _r2Zero
.8628	b4 58		ldy $58,x			ldy FSMant0+1,x		; r1 mantissa = 0 ?
.862a	f0 2b		beq $8657			beq _r1Zero
.862c	55 58		eor $58,x			eor FSMant0+1,x		; compare mantissa sign
.862e	30 3d		bmi $866d			bmi _MantissaSignDifferent
.8630	38		sec				sec			; compare exponent
.8631	b5 4e		lda $4e,x			lda FSExp+1,x
.8633	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8635	d0 2b		bne $8662			bne _ExponentDifferent
.8637	98		tya				tya			; compare mantissa MSB
.8638	f5 57		sbc $57,x			sbc FSMant0+0,x		;   always same sign so can't overflow
.863a	d0 17		bne $8653			bne _13
.863c	b5 62		lda $62,x			lda FSMant1+1,x		; compare mantissa 1
.863e	f5 61		sbc $61,x			sbc FSMant1+0,x
.8640	d0 0c		bne $864e			bne _12
.8642	b5 6c		lda $6c,x			lda FSMant2+1,x		; compare mantissa 2
.8644	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8646	d0 06		bne $864e			bne _12
.8648	b5 76		lda $76,x			lda FSMant3+1,x		; compare mantissa LSB
.864a	f5 75		sbc $75,x			sbc FSMant3+0,x
.864c	f0 05		beq $8653			beq _13
.864e	6a		ror a		_12:		ror a
.864f	49 80		eor #$80	_14:		eor #$80
.8651	09 01		ora #$01			ora #1
.8653	a6 14		ldx $14		_13:		ldx tmp1		; restore data stack index
.8655	a8		tay				tay			; set CPU flags
.8656	60		rts				rts
.8657	b5 57		lda $57,x	_r1Zero:	lda FSMant0+0,x		; return r2
.8659	d0 f4		bne $864f			bne _14
.865b	f0 f6		beq $8653			beq _13
.865d	b5 58		lda $58,x	_r2Zero:	lda FSMant0+1,x		; return 0-r1
.865f	4c 53 86	jmp $8653			jmp _13
.8662					_ExponentDifferent:
.8662	50 02		bvc $8666			bvc +
.8664	49 80		eor #$80			eor #$80
.8666					+
.8666	55 57		eor $57,x			eor FSMant0+0,x
.8668	a6 14		ldx $14				ldx tmp1		; restore data stack index
.866a	09 01		ora #$01			ora #1			; set CPU flags
.866c	60		rts				rts
.866d					_MantissaSignDifferent:
.866d	98		tya				tya
.866e	a6 14		ldx $14				ldx tmp1		; restore data stack index
.8670	09 01		ora #$01			ora #1
.8672	60		rts				rts
=83					CL	.var *-(WordListLink+wh_Xt)
=$8673					en = *	; remember here
>861e	53					.byte CL	;wh_CodeLength
>8673	46 6c 6f 6f 72			L1:	.text "Floor"	;  name of word as a string, ending at wh_NameLastChar
>8678	05					.byte *-L1	;wh_NameLength	length of name
>8679	9b 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>867b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>867c	08					.byte NN	;wh_Flags	dictionary flags
=34296					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.867d	a4 4c		ldy $4c		Floor:		ldy fp
.867f	b9 57 00	lda $0057,y			lda FSMant0,y		; negative?
.8682	10 19		bpl $869d			bpl _a
.8684	b9 4d 00	lda $004d,y			lda FSExp,y		; > -1 ?
.8687	10 14		bpl $869d			bpl _a
.8689	a9 80		lda #$80			lda #$80		; return -1
.868b	99 57 00	sta $0057,y			sta FSMant0,y
.868e	a9 00		lda #$00			lda #0
.8690	99 4d 00	sta $004d,y			sta FSExp,y
.8693	99 61 00	sta $0061,y			sta FSMant1,y
.8696	99 6b 00	sta $006b,y			sta FSMant2,y
.8699	99 75 00	sta $0075,y			sta FSMant3,y
.869c	60		rts				rts
.869d	a9 1f		lda #$1f	_a:		lda #31
.869f	20 a5 86	jsr $86a5			jsr FIntAlignA
.86a2	4c a0 8a	jmp $8aa0			jmp FNorm
=40					CL	.var *-(WordListLink+wh_Xt)
=$86a5					en = *	; remember here
>867b	28					.byte CL	;wh_CodeLength
.86a5					FIntAlignA:
.86a5	85 16		sta $16				sta tmp2+0		; save alignment
.86a7	46 15		lsr $15				lsr tmp1+1		; init saved lo bit
.86a9	86 14		stx $14				stx tmp1+0		; save data stack index
.86ab	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.86ad	b5 57		lda $57,x			lda FSMant0,x
.86af	b4 4d		ldy $4d,x			ldy FSExp,x
.86b1	10 18		bpl $86cb			bpl _18
.86b3	a4 16		ldy $16				ldy tmp2+0		; return zero
.86b5	a9 00		lda #$00			lda #0
.86b7	95 61		sta $61,x			sta FSMant1,x
.86b9	95 6b		sta $6b,x			sta FSMant2,x
.86bb	95 75		sta $75,x			sta FSMant3,x
.86bd	f0 10		beq $86cf			beq _30
.86bf	c8		iny		_12:		iny			; exp += 1
.86c0	c9 80		cmp #$80			cmp #$80		; mantissa >>=1
.86c2	6a		ror a				ror a
.86c3	76 61		ror $61,x			ror FSMant1,x
.86c5	76 6b		ror $6b,x			ror FSMant2,x
.86c7	76 75		ror $75,x			ror FSMant3,x
.86c9	66 15		ror $15				ror tmp1+1		; save lo bit
.86cb	c4 16		cpy $16		_18:		cpy tmp2+0		; while exp<alignment
.86cd	90 f0		bcc $86bf			bcc _12
.86cf	95 57		sta $57,x	_30:		sta FSMant0,x
.86d1	94 4d		sty $4d,x			sty FSExp,x
.86d3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.86d5	06 15		asl $15				asl tmp1+1		; set carry bit
.86d7	60		rts				rts
>86d8	46 54 72 75 6e 63		L1:	.text "FTrunc"	;  name of word as a string, ending at wh_NameLastChar
>86de	06					.byte *-L1	;wh_NameLength	length of name
>86df	f8 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86e2	08					.byte NN	;wh_Flags	dictionary flags
=34398					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86e3	a4 4c		ldy $4c		FTrunc:		ldy fp
.86e5	b9 57 00	lda $0057,y			lda FSMant0,y
.86e8	10 93		bpl $867d			bpl Floor
.86ea	20 a2 8b	jsr $8ba2			jsr FNegate
.86ed	20 7d 86	jsr $867d			jsr Floor
.86f0	4c a2 8b	jmp $8ba2			jmp FNegate
>86f3	46 52 6f 75 6e 64		L1:	.text "FRound"	;  name of word as a string, ending at wh_NameLastChar
>86f9	06					.byte *-L1	;wh_NameLength	length of name
>86fa	5e 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86fd	08					.byte NN	;wh_Flags	dictionary flags
=34425					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86fe	a9 1f		lda #$1f	FRound:		lda #31
.8700	20 a5 86	jsr $86a5			jsr FIntAlignA
.8703	90 03		bcc $8708			bcc _15
.8705	4c 5e 8b	jmp $8b5e			jmp F1Plus
.8708	4c a0 8a	jmp $8aa0	_15:		jmp FNorm
=13					CL	.var *-(WordListLink+wh_Xt)
=$870b					en = *	; remember here
>86fc	0d					.byte CL	;wh_CodeLength
>870b	46 49 6e 74 46 72 63		L1:	.text "FIntFrc"	;  name of word as a string, ending at wh_NameLastChar
>8712	07					.byte *-L1	;wh_NameLength	length of name
>8713	79 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8715	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8716	08					.byte NN	;wh_Flags	dictionary flags
=34450					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8717	20 78 84	jsr $8478	FIntFrc:	jsr FDup	; ( r1 r1 )
.871a	20 7d 86	jsr $867d			jsr Floor	; ( r1 rint )
.871d	20 39 85	jsr $8539			jsr FTuck	; ( rint r1 rint )
.8720	20 6b 8b	jsr $8b6b			jsr FMinus	; ( rint rfrac )
.8723	4c 00 85	jmp $8500			jmp FSwap	; ( rfrac rint )
=15					CL	.var *-(WordListLink+wh_Xt)
=$8726					en = *	; remember here
>8715	0f					.byte CL	;wh_CodeLength
>8726	46 30 3d			L1:	.text "F0="	;  name of word as a string, ending at wh_NameLastChar
>8729	03					.byte *-L1	;wh_NameLength	length of name
>872a	92 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>872c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>872d	08					.byte NN	;wh_Flags	dictionary flags
=34473					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.872e	a4 4c		ldy $4c		FZEq:		ldy fp
.8730	b9 57 00	lda $0057,y			lda FSMant0,y
.8733	d0 26		bne $875b			bne FFalse1
.8735					FTrue1:
.8735	e6 4c		inc $4c				inc fp		; FDrop
.8737	4c 13 b7	jmp $b713			jmp True	; return true
=12					CL	.var *-(WordListLink+wh_Xt)
=$873a					en = *	; remember here
>872c	0c					.byte CL	;wh_CodeLength
>873a	46 30 3c 3e			L1:	.text "F0<>"	;  name of word as a string, ending at wh_NameLastChar
>873e	04					.byte *-L1	;wh_NameLength	length of name
>873f	a9 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8741	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8742	08					.byte NN	;wh_Flags	dictionary flags
=34494					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8743	a4 4c		ldy $4c		FZNe:		ldy fp
.8745	b9 57 00	lda $0057,y			lda FSMant0,y
.8748	f0 11		beq $875b			beq FFalse1
.874a	d0 e9		bne $8735			bne FTrue1
=9					CL	.var *-(WordListLink+wh_Xt)
=$874c					en = *	; remember here
>8741	09					.byte CL	;wh_CodeLength
>874c	46 30 3c			L1:	.text "F0<"	;  name of word as a string, ending at wh_NameLastChar
>874f	03					.byte *-L1	;wh_NameLength	length of name
>8750	be 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8752	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8753	08					.byte NN	;wh_Flags	dictionary flags
=34511					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8754	a4 4c		ldy $4c		FZLt:		ldy fp
.8756	b9 57 00	lda $0057,y			lda FSMant0,y
.8759	30 da		bmi $8735			bmi FTrue1
.875b					FFalse1:
.875b	e6 4c		inc $4c				inc fp		; FDrop
.875d	4c 26 b7	jmp $b726			jmp False	; return false
=12					CL	.var *-(WordListLink+wh_Xt)
=$8760					en = *	; remember here
>8752	0c					.byte CL	;wh_CodeLength
>8760	46 30 3e 3d			L1:	.text "F0>="	;  name of word as a string, ending at wh_NameLastChar
>8764	04					.byte *-L1	;wh_NameLength	length of name
>8765	cf 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8767	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8768	08					.byte NN	;wh_Flags	dictionary flags
=34532					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8769	a4 4c		ldy $4c		FZGe:		ldy fp
.876b	b9 57 00	lda $0057,y			lda FSMant0,y
.876e	10 c5		bpl $8735			bpl FTrue1
.8770	30 e9		bmi $875b			bmi FFalse1
=9					CL	.var *-(WordListLink+wh_Xt)
=$8772					en = *	; remember here
>8767	09					.byte CL	;wh_CodeLength
>8772	46 30 3e			L1:	.text "F0>"	;  name of word as a string, ending at wh_NameLastChar
>8775	03					.byte *-L1	;wh_NameLength	length of name
>8776	e4 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8778	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8779	08					.byte NN	;wh_Flags	dictionary flags
=34549					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.877a	a4 4c		ldy $4c		FZGt:		ldy fp
.877c	b9 57 00	lda $0057,y			lda FSMant0,y
.877f	30 da		bmi $875b			bmi FFalse1
.8781	d0 b2		bne $8735			bne FTrue1
.8783	f0 d6		beq $875b			beq FFalse1
=11					CL	.var *-(WordListLink+wh_Xt)
=$8785					en = *	; remember here
>8778	0b					.byte CL	;wh_CodeLength
>8785	46 30 3c 3d			L1:	.text "F0<="	;  name of word as a string, ending at wh_NameLastChar
>8789	04					.byte *-L1	;wh_NameLength	length of name
>878a	f5 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>878c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>878d	08					.byte NN	;wh_Flags	dictionary flags
=34569					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.878e	a4 4c		ldy $4c		FZLe:		ldy fp
.8790	b9 57 00	lda $0057,y			lda FSMant0,y
.8793	30 a0		bmi $8735			bmi FTrue1
.8795	d0 c4		bne $875b			bne FFalse1
.8797	f0 9c		beq $8735			beq FTrue1
=11					CL	.var *-(WordListLink+wh_Xt)
=$8799					en = *	; remember here
>878c	0b					.byte CL	;wh_CodeLength
>8799	46 3c				L1:	.text "F<"	;  name of word as a string, ending at wh_NameLastChar
>879b	02					.byte *-L1	;wh_NameLength	length of name
>879c	09 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>879e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>879f	08					.byte NN	;wh_Flags	dictionary flags
=34587					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87a0	20 20 86	jsr $8620	FLt:		jsr FCmpA
.87a3	30 35		bmi $87da			bmi FTrue2
.87a5					FFalse2:
.87a5	e6 4c		inc $4c				inc fp		; FDrop
.87a7	e6 4c		inc $4c				inc fp		; FDrop
.87a9	4c 26 b7	jmp $b726			jmp False	; return False
=12					CL	.var *-(WordListLink+wh_Xt)
=$87ac					en = *	; remember here
>879e	0c					.byte CL	;wh_CodeLength
>87ac	46 3e 3d			L1:	.text "F>="	;  name of word as a string, ending at wh_NameLastChar
>87af	03					.byte *-L1	;wh_NameLength	length of name
>87b0	1b 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87b3	08					.byte NN	;wh_Flags	dictionary flags
=34607					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87b4	20 20 86	jsr $8620	FGe:		jsr FCmpA
.87b7	10 21		bpl $87da			bpl FTrue2
.87b9	30 ea		bmi $87a5			bmi FFalse2
=7					CL	.var *-(WordListLink+wh_Xt)
=$87bb					en = *	; remember here
>87b2	07					.byte CL	;wh_CodeLength
>87bb	46 3e				L1:	.text "F>"	;  name of word as a string, ending at wh_NameLastChar
>87bd	02					.byte *-L1	;wh_NameLength	length of name
>87be	2f 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87c0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87c1	08					.byte NN	;wh_Flags	dictionary flags
=34621					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87c2	20 20 86	jsr $8620	FGt:		jsr FCmpA
.87c5	30 de		bmi $87a5			bmi FFalse2
.87c7	d0 11		bne $87da			bne FTrue2
.87c9	f0 da		beq $87a5			beq FFalse2
=9					CL	.var *-(WordListLink+wh_Xt)
=$87cb					en = *	; remember here
>87c0	09					.byte CL	;wh_CodeLength
>87cb	46 3c 3d			L1:	.text "F<="	;  name of word as a string, ending at wh_NameLastChar
>87ce	03					.byte *-L1	;wh_NameLength	length of name
>87cf	3d 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87d2	08					.byte NN	;wh_Flags	dictionary flags
=34638					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87d3	20 20 86	jsr $8620	FLe:		jsr FCmpA
.87d6	30 02		bmi $87da			bmi FTrue2
.87d8	d0 cb		bne $87a5			bne FFalse2
.87da					FTrue2:
.87da	e6 4c		inc $4c				inc fp		; FDrop
.87dc	e6 4c		inc $4c				inc fp		; FDrop
.87de	4c 13 b7	jmp $b713			jmp True	; return True
=14					CL	.var *-(WordListLink+wh_Xt)
=$87e1					en = *	; remember here
>87d1	0e					.byte CL	;wh_CodeLength
>87e1	46 3c 3e			L1:	.text "F<>"	;  name of word as a string, ending at wh_NameLastChar
>87e4	03					.byte *-L1	;wh_NameLength	length of name
>87e5	4e 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87e8	08					.byte NN	;wh_Flags	dictionary flags
=34660					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87e9	20 20 86	jsr $8620	FNe:		jsr FCmpA
.87ec	d0 ec		bne $87da			bne FTrue2
.87ee	f0 b5		beq $87a5			beq FFalse2
=7					CL	.var *-(WordListLink+wh_Xt)
=$87f0					en = *	; remember here
>87e7	07					.byte CL	;wh_CodeLength
>87f0	46 3d				L1:	.text "F="	;  name of word as a string, ending at wh_NameLastChar
>87f2	02					.byte *-L1	;wh_NameLength	length of name
>87f3	64 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87f5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87f6	08					.byte NN	;wh_Flags	dictionary flags
=34674					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87f7	20 20 86	jsr $8620	FEq:		jsr FCmpA
.87fa	d0 a9		bne $87a5			bne FFalse2
.87fc	f0 dc		beq $87da			beq FTrue2
=7					CL	.var *-(WordListLink+wh_Xt)
=$87fe					en = *	; remember here
>87f5	07					.byte CL	;wh_CodeLength
>87fe	46 7e 41 62 73			L1:	.text "F~Abs"	;  name of word as a string, ending at wh_NameLastChar
>8803	05					.byte *-L1	;wh_NameLength	length of name
>8804	72 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8806	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8807	08					.byte NN	;wh_Flags	dictionary flags
=34691					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8808	20 72 85	jsr $8572	FTAbs:		jsr FMRot
.880b	20 6b 8b	jsr $8b6b			jsr FMinus
.880e	20 c9 8b	jsr $8bc9			jsr FAbs
.8811	4c c2 87	jmp $87c2			jmp FGt
=12					CL	.var *-(WordListLink+wh_Xt)
=$8814					en = *	; remember here
>8806	0c					.byte CL	;wh_CodeLength
>8814	46 7e 52 65 6c			L1:	.text "F~Rel"	;  name of word as a string, ending at wh_NameLastChar
>8819	05					.byte *-L1	;wh_NameLength	length of name
>881a	83 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>881c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>881d	08					.byte NN	;wh_Flags	dictionary flags
=34713					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.881e	20 9c 84	jsr $849c	FTRel:		jsr FOver
.8821	a9 03		lda #$03			lda #3
.8823	20 c3 84	jsr $84c3			jsr FPickA
.8826	20 29 8b	jsr $8b29			jsr FPlus
.8829	20 c9 8b	jsr $8bc9			jsr FAbs
.882c	20 fd 8b	jsr $8bfd			jsr FStar		; r1 r2 r3*|r1+r2|
.882f	20 72 85	jsr $8572			jsr FMRot		; r3*|r1+r2| r1 r2
.8832	20 6b 8b	jsr $8b6b			jsr FMinus
.8835	20 c9 8b	jsr $8bc9			jsr FAbs
.8838	4c c2 87	jmp $87c2			jmp FGt
=29					CL	.var *-(WordListLink+wh_Xt)
=$883b					en = *	; remember here
>881c	1d					.byte CL	;wh_CodeLength
>883b	46 7e				L1:	.text "F~"	;  name of word as a string, ending at wh_NameLastChar
>883d	02					.byte *-L1	;wh_NameLength	length of name
>883e	99 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8840	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8841	08					.byte NN	;wh_Flags	dictionary flags
=34749					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8842	a4 4c		ldy $4c		FTilde:		ldy fp
.8844	b9 57 00	lda $0057,y			lda FSMant0,y
.8847	30 06		bmi $884f			bmi _10			; r3<0
.8849	d0 bd		bne $8808			bne FTAbs		; r3>0
.884b	e6 4c		inc $4c				inc fp			; r3=0
.884d	d0 a8		bne $87f7			bne FEq
.884f	20 a2 8b	jsr $8ba2	_10:		jsr FNegate
.8852	4c 1e 88	jmp $881e			jmp FTRel
=19					CL	.var *-(WordListLink+wh_Xt)
=$8855					en = *	; remember here
>8840	13					.byte CL	;wh_CodeLength
>8855	46 56 61 72 69 61 62 6c		L1:	.text "FVariable"	;  name of word as a string, ending at wh_NameLastChar
>885d	65
>885e	09					.byte *-L1	;wh_NameLength	length of name
>885f	bd 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8861	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8862	0c					.byte IM+NN	;wh_Flags	dictionary flags
=34782					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8863	20 e4 c0	jsr $c0e4	FVariable:	jsr Create		; compile word header & push PFA adr
.8866	20 48 bb	jsr $bb48			jsr adjust_z		; fix word code length
.8869	20 ec 88	jsr $88ec			jsr F0			; alloc & init data
.886c	4c de 85	jmp $85de			jmp FComma
=12					CL	.var *-(WordListLink+wh_Xt)
=$886f					en = *	; remember here
>8861	0c					.byte CL	;wh_CodeLength
>886f	46 4c 69 74 65 72 61 6c		L1:	.text "FLiteral"	;  name of word as a string, ending at wh_NameLastChar
>8877	08					.byte *-L1	;wh_NameLength	length of name
>8878	de 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>887a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>887b	0c					.byte IM+NN	;wh_Flags	dictionary flags
=34807					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.887c	20 91 88	jsr $8891	FLiteral:	jsr FLitTest
.887f	f0 0a		beq $888b			beq _Short
.8881	a9 cc		lda #$cc			lda #<FLitI		; compile JSR FLitI
.8883	a0 88		ldy #$88			ldy #>FLitI
.8885	20 43 cc	jsr $cc43			jsr Jsr_Comma_YA
.8888	4c de 85	jmp $85de			jmp FComma		; inline operand, return
.888b	20 9d 88	jsr $889d	_Short:		jsr FLitShort
.888e	4c 43 cc	jmp $cc43			jmp Jsr_Comma_YA	; compile jsr FLitYA, & return
=21					CL	.var *-(WordListLink+wh_Xt)
=$8891					en = *	; remember here
>887a	15					.byte CL	;wh_CodeLength
.8891					FLitTest:
.8891	a4 4c		ldy $4c				ldy fp
.8893	b9 61 00	lda $0061,y			lda FSMant1,y		; will short work?
.8896	19 6b 00	ora $006b,y			ora FSMant2,y
.8899	19 75 00	ora $0075,y			ora FSMant3,y
.889c	60		rts				rts
.889d					FLitShort:
.889d	a9 a9		lda #$a9			lda #$a9		; compile LDA #mant0
.889f	20 04 cc	jsr $cc04			jsr C_Comma_A
.88a2	b9 57 00	lda $0057,y			lda FSMant0,y
.88a5	20 04 cc	jsr $cc04			jsr C_Comma_A
.88a8	a9 a0		lda #$a0			lda #$a0		; compile LDY #exp
.88aa	20 04 cc	jsr $cc04			jsr C_Comma_A
.88ad	b9 4d 00	lda $004d,y			lda FSExp,y
.88b0	20 04 cc	jsr $cc04			jsr C_Comma_A
.88b3	e6 4c		inc $4c				inc fp			; FDrop
.88b5	a9 ba		lda #$ba			lda #<FLitYA		; point at FLitYA
.88b7	a0 88		ldy #$88			ldy #>FLitYA
.88b9	60		rts				rts
.88ba					FLitYA:
.88ba	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.88bd	94 4d		sty $4d,x			sty FSExp,x
.88bf	95 57		sta $57,x			sta FSMant0,x
.88c1	a9 00		lda #$00			lda #0
.88c3	95 61		sta $61,x			sta FSMant1,x
.88c5	95 6b		sta $6b,x			sta FSMant2,x
.88c7	95 75		sta $75,x			sta FSMant3,x
.88c9	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.88cb	60		rts				rts
.88cc					FLitI:
.88cc	68		pla				pla			; tmp2= RTS addr
.88cd	85 16		sta $16				sta tmp2+0
.88cf	18		clc				clc			; bump RTS addr over inline data
.88d0	69 05		adc #$05			adc #5
.88d2	a8		tay				tay
.88d3	68		pla				pla
.88d4	85 17		sta $17				sta tmp2+1
.88d6	69 00		adc #$00			adc #0
.88d8	48		pha				pha
.88d9	98		tya				tya
.88da	48		pha				pha
.88db	e6 16		inc $16				inc tmp2+0		; tmp2 +=1 1 (correct RTS addr)
.88dd	d0 02		bne $88e1			bne +
.88df	e6 17		inc $17				inc tmp2+1
.88e1					+
.88e1	4c 86 85	jmp $8586			jmp FAt_Tmp2		; fetch inline data, & return
>88e4	30 2e 65			L1:	.text "0.e"	;  name of word as a string, ending at wh_NameLastChar
>88e7	03					.byte *-L1	;wh_NameLength	length of name
>88e8	f7 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88ea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88eb	08					.byte NN	;wh_Flags	dictionary flags
=34919					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88ec	a9 00		lda #$00	F0:		lda #0
.88ee	a0 80		ldy #$80			ldy #$80
.88f0	d0 c8		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$88f2					en = *	; remember here
>88ea	06					.byte CL	;wh_CodeLength
>88f2	31 30 30 30 2e 65		L1:	.text "1000.e"	;  name of word as a string, ending at wh_NameLastChar
>88f8	06					.byte *-L1	;wh_NameLength	length of name
>88f9	67 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88fb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88fc	08					.byte NN	;wh_Flags	dictionary flags
=34936					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88fd	a9 7d		lda #$7d	F1000:		lda #$7d
.88ff	a0 0a		ldy #$0a			ldy #10
.8901	d0 b7		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8903					en = *	; remember here
>88fb	06					.byte CL	;wh_CodeLength
>8903	31 30 2e 65			L1:	.text "10.e"	;  name of word as a string, ending at wh_NameLastChar
>8907	04					.byte *-L1	;wh_NameLength	length of name
>8908	78 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>890a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>890b	08					.byte NN	;wh_Flags	dictionary flags
=34951					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.890c	a9 50		lda #$50	F10:		lda #$50
.890e	a0 04		ldy #$04			ldy #4
.8910	d0 a8		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8912					en = *	; remember here
>890a	06					.byte CL	;wh_CodeLength
>8912	32 2e 65			L1:	.text "2.e"	;  name of word as a string, ending at wh_NameLastChar
>8915	03					.byte *-L1	;wh_NameLength	length of name
>8916	87 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8918	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8919	08					.byte NN	;wh_Flags	dictionary flags
=34965					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.891a	a9 40		lda #$40	F2:		lda #$40
.891c	a0 02		ldy #$02			ldy #2
.891e	d0 9a		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8920					en = *	; remember here
>8918	06					.byte CL	;wh_CodeLength
>8920	31 2e 65			L1:	.text "1.e"	;  name of word as a string, ending at wh_NameLastChar
>8923	03					.byte *-L1	;wh_NameLength	length of name
>8924	95 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8926	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8927	08					.byte NN	;wh_Flags	dictionary flags
=34979					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8928	a9 40		lda #$40	F1:		lda #$40
.892a	a0 01		ldy #$01			ldy #1
.892c	d0 8c		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$892e					en = *	; remember here
>8926	06					.byte CL	;wh_CodeLength
>892e	2e 31 65			L1:	.text ".1e"	;  name of word as a string, ending at wh_NameLastChar
>8931	03					.byte *-L1	;wh_NameLength	length of name
>8932	a3 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8934	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8935	08					.byte NN	;wh_Flags	dictionary flags
=34993					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8936	20 bb 89	jsr $89bb	F10th:		jsr FConstantRun
>8939	67 66 66 66					.dword $66666667	; 32 bit signed binary mantissa.  $40000000 = +0.5
>893d	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$893e					en = *	; remember here
>8934	08					.byte CL	;wh_CodeLength
>893e	50 69				L1:	.text "Pi"	;  name of word as a string, ending at wh_NameLastChar
>8940	02					.byte *-L1	;wh_NameLength	length of name
>8941	b1 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8943	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8944	08					.byte NN	;wh_Flags	dictionary flags
=35008					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8945	20 bb 89	jsr $89bb	FPi:		jsr FConstantRun
>8948	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>894c	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$894d					en = *	; remember here
>8943	08					.byte CL	;wh_CodeLength
>894d	50 69 2f 32			L1:	.text "Pi/2"	;  name of word as a string, ending at wh_NameLastChar
>8951	04					.byte *-L1	;wh_NameLength	length of name
>8952	c0 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8954	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8955	08					.byte NN	;wh_Flags	dictionary flags
=35025					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8956	20 bb 89	jsr $89bb	FPiH:		jsr FConstantRun
>8959	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>895d	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$895e					en = *	; remember here
>8954	08					.byte CL	;wh_CodeLength
>895e	50 69 2f 34			L1:	.text "Pi/4"	;  name of word as a string, ending at wh_NameLastChar
>8962	04					.byte *-L1	;wh_NameLength	length of name
>8963	d1 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8965	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8966	08					.byte NN	;wh_Flags	dictionary flags
=35042					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8967	20 bb 89	jsr $89bb	FPiQ:		jsr FConstantRun
>896a	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>896e	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$896f					en = *	; remember here
>8965	08					.byte CL	;wh_CodeLength
>896f	32 50 69			L1:	.text "2Pi"	;  name of word as a string, ending at wh_NameLastChar
>8972	03					.byte *-L1	;wh_NameLength	length of name
>8973	e2 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8975	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8976	08					.byte NN	;wh_Flags	dictionary flags
=35058					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8977	20 bb 89	jsr $89bb	F2Pi:		jsr FConstantRun
>897a	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>897e	03						.char 3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$897f					en = *	; remember here
>8975	08					.byte CL	;wh_CodeLength
>897f	46 2e 45			L1:	.text "F.E"	;  name of word as a string, ending at wh_NameLastChar
>8982	03					.byte *-L1	;wh_NameLength	length of name
>8983	f2 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8985	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8986	08					.byte NN	;wh_Flags	dictionary flags
=35074					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8987	20 bb 89	jsr $89bb	FE:		jsr FConstantRun
>898a	2c 2a fc 56					.dword $56fc2a2c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>898e	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$898f					en = *	; remember here
>8985	08					.byte CL	;wh_CodeLength
>898f	46 43 6f 6e 73 74 61 6e		L1:	.text "FConstant"	;  name of word as a string, ending at wh_NameLastChar
>8997	74
>8998	09					.byte *-L1	;wh_NameLength	length of name
>8999	02 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>899b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>899c	08					.byte NN	;wh_Flags	dictionary flags
=35096					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.899d	20 5d c0	jsr $c05d	FConstant:	jsr Header_Comma	; compile word header
.89a0	20 91 88	jsr $8891			jsr FLitTest		; will short work?
.89a3	f0 0d		beq $89b2			beq _Short
.89a5	a9 bb		lda #$bb			lda #<FConstantRun	; compile call
.89a7	a0 89		ldy #$89			ldy #>FConstantRun
.89a9	20 43 cc	jsr $cc43			jsr Jsr_Comma_YA
.89ac	20 48 bb	jsr $bb48			jsr adjust_z
.89af	4c de 85	jmp $85de			jmp FComma		; inline operand, & return
.89b2					_Short:
.89b2	20 9d 88	jsr $889d			jsr FLitShort		; compile load value
.89b5	20 5a cc	jsr $cc5a			jsr Jmp_Comma_YA
.89b8	4c 48 bb	jmp $bb48			jmp adjust_z
=30					CL	.var *-(WordListLink+wh_Xt)
=$89bb					en = *	; remember here
>899b	1e					.byte CL	;wh_CodeLength
.89bb					FConstantRun:
.89bb	68		pla				pla			; tmp2= pop RTS addr & add 1
.89bc	18		clc				clc
.89bd	69 01		adc #$01			adc #1
.89bf	85 16		sta $16				sta tmp2+0
.89c1	68		pla				pla
.89c2	69 00		adc #$00			adc #0
.89c4	85 17		sta $17				sta tmp2+1
.89c6	4c 86 85	jmp $8586			jmp FAt_Tmp2		; fetch inline data, & return
>89c9	46 56 61 6c 75 65		L1:	.text "FValue"	;  name of word as a string, ending at wh_NameLastChar
>89cf	06					.byte *-L1	;wh_NameLength	length of name
>89d0	18 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89d3	0c					.byte IM+NN	;wh_Flags	dictionary flags
=35151					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89d4	20 5d c0	jsr $c05d	FValue:		jsr Header_Comma	; compile word header
.89d7	a9 e4		lda #$e4			lda #<FValue_runtime	; compile JSR FValue_runtime
.89d9	a0 89		ldy #$89			ldy #>FValue_runtime
.89db	20 43 cc	jsr $cc43			jsr Jsr_Comma_YA
.89de	20 48 bb	jsr $bb48			jsr adjust_z		; fix word length
.89e1	4c de 85	jmp $85de			jmp FComma		; alloc & init value
=16					CL	.var *-(WordListLink+wh_Xt)
=$89e4					en = *	; remember here
>89d2	10					.byte CL	;wh_CodeLength
.89e4					FValue_runtime:
.89e4	4c bb 89	jmp $89bb			jmp FConstantRun
>89e7	46 53 63 61 6c 65		L1:	.text "FScale"	;  name of word as a string, ending at wh_NameLastChar
>89ed	06					.byte *-L1	;wh_NameLength	length of name
>89ee	4f 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89f1	08					.byte NN	;wh_Flags	dictionary flags
=35181					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89f2	20 1f b3	jsr $b31f	FScale:		jsr PopA		; pop n
.89f5	86 14		stx $14		FScaleA:	stx tmp1		; save data stack index
.89f7	a6 4c		ldx $4c				ldx fp
.89f9	b4 57		ldy $57,x			ldy FSMant0,x		; mantissa zero?
.89fb	f0 07		beq $8a04			beq _8
.89fd	18		clc				clc
.89fe	75 4d		adc $4d,x			adc FSExp,x
.8a00	95 4d		sta $4d,x			sta FSExp,x
.8a02	70 03		bvs $8a07			bvs _overflow		; overflow or underflow?
.8a04	a6 14		ldx $14		_8:		ldx tmp1		; restore data stack index
.8a06	60		rts				rts
.8a07					_overflow:
.8a07	a6 14		ldx $14				ldx tmp1		; restore data stack index
.8a09	20 9d b3	jsr $b39d			jsr Throw_FpOutOfRange
=26					CL	.var *-(WordListLink+wh_Xt)
=$8a0c					en = *	; remember here
>89f0	1a					.byte CL	;wh_CodeLength
>8a0c	46 32 2a			L1:	.text "F2*"	;  name of word as a string, ending at wh_NameLastChar
>8a0f	03					.byte *-L1	;wh_NameLength	length of name
>8a10	6d 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a12	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a13	08					.byte NN	;wh_Flags	dictionary flags
=35215					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a14	a9 01		lda #$01	F2Star:		lda #1
.8a16	d0 dd		bne $89f5			bne FScaleA
=4					CL	.var *-(WordListLink+wh_Xt)
=$8a18					en = *	; remember here
>8a12	04					.byte CL	;wh_CodeLength
>8a18	46 32 2f			L1:	.text "F2/"	;  name of word as a string, ending at wh_NameLastChar
>8a1b	03					.byte *-L1	;wh_NameLength	length of name
>8a1c	8f 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a1e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a1f	08					.byte NN	;wh_Flags	dictionary flags
=35227					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a20	a9 ff		lda #$ff	F2Slash:	lda #$ff
.8a22	d0 d1		bne $89f5			bne FScaleA
=4					CL	.var *-(WordListLink+wh_Xt)
=$8a24					en = *	; remember here
>8a1e	04					.byte CL	;wh_CodeLength
>8a24	2b 8a				L1:	.text FMAlignX	;  name of word as a string, ending at wh_NameLastChar
>8a26	02					.byte *-L1	;wh_NameLength	length of name
>8a27	9b 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a29	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a2a	08					.byte NN	;wh_Flags	dictionary flags
=35238					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a2b	86 14		stx $14		FMAlignX:	stx tmp1+0	; save data stack index
.8a2d	a6 4c		ldx $4c				ldx fp		; load FP stack index
.8a2f	e0 09		cpx #$09			cpx #FDim-1	; check FP stack for 2 entries
.8a31	b0 60		bcs $8a93			bcs Throw_FPStack_3
.8a33	b5 4d		lda $4d,x			lda FSExp+0,x
.8a35	38		sec				sec
.8a36	f5 4e		sbc $4e,x			sbc FSExp+1,x	; compare exponents
.8a38	a8		tay				tay
.8a39	f0 22		beq $8a5d			beq _rts	; already = ?
.8a3b	10 2b		bpl $8a68			bpl _2		; r2 smaller?
.8a3d					_1:
.8a3d	70 4a		bvs $8a89			bvs _2z		; was this a big positive #?
.8a3f	c0 e0		cpy #$e0			cpy #-32
.8a41	90 1b		bcc $8a5e			bcc _1z		; all significant bits gone?
.8a43	b5 57		lda $57,x			lda FSMant0+0,x
.8a45	29 80		and #$80			and #$80
.8a47	85 15		sta $15				sta tmp1+1	; prepare sign for shifts
.8a49	b5 57		lda $57,x			lda FSMant0+0,x
.8a4b	4a		lsr a		_1s:		lsr a
.8a4c	05 15		ora $15				ora tmp1+1
.8a4e	76 61		ror $61,x			ror FSMant1+0,x
.8a50	76 6b		ror $6b,x			ror FSMant2+0,x
.8a52	76 75		ror $75,x			ror FSMant3+0,x
.8a54	c8		iny				iny
.8a55	d0 f4		bne $8a4b			bne _1s
.8a57	95 57		sta $57,x	_1e:		sta FSMant0+0,x
.8a59	b5 4e		lda $4e,x			lda FSExp+1,x
.8a5b	95 4d		sta $4d,x			sta FSExp+0,x
.8a5d	60		rts		_rts:		rts
.8a5e	a9 00		lda #$00	_1z:		lda #0		; TOS=0
.8a60	95 61		sta $61,x			sta FSMant1+0,x
.8a62	95 6b		sta $6b,x			sta FSMant2+0,x
.8a64	95 75		sta $75,x			sta FSMant3+0,x
.8a66	f0 ef		beq $8a57			beq _1e
.8a68					_2:
.8a68	70 f4		bvs $8a5e			bvs _1z		; was this a big negative #?
.8a6a	c0 20		cpy #$20			cpy #32
.8a6c	b0 1b		bcs $8a89			bcs _2z		; all significant bits gone?
.8a6e	b5 58		lda $58,x			lda FSMant0+1,x
.8a70	29 80		and #$80			and #$80
.8a72	85 15		sta $15				sta tmp1+1	; prepare sign for shifts
.8a74	b5 58		lda $58,x			lda FSMant0+1,x
.8a76	4a		lsr a		_2s:		lsr a
.8a77	05 15		ora $15				ora tmp1+1
.8a79	76 62		ror $62,x			ror FSMant1+1,x
.8a7b	76 6c		ror $6c,x			ror FSMant2+1,x
.8a7d	76 76		ror $76,x			ror FSMant3+1,x
.8a7f	88		dey				dey
.8a80	d0 f4		bne $8a76			bne _2s
.8a82	95 58		sta $58,x	_2e:		sta FSMant0+1,x
.8a84	b5 4d		lda $4d,x			lda FSExp+0,x
.8a86	95 4e		sta $4e,x			sta FSExp+1,x
.8a88	60		rts				rts
.8a89	a9 00		lda #$00	_2z:		lda #0		; NOS=0
.8a8b	95 62		sta $62,x			sta FSMant1+1,x
.8a8d	95 6c		sta $6c,x			sta FSMant2+1,x
.8a8f	95 76		sta $76,x			sta FSMant3+1,x
.8a91	f0 ef		beq $8a82			beq _2e
=104					CL	.var *-(WordListLink+wh_Xt)
=$8a93					en = *	; remember here
>8a29	68					.byte CL	;wh_CodeLength
.8a93	4c 93 b3	jmp $b393	Throw_FPStack_3: jmp Throw_FPStack
>8a96	46 4e 6f 72 6d			L1:	.text "FNorm"	;  name of word as a string, ending at wh_NameLastChar
>8a9b	05					.byte *-L1	;wh_NameLength	length of name
>8a9c	a6 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a9e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a9f	08					.byte NN	;wh_Flags	dictionary flags
=35355					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8aa0	86 14		stx $14		FNorm:		stx tmp1+0		; save data stack index
.8aa2	a6 4c		ldx $4c		FNormX:		ldx fp			; switch to FP stack
.8aa4	b4 4d		ldy $4d,x			ldy FSExp,x
.8aa6	b5 57		lda $57,x			lda FSMant0,x		; mantissa negative?
.8aa8	30 2d		bmi $8ad7			bmi _Neg
.8aaa	d0 0f		bne $8abb			bne _Pos2		; do byte shift
.8aac	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8aaf	d0 0a		bne $8abb			bne _Pos2
.8ab1	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ab4	d0 05		bne $8abb			bne _Pos2
.8ab6	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ab9	f0 43		beq $8afe			beq _zero		; no significant bits left?
.8abb	18		clc		_Pos2:		clc
.8abc	30 0a		bmi $8ac8			bmi _RShft
.8abe	88		dey		_Pos3:		dey			; do bit shift
.8abf	16 75		asl $75,x			asl FSMant3,x
.8ac1	36 6b		rol $6b,x			rol FSMant2,x
.8ac3	36 61		rol $61,x			rol FSMant1,x
.8ac5	2a		rol a				rol a
.8ac6	10 f6		bpl $8abe			bpl _Pos3
.8ac8					_RShft:
.8ac8	c8		iny				iny
.8ac9	6a		ror a				ror a
.8aca	76 61		ror $61,x			ror FSMant1,x
.8acc	76 6b		ror $6b,x			ror FSMant2,x
.8ace	76 75		ror $75,x			ror FSMant3,x
.8ad0					_28:
.8ad0	95 57		sta $57,x			sta FSMant0,x
.8ad2	94 4d		sty $4d,x			sty FSExp,x
.8ad4	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.8ad6	60		rts				rts
.8ad7					_Neg:
.8ad7	c9 ff		cmp #$ff			cmp #$ff
.8ad9	d0 11		bne $8aec			bne _Neg2	; do byte shift
.8adb	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ade	c9 ff		cmp #$ff			cmp #$ff
.8ae0	d0 0a		bne $8aec			bne _Neg2
.8ae2	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ae5	c9 ff		cmp #$ff			cmp #$ff
.8ae7	d0 03		bne $8aec			bne _Neg2
.8ae9	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8aec	c9 00		cmp #$00	_Neg2:		cmp #0
.8aee	10 d8		bpl $8ac8			bpl _RShft
.8af0	88		dey		_Neg3:		dey
.8af1	16 75		asl $75,x			asl FSMant3,x
.8af3	36 6b		rol $6b,x			rol FSMant2,x
.8af5	36 61		rol $61,x			rol FSMant1,x
.8af7	2a		rol a				rol a
.8af8	30 f6		bmi $8af0			bmi _Neg3
.8afa	10 cc		bpl $8ac8			bpl _RShft
.8afc	68		pla		_Zerop:		pla
.8afd	68		pla				pla		; pop rts addr from _ShiftB
.8afe	a9 00		lda #$00	_zero:		lda #0
.8b00	95 75		sta $75,x			sta FSMant3,x
.8b02	95 6b		sta $6b,x			sta FSMant2,x
.8b04	95 61		sta $61,x			sta FSMant1,x
.8b06	a0 80		ldy #$80			ldy #$80
.8b08	d0 c6		bne $8ad0			bne _28
.8b0a					_ShiftB:
.8b0a	98		tya				tya
.8b0b	38		sec				sec
.8b0c	e9 08		sbc #$08			sbc #8
.8b0e	a8		tay				tay
.8b0f	70 eb		bvs $8afc			bvs _zerop	;is this useful? do we need more of them?
.8b11	b5 61		lda $61,x			lda FSMant1,x
.8b13	48		pha				pha
.8b14	b5 6b		lda $6b,x			lda FSMant2,x
.8b16	95 61		sta $61,x			sta FSMant1,x
.8b18	b5 75		lda $75,x			lda FSMant3,x
.8b1a	95 6b		sta $6b,x			sta FSMant2,x
.8b1c	a9 00		lda #$00			lda #0
.8b1e	95 75		sta $75,x			sta FSMant3,x
.8b20	68		pla				pla
.8b21	60		rts				rts
=130					CL	.var *-(WordListLink+wh_Xt)
=$8b22					en = *	; remember here
>8a9e	82					.byte CL	;wh_CodeLength
>8b22	46 2b				L1:	.text "F+"	;  name of word as a string, ending at wh_NameLastChar
>8b24	02					.byte *-L1	;wh_NameLength	length of name
>8b25	1b 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b27	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b28	08					.byte NN	;wh_Flags	dictionary flags
=35492					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b29	20 2b 8a	jsr $8a2b	FPlus:		jsr FMAlignX	; align mantissas
.8b2c	18		clc				clc		; add mantissas
.8b2d	b5 76		lda $76,x			lda FSMant3+1,x
.8b2f	75 75		adc $75,x			adc FSMant3+0,x
.8b31	95 76		sta $76,x			sta FSMant3+1,x
.8b33	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b35	75 6b		adc $6b,x			adc FSMant2+0,x
.8b37	95 6c		sta $6c,x			sta FSMant2+1,x
.8b39	b5 62		lda $62,x			lda FSMant1+1,x
.8b3b	75 61		adc $61,x			adc FSMant1+0,x
.8b3d	95 62		sta $62,x			sta FSMant1+1,x
.8b3f	b5 58		lda $58,x			lda FSMant0+1,x
.8b41	75 57		adc $57,x			adc FSMant0+0,x
.8b43					FPlusFin:
.8b43	e8		inx				inx		; FDrop
.8b44	86 4c		stx $4c				stx fp
.8b46	50 09		bvc $8b51	FPlusFin3:	bvc _19		; if overflow
.8b48	6a		ror a				ror a		;   shift mantissa right 1 bit
.8b49	76 61		ror $61,x			ror FSMant1,x
.8b4b	76 6b		ror $6b,x			ror FSMant2,x
.8b4d	76 75		ror $75,x			ror FSMant3,x
.8b4f	f6 4d		inc $4d,x			inc FSExp,x	;   adjust exponent
.8b51					_19:
.8b51	95 57		sta $57,x			sta FSMant0,x
.8b53	4c a2 8a	jmp $8aa2			jmp FNormX	; normalize, return
=45					CL	.var *-(WordListLink+wh_Xt)
=$8b56					en = *	; remember here
>8b27	2d					.byte CL	;wh_CodeLength
>8b56	46 31 2b			L1:	.text "F1+"	;  name of word as a string, ending at wh_NameLastChar
>8b59	03					.byte *-L1	;wh_NameLength	length of name
>8b5a	a4 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b5c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b5d	08					.byte NN	;wh_Flags	dictionary flags
=35545					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b5e	20 28 89	jsr $8928	F1Plus:		jsr F1
.8b61	4c 29 8b	jmp $8b29			jmp FPlus
=6					CL	.var *-(WordListLink+wh_Xt)
=$8b64					en = *	; remember here
>8b5c	06					.byte CL	;wh_CodeLength
>8b64	46 2d				L1:	.text "F-"	;  name of word as a string, ending at wh_NameLastChar
>8b66	02					.byte *-L1	;wh_NameLength	length of name
>8b67	d9 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b69	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b6a	08					.byte NN	;wh_Flags	dictionary flags
=35558					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b6b	20 2b 8a	jsr $8a2b	FMinus:		jsr FMAlignX	; align mantissas
.8b6e	38		sec				sec		; subtract mantissas
.8b6f	b5 76		lda $76,x			lda FSMant3+1,x
.8b71	f5 75		sbc $75,x			sbc FSMant3+0,x
.8b73	95 76		sta $76,x			sta FSMant3+1,x
.8b75	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b77	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8b79	95 6c		sta $6c,x			sta FSMant2+1,x
.8b7b	b5 62		lda $62,x			lda FSMant1+1,x
.8b7d	f5 61		sbc $61,x			sbc FSMant1+0,x
.8b7f	95 62		sta $62,x			sta FSMant1+1,x
.8b81	b5 58		lda $58,x			lda FSMant0+1,x
.8b83	f5 57		sbc $57,x			sbc FSMant0+0,x
.8b85	4c 43 8b	jmp $8b43			jmp FPlusFin
=29					CL	.var *-(WordListLink+wh_Xt)
=$8b88					en = *	; remember here
>8b69	1d					.byte CL	;wh_CodeLength
>8b88	46 31 2d			L1:	.text "F1-"	;  name of word as a string, ending at wh_NameLastChar
>8b8b	03					.byte *-L1	;wh_NameLength	length of name
>8b8c	e6 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b8e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b8f	08					.byte NN	;wh_Flags	dictionary flags
=35595					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b90	20 28 89	jsr $8928	F1Minus:	jsr F1
.8b93	4c 6b 8b	jmp $8b6b			jmp FMinus
=6					CL	.var *-(WordListLink+wh_Xt)
=$8b96					en = *	; remember here
>8b8e	06					.byte CL	;wh_CodeLength
>8b96	46 4e 65 67 61 74 65		L1:	.text "FNegate"	;  name of word as a string, ending at wh_NameLastChar
>8b9d	07					.byte *-L1	;wh_NameLength	length of name
>8b9e	0b 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ba0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ba1	08					.byte NN	;wh_Flags	dictionary flags
=35613					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ba2	86 14		stx $14		FNegate:	stx tmp1	; save data stack index
.8ba4	a6 4c		ldx $4c				ldx fp		; X= FP stack index
.8ba6	38		sec				sec		; mantissa = 0 - mantissa
.8ba7	a9 00		lda #$00			lda #0
.8ba9	f5 75		sbc $75,x			sbc FSMant3,x
.8bab	95 75		sta $75,x			sta FSMant3,x
.8bad	a9 00		lda #$00			lda #0
.8baf	f5 6b		sbc $6b,x			sbc FSMant2,x
.8bb1	95 6b		sta $6b,x			sta FSMant2,x
.8bb3	a9 00		lda #$00			lda #0
.8bb5	f5 61		sbc $61,x			sbc FSMant1,x
.8bb7	95 61		sta $61,x			sta FSMant1,x
.8bb9	a9 00		lda #$00			lda #0
.8bbb	f5 57		sbc $57,x			sbc FSMant0,x
.8bbd	4c 46 8b	jmp $8b46			jmp FPlusFin3	; finish up, return
=30					CL	.var *-(WordListLink+wh_Xt)
=$8bc0					en = *	; remember here
>8ba0	1e					.byte CL	;wh_CodeLength
>8bc0	46 41 62 73			L1:	.text "FAbs"	;  name of word as a string, ending at wh_NameLastChar
>8bc4	04					.byte *-L1	;wh_NameLength	length of name
>8bc5	1d 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8bc7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8bc8	08					.byte NN	;wh_Flags	dictionary flags
=35652					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8bc9	a4 4c		ldy $4c		FAbs:		ldy fp
.8bcb	b9 57 00	lda $0057,y			lda FSMant0,y		; mantissa negative?
.8bce	30 d2		bmi $8ba2			bmi FNegate
.8bd0	60		rts				rts
=8					CL	.var *-(WordListLink+wh_Xt)
=$8bd1					en = *	; remember here
>8bc7	08					.byte CL	;wh_CodeLength
.8bd1	4c 93 b3	jmp $b393	Throw_FPStack_4: jmp Throw_FPStack
.8bd4	a4 4c		ldy $4c		FPos:		ldy fp			; load FP stack index
.8bd6	c0 09		cpy #$09			cpy #FDim-1		; check FP stack for 2
.8bd8	b0 f7		bcs $8bd1			bcs Throw_FPStack_4
.8bda	b9 57 00	lda $0057,y			lda FSMant0+0,y		; calc result sign
.8bdd	59 58 00	eor $0058,y			eor FSMant0+1,y
.8be0	08		php				php
.8be1	b9 58 00	lda $0058,y			lda FSMant0+1,y		; if NOS negative
.8be4	10 07		bpl $8bed			bpl +
.8be6	e6 4c		inc $4c				inc fp			;   point at NOS
.8be8	20 a2 8b	jsr $8ba2			jsr FNegate		;   negate NOS
.8beb	c6 4c		dec $4c				dec fp			;   restore fp
.8bed					+
.8bed	20 c9 8b	jsr $8bc9			jsr FAbs		; abs TOS
.8bf0	86 14		stx $14				stx tmp1+0		; save data stack index
.8bf2	a6 4c		ldx $4c				ldx fp			; load FP stack index
.8bf4	28		plp				plp			; restore sign flag
.8bf5	60		rts				rts
>8bf6	46 2a				L1:	.text "F*"	;  name of word as a string, ending at wh_NameLastChar
>8bf8	02					.byte *-L1	;wh_NameLength	length of name
>8bf9	44 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8bfb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8bfc	08					.byte NN	;wh_Flags	dictionary flags
=35704					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8bfd					FStar:
.8bfd	20 d4 8b	jsr $8bd4			jsr FPos		; make r1 & r2 positive,
.8c00	08		php				php			;   save r3 sign
.8c01	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8c03	38		sec				sec
.8c04	75 4e		adc $4e,x			adc FSExp+1,x
.8c06	95 4e		sta $4e,x			sta FSExp+1,x
.8c08	50 12		bvc $8c1c			bvc _49			; IfVs,
.8c0a	b0 06		bcs $8c12			bcs _zero		;   underflow?
.8c0c	a6 14		ldx $14				ldx tmp1+0		;   restore data stack index
.8c0e	28		plp				plp			; RDrop sign flag
.8c0f	20 9d b3	jsr $b39d			jsr Throw_FpOutOfRange
.8c12	e8		inx		_zero:		inx			; F2Drop
.8c13	e8		inx				inx
.8c14	86 4c		stx $4c				stx fp
.8c16	28		plp				plp			; rdrop saved result sign
.8c17	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c19	4c ec 88	jmp $88ec			jmp F0			; return zero
.8c1c					_49:
.8c1c	b5 58		lda $58,x			lda FSMant0+1,x		; save r1 mantissa
.8c1e	48		pha				pha
.8c1f	b5 62		lda $62,x			lda FSMant1+1,x
.8c21	48		pha				pha
.8c22	b5 6c		lda $6c,x			lda FSMant2+1,x
.8c24	48		pha				pha
.8c25	b5 76		lda $76,x			lda FSMant3+1,x
.8c27	a0 00		ldy #$00			ldy #0			; init r3 mantissa
.8c29	94 58		sty $58,x			sty FSMant0+1,x
.8c2b	94 62		sty $62,x			sty FSMant1+1,x
.8c2d	94 6c		sty $6c,x			sty FSMant2+1,x
.8c2f	94 76		sty $76,x			sty FSMant3+1,x
.8c31	20 4d 8c	jsr $8c4d			jsr _Byte		; do bytes of r1 mantissa
.8c34	68		pla				pla
.8c35	20 4d 8c	jsr $8c4d			jsr _Byte
.8c38	68		pla				pla
.8c39	20 4d 8c	jsr $8c4d			jsr _Byte
.8c3c	68		pla				pla
.8c3d	20 4d 8c	jsr $8c4d			jsr _Byte
.8c40	e6 4c		inc $4c				inc fp			; FDrop
.8c42	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c44	28		plp				plp			; fix result sign
.8c45	10 03		bpl $8c4a			bpl +
.8c47	4c a2 8b	jmp $8ba2			jmp FNegate
.8c4a					+
.8c4a	4c a0 8a	jmp $8aa0			jmp FNorm
.8c4d					_Byte:
.8c4d	85 15		sta $15				sta tmp1+1
.8c4f	a0 08		ldy #$08			ldy #8			; for each bit in byte
.8c51	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8c53	90 19		bcc $8c6e			bcc _b3
.8c55	18		clc				clc			;     r3 += r2
.8c56	b5 76		lda $76,x			lda FSMant3+1,x
.8c58	75 75		adc $75,x			adc FSMant3+0,x
.8c5a	95 76		sta $76,x			sta FSMant3+1,x
.8c5c	b5 6c		lda $6c,x			lda FSMant2+1,x
.8c5e	75 6b		adc $6b,x			adc FSMant2+0,x
.8c60	95 6c		sta $6c,x			sta FSMant2+1,x
.8c62	b5 62		lda $62,x			lda FSMant1+1,x
.8c64	75 61		adc $61,x			adc FSMant1+0,x
.8c66	95 62		sta $62,x			sta FSMant1+1,x
.8c68	b5 58		lda $58,x			lda FSMant0+1,x
.8c6a	75 57		adc $57,x			adc FSMant0+0,x
.8c6c	95 58		sta $58,x			sta FSMant0+1,x
.8c6e	56 58		lsr $58,x	_b3:		lsr FSMant0+1,x		;   r3 >>= 1
.8c70	76 62		ror $62,x			ror FSMant1+1,x
.8c72	76 6c		ror $6c,x			ror FSMant2+1,x
.8c74	76 76		ror $76,x			ror FSMant3+1,x
.8c76	88		dey				dey			;  next bit
.8c77	d0 d8		bne $8c51			bne _b1
.8c79	60		rts				rts
=125					CL	.var *-(WordListLink+wh_Xt)
=$8c7a					en = *	; remember here
>8bfb	7d					.byte CL	;wh_CodeLength
>8c7a	46 53 71 72			L1:	.text "FSqr"	;  name of word as a string, ending at wh_NameLastChar
>8c7e	04					.byte *-L1	;wh_NameLength	length of name
>8c7f	78 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8c81	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8c82	08					.byte NN	;wh_Flags	dictionary flags
=35838					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8c83	20 78 84	jsr $8478	FSqr:		jsr FDup
.8c86	4c fd 8b	jmp $8bfd			jmp FStar
=6					CL	.var *-(WordListLink+wh_Xt)
=$8c89					en = *	; remember here
>8c81	06					.byte CL	;wh_CodeLength
>8c89	46 31 30 2a			L1:	.text "F10*"	;  name of word as a string, ending at wh_NameLastChar
>8c8d	04					.byte *-L1	;wh_NameLength	length of name
>8c8e	fe 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8c90	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8c91	08					.byte NN	;wh_Flags	dictionary flags
=35853					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8c92	20 78 84	jsr $8478	F10Star:	jsr FDup
.8c95	a4 4c		ldy $4c				ldy fp
.8c97	b9 4d 00	lda $004d,y			lda FSExp+0,y
.8c9a	18		clc				clc
.8c9b	69 01		adc #$01			adc #1
.8c9d	99 4d 00	sta $004d,y			sta FSExp+0,y
.8ca0	18		clc				clc
.8ca1	69 02		adc #$02			adc #2
.8ca3	99 4e 00	sta $004e,y			sta FSExp+1,y
.8ca6	4c 29 8b	jmp $8b29			jmp FPlus
=23					CL	.var *-(WordListLink+wh_Xt)
=$8ca9					en = *	; remember here
>8c90	17					.byte CL	;wh_CodeLength
>8ca9	46 2f				L1:	.text "F/"	;  name of word as a string, ending at wh_NameLastChar
>8cab	02					.byte *-L1	;wh_NameLength	length of name
>8cac	0d 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8cae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8caf	08					.byte NN	;wh_Flags	dictionary flags
=35883					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8cb0	20 d4 8b	jsr $8bd4	FSlash:		jsr FPos		; make r1 & r2 positive
.8cb3	08		php				php			;   save result sign
.8cb4	b5 4e		lda $4e,x			lda FSExp+1,x		; calc exponent
.8cb6	18		clc				clc
.8cb7	69 01		adc #$01			adc #1
.8cb9	38		sec				sec
.8cba	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8cbc	95 4e		sta $4e,x			sta FSExp+1,x
.8cbe	50 12		bvc $8cd2			bvc _49			;  IfVs
.8cc0	b0 06		bcs $8cc8			bcs _Zero		; underflow?
.8cc2	28		plp				plp			; drop saved result sign
.8cc3	a6 15		ldx $15				ldx tmp1+1		; restore data stack index
.8cc5	20 9d b3	jsr $b39d			jsr Throw_FpOutOfRange	; overflow
.8cc8	e8		inx		_Zero:		inx			; F2Drop
.8cc9	e8		inx				inx
.8cca	86 4c		stx $4c				stx fp
.8ccc	28		plp				plp			; drop saved result sign
.8ccd	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8ccf	4c ec 88	jmp $88ec			jmp F0			; return 0
.8cd2					_49:
.8cd2	b5 76		lda $76,x			lda FSMant3+1,x		; tmp32 = r1
.8cd4	85 16		sta $16				sta tmp2+0
.8cd6	b5 6c		lda $6c,x			lda FSMant2+1,x
.8cd8	85 17		sta $17				sta tmp2+1
.8cda	b5 62		lda $62,x			lda FSMant1+1,x
.8cdc	85 18		sta $18				sta tmp3+0
.8cde	b5 58		lda $58,x			lda FSMant0+1,x
.8ce0	85 19		sta $19				sta tmp3+1
.8ce2	20 0b 8d	jsr $8d0b			jsr _Byte
.8ce5	95 58		sta $58,x			sta FSMant0+1,x
.8ce7	20 0b 8d	jsr $8d0b			jsr _Byte
.8cea	95 62		sta $62,x			sta FSMant1+1,x
.8cec	20 0b 8d	jsr $8d0b			jsr _Byte
.8cef	95 6c		sta $6c,x			sta FSMant2+1,x
.8cf1	20 0b 8d	jsr $8d0b			jsr _Byte
.8cf4	95 76		sta $76,x			sta FSMant3+1,x
.8cf6	56 58		lsr $58,x			lsr FSMant0+1,x
.8cf8	76 62		ror $62,x			ror FSMant1+1,x
.8cfa	76 6c		ror $6c,x			ror FSMant2+1,x
.8cfc	76 76		ror $76,x			ror FSMant3+1,x
.8cfe	e6 4c		inc $4c				inc fp			; FDrop
.8d00	a6 14		ldx $14				ldx tmp1+0		; restore X
.8d02	28		plp				plp			; fix sign
.8d03	10 03		bpl $8d08			bpl +
.8d05	20 a2 8b	jsr $8ba2			jsr FNegate
.8d08	4c a0 8a	jmp $8aa0	+		jmp FNorm
.8d0b					_Byte:
.8d0b	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d0d					_1:
.8d0d	a5 19		lda $19				lda tmp3+1		;   if r1>=r2
.8d0f	d5 57		cmp $57,x			cmp FSMant0+0,x
.8d11	d0 10		bne $8d23			bne _4
.8d13	a5 18		lda $18				lda tmp3+0
.8d15	d5 61		cmp $61,x			cmp FSMant1+0,x
.8d17	d0 0a		bne $8d23			bne _4
.8d19	a5 17		lda $17				lda tmp2+1
.8d1b	d5 6b		cmp $6b,x			cmp FSMant2+0,x
.8d1d	d0 04		bne $8d23			bne _4
.8d1f	a5 16		lda $16				lda tmp2+0
.8d21	d5 75		cmp $75,x			cmp FSMant3+0,x
.8d23	90 18		bcc $8d3d	_4:		bcc _2
.8d25	a5 16		lda $16				lda tmp2+0		;     tmp32 -= r2
.8d27	f5 75		sbc $75,x			sbc FSMant3+0,x
.8d29	85 16		sta $16				sta tmp2+0
.8d2b	a5 17		lda $17				lda tmp2+1
.8d2d	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8d2f	85 17		sta $17				sta tmp2+1
.8d31	a5 18		lda $18				lda tmp3+0
.8d33	f5 61		sbc $61,x			sbc FSMant1+0,x
.8d35	85 18		sta $18				sta tmp3+0
.8d37	a5 19		lda $19				lda tmp3+1
.8d39	f5 57		sbc $57,x			sbc FSMant0+0,x
.8d3b	85 19		sta $19				sta tmp3+1
.8d3d	26 15		rol $15		_2:		rol tmp1+1		;   accum quotient bits
.8d3f	06 16		asl $16				asl tmp2+0
.8d41	26 17		rol $17				rol tmp2+1
.8d43	26 18		rol $18				rol tmp3+0
.8d45	26 19		rol $19				rol tmp3+1		;   tmp32<<=1
.8d47	88		dey				dey			;  next
.8d48	d0 c3		bne $8d0d			bne _1
.8d4a	a5 15		lda $15				lda tmp1+1		; return bits
.8d4c	60		rts				rts
=157					CL	.var *-(WordListLink+wh_Xt)
=$8d4d					en = *	; remember here
>8cae	9d					.byte CL	;wh_CodeLength
>8d4d	46 31 2f			L1:	.text "F1/"	;  name of word as a string, ending at wh_NameLastChar
>8d50	03					.byte *-L1	;wh_NameLength	length of name
>8d51	2b 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8d53	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8d54	08					.byte NN	;wh_Flags	dictionary flags
=36048					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8d55	20 28 89	jsr $8928	F1Slash:	jsr F1
.8d58	20 00 85	jsr $8500			jsr FSwap
.8d5b	4c b0 8c	jmp $8cb0			jmp FSlash
=9					CL	.var *-(WordListLink+wh_Xt)
=$8d5e					en = *	; remember here
>8d53	09					.byte CL	;wh_CodeLength
>8d5e	45 2a				L1:	.text "E*"	;  name of word as a string, ending at wh_NameLastChar
>8d60	02					.byte *-L1	;wh_NameLength	length of name
>8d61	d0 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8d63	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8d64	08					.byte NN	;wh_Flags	dictionary flags
=36064					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8d65					EStar:
.8d65	20 d4 8b	jsr $8bd4			jsr FPos		; make r1 & r2 positive
.8d68	08		php				php			;   remember result sign
.8d69	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8d6b	38		sec				sec
.8d6c	75 4e		adc $4e,x			adc FSExp+1,x
.8d6e	95 4e		sta $4e,x			sta FSExp+1,x
.8d70	70 15		bvs $8d87			bvs _ExpOvfl
.8d72	b5 58		lda $58,x			lda FSMant0+1,x		; save e1
.8d74	48		pha				pha
.8d75	b5 62		lda $62,x			lda FSMant1+1,x
.8d77	a0 00		ldy #$00			ldy #0
.8d79	94 58		sty $58,x			sty FSMant0+1,x
.8d7b	94 62		sty $62,x			sty FSMant1+1,x		; zero result
.8d7d	20 96 8d	jsr $8d96			jsr _Byte		; do FSMant1+1 byte
.8d80	68		pla				pla
.8d81	20 96 8d	jsr $8d96			jsr _Byte		; do FSMant0+1 byte
.8d84	4c b3 8d	jmp $8db3			jmp EFix3		; finish
.8d87					_ExpOvfl:
.8d87	b0 05		bcs $8d8e			bcs _Zero		;underflow?
.8d89	a6 14		ldx $14				ldx tmp1+0		; restore X
.8d8b	20 9d b3	jsr $b39d			jsr Throw_FpOutOfRange	;overflow
.8d8e	a9 00		lda #$00	_Zero:		lda #0
.8d90	95 62		sta $62,x			sta FSMant1+1,x
.8d92	95 58		sta $58,x			sta FSMant0+1,x
.8d94	f0 1d		beq $8db3			beq EFix3
.8d96					_Byte:
.8d96	85 15		sta $15				sta tmp1+1
.8d98	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d9a	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8d9c	90 0d		bcc $8dab			bcc _b5
.8d9e	18		clc				clc			;     r3 += r2
.8d9f	b5 61		lda $61,x			lda FSMant1+0,x
.8da1	75 62		adc $62,x			adc FSMant1+1,x
.8da3	95 62		sta $62,x			sta FSMant1+1,x
.8da5	b5 57		lda $57,x			lda FSMant0+0,x
.8da7	75 58		adc $58,x			adc FSMant0+1,x
.8da9	95 58		sta $58,x			sta FSMant0+1,x
.8dab					_b5:
.8dab	76 58		ror $58,x			ror FSMant0+1,x		;   r3 <<= 1
.8dad	76 62		ror $62,x			ror FSMant1+1,x
.8daf	88		dey				dey			;  next bit
.8db0	d0 e8		bne $8d9a			bne _b1
.8db2	60		rts				rts
=78					CL	.var *-(WordListLink+wh_Xt)
=$8db3					en = *	; remember here
>8d63	4e					.byte CL	;wh_CodeLength
.8db3					EFix3:
.8db3	a9 00		lda #$00			lda #0			; zero unused mantissa
.8db5	95 6c		sta $6c,x			sta FSMant2+1,x
.8db7	95 76		sta $76,x			sta FSMant3+1,x
.8db9	e6 4c		inc $4c				inc fp			; FDrop
.8dbb	a6 14		ldx $14				ldx tmp1+0		; restore X
.8dbd	28		plp				plp			;fix result sign
.8dbe	10 03		bpl $8dc3			bpl +
.8dc0	4c a2 8b	jmp $8ba2			jmp FNegate
.8dc3	4c a0 8a	jmp $8aa0	+		jmp FNorm
>8dc6	45 53 71 72			L1:	.text "ESqr"	;  name of word as a string, ending at wh_NameLastChar
>8dca	04					.byte *-L1	;wh_NameLength	length of name
>8dcb	e0 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8dcd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8dce	08					.byte NN	;wh_Flags	dictionary flags
=36170					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8dcf	20 78 84	jsr $8478	ESqr:		jsr FDup
.8dd2	4c 65 8d	jmp $8d65			jmp EStar
=6					CL	.var *-(WordListLink+wh_Xt)
=$8dd5					en = *	; remember here
>8dcd	06					.byte CL	;wh_CodeLength
>8dd5	45 2f				L1:	.text "E/"	;  name of word as a string, ending at wh_NameLastChar
>8dd7	02					.byte *-L1	;wh_NameLength	length of name
>8dd8	4a 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8dda	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ddb	08					.byte NN	;wh_Flags	dictionary flags
=36183					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ddc	20 d4 8b	jsr $8bd4	ESlash:		jsr FPos	; make r1 & r2 positive
.8ddf	08		php				php		; remember result sign
.8de0	b5 4e		lda $4e,x			lda FSExp+1,x		; calc r3 exponent
.8de2	38		sec				sec
.8de3	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8de5	70 17		bvs $8dfe			bvs _ExpOvfl
.8de7	18		clc				clc
.8de8	69 01		adc #$01			adc #1
.8dea	95 4e		sta $4e,x			sta FSExp+1,x
.8dec	20 04 8e	jsr $8e04			jsr _Byte		; gen quotient hi byte
.8def	48		pha				pha
.8df0	20 04 8e	jsr $8e04			jsr _Byte		; gen quotient lo byte
.8df3	95 62		sta $62,x			sta FSMant1+1,x
.8df5	68		pla				pla
.8df6	4a		lsr a				lsr a
.8df7	95 58		sta $58,x			sta FSMant0+1,x
.8df9	76 62		ror $62,x			ror FSMant1+1,x
.8dfb	4c b3 8d	jmp $8db3			jmp EFix3
.8dfe					_ExpOvfl:
.8dfe	28		plp				plp			; rdrop saved result sign
.8dff	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e01	20 9d b3	jsr $b39d			jsr Throw_FpOutOfRange	; overflow
.8e04					_Byte:
.8e04	a0 08		ldy #$08			ldy #8			; for 8 bits
.8e06	b5 62		lda $62,x	_b1:		lda FSMant1+1,x		;   if r1 >= r2
.8e08	d5 61		cmp $61,x			cmp FSMant1+0,x
.8e0a	b5 58		lda $58,x			lda FSMant0+1,x
.8e0c	f5 57		sbc $57,x			sbc FSMant0+0,x
.8e0e	90 09		bcc $8e19			bcc _b5
.8e10	95 58		sta $58,x			sta FSMant0+1,x
.8e12	b5 62		lda $62,x			lda FSMant1+1,x		;     r1 -= r2
.8e14	f5 61		sbc $61,x			sbc FSMant1+0,x
.8e16	95 62		sta $62,x			sta FSMant1+1,x
.8e18	38		sec				sec
.8e19					_b5:
.8e19	26 15		rol $15				rol tmp1+1		;   save quotient bit
.8e1b	16 62		asl $62,x			asl FSMant1+1,x		;   r1 *= 2
.8e1d	36 58		rol $58,x			rol FSMant0+1,x
.8e1f	88		dey				dey			;  next bit
.8e20	d0 e4		bne $8e06			bne _b1
.8e22	a5 15		lda $15				lda tmp1+1		; return bits
.8e24	60		rts				rts
=73					CL	.var *-(WordListLink+wh_Xt)
=$8e25					en = *	; remember here
>8dda	49					.byte CL	;wh_CodeLength
>8e25	45 31 2f			L1:	.text "E1/"	;  name of word as a string, ending at wh_NameLastChar
>8e28	03					.byte *-L1	;wh_NameLength	length of name
>8e29	57 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e2b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e2c	08					.byte NN	;wh_Flags	dictionary flags
=36264					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e2d	20 28 89	jsr $8928	E1Slash:	jsr F1
.8e30	20 00 85	jsr $8500			jsr FSwap
.8e33	4c dc 8d	jmp $8ddc			jmp ESlash
=9					CL	.var *-(WordListLink+wh_Xt)
=$8e36					en = *	; remember here
>8e2b	09					.byte CL	;wh_CodeLength
>8e36	53 3e 46			L1:	.text "S>F"	;  name of word as a string, ending at wh_NameLastChar
>8e39	03					.byte *-L1	;wh_NameLength	length of name
>8e3a	a8 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e3c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e3d	08					.byte NN	;wh_Flags	dictionary flags
=36281					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e3e	20 3b b3	jsr $b33b	SToF:		jsr PopYA		; pop n
.8e41	20 16 84	jsr $8416	SToFYA:		jsr FAllocX		; alloc FP stack entry
.8e44	94 57		sty $57,x			sty FSMant0,x		; copy n to mantissa
.8e46	95 61		sta $61,x			sta FSMant1,x
.8e48	a9 00		lda #$00			lda #0			; pad mantissa
.8e4a	95 6b		sta $6b,x			sta FSMant2,x
.8e4c	95 75		sta $75,x			sta FSMant3,x
.8e4e	a9 0f		lda #$0f			lda #15			; set exponent
.8e50	95 4d		sta $4d,x			sta FSExp,x
.8e52	4c a2 8a	jmp $8aa2			jmp FNormX		; normalize, return
=23					CL	.var *-(WordListLink+wh_Xt)
=$8e55					en = *	; remember here
>8e3c	17					.byte CL	;wh_CodeLength
>8e55	44 3e 46			L1:	.text "D>F"	;  name of word as a string, ending at wh_NameLastChar
>8e58	03					.byte *-L1	;wh_NameLength	length of name
>8e59	b9 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e5b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e5c	08					.byte NN	;wh_Flags	dictionary flags
=36312					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e5d	20 16 84	jsr $8416	FDToF:		jsr FAllocX		; alloc FP stack entry
.8e60	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e62	a4 4c		ldy $4c				ldy fp
.8e64	b5 26		lda $26,x			lda DStack+2,x		; mantissa= d
.8e66	99 75 00	sta $0075,y			sta FSMant3,y
.8e69	b5 27		lda $27,x			lda DStack+3,x
.8e6b	99 6b 00	sta $006b,y			sta FSMant2,y
.8e6e	b5 24		lda $24,x			lda DStack+0,x
.8e70	99 61 00	sta $0061,y			sta FSMant1,y
.8e73	b5 25		lda $25,x			lda DStack+1,x
.8e75	99 57 00	sta $0057,y			sta FSMant0,y
.8e78	a9 1f		lda #$1f			lda #31			; set exponent
.8e7a	99 4d 00	sta $004d,y			sta FSExp,y
.8e7d	20 26 c4	jsr $c426			jsr Two_Drop
.8e80	4c a0 8a	jmp $8aa0			jmp FNorm		; normalize, return
=38					CL	.var *-(WordListLink+wh_Xt)
=$8e83					en = *	; remember here
>8e5b	26					.byte CL	;wh_CodeLength
>8e83	46 3e 53			L1:	.text "F>S"	;  name of word as a string, ending at wh_NameLastChar
>8e86	03					.byte *-L1	;wh_NameLength	length of name
>8e87	d8 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e89	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e8a	08					.byte NN	;wh_Flags	dictionary flags
=36358					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e8b	a4 4c		ldy $4c		FToS:		ldy fp
.8e8d	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8e90	08		php				php
.8e91	10 03		bpl $8e96			bpl +
.8e93	20 a2 8b	jsr $8ba2			jsr FNegate
.8e96					+
.8e96	a9 0f		lda #$0f			lda #15
.8e98	20 a5 86	jsr $86a5			jsr FIntAlignA
.8e9b	c0 10		cpy #$10			cpy #15+1		; always positive, so unsigned compare works
.8e9d	b0 17		bcs $8eb6			bcs _overflow
.8e9f	a4 4c		ldy $4c				ldy fp
.8ea1	ca		dex				dex
.8ea2	ca		dex				dex
.8ea3	b9 57 00	lda $0057,y			lda FSMant0,y
.8ea6	95 25		sta $25,x			sta DStack+1,x
.8ea8	b9 61 00	lda $0061,y			lda FSMant1,y
.8eab	95 24		sta $24,x			sta DStack+0,x
.8ead	e6 4c		inc $4c				inc fp			; FDrop
.8eaf	28		plp				plp			; apply saved sign
.8eb0	30 01		bmi $8eb3			bmi +
.8eb2	60		rts				rts
.8eb3	4c 7f c5	jmp $c57f	+		jmp Negate
.8eb6	28		plp		_overflow:	plp			; RDrop saved sign
.8eb7	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8eb9	20 c4 b3	jsr $b3c4			jsr ThrowA
=49					CL	.var *-(WordListLink+wh_Xt)
=$8ebc					en = *	; remember here
>8e89	31					.byte CL	;wh_CodeLength
>8ebc	46 3e 44			L1:	.text "F>D"	;  name of word as a string, ending at wh_NameLastChar
>8ebf	03					.byte *-L1	;wh_NameLength	length of name
>8ec0	06 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ec2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ec3	08					.byte NN	;wh_Flags	dictionary flags
=36415					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ec4	a4 4c		ldy $4c		FToD:		ldy fp
.8ec6	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8ec9	08		php				php
.8eca	10 03		bpl $8ecf			bpl +
.8ecc	20 a2 8b	jsr $8ba2			jsr FNegate
.8ecf					+
.8ecf	a9 1f		lda #$1f			lda #31
.8ed1	20 a5 86	jsr $86a5			jsr FIntAlignA
.8ed4	c0 20		cpy #$20			cpy #31+1		; always positive, so unsigned compare works
.8ed6	b0 23		bcs $8efb			bcs _overflow
.8ed8	a4 4c		ldy $4c				ldy fp
.8eda	ca		dex				dex			; d= mantissa
.8edb	ca		dex				dex
.8edc	ca		dex				dex
.8edd	ca		dex				dex
.8ede	b9 57 00	lda $0057,y			lda FSMant0,y
.8ee1	95 25		sta $25,x			sta DStack+1,x
.8ee3	b9 61 00	lda $0061,y			lda FSMant1,y
.8ee6	95 24		sta $24,x			sta DStack+0,x
.8ee8	b9 6b 00	lda $006b,y			lda FSMant2,y
.8eeb	95 27		sta $27,x			sta DStack+3,x
.8eed	b9 75 00	lda $0075,y			lda FSMant3,y
.8ef0	95 26		sta $26,x			sta DStack+2,x
.8ef2	e6 4c		inc $4c				inc fp			; FDrop
.8ef4	28		plp				plp			; apply saved sign
.8ef5	30 01		bmi $8ef8			bmi +
.8ef7	60		rts				rts
.8ef8	4c b0 c5	jmp $c5b0	+		jmp DNegate
.8efb	28		plp		_overflow:	plp			; RDrop sign
.8efc	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8efe	20 c4 b3	jsr $b3c4			jsr ThrowA
=61					CL	.var *-(WordListLink+wh_Xt)
=$8f01					en = *	; remember here
>8ec2	3d					.byte CL	;wh_CodeLength
>8f01	46 52 6e 64			L1:	.text "FRnd"	;  name of word as a string, ending at wh_NameLastChar
>8f05	04					.byte *-L1	;wh_NameLength	length of name
>8f06	3f 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f08	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f09	08					.byte NN	;wh_Flags	dictionary flags
=36485					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f0a	20 df 82	jsr $82df	FRnd:		jsr Rand		; generate next RndState
.8f0d	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.8f10	4a		lsr a				lsr a			;   make positive
.8f11	95 57		sta $57,x			sta FSMant0,x
.8f13	94 61		sty $61,x			sty FSMant1,x
.8f15	ad 35 03	lda $0335			lda RndState+0
.8f18	95 6b		sta $6b,x			sta FSMant2,x
.8f1a	ad 36 03	lda $0336			lda RndState+1
.8f1d	95 75		sta $75,x			sta FSMant3,x
.8f1f	a9 00		lda #$00			lda #0			; exponent=0
.8f21	95 4d		sta $4d,x			sta FSExp,x
.8f23	4c a2 8a	jmp $8aa2			jmp FNormX		; normalize, return
=28					CL	.var *-(WordListLink+wh_Xt)
=$8f26					en = *	; remember here
>8f08	1c					.byte CL	;wh_CodeLength
>8f26	46 53 71 72 74			L1:	.text "FSqrt"	;  name of word as a string, ending at wh_NameLastChar
>8f2b	05					.byte *-L1	;wh_NameLength	length of name
>8f2c	85 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f2e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f2f	08					.byte NN	;wh_Flags	dictionary flags
=36523					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f30	a4 4c		ldy $4c		FSqrt:		ldy fp
.8f32	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.8f35	d0 01		bne $8f38			bne +
.8f37	60		rts				rts			;   just return the zero
.8f38					+
.8f38	20 78 84	jsr $8478			jsr FDup		; get trial value
.8f3b	a4 4c		ldy $4c				ldy fp
.8f3d	b9 4d 00	lda $004d,y			lda FSExp,y		; halve the exponent of trial value
.8f40	c9 80		cmp #$80			cmp #$80
.8f42	6a		ror a				ror a
.8f43	99 4d 00	sta $004d,y			sta FSExp,y
.8f46	a9 09		lda #$09			lda #9			; for 9 iterations
.8f48	48		pha		_3:		pha
.8f49	20 f0 84	jsr $84f0			jsr F2Dup		;   calc new trial value
.8f4c	20 b0 8c	jsr $8cb0			jsr FSlash
.8f4f	20 29 8b	jsr $8b29			jsr FPlus
.8f52	20 20 8a	jsr $8a20			jsr F2Slash
.8f55	68		pla				pla			;  next
.8f56	38		sec				sec
.8f57	e9 01		sbc #$01			sbc #1
.8f59	d0 ed		bne $8f48			bne _3
.8f5b	4c 52 84	jmp $8452			jmp FNip		; return trial value
=46					CL	.var *-(WordListLink+wh_Xt)
=$8f5e					en = *	; remember here
>8f2e	2e					.byte CL	;wh_CodeLength
>8f5e	48 65 78 3e 46			L1:	.text "Hex>F"	;  name of word as a string, ending at wh_NameLastChar
>8f63	05					.byte *-L1	;wh_NameLength	length of name
>8f64	ab 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f66	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f67	08					.byte NN	;wh_Flags	dictionary flags
=36579					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f68	20 16 84	jsr $8416	HexToF:		jsr FAllocX		; alloc FP stack entry
.8f6b	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8f6d	a4 4c		ldy $4c				ldy fp			; Y= FP stack index
.8f6f	20 1f b3	jsr $b31f			jsr PopA		; pop n_exp
.8f72	99 4d 00	sta $004d,y			sta FSExp,y
.8f75	b5 25		lda $25,x			lda DStack+1,x
.8f77	99 57 00	sta $0057,y			sta FSMant0,y
.8f7a	b5 24		lda $24,x			lda DStack+0,x
.8f7c	99 61 00	sta $0061,y			sta FSMant1,y
.8f7f	b5 27		lda $27,x			lda DStack+3,x
.8f81	99 6b 00	sta $006b,y			sta FSMant2,y
.8f84	b5 26		lda $26,x			lda DStack+2,x
.8f86	99 75 00	sta $0075,y			sta FSMant3,y
.8f89	4c 26 c4	jmp $c426			jmp Two_Drop
=36					CL	.var *-(WordListLink+wh_Xt)
=$8f8c					en = *	; remember here
>8f66	24					.byte CL	;wh_CodeLength
>8f8c	46 3e 48 65 78			L1:	.text "F>Hex"	;  name of word as a string, ending at wh_NameLastChar
>8f91	05					.byte *-L1	;wh_NameLength	length of name
>8f92	e3 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f94	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f95	08					.byte NN	;wh_Flags	dictionary flags
=36625					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f96	a4 4c		ldy $4c		FToHex:		ldy fp		; Y= FP stack index
.8f98	ca		dex				dex
.8f99	ca		dex				dex
.8f9a	ca		dex				dex
.8f9b	ca		dex				dex
.8f9c	ca		dex				dex
.8f9d	ca		dex				dex
.8f9e	b9 57 00	lda $0057,y			lda FSMant0,y	; copy mantissa
.8fa1	95 27		sta $27,x			sta DStack+3,x
.8fa3	b9 61 00	lda $0061,y			lda FSMant1,y
.8fa6	95 26		sta $26,x			sta DStack+2,x
.8fa8	b9 6b 00	lda $006b,y			lda FSMant2,y
.8fab	95 29		sta $29,x			sta DStack+5,x
.8fad	b9 75 00	lda $0075,y			lda FSMant3,y
.8fb0	95 28		sta $28,x			sta DStack+4,x
.8fb2	b9 4d 00	lda $004d,y			lda FSExp,y	; copy exponent
.8fb5	95 24		sta $24,x			sta DStack+0,x
.8fb7	29 80		and #$80			and #$80	;   sign extend
.8fb9	f0 02		beq $8fbd			beq +
.8fbb	a9 ff		lda #$ff			lda #$ff
.8fbd	95 25		sta $25,x	+		sta DStack+1,x
.8fbf	e6 4c		inc $4c				inc fp		; FDrop
.8fc1	60		rts				rts
=44					CL	.var *-(WordListLink+wh_Xt)
=$8fc2					en = *	; remember here
>8f94	2c					.byte CL	;wh_CodeLength
>8fc2	46 2e 48 65 78			L1:	.text "F.Hex"	;  name of word as a string, ending at wh_NameLastChar
>8fc7	05					.byte *-L1	;wh_NameLength	length of name
>8fc8	11 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8fca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8fcb	08					.byte NN	;wh_Flags	dictionary flags
=36679					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8fcc	20 96 8f	jsr $8f96	FDotHex:	jsr FToHex	; get parts of r
.8fcf	20 8f cd	jsr $cd8f			jsr Not_Rot
.8fd2	20 12 a8	jsr $a812			jsr Dot_Hex	; do mantissa
.8fd5	20 12 a8	jsr $a812			jsr Dot_Hex
.8fd8	a9 3a		lda #$3a			lda #':'
.8fda	20 d3 cc	jsr $ccd3			jsr Emit_A
.8fdd	4c f0 a7	jmp $a7f0			jmp C_Dot_Hex	; do exponent
=20					CL	.var *-(WordListLink+wh_Xt)
=$8fe0					en = *	; remember here
>8fca	14					.byte CL	;wh_CodeLength
>8fe0	28 46 2e 29			L1:	.text "(F.)"	;  name of word as a string, ending at wh_NameLastChar
>8fe4	04					.byte *-L1	;wh_NameLength	length of name
>8fe5	47 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8fe7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8fe8	08					.byte NN	;wh_Flags	dictionary flags
=36708					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8fe9	20 66 90	jsr $9066	PFDot:		jsr pfcst		;start collecting chars, make r positive
.8fec	20 f2 8f	jsr $8ff2			jsr PFDotSub
.8fef	4c 84 90	jmp $9084			jmp pfcen
.8ff2					PFDotSub:
.8ff2	20 ba 83	jsr $83ba			jsr Precision	;alloc & init work area
.8ff5	20 4e b7	jsr $b74e			jsr One
=$27					_mantNzFound  = DStack+3	; nonzero mantissa digit processed
=$26					_NumSigDigits = DStack+2	; # of significant digits
=$24					_decimalPos   = DStack+0	; decimal point position
.8ff8	20 46 90	jsr $9046			jsr FLt10		; scale down to <10, counting exponent
.8ffb					_c:
.8ffb	b5 24		lda $24,x			lda _decimalPos,x	;  insert decimal point here?
.8ffd	d0 05		bne $9004			bne _c2
.8fff	a9 2e		lda #$2e			lda #'.'
.9001	20 7b 90	jsr $907b			jsr pfch
.9004	d6 24		dec $24,x	_c2:		dec _decimalPos,x
.9006	20 78 84	jsr $8478			jsr FDup		;  do a digit
.9009	20 8b 8e	jsr $8e8b			jsr FToS		; ( work n )
.900c	b5 24		lda $24,x			lda DStack+0,x
.900e	15 29		ora $29,x			ora _mantNzFound+2,x	;  doing significant digits?
.9010	95 29		sta $29,x			sta _mantNzFound+2,x
.9012	f0 08		beq $901c			beq _c7
.9014	d6 28		dec $28,x			dec _NumSigDigits+2,x
.9016	10 04		bpl $901c			bpl +
.9018	e8		inx				inx			;    drop integer
.9019	e8		inx				inx
.901a	d0 17		bne $9033			bne _d
.901c					+
.901c	b5 24		lda $24,x	_c7:		lda DStack+0,x		;  store the char
.901e	09 30		ora #$30			ora #'0'
.9020	20 7b 90	jsr $907b			jsr pfch
.9023	20 3e 8e	jsr $8e3e			jsr SToF		; ( work )
.9026	20 6b 8b	jsr $8b6b			jsr FMinus
.9029	20 92 8c	jsr $8c92			jsr F10Star
.902c	a4 4c		ldy $4c				ldy fp			;  until mantissa==0
.902e	b9 57 00	lda $0057,y			lda FSMant0,y
.9031	d0 c8		bne $8ffb			bne _c
.9033	d6 24		dec $24,x	_d:		dec _decimalPos,x	;do trailing zeros
.9035	30 08		bmi $903f			bmi _d9
.9037	a9 30		lda #$30			lda #'0'
.9039	20 7b 90	jsr $907b			jsr pfch
.903c	4c 33 90	jmp $9033			jmp _d
.903f					_d9:
.903f	e8		inx				inx			; drop work area
.9040	e8		inx				inx
.9041	e8		inx				inx
.9042	e8		inx				inx
.9043	e6 4c		inc $4c				inc fp			; FDrop
.9045	60		rts				rts
=93					CL	.var *-(WordListLink+wh_Xt)
=$9046					en = *	; remember here
>8fe7	5d					.byte CL	;wh_CodeLength
.9046					FLt10:
.9046	a4 4c		ldy $4c		_1:		ldy fp			; while r >= 10
.9048	b9 4d 00	lda $004d,y			lda FSExp,y
.904b	30 18		bmi $9065			bmi _9			;   exponent negative?
.904d	c9 04		cmp #$04			cmp #4
.904f	90 14		bcc $9065			bcc _9			;   < 4 ?
.9051	d0 07		bne $905a			bne _2			;   > 4 ?
.9053	b9 57 00	lda $0057,y			lda FSMant0,y
.9056	c9 50		cmp #$50			cmp #$50
.9058	90 0b		bcc $9065			bcc _9
.905a	f6 24		inc $24,x	_2:		inc DStack+0,x		;   exp ++
.905c	20 0c 89	jsr $890c			jsr F10			;   r /= 10
.905f	20 b0 8c	jsr $8cb0			jsr FSlash
.9062	4c 46 90	jmp $9046			jmp _1
.9065	60		rts		_9:		rts
.9066					pfcst:
.9066	a9 01		lda #$01			lda #1
.9068	8d 34 03	sta $0334			sta ToHold
.906b	a4 4c		ldy $4c				ldy fp			; if r1 negative
.906d	b9 57 00	lda $0057,y			lda FSMant0,y
.9070	10 08		bpl $907a			bpl _19
.9072	a9 2d		lda #$2d			lda #'-'		;   append sign
.9074	20 7b 90	jsr $907b			jsr pfch
.9077	4c a2 8b	jmp $8ba2			jmp FNegate		;   make positive, return
.907a	60		rts		_19:		rts
.907b					pfch:
.907b	ac 34 03	ldy $0334			ldy ToHold
.907e	91 00		sta ($00),y			sta (cp),y
.9080	ee 34 03	inc $0334			inc ToHold
.9083	60		rts				rts
.9084					pfcen:
.9084	ad 34 03	lda $0334			lda ToHold
.9087	38		sec				sec
.9088	e9 01		sbc #$01			sbc #1
.908a	a0 00		ldy #$00			ldy #0
.908c	91 00		sta ($00),y			sta (cp),y		; fill in length
.908e	4c 27 c9	jmp $c927			jmp Here		; push start addr
.9091					pfciA:
.9091	a8		tay				tay
.9092	10 0a		bpl $909e			bpl _15			; IfMi,
.9094	49 ff		eor #$ff			eor #$ff
.9096	18		clc				clc
.9097	69 01		adc #$01			adc #1
.9099	48		pha				pha
.909a	a9 2d		lda #$2d			lda #'-'
.909c	d0 03		bne $90a1			bne _19
.909e	48		pha		_15:		pha
.909f	a9 2b		lda #$2b			lda #'+'
.90a1					_19:
.90a1	20 7b 90	jsr $907b			jsr pfch
.90a4	68		pla				pla
.90a5	a0 2f		ldy #$2f			ldy #'0'-1
.90a7	c8		iny		_20:		iny
.90a8	38		sec				sec
.90a9	e9 0a		sbc #$0a			sbc #10
.90ab	b0 fa		bcs $90a7			bcs _20
.90ad	69 0a		adc #$0a			adc #10
.90af	48		pha				pha
.90b0	98		tya				tya
.90b1	20 7b 90	jsr $907b			jsr pfch
.90b4	68		pla				pla
.90b5	09 30		ora #$30			ora #'0'
.90b7	d0 c2		bne $907b			bne pfch
>90b9	46 2e				L1:	.text "F."	;  name of word as a string, ending at wh_NameLastChar
>90bb	02					.byte *-L1	;wh_NameLength	length of name
>90bc	64 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90bf	08					.byte NN	;wh_Flags	dictionary flags
=36923					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90c0	20 e9 8f	jsr $8fe9	FDot:		jsr PFDot
.90c3	20 09 b1	jsr $b109	FDot2:		jsr Count
.90c6	20 ed cc	jsr $cced			jsr Type
.90c9	4c e0 cc	jmp $cce0			jmp Space
=12					CL	.var *-(WordListLink+wh_Xt)
=$90cc					en = *	; remember here
>90be	0c					.byte CL	;wh_CodeLength
>90cc	46 2e 53			L1:	.text "F.S"	;  name of word as a string, ending at wh_NameLastChar
>90cf	03					.byte *-L1	;wh_NameLength	length of name
>90d0	3b 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90d3	08					.byte NN	;wh_Flags	dictionary flags
=36943					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90d4	a9 09		lda #$09	FDotS:		lda #FDim-1	; for each FP stack entry
.90d6	d0 0b		bne $90e3			bne _8
.90d8	48		pha		_2:		pha
.90d9	20 c6 84	jsr $84c6			jsr FPick3	;   print it
.90dc	20 c0 90	jsr $90c0			jsr FDot
.90df	68		pla				pla		;  next
.90e0	38		sec				sec
.90e1	e9 01		sbc #$01			sbc #1
.90e3	c5 4c		cmp $4c		_8:		cmp fp
.90e5	b0 f1		bcs $90d8			bcs _2
=19					CL	.var *-(WordListLink+wh_Xt)
=$90e7					en = *	; remember here
>90d2	13					.byte CL	;wh_CodeLength
.90e7	60		rts				rts
>90e8	28 46 53 2e 29			L1:	.text "(FS.)"	;  name of word as a string, ending at wh_NameLastChar
>90ed	05					.byte *-L1	;wh_NameLength	length of name
>90ee	4f 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90f1	08					.byte NN	;wh_Flags	dictionary flags
=36973					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90f2	20 44 b7	jsr $b744	PFSDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.90f5	20 66 90	jsr $9066			jsr pfcst		; start collecting chars, make r positive
.90f8	20 46 90	jsr $9046			jsr FLt10		; scale down to <10
.90fb	a4 4c		ldy $4c		_c1:		ldy fp			; while r < 1
.90fd	b9 57 00	lda $0057,y			lda FSMant0,y		;   mantissa == 0 ?
.9100	f0 0f		beq $9111			beq _c9
.9102	b9 4d 00	lda $004d,y			lda FSExp,y		;   exp < 1 ?
.9105	f0 02		beq $9109			beq _c2
.9107	10 08		bpl $9111			bpl _c9
.9109	d6 24		dec $24,x	_c2:		dec DStack+0,x		;  exp -= 1
.910b	20 92 8c	jsr $8c92			jsr F10Star		;  r *= 10
.910e	4c fb 90	jmp $90fb			jmp _c1
.9111					_c9:
.9111	20 f2 8f	jsr $8ff2	PFSDotM:	jsr PFDotSub		; do mantissa
.9114	a9 45		lda #$45			lda #'E'
.9116	20 7b 90	jsr $907b			jsr pfch		; do exponent
.9119	b5 24		lda $24,x			lda DStack+0,x		;   _exp
.911b	20 91 90	jsr $9091			jsr pfciA
.911e	e8		inx				inx			; Drop work area
.911f	e8		inx				inx
.9120	4c 84 90	jmp $9084			jmp pfcen		; finish string
=49					CL	.var *-(WordListLink+wh_Xt)
=$9123					en = *	; remember here
>90f0	31					.byte CL	;wh_CodeLength
>9123	46 53 2e			L1:	.text "FS."	;  name of word as a string, ending at wh_NameLastChar
>9126	03					.byte *-L1	;wh_NameLength	length of name
>9127	6d 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9129	03					.byte 3		;wh_CodeLength  (with placeholder value)
>912a	08					.byte NN	;wh_Flags	dictionary flags
=37030					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.912b	20 f2 90	jsr $90f2	FSDot:		jsr PFSDot
.912e	4c c3 90	jmp $90c3			jmp FDot2
=6					CL	.var *-(WordListLink+wh_Xt)
=$9131					en = *	; remember here
>9129	06					.byte CL	;wh_CodeLength
>9131	28 46 45 2e 29			L1:	.text "(FE.)"	;  name of word as a string, ending at wh_NameLastChar
>9136	05					.byte *-L1	;wh_NameLength	length of name
>9137	a6 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9139	03					.byte 3		;wh_CodeLength  (with placeholder value)
>913a	08					.byte NN	;wh_Flags	dictionary flags
=37046					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.913b	20 44 b7	jsr $b744	PFEDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.913e	20 66 90	jsr $9066			jsr pfcst		; start collecting chars, make r positive
.9141	a4 4c		ldy $4c		_30:		ldy fp			; while r < 1
.9143	b9 57 00	lda $0057,y			lda FSMant0,y
.9146	f0 16		beq $915e			beq _39
.9148	b9 4d 00	lda $004d,y			lda FSExp,y
.914b	f0 02		beq $914f			beq _31
.914d	10 0f		bpl $915e			bpl _39
.914f	d6 24		dec $24,x	_31:		dec _exp,x		;  exp -= 3
.9151	d6 24		dec $24,x			dec _exp,x
.9153	d6 24		dec $24,x			dec _exp,x
.9155	20 fd 88	jsr $88fd			jsr F1000		;  r *= 1000
.9158	20 fd 8b	jsr $8bfd			jsr FStar
.915b	4c 41 91	jmp $9141			jmp _30
.915e					_39:
.915e	a4 4c		ldy $4c		_a:		ldy fp			; while r >= 1000
.9160	b9 4d 00	lda $004d,y			lda FSExp,y
.9163	30 1c		bmi $9181			bmi _a9			; exponent negative?
.9165	c9 0a		cmp #$0a			cmp #10
.9167	90 18		bcc $9181			bcc _a9			;   < 10 ?
.9169	d0 07		bne $9172			bne _a2			;   > 10 ?
.916b	b9 57 00	lda $0057,y			lda FSMant0,y
.916e	c9 7d		cmp #$7d			cmp #$7d
.9170	90 0f		bcc $9181			bcc _a9
.9172	f6 24		inc $24,x	_a2:		inc _exp,x		;   exp += 3
.9174	f6 24		inc $24,x			inc _exp,x
.9176	f6 24		inc $24,x			inc _exp,x
.9178	20 fd 88	jsr $88fd			jsr F1000		;   r /= 1000
.917b	20 b0 8c	jsr $8cb0			jsr FSlash
.917e	4c 5e 91	jmp $915e			jmp _a
.9181					_a9:
.9181	4c 11 91	jmp $9111			jmp PFSDotM
=73					CL	.var *-(WordListLink+wh_Xt)
=$9184					en = *	; remember here
>9139	49					.byte CL	;wh_CodeLength
>9184	46 45 2e			L1:	.text "FE."	;  name of word as a string, ending at wh_NameLastChar
>9187	03					.byte *-L1	;wh_NameLength	length of name
>9188	b6 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>918a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>918b	08					.byte NN	;wh_Flags	dictionary flags
=37127					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.918c	20 3b 91	jsr $913b	FEDot:		jsr PFEDot
.918f	4c c3 90	jmp $90c3			jmp FDot2
=6					CL	.var *-(WordListLink+wh_Xt)
=$9192					en = *	; remember here
>918a	06					.byte CL	;wh_CodeLength
>9192	46 22				L1:	.text 'F"'	;  name of word as a string, ending at wh_NameLastChar
>9194	02					.byte *-L1	;wh_NameLength	length of name
>9195	07 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9197	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9198	0c					.byte IM+NN	;wh_Flags	dictionary flags
=37140					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9199	20 e4 b9	jsr $b9e4	FQuote:		jsr Parse_Name		; get string
.919c	20 bd 91	jsr $91bd			jsr ToFloat		; convert
.919f	b5 24		lda $24,x			lda DStack+0,x		; error?
.91a1	f0 0a		beq $91ad			beq _Err
.91a3	e8		inx				inx
.91a4	e8		inx				inx
.91a5	a5 0a		lda $0a				lda State		; compiling?
.91a7	d0 01		bne $91aa			bne _compile
.91a9	60		rts				rts
.91aa	4c 7c 88	jmp $887c	_compile:	jmp FLiteral		; compile a FP literal
.91ad	a9 36		lda #$36	_Err:		lda #100+err_FPInvalidArg
.91af	20 c4 b3	jsr $b3c4			jsr ThrowA
=25					CL	.var *-(WordListLink+wh_Xt)
=$91b2					en = *	; remember here
>9197	19					.byte CL	;wh_CodeLength
>91b2	3e 46 6c 6f 61 74		L1:	.text ">Float"	;  name of word as a string, ending at wh_NameLastChar
>91b8	06					.byte *-L1	;wh_NameLength	length of name
>91b9	14 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>91bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>91bc	08					.byte NN	;wh_Flags	dictionary flags
=37176					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.91bd					ToFloat:
.91bd	20 44 b7	jsr $b744			jsr Zero	; alloc & init workspace
.91c0	20 44 b7	jsr $b744			jsr Zero
.91c3	20 44 b7	jsr $b744			jsr Zero
=$2c					_addr		= DStack+8
=$2a					_len		= DStack+6
=$29					_mantfound 	= DStack+5		;mantissa digits found
=$28					_exponent 	= DStack+4		;exponent
=$27					_decimalPos 	= DStack+3		;decimal point position
=$26					_DecPointFound1 = DStack+2
=$25					_MantissaNegative1 = DStack+1
=$24					_ExponentNegative1 = DStack+0
.91c6	20 ec 88	jsr $88ec			jsr F0			; init result
.91c9	20 9b 92	jsr $929b	_11:		jsr _GetChar		; get mantissa prefix
.91cc	b0 57		bcs $9225			bcs _trueb ;_finishb
.91ce	c9 20		cmp #$20			cmp #' '
.91d0	f0 f7		beq $91c9			beq _11
.91d2	c9 2b		cmp #$2b			cmp #'+'
.91d4	f0 06		beq $91dc			beq _20
.91d6	c9 2d		cmp #$2d			cmp #'-'
.91d8	d0 07		bne $91e1			bne _21
.91da	95 25		sta $25,x			sta _MantissaNegative1,x ; remember mantissa is negative
.91dc	20 9b 92	jsr $929b	_20:		jsr _GetChar		; do next mantissa digits
.91df	b0 47		bcs $9228			bcs _finishb
.91e1	c9 2e		cmp #$2e	_21:		cmp #'.'
.91e3	f0 31		beq $9216			beq _27
.91e5	c9 45		cmp #$45			cmp #'E'
.91e7	f0 42		beq $922b			beq _30
.91e9	c9 65		cmp #$65			cmp #'e'
.91eb	f0 3e		beq $922b			beq _30
.91ed	c9 44		cmp #$44			cmp #'D'
.91ef	f0 3a		beq $922b			beq _30
.91f1	c9 64		cmp #$64			cmp #'d'
.91f3	f0 36		beq $922b			beq _30
.91f5	38		sec				sec			;   a digit?
.91f6	e9 30		sbc #$30			sbc #'0'
.91f8	90 24		bcc $921e			bcc _fail
.91fa	c9 0a		cmp #$0a			cmp #9+1
.91fc	b0 20		bcs $921e			bcs _fail
.91fe	48		pha				pha			; append digit to mantissa
.91ff	20 92 8c	jsr $8c92			jsr F10Star
.9202	68		pla				pla
.9203	a0 00		ldy #$00			ldy #0
.9205	20 41 8e	jsr $8e41			jsr SToFYA
.9208	20 29 8b	jsr $8b29			jsr FPlus
.920b	f6 29		inc $29,x			inc _mantfound,x	; remember we found a mantissa digit
.920d	b5 26		lda $26,x			lda _DecPointFound1,x	; if mantissa decimal point found
.920f	f0 02		beq $9213			beq +
.9211	d6 27		dec $27,x			dec _decimalPos,x	;   increment decimal point position
.9213					+
.9213	4c dc 91	jmp $91dc			jmp _20
.9216					_27:
.9216	b4 26		ldy $26,x			ldy _DecPointFound1,x	; already have one?
.9218	d0 04		bne $921e			bne _fail
.921a	95 26		sta $26,x			sta _DecPointFound1,x	; we have one now!
.921c	f0 be		beq $91dc			beq _20
.921e					_fail:
.921e	20 e4 83	jsr $83e4			jsr FDrop
.9221	a9 00		lda #$00			lda #0			;return false
.9223	f0 69		beq $928e			beq _return
.9225	4c 8c 92	jmp $928c	_trueb:		jmp _true
.9228	4c 59 92	jmp $9259	_finishb:	jmp _finish
.922b					_30:
.922b	20 9b 92	jsr $929b			jsr _GetChar
.922e	b0 29		bcs $9259			bcs _finish
.9230	c9 2b		cmp #$2b			cmp #'+'
.9232	f0 06		beq $923a			beq _40
.9234	c9 2d		cmp #$2d			cmp #'-'
.9236	d0 07		bne $923f			bne _41
.9238	95 24		sta $24,x			sta _ExponentNegative1,x ; remember exponent is negative
.923a	20 9b 92	jsr $929b	_40:		jsr _GetChar		;get exponent digits
.923d	b0 1a		bcs $9259			bcs _finish
.923f	38		sec		_41:		sec			;  digit?
.9240	e9 30		sbc #$30			sbc #'0'
.9242	90 da		bcc $921e			bcc _fail
.9244	c9 0a		cmp #$0a			cmp #9+1
.9246	b0 d6		bcs $921e			bcs _fail
.9248	85 14		sta $14				sta tmp1
.924a	16 28		asl $28,x			asl _exponent,x		;  exponent *= 10
.924c	b5 28		lda $28,x			lda _exponent,x
.924e	0a		asl a				asl a
.924f	0a		asl a				asl a
.9250	75 28		adc $28,x			adc _exponent,x
.9252	65 14		adc $14				adc tmp1		;  + digit
.9254	95 28		sta $28,x			sta _exponent,x
.9256	4c 3a 92	jmp $923a			jmp _40
.9259					_finish:
.9259	b5 29		lda $29,x			lda _mantfound,x	;some mantissa digits found?
.925b	f0 c1		beq $921e			beq _fail
.925d	b5 24		lda $24,x			lda _ExponentNegative1,x ;apply exponent sign
.925f	f0 07		beq $9268			beq +
.9261	a9 00		lda #$00			lda #0
.9263	38		sec				sec
.9264	f5 28		sbc $28,x			sbc _exponent,x
.9266	95 28		sta $28,x			sta _exponent,x
.9268					+
.9268	b5 28		lda $28,x			lda _exponent,x		;apply decimal position to exponent
.926a	18		clc				clc
.926b	75 27		adc $27,x			adc _decimalPos,x
.926d	95 28		sta $28,x			sta _exponent,x
.926f	4c 77 92	jmp $9277			jmp _93
.9272	20 92 8c	jsr $8c92	_93b:		jsr F10Star		;apply exponent to mantissa
.9275	d6 28		dec $28,x			dec _exponent,x
.9277	f0 0a		beq $9283	_93:		beq _94
.9279	10 f7		bpl $9272			bpl _93b
.927b	20 0c 89	jsr $890c	_94b:		jsr F10
.927e	20 b0 8c	jsr $8cb0			jsr FSlash
.9281	f6 28		inc $28,x			inc _exponent,x
.9283	30 f6		bmi $927b	_94:		bmi _94b
.9285					_95:
.9285	b5 25		lda $25,x			lda _MantissaNegative1,x ;apply mantissa sign
.9287	f0 03		beq $928c			beq +
.9289	20 a2 8b	jsr $8ba2			jsr FNegate
.928c					+
.928c	a9 ff		lda #$ff	_true:		lda #$ff		;return true
.928e					_return:
.928e	95 2c		sta $2c,x			sta _addr+0,x		; replace _addr with flag
.9290	95 2d		sta $2d,x			sta _addr+1,x
.9292	e8		inx				inx			; Drop work
.9293	e8		inx				inx
.9294	e8		inx				inx			; 2Drop work
.9295	e8		inx				inx
.9296	e8		inx				inx
.9297	e8		inx				inx
.9298	e8		inx				inx			; Drop len
.9299	e8		inx				inx
.929a	60		rts				rts
.929b					_GetChar:
.929b	38		sec				sec
.929c	b5 2a		lda $2a,x			lda _len,x
.929e	f0 0b		beq $92ab			beq _gc_rts		; if end, return C=1
.92a0	d6 2a		dec $2a,x			dec _len,x
.92a2	a1 2c		lda ($2c,x)			lda (_addr,x)
.92a4	f6 2c		inc $2c,x			inc _addr+0,x
.92a6	d0 02		bne $92aa			bne +
.92a8	f6 2d		inc $2d,x			inc _addr+1,x
.92aa					+
.92aa	18		clc				clc			; get char, return C=0
.92ab	60		rts		_gc_rts:	rts
>92ac	53 46 40			L1:	.text "SF@"	;  name of word as a string, ending at wh_NameLastChar
>92af	03					.byte *-L1	;wh_NameLength	length of name
>92b0	38 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>92b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>92b3	08					.byte NN	;wh_Flags	dictionary flags
=37423					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.92b4	20 3b b3	jsr $b33b	SFAt:		jsr PopYA		; pop sf_addr
.92b7	85 16		sta $16		SFAt_YA:	sta tmp2+0		; save sf_addr
.92b9	84 17		sty $17				sty tmp2+1
.92bb	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.92be	a0 01		ldy #$01			ldy #1			; copy exponent
.92c0	b1 16		lda ($16),y			lda (tmp2),y
.92c2	0a		asl a				asl a
.92c3	88		dey				dey
.92c4	b1 16		lda ($16),y			lda (tmp2),y
.92c6	2a		rol a				rol a
.92c7	38		sec				sec
.92c8	e9 7e		sbc #$7e			sbc #126
.92ca	95 4d		sta $4d,x			sta FSExp,x
.92cc	a0 01		ldy #$01			ldy #1			; copy mantissa
.92ce	b1 16		lda ($16),y			lda (tmp2),y
.92d0	09 80		ora #$80			ora #$80
.92d2	4a		lsr a				lsr a
.92d3	95 57		sta $57,x			sta FSMant0,x
.92d5	c8		iny				iny
.92d6	b1 16		lda ($16),y			lda (tmp2),y
.92d8	6a		ror a				ror a
.92d9	95 61		sta $61,x			sta FSMant1,x
.92db	c8		iny				iny
.92dc	b1 16		lda ($16),y			lda (tmp2),y
.92de	6a		ror a				ror a
.92df	95 6b		sta $6b,x			sta FSMant2,x
.92e1	a9 00		lda #$00			lda #0
.92e3	6a		ror a				ror a
.92e4	95 75		sta $75,x			sta FSMant3,x
.92e6	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.92e8	a0 00		ldy #$00			ldy #0			; get sign
.92ea	b1 16		lda ($16),y			lda (tmp2),y
.92ec	10 03		bpl $92f1			bpl +
.92ee	20 a2 8b	jsr $8ba2			jsr FNegate
.92f1					+
=61					CL	.var *-(WordListLink+wh_Xt)
=$92f1					en = *	; remember here
>92b2	3d					.byte CL	;wh_CodeLength
.92f1	60		rts				rts
>92f2	53 46 21			L1:	.text "SF!"	;  name of word as a string, ending at wh_NameLastChar
>92f5	03					.byte *-L1	;wh_NameLength	length of name
>92f6	2f 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>92f8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>92f9	08					.byte NN	;wh_Flags	dictionary flags
=37493					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.92fa	20 3b b3	jsr $b33b	SFStore:	jsr PopYA		; pop sf_addr
.92fd	85 16		sta $16		SFStore_YA:	sta tmp2+0		; save
.92ff	84 17		sty $17				sty tmp2+1
.9301	a4 4c		ldy $4c				ldy fp			; negative?
.9303	b9 57 00	lda $0057,y			lda FSMant0,y
.9306	29 80		and #$80			and #$80		;  save sign
.9308	85 19		sta $19				sta tmp3+1
.930a	10 03		bpl $930f			bpl +
.930c	20 a2 8b	jsr $8ba2			jsr FNegate
.930f					+
.930f	86 14		stx $14				stx tmp1+0		; save data stack index
.9311	a6 4c		ldx $4c				ldx fp			; switch to FP stack index
.9313	b5 4d		lda $4d,x			lda FSExp,x		; +128
.9315	18		clc				clc
.9316	69 7e		adc #$7e			adc #126
.9318	95 4d		sta $4d,x			sta FSExp,x
.931a	16 75		asl $75,x			asl FSMant3,x
.931c	b5 6b		lda $6b,x			lda FSMant2,x
.931e	2a		rol a				rol a
.931f	a0 03		ldy #$03			ldy #3			; +3 IEEE
.9321	91 16		sta ($16),y			sta (tmp2),y
.9323	b5 61		lda $61,x			lda FSMant1,x
.9325	2a		rol a				rol a
.9326	88		dey				dey			; +2 IEEE
.9327	91 16		sta ($16),y			sta (tmp2),y
.9329	b5 57		lda $57,x			lda FSMant0,x
.932b	2a		rol a				rol a
.932c	2a		rol a				rol a
.932d	56 4d		lsr $4d,x			lsr FSExp,x
.932f	6a		ror a				ror a
.9330	88		dey				dey			; +1 IEEE
.9331	91 16		sta ($16),y			sta (tmp2),y
.9333	b5 4d		lda $4d,x			lda FSExp,x
.9335	05 19		ora $19				ora tmp3+1		;  insert sign
.9337	88		dey				dey			; +0 IEEE
.9338	91 16		sta ($16),y			sta (tmp2),y
.933a	e6 4c		inc $4c				inc fp			; FDrop
.933c	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=68					CL	.var *-(WordListLink+wh_Xt)
=$933e					en = *	; remember here
>92f8	44					.byte CL	;wh_CodeLength
.933e	60		rts				rts
>933f	53 46 6c 6f 61 74 2b		L1:	.text "SFloat+"	;  name of word as a string, ending at wh_NameLastChar
>9346	07					.byte *-L1	;wh_NameLength	length of name
>9347	75 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9349	03					.byte 3		;wh_CodeLength  (with placeholder value)
>934a	08					.byte NN	;wh_Flags	dictionary flags
=37574					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.934b	a9 04		lda #$04	SFloatPlus:	lda #4
.934d	4c 0a c9	jmp $c90a			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9350					en = *	; remember here
>9349	05					.byte CL	;wh_CodeLength
>9350	53 46 6c 6f 61 74 73		L1:	.text "SFloats"	;  name of word as a string, ending at wh_NameLastChar
>9357	07					.byte *-L1	;wh_NameLength	length of name
>9358	c6 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>935a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>935b	08					.byte NN	;wh_Flags	dictionary flags
=37591					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.935c	a9 02		lda #$02	SFloats:	lda #2
.935e	4c 4e ca	jmp $ca4e			jmp LShift_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9361					en = *	; remember here
>935a	05					.byte CL	;wh_CodeLength
>9361	44 46 21			L1:	.text "DF!"	;  name of word as a string, ending at wh_NameLastChar
>9364	03					.byte *-L1	;wh_NameLength	length of name
>9365	d7 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9367	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9368	08					.byte NN	;wh_Flags	dictionary flags
=37604					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9369	20 3b b3	jsr $b33b	DFStore:	jsr PopYA		; pop df_addr
.936c	85 16		sta $16		DFStore_YA:	sta tmp2+0		; save df_addr
.936e	84 17		sty $17				sty tmp2+1
.9370	a4 4c		ldy $4c				ldy fp			; negative?
.9372	b9 57 00	lda $0057,y			lda FSMant0,y
.9375	29 80		and #$80			and #$80		; remember sign
.9377	85 19		sta $19				sta tmp3+1
.9379	10 03		bpl $937e			bpl +			; make positive
.937b	20 a2 8b	jsr $8ba2			jsr FNegate
.937e					+
.937e	86 14		stx $14				stx tmp1+0		; save data stack index
.9380	a6 4c		ldx $4c				ldx fp
.9382	a9 00		lda #$00			lda #0
.9384	a0 07		ldy #$07			ldy #7			; +7 IEEE
.9386	91 16		sta ($16),y			sta (tmp2),y
.9388	88		dey				dey			; +6 IEEE
.9389	91 16		sta ($16),y			sta (tmp2),y
.938b	20 d3 93	jsr $93d3			jsr _shift		; shift mantissa
.938e	20 d3 93	jsr $93d3			jsr _shift
.9391	88		dey				dey			; +5 IEEE
.9392	91 16		sta ($16),y			sta (tmp2),y
.9394	b5 75		lda $75,x			lda FSMant3,x
.9396	88		dey				dey			; +4 IEEE
.9397	91 16		sta ($16),y			sta (tmp2),y
.9399	b5 6b		lda $6b,x			lda FSMant2,x
.939b	88		dey				dey			; +3 IEEE
.939c	91 16		sta ($16),y			sta (tmp2),y
.939e	b5 61		lda $61,x			lda FSMant1,x
.93a0	88		dey				dey			; +2 IEEE
.93a1	91 16		sta ($16),y			sta (tmp2),y
.93a3	b5 57		lda $57,x			lda FSMant0,x		; clear extra bits
.93a5	29 0f		and #$0f			and #$f
.93a7	95 57		sta $57,x			sta FSMant0,x
.93a9	b5 4d		lda $4d,x			lda FSExp,x
.93ab	38		sec				sec
.93ac	e9 02		sbc #$02			sbc #2
.93ae	95 4d		sta $4d,x			sta FSExp,x
.93b0	0a		asl a				asl a
.93b1	0a		asl a				asl a
.93b2	0a		asl a				asl a
.93b3	0a		asl a				asl a
.93b4	15 57		ora $57,x			ora FSMant0,x
.93b6	88		dey				dey			; +1 IEEE
.93b7	91 16		sta ($16),y			sta (tmp2),y
.93b9	b5 4d		lda $4d,x			lda FSExp,x
.93bb	08		php				php
.93bc	4a		lsr a				lsr a
.93bd	4a		lsr a				lsr a
.93be	4a		lsr a				lsr a
.93bf	4a		lsr a				lsr a
.93c0	18		clc				clc
.93c1	69 30		adc #$30			adc #$30
.93c3	28		plp				plp
.93c4	30 03		bmi $93c9			bmi +
.93c6	18		clc				clc
.93c7	69 10		adc #$10			adc #$10
.93c9	05 19		ora $19		+		ora tmp3+1		; add sign bit
.93cb	88		dey				dey			; +0 IEEE
.93cc	91 16		sta ($16),y			sta (tmp2),y
.93ce	e6 4c		inc $4c				inc fp			; FDrop
.93d0	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.93d2	60		rts				rts
.93d3	56 57		lsr $57,x	_shift:		lsr FSMant0,x
.93d5	76 61		ror $61,x			ror FSMant1,x
.93d7	76 6b		ror $6b,x			ror FSMant2,x
.93d9	76 75		ror $75,x			ror FSMant3,x
.93db	6a		ror a				ror a
=115					CL	.var *-(WordListLink+wh_Xt)
=$93dc					en = *	; remember here
>9367	73					.byte CL	;wh_CodeLength
.93dc	60		rts				rts
>93dd	44 46 40			L1:	.text "DF@"	;  name of word as a string, ending at wh_NameLastChar
>93e0	03					.byte *-L1	;wh_NameLength	length of name
>93e1	e4 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>93e3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>93e4	08					.byte NN	;wh_Flags	dictionary flags
=37728					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.93e5	20 3b b3	jsr $b33b	DFAt:		jsr PopYA		; pop df_addr
.93e8	85 16		sta $16		DFAt_YA:	sta tmp2+0		; save df_addr
.93ea	84 17		sty $17				sty tmp2+1
.93ec	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.93ef	a0 00		ldy #$00			ldy #0			; +0 IEEE byte
.93f1	b1 16		lda ($16),y			lda (tmp2),y
.93f3	95 4d		sta $4d,x			sta FSExp,x
.93f5	c8		iny				iny			; +1 IEEE byte
.93f6	b1 16		lda ($16),y			lda (tmp2),y
.93f8	95 57		sta $57,x			sta FSMant0,x
.93fa	c8		iny				iny			; +2 IEEE byte
.93fb	b1 16		lda ($16),y			lda (tmp2),y
.93fd	95 61		sta $61,x			sta FSMant1,x
.93ff	c8		iny				iny			; +3 IEEE byte
.9400	b1 16		lda ($16),y			lda (tmp2),y
.9402	95 6b		sta $6b,x			sta FSMant2,x
.9404	c8		iny				iny			; +4 IEEE byte
.9405	b1 16		lda ($16),y			lda (tmp2),y
.9407	95 75		sta $75,x			sta FSMant3,x
.9409	c8		iny				iny			; +5 IEEE byte
.940a	b1 16		lda ($16),y			lda (tmp2),y
.940c	20 35 94	jsr $9435			jsr _shifta		; shift exponent & mantissa bits into place
.940f	20 35 94	jsr $9435			jsr _shifta
.9412	b5 57		lda $57,x			lda FSMant0,x		; finish shifting exponent bits
.9414	0a		asl a				asl a
.9415	36 4d		rol $4d,x			rol FSExp,x
.9417	0a		asl a				asl a
.9418	36 4d		rol $4d,x			rol FSExp,x
.941a	b5 4d		lda $4d,x			lda FSExp,x		; remove +1023
.941c	18		clc				clc
.941d	69 02		adc #$02			adc #2
.941f	95 4d		sta $4d,x			sta FSExp,x
.9421	b5 57		lda $57,x			lda FSMant0,x
.9423	29 7f		and #$7f			and #$7f
.9425	09 40		ora #$40			ora #$40		;   insert implied 1
.9427	95 57		sta $57,x			sta FSMant0,x		;   insert sign=0
.9429	a6 14		ldx $14				ldx tmp1		; restore data stack index
.942b	a0 00		ldy #$00			ldy #0			; get sign from +0 IEEE byte
.942d	b1 16		lda ($16),y			lda (tmp2),y
.942f	10 03		bpl $9434			bpl +
.9431	20 a2 8b	jsr $8ba2			jsr FNegate
.9434					+
.9434	60		rts				rts
.9435	0a		asl a		_shifta:	asl a
.9436	36 75		rol $75,x			rol FSMant3,x
.9438	36 6b		rol $6b,x			rol FSMant2,x
.943a	36 61		rol $61,x			rol FSMant1,x
.943c	36 57		rol $57,x			rol FSMant0,x
.943e	36 4d		rol $4d,x			rol FSExp,x
.9440	60		rts				rts
=92					CL	.var *-(WordListLink+wh_Xt)
=$9441					en = *	; remember here
>93e3	5c					.byte CL	;wh_CodeLength
>9441	44 46 6c 6f 61 74 2b		L1:	.text "DFloat+"	;  name of word as a string, ending at wh_NameLastChar
>9448	07					.byte *-L1	;wh_NameLength	length of name
>9449	60 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>944b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>944c	08					.byte NN	;wh_Flags	dictionary flags
=37832					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.944d	a9 08		lda #$08	DFloatPlus:	lda #8
.944f	4c 0a c9	jmp $c90a			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9452					en = *	; remember here
>944b	05					.byte CL	;wh_CodeLength
>9452	44 46 6c 6f 61 74 73		L1:	.text "DFloats"	;  name of word as a string, ending at wh_NameLastChar
>9459	07					.byte *-L1	;wh_NameLength	length of name
>945a	c8 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>945c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>945d	08					.byte NN	;wh_Flags	dictionary flags
=37849					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.945e	a9 03		lda #$03	DFloats:	lda #3
.9460	4c 4e ca	jmp $ca4e			jmp LShift_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9463					en = *	; remember here
>945c	05					.byte CL	;wh_CodeLength
>9463	46 4b 65 79			L1:	.text "FKey"	;  name of word as a string, ending at wh_NameLastChar
>9467	04					.byte *-L1	;wh_NameLength	length of name
>9468	d9 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>946a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>946b	08					.byte NN	;wh_Flags	dictionary flags
=37863					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.946c					FKey:
.946c	20 27 c9	jsr $c927			jsr Here		; ( addr )
.946f	20 27 c9	jsr $c927			jsr Here		; ( addr addr )
.9472	a9 28		lda #$28			lda #40			; ( addr addr 40 )
.9474	20 35 b7	jsr $b735			jsr PushZA
.9477	20 e1 c1	jsr $c1e1			jsr Accept		; ( addr len )
.947a	20 bd 91	jsr $91bd			jsr ToFloat		; ( true | false)
.947d	e8		inx				inx			; err?
.947e	e8		inx				inx
.947f	b5 22		lda $22,x			lda DStack-2,x
.9481	f0 01		beq $9484			beq _err
.9483	60		rts				rts
.9484	20 14 b8	jsr $b814	_err:		jsr SLiteral_runtime
.9487	4c 8d 94	jmp $948d			  jmp +
>948a	20 3f 20					  .text " ? "
.948d	20 ed cc	jsr $cced	+		jsr Type
.9490	4c 6c 94	jmp $946c			jmp FKey
>9493	46 4d 50 6f 6c 79		L1:	.text "FMPoly"	;  name of word as a string, ending at wh_NameLastChar
>9499	06					.byte *-L1	;wh_NameLength	length of name
>949a	e7 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>949c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>949d	08					.byte NN	;wh_Flags	dictionary flags
=37913					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.949e	20 3b b3	jsr $b33b	FMPoly:		jsr PopYA
.94a1	20 f3 b6	jsr $b6f3	FMPolyYA:	jsr PushYA		; push coefficent addr
.94a4	20 82 85	jsr $8582			jsr FAt_YA		; fetch 1st coefficent
.94a7	4c ba 94	jmp $94ba			jmp _4
.94aa	20 9c 84	jsr $849c	_2:		jsr FOver
.94ad	20 fd 8b	jsr $8bfd			jsr FStar
.94b0	b5 24		lda $24,x			lda DStack+0,x		; fetch next coefficent
.94b2	b4 25		ldy $25,x			ldy DStack+1,x
.94b4	20 82 85	jsr $8582			jsr FAt_YA
.94b7	20 29 8b	jsr $8b29			jsr FPlus
.94ba	a9 05		lda #$05	_4:		lda #5			; bump coefficent ptr
.94bc	20 0a c9	jsr $c90a			jsr Plus_A
.94bf	a1 24		lda ($24,x)			lda (DStack+0,x)	; end of coefficent list?
.94c1	d0 e7		bne $94aa			bne _2
.94c3	e8		inx				inx			; Drop coefficent ptr
.94c4	e8		inx				inx
=39					CL	.var *-(WordListLink+wh_Xt)
=$94c5					en = *	; remember here
>949c	27					.byte CL	;wh_CodeLength
.94c5	60		rts				rts
>94c6	46 4c 6f 67 32 4d 31 4d		L1:	.text "FLog2M1M"	;  name of word as a string, ending at wh_NameLastChar
>94ce	08					.byte *-L1	;wh_NameLength	length of name
>94cf	19 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>94d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>94d2	08					.byte NN	;wh_Flags	dictionary flags
=37966					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.94d3	a9 dd		lda #$dd	FLog2M1M:	lda #<_c
.94d5	a0 94		ldy #$94			ldy #>_c
.94d7	20 a1 94	jsr $94a1			jsr FMPolyYA
.94da	4c fd 8b	jmp $8bfd			jmp FStar
.94dd					_c:
>94dd	cc cf 97 7c					.dword $7C97CFCC	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94e1	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>94e2	64 87 94 af					.dword $AF948764	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94e6	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>94e7	66 c8 d4 62					.dword $62D4C866	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94eb	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>94ec	e2 9c c3 ac					.dword $ACC39CE2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94f0	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>94f1	1a c6 2b 79					.dword $792BC61A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94f5	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>94f6	07 e1 c4 a3					.dword $A3C4E107	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94fa	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>94fb	91 a5 54 5c					.dword $5C54A591	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94ff	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>9500	00 00						.word 0
=47					CL	.var *-(WordListLink+wh_Xt)
=$9502					en = *	; remember here
>94d1	2f					.byte CL	;wh_CodeLength
>9502	46 4c 6f 67 32			L1:	.text "FLog2"	;  name of word as a string, ending at wh_NameLastChar
>9507	05					.byte *-L1	;wh_NameLength	length of name
>9508	4e 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>950a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>950b	08					.byte NN	;wh_Flags	dictionary flags
=38023					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.950c	a4 4c		ldy $4c		FLog2:		ldy fp
.950e	b9 57 00	lda $0057,y			lda FSMant0,y	; bad param?
.9511	30 20		bmi $9533			bmi _OutOfRange
.9513	f0 1e		beq $9533			beq _OutOfRange
.9515	b9 4d 00	lda $004d,y			lda FSExp,y
.9518	48		pha				pha		; remember orig exponent
.9519	a9 01		lda #$01			lda #1
.951b	99 4d 00	sta $004d,y			sta FSExp,y	; set to 1
.951e	20 90 8b	jsr $8b90			jsr F1Minus
.9521	20 d3 94	jsr $94d3			jsr FLog2M1M
.9524	a0 00		ldy #$00			ldy #0		; add orig exponent to float
.9526	68		pla				pla
.9527	38		sec				sec
.9528	e9 01		sbc #$01			sbc #1
.952a	10 01		bpl $952d			bpl +
.952c	88		dey				dey
.952d					+
.952d	20 41 8e	jsr $8e41			jsr SToFYA
.9530	4c 29 8b	jmp $8b29			jmp FPlus
.9533	4c 9d b3	jmp $b39d	_OutOfRange:	jmp Throw_FpOutOfRange
=42					CL	.var *-(WordListLink+wh_Xt)
=$9536					en = *	; remember here
>950a	2a					.byte CL	;wh_CodeLength
>9536	46 4c 6e			L1:	.text "FLn"	;  name of word as a string, ending at wh_NameLastChar
>9539	03					.byte *-L1	;wh_NameLength	length of name
>953a	87 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>953c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>953d	08					.byte NN	;wh_Flags	dictionary flags
=38073					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.953e	20 0c 95	jsr $950c	FLn:		jsr FLog2
.9541	20 cc 88	jsr $88cc			jsr FLitI
>9544	f8 0b b9 58					.dword $58b90bf8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9548	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
.9549	4c fd 8b	jmp $8bfd			jmp FStar
=14					CL	.var *-(WordListLink+wh_Xt)
=$954c					en = *	; remember here
>953c	0e					.byte CL	;wh_CodeLength
>954c	46 4c 6e 50 31			L1:	.text "FLnP1"	;  name of word as a string, ending at wh_NameLastChar
>9551	05					.byte *-L1	;wh_NameLength	length of name
>9552	b9 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9554	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9555	08					.byte NN	;wh_Flags	dictionary flags
=38097					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9556	20 5e 8b	jsr $8b5e	FlnP1:		jsr F1Plus
.9559	4c 3e 95	jmp $953e			jmp FLn
=6					CL	.var *-(WordListLink+wh_Xt)
=$955c					en = *	; remember here
>9554	06					.byte CL	;wh_CodeLength
>955c	46 4c 6f 67			L1:	.text "FLog"	;  name of word as a string, ending at wh_NameLastChar
>9560	04					.byte *-L1	;wh_NameLength	length of name
>9561	d1 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9563	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9564	08					.byte NN	;wh_Flags	dictionary flags
=38112					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9565	20 0c 95	jsr $950c	FLog:		jsr FLog2
.9568	20 cc 88	jsr $88cc			jsr FLitI
>956b	3c 4d 10 4d					.dword $4d104d3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>956f	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
.9570	4c fd 8b	jmp $8bfd			jmp FStar
=14					CL	.var *-(WordListLink+wh_Xt)
=$9573					en = *	; remember here
>9563	0e					.byte CL	;wh_CodeLength
>9573	46 45 78 70 32 4d 31 4d		L1:	.text "FExp2M1M"	;  name of word as a string, ending at wh_NameLastChar
>957b	08					.byte *-L1	;wh_NameLength	length of name
>957c	e0 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>957e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>957f	08					.byte NN	;wh_Flags	dictionary flags
=38139					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9580	a9 8a		lda #$8a	FExp2M1M:	lda #<_c
.9582	a0 95		ldy #$95			ldy #>_c
.9584	20 a1 94	jsr $94a1			jsr FMPolyYA
.9587	4c fd 8b	jmp $8bfd			jmp FStar
=10					CL	.var *-(WordListLink+wh_Xt)
=$958a					en = *	; remember here
>957e	0a					.byte CL	;wh_CodeLength
.958a					_c:
>958a	da dc 4f 7c					.dword $7C4FDCDa	; 32 bit signed binary mantissa.  $40000000 = +0.5
>958e	f7						.char -9		; 8 bit signed exponent.  $00 = 2**0
>958f	d6 ca 4c 49					.dword $494CCAD6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9593	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9594	f0 42 64 72					.dword $726442f0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9598	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9599	44 90 f4 7a					.dword $7AF49044	; 32 bit signed binary mantissa.  $40000000 = +0.5
>959d	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>959e	9b 3c b9 58					.dword $58B93C9b	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95a2	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>95a3	00						.byte 0
>95a4	46 45 78 70 32			L1:	.text "FExp2"	;  name of word as a string, ending at wh_NameLastChar
>95a9	05					.byte *-L1	;wh_NameLength	length of name
>95aa	fb 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95ac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95ad	08					.byte NN	;wh_Flags	dictionary flags
=38185					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95ae	20 17 87	jsr $8717	FExp2:		jsr FIntFrc	; ( f: r_rem r_int )
.95b1	20 8b 8e	jsr $8e8b			jsr FToS
.95b4	20 80 95	jsr $9580			jsr FExp2M1M
.95b7	20 5e 8b	jsr $8b5e			jsr F1Plus
.95ba	20 1f b3	jsr $b31f			jsr PopA
.95bd	a4 4c		ldy $4c				ldy fp
.95bf	18		clc				clc
.95c0	79 4d 00	adc $004d,y			adc FSExp,y
.95c3	99 4d 00	sta $004d,y			sta FSExp,y
=24					CL	.var *-(WordListLink+wh_Xt)
=$95c6					en = *	; remember here
>95ac	18					.byte CL	;wh_CodeLength
.95c6	60		rts				rts
>95c7	46 45 78 70			L1:	.text "FExp"	;  name of word as a string, ending at wh_NameLastChar
>95cb	04					.byte *-L1	;wh_NameLength	length of name
>95cc	29 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95cf	08					.byte NN	;wh_Flags	dictionary flags
=38219					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95d0					FExp:
.95d0	20 cc 88	jsr $88cc			jsr FLitI
>95d3	94 1d 55 5c					.dword $5c551d94	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95d7	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
.95d8	20 fd 8b	jsr $8bfd			jsr FStar
.95db	4c ae 95	jmp $95ae			jmp FExp2
=14					CL	.var *-(WordListLink+wh_Xt)
=$95de					en = *	; remember here
>95ce	0e					.byte CL	;wh_CodeLength
>95de	46 45 78 70 4d 31		L1:	.text "FExpM1"	;  name of word as a string, ending at wh_NameLastChar
>95e4	06					.byte *-L1	;wh_NameLength	length of name
>95e5	4b 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95e8	08					.byte NN	;wh_Flags	dictionary flags
=38244					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95e9	20 d0 95	jsr $95d0	FExpM1:		jsr FExp
.95ec	4c 90 8b	jmp $8b90			jmp F1Minus
=6					CL	.var *-(WordListLink+wh_Xt)
=$95ef					en = *	; remember here
>95e7	06					.byte CL	;wh_CodeLength
>95ef	46 41 4c 6f 67			L1:	.text "FALog"	;  name of word as a string, ending at wh_NameLastChar
>95f4	05					.byte *-L1	;wh_NameLength	length of name
>95f5	64 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95f8	08					.byte NN	;wh_Flags	dictionary flags
=38260					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95f9					FALog:
.95f9	20 cc 88	jsr $88cc			jsr FLitI
>95fc	20 3c 4d 6a					.dword $6a4d3c20	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9600	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
.9601	20 fd 8b	jsr $8bfd			jsr FStar
.9604	4c ae 95	jmp $95ae			jmp FExp2
=14					CL	.var *-(WordListLink+wh_Xt)
=$9607					en = *	; remember here
>95f7	0e					.byte CL	;wh_CodeLength
>9607	46 2a 2a			L1:	.text "F**"	;  name of word as a string, ending at wh_NameLastChar
>960a	03					.byte *-L1	;wh_NameLength	length of name
>960b	74 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>960d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>960e	08					.byte NN	;wh_Flags	dictionary flags
=38282					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.960f	20 00 85	jsr $8500	FPower:		jsr FSwap
.9612	20 0c 95	jsr $950c			jsr FLog2
.9615	20 fd 8b	jsr $8bfd			jsr FStar
.9618	4c ae 95	jmp $95ae			jmp FExp2
=12					CL	.var *-(WordListLink+wh_Xt)
=$961b					en = *	; remember here
>960d	0c					.byte CL	;wh_CodeLength
>961b	44 65 67 32 52 61 64		L1:	.text "Deg2Rad"	;  name of word as a string, ending at wh_NameLastChar
>9622	07					.byte *-L1	;wh_NameLength	length of name
>9623	8a 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9625	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9626	08					.byte NN	;wh_Flags	dictionary flags
=38306					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9627					Deg2Rad:
.9627	20 cc 88	jsr $88cc			jsr FLitI
>962a	8a 1a 7d 47					.dword $477d1A8A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>962e	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
.962f	4c fd 8b	jmp $8bfd			jmp FStar
=11					CL	.var *-(WordListLink+wh_Xt)
=$9632					en = *	; remember here
>9625	0b					.byte CL	;wh_CodeLength
>9632	52 61 64 32 44 65 67		L1:	.text "Rad2Deg"	;  name of word as a string, ending at wh_NameLastChar
>9639	07					.byte *-L1	;wh_NameLength	length of name
>963a	a2 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>963c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>963d	08					.byte NN	;wh_Flags	dictionary flags
=38329					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.963e					Rad2Deg:
.963e	20 cc 88	jsr $88cc			jsr FLitI
>9641	68 70 97 72					.dword $72977068	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9645	06						.char 6		; 8 bit signed exponent.  $00 = 2**0
.9646	4c fd 8b	jmp $8bfd			jmp FStar
=11					CL	.var *-(WordListLink+wh_Xt)
=$9649					en = *	; remember here
>963c	0b					.byte CL	;wh_CodeLength
>9649	46 41 52 65 64 75 63 65		L1:	.text "FAReduce"	;  name of word as a string, ending at wh_NameLastChar
>9651	08					.byte *-L1	;wh_NameLength	length of name
>9652	b9 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9654	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9655	08					.byte NN	;wh_Flags	dictionary flags
=38353					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9656	a4 4c		ldy $4c		FAReduce:	ldy fp
.9658	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.965b	f0 2f		beq $968c			beq _ok
.965d	b9 4d 00	lda $004d,y			lda FSExp,y		; get exponent
.9660	30 2a		bmi $968c			bmi _ok			; small?
.9662	c9 01		cmp #$01			cmp #1			; maybe need mirror?
.9664	30 26		bmi $968c			bmi _ok			;if exponent <=0
.9666	f0 24		beq $968c			beq _ok
.9668	c9 02		cmp #$02			cmp #2			; maybe need rotation?
.966a	b0 22		bcs $968e			bcs _exp2
.966c	b9 57 00	lda $0057,y			lda FSMant0,y
.966f	c9 65		cmp #$65			cmp #$65		;in -pi/2..pi/2 ?
.9671	90 19		bcc $968c			bcc _ok
.9673	c9 9b		cmp #$9b			cmp #$100-$65
.9675	b0 15		bcs $968c			bcs _ok
.9677					_mir:
.9677	20 45 89	jsr $8945			jsr FPi
.967a	a4 4c		ldy $4c				ldy fp
.967c	b9 58 00	lda $0058,y			lda FSMant0+1,y
.967f	10 03		bpl $9684			bpl _3
.9681	20 a2 8b	jsr $8ba2			jsr FNegate
.9684	20 00 85	jsr $8500	_3:		jsr FSwap
.9687	20 6b 8b	jsr $8b6b			jsr FMinus
.968a	38		sec				sec		; mirrored
.968b	60		rts				rts
.968c	18		clc		_ok:		clc		; not mirrored
.968d	60		rts				rts
.968e	d0 0b		bne $969b	_exp2:		bne _rot	;if exp>2 then fix
.9690	b9 57 00	lda $0057,y			lda FSMant0,y
.9693	c9 65		cmp #$65			cmp #$65	;if mant>pi or mant<-pi then fix
.9695	90 e0		bcc $9677			bcc _mir
.9697	c9 9b		cmp #$9b			cmp #$100-$65
.9699	b0 dc		bcs $9677			bcs _mir
.969b	20 77 89	jsr $8977	_rot:		jsr F2Pi
.969e	20 b0 8c	jsr $8cb0			jsr FSlash
.96a1	20 17 87	jsr $8717			jsr FIntFrc
.96a4	e6 4c		inc $4c				inc fp		; FDrop integer part
.96a6	a4 4c		ldy $4c				ldy fp		;if >=.5
.96a8	b9 4d 00	lda $004d,y			lda FSExp,y
.96ab	a8		tay				tay
.96ac	30 03		bmi $96b1			bmi _rot4
.96ae	20 90 8b	jsr $8b90			jsr F1Minus	;  subtract 1
.96b1	20 77 89	jsr $8977	_rot4:		jsr F2Pi
.96b4	20 fd 8b	jsr $8bfd			jsr FStar
.96b7	4c 56 96	jmp $9656			jmp FAReduce	; rotate done, look again
=100					CL	.var *-(WordListLink+wh_Xt)
=$96ba					en = *	; remember here
>9654	64					.byte CL	;wh_CodeLength
>96ba	46 53 69 6e 4d			L1:	.text "FSinM"	;  name of word as a string, ending at wh_NameLastChar
>96bf	05					.byte *-L1	;wh_NameLength	length of name
>96c0	d1 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96c3	08					.byte NN	;wh_Flags	dictionary flags
=38463					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.96c4	20 78 84	jsr $8478	FSinM:		jsr FDup
.96c7	20 83 8c	jsr $8c83			jsr FSqr	; x x^2
.96ca	a9 da		lda #$da			lda #<_c
.96cc	a0 96		ldy #$96			ldy #>_c
.96ce	20 a1 94	jsr $94a1			jsr FMPolyYA
.96d1	20 fd 8b	jsr $8bfd			jsr FStar
.96d4	20 5e 8b	jsr $8b5e			jsr F1Plus	; C0 +1.0
.96d7	4c fd 8b	jmp $8bfd			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$96da					en = *	; remember here
>96c2	16					.byte CL	;wh_CodeLength
.96da					_c:
>96da	a6 a7 21 57					.dword $5721a7a6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96de	ee						.char -18		; 8 bit signed exponent.  $00 = 2**0
>96df	4e 0b 2a 98					.dword $982a0b4e	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96e3	f4						.char -12		; 8 bit signed exponent.  $00 = 2**0
>96e4	3c 8f 43 44					.dword $44438f3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96e8	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>96e9	37 ae aa aa					.dword $aaaaae37	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96ed	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>96ee	00						.byte 0
>96ef	46 53 69 6e			L1:	.text "FSin"	;  name of word as a string, ending at wh_NameLastChar
>96f3	04					.byte *-L1	;wh_NameLength	length of name
>96f4	3f 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96f6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96f7	08					.byte NN	;wh_Flags	dictionary flags
=38515					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.96f8	20 56 96	jsr $9656	FSin:		jsr FAReduce
.96fb	4c c4 96	jmp $96c4			jmp FSinM
=6					CL	.var *-(WordListLink+wh_Xt)
=$96fe					en = *	; remember here
>96f6	06					.byte CL	;wh_CodeLength
>96fe	46 43 6f 73			L1:	.text "FCos"	;  name of word as a string, ending at wh_NameLastChar
>9702	04					.byte *-L1	;wh_NameLength	length of name
>9703	73 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9705	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9706	08					.byte NN	;wh_Flags	dictionary flags
=38530					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9707	20 56 89	jsr $8956	FCos:		jsr FPiH
.970a	20 29 8b	jsr $8b29			jsr FPlus
.970d	4c f8 96	jmp $96f8			jmp FSin
=9					CL	.var *-(WordListLink+wh_Xt)
=$9710					en = *	; remember here
>9705	09					.byte CL	;wh_CodeLength
>9710	46 53 69 6e 43 6f 73		L1:	.text "FSinCos"	;  name of word as a string, ending at wh_NameLastChar
>9717	07					.byte *-L1	;wh_NameLength	length of name
>9718	82 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>971a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>971b	08					.byte NN	;wh_Flags	dictionary flags
=38551					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.971c	20 78 84	jsr $8478	FSinCos:	jsr FDup
.971f	20 f8 96	jsr $96f8			jsr FSin
.9722	20 00 85	jsr $8500			jsr FSwap
.9725	4c 07 97	jmp $9707			jmp FCos
=12					CL	.var *-(WordListLink+wh_Xt)
=$9728					en = *	; remember here
>971a	0c					.byte CL	;wh_CodeLength
>9728	46 54 61 6e 4d			L1:	.text "FTanM"	;  name of word as a string, ending at wh_NameLastChar
>972d	05					.byte *-L1	;wh_NameLength	length of name
>972e	97 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9730	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9731	08					.byte NN	;wh_Flags	dictionary flags
=38573					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9732	20 78 84	jsr $8478	FTanM:		jsr FDup
.9735	20 83 8c	jsr $8c83			jsr FSqr		; x x^2
.9738	a9 48		lda #$48			lda #<_c
.973a	a0 97		ldy #$97			ldy #>_c
.973c	20 a1 94	jsr $94a1			jsr FMPolyYA
.973f	20 fd 8b	jsr $8bfd			jsr FStar
.9742	20 5e 8b	jsr $8b5e			jsr F1Plus		; c0 1.0
.9745	4c fd 8b	jmp $8bfd			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$9748					en = *	; remember here
>9730	16					.byte CL	;wh_CodeLength
.9748					_c:
>9748	1e ae 4d 58					.dword $584DAE1E	; 32 bit signed binary mantissa.  $40000000 = +0.5
>974c	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>974d	51 0a eb 57					.dword $57EB0A51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9751	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9752	98 d9 14 77					.dword $7714D998	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9756	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9757	f9 10 ea 43					.dword $43EA10F9	; 32 bit signed binary mantissa.  $40000000 = +0.5
>975b	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>975c	1b e2 57 55					.dword $5557E21B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9760	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9761	00						.byte 0
>9762	46 54 61 6e			L1:	.text "FTan"	;  name of word as a string, ending at wh_NameLastChar
>9766	04					.byte *-L1	;wh_NameLength	length of name
>9767	ad 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9769	03					.byte 3		;wh_CodeLength  (with placeholder value)
>976a	08					.byte NN	;wh_Flags	dictionary flags
=38630					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.976b	20 56 96	jsr $9656	FTan:		jsr FAReduce
.976e	90 06		bcc $9776			bcc _30
.9770	20 76 97	jsr $9776			jsr _30
.9773	4c a2 8b	jmp $8ba2			jmp FNegate
.9776					_30:
.9776	20 78 84	jsr $8478			jsr FDup
.9779	20 c9 8b	jsr $8bc9			jsr FAbs
.977c	20 67 89	jsr $8967			jsr FPiQ
.977f	20 d3 87	jsr $87d3			jsr FLe
.9782	e8		inx				inx			; pop f
.9783	e8		inx				inx
.9784	b5 24		lda $24,x			lda DStack+0,x
.9786	d0 aa		bne $9732			bne FTanM
.9788	20 a2 44	jsr $44a2			jsr FPi/2
.978b	a4 4c		ldy $4c				ldy fp			; get sign
.978d	b9 57 00	lda $0057,y			lda FSMant0,y
.9790	10 03		bpl $9795			bpl +
.9792	20 a2 8b	jsr $8ba2			jsr FNegate
.9795					+
.9795	20 00 85	jsr $8500			jsr FSwap
.9798	20 6b 8b	jsr $8b6b			jsr FMinus
.979b	20 32 97	jsr $9732			jsr FTanM
.979e	4c 55 8d	jmp $8d55			jmp F1Slash
=54					CL	.var *-(WordListLink+wh_Xt)
=$97a1					en = *	; remember here
>9769	36					.byte CL	;wh_CodeLength
>97a1	46 41 43 6f 73			L1:	.text "FACos"	;  name of word as a string, ending at wh_NameLastChar
>97a6	05					.byte *-L1	;wh_NameLength	length of name
>97a7	e6 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>97a9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>97aa	08					.byte NN	;wh_Flags	dictionary flags
=38694					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.97ab	a4 4c		ldy $4c		FACos:		ldy fp
.97ad	b9 57 00	lda $0057,y			lda FSMant0,y
.97b0	08		php				php			; save sign
.97b1	20 c9 8b	jsr $8bc9			jsr FAbs
.97b4	a9 d7		lda #$d7			lda #<_c
.97b6	a0 97		ldy #$97			ldy #>_c
.97b8	20 a1 94	jsr $94a1			jsr FMPolyYA
.97bb	20 00 85	jsr $8500			jsr FSwap
.97be	20 a2 8b	jsr $8ba2			jsr FNegate
.97c1	20 5e 8b	jsr $8b5e			jsr F1Plus
.97c4	20 30 8f	jsr $8f30			jsr FSqrt
.97c7	20 fd 8b	jsr $8bfd			jsr FStar
.97ca	28		plp				plp			; was r1 negative?
.97cb	10 09		bpl $97d6			bpl +
.97cd	20 45 89	jsr $8945			jsr FPi
.97d0	20 00 85	jsr $8500			jsr FSwap
.97d3	20 6b 8b	jsr $8b6b			jsr FMinus
.97d6					+
=43					CL	.var *-(WordListLink+wh_Xt)
=$97d6					en = *	; remember here
>97a9	2b					.byte CL	;wh_CodeLength
.97d6	60		rts				rts
.97d7					_c:
>97d7	8b 5e 9f 4b					.dword $4B9F5E8B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97db	f8						.char -8		; 8 bit signed exponent.  $00 = 2**0
>97dc	ad cc 29 a4					.dword $A429CCAD	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97e0	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>97e1	98 a1 a3 6e					.dword $6EA3A198	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97e5	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>97e6	5a 10 e1 9b					.dword $9BE1105A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97ea	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>97eb	c6 71 ea 5a					.dword $5AEA71C6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97ef	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>97f0	e0 56 21 92					.dword $922156E0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97f4	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>97f5	41 ed 87 64					.dword $6487ED41	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97f9	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>97fa	00						.byte 0
>97fb	46 41 53 69 6e			L1:	.text "FASin"	;  name of word as a string, ending at wh_NameLastChar
>9800	05					.byte *-L1	;wh_NameLength	length of name
>9801	26 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9803	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9804	08					.byte NN	;wh_Flags	dictionary flags
=38784					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9805	20 ab 97	jsr $97ab	FASin:		jsr FACos
.9808	20 a2 8b	jsr $8ba2			jsr FNegate
.980b	20 56 89	jsr $8956			jsr FPiH
.980e	4c 29 8b	jmp $8b29			jmp FPlus
=12					CL	.var *-(WordListLink+wh_Xt)
=$9811					en = *	; remember here
>9803	0c					.byte CL	;wh_CodeLength
>9811	46 41 54 61 6e 4d		L1:	.text "FATanM"	;  name of word as a string, ending at wh_NameLastChar
>9817	06					.byte *-L1	;wh_NameLength	length of name
>9818	80 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>981a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>981b	08					.byte NN	;wh_Flags	dictionary flags
=38807					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.981c	20 78 84	jsr $8478	FATanM:		jsr FDup		; x x
.981f	20 83 8c	jsr $8c83			jsr FSqr		; x xsqr
.9822	a9 32		lda #$32			lda #<_c
.9824	a0 98		ldy #$98			ldy #>_c
.9826	20 a1 94	jsr $94a1			jsr FMPolyYA
.9829	20 fd 8b	jsr $8bfd			jsr FStar		; x poly
.982c	20 5e 8b	jsr $8b5e			jsr F1Plus		; x poly
.982f	4c fd 8b	jmp $8bfd			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$9832					en = *	; remember here
>981a	16					.byte CL	;wh_CodeLength
.9832					_c:
>9832	98 08 2d 76					.dword $762D0898	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9836	f9						.char -7		; 8 bit signed exponent.  $00 = 2**0
>9837	55 a1 32 b8					.dword $B832A155	; 32 bit signed binary mantissa.  $40000000 = +0.5
>983b	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>983c	a8 d7 a2 53					.dword $53A2D7A8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9840	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>9841	be 91 85 bb					.dword $BB8591BE	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9845	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9846	06 65 aa 65					.dword $65AA6506	; 32 bit signed binary mantissa.  $40000000 = +0.5
>984a	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>984b	12 21 b0 aa					.dword $AAB02112	; 32 bit signed binary mantissa.  $40000000 = +0.5
>984f	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9850	00						.byte 0
>9851	46 41 54 61 6e			L1:	.text "FATan"	;  name of word as a string, ending at wh_NameLastChar
>9856	05					.byte *-L1	;wh_NameLength	length of name
>9857	97 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9859	03					.byte 3		;wh_CodeLength  (with placeholder value)
>985a	08					.byte NN	;wh_Flags	dictionary flags
=38870					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.985b					FATan:
.985b	a4 4c		ldy $4c				ldy fp
.985d	b9 4d 00	lda $004d,y			lda FSExp,y		; Abs(r1)<1 ?
.9860	30 ba		bmi $981c			bmi FATanM
.9862	f0 b8		beq $981c			beq FATanM
.9864	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.9867	08		php				php
.9868	20 55 8d	jsr $8d55			jsr F1Slash
.986b	20 1c 98	jsr $981c			jsr FATanM
.986e	20 a2 8b	jsr $8ba2			jsr FNegate
.9871	20 56 89	jsr $8956			jsr FPiH
.9874	28		plp				plp
.9875	10 03		bpl $987a			bpl _18
.9877	20 a2 8b	jsr $8ba2			jsr FNegate
.987a	4c 29 8b	jmp $8b29	_18:		jmp FPlus
>987d	46 41 54 61 6e 32		L1:	.text "FATan2"	;  name of word as a string, ending at wh_NameLastChar
>9883	06					.byte *-L1	;wh_NameLength	length of name
>9884	d6 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9886	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9887	08					.byte NN	;wh_Flags	dictionary flags
=38915					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9888	a4 4c		ldy $4c		FATan2:		ldy fp
.988a	b9 57 00	lda $0057,y			lda FSMant0+0,y	; get rx sign
.988d	f0 1c		beq $98ab			beq _rxzero
.988f	0a		asl a				asl a		;   C=rx sign
.9890	b9 58 00	lda $0058,y			lda FSMant0+1,y	;   N=ry sign
.9893	08		php				php		; save signs
.9894	20 b0 8c	jsr $8cb0			jsr FSlash
.9897	20 5b 98	jsr $985b			jsr FATan
.989a	28		plp				plp		; pop signs
.989b	b0 01		bcs $989e			bcs _rxneg
.989d	60		rts		_rts:		rts
.989e	08		php		_rxneg:		php
.989f	20 45 89	jsr $8945			jsr FPi
.98a2	28		plp				plp
.98a3	10 03		bpl $98a8			bpl +
.98a5	20 a2 8b	jsr $8ba2			jsr FNegate
.98a8	4c 29 8b	jmp $8b29	+		jmp FPlus
.98ab	e6 4c		inc $4c		_rxzero:	inc fp		; FDrop rx
.98ad	b9 57 00	lda $0057,y			lda FSMant0,y
.98b0	08		php				php
.98b1	e6 4c		inc $4c				inc fp		; FDrop ry
.98b3	20 56 89	jsr $8956			jsr FPiH
.98b6	28		plp				plp
.98b7	10 e4		bpl $989d			bpl _rts
.98b9	4c a2 8b	jmp $8ba2			jmp FNegate
=52					CL	.var *-(WordListLink+wh_Xt)
=$98bc					en = *	; remember here
>9886	34					.byte CL	;wh_CodeLength
>98bc	45 64				L1:	.text "Ed"	;  name of word as a string, ending at wh_NameLastChar
>98be	02					.byte *-L1	;wh_NameLength	length of name
>98bf	03 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>98c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>98c2	08					.byte NN	;wh_Flags	dictionary flags
=38974					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.98c3	4c c6 98	jmp $98c6	Ed:		jmp ed6502
=3					CL	.var *-(WordListLink+wh_Xt)
=$98c6					en = *	; remember here
>98c1	03					.byte CL	;wh_CodeLength
=$1e					ed_head	 = editor1  ; pointer to first list element (addr) (2 bytes)
=$20					ed_cur	 = editor2  ; current line number (1 is first line) (2 bytes)
=$22					ed_flags = editor3  ; Flags used by ed, where
.98c6					ed6502:
.98c6	ad 00 03	lda $0300			lda base
.98c9	85 23		sta $23				sta editor3+1
.98cb	20 f4 b0	jsr $b0f4			jsr Decimal
.98ce	a9 00		lda #$00			lda #0
.98d0	85 1e		sta $1e				sta ed_head
.98d2	85 1f		sta $1f				sta ed_head+1
.98d4	85 20		sta $20				sta ed_cur
.98d6	85 21		sta $21				sta ed_cur+1
.98d8	85 22		sta $22				sta ed_flags
.98da	20 44 b7	jsr $b744			jsr Zero
.98dd	20 44 b7	jsr $b744			jsr Zero		; ( addr-t u-t )
.98e0	20 7d aa	jsr $aa7d			jsr CR
.98e3					ed_input_loop:
.98e3	a9 7e		lda #$7e			lda #$ff-%10000001
.98e5	25 22		and $22				and ed_flags
.98e7	85 22		sta $22				sta ed_flags
.98e9	20 8b 9d	jsr $9d8b			jsr ed_get_input
.98ec	a5 06		lda $06				lda ciblen+0
.98ee	d0 1e		bne $990e			bne _command_mode
.98f0	a5 20		lda $20				lda ed_cur+0
.98f2	a4 21		ldy $21				ldy ed_cur+1
.98f4	20 f3 b6	jsr $b6f3			jsr PushYA		; ( addr-t u-t u )
.98f7	a9 80		lda #$80			lda #%10000000
.98f9	05 22		ora $22				ora ed_flags
.98fb	85 22		sta $22				sta ed_flags
.98fd	20 5b c9	jsr $c95b			jsr One_Plus		; ( addr-t u-t u+1 )
.9900	20 a6 9d	jsr $9da6			jsr ed_is_valid_line
.9903	b0 03		bcs $9908			bcs +
.9905	4c 7b 9d	jmp $9d7b			jmp ed_error_1drop	; New line number is not legal, abort
.9908					+
.9908	20 44 b7	jsr $b744			jsr Zero		; ( addr-t u-t u+1 0 )
.990b	4c cd 99	jmp $99cd			jmp _line_number_only_from_external
.990e					_command_mode:
.990e	20 44 b7	jsr $b744			jsr Zero		; parameter 1 is NOS ( addr-t u-t 0 )
.9911	20 44 b7	jsr $b744			jsr Zero		; parameter 2 is TOS ( addr-t u-t 0 0 )
.9914	a0 00		ldy #$00			ldy #0			; get char
.9916	b1 04		lda ($04),y			lda (cib),y
.9918	c9 2e		cmp #$2e			cmp #'.'
.991a	d0 31		bne $994d			bne _prefix_dollar
.991c	20 9a 9d	jsr $9d9a			jsr ed_have_text
.991f	a5 20		lda $20				lda ed_cur
.9921	95 26		sta $26,x			sta DStack+2,x
.9923	a5 21		lda $21				lda ed_cur+1
.9925	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9927	a9 80		lda #$80			lda #%10000000
.9929	05 22		ora $22				ora ed_flags
.992b	85 22		sta $22				sta ed_flags
.992d	a5 06		lda $06				lda ciblen
.992f	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9931	d0 03		bne $9936			bne +
.9933	4c cd 99	jmp $99cd			jmp _line_number_only_from_external
.9936					+
.9936	a5 04		lda $04				lda cib+0
.9938	a4 05		ldy $05				ldy cib+1
.993a	20 f3 b6	jsr $b6f3			jsr PushYA
.993d	a5 06		lda $06				lda ciblen+0
.993f	a4 07		ldy $07				ldy ciblen+1
.9941	20 f3 b6	jsr $b6f3			jsr PushYA
.9944	20 35 c9	jsr $c935			jsr One_Minus		; ( addr-t u-t para1 0 addr u-1 )
.9947	20 65 c9	jsr $c965			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr+1 u-1 )
.994a	4c 1f 9a	jmp $9a1f			jmp _check_for_para2
.994d					_prefix_dollar:
.994d	c9 24		cmp #$24			cmp #'$'
.994f	d0 1f		bne $9970			bne _prefix_percent
.9951	20 9a 9d	jsr $9d9a			jsr ed_have_text
.9954	e8		inx				inx
.9955	e8		inx				inx			; ( addr-t u-t 0 )
.9956	20 c7 9d	jsr $9dc7			jsr ed_last_line	; ( addr-t u-t 0 para1 )
.9959	20 83 ce	jsr $ce83			jsr Swap		; ( addr-t u-t para1 0 )
.995c	a9 80		lda #$80			lda #%10000000
.995e	05 22		ora $22				ora ed_flags
.9960	85 22		sta $22				sta ed_flags
.9962	a5 06		lda $06				lda ciblen
.9964	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9966	d0 03		bne $996b			bne +
.9968	4c cd 99	jmp $99cd			jmp _line_number_only_from_external
.996b					+
.996b	a0 01		ldy #$01			ldy #1
.996d	4c 95 9a	jmp $9a95			jmp _check_command
.9970					_prefix_percent:
.9970	c9 25		cmp #$25			cmp #'%'
.9972	f0 04		beq $9978			beq _whole_text
.9974	c9 2c		cmp #$2c			cmp #','
.9976	d0 1b		bne $9993			bne _prefix_semicolon
.9978					_whole_text:
.9978	20 9a 9d	jsr $9d9a			jsr ed_have_text
.997b	a9 01		lda #$01			lda #1
.997d	95 26		sta $26,x			sta DStack+2,x		; LSB of NOS is para 1
.997f	a9 00		lda #$00			lda #0
.9981	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t para1 0 )
.9983					_semicolon_entry:
.9983	e8		inx				inx
.9984	e8		inx				inx			; DROP ( addr-t u-t para1 )
.9985	20 c7 9d	jsr $9dc7			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9988	a9 80		lda #$80			lda #%10000000
.998a	05 22		ora $22				ora ed_flags
.998c	85 22		sta $22				sta ed_flags
.998e	a0 01		ldy #$01			ldy #1
.9990	4c 95 9a	jmp $9a95			jmp _check_command
.9993					_prefix_semicolon:
.9993	c9 3b		cmp #$3b			cmp #';'
.9995	d0 0e		bne $99a5			bne _prefix_number
.9997	20 9a 9d	jsr $9d9a			jsr ed_have_text
.999a	a5 20		lda $20				lda ed_cur
.999c	95 26		sta $26,x			sta DStack+2,x
.999e	a5 21		lda $21				lda ed_cur+1
.99a0	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.99a2	4c 83 99	jmp $9983			jmp _semicolon_entry
.99a5					_prefix_number:
.99a5	20 44 b7	jsr $b744			jsr Zero
.99a8	20 44 b7	jsr $b744			jsr Zero		; ( addr-t u-t 0 0 0 0 )
.99ab	a5 04		lda $04				lda cib+0
.99ad	a4 05		ldy $05				ldy cib+1
.99af	20 f3 b6	jsr $b6f3			jsr PushYA
.99b2	a5 06		lda $06				lda ciblen+0
.99b4	a4 07		ldy $07				ldy ciblen+1
.99b6	20 f3 b6	jsr $b6f3			jsr PushYA		; ( addr-t u-t 0 0 0 0 cib ciblen )
.99b9	20 75 af	jsr $af75			jsr To_Number		; ( addr-t u-t 0 0 ud addr2 u2 )
.99bc	b5 24		lda $24,x			lda DStack+0,x
.99be	15 25		ora $25,x			ora DStack+1,x
.99c0	d0 25		bne $99e7			bne _have_unconverted_chars
.99c2	20 26 c4	jsr $c426			jsr Two_Drop		; ( addr-t u-t 0 0 ud )
.99c5	20 69 bf	jsr $bf69			jsr D_To_S		; ( addr-t u-t 0 0 u )
.99c8	20 8f cd	jsr $cd8f			jsr Not_Rot		; ( addr-t u-t u 0 0 )
.99cb	e8		inx				inx
.99cc	e8		inx				inx			; ( addr-t u-t u 0 ) drop through
.99cd					_line_number_only_from_external:
.99cd	20 83 ce	jsr $ce83			jsr Swap		; ( addr-t u-t 0 u )
.99d0	20 a6 9d	jsr $9da6			jsr ed_is_valid_line
.99d3	b0 03		bcs $99d8			bcs +
.99d5	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.99d8					+
.99d8	20 83 ce	jsr $ce83			jsr Swap		; ( addr-t u-t u 0 )
.99db	20 06 9e	jsr $9e06			jsr ed_para1_to_cur
.99de	a9 80		lda #$80			lda #%10000000
.99e0	05 22		ora $22				ora ed_flags
.99e2	85 22		sta $22				sta ed_flags
.99e4	4c 64 9c	jmp $9c64			jmp ed_cmd_p_from_external
.99e7					_have_unconverted_chars:
.99e7	a5 06		lda $06				lda ciblen+0
.99e9	d5 24		cmp $24,x			cmp DStack+0,x
.99eb	d0 16		bne $9a03			bne _no_command_yet
.99ed	a5 07		lda $07				lda ciblen+1
.99ef	d5 25		cmp $25,x			cmp DStack+1,x
.99f1	d0 10		bne $9a03			bne _no_command_yet
.99f3	8a		txa				txa
.99f4	18		clc				clc
.99f5	69 08		adc #$08			adc #8
.99f7	aa		tax				tax			; ( addr-t u-t 0 0 )
.99f8	a9 7f		lda #$7f			lda #$ff-%10000000
.99fa	25 22		and $22				and ed_flags
.99fc	85 22		sta $22				sta ed_flags
.99fe	a0 00		ldy #$00			ldy #0
.9a00	4c 95 9a	jmp $9a95			jmp _check_command
.9a03					_no_command_yet:
.9a03	20 ea cd	jsr $cdea			jsr To_R		; >R ( ... 0 0 ud addr2 ) (R: u2)
.9a06	20 8f cd	jsr $cd8f			jsr Not_Rot		; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.9a09	20 69 bf	jsr $bf69			jsr D_To_S		; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.9a0c	b5 24		lda $24,x			lda DStack+0,x		; LSB
.9a0e	95 2a		sta $2a,x			sta DStack+6,x
.9a10	b5 25		lda $25,x			lda DStack+1,x		; MSB
.9a12	95 2b		sta $2b,x			sta DStack+7,x		; ( ... para1 0 addr2 para1 ) (R: u2)
.9a14	e8		inx				inx
.9a15	e8		inx				inx			; ( addr-t u-t para1 0 addr2 ) (R: u2)
.9a16	20 09 ce	jsr $ce09			jsr R_From		; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.9a19	a9 80		lda #$80			lda #%10000000
.9a1b	05 22		ora $22				ora ed_flags
.9a1d	85 22		sta $22				sta ed_flags
.9a1f					_check_for_para2:
.9a1f	a1 26		lda ($26,x)			lda (DStack+2,x)
.9a21	c9 2c		cmp #$2c			cmp #','
.9a23	f0 0c		beq $9a31			beq _got_comma
.9a25	38		sec				sec
.9a26	a5 06		lda $06				lda ciblen
.9a28	f5 24		sbc $24,x			sbc DStack+0,x
.9a2a	a8		tay				tay
.9a2b	20 26 c4	jsr $c426			jsr Two_Drop		; Remove the leftover stuff from >NUMBER
.9a2e	4c 95 9a	jmp $9a95			jmp _check_command
.9a31					_got_comma:
.9a31	20 65 c9	jsr $c965			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr2+1 u2 )
.9a34	20 35 c9	jsr $c935			jsr One_Minus		; ( addr-t u-t para1 0 addr2+1 u2-1 )
.9a37	a1 26		lda ($26,x)			lda (DStack+2,x)
.9a39	c9 24		cmp #$24			cmp #'$'
.9a3b	d0 16		bne $9a53			bne _para2_not_dollar
.9a3d	38		sec				sec
.9a3e	a5 06		lda $06				lda ciblen
.9a40	f5 26		sbc $26,x			sbc DStack+2,x
.9a42	a8		tay				tay
.9a43	c8		iny				iny
.9a44	98		tya				tya
.9a45	48		pha				pha
.9a46	8a		txa				txa
.9a47	18		clc				clc
.9a48	69 06		adc #$06			adc #6
.9a4a	aa		tax				tax			; ( addr-t u-t para1 )
.9a4b	20 c7 9d	jsr $9dc7			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9a4e	68		pla				pla
.9a4f	a8		tay				tay
.9a50	4c 95 9a	jmp $9a95			jmp _check_command
.9a53					_para2_not_dollar:
.9a53	20 ea cd	jsr $cdea			jsr To_R		; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.9a56	20 44 b7	jsr $b744			jsr Zero		; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.9a59	20 44 b7	jsr $b744			jsr Zero		; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.9a5c	20 69 cd	jsr $cd69			jsr Rot		; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.9a5f	20 09 ce	jsr $ce09			jsr R_From		; R> ( ... para1 0 0 0 addr2+1 u2-1)
.9a62	20 65 ce	jsr $ce65			jsr Dup		; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.9a65	20 ea cd	jsr $cdea			jsr To_R		; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.9a68	20 75 af	jsr $af75			jsr To_Number	; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.9a6b	20 65 ce	jsr $ce65			jsr Dup		; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.9a6e	20 09 ce	jsr $ce09			jsr R_From		; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.9a71	20 23 c7	jsr $c723			jsr Equal		; = ( ... para1 0 ud addr3 u3 f )
.9a74	b5 24		lda $24,x			lda DStack+0,x
.9a76	15 25		ora $25,x			ora DStack+1,x
.9a78	f0 08		beq $9a82			beq _second_number
.9a7a	8a		txa				txa
.9a7b	18		clc				clc
.9a7c	69 0c		adc #$0c			adc #12
.9a7e	aa		tax				tax			; back to ( addr-t u-t )
.9a7f	4c 7d 9d	jmp $9d7d			jmp ed_error
.9a82					_second_number:
.9a82	e8		inx				inx
.9a83	e8		inx				inx			; ( addr-t u-t para1 0 ud addr3 u3 )
.9a84	38		sec				sec
.9a85	a5 06		lda $06				lda ciblen
.9a87	f5 24		sbc $24,x			sbc DStack+0,x
.9a89	48		pha				pha
.9a8a	20 26 c4	jsr $c426			jsr Two_drop		; 2DROP ( addr-t u-t para1 0 ud )
.9a8d	20 69 bf	jsr $bf69			jsr D_To_S		; D>S  ( addr-t u-t para1 0 para2 )
.9a90	20 80 c8	jsr $c880			jsr Nip			; NIP ( addr-t u-t para1 para2 )
.9a93	68		pla				pla
.9a94	a8		tay				tay
.9a95					_check_command:
.9a95	24 22		bit $22				bit ed_flags
.9a97	30 08		bmi $9aa1			bmi _check_command_have_arg
.9a99	a5 20		lda $20				lda ed_cur+0
.9a9b	95 26		sta $26,x			sta DStack+2,x
.9a9d	a5 21		lda $21				lda ed_cur+1
.9a9f	95 27		sta $27,x			sta DStack+3,x
.9aa1					_check_command_have_arg:
.9aa1	b1 04		lda ($04),y			lda (cib),y		; get mystery char from input
.9aa3	85 14		sta $14				sta tmp1+0
.9aa5	85 15		sta $15				sta tmp1+1		; We need X for awhile, so it has to
.9aa7	a2 ff		ldx #$ff			ldx #$ff		; for each char
.9aa9	e8		inx		_cmd_loop:	inx			;   next char
.9aaa	bd 2a 9e	lda $9e2a,x			lda ed_cmd_list,x
.9aad	f0 13		beq $9ac2			beq _illegal_command	;   end of list?
.9aaf	c5 14		cmp $14				cmp tmp1+0
.9ab1	d0 f6		bne $9aa9			bne _cmd_loop		;   not found?
.9ab3	8a		txa				txa
.9ab4	0a		asl a				asl
.9ab5	aa		tax				tax			; X * 2 for table
.9ab6	bd 36 9e	lda $9e36,x			lda ed_cmd_table+1,x
.9ab9	48		pha				pha
.9aba	bd 35 9e	lda $9e35,x			lda ed_Cmd_table+0,x
.9abd	48		pha				pha
.9abe	a6 15		ldx $15				ldx tmp1+1		; restore X
.9ac0	08		php				php
.9ac1	40		rti				rti			; jump to command routine
.9ac2					_illegal_command:
.9ac2	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.9ac5					ed_next_command:
.9ac5	20 26 c4	jsr $c426			jsr Two_Drop		; ( addr-t u-t ) Fall through
.9ac8					_next_command_empty:
.9ac8	4c e3 98	jmp $98e3			jmp ed_input_loop
.9acb					ed_all_done:
.9acb	a9 00		lda #$00			lda #0
.9acd	85 06		sta $06				sta ciblen
.9acf	85 07		sta $07				sta ciblen+1
.9ad1	20 26 c4	jsr $c426			jsr Two_drop			; ( addr-t u-t )
.9ad4	a5 23		lda $23				lda editor3+1
.9ad6	8d 00 03	sta $0300			sta base
.9ad9	60		rts				rts
.9ada					ed_cmd_a:
.9ada	e8		inx				inx
.9adb	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9adc					ed_entry_cmd_i:
.9adc					ed_cmd_a_have_para:
.9adc	20 eb 9d	jsr $9deb			jsr ed_num_to_addr	  ;  ( addr-t u-t addr1 )
.9adf	20 7d aa	jsr $aa7d			jsr CR
.9ae2					_next_string_loop:
.9ae2	20 8b 9d	jsr $9d8b			jsr ed_get_input
.9ae5	a0 00		ldy #$00			ldy #0
.9ae7	b1 04		lda ($04),y			lda (cib),y
.9ae9	c9 2e		cmp #$2e			cmp #'.'
.9aeb	d0 18		bne $9b05			bne _add_line
.9aed	a4 06		ldy $06				ldy ciblen
.9aef	c0 01		cpy #$01			cpy #1
.9af1	d0 12		bne $9b05			bne _add_line
.9af3	a4 07		ldy $07				ldy ciblen+1
.9af5	d0 0e		bne $9b05			bne _add_line
.9af7	e8		inx				inx
.9af8	e8		inx				inx
.9af9	a9 40		lda #$40			lda #%01000000
.9afb	05 22		ora $22				ora ed_flags
.9afd	85 22		sta $22				sta ed_flags
.9aff	20 7d aa	jsr $aa7d			jsr CR
.9b02	4c e3 98	jmp $98e3			jmp ed_input_loop
.9b05					_add_line:
.9b05	20 65 ce	jsr $ce65			jsr Dup			; ( addr-t u-t addr1 addr1 )
.9b08	20 27 c9	jsr $c927			jsr Here		; ( addr-t u-t addr1 addr1 here )
.9b0b	20 83 ce	jsr $ce83			jsr Swap		; ( addr-t u-t addr1 here addr1 )
.9b0e	20 cf cd	jsr $cdcf			jsr Fetch		; ( addr-t u-t addr1 here addr2 )
.9b11	20 1b cc	jsr $cc1b			jsr Comma		; ( addr-t u-t addr1 here )
.9b14	20 e0 cb	jsr $cbe0			jsr Tuck		; TUCK ( addr-t u-t here addr1 here )
.9b17	20 83 ce	jsr $ce83			jsr Swap		; ( addr-t u-t here here addr1 )
.9b1a	20 b2 cd	jsr $cdb2			jsr Store		; ( addr-t u-t here )
.9b1d	20 27 c9	jsr $c927			jsr Here		; HERE ( addr-t u-t here here2)
.9b20	a9 04		lda #$04			lda #4
.9b22	20 35 b7	jsr $b735			jsr PushZA
.9b25	20 03 c0	jsr $c003			jsr Allot
.9b28	e6 20		inc $20				inc ed_cur
.9b2a	d0 02		bne $9b2e			bne +
.9b2c	e6 21		inc $21				inc ed_cur+1
.9b2e					+
.9b2e	20 27 c9	jsr $c927			jsr Here	; ( addr-t u-t here here2 here3 )
.9b31	a5 04		lda $04				lda cib+0
.9b33	a4 05		ldy $05				ldy cib+1
.9b35	20 f3 b6	jsr $b6f3			jsr PushYA	; ( addr-t u-t here here2 here3 cib )
.9b38	20 3c ce	jsr $ce3c			jsr Over	; ( addr-t u-t here here2 here3 cib here3 )
.9b3b	a5 06		lda $06				lda ciblen+0
.9b3d	a4 07		ldy $07				ldy ciblen+1
.9b3f	20 f3 b6	jsr $b6f3			jsr PushYA	; ( addr-t u-t here here2 here3 cib here3 ciblen )
.9b42	20 92 ac	jsr $ac92			jsr Move	; ( addr-t u-t here here2 here3 )
.9b45	18		clc				clc
.9b46	a5 00		lda $00				lda cp
.9b48	65 06		adc $06				adc ciblen
.9b4a	85 00		sta $00				sta cp
.9b4c	90 06		bcc $9b54			bcc +
.9b4e	a5 01		lda $01				lda cp+1
.9b50	65 07		adc $07				adc ciblen+1
.9b52	85 01		sta $01				sta cp+1
.9b54					+
.9b54	20 3c ce	jsr $ce3c			jsr Over		; ( addr-t u-t here here2 here3 here2 )
.9b57	20 b2 cd	jsr $cdb2			jsr Store		; ( addr-t u-t here here2 )
.9b5a	20 08 c9	jsr $c908			jsr Cell_Plus_NoUf	; ( addr-t u-t here here2+2 )
.9b5d	20 65 ce	jsr $ce65			jsr Dup			; ( addr-t u-t here here2+2 here2+2 )
.9b60	a5 06		lda $06				lda ciblen
.9b62	95 26		sta $26,x			sta DStack+2,x
.9b64	a5 07		lda $07				lda ciblen+1
.9b66	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t here ciblen here2+2 )
.9b68	20 b2 cd	jsr $cdb2			jsr Store		; ( addr-t u-t here )
.9b6b	20 7d aa	jsr $aa7d			jsr CR			; Add a line feed for visuals
.9b6e	4c e2 9a	jmp $9ae2			jmp _next_string_loop
.9b71					ed_cmd_d:
.9b71	20 9a 9d	jsr $9d9a			jsr ed_have_text
.9b74	20 dd 9d	jsr $9ddd			jsr ed_no_line_zero
.9b77	b5 24		lda $24,x			lda DStack+0,x
.9b79	15 25		ora $25,x			ora DStack+1,x
.9b7b	d0 09		bne $9b86			bne +
.9b7d	20 3c ce	jsr $ce3c			jsr Over		; ( addr-t u-t para1 0 para1 )
.9b80	20 bb 9b	jsr $9bbb			jsr _cmd_d_common	; ( addr-t u-t para1 0 )
.9b83	4c af 9b	jmp $9baf			jmp _cmd_d_done
.9b86					+
.9b86	20 a6 9d	jsr $9da6			jsr ed_is_valid_line	  ; result is in C flag
.9b89	b0 03		bcs $9b8e			bcs _cmd_d_loop
.9b8b	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.9b8e					_cmd_d_loop:
.9b8e	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9b90	d5 26		cmp $26,x			cmp DStack+2,x
.9b92	b5 25		lda $25,x			lda DStack+1,x
.9b94	f5 27		sbc $27,x			sbc DStack+3,x
.9b96	90 0c		bcc $9ba4			bcc _cmd_d_done_with_flag
.9b98	20 65 ce	jsr $ce65			jsr Dup		; DUP ( addr-t u-t para1 para2 para2 )
.9b9b	20 bb 9b	jsr $9bbb			jsr _cmd_d_common	; ( addr-t u-t para1 para2 )
.9b9e	20 35 c9	jsr $c935			jsr One_minus	; 1- ( addr-t u-t para1 para2-1 )
.9ba1	4c 8e 9b	jmp $9b8e			jmp _cmd_d_loop
.9ba4					_cmd_d_done_with_flag:
.9ba4	20 41 c9	jsr $c941			jsr NOS_One_Minus
.9ba7	b5 26		lda $26,x			lda DStack+2,x
.9ba9	85 20		sta $20				sta ed_cur
.9bab	b5 27		lda $27,x			lda DStack+3,x
.9bad	85 21		sta $21				sta ed_cur+1		; drop through to _cmd_d_done
.9baf					_cmd_d_done:
.9baf	a9 40		lda #$40			lda #%01000000
.9bb1	05 22		ora $22				ora ed_flags
.9bb3	85 22		sta $22				sta ed_flags
.9bb5	20 7d aa	jsr $aa7d			jsr CR
.9bb8	4c c5 9a	jmp $9ac5			jmp ed_next_command
.9bbb					_cmd_d_common:
.9bbb	20 65 ce	jsr $ce65			jsr Dup			; ( addr-t u-t u u )
.9bbe	20 eb 9d	jsr $9deb			jsr ed_num_to_addr	; ( addr-t u-t u addr )
.9bc1	20 cf cd	jsr $cdcf			jsr Fetch		; ( addr-t u-t u addr1 )
.9bc4	20 83 ce	jsr $ce83			jsr Swap		; ( addr-t u-t addr1 u )
.9bc7	20 35 c9	jsr $c935			jsr One_minus		; ( addr-t u-t addr1 u-1 )
.9bca	20 eb 9d	jsr $9deb			jsr ed_num_to_addr	; ( addr-t u-t addr1 addr-1 )
.9bcd	4c b2 cd	jmp $cdb2			jmp Store		; ( addr-t u-t )
.9bd0					ed_cmd_equ:
.9bd0	a5 1e		lda $1e				lda ed_head
.9bd2	05 1f		ora $1f				ora ed_head+1
.9bd4	d0 06		bne $9bdc			bne _cmd_equ_have_text
.9bd6	20 44 b7	jsr $b744			jsr Zero		; ( addr-t u-t para1 para2 0 )
.9bd9	4c fc 9b	jmp $9bfc			jmp _cmd_equ_done
.9bdc					_cmd_equ_have_text:
.9bdc	20 dd 9d	jsr $9ddd			jsr ed_no_line_zero
.9bdf	24 22		bit $22				bit ed_flags
.9be1	30 0a		bmi $9bed			bmi _cmd_equ_have_para
.9be3	a5 20		lda $20				lda ed_cur+0		; ( addr-t u-t para1 para2 ? )
.9be5	a4 21		ldy $21				ldy ed_cur+1
.9be7	20 f3 b6	jsr $b6f3			jsr PushYA
.9bea	4c fc 9b	jmp $9bfc			jmp _cmd_equ_done	; ( addr-t u-t para1 para2 cur )
.9bed					_cmd_equ_have_para:
.9bed	b5 24		lda $24,x			lda DStack+0,x
.9bef	15 25		ora $25,x			ora DStack+1,x
.9bf1	d0 06		bne $9bf9			bne _cmd_equ_two_paras
.9bf3	20 3c ce	jsr $ce3c			jsr Over		; ( addr-t u-t para1 para2 para1)
.9bf6	4c fc 9b	jmp $9bfc			jmp _cmd_equ_done
.9bf9					_cmd_equ_two_paras:
.9bf9	20 65 ce	jsr $ce65			jsr Dup			; ( addr-t u-t para1 para2 para2) drop through
.9bfc					_cmd_equ_done:
.9bfc	20 7d aa	jsr $aa7d			jsr CR			; number goes on new line
.9bff	20 14 cb	jsr $cb14			jsr U_Dot		; ( addr-t u-t para1 para2 )
.9c02	20 7d aa	jsr $aa7d			jsr CR
.9c05	4c c5 9a	jmp $9ac5			jmp ed_next_command
.9c08					ed_cmd_f:
.9c08	24 22		bit $22				bit ed_flags
.9c0a	30 18		bmi $9c24			bmi _cmd_f_have_para
.9c0c	20 7d aa	jsr $aa7d			jsr CR
.9c0f	20 ea cd	jsr $cdea			jsr To_R		; ( addr-t u-t 0 ) ( R: 0 )
.9c12	20 69 cd	jsr $cd69			jsr Rot			; ( u-t 0 addr-t ) ( R: 0 )
.9c15	20 65 ce	jsr $ce65			jsr Dup			; ( u-t 0 addr-t addr-t ) ( R: 0 )
.9c18	20 14 cb	jsr $cb14			jsr U_Dot		; ( u-t 0 addr-t ) ( R: 0 )
.9c1b	20 8f cd	jsr $cd8f			jsr Not_Rot		; ( addr-t u-t 0 ) ( R: 0 )
.9c1e	20 09 ce	jsr $ce09			jsr R_From		; ( addr-t u-t 0 0 )
.9c21	4c 35 9c	jmp $9c35			jmp _cmd_f_done
.9c24					_cmd_f_have_para:
.9c24	20 3c ce	jsr $ce3c			jsr Over
.9c27	20 7d aa	jsr $aa7d			jsr CR
.9c2a	20 14 cb	jsr $cb14			jsr U_Dot
.9c2d	b5 26		lda $26,x			lda DStack+2,x
.9c2f	95 2a		sta $2a,x			sta DStack+6,x
.9c31	b5 27		lda $27,x			lda DStack+3,x
.9c33	95 2b		sta $2b,x			sta DStack+7,x		; fall through to _cmd_f_done
.9c35					_cmd_f_done:
.9c35	20 7d aa	jsr $aa7d			jsr CR
.9c38	4c c5 9a	jmp $9ac5			jmp ed_next_command
.9c3b					ed_cmd_i:
.9c3b	e8		inx				inx
.9c3c	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9c3d	24 22		bit $22				bit ed_flags
.9c3f	30 08		bmi $9c49			bmi _cmd_i_have_para
.9c41	a5 20		lda $20				lda ed_cur
.9c43	95 24		sta $24,x			sta DStack+0,x
.9c45	a5 21		lda $21				lda ed_cur+1
.9c47	95 25		sta $25,x			sta DStack+1,x		;  ( addr-t u-t cur ) drop through
.9c49					_cmd_i_have_para:
.9c49	b5 24		lda $24,x			lda DStack+0,x
.9c4b	15 25		ora $25,x			ora DStack+1,x
.9c4d	f0 09		beq $9c58			beq _cmd_i_done
.9c4f	20 35 c9	jsr $c935			jsr One_minus		; ( addr-t u-t para1-1 )
.9c52	20 44 b7	jsr $b744			jsr Zero		; ( addr-t u-t para1-1 0 )
.9c55	20 65 c8	jsr $c865			jsr Max			; ( addr-t u-t para1-1 | 0 )
.9c58					_cmd_i_done:
.9c58	4c dc 9a	jmp $9adc			jmp ed_entry_cmd_i
.9c5b					ed_cmd_n:
.9c5b	a9 01		lda #$01			lda #%00000001
.9c5d	05 22		ora $22				ora ed_flags
.9c5f	85 22		sta $22				sta ed_flags
.9c61	4c 6a 9c	jmp $9c6a			jmp ed_cmd_p_entry_for_cmd_n
.9c64					ed_cmd_p:
.9c64					ed_cmd_p_from_external:
.9c64	a9 fe		lda #$fe			lda #$ff-%00000001
.9c66	25 22		and $22				and ed_flags
.9c68	85 22		sta $22				sta ed_flags
.9c6a					ed_cmd_p_entry_for_cmd_n:
.9c6a	20 9a 9d	jsr $9d9a			jsr ed_have_text
.9c6d	20 dd 9d	jsr $9ddd			jsr ed_no_line_zero
.9c70	20 7d aa	jsr $aa7d			jsr CR
.9c73	b5 24		lda $24,x			lda DStack+0,x
.9c75	15 25		ora $25,x			ora DStack+1,x
.9c77	d0 11		bne $9c8a			bne _cmd_p_loop
.9c79	b5 26		lda $26,x			lda DStack+2,x
.9c7b	85 20		sta $20				sta ed_cur
.9c7d	b5 27		lda $27,x			lda DStack+3,x
.9c7f	85 21		sta $21				sta ed_cur+1
.9c81	20 3c ce	jsr $ce3c			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9c84	20 ab 9c	jsr $9cab			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9c87	4c a8 9c	jmp $9ca8			jmp _cmd_p_all_done
.9c8a					_cmd_p_loop:
.9c8a	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9c8c	d5 26		cmp $26,x			cmp DStack+2,x
.9c8e	b5 25		lda $25,x			lda DStack+1,x
.9c90	f5 27		sbc $27,x			sbc DStack+3,x
.9c92	90 0c		bcc $9ca0			bcc _cmd_p_done
.9c94	20 3c ce	jsr $ce3c			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9c97	20 ab 9c	jsr $9cab			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9c9a	20 65 c9	jsr $c965			jsr NOS_One_Plus
.9c9d	4c 8a 9c	jmp $9c8a			jmp _cmd_p_loop
.9ca0					_cmd_p_done:
.9ca0	b5 24		lda $24,x			lda DStack+0,x
.9ca2	85 20		sta $20				sta ed_cur
.9ca4	b5 25		lda $25,x			lda DStack+1,x
.9ca6	85 21		sta $21				sta ed_cur+1
.9ca8					_cmd_p_all_done:
.9ca8	4c c5 9a	jmp $9ac5			jmp ed_next_command
.9cab					_cmd_p_common:
.9cab	a5 22		lda $22				lda ed_flags
.9cad	4a		lsr a				lsr			; bit 0 now in carry
.9cae	90 0b		bcc $9cbb			bcc _cmd_p_common_no_num
.9cb0	20 65 ce	jsr $ce65			jsr Dup			; ( addr-t u-t para1 para1 )
.9cb3	20 14 cb	jsr $cb14			jsr U_Dot		; ( addr-t u-t para1 )
.9cb6	a9 09		lda #$09			lda #AscHT
.9cb8	20 d3 cc	jsr $ccd3			jsr Emit_A
.9cbb					_cmd_p_common_no_num:
.9cbb	20 eb 9d	jsr $9deb			jsr ed_num_to_addr	  ; ( addr-t u-t addr )
.9cbe	4c 0f 9e	jmp $9e0f			jmp ed_print_addr
.9cc1					ed_cmd_q:
.9cc1	24 22		bit $22				bit ed_flags		; bit 6 is change flag
.9cc3	50 03		bvc $9cc8			bvc +
.9cc5	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.9cc8					+
.9cc8	4c cb 9a	jmp $9acb			jmp ed_all_done		   ; can't fall thru because of PLX
.9ccb					ed_cmd_qq:
.9ccb	4c cb 9a	jmp $9acb			jmp ed_all_done
.9cce					ed_cmd_w:
.9cce	20 9a 9d	jsr $9d9a			jsr ed_have_text
.9cd1	24 22		bit $22				bit ed_flags		; parameter given?
.9cd3	30 12		bmi $9ce7			bmi _cmd_w_have_para
.9cd5	b5 2b		lda $2b,x			lda DStack+7,x		; $0000 thru $00ff ?
.9cd7	d0 03		bne $9cdc			bne +
.9cd9	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.9cdc					+
.9cdc	b5 2a		lda $2a,x			lda DStack+6,x
.9cde	95 26		sta $26,x			sta DStack+2,x
.9ce0	b5 2b		lda $2b,x			lda DStack+7,x
.9ce2	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t addr-t ? )
.9ce4	4c ef 9c	jmp $9cef			jmp _cmd_w_para_ready
.9ce7					_cmd_w_have_para:
.9ce7	b5 26		lda $26,x			lda DStack+2,x
.9ce9	95 2a		sta $2a,x			sta DStack+6,x
.9ceb	b5 27		lda $27,x			lda DStack+3,x
.9ced	95 2b		sta $2b,x			sta DStack+7,x		; drop through to _cmd_w_para_ready
.9cef					_cmd_w_para_ready:
.9cef	a9 1e		lda #$1e			lda #<ed_head
.9cf1	95 24		sta $24,x			sta DStack+0,x
.9cf3	a9 00		lda #$00			lda #>ed_head
.9cf5	95 25		sta $25,x			sta DStack+1,x		; ( addr-t u-t addr-t addr-h )
.9cf7	20 3c ce	jsr $ce3c			jsr Over		; ( addr-t u-t addr-t addr-h addr-t )
.9cfa	20 ea cd	jsr $cdea			jsr To_R		; ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.9cfd					_cmd_w_loop:
.9cfd	20 cf cd	jsr $cdcf			jsr Fetch		; ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.9d00	b5 24		lda $24,x			lda DStack+0,x
.9d02	15 25		ora $25,x			ora DStack+1,x
.9d04	f0 4d		beq $9d53			beq _cmd_w_eol
.9d06	20 bf cb	jsr $cbbf			jsr Two_dup		; ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.9d09	20 39 c5	jsr $c539			jsr Two_to_r		; ( addr-t addr-1 ) (R: ... )
.9d0c	20 08 c9	jsr $c908			jsr Cell_Plus_NoUf	; ( addr-t addr1+2 ) (R: ... )
.9d0f	20 65 ce	jsr $ce65			jsr Dup			; ( addr-t addr1+2 addr1+2 ) ( R: ... )
.9d12	20 cf cd	jsr $cdcf			jsr Fetch		; ( addr-t addr1+2 addr-s ) ( R: ... )
.9d15	20 83 ce	jsr $ce83			jsr Swap		; ( addr-t addr-s addr1+2 ) ( R: ... )
.9d18	20 08 c9	jsr $c908			jsr Cell_Plus_NoUf	; ( addr-t addr-s addr1+2 ) (R: ... )
.9d1b	20 cf cd	jsr $cdcf			jsr Fetch		; ( addr-t addr-s u-s ) ( R: ... )
.9d1e	20 8f cd	jsr $cd8f			jsr Not_Rot		; ( u-s addr-t addr-s ) ( R: ... )
.9d21	20 83 ce	jsr $ce83			jsr Swap		; ( u-s addr-s addr-t ) ( R: ... )
.9d24	20 69 cd	jsr $cd69			jsr Rot			; (addr-s addr-t u-s ) ( R: ... )
.9d27	20 65 ce	jsr $ce65			jsr Dup			; (addr-s addr-t u-s u-s ) ( R: ... )
.9d2a	20 ea cd	jsr $cdea			jsr To_R		; (addr-s addr-t u-s ) ( R: ... u-s )
.9d2d	20 92 ac	jsr $ac92			jsr Move		; ( )( R: addr-t addr-1 addr-t )
.9d30	20 09 ce	jsr $ce09			jsr R_From		; ( u-s )  ( R: addr-t addr-h addr-t )
.9d33	20 14 c5	jsr $c514			jsr Two_r_from		; ( u-s addr-t addr-h ) ( R: addr-t )
.9d36	20 8f cd	jsr $cd8f			jsr Not_Rot		; ( addr-h u-s addr-t ) ( R: addr-t )
.9d39	20 af ca	jsr $caaf			jsr Plus		; ( addr-h addr-t1 ) ( R: addr-t )
.9d3c	20 65 ce	jsr $ce65			jsr Dup			; ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.9d3f	a9 0a		lda #$0a			lda #AscLF
.9d41	20 35 b7	jsr $b735			jsr PushZA		; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.9d44	20 83 ce	jsr $ce83			jsr Swap		; ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.9d47	20 b2 cd	jsr $cdb2			jsr Store		; ( addr-h addr-t1 ) ( R: addr-t )
.9d4a	20 5b c9	jsr $c95b			jsr One_plus		; ( addr-h addr-t1+1 ) ( R: addr-t )
.9d4d	20 83 ce	jsr $ce83			jsr Swap		; ( addr-t1+1 addr-h ) ( R: addr-t )
.9d50	4c fd 9c	jmp $9cfd			jmp _cmd_w_loop
.9d53					_cmd_w_eol:
.9d53	20 83 ce	jsr $ce83			jsr Swap		; ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.9d56	20 09 ce	jsr $ce09			jsr R_From		; ( addr-t u-t addr-n addr-tn addr-t )
.9d59	20 c8 ca	jsr $cac8			jsr Minus		; ( addr-t u-t addr-n u )
.9d5c	b5 24		lda $24,x			lda DStack+0,x
.9d5e	95 28		sta $28,x			sta DStack+4,x
.9d60	b5 25		lda $25,x			lda DStack+1,x
.9d62	95 29		sta $29,x			sta DStack+5,x		; ( addr-t u addr-n u )
.9d64	20 7d aa	jsr $aa7d			jsr CR
.9d67	20 65 ce	jsr $ce65			jsr Dup			; ( addr-t u addr-n u u )
.9d6a	20 14 cb	jsr $cb14			jsr U_Dot		; ( addr-t u addr-n u )
.9d6d	20 7d aa	jsr $aa7d			jsr CR
.9d70	a9 bf		lda #$bf			lda #$ff-%01000000
.9d72	25 22		and $22				and ed_flags
.9d74	85 22		sta $22				sta ed_flags
.9d76	4c c5 9a	jmp $9ac5			jmp ed_next_command
.9d79					ed_error_2drop:
.9d79	e8		inx				inx			; Drop para2
.9d7a	e8		inx				inx
.9d7b					ed_error_1drop:
.9d7b	e8		inx				inx			; Drop para1
.9d7c	e8		inx				inx
.9d7d					ed_error:
.9d7d	20 7d aa	jsr $aa7d			jsr CR
.9d80	a9 3f		lda #$3f			lda #'?'
.9d82	20 d3 cc	jsr $ccd3			jsr Emit_A
.9d85	20 7d aa	jsr $aa7d			jsr CR
.9d88	4c e3 98	jmp $98e3			jmp ed_input_loop
.9d8b					ed_get_input:
.9d8b	20 9c c1	jsr $c19c			jsr Refill		;  ( addr-t u-t f )
.9d8e	b5 24		lda $24,x			lda DStack+0,x
.9d90	d0 05		bne $9d97			bne +
.9d92	68		pla				pla
.9d93	68		pla				pla
.9d94	4c 7b 9d	jmp $9d7b			jmp ed_error_1drop
.9d97					+
.9d97	e8		inx				inx
.9d98	e8		inx				inx
.9d99	60		rts				rts
.9d9a					ed_have_text:
.9d9a	a5 1e		lda $1e				lda ed_head
.9d9c	05 1f		ora $1f				ora ed_head+1
.9d9e	d0 05		bne $9da5			bne +
.9da0	68		pla				pla
.9da1	68		pla				pla
.9da2	4c 7d 9d	jmp $9d7d			jmp ed_error
.9da5					+
.9da5	60		rts				rts
.9da6					ed_is_valid_line:
.9da6	38		sec				sec				; default is legal line number
.9da7	b5 24		lda $24,x			lda DStack+0,x
.9da9	15 25		ora $25,x			ora DStack+1,x
.9dab	f0 18		beq $9dc5			beq _nope_zero	; ( n )
.9dad	20 65 ce	jsr $ce65			jsr Dup				; ( n n )
.9db0	20 c7 9d	jsr $9dc7			jsr ed_last_line		; ( n n last )
.9db3	20 83 ce	jsr $ce83			jsr Swap			; ( n last n )
.9db6	20 59 c7	jsr $c759			jsr Less_Than			; ( n f )
.9db9	b5 24		lda $24,x			lda DStack+0,x			; 0 flag is good
.9dbb	15 25		ora $25,x			ora DStack+1,x
.9dbd	d0 04		bne $9dc3			bne _too_small
.9dbf	e8		inx				inx
.9dc0	e8		inx				inx			; DROP flag ( n )
.9dc1	38		sec				sec			; signal valid
.9dc2	60		rts				rts
.9dc3					_too_small:
.9dc3	e8		inx				inx
.9dc4	e8		inx				inx
.9dc5					_nope_zero:
.9dc5	18		clc				clc			; signal not valid
.9dc6	60		rts				rts
.9dc7					ed_last_line:
.9dc7	20 44 b7	jsr $b744			jsr Zero		; Set counter to zero
.9dca	a9 1e		lda #$1e			lda #ed_head
.9dcc	20 35 b7	jsr $b735			jsr PushZA		; ( count addr )
.9dcf					_loop:
.9dcf	20 cf cd	jsr $cdcf			jsr Fetch		; ( count addr|0 )
.9dd2	b5 25		lda $25,x			lda DStack+1,x		; at end-of-list?
.9dd4	f0 06		beq $9ddc			beq _done
.9dd6	20 65 c9	jsr $c965			jsr NOS_One_Plus	; Increase counter
.9dd9	4c cf 9d	jmp $9dcf			jmp _loop		; continue
.9ddc					_done:
.9ddc	60		rts				rts
.9ddd					ed_no_line_zero:
.9ddd	b5 26		lda $26,x			lda DStack+2,x
.9ddf	15 27		ora $27,x			ora DStack+3,x
.9de1	d0 07		bne $9dea			bne _done
.9de3	24 22		bit $22				bit ed_flags
.9de5	10 03		bpl $9dea			bpl _done
.9de7	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.9dea					_done:
.9dea	60		rts				rts
.9deb					ed_num_to_addr:
.9deb	a9 1e		lda #$1e			lda #ed_head
.9ded	20 35 b7	jsr $b735			jsr PushZA		; ( u addr-h )
.9df0	4c fd 9d	jmp $9dfd			jmp _test
.9df3					_loop:
.9df3	20 cf cd	jsr $cdcf			jsr Fetch		; @ ( u addr1 )
.9df6	b5 25		lda $25,x			lda DStack+1,x		; at end of list?
.9df8	f0 09		beq $9e03			beq _finished
.9dfa	20 41 c9	jsr $c941			jsr NOS_One_Minus	; decrement the line count
.9dfd	b5 26		lda $26,x	_test:		lda DStack+2,x		; is the nth element we're looking for?
.9dff	15 27		ora $27,x			ora DStack+3,x
.9e01	d0 f0		bne $9df3			bne _loop
.9e03					_finished:
.9e03	4c 80 c8	jmp $c880			jmp Nip			; ( addr )
.9e06					ed_para1_to_cur:
.9e06	b5 26		lda $26,x			lda DStack+2,x
.9e08	85 20		sta $20				sta ed_cur
.9e0a	b5 27		lda $27,x			lda DStack+3,x
.9e0c	85 21		sta $21				sta ed_cur+1
.9e0e	60		rts				rts
.9e0f					ed_print_addr:
.9e0f	20 05 c9	jsr $c905			jsr Cell_Plus		; ( addr+2 )
.9e12	20 65 ce	jsr $ce65			jsr Dup			; ( addr+2 addr+2 )
.9e15	20 05 c9	jsr $c905			jsr Cell_Plus		; ( addr+2 addr+4 )
.9e18	20 cf cd	jsr $cdcf			jsr Fetch		; ( addr+2 u-s )
.9e1b	20 83 ce	jsr $ce83			jsr Swap		; ( u-s addr+2 )
.9e1e	20 cf cd	jsr $cdcf			jsr Fetch		; ( u-s addr-s )
.9e21	20 83 ce	jsr $ce83			jsr Swap		; ( addr-s u-s )
.9e24	20 ed cc	jsr $cced			jsr Type
.9e27	4c 7d aa	jmp $aa7d			jmp CR
>9e2a	61 66 69 64 70 6e 3d 77		ed_cmd_list:	.text "afidpn=wqQ", 0
>9e32	71 51 00
.9e35					ed_cmd_table:
>9e35	da 9a 08 9c 3b 9c 71 9b				.word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>9e3d	64 9c 5b 9c
>9e41	d0 9b ce 9c c1 9c cb 9c				.word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.9e49					ed6502_end:
>9e49	53 65 65			L1:	.text "See"	;  name of word as a string, ending at wh_NameLastChar
>9e4c	03					.byte *-L1	;wh_NameLength	length of name
>9e4d	3e 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9e4f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9e50	08					.byte NN	;wh_Flags	dictionary flags
=40396					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9e51					See:
.9e51	20 b1 bb	jsr $bbb1			jsr Tick_Nt		; ( nt )
.9e54	20 7d aa	jsr $aa7d			jsr CR
.9e57	ad 00 03	lda $0300			lda base		; Save the current number base
.9e5a	48		pha				pha
.9e5b	a9 5d		lda #$5d			lda #<str_see_nt	; print nt
.9e5d	a0 da		ldy #$da			ldy #>str_see_nt
.9e5f	20 0e cd	jsr $cd0e			jsr Print_ASCIIZ_YA_no_lf
.9e62	20 65 ce	jsr $ce65			jsr Dup			; ( nt nt )
.9e65	20 12 a8	jsr $a812			jsr Dot_Hex
.9e68	20 e0 cc	jsr $cce0			jsr Space		; ( nt )
.9e6b	20 65 ce	jsr $ce65			jsr Dup			; ( nt nt )
.9e6e	20 1b bd	jsr $bd1b			jsr Name_To_Int		; ( nt xt )
.9e71	a9 63		lda #$63			lda #<str_see_xt	; print xt
.9e73	a0 da		ldy #$da			ldy #>str_see_xt
.9e75	20 0e cd	jsr $cd0e			jsr Print_ASCIIZ_YA_no_lf
.9e78	20 65 ce	jsr $ce65			jsr Dup			; ( nt xt xt )
.9e7b	20 12 a8	jsr $a812			jsr Dot_Hex
.9e7e	20 7d aa	jsr $aa7d			jsr CR			; ( nt xt )
.9e81	a9 56		lda #$56			lda #<str_see_flags
.9e83	a0 da		ldy #$da			ldy #>str_see_flags
.9e85	20 0e cd	jsr $cd0e			jsr Print_ASCIIZ_YA_no_lf
.9e88	20 3c ce	jsr $ce3c			jsr Over		; ( nt xt nt )
.9e8b	a9 84		lda #$84			lda #Wh_Flags
.9e8d	20 0a c9	jsr $c90a			jsr Plus_A		; ( nt xt ^flags )
.9e90	a1 24		lda ($24,x)			lda (DStack+0,x)	; ( nt xt ^flags )
.9e92	95 24		sta $24,x			sta DStack+0,x		; ( nt xt flags )
.9e94	a0 0e		ldy #$0e			ldy #2*7		; for bit 7..0
.9e96	20 e0 cc	jsr $cce0	_flag_loop:	jsr Space
.9e99	b9 fd 9e	lda $9efd,y			lda _FlagLabels+0,y	;   print label
.9e9c	20 d3 cc	jsr $ccd3			jsr Emit_A
.9e9f	b9 fe 9e	lda $9efe,y			lda _FlagLabels+1,y
.9ea2	20 d3 cc	jsr $ccd3			jsr Emit_A
.9ea5	a9 3d		lda #$3d			lda #'='
.9ea7	20 d3 cc	jsr $ccd3			jsr Emit_A
.9eaa	16 24		asl $24,x			asl DStack+0,x		;   c = flag, rotate the rest
.9eac	a9 00		lda #$00			lda #0
.9eae	69 30		adc #$30			adc #'0'
.9eb0	20 d3 cc	jsr $ccd3			jsr Emit_A
.9eb3	88		dey				dey
.9eb4	88		dey				dey
.9eb5	10 df		bpl $9e96			bpl _flag_loop
.9eb7	e8		inx				inx
.9eb8	e8		inx				inx			; ( nt xt )
.9eb9	20 7d aa	jsr $aa7d			jsr CR
.9ebc	a9 69		lda #$69			lda #<str_see_size	; print size
.9ebe	a0 da		ldy #$da			ldy #>str_see_size
.9ec0	20 0e cd	jsr $cd0e			jsr Print_ASCIIZ_YA_no_lf
.9ec3	20 83 ce	jsr $ce83			jsr Swap		; ( xt nt )
.9ec6	20 31 aa	jsr $aa31			jsr WordSize		; ( xt u )
.9ec9	20 f4 b0	jsr $b0f4			jsr Decimal
.9ecc	b5 24		lda $24,x			lda DStack+0,x		; if = 255
.9ece	c9 ff		cmp #$ff			cmp #$ff
.9ed0	d0 11		bne $9ee3			bne _size5
.9ed2	20 14 b8	jsr $b814			jsr sliteral_runtime	;   type "large"
.9ed5	4c dd 9e	jmp $9edd			  jmp _size2
>9ed8	6c 61 72 67 65					  .text "large"
.9edd	20 ed cc	jsr $cced	_size2:		jsr Type
.9ee0	4c e9 9e	jmp $9ee9			jmp _size9		;  else
.9ee3	20 65 ce	jsr $ce65	_size5:		jsr Dup			;    type size
.9ee6	20 14 cb	jsr $cb14			jsr U_Dot
.9ee9					_size9:
.9ee9	20 7d aa	jsr $aa7d			jsr CR
.9eec	68		pla				pla			; restore base
.9eed	8d 00 03	sta $0300			sta base
.9ef0	20 bf cb	jsr $cbbf			jsr Two_dup
.9ef3	20 6a a7	jsr $a76a			jsr Dump		; dump
.9ef6	20 7d aa	jsr $aa7d			jsr CR
.9ef9	20 8b d7	jsr $d78b			jsr DisAsm		; disassemble
=171					CL	.var *-(WordListLink+wh_Xt)
=$9efc					en = *	; remember here
>9e4f	ab					.byte CL	;wh_CodeLength
.9efc	60		rts				rts
>9efd	43 4f 41 4e 49 4d 4e 4e		_FlagLabels:	.text "COANIMNNUF__R6__"
>9f05	55 46 5f 5f 52 36 5f 5f
>9f0d	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9f15	72 64 4c 69 73 74
>9f1b	0e					.byte *-L1	;wh_NameLength	length of name
>9f1c	cc 9d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f1e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f1f	08					.byte NN	;wh_Flags	dictionary flags
=40603					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f20	4c 44 b7	jmp $b744	Forth_WordList:	jmp Zero
=3					CL	.var *-(WordListLink+wh_Xt)
=$9f23					en = *	; remember here
>9f1e	03					.byte CL	;wh_CodeLength
>9f23	45 64 69 74 6f 72 2d 57		L1:	.text "Editor-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9f2b	6f 72 64 4c 69 73 74
>9f32	0f					.byte *-L1	;wh_NameLength	length of name
>9f33	9b 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f35	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f36	08					.byte NN	;wh_Flags	dictionary flags
=40626					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f37					Editor_WordList:
.9f37	4c 4e b7	jmp $b74e			jmp One
=3					CL	.var *-(WordListLink+wh_Xt)
=$9f3a					en = *	; remember here
>9f35	03					.byte CL	;wh_CodeLength
>9f3a	41 73 73 65 6d 62 6c 65		L1:	.text "Assembler-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9f42	72 2d 57 6f 72 64 4c 69 73 74
>9f4c	12					.byte *-L1	;wh_NameLength	length of name
>9f4d	b2 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f4f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f50	08					.byte NN	;wh_Flags	dictionary flags
=40652					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f51					Assembler_WordList:
.9f51	4c 58 b7	jmp $b758			jmp Two
=3					CL	.var *-(WordListLink+wh_Xt)
=$9f54					en = *	; remember here
>9f4f	03					.byte CL	;wh_CodeLength
>9f54	52 6f 6f 74 2d 57 6f 72		L1:	.text "Root-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>9f5c	64 6c 69 73 74
>9f61	0d					.byte *-L1	;wh_NameLength	length of name
>9f62	cc 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f64	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f65	08					.byte NN	;wh_Flags	dictionary flags
=40673					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f66	a9 03		lda #$03	Root_WordList:	lda #wid_Root
.9f68	4c 35 b7	jmp $b735			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$9f6b					en = *	; remember here
>9f64	05					.byte CL	;wh_CodeLength
>9f6b	4f 6e 6c 79			L1:	.text "Only"	;  name of word as a string, ending at wh_NameLastChar
>9f6f	04					.byte *-L1	;wh_NameLength	length of name
>9f70	e1 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f72	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f73	08					.byte NN	;wh_Flags	dictionary flags
=40687					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f74	20 13 b7	jsr $b713	Only:		jsr True	; Push -1
.9f77	4c dd a0	jmp $a0dd			jmp Set_Order	; set the minimum search order.
=6					CL	.var *-(WordListLink+wh_Xt)
=$9f7a					en = *	; remember here
>9f72	06					.byte CL	;wh_CodeLength
>9f7a	41 6c 73 6f			L1:	.text "Also"	;  name of word as a string, ending at wh_NameLastChar
>9f7e	04					.byte *-L1	;wh_NameLength	length of name
>9f7f	ef 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f81	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f82	08					.byte NN	;wh_Flags	dictionary flags
=40702					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f83	20 15 a1	jsr $a115	Also:		jsr Get_Order
.9f86	20 3c ce	jsr $ce3c			jsr Over
.9f89	20 83 ce	jsr $ce83			jsr Swap
.9f8c	20 5b c9	jsr $c95b			jsr One_plus
.9f8f	4c dd a0	jmp $a0dd			jmp Set_Order
=15					CL	.var *-(WordListLink+wh_Xt)
=$9f92					en = *	; remember here
>9f81	0f					.byte CL	;wh_CodeLength
>9f92	50 72 65 76 69 6f 75 73		L1:	.text "Previous"	;  name of word as a string, ending at wh_NameLastChar
>9f9a	08					.byte *-L1	;wh_NameLength	length of name
>9f9b	fe 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f9d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f9e	08					.byte NN	;wh_Flags	dictionary flags
=40730					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f9f	20 15 a1	jsr $a115	Previous:	jsr Get_Order
.9fa2	20 80 c8	jsr $c880			jsr Nip
.9fa5	20 35 c9	jsr $c935			jsr One_minus
.9fa8	4c dd a0	jmp $a0dd			jmp Set_Order
=12					CL	.var *-(WordListLink+wh_Xt)
=$9fab					en = *	; remember here
>9f9d	0c					.byte CL	;wh_CodeLength
>9fab	3e 4f 72 64 65 72		L1:	.text ">Order"	;  name of word as a string, ending at wh_NameLastChar
>9fb1	06					.byte *-L1	;wh_NameLength	length of name
>9fb2	1a 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fb4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fb5	08					.byte NN	;wh_Flags	dictionary flags
=40753					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9fb6					To_Order:
.9fb6	20 ea cd	jsr $cdea			jsr To_R		; Put the wid on the return stack for now.
.9fb9	20 15 a1	jsr $a115			jsr Get_Order		; Get the current search order.
.9fbc	20 09 ce	jsr $ce09			jsr R_From		; Get back the wid and add it to the list.
.9fbf	20 83 ce	jsr $ce83			jsr Swap
.9fc2	20 5b c9	jsr $c95b			jsr One_plus
.9fc5	4c dd a0	jmp $a0dd			jmp Set_Order		; Set the search order with the new list.
=18					CL	.var *-(WordListLink+wh_Xt)
=$9fc8					en = *	; remember here
>9fb4	12					.byte CL	;wh_CodeLength
>9fc8	4f 72 64 65 72			L1:	.text "Order"	;  name of word as a string, ending at wh_NameLastChar
>9fcd	05					.byte *-L1	;wh_NameLength	length of name
>9fce	31 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fd0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fd1	08					.byte NN	;wh_Flags	dictionary flags
=40781					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9fd2					Order:
.9fd2	20 7d aa	jsr $aa7d			jsr CR
.9fd5	a0 00		ldy #$00			ldy #0			; for each search_orderV[]
.9fd7	f0 0b		beq $9fe4			beq _test
.9fd9	98		tya		_loop:		tya
.9fda	48		pha				pha
.9fdb	b9 2b 03	lda $032b,y			lda Search_orderV,y
.9fde	20 ef 9f	jsr $9fef			jsr order_print_wid_string   ; internal helper function
.9fe1	68		pla				pla
.9fe2	a8		tay				tay
.9fe3	c8		iny				iny			;  next
.9fe4	cc 2a 03	cpy $032a	_test:		cpy Num_orderV
.9fe7	90 f0		bcc $9fd9			bcc _loop
.9fe9	20 7d aa	jsr $aa7d			jsr CR
.9fec	ad 10 03	lda $0310			lda CurrentV		; print the current wordlist.
.9fef					order_print_wid_string:
.9fef	c9 04		cmp #$04			cmp #wid_Root+1		; do we have a string?
.9ff1	90 06		bcc $9ff9			bcc _string
.9ff3	20 35 b7	jsr $b735			jsr PushZA		; print the WID number
.9ff6	4c 14 cb	jmp $cb14			jmp U_Dot		; JSR/RTS
.9ff9	0a		asl a		_string:	asl		; Get the string based on WID 0 to 3
.9ffa	a8		tay				tay
.9ffb	b9 07 a0	lda $a007,y			lda _wid_Table+0,y
.9ffe	48		pha				pha
.9fff	b9 08 a0	lda $a008,y			lda _wid_Table+1,y
.a002	a8		tay				tay
.a003	68		pla				pla
.a004	4c 0e cd	jmp $cd0e			jmp Print_ASCIIZ_YA_no_lf ; Print without a line feed
=53					CL	.var *-(WordListLink+wh_Xt)
=$a007					en = *	; remember here
>9fd0	35					.byte CL	;wh_CodeLength
.a007					_wid_Table:
>a007	49 da					.word str_wid_forth	       ; WID 0: "Forth"
>a009	41 da					.word str_wid_editor	       ; WID 1: "Editor"
>a00b	36 da					.word str_wid_asm	       ; WID 2: "Assembler"
>a00d	50 da					.word str_wid_root	       ; WID 3: "Root"
>a00f	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
>a014	05					.byte *-L1	;wh_NameLength	length of name
>a015	4d 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a017	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a018	08					.byte NN	;wh_Flags	dictionary flags
=40852					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a019	a9 00		lda #$00	Forth:		lda #wid_Forth
.a01b	8d 2b 03	sta $032b			sta Search_OrderV+0
=5					CL	.var *-(WordListLink+wh_Xt)
=$a01e					en = *	; remember here
>a017	05					.byte CL	;wh_CodeLength
.a01e	60		rts				rts
>a01f	44 65 66 69 6e 69 74 69		L1:	.text "Definitions"	;  name of word as a string, ending at wh_NameLastChar
>a027	6f 6e 73
>a02a	0b					.byte *-L1	;wh_NameLength	length of name
>a02b	94 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a02d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a02e	08					.byte NN	;wh_Flags	dictionary flags
=40874					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a02f	ad 2b 03	lda $032b	Definitions:	lda Search_OrderV	; Transfer SEARCH_ORDER[0] to
.a032	8d 10 03	sta $0310			sta CurrentV		;   byte variable CURRENT.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a035					en = *	; remember here
>a02d	06					.byte CL	;wh_CodeLength
.a035	60		rts				rts
>a036	57 6f 72 64 4c 69 73 74		L1:	.text "WordList"	;  name of word as a string, ending at wh_NameLastChar
>a03e	08					.byte *-L1	;wh_NameLength	length of name
>a03f	aa 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a041	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a042	08					.byte NN	;wh_Flags	dictionary flags
=40894					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a043					WordList:
.a043	ad 11 03	lda $0311			lda Num_wordlistsV	; Get the current number of wordlists
.a046	c9 0c		cmp #$0c			cmp #max_wordlists	; already at the max?
.a048	90 05		bcc $a04f			bcc +
.a04a	a9 66		lda #$66			lda #$100+err_wordlist	;   Print an error message
.a04c	4c c4 b3	jmp $b3c4			jmp ThrowA
.a04f					+
.a04f	ee 11 03	inc $0311			inc Num_WordlistsV	; increment wordlist count
.a052	4c 35 b7	jmp $b735			jmp PushZA		; and put it on the stack.
=18					CL	.var *-(WordListLink+wh_Xt)
=$a055					en = *	; remember here
>a041	12					.byte CL	;wh_CodeLength
>a055	53 65 61 72 63 68 2d 57		L1:	.text "Search-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a05d	6f 72 64 6c 69 73 74
>a064	0f					.byte *-L1	;wh_NameLength	length of name
>a065	be 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a067	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a068	18					.byte UF+NN	;wh_Flags	dictionary flags
=40932					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a069					Search_WordList:
.a069	20 7f b3	jsr $b37f			jsr underflow_3
.a06c	b5 24		lda $24,x			lda DStack+0,x		; Pop wid
.a06e	e8		inx				inx
.a06f	e8		inx				inx
.a070	48		pha				pha
.a071	20 5a bc	jsr $bc5a			jsr fina_pattern_prepare ; tmp2 = pseudo-header for pattern name, zeros NOS
.a074	68		pla				pla
.a075	20 70 bc	jsr $bc70			jsr fina_search_wordlist ; tmp1 = nt of matching word
.a078	f0 25		beq $a09f			beq _fail
.a07a	18		clc				clc
.a07b	a5 14		lda $14				lda tmp1+0		; NOS = xt
.a07d	69 85		adc #$85			adc #Wh_xt
.a07f	95 26		sta $26,x			sta DStack+2,x
.a081	a5 15		lda $15				lda tmp1+1
.a083	69 00		adc #$00			adc #0
.a085	95 27		sta $27,x			sta DStack+3,x
.a087	a0 84		ldy #$84			ldy #Wh_Flags		; get flags
.a089	b1 14		lda ($14),y			lda (tmp1),y
.a08b	29 04		and #$04			and #IM
.a08d	d0 07		bne $a096			bne _immediate		; bit set, we're immediate
.a08f	a9 ff		lda #$ff			lda #$FF		; We're not immediate, return -1
.a091	95 24		sta $24,x			sta DStack+0,x
.a093	95 25		sta $25,x			sta DStack+1,x
.a095	60		rts				rts
.a096					_immediate:
.a096	a9 01		lda #$01			lda #1			; We're immediate, return 1
.a098	95 24		sta $24,x			sta DStack+0,x
.a09a	a9 00		lda #$00			lda #0
.a09c	95 25		sta $25,x			sta DStack+1,x
.a09e	60		rts				rts
.a09f					_fail:
.a09f	e8		inx				inx			; Drop u
.a0a0	e8		inx				inx
.a0a1	60		rts				rts
=57					CL	.var *-(WordListLink+wh_Xt)
=$a0a2					en = *	; remember here
>a067	39					.byte CL	;wh_CodeLength
>a0a2	53 65 74 2d 43 75 72 72		L1:	.text "Set-Current"	;  name of word as a string, ending at wh_NameLastChar
>a0aa	65 6e 74
>a0ad	0b					.byte *-L1	;wh_NameLength	length of name
>a0ae	e4 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0b0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0b1	00					.byte 0	;wh_Flags	dictionary flags
=41005					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0b2	20 1f b3	jsr $b31f	Set_Current:	jsr PopA	; pop wid
.a0b5	8d 10 03	sta $0310			sta CurrentV	; only the LSB is used.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a0b8					en = *	; remember here
>a0b0	06					.byte CL	;wh_CodeLength
.a0b8	60		rts				rts
>a0b9	47 65 74 2d 43 75 72 72		L1:	.text "Get-Current"	;  name of word as a string, ending at wh_NameLastChar
>a0c1	65 6e 74
>a0c4	0b					.byte *-L1	;wh_NameLength	length of name
>a0c5	2d a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0c8	08					.byte NN	;wh_Flags	dictionary flags
=41028					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0c9					Get_Current:
.a0c9	ad 10 03	lda $0310			lda CurrentV
.a0cc	4c 35 b7	jmp $b735			jmp PushZA	; CURRENT is a byte variable
=6					CL	.var *-(WordListLink+wh_Xt)
=$a0cf					en = *	; remember here
>a0c7	06					.byte CL	;wh_CodeLength
>a0cf	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>a0d7	72
>a0d8	09					.byte *-L1	;wh_NameLength	length of name
>a0d9	44 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0dc	00					.byte 0	;wh_Flags	dictionary flags
=41048					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0dd					Set_Order:
.a0dd	b5 25		lda $25,x			lda DStack+1,x		; Test for -1 TOS
.a0df	10 0b		bpl $a0ec			bpl _start
.a0e1	a9 00		lda #$00			lda #0
.a0e3	95 25		sta $25,x			sta DStack+1,x
.a0e5	a9 03		lda #$03			lda #wid_Root
.a0e7	95 24		sta $24,x			sta DStack+0,x
.a0e9	20 4e b7	jsr $b74e			jsr One			; Count is 1.
.a0ec					_start:
.a0ec	b5 24		lda $24,x			lda DStack+0,x
.a0ee	99 2a 03	sta $032a,y			sta Num_orderV,y	; #ORDER is a byte variable.
.a0f1	85 14		sta $14				sta tmp1	; Save a copy for zero check and looping.
.a0f3	e8		inx				inx		; Drop the count off the data stack.
.a0f4	e8		inx				inx
.a0f5	a5 14		lda $14				lda tmp1
.a0f7	f0 0d		beq $a106			beq _done	; If zero, there are no wordlists.
.a0f9	a0 00		ldy #$00			ldy #0
.a0fb					_loop:
.a0fb	20 1f b3	jsr $b31f			jsr PopA		; The search order is a byte array
.a0fe	99 2b 03	sta $032b,y			sta Search_OrderV,y	; so only save the LSB
.a101	c8		iny				iny
.a102	c6 14		dec $14				dec tmp1
.a104	d0 f5		bne $a0fb			bne _loop
.a106					_done:
=41					CL	.var *-(WordListLink+wh_Xt)
=$a106					en = *	; remember here
>a0db	29					.byte CL	;wh_CodeLength
.a106	60		rts				rts
>a107	47 65 74 2d 4f 72 64 65		L1:	.text "Get-Order"	;  name of word as a string, ending at wh_NameLastChar
>a10f	72
>a110	09					.byte *-L1	;wh_NameLength	length of name
>a111	58 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a113	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a114	08					.byte NN	;wh_Flags	dictionary flags
=41104					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a115					Get_Order:
.a115	ac 2a 03	ldy $032a			ldy Num_OrderV	; Get #ORDER - the number of wordlists in the search order.
.a118	f0 09		beq $a123			beq _done	; If zero, there are no wordlists.
.a11a					_loop:
.a11a	b9 2a 03	lda $032a,y			lda Search_OrderV-1,y	; Put that wordlist id on the stack.
.a11d	20 35 b7	jsr $b735			jsr PushZA
.a120	88		dey				dey
.a121	d0 f7		bne $a11a			bne _loop		; See if that was the last one to process (first in the list).
.a123					_done:
.a123	ad 2a 03	lda $032a			lda Num_OrderV		; Put the number of items on the stack.
.a126	4c 35 b7	jmp $b735			jmp PushZA
=20					CL	.var *-(WordListLink+wh_Xt)
=$a129					en = *	; remember here
>a113	14					.byte CL	;wh_CodeLength
>0339					BlockReadV: .word ?	; Vector to block reading routine
>033b					BlockWriteV: .word ?	; Vector to block writing routine
>033d					BuffBlockNumV: .word ?	; Block number current in BlockBuffer
>033f					BuffStatusV: .word ?	; Status of BlockBuffer (bit 0 = used, bit 1 = dirty)
>0341					BlockBuffer: .fill 1024
.a129					BlockInit:
.a129	a9 00		lda #$00			lda #0
.a12b	8d 3f 03	sta $033f			sta BuffStatusV
.a12e	a9 8b		lda #$8b			lda #<Block_Word_Error
.a130	a0 a2		ldy #$a2			ldy #>Block_Word_Error
.a132	8d 39 03	sta $0339			sta BlockReadV+0
.a135	8c 3a 03	sty $033a			sty BlockReadV+1
.a138	8d 3b 03	sta $033b			sta BlockWriteV+0
.a13b	8c 3c 03	sty $033c			sty BlockWriteV+1
.a13e	60		rts				rts
>0741					RamDriveV: .word ?
=0					io_blk_status = 0
=0					io_blk_action = 0
=0					io_blk_number = 0
=0					io_blk_buffer = 0
>a13f	42 6c 6f 63 6b 2d 52 61		L1:	.text "Block-RamDrive-Init"	;  name of word as a string, ending at wh_NameLastChar
>a147	6d 44 72 69 76 65 2d 49 6e 69 74
>a152	13					.byte *-L1	;wh_NameLength	length of name
>a153	90 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a155	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a156	18					.byte UF+NN	;wh_Flags	dictionary flags
=41170					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a157					Block_RamDrive_Init:
.a157	a9 0a		lda #$0a			lda #10			; Calculate how many bytes are needed for numblocks blocks
.a159	20 35 b7	jsr $b735			jsr PushZA
.a15c	20 4b ca	jsr $ca4b			jsr LShift
.a15f	20 27 c9	jsr $c927			jsr Here		; ( size addr )
.a162	8d 41 07	sta $0741			sta RamDriveV+0
.a165	8c 42 07	sty $0742			sty RamDriveV+1
.a168	20 3c ce	jsr $ce3c			jsr Over
.a16b	20 03 c0	jsr $c003			jsr Allot		; Create ramdrive buffer
.a16e	20 83 ce	jsr $ce83			jsr Swap		; blank the buffer
.a171	20 79 bd	jsr $bd79			jsr Blank
.a174	a9 89		lda #$89			lda #<_read		; set block read vector
.a176	a0 a1		ldy #$a1			ldy #>_read
.a178	8d 39 03	sta $0339			sta BlockReadV+0
.a17b	8c 3a 03	sty $033a			sty BlockReadV+1
.a17e	a9 99		lda #$99			lda #<_write		; set block write vector
.a180	a0 a1		ldy #$a1			ldy #>_write
.a182	8d 3b 03	sta $033b			sta BlockWriteV+0
.a185	8c 3c 03	sty $033c			sty BlockWriteV+1
.a188	60		rts				rts
=50					CL	.var *-(WordListLink+wh_Xt)
=$a189					en = *	; remember here
>a155	32					.byte CL	;wh_CodeLength
.a189					_read:
.a189	20 a6 a1	jsr $a1a6			jsr _addr
.a18c	20 83 ce	jsr $ce83			jsr Swap
.a18f	a9 00		lda #$00			lda #0
.a191	a0 04		ldy #$04			ldy #>1024
.a193	20 f3 b6	jsr $b6f3			jsr PushYA
.a196	4c 92 ac	jmp $ac92			jmp Move
.a199					_write:
.a199	20 a6 a1	jsr $a1a6			jsr _addr
.a19c	a9 00		lda #$00			lda #0
.a19e	a0 04		ldy #$04			ldy #>1024
.a1a0	20 f3 b6	jsr $b6f3			jsr PushYA
.a1a3	4c 92 ac	jmp $ac92			jmp Move
.a1a6					_addr:
.a1a6	a9 0a		lda #$0a			lda #10
.a1a8	20 35 b7	jsr $b735			jsr PushZA
.a1ab	20 4b ca	jsr $ca4b			jsr LShift
.a1ae	20 c1 a1	jsr $a1c1			jsr RamDrive
.a1b1	4c af ca	jmp $caaf			jmp Plus
>a1b4	52 61 6d 44 72 69 76 65		L1:	.text "RamDrive"	;  name of word as a string, ending at wh_NameLastChar
>a1bc	08					.byte *-L1	;wh_NameLength	length of name
>a1bd	d2 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1bf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1c0	08					.byte NN	;wh_Flags	dictionary flags
=41276					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1c1	ad 41 07	lda $0741	RamDrive:	lda RamDriveV+0
.a1c4	ac 42 07	ldy $0742			ldy RamDriveV+1
.a1c7	4c f3 b6	jmp $b6f3			jmp PushYA
=9					CL	.var *-(WordListLink+wh_Xt)
=$a1ca					en = *	; remember here
>a1bf	09					.byte CL	;wh_CodeLength
>a1ca	42 75 66 66 53 74 61 74		L1:	.text "BuffStatus"	;  name of word as a string, ending at wh_NameLastChar
>a1d2	75 73
>a1d4	0a					.byte *-L1	;wh_NameLength	length of name
>a1d5	3c a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1d7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1d8	08					.byte NN	;wh_Flags	dictionary flags
=41300					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1d9	a0 03		ldy #$03	BuffStatus:	ldy #>BuffStatusV
.a1db	a9 3f		lda #$3f			lda #<BuffStatusV
.a1dd	4c f3 b6	jmp $b6f3			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a1e0					en = *	; remember here
>a1d7	07					.byte CL	;wh_CodeLength
>a1e0	42 75 66 66 42 6c 6f 63		L1:	.text "BuffBlockNum"	;  name of word as a string, ending at wh_NameLastChar
>a1e8	6b 4e 75 6d
>a1ec	0c					.byte *-L1	;wh_NameLength	length of name
>a1ed	54 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1ef	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1f0	08					.byte NN	;wh_Flags	dictionary flags
=41324					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1f1	a0 03		ldy #$03	BuffBlockNum:	ldy #>BuffBlockNumV
.a1f3	a9 3d		lda #$3d			lda #<BuffBlockNumV
.a1f5	4c f3 b6	jmp $b6f3			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a1f8					en = *	; remember here
>a1ef	07					.byte CL	;wh_CodeLength
>a1f8	42 6c 6b 42 75 66 66 65		L1:	.text "BlkBuffer"	;  name of word as a string, ending at wh_NameLastChar
>a200	72
>a201	09					.byte *-L1	;wh_NameLength	length of name
>a202	6c a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a204	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a205	08					.byte NN	;wh_Flags	dictionary flags
=41345					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a206	a0 03		ldy #$03	BlkBuffer:	ldy #>BlockBuffer
.a208	a9 41		lda #$41			lda #<BlockBuffer
.a20a	4c f3 b6	jmp $b6f3			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a20d					en = *	; remember here
>a204	07					.byte CL	;wh_CodeLength
>a20d	53 63 72			L1:	.text "Scr"	;  name of word as a string, ending at wh_NameLastChar
>a210	03					.byte *-L1	;wh_NameLength	length of name
>a211	81 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a213	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a214	08					.byte NN	;wh_Flags	dictionary flags
=41360					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a215	a0 03		ldy #$03	Scr:		ldy #>ScrV
.a217	a9 0e		lda #$0e			lda #<ScrV
.a219	4c f3 b6	jmp $b6f3			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a21c					en = *	; remember here
>a213	07					.byte CL	;wh_CodeLength
>a21c	42 6c 6b			L1:	.text "Blk"	;  name of word as a string, ending at wh_NameLastChar
>a21f	03					.byte *-L1	;wh_NameLength	length of name
>a220	90 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a222	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a223	08					.byte NN	;wh_Flags	dictionary flags
=41375					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a224	a0 03		ldy #$03	Blk:		ldy #>BlkV
.a226	a9 0c		lda #$0c			lda #<BlkV
.a228	4c f3 b6	jmp $b6f3			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a22b					en = *	; remember here
>a222	07					.byte CL	;wh_CodeLength
>a22b	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write"	;  name of word as a string, ending at wh_NameLastChar
>a233	69 74 65
>a236	0b					.byte *-L1	;wh_NameLength	length of name
>a237	9f a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a239	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a23a	08					.byte NN	;wh_Flags	dictionary flags
=41398					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a23b	6c 3b 03	jmp ($033b)	Block_Write:	jmp (BlockWriteV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-(WordListLink+wh_Xt)
=$a23e					en = *	; remember here
>a239	03					.byte CL	;wh_CodeLength
>a23e	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a246	69 74 65 2d 56 65 63 74 6f 72
>a250	12					.byte *-L1	;wh_NameLength	length of name
>a251	b6 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a253	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a254	08					.byte NN	;wh_Flags	dictionary flags
=41424					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a255					Block_Write_Vector:
.a255	a0 03		ldy #$03			ldy #>BlockWriteV
.a257	a9 3b		lda #$3b			lda #<BlockWriteV	; Get the BLOCK-WRITE-VECTOR address
.a259	4c f3 b6	jmp $b6f3			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a25c					en = *	; remember here
>a253	07					.byte CL	;wh_CodeLength
>a25c	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read"	;  name of word as a string, ending at wh_NameLastChar
>a264	61 64
>a266	0a					.byte *-L1	;wh_NameLength	length of name
>a267	d0 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a269	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a26a	08					.byte NN	;wh_Flags	dictionary flags
=41446					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a26b	6c 39 03	jmp ($0339)	Block_Read:	jmp (BlockReadV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-(WordListLink+wh_Xt)
=$a26e					en = *	; remember here
>a269	03					.byte CL	;wh_CodeLength
>a26e	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a276	61 64 2d 56 65 63 74 6f 72
>a27f	11					.byte *-L1	;wh_NameLength	length of name
>a280	e6 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a282	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a283	08					.byte NN	;wh_Flags	dictionary flags
=41471					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a284					Block_Read_Vector:
.a284	a0 03		ldy #$03			ldy #>BlockReadV
.a286	a9 39		lda #$39			lda #<BlockReadV	; Get the BLOCK-READ-VECTOR address
.a288	4c f3 b6	jmp $b6f3			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a28b					en = *	; remember here
>a282	07					.byte CL	;wh_CodeLength
.a28b					Block_Word_Error:
.a28b	a9 67		lda #$67			lda #$100+err_BlockWordsNotSet
.a28d	20 c4 b3	jsr $b3c4			jsr ThrowA
>a290	53 61 76 65 2d 42 75 66		L1:	.text "Save-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a298	66 65 72 73
>a29c	0c					.byte *-L1	;wh_NameLength	length of name
>a29d	ff a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a29f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a2a0	00					.byte 0	;wh_Flags	dictionary flags
=41500					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2a1					Save_Buffers:
.a2a1	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a2a4	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a2a6	d0 11		bne $a2b9			bne _done	; Either not used or not dirty = done!
.a2a8	20 06 a2	jsr $a206			jsr BlkBuffer
.a2ab	20 f1 a1	jsr $a1f1			jsr BuffBlockNum
.a2ae	20 cf cd	jsr $cdcf			jsr Fetch
.a2b1	20 3b a2	jsr $a23b			jsr Block_Write
.a2b4	a9 01		lda #$01			lda #1
.a2b6	8d 3f 03	sta $033f			sta BuffStatusV+0
.a2b9					_done:
=24					CL	.var *-(WordListLink+wh_Xt)
=$a2b9					en = *	; remember here
>a29f	18					.byte CL	;wh_CodeLength
.a2b9	60		rts				rts
>a2ba	42 6c 6f 63 6b			L1:	.text "Block"	;  name of word as a string, ending at wh_NameLastChar
>a2bf	05					.byte *-L1	;wh_NameLength	length of name
>a2c0	1c a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a2c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a2c3	00					.byte 0	;wh_Flags	dictionary flags
=41535					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2c4					Block:
.a2c4	ad 3d 03	lda $033d			lda BuffBlockNumV+0	; check the LSB
.a2c7	d5 24		cmp $24,x			cmp DStack+0,x
.a2c9	d0 0e		bne $a2d9			bne _not_in_buffer
.a2cb	ad 3e 03	lda $033e			lda BuffBlockNumV+1	; check the MSB
.a2ce	d5 25		cmp $25,x			cmp DStack+1,x
.a2d0	d0 07		bne $a2d9			bne _not_in_buffer
.a2d2	ad 3f 03	lda $033f			lda BuffStatusV+0
.a2d5	29 01		and #$01			and #1		; Check the in-use flag (bit 0)
.a2d7	d0 2d		bne $a306			bne _done	; It's already in the buffer and in use.
.a2d9					_not_in_buffer:
.a2d9	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a2dc	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a2de	d0 0c		bne $a2ec			bne _buffer_available ; Unused or not dirty = available
.a2e0	20 06 a2	jsr $a206			jsr BlkBuffer
.a2e3	20 f1 a1	jsr $a1f1			jsr BuffBlockNum
.a2e6	20 cf cd	jsr $cdcf			jsr Fetch
.a2e9	20 3b a2	jsr $a23b			jsr Block_Write
.a2ec					_buffer_available:
.a2ec	b5 24		lda $24,x			lda DStack+0,x
.a2ee	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a2f1	b5 25		lda $25,x			lda DStack+1,x
.a2f3	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a2f6	20 06 a2	jsr $a206			jsr BlkBuffer
.a2f9	20 83 ce	jsr $ce83			jsr Swap
.a2fc	20 6b a2	jsr $a26b			jsr Block_Read
.a2ff	a9 01		lda #$01			lda #1
.a301	8d 3f 03	sta $033f			sta BuffStatusV+0
.a304	ca		dex				dex
.a305	ca		dex				dex
.a306					_done:
.a306	a9 41		lda #$41			lda #<BlockBuffer
.a308	95 24		sta $24,x			sta DStack+0,x
.a30a	a9 03		lda #$03			lda #>BlockBuffer
.a30c	95 25		sta $25,x			sta DStack+1,x
=74					CL	.var *-(WordListLink+wh_Xt)
=$a30e					en = *	; remember here
>a2c2	4a					.byte CL	;wh_CodeLength
.a30e	60		rts				rts
>a30f	55 70 64 61 74 65		L1:	.text "Update"	;  name of word as a string, ending at wh_NameLastChar
>a315	06					.byte *-L1	;wh_NameLength	length of name
>a316	3f a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a318	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a319	00					.byte 0	;wh_Flags	dictionary flags
=41621					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a31a					Update:
.a31a	ad 3f 03	lda $033f			lda BuffStatusV+0
.a31d	09 02		ora #$02			ora #2		; Turn on dirty flag (bit 2)
.a31f	8d 3f 03	sta $033f			sta BuffStatusV+0
=8					CL	.var *-(WordListLink+wh_Xt)
=$a322					en = *	; remember here
>a318	08					.byte CL	;wh_CodeLength
.a322	60		rts				rts
>a323	42 75 66 66 65 72		L1:	.text "Buffer"	;  name of word as a string, ending at wh_NameLastChar
>a329	06					.byte *-L1	;wh_NameLength	length of name
>a32a	95 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a32c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a32d	08					.byte NN	;wh_Flags	dictionary flags
=41641					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a32e					Buffer:
.a32e	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a331	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a333	d0 0c		bne $a341			bne _buffer_available ; Unused or not dirty = available
.a335	20 06 a2	jsr $a206			jsr BlkBuffer
.a338	20 f1 a1	jsr $a1f1			jsr BuffBlockNum
.a33b	20 cf cd	jsr $cdcf			jsr Fetch
.a33e	20 3b a2	jsr $a23b			jsr Block_Write
.a341					_buffer_available:
.a341	b5 24		lda $24,x			lda DStack+0,x
.a343	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a346	b5 25		lda $25,x			lda DStack+1,x
.a348	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a34b	a9 01		lda #$01			lda #1
.a34d	8d 3f 03	sta $033f			sta BuffStatusV+0
.a350					_done:
.a350	a9 41		lda #$41			lda #<BlockBuffer
.a352	95 24		sta $24,x			sta DStack+0,x
.a354	a9 03		lda #$03			lda #>BlockBuffer
.a356	95 25		sta $25,x			sta DStack+1,x
=42					CL	.var *-(WordListLink+wh_Xt)
=$a358					en = *	; remember here
>a32c	2a					.byte CL	;wh_CodeLength
.a358	60		rts				rts
>a359	45 6d 70 74 79 2d 42 75		L1:	.text "Empty-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a361	66 66 65 72 73
>a366	0d					.byte *-L1	;wh_NameLength	length of name
>a367	a9 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a369	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a36a	08					.byte NN	;wh_Flags	dictionary flags
=41702					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a36b	a9 00		lda #$00	Empty_Buffers:	lda #0		; Set the buffer status to empty.
.a36d	8d 3f 03	sta $033f			sta BuffStatusV+0 ; Only LSB is used.
=5					CL	.var *-(WordListLink+wh_Xt)
=$a370					en = *	; remember here
>a369	05					.byte CL	;wh_CodeLength
.a370	60		rts				rts
>a371	46 6c 75 73 68			L1:	.text "Flush"	;  name of word as a string, ending at wh_NameLastChar
>a376	05					.byte *-L1	;wh_NameLength	length of name
>a377	e6 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a379	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a37a	08					.byte NN	;wh_Flags	dictionary flags
=41718					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a37b	20 a1 a2	jsr $a2a1	Flush:		jsr Save_Buffers
.a37e	4c 6b a3	jmp $a36b			jmp Empty_Buffers
=6					CL	.var *-(WordListLink+wh_Xt)
=$a381					en = *	; remember here
>a379	06					.byte CL	;wh_CodeLength
>a381	4c 6f 61 64			L1:	.text "Load"	;  name of word as a string, ending at wh_NameLastChar
>a385	04					.byte *-L1	;wh_NameLength	length of name
>a386	f6 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a388	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a389	10					.byte UF	;wh_Flags	dictionary flags
=41733					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a38a					Load:
.a38a	20 65 b3	jsr $b365			jsr underflow_1
.a38d	ad 0d 03	lda $030d			lda BlkV+1	; Save the current value of BLK on the return stack.
.a390	48		pha				pha
.a391	ad 0c 03	lda $030c			lda BlkV+0
.a394	48		pha				pha
.a395	b5 24		lda $24,x			lda DStack+0,x		; Set BLK to the given block/screen number.
.a397	8d 0c 03	sta $030c			sta BlkV+0
.a39a	b5 25		lda $25,x			lda DStack+1,x
.a39c	8d 0d 03	sta $030d			sta BlkV+1
.a39f	20 c4 a2	jsr $a2c4			jsr Block		; Load that block into a buffer
.a3a2	a9 00		lda #$00			lda #<1024		; screen length.
.a3a4	a0 04		ldy #$04			ldy #>1024
.a3a6	20 f3 b6	jsr $b6f3			jsr PushYA
.a3a9	20 2a af	jsr $af2a			jsr load_evaluate
.a3ac	68		pla				pla
.a3ad	ad 0c 03	lda $030c			lda BlkV+0
.a3b0	68		pla				pla
.a3b1	8d 0d 03	sta $030d			sta BlkV+1
.a3b4	0d 0c 03	ora $030c			ora BlkV+0
.a3b7	f0 0e		beq $a3c7			beq _done
.a3b9	ad 0c 03	lda $030c			lda BlkV+0
.a3bc	ac 0d 03	ldy $030d			ldy BlkV+1
.a3bf	20 f3 b6	jsr $b6f3			jsr PushYA
.a3c2	20 c4 a2	jsr $a2c4			jsr Block
.a3c5	e8		inx				inx		; Drop the buffer address.
.a3c6	e8		inx				inx
.a3c7					_done:
=61					CL	.var *-(WordListLink+wh_Xt)
=$a3c7					en = *	; remember here
>a388	3d					.byte CL	;wh_CodeLength
.a3c7	60		rts				rts
>a3c8	54 68 72 75			L1:	.text "Thru"	;  name of word as a string, ending at wh_NameLastChar
>a3cc	04					.byte *-L1	;wh_NameLength	length of name
>a3cd	05 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3cf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3d0	18					.byte UF+NN	;wh_Flags	dictionary flags
=41804					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3d1					Thru:
.a3d1	20 7a b3	jsr $b37a			jsr underflow_2
.a3d4	20 ea cd	jsr $cdea			jsr To_R
.a3d7					_loop:
.a3d7	b5 25		lda $25,x			lda DStack+1,x		; copy to return stack
.a3d9	48		pha				pha
.a3da	b5 24		lda $24,x			lda DStack+0,x
.a3dc	48		pha				pha
.a3dd	20 8a a3	jsr $a38a			jsr Load		; Load this screen.
.a3e0	20 09 ce	jsr $ce09			jsr R_From		; Get the screen # we just loaded.
.a3e3	20 5b c9	jsr $c95b			jsr One_plus		; increment
.a3e6	86 14		stx $14				stx tmp1
.a3e8	ba		tsx				tsx
.a3e9	8a		txa				txa
.a3ea	a8		tay				tay
.a3eb	a6 14		ldx $14				ldx tmp1
.a3ed	b9 01 01	lda $0101,y			lda RStack+1,y
.a3f0	d5 24		cmp $24,x			cmp DStack+0,x
.a3f2	b9 02 01	lda $0102,y			lda RStack+2,y
.a3f5	f5 25		sbc $25,x			sbc DStack+1,x
.a3f7	b0 de		bcs $a3d7			bcs _loop
.a3f9	e8		inx				inx			; Drop index
.a3fa	e8		inx				inx
.a3fb	68		pla				pla			; RDrop limit
.a3fc	68		pla				pla
=44					CL	.var *-(WordListLink+wh_Xt)
=$a3fd					en = *	; remember here
>a3cf	2c					.byte CL	;wh_CodeLength
.a3fd	60		rts				rts
>a3fe	4c 69 73 74			L1:	.text "List"	;  name of word as a string, ending at wh_NameLastChar
>a402	04					.byte *-L1	;wh_NameLength	length of name
>a403	4c a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a405	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a406	08					.byte NN	;wh_Flags	dictionary flags
=41858					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a407	20 3b b3	jsr $b33b	List:		jsr PopYA	; Save the screen number
.a40a	8d 0e 03	sta $030e			sta ScrV+0
.a40d	8c 0f 03	sty $030f			sty ScrV+1
.a410	4c fc d8	jmp $d8fc			jmp Editor_l
=12					CL	.var *-(WordListLink+wh_Xt)
=$a413					en = *	; remember here
>a405	0c					.byte CL	;wh_CodeLength
>a413	44 65 66 65 72			L1:	.text "Defer"	;  name of word as a string, ending at wh_NameLastChar
>a418	05					.byte *-L1	;wh_NameLength	length of name
>a419	82 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a41b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a41c	08					.byte NN	;wh_Flags	dictionary flags
=41880					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a41d					Defer:
.a41d	20 5d c0	jsr $c05d			jsr Header_Comma	; compile word header
.a420	a9 2a		lda #$2a			lda #<_undefined	; compile "jmp _undefined"
.a422	a0 a4		ldy #$a4			ldy #>_undefined
.a424	20 5a cc	jsr $cc5a			jsr Jmp_Comma_YA
.a427	4c 48 bb	jmp $bb48			jmp adjust_z	; adjust header to correct length
=13					CL	.var *-(WordListLink+wh_Xt)
=$a42a					en = *	; remember here
>a41b	0d					.byte CL	;wh_CodeLength
.a42a					_undefined:
.a42a	a9 6a		lda #$6a			lda #$100+err_Defer	; throw exception
.a42c	4c c4 b3	jmp $b3c4			jmp ThrowA
>a42f	44 65 66 65 72 40		L1:	.text "Defer@"	;  name of word as a string, ending at wh_NameLastChar
>a435	06					.byte *-L1	;wh_NameLength	length of name
>a436	98 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a438	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a439	08					.byte NN	;wh_Flags	dictionary flags
=41909					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a43a					Defer_Fetch:
.a43a	20 5b c9	jsr $c95b			jsr One_plus	; step over JMP opcode to operand
.a43d	4c cf cd	jmp $cdcf			jmp Fetch	; get JMP operand, return
=6					CL	.var *-(WordListLink+wh_Xt)
=$a440					en = *	; remember here
>a438	06					.byte CL	;wh_CodeLength
>a440	44 65 66 65 72 21		L1:	.text "Defer!"	;  name of word as a string, ending at wh_NameLastChar
>a446	06					.byte *-L1	;wh_NameLength	length of name
>a447	b5 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a449	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a44a	08					.byte NN	;wh_Flags	dictionary flags
=41926					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a44b					Defer_Store:
.a44b	20 5b c9	jsr $c95b			jsr One_plus	; step over JMP opcode to operand
.a44e	4c b2 cd	jmp $cdb2			jmp Store	; set JMP operand, return
=6					CL	.var *-(WordListLink+wh_Xt)
=$a451					en = *	; remember here
>a449	06					.byte CL	;wh_CodeLength
>a451	49 73				L1:	.text "Is"	;  name of word as a string, ending at wh_NameLastChar
>a453	02					.byte *-L1	;wh_NameLength	length of name
>a454	c6 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a456	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a457	0c					.byte IM+NN	;wh_Flags	dictionary flags
=41939					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a458					Is:
.a458	a5 0a		lda $0a				lda state		; Check STATE
.a45a	f0 0a		beq $a466			beq _interpreting
.a45c					_compiling:
.a45c	20 bf bb	jsr $bbbf			jsr Bracket_Tick	; compile the xt of the next word as a literal.
.a45f	a0 a4		ldy #$a4			ldy #>Defer_Store	; Postpone DEFER! by compiling a JSR to it.
.a461	a9 4b		lda #$4b			lda #<Defer_Store
.a463	4c 43 cc	jmp $cc43			jmp Jsr_Comma_YA
.a466					_interpreting:
.a466	20 ab bb	jsr $bbab			jsr Tick
.a469	4c 4b a4	jmp $a44b			jmp Defer_Store
=20					CL	.var *-(WordListLink+wh_Xt)
=$a46c					en = *	; remember here
>a456	14					.byte CL	;wh_CodeLength
>a46c	41 63 74 69 6f 6e 2d 4f		L1:	.text "Action-Of"	;  name of word as a string, ending at wh_NameLastChar
>a474	66
>a475	09					.byte *-L1	;wh_NameLength	length of name
>a476	d3 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a478	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a479	0c					.byte IM+NN	;wh_Flags	dictionary flags
=41973					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a47a					Action_Of:
.a47a	a5 0a		lda $0a				lda state		; Check STATE
.a47c	f0 0a		beq $a488			beq _interpreting
.a47e					_compiling:
.a47e	20 bf bb	jsr $bbbf			jsr Bracket_Tick	; compile the xt of the next word as a literal.
.a481	a0 a4		ldy #$a4			ldy #>Defer_Fetch	; Postpone DEFER@ by compiling a JSR to it.
.a483	a9 3a		lda #$3a			lda #<Defer_Fetch
.a485	4c 43 cc	jmp $cc43			jmp Jsr_Comma_YA
.a488					_interpreting:
.a488	20 ab bb	jsr $bbab			jsr Tick
.a48b	4c 3a a4	jmp $a43a			jmp Defer_Fetch
=20					CL	.var *-(WordListLink+wh_Xt)
=$a48e					en = *	; remember here
>a478	14					.byte CL	;wh_CodeLength
>a48e	55 73 65 72 41 64 64 72		L1:	.text "UserAddr"	;  name of word as a string, ending at wh_NameLastChar
>a496	08					.byte *-L1	;wh_NameLength	length of name
>a497	f5 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a499	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a49a	08					.byte NN	;wh_Flags	dictionary flags
=42006					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a49b	a0 02		ldy #$02	UserAddr:	ldy #>User0
.a49d	a9 ff		lda #$ff			lda #<User0
.a49f	4c f3 b6	jmp $b6f3			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a4a2					en = *	; remember here
>a499	07					.byte CL	;wh_CodeLength
>a4a2	42 75 66 66 65 72 3a		L1:	.text "Buffer:"	;  name of word as a string, ending at wh_NameLastChar
>a4a9	07					.byte *-L1	;wh_NameLength	length of name
>a4aa	16 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4ac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4ad	08					.byte NN	;wh_Flags	dictionary flags
=42025					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4ae	20 e4 c0	jsr $c0e4	Buffer_Colon:	jsr Create
.a4b1	4c 03 c0	jmp $c003			jmp Allot
=6					CL	.var *-(WordListLink+wh_Xt)
=$a4b4					en = *	; remember here
>a4ac	06					.byte CL	;wh_CodeLength
>a4b4	43 61 73 65			L1:	.text "Case"	;  name of word as a string, ending at wh_NameLastChar
>a4b8	04					.byte *-L1	;wh_NameLength	length of name
>a4b9	29 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4bc	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42040					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4bd					Case:
.a4bd	4c 44 b7	jmp $b744			jmp Zero	; init jmp fixup chain
=3					CL	.var *-(WordListLink+wh_Xt)
=$a4c0					en = *	; remember here
>a4bb	03					.byte CL	;wh_CodeLength
>a4c0	45 6e 64 43 61 73 65		L1:	.text "EndCase"	;  name of word as a string, ending at wh_NameLastChar
>a4c7	07					.byte *-L1	;wh_NameLength	length of name
>a4c8	38 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4ca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4cb	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42055					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4cc					EndCase:
.a4cc	20 32 cc	jsr $cc32			jsr Drop_Comma
.a4cf					_loop:
.a4cf	b5 25		lda $25,x			lda DStack+1,x	; while addr fixup entries left
.a4d1	f0 06		beq $a4d9			beq _done
.a4d3	20 56 a5	jsr $a556			jsr Then	;   fixup another one
.a4d6	4c cf a4	jmp $a4cf			jmp _loop
.a4d9					_done:
.a4d9	e8		inx				inx		; Drop the 0
.a4da	e8		inx				inx
=15					CL	.var *-(WordListLink+wh_Xt)
=$a4db					en = *	; remember here
>a4ca	0f					.byte CL	;wh_CodeLength
.a4db	60		rts				rts
>a4dc	4f 66				L1:	.text "Of"	;  name of word as a string, ending at wh_NameLastChar
>a4de	02					.byte *-L1	;wh_NameLength	length of name
>a4df	47 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4e2	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42078					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4e3					Of:
.a4e3	a0 a4		ldy #$a4			ldy #>_runtime		; Check if value is equal to this case.
.a4e5	a9 f8		lda #$f8			lda #<_runtime
.a4e7	20 43 cc	jsr $cc43			jsr Jsr_Comma_YA
.a4ea	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a4ec	20 04 cc	jsr $cc04			jsr C_Comma_A
.a4ef	20 27 c9	jsr $c927			jsr Here		; Put the origination address on the stack for else/then
.a4f2	20 44 b7	jsr $b744			jsr Zero
.a4f5	4c 1b cc	jmp $cc1b			jmp Comma
=21					CL	.var *-(WordListLink+wh_Xt)
=$a4f8					en = *	; remember here
>a4e1	15					.byte CL	;wh_CodeLength
.a4f8					_runtime:
.a4f8	b5 24		lda $24,x			lda DStack+0,x	; compare x1 with x2
.a4fa	d5 26		cmp $26,x			cmp DStack+2,x
.a4fc	d0 0a		bne $a508			bne _NotEq
.a4fe	b5 25		lda $25,x			lda DStack+1,x
.a500	d5 27		cmp $27,x			cmp DStack+3,x
.a502	d0 04		bne $a508			bne _NotEq
.a504	e8		inx				inx		; Drop x2
.a505	e8		inx				inx
.a506	d0 35		bne $a53d			bne zbranch_run2 ; Drop x1 & return to after the jmp abs
.a508	e8		inx		_NotEq:		inx		; Drop x2
.a509	e8		inx				inx
.a50a	60		rts				rts		; return to the jmp abs to next test
>a50b	45 6e 64 4f 66			L1:	.text "EndOf"	;  name of word as a string, ending at wh_NameLastChar
>a510	05					.byte *-L1	;wh_NameLength	length of name
>a511	5e a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a513	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a514	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42128					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a515					EndOf:
.a515	4c 68 a5	jmp $a568			jmp Else
=3					CL	.var *-(WordListLink+wh_Xt)
=$a518					en = *	; remember here
>a513	03					.byte CL	;wh_CodeLength
>a518	49 66				L1:	.text "If"	;  name of word as a string, ending at wh_NameLastChar
>a51a	02					.byte *-L1	;wh_NameLength	length of name
>a51b	90 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a51d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a51e	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42138					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a51f					If:
.a51f	20 30 a5	jsr $a530	If3:		jsr zbranch_jsr_comma	; Compile a 0BRANCH
.a522					zbranch_jmp0_comma:
.a522	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a524	20 04 cc	jsr $cc04			jsr C_Comma_A
.a527	20 27 c9	jsr $c927			jsr Here		; save ptr to address for else/then
.a52a	a9 00		lda #$00			lda #0			; Stuff zero in for the branch address right now.
.a52c	a8		tay				tay			; THEN or ELSE will fix it later.
.a52d	4c 1e cc	jmp $cc1e			jmp Comma_YA
=17					CL	.var *-(WordListLink+wh_Xt)
=$a530					en = *	; remember here
>a51d	11					.byte CL	;wh_CodeLength
=$cc57					zbranch_jmp_comma = Jmp_Comma		; compile jmp abs
.a530					zbranch_jsr_comma:
.a530	a0 a5		ldy #$a5			ldy #>_runtime
.a532	a9 37		lda #$37			lda #<_runtime
.a534	4c 43 cc	jmp $cc43			jmp Jsr_Comma_YA
.a537					_runtime:
.a537	b5 24		lda $24,x			lda DStack+0,x		;flag is false?
.a539	15 25		ora $25,x			ora DStack+1,x
.a53b	f0 0d		beq $a54a			beq zbranch_run_done
.a53d	18		clc		zbranch_run2:	clc			; move RTS addr over the next jmp abs.
.a53e	68		pla				pla
.a53f	69 03		adc #$03			adc #3
.a541	90 06		bcc $a549			bcc +
.a543	a8		tay				tay
.a544	68		pla				pla
.a545	69 00		adc #$00			adc #0
.a547	48		pha				pha
.a548	98		tya				tya
.a549	48		pha		+		pha
.a54a					zbranch_run_done:
.a54a	e8		inx				inx			; Drop f
.a54b	e8		inx				inx
.a54c	60		rts				rts
>a54d	54 68 65 6e			L1:	.text "Then"	;  name of word as a string, ending at wh_NameLastChar
>a551	04					.byte *-L1	;wh_NameLength	length of name
>a552	9a a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a554	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a555	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42193					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a556					Then:
.a556	20 27 c9	jsr $c927			jsr Here
.a559	20 83 ce	jsr $ce83			jsr Swap
.a55c	4c b2 cd	jmp $cdb2			jmp Store
=9					CL	.var *-(WordListLink+wh_Xt)
=$a55f					en = *	; remember here
>a554	09					.byte CL	;wh_CodeLength
>a55f	45 6c 73 65			L1:	.text "Else"	;  name of word as a string, ending at wh_NameLastChar
>a563	04					.byte *-L1	;wh_NameLength	length of name
>a564	d1 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a566	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a567	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42211					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a568					Else:
.a568	20 22 a5	jsr $a522			jsr zbranch_jmp0_comma	; compile jmp 0, push addr of addr
.a56b	20 27 c9	jsr $c927			jsr Here
.a56e	20 69 cd	jsr $cd69			jsr Rot
.a571	4c b2 cd	jmp $cdb2			jmp Store
=12					CL	.var *-(WordListLink+wh_Xt)
=$a574					en = *	; remember here
>a566	0c					.byte CL	;wh_CodeLength
>a574	42 65 67 69 6e			L1:	.text "Begin"	;  name of word as a string, ending at wh_NameLastChar
>a579	05					.byte *-L1	;wh_NameLength	length of name
>a57a	e3 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a57c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a57d	0d					.byte NN+CO+IM	;wh_Flags	dictionary flags
=42233					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a57e	20 27 c9	jsr $c927	Begin:		jsr Here	; remember the loop starting location
.a581	a9 7e		lda #$7e			lda #<Begin	; pairing marker
.a583	4c 35 b7	jmp $b735			jmp PushZA
=8					CL	.var *-(WordListLink+wh_Xt)
=$a586					en = *	; remember here
>a57c	08					.byte CL	;wh_CodeLength
>a586	41 67 61 69 6e			L1:	.text "Again"	;  name of word as a string, ending at wh_NameLastChar
>a58b	05					.byte *-L1	;wh_NameLength	length of name
>a58c	f9 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a58e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a58f	1d					.byte NN+CO+IM+UF	;wh_Flags	dictionary flags
=42251					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a590	20 7a b3	jsr $b37a	Again:		jsr underflow_2
.a593	a9 7e		lda #$7e			lda #<Begin	; check pairing
.a595	20 2b b2	jsr $b22b			jsr QPairCtlA
.a598	4c 57 cc	jmp $cc57			jmp Jmp_Comma	; Compile a jmp abs.
=11					CL	.var *-(WordListLink+wh_Xt)
=$a59b					en = *	; remember here
>a58e	0b					.byte CL	;wh_CodeLength
>a59b	55 6e 74 69 6c			L1:	.text "Until"	;  name of word as a string, ending at wh_NameLastChar
>a5a0	05					.byte *-L1	;wh_NameLength	length of name
>a5a1	0b a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5a3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5a4	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42272					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5a5	a9 7e		lda #$7e	Until:		lda #<Begin		; check pairing
.a5a7	20 2b b2	jsr $b22b			jsr QPairCtlA
.a5aa	4c e3 a5	jmp $a5e3			jmp ZBranch_Comma	; The address to loop back to is on the stack.
=8					CL	.var *-(WordListLink+wh_Xt)
=$a5ad					en = *	; remember here
>a5a3	08					.byte CL	;wh_CodeLength
>a5ad	57 68 69 6c 65			L1:	.text "While"	;  name of word as a string, ending at wh_NameLastChar
>a5b2	05					.byte *-L1	;wh_NameLength	length of name
>a5b3	20 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5b5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5b6	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42290					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5b7	a9 7e		lda #$7e	While:		lda #<Begin	; check pairing
.a5b9	20 2b b2	jsr $b22b			jsr QPairCtlA
.a5bc	20 1f a5	jsr $a51f			jsr If3		; Compile a 0branch & jmp, push addr of addr
.a5bf	20 83 ce	jsr $ce83			jsr Swap	; Swap the two addresses on the stack.
.a5c2	a9 7e		lda #$7e			lda #<Begin	; pairing marker
.a5c4	4c 35 b7	jmp $b735			jmp PushZA
=16					CL	.var *-(WordListLink+wh_Xt)
=$a5c7					en = *	; remember here
>a5b5	10					.byte CL	;wh_CodeLength
>a5c7	52 65 70 65 61 74		L1:	.text "Repeat"	;  name of word as a string, ending at wh_NameLastChar
>a5cd	06					.byte *-L1	;wh_NameLength	length of name
>a5ce	32 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5d0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5d1	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42317					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5d2	a9 7e		lda #$7e	Repeat:		lda #<Begin	; check pairing
.a5d4	20 2b b2	jsr $b22b			jsr QPairCtlA
.a5d7	20 57 cc	jsr $cc57			jsr Jmp_Comma	; compile the jmp back
.a5da	20 27 c9	jsr $c927			jsr Here	; patch the WHILE jmp operand
.a5dd	20 83 ce	jsr $ce83			jsr Swap
.a5e0	4c b2 cd	jmp $cdb2			jmp Store
=17					CL	.var *-(WordListLink+wh_Xt)
=$a5e3					en = *	; remember here
>a5d0	11					.byte CL	;wh_CodeLength
.a5e3					ZBranch_Comma:
.a5e3	a9 e8		lda #$e8			lda #$e8		; compile inx; inx
.a5e5	a8		tay				tay
.a5e6	20 1e cc	jsr $cc1e			jsr Comma_YA
.a5e9	a9 b5		lda #$b5			lda #$b5		; compile lda DStack-2,x
.a5eb	a0 22		ldy #$22			ldy #DStack-2
.a5ed	20 1e cc	jsr $cc1e			jsr Comma_YA
.a5f0	a9 15		lda #$15			lda #$15		; compile ora DStack-1,x
.a5f2	a0 23		ldy #$23			ldy #DStack-1
.a5f4	20 1e cc	jsr $cc1e			jsr Comma_YA
.a5f7	a9 f0		lda #$f0			lda #$f0		; BEQ
.a5f9	d0 0c		bne $a607			bne Branch_Comma
>a5fb	42 72 61 6e 63 68 2c		L1:	.text "Branch,"	;  name of word as a string, ending at wh_NameLastChar
>a602	07					.byte *-L1	;wh_NameLength	length of name
>a603	4d a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a605	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a606	08					.byte NN	;wh_Flags	dictionary flags
=42370					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a607					Branch_Comma:
.a607	48		pha				pha			; save branch opcode
.a608	38		sec				sec			; AY= displacement+2
.a609	b5 24		lda $24,x			lda DStack+0,x
.a60b	e5 00		sbc $00				sbc cp+0
.a60d	a8		tay				tay
.a60e	b5 25		lda $25,x			lda DStack+1,x
.a610	e5 01		sbc $01				sbc cp+1
.a612	c9 ff		cmp #$ff			cmp #$ff		; offset maybe in range?
.a614	f0 0b		beq $a621			beq _rev
.a616	68		pla		_2byte:		pla			; restore branch opcode
.a617	49 20		eor #$20			eor #$20		; reverse branch sense
.a619	a0 03		ldy #$03			ldy #3			; compile Bcc *+5
.a61b	20 1e cc	jsr $cc1e			jsr Comma_YA
.a61e	4c 57 cc	jmp $cc57			jmp Jmp_Comma		; compile JMP abs
.a621	c0 82		cpy #$82	_rev:		cpy #$80+2		; offset in range?
.a623	90 f1		bcc $a616			bcc _2byte
.a625	e8		inx		_1byte:		inx			; Drop address
.a626	e8		inx				inx
.a627	88		dey				dey			; fix displacement
.a628	88		dey				dey
.a629	68		pla				pla			; restore branch opcode
.a62a	4c 1e cc	jmp $cc1e			jmp Comma_YA		; compile Bcc
>a62d	57 6f 72 64			L1:	.text "Word"	;  name of word as a string, ending at wh_NameLastChar
>a631	04					.byte *-L1	;wh_NameLength	length of name
>a632	82 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a634	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a635	18					.byte UF+NN	;wh_Flags	dictionary flags
=42417					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a636					Word:
.a636	20 65 b3	jsr $b365			jsr underflow_1
.a639	a4 08		ldy $08				ldy toin+0		; >IN
.a63b	c4 06		cpy $06		_DelimLoop:	cpy ciblen+0		; quit if end of input
.a63d	f0 09		beq $a648			beq _found_char
.a63f	b1 04		lda ($04),y			lda (cib),y
.a641	d5 24		cmp $24,x			cmp DStack+0,x		; ASCII of delimiter
.a643	d0 03		bne $a648			bne _found_char
.a645	c8		iny				iny
.a646	d0 f3		bne $a63b			bne _DelimLoop
.a648					_found_char:
.a648	84 08		sty $08				sty toin+0		; Save index of where word starts
.a64a	20 2c ba	jsr $ba2c			jsr Parse		; The real work is done by parse
.a64d	20 1f b3	jsr $b31f			jsr PopA		; pop u
.a650	85 16		sta $16				sta tmp2+0
.a652	20 46 b3	jsr $b346			jsr PopTmp1		; pop addr
.a655	20 27 c9	jsr $c927			jsr Here		; Return caddr
.a658	a5 16		lda $16				lda tmp2+0
.a65a	a0 00		ldy #$00			ldy #0			; Save length of string
.a65c	f0 03		beq $a661			beq _CopyStart
.a65e	b1 14		lda ($14),y	_CopyLoop:	lda (tmp1),y
.a660	c8		iny				iny
.a661	20 04 cc	jsr $cc04	_CopyStart:	jsr C_Comma_A
.a664	c4 16		cpy $16				cpy tmp2+0
.a666	90 f6		bcc $a65e			bcc _CopyLoop
=50					CL	.var *-(WordListLink+wh_Xt)
=$a668					en = *	; remember here
>a634	32					.byte CL	;wh_CodeLength
.a668	60		rts				rts
>a669	28				L1:	.text "("	;  name of word as a string, ending at wh_NameLastChar
>a66a	01					.byte *-L1	;wh_NameLength	length of name
>a66b	b1 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a66d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a66e	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42474					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a66f	a9 29		lda #$29	Paren:		lda #')'		; separator
.a671	20 2f ba	jsr $ba2f			jsr Parse_A		; Call parse.
.a674	4c 26 c4	jmp $c426			jmp Two_drop		; Throw away the result.
=8					CL	.var *-(WordListLink+wh_Xt)
=$a677					en = *	; remember here
>a66d	08					.byte CL	;wh_CodeLength
>a677	2e 28				L1:	.text ".("	;  name of word as a string, ending at wh_NameLastChar
>a679	02					.byte *-L1	;wh_NameLength	length of name
>a67a	ea a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a67c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a67d	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42489					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a67e	a9 29		lda #$29	Dot_paren:	lda #')'
.a680	20 2f ba	jsr $ba2f			jsr Parse_A
.a683	4c ed cc	jmp $cced			jmp Type
=8					CL	.var *-(WordListLink+wh_Xt)
=$a686					en = *	; remember here
>a67c	08					.byte CL	;wh_CodeLength
>a686	48 61 73 68			L1:	.text "Hash"	;  name of word as a string, ending at wh_NameLastChar
>a68a	04					.byte *-L1	;wh_NameLength	length of name
>a68b	f9 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a68d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a68e	08					.byte NN	;wh_Flags	dictionary flags
=42506					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a68f	20 1f b3	jsr $b31f	Hash:		jsr PopA		; save length
.a692	85 16		sta $16				sta tmp2+0
.a694	b5 24		lda $24,x			lda DStack+0,x		; copy addr
.a696	b4 25		ldy $25,x			ldy DStack+1,x
.a698	85 14		sta $14				sta tmp1+0
.a69a	84 15		sty $15				sty tmp1+1
.a69c	a9 b3		lda #$b3			lda #$b3		; init hash
.a69e	95 24		sta $24,x			sta DStack+0,x
.a6a0	95 25		sta $25,x			sta DStack+1,x
.a6a2	a0 00		ldy #$00			ldy #0			; for each char
.a6a4	f0 15		beq $a6bb			beq _next
.a6a6	b1 14		lda ($14),y	_loop:		lda (tmp1),y		;   get char
.a6a8	c9 61		cmp #$61			cmp #'a'		;   uppercase
.a6aa	90 06		bcc $a6b2			bcc _3
.a6ac	c9 7b		cmp #$7b			cmp #'z'+1
.a6ae	b0 02		bcs $a6b2			bcs _3
.a6b0	29 df		and #$df			and #$df
.a6b2	16 24		asl $24,x	_3:		asl DStack+0,x		;   add to hash
.a6b4	36 25		rol $25,x			rol DStack+1,x
.a6b6	75 24		adc $24,x			adc DStack+0,x
.a6b8	95 24		sta $24,x			sta DStack+0,x
.a6ba	c8		iny				iny
.a6bb	c4 16		cpy $16		_Next:		cpy tmp2+0
.a6bd	90 e7		bcc $a6a6			bcc _loop
=48					CL	.var *-(WordListLink+wh_Xt)
=$a6bf					en = *	; remember here
>a68d	30					.byte CL	;wh_CodeLength
.a6bf	60		rts				rts
>a6c0	45 6e 76 69 72 6f 6e 6d		L1:	.text "Environment?"	;  name of word as a string, ending at wh_NameLastChar
>a6c8	65 6e 74 3f
>a6cc	0c					.byte *-L1	;wh_NameLength	length of name
>a6cd	0a a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6cf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6d0	08					.byte NN	;wh_Flags	dictionary flags
=42572					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6d1					Environment_Q:
.a6d1	20 8f a6	jsr $a68f			jsr Hash		; ( hash )
.a6d4	a0 00		ldy #$00			ldy #0			; Y= table index
.a6d6	f0 0a		beq $a6e2			beq _entry_test
.a6d8	98		tya		_entry_next:	tya
.a6d9	c0 30		cpy #$30			cpy #_table_dbl		; if double
.a6db	90 02		bcc $a6df			bcc +
.a6dd	69 01		adc #$01			adc #6-4-1		;   skip double
.a6df	69 04		adc #$04	+		adc #4			;   skip single
.a6e1	a8		tay		_3:		tay
.a6e2	b9 16 a7	lda $a716,y	_entry_test:	lda _Table+0,y		; match?
.a6e5	f0 28		beq $a70f			beq _notfound
.a6e7	d5 24		cmp $24,x			cmp DStack+0,x
.a6e9	d0 ed		bne $a6d8			bne _entry_next
.a6eb	b9 17 a7	lda $a717,y			lda _Table+1,y
.a6ee	d5 25		cmp $25,x			cmp DStack+1,x
.a6f0	d0 e6		bne $a6d8			bne _entry_next
.a6f2	b9 18 a7	lda $a718,y			lda _Table+2,y
.a6f5	95 24		sta $24,x			sta DStack+0,x
.a6f7	b9 19 a7	lda $a719,y			lda _Table+3,y
.a6fa	95 25		sta $25,x			sta DStack+1,x
.a6fc	c0 30		cpy #$30			cpy #_table_dbl		; single or double data?
.a6fe	90 0c		bcc $a70c			bcc _single
.a700	ca		dex				dex			;  push 2nd cell
.a701	ca		dex				dex
.a702	b9 1a a7	lda $a71a,y			lda _Table+4,y
.a705	95 24		sta $24,x			sta DStack+0,x
.a707	b9 1b a7	lda $a71b,y			lda _Table+5,y
.a70a	95 25		sta $25,x			sta DStack+1,x
.a70c					_single:
.a70c	4c 13 b7	jmp $b713			jmp True		; return True
.a70f					_notfound:
.a70f	a9 00		lda #$00			lda #0			; return 0
.a711	95 24		sta $24,x			sta DStack+0,x
.a713	95 25		sta $25,x			sta DStack+1,x
.a715	60		rts				rts
=69					CL	.var *-(WordListLink+wh_Xt)
=$a716					en = *	; remember here
>a6cf	45					.byte CL	;wh_CodeLength
.a716					_Table:
>a716	5e e6 ff 7f				.word $e65e,$7fff	; "/COUNTED-STRING"
>a71a	be 79 ff 00				.word $79BE,$ff		; "/HOLD"
>a71e	b9 3c 54 00				.word $3cb9,padoffset	; "/PAD"
>a722	8b 81 08 00				.word $818b,8		; "ADDRESS-UNIT-BITS"
>a726	57 fc 00 00				.word $fc57,0		; "FLOORED"	we have symmetric)
>a72a	4f fb ff 00				.word $fb4f,$ff		; "MAX-CHAR"
>a72e	56 7f ff 7f				.word $7f56,$7fff	; "MAX-N"
>a732	5d 7f ff ff				.word $7f5d,$ffff	; "MAX-U"
>a736	38 ce 80 00				.word $ce38,$80		; "RETURN-STACK-CELLS"
>a73a	f2 c0 14 00				.word $c0f2,DStack0/2	; "STACK-CELLS"
>a73e	36 e3 09 00				.word $e336,9		; "WORDLISTS"
>a742	01 99 0a 00				.word $9901,FDim	; "FLOATING-STACK"	n	yes	   If n = zero, floating-point numbers are
=48					_table_dbl = *-_Table	; These return a double-cell number
>a746	4c 7f ff ff ff 7f			.word $7f4c,$ffff,$7fff	; "MAX-D"
>a74c	fe fe ff ff ff ff			.word $fefe,$ffff,$ffff	; "MAX-UD"
>a752	00					.byte 0		; end of list
>a753	42 65 6c 6c			L1:	.text "Bell"	;  name of word as a string, ending at wh_NameLastChar
>a757	04					.byte *-L1	;wh_NameLength	length of name
>a758	4c a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a75a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a75b	08					.byte NN	;wh_Flags	dictionary flags
=42711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a75c	a9 07		lda #$07	Bell:		lda #7		; ASCII value for BELL
.a75e	4c d3 cc	jmp $ccd3			jmp Emit_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$a761					en = *	; remember here
>a75a	05					.byte CL	;wh_CodeLength
>a761	44 75 6d 70			L1:	.text "Dump"	;  name of word as a string, ending at wh_NameLastChar
>a765	04					.byte *-L1	;wh_NameLength	length of name
>a766	d7 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a768	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a769	18					.byte UF+NN	;wh_Flags	dictionary flags
=42725					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a76a					Dump:
.a76a	20 7a b3	jsr $b37a			jsr underflow_2
.a76d	ca		dex				dex			; alloc work area
.a76e	ca		dex				dex
.a76f					_row:
.a76f	20 7d aa	jsr $aa7d			jsr CR
.a772	b5 29		lda $29,x			lda DStack+5,x		; print address number
.a774	20 f3 a7	jsr $a7f3			jsr C_Dot_Hex_A
.a777	b5 28		lda $28,x			lda DStack+4,x
.a779	20 f3 a7	jsr $a7f3			jsr C_Dot_Hex_A
.a77c	20 e0 cc	jsr $cce0			jsr Space
.a77f	20 e0 cc	jsr $cce0			jsr Space
.a782	a9 00		lda #$00			lda #0
.a784	95 24		sta $24,x			sta DStack+0,x
.a786					_loop:
.a786	b5 26		lda $26,x			lda DStack+2,x
.a788	15 27		ora $27,x			ora DStack+3,x
.a78a	f0 36		beq $a7c2			beq _all_printed
.a78c	a1 28		lda ($28,x)			lda (DStack+4,x)
.a78e	20 f3 a7	jsr $a7f3			jsr C_Dot_Hex_A
.a791	20 e0 cc	jsr $cce0			jsr Space
.a794	a1 28		lda ($28,x)			lda (DStack+4,x)
.a796	20 1a a8	jsr $a81a			jsr is_printable
.a799	b0 02		bcs $a79d			bcs _printable
.a79b	a9 2e		lda #$2e			lda #'.'		 ; Print dot if not printable
.a79d					_printable:
.a79d	b4 24		ldy $24,x			ldy DStack+0,x
.a79f	91 00		sta ($00),y			sta (cp),y
.a7a1	c0 07		cpy #$07			cpy #7
.a7a3	d0 03		bne $a7a8			bne +
.a7a5	20 e0 cc	jsr $cce0			jsr Space
.a7a8					+
.a7a8	f6 28		inc $28,x			inc DStack+4,x
.a7aa	d0 02		bne $a7ae			bne +
.a7ac	f6 29		inc $29,x			inc DStack+5,x
.a7ae					+
.a7ae	20 41 c9	jsr $c941			jsr NOS_One_Minus	; loop counter
.a7b1	f6 24		inc $24,x			inc DStack+0,x
.a7b3	b5 24		lda $24,x			lda DStack+0,x
.a7b5	c9 10		cmp #$10			cmp #16
.a7b7	90 cd		bcc $a786			bcc _loop		; next byte
.a7b9	20 e0 cc	jsr $cce0			jsr Space
.a7bc	20 d1 a7	jsr $a7d1			jsr dump_print_ascii
.a7bf	4c 6f a7	jmp $a76f			jmp _row		; new row
.a7c2					_all_printed:
.a7c2	b5 24		lda $24,x			lda DStack+0,x
.a7c4	f0 06		beq $a7cc			beq _done
.a7c6	20 e0 cc	jsr $cce0			jsr Space
.a7c9	20 d1 a7	jsr $a7d1			jsr dump_print_ascii
.a7cc					_done:
.a7cc	e8		inx				inx			; drop work area
.a7cd	e8		inx				inx
.a7ce	4c 26 c4	jmp $c426			jmp Two_drop		; one byte less than 4x INX
=103					CL	.var *-(WordListLink+wh_Xt)
=$a7d1					en = *	; remember here
>a768	67					.byte CL	;wh_CodeLength
.a7d1					dump_print_ascii:
.a7d1	a0 00		ldy #$00			ldy #0
.a7d3					_loop:
.a7d3	b1 00		lda ($00),y			lda (cp),y
.a7d5	20 d3 cc	jsr $ccd3			jsr Emit_A
.a7d8	c8		iny				iny
.a7d9	c0 08		cpy #$08			cpy #8
.a7db	d0 03		bne $a7e0			bne +
.a7dd	20 e0 cc	jsr $cce0			jsr Space
.a7e0					+
.a7e0	98		tya				tya
.a7e1	d5 24		cmp $24,x			cmp DStack+0,x
.a7e3	90 ee		bcc $a7d3			bcc _loop
.a7e5	60		rts				rts
>a7e6	43 2e 48 65 78			L1:	.text "C.Hex"	;  name of word as a string, ending at wh_NameLastChar
>a7eb	05					.byte *-L1	;wh_NameLength	length of name
>a7ec	e5 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a7ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a7ef	08					.byte NN	;wh_Flags	dictionary flags
=42859					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a7f0	20 1f b3	jsr $b31f	C_Dot_Hex:	jsr PopA
.a7f3					C_Dot_Hex_A:
.a7f3	48		pha		                pha
.a7f4	4a		lsr a				lsr		; convert high nibble first
.a7f5	4a		lsr a				lsr
.a7f6	4a		lsr a				lsr
.a7f7	4a		lsr a				lsr
.a7f8	20 fc a7	jsr $a7fc			jsr _nibble_to_ascii
.a7fb	68		pla				pla
.a7fc					_nibble_to_ascii:
.a7fc	29 0f		and #$0f			and #$0F	; only use lower nibble
.a7fe	c9 0a		cmp #$0a			cmp #9+1
.a800	90 02		bcc $a804			bcc +
.a802	69 06		adc #$06			adc #6
.a804	69 30		adc #$30	+		adc #'0'
.a806	4c d3 cc	jmp $ccd3			jmp Emit_A
>a809	2e 48 65 78			L1:	.text ".Hex"	;  name of word as a string, ending at wh_NameLastChar
>a80d	04					.byte *-L1	;wh_NameLength	length of name
>a80e	6b a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a810	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a811	08					.byte NN	;wh_Flags	dictionary flags
=42893					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a812	b5 25		lda $25,x	Dot_Hex:	lda DStack+1,x	; do hi byte
.a814	20 f3 a7	jsr $a7f3			jsr C_Dot_Hex_A
.a817	4c f0 a7	jmp $a7f0			jmp C_Dot_Hex	; do lo byte
.a81a					is_printable:
.a81a	c9 20		cmp #$20	                cmp #AscSP              ; $20
.a81c	90 07		bcc $a825	                bcc _done
.a81e	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.a820	b0 02		bcs $a824	                bcs _failed
.a822	38		sec		                sec
.a823	60		rts		                rts
.a824	18		clc		_failed:	clc
.a825	60		rts		_done:		rts
>a826	2e 53				L1:	.text ".S"	;  name of word as a string, ending at wh_NameLastChar
>a828	02					.byte *-L1	;wh_NameLength	length of name
>a829	8d a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a82b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a82c	08					.byte NN	;wh_Flags	dictionary flags
=42920					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a82d					Dot_s:
.a82d	a9 3c		lda #$3c			lda #'<'
.a82f	20 d3 cc	jsr $ccd3			jsr Emit_A
.a832	20 63 c1	jsr $c163			jsr Depth	; ( -- u )
.a835	20 2e cb	jsr $cb2e			jsr print_u
.a838	a9 3e		lda #$3e			lda #'>'
.a83a	20 d3 cc	jsr $ccd3			jsr Emit_A
.a83d	20 e0 cc	jsr $cce0			jsr Space
.a840	a0 28		ldy #$28			ldy #DStack0		; for each cell on the stack
.a842	88		dey		_loop:		dey
.a843	88		dey				dey
.a844	86 14		stx $14				stx tmp1
.a846	c4 14		cpy $14				cpy tmp1
.a848	90 15		bcc $a85f			bcc _done
.a84a	98		tya				tya			; save index
.a84b	48		pha				pha
.a84c	ca		dex				dex			; push stack[index]
.a84d	ca		dex				dex
.a84e	b9 24 00	lda $0024,y			lda DStack+0,y
.a851	95 24		sta $24,x			sta DStack+0,x
.a853	b9 25 00	lda $0025,y			lda DStack+1,y
.a856	95 25		sta $25,x			sta DStack+1,x
.a858	20 e1 ca	jsr $cae1			jsr Dot
.a85b	68		pla				pla			; restore index
.a85c	a8		tay				tay
.a85d	d0 e3		bne $a842			bne _loop
.a85f					_done:
=50					CL	.var *-(WordListLink+wh_Xt)
=$a85f					en = *	; remember here
>a82b	32					.byte CL	;wh_CodeLength
.a85f	60		rts				rts
>a860	43 6f 6d 70 61 72 65		L1:	.text "Compare"	;  name of word as a string, ending at wh_NameLastChar
>a867	07					.byte *-L1	;wh_NameLength	length of name
>a868	a8 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a86a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a86b	18					.byte UF+NN	;wh_Flags	dictionary flags
=42983					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a86c					Compare:
.a86c	20 84 b3	jsr $b384			jsr underflow_4
.a86f	b5 24		lda $24,x			lda DStack+0,x		; tmp3+1= u2.lo
.a871	85 19		sta $19				sta tmp3+1
.a873	b5 26		lda $26,x			lda DStack+2,x		; tmp2= addr2
.a875	b4 27		ldy $27,x			ldy DStack+3,x
.a877	85 16		sta $16				sta tmp2+0
.a879	84 17		sty $17				sty tmp2+1
.a87b	b5 28		lda $28,x			lda DStack+4,x		; tmp3+0= u1.lo
.a87d	85 18		sta $18				sta tmp3+0
.a87f	b5 2a		lda $2a,x			lda DStack+6,x		; tmp1= addr1
.a881	b4 2b		ldy $2b,x			ldy DStack+7,x
.a883	85 14		sta $14				sta tmp1+0
.a885	84 15		sty $15				sty tmp1+1
.a887	a0 00		ldy #$00			ldy #0		; for each char
.a889					_loop:
.a889	c4 18		cpy $18				cpy tmp3+0	; string1 empty?
.a88b	f0 13		beq $a8a0			beq _str1
.a88d					_L1:
.a88d	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a88f	f0 27		beq $a8b8			beq _str2
.a891					_L2:
.a891	b1 14		lda ($14),y			lda (tmp1),y	; Are they different?
.a893	d1 16		cmp ($16),y			cmp (tmp2),y
.a895	d0 19		bne $a8b0			bne _neq
.a897	c8		iny				iny		; to next char
.a898	d0 ef		bne $a889			bne _loop
.a89a	e6 15		inc $15				inc tmp1+1	; to next page
.a89c	e6 17		inc $17				inc tmp2+1
.a89e	d0 e9		bne $a889			bne _loop
.a8a0	d6 29		dec $29,x	_str1:		dec DStack+5,x	; string1 really empty?
.a8a2	10 e9		bpl $a88d			bpl _L1
.a8a4	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a8a6	d0 0a		bne $a8b2			bne _less
.a8a8	b5 25		lda $25,x			lda DStack+1,x
.a8aa	d0 06		bne $a8b2			bne _less
.a8ac	a9 00		lda #$00	_equal:		lda #0		; Return 0
.a8ae	f0 0e		beq $a8be			beq _gt2
.a8b0	b0 0a		bcs $a8bc	_neq:		bcs _greater
.a8b2	a9 ff		lda #$ff	_less:		lda #$FF	; Return -1
.a8b4	95 2a		sta $2a,x			sta DStack+6,x
.a8b6	d0 0a		bne $a8c2			bne _done
.a8b8	d6 25		dec $25,x	_str2:		dec DStack+1,x	; is string2 empty?
.a8ba	10 d5		bpl $a891			bpl _L2
.a8bc	a9 01		lda #$01	_greater:	lda #1		; Return 1
.a8be	95 2a		sta $2a,x	_gt2:		sta DStack+6,x
.a8c0	a9 00		lda #$00			lda #0
.a8c2	95 2b		sta $2b,x	_done:		sta DStack+7,x
.a8c4	8a		txa				txa		; Remove all but the result from the stack.
.a8c5	18		clc				clc
.a8c6	69 06		adc #$06			adc #6
.a8c8	aa		tax				tax
=93					CL	.var *-(WordListLink+wh_Xt)
=$a8c9					en = *	; remember here
>a86a	5d					.byte CL	;wh_CodeLength
.a8c9	60		rts				rts
>a8ca	53 65 61 72 63 68		L1:	.text "Search"	;  name of word as a string, ending at wh_NameLastChar
>a8d0	06					.byte *-L1	;wh_NameLength	length of name
>a8d1	e7 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a8d3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a8d4	18					.byte UF+NN	;wh_Flags	dictionary flags
=43088					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a8d5					Search:
.a8d5	20 84 b3	jsr $b384			jsr underflow_4
.a8d8	b5 24		lda $24,x			lda DStack+0,x
.a8da	15 25		ora $25,x			ora DStack+1,x
.a8dc	d0 09		bne $a8e7			bne _start_search
.a8de	e8		inx				inx		; Drop u2
.a8df	e8		inx				inx
.a8e0	a9 ff		lda #$ff			lda #$FF	; overwrite addr2 with a true flag
.a8e2	95 24		sta $24,x			sta DStack+0,x
.a8e4	95 25		sta $25,x			sta DStack+1,x
.a8e6	60		rts				rts
.a8e7					_start_search:
.a8e7	20 44 b7	jsr $b744			jsr Zero
.a8ea					_search_loop:
.a8ea	18		clc				clc
.a8eb	b5 24		lda $24,x			lda DStack+0,x
.a8ed	75 26		adc $26,x			adc DStack+2,x
.a8ef	85 14		sta $14				sta tmp1+0
.a8f1	b5 25		lda $25,x			lda DStack+1,x
.a8f3	75 27		adc $27,x			adc DStack+3,x
.a8f5	85 15		sta $15				sta tmp1+1
.a8f7	d5 2b		cmp $2b,x			cmp DStack+7,x
.a8f9	90 13		bcc $a90e			bcc _init_comparison ; Obviously less
.a8fb	d0 06		bne $a903			bne _not_found
.a8fd	b5 2a		lda $2a,x			lda DStack+6,x
.a8ff	c5 14		cmp $14				cmp tmp1
.a901	b0 0b		bcs $a90e			bcs _init_comparison
.a903					_not_found:
.a903	e8		inx				inx		; Remove offset
.a904	e8		inx				inx
.a905	e8		inx				inx		; Remove u2
.a906	e8		inx				inx
.a907	a9 00		lda #$00			lda #0
.a909	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a false flag
.a90b	95 25		sta $25,x			sta DStack+1,x
.a90d	60		rts				rts
.a90e					_init_comparison:
.a90e	18		clc				clc
.a90f	b5 2c		lda $2c,x			lda DStack+8,x
.a911	75 24		adc $24,x			adc DStack+0,x
.a913	85 14		sta $14				sta tmp1
.a915	b5 2d		lda $2d,x			lda DStack+9,x
.a917	75 25		adc $25,x			adc DStack+1,x
.a919	85 15		sta $15				sta tmp1+1
.a91b	b5 28		lda $28,x			lda DStack+4,x
.a91d	85 16		sta $16				sta tmp2
.a91f	b5 29		lda $29,x			lda DStack+5,x
.a921	85 17		sta $17				sta tmp2+1
.a923	b5 26		lda $26,x			lda DStack+2,x
.a925	85 18		sta $18				sta tmp3+0
.a927	b5 27		lda $27,x			lda DStack+3,x
.a929	85 19		sta $19				sta tmp3+1
.a92b					_comparison_loop:
.a92b	a0 00		ldy #$00			ldy #0
.a92d	b1 14		lda ($14),y			lda (tmp1),y
.a92f	d1 16		cmp ($16),y			cmp (tmp2),y
.a931	f0 06		beq $a939			beq _letters_match
.a933	20 5b c9	jsr $c95b			jsr One_plus
.a936	4c ea a8	jmp $a8ea			jmp _search_loop
.a939					_letters_match:
.a939	e6 14		inc $14				inc tmp1
.a93b	d0 02		bne $a93f			bne +
.a93d	e6 15		inc $15				inc tmp1+1
.a93f					+
.a93f	e6 16		inc $16				inc tmp2
.a941	d0 02		bne $a945			bne +
.a943	e6 17		inc $17				inc tmp2+1
.a945					+
.a945	a5 18		lda $18				lda tmp3
.a947	d0 02		bne $a94b			bne +
.a949	c6 19		dec $19				dec tmp3+1
.a94b					+
.a94b	c6 18		dec $18				dec tmp3
.a94d	a5 18		lda $18				lda tmp3
.a94f	05 19		ora $19				ora tmp3+1
.a951	d0 d8		bne $a92b			bne _comparison_loop ; Check the next letter
.a953	18		clc				clc
.a954	b5 24		lda $24,x			lda DStack+0,x
.a956	75 2c		adc $2c,x			adc DStack+8,x
.a958	95 2c		sta $2c,x			sta DStack+8,x
.a95a	b5 25		lda $25,x			lda DStack+1,x
.a95c	75 2d		adc $2d,x			adc DStack+9,x
.a95e	95 2d		sta $2d,x			sta DStack+9,x
.a960	38		sec				sec
.a961	b5 2a		lda $2a,x			lda DStack+6,x
.a963	f5 24		sbc $24,x			sbc DStack+0,x
.a965	95 2a		sta $2a,x			sta DStack+6,x
.a967	b5 2b		lda $2b,x			lda DStack+7,x
.a969	f5 25		sbc $25,x			sbc DStack+1,x
.a96b	95 2b		sta $2b,x			sta DStack+7,x
.a96d	e8		inx				inx		; drop offset
.a96e	e8		inx				inx
.a96f	e8		inx				inx		; drop u2
.a970	e8		inx				inx
.a971	a9 ff		lda #$ff			lda #$FF
.a973	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a true flag.
.a975	95 25		sta $25,x			sta DStack+1,x
=162					CL	.var *-(WordListLink+wh_Xt)
=$a977					en = *	; remember here
>a8d3	a2					.byte CL	;wh_CodeLength
.a977	60		rts				rts
>a978	4d 61 72 6b 65 72		L1:	.text "Marker"	;  name of word as a string, ending at wh_NameLastChar
>a97e	06					.byte *-L1	;wh_NameLength	length of name
>a97f	50 a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a981	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a982	0c					.byte IM+NN	;wh_Flags	dictionary flags
=43262					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a983					Marker:
.a983	20 27 c9	jsr $c927			jsr Here		; Save original CP, which
.a986	20 6b c0	jsr $c06b			jsr Header_Build	; compile a word header, but don't link into wordlist
.a989	a0 a9		ldy #$a9			ldy #>_runtime		; compile JSR _runtime
.a98b	a9 a3		lda #$a3			lda #<_runtime
.a98d	20 43 cc	jsr $cc43			jsr Jsr_Comma_YA
.a990	20 1b cc	jsr $cc1b			jsr Comma		; Append original CP
.a993	a0 00		ldy #$00			ldy #0			; Start at CURRENT
.a995	b9 10 03	lda $0310,y	_loop:		lda CurrentV,y
.a998	20 04 cc	jsr $cc04			jsr C_Comma_A
.a99b	c8		iny				iny
.a99c	c0 24		cpy #$24			cpy #MarkEnd-CurrentV	; One past the end of the search order.
.a99e	90 f5		bcc $a995			bcc _loop
.a9a0	4c 60 c0	jmp $c060			jmp Header_Link		; link built header into current dictionary
=32					CL	.var *-(WordListLink+wh_Xt)
=$a9a3					en = *	; remember here
>a981	20					.byte CL	;wh_CodeLength
.a9a3					_runtime:
.a9a3	68		pla				pla		; Pop the RTS address off the stack
.a9a4	85 14		sta $14				sta tmp1+0
.a9a6	68		pla				pla
.a9a7	85 15		sta $15				sta tmp1+1
.a9a9	a0 01		ldy #$01			ldy #1		; start just aftet JSR _runtime
.a9ab	b1 14		lda ($14),y			lda (tmp1),y	; CP was stored first
.a9ad	85 00		sta $00				sta cp+0
.a9af	c8		iny				iny
.a9b0	b1 14		lda ($14),y			lda (tmp1),y
.a9b2	85 01		sta $01				sta cp+1
.a9b4	c8		iny				iny
.a9b5					_rloop:
.a9b5	b1 14		lda ($14),y			lda (tmp1),y
.a9b7	99 0d 03	sta $030d,y			sta CurrentV-2-1,y
.a9ba	c8		iny				iny
.a9bb	c0 27		cpy #$27			cpy #MarkEnd-CurrentV+2+1 ; One past the end of the search order.
.a9bd	90 f6		bcc $a9b5			bcc _rloop
.a9bf	60		rts				rts
>a9c0	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
>a9c5	05					.byte *-L1	;wh_NameLength	length of name
>a9c6	fe a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9c8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9c9	08					.byte NN	;wh_Flags	dictionary flags
=43333					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9ca					Words:
.a9ca	a9 ff		lda #$ff			lda #$ff
.a9cc	20 35 b7	jsr $b735			jsr PushZA		; Alloc space for line size & wordlist #
.a9cf	ca		dex				dex			; Alloc space for a nt
.a9d0	ca		dex				dex
.a9d1					_wordlist_next:
.a9d1	20 7d aa	jsr $aa7d			jsr CR			; start wordlist on new line
.a9d4	f6 26		inc $26,x			inc DStack+2,x		; step to next search wordlist
.a9d6	b4 26		ldy $26,x			ldy DStack+2,x		; Y= wordlist index
.a9d8	cc 2a 03	cpy $032a			cpy Num_OrderV
.a9db	b0 44		bcs $aa21			bcs _wordslist_done	; ran out of search wordlist entries?
.a9dd	b9 2b 03	lda $032b,y			lda Search_OrderV,y	; A= SEARCH-ORDER[Y]	Get the current wordlist id
.a9e0	0a		asl a				asl			; TOS= WORDLISTS[A]
.a9e1	a8		tay				tay
.a9e2	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.a9e5	95 24		sta $24,x			sta DStack+0,x
.a9e7	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.a9ea	95 25		sta $25,x			sta DStack+1,x
.a9ec	f0 e3		beq $a9d1			beq _wordlist_next	; end of list?
.a9ee					_word_loop:
.a9ee	20 65 ce	jsr $ce65			jsr Dup			; ( wordlist# nt nt )
.a9f1	20 33 bd	jsr $bd33			jsr Name_To_String	; ( wordlist# nt addr u )
.a9f4	b5 2b		lda $2b,x			lda DStack+7,x
.a9f6	38		sec				sec			; don't forget the space between words
.a9f7	75 24		adc $24,x			adc DStack+0,x
.a9f9	c9 4e		cmp #$4e			cmp #MAX_LINE_LENGTH-1
.a9fb	90 05		bcc $aa02			bcc +
.a9fd	20 7d aa	jsr $aa7d			jsr CR
.aa00	b5 24		lda $24,x			lda DStack+0,x		; After going to next line, start
.aa02	95 2b		sta $2b,x	+		sta DStack+7,x
.aa04	20 ed cc	jsr $cced			jsr Type		; ( wordlist# nt )
.aa07	20 e0 cc	jsr $cce0			jsr Space
.aa0a	b5 24		lda $24,x			lda DStack+0,x
.aa0c	85 14		sta $14				sta tmp1+0
.aa0e	b5 25		lda $25,x			lda DStack+1,x
.aa10	85 15		sta $15				sta tmp1+1
.aa12	a0 81		ldy #$81			ldy #wh_WordListLink	; get next word nt
.aa14	b1 14		lda ($14),y			lda (tmp1),y
.aa16	95 24		sta $24,x			sta DStack+0,x
.aa18	c8		iny				iny
.aa19	b1 14		lda ($14),y			lda (tmp1),y
.aa1b	95 25		sta $25,x			sta DStack+1,x
.aa1d	d0 cf		bne $a9ee			bne _word_loop		; end of list?
.aa1f	f0 b0		beq $a9d1			beq _wordlist_next
.aa21					_wordslist_done:
.aa21	4c 26 c4	jmp $c426			jmp Two_Drop
=90					CL	.var *-(WordListLink+wh_Xt)
=$aa24					en = *	; remember here
>a9c8	5a					.byte CL	;wh_CodeLength
>aa24	57 6f 72 64 53 69 7a 65		L1:	.text "WordSize"	;  name of word as a string, ending at wh_NameLastChar
>aa2c	08					.byte *-L1	;wh_NameLength	length of name
>aa2d	45 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa2f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa30	08					.byte NN	;wh_Flags	dictionary flags
=43436					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa31	20 46 b3	jsr $b346	WordSize:	jsr PopTmp1
.aa34	a0 83		ldy #$83			ldy #Wh_CodeLength
.aa36	b1 14		lda ($14),y			lda (tmp1),y
.aa38	4c 35 b7	jmp $b735			jmp PushZA
=10					CL	.var *-(WordListLink+wh_Xt)
=$aa3b					en = *	; remember here
>aa2f	0a					.byte CL	;wh_CodeLength
>aa3b	41 6c 69 67 6e 65 64		L1:	.text "Aligned"	;  name of word as a string, ending at wh_NameLastChar
>aa42	07					.byte *-L1	;wh_NameLength	length of name
>aa43	ac a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa45	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa46	00					.byte 0	;wh_Flags	dictionary flags
=43458					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa47					Aligned:
=0					CL	.var *-(WordListLink+wh_Xt)
=$aa47					en = *	; remember here
>aa45	00					.byte CL	;wh_CodeLength
.aa47	60		rts				rts
>aa48	41 6c 69 67 6e			L1:	.text "Align"	;  name of word as a string, ending at wh_NameLastChar
>aa4d	05					.byte *-L1	;wh_NameLength	length of name
>aa4e	c2 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa50	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa51	00					.byte 0	;wh_Flags	dictionary flags
=43469					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa52					Align:
=0					CL	.var *-(WordListLink+wh_Xt)
=$aa52					en = *	; remember here
>aa50	00					.byte CL	;wh_CodeLength
.aa52	60		rts				rts
>aa53	4f 75 74 70 75 74		L1:	.text "Output"	;  name of word as a string, ending at wh_NameLastChar
>aa59	06					.byte *-L1	;wh_NameLength	length of name
>aa5a	cd a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa5c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa5d	08					.byte NN	;wh_Flags	dictionary flags
=43481					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa5e					xt_output:
.aa5e	a0 03		ldy #$03			ldy #>output
.aa60	a9 06		lda #$06			lda #<output
.aa62	4c f3 b6	jmp $b6f3			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$aa65					en = *	; remember here
>aa5c	07					.byte CL	;wh_CodeLength
>aa65	49 6e 70 75 74			L1:	.text "Input"	;  name of word as a string, ending at wh_NameLastChar
>aa6a	05					.byte *-L1	;wh_NameLength	length of name
>aa6b	d9 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa6d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa6e	08					.byte NN	;wh_Flags	dictionary flags
=43498					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa6f	a0 03		ldy #$03	xt_input:	ldy #>input
.aa71	a9 08		lda #$08			lda #<input
.aa73	4c f3 b6	jmp $b6f3			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$aa76					en = *	; remember here
>aa6d	07					.byte CL	;wh_CodeLength
>aa76	43 52				L1:	.text "CR"	;  name of word as a string, ending at wh_NameLastChar
>aa78	02					.byte *-L1	;wh_NameLength	length of name
>aa79	ea a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa7b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa7c	08					.byte NN	;wh_Flags	dictionary flags
=43512					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa7d					CR:
.aa7d	a9 0a		lda #$0a			lda #AscLF
.aa7f	20 d3 cc	jsr $ccd3			jsr Emit_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$aa82					en = *	; remember here
>aa7b	05					.byte CL	;wh_CodeLength
.aa82	60		rts				rts
>aa83	50 61 67 65			L1:	.text "Page"	;  name of word as a string, ending at wh_NameLastChar
>aa87	04					.byte *-L1	;wh_NameLength	length of name
>aa88	f8 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa8a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa8b	08					.byte NN	;wh_Flags	dictionary flags
=43527					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa8c	20 14 b8	jsr $b814	Page:		jsr SLiteral_Runtime
.aa8f	4c 9c aa	jmp $aa9c			  jmp +
>aa92	1b 5b 32 4a					  .text AscESC,"[2J"	; ANSI clear screen
>aa96	1b 5b 31 3b 31 48				  .text AscESC,"[1;1H"	; move cursor to top left of screen
.aa9c	4c ed cc	jmp $cced	+		jmp Type
=19					CL	.var *-(WordListLink+wh_Xt)
=$aa9f					en = *	; remember here
>aa8a	13					.byte CL	;wh_CodeLength
>aa9f	41 74 2d 58 59			L1:	.text "At-XY"	;  name of word as a string, ending at wh_NameLastChar
>aaa4	05					.byte *-L1	;wh_NameLength	length of name
>aaa5	07 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aaa7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aaa8	18					.byte UF+NN	;wh_Flags	dictionary flags
=43556					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aaa9					At_XY:
.aaa9	20 7a b3	jsr $b37a			jsr underflow_2
.aaac	ad 00 03	lda $0300			lda base	; Save the BASE
.aaaf	48		pha				pha
.aab0	20 f4 b0	jsr $b0f4			jsr Decimal	; ANSI escape code values need to be in decimal.
.aab3	a9 1b		lda #$1b			lda #AscESC
.aab5	20 d3 cc	jsr $ccd3			jsr Emit_A
.aab8	a9 5b		lda #$5b			lda #'['
.aaba	20 d3 cc	jsr $ccd3			jsr Emit_A
.aabd	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.aabf	20 2e cb	jsr $cb2e			jsr print_u
.aac2	a9 3b		lda #$3b			lda #';'
.aac4	20 d3 cc	jsr $ccd3			jsr Emit_A
.aac7	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.aac9	20 2e cb	jsr $cb2e			jsr print_u
.aacc	a9 48		lda #$48			lda #'H'
.aace	20 d3 cc	jsr $ccd3			jsr Emit_A
.aad1	68		pla				pla		; Restore the base
.aad2	8d 00 03	sta $0300			sta base
=44					CL	.var *-(WordListLink+wh_Xt)
=$aad5					en = *	; remember here
>aaa7	2c					.byte CL	;wh_CodeLength
.aad5	60		rts				rts
>aad6	50 61 64			L1:	.text "Pad"	;  name of word as a string, ending at wh_NameLastChar
>aad9	03					.byte *-L1	;wh_NameLength	length of name
>aada	24 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aadc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aadd	00					.byte 0	;wh_Flags	dictionary flags
=43609					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aade	ca		dex		Pad:		dex		; push cp+PadOffset
.aadf	ca		dex				dex
.aae0	18		clc				clc
.aae1	a5 00		lda $00				lda cp+0
.aae3	69 54		adc #$54			adc #PadOffset
.aae5	95 24		sta $24,x			sta DStack+0,x
.aae7	a5 01		lda $01				lda cp+1
.aae9	69 00		adc #$00			adc #0
.aaeb	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$aaed					en = *	; remember here
>aadc	0f					.byte CL	;wh_CodeLength
.aaed	60		rts				rts
>aaee	3c 23				L1:	.text "<#"	;  name of word as a string, ending at wh_NameLastChar
>aaf0	02					.byte *-L1	;wh_NameLength	length of name
>aaf1	59 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aaf3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aaf4	00					.byte 0	;wh_Flags	dictionary flags
=43632					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aaf5					Less_Number_Sign:
.aaf5	a9 54		lda #$54			lda #PadOffset		; init hold buffer index
.aaf7	8d 34 03	sta $0334			sta ToHold
=5					CL	.var *-(WordListLink+wh_Xt)
=$aafa					en = *	; remember here
>aaf3	05					.byte CL	;wh_CodeLength
.aafa	60		rts				rts
>aafb	23 3e				L1:	.text "#>"	;  name of word as a string, ending at wh_NameLastChar
>aafd	02					.byte *-L1	;wh_NameLength	length of name
>aafe	70 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab00	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab01	10					.byte UF	;wh_Flags	dictionary flags
=43645					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab02					Number_Sign_Greater:
.ab02	20 7a b3	jsr $b37a			jsr underflow_2		; double number
.ab05	18		clc				clc			; addr= cp + ToHold
.ab06	a5 00		lda $00				lda cp+0
.ab08	6d 34 03	adc $0334			adc ToHold
.ab0b	95 26		sta $26,x			sta DStack+2,x
.ab0d	a5 01		lda $01				lda cp+1
.ab0f	69 00		adc #$00			adc #0
.ab11	95 27		sta $27,x			sta DStack+3,x
.ab13	38		sec				sec			; u= PadOffset - ToHold
.ab14	a9 54		lda #$54			lda #PadOffset
.ab16	ed 34 03	sbc $0334			sbc ToHold
.ab19	95 24		sta $24,x			sta DStack+0,x
.ab1b	a9 00		lda #$00			lda #0
.ab1d	95 25		sta $25,x			sta DStack+1,x
=29					CL	.var *-(WordListLink+wh_Xt)
=$ab1f					en = *	; remember here
>ab00	1d					.byte CL	;wh_CodeLength
.ab1f	60		rts				rts
>ab20	48 6f 6c 64			L1:	.text "Hold"	;  name of word as a string, ending at wh_NameLastChar
>ab24	04					.byte *-L1	;wh_NameLength	length of name
>ab25	7d aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab27	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab28	00					.byte 0	;wh_Flags	dictionary flags
=43684					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab29	20 1f b3	jsr $b31f	Hold:		jsr PopA
.ab2c	ce 34 03	dec $0334	Hold_A:		dec ToHold
.ab2f	ac 34 03	ldy $0334			ldy ToHold
.ab32	91 00		sta ($00),y			sta (cp),y
=11					CL	.var *-(WordListLink+wh_Xt)
=$ab34					en = *	; remember here
>ab27	0b					.byte CL	;wh_CodeLength
.ab34	60		rts				rts
>ab35	23				L1:	.text "#"	;  name of word as a string, ending at wh_NameLastChar
>ab36	01					.byte *-L1	;wh_NameLength	length of name
>ab37	a4 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab39	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab3a	18					.byte UF+NN	;wh_Flags	dictionary flags
=43702					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab3b					Number_Sign:
.ab3b	20 7a b3	jsr $b37a			jsr underflow_2		; double number
.ab3e	a9 00		lda #$00			lda #0			;   init remainder
.ab40	18		clc				clc
.ab41	a0 21		ldy #$21			ldy #32+1		;   for each bit
.ab43					_11:
.ab43	2a		rol a				rol a			;   shift remainder
.ab44	cd 00 03	cmp $0300			cmp base		;   will it fit?
.ab47	90 03		bcc $ab4c			bcc _27
.ab49	ed 00 03	sbc $0300			sbc base
.ab4c					_27:
.ab4c	36 26		rol $26,x			rol DStack+2,x		;   shift ud
.ab4e	36 27		rol $27,x			rol DStack+3,x
.ab50	36 24		rol $24,x			rol DStack+0,x
.ab52	36 25		rol $25,x			rol DStack+1,x
.ab54	88		dey				dey
.ab55	d0 ec		bne $ab43			bne _11
.ab57	c9 0a		cmp #$0a			cmp #9+1		; alternatively this could use s_abc_upper
.ab59	90 02		bcc $ab5d			bcc +
.ab5b	69 06		adc #$06			adc #7-1
.ab5d	69 30		adc #$30	+		adc #'0'
.ab5f	d0 cb		bne $ab2c			bne Hold_A
=38					CL	.var *-(WordListLink+wh_Xt)
=$ab61					en = *	; remember here
>ab39	26					.byte CL	;wh_CodeLength
>ab61	23 53				L1:	.text "#S"	;  name of word as a string, ending at wh_NameLastChar
>ab63	02					.byte *-L1	;wh_NameLength	length of name
>ab64	b6 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab66	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab67	10					.byte UF	;wh_Flags	dictionary flags
=43747					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab68					Number_Sign_S:
.ab68					_loop:
.ab68	20 3b ab	jsr $ab3b			jsr Number_sign	; convert a single number ("#")
.ab6b	b5 24		lda $24,x			lda DStack+0,x	; stop when double-celled number in TOS is zero
.ab6d	15 25		ora $25,x			ora DStack+1,x
.ab6f	15 26		ora $26,x			ora DStack+2,x
.ab71	15 27		ora $27,x			ora DStack+3,x
.ab73	d0 f3		bne $ab68			bne _loop
=13					CL	.var *-(WordListLink+wh_Xt)
=$ab75					en = *	; remember here
>ab66	0d					.byte CL	;wh_CodeLength
.ab75	60		rts				rts
>ab76	53 69 67 6e			L1:	.text "Sign"	;  name of word as a string, ending at wh_NameLastChar
>ab7a	04					.byte *-L1	;wh_NameLength	length of name
>ab7b	e3 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab7d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab7e	08					.byte NN	;wh_Flags	dictionary flags
=43770					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab7f	20 3b b3	jsr $b33b	Sign:		jsr PopYA
.ab82	98		tya				tya		; test MSB of TOS
.ab83					Sign_P:
.ab83	30 01		bmi $ab86			bmi _minus
.ab85	60		rts				rts
.ab86	a9 2d		lda #$2d	_minus:		lda #'-'	; add minus sign
.ab88	d0 a2		bne $ab2c			bne hold_a
=11					CL	.var *-(WordListLink+wh_Xt)
=$ab8a					en = *	; remember here
>ab7d	0b					.byte CL	;wh_CodeLength
>ab8a	43 6c 65 61 76 65		L1:	.text "Cleave"	;  name of word as a string, ending at wh_NameLastChar
>ab90	06					.byte *-L1	;wh_NameLength	length of name
>ab91	fa aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab93	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab94	18					.byte UF+NN	;wh_Flags	dictionary flags
=43792					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab95					Cleave:
.ab95	20 7a b3	jsr $b37a			jsr underflow_2
.ab98	20 d3 c3	jsr $c3d3			jsr Minus_leading	; -LEADING ( addr u )
.ab9b	20 18 c3	jsr $c318			jsr Input_To_R	; save old imput state
.ab9e	b5 24		lda $24,x			lda DStack+0,x	; u is new ciblen
.aba0	85 06		sta $06				sta ciblen
.aba2	b5 25		lda $25,x			lda DStack+1,x
.aba4	85 07		sta $07				sta ciblen+1
.aba6	b5 26		lda $26,x			lda DStack+2,x	; addr is new cib
.aba8	85 04		sta $04				sta cib
.abaa	b5 27		lda $27,x			lda DStack+3,x
.abac	85 05		sta $05				sta cib+1
.abae	a9 00		lda #$00			lda #0
.abb0	85 08		sta $08				sta toin	; >IN pointer is zero
.abb2	85 09		sta $09				sta toin+1
.abb4	20 e4 b9	jsr $b9e4			jsr parse_name	; ( addr u addr-s u-s )
.abb7	b5 24		lda $24,x			lda DStack+0,x
.abb9	15 25		ora $25,x			ora DStack+1,x
.abbb	f0 23		beq $abe0			beq _done
.abbd	38		sec				sec
.abbe	b5 28		lda $28,x			lda DStack+4,x	; LSB of original u
.abc0	f5 24		sbc $24,x			sbc DStack+0,x
.abc2	95 28		sta $28,x			sta DStack+4,x
.abc4	b5 29		lda $29,x			lda DStack+5,x	; MSB of original u
.abc6	f5 25		sbc $25,x			sbc DStack+1,x
.abc8	95 29		sta $29,x			sta DStack+5,x
.abca	18		clc				clc
.abcb	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of original addr
.abcd	75 24		adc $24,x			adc DStack+0,x
.abcf	95 2a		sta $2a,x			sta DStack+6,x
.abd1	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of original addr
.abd3	75 25		adc $25,x			adc DStack+1,x
.abd5	95 2b		sta $2b,x			sta DStack+7,x
.abd7	20 38 c4	jsr $c438			jsr Two_swap		; ( addr-s u-s addr u )
.abda	20 d3 c3	jsr $c3d3			jsr Minus_leading
.abdd	20 38 c4	jsr $c438			jsr Two_swap		; ( addr u addr-s u-s )
.abe0					_done:
.abe0	20 3a c3	jsr $c33a			jsr R_To_Input
=78					CL	.var *-(WordListLink+wh_Xt)
=$abe3					en = *	; remember here
>ab93	4e					.byte CL	;wh_CodeLength
.abe3	60		rts				rts
>abe4	48 65 78 53 74 6f 72 65		L1:	.text "HexStore"	;  name of word as a string, ending at wh_NameLastChar
>abec	08					.byte *-L1	;wh_NameLength	length of name
>abed	10 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abef	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abf0	18					.byte UF+NN	;wh_Flags	dictionary flags
=43884					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abf1					Hexstore:
.abf1	20 7f b3	jsr $b37f			jsr underflow_3
.abf4	20 65 ce	jsr $ce65			jsr Dup		; Save copy of original address
.abf7	20 39 c5	jsr $c539			jsr Two_to_r		; ( addr1 u1 ) ( R: addr2 addr2 )
.abfa					_loop:
.abfa	b5 24		lda $24,x			lda DStack+0,x
.abfc	15 25		ora $25,x			ora DStack+1,x
.abfe	f0 37		beq $ac37			beq _done
.ac00	20 95 ab	jsr $ab95			jsr Cleave		; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.ac03	20 39 c5	jsr $c539			jsr Two_to_r
.ac06	20 44 b7	jsr $b744			jsr Zero
.ac09	20 44 b7	jsr $b744			jsr Zero
.ac0c	20 14 c5	jsr $c514			jsr Two_r_from	; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.ac0f	20 75 af	jsr $af75			jsr To_Number	; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.ac12	b5 24		lda $24,x			lda DStack+0,x
.ac14	15 25		ora $25,x			ora DStack+1,x
.ac16	d0 18		bne $ac30			bne _have_chars_left
.ac18	20 26 c4	jsr $c426			jsr Two_drop		; ( addr1 u1 n n ) ( R: addr2 addr2 )
.ac1b	20 69 bf	jsr $bf69			jsr D_To_S		; ( addr1 u1 n ) ( R: addr2 addr2 )
.ac1e	20 25 ce	jsr $ce25			jsr R_Fetch		; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.ac21	20 7b cc	jsr $cc7b			jsr C_Store		; ( addr1 u1 ) ( R: addr2 addr2 )
.ac24	20 09 ce	jsr $ce09			jsr R_From		; R>
.ac27	20 5b c9	jsr $c95b			jsr One_plus		; 1+
.ac2a	20 ea cd	jsr $cdea			jsr To_R		; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.ac2d	4c fa ab	jmp $abfa			jmp _loop
.ac30					_have_chars_left:
.ac30	8a		txa				txa
.ac31	18		clc				clc
.ac32	69 08		adc #$08			adc #8
.ac34	aa		tax				tax
.ac35	d0 c3		bne $abfa			bne _loop
.ac37					_done:
.ac37	e8		inx				inx
.ac38	e8		inx				inx
.ac39	e8		inx				inx
.ac3a	e8		inx				inx			; 2DROP
.ac3b	20 14 c5	jsr $c514			jsr Two_r_from		; ( addr2+n addr2 )
.ac3e	20 83 ce	jsr $ce83			jsr Swap
.ac41	4c c8 ca	jmp $cac8			jmp Minus		; ( n )
=83					CL	.var *-(WordListLink+wh_Xt)
=$ac44					en = *	; remember here
>abef	53					.byte CL	;wh_CodeLength
>ac44	57 69 74 68 69 6e		L1:	.text "Within"	;  name of word as a string, ending at wh_NameLastChar
>ac4a	06					.byte *-L1	;wh_NameLength	length of name
>ac4b	6c ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac4d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac4e	18					.byte UF+NN	;wh_Flags	dictionary flags
=43978					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac4f					Within:
.ac4f	20 7f b3	jsr $b37f			jsr underflow_3
.ac52	20 3c ce	jsr $ce3c			jsr Over
.ac55	20 c8 ca	jsr $cac8			jsr Minus
.ac58	20 ea cd	jsr $cdea			jsr To_R
.ac5b	20 c8 ca	jsr $cac8			jsr Minus
.ac5e	20 09 ce	jsr $ce09			jsr R_From
.ac61	4c 7d c7	jmp $c77d			jmp U_Less_Than
=21					CL	.var *-(WordListLink+wh_Xt)
=$ac64					en = *	; remember here
>ac4d	15					.byte CL	;wh_CodeLength
>ac64	5c				L1:	.text "\"	;  name of word as a string, ending at wh_NameLastChar
>ac65	01					.byte *-L1	;wh_NameLength	length of name
>ac66	ca ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac68	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac69	0c					.byte IM+NN	;wh_Flags	dictionary flags
=44005					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac6a					Backslash:
.ac6a	ad 0c 03	lda $030c			lda BlkV+0		; interpreting a block?
.ac6d	0d 0d 03	ora $030d			ora BlkV+1
.ac70	f0 0e		beq $ac80			beq _not_block
.ac72	a5 08		lda $08		                lda toin+0		; Move toin to next multiple of 64.
.ac74	29 c0		and #$c0	                and #$C0        	;   Clear lower bits to move to beginning of line.
.ac76	18		clc		                clc             	;   Add $40 (64 decimal) to move to next line.
.ac77	69 40		adc #$40	                adc #$40
.ac79	85 08		sta $08		                sta toin+0
.ac7b	90 0b		bcc $ac88	                bcc _rts
.ac7d	e6 09		inc $09		                inc toin+1
.ac7f	60		rts				rts
.ac80					_not_block:
.ac80	a5 06		lda $06		                lda ciblen+0
.ac82	85 08		sta $08		                sta toin+0
.ac84	a5 07		lda $07		                lda ciblen+1
.ac86	85 09		sta $09		                sta toin+1
=30					CL	.var *-(WordListLink+wh_Xt)
=$ac88					en = *	; remember here
>ac68	1e					.byte CL	;wh_CodeLength
.ac88	60		rts		_rts:		rts
>ac89	4d 6f 76 65			L1:	.text "Move"	;  name of word as a string, ending at wh_NameLastChar
>ac8d	04					.byte *-L1	;wh_NameLength	length of name
>ac8e	e5 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac90	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac91	18					.byte NN+UF	;wh_Flags	dictionary flags
=44045					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac92					Move:
.ac92	b5 27		lda $27,x			lda DStack+3,x		; MSB of addr2
.ac94	d5 29		cmp $29,x			cmp DStack+5,x		; MSB of addr1
.ac96	d0 04		bne $ac9c			bne _ne
.ac98	b5 26		lda $26,x			lda DStack+2,x		; LSB of addr2
.ac9a	d5 28		cmp $28,x			cmp DStack+4,x		; LSB of addr1
.ac9c	90 5a		bcc $acf8	_ne:		bcc CMove
.ac9e	d0 11		bne $acb1			bne CMove_up
.aca0	8a		txa		ThreeDrop:	txa		; drop three entries from Data Stack
.aca1	18		clc				clc
.aca2	69 06		adc #$06			adc #6
.aca4	aa		tax				tax
=19					CL	.var *-(WordListLink+wh_Xt)
=$aca5					en = *	; remember here
>ac90	13					.byte CL	;wh_CodeLength
.aca5	60		rts				rts
>aca6	43 4d 6f 76 65 3e		L1:	.text "CMove>"	;  name of word as a string, ending at wh_NameLastChar
>acac	06					.byte *-L1	;wh_NameLength	length of name
>acad	0d ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>acaf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acb0	18					.byte UF+NN	;wh_Flags	dictionary flags
=44076					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.acb1					CMove_up:
.acb1	20 7f b3	jsr $b37f			jsr underflow_3
.acb4	b5 26		lda $26,x			lda DStack+2,x
.acb6	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.acb8	b5 27		lda $27,x			lda DStack+3,x
.acba	18		clc				clc
.acbb	75 25		adc $25,x			adc DStack+1,x
.acbd	85 17		sta $17				sta tmp2+1	; point to last page of destination
.acbf	b5 28		lda $28,x			lda DStack+4,x
.acc1	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.acc3	b5 29		lda $29,x			lda DStack+5,x
.acc5	18		clc				clc
.acc6	75 25		adc $25,x			adc DStack+1,x
.acc8	85 15		sta $15				sta tmp1+1	; point to last page of source
.acca	f6 25		inc $25,x			inc DStack+1,x	; allows us to use bne with dec DStack+1,x below
.accc	b4 24		ldy $24,x			ldy DStack+0,x	; length of last page
.acce	f0 10		beq $ace0			beq _nopartial
.acd0					_outerloop:
.acd0	88		dey				dey
.acd1	f0 07		beq $acda			beq _finishpage
.acd3					_innerloop:
.acd3	b1 14		lda ($14),y			lda (tmp1),y
.acd5	91 16		sta ($16),y			sta (tmp2),y
.acd7	88		dey				dey
.acd8	d0 f9		bne $acd3			bne _innerloop
.acda					_finishpage:
.acda	a0 00		ldy #$00			ldy #0
.acdc	b1 14		lda ($14),y			lda (tmp1),y	; handle y = 0 separately
.acde	91 16		sta ($16),y			sta (tmp2),y
.ace0					_nopartial:
.ace0	c6 15		dec $15				dec tmp1+1	; back up to previous pages
.ace2	c6 17		dec $17				dec tmp2+1
.ace4	d6 25		dec $25,x			dec DStack+1,x
.ace6	d0 e8		bne $acd0			bne _outerloop
.ace8					_done:
.ace8	4c a0 ac	jmp $aca0			jmp ThreeDrop	; clear up the stack and leave
=58					CL	.var *-(WordListLink+wh_Xt)
=$aceb					en = *	; remember here
>acaf	3a					.byte CL	;wh_CodeLength
.aceb	4c 89 b3	jmp $b389	Throw_Stack_14: jmp Throw_Stack
>acee	43 4d 6f 76 65			L1:	.text "CMove"	;  name of word as a string, ending at wh_NameLastChar
>acf3	05					.byte *-L1	;wh_NameLength	length of name
>acf4	2c ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>acf6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acf7	18					.byte UF+NN	;wh_Flags	dictionary flags
=44147					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.acf8					CMove:
.acf8	20 7f b3	jsr $b37f			jsr underflow_3
.acfb	b5 26		lda $26,x			lda DStack+2,x
.acfd	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.acff	b5 27		lda $27,x			lda DStack+3,x
.ad01	85 17		sta $17				sta tmp2+1
.ad03	b5 28		lda $28,x			lda DStack+4,x
.ad05	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.ad07	b5 29		lda $29,x			lda DStack+5,x
.ad09	85 15		sta $15				sta tmp1+1
.ad0b	a0 00		ldy #$00			ldy #0
.ad0d	b5 25		lda $25,x			lda DStack+1,x	; number of whole pages to move
.ad0f	f0 0f		beq $ad20			beq _dopartial
.ad11					_page:
.ad11	b1 14		lda ($14),y			lda (tmp1),y
.ad13	91 16		sta ($16),y			sta (tmp2),y
.ad15	c8		iny				iny
.ad16	d0 f9		bne $ad11			bne _page
.ad18	e6 15		inc $15				inc tmp1+1
.ad1a	e6 17		inc $17				inc tmp2+1
.ad1c	d6 25		dec $25,x			dec DStack+1,x
.ad1e	d0 f1		bne $ad11			bne _page
.ad20					_dopartial:
.ad20	b5 24		lda $24,x			lda DStack+0,x	; length of last page
.ad22	f0 09		beq $ad2d			beq _done
.ad24					_partial:
.ad24	b1 14		lda ($14),y			lda (tmp1),y
.ad26	91 16		sta ($16),y			sta (tmp2),y
.ad28	c8		iny				iny
.ad29	d6 24		dec $24,x			dec DStack+0,x
.ad2b	d0 f7		bne $ad24			bne _partial
.ad2d	4c a0 ac	jmp $aca0	_done:		jmp ThreeDrop	; clear the stack
=56					CL	.var *-(WordListLink+wh_Xt)
=$ad30					en = *	; remember here
>acf6	38					.byte CL	;wh_CodeLength
>ad30	55 4d 2a			L1:	.text "UM*"	;  name of word as a string, ending at wh_NameLastChar
>ad33	03					.byte *-L1	;wh_NameLength	length of name
>ad34	73 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad36	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad37	08					.byte NN	;wh_Flags	dictionary flags
=44211					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad38					UM_Star:
.ad38	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ad3a	b0 af		bcs $aceb		bcs Throw_Stack_14
.ad3c	18		clc				clc		; tmp2= divsor-1
.ad3d	b5 24		lda $24,x			lda DStack+0,x
.ad3f	e9 00		sbc #$00			sbc #0
.ad41	85 16		sta $16				sta tmp2+0
.ad43	b5 25		lda $25,x			lda DStack+1,x
.ad45	e9 00		sbc #$00			sbc #0
.ad47	85 17		sta $17				sta tmp2+1
.ad49	90 2e		bcc $ad79			bcc _zero	; is divisor zero?
.ad4b	a9 00		lda #$00			lda #0
.ad4d	85 14		sta $14				sta tmp1
.ad4f	86 18		stx $18				stx tmp3	; tested for exit from outer loop
.ad51	ca		dex				dex
.ad52	ca		dex				dex
.ad53					_outer_loop:
.ad53	a0 08		ldy #$08			ldy #8		; counter inner loop
.ad55	56 28		lsr $28,x			lsr DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.ad57					_inner_loop:
.ad57	90 0c		bcc $ad65			bcc _no_add
.ad59	85 15		sta $15				sta tmp1+1	; save time, don't CLC
.ad5b	a5 14		lda $14				lda tmp1
.ad5d	65 16		adc $16				adc tmp2
.ad5f	85 14		sta $14				sta tmp1
.ad61	a5 15		lda $15				lda tmp1+1
.ad63	65 17		adc $17				adc tmp2+1
.ad65					_no_add:
.ad65	6a		ror a				ror
.ad66	66 14		ror $14				ror tmp1
.ad68	76 28		ror $28,x			ror DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.ad6a	88		dey				dey
.ad6b	d0 ea		bne $ad57			bne _inner_loop ; go back for one more shift?
.ad6d	e8		inx				inx
.ad6e	e4 18		cpx $18				cpx tmp3
.ad70	d0 e1		bne $ad53			bne _outer_loop ; go back for eight more shifts?
.ad72	95 25		sta $25,x			sta DStack+1,x
.ad74	a5 14		lda $14				lda tmp1
.ad76	95 24		sta $24,x			sta DStack+0,x
.ad78	60		rts				rts
.ad79	a9 00		lda #$00	_zero:		lda #0
.ad7b	95 26		sta $26,x			sta DStack+2,x
.ad7d	95 27		sta $27,x			sta DStack+3,x
.ad7f	60		rts				rts
=72					CL	.var *-(WordListLink+wh_Xt)
=$ad80					en = *	; remember here
>ad36	48					.byte CL	;wh_CodeLength
>ad80	4d 2a				L1:	.text "M*"	;  name of word as a string, ending at wh_NameLastChar
>ad82	02					.byte *-L1	;wh_NameLength	length of name
>ad83	b3 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad85	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad86	08					.byte NN	;wh_Flags	dictionary flags
=44290					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad87					M_Star:
.ad87	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ad89	b0 6d		bcs $adf8		bcs Throw_Stack_15
.ad8b	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.ad8d	55 27		eor $27,x			eor DStack+3,x	; MSB of n2
.ad8f	08		php				php
.ad90	20 98 c5	jsr $c598			jsr Abs
.ad93	20 83 ce	jsr $ce83			jsr Swap
.ad96	20 98 c5	jsr $c598			jsr Abs
.ad99	20 38 ad	jsr $ad38			jsr UM_Star		; ( d )
.ad9c	28		plp				plp			; handle the sign
.ad9d	10 03		bpl $ada2			bpl +
.ad9f	4c b0 c5	jmp $c5b0			jmp DNegate
.ada2					+
=27					CL	.var *-(WordListLink+wh_Xt)
=$ada2					en = *	; remember here
>ad85	1b					.byte CL	;wh_CodeLength
.ada2	60		rts				rts
>ada3	2a				L1:	.text "*"	;  name of word as a string, ending at wh_NameLastChar
>ada4	01					.byte *-L1	;wh_NameLength	length of name
>ada5	02 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ada7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ada8	00					.byte 0	;wh_Flags	dictionary flags
=44324					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ada9					Star:
.ada9	20 38 ad	jsr $ad38			jsr UM_Star
.adac	e8		inx				inx		; UD>U	drop hi cell
.adad	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$adae					en = *	; remember here
>ada7	05					.byte CL	;wh_CodeLength
.adae	60		rts				rts
>adaf	55 4d 2f 4d 6f 64		L1:	.text "UM/Mod"	;  name of word as a string, ending at wh_NameLastChar
>adb5	06					.byte *-L1	;wh_NameLength	length of name
>adb6	24 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>adb8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>adb9	08					.byte NN	;wh_Flags	dictionary flags
=44341					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.adba					UM_Slash_Mod:
.adba	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.adbc	b0 3a		bcs $adf8		bcs Throw_Stack_15
.adbe	b5 24		lda $24,x			lda DStack+0,x		; catch division by zero
.adc0	15 25		ora $25,x			ora DStack+1,x
.adc2	f0 2f		beq $adf3			beq _DivByZero
.adc4	a0 10		ldy #$10			ldy #16			; for 16 bits
.adc6					_loop:
.adc6	36 28		rol $28,x			rol DStack+4,x		;   rotate low cell of dividend one bit left
.adc8	36 29		rol $29,x			rol DStack+5,x
.adca	36 26		rol $26,x			rol DStack+2,x		;   rotate high cell of dividend one bit left
.adcc	36 27		rol $27,x			rol DStack+3,x
.adce	b0 0a		bcs $adda			bcs _subtract		;   overflow?
.add0	b5 26		lda $26,x			lda DStack+2,x		;   dividend.hi >= divisor?
.add2	d5 24		cmp $24,x			cmp DStack+0,x
.add4	b5 27		lda $27,x			lda DStack+3,x
.add6	f5 25		sbc $25,x			sbc DStack+1,x
.add8	90 0d		bcc $ade7			bcc _next
.adda	b5 26		lda $26,x	_subtract:	lda DStack+2,x		;   dividend.hi -= divisor
.addc	f5 24		sbc $24,x			sbc DStack+0,x
.adde	95 26		sta $26,x			sta DStack+2,x
.ade0	b5 27		lda $27,x			lda DStack+3,x
.ade2	f5 25		sbc $25,x			sbc DStack+1,x
.ade4	95 27		sta $27,x			sta DStack+3,x
.ade6	38		sec				sec			;   it always fits
.ade7	88		dey		_next:		dey			;  next
.ade8	d0 dc		bne $adc6			bne _loop
.adea	36 28		rol $28,x			rol DStack+4,x		; finish rotating quotient bit in
.adec	36 29		rol $29,x			rol DStack+5,x
.adee	e8		inx				inx			; drop divisor
.adef	e8		inx				inx
.adf0	4c 83 ce	jmp $ce83			jmp Swap
.adf3	a9 f6		lda #$f6	_DivByZero:	lda #$100+err_DivideBy0
.adf5	4c c4 b3	jmp $b3c4			jmp ThrowA
=62					CL	.var *-(WordListLink+wh_Xt)
=$adf8					en = *	; remember here
>adb8	3e					.byte CL	;wh_CodeLength
.adf8	4c 89 b3	jmp $b389	Throw_Stack_15: jmp Throw_Stack
>adfb	53 4d 2f 52 65 6d		L1:	.text "SM/Rem"	;  name of word as a string, ending at wh_NameLastChar
>ae01	06					.byte *-L1	;wh_NameLength	length of name
>ae02	35 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae04	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae05	08					.byte NN	;wh_Flags	dictionary flags
=44417					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae06					SM_Slash_Rem:
.ae06	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ae08	b0 ee		bcs $adf8		bcs Throw_Stack_15
.ae0a	b5 27		lda $27,x			lda DStack+3,x
.ae0c	08		php				php
.ae0d	55 25		eor $25,x			eor DStack+1,x
.ae0f	08		php				php
.ae10	20 98 c5	jsr $c598			jsr Abs
.ae13	e8		inx				inx		; pretend we pushed n1 to R
.ae14	e8		inx				inx
.ae15	20 cd c5	jsr $c5cd			jsr DAbs
.ae18	ca		dex				dex
.ae19	ca		dex				dex
.ae1a	20 ba ad	jsr $adba			jsr UM_Slash_Mod	; UM/MOD
.ae1d	28		plp				plp
.ae1e	10 03		bpl $ae23			bpl +
.ae20	20 7f c5	jsr $c57f			jsr Negate
.ae23					+
.ae23	28		plp				plp
.ae24	10 07		bpl $ae2d			bpl _done
.ae26	e8		inx				inx		; pretend we pushed quotient to R
.ae27	e8		inx				inx
.ae28	20 7f c5	jsr $c57f			jsr Negate
.ae2b	ca		dex				dex
.ae2c	ca		dex				dex
.ae2d					_done:
=39					CL	.var *-(WordListLink+wh_Xt)
=$ae2d					en = *	; remember here
>ae04	27					.byte CL	;wh_CodeLength
.ae2d	60		rts				rts
>ae2e	46 4d 2f 4d 6f 64		L1:	.text "FM/Mod"	;  name of word as a string, ending at wh_NameLastChar
>ae34	06					.byte *-L1	;wh_NameLength	length of name
>ae35	81 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae37	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae38	08					.byte NN	;wh_Flags	dictionary flags
=44468					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae39					FM_Slash_Mod:
.ae39	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ae3b	b0 bb		bcs $adf8		bcs Throw_Stack_15
.ae3d	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.ae3f	08		php				php		;  save sign
.ae40	10 0a		bpl $ae4c			bpl +
.ae42	20 7f c5	jsr $c57f			jsr Negate	; NEGATE
.ae45	e8		inx				inx
.ae46	e8		inx				inx
.ae47	20 b0 c5	jsr $c5b0			jsr DNegate	; DNEGATE
.ae4a	ca		dex				dex
.ae4b	ca		dex				dex
.ae4c					+
.ae4c	b5 27		lda $27,x			lda DStack+3,x	; MSB of high word of d
.ae4e	10 0d		bpl $ae5d			bpl +
.ae50	18		clc				clc
.ae51	b5 24		lda $24,x			lda DStack+0,x	; LSB of n1
.ae53	75 26		adc $26,x			adc DStack+2,x	; LSB of dh
.ae55	95 26		sta $26,x			sta DStack+2,x
.ae57	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.ae59	75 27		adc $27,x			adc DStack+3,x	; MSB of dh
.ae5b	95 27		sta $27,x			sta DStack+3,x
.ae5d					+
.ae5d	20 ba ad	jsr $adba			jsr UM_Slash_Mod	; ( d n1 -- rem n2 )
.ae60	28		plp				plp
.ae61	10 07		bpl $ae6a			bpl +
.ae63	e8		inx				inx		; pretend that we SWAP
.ae64	e8		inx				inx
.ae65	20 7f c5	jsr $c57f			jsr Negate
.ae68	ca		dex				dex
.ae69	ca		dex				dex
.ae6a					+
=49					CL	.var *-(WordListLink+wh_Xt)
=$ae6a					en = *	; remember here
>ae37	31					.byte CL	;wh_CodeLength
.ae6a	60		rts				rts
>ae6b	2f 4d 6f 64			L1:	.text "/Mod"	;  name of word as a string, ending at wh_NameLastChar
>ae6f	04					.byte *-L1	;wh_NameLength	length of name
>ae70	b4 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae72	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae73	08					.byte NN	;wh_Flags	dictionary flags
=44527					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae74	20 65 ce	jsr $ce65	Slash_Mod:	jsr Dup			; ( n1 n_div n_div )
.ae77	a0 00		ldy #$00			ldy #0			; sign extend n1
.ae79	b5 29		lda $29,x			lda DStack+5,x
.ae7b	10 01		bpl $ae7e			bpl +
.ae7d	88		dey				dey
.ae7e	94 26		sty $26,x	+		sty DStack+2,x
.ae80	94 27		sty $27,x			sty DStack+3,x		; ( d1 n_div )
.ae82	4c 06 ae	jmp $ae06			jmp SM_Slash_Rem	; SM/REM
=17					CL	.var *-(WordListLink+wh_Xt)
=$ae85					en = *	; remember here
>ae72	11					.byte CL	;wh_CodeLength
>ae85	2f				L1:	.text "/"	;  name of word as a string, ending at wh_NameLastChar
>ae86	01					.byte *-L1	;wh_NameLength	length of name
>ae87	ef ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae89	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae8a	08					.byte NN	;wh_Flags	dictionary flags
=44550					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae8b	20 74 ae	jsr $ae74	Slash:		jsr Slash_Mod
.ae8e	4c 80 c8	jmp $c880			jmp Nip		; Nip remainder
=6					CL	.var *-(WordListLink+wh_Xt)
=$ae91					en = *	; remember here
>ae89	06					.byte CL	;wh_CodeLength
>ae91	4d 6f 64			L1:	.text "Mod"	;  name of word as a string, ending at wh_NameLastChar
>ae94	03					.byte *-L1	;wh_NameLength	length of name
>ae95	06 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae97	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae98	00					.byte 0	;wh_Flags	dictionary flags
=44564					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae99	20 74 ae	jsr $ae74	Mod:		jsr Slash_Mod
.ae9c	e8		inx				inx		; Drop quotient
.ae9d	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$ae9e					en = *	; remember here
>ae97	05					.byte CL	;wh_CodeLength
.ae9e	60		rts				rts
>ae9f	2a 2f 4d 6f 64			L1:	.text "*/Mod"	;  name of word as a string, ending at wh_NameLastChar
>aea4	05					.byte *-L1	;wh_NameLength	length of name
>aea5	14 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aea7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aea8	18					.byte UF+NN	;wh_Flags	dictionary flags
=44580					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aea9					Star_Slash_Mod:
.aea9	20 7f b3	jsr $b37f			jsr underflow_3
.aeac	20 ea cd	jsr $cdea			jsr To_R
.aeaf	20 87 ad	jsr $ad87			jsr M_Star
.aeb2	20 09 ce	jsr $ce09			jsr R_From
.aeb5	4c 06 ae	jmp $ae06			jmp SM_Slash_Rem
=15					CL	.var *-(WordListLink+wh_Xt)
=$aeb8					en = *	; remember here
>aea7	0f					.byte CL	;wh_CodeLength
>aeb8	2a 2f				L1:	.text "*/"	;  name of word as a string, ending at wh_NameLastChar
>aeba	02					.byte *-L1	;wh_NameLength	length of name
>aebb	24 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aebd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aebe	08					.byte NN	;wh_Flags	dictionary flags
=44602					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aebf					Star_Slash:
.aebf	20 a9 ae	jsr $aea9			jsr Star_Slash_Mod
.aec2	4c 80 c8	jmp $c880			jmp Nip			; mod
=6					CL	.var *-(WordListLink+wh_Xt)
=$aec5					en = *	; remember here
>aebd	06					.byte CL	;wh_CodeLength
>aec5	4d 2a 2f			L1:	.text "M*/"	;  name of word as a string, ending at wh_NameLastChar
>aec8	03					.byte *-L1	;wh_NameLength	length of name
>aec9	3a ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aecb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aecc	08					.byte NN	;wh_Flags	dictionary flags
=44616					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aecd					m_star_slash:
.aecd	20 84 b3	jsr $b384	                jsr underflow_4
.aed0	b5 24		lda $24,x			lda DStack+0,x		; calc result sign
.aed2	55 26		eor $26,x			eor DStack+2,x
.aed4	55 28		eor $28,x			eor DStack+4,x
.aed6	08		php				php
.aed7	20 98 c5	jsr $c598	                jsr Abs			; Abs
.aeda	20 ea cd	jsr $cdea	                jsr To_R		; >R		( d1 n1 ) ( R: sign abs(n2) )
.aedd	20 98 c5	jsr $c598	                jsr Abs			; Abs
.aee0	20 ea cd	jsr $cdea	                jsr To_R		; >R		( d1 ) ( R: sign abs(n2) abs(n1) )
.aee3	20 cd c5	jsr $c5cd	                jsr DAbs		; DAbs		( abs(d1) ) ( R: sign abs(n2) abs(n1) )
.aee6	20 83 ce	jsr $ce83	                jsr Swap		; Swap
.aee9	20 25 ce	jsr $ce25	                jsr R_Fetch		; R@
.aeec	20 38 ad	jsr $ad38	                jsr UM_Star		; UM*
.aeef	20 69 cd	jsr $cd69	                jsr Rot			; Rot
.aef2	20 09 ce	jsr $ce09	                jsr R_From		; R>
.aef5	20 38 ad	jsr $ad38	                jsr UM_Star		; UM*
.aef8	20 69 cd	jsr $cd69	                jsr Rot			; Rot
.aefb	20 74 c9	jsr $c974	                jsr UMPlus		; 0 D+
.aefe	20 25 ce	jsr $ce25	                jsr R_Fetch		; R@
.af01	20 ba ad	jsr $adba	                jsr UM_Slash_Mod	; UM/Mod
.af04	20 8f cd	jsr $cd8f	                jsr Not_Rot		; Rot Rot
.af07	20 09 ce	jsr $ce09	                jsr R_From		; R>
.af0a	20 ba ad	jsr $adba	                jsr UM_Slash_Mod	; UM/Mod
.af0d	20 80 c8	jsr $c880	                jsr Nip			; Swap Drop
.af10	20 83 ce	jsr $ce83	                jsr Swap		; Swap
.af13	28		plp				plp
.af14	10 03		bpl $af19			bpl _rts		; ... 0< if ...
.af16	4c b0 c5	jmp $c5b0	                jmp DNegate
.af19	60		rts		_rts:		rts
=77					CL	.var *-(WordListLink+wh_Xt)
=$af1a					en = *	; remember here
>aecb	4d					.byte CL	;wh_CodeLength
>af1a	45 76 61 6c 75 61 74 65		L1:	.text "Evaluate"	;  name of word as a string, ending at wh_NameLastChar
>af22	08					.byte *-L1	;wh_NameLength	length of name
>af23	48 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af25	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af26	08					.byte NN	;wh_Flags	dictionary flags
=44706					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af27					Evaluate:
.af27	18		clc				clc			; Clear the flag to zero BLK.
.af28	90 01		bcc $af2b			bcc evaluate_got_work
.af2a					load_evaluate:
.af2a	38		sec				sec			; Set a flag to not zero BLK
.af2b					evaluate_got_work:
.af2b	ad 0d 03	lda $030d			lda BlkV+1	; Save the current value of BLK on the return stack.
.af2e	48		pha				pha
.af2f	ad 0c 03	lda $030c			lda BlkV+0
.af32	48		pha				pha
.af33	b0 08		bcs $af3d			bcs +		; See if we should zero BLK.
.af35	a9 00		lda #$00			lda #0		; Set BLK to zero.
.af37	8d 0c 03	sta $030c			sta BlkV+0
.af3a	8d 0d 03	sta $030d			sta BlkV+1
.af3d					+
.af3d	20 18 c3	jsr $c318			jsr Input_To_R	; Save the input state to the Return Stack
.af40	a9 ff		lda #$ff			lda #$ff	; set SOURCE-ID to -1
.af42	85 02		sta $02				sta insrc+0
.af44	85 03		sta $03				sta insrc+1
.af46	a9 00		lda #$00			lda #0		; set >IN to zero
.af48	85 08		sta $08				sta toin+0
.af4a	85 09		sta $09				sta toin+1
.af4c	20 3b b3	jsr $b33b			jsr PopYA	; pop u
.af4f	85 06		sta $06				sta ciblen+0
.af51	84 07		sty $07				sty ciblen+1
.af53	20 3b b3	jsr $b33b			jsr PopYA	; pop addr
.af56	85 04		sta $04				sta cib+0
.af58	84 05		sty $05				sty cib+1
.af5a	20 7c b4	jsr $b47c			jsr interpret	; ( -- )
.af5d	20 3a c3	jsr $c33a			jsr R_To_Input	; restore variables
.af60	68		pla				pla		; Restore BLK from the return stack.
.af61	8d 0c 03	sta $030c			sta BlkV+0
.af64	68		pla				pla
.af65	8d 0d 03	sta $030d			sta BlkV+1
=65					CL	.var *-(WordListLink+wh_Xt)
=$af68					en = *	; remember here
>af25	41					.byte CL	;wh_CodeLength
.af68	60		rts				rts
>af69	3e 4e 75 6d 62 65 72		L1:	.text ">Number"	;  name of word as a string, ending at wh_NameLastChar
>af70	07					.byte *-L1	;wh_NameLength	length of name
>af71	a2 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af73	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af74	18					.byte UF+NN	;wh_Flags	dictionary flags
=44784					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af75					To_Number:
.af75	20 84 b3	jsr $b384			jsr underflow_4
.af78	b5 24		lda $24,x			lda DStack+0,x		; no chars left?
.af7a	f0 72		beq $afee			beq _done
.af7c					_Char_loop:
.af7c	a1 26		lda ($26,x)			lda (DStack+2,x)		; Get next character
.af7e	c9 30		cmp #$30			cmp #'0'		; convert to value (Digit_Question)
.af80	90 6c		bcc $afee			bcc _done
.af82	c9 3a		cmp #$3a			cmp #'9'+1
.af84	90 08		bcc $af8e			bcc _digit
.af86	29 df		and #$df			and #$df		;   ASCII uppercase
.af88	c9 41		cmp #$41			cmp #'A'
.af8a	90 62		bcc $afee			bcc _done
.af8c	e9 07		sbc #$07			sbc #7 ;'A'-'0'-10	;   to make 'A'=10 below
.af8e	38		sec		_digit:		sec
.af8f	e9 30		sbc #$30			sbc #'0'
.af91	cd 00 03	cmp $0300			cmp base		; must be < base
.af94	b0 58		bcs $afee			bcs _done
.af96	48		pha				pha			; Save char value
.af97	20 5a c4	jsr $c45a			jsr Two_Over		;   copy ud to work (multiplicand)
.af9a	a9 00		lda #$00			lda #0			;   zero ud (product)
.af9c	95 2c		sta $2c,x			sta DStack+8,x
.af9e	95 2d		sta $2d,x			sta DStack+9,x
.afa0	95 2e		sta $2e,x			sta DStack+10,x
.afa2	95 2f		sta $2f,x			sta DStack+11,x
.afa4	ad 00 03	lda $0300			lda base		;   get multiplier
.afa7	d0 23		bne $afcc			bne _Mul_Test
.afa9	48		pha		_Mul_Add:	pha			;   save multiplier
.afaa	18		clc				clc			;   ud += work
.afab	b5 26		lda $26,x			lda DStack+2,x
.afad	75 2e		adc $2e,x			adc DStack+10,x
.afaf	95 2e		sta $2e,x			sta DStack+10,x
.afb1	b5 27		lda $27,x			lda DStack+3,x
.afb3	75 2f		adc $2f,x			adc DStack+11,x
.afb5	95 2f		sta $2f,x			sta DStack+11,x
.afb7	b5 24		lda $24,x			lda DStack+0,x
.afb9	75 2c		adc $2c,x			adc DStack+8,x
.afbb	95 2c		sta $2c,x			sta DStack+8,x
.afbd	b5 25		lda $25,x			lda DStack+1,x
.afbf	75 2d		adc $2d,x			adc DStack+9,x
.afc1	95 2d		sta $2d,x			sta DStack+9,x
.afc3	68		pla				pla			;   restore multiplier
.afc4	16 26		asl $26,x	_Mul_Shift:	asl DStack+2,x		;   work <<= 1
.afc6	36 27		rol $27,x			rol DStack+3,x
.afc8	36 24		rol $24,x			rol DStack+0,x
.afca	36 25		rol $25,x			rol DStack+1,x
.afcc	4a		lsr a		_Mul_Test:	lsr a			;   shift multiplier
.afcd	b0 da		bcs $afa9			bcs _Mul_Add
.afcf	d0 f3		bne $afc4			bne _Mul_Shift
.afd1	e8		inx				inx			;   2Drop work
.afd2	e8		inx				inx
.afd3	e8		inx				inx
.afd4	e8		inx				inx
.afd5	68		pla				pla			; recover value
.afd6	18		clc				clc			; add to ud
.afd7	75 2a		adc $2a,x			adc DStack+6,x
.afd9	95 2a		sta $2a,x			sta DStack+6,x
.afdb	90 0a		bcc $afe7			bcc +
.afdd	f6 2b		inc $2b,x			inc DStack+7,x
.afdf	d0 06		bne $afe7			bne +
.afe1	f6 28		inc $28,x			inc DStack+4,x
.afe3	d0 02		bne $afe7			bne +
.afe5	f6 29		inc $29,x			inc DStack+5,x
.afe7					+
.afe7	20 65 c9	jsr $c965			jsr NOS_One_Plus	; consume the char
.afea	d6 24		dec $24,x			dec DStack+0,x
.afec	d0 8e		bne $af7c			bne _Char_loop
.afee					_done:
=121					CL	.var *-(WordListLink+wh_Xt)
=$afee					en = *	; remember here
>af73	79					.byte CL	;wh_CodeLength
.afee	60		rts				rts
>afef	4e 75 6d 62 65 72		L1:	.text "Number"	;  name of word as a string, ending at wh_NameLastChar
>aff5	06					.byte *-L1	;wh_NameLength	length of name
>aff6	f0 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aff8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aff9	18					.byte UF+NN	;wh_Flags	dictionary flags
=44917					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.affa					Number:
.affa	20 7a b3	jsr $b37a			jsr underflow_2
.affd	a9 00		lda #$00			lda #0
.afff	85 1a		sta $1a				sta tmp4+0	; flag for double
.b001	85 1b		sta $1b				sta tmp4+1	; flag for minus
.b003	ad 00 03	lda $0300			lda base
.b006	48		pha				pha
.b007	20 bf cb	jsr $cbbf			jsr Two_dup		; ( addr u addr u )
.b00a	a1 26		lda ($26,x)			lda (DStack+2,x)	; get 1st char
.b00c	20 ce b0	jsr $b0ce			jsr _MinusCheck		; a minus sign?
.b00f	a0 0a		ldy #$0a			ldy #10			; decimal?
.b011	c9 23		cmp #$23			cmp #'#'
.b013	f0 35		beq $b04a			beq _base_changed
.b015	a0 10		ldy #$10			ldy #16			; hex?
.b017	c9 24		cmp #$24			cmp #'$'
.b019	f0 2f		beq $b04a			beq _base_changed
.b01b	a0 02		ldy #$02			ldy #2			; binary?
.b01d	c9 25		cmp #$25			cmp #'%'
.b01f	f0 29		beq $b04a			beq _base_changed
.b021	c9 27		cmp #$27			cmp #$27		; ASCII for "'"
.b023	d0 2f		bne $b054			bne _check_dot
.b025	b5 24		lda $24,x			lda DStack+0,x	; length=3 ?
.b027	c9 03		cmp #$03			cmp #3
.b029	d0 1c		bne $b047			bne _not_a_char
.b02b	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b02d	85 1c		sta $1c				sta tmp5
.b02f	b5 27		lda $27,x			lda DStack+3,x
.b031	85 1d		sta $1d				sta tmp5+1
.b033	a0 02		ldy #$02			ldy #2
.b035	b1 1c		lda ($1c),y			lda (tmp5),y
.b037	c9 27		cmp #$27			cmp #$27	; ASCII for "'"
.b039	d0 0c		bne $b047			bne _not_a_char
.b03b	88		dey				dey		; The char we want is between the single quotes.
.b03c	b1 1c		lda ($1c),y			lda (tmp5),y
.b03e	95 26		sta $26,x			sta DStack+2,x
.b040	a9 00		lda #$00			lda #0
.b042	95 27		sta $27,x			sta DStack+3,x
.b044	4c a3 b0	jmp $b0a3			jmp _drop_original_string ; Single flag will drop the TOS for us.
.b047					_not_a_char:
.b047	4c 80 b0	jmp $b080			jmp _number_error
.b04a					_base_changed:
.b04a	8c 00 03	sty $0300			sty base	; Switch to the new base
.b04d	20 65 c9	jsr $c965			jsr NOS_One_Plus ; start one character later
.b050	d6 24		dec $24,x			dec DStack+0,x	; decrease string length by one
.b052	a1 26		lda ($26,x)			lda (DStack+2,x) ; Load the first char again
.b054					_check_dot:
.b054	20 ce b0	jsr $b0ce			jsr _MinusCheck
.b057	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b059	85 1c		sta $1c				sta tmp5
.b05b	b5 27		lda $27,x			lda DStack+3,x
.b05d	85 1d		sta $1d				sta tmp5+1
.b05f	b4 24		ldy $24,x			ldy DStack+0,x	; Y now points to the first character after the string,
.b061	88		dey				dey		; but we need the last character
.b062	b1 1c		lda ($1c),y			lda (tmp5),y
.b064	c9 2e		cmp #$2e			cmp #'.'
.b066	d0 04		bne $b06c			bne _main
.b068	c6 1a		dec $1a				dec tmp4	; Flag the fact
.b06a	d6 24		dec $24,x			dec DStack+0,x	; reduce string length by one
.b06c					_main:
.b06c	20 bf cb	jsr $cbbf			jsr Two_Dup
.b06f	a9 00		lda #$00			lda #0
.b071	95 28		sta $28,x			sta DStack+4,x	; clear ud
.b073	95 29		sta $29,x			sta DStack+5,x
.b075	95 2a		sta $2a,x			sta DStack+6,x
.b077	95 2b		sta $2b,x			sta DStack+7,x
.b079	20 75 af	jsr $af75			jsr To_Number	; ( ud addr u -- ud addr u )
.b07c	b5 24		lda $24,x			lda DStack+0,x
.b07e	f0 1f		beq $b09f			beq _all_converted
.b080					_number_error:
.b080	20 26 c4	jsr $c426			jsr Two_drop	; >NUMBER modified addr u
.b083	20 26 c4	jsr $c426			jsr Two_drop	; ud   (partially converted number)
.b086	a9 3e		lda #$3e			lda #'>'	; print the unknown
.b088	20 d3 cc	jsr $ccd3			jsr Emit_A	; word using the original addr u we saved at the beginning.
.b08b	20 ed cc	jsr $cced			jsr Type
.b08e	a9 3c		lda #$3c			lda #'<'
.b090	20 d3 cc	jsr $ccd3			jsr Emit_A
.b093	20 e0 cc	jsr $cce0			jsr Space
.b096	68		pla				pla		; restore base
.b097	8d 00 03	sta $0300			sta base
.b09a	a9 f3		lda #$f3			lda #$100+err_UndefinedWord
.b09c	4c c4 b3	jmp $b3c4			jmp ThrowA
.b09f					_all_converted:
.b09f	e8		inx				inx		; Drop the current addr u
.b0a0	e8		inx				inx
.b0a1	e8		inx				inx
.b0a2	e8		inx				inx
.b0a3					_drop_original_string:
.b0a3	20 32 bf	jsr $bf32			jsr TwoNip	 ; Drop the original addr u
.b0a6	a5 1a		lda $1a				lda tmp4	; flag for double
.b0a8	f0 10		beq $b0ba			beq _single
.b0aa	a9 20		lda #$20			lda #%00100000
.b0ac	05 0c		ora $0c				ora status
.b0ae	85 0c		sta $0c				sta status
.b0b0	a5 1b		lda $1b				lda tmp4+1
.b0b2	f0 15		beq $b0c9			beq _done	; no minus, all done
.b0b4	20 b0 c5	jsr $c5b0			jsr DNegate
.b0b7	4c c9 b0	jmp $b0c9			jmp _done
.b0ba					_single:
.b0ba	e8		inx				inx		; convert ud to u
.b0bb	e8		inx				inx
.b0bc	a9 df		lda #$df			lda #$ff-%00100000
.b0be	25 0c		and $0c				and status
.b0c0	85 0c		sta $0c				sta status
.b0c2	a5 1b		lda $1b				lda tmp4+1
.b0c4	f0 03		beq $b0c9			beq _done	; no minus, all done
.b0c6	20 7f c5	jsr $c57f			jsr Negate
.b0c9					_done:
.b0c9	68		pla				pla
.b0ca	8d 00 03	sta $0300			sta base
=211					CL	.var *-(WordListLink+wh_Xt)
=$b0cd					en = *	; remember here
>aff8	d3					.byte CL	;wh_CodeLength
.b0cd	60		rts				rts
.b0ce					_MinusCheck:
.b0ce	c9 2d		cmp #$2d			cmp #'-'		; a minus sign?
.b0d0	d0 09		bne $b0db			bne +
.b0d2	c6 1b		dec $1b				dec tmp4+1		; set flag
.b0d4	20 65 c9	jsr $c965			jsr NOS_One_Plus	; start one character later
.b0d7	d6 24		dec $24,x			dec DStack+0,x		; decrease string length by one
.b0d9	a1 26		lda ($26,x)			lda (DStack+2,x)	; get next char
.b0db	60		rts		+		rts
>b0dc	48 65 78			L1:	.text "Hex"	;  name of word as a string, ending at wh_NameLastChar
>b0df	03					.byte *-L1	;wh_NameLength	length of name
>b0e0	75 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b0e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b0e3	08					.byte NN	;wh_Flags	dictionary flags
=45151					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b0e4	a9 10		lda #$10	Hex:		lda #16
.b0e6	d0 0e		bne $b0f6			bne decimal_a
=4					CL	.var *-(WordListLink+wh_Xt)
=$b0e8					en = *	; remember here
>b0e2	04					.byte CL	;wh_CodeLength
>b0e8	44 65 63 69 6d 61 6c		L1:	.text "Decimal"	;  name of word as a string, ending at wh_NameLastChar
>b0ef	07					.byte *-L1	;wh_NameLength	length of name
>b0f0	5f b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b0f2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b0f3	00					.byte 0	;wh_Flags	dictionary flags
=45167					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b0f4	a9 0a		lda #$0a	Decimal:	lda #10
.b0f6	8d 00 03	sta $0300	decimal_a:	sta base+0
.b0f9	a9 00		lda #$00			lda #0
.b0fb	8d 01 03	sta $0301			sta base+1		; paranoid
=10					CL	.var *-(WordListLink+wh_Xt)
=$b0fe					en = *	; remember here
>b0f2	0a					.byte CL	;wh_CodeLength
.b0fe	60		rts				rts
>b0ff	43 6f 75 6e 74			L1:	.text "Count"	;  name of word as a string, ending at wh_NameLastChar
>b104	05					.byte *-L1	;wh_NameLength	length of name
>b105	6f b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b107	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b108	18					.byte UF+NN	;wh_Flags	dictionary flags
=45188					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b109					Count:
.b109	20 65 b3	jsr $b365			jsr underflow_1
.b10c	a1 24		lda ($24,x)			lda (DStack+0,x)	; A= number of characters
.b10e	f6 24		inc $24,x			inc DStack+0,x		; move start address up by one
.b110	d0 02		bne $b114			bne +
.b112	f6 25		inc $25,x			inc DStack+1,x
.b114					+
.b114	4c 35 b7	jmp $b735			jmp PushZA		; push number of characters, return
=14					CL	.var *-(WordListLink+wh_Xt)
=$b117					en = *	; remember here
>b107	0e					.byte CL	;wh_CodeLength
>0743					DoLeave  .word ?	; head of leave addr patch chain
>0745					DoStkIndex: .byte ?
>0746					DoIndexL: .fill DoStkDim
>074e					DoIndexH: .fill DoStkDim
>0756					DoFufaL:  .fill DoStkDim
>075e					DoFufaH:  .fill DoStkDim
>b117	3f 44 6f			L1:	.text "?Do"	;  name of word as a string, ending at wh_NameLastChar
>b11a	03					.byte *-L1	;wh_NameLength	length of name
>b11b	84 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b11d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b11e	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45210					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b11f					Question_Do:
.b11f	20 7a b2	jsr $b27a			jsr Do_Leave_Init
.b122	a9 36		lda #$36			lda #<_runtime
.b124	a0 b1		ldy #$b1			ldy #>_runtime
.b126	20 43 cc	jsr $cc43			jsr Jsr_Comma_YA	; compile JSR _runtime
.b129	a9 d0		lda #$d0			lda #$d0		; compile BNE *+5
.b12b	a0 03		ldy #$03			ldy #3
.b12d	20 1e cc	jsr $cc1e			jsr Comma_YA
.b130	20 5d b2	jsr $b25d			jsr Leave		; compile JMP leave
.b133	4c 54 b1	jmp $b154			jmp Do_8		; finish
=23					CL	.var *-(WordListLink+wh_Xt)
=$b136					en = *	; remember here
>b11d	17					.byte CL	;wh_CodeLength
.b136					_runtime:
.b136	20 5c b1	jsr $b15c			jsr Do_Runtime	; start normally (we assume TOS!=NOS)
.b139	a5 12		lda $12				lda DoIndex+0	; Are TOS and NOS equal?
.b13b	f0 01		beq $b13e			beq _2
.b13d	60		rts				rts		; return Z=0 to signal continue
.b13e	a5 13		lda $13		_2:		lda DoIndex+1
.b140	c9 80		cmp #$80			cmp #$80
.b142	60		rts				rts		; return Z
>b143	44 6f				L1:	.text "Do"	;  name of word as a string, ending at wh_NameLastChar
>b145	02					.byte *-L1	;wh_NameLength	length of name
>b146	9a b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b148	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b149	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45253					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b14a					Do:
.b14a	20 7a b2	jsr $b27a			jsr Do_Leave_Init
.b14d	a9 5c		lda #$5c			lda #<Do_runtime
.b14f	a0 b1		ldy #$b1			ldy #>Do_runtime
.b151	20 43 cc	jsr $cc43			jsr Jsr_Comma_YA	; compile JSR _runtime
.b154	20 27 c9	jsr $c927	Do_8:		jsr Here		; remember loop body start addr
.b157	a9 4a		lda #$4a			lda #<Do		; identifier
.b159	4c 35 b7	jmp $b735			jmp PushZA
=18					CL	.var *-(WordListLink+wh_Xt)
=$b15c					en = *	; remember here
>b148	12					.byte CL	;wh_CodeLength
.b15c					Do_Runtime:
.b15c	ce 45 07	dec $0745			dec DoStkIndex		; alloc DO stack entry
.b15f	ac 45 07	ldy $0745			ldy DoStkIndex
.b162	30 2d		bmi $b191			bmi _TooDeep
.b164	a5 12		lda $12				lda DoIndex+0		; save previous DoIndex
.b166	99 46 07	sta $0746,y			sta DoIndexL,y
.b169	a5 13		lda $13				lda DoIndex+1
.b16b	99 4e 07	sta $074e,y			sta DoIndexH,y
.b16e	38		sec				sec			; fudge factor (FUFA)= $8000 - limit
.b16f	a9 00		lda #$00			lda #0			;   the number that will trip the overflow flag
.b171	f5 26		sbc $26,x			sbc DStack+2,x
.b173	99 56 07	sta $0756,y			sta DoFuFaL,y
.b176	a9 80		lda #$80			lda #$80
.b178	f5 27		sbc $27,x			sbc DStack+3,x
.b17a	99 5e 07	sta $075e,y			sta DoFuFaH,y
.b17d	18		clc				clc			; index= FUFA plus original index
.b17e	b5 24		lda $24,x			lda DStack+0,x
.b180	79 56 07	adc $0756,y			adc DoFuFaL,y
.b183	85 12		sta $12				sta DoIndex+0
.b185	b5 25		lda $25,x			lda DStack+1,x
.b187	79 5e 07	adc $075e,y			adc DoFuFaH,y
.b18a	85 13		sta $13				sta DoIndex+1
.b18c	e8		inx				inx			; Drop orig index
.b18d	e8		inx				inx
.b18e	e8		inx				inx			; Drop orig limit
.b18f	e8		inx				inx
.b190	60		rts				rts			; return
.b191	a9 f9		lda #$f9	_TooDeep:	lda #$100+err_DoLoop_TooDeep
.b193	20 c4 b3	jsr $b3c4			jsr ThrowA
>b196	4c 6f 6f 70			L1:	.text "Loop"	;  name of word as a string, ending at wh_NameLastChar
>b19a	04					.byte *-L1	;wh_NameLength	length of name
>b19b	c5 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b19d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b19e	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45338					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b19f					Loop:
.b19f	a9 a6		lda #$a6			lda #<_Runtime
.b1a1	a0 b1		ldy #$b1			ldy #>_Runtime
.b1a3	4c c2 b1	jmp $b1c2			jmp Plus_Loop_5
=7					CL	.var *-(WordListLink+wh_Xt)
=$b1a6					en = *	; remember here
>b19d	07					.byte CL	;wh_CodeLength
.b1a6					_Runtime:
.b1a6	e6 12		inc $12				inc DoIndex+0
.b1a8	f0 02		beq $b1ac			beq _Runtime2
.b1aa	b8		clv				clv			; return V=0 to signal loop back
.b1ab	60		rts				rts
.b1ac	18		clc		_Runtime2:	clc
.b1ad	a5 13		lda $13				lda DoIndex+1		; handle carry from lo byte
.b1af	69 01		adc #$01			adc #1
.b1b1	85 13		sta $13				sta DoIndex+1
.b1b3	60		rts				rts			; return V to signal loop back
>b1b4	2b 4c 6f 6f 70			L1:	.text "+Loop"	;  name of word as a string, ending at wh_NameLastChar
>b1b9	05					.byte *-L1	;wh_NameLength	length of name
>b1ba	1a b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b1bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b1bd	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45369					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b1be					Plus_Loop:
.b1be	a9 cc		lda #$cc			lda #<Plus_Loop_Runtime
.b1c0	a0 b1		ldy #$b1			ldy #>Plus_Loop_Runtime
.b1c2	20 e3 b1	jsr $b1e3	Plus_Loop_5:	jsr Loop_End		; compile JSR _runtime, BVC back
.b1c5	a9 42		lda #$42			lda #<Unloop
.b1c7	a0 b2		ldy #$b2			ldy #>Unloop
.b1c9	4c e9 b5	jmp $b5e9			jmp Compile_Comma_WithNT_YA ; compile JSR Unloop, return
=14					CL	.var *-(WordListLink+wh_Xt)
=$b1cc					en = *	; remember here
>b1bc	0e					.byte CL	;wh_CodeLength
.b1cc					Plus_Loop_Runtime:
.b1cc	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b1ce	b0 10		bcs $b1e0		bcs Throw_Stack_12
.b1d0	18		clc				clc			; DoIndex += step
.b1d1	b5 24		lda $24,x			lda DStack+0,x
.b1d3	65 12		adc $12				adc DoIndex+0
.b1d5	85 12		sta $12				sta DoIndex+0
.b1d7	b5 25		lda $25,x			lda DStack+1,x
.b1d9	65 13		adc $13				adc DoIndex+1
.b1db	85 13		sta $13				sta DoIndex+1
.b1dd	e8		inx				inx			; Drop step
.b1de	e8		inx				inx
.b1df	60		rts				rts			; return V=0 to signal loop back
.b1e0	4c 89 b3	jmp $b389	Throw_Stack_12: jmp Throw_Stack
.b1e3					Loop_End:
.b1e3	20 43 cc	jsr $cc43			jsr Jsr_Comma_YA	; compile JSR runtime
.b1e6	a9 4a		lda #$4a			lda #<Do		; check id
.b1e8	20 2b b2	jsr $b22b	Loop_End_3:	jsr QPairCtlA
.b1eb	a9 50		lda #$50			lda #$50		; compile BVC body
.b1ed	20 07 a6	jsr $a607			jsr Branch_Comma
.b1f0	ac 43 07	ldy $0743			ldy DoLeave+0		; for each leave addr entry
.b1f3	ad 44 07	lda $0744			lda DoLeave+1
.b1f6	f0 1b		beq $b213			beq _p9
.b1f8	84 14		sty $14		_p1:		sty tmp1+0		;   save entry pointer
.b1fa	85 15		sta $15				sta tmp1+1
.b1fc	a0 01		ldy #$01			ldy #1			;   save link
.b1fe	b1 14		lda ($14),y			lda (tmp1),y
.b200	48		pha				pha
.b201	88		dey				dey
.b202	b1 14		lda ($14),y			lda (tmp1),y
.b204	48		pha				pha
.b205	a5 00		lda $00				lda cp+0		;   patch addr
.b207	91 14		sta ($14),y			sta (tmp1),y
.b209	a5 01		lda $01				lda cp+1
.b20b	c8		iny				iny
.b20c	91 14		sta ($14),y			sta (tmp1),y
.b20e	68		pla				pla			;   get saved link
.b20f	a8		tay				tay
.b210	68		pla				pla
.b211	d0 e5		bne $b1f8			bne _p1
.b213					_p9:
.b213	20 3b b3	jsr $b33b			jsr PopYA		; restore DoLeave
.b216	8d 43 07	sta $0743			sta DoLeave+0
.b219	8c 44 07	sty $0744			sty DoLeave+1
.b21c	60		rts				rts
>b21d	3f 50 61 69 72 43 74 6c		L1:	.text "?PairCtlA"	;  name of word as a string, ending at wh_NameLastChar
>b225	41
>b226	09					.byte *-L1	;wh_NameLength	length of name
>b227	39 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b229	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b22a	08					.byte NN	;wh_Flags	dictionary flags
=45478					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b22b	d5 24		cmp $24,x	QPairCtlA:	cmp DStack+0,x
.b22d	f0 05		beq $b234			beq _8
.b22f	a9 ea		lda #$ea			lda #$100+err_ControlMismatch
.b231	4c c4 b3	jmp $b3c4			jmp ThrowA
.b234	e8		inx		_8:		inx
.b235	e8		inx				inx	; Drop n
.b236	60		rts				rts
=12					CL	.var *-(WordListLink+wh_Xt)
=$b237					en = *	; remember here
>b229	0c					.byte CL	;wh_CodeLength
>b237	55 6e 6c 6f 6f 70		L1:	.text "Unloop"	;  name of word as a string, ending at wh_NameLastChar
>b23d	06					.byte *-L1	;wh_NameLength	length of name
>b23e	a6 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b240	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b241	01					.byte CO	;wh_Flags	dictionary flags
=45501					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b242					Unloop:
.b242	ac 45 07	ldy $0745			ldy DoStkIndex
.b245	b9 46 07	lda $0746,y			lda DoIndexL,y	; restore Index
.b248	85 12		sta $12				sta DoIndex+0
.b24a	b9 4e 07	lda $074e,y			lda DoIndexH,y
.b24d	85 13		sta $13				sta DoIndex+1
.b24f	ee 45 07	inc $0745			inc DoStkIndex	; drop Do stack entry
=16					CL	.var *-(WordListLink+wh_Xt)
=$b252					en = *	; remember here
>b240	10					.byte CL	;wh_CodeLength
.b252	60		rts				rts
>b253	4c 65 61 76 65			L1:	.text "Leave"	;  name of word as a string, ending at wh_NameLastChar
>b258	05					.byte *-L1	;wh_NameLength	length of name
>b259	bd b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b25b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b25c	0d					.byte IM+NN+CO	;wh_Flags	dictionary flags
=45528					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b25d					Leave:
.b25d	a9 4c		lda #$4c			lda #$4c	; JMP abs
.b25f	20 04 cc	jsr $cc04			jsr C_Comma_A
.b262	a5 01		lda $01				lda cp+1	; save cp
.b264	48		pha				pha
.b265	a5 00		lda $00				lda cp+0
.b267	48		pha				pha
.b268	ad 43 07	lda $0743			lda DoLeave+0	; compile DoLeave link, patched later
.b26b	ac 44 07	ldy $0744			ldy DoLeave+1
.b26e	20 1e cc	jsr $cc1e			jsr Comma_YA
.b271	68		pla				pla		; update DoLeave
.b272	8d 43 07	sta $0743			sta DoLeave+0
.b275	68		pla				pla
.b276	8d 44 07	sta $0744			sta DoLeave+1
=28					CL	.var *-(WordListLink+wh_Xt)
=$b279					en = *	; remember here
>b25b	1c					.byte CL	;wh_CodeLength
.b279	60		rts				rts
.b27a					Do_Leave_Init:
.b27a	ad 43 07	lda $0743			lda DoLeave+0
.b27d	ac 44 07	ldy $0744			ldy DoLeave+1
.b280	20 f3 b6	jsr $b6f3			jsr PushYA	; save old leave head
.b283	a9 00		lda #$00			lda #0		; init
.b285	8d 44 07	sta $0744			sta DoLeave+1
.b288	60		rts				rts
>b289	49				L1:	.text "I"	;  name of word as a string, ending at wh_NameLastChar
>b28a	01					.byte *-L1	;wh_NameLength	length of name
>b28b	d8 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b28d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b28e	01					.byte CO	;wh_Flags	dictionary flags
=45578					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b28f	ac 45 07	ldy $0745	I:		ldy DoStkIndex
.b292	ca		dex				dex
.b293	ca		dex				dex
.b294	38		sec				sec		; n= fudged index - fudge factor (FUFA)
.b295	a5 12		lda $12				lda DoIndex+0
.b297	f9 56 07	sbc $0756,y			sbc DoFuFaL,y
.b29a	95 24		sta $24,x			sta DStack+0,x
.b29c	a5 13		lda $13				lda DoIndex+1
.b29e	f9 5e 07	sbc $075e,y			sbc DoFuFaH,y
.b2a1	95 25		sta $25,x			sta DStack+1,x
=20					CL	.var *-(WordListLink+wh_Xt)
=$b2a3					en = *	; remember here
>b28d	14					.byte CL	;wh_CodeLength
.b2a3	60		rts				rts
>b2a4	4a				L1:	.text "J"	;  name of word as a string, ending at wh_NameLastChar
>b2a5	01					.byte *-L1	;wh_NameLength	length of name
>b2a6	0a b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2a8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2a9	01					.byte CO	;wh_Flags	dictionary flags
=45605					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2aa	ac 45 07	ldy $0745	J:		ldy DoStkIndex
.b2ad	ca		dex				dex
.b2ae	ca		dex				dex
.b2af	38		sec				sec		; n= 2nd fudged index - 2nd fudge factor (FUFA)
.b2b0	b9 46 07	lda $0746,y			lda DoIndexL+0,y	; LSB
.b2b3	f9 57 07	sbc $0757,y			sbc DoFufaL+1,y
.b2b6	95 24		sta $24,x			sta DStack+0,x
.b2b8	b9 4e 07	lda $074e,y			lda DoIndexH+0,y	; MSB
.b2bb	f9 5f 07	sbc $075f,y			sbc DoFufaH+1,y
.b2be	95 25		sta $25,x			sta DStack+1,x
=22					CL	.var *-(WordListLink+wh_Xt)
=$b2c0					en = *	; remember here
>b2a8	16					.byte CL	;wh_CodeLength
.b2c0	60		rts				rts
>b2c1	52 65 63 75 72 73 65		L1:	.text "Recurse"	;  name of word as a string, ending at wh_NameLastChar
>b2c8	07					.byte *-L1	;wh_NameLength	length of name
>b2c9	25 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2cb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2cc	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45640					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2cd					Recurse:
.b2cd	a5 0e		lda $0e				lda workword+0
.b2cf	a4 0f		ldy $0f				ldy workword+1
.b2d1	20 f3 b6	jsr $b6f3			jsr PushYA
.b2d4	24 0c		bit $0c				bit status		; does WORKWORD contain xt or nt?
.b2d6	50 03		bvc $b2db			bvc +
.b2d8	20 1b bd	jsr $bd1b			jsr Name_To_Int		; convert nt to xt
.b2db					+
.b2db	4c 40 cc	jmp $cc40			jmp Jsr_Comma		; compile JSR xt, return
=17					CL	.var *-(WordListLink+wh_Xt)
=$b2de					en = *	; remember here
>b2cb	11					.byte CL	;wh_CodeLength
>b2de	41 62 6f 72 74 22		L1:	.text 'Abort"'	;  name of word as a string, ending at wh_NameLastChar
>b2e4	06					.byte *-L1	;wh_NameLength	length of name
>b2e5	48 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2e8	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45668					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2e9					Abort_Quote:
.b2e9	20 5d b8	jsr $b85d			jsr S_Quote		; compile the string literal
.b2ec	a0 b2		ldy #$b2			ldy #>_runtime		; compile JSR runtime, return
.b2ee	a9 f3		lda #$f3			lda #<_runtime
.b2f0	4c 43 cc	jmp $cc43			jmp Jsr_Comma_YA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b2f3					en = *	; remember here
>b2e7	0a					.byte CL	;wh_CodeLength
.b2f3					_runtime:
.b2f3	b5 28		lda $28,x			lda DStack+4,x
.b2f5	15 29		ora $29,x			ora DStack+5,x
.b2f7	d0 03		bne $b2fc			bne _do_abort	; true?
.b2f9	4c a0 ac	jmp $aca0			jmp ThreeDrop	; Drop three entries from the Data Stack
.b2fc					_do_abort:
.b2fc	20 ed cc	jsr $cced			jsr Type	; print string
.b2ff	20 7d aa	jsr $aa7d			jsr CR		; We follow Gforth in going to a new line
.b302	a9 fe		lda #$fe			lda #$100+err_AbortQuote
.b304	4c c4 b3	jmp $b3c4			jmp ThrowA
>b307	41 62 6f 72 74			L1:	.text "Abort"	;  name of word as a string, ending at wh_NameLastChar
>b30c	05					.byte *-L1	;wh_NameLength	length of name
>b30d	64 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b30f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b310	08					.byte NN	;wh_Flags	dictionary flags
=45708					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b311	a9 ff		lda #$ff	Abort:		lda #$100+err_Abort
.b313	4c c4 b3	jmp $b3c4			jmp ThrowA
=5					CL	.var *-(WordListLink+wh_Xt)
=$b316					en = *	; remember here
>b30f	05					.byte CL	;wh_CodeLength
>b316	50 6f 70 41			L1:	.text "PopA"	;  name of word as a string, ending at wh_NameLastChar
>b31a	04					.byte *-L1	;wh_NameLength	length of name
>b31b	8c b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b31d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b31e	08					.byte NN	;wh_Flags	dictionary flags
=45722					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b31f					PopA:
.b31f	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b321	b0 66		bcs $b389		bcs Throw_Stack
.b323	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b325	e8		inx				inx
.b326	e8		inx				inx
=8					CL	.var *-(WordListLink+wh_Xt)
=$b327					en = *	; remember here
>b31d	08					.byte CL	;wh_CodeLength
.b327	60		rts		                rts
.b328					PopA2:
.b328	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b32a	b0 5d		bcs $b389		bcs Throw_Stack
.b32c	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b32e	e8		inx				inx
.b32f	e8		inx				inx
.b330	60		rts		                rts
>b331	50 6f 70 59 41			L1:	.text "PopYA"	;  name of word as a string, ending at wh_NameLastChar
>b336	05					.byte *-L1	;wh_NameLength	length of name
>b337	9a b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b339	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b33a	08					.byte NN	;wh_Flags	dictionary flags
=45750					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b33b					PopYA:
.b33b	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b33d	b0 4a		bcs $b389		bcs Throw_Stack
.b33f	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to YA
.b341	b4 25		ldy $25,x			ldy DStack+1,x
.b343	e8		inx				inx
.b344	e8		inx				inx
=10					CL	.var *-(WordListLink+wh_Xt)
=$b345					en = *	; remember here
>b339	0a					.byte CL	;wh_CodeLength
.b345	60		rts				rts
.b346					PopTmp1:
.b346	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b348	b0 3f		bcs $b389		bcs Throw_Stack
.b34a	b5 24		lda $24,x			lda DStack+0,x	; PopYA
.b34c	b4 25		ldy $25,x			ldy DStack+1,x
.b34e	e8		inx				inx
.b34f	e8		inx				inx
.b350	85 14		sta $14				sta tmp1+0
.b352	84 15		sty $15				sty tmp1+1
.b354	60		rts				rts
>b355	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_1"	;  name of word as a string, ending at wh_NameLastChar
>b35d	77 5f 31
>b360	0b					.byte *-L1	;wh_NameLength	length of name
>b361	b6 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b363	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b364	08					.byte NN	;wh_Flags	dictionary flags
=45792					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b365					underflow_1:
.b365	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b367	b0 20		bcs $b389		bcs Throw_Stack
=4					CL	.var *-(WordListLink+wh_Xt)
=$b369					en = *	; remember here
>b363	04					.byte CL	;wh_CodeLength
.b369	60		rts				rts
>b36a	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_2"	;  name of word as a string, ending at wh_NameLastChar
>b372	77 5f 32
>b375	0b					.byte *-L1	;wh_NameLength	length of name
>b376	e0 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b378	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b379	08					.byte NN	;wh_Flags	dictionary flags
=45813					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b37a					underflow_2:
.b37a	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b37c	b0 0b		bcs $b389		bcs Throw_Stack
=4					CL	.var *-(WordListLink+wh_Xt)
=$b37e					en = *	; remember here
>b378	04					.byte CL	;wh_CodeLength
.b37e	60		rts		                rts
.b37f					underflow_3:
.b37f	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.b381	b0 06		bcs $b389		bcs Throw_Stack
.b383	60		rts		                rts
.b384					underflow_4:
.b384	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.b386	b0 01		bcs $b389		bcs Throw_Stack
.b388	60		rts		                rts
.b389					Throw_Stack:
.b389	30 04		bmi $b38f			bmi _over
.b38b	a9 fc		lda #$fc			lda #$100+err_Stack_Underflow
.b38d	d0 35		bne $b3c4			bne ThrowA
.b38f	a9 fd		lda #$fd	_over:		lda #$100+err_Stack_Overflow
.b391	d0 31		bne $b3c4			bne ThrowA
.b393					Throw_FPStack:
.b393	30 04		bmi $b399			bmi _over
.b395	a9 d3		lda #$d3			lda #$100+err_FPStackUnderflow
.b397	d0 2b		bne $b3c4			bne ThrowA
.b399	a9 d4		lda #$d4	_over:		lda #$100+err_FPStackOverflow
.b39b	d0 27		bne $b3c4			bne ThrowA
.b39d					Throw_FpOutOfRange:
.b39d	a9 d5		lda #$d5			lda #$100+err_FpOutOfRange
.b39f	d0 23		bne $b3c4			bne ThrowA
>b3a1	3f 53 74 61 63 6b		L1:	.text "?Stack"	;  name of word as a string, ending at wh_NameLastChar
>b3a7	06					.byte *-L1	;wh_NameLength	length of name
>b3a8	f5 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b3aa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b3ab	08					.byte NN	;wh_Flags	dictionary flags
=45863					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b3ac					QStack:
.b3ac	e0 29		cpx #$29		cpx #-2*0+DStack0+1
.b3ae	b0 d9		bcs $b389		bcs Throw_Stack
.b3b0	a4 4c		ldy $4c				ldy fp			; check floating point stack
.b3b2	c0 0b		cpy #$0b			cpy #FDim+1
.b3b4	b0 dd		bcs $b393			bcs Throw_FPStack
=10					CL	.var *-(WordListLink+wh_Xt)
=$b3b6					en = *	; remember here
>b3aa	0a					.byte CL	;wh_CodeLength
.b3b6	60		rts				rts			; all OK
>b3b7	54 68 72 6f 77			L1:	.text "Throw"	;  name of word as a string, ending at wh_NameLastChar
>b3bc	05					.byte *-L1	;wh_NameLength	length of name
>b3bd	27 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b3bf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b3c0	08					.byte NN	;wh_Flags	dictionary flags
=45884					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b3c1	20 1f b3	jsr $b31f	Throw:		jsr PopA		; pop n
.b3c4	20 ed b3	jsr $b3ed	ThrowA:		jsr Type_Exception_Text_A ; print the associated error string
.b3c7					Abort_Core:
.b3c7	20 14 b8	jsr $b814			jsr SLiteral_runtime
.b3ca	4c d0 b3	jmp $b3d0			  jmp +
>b3cd	3f 00 20					  .text "?",0," "	; signal an error to the simulator
.b3d0	20 ed cc	jsr $cced	+		jsr Type
.b3d3	20 09 ce	jsr $ce09			jsr R_From		; show return stack TOS
.b3d6	20 9e 81	jsr $819e			jsr TypeSymbol
.b3d9	20 25 ce	jsr $ce25			jsr R_Fetch		; show return stack NOS
.b3dc	20 9e 81	jsr $819e			jsr TypeSymbol
.b3df	20 7d aa	jsr $aa7d			jsr CR
.b3e2					Abort_Core2:
.b3e2	a9 08		lda #$08			lda #DoStkDim		; init do stack
.b3e4	8d 45 07	sta $0745			sta DoStkIndex
.b3e7	20 31 b4	jsr $b431			jsr Empty_Stack		; empty the Data Stack & FP stack
.b3ea	4c 41 b4	jmp $b441			jmp Quit		; continue into QUIT.
.b3ed					Type_Exception_Text_A:
.b3ed	85 16		sta $16				sta tmp2+0	; save error code
.b3ef	a9 71		lda #$71			lda #<Exception_Text_List
.b3f1	a0 da		ldy #$da			ldy #>Exception_Text_List	; for each table entry
.b3f3	85 18		sta $18				sta tmp3+0
.b3f5	84 19		sty $19				sty tmp3+1
.b3f7	a0 00		ldy #$00	_TestEntry:	ldy #0		;   code match?
.b3f9	b1 18		lda ($18),y			lda (tmp3),y
.b3fb	f0 1a		beq $b417			beq _NotFound
.b3fd	c5 16		cmp $16				cmp tmp2+0
.b3ff	f0 11		beq $b412			beq _Found
.b401	c8		iny		-		iny		;   step to end of entry
.b402	b1 18		lda ($18),y			lda (tmp3),y
.b404	d0 fb		bne $b401			bne -
.b406	98		tya				tya		;   step to next entry
.b407	38		sec				sec
.b408	65 18		adc $18				adc tmp3+0
.b40a	85 18		sta $18				sta tmp3+0
.b40c	90 e9		bcc $b3f7			bcc _TestEntry
.b40e	e6 19		inc $19				inc tmp3+1
.b410	d0 e5		bne $b3f7			bne _TestEntry
.b412					_Found:
.b412	a0 01		ldy #$01			ldy #1
.b414	4c 14 cd	jmp $cd14			jmp Print_ASCIIZ_tmp3_no_lf
.b417	a0 ff		ldy #$ff	_NotFound:	ldy #$ff		; print code
.b419	a5 16		lda $16				lda tmp2+0
.b41b	20 f3 b6	jsr $b6f3			jsr PushYA
.b41e	4c e1 ca	jmp $cae1			jmp Dot
>b421	45 6d 70 74 79 2d 53 74		L1:	.text "Empty-Stack"	;  name of word as a string, ending at wh_NameLastChar
>b429	61 63 6b
>b42c	0b					.byte *-L1	;wh_NameLength	length of name
>b42d	3c b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b42f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b430	08					.byte NN	;wh_Flags	dictionary flags
=45996					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b431	a2 28		ldx #$28	Empty_Stack:	ldx #DStack0	; empty data stack
.b433	a9 0a		lda #$0a			lda #FDim	; empty FP stack
.b435	85 4c		sta $4c				sta fp
=6					CL	.var *-(WordListLink+wh_Xt)
=$b437					en = *	; remember here
>b42f	06					.byte CL	;wh_CodeLength
.b437	60		rts				rts
>b438	51 75 69 74			L1:	.text "Quit"	;  name of word as a string, ending at wh_NameLastChar
>b43c	04					.byte *-L1	;wh_NameLength	length of name
>b43d	ac b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b43f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b440	08					.byte NN	;wh_Flags	dictionary flags
=46012					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b441					Quit:
.b441	8a		txa				txa		; Save the DStack that we just defined
.b442	a2 ff		ldx #$ff			ldx #rsp0
.b444	9a		txs				txs
.b445	aa		tax				tax		; Restore the DStack. Dude, seriously.
.b446	a9 00		lda #$00			lda #0		; SOURCE-ID= zero (keyboard input)
.b448	85 02		sta $02				sta insrc+0
.b44a	85 03		sta $03				sta insrc+1
.b44c	20 80 b6	jsr $b680			jsr Left_Bracket_NoCheck ; switch to interpret state
.b44f					_get_line:
.b44f	a9 00		lda #$00			lda #<buffer0	; input buffer, this is paranoid
.b451	85 04		sta $04				sta cib+0
.b453	a9 02		lda #$02			lda #>buffer0
.b455	85 05		sta $05				sta cib+1
.b457	20 9c c1	jsr $c19c			jsr Refill		; ( -- f )
.b45a	b5 24		lda $24,x			lda DStack+0,x
.b45c	d0 05		bne $b463			bne +
.b45e	a9 6b		lda #$6b			lda #$100+err_Refill	; REFILL returned a FALSE flag, something went wrong
.b460	4c c4 b3	jmp $b3c4			jmp ThrowA
.b463	e8		inx		+		inx			; drop the flag
.b464	e8		inx				inx
.b465	20 7c b4	jsr $b47c			jsr interpret
.b468	a5 0a		lda $0a				lda state
.b46a	d0 06		bne $b472			bne _print_compiled
.b46c	a9 1d		lda #$1d			lda #<str_ok
.b46e	a0 da		ldy #$da			ldy #>str_ok
.b470	d0 04		bne $b476			bne _print
.b472	a9 21		lda #$21	_print_compiled: lda #<str_compiled	; "compile" string
.b474	a0 da		ldy #$da			ldy #>str_compiled
.b476	20 08 cd	jsr $cd08	_print:		jsr Print_ASCIIZ_YA
.b479	4c 4f b4	jmp $b44f			jmp _get_line
=59					CL	.var *-(WordListLink+wh_Xt)
=$b47c					en = *	; remember here
>b43f	3b					.byte CL	;wh_CodeLength
.b47c					Interpret:
.b47c					_loop:
.b47c	20 ac b3	jsr $b3ac			jsr QStack		; check stack bounds
.b47f	20 e4 b9	jsr $b9e4			jsr parse_name		; ( "string" -- addr u )
.b482	b5 24		lda $24,x	                lda DStack+0,x		; empty line?
.b484	f0 53		beq $b4d9	                beq _line_done
.b486	20 bf cb	jsr $cbbf			jsr Two_dup		; ( addr u -- addr u addr u )
.b489	20 21 bc	jsr $bc21			jsr find_name		; ( addr u addr u -- addr u nt|0 )
.b48c	b5 25		lda $25,x			lda DStack+1,x		; word found?
.b48e	d0 1b		bne $b4ab			bne _got_name_token
.b490	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.b491	e8		inx		                inx
.b492	20 fa af	jsr $affa	                jsr Number           ; ( addr u -- u|d )
.b495	a5 0a		lda $0a		                lda state		; interpreting?
.b497	f0 e3		beq $b47c	                beq _loop		;   we're done
.b499	a9 20		lda #$20	                lda #$20		; double cell number?
.b49b	24 0c		bit $0c		                bit status
.b49d	f0 06		beq $b4a5	                beq _single_number
.b49f	20 ba b7	jsr $b7ba			jsr Two_literal		; compile a double number
.b4a2	4c 7c b4	jmp $b47c			jmp _loop
.b4a5	20 a6 b6	jsr $b6a6	_single_number:	jsr Literal		; compile a single number
.b4a8	4c 7c b4	jmp $b47c			jmp _loop
.b4ab					_got_name_token:
.b4ab	20 80 c8	jsr $c880			jsr Nip
.b4ae	20 80 c8	jsr $c880			jsr Nip			; ( nt )
.b4b1	85 14		sta $14				sta tmp1+0		; save a work copy of nt
.b4b3	84 15		sty $15				sty tmp1+1
.b4b5	20 1b bd	jsr $bd1b			jsr Name_To_Int		; ( nt -- xt )
.b4b8	a0 84		ldy #$84			ldy #Wh_Flags		; get word flags, we'll need them shortly
.b4ba	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b4bc	a4 0a		ldy $0a				ldy state		; interpreting or compiling?
.b4be	d0 0f		bne $b4cf			bne _compile
.b4c0	29 01		and #$01			and #CO			; is the word COMPILE-ONLY?
.b4c2	f0 05		beq $b4c9			beq _execute
.b4c4	a9 f2		lda #$f2			lda #$100+err_CompileOnly	;   complain & quit
.b4c6	4c c4 b3	jmp $b3c4			jmp ThrowA
.b4c9	20 2b cd	jsr $cd2b	_execute:	jsr Execute		; EXECUTE the xt that is TOS
.b4cc	4c 7c b4	jmp $b47c	                jmp _loop
.b4cf					_compile:
.b4cf	29 04		and #$04			and #IM			; is the word IMMEDIATE?
.b4d1	d0 f6		bne $b4c9			bne _execute		;   IMMEDIATE word, execute now
.b4d3	20 ec b5	jsr $b5ec			jsr Compile_Comma_WithNT ; Compile the xt into the Dictionary
.b4d6	4c 7c b4	jmp $b47c			jmp _loop
.b4d9					_line_done:
.b4d9	e8		inx				inx			; drop stuff from PARSE_NAME
.b4da	e8		inx				inx
.b4db	e8		inx				inx
.b4dc	e8		inx				inx
.b4dd	60		rts				rts
>b4de	49 6d 6d 65 64 69 61 74		L1:	.text "Immediate"	;  name of word as a string, ending at wh_NameLastChar
>b4e6	65
>b4e7	09					.byte *-L1	;wh_NameLength	length of name
>b4e8	bc b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b4ea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b4eb	08					.byte NN	;wh_Flags	dictionary flags
=46183					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b4ec	a9 04		lda #$04	Immediate:	lda #IM
.b4ee	48		pha		SetFlag:	pha
.b4ef	20 b5 b9	jsr $b9b5			jsr current_to_dp
.b4f2	a0 84		ldy #$84			ldy #Wh_Flags
.b4f4	68		pla				pla
.b4f5	11 10		ora ($10),y			ora (dp),y
.b4f7	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b4f9					en = *	; remember here
>b4ea	0d					.byte CL	;wh_CodeLength
.b4f9	60		rts				rts
>b4fa	43 6f 6d 70 69 6c 65 2d		L1:	.text "Compile-only"	;  name of word as a string, ending at wh_NameLastChar
>b502	6f 6e 6c 79
>b506	0c					.byte *-L1	;wh_NameLength	length of name
>b507	67 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b509	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b50a	08					.byte NN	;wh_Flags	dictionary flags
=46214					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b50b	a9 01		lda #$01	Compile_Only:	lda #CO
.b50d	d0 df		bne $b4ee			bne SetFlag
=4					CL	.var *-(WordListLink+wh_Xt)
=$b50f					en = *	; remember here
>b509	04					.byte CL	;wh_CodeLength
>b50f	6e 65 76 65 72 2d 6e 61		L1:	.text "never-native"	;  name of word as a string, ending at wh_NameLastChar
>b517	74 69 76 65
>b51b	0c					.byte *-L1	;wh_NameLength	length of name
>b51c	86 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b51e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b51f	08					.byte NN	;wh_Flags	dictionary flags
=46235					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b520	20 b5 b9	jsr $b9b5	Never_Native:	jsr current_to_dp
.b523	a0 84		ldy #$84			ldy #Wh_Flags
.b525	b1 10		lda ($10),y			lda (dp),y
.b527	09 08		ora #$08			ora #NN		; set NN flag
.b529	29 fd		and #$fd			and #$ff-AN	; clear AN flag
.b52b	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b52d					en = *	; remember here
>b51e	0d					.byte CL	;wh_CodeLength
.b52d	60		rts				rts
>b52e	61 6c 77 61 79 73 2d 6e		L1:	.text "always-native"	;  name of word as a string, ending at wh_NameLastChar
>b536	61 74 69 76 65
>b53b	0d					.byte *-L1	;wh_NameLength	length of name
>b53c	9b b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b53e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b53f	08					.byte NN	;wh_Flags	dictionary flags
=46267					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b540	20 b5 b9	jsr $b9b5	Always_Native:	jsr current_to_dp
.b543	a0 84		ldy #$84			ldy #Wh_Flags
.b545	b1 10		lda ($10),y			lda (dp),y
.b547	09 02		ora #$02			ora #AN		; Make sure AN flag is set
.b549	29 f7		and #$f7			and #$ff-NN	; and NN flag is clear.
.b54b	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b54d					en = *	; remember here
>b53e	0d					.byte CL	;wh_CodeLength
.b54d	60		rts				rts
>b54e	61 6c 6c 6f 77 2d 6e 61		L1:	.text "allow-native"	;  name of word as a string, ending at wh_NameLastChar
>b556	74 69 76 65
>b55a	0c					.byte *-L1	;wh_NameLength	length of name
>b55b	bb b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b55d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b55e	08					.byte NN	;wh_Flags	dictionary flags
=46298					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b55f	20 b5 b9	jsr $b9b5	Allow_Native:	jsr current_to_dp
.b562	a0 84		ldy #$84			ldy #Wh_Flags	; offset for status byte
.b564	b1 10		lda ($10),y			lda (dp),y
.b566	29 f5		and #$f5			and #$ff-NN-AN	; AN and NN flag is clear.
.b568	91 10		sta ($10),y			sta (dp),y
=11					CL	.var *-(WordListLink+wh_Xt)
=$b56a					en = *	; remember here
>b55d	0b					.byte CL	;wh_CodeLength
.b56a	60		rts				rts
>b56b	6e 63 2d 6c 69 6d 69 74		L1:	.text "nc-limit"	;  name of word as a string, ending at wh_NameLastChar
>b573	08					.byte *-L1	;wh_NameLength	length of name
>b574	da b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b576	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b577	08					.byte NN	;wh_Flags	dictionary flags
=46323					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b578	a0 03		ldy #$03			ldy #>nc_limit
.b57a	a9 02		lda #$02			lda #<nc_limit
.b57c	4c f3 b6	jmp $b6f3			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b57f					en = *	; remember here
>b576	07					.byte CL	;wh_CodeLength
>b57f	73 74 72 69 70 2d 75 6e		L1:	.text "strip-underflow"	;  name of word as a string, ending at wh_NameLastChar
>b587	64 65 72 66 6c 6f 77
>b58e	0f					.byte *-L1	;wh_NameLength	length of name
>b58f	f3 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b591	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b592	08					.byte NN	;wh_Flags	dictionary flags
=46350					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b593	a0 03		ldy #$03			ldy #>uf_strip
.b595	a9 04		lda #$04			lda #<uf_strip
.b597	4c f3 b6	jmp $b6f3			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b59a					en = *	; remember here
>b591	07					.byte CL	;wh_CodeLength
>b59a	70 6f 73 74 70 6f 6e 65		L1:	.text "postpone"	;  name of word as a string, ending at wh_NameLastChar
>b5a2	08					.byte *-L1	;wh_NameLength	length of name
>b5a3	0e b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5a5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5a6	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=46370					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5a7					Postpone:
.b5a7	20 15 ba	jsr $ba15			jsr parse_name_check	; ( -- addr n )
.b5aa	20 4d bc	jsr $bc4d			jsr find_name_check	; ( -- nt | 0 )
.b5ad	b5 24		lda $24,x			lda DStack+0,x
.b5af	85 14		sta $14				sta tmp1+0
.b5b1	b5 25		lda $25,x			lda DStack+1,x
.b5b3	85 15		sta $15				sta tmp1+1
.b5b5	20 1b bd	jsr $bd1b			jsr Name_To_Int	; ( nt -- xt )
.b5b8	a0 84		ldy #$84			ldy #Wh_Flags		; IMMEDIATE word?
.b5ba	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b5bc	29 04		and #$04			and #IM
.b5be	f0 03		beq $b5c3			beq _not_immediate
.b5c0	4c ec b5	jmp $b5ec			jmp Compile_Comma_WithNT ; compile it
.b5c3					_not_immediate:
.b5c3	20 d9 b6	jsr $b6d9			jsr LDYA_Immed_Comma		; compile LDA #; LDY # with xt of the word
.b5c6	a0 b5		ldy #$b5			ldy #>Compile_Comma_WithNT_YA	; compile COMPILE,
.b5c8	a9 e9		lda #$e9			lda #<Compile_Comma_WithNT_YA
.b5ca	4c 43 cc	jmp $cc43			jmp Jsr_Comma_YA
=38					CL	.var *-(WordListLink+wh_Xt)
=$b5cd					en = *	; remember here
>b5a5	26					.byte CL	;wh_CodeLength
>b5cd	43 6f 6d 70 69 6c 65 2c		L1:	.text "Compile,"	;  name of word as a string, ending at wh_NameLastChar
>b5d5	08					.byte *-L1	;wh_NameLength	length of name
>b5d6	22 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5d8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5d9	08					.byte NN	;wh_Flags	dictionary flags
=46421					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5da	20 3b b3	jsr $b33b	Compile_Comma:	jsr PopYA		; pop xt (check stack, skippable)
.b5dd	20 f3 b6	jsr $b6f3	Compile_Comma_YA: jsr PushYA		; push xt
.b5e0	20 65 ce	jsr $ce65			jsr Dup			; ( xt xt )
.b5e3	20 c4 bc	jsr $bcc4			jsr Int_To_Name		; ( xt nt )	does a dictionary search
.b5e6	4c f4 b5	jmp $b5f4			jmp Compile_Comma_B
.b5e9	20 f3 b6	jsr $b6f3	Compile_Comma_WithNT_YA: jsr PushYA
.b5ec					Compile_Comma_WithNT:
.b5ec	20 65 ce	jsr $ce65			jsr Dup
.b5ef	a9 7b		lda #$7b			lda #$100-wh_xt		; convert xt to nt
.b5f1	20 4a c9	jsr $c94a			jsr Minus_A
.b5f4					Compile_Comma_B:
.b5f4	b5 24		lda $24,x			lda DStack+0,x		; tmp5 = nt
.b5f6	85 1c		sta $1c				sta tmp5+0
.b5f8	b5 25		lda $25,x			lda DStack+1,x
.b5fa	85 1d		sta $1d				sta tmp5+1
.b5fc	f0 36		beq $b634			beq _jsr		; no nt found?
.b5fe	a0 83		ldy #$83			ldy #wh_CodeLength
.b600	b1 1c		lda ($1c),y			lda (tmp5),y
.b602	95 24		sta $24,x			sta DStack+0,x		; ( xt u )
.b604	a0 84		ldy #$84			ldy #Wh_Flags		; save word flags
.b606	b1 1c		lda ($1c),y			lda (tmp5),y
.b608	95 25		sta $25,x			sta DStack+1,x
.b60a	29 02		and #$02			and #AN			; Always Native (AN) word?
.b60c	d0 2b		bne $b639			bne _inline
.b60e	b5 25		lda $25,x			lda DStack+1,x		; Never Native (NN) word?
.b610	29 08		and #$08			and #NN
.b612	d0 0e		bne $b622			bne _jsr_opt
.b614	ad 03 03	lda $0303			lda nc_limit+1		; wordsize<=nc_limit?
.b617	d0 20		bne $b639			bne _inline
.b619	ad 02 03	lda $0302			lda nc_limit+0
.b61c	d5 24		cmp $24,x			cmp DStack+0,x
.b61e	f0 02		beq $b622			beq _jsr_opt
.b620	b0 17		bcs $b639			bcs _inline
.b622					_jsr_opt:
.b622	ad 04 03	lda $0304			lda uf_strip
.b625	f0 0d		beq $b634			beq _jsr
.b627	b5 25		lda $25,x			lda DStack+1,x		; underflow strip & not stack strip?
.b629	49 10		eor #$10			eor #UF
.b62b	29 50		and #$50			and #UF+R6
.b62d	d0 05		bne $b634			bne _jsr
.b62f	a9 03		lda #$03			lda #3			; skip the underflow check
.b631	20 14 c9	jsr $c914			jsr Nos_Plus_A
.b634					_jsr:
.b634	e8		inx				inx			; Drop len or nt
.b635	e8		inx				inx
.b636	4c 40 cc	jmp $cc40			jmp Jsr_Comma		; compile jsr, return
.b639					_inline:
.b639	b5 25		lda $25,x			lda DStack+1,x		; this word contains RTS addr save & restore?
.b63b	29 40		and #$40			and #R6
.b63d	f0 0a		beq $b649			beq +
.b63f	a9 06		lda #$06			lda #6			;   Adjust xt: skip over the leading RTS addr save
.b641	20 14 c9	jsr $c914			jsr Nos_Plus_A
.b644	a9 f4		lda #$f4			lda #$f4		;   Adjust u: omit the leading RTS addr save & trailing RTS addr restore
.b646	20 4a c9	jsr $c94a			jsr minus_a
.b649					+
.b649	ad 04 03	lda $0304			lda uf_strip+0		; user wants underflow stripping?
.b64c	f0 10		beq $b65e			beq +
.b64e	b5 25		lda $25,x			lda DStack+1,x		; this word contains underflow checking?
.b650	29 10		and #$10			and #UF
.b652	f0 0a		beq $b65e			beq +
.b654	a9 03		lda #$03			lda #3			;   Adjust xt: Start after underflow check
.b656	20 14 c9	jsr $c914			jsr Nos_Plus_A
.b659	a9 fd		lda #$fd			lda #$fd		;   Adjust u: omit underflow check
.b65b	20 4a c9	jsr $c94a			jsr minus_a
.b65e					+
.b65e	b5 24		lda $24,x			lda DStack+0,x		; compile code bytes
.b660	f0 0c		beq $b66e			beq _copy_end
.b662	a1 26		lda ($26,x)	_copy_loop:	lda (DStack+2,x)
.b664	20 04 cc	jsr $cc04			jsr C_Comma_A
.b667	20 65 c9	jsr $c965			jsr NOS_One_Plus
.b66a	d6 24		dec $24,x			dec DStack+0,x
.b66c	d0 f4		bne $b662			bne _copy_loop
.b66e					_copy_end:
.b66e	4c 26 c4	jmp $c426			jmp Two_drop
=151					CL	.var *-(WordListLink+wh_Xt)
=$b671					en = *	; remember here
>b5d8	97					.byte CL	;wh_CodeLength
>b671	5b				L1:	.text "["	;  name of word as a string, ending at wh_NameLastChar
>b672	01					.byte *-L1	;wh_NameLength	length of name
>b673	55 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b675	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b676	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=46578					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b677	a5 0a		lda $0a		Left_Bracket:	lda state+0		; Already in the interpret state?
.b679	d0 05		bne $b680			bne Left_Bracket_NoCheck
.b67b	a9 69		lda #$69			lda #$100+err_NotCompiling
.b67d	4c c4 b3	jmp $b3c4			jmp ThrowA
.b680					Left_Bracket_NoCheck:
.b680	a9 00		lda #$00			lda #0
.b682	85 0a		sta $0a		Left_Bracket_3:	sta state+0
.b684	85 0b		sta $0b				sta state+1
=15					CL	.var *-(WordListLink+wh_Xt)
=$b686					en = *	; remember here
>b675	0f					.byte CL	;wh_CodeLength
.b686	60		rts				rts
>b687	5d				L1:	.text "]"	;  name of word as a string, ending at wh_NameLastChar
>b688	01					.byte *-L1	;wh_NameLength	length of name
>b689	f2 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b68b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b68c	0c					.byte IM+NN	;wh_Flags	dictionary flags
=46600					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b68d					Right_Bracket:
.b68d	a5 0a		lda $0a				lda state+0		; Already in the compile state?
.b68f	f0 05		beq $b696			beq +
.b691	a9 68		lda #$68			lda #$100+err_AlreadyCompiling ;   complain and quit
.b693	4c c4 b3	jmp $b3c4			jmp ThrowA
.b696					+
.b696	a9 ff		lda #$ff			lda #$FF
.b698	d0 e8		bne $b682			bne Left_Bracket_3
=13					CL	.var *-(WordListLink+wh_Xt)
=$b69a					en = *	; remember here
>b68b	0d					.byte CL	;wh_CodeLength
>b69a	4c 69 74 65 72 61 6c		L1:	.text "Literal"	;  name of word as a string, ending at wh_NameLastChar
>b6a1	07					.byte *-L1	;wh_NameLength	length of name
>b6a2	08 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6a4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6a5	1d					.byte IM+CO+UF+NN	;wh_Flags	dictionary flags
=46625					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6a6					Literal:
.b6a6	20 65 b3	jsr $b365			jsr underflow_1
.b6a9	20 af b6	jsr $b6af			jsr LitCompile		; compile load regs, choose a runtime routine
.b6ac	4c e9 b5	jmp $b5e9			jmp Compile_Comma_WithNT_YA ; compile JSR runtime
=9					CL	.var *-(WordListLink+wh_Xt)
=$b6af					en = *	; remember here
>b6a4	09					.byte CL	;wh_CodeLength
.b6af					LitCompile:
.b6af	b5 25		lda $25,x			lda DStack+1,x		; hi byte zero?
.b6b1	f0 08		beq $b6bb			beq _ZByte
.b6b3	20 d9 b6	jsr $b6d9			jsr ldya_immed_comma	; compile "ldy #; lda #" using TOS
.b6b6	a9 f3		lda #$f3			lda #<PushYA		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b6b8	a0 b6		ldy #$b6			ldy #>PushYA
.b6ba	60		rts				rts
.b6bb					_ZByte:
.b6bb	b4 24		ldy $24,x			ldy DStack+0,x		; is it 0 ?
.b6bd	f0 08		beq $b6c7			beq _zero
.b6bf	20 e0 b6	jsr $b6e0			jsr lda_immed_comma	; compile "lda #" using TOS
.b6c2	a9 35		lda #$35			lda #<PushZA		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b6c4	a0 b7		ldy #$b7			ldy #>PushZA
.b6c6	60		rts				rts
.b6c7	e8		inx		_zero:		inx			; drop
.b6c8	e8		inx				inx
.b6c9	a9 44		lda #$44			lda #<Zero		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b6cb	a0 b7		ldy #$b7			ldy #>Zero
.b6cd	60		rts				rts
>b6ce	4c 44 59 41 23 2c		L1:	.text "LDYA#,"	;  name of word as a string, ending at wh_NameLastChar
>b6d4	06					.byte *-L1	;wh_NameLength	length of name
>b6d5	21 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6d7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6d8	08					.byte NN	;wh_Flags	dictionary flags
=46676					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6d9					ldya_immed_comma:
.b6d9	a9 a0		lda #$a0			lda #$a0		; ldy #
.b6db	b4 25		ldy $25,x			ldy DStack+1,x
.b6dd	20 1e cc	jsr $cc1e			jsr Comma_YA
.b6e0					lda_immed_comma:
.b6e0	a9 a9		lda #$a9			lda #$a9		; lda #
.b6e2	20 04 cc	jsr $cc04			jsr C_Comma_A
.b6e5	4c 01 cc	jmp $cc01			jmp C_Comma
=15					CL	.var *-(WordListLink+wh_Xt)
=$b6e8					en = *	; remember here
>b6d7	0f					.byte CL	;wh_CodeLength
>b6e8	50 75 73 68 59 41		L1:	.text "PushYA"	;  name of word as a string, ending at wh_NameLastChar
>b6ee	06					.byte *-L1	;wh_NameLength	length of name
>b6ef	54 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6f1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6f2	00					.byte 0	;wh_Flags	dictionary flags
=46702					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6f3	ca		dex		PushYA:		dex
.b6f4	ca		dex				dex
.b6f5	95 24		sta $24,x			sta DStack+0,x
.b6f7	94 25		sty $25,x			sty DStack+1,x
=6					CL	.var *-(WordListLink+wh_Xt)
=$b6f9					en = *	; remember here
>b6f1	06					.byte CL	;wh_CodeLength
.b6f9	60		rts				rts
>b6fa	42 61 73 65			L1:	.text "Base"	;  name of word as a string, ending at wh_NameLastChar
>b6fe	04					.byte *-L1	;wh_NameLength	length of name
>b6ff	6e b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b701	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b702	08					.byte NN	;wh_Flags	dictionary flags
=46718					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b703	a0 03		ldy #$03			ldy #>base
.b705	a9 00		lda #$00			lda #<base
.b707	4c f3 b6	jmp $b6f3			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b70a					en = *	; remember here
>b701	07					.byte CL	;wh_CodeLength
>b70a	54 72 75 65			L1:	.text "True"	;  name of word as a string, ending at wh_NameLastChar
>b70e	04					.byte *-L1	;wh_NameLength	length of name
>b70f	7e b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b711	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b712	00					.byte 0	;wh_Flags	dictionary flags
=46734					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b713	a9 ff		lda #$ff	True:		lda #$FF
.b715	ca		dex		PushAA:		dex
.b716	ca		dex				dex
.b717	95 24		sta $24,x			sta DStack+0,x
.b719	95 25		sta $25,x			sta DStack+1,x
=8					CL	.var *-(WordListLink+wh_Xt)
=$b71b					en = *	; remember here
>b711	08					.byte CL	;wh_CodeLength
.b71b	60		rts				rts
>b71c	46 61 6c 73 65			L1:	.text "False"	;  name of word as a string, ending at wh_NameLastChar
>b721	05					.byte *-L1	;wh_NameLength	length of name
>b722	8e b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b724	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b725	08					.byte NN	;wh_Flags	dictionary flags
=46753					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b726	a9 00		lda #$00	False:		lda #0
.b728	f0 0b		beq $b735			beq PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b72a					en = *	; remember here
>b724	04					.byte CL	;wh_CodeLength
>b72a	50 75 73 68 5a 41		L1:	.text "PushZA"	;  name of word as a string, ending at wh_NameLastChar
>b730	06					.byte *-L1	;wh_NameLength	length of name
>b731	a1 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b733	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b734	00					.byte 0	;wh_Flags	dictionary flags
=46768					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b735	ca		dex		PushZA:		dex
.b736	ca		dex				dex
.b737	95 24		sta $24,x			sta DStack+0,x
.b739	a9 00		lda #$00			lda #0
.b73b	95 25		sta $25,x			sta DStack+1,x
=8					CL	.var *-(WordListLink+wh_Xt)
=$b73d					en = *	; remember here
>b733	08					.byte CL	;wh_CodeLength
.b73d	60		rts				rts
>b73e	30				L1:	.text "0"	;  name of word as a string, ending at wh_NameLastChar
>b73f	01					.byte *-L1	;wh_NameLength	length of name
>b740	b0 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b742	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b743	08					.byte NN	;wh_Flags	dictionary flags
=46783					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b744	a9 00		lda #$00	Zero:		lda #0
.b746	f0 ed		beq $b735			beq PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b748					en = *	; remember here
>b742	04					.byte CL	;wh_CodeLength
>b748	31				L1:	.text "1"	;  name of word as a string, ending at wh_NameLastChar
>b749	01					.byte *-L1	;wh_NameLength	length of name
>b74a	bf b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b74c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b74d	08					.byte NN	;wh_Flags	dictionary flags
=46793					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b74e	a9 01		lda #$01	One:		lda #1
.b750	d0 e3		bne $b735			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b752					en = *	; remember here
>b74c	04					.byte CL	;wh_CodeLength
>b752	32				L1:	.text "2"	;  name of word as a string, ending at wh_NameLastChar
>b753	01					.byte *-L1	;wh_NameLength	length of name
>b754	c9 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b756	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b757	08					.byte NN	;wh_Flags	dictionary flags
=46803					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b758	a9 02		lda #$02	Two:		lda #2
.b75a	d0 d9		bne $b735			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b75c					en = *	; remember here
>b756	04					.byte CL	;wh_CodeLength
>b75c	42 6c				L1:	.text "Bl"	;  name of word as a string, ending at wh_NameLastChar
>b75e	02					.byte *-L1	;wh_NameLength	length of name
>b75f	d3 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b761	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b762	08					.byte NN	;wh_Flags	dictionary flags
=46814					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b763	a9 20		lda #$20	Bl:		lda #AscSP
.b765	d0 ce		bne $b735			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b767					en = *	; remember here
>b761	04					.byte CL	;wh_CodeLength
>b767	3e 49 6e			L1:	.text ">In"	;  name of word as a string, ending at wh_NameLastChar
>b76a	03					.byte *-L1	;wh_NameLength	length of name
>b76b	de b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b76d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b76e	08					.byte NN	;wh_Flags	dictionary flags
=46826					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b76f	a9 08		lda #$08			lda #ToIn
.b771	4c 35 b7	jmp $b735			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b774					en = *	; remember here
>b76d	05					.byte CL	;wh_CodeLength
>b774	53 74 61 74 65			L1:	.text "State"	;  name of word as a string, ending at wh_NameLastChar
>b779	05					.byte *-L1	;wh_NameLength	length of name
>b77a	ea b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b77c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b77d	08					.byte NN	;wh_Flags	dictionary flags
=46841					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b77e	a9 0a		lda #$0a			lda #state
.b780	4c 35 b7	jmp $b735			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b783					en = *	; remember here
>b77c	05					.byte CL	;wh_CodeLength
>b783	64 70				L1:	.text "dp"	;  name of word as a string, ending at wh_NameLastChar
>b785	02					.byte *-L1	;wh_NameLength	length of name
>b786	f9 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b788	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b789	08					.byte NN	;wh_Flags	dictionary flags
=46853					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b78a	a9 10		lda #$10			lda #dp
.b78c	4c 35 b7	jmp $b735			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b78f					en = *	; remember here
>b788	05					.byte CL	;wh_CodeLength
>b78f	54 6d 70 31			L1:	.text "Tmp1"	;  name of word as a string, ending at wh_NameLastChar
>b793	04					.byte *-L1	;wh_NameLength	length of name
>b794	05 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b796	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b797	08					.byte NN	;wh_Flags	dictionary flags
=46867					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b798	a9 14		lda #$14			lda #tmp1
.b79a	4c 35 b7	jmp $b735			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b79d					en = *	; remember here
>b796	05					.byte CL	;wh_CodeLength
>b79d	44 53 74 61 63 6b		L1:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
>b7a3	06					.byte *-L1	;wh_NameLength	length of name
>b7a4	13 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7a6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7a7	08					.byte NN	;wh_Flags	dictionary flags
=46883					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7a8	a9 24		lda #$24			lda #DStack
.b7aa	4c 35 b7	jmp $b735			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b7ad					en = *	; remember here
>b7a6	05					.byte CL	;wh_CodeLength
>b7ad	32 4c 69 74 65 72 61 6c		L1:	.text "2Literal"	;  name of word as a string, ending at wh_NameLastChar
>b7b5	08					.byte *-L1	;wh_NameLength	length of name
>b7b6	23 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7b8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7b9	1c					.byte UF+IM+NN	;wh_Flags	dictionary flags
=46901					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7ba					Two_literal:
.b7ba	20 7a b3	jsr $b37a			jsr underflow_2 ; double number
.b7bd	20 83 ce	jsr $ce83			jsr Swap
.b7c0	20 a6 b6	jsr $b6a6			jsr Literal	; do lo cell
.b7c3	4c a6 b6	jmp $b6a6			jmp Literal	; do hi cell
=12					CL	.var *-(WordListLink+wh_Xt)
=$b7c6					en = *	; remember here
>b7b8	0c					.byte CL	;wh_CodeLength
>b7c6	53 4c 69 74 65 72 61 6c		L1:	.text "SLiteral"	;  name of word as a string, ending at wh_NameLastChar
>b7ce	08					.byte *-L1	;wh_NameLength	length of name
>b7cf	35 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7d2	1d					.byte CO+IM+UF+NN	;wh_Flags	dictionary flags
=46926					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7d3					SLiteral:
.b7d3	20 7a b3	jsr $b37a			jsr underflow_2
.b7d6	20 f6 b7	jsr $b7f6			jsr SLiteral_Start	; compile header
.b7d9	4c ea b7	jmp $b7ea			jmp _Move_Test
.b7dc	a1 28		lda ($28,x)	_Move_Loop:	lda (DStack+4,x)
.b7de	20 04 cc	jsr $cc04			jsr C_Comma_A
.b7e1	f6 28		inc $28,x			inc DStack+4,x
.b7e3	d0 02		bne $b7e7			bne +
.b7e5	f6 29		inc $29,x			inc DStack+5,x
.b7e7					+
.b7e7	20 41 c9	jsr $c941			jsr NOS_One_Minus
.b7ea	b5 26		lda $26,x	_Move_Test:	lda DStack+2,x
.b7ec	15 27		ora $27,x			ora DStack+3,x
.b7ee	d0 ec		bne $b7dc			bne _Move_Loop
.b7f0	20 03 b8	jsr $b803			jsr SLiteral_End
.b7f3	4c 26 c4	jmp $c426			jmp Two_Drop		; clean up and leave
=35					CL	.var *-(WordListLink+wh_Xt)
=$b7f6					en = *	; remember here
>b7d1	23					.byte CL	;wh_CodeLength
.b7f6					SLiteral_Start:
.b7f6	a9 14		lda #$14			lda #<SLiteral_runtime	; compile JSR SLiteral_Runtime
.b7f8	a0 b8		ldy #$b8			ldy #>SLiteral_runtime
.b7fa	20 43 cc	jsr $cc43			jsr Jsr_Comma_YA
.b7fd	20 27 c9	jsr $c927			jsr Here		; push addr of start of JMP
.b800	4c 5a cc	jmp $cc5a			jmp Jmp_Comma_YA	; compile JMP around string (dummy addr)
.b803					SLiteral_End:
.b803	20 5b c9	jsr $c95b			jsr One_Plus
.b806	a5 00		lda $00				lda cp+0		; Update the address of the jump to HERE.
.b808	81 24		sta ($24,x)			sta (DStack+0,x)
.b80a	20 5b c9	jsr $c95b			jsr One_Plus
.b80d	a5 01		lda $01				lda cp+1
.b80f	81 24		sta ($24,x)			sta (DStack+0,x)
.b811	e8		inx				inx			; drop herej
.b812	e8		inx				inx
.b813	60		rts				rts
.b814					SLiteral_Runtime:
.b814	86 16		stx $16				stx tmp2	; save data stack index
.b816	ba		tsx				tsx
.b817	bd 01 01	lda $0101,x	SLiteral_Run2:	lda RStack+1,x	; tmp1= RTS addr
.b81a	85 14		sta $14				sta tmp1+0
.b81c	bd 02 01	lda $0102,x			lda RStack+2,x
.b81f	85 15		sta $15				sta tmp1+1
.b821	a6 16		ldx $16				ldx tmp2	; restore data stack index
.b823	ca		dex				dex		; push string addr
.b824	ca		dex				dex
.b825	18		clc				clc
.b826	a5 14		lda $14				lda tmp1+0
.b828	69 04		adc #$04			adc #3+1	;   just after the following JMP + correcting for JSR behavior
.b82a	95 24		sta $24,x			sta DStack+0,x
.b82c	a5 15		lda $15				lda tmp1+1
.b82e	69 00		adc #$00			adc #0
.b830	95 25		sta $25,x			sta DStack+1,x
.b832	ca		dex				dex		; push string length
.b833	ca		dex				dex
.b834	38		sec				sec
.b835	a0 02		ldy #$02			ldy #2		;   = string_end - string_addr
.b837	b1 14		lda ($14),y			lda (tmp1),y
.b839	f5 26		sbc $26,x			sbc DStack+2,x
.b83b	95 24		sta $24,x			sta DStack+0,x
.b83d	c8		iny				iny
.b83e	b1 14		lda ($14),y			lda (tmp1),y
.b840	f5 27		sbc $27,x			sbc DStack+3,x
.b842	95 25		sta $25,x			sta DStack+1,x
.b844	60		rts				rts
>b845	2e 22				L1:	.text '."'	;  name of word as a string, ending at wh_NameLastChar
>b847	02					.byte *-L1	;wh_NameLength	length of name
>b848	4e b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b84a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b84b	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=47047					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b84c					Dot_quote:
.b84c	20 5d b8	jsr $b85d			jsr S_Quote		; compile the string literal
.b84f	a0 cc		ldy #$cc			ldy #>Type		; compile: print string
.b851	a9 ed		lda #$ed			lda #<Type
.b853	4c 43 cc	jmp $cc43			jmp Jsr_Comma_YA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b856					en = *	; remember here
>b84a	0a					.byte CL	;wh_CodeLength
>b856	53 22				L1:	.text 'S"'	;  name of word as a string, ending at wh_NameLastChar
>b858	02					.byte *-L1	;wh_NameLength	length of name
>b859	c7 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b85b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b85c	0c					.byte IM+NN	;wh_Flags	dictionary flags
=47064					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b85d					S_Quote:
.b85d	a9 00		lda #$00			lda #0		; Don't handle escaped chars.
.b85f					S_Quote_start:
.b85f	48		pha				pha			; save "handle escaped chars" flag
.b860	a5 0a		lda $0a				lda state		; compiling?
.b862	f0 06		beq $b86a			beq _15
.b864	20 f6 b7	jsr $b7f6			jsr SLiteral_Start	; compile SLiteral header
.b867	4c 6d b8	jmp $b86d			jmp _19
.b86a	20 27 c9	jsr $c927	_15:		jsr Here		; remember start addr
.b86d					_19:
.b86d	68		pla				pla			; init t2 flags
.b86e	20 35 b7	jsr $b735			jsr PushZA
.b871	20 44 b7	jsr $b744			jsr Zero		; init t3 flags
.b874					_savechars_loop:
.b874	a5 08		lda $08				lda toin+0		; LSB
.b876	c5 06		cmp $06				cmp ciblen+0
.b878	a5 09		lda $09				lda toin+1		; MSB
.b87a	e5 07		sbc $07				sbc ciblen+1
.b87c	90 10		bcc $b88e			bcc _input_fine		; input buffer empty?
.b87e	20 9c c1	jsr $c19c			jsr Refill		; Refill it  ( -- f )
.b881	b5 24		lda $24,x			lda DStack+0,x		; Check result of refill.
.b883	d0 05		bne $b88a			bne +
.b885	a9 6b		lda #$6b			lda #$100+err_refill	; Something when wrong with refill.
.b887	4c c4 b3	jmp $b3c4			jmp ThrowA
.b88a	e8		inx		+		inx			; Drop the refill flag
.b88b	e8		inx				inx
.b88c	d0 e6		bne $b874			bne _savechars_loop	; jump back up to the empty check, just in
.b88e					_input_fine:
.b88e	18		clc				clc			; tmp1= A= the char at Cib+ToIn
.b88f	a5 04		lda $04				lda cib+0
.b891	85 14		sta $14				sta tmp1+0
.b893	a5 05		lda $05				lda cib+1
.b895	65 09		adc $09				adc toin+1
.b897	85 15		sta $15				sta tmp1+1
.b899	a4 08		ldy $08				ldy ToIn
.b89b	b1 14		lda ($14),y			lda (tmp1),y
.b89d	85 14		sta $14				sta tmp1
.b89f	e6 08		inc $08				inc toin+0		; Move on to the next character.
.b8a1	d0 02		bne $b8a5			bne +
.b8a3	e6 09		inc $09				inc toin+1
.b8a5					+
.b8a5	b4 26		ldy $26,x			ldy DStack+2,x		; handling escaped characters?
.b8a7	30 03		bmi $b8ac			bmi +
.b8a9	4c 4f b9	jmp $b94f			jmp _regular_char
.b8ac					+
.b8ac	b4 27		ldy $27,x			ldy DStack+3,x  		; already seen the backslash?
.b8ae	30 03		bmi $b8b3			bmi +
.b8b0	4c 45 b9	jmp $b945			jmp _not_escaped
.b8b3					+
.b8b3	84 15		sty $15				sty tmp1+1
.b8b5	24 15		bit $15				bit tmp1+1		; in the middle of a \x sequence ?
.b8b7	70 25		bvs $b8de			bvs _check_esc_chars
.b8b9	a9 01		lda #$01			lda #1
.b8bb	24 15		bit $15				bit tmp1+1
.b8bd	d0 11		bne $b8d0			bne _esc_x_second_digit
.b8bf	c8		iny				iny			; Adjust flag for second digit next time.
.b8c0	94 27		sty $27,x			sty DStack+3,x
.b8c2	a5 14		lda $14				lda tmp1+0		; Get the char again.
.b8c4	20 72 b9	jsr $b972			jsr convert_hex_value	; Convert to hex
.b8c7	0a		asl a				asl			; This is the upper nybble, so move it up.
.b8c8	0a		asl a				asl
.b8c9	0a		asl a				asl
.b8ca	0a		asl a				asl
.b8cb	95 24		sta $24,x			sta DStack+0,x		; Save it for later.
.b8cd	4c 56 b9	jmp $b956			jmp _next_character
.b8d0					_esc_x_second_digit:
.b8d0	a9 00		lda #$00			lda #0			; Clear the escaped character flag
.b8d2	95 27		sta $27,x			sta DStack+3,x		;   (because we are handling it right here)
.b8d4	a5 14		lda $14				lda tmp1+0		; Convert to hex
.b8d6	20 72 b9	jsr $b972			jsr convert_hex_value
.b8d9	15 24		ora $24,x			ora DStack+0,x		; combine with value in t3
.b8db	4c 53 b9	jmp $b953			jmp _save_character
.b8de					_check_esc_chars:
.b8de	a0 00		ldy #$00			ldy #0
.b8e0	94 27		sty $27,x			sty DStack+3,x
.b8e2	a8		tay				tay
.b8e3	a9 07		lda #$07			lda #AscBELL	      ; BEL (ASCII value 7)
.b8e5	c0 61		cpy #$61			cpy #'a'
.b8e7	f0 6a		beq $b953			beq _save_character
.b8e9	a9 08		lda #$08			lda #AscBS	      ; Backspace (ASCII value 8)
.b8eb	c0 62		cpy #$62			cpy #'b'
.b8ed	f0 64		beq $b953			beq _save_character
.b8ef	a9 1b		lda #$1b			lda #AscESC	       ; ESC (ASCII value 27)
.b8f1	c0 65		cpy #$65			cpy #'e'
.b8f3	f0 5e		beq $b953			beq _save_character
.b8f5	a9 0c		lda #$0c			lda #AscFF	       ; FF (ASCII value 12)
.b8f7	c0 66		cpy #$66			cpy #'f'
.b8f9	f0 58		beq $b953			beq _save_character
.b8fb	a9 0a		lda #$0a			lda #AscLF	       ; LF (ASCII value 10)
.b8fd	c0 6c		cpy #$6c			cpy #'l'
.b8ff	f0 52		beq $b953			beq _save_character
.b901	c0 6e		cpy #$6e			cpy #'n'
.b903	f0 4e		beq $b953			beq _save_character
.b905	c0 6d		cpy #$6d			cpy #'m'
.b907	d0 09		bne $b912			bne +
.b909	a9 0d		lda #$0d			lda #AscCR		; CR/LF pair (ASCII values 13, 10)
.b90b	20 04 cc	jsr $cc04			jsr C_Comma_A
.b90e	a9 0a		lda #$0a			lda #AscLF
.b910	d0 41		bne $b953			bne _save_character
.b912					+
.b912	a9 22		lda #$22			lda #AscDQuote		; Double quote (ASCII value 34)
.b914	c0 71		cpy #$71			cpy #'q'
.b916	f0 3b		beq $b953			beq _save_character
.b918	c0 22		cpy #$22			cpy #AscDQuote
.b91a	f0 37		beq $b953			beq _save_character
.b91c	a9 0d		lda #$0d			lda #AscCR		; CR (ASCII value 13)
.b91e	c0 72		cpy #$72			cpy #'r'
.b920	f0 31		beq $b953			beq _save_character
.b922	a9 09		lda #$09			lda #AscHT		; Horizontal TAB (ASCII value 9)
.b924	c0 74		cpy #$74			cpy #'t'
.b926	f0 2b		beq $b953			beq _save_character
.b928	a9 0b		lda #$0b			lda #AscVT		; Vertical TAB (ASCII value 11)
.b92a	c0 76		cpy #$76			cpy #'v'
.b92c	f0 25		beq $b953			beq _save_character
.b92e	a9 00		lda #$00			lda #0			; NULL (ASCII value 0)
.b930	c0 7a		cpy #$7a			cpy #'z'
.b932	f0 1f		beq $b953			beq _save_character
.b934					_check_esc_x:
.b934	c0 78		cpy #$78			cpy #'x'
.b936	d0 06		bne $b93e			bne +
.b938	a9 be		lda #$be			lda #$BE	; Clear bits 6 and 0
.b93a	95 27		sta $27,x			sta DStack+3,x
.b93c	d0 18		bne $b956			bne _next_character
.b93e					+
.b93e	a9 5c		lda #$5c			lda #AscBackslash	; Backslash (ASCII value 92)
.b940	c0 5c		cpy #$5c			cpy #AscBackslash
.b942	f0 0f		beq $b953			beq _save_character
.b944	98		tya				tya
.b945					_not_escaped:
.b945	c9 5c		cmp #$5c			cmp #$5C	; The backslash char
.b947	d0 06		bne $b94f			bne _regular_char
.b949	a9 ff		lda #$ff			lda #$FF
.b94b	95 27		sta $27,x			sta DStack+3,x
.b94d	d0 07		bne $b956			bne _next_character
.b94f					_regular_char:
.b94f	c9 22		cmp #$22			cmp #AscDQuote		; ASCII for "
.b951	f0 06		beq $b959			beq _found_string_end
.b953					_save_character:
.b953	20 04 cc	jsr $cc04			jsr C_Comma_A		; compile this character into the dictionary
.b956					_next_character:
.b956	4c 74 b8	jmp $b874			jmp _savechars_loop
.b959					_found_string_end:
.b959	e8		inx				inx			; Drop t3
.b95a	e8		inx				inx
.b95b	a5 0a		lda $0a				lda state		; What happens next depends on the state (which is bad, but
.b95d	d0 0e		bne $b96d			bne _cmpl		; that's the way it works at the moment).
.b95f	38		sec				sec			; TOS= length of string = Here - start_addr
.b960	a5 00		lda $00				lda cp+0
.b962	f5 26		sbc $26,x			sbc DStack+2,x
.b964	95 24		sta $24,x			sta DStack+0,x		;   LSB
.b966	a5 01		lda $01				lda cp+1
.b968	f5 27		sbc $27,x			sbc DStack+3,x
.b96a	95 25		sta $25,x			sta DStack+1,x		;   MSB
.b96c	60		rts				rts			; ( startaddr u )
.b96d					_cmpl:
.b96d	e8		inx				inx			; Drop t2
.b96e	e8		inx				inx
.b96f	4c 03 b8	jmp $b803			jmp SLiteral_End	; ( jmpaddr )
=277					CL	.var *-(WordListLink+wh_Xt)
=$ff					CL	 .var $ff
=$b972					en = *	; remember here
>b85b	ff					.byte CL	;wh_CodeLength
.b972					convert_hex_value:
.b972	c9 41		cmp #$41			cmp #'A'
.b974	90 05		bcc $b97b			bcc _digit
.b976	29 1f		and #$1f	_alpha:		and #$1F		; Make it uppercase.
.b978	69 08		adc #$08			adc #9-1		; gives value 10 for 'A'
.b97a	60		rts				rts
.b97b					_digit:
.b97b	e9 2f		sbc #$2f			sbc #'0'-1
.b97d	60		rts				rts
>b97e	53 5c 22			L1:	.text 'S\"'	;  name of word as a string, ending at wh_NameLastChar
>b981	03					.byte *-L1	;wh_NameLength	length of name
>b982	d8 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b984	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b985	0c					.byte IM+NN	;wh_Flags	dictionary flags
=47361					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b986					S_Backslash_Quote:
.b986	a9 ff		lda #$ff			lda #$ff	; Do handle escaped chars.
.b988	4c 5f b8	jmp $b85f			jmp S_Quote_start
=5					CL	.var *-(WordListLink+wh_Xt)
=$b98b					en = *	; remember here
>b984	05					.byte CL	;wh_CodeLength
>b98b	4c 61 74 65 73 74 58 74		L1:	.text "LatestXt"	;  name of word as a string, ending at wh_NameLastChar
>b993	08					.byte *-L1	;wh_NameLength	length of name
>b994	01 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b996	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b997	08					.byte NN	;wh_Flags	dictionary flags
=47379					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b998	20 ab b9	jsr $b9ab	LatestXt:	jsr LatestNt	; ( nt )
.b99b	4c 1b bd	jmp $bd1b			jmp Name_To_Int	; ( xt )
=6					CL	.var *-(WordListLink+wh_Xt)
=$b99e					en = *	; remember here
>b996	06					.byte CL	;wh_CodeLength
>b99e	4c 61 74 65 73 74 4e 74		L1:	.text "LatestNt"	;  name of word as a string, ending at wh_NameLastChar
>b9a6	08					.byte *-L1	;wh_NameLength	length of name
>b9a7	13 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b9a9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b9aa	08					.byte NN	;wh_Flags	dictionary flags
=47398					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b9ab	20 b5 b9	jsr $b9b5	LatestNt:	jsr current_to_dp
.b9ae	a5 10		lda $10				lda dp+0
.b9b0	a4 11		ldy $11				ldy dp+1
.b9b2	4c f3 b6	jmp $b6f3			jmp PushYA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b9b5					en = *	; remember here
>b9a9	0a					.byte CL	;wh_CodeLength
.b9b5					current_to_dp:
.b9b5	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.b9b8	0a		asl a				asl			; dp= wordlists[A]
.b9b9	a8		tay				tay
.b9ba	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.b9bd	85 10		sta $10				sta dp+0
.b9bf	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.b9c2	85 11		sta $11				sta dp+1
.b9c4	60		rts				rts
.b9c5					dp_to_current:
.b9c5	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.b9c8	0a		asl a		                asl			; wordlists[A]=dp
.b9c9	a8		tay		                tay
.b9ca	a5 10		lda $10		                lda dp+0
.b9cc	99 12 03	sta $0312,y			sta WordlistsV+0,y
.b9cf	a5 11		lda $11		                lda dp+1
.b9d1	99 13 03	sta $0313,y	                sta WordlistsV+1,y
.b9d4	60		rts		                rts
>b9d5	50 61 72 73 65 2d 4e 61		L1:	.text "Parse-Name"	;  name of word as a string, ending at wh_NameLastChar
>b9dd	6d 65
>b9df	0a					.byte *-L1	;wh_NameLength	length of name
>b9e0	26 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b9e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b9e3	08					.byte NN	;wh_Flags	dictionary flags
=47455					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b9e4					Parse_Name:
.b9e4	a5 04		lda $04				lda cib+0		; tmp2= cib+(toin & $ff00)
.b9e6	85 16		sta $16				sta tmp2+0
.b9e8	18		clc				clc
.b9e9	a5 05		lda $05				lda cib+1
.b9eb	65 09		adc $09				adc toin+1
.b9ed	85 17		sta $17				sta tmp2+1
.b9ef	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.b9f1					_skip_loop:
.b9f1	c4 06		cpy $06				cpy ciblen+0		; more chars left?
.b9f3	a5 09		lda $09				lda toin+1
.b9f5	e5 07		sbc $07				sbc ciblen+1
.b9f7	b0 11		bcs $ba0a			bcs _empty_line
.b9f9	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.b9fb	c9 21		cmp #$21			cmp #AscSP+1		; is_whitespace
.b9fd	b0 10		bcs $ba0f			bcs _char_found
.b9ff	c8		iny				iny			; increment toin
.ba00	84 08		sty $08				sty toin+0
.ba02	d0 ed		bne $b9f1			bne _skip_loop
.ba04	e6 09		inc $09				inc toin+1
.ba06	e6 17		inc $17				inc tmp2+1
.ba08	d0 e7		bne $b9f1			bne _skip_loop
.ba0a					_empty_line:
.ba0a	ca		dex				dex			; junk address
.ba0b	ca		dex				dex
.ba0c	4c 44 b7	jmp $b744			jmp Zero		; length=0
.ba0f					_char_found:
.ba0f	20 63 b7	jsr $b763			jsr Bl			; push delimiter char
.ba12	4c 2c ba	jmp $ba2c			jmp Parse
=49					CL	.var *-(WordListLink+wh_Xt)
=$ba15					en = *	; remember here
>b9e2	31					.byte CL	;wh_CodeLength
.ba15					parse_name_check:
.ba15	20 e4 b9	jsr $b9e4			jsr parse_name		; get character from string
.ba18	b5 24		lda $24,x			lda DStack+0,x		; empty string?
.ba1a	f0 01		beq $ba1d			beq _empty
.ba1c	60		rts				rts
.ba1d	a9 f3		lda #$f3	_empty:		lda #$100+err_UndefinedWord	; complain & abort
.ba1f	4c c4 b3	jmp $b3c4			jmp ThrowA
>ba22	50 61 72 73 65			L1:	.text "Parse"	;  name of word as a string, ending at wh_NameLastChar
>ba27	05					.byte *-L1	;wh_NameLength	length of name
>ba28	5f b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba2a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba2b	08					.byte NN	;wh_Flags	dictionary flags
=47527					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba2c	20 1f b3	jsr $b31f	Parse:		jsr PopA		; pop c (check for underflow)
.ba2f	85 1c		sta $1c		Parse_A:	sta tmp5		; save delimiter
.ba31	ca		dex				dex			; alloc space for addr
.ba32	ca		dex				dex
.ba33	ca		dex				dex			; alloc space for length
.ba34	ca		dex				dex
.ba35	18		clc				clc			; addr= cib+toin
.ba36	a5 08		lda $08				lda toin+0
.ba38	65 04		adc $04				adc cib+0
.ba3a	95 26		sta $26,x			sta DStack+2,x
.ba3c	a5 09		lda $09				lda toin+1
.ba3e	65 05		adc $05				adc cib+1
.ba40	95 27		sta $27,x			sta DStack+3,x
.ba42	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.ba44	84 14		sty $14				sty tmp1+0
.ba46	a5 04		lda $04				lda cib+0		; tmp2= cib + (toin & $ff00)
.ba48	85 16		sta $16				sta tmp2+0
.ba4a	18		clc				clc
.ba4b	a5 09		lda $09				lda toin+1		; tmp1= toin
.ba4d	85 15		sta $15				sta tmp1+1
.ba4f	65 05		adc $05				adc cib+1
.ba51	85 17		sta $17				sta tmp2+1
.ba53	a9 00		lda #$00			lda #0		; Initialize the offset we use to adjust EOL or found delimiter
.ba55	85 1d		sta $1d				sta tmp5+1
.ba57					_loop:
.ba57	c4 06		cpy $06				cpy ciblen+0		; end of string?
.ba59	a5 09		lda $09				lda toin+1
.ba5b	e5 07		sbc $07				sbc ciblen+1
.ba5d	b0 1d		bcs $ba7c			bcs _eol
.ba5f	a5 1c		lda $1c				lda tmp5+0		; get delimiter
.ba61	c9 20		cmp #$20			cmp #AscSP		; is it whitespace?
.ba63	d0 08		bne $ba6d			bne _not_whitespace
.ba65	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.ba67	c9 21		cmp #$21			cmp #AscSP+1		; we're looking for all whitespace
.ba69	90 0f		bcc $ba7a			bcc _found_delimiter
.ba6b	b0 04		bcs $ba71			bcs _not_delimiter
.ba6d	d1 16		cmp ($16),y	_not_whitespace: cmp (tmp2),y		; compare delimter to cib[toin]
.ba6f	f0 09		beq $ba7a			beq _found_delimiter
.ba71					_not_delimiter:
.ba71	c8		iny				iny			; next character
.ba72	d0 e3		bne $ba57			bne _loop
.ba74	e6 09		inc $09				inc toin+1
.ba76	e6 17		inc $17				inc tmp2+1
.ba78	d0 dd		bne $ba57			bne _loop
.ba7a					_found_delimiter:
.ba7a	e6 1d		inc $1d				inc tmp5+1
.ba7c					_eol:
.ba7c	38		sec				sec			; length = toin - tmp1
.ba7d	98		tya				tya
.ba7e	e5 14		sbc $14				sbc tmp1+0
.ba80	95 24		sta $24,x			sta DStack+0,x
.ba82	a5 09		lda $09				lda toin+1
.ba84	e5 15		sbc $15				sbc tmp1+1
.ba86	95 25		sta $25,x			sta DStack+1,x
.ba88	18		clc				clc			; toin = toin + delimiter_offset
.ba89	98		tya				tya
.ba8a	65 1d		adc $1d				adc tmp5+1
.ba8c	85 08		sta $08				sta toin+0
.ba8e	90 02		bcc $ba92			bcc +
.ba90	e6 09		inc $09				inc toin+1
.ba92					+
=102					CL	.var *-(WordListLink+wh_Xt)
=$ba92					en = *	; remember here
>ba2a	66					.byte CL	;wh_CodeLength
.ba92	60		rts				rts
>ba93	45 78 65 63 75 74 65 2d		L1:	.text "Execute-Parsing"	;  name of word as a string, ending at wh_NameLastChar
>ba9b	50 61 72 73 69 6e 67
>baa2	0f					.byte *-L1	;wh_NameLength	length of name
>baa3	a7 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>baa5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>baa6	18					.byte UF+NN	;wh_Flags	dictionary flags
=47650					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.baa7					Execute_parsing:
.baa7	20 7f b3	jsr $b37f			jsr underflow_3
.baaa	20 18 c3	jsr $c318			jsr Input_To_R		; save existing input for later
.baad	20 8f cd	jsr $cd8f			jsr Not_Rot		; -ROT ( xt addr u )
.bab0	20 3b b3	jsr $b33b			jsr PopYA		; TOS is new ciblen
.bab3	85 06		sta $06				sta ciblen+0
.bab5	84 07		sty $07				sty ciblen+1
.bab7	20 3b b3	jsr $b33b			jsr PopYA		; NOS is new cib
.baba	85 04		sta $04				sta cib+0
.babc	84 05		sty $05				sty cib+1
.babe	a9 00		lda #$00			lda #0
.bac0	85 08		sta $08				sta toin+0		; Set >IN to zero
.bac2	85 09		sta $09				sta toin+1
.bac4	20 2b cd	jsr $cd2b			jsr Execute
.bac7	20 3a c3	jsr $c33a			jsr R_To_Input		; restore
=35					CL	.var *-(WordListLink+wh_Xt)
=$baca					en = *	; remember here
>baa5	23					.byte CL	;wh_CodeLength
.baca	60		rts				rts
>bacb	53 6f 75 72 63 65		L1:	.text "Source"	;  name of word as a string, ending at wh_NameLastChar
>bad1	06					.byte *-L1	;wh_NameLength	length of name
>bad2	22 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bad4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bad5	08					.byte NN	;wh_Flags	dictionary flags
=47697					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bad6					Source:
.bad6	a5 04		lda $04				lda cib+0	; push address
.bad8	a4 05		ldy $05				ldy cib+1
.bada	20 f3 b6	jsr $b6f3			jsr PushYA
.badd	a5 06		lda $06				lda ciblen+0	; push size, return
.badf	a4 07		ldy $07				ldy ciblen+1
.bae1	4c f3 b6	jmp $b6f3			jmp PushYA
=14					CL	.var *-(WordListLink+wh_Xt)
=$bae4					en = *	; remember here
>bad4	0e					.byte CL	;wh_CodeLength
>bae4	53 6f 75 72 63 65 2d 49		L1:	.text "Source-Id"	;  name of word as a string, ending at wh_NameLastChar
>baec	64
>baed	09					.byte *-L1	;wh_NameLength	length of name
>baee	51 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>baf0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>baf1	08					.byte NN	;wh_Flags	dictionary flags
=47725					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.baf2	a5 02		lda $02		Source_Id:	lda insrc+0
.baf4	a4 03		ldy $03				ldy insrc+1
.baf6	4c f3 b6	jmp $b6f3			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$baf9					en = *	; remember here
>baf0	07					.byte CL	;wh_CodeLength
>baf9	45 78 69 74			L1:	.text "Exit"	;  name of word as a string, ending at wh_NameLastChar
>bafd	04					.byte *-L1	;wh_NameLength	length of name
>bafe	6d ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb00	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb01	03					.byte AN+CO	;wh_Flags	dictionary flags
=47741					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb02					Exit:
.bb02	60		rts				rts		; keep before FEnd so it gets inlined
=1					CL	.var *-(WordListLink+wh_Xt)
=$bb03					en = *	; remember here
>bb00	01					.byte CL	;wh_CodeLength
>bb03	3b				L1:	.text ";"	;  name of word as a string, ending at wh_NameLastChar
>bb04	01					.byte *-L1	;wh_NameLength	length of name
>bb05	7d ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb07	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb08	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=47748					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb09					Semicolon:
.bb09	20 77 b6	jsr $b677			jsr Left_Bracket	; switch to interpret state
.bb0c	24 0c		bit $0c				bit status		; is this a : word or a :NONAME word?
.bb0e	70 0c		bvs $bb1c			bvs _colonword
.bb10	a9 60		lda #$60			lda #$60		; compile an RTS
.bb12	20 04 cc	jsr $cc04			jsr C_Comma_A
.bb15	a5 0e		lda $0e				lda workword+0		; push xt, return
.bb17	a4 0f		ldy $0f				ldy workword+1
.bb19	4c f3 b6	jmp $b6f3			jmp PushYA
.bb1c					_colonword:
.bb1c	24 0c		bit $0c				bit status
.bb1e	10 1d		bpl $bb3d			bpl _new_word	; Bit 7 is clear = new word
.bb20	a5 0e		lda $0e				lda WorkWord+0		; push our nt
.bb22	a4 0f		ldy $0f				ldy WorkWord+1
.bb24	20 f3 b6	jsr $b6f3			jsr PushYA
.bb27	20 33 bd	jsr $bd33			jsr Name_To_String	; get our name string
.bb2a	a9 2b		lda #$2b			lda #<str_redefined	; string "redefined"
.bb2c	a0 da		ldy #$da			ldy #>str_redefined
.bb2e	20 0e cd	jsr $cd0e			jsr Print_ASCIIZ_YA_no_lf
.bb31	20 ed cc	jsr $cced			jsr Type		; print the offending word.
.bb34	20 e0 cc	jsr $cce0			jsr Space
.bb37	a9 7f		lda #$7f			lda #$ff-%10000000
.bb39	25 0c		and $0c				and status
.bb3b	85 0c		sta $0c				sta status
.bb3d					_new_word:
.bb3d	20 60 c0	jsr $c060			jsr Header_Link		; finish linking into current dictionary
.bb40	20 48 bb	jsr $bb48			jsr adjust_z		; fix word length
.bb43	a9 60		lda #$60			lda #$60		; compile an RTS
.bb45	4c 04 cc	jmp $cc04			jmp C_Comma_A
=63					CL	.var *-(WordListLink+wh_Xt)
=$bb48					en = *	; remember here
>bb07	3f					.byte CL	;wh_CodeLength
.bb48					adjust_z:
.bb48	a5 10		lda $10				lda dp+0		; tmp1= xt
.bb4a	18		clc				clc
.bb4b	69 85		adc #$85			adc #Wh_xt
.bb4d	85 14		sta $14				sta tmp1+0
.bb4f	a5 11		lda $11				lda dp+1
.bb51	69 00		adc #$00			adc #0
.bb53	85 15		sta $15				sta tmp1+1
.bb55	38		sec				sec			; length= cp-xt
.bb56	a5 00		lda $00				lda cp+0
.bb58	e5 14		sbc $14				sbc tmp1+0
.bb5a	a8		tay				tay
.bb5b	a5 01		lda $01				lda cp+1
.bb5d	e5 15		sbc $15				sbc tmp1+1
.bb5f	f0 0c		beq $bb6d			beq _short		; length > $ff ?
.bb61	a0 84		ldy #$84			ldy #Wh_Flags		; make it NN
.bb63	b1 10		lda ($10),y			lda (dp),y
.bb65	29 fd		and #$fd			and #$ff-AN
.bb67	09 08		ora #$08			ora #NN
.bb69	91 10		sta ($10),y			sta (dp),y
.bb6b	a0 ff		ldy #$ff			ldy #$ff		; set max length for header
.bb6d	98		tya		_short:		tya			; fill in length in header
.bb6e	a0 83		ldy #$83			ldy #Wh_CodeLength
.bb70	91 10		sta ($10),y			sta (dp),y
.bb72	60		rts				rts
>bb73	3a				L1:	.text ":"	;  name of word as a string, ending at wh_NameLastChar
>bb74	01					.byte *-L1	;wh_NameLength	length of name
>bb75	84 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb77	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb78	08					.byte NN	;wh_Flags	dictionary flags
=47860					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb79					Colon:
.bb79	20 8d b6	jsr $b68d			jsr Right_Bracket	; switch to compile state
.bb7c	a5 0c		lda $0c				lda status
.bb7e	09 40		ora #$40			ora #%01000000	; tell ";" and RECURSE this is a normal word
.bb80	09 80		ora #$80			ora #%10000000	; Tell Header_Build not to print warning for duplicate name.
.bb82	85 0c		sta $0c				sta status
.bb84	4c 6b c0	jmp $c06b			jmp Header_Build	; compile word header (but don't link)
=14					CL	.var *-(WordListLink+wh_Xt)
=$bb87					en = *	; remember here
>bb77	0e					.byte CL	;wh_CodeLength
>bb87	3a 4e 6f 4e 61 6d 65		L1:	.text ":NoName"	;  name of word as a string, ending at wh_NameLastChar
>bb8e	07					.byte *-L1	;wh_NameLength	length of name
>bb8f	f4 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb91	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb92	08					.byte NN	;wh_Flags	dictionary flags
=47886					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb93					Colon_NoName:
.bb93	20 8d b6	jsr $b68d			jsr Right_Bracket	; switch to compile state
.bb96	a9 bf		lda #$bf			lda #$ff-%01000000	; tell ";" and RECURSE this is
.bb98	25 0c		and $0c				and status		; a :NONAME word.
.bb9a	85 0c		sta $0c				sta status
.bb9c	a5 00		lda $00				lda cp+0
.bb9e	85 0e		sta $0e				sta workword+0
.bba0	a5 01		lda $01				lda cp+1
.bba2	85 0f		sta $0f				sta workword+1
=17					CL	.var *-(WordListLink+wh_Xt)
=$bba4					en = *	; remember here
>bb91	11					.byte CL	;wh_CodeLength
.bba4	60		rts				rts
>bba5	27				L1:	.text "'"	;  name of word as a string, ending at wh_NameLastChar
>bba6	01					.byte *-L1	;wh_NameLength	length of name
>bba7	0e bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bba9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bbaa	08					.byte NN	;wh_Flags	dictionary flags
=47910					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bbab	20 b1 bb	jsr $bbb1	Tick:		jsr Tick_Nt
.bbae	4c 1b bd	jmp $bd1b			jmp Name_To_Int	; ( nt -- xt )
=6					CL	.var *-(WordListLink+wh_Xt)
=$bbb1					en = *	; remember here
>bba9	06					.byte CL	;wh_CodeLength
.bbb1	20 15 ba	jsr $ba15	Tick_Nt:	jsr parse_name_check	; ( -- addr u )
.bbb4	4c 4d bc	jmp $bc4d			jmp find_name_check	; ( addr u -- nt )
>bbb7	5b 27 5d			L1:	.text "[']"	;  name of word as a string, ending at wh_NameLastChar
>bbba	03					.byte *-L1	;wh_NameLength	length of name
>bbbb	26 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bbbd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bbbe	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=47930					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bbbf	20 ab bb	jsr $bbab	Bracket_Tick:	jsr Tick
.bbc2	4c a6 b6	jmp $b6a6			jmp Literal
=6					CL	.var *-(WordListLink+wh_Xt)
=$bbc5					en = *	; remember here
>bbbd	06					.byte CL	;wh_CodeLength
>bbc5	46 69 6e 64			L1:	.text "Find"	;  name of word as a string, ending at wh_NameLastChar
>bbc9	04					.byte *-L1	;wh_NameLength	length of name
>bbca	3a bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bbcc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bbcd	18					.byte UF+NN	;wh_Flags	dictionary flags
=47945					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bbce					Find:
.bbce	20 65 b3	jsr $b365			jsr underflow_1
.bbd1	b5 25		lda $25,x			lda DStack+1,x		; MSB
.bbd3	48		pha				pha
.bbd4	b5 24		lda $24,x			lda DStack+0,x		; LSB
.bbd6	48		pha				pha
.bbd7	20 09 b1	jsr $b109			jsr Count		; ( caddr -- addr u )
.bbda	20 21 bc	jsr $bc21			jsr find_name		; ( addr u -- nt | 0 )
.bbdd	b5 25		lda $25,x			lda DStack+1,x		; word found?
.bbdf	d0 0a		bne $bbeb			bne _found_word
.bbe1	20 26 b7	jsr $b726			jsr False		; ( 0 0 )
.bbe4	68		pla				pla			; LSB of address
.bbe5	95 26		sta $26,x			sta DStack+2,x
.bbe7	68		pla				pla
.bbe8	95 27		sta $27,x			sta DStack+3,x		; MSB of address
.bbea	60		rts				rts			; ( addr 0 )
.bbeb					_found_word:
.bbeb	68		pla				pla			; We don't need the address after all, RDrop it
.bbec	68		pla				pla
.bbed	20 65 ce	jsr $ce65			jsr Dup		; ( nt nt )
.bbf0	20 1b bd	jsr $bd1b			jsr Name_To_Int	; ( nt xt )
.bbf3	20 83 ce	jsr $ce83			jsr Swap		; ( xt nt )
.bbf6	a0 00		ldy #$00			ldy #0			; Prepare flag
.bbf8	a9 84		lda #$84			lda #Wh_Flags		; get flags
.bbfa	20 0a c9	jsr $c90a			jsr Plus_A		; ( xt nt+Wh_Flags )
.bbfd	a1 24		lda ($24,x)			lda (DStack+0,x)		; ( xt flags )
.bbff	29 04		and #$04			and #IM
.bc01	d0 07		bne $bc0a			bne _immediate		; bit set, we're immediate
.bc03	a9 ff		lda #$ff			lda #$FF		; We're not immediate, return -1
.bc05	95 24		sta $24,x			sta DStack+0,x
.bc07	95 25		sta $25,x			sta DStack+1,x
.bc09	60		rts				rts
.bc0a					_immediate:
.bc0a	a9 01		lda #$01			lda #1			; We're immediate, return 1
.bc0c	95 24		sta $24,x			sta DStack+0,x
.bc0e	a9 00		lda #$00			lda #0
.bc10	95 25		sta $25,x			sta DStack+1,x
=68					CL	.var *-(WordListLink+wh_Xt)
=$bc12					en = *	; remember here
>bbcc	44					.byte CL	;wh_CodeLength
.bc12	60		rts				rts
>bc13	46 69 6e 64 2d 4e 61 6d		L1:	.text "Find-Name"	;  name of word as a string, ending at wh_NameLastChar
>bc1b	65
>bc1c	09					.byte *-L1	;wh_NameLength	length of name
>bc1d	49 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc1f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc20	18					.byte UF+NN	;wh_Flags	dictionary flags
=48028					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc21					find_name:
.bc21	20 7a b3	jsr $b37a			jsr underflow_2
.bc24	20 5a bc	jsr $bc5a			jsr fina_pattern_prepare ; tmp2 = pseudo-header of pattern name
.bc27	a9 ff		lda #$ff			lda #$ff		; for each wordlist in the wordlist search order.
.bc29	95 25		sta $25,x			sta DStack+1,x
.bc2b					_wordlist_next:
.bc2b	f6 25		inc $25,x			inc DStack+1,x
.bc2d	b4 25		ldy $25,x			ldy DStack+1,x
.bc2f	cc 2a 03	cpy $032a			cpy Num_OrderV		; at end of list?
.bc32	90 06		bcc $bc3a			bcc _nextS
.bc34	d0 14		bne $bc4a			bne _fail
.bc36	a9 03		lda #$03			lda #wid_Root		; also try root wordlist
.bc38	d0 03		bne $bc3d			bne _nextA
.bc3a	b9 2b 03	lda $032b,y	_nextS:		lda Search_OrderV,y	; A = search_order[Y]  get wordlist ID
.bc3d	20 70 bc	jsr $bc70	_nextA:		jsr fina_search_wordlist
.bc40	f0 e9		beq $bc2b			beq _wordlist_next
.bc42	a5 14		lda $14				lda tmp1+0		; NOS = nt
.bc44	95 26		sta $26,x			sta DStack+2,x
.bc46	a5 15		lda $15				lda tmp1+1
.bc48	95 27		sta $27,x			sta DStack+3,x
.bc4a					_fail:
.bc4a	e8		inx				inx			; Drop	pattern name length
.bc4b	e8		inx				inx
=43					CL	.var *-(WordListLink+wh_Xt)
=$bc4c					en = *	; remember here
>bc1f	2b					.byte CL	;wh_CodeLength
.bc4c	60		rts				rts
.bc4d					find_name_check:
.bc4d	20 21 bc	jsr $bc21			jsr find_name
.bc50	b5 25		lda $25,x			lda DStack+1,x		; not found?
.bc52	f0 01		beq $bc55			beq _NotFound
.bc54	60		rts				rts
.bc55	a9 f3		lda #$f3	_NotFound:	lda #$100+err_UndefinedWord	; complain & quit
.bc57	4c c4 b3	jmp $b3c4			jmp ThrowA
.bc5a					fina_pattern_prepare:
.bc5a	38		sec				sec			; A= 0 - name start offset
.bc5b	b5 24		lda $24,x			lda DStack+0,x
.bc5d	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.bc5f	75 26		adc $26,x			adc DStack+2,x		; tmp2 = pattern nt
.bc61	85 16		sta $16				sta tmp2+0
.bc63	a9 ff		lda #$ff			lda #$ff
.bc65	75 27		adc $27,x			adc DStack+3,x
.bc67	85 17		sta $17				sta tmp2+1
.bc69	a9 00		lda #$00			lda #0			; assuming failure
.bc6b	95 26		sta $26,x			sta DStack+2,x
.bc6d	95 27		sta $27,x			sta DStack+3,x
.bc6f	60		rts				rts
.bc70					fina_search_wordlist:
.bc70	0a		asl a				asl			; tmp1 = up->wordlists[A]
.bc71	a8		tay				tay
.bc72	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.bc75	85 14		sta $14				sta tmp1+0
.bc77	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bc7a	85 15		sta $15				sta tmp1+1
.bc7c	d0 10		bne $bc8e			bne _word_test		;   not end-of-list?
.bc7e	60		rts		_rts:		rts			; Z= end_of_list
.bc7f					_word_next:
.bc7f	a0 82		ldy #$82			ldy #wh_WordListLink+1	; tmp1= tmp1->Wh_WordListLink
.bc81	b1 14		lda ($14),y			lda (tmp1),y
.bc83	48		pha				pha
.bc84	88		dey				dey
.bc85	b1 14		lda ($14),y			lda (tmp1),y
.bc87	85 14		sta $14				sta tmp1+0
.bc89	68		pla				pla
.bc8a	85 15		sta $15				sta tmp1+1
.bc8c	f0 f0		beq $bc7e			beq _rts		; end of list?
.bc8e					_word_test:
.bc8e	a0 80		ldy #$80			ldy #Wh_NameLength	; Are strings the same length?
.bc90	b1 14		lda ($14),y			lda (tmp1),y
.bc92	d5 24		cmp $24,x			cmp DStack+0,x
.bc94	d0 e9		bne $bc7f			bne _word_next
.bc96	a9 7f		lda #$7f			lda #Wh_NameLastChar	; Y= index of 1st name char-1
.bc98	38		sec				sec
.bc99	f5 24		sbc $24,x			sbc DStack+0,x
.bc9b	a8		tay				tay
.bc9c	c8		iny		_char_next:	iny			; to next char
.bc9d	30 df		bmi $bc7e			bmi _rts		; end of string?
.bc9f	b1 16		lda ($16),y			lda (tmp2),y		; char of mystery string
.bca1	51 14		eor ($14),y			eor (tmp1),y
.bca3	f0 f7		beq $bc9c			beq _char_next		;   exact match?
.bca5	29 df		and #$df			and #$df		;   only a case mismatch?
.bca7	d0 d6		bne $bc7f			bne _word_next
.bca9	b1 14		lda ($14),y			lda (tmp1),y		;   verify it is alpha char
.bcab	29 df		and #$df			and #$df
.bcad	c9 41		cmp #$41			cmp #'A'
.bcaf	90 ce		bcc $bc7f			bcc _word_next
.bcb1	c9 5b		cmp #$5b			cmp #'Z'+1
.bcb3	90 e7		bcc $bc9c			bcc _char_next
.bcb5	b0 c8		bcs $bc7f			bcs _word_next
>bcb7	49 6e 74 3e 4e 61 6d 65		L1:	.text "Int>Name"	;  name of word as a string, ending at wh_NameLastChar
>bcbf	08					.byte *-L1	;wh_NameLength	length of name
>bcc0	9c bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bcc2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bcc3	18					.byte UF+NN	;wh_Flags	dictionary flags
=48191					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bcc4					Int_To_Name:
.bcc4	20 65 b3	jsr $b365			jsr underflow_1
.bcc7	a9 7b		lda #$7b			lda #$100-Wh_xt		; convert xt on stack to proposed nt
.bcc9	20 4a c9	jsr $c94a			jsr Minus_A
.bccc	a9 ff		lda #$ff			lda #$ff		; for each wordlist
.bcce	20 35 b7	jsr $b735			jsr PushZA
.bcd1					_wordlist_next:
.bcd1	f6 24		inc $24,x			inc DStack+0,x
.bcd3	b5 24		lda $24,x			lda DStack+0,x		; Get the current wordlist index
.bcd5	c9 0c		cmp #$0c			cmp #(Num_OrderV-WordlistsV)/2
.bcd7	b0 2c		bcs $bd05			bcs _fail
.bcd9	0a		asl a				asl			; tmp2 = wordlist[A]
.bcda	a8		tay				tay
.bcdb	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.bcde	85 16		sta $16				sta tmp2+0
.bce0	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bce3	85 17		sta $17				sta tmp2+1
.bce5	f0 ea		beq $bcd1			beq _wordlist_next	;   empty wordlist?
.bce7	d0 0f		bne $bcf8			bne _word_test
.bce9	a0 82		ldy #$82	_word_next:	ldy #wh_WordListLink+1	; follow wh_WordListLink to next word
.bceb	b1 16		lda ($16),y			lda (tmp2),y
.bced	48		pha				pha
.bcee	88		dey				dey
.bcef	b1 16		lda ($16),y			lda (tmp2),y
.bcf1	85 16		sta $16				sta tmp2+0
.bcf3	68		pla				pla
.bcf4	85 17		sta $17				sta tmp2+1
.bcf6	f0 d9		beq $bcd1			beq _wordlist_next	;  end of list?
.bcf8	55 27		eor $27,x	_word_test:	eor DStack+3,x		; tmp2 = nt ?
.bcfa	d0 ed		bne $bce9			bne _word_next
.bcfc	a5 16		lda $16				lda tmp2+0
.bcfe	55 26		eor $26,x			eor DStack+2,x
.bd00	d0 e7		bne $bce9			bne _word_next
.bd02	e8		inx				inx			; Drop wordlist index
.bd03	e8		inx				inx
.bd04	60		rts				rts
.bd05					_fail:
.bd05	e8		inx				inx			; Drop wordlist index
.bd06	e8		inx				inx
.bd07	a9 00		lda #$00			lda #0			; return a zero to indicate that we didn't find it.
.bd09	95 24		sta $24,x			sta DStack+0,x
.bd0b	95 25		sta $25,x			sta DStack+1,x
=73					CL	.var *-(WordListLink+wh_Xt)
=$bd0d					en = *	; remember here
>bcc2	49					.byte CL	;wh_CodeLength
.bd0d	60		rts				rts
>bd0e	4e 61 6d 65 3e 49 6e 74		L1:	.text "Name>Int"	;  name of word as a string, ending at wh_NameLastChar
>bd16	08					.byte *-L1	;wh_NameLength	length of name
>bd17	3f bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd19	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd1a	18					.byte UF+NN	;wh_Flags	dictionary flags
=48278					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd1b					Name_To_Int:
.bd1b	20 65 b3	jsr $b365			jsr underflow_1
.bd1e	a9 85		lda #$85			lda #wh_Xt
.bd20	4c 0a c9	jmp $c90a			jmp Plus_A
=8					CL	.var *-(WordListLink+wh_Xt)
=$bd23					en = *	; remember here
>bd19	08					.byte CL	;wh_CodeLength
>bd23	4e 61 6d 65 3e 53 74 72		L1:	.text "Name>String"	;  name of word as a string, ending at wh_NameLastChar
>bd2b	69 6e 67
>bd2e	0b					.byte *-L1	;wh_NameLength	length of name
>bd2f	96 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd31	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd32	18					.byte UF+NN	;wh_Flags	dictionary flags
=48302					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd33					Name_To_String:
.bd33	20 65 b3	jsr $b365			jsr underflow_1
.bd36	b5 24		lda $24,x			lda DStack+0,x		; tmp1 = nt
.bd38	b4 25		ldy $25,x			ldy DStack+1,x
.bd3a	85 14		sta $14				sta tmp1+0
.bd3c	84 15		sty $15				sty tmp1+1
.bd3e	a0 80		ldy #$80			ldy #Wh_NameLength
.bd40	a9 80		lda #$80			lda #Wh_NameLastChar+1	; calc start offset
.bd42	38		sec				sec
.bd43	f1 14		sbc ($14),y			sbc (tmp1),y
.bd45	20 0a c9	jsr $c90a			jsr Plus_A		; calc start addr
.bd48	b1 14		lda ($14),y			lda (tmp1),y		; push length
.bd4a	4c 35 b7	jmp $b735			jmp PushZA
=26					CL	.var *-(WordListLink+wh_Xt)
=$bd4d					en = *	; remember here
>bd31	1a					.byte CL	;wh_CodeLength
>bd4d	3e 42 6f 64 79			L1:	.text ">Body"	;  name of word as a string, ending at wh_NameLastChar
>bd52	05					.byte *-L1	;wh_NameLength	length of name
>bd53	ae bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd55	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd56	18					.byte UF+NN	;wh_Flags	dictionary flags
=48338					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd57					To_Body:
.bd57	20 65 b3	jsr $b365			jsr underflow_1
.bd5a	a9 03		lda #$03			lda #3		; PFA is after the beginning JSR abs
.bd5c	4c 0a c9	jmp $c90a			jmp Plus_A
=8					CL	.var *-(WordListLink+wh_Xt)
=$bd5f					en = *	; remember here
>bd55	08					.byte CL	;wh_CodeLength
>bd5f	45 72 61 73 65			L1:	.text "Erase"	;  name of word as a string, ending at wh_NameLastChar
>bd64	05					.byte *-L1	;wh_NameLength	length of name
>bd65	d2 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd67	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd68	08					.byte NN	;wh_Flags	dictionary flags
=48356					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd69					Erase:
.bd69	20 44 b7	jsr $b744			jsr Zero
.bd6c	4c 88 bd	jmp $bd88			jmp Fill
=6					CL	.var *-(WordListLink+wh_Xt)
=$bd6f					en = *	; remember here
>bd67	06					.byte CL	;wh_CodeLength
>bd6f	42 6c 61 6e 6b			L1:	.text "Blank"	;  name of word as a string, ending at wh_NameLastChar
>bd74	05					.byte *-L1	;wh_NameLength	length of name
>bd75	e4 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd77	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd78	08					.byte NN	;wh_Flags	dictionary flags
=48372					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd79					Blank:
.bd79	20 63 b7	jsr $b763			jsr Bl
.bd7c	4c 88 bd	jmp $bd88			jmp Fill
=6					CL	.var *-(WordListLink+wh_Xt)
=$bd7f					en = *	; remember here
>bd77	06					.byte CL	;wh_CodeLength
>bd7f	46 69 6c 6c			L1:	.text "Fill"	;  name of word as a string, ending at wh_NameLastChar
>bd83	04					.byte *-L1	;wh_NameLength	length of name
>bd84	f4 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd86	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd87	18					.byte UF+NN	;wh_Flags	dictionary flags
=48387					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd88					Fill:
.bd88	20 7f b3	jsr $b37f			jsr underflow_3
.bd8b	b5 28		lda $28,x			lda DStack+4,x		; tmp1= address
.bd8d	85 14		sta $14				sta tmp1+0
.bd8f	b5 29		lda $29,x			lda DStack+5,x
.bd91	85 15		sta $15				sta tmp1+1
.bd93	b5 26		lda $26,x			lda DStack+2,x		; tmp2= counter.lo
.bd95	85 16		sta $16				sta tmp2+0
.bd97	f6 27		inc $27,x			inc DStack+3,x		; so decrement & test for 0 works
.bd99	a0 00		ldy #$00			ldy #0
.bd9b	b5 24		lda $24,x			lda DStack+0,x		; A= fill byte
.bd9d	c4 16		cpy $16		_loop:		cpy tmp2+0		; done?
.bd9f	f0 09		beq $bdaa			beq _test2
.bda1	91 14		sta ($14),y			sta (tmp1),y		; store a byte
.bda3	c8		iny				iny			; to next byte
.bda4	d0 f7		bne $bd9d			bne _loop
.bda6	e6 15		inc $15				inc tmp1+1		; increment addr page
.bda8	d0 f3		bne $bd9d			bne _loop
.bdaa	d6 27		dec $27,x	_test2:		dec DStack+3,x		; any more pages?
.bdac	d0 ef		bne $bd9d			bne _loop
.bdae	4c a0 ac	jmp $aca0			jmp ThreeDrop	; Drop three cells off the Data Stack.
=41					CL	.var *-(WordListLink+wh_Xt)
=$bdb1					en = *	; remember here
>bd86	29					.byte CL	;wh_CodeLength
>bdb1	56 61 72 69 61 62 6c 65		L1:	.text "Variable"	;  name of word as a string, ending at wh_NameLastChar
>bdb9	08					.byte *-L1	;wh_NameLength	length of name
>bdba	03 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bdbc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bdbd	08					.byte NN	;wh_Flags	dictionary flags
=48441					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bdbe	20 e4 c0	jsr $c0e4	Variable:	jsr Create		; compile word header & push PFA
.bdc1	a9 00		lda #$00			lda #0			; allot & initialize the variable's data
.bdc3	a8		tay				tay
.bdc4	4c 1e cc	jmp $cc1e			jmp Comma_YA
=9					CL	.var *-(WordListLink+wh_Xt)
=$bdc7					en = *	; remember here
>bdbc	09					.byte CL	;wh_CodeLength
>bdc7	32 56 61 72 69 61 62 6c		L1:	.text "2Variable"	;  name of word as a string, ending at wh_NameLastChar
>bdcf	65
>bdd0	09					.byte *-L1	;wh_NameLength	length of name
>bdd1	39 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bdd3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bdd4	08					.byte NN	;wh_Flags	dictionary flags
=48464					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bdd5	20 be bd	jsr $bdbe	Two_variable:	jsr Variable		; compile word header & push PFA & 1st cell of data
.bdd8	4c 1e cc	jmp $cc1e			jmp Comma_YA		; alloc & init 2nd cell of data
=6					CL	.var *-(WordListLink+wh_Xt)
=$bddb					en = *	; remember here
>bdd3	06					.byte CL	;wh_CodeLength
>bddb	43 6f 6e 73 74 61 6e 74		L1:	.text "Constant"	;  name of word as a string, ending at wh_NameLastChar
>bde3	08					.byte *-L1	;wh_NameLength	length of name
>bde4	50 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bde6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bde7	18					.byte UF+NN	;wh_Flags	dictionary flags
=48483					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bde8					Constant:
.bde8	20 65 b3	jsr $b365			jsr underflow_1
.bdeb	20 5d c0	jsr $c05d			jsr Header_Comma	; compile word header
.bdee	20 af b6	jsr $b6af			jsr LitCompile		; compile code to load registers, & pick a subroutine
.bdf1	20 5a cc	jsr $cc5a			jsr Jmp_Comma_YA	; compile code to JMP to the subroutine
.bdf4	4c 48 bb	jmp $bb48			jmp adjust_z		; fix word length
=15					CL	.var *-(WordListLink+wh_Xt)
=$bdf7					en = *	; remember here
>bde6	0f					.byte CL	;wh_CodeLength
>bdf7	32 43 6f 6e 73 74 61 6e		L1:	.text "2Constant"	;  name of word as a string, ending at wh_NameLastChar
>bdff	74
>be00	09					.byte *-L1	;wh_NameLength	length of name
>be01	63 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be03	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be04	18					.byte UF+NN	;wh_Flags	dictionary flags
=48512					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be05					Two_constant:
.be05	20 7a b3	jsr $b37a			jsr underflow_2
.be08	20 5d c0	jsr $c05d			jsr Header_Comma	; compile word header
.be0b	20 83 ce	jsr $ce83			jsr Swap
.be0e	20 a6 b6	jsr $b6a6			jsr Literal		; compile push lo cell
.be11	20 af b6	jsr $b6af			jsr LitCompile		; compile push hi cell, YA=exit routine
.be14	20 5a cc	jsr $cc5a			jsr Jmp_Comma_YA	; compile JMP from above
.be17	4c 48 bb	jmp $bb48			jmp adjust_z		; fix word length
=21					CL	.var *-(WordListLink+wh_Xt)
=$be1a					en = *	; remember here
>be03	15					.byte CL	;wh_CodeLength
>be1a	56 61 6c 75 65			L1:	.text "Value"	;  name of word as a string, ending at wh_NameLastChar
>be1f	05					.byte *-L1	;wh_NameLength	length of name
>be20	80 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be22	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be23	18					.byte UF+NN	;wh_Flags	dictionary flags
=48543					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be24					Value:
.be24	20 65 b3	jsr $b365			jsr underflow_1
.be27	20 5d c0	jsr $c05d			jsr Header_Comma	; compile word header
.be2a	20 d9 b6	jsr $b6d9			jsr ldya_immed_comma	; compile lda # & ldy #
.be2d	a9 f3		lda #$f3			lda #<PushYA		; compile jmp PushYA
.be2f	a0 b6		ldy #$b6			ldy #>PushYA
.be31	20 5a cc	jsr $cc5a			jsr Jmp_Comma_YA
.be34	4c 48 bb	jmp $bb48			jmp adjust_z		; fix word length
=19					CL	.var *-(WordListLink+wh_Xt)
=$be37					en = *	; remember here
>be22	13					.byte CL	;wh_CodeLength
>be37	32 56 61 6c 75 65		L1:	.text "2Value"	;  name of word as a string, ending at wh_NameLastChar
>be3d	06					.byte *-L1	;wh_NameLength	length of name
>be3e	9f bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be40	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be41	18					.byte UF+NN	;wh_Flags	dictionary flags
=48573					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be42					TwoValue:
.be42	20 7a b3	jsr $b37a			jsr underflow_2
.be45	20 5d c0	jsr $c05d			jsr Header_Comma	; compile word header
.be48	a9 55		lda #$55			lda #<TwoValue_Runtime	; compile JSR TValue_Runtime
.be4a	a0 be		ldy #$be			ldy #>TwoValue_Runtime
.be4c	20 43 cc	jsr $cc43			jsr Jsr_Comma_YA
.be4f	20 48 bb	jsr $bb48			jsr adjust_z		; fix word length
.be52	4c 2c cc	jmp $cc2c			jmp Two_Comma		; compile the value, return
=19					CL	.var *-(WordListLink+wh_Xt)
=$be55					en = *	; remember here
>be40	13					.byte CL	;wh_CodeLength
.be55					TwoValue_Runtime:
.be55	68		pla				pla			; pop RTS addr, +1,
.be56	18		clc				clc
.be57	69 01		adc #$01			adc #1
.be59	85 14		sta $14				sta tmp1+0
.be5b	68		pla				pla
.be5c	69 00		adc #$00			adc #0
.be5e	85 15		sta $15				sta tmp1+1
.be60	4c a2 c4	jmp $c4a2			jmp Two_Fetch_tmp1	; fetch the data, return
>be63	54 6f				L1:	.text "To"	;  name of word as a string, ending at wh_NameLastChar
>be65	02					.byte *-L1	;wh_NameLength	length of name
>be66	bd bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be68	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be69	0c					.byte NN+IM	;wh_Flags	dictionary flags
=48613					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be6a					To:
.be6a	20 ab bb	jsr $bbab			jsr Tick		; We always need the xt of the target word
.be6d	b5 24		lda $24,x			lda DStack+0,x		; tmp1= xt
.be6f	b4 25		ldy $25,x			ldy DStack+1,x
.be71	85 14		sta $14				sta tmp1+0
.be73	84 15		sty $15				sty tmp1+1
.be75	a0 00		ldy #$00			ldy #0			; determine what type xt points at
.be77	b1 14		lda ($14),y			lda (tmp1),y
.be79	c9 a0		cmp #$a0			cmp #$a0		;   LDY #
.be7b	d0 38		bne $beb5			bne _Test2
.be7d	a5 0a		lda $0a				lda state		; check compile state
.be7f	f0 20		beq $bea1			beq _Value_interpret
.be81	a9 3b		lda #$3b			lda #<PopYA		; compile jsr PopYA
.be83	a0 b3		ldy #$b3			ldy #>PopYA
.be85	20 43 cc	jsr $cc43			jsr Jsr_Comma_YA
.be88	a9 8c		lda #$8c			lda #$8C		; compile STY xt+1
.be8a	20 04 cc	jsr $cc04			jsr C_Comma_A
.be8d	20 5b c9	jsr $c95b			jsr One_plus
.be90	20 65 ce	jsr $ce65			jsr Dup
.be93	20 1b cc	jsr $cc1b			jsr Comma
.be96	a9 8d		lda #$8d			lda #$8D		; compile STA xt+3
.be98	20 04 cc	jsr $cc04			jsr C_Comma_A
.be9b	20 05 c9	jsr $c905			jsr Cell_Plus
.be9e	4c 1b cc	jmp $cc1b			jmp Comma
.bea1					_Value_interpret:
.bea1	20 7a b3	jsr $b37a			jsr underflow_2		; ( n xt )
.bea4	e8		inx				inx			; Drop xt
.bea5	e8		inx				inx
.bea6	b5 24		lda $24,x			lda DStack+0,x		; LSB
.bea8	a0 03		ldy #$03			ldy #3			;   modify LDA # data
.beaa	91 14		sta ($14),y			sta (tmp1),y
.beac	b5 25		lda $25,x			lda DStack+1,x		; MSB
.beae	a0 01		ldy #$01			ldy #1			;   modify LDY # data
.beb0	91 14		sta ($14),y			sta (tmp1),y
.beb2	e8		inx				inx			; Drop n
.beb3	e8		inx				inx
.beb4	60		rts				rts
.beb5	c9 20		cmp #$20	_Test2:		cmp #$20		;   JSR abs ?
.beb7	d0 33		bne $beec			bne _Err
.beb9	a9 03		lda #$03			lda #3			; advance xt over the JSR abs to the data
.bebb	20 0a c9	jsr $c90a			jsr Plus_A
.bebe	a0 01		ldy #$01			ldy #1			; get JSR abs addr lo byte
.bec0	b1 14		lda ($14),y			lda (tmp1),y
.bec2	c9 55		cmp #$55			cmp #<TwoValue_Runtime
.bec4	d0 11		bne $bed7			bne _Test3
.bec6	a5 0a		lda $0a				lda state		; check compile state
.bec8	f0 0a		beq $bed4			beq _2Value_runtime
.beca	20 d9 b6	jsr $b6d9			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.becd	a9 76		lda #$76			lda #<Two_Store_YA
.becf	a0 c4		ldy #$c4			ldy #>Two_Store_YA
.bed1	4c 43 cc	jmp $cc43			jmp Jsr_Comma_YA	; compile JSR TwoValue_runtime; return
.bed4	4c 70 c4	jmp $c470	_2Value_runtime: jmp Two_Store
.bed7					_Test3:
.bed7	c9 e4		cmp #$e4			cmp #<FValue_runtime
.bed9	d0 11		bne $beec			bne _Err
.bedb	a5 0a		lda $0a				lda state		; check compile state
.bedd	f0 0a		beq $bee9			beq _FValue_interpret
.bedf	20 d9 b6	jsr $b6d9			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bee2	a9 b0		lda #$b0			lda #<FStore_YA
.bee4	a0 85		ldy #$85			ldy #>FStore_YA
.bee6	4c 43 cc	jmp $cc43			jmp Jsr_Comma_YA	; compile JSR FValue_runtime; return
.bee9	4c ad 85	jmp $85ad	_FValue_interpret: jmp FStore
.beec	a9 e0		lda #$e0	_Err:		lda #$100+err_InvalidName ; unrecognized type.
.beee	20 c4 b3	jsr $b3c4			jsr ThrowA
=135					CL	.var *-(WordListLink+wh_Xt)
=$bef1					en = *	; remember here
>be68	87					.byte CL	;wh_CodeLength
>bef1	44 4d 61 78			L1:	.text "DMax"	;  name of word as a string, ending at wh_NameLastChar
>bef5	04					.byte *-L1	;wh_NameLength	length of name
>bef6	e5 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bef8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bef9	08					.byte NN	;wh_Flags	dictionary flags
=48757					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.befa	a9 80		lda #$80	DMax:		lda #$80
.befc	d0 0b		bne $bf09			bne DMin3
=4					CL	.var *-(WordListLink+wh_Xt)
=$befe					en = *	; remember here
>bef8	04					.byte CL	;wh_CodeLength
>befe	44 4d 69 6e			L1:	.text "DMin"	;  name of word as a string, ending at wh_NameLastChar
>bf02	04					.byte *-L1	;wh_NameLength	length of name
>bf03	75 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf05	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf06	08					.byte NN	;wh_Flags	dictionary flags
=48770					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf07	a9 00		lda #$00	DMin:		lda #0
.bf09	85 16		sta $16		DMin3:		sta tmp2	; save sign correction
.bf0b	20 84 b3	jsr $b384			jsr underflow_4
.bf0e	b5 26		lda $26,x			lda DStack+2,x	; compare
.bf10	d5 2a		cmp $2a,x			cmp DStack+6,x
.bf12	b5 27		lda $27,x			lda DStack+3,x
.bf14	f5 2b		sbc $2b,x			sbc DStack+7,x
.bf16	b5 24		lda $24,x			lda DStack+0,x
.bf18	f5 28		sbc $28,x			sbc DStack+4,x
.bf1a	b5 25		lda $25,x			lda DStack+1,x
.bf1c	f5 29		sbc $29,x			sbc DStack+5,x
.bf1e	50 02		bvc $bf22			bvc +
.bf20	49 80		eor #$80			eor #$80	; fix sign
.bf22	45 16		eor $16		+		eor tmp2
.bf24	30 0f		bmi $bf35			bmi TwoNip_nouf	; if negative, NOS is larger and needs to be kept
.bf26	4c 26 c4	jmp $c426			jmp Two_Drop
=34					CL	.var *-(WordListLink+wh_Xt)
=$bf29					en = *	; remember here
>bf05	22					.byte CL	;wh_CodeLength
>bf29	32 4e 69 70			L1:	.text "2Nip"	;  name of word as a string, ending at wh_NameLastChar
>bf2d	04					.byte *-L1	;wh_NameLength	length of name
>bf2e	82 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf30	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf31	18					.byte UF+NN	;wh_Flags	dictionary flags
=48813					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf32	20 84 b3	jsr $b384	TwoNip:		jsr underflow_4
.bf35	b5 24		lda $24,x	TwoNip_NoUf:	lda DStack+0,x	; copy dTOS to dNOS
.bf37	95 28		sta $28,x			sta DStack+4,x
.bf39	b5 25		lda $25,x			lda DStack+1,x
.bf3b	95 29		sta $29,x			sta DStack+5,x
.bf3d	b5 26		lda $26,x			lda DStack+2,x
.bf3f	95 2a		sta $2a,x			sta DStack+6,x
.bf41	b5 27		lda $27,x			lda DStack+3,x
.bf43	95 2b		sta $2b,x			sta DStack+7,x
.bf45	4c 26 c4	jmp $c426			jmp Two_Drop
=22					CL	.var *-(WordListLink+wh_Xt)
=$bf48					en = *	; remember here
>bf30	16					.byte CL	;wh_CodeLength
>bf48	53 3e 44			L1:	.text "S>D"	;  name of word as a string, ending at wh_NameLastChar
>bf4b	03					.byte *-L1	;wh_NameLength	length of name
>bf4c	ad be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf4e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf4f	10					.byte UF	;wh_Flags	dictionary flags
=48843					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf50					S_To_D:
.bf50	20 65 b3	jsr $b365			jsr underflow_1
.bf53	a0 00		ldy #$00			ldy #0			; assume positive
.bf55	b5 25		lda $25,x			lda DStack+1,x		; test n
.bf57	10 01		bpl $bf5a			bpl +
.bf59	88		dey				dey			; make negative
.bf5a					+
.bf5a	ca		dex				dex			; push new hi cell
.bf5b	ca		dex				dex
.bf5c	94 24		sty $24,x			sty DStack+0,x
.bf5e	94 25		sty $25,x			sty DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$bf60					en = *	; remember here
>bf4e	10					.byte CL	;wh_CodeLength
.bf60	60		rts				rts
>bf61	44 3e 53			L1:	.text "D>S"	;  name of word as a string, ending at wh_NameLastChar
>bf64	03					.byte *-L1	;wh_NameLength	length of name
>bf65	cb be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf67	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf68	10					.byte UF	;wh_Flags	dictionary flags
=48868					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf69					D_To_S:
.bf69	20 7a b3	jsr $b37a			jsr underflow_2
.bf6c	e8		inx				inx		; Drop hi cell
.bf6d	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$bf6e					en = *	; remember here
>bf67	05					.byte CL	;wh_CodeLength
.bf6e	60		rts				rts
>bf6f	44 2d				L1:	.text "D-"	;  name of word as a string, ending at wh_NameLastChar
>bf71	02					.byte *-L1	;wh_NameLength	length of name
>bf72	e4 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf74	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf75	10					.byte UF	;wh_Flags	dictionary flags
=48881					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf76					D_Minus:
.bf76	20 84 b3	jsr $b384			jsr underflow_4 ; two double numbers
.bf79	38		sec				sec
.bf7a	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of lower word
.bf7c	f5 26		sbc $26,x			sbc DStack+2,x
.bf7e	95 2a		sta $2a,x			sta DStack+6,x
.bf80	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of lower word
.bf82	f5 27		sbc $27,x			sbc DStack+3,x
.bf84	95 2b		sta $2b,x			sta DStack+7,x
.bf86	b5 28		lda $28,x			lda DStack+4,x	; LSB of upper word
.bf88	f5 24		sbc $24,x			sbc DStack+0,x
.bf8a	95 28		sta $28,x			sta DStack+4,x
.bf8c	b5 29		lda $29,x			lda DStack+5,x	; MSB of upper word
.bf8e	f5 25		sbc $25,x			sbc DStack+1,x
.bf90	95 29		sta $29,x			sta DStack+5,x
.bf92	e8		inx				inx
.bf93	e8		inx				inx
.bf94	e8		inx				inx
.bf95	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$bf96					en = *	; remember here
>bf74	20					.byte CL	;wh_CodeLength
.bf96	60		rts				rts
>bf97	44 2b				L1:	.text "D+"	;  name of word as a string, ending at wh_NameLastChar
>bf99	02					.byte *-L1	;wh_NameLength	length of name
>bf9a	f1 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf9c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf9d	10					.byte UF	;wh_Flags	dictionary flags
=48921					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf9e					D_Plus:
.bf9e	20 84 b3	jsr $b384			jsr underflow_4 ; two double numbers
.bfa1	18		clc				clc
.bfa2	b5 26		lda $26,x			lda DStack+2,x	; LSB of lower word
.bfa4	75 2a		adc $2a,x			adc DStack+6,x
.bfa6	95 2a		sta $2a,x			sta DStack+6,x
.bfa8	b5 27		lda $27,x			lda DStack+3,x	; MSB of lower word
.bfaa	75 2b		adc $2b,x			adc DStack+7,x
.bfac	95 2b		sta $2b,x			sta DStack+7,x
.bfae	b5 24		lda $24,x			lda DStack+0,x	; LSB of upper word
.bfb0	75 28		adc $28,x			adc DStack+4,x
.bfb2	95 28		sta $28,x			sta DStack+4,x
.bfb4	b5 25		lda $25,x			lda DStack+1,x	; MSB of upper word
.bfb6	75 29		adc $29,x			adc DStack+5,x
.bfb8	95 29		sta $29,x			sta DStack+5,x
.bfba	e8		inx				inx
.bfbb	e8		inx				inx
.bfbc	e8		inx				inx
.bfbd	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$bfbe					en = *	; remember here
>bf9c	20					.byte CL	;wh_CodeLength
.bfbe	60		rts				rts
>bfbf	44 31 2b			L1:	.text "D1+"	;  name of word as a string, ending at wh_NameLastChar
>bfc2	03					.byte *-L1	;wh_NameLength	length of name
>bfc3	19 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfc5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfc6	10					.byte UF	;wh_Flags	dictionary flags
=48962					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfc7	20 7a b3	jsr $b37a	D1Plus:		jsr underflow_2
.bfca	f6 26		inc $26,x			inc DStack+2,x
.bfcc	d0 0a		bne $bfd8			bne +
.bfce	f6 27		inc $27,x			inc DStack+3,x
.bfd0	d0 06		bne $bfd8			bne +
.bfd2	f6 24		inc $24,x			inc DStack+0,x
.bfd4	d0 02		bne $bfd8			bne +
.bfd6	f6 25		inc $25,x			inc DStack+1,x
.bfd8					+
=17					CL	.var *-(WordListLink+wh_Xt)
=$bfd8					en = *	; remember here
>bfc5	11					.byte CL	;wh_CodeLength
.bfd8	60		rts				rts
>bfd9	44 31 2d			L1:	.text "D1-"	;  name of word as a string, ending at wh_NameLastChar
>bfdc	03					.byte *-L1	;wh_NameLength	length of name
>bfdd	42 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfdf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfe0	10					.byte UF	;wh_Flags	dictionary flags
=48988					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfe1	20 7a b3	jsr $b37a	D1Minus:	jsr underflow_2
.bfe4	b5 26		lda $26,x			lda DStack+2,x
.bfe6	d0 0e		bne $bff6			bne _1
.bfe8	b5 27		lda $27,x			lda DStack+3,x
.bfea	d0 08		bne $bff4			bne _2
.bfec	b5 24		lda $24,x			lda DStack+0,x
.bfee	d0 02		bne $bff2			bne _3
.bff0	d6 25		dec $25,x			dec DStack+1,x
.bff2	d6 24		dec $24,x	_3:		dec DStack+0,x
.bff4	d6 27		dec $27,x	_2:		dec DStack+3,x
.bff6	d6 26		dec $26,x	_1:		dec DStack+2,x
=23					CL	.var *-(WordListLink+wh_Xt)
=$bff8					en = *	; remember here
>bfdf	17					.byte CL	;wh_CodeLength
.bff8	60		rts				rts
>bff9	41 6c 6c 6f 74			L1:	.text "Allot"	;  name of word as a string, ending at wh_NameLastChar
>bffe	05					.byte *-L1	;wh_NameLength	length of name
>bfff	5c bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c001	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c002	18					.byte UF+NN	;wh_Flags	dictionary flags
=49022					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c003					Allot:
.c003	20 65 b3	jsr $b365			jsr underflow_1
.c006	18		clc				clc			; adjust cp
.c007	b5 24		lda $24,x			lda DStack+0,x
.c009	65 00		adc $00				adc cp+0
.c00b	85 00		sta $00				sta cp+0
.c00d	a8		tay				tay			;   save lo byte
.c00e	b5 25		lda $25,x			lda DStack+1,x
.c010	85 14		sta $14				sta tmp1
.c012	65 01		adc $01				adc cp+1
.c014	85 01		sta $01				sta cp+1
.c016	24 14		bit $14				bit tmp1
.c018	30 15		bmi $c02f			bmi _release
.c01a	b0 06		bcs $c022			bcs _pos_err		; carry from the add is bad
=32600					_last = cp_end-2*PadOffset
.c01c	c0 58		cpy #$58			cpy #<_last		; cp < cp_end ?
.c01e	e9 7f		sbc #$7f			sbc #>_last
.c020	90 2c		bcc $c04e			bcc _done		; we're fine.
.c022					_pos_err:
.c022	a9 58		lda #$58			lda #<_last
.c024	85 00		sta $00				sta cp+0
.c026	a9 7f		lda #$7f			lda #>_last
.c028	85 01		sta $01				sta cp+1
.c02a	a9 c5		lda #$c5			lda #$100+err_Allocate
.c02c	4c c4 b3	jmp $b3c4			jmp ThrowA
.c02f					_release:
.c02f	90 06		bcc $c037			bcc _neg_err		; borrow indicates we've gone below 0
.c031	c0 66		cpy #$66			cpy #<cp0
.c033	e9 0b		sbc #$0b			sbc #>cp0
.c035	b0 17		bcs $c04e			bcs _done
.c037					_neg_err:
.c037	a9 66		lda #$66			lda #<cp0		; Set CP to CP0
.c039	85 00		sta $00				sta cp+0
.c03b	a9 0b		lda #$0b			lda #>cp0
.c03d	85 01		sta $01				sta cp+1
.c03f	a9 1b		lda #$1b			lda #<forth_dictionary_start	; set WordLists[Forth] to the first
.c041	8d 12 03	sta $0312			sta WordlistsV+0		; word in ROM
.c044	a9 ce		lda #$ce			lda #>forth_dictionary_start
.c046	8d 13 03	sta $0313			sta WordlistsV+1
.c049	a9 c4		lda #$c4			lda #$100+err_Free		; abort with an error
.c04b	4c c4 b3	jmp $b3c4			jmp ThrowA
.c04e					_done:
.c04e	e8		inx				inx			; Drop n
.c04f	e8		inx				inx
=77					CL	.var *-(WordListLink+wh_Xt)
=$c050					en = *	; remember here
>c001	4d					.byte CL	;wh_CodeLength
.c050	60		rts				rts
>c051	48 65 61 64 65 72 2c		L1:	.text "Header,"	;  name of word as a string, ending at wh_NameLastChar
>c058	07					.byte *-L1	;wh_NameLength	length of name
>c059	7e bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c05b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c05c	08					.byte NN	;wh_Flags	dictionary flags
=49112					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c05d					Header_Comma:
.c05d	20 6b c0	jsr $c06b			jsr Header_Build
.c060					Header_Link:
.c060	a5 0e		lda $0e				lda WorkWord+0		; dp= WorkWord
.c062	85 10		sta $10				sta dp+0
.c064	a5 0f		lda $0f				lda WorkWord+1
.c066	85 11		sta $11				sta dp+1
.c068	4c c5 b9	jmp $b9c5			jmp dp_to_current	; Update the CURRENT wordlist with the new DP.
.c06b					Header_Build:
.c06b	20 15 ba	jsr $ba15			jsr parse_name_check	; get name string
.c06e	20 bf cb	jsr $cbbf			jsr Two_dup		; ( addr u addr u )
.c071	20 21 bc	jsr $bc21			jsr find_name		; ( addr u nt )
.c074	b5 25		lda $25,x			lda DStack+1,x		; not found?
.c076	e8		inx				inx			; Drop flag from find-name.
.c077	e8		inx				inx
.c078	a8		tay				tay
.c079	f0 1f		beq $c09a			beq _new_name		; We haven't seen this one before.
.c07b	24 0c		bit $0c				bit status		; Check bit 7
.c07d	10 08		bpl $c087			bpl _redefined_name	; Bit 7 is zero, so print the message.
.c07f	a9 80		lda #$80			lda #$80		; Set bit 7 to indicate dup
.c081	05 0c		ora $0c				ora status
.c083	85 0c		sta $0c				sta status
.c085	d0 19		bne $c0a0			bne _process_name
.c087					_redefined_name:
.c087	a9 2b		lda #$2b			lda #<str_redefined
.c089	a0 da		ldy #$da			ldy #>str_redefined
.c08b	20 0e cd	jsr $cd0e			jsr Print_ASCIIZ_YA_no_lf
.c08e	20 bf cb	jsr $cbbf			jsr Two_dup		 ; ( addr u addr u )
.c091	20 ed cc	jsr $cced			jsr Type
.c094	20 e0 cc	jsr $cce0			jsr Space
.c097	4c a0 c0	jmp $c0a0			jmp _process_name
.c09a					_new_name:
.c09a	a9 7f		lda #$7f			lda #$7F		; Clear bit 0 of status to indicate new word.
.c09c	25 0c		and $0c				and status
.c09e	85 0c		sta $0c				sta status
.c0a0					_process_name:
.c0a0	20 bf cb	jsr $cbbf			jsr Two_dup		; compile name string ending at wh_NameLastChar
.c0a3	20 27 c9	jsr $c927			jsr Here
.c0a6	20 83 ce	jsr $ce83			jsr Swap
.c0a9	20 f8 ac	jsr $acf8			jsr CMove
.c0ac	20 65 ce	jsr $ce65			jsr Dup
.c0af	20 03 c0	jsr $c003			jsr Allot
.c0b2	20 01 cc	jsr $cc01			jsr C_Comma		; compile wh_NameLength
.c0b5	e8		inx				inx			; drop name string addr
.c0b6	e8		inx				inx
.c0b7	20 b5 b9	jsr $b9b5			jsr current_to_dp	; Get the CURRENT dictionary pointer.
.c0ba	a5 10		lda $10				lda dp+0		; compile wh_WordListLink
.c0bc	a4 11		ldy $11				ldy dp+1
.c0be	20 1e cc	jsr $cc1e			jsr Comma_YA
.c0c1	a9 03		lda #$03			lda #3			; compile wh_CodeLength (temporary value, see adjust_z)
.c0c3	20 04 cc	jsr $cc04			jsr C_Comma_A
.c0c6	a9 08		lda #$08			lda #NN			; compile wh_Flags
.c0c8	20 04 cc	jsr $cc04			jsr C_Comma_A
.c0cb	38		sec				sec			; WorkWord= nt
.c0cc	a5 00		lda $00				lda cp+0
.c0ce	e9 85		sbc #$85			sbc #wh_xt
.c0d0	85 0e		sta $0e				sta WorkWord+0
.c0d2	a5 01		lda $01				lda cp+1
.c0d4	e9 00		sbc #$00			sbc #0
.c0d6	85 0f		sta $0f				sta WorkWord+1
.c0d8	60		rts				rts
=124					CL	.var *-(WordListLink+wh_Xt)
=$c0d9					en = *	; remember here
>c05b	7c					.byte CL	;wh_CodeLength
>c0d9	43 72 65 61 74 65		L1:	.text "Create"	;  name of word as a string, ending at wh_NameLastChar
>c0df	06					.byte *-L1	;wh_NameLength	length of name
>c0e0	d8 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c0e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c0e3	08					.byte NN	;wh_Flags	dictionary flags
=49247					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c0e4					Create:
.c0e4	20 5d c0	jsr $c05d			jsr Header_Comma	; compile word header
.c0e7	a9 f1		lda #$f1			lda #<DoVar
.c0e9	a0 c0		ldy #$c0			ldy #>DoVar
.c0eb	20 43 cc	jsr $cc43			jsr Jsr_Comma_YA
.c0ee	4c 48 bb	jmp $bb48			jmp adjust_z
=13					CL	.var *-(WordListLink+wh_Xt)
=$c0f1					en = *	; remember here
>c0e2	0d					.byte CL	;wh_CodeLength
.c0f1					DoVar:
.c0f1	68		pla				pla		; Pull the return address off the machine's stack
.c0f2	18		clc				clc		;   +1 because of the way the JSR works
.c0f3	69 01		adc #$01			adc #1
.c0f5	ca		dex				dex		; push on data stack
.c0f6	ca		dex				dex
.c0f7	95 24		sta $24,x			sta DStack+0,x
.c0f9	68		pla				pla
.c0fa	69 00		adc #$00			adc #0
.c0fc	95 25		sta $25,x			sta DStack+1,x
.c0fe	60		rts				rts		; takes us to the original caller of the
>c0ff	44 6f 65 73 3e			L1:	.text "Does>"	;  name of word as a string, ending at wh_NameLastChar
>c104	05					.byte *-L1	;wh_NameLength	length of name
>c105	5f c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c107	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c108	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=49284					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c109					Does:
.c109	a0 c1		ldy #$c1			ldy #>_runtime
.c10b	a9 23		lda #$23			lda #<_runtime
.c10d	20 43 cc	jsr $cc43			jsr Jsr_Comma_YA
.c110	a9 68		lda #$68			lda #$68		; compile PLA  to pop RTS addr (PFA-1) to AY
.c112	a0 a8		ldy #$a8			ldy #$a8		;    & TAY
.c114	20 1e cc	jsr $cc1e			jsr Comma_YA
.c117	a9 68		lda #$68			lda #$68		; compile PLA
.c119	20 04 cc	jsr $cc04			jsr C_Comma_A
.c11c	a0 c1		ldy #$c1			ldy #>_dodoes
.c11e	a9 35		lda #$35			lda #<_dodoes
.c120	4c 43 cc	jmp $cc43			jmp Jsr_Comma_YA
=26					CL	.var *-(WordListLink+wh_Xt)
=$c123					en = *	; remember here
>c107	1a					.byte CL	;wh_CodeLength
.c123					_runtime:
.c123	20 b5 b9	jsr $b9b5			jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.c126	18		clc				clc
.c127	68		pla				pla		; RTS addr LSB
.c128	69 01		adc #$01			adc #1		;   +1 for JSR bahavior
.c12a	a0 86		ldy #$86			ldy #Wh_xt+1
.c12c	91 10		sta ($10),y			sta (dp),y
.c12e	68		pla				pla		; RTS addr MSB
.c12f	69 00		adc #$00			adc #0
.c131	c8		iny				iny
.c132	91 10		sta ($10),y			sta (dp),y
.c134	60		rts				rts
.c135					_dodoes:
.c135	c8		iny				iny		; +1 for JSR behavior
.c136	d0 03		bne $c13b			bne +
.c138	18		clc				clc
.c139	69 01		adc #$01			adc #1
.c13b					+
.c13b	4c 73 ce	jmp $ce73			jmp PushAY
>c13e	55 6e 75 73 65 64		L1:	.text "Unused"	;  name of word as a string, ending at wh_NameLastChar
>c144	06					.byte *-L1	;wh_NameLength	length of name
>c145	84 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c147	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c148	00					.byte 0	;wh_Flags	dictionary flags
=49348					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c149					Unused:
=32600					_last = cp_end-2*padoffset
.c149	ca		dex				dex
.c14a	ca		dex				dex
.c14b	38		sec				sec
.c14c	a9 58		lda #$58			lda #<_last
.c14e	e5 00		sbc $00				sbc cp+0
.c150	95 24		sta $24,x			sta DStack+0,x
.c152	a9 7f		lda #$7f			lda #>_last
.c154	e5 01		sbc $01				sbc cp+1
.c156	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$c158					en = *	; remember here
>c147	0f					.byte CL	;wh_CodeLength
.c158	60		rts				rts
>c159	44 65 70 74 68			L1:	.text "Depth"	;  name of word as a string, ending at wh_NameLastChar
>c15e	05					.byte *-L1	;wh_NameLength	length of name
>c15f	c4 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c161	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c162	08					.byte NN	;wh_Flags	dictionary flags
=49374					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c163					Depth:
.c163	a9 28		lda #$28			lda #DStack0	; A= DStack0 - X
.c165	86 1a		stx $1a				stx tmp4
.c167	38		sec				sec
.c168	e5 1a		sbc $1a				sbc tmp4
.c16a	4a		lsr a				lsr		; divide by two because each cell is two bytes
.c16b	4c 35 b7	jmp $b735			jmp PushZA
=11					CL	.var *-(WordListLink+wh_Xt)
=$c16e					en = *	; remember here
>c161	0b					.byte CL	;wh_CodeLength
>c16e	4b 65 79			L1:	.text "Key"	;  name of word as a string, ending at wh_NameLastChar
>c171	03					.byte *-L1	;wh_NameLength	length of name
>c172	de c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c174	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c175	08					.byte NN	;wh_Flags	dictionary flags
=49393					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c176	20 7c c1	jsr $c17c	Key:		jsr key_a		; returns char in A
.c179	4c 35 b7	jmp $b735			jmp PushZA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c17c					en = *	; remember here
>c174	06					.byte CL	;wh_CodeLength
.c17c					Key_A:
.c17c	6c 08 03	jmp ($0308)			jmp (input)		; JSR/RTS
>c17f	4b 65 79 3f			L1:	.text "Key?"	;  name of word as a string, ending at wh_NameLastChar
>c183	04					.byte *-L1	;wh_NameLength	length of name
>c184	f1 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c186	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c187	08					.byte NN	;wh_Flags	dictionary flags
=49411					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c188	20 8e c1	jsr $c18e	KeyQ:		jsr KeyQ_A
.c18b	4c 35 b7	jmp $b735			jmp PushZA
.c18e	6c 0a 03	jmp ($030a)	KeyQ_A:		jmp (HaveKey)
>c191	52 65 66 69 6c 6c		L1:	.text "Refill"	;  name of word as a string, ending at wh_NameLastChar
>c197	06					.byte *-L1	;wh_NameLength	length of name
>c198	03 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c19a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c19b	08					.byte NN	;wh_Flags	dictionary flags
=49431					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c19c					Refill:
.c19c	a9 00		lda #$00			lda #0			; show empty in case of error
.c19e	85 06		sta $06				sta ciblen+0
.c1a0	85 07		sta $07				sta ciblen+1
.c1a2	a5 02		lda $02				lda insrc		; cheat: We only check LSB
.c1a4	d0 24		bne $c1ca			bne _src_not_kbd
.c1a6	a5 04		lda $04				lda cib+0		; address of CIB is NOS
.c1a8	a4 05		ldy $05				ldy cib+1
.c1aa	20 f3 b6	jsr $b6f3			jsr PushYA
.c1ad	a9 ff		lda #$ff			lda #bsize		; max number of chars is TOS
.c1af	20 35 b7	jsr $b735			jsr PushZA		;  cheat: We only accept max 255
.c1b2	20 e1 c1	jsr $c1e1			jsr Accept		; ( addr n1 -- n2)
.c1b5	b5 24		lda $24,x			lda DStack+0,x
.c1b7	85 06		sta $06				sta ciblen+0
.c1b9	b5 25		lda $25,x			lda DStack+1,x
.c1bb	85 07		sta $07				sta ciblen+1		; though we only accept 255 chars
.c1bd	a9 00		lda #$00			lda #0
.c1bf	85 08		sta $08				sta toin+0
.c1c1	85 09		sta $09				sta toin+1
.c1c3	a9 ff		lda #$ff			lda #$FF		; overwrite with TRUE flag
.c1c5	95 24		sta $24,x			sta DStack+0,x
.c1c7	95 25		sta $25,x			sta DStack+1,x
.c1c9	60		rts				rts
.c1ca					_src_not_kbd:
.c1ca	c9 ff		cmp #$ff			cmp #$ff
.c1cc	d0 03		bne $c1d1			bne _src_not_string
.c1ce	4c 26 b7	jmp $b726			jmp False
.c1d1					_src_not_string:
.c1d1	a9 eb		lda #$eb			lda #$100+err_Unsupported
.c1d3	20 c4 b3	jsr $b3c4			jsr ThrowA
=58					CL	.var *-(WordListLink+wh_Xt)
=$c1d6					en = *	; remember here
>c19a	3a					.byte CL	;wh_CodeLength
>c1d6	41 63 63 65 70 74		L1:	.text "Accept"	;  name of word as a string, ending at wh_NameLastChar
>c1dc	06					.byte *-L1	;wh_NameLength	length of name
>c1dd	17 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c1df	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c1e0	18					.byte UF+NN	;wh_Flags	dictionary flags
=49500					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c1e1					Accept:
.c1e1	20 7a b3	jsr $b37a			jsr underflow_2
.c1e4	b5 24		lda $24,x			lda DStack+0,x		; Abort if we were asked to receive 0 chars
.c1e6	15 25		ora $25,x			ora DStack+1,x
.c1e8	d0 09		bne $c1f3			bne _not_zero
.c1ea	e8		inx				inx			; drop n
.c1eb	e8		inx				inx
.c1ec	95 24		sta $24,x			sta DStack+0,x		; replace addr with 0
.c1ee	95 25		sta $25,x			sta DStack+1,x
.c1f0	4c c8 c2	jmp $c2c8			jmp accept_done
.c1f3					_not_zero:
.c1f3	b5 24		lda $24,x			lda DStack+0,x	; number of chars to get in tmp2 ...
.c1f5	85 16		sta $16				sta tmp2
.c1f7	a9 00		lda #$00			lda #0
.c1f9	85 17		sta $17				sta tmp2+1	; ... but we only accept max 255 chars
.c1fb	b5 26		lda $26,x			lda DStack+2,x	; address of buffer is NOS, to tmp1
.c1fd	85 14		sta $14				sta tmp1
.c1ff	b5 27		lda $27,x			lda DStack+3,x
.c201	85 15		sta $15				sta tmp1+1
.c203	e8		inx				inx
.c204	e8		inx				inx
.c205	a0 00		ldy #$00			ldy #0
.c207	a5 0c		lda $0c				lda status
.c209	29 f7		and #$f7			and #$f7
.c20b	18		clc				clc
.c20c	69 01		adc #$01			adc #1
.c20e	09 08		ora #$08			ora #$08
.c210	85 0c		sta $0c				sta status
.c212					accept_loop:
.c212	20 7c c1	jsr $c17c			jsr key_a
.c215	c9 0a		cmp #$0a			cmp #AscLF
.c217	f0 20		beq $c239			beq _eol
.c219	c9 0d		cmp #$0d			cmp #AscCR
.c21b	f0 1c		beq $c239			beq _eol
.c21d	c9 08		cmp #$08			cmp #AscBS
.c21f	f0 24		beq $c245			beq _backspace
.c221	c9 7f		cmp #$7f			cmp #AscDEL	; (CTRL-h)
.c223	f0 20		beq $c245			beq _backspace
.c225	c9 10		cmp #$10			cmp #AscCP
.c227	f0 37		beq $c260			beq _ctrl_p
.c229	c9 0e		cmp #$0e			cmp #AscCN
.c22b	f0 46		beq $c273			beq _ctrl_n
.c22d	91 14		sta ($14),y			sta (tmp1),y
.c22f	c8		iny				iny
.c230	20 d3 cc	jsr $ccd3			jsr Emit_A
.c233	c4 16		cpy $16				cpy tmp2	; reached character limit?
.c235	d0 db		bne $c212			bne accept_loop	      ; fall through if buffer limit reached
.c237	f0 03		beq $c23c			beq _buffer_full
.c239					_eol:
.c239	20 e0 cc	jsr $cce0			jsr Space	; print final space
.c23c					_buffer_full:
.c23c	94 24		sty $24,x			sty DStack+0,x	; Y contains number of chars accepted already
.c23e	a9 00		lda #$00			lda #0
.c240	95 25		sta $25,x			sta DStack+1,x		; we only accept 256 chars
.c242	4c c8 c2	jmp $c2c8			jmp accept_done
.c245					_backspace:
.c245	c0 00		cpy #$00			cpy #0		; buffer empty?
.c247	d0 06		bne $c24f			bne +
.c249	a9 07		lda #$07			lda #AscBELL	; complain and don't delete beyond the start of line
.c24b	20 d3 cc	jsr $ccd3			jsr Emit_A
.c24e	c8		iny				iny
.c24f					+
.c24f	88		dey				dey
.c250	a9 08		lda #$08			lda #AscBS	; move back one
.c252	20 d3 cc	jsr $ccd3			jsr Emit_A
.c255	20 e0 cc	jsr $cce0			jsr Space	; print a space (rubout)
.c258	a9 08		lda #$08			lda #AscBS	; move back over space
.c25a	20 d3 cc	jsr $ccd3			jsr Emit_A
.c25d	4c 12 c2	jmp $c212			jmp accept_loop
.c260					_ctrl_p:
.c260	a5 0c		lda $0c				lda status
.c262	29 07		and #$07			and #7
.c264	d0 08		bne $c26e			bne _ctrl_p_dec
.c266	a5 0c		lda $0c				lda status
.c268	09 07		ora #$07			ora #7
.c26a	85 0c		sta $0c				sta status
.c26c	d0 14		bne $c282			bne _recall_history
.c26e					_ctrl_p_dec:
.c26e	c6 0c		dec $0c				dec status
.c270	4c 82 c2	jmp $c282			jmp _recall_history
.c273					_ctrl_n:
.c273	a9 08		lda #$08			lda #$8
.c275	24 0c		bit $0c				bit status
.c277	d0 09		bne $c282			bne _recall_history
.c279	a5 0c		lda $0c				lda status
.c27b	29 f7		and #$f7			and #$f7
.c27d	18		clc				clc
.c27e	69 01		adc #$01			adc #1
.c280	85 0c		sta $0c				sta status
.c282					_recall_history:
.c282	a9 f7		lda #$f7			lda #$ff-%00001000
.c284	25 0c		and $0c				and status
.c286	85 0c		sta $0c				sta status
.c288	20 e3 c2	jsr $c2e3			jsr accept_total_recall
.c28b	a9 0d		lda #$0d			lda #AscCR
.c28d	20 d3 cc	jsr $ccd3			jsr Emit_A
.c290					input_clear:
.c290	c0 00		cpy #$00			cpy #0
.c292	f0 07		beq $c29b			beq input_cleared
.c294	20 e0 cc	jsr $cce0			jsr Space
.c297	88		dey				dey
.c298	4c 90 c2	jmp $c290			jmp input_clear
.c29b					input_cleared:
.c29b	a9 0d		lda #$0d			lda #AscCR
.c29d	20 d3 cc	jsr $ccd3			jsr Emit_A
.c2a0	b1 18		lda ($18),y			lda (tmp3),y
.c2a2	85 0d		sta $0d				sta status+1
.c2a4	e6 18		inc $18				inc tmp3
.c2a6	d0 02		bne $c2aa			bne +		; Increment the upper byte on carry.
.c2a8	e6 19		inc $19				inc tmp3+1
.c2aa					+
.c2aa	a9 0d		lda #$0d			lda #AscCR
.c2ac	20 d3 cc	jsr $ccd3			jsr Emit_A
.c2af					_history_loop:
.c2af	c4 0d		cpy $0d				cpy status+1
.c2b1	d0 03		bne $c2b6			bne +
.c2b3	4c 12 c2	jmp $c212			jmp accept_loop	      ; Needs a long jump
.c2b6					+
.c2b6	c4 16		cpy $16				cpy tmp2
.c2b8	f0 0a		beq $c2c4			beq _hist_filled_buffer
.c2ba	b1 18		lda ($18),y			lda (tmp3),y
.c2bc	91 14		sta ($14),y			sta (tmp1),y
.c2be	20 d3 cc	jsr $ccd3			jsr Emit_A
.c2c1	c8		iny				iny
.c2c2	d0 eb		bne $c2af			bne _history_loop
.c2c4					_hist_filled_buffer:
.c2c4	88		dey				dey
.c2c5	4c 12 c2	jmp $c212			jmp accept_loop
.c2c8					accept_done:
.c2c8	20 e3 c2	jsr $c2e3			jsr accept_total_recall
.c2cb	85 0d		sta $0d				sta status+1
.c2cd	a0 00		ldy #$00			ldy #0
.c2cf	91 18		sta ($18),y			sta (tmp3),y
.c2d1	e6 18		inc $18				inc tmp3
.c2d3	d0 02		bne $c2d7			bne +		; Increment the upper byte on carry.
.c2d5	e6 19		inc $19				inc tmp3+1
.c2d7					+
.c2d7					_save_history_loop:
.c2d7	c4 0d		cpy $0d				cpy status+1
.c2d9	f0 07		beq $c2e2			beq _save_history_done
.c2db	b1 14		lda ($14),y			lda (tmp1),y
.c2dd	91 18		sta ($18),y			sta (tmp3),y
.c2df	c8		iny				iny
.c2e0	d0 f5		bne $c2d7			bne _save_history_loop
.c2e2					_save_history_done:
=257					CL	.var *-(WordListLink+wh_Xt)
=$ff					CL	 .var $ff
=$c2e2					en = *	; remember here
>c1df	ff					.byte CL	;wh_CodeLength
.c2e2	60		rts				rts
.c2e3					accept_total_recall:
.c2e3	a9 66		lda #$66			lda #<hist_buff
.c2e5	85 18		sta $18				sta tmp3
.c2e7	a9 07		lda #$07			lda #>hist_buff
.c2e9	85 19		sta $19				sta tmp3+1
.c2eb	a5 0c		lda $0c				lda status
.c2ed	6a		ror a				ror
.c2ee	29 03		and #$03			and #3
.c2f0	18		clc				clc
.c2f1	65 19		adc $19				adc tmp3+1
.c2f3	85 19		sta $19				sta tmp3+1
.c2f5	a5 0c		lda $0c				lda status
.c2f7	6a		ror a				ror		; Rotate through carry into msb.
.c2f8	6a		ror a				ror
.c2f9	29 80		and #$80			and #$80
.c2fb	18		clc				clc
.c2fc	65 18		adc $18				adc tmp3
.c2fe	85 18		sta $18				sta tmp3
.c300	90 02		bcc $c304			bcc +		; Increment the upper byte on carry.
.c302	e6 19		inc $19				inc tmp3+1
.c304					+
.c304	98		tya				tya
.c305	c9 80		cmp #$80			cmp #$80
.c307	90 02		bcc $c30b			bcc +
.c309	a9 7f		lda #$7f			lda #$7F
.c30b					+
.c30b	60		rts				rts
>c30c	49 6e 70 75 74 3e 52		L1:	.text "Input>R"	;  name of word as a string, ending at wh_NameLastChar
>c313	07					.byte *-L1	;wh_NameLength	length of name
>c314	5c c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c316	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c317	08					.byte NN	;wh_Flags	dictionary flags
=49811					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c318					Input_To_R:
.c318	68		pla				pla			; move it out of the way
.c319	85 14		sta $14				sta tmp1+0
.c31b	68		pla				pla
.c31c	85 15		sta $15				sta tmp1+1
.c31e	a0 07		ldy #$07			ldy #7
.c320	b9 02 00	lda $0002,y	_loop:		lda InSrc,y	; insrc+7 is toin+1
.c323	48		pha				pha
.c324	88		dey				dey
.c325	10 f9		bpl $c320			bpl _loop
.c327	a5 15		lda $15				lda tmp1+1		; Restore address for return jump
.c329	48		pha				pha
.c32a	a5 14		lda $14				lda tmp1+0
.c32c	48		pha				pha
=21					CL	.var *-(WordListLink+wh_Xt)
=$c32d					en = *	; remember here
>c316	15					.byte CL	;wh_CodeLength
.c32d	60		rts				rts
>c32e	52 3e 49 6e 70 75 74		L1:	.text "R>Input"	;  name of word as a string, ending at wh_NameLastChar
>c335	07					.byte *-L1	;wh_NameLength	length of name
>c336	93 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c338	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c339	08					.byte NN	;wh_Flags	dictionary flags
=49845					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c33a					R_To_Input:
.c33a	68		pla				pla		 ; move it out of the way
.c33b	85 14		sta $14				sta tmp1+0
.c33d	68		pla				pla
.c33e	85 15		sta $15				sta tmp1+1
.c340	a0 00		ldy #$00			ldy #0
.c342	68		pla		_loop:		pla
.c343	99 02 00	sta $0002,y			sta InSrc,y ; also cib ciblen toin
.c346	c8		iny				iny
.c347	c0 08		cpy #$08			cpy #8
.c349	d0 f7		bne $c342			bne _loop
.c34b	a5 15		lda $15				lda tmp1+1		; Restore address for return jump
.c34d	48		pha				pha
.c34e	a5 14		lda $14				lda tmp1+0
.c350	48		pha				pha
=23					CL	.var *-(WordListLink+wh_Xt)
=$c351					en = *	; remember here
>c338	17					.byte CL	;wh_CodeLength
.c351	60		rts				rts
>c352	42 6f 75 6e 64 73		L1:	.text "Bounds"	;  name of word as a string, ending at wh_NameLastChar
>c358	06					.byte *-L1	;wh_NameLength	length of name
>c359	b5 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c35b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c35c	10					.byte UF	;wh_Flags	dictionary flags
=49880					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c35d					Bounds:
.c35d	20 7a b3	jsr $b37a			jsr underflow_2
.c360	18		clc				clc
.c361	b5 26		lda $26,x			lda DStack+2,x		; LSB addr
.c363	a8		tay				tay
.c364	75 24		adc $24,x			adc DStack+0,x		; LSB u
.c366	95 26		sta $26,x			sta DStack+2,x		; LSB addr+u
.c368	94 24		sty $24,x			sty DStack+0,x
.c36a	b5 27		lda $27,x			lda DStack+3,x		; MSB addr
.c36c	a8		tay				tay
.c36d	75 25		adc $25,x			adc DStack+1,x		; MSB u
.c36f	95 27		sta $27,x			sta DStack+3,x		; MSB addr+u
.c371	94 25		sty $25,x			sty DStack+1,x
=22					CL	.var *-(WordListLink+wh_Xt)
=$c373					en = *	; remember here
>c35b	16					.byte CL	;wh_CodeLength
.c373	60		rts				rts
>c374	53 70 61 63 65 73		L1:	.text "Spaces"	;  name of word as a string, ending at wh_NameLastChar
>c37a	06					.byte *-L1	;wh_NameLength	length of name
>c37b	d8 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c37d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c37e	18					.byte UF+NN	;wh_Flags	dictionary flags
=49914					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c37f					Spaces:
.c37f	20 65 b3	jsr $b365			jsr underflow_1
.c382	4c 88 c3	jmp $c388			jmp _test
.c385					_loop:
.c385	20 e0 cc	jsr $cce0			jsr Space		; print a space
.c388	d6 24		dec $24,x	_test:		dec DStack+0,x		; decrement & test
.c38a	10 f9		bpl $c385			bpl _loop
.c38c	e8		inx				inx			; Drop
.c38d	e8		inx				inx
=15					CL	.var *-(WordListLink+wh_Xt)
=$c38e					en = *	; remember here
>c37d	0f					.byte CL	;wh_CodeLength
.c38e	60		rts				rts
>c38f	2d 54 72 61 69 6c 69 6e		L1:	.text "-Trailing"	;  name of word as a string, ending at wh_NameLastChar
>c397	67
>c398	09					.byte *-L1	;wh_NameLength	length of name
>c399	fa c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c39b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c39c	18					.byte UF+NN	;wh_Flags	dictionary flags
=49944					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c39d					Minus_trailing:
.c39d	20 7a b3	jsr $b37a			jsr underflow_2
.c3a0	b5 26		lda $26,x			lda DStack+2,x		; tmp1= addr + (u1 & $ff00)
.c3a2	85 14		sta $14				sta tmp1+0
.c3a4	b5 27		lda $27,x			lda DStack+3,x
.c3a6	18		clc				clc
.c3a7	75 25		adc $25,x			adc DStack+1,x
.c3a9	85 15		sta $15				sta tmp1+1
.c3ab	b4 24		ldy $24,x			ldy DStack+0,x
.c3ad	88		dey		_loop:		dey			; back 1 char
.c3ae	c0 ff		cpy #$ff			cpy #$ff
.c3b0	d0 06		bne $c3b8			bne +
.c3b2	c6 15		dec $15				dec tmp1+1		;   back 1 page
.c3b4	d6 25		dec $25,x			dec DStack+1,x
.c3b6	30 06		bmi $c3be			bmi _done
.c3b8					+
.c3b8	b1 14		lda ($14),y			lda (tmp1),y		; if blank, keep going
.c3ba	c9 20		cmp #$20			cmp #AscSP
.c3bc	f0 ef		beq $c3ad			beq _loop
.c3be	c8		iny		_done:		iny			; forward 1 char
.c3bf	d0 02		bne $c3c3			bne +
.c3c1	f6 25		inc $25,x			inc DStack+1,x
.c3c3	94 24		sty $24,x	+		sty DStack+0,x
=40					CL	.var *-(WordListLink+wh_Xt)
=$c3c5					en = *	; remember here
>c39b	28					.byte CL	;wh_CodeLength
.c3c5	60		rts				rts
>c3c6	2d 4c 65 61 64 69 6e 67		L1:	.text "-Leading"	;  name of word as a string, ending at wh_NameLastChar
>c3ce	08					.byte *-L1	;wh_NameLength	length of name
>c3cf	18 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3d2	18					.byte UF+NN	;wh_Flags	dictionary flags
=49998					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3d3					Minus_leading:
.c3d3	20 7a b3	jsr $b37a			jsr underflow_2
.c3d6					_loop:
.c3d6	b5 24		lda $24,x			lda DStack+0,x		; chars left?
.c3d8	15 25		ora $25,x			ora DStack+1,x
.c3da	f0 0f		beq $c3eb			beq _done
.c3dc	a1 26		lda ($26,x)			lda (DStack+2,x)	; get first character
.c3de	c9 21		cmp #$21			cmp #AscSP+1		;   is_whitespace
.c3e0	b0 09		bcs $c3eb			bcs _done
.c3e2	20 65 c9	jsr $c965			jsr NOS_One_Plus
.c3e5	20 38 c9	jsr $c938			jsr One_Minus_NoUF
.c3e8	4c d6 c3	jmp $c3d6			jmp _loop
.c3eb					_done:
=24					CL	.var *-(WordListLink+wh_Xt)
=$c3eb					en = *	; remember here
>c3d1	18					.byte CL	;wh_CodeLength
.c3eb	60		rts				rts
>c3ec	2f 53 74 72 69 6e 67		L1:	.text "/String"	;  name of word as a string, ending at wh_NameLastChar
>c3f3	07					.byte *-L1	;wh_NameLength	length of name
>c3f4	4e c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3f6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3f7	18					.byte UF+NN	;wh_Flags	dictionary flags
=50035					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3f8					Slash_String:
.c3f8	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.c3fa	b0 1d		bcs $c419		bcs Throw_Stack_20
.c3fc	18		clc				clc		; addr += n
.c3fd	b5 24		lda $24,x			lda DStack+0,x
.c3ff	75 28		adc $28,x			adc DStack+4,x
.c401	95 28		sta $28,x			sta DStack+4,x
.c403	b5 25		lda $25,x			lda DStack+1,x
.c405	75 29		adc $29,x			adc DStack+5,x
.c407	95 29		sta $29,x			sta DStack+5,x
.c409	38		sec				sec		; u -= n
.c40a	b5 26		lda $26,x			lda DStack+2,x
.c40c	f5 24		sbc $24,x			sbc DStack+0,x
.c40e	95 26		sta $26,x			sta DStack+2,x
.c410	b5 27		lda $27,x			lda DStack+3,x
.c412	f5 25		sbc $25,x			sbc DStack+1,x
.c414	95 27		sta $27,x			sta DStack+3,x
.c416	e8		inx				inx		; Drop n
.c417	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c418					en = *	; remember here
>c3f6	20					.byte CL	;wh_CodeLength
.c418	60		rts				rts
.c419	4c 89 b3	jmp $b389	Throw_Stack_20: jmp Throw_Stack
>c41c	32 44 72 6f 70			L1:	.text "2Drop"	;  name of word as a string, ending at wh_NameLastChar
>c421	05					.byte *-L1	;wh_NameLength	length of name
>c422	73 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c424	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c425	10					.byte UF	;wh_Flags	dictionary flags
=50081					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c426					Two_drop:
.c426	20 7a b3	jsr $b37a			jsr underflow_2
.c429	e8		inx				inx
.c42a	e8		inx				inx
.c42b	e8		inx				inx
.c42c	e8		inx				inx
=7					CL	.var *-(WordListLink+wh_Xt)
=$c42d					en = *	; remember here
>c424	07					.byte CL	;wh_CodeLength
.c42d	60		rts				rts
>c42e	32 53 77 61 70			L1:	.text "2Swap"	;  name of word as a string, ending at wh_NameLastChar
>c433	05					.byte *-L1	;wh_NameLength	length of name
>c434	a1 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c436	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c437	08					.byte NN	;wh_Flags	dictionary flags
=50099					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c438					Two_swap:
.c438	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c43a	b0 dd		bcs $c419		bcs Throw_Stack_20
.c43c	86 14		stx $14				stx tmp1
.c43e	ca		dex				dex
.c43f	ca		dex				dex
.c440	ca		dex				dex
.c441	ca		dex				dex
.c442	e8		inx		_loop:		inx
.c443	b5 27		lda $27,x			lda DStack+3,x	; 3 <-> 7
.c445	b4 2b		ldy $2b,x			ldy DStack+7,x
.c447	95 2b		sta $2b,x			sta DStack+7,x
.c449	94 27		sty $27,x			sty DStack+3,x
.c44b	e4 14		cpx $14				cpx tmp1
.c44d	90 f3		bcc $c442			bcc _loop
=23					CL	.var *-(WordListLink+wh_Xt)
=$c44f					en = *	; remember here
>c436	17					.byte CL	;wh_CodeLength
.c44f	60		rts				rts
>c450	32 4f 76 65 72			L1:	.text "2Over"	;  name of word as a string, ending at wh_NameLastChar
>c455	05					.byte *-L1	;wh_NameLength	length of name
>c456	b3 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c458	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c459	18					.byte UF+NN	;wh_Flags	dictionary flags
=50133					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c45a					Two_over:
.c45a	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c45c	b0 bb		bcs $c419		bcs Throw_Stack_20
.c45e	a0 04		ldy #$04			ldy #4
.c460	ca		dex		_loop:		dex
.c461	b5 2c		lda $2c,x			lda DStack+8,x
.c463	95 24		sta $24,x			sta DStack+0,x
.c465	88		dey				dey
.c466	d0 f8		bne $c460			bne _loop
=14					CL	.var *-(WordListLink+wh_Xt)
=$c468					en = *	; remember here
>c458	0e					.byte CL	;wh_CodeLength
.c468	60		rts				rts
>c469	32 21				L1:	.text "2!"	;  name of word as a string, ending at wh_NameLastChar
>c46b	02					.byte *-L1	;wh_NameLength	length of name
>c46c	d5 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c46e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c46f	10					.byte UF	;wh_Flags	dictionary flags
=50155					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c470					Two_Store:
.c470	20 7f b3	jsr $b37f			jsr underflow_3
.c473	20 3b b3	jsr $b33b			jsr PopYA
.c476	85 14		sta $14		Two_Store_YA:	sta tmp1+0	; save addr
.c478	84 15		sty $15				sty tmp1+1
.c47a	b5 24		lda $24,x			lda DStack+0,x	; copy MSB
.c47c	a0 00		ldy #$00			ldy #0
.c47e	91 14		sta ($14),y			sta (tmp1),y
.c480	b5 25		lda $25,x			lda DStack+1,x	; copy next
.c482	c8		iny				iny
.c483	91 14		sta ($14),y			sta (tmp1),y
.c485	b5 26		lda $26,x			lda DStack+2,x	; copy next
.c487	c8		iny				iny
.c488	91 14		sta ($14),y			sta (tmp1),y
.c48a	b5 27		lda $27,x			lda DStack+3,x	; copy MSB
.c48c	c8		iny				iny
.c48d	91 14		sta ($14),y			sta (tmp1),y
.c48f	e8		inx				inx		; 2Drop
.c490	e8		inx				inx
.c491	e8		inx				inx
.c492	e8		inx				inx
=35					CL	.var *-(WordListLink+wh_Xt)
=$c493					en = *	; remember here
>c46e	23					.byte CL	;wh_CodeLength
.c493	60		rts				rts
>c494	32 40				L1:	.text "2@"	;  name of word as a string, ending at wh_NameLastChar
>c496	02					.byte *-L1	;wh_NameLength	length of name
>c497	eb c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c499	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c49a	00					.byte 0	;wh_Flags	dictionary flags
=50198					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c49b	20 3b b3	jsr $b33b	Two_fetch:	jsr PopYA
.c49e	85 14		sta $14		Two_Fetch_YA:	sta tmp1+0	; save addr
.c4a0	84 15		sty $15				sty tmp1+1
.c4a2					Two_Fetch_tmp1:
.c4a2	ca		dex				dex
.c4a3	ca		dex				dex
.c4a4	ca		dex				dex
.c4a5	ca		dex				dex
.c4a6	a0 00		ldy #$00			ldy #0		; copy LSB
.c4a8	b1 14		lda ($14),y			lda (tmp1),y
.c4aa	95 24		sta $24,x			sta DStack+0,x
.c4ac	c8		iny				iny		; copy next
.c4ad	b1 14		lda ($14),y			lda (tmp1),y
.c4af	95 25		sta $25,x			sta DStack+1,x
.c4b1	c8		iny				iny		; copy next
.c4b2	b1 14		lda ($14),y			lda (tmp1),y
.c4b4	95 26		sta $26,x			sta DStack+2,x
.c4b6	c8		iny				iny		; copy next
.c4b7	b1 14		lda ($14),y			lda (tmp1),y
.c4b9	95 27		sta $27,x			sta DStack+3,x
=32					CL	.var *-(WordListLink+wh_Xt)
=$c4bb					en = *	; remember here
>c499	20					.byte CL	;wh_CodeLength
.c4bb	60		rts				rts
>c4bc	44 40				L1:	.text "D@"	;  name of word as a string, ending at wh_NameLastChar
>c4be	02					.byte *-L1	;wh_NameLength	length of name
>c4bf	16 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4c2	08					.byte NN	;wh_Flags	dictionary flags
=50238					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4c3	20 3b b3	jsr $b33b	DFetch:		jsr PopYA
.c4c6	85 14		sta $14		DFetchYA:	sta tmp1+0	; save addr
.c4c8	84 15		sty $15				sty tmp1+1
.c4ca	ca		dex				dex
.c4cb	ca		dex				dex
.c4cc	ca		dex				dex
.c4cd	ca		dex				dex
.c4ce	a0 00		ldy #$00			ldy #0
.c4d0	b1 14		lda ($14),y			lda (tmp1),y
.c4d2	95 26		sta $26,x			sta DStack+2,x
.c4d4	c8		iny				iny
.c4d5	b1 14		lda ($14),y			lda (tmp1),y
.c4d7	95 27		sta $27,x			sta DStack+3,x
.c4d9	c8		iny				iny
.c4da	b1 14		lda ($14),y			lda (tmp1),y
.c4dc	95 24		sta $24,x			sta DStack+0,x
.c4de	c8		iny				iny
.c4df	b1 14		lda ($14),y			lda (tmp1),y
.c4e1	95 25		sta $25,x			sta DStack+1,x
=32					CL	.var *-(WordListLink+wh_Xt)
=$c4e3					en = *	; remember here
>c4c1	20					.byte CL	;wh_CodeLength
.c4e3	60		rts				rts
>c4e4	32 52 40			L1:	.text "2R@"	;  name of word as a string, ending at wh_NameLastChar
>c4e7	03					.byte *-L1	;wh_NameLength	length of name
>c4e8	3e c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4ea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4eb	09					.byte CO+NN	;wh_Flags	dictionary flags
=50279					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4ec					Two_r_fetch:
.c4ec	8a		txa				txa		; Y= return stack index
.c4ed	ba		tsx				tsx
.c4ee	86 14		stx $14				stx tmp1
.c4f0	a4 14		ldy $14				ldy tmp1
.c4f2	aa		tax				tax
.c4f3	ca		dex				dex		; make room on the Data Stack
.c4f4	ca		dex				dex
.c4f5	ca		dex				dex
.c4f6	ca		dex				dex
.c4f7	b9 03 01	lda $0103,y			lda RStack+3,y	; LSB of top entry
.c4fa	95 24		sta $24,x			sta DStack+0,x
.c4fc	b9 04 01	lda $0104,y			lda RStack+4,y	; MSB of top entry
.c4ff	95 25		sta $25,x			sta DStack+1,x
.c501	b9 05 01	lda $0105,y			lda RStack+5,y	; LSB of bottom entry
.c504	95 26		sta $26,x			sta DStack+2,x
.c506	b9 06 01	lda $0106,y			lda RStack+6,y	; MSB of bottom entry
.c509	95 27		sta $27,x			sta DStack+3,x
=31					CL	.var *-(WordListLink+wh_Xt)
=$c50b					en = *	; remember here
>c4ea	1f					.byte CL	;wh_CodeLength
.c50b	60		rts				rts
>c50c	32 52 3e			L1:	.text "2R>"	;  name of word as a string, ending at wh_NameLastChar
>c50f	03					.byte *-L1	;wh_NameLength	length of name
>c510	67 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c512	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c513	41					.byte CO+R6	;wh_Flags	dictionary flags
=50319					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c514					Two_r_from:
.c514	68		pla				pla			; save the return address
.c515	85 14		sta $14				sta tmp1+0
.c517	68		pla				pla
.c518	85 15		sta $15				sta tmp1+1
.c51a	ca		dex				dex			; make room on stack
.c51b	ca		dex				dex
.c51c	ca		dex				dex
.c51d	ca		dex				dex
.c51e	68		pla				pla			; LSB
.c51f	95 24		sta $24,x			sta DStack+0,x
.c521	68		pla				pla			; MSB
.c522	95 25		sta $25,x			sta DStack+1,x
.c524	68		pla				pla			; LSB
.c525	95 26		sta $26,x			sta DStack+2,x
.c527	68		pla				pla			; MSB
.c528	95 27		sta $27,x			sta DStack+3,x
.c52a	a5 15		lda $15				lda tmp1+1		; restore return address
.c52c	48		pha				pha
.c52d	a5 14		lda $14				lda tmp1+0
.c52f	48		pha				pha
=28					CL	.var *-(WordListLink+wh_Xt)
=$c530					en = *	; remember here
>c512	1c					.byte CL	;wh_CodeLength
.c530	60		rts				rts
>c531	32 3e 52			L1:	.text "2>R"	;  name of word as a string, ending at wh_NameLastChar
>c534	03					.byte *-L1	;wh_NameLength	length of name
>c535	8f c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c537	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c538	51					.byte CO+UF+R6	;wh_Flags	dictionary flags
=50356					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c539					Two_to_r:
.c539	68		pla				pla		; save the return address
.c53a	85 14		sta $14				sta tmp1+0
.c53c	68		pla				pla
.c53d	85 15		sta $15				sta tmp1+1
.c53f	20 7a b3	jsr $b37a			jsr underflow_2
.c542	b5 27		lda $27,x			lda DStack+3,x	; MSB
.c544	48		pha				pha
.c545	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c547	48		pha				pha
.c548	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c54a	48		pha				pha
.c54b	b5 24		lda $24,x			lda DStack+0,x	; LSB
.c54d	48		pha				pha
.c54e	e8		inx				inx
.c54f	e8		inx				inx
.c550	e8		inx				inx
.c551	e8		inx				inx
.c552	a5 15		lda $15				lda tmp1+1	; restore return address
.c554	48		pha				pha
.c555	a5 14		lda $14				lda tmp1+0
.c557	48		pha				pha
=31					CL	.var *-(WordListLink+wh_Xt)
=$c558					en = *	; remember here
>c537	1f					.byte CL	;wh_CodeLength
.c558	60		rts				rts
>c559	49 6e 76 65 72 74		L1:	.text "Invert"	;  name of word as a string, ending at wh_NameLastChar
>c55f	06					.byte *-L1	;wh_NameLength	length of name
>c560	b4 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c562	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c563	10					.byte UF	;wh_Flags	dictionary flags
=50399					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c564					Invert:
.c564	20 65 b3	jsr $b365			jsr underflow_1
.c567	a9 ff		lda #$ff			lda #$FF
.c569	55 24		eor $24,x			eor DStack+0,x	; LSB
.c56b	95 24		sta $24,x			sta DStack+0,x
.c56d	a9 ff		lda #$ff			lda #$FF
.c56f	55 25		eor $25,x			eor DStack+1,x	; MSB
.c571	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$c573					en = *	; remember here
>c562	0f					.byte CL	;wh_CodeLength
.c573	60		rts				rts
>c574	4e 65 67 61 74 65		L1:	.text "Negate"	;  name of word as a string, ending at wh_NameLastChar
>c57a	06					.byte *-L1	;wh_NameLength	length of name
>c57b	df c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c57d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c57e	10					.byte UF	;wh_Flags	dictionary flags
=50426					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c57f					Negate:
.c57f	20 65 b3	jsr $b365			jsr underflow_1
.c582	38		sec		Negate3:	sec
.c583	a9 00		lda #$00	Negate4:	lda #0
.c585	f5 24		sbc $24,x			sbc DStack+0,x	; LSB
.c587	95 24		sta $24,x			sta DStack+0,x
.c589	a9 00		lda #$00			lda #0
.c58b	f5 25		sbc $25,x			sbc DStack+1,x	; MSB
.c58d	95 25		sta $25,x			sta DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$c58f					en = *	; remember here
>c57d	10					.byte CL	;wh_CodeLength
.c58f	60		rts				rts
>c590	41 62 73			L1:	.text "Abs"	;  name of word as a string, ending at wh_NameLastChar
>c593	03					.byte *-L1	;wh_NameLength	length of name
>c594	fa c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c596	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c597	08					.byte NN	;wh_Flags	dictionary flags
=50451					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c598					Abs:
.c598	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c59a	b0 05		bcs $c5a1		bcs Throw_Stack_17
.c59c	b5 25		lda $25,x			lda DStack+1,x	; n negative?
.c59e	30 e2		bmi $c582			bmi Negate3
=8					CL	.var *-(WordListLink+wh_Xt)
=$c5a0					en = *	; remember here
>c596	08					.byte CL	;wh_CodeLength
.c5a0	60		rts				rts
.c5a1	4c 89 b3	jmp $b389	Throw_Stack_17: jmp Throw_Stack
>c5a4	44 4e 65 67 61 74 65		L1:	.text "DNegate"	;  name of word as a string, ending at wh_NameLastChar
>c5ab	07					.byte *-L1	;wh_NameLength	length of name
>c5ac	13 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5ae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5af	08					.byte NN	;wh_Flags	dictionary flags
=50475					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5b0					DNegate:
.c5b0	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c5b2	b0 ed		bcs $c5a1		bcs Throw_Stack_17
.c5b4	38		sec		DNegate3:	sec
.c5b5	a9 00		lda #$00			lda #0
.c5b7	f5 26		sbc $26,x			sbc DStack+2,x	; LSB of low cell
.c5b9	95 26		sta $26,x			sta DStack+2,x
.c5bb	a9 00		lda #$00			lda #0
.c5bd	f5 27		sbc $27,x			sbc DStack+3,x	; MSB of low cell
.c5bf	95 27		sta $27,x			sta DStack+3,x
.c5c1	4c 83 c5	jmp $c583			jmp Negate4
=20					CL	.var *-(WordListLink+wh_Xt)
=$c5c4					en = *	; remember here
>c5ae	14					.byte CL	;wh_CodeLength
>c5c4	44 41 62 73			L1:	.text "DAbs"	;  name of word as a string, ending at wh_NameLastChar
>c5c8	04					.byte *-L1	;wh_NameLength	length of name
>c5c9	2b c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5cb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5cc	08					.byte NN	;wh_Flags	dictionary flags
=50504					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5cd					DAbs:
.c5cd	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c5cf	b0 d0		bcs $c5a1		bcs Throw_Stack_17
.c5d1	b5 25		lda $25,x			lda DStack+1,x	; d negative?
.c5d3	30 df		bmi $c5b4			bmi DNegate3
=8					CL	.var *-(WordListLink+wh_Xt)
=$c5d5					en = *	; remember here
>c5cb	08					.byte CL	;wh_CodeLength
.c5d5	60		rts				rts
>c5d6	44 3c 3e			L1:	.text "D<>"	;  name of word as a string, ending at wh_NameLastChar
>c5d9	03					.byte *-L1	;wh_NameLength	length of name
>c5da	48 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5dd	08					.byte NN	;wh_Flags	dictionary flags
=50521					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5de	20 eb c5	jsr $c5eb	DNEq:		jsr DEqual
.c5e1	4c e6 c7	jmp $c7e6			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c5e4					en = *	; remember here
>c5dc	06					.byte CL	;wh_CodeLength
>c5e4	44 3d				L1:	.text "D="	;  name of word as a string, ending at wh_NameLastChar
>c5e6	02					.byte *-L1	;wh_NameLength	length of name
>c5e7	59 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5e9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5ea	08					.byte NN	;wh_Flags	dictionary flags
=50534					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5eb	b5 2a		lda $2a,x	DEqual:		lda DStack+6,x
.c5ed	d5 26		cmp $26,x			cmp DStack+2,x
.c5ef	d0 50		bne $c641			bne False3
.c5f1	b5 2b		lda $2b,x			lda DStack+7,x
.c5f3	d5 27		cmp $27,x			cmp DStack+3,x
.c5f5	d0 4a		bne $c641			bne False3
.c5f7	b5 24		lda $24,x			lda DStack+0,x
.c5f9	d5 28		cmp $28,x			cmp DStack+4,x
.c5fb	d0 44		bne $c641			bne False3
.c5fd	b5 25		lda $25,x			lda DStack+1,x
.c5ff	d5 29		cmp $29,x			cmp DStack+5,x
.c601	d0 3e		bne $c641			bne False3
.c603	f0 62		beq $c667			beq True3
=26					CL	.var *-(WordListLink+wh_Xt)
=$c605					en = *	; remember here
>c5e9	1a					.byte CL	;wh_CodeLength
>c605	44 55 3e			L1:	.text "DU>"	;  name of word as a string, ending at wh_NameLastChar
>c608	03					.byte *-L1	;wh_NameLength	length of name
>c609	66 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c60b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c60c	08					.byte NN	;wh_Flags	dictionary flags
=50568					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c60d	20 a6 c6	jsr $c6a6	DUGt:		jsr DGtSub
.c610	90 55		bcc $c667			bcc True3
.c612	b0 2d		bcs $c641			bcs False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c614					en = *	; remember here
>c60b	07					.byte CL	;wh_CodeLength
>c614	44 55 3c 3d			L1:	.text "DU<="	;  name of word as a string, ending at wh_NameLastChar
>c618	04					.byte *-L1	;wh_NameLength	length of name
>c619	88 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c61b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c61c	08					.byte NN	;wh_Flags	dictionary flags
=50584					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c61d	20 a6 c6	jsr $c6a6	DULe:		jsr DGtSub
.c620	b0 45		bcs $c667			bcs True3
.c622	90 1d		bcc $c641			bcc False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c624					en = *	; remember here
>c61b	07					.byte CL	;wh_CodeLength
>c624	44 55 3e 3d			L1:	.text "DU>="	;  name of word as a string, ending at wh_NameLastChar
>c628	04					.byte *-L1	;wh_NameLength	length of name
>c629	98 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c62b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c62c	08					.byte NN	;wh_Flags	dictionary flags
=50600					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c62d	20 74 c6	jsr $c674	DUGe:		jsr DLessSub
.c630	b0 35		bcs $c667			bcs True3
.c632	90 0d		bcc $c641			bcc False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c634					en = *	; remember here
>c62b	07					.byte CL	;wh_CodeLength
>c634	44 55 3c			L1:	.text "DU<"	;  name of word as a string, ending at wh_NameLastChar
>c637	03					.byte *-L1	;wh_NameLength	length of name
>c638	a8 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c63a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c63b	08					.byte NN	;wh_Flags	dictionary flags
=50615					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c63c	20 74 c6	jsr $c674	DULess:		jsr DLessSub
.c63f	90 26		bcc $c667			bcc True3
.c641	a9 00		lda #$00	False3:		lda #0
.c643	f0 24		beq $c669			beq DReturn3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c645					en = *	; remember here
>c63a	09					.byte CL	;wh_CodeLength
.c645	4c 89 b3	jmp $b389	Throw_Stack_09: jmp Throw_Stack
>c648	44 3e 3d			L1:	.text "D>="	;  name of word as a string, ending at wh_NameLastChar
>c64b	03					.byte *-L1	;wh_NameLength	length of name
>c64c	b7 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c64e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c64f	08					.byte NN	;wh_Flags	dictionary flags
=50635					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c650	20 74 c6	jsr $c674	DGEq:		jsr DLessSub
.c653	70 10		bvs $c665			bvs DLess3
.c655	10 10		bpl $c667	DGEq3:		bpl True3
.c657	30 e8		bmi $c641			bmi False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c659					en = *	; remember here
>c64e	09					.byte CL	;wh_CodeLength
>c659	44 3c				L1:	.text "D<"	;  name of word as a string, ending at wh_NameLastChar
>c65b	02					.byte *-L1	;wh_NameLength	length of name
>c65c	cb c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c65e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c65f	08					.byte NN	;wh_Flags	dictionary flags
=50651					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c660	20 74 c6	jsr $c674	DLess:		jsr DLessSub
.c663	70 f0		bvs $c655			bvs DGEq3
.c665	10 da		bpl $c641	DLess3:		bpl False3
.c667	a9 ff		lda #$ff	True3:		lda #$ff
.c669					DReturn3:
.c669	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c66b	b0 d8		bcs $c645		bcs Throw_Stack_09
.c66d	95 2a		sta $2a,x			sta DStack+6,x
.c66f	95 2b		sta $2b,x			sta DStack+7,x
.c671	4c a0 ac	jmp $aca0			jmp ThreeDrop
=20					CL	.var *-(WordListLink+wh_Xt)
=$c674					en = *	; remember here
>c65e	14					.byte CL	;wh_CodeLength
.c674	b5 2a		lda $2a,x	DLessSub:	lda DStack+6,x
.c676	d5 26		cmp $26,x			cmp DStack+2,x
.c678	b5 2b		lda $2b,x			lda DStack+7,x
.c67a	f5 27		sbc $27,x			sbc DStack+3,x
.c67c	b5 28		lda $28,x			lda DStack+4,x
.c67e	f5 24		sbc $24,x			sbc DStack+0,x
.c680	b5 29		lda $29,x			lda DStack+5,x
.c682	f5 25		sbc $25,x			sbc DStack+1,x
.c684	60		rts				rts
>c685	44 3c 3d			L1:	.text "D<="	;  name of word as a string, ending at wh_NameLastChar
>c688	03					.byte *-L1	;wh_NameLength	length of name
>c689	db c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c68b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c68c	08					.byte NN	;wh_Flags	dictionary flags
=50696					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c68d	20 a6 c6	jsr $c6a6	DLe:		jsr DGtSub
.c690	70 10		bvs $c6a2			bvs DGt3
.c692	10 d3		bpl $c667	DLe3:		bpl True3
.c694	30 ab		bmi $c641			bmi False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c696					en = *	; remember here
>c68b	09					.byte CL	;wh_CodeLength
>c696	44 3e				L1:	.text "D>"	;  name of word as a string, ending at wh_NameLastChar
>c698	02					.byte *-L1	;wh_NameLength	length of name
>c699	08 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c69b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c69c	08					.byte NN	;wh_Flags	dictionary flags
=50712					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c69d	20 a6 c6	jsr $c6a6	DGt:		jsr DGtSub
.c6a0	70 f0		bvs $c692			bvs DLe3
.c6a2	30 c3		bmi $c667	DGt3:		bmi True3
.c6a4	10 9b		bpl $c641			bpl False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c6a6					en = *	; remember here
>c69b	09					.byte CL	;wh_CodeLength
.c6a6	b5 26		lda $26,x	DGtSub:		lda DStack+2,x
.c6a8	d5 2a		cmp $2a,x			cmp DStack+6,x
.c6aa	b5 27		lda $27,x			lda DStack+3,x
.c6ac	f5 2b		sbc $2b,x			sbc DStack+7,x
.c6ae	b5 24		lda $24,x			lda DStack+0,x
.c6b0	f5 28		sbc $28,x			sbc DStack+4,x
.c6b2	b5 25		lda $25,x			lda DStack+1,x
.c6b4	f5 29		sbc $29,x			sbc DStack+5,x
.c6b6	60		rts				rts
>c6b7	44 30 3c 3d			L1:	.text "D0<="	;  name of word as a string, ending at wh_NameLastChar
>c6bb	04					.byte *-L1	;wh_NameLength	length of name
>c6bc	18 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6bf	08					.byte NN	;wh_Flags	dictionary flags
=50747					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6c0	b5 25		lda $25,x	D0Le:		lda DStack+1,x	; test sign
.c6c2	30 6b		bmi $c72f			bmi True1
.c6c4	10 27		bpl $c6ed			bpl D0Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c6c6					en = *	; remember here
>c6be	06					.byte CL	;wh_CodeLength
>c6c6	44 30 3e			L1:	.text "D0>"	;  name of word as a string, ending at wh_NameLastChar
>c6c9	03					.byte *-L1	;wh_NameLength	length of name
>c6ca	3b c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6cd	08					.byte NN	;wh_Flags	dictionary flags
=50761					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6ce	b5 25		lda $25,x	D0Gt:		lda DStack+1,x	; test sign
.c6d0	10 0c		bpl $c6de			bpl D0Ne
.c6d2	4c 4f c7	jmp $c74f			jmp False1
>c6d5	44 30 3c 3e			L1:	.text "D0<>"	;  name of word as a string, ending at wh_NameLastChar
>c6d9	04					.byte *-L1	;wh_NameLength	length of name
>c6da	49 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6dd	08					.byte NN	;wh_Flags	dictionary flags
=50777					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6de	20 f4 c6	jsr $c6f4	D0Ne:		jsr D0EqSub
.c6e1	d0 4c		bne $c72f			bne True1
.c6e3	f0 6a		beq $c74f			beq False1
=7					CL	.var *-(WordListLink+wh_Xt)
=$c6e5					en = *	; remember here
>c6dc	07					.byte CL	;wh_CodeLength
>c6e5	44 30 3d			L1:	.text "D0="	;  name of word as a string, ending at wh_NameLastChar
>c6e8	03					.byte *-L1	;wh_NameLength	length of name
>c6e9	59 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6eb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6ec	08					.byte NN	;wh_Flags	dictionary flags
=50792					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6ed	20 f4 c6	jsr $c6f4	D0Equal:	jsr D0EqSub
.c6f0	d0 5d		bne $c74f			bne False1
.c6f2	f0 3b		beq $c72f			beq True1
=7					CL	.var *-(WordListLink+wh_Xt)
=$c6f4					en = *	; remember here
>c6eb	07					.byte CL	;wh_CodeLength
.c6f4	b5 26		lda $26,x	D0EqSub:	lda DStack+2,x
.c6f6	15 27		ora $27,x			ora DStack+3,x
.c6f8	15 24		ora $24,x			ora DStack+0,x
.c6fa	15 25		ora $25,x			ora DStack+1,x
.c6fc	60		rts				rts
>c6fd	44 30 3c			L1:	.text "D0<"	;  name of word as a string, ending at wh_NameLastChar
>c700	03					.byte *-L1	;wh_NameLength	length of name
>c701	68 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c703	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c704	08					.byte NN	;wh_Flags	dictionary flags
=50816					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c705	b5 25		lda $25,x	D0Less:		lda DStack+1,x	; test sign
.c707	30 26		bmi $c72f			bmi True1
.c709	10 44		bpl $c74f			bpl False1
=6					CL	.var *-(WordListLink+wh_Xt)
=$c70b					en = *	; remember here
>c703	06					.byte CL	;wh_CodeLength
>c70b	44 30 3e 3d			L1:	.text "D0>="	;  name of word as a string, ending at wh_NameLastChar
>c70f	04					.byte *-L1	;wh_NameLength	length of name
>c710	80 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c712	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c713	08					.byte NN	;wh_Flags	dictionary flags
=50831					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c714	b5 25		lda $25,x	D0Ge:		lda DStack+1,x	; test sign
.c716	10 17		bpl $c72f			bpl True1
.c718	30 35		bmi $c74f			bmi False1
=6					CL	.var *-(WordListLink+wh_Xt)
=$c71a					en = *	; remember here
>c712	06					.byte CL	;wh_CodeLength
.c71a	4c 89 b3	jmp $b389	Throw_Stack_08: jmp Throw_Stack
>c71d	3d				L1:	.text "="	;  name of word as a string, ending at wh_NameLastChar
>c71e	01					.byte *-L1	;wh_NameLength	length of name
>c71f	8f c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c721	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c722	08					.byte NN	;wh_Flags	dictionary flags
=50846					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c723	b5 24		lda $24,x	Equal:		lda DStack+0,x		; LSB
.c725	d5 26		cmp $26,x			cmp DStack+2,x
.c727	d0 26		bne $c74f			bne False1
.c729	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c72b	d5 27		cmp $27,x			cmp DStack+3,x
.c72d	d0 20		bne $c74f			bne False1
.c72f	a9 ff		lda #$ff	True1:		lda #$ff	; return TRUE
.c731					Return1:
.c731	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c733	b0 e5		bcs $c71a		bcs Throw_Stack_08
.c735	e8		inx				inx		; Drop
.c736	e8		inx				inx
.c737	95 24		sta $24,x			sta DStack+0,x	; store f
.c739	95 25		sta $25,x			sta DStack+1,x
.c73b	60		rts				rts
=25					CL	.var *-(WordListLink+wh_Xt)
=$c73c					en = *	; remember here
>c721	19					.byte CL	;wh_CodeLength
>c73c	3c 3e				L1:	.text "<>"	;  name of word as a string, ending at wh_NameLastChar
>c73e	02					.byte *-L1	;wh_NameLength	length of name
>c73f	9e c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c741	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c742	08					.byte NN	;wh_Flags	dictionary flags
=50878					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c743	b5 24		lda $24,x	Not_Equals:	lda DStack+0,x		; LSB
.c745	d5 26		cmp $26,x			cmp DStack+2,x
.c747	d0 e6		bne $c72f			bne True1
.c749	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c74b	d5 27		cmp $27,x			cmp DStack+3,x
.c74d	d0 e0		bne $c72f			bne True1
.c74f	a9 00		lda #$00	False1:		lda #0		; return FALSE
.c751	f0 de		beq $c731			beq Return1
=16					CL	.var *-(WordListLink+wh_Xt)
=$c753					en = *	; remember here
>c741	10					.byte CL	;wh_CodeLength
>c753	3c				L1:	.text "<"	;  name of word as a string, ending at wh_NameLastChar
>c754	01					.byte *-L1	;wh_NameLength	length of name
>c755	be c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c757	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c758	08					.byte NN	;wh_Flags	dictionary flags
=50900					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c759	b5 26		lda $26,x	Less_Than:	lda DStack+2,x	; compare
.c75b	d5 24		cmp $24,x			cmp DStack+0,x
.c75d	b5 27		lda $27,x			lda DStack+3,x
.c75f	f5 25		sbc $25,x			sbc DStack+1,x
.c761	50 02		bvc $c765			bvc _c
.c763	49 80		eor #$80			eor #$80	; fix sign
.c765	10 e8		bpl $c74f	_c:		bpl False1
.c767	30 c6		bmi $c72f			bmi True1
=16					CL	.var *-(WordListLink+wh_Xt)
=$c769					en = *	; remember here
>c757	10					.byte CL	;wh_CodeLength
>c769	3e 3d				L1:	.text ">="	;  name of word as a string, ending at wh_NameLastChar
>c76b	02					.byte *-L1	;wh_NameLength	length of name
>c76c	d4 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c76e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c76f	08					.byte NN	;wh_Flags	dictionary flags
=50923					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c770	20 59 c7	jsr $c759	Ge:		jsr Less_Than
.c773	4c e6 c7	jmp $c7e6			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c776					en = *	; remember here
>c76e	06					.byte CL	;wh_CodeLength
>c776	55 3c				L1:	.text "U<"	;  name of word as a string, ending at wh_NameLastChar
>c778	02					.byte *-L1	;wh_NameLength	length of name
>c779	eb c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c77b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c77c	08					.byte NN	;wh_Flags	dictionary flags
=50936					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c77d	b5 26		lda $26,x	U_Less_Than:	lda DStack+2,x
.c77f	d5 24		cmp $24,x			cmp DStack+0,x
.c781	b5 27		lda $27,x			lda DStack+3,x
.c783	f5 25		sbc $25,x			sbc DStack+1,x
.c785	b0 c8		bcs $c74f			bcs False1
.c787	90 a6		bcc $c72f			bcc True1
=12					CL	.var *-(WordListLink+wh_Xt)
=$c789					en = *	; remember here
>c77b	0c					.byte CL	;wh_CodeLength
>c789	55 3e				L1:	.text "U>"	;  name of word as a string, ending at wh_NameLastChar
>c78b	02					.byte *-L1	;wh_NameLength	length of name
>c78c	f8 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c78e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c78f	08					.byte NN	;wh_Flags	dictionary flags
=50955					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c790	b5 24		lda $24,x	U_Greater_Than:	lda DStack+0,x
.c792	d5 26		cmp $26,x			cmp DStack+2,x
.c794	b5 25		lda $25,x			lda DStack+1,x
.c796	f5 27		sbc $27,x			sbc DStack+3,x
.c798	b0 b5		bcs $c74f			bcs False1
.c79a	90 93		bcc $c72f			bcc True1
=12					CL	.var *-(WordListLink+wh_Xt)
=$c79c					en = *	; remember here
>c78e	0c					.byte CL	;wh_CodeLength
>c79c	3e				L1:	.text ">"	;  name of word as a string, ending at wh_NameLastChar
>c79d	01					.byte *-L1	;wh_NameLength	length of name
>c79e	0b c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7a0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7a1	08					.byte NN	;wh_Flags	dictionary flags
=50973					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7a2	b5 24		lda $24,x	Greater_Than:	lda DStack+0,x	; compare
.c7a4	d5 26		cmp $26,x			cmp DStack+2,x
.c7a6	b5 25		lda $25,x			lda DStack+1,x
.c7a8	f5 27		sbc $27,x			sbc DStack+3,x
.c7aa	50 02		bvc $c7ae			bvc _c
.c7ac	49 80		eor #$80			eor #$80	; fix sign
.c7ae	10 9f		bpl $c74f	_c:		bpl False1
.c7b0	4c 2f c7	jmp $c72f			jmp True1
=17					CL	.var *-(WordListLink+wh_Xt)
=$c7b3					en = *	; remember here
>c7a0	11					.byte CL	;wh_CodeLength
>c7b3	3c 3d				L1:	.text "<="	;  name of word as a string, ending at wh_NameLastChar
>c7b5	02					.byte *-L1	;wh_NameLength	length of name
>c7b6	1d c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7b8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7b9	08					.byte NN	;wh_Flags	dictionary flags
=50997					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7ba	20 a2 c7	jsr $c7a2	Le:		jsr Greater_Than
.c7bd	4c e6 c7	jmp $c7e6			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c7c0					en = *	; remember here
>c7b8	06					.byte CL	;wh_CodeLength
>c7c0	55 3e 3d			L1:	.text "U>="	;  name of word as a string, ending at wh_NameLastChar
>c7c3	03					.byte *-L1	;wh_NameLength	length of name
>c7c4	35 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7c6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7c7	08					.byte NN	;wh_Flags	dictionary flags
=51011					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7c8	20 7d c7	jsr $c77d	UGe:		jsr U_Less_Than
.c7cb	4c e6 c7	jmp $c7e6			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c7ce					en = *	; remember here
>c7c6	06					.byte CL	;wh_CodeLength
>c7ce	55 3c 3d			L1:	.text "U<="	;  name of word as a string, ending at wh_NameLastChar
>c7d1	03					.byte *-L1	;wh_NameLength	length of name
>c7d2	43 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7d4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7d5	08					.byte NN	;wh_Flags	dictionary flags
=51025					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7d6	20 90 c7	jsr $c790	ULe:		jsr U_Greater_Than
.c7d9	4c e6 c7	jmp $c7e6			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c7dc					en = *	; remember here
>c7d4	06					.byte CL	;wh_CodeLength
.c7dc	4c 89 b3	jmp $b389	Throw_Stack_11: jmp Throw_Stack
>c7df	30 3d				L1:	.text "0="	;  name of word as a string, ending at wh_NameLastChar
>c7e1	02					.byte *-L1	;wh_NameLength	length of name
>c7e2	51 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7e4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7e5	08					.byte NN	;wh_Flags	dictionary flags
=51041					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7e6	b5 25		lda $25,x	Zero_Equal:	lda DStack+1,x
.c7e8	15 24		ora $24,x	ZEq3:		ora DStack+0,x
.c7ea	d0 26		bne $c812			bne False0
.c7ec	f0 0e		beq $c7fc			beq True0
=8					CL	.var *-(WordListLink+wh_Xt)
=$c7ee					en = *	; remember here
>c7e4	08					.byte CL	;wh_CodeLength
>c7ee	30 3c 3e			L1:	.text "0<>"	;  name of word as a string, ending at wh_NameLastChar
>c7f1	03					.byte *-L1	;wh_NameLength	length of name
>c7f2	61 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7f4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7f5	08					.byte NN	;wh_Flags	dictionary flags
=51057					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7f6	b5 25		lda $25,x	Zero_Unequal:	lda DStack+1,x
.c7f8	15 24		ora $24,x	ZNe3:		ora DStack+0,x
.c7fa	f0 16		beq $c812			beq False0
.c7fc	a9 ff		lda #$ff	True0:		lda #$ff	; return TRUE
.c7fe	95 24		sta $24,x	Return0:	sta DStack+0,x
.c800	95 25		sta $25,x			sta DStack+1,x
.c802	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c804	b0 39		bcs $c83f		bcs Throw_Stack_05
.c806	60		rts				rts
=17					CL	.var *-(WordListLink+wh_Xt)
=$c807					en = *	; remember here
>c7f4	11					.byte CL	;wh_CodeLength
>c807	30 3e				L1:	.text "0>"	;  name of word as a string, ending at wh_NameLastChar
>c809	02					.byte *-L1	;wh_NameLength	length of name
>c80a	71 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c80c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c80d	08					.byte NN	;wh_Flags	dictionary flags
=51081					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c80e	b5 25		lda $25,x	Zero_Greater:	lda DStack+1,x	; MSB
.c810	10 e6		bpl $c7f8			bpl ZNe3	; >= 0 ?
.c812	a9 00		lda #$00	False0:		lda #0		; return FALSE
.c814	f0 e8		beq $c7fe			beq Return0
=8					CL	.var *-(WordListLink+wh_Xt)
=$c816					en = *	; remember here
>c80c	08					.byte CL	;wh_CodeLength
>c816	30 3c 3d			L1:	.text "0<="	;  name of word as a string, ending at wh_NameLastChar
>c819	03					.byte *-L1	;wh_NameLength	length of name
>c81a	89 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c81c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c81d	08					.byte NN	;wh_Flags	dictionary flags
=51097					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c81e	b5 25		lda $25,x	ZLe:		lda DStack+1,x	; < 0 ?
.c820	30 da		bmi $c7fc			bmi True0
.c822	10 c4		bpl $c7e8			bpl ZEq3
=6					CL	.var *-(WordListLink+wh_Xt)
=$c824					en = *	; remember here
>c81c	06					.byte CL	;wh_CodeLength
>c824	30 3e 3d			L1:	.text "0>="	;  name of word as a string, ending at wh_NameLastChar
>c827	03					.byte *-L1	;wh_NameLength	length of name
>c828	99 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c82a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c82b	08					.byte NN	;wh_Flags	dictionary flags
=51111					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c82c	b5 25		lda $25,x	ZGe:		lda DStack+1,x
.c82e	10 cc		bpl $c7fc			bpl True0
.c830	30 e0		bmi $c812			bmi False0
=6					CL	.var *-(WordListLink+wh_Xt)
=$c832					en = *	; remember here
>c82a	06					.byte CL	;wh_CodeLength
>c832	30 3c				L1:	.text "0<"	;  name of word as a string, ending at wh_NameLastChar
>c834	02					.byte *-L1	;wh_NameLength	length of name
>c835	a7 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c837	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c838	08					.byte NN	;wh_Flags	dictionary flags
=51124					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c839	b5 25		lda $25,x	Zero_Less:	lda DStack+1,x	; MSB
.c83b	10 d5		bpl $c812			bpl False0
.c83d	30 bd		bmi $c7fc			bmi True0
=6					CL	.var *-(WordListLink+wh_Xt)
=$c83f					en = *	; remember here
>c837	06					.byte CL	;wh_CodeLength
.c83f	4c 89 b3	jmp $b389	Throw_Stack_05: jmp Throw_Stack
>c842	4d 69 6e			L1:	.text "Min"	;  name of word as a string, ending at wh_NameLastChar
>c845	03					.byte *-L1	;wh_NameLength	length of name
>c846	b4 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c848	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c849	18					.byte UF+NN	;wh_Flags	dictionary flags
=51141					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c84a					Min:
.c84a	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c84c	b0 f1		bcs $c83f		bcs Throw_Stack_05
.c84e	b5 24		lda $24,x			lda DStack+0,x	; compare n1 & n2; sets V & N but not Z
.c850	d5 26		cmp $26,x			cmp DStack+2,x
.c852	b5 25		lda $25,x			lda DStack+1,x
.c854	f5 27		sbc $27,x			sbc DStack+3,x
.c856	70 1b		bvs $c873			bvs Max_3	; if overflow, the sign is backwards
.c858	30 29		bmi $c883	Min_3:		bmi Nip_NoUf	; if negative, NOS is larger and needs to be dumped
.c85a	e8		inx				inx		; Drop n2
.c85b	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$c85c					en = *	; remember here
>c848	12					.byte CL	;wh_CodeLength
.c85c	60		rts				rts
>c85d	4d 61 78			L1:	.text "Max"	;  name of word as a string, ending at wh_NameLastChar
>c860	03					.byte *-L1	;wh_NameLength	length of name
>c861	c5 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c863	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c864	08					.byte NN	;wh_Flags	dictionary flags
=51168					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c865					Max:
.c865	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c867	b0 d6		bcs $c83f		bcs Throw_Stack_05
.c869	b5 24		lda $24,x			lda DStack+0,x	; Compare n1 & n2; sets V & N but not Z
.c86b	d5 26		cmp $26,x			cmp DStack+2,x
.c86d	b5 25		lda $25,x			lda DStack+1,x
.c86f	f5 27		sbc $27,x			sbc DStack+3,x
.c871	70 e5		bvs $c858			bvs Min_3	; if overflow, the sign is backwards
.c873	10 0e		bpl $c883	Max_3:		bpl Nip_NoUf	; if negative, NOS is larger and needs to be kept
.c875	e8		inx				inx		; Drop n2
.c876	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$c877					en = *	; remember here
>c863	12					.byte CL	;wh_CodeLength
.c877	60		rts				rts
>c878	4e 69 70			L1:	.text "Nip"	;  name of word as a string, ending at wh_NameLastChar
>c87b	03					.byte *-L1	;wh_NameLength	length of name
>c87c	e0 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c87e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c87f	10					.byte UF	;wh_Flags	dictionary flags
=51195					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c880					Nip:
.c880	20 7a b3	jsr $b37a			jsr underflow_2
.c883	b5 24		lda $24,x	Nip_NoUf:	lda DStack+0,x	; PopYA
.c885	b4 25		ldy $25,x			ldy DStack+1,x
.c887	e8		inx				inx
.c888	e8		inx				inx
.c889	95 24		sta $24,x			sta DStack+0,x	; store over n1
.c88b	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$c88d					en = *	; remember here
>c87e	0d					.byte CL	;wh_CodeLength
.c88d	60		rts				rts
>c88e	50 69 63 6b			L1:	.text "Pick"	;  name of word as a string, ending at wh_NameLastChar
>c892	04					.byte *-L1	;wh_NameLength	length of name
>c893	fb c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c895	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c896	00					.byte 0	;wh_Flags	dictionary flags
=51218					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c897					Pick:
.c897	16 24		asl $24,x			asl DStack+0,x	; we assume u < 128 (stack is small)
.c899	8a		txa				txa
.c89a	75 24		adc $24,x			adc DStack+0,x
.c89c	a8		tay				tay
.c89d	b9 26 00	lda $0026,y			lda DStack+2,y
.c8a0	95 24		sta $24,x			sta DStack+0,x
.c8a2	b9 27 00	lda $0027,y			lda DStack+3,y
.c8a5	95 25		sta $25,x			sta DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$c8a7					en = *	; remember here
>c895	10					.byte CL	;wh_CodeLength
.c8a7	60		rts				rts
>c8a8	43 68 61 72			L1:	.text "Char"	;  name of word as a string, ending at wh_NameLastChar
>c8ac	04					.byte *-L1	;wh_NameLength	length of name
>c8ad	12 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8af	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8b0	08					.byte NN	;wh_Flags	dictionary flags
=51244					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8b1					Char:
.c8b1	20 15 ba	jsr $ba15			jsr parse_name_check
.c8b4	e8		inx				inx		; Drop number of characters, leave addr
.c8b5	e8		inx				inx
.c8b6	4c 68 cc	jmp $cc68			jmp C_Fetch	; get character ( C@ )
=8					CL	.var *-(WordListLink+wh_Xt)
=$c8b9					en = *	; remember here
>c8af	08					.byte CL	;wh_CodeLength
>c8b9	5b 43 68 61 72 5d		L1:	.text "[Char]"	;  name of word as a string, ending at wh_NameLastChar
>c8bf	06					.byte *-L1	;wh_NameLength	length of name
>c8c0	2c c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8c3	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=51263					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8c4	20 b1 c8	jsr $c8b1	Bracket_Char:	jsr Char
.c8c7	4c a6 b6	jmp $b6a6			jmp Literal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c8ca					en = *	; remember here
>c8c2	06					.byte CL	;wh_CodeLength
>c8ca	43 68 61 72 2b			L1:	.text "Char+"	;  name of word as a string, ending at wh_NameLastChar
>c8cf	05					.byte *-L1	;wh_NameLength	length of name
>c8d0	3f c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8d3	00					.byte 0	;wh_Flags	dictionary flags
=51279					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8d4					Char_Plus:
.c8d4	20 65 b3	jsr $b365			jsr underflow_1
.c8d7	f6 24		inc $24,x			inc DStack+0,x
.c8d9	d0 02		bne $c8dd			bne +
.c8db	f6 25		inc $25,x			inc DStack+1,x
.c8dd					+
=9					CL	.var *-(WordListLink+wh_Xt)
=$c8dd					en = *	; remember here
>c8d2	09					.byte CL	;wh_CodeLength
.c8dd	60		rts				rts
>c8de	43 68 61 72 73			L1:	.text "Chars"	;  name of word as a string, ending at wh_NameLastChar
>c8e3	05					.byte *-L1	;wh_NameLength	length of name
>c8e4	4f c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8e6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8e7	02					.byte AN	;wh_Flags	dictionary flags
=51299					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8e8					Chars:
=0					CL	.var *-(WordListLink+wh_Xt)
=$c8e8					en = *	; remember here
>c8e6	00					.byte CL	;wh_CodeLength
.c8e8	60		rts				rts
>c8e9	43 65 6c 6c 73			L1:	.text "Cells"	;  name of word as a string, ending at wh_NameLastChar
>c8ee	05					.byte *-L1	;wh_NameLength	length of name
>c8ef	63 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8f1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8f2	10					.byte UF	;wh_Flags	dictionary flags
=51310					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8f3					Cells:
.c8f3	20 65 b3	jsr $b365			jsr underflow_1
.c8f6	16 24		asl $24,x			asl DStack+0,x		; 2*
.c8f8	36 25		rol $25,x			rol DStack+1,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$c8fa					en = *	; remember here
>c8f1	07					.byte CL	;wh_CodeLength
.c8fa	60		rts				rts
>c8fb	43 65 6c 6c 2b			L1:	.text "Cell+"	;  name of word as a string, ending at wh_NameLastChar
>c900	05					.byte *-L1	;wh_NameLength	length of name
>c901	6e c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c903	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c904	10					.byte UF	;wh_Flags	dictionary flags
=51328					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c905					Cell_Plus:
.c905	20 65 b3	jsr $b365			jsr underflow_1
.c908	a9 02		lda #$02	Cell_Plus_NoUf:	lda #2		; our cells are 2 bytes
.c90a					Plus_A:
.c90a	18		clc				clc
.c90b	75 24		adc $24,x			adc DStack+0,x
.c90d	95 24		sta $24,x			sta DStack+0,x
.c90f	90 02		bcc $c913			bcc +
.c911	f6 25		inc $25,x			inc DStack+1,x
.c913					+
=14					CL	.var *-(WordListLink+wh_Xt)
=$c913					en = *	; remember here
>c903	0e					.byte CL	;wh_CodeLength
.c913	60		rts				rts
.c914					Nos_Plus_A:
.c914	18		clc				clc
.c915	75 26		adc $26,x			adc DStack+2,x
.c917	95 26		sta $26,x			sta DStack+2,x
.c919	90 02		bcc $c91d			bcc +
.c91b	f6 27		inc $27,x			inc DStack+3,x
.c91d	60		rts		+		rts
>c91e	48 65 72 65			L1:	.text "Here"	;  name of word as a string, ending at wh_NameLastChar
>c922	04					.byte *-L1	;wh_NameLength	length of name
>c923	80 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c925	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c926	08					.byte NN	;wh_Flags	dictionary flags
=51362					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c927	a5 00		lda $00		Here:		lda cp+0
.c929	a4 01		ldy $01				ldy cp+1
.c92b	4c f3 b6	jmp $b6f3			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$c92e					en = *	; remember here
>c925	07					.byte CL	;wh_CodeLength
>c92e	31 2d				L1:	.text "1-"	;  name of word as a string, ending at wh_NameLastChar
>c930	02					.byte *-L1	;wh_NameLength	length of name
>c931	a2 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c933	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c934	10					.byte UF	;wh_Flags	dictionary flags
=51376					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c935					One_Minus:
.c935	20 65 b3	jsr $b365			jsr underflow_1
.c938					One_Minus_NoUf:
.c938	b5 24		lda $24,x			lda DStack+0,x
.c93a	d0 02		bne $c93e			bne +
.c93c	d6 25		dec $25,x			dec DStack+1,x
.c93e	d6 24		dec $24,x	+		dec DStack+0,x
=11					CL	.var *-(WordListLink+wh_Xt)
=$c940					en = *	; remember here
>c933	0b					.byte CL	;wh_CodeLength
.c940	60		rts				rts
.c941					NOS_One_Minus:
.c941	b5 26		lda $26,x			lda DStack+2,x
.c943	d0 02		bne $c947			bne +
.c945	d6 27		dec $27,x			dec DStack+3,x
.c947	d6 26		dec $26,x	+		dec DStack+2,x
.c949	60		rts				rts
.c94a					Minus_A:
.c94a	18		clc				clc
.c94b	75 24		adc $24,x			adc DStack+0,x
.c94d	95 24		sta $24,x			sta DStack+0,x
.c94f	b0 02		bcs $c953			bcs +
.c951	d6 25		dec $25,x			dec DStack+1,x
.c953	60		rts		+		rts
>c954	31 2b				L1:	.text "1+"	;  name of word as a string, ending at wh_NameLastChar
>c956	02					.byte *-L1	;wh_NameLength	length of name
>c957	b0 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c959	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c95a	10					.byte UF	;wh_Flags	dictionary flags
=51414					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c95b					One_Plus:
.c95b	20 65 b3	jsr $b365			jsr underflow_1
.c95e	f6 24		inc $24,x			inc DStack+0,x
.c960	d0 02		bne $c964			bne +
.c962	f6 25		inc $25,x			inc DStack+1,x
.c964					+
=9					CL	.var *-(WordListLink+wh_Xt)
=$c964					en = *	; remember here
>c959	09					.byte CL	;wh_CodeLength
.c964	60		rts				rts
.c965					NOS_One_Plus:
.c965	f6 26		inc $26,x			inc DStack+2,x
.c967	d0 02		bne $c96b			bne +
.c969	f6 27		inc $27,x			inc DStack+3,x
.c96b	60		rts		+		rts
>c96c	55 4d 2b			L1:	.text "UM+"	;  name of word as a string, ending at wh_NameLastChar
>c96f	03					.byte *-L1	;wh_NameLength	length of name
>c970	d6 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c972	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c973	00					.byte 0	;wh_Flags	dictionary flags
=51439					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c974	20 3b b3	jsr $b33b	UMPlus:		jsr PopYA
.c977	18		clc				clc		; add n to d1.lo
.c978	75 26		adc $26,x			adc DStack+2,x
.c97a	95 26		sta $26,x			sta DStack+2,x
.c97c	98		tya				tya
.c97d	75 27		adc $27,x			adc DStack+3,x
.c97f	95 27		sta $27,x			sta DStack+3,x
.c981	90 06		bcc $c989			bcc +		; propagate carry thru d1.hi
.c983	f6 24		inc $24,x			inc DStack+0,x
.c985	d0 02		bne $c989			bne +
.c987	f6 25		inc $25,x			inc DStack+1,x
.c989					+
=21					CL	.var *-(WordListLink+wh_Xt)
=$c989					en = *	; remember here
>c972	15					.byte CL	;wh_CodeLength
.c989	60		rts				rts
>c98a	4d 2b				L1:	.text "M+"	;  name of word as a string, ending at wh_NameLastChar
>c98c	02					.byte *-L1	;wh_NameLength	length of name
>c98d	ef c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c98f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c990	08					.byte NN	;wh_Flags	dictionary flags
=51468					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c991	20 74 c9	jsr $c974	MPlus:		jsr UMPlus
.c994	98		tya				tya		; if n negative
.c995	30 a1		bmi $c938			bmi One_Minus_NoUf ;   decrement d1.hi
=6					CL	.var *-(WordListLink+wh_Xt)
=$c997					en = *	; remember here
>c98f	06					.byte CL	;wh_CodeLength
.c997	60		rts				rts
>c998	44 32 2a			L1:	.text "D2*"	;  name of word as a string, ending at wh_NameLastChar
>c99b	03					.byte *-L1	;wh_NameLength	length of name
>c99c	0c c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c99e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c99f	10					.byte UF	;wh_Flags	dictionary flags
=51483					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9a0	20 7a b3	jsr $b37a	D2Star:		jsr underflow_2
.c9a3	16 26		asl $26,x			asl DStack+2,x
.c9a5	36 27		rol $27,x			rol DStack+3,x
.c9a7	36 24		rol $24,x			rol DStack+0,x
.c9a9	36 25		rol $25,x			rol DStack+1,x
=11					CL	.var *-(WordListLink+wh_Xt)
=$c9ab					en = *	; remember here
>c99e	0b					.byte CL	;wh_CodeLength
.c9ab	60		rts				rts
>c9ac	44 32 2f			L1:	.text "D2/"	;  name of word as a string, ending at wh_NameLastChar
>c9af	03					.byte *-L1	;wh_NameLength	length of name
>c9b0	1b c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9b3	10					.byte UF	;wh_Flags	dictionary flags
=51503					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9b4	20 7a b3	jsr $b37a	D2Slash:	jsr underflow_2
.c9b7	b5 25		lda $25,x			lda DStack+1,x		; setup for sign-extended shift right
.c9b9	0a		asl a				asl a
.c9ba	76 25		ror $25,x	D2SlashU:	ror DStack+1,x
.c9bc	76 24		ror $24,x			ror DStack+0,x
.c9be	76 27		ror $27,x			ror DStack+3,x
.c9c0	76 26		ror $26,x			ror DStack+2,x
=14					CL	.var *-(WordListLink+wh_Xt)
=$c9c2					en = *	; remember here
>c9b2	0e					.byte CL	;wh_CodeLength
.c9c2	60		rts				rts
>c9c3	55 44 32 2f			L1:	.text "UD2/"	;  name of word as a string, ending at wh_NameLastChar
>c9c7	04					.byte *-L1	;wh_NameLength	length of name
>c9c8	2f c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9ca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9cb	18					.byte UF+NN	;wh_Flags	dictionary flags
=51527					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9cc	20 7a b3	jsr $b37a	DU2Slash:	jsr underflow_2
.c9cf	18		clc				clc
.c9d0	90 e8		bcc $c9ba			bcc D2SlashU
=6					CL	.var *-(WordListLink+wh_Xt)
=$c9d2					en = *	; remember here
>c9ca	06					.byte CL	;wh_CodeLength
>c9d2	32 2a				L1:	.text "2*"	;  name of word as a string, ending at wh_NameLastChar
>c9d4	02					.byte *-L1	;wh_NameLength	length of name
>c9d5	47 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9d7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9d8	10					.byte UF	;wh_Flags	dictionary flags
=51540					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9d9					Two_Star:
.c9d9	20 65 b3	jsr $b365			jsr underflow_1
.c9dc	16 24		asl $24,x			asl DStack+0,x
.c9de	36 25		rol $25,x			rol DStack+1,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$c9e0					en = *	; remember here
>c9d7	07					.byte CL	;wh_CodeLength
.c9e0	60		rts				rts
>c9e1	32 2f				L1:	.text "2/"	;  name of word as a string, ending at wh_NameLastChar
>c9e3	02					.byte *-L1	;wh_NameLength	length of name
>c9e4	54 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9e6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9e7	10					.byte UF	;wh_Flags	dictionary flags
=51555					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9e8					Two_Slash:
.c9e8	20 65 b3	jsr $b365			jsr underflow_1
.c9eb	b5 25		lda $25,x			lda DStack+1,x		; load sign into carry, for signed shift
.c9ed	0a		asl a				asl
.c9ee	76 25		ror $25,x			ror DStack+1,x
.c9f0	76 24		ror $24,x			ror DStack+0,x
=10					CL	.var *-(WordListLink+wh_Xt)
=$c9f2					en = *	; remember here
>c9e6	0a					.byte CL	;wh_CodeLength
.c9f2	60		rts				rts
>c9f3	55 32 2f			L1:	.text "U2/"	;  name of word as a string, ending at wh_NameLastChar
>c9f6	03					.byte *-L1	;wh_NameLength	length of name
>c9f7	63 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9f9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9fa	10					.byte UF	;wh_Flags	dictionary flags
=51574					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9fb					UTwo_Slash:
.c9fb	20 65 b3	jsr $b365			jsr underflow_1
.c9fe	56 25		lsr $25,x			lsr DStack+1,x
.ca00	76 24		ror $24,x			ror DStack+0,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$ca02					en = *	; remember here
>c9f9	07					.byte CL	;wh_CodeLength
.ca02	60		rts				rts
>ca03	44 52 53 68 69 66 74		L1:	.text "DRShift"	;  name of word as a string, ending at wh_NameLastChar
>ca0a	07					.byte *-L1	;wh_NameLength	length of name
>ca0b	76 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca0d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca0e	00					.byte 0	;wh_Flags	dictionary flags
=51594					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca0f	20 1f b3	jsr $b31f	DRShift:	jsr PopA	; pop u
.ca12	a8		tay		DRShiftA:	tay
.ca13	f0 0e		beq $ca23			beq _9
.ca15	b5 25		lda $25,x			lda DStack+1,x
.ca17	4a		lsr a		_2:		lsr a
.ca18	76 24		ror $24,x			ror DStack+0,x
.ca1a	76 27		ror $27,x			ror DStack+3,x
.ca1c	76 26		ror $26,x			ror DStack+2,x
.ca1e	88		dey				dey
.ca1f	d0 f6		bne $ca17			bne _2
.ca21	95 25		sta $25,x			sta DStack+1,x
.ca23					_9:
=20					CL	.var *-(WordListLink+wh_Xt)
=$ca23					en = *	; remember here
>ca0d	14					.byte CL	;wh_CodeLength
.ca23	60		rts				rts
>ca24	52 53 68 69 66 74		L1:	.text "RShift"	;  name of word as a string, ending at wh_NameLastChar
>ca2a	06					.byte *-L1	;wh_NameLength	length of name
>ca2b	8a c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca2d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca2e	00					.byte 0	;wh_Flags	dictionary flags
=51626					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca2f	20 28 b3	jsr $b328	RShift:		jsr PopA2	; pop u, check for 2 params
.ca32	a8		tay		RShift_A:	tay		; get shift count
.ca33	f0 0a		beq $ca3f			beq _done
.ca35	b5 25		lda $25,x			lda DStack+1,x
.ca37	4a		lsr a		_loop:		lsr a
.ca38	76 24		ror $24,x			ror DStack+0,x
.ca3a	88		dey				dey
.ca3b	d0 fa		bne $ca37			bne _loop
.ca3d	95 25		sta $25,x			sta DStack+1,x
.ca3f					_done:
=16					CL	.var *-(WordListLink+wh_Xt)
=$ca3f					en = *	; remember here
>ca2d	10					.byte CL	;wh_CodeLength
.ca3f	60		rts				rts
>ca40	4c 53 68 69 66 74		L1:	.text "LShift"	;  name of word as a string, ending at wh_NameLastChar
>ca46	06					.byte *-L1	;wh_NameLength	length of name
>ca47	aa c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca49	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca4a	00					.byte 0	;wh_Flags	dictionary flags
=51654					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca4b	20 28 b3	jsr $b328	LShift:		jsr PopA2	; pop u, check for 2 params
.ca4e	a8		tay		LShift_A:	tay		; get shift count
.ca4f	f0 0a		beq $ca5b			beq _done
.ca51	b5 25		lda $25,x			lda DStack+1,x
.ca53	16 24		asl $24,x	_loop:		asl DStack+0,x
.ca55	2a		rol a				rol a
.ca56	88		dey				dey
.ca57	d0 fa		bne $ca53			bne _loop
.ca59	95 25		sta $25,x			sta DStack+1,x
.ca5b					_done:
=16					CL	.var *-(WordListLink+wh_Xt)
=$ca5b					en = *	; remember here
>ca49	10					.byte CL	;wh_CodeLength
.ca5b	60		rts				rts
>ca5c	41 6e 64			L1:	.text "And"	;  name of word as a string, ending at wh_NameLastChar
>ca5f	03					.byte *-L1	;wh_NameLength	length of name
>ca60	c6 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca62	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca63	10					.byte UF	;wh_Flags	dictionary flags
=51679					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca64					And2:
.ca64	20 7a b3	jsr $b37a			jsr underflow_2
.ca67	b5 24		lda $24,x			lda DStack+0,x
.ca69	35 26		and $26,x			and DStack+2,x
.ca6b	95 26		sta $26,x			sta DStack+2,x
.ca6d	b5 25		lda $25,x			lda DStack+1,x
.ca6f	35 27		and $27,x			and DStack+3,x
.ca71	95 27		sta $27,x			sta DStack+3,x
.ca73	e8		inx				inx		; Drop n2
.ca74	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$ca75					en = *	; remember here
>ca62	11					.byte CL	;wh_CodeLength
.ca75	60		rts				rts
>ca76	4f 72				L1:	.text "Or"	;  name of word as a string, ending at wh_NameLastChar
>ca78	02					.byte *-L1	;wh_NameLength	length of name
>ca79	df c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca7b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca7c	10					.byte UF	;wh_Flags	dictionary flags
=51704					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca7d					Or:
.ca7d	20 7a b3	jsr $b37a			jsr underflow_2
.ca80	b5 24		lda $24,x			lda DStack+0,x
.ca82	15 26		ora $26,x			ora DStack+2,x
.ca84	95 26		sta $26,x			sta DStack+2,x
.ca86	b5 25		lda $25,x			lda DStack+1,x
.ca88	15 27		ora $27,x			ora DStack+3,x
.ca8a	95 27		sta $27,x			sta DStack+3,x
.ca8c	e8		inx				inx		; Drop n2
.ca8d	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$ca8e					en = *	; remember here
>ca7b	11					.byte CL	;wh_CodeLength
.ca8e	60		rts				rts
>ca8f	58 6f 72			L1:	.text "Xor"	;  name of word as a string, ending at wh_NameLastChar
>ca92	03					.byte *-L1	;wh_NameLength	length of name
>ca93	f8 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca95	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca96	10					.byte UF	;wh_Flags	dictionary flags
=51730					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca97					Xor:
.ca97	20 7a b3	jsr $b37a			jsr underflow_2
.ca9a	b5 24		lda $24,x			lda DStack+0,x
.ca9c	55 26		eor $26,x			eor DStack+2,x
.ca9e	95 26		sta $26,x			sta DStack+2,x
.caa0	b5 25		lda $25,x			lda DStack+1,x
.caa2	55 27		eor $27,x			eor DStack+3,x
.caa4	95 27		sta $27,x			sta DStack+3,x
.caa6	e8		inx				inx		; Drop n2
.caa7	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$caa8					en = *	; remember here
>ca95	11					.byte CL	;wh_CodeLength
.caa8	60		rts				rts
>caa9	2b				L1:	.text "+"	;  name of word as a string, ending at wh_NameLastChar
>caaa	01					.byte *-L1	;wh_NameLength	length of name
>caab	12 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>caad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>caae	10					.byte UF	;wh_Flags	dictionary flags
=51754					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.caaf					Plus:
.caaf	20 7a b3	jsr $b37a			jsr underflow_2
.cab2	18		clc				clc
.cab3	b5 24		lda $24,x			lda DStack+0,x		; LSB
.cab5	75 26		adc $26,x			adc DStack+2,x
.cab7	95 26		sta $26,x			sta DStack+2,x
.cab9	b5 25		lda $25,x			lda DStack+1,x		; MSB. No CLC, conserve carry bit
.cabb	75 27		adc $27,x			adc DStack+3,x
.cabd	95 27		sta $27,x			sta DStack+3,x
.cabf	e8		inx				inx
.cac0	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$cac1					en = *	; remember here
>caad	12					.byte CL	;wh_CodeLength
.cac1	60		rts				rts
>cac2	2d				L1:	.text "-"	;  name of word as a string, ending at wh_NameLastChar
>cac3	01					.byte *-L1	;wh_NameLength	length of name
>cac4	2a ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cac6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cac7	10					.byte UF	;wh_Flags	dictionary flags
=51779					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cac8					Minus:
.cac8	20 7a b3	jsr $b37a			jsr underflow_2
.cacb	38		sec				sec
.cacc	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cace	f5 24		sbc $24,x			sbc DStack+0,x
.cad0	95 26		sta $26,x			sta DStack+2,x
.cad2	b5 27		lda $27,x			lda DStack+3,x	; MSB
.cad4	f5 25		sbc $25,x			sbc DStack+1,x
.cad6	95 27		sta $27,x			sta DStack+3,x
.cad8	e8		inx				inx		; Drop n2
.cad9	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$cada					en = *	; remember here
>cac6	12					.byte CL	;wh_CodeLength
.cada	60		rts				rts
>cadb	2e				L1:	.text "."	;  name of word as a string, ending at wh_NameLastChar
>cadc	01					.byte *-L1	;wh_NameLength	length of name
>cadd	43 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cadf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cae0	08					.byte NN	;wh_Flags	dictionary flags
=51804					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cae1	b5 25		lda $25,x	Dot:		lda DStack+1,x		; ( n )	save sign
.cae3	08		php				php
.cae4	20 98 c5	jsr $c598			jsr Abs			; ( u )
.cae7	20 44 b7	jsr $b744			jsr Zero		; ( ud )	u>d  cvt u to ud
.caea	4c fa ca	jmp $cafa			jmp fmt_d3
=12					CL	.var *-(WordListLink+wh_Xt)
=$caed					en = *	; remember here
>cadf	0c					.byte CL	;wh_CodeLength
>caed	44 2e				L1:	.text "D."	;  name of word as a string, ending at wh_NameLastChar
>caef	02					.byte *-L1	;wh_NameLength	length of name
>caf0	5c ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>caf2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>caf3	08					.byte NN	;wh_Flags	dictionary flags
=51823					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.caf4	b5 25		lda $25,x	D_Dot:		lda DStack+1,x		; save sign
.caf6	08		php				php
.caf7	20 cd c5	jsr $c5cd			jsr DAbs
.cafa	20 f5 aa	jsr $aaf5	fmt_d3:		jsr Less_Number_Sign	; ( ud )	start formatting
.cafd	20 68 ab	jsr $ab68			jsr Number_sign_s	; ( ud )	do all digits
.cb00	28		plp				plp			; ( ud )	do sign
.cb01	20 83 ab	jsr $ab83			jsr Sign_P		; ( ud )
.cb04	20 02 ab	jsr $ab02			jsr Number_sign_greater	; ( addr u )	end formatting
.cb07	20 ed cc	jsr $cced			jsr Type
.cb0a	4c e0 cc	jmp $cce0			jmp Space
=25					CL	.var *-(WordListLink+wh_Xt)
=$cb0d					en = *	; remember here
>caf2	19					.byte CL	;wh_CodeLength
>cb0d	55 2e				L1:	.text "U."	;  name of word as a string, ending at wh_NameLastChar
>cb0f	02					.byte *-L1	;wh_NameLength	length of name
>cb10	6f ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb12	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb13	18					.byte UF+NN	;wh_Flags	dictionary flags
=51855					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb14	20 65 b3	jsr $b365	U_Dot:		jsr underflow_1
.cb17	20 2e cb	jsr $cb2e			jsr print_u
.cb1a	4c e0 cc	jmp $cce0			jmp Space
=9					CL	.var *-(WordListLink+wh_Xt)
=$cb1d					en = *	; remember here
>cb12	09					.byte CL	;wh_CodeLength
>cb1d	55 44 2e			L1:	.text "UD."	;  name of word as a string, ending at wh_NameLastChar
>cb20	03					.byte *-L1	;wh_NameLength	length of name
>cb21	8f ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb23	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb24	18					.byte UF+NN	;wh_Flags	dictionary flags
=51872					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb25	20 7a b3	jsr $b37a	UD_Dot:		jsr underflow_2 ; double number
.cb28	20 31 cb	jsr $cb31			jsr print_ud
.cb2b	4c e0 cc	jmp $cce0			jmp Space
=9					CL	.var *-(WordListLink+wh_Xt)
=$cb2e					en = *	; remember here
>cb23	09					.byte CL	;wh_CodeLength
.cb2e					print_u:
.cb2e	20 44 b7	jsr $b744			jsr Zero			; convert to ud
.cb31					print_ud:
.cb31	20 f5 aa	jsr $aaf5			jsr Less_Number_Sign		; <#	start formatting
.cb34	20 68 ab	jsr $ab68			jsr Number_sign_s		; #S	do all digits
.cb37	20 02 ab	jsr $ab02			jsr Number_sign_greater		; #>	end formatting
.cb3a	4c ed cc	jmp $cced			jmp Type
>cb3d	55 2e 52			L1:	.text "U.R"	;  name of word as a string, ending at wh_NameLastChar
>cb40	03					.byte *-L1	;wh_NameLength	length of name
>cb41	a0 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb43	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb44	08					.byte NN	;wh_Flags	dictionary flags
=51904					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb45	20 1f b3	jsr $b31f	U_Dot_R:	jsr PopA		; save field width
.cb48	48		pha		U_Dot_R_A:	pha
.cb49	20 44 b7	jsr $b744			jsr Zero		; u>d  cvt u to ud
.cb4c	4c 5c cb	jmp $cb5c			jmp fmt_udr3
=10					CL	.var *-(WordListLink+wh_Xt)
=$cb4f					en = *	; remember here
>cb43	0a					.byte CL	;wh_CodeLength
>cb4f	55 44 2e 52			L1:	.text "UD.R"	;  name of word as a string, ending at wh_NameLastChar
>cb53	04					.byte *-L1	;wh_NameLength	length of name
>cb54	c0 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb56	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb57	08					.byte NN	;wh_Flags	dictionary flags
=51923					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb58	20 1f b3	jsr $b31f	UD_Dot_R:	jsr PopA			; save field width
.cb5b	48		pha		UD_Dot_R_A:	pha
.cb5c	20 f5 aa	jsr $aaf5	fmt_udr3:	jsr Less_Number_Sign		; start formatted
.cb5f	20 68 ab	jsr $ab68			jsr Number_sign_s		; do all digits
.cb62	20 02 ab	jsr $ab02	fmt_r:		jsr Number_sign_greater		; finish formatted
.cb65	68		pla				pla				; recover field width
.cb66	38		sec				sec				; do leading spaces
.cb67	f5 24		sbc $24,x			sbc DStack+0,x
.cb69	90 06		bcc $cb71			bcc +
.cb6b	20 35 b7	jsr $b735			jsr PushZA
.cb6e	20 7f c3	jsr $c37f			jsr Spaces
.cb71	4c ed cc	jmp $cced	+		jmp Type			; type formatted
=28					CL	.var *-(WordListLink+wh_Xt)
=$cb74					en = *	; remember here
>cb56	1c					.byte CL	;wh_CodeLength
>cb74	2e 52				L1:	.text ".R"	;  name of word as a string, ending at wh_NameLastChar
>cb76	02					.byte *-L1	;wh_NameLength	length of name
>cb77	d3 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb79	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb7a	08					.byte NN	;wh_Flags	dictionary flags
=51958					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb7b	20 1f b3	jsr $b31f	Dot_R:		jsr PopA		; save field width
.cb7e	48		pha		Dot_R_A:	pha
.cb7f	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cb81	08		php				php
.cb82	20 98 c5	jsr $c598			jsr Abs
.cb85	20 44 b7	jsr $b744			jsr Zero		; u>d  cvt u to ud
.cb88	4c 9d cb	jmp $cb9d			jmp fmt_dr3
=16					CL	.var *-(WordListLink+wh_Xt)
=$cb8b					en = *	; remember here
>cb79	10					.byte CL	;wh_CodeLength
>cb8b	44 2e 52			L1:	.text "D.R"	;  name of word as a string, ending at wh_NameLastChar
>cb8e	03					.byte *-L1	;wh_NameLength	length of name
>cb8f	f6 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb91	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb92	08					.byte NN	;wh_Flags	dictionary flags
=51982					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb93	20 1f b3	jsr $b31f	D_Dot_R:	jsr PopA		; save field width
.cb96	48		pha		D_Dot_R_A:	pha
.cb97	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cb99	08		php				php
.cb9a	20 cd c5	jsr $c5cd			jsr DAbs
.cb9d	20 f5 aa	jsr $aaf5	fmt_dr3:	jsr Less_Number_Sign	; start formatted output
.cba0	20 68 ab	jsr $ab68			jsr Number_sign_s	; do all digits
.cba3	28		plp				plp			; do the sign
.cba4	20 83 ab	jsr $ab83			jsr Sign_P
.cba7	4c 62 cb	jmp $cb62			jmp fmt_r
=23					CL	.var *-(WordListLink+wh_Xt)
=$cbaa					en = *	; remember here
>cb91	17					.byte CL	;wh_CodeLength
>cbaa	3f				L1:	.text "?"	;  name of word as a string, ending at wh_NameLastChar
>cbab	01					.byte *-L1	;wh_NameLength	length of name
>cbac	0e cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbaf	08					.byte NN	;wh_Flags	dictionary flags
=52011					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbb0					Question:
.cbb0	20 cf cd	jsr $cdcf			jsr Fetch
.cbb3	4c e1 ca	jmp $cae1			jmp Dot
=6					CL	.var *-(WordListLink+wh_Xt)
=$cbb6					en = *	; remember here
>cbae	06					.byte CL	;wh_CodeLength
>cbb6	32 44 75 70			L1:	.text "2Dup"	;  name of word as a string, ending at wh_NameLastChar
>cbba	04					.byte *-L1	;wh_NameLength	length of name
>cbbb	2b cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbbd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbbe	10					.byte UF	;wh_Flags	dictionary flags
=52026					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbbf					Two_Dup:
.cbbf	20 7a b3	jsr $b37a			jsr underflow_2
.cbc2	ca		dex				dex
.cbc3	ca		dex				dex
.cbc4	ca		dex				dex
.cbc5	ca		dex				dex
.cbc6	b5 28		lda $28,x			lda DStack+4,x	; TOS
.cbc8	95 24		sta $24,x			sta DStack+0,x
.cbca	b5 29		lda $29,x			lda DStack+5,x
.cbcc	95 25		sta $25,x			sta DStack+1,x
.cbce	b5 2a		lda $2a,x			lda DStack+6,x	; NOS
.cbd0	95 26		sta $26,x			sta DStack+2,x
.cbd2	b5 2b		lda $2b,x			lda DStack+7,x
.cbd4	95 27		sta $27,x			sta DStack+3,x
=23					CL	.var *-(WordListLink+wh_Xt)
=$cbd6					en = *	; remember here
>cbbd	17					.byte CL	;wh_CodeLength
.cbd6	60		rts				rts
>cbd7	54 75 63 6b			L1:	.text "Tuck"	;  name of word as a string, ending at wh_NameLastChar
>cbdb	04					.byte *-L1	;wh_NameLength	length of name
>cbdc	3a cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbde	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbdf	10					.byte UF	;wh_Flags	dictionary flags
=52059					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbe0					Tuck:
.cbe0	20 7a b3	jsr $b37a			jsr underflow_2
.cbe3	ca		dex				dex
.cbe4	ca		dex				dex
.cbe5	b4 28		ldy $28,x			ldy DStack+4,x	; LSB
.cbe7	b5 26		lda $26,x			lda DStack+2,x
.cbe9	95 28		sta $28,x			sta DStack+4,x
.cbeb	94 26		sty $26,x			sty DStack+2,x
.cbed	95 24		sta $24,x			sta DStack+0,x
.cbef	b4 29		ldy $29,x			ldy DStack+5,x	; MSB
.cbf1	b5 27		lda $27,x			lda DStack+3,x
.cbf3	95 29		sta $29,x			sta DStack+5,x
.cbf5	94 27		sty $27,x			sty DStack+3,x
.cbf7	95 25		sta $25,x			sta DStack+1,x
=25					CL	.var *-(WordListLink+wh_Xt)
=$cbf9					en = *	; remember here
>cbde	19					.byte CL	;wh_CodeLength
.cbf9	60		rts				rts
>cbfa	43 2c				L1:	.text "C,"	;  name of word as a string, ending at wh_NameLastChar
>cbfc	02					.byte *-L1	;wh_NameLength	length of name
>cbfd	5b cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbff	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc00	08					.byte NN	;wh_Flags	dictionary flags
=52092					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc01	20 1f b3	jsr $b31f	C_Comma:	jsr PopA	; pop c, with underflow check
.cc04					C_Comma_A:
.cc04	ca		dex				dex
.cc05	94 24		sty $24,x			sty DStack+0,x	; save Y
.cc07	a0 00		ldy #$00			ldy #0		; store A
.cc09	91 00		sta ($00),y			sta (cp),y
.cc0b	e6 00		inc $00				inc cp+0	; increment cp
.cc0d	d0 02		bne $cc11			bne +
.cc0f	e6 01		inc $01				inc cp+1
.cc11					+
.cc11	b4 24		ldy $24,x			ldy DStack+0,x	; restore Y
.cc13	e8		inx				inx
=19					CL	.var *-(WordListLink+wh_Xt)
=$cc14					en = *	; remember here
>cbff	13					.byte CL	;wh_CodeLength
.cc14	60		rts				rts
>cc15	2c				L1:	.text ","	;  name of word as a string, ending at wh_NameLastChar
>cc16	01					.byte *-L1	;wh_NameLength	length of name
>cc17	7c cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc19	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc1a	08					.byte NN	;wh_Flags	dictionary flags
=52118					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc1b	20 3b b3	jsr $b33b	Comma:		jsr PopYA	; pop n, with underflow check
.cc1e					Comma_YA:
.cc1e	20 04 cc	jsr $cc04			jsr C_Comma_A	; compile LSB
.cc21	98		tya				tya		; compile MSB
.cc22	4c 04 cc	jmp $cc04			jmp C_Comma_A
=10					CL	.var *-(WordListLink+wh_Xt)
=$cc25					en = *	; remember here
>cc19	0a					.byte CL	;wh_CodeLength
>cc25	32 2c				L1:	.text "2,"	;  name of word as a string, ending at wh_NameLastChar
>cc27	02					.byte *-L1	;wh_NameLength	length of name
>cc28	96 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc2a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc2b	08					.byte NN	;wh_Flags	dictionary flags
=52135					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc2c	20 1b cc	jsr $cc1b	Two_Comma:	jsr Comma
.cc2f	4c 1b cc	jmp $cc1b			jmp Comma
=6					CL	.var *-(WordListLink+wh_Xt)
=$cc32					en = *	; remember here
>cc2a	06					.byte CL	;wh_CodeLength
.cc32	a9 e8		lda #$e8	Drop_Comma:	lda #$e8	;inx
.cc34	a8		tay				tay
.cc35	d0 e7		bne $cc1e			bne Comma_YA
>cc37	4a 73 72 2c			L1:	.text "Jsr,"	;  name of word as a string, ending at wh_NameLastChar
>cc3b	04					.byte *-L1	;wh_NameLength	length of name
>cc3c	a7 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc3e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc3f	08					.byte NN	;wh_Flags	dictionary flags
=52155					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc40	20 3b b3	jsr $b33b	Jsr_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cc43	20 f3 b6	jsr $b6f3	Jsr_Comma_YA:	jsr PushYA	; push addr
.cc46	a9 20		lda #$20			lda #$20	; JSR abs opcode
.cc48	20 04 cc	jsr $cc04	Jsr_Comma_3:	jsr C_Comma_A
.cc4b	4c 1b cc	jmp $cc1b			jmp Comma	; compile addr
=14					CL	.var *-(WordListLink+wh_Xt)
=$cc4e					en = *	; remember here
>cc3e	0e					.byte CL	;wh_CodeLength
>cc4e	4a 6d 70 2c			L1:	.text "Jmp,"	;  name of word as a string, ending at wh_NameLastChar
>cc52	04					.byte *-L1	;wh_NameLength	length of name
>cc53	bb cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc55	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc56	08					.byte NN	;wh_Flags	dictionary flags
=52178					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc57	20 3b b3	jsr $b33b	Jmp_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cc5a	20 f3 b6	jsr $b6f3	Jmp_Comma_YA:	jsr PushYA	; push addr
.cc5d	a9 4c		lda #$4c			lda #$4c	; JMP abs opcode
.cc5f	d0 e7		bne $cc48			bne Jsr_Comma_3
=10					CL	.var *-(WordListLink+wh_Xt)
=$cc61					en = *	; remember here
>cc55	0a					.byte CL	;wh_CodeLength
>cc61	43 40				L1:	.text "C@"	;  name of word as a string, ending at wh_NameLastChar
>cc63	02					.byte *-L1	;wh_NameLength	length of name
>cc64	d2 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc66	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc67	10					.byte UF	;wh_Flags	dictionary flags
=52195					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc68	20 65 b3	jsr $b365	C_Fetch:	jsr underflow_1
.cc6b	a1 24		lda ($24,x)			lda (DStack+0,x)
.cc6d	95 24		sta $24,x			sta DStack+0,x
.cc6f	a9 00		lda #$00			lda #0
.cc71	95 25		sta $25,x			sta DStack+1,x	; zero MSB
=11					CL	.var *-(WordListLink+wh_Xt)
=$cc73					en = *	; remember here
>cc66	0b					.byte CL	;wh_CodeLength
.cc73	60		rts				rts
>cc74	43 21				L1:	.text "C!"	;  name of word as a string, ending at wh_NameLastChar
>cc76	02					.byte *-L1	;wh_NameLength	length of name
>cc77	e3 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc79	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc7a	10					.byte UF	;wh_Flags	dictionary flags
=52214					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc7b	20 7a b3	jsr $b37a	C_Store:	jsr underflow_2
.cc7e	b5 26		lda $26,x			lda DStack+2,x
.cc80	81 24		sta ($24,x)			sta (DStack+0,x)
.cc82	e8		inx				inx
.cc83	e8		inx				inx
.cc84	e8		inx				inx
.cc85	e8		inx				inx
=11					CL	.var *-(WordListLink+wh_Xt)
=$cc86					en = *	; remember here
>cc79	0b					.byte CL	;wh_CodeLength
.cc86	60		rts				rts
>cc87	31 2b 21			L1:	.text "1+!"	;  name of word as a string, ending at wh_NameLastChar
>cc8a	03					.byte *-L1	;wh_NameLength	length of name
>cc8b	f6 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc8d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc8e	00					.byte 0	;wh_Flags	dictionary flags
=52234					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc8f					OnePlusStore:
.cc8f	a9 01		lda #$01			lda #1
.cc91	18		clc				clc
.cc92	61 24		adc ($24,x)			adc (DStack+0,x)	; increment lo byte
.cc94	81 24		sta ($24,x)			sta (DStack+0,x)
.cc96	90 0c		bcc $cca4			bcc _7			; if carry
.cc98	f6 24		inc $24,x			inc DStack+0,x		;   point at hi byte
.cc9a	d0 02		bne $cc9e			bne +
.cc9c	f6 25		inc $25,x			inc DStack+1,x
.cc9e					+
.cc9e	a1 24		lda ($24,x)			lda (DStack+0,x)	;   increment hi byte
.cca0	69 00		adc #$00			adc #0
.cca2	81 24		sta ($24,x)			sta (Dstack+0,x)
.cca4					_7:
.cca4	e8		inx				inx			; Drop addr
.cca5	e8		inx				inx
=23					CL	.var *-(WordListLink+wh_Xt)
=$cca6					en = *	; remember here
>cc8d	17					.byte CL	;wh_CodeLength
.cca6	60		rts				rts
>cca7	2b 21				L1:	.text "+!"	;  name of word as a string, ending at wh_NameLastChar
>cca9	02					.byte *-L1	;wh_NameLength	length of name
>ccaa	0a cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccad	18					.byte UF+NN	;wh_Flags	dictionary flags
=52265					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccae					Plus_store:
.ccae	20 7a b3	jsr $b37a			jsr underflow_2
.ccb1	18		clc				clc
.ccb2	b5 26		lda $26,x			lda DStack+2,x
.ccb4	61 24		adc ($24,x)			adc (DStack+0,x)
.ccb6	81 24		sta ($24,x)			sta (DStack+0,x)
.ccb8	f6 24		inc $24,x			inc DStack+0,x
.ccba	d0 02		bne $ccbe			bne +
.ccbc	f6 25		inc $25,x			inc DStack+1,x
.ccbe					+
.ccbe	b5 27		lda $27,x			lda DStack+3,x
.ccc0	61 24		adc ($24,x)			adc (DStack+0,x)
.ccc2	81 24		sta ($24,x)			sta (DStack+0,x)
.ccc4	4c 26 c4	jmp $c426			jmp Two_Drop
=25					CL	.var *-(WordListLink+wh_Xt)
=$ccc7					en = *	; remember here
>ccac	19					.byte CL	;wh_CodeLength
>ccc7	45 6d 69 74			L1:	.text "Emit"	;  name of word as a string, ending at wh_NameLastChar
>cccb	04					.byte *-L1	;wh_NameLength	length of name
>cccc	29 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cccf	08					.byte NN	;wh_Flags	dictionary flags
=52299					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccd0	20 1f b3	jsr $b31f	Emit:		jsr PopA		; pop char, with underflow check
.ccd3					Emit_A:
.ccd3	6c 06 03	jmp ($0306)			jmp (output)		; JSR/RTS
=6					CL	.var *-(WordListLink+wh_Xt)
=$ccd6					en = *	; remember here
>ccce	06					.byte CL	;wh_CodeLength
>ccd6	53 70 61 63 65			L1:	.text "Space"	;  name of word as a string, ending at wh_NameLastChar
>ccdb	05					.byte *-L1	;wh_NameLength	length of name
>ccdc	4b cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccde	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccdf	08					.byte NN	;wh_Flags	dictionary flags
=52315					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cce0	a9 20		lda #$20	Space:		lda #AscSP
.cce2	d0 ef		bne $ccd3			bne Emit_A
=4					CL	.var *-(WordListLink+wh_Xt)
=$cce4					en = *	; remember here
>ccde	04					.byte CL	;wh_CodeLength
>cce4	54 79 70 65			L1:	.text "Type"	;  name of word as a string, ending at wh_NameLastChar
>cce8	04					.byte *-L1	;wh_NameLength	length of name
>cce9	5b cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cceb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccec	18					.byte UF+NN	;wh_Flags	dictionary flags
=52328					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cced					Type:
.cced	20 7a b3	jsr $b37a			jsr underflow_2
.ccf0	4c fd cc	jmp $ccfd			jmp _test
.ccf3					_loop:
.ccf3	d6 24		dec $24,x			dec DStack+0,x		; finish length decrement
.ccf5	a1 26		lda ($26,x)			lda (DStack+2,x)	; Send the current character
.ccf7	20 d3 cc	jsr $ccd3			jsr Emit_A
.ccfa	20 65 c9	jsr $c965			jsr NOS_One_Plus	; increment address
.ccfd	b5 24		lda $24,x	_test:		lda DStack+0,x		; decrement length & test for <0
.ccff	d0 f2		bne $ccf3			bne _loop
.cd01	d6 25		dec $25,x			dec DStack+1,x
.cd03	10 ee		bpl $ccf3			bpl _loop
.cd05	4c 26 c4	jmp $c426			jmp Two_drop
=27					CL	.var *-(WordListLink+wh_Xt)
=$cd08					en = *	; remember here
>cceb	1b					.byte CL	;wh_CodeLength
.cd08					Print_ASCIIZ_YA:
.cd08	20 0e cd	jsr $cd0e			jsr Print_ASCIIZ_YA_no_lf
.cd0b	4c 7d aa	jmp $aa7d	                jmp CR
.cd0e					Print_ASCIIZ_YA_no_lf:
.cd0e	85 18		sta $18				sta tmp3+0		; save string address
.cd10	84 19		sty $19				sty tmp3+1
.cd12	a0 00		ldy #$00			ldy #0
.cd14					Print_ASCIIZ_tmp3_no_lf:
.cd14	b1 18		lda ($18),y			lda (tmp3),y
.cd16	f0 06		beq $cd1e			beq _done		; end of string?
.cd18	20 d3 cc	jsr $ccd3			jsr emit_a
.cd1b	c8		iny				iny
.cd1c	d0 f6		bne $cd14			bne Print_ASCIIZ_tmp3_no_lf
.cd1e					_done:
.cd1e	60		rts				rts
>cd1f	45 78 65 63 75 74 65		L1:	.text "Execute"	;  name of word as a string, ending at wh_NameLastChar
>cd26	07					.byte *-L1	;wh_NameLength	length of name
>cd27	68 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd29	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd2a	08					.byte NN	;wh_Flags	dictionary flags
=52390					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd2b					Execute:
.cd2b	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.cd2d	b0 2f		bcs $cd5e		bcs Throw_Stack_03
.cd2f	b5 25		lda $25,x			lda DStack+1,x	; addr for RTI
.cd31	48		pha				pha
.cd32	b5 24		lda $24,x			lda DStack+0,x
.cd34	48		pha				pha
.cd35	e8		inx				inx		; drop addr
.cd36	e8		inx				inx
.cd37	08		php				php		; flags for RTI
.cd38	40		rti				rti
=14					CL	.var *-(WordListLink+wh_Xt)
=$cd39					en = *	; remember here
>cd29	0e					.byte CL	;wh_CodeLength
>cd39	32 52 6f 74			L1:	.text "2Rot"	;  name of word as a string, ending at wh_NameLastChar
>cd3d	04					.byte *-L1	;wh_NameLength	length of name
>cd3e	a6 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd40	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd41	08					.byte NN	;wh_Flags	dictionary flags
=52413					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd42					TwoRot:
.cd42	e0 1d		cpx #$1d		cpx #-2*6+DStack0+1
.cd44	b0 18		bcs $cd5e		bcs Throw_Stack_03
.cd46	86 14		stx $14				stx tmp1+0
.cd48	e8		inx				inx		; do 4 times
.cd49	e8		inx				inx
.cd4a	e8		inx				inx
.cd4b	e8		inx				inx
.cd4c	ca		dex		-		dex
.cd4d	b4 2c		ldy $2c,x			ldy DStack+8,x	; do a byte
.cd4f	b5 28		lda $28,x			lda DStack+4,x
.cd51	95 2c		sta $2c,x			sta DStack+8,x
.cd53	b5 24		lda $24,x			lda DStack+0,x
.cd55	95 28		sta $28,x			sta DStack+4,x
.cd57	94 24		sty $24,x			sty DStack+0,x
.cd59	e4 14		cpx $14				cpx tmp1+0
.cd5b	d0 ef		bne $cd4c			bne -
=27					CL	.var *-(WordListLink+wh_Xt)
=$cd5d					en = *	; remember here
>cd40	1b					.byte CL	;wh_CodeLength
.cd5d	60		rts				rts
.cd5e	4c 89 b3	jmp $b389	Throw_Stack_03: jmp Throw_Stack
>cd61	52 6f 74			L1:	.text "Rot"	;  name of word as a string, ending at wh_NameLastChar
>cd64	03					.byte *-L1	;wh_NameLength	length of name
>cd65	bd cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd67	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd68	08					.byte NN	;wh_Flags	dictionary flags
=52452					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd69					Rot:
.cd69	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.cd6b	b0 f1		bcs $cd5e		bcs Throw_Stack_03
.cd6d	b4 29		ldy $29,x			ldy DStack+5,x	; do MSB
.cd6f	b5 27		lda $27,x			lda DStack+3,x
.cd71	95 29		sta $29,x			sta DStack+5,x
.cd73	b5 25		lda $25,x			lda DStack+1,x
.cd75	95 27		sta $27,x			sta DStack+3,x
.cd77	94 25		sty $25,x			sty DStack+1,x
.cd79	b4 28		ldy $28,x			ldy DStack+4,x	; do LSB
.cd7b	b5 26		lda $26,x			lda DStack+2,x
.cd7d	95 28		sta $28,x			sta DStack+4,x
.cd7f	b5 24		lda $24,x			lda DStack+0,x
.cd81	95 26		sta $26,x			sta DStack+2,x
.cd83	94 24		sty $24,x			sty DStack+0,x
=28					CL	.var *-(WordListLink+wh_Xt)
=$cd85					en = *	; remember here
>cd67	1c					.byte CL	;wh_CodeLength
.cd85	60		rts				rts
>cd86	2d 52 6f 74			L1:	.text "-Rot"	;  name of word as a string, ending at wh_NameLastChar
>cd8a	04					.byte *-L1	;wh_NameLength	length of name
>cd8b	e4 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd8d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd8e	08					.byte NN	;wh_Flags	dictionary flags
=52490					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd8f					Not_Rot:
.cd8f	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.cd91	b0 cb		bcs $cd5e		bcs Throw_Stack_03
.cd93	b4 25		ldy $25,x			ldy DStack+1,x	; do MSB
.cd95	b5 27		lda $27,x			lda DStack+3,x
.cd97	95 25		sta $25,x			sta DStack+1,x
.cd99	b5 29		lda $29,x			lda DStack+5,x
.cd9b	95 27		sta $27,x			sta DStack+3,x
.cd9d	94 29		sty $29,x			sty DStack+5,x
.cd9f	b4 24		ldy $24,x			ldy DStack+0,x	; do LSB
.cda1	b5 26		lda $26,x			lda DStack+2,x
.cda3	95 24		sta $24,x			sta DStack+0,x
.cda5	b5 28		lda $28,x			lda DStack+4,x
.cda7	95 26		sta $26,x			sta DStack+2,x
.cda9	94 28		sty $28,x			sty DStack+4,x
=28					CL	.var *-(WordListLink+wh_Xt)
=$cdab					en = *	; remember here
>cd8d	1c					.byte CL	;wh_CodeLength
.cdab	60		rts				rts
>cdac	21				L1:	.text "!"	;  name of word as a string, ending at wh_NameLastChar
>cdad	01					.byte *-L1	;wh_NameLength	length of name
>cdae	0a cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cdb0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdb1	08					.byte NN	;wh_Flags	dictionary flags
=52525					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdb2					Store:
.cdb2	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.cdb4	b0 a8		bcs $cd5e		bcs Throw_Stack_03
.cdb6	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cdb8	81 24		sta ($24,x)			sta (DStack+0,x)
.cdba	f6 24		inc $24,x			inc DStack+0,x
.cdbc	d0 02		bne $cdc0			bne +
.cdbe	f6 25		inc $25,x			inc DStack+1,x
.cdc0					+
.cdc0	b5 27		lda $27,x			lda DStack+3,x	; MSB
.cdc2	81 24		sta ($24,x)			sta (DStack+0,x)
.cdc4	e8		inx				inx		; 2Drop
.cdc5	e8		inx				inx
.cdc6	e8		inx				inx
.cdc7	e8		inx				inx
=22					CL	.var *-(WordListLink+wh_Xt)
=$cdc8					en = *	; remember here
>cdb0	16					.byte CL	;wh_CodeLength
.cdc8	60		rts				rts
>cdc9	40				L1:	.text "@"	;  name of word as a string, ending at wh_NameLastChar
>cdca	01					.byte *-L1	;wh_NameLength	length of name
>cdcb	2d cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cdcd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdce	08					.byte NN	;wh_Flags	dictionary flags
=52554					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdcf					Fetch:
.cdcf	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.cdd1	b0 8b		bcs $cd5e		bcs Throw_Stack_03
.cdd3	a1 24		lda ($24,x)			lda (DStack+0,x)		; LSB
.cdd5	a8		tay				tay
.cdd6	f6 24		inc $24,x			inc DStack+0,x
.cdd8	d0 02		bne $cddc			bne +
.cdda	f6 25		inc $25,x			inc DStack+1,x
.cddc					+
.cddc	a1 24		lda ($24,x)			lda (DStack+0,x)		; MSB
.cdde	95 25		sta $25,x			sta DStack+1,x
.cde0	94 24		sty $24,x			sty DStack+0,x
=19					CL	.var *-(WordListLink+wh_Xt)
=$cde2					en = *	; remember here
>cdcd	13					.byte CL	;wh_CodeLength
.cde2	60		rts				rts
>cde3	3e 52				L1:	.text ">R"	;  name of word as a string, ending at wh_NameLastChar
>cde5	02					.byte *-L1	;wh_NameLength	length of name
>cde6	4a cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cde8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cde9	41					.byte CO+R6	;wh_Flags	dictionary flags
=52581					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdea					To_R:
.cdea	68		pla				pla		; move the return address out of the way
.cdeb	85 1c		sta $1c				sta tmp5+0
.cded	68		pla				pla
.cdee	85 1d		sta $1d				sta tmp5+1
.cdf0	20 65 b3	jsr $b365			jsr underflow_1
.cdf3	b5 25		lda $25,x			lda DStack+1,x	; MSB
.cdf5	48		pha				pha
.cdf6	b5 24		lda $24,x			lda DStack+0,x	; LSB
.cdf8	48		pha				pha
.cdf9	e8		inx				inx
.cdfa	e8		inx				inx
.cdfb	a5 1d		lda $1d				lda tmp5+1	; move the return address back in
.cdfd	48		pha				pha
.cdfe	a5 1c		lda $1c				lda tmp5+0
.ce00	48		pha				pha
=23					CL	.var *-(WordListLink+wh_Xt)
=$ce01					en = *	; remember here
>cde8	17					.byte CL	;wh_CodeLength
.ce01	60		rts				rts
>ce02	52 3e				L1:	.text "R>"	;  name of word as a string, ending at wh_NameLastChar
>ce04	02					.byte *-L1	;wh_NameLength	length of name
>ce05	65 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce07	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce08	41					.byte CO+R6	;wh_Flags	dictionary flags
=52612					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce09					R_From:
.ce09	68		pla				pla		; Move the RTS addr out of the way
.ce0a	85 1c		sta $1c				sta tmp5+0
.ce0c	68		pla				pla
.ce0d	85 1d		sta $1d				sta tmp5+1
.ce0f	ca		dex				dex
.ce10	ca		dex				dex
.ce11	68		pla				pla		; LSB
.ce12	95 24		sta $24,x			sta DStack+0,x
.ce14	68		pla				pla		; MSB
.ce15	95 25		sta $25,x			sta DStack+1,x
.ce17	a5 1d		lda $1d				lda tmp5+1	; Restore the RTS addr
.ce19	48		pha				pha
.ce1a	a5 1c		lda $1c				lda tmp5+0
.ce1c	48		pha				pha
=20					CL	.var *-(WordListLink+wh_Xt)
=$ce1d					en = *	; remember here
>ce07	14					.byte CL	;wh_CodeLength
.ce1d	60		rts				rts
>ce1e	52 40				L1:	.text "R@"	;  name of word as a string, ending at wh_NameLastChar
>ce20	02					.byte *-L1	;wh_NameLength	length of name
>ce21	84 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce23	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce24	09					.byte NN+CO	;wh_Flags	dictionary flags
=52640					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce25					R_Fetch:
.ce25	86 14		stx $14				stx tmp1	; save data stack index
.ce27	ba		tsx				tsx		; X= return stack index
.ce28	bd 03 01	lda $0103,x			lda RStack+3,x
.ce2b	bc 04 01	ldy $0104,x			ldy RStack+4,x
.ce2e	a6 14		ldx $14				ldx tmp1	; restore data stack index
.ce30	4c f3 b6	jmp $b6f3			jmp PushYA
=14					CL	.var *-(WordListLink+wh_Xt)
=$ce33					en = *	; remember here
>ce23	0e					.byte CL	;wh_CodeLength
>ce33	4f 76 65 72			L1:	.text "Over"	;  name of word as a string, ending at wh_NameLastChar
>ce37	04					.byte *-L1	;wh_NameLength	length of name
>ce38	a0 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce3a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce3b	10					.byte UF	;wh_Flags	dictionary flags
=52663					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce3c					Over:
.ce3c	20 7a b3	jsr $b37a			jsr underflow_2
.ce3f	b5 26		lda $26,x			lda DStack+2,x	; LSB
.ce41	b4 27		ldy $27,x			ldy DStack+3,x	; MSB
.ce43	ca		dex				dex		; PushYA
.ce44	ca		dex				dex
.ce45	95 24		sta $24,x			sta DStack+0,x
.ce47	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$ce49					en = *	; remember here
>ce3a	0d					.byte CL	;wh_CodeLength
.ce49	60		rts				rts
>ce4a	3f 44 75 70			L1:	.text "?Dup"	;  name of word as a string, ending at wh_NameLastChar
>ce4e	04					.byte *-L1	;wh_NameLength	length of name
>ce4f	b7 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce51	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce52	18					.byte UF+NN	;wh_Flags	dictionary flags
=52686					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce53					Question_Dup:
.ce53	20 65 b3	jsr $b365			jsr underflow_1
.ce56	b5 24		lda $24,x			lda DStack+0,x	; Check if TOS is zero
.ce58	15 25		ora $25,x			ora DStack+1,x
.ce5a	d0 0c		bne $ce68			bne Dup_NoUf
=9					CL	.var *-(WordListLink+wh_Xt)
=$ce5c					en = *	; remember here
>ce51	09					.byte CL	;wh_CodeLength
.ce5c	60		rts				rts
>ce5d	44 75 70			L1:	.text "Dup"	;  name of word as a string, ending at wh_NameLastChar
>ce60	03					.byte *-L1	;wh_NameLength	length of name
>ce61	ce cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce63	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce64	10					.byte UF	;wh_Flags	dictionary flags
=52704					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce65					Dup:
.ce65	20 65 b3	jsr $b365			jsr underflow_1
.ce68	b5 24		lda $24,x	Dup_NoUf:	lda DStack+0,x	; LSB
.ce6a	b4 25		ldy $25,x			ldy DStack+1,x	; MSB
.ce6c	ca		dex				dex
.ce6d	ca		dex				dex
.ce6e	95 24		sta $24,x			sta DStack+0,x
.ce70	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$ce72					en = *	; remember here
>ce63	0d					.byte CL	;wh_CodeLength
.ce72	60		rts				rts
.ce73					PushAY:
.ce73	ca		dex				dex
.ce74	ca		dex				dex
.ce75	94 24		sty $24,x			sty DStack+0,x
.ce77	95 25		sta $25,x			sta DStack+1,x
.ce79	60		rts				rts
>ce7a	53 77 61 70			L1:	.text "Swap"	;  name of word as a string, ending at wh_NameLastChar
>ce7e	04					.byte *-L1	;wh_NameLength	length of name
>ce7f	e0 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce81	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce82	10					.byte UF	;wh_Flags	dictionary flags
=52734					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce83					Swap:
.ce83	20 7a b3	jsr $b37a			jsr underflow_2
.ce86	b5 24		lda $24,x			lda DStack+0,x	; do LSB
.ce88	b4 26		ldy $26,x			ldy DStack+2,x
.ce8a	95 26		sta $26,x			sta DStack+2,x
.ce8c	94 24		sty $24,x			sty DStack+0,x
.ce8e	b5 25		lda $25,x			lda DStack+1,x	; do MSB
.ce90	b4 27		ldy $27,x			ldy DStack+3,x
.ce92	95 27		sta $27,x			sta DStack+3,x
.ce94	94 25		sty $25,x			sty DStack+1,x
=19					CL	.var *-(WordListLink+wh_Xt)
=$ce96					en = *	; remember here
>ce81	13					.byte CL	;wh_CodeLength
.ce96	60		rts				rts
>ce97	44 72 6f 70			L1:	.text "Drop"	;  name of word as a string, ending at wh_NameLastChar
>ce9b	04					.byte *-L1	;wh_NameLength	length of name
>ce9c	fe cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce9e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce9f	10					.byte UF	;wh_Flags	dictionary flags
=52763					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cea0					Drop:
.cea0	20 65 b3	jsr $b365			jsr underflow_1
.cea3	e8		inx				inx
.cea4	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$cea5					en = *	; remember here
>ce9e	05					.byte CL	;wh_CodeLength
.cea5	60		rts				rts
=52763					forth_dictionary_start = WordListLink ; END of FORTH-WORDLIST
=0					WordListLink .var 0
>cea6	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
>ceab	05					.byte *-L1	;wh_NameLength	length of name
>ceac	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ceae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ceaf	08					.byte NN	;wh_Flags	dictionary flags
=52779					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ceb0	4c ca a9	jmp $a9ca			jmp Words
=3					CL	.var *-(WordListLink+wh_Xt)
=$ceb3					en = *	; remember here
>ceae	03					.byte CL	;wh_CodeLength
>ceb3	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>cebb	72 64 6c 69 73 74
>cec1	0e					.byte *-L1	;wh_NameLength	length of name
>cec2	2b ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cec4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cec5	08					.byte NN	;wh_Flags	dictionary flags
=52801					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cec6	4c 20 9f	jmp $9f20			jmp Forth_WordList
=3					CL	.var *-(WordListLink+wh_Xt)
=$cec9					en = *	; remember here
>cec4	03					.byte CL	;wh_CodeLength
>cec9	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
>cece	05					.byte *-L1	;wh_NameLength	length of name
>cecf	41 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ced1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ced2	08					.byte NN	;wh_Flags	dictionary flags
=52814					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ced3	4c 19 a0	jmp $a019			jmp Forth
=3					CL	.var *-(WordListLink+wh_Xt)
=$ced6					en = *	; remember here
>ced1	03					.byte CL	;wh_CodeLength
>ced6	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>cede	72
>cedf	09					.byte *-L1	;wh_NameLength	length of name
>cee0	4e ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cee2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cee3	08					.byte NN	;wh_Flags	dictionary flags
=52831					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cee4	4c dd a0	jmp $a0dd			jmp Set_Order
=3					CL	.var *-(WordListLink+wh_Xt)
=$cee7					en = *	; remember here
>cee2	03					.byte CL	;wh_CodeLength
=52831					root_dictionary_start = WordListLink ; END of ROOT-WORDLIST
.cee7					assembler:
=0					WordListLink .var 0
.cee7					asm_r:
.cee7	68		pla			pla		; pop RTS addr
.cee8	a8		tay			tay
.cee9	68		pla			pla
.ceea	20 29 cf	jsr $cf29		jsr asm_op	; compile opcode
.ceed	b5 25		lda $25,x		lda DStack+1,x	; check range
.ceef	f0 09		beq $cefa		beq _plus
.cef1	c9 ff		cmp #$ff		cmp #$ff
.cef3	f0 0b		beq $cf00		beq _minus
.cef5	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cef7	4c c4 b3	jmp $b3c4		jmp ThrowA
.cefa	b5 24		lda $24,x	_plus:	lda DStack+0,x
.cefc	30 f7		bmi $cef5		bmi _err
.cefe	10 04		bpl $cf04		bpl _store
.cf00	b5 24		lda $24,x	_minus:	lda DStack+0,x
.cf02	10 f1		bpl $cef5		bpl _err
.cf04	4c 01 cc	jmp $cc01	_store:	jmp C_Comma
.cf07					asm_1:
.cf07	68		pla			pla		; pop RTS addr
.cf08	a8		tay			tay
.cf09	68		pla			pla
.cf0a	20 29 cf	jsr $cf29		jsr asm_op	; compile opcode
.cf0d	b5 25		lda $25,x		lda DStack+1,x	; compile operand
.cf0f	f0 04		beq $cf15		beq _store	;   unsigned byte?
.cf11	c9 ff		cmp #$ff		cmp #$ff	;   signed byte?
.cf13	d0 03		bne $cf18		bne _err
.cf15	4c 01 cc	jmp $cc01	_store:	jmp C_Comma
.cf18	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cf1a	4c c4 b3	jmp $b3c4		jmp ThrowA
.cf1d					asm_2:
.cf1d	68		pla			pla		; pop RTS addr
.cf1e	a8		tay			tay
.cf1f	68		pla			pla
.cf20	20 29 cf	jsr $cf29		jsr asm_op	; compile opcode
.cf23	4c 1b cc	jmp $cc1b		jmp Comma	; compile operand
.cf26					asm_0:
.cf26	68		pla			pla		; pop RTS addr
.cf27	a8		tay			tay
.cf28	68		pla			pla
.cf29	84 14		sty $14		asm_op:	sty tmp1+0	; save RTS addr
.cf2b	85 15		sta $15			sta tmp1+1
.cf2d	a0 01		ldy #$01		ldy #1		; get opcode byte
.cf2f	b1 14		lda ($14),y		lda (tmp1),y
.cf31	4c 04 cc	jmp $cc04		jmp C_Comma_A	; compile opcode
>cf34	61 64 63 2e 23			L1:	.text "adc.#"	;  name of word as a string, ending at wh_NameLastChar
>cf39	05					.byte *-L1	;wh_NameLength	length of name
>cf3a	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf3c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf3d	08					.byte NN	;wh_Flags	dictionary flags
=52921					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf3e	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf41					en = *	; remember here
>cf3c	03					.byte CL	;wh_CodeLength
>cf41	69					.byte $69
>cf42	61 64 63 2e 78			L1:	.text "adc.x"	;  name of word as a string, ending at wh_NameLastChar
>cf47	05					.byte *-L1	;wh_NameLength	length of name
>cf48	b9 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf4a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf4b	08					.byte NN	;wh_Flags	dictionary flags
=52935					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf4c	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf4f					en = *	; remember here
>cf4a	03					.byte CL	;wh_CodeLength
>cf4f	7d					.byte $7d
>cf50	61 64 63 2e 79			L1:	.text "adc.y"	;  name of word as a string, ending at wh_NameLastChar
>cf55	05					.byte *-L1	;wh_NameLength	length of name
>cf56	c7 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf58	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf59	08					.byte NN	;wh_Flags	dictionary flags
=52949					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf5a	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf5d					en = *	; remember here
>cf58	03					.byte CL	;wh_CodeLength
>cf5d	79					.byte $79
>cf5e	61 64 63 2e 7a			L1:	.text "adc.z"	;  name of word as a string, ending at wh_NameLastChar
>cf63	05					.byte *-L1	;wh_NameLength	length of name
>cf64	d5 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf66	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf67	08					.byte NN	;wh_Flags	dictionary flags
=52963					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf68	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf6b					en = *	; remember here
>cf66	03					.byte CL	;wh_CodeLength
>cf6b	65					.byte $65
>cf6c	61 64 63 2e 7a 69 79		L1:	.text "adc.ziy"	;  name of word as a string, ending at wh_NameLastChar
>cf73	07					.byte *-L1	;wh_NameLength	length of name
>cf74	e3 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf76	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf77	08					.byte NN	;wh_Flags	dictionary flags
=52979					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf78	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf7b					en = *	; remember here
>cf76	03					.byte CL	;wh_CodeLength
>cf7b	71					.byte $71
>cf7c	61 64 63 2e 7a 78		L1:	.text "adc.zx"	;  name of word as a string, ending at wh_NameLastChar
>cf82	06					.byte *-L1	;wh_NameLength	length of name
>cf83	f3 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf85	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf86	08					.byte NN	;wh_Flags	dictionary flags
=52994					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf87	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf8a					en = *	; remember here
>cf85	03					.byte CL	;wh_CodeLength
>cf8a	75					.byte $75
>cf8b	61 64 63 2e 7a 78 69		L1:	.text "adc.zxi"	;  name of word as a string, ending at wh_NameLastChar
>cf92	07					.byte *-L1	;wh_NameLength	length of name
>cf93	02 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf95	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf96	08					.byte NN	;wh_Flags	dictionary flags
=53010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf97	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf9a					en = *	; remember here
>cf95	03					.byte CL	;wh_CodeLength
>cf9a	61					.byte $61
>cf9b	61 6e 64 2e			L1:	.text "and."	;  name of word as a string, ending at wh_NameLastChar
>cf9f	04					.byte *-L1	;wh_NameLength	length of name
>cfa0	12 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfa2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfa3	08					.byte NN	;wh_Flags	dictionary flags
=53023					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfa4	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfa7					en = *	; remember here
>cfa2	03					.byte CL	;wh_CodeLength
>cfa7	2d					.byte $2d
>cfa8	61 6e 64 2e 23			L1:	.text "and.#"	;  name of word as a string, ending at wh_NameLastChar
>cfad	05					.byte *-L1	;wh_NameLength	length of name
>cfae	1f cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfb0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfb1	08					.byte NN	;wh_Flags	dictionary flags
=53037					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfb2	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfb5					en = *	; remember here
>cfb0	03					.byte CL	;wh_CodeLength
>cfb5	29					.byte $29
>cfb6	61 6e 64 2e 78			L1:	.text "and.x"	;  name of word as a string, ending at wh_NameLastChar
>cfbb	05					.byte *-L1	;wh_NameLength	length of name
>cfbc	2d cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfbe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfbf	08					.byte NN	;wh_Flags	dictionary flags
=53051					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfc0	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfc3					en = *	; remember here
>cfbe	03					.byte CL	;wh_CodeLength
>cfc3	3d					.byte $3d
>cfc4	61 6e 64 2e 79			L1:	.text "and.y"	;  name of word as a string, ending at wh_NameLastChar
>cfc9	05					.byte *-L1	;wh_NameLength	length of name
>cfca	3b cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfcc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfcd	08					.byte NN	;wh_Flags	dictionary flags
=53065					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfce	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfd1					en = *	; remember here
>cfcc	03					.byte CL	;wh_CodeLength
>cfd1	39					.byte $39
>cfd2	61 6e 64 2e 7a			L1:	.text "and.z"	;  name of word as a string, ending at wh_NameLastChar
>cfd7	05					.byte *-L1	;wh_NameLength	length of name
>cfd8	49 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfda	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfdb	08					.byte NN	;wh_Flags	dictionary flags
=53079					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfdc	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfdf					en = *	; remember here
>cfda	03					.byte CL	;wh_CodeLength
>cfdf	25					.byte $25
>cfe0	61 6e 64 2e 7a 69 79		L1:	.text "and.ziy"	;  name of word as a string, ending at wh_NameLastChar
>cfe7	07					.byte *-L1	;wh_NameLength	length of name
>cfe8	57 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfeb	08					.byte NN	;wh_Flags	dictionary flags
=53095					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfec	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfef					en = *	; remember here
>cfea	03					.byte CL	;wh_CodeLength
>cfef	31					.byte $31
>cff0	61 6e 64 2e 7a 78		L1:	.text "and.zx"	;  name of word as a string, ending at wh_NameLastChar
>cff6	06					.byte *-L1	;wh_NameLength	length of name
>cff7	67 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cff9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cffa	08					.byte NN	;wh_Flags	dictionary flags
=53110					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cffb	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cffe					en = *	; remember here
>cff9	03					.byte CL	;wh_CodeLength
>cffe	35					.byte $35
>cfff	61 6e 64 2e 7a 78 69		L1:	.text "and.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d006	07					.byte *-L1	;wh_NameLength	length of name
>d007	76 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d009	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d00a	08					.byte NN	;wh_Flags	dictionary flags
=53126					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d00b	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d00e					en = *	; remember here
>d009	03					.byte CL	;wh_CodeLength
>d00e	21					.byte $21
>d00f	61 73 6c			L1:	.text "asl"	;  name of word as a string, ending at wh_NameLastChar
>d012	03					.byte *-L1	;wh_NameLength	length of name
>d013	86 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d015	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d016	08					.byte NN	;wh_Flags	dictionary flags
=53138					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d017	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d01a					en = *	; remember here
>d015	03					.byte CL	;wh_CodeLength
>d01a	0e					.byte $0e
>d01b	61 73 6c 2e 61			L1:	.text "asl.a"	;  name of word as a string, ending at wh_NameLastChar
>d020	05					.byte *-L1	;wh_NameLength	length of name
>d021	92 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d023	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d024	08					.byte NN	;wh_Flags	dictionary flags
=53152					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d025	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d028					en = *	; remember here
>d023	03					.byte CL	;wh_CodeLength
>d028	0a					.byte $0a
>d029	61 73 6c 2e 78			L1:	.text "asl.x"	;  name of word as a string, ending at wh_NameLastChar
>d02e	05					.byte *-L1	;wh_NameLength	length of name
>d02f	a0 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d031	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d032	08					.byte NN	;wh_Flags	dictionary flags
=53166					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d033	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d036					en = *	; remember here
>d031	03					.byte CL	;wh_CodeLength
>d036	1e					.byte $1e
>d037	61 73 6c 2e 7a			L1:	.text "asl.z"	;  name of word as a string, ending at wh_NameLastChar
>d03c	05					.byte *-L1	;wh_NameLength	length of name
>d03d	ae cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d03f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d040	08					.byte NN	;wh_Flags	dictionary flags
=53180					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d041	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d044					en = *	; remember here
>d03f	03					.byte CL	;wh_CodeLength
>d044	06					.byte $06
>d045	61 73 6c 2e 7a 78		L1:	.text "asl.zx"	;  name of word as a string, ending at wh_NameLastChar
>d04b	06					.byte *-L1	;wh_NameLength	length of name
>d04c	bc cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d04e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d04f	08					.byte NN	;wh_Flags	dictionary flags
=53195					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d050	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d053					en = *	; remember here
>d04e	03					.byte CL	;wh_CodeLength
>d053	16					.byte $16
>d054	62 63 63			L1:	.text "bcc"	;  name of word as a string, ending at wh_NameLastChar
>d057	03					.byte *-L1	;wh_NameLength	length of name
>d058	cb cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d05a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d05b	08					.byte NN	;wh_Flags	dictionary flags
=53207					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d05c	20 e7 ce	jsr $cee7		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d05f					en = *	; remember here
>d05a	03					.byte CL	;wh_CodeLength
>d05f	90					.byte $90
>d060	62 63 73			L1:	.text "bcs"	;  name of word as a string, ending at wh_NameLastChar
>d063	03					.byte *-L1	;wh_NameLength	length of name
>d064	d7 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d066	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d067	08					.byte NN	;wh_Flags	dictionary flags
=53219					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d068	20 e7 ce	jsr $cee7		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d06b					en = *	; remember here
>d066	03					.byte CL	;wh_CodeLength
>d06b	b0					.byte $b0
>d06c	62 65 71			L1:	.text "beq"	;  name of word as a string, ending at wh_NameLastChar
>d06f	03					.byte *-L1	;wh_NameLength	length of name
>d070	e3 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d072	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d073	08					.byte NN	;wh_Flags	dictionary flags
=53231					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d074	20 e7 ce	jsr $cee7		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d077					en = *	; remember here
>d072	03					.byte CL	;wh_CodeLength
>d077	f0					.byte $f0
>d078	62 69 74			L1:	.text "bit"	;  name of word as a string, ending at wh_NameLastChar
>d07b	03					.byte *-L1	;wh_NameLength	length of name
>d07c	ef cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d07e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d07f	08					.byte NN	;wh_Flags	dictionary flags
=53243					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d080	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d083					en = *	; remember here
>d07e	03					.byte CL	;wh_CodeLength
>d083	2c					.byte $2c
>d084	62 69 74 2e 7a			L1:	.text "bit.z"	;  name of word as a string, ending at wh_NameLastChar
>d089	05					.byte *-L1	;wh_NameLength	length of name
>d08a	fb cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d08c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d08d	08					.byte NN	;wh_Flags	dictionary flags
=53257					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d08e	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d091					en = *	; remember here
>d08c	03					.byte CL	;wh_CodeLength
>d091	24					.byte $24
>d092	62 6d 69			L1:	.text "bmi"	;  name of word as a string, ending at wh_NameLastChar
>d095	03					.byte *-L1	;wh_NameLength	length of name
>d096	09 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d098	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d099	08					.byte NN	;wh_Flags	dictionary flags
=53269					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d09a	20 e7 ce	jsr $cee7		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d09d					en = *	; remember here
>d098	03					.byte CL	;wh_CodeLength
>d09d	30					.byte $30
>d09e	62 6e 65			L1:	.text "bne"	;  name of word as a string, ending at wh_NameLastChar
>d0a1	03					.byte *-L1	;wh_NameLength	length of name
>d0a2	15 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0a4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0a5	08					.byte NN	;wh_Flags	dictionary flags
=53281					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0a6	20 e7 ce	jsr $cee7		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0a9					en = *	; remember here
>d0a4	03					.byte CL	;wh_CodeLength
>d0a9	d0					.byte $d0
>d0aa	62 70 6c			L1:	.text "bpl"	;  name of word as a string, ending at wh_NameLastChar
>d0ad	03					.byte *-L1	;wh_NameLength	length of name
>d0ae	21 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0b0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0b1	08					.byte NN	;wh_Flags	dictionary flags
=53293					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0b2	20 e7 ce	jsr $cee7		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0b5					en = *	; remember here
>d0b0	03					.byte CL	;wh_CodeLength
>d0b5	10					.byte $10
>d0b6	62 72 6b			L1:	.text "brk"	;  name of word as a string, ending at wh_NameLastChar
>d0b9	03					.byte *-L1	;wh_NameLength	length of name
>d0ba	2d d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0bd	08					.byte NN	;wh_Flags	dictionary flags
=53305					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0be	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0c1					en = *	; remember here
>d0bc	03					.byte CL	;wh_CodeLength
>d0c1	00					.byte $00
>d0c2	62 76 63			L1:	.text "bvc"	;  name of word as a string, ending at wh_NameLastChar
>d0c5	03					.byte *-L1	;wh_NameLength	length of name
>d0c6	39 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0c8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0c9	08					.byte NN	;wh_Flags	dictionary flags
=53317					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0ca	20 e7 ce	jsr $cee7		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0cd					en = *	; remember here
>d0c8	03					.byte CL	;wh_CodeLength
>d0cd	50					.byte $50
>d0ce	62 76 73			L1:	.text "bvs"	;  name of word as a string, ending at wh_NameLastChar
>d0d1	03					.byte *-L1	;wh_NameLength	length of name
>d0d2	45 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0d4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0d5	08					.byte NN	;wh_Flags	dictionary flags
=53329					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0d6	20 e7 ce	jsr $cee7		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0d9					en = *	; remember here
>d0d4	03					.byte CL	;wh_CodeLength
>d0d9	70					.byte $70
>d0da	63 6c 63			L1:	.text "clc"	;  name of word as a string, ending at wh_NameLastChar
>d0dd	03					.byte *-L1	;wh_NameLength	length of name
>d0de	51 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0e0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0e1	08					.byte NN	;wh_Flags	dictionary flags
=53341					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0e2	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0e5					en = *	; remember here
>d0e0	03					.byte CL	;wh_CodeLength
>d0e5	18					.byte $18
>d0e6	63 6c 64			L1:	.text "cld"	;  name of word as a string, ending at wh_NameLastChar
>d0e9	03					.byte *-L1	;wh_NameLength	length of name
>d0ea	5d d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0ec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0ed	08					.byte NN	;wh_Flags	dictionary flags
=53353					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0ee	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0f1					en = *	; remember here
>d0ec	03					.byte CL	;wh_CodeLength
>d0f1	d8					.byte $d8
>d0f2	63 6c 69			L1:	.text "cli"	;  name of word as a string, ending at wh_NameLastChar
>d0f5	03					.byte *-L1	;wh_NameLength	length of name
>d0f6	69 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0f8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0f9	08					.byte NN	;wh_Flags	dictionary flags
=53365					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0fa	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0fd					en = *	; remember here
>d0f8	03					.byte CL	;wh_CodeLength
>d0fd	58					.byte $58
>d0fe	63 6c 76			L1:	.text "clv"	;  name of word as a string, ending at wh_NameLastChar
>d101	03					.byte *-L1	;wh_NameLength	length of name
>d102	75 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d104	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d105	08					.byte NN	;wh_Flags	dictionary flags
=53377					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d106	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d109					en = *	; remember here
>d104	03					.byte CL	;wh_CodeLength
>d109	b8					.byte $b8
>d10a	63 6d 70			L1:	.text "cmp"	;  name of word as a string, ending at wh_NameLastChar
>d10d	03					.byte *-L1	;wh_NameLength	length of name
>d10e	81 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d110	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d111	08					.byte NN	;wh_Flags	dictionary flags
=53389					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d112	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d115					en = *	; remember here
>d110	03					.byte CL	;wh_CodeLength
>d115	cd					.byte $cd
>d116	63 6d 70 2e 23			L1:	.text "cmp.#"	;  name of word as a string, ending at wh_NameLastChar
>d11b	05					.byte *-L1	;wh_NameLength	length of name
>d11c	8d d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d11e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d11f	08					.byte NN	;wh_Flags	dictionary flags
=53403					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d120	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d123					en = *	; remember here
>d11e	03					.byte CL	;wh_CodeLength
>d123	c9					.byte $c9
>d124	63 6d 70 2e 78			L1:	.text "cmp.x"	;  name of word as a string, ending at wh_NameLastChar
>d129	05					.byte *-L1	;wh_NameLength	length of name
>d12a	9b d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d12c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d12d	08					.byte NN	;wh_Flags	dictionary flags
=53417					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d12e	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d131					en = *	; remember here
>d12c	03					.byte CL	;wh_CodeLength
>d131	dd					.byte $dd
>d132	63 6d 70 2e 79			L1:	.text "cmp.y"	;  name of word as a string, ending at wh_NameLastChar
>d137	05					.byte *-L1	;wh_NameLength	length of name
>d138	a9 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d13a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d13b	08					.byte NN	;wh_Flags	dictionary flags
=53431					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d13c	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d13f					en = *	; remember here
>d13a	03					.byte CL	;wh_CodeLength
>d13f	d9					.byte $d9
>d140	63 6d 70 2e 7a			L1:	.text "cmp.z"	;  name of word as a string, ending at wh_NameLastChar
>d145	05					.byte *-L1	;wh_NameLength	length of name
>d146	b7 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d148	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d149	08					.byte NN	;wh_Flags	dictionary flags
=53445					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d14a	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d14d					en = *	; remember here
>d148	03					.byte CL	;wh_CodeLength
>d14d	c5					.byte $c5
>d14e	63 6d 70 2e 7a 69 79		L1:	.text "cmp.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d155	07					.byte *-L1	;wh_NameLength	length of name
>d156	c5 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d158	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d159	08					.byte NN	;wh_Flags	dictionary flags
=53461					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d15a	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d15d					en = *	; remember here
>d158	03					.byte CL	;wh_CodeLength
>d15d	d1					.byte $d1
>d15e	63 6d 70 2e 7a 78		L1:	.text "cmp.zx"	;  name of word as a string, ending at wh_NameLastChar
>d164	06					.byte *-L1	;wh_NameLength	length of name
>d165	d5 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d167	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d168	08					.byte NN	;wh_Flags	dictionary flags
=53476					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d169	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d16c					en = *	; remember here
>d167	03					.byte CL	;wh_CodeLength
>d16c	d5					.byte $d5
>d16d	63 6d 70 2e 7a 78 69		L1:	.text "cmp.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d174	07					.byte *-L1	;wh_NameLength	length of name
>d175	e4 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d177	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d178	08					.byte NN	;wh_Flags	dictionary flags
=53492					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d179	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d17c					en = *	; remember here
>d177	03					.byte CL	;wh_CodeLength
>d17c	c1					.byte $c1
>d17d	63 70 78			L1:	.text "cpx"	;  name of word as a string, ending at wh_NameLastChar
>d180	03					.byte *-L1	;wh_NameLength	length of name
>d181	f4 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d183	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d184	08					.byte NN	;wh_Flags	dictionary flags
=53504					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d185	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d188					en = *	; remember here
>d183	03					.byte CL	;wh_CodeLength
>d188	ec					.byte $ec
>d189	63 70 78 2e 23			L1:	.text "cpx.#"	;  name of word as a string, ending at wh_NameLastChar
>d18e	05					.byte *-L1	;wh_NameLength	length of name
>d18f	00 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d191	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d192	08					.byte NN	;wh_Flags	dictionary flags
=53518					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d193	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d196					en = *	; remember here
>d191	03					.byte CL	;wh_CodeLength
>d196	e0					.byte $e0
>d197	63 70 78 2e 7a			L1:	.text "cpx.z"	;  name of word as a string, ending at wh_NameLastChar
>d19c	05					.byte *-L1	;wh_NameLength	length of name
>d19d	0e d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d19f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1a0	08					.byte NN	;wh_Flags	dictionary flags
=53532					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1a1	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1a4					en = *	; remember here
>d19f	03					.byte CL	;wh_CodeLength
>d1a4	e4					.byte $e4
>d1a5	63 70 79			L1:	.text "cpy"	;  name of word as a string, ending at wh_NameLastChar
>d1a8	03					.byte *-L1	;wh_NameLength	length of name
>d1a9	1c d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1ac	08					.byte NN	;wh_Flags	dictionary flags
=53544					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1ad	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1b0					en = *	; remember here
>d1ab	03					.byte CL	;wh_CodeLength
>d1b0	cc					.byte $cc
>d1b1	63 70 79 2e 23			L1:	.text "cpy.#"	;  name of word as a string, ending at wh_NameLastChar
>d1b6	05					.byte *-L1	;wh_NameLength	length of name
>d1b7	28 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1b9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1ba	08					.byte NN	;wh_Flags	dictionary flags
=53558					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1bb	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1be					en = *	; remember here
>d1b9	03					.byte CL	;wh_CodeLength
>d1be	c0					.byte $c0
>d1bf	63 70 79 2e 7a			L1:	.text "cpy.z"	;  name of word as a string, ending at wh_NameLastChar
>d1c4	05					.byte *-L1	;wh_NameLength	length of name
>d1c5	36 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1c8	08					.byte NN	;wh_Flags	dictionary flags
=53572					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1c9	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1cc					en = *	; remember here
>d1c7	03					.byte CL	;wh_CodeLength
>d1cc	c4					.byte $c4
>d1cd	64 65 63			L1:	.text "dec"	;  name of word as a string, ending at wh_NameLastChar
>d1d0	03					.byte *-L1	;wh_NameLength	length of name
>d1d1	44 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1d3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1d4	08					.byte NN	;wh_Flags	dictionary flags
=53584					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1d5	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1d8					en = *	; remember here
>d1d3	03					.byte CL	;wh_CodeLength
>d1d8	ce					.byte $ce
>d1d9	64 65 63 2e 61			L1:	.text "dec.a"	;  name of word as a string, ending at wh_NameLastChar
>d1de	05					.byte *-L1	;wh_NameLength	length of name
>d1df	50 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1e2	08					.byte NN	;wh_Flags	dictionary flags
=53598					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1e3	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1e6					en = *	; remember here
>d1e1	03					.byte CL	;wh_CodeLength
>d1e6	3a					.byte $3a
>d1e7	64 65 63 2e 78			L1:	.text "dec.x"	;  name of word as a string, ending at wh_NameLastChar
>d1ec	05					.byte *-L1	;wh_NameLength	length of name
>d1ed	5e d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1ef	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1f0	08					.byte NN	;wh_Flags	dictionary flags
=53612					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1f1	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1f4					en = *	; remember here
>d1ef	03					.byte CL	;wh_CodeLength
>d1f4	de					.byte $de
>d1f5	64 65 63 2e 7a			L1:	.text "dec.z"	;  name of word as a string, ending at wh_NameLastChar
>d1fa	05					.byte *-L1	;wh_NameLength	length of name
>d1fb	6c d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1fd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1fe	08					.byte NN	;wh_Flags	dictionary flags
=53626					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1ff	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d202					en = *	; remember here
>d1fd	03					.byte CL	;wh_CodeLength
>d202	c6					.byte $c6
>d203	64 65 63 2e 7a 78		L1:	.text "dec.zx"	;  name of word as a string, ending at wh_NameLastChar
>d209	06					.byte *-L1	;wh_NameLength	length of name
>d20a	7a d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d20c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d20d	08					.byte NN	;wh_Flags	dictionary flags
=53641					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d20e	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d211					en = *	; remember here
>d20c	03					.byte CL	;wh_CodeLength
>d211	d6					.byte $d6
>d212	64 65 78			L1:	.text "dex"	;  name of word as a string, ending at wh_NameLastChar
>d215	03					.byte *-L1	;wh_NameLength	length of name
>d216	89 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d218	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d219	08					.byte NN	;wh_Flags	dictionary flags
=53653					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d21a	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d21d					en = *	; remember here
>d218	03					.byte CL	;wh_CodeLength
>d21d	ca					.byte $ca
>d21e	64 65 79			L1:	.text "dey"	;  name of word as a string, ending at wh_NameLastChar
>d221	03					.byte *-L1	;wh_NameLength	length of name
>d222	95 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d224	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d225	08					.byte NN	;wh_Flags	dictionary flags
=53665					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d226	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d229					en = *	; remember here
>d224	03					.byte CL	;wh_CodeLength
>d229	88					.byte $88
>d22a	65 6f 72			L1:	.text "eor"	;  name of word as a string, ending at wh_NameLastChar
>d22d	03					.byte *-L1	;wh_NameLength	length of name
>d22e	a1 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d230	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d231	08					.byte NN	;wh_Flags	dictionary flags
=53677					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d232	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d235					en = *	; remember here
>d230	03					.byte CL	;wh_CodeLength
>d235	4d					.byte $4d
>d236	65 6f 72 2e 23			L1:	.text "eor.#"	;  name of word as a string, ending at wh_NameLastChar
>d23b	05					.byte *-L1	;wh_NameLength	length of name
>d23c	ad d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d23e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d23f	08					.byte NN	;wh_Flags	dictionary flags
=53691					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d240	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d243					en = *	; remember here
>d23e	03					.byte CL	;wh_CodeLength
>d243	49					.byte $49
>d244	65 6f 72 2e 78			L1:	.text "eor.x"	;  name of word as a string, ending at wh_NameLastChar
>d249	05					.byte *-L1	;wh_NameLength	length of name
>d24a	bb d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d24c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d24d	08					.byte NN	;wh_Flags	dictionary flags
=53705					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d24e	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d251					en = *	; remember here
>d24c	03					.byte CL	;wh_CodeLength
>d251	5d					.byte $5d
>d252	65 6f 72 2e 79			L1:	.text "eor.y"	;  name of word as a string, ending at wh_NameLastChar
>d257	05					.byte *-L1	;wh_NameLength	length of name
>d258	c9 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d25a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d25b	08					.byte NN	;wh_Flags	dictionary flags
=53719					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d25c	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d25f					en = *	; remember here
>d25a	03					.byte CL	;wh_CodeLength
>d25f	59					.byte $59
>d260	65 6f 72 2e 7a			L1:	.text "eor.z"	;  name of word as a string, ending at wh_NameLastChar
>d265	05					.byte *-L1	;wh_NameLength	length of name
>d266	d7 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d268	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d269	08					.byte NN	;wh_Flags	dictionary flags
=53733					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d26a	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d26d					en = *	; remember here
>d268	03					.byte CL	;wh_CodeLength
>d26d	45					.byte $45
>d26e	65 6f 72 2e 7a 69 79		L1:	.text "eor.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d275	07					.byte *-L1	;wh_NameLength	length of name
>d276	e5 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d278	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d279	08					.byte NN	;wh_Flags	dictionary flags
=53749					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d27a	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d27d					en = *	; remember here
>d278	03					.byte CL	;wh_CodeLength
>d27d	51					.byte $51
>d27e	65 6f 72 2e 7a 78		L1:	.text "eor.zx"	;  name of word as a string, ending at wh_NameLastChar
>d284	06					.byte *-L1	;wh_NameLength	length of name
>d285	f5 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d287	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d288	08					.byte NN	;wh_Flags	dictionary flags
=53764					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d289	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d28c					en = *	; remember here
>d287	03					.byte CL	;wh_CodeLength
>d28c	55					.byte $55
>d28d	65 6f 72 2e 7a 78 69		L1:	.text "eor.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d294	07					.byte *-L1	;wh_NameLength	length of name
>d295	04 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d297	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d298	08					.byte NN	;wh_Flags	dictionary flags
=53780					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d299	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d29c					en = *	; remember here
>d297	03					.byte CL	;wh_CodeLength
>d29c	41					.byte $41
>d29d	69 6e 63			L1:	.text "inc"	;  name of word as a string, ending at wh_NameLastChar
>d2a0	03					.byte *-L1	;wh_NameLength	length of name
>d2a1	14 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2a3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2a4	08					.byte NN	;wh_Flags	dictionary flags
=53792					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2a5	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2a8					en = *	; remember here
>d2a3	03					.byte CL	;wh_CodeLength
>d2a8	ee					.byte $ee
>d2a9	69 6e 63 2e 61			L1:	.text "inc.a"	;  name of word as a string, ending at wh_NameLastChar
>d2ae	05					.byte *-L1	;wh_NameLength	length of name
>d2af	20 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2b1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2b2	08					.byte NN	;wh_Flags	dictionary flags
=53806					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2b3	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2b6					en = *	; remember here
>d2b1	03					.byte CL	;wh_CodeLength
>d2b6	1a					.byte $1a
>d2b7	69 6e 63 2e 78			L1:	.text "inc.x"	;  name of word as a string, ending at wh_NameLastChar
>d2bc	05					.byte *-L1	;wh_NameLength	length of name
>d2bd	2e d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2bf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2c0	08					.byte NN	;wh_Flags	dictionary flags
=53820					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2c1	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2c4					en = *	; remember here
>d2bf	03					.byte CL	;wh_CodeLength
>d2c4	fe					.byte $fe
>d2c5	69 6e 63 2e 7a			L1:	.text "inc.z"	;  name of word as a string, ending at wh_NameLastChar
>d2ca	05					.byte *-L1	;wh_NameLength	length of name
>d2cb	3c d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2ce	08					.byte NN	;wh_Flags	dictionary flags
=53834					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2cf	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2d2					en = *	; remember here
>d2cd	03					.byte CL	;wh_CodeLength
>d2d2	e6					.byte $e6
>d2d3	69 6e 63 2e 7a 78		L1:	.text "inc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d2d9	06					.byte *-L1	;wh_NameLength	length of name
>d2da	4a d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2dd	08					.byte NN	;wh_Flags	dictionary flags
=53849					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2de	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2e1					en = *	; remember here
>d2dc	03					.byte CL	;wh_CodeLength
>d2e1	f6					.byte $f6
>d2e2	69 6e 78			L1:	.text "inx"	;  name of word as a string, ending at wh_NameLastChar
>d2e5	03					.byte *-L1	;wh_NameLength	length of name
>d2e6	59 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2e8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2e9	08					.byte NN	;wh_Flags	dictionary flags
=53861					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2ea	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2ed					en = *	; remember here
>d2e8	03					.byte CL	;wh_CodeLength
>d2ed	e8					.byte $e8
>d2ee	69 6e 79			L1:	.text "iny"	;  name of word as a string, ending at wh_NameLastChar
>d2f1	03					.byte *-L1	;wh_NameLength	length of name
>d2f2	65 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2f4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2f5	08					.byte NN	;wh_Flags	dictionary flags
=53873					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2f6	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2f9					en = *	; remember here
>d2f4	03					.byte CL	;wh_CodeLength
>d2f9	c8					.byte $c8
>d2fa	6a 6d 70			L1:	.text "jmp"	;  name of word as a string, ending at wh_NameLastChar
>d2fd	03					.byte *-L1	;wh_NameLength	length of name
>d2fe	71 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d300	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d301	08					.byte NN	;wh_Flags	dictionary flags
=53885					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d302	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d305					en = *	; remember here
>d300	03					.byte CL	;wh_CodeLength
>d305	4c					.byte $4c
>d306	6a 6d 70 2e 69			L1:	.text "jmp.i"	;  name of word as a string, ending at wh_NameLastChar
>d30b	05					.byte *-L1	;wh_NameLength	length of name
>d30c	7d d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d30e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d30f	08					.byte NN	;wh_Flags	dictionary flags
=53899					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d310	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d313					en = *	; remember here
>d30e	03					.byte CL	;wh_CodeLength
>d313	6c					.byte $6c
>d314	6a 73 72			L1:	.text "jsr"	;  name of word as a string, ending at wh_NameLastChar
>d317	03					.byte *-L1	;wh_NameLength	length of name
>d318	8b d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d31a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d31b	08					.byte NN	;wh_Flags	dictionary flags
=53911					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d31c	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d31f					en = *	; remember here
>d31a	03					.byte CL	;wh_CodeLength
>d31f	20					.byte $20
>d320	6c 64 61			L1:	.text "lda"	;  name of word as a string, ending at wh_NameLastChar
>d323	03					.byte *-L1	;wh_NameLength	length of name
>d324	97 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d326	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d327	08					.byte NN	;wh_Flags	dictionary flags
=53923					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d328	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d32b					en = *	; remember here
>d326	03					.byte CL	;wh_CodeLength
>d32b	ad					.byte $ad
>d32c	6c 64 61 2e 23			L1:	.text "lda.#"	;  name of word as a string, ending at wh_NameLastChar
>d331	05					.byte *-L1	;wh_NameLength	length of name
>d332	a3 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d334	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d335	08					.byte NN	;wh_Flags	dictionary flags
=53937					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d336	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d339					en = *	; remember here
>d334	03					.byte CL	;wh_CodeLength
>d339	a9					.byte $a9
>d33a	6c 64 61 2e 78			L1:	.text "lda.x"	;  name of word as a string, ending at wh_NameLastChar
>d33f	05					.byte *-L1	;wh_NameLength	length of name
>d340	b1 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d342	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d343	08					.byte NN	;wh_Flags	dictionary flags
=53951					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d344	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d347					en = *	; remember here
>d342	03					.byte CL	;wh_CodeLength
>d347	bd					.byte $bd
>d348	6c 64 61 2e 79			L1:	.text "lda.y"	;  name of word as a string, ending at wh_NameLastChar
>d34d	05					.byte *-L1	;wh_NameLength	length of name
>d34e	bf d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d350	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d351	08					.byte NN	;wh_Flags	dictionary flags
=53965					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d352	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d355					en = *	; remember here
>d350	03					.byte CL	;wh_CodeLength
>d355	b9					.byte $b9
>d356	6c 64 61 2e 7a			L1:	.text "lda.z"	;  name of word as a string, ending at wh_NameLastChar
>d35b	05					.byte *-L1	;wh_NameLength	length of name
>d35c	cd d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d35e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d35f	08					.byte NN	;wh_Flags	dictionary flags
=53979					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d360	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d363					en = *	; remember here
>d35e	03					.byte CL	;wh_CodeLength
>d363	a5					.byte $a5
>d364	6c 64 61 2e 7a 69 79		L1:	.text "lda.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d36b	07					.byte *-L1	;wh_NameLength	length of name
>d36c	db d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d36e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d36f	08					.byte NN	;wh_Flags	dictionary flags
=53995					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d370	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d373					en = *	; remember here
>d36e	03					.byte CL	;wh_CodeLength
>d373	b1					.byte $b1
>d374	6c 64 61 2e 7a 78		L1:	.text "lda.zx"	;  name of word as a string, ending at wh_NameLastChar
>d37a	06					.byte *-L1	;wh_NameLength	length of name
>d37b	eb d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d37d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d37e	08					.byte NN	;wh_Flags	dictionary flags
=54010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d37f	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d382					en = *	; remember here
>d37d	03					.byte CL	;wh_CodeLength
>d382	b5					.byte $b5
>d383	6c 64 61 2e 7a 78 69		L1:	.text "lda.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d38a	07					.byte *-L1	;wh_NameLength	length of name
>d38b	fa d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d38d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d38e	08					.byte NN	;wh_Flags	dictionary flags
=54026					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d38f	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d392					en = *	; remember here
>d38d	03					.byte CL	;wh_CodeLength
>d392	a1					.byte $a1
>d393	6c 64 78			L1:	.text "ldx"	;  name of word as a string, ending at wh_NameLastChar
>d396	03					.byte *-L1	;wh_NameLength	length of name
>d397	0a d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d399	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d39a	08					.byte NN	;wh_Flags	dictionary flags
=54038					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d39b	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d39e					en = *	; remember here
>d399	03					.byte CL	;wh_CodeLength
>d39e	ae					.byte $ae
>d39f	6c 64 78 2e 23			L1:	.text "ldx.#"	;  name of word as a string, ending at wh_NameLastChar
>d3a4	05					.byte *-L1	;wh_NameLength	length of name
>d3a5	16 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3a7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3a8	08					.byte NN	;wh_Flags	dictionary flags
=54052					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3a9	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3ac					en = *	; remember here
>d3a7	03					.byte CL	;wh_CodeLength
>d3ac	a2					.byte $a2
>d3ad	6c 64 78 2e 79			L1:	.text "ldx.y"	;  name of word as a string, ending at wh_NameLastChar
>d3b2	05					.byte *-L1	;wh_NameLength	length of name
>d3b3	24 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3b5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3b6	08					.byte NN	;wh_Flags	dictionary flags
=54066					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3b7	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3ba					en = *	; remember here
>d3b5	03					.byte CL	;wh_CodeLength
>d3ba	be					.byte $be
>d3bb	6c 64 78 2e 7a			L1:	.text "ldx.z"	;  name of word as a string, ending at wh_NameLastChar
>d3c0	05					.byte *-L1	;wh_NameLength	length of name
>d3c1	32 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3c4	08					.byte NN	;wh_Flags	dictionary flags
=54080					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3c5	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3c8					en = *	; remember here
>d3c3	03					.byte CL	;wh_CodeLength
>d3c8	a6					.byte $a6
>d3c9	6c 64 78 2e 7a 79		L1:	.text "ldx.zy"	;  name of word as a string, ending at wh_NameLastChar
>d3cf	06					.byte *-L1	;wh_NameLength	length of name
>d3d0	40 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3d3	08					.byte NN	;wh_Flags	dictionary flags
=54095					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3d4	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3d7					en = *	; remember here
>d3d2	03					.byte CL	;wh_CodeLength
>d3d7	b6					.byte $b6
>d3d8	6c 64 79			L1:	.text "ldy"	;  name of word as a string, ending at wh_NameLastChar
>d3db	03					.byte *-L1	;wh_NameLength	length of name
>d3dc	4f d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3df	08					.byte NN	;wh_Flags	dictionary flags
=54107					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3e0	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3e3					en = *	; remember here
>d3de	03					.byte CL	;wh_CodeLength
>d3e3	ac					.byte $ac
>d3e4	6c 64 79 2e 23			L1:	.text "ldy.#"	;  name of word as a string, ending at wh_NameLastChar
>d3e9	05					.byte *-L1	;wh_NameLength	length of name
>d3ea	5b d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3ec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3ed	08					.byte NN	;wh_Flags	dictionary flags
=54121					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3ee	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3f1					en = *	; remember here
>d3ec	03					.byte CL	;wh_CodeLength
>d3f1	a0					.byte $a0
>d3f2	6c 64 79 2e 78			L1:	.text "ldy.x"	;  name of word as a string, ending at wh_NameLastChar
>d3f7	05					.byte *-L1	;wh_NameLength	length of name
>d3f8	69 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3fa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3fb	08					.byte NN	;wh_Flags	dictionary flags
=54135					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3fc	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3ff					en = *	; remember here
>d3fa	03					.byte CL	;wh_CodeLength
>d3ff	bc					.byte $bc
>d400	6c 64 79 2e 7a			L1:	.text "ldy.z"	;  name of word as a string, ending at wh_NameLastChar
>d405	05					.byte *-L1	;wh_NameLength	length of name
>d406	77 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d408	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d409	08					.byte NN	;wh_Flags	dictionary flags
=54149					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d40a	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d40d					en = *	; remember here
>d408	03					.byte CL	;wh_CodeLength
>d40d	a4					.byte $a4
>d40e	6c 64 79 2e 7a 78		L1:	.text "ldy.zx"	;  name of word as a string, ending at wh_NameLastChar
>d414	06					.byte *-L1	;wh_NameLength	length of name
>d415	85 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d417	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d418	08					.byte NN	;wh_Flags	dictionary flags
=54164					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d419	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d41c					en = *	; remember here
>d417	03					.byte CL	;wh_CodeLength
>d41c	b4					.byte $b4
>d41d	6c 73 72			L1:	.text "lsr"	;  name of word as a string, ending at wh_NameLastChar
>d420	03					.byte *-L1	;wh_NameLength	length of name
>d421	94 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d423	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d424	08					.byte NN	;wh_Flags	dictionary flags
=54176					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d425	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d428					en = *	; remember here
>d423	03					.byte CL	;wh_CodeLength
>d428	4e					.byte $4e
>d429	6c 73 72 2e 61			L1:	.text "lsr.a"	;  name of word as a string, ending at wh_NameLastChar
>d42e	05					.byte *-L1	;wh_NameLength	length of name
>d42f	a0 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d431	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d432	08					.byte NN	;wh_Flags	dictionary flags
=54190					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d433	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d436					en = *	; remember here
>d431	03					.byte CL	;wh_CodeLength
>d436	4a					.byte $4a
>d437	6c 73 72 2e 78			L1:	.text "lsr.x"	;  name of word as a string, ending at wh_NameLastChar
>d43c	05					.byte *-L1	;wh_NameLength	length of name
>d43d	ae d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d43f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d440	08					.byte NN	;wh_Flags	dictionary flags
=54204					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d441	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d444					en = *	; remember here
>d43f	03					.byte CL	;wh_CodeLength
>d444	5e					.byte $5e
>d445	6c 73 72 2e 7a			L1:	.text "lsr.z"	;  name of word as a string, ending at wh_NameLastChar
>d44a	05					.byte *-L1	;wh_NameLength	length of name
>d44b	bc d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d44d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d44e	08					.byte NN	;wh_Flags	dictionary flags
=54218					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d44f	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d452					en = *	; remember here
>d44d	03					.byte CL	;wh_CodeLength
>d452	46					.byte $46
>d453	6c 73 72 2e 7a 78		L1:	.text "lsr.zx"	;  name of word as a string, ending at wh_NameLastChar
>d459	06					.byte *-L1	;wh_NameLength	length of name
>d45a	ca d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d45c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d45d	08					.byte NN	;wh_Flags	dictionary flags
=54233					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d45e	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d461					en = *	; remember here
>d45c	03					.byte CL	;wh_CodeLength
>d461	56					.byte $56
>d462	6e 6f 70			L1:	.text "nop"	;  name of word as a string, ending at wh_NameLastChar
>d465	03					.byte *-L1	;wh_NameLength	length of name
>d466	d9 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d468	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d469	08					.byte NN	;wh_Flags	dictionary flags
=54245					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d46a	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d46d					en = *	; remember here
>d468	03					.byte CL	;wh_CodeLength
>d46d	ea					.byte $ea
>d46e	6f 72 61			L1:	.text "ora"	;  name of word as a string, ending at wh_NameLastChar
>d471	03					.byte *-L1	;wh_NameLength	length of name
>d472	e5 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d474	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d475	08					.byte NN	;wh_Flags	dictionary flags
=54257					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d476	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d479					en = *	; remember here
>d474	03					.byte CL	;wh_CodeLength
>d479	0d					.byte $0d
>d47a	6f 72 61 2e 23			L1:	.text "ora.#"	;  name of word as a string, ending at wh_NameLastChar
>d47f	05					.byte *-L1	;wh_NameLength	length of name
>d480	f1 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d482	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d483	08					.byte NN	;wh_Flags	dictionary flags
=54271					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d484	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d487					en = *	; remember here
>d482	03					.byte CL	;wh_CodeLength
>d487	09					.byte $09
>d488	6f 72 61 2e 78			L1:	.text "ora.x"	;  name of word as a string, ending at wh_NameLastChar
>d48d	05					.byte *-L1	;wh_NameLength	length of name
>d48e	ff d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d490	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d491	08					.byte NN	;wh_Flags	dictionary flags
=54285					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d492	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d495					en = *	; remember here
>d490	03					.byte CL	;wh_CodeLength
>d495	1d					.byte $1d
>d496	6f 72 61 2e 79			L1:	.text "ora.y"	;  name of word as a string, ending at wh_NameLastChar
>d49b	05					.byte *-L1	;wh_NameLength	length of name
>d49c	0d d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d49e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d49f	08					.byte NN	;wh_Flags	dictionary flags
=54299					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4a0	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4a3					en = *	; remember here
>d49e	03					.byte CL	;wh_CodeLength
>d4a3	19					.byte $19
>d4a4	6f 72 61 2e 7a			L1:	.text "ora.z"	;  name of word as a string, ending at wh_NameLastChar
>d4a9	05					.byte *-L1	;wh_NameLength	length of name
>d4aa	1b d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4ac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4ad	08					.byte NN	;wh_Flags	dictionary flags
=54313					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4ae	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4b1					en = *	; remember here
>d4ac	03					.byte CL	;wh_CodeLength
>d4b1	05					.byte $05
>d4b2	6f 72 61 2e 7a 69 79		L1:	.text "ora.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d4b9	07					.byte *-L1	;wh_NameLength	length of name
>d4ba	29 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4bd	08					.byte NN	;wh_Flags	dictionary flags
=54329					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4be	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4c1					en = *	; remember here
>d4bc	03					.byte CL	;wh_CodeLength
>d4c1	11					.byte $11
>d4c2	6f 72 61 2e 7a 78		L1:	.text "ora.zx"	;  name of word as a string, ending at wh_NameLastChar
>d4c8	06					.byte *-L1	;wh_NameLength	length of name
>d4c9	39 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4cb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4cc	08					.byte NN	;wh_Flags	dictionary flags
=54344					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4cd	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4d0					en = *	; remember here
>d4cb	03					.byte CL	;wh_CodeLength
>d4d0	15					.byte $15
>d4d1	6f 72 61 2e 7a 78 69		L1:	.text "ora.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d4d8	07					.byte *-L1	;wh_NameLength	length of name
>d4d9	48 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4dc	08					.byte NN	;wh_Flags	dictionary flags
=54360					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4dd	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4e0					en = *	; remember here
>d4db	03					.byte CL	;wh_CodeLength
>d4e0	01					.byte $01
>d4e1	70 68 61			L1:	.text "pha"	;  name of word as a string, ending at wh_NameLastChar
>d4e4	03					.byte *-L1	;wh_NameLength	length of name
>d4e5	58 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4e8	08					.byte NN	;wh_Flags	dictionary flags
=54372					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4e9	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4ec					en = *	; remember here
>d4e7	03					.byte CL	;wh_CodeLength
>d4ec	48					.byte $48
>d4ed	70 68 70			L1:	.text "php"	;  name of word as a string, ending at wh_NameLastChar
>d4f0	03					.byte *-L1	;wh_NameLength	length of name
>d4f1	64 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4f4	08					.byte NN	;wh_Flags	dictionary flags
=54384					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4f5	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4f8					en = *	; remember here
>d4f3	03					.byte CL	;wh_CodeLength
>d4f8	08					.byte $08
>d4f9	70 6c 61			L1:	.text "pla"	;  name of word as a string, ending at wh_NameLastChar
>d4fc	03					.byte *-L1	;wh_NameLength	length of name
>d4fd	70 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4ff	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d500	08					.byte NN	;wh_Flags	dictionary flags
=54396					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d501	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d504					en = *	; remember here
>d4ff	03					.byte CL	;wh_CodeLength
>d504	68					.byte $68
>d505	70 6c 70			L1:	.text "plp"	;  name of word as a string, ending at wh_NameLastChar
>d508	03					.byte *-L1	;wh_NameLength	length of name
>d509	7c d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d50b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d50c	08					.byte NN	;wh_Flags	dictionary flags
=54408					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d50d	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d510					en = *	; remember here
>d50b	03					.byte CL	;wh_CodeLength
>d510	28					.byte $28
>d511	72 6f 6c			L1:	.text "rol"	;  name of word as a string, ending at wh_NameLastChar
>d514	03					.byte *-L1	;wh_NameLength	length of name
>d515	88 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d517	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d518	08					.byte NN	;wh_Flags	dictionary flags
=54420					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d519	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d51c					en = *	; remember here
>d517	03					.byte CL	;wh_CodeLength
>d51c	2e					.byte $2e
>d51d	72 6f 6c 2e 61			L1:	.text "rol.a"	;  name of word as a string, ending at wh_NameLastChar
>d522	05					.byte *-L1	;wh_NameLength	length of name
>d523	94 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d525	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d526	08					.byte NN	;wh_Flags	dictionary flags
=54434					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d527	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d52a					en = *	; remember here
>d525	03					.byte CL	;wh_CodeLength
>d52a	2a					.byte $2a
>d52b	72 6f 6c 2e 78			L1:	.text "rol.x"	;  name of word as a string, ending at wh_NameLastChar
>d530	05					.byte *-L1	;wh_NameLength	length of name
>d531	a2 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d533	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d534	08					.byte NN	;wh_Flags	dictionary flags
=54448					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d535	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d538					en = *	; remember here
>d533	03					.byte CL	;wh_CodeLength
>d538	3e					.byte $3e
>d539	72 6f 6c 2e 7a			L1:	.text "rol.z"	;  name of word as a string, ending at wh_NameLastChar
>d53e	05					.byte *-L1	;wh_NameLength	length of name
>d53f	b0 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d541	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d542	08					.byte NN	;wh_Flags	dictionary flags
=54462					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d543	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d546					en = *	; remember here
>d541	03					.byte CL	;wh_CodeLength
>d546	26					.byte $26
>d547	72 6f 6c 2e 7a 78		L1:	.text "rol.zx"	;  name of word as a string, ending at wh_NameLastChar
>d54d	06					.byte *-L1	;wh_NameLength	length of name
>d54e	be d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d550	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d551	08					.byte NN	;wh_Flags	dictionary flags
=54477					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d552	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d555					en = *	; remember here
>d550	03					.byte CL	;wh_CodeLength
>d555	36					.byte $36
>d556	72 6f 72			L1:	.text "ror"	;  name of word as a string, ending at wh_NameLastChar
>d559	03					.byte *-L1	;wh_NameLength	length of name
>d55a	cd d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d55c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d55d	08					.byte NN	;wh_Flags	dictionary flags
=54489					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d55e	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d561					en = *	; remember here
>d55c	03					.byte CL	;wh_CodeLength
>d561	6e					.byte $6e
>d562	72 6f 72 2e 61			L1:	.text "ror.a"	;  name of word as a string, ending at wh_NameLastChar
>d567	05					.byte *-L1	;wh_NameLength	length of name
>d568	d9 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d56a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d56b	08					.byte NN	;wh_Flags	dictionary flags
=54503					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d56c	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d56f					en = *	; remember here
>d56a	03					.byte CL	;wh_CodeLength
>d56f	6a					.byte $6a
>d570	72 6f 72 2e 78			L1:	.text "ror.x"	;  name of word as a string, ending at wh_NameLastChar
>d575	05					.byte *-L1	;wh_NameLength	length of name
>d576	e7 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d578	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d579	08					.byte NN	;wh_Flags	dictionary flags
=54517					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d57a	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d57d					en = *	; remember here
>d578	03					.byte CL	;wh_CodeLength
>d57d	7e					.byte $7e
>d57e	72 6f 72 2e 7a			L1:	.text "ror.z"	;  name of word as a string, ending at wh_NameLastChar
>d583	05					.byte *-L1	;wh_NameLength	length of name
>d584	f5 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d586	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d587	08					.byte NN	;wh_Flags	dictionary flags
=54531					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d588	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d58b					en = *	; remember here
>d586	03					.byte CL	;wh_CodeLength
>d58b	66					.byte $66
>d58c	72 6f 72 2e 7a 78		L1:	.text "ror.zx"	;  name of word as a string, ending at wh_NameLastChar
>d592	06					.byte *-L1	;wh_NameLength	length of name
>d593	03 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d595	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d596	08					.byte NN	;wh_Flags	dictionary flags
=54546					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d597	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d59a					en = *	; remember here
>d595	03					.byte CL	;wh_CodeLength
>d59a	76					.byte $76
>d59b	72 74 69			L1:	.text "rti"	;  name of word as a string, ending at wh_NameLastChar
>d59e	03					.byte *-L1	;wh_NameLength	length of name
>d59f	12 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5a1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5a2	08					.byte NN	;wh_Flags	dictionary flags
=54558					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5a3	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5a6					en = *	; remember here
>d5a1	03					.byte CL	;wh_CodeLength
>d5a6	40					.byte $40
>d5a7	72 74 73			L1:	.text "rts"	;  name of word as a string, ending at wh_NameLastChar
>d5aa	03					.byte *-L1	;wh_NameLength	length of name
>d5ab	1e d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5ad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5ae	08					.byte NN	;wh_Flags	dictionary flags
=54570					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5af	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5b2					en = *	; remember here
>d5ad	03					.byte CL	;wh_CodeLength
>d5b2	60					.byte $60
>d5b3	73 62 63			L1:	.text "sbc"	;  name of word as a string, ending at wh_NameLastChar
>d5b6	03					.byte *-L1	;wh_NameLength	length of name
>d5b7	2a d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5b9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5ba	08					.byte NN	;wh_Flags	dictionary flags
=54582					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5bb	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5be					en = *	; remember here
>d5b9	03					.byte CL	;wh_CodeLength
>d5be	ed					.byte $ed
>d5bf	73 62 63 2e 23			L1:	.text "sbc.#"	;  name of word as a string, ending at wh_NameLastChar
>d5c4	05					.byte *-L1	;wh_NameLength	length of name
>d5c5	36 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5c8	08					.byte NN	;wh_Flags	dictionary flags
=54596					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5c9	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5cc					en = *	; remember here
>d5c7	03					.byte CL	;wh_CodeLength
>d5cc	e9					.byte $e9
>d5cd	73 62 63 2e 78			L1:	.text "sbc.x"	;  name of word as a string, ending at wh_NameLastChar
>d5d2	05					.byte *-L1	;wh_NameLength	length of name
>d5d3	44 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5d5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5d6	08					.byte NN	;wh_Flags	dictionary flags
=54610					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5d7	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5da					en = *	; remember here
>d5d5	03					.byte CL	;wh_CodeLength
>d5da	fd					.byte $fd
>d5db	73 62 63 2e 79			L1:	.text "sbc.y"	;  name of word as a string, ending at wh_NameLastChar
>d5e0	05					.byte *-L1	;wh_NameLength	length of name
>d5e1	52 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5e3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5e4	08					.byte NN	;wh_Flags	dictionary flags
=54624					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5e5	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5e8					en = *	; remember here
>d5e3	03					.byte CL	;wh_CodeLength
>d5e8	f9					.byte $f9
>d5e9	73 62 63 2e 7a			L1:	.text "sbc.z"	;  name of word as a string, ending at wh_NameLastChar
>d5ee	05					.byte *-L1	;wh_NameLength	length of name
>d5ef	60 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5f1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5f2	08					.byte NN	;wh_Flags	dictionary flags
=54638					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5f3	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5f6					en = *	; remember here
>d5f1	03					.byte CL	;wh_CodeLength
>d5f6	e5					.byte $e5
>d5f7	73 62 63 2e 7a 69 79		L1:	.text "sbc.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d5fe	07					.byte *-L1	;wh_NameLength	length of name
>d5ff	6e d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d601	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d602	08					.byte NN	;wh_Flags	dictionary flags
=54654					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d603	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d606					en = *	; remember here
>d601	03					.byte CL	;wh_CodeLength
>d606	f1					.byte $f1
>d607	73 62 63 2e 7a 78		L1:	.text "sbc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d60d	06					.byte *-L1	;wh_NameLength	length of name
>d60e	7e d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d610	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d611	08					.byte NN	;wh_Flags	dictionary flags
=54669					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d612	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d615					en = *	; remember here
>d610	03					.byte CL	;wh_CodeLength
>d615	f5					.byte $f5
>d616	73 62 63 2e 7a 78 69		L1:	.text "sbc.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d61d	07					.byte *-L1	;wh_NameLength	length of name
>d61e	8d d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d620	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d621	08					.byte NN	;wh_Flags	dictionary flags
=54685					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d622	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d625					en = *	; remember here
>d620	03					.byte CL	;wh_CodeLength
>d625	e1					.byte $e1
>d626	73 65 63			L1:	.text "sec"	;  name of word as a string, ending at wh_NameLastChar
>d629	03					.byte *-L1	;wh_NameLength	length of name
>d62a	9d d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d62c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d62d	08					.byte NN	;wh_Flags	dictionary flags
=54697					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d62e	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d631					en = *	; remember here
>d62c	03					.byte CL	;wh_CodeLength
>d631	38					.byte $38
>d632	73 65 64			L1:	.text "sed"	;  name of word as a string, ending at wh_NameLastChar
>d635	03					.byte *-L1	;wh_NameLength	length of name
>d636	a9 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d638	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d639	08					.byte NN	;wh_Flags	dictionary flags
=54709					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d63a	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d63d					en = *	; remember here
>d638	03					.byte CL	;wh_CodeLength
>d63d	f8					.byte $f8
>d63e	73 65 69			L1:	.text "sei"	;  name of word as a string, ending at wh_NameLastChar
>d641	03					.byte *-L1	;wh_NameLength	length of name
>d642	b5 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d644	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d645	08					.byte NN	;wh_Flags	dictionary flags
=54721					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d646	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d649					en = *	; remember here
>d644	03					.byte CL	;wh_CodeLength
>d649	78					.byte $78
>d64a	73 74 61			L1:	.text "sta"	;  name of word as a string, ending at wh_NameLastChar
>d64d	03					.byte *-L1	;wh_NameLength	length of name
>d64e	c1 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d650	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d651	08					.byte NN	;wh_Flags	dictionary flags
=54733					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d652	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d655					en = *	; remember here
>d650	03					.byte CL	;wh_CodeLength
>d655	8d					.byte $8d
>d656	73 74 61 2e 78			L1:	.text "sta.x"	;  name of word as a string, ending at wh_NameLastChar
>d65b	05					.byte *-L1	;wh_NameLength	length of name
>d65c	cd d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d65e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d65f	08					.byte NN	;wh_Flags	dictionary flags
=54747					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d660	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d663					en = *	; remember here
>d65e	03					.byte CL	;wh_CodeLength
>d663	9d					.byte $9d
>d664	73 74 61 2e 79			L1:	.text "sta.y"	;  name of word as a string, ending at wh_NameLastChar
>d669	05					.byte *-L1	;wh_NameLength	length of name
>d66a	db d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d66c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d66d	08					.byte NN	;wh_Flags	dictionary flags
=54761					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d66e	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d671					en = *	; remember here
>d66c	03					.byte CL	;wh_CodeLength
>d671	99					.byte $99
>d672	73 74 61 2e 7a			L1:	.text "sta.z"	;  name of word as a string, ending at wh_NameLastChar
>d677	05					.byte *-L1	;wh_NameLength	length of name
>d678	e9 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d67a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d67b	08					.byte NN	;wh_Flags	dictionary flags
=54775					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d67c	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d67f					en = *	; remember here
>d67a	03					.byte CL	;wh_CodeLength
>d67f	85					.byte $85
>d680	73 74 61 2e 7a 69 79		L1:	.text "sta.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d687	07					.byte *-L1	;wh_NameLength	length of name
>d688	f7 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d68a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d68b	08					.byte NN	;wh_Flags	dictionary flags
=54791					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d68c	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d68f					en = *	; remember here
>d68a	03					.byte CL	;wh_CodeLength
>d68f	91					.byte $91
>d690	73 74 61 2e 7a 78		L1:	.text "sta.zx"	;  name of word as a string, ending at wh_NameLastChar
>d696	06					.byte *-L1	;wh_NameLength	length of name
>d697	07 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d699	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d69a	08					.byte NN	;wh_Flags	dictionary flags
=54806					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d69b	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d69e					en = *	; remember here
>d699	03					.byte CL	;wh_CodeLength
>d69e	95					.byte $95
>d69f	73 74 61 2e 7a 78 69		L1:	.text "sta.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d6a6	07					.byte *-L1	;wh_NameLength	length of name
>d6a7	16 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6a9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6aa	08					.byte NN	;wh_Flags	dictionary flags
=54822					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6ab	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6ae					en = *	; remember here
>d6a9	03					.byte CL	;wh_CodeLength
>d6ae	81					.byte $81
>d6af	73 74 78			L1:	.text "stx"	;  name of word as a string, ending at wh_NameLastChar
>d6b2	03					.byte *-L1	;wh_NameLength	length of name
>d6b3	26 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6b5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6b6	08					.byte NN	;wh_Flags	dictionary flags
=54834					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6b7	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6ba					en = *	; remember here
>d6b5	03					.byte CL	;wh_CodeLength
>d6ba	8e					.byte $8e
>d6bb	73 74 78 2e 7a			L1:	.text "stx.z"	;  name of word as a string, ending at wh_NameLastChar
>d6c0	05					.byte *-L1	;wh_NameLength	length of name
>d6c1	32 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6c4	08					.byte NN	;wh_Flags	dictionary flags
=54848					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6c5	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6c8					en = *	; remember here
>d6c3	03					.byte CL	;wh_CodeLength
>d6c8	86					.byte $86
>d6c9	73 74 78 2e 7a 79		L1:	.text "stx.zy"	;  name of word as a string, ending at wh_NameLastChar
>d6cf	06					.byte *-L1	;wh_NameLength	length of name
>d6d0	40 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6d3	08					.byte NN	;wh_Flags	dictionary flags
=54863					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6d4	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6d7					en = *	; remember here
>d6d2	03					.byte CL	;wh_CodeLength
>d6d7	96					.byte $96
>d6d8	73 74 79			L1:	.text "sty"	;  name of word as a string, ending at wh_NameLastChar
>d6db	03					.byte *-L1	;wh_NameLength	length of name
>d6dc	4f d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6df	08					.byte NN	;wh_Flags	dictionary flags
=54875					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6e0	20 1d cf	jsr $cf1d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6e3					en = *	; remember here
>d6de	03					.byte CL	;wh_CodeLength
>d6e3	8c					.byte $8c
>d6e4	73 74 79 2e 7a			L1:	.text "sty.z"	;  name of word as a string, ending at wh_NameLastChar
>d6e9	05					.byte *-L1	;wh_NameLength	length of name
>d6ea	5b d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6ec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6ed	08					.byte NN	;wh_Flags	dictionary flags
=54889					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6ee	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6f1					en = *	; remember here
>d6ec	03					.byte CL	;wh_CodeLength
>d6f1	84					.byte $84
>d6f2	73 74 79 2e 7a 78		L1:	.text "sty.zx"	;  name of word as a string, ending at wh_NameLastChar
>d6f8	06					.byte *-L1	;wh_NameLength	length of name
>d6f9	69 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6fb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6fc	08					.byte NN	;wh_Flags	dictionary flags
=54904					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6fd	20 07 cf	jsr $cf07		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d700					en = *	; remember here
>d6fb	03					.byte CL	;wh_CodeLength
>d700	94					.byte $94
>d701	74 61 78			L1:	.text "tax"	;  name of word as a string, ending at wh_NameLastChar
>d704	03					.byte *-L1	;wh_NameLength	length of name
>d705	78 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d707	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d708	08					.byte NN	;wh_Flags	dictionary flags
=54916					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d709	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d70c					en = *	; remember here
>d707	03					.byte CL	;wh_CodeLength
>d70c	aa					.byte $aa
>d70d	74 61 79			L1:	.text "tay"	;  name of word as a string, ending at wh_NameLastChar
>d710	03					.byte *-L1	;wh_NameLength	length of name
>d711	84 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d713	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d714	08					.byte NN	;wh_Flags	dictionary flags
=54928					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d715	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d718					en = *	; remember here
>d713	03					.byte CL	;wh_CodeLength
>d718	a8					.byte $a8
>d719	74 73 78			L1:	.text "tsx"	;  name of word as a string, ending at wh_NameLastChar
>d71c	03					.byte *-L1	;wh_NameLength	length of name
>d71d	90 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d71f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d720	08					.byte NN	;wh_Flags	dictionary flags
=54940					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d721	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d724					en = *	; remember here
>d71f	03					.byte CL	;wh_CodeLength
>d724	ba					.byte $BA
>d725	74 78 61			L1:	.text "txa"	;  name of word as a string, ending at wh_NameLastChar
>d728	03					.byte *-L1	;wh_NameLength	length of name
>d729	9c d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d72b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d72c	08					.byte NN	;wh_Flags	dictionary flags
=54952					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d72d	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d730					en = *	; remember here
>d72b	03					.byte CL	;wh_CodeLength
>d730	8a					.byte $8a
>d731	74 78 73			L1:	.text "txs"	;  name of word as a string, ending at wh_NameLastChar
>d734	03					.byte *-L1	;wh_NameLength	length of name
>d735	a8 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d737	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d738	08					.byte NN	;wh_Flags	dictionary flags
=54964					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d739	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d73c					en = *	; remember here
>d737	03					.byte CL	;wh_CodeLength
>d73c	9a					.byte $9a
>d73d	74 79 61			L1:	.text "tya"	;  name of word as a string, ending at wh_NameLastChar
>d740	03					.byte *-L1	;wh_NameLength	length of name
>d741	b4 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d743	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d744	08					.byte NN	;wh_Flags	dictionary flags
=54976					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d745	20 26 cf	jsr $cf26		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d748					en = *	; remember here
>d743	03					.byte CL	;wh_CodeLength
>d748	98					.byte $98
=54976					asm_table = WordListLink ; head of instruction word list for disassembler
>d749	70 75 73 68 2d 61		L1:	.text "push-a"	;  name of word as a string, ending at wh_NameLastChar
>d74f	06					.byte *-L1	;wh_NameLength	length of name
>d750	c0 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d752	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d753	0c					.byte IM+NN	;wh_Flags	dictionary flags
=54991					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d754	a9 35		lda #$35			lda #<PushZA
.d756	a0 b7		ldy #$b7			ldy #>PushZA
.d758	4c 43 cc	jmp $cc43			jmp Jsr_Comma_YA
=7					CL	.var *-(WordListLink+wh_Xt)
=$d75b					en = *	; remember here
>d752	07					.byte CL	;wh_CodeLength
>d75b	2d 2d 3e			L1:	.text "-->"	;  name of word as a string, ending at wh_NameLastChar
>d75e	03					.byte *-L1	;wh_NameLength	length of name
>d75f	cf d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d761	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d762	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55006					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d763	4c 27 c9	jmp $c927			jmp Here
=3					CL	.var *-(WordListLink+wh_Xt)
=$d766					en = *	; remember here
>d761	03					.byte CL	;wh_CodeLength
>d766	3c 6a				L1:	.text "<j"	;  name of word as a string, ending at wh_NameLastChar
>d768	02					.byte *-L1	;wh_NameLength	length of name
>d769	de d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d76b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d76c	04					.byte IM	;wh_Flags	dictionary flags
=55016					WordListLink ::= *-wh_xt ; remember the nt of this word for later
=0					CL	.var *-(WordListLink+wh_Xt)
=$d76d					en = *	; remember here
>d76b	00					.byte CL	;wh_CodeLength
.d76d	60		rts				rts
>d76e	3c 62				L1:	.text "<b"	;  name of word as a string, ending at wh_NameLastChar
>d770	02					.byte *-L1	;wh_NameLength	length of name
>d771	e8 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d773	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d774	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55024					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d775					asm_back_branch:
.d775	20 27 c9	jsr $c927			jsr Here		; ( addr-l addr-h )
.d778	20 c8 ca	jsr $cac8			jsr Minus		; ( offset )
.d77b	a9 fe		lda #$fe			lda #$fe
.d77d	4c 4a c9	jmp $c94a			jmp Minus_A
=11					CL	.var *-(WordListLink+wh_Xt)
=$d780					en = *	; remember here
>d773	0b					.byte CL	;wh_CodeLength
>d780	44 69 73 41 73 6d		L1:	.text "DisAsm"	;  name of word as a string, ending at wh_NameLastChar
>d786	06					.byte *-L1	;wh_NameLength	length of name
>d787	f0 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d789	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d78a	08					.byte NN	;wh_Flags	dictionary flags
=55046					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d78b					DisAsm:
.d78b	20 5d c3	jsr $c35d			jsr Bounds		; ( addr_end addr )
.d78e					_instr:
.d78e	20 7a b3	jsr $b37a			jsr underflow_2
.d791	b5 24		lda $24,x			lda DStack+0,x		; addr >= addr_end?
.d793	d5 26		cmp $26,x			cmp DStack+2,x
.d795	b5 25		lda $25,x			lda DStack+1,x
.d797	f5 27		sbc $27,x			sbc DStack+3,x
.d799	90 03		bcc $d79e			bcc +
.d79b	4c 26 c4	jmp $c426			jmp Two_drop		; discard parms & return
.d79e					+
.d79e	20 7d aa	jsr $aa7d			jsr CR			; new line
.d7a1	20 65 ce	jsr $ce65			jsr Dup			; print address
.d7a4	20 12 a8	jsr $a812			jsr Dot_Hex
.d7a7	20 e0 cc	jsr $cce0			jsr Space
.d7aa	a1 24		lda ($24,x)			lda (DStack+0,x)	; print opcode byte
.d7ac	20 ed d8	jsr $d8ed			jsr _print_a
.d7af	a1 24		lda ($24,x)			lda (DStack+0,x)	; save opcode
.d7b1	85 16		sta $16				sta tmp2
.d7b3	20 5b c9	jsr $c95b			jsr One_plus
.d7b6	a9 c0		lda #$c0			lda #<asm_table		; for each asm opcode word
.d7b8	a0 d6		ldy #$d6			ldy #>asm_table
.d7ba	85 14		sta $14				sta tmp1+0
.d7bc	84 15		sty $15				sty tmp1+1
.d7be	d0 0f		bne $d7cf			bne _WTest
.d7c0	a0 82		ldy #$82	_WNext:		ldy #wh_WordListLink+1	;   next entry
.d7c2	b1 14		lda ($14),y			lda (tmp1),y
.d7c4	f0 2e		beq $d7f4			beq _unknown
.d7c6	48		pha				pha
.d7c7	88		dey				dey
.d7c8	b1 14		lda ($14),y			lda (tmp1),y
.d7ca	85 14		sta $14				sta tmp1+0
.d7cc	68		pla				pla
.d7cd	85 15		sta $15				sta tmp1+1
.d7cf	a0 88		ldy #$88	_WTest:		ldy #wh_Xt+3		;   opcode match?
.d7d1	b1 14		lda ($14),y			lda (tmp1),y
.d7d3	c5 16		cmp $16				cmp tmp2
.d7d5	d0 e9		bne $d7c0			bne _WNext
.d7d7	a5 16		lda $16				lda tmp2		; save opcode
.d7d9	48		pha				pha
.d7da	a5 15		lda $15				lda tmp1+1		; save its nt
.d7dc	48		pha				pha
.d7dd	a5 14		lda $14				lda tmp1+0
.d7df	48		pha				pha
.d7e0	a0 86		ldy #$86			ldy #wh_xt+1		; get processor routine addr lo byte from JSR
.d7e2	b1 14		lda ($14),y			lda (tmp1),y
.d7e4	c9 26		cmp #$26			cmp #<asm_0		; goto disasm processor
.d7e6	f0 17		beq $d7ff			beq _c0
.d7e8	c9 07		cmp #$07			cmp #<asm_1
.d7ea	f0 49		beq $d835			beq _c1
.d7ec	c9 1d		cmp #$1d			cmp #<asm_2
.d7ee	f0 61		beq $d851			beq _c2
.d7f0	c9 e7		cmp #$e7			cmp #<asm_r
.d7f2	f0 18		beq $d80c			beq _cr
.d7f4					_unknown:
.d7f4	20 ce d8	jsr $d8ce			jsr _tab		; to source area
.d7f7	a9 3f		lda #$3f			lda #'?'
.d7f9	20 d3 cc	jsr $ccd3			jsr Emit_A
.d7fc	4c 8e d7	jmp $d78e			jmp _instr
.d7ff					_c0:
.d7ff	20 ce d8	jsr $d8ce			jsr _tab		; to source area
.d802	68		pla				pla			; get opcode word nt
.d803	a8		tay				tay
.d804	68		pla				pla
.d805	20 d3 d8	jsr $d8d3			jsr _print_opcode
.d808	68		pla				pla			; discard opcode
.d809	4c 8e d7	jmp $d78e			jmp _instr
.d80c					_cr:
.d80c	20 e4 d8	jsr $d8e4			jsr _get_byte		; get displacement byte
.d80f	a0 00		ldy #$00			ldy #0			; sign extend displacement
.d811	09 00		ora #$00			ora #0
.d813	10 01		bpl $d816			bpl +
.d815	88		dey				dey
.d816	20 f3 b6	jsr $b6f3	+		jsr PushYA
.d819	20 65 ce	jsr $ce65			jsr Dup			; save for TypeSymbol
.d81c	20 ce d8	jsr $d8ce			jsr _tab		; to source area
.d81f	20 14 cb	jsr $cb14			jsr U_Dot		; print dest address
.d822	68		pla				pla			; get opcode word nt
.d823	a8		tay				tay
.d824	68		pla				pla
.d825	20 d3 d8	jsr $d8d3			jsr _print_opcode
.d828	68		pla				pla			; discard opcode
.d829	20 3c ce	jsr $ce3c			jsr Over		; calc dest addr
.d82c	20 af ca	jsr $caaf			jsr Plus
.d82f	20 9e 81	jsr $819e			jsr TypeSymbol		; print dest addr symbolic
.d832	4c 8e d7	jmp $d78e			jmp _instr
.d835					_c1:
.d835	20 e4 d8	jsr $d8e4			jsr _get_byte		; get operand
.d838	20 35 b7	jsr $b735			jsr PushZA
.d83b	20 ce d8	jsr $d8ce			jsr _tab		; to source area
.d83e	20 65 ce	jsr $ce65			jsr Dup
.d841	20 14 cb	jsr $cb14			jsr U_Dot		; print operand
.d844	68		pla				pla			; get opcode word nt
.d845	a8		tay				tay
.d846	68		pla				pla
.d847	20 d3 d8	jsr $d8d3			jsr _print_opcode
.d84a	68		pla				pla			; discard opcode
.d84b	20 9e 81	jsr $819e			jsr TypeSymbol
.d84e	4c 8e d7	jmp $d78e			jmp _instr
.d851					_c2:
.d851	20 e4 d8	jsr $d8e4			jsr _get_byte		; get operand lo byte
.d854	48		pha				pha
.d855	20 e4 d8	jsr $d8e4			jsr _get_byte		; get operand hi byte
.d858	ca		dex				dex			; push operand bytes
.d859	ca		dex				dex
.d85a	95 25		sta $25,x			sta DStack+1,x
.d85c	68		pla				pla
.d85d	95 24		sta $24,x			sta DStack+0,x
.d85f	20 ce d8	jsr $d8ce			jsr _tab		; to source area
.d862	20 65 ce	jsr $ce65			jsr Dup
.d865	20 14 cb	jsr $cb14			jsr U_Dot		; print operand
.d868	68		pla				pla			; AY= opcode word nt
.d869	a8		tay				tay
.d86a	68		pla				pla
.d86b	20 d3 d8	jsr $d8d3			jsr _print_opcode
.d86e	20 65 ce	jsr $ce65			jsr Dup
.d871	20 9e 81	jsr $819e			jsr TypeSymbol		; print operand as symbol
.d874	68		pla				pla			; get opcode
.d875	c9 20		cmp #$20			cmp #$20		;  JSR
.d877	f0 09		beq $d882			beq _jsr
.d879	e8		inx		_jdrop:		inx			; Drop operand
.d87a	e8		inx				inx
.d87b	4c 8e d7	jmp $d78e			jmp _instr		; ( addr_end addr )
.d87e	e8		inx		_2drop:		inx			; Drop jsr_nt
.d87f	e8		inx				inx
.d880	d0 f7		bne $d879			bne _jdrop
.d882					_jsr:
.d882	20 3b b3	jsr $b33b			jsr PopYA
.d885	c9 14		cmp #$14			cmp #<sliteral_runtime	; string literal?
.d887	d0 42		bne $d8cb			bne _not_sliteral
.d889	c0 b8		cpy #$b8			cpy #>sliteral_runtime
.d88b	d0 3e		bne $d8cb			bne _not_sliteral
.d88d	20 7d aa	jsr $aa7d			jsr CR
.d890	20 65 ce	jsr $ce65			jsr Dup			; ( addr_end addr addr )
.d893	20 12 a8	jsr $a812			jsr Dot_Hex
.d896	20 e0 cc	jsr $cce0			jsr Space
.d899	20 65 ce	jsr $ce65			jsr Dup			; ( addr_end ? addr )
.d89c	20 e4 d8	jsr $d8e4			jsr _get_byte		; get JMP opcode
.d89f	20 e4 d8	jsr $d8e4			jsr _get_byte		; get JMP addr lo byte
.d8a2	95 26		sta $26,x			sta DStack+2,x
.d8a4	20 e4 d8	jsr $d8e4			jsr _get_byte		; get JMP addr hi byte
.d8a7	95 27		sta $27,x			sta DStack+3,x		; ( addr_end string_end addr )
.d8a9	20 7d aa	jsr $aa7d			jsr CR
.d8ac	20 65 ce	jsr $ce65			jsr Dup
.d8af	20 12 a8	jsr $a812			jsr Dot_Hex
.d8b2	20 e0 cc	jsr $cce0			jsr Space
.d8b5	b5 24		lda $24,x	_slit_11:	lda DStack+0,x		; done with string data?
.d8b7	d5 26		cmp $26,x			cmp DStack+2,x
.d8b9	b5 25		lda $25,x			lda DStack+1,x
.d8bb	f5 27		sbc $27,x			sbc DStack+3,x
.d8bd	b0 06		bcs $d8c5			bcs _slit_19
.d8bf	20 e4 d8	jsr $d8e4			jsr _get_byte
.d8c2	4c b5 d8	jmp $d8b5			jmp _slit_11
.d8c5					_slit_19:
.d8c5	20 80 c8	jsr $c880			jsr Nip			; ( addr_end addr )
.d8c8	4c 8e d7	jmp $d78e			jmp _instr
.d8cb					_not_sliteral:
.d8cb	4c 8e d7	jmp $d78e			jmp _instr
.d8ce					_tab:
.d8ce	a9 09		lda #$09			lda #9
.d8d0	4c d3 cc	jmp $ccd3			jmp Emit_A
.d8d3					_print_opcode:
.d8d3	20 73 ce	jsr $ce73			jsr PushAY		; save opcode word nt
.d8d6	20 e0 cc	jsr $cce0			jsr Space
.d8d9	20 33 bd	jsr $bd33			jsr Name_To_String	; get name string
.d8dc	4c ed cc	jmp $cced			jmp Type		; type word name
.d8df					_get_byte_silent:
.d8df	a1 24		lda ($24,x)			lda (DStack+0,x)
.d8e1	4c 5b c9	jmp $c95b			jmp One_plus
.d8e4					_get_byte:
.d8e4	20 df d8	jsr $d8df			jsr _get_byte_silent
.d8e7	48		pha				pha
.d8e8	20 ed d8	jsr $d8ed			jsr _print_a
.d8eb	68		pla				pla
.d8ec	60		rts				rts
.d8ed					_print_a:
.d8ed	20 35 b7	jsr $b735			jsr PushZA
.d8f0	20 f0 a7	jsr $a7f0			jsr C_Dot_Hex
.d8f3	4c e0 cc	jmp $cce0			jmp Space
=55046					assembler_dictionary_start = WordListLink ; END of ASSEMBLER-WORDLIST
=0					WordListLink .var 0
>d8f6	6c				L1:	.text "l"	;  name of word as a string, ending at wh_NameLastChar
>d8f7	01					.byte *-L1	;wh_NameLength	length of name
>d8f8	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d8fa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d8fb	08					.byte NN	;wh_Flags	dictionary flags
=55415					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d8fc					Editor_l:
.d8fc	20 15 a2	jsr $a215			jsr Scr
.d8ff	20 cf cd	jsr $cdcf			jsr Fetch
.d902	20 c4 a2	jsr $a2c4			jsr Block	; Get the current screen contents.
.d905	20 7d aa	jsr $aa7d			jsr CR
.d908	20 14 b8	jsr $b814			jsr SLiteral_Runtime
.d90b	4c 16 d9	jmp $d916			  jmp +				; for SLiteral_Runtime
>d90e	53 63 72 65 65 6e 20 23				  .text "Screen #"		; for SLiteral_Runtime
.d916					+
.d916	20 ed cc	jsr $cced			jsr Type
.d919	20 15 a2	jsr $a215			jsr Scr		; print screen number
.d91c	20 cf cd	jsr $cdcf			jsr Fetch
.d91f	a9 04		lda #$04			lda #4		;    in 4 positions
.d921	20 48 cb	jsr $cb48			jsr U_Dot_R_A
.d924	a9 00		lda #$00			lda #0			; line #
.d926					_line_loop:
.d926	48		pha				pha
.d927	20 7d aa	jsr $aa7d			jsr CR
.d92a	68		pla				pla		; Print the line number
.d92b	48		pha				pha
.d92c	20 35 b7	jsr $b735			jsr PushZA
.d92f	a9 02		lda #$02			lda #2		;   in 2 positions
.d931	20 48 cb	jsr $cb48			jsr U_Dot_R_A
.d934	20 e0 cc	jsr $cce0			jsr Space
.d937	20 65 ce	jsr $ce65			jsr Dup		; Print one line using the address on the stack.
.d93a	a9 40		lda #$40			lda #64
.d93c	20 35 b7	jsr $b735			jsr PushZA
.d93f	20 ed cc	jsr $cced			jsr Type
.d942	a9 40		lda #$40			lda #64		; move address to the next line.
.d944	20 0a c9	jsr $c90a			jsr Plus_A
.d947	68		pla				pla		; Increment the line number
.d948	18		clc				clc
.d949	69 01		adc #$01			adc #1
.d94b	c9 10		cmp #$10			cmp #16		; See if we are done.
.d94d	d0 d7		bne $d926			bne _line_loop
.d94f	e8		inx				inx		; Drop the address
.d950	e8		inx				inx
.d951	4c 7d aa	jmp $aa7d			jmp CR
=88					CL	.var *-(WordListLink+wh_Xt)
=$d954					en = *	; remember here
>d8fa	58					.byte CL	;wh_CodeLength
.d954					Editor_Screen_Helper:
.d954	20 65 ce	jsr $ce65			jsr Dup
.d957	20 15 a2	jsr $a215			jsr Scr
.d95a	20 b2 cd	jsr $cdb2			jsr Store
.d95d	4c 2e a3	jmp $a32e			jmp Buffer
>d960	65 6e 74 65 72 2d 73 63		L1:	.text "enter-screen"	;  name of word as a string, ending at wh_NameLastChar
>d968	72 65 65 6e
>d96c	0c					.byte *-L1	;wh_NameLength	length of name
>d96d	77 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d96f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d970	08					.byte NN	;wh_Flags	dictionary flags
=55532					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d971					Editor_Enter_Screen:
.d971	20 54 d9	jsr $d954			jsr Editor_Screen_Helper
.d974	a9 00		lda #$00			lda #0			; Overwrite the lines one at a time.
.d976	95 24		sta $24,x	_loop:		sta DStack+0,x
.d978	20 35 b7	jsr $b735			jsr PushZA		; Put the current line number on the stack.
.d97b	20 df d9	jsr $d9df			jsr Editor_o		; prompt for overwrite.
.d97e	f6 24		inc $24,x			inc DStack+0,x		; Move on to the next line.
.d980	b5 24		lda $24,x			lda DStack+0,x
.d982	c9 10		cmp #$10			cmp #16
.d984	90 f0		bcc $d976			bcc _loop
.d986	e8		inx				inx			; Drop work area
.d987	e8		inx				inx
=23					CL	.var *-(WordListLink+wh_Xt)
=$d988					en = *	; remember here
>d96f	17					.byte CL	;wh_CodeLength
.d988	60		rts				rts
>d989	6c 69 6e 65			L1:	.text "line"	;  name of word as a string, ending at wh_NameLastChar
>d98d	04					.byte *-L1	;wh_NameLength	length of name
>d98e	ec d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d990	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d991	08					.byte NN	;wh_Flags	dictionary flags
=55565					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d992					Editor_line:
.d992	a9 06		lda #$06			lda #6		; Multiply the TOS by 64 (chars/line) to compute offset.
.d994	20 4e ca	jsr $ca4e			jsr LShift_A	; *64 is same as left shift 6 times.
.d997	20 15 a2	jsr $a215			jsr Scr
.d99a	20 cf cd	jsr $cdcf			jsr Fetch
.d99d	20 c4 a2	jsr $a2c4			jsr Block
.d9a0	4c af ca	jmp $caaf			jmp Plus
=17					CL	.var *-(WordListLink+wh_Xt)
=$d9a3					en = *	; remember here
>d990	11					.byte CL	;wh_CodeLength
>d9a3	65 72 61 73 65 2d 73 63		L1:	.text "erase-screen"	;  name of word as a string, ending at wh_NameLastChar
>d9ab	72 65 65 6e
>d9af	0c					.byte *-L1	;wh_NameLength	length of name
>d9b0	0d d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d9b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d9b3	08					.byte NN	;wh_Flags	dictionary flags
=55599					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d9b4					Editor_Erase_Screen:
.d9b4	20 54 d9	jsr $d954			jsr Editor_Screen_Helper
.d9b7	a9 00		lda #$00			lda #<1024
.d9b9	a0 04		ldy #$04			ldy #>1024
.d9bb	20 f3 b6	jsr $b6f3			jsr PushYA
.d9be	20 79 bd	jsr $bd79			jsr Blank		; Erase the entire block (fill with spaces).
.d9c1	4c 1a a3	jmp $a31a			jmp Update		; Mark buffer as updated.
=16					CL	.var *-(WordListLink+wh_Xt)
=$d9c4					en = *	; remember here
>d9b2	10					.byte CL	;wh_CodeLength
>d9c4	65 6c				L1:	.text "el"	;  name of word as a string, ending at wh_NameLastChar
>d9c6	02					.byte *-L1	;wh_NameLength	length of name
>d9c7	2f d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d9c9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d9ca	08					.byte NN	;wh_Flags	dictionary flags
=55622					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d9cb					Editor_el:
.d9cb	20 92 d9	jsr $d992			jsr Editor_line
.d9ce	a9 40		lda #$40			lda #64			;(# of chars/line)
.d9d0	20 35 b7	jsr $b735			jsr PushZA
.d9d3	20 79 bd	jsr $bd79			jsr Blank		; Fill with spaces.
.d9d6	4c 1a a3	jmp $a31a			jmp Update		; Mark buffer as updated.
=14					CL	.var *-(WordListLink+wh_Xt)
=$d9d9					en = *	; remember here
>d9c9	0e					.byte CL	;wh_CodeLength
>d9d9	6f				L1:	.text "o"	;  name of word as a string, ending at wh_NameLastChar
>d9da	01					.byte *-L1	;wh_NameLength	length of name
>d9db	46 d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d9dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d9de	08					.byte NN	;wh_Flags	dictionary flags
=55642					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d9df					Editor_o:
.d9df	20 7d aa	jsr $aa7d			jsr CR
.d9e2	20 65 ce	jsr $ce65			jsr Dup
.d9e5	a9 02		lda #$02			lda #2
.d9e7	20 48 cb	jsr $cb48			jsr U_Dot_R_A
.d9ea	20 e0 cc	jsr $cce0			jsr Space
.d9ed	a9 2a		lda #$2a			lda #'*'
.d9ef	20 d3 cc	jsr $ccd3			jsr Emit_A
.d9f2	20 e0 cc	jsr $cce0			jsr Space
.d9f5	20 92 d9	jsr $d992			jsr Editor_line
.d9f8	20 65 ce	jsr $ce65			jsr Dup		; Save a copy of the line address for later.
.d9fb	a9 40		lda #$40			lda #64		; chars/line
.d9fd	20 35 b7	jsr $b735			jsr PushZA
.da00	20 e1 c1	jsr $c1e1			jsr Accept
.da03	20 65 ce	jsr $ce65			jsr Dup
.da06	20 8f cd	jsr $cd8f			jsr Not_Rot
.da09	20 af ca	jsr $caaf			jsr Plus
.da0c	a9 40		lda #$40			lda #64		; chars/line
.da0e	20 35 b7	jsr $b735			jsr PushZA
.da11	20 69 cd	jsr $cd69			jsr Rot
.da14	20 c8 ca	jsr $cac8			jsr Minus
.da17	20 79 bd	jsr $bd79			jsr Blank
.da1a	4c 1a a3	jmp $a31a			jmp Update
=62					CL	.var *-(WordListLink+wh_Xt)
=$da1d					en = *	; remember here
>d9dd	3e					.byte CL	;wh_CodeLength
=55642					editor_dictionary_start = WordListLink ; END of EDITOR-WORDLIST

;******  Processing file: platform/../strings.asm

>da1d	20 6f 6b 00			str_ok:         .text " ok", 0         ; note space at beginning
>da21	20 63 6f 6d 70 69 6c 65		str_compiled:   .text " compiled", 0   ; note space at beginning
>da29	64 00
>da2b	72 65 64 65 66 69 6e 65		str_redefined:  .text "redefined ", 0  ; note space at end
>da33	64 20 00
>da36	41 73 73 65 6d 62 6c 65		str_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>da3e	72 20 00
>da41	45 64 69 74 6f 72 20 00		str_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>da49	46 6f 72 74 68 20 00		str_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>da50	52 6f 6f 74 20 00		str_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>da56	66 6c 61 67 73 3a 00		str_see_flags:  .text "flags:", 0
>da5d	6e 74 3a 20 24 00		str_see_nt:     .text "nt: $", 0
>da63	78 74 3a 20 24 00		str_see_xt:     .text "xt: $", 0
>da69	73 69 7a 65 3a 20 23 00		str_see_size:   .text "size: #", 0
.da71					Exception_Text_List:
>da71	ff 00					.text $100+err_Abort,0
>da73	fe 00					.text $100+err_AbortQuote,0
>da75	fd 53 74 61 63 6b 20 4f			.text $100+err_Stack_Overflow,"Stack Overflow",0
>da7d	76 65 72 66 6c 6f 77 00
>da85	fc 53 74 61 63 6b 20 55			.text $100+err_Stack_Underflow,"Stack Underflow",0
>da8d	6e 64 65 72 66 6c 6f 77 00
>da96	f9 64 6f 2d 6c 6f 6f 70			.text $100+err_DoLoop_TooDeep,"do-loops nested too deeply during execution",0
>da9e	73 20 6e 65 73 74 65 64 20 74 6f 6f 20 64 65 65
>daae	70 6c 79 20 64 75 72 69 6e 67 20 65 78 65 63 75
>dabe	74 69 6f 6e 00
>dac3	f6 44 69 76 69 64 65 20			.text $100+err_DivideBy0,"Divide by 0",0
>dacb	62 79 20 30 00
>dad0	f5 6f 75 74 20 6f 66 20			.text $100+err_OutOfRange,"out of range",0
>dad8	72 61 6e 67 65 00
>dade	f4 61 72 67 75 6d 65 6e			.text $100+err_ArgTypeMismatch,"argument type mismatch",0
>dae6	74 20 74 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>daf6	f3 55 6e 64 65 66 69 6e			.text $100+err_UndefinedWord,"Undefined word",0
>dafe	65 64 20 77 6f 72 64 00
>db06	f2 49 6e 74 65 72 70 72			.text $100+err_CompileOnly,"Interpreting a Compile-only word",0
>db0e	65 74 69 6e 67 20 61 20 43 6f 6d 70 69 6c 65 2d
>db1e	6f 6e 6c 79 20 77 6f 72 64 00
>db28	eb 75 6e 73 75 70 70 6f			.text $100+err_Unsupported,"unsupported operation",0 ;  (e.g., AT-XY on a too-dumb terminal)
>db30	72 74 65 64 20 6f 70 65 72 61 74 69 6f 6e 00
>db3f	ea 63 6f 6e 74 72 6f 6c			.text $100+err_ControlMismatch,"control structure mismatch",0
>db47	20 73 74 72 75 63 74 75 72 65 20 6d 69 73 6d 61
>db57	74 63 68 00
>db5b	e0 69 6e 76 61 6c 69 64			.text $100+err_InvalidName,"invalid name",0 ; argument (e.g., TO name)
>db63	20 6e 61 6d 65 00
>db69	df 62 6c 6f 63 6b 20 72			.text $100+err_BlockRead,"block read",0
>db71	65 61 64 00
>db75	de 62 6c 6f 63 6b 20 77			.text $100+err_BlockWrite,"block write",0
>db7d	72 69 74 65 00
>db82	d6 46 50 20 64 69 76 69			.text $100+err_FPDivideBy0,"FP divide by zero",0
>db8a	64 65 20 62 79 20 7a 65 72 6f 00
>db95	d5 46 50 20 72 65 73 75			.text $100+err_FPOutOfRange,"FP result out of range",0
>db9d	6c 74 20 6f 75 74 20 6f 66 20 72 61 6e 67 65 00
>dbad	d4 46 50 20 73 74 61 63			.text $100+err_FPStackOverflow,"FP stack overflow",0
>dbb5	6b 20 6f 76 65 72 66 6c 6f 77 00
>dbc0	d3 46 50 20 73 74 61 63			.text $100+err_FPStackUnderflow,"FP stack underflow",0
>dbc8	6b 20 75 6e 64 65 72 66 6c 6f 77 00
>dbd4	d2 46 50 20 69 6e 76 61			.text $100+err_FPInvalidArg,"FP invalid argument",0
>dbdc	6c 69 64 20 61 72 67 75 6d 65 6e 74 00
>dbe9	ca 46 50 20 75 6e 64 65			.text $100+err_FPUnderflow,"FP underflow",0
>dbf1	72 66 6c 6f 77 00
>dbf7	c5 41 4c 4c 4f 43 41 54			.text $100+err_Allocate,"ALLOCATE",0
>dbff	45 00
>dc01	c4 46 52 45 45 00			.text $100+err_Free,"FREE",0
>dc07	6b 52 65 66 69 6c 6c 00			.text $100+err_Refill,"Refill",0
>dc0f	6a 44 65 66 65 72 20 6e			.text $100+err_Defer,"Defer not set",0
>dc17	6f 74 20 73 65 74 00
>dc1e	69 4e 6f 74 20 63 6f 6d			.text $100+err_NotCompiling,"Not compiling",0
>dc26	70 69 6c 69 6e 67 00
>dc2d	68 41 6c 72 65 61 64 79			.text $100+err_AlreadyCompiling,"Already compiling",0
>dc35	20 63 6f 6d 70 69 6c 69 6e 67 00
>dc40	66 4e 6f 20 77 6f 72 64			.text $100+err_wordlist,"No wordlists available",0
>dc48	6c 69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>dc58	67 50 6c 65 61 73 65 20			.text $100+err_BlockWordsNotSet,"Please assign BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
>dc60	61 73 73 69 67 6e 20 42 4c 4f 43 4b 2d 52 45 41
>dc70	44 2d 56 45 43 54 4f 52 20 61 6e 64 20 42 4c 4f
>dc80	43 4b 2d 57 52 49 54 45 2d 56 45 43 54 4f 52 00
>dc90	00					.text 0 ; end of list

;******  Return to file: platform/../taliforth.asm


;******  Return to file: platform/platform-py65mon.asm

>0766					hist_buff: .fill 8*128	; Input History for ACCEPT
.0b66					cp0:
.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 34 f0	lda $f034,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 2a f0	jsr $f02a	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	d0 f5		bne $f013	                bne -
.f01e					_done:
.f01e	4c 19 a0	jmp $a019	                jmp forth
.f021					kernel_getc:
.f021					_loop:
.f021	ee 35 03	inc $0335	                inc RndState+0	; randomize
.f024	ad 04 f0	lda $f004	                lda $f004
.f027	f0 f8		beq $f021	                beq _loop
.f029	60		rts		                rts
.f02a					kernel_putc:
.f02a	8d 01 f0	sta $f001	                sta $f001
.f02d	60		rts		                rts
.f02e					platform_bye:
.f02e	00		brk #		                brk
.f02f					platform_CCAt:
.f02f	a9 eb		lda #$eb	                lda #$100+err_Unsupported
.f031	4c c4 b3	jmp $b3c4	                jmp ThrowA  ; py65mon does't have this yet
.f034					s_kernel_id:
>f034	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 remix default kernel for py65mon (31 May 2024)", AscLF, 0
>f03c	74 68 20 32 20 72 65 6d 69 78 20 64 65 66 61 75
>f04c	6c 74 20 6b 65 72 6e 65 6c 20 66 6f 72 20 70 79
>f05c	36 35 6d 6f 6e 20 28 33 31 20 4d 61 79 20 32 30
>f06c	32 34 29 0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
