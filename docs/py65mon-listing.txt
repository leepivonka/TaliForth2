
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output TaliForth-py65mon.bin platform/platform-py65mon.asm
; Fri Jul 12 09:33:41 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

=$0100					RStack = $0100 ; begin of 6502 Return stack
=$ff					rsp0      = $ff		; initial Return Stack Pointer (6502 stack)
=$8000					cp_end = $8000 ; LastRAM byte available for Data
=84					PadOffset = 84	; offset from CP to PAD (holds number strings)
=79					MAX_LINE_LENGTH  = 79      ; output line size
=20					DDim = 20	; # of cells in data stack
=10					FDim = 10	; # of entries in floating-point stack
=8					DoStkDim = 8	; # of entries in Do stack
=["lf"]					TALI_OPTION_CR_EOL := [ "lf" ]
=$ff					bsize     = $ff		; size of input/output buffers
>0200					buffer0: .fill bsize	; input buffer

;******  Processing file: platform/../taliforth.asm

=					TALI_OPTIONAL_WORDS := ["fp","fpe", "fpieee","fptrancendentals", "fphyperbolic", "ed", "editor", "ramdrive", "block", "environment?", "assembler", "wordlist" ]
=-1					err_Abort		= -1
=-2					err_AbortQuote		= -2
=-3					err_Stack_Overflow	= -3
=-4					err_Stack_Underflow	= -4
=-5					err_Return_Stack_Overflow = -5
=-6					err_Return_Stack_Underflow = -6
=-7					err_DoLoop_TooDeep	= -7	; do-loops nested too deeply during execution
=-8					err_Dictionary_Overflow	= -8
=-9					err_InvalidMemoryAddr	= -9	; invalid memory address
=-10					err_DivideBy0		= -10	; division by zero
=-11					err_OutOfRange		= -11	; result out of range
=-12					err_ArgTypeMismatch	= -12	; argument type mismatch
=-13					err_UndefinedWord	= -13
=-14					err_CompileOnly		= -14	; interpreting a compile-only word
=-15					err_Forget		= -15	; invalid FORGET
=-16					err_EmptyName		= -16	; attempt to use zero-length string as a name
=-17					err_PicStringOverflow	= -17	; pictured numeric output string overflow
=-18					err_ParsedStringOverflow = -18	; parsed string overflow
=-19					err_NameTooLong		= -19	; definition name too long
=-20					err_WriteToRO		= -20	; write to a read-only location
=-21					err_Unsupported		= -21	; unsupported operation  (e.g., AT-XY on a too-dumb terminal)
=-22					err_ControlMismatch	= -22	; control structure mismatch
=-23					err_AddrAlignment	= -23	; address alignment exception
=-24					err_InvalidNumericArg	= -24	; invalid numeric argument
=-25					err_ReturnStackImbalance = -25	; return stack imbalance
=-26					err_LoopParmUnavailable = -26	; loop parameters unavailable
=-27					err_InvalidRecursion	= -27	; invalid recursion
=-28					err_UserInterrupt	= -28	; user interrupt
=-29					err_CompilerNesting	= -29	; compiler nesting
=-30					err_Obsolete		= -30	; obsolescent feature
=-31					err_NoBody		= -31	; >BODY used on non-CREATEd definition
=-32					err_InvalidName		= -32	; invalid name argument (e.g., TO name)
=-33					err_BlockRead		= -33	; block read exception
=-34					err_BlockWrite		= -34	; block write exception
=-35					err_InvalidBlock	= -35	; invalid block number
=-36					err_InvalidFilePosition = -36	; invalid file position
=-37					err_FileIO		= -37	; file I/O exception
=-38					err_FileMissing		= -38	; non-existent file
=-39					err_EndOfFile		= -39	; unexpected end of file
=-40					err_InvalidBase		= -40	; invalid BASE for floating point conversion
=-41					err_LossOfPrecision	= -41	; loss of precision
=-42					err_FPDivideBy0		= -42	; floating-point divide by zero
=-43					err_FPOutOfRange	= -43	; floating-point result out of range
=-44					err_FPStackOverflow	= -44	; floating-point stack overflow
=-45					err_FPStackUnderflow	= -45	; floating-point stack underflow
=-46					err_FPInvalidArg	= -46	; floating-point invalid argument
=-47					err_CompileWordsDeleted = -47	; compilation word list deleted
=-48					err_PostponeInvalid	= -48	; invalid POSTPONE
=-49					err_SearchOrderOverflow = -49	; search-order overflow
=-50					err_SearchOrderUnderflow = -50	; search-order underflow
=-51					err_CompileWordlistChanged = -51 ; compilation word list changed
=-52					err_ControlStackOverflow = -52	; control-flow stack overflow
=-53					err_ExceptionStackOverflow = -53 ; exception stack overflow
=-54					err_FPUnderflow		= -54	; floating-point underflow
=-55					err_FPFault		= -55	; floating-point unidentified fault
=-56					err_Quit		= -56	; QUIT
=-57					err_ConsoleIO		= -57	; exception in sending or receiving a character
=-58					err_BracketIf		= -58	; [IF], [ELSE], or [THEN] exception
=-59					err_Allocate		= -59	; ALLOCATE
=-60					err_Free		= -60	; FREE
=-61					err_Resize		= -61	; RESIZE
=-62					err_CloseFile		= -62	; CLOSE-FILE
=-63					err_CreateFile		= -63	; CREATE-FILE
=-64					err_DeleteFile		= -64	; DELETE-FILE
=-65					err_FilePosition	= -65	; FILE-POSITION
=-66					err_FileSize		= -66	; FILE-SIZE
=-67					err_FileStatus		= -67	; FILE-STATUS
=-68					err_FlushFile		= -68	; FLUSH-FILE
=-69					err_OpenFile		= -69	; OPEN-FILE
=-70					err_ReadFile		= -70	; READ-FILE
=-71					err_ReadLine		= -71	; READ-LINE
=-72					err_RenameFile		= -72	; RENAME-FILE
=-73					err_RepositionFile	= -73	; REPOSITION-FILE
=-74					err_ResizeFile		= -74	; RESIZE-FILE
=-75					err_WriteFile		= -75	; WRITE-FILE
=-76					err_WriteLine		= -76	; WRITE-LINE
=-77					err_MalformedXChar	= -77	; Malformed xchar
=-78					err_Substitute		= -78	; SUBSTITUTE
=-79					err_Replaces		= -79	; REPLACES
=-149					err_Refill		= -149	; Refill failed
=-150					err_Defer		= -150	; Defer not set
=-151					err_AlreadyInterpreting	= -151	; entering interpret when already interpreting
=-152					err_AlreadyCompiling	= -152	; entering compile when already compiling
=-154					err_TooManyWordlists   	= -154
.0000					zp0:
>0000					cp:	.word ?		; Compiler Pointer (see HERE)
>0002					InSrc:	.word ?		; input Source for SOURCE-ID
>0004					Cib:	.word ?		; address of current input buffer
>0006					CibLen:	.word ?		; length of current input buffer
>0008					ToIn:	.word ?		; pointer to CIB (>IN in Forth)
>000a					state:	.word ?		; STATE: -1 compile, 0 interpret
>000c					status: .word ?		; internal status flags
>000e					WorkWord: .word ?	; nt or xt of word being compiled (see status)
>0010					dp:	.word ?		; Dictionary Pointer temp
>0012					DoIndex: .word ?	; current Do index
>0014					tmp1:	.word ?		; temporary storage
>0016					tmp2:	.word ?		; temporary storage
>0018					tmp3:	.word ?		; temporary storage
>001a					tmp4:	.word ?		; temporary storage (tmpdsp)
>001c					tmp5:	.word ?		; temporary storage (tmptos)
>001e					editor1: .word ?	; temporary for editors
>0020					editor2: .word ?	; temporary for editors
>0022					editor3: .word ?	; temporary for editors
>0024					DStack:	.fill DDim*2	; data stack
=40					DStack0 = *-DStack	;   initial Data Stack index value
.8000					Cold_zp_table:
>8000	66 0b					.word cp0		; cp
>8002	00 00					.word 0			; insrc (SOURCE-ID is 0 for keyboard)
>8004	00 02					.word buffer0		; cib
>8006	00 00					.word 0			; ciblen
>8008	00 00					.word 0			; toin
>800a	00 00					.word 0			; state (0 = interpret)
>800c	00 00					.word 0			; status
=14					Cold_zp_table_length = *-Cold_zp_table
.02ff					User0:
>02ff					PrecisionV: .byte ?	; # of decimal places for FP print
>0300					base:	.word ?		; number radix, default decimal
>0302					nc_limit: .word ?	; limit for Native Compile size
>0304					uf_strip: .word ?	; flag to strip underflow detection code
>0306					output:	.word ?		; vector for EMIT
>0308					input:	.word ?		; vector for KEY
>030a					HaveKey: .word ?	; vector for KEY?
>030c					BlkV:	.word ?		; BLK
>030e					ScrV:	.word ?		; SCR
>0310					CurrentV: .byte ?	; CURRENT (byte) (Compilation wordlist)
>0311					Num_WordlistsV: .byte ?	; #WORDLISTS (byte)
=12					max_wordlists = 12	; Maximum number of wordlists supported
>0312					WordlistsV: .fill 2*max_wordlists	; WORDLISTS (cells)
>032a					Num_OrderV: .byte ?	; #ORDER (byte)
>032b					Search_OrderV: .fill 9	; SEARCH-ORDER (bytes)
.0334					MarkEnd:
>0334					ToHold:	.byte ?		; pad buffer index for formatted output
>0335					RndState: .dword ?	; random # state
=0					wid_Forth = 0
=1					wid_Editor = 1
=2					wid_Assembler = 2
=3					wid_Root = 3
.800e					Cold_user_table:
>800e	08					.byte 8			; PrecisionV
>800f	0a 00					.word 10		; base
>8011	08 00					.word 8			; nc-limit
>8013	00 00					.word 0			; uf_strip (off by default)
>8015	21 f1					.word kernel_putc	; output
>8017	14 f1					.word kernel_getc	; input
>8019	1d f1					.word kernel_havekey	; havekey
>801b	00 00					.word 0				; BLK
>801d	00 00					.word 0				; SCR
>801f	00					.byte 0				; CURRENT = FORTH-WORDLIST
>8020	04					.byte 4				; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>8021	06 cf					.word forth_dictionary_start	; FORTH-WORDLIST
>8023	44 d9					.word editor_dictionary_start	; EDITOR-WORDLIST
>8025	4e d7					.word assembler_dictionary_start ; ASSEMBLER-WORDLIST
>8027	47 cf					.word root_dictionary_start	; ROOT-WORDLIST
>8029	00 00 00 00 00 00 00 00			.word 0,0,0,0,0,0,0,0		; User wordlists
>8031	00 00 00 00 00 00 00 00
>8039	02					.byte 2				; #ORDER
>803a	00 02 00 00 00 00 00 00			.byte wid_Forth,wid_Assembler,0,0,0,0,0,0,0	; search-order
>8042	00
=53					Cold_user_table_length = *-Cold_user_table
=$03					AscCC   = $03	; break (CTRL-c)
=$07					AscBELL = $07	; bell sound
=$08					AscBS   = $08	; backspace
=$09					AscHT	= $09	; tab
=$0a					AscLF   = $0a	; line feed
=$0b					AScVT	= $0b	; vertical tab
=$0c					AscFF	= $0c	; form feed
=$0d					AscCR   = $0d	; carriage return
=$0e					AscCN   = $0e	; CTRL-n (used to recall next input history)
=$10					AscCP   = $10	; CTRL-p (used to recall previous input history)
=$1b					AscESC  = $1b	; escape
=$20					AscSP   = $20	; space
=$22					AscDQuote = $22	; double quote
=$5c					AscBackslash = $5c ; backslash
=$7f					AscDEL  = $7f	; delete (CTRL-h)
>0000							.fill $80	; |  unused space |   To align the last char of name.
=127					wh_NameLastChar	= *-1		; |		  |   Last char of name.
>0080					wh_HashNameLen:			    .byte ?	; |
=$e0					wh_HNL_HashMask		=	    %11100000	; |      lo 3 bits of last char of name
=$1f					wh_HNL_NameLengthMask	=	    %00011111	; |      length of name
>0081					wh_Flags:			    .byte ?	; |  flag bits
=$01					FP	=			    %00000001	; |	Far previous NT (two byte pointer rather than one byte offset)
=$02					DB	=			    %00000010	; |	Disjoint body (two byte pointer rather than adjoining body code)
=$04					CO	=			    %00000100	; |	Compile Only
=$08					IM	=			    %00001000	; |     Immediate Word
=$10					NN	=			    %00010000	; |	    | 1 | 0 |  NN : Word can only be called by JSR (never native)
=$20					AN	=			    %00100000  	; |	    | 0 | 1 |  AN : Word can only be inlined (always native)
=$30					ST	=			    %00110000	; |	    | 1 | 1 |  ST : Normal word with return stack juggling that
=3					wh_HeaderExtendMask =		     FP+DB	; |	of the header length directly by adding 4 to `flags & %00000011`.
=$40					UF	=			    %01000000   ; |     strippable underflow
>0082					wh_CodeLength:			   .byte ?	; |  Code length  |   Code length for native compile, max 255
.0083					wh_LinkNt:
=0					WordFlags .var 0 ; initialize for macro
=0					XtPtr1  .var 0  ; initialize for macro
=0					WordListLink .var 0	 ; start of FORTH wordlist
>8043	43 6f 6c 64			Name0:	.text "Cold"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=32711					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8047	84					.byte (("Cold"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=32711					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>8048	11					.byte WordFlags	;wh_Flags
>8049	03					.byte 3	;wh_CodeLength
>804a	00 00					  .word WordListLink
=$804c					XtPtr1 ::= *
=32711					WordListLink ::= Nt0 ; remember the nt of this word for later
.804c					Cold:
.804c	d8		cld				cld
.804d	a2 ff		ldx #$ff			ldx #rsp0		; Initialize 6502 stack (Return Stack)
.804f	9a		txs				txs
.8050	a2 0d		ldx #$0d			ldx #Cold_zp_table_length-1 ; Initialize important zero page variables from ROM
.8052	bd 00 80	lda $8000,x	-		lda Cold_zp_table,x	;   We can use X here
.8055	95 00		sta $00,x			sta zp0,x		;   because Tali hasn't set up the param stack yet.
.8057	ca		dex				dex
.8058	10 f8		bpl $8052			bpl -
.805a	a0 34		ldy #$34			ldy #Cold_user_table_length-1	; Initialize the user variables.
.805c	b9 0e 80	lda $800e,y	-		lda Cold_user_table,y
.805f	99 ff 02	sta $02ff,y			sta User0,y
.8062	88		dey				dey
.8063	10 f7		bpl $805c			bpl -
.8065	20 e2 b4	jsr $b4e2			jsr Empty_Stack		; Clear Data Stack. This is repeated in ABORT, but this way we
.8068	20 e9 a1	jsr $a1e9			jsr BlockInit
.806b	20 69 ab	jsr $ab69			jsr CR
.806e	a9 9c		lda #$9c			lda #<forth_words_start		; push start address
.8070	a0 80		ldy #$80			ldy #>forth_words_start
.8072	20 ae b7	jsr $b7ae			jsr PushYA
.8075	a9 d2		lda #$d2			lda #<forth_words_len		; push length
.8077	a0 00		ldy #$00			ldy #>forth_words_len
.8079	20 ae b7	jsr $b7ae			jsr PushYA
.807c	20 fe af	jsr $affe			jsr Evaluate
.807f	a9 00		lda #$00			lda #0
.8081	8d 66 07	sta $0766			sta hist_buff
.8084	8d e6 07	sta $07e6			sta hist_buff+$80
.8087	8d 66 08	sta $0866			sta hist_buff+$100
.808a	8d e6 08	sta $08e6			sta hist_buff+$180
.808d	8d 66 09	sta $0966			sta hist_buff+$200
.8090	8d e6 09	sta $09e6			sta hist_buff+$280
.8093	8d 66 0a	sta $0a66			sta hist_buff+$300
.8096	8d e6 0a	sta $0ae6			sta hist_buff+$380
.8099	4c 94 b4	jmp $b494			jmp Abort_Core2	;Quit
=80					CodeLen	.var *-XtPtr1
=$809c					Here1 = *	; remember here
>8049	50					.byte CodeLen	;patch wh_CodeLength
>809c	20 63 72 20 2e 28 20 54		forth_words_start: .binary "forth_words.asc" ; High-level Forth words, see forth_code/README.md
>80a4	61 6c 69 20 46 6f 72 74 68 20 32 20 72 65 6d 69
>80b4	78 20 66 6f 72 20 74 68 65 20 36 35 30 32 29 20
>80c4	63 72 20 2e 28 20 56 65 72 73 69 6f 6e 20 33 31
>80d4	2e 20 4d 61 79 20 32 30 32 34 20 29 20 63 72 20
>80e4	2e 28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31
>80f4	34 2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53
>8104	74 65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f
>8114	6c 77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c
>8124	69 20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20
>8134	77 69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20
>8144	4e 4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20
>8154	2e 28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f
>8164	20 65 78 69 74 29 20 63 72 20
=210					forth_words_len = *-forth_words_start
>816e					user_words_start: .binary "user_words.asc" ; User-defined Forth words, see forth_code/README.md
=0					user_words_len = *-user_words_start
>816e	4e 6f 4f 70			Name0:	.text "NoOp"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33010					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8172	04					.byte (("NoOp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=299					LinkDisplacement = Nt0-WordListLink
=1						  WordFlags ::= WordFlags | FP
>8173	01					.byte WordFlags	;wh_Flags
>8174	03					.byte 3	;wh_CodeLength
>8175	c7 7f					  .word WordListLink
=$8177					XtPtr1 ::= *
=33010					WordListLink ::= Nt0 ; remember the nt of this word for later
.8177	ea		nop				nop
=1					CodeLen	.var *-XtPtr1
=$8178					Here1 = *	; remember here
>8174	01					.byte CodeLen	;patch wh_CodeLength
.8178	60		rts				rts
>8179	43 43 40			Name0:	.text "CC@"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=33020					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>817c	03					.byte (("CC@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
=$12						  WordFlags ::= WordFlags | DB
>817d	12					.byte WordFlags	;wh_Flags
>817e	08					.byte 8	;wh_CodeLength
>817f	0a					  .byte LinkDisplacement	; offset to previous nt
>8180	26 f1					  .word platform_CCAT		; pointer to xt
=0					XtPtr1 ::= 0
=33020					WordListLink ::= Nt0 ; remember the nt of this word for later
>8182	42 79 65			Name0:	.text "Bye"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=33029					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8185	a3					.byte (("Bye"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
=$12						  WordFlags ::= WordFlags | DB
>8186	12					.byte WordFlags	;wh_Flags
>8187	08					.byte 8	;wh_CodeLength
>8188	09					  .byte LinkDisplacement	; offset to previous nt
>8189	25 f1					  .word platform_bye		; pointer to xt
=0					XtPtr1 ::= 0
=33029					WordListLink ::= Nt0 ; remember the nt of this word for later
>818b	54 79 70 65 53 79 6d 62		Name0:	.text "TypeSymbol"	;  name of word as a string, ending at wh_NameLastChar
>8193	6f 6c
=10					NameLength = *-Name0
=33045					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8195	8a					.byte (("TypeSymbol"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8196	10					.byte WordFlags	;wh_Flags
>8197	03					.byte 3	;wh_CodeLength
>8198	10					  .byte LinkDisplacement	; offset to previous nt
=$8199					XtPtr1 ::= *
=33045					WordListLink ::= Nt0 ; remember the nt of this word for later
.8199	20 a2 b8	jsr $b8a2	TypeSymbol:	jsr SLiteral_runtime
.819c	4c a4 81	jmp $81a4			  jmp +
>819f	20 20 28 20 24					  .text "  ( $"
.81a4	20 d3 cd	jsr $cdd3	+		jsr Type
.81a7	20 51 cf	jsr $cf51			jsr Dup
.81aa	20 09 a9	jsr $a909			jsr Dot_Hex
.81ad	20 c7 cd	jsr $cdc7			jsr Space
.81b0	20 d7 81	jsr $81d7			jsr DictSearchXt	; ( addr_end addr operand offset nt )
.81b3	20 e1 bd	jsr $bde1			jsr Name_To_String	; Change nt into the name
.81b6	20 d3 cd	jsr $cdd3			jsr Type		; print it.
.81b9	20 c7 cd	jsr $cdc7			jsr Space
.81bc	b5 24		lda $24,x			lda DStack+0,x		; if non-zero offset
.81be	15 25		ora $25,x			ora DStack+1,x
.81c0	f0 0b		beq $81cd			beq +
.81c2	a9 2b		lda #$2b			lda #'+'		;   print offset
.81c4	20 bb cd	jsr $cdbb			jsr Emit_A
.81c7	20 51 cf	jsr $cf51			jsr Dup
.81ca	20 fb cb	jsr $cbfb			jsr U_Dot
.81cd	e8		inx		+		inx
.81ce	e8		inx				inx
.81cf	a9 29		lda #$29			lda #')'
.81d1	20 bb cd	jsr $cdbb			jsr Emit_A
.81d4	4c c7 cd	jmp $cdc7			jmp Space
=62					CodeLen	.var *-XtPtr1
=$81d7					Here1 = *	; remember here
>8197	3e					.byte CodeLen	;patch wh_CodeLength
.81d7					DictSearchXt:
.81d7	ca		dex				dex			; alloc nt
.81d8	ca		dex				dex
.81d9	20 2a cf	jsr $cf2a			jsr Over		; alloc xt
.81dc	a9 ff		lda #$ff			lda #$ff		; init best offset
.81de	95 29		sta $29,x			sta DStack+5,x		; ( offset nt xt )
.81e0	a9 fe		lda #$fe			lda #$100-2		; for each wordlist
.81e2	48		pha				pha
.81e3	68		pla		_ListNext:	pla
.81e4	18		clc				clc
.81e5	69 02		adc #$02			adc #2			; to next wordlist
.81e7	c9 18		cmp #$18			cmp #max_wordlists*2
.81e9	b0 10		bcs $81fb			bcs _ListDone
.81eb	48		pha				pha
.81ec	a8		tay				tay
.81ed	b9 12 03	lda $0312,y			lda WordlistsV+0,y	; Get the DP for that wordlist.
.81f0	85 14		sta $14				sta tmp1+0
.81f2	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.81f5	85 15		sta $15				sta tmp1+1
.81f7	d0 0a		bne $8203			bne _WordTest
.81f9	f0 e8		beq $81e3			beq _ListNext		;   empty list
.81fb	e8		inx		_ListDone:	inx			; Drop pattern xt
.81fc	e8		inx				inx			; ( offset nt )
.81fd	60		rts				rts
.81fe	20 96 82	jsr $8296	_WordNext:	jsr LinkNext		; tmp1= next nt in list
.8201	f0 e0		beq $81e3			beq _ListNext		; end of Dictionary?
.8203	20 a5 bd	jsr $bda5	_WordTest:	jsr NameToIntTmp	; tmp2 = xt of this word
.8206	38		sec				sec			; tmp3 = xt offset for this word
.8207	b5 24		lda $24,x			lda DStack+0,x
.8209	e5 16		sbc $16				sbc tmp2+0
.820b	85 18		sta $18				sta tmp3+0
.820d	b5 25		lda $25,x			lda DStack+1,x
.820f	e5 17		sbc $17				sbc tmp2+1
.8211	85 19		sta $19				sta tmp3+1
.8213	20 7b 82	jsr $827b			jsr _test
.8216	a0 00		ldy #$00			ldy #0			; is this word a constant?
.8218	b1 16		lda ($16),y			lda (tmp2),y
.821a	c9 a0		cmp #$a0			cmp #$a0
.821c	f0 2a		beq $8248			beq _PushYA
.821e	c9 a9		cmp #$a9			cmp #$a9
.8220	f0 02		beq $8224			beq _PushZA
.8222	d0 da		bne $81fe			bne _WordNext
.8224	c8		iny		_PushZA:	iny			; get lda # operand
.8225	b5 24		lda $24,x			lda DStack+0,x
.8227	f1 16		sbc ($16),y			sbc (tmp2),y
.8229	85 18		sta $18				sta tmp3+0
.822b	b5 25		lda $25,x			lda DStack+1,x
.822d	e9 00		sbc #$00			sbc #0
.822f	85 19		sta $19				sta tmp3+1
.8231	c8		iny				iny			; check jmp opcode
.8232	b1 16		lda ($16),y			lda (tmp2),y
.8234	c9 4c		cmp #$4c			cmp #$4c
.8236	d0 c6		bne $81fe			bne _WordNext
.8238	c8		iny				iny			; check jmp operand lo
.8239	b1 16		lda ($16),y			lda (tmp2),y
.823b	c9 dd		cmp #$dd			cmp #<PushZA
.823d	d0 bf		bne $81fe			bne _WordNext
.823f	c8		iny				iny			; check jmp operand hi
.8240	b1 16		lda ($16),y			lda (tmp2),y
.8242	c9 b7		cmp #$b7			cmp #>PushZA
.8244	f0 2f		beq $8275			beq _KTest
.8246	d0 b6		bne $81fe			bne _WordNext
.8248	a0 02		ldy #$02	_PushYA:	ldy #2			; check LDA # opcode
.824a	b1 16		lda ($16),y			lda (tmp2),y
.824c	c9 a9		cmp #$a9			cmp #$a9
.824e	d0 ae		bne $81fe			bne _WordNext
.8250	c8		iny				iny			; get lda # operand
.8251	b5 24		lda $24,x			lda DStack+0,x
.8253	f1 16		sbc ($16),y			sbc (tmp2),y
.8255	85 18		sta $18				sta tmp3+0
.8257	a0 01		ldy #$01			ldy #1			; get LDY # operand
.8259	b5 25		lda $25,x			lda DStack+1,x
.825b	f1 16		sbc ($16),y			sbc (tmp2),y
.825d	85 19		sta $19				sta tmp3+1
.825f	a0 04		ldy #$04			ldy #4			; check JMP opcode
.8261	b1 16		lda ($16),y			lda (tmp2),y
.8263	c9 4c		cmp #$4c			cmp #$4c
.8265	d0 97		bne $81fe			bne _WordNext
.8267	c8		iny				iny			; check JMP operand lo
.8268	b1 16		lda ($16),y			lda (tmp2),y
.826a	c9 ae		cmp #$ae			cmp #<PushYA
.826c	d0 0a		bne $8278			bne _WordNext3
.826e	c8		iny				iny			; check JMP operand hi
.826f	b1 16		lda ($16),y			lda (tmp2),y
.8271	c9 b7		cmp #$b7			cmp #>PushYA
.8273	d0 03		bne $8278			bne _WordNext3
.8275	20 7b 82	jsr $827b	_KTest:		jsr _test
.8278	4c fe 81	jmp $81fe	_WordNext3:	jmp _WordNext
.827b					_test:
.827b	a5 18		lda $18				lda tmp3+0		; this word have smaller offset?
.827d	d5 28		cmp $28,x			cmp DStack+4,x
.827f	a5 19		lda $19				lda tmp3+1
.8281	f5 29		sbc $29,x			sbc DStack+5,x
.8283	b0 10		bcs $8295			bcs _trts
.8285	a5 18		lda $18				lda tmp3+0		;   save this better offset
.8287	a4 19		ldy $19				ldy tmp3+1
.8289	95 28		sta $28,x			sta DStack+4,x
.828b	94 29		sty $29,x			sty DStack+5,x
.828d	a5 14		lda $14				lda tmp1+0		;   save this better nt
.828f	a4 15		ldy $15				ldy tmp1+1
.8291	95 26		sta $26,x			sta DStack+2,x
.8293	94 27		sty $27,x			sty DStack+3,x
.8295	60		rts		_trts:		rts
.8296					LinkNext:
.8296	a0 81		ldy #$81			ldy #wh_Flags		; which kind of wh_LinkNt?
.8298	b1 14		lda ($14),y			lda (tmp1),y
.829a	29 01		and #$01			and #FP
.829c	f0 0e		beq $82ac			beq _LinkShort
.829e	a0 84		ldy #$84	_LinkLong:	ldy #wh_LinkNt+1	; tmp1 = tmp1->LinkNt (ptr)
.82a0	b1 14		lda ($14),y			lda (tmp1),y
.82a2	48		pha				pha
.82a3	88		dey				dey
.82a4	b1 14		lda ($14),y			lda (tmp1),y
.82a6	85 14		sta $14				sta tmp1+0
.82a8	68		pla				pla
.82a9	85 15		sta $15				sta tmp1+1
.82ab	60		rts				rts
.82ac	a0 83		ldy #$83	_LinkShort:	ldy #wh_LinkNt		; tmp1 -= tmp1->LinkNt byte offset
.82ae	38		sec				sec
.82af	a5 14		lda $14				lda tmp1+0
.82b1	f1 14		sbc ($14),y			sbc (tmp1),y
.82b3	85 14		sta $14				sta tmp1+0
.82b5	a5 15		lda $15				lda tmp1+1
.82b7	e9 00		sbc #$00			sbc #0
.82b9	85 15		sta $15				sta tmp1+1
.82bb	60		rts				rts
>82bc	44 53 74 61 63 6b		Name0:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33346					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82c2	66					.byte (("DStack"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=301					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>82c3	11					.byte WordFlags	;wh_Flags
>82c4	03					.byte 3	;wh_CodeLength
>82c5	15 81					  .word WordListLink
=$82c7					XtPtr1 ::= *
=33346					WordListLink ::= Nt0 ; remember the nt of this word for later
.82c7	a9 24		lda #$24			lda #DStack
.82c9	4c dd b7	jmp $b7dd			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$82cc					Here1 = *	; remember here
>82c4	05					.byte CodeLen	;patch wh_CodeLength
>82cc	52 53 74 61 63 6b		Name0:	.text "RStack"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33362					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82d2	66					.byte (("RStack"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>82d3	10					.byte WordFlags	;wh_Flags
>82d4	03					.byte 3	;wh_CodeLength
>82d5	10					  .byte LinkDisplacement	; offset to previous nt
=$82d6					XtPtr1 ::= *
=33362					WordListLink ::= Nt0 ; remember the nt of this word for later
.82d6	a0 01		ldy #$01			ldy #>RStack
.82d8	a9 00		lda #$00			lda #<RStack
.82da	4c ae b7	jmp $b7ae			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$82dd					Here1 = *	; remember here
>82d4	07					.byte CodeLen	;patch wh_CodeLength
>82dd	52 6e 64 53 74 61 74 65		Name0:	.text "RndState"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=33381					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82e5	a8					.byte (("RndState"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>82e6	10					.byte WordFlags	;wh_Flags
>82e7	03					.byte 3	;wh_CodeLength
>82e8	13					  .byte LinkDisplacement	; offset to previous nt
=$82e9					XtPtr1 ::= *
=33381					WordListLink ::= Nt0 ; remember the nt of this word for later
.82e9	a0 03		ldy #$03			ldy #>RndState
.82eb	a9 35		lda #$35			lda #<RndState
.82ed	4c ae b7	jmp $b7ae			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$82f0					Here1 = *	; remember here
>82e7	07					.byte CodeLen	;patch wh_CodeLength
>82f0	52 61 6e 64			Name0:	.text "Rand"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33396					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82f4	84					.byte (("Rand"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>82f5	00					.byte WordFlags	;wh_Flags
>82f6	03					.byte 3	;wh_CodeLength
>82f7	0f					  .byte LinkDisplacement	; offset to previous nt
=$82f8					XtPtr1 ::= *
=33396					WordListLink ::= Nt0 ; remember the nt of this word for later
.82f8					Rand:
.82f8	4e 36 03	lsr $0336			lsr RndState+1
.82fb	6e 35 03	ror $0335			ror RndState+0
.82fe	6e 38 03	ror $0338			ror RndState+3
.8301	6e 37 03	ror $0337			ror RndState+2
.8304	90 10		bcc $8316			bcc _19			;  IfCs,
.8306	ad 36 03	lda $0336			lda RndState+1
.8309	49 d0		eor #$d0			eor #$d0
.830b	8d 36 03	sta $0336			sta RndState+1
.830e	ad 37 03	lda $0337			lda RndState+2
.8311	49 01		eor #$01			eor #$01
.8313	8d 37 03	sta $0337			sta RndState+2
.8316					_19:
.8316	ad 37 03	lda $0337			lda RndState+2
.8319	ac 38 03	ldy $0338			ldy RndState+3
=36					CodeLen	.var *-XtPtr1
=$831c					Here1 = *	; remember here
>82f6	24					.byte CodeLen	;patch wh_CodeLength
.831c	60		rts				rts
>831d	52 61 6e 64 4d			Name0:	.text "RandM"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33442					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8322	a5					.byte (("RandM"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=46					LinkDisplacement = Nt0-WordListLink
>8323	10					.byte WordFlags	;wh_Flags
>8324	03					.byte 3	;wh_CodeLength
>8325	2e					  .byte LinkDisplacement	; offset to previous nt
=$8326					XtPtr1 ::= *
=33442					WordListLink ::= Nt0 ; remember the nt of this word for later
.8326	20 51 cf	jsr $cf51	RandM:		jsr Dup		; ( umod umod )
.8329	20 f8 82	jsr $82f8			jsr Rand
.832c	4a		lsr a				lsr a		; make positive
.832d	95 27		sta $27,x			sta DStack+3,x
.832f	94 26		sty $26,x			sty DStack+2,x	; ( rand umod )
.8331	4c 74 af	jmp $af74			jmp Mod
=14					CodeLen	.var *-XtPtr1
=$8334					Here1 = *	; remember here
>8324	0e					.byte CodeLen	;patch wh_CodeLength
>004c					FIndex:	.byte ?		; floating-point stack index. empty=FDim, full=0
>004d					FSExp:   .fill FDim	; FP stack exponent        array
>0057					FSMant0: .fill FDim	; FP stack mantissa MSByte array
>0061					FSMant1: .fill FDim	; FP stack mantissa 2nd    array
>006b					FSMant2: .fill FDim	; FP stack mantissa 3rd    array
>0075					FSMant3: .fill FDim	; FP stack mantissa 4th    array
>8334	46 49 6e 64 65 78		Name0:	.text "FIndex"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33466					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>833a	06					.byte (("FIndex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>833b	10					.byte WordFlags	;wh_Flags
>833c	03					.byte 3	;wh_CodeLength
>833d	18					  .byte LinkDisplacement	; offset to previous nt
=$833e					XtPtr1 ::= *
=33466					WordListLink ::= Nt0 ; remember the nt of this word for later
.833e	a9 4c		lda #$4c			lda #FIndex
.8340	4c dd b7	jmp $b7dd			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$8343					Here1 = *	; remember here
>833c	05					.byte CodeLen	;patch wh_CodeLength
>8343	46 44 69 6d			Name0:	.text "FDim"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33479					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8347	a4					.byte (("FDim"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8348	10					.byte WordFlags	;wh_Flags
>8349	03					.byte 3	;wh_CodeLength
>834a	0d					  .byte LinkDisplacement	; offset to previous nt
=$834b					XtPtr1 ::= *
=33479					WordListLink ::= Nt0 ; remember the nt of this word for later
.834b	a9 0a		lda #$0a			lda #FDim
.834d	4c dd b7	jmp $b7dd			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$8350					Here1 = *	; remember here
>8349	05					.byte CodeLen	;patch wh_CodeLength
>8350	46 53 45 78 70			Name0:	.text "FSExp"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33493					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8355	05					.byte (("FSExp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>8356	10					.byte WordFlags	;wh_Flags
>8357	03					.byte 3	;wh_CodeLength
>8358	0e					  .byte LinkDisplacement	; offset to previous nt
=$8359					XtPtr1 ::= *
=33493					WordListLink ::= Nt0 ; remember the nt of this word for later
.8359	a9 4d		lda #$4d			lda #FSExp
.835b	4c dd b7	jmp $b7dd			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$835e					Here1 = *	; remember here
>8357	05					.byte CodeLen	;patch wh_CodeLength
>835e	46 53 4d 61 6e 74 30		Name0:	.text "FSMant0"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=33509					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8365	07					.byte (("FSMant0"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8366	10					.byte WordFlags	;wh_Flags
>8367	03					.byte 3	;wh_CodeLength
>8368	10					  .byte LinkDisplacement	; offset to previous nt
=$8369					XtPtr1 ::= *
=33509					WordListLink ::= Nt0 ; remember the nt of this word for later
.8369	a9 57		lda #$57			lda #FSMant0
.836b	4c dd b7	jmp $b7dd			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$836e					Here1 = *	; remember here
>8367	05					.byte CodeLen	;patch wh_CodeLength
>836e	46 53 4d 61 6e 74 31		Name0:	.text "FSMant1"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=33525					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8375	27					.byte (("FSMant1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8376	10					.byte WordFlags	;wh_Flags
>8377	03					.byte 3	;wh_CodeLength
>8378	10					  .byte LinkDisplacement	; offset to previous nt
=$8379					XtPtr1 ::= *
=33525					WordListLink ::= Nt0 ; remember the nt of this word for later
.8379	a9 61		lda #$61			lda #FSMant1
.837b	4c dd b7	jmp $b7dd			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$837e					Here1 = *	; remember here
>8377	05					.byte CodeLen	;patch wh_CodeLength
>837e	46 53 4d 61 6e 74 32		Name0:	.text "FSMant2"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=33541					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8385	47					.byte (("FSMant2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8386	10					.byte WordFlags	;wh_Flags
>8387	03					.byte 3	;wh_CodeLength
>8388	10					  .byte LinkDisplacement	; offset to previous nt
=$8389					XtPtr1 ::= *
=33541					WordListLink ::= Nt0 ; remember the nt of this word for later
.8389	a9 6b		lda #$6b			lda #FSMant2
.838b	4c dd b7	jmp $b7dd			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$838e					Here1 = *	; remember here
>8387	05					.byte CodeLen	;patch wh_CodeLength
>838e	46 53 4d 61 6e 74 33		Name0:	.text "FSMant3"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=33557					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8395	67					.byte (("FSMant3"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8396	10					.byte WordFlags	;wh_Flags
>8397	03					.byte 3	;wh_CodeLength
>8398	10					  .byte LinkDisplacement	; offset to previous nt
=$8399					XtPtr1 ::= *
=33557					WordListLink ::= Nt0 ; remember the nt of this word for later
.8399	a9 75		lda #$75			lda #FSMant3
.839b	4c dd b7	jmp $b7dd			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$839e					Here1 = *	; remember here
>8397	05					.byte CodeLen	;patch wh_CodeLength
>839e	46 6c 6f 61 74 2b		Name0:	.text "Float+"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33572					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83a4	66					.byte (("Float+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>83a5	10					.byte WordFlags	;wh_Flags
>83a6	03					.byte 3	;wh_CodeLength
>83a7	0f					  .byte LinkDisplacement	; offset to previous nt
=$83a8					XtPtr1 ::= *
=33572					WordListLink ::= Nt0 ; remember the nt of this word for later
.83a8	a9 05		lda #$05	FloatPlus:	lda #5
.83aa	4c 07 ca	jmp $ca07			jmp Plus_A
=5					CodeLen	.var *-XtPtr1
=$83ad					Here1 = *	; remember here
>83a6	05					.byte CodeLen	;patch wh_CodeLength
>83ad	46 6c 6f 61 74 73		Name0:	.text "Floats"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33587					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83b3	66					.byte (("Floats"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>83b4	10					.byte WordFlags	;wh_Flags
>83b5	03					.byte 3	;wh_CodeLength
>83b6	0f					  .byte LinkDisplacement	; offset to previous nt
=$83b7					XtPtr1 ::= *
=33587					WordListLink ::= Nt0 ; remember the nt of this word for later
.83b7	a9 05		lda #$05	Floats:		lda #5
.83b9	20 dd b7	jsr $b7dd			jsr PushZA
.83bc	4c 8a ae	jmp $ae8a			jmp Star
=8					CodeLen	.var *-XtPtr1
=$83bf					Here1 = *	; remember here
>83b5	08					.byte CodeLen	;patch wh_CodeLength
>83bf	46 41 6c 69 67 6e		Name0:	.text "FAlign"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33605					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83c5	c6					.byte (("FAlign"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>83c6	00					.byte WordFlags	;wh_Flags
>83c7	03					.byte 3	;wh_CodeLength
>83c8	12					  .byte LinkDisplacement	; offset to previous nt
=$83c9					XtPtr1 ::= *
=33605					WordListLink ::= Nt0 ; remember the nt of this word for later
.83c9					FAlign:
=0					CodeLen	.var *-XtPtr1
=$83c9					Here1 = *	; remember here
>83c7	00					.byte CodeLen	;patch wh_CodeLength
.83c9	60		rts				rts
>83ca	46 41 6c 69 67 6e 65 64		Name0:	.text "FAligned"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=33618					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83d2	88					.byte (("FAligned"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>83d3	00					.byte WordFlags	;wh_Flags
>83d4	03					.byte 3	;wh_CodeLength
>83d5	0d					  .byte LinkDisplacement	; offset to previous nt
=$83d6					XtPtr1 ::= *
=33618					WordListLink ::= Nt0 ; remember the nt of this word for later
.83d6					FAligned:
=0					CodeLen	.var *-XtPtr1
=$83d6					Here1 = *	; remember here
>83d4	00					.byte CodeLen	;patch wh_CodeLength
.83d6	60		rts				rts
>83d7	48 65 78 3e 46			Name0:	.text "Hex>F"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33628					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83dc	c5					.byte (("Hex>F"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>83dd	10					.byte WordFlags	;wh_Flags
>83de	03					.byte 3	;wh_CodeLength
>83df	0a					  .byte LinkDisplacement	; offset to previous nt
=$83e0					XtPtr1 ::= *
=33628					WordListLink ::= Nt0 ; remember the nt of this word for later
.83e0	20 bd 84	jsr $84bd	HexToF:		jsr FAllocX		; alloc FP stack entry, X= fp stack index
.83e3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.83e5	a4 4c		ldy $4c				ldy FIndex		; Y= FP stack index
.83e7	20 d4 b3	jsr $b3d4			jsr PopA		; pop n_exp
.83ea	99 4d 00	sta $004d,y			sta FSExp,y
.83ed	b5 25		lda $25,x			lda DStack+1,x
.83ef	99 57 00	sta $0057,y			sta FSMant0,y
.83f2	b5 24		lda $24,x			lda DStack+0,x
.83f4	99 61 00	sta $0061,y			sta FSMant1,y
.83f7	b5 27		lda $27,x			lda DStack+3,x
.83f9	99 6b 00	sta $006b,y			sta FSMant2,y
.83fc	b5 26		lda $26,x			lda DStack+2,x
.83fe	99 75 00	sta $0075,y			sta FSMant3,y
.8401	4c 31 c5	jmp $c531			jmp Two_Drop
=36					CodeLen	.var *-XtPtr1
=$8404					Here1 = *	; remember here
>83de	24					.byte CodeLen	;patch wh_CodeLength
>8404	46 3e 48 65 78			Name0:	.text "F>Hex"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33673					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8409	05					.byte (("F>Hex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>840a	10					.byte WordFlags	;wh_Flags
>840b	03					.byte 3	;wh_CodeLength
>840c	2d					  .byte LinkDisplacement	; offset to previous nt
=$840d					XtPtr1 ::= *
=33673					WordListLink ::= Nt0 ; remember the nt of this word for later
.840d	a4 4c		ldy $4c		FToHex:		ldy FIndex	; Y= FP stack index
.840f	ca		dex				dex
.8410	ca		dex				dex
.8411	ca		dex				dex
.8412	ca		dex				dex
.8413	ca		dex				dex
.8414	ca		dex				dex
.8415	b9 57 00	lda $0057,y			lda FSMant0,y	; copy mantissa
.8418	95 27		sta $27,x			sta DStack+3,x
.841a	b9 61 00	lda $0061,y			lda FSMant1,y
.841d	95 26		sta $26,x			sta DStack+2,x
.841f	b9 6b 00	lda $006b,y			lda FSMant2,y
.8422	95 29		sta $29,x			sta DStack+5,x
.8424	b9 75 00	lda $0075,y			lda FSMant3,y
.8427	95 28		sta $28,x			sta DStack+4,x
.8429	b9 4d 00	lda $004d,y			lda FSExp,y	; copy exponent
.842c	95 24		sta $24,x			sta DStack+0,x
.842e	29 80		and #$80			and #$80	;   sign extend
.8430	f0 02		beq $8434			beq +
.8432	a9 ff		lda #$ff			lda #$ff
.8434	95 25		sta $25,x	+		sta DStack+1,x
.8436	e6 4c		inc $4c				inc FIndex	; FDrop
.8438	60		rts				rts
=44					CodeLen	.var *-XtPtr1
=$8439					Here1 = *	; remember here
>840b	2c					.byte CodeLen	;patch wh_CodeLength
>8439	46 2e 48 65 78			Name0:	.text "F.Hex"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33726					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>843e	05					.byte (("F.Hex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>843f	10					.byte WordFlags	;wh_Flags
>8440	03					.byte 3	;wh_CodeLength
>8441	35					  .byte LinkDisplacement	; offset to previous nt
=$8442					XtPtr1 ::= *
=33726					WordListLink ::= Nt0 ; remember the nt of this word for later
.8442	20 0d 84	jsr $840d	FDotHex:	jsr FToHex	; get parts of r
.8445	20 71 ce	jsr $ce71			jsr Not_Rot
.8448	20 09 a9	jsr $a909			jsr Dot_Hex	; do mantissa
.844b	20 09 a9	jsr $a909			jsr Dot_Hex
.844e	a9 3a		lda #$3a			lda #':'
.8450	20 bb cd	jsr $cdbb			jsr Emit_A
.8453	4c e8 a8	jmp $a8e8			jmp C_Dot_Hex	; do exponent
=20					CodeLen	.var *-XtPtr1
=$8456					Here1 = *	; remember here
>8440	14					.byte CodeLen	;patch wh_CodeLength
>8456	46 43 6d 70 41			Name0:	.text "FCmpA"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33755					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>845b	25					.byte (("FCmpA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>845c	10					.byte WordFlags	;wh_Flags
>845d	03					.byte 3	;wh_CodeLength
>845e	1d					  .byte LinkDisplacement	; offset to previous nt
=$845f					XtPtr1 ::= *
=33755					WordListLink ::= Nt0 ; remember the nt of this word for later
.845f	86 14		stx $14		FCmpA:		stx tmp1		; save data stack index
.8461	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.8463	b5 57		lda $57,x			lda FSMant0+0,x		; r2 mantissa = 0 ?
.8465	f0 35		beq $849c			beq _r2Zero
.8467	b4 58		ldy $58,x			ldy FSMant0+1,x		; r1 mantissa = 0 ?
.8469	f0 2b		beq $8496			beq _r1Zero
.846b	55 58		eor $58,x			eor FSMant0+1,x		; compare mantissa sign
.846d	30 3d		bmi $84ac			bmi _MantissaSignDifferent
.846f	38		sec				sec			; compare exponent
.8470	b5 4e		lda $4e,x			lda FSExp+1,x
.8472	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8474	d0 2b		bne $84a1			bne _ExponentDifferent
.8476	98		tya				tya			; compare mantissa MSB
.8477	f5 57		sbc $57,x			sbc FSMant0+0,x		;   always same sign so can't overflow
.8479	d0 17		bne $8492			bne _13
.847b	b5 62		lda $62,x			lda FSMant1+1,x		; compare mantissa 1
.847d	f5 61		sbc $61,x			sbc FSMant1+0,x
.847f	d0 0c		bne $848d			bne _12
.8481	b5 6c		lda $6c,x			lda FSMant2+1,x		; compare mantissa 2
.8483	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8485	d0 06		bne $848d			bne _12
.8487	b5 76		lda $76,x			lda FSMant3+1,x		; compare mantissa LSB
.8489	f5 75		sbc $75,x			sbc FSMant3+0,x
.848b	f0 05		beq $8492			beq _13
.848d	6a		ror a		_12:		ror a
.848e	49 80		eor #$80	_14:		eor #$80
.8490	09 01		ora #$01			ora #1
.8492	a6 14		ldx $14		_13:		ldx tmp1		; restore data stack index
.8494	a8		tay				tay			; set CPU flags
.8495	60		rts				rts
.8496	b5 57		lda $57,x	_r1Zero:	lda FSMant0+0,x		; return r2
.8498	d0 f4		bne $848e			bne _14
.849a	f0 f6		beq $8492			beq _13
.849c	b5 58		lda $58,x	_r2Zero:	lda FSMant0+1,x		; return 0-r1
.849e	4c 92 84	jmp $8492			jmp _13
.84a1					_ExponentDifferent:
.84a1	50 02		bvc $84a5			bvc +
.84a3	49 80		eor #$80			eor #$80
.84a5					+
.84a5	55 57		eor $57,x			eor FSMant0+0,x
.84a7	a6 14		ldx $14				ldx tmp1		; restore data stack index
.84a9	09 01		ora #$01			ora #1			; set CPU flags
.84ab	60		rts				rts
.84ac					_MantissaSignDifferent:
.84ac	98		tya				tya
.84ad	a6 14		ldx $14				ldx tmp1		; restore data stack index
.84af	09 01		ora #$01			ora #1
.84b1	60		rts				rts
=83					CodeLen	.var *-XtPtr1
=$84b2					Here1 = *	; remember here
>845d	53					.byte CodeLen	;patch wh_CodeLength
>84b2	46 41 6c 6c 6f 63 58		Name0:	.text "FAllocX"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=33849					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84b9	07					.byte (("FAllocX"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=94					LinkDisplacement = Nt0-WordListLink
>84ba	10					.byte WordFlags	;wh_Flags
>84bb	03					.byte 3	;wh_CodeLength
>84bc	5e					  .byte LinkDisplacement	; offset to previous nt
=$84bd					XtPtr1 ::= *
=33849					WordListLink ::= Nt0 ; remember the nt of this word for later
.84bd	86 14		stx $14		FAllocX:	stx tmp1+0	; save data stack index
.84bf	a6 4c		ldx $4c				ldx FIndex	; X= floating point stack index
.84c1	ca		dex				dex		; alloc FP stack entry
.84c2	e0 0a		cpx #$0a			cpx #FDim	; overflow or underflow?
.84c4	b0 03		bcs $84c9			bcs _err
.84c6	86 4c		stx $4c				stx FIndex
.84c8	60		rts				rts		; return X= FP stack index
.84c9	08		php		_err:		php		; save sign bit
.84ca	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.84cc	28		plp				plp		; restore sign bit
.84cd	4c 45 b4	jmp $b445			jmp Throw_FPStack
=19					CodeLen	.var *-XtPtr1
=$84d0					Here1 = *	; remember here
>84bb	13					.byte CodeLen	;patch wh_CodeLength
>84d0	46 4d 61 78			Name0:	.text "FMax"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33876					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84d4	04					.byte (("FMax"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>84d5	10					.byte WordFlags	;wh_Flags
>84d6	03					.byte 3	;wh_CodeLength
>84d7	1b					  .byte LinkDisplacement	; offset to previous nt
=$84d8					XtPtr1 ::= *
=33876					WordListLink ::= Nt0 ; remember the nt of this word for later
.84d8	20 5f 84	jsr $845f	FMax:		jsr FCmpA
.84db	10 2c		bpl $8509			bpl FDrop
.84dd	30 44		bmi $8523			bmi FNip
=7					CodeLen	.var *-XtPtr1
=$84df					Here1 = *	; remember here
>84d6	07					.byte CodeLen	;patch wh_CodeLength
>84df	46 4d 69 6e			Name0:	.text "FMin"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33891					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84e3	c4					.byte (("FMin"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>84e4	10					.byte WordFlags	;wh_Flags
>84e5	03					.byte 3	;wh_CodeLength
>84e6	0f					  .byte LinkDisplacement	; offset to previous nt
=$84e7					XtPtr1 ::= *
=33891					WordListLink ::= Nt0 ; remember the nt of this word for later
.84e7	20 5f 84	jsr $845f	FMin:		jsr FCmpA
.84ea	30 1d		bmi $8509			bmi FDrop
.84ec	10 35		bpl $8523			bpl FNip
=7					CodeLen	.var *-XtPtr1
=$84ee					Here1 = *	; remember here
>84e5	07					.byte CodeLen	;patch wh_CodeLength
>84ee	46 44 65 70 74 68		Name0:	.text "FDepth"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33908					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84f4	06					.byte (("FDepth"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>84f5	10					.byte WordFlags	;wh_Flags
>84f6	03					.byte 3	;wh_CodeLength
>84f7	11					  .byte LinkDisplacement	; offset to previous nt
=$84f8					XtPtr1 ::= *
=33908					WordListLink ::= Nt0 ; remember the nt of this word for later
.84f8	a9 0a		lda #$0a	FDepth:		lda #FDim
.84fa	38		sec				sec
.84fb	e5 4c		sbc $4c				sbc FIndex
.84fd	4c dd b7	jmp $b7dd			jmp PushZA
=8					CodeLen	.var *-XtPtr1
=$8500					Here1 = *	; remember here
>84f6	08					.byte CodeLen	;patch wh_CodeLength
>8500	46 44 72 6f 70			Name0:	.text "FDrop"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33925					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8505	05					.byte (("FDrop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>8506	00					.byte WordFlags	;wh_Flags
>8507	03					.byte 3	;wh_CodeLength
>8508	11					  .byte LinkDisplacement	; offset to previous nt
=$8509					XtPtr1 ::= *
=33925					WordListLink ::= Nt0 ; remember the nt of this word for later
.8509	e6 4c		inc $4c		FDrop:		inc FIndex
=2					CodeLen	.var *-XtPtr1
=$850b					Here1 = *	; remember here
>8507	02					.byte CodeLen	;patch wh_CodeLength
.850b	60		rts				rts
>850c	46 32 44 72 6f 70		Name0:	.text "F2Drop"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33938					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8512	06					.byte (("F2Drop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8513	00					.byte WordFlags	;wh_Flags
>8514	03					.byte 3	;wh_CodeLength
>8515	0d					  .byte LinkDisplacement	; offset to previous nt
=$8516					XtPtr1 ::= *
=33938					WordListLink ::= Nt0 ; remember the nt of this word for later
.8516	e6 4c		inc $4c		F2Drop:		inc FIndex
.8518	e6 4c		inc $4c				inc FIndex
=4					CodeLen	.var *-XtPtr1
=$851a					Here1 = *	; remember here
>8514	04					.byte CodeLen	;patch wh_CodeLength
.851a	60		rts				rts
>851b	46 4e 69 70			Name0:	.text "FNip"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33951					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>851f	04					.byte (("FNip"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8520	00					.byte WordFlags	;wh_Flags
>8521	03					.byte 3	;wh_CodeLength
>8522	0d					  .byte LinkDisplacement	; offset to previous nt
=$8523					XtPtr1 ::= *
=33951					WordListLink ::= Nt0 ; remember the nt of this word for later
.8523	86 14		stx $14		FNip:		stx tmp1		; save data stack index
.8525	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.8527	b5 4d		lda $4d,x			lda FSExp+0,x		; copy exponent
.8529	95 4e		sta $4e,x			sta FSExp+1,x
.852b	b5 57		lda $57,x			lda FSMant0+0,x		; copy mantissa
.852d	95 58		sta $58,x			sta FSMant0+1,x
.852f	b5 61		lda $61,x			lda FSMant1+0,x
.8531	95 62		sta $62,x			sta FSMant1+1,x
.8533	b5 6b		lda $6b,x			lda FSMant2+0,x
.8535	95 6c		sta $6c,x			sta FSMant2+1,x
.8537	b5 75		lda $75,x			lda FSMant3+0,x
.8539	95 76		sta $76,x			sta FSMant3+1,x
.853b	e6 4c		inc $4c				inc FIndex		; FDrop
.853d	a6 14		ldx $14				ldx tmp1		; restore data stack index
=28					CodeLen	.var *-XtPtr1
=$853f					Here1 = *	; remember here
>8521	1c					.byte CodeLen	;patch wh_CodeLength
.853f	60		rts				rts
>8540	46 44 75 70			Name0:	.text "FDup"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33988					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8544	04					.byte (("FDup"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>8545	00					.byte WordFlags	;wh_Flags
>8546	03					.byte 3	;wh_CodeLength
>8547	25					  .byte LinkDisplacement	; offset to previous nt
=$8548					XtPtr1 ::= *
=33988					WordListLink ::= Nt0 ; remember the nt of this word for later
.8548	20 bd 84	jsr $84bd	FDup:		jsr FAllocX		; alloc FP stack entry, X=fp stack index
.854b	b5 4e		lda $4e,x			lda FSExp+1,x		; copy exponent
.854d	95 4d		sta $4d,x			sta FSExp+0,x
.854f	b5 58		lda $58,x			lda FSMant0+1,x		; copy mantissa
.8551	95 57		sta $57,x			sta FSMant0+0,x
.8553	b5 62		lda $62,x			lda FSMant1+1,x
.8555	95 61		sta $61,x			sta FSMant1+0,x
.8557	b5 6c		lda $6c,x			lda FSMant2+1,x
.8559	95 6b		sta $6b,x			sta FSMant2+0,x
.855b	b5 76		lda $76,x			lda FSMant3+1,x
.855d	95 75		sta $75,x			sta FSMant3+0,x
.855f	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CodeLen	.var *-XtPtr1
=$8561					Here1 = *	; remember here
>8546	19					.byte CodeLen	;patch wh_CodeLength
.8561	60		rts				rts
>8562	46 4f 76 65 72			Name0:	.text "FOver"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34023					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8567	45					.byte (("FOver"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>8568	00					.byte WordFlags	;wh_Flags
>8569	03					.byte 3	;wh_CodeLength
>856a	23					  .byte LinkDisplacement	; offset to previous nt
=$856b					XtPtr1 ::= *
=34023					WordListLink ::= Nt0 ; remember the nt of this word for later
.856b	20 bd 84	jsr $84bd	FOver:		jsr FAllocX		; alloc FP stack entry, X=fp stack index
.856e	b5 4f		lda $4f,x			lda FSExp+2,x		; copy exponent
.8570	95 4d		sta $4d,x			sta FSExp+0,x
.8572	b5 59		lda $59,x			lda FSMant0+2,x		; copy mantissa
.8574	95 57		sta $57,x			sta FSMant0+0,x
.8576	b5 63		lda $63,x			lda FSMant1+2,x
.8578	95 61		sta $61,x			sta FSMant1+0,x
.857a	b5 6d		lda $6d,x			lda FSMant2+2,x
.857c	95 6b		sta $6b,x			sta FSMant2+0,x
.857e	b5 77		lda $77,x			lda FSMant3+2,x
.8580	95 75		sta $75,x			sta FSMant3+0,x
.8582	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CodeLen	.var *-XtPtr1
=$8584					Here1 = *	; remember here
>8569	19					.byte CodeLen	;patch wh_CodeLength
.8584	60		rts				rts
>8585	46 50 69 63 6b			Name0:	.text "FPick"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34058					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>858a	65					.byte (("FPick"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>858b	00					.byte WordFlags	;wh_Flags
>858c	03					.byte 3	;wh_CodeLength
>858d	23					  .byte LinkDisplacement	; offset to previous nt
=$858e					XtPtr1 ::= *
=34058					WordListLink ::= Nt0 ; remember the nt of this word for later
.858e	20 d4 b3	jsr $b3d4	FPick:		jsr PopA		; pop u (desired entry #)
.8591	18		clc		FPickA:		clc			; Y= fp stack index of [u]
.8592	65 4c		adc $4c				adc FIndex
.8594	a8		tay		FPick3:		tay
.8595	20 bd 84	jsr $84bd			jsr FAllocX		; alloc FP stack entry, X=fp stack index
.8598	b9 4d 00	lda $004d,y			lda FSExp,y		; copy exponent
.859b	95 4d		sta $4d,x			sta FSExp,x
.859d	b9 57 00	lda $0057,y			lda FSMant0,y		; copy mantissa
.85a0	95 57		sta $57,x			sta FSMant0,x
.85a2	b9 61 00	lda $0061,y			lda FSMant1,y
.85a5	95 61		sta $61,x			sta FSMant1,x
.85a7	b9 6b 00	lda $006b,y			lda FSMant2,y
.85aa	95 6b		sta $6b,x			sta FSMant2,x
.85ac	b9 75 00	lda $0075,y			lda FSMant3,y
.85af	95 75		sta $75,x			sta FSMant3,x
.85b1	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=37					CodeLen	.var *-XtPtr1
=$85b3					Here1 = *	; remember here
>858c	25					.byte CodeLen	;patch wh_CodeLength
.85b3	60		rts				rts
>85b4	46 32 44 75 70			Name0:	.text "F2Dup"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34105					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>85b9	05					.byte (("F2Dup"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=47					LinkDisplacement = Nt0-WordListLink
>85ba	10					.byte WordFlags	;wh_Flags
>85bb	03					.byte 3	;wh_CodeLength
>85bc	2f					  .byte LinkDisplacement	; offset to previous nt
=$85bd					XtPtr1 ::= *
=34105					WordListLink ::= Nt0 ; remember the nt of this word for later
.85bd	20 6b 85	jsr $856b	F2Dup:		jsr FOver
.85c0	4c 6b 85	jmp $856b			jmp FOver
=6					CodeLen	.var *-XtPtr1
=$85c3					Here1 = *	; remember here
>85bb	06					.byte CodeLen	;patch wh_CodeLength
>85c3	46 53 77 61 70			Name0:	.text "FSwap"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34120					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>85c8	05					.byte (("FSwap"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>85c9	00					.byte WordFlags	;wh_Flags
>85ca	03					.byte 3	;wh_CodeLength
>85cb	0f					  .byte LinkDisplacement	; offset to previous nt
=$85cc					XtPtr1 ::= *
=34120					WordListLink ::= Nt0 ; remember the nt of this word for later
.85cc	86 14		stx $14		FSwap:		stx tmp1+0		; save data stack index
.85ce	a6 4c		ldx $4c				ldx FIndex		; X=FP stack index
.85d0	b5 4d		lda $4d,x			lda FSExp+0,x		; do FSExp
.85d2	b4 4e		ldy $4e,x			ldy FSExp+1,x
.85d4	95 4e		sta $4e,x			sta FSExp+1,x
.85d6	94 4d		sty $4d,x			sty FSExp+0,x
.85d8	b5 57		lda $57,x			lda FSMant0+0,x		; do FSMant0
.85da	b4 58		ldy $58,x			ldy FSMant0+1,x
.85dc	95 58		sta $58,x			sta FSMant0+1,x
.85de	94 57		sty $57,x			sty FSMant0+0,x
.85e0	b5 61		lda $61,x			lda FSMant1+0,x		; do FSMant1
.85e2	b4 62		ldy $62,x			ldy FSMant1+1,x
.85e4	95 62		sta $62,x			sta FSMant1+1,x
.85e6	94 61		sty $61,x			sty FSMant1+0,x
.85e8	b5 6b		lda $6b,x			lda FSMant2+0,x		; do FSMant2
.85ea	b4 6c		ldy $6c,x			ldy FSMant2+1,x
.85ec	95 6c		sta $6c,x			sta FSMant2+1,x
.85ee	94 6b		sty $6b,x			sty FSMant2+0,x
.85f0	b5 75		lda $75,x			lda FSMant3+0,x		; do FSMant3
.85f2	b4 76		ldy $76,x			ldy FSMant3+1,x
.85f4	95 76		sta $76,x			sta FSMant3+1,x
.85f6	94 75		sty $75,x			sty FSMant3+0,x
.85f8	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=46					CodeLen	.var *-XtPtr1
=$85fa					Here1 = *	; remember here
>85ca	2e					.byte CodeLen	;patch wh_CodeLength
.85fa	60		rts				rts
>85fb	46 54 75 63 6b			Name0:	.text "FTuck"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34176					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8600	65					.byte (("FTuck"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>8601	10					.byte WordFlags	;wh_Flags
>8602	03					.byte 3	;wh_CodeLength
>8603	38					  .byte LinkDisplacement	; offset to previous nt
=$8604					XtPtr1 ::= *
=34176					WordListLink ::= Nt0 ; remember the nt of this word for later
.8604	20 cc 85	jsr $85cc	FTuck:		jsr FSwap
.8607	4c 6b 85	jmp $856b			jmp FOver
=6					CodeLen	.var *-XtPtr1
=$860a					Here1 = *	; remember here
>8602	06					.byte CodeLen	;patch wh_CodeLength
>860a	46 52 6f 74			Name0:	.text "FRot"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34190					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>860e	84					.byte (("FRot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>860f	00					.byte WordFlags	;wh_Flags
>8610	03					.byte 3	;wh_CodeLength
>8611	0e					  .byte LinkDisplacement	; offset to previous nt
=$8612					XtPtr1 ::= *
=34190					WordListLink ::= Nt0 ; remember the nt of this word for later
.8612	86 14		stx $14		FRot:		stx tmp1		; save data stack index
.8614	a5 4c		lda $4c				lda FIndex		; for FSMant3, FSMant2, FSMant1, FSMant0, FSExp
.8616	18		clc				clc
.8617	69 28		adc #$28			adc #4*FDim
.8619	d0 03		bne $861e			bne _3
.861b	8a		txa		_2:		txa			;    next byte
.861c	e9 0a		sbc #$0a			sbc #FDim
.861e	aa		tax		_3:		tax
.861f	b5 4f		lda $4f,x			lda FSExp+2,x		;   do a byte
.8621	b4 4e		ldy $4e,x			ldy FSExp+1,x
.8623	94 4f		sty $4f,x			sty FSExp+2,x
.8625	b4 4d		ldy $4d,x			ldy FSExp+0,x
.8627	94 4e		sty $4e,x			sty FSExp+1,x
.8629	95 4d		sta $4d,x			sta FSExp+0,x
.862b	e4 4c		cpx $4c				cpx FIndex		; done?
.862d	d0 ec		bne $861b			bne _2
.862f	a6 14		ldx $14				ldx tmp1		; restore param stack index
=31					CodeLen	.var *-XtPtr1
=$8631					Here1 = *	; remember here
>8610	1f					.byte CodeLen	;patch wh_CodeLength
.8631	60		rts				rts
>8632	46 2d 52 6f 74			Name0:	.text "F-Rot"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34231					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8637	85					.byte (("F-Rot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=41					LinkDisplacement = Nt0-WordListLink
>8638	10					.byte WordFlags	;wh_Flags
>8639	03					.byte 3	;wh_CodeLength
>863a	29					  .byte LinkDisplacement	; offset to previous nt
=$863b					XtPtr1 ::= *
=34231					WordListLink ::= Nt0 ; remember the nt of this word for later
.863b	20 12 86	jsr $8612	FMRot:		jsr FRot
.863e	4c 12 86	jmp $8612			jmp FRot
=6					CodeLen	.var *-XtPtr1
=$8641					Here1 = *	; remember here
>8639	06					.byte CodeLen	;patch wh_CodeLength
>8641	46 40				Name0:	.text "F@"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34243					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8643	02					.byte (("F@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>8644	00					.byte WordFlags	;wh_Flags
>8645	03					.byte 3	;wh_CodeLength
>8646	0c					  .byte LinkDisplacement	; offset to previous nt
=$8647					XtPtr1 ::= *
=34243					WordListLink ::= Nt0 ; remember the nt of this word for later
.8647	20 ef b3	jsr $b3ef	FAt:		jsr PopYA		; pop addr
.864a	85 16		sta $16		FAt_YA:		sta tmp2+0		; save addr
.864c	84 17		sty $17				sty tmp2+1
.864e	a0 00		ldy #$00			ldy #0			; starting offset from tmp2
.8650	20 bd 84	jsr $84bd	FAt_Tmp2Y:	jsr FAllocX		; alloc FP stack entry, X= fp stack index
.8653	b1 16		lda ($16),y			lda (tmp2),y		; copy mantissa
.8655	95 75		sta $75,x			sta FSMant3,x
.8657	c8		iny				iny
.8658	b1 16		lda ($16),y			lda (tmp2),y
.865a	95 6b		sta $6b,x			sta FSMant2,x
.865c	c8		iny				iny
.865d	b1 16		lda ($16),y			lda (tmp2),y
.865f	95 61		sta $61,x			sta FSMant1,x
.8661	c8		iny				iny
.8662	b1 16		lda ($16),y			lda (tmp2),y
.8664	95 57		sta $57,x			sta FSMant0,x
.8666	c8		iny				iny			; copy exponent
.8667	b1 16		lda ($16),y			lda (tmp2),y
.8669	95 4d		sta $4d,x			sta FSExp,x
.866b	a6 14		ldx $14				ldx tmp1		; restore data stack index
=38					CodeLen	.var *-XtPtr1
=$866d					Here1 = *	; remember here
>8645	26					.byte CodeLen	;patch wh_CodeLength
.866d	60		rts				rts
>866e	46 21				Name0:	.text "F!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34288					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8670	22					.byte (("F!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>8671	00					.byte WordFlags	;wh_Flags
>8672	03					.byte 3	;wh_CodeLength
>8673	2d					  .byte LinkDisplacement	; offset to previous nt
=$8674					XtPtr1 ::= *
=34288					WordListLink ::= Nt0 ; remember the nt of this word for later
.8674	20 ef b3	jsr $b3ef	FStore:		jsr PopYA		; pop addr
.8677	85 14		sta $14		FStore_YA:	sta tmp1+0		; save addr
.8679	84 15		sty $15				sty tmp1+1
.867b	a0 00		ldy #$00			ldy #0
.867d	86 16		stx $16				stx tmp2		; save data stack index
.867f	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.8681	b5 75		lda $75,x			lda FSMant3,x		; copy mantissa
.8683	91 14		sta ($14),y			sta (tmp1),y
.8685	b5 6b		lda $6b,x			lda FSMant2,x
.8687	c8		iny				iny
.8688	91 14		sta ($14),y			sta (tmp1),y
.868a	b5 61		lda $61,x			lda FSMant1,x
.868c	c8		iny				iny
.868d	91 14		sta ($14),y			sta (tmp1),y
.868f	b5 57		lda $57,x			lda FSMant0,x
.8691	c8		iny				iny
.8692	91 14		sta ($14),y			sta (tmp1),y
.8694	b5 4d		lda $4d,x			lda FSExp,x		; copy exponent
.8696	c8		iny				iny
.8697	91 14		sta ($14),y			sta (tmp1),y
.8699	e6 4c		inc $4c				inc FIndex		; FDrop
.869b	a6 16		ldx $16				ldx tmp2		; restore data stack index
=41					CodeLen	.var *-XtPtr1
=$869d					Here1 = *	; remember here
>8672	29					.byte CodeLen	;patch wh_CodeLength
.869d	60		rts				rts
>869e	46 2c				Name0:	.text "F,"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34336					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86a0	82					.byte (("F,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=48					LinkDisplacement = Nt0-WordListLink
>86a1	10					.byte WordFlags	;wh_Flags
>86a2	03					.byte 3	;wh_CodeLength
>86a3	30					  .byte LinkDisplacement	; offset to previous nt
=$86a4					XtPtr1 ::= *
=34336					WordListLink ::= Nt0 ; remember the nt of this word for later
.86a4	a5 00		lda $00		FComma:		lda cp+0		; store f at Here
.86a6	a4 01		ldy $01				ldy cp+1
.86a8	20 77 86	jsr $8677			jsr FStore_YA
.86ab	a9 05		lda #$05			lda #5			; Float
.86ad	20 dd b7	jsr $b7dd			jsr PushZA
.86b0	4c 9d c0	jmp $c09d			jmp Allot
=15					CodeLen	.var *-XtPtr1
=$86b3					Here1 = *	; remember here
>86a2	0f					.byte CodeLen	;patch wh_CodeLength
>86b3	46 30 21			Name0:	.text "F0!"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34358					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86b6	23					.byte (("F0!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>86b7	10					.byte WordFlags	;wh_Flags
>86b8	03					.byte 3	;wh_CodeLength
>86b9	16					  .byte LinkDisplacement	; offset to previous nt
=$86ba					XtPtr1 ::= *
=34358					WordListLink ::= Nt0 ; remember the nt of this word for later
.86ba	20 a6 88	jsr $88a6	FZStore:	jsr F0
.86bd	4c 74 86	jmp $8674			jmp FStore
=6					CodeLen	.var *-XtPtr1
=$86c0					Here1 = *	; remember here
>86b8	06					.byte CodeLen	;patch wh_CodeLength
>86c0	46 30 3d			Name0:	.text "F0="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34371					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86c3	a3					.byte (("F0="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>86c4	10					.byte WordFlags	;wh_Flags
>86c5	03					.byte 3	;wh_CodeLength
>86c6	0d					  .byte LinkDisplacement	; offset to previous nt
=$86c7					XtPtr1 ::= *
=34371					WordListLink ::= Nt0 ; remember the nt of this word for later
.86c7	a4 4c		ldy $4c		FZEq:		ldy FIndex
.86c9	b9 57 00	lda $0057,y			lda FSMant0,y
.86cc	d0 24		bne $86f2			bne FFalse1
.86ce					FTrue1:
.86ce	e6 4c		inc $4c				inc FIndex	; FDrop
.86d0	4c bd b7	jmp $b7bd			jmp True	; return true
=12					CodeLen	.var *-XtPtr1
=$86d3					Here1 = *	; remember here
>86c5	0c					.byte CodeLen	;patch wh_CodeLength
>86d3	46 30 3c 3e			Name0:	.text "F0<>"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34391					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86d7	c4					.byte (("F0<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>86d8	10					.byte WordFlags	;wh_Flags
>86d9	03					.byte 3	;wh_CodeLength
>86da	14					  .byte LinkDisplacement	; offset to previous nt
=$86db					XtPtr1 ::= *
=34391					WordListLink ::= Nt0 ; remember the nt of this word for later
.86db	a4 4c		ldy $4c		FZNe:		ldy FIndex
.86dd	b9 57 00	lda $0057,y			lda FSMant0,y
.86e0	d0 ec		bne $86ce			bne FTrue1
.86e2	f0 0e		beq $86f2			beq FFalse1
=9					CodeLen	.var *-XtPtr1
=$86e4					Here1 = *	; remember here
>86d9	09					.byte CodeLen	;patch wh_CodeLength
>86e4	46 30 3c			Name0:	.text "F0<"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34407					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86e7	83					.byte (("F0<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>86e8	10					.byte WordFlags	;wh_Flags
>86e9	03					.byte 3	;wh_CodeLength
>86ea	10					  .byte LinkDisplacement	; offset to previous nt
=$86eb					XtPtr1 ::= *
=34407					WordListLink ::= Nt0 ; remember the nt of this word for later
.86eb	a4 4c		ldy $4c		FZLt:		ldy FIndex
.86ed	b9 57 00	lda $0057,y			lda FSMant0,y
.86f0	30 dc		bmi $86ce			bmi FTrue1
.86f2					FFalse1:
.86f2	e6 4c		inc $4c				inc FIndex	; FDrop
.86f4	4c cf b7	jmp $b7cf			jmp False	; return false
=12					CodeLen	.var *-XtPtr1
=$86f7					Here1 = *	; remember here
>86e9	0c					.byte CodeLen	;patch wh_CodeLength
>86f7	46 30 3e 3d			Name0:	.text "F0>="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34427					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86fb	a4					.byte (("F0>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>86fc	10					.byte WordFlags	;wh_Flags
>86fd	03					.byte 3	;wh_CodeLength
>86fe	14					  .byte LinkDisplacement	; offset to previous nt
=$86ff					XtPtr1 ::= *
=34427					WordListLink ::= Nt0 ; remember the nt of this word for later
.86ff	a4 4c		ldy $4c		FZGe:		ldy FIndex
.8701	b9 57 00	lda $0057,y			lda FSMant0,y
.8704	10 c8		bpl $86ce			bpl FTrue1
.8706	30 ea		bmi $86f2			bmi FFalse1
=9					CodeLen	.var *-XtPtr1
=$8708					Here1 = *	; remember here
>86fd	09					.byte CodeLen	;patch wh_CodeLength
>8708	46 30 3e			Name0:	.text "F0>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34443					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>870b	c3					.byte (("F0>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>870c	10					.byte WordFlags	;wh_Flags
>870d	03					.byte 3	;wh_CodeLength
>870e	10					  .byte LinkDisplacement	; offset to previous nt
=$870f					XtPtr1 ::= *
=34443					WordListLink ::= Nt0 ; remember the nt of this word for later
.870f	a4 4c		ldy $4c		FZGt:		ldy FIndex
.8711	b9 57 00	lda $0057,y			lda FSMant0,y
.8714	30 dc		bmi $86f2			bmi FFalse1
.8716	d0 b6		bne $86ce			bne FTrue1
.8718	f0 d8		beq $86f2			beq FFalse1
=11					CodeLen	.var *-XtPtr1
=$871a					Here1 = *	; remember here
>870d	0b					.byte CodeLen	;patch wh_CodeLength
>871a	46 30 3c 3d			Name0:	.text "F0<="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34462					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>871e	a4					.byte (("F0<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>871f	10					.byte WordFlags	;wh_Flags
>8720	03					.byte 3	;wh_CodeLength
>8721	13					  .byte LinkDisplacement	; offset to previous nt
=$8722					XtPtr1 ::= *
=34462					WordListLink ::= Nt0 ; remember the nt of this word for later
.8722	a4 4c		ldy $4c		FZLe:		ldy FIndex
.8724	b9 57 00	lda $0057,y			lda FSMant0,y
.8727	30 a5		bmi $86ce			bmi FTrue1
.8729	d0 c7		bne $86f2			bne FFalse1
.872b	f0 a1		beq $86ce			beq FTrue1
=11					CodeLen	.var *-XtPtr1
=$872d					Here1 = *	; remember here
>8720	0b					.byte CodeLen	;patch wh_CodeLength
>872d	46 3c				Name0:	.text "F<"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34479					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>872f	82					.byte (("F<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>8730	10					.byte WordFlags	;wh_Flags
>8731	03					.byte 3	;wh_CodeLength
>8732	11					  .byte LinkDisplacement	; offset to previous nt
=$8733					XtPtr1 ::= *
=34479					WordListLink ::= Nt0 ; remember the nt of this word for later
.8733	20 5f 84	jsr $845f	FLt:		jsr FCmpA
.8736	30 32		bmi $876a			bmi FTrue2
.8738					FFalse2:
.8738	e6 4c		inc $4c				inc FIndex	; FDrop
.873a	e6 4c		inc $4c				inc FIndex	; FDrop
.873c	4c cf b7	jmp $b7cf			jmp False	; return False
=12					CodeLen	.var *-XtPtr1
=$873f					Here1 = *	; remember here
>8731	0c					.byte CodeLen	;patch wh_CodeLength
>873f	46 3e 3d			Name0:	.text "F>="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34498					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8742	a3					.byte (("F>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>8743	10					.byte WordFlags	;wh_Flags
>8744	03					.byte 3	;wh_CodeLength
>8745	13					  .byte LinkDisplacement	; offset to previous nt
=$8746					XtPtr1 ::= *
=34498					WordListLink ::= Nt0 ; remember the nt of this word for later
.8746	20 5f 84	jsr $845f	FGe:		jsr FCmpA
.8749	10 1f		bpl $876a			bpl FTrue2
.874b	30 eb		bmi $8738			bmi FFalse2
=7					CodeLen	.var *-XtPtr1
=$874d					Here1 = *	; remember here
>8744	07					.byte CodeLen	;patch wh_CodeLength
>874d	46 3e				Name0:	.text "F>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34511					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>874f	c2					.byte (("F>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8750	10					.byte WordFlags	;wh_Flags
>8751	03					.byte 3	;wh_CodeLength
>8752	0d					  .byte LinkDisplacement	; offset to previous nt
=$8753					XtPtr1 ::= *
=34511					WordListLink ::= Nt0 ; remember the nt of this word for later
.8753	20 5f 84	jsr $845f	FGt:		jsr FCmpA
.8756	30 e0		bmi $8738			bmi FFalse2
.8758	d0 10		bne $876a			bne FTrue2
.875a	f0 dc		beq $8738			beq FFalse2
=9					CodeLen	.var *-XtPtr1
=$875c					Here1 = *	; remember here
>8751	09					.byte CodeLen	;patch wh_CodeLength
>875c	46 3c 3d			Name0:	.text "F<="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34527					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>875f	a3					.byte (("F<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8760	10					.byte WordFlags	;wh_Flags
>8761	03					.byte 3	;wh_CodeLength
>8762	10					  .byte LinkDisplacement	; offset to previous nt
=$8763					XtPtr1 ::= *
=34527					WordListLink ::= Nt0 ; remember the nt of this word for later
.8763	20 5f 84	jsr $845f	FLe:		jsr FCmpA
.8766	30 02		bmi $876a			bmi FTrue2
.8768	d0 ce		bne $8738			bne FFalse2
.876a					FTrue2:
.876a	e6 4c		inc $4c				inc FIndex	; FDrop
.876c	e6 4c		inc $4c				inc FIndex	; FDrop
.876e	4c bd b7	jmp $b7bd			jmp True	; return True
=14					CodeLen	.var *-XtPtr1
=$8771					Here1 = *	; remember here
>8761	0e					.byte CodeLen	;patch wh_CodeLength
>8771	46 3c 3e			Name0:	.text "F<>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34548					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8774	c3					.byte (("F<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>8775	10					.byte WordFlags	;wh_Flags
>8776	03					.byte 3	;wh_CodeLength
>8777	15					  .byte LinkDisplacement	; offset to previous nt
=$8778					XtPtr1 ::= *
=34548					WordListLink ::= Nt0 ; remember the nt of this word for later
.8778	20 5f 84	jsr $845f	FNe:		jsr FCmpA
.877b	d0 ed		bne $876a			bne FTrue2
.877d	f0 b9		beq $8738			beq FFalse2
=7					CodeLen	.var *-XtPtr1
=$877f					Here1 = *	; remember here
>8776	07					.byte CodeLen	;patch wh_CodeLength
>877f	46 3d				Name0:	.text "F="	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34561					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8781	a2					.byte (("F="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8782	10					.byte WordFlags	;wh_Flags
>8783	03					.byte 3	;wh_CodeLength
>8784	0d					  .byte LinkDisplacement	; offset to previous nt
=$8785					XtPtr1 ::= *
=34561					WordListLink ::= Nt0 ; remember the nt of this word for later
.8785	20 5f 84	jsr $845f	FEq:		jsr FCmpA
.8788	d0 ae		bne $8738			bne FFalse2
.878a	f0 de		beq $876a			beq FTrue2
=7					CodeLen	.var *-XtPtr1
=$878c					Here1 = *	; remember here
>8783	07					.byte CodeLen	;patch wh_CodeLength
>878c	46 7e 41 62 73			Name0:	.text "F~Abs"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34577					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8791	65					.byte (("F~Abs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8792	10					.byte WordFlags	;wh_Flags
>8793	03					.byte 3	;wh_CodeLength
>8794	10					  .byte LinkDisplacement	; offset to previous nt
=$8795					XtPtr1 ::= *
=34577					WordListLink ::= Nt0 ; remember the nt of this word for later
.8795	20 3b 86	jsr $863b	FTAbs:		jsr FMRot
.8798	20 50 8b	jsr $8b50			jsr FMinus
.879b	20 ab 8b	jsr $8bab			jsr FAbs
.879e	4c 53 87	jmp $8753			jmp FGt
=12					CodeLen	.var *-XtPtr1
=$87a1					Here1 = *	; remember here
>8793	0c					.byte CodeLen	;patch wh_CodeLength
>87a1	46 7e 52 65 6c			Name0:	.text "F~Rel"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34598					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>87a6	85					.byte (("F~Rel"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>87a7	10					.byte WordFlags	;wh_Flags
>87a8	03					.byte 3	;wh_CodeLength
>87a9	15					  .byte LinkDisplacement	; offset to previous nt
=$87aa					XtPtr1 ::= *
=34598					WordListLink ::= Nt0 ; remember the nt of this word for later
.87aa	20 6b 85	jsr $856b	FTRel:		jsr FOver
.87ad	a9 03		lda #$03			lda #3
.87af	20 91 85	jsr $8591			jsr FPickA
.87b2	20 10 8b	jsr $8b10			jsr FPlus
.87b5	20 ab 8b	jsr $8bab			jsr FAbs
.87b8	20 de 8b	jsr $8bde			jsr FStar		; r1 r2 r3*|r1+r2|
.87bb	20 3b 86	jsr $863b			jsr FMRot		; r3*|r1+r2| r1 r2
.87be	20 50 8b	jsr $8b50			jsr FMinus
.87c1	20 ab 8b	jsr $8bab			jsr FAbs
.87c4	4c 53 87	jmp $8753			jmp FGt
=29					CodeLen	.var *-XtPtr1
=$87c7					Here1 = *	; remember here
>87a8	1d					.byte CodeLen	;patch wh_CodeLength
>87c7	46 7e				Name0:	.text "F~"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34633					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>87c9	c2					.byte (("F~"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>87ca	10					.byte WordFlags	;wh_Flags
>87cb	03					.byte 3	;wh_CodeLength
>87cc	23					  .byte LinkDisplacement	; offset to previous nt
=$87cd					XtPtr1 ::= *
=34633					WordListLink ::= Nt0 ; remember the nt of this word for later
.87cd	a4 4c		ldy $4c		FTilde:		ldy FIndex
.87cf	b9 57 00	lda $0057,y			lda FSMant0,y
.87d2	30 06		bmi $87da			bmi _10			; r3<0
.87d4	d0 bf		bne $8795			bne FTAbs		; r3>0
.87d6	e6 4c		inc $4c				inc FIndex		; r3=0
.87d8	d0 ab		bne $8785			bne FEq
.87da	20 85 8b	jsr $8b85	_10:		jsr FNegate
.87dd	4c aa 87	jmp $87aa			jmp FTRel
=19					CodeLen	.var *-XtPtr1
=$87e0					Here1 = *	; remember here
>87cb	13					.byte CodeLen	;patch wh_CodeLength
>87e0	46 56 61 72 69 61 62 6c		Name0:	.text "FVariable"	;  name of word as a string, ending at wh_NameLastChar
>87e8	65
=9					NameLength = *-Name0
=34665					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>87e9	a9					.byte (("FVariable"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>87ea	18					.byte WordFlags	;wh_Flags
>87eb	03					.byte 3	;wh_CodeLength
>87ec	20					  .byte LinkDisplacement	; offset to previous nt
=$87ed					XtPtr1 ::= *
=34665					WordListLink ::= Nt0 ; remember the nt of this word for later
.87ed	20 a4 c1	jsr $c1a4	FVariable:	jsr Create		; compile word header & push PFA adr
.87f0	20 ca bb	jsr $bbca			jsr adjust_z		; fix word code length
.87f3	20 a6 88	jsr $88a6			jsr F0			; alloc & init data
.87f6	4c a4 86	jmp $86a4			jmp FComma
=12					CodeLen	.var *-XtPtr1
=$87f9					Here1 = *	; remember here
>87eb	0c					.byte CodeLen	;patch wh_CodeLength
>87f9	46 4c 69 74 65 72 61 6c		Name0:	.text "FLiteral"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=34689					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8801	88					.byte (("FLiteral"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>8802	18					.byte WordFlags	;wh_Flags
>8803	03					.byte 3	;wh_CodeLength
>8804	18					  .byte LinkDisplacement	; offset to previous nt
=$8805					XtPtr1 ::= *
=34689					WordListLink ::= Nt0 ; remember the nt of this word for later
.8805	20 1a 88	jsr $881a	FLiteral:	jsr FLitTest
.8808	f0 0a		beq $8814			beq _Short
.880a	a9 43		lda #$43			lda #<FLitI		; compile JSR FLitI
.880c	a0 88		ldy #$88			ldy #>FLitI
.880e	20 1c cd	jsr $cd1c			jsr Jsr_Comma_YA
.8811	4c a4 86	jmp $86a4			jmp FComma		; inline operand, return
.8814	20 26 88	jsr $8826	_Short:		jsr FLitShort
.8817	4c 1c cd	jmp $cd1c			jmp Jsr_Comma_YA	; compile jsr FLitYA, & return
=21					CodeLen	.var *-XtPtr1
=$881a					Here1 = *	; remember here
>8803	15					.byte CodeLen	;patch wh_CodeLength
.881a					FLitTest:
.881a	a4 4c		ldy $4c				ldy FIndex
.881c	b9 61 00	lda $0061,y			lda FSMant1,y		; will short work?
.881f	19 6b 00	ora $006b,y			ora FSMant2,y
.8822	19 75 00	ora $0075,y			ora FSMant3,y
.8825	60		rts				rts
.8826					FLitShort:
.8826	a9 a9		lda #$a9			lda #$a9		; compile LDA #mant0
.8828	20 e2 cc	jsr $cce2			jsr C_Comma_A
.882b	b9 57 00	lda $0057,y			lda FSMant0,y
.882e	20 e2 cc	jsr $cce2			jsr C_Comma_A
.8831	a9 a0		lda #$a0			lda #$a0		; compile LDY #exp
.8833	20 e2 cc	jsr $cce2			jsr C_Comma_A
.8836	b9 4d 00	lda $004d,y			lda FSExp,y
.8839	20 e2 cc	jsr $cce2			jsr C_Comma_A
.883c	e6 4c		inc $4c				inc FIndex		; FDrop
.883e	a9 8d		lda #$8d			lda #<FLitYA		; point at FLitYA
.8840	a0 88		ldy #$88			ldy #>FLitYA
.8842	60		rts				rts
.8843					FLitI:
.8843	68		pla				pla			; tmp2= RTS addr
.8844	85 16		sta $16				sta tmp2+0
.8846	18		clc				clc			; bump RTS addr over inline float data
.8847	69 05		adc #$05			adc #5
.8849	a8		tay				tay
.884a	68		pla				pla
.884b	85 17		sta $17				sta tmp2+1
.884d	69 00		adc #$00			adc #0
.884f	48		pha				pha
.8850	98		tya				tya
.8851	48		pha				pha
.8852	a0 01		ldy #$01			ldy #1			; correct for RTS addr
.8854	4c 50 86	jmp $8650			jmp FAt_Tmp2Y		; fetch inline data, & return
>8857	46 43 6f 6e 73 74 61 6e		Name0:	.text "FConstant"	;  name of word as a string, ending at wh_NameLastChar
>885f	74
=9					NameLength = *-Name0
=34784					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8860	89					.byte (("FConstant"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=95					LinkDisplacement = Nt0-WordListLink
>8861	10					.byte WordFlags	;wh_Flags
>8862	03					.byte 3	;wh_CodeLength
>8863	5f					  .byte LinkDisplacement	; offset to previous nt
=$8864					XtPtr1 ::= *
=34784					WordListLink ::= Nt0 ; remember the nt of this word for later
.8864	20 f6 c0	jsr $c0f6	FConstant:	jsr Header_Comma	; compile word header
.8867	20 1a 88	jsr $881a			jsr FLitTest		; will short work?
.886a	f0 0d		beq $8879			beq _Short
.886c	a9 82		lda #$82			lda #<FConstantRun	; compile call
.886e	a0 88		ldy #$88			ldy #>FConstantRun
.8870	20 1c cd	jsr $cd1c			jsr Jsr_Comma_YA
.8873	20 ca bb	jsr $bbca			jsr adjust_z
.8876	4c a4 86	jmp $86a4			jmp FComma		; inline operand, & return
.8879					_Short:
.8879	20 26 88	jsr $8826			jsr FLitShort		; compile load value
.887c	20 32 cd	jsr $cd32			jsr Jmp_Comma_YA	; compile JMP
.887f	4c ca bb	jmp $bbca			jmp adjust_z
=30					CodeLen	.var *-XtPtr1
=$8882					Here1 = *	; remember here
>8862	1e					.byte CodeLen	;patch wh_CodeLength
.8882					FConstantRun:
.8882	68		pla				pla			; tmp2= pop RTS addr
.8883	85 16		sta $16				sta tmp2+0
.8885	68		pla				pla
.8886	85 17		sta $17				sta tmp2+1
.8888	a0 01		ldy #$01			ldy #1			; correct for RTS addr
.888a	4c 50 86	jmp $8650			jmp FAt_Tmp2Y		; fetch inline data, & return
.888d					FLitYA:
.888d	20 bd 84	jsr $84bd			jsr FAllocX		; alloc FP stack entry, X=fp stack index
.8890	94 4d		sty $4d,x			sty FSExp,x		; exp= Y
.8892	95 57		sta $57,x			sta FSMant0,x		; Mant= A,0,0,0
.8894	a9 00		lda #$00			lda #0
.8896	95 61		sta $61,x			sta FSMant1,x
.8898	95 6b		sta $6b,x			sta FSMant2,x
.889a	95 75		sta $75,x			sta FSMant3,x
.889c	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.889e	60		rts				rts
>889f	30 2e 65			Name0:	.text "0.e"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34850					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88a2	a3					.byte (("0.e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=66					LinkDisplacement = Nt0-WordListLink
>88a3	10					.byte WordFlags	;wh_Flags
>88a4	03					.byte 3	;wh_CodeLength
>88a5	42					  .byte LinkDisplacement	; offset to previous nt
=$88a6					XtPtr1 ::= *
=34850					WordListLink ::= Nt0 ; remember the nt of this word for later
.88a6	a9 00		lda #$00	F0:		lda #0
.88a8	a0 80		ldy #$80			ldy #$80
.88aa	d0 e1		bne $888d			bne FLitYA
=6					CodeLen	.var *-XtPtr1
=$88ac					Here1 = *	; remember here
>88a4	06					.byte CodeLen	;patch wh_CodeLength
>88ac	31 30 30 30 2e 65		Name0:	.text "1000.e"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=34866					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88b2	a6					.byte (("1000.e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>88b3	10					.byte WordFlags	;wh_Flags
>88b4	03					.byte 3	;wh_CodeLength
>88b5	10					  .byte LinkDisplacement	; offset to previous nt
=$88b6					XtPtr1 ::= *
=34866					WordListLink ::= Nt0 ; remember the nt of this word for later
.88b6	a9 7d		lda #$7d	F1000:		lda #$7d
.88b8	a0 0a		ldy #$0a			ldy #10
.88ba	d0 d1		bne $888d			bne FLitYA
=6					CodeLen	.var *-XtPtr1
=$88bc					Here1 = *	; remember here
>88b4	06					.byte CodeLen	;patch wh_CodeLength
>88bc	31 30 2e 65			Name0:	.text "10.e"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34880					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88c0	a4					.byte (("10.e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>88c1	10					.byte WordFlags	;wh_Flags
>88c2	03					.byte 3	;wh_CodeLength
>88c3	0e					  .byte LinkDisplacement	; offset to previous nt
=$88c4					XtPtr1 ::= *
=34880					WordListLink ::= Nt0 ; remember the nt of this word for later
.88c4	a9 50		lda #$50	F10:		lda #$50
.88c6	a0 04		ldy #$04			ldy #4
.88c8	d0 c3		bne $888d			bne FLitYA
=6					CodeLen	.var *-XtPtr1
=$88ca					Here1 = *	; remember here
>88c2	06					.byte CodeLen	;patch wh_CodeLength
>88ca	32 2e 65			Name0:	.text "2.e"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34893					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88cd	a3					.byte (("2.e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>88ce	10					.byte WordFlags	;wh_Flags
>88cf	03					.byte 3	;wh_CodeLength
>88d0	0d					  .byte LinkDisplacement	; offset to previous nt
=$88d1					XtPtr1 ::= *
=34893					WordListLink ::= Nt0 ; remember the nt of this word for later
.88d1	a9 40		lda #$40	F2:		lda #$40
.88d3	a0 02		ldy #$02			ldy #2
.88d5	d0 b6		bne $888d			bne FLitYA
=6					CodeLen	.var *-XtPtr1
=$88d7					Here1 = *	; remember here
>88cf	06					.byte CodeLen	;patch wh_CodeLength
>88d7	31 2e 65			Name0:	.text "1.e"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34906					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88da	a3					.byte (("1.e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>88db	10					.byte WordFlags	;wh_Flags
>88dc	03					.byte 3	;wh_CodeLength
>88dd	0d					  .byte LinkDisplacement	; offset to previous nt
=$88de					XtPtr1 ::= *
=34906					WordListLink ::= Nt0 ; remember the nt of this word for later
.88de	a9 40		lda #$40	F1:		lda #$40
.88e0	a0 01		ldy #$01			ldy #1
.88e2	d0 a9		bne $888d			bne FLitYA
=6					CodeLen	.var *-XtPtr1
=$88e4					Here1 = *	; remember here
>88dc	06					.byte CodeLen	;patch wh_CodeLength
>88e4	2e 31 65			Name0:	.text ".1e"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34919					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88e7	a3					.byte ((".1e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>88e8	10					.byte WordFlags	;wh_Flags
>88e9	03					.byte 3	;wh_CodeLength
>88ea	0d					  .byte LinkDisplacement	; offset to previous nt
=$88eb					XtPtr1 ::= *
=34919					WordListLink ::= Nt0 ; remember the nt of this word for later
.88eb	20 82 88	jsr $8882	F10th:		jsr FConstantRun
>88ee	67 66 66 66					.dword $66666667	; 32 bit signed binary mantissa.  $40000000 = +0.5
>88f2	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$88f3					Here1 = *	; remember here
>88e9	08					.byte CodeLen	;patch wh_CodeLength
>88f3	50 69				Name0:	.text "Pi"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34933					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88f5	22					.byte (("Pi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>88f6	10					.byte WordFlags	;wh_Flags
>88f7	03					.byte 3	;wh_CodeLength
>88f8	0e					  .byte LinkDisplacement	; offset to previous nt
=$88f9					XtPtr1 ::= *
=34933					WordListLink ::= Nt0 ; remember the nt of this word for later
.88f9	20 82 88	jsr $8882	FPi:		jsr FConstantRun
>88fc	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8900	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$8901					Here1 = *	; remember here
>88f7	08					.byte CodeLen	;patch wh_CodeLength
>8901	50 69 2f 32			Name0:	.text "Pi/2"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34949					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8905	44					.byte (("Pi/2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8906	10					.byte WordFlags	;wh_Flags
>8907	03					.byte 3	;wh_CodeLength
>8908	10					  .byte LinkDisplacement	; offset to previous nt
=$8909					XtPtr1 ::= *
=34949					WordListLink ::= Nt0 ; remember the nt of this word for later
.8909	20 82 88	jsr $8882	FPiH:		jsr FConstantRun
>890c	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8910	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$8911					Here1 = *	; remember here
>8907	08					.byte CodeLen	;patch wh_CodeLength
>8911	50 69 2f 34			Name0:	.text "Pi/4"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34965					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8915	84					.byte (("Pi/4"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8916	10					.byte WordFlags	;wh_Flags
>8917	03					.byte 3	;wh_CodeLength
>8918	10					  .byte LinkDisplacement	; offset to previous nt
=$8919					XtPtr1 ::= *
=34965					WordListLink ::= Nt0 ; remember the nt of this word for later
.8919	20 82 88	jsr $8882	FPiQ:		jsr FConstantRun
>891c	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8920	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$8921					Here1 = *	; remember here
>8917	08					.byte CodeLen	;patch wh_CodeLength
>8921	32 50 69			Name0:	.text "2Pi"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34980					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8924	23					.byte (("2Pi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>8925	10					.byte WordFlags	;wh_Flags
>8926	03					.byte 3	;wh_CodeLength
>8927	0f					  .byte LinkDisplacement	; offset to previous nt
=$8928					XtPtr1 ::= *
=34980					WordListLink ::= Nt0 ; remember the nt of this word for later
.8928	20 82 88	jsr $8882	F2Pi:		jsr FConstantRun
>892b	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>892f	03						.char 3		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$8930					Here1 = *	; remember here
>8926	08					.byte CodeLen	;patch wh_CodeLength
>8930	46 2e 45			Name0:	.text "F.E"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34995					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8933	a3					.byte (("F.E"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>8934	10					.byte WordFlags	;wh_Flags
>8935	03					.byte 3	;wh_CodeLength
>8936	0f					  .byte LinkDisplacement	; offset to previous nt
=$8937					XtPtr1 ::= *
=34995					WordListLink ::= Nt0 ; remember the nt of this word for later
.8937	20 82 88	jsr $8882	FE:		jsr FConstantRun
>893a	2c 2a fc 56					.dword $56fc2a2c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>893e	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$893f					Here1 = *	; remember here
>8935	08					.byte CodeLen	;patch wh_CodeLength
>893f	46 56 61 6c 75 65		Name0:	.text "FValue"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=35013					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8945	a6					.byte (("FValue"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>8946	18					.byte WordFlags	;wh_Flags
>8947	03					.byte 3	;wh_CodeLength
>8948	12					  .byte LinkDisplacement	; offset to previous nt
=$8949					XtPtr1 ::= *
=35013					WordListLink ::= Nt0 ; remember the nt of this word for later
.8949	20 f6 c0	jsr $c0f6	FValue:		jsr Header_Comma	; compile word header
.894c	a9 59		lda #$59			lda #<FValue_runtime	; compile JSR FValue_runtime
.894e	a0 89		ldy #$89			ldy #>FValue_runtime
.8950	20 1c cd	jsr $cd1c			jsr Jsr_Comma_YA
.8953	20 ca bb	jsr $bbca			jsr adjust_z		; fix word length
.8956	4c a4 86	jmp $86a4			jmp FComma		; alloc & init value
=16					CodeLen	.var *-XtPtr1
=$8959					Here1 = *	; remember here
>8947	10					.byte CodeLen	;patch wh_CodeLength
.8959					FValue_runtime:
.8959	4c 82 88	jmp $8882			jmp FConstantRun
>895c	46 53 63 61 6c 65		Name0:	.text "FScale"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=35042					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8962	a6					.byte (("FScale"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>8963	10					.byte WordFlags	;wh_Flags
>8964	03					.byte 3	;wh_CodeLength
>8965	1d					  .byte LinkDisplacement	; offset to previous nt
=$8966					XtPtr1 ::= *
=35042					WordListLink ::= Nt0 ; remember the nt of this word for later
.8966	20 d4 b3	jsr $b3d4	FScale:		jsr PopA		; pop n
.8969	86 14		stx $14		FScaleA:	stx tmp1		; save data stack index
.896b	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.896d	b4 57		ldy $57,x			ldy FSMant0,x		; mantissa zero?
.896f	f0 07		beq $8978			beq _8
.8971	18		clc				clc
.8972	75 4d		adc $4d,x			adc FSExp,x
.8974	95 4d		sta $4d,x			sta FSExp,x
.8976	70 03		bvs $897b			bvs _overflow		; overflow or underflow?
.8978	a6 14		ldx $14		_8:		ldx tmp1		; restore data stack index
.897a	60		rts				rts
.897b					_overflow:
.897b	a6 14		ldx $14				ldx tmp1		; restore data stack index
.897d	20 4f b4	jsr $b44f			jsr Throw_FpOutOfRange
=26					CodeLen	.var *-XtPtr1
=$8980					Here1 = *	; remember here
>8964	1a					.byte CodeLen	;patch wh_CodeLength
>8980	46 32 2a			Name0:	.text "F2*"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=35075					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8983	43					.byte (("F2*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>8984	10					.byte WordFlags	;wh_Flags
>8985	03					.byte 3	;wh_CodeLength
>8986	21					  .byte LinkDisplacement	; offset to previous nt
=$8987					XtPtr1 ::= *
=35075					WordListLink ::= Nt0 ; remember the nt of this word for later
.8987	a9 01		lda #$01	F2Star:		lda #1
.8989	d0 de		bne $8969			bne FScaleA
=4					CodeLen	.var *-XtPtr1
=$898b					Here1 = *	; remember here
>8985	04					.byte CodeLen	;patch wh_CodeLength
>898b	46 32 2f			Name0:	.text "F2/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=35086					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>898e	e3					.byte (("F2/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>898f	10					.byte WordFlags	;wh_Flags
>8990	03					.byte 3	;wh_CodeLength
>8991	0b					  .byte LinkDisplacement	; offset to previous nt
=$8992					XtPtr1 ::= *
=35086					WordListLink ::= Nt0 ; remember the nt of this word for later
.8992	a9 ff		lda #$ff	F2Slash:	lda #$ff
.8994	d0 d3		bne $8969			bne FScaleA
=4					CodeLen	.var *-XtPtr1
=$8996					Here1 = *	; remember here
>8990	04					.byte CodeLen	;patch wh_CodeLength
>8996	46 6c 6f 6f 72			Name0:	.text "Floor"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=35099					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>899b	45					.byte (("Floor"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>899c	10					.byte WordFlags	;wh_Flags
>899d	03					.byte 3	;wh_CodeLength
>899e	0d					  .byte LinkDisplacement	; offset to previous nt
=$899f					XtPtr1 ::= *
=35099					WordListLink ::= Nt0 ; remember the nt of this word for later
.899f	a4 4c		ldy $4c		Floor:		ldy FIndex
.89a1	b9 57 00	lda $0057,y			lda FSMant0,y		; negative?
.89a4	10 19		bpl $89bf			bpl _a
.89a6	b9 4d 00	lda $004d,y			lda FSExp,y		; > -1 ?
.89a9	10 14		bpl $89bf			bpl _a
.89ab	a9 80		lda #$80			lda #$80		; return -1
.89ad	99 57 00	sta $0057,y			sta FSMant0,y
.89b0	a9 00		lda #$00			lda #0
.89b2	99 4d 00	sta $004d,y			sta FSExp,y
.89b5	99 61 00	sta $0061,y			sta FSMant1,y
.89b8	99 6b 00	sta $006b,y			sta FSMant2,y
.89bb	99 75 00	sta $0075,y			sta FSMant3,y
.89be	60		rts				rts
.89bf	a9 1f		lda #$1f	_a:		lda #31
.89c1	20 c7 89	jsr $89c7			jsr FShiftA
.89c4	4c 8a 8a	jmp $8a8a			jmp FNormX
=40					CodeLen	.var *-XtPtr1
=$89c7					Here1 = *	; remember here
>899d	28					.byte CodeLen	;patch wh_CodeLength
.89c7	86 14		stx $14		FShiftA:	stx tmp1+0		; save data stack index
.89c9	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.89cb	a8		tay		FShiftAX:	tay			; save desired alignment
.89cc	38		sec				sec			; calc bit shift count
.89cd	f5 4d		sbc $4d,x			sbc FSExp,x
.89cf	f0 2e		beq $89ff			beq _leave
.89d1	70 1e		bvs $89f1			bvs _overflow
.89d3	30 2a		bmi $89ff			bmi _leave
.89d5	c9 20		cmp #$20			cmp #32
.89d7	b0 1a		bcs $89f3			bcs _zero
.89d9	94 4d		sty $4d,x			sty FSExp,x
.89db	a8		tay				tay
.89dc	b5 57		lda $57,x			lda FSMant0,x
.89de	c9 80		cmp #$80	_12:		cmp #$80		; mantissa >>=1
.89e0	6a		ror a				ror a
.89e1	76 61		ror $61,x			ror FSMant1,x
.89e3	76 6b		ror $6b,x			ror FSMant2,x
.89e5	76 75		ror $75,x			ror FSMant3,x
.89e7	88		dey				dey
.89e8	d0 f4		bne $89de			bne _12
.89ea	95 57		sta $57,x			sta FSMant0,x
.89ec	b4 4d		ldy $4d,x	_30:		ldy FSExp,x
.89ee	a6 4c		ldx $4c				ldx FIndex		; restore fp stack index (FShiftAX could have had a funny one)
.89f0	60		rts				rts
.89f1	10 0c		bpl $89ff	_overflow:	bpl _leave
.89f3	94 4d		sty $4d,x	_zero:		sty FSExp,x		; return zero
.89f5	a9 00		lda #$00			lda #0
.89f7	95 57		sta $57,x			sta FSMant0,x
.89f9	95 61		sta $61,x			sta FSMant1,x
.89fb	95 6b		sta $6b,x			sta FSMant2,x
.89fd	95 75		sta $75,x			sta FSMant3,x
.89ff	18		clc		_leave:		clc
.8a00	90 ea		bcc $89ec			bcc _30
>8a02	46 54 72 75 6e 63		Name0:	.text "FTrunc"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=35208					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a08	66					.byte (("FTrunc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=109					LinkDisplacement = Nt0-WordListLink
>8a09	10					.byte WordFlags	;wh_Flags
>8a0a	03					.byte 3	;wh_CodeLength
>8a0b	6d					  .byte LinkDisplacement	; offset to previous nt
=$8a0c					XtPtr1 ::= *
=35208					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a0c	a4 4c		ldy $4c		FTrunc:		ldy FIndex
.8a0e	b9 57 00	lda $0057,y			lda FSMant0,y
.8a11	10 8c		bpl $899f			bpl Floor
.8a13	20 85 8b	jsr $8b85			jsr FNegate
.8a16	20 9f 89	jsr $899f			jsr Floor
.8a19	4c 85 8b	jmp $8b85			jmp FNegate
>8a1c	46 52 6f 75 6e 64		Name0:	.text "FRound"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=35234					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a22	86					.byte (("FRound"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>8a23	10					.byte WordFlags	;wh_Flags
>8a24	03					.byte 3	;wh_CodeLength
>8a25	1a					  .byte LinkDisplacement	; offset to previous nt
=$8a26					XtPtr1 ::= *
=35234					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a26	a9 1f		lda #$1f	FRound:		lda #31
.8a28	20 c7 89	jsr $89c7			jsr FShiftA
.8a2b	90 05		bcc $8a32			bcc _15
.8a2d	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8a2f	4c 44 8b	jmp $8b44			jmp F1Plus
.8a32	4c 8a 8a	jmp $8a8a	_15:		jmp FNormX
=15					CodeLen	.var *-XtPtr1
=$8a35					Here1 = *	; remember here
>8a24	0f					.byte CodeLen	;patch wh_CodeLength
>8a35	46 49 6e 74 46 72 63		Name0:	.text "FIntFrc"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=35260					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a3c	67					.byte (("FIntFrc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>8a3d	10					.byte WordFlags	;wh_Flags
>8a3e	03					.byte 3	;wh_CodeLength
>8a3f	1a					  .byte LinkDisplacement	; offset to previous nt
=$8a40					XtPtr1 ::= *
=35260					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a40	20 48 85	jsr $8548	FIntFrc:	jsr FDup	; ( r1 r1 )
.8a43	20 9f 89	jsr $899f			jsr Floor	; ( r1 rint )
.8a46	20 04 86	jsr $8604			jsr FTuck	; ( rint r1 rint )
.8a49	20 50 8b	jsr $8b50			jsr FMinus	; ( rint rfrac )
.8a4c	4c cc 85	jmp $85cc			jmp FSwap	; ( rfrac rint )
=15					CodeLen	.var *-XtPtr1
=$8a4f					Here1 = *	; remember here
>8a3e	0f					.byte CodeLen	;patch wh_CodeLength
>8a4f	46 4d 41 6c 69 67 6e 58		Name0:	.text "FMAlignX"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=35287					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a57	08					.byte (("FMAlignX"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>8a58	10					.byte WordFlags	;wh_Flags
>8a59	03					.byte 3	;wh_CodeLength
>8a5a	1b					  .byte LinkDisplacement	; offset to previous nt
=$8a5b					XtPtr1 ::= *
=35287					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a5b	86 14		stx $14		FMAlignX:	stx tmp1+0	; save data stack index
.8a5d	a6 4c		ldx $4c				ldx FIndex	; load FP stack index
.8a5f	e0 09		cpx #$09			cpx #FDim-1	; check FP stack for >=2 entries
.8a61	b0 19		bcs $8a7c			bcs Throw_FPStack_3
.8a63	b5 4d		lda $4d,x			lda FSExp+0,x	; compare exponents
.8a65	38		sec				sec
.8a66	f5 4e		sbc $4e,x			sbc FSExp+1,x
.8a68	30 03		bmi $8a6d			bmi _1		; r1 smaller?
.8a6a	d0 08		bne $8a74			bne _2		; r2 smaller?
.8a6c	60		rts				rts
.8a6d					_1:
.8a6d	70 07		bvs $8a76			bvs _2b		; was this a big positive #?
.8a6f	b5 4e		lda $4e,x	_1b:		lda FSExp+1,x	; make r1 like r2
.8a71	4c cb 89	jmp $89cb			jmp FShiftAX
.8a74					_2:
.8a74	70 f7		bvs $8a6d			bvs _1		; was this a big negative #?
.8a76	b5 4d		lda $4d,x	_2b:		lda FSExp+0,x	; make r2 like r1
.8a78	e8		inx				inx
.8a79	4c cb 89	jmp $89cb			jmp FShiftAX
=33					CodeLen	.var *-XtPtr1
=$8a7c					Here1 = *	; remember here
>8a59	21					.byte CodeLen	;patch wh_CodeLength
.8a7c	20 45 b4	jsr $b445	Throw_FPStack_3: jsr Throw_FPStack
>8a7f	46 4e 6f 72 6d			Name0:	.text "FNorm"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=35332					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a84	a5					.byte (("FNorm"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>8a85	10					.byte WordFlags	;wh_Flags
>8a86	03					.byte 3	;wh_CodeLength
>8a87	2d					  .byte LinkDisplacement	; offset to previous nt
=$8a88					XtPtr1 ::= *
=35332					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a88	86 14		stx $14		FNorm:		stx tmp1+0		; save data stack index
.8a8a	a6 4c		ldx $4c		FNormX:		ldx FIndex		; switch to FP stack
.8a8c	b4 4d		ldy $4d,x			ldy FSExp,x
.8a8e	b5 57		lda $57,x			lda FSMant0,x		; mantissa negative?
.8a90	30 2d		bmi $8abf			bmi _Neg
.8a92	d0 0f		bne $8aa3			bne _Pos2		; do byte shift
.8a94	20 f2 8a	jsr $8af2			jsr _ShiftB
.8a97	d0 0a		bne $8aa3			bne _Pos2
.8a99	20 f2 8a	jsr $8af2			jsr _ShiftB
.8a9c	d0 05		bne $8aa3			bne _Pos2
.8a9e	20 f2 8a	jsr $8af2			jsr _ShiftB
.8aa1	f0 43		beq $8ae6			beq _zero		; no significant bits left?
.8aa3	18		clc		_Pos2:		clc
.8aa4	30 0a		bmi $8ab0			bmi _RShft
.8aa6	88		dey		_Pos3:		dey			; do bit shift
.8aa7	16 75		asl $75,x			asl FSMant3,x
.8aa9	36 6b		rol $6b,x			rol FSMant2,x
.8aab	36 61		rol $61,x			rol FSMant1,x
.8aad	2a		rol a				rol a
.8aae	10 f6		bpl $8aa6			bpl _Pos3
.8ab0					_RShft:
.8ab0	c8		iny				iny
.8ab1	6a		ror a				ror a
.8ab2	76 61		ror $61,x			ror FSMant1,x
.8ab4	76 6b		ror $6b,x			ror FSMant2,x
.8ab6	76 75		ror $75,x			ror FSMant3,x
.8ab8					_28:
.8ab8	95 57		sta $57,x			sta FSMant0,x
.8aba	94 4d		sty $4d,x			sty FSExp,x
.8abc	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.8abe	60		rts				rts
.8abf					_Neg:
.8abf	c9 ff		cmp #$ff			cmp #$ff
.8ac1	d0 11		bne $8ad4			bne _Neg2	; do byte shift
.8ac3	20 f2 8a	jsr $8af2			jsr _ShiftB
.8ac6	c9 ff		cmp #$ff			cmp #$ff
.8ac8	d0 0a		bne $8ad4			bne _Neg2
.8aca	20 f2 8a	jsr $8af2			jsr _ShiftB
.8acd	c9 ff		cmp #$ff			cmp #$ff
.8acf	d0 03		bne $8ad4			bne _Neg2
.8ad1	20 f2 8a	jsr $8af2			jsr _ShiftB
.8ad4	c9 00		cmp #$00	_Neg2:		cmp #0
.8ad6	10 d8		bpl $8ab0			bpl _RShft
.8ad8	88		dey		_Neg3:		dey
.8ad9	16 75		asl $75,x			asl FSMant3,x
.8adb	36 6b		rol $6b,x			rol FSMant2,x
.8add	36 61		rol $61,x			rol FSMant1,x
.8adf	2a		rol a				rol a
.8ae0	30 f6		bmi $8ad8			bmi _Neg3
.8ae2	10 cc		bpl $8ab0			bpl _RShft
.8ae4	68		pla		_Zerop:		pla
.8ae5	68		pla				pla		; pop rts addr from _ShiftB
.8ae6	a9 00		lda #$00	_zero:		lda #0
.8ae8	95 75		sta $75,x			sta FSMant3,x
.8aea	95 6b		sta $6b,x			sta FSMant2,x
.8aec	95 61		sta $61,x			sta FSMant1,x
.8aee	a0 80		ldy #$80			ldy #$80
.8af0	d0 c6		bne $8ab8			bne _28
.8af2					_ShiftB:
.8af2	98		tya				tya		; exponent -= 8
.8af3	38		sec				sec
.8af4	e9 08		sbc #$08			sbc #8
.8af6	a8		tay				tay
.8af7	70 eb		bvs $8ae4			bvs _zerop	;is this useful? do we need more of them?
.8af9	b5 61		lda $61,x			lda FSMant1,x
.8afb	48		pha				pha
.8afc	b5 6b		lda $6b,x			lda FSMant2,x
.8afe	95 61		sta $61,x			sta FSMant1,x
.8b00	b5 75		lda $75,x			lda FSMant3,x
.8b02	95 6b		sta $6b,x			sta FSMant2,x
.8b04	a9 00		lda #$00			lda #0
.8b06	95 75		sta $75,x			sta FSMant3,x
.8b08	68		pla				pla
.8b09	60		rts				rts
=130					CodeLen	.var *-XtPtr1
=$8b0a					Here1 = *	; remember here
>8a86	82					.byte CodeLen	;patch wh_CodeLength
>8b0a	46 2b				Name0:	.text "F+"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=35468					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b0c	62					.byte (("F+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=136					LinkDisplacement = Nt0-WordListLink
>8b0d	10					.byte WordFlags	;wh_Flags
>8b0e	03					.byte 3	;wh_CodeLength
>8b0f	88					  .byte LinkDisplacement	; offset to previous nt
=$8b10					XtPtr1 ::= *
=35468					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b10	20 5b 8a	jsr $8a5b	FPlus:		jsr FMAlignX	; align mantissas, X= fp stack index
.8b13	18		clc				clc		; add mantissas
.8b14	b5 76		lda $76,x			lda FSMant3+1,x
.8b16	75 75		adc $75,x			adc FSMant3+0,x
.8b18	95 76		sta $76,x			sta FSMant3+1,x
.8b1a	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b1c	75 6b		adc $6b,x			adc FSMant2+0,x
.8b1e	95 6c		sta $6c,x			sta FSMant2+1,x
.8b20	b5 62		lda $62,x			lda FSMant1+1,x
.8b22	75 61		adc $61,x			adc FSMant1+0,x
.8b24	95 62		sta $62,x			sta FSMant1+1,x
.8b26	b5 58		lda $58,x			lda FSMant0+1,x
.8b28	75 57		adc $57,x			adc FSMant0+0,x
.8b2a					FPlusFin:
.8b2a	e8		inx				inx		; FDrop r2
.8b2b	86 4c		stx $4c				stx FIndex
.8b2d	50 09		bvc $8b38	FPlusFin3:	bvc _19		; if overflow
.8b2f	6a		ror a				ror a		;   shift mantissa right 1 bit
.8b30	76 61		ror $61,x			ror FSMant1,x
.8b32	76 6b		ror $6b,x			ror FSMant2,x
.8b34	76 75		ror $75,x			ror FSMant3,x
.8b36	f6 4d		inc $4d,x			inc FSExp,x	;   adjust exponent
.8b38					_19:
.8b38	95 57		sta $57,x			sta FSMant0,x
.8b3a	4c 8a 8a	jmp $8a8a			jmp FNormX	; normalize, return
=45					CodeLen	.var *-XtPtr1
=$8b3d					Here1 = *	; remember here
>8b0e	2d					.byte CodeLen	;patch wh_CodeLength
>8b3d	46 31 2b			Name0:	.text "F1+"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=35520					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b40	63					.byte (("F1+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>8b41	10					.byte WordFlags	;wh_Flags
>8b42	03					.byte 3	;wh_CodeLength
>8b43	34					  .byte LinkDisplacement	; offset to previous nt
=$8b44					XtPtr1 ::= *
=35520					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b44	20 de 88	jsr $88de	F1Plus:		jsr F1
.8b47	4c 10 8b	jmp $8b10			jmp FPlus
=6					CodeLen	.var *-XtPtr1
=$8b4a					Here1 = *	; remember here
>8b42	06					.byte CodeLen	;patch wh_CodeLength
>8b4a	46 2d				Name0:	.text "F-"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=35532					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b4c	a2					.byte (("F-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>8b4d	10					.byte WordFlags	;wh_Flags
>8b4e	03					.byte 3	;wh_CodeLength
>8b4f	0c					  .byte LinkDisplacement	; offset to previous nt
=$8b50					XtPtr1 ::= *
=35532					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b50	20 5b 8a	jsr $8a5b	FMinus:		jsr FMAlignX	; align mantissas
.8b53	38		sec				sec		; subtract mantissas
.8b54	b5 76		lda $76,x			lda FSMant3+1,x
.8b56	f5 75		sbc $75,x			sbc FSMant3+0,x
.8b58	95 76		sta $76,x			sta FSMant3+1,x
.8b5a	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b5c	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8b5e	95 6c		sta $6c,x			sta FSMant2+1,x
.8b60	b5 62		lda $62,x			lda FSMant1+1,x
.8b62	f5 61		sbc $61,x			sbc FSMant1+0,x
.8b64	95 62		sta $62,x			sta FSMant1+1,x
.8b66	b5 58		lda $58,x			lda FSMant0+1,x
.8b68	f5 57		sbc $57,x			sbc FSMant0+0,x
.8b6a	4c 2a 8b	jmp $8b2a			jmp FPlusFin
=29					CodeLen	.var *-XtPtr1
=$8b6d					Here1 = *	; remember here
>8b4e	1d					.byte CodeLen	;patch wh_CodeLength
>8b6d	46 31 2d			Name0:	.text "F1-"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=35568					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b70	a3					.byte (("F1-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>8b71	10					.byte WordFlags	;wh_Flags
>8b72	03					.byte 3	;wh_CodeLength
>8b73	24					  .byte LinkDisplacement	; offset to previous nt
=$8b74					XtPtr1 ::= *
=35568					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b74	20 de 88	jsr $88de	F1Minus:	jsr F1
.8b77	4c 50 8b	jmp $8b50			jmp FMinus
=6					CodeLen	.var *-XtPtr1
=$8b7a					Here1 = *	; remember here
>8b72	06					.byte CodeLen	;patch wh_CodeLength
>8b7a	46 4e 65 67 61 74 65		Name0:	.text "FNegate"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=35585					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b81	a7					.byte (("FNegate"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>8b82	10					.byte WordFlags	;wh_Flags
>8b83	03					.byte 3	;wh_CodeLength
>8b84	11					  .byte LinkDisplacement	; offset to previous nt
=$8b85					XtPtr1 ::= *
=35585					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b85	86 14		stx $14		FNegate:	stx tmp1	; save data stack index
.8b87	a6 4c		ldx $4c				ldx FIndex	; X= FP stack index
.8b89	38		sec				sec		; mantissa = 0 - mantissa
.8b8a	a9 00		lda #$00			lda #0
.8b8c	f5 75		sbc $75,x			sbc FSMant3,x
.8b8e	95 75		sta $75,x			sta FSMant3,x
.8b90	a9 00		lda #$00			lda #0
.8b92	f5 6b		sbc $6b,x			sbc FSMant2,x
.8b94	95 6b		sta $6b,x			sta FSMant2,x
.8b96	a9 00		lda #$00			lda #0
.8b98	f5 61		sbc $61,x			sbc FSMant1,x
.8b9a	95 61		sta $61,x			sta FSMant1,x
.8b9c	a9 00		lda #$00			lda #0
.8b9e	f5 57		sbc $57,x			sbc FSMant0,x
.8ba0	4c 2d 8b	jmp $8b2d			jmp FPlusFin3	; finish up, return
=30					CodeLen	.var *-XtPtr1
=$8ba3					Here1 = *	; remember here
>8b83	1e					.byte CodeLen	;patch wh_CodeLength
>8ba3	46 41 62 73			Name0:	.text "FAbs"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=35623					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8ba7	64					.byte (("FAbs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>8ba8	10					.byte WordFlags	;wh_Flags
>8ba9	03					.byte 3	;wh_CodeLength
>8baa	26					  .byte LinkDisplacement	; offset to previous nt
=$8bab					XtPtr1 ::= *
=35623					WordListLink ::= Nt0 ; remember the nt of this word for later
.8bab	a4 4c		ldy $4c		FAbs:		ldy FIndex
.8bad	b9 57 00	lda $0057,y			lda FSMant0,y		; mantissa negative?
.8bb0	30 d3		bmi $8b85			bmi FNegate
.8bb2	60		rts				rts
=8					CodeLen	.var *-XtPtr1
=$8bb3					Here1 = *	; remember here
>8ba9	08					.byte CodeLen	;patch wh_CodeLength
.8bb3	4c 45 b4	jmp $b445	Throw_FPStack_4: jmp Throw_FPStack
.8bb6	a4 4c		ldy $4c		FPos:		ldy FIndex		; load FP stack index
.8bb8	c0 09		cpy #$09			cpy #FDim-1		; check FP stack for 2
.8bba	b0 f7		bcs $8bb3			bcs Throw_FPStack_4
.8bbc	b9 57 00	lda $0057,y			lda FSMant0+0,y		; calc result sign
.8bbf	59 58 00	eor $0058,y			eor FSMant0+1,y
.8bc2	08		php				php
.8bc3	b9 58 00	lda $0058,y			lda FSMant0+1,y		; if NOS negative
.8bc6	10 07		bpl $8bcf			bpl +
.8bc8	e6 4c		inc $4c				inc FIndex		;   point at NOS
.8bca	20 85 8b	jsr $8b85			jsr FNegate		;   negate NOS
.8bcd	c6 4c		dec $4c				dec FIndex		;   restore fp
.8bcf					+
.8bcf	20 ab 8b	jsr $8bab			jsr FAbs		; abs TOS
.8bd2	86 14		stx $14				stx tmp1+0		; save data stack index
.8bd4	a6 4c		ldx $4c				ldx FIndex		; load FP stack index
.8bd6	28		plp				plp			; restore sign flag
.8bd7	60		rts				rts
>8bd8	46 2a				Name0:	.text "F*"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=35674					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8bda	42					.byte (("F*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=51					LinkDisplacement = Nt0-WordListLink
>8bdb	10					.byte WordFlags	;wh_Flags
>8bdc	03					.byte 3	;wh_CodeLength
>8bdd	33					  .byte LinkDisplacement	; offset to previous nt
=$8bde					XtPtr1 ::= *
=35674					WordListLink ::= Nt0 ; remember the nt of this word for later
.8bde					FStar:
.8bde	20 b6 8b	jsr $8bb6			jsr FPos		; make r1 & r2 positive,
.8be1	08		php				php			;   save r3 sign
.8be2	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8be4	38		sec				sec
.8be5	75 4e		adc $4e,x			adc FSExp+1,x
.8be7	95 4e		sta $4e,x			sta FSExp+1,x
.8be9	50 12		bvc $8bfd			bvc _49			; IfVs,
.8beb	b0 06		bcs $8bf3			bcs _zero		;   underflow?
.8bed	a6 14		ldx $14				ldx tmp1+0		;   restore data stack index
.8bef	28		plp				plp			; RDrop sign flag
.8bf0	20 4f b4	jsr $b44f			jsr Throw_FpOutOfRange
.8bf3	e8		inx		_zero:		inx			; F2Drop r1 & r2
.8bf4	e8		inx				inx
.8bf5	86 4c		stx $4c				stx FIndex
.8bf7	28		plp				plp			; RDrop saved result sign
.8bf8	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8bfa	4c a6 88	jmp $88a6			jmp F0			; return zero
.8bfd					_49:
.8bfd	a9 00		lda #$00			lda #0			; tmp32= 0
.8bff	85 16		sta $16				sta tmp2+0
.8c01	85 17		sta $17				sta tmp2+1
.8c03	85 18		sta $18				sta tmp3+0
.8c05	85 19		sta $19				sta tmp3+1
.8c07	b5 76		lda $76,x			lda FSMant3+1,x
.8c09	20 38 8c	jsr $8c38			jsr _Byte		; do bytes of r1 mantissa
.8c0c	b5 6c		lda $6c,x			lda FSMant2+1,x
.8c0e	20 38 8c	jsr $8c38			jsr _Byte
.8c11	b5 62		lda $62,x			lda FSMant1+1,x
.8c13	20 38 8c	jsr $8c38			jsr _Byte
.8c16	b5 58		lda $58,x			lda FSMant0+1,x
.8c18	20 38 8c	jsr $8c38			jsr _Byte
.8c1b	a5 16		lda $16				lda tmp2+0		; r1.mant= tmp32
.8c1d	95 76		sta $76,x			sta FSMant3+1,x
.8c1f	a5 17		lda $17				lda tmp2+1
.8c21	95 6c		sta $6c,x			sta FSMant2+1,x
.8c23	a5 18		lda $18				lda tmp3+0
.8c25	95 62		sta $62,x			sta FSMant1+1,x
.8c27	a5 19		lda $19				lda tmp3+1
.8c29	95 58		sta $58,x			sta FSMant0+1,x
.8c2b	e6 4c		inc $4c				inc FIndex		; FDrop
.8c2d	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c2f	28		plp				plp			; fix result sign
.8c30	10 03		bpl $8c35			bpl +
.8c32	4c 85 8b	jmp $8b85			jmp FNegate
.8c35					+
.8c35	4c 88 8a	jmp $8a88			jmp FNorm
.8c38					_Byte:
.8c38	49 ff		eor #$ff			eor #$ff
.8c3a	85 15		sta $15				sta tmp1+1
.8c3c	a0 08		ldy #$08			ldy #8			; for each bit in byte
.8c3e	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8c40	b0 18		bcs $8c5a			bcs _b3
.8c42	a5 16		lda $16				lda tmp2+0		;     tmp32 += r2
.8c44	75 75		adc $75,x			adc FSMant3+0,x
.8c46	85 16		sta $16				sta tmp2+0
.8c48	a5 17		lda $17				lda tmp2+1
.8c4a	75 6b		adc $6b,x			adc FSMant2+0,x
.8c4c	85 17		sta $17				sta tmp2+1
.8c4e	a5 18		lda $18				lda tmp3+0
.8c50	75 61		adc $61,x			adc FSMant1+0,x
.8c52	85 18		sta $18				sta tmp3+0
.8c54	a5 19		lda $19				lda tmp3+1
.8c56	75 57		adc $57,x			adc FSMant0+0,x
.8c58	85 19		sta $19				sta tmp3+1
.8c5a	46 19		lsr $19		_b3:		lsr tmp3+1		;   tmp32 >>= 1
.8c5c	66 18		ror $18				ror tmp3+0
.8c5e	66 17		ror $17				ror tmp2+1
.8c60	66 16		ror $16				ror tmp2+0
.8c62	88		dey				dey			;  next bit
.8c63	d0 d9		bne $8c3e			bne _b1
.8c65	60		rts				rts
=136					CodeLen	.var *-XtPtr1
=$8c66					Here1 = *	; remember here
>8bdc	88					.byte CodeLen	;patch wh_CodeLength
>8c66	46 53 71 72			Name0:	.text "FSqr"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=35818					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8c6a	44					.byte (("FSqr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=144					LinkDisplacement = Nt0-WordListLink
>8c6b	10					.byte WordFlags	;wh_Flags
>8c6c	03					.byte 3	;wh_CodeLength
>8c6d	90					  .byte LinkDisplacement	; offset to previous nt
=$8c6e					XtPtr1 ::= *
=35818					WordListLink ::= Nt0 ; remember the nt of this word for later
.8c6e	20 48 85	jsr $8548	FSqr:		jsr FDup
.8c71	4c de 8b	jmp $8bde			jmp FStar
=6					CodeLen	.var *-XtPtr1
=$8c74					Here1 = *	; remember here
>8c6c	06					.byte CodeLen	;patch wh_CodeLength
>8c74	46 31 30 2a			Name0:	.text "F10*"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=35832					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8c78	44					.byte (("F10*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>8c79	10					.byte WordFlags	;wh_Flags
>8c7a	03					.byte 3	;wh_CodeLength
>8c7b	0e					  .byte LinkDisplacement	; offset to previous nt
=$8c7c					XtPtr1 ::= *
=35832					WordListLink ::= Nt0 ; remember the nt of this word for later
.8c7c	20 48 85	jsr $8548	F10Star:	jsr FDup
.8c7f	a4 4c		ldy $4c				ldy FIndex
.8c81	b9 4d 00	lda $004d,y			lda FSExp+0,y
.8c84	18		clc				clc
.8c85	69 01		adc #$01			adc #1
.8c87	99 4d 00	sta $004d,y			sta FSExp+0,y
.8c8a	18		clc				clc
.8c8b	69 02		adc #$02			adc #2
.8c8d	99 4e 00	sta $004e,y			sta FSExp+1,y
.8c90	4c 10 8b	jmp $8b10			jmp FPlus
=23					CodeLen	.var *-XtPtr1
=$8c93					Here1 = *	; remember here
>8c7a	17					.byte CodeLen	;patch wh_CodeLength
>8c93	46 2f				Name0:	.text "F/"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=35861					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8c95	e2					.byte (("F/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>8c96	10					.byte WordFlags	;wh_Flags
>8c97	03					.byte 3	;wh_CodeLength
>8c98	1d					  .byte LinkDisplacement	; offset to previous nt
=$8c99					XtPtr1 ::= *
=35861					WordListLink ::= Nt0 ; remember the nt of this word for later
.8c99	20 b6 8b	jsr $8bb6	FSlash:		jsr FPos		; make r1 & r2 positive
.8c9c	08		php				php			;   save result sign
.8c9d	b5 4e		lda $4e,x			lda FSExp+1,x		; calc exponent
.8c9f	18		clc				clc
.8ca0	69 01		adc #$01			adc #1
.8ca2	38		sec				sec
.8ca3	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8ca5	95 4e		sta $4e,x			sta FSExp+1,x
.8ca7	50 12		bvc $8cbb			bvc _49			;  IfVs
.8ca9	b0 06		bcs $8cb1			bcs _Zero		; underflow?
.8cab	28		plp				plp			; drop saved result sign
.8cac	a6 15		ldx $15				ldx tmp1+1		; restore data stack index
.8cae	20 4f b4	jsr $b44f			jsr Throw_FpOutOfRange	; overflow
.8cb1	e8		inx		_Zero:		inx			; F2Drop
.8cb2	e8		inx				inx
.8cb3	86 4c		stx $4c				stx FIndex
.8cb5	28		plp				plp			; drop saved result sign
.8cb6	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8cb8	4c a6 88	jmp $88a6			jmp F0			; return 0
.8cbb					_49:
.8cbb	b5 76		lda $76,x			lda FSMant3+1,x		; tmp32 = r1
.8cbd	85 16		sta $16				sta tmp2+0
.8cbf	b5 6c		lda $6c,x			lda FSMant2+1,x
.8cc1	85 17		sta $17				sta tmp2+1
.8cc3	b5 62		lda $62,x			lda FSMant1+1,x
.8cc5	85 18		sta $18				sta tmp3+0
.8cc7	b5 58		lda $58,x			lda FSMant0+1,x
.8cc9	85 19		sta $19				sta tmp3+1
.8ccb	20 f4 8c	jsr $8cf4			jsr _Byte
.8cce	95 58		sta $58,x			sta FSMant0+1,x
.8cd0	20 f4 8c	jsr $8cf4			jsr _Byte
.8cd3	95 62		sta $62,x			sta FSMant1+1,x
.8cd5	20 f4 8c	jsr $8cf4			jsr _Byte
.8cd8	95 6c		sta $6c,x			sta FSMant2+1,x
.8cda	20 f4 8c	jsr $8cf4			jsr _Byte
.8cdd	95 76		sta $76,x			sta FSMant3+1,x
.8cdf	56 58		lsr $58,x			lsr FSMant0+1,x
.8ce1	76 62		ror $62,x			ror FSMant1+1,x
.8ce3	76 6c		ror $6c,x			ror FSMant2+1,x
.8ce5	76 76		ror $76,x			ror FSMant3+1,x
.8ce7	e6 4c		inc $4c				inc FIndex		; FDrop
.8ce9	a6 14		ldx $14				ldx tmp1+0		; restore X
.8ceb	28		plp				plp			; fix sign
.8cec	10 03		bpl $8cf1			bpl +
.8cee	20 85 8b	jsr $8b85			jsr FNegate
.8cf1	4c 88 8a	jmp $8a88	+		jmp FNorm
.8cf4					_Byte:
.8cf4	a0 08		ldy #$08			ldy #8			; for 8 bits
.8cf6					_1:
.8cf6	a5 19		lda $19				lda tmp3+1		;   if r1>=r2
.8cf8	d5 57		cmp $57,x			cmp FSMant0+0,x
.8cfa	d0 10		bne $8d0c			bne _4
.8cfc	a5 18		lda $18				lda tmp3+0
.8cfe	d5 61		cmp $61,x			cmp FSMant1+0,x
.8d00	d0 0a		bne $8d0c			bne _4
.8d02	a5 17		lda $17				lda tmp2+1
.8d04	d5 6b		cmp $6b,x			cmp FSMant2+0,x
.8d06	d0 04		bne $8d0c			bne _4
.8d08	a5 16		lda $16				lda tmp2+0
.8d0a	d5 75		cmp $75,x			cmp FSMant3+0,x
.8d0c	90 18		bcc $8d26	_4:		bcc _2
.8d0e	a5 16		lda $16				lda tmp2+0		;     tmp32 -= r2
.8d10	f5 75		sbc $75,x			sbc FSMant3+0,x
.8d12	85 16		sta $16				sta tmp2+0
.8d14	a5 17		lda $17				lda tmp2+1
.8d16	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8d18	85 17		sta $17				sta tmp2+1
.8d1a	a5 18		lda $18				lda tmp3+0
.8d1c	f5 61		sbc $61,x			sbc FSMant1+0,x
.8d1e	85 18		sta $18				sta tmp3+0
.8d20	a5 19		lda $19				lda tmp3+1
.8d22	f5 57		sbc $57,x			sbc FSMant0+0,x
.8d24	85 19		sta $19				sta tmp3+1
.8d26	26 15		rol $15		_2:		rol tmp1+1		;   accum quotient bits
.8d28	06 16		asl $16				asl tmp2+0
.8d2a	26 17		rol $17				rol tmp2+1
.8d2c	26 18		rol $18				rol tmp3+0
.8d2e	26 19		rol $19				rol tmp3+1		;   tmp32<<=1
.8d30	88		dey				dey			;  next
.8d31	d0 c3		bne $8cf6			bne _1
.8d33	a5 15		lda $15				lda tmp1+1		; return bits
.8d35	60		rts				rts
=157					CodeLen	.var *-XtPtr1
=$8d36					Here1 = *	; remember here
>8c97	9d					.byte CodeLen	;patch wh_CodeLength
>8d36	46 31 2f			Name0:	.text "F1/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36025					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8d39	e3					.byte (("F1/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=164					LinkDisplacement = Nt0-WordListLink
>8d3a	10					.byte WordFlags	;wh_Flags
>8d3b	03					.byte 3	;wh_CodeLength
>8d3c	a4					  .byte LinkDisplacement	; offset to previous nt
=$8d3d					XtPtr1 ::= *
=36025					WordListLink ::= Nt0 ; remember the nt of this word for later
.8d3d	20 de 88	jsr $88de	F1Slash:	jsr F1
.8d40	20 cc 85	jsr $85cc			jsr FSwap
.8d43	4c 99 8c	jmp $8c99			jmp FSlash
=9					CodeLen	.var *-XtPtr1
=$8d46					Here1 = *	; remember here
>8d3b	09					.byte CodeLen	;patch wh_CodeLength
>8d46	45 2a				Name0:	.text "E*"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=36040					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8d48	42					.byte (("E*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>8d49	10					.byte WordFlags	;wh_Flags
>8d4a	03					.byte 3	;wh_CodeLength
>8d4b	0f					  .byte LinkDisplacement	; offset to previous nt
=$8d4c					XtPtr1 ::= *
=36040					WordListLink ::= Nt0 ; remember the nt of this word for later
.8d4c					EStar:
.8d4c	20 b6 8b	jsr $8bb6			jsr FPos		; make r1 & r2 positive
.8d4f	08		php				php			;   remember result sign
.8d50	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8d52	38		sec				sec
.8d53	75 4e		adc $4e,x			adc FSExp+1,x
.8d55	95 4e		sta $4e,x			sta FSExp+1,x
.8d57	70 1b		bvs $8d74			bvs _ExpOvfl
.8d59	a0 00		ldy #$00			ldy #0
.8d5b	84 16		sty $16				sty tmp2+0
.8d5d	84 17		sty $17				sty tmp2+1		; zero result
.8d5f	b5 62		lda $62,x			lda FSMant1+1,x
.8d61	20 83 8d	jsr $8d83			jsr _Byte		; do FSMant1+1 byte
.8d64	b5 58		lda $58,x			lda FSMant0+1,x
.8d66	20 83 8d	jsr $8d83			jsr _Byte		; do FSMant0+1 byte
.8d69	a5 16		lda $16				lda tmp2+0		; r3 = tmp2
.8d6b	95 62		sta $62,x			sta FSMant1+1,x
.8d6d	a5 17		lda $17				lda tmp2+1
.8d6f	95 58		sta $58,x			sta FSMant0+1,x
.8d71	4c a1 8d	jmp $8da1			jmp EFix3		; finish
.8d74					_ExpOvfl:
.8d74	b0 05		bcs $8d7b			bcs _Zero		;underflow?
.8d76	a6 14		ldx $14				ldx tmp1+0		; restore X
.8d78	20 4f b4	jsr $b44f			jsr Throw_FpOutOfRange	;overflow
.8d7b	a9 00		lda #$00	_Zero:		lda #0
.8d7d	95 62		sta $62,x			sta FSMant1+1,x
.8d7f	95 58		sta $58,x			sta FSMant0+1,x
.8d81	f0 1e		beq $8da1			beq EFix3
.8d83					_Byte:
.8d83	49 ff		eor #$ff			eor #$ff
.8d85	85 15		sta $15				sta tmp1+1
.8d87	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d89	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8d8b	b0 0c		bcs $8d99			bcs _b5
.8d8d	a5 16		lda $16				lda tmp2+0		;     tmp2 += r2
.8d8f	75 61		adc $61,x			adc FSMant1+0,x
.8d91	85 16		sta $16				sta tmp2+0
.8d93	a5 17		lda $17				lda tmp2+1
.8d95	75 57		adc $57,x			adc FSMant0+0,x
.8d97	85 17		sta $17				sta tmp2+1
.8d99	46 17		lsr $17		_b5:		lsr tmp2+1		;   tmp2 <<= 1
.8d9b	66 16		ror $16				ror tmp2+0
.8d9d	88		dey				dey			;  next bit
.8d9e	d0 e9		bne $8d89			bne _b1
.8da0	60		rts				rts
=85					CodeLen	.var *-XtPtr1
=$8da1					Here1 = *	; remember here
>8d4a	55					.byte CodeLen	;patch wh_CodeLength
.8da1					EFix3:
.8da1	a9 00		lda #$00			lda #0			; zero unused mantissa
.8da3	95 6c		sta $6c,x			sta FSMant2+1,x
.8da5	95 76		sta $76,x			sta FSMant3+1,x
.8da7	e6 4c		inc $4c				inc FIndex		; FDrop
.8da9	a6 14		ldx $14				ldx tmp1+0		; restore X
.8dab	28		plp				plp			;fix result sign
.8dac	10 03		bpl $8db1			bpl +
.8dae	4c 85 8b	jmp $8b85			jmp FNegate
.8db1	4c 88 8a	jmp $8a88	+		jmp FNorm
>8db4	45 53 71 72			Name0:	.text "ESqr"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=36152					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8db8	44					.byte (("ESqr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=112					LinkDisplacement = Nt0-WordListLink
>8db9	10					.byte WordFlags	;wh_Flags
>8dba	03					.byte 3	;wh_CodeLength
>8dbb	70					  .byte LinkDisplacement	; offset to previous nt
=$8dbc					XtPtr1 ::= *
=36152					WordListLink ::= Nt0 ; remember the nt of this word for later
.8dbc	20 48 85	jsr $8548	ESqr:		jsr FDup
.8dbf	4c 4c 8d	jmp $8d4c			jmp EStar
=6					CodeLen	.var *-XtPtr1
=$8dc2					Here1 = *	; remember here
>8dba	06					.byte CodeLen	;patch wh_CodeLength
>8dc2	45 2f				Name0:	.text "E/"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=36164					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8dc4	e2					.byte (("E/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>8dc5	10					.byte WordFlags	;wh_Flags
>8dc6	03					.byte 3	;wh_CodeLength
>8dc7	0c					  .byte LinkDisplacement	; offset to previous nt
=$8dc8					XtPtr1 ::= *
=36164					WordListLink ::= Nt0 ; remember the nt of this word for later
.8dc8	20 b6 8b	jsr $8bb6	ESlash:		jsr FPos	; make r1 & r2 positive
.8dcb	08		php				php		; remember result sign
.8dcc	b5 4e		lda $4e,x			lda FSExp+1,x		; calc r3 exponent
.8dce	38		sec				sec
.8dcf	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8dd1	70 17		bvs $8dea			bvs _ExpOvfl
.8dd3	18		clc				clc
.8dd4	69 01		adc #$01			adc #1
.8dd6	95 4e		sta $4e,x			sta FSExp+1,x
.8dd8	20 f0 8d	jsr $8df0			jsr _Byte		; gen quotient hi byte
.8ddb	48		pha				pha
.8ddc	20 f0 8d	jsr $8df0			jsr _Byte		; gen quotient lo byte
.8ddf	95 62		sta $62,x			sta FSMant1+1,x
.8de1	68		pla				pla
.8de2	4a		lsr a				lsr a
.8de3	95 58		sta $58,x			sta FSMant0+1,x
.8de5	76 62		ror $62,x			ror FSMant1+1,x
.8de7	4c a1 8d	jmp $8da1			jmp EFix3
.8dea					_ExpOvfl:
.8dea	28		plp				plp			; rdrop saved result sign
.8deb	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8ded	20 4f b4	jsr $b44f			jsr Throw_FpOutOfRange	; overflow
.8df0					_Byte:
.8df0	a0 08		ldy #$08			ldy #8			; for 8 bits
.8df2	b5 62		lda $62,x	_b1:		lda FSMant1+1,x		;   if r1 >= r2
.8df4	d5 61		cmp $61,x			cmp FSMant1+0,x
.8df6	b5 58		lda $58,x			lda FSMant0+1,x
.8df8	f5 57		sbc $57,x			sbc FSMant0+0,x
.8dfa	90 09		bcc $8e05			bcc _b5
.8dfc	95 58		sta $58,x			sta FSMant0+1,x
.8dfe	b5 62		lda $62,x			lda FSMant1+1,x		;     r1 -= r2
.8e00	f5 61		sbc $61,x			sbc FSMant1+0,x
.8e02	95 62		sta $62,x			sta FSMant1+1,x
.8e04	38		sec				sec
.8e05					_b5:
.8e05	26 15		rol $15				rol tmp1+1		;   save quotient bit
.8e07	16 62		asl $62,x			asl FSMant1+1,x		;   r1 *= 2
.8e09	36 58		rol $58,x			rol FSMant0+1,x
.8e0b	88		dey				dey			;  next bit
.8e0c	d0 e4		bne $8df2			bne _b1
.8e0e	a5 15		lda $15				lda tmp1+1		; return bits
.8e10	60		rts				rts
=73					CodeLen	.var *-XtPtr1
=$8e11					Here1 = *	; remember here
>8dc6	49					.byte CodeLen	;patch wh_CodeLength
>8e11	45 31 2f			Name0:	.text "E1/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36244					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e14	e3					.byte (("E1/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>8e15	10					.byte WordFlags	;wh_Flags
>8e16	03					.byte 3	;wh_CodeLength
>8e17	50					  .byte LinkDisplacement	; offset to previous nt
=$8e18					XtPtr1 ::= *
=36244					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e18	20 de 88	jsr $88de	E1Slash:	jsr F1
.8e1b	20 cc 85	jsr $85cc			jsr FSwap
.8e1e	4c c8 8d	jmp $8dc8			jmp ESlash
=9					CodeLen	.var *-XtPtr1
=$8e21					Here1 = *	; remember here
>8e16	09					.byte CodeLen	;patch wh_CodeLength
>8e21	53 3e 46			Name0:	.text "S>F"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36260					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e24	c3					.byte (("S>F"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8e25	10					.byte WordFlags	;wh_Flags
>8e26	03					.byte 3	;wh_CodeLength
>8e27	10					  .byte LinkDisplacement	; offset to previous nt
=$8e28					XtPtr1 ::= *
=36260					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e28	20 ef b3	jsr $b3ef	SToF:		jsr PopYA		; pop n
.8e2b	20 bd 84	jsr $84bd	SToFYA:		jsr FAllocX		; alloc FP stack entry
.8e2e	94 57		sty $57,x			sty FSMant0,x		; copy n to mantissa
.8e30	95 61		sta $61,x			sta FSMant1,x
.8e32	a9 00		lda #$00			lda #0			; pad mantissa
.8e34	95 6b		sta $6b,x			sta FSMant2,x
.8e36	95 75		sta $75,x			sta FSMant3,x
.8e38	a9 0f		lda #$0f			lda #15			; set exponent
.8e3a	95 4d		sta $4d,x			sta FSExp,x
.8e3c	4c 8a 8a	jmp $8a8a			jmp FNormX		; normalize, return
=23					CodeLen	.var *-XtPtr1
=$8e3f					Here1 = *	; remember here
>8e26	17					.byte CodeLen	;patch wh_CodeLength
>8e3f	44 3e 46			Name0:	.text "D>F"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36290					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e42	c3					.byte (("D>F"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>8e43	10					.byte WordFlags	;wh_Flags
>8e44	03					.byte 3	;wh_CodeLength
>8e45	1e					  .byte LinkDisplacement	; offset to previous nt
=$8e46					XtPtr1 ::= *
=36290					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e46	20 bd 84	jsr $84bd	FDToF:		jsr FAllocX		; alloc FP stack entry
.8e49	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e4b	a4 4c		ldy $4c				ldy FIndex		; Y= fp stack index
.8e4d	b5 26		lda $26,x			lda DStack+2,x		; mantissa= d
.8e4f	99 75 00	sta $0075,y			sta FSMant3,y
.8e52	b5 27		lda $27,x			lda DStack+3,x
.8e54	99 6b 00	sta $006b,y			sta FSMant2,y
.8e57	b5 24		lda $24,x			lda DStack+0,x
.8e59	99 61 00	sta $0061,y			sta FSMant1,y
.8e5c	b5 25		lda $25,x			lda DStack+1,x
.8e5e	99 57 00	sta $0057,y			sta FSMant0,y
.8e61	a9 1f		lda #$1f			lda #31			; set exponent
.8e63	99 4d 00	sta $004d,y			sta FSExp,y
.8e66	20 31 c5	jsr $c531			jsr Two_Drop
.8e69	4c 88 8a	jmp $8a88			jmp FNorm		; normalize, return
=38					CodeLen	.var *-XtPtr1
=$8e6c					Here1 = *	; remember here
>8e44	26					.byte CodeLen	;patch wh_CodeLength
>8e6c	46 3e 53			Name0:	.text "F>S"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36335					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e6f	63					.byte (("F>S"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>8e70	10					.byte WordFlags	;wh_Flags
>8e71	03					.byte 3	;wh_CodeLength
>8e72	2d					  .byte LinkDisplacement	; offset to previous nt
=$8e73					XtPtr1 ::= *
=36335					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e73	a4 4c		ldy $4c		FToS:		ldy FIndex
.8e75	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8e78	08		php				php
.8e79	10 03		bpl $8e7e			bpl +
.8e7b	20 85 8b	jsr $8b85			jsr FNegate
.8e7e					+
.8e7e	a9 0f		lda #$0f			lda #15
.8e80	20 c7 89	jsr $89c7			jsr FShiftA
.8e83	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e85	c0 10		cpy #$10			cpy #15+1		; always positive, so unsigned compare works
.8e87	b0 17		bcs $8ea0			bcs _overflow
.8e89	a4 4c		ldy $4c				ldy FIndex
.8e8b	ca		dex				dex
.8e8c	ca		dex				dex
.8e8d	b9 57 00	lda $0057,y			lda FSMant0,y
.8e90	95 25		sta $25,x			sta DStack+1,x
.8e92	b9 61 00	lda $0061,y			lda FSMant1,y
.8e95	95 24		sta $24,x			sta DStack+0,x
.8e97	e6 4c		inc $4c				inc FIndex		; FDrop
.8e99	28		plp				plp			; apply saved sign
.8e9a	30 01		bmi $8e9d			bmi +
.8e9c	60		rts				rts
.8e9d	4c a5 c6	jmp $c6a5	+		jmp Negate
.8ea0	28		plp		_overflow:	plp			; RDrop saved sign
.8ea1	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8ea3	20 74 b4	jsr $b474			jsr ThrowA
=51					CodeLen	.var *-XtPtr1
=$8ea6					Here1 = *	; remember here
>8e71	33					.byte CodeLen	;patch wh_CodeLength
>8ea6	46 3e 44			Name0:	.text "F>D"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36393					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8ea9	83					.byte (("F>D"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=58					LinkDisplacement = Nt0-WordListLink
>8eaa	10					.byte WordFlags	;wh_Flags
>8eab	03					.byte 3	;wh_CodeLength
>8eac	3a					  .byte LinkDisplacement	; offset to previous nt
=$8ead					XtPtr1 ::= *
=36393					WordListLink ::= Nt0 ; remember the nt of this word for later
.8ead	a4 4c		ldy $4c		FToD:		ldy FIndex
.8eaf	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8eb2	08		php				php
.8eb3	10 03		bpl $8eb8			bpl +
.8eb5	20 85 8b	jsr $8b85			jsr FNegate
.8eb8					+
.8eb8	a9 1f		lda #$1f			lda #31
.8eba	20 c7 89	jsr $89c7			jsr FShiftA
.8ebd	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8ebf	c0 20		cpy #$20			cpy #31+1		; always positive, so unsigned compare works
.8ec1	b0 23		bcs $8ee6			bcs _overflow
.8ec3	a4 4c		ldy $4c				ldy FIndex
.8ec5	ca		dex				dex			; d= mantissa
.8ec6	ca		dex				dex
.8ec7	ca		dex				dex
.8ec8	ca		dex				dex
.8ec9	b9 57 00	lda $0057,y			lda FSMant0,y
.8ecc	95 25		sta $25,x			sta DStack+1,x
.8ece	b9 61 00	lda $0061,y			lda FSMant1,y
.8ed1	95 24		sta $24,x			sta DStack+0,x
.8ed3	b9 6b 00	lda $006b,y			lda FSMant2,y
.8ed6	95 27		sta $27,x			sta DStack+3,x
.8ed8	b9 75 00	lda $0075,y			lda FSMant3,y
.8edb	95 26		sta $26,x			sta DStack+2,x
.8edd	e6 4c		inc $4c				inc FIndex		; FDrop
.8edf	28		plp				plp			; apply saved sign
.8ee0	30 01		bmi $8ee3			bmi +
.8ee2	60		rts				rts
.8ee3	4c d4 c6	jmp $c6d4	+		jmp DNegate
.8ee6	28		plp		_overflow:	plp			; RDrop sign
.8ee7	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8ee9	20 74 b4	jsr $b474			jsr ThrowA
=63					CodeLen	.var *-XtPtr1
=$8eec					Here1 = *	; remember here
>8eab	3f					.byte CodeLen	;patch wh_CodeLength
>8eec	46 52 6e 64			Name0:	.text "FRnd"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=36464					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8ef0	84					.byte (("FRnd"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=71					LinkDisplacement = Nt0-WordListLink
>8ef1	10					.byte WordFlags	;wh_Flags
>8ef2	03					.byte 3	;wh_CodeLength
>8ef3	47					  .byte LinkDisplacement	; offset to previous nt
=$8ef4					XtPtr1 ::= *
=36464					WordListLink ::= Nt0 ; remember the nt of this word for later
.8ef4	20 f8 82	jsr $82f8	FRnd:		jsr Rand		; generate next RndState
.8ef7	20 bd 84	jsr $84bd			jsr FAllocX		; alloc FP stack entry
.8efa	4a		lsr a				lsr a			;   make positive
.8efb	95 57		sta $57,x			sta FSMant0,x
.8efd	94 61		sty $61,x			sty FSMant1,x
.8eff	ad 35 03	lda $0335			lda RndState+0
.8f02	95 6b		sta $6b,x			sta FSMant2,x
.8f04	ad 36 03	lda $0336			lda RndState+1
.8f07	95 75		sta $75,x			sta FSMant3,x
.8f09	a9 00		lda #$00			lda #0			; exponent=0
.8f0b	95 4d		sta $4d,x			sta FSExp,x
.8f0d	4c 8a 8a	jmp $8a8a			jmp FNormX		; normalize, return
=28					CodeLen	.var *-XtPtr1
=$8f10					Here1 = *	; remember here
>8ef2	1c					.byte CodeLen	;patch wh_CodeLength
>8f10	46 53 71 72 74			Name0:	.text "FSqrt"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=36501					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f15	85					.byte (("FSqrt"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>8f16	10					.byte WordFlags	;wh_Flags
>8f17	03					.byte 3	;wh_CodeLength
>8f18	25					  .byte LinkDisplacement	; offset to previous nt
=$8f19					XtPtr1 ::= *
=36501					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f19	a4 4c		ldy $4c		FSqrt:		ldy FIndex
.8f1b	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.8f1e	d0 01		bne $8f21			bne +
.8f20	60		rts				rts			;   just return the zero
.8f21					+
.8f21	20 48 85	jsr $8548			jsr FDup		; get trial value
.8f24	a4 4c		ldy $4c				ldy FIndex
.8f26	b9 4d 00	lda $004d,y			lda FSExp,y		; halve the exponent of trial value
.8f29	c9 80		cmp #$80			cmp #$80
.8f2b	6a		ror a				ror a
.8f2c	99 4d 00	sta $004d,y			sta FSExp,y
.8f2f	a9 09		lda #$09			lda #9			; for 9 iterations
.8f31	48		pha		_3:		pha
.8f32	20 bd 85	jsr $85bd			jsr F2Dup		;   calc new trial value
.8f35	20 99 8c	jsr $8c99			jsr FSlash
.8f38	20 10 8b	jsr $8b10			jsr FPlus
.8f3b	20 92 89	jsr $8992			jsr F2Slash
.8f3e	68		pla				pla			;  next
.8f3f	38		sec				sec
.8f40	e9 01		sbc #$01			sbc #1
.8f42	d0 ed		bne $8f31			bne _3
.8f44	4c 23 85	jmp $8523			jmp FNip		; return trial value
=46					CodeLen	.var *-XtPtr1
=$8f47					Here1 = *	; remember here
>8f17	2e					.byte CodeLen	;patch wh_CodeLength
>8f47	50 72 65 63 69 73 69 6f		Name0:	.text "Precision"	;  name of word as a string, ending at wh_NameLastChar
>8f4f	6e
=9					NameLength = *-Name0
=36560					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f50	c9					.byte (("Precision"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=59					LinkDisplacement = Nt0-WordListLink
>8f51	10					.byte WordFlags	;wh_Flags
>8f52	03					.byte 3	;wh_CodeLength
>8f53	3b					  .byte LinkDisplacement	; offset to previous nt
=$8f54					XtPtr1 ::= *
=36560					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f54	ad ff 02	lda $02ff	Precision:	lda PrecisionV
.8f57	4c dd b7	jmp $b7dd			jmp PushZA
=6					CodeLen	.var *-XtPtr1
=$8f5a					Here1 = *	; remember here
>8f52	06					.byte CodeLen	;patch wh_CodeLength
.8f5a	60		rts				rts
>8f5b	53 65 74 2d 50 72 65 63		Name0:	.text "Set-Precision"	;  name of word as a string, ending at wh_NameLastChar
>8f63	69 73 69 6f 6e
=13					NameLength = *-Name0
=36584					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f68	cd					.byte (("Set-Precision"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>8f69	10					.byte WordFlags	;wh_Flags
>8f6a	03					.byte 3	;wh_CodeLength
>8f6b	18					  .byte LinkDisplacement	; offset to previous nt
=$8f6c					XtPtr1 ::= *
=36584					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f6c	20 d4 b3	jsr $b3d4			jsr PopA
.8f6f	8d ff 02	sta $02ff			sta PrecisionV
=6					CodeLen	.var *-XtPtr1
=$8f72					Here1 = *	; remember here
>8f6a	06					.byte CodeLen	;patch wh_CodeLength
.8f72	60		rts				rts
>8f73	28 46 2e 29			Name0:	.text "(F.)"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=36599					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f77	24					.byte (("(F.)"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>8f78	10					.byte WordFlags	;wh_Flags
>8f79	03					.byte 3	;wh_CodeLength
>8f7a	0f					  .byte LinkDisplacement	; offset to previous nt
=$8f7b					XtPtr1 ::= *
=36599					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f7b	20 f8 8f	jsr $8ff8	PFDot:		jsr pfcst		;start collecting chars, make r positive
.8f7e	20 84 8f	jsr $8f84			jsr PFDotSub
.8f81	4c 16 90	jmp $9016			jmp pfcen
.8f84					PFDotSub:
.8f84	20 54 8f	jsr $8f54			jsr Precision	;alloc & init work area
.8f87	20 f4 b7	jsr $b7f4			jsr One
=$27					_mantNzFound  = DStack+3	; nonzero mantissa digit processed
=$26					_NumSigDigits = DStack+2	; # of significant digits
=$24					_decimalPos   = DStack+0	; decimal point position
.8f8a	20 d8 8f	jsr $8fd8			jsr FLt10		; scale down to <10, counting exponent
.8f8d					_c:
.8f8d	b5 24		lda $24,x			lda _decimalPos,x	;  insert decimal point here?
.8f8f	d0 05		bne $8f96			bne _c2
.8f91	a9 2e		lda #$2e			lda #'.'
.8f93	20 0d 90	jsr $900d			jsr pfch
.8f96	d6 24		dec $24,x	_c2:		dec _decimalPos,x
.8f98	20 48 85	jsr $8548			jsr FDup		;  do a digit
.8f9b	20 73 8e	jsr $8e73			jsr FToS		; ( work n )
.8f9e	b5 24		lda $24,x			lda DStack+0,x
.8fa0	15 29		ora $29,x			ora _mantNzFound+2,x	;  doing significant digits?
.8fa2	95 29		sta $29,x			sta _mantNzFound+2,x
.8fa4	f0 08		beq $8fae			beq _c7
.8fa6	d6 28		dec $28,x			dec _NumSigDigits+2,x
.8fa8	10 04		bpl $8fae			bpl +
.8faa	e8		inx				inx			;    drop integer
.8fab	e8		inx				inx
.8fac	d0 17		bne $8fc5			bne _d
.8fae					+
.8fae	b5 24		lda $24,x	_c7:		lda DStack+0,x		;  store the char
.8fb0	09 30		ora #$30			ora #'0'
.8fb2	20 0d 90	jsr $900d			jsr pfch
.8fb5	20 28 8e	jsr $8e28			jsr SToF		; ( work )
.8fb8	20 50 8b	jsr $8b50			jsr FMinus
.8fbb	20 7c 8c	jsr $8c7c			jsr F10Star
.8fbe	a4 4c		ldy $4c				ldy FIndex		;  until mantissa==0
.8fc0	b9 57 00	lda $0057,y			lda FSMant0,y
.8fc3	d0 c8		bne $8f8d			bne _c
.8fc5	d6 24		dec $24,x	_d:		dec _decimalPos,x	;do trailing zeros
.8fc7	30 08		bmi $8fd1			bmi _d9
.8fc9	a9 30		lda #$30			lda #'0'
.8fcb	20 0d 90	jsr $900d			jsr pfch
.8fce	4c c5 8f	jmp $8fc5			jmp _d
.8fd1					_d9:
.8fd1	e8		inx				inx			; drop work area
.8fd2	e8		inx				inx
.8fd3	e8		inx				inx
.8fd4	e8		inx				inx
.8fd5	e6 4c		inc $4c				inc FIndex		; FDrop
.8fd7	60		rts				rts
=93					CodeLen	.var *-XtPtr1
=$8fd8					Here1 = *	; remember here
>8f79	5d					.byte CodeLen	;patch wh_CodeLength
.8fd8					FLt10:
.8fd8	a4 4c		ldy $4c		_1:		ldy FIndex		; while r >= 10
.8fda	b9 4d 00	lda $004d,y			lda FSExp,y
.8fdd	30 18		bmi $8ff7			bmi _9			;   exponent negative?
.8fdf	c9 04		cmp #$04			cmp #4
.8fe1	90 14		bcc $8ff7			bcc _9			;   < 4 ?
.8fe3	d0 07		bne $8fec			bne _2			;   > 4 ?
.8fe5	b9 57 00	lda $0057,y			lda FSMant0,y
.8fe8	c9 50		cmp #$50			cmp #$50
.8fea	90 0b		bcc $8ff7			bcc _9
.8fec	f6 24		inc $24,x	_2:		inc DStack+0,x		;   exp ++
.8fee	20 c4 88	jsr $88c4			jsr F10			;   r /= 10
.8ff1	20 99 8c	jsr $8c99			jsr FSlash
.8ff4	4c d8 8f	jmp $8fd8			jmp _1
.8ff7	60		rts		_9:		rts
.8ff8					pfcst:
.8ff8	a9 01		lda #$01			lda #1
.8ffa	8d 34 03	sta $0334			sta ToHold
.8ffd	a4 4c		ldy $4c				ldy FIndex		; if r1 negative
.8fff	b9 57 00	lda $0057,y			lda FSMant0,y
.9002	10 08		bpl $900c			bpl _19
.9004	a9 2d		lda #$2d			lda #'-'		;   append sign
.9006	20 0d 90	jsr $900d			jsr pfch
.9009	4c 85 8b	jmp $8b85			jmp FNegate		;   make positive, return
.900c	60		rts		_19:		rts
.900d					pfch:
.900d	ac 34 03	ldy $0334			ldy ToHold
.9010	91 00		sta ($00),y			sta (cp),y
.9012	ee 34 03	inc $0334			inc ToHold
.9015	60		rts				rts
.9016					pfcen:
.9016	ad 34 03	lda $0334			lda ToHold
.9019	38		sec				sec
.901a	e9 01		sbc #$01			sbc #1
.901c	a0 00		ldy #$00			ldy #0
.901e	91 00		sta ($00),y			sta (cp),y		; fill in length
.9020	4c 23 ca	jmp $ca23			jmp Here		; push start addr
.9023					pfciA:
.9023	a8		tay				tay
.9024	10 0a		bpl $9030			bpl _15			; IfMi,
.9026	49 ff		eor #$ff			eor #$ff
.9028	18		clc				clc
.9029	69 01		adc #$01			adc #1
.902b	48		pha				pha
.902c	a9 2d		lda #$2d			lda #'-'
.902e	d0 03		bne $9033			bne _19
.9030	48		pha		_15:		pha
.9031	a9 2b		lda #$2b			lda #'+'
.9033					_19:
.9033	20 0d 90	jsr $900d			jsr pfch
.9036	68		pla				pla
.9037	a0 2f		ldy #$2f			ldy #'0'-1
.9039	c8		iny		_20:		iny
.903a	38		sec				sec
.903b	e9 0a		sbc #$0a			sbc #10
.903d	b0 fa		bcs $9039			bcs _20
.903f	69 0a		adc #$0a			adc #10
.9041	48		pha				pha
.9042	98		tya				tya
.9043	20 0d 90	jsr $900d			jsr pfch
.9046	68		pla				pla
.9047	09 30		ora #$30			ora #'0'
.9049	d0 c2		bne $900d			bne pfch
>904b	46 2e				Name0:	.text "F."	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=36813					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>904d	c2					.byte (("F."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=214					LinkDisplacement = Nt0-WordListLink
>904e	10					.byte WordFlags	;wh_Flags
>904f	03					.byte 3	;wh_CodeLength
>9050	d6					  .byte LinkDisplacement	; offset to previous nt
=$9051					XtPtr1 ::= *
=36813					WordListLink ::= Nt0 ; remember the nt of this word for later
.9051	20 7b 8f	jsr $8f7b	FDot:		jsr PFDot
.9054	20 e7 b1	jsr $b1e7	FDot2:		jsr Count
.9057	20 d3 cd	jsr $cdd3			jsr Type
.905a	4c c7 cd	jmp $cdc7			jmp Space
=12					CodeLen	.var *-XtPtr1
=$905d					Here1 = *	; remember here
>904f	0c					.byte CodeLen	;patch wh_CodeLength
>905d	46 2e 53			Name0:	.text "F.S"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36832					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9060	63					.byte (("F.S"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>9061	10					.byte WordFlags	;wh_Flags
>9062	03					.byte 3	;wh_CodeLength
>9063	13					  .byte LinkDisplacement	; offset to previous nt
=$9064					XtPtr1 ::= *
=36832					WordListLink ::= Nt0 ; remember the nt of this word for later
.9064	a9 09		lda #$09	FDotS:		lda #FDim-1	; for each FP stack entry
.9066	d0 0b		bne $9073			bne _8
.9068	48		pha		_2:		pha
.9069	20 94 85	jsr $8594			jsr FPick3	;   print it
.906c	20 51 90	jsr $9051			jsr FDot
.906f	68		pla				pla		;  next
.9070	38		sec				sec
.9071	e9 01		sbc #$01			sbc #1
.9073	c5 4c		cmp $4c		_8:		cmp FIndex
.9075	b0 f1		bcs $9068			bcs _2
=19					CodeLen	.var *-XtPtr1
=$9077					Here1 = *	; remember here
>9062	13					.byte CodeLen	;patch wh_CodeLength
.9077	60		rts				rts
>9078	28 46 53 2e 29			Name0:	.text "(FS.)"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=36861					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>907d	25					.byte (("(FS.)"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>907e	10					.byte WordFlags	;wh_Flags
>907f	03					.byte 3	;wh_CodeLength
>9080	1d					  .byte LinkDisplacement	; offset to previous nt
=$9081					XtPtr1 ::= *
=36861					WordListLink ::= Nt0 ; remember the nt of this word for later
.9081	20 eb b7	jsr $b7eb	PFSDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.9084	20 f8 8f	jsr $8ff8			jsr pfcst		; start collecting chars, make r positive
.9087	20 d8 8f	jsr $8fd8			jsr FLt10		; scale down to <10
.908a	a4 4c		ldy $4c		_c1:		ldy FIndex		; while r < 1
.908c	b9 57 00	lda $0057,y			lda FSMant0,y		;   mantissa == 0 ?
.908f	f0 0f		beq $90a0			beq _c9
.9091	b9 4d 00	lda $004d,y			lda FSExp,y		;   exp < 1 ?
.9094	f0 02		beq $9098			beq _c2
.9096	10 08		bpl $90a0			bpl _c9
.9098	d6 24		dec $24,x	_c2:		dec DStack+0,x		;  exp -= 1
.909a	20 7c 8c	jsr $8c7c			jsr F10Star		;  r *= 10
.909d	4c 8a 90	jmp $908a			jmp _c1
.90a0					_c9:
.90a0	20 84 8f	jsr $8f84	PFSDotM:	jsr PFDotSub		; do mantissa
.90a3	a9 45		lda #$45			lda #'E'
.90a5	20 0d 90	jsr $900d			jsr pfch		; do exponent
.90a8	b5 24		lda $24,x			lda DStack+0,x		;   _exp
.90aa	20 23 90	jsr $9023			jsr pfciA
.90ad	e8		inx				inx			; Drop work area
.90ae	e8		inx				inx
.90af	4c 16 90	jmp $9016			jmp pfcen		; finish string
=49					CodeLen	.var *-XtPtr1
=$90b2					Here1 = *	; remember here
>907f	31					.byte CodeLen	;patch wh_CodeLength
>90b2	46 53 2e			Name0:	.text "FS."	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36917					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>90b5	c3					.byte (("FS."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>90b6	10					.byte WordFlags	;wh_Flags
>90b7	03					.byte 3	;wh_CodeLength
>90b8	38					  .byte LinkDisplacement	; offset to previous nt
=$90b9					XtPtr1 ::= *
=36917					WordListLink ::= Nt0 ; remember the nt of this word for later
.90b9	20 81 90	jsr $9081	FSDot:		jsr PFSDot
.90bc	4c 54 90	jmp $9054			jmp FDot2
=6					CodeLen	.var *-XtPtr1
=$90bf					Here1 = *	; remember here
>90b7	06					.byte CodeLen	;patch wh_CodeLength
>90bf	28 46 45 2e 29			Name0:	.text "(FE.)"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=36932					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>90c4	25					.byte (("(FE.)"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>90c5	10					.byte WordFlags	;wh_Flags
>90c6	03					.byte 3	;wh_CodeLength
>90c7	0f					  .byte LinkDisplacement	; offset to previous nt
=$90c8					XtPtr1 ::= *
=36932					WordListLink ::= Nt0 ; remember the nt of this word for later
.90c8	20 eb b7	jsr $b7eb	PFEDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.90cb	20 f8 8f	jsr $8ff8			jsr pfcst		; start collecting chars, make r positive
.90ce	a4 4c		ldy $4c		_30:		ldy FIndex		; while r < 1
.90d0	b9 57 00	lda $0057,y			lda FSMant0,y
.90d3	f0 16		beq $90eb			beq _39
.90d5	b9 4d 00	lda $004d,y			lda FSExp,y
.90d8	f0 02		beq $90dc			beq _31
.90da	10 0f		bpl $90eb			bpl _39
.90dc	d6 24		dec $24,x	_31:		dec _exp,x		;  exp -= 3
.90de	d6 24		dec $24,x			dec _exp,x
.90e0	d6 24		dec $24,x			dec _exp,x
.90e2	20 b6 88	jsr $88b6			jsr F1000		;  r *= 1000
.90e5	20 de 8b	jsr $8bde			jsr FStar
.90e8	4c ce 90	jmp $90ce			jmp _30
.90eb					_39:
.90eb	a4 4c		ldy $4c		_a:		ldy FIndex		; while r >= 1000
.90ed	b9 4d 00	lda $004d,y			lda FSExp,y
.90f0	30 1c		bmi $910e			bmi _a9			; exponent negative?
.90f2	c9 0a		cmp #$0a			cmp #10
.90f4	90 18		bcc $910e			bcc _a9			;   < 10 ?
.90f6	d0 07		bne $90ff			bne _a2			;   > 10 ?
.90f8	b9 57 00	lda $0057,y			lda FSMant0,y
.90fb	c9 7d		cmp #$7d			cmp #$7d
.90fd	90 0f		bcc $910e			bcc _a9
.90ff	f6 24		inc $24,x	_a2:		inc _exp,x		;   exp += 3
.9101	f6 24		inc $24,x			inc _exp,x
.9103	f6 24		inc $24,x			inc _exp,x
.9105	20 b6 88	jsr $88b6			jsr F1000		;   r /= 1000
.9108	20 99 8c	jsr $8c99			jsr FSlash
.910b	4c eb 90	jmp $90eb			jmp _a
.910e					_a9:
.910e	4c a0 90	jmp $90a0			jmp PFSDotM
=73					CodeLen	.var *-XtPtr1
=$9111					Here1 = *	; remember here
>90c6	49					.byte CodeLen	;patch wh_CodeLength
>9111	46 45 2e			Name0:	.text "FE."	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37012					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9114	c3					.byte (("FE."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>9115	10					.byte WordFlags	;wh_Flags
>9116	03					.byte 3	;wh_CodeLength
>9117	50					  .byte LinkDisplacement	; offset to previous nt
=$9118					XtPtr1 ::= *
=37012					WordListLink ::= Nt0 ; remember the nt of this word for later
.9118	20 c8 90	jsr $90c8	FEDot:		jsr PFEDot
.911b	4c 54 90	jmp $9054			jmp FDot2
=6					CodeLen	.var *-XtPtr1
=$911e					Here1 = *	; remember here
>9116	06					.byte CodeLen	;patch wh_CodeLength
>911e	46 22				Name0:	.text 'F"'	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=37024					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9120	42					.byte (('F"'[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>9121	18					.byte WordFlags	;wh_Flags
>9122	03					.byte 3	;wh_CodeLength
>9123	0c					  .byte LinkDisplacement	; offset to previous nt
=$9124					XtPtr1 ::= *
=37024					WordListLink ::= Nt0 ; remember the nt of this word for later
.9124	20 6c ba	jsr $ba6c	FQuote:		jsr Parse_Name		; get string
.9127	20 47 91	jsr $9147			jsr ToFloat		; convert
.912a	b5 24		lda $24,x			lda DStack+0,x		; error?
.912c	f0 0a		beq $9138			beq _Err
.912e	e8		inx				inx
.912f	e8		inx				inx
.9130	a5 0a		lda $0a				lda State		; compiling?
.9132	d0 01		bne $9135			bne _compile
.9134	60		rts				rts
.9135	4c 05 88	jmp $8805	_compile:	jmp FLiteral		; compile a FP literal
.9138	a9 36		lda #$36	_Err:		lda #100+err_FPInvalidArg
.913a	20 74 b4	jsr $b474			jsr ThrowA
=25					CodeLen	.var *-XtPtr1
=$913d					Here1 = *	; remember here
>9122	19					.byte CodeLen	;patch wh_CodeLength
>913d	3e 46 6c 6f 61 74		Name0:	.text ">Float"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=37059					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9143	86					.byte ((">Float"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>9144	10					.byte WordFlags	;wh_Flags
>9145	03					.byte 3	;wh_CodeLength
>9146	23					  .byte LinkDisplacement	; offset to previous nt
=$9147					XtPtr1 ::= *
=37059					WordListLink ::= Nt0 ; remember the nt of this word for later
.9147					ToFloat:
.9147	20 eb b7	jsr $b7eb			jsr Zero	; alloc & init workspace
.914a	20 eb b7	jsr $b7eb			jsr Zero
.914d	20 eb b7	jsr $b7eb			jsr Zero
=$2c					_addr		= DStack+8
=$2a					_len		= DStack+6
=$29					_mantfound 	= DStack+5		;mantissa digits found
=$28					_exponent 	= DStack+4		;exponent
=$27					_decimalPos 	= DStack+3		;decimal point position
=$26					_DecPointFound1 = DStack+2
=$25					_MantissaNegative1 = DStack+1
=$24					_ExponentNegative1 = DStack+0
.9150	20 a6 88	jsr $88a6			jsr F0			; init result
.9153	20 25 92	jsr $9225	_11:		jsr _GetChar		; get mantissa prefix
.9156	b0 57		bcs $91af			bcs _trueb ;_finishb
.9158	c9 20		cmp #$20			cmp #' '
.915a	f0 f7		beq $9153			beq _11
.915c	c9 2b		cmp #$2b			cmp #'+'
.915e	f0 06		beq $9166			beq _20
.9160	c9 2d		cmp #$2d			cmp #'-'
.9162	d0 07		bne $916b			bne _21
.9164	95 25		sta $25,x			sta _MantissaNegative1,x ; remember mantissa is negative
.9166	20 25 92	jsr $9225	_20:		jsr _GetChar		; do next mantissa digits
.9169	b0 47		bcs $91b2			bcs _finishb
.916b	c9 2e		cmp #$2e	_21:		cmp #'.'
.916d	f0 31		beq $91a0			beq _27
.916f	c9 45		cmp #$45			cmp #'E'
.9171	f0 42		beq $91b5			beq _30
.9173	c9 65		cmp #$65			cmp #'e'
.9175	f0 3e		beq $91b5			beq _30
.9177	c9 44		cmp #$44			cmp #'D'
.9179	f0 3a		beq $91b5			beq _30
.917b	c9 64		cmp #$64			cmp #'d'
.917d	f0 36		beq $91b5			beq _30
.917f	38		sec				sec			;   a digit?
.9180	e9 30		sbc #$30			sbc #'0'
.9182	90 24		bcc $91a8			bcc _fail
.9184	c9 0a		cmp #$0a			cmp #9+1
.9186	b0 20		bcs $91a8			bcs _fail
.9188	48		pha				pha			; append digit to mantissa
.9189	20 7c 8c	jsr $8c7c			jsr F10Star
.918c	68		pla				pla
.918d	a0 00		ldy #$00			ldy #0
.918f	20 2b 8e	jsr $8e2b			jsr SToFYA
.9192	20 10 8b	jsr $8b10			jsr FPlus
.9195	f6 29		inc $29,x			inc _mantfound,x	; remember we found a mantissa digit
.9197	b5 26		lda $26,x			lda _DecPointFound1,x	; if mantissa decimal point found
.9199	f0 02		beq $919d			beq +
.919b	d6 27		dec $27,x			dec _decimalPos,x	;   increment decimal point position
.919d					+
.919d	4c 66 91	jmp $9166			jmp _20
.91a0					_27:
.91a0	b4 26		ldy $26,x			ldy _DecPointFound1,x	; already have one?
.91a2	d0 04		bne $91a8			bne _fail
.91a4	95 26		sta $26,x			sta _DecPointFound1,x	; we have one now!
.91a6	f0 be		beq $9166			beq _20
.91a8					_fail:
.91a8	20 09 85	jsr $8509			jsr FDrop
.91ab	a9 00		lda #$00			lda #0			;return false
.91ad	f0 69		beq $9218			beq _return
.91af	4c 16 92	jmp $9216	_trueb:		jmp _true
.91b2	4c e3 91	jmp $91e3	_finishb:	jmp _finish
.91b5					_30:
.91b5	20 25 92	jsr $9225			jsr _GetChar
.91b8	b0 29		bcs $91e3			bcs _finish
.91ba	c9 2b		cmp #$2b			cmp #'+'
.91bc	f0 06		beq $91c4			beq _40
.91be	c9 2d		cmp #$2d			cmp #'-'
.91c0	d0 07		bne $91c9			bne _41
.91c2	95 24		sta $24,x			sta _ExponentNegative1,x ; remember exponent is negative
.91c4	20 25 92	jsr $9225	_40:		jsr _GetChar		;get exponent digits
.91c7	b0 1a		bcs $91e3			bcs _finish
.91c9	38		sec		_41:		sec			;  digit?
.91ca	e9 30		sbc #$30			sbc #'0'
.91cc	90 da		bcc $91a8			bcc _fail
.91ce	c9 0a		cmp #$0a			cmp #9+1
.91d0	b0 d6		bcs $91a8			bcs _fail
.91d2	85 14		sta $14				sta tmp1
.91d4	16 28		asl $28,x			asl _exponent,x		;  exponent *= 10
.91d6	b5 28		lda $28,x			lda _exponent,x
.91d8	0a		asl a				asl a
.91d9	0a		asl a				asl a
.91da	75 28		adc $28,x			adc _exponent,x
.91dc	65 14		adc $14				adc tmp1		;  + digit
.91de	95 28		sta $28,x			sta _exponent,x
.91e0	4c c4 91	jmp $91c4			jmp _40
.91e3					_finish:
.91e3	b5 29		lda $29,x			lda _mantfound,x	;some mantissa digits found?
.91e5	f0 c1		beq $91a8			beq _fail
.91e7	b5 24		lda $24,x			lda _ExponentNegative1,x ;apply exponent sign
.91e9	f0 07		beq $91f2			beq +
.91eb	a9 00		lda #$00			lda #0
.91ed	38		sec				sec
.91ee	f5 28		sbc $28,x			sbc _exponent,x
.91f0	95 28		sta $28,x			sta _exponent,x
.91f2					+
.91f2	b5 28		lda $28,x			lda _exponent,x		;apply decimal position to exponent
.91f4	18		clc				clc
.91f5	75 27		adc $27,x			adc _decimalPos,x
.91f7	95 28		sta $28,x			sta _exponent,x
.91f9	4c 01 92	jmp $9201			jmp _93
.91fc	20 7c 8c	jsr $8c7c	_93b:		jsr F10Star		;apply exponent to mantissa
.91ff	d6 28		dec $28,x			dec _exponent,x
.9201	f0 0a		beq $920d	_93:		beq _94
.9203	10 f7		bpl $91fc			bpl _93b
.9205	20 c4 88	jsr $88c4	_94b:		jsr F10
.9208	20 99 8c	jsr $8c99			jsr FSlash
.920b	f6 28		inc $28,x			inc _exponent,x
.920d	30 f6		bmi $9205	_94:		bmi _94b
.920f					_95:
.920f	b5 25		lda $25,x			lda _MantissaNegative1,x ;apply mantissa sign
.9211	f0 03		beq $9216			beq +
.9213	20 85 8b	jsr $8b85			jsr FNegate
.9216					+
.9216	a9 ff		lda #$ff	_true:		lda #$ff		;return true
.9218					_return:
.9218	95 2c		sta $2c,x			sta _addr+0,x		; replace _addr with flag
.921a	95 2d		sta $2d,x			sta _addr+1,x
.921c	e8		inx				inx			; Drop work
.921d	e8		inx				inx
.921e	e8		inx				inx			; 2Drop work
.921f	e8		inx				inx
.9220	e8		inx				inx
.9221	e8		inx				inx
.9222	e8		inx				inx			; Drop len
.9223	e8		inx				inx
.9224	60		rts				rts
.9225					_GetChar:
.9225	38		sec				sec
.9226	b5 2a		lda $2a,x			lda _len,x
.9228	f0 0b		beq $9235			beq _gc_rts		; if end, return C=1
.922a	d6 2a		dec $2a,x			dec _len,x
.922c	a1 2c		lda ($2c,x)			lda (_addr,x)
.922e	f6 2c		inc $2c,x			inc _addr+0,x
.9230	d0 02		bne $9234			bne +
.9232	f6 2d		inc $2d,x			inc _addr+1,x
.9234					+
.9234	18		clc				clc			; get char, return C=0
.9235	60		rts		_gc_rts:	rts
>9236	46 4b 65 79			Name0:	.text "FKey"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=37306					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>923a	24					.byte (("FKey"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=247					LinkDisplacement = Nt0-WordListLink
>923b	10					.byte WordFlags	;wh_Flags
>923c	03					.byte 3	;wh_CodeLength
>923d	f7					  .byte LinkDisplacement	; offset to previous nt
=$923e					XtPtr1 ::= *
=37306					WordListLink ::= Nt0 ; remember the nt of this word for later
.923e					FKey:
.923e	20 23 ca	jsr $ca23			jsr Here		; ( addr )
.9241	20 23 ca	jsr $ca23			jsr Here		; ( addr addr )
.9244	a9 28		lda #$28			lda #40			; ( addr addr 40 )
.9246	20 dd b7	jsr $b7dd			jsr PushZA
.9249	20 a5 c2	jsr $c2a5			jsr Accept		; ( addr len )
.924c	20 47 91	jsr $9147			jsr ToFloat		; ( true | false)
.924f	e8		inx				inx			; err?
.9250	e8		inx				inx
.9251	b5 22		lda $22,x			lda DStack-2,x
.9253	f0 01		beq $9256			beq _err
.9255	60		rts				rts
.9256	20 a2 b8	jsr $b8a2	_err:		jsr SLiteral_runtime
.9259	4c 5f 92	jmp $925f			  jmp +
>925c	20 3f 20					  .text " ? "
.925f	20 d3 cd	jsr $cdd3	+		jsr Type
.9262	4c 3e 92	jmp $923e			jmp FKey
>9265	53 46 40			Name0:	.text "SF@"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37352					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9268	03					.byte (("SF@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=46					LinkDisplacement = Nt0-WordListLink
>9269	10					.byte WordFlags	;wh_Flags
>926a	03					.byte 3	;wh_CodeLength
>926b	2e					  .byte LinkDisplacement	; offset to previous nt
=$926c					XtPtr1 ::= *
=37352					WordListLink ::= Nt0 ; remember the nt of this word for later
.926c	20 ef b3	jsr $b3ef	SFAt:		jsr PopYA		; pop sf_addr
.926f	85 16		sta $16		SFAt_YA:	sta tmp2+0		; save sf_addr
.9271	84 17		sty $17				sty tmp2+1
.9273	20 bd 84	jsr $84bd			jsr FAllocX		; alloc FP stack entry
.9276	a0 01		ldy #$01			ldy #1			; copy exponent
.9278	b1 16		lda ($16),y			lda (tmp2),y
.927a	0a		asl a				asl a
.927b	88		dey				dey
.927c	b1 16		lda ($16),y			lda (tmp2),y
.927e	2a		rol a				rol a
.927f	38		sec				sec
.9280	e9 7e		sbc #$7e			sbc #126
.9282	95 4d		sta $4d,x			sta FSExp,x
.9284	a0 01		ldy #$01			ldy #1			; copy mantissa
.9286	b1 16		lda ($16),y			lda (tmp2),y
.9288	09 80		ora #$80			ora #$80
.928a	4a		lsr a				lsr a
.928b	95 57		sta $57,x			sta FSMant0,x
.928d	c8		iny				iny
.928e	b1 16		lda ($16),y			lda (tmp2),y
.9290	6a		ror a				ror a
.9291	95 61		sta $61,x			sta FSMant1,x
.9293	c8		iny				iny
.9294	b1 16		lda ($16),y			lda (tmp2),y
.9296	6a		ror a				ror a
.9297	95 6b		sta $6b,x			sta FSMant2,x
.9299	a9 00		lda #$00			lda #0
.929b	6a		ror a				ror a
.929c	95 75		sta $75,x			sta FSMant3,x
.929e	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.92a0	a0 00		ldy #$00			ldy #0			; get sign
.92a2	b1 16		lda ($16),y			lda (tmp2),y
.92a4	10 03		bpl $92a9			bpl +
.92a6	20 85 8b	jsr $8b85			jsr FNegate
.92a9					+
=61					CodeLen	.var *-XtPtr1
=$92a9					Here1 = *	; remember here
>926a	3d					.byte CodeLen	;patch wh_CodeLength
.92a9	60		rts				rts
>92aa	53 46 21			Name0:	.text "SF!"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37421					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>92ad	23					.byte (("SF!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=69					LinkDisplacement = Nt0-WordListLink
>92ae	10					.byte WordFlags	;wh_Flags
>92af	03					.byte 3	;wh_CodeLength
>92b0	45					  .byte LinkDisplacement	; offset to previous nt
=$92b1					XtPtr1 ::= *
=37421					WordListLink ::= Nt0 ; remember the nt of this word for later
.92b1	20 ef b3	jsr $b3ef	SFStore:	jsr PopYA		; pop sf_addr
.92b4	85 16		sta $16		SFStore_YA:	sta tmp2+0		; save
.92b6	84 17		sty $17				sty tmp2+1
.92b8	a4 4c		ldy $4c				ldy FIndex		; negative?
.92ba	b9 57 00	lda $0057,y			lda FSMant0,y
.92bd	29 80		and #$80			and #$80		;  save sign
.92bf	85 19		sta $19				sta tmp3+1
.92c1	10 03		bpl $92c6			bpl +
.92c3	20 85 8b	jsr $8b85			jsr FNegate
.92c6					+
.92c6	86 14		stx $14				stx tmp1+0		; save data stack index
.92c8	a6 4c		ldx $4c				ldx FIndex		; switch to FP stack index
.92ca	b5 4d		lda $4d,x			lda FSExp,x		; +128
.92cc	18		clc				clc
.92cd	69 7e		adc #$7e			adc #126
.92cf	95 4d		sta $4d,x			sta FSExp,x
.92d1	16 75		asl $75,x			asl FSMant3,x
.92d3	b5 6b		lda $6b,x			lda FSMant2,x
.92d5	2a		rol a				rol a
.92d6	a0 03		ldy #$03			ldy #3			; +3 IEEE
.92d8	91 16		sta ($16),y			sta (tmp2),y
.92da	b5 61		lda $61,x			lda FSMant1,x
.92dc	2a		rol a				rol a
.92dd	88		dey				dey			; +2 IEEE
.92de	91 16		sta ($16),y			sta (tmp2),y
.92e0	b5 57		lda $57,x			lda FSMant0,x
.92e2	2a		rol a				rol a
.92e3	2a		rol a				rol a
.92e4	56 4d		lsr $4d,x			lsr FSExp,x
.92e6	6a		ror a				ror a
.92e7	88		dey				dey			; +1 IEEE
.92e8	91 16		sta ($16),y			sta (tmp2),y
.92ea	b5 4d		lda $4d,x			lda FSExp,x
.92ec	05 19		ora $19				ora tmp3+1		;  insert sign
.92ee	88		dey				dey			; +0 IEEE
.92ef	91 16		sta ($16),y			sta (tmp2),y
.92f1	e6 4c		inc $4c				inc FIndex		; FDrop
.92f3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=68					CodeLen	.var *-XtPtr1
=$92f5					Here1 = *	; remember here
>92af	44					.byte CodeLen	;patch wh_CodeLength
.92f5	60		rts				rts
>92f6	53 46 6c 6f 61 74 2b		Name0:	.text "SFloat+"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=37501					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>92fd	67					.byte (("SFloat+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>92fe	10					.byte WordFlags	;wh_Flags
>92ff	03					.byte 3	;wh_CodeLength
>9300	50					  .byte LinkDisplacement	; offset to previous nt
=$9301					XtPtr1 ::= *
=37501					WordListLink ::= Nt0 ; remember the nt of this word for later
.9301	a9 04		lda #$04	SFloatPlus:	lda #4
.9303	4c 07 ca	jmp $ca07			jmp Plus_A
=5					CodeLen	.var *-XtPtr1
=$9306					Here1 = *	; remember here
>92ff	05					.byte CodeLen	;patch wh_CodeLength
>9306	53 46 6c 6f 61 74 73		Name0:	.text "SFloats"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=37517					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>930d	67					.byte (("SFloats"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>930e	10					.byte WordFlags	;wh_Flags
>930f	03					.byte 3	;wh_CodeLength
>9310	10					  .byte LinkDisplacement	; offset to previous nt
=$9311					XtPtr1 ::= *
=37517					WordListLink ::= Nt0 ; remember the nt of this word for later
.9311	a9 02		lda #$02	SFloats:	lda #2
.9313	4c 3d cb	jmp $cb3d			jmp LShift_A
=5					CodeLen	.var *-XtPtr1
=$9316					Here1 = *	; remember here
>930f	05					.byte CodeLen	;patch wh_CodeLength
>9316	44 46 21			Name0:	.text "DF!"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37529					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9319	23					.byte (("DF!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>931a	10					.byte WordFlags	;wh_Flags
>931b	03					.byte 3	;wh_CodeLength
>931c	0c					  .byte LinkDisplacement	; offset to previous nt
=$931d					XtPtr1 ::= *
=37529					WordListLink ::= Nt0 ; remember the nt of this word for later
.931d	20 ef b3	jsr $b3ef	DFStore:	jsr PopYA		; pop df_addr
.9320	85 16		sta $16		DFStore_YA:	sta tmp2+0		; save df_addr
.9322	84 17		sty $17				sty tmp2+1
.9324	a4 4c		ldy $4c				ldy FIndex		; negative?
.9326	b9 57 00	lda $0057,y			lda FSMant0,y
.9329	29 80		and #$80			and #$80		; remember sign
.932b	85 19		sta $19				sta tmp3+1
.932d	10 03		bpl $9332			bpl +			; make positive
.932f	20 85 8b	jsr $8b85			jsr FNegate
.9332					+
.9332	86 14		stx $14				stx tmp1+0		; save data stack index
.9334	a6 4c		ldx $4c				ldx FIndex
.9336	a9 00		lda #$00			lda #0
.9338	a0 07		ldy #$07			ldy #7			; +7 IEEE
.933a	91 16		sta ($16),y			sta (tmp2),y
.933c	88		dey				dey			; +6 IEEE
.933d	91 16		sta ($16),y			sta (tmp2),y
.933f	20 87 93	jsr $9387			jsr _shift		; shift mantissa
.9342	20 87 93	jsr $9387			jsr _shift
.9345	88		dey				dey			; +5 IEEE
.9346	91 16		sta ($16),y			sta (tmp2),y
.9348	b5 75		lda $75,x			lda FSMant3,x
.934a	88		dey				dey			; +4 IEEE
.934b	91 16		sta ($16),y			sta (tmp2),y
.934d	b5 6b		lda $6b,x			lda FSMant2,x
.934f	88		dey				dey			; +3 IEEE
.9350	91 16		sta ($16),y			sta (tmp2),y
.9352	b5 61		lda $61,x			lda FSMant1,x
.9354	88		dey				dey			; +2 IEEE
.9355	91 16		sta ($16),y			sta (tmp2),y
.9357	b5 57		lda $57,x			lda FSMant0,x		; clear extra bits
.9359	29 0f		and #$0f			and #$f
.935b	95 57		sta $57,x			sta FSMant0,x
.935d	b5 4d		lda $4d,x			lda FSExp,x
.935f	38		sec				sec
.9360	e9 02		sbc #$02			sbc #2
.9362	95 4d		sta $4d,x			sta FSExp,x
.9364	0a		asl a				asl a
.9365	0a		asl a				asl a
.9366	0a		asl a				asl a
.9367	0a		asl a				asl a
.9368	15 57		ora $57,x			ora FSMant0,x
.936a	88		dey				dey			; +1 IEEE
.936b	91 16		sta ($16),y			sta (tmp2),y
.936d	b5 4d		lda $4d,x			lda FSExp,x
.936f	08		php				php
.9370	4a		lsr a				lsr a
.9371	4a		lsr a				lsr a
.9372	4a		lsr a				lsr a
.9373	4a		lsr a				lsr a
.9374	18		clc				clc
.9375	69 30		adc #$30			adc #$30
.9377	28		plp				plp
.9378	30 03		bmi $937d			bmi +
.937a	18		clc				clc
.937b	69 10		adc #$10			adc #$10
.937d	05 19		ora $19		+		ora tmp3+1		; add sign bit
.937f	88		dey				dey			; +0 IEEE
.9380	91 16		sta ($16),y			sta (tmp2),y
.9382	e6 4c		inc $4c				inc FIndex		; FDrop
.9384	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.9386	60		rts				rts
.9387	56 57		lsr $57,x	_shift:		lsr FSMant0,x
.9389	76 61		ror $61,x			ror FSMant1,x
.938b	76 6b		ror $6b,x			ror FSMant2,x
.938d	76 75		ror $75,x			ror FSMant3,x
.938f	6a		ror a				ror a
=115					CodeLen	.var *-XtPtr1
=$9390					Here1 = *	; remember here
>931b	73					.byte CodeLen	;patch wh_CodeLength
.9390	60		rts				rts
>9391	44 46 40			Name0:	.text "DF@"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37652					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9394	03					.byte (("DF@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=123					LinkDisplacement = Nt0-WordListLink
>9395	10					.byte WordFlags	;wh_Flags
>9396	03					.byte 3	;wh_CodeLength
>9397	7b					  .byte LinkDisplacement	; offset to previous nt
=$9398					XtPtr1 ::= *
=37652					WordListLink ::= Nt0 ; remember the nt of this word for later
.9398	20 ef b3	jsr $b3ef	DFAt:		jsr PopYA		; pop df_addr
.939b	85 16		sta $16		DFAt_YA:	sta tmp2+0		; save df_addr
.939d	84 17		sty $17				sty tmp2+1
.939f	20 bd 84	jsr $84bd			jsr FAllocX		; alloc FP stack entry
.93a2	a0 00		ldy #$00			ldy #0			; +0 IEEE byte
.93a4	b1 16		lda ($16),y			lda (tmp2),y
.93a6	95 4d		sta $4d,x			sta FSExp,x
.93a8	c8		iny				iny			; +1 IEEE byte
.93a9	b1 16		lda ($16),y			lda (tmp2),y
.93ab	95 57		sta $57,x			sta FSMant0,x
.93ad	c8		iny				iny			; +2 IEEE byte
.93ae	b1 16		lda ($16),y			lda (tmp2),y
.93b0	95 61		sta $61,x			sta FSMant1,x
.93b2	c8		iny				iny			; +3 IEEE byte
.93b3	b1 16		lda ($16),y			lda (tmp2),y
.93b5	95 6b		sta $6b,x			sta FSMant2,x
.93b7	c8		iny				iny			; +4 IEEE byte
.93b8	b1 16		lda ($16),y			lda (tmp2),y
.93ba	95 75		sta $75,x			sta FSMant3,x
.93bc	c8		iny				iny			; +5 IEEE byte
.93bd	b1 16		lda ($16),y			lda (tmp2),y
.93bf	20 e8 93	jsr $93e8			jsr _shifta		; shift exponent & mantissa bits into place
.93c2	20 e8 93	jsr $93e8			jsr _shifta
.93c5	b5 57		lda $57,x			lda FSMant0,x		; finish shifting exponent bits
.93c7	0a		asl a				asl a
.93c8	36 4d		rol $4d,x			rol FSExp,x
.93ca	0a		asl a				asl a
.93cb	36 4d		rol $4d,x			rol FSExp,x
.93cd	b5 4d		lda $4d,x			lda FSExp,x		; remove +1023
.93cf	18		clc				clc
.93d0	69 02		adc #$02			adc #2
.93d2	95 4d		sta $4d,x			sta FSExp,x
.93d4	b5 57		lda $57,x			lda FSMant0,x
.93d6	29 7f		and #$7f			and #$7f
.93d8	09 40		ora #$40			ora #$40		;   insert implied 1
.93da	95 57		sta $57,x			sta FSMant0,x		;   insert sign=0
.93dc	a6 14		ldx $14				ldx tmp1		; restore data stack index
.93de	a0 00		ldy #$00			ldy #0			; get sign from +0 IEEE byte
.93e0	b1 16		lda ($16),y			lda (tmp2),y
.93e2	10 03		bpl $93e7			bpl +
.93e4	20 85 8b	jsr $8b85			jsr FNegate
.93e7					+
.93e7	60		rts				rts
.93e8	0a		asl a		_shifta:	asl a
.93e9	36 75		rol $75,x			rol FSMant3,x
.93eb	36 6b		rol $6b,x			rol FSMant2,x
.93ed	36 61		rol $61,x			rol FSMant1,x
.93ef	36 57		rol $57,x			rol FSMant0,x
.93f1	36 4d		rol $4d,x			rol FSExp,x
.93f3	60		rts				rts
=92					CodeLen	.var *-XtPtr1
=$93f4					Here1 = *	; remember here
>9396	5c					.byte CodeLen	;patch wh_CodeLength
>93f4	44 46 6c 6f 61 74 2b		Name0:	.text "DFloat+"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=37755					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>93fb	67					.byte (("DFloat+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=103					LinkDisplacement = Nt0-WordListLink
>93fc	10					.byte WordFlags	;wh_Flags
>93fd	03					.byte 3	;wh_CodeLength
>93fe	67					  .byte LinkDisplacement	; offset to previous nt
=$93ff					XtPtr1 ::= *
=37755					WordListLink ::= Nt0 ; remember the nt of this word for later
.93ff	a9 08		lda #$08	DFloatPlus:	lda #8
.9401	4c 07 ca	jmp $ca07			jmp Plus_A
=5					CodeLen	.var *-XtPtr1
=$9404					Here1 = *	; remember here
>93fd	05					.byte CodeLen	;patch wh_CodeLength
>9404	44 46 6c 6f 61 74 73		Name0:	.text "DFloats"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=37771					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>940b	67					.byte (("DFloats"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>940c	10					.byte WordFlags	;wh_Flags
>940d	03					.byte 3	;wh_CodeLength
>940e	10					  .byte LinkDisplacement	; offset to previous nt
=$940f					XtPtr1 ::= *
=37771					WordListLink ::= Nt0 ; remember the nt of this word for later
.940f	a9 03		lda #$03	DFloats:	lda #3
.9411	4c 3d cb	jmp $cb3d			jmp LShift_A
=5					CodeLen	.var *-XtPtr1
=$9414					Here1 = *	; remember here
>940d	05					.byte CodeLen	;patch wh_CodeLength
>9414	46 4d 50 6f 6c 79		Name0:	.text "FMPoly"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=37786					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>941a	26					.byte (("FMPoly"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>941b	10					.byte WordFlags	;wh_Flags
>941c	03					.byte 3	;wh_CodeLength
>941d	0f					  .byte LinkDisplacement	; offset to previous nt
=$941e					XtPtr1 ::= *
=37786					WordListLink ::= Nt0 ; remember the nt of this word for later
.941e	20 ef b3	jsr $b3ef	FMPoly:		jsr PopYA
.9421	20 ae b7	jsr $b7ae	FMPolyYA:	jsr PushYA		; push coefficent addr
.9424	20 4a 86	jsr $864a			jsr FAt_YA		; fetch 1st coefficent
.9427	4c 3a 94	jmp $943a			jmp _4
.942a	20 6b 85	jsr $856b	_2:		jsr FOver
.942d	20 de 8b	jsr $8bde			jsr FStar
.9430	b5 24		lda $24,x			lda DStack+0,x		; fetch next coefficent
.9432	b4 25		ldy $25,x			ldy DStack+1,x
.9434	20 4a 86	jsr $864a			jsr FAt_YA
.9437	20 10 8b	jsr $8b10			jsr FPlus
.943a	a9 05		lda #$05	_4:		lda #5			; bump coefficent ptr
.943c	20 07 ca	jsr $ca07			jsr Plus_A
.943f	a1 24		lda ($24,x)			lda (DStack+0,x)	; end of coefficent list?
.9441	d0 e7		bne $942a			bne _2
.9443	e8		inx				inx			; Drop coefficent ptr
.9444	e8		inx				inx
=39					CodeLen	.var *-XtPtr1
=$9445					Here1 = *	; remember here
>941c	27					.byte CodeLen	;patch wh_CodeLength
.9445	60		rts				rts
>9446	46 4c 6f 67 32 4d 31 4d		Name0:	.text "FLog2M1M"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=37838					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>944e	a8					.byte (("FLog2M1M"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>944f	10					.byte WordFlags	;wh_Flags
>9450	03					.byte 3	;wh_CodeLength
>9451	34					  .byte LinkDisplacement	; offset to previous nt
=$9452					XtPtr1 ::= *
=37838					WordListLink ::= Nt0 ; remember the nt of this word for later
.9452	a9 5c		lda #$5c	FLog2M1M:	lda #<_c
.9454	a0 94		ldy #$94			ldy #>_c
.9456	20 21 94	jsr $9421			jsr FMPolyYA
.9459	4c de 8b	jmp $8bde			jmp FStar
=10					CodeLen	.var *-XtPtr1
=$945c					Here1 = *	; remember here
>9450	0a					.byte CodeLen	;patch wh_CodeLength
.945c					_c:
>945c	cc cf 97 7c					.dword $7C97CFCC	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9460	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9461	64 87 94 af					.dword $AF948764	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9465	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>9466	66 c8 d4 62					.dword $62D4C866	; 32 bit signed binary mantissa.  $40000000 = +0.5
>946a	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>946b	e2 9c c3 ac					.dword $ACC39CE2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>946f	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9470	1a c6 2b 79					.dword $792BC61A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9474	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9475	07 e1 c4 a3					.dword $A3C4E107	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9479	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>947a	91 a5 54 5c					.dword $5C54A591	; 32 bit signed binary mantissa.  $40000000 = +0.5
>947e	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>947f	00 00						.word 0
>9481	46 4c 6f 67 32			Name0:	.text "FLog2"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=37894					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9486	45					.byte (("FLog2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>9487	10					.byte WordFlags	;wh_Flags
>9488	03					.byte 3	;wh_CodeLength
>9489	38					  .byte LinkDisplacement	; offset to previous nt
=$948a					XtPtr1 ::= *
=37894					WordListLink ::= Nt0 ; remember the nt of this word for later
.948a	a4 4c		ldy $4c		FLog2:		ldy FIndex
.948c	b9 57 00	lda $0057,y			lda FSMant0,y	; bad param?
.948f	30 20		bmi $94b1			bmi _OutOfRange
.9491	f0 1e		beq $94b1			beq _OutOfRange
.9493	b9 4d 00	lda $004d,y			lda FSExp,y
.9496	48		pha				pha		; remember orig exponent
.9497	a9 01		lda #$01			lda #1
.9499	99 4d 00	sta $004d,y			sta FSExp,y	; set to 1
.949c	20 74 8b	jsr $8b74			jsr F1Minus
.949f	20 52 94	jsr $9452			jsr FLog2M1M
.94a2	a0 00		ldy #$00			ldy #0		; add orig exponent to float
.94a4	68		pla				pla
.94a5	38		sec				sec
.94a6	e9 01		sbc #$01			sbc #1
.94a8	10 01		bpl $94ab			bpl +
.94aa	88		dey				dey
.94ab					+
.94ab	20 2b 8e	jsr $8e2b			jsr SToFYA
.94ae	4c 10 8b	jmp $8b10			jmp FPlus
.94b1	4c 4f b4	jmp $b44f	_OutOfRange:	jmp Throw_FpOutOfRange
=42					CodeLen	.var *-XtPtr1
=$94b4					Here1 = *	; remember here
>9488	2a					.byte CodeLen	;patch wh_CodeLength
>94b4	46 4c 6e			Name0:	.text "FLn"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37943					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94b7	c3					.byte (("FLn"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>94b8	10					.byte WordFlags	;wh_Flags
>94b9	03					.byte 3	;wh_CodeLength
>94ba	31					  .byte LinkDisplacement	; offset to previous nt
=$94bb					XtPtr1 ::= *
=37943					WordListLink ::= Nt0 ; remember the nt of this word for later
.94bb	20 8a 94	jsr $948a	FLn:		jsr FLog2
.94be	20 43 88	jsr $8843			jsr FLitI
>94c1	f8 0b b9 58					.dword $58b90bf8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94c5	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
.94c6	4c de 8b	jmp $8bde			jmp FStar
=14					CodeLen	.var *-XtPtr1
=$94c9					Here1 = *	; remember here
>94b9	0e					.byte CodeLen	;patch wh_CodeLength
>94c9	46 4c 6e 50 31			Name0:	.text "FLnP1"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=37966					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94ce	25					.byte (("FLnP1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>94cf	10					.byte WordFlags	;wh_Flags
>94d0	03					.byte 3	;wh_CodeLength
>94d1	17					  .byte LinkDisplacement	; offset to previous nt
=$94d2					XtPtr1 ::= *
=37966					WordListLink ::= Nt0 ; remember the nt of this word for later
.94d2	20 44 8b	jsr $8b44	FlnP1:		jsr F1Plus
.94d5	4c bb 94	jmp $94bb			jmp FLn
=6					CodeLen	.var *-XtPtr1
=$94d8					Here1 = *	; remember here
>94d0	06					.byte CodeLen	;patch wh_CodeLength
>94d8	46 4c 6f 67			Name0:	.text "FLog"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=37980					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94dc	e4					.byte (("FLog"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>94dd	10					.byte WordFlags	;wh_Flags
>94de	03					.byte 3	;wh_CodeLength
>94df	0e					  .byte LinkDisplacement	; offset to previous nt
=$94e0					XtPtr1 ::= *
=37980					WordListLink ::= Nt0 ; remember the nt of this word for later
.94e0	20 8a 94	jsr $948a	FLog:		jsr FLog2
.94e3	20 43 88	jsr $8843			jsr FLitI
>94e6	3c 4d 10 4d					.dword $4d104d3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94ea	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
.94eb	4c de 8b	jmp $8bde			jmp FStar
=14					CodeLen	.var *-XtPtr1
=$94ee					Here1 = *	; remember here
>94de	0e					.byte CodeLen	;patch wh_CodeLength
>94ee	46 45 78 70 32 4d 31 4d		Name0:	.text "FExp2M1M"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=38006					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94f6	a8					.byte (("FExp2M1M"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>94f7	10					.byte WordFlags	;wh_Flags
>94f8	03					.byte 3	;wh_CodeLength
>94f9	1a					  .byte LinkDisplacement	; offset to previous nt
=$94fa					XtPtr1 ::= *
=38006					WordListLink ::= Nt0 ; remember the nt of this word for later
.94fa	a9 04		lda #$04	FExp2M1M:	lda #<_c
.94fc	a0 95		ldy #$95			ldy #>_c
.94fe	20 21 94	jsr $9421			jsr FMPolyYA
.9501	4c de 8b	jmp $8bde			jmp FStar
=10					CodeLen	.var *-XtPtr1
=$9504					Here1 = *	; remember here
>94f8	0a					.byte CodeLen	;patch wh_CodeLength
.9504					_c:
>9504	e7 dc 4f 7c					.dword $7C4FDCe7	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9508	f7						.char -9		; 8 bit signed exponent.  $00 = 2**0
>9509	de ca 4c 49					.dword $494CCADe	; 32 bit signed binary mantissa.  $40000000 = +0.5
>950d	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>950e	fb 42 64 72					.dword $726442fb	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9512	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9513	50 90 f4 7a					.dword $7AF49050	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9517	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9518	a2 3c b9 58					.dword $58B93Ca2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>951c	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>951d	00						.byte 0
>951e	46 45 78 70 32			Name0:	.text "FExp2"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38051					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9523	45					.byte (("FExp2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>9524	10					.byte WordFlags	;wh_Flags
>9525	03					.byte 3	;wh_CodeLength
>9526	2d					  .byte LinkDisplacement	; offset to previous nt
=$9527					XtPtr1 ::= *
=38051					WordListLink ::= Nt0 ; remember the nt of this word for later
.9527	20 40 8a	jsr $8a40	FExp2:		jsr FIntFrc	; ( f: r_rem r_int )
.952a	20 73 8e	jsr $8e73			jsr FToS
.952d	20 fa 94	jsr $94fa			jsr FExp2M1M
.9530	20 44 8b	jsr $8b44			jsr F1Plus
.9533	20 d4 b3	jsr $b3d4			jsr PopA
.9536	a4 4c		ldy $4c				ldy FIndex
.9538	18		clc				clc
.9539	79 4d 00	adc $004d,y			adc FSExp,y
.953c	99 4d 00	sta $004d,y			sta FSExp,y
=24					CodeLen	.var *-XtPtr1
=$953f					Here1 = *	; remember here
>9525	18					.byte CodeLen	;patch wh_CodeLength
.953f	60		rts				rts
>9540	46 45 78 70			Name0:	.text "FExp"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38084					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9544	04					.byte (("FExp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>9545	10					.byte WordFlags	;wh_Flags
>9546	03					.byte 3	;wh_CodeLength
>9547	21					  .byte LinkDisplacement	; offset to previous nt
=$9548					XtPtr1 ::= *
=38084					WordListLink ::= Nt0 ; remember the nt of this word for later
.9548					FExp:
.9548	20 43 88	jsr $8843			jsr FLitI
>954b	94 1d 55 5c					.dword $5c551d94	; 32 bit signed binary mantissa.  $40000000 = +0.5
>954f	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
.9550	20 de 8b	jsr $8bde			jsr FStar
.9553	4c 27 95	jmp $9527			jmp FExp2
=14					CodeLen	.var *-XtPtr1
=$9556					Here1 = *	; remember here
>9546	0e					.byte CodeLen	;patch wh_CodeLength
>9556	46 45 78 70 4d 31		Name0:	.text "FExpM1"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=38108					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>955c	26					.byte (("FExpM1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>955d	10					.byte WordFlags	;wh_Flags
>955e	03					.byte 3	;wh_CodeLength
>955f	18					  .byte LinkDisplacement	; offset to previous nt
=$9560					XtPtr1 ::= *
=38108					WordListLink ::= Nt0 ; remember the nt of this word for later
.9560	20 48 95	jsr $9548	FExpM1:		jsr FExp
.9563	4c 74 8b	jmp $8b74			jmp F1Minus
=6					CodeLen	.var *-XtPtr1
=$9566					Here1 = *	; remember here
>955e	06					.byte CodeLen	;patch wh_CodeLength
>9566	46 41 4c 6f 67			Name0:	.text "FALog"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38123					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>956b	e5					.byte (("FALog"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>956c	10					.byte WordFlags	;wh_Flags
>956d	03					.byte 3	;wh_CodeLength
>956e	0f					  .byte LinkDisplacement	; offset to previous nt
=$956f					XtPtr1 ::= *
=38123					WordListLink ::= Nt0 ; remember the nt of this word for later
.956f					FALog:
.956f	20 43 88	jsr $8843			jsr FLitI
>9572	25 3c 4d 6a					.dword $6a4d3c25	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9576	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
.9577	20 de 8b	jsr $8bde			jsr FStar
.957a	4c 27 95	jmp $9527			jmp FExp2
=14					CodeLen	.var *-XtPtr1
=$957d					Here1 = *	; remember here
>956d	0e					.byte CodeLen	;patch wh_CodeLength
>957d	46 2a 2a			Name0:	.text "F**"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=38144					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9580	43					.byte (("F**"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>9581	10					.byte WordFlags	;wh_Flags
>9582	03					.byte 3	;wh_CodeLength
>9583	15					  .byte LinkDisplacement	; offset to previous nt
=$9584					XtPtr1 ::= *
=38144					WordListLink ::= Nt0 ; remember the nt of this word for later
.9584	20 cc 85	jsr $85cc	FPower:		jsr FSwap
.9587	20 8a 94	jsr $948a			jsr FLog2
.958a	20 de 8b	jsr $8bde			jsr FStar
.958d	4c 27 95	jmp $9527			jmp FExp2
=12					CodeLen	.var *-XtPtr1
=$9590					Here1 = *	; remember here
>9582	0c					.byte CodeLen	;patch wh_CodeLength
>9590	44 65 67 32 52 61 64		Name0:	.text "Deg2Rad"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=38167					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9597	87					.byte (("Deg2Rad"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>9598	10					.byte WordFlags	;wh_Flags
>9599	03					.byte 3	;wh_CodeLength
>959a	17					  .byte LinkDisplacement	; offset to previous nt
=$959b					XtPtr1 ::= *
=38167					WordListLink ::= Nt0 ; remember the nt of this word for later
.959b					Deg2Rad:
.959b	20 43 88	jsr $8843			jsr FLitI
>959e	8a 1a 7d 47					.dword $477d1A8A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95a2	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
.95a3	4c de 8b	jmp $8bde			jmp FStar
=11					CodeLen	.var *-XtPtr1
=$95a6					Here1 = *	; remember here
>9599	0b					.byte CodeLen	;patch wh_CodeLength
>95a6	52 61 64 32 44 65 67		Name0:	.text "Rad2Deg"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=38189					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>95ad	e7					.byte (("Rad2Deg"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>95ae	10					.byte WordFlags	;wh_Flags
>95af	03					.byte 3	;wh_CodeLength
>95b0	16					  .byte LinkDisplacement	; offset to previous nt
=$95b1					XtPtr1 ::= *
=38189					WordListLink ::= Nt0 ; remember the nt of this word for later
.95b1					Rad2Deg:
.95b1	20 43 88	jsr $8843			jsr FLitI
>95b4	68 70 97 72					.dword $72977068	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95b8	06						.char 6		; 8 bit signed exponent.  $00 = 2**0
.95b9	4c de 8b	jmp $8bde			jmp FStar
=11					CodeLen	.var *-XtPtr1
=$95bc					Here1 = *	; remember here
>95af	0b					.byte CodeLen	;patch wh_CodeLength
>95bc	46 41 52 65 64 75 63 65		Name0:	.text "FAReduce"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=38212					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>95c4	a8					.byte (("FAReduce"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>95c5	10					.byte WordFlags	;wh_Flags
>95c6	03					.byte 3	;wh_CodeLength
>95c7	17					  .byte LinkDisplacement	; offset to previous nt
=$95c8					XtPtr1 ::= *
=38212					WordListLink ::= Nt0 ; remember the nt of this word for later
.95c8	a4 4c		ldy $4c		FAReduce:	ldy FIndex
.95ca	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.95cd	f0 2f		beq $95fe			beq _ok
.95cf	b9 4d 00	lda $004d,y			lda FSExp,y		; get exponent
.95d2	30 2a		bmi $95fe			bmi _ok			; small?
.95d4	c9 01		cmp #$01			cmp #1			; maybe need mirror?
.95d6	30 26		bmi $95fe			bmi _ok			;if exponent <=0
.95d8	f0 24		beq $95fe			beq _ok
.95da	c9 02		cmp #$02			cmp #2			; maybe need rotation?
.95dc	b0 22		bcs $9600			bcs _exp2
.95de	b9 57 00	lda $0057,y			lda FSMant0,y
.95e1	c9 65		cmp #$65			cmp #$65		;in -pi/2..pi/2 ?
.95e3	90 19		bcc $95fe			bcc _ok
.95e5	c9 9b		cmp #$9b			cmp #$100-$65
.95e7	b0 15		bcs $95fe			bcs _ok
.95e9					_mir:
.95e9	20 f9 88	jsr $88f9			jsr FPi
.95ec	a4 4c		ldy $4c				ldy FIndex
.95ee	b9 58 00	lda $0058,y			lda FSMant0+1,y
.95f1	10 03		bpl $95f6			bpl _3
.95f3	20 85 8b	jsr $8b85			jsr FNegate
.95f6	20 cc 85	jsr $85cc	_3:		jsr FSwap
.95f9	20 50 8b	jsr $8b50			jsr FMinus
.95fc	38		sec				sec		; mirrored
.95fd	60		rts				rts
.95fe	18		clc		_ok:		clc		; not mirrored
.95ff	60		rts				rts
.9600	d0 0b		bne $960d	_exp2:		bne _rot	;if exp>2 then fix
.9602	b9 57 00	lda $0057,y			lda FSMant0,y
.9605	c9 65		cmp #$65			cmp #$65	;if mant>pi or mant<-pi then fix
.9607	90 e0		bcc $95e9			bcc _mir
.9609	c9 9b		cmp #$9b			cmp #$100-$65
.960b	b0 dc		bcs $95e9			bcs _mir
.960d	20 28 89	jsr $8928	_rot:		jsr F2Pi
.9610	20 99 8c	jsr $8c99			jsr FSlash
.9613	20 40 8a	jsr $8a40			jsr FIntFrc
.9616	e6 4c		inc $4c				inc FIndex	; FDrop integer part
.9618	a4 4c		ldy $4c				ldy FIndex	;if >=.5
.961a	b9 4d 00	lda $004d,y			lda FSExp,y
.961d	a8		tay				tay
.961e	30 03		bmi $9623			bmi _rot4
.9620	20 74 8b	jsr $8b74			jsr F1Minus	;  subtract 1
.9623	20 28 89	jsr $8928	_rot4:		jsr F2Pi
.9626	20 de 8b	jsr $8bde			jsr FStar
.9629	4c c8 95	jmp $95c8			jmp FAReduce	; rotate done, look again
=100					CodeLen	.var *-XtPtr1
=$962c					Here1 = *	; remember here
>95c6	64					.byte CodeLen	;patch wh_CodeLength
>962c	46 53 69 6e			Name0:	.text "FSin"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38320					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9630	c4					.byte (("FSin"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=108					LinkDisplacement = Nt0-WordListLink
>9631	10					.byte WordFlags	;wh_Flags
>9632	03					.byte 3	;wh_CodeLength
>9633	6c					  .byte LinkDisplacement	; offset to previous nt
=$9634					XtPtr1 ::= *
=38320					WordListLink ::= Nt0 ; remember the nt of this word for later
.9634	20 c8 95	jsr $95c8	FSin:		jsr FAReduce
.9637	4c 3a 96	jmp $963a			jmp FSinM
=6					CodeLen	.var *-XtPtr1
=$963a					Here1 = *	; remember here
>9632	06					.byte CodeLen	;patch wh_CodeLength
.963a	20 48 85	jsr $8548	FSinM:		jsr FDup
.963d	20 6e 8c	jsr $8c6e			jsr FSqr	; x x^2
.9640	a9 50		lda #$50			lda #<_c
.9642	a0 96		ldy #$96			ldy #>_c
.9644	20 21 94	jsr $9421			jsr FMPolyYA
.9647	20 de 8b	jsr $8bde			jsr FStar
.964a	20 44 8b	jsr $8b44			jsr F1Plus	; C0 +1.0
.964d	4c de 8b	jmp $8bde			jmp FStar
.9650					_c:
>9650	ba a7 21 57					.dword $5721a7ba	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9654	ee						.char -18		; 8 bit signed exponent.  $00 = 2**0
>9655	3a 0b 2a 98					.dword $982a0b3a	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9659	f4						.char -12		; 8 bit signed exponent.  $00 = 2**0
>965a	4c 8f 43 44					.dword $44438f4c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>965e	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>965f	2b ae aa aa					.dword $aaaaae2b	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9663	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9664	00						.byte 0
>9665	46 43 73 63			Name0:	.text "FCsc"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38377					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9669	64					.byte (("FCsc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=57					LinkDisplacement = Nt0-WordListLink
>966a	10					.byte WordFlags	;wh_Flags
>966b	03					.byte 3	;wh_CodeLength
>966c	39					  .byte LinkDisplacement	; offset to previous nt
=$966d					XtPtr1 ::= *
=38377					WordListLink ::= Nt0 ; remember the nt of this word for later
.966d	20 34 96	jsr $9634	FCsc:		jsr FSin
.9670	4c 3d 8d	jmp $8d3d			jmp F1Slash		; 1/SIN(r1)
=6					CodeLen	.var *-XtPtr1
=$9673					Here1 = *	; remember here
>966b	06					.byte CodeLen	;patch wh_CodeLength
>9673	46 43 6f 73			Name0:	.text "FCos"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38391					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9677	64					.byte (("FCos"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>9678	10					.byte WordFlags	;wh_Flags
>9679	03					.byte 3	;wh_CodeLength
>967a	0e					  .byte LinkDisplacement	; offset to previous nt
=$967b					XtPtr1 ::= *
=38391					WordListLink ::= Nt0 ; remember the nt of this word for later
.967b	20 09 89	jsr $8909	FCos:		jsr FPiH
.967e	20 10 8b	jsr $8b10			jsr FPlus
.9681	4c 34 96	jmp $9634			jmp FSin
=9					CodeLen	.var *-XtPtr1
=$9684					Here1 = *	; remember here
>9679	09					.byte CodeLen	;patch wh_CodeLength
>9684	46 53 65 63			Name0:	.text "FSec"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38408					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9688	64					.byte (("FSec"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>9689	10					.byte WordFlags	;wh_Flags
>968a	03					.byte 3	;wh_CodeLength
>968b	11					  .byte LinkDisplacement	; offset to previous nt
=$968c					XtPtr1 ::= *
=38408					WordListLink ::= Nt0 ; remember the nt of this word for later
.968c	20 7b 96	jsr $967b	FSec:		jsr FCos
.968f	4c 3d 8d	jmp $8d3d			jmp F1Slash		; 1/COS(r1)
=6					CodeLen	.var *-XtPtr1
=$9692					Here1 = *	; remember here
>968a	06					.byte CodeLen	;patch wh_CodeLength
>9692	46 53 69 6e 43 6f 73		Name0:	.text "FSinCos"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=38425					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9699	67					.byte (("FSinCos"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>969a	10					.byte WordFlags	;wh_Flags
>969b	03					.byte 3	;wh_CodeLength
>969c	11					  .byte LinkDisplacement	; offset to previous nt
=$969d					XtPtr1 ::= *
=38425					WordListLink ::= Nt0 ; remember the nt of this word for later
.969d	20 48 85	jsr $8548	FSinCos:	jsr FDup
.96a0	20 34 96	jsr $9634			jsr FSin
.96a3	20 cc 85	jsr $85cc			jsr FSwap
.96a6	4c 7b 96	jmp $967b			jmp FCos
=12					CodeLen	.var *-XtPtr1
=$96a9					Here1 = *	; remember here
>969b	0c					.byte CodeLen	;patch wh_CodeLength
>96a9	46 54 61 6e			Name0:	.text "FTan"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38445					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>96ad	c4					.byte (("FTan"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>96ae	10					.byte WordFlags	;wh_Flags
>96af	03					.byte 3	;wh_CodeLength
>96b0	14					  .byte LinkDisplacement	; offset to previous nt
=$96b1					XtPtr1 ::= *
=38445					WordListLink ::= Nt0 ; remember the nt of this word for later
.96b1	20 c8 95	jsr $95c8	FTan:		jsr FAReduce
.96b4	90 06		bcc $96bc			bcc _30
.96b6	20 bc 96	jsr $96bc			jsr _30
.96b9	4c 85 8b	jmp $8b85			jmp FNegate
.96bc					_30:
.96bc	20 48 85	jsr $8548			jsr FDup
.96bf	20 ab 8b	jsr $8bab			jsr FAbs
.96c2	20 19 89	jsr $8919			jsr FPiQ
.96c5	20 63 87	jsr $8763			jsr FLe
.96c8	e8		inx				inx			; pop f
.96c9	e8		inx				inx
.96ca	b5 24		lda $24,x			lda DStack+0,x
.96cc	d0 19		bne $96e7			bne FTanM
.96ce	20 09 89	jsr $8909			jsr FPiH
.96d1	a4 4c		ldy $4c				ldy FIndex		; get sign
.96d3	b9 57 00	lda $0057,y			lda FSMant0,y
.96d6	10 03		bpl $96db			bpl +
.96d8	20 85 8b	jsr $8b85			jsr FNegate
.96db					+
.96db	20 cc 85	jsr $85cc			jsr FSwap
.96de	20 50 8b	jsr $8b50			jsr FMinus
.96e1	20 e7 96	jsr $96e7			jsr FTanM
.96e4	4c 3d 8d	jmp $8d3d			jmp F1Slash
=54					CodeLen	.var *-XtPtr1
=$96e7					Here1 = *	; remember here
>96af	36					.byte CodeLen	;patch wh_CodeLength
.96e7	20 48 85	jsr $8548	FTanM:		jsr FDup
.96ea	20 6e 8c	jsr $8c6e			jsr FSqr		; x x^2
.96ed	a9 fd		lda #$fd			lda #<_c
.96ef	a0 96		ldy #$96			ldy #>_c
.96f1	20 21 94	jsr $9421			jsr FMPolyYA
.96f4	20 de 8b	jsr $8bde			jsr FStar
.96f7	20 44 8b	jsr $8b44			jsr F1Plus		; c0 1.0
.96fa	4c de 8b	jmp $8bde			jmp FStar
.96fd					_c:
>96fd	1e ae 4d 58					.dword $584DAE1E	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9701	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>9702	51 0a eb 57					.dword $57EB0A51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9706	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9707	98 d9 14 77					.dword $7714D998	; 32 bit signed binary mantissa.  $40000000 = +0.5
>970b	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>970c	f9 10 ea 43					.dword $43EA10F9	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9710	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9711	1b e2 57 55					.dword $5557E21B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9715	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9716	00						.byte 0
>9717	46 43 6f 74			Name0:	.text "FCot"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38555					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>971b	84					.byte (("FCot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=110					LinkDisplacement = Nt0-WordListLink
>971c	10					.byte WordFlags	;wh_Flags
>971d	03					.byte 3	;wh_CodeLength
>971e	6e					  .byte LinkDisplacement	; offset to previous nt
=$971f					XtPtr1 ::= *
=38555					WordListLink ::= Nt0 ; remember the nt of this word for later
.971f	20 b1 96	jsr $96b1	FCot:		jsr FTan
.9722	4c 3d 8d	jmp $8d3d			jmp F1Slash	; =1/TAN(r1)
=6					CodeLen	.var *-XtPtr1
=$9725					Here1 = *	; remember here
>971d	06					.byte CodeLen	;patch wh_CodeLength
>9725	46 41 43 6f 73			Name0:	.text "FACos"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38570					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>972a	65					.byte (("FACos"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>972b	10					.byte WordFlags	;wh_Flags
>972c	03					.byte 3	;wh_CodeLength
>972d	0f					  .byte LinkDisplacement	; offset to previous nt
=$972e					XtPtr1 ::= *
=38570					WordListLink ::= Nt0 ; remember the nt of this word for later
.972e	a4 4c		ldy $4c		FACos:		ldy FIndex
.9730	b9 57 00	lda $0057,y			lda FSMant0,y
.9733	08		php				php			; save sign
.9734	20 ab 8b	jsr $8bab			jsr FAbs
.9737	a9 5a		lda #$5a			lda #<_c
.9739	a0 97		ldy #$97			ldy #>_c
.973b	20 21 94	jsr $9421			jsr FMPolyYA
.973e	20 cc 85	jsr $85cc			jsr FSwap
.9741	20 85 8b	jsr $8b85			jsr FNegate
.9744	20 44 8b	jsr $8b44			jsr F1Plus
.9747	20 19 8f	jsr $8f19			jsr FSqrt
.974a	20 de 8b	jsr $8bde			jsr FStar
.974d	28		plp				plp			; was r1 negative?
.974e	10 09		bpl $9759			bpl +
.9750	20 f9 88	jsr $88f9			jsr FPi
.9753	20 cc 85	jsr $85cc			jsr FSwap
.9756	20 50 8b	jsr $8b50			jsr FMinus
.9759					+
=43					CodeLen	.var *-XtPtr1
=$9759					Here1 = *	; remember here
>972c	2b					.byte CodeLen	;patch wh_CodeLength
.9759	60		rts				rts
.975a					_c:
>975a	8b 5e 9f 4b					.dword $4B9F5E8B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>975e	f8						.char -8		; 8 bit signed exponent.  $00 = 2**0
>975f	ad cc 29 a4					.dword $A429CCAD	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9763	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9764	98 a1 a3 6e					.dword $6EA3A198	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9768	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>9769	5a 10 e1 9b					.dword $9BE1105A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>976d	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>976e	c6 71 ea 5a					.dword $5AEA71C6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9772	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>9773	e0 56 21 92					.dword $922156E0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9777	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9778	41 ed 87 64					.dword $6487ED41	; 32 bit signed binary mantissa.  $40000000 = +0.5
>977c	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>977d	00						.byte 0
>977e	46 41 53 65 63			Name0:	.text "FASec"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38659					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9783	65					.byte (("FASec"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=89					LinkDisplacement = Nt0-WordListLink
>9784	10					.byte WordFlags	;wh_Flags
>9785	03					.byte 3	;wh_CodeLength
>9786	59					  .byte LinkDisplacement	; offset to previous nt
=$9787					XtPtr1 ::= *
=38659					WordListLink ::= Nt0 ; remember the nt of this word for later
.9787	20 3d 8d	jsr $8d3d	FASec:		jsr F1Slash
.978a	4c 2e 97	jmp $972e			jmp FACos
=6					CodeLen	.var *-XtPtr1
=$978d					Here1 = *	; remember here
>9785	06					.byte CodeLen	;patch wh_CodeLength
>978d	46 41 53 69 6e			Name0:	.text "FASin"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38674					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9792	c5					.byte (("FASin"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>9793	10					.byte WordFlags	;wh_Flags
>9794	03					.byte 3	;wh_CodeLength
>9795	0f					  .byte LinkDisplacement	; offset to previous nt
=$9796					XtPtr1 ::= *
=38674					WordListLink ::= Nt0 ; remember the nt of this word for later
.9796	20 2e 97	jsr $972e	FASin:		jsr FACos
.9799	20 85 8b	jsr $8b85			jsr FNegate
.979c	20 09 89	jsr $8909			jsr FPiH
.979f	4c 10 8b	jmp $8b10			jmp FPlus
=12					CodeLen	.var *-XtPtr1
=$97a2					Here1 = *	; remember here
>9794	0c					.byte CodeLen	;patch wh_CodeLength
>97a2	46 41 43 73 63			Name0:	.text "FACsc"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38695					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>97a7	65					.byte (("FACsc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>97a8	10					.byte WordFlags	;wh_Flags
>97a9	03					.byte 3	;wh_CodeLength
>97aa	15					  .byte LinkDisplacement	; offset to previous nt
=$97ab					XtPtr1 ::= *
=38695					WordListLink ::= Nt0 ; remember the nt of this word for later
.97ab	20 3d 8d	jsr $8d3d	FACsc:		jsr F1Slash
.97ae	4c 96 97	jmp $9796			jmp FASin
=6					CodeLen	.var *-XtPtr1
=$97b1					Here1 = *	; remember here
>97a9	06					.byte CodeLen	;patch wh_CodeLength
>97b1	46 41 54 61 6e			Name0:	.text "FATan"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38710					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>97b6	c5					.byte (("FATan"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>97b7	10					.byte WordFlags	;wh_Flags
>97b8	03					.byte 3	;wh_CodeLength
>97b9	0f					  .byte LinkDisplacement	; offset to previous nt
=$97ba					XtPtr1 ::= *
=38710					WordListLink ::= Nt0 ; remember the nt of this word for later
.97ba					FATan:
.97ba	a4 4c		ldy $4c				ldy FIndex
.97bc	b9 4d 00	lda $004d,y			lda FSExp,y		; Abs(r1)<1 ?
.97bf	30 1b		bmi $97dc			bmi FATanM
.97c1	f0 19		beq $97dc			beq FATanM
.97c3	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.97c6	08		php				php
.97c7	20 3d 8d	jsr $8d3d			jsr F1Slash
.97ca	20 dc 97	jsr $97dc			jsr FATanM
.97cd	20 85 8b	jsr $8b85			jsr FNegate
.97d0	20 09 89	jsr $8909			jsr FPiH
.97d3	28		plp				plp
.97d4	10 03		bpl $97d9			bpl _18
.97d6	20 85 8b	jsr $8b85			jsr FNegate
.97d9	4c 10 8b	jmp $8b10	_18:		jmp FPlus
.97dc	20 48 85	jsr $8548	FATanM:		jsr FDup		; x x
.97df	20 6e 8c	jsr $8c6e			jsr FSqr		; x xsqr
.97e2	a9 f2		lda #$f2			lda #<_c
.97e4	a0 97		ldy #$97			ldy #>_c
.97e6	20 21 94	jsr $9421			jsr FMPolyYA
.97e9	20 de 8b	jsr $8bde			jsr FStar		; x poly
.97ec	20 44 8b	jsr $8b44			jsr F1Plus		; x poly
.97ef	4c de 8b	jmp $8bde			jmp FStar
.97f2					_c:
>97f2	98 08 2d 76					.dword $762D0898	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97f6	f9						.char -7		; 8 bit signed exponent.  $00 = 2**0
>97f7	55 a1 32 b8					.dword $B832A155	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97fb	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>97fc	a8 d7 a2 53					.dword $53A2D7A8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9800	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>9801	be 91 85 bb					.dword $BB8591BE	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9805	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9806	06 65 aa 65					.dword $65AA6506	; 32 bit signed binary mantissa.  $40000000 = +0.5
>980a	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>980b	12 21 b0 aa					.dword $AAB02112	; 32 bit signed binary mantissa.  $40000000 = +0.5
>980f	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9810	00						.byte 0
>9811	46 41 43 6f 74			Name0:	.text "FACot"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38806					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9816	85					.byte (("FACot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=96					LinkDisplacement = Nt0-WordListLink
>9817	10					.byte WordFlags	;wh_Flags
>9818	03					.byte 3	;wh_CodeLength
>9819	60					  .byte LinkDisplacement	; offset to previous nt
=$981a					XtPtr1 ::= *
=38806					WordListLink ::= Nt0 ; remember the nt of this word for later
.981a	20 3d 8d	jsr $8d3d	FACot:		jsr F1Slash
.981d	4c ba 97	jmp $97ba			jmp FATan
=6					CodeLen	.var *-XtPtr1
=$9820					Here1 = *	; remember here
>9818	06					.byte CodeLen	;patch wh_CodeLength
>9820	46 41 54 61 6e 32		Name0:	.text "FATan2"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=38822					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9826	46					.byte (("FATan2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>9827	10					.byte WordFlags	;wh_Flags
>9828	03					.byte 3	;wh_CodeLength
>9829	10					  .byte LinkDisplacement	; offset to previous nt
=$982a					XtPtr1 ::= *
=38822					WordListLink ::= Nt0 ; remember the nt of this word for later
.982a	a4 4c		ldy $4c		FATan2:		ldy FIndex
.982c	b9 57 00	lda $0057,y			lda FSMant0+0,y	; get rx sign
.982f	f0 1c		beq $984d			beq _rxzero
.9831	0a		asl a				asl a		;   C=rx sign
.9832	b9 58 00	lda $0058,y			lda FSMant0+1,y	;   N=ry sign
.9835	08		php				php		; save signs
.9836	20 99 8c	jsr $8c99			jsr FSlash
.9839	20 ba 97	jsr $97ba			jsr FATan
.983c	28		plp				plp		; pop signs
.983d	b0 01		bcs $9840			bcs _rxneg
.983f	60		rts		_rts:		rts
.9840	08		php		_rxneg:		php
.9841	20 f9 88	jsr $88f9			jsr FPi
.9844	28		plp				plp
.9845	10 03		bpl $984a			bpl +
.9847	20 85 8b	jsr $8b85			jsr FNegate
.984a	4c 10 8b	jmp $8b10	+		jmp FPlus
.984d	e6 4c		inc $4c		_rxzero:	inc FIndex	; FDrop rx
.984f	b9 57 00	lda $0057,y			lda FSMant0,y
.9852	08		php				php
.9853	e6 4c		inc $4c				inc FIndex	; FDrop ry
.9855	20 09 89	jsr $8909			jsr FPiH
.9858	28		plp				plp
.9859	10 e4		bpl $983f			bpl _rts
.985b	4c 85 8b	jmp $8b85			jmp FNegate
=52					CodeLen	.var *-XtPtr1
=$985e					Here1 = *	; remember here
>9828	34					.byte CodeLen	;patch wh_CodeLength
>985e	46 53 67 6e			Name0:	.text "FSgn"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38882					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9862	c4					.byte (("FSgn"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=60					LinkDisplacement = Nt0-WordListLink
>9863	10					.byte WordFlags	;wh_Flags
>9864	03					.byte 3	;wh_CodeLength
>9865	3c					  .byte LinkDisplacement	; offset to previous nt
=$9866					XtPtr1 ::= *
=38882					WordListLink ::= Nt0 ; remember the nt of this word for later
.9866	a4 4c		ldy $4c		FSgn:		ldy FIndex
.9868	b9 57 00	lda $0057,y			lda FSMant0,y
.986b	f0 0a		beq $9877			beq _zero
.986d	e6 4c		inc $4c				inc FIndex
.986f	b9 57 00	lda $0057,y			lda FSMant0,y
.9872	30 04		bmi $9878			bmi FM1
.9874	4c de 88	jmp $88de			jmp F1
.9877	60		rts		_zero:		rts
=18					CodeLen	.var *-XtPtr1
=$9878					Here1 = *	; remember here
>9864	12					.byte CodeLen	;patch wh_CodeLength
.9878	a9 80		lda #$80	FM1:		lda #$80
.987a	a0 00		ldy #$00			ldy #0
.987c	4c 8d 88	jmp $888d			jmp FLitYA
>987f	46 53 69 6e 48			Name0:	.text "FSinH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38916					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9884	05					.byte (("FSinH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>9885	10					.byte WordFlags	;wh_Flags
>9886	03					.byte 3	;wh_CodeLength
>9887	22					  .byte LinkDisplacement	; offset to previous nt
=$9888					XtPtr1 ::= *
=38916					WordListLink ::= Nt0 ; remember the nt of this word for later
.9888	20 48 85	jsr $8548	FSinH:		jsr FDup
.988b	20 48 95	jsr $9548			jsr FExp
.988e	20 cc 85	jsr $85cc			jsr FSwap
.9891	20 85 8b	jsr $8b85			jsr FNegate
.9894	20 48 95	jsr $9548			jsr FExp
.9897	20 50 8b	jsr $8b50			jsr FMinus
.989a	4c 92 89	jmp $8992			jmp F2Slash
=21					CodeLen	.var *-XtPtr1
=$989d					Here1 = *	; remember here
>9886	15					.byte CodeLen	;patch wh_CodeLength
>989d	46 43 73 63 48			Name0:	.text "FCscH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38946					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98a2	05					.byte (("FCscH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>98a3	10					.byte WordFlags	;wh_Flags
>98a4	03					.byte 3	;wh_CodeLength
>98a5	1e					  .byte LinkDisplacement	; offset to previous nt
=$98a6					XtPtr1 ::= *
=38946					WordListLink ::= Nt0 ; remember the nt of this word for later
.98a6	20 88 98	jsr $9888	FCscH:		jsr FSinH
.98a9	4c 3d 8d	jmp $8d3d			jmp F1Slash
=6					CodeLen	.var *-XtPtr1
=$98ac					Here1 = *	; remember here
>98a4	06					.byte CodeLen	;patch wh_CodeLength
>98ac	46 43 6f 73 48			Name0:	.text "FCosH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38961					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98b1	05					.byte (("FCosH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>98b2	10					.byte WordFlags	;wh_Flags
>98b3	03					.byte 3	;wh_CodeLength
>98b4	0f					  .byte LinkDisplacement	; offset to previous nt
=$98b5					XtPtr1 ::= *
=38961					WordListLink ::= Nt0 ; remember the nt of this word for later
.98b5	20 48 85	jsr $8548	FCosH:		jsr FDup
.98b8	20 48 95	jsr $9548			jsr FExp
.98bb	20 cc 85	jsr $85cc			jsr FSwap
.98be	20 85 8b	jsr $8b85			jsr FNegate
.98c1	20 48 95	jsr $9548			jsr FExp
.98c4	20 10 8b	jsr $8b10			jsr FPlus
.98c7	4c 92 89	jmp $8992			jmp F2Slash
=21					CodeLen	.var *-XtPtr1
=$98ca					Here1 = *	; remember here
>98b3	15					.byte CodeLen	;patch wh_CodeLength
>98ca	46 53 65 63 48			Name0:	.text "FSecH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38991					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98cf	05					.byte (("FSecH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>98d0	10					.byte WordFlags	;wh_Flags
>98d1	03					.byte 3	;wh_CodeLength
>98d2	1e					  .byte LinkDisplacement	; offset to previous nt
=$98d3					XtPtr1 ::= *
=38991					WordListLink ::= Nt0 ; remember the nt of this word for later
.98d3	20 b5 98	jsr $98b5	FSecH:		jsr FCosH
.98d6	4c 3d 8d	jmp $8d3d			jmp F1Slash
=6					CodeLen	.var *-XtPtr1
=$98d9					Here1 = *	; remember here
>98d1	06					.byte CodeLen	;patch wh_CodeLength
>98d9	46 54 61 6e 48			Name0:	.text "FTanH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=39006					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98de	05					.byte (("FTanH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>98df	10					.byte WordFlags	;wh_Flags
>98e0	03					.byte 3	;wh_CodeLength
>98e1	0f					  .byte LinkDisplacement	; offset to previous nt
=$98e2					XtPtr1 ::= *
=39006					WordListLink ::= Nt0 ; remember the nt of this word for later
.98e2	20 48 85	jsr $8548	FTanH:		jsr FDup
.98e5	20 85 8b	jsr $8b85			jsr FNegate	; X -X
.98e8	20 48 95	jsr $9548			jsr FExp	; X Exp(-X)
.98eb	20 cc 85	jsr $85cc			jsr FSwap	; Exp(-X) X
.98ee	20 48 95	jsr $9548			jsr FExp	; Exp(-X) Exp(X)
.98f1	20 6b 85	jsr $856b			jsr FOver	; Exp(-X) Exp(X) Exp(-X)
.98f4	20 10 8b	jsr $8b10			jsr FPlus	; Exp(-X) Exp(X)+Exp(-X)
.98f7	20 99 8c	jsr $8c99			jsr FSlash	; Exp(-X)/(Exp(X)+Exp(-X))
.98fa	20 87 89	jsr $8987			jsr F2Star	; Exp(-X)/(Exp(X)+Exp(-X))*2
.98fd	20 85 8b	jsr $8b85			jsr FNegate
.9900	4c 44 8b	jmp $8b44			jmp F1Plus
=33					CodeLen	.var *-XtPtr1
=$9903					Here1 = *	; remember here
>98e0	21					.byte CodeLen	;patch wh_CodeLength
>9903	46 43 6f 74 48			Name0:	.text "FCotH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=39048					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9908	05					.byte (("FCotH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>9909	10					.byte WordFlags	;wh_Flags
>990a	03					.byte 3	;wh_CodeLength
>990b	2a					  .byte LinkDisplacement	; offset to previous nt
=$990c					XtPtr1 ::= *
=39048					WordListLink ::= Nt0 ; remember the nt of this word for later
.990c	20 e2 98	jsr $98e2	FCotH:		jsr FTanH
.990f	4c 3d 8d	jmp $8d3d			jmp F1Slash
=6					CodeLen	.var *-XtPtr1
=$9912					Here1 = *	; remember here
>990a	06					.byte CodeLen	;patch wh_CodeLength
>9912	46 41 53 69 6e 48		Name0:	.text "FASinH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39064					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9918	06					.byte (("FASinH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>9919	10					.byte WordFlags	;wh_Flags
>991a	03					.byte 3	;wh_CodeLength
>991b	10					  .byte LinkDisplacement	; offset to previous nt
=$991c					XtPtr1 ::= *
=39064					WordListLink ::= Nt0 ; remember the nt of this word for later
.991c	20 48 85	jsr $8548	FASinH:		jsr FDup	; X X
.991f	20 6e 8c	jsr $8c6e			jsr FSqr	; X X*X
.9922	20 44 8b	jsr $8b44			jsr F1Plus	; X X*X+1
.9925	20 19 8f	jsr $8f19			jsr FSqrt	; X sqrt(X*X+1)
.9928	20 10 8b	jsr $8b10			jsr FPlus	;
.992b	4c bb 94	jmp $94bb			jmp FLn
=18					CodeLen	.var *-XtPtr1
=$992e					Here1 = *	; remember here
>991a	12					.byte CodeLen	;patch wh_CodeLength
>992e	46 41 43 73 63 48		Name0:	.text "FACscH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39092					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9934	06					.byte (("FACscH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>9935	10					.byte WordFlags	;wh_Flags
>9936	03					.byte 3	;wh_CodeLength
>9937	1c					  .byte LinkDisplacement	; offset to previous nt
=$9938					XtPtr1 ::= *
=39092					WordListLink ::= Nt0 ; remember the nt of this word for later
.9938	20 3d 8d	jsr $8d3d	FACscH:		jsr F1Slash
.993b	4c 1c 99	jmp $991c			jmp FASinH
=6					CodeLen	.var *-XtPtr1
=$993e					Here1 = *	; remember here
>9936	06					.byte CodeLen	;patch wh_CodeLength
>993e	46 41 43 6f 73 48		Name0:	.text "FACosH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39108					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9944	06					.byte (("FACosH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>9945	10					.byte WordFlags	;wh_Flags
>9946	03					.byte 3	;wh_CodeLength
>9947	10					  .byte LinkDisplacement	; offset to previous nt
=$9948					XtPtr1 ::= *
=39108					WordListLink ::= Nt0 ; remember the nt of this word for later
.9948	20 48 85	jsr $8548	FACosH:		jsr FDup
.994b	20 6e 8c	jsr $8c6e			jsr FSqr
.994e	20 74 8b	jsr $8b74			jsr F1Minus
.9951	20 19 8f	jsr $8f19			jsr FSqrt
.9954	20 10 8b	jsr $8b10			jsr FPlus
.9957	4c bb 94	jmp $94bb			jmp FLn
=18					CodeLen	.var *-XtPtr1
=$995a					Here1 = *	; remember here
>9946	12					.byte CodeLen	;patch wh_CodeLength
>995a	46 41 53 65 63 48		Name0:	.text "FASecH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39136					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9960	06					.byte (("FASecH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>9961	10					.byte WordFlags	;wh_Flags
>9962	03					.byte 3	;wh_CodeLength
>9963	1c					  .byte LinkDisplacement	; offset to previous nt
=$9964					XtPtr1 ::= *
=39136					WordListLink ::= Nt0 ; remember the nt of this word for later
.9964	20 3d 8d	jsr $8d3d	FASecH:		jsr F1Slash
.9967	4c 48 99	jmp $9948			jmp FACosH
=6					CodeLen	.var *-XtPtr1
=$996a					Here1 = *	; remember here
>9962	06					.byte CodeLen	;patch wh_CodeLength
>996a	46 41 54 61 6e 48		Name0:	.text "FATanH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39152					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9970	06					.byte (("FATanH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>9971	10					.byte WordFlags	;wh_Flags
>9972	03					.byte 3	;wh_CodeLength
>9973	10					  .byte LinkDisplacement	; offset to previous nt
=$9974					XtPtr1 ::= *
=39152					WordListLink ::= Nt0 ; remember the nt of this word for later
.9974	20 48 85	jsr $8548	FAtanH:		jsr FDup	; x x
.9977	20 44 8b	jsr $8b44			jsr F1Plus	; x x+1
.997a	20 cc 85	jsr $85cc			jsr FSwap	; 1+x x
.997d	20 de 88	jsr $88de			jsr F1
.9980	20 cc 85	jsr $85cc			jsr FSwap
.9983	20 50 8b	jsr $8b50			jsr FMinus	; 1+x 1-x
.9986	20 99 8c	jsr $8c99			jsr FSlash	; (1+x)/(1-x)
.9989	20 bb 94	jsr $94bb			jsr FLn
.998c	4c 92 89	jmp $8992			jmp F2Slash
=27					CodeLen	.var *-XtPtr1
=$998f					Here1 = *	; remember here
>9972	1b					.byte CodeLen	;patch wh_CodeLength
>998f	46 41 43 6f 74 48		Name0:	.text "FACotH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39189					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9995	06					.byte (("FACotH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>9996	10					.byte WordFlags	;wh_Flags
>9997	03					.byte 3	;wh_CodeLength
>9998	25					  .byte LinkDisplacement	; offset to previous nt
=$9999					XtPtr1 ::= *
=39189					WordListLink ::= Nt0 ; remember the nt of this word for later
.9999	20 3d 8d	jsr $8d3d	FACotH: 	jsr F1Slash
.999c	4c 74 99	jmp $9974			jmp FATanH
=6					CodeLen	.var *-XtPtr1
=$999f					Here1 = *	; remember here
>9997	06					.byte CodeLen	;patch wh_CodeLength
>999f	45 64				Name0:	.text "Ed"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=39201					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>99a1	82					.byte (("Ed"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>99a2	10					.byte WordFlags	;wh_Flags
>99a3	03					.byte 3	;wh_CodeLength
>99a4	0c					  .byte LinkDisplacement	; offset to previous nt
=$99a5					XtPtr1 ::= *
=39201					WordListLink ::= Nt0 ; remember the nt of this word for later
.99a5	4c a8 99	jmp $99a8	Ed:		jmp ed6502
=3					CodeLen	.var *-XtPtr1
=$99a8					Here1 = *	; remember here
>99a3	03					.byte CodeLen	;patch wh_CodeLength
=$1e					ed_head	 = editor1  ; pointer to first list element (addr) (2 bytes)
=$20					ed_cur	 = editor2  ; current line number (1 is first line) (2 bytes)
=$22					ed_flags = editor3  ; Flags used by ed, where
.99a8					ed6502:
.99a8	ad 00 03	lda $0300			lda base
.99ab	85 23		sta $23				sta editor3+1
.99ad	20 c4 b1	jsr $b1c4			jsr Decimal
.99b0	a9 00		lda #$00			lda #0
.99b2	85 1e		sta $1e				sta ed_head
.99b4	85 1f		sta $1f				sta ed_head+1
.99b6	85 20		sta $20				sta ed_cur
.99b8	85 21		sta $21				sta ed_cur+1
.99ba	85 22		sta $22				sta ed_flags
.99bc	20 eb b7	jsr $b7eb			jsr Zero
.99bf	20 eb b7	jsr $b7eb			jsr Zero		; ( addr-t u-t )
.99c2	20 69 ab	jsr $ab69			jsr CR
.99c5					ed_input_loop:
.99c5	a9 7e		lda #$7e			lda #$ff-%10000001
.99c7	25 22		and $22				and ed_flags
.99c9	85 22		sta $22				sta ed_flags
.99cb	20 6d 9e	jsr $9e6d			jsr ed_get_input
.99ce	a5 06		lda $06				lda ciblen+0
.99d0	d0 1e		bne $99f0			bne _command_mode
.99d2	a5 20		lda $20				lda ed_cur+0
.99d4	a4 21		ldy $21				ldy ed_cur+1
.99d6	20 ae b7	jsr $b7ae			jsr PushYA		; ( addr-t u-t u )
.99d9	a9 80		lda #$80			lda #%10000000
.99db	05 22		ora $22				ora ed_flags
.99dd	85 22		sta $22				sta ed_flags
.99df	20 55 ca	jsr $ca55			jsr One_Plus		; ( addr-t u-t u+1 )
.99e2	20 88 9e	jsr $9e88			jsr ed_is_valid_line
.99e5	b0 03		bcs $99ea			bcs +
.99e7	4c 5d 9e	jmp $9e5d			jmp ed_error_1drop	; New line number is not legal, abort
.99ea					+
.99ea	20 eb b7	jsr $b7eb			jsr Zero		; ( addr-t u-t u+1 0 )
.99ed	4c af 9a	jmp $9aaf			jmp _line_number_only_from_external
.99f0					_command_mode:
.99f0	20 eb b7	jsr $b7eb			jsr Zero		; parameter 1 is NOS ( addr-t u-t 0 )
.99f3	20 eb b7	jsr $b7eb			jsr Zero		; parameter 2 is TOS ( addr-t u-t 0 0 )
.99f6	a0 00		ldy #$00			ldy #0			; get char
.99f8	b1 04		lda ($04),y			lda (cib),y
.99fa	c9 2e		cmp #$2e			cmp #'.'
.99fc	d0 31		bne $9a2f			bne _prefix_dollar
.99fe	20 7c 9e	jsr $9e7c			jsr ed_have_text
.9a01	a5 20		lda $20				lda ed_cur
.9a03	95 26		sta $26,x			sta DStack+2,x
.9a05	a5 21		lda $21				lda ed_cur+1
.9a07	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9a09	a9 80		lda #$80			lda #%10000000
.9a0b	05 22		ora $22				ora ed_flags
.9a0d	85 22		sta $22				sta ed_flags
.9a0f	a5 06		lda $06				lda ciblen
.9a11	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9a13	d0 03		bne $9a18			bne +
.9a15	4c af 9a	jmp $9aaf			jmp _line_number_only_from_external
.9a18					+
.9a18	a5 04		lda $04				lda cib+0
.9a1a	a4 05		ldy $05				ldy cib+1
.9a1c	20 ae b7	jsr $b7ae			jsr PushYA
.9a1f	a5 06		lda $06				lda ciblen+0
.9a21	a4 07		ldy $07				ldy ciblen+1
.9a23	20 ae b7	jsr $b7ae			jsr PushYA
.9a26	20 30 ca	jsr $ca30			jsr One_Minus		; ( addr-t u-t para1 0 addr u-1 )
.9a29	20 5f ca	jsr $ca5f			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr+1 u-1 )
.9a2c	4c 01 9b	jmp $9b01			jmp _check_for_para2
.9a2f					_prefix_dollar:
.9a2f	c9 24		cmp #$24			cmp #'$'
.9a31	d0 1f		bne $9a52			bne _prefix_percent
.9a33	20 7c 9e	jsr $9e7c			jsr ed_have_text
.9a36	e8		inx				inx
.9a37	e8		inx				inx			; ( addr-t u-t 0 )
.9a38	20 a9 9e	jsr $9ea9			jsr ed_last_line	; ( addr-t u-t 0 para1 )
.9a3b	20 6e cf	jsr $cf6e			jsr Swap		; ( addr-t u-t para1 0 )
.9a3e	a9 80		lda #$80			lda #%10000000
.9a40	05 22		ora $22				ora ed_flags
.9a42	85 22		sta $22				sta ed_flags
.9a44	a5 06		lda $06				lda ciblen
.9a46	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9a48	d0 03		bne $9a4d			bne +
.9a4a	4c af 9a	jmp $9aaf			jmp _line_number_only_from_external
.9a4d					+
.9a4d	a0 01		ldy #$01			ldy #1
.9a4f	4c 77 9b	jmp $9b77			jmp _check_command
.9a52					_prefix_percent:
.9a52	c9 25		cmp #$25			cmp #'%'
.9a54	f0 04		beq $9a5a			beq _whole_text
.9a56	c9 2c		cmp #$2c			cmp #','
.9a58	d0 1b		bne $9a75			bne _prefix_semicolon
.9a5a					_whole_text:
.9a5a	20 7c 9e	jsr $9e7c			jsr ed_have_text
.9a5d	a9 01		lda #$01			lda #1
.9a5f	95 26		sta $26,x			sta DStack+2,x		; LSB of NOS is para 1
.9a61	a9 00		lda #$00			lda #0
.9a63	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t para1 0 )
.9a65					_semicolon_entry:
.9a65	e8		inx				inx
.9a66	e8		inx				inx			; DROP ( addr-t u-t para1 )
.9a67	20 a9 9e	jsr $9ea9			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9a6a	a9 80		lda #$80			lda #%10000000
.9a6c	05 22		ora $22				ora ed_flags
.9a6e	85 22		sta $22				sta ed_flags
.9a70	a0 01		ldy #$01			ldy #1
.9a72	4c 77 9b	jmp $9b77			jmp _check_command
.9a75					_prefix_semicolon:
.9a75	c9 3b		cmp #$3b			cmp #';'
.9a77	d0 0e		bne $9a87			bne _prefix_number
.9a79	20 7c 9e	jsr $9e7c			jsr ed_have_text
.9a7c	a5 20		lda $20				lda ed_cur
.9a7e	95 26		sta $26,x			sta DStack+2,x
.9a80	a5 21		lda $21				lda ed_cur+1
.9a82	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9a84	4c 65 9a	jmp $9a65			jmp _semicolon_entry
.9a87					_prefix_number:
.9a87	20 eb b7	jsr $b7eb			jsr Zero
.9a8a	20 eb b7	jsr $b7eb			jsr Zero		; ( addr-t u-t 0 0 0 0 )
.9a8d	a5 04		lda $04				lda cib+0
.9a8f	a4 05		ldy $05				ldy cib+1
.9a91	20 ae b7	jsr $b7ae			jsr PushYA
.9a94	a5 06		lda $06				lda ciblen+0
.9a96	a4 07		ldy $07				ldy ciblen+1
.9a98	20 ae b7	jsr $b7ae			jsr PushYA		; ( addr-t u-t 0 0 0 0 cib ciblen )
.9a9b	20 48 b0	jsr $b048			jsr To_Number		; ( addr-t u-t 0 0 ud addr2 u2 )
.9a9e	b5 24		lda $24,x			lda DStack+0,x
.9aa0	15 25		ora $25,x			ora DStack+1,x
.9aa2	d0 25		bne $9ac9			bne _have_unconverted_chars
.9aa4	20 31 c5	jsr $c531			jsr Two_Drop		; ( addr-t u-t 0 0 ud )
.9aa7	20 08 c0	jsr $c008			jsr D_To_S		; ( addr-t u-t 0 0 u )
.9aaa	20 71 ce	jsr $ce71			jsr Not_Rot		; ( addr-t u-t u 0 0 )
.9aad	e8		inx				inx
.9aae	e8		inx				inx			; ( addr-t u-t u 0 ) drop through
.9aaf					_line_number_only_from_external:
.9aaf	20 6e cf	jsr $cf6e			jsr Swap		; ( addr-t u-t 0 u )
.9ab2	20 88 9e	jsr $9e88			jsr ed_is_valid_line
.9ab5	b0 03		bcs $9aba			bcs +
.9ab7	4c 5b 9e	jmp $9e5b			jmp ed_error_2drop
.9aba					+
.9aba	20 6e cf	jsr $cf6e			jsr Swap		; ( addr-t u-t u 0 )
.9abd	20 e8 9e	jsr $9ee8			jsr ed_para1_to_cur
.9ac0	a9 80		lda #$80			lda #%10000000
.9ac2	05 22		ora $22				ora ed_flags
.9ac4	85 22		sta $22				sta ed_flags
.9ac6	4c 46 9d	jmp $9d46			jmp ed_cmd_p_from_external
.9ac9					_have_unconverted_chars:
.9ac9	a5 06		lda $06				lda ciblen+0
.9acb	d5 24		cmp $24,x			cmp DStack+0,x
.9acd	d0 16		bne $9ae5			bne _no_command_yet
.9acf	a5 07		lda $07				lda ciblen+1
.9ad1	d5 25		cmp $25,x			cmp DStack+1,x
.9ad3	d0 10		bne $9ae5			bne _no_command_yet
.9ad5	8a		txa				txa
.9ad6	18		clc				clc
.9ad7	69 08		adc #$08			adc #8
.9ad9	aa		tax				tax			; ( addr-t u-t 0 0 )
.9ada	a9 7f		lda #$7f			lda #$ff-%10000000
.9adc	25 22		and $22				and ed_flags
.9ade	85 22		sta $22				sta ed_flags
.9ae0	a0 00		ldy #$00			ldy #0
.9ae2	4c 77 9b	jmp $9b77			jmp _check_command
.9ae5					_no_command_yet:
.9ae5	20 db ce	jsr $cedb			jsr To_R		; >R ( ... 0 0 ud addr2 ) (R: u2)
.9ae8	20 71 ce	jsr $ce71			jsr Not_Rot		; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.9aeb	20 08 c0	jsr $c008			jsr D_To_S		; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.9aee	b5 24		lda $24,x			lda DStack+0,x		; LSB
.9af0	95 2a		sta $2a,x			sta DStack+6,x
.9af2	b5 25		lda $25,x			lda DStack+1,x		; MSB
.9af4	95 2b		sta $2b,x			sta DStack+7,x		; ( ... para1 0 addr2 para1 ) (R: u2)
.9af6	e8		inx				inx
.9af7	e8		inx				inx			; ( addr-t u-t para1 0 addr2 ) (R: u2)
.9af8	20 f9 ce	jsr $cef9			jsr R_From		; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.9afb	a9 80		lda #$80			lda #%10000000
.9afd	05 22		ora $22				ora ed_flags
.9aff	85 22		sta $22				sta ed_flags
.9b01					_check_for_para2:
.9b01	a1 26		lda ($26,x)			lda (DStack+2,x)
.9b03	c9 2c		cmp #$2c			cmp #','
.9b05	f0 0c		beq $9b13			beq _got_comma
.9b07	38		sec				sec
.9b08	a5 06		lda $06				lda ciblen
.9b0a	f5 24		sbc $24,x			sbc DStack+0,x
.9b0c	a8		tay				tay
.9b0d	20 31 c5	jsr $c531			jsr Two_Drop		; Remove the leftover stuff from >NUMBER
.9b10	4c 77 9b	jmp $9b77			jmp _check_command
.9b13					_got_comma:
.9b13	20 5f ca	jsr $ca5f			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr2+1 u2 )
.9b16	20 30 ca	jsr $ca30			jsr One_Minus		; ( addr-t u-t para1 0 addr2+1 u2-1 )
.9b19	a1 26		lda ($26,x)			lda (DStack+2,x)
.9b1b	c9 24		cmp #$24			cmp #'$'
.9b1d	d0 16		bne $9b35			bne _para2_not_dollar
.9b1f	38		sec				sec
.9b20	a5 06		lda $06				lda ciblen
.9b22	f5 26		sbc $26,x			sbc DStack+2,x
.9b24	a8		tay				tay
.9b25	c8		iny				iny
.9b26	98		tya				tya
.9b27	48		pha				pha
.9b28	8a		txa				txa
.9b29	18		clc				clc
.9b2a	69 06		adc #$06			adc #6
.9b2c	aa		tax				tax			; ( addr-t u-t para1 )
.9b2d	20 a9 9e	jsr $9ea9			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9b30	68		pla				pla
.9b31	a8		tay				tay
.9b32	4c 77 9b	jmp $9b77			jmp _check_command
.9b35					_para2_not_dollar:
.9b35	20 db ce	jsr $cedb			jsr To_R		; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.9b38	20 eb b7	jsr $b7eb			jsr Zero		; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.9b3b	20 eb b7	jsr $b7eb			jsr Zero		; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.9b3e	20 4c ce	jsr $ce4c			jsr Rot		; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.9b41	20 f9 ce	jsr $cef9			jsr R_From		; R> ( ... para1 0 0 0 addr2+1 u2-1)
.9b44	20 51 cf	jsr $cf51			jsr Dup		; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.9b47	20 db ce	jsr $cedb			jsr To_R		; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.9b4a	20 48 b0	jsr $b048			jsr To_Number	; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.9b4d	20 51 cf	jsr $cf51			jsr Dup		; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.9b50	20 f9 ce	jsr $cef9			jsr R_From		; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.9b53	20 39 c8	jsr $c839			jsr Equal		; = ( ... para1 0 ud addr3 u3 f )
.9b56	b5 24		lda $24,x			lda DStack+0,x
.9b58	15 25		ora $25,x			ora DStack+1,x
.9b5a	f0 08		beq $9b64			beq _second_number
.9b5c	8a		txa				txa
.9b5d	18		clc				clc
.9b5e	69 0c		adc #$0c			adc #12
.9b60	aa		tax				tax			; back to ( addr-t u-t )
.9b61	4c 5f 9e	jmp $9e5f			jmp ed_error
.9b64					_second_number:
.9b64	e8		inx				inx
.9b65	e8		inx				inx			; ( addr-t u-t para1 0 ud addr3 u3 )
.9b66	38		sec				sec
.9b67	a5 06		lda $06				lda ciblen
.9b69	f5 24		sbc $24,x			sbc DStack+0,x
.9b6b	48		pha				pha
.9b6c	20 31 c5	jsr $c531			jsr Two_drop		; 2DROP ( addr-t u-t para1 0 ud )
.9b6f	20 08 c0	jsr $c008			jsr D_To_S		; D>S  ( addr-t u-t para1 0 para2 )
.9b72	20 8b c9	jsr $c98b			jsr Nip			; NIP ( addr-t u-t para1 para2 )
.9b75	68		pla				pla
.9b76	a8		tay				tay
.9b77					_check_command:
.9b77	24 22		bit $22				bit ed_flags
.9b79	30 08		bmi $9b83			bmi _check_command_have_arg
.9b7b	a5 20		lda $20				lda ed_cur+0
.9b7d	95 26		sta $26,x			sta DStack+2,x
.9b7f	a5 21		lda $21				lda ed_cur+1
.9b81	95 27		sta $27,x			sta DStack+3,x
.9b83					_check_command_have_arg:
.9b83	b1 04		lda ($04),y			lda (cib),y		; get mystery char from input
.9b85	85 14		sta $14				sta tmp1+0
.9b87	85 15		sta $15				sta tmp1+1		; We need X for awhile, so it has to
.9b89	a2 ff		ldx #$ff			ldx #$ff		; for each char
.9b8b	e8		inx		_cmd_loop:	inx			;   next char
.9b8c	bd 0c 9f	lda $9f0c,x			lda ed_cmd_list,x
.9b8f	f0 13		beq $9ba4			beq _illegal_command	;   end of list?
.9b91	c5 14		cmp $14				cmp tmp1+0
.9b93	d0 f6		bne $9b8b			bne _cmd_loop		;   not found?
.9b95	8a		txa				txa
.9b96	0a		asl a				asl
.9b97	aa		tax				tax			; X * 2 for table
.9b98	bd 18 9f	lda $9f18,x			lda ed_cmd_table+1,x
.9b9b	48		pha				pha
.9b9c	bd 17 9f	lda $9f17,x			lda ed_Cmd_table+0,x
.9b9f	48		pha				pha
.9ba0	a6 15		ldx $15				ldx tmp1+1		; restore X
.9ba2	08		php				php
.9ba3	40		rti				rti			; jump to command routine
.9ba4					_illegal_command:
.9ba4	4c 5b 9e	jmp $9e5b			jmp ed_error_2drop
.9ba7					ed_next_command:
.9ba7	20 31 c5	jsr $c531			jsr Two_Drop		; ( addr-t u-t ) Fall through
.9baa					_next_command_empty:
.9baa	4c c5 99	jmp $99c5			jmp ed_input_loop
.9bad					ed_all_done:
.9bad	a9 00		lda #$00			lda #0
.9baf	85 06		sta $06				sta ciblen
.9bb1	85 07		sta $07				sta ciblen+1
.9bb3	20 31 c5	jsr $c531			jsr Two_drop			; ( addr-t u-t )
.9bb6	a5 23		lda $23				lda editor3+1
.9bb8	8d 00 03	sta $0300			sta base
.9bbb	60		rts				rts
.9bbc					ed_cmd_a:
.9bbc	e8		inx				inx
.9bbd	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9bbe					ed_entry_cmd_i:
.9bbe					ed_cmd_a_have_para:
.9bbe	20 cd 9e	jsr $9ecd			jsr ed_num_to_addr	  ;  ( addr-t u-t addr1 )
.9bc1	20 69 ab	jsr $ab69			jsr CR
.9bc4					_next_string_loop:
.9bc4	20 6d 9e	jsr $9e6d			jsr ed_get_input
.9bc7	a0 00		ldy #$00			ldy #0
.9bc9	b1 04		lda ($04),y			lda (cib),y
.9bcb	c9 2e		cmp #$2e			cmp #'.'
.9bcd	d0 18		bne $9be7			bne _add_line
.9bcf	a4 06		ldy $06				ldy ciblen
.9bd1	c0 01		cpy #$01			cpy #1
.9bd3	d0 12		bne $9be7			bne _add_line
.9bd5	a4 07		ldy $07				ldy ciblen+1
.9bd7	d0 0e		bne $9be7			bne _add_line
.9bd9	e8		inx				inx
.9bda	e8		inx				inx
.9bdb	a9 40		lda #$40			lda #%01000000
.9bdd	05 22		ora $22				ora ed_flags
.9bdf	85 22		sta $22				sta ed_flags
.9be1	20 69 ab	jsr $ab69			jsr CR
.9be4	4c c5 99	jmp $99c5			jmp ed_input_loop
.9be7					_add_line:
.9be7	20 51 cf	jsr $cf51			jsr Dup			; ( addr-t u-t addr1 addr1 )
.9bea	20 23 ca	jsr $ca23			jsr Here		; ( addr-t u-t addr1 addr1 here )
.9bed	20 6e cf	jsr $cf6e			jsr Swap		; ( addr-t u-t addr1 here addr1 )
.9bf0	20 93 ce	jsr $ce93			jsr Fetch		; ( addr-t u-t addr1 here addr2 )
.9bf3	20 f6 cc	jsr $ccf6			jsr Comma		; ( addr-t u-t addr1 here )
.9bf6	20 bf cc	jsr $ccbf			jsr Tuck		; TUCK ( addr-t u-t here addr1 here )
.9bf9	20 6e cf	jsr $cf6e			jsr Swap		; ( addr-t u-t here here addr1 )
.9bfc	20 ac ce	jsr $ceac			jsr Store		; ( addr-t u-t here )
.9bff	20 23 ca	jsr $ca23			jsr Here		; HERE ( addr-t u-t here here2)
.9c02	a9 04		lda #$04			lda #4
.9c04	20 dd b7	jsr $b7dd			jsr PushZA
.9c07	20 9d c0	jsr $c09d			jsr Allot
.9c0a	e6 20		inc $20				inc ed_cur
.9c0c	d0 02		bne $9c10			bne +
.9c0e	e6 21		inc $21				inc ed_cur+1
.9c10					+
.9c10	20 23 ca	jsr $ca23			jsr Here	; ( addr-t u-t here here2 here3 )
.9c13	a5 04		lda $04				lda cib+0
.9c15	a4 05		ldy $05				ldy cib+1
.9c17	20 ae b7	jsr $b7ae			jsr PushYA	; ( addr-t u-t here here2 here3 cib )
.9c1a	20 2a cf	jsr $cf2a			jsr Over	; ( addr-t u-t here here2 here3 cib here3 )
.9c1d	a5 06		lda $06				lda ciblen+0
.9c1f	a4 07		ldy $07				ldy ciblen+1
.9c21	20 ae b7	jsr $b7ae			jsr PushYA	; ( addr-t u-t here here2 here3 cib here3 ciblen )
.9c24	20 78 ad	jsr $ad78			jsr Move	; ( addr-t u-t here here2 here3 )
.9c27	18		clc				clc
.9c28	a5 00		lda $00				lda cp
.9c2a	65 06		adc $06				adc ciblen
.9c2c	85 00		sta $00				sta cp
.9c2e	90 06		bcc $9c36			bcc +
.9c30	a5 01		lda $01				lda cp+1
.9c32	65 07		adc $07				adc ciblen+1
.9c34	85 01		sta $01				sta cp+1
.9c36					+
.9c36	20 2a cf	jsr $cf2a			jsr Over		; ( addr-t u-t here here2 here3 here2 )
.9c39	20 ac ce	jsr $ceac			jsr Store		; ( addr-t u-t here here2 )
.9c3c	20 05 ca	jsr $ca05			jsr Cell_Plus_NoUf	; ( addr-t u-t here here2+2 )
.9c3f	20 51 cf	jsr $cf51			jsr Dup			; ( addr-t u-t here here2+2 here2+2 )
.9c42	a5 06		lda $06				lda ciblen
.9c44	95 26		sta $26,x			sta DStack+2,x
.9c46	a5 07		lda $07				lda ciblen+1
.9c48	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t here ciblen here2+2 )
.9c4a	20 ac ce	jsr $ceac			jsr Store		; ( addr-t u-t here )
.9c4d	20 69 ab	jsr $ab69			jsr CR			; Add a line feed for visuals
.9c50	4c c4 9b	jmp $9bc4			jmp _next_string_loop
.9c53					ed_cmd_d:
.9c53	20 7c 9e	jsr $9e7c			jsr ed_have_text
.9c56	20 bf 9e	jsr $9ebf			jsr ed_no_line_zero
.9c59	b5 24		lda $24,x			lda DStack+0,x
.9c5b	15 25		ora $25,x			ora DStack+1,x
.9c5d	d0 09		bne $9c68			bne +
.9c5f	20 2a cf	jsr $cf2a			jsr Over		; ( addr-t u-t para1 0 para1 )
.9c62	20 9d 9c	jsr $9c9d			jsr _cmd_d_common	; ( addr-t u-t para1 0 )
.9c65	4c 91 9c	jmp $9c91			jmp _cmd_d_done
.9c68					+
.9c68	20 88 9e	jsr $9e88			jsr ed_is_valid_line	  ; result is in C flag
.9c6b	b0 03		bcs $9c70			bcs _cmd_d_loop
.9c6d	4c 5b 9e	jmp $9e5b			jmp ed_error_2drop
.9c70					_cmd_d_loop:
.9c70	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9c72	d5 26		cmp $26,x			cmp DStack+2,x
.9c74	b5 25		lda $25,x			lda DStack+1,x
.9c76	f5 27		sbc $27,x			sbc DStack+3,x
.9c78	90 0c		bcc $9c86			bcc _cmd_d_done_with_flag
.9c7a	20 51 cf	jsr $cf51			jsr Dup		; DUP ( addr-t u-t para1 para2 para2 )
.9c7d	20 9d 9c	jsr $9c9d			jsr _cmd_d_common	; ( addr-t u-t para1 para2 )
.9c80	20 30 ca	jsr $ca30			jsr One_minus	; 1- ( addr-t u-t para1 para2-1 )
.9c83	4c 70 9c	jmp $9c70			jmp _cmd_d_loop
.9c86					_cmd_d_done_with_flag:
.9c86	20 3c ca	jsr $ca3c			jsr NOS_One_Minus
.9c89	b5 26		lda $26,x			lda DStack+2,x
.9c8b	85 20		sta $20				sta ed_cur
.9c8d	b5 27		lda $27,x			lda DStack+3,x
.9c8f	85 21		sta $21				sta ed_cur+1		; drop through to _cmd_d_done
.9c91					_cmd_d_done:
.9c91	a9 40		lda #$40			lda #%01000000
.9c93	05 22		ora $22				ora ed_flags
.9c95	85 22		sta $22				sta ed_flags
.9c97	20 69 ab	jsr $ab69			jsr CR
.9c9a	4c a7 9b	jmp $9ba7			jmp ed_next_command
.9c9d					_cmd_d_common:
.9c9d	20 51 cf	jsr $cf51			jsr Dup			; ( addr-t u-t u u )
.9ca0	20 cd 9e	jsr $9ecd			jsr ed_num_to_addr	; ( addr-t u-t u addr )
.9ca3	20 93 ce	jsr $ce93			jsr Fetch		; ( addr-t u-t u addr1 )
.9ca6	20 6e cf	jsr $cf6e			jsr Swap		; ( addr-t u-t addr1 u )
.9ca9	20 30 ca	jsr $ca30			jsr One_minus		; ( addr-t u-t addr1 u-1 )
.9cac	20 cd 9e	jsr $9ecd			jsr ed_num_to_addr	; ( addr-t u-t addr1 addr-1 )
.9caf	4c ac ce	jmp $ceac			jmp Store		; ( addr-t u-t )
.9cb2					ed_cmd_equ:
.9cb2	a5 1e		lda $1e				lda ed_head
.9cb4	05 1f		ora $1f				ora ed_head+1
.9cb6	d0 06		bne $9cbe			bne _cmd_equ_have_text
.9cb8	20 eb b7	jsr $b7eb			jsr Zero		; ( addr-t u-t para1 para2 0 )
.9cbb	4c de 9c	jmp $9cde			jmp _cmd_equ_done
.9cbe					_cmd_equ_have_text:
.9cbe	20 bf 9e	jsr $9ebf			jsr ed_no_line_zero
.9cc1	24 22		bit $22				bit ed_flags
.9cc3	30 0a		bmi $9ccf			bmi _cmd_equ_have_para
.9cc5	a5 20		lda $20				lda ed_cur+0		; ( addr-t u-t para1 para2 ? )
.9cc7	a4 21		ldy $21				ldy ed_cur+1
.9cc9	20 ae b7	jsr $b7ae			jsr PushYA
.9ccc	4c de 9c	jmp $9cde			jmp _cmd_equ_done	; ( addr-t u-t para1 para2 cur )
.9ccf					_cmd_equ_have_para:
.9ccf	b5 24		lda $24,x			lda DStack+0,x
.9cd1	15 25		ora $25,x			ora DStack+1,x
.9cd3	d0 06		bne $9cdb			bne _cmd_equ_two_paras
.9cd5	20 2a cf	jsr $cf2a			jsr Over		; ( addr-t u-t para1 para2 para1)
.9cd8	4c de 9c	jmp $9cde			jmp _cmd_equ_done
.9cdb					_cmd_equ_two_paras:
.9cdb	20 51 cf	jsr $cf51			jsr Dup			; ( addr-t u-t para1 para2 para2) drop through
.9cde					_cmd_equ_done:
.9cde	20 69 ab	jsr $ab69			jsr CR			; number goes on new line
.9ce1	20 fb cb	jsr $cbfb			jsr U_Dot		; ( addr-t u-t para1 para2 )
.9ce4	20 69 ab	jsr $ab69			jsr CR
.9ce7	4c a7 9b	jmp $9ba7			jmp ed_next_command
.9cea					ed_cmd_f:
.9cea	24 22		bit $22				bit ed_flags
.9cec	30 18		bmi $9d06			bmi _cmd_f_have_para
.9cee	20 69 ab	jsr $ab69			jsr CR
.9cf1	20 db ce	jsr $cedb			jsr To_R		; ( addr-t u-t 0 ) ( R: 0 )
.9cf4	20 4c ce	jsr $ce4c			jsr Rot			; ( u-t 0 addr-t ) ( R: 0 )
.9cf7	20 51 cf	jsr $cf51			jsr Dup			; ( u-t 0 addr-t addr-t ) ( R: 0 )
.9cfa	20 fb cb	jsr $cbfb			jsr U_Dot		; ( u-t 0 addr-t ) ( R: 0 )
.9cfd	20 71 ce	jsr $ce71			jsr Not_Rot		; ( addr-t u-t 0 ) ( R: 0 )
.9d00	20 f9 ce	jsr $cef9			jsr R_From		; ( addr-t u-t 0 0 )
.9d03	4c 17 9d	jmp $9d17			jmp _cmd_f_done
.9d06					_cmd_f_have_para:
.9d06	20 2a cf	jsr $cf2a			jsr Over
.9d09	20 69 ab	jsr $ab69			jsr CR
.9d0c	20 fb cb	jsr $cbfb			jsr U_Dot
.9d0f	b5 26		lda $26,x			lda DStack+2,x
.9d11	95 2a		sta $2a,x			sta DStack+6,x
.9d13	b5 27		lda $27,x			lda DStack+3,x
.9d15	95 2b		sta $2b,x			sta DStack+7,x		; fall through to _cmd_f_done
.9d17					_cmd_f_done:
.9d17	20 69 ab	jsr $ab69			jsr CR
.9d1a	4c a7 9b	jmp $9ba7			jmp ed_next_command
.9d1d					ed_cmd_i:
.9d1d	e8		inx				inx
.9d1e	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9d1f	24 22		bit $22				bit ed_flags
.9d21	30 08		bmi $9d2b			bmi _cmd_i_have_para
.9d23	a5 20		lda $20				lda ed_cur
.9d25	95 24		sta $24,x			sta DStack+0,x
.9d27	a5 21		lda $21				lda ed_cur+1
.9d29	95 25		sta $25,x			sta DStack+1,x		;  ( addr-t u-t cur ) drop through
.9d2b					_cmd_i_have_para:
.9d2b	b5 24		lda $24,x			lda DStack+0,x
.9d2d	15 25		ora $25,x			ora DStack+1,x
.9d2f	f0 09		beq $9d3a			beq _cmd_i_done
.9d31	20 30 ca	jsr $ca30			jsr One_minus		; ( addr-t u-t para1-1 )
.9d34	20 eb b7	jsr $b7eb			jsr Zero		; ( addr-t u-t para1-1 0 )
.9d37	20 71 c9	jsr $c971			jsr Max			; ( addr-t u-t para1-1 | 0 )
.9d3a					_cmd_i_done:
.9d3a	4c be 9b	jmp $9bbe			jmp ed_entry_cmd_i
.9d3d					ed_cmd_n:
.9d3d	a9 01		lda #$01			lda #%00000001
.9d3f	05 22		ora $22				ora ed_flags
.9d41	85 22		sta $22				sta ed_flags
.9d43	4c 4c 9d	jmp $9d4c			jmp ed_cmd_p_entry_for_cmd_n
.9d46					ed_cmd_p:
.9d46					ed_cmd_p_from_external:
.9d46	a9 fe		lda #$fe			lda #$ff-%00000001
.9d48	25 22		and $22				and ed_flags
.9d4a	85 22		sta $22				sta ed_flags
.9d4c					ed_cmd_p_entry_for_cmd_n:
.9d4c	20 7c 9e	jsr $9e7c			jsr ed_have_text
.9d4f	20 bf 9e	jsr $9ebf			jsr ed_no_line_zero
.9d52	20 69 ab	jsr $ab69			jsr CR
.9d55	b5 24		lda $24,x			lda DStack+0,x
.9d57	15 25		ora $25,x			ora DStack+1,x
.9d59	d0 11		bne $9d6c			bne _cmd_p_loop
.9d5b	b5 26		lda $26,x			lda DStack+2,x
.9d5d	85 20		sta $20				sta ed_cur
.9d5f	b5 27		lda $27,x			lda DStack+3,x
.9d61	85 21		sta $21				sta ed_cur+1
.9d63	20 2a cf	jsr $cf2a			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9d66	20 8d 9d	jsr $9d8d			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9d69	4c 8a 9d	jmp $9d8a			jmp _cmd_p_all_done
.9d6c					_cmd_p_loop:
.9d6c	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9d6e	d5 26		cmp $26,x			cmp DStack+2,x
.9d70	b5 25		lda $25,x			lda DStack+1,x
.9d72	f5 27		sbc $27,x			sbc DStack+3,x
.9d74	90 0c		bcc $9d82			bcc _cmd_p_done
.9d76	20 2a cf	jsr $cf2a			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9d79	20 8d 9d	jsr $9d8d			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9d7c	20 5f ca	jsr $ca5f			jsr NOS_One_Plus
.9d7f	4c 6c 9d	jmp $9d6c			jmp _cmd_p_loop
.9d82					_cmd_p_done:
.9d82	b5 24		lda $24,x			lda DStack+0,x
.9d84	85 20		sta $20				sta ed_cur
.9d86	b5 25		lda $25,x			lda DStack+1,x
.9d88	85 21		sta $21				sta ed_cur+1
.9d8a					_cmd_p_all_done:
.9d8a	4c a7 9b	jmp $9ba7			jmp ed_next_command
.9d8d					_cmd_p_common:
.9d8d	a5 22		lda $22				lda ed_flags
.9d8f	4a		lsr a				lsr			; bit 0 now in carry
.9d90	90 0b		bcc $9d9d			bcc _cmd_p_common_no_num
.9d92	20 51 cf	jsr $cf51			jsr Dup			; ( addr-t u-t para1 para1 )
.9d95	20 fb cb	jsr $cbfb			jsr U_Dot		; ( addr-t u-t para1 )
.9d98	a9 09		lda #$09			lda #AscHT
.9d9a	20 bb cd	jsr $cdbb			jsr Emit_A
.9d9d					_cmd_p_common_no_num:
.9d9d	20 cd 9e	jsr $9ecd			jsr ed_num_to_addr	  ; ( addr-t u-t addr )
.9da0	4c f1 9e	jmp $9ef1			jmp ed_print_addr
.9da3					ed_cmd_q:
.9da3	24 22		bit $22				bit ed_flags		; bit 6 is change flag
.9da5	50 03		bvc $9daa			bvc +
.9da7	4c 5b 9e	jmp $9e5b			jmp ed_error_2drop
.9daa					+
.9daa	4c ad 9b	jmp $9bad			jmp ed_all_done		   ; can't fall thru because of PLX
.9dad					ed_cmd_qq:
.9dad	4c ad 9b	jmp $9bad			jmp ed_all_done
.9db0					ed_cmd_w:
.9db0	20 7c 9e	jsr $9e7c			jsr ed_have_text
.9db3	24 22		bit $22				bit ed_flags		; parameter given?
.9db5	30 12		bmi $9dc9			bmi _cmd_w_have_para
.9db7	b5 2b		lda $2b,x			lda DStack+7,x		; $0000 thru $00ff ?
.9db9	d0 03		bne $9dbe			bne +
.9dbb	4c 5b 9e	jmp $9e5b			jmp ed_error_2drop
.9dbe					+
.9dbe	b5 2a		lda $2a,x			lda DStack+6,x
.9dc0	95 26		sta $26,x			sta DStack+2,x
.9dc2	b5 2b		lda $2b,x			lda DStack+7,x
.9dc4	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t addr-t ? )
.9dc6	4c d1 9d	jmp $9dd1			jmp _cmd_w_para_ready
.9dc9					_cmd_w_have_para:
.9dc9	b5 26		lda $26,x			lda DStack+2,x
.9dcb	95 2a		sta $2a,x			sta DStack+6,x
.9dcd	b5 27		lda $27,x			lda DStack+3,x
.9dcf	95 2b		sta $2b,x			sta DStack+7,x		; drop through to _cmd_w_para_ready
.9dd1					_cmd_w_para_ready:
.9dd1	a9 1e		lda #$1e			lda #<ed_head
.9dd3	95 24		sta $24,x			sta DStack+0,x
.9dd5	a9 00		lda #$00			lda #>ed_head
.9dd7	95 25		sta $25,x			sta DStack+1,x		; ( addr-t u-t addr-t addr-h )
.9dd9	20 2a cf	jsr $cf2a			jsr Over		; ( addr-t u-t addr-t addr-h addr-t )
.9ddc	20 db ce	jsr $cedb			jsr To_R		; ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.9ddf					_cmd_w_loop:
.9ddf	20 93 ce	jsr $ce93			jsr Fetch		; ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.9de2	b5 24		lda $24,x			lda DStack+0,x
.9de4	15 25		ora $25,x			ora DStack+1,x
.9de6	f0 4d		beq $9e35			beq _cmd_w_eol
.9de8	20 9f cc	jsr $cc9f			jsr Two_dup		; ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.9deb	20 61 c6	jsr $c661			jsr Two_to_r		; ( addr-t addr-1 ) (R: ... )
.9dee	20 05 ca	jsr $ca05			jsr Cell_Plus_NoUf	; ( addr-t addr1+2 ) (R: ... )
.9df1	20 51 cf	jsr $cf51			jsr Dup			; ( addr-t addr1+2 addr1+2 ) ( R: ... )
.9df4	20 93 ce	jsr $ce93			jsr Fetch		; ( addr-t addr1+2 addr-s ) ( R: ... )
.9df7	20 6e cf	jsr $cf6e			jsr Swap		; ( addr-t addr-s addr1+2 ) ( R: ... )
.9dfa	20 05 ca	jsr $ca05			jsr Cell_Plus_NoUf	; ( addr-t addr-s addr1+2 ) (R: ... )
.9dfd	20 93 ce	jsr $ce93			jsr Fetch		; ( addr-t addr-s u-s ) ( R: ... )
.9e00	20 71 ce	jsr $ce71			jsr Not_Rot		; ( u-s addr-t addr-s ) ( R: ... )
.9e03	20 6e cf	jsr $cf6e			jsr Swap		; ( u-s addr-s addr-t ) ( R: ... )
.9e06	20 4c ce	jsr $ce4c			jsr Rot			; (addr-s addr-t u-s ) ( R: ... )
.9e09	20 51 cf	jsr $cf51			jsr Dup			; (addr-s addr-t u-s u-s ) ( R: ... )
.9e0c	20 db ce	jsr $cedb			jsr To_R		; (addr-s addr-t u-s ) ( R: ... u-s )
.9e0f	20 78 ad	jsr $ad78			jsr Move		; ( )( R: addr-t addr-1 addr-t )
.9e12	20 f9 ce	jsr $cef9			jsr R_From		; ( u-s )  ( R: addr-t addr-h addr-t )
.9e15	20 3d c6	jsr $c63d			jsr Two_r_from		; ( u-s addr-t addr-h ) ( R: addr-t )
.9e18	20 71 ce	jsr $ce71			jsr Not_Rot		; ( addr-h u-s addr-t ) ( R: addr-t )
.9e1b	20 9a cb	jsr $cb9a			jsr Plus		; ( addr-h addr-t1 ) ( R: addr-t )
.9e1e	20 51 cf	jsr $cf51			jsr Dup			; ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.9e21	a9 0a		lda #$0a			lda #AscLF
.9e23	20 dd b7	jsr $b7dd			jsr PushZA		; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.9e26	20 6e cf	jsr $cf6e			jsr Swap		; ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.9e29	20 ac ce	jsr $ceac			jsr Store		; ( addr-h addr-t1 ) ( R: addr-t )
.9e2c	20 55 ca	jsr $ca55			jsr One_plus		; ( addr-h addr-t1+1 ) ( R: addr-t )
.9e2f	20 6e cf	jsr $cf6e			jsr Swap		; ( addr-t1+1 addr-h ) ( R: addr-t )
.9e32	4c df 9d	jmp $9ddf			jmp _cmd_w_loop
.9e35					_cmd_w_eol:
.9e35	20 6e cf	jsr $cf6e			jsr Swap		; ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.9e38	20 f9 ce	jsr $cef9			jsr R_From		; ( addr-t u-t addr-n addr-tn addr-t )
.9e3b	20 b2 cb	jsr $cbb2			jsr Minus		; ( addr-t u-t addr-n u )
.9e3e	b5 24		lda $24,x			lda DStack+0,x
.9e40	95 28		sta $28,x			sta DStack+4,x
.9e42	b5 25		lda $25,x			lda DStack+1,x
.9e44	95 29		sta $29,x			sta DStack+5,x		; ( addr-t u addr-n u )
.9e46	20 69 ab	jsr $ab69			jsr CR
.9e49	20 51 cf	jsr $cf51			jsr Dup			; ( addr-t u addr-n u u )
.9e4c	20 fb cb	jsr $cbfb			jsr U_Dot		; ( addr-t u addr-n u )
.9e4f	20 69 ab	jsr $ab69			jsr CR
.9e52	a9 bf		lda #$bf			lda #$ff-%01000000
.9e54	25 22		and $22				and ed_flags
.9e56	85 22		sta $22				sta ed_flags
.9e58	4c a7 9b	jmp $9ba7			jmp ed_next_command
.9e5b					ed_error_2drop:
.9e5b	e8		inx				inx			; Drop para2
.9e5c	e8		inx				inx
.9e5d					ed_error_1drop:
.9e5d	e8		inx				inx			; Drop para1
.9e5e	e8		inx				inx
.9e5f					ed_error:
.9e5f	20 69 ab	jsr $ab69			jsr CR
.9e62	a9 3f		lda #$3f			lda #'?'
.9e64	20 bb cd	jsr $cdbb			jsr Emit_A
.9e67	20 69 ab	jsr $ab69			jsr CR
.9e6a	4c c5 99	jmp $99c5			jmp ed_input_loop
.9e6d					ed_get_input:
.9e6d	20 61 c2	jsr $c261			jsr Refill		;  ( addr-t u-t f )
.9e70	b5 24		lda $24,x			lda DStack+0,x
.9e72	d0 05		bne $9e79			bne +
.9e74	68		pla				pla
.9e75	68		pla				pla
.9e76	4c 5d 9e	jmp $9e5d			jmp ed_error_1drop
.9e79					+
.9e79	e8		inx				inx
.9e7a	e8		inx				inx
.9e7b	60		rts				rts
.9e7c					ed_have_text:
.9e7c	a5 1e		lda $1e				lda ed_head
.9e7e	05 1f		ora $1f				ora ed_head+1
.9e80	d0 05		bne $9e87			bne +
.9e82	68		pla				pla
.9e83	68		pla				pla
.9e84	4c 5f 9e	jmp $9e5f			jmp ed_error
.9e87					+
.9e87	60		rts				rts
.9e88					ed_is_valid_line:
.9e88	38		sec				sec				; default is legal line number
.9e89	b5 24		lda $24,x			lda DStack+0,x
.9e8b	15 25		ora $25,x			ora DStack+1,x
.9e8d	f0 18		beq $9ea7			beq _nope_zero	; ( n )
.9e8f	20 51 cf	jsr $cf51			jsr Dup				; ( n n )
.9e92	20 a9 9e	jsr $9ea9			jsr ed_last_line		; ( n n last )
.9e95	20 6e cf	jsr $cf6e			jsr Swap			; ( n last n )
.9e98	20 6d c8	jsr $c86d			jsr Less_Than			; ( n f )
.9e9b	b5 24		lda $24,x			lda DStack+0,x			; 0 flag is good
.9e9d	15 25		ora $25,x			ora DStack+1,x
.9e9f	d0 04		bne $9ea5			bne _too_small
.9ea1	e8		inx				inx
.9ea2	e8		inx				inx			; DROP flag ( n )
.9ea3	38		sec				sec			; signal valid
.9ea4	60		rts				rts
.9ea5					_too_small:
.9ea5	e8		inx				inx
.9ea6	e8		inx				inx
.9ea7					_nope_zero:
.9ea7	18		clc				clc			; signal not valid
.9ea8	60		rts				rts
.9ea9					ed_last_line:
.9ea9	20 eb b7	jsr $b7eb			jsr Zero		; Set counter to zero
.9eac	a9 1e		lda #$1e			lda #ed_head
.9eae	20 dd b7	jsr $b7dd			jsr PushZA		; ( count addr )
.9eb1					_loop:
.9eb1	20 93 ce	jsr $ce93			jsr Fetch		; ( count addr|0 )
.9eb4	b5 25		lda $25,x			lda DStack+1,x		; at end-of-list?
.9eb6	f0 06		beq $9ebe			beq _done
.9eb8	20 5f ca	jsr $ca5f			jsr NOS_One_Plus	; Increase counter
.9ebb	4c b1 9e	jmp $9eb1			jmp _loop		; continue
.9ebe					_done:
.9ebe	60		rts				rts
.9ebf					ed_no_line_zero:
.9ebf	b5 26		lda $26,x			lda DStack+2,x
.9ec1	15 27		ora $27,x			ora DStack+3,x
.9ec3	d0 07		bne $9ecc			bne _done
.9ec5	24 22		bit $22				bit ed_flags
.9ec7	10 03		bpl $9ecc			bpl _done
.9ec9	4c 5b 9e	jmp $9e5b			jmp ed_error_2drop
.9ecc					_done:
.9ecc	60		rts				rts
.9ecd					ed_num_to_addr:
.9ecd	a9 1e		lda #$1e			lda #ed_head
.9ecf	20 dd b7	jsr $b7dd			jsr PushZA		; ( u addr-h )
.9ed2	4c df 9e	jmp $9edf			jmp _test
.9ed5					_loop:
.9ed5	20 93 ce	jsr $ce93			jsr Fetch		; @ ( u addr1 )
.9ed8	b5 25		lda $25,x			lda DStack+1,x		; at end of list?
.9eda	f0 09		beq $9ee5			beq _finished
.9edc	20 3c ca	jsr $ca3c			jsr NOS_One_Minus	; decrement the line count
.9edf	b5 26		lda $26,x	_test:		lda DStack+2,x		; is the nth element we're looking for?
.9ee1	15 27		ora $27,x			ora DStack+3,x
.9ee3	d0 f0		bne $9ed5			bne _loop
.9ee5					_finished:
.9ee5	4c 8b c9	jmp $c98b			jmp Nip			; ( addr )
.9ee8					ed_para1_to_cur:
.9ee8	b5 26		lda $26,x			lda DStack+2,x
.9eea	85 20		sta $20				sta ed_cur
.9eec	b5 27		lda $27,x			lda DStack+3,x
.9eee	85 21		sta $21				sta ed_cur+1
.9ef0	60		rts				rts
.9ef1					ed_print_addr:
.9ef1	20 02 ca	jsr $ca02			jsr Cell_Plus		; ( addr+2 )
.9ef4	20 51 cf	jsr $cf51			jsr Dup			; ( addr+2 addr+2 )
.9ef7	20 02 ca	jsr $ca02			jsr Cell_Plus		; ( addr+2 addr+4 )
.9efa	20 93 ce	jsr $ce93			jsr Fetch		; ( addr+2 u-s )
.9efd	20 6e cf	jsr $cf6e			jsr Swap		; ( u-s addr+2 )
.9f00	20 93 ce	jsr $ce93			jsr Fetch		; ( u-s addr-s )
.9f03	20 6e cf	jsr $cf6e			jsr Swap		; ( addr-s u-s )
.9f06	20 d3 cd	jsr $cdd3			jsr Type
.9f09	4c 69 ab	jmp $ab69			jmp CR
>9f0c	61 66 69 64 70 6e 3d 77		ed_cmd_list:	.text "afidpn=wqQ", 0
>9f14	71 51 00
.9f17					ed_cmd_table:
>9f17	bc 9b ea 9c 1d 9d 53 9c				.word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>9f1f	46 9d 3d 9d
>9f23	b2 9c b0 9d a3 9d ad 9d				.word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.9f2b					ed6502_end:
>9f2b	53 65 65			Name0:	.text "See"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=40622					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9f2e	a3					.byte (("See"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=1421					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>9f2f	11					.byte WordFlags	;wh_Flags
>9f30	03					.byte 3	;wh_CodeLength
>9f31	21 99					  .word WordListLink
=$9f33					XtPtr1 ::= *
=40622					WordListLink ::= Nt0 ; remember the nt of this word for later
.9f33					See:
.9f33	20 36 bc	jsr $bc36			jsr Tick_Nt		; ( nt )
.9f36	20 69 ab	jsr $ab69			jsr CR
.9f39	ad 00 03	lda $0300			lda base		; Save the current number base
.9f3c	48		pha				pha
.9f3d	a9 26		lda #$26			lda #<str_see_nt	; print nt
.9f3f	a0 da		ldy #$da			ldy #>str_see_nt
.9f41	20 ee cd	jsr $cdee			jsr Print_ASCIIZ_YA_no_lf
.9f44	20 51 cf	jsr $cf51			jsr Dup			; ( nt nt )
.9f47	20 09 a9	jsr $a909			jsr Dot_Hex
.9f4a	20 c7 cd	jsr $cdc7			jsr Space		; ( nt )
.9f4d	20 51 cf	jsr $cf51			jsr Dup			; ( nt nt )
.9f50	20 98 bd	jsr $bd98			jsr Name_To_Int		; ( nt xt )
.9f53	a9 2c		lda #$2c			lda #<str_see_xt	; print xt
.9f55	a0 da		ldy #$da			ldy #>str_see_xt
.9f57	20 ee cd	jsr $cdee			jsr Print_ASCIIZ_YA_no_lf
.9f5a	20 51 cf	jsr $cf51			jsr Dup			; ( nt xt xt )
.9f5d	20 09 a9	jsr $a909			jsr Dot_Hex
.9f60	20 69 ab	jsr $ab69			jsr CR			; ( nt xt )
.9f63	a9 1f		lda #$1f			lda #<str_see_flags
.9f65	a0 da		ldy #$da			ldy #>str_see_flags
.9f67	20 ee cd	jsr $cdee			jsr Print_ASCIIZ_YA_no_lf
.9f6a	20 2a cf	jsr $cf2a			jsr Over		; ( nt xt nt )
.9f6d	a9 81		lda #$81			lda #Wh_Flags
.9f6f	20 07 ca	jsr $ca07			jsr Plus_A		; ( nt xt ^flags )
.9f72	a1 24		lda ($24,x)			lda (DStack+0,x)	; ( nt xt ^flags )
.9f74	95 24		sta $24,x			sta DStack+0,x		; ( nt xt flags )
.9f76	a0 0e		ldy #$0e			ldy #2*7		; for bit 7..0
.9f78	20 c7 cd	jsr $cdc7	_flag_loop:	jsr Space
.9f7b	b9 df 9f	lda $9fdf,y			lda _FlagLabels+0,y	;   print label
.9f7e	20 bb cd	jsr $cdbb			jsr Emit_A
.9f81	b9 e0 9f	lda $9fe0,y			lda _FlagLabels+1,y
.9f84	20 bb cd	jsr $cdbb			jsr Emit_A
.9f87	a9 3d		lda #$3d			lda #'='
.9f89	20 bb cd	jsr $cdbb			jsr Emit_A
.9f8c	16 24		asl $24,x			asl DStack+0,x		;   c = flag, rotate the rest
.9f8e	a9 00		lda #$00			lda #0
.9f90	69 30		adc #$30			adc #'0'
.9f92	20 bb cd	jsr $cdbb			jsr Emit_A
.9f95	88		dey				dey
.9f96	88		dey				dey
.9f97	10 df		bpl $9f78			bpl _flag_loop
.9f99	e8		inx				inx
.9f9a	e8		inx				inx			; ( nt xt )
.9f9b	20 69 ab	jsr $ab69			jsr CR
.9f9e	a9 32		lda #$32			lda #<str_see_size	; print size
.9fa0	a0 da		ldy #$da			ldy #>str_see_size
.9fa2	20 ee cd	jsr $cdee			jsr Print_ASCIIZ_YA_no_lf
.9fa5	20 6e cf	jsr $cf6e			jsr Swap		; ( xt nt )
.9fa8	20 22 ab	jsr $ab22			jsr WordSize		; ( xt u )
.9fab	20 c4 b1	jsr $b1c4			jsr Decimal
.9fae	b5 24		lda $24,x			lda DStack+0,x		; if = 255
.9fb0	c9 ff		cmp #$ff			cmp #$ff
.9fb2	d0 11		bne $9fc5			bne _size5
.9fb4	20 a2 b8	jsr $b8a2			jsr sliteral_runtime	;   type "large"
.9fb7	4c bf 9f	jmp $9fbf			  jmp _size2
>9fba	6c 61 72 67 65					  .text "large"
.9fbf	20 d3 cd	jsr $cdd3	_size2:		jsr Type
.9fc2	4c cb 9f	jmp $9fcb			jmp _size9		;  else
.9fc5	20 51 cf	jsr $cf51	_size5:		jsr Dup			;    type size
.9fc8	20 fb cb	jsr $cbfb			jsr U_Dot
.9fcb					_size9:
.9fcb	20 69 ab	jsr $ab69			jsr CR
.9fce	68		pla				pla			; restore base
.9fcf	8d 00 03	sta $0300			sta base
.9fd2	20 9f cc	jsr $cc9f			jsr Two_dup
.9fd5	20 63 a8	jsr $a863			jsr Dump		; dump
.9fd8	20 69 ab	jsr $ab69			jsr CR
.9fdb	20 d2 d7	jsr $d7d2			jsr DisAsm		; disassemble
=171					CodeLen	.var *-XtPtr1
=$9fde					Here1 = *	; remember here
>9f30	ab					.byte CodeLen	;patch wh_CodeLength
.9fde	60		rts				rts
>9fdf	46 50 44 42 43 4f 49 4d		_FlagLabels:	.text "FPDBCOIMNNANUF__"
>9fe7	4e 4e 41 4e 55 46 5f 5f
>9fef	46 6f 72 74 68 2d 57 6f		Name0:	.text "Forth-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9ff7	72 64 4c 69 73 74
=14					NameLength = *-Name0
=40829					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9ffd	8e					.byte (("Forth-WordList"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=207					LinkDisplacement = Nt0-WordListLink
>9ffe	10					.byte WordFlags	;wh_Flags
>9fff	03					.byte 3	;wh_CodeLength
>a000	cf					  .byte LinkDisplacement	; offset to previous nt
=$a001					XtPtr1 ::= *
=40829					WordListLink ::= Nt0 ; remember the nt of this word for later
.a001	4c eb b7	jmp $b7eb	Forth_WordList:	jmp Zero
=3					CodeLen	.var *-XtPtr1
=$a004					Here1 = *	; remember here
>9fff	03					.byte CodeLen	;patch wh_CodeLength
>a004	45 64 69 74 6f 72 2d 57		Name0:	.text "Editor-WordList"	;  name of word as a string, ending at wh_NameLastChar
>a00c	6f 72 64 4c 69 73 74
=15					NameLength = *-Name0
=40851					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a013	8f					.byte (("Editor-WordList"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a014	10					.byte WordFlags	;wh_Flags
>a015	03					.byte 3	;wh_CodeLength
>a016	16					  .byte LinkDisplacement	; offset to previous nt
=$a017					XtPtr1 ::= *
=40851					WordListLink ::= Nt0 ; remember the nt of this word for later
.a017					Editor_WordList:
.a017	4c f4 b7	jmp $b7f4			jmp One
=3					CodeLen	.var *-XtPtr1
=$a01a					Here1 = *	; remember here
>a015	03					.byte CodeLen	;patch wh_CodeLength
>a01a	41 73 73 65 6d 62 6c 65		Name0:	.text "Assembler-WordList"	;  name of word as a string, ending at wh_NameLastChar
>a022	72 2d 57 6f 72 64 4c 69 73 74
=18					NameLength = *-Name0
=40876					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a02c	92					.byte (("Assembler-WordList"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>a02d	10					.byte WordFlags	;wh_Flags
>a02e	03					.byte 3	;wh_CodeLength
>a02f	19					  .byte LinkDisplacement	; offset to previous nt
=$a030					XtPtr1 ::= *
=40876					WordListLink ::= Nt0 ; remember the nt of this word for later
.a030					Assembler_WordList:
.a030	4c fd b7	jmp $b7fd			jmp Two
=3					CodeLen	.var *-XtPtr1
=$a033					Here1 = *	; remember here
>a02e	03					.byte CodeLen	;patch wh_CodeLength
>a033	52 6f 6f 74 2d 57 6f 72		Name0:	.text "Root-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a03b	64 6c 69 73 74
=13					NameLength = *-Name0
=40896					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a040	8d					.byte (("Root-Wordlist"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>a041	10					.byte WordFlags	;wh_Flags
>a042	03					.byte 3	;wh_CodeLength
>a043	14					  .byte LinkDisplacement	; offset to previous nt
=$a044					XtPtr1 ::= *
=40896					WordListLink ::= Nt0 ; remember the nt of this word for later
.a044	a9 03		lda #$03	Root_WordList:	lda #wid_Root
.a046	4c dd b7	jmp $b7dd			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$a049					Here1 = *	; remember here
>a042	05					.byte CodeLen	;patch wh_CodeLength
>a049	4f 6e 6c 79			Name0:	.text "Only"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=40909					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a04d	24					.byte (("Only"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>a04e	10					.byte WordFlags	;wh_Flags
>a04f	03					.byte 3	;wh_CodeLength
>a050	0d					  .byte LinkDisplacement	; offset to previous nt
=$a051					XtPtr1 ::= *
=40909					WordListLink ::= Nt0 ; remember the nt of this word for later
.a051	20 bd b7	jsr $b7bd	Only:		jsr True	; Push -1
.a054	4c 71 a1	jmp $a171			jmp Set_Order	; set the minimum search order.
=6					CodeLen	.var *-XtPtr1
=$a057					Here1 = *	; remember here
>a04f	06					.byte CodeLen	;patch wh_CodeLength
>a057	41 6c 73 6f			Name0:	.text "Also"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=40923					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a05b	e4					.byte (("Also"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a05c	10					.byte WordFlags	;wh_Flags
>a05d	03					.byte 3	;wh_CodeLength
>a05e	0e					  .byte LinkDisplacement	; offset to previous nt
=$a05f					XtPtr1 ::= *
=40923					WordListLink ::= Nt0 ; remember the nt of this word for later
.a05f	20 a1 a1	jsr $a1a1	Also:		jsr Get_Order
.a062	20 2a cf	jsr $cf2a			jsr Over
.a065	20 6e cf	jsr $cf6e			jsr Swap
.a068	20 55 ca	jsr $ca55			jsr One_plus
.a06b	4c 71 a1	jmp $a171			jmp Set_Order
=15					CodeLen	.var *-XtPtr1
=$a06e					Here1 = *	; remember here
>a05d	0f					.byte CodeLen	;patch wh_CodeLength
>a06e	50 72 65 76 69 6f 75 73		Name0:	.text "Previous"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=40950					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a076	68					.byte (("Previous"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>a077	10					.byte WordFlags	;wh_Flags
>a078	03					.byte 3	;wh_CodeLength
>a079	1b					  .byte LinkDisplacement	; offset to previous nt
=$a07a					XtPtr1 ::= *
=40950					WordListLink ::= Nt0 ; remember the nt of this word for later
.a07a	20 a1 a1	jsr $a1a1	Previous:	jsr Get_Order
.a07d	20 8b c9	jsr $c98b			jsr Nip
.a080	20 30 ca	jsr $ca30			jsr One_minus
.a083	4c 71 a1	jmp $a171			jmp Set_Order
=12					CodeLen	.var *-XtPtr1
=$a086					Here1 = *	; remember here
>a078	0c					.byte CodeLen	;patch wh_CodeLength
>a086	3e 4f 72 64 65 72		Name0:	.text ">Order"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=40972					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a08c	46					.byte ((">Order"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a08d	10					.byte WordFlags	;wh_Flags
>a08e	03					.byte 3	;wh_CodeLength
>a08f	16					  .byte LinkDisplacement	; offset to previous nt
=$a090					XtPtr1 ::= *
=40972					WordListLink ::= Nt0 ; remember the nt of this word for later
.a090					To_Order:
.a090	20 db ce	jsr $cedb			jsr To_R		; Put the wid on the return stack for now.
.a093	20 a1 a1	jsr $a1a1			jsr Get_Order		; Get the current search order.
.a096	20 f9 ce	jsr $cef9			jsr R_From		; Get back the wid and add it to the list.
.a099	20 6e cf	jsr $cf6e			jsr Swap
.a09c	20 55 ca	jsr $ca55			jsr One_plus
.a09f	4c 71 a1	jmp $a171			jmp Set_Order		; Set the search order with the new list.
=18					CodeLen	.var *-XtPtr1
=$a0a2					Here1 = *	; remember here
>a08e	12					.byte CodeLen	;patch wh_CodeLength
>a0a2	4f 72 64 65 72			Name0:	.text "Order"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=40999					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a0a7	45					.byte (("Order"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>a0a8	10					.byte WordFlags	;wh_Flags
>a0a9	03					.byte 3	;wh_CodeLength
>a0aa	1b					  .byte LinkDisplacement	; offset to previous nt
=$a0ab					XtPtr1 ::= *
=40999					WordListLink ::= Nt0 ; remember the nt of this word for later
.a0ab					Order:
.a0ab	20 69 ab	jsr $ab69			jsr CR
.a0ae	a0 00		ldy #$00			ldy #0			; for each search_orderV[]
.a0b0	f0 0b		beq $a0bd			beq _test
.a0b2	98		tya		_loop:		tya
.a0b3	48		pha				pha
.a0b4	b9 2b 03	lda $032b,y			lda Search_orderV,y
.a0b7	20 c8 a0	jsr $a0c8			jsr print_wid_stringA	; internal helper function
.a0ba	68		pla				pla
.a0bb	a8		tay				tay
.a0bc	c8		iny				iny			;  next
.a0bd	cc 2a 03	cpy $032a	_test:		cpy Num_orderV
.a0c0	90 f0		bcc $a0b2			bcc _loop
.a0c2	20 69 ab	jsr $ab69			jsr CR
.a0c5	ad 10 03	lda $0310			lda CurrentV		; print the current wordlist.
.a0c8					print_wid_stringA:
.a0c8	c9 04		cmp #$04			cmp #wid_Root+1		; do we have a string?
.a0ca	90 06		bcc $a0d2			bcc _string
.a0cc	20 dd b7	jsr $b7dd			jsr PushZA		; print the WID number
.a0cf	4c fb cb	jmp $cbfb			jmp U_Dot		; JSR/RTS
.a0d2	0a		asl a		_string:	asl			; Get the word index based on WID 0 to 3
.a0d3	a8		tay				tay
.a0d4	ca		dex				dex			; TOS= word nt
.a0d5	ca		dex				dex
.a0d6	b9 ee a0	lda $a0ee,y			lda _wid_Table+0,y
.a0d9	95 24		sta $24,x			sta DStack+0,x
.a0db	b9 ef a0	lda $a0ef,y			lda _wid_Table+1,y
.a0de	95 25		sta $25,x			sta DStack+1,x		; ( nt )
.a0e0	20 e1 bd	jsr $bde1			jsr Name_To_String	; ( addr u )
.a0e3	a9 f7		lda #$f7			lda #$100-9		;   cut off "_wordlist"
.a0e5	20 45 ca	jsr $ca45			jsr Minus_A
.a0e8	20 d3 cd	jsr $cdd3			jsr Type		; Print
.a0eb	4c c7 cd	jmp $cdc7			jmp Space
=67					CodeLen	.var *-XtPtr1
=$a0ee					Here1 = *	; remember here
>a0a9	43					.byte CodeLen	;patch wh_CodeLength
.a0ee					_wid_Table:
>a0ee	7d 9f					.word forth_wordlist-wh_LinkNt-1	; WID 0:
>a0f0	93 9f					.word editor_wordlist-wh_LinkNt-1	; WID 1:
>a0f2	ac 9f					.word assembler_wordlist-wh_LinkNt-1	; WID 2:
>a0f4	c0 9f					.word root_wordlist-wh_LinkNt-1		; WID 3:
>a0f6	46 6f 72 74 68			Name0:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=41083					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a0fb	05					.byte (("Forth"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=84					LinkDisplacement = Nt0-WordListLink
>a0fc	10					.byte WordFlags	;wh_Flags
>a0fd	03					.byte 3	;wh_CodeLength
>a0fe	54					  .byte LinkDisplacement	; offset to previous nt
=$a0ff					XtPtr1 ::= *
=41083					WordListLink ::= Nt0 ; remember the nt of this word for later
.a0ff	a9 00		lda #$00	Forth:		lda #wid_Forth
.a101	8d 2b 03	sta $032b			sta Search_OrderV+0
=5					CodeLen	.var *-XtPtr1
=$a104					Here1 = *	; remember here
>a0fd	05					.byte CodeLen	;patch wh_CodeLength
.a104	60		rts				rts
>a105	44 65 66 69 6e 69 74 69		Name0:	.text "Definitions"	;  name of word as a string, ending at wh_NameLastChar
>a10d	6f 6e 73
=11					NameLength = *-Name0
=41104					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a110	6b					.byte (("Definitions"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>a111	10					.byte WordFlags	;wh_Flags
>a112	03					.byte 3	;wh_CodeLength
>a113	15					  .byte LinkDisplacement	; offset to previous nt
=$a114					XtPtr1 ::= *
=41104					WordListLink ::= Nt0 ; remember the nt of this word for later
.a114	ad 2b 03	lda $032b	Definitions:	lda Search_OrderV	; Transfer SEARCH_ORDER[0] to
.a117	8d 10 03	sta $0310			sta CurrentV		;   byte variable CURRENT.
=6					CodeLen	.var *-XtPtr1
=$a11a					Here1 = *	; remember here
>a112	06					.byte CodeLen	;patch wh_CodeLength
.a11a	60		rts				rts
>a11b	57 6f 72 64 4c 69 73 74		Name0:	.text "WordList"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=41123					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a123	88					.byte (("WordList"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>a124	10					.byte WordFlags	;wh_Flags
>a125	03					.byte 3	;wh_CodeLength
>a126	13					  .byte LinkDisplacement	; offset to previous nt
=$a127					XtPtr1 ::= *
=41123					WordListLink ::= Nt0 ; remember the nt of this word for later
.a127					WordList:
.a127	ad 11 03	lda $0311			lda Num_wordlistsV	; Get the current number of wordlists
.a12a	c9 0c		cmp #$0c			cmp #max_wordlists	; already at the max?
.a12c	90 05		bcc $a133			bcc +
.a12e	a9 66		lda #$66			lda #$100+err_TooManyWordlists	;   Print an error message
.a130	4c 74 b4	jmp $b474			jmp ThrowA
.a133					+
.a133	ee 11 03	inc $0311			inc Num_WordlistsV	; increment wordlist count
.a136	4c dd b7	jmp $b7dd			jmp PushZA		; and put it on the stack.
=18					CodeLen	.var *-XtPtr1
=$a139					Here1 = *	; remember here
>a125	12					.byte CodeLen	;patch wh_CodeLength
>a139	53 65 74 2d 43 75 72 72		Name0:	.text "Set-Current"	;  name of word as a string, ending at wh_NameLastChar
>a141	65 6e 74
=11					NameLength = *-Name0
=41156					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a144	8b					.byte (("Set-Current"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>a145	00					.byte WordFlags	;wh_Flags
>a146	03					.byte 3	;wh_CodeLength
>a147	21					  .byte LinkDisplacement	; offset to previous nt
=$a148					XtPtr1 ::= *
=41156					WordListLink ::= Nt0 ; remember the nt of this word for later
.a148	20 d4 b3	jsr $b3d4	Set_Current:	jsr PopA	; pop wid
.a14b	8d 10 03	sta $0310			sta CurrentV	; only the LSB is used.
=6					CodeLen	.var *-XtPtr1
=$a14e					Here1 = *	; remember here
>a146	06					.byte CodeLen	;patch wh_CodeLength
.a14e	60		rts				rts
>a14f	47 65 74 2d 43 75 72 72		Name0:	.text "Get-Current"	;  name of word as a string, ending at wh_NameLastChar
>a157	65 6e 74
=11					NameLength = *-Name0
=41178					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a15a	8b					.byte (("Get-Current"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a15b	10					.byte WordFlags	;wh_Flags
>a15c	03					.byte 3	;wh_CodeLength
>a15d	16					  .byte LinkDisplacement	; offset to previous nt
=$a15e					XtPtr1 ::= *
=41178					WordListLink ::= Nt0 ; remember the nt of this word for later
.a15e					Get_Current:
.a15e	ad 10 03	lda $0310			lda CurrentV
.a161	4c dd b7	jmp $b7dd			jmp PushZA	; CURRENT is a byte variable
=6					CodeLen	.var *-XtPtr1
=$a164					Here1 = *	; remember here
>a15c	06					.byte CodeLen	;patch wh_CodeLength
>a164	53 65 74 2d 4f 72 64 65		Name0:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>a16c	72
=9					NameLength = *-Name0
=41197					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a16d	49					.byte (("Set-Order"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>a16e	10					.byte WordFlags	;wh_Flags
>a16f	03					.byte 3	;wh_CodeLength
>a170	13					  .byte LinkDisplacement	; offset to previous nt
=$a171					XtPtr1 ::= *
=41197					WordListLink ::= Nt0 ; remember the nt of this word for later
.a171					Set_Order:
.a171	b5 25		lda $25,x			lda DStack+1,x		; Test for -1 TOS
.a173	10 08		bpl $a17d			bpl _start
.a175	e8		inx				inx			; Drop
.a176	e8		inx				inx
.a177	20 44 a0	jsr $a044			jsr Root_Wordlist	; wid
.a17a	20 f4 b7	jsr $b7f4			jsr One			; Count is 1.
.a17d					_start:
.a17d	20 d4 b3	jsr $b3d4			jsr PopA	; pop count
.a180	8d 2a 03	sta $032a			sta Num_orderV	; #ORDER is a byte variable.
.a183	a0 00		ldy #$00			ldy #0
.a185	f0 07		beq $a18e			beq _test
.a187					_loop:
.a187	20 d4 b3	jsr $b3d4			jsr PopA		; The search order is a byte array
.a18a	99 2b 03	sta $032b,y			sta Search_OrderV,y	; so only save the LSB
.a18d	c8		iny				iny
.a18e					_test:
.a18e	cc 2a 03	cpy $032a			cpy Num_orderV
.a191	d0 f4		bne $a187			bne _loop
=34					CodeLen	.var *-XtPtr1
=$a193					Here1 = *	; remember here
>a16f	22					.byte CodeLen	;patch wh_CodeLength
.a193	60		rts				rts
>a194	47 65 74 2d 4f 72 64 65		Name0:	.text "Get-Order"	;  name of word as a string, ending at wh_NameLastChar
>a19c	72
=9					NameLength = *-Name0
=41245					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a19d	49					.byte (("Get-Order"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=48					LinkDisplacement = Nt0-WordListLink
>a19e	10					.byte WordFlags	;wh_Flags
>a19f	03					.byte 3	;wh_CodeLength
>a1a0	30					  .byte LinkDisplacement	; offset to previous nt
=$a1a1					XtPtr1 ::= *
=41245					WordListLink ::= Nt0 ; remember the nt of this word for later
.a1a1					Get_Order:
.a1a1	ac 2a 03	ldy $032a			ldy Num_OrderV	; Get #ORDER - the number of wordlists in the search order.
.a1a4	f0 09		beq $a1af			beq _done	; If zero, there are no wordlists.
.a1a6					_loop:
.a1a6	b9 2a 03	lda $032a,y			lda Search_OrderV-1,y	; Put that wordlist id on the stack.
.a1a9	20 dd b7	jsr $b7dd			jsr PushZA
.a1ac	88		dey				dey
.a1ad	d0 f7		bne $a1a6			bne _loop		; See if that was the last one to process (first in the list).
.a1af					_done:
.a1af	ad 2a 03	lda $032a			lda Num_OrderV		; Push the number of items
.a1b2	4c dd b7	jmp $b7dd			jmp PushZA
=20					CodeLen	.var *-XtPtr1
=$a1b5					Here1 = *	; remember here
>a19f	14					.byte CodeLen	;patch wh_CodeLength
>a1b5	53 65 61 72 63 68 2d 57		Name0:	.text "Search-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a1bd	6f 72 64 6c 69 73 74
=15					NameLength = *-Name0
=41284					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a1c4	8f					.byte (("Search-Wordlist"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>a1c5	10					.byte WordFlags	;wh_Flags
>a1c6	03					.byte 3	;wh_CodeLength
>a1c7	27					  .byte LinkDisplacement	; offset to previous nt
=$a1c8					XtPtr1 ::= *
=41284					WordListLink ::= Nt0 ; remember the nt of this word for later
.a1c8					Search_WordList:
.a1c8	20 d4 b3	jsr $b3d4			jsr PopA		; Pop wid
.a1cb	48		pha				pha
.a1cc	20 91 bc	jsr $bc91			jsr swl_prepare 	; ( )
.a1cf	68		pla				pla			; get wid
.a1d0	20 ba bc	jsr $bcba			jsr swl_search_wordlist ; tmp1= nt of matching word
.a1d3	f0 11		beq $a1e6			beq _NotFound
.a1d5	20 9b bd	jsr $bd9b			jsr Name_To_Int_T	; ( xt )
.a1d8	a0 81		ldy #$81			ldy #Wh_Flags		; get flags
.a1da	b1 14		lda ($14),y			lda (tmp1),y
.a1dc	29 08		and #$08			and #IM
.a1de	d0 03		bne $a1e3			bne _immediate		; bit set, we're immediate
.a1e0	4c bd b7	jmp $b7bd			jmp True		; We're not immediate, return -1
.a1e3	4c f4 b7	jmp $b7f4	_immediate:	jmp One			; We're immediate, return 1
.a1e6	4c eb b7	jmp $b7eb	_NotFound:	jmp Zero		; ( 0 )
=33					CodeLen	.var *-XtPtr1
=$a1e9					Here1 = *	; remember here
>a1c6	21					.byte CodeLen	;patch wh_CodeLength
>0339					BlockReadV: .word ?	; Vector to block reading routine
>033b					BlockWriteV: .word ?	; Vector to block writing routine
>033d					BuffBlockNumV: .word ?	; Block number current in BlockBuffer
>033f					BuffStatusV: .word ?	; Status of BlockBuffer (bit 0 = used, bit 1 = dirty)
>0341					BlockBuffer: .fill 1024
.a1e9					BlockInit:
.a1e9	a9 00		lda #$00			lda #0
.a1eb	8d 3f 03	sta $033f			sta BuffStatusV
.a1ee	a9 45		lda #$45			lda #<Platform_Block_Read
.a1f0	a0 f1		ldy #$f1			ldy #>Platform_Block_Read
.a1f2	8d 39 03	sta $0339			sta BlockReadV+0
.a1f5	8c 3a 03	sty $033a			sty BlockReadV+1
.a1f8	a9 70		lda #$70			lda #<Platform_Block_Write
.a1fa	a0 f1		ldy #$f1			ldy #>Platform_Block_Write
.a1fc	8d 3b 03	sta $033b			sta BlockWriteV+0
.a1ff	8c 3c 03	sty $033c			sty BlockWriteV+1
.a202	60		rts				rts
>0741					RamDriveV: .word ?	; ptr to RamDrive storage area
=0					io_blk_status = 0
=0					io_blk_action = 0
=0					io_blk_number = 0
=0					io_blk_buffer = 0
>a203	42 6c 6f 63 6b 2d 52 61		Name0:	.text "Block-RamDrive-Init"	;  name of word as a string, ending at wh_NameLastChar
>a20b	6d 44 72 69 76 65 2d 49 6e 69 74
=19					NameLength = *-Name0
=41366					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a216	93					.byte (("Block-RamDrive-Init"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=82					LinkDisplacement = Nt0-WordListLink
>a217	50					.byte WordFlags	;wh_Flags
>a218	03					.byte 3	;wh_CodeLength
>a219	52					  .byte LinkDisplacement	; offset to previous nt
=$a21a					XtPtr1 ::= *
=41366					WordListLink ::= Nt0 ; remember the nt of this word for later
.a21a					Block_RamDrive_Init:
.a21a	a9 0a		lda #$0a			lda #10			; Calculate how many bytes are needed for numblocks blocks
.a21c	20 dd b7	jsr $b7dd			jsr PushZA
.a21f	20 3a cb	jsr $cb3a			jsr LShift
.a222	20 23 ca	jsr $ca23			jsr Here		; ( size addr )
.a225	8d 41 07	sta $0741			sta RamDriveV+0
.a228	8c 42 07	sty $0742			sty RamDriveV+1
.a22b	20 2a cf	jsr $cf2a			jsr Over
.a22e	20 9d c0	jsr $c09d			jsr Allot		; Create ramdrive buffer
.a231	20 6e cf	jsr $cf6e			jsr Swap		; blank the buffer
.a234	20 28 be	jsr $be28			jsr Blank
.a237	a9 4c		lda #$4c			lda #<_read		; set block read vector
.a239	a0 a2		ldy #$a2			ldy #>_read
.a23b	8d 39 03	sta $0339			sta BlockReadV+0
.a23e	8c 3a 03	sty $033a			sty BlockReadV+1
.a241	a9 5c		lda #$5c			lda #<_write		; set block write vector
.a243	a0 a2		ldy #$a2			ldy #>_write
.a245	8d 3b 03	sta $033b			sta BlockWriteV+0
.a248	8c 3c 03	sty $033c			sty BlockWriteV+1
.a24b	60		rts				rts
=50					CodeLen	.var *-XtPtr1
=$a24c					Here1 = *	; remember here
>a218	32					.byte CodeLen	;patch wh_CodeLength
.a24c					_read:
.a24c	20 69 a2	jsr $a269			jsr _addr
.a24f	20 6e cf	jsr $cf6e			jsr Swap
.a252	a9 00		lda #$00			lda #0
.a254	a0 04		ldy #$04			ldy #>1024
.a256	20 ae b7	jsr $b7ae			jsr PushYA
.a259	4c 78 ad	jmp $ad78			jmp Move
.a25c					_write:
.a25c	20 69 a2	jsr $a269			jsr _addr
.a25f	a9 00		lda #$00			lda #0
.a261	a0 04		ldy #$04			ldy #>1024
.a263	20 ae b7	jsr $b7ae			jsr PushYA
.a266	4c 78 ad	jmp $ad78			jmp Move
.a269					_addr:
.a269	a9 0a		lda #$0a			lda #10
.a26b	20 dd b7	jsr $b7dd			jsr PushZA
.a26e	20 3a cb	jsr $cb3a			jsr LShift
.a271	20 83 a2	jsr $a283			jsr RamDrive
.a274	4c 9a cb	jmp $cb9a			jmp Plus
>a277	52 61 6d 44 72 69 76 65		Name0:	.text "RamDrive"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=41471					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a27f	a8					.byte (("RamDrive"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=105					LinkDisplacement = Nt0-WordListLink
>a280	10					.byte WordFlags	;wh_Flags
>a281	03					.byte 3	;wh_CodeLength
>a282	69					  .byte LinkDisplacement	; offset to previous nt
=$a283					XtPtr1 ::= *
=41471					WordListLink ::= Nt0 ; remember the nt of this word for later
.a283	ad 41 07	lda $0741	RamDrive:	lda RamDriveV+0
.a286	ac 42 07	ldy $0742			ldy RamDriveV+1
.a289	4c ae b7	jmp $b7ae			jmp PushYA
=9					CodeLen	.var *-XtPtr1
=$a28c					Here1 = *	; remember here
>a281	09					.byte CodeLen	;patch wh_CodeLength
>a28c	42 75 66 66 53 74 61 74		Name0:	.text "BuffStatus"	;  name of word as a string, ending at wh_NameLastChar
>a294	75 73
=10					NameLength = *-Name0
=41494					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a296	6a					.byte (("BuffStatus"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>a297	10					.byte WordFlags	;wh_Flags
>a298	03					.byte 3	;wh_CodeLength
>a299	17					  .byte LinkDisplacement	; offset to previous nt
=$a29a					XtPtr1 ::= *
=41494					WordListLink ::= Nt0 ; remember the nt of this word for later
.a29a	a0 03		ldy #$03	BuffStatus:	ldy #>BuffStatusV
.a29c	a9 3f		lda #$3f			lda #<BuffStatusV
.a29e	4c ae b7	jmp $b7ae			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a2a1					Here1 = *	; remember here
>a298	07					.byte CodeLen	;patch wh_CodeLength
>a2a1	42 75 66 66 42 6c 6f 63		Name0:	.text "BuffBlockNum"	;  name of word as a string, ending at wh_NameLastChar
>a2a9	6b 4e 75 6d
=12					NameLength = *-Name0
=41517					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2ad	ac					.byte (("BuffBlockNum"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>a2ae	10					.byte WordFlags	;wh_Flags
>a2af	03					.byte 3	;wh_CodeLength
>a2b0	17					  .byte LinkDisplacement	; offset to previous nt
=$a2b1					XtPtr1 ::= *
=41517					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2b1	a0 03		ldy #$03	BuffBlockNum:	ldy #>BuffBlockNumV
.a2b3	a9 3d		lda #$3d			lda #<BuffBlockNumV
.a2b5	4c ae b7	jmp $b7ae			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a2b8					Here1 = *	; remember here
>a2af	07					.byte CodeLen	;patch wh_CodeLength
>a2b8	42 6c 6b 42 75 66 66 65		Name0:	.text "BlkBuffer"	;  name of word as a string, ending at wh_NameLastChar
>a2c0	72
=9					NameLength = *-Name0
=41537					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2c1	49					.byte (("BlkBuffer"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>a2c2	10					.byte WordFlags	;wh_Flags
>a2c3	03					.byte 3	;wh_CodeLength
>a2c4	14					  .byte LinkDisplacement	; offset to previous nt
=$a2c5					XtPtr1 ::= *
=41537					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2c5	a0 03		ldy #$03	BlkBuffer:	ldy #>BlockBuffer
.a2c7	a9 41		lda #$41			lda #<BlockBuffer
.a2c9	4c ae b7	jmp $b7ae			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a2cc					Here1 = *	; remember here
>a2c3	07					.byte CodeLen	;patch wh_CodeLength
>a2cc	53 63 72			Name0:	.text "Scr"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=41551					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2cf	43					.byte (("Scr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a2d0	10					.byte WordFlags	;wh_Flags
>a2d1	03					.byte 3	;wh_CodeLength
>a2d2	0e					  .byte LinkDisplacement	; offset to previous nt
=$a2d3					XtPtr1 ::= *
=41551					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2d3	a0 03		ldy #$03	Scr:		ldy #>ScrV
.a2d5	a9 0e		lda #$0e			lda #<ScrV
.a2d7	4c ae b7	jmp $b7ae			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a2da					Here1 = *	; remember here
>a2d1	07					.byte CodeLen	;patch wh_CodeLength
>a2da	42 6c 6b			Name0:	.text "Blk"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=41565					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2dd	63					.byte (("Blk"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a2de	10					.byte WordFlags	;wh_Flags
>a2df	03					.byte 3	;wh_CodeLength
>a2e0	0e					  .byte LinkDisplacement	; offset to previous nt
=$a2e1					XtPtr1 ::= *
=41565					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2e1	a0 03		ldy #$03	Blk:		ldy #>BlkV
.a2e3	a9 0c		lda #$0c			lda #<BlkV
.a2e5	4c ae b7	jmp $b7ae			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a2e8					Here1 = *	; remember here
>a2df	07					.byte CodeLen	;patch wh_CodeLength
>a2e8	42 6c 6f 63 6b 2d 57 72		Name0:	.text "Block-Write"	;  name of word as a string, ending at wh_NameLastChar
>a2f0	69 74 65
=11					NameLength = *-Name0
=41587					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2f3	ab					.byte (("Block-Write"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a2f4	10					.byte WordFlags	;wh_Flags
>a2f5	03					.byte 3	;wh_CodeLength
>a2f6	16					  .byte LinkDisplacement	; offset to previous nt
=$a2f7					XtPtr1 ::= *
=41587					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2f7	6c 3b 03	jmp ($033b)	Block_Write:	jmp (BlockWriteV)	; Execute the BLOCK-READ-VECTOR
=3					CodeLen	.var *-XtPtr1
=$a2fa					Here1 = *	; remember here
>a2f5	03					.byte CodeLen	;patch wh_CodeLength
>a2fa	42 6c 6f 63 6b 2d 57 72		Name0:	.text "Block-Write-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a302	69 74 65 2d 56 65 63 74 6f 72
=18					NameLength = *-Name0
=41612					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a30c	52					.byte (("Block-Write-Vector"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>a30d	10					.byte WordFlags	;wh_Flags
>a30e	03					.byte 3	;wh_CodeLength
>a30f	19					  .byte LinkDisplacement	; offset to previous nt
=$a310					XtPtr1 ::= *
=41612					WordListLink ::= Nt0 ; remember the nt of this word for later
.a310					Block_Write_Vector:
.a310	a0 03		ldy #$03			ldy #>BlockWriteV
.a312	a9 3b		lda #$3b			lda #<BlockWriteV	; Get the BLOCK-WRITE-VECTOR address
.a314	4c ae b7	jmp $b7ae			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a317					Here1 = *	; remember here
>a30e	07					.byte CodeLen	;patch wh_CodeLength
>a317	42 6c 6f 63 6b 2d 52 65		Name0:	.text "Block-Read"	;  name of word as a string, ending at wh_NameLastChar
>a31f	61 64
=10					NameLength = *-Name0
=41633					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a321	8a					.byte (("Block-Read"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>a322	10					.byte WordFlags	;wh_Flags
>a323	03					.byte 3	;wh_CodeLength
>a324	15					  .byte LinkDisplacement	; offset to previous nt
=$a325					XtPtr1 ::= *
=41633					WordListLink ::= Nt0 ; remember the nt of this word for later
.a325	6c 39 03	jmp ($0339)	Block_Read:	jmp (BlockReadV)	; Execute the BLOCK-READ-VECTOR
=3					CodeLen	.var *-XtPtr1
=$a328					Here1 = *	; remember here
>a323	03					.byte CodeLen	;patch wh_CodeLength
>a328	42 6c 6f 63 6b 2d 52 65		Name0:	.text "Block-Read-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a330	61 64 2d 56 65 63 74 6f 72
=17					NameLength = *-Name0
=41657					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a339	51					.byte (("Block-Read-Vector"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>a33a	10					.byte WordFlags	;wh_Flags
>a33b	03					.byte 3	;wh_CodeLength
>a33c	18					  .byte LinkDisplacement	; offset to previous nt
=$a33d					XtPtr1 ::= *
=41657					WordListLink ::= Nt0 ; remember the nt of this word for later
.a33d					Block_Read_Vector:
.a33d	a0 03		ldy #$03			ldy #>BlockReadV
.a33f	a9 39		lda #$39			lda #<BlockReadV	; Get the BLOCK-READ-VECTOR address
.a341	4c ae b7	jmp $b7ae			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a344					Here1 = *	; remember here
>a33b	07					.byte CodeLen	;patch wh_CodeLength
>a344	53 61 76 65 2d 42 75 66		Name0:	.text "Save-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a34c	66 65 72 73
=12					NameLength = *-Name0
=41680					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a350	6c					.byte (("Save-Buffers"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>a351	00					.byte WordFlags	;wh_Flags
>a352	03					.byte 3	;wh_CodeLength
>a353	17					  .byte LinkDisplacement	; offset to previous nt
=$a354					XtPtr1 ::= *
=41680					WordListLink ::= Nt0 ; remember the nt of this word for later
.a354					Save_Buffers:
.a354	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a357	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a359	d0 11		bne $a36c			bne _done	; Either not used or not dirty = done!
.a35b	20 c5 a2	jsr $a2c5			jsr BlkBuffer
.a35e	20 b1 a2	jsr $a2b1			jsr BuffBlockNum
.a361	20 93 ce	jsr $ce93			jsr Fetch
.a364	20 f7 a2	jsr $a2f7			jsr Block_Write
.a367	a9 01		lda #$01			lda #1
.a369	8d 3f 03	sta $033f			sta BuffStatusV+0
.a36c					_done:
=24					CodeLen	.var *-XtPtr1
=$a36c					Here1 = *	; remember here
>a352	18					.byte CodeLen	;patch wh_CodeLength
.a36c	60		rts				rts
>a36d	42 6c 6f 63 6b			Name0:	.text "Block"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=41714					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a372	65					.byte (("Block"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>a373	00					.byte WordFlags	;wh_Flags
>a374	03					.byte 3	;wh_CodeLength
>a375	22					  .byte LinkDisplacement	; offset to previous nt
=$a376					XtPtr1 ::= *
=41714					WordListLink ::= Nt0 ; remember the nt of this word for later
.a376					Block:
.a376	ad 3d 03	lda $033d			lda BuffBlockNumV+0	; check the LSB
.a379	d5 24		cmp $24,x			cmp DStack+0,x
.a37b	d0 0e		bne $a38b			bne _not_in_buffer
.a37d	ad 3e 03	lda $033e			lda BuffBlockNumV+1	; check the MSB
.a380	d5 25		cmp $25,x			cmp DStack+1,x
.a382	d0 07		bne $a38b			bne _not_in_buffer
.a384	ad 3f 03	lda $033f			lda BuffStatusV+0
.a387	29 01		and #$01			and #1		; Check the in-use flag (bit 0)
.a389	d0 2d		bne $a3b8			bne _done	; It's already in the buffer and in use.
.a38b					_not_in_buffer:
.a38b	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a38e	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a390	d0 0c		bne $a39e			bne _buffer_available ; Unused or not dirty = available
.a392	20 c5 a2	jsr $a2c5			jsr BlkBuffer
.a395	20 b1 a2	jsr $a2b1			jsr BuffBlockNum
.a398	20 93 ce	jsr $ce93			jsr Fetch
.a39b	20 f7 a2	jsr $a2f7			jsr Block_Write
.a39e					_buffer_available:
.a39e	b5 24		lda $24,x			lda DStack+0,x
.a3a0	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a3a3	b5 25		lda $25,x			lda DStack+1,x
.a3a5	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a3a8	20 c5 a2	jsr $a2c5			jsr BlkBuffer
.a3ab	20 6e cf	jsr $cf6e			jsr Swap
.a3ae	20 25 a3	jsr $a325			jsr Block_Read
.a3b1	a9 01		lda #$01			lda #1
.a3b3	8d 3f 03	sta $033f			sta BuffStatusV+0
.a3b6	ca		dex				dex
.a3b7	ca		dex				dex
.a3b8					_done:
.a3b8	a9 41		lda #$41			lda #<BlockBuffer
.a3ba	95 24		sta $24,x			sta DStack+0,x
.a3bc	a9 03		lda #$03			lda #>BlockBuffer
.a3be	95 25		sta $25,x			sta DStack+1,x
=74					CodeLen	.var *-XtPtr1
=$a3c0					Here1 = *	; remember here
>a374	4a					.byte CodeLen	;patch wh_CodeLength
.a3c0	60		rts				rts
>a3c1	55 70 64 61 74 65		Name0:	.text "Update"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=41799					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a3c7	a6					.byte (("Update"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=85					LinkDisplacement = Nt0-WordListLink
>a3c8	00					.byte WordFlags	;wh_Flags
>a3c9	03					.byte 3	;wh_CodeLength
>a3ca	55					  .byte LinkDisplacement	; offset to previous nt
=$a3cb					XtPtr1 ::= *
=41799					WordListLink ::= Nt0 ; remember the nt of this word for later
.a3cb					Update:
.a3cb	ad 3f 03	lda $033f			lda BuffStatusV+0
.a3ce	09 02		ora #$02			ora #2		; Turn on dirty flag (bit 2)
.a3d0	8d 3f 03	sta $033f			sta BuffStatusV+0
=8					CodeLen	.var *-XtPtr1
=$a3d3					Here1 = *	; remember here
>a3c9	08					.byte CodeLen	;patch wh_CodeLength
.a3d3	60		rts				rts
>a3d4	42 75 66 66 65 72		Name0:	.text "Buffer"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=41818					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a3da	46					.byte (("Buffer"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>a3db	10					.byte WordFlags	;wh_Flags
>a3dc	03					.byte 3	;wh_CodeLength
>a3dd	13					  .byte LinkDisplacement	; offset to previous nt
=$a3de					XtPtr1 ::= *
=41818					WordListLink ::= Nt0 ; remember the nt of this word for later
.a3de					Buffer:
.a3de	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a3e1	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a3e3	d0 0c		bne $a3f1			bne _buffer_available ; Unused or not dirty = available
.a3e5	20 c5 a2	jsr $a2c5			jsr BlkBuffer
.a3e8	20 b1 a2	jsr $a2b1			jsr BuffBlockNum
.a3eb	20 93 ce	jsr $ce93			jsr Fetch
.a3ee	20 f7 a2	jsr $a2f7			jsr Block_Write
.a3f1					_buffer_available:
.a3f1	b5 24		lda $24,x			lda DStack+0,x
.a3f3	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a3f6	b5 25		lda $25,x			lda DStack+1,x
.a3f8	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a3fb	a9 01		lda #$01			lda #1
.a3fd	8d 3f 03	sta $033f			sta BuffStatusV+0
.a400					_done:
.a400	a9 41		lda #$41			lda #<BlockBuffer
.a402	95 24		sta $24,x			sta DStack+0,x
.a404	a9 03		lda #$03			lda #>BlockBuffer
.a406	95 25		sta $25,x			sta DStack+1,x
=42					CodeLen	.var *-XtPtr1
=$a408					Here1 = *	; remember here
>a3dc	2a					.byte CodeLen	;patch wh_CodeLength
.a408	60		rts				rts
>a409	45 6d 70 74 79 2d 42 75		Name0:	.text "Empty-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a411	66 66 65 72 73
=13					NameLength = *-Name0
=41878					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a416	6d					.byte (("Empty-Buffers"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=60					LinkDisplacement = Nt0-WordListLink
>a417	10					.byte WordFlags	;wh_Flags
>a418	03					.byte 3	;wh_CodeLength
>a419	3c					  .byte LinkDisplacement	; offset to previous nt
=$a41a					XtPtr1 ::= *
=41878					WordListLink ::= Nt0 ; remember the nt of this word for later
.a41a	a9 00		lda #$00	Empty_Buffers:	lda #0		; Set the buffer status to empty.
.a41c	8d 3f 03	sta $033f			sta BuffStatusV+0 ; Only LSB is used.
=5					CodeLen	.var *-XtPtr1
=$a41f					Here1 = *	; remember here
>a418	05					.byte CodeLen	;patch wh_CodeLength
.a41f	60		rts				rts
>a420	46 6c 75 73 68			Name0:	.text "Flush"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=41893					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a425	05					.byte (("Flush"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>a426	10					.byte WordFlags	;wh_Flags
>a427	03					.byte 3	;wh_CodeLength
>a428	0f					  .byte LinkDisplacement	; offset to previous nt
=$a429					XtPtr1 ::= *
=41893					WordListLink ::= Nt0 ; remember the nt of this word for later
.a429	20 54 a3	jsr $a354	Flush:		jsr Save_Buffers
.a42c	4c 1a a4	jmp $a41a			jmp Empty_Buffers
=6					CodeLen	.var *-XtPtr1
=$a42f					Here1 = *	; remember here
>a427	06					.byte CodeLen	;patch wh_CodeLength
>a42f	4c 6f 61 64			Name0:	.text "Load"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=41907					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a433	84					.byte (("Load"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a434	40					.byte WordFlags	;wh_Flags
>a435	03					.byte 3	;wh_CodeLength
>a436	0e					  .byte LinkDisplacement	; offset to previous nt
=$a437					XtPtr1 ::= *
=41907					WordListLink ::= Nt0 ; remember the nt of this word for later
.a437					Load:
.a437	20 18 b4	jsr $b418			jsr underflow_1
.a43a	ad 0d 03	lda $030d			lda BlkV+1		; Save the current value of BLK on the return stack.
.a43d	48		pha				pha
.a43e	ad 0c 03	lda $030c			lda BlkV+0
.a441	48		pha				pha
.a442	b5 24		lda $24,x			lda DStack+0,x		; Set BLK to the given block/screen number.
.a444	8d 0c 03	sta $030c			sta BlkV+0
.a447	b5 25		lda $25,x			lda DStack+1,x
.a449	8d 0d 03	sta $030d			sta BlkV+1
.a44c	20 76 a3	jsr $a376			jsr Block		; Load that block into a buffer
.a44f	a9 00		lda #$00			lda #<1024		; block length.
.a451	a0 04		ldy #$04			ldy #>1024
.a453	20 ae b7	jsr $b7ae			jsr PushYA
.a456	38		sec				sec		; Set a flag to not zero BLK
.a457	20 ff af	jsr $afff			jsr load_evaluate
.a45a	68		pla				pla
.a45b	8d 0c 03	sta $030c			sta BlkV+0
.a45e	68		pla				pla
.a45f	8d 0d 03	sta $030d			sta BlkV+1
.a462	0d 0c 03	ora $030c			ora BlkV+0
.a465	f0 13		beq $a47a			beq _done
.a467	ad 0c 03	lda $030c			lda BlkV+0
.a46a	ac 0d 03	ldy $030d			ldy BlkV+1
.a46d	20 ae b7	jsr $b7ae			jsr PushYA
.a470	20 76 a3	jsr $a376			jsr Block
.a473	20 ef b3	jsr $b3ef			jsr PopYA	; Pop the buffer address.
.a476	85 04		sta $04				sta cib+0
.a478	84 05		sty $05				sty cib+1
.a47a					_done:
=67					CodeLen	.var *-XtPtr1
=$a47a					Here1 = *	; remember here
>a435	43					.byte CodeLen	;patch wh_CodeLength
.a47a	60		rts				rts
>a47b	54 68 72 75			Name0:	.text "Thru"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=41983					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a47f	a4					.byte (("Thru"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=76					LinkDisplacement = Nt0-WordListLink
>a480	50					.byte WordFlags	;wh_Flags
>a481	03					.byte 3	;wh_CodeLength
>a482	4c					  .byte LinkDisplacement	; offset to previous nt
=$a483					XtPtr1 ::= *
=41983					WordListLink ::= Nt0 ; remember the nt of this word for later
.a483					Thru:
.a483	20 2c b4	jsr $b42c			jsr underflow_2
.a486	20 db ce	jsr $cedb			jsr To_R
.a489					_loop:
.a489	b5 25		lda $25,x			lda DStack+1,x		; copy to return stack
.a48b	48		pha				pha
.a48c	b5 24		lda $24,x			lda DStack+0,x
.a48e	48		pha				pha
.a48f	20 37 a4	jsr $a437			jsr Load		; Load this screen.
.a492	20 f9 ce	jsr $cef9			jsr R_From		; Get the screen # we just loaded.
.a495	20 55 ca	jsr $ca55			jsr One_plus		; increment
.a498	86 14		stx $14				stx tmp1
.a49a	ba		tsx				tsx
.a49b	8a		txa				txa
.a49c	a8		tay				tay
.a49d	a6 14		ldx $14				ldx tmp1
.a49f	b9 01 01	lda $0101,y			lda RStack+1,y
.a4a2	d5 24		cmp $24,x			cmp DStack+0,x
.a4a4	b9 02 01	lda $0102,y			lda RStack+2,y
.a4a7	f5 25		sbc $25,x			sbc DStack+1,x
.a4a9	b0 de		bcs $a489			bcs _loop
.a4ab	e8		inx				inx			; Drop index
.a4ac	e8		inx				inx
.a4ad	68		pla				pla			; RDrop limit
.a4ae	68		pla				pla
=44					CodeLen	.var *-XtPtr1
=$a4af					Here1 = *	; remember here
>a481	2c					.byte CodeLen	;patch wh_CodeLength
.a4af	60		rts				rts
>a4b0	4c 69 73 74			Name0:	.text "List"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42036					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a4b4	84					.byte (("List"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>a4b5	10					.byte WordFlags	;wh_Flags
>a4b6	03					.byte 3	;wh_CodeLength
>a4b7	35					  .byte LinkDisplacement	; offset to previous nt
=$a4b8					XtPtr1 ::= *
=42036					WordListLink ::= Nt0 ; remember the nt of this word for later
.a4b8	20 ef b3	jsr $b3ef	List:		jsr PopYA	; Save the screen number
.a4bb	8d 0e 03	sta $030e			sta ScrV+0
.a4be	8c 0f 03	sty $030f			sty ScrV+1
.a4c1					ListScr:
.a4c1	20 d3 a2	jsr $a2d3			jsr Scr
.a4c4	20 93 ce	jsr $ce93			jsr Fetch
.a4c7	20 76 a3	jsr $a376			jsr Block	; Get the current screen contents.
.a4ca	20 69 ab	jsr $ab69			jsr CR
.a4cd	20 a2 b8	jsr $b8a2			jsr SLiteral_Runtime
.a4d0	4c db a4	jmp $a4db			  jmp +				; for SLiteral_Runtime
>a4d3	53 63 72 65 65 6e 20 23				  .text "Screen #"		; for SLiteral_Runtime
.a4db					+
.a4db	20 d3 cd	jsr $cdd3			jsr Type
.a4de	20 d3 a2	jsr $a2d3			jsr Scr		; print screen number
.a4e1	20 93 ce	jsr $ce93			jsr Fetch
.a4e4	a9 04		lda #$04			lda #4		;    in 4 positions
.a4e6	20 2d cc	jsr $cc2d			jsr U_Dot_R_A
.a4e9	a9 00		lda #$00			lda #0			; line #
.a4eb					_line_loop:
.a4eb	48		pha				pha
.a4ec	20 69 ab	jsr $ab69			jsr CR
.a4ef	68		pla				pla		; Print the line number
.a4f0	48		pha				pha
.a4f1	20 dd b7	jsr $b7dd			jsr PushZA
.a4f4	a9 02		lda #$02			lda #2		;   in 2 positions
.a4f6	20 2d cc	jsr $cc2d			jsr U_Dot_R_A
.a4f9	20 c7 cd	jsr $cdc7			jsr Space
.a4fc	20 51 cf	jsr $cf51			jsr Dup		; Print one line using the address on the stack.
.a4ff	a9 40		lda #$40			lda #64
.a501	20 dd b7	jsr $b7dd			jsr PushZA
.a504	20 d3 cd	jsr $cdd3			jsr Type
.a507	a9 40		lda #$40			lda #64		; move address to the next line.
.a509	20 07 ca	jsr $ca07			jsr Plus_A
.a50c	68		pla				pla		; Increment the line number
.a50d	18		clc				clc
.a50e	69 01		adc #$01			adc #1
.a510	c9 10		cmp #$10			cmp #16		; See if we are done.
.a512	d0 d7		bne $a4eb			bne _line_loop
.a514	e8		inx				inx		; Drop the address
.a515	e8		inx				inx
.a516	4c 69 ab	jmp $ab69			jmp CR
=97					CodeLen	.var *-XtPtr1
=$a519					Here1 = *	; remember here
>a4b6	61					.byte CodeLen	;patch wh_CodeLength
>a519	44 65 66 65 72			Name0:	.text "Defer"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42142					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a51e	45					.byte (("Defer"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=106					LinkDisplacement = Nt0-WordListLink
>a51f	10					.byte WordFlags	;wh_Flags
>a520	03					.byte 3	;wh_CodeLength
>a521	6a					  .byte LinkDisplacement	; offset to previous nt
=$a522					XtPtr1 ::= *
=42142					WordListLink ::= Nt0 ; remember the nt of this word for later
.a522					Defer:
.a522	20 f6 c0	jsr $c0f6			jsr Header_Comma	; compile word header
.a525	a9 2f		lda #$2f			lda #<_undefined	; compile "jmp _undefined" (patched later)
.a527	a0 a5		ldy #$a5			ldy #>_undefined
.a529	20 32 cd	jsr $cd32			jsr Jmp_Comma_YA
.a52c	4c ca bb	jmp $bbca			jmp adjust_z		; set word length
=13					CodeLen	.var *-XtPtr1
=$a52f					Here1 = *	; remember here
>a520	0d					.byte CodeLen	;patch wh_CodeLength
.a52f					_undefined:
.a52f	a9 6a		lda #$6a			lda #$100+err_Defer	; throw exception
.a531	4c 74 b4	jmp $b474			jmp ThrowA
>a534	44 65 66 65 72 21		Name0:	.text "Defer!"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=42170					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a53a	26					.byte (("Defer!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>a53b	10					.byte WordFlags	;wh_Flags
>a53c	03					.byte 3	;wh_CodeLength
>a53d	1c					  .byte LinkDisplacement	; offset to previous nt
=$a53e					XtPtr1 ::= *
=42170					WordListLink ::= Nt0 ; remember the nt of this word for later
.a53e	20 ef b3	jsr $b3ef	Defer_Store:	jsr PopYA
.a541	85 14		sta $14		Defer_Store_YA:	sta tmp1+0
.a543	84 15		sty $15				sty tmp1+1
.a545	b5 24		lda $24,x			lda DStack+0,x		; DEFERs JMP abs operand= xt2
.a547	a0 01		ldy #$01			ldy #1
.a549	91 14		sta ($14),y			sta (tmp1),y
.a54b	b5 25		lda $25,x			lda DStack+1,x
.a54d	c8		iny				iny
.a54e	91 14		sta ($14),y			sta (tmp1),y
.a550	4c 8a cf	jmp $cf8a			jmp Drop		; Drop xt2
=21					CodeLen	.var *-XtPtr1
=$a553					Here1 = *	; remember here
>a53c	15					.byte CodeLen	;patch wh_CodeLength
>a553	44 65 66 65 72 40		Name0:	.text "Defer@"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=42201					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a559	06					.byte (("Defer@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>a55a	10					.byte WordFlags	;wh_Flags
>a55b	03					.byte 3	;wh_CodeLength
>a55c	1f					  .byte LinkDisplacement	; offset to previous nt
=$a55d					XtPtr1 ::= *
=42201					WordListLink ::= Nt0 ; remember the nt of this word for later
.a55d	20 ef b3	jsr $b3ef	Defer_Fetch:	jsr PopYA	; pop xt1, check underflow
.a560	85 14		sta $14		Defer_Fetch_YA:	sta tmp1+0
.a562	84 15		sty $15				sty tmp1+1
.a564	ca		dex				dex		; push DEFERs JMP abs operand
.a565	ca		dex				dex
.a566	a0 01		ldy #$01			ldy #1
.a568	b1 14		lda ($14),y			lda (tmp1),y
.a56a	95 24		sta $24,x			sta DStack+0,x
.a56c	c8		iny				iny
.a56d	b1 14		lda ($14),y			lda (tmp1),y
.a56f	95 25		sta $25,x			sta DStack+1,x
.a571	60		rts				rts
=21					CodeLen	.var *-XtPtr1
=$a572					Here1 = *	; remember here
>a55b	15					.byte CodeLen	;patch wh_CodeLength
>a572	49 73				Name0:	.text "Is"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=42228					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a574	62					.byte (("Is"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>a575	18					.byte WordFlags	;wh_Flags
>a576	03					.byte 3	;wh_CodeLength
>a577	1b					  .byte LinkDisplacement	; offset to previous nt
=$a578					XtPtr1 ::= *
=42228					WordListLink ::= Nt0 ; remember the nt of this word for later
.a578					Is:
.a578	20 30 bc	jsr $bc30			jsr Tick		; get xt of "name"
.a57b	a5 0a		lda $0a				lda state		; Check STATE
.a57d	f0 bf		beq $a53e			beq Defer_Store		; interpreting, put xt in the DEFER word
.a57f					_compiling:
.a57f	20 95 b7	jsr $b795			jsr ldya_immed_comma	; compile LDY #; LDA # of the xt of "name"
.a582	a0 a5		ldy #$a5			ldy #>Defer_Store_YA	; Postpone DEFER! by compiling a JSR to it.
.a584	a9 41		lda #$41			lda #<Defer_Store_YA
.a586	4c 1c cd	jmp $cd1c			jmp Jsr_Comma_YA
=17					CodeLen	.var *-XtPtr1
=$a589					Here1 = *	; remember here
>a576	11					.byte CodeLen	;patch wh_CodeLength
>a589	41 63 74 69 6f 6e 2d 4f		Name0:	.text "Action-Of"	;  name of word as a string, ending at wh_NameLastChar
>a591	66
=9					NameLength = *-Name0
=42258					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a592	c9					.byte (("Action-Of"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>a593	18					.byte WordFlags	;wh_Flags
>a594	03					.byte 3	;wh_CodeLength
>a595	1e					  .byte LinkDisplacement	; offset to previous nt
=$a596					XtPtr1 ::= *
=42258					WordListLink ::= Nt0 ; remember the nt of this word for later
.a596					Action_Of:
.a596	20 30 bc	jsr $bc30			jsr Tick		; get xt of "name"
.a599	a5 0a		lda $0a				lda state		; Check STATE
.a59b	f0 c0		beq $a55d			beq Defer_Fetch		; interpreting, get xt in the DEFER word
.a59d					_compiling:
.a59d	20 95 b7	jsr $b795			jsr ldya_immed_comma	; compile LDY #; LDA # of the xt of "name"
.a5a0	a0 a5		ldy #$a5			ldy #>Defer_Fetch_YA	; Postpone DEFER@ by compiling a JSR to it.
.a5a2	a9 60		lda #$60			lda #<Defer_Fetch_YA
.a5a4	4c 1c cd	jmp $cd1c			jmp Jsr_Comma_YA
=17					CodeLen	.var *-XtPtr1
=$a5a7					Here1 = *	; remember here
>a594	11					.byte CodeLen	;patch wh_CodeLength
>a5a7	55 73 65 72 41 64 64 72		Name0:	.text "UserAddr"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=42287					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5af	48					.byte (("UserAddr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>a5b0	10					.byte WordFlags	;wh_Flags
>a5b1	03					.byte 3	;wh_CodeLength
>a5b2	1d					  .byte LinkDisplacement	; offset to previous nt
=$a5b3					XtPtr1 ::= *
=42287					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5b3	a0 02		ldy #$02	UserAddr:	ldy #>User0
.a5b5	a9 ff		lda #$ff			lda #<User0
.a5b7	4c ae b7	jmp $b7ae			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a5ba					Here1 = *	; remember here
>a5b1	07					.byte CodeLen	;patch wh_CodeLength
>a5ba	42 75 66 66 65 72 3a		Name0:	.text "Buffer:"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=42305					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5c1	47					.byte (("Buffer:"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>a5c2	10					.byte WordFlags	;wh_Flags
>a5c3	03					.byte 3	;wh_CodeLength
>a5c4	12					  .byte LinkDisplacement	; offset to previous nt
=$a5c5					XtPtr1 ::= *
=42305					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5c5	20 a4 c1	jsr $c1a4	Buffer_Colon:	jsr Create
.a5c8	4c 9d c0	jmp $c09d			jmp Allot
=6					CodeLen	.var *-XtPtr1
=$a5cb					Here1 = *	; remember here
>a5c3	06					.byte CodeLen	;patch wh_CodeLength
>a5cb	43 61 73 65			Name0:	.text "Case"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42319					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5cf	a4					.byte (("Case"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a5d0	1c					.byte WordFlags	;wh_Flags
>a5d1	03					.byte 3	;wh_CodeLength
>a5d2	0e					  .byte LinkDisplacement	; offset to previous nt
=$a5d3					XtPtr1 ::= *
=42319					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5d3					Case:
.a5d3	4c eb b7	jmp $b7eb			jmp Zero	; init jmp fixup chain
=3					CodeLen	.var *-XtPtr1
=$a5d6					Here1 = *	; remember here
>a5d1	03					.byte CodeLen	;patch wh_CodeLength
>a5d6	45 6e 64 43 61 73 65		Name0:	.text "EndCase"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=42333					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5dd	a7					.byte (("EndCase"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a5de	1c					.byte WordFlags	;wh_Flags
>a5df	03					.byte 3	;wh_CodeLength
>a5e0	0e					  .byte LinkDisplacement	; offset to previous nt
=$a5e1					XtPtr1 ::= *
=42333					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5e1					EndCase:
.a5e1	20 0c cd	jsr $cd0c			jsr Drop_Comma
.a5e4					_loop:
.a5e4	b5 25		lda $25,x			lda DStack+1,x	; while addr fixup entries left
.a5e6	f0 06		beq $a5ee			beq _done
.a5e8	20 63 a6	jsr $a663			jsr Then	;   fixup another one
.a5eb	4c e4 a5	jmp $a5e4			jmp _loop
.a5ee					_done:
.a5ee	e8		inx				inx		; Drop the 0
.a5ef	e8		inx				inx
=15					CodeLen	.var *-XtPtr1
=$a5f0					Here1 = *	; remember here
>a5df	0f					.byte CodeLen	;patch wh_CodeLength
.a5f0	60		rts				rts
>a5f1	4f 66				Name0:	.text "Of"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=42355					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5f3	c2					.byte (("Of"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a5f4	1c					.byte WordFlags	;wh_Flags
>a5f5	03					.byte 3	;wh_CodeLength
>a5f6	16					  .byte LinkDisplacement	; offset to previous nt
=$a5f7					XtPtr1 ::= *
=42355					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5f7					Of:
.a5f7	a0 a6		ldy #$a6			ldy #>_runtime		; Check if value is equal to this case.
.a5f9	a9 0c		lda #$0c			lda #<_runtime
.a5fb	20 1c cd	jsr $cd1c			jsr Jsr_Comma_YA
.a5fe	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a600	20 e2 cc	jsr $cce2			jsr C_Comma_A
.a603	20 23 ca	jsr $ca23			jsr Here		; Put the origination address on the stack for else/then
.a606	20 eb b7	jsr $b7eb			jsr Zero
.a609	4c f6 cc	jmp $ccf6			jmp Comma
=21					CodeLen	.var *-XtPtr1
=$a60c					Here1 = *	; remember here
>a5f5	15					.byte CodeLen	;patch wh_CodeLength
.a60c					_runtime:
.a60c	e8		inx				inx		; Drop x2
.a60d	e8		inx				inx
.a60e	b5 22		lda $22,x			lda DStack-2,x	; compare x1 with x2
.a610	d5 24		cmp $24,x			cmp DStack+0,x
.a612	d0 06		bne $a61a			bne _NotEq
.a614	b5 23		lda $23,x			lda DStack-1,x
.a616	d5 25		cmp $25,x			cmp DStack+1,x
.a618	f0 31		beq $a64b			beq zbranch_run2 ; Drop x1 & return to after the jmp abs
.a61a	60		rts		_NotEq:		rts		; return to the jmp abs to next test
>a61b	45 6e 64 4f 66			Name0:	.text "EndOf"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42400					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a620	c5					.byte (("EndOf"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>a621	1c					.byte WordFlags	;wh_Flags
>a622	03					.byte 3	;wh_CodeLength
>a623	2d					  .byte LinkDisplacement	; offset to previous nt
=$a624					XtPtr1 ::= *
=42400					WordListLink ::= Nt0 ; remember the nt of this word for later
.a624	4c 74 a6	jmp $a674	EndOf:		jmp Else
=3					CodeLen	.var *-XtPtr1
=$a627					Here1 = *	; remember here
>a622	03					.byte CodeLen	;patch wh_CodeLength
>a627	49 66				Name0:	.text "If"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=42409					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a629	c2					.byte (("If"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>a62a	1c					.byte WordFlags	;wh_Flags
>a62b	03					.byte 3	;wh_CodeLength
>a62c	09					  .byte LinkDisplacement	; offset to previous nt
=$a62d					XtPtr1 ::= *
=42409					WordListLink ::= Nt0 ; remember the nt of this word for later
.a62d					If:
.a62d	20 3e a6	jsr $a63e	If3:		jsr zbranch_jsr_comma	; Compile a 0BRANCH
.a630					zbranch_jmp0_comma:
.a630	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a632	20 e2 cc	jsr $cce2			jsr C_Comma_A
.a635	20 23 ca	jsr $ca23			jsr Here		; save ptr to address for else/then
.a638	a9 00		lda #$00			lda #0			; Stuff zero in for the branch address right now.
.a63a	a8		tay				tay			; THEN or ELSE will fix it later.
.a63b	4c f9 cc	jmp $ccf9			jmp Comma_YA
=17					CodeLen	.var *-XtPtr1
=$a63e					Here1 = *	; remember here
>a62b	11					.byte CodeLen	;patch wh_CodeLength
=$cd2f					zbranch_jmp_comma = Jmp_Comma		; compile jmp abs
.a63e					zbranch_jsr_comma:
.a63e	a0 a6		ldy #$a6			ldy #>_runtime
.a640	a9 45		lda #$45			lda #<_runtime
.a642	4c 1c cd	jmp $cd1c			jmp Jsr_Comma_YA
.a645					_runtime:
.a645	b5 24		lda $24,x			lda DStack+0,x		;flag is false?
.a647	15 25		ora $25,x			ora DStack+1,x
.a649	f0 0d		beq $a658			beq zbranch_run_done
.a64b	18		clc		zbranch_run2:	clc			; move RTS addr over the next jmp abs.
.a64c	68		pla				pla
.a64d	69 03		adc #$03			adc #3
.a64f	90 06		bcc $a657			bcc +
.a651	a8		tay				tay
.a652	68		pla				pla
.a653	69 00		adc #$00			adc #0
.a655	48		pha				pha
.a656	98		tya				tya
.a657	48		pha		+		pha
.a658					zbranch_run_done:
.a658	e8		inx				inx			; Drop f
.a659	e8		inx				inx
.a65a	60		rts				rts
>a65b	54 68 65 6e			Name0:	.text "Then"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42463					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a65f	c4					.byte (("Then"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=54					LinkDisplacement = Nt0-WordListLink
>a660	1c					.byte WordFlags	;wh_Flags
>a661	03					.byte 3	;wh_CodeLength
>a662	36					  .byte LinkDisplacement	; offset to previous nt
=$a663					XtPtr1 ::= *
=42463					WordListLink ::= Nt0 ; remember the nt of this word for later
.a663					Then:
.a663	20 23 ca	jsr $ca23			jsr Here
.a666	20 6e cf	jsr $cf6e			jsr Swap
.a669	4c ac ce	jmp $ceac			jmp Store
=9					CodeLen	.var *-XtPtr1
=$a66c					Here1 = *	; remember here
>a661	09					.byte CodeLen	;patch wh_CodeLength
>a66c	45 6c 73 65			Name0:	.text "Else"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42480					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a670	a4					.byte (("Else"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>a671	1c					.byte WordFlags	;wh_Flags
>a672	03					.byte 3	;wh_CodeLength
>a673	11					  .byte LinkDisplacement	; offset to previous nt
=$a674					XtPtr1 ::= *
=42480					WordListLink ::= Nt0 ; remember the nt of this word for later
.a674					Else:
.a674	20 30 a6	jsr $a630			jsr zbranch_jmp0_comma	; compile jmp 0, push addr of addr
.a677	20 23 ca	jsr $ca23			jsr Here
.a67a	20 4c ce	jsr $ce4c			jsr Rot
.a67d	4c ac ce	jmp $ceac			jmp Store
=12					CodeLen	.var *-XtPtr1
=$a680					Here1 = *	; remember here
>a672	0c					.byte CodeLen	;patch wh_CodeLength
>a680	42 65 67 69 6e			Name0:	.text "Begin"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42501					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a685	c5					.byte (("Begin"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= NN+CO+IM	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>a686	1c					.byte WordFlags	;wh_Flags
>a687	03					.byte 3	;wh_CodeLength
>a688	15					  .byte LinkDisplacement	; offset to previous nt
=$a689					XtPtr1 ::= *
=42501					WordListLink ::= Nt0 ; remember the nt of this word for later
.a689	20 23 ca	jsr $ca23	Begin:		jsr Here	; remember the loop starting location
.a68c	a9 89		lda #$89			lda #<Begin	; pairing marker
.a68e	4c dd b7	jmp $b7dd			jmp PushZA
=8					CodeLen	.var *-XtPtr1
=$a691					Here1 = *	; remember here
>a687	08					.byte CodeLen	;patch wh_CodeLength
>a691	41 67 61 69 6e			Name0:	.text "Again"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42518					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a696	c5					.byte (("Again"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=92					WordFlags ::= NN+CO+IM+UF	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>a697	5c					.byte WordFlags	;wh_Flags
>a698	03					.byte 3	;wh_CodeLength
>a699	11					  .byte LinkDisplacement	; offset to previous nt
=$a69a					XtPtr1 ::= *
=42518					WordListLink ::= Nt0 ; remember the nt of this word for later
.a69a	20 2c b4	jsr $b42c	Again:		jsr underflow_2
.a69d	a9 89		lda #$89			lda #<Begin	; check pairing
.a69f	20 02 b2	jsr $b202			jsr QPairCtlA
.a6a2	4c 2f cd	jmp $cd2f			jmp Jmp_Comma	; Compile a jmp abs.
=11					CodeLen	.var *-XtPtr1
=$a6a5					Here1 = *	; remember here
>a698	0b					.byte CodeLen	;patch wh_CodeLength
>a6a5	55 6e 74 69 6c			Name0:	.text "Until"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42538					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6aa	85					.byte (("Until"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>a6ab	1c					.byte WordFlags	;wh_Flags
>a6ac	03					.byte 3	;wh_CodeLength
>a6ad	14					  .byte LinkDisplacement	; offset to previous nt
=$a6ae					XtPtr1 ::= *
=42538					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6ae	a9 89		lda #$89	Until:		lda #<Begin		; check pairing
.a6b0	20 02 b2	jsr $b202			jsr QPairCtlA
.a6b3	4c ea a6	jmp $a6ea			jmp ZBranch_Comma	; The address to loop back to is on the stack.
=8					CodeLen	.var *-XtPtr1
=$a6b6					Here1 = *	; remember here
>a6ac	08					.byte CodeLen	;patch wh_CodeLength
>a6b6	57 68 69 6c 65			Name0:	.text "While"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42555					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6bb	a5					.byte (("While"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>a6bc	1c					.byte WordFlags	;wh_Flags
>a6bd	03					.byte 3	;wh_CodeLength
>a6be	11					  .byte LinkDisplacement	; offset to previous nt
=$a6bf					XtPtr1 ::= *
=42555					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6bf	a9 89		lda #$89	While:		lda #<Begin	; check pairing
.a6c1	20 02 b2	jsr $b202			jsr QPairCtlA
.a6c4	20 2d a6	jsr $a62d			jsr If3		; Compile a 0branch & jmp, push addr of addr
.a6c7	20 6e cf	jsr $cf6e			jsr Swap	; Swap the two addresses on the stack.
.a6ca	a9 89		lda #$89			lda #<Begin	; pairing marker
.a6cc	4c dd b7	jmp $b7dd			jmp PushZA
=16					CodeLen	.var *-XtPtr1
=$a6cf					Here1 = *	; remember here
>a6bd	10					.byte CodeLen	;patch wh_CodeLength
>a6cf	52 65 70 65 61 74		Name0:	.text "Repeat"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=42581					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6d5	86					.byte (("Repeat"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>a6d6	1c					.byte WordFlags	;wh_Flags
>a6d7	03					.byte 3	;wh_CodeLength
>a6d8	1a					  .byte LinkDisplacement	; offset to previous nt
=$a6d9					XtPtr1 ::= *
=42581					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6d9	a9 89		lda #$89	Repeat:		lda #<Begin	; check pairing
.a6db	20 02 b2	jsr $b202			jsr QPairCtlA
.a6de	20 2f cd	jsr $cd2f			jsr Jmp_Comma	; compile the jmp back
.a6e1	20 23 ca	jsr $ca23			jsr Here	; patch the WHILE jmp operand
.a6e4	20 6e cf	jsr $cf6e			jsr Swap
.a6e7	4c ac ce	jmp $ceac			jmp Store
=17					CodeLen	.var *-XtPtr1
=$a6ea					Here1 = *	; remember here
>a6d7	11					.byte CodeLen	;patch wh_CodeLength
.a6ea					ZBranch_Comma:
.a6ea	a9 e8		lda #$e8			lda #$e8		; compile inx; inx
.a6ec	a8		tay				tay
.a6ed	20 f9 cc	jsr $ccf9			jsr Comma_YA
.a6f0	a9 b5		lda #$b5			lda #$b5		; compile lda DStack-2,x
.a6f2	a0 22		ldy #$22			ldy #DStack-2
.a6f4	20 f9 cc	jsr $ccf9			jsr Comma_YA
.a6f7	a9 15		lda #$15			lda #$15		; compile ora DStack-1,x
.a6f9	a0 23		ldy #$23			ldy #DStack-1
.a6fb	20 f9 cc	jsr $ccf9			jsr Comma_YA
.a6fe	a9 f0		lda #$f0			lda #$f0		; BEQ
.a700	d0 0e		bne $a710			bne Branch_CommaA
>a702	42 72 61 6e 63 68 2c		Name0:	.text "Branch,"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=42633					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a709	87					.byte (("Branch,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>a70a	10					.byte WordFlags	;wh_Flags
>a70b	03					.byte 3	;wh_CodeLength
>a70c	34					  .byte LinkDisplacement	; offset to previous nt
=$a70d					XtPtr1 ::= *
=42633					WordListLink ::= Nt0 ; remember the nt of this word for later
.a70d	20 d4 b3	jsr $b3d4			jsr PopA		; pop opcode to A
.a710					Branch_CommaA:
.a710	48		pha				pha			; save branch opcode
.a711	38		sec				sec			; AY= displacement+2
.a712	b5 24		lda $24,x			lda DStack+0,x
.a714	e5 00		sbc $00				sbc cp+0
.a716	a8		tay				tay
.a717	b5 25		lda $25,x			lda DStack+1,x
.a719	e5 01		sbc $01				sbc cp+1
.a71b	c9 ff		cmp #$ff			cmp #$ff		; offset maybe in range?
.a71d	f0 0b		beq $a72a			beq _rev
.a71f	68		pla		_2byte:		pla			; restore branch opcode
.a720	49 20		eor #$20			eor #$20		; reverse branch sense
.a722	a0 03		ldy #$03			ldy #3			; compile Bcc *+5
.a724	20 f9 cc	jsr $ccf9			jsr Comma_YA
.a727	4c 2f cd	jmp $cd2f			jmp Jmp_Comma		; compile JMP abs
.a72a	c0 82		cpy #$82	_rev:		cpy #$80+2		; offset in range?
.a72c	90 f1		bcc $a71f			bcc _2byte
.a72e	e8		inx		_1byte:		inx			; Drop address
.a72f	e8		inx				inx
.a730	88		dey				dey			; fix displacement
.a731	88		dey				dey
.a732	68		pla				pla			; restore branch opcode
.a733	4c f9 cc	jmp $ccf9			jmp Comma_YA		; compile Bcc
>a736	57 6f 72 64			Name0:	.text "Word"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42682					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a73a	84					.byte (("Word"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>a73b	50					.byte WordFlags	;wh_Flags
>a73c	03					.byte 3	;wh_CodeLength
>a73d	31					  .byte LinkDisplacement	; offset to previous nt
=$a73e					XtPtr1 ::= *
=42682					WordListLink ::= Nt0 ; remember the nt of this word for later
.a73e					Word:
.a73e	20 18 b4	jsr $b418			jsr underflow_1
.a741	a4 08		ldy $08				ldy toin+0		; >IN
.a743	c4 06		cpy $06		_DelimLoop:	cpy ciblen+0		; quit if end of input
.a745	f0 09		beq $a750			beq _found_char
.a747	b1 04		lda ($04),y			lda (cib),y
.a749	d5 24		cmp $24,x			cmp DStack+0,x		; ASCII of delimiter
.a74b	d0 03		bne $a750			bne _found_char
.a74d	c8		iny				iny
.a74e	d0 f3		bne $a743			bne _DelimLoop
.a750					_found_char:
.a750	84 08		sty $08				sty toin+0		; Save index of where word starts
.a752	20 b3 ba	jsr $bab3			jsr Parse		; The real work is done by parse
.a755	20 d4 b3	jsr $b3d4			jsr PopA		; pop u
.a758	85 16		sta $16				sta tmp2+0
.a75a	20 fa b3	jsr $b3fa			jsr PopTmp1		; pop addr
.a75d	20 23 ca	jsr $ca23			jsr Here		; Return caddr
.a760	a5 16		lda $16				lda tmp2+0
.a762	a0 00		ldy #$00			ldy #0			; Save length of string
.a764	f0 03		beq $a769			beq _CopyStart
.a766	b1 14		lda ($14),y	_CopyLoop:	lda (tmp1),y
.a768	c8		iny				iny
.a769	20 e2 cc	jsr $cce2	_CopyStart:	jsr C_Comma_A
.a76c	c4 16		cpy $16				cpy tmp2+0
.a76e	90 f6		bcc $a766			bcc _CopyLoop
=50					CodeLen	.var *-XtPtr1
=$a770					Here1 = *	; remember here
>a73c	32					.byte CodeLen	;patch wh_CodeLength
.a770	60		rts				rts
>a771	28				Name0:	.text "("	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=42738					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a772	01					.byte (("("[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>a773	18					.byte WordFlags	;wh_Flags
>a774	03					.byte 3	;wh_CodeLength
>a775	38					  .byte LinkDisplacement	; offset to previous nt
=$a776					XtPtr1 ::= *
=42738					WordListLink ::= Nt0 ; remember the nt of this word for later
.a776	a9 29		lda #$29	Paren:		lda #')'		; separator
.a778	20 b6 ba	jsr $bab6			jsr Parse_A		; Call parse.
.a77b	4c 31 c5	jmp $c531			jmp Two_drop		; 2Drop the result.
=8					CodeLen	.var *-XtPtr1
=$a77e					Here1 = *	; remember here
>a774	08					.byte CodeLen	;patch wh_CodeLength
>a77e	2e 28				Name0:	.text ".("	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=42752					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a780	02					.byte ((".("[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a781	18					.byte WordFlags	;wh_Flags
>a782	03					.byte 3	;wh_CodeLength
>a783	0e					  .byte LinkDisplacement	; offset to previous nt
=$a784					XtPtr1 ::= *
=42752					WordListLink ::= Nt0 ; remember the nt of this word for later
.a784	a9 29		lda #$29	Dot_paren:	lda #')'
.a786	20 b6 ba	jsr $bab6			jsr Parse_A
.a789	4c d3 cd	jmp $cdd3			jmp Type
=8					CodeLen	.var *-XtPtr1
=$a78c					Here1 = *	; remember here
>a782	08					.byte CodeLen	;patch wh_CodeLength
>a78c	48 61 73 68			Name0:	.text "Hash"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42768					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a790	04					.byte (("Hash"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>a791	10					.byte WordFlags	;wh_Flags
>a792	03					.byte 3	;wh_CodeLength
>a793	10					  .byte LinkDisplacement	; offset to previous nt
=$a794					XtPtr1 ::= *
=42768					WordListLink ::= Nt0 ; remember the nt of this word for later
.a794	20 d4 b3	jsr $b3d4	Hash:		jsr PopA		; save length
.a797	85 16		sta $16				sta tmp2+0
.a799	b5 24		lda $24,x			lda DStack+0,x		; copy addr
.a79b	b4 25		ldy $25,x			ldy DStack+1,x
.a79d	85 14		sta $14				sta tmp1+0
.a79f	84 15		sty $15				sty tmp1+1
.a7a1	a9 b3		lda #$b3			lda #$b3		; init hash
.a7a3	95 24		sta $24,x			sta DStack+0,x
.a7a5	95 25		sta $25,x			sta DStack+1,x
.a7a7	a0 00		ldy #$00			ldy #0			; for each char
.a7a9	f0 15		beq $a7c0			beq _next
.a7ab	b1 14		lda ($14),y	_loop:		lda (tmp1),y		;   get char
.a7ad	c9 61		cmp #$61			cmp #'a'		;   uppercase
.a7af	90 06		bcc $a7b7			bcc _3
.a7b1	c9 7b		cmp #$7b			cmp #'z'+1
.a7b3	b0 02		bcs $a7b7			bcs _3
.a7b5	29 df		and #$df			and #$df
.a7b7	16 24		asl $24,x	_3:		asl DStack+0,x		;   add to hash
.a7b9	36 25		rol $25,x			rol DStack+1,x
.a7bb	75 24		adc $24,x			adc DStack+0,x
.a7bd	95 24		sta $24,x			sta DStack+0,x
.a7bf	c8		iny				iny
.a7c0	c4 16		cpy $16		_Next:		cpy tmp2+0
.a7c2	90 e7		bcc $a7ab			bcc _loop
=48					CodeLen	.var *-XtPtr1
=$a7c4					Here1 = *	; remember here
>a792	30					.byte CodeLen	;patch wh_CodeLength
.a7c4	60		rts				rts
>a7c5	45 6e 76 69 72 6f 6e 6d		Name0:	.text "Environment?"	;  name of word as a string, ending at wh_NameLastChar
>a7cd	65 6e 74 3f
=12					NameLength = *-Name0
=42833					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a7d1	ec					.byte (("Environment?"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=65					LinkDisplacement = Nt0-WordListLink
>a7d2	10					.byte WordFlags	;wh_Flags
>a7d3	03					.byte 3	;wh_CodeLength
>a7d4	41					  .byte LinkDisplacement	; offset to previous nt
=$a7d5					XtPtr1 ::= *
=42833					WordListLink ::= Nt0 ; remember the nt of this word for later
.a7d5					Environment_Q:
.a7d5	20 94 a7	jsr $a794			jsr Hash		; ( hash )
.a7d8	a0 00		ldy #$00			ldy #0			; Y= table index
.a7da	f0 0a		beq $a7e6			beq _entry_test
.a7dc	98		tya		_entry_next:	tya
.a7dd	c0 34		cpy #$34			cpy #_table_dbl		; if double
.a7df	90 02		bcc $a7e3			bcc +
.a7e1	69 01		adc #$01			adc #6-4-1		;   skip double
.a7e3	69 04		adc #$04	+		adc #4			;   skip single
.a7e5	a8		tay		_3:		tay
.a7e6	b9 1a a8	lda $a81a,y	_entry_test:	lda _Table+0,y		; match?
.a7e9	f0 28		beq $a813			beq _notfound
.a7eb	d5 24		cmp $24,x			cmp DStack+0,x
.a7ed	d0 ed		bne $a7dc			bne _entry_next
.a7ef	b9 1b a8	lda $a81b,y			lda _Table+1,y
.a7f2	d5 25		cmp $25,x			cmp DStack+1,x
.a7f4	d0 e6		bne $a7dc			bne _entry_next
.a7f6	b9 1c a8	lda $a81c,y			lda _Table+2,y
.a7f9	95 24		sta $24,x			sta DStack+0,x
.a7fb	b9 1d a8	lda $a81d,y			lda _Table+3,y
.a7fe	95 25		sta $25,x			sta DStack+1,x
.a800	c0 34		cpy #$34			cpy #_table_dbl		; single or double data?
.a802	90 0c		bcc $a810			bcc _single
.a804	ca		dex				dex			;  push 2nd cell
.a805	ca		dex				dex
.a806	b9 1e a8	lda $a81e,y			lda _Table+4,y
.a809	95 24		sta $24,x			sta DStack+0,x
.a80b	b9 1f a8	lda $a81f,y			lda _Table+5,y
.a80e	95 25		sta $25,x			sta DStack+1,x
.a810					_single:
.a810	4c bd b7	jmp $b7bd			jmp True		; return True
.a813					_notfound:
.a813	a9 00		lda #$00			lda #0			; return 0
.a815	95 24		sta $24,x			sta DStack+0,x
.a817	95 25		sta $25,x			sta DStack+1,x
.a819	60		rts				rts
=69					CodeLen	.var *-XtPtr1
=$a81a					Here1 = *	; remember here
>a7d3	45					.byte CodeLen	;patch wh_CodeLength
.a81a					_Table:
>a81a	5e e6 ff 7f				.word $e65e,$7fff	; "/COUNTED-STRING"
>a81e	be 79 ff 00				.word $79BE,$ff		; "/HOLD"
>a822	b9 3c 54 00				.word $3cb9,padoffset	; "/PAD"
>a826	8b 81 08 00				.word $818b,8		; "ADDRESS-UNIT-BITS"
>a82a	57 fc 00 00				.word $fc57,0		; "FLOORED"	we have symmetric)
>a82e	4f fb ff 00				.word $fb4f,$ff		; "MAX-CHAR"
>a832	56 7f ff 7f				.word $7f56,$7fff	; "MAX-N"
>a836	5d 7f ff ff				.word $7f5d,$ffff	; "MAX-U"
>a83a	38 ce 80 00				.word $ce38,$80		; "RETURN-STACK-CELLS"
>a83e	f2 c0 14 00				.word $c0f2,DStack0/2	; "STACK-CELLS"
>a842	36 e3 09 00				.word $e336,9		; "WORDLISTS"
>a846	4a f2 ff ff				.word $f24a,$ffff	; "FLOATING"		flag	no	   floating-point word set present
>a84a	01 99 0a 00				.word $9901,FDim	; "FLOATING-STACK"	n	yes	   If n = zero, floating-point numbers are
=52					_table_dbl = *-_Table	; These return a double-cell number
>a84e	4c 7f ff ff ff 7f			.word $7f4c,$ffff,$7fff	; "MAX-D"
>a854	fe fe ff ff ff ff			.word $fefe,$ffff,$ffff	; "MAX-UD"
>a85a	00					.byte 0		; end of list
>a85b	44 75 6d 70			Name0:	.text "Dump"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42975					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a85f	04					.byte (("Dump"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=142					LinkDisplacement = Nt0-WordListLink
>a860	50					.byte WordFlags	;wh_Flags
>a861	03					.byte 3	;wh_CodeLength
>a862	8e					  .byte LinkDisplacement	; offset to previous nt
=$a863					XtPtr1 ::= *
=42975					WordListLink ::= Nt0 ; remember the nt of this word for later
.a863					Dump:
.a863	20 2c b4	jsr $b42c			jsr underflow_2
.a866	ca		dex				dex			; alloc work area
.a867	ca		dex				dex
.a868					_row:
.a868	20 69 ab	jsr $ab69			jsr CR
.a86b	b5 29		lda $29,x			lda DStack+5,x		; print address number
.a86d	20 eb a8	jsr $a8eb			jsr C_Dot_Hex_A
.a870	b5 28		lda $28,x			lda DStack+4,x
.a872	20 eb a8	jsr $a8eb			jsr C_Dot_Hex_A
.a875	20 c7 cd	jsr $cdc7			jsr Space
.a878	20 c7 cd	jsr $cdc7			jsr Space
.a87b	a9 00		lda #$00			lda #0
.a87d	95 24		sta $24,x			sta DStack+0,x
.a87f					_loop:
.a87f	b5 26		lda $26,x			lda DStack+2,x
.a881	15 27		ora $27,x			ora DStack+3,x
.a883	f0 36		beq $a8bb			beq _all_printed
.a885	a1 28		lda ($28,x)			lda (DStack+4,x)
.a887	20 eb a8	jsr $a8eb			jsr C_Dot_Hex_A
.a88a	20 c7 cd	jsr $cdc7			jsr Space
.a88d	a1 28		lda ($28,x)			lda (DStack+4,x)
.a88f	20 11 a9	jsr $a911			jsr is_printable
.a892	b0 02		bcs $a896			bcs _printable
.a894	a9 2e		lda #$2e			lda #'.'		 ; Print dot if not printable
.a896					_printable:
.a896	b4 24		ldy $24,x			ldy DStack+0,x
.a898	91 00		sta ($00),y			sta (cp),y
.a89a	c0 07		cpy #$07			cpy #7
.a89c	d0 03		bne $a8a1			bne +
.a89e	20 c7 cd	jsr $cdc7			jsr Space
.a8a1					+
.a8a1	f6 28		inc $28,x			inc DStack+4,x
.a8a3	d0 02		bne $a8a7			bne +
.a8a5	f6 29		inc $29,x			inc DStack+5,x
.a8a7					+
.a8a7	20 3c ca	jsr $ca3c			jsr NOS_One_Minus	; loop counter
.a8aa	f6 24		inc $24,x			inc DStack+0,x
.a8ac	b5 24		lda $24,x			lda DStack+0,x
.a8ae	c9 10		cmp #$10			cmp #16
.a8b0	90 cd		bcc $a87f			bcc _loop		; next byte
.a8b2	20 c7 cd	jsr $cdc7			jsr Space
.a8b5	20 ca a8	jsr $a8ca			jsr dump_print_ascii
.a8b8	4c 68 a8	jmp $a868			jmp _row		; new row
.a8bb					_all_printed:
.a8bb	b5 24		lda $24,x			lda DStack+0,x
.a8bd	f0 06		beq $a8c5			beq _done
.a8bf	20 c7 cd	jsr $cdc7			jsr Space
.a8c2	20 ca a8	jsr $a8ca			jsr dump_print_ascii
.a8c5					_done:
.a8c5	e8		inx				inx			; drop work area
.a8c6	e8		inx				inx
.a8c7	4c 31 c5	jmp $c531			jmp Two_drop		; one byte less than 4x INX
.a8ca					dump_print_ascii:
.a8ca	a0 00		ldy #$00			ldy #0
.a8cc					_loop:
.a8cc	b1 00		lda ($00),y			lda (cp),y
.a8ce	20 bb cd	jsr $cdbb			jsr Emit_A
.a8d1	c8		iny				iny
.a8d2	c0 08		cpy #$08			cpy #8
.a8d4	d0 03		bne $a8d9			bne +
.a8d6	20 c7 cd	jsr $cdc7			jsr Space
.a8d9					+
.a8d9	98		tya				tya
.a8da	d5 24		cmp $24,x			cmp DStack+0,x
.a8dc	90 ee		bcc $a8cc			bcc _loop
.a8de	60		rts				rts
=124					CodeLen	.var *-XtPtr1
=$a8df					Here1 = *	; remember here
>a861	7c					.byte CodeLen	;patch wh_CodeLength
>a8df	43 2e 48 65 78			Name0:	.text "C.Hex"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=43108					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a8e4	05					.byte (("C.Hex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=133					LinkDisplacement = Nt0-WordListLink
>a8e5	10					.byte WordFlags	;wh_Flags
>a8e6	03					.byte 3	;wh_CodeLength
>a8e7	85					  .byte LinkDisplacement	; offset to previous nt
=$a8e8					XtPtr1 ::= *
=43108					WordListLink ::= Nt0 ; remember the nt of this word for later
.a8e8	20 d4 b3	jsr $b3d4	C_Dot_Hex:	jsr PopA
.a8eb	48		pha		C_Dot_Hex_A:	pha
.a8ec	4a		lsr a				lsr		; convert high nibble first
.a8ed	4a		lsr a				lsr
.a8ee	4a		lsr a				lsr
.a8ef	4a		lsr a				lsr
.a8f0	20 f4 a8	jsr $a8f4			jsr _nibble_to_ascii
.a8f3	68		pla				pla
.a8f4					_nibble_to_ascii:
.a8f4	29 0f		and #$0f			and #$0F	; only use lower nibble
.a8f6	c9 0a		cmp #$0a			cmp #9+1
.a8f8	90 02		bcc $a8fc			bcc +
.a8fa	69 06		adc #$06			adc #6
.a8fc	69 30		adc #$30	+		adc #'0'
.a8fe	4c bb cd	jmp $cdbb			jmp Emit_A
=25					CodeLen	.var *-XtPtr1
=$a901					Here1 = *	; remember here
>a8e6	19					.byte CodeLen	;patch wh_CodeLength
>a901	2e 48 65 78			Name0:	.text ".Hex"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=43141					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a905	04					.byte ((".Hex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>a906	10					.byte WordFlags	;wh_Flags
>a907	03					.byte 3	;wh_CodeLength
>a908	21					  .byte LinkDisplacement	; offset to previous nt
=$a909					XtPtr1 ::= *
=43141					WordListLink ::= Nt0 ; remember the nt of this word for later
.a909	b5 25		lda $25,x	Dot_Hex:	lda DStack+1,x	; do hi byte
.a90b	20 eb a8	jsr $a8eb			jsr C_Dot_Hex_A
.a90e	4c e8 a8	jmp $a8e8			jmp C_Dot_Hex	; do lo byte
=8					CodeLen	.var *-XtPtr1
=$a911					Here1 = *	; remember here
>a907	08					.byte CodeLen	;patch wh_CodeLength
.a911					is_printable:
.a911	c9 20		cmp #$20	                cmp #AscSP              ; $20
.a913	90 07		bcc $a91c	                bcc _done
.a915	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.a917	b0 02		bcs $a91b	                bcs _failed
.a919	38		sec		                sec
.a91a	60		rts		                rts
.a91b	18		clc		_failed:	clc
.a91c	60		rts		_done:		rts
>a91d	2e 53				Name0:	.text ".S"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=43167					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a91f	62					.byte ((".S"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>a920	10					.byte WordFlags	;wh_Flags
>a921	03					.byte 3	;wh_CodeLength
>a922	1a					  .byte LinkDisplacement	; offset to previous nt
=$a923					XtPtr1 ::= *
=43167					WordListLink ::= Nt0 ; remember the nt of this word for later
.a923					Dot_s:
.a923	a9 3c		lda #$3c			lda #'<'
.a925	20 bb cd	jsr $cdbb			jsr Emit_A
.a928	20 2b c2	jsr $c22b			jsr Depth	; ( -- u )
.a92b	20 14 cc	jsr $cc14			jsr print_u
.a92e	a9 3e		lda #$3e			lda #'>'
.a930	20 bb cd	jsr $cdbb			jsr Emit_A
.a933	20 c7 cd	jsr $cdc7			jsr Space
.a936	a0 28		ldy #$28			ldy #DStack0		; for each cell on the stack
.a938	88		dey		_loop:		dey
.a939	88		dey				dey
.a93a	86 14		stx $14				stx tmp1
.a93c	c4 14		cpy $14				cpy tmp1
.a93e	90 15		bcc $a955			bcc _done
.a940	98		tya				tya			; save index
.a941	48		pha				pha
.a942	ca		dex				dex			; push stack[index]
.a943	ca		dex				dex
.a944	b9 24 00	lda $0024,y			lda DStack+0,y
.a947	95 24		sta $24,x			sta DStack+0,x
.a949	b9 25 00	lda $0025,y			lda DStack+1,y
.a94c	95 25		sta $25,x			sta DStack+1,x
.a94e	20 ca cb	jsr $cbca			jsr Dot
.a951	68		pla				pla			; restore index
.a952	a8		tay				tay
.a953	d0 e3		bne $a938			bne _loop
.a955					_done:
=50					CodeLen	.var *-XtPtr1
=$a955					Here1 = *	; remember here
>a921	32					.byte CodeLen	;patch wh_CodeLength
.a955	60		rts				rts
>a956	43 6f 6d 70 61 72 65		Name0:	.text "Compare"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=43229					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a95d	a7					.byte (("Compare"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=62					LinkDisplacement = Nt0-WordListLink
>a95e	50					.byte WordFlags	;wh_Flags
>a95f	03					.byte 3	;wh_CodeLength
>a960	3e					  .byte LinkDisplacement	; offset to previous nt
=$a961					XtPtr1 ::= *
=43229					WordListLink ::= Nt0 ; remember the nt of this word for later
.a961					Compare:
.a961	20 36 b4	jsr $b436			jsr underflow_4
.a964	b5 24		lda $24,x			lda DStack+0,x		; tmp3+1= u2.lo
.a966	85 19		sta $19				sta tmp3+1
.a968	b5 26		lda $26,x			lda DStack+2,x		; tmp2= addr2
.a96a	b4 27		ldy $27,x			ldy DStack+3,x
.a96c	85 16		sta $16				sta tmp2+0
.a96e	84 17		sty $17				sty tmp2+1
.a970	b5 28		lda $28,x			lda DStack+4,x		; tmp3+0= u1.lo
.a972	85 18		sta $18				sta tmp3+0
.a974	b5 2a		lda $2a,x			lda DStack+6,x		; tmp1= addr1
.a976	b4 2b		ldy $2b,x			ldy DStack+7,x
.a978	85 14		sta $14				sta tmp1+0
.a97a	84 15		sty $15				sty tmp1+1
.a97c	a0 00		ldy #$00			ldy #0		; for each char
.a97e					_loop:
.a97e	c4 18		cpy $18				cpy tmp3+0	; string1 empty?
.a980	f0 13		beq $a995			beq _str1
.a982					_L1:
.a982	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a984	f0 27		beq $a9ad			beq _str2
.a986					_L2:
.a986	b1 14		lda ($14),y			lda (tmp1),y	; Are they different?
.a988	d1 16		cmp ($16),y			cmp (tmp2),y
.a98a	d0 19		bne $a9a5			bne _neq
.a98c	c8		iny				iny		; to next char
.a98d	d0 ef		bne $a97e			bne _loop
.a98f	e6 15		inc $15				inc tmp1+1	; to next page
.a991	e6 17		inc $17				inc tmp2+1
.a993	d0 e9		bne $a97e			bne _loop
.a995	d6 29		dec $29,x	_str1:		dec DStack+5,x	; string1 really empty?
.a997	10 e9		bpl $a982			bpl _L1
.a999	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a99b	d0 0a		bne $a9a7			bne _less
.a99d	b5 25		lda $25,x			lda DStack+1,x
.a99f	d0 06		bne $a9a7			bne _less
.a9a1	a9 00		lda #$00	_equal:		lda #0		; Return 0
.a9a3	f0 0e		beq $a9b3			beq _gt2
.a9a5	b0 0a		bcs $a9b1	_neq:		bcs _greater
.a9a7	a9 ff		lda #$ff	_less:		lda #$FF	; Return -1
.a9a9	95 2a		sta $2a,x			sta DStack+6,x
.a9ab	d0 0a		bne $a9b7			bne _done
.a9ad	d6 25		dec $25,x	_str2:		dec DStack+1,x	; is string2 empty?
.a9af	10 d5		bpl $a986			bpl _L2
.a9b1	a9 01		lda #$01	_greater:	lda #1		; Return 1
.a9b3	95 2a		sta $2a,x	_gt2:		sta DStack+6,x
.a9b5	a9 00		lda #$00			lda #0
.a9b7	95 2b		sta $2b,x	_done:		sta DStack+7,x
.a9b9	8a		txa				txa		; Remove all but the result from the stack.
.a9ba	18		clc				clc
.a9bb	69 06		adc #$06			adc #6
.a9bd	aa		tax				tax
=93					CodeLen	.var *-XtPtr1
=$a9be					Here1 = *	; remember here
>a95f	5d					.byte CodeLen	;patch wh_CodeLength
.a9be	60		rts				rts
>a9bf	53 65 61 72 63 68		Name0:	.text "Search"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=43333					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a9c5	06					.byte (("Search"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=104					LinkDisplacement = Nt0-WordListLink
>a9c6	50					.byte WordFlags	;wh_Flags
>a9c7	03					.byte 3	;wh_CodeLength
>a9c8	68					  .byte LinkDisplacement	; offset to previous nt
=$a9c9					XtPtr1 ::= *
=43333					WordListLink ::= Nt0 ; remember the nt of this word for later
.a9c9					Search:
.a9c9	20 36 b4	jsr $b436			jsr underflow_4
.a9cc	b5 24		lda $24,x			lda DStack+0,x
.a9ce	15 25		ora $25,x			ora DStack+1,x
.a9d0	d0 09		bne $a9db			bne _start_search
.a9d2	e8		inx				inx		; Drop u2
.a9d3	e8		inx				inx
.a9d4	a9 ff		lda #$ff			lda #$FF	; overwrite addr2 with a true flag
.a9d6	95 24		sta $24,x			sta DStack+0,x
.a9d8	95 25		sta $25,x			sta DStack+1,x
.a9da	60		rts				rts
.a9db					_start_search:
.a9db	20 eb b7	jsr $b7eb			jsr Zero
.a9de					_search_loop:
.a9de	18		clc				clc
.a9df	b5 24		lda $24,x			lda DStack+0,x
.a9e1	75 26		adc $26,x			adc DStack+2,x
.a9e3	85 14		sta $14				sta tmp1+0
.a9e5	b5 25		lda $25,x			lda DStack+1,x
.a9e7	75 27		adc $27,x			adc DStack+3,x
.a9e9	85 15		sta $15				sta tmp1+1
.a9eb	d5 2b		cmp $2b,x			cmp DStack+7,x
.a9ed	90 13		bcc $aa02			bcc _init_comparison ; Obviously less
.a9ef	d0 06		bne $a9f7			bne _not_found
.a9f1	b5 2a		lda $2a,x			lda DStack+6,x
.a9f3	c5 14		cmp $14				cmp tmp1
.a9f5	b0 0b		bcs $aa02			bcs _init_comparison
.a9f7					_not_found:
.a9f7	e8		inx				inx		; Remove offset
.a9f8	e8		inx				inx
.a9f9	e8		inx				inx		; Remove u2
.a9fa	e8		inx				inx
.a9fb	a9 00		lda #$00			lda #0
.a9fd	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a false flag
.a9ff	95 25		sta $25,x			sta DStack+1,x
.aa01	60		rts				rts
.aa02					_init_comparison:
.aa02	18		clc				clc
.aa03	b5 2c		lda $2c,x			lda DStack+8,x
.aa05	75 24		adc $24,x			adc DStack+0,x
.aa07	85 14		sta $14				sta tmp1
.aa09	b5 2d		lda $2d,x			lda DStack+9,x
.aa0b	75 25		adc $25,x			adc DStack+1,x
.aa0d	85 15		sta $15				sta tmp1+1
.aa0f	b5 28		lda $28,x			lda DStack+4,x
.aa11	85 16		sta $16				sta tmp2
.aa13	b5 29		lda $29,x			lda DStack+5,x
.aa15	85 17		sta $17				sta tmp2+1
.aa17	b5 26		lda $26,x			lda DStack+2,x
.aa19	85 18		sta $18				sta tmp3+0
.aa1b	b5 27		lda $27,x			lda DStack+3,x
.aa1d	85 19		sta $19				sta tmp3+1
.aa1f					_comparison_loop:
.aa1f	a0 00		ldy #$00			ldy #0
.aa21	b1 14		lda ($14),y			lda (tmp1),y
.aa23	d1 16		cmp ($16),y			cmp (tmp2),y
.aa25	f0 06		beq $aa2d			beq _letters_match
.aa27	20 55 ca	jsr $ca55			jsr One_plus
.aa2a	4c de a9	jmp $a9de			jmp _search_loop
.aa2d					_letters_match:
.aa2d	e6 14		inc $14				inc tmp1
.aa2f	d0 02		bne $aa33			bne +
.aa31	e6 15		inc $15				inc tmp1+1
.aa33					+
.aa33	e6 16		inc $16				inc tmp2
.aa35	d0 02		bne $aa39			bne +
.aa37	e6 17		inc $17				inc tmp2+1
.aa39					+
.aa39	a5 18		lda $18				lda tmp3
.aa3b	d0 02		bne $aa3f			bne +
.aa3d	c6 19		dec $19				dec tmp3+1
.aa3f					+
.aa3f	c6 18		dec $18				dec tmp3
.aa41	a5 18		lda $18				lda tmp3
.aa43	05 19		ora $19				ora tmp3+1
.aa45	d0 d8		bne $aa1f			bne _comparison_loop ; Check the next letter
.aa47	18		clc				clc
.aa48	b5 24		lda $24,x			lda DStack+0,x
.aa4a	75 2c		adc $2c,x			adc DStack+8,x
.aa4c	95 2c		sta $2c,x			sta DStack+8,x
.aa4e	b5 25		lda $25,x			lda DStack+1,x
.aa50	75 2d		adc $2d,x			adc DStack+9,x
.aa52	95 2d		sta $2d,x			sta DStack+9,x
.aa54	38		sec				sec
.aa55	b5 2a		lda $2a,x			lda DStack+6,x
.aa57	f5 24		sbc $24,x			sbc DStack+0,x
.aa59	95 2a		sta $2a,x			sta DStack+6,x
.aa5b	b5 2b		lda $2b,x			lda DStack+7,x
.aa5d	f5 25		sbc $25,x			sbc DStack+1,x
.aa5f	95 2b		sta $2b,x			sta DStack+7,x
.aa61	e8		inx				inx		; drop offset
.aa62	e8		inx				inx
.aa63	e8		inx				inx		; drop u2
.aa64	e8		inx				inx
.aa65	a9 ff		lda #$ff			lda #$FF
.aa67	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a true flag.
.aa69	95 25		sta $25,x			sta DStack+1,x
=162					CodeLen	.var *-XtPtr1
=$aa6b					Here1 = *	; remember here
>a9c7	a2					.byte CodeLen	;patch wh_CodeLength
.aa6b	60		rts				rts
>aa6c	4d 61 72 6b 65 72		Name0:	.text "Marker"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=43506					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aa72	46					.byte (("Marker"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=173					LinkDisplacement = Nt0-WordListLink
>aa73	18					.byte WordFlags	;wh_Flags
>aa74	03					.byte 3	;wh_CodeLength
>aa75	ad					  .byte LinkDisplacement	; offset to previous nt
=$aa76					XtPtr1 ::= *
=43506					WordListLink ::= Nt0 ; remember the nt of this word for later
.aa76					Marker:
.aa76	20 23 ca	jsr $ca23			jsr Here		; Save original CP, which
.aa79	20 04 c1	jsr $c104			jsr Header_Build	; compile a word header, but don't link into wordlist
.aa7c	a0 aa		ldy #$aa			ldy #>_runtime		; compile JSR _runtime
.aa7e	a9 96		lda #$96			lda #<_runtime
.aa80	20 1c cd	jsr $cd1c			jsr Jsr_Comma_YA
.aa83	20 f6 cc	jsr $ccf6			jsr Comma		; Append original CP
.aa86	a0 00		ldy #$00			ldy #0			; Start at CURRENT
.aa88	b9 10 03	lda $0310,y	_loop:		lda CurrentV,y
.aa8b	20 e2 cc	jsr $cce2			jsr C_Comma_A
.aa8e	c8		iny				iny
.aa8f	c0 24		cpy #$24			cpy #MarkEnd-CurrentV	; One past the end of the search order.
.aa91	90 f5		bcc $aa88			bcc _loop
.aa93	4c f9 c0	jmp $c0f9			jmp Header_Link		; link built header into current dictionary
=32					CodeLen	.var *-XtPtr1
=$aa96					Here1 = *	; remember here
>aa74	20					.byte CodeLen	;patch wh_CodeLength
.aa96					_runtime:
.aa96	68		pla				pla		; Pop the RTS address off the stack
.aa97	85 14		sta $14				sta tmp1+0
.aa99	68		pla				pla
.aa9a	85 15		sta $15				sta tmp1+1
.aa9c	a0 01		ldy #$01			ldy #1		; start just aftet JSR _runtime
.aa9e	b1 14		lda ($14),y			lda (tmp1),y	; CP was stored first
.aaa0	85 00		sta $00				sta cp+0
.aaa2	c8		iny				iny
.aaa3	b1 14		lda ($14),y			lda (tmp1),y
.aaa5	85 01		sta $01				sta cp+1
.aaa7	c8		iny				iny
.aaa8					_rloop:
.aaa8	b1 14		lda ($14),y			lda (tmp1),y
.aaaa	99 0d 03	sta $030d,y			sta CurrentV-2-1,y
.aaad	c8		iny				iny
.aaae	c0 27		cpy #$27			cpy #MarkEnd-CurrentV+2+1 ; One past the end of the search order.
.aab0	90 f6		bcc $aaa8			bcc _rloop
.aab2	60		rts				rts
>aab3	57 6f 72 64 73			Name0:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=43576					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aab8	65					.byte (("Words"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=70					LinkDisplacement = Nt0-WordListLink
>aab9	10					.byte WordFlags	;wh_Flags
>aaba	03					.byte 3	;wh_CodeLength
>aabb	46					  .byte LinkDisplacement	; offset to previous nt
=$aabc					XtPtr1 ::= *
=43576					WordListLink ::= Nt0 ; remember the nt of this word for later
.aabc					Words:
.aabc	a9 ff		lda #$ff			lda #$ff
.aabe	20 dd b7	jsr $b7dd			jsr PushZA		; Alloc space for line size & wordlist #
.aac1	ca		dex				dex			; Alloc space for a nt
.aac2	ca		dex				dex
.aac3					_wordlist_next:
.aac3	20 69 ab	jsr $ab69			jsr CR			; start wordlist on new line
.aac6	f6 26		inc $26,x			inc DStack+2,x		; step to next search wordlist
.aac8	b4 26		ldy $26,x			ldy DStack+2,x		; Y= wordlist index
.aaca	cc 2a 03	cpy $032a			cpy Num_OrderV
.aacd	b0 44		bcs $ab13			bcs _wordslist_done	; ran out of search wordlist entries?
.aacf	b9 2b 03	lda $032b,y			lda Search_OrderV,y	; A= SEARCH-ORDER[Y]	Get the current wordlist id
.aad2	0a		asl a				asl			; TOS= WORDLISTS[A]
.aad3	a8		tay				tay
.aad4	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.aad7	95 24		sta $24,x			sta DStack+0,x
.aad9	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.aadc	95 25		sta $25,x			sta DStack+1,x
.aade	f0 e3		beq $aac3			beq _wordlist_next	; end of list?
.aae0					_word_loop:
.aae0	20 51 cf	jsr $cf51			jsr Dup			; ( wordlist# nt nt )
.aae3	20 e1 bd	jsr $bde1			jsr Name_To_String	; ( wordlist# nt addr u )
.aae6	b5 2b		lda $2b,x			lda DStack+7,x
.aae8	38		sec				sec			; don't forget the space between words
.aae9	75 24		adc $24,x			adc DStack+0,x
.aaeb	c9 4e		cmp #$4e			cmp #MAX_LINE_LENGTH-1
.aaed	90 05		bcc $aaf4			bcc +
.aaef	20 69 ab	jsr $ab69			jsr CR
.aaf2	b5 24		lda $24,x			lda DStack+0,x		; After going to next line, start
.aaf4	95 2b		sta $2b,x	+		sta DStack+7,x
.aaf6	20 d3 cd	jsr $cdd3			jsr Type		; ( wordlist# nt )
.aaf9	20 c7 cd	jsr $cdc7			jsr Space
.aafc	b5 24		lda $24,x			lda DStack+0,x
.aafe	85 14		sta $14				sta tmp1+0
.ab00	b5 25		lda $25,x			lda DStack+1,x
.ab02	85 15		sta $15				sta tmp1+1
.ab04	20 96 82	jsr $8296			jsr LinkNext		; tmp1= next word nt in list
.ab07	a5 14		lda $14				lda tmp1+0
.ab09	95 24		sta $24,x			sta DStack+0,x
.ab0b	a5 15		lda $15				lda tmp1+1
.ab0d	95 25		sta $25,x			sta DStack+1,x
.ab0f	d0 cf		bne $aae0			bne _word_loop		; end of list?
.ab11	f0 b0		beq $aac3			beq _wordlist_next
.ab13					_wordslist_done:
.ab13	4c 31 c5	jmp $c531			jmp Two_Drop
=90					CodeLen	.var *-XtPtr1
=$ab16					Here1 = *	; remember here
>aaba	5a					.byte CodeLen	;patch wh_CodeLength
>ab16	57 6f 72 64 53 69 7a 65		Name0:	.text "WordSize"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=43678					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab1e	a8					.byte (("WordSize"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=102					LinkDisplacement = Nt0-WordListLink
>ab1f	10					.byte WordFlags	;wh_Flags
>ab20	03					.byte 3	;wh_CodeLength
>ab21	66					  .byte LinkDisplacement	; offset to previous nt
=$ab22					XtPtr1 ::= *
=43678					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab22	20 fa b3	jsr $b3fa	WordSize:	jsr PopTmp1
.ab25	a0 82		ldy #$82			ldy #Wh_CodeLength
.ab27	b1 14		lda ($14),y			lda (tmp1),y
.ab29	4c dd b7	jmp $b7dd			jmp PushZA
=10					CodeLen	.var *-XtPtr1
=$ab2c					Here1 = *	; remember here
>ab20	0a					.byte CodeLen	;patch wh_CodeLength
>ab2c	41 6c 69 67 6e 65 64		Name0:	.text "Aligned"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=43699					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab33	87					.byte (("Aligned"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>ab34	00					.byte WordFlags	;wh_Flags
>ab35	03					.byte 3	;wh_CodeLength
>ab36	15					  .byte LinkDisplacement	; offset to previous nt
=$ab37					XtPtr1 ::= *
=43699					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab37					Aligned:
=0					CodeLen	.var *-XtPtr1
=$ab37					Here1 = *	; remember here
>ab35	00					.byte CodeLen	;patch wh_CodeLength
.ab37	60		rts				rts
>ab38	41 6c 69 67 6e			Name0:	.text "Align"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=43709					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab3d	c5					.byte (("Align"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>ab3e	00					.byte WordFlags	;wh_Flags
>ab3f	03					.byte 3	;wh_CodeLength
>ab40	0a					  .byte LinkDisplacement	; offset to previous nt
=$ab41					XtPtr1 ::= *
=43709					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab41					Align:
=0					CodeLen	.var *-XtPtr1
=$ab41					Here1 = *	; remember here
>ab3f	00					.byte CodeLen	;patch wh_CodeLength
.ab41	60		rts				rts
>ab42	4f 75 74 70 75 74		Name0:	.text "Output"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=43720					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab48	86					.byte (("Output"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>ab49	10					.byte WordFlags	;wh_Flags
>ab4a	03					.byte 3	;wh_CodeLength
>ab4b	0b					  .byte LinkDisplacement	; offset to previous nt
=$ab4c					XtPtr1 ::= *
=43720					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab4c					xt_output:
.ab4c	a0 03		ldy #$03			ldy #>output
.ab4e	a9 06		lda #$06			lda #<output
.ab50	4c ae b7	jmp $b7ae			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$ab53					Here1 = *	; remember here
>ab4a	07					.byte CodeLen	;patch wh_CodeLength
>ab53	49 6e 70 75 74			Name0:	.text "Input"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=43736					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab58	85					.byte (("Input"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>ab59	10					.byte WordFlags	;wh_Flags
>ab5a	03					.byte 3	;wh_CodeLength
>ab5b	10					  .byte LinkDisplacement	; offset to previous nt
=$ab5c					XtPtr1 ::= *
=43736					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab5c	a0 03		ldy #$03	xt_input:	ldy #>input
.ab5e	a9 08		lda #$08			lda #<input
.ab60	4c ae b7	jmp $b7ae			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$ab63					Here1 = *	; remember here
>ab5a	07					.byte CodeLen	;patch wh_CodeLength
>ab63	43 52				Name0:	.text "CR"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=43749					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab65	42					.byte (("CR"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>ab66	10					.byte WordFlags	;wh_Flags
>ab67	03					.byte 3	;wh_CodeLength
>ab68	0d					  .byte LinkDisplacement	; offset to previous nt
=$ab69					XtPtr1 ::= *
=43749					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab69					CR:
.ab69	a9 0a		lda #$0a			lda #AscLF
.ab6b	20 bb cd	jsr $cdbb			jsr Emit_A
=5					CodeLen	.var *-XtPtr1
=$ab6e					Here1 = *	; remember here
>ab67	05					.byte CodeLen	;patch wh_CodeLength
.ab6e	60		rts				rts
>ab6f	50 61 67 65			Name0:	.text "Page"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=43763					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab73	a4					.byte (("Page"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>ab74	10					.byte WordFlags	;wh_Flags
>ab75	03					.byte 3	;wh_CodeLength
>ab76	0e					  .byte LinkDisplacement	; offset to previous nt
=$ab77					XtPtr1 ::= *
=43763					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab77	20 a2 b8	jsr $b8a2	Page:		jsr SLiteral_Runtime
.ab7a	4c 87 ab	jmp $ab87			  jmp +
>ab7d	1b 5b 32 4a					  .text AscESC,"[2J"	; ANSI clear screen
>ab81	1b 5b 31 3b 31 48				  .text AscESC,"[1;1H"	; move cursor to top left of screen
.ab87	4c d3 cd	jmp $cdd3	+		jmp Type
=19					CodeLen	.var *-XtPtr1
=$ab8a					Here1 = *	; remember here
>ab75	13					.byte CodeLen	;patch wh_CodeLength
>ab8a	41 74 2d 58 59			Name0:	.text "At-XY"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=43791					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab8f	25					.byte (("At-XY"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>ab90	50					.byte WordFlags	;wh_Flags
>ab91	03					.byte 3	;wh_CodeLength
>ab92	1c					  .byte LinkDisplacement	; offset to previous nt
=$ab93					XtPtr1 ::= *
=43791					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab93					At_XY:
.ab93	20 2c b4	jsr $b42c			jsr underflow_2
.ab96	ad 00 03	lda $0300			lda base	; Save the BASE
.ab99	48		pha				pha
.ab9a	20 c4 b1	jsr $b1c4			jsr Decimal	; ANSI escape code values need to be in decimal.
.ab9d	a9 1b		lda #$1b			lda #AscESC
.ab9f	20 bb cd	jsr $cdbb			jsr Emit_A
.aba2	a9 5b		lda #$5b			lda #'['
.aba4	20 bb cd	jsr $cdbb			jsr Emit_A
.aba7	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.aba9	20 14 cc	jsr $cc14			jsr print_u
.abac	a9 3b		lda #$3b			lda #';'
.abae	20 bb cd	jsr $cdbb			jsr Emit_A
.abb1	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.abb3	20 14 cc	jsr $cc14			jsr print_u
.abb6	a9 48		lda #$48			lda #'H'
.abb8	20 bb cd	jsr $cdbb			jsr Emit_A
.abbb	68		pla				pla		; Restore the base
.abbc	8d 00 03	sta $0300			sta base
=44					CodeLen	.var *-XtPtr1
=$abbf					Here1 = *	; remember here
>ab91	2c					.byte CodeLen	;patch wh_CodeLength
.abbf	60		rts				rts
>abc0	50 61 64			Name0:	.text "Pad"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=43843					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>abc3	83					.byte (("Pad"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>abc4	00					.byte WordFlags	;wh_Flags
>abc5	03					.byte 3	;wh_CodeLength
>abc6	34					  .byte LinkDisplacement	; offset to previous nt
=$abc7					XtPtr1 ::= *
=43843					WordListLink ::= Nt0 ; remember the nt of this word for later
.abc7	ca		dex		Pad:		dex		; push cp+PadOffset
.abc8	ca		dex				dex
.abc9	18		clc				clc
.abca	a5 00		lda $00				lda cp+0
.abcc	69 54		adc #$54			adc #PadOffset
.abce	95 24		sta $24,x			sta DStack+0,x
.abd0	a5 01		lda $01				lda cp+1
.abd2	69 00		adc #$00			adc #0
.abd4	95 25		sta $25,x			sta DStack+1,x
=15					CodeLen	.var *-XtPtr1
=$abd6					Here1 = *	; remember here
>abc5	0f					.byte CodeLen	;patch wh_CodeLength
.abd6	60		rts				rts
>abd7	3c 23				Name0:	.text "<#"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=43865					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>abd9	62					.byte (("<#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>abda	00					.byte WordFlags	;wh_Flags
>abdb	03					.byte 3	;wh_CodeLength
>abdc	16					  .byte LinkDisplacement	; offset to previous nt
=$abdd					XtPtr1 ::= *
=43865					WordListLink ::= Nt0 ; remember the nt of this word for later
.abdd					Less_Number_Sign:
.abdd	a9 54		lda #$54			lda #PadOffset		; init hold buffer index
.abdf	8d 34 03	sta $0334			sta ToHold
=5					CodeLen	.var *-XtPtr1
=$abe2					Here1 = *	; remember here
>abdb	05					.byte CodeLen	;patch wh_CodeLength
.abe2	60		rts				rts
>abe3	23 3e				Name0:	.text "#>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=43877					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>abe5	c2					.byte (("#>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>abe6	40					.byte WordFlags	;wh_Flags
>abe7	03					.byte 3	;wh_CodeLength
>abe8	0c					  .byte LinkDisplacement	; offset to previous nt
=$abe9					XtPtr1 ::= *
=43877					WordListLink ::= Nt0 ; remember the nt of this word for later
.abe9					Number_Sign_Greater:
.abe9	20 2c b4	jsr $b42c			jsr underflow_2		; double number
.abec	18		clc				clc			; addr= cp + ToHold
.abed	a5 00		lda $00				lda cp+0
.abef	6d 34 03	adc $0334			adc ToHold
.abf2	95 26		sta $26,x			sta DStack+2,x
.abf4	a5 01		lda $01				lda cp+1
.abf6	69 00		adc #$00			adc #0
.abf8	95 27		sta $27,x			sta DStack+3,x
.abfa	38		sec				sec			; u= PadOffset - ToHold
.abfb	a9 54		lda #$54			lda #PadOffset
.abfd	ed 34 03	sbc $0334			sbc ToHold
.ac00	95 24		sta $24,x			sta DStack+0,x
.ac02	a9 00		lda #$00			lda #0
.ac04	95 25		sta $25,x			sta DStack+1,x
=29					CodeLen	.var *-XtPtr1
=$ac06					Here1 = *	; remember here
>abe7	1d					.byte CodeLen	;patch wh_CodeLength
.ac06	60		rts				rts
>ac07	48 6f 6c 64			Name0:	.text "Hold"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=43915					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac0b	84					.byte (("Hold"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>ac0c	00					.byte WordFlags	;wh_Flags
>ac0d	03					.byte 3	;wh_CodeLength
>ac0e	26					  .byte LinkDisplacement	; offset to previous nt
=$ac0f					XtPtr1 ::= *
=43915					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac0f	20 d4 b3	jsr $b3d4	Hold:		jsr PopA
.ac12	ce 34 03	dec $0334	Hold_A:		dec ToHold
.ac15	ac 34 03	ldy $0334			ldy ToHold
.ac18	91 00		sta ($00),y			sta (cp),y
=11					CodeLen	.var *-XtPtr1
=$ac1a					Here1 = *	; remember here
>ac0d	0b					.byte CodeLen	;patch wh_CodeLength
.ac1a	60		rts				rts
>ac1b	23				Name0:	.text "#"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=43932					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac1c	61					.byte (("#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>ac1d	50					.byte WordFlags	;wh_Flags
>ac1e	03					.byte 3	;wh_CodeLength
>ac1f	11					  .byte LinkDisplacement	; offset to previous nt
=$ac20					XtPtr1 ::= *
=43932					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac20					Number_Sign:
.ac20	20 2c b4	jsr $b42c			jsr underflow_2		; double number
.ac23	a9 00		lda #$00			lda #0			;   init remainder
.ac25	18		clc				clc
.ac26	a0 21		ldy #$21			ldy #32+1		;   for each bit
.ac28					_11:
.ac28	2a		rol a				rol a			;   shift remainder
.ac29	cd 00 03	cmp $0300			cmp base		;   will it fit?
.ac2c	90 03		bcc $ac31			bcc _27
.ac2e	ed 00 03	sbc $0300			sbc base
.ac31					_27:
.ac31	36 26		rol $26,x			rol DStack+2,x		;   shift ud
.ac33	36 27		rol $27,x			rol DStack+3,x
.ac35	36 24		rol $24,x			rol DStack+0,x
.ac37	36 25		rol $25,x			rol DStack+1,x
.ac39	88		dey				dey
.ac3a	d0 ec		bne $ac28			bne _11
.ac3c	c9 0a		cmp #$0a			cmp #9+1		; alternatively this could use s_abc_upper
.ac3e	90 02		bcc $ac42			bcc +
.ac40	69 06		adc #$06			adc #7-1
.ac42	69 30		adc #$30	+		adc #'0'
.ac44	d0 cc		bne $ac12			bne Hold_A
=38					CodeLen	.var *-XtPtr1
=$ac46					Here1 = *	; remember here
>ac1e	26					.byte CodeLen	;patch wh_CodeLength
>ac46	23 53				Name0:	.text "#S"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=43976					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac48	62					.byte (("#S"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=44					LinkDisplacement = Nt0-WordListLink
>ac49	00					.byte WordFlags	;wh_Flags
>ac4a	03					.byte 3	;wh_CodeLength
>ac4b	2c					  .byte LinkDisplacement	; offset to previous nt
=$ac4c					XtPtr1 ::= *
=43976					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac4c					Number_Sign_S:
.ac4c					_loop:
.ac4c	20 20 ac	jsr $ac20			jsr Number_sign	; convert a single number ("#")
.ac4f	b5 24		lda $24,x			lda DStack+0,x	; until d is zero
.ac51	15 25		ora $25,x			ora DStack+1,x
.ac53	15 26		ora $26,x			ora DStack+2,x
.ac55	15 27		ora $27,x			ora DStack+3,x
.ac57	d0 f3		bne $ac4c			bne _loop
=13					CodeLen	.var *-XtPtr1
=$ac59					Here1 = *	; remember here
>ac4a	0d					.byte CodeLen	;patch wh_CodeLength
.ac59	60		rts				rts
>ac5a	53 69 67 6e			Name0:	.text "Sign"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=43998					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac5e	c4					.byte (("Sign"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>ac5f	10					.byte WordFlags	;wh_Flags
>ac60	03					.byte 3	;wh_CodeLength
>ac61	16					  .byte LinkDisplacement	; offset to previous nt
=$ac62					XtPtr1 ::= *
=43998					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac62	20 ef b3	jsr $b3ef	Sign:		jsr PopYA
.ac65	98		tya				tya		; test MSB of TOS
.ac66					Sign_P:
.ac66	30 01		bmi $ac69			bmi _minus
.ac68	60		rts				rts
.ac69	a9 2d		lda #$2d	_minus:		lda #'-'	; add minus sign
.ac6b	d0 a5		bne $ac12			bne hold_a
=11					CodeLen	.var *-XtPtr1
=$ac6d					Here1 = *	; remember here
>ac60	0b					.byte CodeLen	;patch wh_CodeLength
>ac6d	43 6c 65 61 76 65		Name0:	.text "Cleave"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44019					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac73	a6					.byte (("Cleave"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>ac74	50					.byte WordFlags	;wh_Flags
>ac75	03					.byte 3	;wh_CodeLength
>ac76	15					  .byte LinkDisplacement	; offset to previous nt
=$ac77					XtPtr1 ::= *
=44019					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac77					Cleave:
.ac77	20 2c b4	jsr $b42c			jsr underflow_2
.ac7a	20 e0 c4	jsr $c4e0			jsr Minus_leading	; -LEADING ( addr u )
.ac7d	20 dc c3	jsr $c3dc			jsr Input_To_R	; save old imput state
.ac80	b5 24		lda $24,x			lda DStack+0,x	; u is new ciblen
.ac82	85 06		sta $06				sta ciblen
.ac84	b5 25		lda $25,x			lda DStack+1,x
.ac86	85 07		sta $07				sta ciblen+1
.ac88	b5 26		lda $26,x			lda DStack+2,x	; addr is new cib
.ac8a	85 04		sta $04				sta cib
.ac8c	b5 27		lda $27,x			lda DStack+3,x
.ac8e	85 05		sta $05				sta cib+1
.ac90	a9 00		lda #$00			lda #0
.ac92	85 08		sta $08				sta toin	; >IN pointer is zero
.ac94	85 09		sta $09				sta toin+1
.ac96	20 6c ba	jsr $ba6c			jsr parse_name	; ( addr u addr-s u-s )
.ac99	b5 24		lda $24,x			lda DStack+0,x
.ac9b	15 25		ora $25,x			ora DStack+1,x
.ac9d	f0 23		beq $acc2			beq _done
.ac9f	38		sec				sec
.aca0	b5 28		lda $28,x			lda DStack+4,x	; LSB of original u
.aca2	f5 24		sbc $24,x			sbc DStack+0,x
.aca4	95 28		sta $28,x			sta DStack+4,x
.aca6	b5 29		lda $29,x			lda DStack+5,x	; MSB of original u
.aca8	f5 25		sbc $25,x			sbc DStack+1,x
.acaa	95 29		sta $29,x			sta DStack+5,x
.acac	18		clc				clc
.acad	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of original addr
.acaf	75 24		adc $24,x			adc DStack+0,x
.acb1	95 2a		sta $2a,x			sta DStack+6,x
.acb3	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of original addr
.acb5	75 25		adc $25,x			adc DStack+1,x
.acb7	95 2b		sta $2b,x			sta DStack+7,x
.acb9	20 42 c5	jsr $c542			jsr Two_swap		; ( addr-s u-s addr u )
.acbc	20 e0 c4	jsr $c4e0			jsr Minus_leading
.acbf	20 42 c5	jsr $c542			jsr Two_swap		; ( addr u addr-s u-s )
.acc2					_done:
.acc2	20 fd c3	jsr $c3fd			jsr R_To_Input
=78					CodeLen	.var *-XtPtr1
=$acc5					Here1 = *	; remember here
>ac75	4e					.byte CodeLen	;patch wh_CodeLength
.acc5	60		rts				rts
>acc6	48 65 78 53 74 6f 72 65		Name0:	.text "HexStore"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=44110					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>acce	a8					.byte (("HexStore"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=91					LinkDisplacement = Nt0-WordListLink
>accf	50					.byte WordFlags	;wh_Flags
>acd0	03					.byte 3	;wh_CodeLength
>acd1	5b					  .byte LinkDisplacement	; offset to previous nt
=$acd2					XtPtr1 ::= *
=44110					WordListLink ::= Nt0 ; remember the nt of this word for later
.acd2					Hexstore:
.acd2	20 31 b4	jsr $b431			jsr underflow_3
.acd5	20 51 cf	jsr $cf51			jsr Dup		; Save copy of original address
.acd8	20 61 c6	jsr $c661			jsr Two_to_r		; ( addr1 u1 ) ( R: addr2 addr2 )
.acdb					_loop:
.acdb	b5 24		lda $24,x			lda DStack+0,x
.acdd	15 25		ora $25,x			ora DStack+1,x
.acdf	f0 37		beq $ad18			beq _done
.ace1	20 77 ac	jsr $ac77			jsr Cleave		; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.ace4	20 61 c6	jsr $c661			jsr Two_to_r
.ace7	20 eb b7	jsr $b7eb			jsr Zero
.acea	20 eb b7	jsr $b7eb			jsr Zero
.aced	20 3d c6	jsr $c63d			jsr Two_r_from	; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.acf0	20 48 b0	jsr $b048			jsr To_Number	; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.acf3	b5 24		lda $24,x			lda DStack+0,x
.acf5	15 25		ora $25,x			ora DStack+1,x
.acf7	d0 18		bne $ad11			bne _have_chars_left
.acf9	20 31 c5	jsr $c531			jsr Two_drop		; ( addr1 u1 n n ) ( R: addr2 addr2 )
.acfc	20 08 c0	jsr $c008			jsr D_To_S		; ( addr1 u1 n ) ( R: addr2 addr2 )
.acff	20 14 cf	jsr $cf14			jsr R_Fetch		; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.ad02	20 5a cd	jsr $cd5a			jsr C_Store		; ( addr1 u1 ) ( R: addr2 addr2 )
.ad05	20 f9 ce	jsr $cef9			jsr R_From		; R>
.ad08	20 55 ca	jsr $ca55			jsr One_plus		; 1+
.ad0b	20 db ce	jsr $cedb			jsr To_R		; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.ad0e	4c db ac	jmp $acdb			jmp _loop
.ad11					_have_chars_left:
.ad11	8a		txa				txa
.ad12	18		clc				clc
.ad13	69 08		adc #$08			adc #8
.ad15	aa		tax				tax
.ad16	d0 c3		bne $acdb			bne _loop
.ad18					_done:
.ad18	e8		inx				inx
.ad19	e8		inx				inx
.ad1a	e8		inx				inx
.ad1b	e8		inx				inx			; 2DROP
.ad1c	20 3d c6	jsr $c63d			jsr Two_r_from		; ( addr2+n addr2 )
.ad1f	20 6e cf	jsr $cf6e			jsr Swap
.ad22	4c b2 cb	jmp $cbb2			jmp Minus		; ( n )
=83					CodeLen	.var *-XtPtr1
=$ad25					Here1 = *	; remember here
>acd0	53					.byte CodeLen	;patch wh_CodeLength
>ad25	57 69 74 68 69 6e		Name0:	.text "Within"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44203					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ad2b	c6					.byte (("Within"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=93					LinkDisplacement = Nt0-WordListLink
>ad2c	50					.byte WordFlags	;wh_Flags
>ad2d	03					.byte 3	;wh_CodeLength
>ad2e	5d					  .byte LinkDisplacement	; offset to previous nt
=$ad2f					XtPtr1 ::= *
=44203					WordListLink ::= Nt0 ; remember the nt of this word for later
.ad2f					Within:
.ad2f	20 31 b4	jsr $b431			jsr underflow_3
.ad32	20 2a cf	jsr $cf2a			jsr Over
.ad35	20 b2 cb	jsr $cbb2			jsr Minus
.ad38	20 db ce	jsr $cedb			jsr To_R
.ad3b	20 b2 cb	jsr $cbb2			jsr Minus
.ad3e	20 f9 ce	jsr $cef9			jsr R_From
.ad41	4c 8f c8	jmp $c88f			jmp U_Less_Than
=21					CodeLen	.var *-XtPtr1
=$ad44					Here1 = *	; remember here
>ad2d	15					.byte CodeLen	;patch wh_CodeLength
>ad44	5c				Name0:	.text "\"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=44229					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ad45	81					.byte (("\"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>ad46	18					.byte WordFlags	;wh_Flags
>ad47	03					.byte 3	;wh_CodeLength
>ad48	1a					  .byte LinkDisplacement	; offset to previous nt
=$ad49					XtPtr1 ::= *
=44229					WordListLink ::= Nt0 ; remember the nt of this word for later
.ad49					Backslash:
.ad49	ad 0c 03	lda $030c			lda BlkV+0		; interpreting a block?
.ad4c	0d 0d 03	ora $030d			ora BlkV+1
.ad4f	f0 16		beq $ad67			beq _not_block
.ad51	a5 08		lda $08				lda toin+0
.ad53	29 3f		and #$3f			and #$3F
.ad55	c9 02		cmp #$02			cmp #2
.ad57	90 16		bcc $ad6f			bcc _rts
.ad59	a5 08		lda $08		                lda toin+0		; Move toin to next multiple of 64.
.ad5b	29 c0		and #$c0	                and #$C0        	;   Clear lower bits to move to beginning of line.
.ad5d	18		clc		                clc             	;   Add $40 (64 decimal) to move to next line.
.ad5e	69 40		adc #$40	                adc #$40
.ad60	85 08		sta $08		                sta toin+0
.ad62	90 0b		bcc $ad6f	                bcc _rts
.ad64	e6 09		inc $09		                inc toin+1
.ad66	60		rts				rts
.ad67					_not_block:
.ad67	a5 06		lda $06		                lda ciblen+0
.ad69	85 08		sta $08		                sta toin+0
.ad6b	a5 07		lda $07		                lda ciblen+1
.ad6d	85 09		sta $09		                sta toin+1
=38					CodeLen	.var *-XtPtr1
=$ad6f					Here1 = *	; remember here
>ad47	26					.byte CodeLen	;patch wh_CodeLength
.ad6f	60		rts		_rts:		rts
>ad70	4d 6f 76 65			Name0:	.text "Move"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=44276					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ad74	a4					.byte (("Move"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= NN+UF	; modifiable copy, remember for later
=47					LinkDisplacement = Nt0-WordListLink
>ad75	50					.byte WordFlags	;wh_Flags
>ad76	03					.byte 3	;wh_CodeLength
>ad77	2f					  .byte LinkDisplacement	; offset to previous nt
=$ad78					XtPtr1 ::= *
=44276					WordListLink ::= Nt0 ; remember the nt of this word for later
.ad78					Move:
.ad78	b5 27		lda $27,x			lda DStack+3,x		; MSB of addr2
.ad7a	d5 29		cmp $29,x			cmp DStack+5,x		; MSB of addr1
.ad7c	d0 04		bne $ad82			bne _ne
.ad7e	b5 26		lda $26,x			lda DStack+2,x		; LSB of addr2
.ad80	d5 28		cmp $28,x			cmp DStack+4,x		; LSB of addr1
.ad82	90 58		bcc $addc	_ne:		bcc CMove
.ad84	d0 10		bne $ad96			bne CMove_up
.ad86	8a		txa		ThreeDrop:	txa		; drop three entries from Data Stack
.ad87	18		clc				clc
.ad88	69 06		adc #$06			adc #6
.ad8a	aa		tax				tax
=19					CodeLen	.var *-XtPtr1
=$ad8b					Here1 = *	; remember here
>ad76	13					.byte CodeLen	;patch wh_CodeLength
.ad8b	60		rts				rts
>ad8c	43 4d 6f 76 65 3e		Name0:	.text "CMove>"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44306					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ad92	c6					.byte (("CMove>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>ad93	50					.byte WordFlags	;wh_Flags
>ad94	03					.byte 3	;wh_CodeLength
>ad95	1e					  .byte LinkDisplacement	; offset to previous nt
=$ad96					XtPtr1 ::= *
=44306					WordListLink ::= Nt0 ; remember the nt of this word for later
.ad96					CMove_up:
.ad96	20 31 b4	jsr $b431			jsr underflow_3
.ad99	b5 26		lda $26,x			lda DStack+2,x
.ad9b	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.ad9d	b5 27		lda $27,x			lda DStack+3,x
.ad9f	18		clc				clc
.ada0	75 25		adc $25,x			adc DStack+1,x
.ada2	85 17		sta $17				sta tmp2+1	; point to last page of destination
.ada4	b5 28		lda $28,x			lda DStack+4,x
.ada6	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.ada8	b5 29		lda $29,x			lda DStack+5,x
.adaa	18		clc				clc
.adab	75 25		adc $25,x			adc DStack+1,x
.adad	85 15		sta $15				sta tmp1+1	; point to last page of source
.adaf	f6 25		inc $25,x			inc DStack+1,x	; allows us to use bne with dec DStack+1,x below
.adb1	b4 24		ldy $24,x			ldy DStack+0,x	; length of last page
.adb3	f0 10		beq $adc5			beq _nopartial
.adb5					_outerloop:
.adb5	88		dey				dey
.adb6	f0 07		beq $adbf			beq _finishpage
.adb8					_innerloop:
.adb8	b1 14		lda ($14),y			lda (tmp1),y
.adba	91 16		sta ($16),y			sta (tmp2),y
.adbc	88		dey				dey
.adbd	d0 f9		bne $adb8			bne _innerloop
.adbf					_finishpage:
.adbf	a0 00		ldy #$00			ldy #0
.adc1	b1 14		lda ($14),y			lda (tmp1),y	; handle y = 0 separately
.adc3	91 16		sta ($16),y			sta (tmp2),y
.adc5					_nopartial:
.adc5	c6 15		dec $15				dec tmp1+1	; back up to previous pages
.adc7	c6 17		dec $17				dec tmp2+1
.adc9	d6 25		dec $25,x			dec DStack+1,x
.adcb	d0 e8		bne $adb5			bne _outerloop
.adcd					_done:
.adcd	4c 86 ad	jmp $ad86			jmp ThreeDrop	; clear up the stack and leave
=58					CodeLen	.var *-XtPtr1
=$add0					Here1 = *	; remember here
>ad94	3a					.byte CodeLen	;patch wh_CodeLength
.add0	4c 3b b4	jmp $b43b	Throw_Stack_14: jmp Throw_Stack
>add3	43 4d 6f 76 65			Name0:	.text "CMove"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=44376					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>add8	a5					.byte (("CMove"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=70					LinkDisplacement = Nt0-WordListLink
>add9	50					.byte WordFlags	;wh_Flags
>adda	03					.byte 3	;wh_CodeLength
>addb	46					  .byte LinkDisplacement	; offset to previous nt
=$addc					XtPtr1 ::= *
=44376					WordListLink ::= Nt0 ; remember the nt of this word for later
.addc					CMove:
.addc	20 31 b4	jsr $b431			jsr underflow_3
.addf	b5 26		lda $26,x			lda DStack+2,x
.ade1	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.ade3	b5 27		lda $27,x			lda DStack+3,x
.ade5	85 17		sta $17				sta tmp2+1
.ade7	b5 28		lda $28,x			lda DStack+4,x
.ade9	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.adeb	b5 29		lda $29,x			lda DStack+5,x
.aded	85 15		sta $15				sta tmp1+1
.adef	a0 00		ldy #$00			ldy #0
.adf1	b5 25		lda $25,x			lda DStack+1,x	; number of whole pages to move
.adf3	f0 0f		beq $ae04			beq _dopartial
.adf5					_page:
.adf5	b1 14		lda ($14),y			lda (tmp1),y
.adf7	91 16		sta ($16),y			sta (tmp2),y
.adf9	c8		iny				iny
.adfa	d0 f9		bne $adf5			bne _page
.adfc	e6 15		inc $15				inc tmp1+1
.adfe	e6 17		inc $17				inc tmp2+1
.ae00	d6 25		dec $25,x			dec DStack+1,x
.ae02	d0 f1		bne $adf5			bne _page
.ae04					_dopartial:
.ae04	b5 24		lda $24,x			lda DStack+0,x	; length of last page
.ae06	f0 09		beq $ae11			beq _done
.ae08					_partial:
.ae08	b1 14		lda ($14),y			lda (tmp1),y
.ae0a	91 16		sta ($16),y			sta (tmp2),y
.ae0c	c8		iny				iny
.ae0d	d6 24		dec $24,x			dec DStack+0,x
.ae0f	d0 f7		bne $ae08			bne _partial
.ae11	4c 86 ad	jmp $ad86	_done:		jmp ThreeDrop	; clear the stack
=56					CodeLen	.var *-XtPtr1
=$ae14					Here1 = *	; remember here
>adda	38					.byte CodeLen	;patch wh_CodeLength
>ae14	55 4d 2a			Name0:	.text "UM*"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=44439					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ae17	43					.byte (("UM*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=63					LinkDisplacement = Nt0-WordListLink
>ae18	10					.byte WordFlags	;wh_Flags
>ae19	03					.byte 3	;wh_CodeLength
>ae1a	3f					  .byte LinkDisplacement	; offset to previous nt
=$ae1b					XtPtr1 ::= *
=44439					WordListLink ::= Nt0 ; remember the nt of this word for later
.ae1b					UM_Star:
.ae1b	e0 25		cpx #$25		cpx #-2*2+DStack0+1	; far enough below end of data stack (& not negative)?
.ae1d	b0 b1		bcs $add0		bcs Throw_Stack_14
.ae1f	18		clc				clc		; tmp2= divsor-1
.ae20	b5 24		lda $24,x			lda DStack+0,x
.ae22	e9 00		sbc #$00			sbc #0
.ae24	85 16		sta $16				sta tmp2+0
.ae26	b5 25		lda $25,x			lda DStack+1,x
.ae28	e9 00		sbc #$00			sbc #0
.ae2a	85 17		sta $17				sta tmp2+1
.ae2c	90 2e		bcc $ae5c			bcc _zero	; is divisor zero?
.ae2e	a9 00		lda #$00			lda #0
.ae30	85 14		sta $14				sta tmp1
.ae32	86 18		stx $18				stx tmp3	; tested for exit from outer loop
.ae34	ca		dex				dex
.ae35	ca		dex				dex
.ae36					_outer_loop:
.ae36	a0 08		ldy #$08			ldy #8		; counter inner loop
.ae38	56 28		lsr $28,x			lsr DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.ae3a					_inner_loop:
.ae3a	90 0c		bcc $ae48			bcc _no_add
.ae3c	85 15		sta $15				sta tmp1+1	; save time, don't CLC
.ae3e	a5 14		lda $14				lda tmp1
.ae40	65 16		adc $16				adc tmp2
.ae42	85 14		sta $14				sta tmp1
.ae44	a5 15		lda $15				lda tmp1+1
.ae46	65 17		adc $17				adc tmp2+1
.ae48					_no_add:
.ae48	6a		ror a				ror
.ae49	66 14		ror $14				ror tmp1
.ae4b	76 28		ror $28,x			ror DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.ae4d	88		dey				dey
.ae4e	d0 ea		bne $ae3a			bne _inner_loop ; go back for one more shift?
.ae50	e8		inx				inx
.ae51	e4 18		cpx $18				cpx tmp3
.ae53	d0 e1		bne $ae36			bne _outer_loop ; go back for eight more shifts?
.ae55	95 25		sta $25,x			sta DStack+1,x
.ae57	a5 14		lda $14				lda tmp1
.ae59	95 24		sta $24,x			sta DStack+0,x
.ae5b	60		rts				rts
.ae5c	a9 00		lda #$00	_zero:		lda #0
.ae5e	95 26		sta $26,x			sta DStack+2,x
.ae60	95 27		sta $27,x			sta DStack+3,x
.ae62	60		rts				rts
=72					CodeLen	.var *-XtPtr1
=$ae63					Here1 = *	; remember here
>ae19	48					.byte CodeLen	;patch wh_CodeLength
>ae63	4d 2a				Name0:	.text "M*"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=44517					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ae65	42					.byte (("M*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=78					LinkDisplacement = Nt0-WordListLink
>ae66	10					.byte WordFlags	;wh_Flags
>ae67	03					.byte 3	;wh_CodeLength
>ae68	4e					  .byte LinkDisplacement	; offset to previous nt
=$ae69					XtPtr1 ::= *
=44517					WordListLink ::= Nt0 ; remember the nt of this word for later
.ae69					M_Star:
.ae69	e0 25		cpx #$25		cpx #-2*2+DStack0+1	; far enough below end of data stack (& not negative)?
.ae6b	b0 6b		bcs $aed8		bcs Throw_Stack_15
.ae6d	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.ae6f	55 27		eor $27,x			eor DStack+3,x	; MSB of n2
.ae71	08		php				php
.ae72	20 bd c6	jsr $c6bd			jsr Abs
.ae75	20 6e cf	jsr $cf6e			jsr Swap
.ae78	20 bd c6	jsr $c6bd			jsr Abs
.ae7b	20 1b ae	jsr $ae1b			jsr UM_Star		; ( d )
.ae7e	28		plp				plp			; handle the sign
.ae7f	10 03		bpl $ae84			bpl +
.ae81	4c d4 c6	jmp $c6d4			jmp DNegate
.ae84					+
=27					CodeLen	.var *-XtPtr1
=$ae84					Here1 = *	; remember here
>ae67	1b					.byte CodeLen	;patch wh_CodeLength
.ae84	60		rts				rts
>ae85	2a				Name0:	.text "*"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=44550					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ae86	41					.byte (("*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>ae87	00					.byte WordFlags	;wh_Flags
>ae88	03					.byte 3	;wh_CodeLength
>ae89	21					  .byte LinkDisplacement	; offset to previous nt
=$ae8a					XtPtr1 ::= *
=44550					WordListLink ::= Nt0 ; remember the nt of this word for later
.ae8a					Star:
.ae8a	20 1b ae	jsr $ae1b			jsr UM_Star
.ae8d	e8		inx				inx		; D>S	drop hi cell
.ae8e	e8		inx				inx
=5					CodeLen	.var *-XtPtr1
=$ae8f					Here1 = *	; remember here
>ae88	05					.byte CodeLen	;patch wh_CodeLength
.ae8f	60		rts				rts
>ae90	55 4d 2f 4d 6f 64		Name0:	.text "UM/Mod"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44566					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ae96	86					.byte (("UM/Mod"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>ae97	10					.byte WordFlags	;wh_Flags
>ae98	03					.byte 3	;wh_CodeLength
>ae99	10					  .byte LinkDisplacement	; offset to previous nt
=$ae9a					XtPtr1 ::= *
=44566					WordListLink ::= Nt0 ; remember the nt of this word for later
.ae9a					UM_Slash_Mod:
.ae9a	e0 23		cpx #$23		cpx #-2*3+DStack0+1	; far enough below end of data stack (& not negative)?
.ae9c	b0 3a		bcs $aed8		bcs Throw_Stack_15
.ae9e	b5 24		lda $24,x			lda DStack+0,x		; catch division by zero
.aea0	15 25		ora $25,x			ora DStack+1,x
.aea2	f0 2f		beq $aed3			beq _DivByZero
.aea4	a0 10		ldy #$10			ldy #16			; for 16 bits
.aea6					_loop:
.aea6	36 28		rol $28,x			rol DStack+4,x		;   rotate low cell of dividend one bit left
.aea8	36 29		rol $29,x			rol DStack+5,x
.aeaa	36 26		rol $26,x			rol DStack+2,x		;   rotate high cell of dividend one bit left
.aeac	36 27		rol $27,x			rol DStack+3,x
.aeae	b0 0a		bcs $aeba			bcs _subtract		;   overflow?
.aeb0	b5 26		lda $26,x			lda DStack+2,x		;   dividend.hi >= divisor?
.aeb2	d5 24		cmp $24,x			cmp DStack+0,x
.aeb4	b5 27		lda $27,x			lda DStack+3,x
.aeb6	f5 25		sbc $25,x			sbc DStack+1,x
.aeb8	90 0d		bcc $aec7			bcc _next
.aeba	b5 26		lda $26,x	_subtract:	lda DStack+2,x		;   dividend.hi -= divisor
.aebc	f5 24		sbc $24,x			sbc DStack+0,x
.aebe	95 26		sta $26,x			sta DStack+2,x
.aec0	b5 27		lda $27,x			lda DStack+3,x
.aec2	f5 25		sbc $25,x			sbc DStack+1,x
.aec4	95 27		sta $27,x			sta DStack+3,x
.aec6	38		sec				sec			;   it always fits
.aec7	88		dey		_next:		dey			;  next
.aec8	d0 dc		bne $aea6			bne _loop
.aeca	36 28		rol $28,x			rol DStack+4,x		; finish rotating quotient bit in
.aecc	36 29		rol $29,x			rol DStack+5,x
.aece	e8		inx				inx			; drop divisor
.aecf	e8		inx				inx
.aed0	4c 6e cf	jmp $cf6e			jmp Swap
.aed3	a9 f6		lda #$f6	_DivByZero:	lda #$100+err_DivideBy0
.aed5	4c 74 b4	jmp $b474			jmp ThrowA
=62					CodeLen	.var *-XtPtr1
=$aed8					Here1 = *	; remember here
>ae98	3e					.byte CodeLen	;patch wh_CodeLength
.aed8	4c 3b b4	jmp $b43b	Throw_Stack_15: jmp Throw_Stack
>aedb	53 4d 2f 52 65 6d		Name0:	.text "SM/Rem"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44641					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aee1	a6					.byte (("SM/Rem"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=75					LinkDisplacement = Nt0-WordListLink
>aee2	10					.byte WordFlags	;wh_Flags
>aee3	03					.byte 3	;wh_CodeLength
>aee4	4b					  .byte LinkDisplacement	; offset to previous nt
=$aee5					XtPtr1 ::= *
=44641					WordListLink ::= Nt0 ; remember the nt of this word for later
.aee5					SM_Slash_Rem:
.aee5	e0 23		cpx #$23		cpx #-2*3+DStack0+1	; far enough below end of data stack (& not negative)?
.aee7	b0 ef		bcs $aed8		bcs Throw_Stack_15
.aee9	b5 27		lda $27,x			lda DStack+3,x
.aeeb	08		php				php
.aeec	55 25		eor $25,x			eor DStack+1,x
.aeee	08		php				php
.aeef	20 bd c6	jsr $c6bd			jsr Abs
.aef2	e8		inx				inx		; pretend we pushed n1 to R
.aef3	e8		inx				inx
.aef4	20 f0 c6	jsr $c6f0			jsr DAbs
.aef7	ca		dex				dex
.aef8	ca		dex				dex
.aef9	20 9a ae	jsr $ae9a			jsr UM_Slash_Mod	; UM/MOD
.aefc	28		plp				plp
.aefd	10 03		bpl $af02			bpl +
.aeff	20 a5 c6	jsr $c6a5			jsr Negate
.af02					+
.af02	28		plp				plp
.af03	10 07		bpl $af0c			bpl _done
.af05	e8		inx				inx		; pretend we pushed quotient to R
.af06	e8		inx				inx
.af07	20 a5 c6	jsr $c6a5			jsr Negate
.af0a	ca		dex				dex
.af0b	ca		dex				dex
.af0c					_done:
=39					CodeLen	.var *-XtPtr1
=$af0c					Here1 = *	; remember here
>aee3	27					.byte CodeLen	;patch wh_CodeLength
.af0c	60		rts				rts
>af0d	46 4d 2f 4d 6f 64		Name0:	.text "FM/Mod"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44691					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af13	86					.byte (("FM/Mod"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=50					LinkDisplacement = Nt0-WordListLink
>af14	10					.byte WordFlags	;wh_Flags
>af15	03					.byte 3	;wh_CodeLength
>af16	32					  .byte LinkDisplacement	; offset to previous nt
=$af17					XtPtr1 ::= *
=44691					WordListLink ::= Nt0 ; remember the nt of this word for later
.af17					FM_Slash_Mod:
.af17	e0 23		cpx #$23		cpx #-2*3+DStack0+1	; far enough below end of data stack (& not negative)?
.af19	b0 bd		bcs $aed8		bcs Throw_Stack_15
.af1b	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.af1d	08		php				php		;  save sign
.af1e	10 0a		bpl $af2a			bpl +
.af20	20 a5 c6	jsr $c6a5			jsr Negate	; NEGATE
.af23	e8		inx				inx
.af24	e8		inx				inx
.af25	20 d4 c6	jsr $c6d4			jsr DNegate	; DNEGATE
.af28	ca		dex				dex
.af29	ca		dex				dex
.af2a					+
.af2a	b5 27		lda $27,x			lda DStack+3,x	; MSB of high word of d
.af2c	10 0d		bpl $af3b			bpl +
.af2e	18		clc				clc
.af2f	b5 24		lda $24,x			lda DStack+0,x	; LSB of n1
.af31	75 26		adc $26,x			adc DStack+2,x	; LSB of dh
.af33	95 26		sta $26,x			sta DStack+2,x
.af35	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.af37	75 27		adc $27,x			adc DStack+3,x	; MSB of dh
.af39	95 27		sta $27,x			sta DStack+3,x
.af3b					+
.af3b	20 9a ae	jsr $ae9a			jsr UM_Slash_Mod	; ( d n1 -- rem n2 )
.af3e	28		plp				plp
.af3f	10 07		bpl $af48			bpl +
.af41	e8		inx				inx		; pretend that we SWAP
.af42	e8		inx				inx
.af43	20 a5 c6	jsr $c6a5			jsr Negate
.af46	ca		dex				dex
.af47	ca		dex				dex
.af48					+
=49					CodeLen	.var *-XtPtr1
=$af48					Here1 = *	; remember here
>af15	31					.byte CodeLen	;patch wh_CodeLength
.af48	60		rts				rts
>af49	2f 4d 6f 64			Name0:	.text "/Mod"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=44749					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af4d	84					.byte (("/Mod"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=58					LinkDisplacement = Nt0-WordListLink
>af4e	10					.byte WordFlags	;wh_Flags
>af4f	03					.byte 3	;wh_CodeLength
>af50	3a					  .byte LinkDisplacement	; offset to previous nt
=$af51					XtPtr1 ::= *
=44749					WordListLink ::= Nt0 ; remember the nt of this word for later
.af51	20 51 cf	jsr $cf51	Slash_Mod:	jsr Dup			; ( n1 n_div n_div )
.af54	a0 00		ldy #$00			ldy #0			; sign extend n1
.af56	b5 29		lda $29,x			lda DStack+5,x
.af58	10 01		bpl $af5b			bpl +
.af5a	88		dey				dey
.af5b	94 26		sty $26,x	+		sty DStack+2,x
.af5d	94 27		sty $27,x			sty DStack+3,x		; ( d1 n_div )
.af5f	4c e5 ae	jmp $aee5			jmp SM_Slash_Rem	; SM/REM
=17					CodeLen	.var *-XtPtr1
=$af62					Here1 = *	; remember here
>af4f	11					.byte CodeLen	;patch wh_CodeLength
>af62	2f				Name0:	.text "/"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=44771					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af63	e1					.byte (("/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>af64	10					.byte WordFlags	;wh_Flags
>af65	03					.byte 3	;wh_CodeLength
>af66	16					  .byte LinkDisplacement	; offset to previous nt
=$af67					XtPtr1 ::= *
=44771					WordListLink ::= Nt0 ; remember the nt of this word for later
.af67	20 51 af	jsr $af51	Slash:		jsr Slash_Mod
.af6a	4c 8b c9	jmp $c98b			jmp Nip		; Nip remainder
=6					CodeLen	.var *-XtPtr1
=$af6d					Here1 = *	; remember here
>af65	06					.byte CodeLen	;patch wh_CodeLength
>af6d	4d 6f 64			Name0:	.text "Mod"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=44784					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af70	83					.byte (("Mod"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>af71	00					.byte WordFlags	;wh_Flags
>af72	03					.byte 3	;wh_CodeLength
>af73	0d					  .byte LinkDisplacement	; offset to previous nt
=$af74					XtPtr1 ::= *
=44784					WordListLink ::= Nt0 ; remember the nt of this word for later
.af74	20 51 af	jsr $af51	Mod:		jsr Slash_Mod
.af77	e8		inx				inx		; Drop quotient
.af78	e8		inx				inx
=5					CodeLen	.var *-XtPtr1
=$af79					Here1 = *	; remember here
>af72	05					.byte CodeLen	;patch wh_CodeLength
.af79	60		rts				rts
>af7a	2a 2f 4d 6f 64			Name0:	.text "*/Mod"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=44799					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af7f	85					.byte (("*/Mod"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>af80	50					.byte WordFlags	;wh_Flags
>af81	03					.byte 3	;wh_CodeLength
>af82	0f					  .byte LinkDisplacement	; offset to previous nt
=$af83					XtPtr1 ::= *
=44799					WordListLink ::= Nt0 ; remember the nt of this word for later
.af83					Star_Slash_Mod:
.af83	20 31 b4	jsr $b431			jsr underflow_3
.af86	20 db ce	jsr $cedb			jsr To_R
.af89	20 69 ae	jsr $ae69			jsr M_Star
.af8c	20 f9 ce	jsr $cef9			jsr R_From
.af8f	4c e5 ae	jmp $aee5			jmp SM_Slash_Rem
=15					CodeLen	.var *-XtPtr1
=$af92					Here1 = *	; remember here
>af81	0f					.byte CodeLen	;patch wh_CodeLength
>af92	2a 2f				Name0:	.text "*/"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=44820					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af94	e2					.byte (("*/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>af95	10					.byte WordFlags	;wh_Flags
>af96	03					.byte 3	;wh_CodeLength
>af97	15					  .byte LinkDisplacement	; offset to previous nt
=$af98					XtPtr1 ::= *
=44820					WordListLink ::= Nt0 ; remember the nt of this word for later
.af98					Star_Slash:
.af98	20 83 af	jsr $af83			jsr Star_Slash_Mod
.af9b	4c 8b c9	jmp $c98b			jmp Nip			; mod
=6					CodeLen	.var *-XtPtr1
=$af9e					Here1 = *	; remember here
>af96	06					.byte CodeLen	;patch wh_CodeLength
>af9e	4d 2a 2f			Name0:	.text "M*/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=44833					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>afa1	e3					.byte (("M*/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>afa2	10					.byte WordFlags	;wh_Flags
>afa3	03					.byte 3	;wh_CodeLength
>afa4	0d					  .byte LinkDisplacement	; offset to previous nt
=$afa5					XtPtr1 ::= *
=44833					WordListLink ::= Nt0 ; remember the nt of this word for later
.afa5					m_star_slash:
.afa5	20 36 b4	jsr $b436	                jsr underflow_4
.afa8	b5 25		lda $25,x			lda DStack+1,x		; calc result sign
.afaa	55 27		eor $27,x			eor DStack+3,x
.afac	55 29		eor $29,x			eor DStack+5,x
.afae	08		php				php
.afaf	20 bd c6	jsr $c6bd	                jsr Abs			; Abs
.afb2	20 db ce	jsr $cedb	                jsr To_R		; >R		( d1 n1 ) ( R: sign abs(n2) )
.afb5	20 bd c6	jsr $c6bd	                jsr Abs			; Abs
.afb8	20 db ce	jsr $cedb	                jsr To_R		; >R		( d1 ) ( R: sign abs(n2) abs(n1) )
.afbb	20 f0 c6	jsr $c6f0	                jsr DAbs		; DAbs		( abs(d1) ) ( R: sign abs(n2) abs(n1) )
.afbe	20 6e cf	jsr $cf6e	                jsr Swap		; Swap
.afc1	20 14 cf	jsr $cf14	                jsr R_Fetch		; R@
.afc4	20 1b ae	jsr $ae1b	                jsr UM_Star		; UM*
.afc7	20 4c ce	jsr $ce4c	                jsr Rot			; Rot
.afca	20 f9 ce	jsr $cef9	                jsr R_From		; R>
.afcd	20 1b ae	jsr $ae1b	                jsr UM_Star		; UM*
.afd0	20 4c ce	jsr $ce4c	                jsr Rot			; Rot
.afd3	20 6d ca	jsr $ca6d	                jsr UMPlus		; 0 D+
.afd6	20 14 cf	jsr $cf14	                jsr R_Fetch		; R@
.afd9	20 9a ae	jsr $ae9a	                jsr UM_Slash_Mod	; UM/Mod
.afdc	20 71 ce	jsr $ce71	                jsr Not_Rot		; Rot Rot
.afdf	20 f9 ce	jsr $cef9	                jsr R_From		; R>
.afe2	20 9a ae	jsr $ae9a	                jsr UM_Slash_Mod	; UM/Mod
.afe5	20 8b c9	jsr $c98b	                jsr Nip			; Swap Drop
.afe8	20 6e cf	jsr $cf6e	                jsr Swap		; Swap
.afeb	28		plp				plp
.afec	10 03		bpl $aff1			bpl _rts		; ... 0< if ...
.afee	4c d4 c6	jmp $c6d4	                jmp DNegate
.aff1	60		rts		_rts:		rts
=77					CodeLen	.var *-XtPtr1
=$aff2					Here1 = *	; remember here
>afa3	4d					.byte CodeLen	;patch wh_CodeLength
>aff2	45 76 61 6c 75 61 74 65		Name0:	.text "Evaluate"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=44922					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>affa	a8					.byte (("Evaluate"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=89					LinkDisplacement = Nt0-WordListLink
>affb	10					.byte WordFlags	;wh_Flags
>affc	03					.byte 3	;wh_CodeLength
>affd	59					  .byte LinkDisplacement	; offset to previous nt
=$affe					XtPtr1 ::= *
=44922					WordListLink ::= Nt0 ; remember the nt of this word for later
.affe					Evaluate:
.affe	18		clc				clc			; signal to zero BLK.
.afff					load_evaluate:
.afff	ad 0d 03	lda $030d			lda BlkV+1	; Save the current value of BLK on the return stack.
.b002	48		pha				pha
.b003	ad 0c 03	lda $030c			lda BlkV+0
.b006	48		pha				pha
.b007	b0 08		bcs $b011			bcs +		; See if we should zero BLK.
.b009	a9 00		lda #$00			lda #0		; Set BLK to zero.
.b00b	8d 0c 03	sta $030c			sta BlkV+0
.b00e	8d 0d 03	sta $030d			sta BlkV+1
.b011					+
.b011	20 dc c3	jsr $c3dc			jsr Input_To_R	; Save the input state to the Return Stack
.b014	a9 ff		lda #$ff			lda #$ff	; SOURCE-ID= -1
.b016	85 02		sta $02				sta insrc+0
.b018	85 03		sta $03				sta insrc+1
.b01a	a9 00		lda #$00			lda #0		; >IN= zero
.b01c	85 08		sta $08				sta toin+0
.b01e	85 09		sta $09				sta toin+1
.b020	20 ef b3	jsr $b3ef			jsr PopYA	; ciblen= string length (u)
.b023	85 06		sta $06				sta ciblen+0
.b025	84 07		sty $07				sty ciblen+1
.b027	20 ef b3	jsr $b3ef			jsr PopYA	; cib= string addr
.b02a	85 04		sta $04				sta cib+0
.b02c	84 05		sty $05				sty cib+1
.b02e	20 2c b5	jsr $b52c			jsr interpret	; ( -- )
.b031	20 fd c3	jsr $c3fd			jsr R_To_Input	; restore input state
.b034	68		pla				pla		; Restore BLK from the return stack.
.b035	8d 0c 03	sta $030c			sta BlkV+0
.b038	68		pla				pla
.b039	8d 0d 03	sta $030d			sta BlkV+1
=62					CodeLen	.var *-XtPtr1
=$b03c					Here1 = *	; remember here
>affc	3e					.byte CodeLen	;patch wh_CodeLength
.b03c	60		rts				rts
>b03d	3e 4e 75 6d 62 65 72		Name0:	.text ">Number"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=44996					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b044	47					.byte ((">Number"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=74					LinkDisplacement = Nt0-WordListLink
>b045	50					.byte WordFlags	;wh_Flags
>b046	03					.byte 3	;wh_CodeLength
>b047	4a					  .byte LinkDisplacement	; offset to previous nt
=$b048					XtPtr1 ::= *
=44996					WordListLink ::= Nt0 ; remember the nt of this word for later
.b048					To_Number:
.b048	20 36 b4	jsr $b436			jsr underflow_4
.b04b	b5 24		lda $24,x			lda DStack+0,x		; no chars left?
.b04d	f0 72		beq $b0c1			beq _done
.b04f					_Char_loop:
.b04f	a1 26		lda ($26,x)			lda (DStack+2,x)		; Get next character
.b051	c9 30		cmp #$30			cmp #'0'		; convert to value (Digit_Question)
.b053	90 6c		bcc $b0c1			bcc _done
.b055	c9 3a		cmp #$3a			cmp #'9'+1
.b057	90 08		bcc $b061			bcc _digit
.b059	29 df		and #$df			and #$df		;   ASCII uppercase
.b05b	c9 41		cmp #$41			cmp #'A'
.b05d	90 62		bcc $b0c1			bcc _done
.b05f	e9 07		sbc #$07			sbc #7 ;'A'-'0'-10	;   to make 'A'=10 below
.b061	38		sec		_digit:		sec
.b062	e9 30		sbc #$30			sbc #'0'
.b064	cd 00 03	cmp $0300			cmp base		; must be < base
.b067	b0 58		bcs $b0c1			bcs _done
.b069	48		pha				pha			; Save char value
.b06a	20 63 c5	jsr $c563			jsr Two_Over		;   copy ud to work (multiplicand)
.b06d	a9 00		lda #$00			lda #0			;   zero ud (product)
.b06f	95 2c		sta $2c,x			sta DStack+8,x
.b071	95 2d		sta $2d,x			sta DStack+9,x
.b073	95 2e		sta $2e,x			sta DStack+10,x
.b075	95 2f		sta $2f,x			sta DStack+11,x
.b077	ad 00 03	lda $0300			lda base		;   get multiplier
.b07a	d0 23		bne $b09f			bne _Mul_Test
.b07c	48		pha		_Mul_Add:	pha			;   save multiplier
.b07d	18		clc				clc			;   ud += work
.b07e	b5 26		lda $26,x			lda DStack+2,x
.b080	75 2e		adc $2e,x			adc DStack+10,x
.b082	95 2e		sta $2e,x			sta DStack+10,x
.b084	b5 27		lda $27,x			lda DStack+3,x
.b086	75 2f		adc $2f,x			adc DStack+11,x
.b088	95 2f		sta $2f,x			sta DStack+11,x
.b08a	b5 24		lda $24,x			lda DStack+0,x
.b08c	75 2c		adc $2c,x			adc DStack+8,x
.b08e	95 2c		sta $2c,x			sta DStack+8,x
.b090	b5 25		lda $25,x			lda DStack+1,x
.b092	75 2d		adc $2d,x			adc DStack+9,x
.b094	95 2d		sta $2d,x			sta DStack+9,x
.b096	68		pla				pla			;   restore multiplier
.b097	16 26		asl $26,x	_Mul_Shift:	asl DStack+2,x		;   work <<= 1
.b099	36 27		rol $27,x			rol DStack+3,x
.b09b	36 24		rol $24,x			rol DStack+0,x
.b09d	36 25		rol $25,x			rol DStack+1,x
.b09f	4a		lsr a		_Mul_Test:	lsr a			;   shift multiplier
.b0a0	b0 da		bcs $b07c			bcs _Mul_Add
.b0a2	d0 f3		bne $b097			bne _Mul_Shift
.b0a4	e8		inx				inx			;   2Drop work
.b0a5	e8		inx				inx
.b0a6	e8		inx				inx
.b0a7	e8		inx				inx
.b0a8	68		pla				pla			; recover value
.b0a9	18		clc				clc			; add to ud
.b0aa	75 2a		adc $2a,x			adc DStack+6,x
.b0ac	95 2a		sta $2a,x			sta DStack+6,x
.b0ae	90 0a		bcc $b0ba			bcc +
.b0b0	f6 2b		inc $2b,x			inc DStack+7,x
.b0b2	d0 06		bne $b0ba			bne +
.b0b4	f6 28		inc $28,x			inc DStack+4,x
.b0b6	d0 02		bne $b0ba			bne +
.b0b8	f6 29		inc $29,x			inc DStack+5,x
.b0ba					+
.b0ba	20 5f ca	jsr $ca5f			jsr NOS_One_Plus	; consume the char
.b0bd	d6 24		dec $24,x			dec DStack+0,x
.b0bf	d0 8e		bne $b04f			bne _Char_loop
.b0c1					_done:
=121					CodeLen	.var *-XtPtr1
=$b0c1					Here1 = *	; remember here
>b046	79					.byte CodeLen	;patch wh_CodeLength
.b0c1	60		rts				rts
>b0c2	4e 75 6d 62 65 72		Name0:	.text "Number"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=45128					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b0c8	46					.byte (("Number"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=132					LinkDisplacement = Nt0-WordListLink
>b0c9	50					.byte WordFlags	;wh_Flags
>b0ca	03					.byte 3	;wh_CodeLength
>b0cb	84					  .byte LinkDisplacement	; offset to previous nt
=$b0cc					XtPtr1 ::= *
=45128					WordListLink ::= Nt0 ; remember the nt of this word for later
.b0cc					Number:
.b0cc	20 2c b4	jsr $b42c			jsr underflow_2
.b0cf	a9 00		lda #$00			lda #0
.b0d1	85 1a		sta $1a				sta tmp4+0	; flag for double
.b0d3	85 1b		sta $1b				sta tmp4+1	; flag for minus
.b0d5	ad 00 03	lda $0300			lda base
.b0d8	48		pha				pha
.b0d9	20 9f cc	jsr $cc9f			jsr Two_dup		; ( addr u addr u )
.b0dc	a1 26		lda ($26,x)			lda (DStack+2,x)	; get 1st char
.b0de	20 a0 b1	jsr $b1a0			jsr _MinusCheck		; a minus sign?
.b0e1	a0 0a		ldy #$0a			ldy #10			; decimal?
.b0e3	c9 23		cmp #$23			cmp #'#'
.b0e5	f0 35		beq $b11c			beq _base_changed
.b0e7	a0 10		ldy #$10			ldy #16			; hex?
.b0e9	c9 24		cmp #$24			cmp #'$'
.b0eb	f0 2f		beq $b11c			beq _base_changed
.b0ed	a0 02		ldy #$02			ldy #2			; binary?
.b0ef	c9 25		cmp #$25			cmp #'%'
.b0f1	f0 29		beq $b11c			beq _base_changed
.b0f3	c9 27		cmp #$27			cmp #$27		; ASCII for "'"
.b0f5	d0 2f		bne $b126			bne _check_dot
.b0f7	b5 24		lda $24,x			lda DStack+0,x	; length=3 ?
.b0f9	c9 03		cmp #$03			cmp #3
.b0fb	d0 1c		bne $b119			bne _not_a_char
.b0fd	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b0ff	85 1c		sta $1c				sta tmp5
.b101	b5 27		lda $27,x			lda DStack+3,x
.b103	85 1d		sta $1d				sta tmp5+1
.b105	a0 02		ldy #$02			ldy #2
.b107	b1 1c		lda ($1c),y			lda (tmp5),y
.b109	c9 27		cmp #$27			cmp #$27	; ASCII for "'"
.b10b	d0 0c		bne $b119			bne _not_a_char
.b10d	88		dey				dey		; The char we want is between the single quotes.
.b10e	b1 1c		lda ($1c),y			lda (tmp5),y
.b110	95 26		sta $26,x			sta DStack+2,x
.b112	a9 00		lda #$00			lda #0
.b114	95 27		sta $27,x			sta DStack+3,x
.b116	4c 75 b1	jmp $b175			jmp _drop_original_string ; Single flag will drop the TOS for us.
.b119					_not_a_char:
.b119	4c 52 b1	jmp $b152			jmp _number_error
.b11c					_base_changed:
.b11c	8c 00 03	sty $0300			sty base	; Switch to the new base
.b11f	20 5f ca	jsr $ca5f			jsr NOS_One_Plus ; start one character later
.b122	d6 24		dec $24,x			dec DStack+0,x	; decrease string length by one
.b124	a1 26		lda ($26,x)			lda (DStack+2,x) ; Load the first char again
.b126					_check_dot:
.b126	20 a0 b1	jsr $b1a0			jsr _MinusCheck
.b129	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b12b	85 1c		sta $1c				sta tmp5
.b12d	b5 27		lda $27,x			lda DStack+3,x
.b12f	85 1d		sta $1d				sta tmp5+1
.b131	b4 24		ldy $24,x			ldy DStack+0,x	; Y now points to the first character after the string,
.b133	88		dey				dey		; but we need the last character
.b134	b1 1c		lda ($1c),y			lda (tmp5),y
.b136	c9 2e		cmp #$2e			cmp #'.'
.b138	d0 04		bne $b13e			bne _main
.b13a	c6 1a		dec $1a				dec tmp4	; Flag the fact
.b13c	d6 24		dec $24,x			dec DStack+0,x	; reduce string length by one
.b13e					_main:
.b13e	20 9f cc	jsr $cc9f			jsr Two_Dup
.b141	a9 00		lda #$00			lda #0
.b143	95 28		sta $28,x			sta DStack+4,x	; clear ud
.b145	95 29		sta $29,x			sta DStack+5,x
.b147	95 2a		sta $2a,x			sta DStack+6,x
.b149	95 2b		sta $2b,x			sta DStack+7,x
.b14b	20 48 b0	jsr $b048			jsr To_Number	; ( ud addr u -- ud addr u )
.b14e	b5 24		lda $24,x			lda DStack+0,x
.b150	f0 1f		beq $b171			beq _all_converted
.b152					_number_error:
.b152	20 31 c5	jsr $c531			jsr Two_drop	; >NUMBER modified addr u
.b155	20 31 c5	jsr $c531			jsr Two_drop	; ud   (partially converted number)
.b158	a9 3e		lda #$3e			lda #'>'	; print the unknown
.b15a	20 bb cd	jsr $cdbb			jsr Emit_A	; word using the original addr u we saved at the beginning.
.b15d	20 d3 cd	jsr $cdd3			jsr Type
.b160	a9 3c		lda #$3c			lda #'<'
.b162	20 bb cd	jsr $cdbb			jsr Emit_A
.b165	20 c7 cd	jsr $cdc7			jsr Space
.b168	68		pla				pla		; restore base
.b169	8d 00 03	sta $0300			sta base
.b16c	a9 f3		lda #$f3			lda #$100+err_UndefinedWord
.b16e	4c 74 b4	jmp $b474			jmp ThrowA
.b171					_all_converted:
.b171	e8		inx				inx		; Drop the current addr u
.b172	e8		inx				inx
.b173	e8		inx				inx
.b174	e8		inx				inx
.b175					_drop_original_string:
.b175	20 d3 bf	jsr $bfd3			jsr TwoNip	 ; Drop the original addr u
.b178	a5 1a		lda $1a				lda tmp4	; flag for double
.b17a	f0 10		beq $b18c			beq _single
.b17c	a9 20		lda #$20			lda #%00100000
.b17e	05 0c		ora $0c				ora status
.b180	85 0c		sta $0c				sta status
.b182	a5 1b		lda $1b				lda tmp4+1
.b184	f0 15		beq $b19b			beq _done	; no minus, all done
.b186	20 d4 c6	jsr $c6d4			jsr DNegate
.b189	4c 9b b1	jmp $b19b			jmp _done
.b18c					_single:
.b18c	e8		inx				inx		; convert ud to u
.b18d	e8		inx				inx
.b18e	a9 df		lda #$df			lda #$ff-%00100000
.b190	25 0c		and $0c				and status
.b192	85 0c		sta $0c				sta status
.b194	a5 1b		lda $1b				lda tmp4+1
.b196	f0 03		beq $b19b			beq _done	; no minus, all done
.b198	20 a5 c6	jsr $c6a5			jsr Negate
.b19b					_done:
.b19b	68		pla				pla
.b19c	8d 00 03	sta $0300			sta base
=211					CodeLen	.var *-XtPtr1
=$b19f					Here1 = *	; remember here
>b0ca	d3					.byte CodeLen	;patch wh_CodeLength
.b19f	60		rts				rts
.b1a0					_MinusCheck:
.b1a0	c9 2d		cmp #$2d			cmp #'-'		; a minus sign?
.b1a2	d0 09		bne $b1ad			bne +
.b1a4	c6 1b		dec $1b				dec tmp4+1		; set flag
.b1a6	20 5f ca	jsr $ca5f			jsr NOS_One_Plus	; start one character later
.b1a9	d6 24		dec $24,x			dec DStack+0,x		; decrease string length by one
.b1ab	a1 26		lda ($26,x)			lda (DStack+2,x)	; get next char
.b1ad	60		rts		+		rts
>b1ae	48 65 78			Name0:	.text "Hex"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=45361					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1b1	03					.byte (("Hex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=233					LinkDisplacement = Nt0-WordListLink
>b1b2	10					.byte WordFlags	;wh_Flags
>b1b3	03					.byte 3	;wh_CodeLength
>b1b4	e9					  .byte LinkDisplacement	; offset to previous nt
=$b1b5					XtPtr1 ::= *
=45361					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1b5	a9 10		lda #$10	Hex:		lda #16
.b1b7	d0 0d		bne $b1c6			bne Decimal_a
=4					CodeLen	.var *-XtPtr1
=$b1b9					Here1 = *	; remember here
>b1b3	04					.byte CodeLen	;patch wh_CodeLength
>b1b9	44 65 63 69 6d 61 6c		Name0:	.text "Decimal"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=45376					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1c0	87					.byte (("Decimal"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>b1c1	00					.byte WordFlags	;wh_Flags
>b1c2	03					.byte 3	;wh_CodeLength
>b1c3	0f					  .byte LinkDisplacement	; offset to previous nt
=$b1c4					XtPtr1 ::= *
=45376					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1c4	a9 0a		lda #$0a	Decimal:	lda #10
.b1c6	8d 00 03	sta $0300	Decimal_a:	sta base+0
.b1c9	a9 00		lda #$00			lda #0
.b1cb	8d 01 03	sta $0301			sta base+1		; paranoid
=10					CodeLen	.var *-XtPtr1
=$b1ce					Here1 = *	; remember here
>b1c2	0a					.byte CodeLen	;patch wh_CodeLength
.b1ce	60		rts				rts
>b1cf	42 61 73 65			Name0:	.text "Base"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=45395					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1d3	a4					.byte (("Base"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>b1d4	10					.byte WordFlags	;wh_Flags
>b1d5	03					.byte 3	;wh_CodeLength
>b1d6	13					  .byte LinkDisplacement	; offset to previous nt
=$b1d7					XtPtr1 ::= *
=45395					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1d7	a0 03		ldy #$03			ldy #>base
.b1d9	a9 00		lda #$00			lda #<base
.b1db	4c ae b7	jmp $b7ae			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$b1de					Here1 = *	; remember here
>b1d5	07					.byte CodeLen	;patch wh_CodeLength
>b1de	43 6f 75 6e 74			Name0:	.text "Count"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=45411					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1e3	85					.byte (("Count"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>b1e4	50					.byte WordFlags	;wh_Flags
>b1e5	03					.byte 3	;wh_CodeLength
>b1e6	10					  .byte LinkDisplacement	; offset to previous nt
=$b1e7					XtPtr1 ::= *
=45411					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1e7					Count:
.b1e7	20 18 b4	jsr $b418			jsr underflow_1
.b1ea	a1 24		lda ($24,x)			lda (DStack+0,x)	; A= number of characters
.b1ec	f6 24		inc $24,x			inc DStack+0,x		; move start address up by one
.b1ee	d0 02		bne $b1f2			bne +
.b1f0	f6 25		inc $25,x			inc DStack+1,x
.b1f2					+
.b1f2	4c dd b7	jmp $b7dd			jmp PushZA		; push number of characters, return
=14					CodeLen	.var *-XtPtr1
=$b1f5					Here1 = *	; remember here
>b1e5	0e					.byte CodeLen	;patch wh_CodeLength
>b1f5	3f 50 61 69 72 43 74 6c		Name0:	.text "?PairCtlA"	;  name of word as a string, ending at wh_NameLastChar
>b1fd	41
=9					NameLength = *-Name0
=45438					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1fe	29					.byte (("?PairCtlA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>b1ff	10					.byte WordFlags	;wh_Flags
>b200	03					.byte 3	;wh_CodeLength
>b201	1b					  .byte LinkDisplacement	; offset to previous nt
=$b202					XtPtr1 ::= *
=45438					WordListLink ::= Nt0 ; remember the nt of this word for later
.b202	d5 24		cmp $24,x	QPairCtlA:	cmp DStack+0,x
.b204	f0 05		beq $b20b			beq _8
.b206	a9 ea		lda #$ea			lda #$100+err_ControlMismatch
.b208	4c 74 b4	jmp $b474			jmp ThrowA
.b20b	e8		inx		_8:		inx
.b20c	e8		inx				inx	; Drop n
.b20d	60		rts				rts
=12					CodeLen	.var *-XtPtr1
=$b20e					Here1 = *	; remember here
>b200	0c					.byte CodeLen	;patch wh_CodeLength
>0743					DoLeave  .word ?	; head of leave addr patch chain
>0745					DoStkIndex: .byte ?
>0746					DoIndexL: .fill DoStkDim
>074e					DoIndexH: .fill DoStkDim
>0756					DoFufaL:  .fill DoStkDim
>075e					DoFufaH:  .fill DoStkDim
>b20e	3f 44 6f			Name0:	.text "?Do"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=45457					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b211	e3					.byte (("?Do"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>b212	1c					.byte WordFlags	;wh_Flags
>b213	03					.byte 3	;wh_CodeLength
>b214	13					  .byte LinkDisplacement	; offset to previous nt
=$b215					XtPtr1 ::= *
=45457					WordListLink ::= Nt0 ; remember the nt of this word for later
.b215					Question_Do:
.b215	20 51 b3	jsr $b351			jsr Do_Leave_Init
.b218	a9 2c		lda #$2c			lda #<_runtime
.b21a	a0 b2		ldy #$b2			ldy #>_runtime
.b21c	20 1c cd	jsr $cd1c			jsr Jsr_Comma_YA	; compile JSR _runtime
.b21f	a9 d0		lda #$d0			lda #$d0		; compile BNE *+5
.b221	a0 03		ldy #$03			ldy #3
.b223	20 f9 cc	jsr $ccf9			jsr Comma_YA
.b226	20 34 b3	jsr $b334			jsr Leave		; compile JMP leave
.b229	4c 49 b2	jmp $b249			jmp Do_8		; finish
=23					CodeLen	.var *-XtPtr1
=$b22c					Here1 = *	; remember here
>b213	17					.byte CodeLen	;patch wh_CodeLength
.b22c					_runtime:
.b22c	20 51 b2	jsr $b251			jsr Do_Runtime	; start normally (we assume TOS!=NOS)
.b22f	a5 12		lda $12				lda DoIndex+0	; Are TOS and NOS equal?
.b231	f0 01		beq $b234			beq _2
.b233	60		rts				rts		; return Z=0 to signal continue
.b234	a5 13		lda $13		_2:		lda DoIndex+1
.b236	c9 80		cmp #$80			cmp #$80
.b238	60		rts				rts		; return Z
>b239	44 6f				Name0:	.text "Do"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=45499					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b23b	e2					.byte (("Do"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>b23c	1c					.byte WordFlags	;wh_Flags
>b23d	03					.byte 3	;wh_CodeLength
>b23e	2a					  .byte LinkDisplacement	; offset to previous nt
=$b23f					XtPtr1 ::= *
=45499					WordListLink ::= Nt0 ; remember the nt of this word for later
.b23f					Do:
.b23f	20 51 b3	jsr $b351			jsr Do_Leave_Init
.b242	a9 51		lda #$51			lda #<Do_runtime
.b244	a0 b2		ldy #$b2			ldy #>Do_runtime
.b246	20 1c cd	jsr $cd1c			jsr Jsr_Comma_YA	; compile JSR _runtime
.b249	20 23 ca	jsr $ca23	Do_8:		jsr Here		; remember loop body start addr
.b24c	a9 3f		lda #$3f			lda #<Do		; identifier
.b24e	4c dd b7	jmp $b7dd			jmp PushZA
=18					CodeLen	.var *-XtPtr1
=$b251					Here1 = *	; remember here
>b23d	12					.byte CodeLen	;patch wh_CodeLength
.b251					Do_Runtime:
.b251	ce 45 07	dec $0745			dec DoStkIndex		; alloc DO stack entry
.b254	ac 45 07	ldy $0745			ldy DoStkIndex
.b257	30 2d		bmi $b286			bmi _TooDeep
.b259	a5 12		lda $12				lda DoIndex+0		; save previous DoIndex
.b25b	99 46 07	sta $0746,y			sta DoIndexL,y
.b25e	a5 13		lda $13				lda DoIndex+1
.b260	99 4e 07	sta $074e,y			sta DoIndexH,y
.b263	38		sec				sec			; fudge factor (FUFA)= $8000 - limit
.b264	a9 00		lda #$00			lda #0			;   the number that will trip the overflow flag
.b266	f5 26		sbc $26,x			sbc DStack+2,x
.b268	99 56 07	sta $0756,y			sta DoFuFaL,y
.b26b	a9 80		lda #$80			lda #$80
.b26d	f5 27		sbc $27,x			sbc DStack+3,x
.b26f	99 5e 07	sta $075e,y			sta DoFuFaH,y
.b272	18		clc				clc			; index= FUFA plus original index
.b273	b5 24		lda $24,x			lda DStack+0,x
.b275	79 56 07	adc $0756,y			adc DoFuFaL,y
.b278	85 12		sta $12				sta DoIndex+0
.b27a	b5 25		lda $25,x			lda DStack+1,x
.b27c	79 5e 07	adc $075e,y			adc DoFuFaH,y
.b27f	85 13		sta $13				sta DoIndex+1
.b281	e8		inx				inx			; Drop orig index
.b282	e8		inx				inx
.b283	e8		inx				inx			; Drop orig limit
.b284	e8		inx				inx
.b285	60		rts				rts			; return
.b286	a9 f9		lda #$f9	_TooDeep:	lda #$100+err_DoLoop_TooDeep
.b288	20 74 b4	jsr $b474			jsr ThrowA
>b28b	4c 6f 6f 70			Name0:	.text "Loop"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=45583					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b28f	04					.byte (("Loop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=84					LinkDisplacement = Nt0-WordListLink
>b290	1c					.byte WordFlags	;wh_Flags
>b291	03					.byte 3	;wh_CodeLength
>b292	54					  .byte LinkDisplacement	; offset to previous nt
=$b293					XtPtr1 ::= *
=45583					WordListLink ::= Nt0 ; remember the nt of this word for later
.b293					Loop:
.b293	a9 9a		lda #$9a			lda #<_Runtime
.b295	a0 b2		ldy #$b2			ldy #>_Runtime
.b297	4c b5 b2	jmp $b2b5			jmp Plus_Loop_5
=7					CodeLen	.var *-XtPtr1
=$b29a					Here1 = *	; remember here
>b291	07					.byte CodeLen	;patch wh_CodeLength
.b29a					_Runtime:
.b29a	e6 12		inc $12				inc DoIndex+0
.b29c	f0 02		beq $b2a0			beq _Runtime2
.b29e	b8		clv				clv			; return V=0 to signal loop back
.b29f	60		rts				rts
.b2a0	18		clc		_Runtime2:	clc
.b2a1	a5 13		lda $13				lda DoIndex+1		; handle carry from lo byte
.b2a3	69 01		adc #$01			adc #1
.b2a5	85 13		sta $13				sta DoIndex+1
.b2a7	60		rts				rts			; return V to signal loop back
>b2a8	2b 4c 6f 6f 70			Name0:	.text "+Loop"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=45613					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b2ad	05					.byte (("+Loop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>b2ae	1c					.byte WordFlags	;wh_Flags
>b2af	03					.byte 3	;wh_CodeLength
>b2b0	1e					  .byte LinkDisplacement	; offset to previous nt
=$b2b1					XtPtr1 ::= *
=45613					WordListLink ::= Nt0 ; remember the nt of this word for later
.b2b1					Plus_Loop:
.b2b1	a9 bf		lda #$bf			lda #<Plus_Loop_Runtime
.b2b3	a0 b2		ldy #$b2			ldy #>Plus_Loop_Runtime
.b2b5	20 d6 b2	jsr $b2d6	Plus_Loop_5:	jsr Loop_End		; compile JSR _runtime, BVC back
.b2b8	a9 96		lda #$96			lda #<(Unloop-wh_LinkNt-1)
.b2ba	a0 b2		ldy #$b2			ldy #>(Unloop-wh_LinkNt-1)
.b2bc	4c b1 b6	jmp $b6b1			jmp Compile_Comma_NT_YA ; compile Unloop, return
=14					CodeLen	.var *-XtPtr1
=$b2bf					Here1 = *	; remember here
>b2af	0e					.byte CodeLen	;patch wh_CodeLength
.b2bf					Plus_Loop_Runtime:
.b2bf	e0 27		cpx #$27		cpx #-2*1+DStack0+1	; far enough below end of data stack (& not negative)?
.b2c1	b0 10		bcs $b2d3		bcs Throw_Stack_12
.b2c3	18		clc				clc			; DoIndex += step
.b2c4	b5 24		lda $24,x			lda DStack+0,x
.b2c6	65 12		adc $12				adc DoIndex+0
.b2c8	85 12		sta $12				sta DoIndex+0
.b2ca	b5 25		lda $25,x			lda DStack+1,x
.b2cc	65 13		adc $13				adc DoIndex+1
.b2ce	85 13		sta $13				sta DoIndex+1
.b2d0	e8		inx				inx			; Drop step
.b2d1	e8		inx				inx
.b2d2	60		rts				rts			; return V=0 to signal loop back
.b2d3	4c 3b b4	jmp $b43b	Throw_Stack_12: jmp Throw_Stack
.b2d6					Loop_End:
.b2d6	20 1c cd	jsr $cd1c			jsr Jsr_Comma_YA	; compile JSR runtime
.b2d9	a9 3f		lda #$3f			lda #<Do		; check id
.b2db	20 02 b2	jsr $b202	Loop_End_3:	jsr QPairCtlA
.b2de	a9 50		lda #$50			lda #$50		; compile BVC body
.b2e0	20 10 a7	jsr $a710			jsr Branch_CommaA
.b2e3	ac 43 07	ldy $0743			ldy DoLeave+0		; for each leave addr entry
.b2e6	ad 44 07	lda $0744			lda DoLeave+1
.b2e9	f0 1b		beq $b306			beq _p9
.b2eb	84 14		sty $14		_p1:		sty tmp1+0		;   save entry pointer
.b2ed	85 15		sta $15				sta tmp1+1
.b2ef	a0 01		ldy #$01			ldy #1			;   save link
.b2f1	b1 14		lda ($14),y			lda (tmp1),y
.b2f3	48		pha				pha
.b2f4	88		dey				dey
.b2f5	b1 14		lda ($14),y			lda (tmp1),y
.b2f7	48		pha				pha
.b2f8	a5 00		lda $00				lda cp+0		;   patch addr
.b2fa	91 14		sta ($14),y			sta (tmp1),y
.b2fc	a5 01		lda $01				lda cp+1
.b2fe	c8		iny				iny
.b2ff	91 14		sta ($14),y			sta (tmp1),y
.b301	68		pla				pla			;   get saved link
.b302	a8		tay				tay
.b303	68		pla				pla
.b304	d0 e5		bne $b2eb			bne _p1
.b306					_p9:
.b306	20 ef b3	jsr $b3ef			jsr PopYA		; restore DoLeave
.b309	8d 43 07	sta $0743			sta DoLeave+0
.b30c	8c 44 07	sty $0744			sty DoLeave+1
.b30f	60		rts				rts
>b310	55 6e 6c 6f 6f 70		Name0:	.text "Unloop"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=45718					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b316	06					.byte (("Unloop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$04					WordFlags ::= CO	; modifiable copy, remember for later
=105					LinkDisplacement = Nt0-WordListLink
>b317	04					.byte WordFlags	;wh_Flags
>b318	03					.byte 3	;wh_CodeLength
>b319	69					  .byte LinkDisplacement	; offset to previous nt
=$b31a					XtPtr1 ::= *
=45718					WordListLink ::= Nt0 ; remember the nt of this word for later
.b31a					Unloop:
.b31a	ac 45 07	ldy $0745			ldy DoStkIndex
.b31d	b9 46 07	lda $0746,y			lda DoIndexL,y	; restore Index
.b320	85 12		sta $12				sta DoIndex+0
.b322	b9 4e 07	lda $074e,y			lda DoIndexH,y
.b325	85 13		sta $13				sta DoIndex+1
.b327	ee 45 07	inc $0745			inc DoStkIndex	; drop Do stack entry
=16					CodeLen	.var *-XtPtr1
=$b32a					Here1 = *	; remember here
>b318	10					.byte CodeLen	;patch wh_CodeLength
.b32a	60		rts				rts
>b32b	4c 65 61 76 65			Name0:	.text "Leave"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=45744					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b330	a5					.byte (("Leave"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+NN+CO	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>b331	1c					.byte WordFlags	;wh_Flags
>b332	03					.byte 3	;wh_CodeLength
>b333	1a					  .byte LinkDisplacement	; offset to previous nt
=$b334					XtPtr1 ::= *
=45744					WordListLink ::= Nt0 ; remember the nt of this word for later
.b334					Leave:
.b334	a9 4c		lda #$4c			lda #$4c	; JMP abs
.b336	20 e2 cc	jsr $cce2			jsr C_Comma_A
.b339	a5 01		lda $01				lda cp+1	; save cp
.b33b	48		pha				pha
.b33c	a5 00		lda $00				lda cp+0
.b33e	48		pha				pha
.b33f	ad 43 07	lda $0743			lda DoLeave+0	; compile DoLeave link, patched later
.b342	ac 44 07	ldy $0744			ldy DoLeave+1
.b345	20 f9 cc	jsr $ccf9			jsr Comma_YA
.b348	68		pla				pla		; update DoLeave
.b349	8d 43 07	sta $0743			sta DoLeave+0
.b34c	68		pla				pla
.b34d	8d 44 07	sta $0744			sta DoLeave+1
=28					CodeLen	.var *-XtPtr1
=$b350					Here1 = *	; remember here
>b332	1c					.byte CodeLen	;patch wh_CodeLength
.b350	60		rts				rts
.b351					Do_Leave_Init:
.b351	ad 43 07	lda $0743			lda DoLeave+0
.b354	ac 44 07	ldy $0744			ldy DoLeave+1
.b357	20 ae b7	jsr $b7ae			jsr PushYA	; save old leave head
.b35a	a9 00		lda #$00			lda #0		; init
.b35c	8d 44 07	sta $0744			sta DoLeave+1
.b35f	60		rts				rts
>b360	49				Name0:	.text "I"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=45793					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b361	21					.byte (("I"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$04					WordFlags ::= CO	; modifiable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>b362	04					.byte WordFlags	;wh_Flags
>b363	03					.byte 3	;wh_CodeLength
>b364	31					  .byte LinkDisplacement	; offset to previous nt
=$b365					XtPtr1 ::= *
=45793					WordListLink ::= Nt0 ; remember the nt of this word for later
.b365	ac 45 07	ldy $0745	I:		ldy DoStkIndex
.b368	ca		dex				dex
.b369	ca		dex				dex
.b36a	38		sec				sec		; n= fudged index - fudge factor (FUFA)
.b36b	a5 12		lda $12				lda DoIndex+0
.b36d	f9 56 07	sbc $0756,y			sbc DoFuFaL,y
.b370	95 24		sta $24,x			sta DStack+0,x
.b372	a5 13		lda $13				lda DoIndex+1
.b374	f9 5e 07	sbc $075e,y			sbc DoFuFaH,y
.b377	95 25		sta $25,x			sta DStack+1,x
=20					CodeLen	.var *-XtPtr1
=$b379					Here1 = *	; remember here
>b363	14					.byte CodeLen	;patch wh_CodeLength
.b379	60		rts				rts
>b37a	4a				Name0:	.text "J"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=45819					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b37b	41					.byte (("J"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$04					WordFlags ::= CO	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>b37c	04					.byte WordFlags	;wh_Flags
>b37d	03					.byte 3	;wh_CodeLength
>b37e	1a					  .byte LinkDisplacement	; offset to previous nt
=$b37f					XtPtr1 ::= *
=45819					WordListLink ::= Nt0 ; remember the nt of this word for later
.b37f	ac 45 07	ldy $0745	J:		ldy DoStkIndex
.b382	ca		dex				dex
.b383	ca		dex				dex
.b384	38		sec				sec		; n= 2nd fudged index - 2nd fudge factor (FUFA)
.b385	b9 46 07	lda $0746,y			lda DoIndexL+0,y	; LSB
.b388	f9 57 07	sbc $0757,y			sbc DoFufaL+1,y
.b38b	95 24		sta $24,x			sta DStack+0,x
.b38d	b9 4e 07	lda $074e,y			lda DoIndexH+0,y	; MSB
.b390	f9 5f 07	sbc $075f,y			sbc DoFufaH+1,y
.b393	95 25		sta $25,x			sta DStack+1,x
=22					CodeLen	.var *-XtPtr1
=$b395					Here1 = *	; remember here
>b37d	16					.byte CodeLen	;patch wh_CodeLength
.b395	60		rts				rts
>b396	41 62 6f 72 74 22		Name0:	.text 'Abort"'	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=45852					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b39c	46					.byte (('Abort"'[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>b39d	1c					.byte WordFlags	;wh_Flags
>b39e	03					.byte 3	;wh_CodeLength
>b39f	21					  .byte LinkDisplacement	; offset to previous nt
=$b3a0					XtPtr1 ::= *
=45852					WordListLink ::= Nt0 ; remember the nt of this word for later
.b3a0					Abort_Quote:
.b3a0	20 f4 b8	jsr $b8f4			jsr S_Quote		; compile the string literal
.b3a3	a0 b3		ldy #$b3			ldy #>_runtime		; compile JSR runtime, return
.b3a5	a9 aa		lda #$aa			lda #<_runtime
.b3a7	4c 1c cd	jmp $cd1c			jmp Jsr_Comma_YA
=10					CodeLen	.var *-XtPtr1
=$b3aa					Here1 = *	; remember here
>b39e	0a					.byte CodeLen	;patch wh_CodeLength
.b3aa					_runtime:
.b3aa	b5 28		lda $28,x			lda DStack+4,x
.b3ac	15 29		ora $29,x			ora DStack+5,x
.b3ae	d0 03		bne $b3b3			bne _do_abort	; true?
.b3b0	4c 86 ad	jmp $ad86			jmp ThreeDrop	; Drop three entries from the Data Stack
.b3b3					_do_abort:
.b3b3	20 d3 cd	jsr $cdd3			jsr Type	; print string
.b3b6	20 69 ab	jsr $ab69			jsr CR		; We follow Gforth in going to a new line
.b3b9	a9 fe		lda #$fe			lda #$100+err_AbortQuote
.b3bb	4c 74 b4	jmp $b474			jmp ThrowA
>b3be	41 62 6f 72 74			Name0:	.text "Abort"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=45891					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3c3	85					.byte (("Abort"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>b3c4	10					.byte WordFlags	;wh_Flags
>b3c5	03					.byte 3	;wh_CodeLength
>b3c6	27					  .byte LinkDisplacement	; offset to previous nt
=$b3c7					XtPtr1 ::= *
=45891					WordListLink ::= Nt0 ; remember the nt of this word for later
.b3c7	a9 ff		lda #$ff	Abort:		lda #$100+err_Abort
.b3c9	4c 74 b4	jmp $b474			jmp ThrowA
=5					CodeLen	.var *-XtPtr1
=$b3cc					Here1 = *	; remember here
>b3c5	05					.byte CodeLen	;patch wh_CodeLength
>b3cc	50 6f 70 41			Name0:	.text "PopA"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=45904					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3d0	24					.byte (("PopA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>b3d1	10					.byte WordFlags	;wh_Flags
>b3d2	03					.byte 3	;wh_CodeLength
>b3d3	0d					  .byte LinkDisplacement	; offset to previous nt
=$b3d4					XtPtr1 ::= *
=45904					WordListLink ::= Nt0 ; remember the nt of this word for later
.b3d4					PopA:
.b3d4	e0 27		cpx #$27		cpx #-2*1+DStack0+1	; far enough below end of data stack (& not negative)?
.b3d6	b0 63		bcs $b43b		bcs Throw_Stack
.b3d8	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b3da	e8		inx				inx
.b3db	e8		inx				inx
=8					CodeLen	.var *-XtPtr1
=$b3dc					Here1 = *	; remember here
>b3d2	08					.byte CodeLen	;patch wh_CodeLength
.b3dc	60		rts		                rts
.b3dd					PopA2:
.b3dd	e0 25		cpx #$25		cpx #-2*2+DStack0+1	; far enough below end of data stack (& not negative)?
.b3df	b0 5a		bcs $b43b		bcs Throw_Stack
.b3e1	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b3e3	e8		inx				inx
.b3e4	e8		inx				inx
.b3e5	60		rts		                rts
>b3e6	50 6f 70 59 41			Name0:	.text "PopYA"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=45931					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3eb	25					.byte (("PopYA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>b3ec	10					.byte WordFlags	;wh_Flags
>b3ed	03					.byte 3	;wh_CodeLength
>b3ee	1b					  .byte LinkDisplacement	; offset to previous nt
=$b3ef					XtPtr1 ::= *
=45931					WordListLink ::= Nt0 ; remember the nt of this word for later
.b3ef					PopYA:
.b3ef	e0 27		cpx #$27		cpx #-2*1+DStack0+1	; far enough below end of data stack (& not negative)?
.b3f1	b0 48		bcs $b43b		bcs Throw_Stack
.b3f3	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to YA
.b3f5	b4 25		ldy $25,x			ldy DStack+1,x
.b3f7	e8		inx				inx
.b3f8	e8		inx				inx
=10					CodeLen	.var *-XtPtr1
=$b3f9					Here1 = *	; remember here
>b3ed	0a					.byte CodeLen	;patch wh_CodeLength
.b3f9	60		rts				rts
.b3fa					PopTmp1:
.b3fa	e0 27		cpx #$27		cpx #-2*1+DStack0+1	; far enough below end of data stack (& not negative)?
.b3fc	b0 3d		bcs $b43b		bcs Throw_Stack
.b3fe	b5 24		lda $24,x			lda DStack+0,x	; PopYA
.b400	b4 25		ldy $25,x			ldy DStack+1,x
.b402	e8		inx				inx
.b403	e8		inx				inx
.b404	85 14		sta $14				sta tmp1+0
.b406	84 15		sty $15				sty tmp1+1
.b408	60		rts				rts
>b409	75 6e 64 65 72 66 6c 6f		Name0:	.text "underflow_1"	;  name of word as a string, ending at wh_NameLastChar
>b411	77 5f 31
=11					NameLength = *-Name0
=45972					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b414	2b					.byte (("underflow_1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=41					LinkDisplacement = Nt0-WordListLink
>b415	10					.byte WordFlags	;wh_Flags
>b416	03					.byte 3	;wh_CodeLength
>b417	29					  .byte LinkDisplacement	; offset to previous nt
=$b418					XtPtr1 ::= *
=45972					WordListLink ::= Nt0 ; remember the nt of this word for later
.b418					underflow_1:
.b418	e0 27		cpx #$27		cpx #-2*1+DStack0+1	; far enough below end of data stack (& not negative)?
.b41a	b0 1f		bcs $b43b		bcs Throw_Stack
=4					CodeLen	.var *-XtPtr1
=$b41c					Here1 = *	; remember here
>b416	04					.byte CodeLen	;patch wh_CodeLength
.b41c	60		rts				rts
>b41d	75 6e 64 65 72 66 6c 6f		Name0:	.text "underflow_2"	;  name of word as a string, ending at wh_NameLastChar
>b425	77 5f 32
=11					NameLength = *-Name0
=45992					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b428	4b					.byte (("underflow_2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>b429	10					.byte WordFlags	;wh_Flags
>b42a	03					.byte 3	;wh_CodeLength
>b42b	14					  .byte LinkDisplacement	; offset to previous nt
=$b42c					XtPtr1 ::= *
=45992					WordListLink ::= Nt0 ; remember the nt of this word for later
.b42c					underflow_2:
.b42c	e0 25		cpx #$25		cpx #-2*2+DStack0+1	; far enough below end of data stack (& not negative)?
.b42e	b0 0b		bcs $b43b		bcs Throw_Stack
=4					CodeLen	.var *-XtPtr1
=$b430					Here1 = *	; remember here
>b42a	04					.byte CodeLen	;patch wh_CodeLength
.b430	60		rts		                rts
.b431					underflow_3:
.b431	e0 23		cpx #$23		cpx #-2*3+DStack0+1	; far enough below end of data stack (& not negative)?
.b433	b0 06		bcs $b43b		bcs Throw_Stack
.b435	60		rts		                rts
.b436					underflow_4:
.b436	e0 21		cpx #$21		cpx #-2*4+DStack0+1	; far enough below end of data stack (& not negative)?
.b438	b0 01		bcs $b43b		bcs Throw_Stack
.b43a	60		rts		                rts
.b43b					Throw_Stack:
.b43b	30 04		bmi $b441			bmi _over
.b43d	a9 fc		lda #$fc			lda #$100+err_Stack_Underflow
.b43f	d0 33		bne $b474			bne ThrowA
.b441	a9 fd		lda #$fd	_over:		lda #$100+err_Stack_Overflow
.b443	d0 2f		bne $b474			bne ThrowA
.b445					Throw_FPStack:
.b445	30 04		bmi $b44b			bmi _over
.b447	a9 d3		lda #$d3			lda #$100+err_FPStackUnderflow
.b449	d0 29		bne $b474			bne ThrowA
.b44b	a9 d4		lda #$d4	_over:		lda #$100+err_FPStackOverflow
.b44d	d0 25		bne $b474			bne ThrowA
.b44f					Throw_FpOutOfRange:
.b44f	a9 d5		lda #$d5			lda #$100+err_FpOutOfRange
.b451	d0 21		bne $b474			bne ThrowA
>b453	3f 53 74 61 63 6b		Name0:	.text "?Stack"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=46041					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b459	66					.byte (("?Stack"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>b45a	10					.byte WordFlags	;wh_Flags
>b45b	03					.byte 3	;wh_CodeLength
>b45c	31					  .byte LinkDisplacement	; offset to previous nt
=$b45d					XtPtr1 ::= *
=46041					WordListLink ::= Nt0 ; remember the nt of this word for later
.b45d					QStack:
.b45d	e0 29		cpx #$29		cpx #-2*0+DStack0+1	; far enough below end of data stack (& not negative)?
.b45f	b0 da		bcs $b43b		bcs Throw_Stack
.b461	a4 4c		ldy $4c				ldy FIndex		; check floating point stack
.b463	c0 0b		cpy #$0b			cpy #FDim+1
.b465	b0 de		bcs $b445			bcs Throw_FPStack
=10					CodeLen	.var *-XtPtr1
=$b467					Here1 = *	; remember here
>b45b	0a					.byte CodeLen	;patch wh_CodeLength
.b467	60		rts				rts			; all OK
>b468	54 68 72 6f 77			Name0:	.text "Throw"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=46061					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b46d	e5					.byte (("Throw"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>b46e	10					.byte WordFlags	;wh_Flags
>b46f	03					.byte 3	;wh_CodeLength
>b470	14					  .byte LinkDisplacement	; offset to previous nt
=$b471					XtPtr1 ::= *
=46061					WordListLink ::= Nt0 ; remember the nt of this word for later
.b471	20 d4 b3	jsr $b3d4	Throw:		jsr PopA		; pop n
.b474	20 9f b4	jsr $b49f	ThrowA:		jsr Type_Exception_Text_A ; print the associated error string
.b477	a2 28		ldx #$28			ldx #DStack0		; reset data stack (in case of underflow)
.b479					Abort_Core:
.b479	20 a2 b8	jsr $b8a2			jsr SLiteral_runtime
.b47c	4c 82 b4	jmp $b482			  jmp +
>b47f	3f 00 20					  .text "?",0," "	; signal an error to the simulator
.b482	20 d3 cd	jsr $cdd3	+		jsr Type
.b485	20 f9 ce	jsr $cef9			jsr R_From		; show return stack TOS
.b488	20 99 81	jsr $8199			jsr TypeSymbol
.b48b	20 14 cf	jsr $cf14			jsr R_Fetch		; show return stack NOS
.b48e	20 99 81	jsr $8199			jsr TypeSymbol
.b491	20 69 ab	jsr $ab69			jsr CR
.b494					Abort_Core2:
.b494	a9 08		lda #$08			lda #DoStkDim		; init do stack
.b496	8d 45 07	sta $0745			sta DoStkIndex
.b499	20 e2 b4	jsr $b4e2			jsr Empty_Stack		; empty the Data Stack & FP stack
.b49c	4c f1 b4	jmp $b4f1			jmp Quit		; continue into QUIT.
.b49f					Type_Exception_Text_A:
.b49f	85 16		sta $16				sta tmp2+0	; save error code
.b4a1	a9 3a		lda #$3a			lda #<Exception_Text_List
.b4a3	a0 da		ldy #$da			ldy #>Exception_Text_List	; for each table entry
.b4a5	85 18		sta $18				sta tmp3+0
.b4a7	84 19		sty $19				sty tmp3+1
.b4a9	a0 00		ldy #$00	_TestEntry:	ldy #0		;   code match?
.b4ab	b1 18		lda ($18),y			lda (tmp3),y
.b4ad	f0 1a		beq $b4c9			beq _NotFound
.b4af	c5 16		cmp $16				cmp tmp2+0
.b4b1	f0 11		beq $b4c4			beq _Found
.b4b3	c8		iny		-		iny		;   step to end of entry
.b4b4	b1 18		lda ($18),y			lda (tmp3),y
.b4b6	d0 fb		bne $b4b3			bne -
.b4b8	98		tya				tya		;   step to next entry
.b4b9	38		sec				sec
.b4ba	65 18		adc $18				adc tmp3+0
.b4bc	85 18		sta $18				sta tmp3+0
.b4be	90 e9		bcc $b4a9			bcc _TestEntry
.b4c0	e6 19		inc $19				inc tmp3+1
.b4c2	d0 e5		bne $b4a9			bne _TestEntry
.b4c4					_Found:
.b4c4	a0 01		ldy #$01			ldy #1
.b4c6	4c f4 cd	jmp $cdf4			jmp Print_ASCIIZ_tmp3_no_lf
.b4c9	a0 ff		ldy #$ff	_NotFound:	ldy #$ff		; print code
.b4cb	a5 16		lda $16				lda tmp2+0
.b4cd	20 ae b7	jsr $b7ae			jsr PushYA
.b4d0	4c ca cb	jmp $cbca			jmp Dot
=98					CodeLen	.var *-XtPtr1
=$b4d3					Here1 = *	; remember here
>b46f	62					.byte CodeLen	;patch wh_CodeLength
>b4d3	45 6d 70 74 79 2d 53 74		Name0:	.text "Empty-Stack"	;  name of word as a string, ending at wh_NameLastChar
>b4db	61 63 6b
=11					NameLength = *-Name0
=46174					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b4de	6b					.byte (("Empty-Stack"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=113					LinkDisplacement = Nt0-WordListLink
>b4df	10					.byte WordFlags	;wh_Flags
>b4e0	03					.byte 3	;wh_CodeLength
>b4e1	71					  .byte LinkDisplacement	; offset to previous nt
=$b4e2					XtPtr1 ::= *
=46174					WordListLink ::= Nt0 ; remember the nt of this word for later
.b4e2	a2 28		ldx #$28	Empty_Stack:	ldx #DStack0	; init data stack
.b4e4	a9 0a		lda #$0a			lda #FDim	; init FP stack
.b4e6	85 4c		sta $4c				sta FIndex
=6					CodeLen	.var *-XtPtr1
=$b4e8					Here1 = *	; remember here
>b4e0	06					.byte CodeLen	;patch wh_CodeLength
.b4e8	60		rts				rts
>b4e9	51 75 69 74			Name0:	.text "Quit"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=46189					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b4ed	84					.byte (("Quit"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>b4ee	10					.byte WordFlags	;wh_Flags
>b4ef	03					.byte 3	;wh_CodeLength
>b4f0	0f					  .byte LinkDisplacement	; offset to previous nt
=$b4f1					XtPtr1 ::= *
=46189					WordListLink ::= Nt0 ; remember the nt of this word for later
.b4f1					Quit:
.b4f1	8a		txa				txa		; Save the DStack that we just defined
.b4f2	a2 ff		ldx #$ff			ldx #rsp0
.b4f4	9a		txs				txs
.b4f5	aa		tax				tax		; Restore the DStack. Dude, seriously.
.b4f6	a9 00		lda #$00			lda #0		; SOURCE-ID= zero (keyboard input)
.b4f8	85 02		sta $02				sta insrc+0
.b4fa	85 03		sta $03				sta insrc+1
.b4fc	20 3f b7	jsr $b73f			jsr Left_Bracket_NoCheck ; switch to interpret state
.b4ff					_get_line:
.b4ff	a9 00		lda #$00			lda #<buffer0	; input buffer, this is paranoid
.b501	85 04		sta $04				sta cib+0
.b503	a9 02		lda #$02			lda #>buffer0
.b505	85 05		sta $05				sta cib+1
.b507	20 61 c2	jsr $c261			jsr Refill		; ( -- f )
.b50a	b5 24		lda $24,x			lda DStack+0,x
.b50c	d0 05		bne $b513			bne +
.b50e	a9 6b		lda #$6b			lda #$100+err_Refill	; REFILL returned a FALSE flag, something went wrong
.b510	4c 74 b4	jmp $b474			jmp ThrowA
.b513	e8		inx		+		inx			; drop the flag
.b514	e8		inx				inx
.b515	20 2c b5	jsr $b52c			jsr interpret
.b518	a5 0a		lda $0a				lda state
.b51a	d0 06		bne $b522			bne _print_compiled
.b51c	a9 06		lda #$06			lda #<str_ok
.b51e	a0 da		ldy #$da			ldy #>str_ok
.b520	d0 04		bne $b526			bne _print
.b522	a9 0a		lda #$0a	_print_compiled: lda #<str_compiled	; "compile" string
.b524	a0 da		ldy #$da			ldy #>str_compiled
.b526	20 ff cd	jsr $cdff	_print:		jsr Print_ASCIIZ_YA
.b529	4c ff b4	jmp $b4ff			jmp _get_line
=59					CodeLen	.var *-XtPtr1
=$b52c					Here1 = *	; remember here
>b4ef	3b					.byte CodeLen	;patch wh_CodeLength
.b52c					Interpret:
.b52c					_loop:
.b52c	20 5d b4	jsr $b45d			jsr QStack		; check stack bounds
.b52f	20 6c ba	jsr $ba6c			jsr parse_name		; ( "string" -- addr u )
.b532	b5 24		lda $24,x	                lda DStack+0,x		; empty line?
.b534	f0 53		beq $b589	                beq _line_done
.b536	20 9f cc	jsr $cc9f			jsr Two_dup		; ( addr u -- addr u addr u )
.b539	20 56 bc	jsr $bc56			jsr Find_Name		; ( addr u addr u -- addr u nt|0 )
.b53c	b5 25		lda $25,x			lda DStack+1,x		; word found?
.b53e	d0 1b		bne $b55b			bne _got_name_token
.b540	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.b541	e8		inx		                inx
.b542	20 cc b0	jsr $b0cc	                jsr Number           ; ( addr u -- u|d )
.b545	a5 0a		lda $0a		                lda state		; interpreting?
.b547	f0 e3		beq $b52c	                beq _loop		;   we're done
.b549	a9 20		lda #$20	                lda #$20		; double cell number?
.b54b	24 0c		bit $0c		                bit status
.b54d	f0 06		beq $b555	                beq _single_number
.b54f	20 49 b8	jsr $b849			jsr Two_literal		; compile a double number
.b552	4c 2c b5	jmp $b52c			jmp _loop
.b555	20 63 b7	jsr $b763	_single_number:	jsr Literal		; compile a single number
.b558	4c 2c b5	jmp $b52c			jmp _loop
.b55b					_got_name_token:
.b55b	20 8b c9	jsr $c98b			jsr Nip
.b55e	20 8b c9	jsr $c98b			jsr Nip			; ( nt )
.b561	85 14		sta $14				sta tmp1+0		; save a work copy of nt
.b563	84 15		sty $15				sty tmp1+1
.b565	a0 81		ldy #$81			ldy #Wh_Flags		; get word flags, we'll need them shortly
.b567	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b569	a4 0a		ldy $0a				ldy state		; interpreting or compiling?
.b56b	d0 12		bne $b57f			bne _compile
.b56d	29 04		and #$04			and #CO			; is the word COMPILE-ONLY?
.b56f	f0 05		beq $b576			beq _execute
.b571	a9 f2		lda #$f2			lda #$100+err_CompileOnly ;   complain & quit
.b573	20 74 b4	jsr $b474			jsr ThrowA
.b576	20 98 bd	jsr $bd98	_execute:	jsr Name_To_Int		; ( nt -- xt )
.b579	20 10 ce	jsr $ce10			jsr Execute		; EXECUTE the xt that is TOS
.b57c	4c 2c b5	jmp $b52c	                jmp _loop
.b57f					_compile:
.b57f	29 08		and #$08			and #IM			; is the word IMMEDIATE?
.b581	d0 f3		bne $b576			bne _execute		;   IMMEDIATE word, execute now
.b583	20 ae b6	jsr $b6ae			jsr Compile_Comma_NT	; Compile the nt into the Dictionary
.b586	4c 2c b5	jmp $b52c			jmp _loop
.b589					_line_done:
.b589	e8		inx				inx			; drop stuff from PARSE_NAME
.b58a	e8		inx				inx
.b58b	e8		inx				inx
.b58c	e8		inx				inx
.b58d	60		rts				rts
>b58e	49 6d 6d 65 64 69 61 74		Name0:	.text "Immediate"	;  name of word as a string, ending at wh_NameLastChar
>b596	65
=9					NameLength = *-Name0
=46359					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b597	a9					.byte (("Immediate"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=170					LinkDisplacement = Nt0-WordListLink
>b598	10					.byte WordFlags	;wh_Flags
>b599	03					.byte 3	;wh_CodeLength
>b59a	aa					  .byte LinkDisplacement	; offset to previous nt
=$b59b					XtPtr1 ::= *
=46359					WordListLink ::= Nt0 ; remember the nt of this word for later
.b59b	a9 08		lda #$08	Immediate:	lda #IM
.b59d	48		pha		SetFlag:	pha
.b59e	20 3e ba	jsr $ba3e			jsr current_to_dp
.b5a1	a0 81		ldy #$81			ldy #Wh_Flags
.b5a3	68		pla				pla
.b5a4	11 10		ora ($10),y			ora (dp),y
.b5a6	91 10		sta ($10),y			sta (dp),y
=13					CodeLen	.var *-XtPtr1
=$b5a8					Here1 = *	; remember here
>b599	0d					.byte CodeLen	;patch wh_CodeLength
.b5a8	60		rts				rts
>b5a9	43 6f 6d 70 69 6c 65 2d		Name0:	.text "Compile-only"	;  name of word as a string, ending at wh_NameLastChar
>b5b1	6f 6e 6c 79
=12					NameLength = *-Name0
=46389					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b5b5	2c					.byte (("Compile-only"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>b5b6	10					.byte WordFlags	;wh_Flags
>b5b7	03					.byte 3	;wh_CodeLength
>b5b8	1e					  .byte LinkDisplacement	; offset to previous nt
=$b5b9					XtPtr1 ::= *
=46389					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5b9	a9 04		lda #$04	Compile_Only:	lda #CO
.b5bb	d0 e0		bne $b59d			bne SetFlag
=4					CodeLen	.var *-XtPtr1
=$b5bd					Here1 = *	; remember here
>b5b7	04					.byte CodeLen	;patch wh_CodeLength
>b5bd	6e 65 76 65 72 2d 6e 61		Name0:	.text "never-native"	;  name of word as a string, ending at wh_NameLastChar
>b5c5	74 69 76 65
=12					NameLength = *-Name0
=46409					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b5c9	ac					.byte (("never-native"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>b5ca	10					.byte WordFlags	;wh_Flags
>b5cb	03					.byte 3	;wh_CodeLength
>b5cc	14					  .byte LinkDisplacement	; offset to previous nt
=$b5cd					XtPtr1 ::= *
=46409					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5cd	20 3e ba	jsr $ba3e	Never_Native:	jsr current_to_dp
.b5d0	a0 81		ldy #$81			ldy #Wh_Flags
.b5d2	b1 10		lda ($10),y			lda (dp),y
.b5d4	09 10		ora #$10			ora #NN		; set NN flag
.b5d6	29 df		and #$df			and #$ff-AN	; clear AN flag
.b5d8	91 10		sta ($10),y			sta (dp),y
=13					CodeLen	.var *-XtPtr1
=$b5da					Here1 = *	; remember here
>b5cb	0d					.byte CodeLen	;patch wh_CodeLength
.b5da	60		rts				rts
>b5db	61 6c 77 61 79 73 2d 6e		Name0:	.text "always-native"	;  name of word as a string, ending at wh_NameLastChar
>b5e3	61 74 69 76 65
=13					NameLength = *-Name0
=46440					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b5e8	ad					.byte (("always-native"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>b5e9	10					.byte WordFlags	;wh_Flags
>b5ea	03					.byte 3	;wh_CodeLength
>b5eb	1f					  .byte LinkDisplacement	; offset to previous nt
=$b5ec					XtPtr1 ::= *
=46440					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5ec	20 3e ba	jsr $ba3e	Always_Native:	jsr current_to_dp
.b5ef	a0 81		ldy #$81			ldy #Wh_Flags
.b5f1	b1 10		lda ($10),y			lda (dp),y
.b5f3	09 20		ora #$20			ora #AN		; Make sure AN flag is set
.b5f5	29 ef		and #$ef			and #$ff-NN	; and NN flag is clear.
.b5f7	91 10		sta ($10),y			sta (dp),y
=13					CodeLen	.var *-XtPtr1
=$b5f9					Here1 = *	; remember here
>b5ea	0d					.byte CodeLen	;patch wh_CodeLength
.b5f9	60		rts				rts
>b5fa	61 6c 6c 6f 77 2d 6e 61		Name0:	.text "allow-native"	;  name of word as a string, ending at wh_NameLastChar
>b602	74 69 76 65
=12					NameLength = *-Name0
=46470					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b606	ac					.byte (("allow-native"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>b607	10					.byte WordFlags	;wh_Flags
>b608	03					.byte 3	;wh_CodeLength
>b609	1e					  .byte LinkDisplacement	; offset to previous nt
=$b60a					XtPtr1 ::= *
=46470					WordListLink ::= Nt0 ; remember the nt of this word for later
.b60a	20 3e ba	jsr $ba3e	Allow_Native:	jsr current_to_dp
.b60d	a0 81		ldy #$81			ldy #Wh_Flags	; offset for status byte
.b60f	b1 10		lda ($10),y			lda (dp),y
.b611	29 cf		and #$cf			and #$ff-NN-AN	; AN and NN flag is clear.
.b613	91 10		sta ($10),y			sta (dp),y
=11					CodeLen	.var *-XtPtr1
=$b615					Here1 = *	; remember here
>b608	0b					.byte CodeLen	;patch wh_CodeLength
.b615	60		rts				rts
>b616	6e 63 2d 6c 69 6d 69 74		Name0:	.text "nc-limit"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=46494					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b61e	88					.byte (("nc-limit"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>b61f	10					.byte WordFlags	;wh_Flags
>b620	03					.byte 3	;wh_CodeLength
>b621	18					  .byte LinkDisplacement	; offset to previous nt
=$b622					XtPtr1 ::= *
=46494					WordListLink ::= Nt0 ; remember the nt of this word for later
.b622	a0 03		ldy #$03			ldy #>nc_limit
.b624	a9 02		lda #$02			lda #<nc_limit
.b626	4c ae b7	jmp $b7ae			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$b629					Here1 = *	; remember here
>b620	07					.byte CodeLen	;patch wh_CodeLength
>b629	73 74 72 69 70 2d 75 6e		Name0:	.text "strip-underflow"	;  name of word as a string, ending at wh_NameLastChar
>b631	64 65 72 66 6c 6f 77
=15					NameLength = *-Name0
=46520					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b638	ef					.byte (("strip-underflow"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>b639	10					.byte WordFlags	;wh_Flags
>b63a	03					.byte 3	;wh_CodeLength
>b63b	1a					  .byte LinkDisplacement	; offset to previous nt
=$b63c					XtPtr1 ::= *
=46520					WordListLink ::= Nt0 ; remember the nt of this word for later
.b63c	a0 03		ldy #$03			ldy #>uf_strip
.b63e	a9 04		lda #$04			lda #<uf_strip
.b640	4c ae b7	jmp $b7ae			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$b643					Here1 = *	; remember here
>b63a	07					.byte CodeLen	;patch wh_CodeLength
>b643	70 6f 73 74 70 6f 6e 65		Name0:	.text "postpone"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=46539					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b64b	a8					.byte (("postpone"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>b64c	1c					.byte WordFlags	;wh_Flags
>b64d	03					.byte 3	;wh_CodeLength
>b64e	13					  .byte LinkDisplacement	; offset to previous nt
=$b64f					XtPtr1 ::= *
=46539					WordListLink ::= Nt0 ; remember the nt of this word for later
.b64f					Postpone:
.b64f	20 9d ba	jsr $ba9d			jsr parse_name_check	; get name string
.b652	20 84 bc	jsr $bc84			jsr find_name_check	; lookup name
.b655	a0 81		ldy #$81			ldy #Wh_Flags		; IMMEDIATE word?
.b657	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b659	29 08		and #$08			and #IM
.b65b	f0 03		beq $b660			beq _not_immediate
.b65d	4c ae b6	jmp $b6ae			jmp Compile_Comma_NT	; compile it as if it was not IMMEDIATE
.b660					_not_immediate:
.b660	20 95 b7	jsr $b795			jsr LDYA_Immed_Comma		; compile LDA #; LDY # with nt of the word
.b663	a0 b6		ldy #$b6			ldy #>Compile_Comma_NT_YA	; compile COMPILE,
.b665	a9 b1		lda #$b1			lda #<Compile_Comma_NT_YA
.b667	4c 1c cd	jmp $cd1c			jmp Jsr_Comma_YA
=27					CodeLen	.var *-XtPtr1
=$b66a					Here1 = *	; remember here
>b64d	1b					.byte CodeLen	;patch wh_CodeLength
>b66a	52 65 63 75 72 73 65		Name0:	.text "Recurse"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=46577					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b671	a7					.byte (("Recurse"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>b672	1c					.byte WordFlags	;wh_Flags
>b673	03					.byte 3	;wh_CodeLength
>b674	26					  .byte LinkDisplacement	; offset to previous nt
=$b675					XtPtr1 ::= *
=46577					WordListLink ::= Nt0 ; remember the nt of this word for later
.b675					Recurse:
.b675	a5 0e		lda $0e				lda WorkWord+0
.b677	a4 0f		ldy $0f				ldy WorkWord+1
.b679	20 ae b7	jsr $b7ae			jsr PushYA
.b67c	24 0c		bit $0c				bit status		; does WorkWord contain xt or nt?
.b67e	50 10		bvc $b690			bvc _xt
.b680	a0 81		ldy #$81			ldy #wh_Flags		; is it Always-Native ?
.b682	b1 0e		lda ($0e),y			lda (WorkWord),y
.b684	29 20		and #$20			and #AN
.b686	f0 05		beq $b68d			beq _NotAn
.b688	a9 e5		lda #$e5			lda #$100+err_InvalidRecursion
.b68a	20 74 b4	jsr $b474			jsr ThrowA
.b68d					_NotAN:
.b68d	20 98 bd	jsr $bd98			jsr Name_To_Int		; convert nt to xt
.b690					_xt:
.b690	4c 19 cd	jmp $cd19			jmp Jsr_Comma		; compile JSR xt, return
=30					CodeLen	.var *-XtPtr1
=$b693					Here1 = *	; remember here
>b673	1e					.byte CodeLen	;patch wh_CodeLength
>b693	43 6f 6d 70 69 6c 65 2c		Name0:	.text "Compile,"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=46619					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b69b	88					.byte (("Compile,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>b69c	10					.byte WordFlags	;wh_Flags
>b69d	03					.byte 3	;wh_CodeLength
>b69e	2a					  .byte LinkDisplacement	; offset to previous nt
=$b69f					XtPtr1 ::= *
=46619					WordListLink ::= Nt0 ; remember the nt of this word for later
.b69f					Compile_Comma:
.b69f	20 51 cf	jsr $cf51			jsr Dup			; ( xt xt )
.b6a2	20 47 bd	jsr $bd47			jsr Int_To_Name		; ( xt nt )	does a dictionary search, tmp1=nt
.b6a5	e8		inx				inx			; drop nt
.b6a6	e8		inx				inx
.b6a7	a5 15		lda $15				lda tmp1+1
.b6a9	d0 0a		bne $b6b5			bne Compile_Comma_NT_Tmp1
.b6ab	4c 19 cd	jmp $cd19			jmp Jsr_Comma		; compile jsr, return
.b6ae					Compile_Comma_NT:
.b6ae	20 ef b3	jsr $b3ef			jsr PopYA
.b6b1					Compile_Comma_NT_YA:
.b6b1	85 14		sta $14				sta tmp1+0		; tmp1= nt
.b6b3	84 15		sty $15				sty tmp1+1
.b6b5					Compile_Comma_NT_Tmp1:
.b6b5	20 a5 bd	jsr $bda5			jsr NameToIntTmp	; tmp2= xt
.b6b8	a5 16		lda $16				lda tmp2+0
.b6ba	a4 17		ldy $17				ldy tmp2+1
.b6bc	20 ae b7	jsr $b7ae			jsr PushYA		; ( xt )
.b6bf	a0 82		ldy #$82			ldy #wh_CodeLength
.b6c1	b1 14		lda ($14),y			lda (tmp1),y
.b6c3	20 dd b7	jsr $b7dd			jsr PushZA		; ( xt u )
.b6c6	a0 81		ldy #$81			ldy #Wh_Flags		; save word flags
.b6c8	b1 14		lda ($14),y			lda (tmp1),y
.b6ca	29 30		and #$30			and #ST
.b6cc	c9 30		cmp #$30			cmp #ST			; inline & strip RTS addr save/restore?
.b6ce	f0 2d		beq $b6fd			beq _strip
.b6d0	c9 10		cmp #$10			cmp #NN			; Never Native word?
.b6d2	f0 12		beq $b6e6			beq _jsr_opt
.b6d4	c9 20		cmp #$20			cmp #AN			; Always Native word?
.b6d6	f0 2f		beq $b707			beq _inline
.b6d8	ad 03 03	lda $0303			lda nc_limit+1		; wordsize<=nc_limit?
.b6db	d0 2a		bne $b707			bne _inline
.b6dd	ad 02 03	lda $0302			lda nc_limit+0
.b6e0	d5 24		cmp $24,x			cmp DStack+0,x
.b6e2	f0 02		beq $b6e6			beq _jsr_opt
.b6e4	b0 21		bcs $b707			bcs _inline
.b6e6					_jsr_opt:
.b6e6	ad 04 03	lda $0304			lda uf_strip
.b6e9	f0 0d		beq $b6f8			beq _jsr
.b6eb	a0 81		ldy #$81			ldy #wh_Flags		; underflow strip & not stack strip?
.b6ed	b1 14		lda ($14),y			lda (tmp1),y
.b6ef	29 40		and #$40			and #UF
.b6f1	f0 05		beq $b6f8			beq _jsr
.b6f3	a9 03		lda #$03			lda #3			;   strip the underflow check
.b6f5	20 11 ca	jsr $ca11			jsr Nos_Plus_A
.b6f8					_jsr:
.b6f8	e8		inx				inx			; Drop len
.b6f9	e8		inx				inx
.b6fa	4c 19 cd	jmp $cd19			jmp Jsr_Comma		; compile jsr, return
.b6fd					_strip:
.b6fd	a9 06		lda #$06			lda #6			;   Adjust xt: skip over the leading RTS addr save
.b6ff	20 11 ca	jsr $ca11			jsr Nos_Plus_A
.b702	a9 f4		lda #$f4			lda #$100-12		;   Adjust u: omit the leading RTS addr save & trailing RTS addr restore
.b704	20 45 ca	jsr $ca45			jsr minus_a
.b707					_inline:
.b707	ad 04 03	lda $0304			lda uf_strip+0		; user wants underflow stripping?
.b70a	f0 12		beq $b71e			beq +
.b70c	a0 81		ldy #$81			ldy #wh_Flags		; this word contains underflow checking?
.b70e	b1 14		lda ($14),y			lda (tmp1),y
.b710	29 40		and #$40			and #UF
.b712	f0 0a		beq $b71e			beq +
.b714	a9 03		lda #$03			lda #3			;   Adjust xt: Start after underflow check
.b716	20 11 ca	jsr $ca11			jsr Nos_Plus_A
.b719	a9 fd		lda #$fd			lda #$100-3		;   Adjust u: omit underflow check
.b71b	20 45 ca	jsr $ca45			jsr minus_a
.b71e					+
.b71e	b5 24		lda $24,x			lda DStack+0,x		; compile code bytes
.b720	f0 0c		beq $b72e			beq _copy_end
.b722	a1 26		lda ($26,x)	_copy_loop:	lda (DStack+2,x)
.b724	20 e2 cc	jsr $cce2			jsr C_Comma_A
.b727	20 5f ca	jsr $ca5f			jsr NOS_One_Plus
.b72a	d6 24		dec $24,x			dec DStack+0,x
.b72c	d0 f4		bne $b722			bne _copy_loop
.b72e					_copy_end:
.b72e	4c 31 c5	jmp $c531			jmp Two_drop
=146					CodeLen	.var *-XtPtr1
=$b731					Here1 = *	; remember here
>b69d	92					.byte CodeLen	;patch wh_CodeLength
>b731	5b				Name0:	.text "["	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=46770					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b732	61					.byte (("["[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=151					LinkDisplacement = Nt0-WordListLink
>b733	1c					.byte WordFlags	;wh_Flags
>b734	03					.byte 3	;wh_CodeLength
>b735	97					  .byte LinkDisplacement	; offset to previous nt
=$b736					XtPtr1 ::= *
=46770					WordListLink ::= Nt0 ; remember the nt of this word for later
.b736	a5 0a		lda $0a		Left_Bracket:	lda state+0		; Already in the interpret state?
.b738	d0 05		bne $b73f			bne Left_Bracket_NoCheck
.b73a	a9 69		lda #$69			lda #$100+err_AlreadyInterpreting
.b73c	4c 74 b4	jmp $b474			jmp ThrowA
.b73f					Left_Bracket_NoCheck:
.b73f	a9 00		lda #$00			lda #0
.b741	85 0a		sta $0a		Left_Bracket_3:	sta state+0
.b743	85 0b		sta $0b				sta state+1
=15					CodeLen	.var *-XtPtr1
=$b745					Here1 = *	; remember here
>b734	0f					.byte CodeLen	;patch wh_CodeLength
.b745	60		rts				rts
>b746	5d				Name0:	.text "]"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=46791					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b747	a1					.byte (("]"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>b748	18					.byte WordFlags	;wh_Flags
>b749	03					.byte 3	;wh_CodeLength
>b74a	15					  .byte LinkDisplacement	; offset to previous nt
=$b74b					XtPtr1 ::= *
=46791					WordListLink ::= Nt0 ; remember the nt of this word for later
.b74b					Right_Bracket:
.b74b	a5 0a		lda $0a				lda state+0		; Already in the compile state?
.b74d	f0 05		beq $b754			beq +
.b74f	a9 68		lda #$68			lda #$100+err_AlreadyCompiling ;   complain and quit
.b751	4c 74 b4	jmp $b474			jmp ThrowA
.b754					+
.b754	a9 ff		lda #$ff			lda #$FF
.b756	d0 e9		bne $b741			bne Left_Bracket_3
=13					CodeLen	.var *-XtPtr1
=$b758					Here1 = *	; remember here
>b749	0d					.byte CodeLen	;patch wh_CodeLength
>b758	4c 69 74 65 72 61 6c		Name0:	.text "Literal"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=46815					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b75f	87					.byte (("Literal"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=92					WordFlags ::= IM+CO+UF+NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>b760	5c					.byte WordFlags	;wh_Flags
>b761	03					.byte 3	;wh_CodeLength
>b762	18					  .byte LinkDisplacement	; offset to previous nt
=$b763					XtPtr1 ::= *
=46815					WordListLink ::= Nt0 ; remember the nt of this word for later
.b763					Literal:
.b763	20 18 b4	jsr $b418			jsr underflow_1
.b766	20 6c b7	jsr $b76c			jsr LitCompile		; compile load regs, choose a runtime routine
.b769	4c b1 b6	jmp $b6b1			jmp Compile_Comma_NT_YA ; compile JSR runtime
=9					CodeLen	.var *-XtPtr1
=$b76c					Here1 = *	; remember here
>b761	09					.byte CodeLen	;patch wh_CodeLength
.b76c					LitCompile:
.b76c	b5 25		lda $25,x			lda DStack+1,x		; hi byte zero?
.b76e	f0 08		beq $b778			beq _ZByte
.b770	20 95 b7	jsr $b795			jsr ldya_immed_comma	; compile "ldy #; lda #" using TOS
.b773	a9 2a		lda #$2a			lda #<(PushYA-wh_LinkNt-1) ; prepare for Compile_Comma_NT_YA or Jmp_Comma_NT_YA
.b775	a0 b7		ldy #$b7			ldy #>(PushYA-wh_LinkNt-1)
.b777	60		rts				rts
.b778					_ZByte:
.b778	b4 24		ldy $24,x			ldy DStack+0,x		; is it 0 ?
.b77a	f0 08		beq $b784			beq _zero
.b77c	20 9c b7	jsr $b79c			jsr lda_immed_comma	; compile "lda #" using TOS
.b77f	a9 59		lda #$59			lda #<(PushZA-wh_LinkNt-1) ; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b781	a0 b7		ldy #$b7			ldy #>(PushZA-wh_LinkNt-1)
.b783	60		rts				rts
.b784	e8		inx		_zero:		inx			; drop
.b785	e8		inx				inx
.b786	a9 67		lda #$67			lda #<(Zero-wh_LinkNt-1)	; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b788	a0 b7		ldy #$b7			ldy #>(Zero-wh_LinkNt-1)
.b78a	60		rts				rts
>b78b	4c 44 59 41 23 2c		Name0:	.text "LDYA#,"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=46865					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b791	86					.byte (("LDYA#,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=50					LinkDisplacement = Nt0-WordListLink
>b792	10					.byte WordFlags	;wh_Flags
>b793	03					.byte 3	;wh_CodeLength
>b794	32					  .byte LinkDisplacement	; offset to previous nt
=$b795					XtPtr1 ::= *
=46865					WordListLink ::= Nt0 ; remember the nt of this word for later
.b795					ldya_immed_comma:
.b795	a9 a0		lda #$a0			lda #$a0		; ldy #
.b797	b4 25		ldy $25,x			ldy DStack+1,x
.b799	20 f9 cc	jsr $ccf9			jsr Comma_YA
.b79c					lda_immed_comma:
.b79c	a9 a9		lda #$a9			lda #$a9		; lda #
.b79e	20 e2 cc	jsr $cce2			jsr C_Comma_A
.b7a1	4c df cc	jmp $ccdf			jmp C_Comma
=15					CodeLen	.var *-XtPtr1
=$b7a4					Here1 = *	; remember here
>b793	0f					.byte CodeLen	;patch wh_CodeLength
>b7a4	50 75 73 68 59 41		Name0:	.text "PushYA"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=46890					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7aa	26					.byte (("PushYA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>b7ab	00					.byte WordFlags	;wh_Flags
>b7ac	03					.byte 3	;wh_CodeLength
>b7ad	19					  .byte LinkDisplacement	; offset to previous nt
=$b7ae					XtPtr1 ::= *
=46890					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7ae	ca		dex		PushYA:		dex
.b7af	ca		dex				dex
.b7b0	95 24		sta $24,x			sta DStack+0,x
.b7b2	94 25		sty $25,x			sty DStack+1,x
=6					CodeLen	.var *-XtPtr1
=$b7b4					Here1 = *	; remember here
>b7ac	06					.byte CodeLen	;patch wh_CodeLength
.b7b4	60		rts				rts
>b7b5	54 72 75 65			Name0:	.text "True"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=46905					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7b9	a4					.byte (("True"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>b7ba	00					.byte WordFlags	;wh_Flags
>b7bb	03					.byte 3	;wh_CodeLength
>b7bc	0f					  .byte LinkDisplacement	; offset to previous nt
=$b7bd					XtPtr1 ::= *
=46905					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7bd	a9 ff		lda #$ff	True:		lda #$FF
.b7bf	ca		dex		PushAA:		dex
.b7c0	ca		dex				dex
.b7c1	95 24		sta $24,x			sta DStack+0,x
.b7c3	95 25		sta $25,x			sta DStack+1,x
=8					CodeLen	.var *-XtPtr1
=$b7c5					Here1 = *	; remember here
>b7bb	08					.byte CodeLen	;patch wh_CodeLength
.b7c5	60		rts				rts
>b7c6	46 61 6c 73 65			Name0:	.text "False"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=46923					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7cb	a5					.byte (("False"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>b7cc	10					.byte WordFlags	;wh_Flags
>b7cd	03					.byte 3	;wh_CodeLength
>b7ce	12					  .byte LinkDisplacement	; offset to previous nt
=$b7cf					XtPtr1 ::= *
=46923					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7cf	a9 00		lda #$00	False:		lda #0
.b7d1	f0 0a		beq $b7dd			beq PushZA
=4					CodeLen	.var *-XtPtr1
=$b7d3					Here1 = *	; remember here
>b7cd	04					.byte CodeLen	;patch wh_CodeLength
>b7d3	50 75 73 68 5a 41		Name0:	.text "PushZA"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=46937					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7d9	26					.byte (("PushZA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>b7da	00					.byte WordFlags	;wh_Flags
>b7db	03					.byte 3	;wh_CodeLength
>b7dc	0e					  .byte LinkDisplacement	; offset to previous nt
=$b7dd					XtPtr1 ::= *
=46937					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7dd	ca		dex		PushZA:		dex
.b7de	ca		dex				dex
.b7df	95 24		sta $24,x			sta DStack+0,x
.b7e1	a9 00		lda #$00			lda #0
.b7e3	95 25		sta $25,x			sta DStack+1,x
=8					CodeLen	.var *-XtPtr1
=$b7e5					Here1 = *	; remember here
>b7db	08					.byte CodeLen	;patch wh_CodeLength
.b7e5	60		rts				rts
>b7e6	30				Name0:	.text "0"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=46951					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7e7	01					.byte (("0"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>b7e8	10					.byte WordFlags	;wh_Flags
>b7e9	03					.byte 3	;wh_CodeLength
>b7ea	0e					  .byte LinkDisplacement	; offset to previous nt
=$b7eb					XtPtr1 ::= *
=46951					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7eb	a9 00		lda #$00	Zero:		lda #0
.b7ed	f0 ee		beq $b7dd			beq PushZA
=4					CodeLen	.var *-XtPtr1
=$b7ef					Here1 = *	; remember here
>b7e9	04					.byte CodeLen	;patch wh_CodeLength
>b7ef	31				Name0:	.text "1"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=46960					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7f0	21					.byte (("1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>b7f1	10					.byte WordFlags	;wh_Flags
>b7f2	03					.byte 3	;wh_CodeLength
>b7f3	09					  .byte LinkDisplacement	; offset to previous nt
=$b7f4					XtPtr1 ::= *
=46960					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7f4	a9 01		lda #$01	One:		lda #1
.b7f6	d0 e5		bne $b7dd			bne PushZA
=4					CodeLen	.var *-XtPtr1
=$b7f8					Here1 = *	; remember here
>b7f2	04					.byte CodeLen	;patch wh_CodeLength
>b7f8	32				Name0:	.text "2"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=46969					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7f9	41					.byte (("2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>b7fa	10					.byte WordFlags	;wh_Flags
>b7fb	03					.byte 3	;wh_CodeLength
>b7fc	09					  .byte LinkDisplacement	; offset to previous nt
=$b7fd					XtPtr1 ::= *
=46969					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7fd	a9 02		lda #$02	Two:		lda #2
.b7ff	d0 dc		bne $b7dd			bne PushZA
=4					CodeLen	.var *-XtPtr1
=$b801					Here1 = *	; remember here
>b7fb	04					.byte CodeLen	;patch wh_CodeLength
>b801	42 6c				Name0:	.text "Bl"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=46979					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b803	82					.byte (("Bl"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>b804	10					.byte WordFlags	;wh_Flags
>b805	03					.byte 3	;wh_CodeLength
>b806	0a					  .byte LinkDisplacement	; offset to previous nt
=$b807					XtPtr1 ::= *
=46979					WordListLink ::= Nt0 ; remember the nt of this word for later
.b807	a9 20		lda #$20	Bl:		lda #AscSP
.b809	d0 d2		bne $b7dd			bne PushZA
=4					CodeLen	.var *-XtPtr1
=$b80b					Here1 = *	; remember here
>b805	04					.byte CodeLen	;patch wh_CodeLength
>b80b	3e 49 6e			Name0:	.text ">In"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=46990					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b80e	c3					.byte ((">In"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>b80f	10					.byte WordFlags	;wh_Flags
>b810	03					.byte 3	;wh_CodeLength
>b811	0b					  .byte LinkDisplacement	; offset to previous nt
=$b812					XtPtr1 ::= *
=46990					WordListLink ::= Nt0 ; remember the nt of this word for later
.b812	a9 08		lda #$08			lda #ToIn
.b814	4c dd b7	jmp $b7dd			jmp PushZA	; jmp to be a recognizable constant
=5					CodeLen	.var *-XtPtr1
=$b817					Here1 = *	; remember here
>b810	05					.byte CodeLen	;patch wh_CodeLength
>b817	53 74 61 74 65			Name0:	.text "State"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=47004					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b81c	a5					.byte (("State"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>b81d	10					.byte WordFlags	;wh_Flags
>b81e	03					.byte 3	;wh_CodeLength
>b81f	0e					  .byte LinkDisplacement	; offset to previous nt
=$b820					XtPtr1 ::= *
=47004					WordListLink ::= Nt0 ; remember the nt of this word for later
.b820	a9 0a		lda #$0a			lda #state
.b822	4c dd b7	jmp $b7dd			jmp PushZA	; jmp to be a recognizable constant
=5					CodeLen	.var *-XtPtr1
=$b825					Here1 = *	; remember here
>b81e	05					.byte CodeLen	;patch wh_CodeLength
>b825	64 70				Name0:	.text "dp"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=47015					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b827	02					.byte (("dp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>b828	10					.byte WordFlags	;wh_Flags
>b829	03					.byte 3	;wh_CodeLength
>b82a	0b					  .byte LinkDisplacement	; offset to previous nt
=$b82b					XtPtr1 ::= *
=47015					WordListLink ::= Nt0 ; remember the nt of this word for later
.b82b	a9 10		lda #$10			lda #dp
.b82d	4c dd b7	jmp $b7dd			jmp PushZA	; jmp to be a recognizable constant
=5					CodeLen	.var *-XtPtr1
=$b830					Here1 = *	; remember here
>b829	05					.byte CodeLen	;patch wh_CodeLength
>b830	54 6d 70 31			Name0:	.text "Tmp1"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=47028					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b834	24					.byte (("Tmp1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>b835	10					.byte WordFlags	;wh_Flags
>b836	03					.byte 3	;wh_CodeLength
>b837	0d					  .byte LinkDisplacement	; offset to previous nt
=$b838					XtPtr1 ::= *
=47028					WordListLink ::= Nt0 ; remember the nt of this word for later
.b838	a9 14		lda #$14			lda #tmp1
.b83a	4c dd b7	jmp $b7dd			jmp PushZA	; jmp to be a recognizable constant
=5					CodeLen	.var *-XtPtr1
=$b83d					Here1 = *	; remember here
>b836	05					.byte CodeLen	;patch wh_CodeLength
>b83d	32 4c 69 74 65 72 61 6c		Name0:	.text "2Literal"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=47045					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b845	88					.byte (("2Literal"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=88					WordFlags ::= UF+IM+NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>b846	58					.byte WordFlags	;wh_Flags
>b847	03					.byte 3	;wh_CodeLength
>b848	11					  .byte LinkDisplacement	; offset to previous nt
=$b849					XtPtr1 ::= *
=47045					WordListLink ::= Nt0 ; remember the nt of this word for later
.b849					Two_literal:
.b849	20 2c b4	jsr $b42c			jsr underflow_2 ; check double number
.b84c	20 6e cf	jsr $cf6e			jsr Swap
.b84f	20 63 b7	jsr $b763			jsr Literal	; do lo cell
.b852	4c 63 b7	jmp $b763			jmp Literal	; do hi cell
=12					CodeLen	.var *-XtPtr1
=$b855					Here1 = *	; remember here
>b847	0c					.byte CodeLen	;patch wh_CodeLength
>b855	53 4c 69 74 65 72 61 6c		Name0:	.text "SLiteral"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=47069					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b85d	88					.byte (("SLiteral"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=92					WordFlags ::= CO+IM+UF+NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>b85e	5c					.byte WordFlags	;wh_Flags
>b85f	03					.byte 3	;wh_CodeLength
>b860	18					  .byte LinkDisplacement	; offset to previous nt
=$b861					XtPtr1 ::= *
=47069					WordListLink ::= Nt0 ; remember the nt of this word for later
.b861					SLiteral:
.b861	20 2c b4	jsr $b42c			jsr underflow_2
.b864	20 84 b8	jsr $b884			jsr SLiteral_Start	; compile header
.b867	4c 78 b8	jmp $b878			jmp _Move_Test
.b86a	a1 28		lda ($28,x)	_Move_Loop:	lda (DStack+4,x)
.b86c	20 e2 cc	jsr $cce2			jsr C_Comma_A
.b86f	f6 28		inc $28,x			inc DStack+4,x
.b871	d0 02		bne $b875			bne +
.b873	f6 29		inc $29,x			inc DStack+5,x
.b875					+
.b875	20 3c ca	jsr $ca3c			jsr NOS_One_Minus
.b878	b5 26		lda $26,x	_Move_Test:	lda DStack+2,x
.b87a	15 27		ora $27,x			ora DStack+3,x
.b87c	d0 ec		bne $b86a			bne _Move_Loop
.b87e	20 91 b8	jsr $b891			jsr SLiteral_End
.b881	4c 31 c5	jmp $c531			jmp Two_Drop		; clean up and leave
=35					CodeLen	.var *-XtPtr1
=$b884					Here1 = *	; remember here
>b85f	23					.byte CodeLen	;patch wh_CodeLength
.b884					SLiteral_Start:
.b884	a9 a2		lda #$a2			lda #<SLiteral_runtime	; compile JSR SLiteral_Runtime
.b886	a0 b8		ldy #$b8			ldy #>SLiteral_runtime
.b888	20 1c cd	jsr $cd1c			jsr Jsr_Comma_YA
.b88b	20 23 ca	jsr $ca23			jsr Here		; push addr of start of JMP
.b88e	4c 32 cd	jmp $cd32			jmp Jmp_Comma_YA	; compile JMP around string (dummy addr)
.b891					SLiteral_End:
.b891	20 55 ca	jsr $ca55			jsr One_Plus
.b894	a5 00		lda $00				lda cp+0		; Update the address of the jump to HERE.
.b896	81 24		sta ($24,x)			sta (DStack+0,x)
.b898	20 55 ca	jsr $ca55			jsr One_Plus
.b89b	a5 01		lda $01				lda cp+1
.b89d	81 24		sta ($24,x)			sta (DStack+0,x)
.b89f	e8		inx				inx			; drop herej
.b8a0	e8		inx				inx
.b8a1	60		rts				rts
.b8a2					SLiteral_Runtime:
.b8a2	86 16		stx $16				stx tmp2	; save data stack index
.b8a4	ba		tsx				tsx
.b8a5	bd 01 01	lda $0101,x	SLiteral_Run2:	lda RStack+1,x	; tmp1= RTS addr
.b8a8	85 14		sta $14				sta tmp1+0
.b8aa	bd 02 01	lda $0102,x			lda RStack+2,x
.b8ad	85 15		sta $15				sta tmp1+1
.b8af	a6 16		ldx $16				ldx tmp2	; restore data stack index
.b8b1	ca		dex				dex		; push string addr
.b8b2	ca		dex				dex
.b8b3	18		clc				clc
.b8b4	a5 14		lda $14				lda tmp1+0
.b8b6	69 04		adc #$04			adc #3+1	;   just after the following JMP + correcting for JSR behavior
.b8b8	95 24		sta $24,x			sta DStack+0,x
.b8ba	a5 15		lda $15				lda tmp1+1
.b8bc	69 00		adc #$00			adc #0
.b8be	95 25		sta $25,x			sta DStack+1,x
.b8c0	ca		dex				dex		; push string length
.b8c1	ca		dex				dex
.b8c2	38		sec				sec
.b8c3	a0 02		ldy #$02			ldy #2		;   = string_end - string_addr
.b8c5	b1 14		lda ($14),y			lda (tmp1),y
.b8c7	f5 26		sbc $26,x			sbc DStack+2,x
.b8c9	95 24		sta $24,x			sta DStack+0,x
.b8cb	c8		iny				iny
.b8cc	b1 14		lda ($14),y			lda (tmp1),y
.b8ce	f5 27		sbc $27,x			sbc DStack+3,x
.b8d0	95 25		sta $25,x			sta DStack+1,x
.b8d2	60		rts				rts
>b8d3	2e 22				Name0:	.text '."'	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=47189					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b8d5	42					.byte (('."'[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=120					LinkDisplacement = Nt0-WordListLink
>b8d6	1c					.byte WordFlags	;wh_Flags
>b8d7	03					.byte 3	;wh_CodeLength
>b8d8	78					  .byte LinkDisplacement	; offset to previous nt
=$b8d9					XtPtr1 ::= *
=47189					WordListLink ::= Nt0 ; remember the nt of this word for later
.b8d9					Dot_quote:
.b8d9	20 f4 b8	jsr $b8f4			jsr S_Quote		; compile the string literal
.b8dc	a0 cd		ldy #$cd			ldy #>Type		; compile: print string
.b8de	a9 d3		lda #$d3			lda #<Type
.b8e0	4c 1c cd	jmp $cd1c			jmp Jsr_Comma_YA
=10					CodeLen	.var *-XtPtr1
=$b8e3					Here1 = *	; remember here
>b8d7	0a					.byte CodeLen	;patch wh_CodeLength
>b8e3	53 5c 22			Name0:	.text 'S\"'	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=47206					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b8e6	43					.byte (('S\"'[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>b8e7	18					.byte WordFlags	;wh_Flags
>b8e8	03					.byte 3	;wh_CodeLength
>b8e9	11					  .byte LinkDisplacement	; offset to previous nt
=$b8ea					XtPtr1 ::= *
=47206					WordListLink ::= Nt0 ; remember the nt of this word for later
.b8ea					S_Backslash_Quote:
.b8ea	a9 ff		lda #$ff			lda #$ff	; Do handle escaped chars.
.b8ec	d0 08		bne $b8f6			bne S_Quote_start
=4					CodeLen	.var *-XtPtr1
=$b8ee					Here1 = *	; remember here
>b8e8	04					.byte CodeLen	;patch wh_CodeLength
>b8ee	53 22				Name0:	.text 'S"'	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=47216					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b8f0	42					.byte (('S"'[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>b8f1	18					.byte WordFlags	;wh_Flags
>b8f2	03					.byte 3	;wh_CodeLength
>b8f3	0a					  .byte LinkDisplacement	; offset to previous nt
=$b8f4					XtPtr1 ::= *
=47216					WordListLink ::= Nt0 ; remember the nt of this word for later
.b8f4					S_Quote:
.b8f4	a9 00		lda #$00			lda #0		; Don't handle escaped chars.
.b8f6					S_Quote_start:
.b8f6	48		pha				pha			; save "handle escaped chars" flag
.b8f7	a5 0a		lda $0a				lda state		; compiling?
.b8f9	f0 06		beq $b901			beq _15
.b8fb	20 84 b8	jsr $b884			jsr SLiteral_Start	; compile SLiteral header
.b8fe	4c 04 b9	jmp $b904			jmp _19
.b901	20 23 ca	jsr $ca23	_15:		jsr Here		; remember start addr
.b904					_19:
.b904	68		pla				pla			; init t2 flags
.b905	20 dd b7	jsr $b7dd			jsr PushZA
.b908	20 eb b7	jsr $b7eb			jsr Zero		; init t3 flags
.b90b					_savechars_loop:
.b90b	a5 08		lda $08				lda toin+0		; LSB
.b90d	c5 06		cmp $06				cmp ciblen+0
.b90f	a5 09		lda $09				lda toin+1		; MSB
.b911	e5 07		sbc $07				sbc ciblen+1
.b913	90 10		bcc $b925			bcc _input_fine		; input buffer empty?
.b915	20 61 c2	jsr $c261			jsr Refill		; Refill it  ( -- f )
.b918	b5 24		lda $24,x			lda DStack+0,x		; Check result of refill.
.b91a	d0 05		bne $b921			bne +
.b91c	a9 6b		lda #$6b			lda #$100+err_refill	; Something when wrong with refill.
.b91e	4c 74 b4	jmp $b474			jmp ThrowA
.b921	e8		inx		+		inx			; Drop the refill flag
.b922	e8		inx				inx
.b923	d0 e6		bne $b90b			bne _savechars_loop	; jump back up to the empty check, just in
.b925					_input_fine:
.b925	18		clc				clc			; tmp1= A= the char at Cib+ToIn
.b926	a5 04		lda $04				lda cib+0
.b928	85 14		sta $14				sta tmp1+0
.b92a	a5 05		lda $05				lda cib+1
.b92c	65 09		adc $09				adc toin+1
.b92e	85 15		sta $15				sta tmp1+1
.b930	a4 08		ldy $08				ldy ToIn
.b932	b1 14		lda ($14),y			lda (tmp1),y
.b934	85 14		sta $14				sta tmp1
.b936	e6 08		inc $08				inc toin+0		; Move on to the next character.
.b938	d0 02		bne $b93c			bne +
.b93a	e6 09		inc $09				inc toin+1
.b93c					+
.b93c	b4 26		ldy $26,x			ldy DStack+2,x		; handling escaped characters?
.b93e	30 03		bmi $b943			bmi +
.b940	4c e6 b9	jmp $b9e6			jmp _regular_char
.b943					+
.b943	b4 27		ldy $27,x			ldy DStack+3,x  		; already seen the backslash?
.b945	30 03		bmi $b94a			bmi +
.b947	4c dc b9	jmp $b9dc			jmp _not_escaped
.b94a					+
.b94a	84 15		sty $15				sty tmp1+1
.b94c	24 15		bit $15				bit tmp1+1		; in the middle of a \x sequence ?
.b94e	70 25		bvs $b975			bvs _check_esc_chars
.b950	a9 01		lda #$01			lda #1
.b952	24 15		bit $15				bit tmp1+1
.b954	d0 11		bne $b967			bne _esc_x_second_digit
.b956	c8		iny				iny			; Adjust flag for second digit next time.
.b957	94 27		sty $27,x			sty DStack+3,x
.b959	a5 14		lda $14				lda tmp1+0		; Get the char again.
.b95b	20 09 ba	jsr $ba09			jsr convert_hex_value	; Convert to hex
.b95e	0a		asl a				asl			; This is the upper nybble, so move it up.
.b95f	0a		asl a				asl
.b960	0a		asl a				asl
.b961	0a		asl a				asl
.b962	95 24		sta $24,x			sta DStack+0,x		; Save it for later.
.b964	4c ed b9	jmp $b9ed			jmp _next_character
.b967					_esc_x_second_digit:
.b967	a9 00		lda #$00			lda #0			; Clear the escaped character flag
.b969	95 27		sta $27,x			sta DStack+3,x		;   (because we are handling it right here)
.b96b	a5 14		lda $14				lda tmp1+0		; Convert to hex
.b96d	20 09 ba	jsr $ba09			jsr convert_hex_value
.b970	15 24		ora $24,x			ora DStack+0,x		; combine with value in t3
.b972	4c ea b9	jmp $b9ea			jmp _save_character
.b975					_check_esc_chars:
.b975	a0 00		ldy #$00			ldy #0
.b977	94 27		sty $27,x			sty DStack+3,x
.b979	a8		tay				tay
.b97a	a9 07		lda #$07			lda #AscBELL	      ; BEL (ASCII value 7)
.b97c	c0 61		cpy #$61			cpy #'a'
.b97e	f0 6a		beq $b9ea			beq _save_character
.b980	a9 08		lda #$08			lda #AscBS	      ; Backspace (ASCII value 8)
.b982	c0 62		cpy #$62			cpy #'b'
.b984	f0 64		beq $b9ea			beq _save_character
.b986	a9 1b		lda #$1b			lda #AscESC	       ; ESC (ASCII value 27)
.b988	c0 65		cpy #$65			cpy #'e'
.b98a	f0 5e		beq $b9ea			beq _save_character
.b98c	a9 0c		lda #$0c			lda #AscFF	       ; FF (ASCII value 12)
.b98e	c0 66		cpy #$66			cpy #'f'
.b990	f0 58		beq $b9ea			beq _save_character
.b992	a9 0a		lda #$0a			lda #AscLF	       ; LF (ASCII value 10)
.b994	c0 6c		cpy #$6c			cpy #'l'
.b996	f0 52		beq $b9ea			beq _save_character
.b998	c0 6e		cpy #$6e			cpy #'n'
.b99a	f0 4e		beq $b9ea			beq _save_character
.b99c	c0 6d		cpy #$6d			cpy #'m'
.b99e	d0 09		bne $b9a9			bne +
.b9a0	a9 0d		lda #$0d			lda #AscCR		; CR/LF pair (ASCII values 13, 10)
.b9a2	20 e2 cc	jsr $cce2			jsr C_Comma_A
.b9a5	a9 0a		lda #$0a			lda #AscLF
.b9a7	d0 41		bne $b9ea			bne _save_character
.b9a9					+
.b9a9	a9 22		lda #$22			lda #AscDQuote		; Double quote (ASCII value 34)
.b9ab	c0 71		cpy #$71			cpy #'q'
.b9ad	f0 3b		beq $b9ea			beq _save_character
.b9af	c0 22		cpy #$22			cpy #AscDQuote
.b9b1	f0 37		beq $b9ea			beq _save_character
.b9b3	a9 0d		lda #$0d			lda #AscCR		; CR (ASCII value 13)
.b9b5	c0 72		cpy #$72			cpy #'r'
.b9b7	f0 31		beq $b9ea			beq _save_character
.b9b9	a9 09		lda #$09			lda #AscHT		; Horizontal TAB (ASCII value 9)
.b9bb	c0 74		cpy #$74			cpy #'t'
.b9bd	f0 2b		beq $b9ea			beq _save_character
.b9bf	a9 0b		lda #$0b			lda #AscVT		; Vertical TAB (ASCII value 11)
.b9c1	c0 76		cpy #$76			cpy #'v'
.b9c3	f0 25		beq $b9ea			beq _save_character
.b9c5	a9 00		lda #$00			lda #0			; NULL (ASCII value 0)
.b9c7	c0 7a		cpy #$7a			cpy #'z'
.b9c9	f0 1f		beq $b9ea			beq _save_character
.b9cb					_check_esc_x:
.b9cb	c0 78		cpy #$78			cpy #'x'
.b9cd	d0 06		bne $b9d5			bne +
.b9cf	a9 be		lda #$be			lda #$BE	; Clear bits 6 and 0
.b9d1	95 27		sta $27,x			sta DStack+3,x
.b9d3	d0 18		bne $b9ed			bne _next_character
.b9d5					+
.b9d5	a9 5c		lda #$5c			lda #AscBackslash	; Backslash (ASCII value 92)
.b9d7	c0 5c		cpy #$5c			cpy #AscBackslash
.b9d9	f0 0f		beq $b9ea			beq _save_character
.b9db	98		tya				tya
.b9dc					_not_escaped:
.b9dc	c9 5c		cmp #$5c			cmp #$5C	; The backslash char
.b9de	d0 06		bne $b9e6			bne _regular_char
.b9e0	a9 ff		lda #$ff			lda #$FF
.b9e2	95 27		sta $27,x			sta DStack+3,x
.b9e4	d0 07		bne $b9ed			bne _next_character
.b9e6					_regular_char:
.b9e6	c9 22		cmp #$22			cmp #AscDQuote		; ASCII for "
.b9e8	f0 06		beq $b9f0			beq _found_string_end
.b9ea					_save_character:
.b9ea	20 e2 cc	jsr $cce2			jsr C_Comma_A		; compile this character into the dictionary
.b9ed					_next_character:
.b9ed	4c 0b b9	jmp $b90b			jmp _savechars_loop
.b9f0					_found_string_end:
.b9f0	e8		inx				inx			; Drop t3
.b9f1	e8		inx				inx
.b9f2	a5 0a		lda $0a				lda state		; What happens next depends on the state (which is bad, but
.b9f4	d0 0e		bne $ba04			bne _cmpl		; that's the way it works at the moment).
.b9f6	38		sec				sec			; TOS= length of string = Here - start_addr
.b9f7	a5 00		lda $00				lda cp+0
.b9f9	f5 26		sbc $26,x			sbc DStack+2,x
.b9fb	95 24		sta $24,x			sta DStack+0,x		;   LSB
.b9fd	a5 01		lda $01				lda cp+1
.b9ff	f5 27		sbc $27,x			sbc DStack+3,x
.ba01	95 25		sta $25,x			sta DStack+1,x		;   MSB
.ba03	60		rts				rts			; ( startaddr u )
.ba04					_cmpl:
.ba04	e8		inx				inx			; Drop t2
.ba05	e8		inx				inx
.ba06	4c 91 b8	jmp $b891			jmp SLiteral_End	; ( jmpaddr )
=277					CodeLen	.var *-XtPtr1
=$ff					CodeLen	 .var $ff
=$ba09					Here1 = *	; remember here
>b8f2	ff					.byte CodeLen	;patch wh_CodeLength
.ba09					convert_hex_value:
.ba09	c9 41		cmp #$41			cmp #'A'
.ba0b	90 05		bcc $ba12			bcc _digit
.ba0d	29 1f		and #$1f	_alpha:		and #$1F		; Make it uppercase.
.ba0f	69 08		adc #$08			adc #9-1		; gives value 10 for 'A'
.ba11	60		rts				rts
.ba12					_digit:
.ba12	e9 2f		sbc #$2f			sbc #'0'-1
.ba14	60		rts				rts
>ba15	4c 61 74 65 73 74 58 74		Name0:	.text "LatestXt"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=47517					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba1d	88					.byte (("LatestXt"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=301					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>ba1e	11					.byte WordFlags	;wh_Flags
>ba1f	03					.byte 3	;wh_CodeLength
>ba20	70 b8					  .word WordListLink
=$ba22					XtPtr1 ::= *
=47517					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba22	20 34 ba	jsr $ba34	LatestXt:	jsr LatestNt	; ( nt )
.ba25	4c 98 bd	jmp $bd98			jmp Name_To_Int	; ( xt )
=6					CodeLen	.var *-XtPtr1
=$ba28					Here1 = *	; remember here
>ba1f	06					.byte CodeLen	;patch wh_CodeLength
>ba28	4c 61 74 65 73 74 4e 74		Name0:	.text "LatestNt"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=47536					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba30	88					.byte (("LatestNt"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>ba31	10					.byte WordFlags	;wh_Flags
>ba32	03					.byte 3	;wh_CodeLength
>ba33	13					  .byte LinkDisplacement	; offset to previous nt
=$ba34					XtPtr1 ::= *
=47536					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba34	20 3e ba	jsr $ba3e	LatestNt:	jsr current_to_dp
.ba37	a5 10		lda $10				lda dp+0
.ba39	a4 11		ldy $11				ldy dp+1
.ba3b	4c ae b7	jmp $b7ae			jmp PushYA
=10					CodeLen	.var *-XtPtr1
=$ba3e					Here1 = *	; remember here
>ba32	0a					.byte CodeLen	;patch wh_CodeLength
.ba3e					current_to_dp:
.ba3e	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.ba41	0a		asl a				asl			; dp= wordlists[A]
.ba42	a8		tay				tay
.ba43	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.ba46	85 10		sta $10				sta dp+0
.ba48	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.ba4b	85 11		sta $11				sta dp+1
.ba4d	60		rts				rts
.ba4e					dp_to_current:
.ba4e	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.ba51	0a		asl a		                asl			; wordlists[A]=dp
.ba52	a8		tay		                tay
.ba53	a5 10		lda $10		                lda dp+0
.ba55	99 12 03	sta $0312,y			sta WordlistsV+0,y
.ba58	a5 11		lda $11		                lda dp+1
.ba5a	99 13 03	sta $0313,y	                sta WordlistsV+1,y
.ba5d	60		rts		                rts
>ba5e	50 61 72 73 65 2d 4e 61		Name0:	.text "Parse-Name"	;  name of word as a string, ending at wh_NameLastChar
>ba66	6d 65
=10					NameLength = *-Name0
=47592					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba68	aa					.byte (("Parse-Name"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>ba69	10					.byte WordFlags	;wh_Flags
>ba6a	03					.byte 3	;wh_CodeLength
>ba6b	38					  .byte LinkDisplacement	; offset to previous nt
=$ba6c					XtPtr1 ::= *
=47592					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba6c					Parse_Name:
.ba6c	a5 04		lda $04				lda cib+0		; tmp2= cib+(toin & $ff00)
.ba6e	85 16		sta $16				sta tmp2+0
.ba70	18		clc				clc
.ba71	a5 05		lda $05				lda cib+1
.ba73	65 09		adc $09				adc toin+1
.ba75	85 17		sta $17				sta tmp2+1
.ba77	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.ba79					_skip_loop:
.ba79	c4 06		cpy $06				cpy ciblen+0		; more chars left?
.ba7b	a5 09		lda $09				lda toin+1
.ba7d	e5 07		sbc $07				sbc ciblen+1
.ba7f	b0 11		bcs $ba92			bcs _empty_line
.ba81	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.ba83	c9 21		cmp #$21			cmp #AscSP+1		; is_whitespace
.ba85	b0 10		bcs $ba97			bcs _char_found
.ba87	c8		iny				iny			; increment toin
.ba88	84 08		sty $08				sty toin+0
.ba8a	d0 ed		bne $ba79			bne _skip_loop
.ba8c	e6 09		inc $09				inc toin+1
.ba8e	e6 17		inc $17				inc tmp2+1
.ba90	d0 e7		bne $ba79			bne _skip_loop
.ba92					_empty_line:
.ba92	ca		dex				dex			; junk address
.ba93	ca		dex				dex
.ba94	4c eb b7	jmp $b7eb			jmp Zero		; length=0
.ba97					_char_found:
.ba97	20 07 b8	jsr $b807			jsr Bl			; push delimiter char
.ba9a	4c b3 ba	jmp $bab3			jmp Parse
=49					CodeLen	.var *-XtPtr1
=$ba9d					Here1 = *	; remember here
>ba6a	31					.byte CodeLen	;patch wh_CodeLength
.ba9d					parse_name_check:
.ba9d	20 6c ba	jsr $ba6c			jsr parse_name		; get character from string
.baa0	b5 24		lda $24,x			lda DStack+0,x		; empty string?
.baa2	f0 01		beq $baa5			beq _empty
.baa4	60		rts				rts
.baa5	a9 f3		lda #$f3	_empty:		lda #$100+err_UndefinedWord	; complain & abort
.baa7	4c 74 b4	jmp $b474			jmp ThrowA
>baaa	50 61 72 73 65			Name0:	.text "Parse"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=47663					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>baaf	a5					.byte (("Parse"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=71					LinkDisplacement = Nt0-WordListLink
>bab0	10					.byte WordFlags	;wh_Flags
>bab1	03					.byte 3	;wh_CodeLength
>bab2	47					  .byte LinkDisplacement	; offset to previous nt
=$bab3					XtPtr1 ::= *
=47663					WordListLink ::= Nt0 ; remember the nt of this word for later
.bab3	20 d4 b3	jsr $b3d4	Parse:		jsr PopA		; pop c (check for underflow)
.bab6	85 1c		sta $1c		Parse_A:	sta tmp5		; save delimiter
.bab8	ca		dex				dex			; alloc space for addr
.bab9	ca		dex				dex
.baba	ca		dex				dex			; alloc space for length
.babb	ca		dex				dex
.babc	18		clc				clc			; addr= cib+toin
.babd	a5 08		lda $08				lda toin+0
.babf	65 04		adc $04				adc cib+0
.bac1	95 26		sta $26,x			sta DStack+2,x
.bac3	a5 09		lda $09				lda toin+1
.bac5	65 05		adc $05				adc cib+1
.bac7	95 27		sta $27,x			sta DStack+3,x
.bac9	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.bacb	84 14		sty $14				sty tmp1+0
.bacd	a5 04		lda $04				lda cib+0		; tmp2= cib + (toin & $ff00)
.bacf	85 16		sta $16				sta tmp2+0
.bad1	18		clc				clc
.bad2	a5 09		lda $09				lda toin+1		; tmp1= toin
.bad4	85 15		sta $15				sta tmp1+1
.bad6	65 05		adc $05				adc cib+1
.bad8	85 17		sta $17				sta tmp2+1
.bada	a9 00		lda #$00			lda #0		; Initialize the offset we use to adjust EOL or found delimiter
.badc	85 1d		sta $1d				sta tmp5+1
.bade					_loop:
.bade	c4 06		cpy $06				cpy ciblen+0		; end of string?
.bae0	a5 09		lda $09				lda toin+1
.bae2	e5 07		sbc $07				sbc ciblen+1
.bae4	b0 1d		bcs $bb03			bcs _eol
.bae6	a5 1c		lda $1c				lda tmp5+0		; get delimiter
.bae8	c9 20		cmp #$20			cmp #AscSP		; is it whitespace?
.baea	d0 08		bne $baf4			bne _not_whitespace
.baec	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.baee	c9 21		cmp #$21			cmp #AscSP+1		; we're looking for all whitespace
.baf0	90 0f		bcc $bb01			bcc _found_delimiter
.baf2	b0 04		bcs $baf8			bcs _not_delimiter
.baf4	d1 16		cmp ($16),y	_not_whitespace: cmp (tmp2),y		; compare delimter to cib[toin]
.baf6	f0 09		beq $bb01			beq _found_delimiter
.baf8					_not_delimiter:
.baf8	c8		iny				iny			; next character
.baf9	d0 e3		bne $bade			bne _loop
.bafb	e6 09		inc $09				inc toin+1
.bafd	e6 17		inc $17				inc tmp2+1
.baff	d0 dd		bne $bade			bne _loop
.bb01					_found_delimiter:
.bb01	e6 1d		inc $1d				inc tmp5+1
.bb03					_eol:
.bb03	38		sec				sec			; length = toin - tmp1
.bb04	98		tya				tya
.bb05	e5 14		sbc $14				sbc tmp1+0
.bb07	95 24		sta $24,x			sta DStack+0,x
.bb09	a5 09		lda $09				lda toin+1
.bb0b	e5 15		sbc $15				sbc tmp1+1
.bb0d	95 25		sta $25,x			sta DStack+1,x
.bb0f	18		clc				clc			; toin = toin + delimiter_offset
.bb10	98		tya				tya
.bb11	65 1d		adc $1d				adc tmp5+1
.bb13	85 08		sta $08				sta toin+0
.bb15	90 02		bcc $bb19			bcc +
.bb17	e6 09		inc $09				inc toin+1
.bb19					+
=102					CodeLen	.var *-XtPtr1
=$bb19					Here1 = *	; remember here
>bab1	66					.byte CodeLen	;patch wh_CodeLength
.bb19	60		rts				rts
>bb1a	45 78 65 63 75 74 65 2d		Name0:	.text "Execute-Parsing"	;  name of word as a string, ending at wh_NameLastChar
>bb22	50 61 72 73 69 6e 67
=15					NameLength = *-Name0
=47785					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb29	ef					.byte (("Execute-Parsing"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=122					LinkDisplacement = Nt0-WordListLink
>bb2a	50					.byte WordFlags	;wh_Flags
>bb2b	03					.byte 3	;wh_CodeLength
>bb2c	7a					  .byte LinkDisplacement	; offset to previous nt
=$bb2d					XtPtr1 ::= *
=47785					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb2d					Execute_parsing:
.bb2d	20 31 b4	jsr $b431			jsr underflow_3
.bb30	20 dc c3	jsr $c3dc			jsr Input_To_R		; save existing input for later
.bb33	20 71 ce	jsr $ce71			jsr Not_Rot		; -ROT ( xt addr u )
.bb36	20 ef b3	jsr $b3ef			jsr PopYA		; TOS is new ciblen
.bb39	85 06		sta $06				sta ciblen+0
.bb3b	84 07		sty $07				sty ciblen+1
.bb3d	20 ef b3	jsr $b3ef			jsr PopYA		; NOS is new cib
.bb40	85 04		sta $04				sta cib+0
.bb42	84 05		sty $05				sty cib+1
.bb44	a9 00		lda #$00			lda #0
.bb46	85 08		sta $08				sta toin+0		; Set >IN to zero
.bb48	85 09		sta $09				sta toin+1
.bb4a	20 10 ce	jsr $ce10			jsr Execute
.bb4d	20 fd c3	jsr $c3fd			jsr R_To_Input		; restore
=35					CodeLen	.var *-XtPtr1
=$bb50					Here1 = *	; remember here
>bb2b	23					.byte CodeLen	;patch wh_CodeLength
.bb50	60		rts				rts
>bb51	53 6f 75 72 63 65		Name0:	.text "Source"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=47831					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb57	a6					.byte (("Source"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=46					LinkDisplacement = Nt0-WordListLink
>bb58	10					.byte WordFlags	;wh_Flags
>bb59	03					.byte 3	;wh_CodeLength
>bb5a	2e					  .byte LinkDisplacement	; offset to previous nt
=$bb5b					XtPtr1 ::= *
=47831					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb5b					Source:
.bb5b	a5 04		lda $04				lda cib+0	; push address
.bb5d	a4 05		ldy $05				ldy cib+1
.bb5f	20 ae b7	jsr $b7ae			jsr PushYA
.bb62	a5 06		lda $06				lda ciblen+0	; push size, return
.bb64	a4 07		ldy $07				ldy ciblen+1
.bb66	4c ae b7	jmp $b7ae			jmp PushYA
=14					CodeLen	.var *-XtPtr1
=$bb69					Here1 = *	; remember here
>bb59	0e					.byte CodeLen	;patch wh_CodeLength
>bb69	53 6f 75 72 63 65 2d 49		Name0:	.text "Source-Id"	;  name of word as a string, ending at wh_NameLastChar
>bb71	64
=9					NameLength = *-Name0
=47858					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb72	89					.byte (("Source-Id"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>bb73	10					.byte WordFlags	;wh_Flags
>bb74	03					.byte 3	;wh_CodeLength
>bb75	1b					  .byte LinkDisplacement	; offset to previous nt
=$bb76					XtPtr1 ::= *
=47858					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb76	a5 02		lda $02		Source_Id:	lda insrc+0
.bb78	a4 03		ldy $03				ldy insrc+1
.bb7a	4c ae b7	jmp $b7ae			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$bb7d					Here1 = *	; remember here
>bb74	07					.byte CodeLen	;patch wh_CodeLength
>bb7d	45 78 69 74			Name0:	.text "Exit"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=47873					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb81	84					.byte (("Exit"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=36					WordFlags ::= AN+CO	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>bb82	24					.byte WordFlags	;wh_Flags
>bb83	03					.byte 3	;wh_CodeLength
>bb84	0f					  .byte LinkDisplacement	; offset to previous nt
=$bb85					XtPtr1 ::= *
=47873					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb85					Exit:
.bb85	60		rts				rts		; keep before WordEnd so it gets inlined
=1					CodeLen	.var *-XtPtr1
=$bb86					Here1 = *	; remember here
>bb83	01					.byte CodeLen	;patch wh_CodeLength
>bb86	3b				Name0:	.text ";"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=47879					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb87	61					.byte ((";"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=6					LinkDisplacement = Nt0-WordListLink
>bb88	1c					.byte WordFlags	;wh_Flags
>bb89	03					.byte 3	;wh_CodeLength
>bb8a	06					  .byte LinkDisplacement	; offset to previous nt
=$bb8b					XtPtr1 ::= *
=47879					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb8b					Semicolon:
.bb8b	20 36 b7	jsr $b736			jsr Left_Bracket	; switch to interpret state
.bb8e	24 0c		bit $0c				bit status		; is this a : word or a :NONAME word?
.bb90	70 0c		bvs $bb9e			bvs _colonword
.bb92	a9 60		lda #$60			lda #$60		; compile an RTS
.bb94	20 e2 cc	jsr $cce2			jsr C_Comma_A
.bb97	a5 0e		lda $0e				lda WorkWord+0		; push xt, return
.bb99	a4 0f		ldy $0f				ldy WorkWord+1
.bb9b	4c ae b7	jmp $b7ae			jmp PushYA
.bb9e					_colonword:
.bb9e	24 0c		bit $0c				bit status
.bba0	10 1d		bpl $bbbf			bpl _new_word	; Bit 7 is clear = new word
.bba2	a5 0e		lda $0e				lda WorkWord+0		; push our nt
.bba4	a4 0f		ldy $0f				ldy WorkWord+1
.bba6	20 ae b7	jsr $b7ae			jsr PushYA
.bba9	20 e1 bd	jsr $bde1			jsr Name_To_String	; get our name string
.bbac	a9 14		lda #$14			lda #<str_redefined	; string "redefined"
.bbae	a0 da		ldy #$da			ldy #>str_redefined
.bbb0	20 ee cd	jsr $cdee			jsr Print_ASCIIZ_YA_no_lf
.bbb3	20 d3 cd	jsr $cdd3			jsr Type		; print the ofWordEnding word.
.bbb6	20 c7 cd	jsr $cdc7			jsr Space
.bbb9	a9 7f		lda #$7f			lda #$ff-%10000000
.bbbb	25 0c		and $0c				and status
.bbbd	85 0c		sta $0c				sta status
.bbbf					_new_word:
.bbbf	20 f9 c0	jsr $c0f9			jsr Header_Link		; finish linking into current dictionary
.bbc2	20 ca bb	jsr $bbca			jsr adjust_z		; fix word length
.bbc5	a9 60		lda #$60			lda #$60		; compile an RTS
.bbc7	4c e2 cc	jmp $cce2			jmp C_Comma_A
=63					CodeLen	.var *-XtPtr1
=$bbca					Here1 = *	; remember here
>bb89	3f					.byte CodeLen	;patch wh_CodeLength
.bbca					adjust_z:
.bbca	a0 81		ldy #$81			ldy #wh_Flags		; tmp1= xt
.bbcc	b1 10		lda ($10),y			lda (dp),y
.bbce	29 03		and #$03			and #FP+DB
.bbd0	18		clc				clc
.bbd1	69 84		adc #$84			adc #wh_LinkNt+1
.bbd3	65 10		adc $10				adc dp+0
.bbd5	85 14		sta $14				sta tmp1+0
.bbd7	a9 00		lda #$00			lda #0
.bbd9	65 11		adc $11				adc dp+1
.bbdb	85 15		sta $15				sta tmp1+1
.bbdd	38		sec				sec			; length= cp-xt
.bbde	a5 00		lda $00				lda cp+0
.bbe0	e5 14		sbc $14				sbc tmp1+0
.bbe2	a8		tay				tay
.bbe3	a5 01		lda $01				lda cp+1
.bbe5	e5 15		sbc $15				sbc tmp1+1
.bbe7	f0 0c		beq $bbf5			beq _short		; length > $ff ?
.bbe9	a0 81		ldy #$81			ldy #Wh_Flags		; make it NN
.bbeb	b1 10		lda ($10),y			lda (dp),y
.bbed	29 df		and #$df			and #$ff-AN
.bbef	09 10		ora #$10			ora #NN
.bbf1	91 10		sta ($10),y			sta (dp),y
.bbf3	a0 ff		ldy #$ff			ldy #$ff		; set max length for header
.bbf5	98		tya		_short:		tya			; fill in length in header
.bbf6	a0 82		ldy #$82			ldy #Wh_CodeLength
.bbf8	91 10		sta ($10),y			sta (dp),y
.bbfa	60		rts				rts
>bbfb	3a				Name0:	.text ":"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=47996					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bbfc	41					.byte ((":"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=117					LinkDisplacement = Nt0-WordListLink
>bbfd	10					.byte WordFlags	;wh_Flags
>bbfe	03					.byte 3	;wh_CodeLength
>bbff	75					  .byte LinkDisplacement	; offset to previous nt
=$bc00					XtPtr1 ::= *
=47996					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc00					Colon:
.bc00	20 4b b7	jsr $b74b			jsr Right_Bracket	; switch to compile state
.bc03	a5 0c		lda $0c				lda status
.bc05	09 40		ora #$40			ora #%01000000	; tell ";" and RECURSE that WorkWord contains nt
.bc07	09 80		ora #$80			ora #%10000000	; Tell Header_Build not to print warning for duplicate name.
.bc09	85 0c		sta $0c				sta status
.bc0b	4c 04 c1	jmp $c104			jmp Header_Build	; compile word header (but don't link into wordlist)
=14					CodeLen	.var *-XtPtr1
=$bc0e					Here1 = *	; remember here
>bbfe	0e					.byte CodeLen	;patch wh_CodeLength
>bc0e	3a 4e 6f 4e 61 6d 65		Name0:	.text ":NoName"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=48021					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc15	a7					.byte ((":NoName"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>bc16	10					.byte WordFlags	;wh_Flags
>bc17	03					.byte 3	;wh_CodeLength
>bc18	19					  .byte LinkDisplacement	; offset to previous nt
=$bc19					XtPtr1 ::= *
=48021					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc19					Colon_NoName:
.bc19	20 4b b7	jsr $b74b			jsr Right_Bracket	; switch to compile state
.bc1c	a9 bf		lda #$bf			lda #$ff-%01000000	; tell ";" and RECURSE that WorkWord contains xt
.bc1e	25 0c		and $0c				and status
.bc20	85 0c		sta $0c				sta status
.bc22	a5 00		lda $00				lda cp+0
.bc24	85 0e		sta $0e				sta WorkWord+0
.bc26	a5 01		lda $01				lda cp+1
.bc28	85 0f		sta $0f				sta WorkWord+1
=17					CodeLen	.var *-XtPtr1
=$bc2a					Here1 = *	; remember here
>bc17	11					.byte CodeLen	;patch wh_CodeLength
.bc2a	60		rts				rts
>bc2b	27				Name0:	.text "'"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=48044					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc2c	e1					.byte (("'"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>bc2d	10					.byte WordFlags	;wh_Flags
>bc2e	03					.byte 3	;wh_CodeLength
>bc2f	17					  .byte LinkDisplacement	; offset to previous nt
=$bc30					XtPtr1 ::= *
=48044					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc30	20 36 bc	jsr $bc36	Tick:		jsr Tick_Nt
.bc33	4c 98 bd	jmp $bd98			jmp Name_To_Int	; ( nt -- xt )
=6					CodeLen	.var *-XtPtr1
=$bc36					Here1 = *	; remember here
>bc2e	06					.byte CodeLen	;patch wh_CodeLength
.bc36	20 9d ba	jsr $ba9d	Tick_Nt:	jsr parse_name_check	; ( -- addr u )
.bc39	4c 84 bc	jmp $bc84			jmp find_name_check	; ( addr u -- nt )
>bc3c	5b 27 5d			Name0:	.text "[']"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=48063					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc3f	a3					.byte (("[']"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>bc40	1c					.byte WordFlags	;wh_Flags
>bc41	03					.byte 3	;wh_CodeLength
>bc42	13					  .byte LinkDisplacement	; offset to previous nt
=$bc43					XtPtr1 ::= *
=48063					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc43	20 30 bc	jsr $bc30	Bracket_Tick:	jsr Tick
.bc46	4c 63 b7	jmp $b763			jmp Literal
=6					CodeLen	.var *-XtPtr1
=$bc49					Here1 = *	; remember here
>bc41	06					.byte CodeLen	;patch wh_CodeLength
>bc49	46 69 6e 64 2d 4e 61 6d		Name0:	.text "Find-Name"	;  name of word as a string, ending at wh_NameLastChar
>bc51	65
=9					NameLength = *-Name0
=48082					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc52	a9					.byte (("Find-Name"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>bc53	10					.byte WordFlags	;wh_Flags
>bc54	03					.byte 3	;wh_CodeLength
>bc55	13					  .byte LinkDisplacement	; offset to previous nt
=$bc56					XtPtr1 ::= *
=48082					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc56					Find_Name:
.bc56	20 91 bc	jsr $bc91			jsr swl_prepare 	; setup for search
.bc59	ca		dex				dex
.bc5a	ca		dex				dex			; ( ? )
.bc5b	a9 ff		lda #$ff			lda #$ff		; for each entry in search order
.bc5d	95 25		sta $25,x			sta DStack+1,x
.bc5f	f6 25		inc $25,x	_wordlist_next:	inc DStack+1,x		; step to next search order entry
.bc61	b4 25		ldy $25,x			ldy DStack+1,x
.bc63	cc 2a 03	cpy $032a			cpy Num_OrderV		; at end of list?
.bc66	90 06		bcc $bc6e			bcc _nextS
.bc68	d0 15		bne $bc7f			bne _fail
.bc6a	a9 03		lda #$03			lda #wid_Root		; also try root wordlist
.bc6c	d0 03		bne $bc71			bne _nextA
.bc6e	b9 2b 03	lda $032b,y	_nextS:		lda Search_OrderV,y	; A= search_order[Y]  get wordlist ID
.bc71	20 ba bc	jsr $bcba	_nextA:		jsr swl_search_wordlist
.bc74	f0 e9		beq $bc5f			beq _wordlist_next
.bc76	a5 14		lda $14				lda tmp1+0		; return nt
.bc78	a4 15		ldy $15				ldy tmp1+1
.bc7a	95 24		sta $24,x	_exit:		sta DStack+0,x
.bc7c	94 25		sty $25,x			sty DStack+1,x
.bc7e	60		rts				rts			; ( ? )
.bc7f	a9 00		lda #$00	_fail:		lda #0			; return 0
.bc81	a8		tay				tay
.bc82	f0 f6		beq $bc7a			beq _exit
=46					CodeLen	.var *-XtPtr1
=$bc84					Here1 = *	; remember here
>bc54	2e					.byte CodeLen	;patch wh_CodeLength
.bc84					find_name_check:
.bc84	20 56 bc	jsr $bc56			jsr Find_Name
.bc87	b5 25		lda $25,x			lda DStack+1,x		; check that we found a word
.bc89	f0 01		beq $bc8c			beq _NotFound
.bc8b	60		rts				rts
.bc8c	a9 f3		lda #$f3	_NotFound:	lda #$100+err_UndefinedWord ; complain & quit
.bc8e	4c 74 b4	jmp $b474			jmp ThrowA
.bc91					swl_prepare:
.bc91	20 2c b4	jsr $b42c			jsr underflow_2
.bc94	38		sec				sec			; A= 0 - name start offset
.bc95	b5 24		lda $24,x			lda DStack+0,x
.bc97	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.bc99	75 26		adc $26,x			adc DStack+2,x		; tmp2= pattern nt
.bc9b	85 16		sta $16				sta tmp2+0
.bc9d	a9 ff		lda #$ff			lda #$ff
.bc9f	75 27		adc $27,x			adc DStack+3,x
.bca1	85 17		sta $17				sta tmp2+1
.bca3	a9 7f		lda #$7f			lda #wh_NameLastChar	; tmp4+0= starting name char index -1
.bca5	38		sec				sec
.bca6	f5 24		sbc $24,x			sbc DStack+0,x
.bca8	85 1a		sta $1a				sta tmp4+0
.bcaa	a0 7f		ldy #$7f			ldy #wh_NameLastChar	; tmp3+0= wh_HNL (hash & length)
.bcac	b1 16		lda ($16),y			lda (tmp2),y
.bcae	0a		asl a				asl a
.bcaf	0a		asl a				asl a
.bcb0	0a		asl a				asl a
.bcb1	0a		asl a				asl a
.bcb2	0a		asl a				asl a
.bcb3	15 24		ora $24,x			ora DStack+0,x
.bcb5	85 18		sta $18				sta tmp3+0
.bcb7	4c 31 c5	jmp $c531			jmp Two_Drop		; Drop addr & u
.bcba					swl_search_wordlist:
.bcba	86 19		stx $19				stx tmp3+1		; save data stack index
.bcbc	0a		asl a				asl			; tmp1 = up->wordlists[A]
.bcbd	a8		tay				tay
.bcbe	be 12 03	ldx $0312,y			ldx WordlistsV+0,y
.bcc1	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bcc4	d0 15		bne $bcdb			bne _word_3		;   not end-of-list?
.bcc6	08		php		_rts:		php
.bcc7	a6 19		ldx $19				ldx tmp3+1		; restore data stack index
.bcc9	28		plp				plp
.bcca	60		rts				rts			; Z= end_of_list
.bccb					_word_next:
.bccb	a0 81		ldy #$81			ldy #wh_Flags		; what kind of LinkNt?
.bccd	b1 14		lda ($14),y			lda (tmp1),y
.bccf	a0 83		ldy #$83			ldy #wh_LinkNt
.bcd1	29 01		and #$01			and #FP
.bcd3	f0 0e		beq $bce3			beq _LinkShort
.bcd5	b1 14		lda ($14),y	_LinkLong:	lda (tmp1),y		; tmp1= tmp1->Wh_LinkNt_word
.bcd7	aa		tax				tax
.bcd8	c8		iny				iny
.bcd9	b1 14		lda ($14),y			lda (tmp1),y
.bcdb	85 15		sta $15		_word_3:	sta tmp1+1
.bcdd	86 14		stx $14				stx tmp1+0
.bcdf	d0 0d		bne $bcee			bne _Test
.bce1	f0 e3		beq $bcc6			beq _rts
.bce3	a5 14		lda $14		_LinkShort:	lda tmp1+0		; tmp1 -= tmp1->wh_LinkNt offset byte
.bce5	38		sec				sec
.bce6	f1 14		sbc ($14),y			sbc (tmp1),y
.bce8	85 14		sta $14				sta tmp1+0
.bcea	b0 02		bcs $bcee			bcs +
.bcec	c6 15		dec $15				dec tmp1+1
.bcee					+
.bcee	a0 80		ldy #$80	_Test:		ldy #Wh_HashNameLen	; Are hash & name length the same?
.bcf0	b1 14		lda ($14),y			lda (tmp1),y
.bcf2	c5 18		cmp $18				cmp tmp3+0
.bcf4	d0 d5		bne $bccb			bne _word_next
.bcf6	a4 1a		ldy $1a				ldy tmp4+0		; Y= index of 1st char -1
.bcf8	c8		iny		_char_next:	iny			; to next char
.bcf9	30 cb		bmi $bcc6			bmi _rts		; end of string?
.bcfb	b1 16		lda ($16),y			lda (tmp2),y		; char of pattern name
.bcfd	51 14		eor ($14),y			eor (tmp1),y		; char of this word name
.bcff	f0 f7		beq $bcf8			beq _char_next		;   exact match?
.bd01	c9 20		cmp #$20			cmp #$20		;   only a case mismatch?
.bd03	d0 c6		bne $bccb			bne _word_next
.bd05	b1 16		lda ($16),y			lda (tmp2),y		;   verify it is alpha char
.bd07	29 df		and #$df			and #$df
.bd09	e9 41		sbc #$41			sbc #'A'
.bd0b	c9 1a		cmp #$1a			cmp #'Z'-'A'+1
.bd0d	90 e9		bcc $bcf8			bcc _char_next
.bd0f	b0 ba		bcs $bccb			bcs _word_next
>bd11	46 69 6e 64			Name0:	.text "Find"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=48277					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bd15	84					.byte (("Find"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=195					LinkDisplacement = Nt0-WordListLink
>bd16	10					.byte WordFlags	;wh_Flags
>bd17	03					.byte 3	;wh_CodeLength
>bd18	c3					  .byte LinkDisplacement	; offset to previous nt
=$bd19					XtPtr1 ::= *
=48277					WordListLink ::= Nt0 ; remember the nt of this word for later
.bd19					Find:
.bd19	20 51 cf	jsr $cf51			jsr Dup			; Save caddr in case conversion fails, check underflow
.bd1c	20 e7 b1	jsr $b1e7			jsr Count		; Convert counted string address to modern format
.bd1f	20 56 bc	jsr $bc56			jsr Find_Name		; ( caddr nt | 0 ) tmp1=nt
.bd22	b5 25		lda $25,x			lda DStack+1,x		; word found?
.bd24	d0 01		bne $bd27			bne _found_word
.bd26	60		rts				rts			; ( caddr 0 )
.bd27					_found_word:
.bd27	20 8b c9	jsr $c98b			jsr Nip			; ( nt )
.bd2a	20 98 bd	jsr $bd98			jsr Name_To_Int		; ( xt ) tmp1=nt
.bd2d	a0 81		ldy #$81			ldy #Wh_Flags		; immediate?
.bd2f	b1 14		lda ($14),y			lda (tmp1),y
.bd31	29 08		and #$08			and #IM
.bd33	d0 03		bne $bd38			bne _immediate
.bd35	4c bd b7	jmp $b7bd			jmp True		; not immediate, return ( xt -1 )
.bd38	4c f4 b7	jmp $b7f4	_immediate:	jmp One			; immediate, return ( xt 1 )
=34					CodeLen	.var *-XtPtr1
=$bd3b					Here1 = *	; remember here
>bd17	22					.byte CodeLen	;patch wh_CodeLength
>bd3b	49 6e 74 3e 4e 61 6d 65		Name0:	.text "Int>Name"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=48323					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bd43	a8					.byte (("Int>Name"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=46					LinkDisplacement = Nt0-WordListLink
>bd44	50					.byte WordFlags	;wh_Flags
>bd45	03					.byte 3	;wh_CodeLength
>bd46	2e					  .byte LinkDisplacement	; offset to previous nt
=$bd47					XtPtr1 ::= *
=48323					WordListLink ::= Nt0 ; remember the nt of this word for later
.bd47					Int_To_Name:
.bd47	20 18 b4	jsr $b418			jsr underflow_1
.bd4a	a9 fe		lda #$fe			lda #$100-2		; for each wordlist
.bd4c	85 19		sta $19				sta tmp3+1
.bd4e					_wordlist_next:
.bd4e	a4 19		ldy $19				ldy tmp3+1		; get next wordlist index
.bd50	c8		iny				iny
.bd51	c8		iny				iny
.bd52	84 19		sty $19				sty tmp3+1
.bd54	c0 0c		cpy #$0c			cpy #(Num_OrderV-WordlistsV)/2
.bd56	b0 2b		bcs $bd83			bcs _fail
.bd58	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.bd5b	85 14		sta $14				sta tmp1+0
.bd5d	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bd60	85 15		sta $15				sta tmp1+1
.bd62	d0 07		bne $bd6b			bne _calc
.bd64	f0 e8		beq $bd4e			beq _wordlist_next
.bd66	20 96 82	jsr $8296	_word_next:	jsr LinkNext		; step to next word
.bd69	f0 e3		beq $bd4e			beq _wordlist_next
.bd6b	20 a5 bd	jsr $bda5	_calc:		jsr NameToIntTmp	; tmp2= xt
.bd6e	a5 16		lda $16				lda tmp2+0
.bd70	d5 24		cmp $24,x			cmp DStack+0,x		;  match?
.bd72	d0 f2		bne $bd66			bne _word_next
.bd74	a5 17		lda $17				lda tmp2+1
.bd76	d5 25		cmp $25,x			cmp DStack+1,x
.bd78	d0 ec		bne $bd66			bne _word_next
.bd7a	a5 14		lda $14				lda tmp1+0
.bd7c	95 24		sta $24,x			sta DStack+0,x
.bd7e	a5 15		lda $15				lda tmp1+1
.bd80	95 25		sta $25,x			sta DStack+1,x
.bd82	60		rts				rts			; return P.Z=0
.bd83					_fail:
.bd83	a9 00		lda #$00			lda #0			; return a zero to indicate that we didn't find it.
.bd85	95 24		sta $24,x			sta DStack+0,x
.bd87	95 25		sta $25,x			sta DStack+1,x
.bd89	85 15		sta $15				sta tmp1+1
.bd8b	60		rts				rts			; return P.Z=1
=69					CodeLen	.var *-XtPtr1
=$bd8c					Here1 = *	; remember here
>bd45	45					.byte CodeLen	;patch wh_CodeLength
>bd8c	4e 61 6d 65 3e 49 6e 74		Name0:	.text "Name>Int"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=48404					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bd94	88					.byte (("Name>Int"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=81					LinkDisplacement = Nt0-WordListLink
>bd95	10					.byte WordFlags	;wh_Flags
>bd96	03					.byte 3	;wh_CodeLength
>bd97	51					  .byte LinkDisplacement	; offset to previous nt
=$bd98					XtPtr1 ::= *
=48404					WordListLink ::= Nt0 ; remember the nt of this word for later
.bd98	20 fa b3	jsr $b3fa	Name_To_Int:	jsr PopTmp1
.bd9b	20 a5 bd	jsr $bda5	Name_To_Int_T:	jsr NameToIntTmp
.bd9e	a5 16		lda $16				lda tmp2+0
.bda0	a4 17		ldy $17				ldy tmp2+1
.bda2	4c ae b7	jmp $b7ae			jmp PushYA
=13					CodeLen	.var *-XtPtr1
=$bda5					Here1 = *	; remember here
>bd96	0d					.byte CodeLen	;patch wh_CodeLength
.bda5					NameToIntTmp:
.bda5	a0 81		ldy #$81			ldy #wh_Flags
.bda7	b1 14		lda ($14),y			lda (tmp1),y
.bda9	29 02		and #$02			and #DB			; has XT ptr?
.bdab	d0 12		bne $bdbf			bne _HasXtPtr
.bdad	b1 14		lda ($14),y			lda (tmp1),y		; A= header length
.bdaf	29 03		and #$03			and #DB+FP
.bdb1	18		clc				clc
.bdb2	69 84		adc #$84			adc #wh_LinkNt+1
.bdb4	65 14		adc $14				adc tmp1+0		; TOS=tmp1+A
.bdb6	85 16		sta $16				sta tmp2+0
.bdb8	a9 00		lda #$00			lda #0
.bdba	65 15		adc $15				adc tmp1+1
.bdbc	85 17		sta $17				sta tmp2+1
.bdbe	60		rts				rts
.bdbf	b1 14		lda ($14),y	_HasXtPtr:	lda (tmp1),y		; get wh_Flags again
.bdc1	a0 84		ldy #$84			ldy #wh_LinkNt+1
.bdc3	29 01		and #$01			and #FP			; has long LinkNt ?
.bdc5	f0 01		beq $bdc8			beq _short
.bdc7	c8		iny				iny			;   skip extra byte
.bdc8	b1 14		lda ($14),y	_short:		lda (tmp1),y		; tmp2= xt pointer
.bdca	85 16		sta $16				sta tmp2+0
.bdcc	c8		iny				iny
.bdcd	b1 14		lda ($14),y			lda (tmp1),y
.bdcf	85 17		sta $17				sta tmp2+1
.bdd1	60		rts				rts
>bdd2	4e 61 6d 65 3e 53 74 72		Name0:	.text "Name>String"	;  name of word as a string, ending at wh_NameLastChar
>bdda	69 6e 67
=11					NameLength = *-Name0
=48477					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bddd	eb					.byte (("Name>String"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=73					LinkDisplacement = Nt0-WordListLink
>bdde	50					.byte WordFlags	;wh_Flags
>bddf	03					.byte 3	;wh_CodeLength
>bde0	49					  .byte LinkDisplacement	; offset to previous nt
=$bde1					XtPtr1 ::= *
=48477					WordListLink ::= Nt0 ; remember the nt of this word for later
.bde1					Name_To_String:
.bde1	20 18 b4	jsr $b418			jsr underflow_1
.bde4	b5 24		lda $24,x			lda DStack+0,x		; tmp1= nt
.bde6	b4 25		ldy $25,x			ldy DStack+1,x
.bde8	85 14		sta $14				sta tmp1+0
.bdea	84 15		sty $15				sty tmp1+1		; ( nt )
.bdec	a0 80		ldy #$80			ldy #Wh_HashNameLen
.bdee	b1 14		lda ($14),y			lda (tmp1),y
.bdf0	29 1f		and #$1f			and #wh_HNL_NameLengthMask
.bdf2	48		pha				pha
.bdf3	49 ff		eor #$ff			eor #$ff
.bdf5	38		sec				sec
.bdf6	69 80		adc #$80			adc #Wh_NameLastChar+1	; calc string start offset
.bdf8	20 07 ca	jsr $ca07			jsr Plus_A		; calc string start addr
.bdfb	68		pla				pla			; push string length
.bdfc	4c dd b7	jmp $b7dd			jmp PushZA
=30					CodeLen	.var *-XtPtr1
=$bdff					Here1 = *	; remember here
>bddf	1e					.byte CodeLen	;patch wh_CodeLength
>bdff	3e 42 6f 64 79			Name0:	.text ">Body"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=48516					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be04	25					.byte ((">Body"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>be05	50					.byte WordFlags	;wh_Flags
>be06	03					.byte 3	;wh_CodeLength
>be07	27					  .byte LinkDisplacement	; offset to previous nt
=$be08					XtPtr1 ::= *
=48516					WordListLink ::= Nt0 ; remember the nt of this word for later
.be08					To_Body:
.be08	20 18 b4	jsr $b418			jsr underflow_1
.be0b	a9 03		lda #$03			lda #3		; PFA is after the beginning JSR abs
.be0d	4c 07 ca	jmp $ca07			jmp Plus_A
=8					CodeLen	.var *-XtPtr1
=$be10					Here1 = *	; remember here
>be06	08					.byte CodeLen	;patch wh_CodeLength
>be10	45 72 61 73 65			Name0:	.text "Erase"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=48533					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be15	a5					.byte (("Erase"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>be16	10					.byte WordFlags	;wh_Flags
>be17	03					.byte 3	;wh_CodeLength
>be18	11					  .byte LinkDisplacement	; offset to previous nt
=$be19					XtPtr1 ::= *
=48533					WordListLink ::= Nt0 ; remember the nt of this word for later
.be19					Erase:
.be19	20 eb b7	jsr $b7eb			jsr Zero
.be1c	4c 36 be	jmp $be36			jmp Fill
=6					CodeLen	.var *-XtPtr1
=$be1f					Here1 = *	; remember here
>be17	06					.byte CodeLen	;patch wh_CodeLength
>be1f	42 6c 61 6e 6b			Name0:	.text "Blank"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=48548					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be24	65					.byte (("Blank"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>be25	10					.byte WordFlags	;wh_Flags
>be26	03					.byte 3	;wh_CodeLength
>be27	0f					  .byte LinkDisplacement	; offset to previous nt
=$be28					XtPtr1 ::= *
=48548					WordListLink ::= Nt0 ; remember the nt of this word for later
.be28					Blank:
.be28	20 07 b8	jsr $b807			jsr Bl
.be2b	4c 36 be	jmp $be36			jmp Fill
=6					CodeLen	.var *-XtPtr1
=$be2e					Here1 = *	; remember here
>be26	06					.byte CodeLen	;patch wh_CodeLength
>be2e	46 69 6c 6c			Name0:	.text "Fill"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=48562					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be32	84					.byte (("Fill"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>be33	50					.byte WordFlags	;wh_Flags
>be34	03					.byte 3	;wh_CodeLength
>be35	0e					  .byte LinkDisplacement	; offset to previous nt
=$be36					XtPtr1 ::= *
=48562					WordListLink ::= Nt0 ; remember the nt of this word for later
.be36					Fill:
.be36	20 31 b4	jsr $b431			jsr underflow_3
.be39	b5 28		lda $28,x			lda DStack+4,x		; tmp1= address
.be3b	85 14		sta $14				sta tmp1+0
.be3d	b5 29		lda $29,x			lda DStack+5,x
.be3f	85 15		sta $15				sta tmp1+1
.be41	b5 26		lda $26,x			lda DStack+2,x		; tmp2= counter.lo
.be43	85 16		sta $16				sta tmp2+0
.be45	f6 27		inc $27,x			inc DStack+3,x		; so decrement & test for 0 works
.be47	b5 24		lda $24,x			lda DStack+0,x		; A= fill byte
.be49	a0 00		ldy #$00			ldy #0
.be4b	c4 16		cpy $16		_loop:		cpy tmp2+0		; done?
.be4d	f0 09		beq $be58			beq _test2
.be4f	91 14		sta ($14),y	_3:		sta (tmp1),y		; store a byte
.be51	c8		iny				iny			; to next byte
.be52	d0 f7		bne $be4b			bne _loop
.be54	e6 15		inc $15				inc tmp1+1		; increment addr page
.be56	d0 f3		bne $be4b			bne _loop
.be58	d6 27		dec $27,x	_test2:		dec DStack+3,x		; any more pages?
.be5a	d0 f3		bne $be4f			bne _3
.be5c	4c 86 ad	jmp $ad86			jmp ThreeDrop	; Drop three cells off the Data Stack.
=41					CodeLen	.var *-XtPtr1
=$be5f					Here1 = *	; remember here
>be34	29					.byte CodeLen	;patch wh_CodeLength
>be5f	56 61 72 69 61 62 6c 65		Name0:	.text "Variable"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=48615					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be67	a8					.byte (("Variable"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>be68	10					.byte WordFlags	;wh_Flags
>be69	03					.byte 3	;wh_CodeLength
>be6a	35					  .byte LinkDisplacement	; offset to previous nt
=$be6b					XtPtr1 ::= *
=48615					WordListLink ::= Nt0 ; remember the nt of this word for later
.be6b	20 a4 c1	jsr $c1a4	Variable:	jsr Create		; compile word header & push PFA
.be6e	a9 00		lda #$00			lda #0			; allot & initialize the variable's data
.be70	a8		tay				tay
.be71	4c f9 cc	jmp $ccf9			jmp Comma_YA
=9					CodeLen	.var *-XtPtr1
=$be74					Here1 = *	; remember here
>be69	09					.byte CodeLen	;patch wh_CodeLength
>be74	32 56 61 72 69 61 62 6c		Name0:	.text "2Variable"	;  name of word as a string, ending at wh_NameLastChar
>be7c	65
=9					NameLength = *-Name0
=48637					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be7d	a9					.byte (("2Variable"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>be7e	10					.byte WordFlags	;wh_Flags
>be7f	03					.byte 3	;wh_CodeLength
>be80	16					  .byte LinkDisplacement	; offset to previous nt
=$be81					XtPtr1 ::= *
=48637					WordListLink ::= Nt0 ; remember the nt of this word for later
.be81	20 6b be	jsr $be6b	Two_variable:	jsr Variable		; compile word header & push PFA & 1st cell of data
.be84	4c f9 cc	jmp $ccf9			jmp Comma_YA		; alloc & init 2nd cell of data
=6					CodeLen	.var *-XtPtr1
=$be87					Here1 = *	; remember here
>be7f	06					.byte CodeLen	;patch wh_CodeLength
>be87	43 6f 6e 73 74 61 6e 74		Name0:	.text "Constant"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=48655					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be8f	88					.byte (("Constant"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>be90	50					.byte WordFlags	;wh_Flags
>be91	03					.byte 3	;wh_CodeLength
>be92	12					  .byte LinkDisplacement	; offset to previous nt
=$be93					XtPtr1 ::= *
=48655					WordListLink ::= Nt0 ; remember the nt of this word for later
.be93					Constant:
.be93	20 18 b4	jsr $b418			jsr underflow_1
.be96	20 f6 c0	jsr $c0f6			jsr Header_Comma	; compile word header
.be99	20 6c b7	jsr $b76c			jsr LitCompile		; compile code to load registers, & pick a subroutine
.be9c	20 39 cd	jsr $cd39			jsr Jmp_Comma_NT_YA	; compile code to JMP to the subroutine
.be9f	4c ca bb	jmp $bbca			jmp adjust_z		; fix word length
=15					CodeLen	.var *-XtPtr1
=$bea2					Here1 = *	; remember here
>be91	0f					.byte CodeLen	;patch wh_CodeLength
>bea2	32 43 6f 6e 73 74 61 6e		Name0:	.text "2Constant"	;  name of word as a string, ending at wh_NameLastChar
>beaa	74
=9					NameLength = *-Name0
=48683					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>beab	89					.byte (("2Constant"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>beac	50					.byte WordFlags	;wh_Flags
>bead	03					.byte 3	;wh_CodeLength
>beae	1c					  .byte LinkDisplacement	; offset to previous nt
=$beaf					XtPtr1 ::= *
=48683					WordListLink ::= Nt0 ; remember the nt of this word for later
.beaf					Two_constant:
.beaf	20 2c b4	jsr $b42c			jsr underflow_2
.beb2	20 f6 c0	jsr $c0f6			jsr Header_Comma	; compile word header
.beb5	20 6e cf	jsr $cf6e			jsr Swap
.beb8	20 63 b7	jsr $b763			jsr Literal		; compile push lo cell
.bebb	20 6c b7	jsr $b76c			jsr LitCompile		; compile push hi cell, YA=exit routine
.bebe	20 39 cd	jsr $cd39			jsr Jmp_Comma_NT_YA	; compile JMP from above
.bec1	4c ca bb	jmp $bbca			jmp adjust_z		; fix word length
=21					CodeLen	.var *-XtPtr1
=$bec4					Here1 = *	; remember here
>bead	15					.byte CodeLen	;patch wh_CodeLength
>bec4	56 61 6c 75 65			Name0:	.text "Value"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=48713					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bec9	a5					.byte (("Value"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>beca	50					.byte WordFlags	;wh_Flags
>becb	03					.byte 3	;wh_CodeLength
>becc	1e					  .byte LinkDisplacement	; offset to previous nt
=$becd					XtPtr1 ::= *
=48713					WordListLink ::= Nt0 ; remember the nt of this word for later
.becd					Value:
.becd	20 18 b4	jsr $b418			jsr underflow_1
.bed0	20 f6 c0	jsr $c0f6			jsr Header_Comma	; compile word header
.bed3	20 95 b7	jsr $b795			jsr ldya_immed_comma	; compile lda # & ldy #
.bed6	a9 ae		lda #$ae			lda #<PushYA		; compile jmp PushYA
.bed8	a0 b7		ldy #$b7			ldy #>PushYA
.beda	20 32 cd	jsr $cd32			jsr Jmp_Comma_YA
.bedd	4c ca bb	jmp $bbca			jmp adjust_z		; fix word length
=19					CodeLen	.var *-XtPtr1
=$bee0					Here1 = *	; remember here
>becb	13					.byte CodeLen	;patch wh_CodeLength
>bee0	32 56 61 6c 75 65		Name0:	.text "2Value"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=48742					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bee6	a6					.byte (("2Value"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>bee7	50					.byte WordFlags	;wh_Flags
>bee8	03					.byte 3	;wh_CodeLength
>bee9	1d					  .byte LinkDisplacement	; offset to previous nt
=$beea					XtPtr1 ::= *
=48742					WordListLink ::= Nt0 ; remember the nt of this word for later
.beea					TwoValue:
.beea	20 2c b4	jsr $b42c			jsr underflow_2
.beed	20 f6 c0	jsr $c0f6			jsr Header_Comma	; compile word header
.bef0	a9 fd		lda #$fd			lda #<TwoValue_Runtime	; compile JSR TValue_Runtime
.bef2	a0 be		ldy #$be			ldy #>TwoValue_Runtime
.bef4	20 1c cd	jsr $cd1c			jsr Jsr_Comma_YA
.bef7	20 ca bb	jsr $bbca			jsr adjust_z		; fix word length
.befa	4c 06 cd	jmp $cd06			jmp Two_Comma		; compile the value, return
=19					CodeLen	.var *-XtPtr1
=$befd					Here1 = *	; remember here
>bee8	13					.byte CodeLen	;patch wh_CodeLength
.befd					TwoValue_Runtime:
.befd	68		pla				pla			; pop RTS addr
.befe	85 14		sta $14				sta tmp1+0
.bf00	68		pla				pla
.bf01	85 15		sta $15				sta tmp1+1
.bf03	a0 01		ldy #$01			ldy #1			; start at offset 1 (for RTS addr behavior)
.bf05	4c ab c5	jmp $c5ab			jmp Two_Fetch_Tmp1Y	; fetch the data, return
>bf08	54 6f				Name0:	.text "To"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=48778					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bf0a	e2					.byte (("To"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= NN+IM	; modifiable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>bf0b	18					.byte WordFlags	;wh_Flags
>bf0c	03					.byte 3	;wh_CodeLength
>bf0d	24					  .byte LinkDisplacement	; offset to previous nt
=$bf0e					XtPtr1 ::= *
=48778					WordListLink ::= Nt0 ; remember the nt of this word for later
.bf0e					To:
.bf0e	20 30 bc	jsr $bc30			jsr Tick		; We always need the xt of the target word
.bf11	b5 24		lda $24,x			lda DStack+0,x		; tmp1= xt
.bf13	b4 25		ldy $25,x			ldy DStack+1,x
.bf15	85 14		sta $14				sta tmp1+0
.bf17	84 15		sty $15				sty tmp1+1
.bf19	a0 00		ldy #$00			ldy #0			; determine what type xt points at
.bf1b	b1 14		lda ($14),y			lda (tmp1),y
.bf1d	c9 a0		cmp #$a0			cmp #$a0		;   LDY #
.bf1f	d0 38		bne $bf59			bne _Test2
.bf21	a5 0a		lda $0a				lda state		; check compile state
.bf23	f0 20		beq $bf45			beq _Value_interpret
.bf25	a9 ef		lda #$ef			lda #<PopYA		; compile jsr PopYA
.bf27	a0 b3		ldy #$b3			ldy #>PopYA
.bf29	20 1c cd	jsr $cd1c			jsr Jsr_Comma_YA
.bf2c	a9 8c		lda #$8c			lda #$8C		; compile STY xt+1
.bf2e	20 e2 cc	jsr $cce2			jsr C_Comma_A
.bf31	20 55 ca	jsr $ca55			jsr One_plus
.bf34	20 51 cf	jsr $cf51			jsr Dup
.bf37	20 f6 cc	jsr $ccf6			jsr Comma
.bf3a	a9 8d		lda #$8d			lda #$8D		; compile STA xt+3
.bf3c	20 e2 cc	jsr $cce2			jsr C_Comma_A
.bf3f	20 02 ca	jsr $ca02			jsr Cell_Plus
.bf42	4c f6 cc	jmp $ccf6			jmp Comma
.bf45					_Value_interpret:
.bf45	20 2c b4	jsr $b42c			jsr underflow_2		; ( n xt )
.bf48	e8		inx				inx			; Drop xt
.bf49	e8		inx				inx
.bf4a	b5 24		lda $24,x			lda DStack+0,x		; LSB
.bf4c	a0 03		ldy #$03			ldy #3			;   modify LDA # data
.bf4e	91 14		sta ($14),y			sta (tmp1),y
.bf50	b5 25		lda $25,x			lda DStack+1,x		; MSB
.bf52	a0 01		ldy #$01			ldy #1			;   modify LDY # data
.bf54	91 14		sta ($14),y			sta (tmp1),y
.bf56	e8		inx				inx			; Drop n
.bf57	e8		inx				inx
.bf58	60		rts				rts
.bf59	c9 20		cmp #$20	_Test2:		cmp #$20		;   JSR abs ?
.bf5b	d0 33		bne $bf90			bne _Err
.bf5d	a9 03		lda #$03			lda #3			; advance xt over the JSR abs to the data
.bf5f	20 07 ca	jsr $ca07			jsr Plus_A
.bf62	a0 01		ldy #$01			ldy #1			; get JSR abs addr lo byte
.bf64	b1 14		lda ($14),y			lda (tmp1),y
.bf66	c9 fd		cmp #$fd			cmp #<TwoValue_Runtime
.bf68	d0 11		bne $bf7b			bne _Test3
.bf6a	a5 0a		lda $0a				lda state		; check compile state
.bf6c	f0 0a		beq $bf78			beq _2Value_runtime
.bf6e	20 95 b7	jsr $b795			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bf71	a9 7e		lda #$7e			lda #<Two_Store_YA
.bf73	a0 c5		ldy #$c5			ldy #>Two_Store_YA
.bf75	4c 1c cd	jmp $cd1c			jmp Jsr_Comma_YA	; compile JSR Two_Store_YA; return
.bf78	4c 78 c5	jmp $c578	_2Value_runtime: jmp Two_Store
.bf7b					_Test3:
.bf7b	c9 59		cmp #$59			cmp #<FValue_runtime
.bf7d	d0 11		bne $bf90			bne _Err
.bf7f	a5 0a		lda $0a				lda state		; check compile state
.bf81	f0 0a		beq $bf8d			beq _FValue_interpret
.bf83	20 95 b7	jsr $b795			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bf86	a9 77		lda #$77			lda #<FStore_YA
.bf88	a0 86		ldy #$86			ldy #>FStore_YA
.bf8a	4c 1c cd	jmp $cd1c			jmp Jsr_Comma_YA	; compile JSR FStore_YA; return
.bf8d	4c 74 86	jmp $8674	_FValue_interpret: jmp FStore
.bf90	a9 e0		lda #$e0	_Err:		lda #$100+err_InvalidName ; unrecognized type.
.bf92	20 74 b4	jsr $b474			jsr ThrowA
=135					CodeLen	.var *-XtPtr1
=$bf95					Here1 = *	; remember here
>bf0c	87					.byte CodeLen	;patch wh_CodeLength
>bf95	44 4d 61 78			Name0:	.text "DMax"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=48921					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bf99	04					.byte (("DMax"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=143					LinkDisplacement = Nt0-WordListLink
>bf9a	10					.byte WordFlags	;wh_Flags
>bf9b	03					.byte 3	;wh_CodeLength
>bf9c	8f					  .byte LinkDisplacement	; offset to previous nt
=$bf9d					XtPtr1 ::= *
=48921					WordListLink ::= Nt0 ; remember the nt of this word for later
.bf9d	a9 80		lda #$80	DMax:		lda #$80
.bf9f	d0 0a		bne $bfab			bne DMin3
=4					CodeLen	.var *-XtPtr1
=$bfa1					Here1 = *	; remember here
>bf9b	04					.byte CodeLen	;patch wh_CodeLength
>bfa1	44 4d 69 6e			Name0:	.text "DMin"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=48933					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bfa5	c4					.byte (("DMin"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>bfa6	10					.byte WordFlags	;wh_Flags
>bfa7	03					.byte 3	;wh_CodeLength
>bfa8	0c					  .byte LinkDisplacement	; offset to previous nt
=$bfa9					XtPtr1 ::= *
=48933					WordListLink ::= Nt0 ; remember the nt of this word for later
.bfa9	a9 00		lda #$00	DMin:		lda #0
.bfab	85 16		sta $16		DMin3:		sta tmp2	; save sign correction
.bfad	20 36 b4	jsr $b436			jsr underflow_4
.bfb0	b5 26		lda $26,x			lda DStack+2,x	; compare
.bfb2	d5 2a		cmp $2a,x			cmp DStack+6,x
.bfb4	b5 27		lda $27,x			lda DStack+3,x
.bfb6	f5 2b		sbc $2b,x			sbc DStack+7,x
.bfb8	b5 24		lda $24,x			lda DStack+0,x
.bfba	f5 28		sbc $28,x			sbc DStack+4,x
.bfbc	b5 25		lda $25,x			lda DStack+1,x
.bfbe	f5 29		sbc $29,x			sbc DStack+5,x
.bfc0	50 02		bvc $bfc4			bvc +
.bfc2	49 80		eor #$80			eor #$80	; fix sign
.bfc4	45 16		eor $16		+		eor tmp2
.bfc6	30 0e		bmi $bfd6			bmi TwoNip_nouf	; if negative, NOS is larger and needs to be kept
.bfc8	4c 31 c5	jmp $c531			jmp Two_Drop
=34					CodeLen	.var *-XtPtr1
=$bfcb					Here1 = *	; remember here
>bfa7	22					.byte CodeLen	;patch wh_CodeLength
>bfcb	32 4e 69 70			Name0:	.text "2Nip"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=48975					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bfcf	04					.byte (("2Nip"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>bfd0	50					.byte WordFlags	;wh_Flags
>bfd1	03					.byte 3	;wh_CodeLength
>bfd2	2a					  .byte LinkDisplacement	; offset to previous nt
=$bfd3					XtPtr1 ::= *
=48975					WordListLink ::= Nt0 ; remember the nt of this word for later
.bfd3	20 36 b4	jsr $b436	TwoNip:		jsr underflow_4
.bfd6	b5 24		lda $24,x	TwoNip_NoUf:	lda DStack+0,x	; copy dTOS to dNOS
.bfd8	95 28		sta $28,x			sta DStack+4,x
.bfda	b5 25		lda $25,x			lda DStack+1,x
.bfdc	95 29		sta $29,x			sta DStack+5,x
.bfde	b5 26		lda $26,x			lda DStack+2,x
.bfe0	95 2a		sta $2a,x			sta DStack+6,x
.bfe2	b5 27		lda $27,x			lda DStack+3,x
.bfe4	95 2b		sta $2b,x			sta DStack+7,x
.bfe6	4c 31 c5	jmp $c531			jmp Two_Drop
=22					CodeLen	.var *-XtPtr1
=$bfe9					Here1 = *	; remember here
>bfd1	16					.byte CodeLen	;patch wh_CodeLength
>bfe9	53 3e 44			Name0:	.text "S>D"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=49004					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bfec	83					.byte (("S>D"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>bfed	40					.byte WordFlags	;wh_Flags
>bfee	03					.byte 3	;wh_CodeLength
>bfef	1d					  .byte LinkDisplacement	; offset to previous nt
=$bff0					XtPtr1 ::= *
=49004					WordListLink ::= Nt0 ; remember the nt of this word for later
.bff0					S_To_D:
.bff0	20 18 b4	jsr $b418			jsr underflow_1
.bff3	a0 00		ldy #$00			ldy #0			; assume positive
.bff5	b5 25		lda $25,x			lda DStack+1,x		; test n
.bff7	10 01		bpl $bffa			bpl +
.bff9	88		dey				dey			; make negative
.bffa					+
.bffa	ca		dex				dex			; push new hi cell
.bffb	ca		dex				dex
.bffc	94 24		sty $24,x			sty DStack+0,x
.bffe	94 25		sty $25,x			sty DStack+1,x
=16					CodeLen	.var *-XtPtr1
=$c000					Here1 = *	; remember here
>bfee	10					.byte CodeLen	;patch wh_CodeLength
.c000	60		rts				rts
>c001	44 3e 53			Name0:	.text "D>S"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=49028					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c004	63					.byte (("D>S"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>c005	40					.byte WordFlags	;wh_Flags
>c006	03					.byte 3	;wh_CodeLength
>c007	18					  .byte LinkDisplacement	; offset to previous nt
=$c008					XtPtr1 ::= *
=49028					WordListLink ::= Nt0 ; remember the nt of this word for later
.c008					D_To_S:
.c008	20 2c b4	jsr $b42c			jsr underflow_2
.c00b	e8		inx				inx		; Drop hi cell
.c00c	e8		inx				inx
=5					CodeLen	.var *-XtPtr1
=$c00d					Here1 = *	; remember here
>c006	05					.byte CodeLen	;patch wh_CodeLength
.c00d	60		rts				rts
>c00e	44 2d				Name0:	.text "D-"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=49040					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c010	a2					.byte (("D-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c011	40					.byte WordFlags	;wh_Flags
>c012	03					.byte 3	;wh_CodeLength
>c013	0c					  .byte LinkDisplacement	; offset to previous nt
=$c014					XtPtr1 ::= *
=49040					WordListLink ::= Nt0 ; remember the nt of this word for later
.c014					D_Minus:
.c014	20 36 b4	jsr $b436			jsr underflow_4 ; two double numbers
.c017	38		sec				sec
.c018	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of lower word
.c01a	f5 26		sbc $26,x			sbc DStack+2,x
.c01c	95 2a		sta $2a,x			sta DStack+6,x
.c01e	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of lower word
.c020	f5 27		sbc $27,x			sbc DStack+3,x
.c022	95 2b		sta $2b,x			sta DStack+7,x
.c024	b5 28		lda $28,x			lda DStack+4,x	; LSB of upper word
.c026	f5 24		sbc $24,x			sbc DStack+0,x
.c028	95 28		sta $28,x			sta DStack+4,x
.c02a	b5 29		lda $29,x			lda DStack+5,x	; MSB of upper word
.c02c	f5 25		sbc $25,x			sbc DStack+1,x
.c02e	95 29		sta $29,x			sta DStack+5,x
.c030	e8		inx				inx
.c031	e8		inx				inx
.c032	e8		inx				inx
.c033	e8		inx				inx
=32					CodeLen	.var *-XtPtr1
=$c034					Here1 = *	; remember here
>c012	20					.byte CodeLen	;patch wh_CodeLength
.c034	60		rts				rts
>c035	44 2b				Name0:	.text "D+"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=49079					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c037	62					.byte (("D+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c038	40					.byte WordFlags	;wh_Flags
>c039	03					.byte 3	;wh_CodeLength
>c03a	27					  .byte LinkDisplacement	; offset to previous nt
=$c03b					XtPtr1 ::= *
=49079					WordListLink ::= Nt0 ; remember the nt of this word for later
.c03b					D_Plus:
.c03b	20 36 b4	jsr $b436			jsr underflow_4 ; two double numbers
.c03e	18		clc				clc
.c03f	b5 26		lda $26,x			lda DStack+2,x	; LSB of lower word
.c041	75 2a		adc $2a,x			adc DStack+6,x
.c043	95 2a		sta $2a,x			sta DStack+6,x
.c045	b5 27		lda $27,x			lda DStack+3,x	; MSB of lower word
.c047	75 2b		adc $2b,x			adc DStack+7,x
.c049	95 2b		sta $2b,x			sta DStack+7,x
.c04b	b5 24		lda $24,x			lda DStack+0,x	; LSB of upper word
.c04d	75 28		adc $28,x			adc DStack+4,x
.c04f	95 28		sta $28,x			sta DStack+4,x
.c051	b5 25		lda $25,x			lda DStack+1,x	; MSB of upper word
.c053	75 29		adc $29,x			adc DStack+5,x
.c055	95 29		sta $29,x			sta DStack+5,x
.c057	e8		inx				inx
.c058	e8		inx				inx
.c059	e8		inx				inx
.c05a	e8		inx				inx
=32					CodeLen	.var *-XtPtr1
=$c05b					Here1 = *	; remember here
>c039	20					.byte CodeLen	;patch wh_CodeLength
.c05b	60		rts				rts
>c05c	44 31 2b			Name0:	.text "D1+"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=49119					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c05f	63					.byte (("D1+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=40					LinkDisplacement = Nt0-WordListLink
>c060	40					.byte WordFlags	;wh_Flags
>c061	03					.byte 3	;wh_CodeLength
>c062	28					  .byte LinkDisplacement	; offset to previous nt
=$c063					XtPtr1 ::= *
=49119					WordListLink ::= Nt0 ; remember the nt of this word for later
.c063	20 2c b4	jsr $b42c	D1Plus:		jsr underflow_2
.c066	f6 26		inc $26,x			inc DStack+2,x
.c068	d0 0a		bne $c074			bne +
.c06a	f6 27		inc $27,x			inc DStack+3,x
.c06c	d0 06		bne $c074			bne +
.c06e	f6 24		inc $24,x			inc DStack+0,x
.c070	d0 02		bne $c074			bne +
.c072	f6 25		inc $25,x			inc DStack+1,x
.c074					+
=17					CodeLen	.var *-XtPtr1
=$c074					Here1 = *	; remember here
>c061	11					.byte CodeLen	;patch wh_CodeLength
.c074	60		rts				rts
>c075	44 31 2d			Name0:	.text "D1-"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=49144					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c078	a3					.byte (("D1-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>c079	40					.byte WordFlags	;wh_Flags
>c07a	03					.byte 3	;wh_CodeLength
>c07b	19					  .byte LinkDisplacement	; offset to previous nt
=$c07c					XtPtr1 ::= *
=49144					WordListLink ::= Nt0 ; remember the nt of this word for later
.c07c	20 2c b4	jsr $b42c	D1Minus:	jsr underflow_2
.c07f	b5 26		lda $26,x			lda DStack+2,x
.c081	d0 0e		bne $c091			bne _1
.c083	b5 27		lda $27,x			lda DStack+3,x
.c085	d0 08		bne $c08f			bne _2
.c087	b5 24		lda $24,x			lda DStack+0,x
.c089	d0 02		bne $c08d			bne _3
.c08b	d6 25		dec $25,x			dec DStack+1,x
.c08d	d6 24		dec $24,x	_3:		dec DStack+0,x
.c08f	d6 27		dec $27,x	_2:		dec DStack+3,x
.c091	d6 26		dec $26,x	_1:		dec DStack+2,x
=23					CodeLen	.var *-XtPtr1
=$c093					Here1 = *	; remember here
>c07a	17					.byte CodeLen	;patch wh_CodeLength
.c093	60		rts				rts
>c094	41 6c 6c 6f 74			Name0:	.text "Allot"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=49177					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c099	85					.byte (("Allot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c09a	50					.byte WordFlags	;wh_Flags
>c09b	03					.byte 3	;wh_CodeLength
>c09c	21					  .byte LinkDisplacement	; offset to previous nt
=$c09d					XtPtr1 ::= *
=49177					WordListLink ::= Nt0 ; remember the nt of this word for later
.c09d					Allot:
.c09d	20 18 b4	jsr $b418			jsr underflow_1
.c0a0	18		clc				clc			; adjust cp
.c0a1	b5 24		lda $24,x			lda DStack+0,x
.c0a3	65 00		adc $00				adc cp+0
.c0a5	85 00		sta $00				sta cp+0
.c0a7	a8		tay				tay			;   save lo byte
.c0a8	b5 25		lda $25,x			lda DStack+1,x
.c0aa	85 14		sta $14				sta tmp1
.c0ac	65 01		adc $01				adc cp+1
.c0ae	85 01		sta $01				sta cp+1
.c0b0	24 14		bit $14				bit tmp1
.c0b2	30 15		bmi $c0c9			bmi _release
.c0b4	b0 06		bcs $c0bc			bcs _pos_err		; carry from the add is bad
=32600					_last = cp_end-2*PadOffset
.c0b6	c0 58		cpy #$58			cpy #<_last		; cp < cp_end ?
.c0b8	e9 7f		sbc #$7f			sbc #>_last
.c0ba	90 2c		bcc $c0e8			bcc _done		; we're fine.
.c0bc					_pos_err:
.c0bc	a9 58		lda #$58			lda #<_last
.c0be	85 00		sta $00				sta cp+0
.c0c0	a9 7f		lda #$7f			lda #>_last
.c0c2	85 01		sta $01				sta cp+1
.c0c4	a9 c5		lda #$c5			lda #$100+err_Allocate
.c0c6	4c 74 b4	jmp $b474			jmp ThrowA
.c0c9					_release:
.c0c9	90 06		bcc $c0d1			bcc _neg_err		; borrow indicates we've gone below 0
.c0cb	c0 66		cpy #$66			cpy #<cp0
.c0cd	e9 0b		sbc #$0b			sbc #>cp0
.c0cf	b0 17		bcs $c0e8			bcs _done
.c0d1					_neg_err:
.c0d1	a9 66		lda #$66			lda #<cp0		; Set CP to CP0
.c0d3	85 00		sta $00				sta cp+0
.c0d5	a9 0b		lda #$0b			lda #>cp0
.c0d7	85 01		sta $01				sta cp+1
.c0d9	a9 06		lda #$06			lda #<forth_dictionary_start	; set WordLists[Forth] to the first
.c0db	8d 12 03	sta $0312			sta WordlistsV+0		; word in ROM
.c0de	a9 cf		lda #$cf			lda #>forth_dictionary_start
.c0e0	8d 13 03	sta $0313			sta WordlistsV+1
.c0e3	a9 c4		lda #$c4			lda #$100+err_Free		; abort with an error
.c0e5	4c 74 b4	jmp $b474			jmp ThrowA
.c0e8					_done:
.c0e8	e8		inx				inx			; Drop n
.c0e9	e8		inx				inx
=77					CodeLen	.var *-XtPtr1
=$c0ea					Here1 = *	; remember here
>c09b	4d					.byte CodeLen	;patch wh_CodeLength
.c0ea	60		rts				rts
>c0eb	48 65 61 64 65 72 2c		Name0:	.text "Header,"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=49266					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c0f2	87					.byte (("Header,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=89					LinkDisplacement = Nt0-WordListLink
>c0f3	10					.byte WordFlags	;wh_Flags
>c0f4	03					.byte 3	;wh_CodeLength
>c0f5	59					  .byte LinkDisplacement	; offset to previous nt
=$c0f6					XtPtr1 ::= *
=49266					WordListLink ::= Nt0 ; remember the nt of this word for later
.c0f6					Header_Comma:
.c0f6	20 04 c1	jsr $c104			jsr Header_Build
.c0f9					Header_Link:
.c0f9	a5 0e		lda $0e				lda WorkWord+0		; dp= WorkWord
.c0fb	85 10		sta $10				sta dp+0
.c0fd	a5 0f		lda $0f				lda WorkWord+1
.c0ff	85 11		sta $11				sta dp+1
.c101	4c 4e ba	jmp $ba4e			jmp dp_to_current	; Update the CURRENT wordlist with the new DP.
.c104					Header_Build:
.c104	20 9d ba	jsr $ba9d			jsr parse_name_check	; get name string, throw error if empty string
.c107	20 9f cc	jsr $cc9f			jsr Two_dup		; ( addr u addr u )
.c10a	20 5e a1	jsr $a15e			jsr Get_Current
.c10d	20 c8 a1	jsr $a1c8			jsr Search_WordList	; ( addr u xt f ) or ( addr u 0 )
.c110	e8		inx				inx			; pop flag.
.c111	e8		inx				inx
.c112	b5 22		lda $22,x			lda DStack-2,x		; not found?
.c114	f0 21		beq $c137			beq _new_name		; We haven't seen this one before.
.c116	e8		inx				inx			; Drop xt
.c117	e8		inx				inx
.c118	24 0c		bit $0c				bit status		; Check bit 7
.c11a	10 08		bpl $c124			bpl _redefined_name	; Bit 7 is zero, so print the message.
.c11c	a9 80		lda #$80			lda #$80		; Set bit 7 to indicate dup
.c11e	05 0c		ora $0c				ora status
.c120	85 0c		sta $0c				sta status
.c122	d0 19		bne $c13d			bne _process_name
.c124					_redefined_name:
.c124	a9 14		lda #$14			lda #<str_redefined
.c126	a0 da		ldy #$da			ldy #>str_redefined
.c128	20 ee cd	jsr $cdee			jsr Print_ASCIIZ_YA_no_lf
.c12b	20 9f cc	jsr $cc9f			jsr Two_dup		 ; ( addr u addr u )
.c12e	20 d3 cd	jsr $cdd3			jsr Type
.c131	20 c7 cd	jsr $cdc7			jsr Space
.c134	4c 3d c1	jmp $c13d			jmp _process_name
.c137					_new_name:
.c137	a9 7f		lda #$7f			lda #$7F		; Clear bit 0 of status to indicate new word.
.c139	25 0c		and $0c				and status
.c13b	85 0c		sta $0c				sta status
.c13d					_process_name:
.c13d	20 9f cc	jsr $cc9f			jsr Two_dup		; compile name string ending at wh_NameLastChar
.c140	20 23 ca	jsr $ca23			jsr Here
.c143	20 6e cf	jsr $cf6e			jsr Swap
.c146	20 dc ad	jsr $addc			jsr CMove
.c149	20 51 cf	jsr $cf51			jsr Dup			;   save length
.c14c	20 9d c0	jsr $c09d			jsr Allot
.c14f	38		sec				sec
.c150	a5 00		lda $00				lda cp+0		; WorkWord= nt
.c152	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.c154	85 0e		sta $0e				sta WorkWord+0
.c156	a5 01		lda $01				lda cp+1
.c158	e9 00		sbc #$00			sbc #0
.c15a	85 0f		sta $0f				sta WorkWord+1
.c15c	a0 7f		ldy #$7f			ldy #wh_NameLastChar
.c15e	b1 0e		lda ($0e),y			lda (WorkWord),y
.c160	0a		asl a				asl a
.c161	0a		asl a				asl a
.c162	0a		asl a				asl a
.c163	0a		asl a				asl a
.c164	0a		asl a				asl a
.c165	15 24		ora $24,x			ora DStack+0,x
.c167	95 24		sta $24,x			sta DStack+0,x
.c169	20 df cc	jsr $ccdf			jsr C_Comma		; compile wh_HashNameLen
.c16c	e8		inx				inx			; drop name string addr
.c16d	e8		inx				inx
.c16e	a9 10		lda #$10			lda #NN			; compile wh_Flags
.c170	20 e2 cc	jsr $cce2			jsr C_Comma_A
.c173	a9 03		lda #$03			lda #3			; compile wh_CodeLength (temporary value, see adjust_z)
.c175	20 e2 cc	jsr $cce2			jsr C_Comma_A
.c178	20 3e ba	jsr $ba3e			jsr current_to_dp	; Get the CURRENT dictionary pointer.
.c17b	38		sec				sec
.c17c	a5 0e		lda $0e				lda WorkWord+0
.c17e	e5 10		sbc $10				sbc dp+0
.c180	a8		tay				tay
.c181	a5 0f		lda $0f				lda WorkWord+1
.c183	e5 11		sbc $11				sbc dp+1
.c185	f0 0f		beq $c196			beq _LinkShort
.c187	a0 81		ldy #$81			ldy #wh_Flags		; set FP flag
.c189	b1 0e		lda ($0e),y			lda (WorkWord),y
.c18b	09 01		ora #$01			ora #FP
.c18d	91 0e		sta ($0e),y			sta (WorkWord),y
.c18f	a5 10		lda $10				lda dp+0		; compile wh_LinkNt ptr word
.c191	a4 11		ldy $11				ldy dp+1
.c193	4c f9 cc	jmp $ccf9			jmp Comma_YA
.c196	98		tya		_LinkShort:	tya			; compile wh_LinkNt offset byte
.c197	4c e2 cc	jmp $cce2			jmp C_Comma_A
=164					CodeLen	.var *-XtPtr1
=$c19a					Here1 = *	; remember here
>c0f4	a4					.byte CodeLen	;patch wh_CodeLength
>c19a	43 72 65 61 74 65		Name0:	.text "Create"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=49440					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c1a0	a6					.byte (("Create"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=174					LinkDisplacement = Nt0-WordListLink
>c1a1	10					.byte WordFlags	;wh_Flags
>c1a2	03					.byte 3	;wh_CodeLength
>c1a3	ae					  .byte LinkDisplacement	; offset to previous nt
=$c1a4					XtPtr1 ::= *
=49440					WordListLink ::= Nt0 ; remember the nt of this word for later
.c1a4					Create:
.c1a4	20 f6 c0	jsr $c0f6			jsr Header_Comma	; compile word header
.c1a7	a9 b1		lda #$b1			lda #<DoVar		; compile JSR DoVar
.c1a9	a0 c1		ldy #$c1			ldy #>DoVar
.c1ab	20 1c cd	jsr $cd1c			jsr Jsr_Comma_YA
.c1ae	4c ca bb	jmp $bbca			jmp adjust_z
=13					CodeLen	.var *-XtPtr1
=$c1b1					Here1 = *	; remember here
>c1a2	0d					.byte CodeLen	;patch wh_CodeLength
.c1b1					DoVar:
.c1b1	68		pla				pla		; Pull the return address off the machine's stack
.c1b2	18		clc				clc		;   +1 because of the way the JSR works
.c1b3	69 01		adc #$01			adc #1
.c1b5	ca		dex				dex		; push on data stack
.c1b6	ca		dex				dex
.c1b7	95 24		sta $24,x			sta DStack+0,x
.c1b9	68		pla				pla
.c1ba	69 00		adc #$00			adc #0
.c1bc	95 25		sta $25,x			sta DStack+1,x
.c1be	60		rts				rts		; takes us to the original caller of the
>c1bf	44 6f 65 73 3e			Name0:	.text "Does>"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=49476					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c1c4	c5					.byte (("Does>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>c1c5	1c					.byte WordFlags	;wh_Flags
>c1c6	03					.byte 3	;wh_CodeLength
>c1c7	24					  .byte LinkDisplacement	; offset to previous nt
=$c1c8					XtPtr1 ::= *
=49476					WordListLink ::= Nt0 ; remember the nt of this word for later
.c1c8					Does:
.c1c8	a0 c1		ldy #$c1			ldy #>_runtime		; compile JSR _runtime
.c1ca	a9 e2		lda #$e2			lda #<_runtime
.c1cc	20 1c cd	jsr $cd1c			jsr Jsr_Comma_YA
.c1cf	a9 68		lda #$68			lda #$68		; compile PLA  to pop RTS addr (PFA-1) to AY
.c1d1	a0 a8		ldy #$a8			ldy #$a8		;    & TAY
.c1d3	20 f9 cc	jsr $ccf9			jsr Comma_YA
.c1d6	a9 68		lda #$68			lda #$68		; compile PLA
.c1d8	20 e2 cc	jsr $cce2			jsr C_Comma_A
.c1db	a0 c1		ldy #$c1			ldy #>_DoDoes		; compile JSR _DoDoes
.c1dd	a9 ff		lda #$ff			lda #<_DoDoes
.c1df	4c 1c cd	jmp $cd1c			jmp Jsr_Comma_YA
=26					CodeLen	.var *-XtPtr1
=$c1e2					Here1 = *	; remember here
>c1c6	1a					.byte CodeLen	;patch wh_CodeLength
.c1e2					_runtime:
.c1e2	20 3e ba	jsr $ba3e			jsr current_to_dp	; Grab the DP from the CURRENT wordlist.
.c1e5	a5 10		lda $10				lda dp+0		; tmp1= dp
.c1e7	a4 11		ldy $11				ldy dp+1
.c1e9	85 14		sta $14				sta tmp1+0
.c1eb	84 15		sty $15				sty tmp1+1
.c1ed	20 a5 bd	jsr $bda5			jsr NameToIntTmp	; tmp2= xt
.c1f0	18		clc				clc
.c1f1	68		pla				pla		; RTS addr LSB
.c1f2	69 01		adc #$01			adc #1		;   +1 for JSR bahavior
.c1f4	a0 01		ldy #$01			ldy #1
.c1f6	91 16		sta ($16),y			sta (tmp2),y
.c1f8	68		pla				pla		; RTS addr MSB
.c1f9	69 00		adc #$00			adc #0
.c1fb	c8		iny				iny
.c1fc	91 16		sta ($16),y			sta (tmp2),y
.c1fe	60		rts				rts
.c1ff					_DoDoes:
.c1ff	c8		iny				iny		; +1 for JSR behavior
.c200	d0 03		bne $c205			bne +
.c202	18		clc				clc
.c203	69 01		adc #$01			adc #1
.c205					+
.c205	4c 5f cf	jmp $cf5f			jmp PushAY
>c208	55 6e 75 73 65 64		Name0:	.text "Unused"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=49550					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c20e	86					.byte (("Unused"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=74					LinkDisplacement = Nt0-WordListLink
>c20f	00					.byte WordFlags	;wh_Flags
>c210	03					.byte 3	;wh_CodeLength
>c211	4a					  .byte LinkDisplacement	; offset to previous nt
=$c212					XtPtr1 ::= *
=49550					WordListLink ::= Nt0 ; remember the nt of this word for later
.c212					Unused:
=32600					_last = cp_end-2*padoffset
.c212	ca		dex				dex
.c213	ca		dex				dex
.c214	38		sec				sec
.c215	a9 58		lda #$58			lda #<_last
.c217	e5 00		sbc $00				sbc cp+0
.c219	95 24		sta $24,x			sta DStack+0,x
.c21b	a9 7f		lda #$7f			lda #>_last
.c21d	e5 01		sbc $01				sbc cp+1
.c21f	95 25		sta $25,x			sta DStack+1,x
=15					CodeLen	.var *-XtPtr1
=$c221					Here1 = *	; remember here
>c210	0f					.byte CodeLen	;patch wh_CodeLength
.c221	60		rts				rts
>c222	44 65 70 74 68			Name0:	.text "Depth"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=49575					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c227	05					.byte (("Depth"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>c228	10					.byte WordFlags	;wh_Flags
>c229	03					.byte 3	;wh_CodeLength
>c22a	19					  .byte LinkDisplacement	; offset to previous nt
=$c22b					XtPtr1 ::= *
=49575					WordListLink ::= Nt0 ; remember the nt of this word for later
.c22b					Depth:
.c22b	a9 28		lda #$28			lda #DStack0	; A= DStack0 - X
.c22d	86 1a		stx $1a				stx tmp4
.c22f	38		sec				sec
.c230	e5 1a		sbc $1a				sbc tmp4
.c232	4a		lsr a				lsr		; divide by two because each cell is two bytes
.c233	4c dd b7	jmp $b7dd			jmp PushZA
=11					CodeLen	.var *-XtPtr1
=$c236					Here1 = *	; remember here
>c229	0b					.byte CodeLen	;patch wh_CodeLength
>c236	4b 65 79			Name0:	.text "Key"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=49593					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c239	23					.byte (("Key"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>c23a	10					.byte WordFlags	;wh_Flags
>c23b	03					.byte 3	;wh_CodeLength
>c23c	12					  .byte LinkDisplacement	; offset to previous nt
=$c23d					XtPtr1 ::= *
=49593					WordListLink ::= Nt0 ; remember the nt of this word for later
.c23d	20 43 c2	jsr $c243	Key:		jsr key_a		; returns char in A
.c240	4c dd b7	jmp $b7dd			jmp PushZA
=6					CodeLen	.var *-XtPtr1
=$c243					Here1 = *	; remember here
>c23b	06					.byte CodeLen	;patch wh_CodeLength
.c243					Key_A:
.c243	6c 08 03	jmp ($0308)			jmp (input)		; JSR/RTS
>c246	4b 65 79 3f			Name0:	.text "Key?"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=49610					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c24a	e4					.byte (("Key?"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>c24b	10					.byte WordFlags	;wh_Flags
>c24c	03					.byte 3	;wh_CodeLength
>c24d	11					  .byte LinkDisplacement	; offset to previous nt
=$c24e					XtPtr1 ::= *
=49610					WordListLink ::= Nt0 ; remember the nt of this word for later
.c24e	20 54 c2	jsr $c254	KeyQ:		jsr KeyQ_A
.c251	4c dd b7	jmp $b7dd			jmp PushZA
.c254	6c 0a 03	jmp ($030a)	KeyQ_A:		jmp (HaveKey)
>c257	52 65 66 69 6c 6c		Name0:	.text "Refill"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=49629					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c25d	86					.byte (("Refill"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>c25e	10					.byte WordFlags	;wh_Flags
>c25f	03					.byte 3	;wh_CodeLength
>c260	13					  .byte LinkDisplacement	; offset to previous nt
=$c261					XtPtr1 ::= *
=49629					WordListLink ::= Nt0 ; remember the nt of this word for later
.c261					Refill:
.c261	a9 00		lda #$00			lda #0			; show empty in case of error
.c263	85 06		sta $06				sta ciblen+0
.c265	85 07		sta $07				sta ciblen+1
.c267	a5 02		lda $02				lda insrc		; cheat: We only check LSB
.c269	d0 24		bne $c28f			bne _src_not_kbd
.c26b	a5 04		lda $04				lda cib+0		; address of CIB is NOS
.c26d	a4 05		ldy $05				ldy cib+1
.c26f	20 ae b7	jsr $b7ae			jsr PushYA
.c272	a9 ff		lda #$ff			lda #bsize		; max number of chars is TOS
.c274	20 dd b7	jsr $b7dd			jsr PushZA		;  cheat: We only accept max 255
.c277	20 a5 c2	jsr $c2a5			jsr Accept		; ( addr n1 -- n2)
.c27a	b5 24		lda $24,x			lda DStack+0,x
.c27c	85 06		sta $06				sta ciblen+0
.c27e	b5 25		lda $25,x			lda DStack+1,x
.c280	85 07		sta $07				sta ciblen+1		; though we only accept 255 chars
.c282	a9 00		lda #$00			lda #0
.c284	85 08		sta $08				sta toin+0
.c286	85 09		sta $09				sta toin+1
.c288	a9 ff		lda #$ff			lda #$FF		; overwrite with TRUE flag
.c28a	95 24		sta $24,x			sta DStack+0,x
.c28c	95 25		sta $25,x			sta DStack+1,x
.c28e	60		rts				rts
.c28f					_src_not_kbd:
.c28f	c9 ff		cmp #$ff			cmp #$ff
.c291	d0 03		bne $c296			bne _src_not_string
.c293	4c cf b7	jmp $b7cf			jmp False
.c296					_src_not_string:
.c296	a9 eb		lda #$eb			lda #$100+err_Unsupported
.c298	20 74 b4	jsr $b474			jsr ThrowA
=58					CodeLen	.var *-XtPtr1
=$c29b					Here1 = *	; remember here
>c25f	3a					.byte CodeLen	;patch wh_CodeLength
>c29b	41 63 63 65 70 74		Name0:	.text "Accept"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=49697					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c2a1	86					.byte (("Accept"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=68					LinkDisplacement = Nt0-WordListLink
>c2a2	50					.byte WordFlags	;wh_Flags
>c2a3	03					.byte 3	;wh_CodeLength
>c2a4	44					  .byte LinkDisplacement	; offset to previous nt
=$c2a5					XtPtr1 ::= *
=49697					WordListLink ::= Nt0 ; remember the nt of this word for later
.c2a5					Accept:
.c2a5	20 2c b4	jsr $b42c			jsr underflow_2
.c2a8	b5 24		lda $24,x			lda DStack+0,x		; Abort if we were asked to receive 0 chars
.c2aa	15 25		ora $25,x			ora DStack+1,x
.c2ac	d0 09		bne $c2b7			bne _not_zero
.c2ae	e8		inx				inx			; drop n
.c2af	e8		inx				inx
.c2b0	95 24		sta $24,x			sta DStack+0,x		; replace addr with 0
.c2b2	95 25		sta $25,x			sta DStack+1,x
.c2b4	4c 8c c3	jmp $c38c			jmp accept_done
.c2b7					_not_zero:
.c2b7	b5 24		lda $24,x			lda DStack+0,x	; number of chars to get in tmp2 ...
.c2b9	85 16		sta $16				sta tmp2
.c2bb	a9 00		lda #$00			lda #0
.c2bd	85 17		sta $17				sta tmp2+1	; ... but we only accept max 255 chars
.c2bf	b5 26		lda $26,x			lda DStack+2,x	; address of buffer is NOS, to tmp1
.c2c1	85 14		sta $14				sta tmp1
.c2c3	b5 27		lda $27,x			lda DStack+3,x
.c2c5	85 15		sta $15				sta tmp1+1
.c2c7	e8		inx				inx
.c2c8	e8		inx				inx
.c2c9	a0 00		ldy #$00			ldy #0
.c2cb	a5 0c		lda $0c				lda status
.c2cd	29 f7		and #$f7			and #$f7
.c2cf	18		clc				clc
.c2d0	69 01		adc #$01			adc #1
.c2d2	09 08		ora #$08			ora #$08
.c2d4	85 0c		sta $0c				sta status
.c2d6					accept_loop:
.c2d6	20 43 c2	jsr $c243			jsr key_a
.c2d9	c9 0a		cmp #$0a			cmp #AscLF
.c2db	f0 20		beq $c2fd			beq _eol
.c2dd	c9 0d		cmp #$0d			cmp #AscCR
.c2df	f0 1c		beq $c2fd			beq _eol
.c2e1	c9 08		cmp #$08			cmp #AscBS
.c2e3	f0 24		beq $c309			beq _backspace
.c2e5	c9 7f		cmp #$7f			cmp #AscDEL	; (CTRL-h)
.c2e7	f0 20		beq $c309			beq _backspace
.c2e9	c9 10		cmp #$10			cmp #AscCP
.c2eb	f0 37		beq $c324			beq _ctrl_p
.c2ed	c9 0e		cmp #$0e			cmp #AscCN
.c2ef	f0 46		beq $c337			beq _ctrl_n
.c2f1	91 14		sta ($14),y			sta (tmp1),y
.c2f3	c8		iny				iny
.c2f4	20 bb cd	jsr $cdbb			jsr Emit_A
.c2f7	c4 16		cpy $16				cpy tmp2	; reached character limit?
.c2f9	d0 db		bne $c2d6			bne accept_loop	      ; fall through if buffer limit reached
.c2fb	f0 03		beq $c300			beq _buffer_full
.c2fd					_eol:
.c2fd	20 c7 cd	jsr $cdc7			jsr Space	; print final space
.c300					_buffer_full:
.c300	94 24		sty $24,x			sty DStack+0,x	; Y contains number of chars accepted already
.c302	a9 00		lda #$00			lda #0
.c304	95 25		sta $25,x			sta DStack+1,x		; we only accept 256 chars
.c306	4c 8c c3	jmp $c38c			jmp accept_done
.c309					_backspace:
.c309	c0 00		cpy #$00			cpy #0		; buffer empty?
.c30b	d0 06		bne $c313			bne +
.c30d	a9 07		lda #$07			lda #AscBELL	; complain and don't delete beyond the start of line
.c30f	20 bb cd	jsr $cdbb			jsr Emit_A
.c312	c8		iny				iny
.c313					+
.c313	88		dey				dey
.c314	a9 08		lda #$08			lda #AscBS	; move back one
.c316	20 bb cd	jsr $cdbb			jsr Emit_A
.c319	20 c7 cd	jsr $cdc7			jsr Space	; print a space (rubout)
.c31c	a9 08		lda #$08			lda #AscBS	; move back over space
.c31e	20 bb cd	jsr $cdbb			jsr Emit_A
.c321	4c d6 c2	jmp $c2d6			jmp accept_loop
.c324					_ctrl_p:
.c324	a5 0c		lda $0c				lda status
.c326	29 07		and #$07			and #7
.c328	d0 08		bne $c332			bne _ctrl_p_dec
.c32a	a5 0c		lda $0c				lda status
.c32c	09 07		ora #$07			ora #7
.c32e	85 0c		sta $0c				sta status
.c330	d0 14		bne $c346			bne _recall_history
.c332					_ctrl_p_dec:
.c332	c6 0c		dec $0c				dec status
.c334	4c 46 c3	jmp $c346			jmp _recall_history
.c337					_ctrl_n:
.c337	a9 08		lda #$08			lda #$8
.c339	24 0c		bit $0c				bit status
.c33b	d0 09		bne $c346			bne _recall_history
.c33d	a5 0c		lda $0c				lda status
.c33f	29 f7		and #$f7			and #$f7
.c341	18		clc				clc
.c342	69 01		adc #$01			adc #1
.c344	85 0c		sta $0c				sta status
.c346					_recall_history:
.c346	a9 f7		lda #$f7			lda #$ff-%00001000
.c348	25 0c		and $0c				and status
.c34a	85 0c		sta $0c				sta status
.c34c	20 a7 c3	jsr $c3a7			jsr accept_total_recall
.c34f	a9 0d		lda #$0d			lda #AscCR
.c351	20 bb cd	jsr $cdbb			jsr Emit_A
.c354					input_clear:
.c354	c0 00		cpy #$00			cpy #0
.c356	f0 07		beq $c35f			beq input_cleared
.c358	20 c7 cd	jsr $cdc7			jsr Space
.c35b	88		dey				dey
.c35c	4c 54 c3	jmp $c354			jmp input_clear
.c35f					input_cleared:
.c35f	a9 0d		lda #$0d			lda #AscCR
.c361	20 bb cd	jsr $cdbb			jsr Emit_A
.c364	b1 18		lda ($18),y			lda (tmp3),y
.c366	85 0d		sta $0d				sta status+1
.c368	e6 18		inc $18				inc tmp3
.c36a	d0 02		bne $c36e			bne +		; Increment the upper byte on carry.
.c36c	e6 19		inc $19				inc tmp3+1
.c36e					+
.c36e	a9 0d		lda #$0d			lda #AscCR
.c370	20 bb cd	jsr $cdbb			jsr Emit_A
.c373					_history_loop:
.c373	c4 0d		cpy $0d				cpy status+1
.c375	d0 03		bne $c37a			bne +
.c377	4c d6 c2	jmp $c2d6			jmp accept_loop	      ; Needs a long jump
.c37a					+
.c37a	c4 16		cpy $16				cpy tmp2
.c37c	f0 0a		beq $c388			beq _hist_filled_buffer
.c37e	b1 18		lda ($18),y			lda (tmp3),y
.c380	91 14		sta ($14),y			sta (tmp1),y
.c382	20 bb cd	jsr $cdbb			jsr Emit_A
.c385	c8		iny				iny
.c386	d0 eb		bne $c373			bne _history_loop
.c388					_hist_filled_buffer:
.c388	88		dey				dey
.c389	4c d6 c2	jmp $c2d6			jmp accept_loop
.c38c					accept_done:
.c38c	20 a7 c3	jsr $c3a7			jsr accept_total_recall
.c38f	85 0d		sta $0d				sta status+1
.c391	a0 00		ldy #$00			ldy #0
.c393	91 18		sta ($18),y			sta (tmp3),y
.c395	e6 18		inc $18				inc tmp3
.c397	d0 02		bne $c39b			bne +		; Increment the upper byte on carry.
.c399	e6 19		inc $19				inc tmp3+1
.c39b					+
.c39b					_save_history_loop:
.c39b	c4 0d		cpy $0d				cpy status+1
.c39d	f0 07		beq $c3a6			beq _save_history_done
.c39f	b1 14		lda ($14),y			lda (tmp1),y
.c3a1	91 18		sta ($18),y			sta (tmp3),y
.c3a3	c8		iny				iny
.c3a4	d0 f5		bne $c39b			bne _save_history_loop
.c3a6					_save_history_done:
=257					CodeLen	.var *-XtPtr1
=$ff					CodeLen	 .var $ff
=$c3a6					Here1 = *	; remember here
>c2a3	ff					.byte CodeLen	;patch wh_CodeLength
.c3a6	60		rts				rts
.c3a7					accept_total_recall:
.c3a7	a9 66		lda #$66			lda #<hist_buff
.c3a9	85 18		sta $18				sta tmp3
.c3ab	a9 07		lda #$07			lda #>hist_buff
.c3ad	85 19		sta $19				sta tmp3+1
.c3af	a5 0c		lda $0c				lda status
.c3b1	6a		ror a				ror
.c3b2	29 03		and #$03			and #3
.c3b4	18		clc				clc
.c3b5	65 19		adc $19				adc tmp3+1
.c3b7	85 19		sta $19				sta tmp3+1
.c3b9	a5 0c		lda $0c				lda status
.c3bb	6a		ror a				ror		; Rotate through carry into msb.
.c3bc	6a		ror a				ror
.c3bd	29 80		and #$80			and #$80
.c3bf	18		clc				clc
.c3c0	65 18		adc $18				adc tmp3
.c3c2	85 18		sta $18				sta tmp3
.c3c4	90 02		bcc $c3c8			bcc +		; Increment the upper byte on carry.
.c3c6	e6 19		inc $19				inc tmp3+1
.c3c8					+
.c3c8	98		tya				tya
.c3c9	c9 80		cmp #$80			cmp #$80
.c3cb	90 02		bcc $c3cf			bcc +
.c3cd	a9 7f		lda #$7f			lda #$7F
.c3cf					+
.c3cf	60		rts				rts
>c3d0	49 6e 70 75 74 3e 52		Name0:	.text "Input>R"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=50007					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c3d7	47					.byte (("Input>R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$30					WordFlags ::= NN|ST	; modifiable copy, remember for later
=310					LinkDisplacement = Nt0-WordListLink
=$31						  WordFlags ::= WordFlags | FP
>c3d8	31					.byte WordFlags	;wh_Flags
>c3d9	03					.byte 3	;wh_CodeLength
>c3da	21 c2					  .word WordListLink
=$c3dc					XtPtr1 ::= *
=50007					WordListLink ::= Nt0 ; remember the nt of this word for later
.c3dc					Input_To_R:
.c3dc	68		pla				pla			; move it out of the way
.c3dd	85 14		sta $14				sta tmp1+0
.c3df	68		pla				pla
.c3e0	85 15		sta $15				sta tmp1+1
.c3e2	a0 07		ldy #$07			ldy #7
.c3e4	b9 02 00	lda $0002,y	_loop:		lda InSrc,y	; insrc+7 is toin+1
.c3e7	48		pha				pha
.c3e8	88		dey				dey
.c3e9	10 f9		bpl $c3e4			bpl _loop
.c3eb	a5 15		lda $15				lda tmp1+1		; Restore address for return jump
.c3ed	48		pha				pha
.c3ee	a5 14		lda $14				lda tmp1+0
.c3f0	48		pha				pha
=21					CodeLen	.var *-XtPtr1
=$c3f1					Here1 = *	; remember here
>c3d9	15					.byte CodeLen	;patch wh_CodeLength
.c3f1	60		rts				rts
>c3f2	52 3e 49 6e 70 75 74		Name0:	.text "R>Input"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=50041					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c3f9	87					.byte (("R>Input"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$30					WordFlags ::= ST	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>c3fa	30					.byte WordFlags	;wh_Flags
>c3fb	03					.byte 3	;wh_CodeLength
>c3fc	22					  .byte LinkDisplacement	; offset to previous nt
=$c3fd					XtPtr1 ::= *
=50041					WordListLink ::= Nt0 ; remember the nt of this word for later
.c3fd					R_To_Input:
.c3fd	68		pla				pla		 ; move RTS addr out of the way
.c3fe	85 14		sta $14				sta tmp1+0
.c400	68		pla				pla
.c401	85 15		sta $15				sta tmp1+1
.c403	a0 00		ldy #$00			ldy #0
.c405	68		pla		_loop:		pla
.c406	99 02 00	sta $0002,y			sta InSrc,y ; also cib ciblen toin
.c409	c8		iny				iny
.c40a	c0 08		cpy #$08			cpy #8
.c40c	d0 f7		bne $c405			bne _loop
.c40e	a5 15		lda $15				lda tmp1+1	; Restore RTS address
.c410	48		pha				pha
.c411	a5 14		lda $14				lda tmp1+0
.c413	48		pha				pha
=23					CodeLen	.var *-XtPtr1
=$c414					Here1 = *	; remember here
>c3fb	17					.byte CodeLen	;patch wh_CodeLength
.c414	60		rts				rts
>c415	49 4b 65 79			Name0:	.text "IKey"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=50073					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c419	24					.byte (("IKey"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>c41a	10					.byte WordFlags	;wh_Flags
>c41b	03					.byte 3	;wh_CodeLength
>c41c	20					  .byte LinkDisplacement	; offset to previous nt
=$c41d					XtPtr1 ::= *
=50073					WordListLink ::= Nt0 ; remember the nt of this word for later
.c41d					IKey:
.c41d	20 eb b7	jsr $b7eb	_again:		jsr Zero
.c420	20 eb b7	jsr $b7eb			jsr Zero	; ( ud )
.c423	20 23 ca	jsr $ca23			jsr Here
.c426	20 51 cf	jsr $cf51			jsr Dup		; get text
.c429	a9 10		lda #$10			lda #16
.c42b	20 dd b7	jsr $b7dd			jsr PushZA
.c42e	20 a5 c2	jsr $c2a5			jsr Accept	; ( ud addr len )
.c431	a1 26		lda ($26,x)			lda (DStack+2,x) ; negative?
.c433	c9 2d		cmp #$2d			cmp #'-'
.c435	08		php				php		;  save sign
.c436	d0 06		bne $c43e			bne +
.c438	20 5f ca	jsr $ca5f			jsr NOS_One_Plus ;   eat the '-'
.c43b	20 30 ca	jsr $ca30			jsr One_Minus
.c43e					+
.c43e	20 48 b0	jsr $b048			jsr To_Number ; ( ud addr u -- ud addr u )  Continue convert a string to an integer
.c441	e8		inx				inx		; Drop len
.c442	e8		inx				inx
.c443	e8		inx				inx		; Drop addr
.c444	e8		inx				inx
.c445	e8		inx				inx		; UD>S
.c446	e8		inx				inx
.c447	b5 1e		lda $1e,x			lda DStack-6,x	; string all consumed?
.c449	f0 11		beq $c45c			beq _ok
.c44b	e8		inx		_err:		inx		; Drop u
.c44c	e8		inx				inx
.c44d	28		plp				plp		; RDrop saved sign
.c44e	20 c7 cd	jsr $cdc7			jsr Space	; prompt again
.c451	a9 3f		lda #$3f			lda #'?'
.c453	20 bb cd	jsr $cdbb			jsr Emit_A
.c456	20 c7 cd	jsr $cdc7			jsr Space
.c459	4c 1d c4	jmp $c41d			jmp _again	; try it again
.c45c	28		plp		_ok:		plp		; apply sign
.c45d	d0 03		bne $c462			bne +
.c45f	20 a5 c6	jsr $c6a5			jsr Negate
.c462					+
.c462	60		rts				rts
=70					CodeLen	.var *-XtPtr1
=$c463					Here1 = *	; remember here
>c41b	46					.byte CodeLen	;patch wh_CodeLength
>c463	42 6f 75 6e 64 73		Name0:	.text "Bounds"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=50153					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c469	66					.byte (("Bounds"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>c46a	40					.byte WordFlags	;wh_Flags
>c46b	03					.byte 3	;wh_CodeLength
>c46c	50					  .byte LinkDisplacement	; offset to previous nt
=$c46d					XtPtr1 ::= *
=50153					WordListLink ::= Nt0 ; remember the nt of this word for later
.c46d					Bounds:
.c46d	20 2c b4	jsr $b42c			jsr underflow_2
.c470	18		clc				clc
.c471	b5 26		lda $26,x			lda DStack+2,x		; LSB addr
.c473	a8		tay				tay
.c474	75 24		adc $24,x			adc DStack+0,x		; LSB u
.c476	95 26		sta $26,x			sta DStack+2,x		; LSB addr+u
.c478	94 24		sty $24,x			sty DStack+0,x
.c47a	b5 27		lda $27,x			lda DStack+3,x		; MSB addr
.c47c	a8		tay				tay
.c47d	75 25		adc $25,x			adc DStack+1,x		; MSB u
.c47f	95 27		sta $27,x			sta DStack+3,x		; MSB addr+u
.c481	94 25		sty $25,x			sty DStack+1,x
=22					CodeLen	.var *-XtPtr1
=$c483					Here1 = *	; remember here
>c46b	16					.byte CodeLen	;patch wh_CodeLength
.c483	60		rts				rts
>c484	53 70 61 63 65 73		Name0:	.text "Spaces"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=50186					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c48a	66					.byte (("Spaces"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c48b	50					.byte WordFlags	;wh_Flags
>c48c	03					.byte 3	;wh_CodeLength
>c48d	21					  .byte LinkDisplacement	; offset to previous nt
=$c48e					XtPtr1 ::= *
=50186					WordListLink ::= Nt0 ; remember the nt of this word for later
.c48e					 Spaces:
.c48e	20 18 b4	jsr $b418			jsr underflow_1
.c491	4c 97 c4	jmp $c497			jmp _test
.c494					_loop:
.c494	20 c7 cd	jsr $cdc7			jsr Space		; print a space
.c497	d6 24		dec $24,x	_test:		dec DStack+0,x		; decrement & test
.c499	10 f9		bpl $c494			bpl _loop
.c49b	e8		inx				inx			; Drop
.c49c	e8		inx				inx
=15					CodeLen	.var *-XtPtr1
=$c49d					Here1 = *	; remember here
>c48c	0f					.byte CodeLen	;patch wh_CodeLength
.c49d	60		rts				rts
>c49e	2d 54 72 61 69 6c 69 6e		Name0:	.text "-Trailing"	;  name of word as a string, ending at wh_NameLastChar
>c4a6	67
=9					NameLength = *-Name0
=50215					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c4a7	e9					.byte (("-Trailing"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>c4a8	50					.byte WordFlags	;wh_Flags
>c4a9	03					.byte 3	;wh_CodeLength
>c4aa	1d					  .byte LinkDisplacement	; offset to previous nt
=$c4ab					XtPtr1 ::= *
=50215					WordListLink ::= Nt0 ; remember the nt of this word for later
.c4ab					Minus_trailing:
.c4ab	20 2c b4	jsr $b42c			jsr underflow_2
.c4ae	b5 26		lda $26,x			lda DStack+2,x		; tmp1= addr + (u1 & $ff00)
.c4b0	85 14		sta $14				sta tmp1+0
.c4b2	b5 27		lda $27,x			lda DStack+3,x
.c4b4	18		clc				clc
.c4b5	75 25		adc $25,x			adc DStack+1,x
.c4b7	85 15		sta $15				sta tmp1+1
.c4b9	b4 24		ldy $24,x			ldy DStack+0,x
.c4bb	88		dey		_loop:		dey			; back 1 char
.c4bc	c0 ff		cpy #$ff			cpy #$ff
.c4be	d0 06		bne $c4c6			bne +
.c4c0	c6 15		dec $15				dec tmp1+1		;   back 1 page
.c4c2	d6 25		dec $25,x			dec DStack+1,x
.c4c4	30 06		bmi $c4cc			bmi _done
.c4c6					+
.c4c6	b1 14		lda ($14),y			lda (tmp1),y		; if blank, keep going
.c4c8	c9 20		cmp #$20			cmp #AscSP
.c4ca	f0 ef		beq $c4bb			beq _loop
.c4cc	c8		iny		_done:		iny			; forward 1 char
.c4cd	d0 02		bne $c4d1			bne +
.c4cf	f6 25		inc $25,x			inc DStack+1,x
.c4d1	94 24		sty $24,x	+		sty DStack+0,x
=40					CodeLen	.var *-XtPtr1
=$c4d3					Here1 = *	; remember here
>c4a9	28					.byte CodeLen	;patch wh_CodeLength
.c4d3	60		rts				rts
>c4d4	2d 4c 65 61 64 69 6e 67		Name0:	.text "-Leading"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=50268					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c4dc	e8					.byte (("-Leading"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>c4dd	50					.byte WordFlags	;wh_Flags
>c4de	03					.byte 3	;wh_CodeLength
>c4df	35					  .byte LinkDisplacement	; offset to previous nt
=$c4e0					XtPtr1 ::= *
=50268					WordListLink ::= Nt0 ; remember the nt of this word for later
.c4e0					Minus_leading:
.c4e0	20 2c b4	jsr $b42c			jsr underflow_2
.c4e3					_loop:
.c4e3	b5 24		lda $24,x			lda DStack+0,x		; chars left?
.c4e5	15 25		ora $25,x			ora DStack+1,x
.c4e7	f0 0f		beq $c4f8			beq _done
.c4e9	a1 26		lda ($26,x)			lda (DStack+2,x)	; get first character
.c4eb	c9 21		cmp #$21			cmp #AscSP+1		;   is_whitespace
.c4ed	b0 09		bcs $c4f8			bcs _done
.c4ef	20 5f ca	jsr $ca5f			jsr NOS_One_Plus
.c4f2	20 33 ca	jsr $ca33			jsr One_Minus_NoUF
.c4f5	4c e3 c4	jmp $c4e3			jmp _loop
.c4f8					_done:
=24					CodeLen	.var *-XtPtr1
=$c4f8					Here1 = *	; remember here
>c4de	18					.byte CodeLen	;patch wh_CodeLength
.c4f8	60		rts				rts
>c4f9	2f 53 74 72 69 6e 67		Name0:	.text "/String"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=50304					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c500	e7					.byte (("/String"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>c501	50					.byte WordFlags	;wh_Flags
>c502	03					.byte 3	;wh_CodeLength
>c503	24					  .byte LinkDisplacement	; offset to previous nt
=$c504					XtPtr1 ::= *
=50304					WordListLink ::= Nt0 ; remember the nt of this word for later
.c504					Slash_String:
.c504	e0 23		cpx #$23		cpx #-2*3+DStack0+1	; far enough below end of data stack (& not negative)?
.c506	b0 1d		bcs $c525		bcs Throw_Stack_20
.c508	18		clc				clc		; addr += n
.c509	b5 24		lda $24,x			lda DStack+0,x
.c50b	75 28		adc $28,x			adc DStack+4,x
.c50d	95 28		sta $28,x			sta DStack+4,x
.c50f	b5 25		lda $25,x			lda DStack+1,x
.c511	75 29		adc $29,x			adc DStack+5,x
.c513	95 29		sta $29,x			sta DStack+5,x
.c515	38		sec				sec		; u -= n
.c516	b5 26		lda $26,x			lda DStack+2,x
.c518	f5 24		sbc $24,x			sbc DStack+0,x
.c51a	95 26		sta $26,x			sta DStack+2,x
.c51c	b5 27		lda $27,x			lda DStack+3,x
.c51e	f5 25		sbc $25,x			sbc DStack+1,x
.c520	95 27		sta $27,x			sta DStack+3,x
.c522	e8		inx				inx		; Drop n
.c523	e8		inx				inx
=32					CodeLen	.var *-XtPtr1
=$c524					Here1 = *	; remember here
>c502	20					.byte CodeLen	;patch wh_CodeLength
.c524	60		rts				rts
.c525	4c 3b b4	jmp $b43b	Throw_Stack_20: jmp Throw_Stack
>c528	32 44 72 6f 70			Name0:	.text "2Drop"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=50349					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c52d	05					.byte (("2Drop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>c52e	40					.byte WordFlags	;wh_Flags
>c52f	03					.byte 3	;wh_CodeLength
>c530	2d					  .byte LinkDisplacement	; offset to previous nt
=$c531					XtPtr1 ::= *
=50349					WordListLink ::= Nt0 ; remember the nt of this word for later
.c531					Two_drop:
.c531	20 2c b4	jsr $b42c			jsr underflow_2
.c534	e8		inx				inx
.c535	e8		inx				inx
.c536	e8		inx				inx
.c537	e8		inx				inx
=7					CodeLen	.var *-XtPtr1
=$c538					Here1 = *	; remember here
>c52f	07					.byte CodeLen	;patch wh_CodeLength
.c538	60		rts				rts
>c539	32 53 77 61 70			Name0:	.text "2Swap"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=50366					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c53e	05					.byte (("2Swap"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>c53f	10					.byte WordFlags	;wh_Flags
>c540	03					.byte 3	;wh_CodeLength
>c541	11					  .byte LinkDisplacement	; offset to previous nt
=$c542					XtPtr1 ::= *
=50366					WordListLink ::= Nt0 ; remember the nt of this word for later
.c542					Two_Swap:
.c542	e0 21		cpx #$21		cpx #-2*4+DStack0+1	; far enough below end of data stack (& not negative)?
.c544	b0 df		bcs $c525		bcs Throw_Stack_20
.c546	86 14		stx $14				stx tmp1
.c548	ca		dex				dex
.c549	ca		dex				dex
.c54a	ca		dex				dex
.c54b	ca		dex				dex
.c54c	e8		inx		_loop:		inx
.c54d	b5 27		lda $27,x			lda DStack+3,x	; 3 <-> 7
.c54f	b4 2b		ldy $2b,x			ldy DStack+7,x
.c551	95 2b		sta $2b,x			sta DStack+7,x
.c553	94 27		sty $27,x			sty DStack+3,x
.c555	e4 14		cpx $14				cpx tmp1
.c557	90 f3		bcc $c54c			bcc _loop
=23					CodeLen	.var *-XtPtr1
=$c559					Here1 = *	; remember here
>c540	17					.byte CodeLen	;patch wh_CodeLength
.c559	60		rts				rts
>c55a	32 4f 76 65 72			Name0:	.text "2Over"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=50399					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c55f	45					.byte (("2Over"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c560	50					.byte WordFlags	;wh_Flags
>c561	03					.byte 3	;wh_CodeLength
>c562	21					  .byte LinkDisplacement	; offset to previous nt
=$c563					XtPtr1 ::= *
=50399					WordListLink ::= Nt0 ; remember the nt of this word for later
.c563					Two_over:
.c563	e0 21		cpx #$21		cpx #-2*4+DStack0+1	; far enough below end of data stack (& not negative)?
.c565	b0 be		bcs $c525		bcs Throw_Stack_20
.c567	a0 04		ldy #$04			ldy #4
.c569	ca		dex		_loop:		dex
.c56a	b5 2c		lda $2c,x			lda DStack+8,x
.c56c	95 24		sta $24,x			sta DStack+0,x
.c56e	88		dey				dey
.c56f	d0 f8		bne $c569			bne _loop
=14					CodeLen	.var *-XtPtr1
=$c571					Here1 = *	; remember here
>c561	0e					.byte CodeLen	;patch wh_CodeLength
.c571	60		rts				rts
>c572	32 21				Name0:	.text "2!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50420					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c574	22					.byte (("2!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>c575	40					.byte WordFlags	;wh_Flags
>c576	03					.byte 3	;wh_CodeLength
>c577	15					  .byte LinkDisplacement	; offset to previous nt
=$c578					XtPtr1 ::= *
=50420					WordListLink ::= Nt0 ; remember the nt of this word for later
.c578					Two_Store:
.c578	20 31 b4	jsr $b431			jsr underflow_3
.c57b	20 ef b3	jsr $b3ef			jsr PopYA
.c57e	85 14		sta $14		Two_Store_YA:	sta tmp1+0	; save addr
.c580	84 15		sty $15				sty tmp1+1
.c582	b5 24		lda $24,x			lda DStack+0,x	; copy MSB
.c584	a0 00		ldy #$00			ldy #0
.c586	91 14		sta ($14),y			sta (tmp1),y
.c588	b5 25		lda $25,x			lda DStack+1,x	; copy next
.c58a	c8		iny				iny
.c58b	91 14		sta ($14),y			sta (tmp1),y
.c58d	b5 26		lda $26,x			lda DStack+2,x	; copy next
.c58f	c8		iny				iny
.c590	91 14		sta ($14),y			sta (tmp1),y
.c592	b5 27		lda $27,x			lda DStack+3,x	; copy MSB
.c594	c8		iny				iny
.c595	91 14		sta ($14),y			sta (tmp1),y
.c597	e8		inx				inx		; 2Drop
.c598	e8		inx				inx
.c599	e8		inx				inx
.c59a	e8		inx				inx
=35					CodeLen	.var *-XtPtr1
=$c59b					Here1 = *	; remember here
>c576	23					.byte CodeLen	;patch wh_CodeLength
.c59b	60		rts				rts
>c59c	32 40				Name0:	.text "2@"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50462					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c59e	02					.byte (("2@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>c59f	00					.byte WordFlags	;wh_Flags
>c5a0	03					.byte 3	;wh_CodeLength
>c5a1	2a					  .byte LinkDisplacement	; offset to previous nt
=$c5a2					XtPtr1 ::= *
=50462					WordListLink ::= Nt0 ; remember the nt of this word for later
.c5a2	20 ef b3	jsr $b3ef	Two_fetch:	jsr PopYA
.c5a5	85 14		sta $14		Two_Fetch_YA:	sta tmp1+0	; save addr
.c5a7	84 15		sty $15				sty tmp1+1
.c5a9	a0 00		ldy #$00			ldy #0
.c5ab					Two_Fetch_Tmp1Y:
.c5ab	ca		dex				dex
.c5ac	ca		dex				dex
.c5ad	ca		dex				dex
.c5ae	ca		dex				dex
.c5af	b1 14		lda ($14),y			lda (tmp1),y	; copy LSB
.c5b1	95 24		sta $24,x			sta DStack+0,x
.c5b3	c8		iny				iny		; copy next
.c5b4	b1 14		lda ($14),y			lda (tmp1),y
.c5b6	95 25		sta $25,x			sta DStack+1,x
.c5b8	c8		iny				iny		; copy next
.c5b9	b1 14		lda ($14),y			lda (tmp1),y
.c5bb	95 26		sta $26,x			sta DStack+2,x
.c5bd	c8		iny				iny		; copy next
.c5be	b1 14		lda ($14),y			lda (tmp1),y
.c5c0	95 27		sta $27,x			sta DStack+3,x
=32					CodeLen	.var *-XtPtr1
=$c5c2					Here1 = *	; remember here
>c5a0	20					.byte CodeLen	;patch wh_CodeLength
.c5c2	60		rts				rts
>c5c3	44 40				Name0:	.text "D@"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50501					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c5c5	02					.byte (("D@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c5c6	10					.byte WordFlags	;wh_Flags
>c5c7	03					.byte 3	;wh_CodeLength
>c5c8	27					  .byte LinkDisplacement	; offset to previous nt
=$c5c9					XtPtr1 ::= *
=50501					WordListLink ::= Nt0 ; remember the nt of this word for later
.c5c9	20 ef b3	jsr $b3ef	DFetch:		jsr PopYA
.c5cc	85 14		sta $14		DFetchYA:	sta tmp1+0	; save addr
.c5ce	84 15		sty $15				sty tmp1+1
.c5d0	ca		dex				dex
.c5d1	ca		dex				dex
.c5d2	ca		dex				dex
.c5d3	ca		dex				dex
.c5d4	a0 00		ldy #$00			ldy #0
.c5d6	b1 14		lda ($14),y			lda (tmp1),y
.c5d8	95 26		sta $26,x			sta DStack+2,x
.c5da	c8		iny				iny
.c5db	b1 14		lda ($14),y			lda (tmp1),y
.c5dd	95 27		sta $27,x			sta DStack+3,x
.c5df	c8		iny				iny
.c5e0	b1 14		lda ($14),y			lda (tmp1),y
.c5e2	95 24		sta $24,x			sta DStack+0,x
.c5e4	c8		iny				iny
.c5e5	b1 14		lda ($14),y			lda (tmp1),y
.c5e7	95 25		sta $25,x			sta DStack+1,x
=32					CodeLen	.var *-XtPtr1
=$c5e9					Here1 = *	; remember here
>c5c7	20					.byte CodeLen	;patch wh_CodeLength
.c5e9	60		rts				rts
>c5ea	44 21				Name0:	.text "D!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50540					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c5ec	22					.byte (("D!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c5ed	10					.byte WordFlags	;wh_Flags
>c5ee	03					.byte 3	;wh_CodeLength
>c5ef	27					  .byte LinkDisplacement	; offset to previous nt
=$c5f0					XtPtr1 ::= *
=50540					WordListLink ::= Nt0 ; remember the nt of this word for later
.c5f0	20 ef b3	jsr $b3ef	DStore:		jsr PopYA
.c5f3	85 14		sta $14		DStoreYA:	sta tmp1+0	; save addr
.c5f5	84 15		sty $15				sty tmp1+1
.c5f7	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c5f9	a0 00		ldy #$00			ldy #0
.c5fb	91 14		sta ($14),y			sta (tmp1),y
.c5fd	b5 27		lda $27,x			lda DStack+3,x
.c5ff	c8		iny				iny
.c600	91 14		sta ($14),y			sta (tmp1),y
.c602	b5 24		lda $24,x			lda DStack+0,x
.c604	c8		iny				iny
.c605	91 14		sta ($14),y			sta (tmp1),y
.c607	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c609	c8		iny				iny
.c60a	91 14		sta ($14),y			sta (tmp1),y
.c60c	4c 31 c5	jmp $c531			jmp Two_Drop	; also check underflow, return
=31					CodeLen	.var *-XtPtr1
=$c60f					Here1 = *	; remember here
>c5ee	1f					.byte CodeLen	;patch wh_CodeLength
>c60f	32 52 40			Name0:	.text "2R@"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50578					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c612	03					.byte (("2R@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=20					WordFlags ::= CO+NN	; modifiable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>c613	14					.byte WordFlags	;wh_Flags
>c614	03					.byte 3	;wh_CodeLength
>c615	26					  .byte LinkDisplacement	; offset to previous nt
=$c616					XtPtr1 ::= *
=50578					WordListLink ::= Nt0 ; remember the nt of this word for later
.c616					Two_r_fetch:
.c616	8a		txa				txa		; Y= return stack index
.c617	ba		tsx				tsx
.c618	86 14		stx $14				stx tmp1
.c61a	a4 14		ldy $14				ldy tmp1
.c61c	aa		tax				tax
.c61d	ca		dex				dex		; make room on the Data Stack
.c61e	ca		dex				dex
.c61f	ca		dex				dex
.c620	ca		dex				dex
.c621	b9 03 01	lda $0103,y			lda RStack+3,y	; LSB of top entry
.c624	95 24		sta $24,x			sta DStack+0,x
.c626	b9 04 01	lda $0104,y			lda RStack+4,y	; MSB of top entry
.c629	95 25		sta $25,x			sta DStack+1,x
.c62b	b9 05 01	lda $0105,y			lda RStack+5,y	; LSB of bottom entry
.c62e	95 26		sta $26,x			sta DStack+2,x
.c630	b9 06 01	lda $0106,y			lda RStack+6,y	; MSB of bottom entry
.c633	95 27		sta $27,x			sta DStack+3,x
=31					CodeLen	.var *-XtPtr1
=$c635					Here1 = *	; remember here
>c614	1f					.byte CodeLen	;patch wh_CodeLength
.c635	60		rts				rts
>c636	32 52 3e			Name0:	.text "2R>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50617					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c639	c3					.byte (("2R>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=52					WordFlags ::= CO+ST	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c63a	34					.byte WordFlags	;wh_Flags
>c63b	03					.byte 3	;wh_CodeLength
>c63c	27					  .byte LinkDisplacement	; offset to previous nt
=$c63d					XtPtr1 ::= *
=50617					WordListLink ::= Nt0 ; remember the nt of this word for later
.c63d					Two_r_from:
.c63d	68		pla				pla			; save the return address
.c63e	85 14		sta $14				sta tmp1+0
.c640	68		pla				pla
.c641	85 15		sta $15				sta tmp1+1
.c643	ca		dex				dex			; make room on stack
.c644	ca		dex				dex
.c645	ca		dex				dex
.c646	ca		dex				dex
.c647	68		pla				pla			; LSB
.c648	95 24		sta $24,x			sta DStack+0,x
.c64a	68		pla				pla			; MSB
.c64b	95 25		sta $25,x			sta DStack+1,x
.c64d	68		pla				pla			; LSB
.c64e	95 26		sta $26,x			sta DStack+2,x
.c650	68		pla				pla			; MSB
.c651	95 27		sta $27,x			sta DStack+3,x
.c653	a5 15		lda $15				lda tmp1+1		; restore return address
.c655	48		pha				pha
.c656	a5 14		lda $14				lda tmp1+0
.c658	48		pha				pha
=28					CodeLen	.var *-XtPtr1
=$c659					Here1 = *	; remember here
>c63b	1c					.byte CodeLen	;patch wh_CodeLength
.c659	60		rts				rts
>c65a	32 3e 52			Name0:	.text "2>R"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50653					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c65d	43					.byte (("2>R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=116					WordFlags ::= CO+UF+ST	; modifiable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>c65e	74					.byte WordFlags	;wh_Flags
>c65f	03					.byte 3	;wh_CodeLength
>c660	24					  .byte LinkDisplacement	; offset to previous nt
=$c661					XtPtr1 ::= *
=50653					WordListLink ::= Nt0 ; remember the nt of this word for later
.c661					Two_to_r:
.c661	68		pla				pla		; save the return address
.c662	85 14		sta $14				sta tmp1+0
.c664	68		pla				pla
.c665	85 15		sta $15				sta tmp1+1
.c667	20 2c b4	jsr $b42c			jsr underflow_2
.c66a	b5 27		lda $27,x			lda DStack+3,x	; MSB
.c66c	48		pha				pha
.c66d	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c66f	48		pha				pha
.c670	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c672	48		pha				pha
.c673	b5 24		lda $24,x			lda DStack+0,x	; LSB
.c675	48		pha				pha
.c676	e8		inx				inx
.c677	e8		inx				inx
.c678	e8		inx				inx
.c679	e8		inx				inx
.c67a	a5 15		lda $15				lda tmp1+1	; restore return address
.c67c	48		pha				pha
.c67d	a5 14		lda $14				lda tmp1+0
.c67f	48		pha				pha
=31					CodeLen	.var *-XtPtr1
=$c680					Here1 = *	; remember here
>c65f	1f					.byte CodeLen	;patch wh_CodeLength
.c680	60		rts				rts
>c681	49 6e 76 65 72 74		Name0:	.text "Invert"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=50695					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c687	86					.byte (("Invert"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>c688	40					.byte WordFlags	;wh_Flags
>c689	03					.byte 3	;wh_CodeLength
>c68a	2a					  .byte LinkDisplacement	; offset to previous nt
=$c68b					XtPtr1 ::= *
=50695					WordListLink ::= Nt0 ; remember the nt of this word for later
.c68b					Invert:
.c68b	20 18 b4	jsr $b418			jsr underflow_1
.c68e	a9 ff		lda #$ff			lda #$FF
.c690	55 24		eor $24,x			eor DStack+0,x	; LSB
.c692	95 24		sta $24,x			sta DStack+0,x
.c694	a9 ff		lda #$ff			lda #$FF
.c696	55 25		eor $25,x			eor DStack+1,x	; MSB
.c698	95 25		sta $25,x			sta DStack+1,x
=15					CodeLen	.var *-XtPtr1
=$c69a					Here1 = *	; remember here
>c689	0f					.byte CodeLen	;patch wh_CodeLength
.c69a	60		rts				rts
>c69b	4e 65 67 61 74 65		Name0:	.text "Negate"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=50721					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6a1	a6					.byte (("Negate"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>c6a2	40					.byte WordFlags	;wh_Flags
>c6a3	03					.byte 3	;wh_CodeLength
>c6a4	1a					  .byte LinkDisplacement	; offset to previous nt
=$c6a5					XtPtr1 ::= *
=50721					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6a5					Negate:
.c6a5	20 18 b4	jsr $b418			jsr underflow_1
.c6a8	38		sec		Negate3:	sec
.c6a9	a9 00		lda #$00	Negate4:	lda #0
.c6ab	f5 24		sbc $24,x			sbc DStack+0,x	; LSB
.c6ad	95 24		sta $24,x			sta DStack+0,x
.c6af	a9 00		lda #$00			lda #0
.c6b1	f5 25		sbc $25,x			sbc DStack+1,x	; MSB
.c6b3	95 25		sta $25,x			sta DStack+1,x
=16					CodeLen	.var *-XtPtr1
=$c6b5					Here1 = *	; remember here
>c6a3	10					.byte CodeLen	;patch wh_CodeLength
.c6b5	60		rts				rts
>c6b6	41 62 73			Name0:	.text "Abs"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50745					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6b9	63					.byte (("Abs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>c6ba	10					.byte WordFlags	;wh_Flags
>c6bb	03					.byte 3	;wh_CodeLength
>c6bc	18					  .byte LinkDisplacement	; offset to previous nt
=$c6bd					XtPtr1 ::= *
=50745					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6bd					Abs:
.c6bd	e0 27		cpx #$27		cpx #-2*1+DStack0+1	; far enough below end of data stack (& not negative)?
.c6bf	b0 05		bcs $c6c6		bcs Throw_Stack_17
.c6c1	b5 25		lda $25,x			lda DStack+1,x	; n negative?
.c6c3	30 e3		bmi $c6a8			bmi Negate3
=8					CodeLen	.var *-XtPtr1
=$c6c5					Here1 = *	; remember here
>c6bb	08					.byte CodeLen	;patch wh_CodeLength
.c6c5	60		rts				rts
.c6c6	4c 3b b4	jmp $b43b	Throw_Stack_17: jmp Throw_Stack
>c6c9	44 4e 65 67 61 74 65		Name0:	.text "DNegate"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=50768					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6d0	a7					.byte (("DNegate"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c6d1	10					.byte WordFlags	;wh_Flags
>c6d2	03					.byte 3	;wh_CodeLength
>c6d3	17					  .byte LinkDisplacement	; offset to previous nt
=$c6d4					XtPtr1 ::= *
=50768					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6d4					DNegate:
.c6d4	e0 25		cpx #$25		cpx #-2*2+DStack0+1	; far enough below end of data stack (& not negative)?
.c6d6	b0 ee		bcs $c6c6		bcs Throw_Stack_17
.c6d8	38		sec		DNegate3:	sec
.c6d9	a9 00		lda #$00			lda #0
.c6db	f5 26		sbc $26,x			sbc DStack+2,x	; LSB of low cell
.c6dd	95 26		sta $26,x			sta DStack+2,x
.c6df	a9 00		lda #$00			lda #0
.c6e1	f5 27		sbc $27,x			sbc DStack+3,x	; MSB of low cell
.c6e3	95 27		sta $27,x			sta DStack+3,x
.c6e5	4c a9 c6	jmp $c6a9			jmp Negate4
=20					CodeLen	.var *-XtPtr1
=$c6e8					Here1 = *	; remember here
>c6d2	14					.byte CodeLen	;patch wh_CodeLength
>c6e8	44 41 62 73			Name0:	.text "DAbs"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=50796					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6ec	64					.byte (("DAbs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>c6ed	10					.byte WordFlags	;wh_Flags
>c6ee	03					.byte 3	;wh_CodeLength
>c6ef	1c					  .byte LinkDisplacement	; offset to previous nt
=$c6f0					XtPtr1 ::= *
=50796					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6f0					DAbs:
.c6f0	e0 25		cpx #$25		cpx #-2*2+DStack0+1	; far enough below end of data stack (& not negative)?
.c6f2	b0 d2		bcs $c6c6		bcs Throw_Stack_17
.c6f4	b5 25		lda $25,x			lda DStack+1,x	; d negative?
.c6f6	30 e0		bmi $c6d8			bmi DNegate3
=8					CodeLen	.var *-XtPtr1
=$c6f8					Here1 = *	; remember here
>c6ee	08					.byte CodeLen	;patch wh_CodeLength
.c6f8	60		rts				rts
>c6f9	44 3c 3e			Name0:	.text "D<>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50812					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6fc	c3					.byte (("D<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>c6fd	10					.byte WordFlags	;wh_Flags
>c6fe	03					.byte 3	;wh_CodeLength
>c6ff	10					  .byte LinkDisplacement	; offset to previous nt
=$c700					XtPtr1 ::= *
=50812					WordListLink ::= Nt0 ; remember the nt of this word for later
.c700	20 0c c7	jsr $c70c	DNEq:		jsr DEqual
.c703	4c fa c8	jmp $c8fa			jmp ZEqA
=6					CodeLen	.var *-XtPtr1
=$c706					Here1 = *	; remember here
>c6fe	06					.byte CodeLen	;patch wh_CodeLength
>c706	44 3d				Name0:	.text "D="	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50824					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c708	a2					.byte (("D="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c709	10					.byte WordFlags	;wh_Flags
>c70a	03					.byte 3	;wh_CodeLength
>c70b	0c					  .byte LinkDisplacement	; offset to previous nt
=$c70c					XtPtr1 ::= *
=50824					WordListLink ::= Nt0 ; remember the nt of this word for later
.c70c	b5 2a		lda $2a,x	DEqual:		lda DStack+6,x
.c70e	d5 26		cmp $26,x			cmp DStack+2,x
.c710	d0 4c		bne $c75e			bne False3
.c712	b5 2b		lda $2b,x			lda DStack+7,x
.c714	d5 27		cmp $27,x			cmp DStack+3,x
.c716	d0 46		bne $c75e			bne False3
.c718	b5 24		lda $24,x			lda DStack+0,x
.c71a	d5 28		cmp $28,x			cmp DStack+4,x
.c71c	d0 40		bne $c75e			bne False3
.c71e	b5 25		lda $25,x			lda DStack+1,x
.c720	d5 29		cmp $29,x			cmp DStack+5,x
.c722	d0 3a		bne $c75e			bne False3
.c724	f0 5c		beq $c782			beq True3
=26					CodeLen	.var *-XtPtr1
=$c726					Here1 = *	; remember here
>c70a	1a					.byte CodeLen	;patch wh_CodeLength
>c726	44 55 3e			Name0:	.text "DU>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50857					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c729	c3					.byte (("DU>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c72a	10					.byte WordFlags	;wh_Flags
>c72b	03					.byte 3	;wh_CodeLength
>c72c	21					  .byte LinkDisplacement	; offset to previous nt
=$c72d					XtPtr1 ::= *
=50857					WordListLink ::= Nt0 ; remember the nt of this word for later
.c72d	20 c3 c7	jsr $c7c3	DUGt:		jsr DGtSub
.c730	90 50		bcc $c782			bcc True3
.c732	b0 2a		bcs $c75e			bcs False3
=7					CodeLen	.var *-XtPtr1
=$c734					Here1 = *	; remember here
>c72b	07					.byte CodeLen	;patch wh_CodeLength
>c734	44 55 3c 3d			Name0:	.text "DU<="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=50872					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c738	a4					.byte (("DU<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c739	10					.byte WordFlags	;wh_Flags
>c73a	03					.byte 3	;wh_CodeLength
>c73b	0f					  .byte LinkDisplacement	; offset to previous nt
=$c73c					XtPtr1 ::= *
=50872					WordListLink ::= Nt0 ; remember the nt of this word for later
.c73c	20 c3 c7	jsr $c7c3	DULe:		jsr DGtSub
.c73f	b0 41		bcs $c782			bcs True3
.c741	90 1b		bcc $c75e			bcc False3
=7					CodeLen	.var *-XtPtr1
=$c743					Here1 = *	; remember here
>c73a	07					.byte CodeLen	;patch wh_CodeLength
>c743	44 55 3e 3d			Name0:	.text "DU>="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=50887					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c747	a4					.byte (("DU>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c748	10					.byte WordFlags	;wh_Flags
>c749	03					.byte 3	;wh_CodeLength
>c74a	0f					  .byte LinkDisplacement	; offset to previous nt
=$c74b					XtPtr1 ::= *
=50887					WordListLink ::= Nt0 ; remember the nt of this word for later
.c74b	20 93 c7	jsr $c793	DUGe:		jsr DLessSub
.c74e	b0 32		bcs $c782			bcs True3
.c750	90 0c		bcc $c75e			bcc False3
=7					CodeLen	.var *-XtPtr1
=$c752					Here1 = *	; remember here
>c749	07					.byte CodeLen	;patch wh_CodeLength
>c752	44 55 3c			Name0:	.text "DU<"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50901					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c755	83					.byte (("DU<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c756	10					.byte WordFlags	;wh_Flags
>c757	03					.byte 3	;wh_CodeLength
>c758	0e					  .byte LinkDisplacement	; offset to previous nt
=$c759					XtPtr1 ::= *
=50901					WordListLink ::= Nt0 ; remember the nt of this word for later
.c759	20 93 c7	jsr $c793	DULess:		jsr DLessSub
.c75c	90 24		bcc $c782			bcc True3
.c75e	a9 00		lda #$00	False3:		lda #0
.c760	f0 22		beq $c784			beq DReturn3
=9					CodeLen	.var *-XtPtr1
=$c762					Here1 = *	; remember here
>c757	09					.byte CodeLen	;patch wh_CodeLength
.c762	4c 3b b4	jmp $b43b	Throw_Stack_09: jmp Throw_Stack
>c765	44 3e 3d			Name0:	.text "D>="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50920					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c768	a3					.byte (("D>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>c769	10					.byte WordFlags	;wh_Flags
>c76a	03					.byte 3	;wh_CodeLength
>c76b	13					  .byte LinkDisplacement	; offset to previous nt
=$c76c					XtPtr1 ::= *
=50920					WordListLink ::= Nt0 ; remember the nt of this word for later
.c76c	20 93 c7	jsr $c793	DGEq:		jsr DLessSub
.c76f	70 0f		bvs $c780			bvs DLess3
.c771	10 0f		bpl $c782	DGEq3:		bpl True3
.c773	30 e9		bmi $c75e			bmi False3
=9					CodeLen	.var *-XtPtr1
=$c775					Here1 = *	; remember here
>c76a	09					.byte CodeLen	;patch wh_CodeLength
>c775	44 3c				Name0:	.text "D<"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50935					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c777	82					.byte (("D<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c778	10					.byte WordFlags	;wh_Flags
>c779	03					.byte 3	;wh_CodeLength
>c77a	0f					  .byte LinkDisplacement	; offset to previous nt
=$c77b					XtPtr1 ::= *
=50935					WordListLink ::= Nt0 ; remember the nt of this word for later
.c77b	20 93 c7	jsr $c793	DLess:		jsr DLessSub
.c77e	70 f1		bvs $c771			bvs DGEq3
.c780	10 dc		bpl $c75e	DLess3:		bpl False3
.c782	a9 ff		lda #$ff	True3:		lda #$ff
.c784					DReturn3:
.c784	e0 21		cpx #$21		cpx #-2*4+DStack0+1	; far enough below end of data stack (& not negative)?
.c786	b0 da		bcs $c762		bcs Throw_Stack_09
.c788	95 2a		sta $2a,x			sta DStack+6,x
.c78a	95 2b		sta $2b,x			sta DStack+7,x
.c78c	e8		inx				inx			; preserve A, don't use ThreeDrop
.c78d	e8		inx				inx
.c78e	e8		inx				inx
.c78f	e8		inx				inx
.c790	e8		inx				inx
.c791	e8		inx				inx
.c792	60		rts				rts
=24					CodeLen	.var *-XtPtr1
=$c793					Here1 = *	; remember here
>c779	18					.byte CodeLen	;patch wh_CodeLength
.c793	b5 2a		lda $2a,x	DLessSub:	lda DStack+6,x
.c795	d5 26		cmp $26,x			cmp DStack+2,x
.c797	b5 2b		lda $2b,x			lda DStack+7,x
.c799	f5 27		sbc $27,x			sbc DStack+3,x
.c79b	b5 28		lda $28,x			lda DStack+4,x
.c79d	f5 24		sbc $24,x			sbc DStack+0,x
.c79f	b5 29		lda $29,x			lda DStack+5,x
.c7a1	f5 25		sbc $25,x			sbc DStack+1,x
.c7a3	60		rts				rts
>c7a4	44 3c 3d			Name0:	.text "D<="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50983					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7a7	a3					.byte (("D<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=48					LinkDisplacement = Nt0-WordListLink
>c7a8	10					.byte WordFlags	;wh_Flags
>c7a9	03					.byte 3	;wh_CodeLength
>c7aa	30					  .byte LinkDisplacement	; offset to previous nt
=$c7ab					XtPtr1 ::= *
=50983					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7ab	20 c3 c7	jsr $c7c3	DLe:		jsr DGtSub
.c7ae	70 0f		bvs $c7bf			bvs DGt3
.c7b0	10 d0		bpl $c782	DLe3:		bpl True3
.c7b2	30 aa		bmi $c75e			bmi False3
=9					CodeLen	.var *-XtPtr1
=$c7b4					Here1 = *	; remember here
>c7a9	09					.byte CodeLen	;patch wh_CodeLength
>c7b4	44 3e				Name0:	.text "D>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50998					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7b6	c2					.byte (("D>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c7b7	10					.byte WordFlags	;wh_Flags
>c7b8	03					.byte 3	;wh_CodeLength
>c7b9	0f					  .byte LinkDisplacement	; offset to previous nt
=$c7ba					XtPtr1 ::= *
=50998					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7ba	20 c3 c7	jsr $c7c3	DGt:		jsr DGtSub
.c7bd	70 f1		bvs $c7b0			bvs DLe3
.c7bf	30 c1		bmi $c782	DGt3:		bmi True3
.c7c1	10 9b		bpl $c75e			bpl False3
=9					CodeLen	.var *-XtPtr1
=$c7c3					Here1 = *	; remember here
>c7b8	09					.byte CodeLen	;patch wh_CodeLength
.c7c3	b5 26		lda $26,x	DGtSub:		lda DStack+2,x
.c7c5	d5 2a		cmp $2a,x			cmp DStack+6,x
.c7c7	b5 27		lda $27,x			lda DStack+3,x
.c7c9	f5 2b		sbc $2b,x			sbc DStack+7,x
.c7cb	b5 24		lda $24,x			lda DStack+0,x
.c7cd	f5 28		sbc $28,x			sbc DStack+4,x
.c7cf	b5 25		lda $25,x			lda DStack+1,x
.c7d1	f5 29		sbc $29,x			sbc DStack+5,x
.c7d3	60		rts				rts
>c7d4	44 30 3c 3d			Name0:	.text "D0<="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51032					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7d8	a4					.byte (("D0<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>c7d9	10					.byte WordFlags	;wh_Flags
>c7da	03					.byte 3	;wh_CodeLength
>c7db	22					  .byte LinkDisplacement	; offset to previous nt
=$c7dc					XtPtr1 ::= *
=51032					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7dc	b5 25		lda $25,x	D0Le:		lda DStack+1,x	; test sign
.c7de	30 65		bmi $c845			bmi True1
.c7e0	10 24		bpl $c806			bpl D0Equal
=6					CodeLen	.var *-XtPtr1
=$c7e2					Here1 = *	; remember here
>c7da	06					.byte CodeLen	;patch wh_CodeLength
>c7e2	44 30 3e			Name0:	.text "D0>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51045					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7e5	c3					.byte (("D0>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c7e6	10					.byte WordFlags	;wh_Flags
>c7e7	03					.byte 3	;wh_CodeLength
>c7e8	0d					  .byte LinkDisplacement	; offset to previous nt
=$c7e9					XtPtr1 ::= *
=51045					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7e9	b5 25		lda $25,x	D0Gt:		lda DStack+1,x	; test sign
.c7eb	10 0b		bpl $c7f8			bpl D0Ne
.c7ed	4c 64 c8	jmp $c864			jmp False1
>c7f0	44 30 3c 3e			Name0:	.text "D0<>"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51060					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7f4	c4					.byte (("D0<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c7f5	10					.byte WordFlags	;wh_Flags
>c7f6	03					.byte 3	;wh_CodeLength
>c7f7	0f					  .byte LinkDisplacement	; offset to previous nt
=$c7f8					XtPtr1 ::= *
=51060					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7f8	20 0d c8	jsr $c80d	D0Ne:		jsr D0EqSub
.c7fb	d0 48		bne $c845			bne True1
.c7fd	f0 65		beq $c864			beq False1
=7					CodeLen	.var *-XtPtr1
=$c7ff					Here1 = *	; remember here
>c7f6	07					.byte CodeLen	;patch wh_CodeLength
>c7ff	44 30 3d			Name0:	.text "D0="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51074					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c802	a3					.byte (("D0="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c803	10					.byte WordFlags	;wh_Flags
>c804	03					.byte 3	;wh_CodeLength
>c805	0e					  .byte LinkDisplacement	; offset to previous nt
=$c806					XtPtr1 ::= *
=51074					WordListLink ::= Nt0 ; remember the nt of this word for later
.c806	20 0d c8	jsr $c80d	D0Equal:	jsr D0EqSub
.c809	d0 59		bne $c864			bne False1
.c80b	f0 38		beq $c845			beq True1
=7					CodeLen	.var *-XtPtr1
=$c80d					Here1 = *	; remember here
>c804	07					.byte CodeLen	;patch wh_CodeLength
.c80d	b5 26		lda $26,x	D0EqSub:	lda DStack+2,x
.c80f	15 27		ora $27,x			ora DStack+3,x
.c811	15 24		ora $24,x			ora DStack+0,x
.c813	15 25		ora $25,x			ora DStack+1,x
.c815	60		rts				rts
>c816	44 30 3c			Name0:	.text "D0<"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51097					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c819	83					.byte (("D0<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c81a	10					.byte WordFlags	;wh_Flags
>c81b	03					.byte 3	;wh_CodeLength
>c81c	17					  .byte LinkDisplacement	; offset to previous nt
=$c81d					XtPtr1 ::= *
=51097					WordListLink ::= Nt0 ; remember the nt of this word for later
.c81d	b5 25		lda $25,x	D0Less:		lda DStack+1,x	; test sign
.c81f	30 24		bmi $c845			bmi True1
.c821	10 41		bpl $c864			bpl False1
=6					CodeLen	.var *-XtPtr1
=$c823					Here1 = *	; remember here
>c81b	06					.byte CodeLen	;patch wh_CodeLength
>c823	44 30 3e 3d			Name0:	.text "D0>="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51111					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c827	a4					.byte (("D0>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c828	10					.byte WordFlags	;wh_Flags
>c829	03					.byte 3	;wh_CodeLength
>c82a	0e					  .byte LinkDisplacement	; offset to previous nt
=$c82b					XtPtr1 ::= *
=51111					WordListLink ::= Nt0 ; remember the nt of this word for later
.c82b	b5 25		lda $25,x	D0Ge:		lda DStack+1,x	; test sign
.c82d	10 16		bpl $c845			bpl True1
.c82f	30 33		bmi $c864			bmi False1
=6					CodeLen	.var *-XtPtr1
=$c831					Here1 = *	; remember here
>c829	06					.byte CodeLen	;patch wh_CodeLength
.c831	4c 3b b4	jmp $b43b	Throw_Stack_08: jmp Throw_Stack
>c834	3d				Name0:	.text "="	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=51125					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c835	a1					.byte (("="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c836	10					.byte WordFlags	;wh_Flags
>c837	03					.byte 3	;wh_CodeLength
>c838	0e					  .byte LinkDisplacement	; offset to previous nt
=$c839					XtPtr1 ::= *
=51125					WordListLink ::= Nt0 ; remember the nt of this word for later
.c839	b5 24		lda $24,x	Equal:		lda DStack+0,x		; LSB
.c83b	d5 26		cmp $26,x			cmp DStack+2,x
.c83d	d0 25		bne $c864			bne False1
.c83f	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c841	d5 27		cmp $27,x			cmp DStack+3,x
.c843	d0 1f		bne $c864			bne False1
.c845	a9 ff		lda #$ff	True1:		lda #$ff	; return TRUE
.c847					Return1:
.c847	e0 25		cpx #$25		cpx #-2*2+DStack0+1	; far enough below end of data stack (& not negative)?
.c849	b0 e6		bcs $c831		bcs Throw_Stack_08
.c84b	e8		inx				inx		; Drop
.c84c	e8		inx				inx
.c84d	95 24		sta $24,x			sta DStack+0,x	; store f
.c84f	95 25		sta $25,x			sta DStack+1,x
.c851	60		rts				rts
=25					CodeLen	.var *-XtPtr1
=$c852					Here1 = *	; remember here
>c837	19					.byte CodeLen	;patch wh_CodeLength
>c852	3c 3e				Name0:	.text "<>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51156					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c854	c2					.byte (("<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>c855	10					.byte WordFlags	;wh_Flags
>c856	03					.byte 3	;wh_CodeLength
>c857	1f					  .byte LinkDisplacement	; offset to previous nt
=$c858					XtPtr1 ::= *
=51156					WordListLink ::= Nt0 ; remember the nt of this word for later
.c858	b5 24		lda $24,x	Not_Equals:	lda DStack+0,x		; LSB
.c85a	d5 26		cmp $26,x			cmp DStack+2,x
.c85c	d0 e7		bne $c845			bne True1
.c85e	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c860	d5 27		cmp $27,x			cmp DStack+3,x
.c862	d0 e1		bne $c845			bne True1
.c864	a9 00		lda #$00	False1:		lda #0		; return FALSE
.c866	f0 df		beq $c847			beq Return1
=16					CodeLen	.var *-XtPtr1
=$c868					Here1 = *	; remember here
>c856	10					.byte CodeLen	;patch wh_CodeLength
>c868	3c				Name0:	.text "<"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=51177					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c869	81					.byte (("<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>c86a	10					.byte WordFlags	;wh_Flags
>c86b	03					.byte 3	;wh_CodeLength
>c86c	15					  .byte LinkDisplacement	; offset to previous nt
=$c86d					XtPtr1 ::= *
=51177					WordListLink ::= Nt0 ; remember the nt of this word for later
.c86d	b5 26		lda $26,x	Less_Than:	lda DStack+2,x	; compare
.c86f	d5 24		cmp $24,x			cmp DStack+0,x
.c871	b5 27		lda $27,x			lda DStack+3,x
.c873	f5 25		sbc $25,x			sbc DStack+1,x
.c875	50 02		bvc $c879			bvc _c
.c877	49 80		eor #$80			eor #$80	; fix sign
.c879	10 e9		bpl $c864	_c:		bpl False1
.c87b	30 c8		bmi $c845			bmi True1
=16					CodeLen	.var *-XtPtr1
=$c87d					Here1 = *	; remember here
>c86b	10					.byte CodeLen	;patch wh_CodeLength
>c87d	3e 3d				Name0:	.text ">="	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51199					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c87f	a2					.byte ((">="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>c880	10					.byte WordFlags	;wh_Flags
>c881	03					.byte 3	;wh_CodeLength
>c882	16					  .byte LinkDisplacement	; offset to previous nt
=$c883					XtPtr1 ::= *
=51199					WordListLink ::= Nt0 ; remember the nt of this word for later
.c883	20 6d c8	jsr $c86d	Ge:		jsr Less_Than
.c886	4c fa c8	jmp $c8fa			jmp ZEqA
=6					CodeLen	.var *-XtPtr1
=$c889					Here1 = *	; remember here
>c881	06					.byte CodeLen	;patch wh_CodeLength
>c889	55 3c				Name0:	.text "U<"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51211					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c88b	82					.byte (("U<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c88c	10					.byte WordFlags	;wh_Flags
>c88d	03					.byte 3	;wh_CodeLength
>c88e	0c					  .byte LinkDisplacement	; offset to previous nt
=$c88f					XtPtr1 ::= *
=51211					WordListLink ::= Nt0 ; remember the nt of this word for later
.c88f	b5 26		lda $26,x	U_Less_Than:	lda DStack+2,x
.c891	d5 24		cmp $24,x			cmp DStack+0,x
.c893	b5 27		lda $27,x			lda DStack+3,x
.c895	f5 25		sbc $25,x			sbc DStack+1,x
.c897	b0 cb		bcs $c864			bcs False1
.c899	90 aa		bcc $c845			bcc True1
=12					CodeLen	.var *-XtPtr1
=$c89b					Here1 = *	; remember here
>c88d	0c					.byte CodeLen	;patch wh_CodeLength
>c89b	55 3e				Name0:	.text "U>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51229					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c89d	c2					.byte (("U>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>c89e	10					.byte WordFlags	;wh_Flags
>c89f	03					.byte 3	;wh_CodeLength
>c8a0	12					  .byte LinkDisplacement	; offset to previous nt
=$c8a1					XtPtr1 ::= *
=51229					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8a1	b5 24		lda $24,x	U_Greater_Than:	lda DStack+0,x
.c8a3	d5 26		cmp $26,x			cmp DStack+2,x
.c8a5	b5 25		lda $25,x			lda DStack+1,x
.c8a7	f5 27		sbc $27,x			sbc DStack+3,x
.c8a9	b0 b9		bcs $c864			bcs False1
.c8ab	90 98		bcc $c845			bcc True1
=12					CodeLen	.var *-XtPtr1
=$c8ad					Here1 = *	; remember here
>c89f	0c					.byte CodeLen	;patch wh_CodeLength
>c8ad	3e				Name0:	.text ">"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=51246					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8ae	c1					.byte ((">"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>c8af	10					.byte WordFlags	;wh_Flags
>c8b0	03					.byte 3	;wh_CodeLength
>c8b1	11					  .byte LinkDisplacement	; offset to previous nt
=$c8b2					XtPtr1 ::= *
=51246					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8b2	b5 24		lda $24,x	Greater_Than:	lda DStack+0,x	; compare
.c8b4	d5 26		cmp $26,x			cmp DStack+2,x
.c8b6	b5 25		lda $25,x			lda DStack+1,x
.c8b8	f5 27		sbc $27,x			sbc DStack+3,x
.c8ba	50 02		bvc $c8be			bvc _c
.c8bc	49 80		eor #$80			eor #$80	; fix sign
.c8be	10 a4		bpl $c864	_c:		bpl False1
.c8c0	4c 45 c8	jmp $c845			jmp True1
=17					CodeLen	.var *-XtPtr1
=$c8c3					Here1 = *	; remember here
>c8b0	11					.byte CodeLen	;patch wh_CodeLength
>c8c3	3c 3d				Name0:	.text "<="	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51269					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8c5	a2					.byte (("<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c8c6	10					.byte WordFlags	;wh_Flags
>c8c7	03					.byte 3	;wh_CodeLength
>c8c8	17					  .byte LinkDisplacement	; offset to previous nt
=$c8c9					XtPtr1 ::= *
=51269					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8c9	20 b2 c8	jsr $c8b2	Le:		jsr Greater_Than
.c8cc	4c fa c8	jmp $c8fa			jmp ZEqA
=6					CodeLen	.var *-XtPtr1
=$c8cf					Here1 = *	; remember here
>c8c7	06					.byte CodeLen	;patch wh_CodeLength
>c8cf	55 3e 3d			Name0:	.text "U>="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51282					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8d2	a3					.byte (("U>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c8d3	10					.byte WordFlags	;wh_Flags
>c8d4	03					.byte 3	;wh_CodeLength
>c8d5	0d					  .byte LinkDisplacement	; offset to previous nt
=$c8d6					XtPtr1 ::= *
=51282					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8d6	20 8f c8	jsr $c88f	UGe:		jsr U_Less_Than
.c8d9	4c fa c8	jmp $c8fa			jmp ZEqA
=6					CodeLen	.var *-XtPtr1
=$c8dc					Here1 = *	; remember here
>c8d4	06					.byte CodeLen	;patch wh_CodeLength
>c8dc	55 3c 3d			Name0:	.text "U<="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51295					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8df	a3					.byte (("U<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c8e0	10					.byte WordFlags	;wh_Flags
>c8e1	03					.byte 3	;wh_CodeLength
>c8e2	0d					  .byte LinkDisplacement	; offset to previous nt
=$c8e3					XtPtr1 ::= *
=51295					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8e3	20 a1 c8	jsr $c8a1	ULe:		jsr U_Greater_Than
.c8e6	4c fa c8	jmp $c8fa			jmp ZEqA
=6					CodeLen	.var *-XtPtr1
=$c8e9					Here1 = *	; remember here
>c8e1	06					.byte CodeLen	;patch wh_CodeLength
.c8e9	4c 3b b4	jmp $b43b	Throw_Stack_11: jmp Throw_Stack
>c8ec	30 3d				Name0:	.text "0="	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51310					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8ee	a2					.byte (("0="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c8ef	10					.byte WordFlags	;wh_Flags
>c8f0	03					.byte 3	;wh_CodeLength
>c8f1	0f					  .byte LinkDisplacement	; offset to previous nt
=$c8f2					XtPtr1 ::= *
=51310					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8f2	b5 25		lda $25,x	Zero_Equal:	lda DStack+1,x
.c8f4	15 24		ora $24,x	ZEq3:		ora DStack+0,x
.c8f6	d0 2b		bne $c923			bne False0
.c8f8	f0 14		beq $c90e			beq True0
=8					CodeLen	.var *-XtPtr1
=$c8fa					Here1 = *	; remember here
>c8f0	08					.byte CodeLen	;patch wh_CodeLength
.c8fa					ZEqA:
.c8fa	49 ff		eor #$ff			eor #$ff
.c8fc	95 24		sta $24,x			sta DStack+0,x
.c8fe	95 25		sta $25,x			sta DStack+1,x
.c900	60		rts				rts
>c901	30 3c 3e			Name0:	.text "0<>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51332					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c904	c3					.byte (("0<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>c905	10					.byte WordFlags	;wh_Flags
>c906	03					.byte 3	;wh_CodeLength
>c907	16					  .byte LinkDisplacement	; offset to previous nt
=$c908					XtPtr1 ::= *
=51332					WordListLink ::= Nt0 ; remember the nt of this word for later
.c908	b5 25		lda $25,x	Zero_Unequal:	lda DStack+1,x
.c90a	15 24		ora $24,x	ZNe3:		ora DStack+0,x
.c90c	f0 15		beq $c923			beq False0
.c90e	a9 ff		lda #$ff	True0:		lda #$ff	; return TRUE
.c910	95 24		sta $24,x	Return0:	sta DStack+0,x
.c912	95 25		sta $25,x			sta DStack+1,x
.c914	e0 27		cpx #$27		cpx #-2*1+DStack0+1	; far enough below end of data stack (& not negative)?
.c916	b0 35		bcs $c94d		bcs Throw_Stack_05
.c918	60		rts				rts
=17					CodeLen	.var *-XtPtr1
=$c919					Here1 = *	; remember here
>c906	11					.byte CodeLen	;patch wh_CodeLength
>c919	30 3e				Name0:	.text "0>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51355					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c91b	c2					.byte (("0>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c91c	10					.byte WordFlags	;wh_Flags
>c91d	03					.byte 3	;wh_CodeLength
>c91e	17					  .byte LinkDisplacement	; offset to previous nt
=$c91f					XtPtr1 ::= *
=51355					WordListLink ::= Nt0 ; remember the nt of this word for later
.c91f	b5 25		lda $25,x	Zero_Greater:	lda DStack+1,x	; MSB
.c921	10 e7		bpl $c90a			bpl ZNe3	; >= 0 ?
.c923	a9 00		lda #$00	False0:		lda #0		; return FALSE
.c925	f0 e9		beq $c910			beq Return0
=8					CodeLen	.var *-XtPtr1
=$c927					Here1 = *	; remember here
>c91d	08					.byte CodeLen	;patch wh_CodeLength
>c927	30 3c 3d			Name0:	.text "0<="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51370					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c92a	a3					.byte (("0<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c92b	10					.byte WordFlags	;wh_Flags
>c92c	03					.byte 3	;wh_CodeLength
>c92d	0f					  .byte LinkDisplacement	; offset to previous nt
=$c92e					XtPtr1 ::= *
=51370					WordListLink ::= Nt0 ; remember the nt of this word for later
.c92e	b5 25		lda $25,x	ZLe:		lda DStack+1,x	; < 0 ?
.c930	30 dc		bmi $c90e			bmi True0
.c932	10 c0		bpl $c8f4			bpl ZEq3
=6					CodeLen	.var *-XtPtr1
=$c934					Here1 = *	; remember here
>c92c	06					.byte CodeLen	;patch wh_CodeLength
>c934	30 3e 3d			Name0:	.text "0>="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51383					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c937	a3					.byte (("0>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c938	10					.byte WordFlags	;wh_Flags
>c939	03					.byte 3	;wh_CodeLength
>c93a	0d					  .byte LinkDisplacement	; offset to previous nt
=$c93b					XtPtr1 ::= *
=51383					WordListLink ::= Nt0 ; remember the nt of this word for later
.c93b	b5 25		lda $25,x	ZGe:		lda DStack+1,x
.c93d	10 cf		bpl $c90e			bpl True0
.c93f	30 e2		bmi $c923			bmi False0
=6					CodeLen	.var *-XtPtr1
=$c941					Here1 = *	; remember here
>c939	06					.byte CodeLen	;patch wh_CodeLength
>c941	30 3c				Name0:	.text "0<"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51395					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c943	82					.byte (("0<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c944	10					.byte WordFlags	;wh_Flags
>c945	03					.byte 3	;wh_CodeLength
>c946	0c					  .byte LinkDisplacement	; offset to previous nt
=$c947					XtPtr1 ::= *
=51395					WordListLink ::= Nt0 ; remember the nt of this word for later
.c947	b5 25		lda $25,x	Zero_Less:	lda DStack+1,x	; MSB
.c949	10 d8		bpl $c923			bpl False0
.c94b	30 c1		bmi $c90e			bmi True0
=6					CodeLen	.var *-XtPtr1
=$c94d					Here1 = *	; remember here
>c945	06					.byte CodeLen	;patch wh_CodeLength
.c94d	4c 3b b4	jmp $b43b	Throw_Stack_05: jmp Throw_Stack
>c950	4d 69 6e			Name0:	.text "Min"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51411					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c953	c3					.byte (("Min"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>c954	50					.byte WordFlags	;wh_Flags
>c955	03					.byte 3	;wh_CodeLength
>c956	10					  .byte LinkDisplacement	; offset to previous nt
=$c957					XtPtr1 ::= *
=51411					WordListLink ::= Nt0 ; remember the nt of this word for later
.c957					Min:
.c957	e0 25		cpx #$25		cpx #-2*2+DStack0+1	; far enough below end of data stack (& not negative)?
.c959	b0 f2		bcs $c94d		bcs Throw_Stack_05
.c95b	b5 24		lda $24,x			lda DStack+0,x	; compare n1 & n2; sets V & N but not Z
.c95d	d5 26		cmp $26,x			cmp DStack+2,x
.c95f	b5 25		lda $25,x			lda DStack+1,x
.c961	f5 27		sbc $27,x			sbc DStack+3,x
.c963	70 1a		bvs $c97f			bvs Max_3	; if overflow, the sign is backwards
.c965	30 27		bmi $c98e	Min_3:		bmi Nip_NoUf	; if negative, NOS is larger and needs to be dumped
.c967	e8		inx				inx		; Drop n2
.c968	e8		inx				inx
=18					CodeLen	.var *-XtPtr1
=$c969					Here1 = *	; remember here
>c955	12					.byte CodeLen	;patch wh_CodeLength
.c969	60		rts				rts
>c96a	4d 61 78			Name0:	.text "Max"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51437					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c96d	03					.byte (("Max"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>c96e	10					.byte WordFlags	;wh_Flags
>c96f	03					.byte 3	;wh_CodeLength
>c970	1a					  .byte LinkDisplacement	; offset to previous nt
=$c971					XtPtr1 ::= *
=51437					WordListLink ::= Nt0 ; remember the nt of this word for later
.c971					Max:
.c971	e0 25		cpx #$25		cpx #-2*2+DStack0+1	; far enough below end of data stack (& not negative)?
.c973	b0 d8		bcs $c94d		bcs Throw_Stack_05
.c975	b5 24		lda $24,x			lda DStack+0,x	; Compare n1 & n2; sets V & N but not Z
.c977	d5 26		cmp $26,x			cmp DStack+2,x
.c979	b5 25		lda $25,x			lda DStack+1,x
.c97b	f5 27		sbc $27,x			sbc DStack+3,x
.c97d	70 e6		bvs $c965			bvs Min_3	; if overflow, the sign is backwards
.c97f	10 0d		bpl $c98e	Max_3:		bpl Nip_NoUf	; if negative, NOS is larger and needs to be kept
.c981	e8		inx				inx		; Drop n2
.c982	e8		inx				inx
=18					CodeLen	.var *-XtPtr1
=$c983					Here1 = *	; remember here
>c96f	12					.byte CodeLen	;patch wh_CodeLength
.c983	60		rts				rts
>c984	4e 69 70			Name0:	.text "Nip"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51463					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c987	03					.byte (("Nip"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>c988	40					.byte WordFlags	;wh_Flags
>c989	03					.byte 3	;wh_CodeLength
>c98a	1a					  .byte LinkDisplacement	; offset to previous nt
=$c98b					XtPtr1 ::= *
=51463					WordListLink ::= Nt0 ; remember the nt of this word for later
.c98b					Nip:
.c98b	20 2c b4	jsr $b42c			jsr underflow_2
.c98e	b5 24		lda $24,x	Nip_NoUf:	lda DStack+0,x	; PopYA
.c990	b4 25		ldy $25,x			ldy DStack+1,x
.c992	e8		inx				inx
.c993	e8		inx				inx
.c994	95 24		sta $24,x			sta DStack+0,x	; store over n1
.c996	94 25		sty $25,x			sty DStack+1,x
=13					CodeLen	.var *-XtPtr1
=$c998					Here1 = *	; remember here
>c989	0d					.byte CodeLen	;patch wh_CodeLength
.c998	60		rts				rts
>c999	50 69 63 6b			Name0:	.text "Pick"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51485					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c99d	64					.byte (("Pick"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>c99e	00					.byte WordFlags	;wh_Flags
>c99f	03					.byte 3	;wh_CodeLength
>c9a0	16					  .byte LinkDisplacement	; offset to previous nt
=$c9a1					XtPtr1 ::= *
=51485					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9a1					Pick:
.c9a1	16 24		asl $24,x			asl DStack+0,x	; we assume u < 128 (stack is small)
.c9a3	8a		txa				txa
.c9a4	75 24		adc $24,x			adc DStack+0,x
.c9a6	a8		tay				tay
.c9a7	b9 26 00	lda $0026,y			lda DStack+2,y
.c9aa	95 24		sta $24,x			sta DStack+0,x
.c9ac	b9 27 00	lda $0027,y			lda DStack+3,y
.c9af	95 25		sta $25,x			sta DStack+1,x
=16					CodeLen	.var *-XtPtr1
=$c9b1					Here1 = *	; remember here
>c99f	10					.byte CodeLen	;patch wh_CodeLength
.c9b1	60		rts				rts
>c9b2	43 68 61 72			Name0:	.text "Char"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51510					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9b6	44					.byte (("Char"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>c9b7	10					.byte WordFlags	;wh_Flags
>c9b8	03					.byte 3	;wh_CodeLength
>c9b9	19					  .byte LinkDisplacement	; offset to previous nt
=$c9ba					XtPtr1 ::= *
=51510					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9ba					Char:
.c9ba	20 9d ba	jsr $ba9d			jsr parse_name_check
.c9bd	e8		inx				inx		; Drop number of characters, leave addr
.c9be	e8		inx				inx
.c9bf	4c 48 cd	jmp $cd48			jmp C_Fetch	; get character ( C@ )
=8					CodeLen	.var *-XtPtr1
=$c9c2					Here1 = *	; remember here
>c9b8	08					.byte CodeLen	;patch wh_CodeLength
>c9c2	5b 43 68 61 72 5d		Name0:	.text "[Char]"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=51528					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9c8	a6					.byte (("[Char]"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>c9c9	1c					.byte WordFlags	;wh_Flags
>c9ca	03					.byte 3	;wh_CodeLength
>c9cb	12					  .byte LinkDisplacement	; offset to previous nt
=$c9cc					XtPtr1 ::= *
=51528					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9cc	20 ba c9	jsr $c9ba	Bracket_Char:	jsr Char
.c9cf	4c 63 b7	jmp $b763			jmp Literal
=6					CodeLen	.var *-XtPtr1
=$c9d2					Here1 = *	; remember here
>c9ca	06					.byte CodeLen	;patch wh_CodeLength
>c9d2	43 68 61 72 2b			Name0:	.text "Char+"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=51543					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9d7	65					.byte (("Char+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c9d8	10					.byte WordFlags	;wh_Flags
>c9d9	03					.byte 3	;wh_CodeLength
>c9da	0f					  .byte LinkDisplacement	; offset to previous nt
=$c9db					XtPtr1 ::= *
=51543					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9db	4c 55 ca	jmp $ca55	Char_Plus:	jmp One_Plus
=3					CodeLen	.var *-XtPtr1
=$c9de					Here1 = *	; remember here
>c9d9	03					.byte CodeLen	;patch wh_CodeLength
>c9de	43 68 61 72 73			Name0:	.text "Chars"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=51555					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9e3	65					.byte (("Chars"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$20					WordFlags ::= AN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c9e4	20					.byte WordFlags	;wh_Flags
>c9e5	03					.byte 3	;wh_CodeLength
>c9e6	0c					  .byte LinkDisplacement	; offset to previous nt
=$c9e7					XtPtr1 ::= *
=51555					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9e7					Chars:
=0					CodeLen	.var *-XtPtr1
=$c9e7					Here1 = *	; remember here
>c9e5	00					.byte CodeLen	;patch wh_CodeLength
.c9e7	60		rts				rts
>c9e8	43 65 6c 6c 73			Name0:	.text "Cells"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=51565					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9ed	65					.byte (("Cells"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>c9ee	40					.byte WordFlags	;wh_Flags
>c9ef	03					.byte 3	;wh_CodeLength
>c9f0	0a					  .byte LinkDisplacement	; offset to previous nt
=$c9f1					XtPtr1 ::= *
=51565					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9f1	20 18 b4	jsr $b418	Cells:		jsr underflow_1
.c9f4	16 24		asl $24,x			asl DStack+0,x		; 2*
.c9f6	36 25		rol $25,x			rol DStack+1,x
=7					CodeLen	.var *-XtPtr1
=$c9f8					Here1 = *	; remember here
>c9ef	07					.byte CodeLen	;patch wh_CodeLength
.c9f8	60		rts				rts
>c9f9	43 65 6c 6c 2b			Name0:	.text "Cell+"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=51582					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9fe	65					.byte (("Cell+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>c9ff	40					.byte WordFlags	;wh_Flags
>ca00	03					.byte 3	;wh_CodeLength
>ca01	11					  .byte LinkDisplacement	; offset to previous nt
=$ca02					XtPtr1 ::= *
=51582					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca02	20 18 b4	jsr $b418	Cell_Plus:	jsr underflow_1
.ca05	a9 02		lda #$02	Cell_Plus_NoUf:	lda #2		; our cells are 2 bytes
.ca07					Plus_A:
.ca07	18		clc				clc
.ca08	75 24		adc $24,x			adc DStack+0,x
.ca0a	95 24		sta $24,x			sta DStack+0,x
.ca0c	90 02		bcc $ca10			bcc +
.ca0e	f6 25		inc $25,x			inc DStack+1,x
.ca10					+
=14					CodeLen	.var *-XtPtr1
=$ca10					Here1 = *	; remember here
>ca00	0e					.byte CodeLen	;patch wh_CodeLength
.ca10	60		rts				rts
.ca11					Nos_Plus_A:
.ca11	18		clc				clc
.ca12	75 26		adc $26,x			adc DStack+2,x
.ca14	95 26		sta $26,x			sta DStack+2,x
.ca16	90 02		bcc $ca1a			bcc +
.ca18	f6 27		inc $27,x			inc DStack+3,x
.ca1a	60		rts		+		rts
>ca1b	48 65 72 65			Name0:	.text "Here"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51615					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca1f	a4					.byte (("Here"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>ca20	10					.byte WordFlags	;wh_Flags
>ca21	03					.byte 3	;wh_CodeLength
>ca22	21					  .byte LinkDisplacement	; offset to previous nt
=$ca23					XtPtr1 ::= *
=51615					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca23	a5 00		lda $00		Here:		lda cp+0
.ca25	a4 01		ldy $01				ldy cp+1
.ca27	4c ae b7	jmp $b7ae			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$ca2a					Here1 = *	; remember here
>ca21	07					.byte CodeLen	;patch wh_CodeLength
>ca2a	31 2d				Name0:	.text "1-"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51628					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca2c	a2					.byte (("1-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>ca2d	40					.byte WordFlags	;wh_Flags
>ca2e	03					.byte 3	;wh_CodeLength
>ca2f	0d					  .byte LinkDisplacement	; offset to previous nt
=$ca30					XtPtr1 ::= *
=51628					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca30	20 18 b4	jsr $b418	One_Minus:	jsr underflow_1
.ca33					One_Minus_NoUf:
.ca33	b5 24		lda $24,x			lda DStack+0,x
.ca35	d0 02		bne $ca39			bne +
.ca37	d6 25		dec $25,x			dec DStack+1,x
.ca39	d6 24		dec $24,x	+		dec DStack+0,x
=11					CodeLen	.var *-XtPtr1
=$ca3b					Here1 = *	; remember here
>ca2e	0b					.byte CodeLen	;patch wh_CodeLength
.ca3b	60		rts				rts
.ca3c					NOS_One_Minus:
.ca3c	b5 26		lda $26,x			lda DStack+2,x
.ca3e	d0 02		bne $ca42			bne +
.ca40	d6 27		dec $27,x			dec DStack+3,x
.ca42	d6 26		dec $26,x	+		dec DStack+2,x
.ca44	60		rts				rts
.ca45					Minus_A:
.ca45	18		clc				clc
.ca46	75 24		adc $24,x			adc DStack+0,x
.ca48	95 24		sta $24,x			sta DStack+0,x
.ca4a	b0 02		bcs $ca4e			bcs +
.ca4c	d6 25		dec $25,x			dec DStack+1,x
.ca4e	60		rts		+		rts
>ca4f	31 2b				Name0:	.text "1+"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51665					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca51	62					.byte (("1+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>ca52	40					.byte WordFlags	;wh_Flags
>ca53	03					.byte 3	;wh_CodeLength
>ca54	25					  .byte LinkDisplacement	; offset to previous nt
=$ca55					XtPtr1 ::= *
=51665					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca55	20 18 b4	jsr $b418	One_Plus:	jsr underflow_1
.ca58	f6 24		inc $24,x			inc DStack+0,x
.ca5a	d0 02		bne $ca5e			bne +
.ca5c	f6 25		inc $25,x			inc DStack+1,x
.ca5e					+
=9					CodeLen	.var *-XtPtr1
=$ca5e					Here1 = *	; remember here
>ca53	09					.byte CodeLen	;patch wh_CodeLength
.ca5e	60		rts				rts
.ca5f					NOS_One_Plus:
.ca5f	f6 26		inc $26,x			inc DStack+2,x
.ca61	d0 02		bne $ca65			bne +
.ca63	f6 27		inc $27,x			inc DStack+3,x
.ca65	60		rts		+		rts
>ca66	55 4d 2b			Name0:	.text "UM+"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51689					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca69	63					.byte (("UM+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>ca6a	00					.byte WordFlags	;wh_Flags
>ca6b	03					.byte 3	;wh_CodeLength
>ca6c	18					  .byte LinkDisplacement	; offset to previous nt
=$ca6d					XtPtr1 ::= *
=51689					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca6d	20 ef b3	jsr $b3ef	UMPlus:		jsr PopYA
.ca70	18		clc				clc		; add n to d1.lo
.ca71	75 26		adc $26,x			adc DStack+2,x
.ca73	95 26		sta $26,x			sta DStack+2,x
.ca75	98		tya				tya
.ca76	75 27		adc $27,x			adc DStack+3,x
.ca78	95 27		sta $27,x			sta DStack+3,x
.ca7a	90 06		bcc $ca82			bcc +		; propagate carry thru d1.hi
.ca7c	f6 24		inc $24,x			inc DStack+0,x
.ca7e	d0 02		bne $ca82			bne +
.ca80	f6 25		inc $25,x			inc DStack+1,x
.ca82					+
=21					CodeLen	.var *-XtPtr1
=$ca82					Here1 = *	; remember here
>ca6b	15					.byte CodeLen	;patch wh_CodeLength
.ca82	60		rts				rts
>ca83	4d 2b				Name0:	.text "M+"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51717					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca85	62					.byte (("M+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>ca86	10					.byte WordFlags	;wh_Flags
>ca87	03					.byte 3	;wh_CodeLength
>ca88	1c					  .byte LinkDisplacement	; offset to previous nt
=$ca89					XtPtr1 ::= *
=51717					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca89	20 6d ca	jsr $ca6d	MPlus:		jsr UMPlus
.ca8c	98		tya				tya		; if n negative
.ca8d	30 a4		bmi $ca33			bmi One_Minus_NoUf ;   decrement d1.hi
=6					CodeLen	.var *-XtPtr1
=$ca8f					Here1 = *	; remember here
>ca87	06					.byte CodeLen	;patch wh_CodeLength
.ca8f	60		rts				rts
>ca90	44 32 2a			Name0:	.text "D2*"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51731					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca93	43					.byte (("D2*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>ca94	40					.byte WordFlags	;wh_Flags
>ca95	03					.byte 3	;wh_CodeLength
>ca96	0e					  .byte LinkDisplacement	; offset to previous nt
=$ca97					XtPtr1 ::= *
=51731					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca97	20 2c b4	jsr $b42c	D2Star:		jsr underflow_2
.ca9a	16 26		asl $26,x			asl DStack+2,x
.ca9c	36 27		rol $27,x			rol DStack+3,x
.ca9e	36 24		rol $24,x			rol DStack+0,x
.caa0	36 25		rol $25,x			rol DStack+1,x
=11					CodeLen	.var *-XtPtr1
=$caa2					Here1 = *	; remember here
>ca95	0b					.byte CodeLen	;patch wh_CodeLength
.caa2	60		rts				rts
>caa3	44 32 2f			Name0:	.text "D2/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51750					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>caa6	e3					.byte (("D2/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>caa7	40					.byte WordFlags	;wh_Flags
>caa8	03					.byte 3	;wh_CodeLength
>caa9	13					  .byte LinkDisplacement	; offset to previous nt
=$caaa					XtPtr1 ::= *
=51750					WordListLink ::= Nt0 ; remember the nt of this word for later
.caaa	20 2c b4	jsr $b42c	D2Slash:	jsr underflow_2
.caad	b5 25		lda $25,x			lda DStack+1,x		; setup for sign-extended shift right
.caaf	0a		asl a				asl a
.cab0	76 25		ror $25,x	D2SlashU:	ror DStack+1,x
.cab2	76 24		ror $24,x			ror DStack+0,x
.cab4	76 27		ror $27,x			ror DStack+3,x
.cab6	76 26		ror $26,x			ror DStack+2,x
=14					CodeLen	.var *-XtPtr1
=$cab8					Here1 = *	; remember here
>caa8	0e					.byte CodeLen	;patch wh_CodeLength
.cab8	60		rts				rts
>cab9	55 44 32 2f			Name0:	.text "UD2/"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51773					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cabd	e4					.byte (("UD2/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>cabe	50					.byte WordFlags	;wh_Flags
>cabf	03					.byte 3	;wh_CodeLength
>cac0	17					  .byte LinkDisplacement	; offset to previous nt
=$cac1					XtPtr1 ::= *
=51773					WordListLink ::= Nt0 ; remember the nt of this word for later
.cac1	20 2c b4	jsr $b42c	DU2Slash:	jsr underflow_2
.cac4	18		clc				clc
.cac5	90 e9		bcc $cab0			bcc D2SlashU
=6					CodeLen	.var *-XtPtr1
=$cac7					Here1 = *	; remember here
>cabf	06					.byte CodeLen	;patch wh_CodeLength
>cac7	32 2a				Name0:	.text "2*"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51785					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cac9	42					.byte (("2*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>caca	40					.byte WordFlags	;wh_Flags
>cacb	03					.byte 3	;wh_CodeLength
>cacc	0c					  .byte LinkDisplacement	; offset to previous nt
=$cacd					XtPtr1 ::= *
=51785					WordListLink ::= Nt0 ; remember the nt of this word for later
.cacd					Two_Star:
.cacd	20 18 b4	jsr $b418			jsr underflow_1
.cad0	16 24		asl $24,x			asl DStack+0,x
.cad2	36 25		rol $25,x			rol DStack+1,x
=7					CodeLen	.var *-XtPtr1
=$cad4					Here1 = *	; remember here
>cacb	07					.byte CodeLen	;patch wh_CodeLength
.cad4	60		rts				rts
>cad5	32 2f				Name0:	.text "2/"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51799					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cad7	e2					.byte (("2/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>cad8	40					.byte WordFlags	;wh_Flags
>cad9	03					.byte 3	;wh_CodeLength
>cada	0e					  .byte LinkDisplacement	; offset to previous nt
=$cadb					XtPtr1 ::= *
=51799					WordListLink ::= Nt0 ; remember the nt of this word for later
.cadb					Two_Slash:
.cadb	20 18 b4	jsr $b418			jsr underflow_1
.cade	b5 25		lda $25,x			lda DStack+1,x		; load sign into carry, for signed shift
.cae0	0a		asl a				asl
.cae1	76 25		ror $25,x			ror DStack+1,x
.cae3	76 24		ror $24,x			ror DStack+0,x
=10					CodeLen	.var *-XtPtr1
=$cae5					Here1 = *	; remember here
>cad9	0a					.byte CodeLen	;patch wh_CodeLength
.cae5	60		rts				rts
>cae6	55 32 2f			Name0:	.text "U2/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51817					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cae9	e3					.byte (("U2/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>caea	40					.byte WordFlags	;wh_Flags
>caeb	03					.byte 3	;wh_CodeLength
>caec	12					  .byte LinkDisplacement	; offset to previous nt
=$caed					XtPtr1 ::= *
=51817					WordListLink ::= Nt0 ; remember the nt of this word for later
.caed					UTwo_Slash:
.caed	20 18 b4	jsr $b418			jsr underflow_1
.caf0	56 25		lsr $25,x			lsr DStack+1,x
.caf2	76 24		ror $24,x			ror DStack+0,x
=7					CodeLen	.var *-XtPtr1
=$caf4					Here1 = *	; remember here
>caeb	07					.byte CodeLen	;patch wh_CodeLength
.caf4	60		rts				rts
>caf5	44 52 53 68 69 66 74		Name0:	.text "DRShift"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=51836					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cafc	87					.byte (("DRShift"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cafd	00					.byte WordFlags	;wh_Flags
>cafe	03					.byte 3	;wh_CodeLength
>caff	13					  .byte LinkDisplacement	; offset to previous nt
=$cb00					XtPtr1 ::= *
=51836					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb00	20 d4 b3	jsr $b3d4	DRShift:	jsr PopA	; pop u
.cb03	a8		tay		DRShiftA:	tay
.cb04	f0 0e		beq $cb14			beq _9
.cb06	b5 25		lda $25,x			lda DStack+1,x
.cb08	4a		lsr a		_2:		lsr a
.cb09	76 24		ror $24,x			ror DStack+0,x
.cb0b	76 27		ror $27,x			ror DStack+3,x
.cb0d	76 26		ror $26,x			ror DStack+2,x
.cb0f	88		dey				dey
.cb10	d0 f6		bne $cb08			bne _2
.cb12	95 25		sta $25,x			sta DStack+1,x
.cb14					_9:
=20					CodeLen	.var *-XtPtr1
=$cb14					Here1 = *	; remember here
>cafe	14					.byte CodeLen	;patch wh_CodeLength
.cb14	60		rts				rts
>cb15	52 53 68 69 66 74		Name0:	.text "RShift"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=51867					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb1b	86					.byte (("RShift"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>cb1c	00					.byte WordFlags	;wh_Flags
>cb1d	03					.byte 3	;wh_CodeLength
>cb1e	1f					  .byte LinkDisplacement	; offset to previous nt
=$cb1f					XtPtr1 ::= *
=51867					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb1f	20 dd b3	jsr $b3dd	RShift:		jsr PopA2	; pop u, check for 2 params
.cb22	a8		tay		RShift_A:	tay		; get shift count
.cb23	f0 0a		beq $cb2f			beq _done
.cb25	b5 25		lda $25,x			lda DStack+1,x
.cb27	4a		lsr a		_loop:		lsr a
.cb28	76 24		ror $24,x			ror DStack+0,x
.cb2a	88		dey				dey
.cb2b	d0 fa		bne $cb27			bne _loop
.cb2d	95 25		sta $25,x			sta DStack+1,x
.cb2f					_done:
=16					CodeLen	.var *-XtPtr1
=$cb2f					Here1 = *	; remember here
>cb1d	10					.byte CodeLen	;patch wh_CodeLength
.cb2f	60		rts				rts
>cb30	4c 53 68 69 66 74		Name0:	.text "LShift"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=51894					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb36	86					.byte (("LShift"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>cb37	00					.byte WordFlags	;wh_Flags
>cb38	03					.byte 3	;wh_CodeLength
>cb39	1b					  .byte LinkDisplacement	; offset to previous nt
=$cb3a					XtPtr1 ::= *
=51894					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb3a	20 dd b3	jsr $b3dd	LShift:		jsr PopA2	; pop u, check for 2 params
.cb3d	a8		tay		LShift_A:	tay		; get shift count
.cb3e	f0 0a		beq $cb4a			beq _done
.cb40	b5 25		lda $25,x			lda DStack+1,x
.cb42	16 24		asl $24,x	_loop:		asl DStack+0,x
.cb44	2a		rol a				rol a
.cb45	88		dey				dey
.cb46	d0 fa		bne $cb42			bne _loop
.cb48	95 25		sta $25,x			sta DStack+1,x
.cb4a					_done:
=16					CodeLen	.var *-XtPtr1
=$cb4a					Here1 = *	; remember here
>cb38	10					.byte CodeLen	;patch wh_CodeLength
.cb4a	60		rts				rts
>cb4b	41 6e 64			Name0:	.text "And"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51918					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb4e	83					.byte (("And"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cb4f	40					.byte WordFlags	;wh_Flags
>cb50	03					.byte 3	;wh_CodeLength
>cb51	18					  .byte LinkDisplacement	; offset to previous nt
=$cb52					XtPtr1 ::= *
=51918					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb52					And2:
.cb52	20 2c b4	jsr $b42c			jsr underflow_2
.cb55	b5 24		lda $24,x			lda DStack+0,x
.cb57	35 26		and $26,x			and DStack+2,x
.cb59	95 26		sta $26,x			sta DStack+2,x
.cb5b	b5 25		lda $25,x			lda DStack+1,x
.cb5d	35 27		and $27,x			and DStack+3,x
.cb5f	95 27		sta $27,x			sta DStack+3,x
.cb61	e8		inx				inx		; Drop n2
.cb62	e8		inx				inx
=17					CodeLen	.var *-XtPtr1
=$cb63					Here1 = *	; remember here
>cb50	11					.byte CodeLen	;patch wh_CodeLength
.cb63	60		rts				rts
>cb64	4f 72				Name0:	.text "Or"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51942					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb66	42					.byte (("Or"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cb67	40					.byte WordFlags	;wh_Flags
>cb68	03					.byte 3	;wh_CodeLength
>cb69	18					  .byte LinkDisplacement	; offset to previous nt
=$cb6a					XtPtr1 ::= *
=51942					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb6a					Or:
.cb6a	20 2c b4	jsr $b42c			jsr underflow_2
.cb6d	b5 24		lda $24,x			lda DStack+0,x
.cb6f	15 26		ora $26,x			ora DStack+2,x
.cb71	95 26		sta $26,x			sta DStack+2,x
.cb73	b5 25		lda $25,x			lda DStack+1,x
.cb75	15 27		ora $27,x			ora DStack+3,x
.cb77	95 27		sta $27,x			sta DStack+3,x
.cb79	e8		inx				inx		; Drop n2
.cb7a	e8		inx				inx
=17					CodeLen	.var *-XtPtr1
=$cb7b					Here1 = *	; remember here
>cb68	11					.byte CodeLen	;patch wh_CodeLength
.cb7b	60		rts				rts
>cb7c	58 6f 72			Name0:	.text "Xor"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51967					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb7f	43					.byte (("Xor"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>cb80	40					.byte WordFlags	;wh_Flags
>cb81	03					.byte 3	;wh_CodeLength
>cb82	19					  .byte LinkDisplacement	; offset to previous nt
=$cb83					XtPtr1 ::= *
=51967					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb83					Xor:
.cb83	20 2c b4	jsr $b42c			jsr underflow_2
.cb86	b5 24		lda $24,x			lda DStack+0,x
.cb88	55 26		eor $26,x			eor DStack+2,x
.cb8a	95 26		sta $26,x			sta DStack+2,x
.cb8c	b5 25		lda $25,x			lda DStack+1,x
.cb8e	55 27		eor $27,x			eor DStack+3,x
.cb90	95 27		sta $27,x			sta DStack+3,x
.cb92	e8		inx				inx		; Drop n2
.cb93	e8		inx				inx
=17					CodeLen	.var *-XtPtr1
=$cb94					Here1 = *	; remember here
>cb81	11					.byte CodeLen	;patch wh_CodeLength
.cb94	60		rts				rts
>cb95	2b				Name0:	.text "+"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=51990					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb96	61					.byte (("+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>cb97	40					.byte WordFlags	;wh_Flags
>cb98	03					.byte 3	;wh_CodeLength
>cb99	17					  .byte LinkDisplacement	; offset to previous nt
=$cb9a					XtPtr1 ::= *
=51990					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb9a					Plus:
.cb9a	20 2c b4	jsr $b42c			jsr underflow_2
.cb9d	18		clc				clc
.cb9e	b5 24		lda $24,x			lda DStack+0,x		; LSB
.cba0	75 26		adc $26,x			adc DStack+2,x
.cba2	95 26		sta $26,x			sta DStack+2,x
.cba4	b5 25		lda $25,x			lda DStack+1,x		; MSB. No CLC, conserve carry bit
.cba6	75 27		adc $27,x			adc DStack+3,x
.cba8	95 27		sta $27,x			sta DStack+3,x
.cbaa	e8		inx				inx
.cbab	e8		inx				inx
=18					CodeLen	.var *-XtPtr1
=$cbac					Here1 = *	; remember here
>cb98	12					.byte CodeLen	;patch wh_CodeLength
.cbac	60		rts				rts
>cbad	2d				Name0:	.text "-"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52014					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbae	a1					.byte (("-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cbaf	40					.byte WordFlags	;wh_Flags
>cbb0	03					.byte 3	;wh_CodeLength
>cbb1	18					  .byte LinkDisplacement	; offset to previous nt
=$cbb2					XtPtr1 ::= *
=52014					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbb2					Minus:
.cbb2	20 2c b4	jsr $b42c			jsr underflow_2
.cbb5	38		sec				sec
.cbb6	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cbb8	f5 24		sbc $24,x			sbc DStack+0,x
.cbba	95 26		sta $26,x			sta DStack+2,x
.cbbc	b5 27		lda $27,x			lda DStack+3,x	; MSB
.cbbe	f5 25		sbc $25,x			sbc DStack+1,x
.cbc0	95 27		sta $27,x			sta DStack+3,x
.cbc2	e8		inx				inx		; Drop n2
.cbc3	e8		inx				inx
=18					CodeLen	.var *-XtPtr1
=$cbc4					Here1 = *	; remember here
>cbb0	12					.byte CodeLen	;patch wh_CodeLength
.cbc4	60		rts				rts
>cbc5	2e				Name0:	.text "."	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52038					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbc6	c1					.byte (("."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cbc7	10					.byte WordFlags	;wh_Flags
>cbc8	03					.byte 3	;wh_CodeLength
>cbc9	18					  .byte LinkDisplacement	; offset to previous nt
=$cbca					XtPtr1 ::= *
=52038					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbca	b5 25		lda $25,x	Dot:		lda DStack+1,x		; ( n )	save sign
.cbcc	08		php				php
.cbcd	20 bd c6	jsr $c6bd			jsr Abs			; ( u )
.cbd0	20 eb b7	jsr $b7eb			jsr Zero		; ( ud )	u>d  cvt u to ud
.cbd3	4c e2 cb	jmp $cbe2			jmp fmt_d3
=12					CodeLen	.var *-XtPtr1
=$cbd6					Here1 = *	; remember here
>cbc8	0c					.byte CodeLen	;patch wh_CodeLength
>cbd6	44 2e				Name0:	.text "D."	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52056					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbd8	c2					.byte (("D."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cbd9	10					.byte WordFlags	;wh_Flags
>cbda	03					.byte 3	;wh_CodeLength
>cbdb	12					  .byte LinkDisplacement	; offset to previous nt
=$cbdc					XtPtr1 ::= *
=52056					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbdc	b5 25		lda $25,x	D_Dot:		lda DStack+1,x		; save sign
.cbde	08		php				php
.cbdf	20 f0 c6	jsr $c6f0			jsr DAbs
.cbe2	20 dd ab	jsr $abdd	fmt_d3:		jsr Less_Number_Sign	; ( ud )	start formatting
.cbe5	20 4c ac	jsr $ac4c			jsr Number_sign_s	; ( ud )	do all digits
.cbe8	28		plp				plp			; ( ud )	do sign
.cbe9	20 66 ac	jsr $ac66			jsr Sign_P		; ( ud )
.cbec	20 e9 ab	jsr $abe9			jsr Number_sign_greater	; ( addr u )	end formatting
.cbef	20 d3 cd	jsr $cdd3			jsr Type
.cbf2	4c c7 cd	jmp $cdc7			jmp Space
=25					CodeLen	.var *-XtPtr1
=$cbf5					Here1 = *	; remember here
>cbda	19					.byte CodeLen	;patch wh_CodeLength
>cbf5	55 2e				Name0:	.text "U."	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52087					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbf7	c2					.byte (("U."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>cbf8	50					.byte WordFlags	;wh_Flags
>cbf9	03					.byte 3	;wh_CodeLength
>cbfa	1f					  .byte LinkDisplacement	; offset to previous nt
=$cbfb					XtPtr1 ::= *
=52087					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbfb	20 18 b4	jsr $b418	U_Dot:		jsr underflow_1
.cbfe	20 14 cc	jsr $cc14			jsr print_u
.cc01	4c c7 cd	jmp $cdc7			jmp Space
=9					CodeLen	.var *-XtPtr1
=$cc04					Here1 = *	; remember here
>cbf9	09					.byte CodeLen	;patch wh_CodeLength
>cc04	55 44 2e			Name0:	.text "UD."	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52103					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc07	c3					.byte (("UD."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>cc08	50					.byte WordFlags	;wh_Flags
>cc09	03					.byte 3	;wh_CodeLength
>cc0a	10					  .byte LinkDisplacement	; offset to previous nt
=$cc0b					XtPtr1 ::= *
=52103					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc0b	20 2c b4	jsr $b42c	UD_Dot:		jsr underflow_2 ; double number
.cc0e	20 17 cc	jsr $cc17			jsr print_ud
.cc11	4c c7 cd	jmp $cdc7			jmp Space
=9					CodeLen	.var *-XtPtr1
=$cc14					Here1 = *	; remember here
>cc09	09					.byte CodeLen	;patch wh_CodeLength
.cc14					print_u:
.cc14	20 eb b7	jsr $b7eb			jsr Zero			; convert to ud
.cc17					print_ud:
.cc17	20 dd ab	jsr $abdd			jsr Less_Number_Sign		; <#	start formatting
.cc1a	20 4c ac	jsr $ac4c			jsr Number_sign_s		; #S	do all digits
.cc1d	20 e9 ab	jsr $abe9			jsr Number_sign_greater		; #>	end formatting
.cc20	4c d3 cd	jmp $cdd3			jmp Type
>cc23	55 2e 52			Name0:	.text "U.R"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52134					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc26	43					.byte (("U.R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>cc27	10					.byte WordFlags	;wh_Flags
>cc28	03					.byte 3	;wh_CodeLength
>cc29	1f					  .byte LinkDisplacement	; offset to previous nt
=$cc2a					XtPtr1 ::= *
=52134					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc2a	20 d4 b3	jsr $b3d4	U_Dot_R:	jsr PopA		; save field width
.cc2d	48		pha		U_Dot_R_A:	pha
.cc2e	20 eb b7	jsr $b7eb			jsr Zero		; u>d  cvt u to ud
.cc31	4c 40 cc	jmp $cc40			jmp fmt_udr3
=10					CodeLen	.var *-XtPtr1
=$cc34					Here1 = *	; remember here
>cc28	0a					.byte CodeLen	;patch wh_CodeLength
>cc34	55 44 2e 52			Name0:	.text "UD.R"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52152					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc38	44					.byte (("UD.R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cc39	10					.byte WordFlags	;wh_Flags
>cc3a	03					.byte 3	;wh_CodeLength
>cc3b	12					  .byte LinkDisplacement	; offset to previous nt
=$cc3c					XtPtr1 ::= *
=52152					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc3c	20 d4 b3	jsr $b3d4	UD_Dot_R:	jsr PopA			; save field width
.cc3f	48		pha		UD_Dot_R_A:	pha
.cc40	20 dd ab	jsr $abdd	fmt_udr3:	jsr Less_Number_Sign		; start formatted
.cc43	20 4c ac	jsr $ac4c			jsr Number_sign_s		; do all digits
.cc46	20 e9 ab	jsr $abe9	fmt_r:		jsr Number_sign_greater		; finish formatted
.cc49	68		pla				pla				; recover field width
.cc4a	38		sec				sec				; do leading spaces
.cc4b	f5 24		sbc $24,x			sbc DStack+0,x
.cc4d	90 06		bcc $cc55			bcc +
.cc4f	20 dd b7	jsr $b7dd			jsr PushZA
.cc52	20 8e c4	jsr $c48e			jsr Spaces
.cc55	4c d3 cd	jmp $cdd3	+		jmp Type			; type formatted
=28					CodeLen	.var *-XtPtr1
=$cc58					Here1 = *	; remember here
>cc3a	1c					.byte CodeLen	;patch wh_CodeLength
>cc58	2e 52				Name0:	.text ".R"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52186					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc5a	42					.byte ((".R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>cc5b	10					.byte WordFlags	;wh_Flags
>cc5c	03					.byte 3	;wh_CodeLength
>cc5d	22					  .byte LinkDisplacement	; offset to previous nt
=$cc5e					XtPtr1 ::= *
=52186					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc5e	20 d4 b3	jsr $b3d4	Dot_R:		jsr PopA		; save field width
.cc61	48		pha		Dot_R_A:	pha
.cc62	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cc64	08		php				php
.cc65	20 bd c6	jsr $c6bd			jsr Abs
.cc68	20 eb b7	jsr $b7eb			jsr Zero		; u>d  cvt u to ud
.cc6b	4c 7f cc	jmp $cc7f			jmp fmt_dr3
=16					CodeLen	.var *-XtPtr1
=$cc6e					Here1 = *	; remember here
>cc5c	10					.byte CodeLen	;patch wh_CodeLength
>cc6e	44 2e 52			Name0:	.text "D.R"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52209					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc71	43					.byte (("D.R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>cc72	10					.byte WordFlags	;wh_Flags
>cc73	03					.byte 3	;wh_CodeLength
>cc74	17					  .byte LinkDisplacement	; offset to previous nt
=$cc75					XtPtr1 ::= *
=52209					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc75	20 d4 b3	jsr $b3d4	D_Dot_R:	jsr PopA		; save field width
.cc78	48		pha		D_Dot_R_A:	pha
.cc79	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cc7b	08		php				php
.cc7c	20 f0 c6	jsr $c6f0			jsr DAbs
.cc7f	20 dd ab	jsr $abdd	fmt_dr3:	jsr Less_Number_Sign	; start formatted output
.cc82	20 4c ac	jsr $ac4c			jsr Number_sign_s	; do all digits
.cc85	28		plp				plp			; do the sign
.cc86	20 66 ac	jsr $ac66			jsr Sign_P
.cc89	4c 46 cc	jmp $cc46			jmp fmt_r
=23					CodeLen	.var *-XtPtr1
=$cc8c					Here1 = *	; remember here
>cc73	17					.byte CodeLen	;patch wh_CodeLength
>cc8c	3f				Name0:	.text "?"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52237					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc8d	e1					.byte (("?"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>cc8e	10					.byte WordFlags	;wh_Flags
>cc8f	03					.byte 3	;wh_CodeLength
>cc90	1c					  .byte LinkDisplacement	; offset to previous nt
=$cc91					XtPtr1 ::= *
=52237					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc91					Question:
.cc91	20 93 ce	jsr $ce93			jsr Fetch
.cc94	4c ca cb	jmp $cbca			jmp Dot
=6					CodeLen	.var *-XtPtr1
=$cc97					Here1 = *	; remember here
>cc8f	06					.byte CodeLen	;patch wh_CodeLength
>cc97	32 44 75 70			Name0:	.text "2Dup"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52251					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc9b	04					.byte (("2Dup"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>cc9c	40					.byte WordFlags	;wh_Flags
>cc9d	03					.byte 3	;wh_CodeLength
>cc9e	0e					  .byte LinkDisplacement	; offset to previous nt
=$cc9f					XtPtr1 ::= *
=52251					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc9f					Two_Dup:
.cc9f	20 2c b4	jsr $b42c			jsr underflow_2
.cca2	ca		dex				dex
.cca3	ca		dex				dex
.cca4	ca		dex				dex
.cca5	ca		dex				dex
.cca6	b5 28		lda $28,x			lda DStack+4,x	; TOS
.cca8	95 24		sta $24,x			sta DStack+0,x
.ccaa	b5 29		lda $29,x			lda DStack+5,x
.ccac	95 25		sta $25,x			sta DStack+1,x
.ccae	b5 2a		lda $2a,x			lda DStack+6,x	; NOS
.ccb0	95 26		sta $26,x			sta DStack+2,x
.ccb2	b5 2b		lda $2b,x			lda DStack+7,x
.ccb4	95 27		sta $27,x			sta DStack+3,x
=23					CodeLen	.var *-XtPtr1
=$ccb6					Here1 = *	; remember here
>cc9d	17					.byte CodeLen	;patch wh_CodeLength
.ccb6	60		rts				rts
>ccb7	54 75 63 6b			Name0:	.text "Tuck"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52283					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ccbb	64					.byte (("Tuck"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>ccbc	40					.byte WordFlags	;wh_Flags
>ccbd	03					.byte 3	;wh_CodeLength
>ccbe	20					  .byte LinkDisplacement	; offset to previous nt
=$ccbf					XtPtr1 ::= *
=52283					WordListLink ::= Nt0 ; remember the nt of this word for later
.ccbf					Tuck:
.ccbf	20 2c b4	jsr $b42c			jsr underflow_2
.ccc2	ca		dex				dex
.ccc3	ca		dex				dex
.ccc4	b4 28		ldy $28,x			ldy DStack+4,x	; LSB
.ccc6	b5 26		lda $26,x			lda DStack+2,x
.ccc8	95 28		sta $28,x			sta DStack+4,x
.ccca	94 26		sty $26,x			sty DStack+2,x
.cccc	95 24		sta $24,x			sta DStack+0,x
.ccce	b4 29		ldy $29,x			ldy DStack+5,x	; MSB
.ccd0	b5 27		lda $27,x			lda DStack+3,x
.ccd2	95 29		sta $29,x			sta DStack+5,x
.ccd4	94 27		sty $27,x			sty DStack+3,x
.ccd6	95 25		sta $25,x			sta DStack+1,x
=25					CodeLen	.var *-XtPtr1
=$ccd8					Here1 = *	; remember here
>ccbd	19					.byte CodeLen	;patch wh_CodeLength
.ccd8	60		rts				rts
>ccd9	43 2c				Name0:	.text "C,"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52315					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ccdb	82					.byte (("C,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>ccdc	10					.byte WordFlags	;wh_Flags
>ccdd	03					.byte 3	;wh_CodeLength
>ccde	20					  .byte LinkDisplacement	; offset to previous nt
=$ccdf					XtPtr1 ::= *
=52315					WordListLink ::= Nt0 ; remember the nt of this word for later
.ccdf	20 d4 b3	jsr $b3d4	C_Comma:	jsr PopA	; pop c, with underflow check
.cce2					C_Comma_A:
.cce2	94 23		sty $23,x			sty DStack-1,x	; save Y
.cce4	a0 00		ldy #$00			ldy #0		; store A
.cce6	91 00		sta ($00),y			sta (cp),y
.cce8	e6 00		inc $00				inc cp+0	; increment cp
.ccea	d0 02		bne $ccee			bne +
.ccec	e6 01		inc $01				inc cp+1
.ccee					+
.ccee	b4 23		ldy $23,x			ldy DStack-1,x	; restore Y
=17					CodeLen	.var *-XtPtr1
=$ccf0					Here1 = *	; remember here
>ccdd	11					.byte CodeLen	;patch wh_CodeLength
.ccf0	60		rts				rts
>ccf1	2c				Name0:	.text ","	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52338					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ccf2	81					.byte ((","[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>ccf3	10					.byte WordFlags	;wh_Flags
>ccf4	03					.byte 3	;wh_CodeLength
>ccf5	17					  .byte LinkDisplacement	; offset to previous nt
=$ccf6					XtPtr1 ::= *
=52338					WordListLink ::= Nt0 ; remember the nt of this word for later
.ccf6	20 ef b3	jsr $b3ef	Comma:		jsr PopYA	; pop n, with underflow check
.ccf9					Comma_YA:
.ccf9	20 e2 cc	jsr $cce2			jsr C_Comma_A	; compile LSB
.ccfc	98		tya				tya		; compile MSB
.ccfd	4c e2 cc	jmp $cce2			jmp C_Comma_A
=10					CodeLen	.var *-XtPtr1
=$cd00					Here1 = *	; remember here
>ccf4	0a					.byte CodeLen	;patch wh_CodeLength
>cd00	32 2c				Name0:	.text "2,"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52354					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd02	82					.byte (("2,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>cd03	10					.byte WordFlags	;wh_Flags
>cd04	03					.byte 3	;wh_CodeLength
>cd05	10					  .byte LinkDisplacement	; offset to previous nt
=$cd06					XtPtr1 ::= *
=52354					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd06	20 f6 cc	jsr $ccf6	Two_Comma:	jsr Comma
.cd09	4c f6 cc	jmp $ccf6			jmp Comma
=6					CodeLen	.var *-XtPtr1
=$cd0c					Here1 = *	; remember here
>cd04	06					.byte CodeLen	;patch wh_CodeLength
.cd0c	a9 e8		lda #$e8	Drop_Comma:	lda #$e8	;inx
.cd0e	a8		tay				tay
.cd0f	d0 e8		bne $ccf9			bne Comma_YA
>cd11	4a 73 72 2c			Name0:	.text "Jsr,"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52373					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd15	84					.byte (("Jsr,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cd16	10					.byte WordFlags	;wh_Flags
>cd17	03					.byte 3	;wh_CodeLength
>cd18	13					  .byte LinkDisplacement	; offset to previous nt
=$cd19					XtPtr1 ::= *
=52373					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd19	20 ef b3	jsr $b3ef	Jsr_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cd1c	20 ae b7	jsr $b7ae	Jsr_Comma_YA:	jsr PushYA	; push addr
.cd1f	a9 20		lda #$20			lda #$20	; JSR abs opcode
.cd21	20 e2 cc	jsr $cce2	Jsr_Comma_3:	jsr C_Comma_A
.cd24	4c f6 cc	jmp $ccf6			jmp Comma	; compile addr
=14					CodeLen	.var *-XtPtr1
=$cd27					Here1 = *	; remember here
>cd17	0e					.byte CodeLen	;patch wh_CodeLength
>cd27	4a 6d 70 2c			Name0:	.text "Jmp,"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52395					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd2b	84					.byte (("Jmp,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cd2c	10					.byte WordFlags	;wh_Flags
>cd2d	03					.byte 3	;wh_CodeLength
>cd2e	16					  .byte LinkDisplacement	; offset to previous nt
=$cd2f					XtPtr1 ::= *
=52395					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd2f	20 ef b3	jsr $b3ef	Jmp_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cd32	20 ae b7	jsr $b7ae	Jmp_Comma_YA:	jsr PushYA	; push addr
.cd35	a9 4c		lda #$4c			lda #$4c	; JMP abs opcode
.cd37	d0 e8		bne $cd21			bne Jsr_Comma_3
.cd39					Jmp_Comma_NT_YA:
.cd39	20 ae b7	jsr $b7ae			jsr PushYA
.cd3c	20 98 bd	jsr $bd98			jsr Name_To_Int	; convert nt to xt
.cd3f	4c 2f cd	jmp $cd2f			jmp Jmp_Comma
=19					CodeLen	.var *-XtPtr1
=$cd42					Here1 = *	; remember here
>cd2d	13					.byte CodeLen	;patch wh_CodeLength
>cd42	43 40				Name0:	.text "C@"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52420					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd44	02					.byte (("C@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>cd45	40					.byte WordFlags	;wh_Flags
>cd46	03					.byte 3	;wh_CodeLength
>cd47	19					  .byte LinkDisplacement	; offset to previous nt
=$cd48					XtPtr1 ::= *
=52420					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd48	20 18 b4	jsr $b418	C_Fetch:	jsr underflow_1
.cd4b	a1 24		lda ($24,x)			lda (DStack+0,x)
.cd4d	95 24		sta $24,x			sta DStack+0,x
.cd4f	a9 00		lda #$00			lda #0
.cd51	95 25		sta $25,x			sta DStack+1,x	; zero MSB
=11					CodeLen	.var *-XtPtr1
=$cd53					Here1 = *	; remember here
>cd46	0b					.byte CodeLen	;patch wh_CodeLength
.cd53	60		rts				rts
>cd54	43 21				Name0:	.text "C!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52438					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd56	22					.byte (("C!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cd57	40					.byte WordFlags	;wh_Flags
>cd58	03					.byte 3	;wh_CodeLength
>cd59	12					  .byte LinkDisplacement	; offset to previous nt
=$cd5a					XtPtr1 ::= *
=52438					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd5a	20 2c b4	jsr $b42c	C_Store:	jsr underflow_2
.cd5d	b5 26		lda $26,x			lda DStack+2,x
.cd5f	81 24		sta ($24,x)			sta (DStack+0,x)
.cd61	e8		inx				inx
.cd62	e8		inx				inx
.cd63	e8		inx				inx
.cd64	e8		inx				inx
=11					CodeLen	.var *-XtPtr1
=$cd65					Here1 = *	; remember here
>cd58	0b					.byte CodeLen	;patch wh_CodeLength
.cd65	60		rts				rts
>cd66	31 2b 21			Name0:	.text "1+!"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52457					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd69	23					.byte (("1+!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cd6a	00					.byte WordFlags	;wh_Flags
>cd6b	03					.byte 3	;wh_CodeLength
>cd6c	13					  .byte LinkDisplacement	; offset to previous nt
=$cd6d					XtPtr1 ::= *
=52457					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd6d					OnePlusStore:
.cd6d	a9 01		lda #$01			lda #1
.cd6f	18		clc				clc
.cd70	61 24		adc ($24,x)			adc (DStack+0,x)	; increment lo byte
.cd72	81 24		sta ($24,x)			sta (DStack+0,x)
.cd74	90 0c		bcc $cd82			bcc _7			; if carry
.cd76	f6 24		inc $24,x			inc DStack+0,x		;   point at hi byte
.cd78	d0 02		bne $cd7c			bne +
.cd7a	f6 25		inc $25,x			inc DStack+1,x
.cd7c					+
.cd7c	a1 24		lda ($24,x)			lda (DStack+0,x)	;   increment hi byte
.cd7e	69 00		adc #$00			adc #0
.cd80	81 24		sta ($24,x)			sta (Dstack+0,x)
.cd82					_7:
.cd82	e8		inx				inx			; Drop addr
.cd83	e8		inx				inx
=23					CodeLen	.var *-XtPtr1
=$cd84					Here1 = *	; remember here
>cd6b	17					.byte CodeLen	;patch wh_CodeLength
.cd84	60		rts				rts
>cd85	2b 21				Name0:	.text "+!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52487					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd87	22					.byte (("+!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>cd88	50					.byte WordFlags	;wh_Flags
>cd89	03					.byte 3	;wh_CodeLength
>cd8a	1e					  .byte LinkDisplacement	; offset to previous nt
=$cd8b					XtPtr1 ::= *
=52487					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd8b					Plus_store:
.cd8b	20 2c b4	jsr $b42c			jsr underflow_2
.cd8e	18		clc				clc
.cd8f	b5 26		lda $26,x			lda DStack+2,x
.cd91	61 24		adc ($24,x)			adc (DStack+0,x)
.cd93	81 24		sta ($24,x)			sta (DStack+0,x)
.cd95	f6 24		inc $24,x			inc DStack+0,x
.cd97	d0 02		bne $cd9b			bne +
.cd99	f6 25		inc $25,x			inc DStack+1,x
.cd9b					+
.cd9b	b5 27		lda $27,x			lda DStack+3,x
.cd9d	61 24		adc ($24,x)			adc (DStack+0,x)
.cd9f	81 24		sta ($24,x)			sta (DStack+0,x)
.cda1	4c 31 c5	jmp $c531			jmp Two_Drop
=25					CodeLen	.var *-XtPtr1
=$cda4					Here1 = *	; remember here
>cd89	19					.byte CodeLen	;patch wh_CodeLength
>cda4	42 65 6c 6c			Name0:	.text "Bell"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52520					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cda8	84					.byte (("Bell"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>cda9	10					.byte WordFlags	;wh_Flags
>cdaa	03					.byte 3	;wh_CodeLength
>cdab	21					  .byte LinkDisplacement	; offset to previous nt
=$cdac					XtPtr1 ::= *
=52520					WordListLink ::= Nt0 ; remember the nt of this word for later
.cdac	a9 07		lda #$07	Bell:		lda #7		; ASCII value for BELL
.cdae	d0 0b		bne $cdbb			bne Emit_A
=4					CodeLen	.var *-XtPtr1
=$cdb0					Here1 = *	; remember here
>cdaa	04					.byte CodeLen	;patch wh_CodeLength
>cdb0	45 6d 69 74			Name0:	.text "Emit"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52532					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cdb4	84					.byte (("Emit"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cdb5	10					.byte WordFlags	;wh_Flags
>cdb6	03					.byte 3	;wh_CodeLength
>cdb7	0c					  .byte LinkDisplacement	; offset to previous nt
=$cdb8					XtPtr1 ::= *
=52532					WordListLink ::= Nt0 ; remember the nt of this word for later
.cdb8	20 d4 b3	jsr $b3d4	Emit:		jsr PopA		; pop char, with underflow check
.cdbb					Emit_A:
.cdbb	6c 06 03	jmp ($0306)			jmp (output)		; JSR/RTS
=6					CodeLen	.var *-XtPtr1
=$cdbe					Here1 = *	; remember here
>cdb6	06					.byte CodeLen	;patch wh_CodeLength
>cdbe	53 70 61 63 65			Name0:	.text "Space"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=52547					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cdc3	a5					.byte (("Space"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>cdc4	10					.byte WordFlags	;wh_Flags
>cdc5	03					.byte 3	;wh_CodeLength
>cdc6	0f					  .byte LinkDisplacement	; offset to previous nt
=$cdc7					XtPtr1 ::= *
=52547					WordListLink ::= Nt0 ; remember the nt of this word for later
.cdc7	a9 20		lda #$20	Space:		lda #AscSP
.cdc9	d0 f0		bne $cdbb			bne Emit_A
=4					CodeLen	.var *-XtPtr1
=$cdcb					Here1 = *	; remember here
>cdc5	04					.byte CodeLen	;patch wh_CodeLength
>cdcb	54 79 70 65			Name0:	.text "Type"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52559					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cdcf	a4					.byte (("Type"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cdd0	50					.byte WordFlags	;wh_Flags
>cdd1	03					.byte 3	;wh_CodeLength
>cdd2	0c					  .byte LinkDisplacement	; offset to previous nt
=$cdd3					XtPtr1 ::= *
=52559					WordListLink ::= Nt0 ; remember the nt of this word for later
.cdd3					Type:
.cdd3	20 2c b4	jsr $b42c			jsr underflow_2
.cdd6	4c e3 cd	jmp $cde3			jmp _test
.cdd9					_loop:
.cdd9	d6 24		dec $24,x			dec DStack+0,x		; finish length decrement
.cddb	a1 26		lda ($26,x)			lda (DStack+2,x)	; Send the current character
.cddd	20 bb cd	jsr $cdbb			jsr Emit_A
.cde0	20 5f ca	jsr $ca5f			jsr NOS_One_Plus	; increment address
.cde3	b5 24		lda $24,x	_test:		lda DStack+0,x		; decrement length & test for <0
.cde5	d0 f2		bne $cdd9			bne _loop
.cde7	d6 25		dec $25,x			dec DStack+1,x
.cde9	10 ee		bpl $cdd9			bpl _loop
.cdeb	4c 31 c5	jmp $c531			jmp Two_drop
=27					CodeLen	.var *-XtPtr1
=$cdee					Here1 = *	; remember here
>cdd1	1b					.byte CodeLen	;patch wh_CodeLength
.cdee					Print_ASCIIZ_YA_no_lf:
.cdee	85 18		sta $18				sta tmp3+0		; save string address
.cdf0	84 19		sty $19				sty tmp3+1
.cdf2	a0 00		ldy #$00			ldy #0
.cdf4					Print_ASCIIZ_tmp3_no_lf:
.cdf4	b1 18		lda ($18),y			lda (tmp3),y
.cdf6	f0 06		beq $cdfe			beq _done		; end of string?
.cdf8	20 bb cd	jsr $cdbb			jsr emit_a
.cdfb	c8		iny				iny
.cdfc	d0 f6		bne $cdf4			bne Print_ASCIIZ_tmp3_no_lf
.cdfe					_done:
.cdfe	60		rts				rts
.cdff					Print_ASCIIZ_YA:
.cdff	20 ee cd	jsr $cdee			jsr Print_ASCIIZ_YA_no_lf
.ce02	4c 69 ab	jmp $ab69	                jmp CR
>ce05	45 78 65 63 75 74 65		Name0:	.text "Execute"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=52620					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce0c	a7					.byte (("Execute"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=61					LinkDisplacement = Nt0-WordListLink
>ce0d	10					.byte WordFlags	;wh_Flags
>ce0e	03					.byte 3	;wh_CodeLength
>ce0f	3d					  .byte LinkDisplacement	; offset to previous nt
=$ce10					XtPtr1 ::= *
=52620					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce10					Execute:
.ce10	e0 27		cpx #$27		cpx #-2*1+DStack0+1	; far enough below end of data stack (& not negative)?
.ce12	b0 2e		bcs $ce42		bcs Throw_Stack_03
.ce14	b5 25		lda $25,x			lda DStack+1,x	; addr for RTI
.ce16	48		pha				pha
.ce17	b5 24		lda $24,x			lda DStack+0,x
.ce19	48		pha				pha
.ce1a	e8		inx				inx		; drop addr
.ce1b	e8		inx				inx
.ce1c	08		php				php		; flags for RTI
.ce1d	40		rti				rti
=14					CodeLen	.var *-XtPtr1
=$ce1e					Here1 = *	; remember here
>ce0e	0e					.byte CodeLen	;patch wh_CodeLength
>ce1e	32 52 6f 74			Name0:	.text "2Rot"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52642					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce22	84					.byte (("2Rot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>ce23	10					.byte WordFlags	;wh_Flags
>ce24	03					.byte 3	;wh_CodeLength
>ce25	16					  .byte LinkDisplacement	; offset to previous nt
=$ce26					XtPtr1 ::= *
=52642					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce26					TwoRot:
.ce26	e0 1d		cpx #$1d		cpx #-2*6+DStack0+1	; far enough below end of data stack (& not negative)?
.ce28	b0 18		bcs $ce42		bcs Throw_Stack_03
.ce2a	86 14		stx $14				stx tmp1+0
.ce2c	e8		inx				inx		; do 4 times
.ce2d	e8		inx				inx
.ce2e	e8		inx				inx
.ce2f	e8		inx				inx
.ce30	ca		dex		-		dex
.ce31	b4 2c		ldy $2c,x			ldy DStack+8,x	; do a byte
.ce33	b5 28		lda $28,x			lda DStack+4,x
.ce35	95 2c		sta $2c,x			sta DStack+8,x
.ce37	b5 24		lda $24,x			lda DStack+0,x
.ce39	95 28		sta $28,x			sta DStack+4,x
.ce3b	94 24		sty $24,x			sty DStack+0,x
.ce3d	e4 14		cpx $14				cpx tmp1+0
.ce3f	d0 ef		bne $ce30			bne -
=27					CodeLen	.var *-XtPtr1
=$ce41					Here1 = *	; remember here
>ce24	1b					.byte CodeLen	;patch wh_CodeLength
.ce41	60		rts				rts
.ce42	4c 3b b4	jmp $b43b	Throw_Stack_03: jmp Throw_Stack
>ce45	52 6f 74			Name0:	.text "Rot"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52680					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce48	83					.byte (("Rot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>ce49	10					.byte WordFlags	;wh_Flags
>ce4a	03					.byte 3	;wh_CodeLength
>ce4b	26					  .byte LinkDisplacement	; offset to previous nt
=$ce4c					XtPtr1 ::= *
=52680					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce4c					Rot:
.ce4c	e0 23		cpx #$23		cpx #-2*3+DStack0+1	; far enough below end of data stack (& not negative)?
.ce4e	b0 f2		bcs $ce42		bcs Throw_Stack_03
.ce50	b4 29		ldy $29,x			ldy DStack+5,x	; do MSB
.ce52	b5 27		lda $27,x			lda DStack+3,x
.ce54	95 29		sta $29,x			sta DStack+5,x
.ce56	b5 25		lda $25,x			lda DStack+1,x
.ce58	95 27		sta $27,x			sta DStack+3,x
.ce5a	94 25		sty $25,x			sty DStack+1,x
.ce5c	b4 28		ldy $28,x			ldy DStack+4,x	; do LSB
.ce5e	b5 26		lda $26,x			lda DStack+2,x
.ce60	95 28		sta $28,x			sta DStack+4,x
.ce62	b5 24		lda $24,x			lda DStack+0,x
.ce64	95 26		sta $26,x			sta DStack+2,x
.ce66	94 24		sty $24,x			sty DStack+0,x
=28					CodeLen	.var *-XtPtr1
=$ce68					Here1 = *	; remember here
>ce4a	1c					.byte CodeLen	;patch wh_CodeLength
.ce68	60		rts				rts
>ce69	2d 52 6f 74			Name0:	.text "-Rot"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52717					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce6d	84					.byte (("-Rot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>ce6e	10					.byte WordFlags	;wh_Flags
>ce6f	03					.byte 3	;wh_CodeLength
>ce70	25					  .byte LinkDisplacement	; offset to previous nt
=$ce71					XtPtr1 ::= *
=52717					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce71					Not_Rot:
.ce71	e0 23		cpx #$23		cpx #-2*3+DStack0+1	; far enough below end of data stack (& not negative)?
.ce73	b0 cd		bcs $ce42		bcs Throw_Stack_03
.ce75	b4 25		ldy $25,x			ldy DStack+1,x	; do MSB
.ce77	b5 27		lda $27,x			lda DStack+3,x
.ce79	95 25		sta $25,x			sta DStack+1,x
.ce7b	b5 29		lda $29,x			lda DStack+5,x
.ce7d	95 27		sta $27,x			sta DStack+3,x
.ce7f	94 29		sty $29,x			sty DStack+5,x
.ce81	b4 24		ldy $24,x			ldy DStack+0,x	; do LSB
.ce83	b5 26		lda $26,x			lda DStack+2,x
.ce85	95 24		sta $24,x			sta DStack+0,x
.ce87	b5 28		lda $28,x			lda DStack+4,x
.ce89	95 26		sta $26,x			sta DStack+2,x
.ce8b	94 28		sty $28,x			sty DStack+4,x
=28					CodeLen	.var *-XtPtr1
=$ce8d					Here1 = *	; remember here
>ce6f	1c					.byte CodeLen	;patch wh_CodeLength
.ce8d	60		rts				rts
>ce8e	40				Name0:	.text "@"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52751					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce8f	01					.byte (("@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>ce90	10					.byte WordFlags	;wh_Flags
>ce91	03					.byte 3	;wh_CodeLength
>ce92	22					  .byte LinkDisplacement	; offset to previous nt
=$ce93					XtPtr1 ::= *
=52751					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce93					Fetch:
.ce93	e0 27		cpx #$27		cpx #-2*1+DStack0+1	; far enough below end of data stack (& not negative)?
.ce95	b0 ab		bcs $ce42		bcs Throw_Stack_03
.ce97	a1 24		lda ($24,x)			lda (DStack+0,x)		; LSB
.ce99	a8		tay				tay
.ce9a	f6 24		inc $24,x			inc DStack+0,x
.ce9c	d0 02		bne $cea0			bne +
.ce9e	f6 25		inc $25,x			inc DStack+1,x
.cea0					+
.cea0	a1 24		lda ($24,x)			lda (DStack+0,x)		; MSB
.cea2	95 25		sta $25,x			sta DStack+1,x
.cea4	94 24		sty $24,x			sty DStack+0,x
=19					CodeLen	.var *-XtPtr1
=$cea6					Here1 = *	; remember here
>ce91	13					.byte CodeLen	;patch wh_CodeLength
.cea6	60		rts				rts
>cea7	21				Name0:	.text "!"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52776					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cea8	21					.byte (("!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>cea9	10					.byte WordFlags	;wh_Flags
>ceaa	03					.byte 3	;wh_CodeLength
>ceab	19					  .byte LinkDisplacement	; offset to previous nt
=$ceac					XtPtr1 ::= *
=52776					WordListLink ::= Nt0 ; remember the nt of this word for later
.ceac					Store:
.ceac	e0 25		cpx #$25		cpx #-2*2+DStack0+1	; far enough below end of data stack (& not negative)?
.ceae	b0 92		bcs $ce42		bcs Throw_Stack_03
.ceb0	b5 26		lda $26,x			lda DStack+2,x	; LSB
.ceb2	81 24		sta ($24,x)			sta (DStack+0,x)
.ceb4	f6 24		inc $24,x			inc DStack+0,x
.ceb6	d0 02		bne $ceba			bne +
.ceb8	f6 25		inc $25,x			inc DStack+1,x
.ceba					+
.ceba	b5 27		lda $27,x			lda DStack+3,x	; MSB
.cebc	81 24		sta ($24,x)			sta (DStack+0,x)
.cebe	e8		inx				inx		; 2Drop
.cebf	e8		inx				inx
.cec0	e8		inx				inx
.cec1	e8		inx				inx
=22					CodeLen	.var *-XtPtr1
=$cec2					Here1 = *	; remember here
>ceaa	16					.byte CodeLen	;patch wh_CodeLength
.cec2	60		rts				rts
>cec3	30 21				Name0:	.text "0!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52805					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cec5	22					.byte (("0!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>cec6	00					.byte WordFlags	;wh_Flags
>cec7	03					.byte 3	;wh_CodeLength
>cec8	1d					  .byte LinkDisplacement	; offset to previous nt
=$cec9					XtPtr1 ::= *
=52805					WordListLink ::= Nt0 ; remember the nt of this word for later
.cec9	20 fa b3	jsr $b3fa	ZStore:		jsr PopTmp1	; pop addr, check underflow
.cecc	a9 00		lda #$00			lda #0
.cece	a8		tay				tay		; clear LSB
.cecf	91 14		sta ($14),y			sta (tmp1),y
.ced1	c8		iny				iny		; clear MSB
.ced2	91 14		sta ($14),y			sta (tmp1),y
=11					CodeLen	.var *-XtPtr1
=$ced4					Here1 = *	; remember here
>cec7	0b					.byte CodeLen	;patch wh_CodeLength
.ced4	60		rts				rts
>ced5	3e 52				Name0:	.text ">R"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52823					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ced7	42					.byte ((">R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=52					WordFlags ::= CO+ST	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>ced8	34					.byte WordFlags	;wh_Flags
>ced9	03					.byte 3	;wh_CodeLength
>ceda	12					  .byte LinkDisplacement	; offset to previous nt
=$cedb					XtPtr1 ::= *
=52823					WordListLink ::= Nt0 ; remember the nt of this word for later
.cedb					To_R:
.cedb	68		pla				pla		; move the RTS address out of the way
.cedc	85 1c		sta $1c				sta tmp5+0
.cede	68		pla				pla
.cedf	85 1d		sta $1d				sta tmp5+1
.cee1	20 18 b4	jsr $b418			jsr underflow_1
.cee4	b5 25		lda $25,x			lda DStack+1,x	; MSB
.cee6	48		pha				pha
.cee7	b5 24		lda $24,x			lda DStack+0,x	; LSB
.cee9	48		pha				pha
.ceea	e8		inx				inx
.ceeb	e8		inx				inx
.ceec	a5 1d		lda $1d				lda tmp5+1	; move the RTS address back in
.ceee	48		pha				pha
.ceef	a5 1c		lda $1c				lda tmp5+0
.cef1	48		pha				pha
=23					CodeLen	.var *-XtPtr1
=$cef2					Here1 = *	; remember here
>ced9	17					.byte CodeLen	;patch wh_CodeLength
.cef2	60		rts				rts
>cef3	52 3e				Name0:	.text "R>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52853					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cef5	c2					.byte (("R>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=52					WordFlags ::= CO+ST	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>cef6	34					.byte WordFlags	;wh_Flags
>cef7	03					.byte 3	;wh_CodeLength
>cef8	1e					  .byte LinkDisplacement	; offset to previous nt
=$cef9					XtPtr1 ::= *
=52853					WordListLink ::= Nt0 ; remember the nt of this word for later
.cef9					R_From:
.cef9	68		pla				pla		; Move the RTS addr out of the way
.cefa	85 1c		sta $1c				sta tmp5+0
.cefc	68		pla				pla
.cefd	85 1d		sta $1d				sta tmp5+1
.ceff	ca		dex				dex
.cf00	ca		dex				dex
.cf01	68		pla				pla		; LSB
.cf02	95 24		sta $24,x			sta DStack+0,x
.cf04	68		pla				pla		; MSB
.cf05	95 25		sta $25,x			sta DStack+1,x
.cf07	a5 1d		lda $1d				lda tmp5+1	; Restore the RTS addr
.cf09	48		pha				pha
.cf0a	a5 1c		lda $1c				lda tmp5+0
.cf0c	48		pha				pha
=20					CodeLen	.var *-XtPtr1
=$cf0d					Here1 = *	; remember here
>cef7	14					.byte CodeLen	;patch wh_CodeLength
.cf0d	60		rts				rts
>cf0e	52 40				Name0:	.text "R@"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52880					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf10	02					.byte (("R@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=20					WordFlags ::= NN+CO	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>cf11	14					.byte WordFlags	;wh_Flags
>cf12	03					.byte 3	;wh_CodeLength
>cf13	1b					  .byte LinkDisplacement	; offset to previous nt
=$cf14					XtPtr1 ::= *
=52880					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf14					R_Fetch:
.cf14	86 14		stx $14				stx tmp1	; save data stack index
.cf16	ba		tsx				tsx		; X= return stack index
.cf17	bd 03 01	lda $0103,x			lda RStack+3,x
.cf1a	bc 04 01	ldy $0104,x			ldy RStack+4,x
.cf1d	a6 14		ldx $14				ldx tmp1	; restore data stack index
.cf1f	4c ae b7	jmp $b7ae			jmp PushYA
=14					CodeLen	.var *-XtPtr1
=$cf22					Here1 = *	; remember here
>cf12	0e					.byte CodeLen	;patch wh_CodeLength
>cf22	4f 76 65 72			Name0:	.text "Over"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52902					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf26	44					.byte (("Over"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cf27	40					.byte WordFlags	;wh_Flags
>cf28	03					.byte 3	;wh_CodeLength
>cf29	16					  .byte LinkDisplacement	; offset to previous nt
=$cf2a					XtPtr1 ::= *
=52902					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf2a					Over:
.cf2a	20 2c b4	jsr $b42c			jsr underflow_2
.cf2d	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cf2f	b4 27		ldy $27,x			ldy DStack+3,x	; MSB
.cf31	ca		dex				dex		; PushYA
.cf32	ca		dex				dex
.cf33	95 24		sta $24,x			sta DStack+0,x
.cf35	94 25		sty $25,x			sty DStack+1,x
=13					CodeLen	.var *-XtPtr1
=$cf37					Here1 = *	; remember here
>cf28	0d					.byte CodeLen	;patch wh_CodeLength
.cf37	60		rts				rts
>cf38	3f 44 75 70			Name0:	.text "?Dup"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52924					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf3c	04					.byte (("?Dup"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cf3d	50					.byte WordFlags	;wh_Flags
>cf3e	03					.byte 3	;wh_CodeLength
>cf3f	16					  .byte LinkDisplacement	; offset to previous nt
=$cf40					XtPtr1 ::= *
=52924					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf40					Question_Dup:
.cf40	20 18 b4	jsr $b418			jsr underflow_1
.cf43	b5 24		lda $24,x			lda DStack+0,x	; Check if TOS is zero
.cf45	15 25		ora $25,x			ora DStack+1,x
.cf47	d0 0b		bne $cf54			bne Dup_NoUf
=9					CodeLen	.var *-XtPtr1
=$cf49					Here1 = *	; remember here
>cf3e	09					.byte CodeLen	;patch wh_CodeLength
.cf49	60		rts				rts
>cf4a	44 75 70			Name0:	.text "Dup"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52941					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf4d	03					.byte (("Dup"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>cf4e	40					.byte WordFlags	;wh_Flags
>cf4f	03					.byte 3	;wh_CodeLength
>cf50	11					  .byte LinkDisplacement	; offset to previous nt
=$cf51					XtPtr1 ::= *
=52941					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf51					Dup:
.cf51	20 18 b4	jsr $b418			jsr underflow_1
.cf54	b5 24		lda $24,x	Dup_NoUf:	lda DStack+0,x	; LSB
.cf56	b4 25		ldy $25,x			ldy DStack+1,x	; MSB
.cf58	ca		dex				dex
.cf59	ca		dex				dex
.cf5a	95 24		sta $24,x			sta DStack+0,x
.cf5c	94 25		sty $25,x			sty DStack+1,x
=13					CodeLen	.var *-XtPtr1
=$cf5e					Here1 = *	; remember here
>cf4f	0d					.byte CodeLen	;patch wh_CodeLength
.cf5e	60		rts				rts
.cf5f					PushAY:
.cf5f	ca		dex				dex
.cf60	ca		dex				dex
.cf61	94 24		sty $24,x			sty DStack+0,x
.cf63	95 25		sta $25,x			sta DStack+1,x
.cf65	60		rts				rts
>cf66	53 77 61 70			Name0:	.text "Swap"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52970					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf6a	04					.byte (("Swap"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>cf6b	40					.byte WordFlags	;wh_Flags
>cf6c	03					.byte 3	;wh_CodeLength
>cf6d	1d					  .byte LinkDisplacement	; offset to previous nt
=$cf6e					XtPtr1 ::= *
=52970					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf6e					Swap:
.cf6e	20 2c b4	jsr $b42c			jsr underflow_2
.cf71	b5 24		lda $24,x			lda DStack+0,x	; do LSB
.cf73	b4 26		ldy $26,x			ldy DStack+2,x
.cf75	95 26		sta $26,x			sta DStack+2,x
.cf77	94 24		sty $24,x			sty DStack+0,x
.cf79	b5 25		lda $25,x			lda DStack+1,x	; do MSB
.cf7b	b4 27		ldy $27,x			ldy DStack+3,x
.cf7d	95 27		sta $27,x			sta DStack+3,x
.cf7f	94 25		sty $25,x			sty DStack+1,x
=19					CodeLen	.var *-XtPtr1
=$cf81					Here1 = *	; remember here
>cf6c	13					.byte CodeLen	;patch wh_CodeLength
.cf81	60		rts				rts
>cf82	44 72 6f 70			Name0:	.text "Drop"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52998					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf86	04					.byte (("Drop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>cf87	40					.byte WordFlags	;wh_Flags
>cf88	03					.byte 3	;wh_CodeLength
>cf89	1c					  .byte LinkDisplacement	; offset to previous nt
=$cf8a					XtPtr1 ::= *
=52998					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf8a					Drop:
.cf8a	20 18 b4	jsr $b418			jsr underflow_1
.cf8d	e8		inx				inx
.cf8e	e8		inx				inx
=5					CodeLen	.var *-XtPtr1
=$cf8f					Here1 = *	; remember here
>cf88	05					.byte CodeLen	;patch wh_CodeLength
.cf8f	60		rts				rts
=52998					forth_dictionary_start = WordListLink ; END of FORTH-WORDLIST
=0					WordListLink .var 0
>cf90	57 6f 72 64 73			Name0:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53013					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf95	65					.byte (("Words"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=53013					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>cf96	11					.byte WordFlags	;wh_Flags
>cf97	03					.byte 3	;wh_CodeLength
>cf98	00 00					  .word WordListLink
=$cf9a					XtPtr1 ::= *
=53013					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf9a	4c bc aa	jmp $aabc			jmp Words
=3					CodeLen	.var *-XtPtr1
=$cf9d					Here1 = *	; remember here
>cf97	03					.byte CodeLen	;patch wh_CodeLength
>cf9d	46 6f 72 74 68 2d 57 6f		Name0:	.text "Forth-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>cfa5	72 64 6c 69 73 74
=14					NameLength = *-Name0
=53035					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfab	8e					.byte (("Forth-Wordlist"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cfac	10					.byte WordFlags	;wh_Flags
>cfad	03					.byte 3	;wh_CodeLength
>cfae	16					  .byte LinkDisplacement	; offset to previous nt
=$cfaf					XtPtr1 ::= *
=53035					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfaf	4c 01 a0	jmp $a001			jmp Forth_WordList
=3					CodeLen	.var *-XtPtr1
=$cfb2					Here1 = *	; remember here
>cfad	03					.byte CodeLen	;patch wh_CodeLength
>cfb2	46 6f 72 74 68			Name0:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53047					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfb7	05					.byte (("Forth"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cfb8	10					.byte WordFlags	;wh_Flags
>cfb9	03					.byte 3	;wh_CodeLength
>cfba	0c					  .byte LinkDisplacement	; offset to previous nt
=$cfbb					XtPtr1 ::= *
=53047					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfbb	4c ff a0	jmp $a0ff			jmp Forth
=3					CodeLen	.var *-XtPtr1
=$cfbe					Here1 = *	; remember here
>cfb9	03					.byte CodeLen	;patch wh_CodeLength
>cfbe	53 65 74 2d 4f 72 64 65		Name0:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>cfc6	72
=9					NameLength = *-Name0
=53063					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfc7	49					.byte (("Set-Order"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>cfc8	10					.byte WordFlags	;wh_Flags
>cfc9	03					.byte 3	;wh_CodeLength
>cfca	10					  .byte LinkDisplacement	; offset to previous nt
=$cfcb					XtPtr1 ::= *
=53063					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfcb	4c 71 a1	jmp $a171			jmp Set_Order
=3					CodeLen	.var *-XtPtr1
=$cfce					Here1 = *	; remember here
>cfc9	03					.byte CodeLen	;patch wh_CodeLength
=53063					root_dictionary_start = WordListLink ; END of ROOT-WORDLIST
=0					WordListLink .var 0
.cfce					asm_r:
.cfce	68		pla			pla		; pop RTS addr
.cfcf	a8		tay			tay
.cfd0	68		pla			pla
.cfd1	20 0c d0	jsr $d00c		jsr asm_op	; compile opcode
.cfd4	b5 25		lda $25,x		lda DStack+1,x	; check range
.cfd6	f0 09		beq $cfe1		beq _plus
.cfd8	c9 ff		cmp #$ff		cmp #$ff
.cfda	f0 0b		beq $cfe7		beq _minus
.cfdc	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cfde	4c 74 b4	jmp $b474		jmp ThrowA
.cfe1	b5 24		lda $24,x	_plus:	lda DStack+0,x
.cfe3	30 f7		bmi $cfdc		bmi _err
.cfe5	10 04		bpl $cfeb		bpl _store
.cfe7	b5 24		lda $24,x	_minus:	lda DStack+0,x
.cfe9	10 f1		bpl $cfdc		bpl _err
.cfeb	4c df cc	jmp $ccdf	_store:	jmp C_Comma
.cfee					asm_1:
.cfee	68		pla			pla		; pop RTS addr
.cfef	a8		tay			tay
.cff0	68		pla			pla
.cff1	20 0c d0	jsr $d00c		jsr asm_op	; compile opcode
.cff4	b5 25		lda $25,x		lda DStack+1,x	; compile operand
.cff6	f0 00		beq $cff8		beq _store	;   unsigned byte?
.cff8	4c df cc	jmp $ccdf	_store:	jmp C_Comma
.cffb	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cffd	4c 74 b4	jmp $b474		jmp ThrowA
.d000					asm_2:
.d000	68		pla			pla		; pop RTS addr
.d001	a8		tay			tay
.d002	68		pla			pla
.d003	20 0c d0	jsr $d00c		jsr asm_op	; compile opcode
.d006	4c f6 cc	jmp $ccf6		jmp Comma	; compile operand
.d009					asm_0:
.d009	68		pla			pla		; pop RTS addr
.d00a	a8		tay			tay
.d00b	68		pla			pla
.d00c	84 14		sty $14		asm_op:	sty tmp1+0	; save RTS addr
.d00e	85 15		sta $15			sta tmp1+1
.d010	a0 01		ldy #$01		ldy #1		; get opcode byte
.d012	b1 14		lda ($14),y		lda (tmp1),y
.d014	4c e2 cc	jmp $cce2		jmp C_Comma_A	; compile opcode
>d017	61 64 63 2e 23			Name0:	.text "adc.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53148					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d01c	65					.byte (("adc.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=53148					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>d01d	11					.byte WordFlags	;wh_Flags
>d01e	03					.byte 3	;wh_CodeLength
>d01f	00 00					  .word WordListLink
=$d021					XtPtr1 ::= *
=53148					WordListLink ::= Nt0 ; remember the nt of this word for later
.d021	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d024					Here1 = *	; remember here
>d01e	03					.byte CodeLen	;patch wh_CodeLength
>d024	69					.byte $69
>d025	61 64 63 2e 78			Name0:	.text "adc.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53162					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d02a	05					.byte (("adc.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d02b	10					.byte WordFlags	;wh_Flags
>d02c	03					.byte 3	;wh_CodeLength
>d02d	0e					  .byte LinkDisplacement	; offset to previous nt
=$d02e					XtPtr1 ::= *
=53162					WordListLink ::= Nt0 ; remember the nt of this word for later
.d02e	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d031					Here1 = *	; remember here
>d02c	03					.byte CodeLen	;patch wh_CodeLength
>d031	7d					.byte $7d
>d032	61 64 63 2e 79			Name0:	.text "adc.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53175					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d037	25					.byte (("adc.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d038	10					.byte WordFlags	;wh_Flags
>d039	03					.byte 3	;wh_CodeLength
>d03a	0d					  .byte LinkDisplacement	; offset to previous nt
=$d03b					XtPtr1 ::= *
=53175					WordListLink ::= Nt0 ; remember the nt of this word for later
.d03b	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d03e					Here1 = *	; remember here
>d039	03					.byte CodeLen	;patch wh_CodeLength
>d03e	79					.byte $79
>d03f	61 64 63 2e 7a			Name0:	.text "adc.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53188					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d044	45					.byte (("adc.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d045	10					.byte WordFlags	;wh_Flags
>d046	03					.byte 3	;wh_CodeLength
>d047	0d					  .byte LinkDisplacement	; offset to previous nt
=$d048					XtPtr1 ::= *
=53188					WordListLink ::= Nt0 ; remember the nt of this word for later
.d048	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d04b					Here1 = *	; remember here
>d046	03					.byte CodeLen	;patch wh_CodeLength
>d04b	65					.byte $65
>d04c	61 64 63 2e 7a 69 79		Name0:	.text "adc.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53203					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d053	27					.byte (("adc.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d054	10					.byte WordFlags	;wh_Flags
>d055	03					.byte 3	;wh_CodeLength
>d056	0f					  .byte LinkDisplacement	; offset to previous nt
=$d057					XtPtr1 ::= *
=53203					WordListLink ::= Nt0 ; remember the nt of this word for later
.d057	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d05a					Here1 = *	; remember here
>d055	03					.byte CodeLen	;patch wh_CodeLength
>d05a	71					.byte $71
>d05b	61 64 63 2e 7a 78		Name0:	.text "adc.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53217					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d061	06					.byte (("adc.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d062	10					.byte WordFlags	;wh_Flags
>d063	03					.byte 3	;wh_CodeLength
>d064	0e					  .byte LinkDisplacement	; offset to previous nt
=$d065					XtPtr1 ::= *
=53217					WordListLink ::= Nt0 ; remember the nt of this word for later
.d065	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d068					Here1 = *	; remember here
>d063	03					.byte CodeLen	;patch wh_CodeLength
>d068	75					.byte $75
>d069	61 64 63 2e 7a 78 69		Name0:	.text "adc.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53232					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d070	27					.byte (("adc.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d071	10					.byte WordFlags	;wh_Flags
>d072	03					.byte 3	;wh_CodeLength
>d073	0f					  .byte LinkDisplacement	; offset to previous nt
=$d074					XtPtr1 ::= *
=53232					WordListLink ::= Nt0 ; remember the nt of this word for later
.d074	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d077					Here1 = *	; remember here
>d072	03					.byte CodeLen	;patch wh_CodeLength
>d077	61					.byte $61
>d078	61 6e 64 2e			Name0:	.text "and."	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=53244					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d07c	c4					.byte (("and."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>d07d	10					.byte WordFlags	;wh_Flags
>d07e	03					.byte 3	;wh_CodeLength
>d07f	0c					  .byte LinkDisplacement	; offset to previous nt
=$d080					XtPtr1 ::= *
=53244					WordListLink ::= Nt0 ; remember the nt of this word for later
.d080	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d083					Here1 = *	; remember here
>d07e	03					.byte CodeLen	;patch wh_CodeLength
>d083	2d					.byte $2d
>d084	61 6e 64 2e 23			Name0:	.text "and.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53257					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d089	65					.byte (("and.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d08a	10					.byte WordFlags	;wh_Flags
>d08b	03					.byte 3	;wh_CodeLength
>d08c	0d					  .byte LinkDisplacement	; offset to previous nt
=$d08d					XtPtr1 ::= *
=53257					WordListLink ::= Nt0 ; remember the nt of this word for later
.d08d	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d090					Here1 = *	; remember here
>d08b	03					.byte CodeLen	;patch wh_CodeLength
>d090	29					.byte $29
>d091	61 6e 64 2e 78			Name0:	.text "and.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53270					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d096	05					.byte (("and.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d097	10					.byte WordFlags	;wh_Flags
>d098	03					.byte 3	;wh_CodeLength
>d099	0d					  .byte LinkDisplacement	; offset to previous nt
=$d09a					XtPtr1 ::= *
=53270					WordListLink ::= Nt0 ; remember the nt of this word for later
.d09a	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d09d					Here1 = *	; remember here
>d098	03					.byte CodeLen	;patch wh_CodeLength
>d09d	3d					.byte $3d
>d09e	61 6e 64 2e 79			Name0:	.text "and.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53283					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0a3	25					.byte (("and.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0a4	10					.byte WordFlags	;wh_Flags
>d0a5	03					.byte 3	;wh_CodeLength
>d0a6	0d					  .byte LinkDisplacement	; offset to previous nt
=$d0a7					XtPtr1 ::= *
=53283					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0a7	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d0aa					Here1 = *	; remember here
>d0a5	03					.byte CodeLen	;patch wh_CodeLength
>d0aa	39					.byte $39
>d0ab	61 6e 64 2e 7a			Name0:	.text "and.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53296					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0b0	45					.byte (("and.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0b1	10					.byte WordFlags	;wh_Flags
>d0b2	03					.byte 3	;wh_CodeLength
>d0b3	0d					  .byte LinkDisplacement	; offset to previous nt
=$d0b4					XtPtr1 ::= *
=53296					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0b4	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d0b7					Here1 = *	; remember here
>d0b2	03					.byte CodeLen	;patch wh_CodeLength
>d0b7	25					.byte $25
>d0b8	61 6e 64 2e 7a 69 79		Name0:	.text "and.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53311					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0bf	27					.byte (("and.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d0c0	10					.byte WordFlags	;wh_Flags
>d0c1	03					.byte 3	;wh_CodeLength
>d0c2	0f					  .byte LinkDisplacement	; offset to previous nt
=$d0c3					XtPtr1 ::= *
=53311					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0c3	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d0c6					Here1 = *	; remember here
>d0c1	03					.byte CodeLen	;patch wh_CodeLength
>d0c6	31					.byte $31
>d0c7	61 6e 64 2e 7a 78		Name0:	.text "and.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53325					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0cd	06					.byte (("and.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d0ce	10					.byte WordFlags	;wh_Flags
>d0cf	03					.byte 3	;wh_CodeLength
>d0d0	0e					  .byte LinkDisplacement	; offset to previous nt
=$d0d1					XtPtr1 ::= *
=53325					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0d1	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d0d4					Here1 = *	; remember here
>d0cf	03					.byte CodeLen	;patch wh_CodeLength
>d0d4	35					.byte $35
>d0d5	61 6e 64 2e 7a 78 69		Name0:	.text "and.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53340					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0dc	27					.byte (("and.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d0dd	10					.byte WordFlags	;wh_Flags
>d0de	03					.byte 3	;wh_CodeLength
>d0df	0f					  .byte LinkDisplacement	; offset to previous nt
=$d0e0					XtPtr1 ::= *
=53340					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0e0	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d0e3					Here1 = *	; remember here
>d0de	03					.byte CodeLen	;patch wh_CodeLength
>d0e3	21					.byte $21
>d0e4	61 73 6c			Name0:	.text "asl"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53351					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0e7	83					.byte (("asl"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d0e8	10					.byte WordFlags	;wh_Flags
>d0e9	03					.byte 3	;wh_CodeLength
>d0ea	0b					  .byte LinkDisplacement	; offset to previous nt
=$d0eb					XtPtr1 ::= *
=53351					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0eb	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d0ee					Here1 = *	; remember here
>d0e9	03					.byte CodeLen	;patch wh_CodeLength
>d0ee	0e					.byte $0e
>d0ef	61 73 6c 2e 61			Name0:	.text "asl.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53364					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0f4	25					.byte (("asl.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0f5	10					.byte WordFlags	;wh_Flags
>d0f6	03					.byte 3	;wh_CodeLength
>d0f7	0d					  .byte LinkDisplacement	; offset to previous nt
=$d0f8					XtPtr1 ::= *
=53364					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0f8	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d0fb					Here1 = *	; remember here
>d0f6	03					.byte CodeLen	;patch wh_CodeLength
>d0fb	0a					.byte $0a
>d0fc	61 73 6c 2e 78			Name0:	.text "asl.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53377					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d101	05					.byte (("asl.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d102	10					.byte WordFlags	;wh_Flags
>d103	03					.byte 3	;wh_CodeLength
>d104	0d					  .byte LinkDisplacement	; offset to previous nt
=$d105					XtPtr1 ::= *
=53377					WordListLink ::= Nt0 ; remember the nt of this word for later
.d105	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d108					Here1 = *	; remember here
>d103	03					.byte CodeLen	;patch wh_CodeLength
>d108	1e					.byte $1e
>d109	61 73 6c 2e 7a			Name0:	.text "asl.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53390					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d10e	45					.byte (("asl.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d10f	10					.byte WordFlags	;wh_Flags
>d110	03					.byte 3	;wh_CodeLength
>d111	0d					  .byte LinkDisplacement	; offset to previous nt
=$d112					XtPtr1 ::= *
=53390					WordListLink ::= Nt0 ; remember the nt of this word for later
.d112	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d115					Here1 = *	; remember here
>d110	03					.byte CodeLen	;patch wh_CodeLength
>d115	06					.byte $06
>d116	61 73 6c 2e 7a 78		Name0:	.text "asl.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53404					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d11c	06					.byte (("asl.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d11d	10					.byte WordFlags	;wh_Flags
>d11e	03					.byte 3	;wh_CodeLength
>d11f	0e					  .byte LinkDisplacement	; offset to previous nt
=$d120					XtPtr1 ::= *
=53404					WordListLink ::= Nt0 ; remember the nt of this word for later
.d120	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d123					Here1 = *	; remember here
>d11e	03					.byte CodeLen	;patch wh_CodeLength
>d123	16					.byte $16
>d124	62 63 63			Name0:	.text "bcc"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53415					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d127	63					.byte (("bcc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d128	10					.byte WordFlags	;wh_Flags
>d129	03					.byte 3	;wh_CodeLength
>d12a	0b					  .byte LinkDisplacement	; offset to previous nt
=$d12b					XtPtr1 ::= *
=53415					WordListLink ::= Nt0 ; remember the nt of this word for later
.d12b	20 ce cf	jsr $cfce		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d12e					Here1 = *	; remember here
>d129	03					.byte CodeLen	;patch wh_CodeLength
>d12e	90					.byte $90
>d12f	62 63 73			Name0:	.text "bcs"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53426					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d132	63					.byte (("bcs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d133	10					.byte WordFlags	;wh_Flags
>d134	03					.byte 3	;wh_CodeLength
>d135	0b					  .byte LinkDisplacement	; offset to previous nt
=$d136					XtPtr1 ::= *
=53426					WordListLink ::= Nt0 ; remember the nt of this word for later
.d136	20 ce cf	jsr $cfce		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d139					Here1 = *	; remember here
>d134	03					.byte CodeLen	;patch wh_CodeLength
>d139	b0					.byte $b0
>d13a	62 65 71			Name0:	.text "beq"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53437					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d13d	23					.byte (("beq"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d13e	10					.byte WordFlags	;wh_Flags
>d13f	03					.byte 3	;wh_CodeLength
>d140	0b					  .byte LinkDisplacement	; offset to previous nt
=$d141					XtPtr1 ::= *
=53437					WordListLink ::= Nt0 ; remember the nt of this word for later
.d141	20 ce cf	jsr $cfce		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d144					Here1 = *	; remember here
>d13f	03					.byte CodeLen	;patch wh_CodeLength
>d144	f0					.byte $f0
>d145	62 69 74			Name0:	.text "bit"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53448					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d148	83					.byte (("bit"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d149	10					.byte WordFlags	;wh_Flags
>d14a	03					.byte 3	;wh_CodeLength
>d14b	0b					  .byte LinkDisplacement	; offset to previous nt
=$d14c					XtPtr1 ::= *
=53448					WordListLink ::= Nt0 ; remember the nt of this word for later
.d14c	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d14f					Here1 = *	; remember here
>d14a	03					.byte CodeLen	;patch wh_CodeLength
>d14f	2c					.byte $2c
>d150	62 69 74 2e 7a			Name0:	.text "bit.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53461					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d155	45					.byte (("bit.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d156	10					.byte WordFlags	;wh_Flags
>d157	03					.byte 3	;wh_CodeLength
>d158	0d					  .byte LinkDisplacement	; offset to previous nt
=$d159					XtPtr1 ::= *
=53461					WordListLink ::= Nt0 ; remember the nt of this word for later
.d159	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d15c					Here1 = *	; remember here
>d157	03					.byte CodeLen	;patch wh_CodeLength
>d15c	24					.byte $24
>d15d	62 6d 69			Name0:	.text "bmi"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53472					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d160	23					.byte (("bmi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d161	10					.byte WordFlags	;wh_Flags
>d162	03					.byte 3	;wh_CodeLength
>d163	0b					  .byte LinkDisplacement	; offset to previous nt
=$d164					XtPtr1 ::= *
=53472					WordListLink ::= Nt0 ; remember the nt of this word for later
.d164	20 ce cf	jsr $cfce		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d167					Here1 = *	; remember here
>d162	03					.byte CodeLen	;patch wh_CodeLength
>d167	30					.byte $30
>d168	62 6e 65			Name0:	.text "bne"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53483					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d16b	a3					.byte (("bne"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d16c	10					.byte WordFlags	;wh_Flags
>d16d	03					.byte 3	;wh_CodeLength
>d16e	0b					  .byte LinkDisplacement	; offset to previous nt
=$d16f					XtPtr1 ::= *
=53483					WordListLink ::= Nt0 ; remember the nt of this word for later
.d16f	20 ce cf	jsr $cfce		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d172					Here1 = *	; remember here
>d16d	03					.byte CodeLen	;patch wh_CodeLength
>d172	d0					.byte $d0
>d173	62 70 6c			Name0:	.text "bpl"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53494					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d176	83					.byte (("bpl"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d177	10					.byte WordFlags	;wh_Flags
>d178	03					.byte 3	;wh_CodeLength
>d179	0b					  .byte LinkDisplacement	; offset to previous nt
=$d17a					XtPtr1 ::= *
=53494					WordListLink ::= Nt0 ; remember the nt of this word for later
.d17a	20 ce cf	jsr $cfce		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d17d					Here1 = *	; remember here
>d178	03					.byte CodeLen	;patch wh_CodeLength
>d17d	10					.byte $10
>d17e	62 72 6b			Name0:	.text "brk"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53505					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d181	63					.byte (("brk"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d182	10					.byte WordFlags	;wh_Flags
>d183	03					.byte 3	;wh_CodeLength
>d184	0b					  .byte LinkDisplacement	; offset to previous nt
=$d185					XtPtr1 ::= *
=53505					WordListLink ::= Nt0 ; remember the nt of this word for later
.d185	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d188					Here1 = *	; remember here
>d183	03					.byte CodeLen	;patch wh_CodeLength
>d188	00					.byte $00
>d189	62 76 63			Name0:	.text "bvc"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53516					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d18c	63					.byte (("bvc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d18d	10					.byte WordFlags	;wh_Flags
>d18e	03					.byte 3	;wh_CodeLength
>d18f	0b					  .byte LinkDisplacement	; offset to previous nt
=$d190					XtPtr1 ::= *
=53516					WordListLink ::= Nt0 ; remember the nt of this word for later
.d190	20 ce cf	jsr $cfce		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d193					Here1 = *	; remember here
>d18e	03					.byte CodeLen	;patch wh_CodeLength
>d193	50					.byte $50
>d194	62 76 73			Name0:	.text "bvs"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53527					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d197	63					.byte (("bvs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d198	10					.byte WordFlags	;wh_Flags
>d199	03					.byte 3	;wh_CodeLength
>d19a	0b					  .byte LinkDisplacement	; offset to previous nt
=$d19b					XtPtr1 ::= *
=53527					WordListLink ::= Nt0 ; remember the nt of this word for later
.d19b	20 ce cf	jsr $cfce		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d19e					Here1 = *	; remember here
>d199	03					.byte CodeLen	;patch wh_CodeLength
>d19e	70					.byte $70
>d19f	63 6c 63			Name0:	.text "clc"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53538					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1a2	63					.byte (("clc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1a3	10					.byte WordFlags	;wh_Flags
>d1a4	03					.byte 3	;wh_CodeLength
>d1a5	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1a6					XtPtr1 ::= *
=53538					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1a6	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d1a9					Here1 = *	; remember here
>d1a4	03					.byte CodeLen	;patch wh_CodeLength
>d1a9	18					.byte $18
>d1aa	63 6c 64			Name0:	.text "cld"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53549					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1ad	83					.byte (("cld"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1ae	10					.byte WordFlags	;wh_Flags
>d1af	03					.byte 3	;wh_CodeLength
>d1b0	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1b1					XtPtr1 ::= *
=53549					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1b1	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d1b4					Here1 = *	; remember here
>d1af	03					.byte CodeLen	;patch wh_CodeLength
>d1b4	d8					.byte $d8
>d1b5	63 6c 69			Name0:	.text "cli"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53560					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1b8	23					.byte (("cli"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1b9	10					.byte WordFlags	;wh_Flags
>d1ba	03					.byte 3	;wh_CodeLength
>d1bb	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1bc					XtPtr1 ::= *
=53560					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1bc	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d1bf					Here1 = *	; remember here
>d1ba	03					.byte CodeLen	;patch wh_CodeLength
>d1bf	58					.byte $58
>d1c0	63 6c 76			Name0:	.text "clv"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53571					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1c3	c3					.byte (("clv"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1c4	10					.byte WordFlags	;wh_Flags
>d1c5	03					.byte 3	;wh_CodeLength
>d1c6	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1c7					XtPtr1 ::= *
=53571					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1c7	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d1ca					Here1 = *	; remember here
>d1c5	03					.byte CodeLen	;patch wh_CodeLength
>d1ca	b8					.byte $b8
>d1cb	63 6d 70			Name0:	.text "cmp"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53582					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1ce	03					.byte (("cmp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1cf	10					.byte WordFlags	;wh_Flags
>d1d0	03					.byte 3	;wh_CodeLength
>d1d1	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1d2					XtPtr1 ::= *
=53582					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1d2	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d1d5					Here1 = *	; remember here
>d1d0	03					.byte CodeLen	;patch wh_CodeLength
>d1d5	cd					.byte $cd
>d1d6	63 6d 70 2e 23			Name0:	.text "cmp.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53595					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1db	65					.byte (("cmp.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d1dc	10					.byte WordFlags	;wh_Flags
>d1dd	03					.byte 3	;wh_CodeLength
>d1de	0d					  .byte LinkDisplacement	; offset to previous nt
=$d1df					XtPtr1 ::= *
=53595					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1df	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d1e2					Here1 = *	; remember here
>d1dd	03					.byte CodeLen	;patch wh_CodeLength
>d1e2	c9					.byte $c9
>d1e3	63 6d 70 2e 78			Name0:	.text "cmp.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53608					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1e8	05					.byte (("cmp.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d1e9	10					.byte WordFlags	;wh_Flags
>d1ea	03					.byte 3	;wh_CodeLength
>d1eb	0d					  .byte LinkDisplacement	; offset to previous nt
=$d1ec					XtPtr1 ::= *
=53608					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1ec	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d1ef					Here1 = *	; remember here
>d1ea	03					.byte CodeLen	;patch wh_CodeLength
>d1ef	dd					.byte $dd
>d1f0	63 6d 70 2e 79			Name0:	.text "cmp.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53621					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1f5	25					.byte (("cmp.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d1f6	10					.byte WordFlags	;wh_Flags
>d1f7	03					.byte 3	;wh_CodeLength
>d1f8	0d					  .byte LinkDisplacement	; offset to previous nt
=$d1f9					XtPtr1 ::= *
=53621					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1f9	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d1fc					Here1 = *	; remember here
>d1f7	03					.byte CodeLen	;patch wh_CodeLength
>d1fc	d9					.byte $d9
>d1fd	63 6d 70 2e 7a			Name0:	.text "cmp.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53634					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d202	45					.byte (("cmp.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d203	10					.byte WordFlags	;wh_Flags
>d204	03					.byte 3	;wh_CodeLength
>d205	0d					  .byte LinkDisplacement	; offset to previous nt
=$d206					XtPtr1 ::= *
=53634					WordListLink ::= Nt0 ; remember the nt of this word for later
.d206	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d209					Here1 = *	; remember here
>d204	03					.byte CodeLen	;patch wh_CodeLength
>d209	c5					.byte $c5
>d20a	63 6d 70 2e 7a 69 79		Name0:	.text "cmp.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53649					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d211	27					.byte (("cmp.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d212	10					.byte WordFlags	;wh_Flags
>d213	03					.byte 3	;wh_CodeLength
>d214	0f					  .byte LinkDisplacement	; offset to previous nt
=$d215					XtPtr1 ::= *
=53649					WordListLink ::= Nt0 ; remember the nt of this word for later
.d215	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d218					Here1 = *	; remember here
>d213	03					.byte CodeLen	;patch wh_CodeLength
>d218	d1					.byte $d1
>d219	63 6d 70 2e 7a 78		Name0:	.text "cmp.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53663					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d21f	06					.byte (("cmp.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d220	10					.byte WordFlags	;wh_Flags
>d221	03					.byte 3	;wh_CodeLength
>d222	0e					  .byte LinkDisplacement	; offset to previous nt
=$d223					XtPtr1 ::= *
=53663					WordListLink ::= Nt0 ; remember the nt of this word for later
.d223	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d226					Here1 = *	; remember here
>d221	03					.byte CodeLen	;patch wh_CodeLength
>d226	d5					.byte $d5
>d227	63 6d 70 2e 7a 78 69		Name0:	.text "cmp.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53678					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d22e	27					.byte (("cmp.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d22f	10					.byte WordFlags	;wh_Flags
>d230	03					.byte 3	;wh_CodeLength
>d231	0f					  .byte LinkDisplacement	; offset to previous nt
=$d232					XtPtr1 ::= *
=53678					WordListLink ::= Nt0 ; remember the nt of this word for later
.d232	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d235					Here1 = *	; remember here
>d230	03					.byte CodeLen	;patch wh_CodeLength
>d235	c1					.byte $c1
>d236	63 70 78			Name0:	.text "cpx"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53689					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d239	03					.byte (("cpx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d23a	10					.byte WordFlags	;wh_Flags
>d23b	03					.byte 3	;wh_CodeLength
>d23c	0b					  .byte LinkDisplacement	; offset to previous nt
=$d23d					XtPtr1 ::= *
=53689					WordListLink ::= Nt0 ; remember the nt of this word for later
.d23d	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d240					Here1 = *	; remember here
>d23b	03					.byte CodeLen	;patch wh_CodeLength
>d240	ec					.byte $ec
>d241	63 70 78 2e 23			Name0:	.text "cpx.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53702					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d246	65					.byte (("cpx.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d247	10					.byte WordFlags	;wh_Flags
>d248	03					.byte 3	;wh_CodeLength
>d249	0d					  .byte LinkDisplacement	; offset to previous nt
=$d24a					XtPtr1 ::= *
=53702					WordListLink ::= Nt0 ; remember the nt of this word for later
.d24a	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d24d					Here1 = *	; remember here
>d248	03					.byte CodeLen	;patch wh_CodeLength
>d24d	e0					.byte $e0
>d24e	63 70 78 2e 7a			Name0:	.text "cpx.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53715					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d253	45					.byte (("cpx.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d254	10					.byte WordFlags	;wh_Flags
>d255	03					.byte 3	;wh_CodeLength
>d256	0d					  .byte LinkDisplacement	; offset to previous nt
=$d257					XtPtr1 ::= *
=53715					WordListLink ::= Nt0 ; remember the nt of this word for later
.d257	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d25a					Here1 = *	; remember here
>d255	03					.byte CodeLen	;patch wh_CodeLength
>d25a	e4					.byte $e4
>d25b	63 70 79			Name0:	.text "cpy"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53726					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d25e	23					.byte (("cpy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d25f	10					.byte WordFlags	;wh_Flags
>d260	03					.byte 3	;wh_CodeLength
>d261	0b					  .byte LinkDisplacement	; offset to previous nt
=$d262					XtPtr1 ::= *
=53726					WordListLink ::= Nt0 ; remember the nt of this word for later
.d262	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d265					Here1 = *	; remember here
>d260	03					.byte CodeLen	;patch wh_CodeLength
>d265	cc					.byte $cc
>d266	63 70 79 2e 23			Name0:	.text "cpy.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53739					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d26b	65					.byte (("cpy.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d26c	10					.byte WordFlags	;wh_Flags
>d26d	03					.byte 3	;wh_CodeLength
>d26e	0d					  .byte LinkDisplacement	; offset to previous nt
=$d26f					XtPtr1 ::= *
=53739					WordListLink ::= Nt0 ; remember the nt of this word for later
.d26f	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d272					Here1 = *	; remember here
>d26d	03					.byte CodeLen	;patch wh_CodeLength
>d272	c0					.byte $c0
>d273	63 70 79 2e 7a			Name0:	.text "cpy.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53752					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d278	45					.byte (("cpy.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d279	10					.byte WordFlags	;wh_Flags
>d27a	03					.byte 3	;wh_CodeLength
>d27b	0d					  .byte LinkDisplacement	; offset to previous nt
=$d27c					XtPtr1 ::= *
=53752					WordListLink ::= Nt0 ; remember the nt of this word for later
.d27c	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d27f					Here1 = *	; remember here
>d27a	03					.byte CodeLen	;patch wh_CodeLength
>d27f	c4					.byte $c4
>d280	64 65 63			Name0:	.text "dec"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53763					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d283	63					.byte (("dec"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d284	10					.byte WordFlags	;wh_Flags
>d285	03					.byte 3	;wh_CodeLength
>d286	0b					  .byte LinkDisplacement	; offset to previous nt
=$d287					XtPtr1 ::= *
=53763					WordListLink ::= Nt0 ; remember the nt of this word for later
.d287	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d28a					Here1 = *	; remember here
>d285	03					.byte CodeLen	;patch wh_CodeLength
>d28a	ce					.byte $ce
>d28b	64 65 63 2e 61			Name0:	.text "dec.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53776					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d290	25					.byte (("dec.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d291	10					.byte WordFlags	;wh_Flags
>d292	03					.byte 3	;wh_CodeLength
>d293	0d					  .byte LinkDisplacement	; offset to previous nt
=$d294					XtPtr1 ::= *
=53776					WordListLink ::= Nt0 ; remember the nt of this word for later
.d294	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d297					Here1 = *	; remember here
>d292	03					.byte CodeLen	;patch wh_CodeLength
>d297	3a					.byte $3a
>d298	64 65 63 2e 78			Name0:	.text "dec.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53789					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d29d	05					.byte (("dec.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d29e	10					.byte WordFlags	;wh_Flags
>d29f	03					.byte 3	;wh_CodeLength
>d2a0	0d					  .byte LinkDisplacement	; offset to previous nt
=$d2a1					XtPtr1 ::= *
=53789					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2a1	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d2a4					Here1 = *	; remember here
>d29f	03					.byte CodeLen	;patch wh_CodeLength
>d2a4	de					.byte $de
>d2a5	64 65 63 2e 7a			Name0:	.text "dec.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53802					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2aa	45					.byte (("dec.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d2ab	10					.byte WordFlags	;wh_Flags
>d2ac	03					.byte 3	;wh_CodeLength
>d2ad	0d					  .byte LinkDisplacement	; offset to previous nt
=$d2ae					XtPtr1 ::= *
=53802					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2ae	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d2b1					Here1 = *	; remember here
>d2ac	03					.byte CodeLen	;patch wh_CodeLength
>d2b1	c6					.byte $c6
>d2b2	64 65 63 2e 7a 78		Name0:	.text "dec.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53816					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2b8	06					.byte (("dec.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d2b9	10					.byte WordFlags	;wh_Flags
>d2ba	03					.byte 3	;wh_CodeLength
>d2bb	0e					  .byte LinkDisplacement	; offset to previous nt
=$d2bc					XtPtr1 ::= *
=53816					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2bc	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d2bf					Here1 = *	; remember here
>d2ba	03					.byte CodeLen	;patch wh_CodeLength
>d2bf	d6					.byte $d6
>d2c0	64 65 78			Name0:	.text "dex"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53827					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2c3	03					.byte (("dex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d2c4	10					.byte WordFlags	;wh_Flags
>d2c5	03					.byte 3	;wh_CodeLength
>d2c6	0b					  .byte LinkDisplacement	; offset to previous nt
=$d2c7					XtPtr1 ::= *
=53827					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2c7	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d2ca					Here1 = *	; remember here
>d2c5	03					.byte CodeLen	;patch wh_CodeLength
>d2ca	ca					.byte $ca
>d2cb	64 65 79			Name0:	.text "dey"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53838					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2ce	23					.byte (("dey"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d2cf	10					.byte WordFlags	;wh_Flags
>d2d0	03					.byte 3	;wh_CodeLength
>d2d1	0b					  .byte LinkDisplacement	; offset to previous nt
=$d2d2					XtPtr1 ::= *
=53838					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2d2	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d2d5					Here1 = *	; remember here
>d2d0	03					.byte CodeLen	;patch wh_CodeLength
>d2d5	88					.byte $88
>d2d6	65 6f 72			Name0:	.text "eor"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53849					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2d9	43					.byte (("eor"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d2da	10					.byte WordFlags	;wh_Flags
>d2db	03					.byte 3	;wh_CodeLength
>d2dc	0b					  .byte LinkDisplacement	; offset to previous nt
=$d2dd					XtPtr1 ::= *
=53849					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2dd	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d2e0					Here1 = *	; remember here
>d2db	03					.byte CodeLen	;patch wh_CodeLength
>d2e0	4d					.byte $4d
>d2e1	65 6f 72 2e 23			Name0:	.text "eor.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53862					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2e6	65					.byte (("eor.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d2e7	10					.byte WordFlags	;wh_Flags
>d2e8	03					.byte 3	;wh_CodeLength
>d2e9	0d					  .byte LinkDisplacement	; offset to previous nt
=$d2ea					XtPtr1 ::= *
=53862					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2ea	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d2ed					Here1 = *	; remember here
>d2e8	03					.byte CodeLen	;patch wh_CodeLength
>d2ed	49					.byte $49
>d2ee	65 6f 72 2e 78			Name0:	.text "eor.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53875					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2f3	05					.byte (("eor.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d2f4	10					.byte WordFlags	;wh_Flags
>d2f5	03					.byte 3	;wh_CodeLength
>d2f6	0d					  .byte LinkDisplacement	; offset to previous nt
=$d2f7					XtPtr1 ::= *
=53875					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2f7	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d2fa					Here1 = *	; remember here
>d2f5	03					.byte CodeLen	;patch wh_CodeLength
>d2fa	5d					.byte $5d
>d2fb	65 6f 72 2e 79			Name0:	.text "eor.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53888					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d300	25					.byte (("eor.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d301	10					.byte WordFlags	;wh_Flags
>d302	03					.byte 3	;wh_CodeLength
>d303	0d					  .byte LinkDisplacement	; offset to previous nt
=$d304					XtPtr1 ::= *
=53888					WordListLink ::= Nt0 ; remember the nt of this word for later
.d304	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d307					Here1 = *	; remember here
>d302	03					.byte CodeLen	;patch wh_CodeLength
>d307	59					.byte $59
>d308	65 6f 72 2e 7a			Name0:	.text "eor.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53901					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d30d	45					.byte (("eor.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d30e	10					.byte WordFlags	;wh_Flags
>d30f	03					.byte 3	;wh_CodeLength
>d310	0d					  .byte LinkDisplacement	; offset to previous nt
=$d311					XtPtr1 ::= *
=53901					WordListLink ::= Nt0 ; remember the nt of this word for later
.d311	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d314					Here1 = *	; remember here
>d30f	03					.byte CodeLen	;patch wh_CodeLength
>d314	45					.byte $45
>d315	65 6f 72 2e 7a 69 79		Name0:	.text "eor.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53916					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d31c	27					.byte (("eor.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d31d	10					.byte WordFlags	;wh_Flags
>d31e	03					.byte 3	;wh_CodeLength
>d31f	0f					  .byte LinkDisplacement	; offset to previous nt
=$d320					XtPtr1 ::= *
=53916					WordListLink ::= Nt0 ; remember the nt of this word for later
.d320	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d323					Here1 = *	; remember here
>d31e	03					.byte CodeLen	;patch wh_CodeLength
>d323	51					.byte $51
>d324	65 6f 72 2e 7a 78		Name0:	.text "eor.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53930					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d32a	06					.byte (("eor.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d32b	10					.byte WordFlags	;wh_Flags
>d32c	03					.byte 3	;wh_CodeLength
>d32d	0e					  .byte LinkDisplacement	; offset to previous nt
=$d32e					XtPtr1 ::= *
=53930					WordListLink ::= Nt0 ; remember the nt of this word for later
.d32e	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d331					Here1 = *	; remember here
>d32c	03					.byte CodeLen	;patch wh_CodeLength
>d331	55					.byte $55
>d332	65 6f 72 2e 7a 78 69		Name0:	.text "eor.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53945					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d339	27					.byte (("eor.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d33a	10					.byte WordFlags	;wh_Flags
>d33b	03					.byte 3	;wh_CodeLength
>d33c	0f					  .byte LinkDisplacement	; offset to previous nt
=$d33d					XtPtr1 ::= *
=53945					WordListLink ::= Nt0 ; remember the nt of this word for later
.d33d	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d340					Here1 = *	; remember here
>d33b	03					.byte CodeLen	;patch wh_CodeLength
>d340	41					.byte $41
>d341	69 6e 63			Name0:	.text "inc"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53956					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d344	63					.byte (("inc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d345	10					.byte WordFlags	;wh_Flags
>d346	03					.byte 3	;wh_CodeLength
>d347	0b					  .byte LinkDisplacement	; offset to previous nt
=$d348					XtPtr1 ::= *
=53956					WordListLink ::= Nt0 ; remember the nt of this word for later
.d348	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d34b					Here1 = *	; remember here
>d346	03					.byte CodeLen	;patch wh_CodeLength
>d34b	ee					.byte $ee
>d34c	69 6e 63 2e 61			Name0:	.text "inc.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53969					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d351	25					.byte (("inc.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d352	10					.byte WordFlags	;wh_Flags
>d353	03					.byte 3	;wh_CodeLength
>d354	0d					  .byte LinkDisplacement	; offset to previous nt
=$d355					XtPtr1 ::= *
=53969					WordListLink ::= Nt0 ; remember the nt of this word for later
.d355	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d358					Here1 = *	; remember here
>d353	03					.byte CodeLen	;patch wh_CodeLength
>d358	1a					.byte $1a
>d359	69 6e 63 2e 78			Name0:	.text "inc.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53982					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d35e	05					.byte (("inc.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d35f	10					.byte WordFlags	;wh_Flags
>d360	03					.byte 3	;wh_CodeLength
>d361	0d					  .byte LinkDisplacement	; offset to previous nt
=$d362					XtPtr1 ::= *
=53982					WordListLink ::= Nt0 ; remember the nt of this word for later
.d362	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d365					Here1 = *	; remember here
>d360	03					.byte CodeLen	;patch wh_CodeLength
>d365	fe					.byte $fe
>d366	69 6e 63 2e 7a			Name0:	.text "inc.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53995					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d36b	45					.byte (("inc.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d36c	10					.byte WordFlags	;wh_Flags
>d36d	03					.byte 3	;wh_CodeLength
>d36e	0d					  .byte LinkDisplacement	; offset to previous nt
=$d36f					XtPtr1 ::= *
=53995					WordListLink ::= Nt0 ; remember the nt of this word for later
.d36f	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d372					Here1 = *	; remember here
>d36d	03					.byte CodeLen	;patch wh_CodeLength
>d372	e6					.byte $e6
>d373	69 6e 63 2e 7a 78		Name0:	.text "inc.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54009					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d379	06					.byte (("inc.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d37a	10					.byte WordFlags	;wh_Flags
>d37b	03					.byte 3	;wh_CodeLength
>d37c	0e					  .byte LinkDisplacement	; offset to previous nt
=$d37d					XtPtr1 ::= *
=54009					WordListLink ::= Nt0 ; remember the nt of this word for later
.d37d	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d380					Here1 = *	; remember here
>d37b	03					.byte CodeLen	;patch wh_CodeLength
>d380	f6					.byte $f6
>d381	69 6e 78			Name0:	.text "inx"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54020					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d384	03					.byte (("inx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d385	10					.byte WordFlags	;wh_Flags
>d386	03					.byte 3	;wh_CodeLength
>d387	0b					  .byte LinkDisplacement	; offset to previous nt
=$d388					XtPtr1 ::= *
=54020					WordListLink ::= Nt0 ; remember the nt of this word for later
.d388	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d38b					Here1 = *	; remember here
>d386	03					.byte CodeLen	;patch wh_CodeLength
>d38b	e8					.byte $e8
>d38c	69 6e 79			Name0:	.text "iny"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54031					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d38f	23					.byte (("iny"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d390	10					.byte WordFlags	;wh_Flags
>d391	03					.byte 3	;wh_CodeLength
>d392	0b					  .byte LinkDisplacement	; offset to previous nt
=$d393					XtPtr1 ::= *
=54031					WordListLink ::= Nt0 ; remember the nt of this word for later
.d393	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d396					Here1 = *	; remember here
>d391	03					.byte CodeLen	;patch wh_CodeLength
>d396	c8					.byte $c8
>d397	6a 6d 70			Name0:	.text "jmp"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54042					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d39a	03					.byte (("jmp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d39b	10					.byte WordFlags	;wh_Flags
>d39c	03					.byte 3	;wh_CodeLength
>d39d	0b					  .byte LinkDisplacement	; offset to previous nt
=$d39e					XtPtr1 ::= *
=54042					WordListLink ::= Nt0 ; remember the nt of this word for later
.d39e	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d3a1					Here1 = *	; remember here
>d39c	03					.byte CodeLen	;patch wh_CodeLength
>d3a1	4c					.byte $4c
>d3a2	6a 6d 70 2e 69			Name0:	.text "jmp.i"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54055					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3a7	25					.byte (("jmp.i"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3a8	10					.byte WordFlags	;wh_Flags
>d3a9	03					.byte 3	;wh_CodeLength
>d3aa	0d					  .byte LinkDisplacement	; offset to previous nt
=$d3ab					XtPtr1 ::= *
=54055					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3ab	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d3ae					Here1 = *	; remember here
>d3a9	03					.byte CodeLen	;patch wh_CodeLength
>d3ae	6c					.byte $6c
>d3af	6a 73 72			Name0:	.text "jsr"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54066					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3b2	43					.byte (("jsr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3b3	10					.byte WordFlags	;wh_Flags
>d3b4	03					.byte 3	;wh_CodeLength
>d3b5	0b					  .byte LinkDisplacement	; offset to previous nt
=$d3b6					XtPtr1 ::= *
=54066					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3b6	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d3b9					Here1 = *	; remember here
>d3b4	03					.byte CodeLen	;patch wh_CodeLength
>d3b9	20					.byte $20
>d3ba	6c 64 61			Name0:	.text "lda"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54077					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3bd	23					.byte (("lda"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3be	10					.byte WordFlags	;wh_Flags
>d3bf	03					.byte 3	;wh_CodeLength
>d3c0	0b					  .byte LinkDisplacement	; offset to previous nt
=$d3c1					XtPtr1 ::= *
=54077					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3c1	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d3c4					Here1 = *	; remember here
>d3bf	03					.byte CodeLen	;patch wh_CodeLength
>d3c4	ad					.byte $ad
>d3c5	6c 64 61 2e 23			Name0:	.text "lda.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54090					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3ca	65					.byte (("lda.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3cb	10					.byte WordFlags	;wh_Flags
>d3cc	03					.byte 3	;wh_CodeLength
>d3cd	0d					  .byte LinkDisplacement	; offset to previous nt
=$d3ce					XtPtr1 ::= *
=54090					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3ce	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d3d1					Here1 = *	; remember here
>d3cc	03					.byte CodeLen	;patch wh_CodeLength
>d3d1	a9					.byte $a9
>d3d2	6c 64 61 2e 78			Name0:	.text "lda.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54103					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3d7	05					.byte (("lda.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3d8	10					.byte WordFlags	;wh_Flags
>d3d9	03					.byte 3	;wh_CodeLength
>d3da	0d					  .byte LinkDisplacement	; offset to previous nt
=$d3db					XtPtr1 ::= *
=54103					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3db	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d3de					Here1 = *	; remember here
>d3d9	03					.byte CodeLen	;patch wh_CodeLength
>d3de	bd					.byte $bd
>d3df	6c 64 61 2e 79			Name0:	.text "lda.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54116					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3e4	25					.byte (("lda.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3e5	10					.byte WordFlags	;wh_Flags
>d3e6	03					.byte 3	;wh_CodeLength
>d3e7	0d					  .byte LinkDisplacement	; offset to previous nt
=$d3e8					XtPtr1 ::= *
=54116					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3e8	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d3eb					Here1 = *	; remember here
>d3e6	03					.byte CodeLen	;patch wh_CodeLength
>d3eb	b9					.byte $b9
>d3ec	6c 64 61 2e 7a			Name0:	.text "lda.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54129					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3f1	45					.byte (("lda.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3f2	10					.byte WordFlags	;wh_Flags
>d3f3	03					.byte 3	;wh_CodeLength
>d3f4	0d					  .byte LinkDisplacement	; offset to previous nt
=$d3f5					XtPtr1 ::= *
=54129					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3f5	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d3f8					Here1 = *	; remember here
>d3f3	03					.byte CodeLen	;patch wh_CodeLength
>d3f8	a5					.byte $a5
>d3f9	6c 64 61 2e 7a 69 79		Name0:	.text "lda.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54144					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d400	27					.byte (("lda.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d401	10					.byte WordFlags	;wh_Flags
>d402	03					.byte 3	;wh_CodeLength
>d403	0f					  .byte LinkDisplacement	; offset to previous nt
=$d404					XtPtr1 ::= *
=54144					WordListLink ::= Nt0 ; remember the nt of this word for later
.d404	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d407					Here1 = *	; remember here
>d402	03					.byte CodeLen	;patch wh_CodeLength
>d407	b1					.byte $b1
>d408	6c 64 61 2e 7a 78		Name0:	.text "lda.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54158					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d40e	06					.byte (("lda.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d40f	10					.byte WordFlags	;wh_Flags
>d410	03					.byte 3	;wh_CodeLength
>d411	0e					  .byte LinkDisplacement	; offset to previous nt
=$d412					XtPtr1 ::= *
=54158					WordListLink ::= Nt0 ; remember the nt of this word for later
.d412	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d415					Here1 = *	; remember here
>d410	03					.byte CodeLen	;patch wh_CodeLength
>d415	b5					.byte $b5
>d416	6c 64 61 2e 7a 78 69		Name0:	.text "lda.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54173					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d41d	27					.byte (("lda.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d41e	10					.byte WordFlags	;wh_Flags
>d41f	03					.byte 3	;wh_CodeLength
>d420	0f					  .byte LinkDisplacement	; offset to previous nt
=$d421					XtPtr1 ::= *
=54173					WordListLink ::= Nt0 ; remember the nt of this word for later
.d421	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d424					Here1 = *	; remember here
>d41f	03					.byte CodeLen	;patch wh_CodeLength
>d424	a1					.byte $a1
>d425	6c 64 78			Name0:	.text "ldx"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54184					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d428	03					.byte (("ldx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d429	10					.byte WordFlags	;wh_Flags
>d42a	03					.byte 3	;wh_CodeLength
>d42b	0b					  .byte LinkDisplacement	; offset to previous nt
=$d42c					XtPtr1 ::= *
=54184					WordListLink ::= Nt0 ; remember the nt of this word for later
.d42c	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d42f					Here1 = *	; remember here
>d42a	03					.byte CodeLen	;patch wh_CodeLength
>d42f	ae					.byte $ae
>d430	6c 64 78 2e 23			Name0:	.text "ldx.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54197					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d435	65					.byte (("ldx.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d436	10					.byte WordFlags	;wh_Flags
>d437	03					.byte 3	;wh_CodeLength
>d438	0d					  .byte LinkDisplacement	; offset to previous nt
=$d439					XtPtr1 ::= *
=54197					WordListLink ::= Nt0 ; remember the nt of this word for later
.d439	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d43c					Here1 = *	; remember here
>d437	03					.byte CodeLen	;patch wh_CodeLength
>d43c	a2					.byte $a2
>d43d	6c 64 78 2e 79			Name0:	.text "ldx.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54210					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d442	25					.byte (("ldx.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d443	10					.byte WordFlags	;wh_Flags
>d444	03					.byte 3	;wh_CodeLength
>d445	0d					  .byte LinkDisplacement	; offset to previous nt
=$d446					XtPtr1 ::= *
=54210					WordListLink ::= Nt0 ; remember the nt of this word for later
.d446	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d449					Here1 = *	; remember here
>d444	03					.byte CodeLen	;patch wh_CodeLength
>d449	be					.byte $be
>d44a	6c 64 78 2e 7a			Name0:	.text "ldx.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54223					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d44f	45					.byte (("ldx.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d450	10					.byte WordFlags	;wh_Flags
>d451	03					.byte 3	;wh_CodeLength
>d452	0d					  .byte LinkDisplacement	; offset to previous nt
=$d453					XtPtr1 ::= *
=54223					WordListLink ::= Nt0 ; remember the nt of this word for later
.d453	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d456					Here1 = *	; remember here
>d451	03					.byte CodeLen	;patch wh_CodeLength
>d456	a6					.byte $a6
>d457	6c 64 78 2e 7a 79		Name0:	.text "ldx.zy"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54237					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d45d	26					.byte (("ldx.zy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d45e	10					.byte WordFlags	;wh_Flags
>d45f	03					.byte 3	;wh_CodeLength
>d460	0e					  .byte LinkDisplacement	; offset to previous nt
=$d461					XtPtr1 ::= *
=54237					WordListLink ::= Nt0 ; remember the nt of this word for later
.d461	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d464					Here1 = *	; remember here
>d45f	03					.byte CodeLen	;patch wh_CodeLength
>d464	b6					.byte $b6
>d465	6c 64 79			Name0:	.text "ldy"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54248					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d468	23					.byte (("ldy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d469	10					.byte WordFlags	;wh_Flags
>d46a	03					.byte 3	;wh_CodeLength
>d46b	0b					  .byte LinkDisplacement	; offset to previous nt
=$d46c					XtPtr1 ::= *
=54248					WordListLink ::= Nt0 ; remember the nt of this word for later
.d46c	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d46f					Here1 = *	; remember here
>d46a	03					.byte CodeLen	;patch wh_CodeLength
>d46f	ac					.byte $ac
>d470	6c 64 79 2e 23			Name0:	.text "ldy.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54261					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d475	65					.byte (("ldy.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d476	10					.byte WordFlags	;wh_Flags
>d477	03					.byte 3	;wh_CodeLength
>d478	0d					  .byte LinkDisplacement	; offset to previous nt
=$d479					XtPtr1 ::= *
=54261					WordListLink ::= Nt0 ; remember the nt of this word for later
.d479	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d47c					Here1 = *	; remember here
>d477	03					.byte CodeLen	;patch wh_CodeLength
>d47c	a0					.byte $a0
>d47d	6c 64 79 2e 78			Name0:	.text "ldy.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54274					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d482	05					.byte (("ldy.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d483	10					.byte WordFlags	;wh_Flags
>d484	03					.byte 3	;wh_CodeLength
>d485	0d					  .byte LinkDisplacement	; offset to previous nt
=$d486					XtPtr1 ::= *
=54274					WordListLink ::= Nt0 ; remember the nt of this word for later
.d486	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d489					Here1 = *	; remember here
>d484	03					.byte CodeLen	;patch wh_CodeLength
>d489	bc					.byte $bc
>d48a	6c 64 79 2e 7a			Name0:	.text "ldy.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54287					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d48f	45					.byte (("ldy.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d490	10					.byte WordFlags	;wh_Flags
>d491	03					.byte 3	;wh_CodeLength
>d492	0d					  .byte LinkDisplacement	; offset to previous nt
=$d493					XtPtr1 ::= *
=54287					WordListLink ::= Nt0 ; remember the nt of this word for later
.d493	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d496					Here1 = *	; remember here
>d491	03					.byte CodeLen	;patch wh_CodeLength
>d496	a4					.byte $a4
>d497	6c 64 79 2e 7a 78		Name0:	.text "ldy.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54301					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d49d	06					.byte (("ldy.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d49e	10					.byte WordFlags	;wh_Flags
>d49f	03					.byte 3	;wh_CodeLength
>d4a0	0e					  .byte LinkDisplacement	; offset to previous nt
=$d4a1					XtPtr1 ::= *
=54301					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4a1	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d4a4					Here1 = *	; remember here
>d49f	03					.byte CodeLen	;patch wh_CodeLength
>d4a4	b4					.byte $b4
>d4a5	6c 73 72			Name0:	.text "lsr"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54312					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4a8	43					.byte (("lsr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d4a9	10					.byte WordFlags	;wh_Flags
>d4aa	03					.byte 3	;wh_CodeLength
>d4ab	0b					  .byte LinkDisplacement	; offset to previous nt
=$d4ac					XtPtr1 ::= *
=54312					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4ac	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d4af					Here1 = *	; remember here
>d4aa	03					.byte CodeLen	;patch wh_CodeLength
>d4af	4e					.byte $4e
>d4b0	6c 73 72 2e 61			Name0:	.text "lsr.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54325					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4b5	25					.byte (("lsr.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4b6	10					.byte WordFlags	;wh_Flags
>d4b7	03					.byte 3	;wh_CodeLength
>d4b8	0d					  .byte LinkDisplacement	; offset to previous nt
=$d4b9					XtPtr1 ::= *
=54325					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4b9	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d4bc					Here1 = *	; remember here
>d4b7	03					.byte CodeLen	;patch wh_CodeLength
>d4bc	4a					.byte $4a
>d4bd	6c 73 72 2e 78			Name0:	.text "lsr.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54338					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4c2	05					.byte (("lsr.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4c3	10					.byte WordFlags	;wh_Flags
>d4c4	03					.byte 3	;wh_CodeLength
>d4c5	0d					  .byte LinkDisplacement	; offset to previous nt
=$d4c6					XtPtr1 ::= *
=54338					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4c6	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d4c9					Here1 = *	; remember here
>d4c4	03					.byte CodeLen	;patch wh_CodeLength
>d4c9	5e					.byte $5e
>d4ca	6c 73 72 2e 7a			Name0:	.text "lsr.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54351					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4cf	45					.byte (("lsr.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4d0	10					.byte WordFlags	;wh_Flags
>d4d1	03					.byte 3	;wh_CodeLength
>d4d2	0d					  .byte LinkDisplacement	; offset to previous nt
=$d4d3					XtPtr1 ::= *
=54351					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4d3	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d4d6					Here1 = *	; remember here
>d4d1	03					.byte CodeLen	;patch wh_CodeLength
>d4d6	46					.byte $46
>d4d7	6c 73 72 2e 7a 78		Name0:	.text "lsr.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54365					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4dd	06					.byte (("lsr.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d4de	10					.byte WordFlags	;wh_Flags
>d4df	03					.byte 3	;wh_CodeLength
>d4e0	0e					  .byte LinkDisplacement	; offset to previous nt
=$d4e1					XtPtr1 ::= *
=54365					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4e1	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d4e4					Here1 = *	; remember here
>d4df	03					.byte CodeLen	;patch wh_CodeLength
>d4e4	56					.byte $56
>d4e5	6e 6f 70			Name0:	.text "nop"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54376					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4e8	03					.byte (("nop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d4e9	10					.byte WordFlags	;wh_Flags
>d4ea	03					.byte 3	;wh_CodeLength
>d4eb	0b					  .byte LinkDisplacement	; offset to previous nt
=$d4ec					XtPtr1 ::= *
=54376					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4ec	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d4ef					Here1 = *	; remember here
>d4ea	03					.byte CodeLen	;patch wh_CodeLength
>d4ef	ea					.byte $ea
>d4f0	6f 72 61			Name0:	.text "ora"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54387					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4f3	23					.byte (("ora"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d4f4	10					.byte WordFlags	;wh_Flags
>d4f5	03					.byte 3	;wh_CodeLength
>d4f6	0b					  .byte LinkDisplacement	; offset to previous nt
=$d4f7					XtPtr1 ::= *
=54387					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4f7	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d4fa					Here1 = *	; remember here
>d4f5	03					.byte CodeLen	;patch wh_CodeLength
>d4fa	0d					.byte $0d
>d4fb	6f 72 61 2e 23			Name0:	.text "ora.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54400					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d500	65					.byte (("ora.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d501	10					.byte WordFlags	;wh_Flags
>d502	03					.byte 3	;wh_CodeLength
>d503	0d					  .byte LinkDisplacement	; offset to previous nt
=$d504					XtPtr1 ::= *
=54400					WordListLink ::= Nt0 ; remember the nt of this word for later
.d504	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d507					Here1 = *	; remember here
>d502	03					.byte CodeLen	;patch wh_CodeLength
>d507	09					.byte $09
>d508	6f 72 61 2e 78			Name0:	.text "ora.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54413					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d50d	05					.byte (("ora.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d50e	10					.byte WordFlags	;wh_Flags
>d50f	03					.byte 3	;wh_CodeLength
>d510	0d					  .byte LinkDisplacement	; offset to previous nt
=$d511					XtPtr1 ::= *
=54413					WordListLink ::= Nt0 ; remember the nt of this word for later
.d511	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d514					Here1 = *	; remember here
>d50f	03					.byte CodeLen	;patch wh_CodeLength
>d514	1d					.byte $1d
>d515	6f 72 61 2e 79			Name0:	.text "ora.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54426					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d51a	25					.byte (("ora.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d51b	10					.byte WordFlags	;wh_Flags
>d51c	03					.byte 3	;wh_CodeLength
>d51d	0d					  .byte LinkDisplacement	; offset to previous nt
=$d51e					XtPtr1 ::= *
=54426					WordListLink ::= Nt0 ; remember the nt of this word for later
.d51e	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d521					Here1 = *	; remember here
>d51c	03					.byte CodeLen	;patch wh_CodeLength
>d521	19					.byte $19
>d522	6f 72 61 2e 7a			Name0:	.text "ora.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54439					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d527	45					.byte (("ora.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d528	10					.byte WordFlags	;wh_Flags
>d529	03					.byte 3	;wh_CodeLength
>d52a	0d					  .byte LinkDisplacement	; offset to previous nt
=$d52b					XtPtr1 ::= *
=54439					WordListLink ::= Nt0 ; remember the nt of this word for later
.d52b	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d52e					Here1 = *	; remember here
>d529	03					.byte CodeLen	;patch wh_CodeLength
>d52e	05					.byte $05
>d52f	6f 72 61 2e 7a 69 79		Name0:	.text "ora.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54454					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d536	27					.byte (("ora.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d537	10					.byte WordFlags	;wh_Flags
>d538	03					.byte 3	;wh_CodeLength
>d539	0f					  .byte LinkDisplacement	; offset to previous nt
=$d53a					XtPtr1 ::= *
=54454					WordListLink ::= Nt0 ; remember the nt of this word for later
.d53a	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d53d					Here1 = *	; remember here
>d538	03					.byte CodeLen	;patch wh_CodeLength
>d53d	11					.byte $11
>d53e	6f 72 61 2e 7a 78		Name0:	.text "ora.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54468					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d544	06					.byte (("ora.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d545	10					.byte WordFlags	;wh_Flags
>d546	03					.byte 3	;wh_CodeLength
>d547	0e					  .byte LinkDisplacement	; offset to previous nt
=$d548					XtPtr1 ::= *
=54468					WordListLink ::= Nt0 ; remember the nt of this word for later
.d548	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d54b					Here1 = *	; remember here
>d546	03					.byte CodeLen	;patch wh_CodeLength
>d54b	15					.byte $15
>d54c	6f 72 61 2e 7a 78 69		Name0:	.text "ora.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54483					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d553	27					.byte (("ora.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d554	10					.byte WordFlags	;wh_Flags
>d555	03					.byte 3	;wh_CodeLength
>d556	0f					  .byte LinkDisplacement	; offset to previous nt
=$d557					XtPtr1 ::= *
=54483					WordListLink ::= Nt0 ; remember the nt of this word for later
.d557	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d55a					Here1 = *	; remember here
>d555	03					.byte CodeLen	;patch wh_CodeLength
>d55a	01					.byte $01
>d55b	70 68 61			Name0:	.text "pha"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54494					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d55e	23					.byte (("pha"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d55f	10					.byte WordFlags	;wh_Flags
>d560	03					.byte 3	;wh_CodeLength
>d561	0b					  .byte LinkDisplacement	; offset to previous nt
=$d562					XtPtr1 ::= *
=54494					WordListLink ::= Nt0 ; remember the nt of this word for later
.d562	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d565					Here1 = *	; remember here
>d560	03					.byte CodeLen	;patch wh_CodeLength
>d565	48					.byte $48
>d566	70 68 70			Name0:	.text "php"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54505					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d569	03					.byte (("php"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d56a	10					.byte WordFlags	;wh_Flags
>d56b	03					.byte 3	;wh_CodeLength
>d56c	0b					  .byte LinkDisplacement	; offset to previous nt
=$d56d					XtPtr1 ::= *
=54505					WordListLink ::= Nt0 ; remember the nt of this word for later
.d56d	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d570					Here1 = *	; remember here
>d56b	03					.byte CodeLen	;patch wh_CodeLength
>d570	08					.byte $08
>d571	70 6c 61			Name0:	.text "pla"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54516					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d574	23					.byte (("pla"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d575	10					.byte WordFlags	;wh_Flags
>d576	03					.byte 3	;wh_CodeLength
>d577	0b					  .byte LinkDisplacement	; offset to previous nt
=$d578					XtPtr1 ::= *
=54516					WordListLink ::= Nt0 ; remember the nt of this word for later
.d578	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d57b					Here1 = *	; remember here
>d576	03					.byte CodeLen	;patch wh_CodeLength
>d57b	68					.byte $68
>d57c	70 6c 70			Name0:	.text "plp"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54527					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d57f	03					.byte (("plp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d580	10					.byte WordFlags	;wh_Flags
>d581	03					.byte 3	;wh_CodeLength
>d582	0b					  .byte LinkDisplacement	; offset to previous nt
=$d583					XtPtr1 ::= *
=54527					WordListLink ::= Nt0 ; remember the nt of this word for later
.d583	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d586					Here1 = *	; remember here
>d581	03					.byte CodeLen	;patch wh_CodeLength
>d586	28					.byte $28
>d587	72 6f 6c			Name0:	.text "rol"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54538					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d58a	83					.byte (("rol"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d58b	10					.byte WordFlags	;wh_Flags
>d58c	03					.byte 3	;wh_CodeLength
>d58d	0b					  .byte LinkDisplacement	; offset to previous nt
=$d58e					XtPtr1 ::= *
=54538					WordListLink ::= Nt0 ; remember the nt of this word for later
.d58e	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d591					Here1 = *	; remember here
>d58c	03					.byte CodeLen	;patch wh_CodeLength
>d591	2e					.byte $2e
>d592	72 6f 6c 2e 61			Name0:	.text "rol.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54551					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d597	25					.byte (("rol.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d598	10					.byte WordFlags	;wh_Flags
>d599	03					.byte 3	;wh_CodeLength
>d59a	0d					  .byte LinkDisplacement	; offset to previous nt
=$d59b					XtPtr1 ::= *
=54551					WordListLink ::= Nt0 ; remember the nt of this word for later
.d59b	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d59e					Here1 = *	; remember here
>d599	03					.byte CodeLen	;patch wh_CodeLength
>d59e	2a					.byte $2a
>d59f	72 6f 6c 2e 78			Name0:	.text "rol.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54564					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5a4	05					.byte (("rol.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5a5	10					.byte WordFlags	;wh_Flags
>d5a6	03					.byte 3	;wh_CodeLength
>d5a7	0d					  .byte LinkDisplacement	; offset to previous nt
=$d5a8					XtPtr1 ::= *
=54564					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5a8	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d5ab					Here1 = *	; remember here
>d5a6	03					.byte CodeLen	;patch wh_CodeLength
>d5ab	3e					.byte $3e
>d5ac	72 6f 6c 2e 7a			Name0:	.text "rol.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54577					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5b1	45					.byte (("rol.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5b2	10					.byte WordFlags	;wh_Flags
>d5b3	03					.byte 3	;wh_CodeLength
>d5b4	0d					  .byte LinkDisplacement	; offset to previous nt
=$d5b5					XtPtr1 ::= *
=54577					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5b5	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d5b8					Here1 = *	; remember here
>d5b3	03					.byte CodeLen	;patch wh_CodeLength
>d5b8	26					.byte $26
>d5b9	72 6f 6c 2e 7a 78		Name0:	.text "rol.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54591					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5bf	06					.byte (("rol.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d5c0	10					.byte WordFlags	;wh_Flags
>d5c1	03					.byte 3	;wh_CodeLength
>d5c2	0e					  .byte LinkDisplacement	; offset to previous nt
=$d5c3					XtPtr1 ::= *
=54591					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5c3	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d5c6					Here1 = *	; remember here
>d5c1	03					.byte CodeLen	;patch wh_CodeLength
>d5c6	36					.byte $36
>d5c7	72 6f 72			Name0:	.text "ror"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54602					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5ca	43					.byte (("ror"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d5cb	10					.byte WordFlags	;wh_Flags
>d5cc	03					.byte 3	;wh_CodeLength
>d5cd	0b					  .byte LinkDisplacement	; offset to previous nt
=$d5ce					XtPtr1 ::= *
=54602					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5ce	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d5d1					Here1 = *	; remember here
>d5cc	03					.byte CodeLen	;patch wh_CodeLength
>d5d1	6e					.byte $6e
>d5d2	72 6f 72 2e 61			Name0:	.text "ror.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54615					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5d7	25					.byte (("ror.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5d8	10					.byte WordFlags	;wh_Flags
>d5d9	03					.byte 3	;wh_CodeLength
>d5da	0d					  .byte LinkDisplacement	; offset to previous nt
=$d5db					XtPtr1 ::= *
=54615					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5db	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d5de					Here1 = *	; remember here
>d5d9	03					.byte CodeLen	;patch wh_CodeLength
>d5de	6a					.byte $6a
>d5df	72 6f 72 2e 78			Name0:	.text "ror.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54628					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5e4	05					.byte (("ror.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5e5	10					.byte WordFlags	;wh_Flags
>d5e6	03					.byte 3	;wh_CodeLength
>d5e7	0d					  .byte LinkDisplacement	; offset to previous nt
=$d5e8					XtPtr1 ::= *
=54628					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5e8	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d5eb					Here1 = *	; remember here
>d5e6	03					.byte CodeLen	;patch wh_CodeLength
>d5eb	7e					.byte $7e
>d5ec	72 6f 72 2e 7a			Name0:	.text "ror.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54641					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5f1	45					.byte (("ror.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5f2	10					.byte WordFlags	;wh_Flags
>d5f3	03					.byte 3	;wh_CodeLength
>d5f4	0d					  .byte LinkDisplacement	; offset to previous nt
=$d5f5					XtPtr1 ::= *
=54641					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5f5	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d5f8					Here1 = *	; remember here
>d5f3	03					.byte CodeLen	;patch wh_CodeLength
>d5f8	66					.byte $66
>d5f9	72 6f 72 2e 7a 78		Name0:	.text "ror.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54655					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5ff	06					.byte (("ror.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d600	10					.byte WordFlags	;wh_Flags
>d601	03					.byte 3	;wh_CodeLength
>d602	0e					  .byte LinkDisplacement	; offset to previous nt
=$d603					XtPtr1 ::= *
=54655					WordListLink ::= Nt0 ; remember the nt of this word for later
.d603	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d606					Here1 = *	; remember here
>d601	03					.byte CodeLen	;patch wh_CodeLength
>d606	76					.byte $76
>d607	72 74 69			Name0:	.text "rti"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54666					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d60a	23					.byte (("rti"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d60b	10					.byte WordFlags	;wh_Flags
>d60c	03					.byte 3	;wh_CodeLength
>d60d	0b					  .byte LinkDisplacement	; offset to previous nt
=$d60e					XtPtr1 ::= *
=54666					WordListLink ::= Nt0 ; remember the nt of this word for later
.d60e	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d611					Here1 = *	; remember here
>d60c	03					.byte CodeLen	;patch wh_CodeLength
>d611	40					.byte $40
>d612	72 74 73			Name0:	.text "rts"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54677					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d615	63					.byte (("rts"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d616	10					.byte WordFlags	;wh_Flags
>d617	03					.byte 3	;wh_CodeLength
>d618	0b					  .byte LinkDisplacement	; offset to previous nt
=$d619					XtPtr1 ::= *
=54677					WordListLink ::= Nt0 ; remember the nt of this word for later
.d619	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d61c					Here1 = *	; remember here
>d617	03					.byte CodeLen	;patch wh_CodeLength
>d61c	60					.byte $60
>d61d	73 62 63			Name0:	.text "sbc"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54688					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d620	63					.byte (("sbc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d621	10					.byte WordFlags	;wh_Flags
>d622	03					.byte 3	;wh_CodeLength
>d623	0b					  .byte LinkDisplacement	; offset to previous nt
=$d624					XtPtr1 ::= *
=54688					WordListLink ::= Nt0 ; remember the nt of this word for later
.d624	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d627					Here1 = *	; remember here
>d622	03					.byte CodeLen	;patch wh_CodeLength
>d627	ed					.byte $ed
>d628	73 62 63 2e 23			Name0:	.text "sbc.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54701					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d62d	65					.byte (("sbc.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d62e	10					.byte WordFlags	;wh_Flags
>d62f	03					.byte 3	;wh_CodeLength
>d630	0d					  .byte LinkDisplacement	; offset to previous nt
=$d631					XtPtr1 ::= *
=54701					WordListLink ::= Nt0 ; remember the nt of this word for later
.d631	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d634					Here1 = *	; remember here
>d62f	03					.byte CodeLen	;patch wh_CodeLength
>d634	e9					.byte $e9
>d635	73 62 63 2e 78			Name0:	.text "sbc.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54714					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d63a	05					.byte (("sbc.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d63b	10					.byte WordFlags	;wh_Flags
>d63c	03					.byte 3	;wh_CodeLength
>d63d	0d					  .byte LinkDisplacement	; offset to previous nt
=$d63e					XtPtr1 ::= *
=54714					WordListLink ::= Nt0 ; remember the nt of this word for later
.d63e	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d641					Here1 = *	; remember here
>d63c	03					.byte CodeLen	;patch wh_CodeLength
>d641	fd					.byte $fd
>d642	73 62 63 2e 79			Name0:	.text "sbc.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54727					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d647	25					.byte (("sbc.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d648	10					.byte WordFlags	;wh_Flags
>d649	03					.byte 3	;wh_CodeLength
>d64a	0d					  .byte LinkDisplacement	; offset to previous nt
=$d64b					XtPtr1 ::= *
=54727					WordListLink ::= Nt0 ; remember the nt of this word for later
.d64b	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d64e					Here1 = *	; remember here
>d649	03					.byte CodeLen	;patch wh_CodeLength
>d64e	f9					.byte $f9
>d64f	73 62 63 2e 7a			Name0:	.text "sbc.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54740					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d654	45					.byte (("sbc.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d655	10					.byte WordFlags	;wh_Flags
>d656	03					.byte 3	;wh_CodeLength
>d657	0d					  .byte LinkDisplacement	; offset to previous nt
=$d658					XtPtr1 ::= *
=54740					WordListLink ::= Nt0 ; remember the nt of this word for later
.d658	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d65b					Here1 = *	; remember here
>d656	03					.byte CodeLen	;patch wh_CodeLength
>d65b	e5					.byte $e5
>d65c	73 62 63 2e 7a 69 79		Name0:	.text "sbc.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54755					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d663	27					.byte (("sbc.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d664	10					.byte WordFlags	;wh_Flags
>d665	03					.byte 3	;wh_CodeLength
>d666	0f					  .byte LinkDisplacement	; offset to previous nt
=$d667					XtPtr1 ::= *
=54755					WordListLink ::= Nt0 ; remember the nt of this word for later
.d667	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d66a					Here1 = *	; remember here
>d665	03					.byte CodeLen	;patch wh_CodeLength
>d66a	f1					.byte $f1
>d66b	73 62 63 2e 7a 78		Name0:	.text "sbc.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54769					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d671	06					.byte (("sbc.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d672	10					.byte WordFlags	;wh_Flags
>d673	03					.byte 3	;wh_CodeLength
>d674	0e					  .byte LinkDisplacement	; offset to previous nt
=$d675					XtPtr1 ::= *
=54769					WordListLink ::= Nt0 ; remember the nt of this word for later
.d675	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d678					Here1 = *	; remember here
>d673	03					.byte CodeLen	;patch wh_CodeLength
>d678	f5					.byte $f5
>d679	73 62 63 2e 7a 78 69		Name0:	.text "sbc.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54784					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d680	27					.byte (("sbc.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d681	10					.byte WordFlags	;wh_Flags
>d682	03					.byte 3	;wh_CodeLength
>d683	0f					  .byte LinkDisplacement	; offset to previous nt
=$d684					XtPtr1 ::= *
=54784					WordListLink ::= Nt0 ; remember the nt of this word for later
.d684	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d687					Here1 = *	; remember here
>d682	03					.byte CodeLen	;patch wh_CodeLength
>d687	e1					.byte $e1
>d688	73 65 63			Name0:	.text "sec"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54795					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d68b	63					.byte (("sec"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d68c	10					.byte WordFlags	;wh_Flags
>d68d	03					.byte 3	;wh_CodeLength
>d68e	0b					  .byte LinkDisplacement	; offset to previous nt
=$d68f					XtPtr1 ::= *
=54795					WordListLink ::= Nt0 ; remember the nt of this word for later
.d68f	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d692					Here1 = *	; remember here
>d68d	03					.byte CodeLen	;patch wh_CodeLength
>d692	38					.byte $38
>d693	73 65 64			Name0:	.text "sed"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54806					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d696	83					.byte (("sed"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d697	10					.byte WordFlags	;wh_Flags
>d698	03					.byte 3	;wh_CodeLength
>d699	0b					  .byte LinkDisplacement	; offset to previous nt
=$d69a					XtPtr1 ::= *
=54806					WordListLink ::= Nt0 ; remember the nt of this word for later
.d69a	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d69d					Here1 = *	; remember here
>d698	03					.byte CodeLen	;patch wh_CodeLength
>d69d	f8					.byte $f8
>d69e	73 65 69			Name0:	.text "sei"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54817					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6a1	23					.byte (("sei"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d6a2	10					.byte WordFlags	;wh_Flags
>d6a3	03					.byte 3	;wh_CodeLength
>d6a4	0b					  .byte LinkDisplacement	; offset to previous nt
=$d6a5					XtPtr1 ::= *
=54817					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6a5	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d6a8					Here1 = *	; remember here
>d6a3	03					.byte CodeLen	;patch wh_CodeLength
>d6a8	78					.byte $78
>d6a9	73 74 61			Name0:	.text "sta"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54828					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6ac	23					.byte (("sta"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d6ad	10					.byte WordFlags	;wh_Flags
>d6ae	03					.byte 3	;wh_CodeLength
>d6af	0b					  .byte LinkDisplacement	; offset to previous nt
=$d6b0					XtPtr1 ::= *
=54828					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6b0	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d6b3					Here1 = *	; remember here
>d6ae	03					.byte CodeLen	;patch wh_CodeLength
>d6b3	8d					.byte $8d
>d6b4	73 74 61 2e 78			Name0:	.text "sta.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54841					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6b9	05					.byte (("sta.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d6ba	10					.byte WordFlags	;wh_Flags
>d6bb	03					.byte 3	;wh_CodeLength
>d6bc	0d					  .byte LinkDisplacement	; offset to previous nt
=$d6bd					XtPtr1 ::= *
=54841					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6bd	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d6c0					Here1 = *	; remember here
>d6bb	03					.byte CodeLen	;patch wh_CodeLength
>d6c0	9d					.byte $9d
>d6c1	73 74 61 2e 79			Name0:	.text "sta.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54854					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6c6	25					.byte (("sta.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d6c7	10					.byte WordFlags	;wh_Flags
>d6c8	03					.byte 3	;wh_CodeLength
>d6c9	0d					  .byte LinkDisplacement	; offset to previous nt
=$d6ca					XtPtr1 ::= *
=54854					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6ca	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d6cd					Here1 = *	; remember here
>d6c8	03					.byte CodeLen	;patch wh_CodeLength
>d6cd	99					.byte $99
>d6ce	73 74 61 2e 7a			Name0:	.text "sta.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54867					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6d3	45					.byte (("sta.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d6d4	10					.byte WordFlags	;wh_Flags
>d6d5	03					.byte 3	;wh_CodeLength
>d6d6	0d					  .byte LinkDisplacement	; offset to previous nt
=$d6d7					XtPtr1 ::= *
=54867					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6d7	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d6da					Here1 = *	; remember here
>d6d5	03					.byte CodeLen	;patch wh_CodeLength
>d6da	85					.byte $85
>d6db	73 74 61 2e 7a 69 79		Name0:	.text "sta.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54882					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6e2	27					.byte (("sta.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d6e3	10					.byte WordFlags	;wh_Flags
>d6e4	03					.byte 3	;wh_CodeLength
>d6e5	0f					  .byte LinkDisplacement	; offset to previous nt
=$d6e6					XtPtr1 ::= *
=54882					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6e6	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d6e9					Here1 = *	; remember here
>d6e4	03					.byte CodeLen	;patch wh_CodeLength
>d6e9	91					.byte $91
>d6ea	73 74 61 2e 7a 78		Name0:	.text "sta.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54896					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6f0	06					.byte (("sta.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d6f1	10					.byte WordFlags	;wh_Flags
>d6f2	03					.byte 3	;wh_CodeLength
>d6f3	0e					  .byte LinkDisplacement	; offset to previous nt
=$d6f4					XtPtr1 ::= *
=54896					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6f4	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d6f7					Here1 = *	; remember here
>d6f2	03					.byte CodeLen	;patch wh_CodeLength
>d6f7	95					.byte $95
>d6f8	73 74 61 2e 7a 78 69		Name0:	.text "sta.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54911					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6ff	27					.byte (("sta.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d700	10					.byte WordFlags	;wh_Flags
>d701	03					.byte 3	;wh_CodeLength
>d702	0f					  .byte LinkDisplacement	; offset to previous nt
=$d703					XtPtr1 ::= *
=54911					WordListLink ::= Nt0 ; remember the nt of this word for later
.d703	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d706					Here1 = *	; remember here
>d701	03					.byte CodeLen	;patch wh_CodeLength
>d706	81					.byte $81
>d707	73 74 78			Name0:	.text "stx"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54922					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d70a	03					.byte (("stx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d70b	10					.byte WordFlags	;wh_Flags
>d70c	03					.byte 3	;wh_CodeLength
>d70d	0b					  .byte LinkDisplacement	; offset to previous nt
=$d70e					XtPtr1 ::= *
=54922					WordListLink ::= Nt0 ; remember the nt of this word for later
.d70e	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d711					Here1 = *	; remember here
>d70c	03					.byte CodeLen	;patch wh_CodeLength
>d711	8e					.byte $8e
>d712	73 74 78 2e 7a			Name0:	.text "stx.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54935					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d717	45					.byte (("stx.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d718	10					.byte WordFlags	;wh_Flags
>d719	03					.byte 3	;wh_CodeLength
>d71a	0d					  .byte LinkDisplacement	; offset to previous nt
=$d71b					XtPtr1 ::= *
=54935					WordListLink ::= Nt0 ; remember the nt of this word for later
.d71b	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d71e					Here1 = *	; remember here
>d719	03					.byte CodeLen	;patch wh_CodeLength
>d71e	86					.byte $86
>d71f	73 74 78 2e 7a 79		Name0:	.text "stx.zy"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54949					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d725	26					.byte (("stx.zy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d726	10					.byte WordFlags	;wh_Flags
>d727	03					.byte 3	;wh_CodeLength
>d728	0e					  .byte LinkDisplacement	; offset to previous nt
=$d729					XtPtr1 ::= *
=54949					WordListLink ::= Nt0 ; remember the nt of this word for later
.d729	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d72c					Here1 = *	; remember here
>d727	03					.byte CodeLen	;patch wh_CodeLength
>d72c	96					.byte $96
>d72d	73 74 79			Name0:	.text "sty"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54960					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d730	23					.byte (("sty"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d731	10					.byte WordFlags	;wh_Flags
>d732	03					.byte 3	;wh_CodeLength
>d733	0b					  .byte LinkDisplacement	; offset to previous nt
=$d734					XtPtr1 ::= *
=54960					WordListLink ::= Nt0 ; remember the nt of this word for later
.d734	20 00 d0	jsr $d000		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d737					Here1 = *	; remember here
>d732	03					.byte CodeLen	;patch wh_CodeLength
>d737	8c					.byte $8c
>d738	73 74 79 2e 7a			Name0:	.text "sty.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54973					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d73d	45					.byte (("sty.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d73e	10					.byte WordFlags	;wh_Flags
>d73f	03					.byte 3	;wh_CodeLength
>d740	0d					  .byte LinkDisplacement	; offset to previous nt
=$d741					XtPtr1 ::= *
=54973					WordListLink ::= Nt0 ; remember the nt of this word for later
.d741	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d744					Here1 = *	; remember here
>d73f	03					.byte CodeLen	;patch wh_CodeLength
>d744	84					.byte $84
>d745	73 74 79 2e 7a 78		Name0:	.text "sty.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54987					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d74b	06					.byte (("sty.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d74c	10					.byte WordFlags	;wh_Flags
>d74d	03					.byte 3	;wh_CodeLength
>d74e	0e					  .byte LinkDisplacement	; offset to previous nt
=$d74f					XtPtr1 ::= *
=54987					WordListLink ::= Nt0 ; remember the nt of this word for later
.d74f	20 ee cf	jsr $cfee		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d752					Here1 = *	; remember here
>d74d	03					.byte CodeLen	;patch wh_CodeLength
>d752	94					.byte $94
>d753	74 61 78			Name0:	.text "tax"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54998					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d756	03					.byte (("tax"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d757	10					.byte WordFlags	;wh_Flags
>d758	03					.byte 3	;wh_CodeLength
>d759	0b					  .byte LinkDisplacement	; offset to previous nt
=$d75a					XtPtr1 ::= *
=54998					WordListLink ::= Nt0 ; remember the nt of this word for later
.d75a	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d75d					Here1 = *	; remember here
>d758	03					.byte CodeLen	;patch wh_CodeLength
>d75d	aa					.byte $aa
>d75e	74 61 79			Name0:	.text "tay"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55009					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d761	23					.byte (("tay"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d762	10					.byte WordFlags	;wh_Flags
>d763	03					.byte 3	;wh_CodeLength
>d764	0b					  .byte LinkDisplacement	; offset to previous nt
=$d765					XtPtr1 ::= *
=55009					WordListLink ::= Nt0 ; remember the nt of this word for later
.d765	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d768					Here1 = *	; remember here
>d763	03					.byte CodeLen	;patch wh_CodeLength
>d768	a8					.byte $a8
>d769	74 73 78			Name0:	.text "tsx"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55020					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d76c	03					.byte (("tsx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d76d	10					.byte WordFlags	;wh_Flags
>d76e	03					.byte 3	;wh_CodeLength
>d76f	0b					  .byte LinkDisplacement	; offset to previous nt
=$d770					XtPtr1 ::= *
=55020					WordListLink ::= Nt0 ; remember the nt of this word for later
.d770	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d773					Here1 = *	; remember here
>d76e	03					.byte CodeLen	;patch wh_CodeLength
>d773	ba					.byte $BA
>d774	74 78 61			Name0:	.text "txa"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55031					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d777	23					.byte (("txa"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d778	10					.byte WordFlags	;wh_Flags
>d779	03					.byte 3	;wh_CodeLength
>d77a	0b					  .byte LinkDisplacement	; offset to previous nt
=$d77b					XtPtr1 ::= *
=55031					WordListLink ::= Nt0 ; remember the nt of this word for later
.d77b	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d77e					Here1 = *	; remember here
>d779	03					.byte CodeLen	;patch wh_CodeLength
>d77e	8a					.byte $8a
>d77f	74 78 73			Name0:	.text "txs"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55042					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d782	63					.byte (("txs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d783	10					.byte WordFlags	;wh_Flags
>d784	03					.byte 3	;wh_CodeLength
>d785	0b					  .byte LinkDisplacement	; offset to previous nt
=$d786					XtPtr1 ::= *
=55042					WordListLink ::= Nt0 ; remember the nt of this word for later
.d786	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d789					Here1 = *	; remember here
>d784	03					.byte CodeLen	;patch wh_CodeLength
>d789	9a					.byte $9a
>d78a	74 79 61			Name0:	.text "tya"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55053					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d78d	23					.byte (("tya"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d78e	10					.byte WordFlags	;wh_Flags
>d78f	03					.byte 3	;wh_CodeLength
>d790	0b					  .byte LinkDisplacement	; offset to previous nt
=$d791					XtPtr1 ::= *
=55053					WordListLink ::= Nt0 ; remember the nt of this word for later
.d791	20 09 d0	jsr $d009		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d794					Here1 = *	; remember here
>d78f	03					.byte CodeLen	;patch wh_CodeLength
>d794	98					.byte $98
=55053					asm_table = WordListLink ; head of instruction word list for disassembler
>d795	70 75 73 68 2d 61		Name0:	.text "push-a"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=55067					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d79b	26					.byte (("push-a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d79c	18					.byte WordFlags	;wh_Flags
>d79d	03					.byte 3	;wh_CodeLength
>d79e	0e					  .byte LinkDisplacement	; offset to previous nt
=$d79f					XtPtr1 ::= *
=55067					WordListLink ::= Nt0 ; remember the nt of this word for later
.d79f	a9 dd		lda #$dd			lda #<PushZA
.d7a1	a0 b7		ldy #$b7			ldy #>PushZA
.d7a3	4c 1c cd	jmp $cd1c			jmp Jsr_Comma_YA
=7					CodeLen	.var *-XtPtr1
=$d7a6					Here1 = *	; remember here
>d79d	07					.byte CodeLen	;patch wh_CodeLength
>d7a6	2d 2d 3e			Name0:	.text "-->"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55081					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7a9	c3					.byte (("-->"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d7aa	18					.byte WordFlags	;wh_Flags
>d7ab	03					.byte 3	;wh_CodeLength
>d7ac	0e					  .byte LinkDisplacement	; offset to previous nt
=$d7ad					XtPtr1 ::= *
=55081					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7ad	4c 23 ca	jmp $ca23			jmp Here
=3					CodeLen	.var *-XtPtr1
=$d7b0					Here1 = *	; remember here
>d7ab	03					.byte CodeLen	;patch wh_CodeLength
>d7b0	3c 6a				Name0:	.text "<j"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=55090					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7b2	42					.byte (("<j"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$08					WordFlags ::= IM	; modifiable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>d7b3	08					.byte WordFlags	;wh_Flags
>d7b4	03					.byte 3	;wh_CodeLength
>d7b5	09					  .byte LinkDisplacement	; offset to previous nt
=$d7b6					XtPtr1 ::= *
=55090					WordListLink ::= Nt0 ; remember the nt of this word for later
=0					CodeLen	.var *-XtPtr1
=$d7b6					Here1 = *	; remember here
>d7b4	00					.byte CodeLen	;patch wh_CodeLength
.d7b6	60		rts				rts
>d7b7	3c 62				Name0:	.text "<b"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=55097					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7b9	42					.byte (("<b"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=7					LinkDisplacement = Nt0-WordListLink
>d7ba	18					.byte WordFlags	;wh_Flags
>d7bb	03					.byte 3	;wh_CodeLength
>d7bc	07					  .byte LinkDisplacement	; offset to previous nt
=$d7bd					XtPtr1 ::= *
=55097					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7bd					asm_back_branch:
.d7bd	20 23 ca	jsr $ca23			jsr Here		; ( addr-l addr-h )
.d7c0	20 b2 cb	jsr $cbb2			jsr Minus		; ( offset )
.d7c3	a9 fe		lda #$fe			lda #$fe
.d7c5	4c 45 ca	jmp $ca45			jmp Minus_A
=11					CodeLen	.var *-XtPtr1
=$d7c8					Here1 = *	; remember here
>d7bb	0b					.byte CodeLen	;patch wh_CodeLength
>d7c8	44 69 73 41 73 6d		Name0:	.text "DisAsm"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=55118					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7ce	a6					.byte (("DisAsm"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>d7cf	10					.byte WordFlags	;wh_Flags
>d7d0	03					.byte 3	;wh_CodeLength
>d7d1	15					  .byte LinkDisplacement	; offset to previous nt
=$d7d2					XtPtr1 ::= *
=55118					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7d2					DisAsm:
.d7d2	20 6d c4	jsr $c46d			jsr Bounds		; ( addr_end addr )
.d7d5					_instr:
.d7d5	20 2c b4	jsr $b42c			jsr underflow_2
.d7d8	b5 24		lda $24,x			lda DStack+0,x		; addr >= addr_end?
.d7da	d5 26		cmp $26,x			cmp DStack+2,x
.d7dc	b5 25		lda $25,x			lda DStack+1,x
.d7de	f5 27		sbc $27,x			sbc DStack+3,x
.d7e0	90 03		bcc $d7e5			bcc +
.d7e2	4c 31 c5	jmp $c531			jmp Two_drop		; discard parms & return
.d7e5					+
.d7e5	20 69 ab	jsr $ab69			jsr CR			; new line
.d7e8	20 51 cf	jsr $cf51			jsr Dup			; print address
.d7eb	20 09 a9	jsr $a909			jsr Dot_Hex
.d7ee	20 c7 cd	jsr $cdc7			jsr Space
.d7f1	a1 24		lda ($24,x)			lda (DStack+0,x)	; print opcode byte
.d7f3	20 30 d9	jsr $d930			jsr _print_a
.d7f6	a1 24		lda ($24,x)			lda (DStack+0,x)	; save opcode
.d7f8	85 18		sta $18				sta tmp3
.d7fa	20 55 ca	jsr $ca55			jsr One_plus
.d7fd	a9 0d		lda #$0d			lda #<asm_table		; for each asm opcode word
.d7ff	a0 d7		ldy #$d7			ldy #>asm_table
.d801	85 14		sta $14				sta tmp1+0
.d803	84 15		sty $15				sty tmp1+1
.d805	d0 05		bne $d80c			bne _WTest
.d807	20 96 82	jsr $8296	_WNext:		jsr LinkNext		;   next entry
.d80a	f0 2b		beq $d837			beq _unknown2
.d80c	20 a5 bd	jsr $bda5	_WTest:		jsr NameToIntTmp	; tmp2= xt
.d80f	a0 03		ldy #$03			ldy #3			;   opcode match?
.d811	b1 16		lda ($16),y			lda (tmp2),y
.d813	c5 18		cmp $18				cmp tmp3
.d815	d0 f0		bne $d807			bne _WNext
.d817	a5 18		lda $18				lda tmp3		; save opcode
.d819	48		pha				pha
.d81a	a5 15		lda $15				lda tmp1+1		; save its nt
.d81c	48		pha				pha
.d81d	a5 14		lda $14				lda tmp1+0
.d81f	48		pha				pha
.d820	a0 01		ldy #$01			ldy #1			; get processor routine addr lo byte from JSR
.d822	b1 16		lda ($16),y			lda (tmp2),y
.d824	c9 09		cmp #$09			cmp #<asm_0		; goto disasm processor
.d826	f0 1a		beq $d842			beq _c0
.d828	c9 ee		cmp #$ee			cmp #<asm_1
.d82a	f0 4c		beq $d878			beq _c1
.d82c	c9 00		cmp #$00			cmp #<asm_2
.d82e	f0 64		beq $d894			beq _c2
.d830	c9 ce		cmp #$ce			cmp #<asm_r
.d832	f0 1b		beq $d84f			beq _cr
.d834					_unknown:
.d834	68		pla				pla			; RDrop nt
.d835	68		pla				pla
.d836	68		pla				pla			; RDrop opcode
.d837	20 11 d9	jsr $d911	_unknown2:	jsr _tab		; to source area
.d83a	a9 3f		lda #$3f			lda #'?'
.d83c	20 bb cd	jsr $cdbb			jsr Emit_A
.d83f	4c d5 d7	jmp $d7d5			jmp _instr
.d842					_c0:
.d842	20 11 d9	jsr $d911			jsr _tab		; to source area
.d845	68		pla				pla			; get opcode word nt
.d846	a8		tay				tay
.d847	68		pla				pla
.d848	20 16 d9	jsr $d916			jsr _print_opcode
.d84b	68		pla				pla			; discard opcode
.d84c	4c d5 d7	jmp $d7d5			jmp _instr
.d84f					_cr:
.d84f	20 27 d9	jsr $d927			jsr _get_byte		; get displacement byte
.d852	a0 00		ldy #$00			ldy #0			; sign extend displacement
.d854	09 00		ora #$00			ora #0
.d856	10 01		bpl $d859			bpl +
.d858	88		dey				dey
.d859	20 ae b7	jsr $b7ae	+		jsr PushYA
.d85c	20 51 cf	jsr $cf51			jsr Dup			; save for TypeSymbol
.d85f	20 11 d9	jsr $d911			jsr _tab		; to source area
.d862	20 ca cb	jsr $cbca			jsr Dot			; print dest address
.d865	68		pla				pla			; get opcode word nt
.d866	a8		tay				tay
.d867	68		pla				pla
.d868	20 16 d9	jsr $d916			jsr _print_opcode
.d86b	68		pla				pla			; discard opcode
.d86c	20 2a cf	jsr $cf2a			jsr Over		; calc dest addr
.d86f	20 9a cb	jsr $cb9a			jsr Plus
.d872	20 99 81	jsr $8199			jsr TypeSymbol		; print dest addr symbolic
.d875	4c d5 d7	jmp $d7d5			jmp _instr
.d878					_c1:
.d878	20 27 d9	jsr $d927			jsr _get_byte		; get operand
.d87b	20 dd b7	jsr $b7dd			jsr PushZA
.d87e	20 11 d9	jsr $d911			jsr _tab		; to source area
.d881	20 51 cf	jsr $cf51			jsr Dup
.d884	20 fb cb	jsr $cbfb			jsr U_Dot		; print operand
.d887	68		pla				pla			; get opcode word nt
.d888	a8		tay				tay
.d889	68		pla				pla
.d88a	20 16 d9	jsr $d916			jsr _print_opcode
.d88d	68		pla				pla			; discard opcode
.d88e	20 99 81	jsr $8199			jsr TypeSymbol
.d891	4c d5 d7	jmp $d7d5			jmp _instr
.d894					_c2:
.d894	20 27 d9	jsr $d927			jsr _get_byte		; get operand lo byte
.d897	48		pha				pha
.d898	20 27 d9	jsr $d927			jsr _get_byte		; get operand hi byte
.d89b	ca		dex				dex			; push operand bytes
.d89c	ca		dex				dex
.d89d	95 25		sta $25,x			sta DStack+1,x
.d89f	68		pla				pla
.d8a0	95 24		sta $24,x			sta DStack+0,x
.d8a2	20 11 d9	jsr $d911			jsr _tab		; to source area
.d8a5	20 51 cf	jsr $cf51			jsr Dup
.d8a8	20 fb cb	jsr $cbfb			jsr U_Dot		; print operand
.d8ab	68		pla				pla			; AY= opcode word nt
.d8ac	a8		tay				tay
.d8ad	68		pla				pla
.d8ae	20 16 d9	jsr $d916			jsr _print_opcode
.d8b1	20 51 cf	jsr $cf51			jsr Dup
.d8b4	20 99 81	jsr $8199			jsr TypeSymbol		; print operand as symbol
.d8b7	68		pla				pla			; get opcode
.d8b8	c9 20		cmp #$20			cmp #$20		;  JSR
.d8ba	f0 09		beq $d8c5			beq _jsr
.d8bc	e8		inx		_jdrop:		inx			; Drop operand
.d8bd	e8		inx				inx
.d8be	4c d5 d7	jmp $d7d5			jmp _instr		; ( addr_end addr )
.d8c1	e8		inx		_2drop:		inx			; Drop jsr_nt
.d8c2	e8		inx				inx
.d8c3	d0 f7		bne $d8bc			bne _jdrop
.d8c5					_jsr:
.d8c5	20 ef b3	jsr $b3ef			jsr PopYA		; pop JSR operand
.d8c8	c9 a2		cmp #$a2			cmp #<sliteral_runtime	; string literal?
.d8ca	d0 42		bne $d90e			bne _not_sliteral
.d8cc	c0 b8		cpy #$b8			cpy #>sliteral_runtime
.d8ce	d0 3e		bne $d90e			bne _not_sliteral
.d8d0	20 69 ab	jsr $ab69			jsr CR
.d8d3	20 51 cf	jsr $cf51			jsr Dup			; ( addr_end addr addr )
.d8d6	20 09 a9	jsr $a909			jsr Dot_Hex
.d8d9	20 c7 cd	jsr $cdc7			jsr Space
.d8dc	20 51 cf	jsr $cf51			jsr Dup			; ( addr_end ? addr )
.d8df	20 27 d9	jsr $d927			jsr _get_byte		; get JMP opcode
.d8e2	20 27 d9	jsr $d927			jsr _get_byte		; get JMP addr lo byte
.d8e5	95 26		sta $26,x			sta DStack+2,x
.d8e7	20 27 d9	jsr $d927			jsr _get_byte		; get JMP addr hi byte
.d8ea	95 27		sta $27,x			sta DStack+3,x		; ( addr_end string_end addr )
.d8ec	20 69 ab	jsr $ab69			jsr CR
.d8ef	20 51 cf	jsr $cf51			jsr Dup
.d8f2	20 09 a9	jsr $a909			jsr Dot_Hex
.d8f5	20 c7 cd	jsr $cdc7			jsr Space
.d8f8	b5 24		lda $24,x	_slit_11:	lda DStack+0,x		; done with string data?
.d8fa	d5 26		cmp $26,x			cmp DStack+2,x
.d8fc	b5 25		lda $25,x			lda DStack+1,x
.d8fe	f5 27		sbc $27,x			sbc DStack+3,x
.d900	b0 06		bcs $d908			bcs _slit_19
.d902	20 27 d9	jsr $d927			jsr _get_byte
.d905	4c f8 d8	jmp $d8f8			jmp _slit_11
.d908					_slit_19:
.d908	20 8b c9	jsr $c98b			jsr Nip			; ( addr_end addr )
.d90b	4c d5 d7	jmp $d7d5			jmp _instr
.d90e					_not_sliteral:
.d90e	4c d5 d7	jmp $d7d5			jmp _instr
.d911					_tab:
.d911	a9 09		lda #$09			lda #9
.d913	4c bb cd	jmp $cdbb			jmp Emit_A
.d916					_print_opcode:
.d916	20 5f cf	jsr $cf5f			jsr PushAY		; save opcode word nt
.d919	20 c7 cd	jsr $cdc7			jsr Space
.d91c	20 e1 bd	jsr $bde1			jsr Name_To_String	; get name string
.d91f	4c d3 cd	jmp $cdd3			jmp Type		; type word name
.d922					_get_byte_silent:
.d922	a1 24		lda ($24,x)			lda (DStack+0,x)
.d924	4c 55 ca	jmp $ca55			jmp One_plus
.d927					_get_byte:
.d927	20 22 d9	jsr $d922			jsr _get_byte_silent
.d92a	48		pha				pha
.d92b	20 30 d9	jsr $d930			jsr _print_a
.d92e	68		pla				pla
.d92f	60		rts				rts
.d930					_print_a:
.d930	20 dd b7	jsr $b7dd			jsr PushZA
.d933	20 e8 a8	jsr $a8e8			jsr C_Dot_Hex
.d936	4c c7 cd	jmp $cdc7			jmp Space
=55118					assembler_dictionary_start = WordListLink ; END of ASSEMBLER-WORDLIST
=0					WordListLink .var 0	; start wordlist
>d939	6c				Name0:	.text "l"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=55482					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d93a	81					.byte (("l"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=55482					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>d93b	11					.byte WordFlags	;wh_Flags
>d93c	03					.byte 3	;wh_CodeLength
>d93d	00 00					  .word WordListLink
=$d93f					XtPtr1 ::= *
=55482					WordListLink ::= Nt0 ; remember the nt of this word for later
.d93f	4c c1 a4	jmp $a4c1	Editor_l:	jmp ListScr
=3					CodeLen	.var *-XtPtr1
=$d942					Here1 = *	; remember here
>d93c	03					.byte CodeLen	;patch wh_CodeLength
.d942					Editor_Screen_Helper:
.d942	20 51 cf	jsr $cf51			jsr Dup
.d945	20 d3 a2	jsr $a2d3			jsr Scr
.d948	20 ac ce	jsr $ceac			jsr Store
.d94b	4c de a3	jmp $a3de			jmp Buffer
>d94e	65 6e 74 65 72 2d 73 63		Name0:	.text "enter-screen"	;  name of word as a string, ending at wh_NameLastChar
>d956	72 65 65 6e
=12					NameLength = *-Name0
=55514					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d95a	cc					.byte (("enter-screen"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>d95b	10					.byte WordFlags	;wh_Flags
>d95c	03					.byte 3	;wh_CodeLength
>d95d	20					  .byte LinkDisplacement	; offset to previous nt
=$d95e					XtPtr1 ::= *
=55514					WordListLink ::= Nt0 ; remember the nt of this word for later
.d95e					Editor_Enter_Screen:
.d95e	20 42 d9	jsr $d942			jsr Editor_Screen_Helper
.d961	a9 00		lda #$00			lda #0			; Overwrite the lines one at a time.
.d963	95 24		sta $24,x	_loop:		sta DStack+0,x
.d965	20 dd b7	jsr $b7dd			jsr PushZA		; Put the current line number on the stack.
.d968	20 c8 d9	jsr $d9c8			jsr Editor_o		; prompt for overwrite.
.d96b	f6 24		inc $24,x			inc DStack+0,x		; Move on to the next line.
.d96d	b5 24		lda $24,x			lda DStack+0,x
.d96f	c9 10		cmp #$10			cmp #16
.d971	90 f0		bcc $d963			bcc _loop
.d973	e8		inx				inx			; Drop work area
.d974	e8		inx				inx
=23					CodeLen	.var *-XtPtr1
=$d975					Here1 = *	; remember here
>d95c	17					.byte CodeLen	;patch wh_CodeLength
.d975	60		rts				rts
>d976	6c 69 6e 65			Name0:	.text "line"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=55546					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d97a	a4					.byte (("line"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>d97b	10					.byte WordFlags	;wh_Flags
>d97c	03					.byte 3	;wh_CodeLength
>d97d	20					  .byte LinkDisplacement	; offset to previous nt
=$d97e					XtPtr1 ::= *
=55546					WordListLink ::= Nt0 ; remember the nt of this word for later
.d97e					Editor_line:
.d97e	a9 06		lda #$06			lda #6		; Multiply the TOS by 64 (chars/line) to compute offset.
.d980	20 3d cb	jsr $cb3d			jsr LShift_A	; *64 is same as left shift 6 times.
.d983	20 d3 a2	jsr $a2d3			jsr Scr
.d986	20 93 ce	jsr $ce93			jsr Fetch
.d989	20 76 a3	jsr $a376			jsr Block
.d98c	4c 9a cb	jmp $cb9a			jmp Plus
=17					CodeLen	.var *-XtPtr1
=$d98f					Here1 = *	; remember here
>d97c	11					.byte CodeLen	;patch wh_CodeLength
>d98f	65 72 61 73 65 2d 73 63		Name0:	.text "erase-screen"	;  name of word as a string, ending at wh_NameLastChar
>d997	72 65 65 6e
=12					NameLength = *-Name0
=55579					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d99b	cc					.byte (("erase-screen"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>d99c	10					.byte WordFlags	;wh_Flags
>d99d	03					.byte 3	;wh_CodeLength
>d99e	21					  .byte LinkDisplacement	; offset to previous nt
=$d99f					XtPtr1 ::= *
=55579					WordListLink ::= Nt0 ; remember the nt of this word for later
.d99f					Editor_Erase_Screen:
.d99f	20 42 d9	jsr $d942			jsr Editor_Screen_Helper
.d9a2	a9 00		lda #$00			lda #<1024
.d9a4	a0 04		ldy #$04			ldy #>1024
.d9a6	20 ae b7	jsr $b7ae			jsr PushYA
.d9a9	20 28 be	jsr $be28			jsr Blank		; Erase the entire block (fill with spaces).
.d9ac	4c cb a3	jmp $a3cb			jmp Update		; Mark buffer as updated.
=16					CodeLen	.var *-XtPtr1
=$d9af					Here1 = *	; remember here
>d99d	10					.byte CodeLen	;patch wh_CodeLength
>d9af	65 6c				Name0:	.text "el"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=55601					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d9b1	82					.byte (("el"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>d9b2	10					.byte WordFlags	;wh_Flags
>d9b3	03					.byte 3	;wh_CodeLength
>d9b4	16					  .byte LinkDisplacement	; offset to previous nt
=$d9b5					XtPtr1 ::= *
=55601					WordListLink ::= Nt0 ; remember the nt of this word for later
.d9b5					Editor_el:
.d9b5	20 7e d9	jsr $d97e			jsr Editor_line
.d9b8	a9 40		lda #$40			lda #64			;(# of chars/line)
.d9ba	20 dd b7	jsr $b7dd			jsr PushZA
.d9bd	20 28 be	jsr $be28			jsr Blank		; Fill with spaces.
.d9c0	4c cb a3	jmp $a3cb			jmp Update		; Mark buffer as updated.
=14					CodeLen	.var *-XtPtr1
=$d9c3					Here1 = *	; remember here
>d9b3	0e					.byte CodeLen	;patch wh_CodeLength
>d9c3	6f				Name0:	.text "o"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=55620					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d9c4	e1					.byte (("o"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>d9c5	10					.byte WordFlags	;wh_Flags
>d9c6	03					.byte 3	;wh_CodeLength
>d9c7	13					  .byte LinkDisplacement	; offset to previous nt
=$d9c8					XtPtr1 ::= *
=55620					WordListLink ::= Nt0 ; remember the nt of this word for later
.d9c8					Editor_o:
.d9c8	20 69 ab	jsr $ab69			jsr CR
.d9cb	20 51 cf	jsr $cf51			jsr Dup
.d9ce	a9 02		lda #$02			lda #2
.d9d0	20 2d cc	jsr $cc2d			jsr U_Dot_R_A
.d9d3	20 c7 cd	jsr $cdc7			jsr Space
.d9d6	a9 2a		lda #$2a			lda #'*'
.d9d8	20 bb cd	jsr $cdbb			jsr Emit_A
.d9db	20 c7 cd	jsr $cdc7			jsr Space
.d9de	20 7e d9	jsr $d97e			jsr Editor_line
.d9e1	20 51 cf	jsr $cf51			jsr Dup		; Save a copy of the line address for later.
.d9e4	a9 40		lda #$40			lda #64		; chars/line
.d9e6	20 dd b7	jsr $b7dd			jsr PushZA
.d9e9	20 a5 c2	jsr $c2a5			jsr Accept
.d9ec	20 51 cf	jsr $cf51			jsr Dup
.d9ef	20 71 ce	jsr $ce71			jsr Not_Rot
.d9f2	20 9a cb	jsr $cb9a			jsr Plus
.d9f5	a9 40		lda #$40			lda #64		; chars/line
.d9f7	20 dd b7	jsr $b7dd			jsr PushZA
.d9fa	20 4c ce	jsr $ce4c			jsr Rot
.d9fd	20 b2 cb	jsr $cbb2			jsr Minus
.da00	20 28 be	jsr $be28			jsr Blank
.da03	4c cb a3	jmp $a3cb			jmp Update
=62					CodeLen	.var *-XtPtr1
=$da06					Here1 = *	; remember here
>d9c6	3e					.byte CodeLen	;patch wh_CodeLength
=55620					editor_dictionary_start = WordListLink ; END of EDITOR-WORDLIST

;******  Processing file: platform/../strings.asm

>da06	20 6f 6b 00			str_ok:         .text " ok", 0         ; note space at beginning
>da0a	20 63 6f 6d 70 69 6c 65		str_compiled:   .text " compiled", 0   ; note space at beginning
>da12	64 00
>da14	72 65 64 65 66 69 6e 65		str_redefined:  .text "redefined ", 0  ; note space at end
>da1c	64 20 00
>da1f	66 6c 61 67 73 3a 00		str_see_flags:  .text "flags:", 0
>da26	6e 74 3a 20 24 00		str_see_nt:     .text "nt: $", 0
>da2c	78 74 3a 20 24 00		str_see_xt:     .text "xt: $", 0
>da32	73 69 7a 65 3a 20 23 00		str_see_size:   .text "size: #", 0
.da3a					Exception_Text_List:
>da3a	ff 00					.text $100+err_Abort,0
>da3c	fe 00					.text $100+err_AbortQuote,0
>da3e	fd 53 74 61 63 6b 20 4f			.text $100+err_Stack_Overflow,"Stack Overflow",0
>da46	76 65 72 66 6c 6f 77 00
>da4e	fc 53 74 61 63 6b 20 55			.text $100+err_Stack_Underflow,"Stack Underflow",0
>da56	6e 64 65 72 66 6c 6f 77 00
>da5f	f9 64 6f 2d 6c 6f 6f 70			.text $100+err_DoLoop_TooDeep,"do-loops nested too deeply during execution",0
>da67	73 20 6e 65 73 74 65 64 20 74 6f 6f 20 64 65 65
>da77	70 6c 79 20 64 75 72 69 6e 67 20 65 78 65 63 75
>da87	74 69 6f 6e 00
>da8c	f6 44 69 76 69 64 65 20			.text $100+err_DivideBy0,"Divide by 0",0
>da94	62 79 20 30 00
>da99	f5 6f 75 74 20 6f 66 20			.text $100+err_OutOfRange,"out of range",0
>daa1	72 61 6e 67 65 00
>daa7	f4 61 72 67 75 6d 65 6e			.text $100+err_ArgTypeMismatch,"argument type mismatch",0
>daaf	74 20 74 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>dabf	f3 55 6e 64 65 66 69 6e			.text $100+err_UndefinedWord,"Undefined word",0
>dac7	65 64 20 77 6f 72 64 00
>dacf	f2 49 6e 74 65 72 70 72			.text $100+err_CompileOnly,"Interpreting a Compile-only word",0
>dad7	65 74 69 6e 67 20 61 20 43 6f 6d 70 69 6c 65 2d
>dae7	6f 6e 6c 79 20 77 6f 72 64 00
>daf1	eb 75 6e 73 75 70 70 6f			.text $100+err_Unsupported,"unsupported operation",0 ;  (e.g., AT-XY on a too-dumb terminal)
>daf9	72 74 65 64 20 6f 70 65 72 61 74 69 6f 6e 00
>db08	ea 63 6f 6e 74 72 6f 6c			.text $100+err_ControlMismatch,"control structure mismatch",0
>db10	20 73 74 72 75 63 74 75 72 65 20 6d 69 73 6d 61
>db20	74 63 68 00
>db24	e0 69 6e 76 61 6c 69 64			.text $100+err_InvalidName,"invalid name",0 ; argument (e.g., TO name)
>db2c	20 6e 61 6d 65 00
>db32	df 62 6c 6f 63 6b 20 72			.text $100+err_BlockRead,"block read",0
>db3a	65 61 64 00
>db3e	de 62 6c 6f 63 6b 20 77			.text $100+err_BlockWrite,"block write",0
>db46	72 69 74 65 00
>db4b	d6 46 50 20 64 69 76 69			.text $100+err_FPDivideBy0,"FP divide by zero",0
>db53	64 65 20 62 79 20 7a 65 72 6f 00
>db5e	d5 46 50 20 72 65 73 75			.text $100+err_FPOutOfRange,"FP result out of range",0
>db66	6c 74 20 6f 75 74 20 6f 66 20 72 61 6e 67 65 00
>db76	d4 46 50 20 73 74 61 63			.text $100+err_FPStackOverflow,"FP stack overflow",0
>db7e	6b 20 6f 76 65 72 66 6c 6f 77 00
>db89	d3 46 50 20 73 74 61 63			.text $100+err_FPStackUnderflow,"FP stack underflow",0
>db91	6b 20 75 6e 64 65 72 66 6c 6f 77 00
>db9d	d2 46 50 20 69 6e 76 61			.text $100+err_FPInvalidArg,"FP invalid argument",0
>dba5	6c 69 64 20 61 72 67 75 6d 65 6e 74 00
>dbb2	ca 46 50 20 75 6e 64 65			.text $100+err_FPUnderflow,"FP underflow",0
>dbba	72 66 6c 6f 77 00
>dbc0	c5 41 4c 4c 4f 43 41 54			.text $100+err_Allocate,"ALLOCATE",0
>dbc8	45 00
>dbca	c4 46 52 45 45 00			.text $100+err_Free,"FREE",0
>dbd0	6b 52 65 66 69 6c 6c 00			.text $100+err_Refill,"Refill",0
>dbd8	6a 44 65 66 65 72 20 6e			.text $100+err_Defer,"Defer not set",0
>dbe0	6f 74 20 73 65 74 00
>dbe7	69 41 6c 72 65 61 64 79			.text $100+err_AlreadyInterpreting,"Already interpreting",0
>dbef	20 69 6e 74 65 72 70 72 65 74 69 6e 67 00
>dbfd	68 41 6c 72 65 61 64 79			.text $100+err_AlreadyCompiling,"Already compiling",0
>dc05	20 63 6f 6d 70 69 6c 69 6e 67 00
>dc10	66 4e 6f 20 77 6f 72 64			.text $100+err_TooManyWordlists,"No wordlists available",0
>dc18	6c 69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>dc28	00					.text 0 ; end of list

;******  Return to file: platform/../taliforth.asm


;******  Return to file: platform/platform-py65mon.asm

>0766					hist_buff: .fill 8*128	; Input History for ACCEPT
.0b66					cp0:
=$f001					c65_putc	= $f001 ;  putc    Write here to send the byte to stdout
=$f003					c65_kbhit	= $f003 ;  kbit    Return non-zero if key ready to fetch with getc
=$f004					c65_getc	= $f004 ;  getc    Non-blocking read from stdin, returns 0 if no byte ready
=$f006					c65_start	= $f006 ;  start   Reading here starts the cycle counter
=$f007					c65_stop	= $f007 ;  stop    Reading here stops the cycle counter
=$f008					c65_cycles	= $f008 ; cycles  Current 32 bit cycle count in NUXI order
=$f010					c65_blkio	= $f010 ;  blkio   Write here to execute a block IO action (see below)
=$f011					c65_status	= $f011 ;  status  Read block IO status here
=$f012					c65_blknum	= $f012 ; blknum  word, Block number to read/write
=$f014					c65_buffer	= $f014 ; buffer  word, Start of 1024 byte memory buffer to read/write
.f100					v_nmi:
.f100					v_reset:
.f100					v_irq:
.f100					kernel_init:
.f100	78		sei		                sei             ; Disable interrupts
.f101	a2 00		ldx #$00	                ldx #0
.f103	bd 83 f1	lda $f183,x	-               lda s_kernel_id,x
.f106	f0 06		beq $f10e	                beq _done
.f108	20 21 f1	jsr $f121	                jsr kernel_putc
.f10b	e8		inx		                inx
.f10c	d0 f5		bne $f103	                bne -
.f10e					_done:
.f10e	2c 06 f0	bit $f006			bit c65_start		; start the cycle counter
.f111	4c ff a0	jmp $a0ff	                jmp forth
.f114					kernel_getc:
.f114					_loop:
.f114	ee 35 03	inc $0335	                inc RndState+0	; randomize
.f117	ad 04 f0	lda $f004	                lda c65_getc
.f11a	f0 f8		beq $f114	                beq _loop
.f11c	60		rts		                rts
.f11d					kernel_havekey:
.f11d	ad 03 f0	lda $f003			lda c65_kbhit
.f120	60		rts				rts
.f121					kernel_putc:
.f121	8d 01 f0	sta $f001	                sta c65_putc
.f124	60		rts		                rts
.f125					platform_bye:
.f125	00		brk #		                brk
.f126					platform_CCAt:
.f126	ca		dex				dex			; allot DStack space
.f127	ca		dex				dex
.f128	ca		dex				dex
.f129	ca		dex				dex
.f12a	2c 07 f0	bit $f007			bit c65_stop		; stop the cycle counter so we can read it
.f12d	ad 08 f0	lda $f008			lda c65_cycles+0	; cycles  Current 32 bit cycle count in NUXI order
.f130	95 24		sta $24,x			sta DStack+0,x
.f132	ad 09 f0	lda $f009			lda c65_cycles+1
.f135	95 25		sta $25,x			sta DStack+1,x
.f137	ad 0a f0	lda $f00a			lda c65_cycles+2
.f13a	95 26		sta $26,x			sta DStack+2,x
.f13c	ad 0b f0	lda $f00b			lda c65_cycles+3
.f13f	95 27		sta $27,x			sta DStack+3,x
.f141	2c 06 f0	bit $f006			bit c65_start		; restart the cycle counter
.f144	60		rts		                rts
.f145					Platform_Block_Read:
.f145	20 58 f1	jsr $f158			jsr Platform_BlockParms
.f148	a9 01		lda #$01			lda #1			; read
.f14a	8d 10 f0	sta $f010			sta c65_blkio
.f14d	ad 11 f0	lda $f011			lda c65_status
.f150	f0 05		beq $f157			beq +
.f152	a9 df		lda #$df			lda #$100+err_BlockRead
.f154	20 74 b4	jsr $b474			jsr ThrowA
.f157	60		rts		+		rts
.f158					Platform_BlockParms:
.f158	20 ef b3	jsr $b3ef			jsr PopYA		; set block #
.f15b	8d 12 f0	sta $f012			sta c65_blknum+0
.f15e	8c 13 f0	sty $f013			sty c65_blknum+1
.f161	20 ef b3	jsr $b3ef			jsr PopYA		; set buffer addr
.f164	8d 14 f0	sta $f014			sta c65_buffer+0
.f167	8c 15 f0	sty $f015			sty c65_buffer+1
.f16a	a9 ff		lda #$ff			lda #$ff		; in case c65 isn't talking
.f16c	8d 11 f0	sta $f011			sta c65_status
.f16f	60		rts				rts
.f170					Platform_Block_Write:
.f170	20 58 f1	jsr $f158			jsr Platform_BlockParms
.f173	a9 02		lda #$02			lda #2			; write
.f175	8d 10 f0	sta $f010			sta c65_blkio
.f178	ad 11 f0	lda $f011			lda c65_status
.f17b	f0 05		beq $f182			beq +
.f17d	a9 de		lda #$de			lda #$100+err_BlockWrite
.f17f	20 74 b4	jsr $b474			jsr ThrowA
.f182	60		rts		+		rts
.f183					s_kernel_id:
>f183	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 remix default kernel for py65mon (31 May 2024)", AscLF, 0
>f18b	74 68 20 32 20 72 65 6d 69 78 20 64 65 66 61 75
>f19b	6c 74 20 6b 65 72 6e 65 6c 20 66 6f 72 20 70 79
>f1ab	36 35 6d 6f 6e 20 28 33 31 20 4d 61 79 20 32 30
>f1bb	32 34 29 0a 00
>fffa	00 f1				.word v_nmi
>fffc	00 f1				.word v_reset
>fffe	00 f1				.word v_irq

;******  End of listing
