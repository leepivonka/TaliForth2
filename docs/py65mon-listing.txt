
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output TaliForth-py65mon.bin platform/platform-py65mon.asm
; Mon Jun 24 23:54:03 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

=$0100					RStack = $0100 ; begin of 6502 Return stack
=$ff					rsp0      = $ff		; initial Return Stack Pointer (6502 stack)
=$8000					cp_end = $8000 ; LastRAM byte available for Data
=84					PadOffset = 84	; offset from CP to PAD (holds number strings)
=79					MAX_LINE_LENGTH  = 79      ; output line size
=20					DDim = 20	; # of cells in data stack
=10					FDim = 10	; # of entries in floating-point stack
=8					DoStkDim = 8	; # of entries in Do stack
=["lf"]					TALI_OPTION_CR_EOL := [ "lf" ]
=$ff					bsize     = $ff		; size of input/output buffers
>0200					buffer0: .fill bsize	; input buffer

;******  Processing file: platform/../taliforth.asm

=					TALI_OPTIONAL_WORDS := ["fp","fpe", "fpieee","fptrancendentals", "fphyperbolic", "ed", "editor", "ramdrive", "block", "environment?", "assembler", "wordlist" ]
=-1					err_Abort		= -1
=-2					err_AbortQuote		= -2
=-3					err_Stack_Overflow	= -3
=-4					err_Stack_Underflow	= -4
=-5					err_Return_Stack_Overflow = -5
=-6					err_Return_Stack_Underflow = -6
=-7					err_DoLoop_TooDeep	= -7	; do-loops nested too deeply during execution
=-8					err_Dictionary_Overflow	= -8
=-9					err_InvalidMemoryAddr	= -9	; invalid memory address
=-10					err_DivideBy0		= -10	; division by zero
=-11					err_OutOfRange		= -11	; result out of range
=-12					err_ArgTypeMismatch	= -12	; argument type mismatch
=-13					err_UndefinedWord	= -13
=-14					err_CompileOnly		= -14	; interpreting a compile-only word
=-15					err_Forget		= -15	; invalid FORGET
=-16					err_EmptyName		= -16	; attempt to use zero-length string as a name
=-17					err_PicStringOverflow	= -17	; pictured numeric output string overflow
=-18					err_ParsedStringOverflow = -18	; parsed string overflow
=-19					err_NameTooLong		= -19	; definition name too long
=-20					err_WriteToRO		= -20	; write to a read-only location
=-21					err_Unsupported		= -21	; unsupported operation  (e.g., AT-XY on a too-dumb terminal)
=-22					err_ControlMismatch	= -22	; control structure mismatch
=-23					err_AddrAlignment	= -23	; address alignment exception
=-24					err_InvalidNumericArg	= -24	; invalid numeric argument
=-25					err_ReturnStackImbalance = -25	; return stack imbalance
=-26					err_LoopParmUnavailable = -26	; loop parameters unavailable
=-27					err_InvalidRecursion	= -27	; invalid recursion
=-28					err_UserInterrupt	= -28	; user interrupt
=-29					err_CompilerNesting	= -29	; compiler nesting
=-30					err_Obsolete		= -30	; obsolescent feature
=-31					err_NoBody		= -31	; >BODY used on non-CREATEd definition
=-32					err_InvalidName		= -32	; invalid name argument (e.g., TO name)
=-33					err_BlockRead		= -33	; block read exception
=-34					err_BlockWrite		= -34	; block write exception
=-35					err_InvalidBlock	= -35	; invalid block number
=-36					err_InvalidFilePosition = -36	; invalid file position
=-37					err_FileIO		= -37	; file I/O exception
=-38					err_FileMissing		= -38	; non-existent file
=-39					err_EndOfFile		= -39	; unexpected end of file
=-40					err_InvalidBase		= -40	; invalid BASE for floating point conversion
=-41					err_LossOfPrecision	= -41	; loss of precision
=-42					err_FPDivideBy0		= -42	; floating-point divide by zero
=-43					err_FPOutOfRange	= -43	; floating-point result out of range
=-44					err_FPStackOverflow	= -44	; floating-point stack overflow
=-45					err_FPStackUnderflow	= -45	; floating-point stack underflow
=-46					err_FPInvalidArg	= -46	; floating-point invalid argument
=-47					err_CompileWordsDeleted = -47	; compilation word list deleted
=-48					err_PostponeInvalid	= -48	; invalid POSTPONE
=-49					err_SearchOrderOverflow = -49	; search-order overflow
=-50					err_SearchOrderUnderflow = -50	; search-order underflow
=-51					err_CompileWordlistChanged = -51 ; compilation word list changed
=-52					err_ControlStackOverflow = -52	; control-flow stack overflow
=-53					err_ExceptionStackOverflow = -53 ; exception stack overflow
=-54					err_FPUnderflow		= -54	; floating-point underflow
=-55					err_FPFault		= -55	; floating-point unidentified fault
=-56					err_Quit		= -56	; QUIT
=-57					err_ConsoleIO		= -57	; exception in sending or receiving a character
=-58					err_BracketIf		= -58	; [IF], [ELSE], or [THEN] exception
=-59					err_Allocate		= -59	; ALLOCATE
=-60					err_Free		= -60	; FREE
=-61					err_Resize		= -61	; RESIZE
=-62					err_CloseFile		= -62	; CLOSE-FILE
=-63					err_CreateFile		= -63	; CREATE-FILE
=-64					err_DeleteFile		= -64	; DELETE-FILE
=-65					err_FilePosition	= -65	; FILE-POSITION
=-66					err_FileSize		= -66	; FILE-SIZE
=-67					err_FileStatus		= -67	; FILE-STATUS
=-68					err_FlushFile		= -68	; FLUSH-FILE
=-69					err_OpenFile		= -69	; OPEN-FILE
=-70					err_ReadFile		= -70	; READ-FILE
=-71					err_ReadLine		= -71	; READ-LINE
=-72					err_RenameFile		= -72	; RENAME-FILE
=-73					err_RepositionFile	= -73	; REPOSITION-FILE
=-74					err_ResizeFile		= -74	; RESIZE-FILE
=-75					err_WriteFile		= -75	; WRITE-FILE
=-76					err_WriteLine		= -76	; WRITE-LINE
=-77					err_MalformedXChar	= -77	; Malformed xchar
=-78					err_Substitute		= -78	; SUBSTITUTE
=-79					err_Replaces		= -79	; REPLACES
=-149					err_Refill		= -149	; Refill failed
=-150					err_Defer		= -150	; Defer not set
=-151					err_AlreadyInterpreting	= -151	; entering interpret when already interpreting
=-152					err_AlreadyCompiling	= -152	; entering compile when already compiling
=-154					err_TooManyWordlists   	= -154
.0000					zp0:
>0000					cp:	.word ?		; Compiler Pointer (see HERE)
>0002					InSrc:	.word ?		; input Source for SOURCE-ID
>0004					Cib:	.word ?		; address of current input buffer
>0006					CibLen:	.word ?		; length of current input buffer
>0008					ToIn:	.word ?		; pointer to CIB (>IN in Forth)
>000a					state:	.word ?		; STATE: -1 compile, 0 interpret
>000c					status: .word ?		; internal status flags
>000e					WorkWord: .word ?	; nt or xt of word being compiled (see status)
>0010					dp:	.word ?		; Dictionary Pointer temp
>0012					DoIndex: .word ?	; current Do index
>0014					tmp1:	.word ?		; temporary storage
>0016					tmp2:	.word ?		; temporary storage
>0018					tmp3:	.word ?		; temporary storage
>001a					tmp4:	.word ?		; temporary storage (tmpdsp)
>001c					tmp5:	.word ?		; temporary storage (tmptos)
>001e					editor1: .word ?	; temporary for editors
>0020					editor2: .word ?	; temporary for editors
>0022					editor3: .word ?	; temporary for editors
>0024					DStack:	.fill DDim*2	; data stack
=40					DStack0 = *-DStack	;   initial Data Stack index value
.8000					Cold_zp_table:
>8000	66 0b					.word cp0		; cp
>8002	00 00					.word 0			; insrc (SOURCE-ID is 0 for keyboard)
>8004	00 02					.word buffer0		; cib
>8006	00 00					.word 0			; ciblen
>8008	00 00					.word 0			; toin
>800a	00 00					.word 0			; state (0 = interpret)
>800c	00 00					.word 0			; status
=14					Cold_zp_table_length = *-Cold_zp_table
.02ff					User0:
>02ff					PrecisionV: .byte ?	; # of decimal places for FP print
>0300					base:	.word ?		; number radix, default decimal
>0302					nc_limit: .word ?	; limit for Native Compile size
>0304					uf_strip: .word ?	; flag to strip underflow detection code
>0306					output:	.word ?		; vector for EMIT
>0308					input:	.word ?		; vector for KEY
>030a					HaveKey: .word ?	; vector for KEY?
>030c					BlkV:	.word ?		; BLK
>030e					ScrV:	.word ?		; SCR
>0310					CurrentV: .byte ?	; CURRENT (byte) (Compilation wordlist)
>0311					Num_WordlistsV: .byte ?	; #WORDLISTS (byte)
=12					max_wordlists = 12	; Maximum number of wordlists supported
>0312					WordlistsV: .fill 2*max_wordlists	; WORDLISTS (cells)
>032a					Num_OrderV: .byte ?	; #ORDER (byte)
>032b					Search_OrderV: .fill 9	; SEARCH-ORDER (bytes)
.0334					MarkEnd:
>0334					ToHold:	.byte ?		; pad buffer index for formatted output
>0335					RndState: .dword ?	; random # state
=0					wid_Forth = 0
=1					wid_Editor = 1
=2					wid_Assembler = 2
=3					wid_Root = 3
.800e					Cold_user_table:
>800e	08					.byte 8			; PrecisionV
>800f	0a 00					.word 10		; base
>8011	08 00					.word 8			; nc-limit
>8013	00 00					.word 0			; uf_strip (off by default)
>8015	21 f1					.word kernel_putc	; output
>8017	14 f1					.word kernel_getc	; input
>8019	1d f1					.word kernel_havekey	; havekey
>801b	00 00					.word 0				; BLK
>801d	00 00					.word 0				; SCR
>801f	00					.byte 0				; CURRENT = FORTH-WORDLIST
>8020	04					.byte 4				; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>8021	36 d0					.word forth_dictionary_start	; FORTH-WORDLIST
>8023	20 db					.word editor_dictionary_start	; EDITOR-WORDLIST
>8025	21 d9					.word assembler_dictionary_start ; ASSEMBLER-WORDLIST
>8027	7a d0					.word root_dictionary_start	; ROOT-WORDLIST
>8029	00 00 00 00 00 00 00 00			.word 0,0,0,0,0,0,0,0		; User wordlists
>8031	00 00 00 00 00 00 00 00
>8039	02					.byte 2				; #ORDER
>803a	00 02 00 00 00 00 00 00			.byte wid_Forth,wid_Assembler,0,0,0,0,0,0,0	; search-order
>8042	00
=53					Cold_user_table_length = *-Cold_user_table
=$03					AscCC   = $03	; break (CTRL-c)
=$07					AscBELL = $07	; bell sound
=$08					AscBS   = $08	; backspace
=$09					AscHT	= $09	; tab
=$0a					AscLF   = $0a	; line feed
=$0b					AScVT	= $0b	; vertical tab
=$0c					AscFF	= $0c	; form feed
=$0d					AscCR   = $0d	; carriage return
=$0e					AscCN   = $0e	; CTRL-n (used to recall next input history)
=$10					AscCP   = $10	; CTRL-p (used to recall previous input history)
=$1b					AscESC  = $1b	; escape
=$20					AscSP   = $20	; space
=$22					AscDQuote = $22	; double quote
=$5c					AscBackslash = $5c ; backslash
=$7f					AscDEL  = $7f	; delete (CTRL-h)
>0000							.fill $80 ; name, right justified
=127					wh_NameLastChar	= *-1	;last char of name
>0080					wh_HNL:		.byte ?	;
=$e0					wh_HNL_HashMask = $e0		; lo 3 bits of last char of name
=$1f					wh_HNL_NameLengthMask = $1f	; length of name
.0081					wh_
>0081					wh_WordListLink: .word ? ;link to nt of previous word in wordlist chain
>0083					wh_CodeLength:	.byte ?	;size of code (0xff = 255 or greater)
>0084					wh_Flags:	.byte ?	; created by adding the flags defined as:
=1					CO =   1 ; Compile Only
=2					AN =   2 ; Always Native Compile (may not be called by JSR)
=4					IM =   4 ; Immediate Word
=8					NN =   8 ; Never Native Compile (must always be called by JSR)
=$10					UF = $10 ; Includes strippable Underflow Check
=$40					R6 = $40 ; strip 6 bytes from begin & end when native compiling
.0085					wh_xt:
=0					WordListLink .var 0	 ; start of FORTH wordlist
>8043	43 6f 6c 64			L1:	.text "Cold"	;  name of word as a string, ending at wh_NameLastChar
>8047	84					.byte (("Cold"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8048	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>804a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>804b	08					.byte NN	;wh_Flags	dictionary flags
=32711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.804c					Cold:
.804c	d8		cld				cld
.804d	a2 ff		ldx #$ff			ldx #rsp0		; Initialize 6502 stack (Return Stack)
.804f	9a		txs				txs
.8050	a2 0d		ldx #$0d			ldx #Cold_zp_table_length-1
.8052					-
.8052	bd 00 80	lda $8000,x			lda Cold_zp_table,x
.8055	95 00		sta $00,x			sta zp0,x
.8057	ca		dex				dex
.8058	10 f8		bpl $8052			bpl -
.805a	a0 34		ldy #$34			ldy #Cold_user_table_length-1
.805c	b9 0e 80	lda $800e,y	-		lda Cold_user_table,y
.805f	99 ff 02	sta $02ff,y			sta User0,y
.8062	88		dey				dey
.8063	10 f7		bpl $805c			bpl -
.8065	20 d6 b5	jsr $b5d6			jsr Empty_Stack
.8068	20 85 a2	jsr $a285			jsr BlockInit
.806b	20 28 ac	jsr $ac28			jsr CR
.806e	a9 9c		lda #$9c			lda #<forth_words_start		; push start address
.8070	a0 80		ldy #$80			ldy #>forth_words_start
.8072	20 b9 b8	jsr $b8b9			jsr PushYA
.8075	a9 d2		lda #$d2			lda #<forth_words_len		; push length
.8077	a0 00		ldy #$00			ldy #>forth_words_len
.8079	20 b9 b8	jsr $b8b9			jsr PushYA
.807c	20 da b0	jsr $b0da			jsr Evaluate
.807f	a9 00		lda #$00			lda #0
.8081	8d 66 07	sta $0766			sta hist_buff
.8084	8d e6 07	sta $07e6			sta hist_buff+$80
.8087	8d 66 08	sta $0866			sta hist_buff+$100
.808a	8d e6 08	sta $08e6			sta hist_buff+$180
.808d	8d 66 09	sta $0966			sta hist_buff+$200
.8090	8d e6 09	sta $09e6			sta hist_buff+$280
.8093	8d 66 0a	sta $0a66			sta hist_buff+$300
.8096	8d e6 0a	sta $0ae6			sta hist_buff+$380
.8099	4c 87 b5	jmp $b587			jmp Abort_Core2	;Quit
=80					CL	.var *-(WordListLink+wh_Xt)
=$809c					en = *	; remember here
>804a	50					.byte CL	;wh_CodeLength
.809c					forth_words_start:
>809c	20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>80a4	61 6c 69 20 46 6f 72 74 68 20 32 20 72 65 6d 69
>80b4	78 20 66 6f 72 20 74 68 65 20 36 35 30 32 29 20
>80c4	63 72 20 2e 28 20 56 65 72 73 69 6f 6e 20 33 31
>80d4	2e 20 4d 61 79 20 32 30 32 34 20 29 20 63 72 20
>80e4	2e 28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31
>80f4	34 2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53
>8104	74 65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f
>8114	6c 77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c
>8124	69 20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20
>8134	77 69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20
>8144	4e 4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20
>8154	2e 28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f
>8164	20 65 78 69 74 29 20 63 72 20
=210					forth_words_len = *-forth_words_start
.816e					user_words_start:
>816e					.binary "user_words.asc"
=0					user_words_len = *-user_words_start
>816e	4e 6f 4f 70			L1:	.text "NoOp"	;  name of word as a string, ending at wh_NameLastChar
>8172	04					.byte (("NoOp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8173	c7 7f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8175	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8176	00					.byte 0	;wh_Flags	dictionary flags
=33010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8177	ea		nop				nop
=1					CL	.var *-(WordListLink+wh_Xt)
=$8178					en = *	; remember here
>8175	01					.byte CL	;wh_CodeLength
.8178	60		rts				rts
>8179	43 43 40			L1:	.text "CC@"	;  name of word as a string, ending at wh_NameLastChar
>817c	03					.byte (("CC@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>817d	f2 80					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>817f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8180	08					.byte NN	;wh_Flags	dictionary flags
=33020					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8181	4c 26 f1	jmp $f126	CCAt:		jmp platform_CCAt
=3					CL	.var *-(WordListLink+wh_Xt)
=$8184					en = *	; remember here
>817f	03					.byte CL	;wh_CodeLength
>8184	42 79 65			L1:	.text "Bye"	;  name of word as a string, ending at wh_NameLastChar
>8187	a3					.byte (("Bye"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8188	fc 80					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>818a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>818b	08					.byte NN	;wh_Flags	dictionary flags
=33031					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.818c	4c 25 f1	jmp $f125	Bye:		jmp platform_bye
=3					CL	.var *-(WordListLink+wh_Xt)
=$818f					en = *	; remember here
>818a	03					.byte CL	;wh_CodeLength
>818f	54 79 70 65 53 79 6d 62		L1:	.text "TypeSymbol"	;  name of word as a string, ending at wh_NameLastChar
>8197	6f 6c
>8199	8a					.byte (("TypeSymbol"[-1]&7)<<5)+(*-L1)	;wh_HNL
>819a	07 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>819c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>819d	08					.byte NN	;wh_Flags	dictionary flags
=33049					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.819e	20 0e b9	jsr $b90e	TypeSymbol:	jsr Two
.81a1	20 5e c5	jsr $c55e			jsr Spaces
.81a4	a9 28		lda #$28			lda #'('
.81a6	20 ee ce	jsr $ceee			jsr Emit_A
.81a9	20 fb ce	jsr $cefb			jsr Space
.81ac	20 80 d0	jsr $d080			jsr Dup
.81af	a9 24		lda #$24			lda #'$'
.81b1	20 ee ce	jsr $ceee			jsr Emit_A
.81b4	20 bd a9	jsr $a9bd			jsr Dot_Hex
.81b7	20 fb ce	jsr $cefb			jsr Space
.81ba	20 e1 81	jsr $81e1			jsr DictSearchXt	; ( addr_end addr operand offset nt )
.81bd	20 fb be	jsr $befb			jsr Name_To_String	; Change nt into the name
.81c0	20 08 cf	jsr $cf08			jsr Type		; print it.
.81c3	20 fb ce	jsr $cefb			jsr Space
.81c6	b5 24		lda $24,x			lda DStack+0,x		; if non-zero offset
.81c8	15 25		ora $25,x			ora DStack+1,x
.81ca	f0 0b		beq $81d7			beq +
.81cc	a9 2b		lda #$2b			lda #'+'		;   print offset
.81ce	20 ee ce	jsr $ceee			jsr Emit_A
.81d1	20 80 d0	jsr $d080			jsr Dup
.81d4	20 19 cd	jsr $cd19			jsr U_Dot
.81d7	e8		inx		+		inx
.81d8	e8		inx				inx
.81d9	a9 29		lda #$29			lda #')'
.81db	20 ee ce	jsr $ceee			jsr Emit_A
.81de	4c fb ce	jmp $cefb			jmp Space
=67					CL	.var *-(WordListLink+wh_Xt)
=$81e1					en = *	; remember here
>819c	43					.byte CL	;wh_CodeLength
.81e1					DictSearchXt:
.81e1	ca		dex				dex
.81e2	ca		dex				dex
.81e3	20 57 d0	jsr $d057			jsr Over
.81e6	a9 ff		lda #$ff			lda #$ff		; init best offset
.81e8	95 29		sta $29,x			sta DStack+5,x		; ( offset nt xt )
.81ea	a9 fe		lda #$fe			lda #$fe		; for each wordlist
.81ec	48		pha				pha
.81ed	68		pla		_ListNext:	pla
.81ee	18		clc				clc
.81ef	69 02		adc #$02			adc #2			; to next wordlist
.81f1	c9 18		cmp #$18			cmp #max_wordlists*2
.81f3	b0 10		bcs $8205			bcs _Done
.81f5	48		pha				pha
.81f6	a8		tay				tay
.81f7	b9 12 03	lda $0312,y			lda WordlistsV+0,y	; Get the DP for that wordlist.
.81fa	85 14		sta $14				sta tmp1+0
.81fc	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.81ff	85 15		sta $15				sta tmp1+1
.8201	d0 14		bne $8217			bne _WordTest
.8203	f0 e8		beq $81ed			beq _ListNext		;   empty list
.8205	e8		inx		_Done:		inx			; Drop xt
.8206	e8		inx				inx
.8207	60		rts				rts
.8208	a0 82		ldy #$82	_WordNext:	ldy #wh_WordListLink+1
.820a	b1 14		lda ($14),y			lda (tmp1),y
.820c	f0 df		beq $81ed			beq _ListNext		; end of Dictionary?
.820e	48		pha				pha
.820f	88		dey				dey
.8210	b1 14		lda ($14),y			lda (tmp1),y
.8212	85 14		sta $14				sta tmp1+0
.8214	68		pla				pla
.8215	85 15		sta $15				sta tmp1+1
.8217	18		clc		_WordTest:	clc			; tmp2 = xt of this word
.8218	a5 14		lda $14				lda tmp1+0
.821a	69 85		adc #$85			adc #wh_xt
.821c	85 16		sta $16				sta tmp2+0
.821e	a5 15		lda $15				lda tmp1+1
.8220	69 00		adc #$00			adc #0
.8222	85 17		sta $17				sta tmp2+1
.8224	38		sec				sec			; tmp2 = xt offset for this word
.8225	b5 24		lda $24,x			lda DStack+0,x
.8227	e5 16		sbc $16				sbc tmp2+0
.8229	85 16		sta $16				sta tmp2+0
.822b	b5 25		lda $25,x			lda DStack+1,x
.822d	e5 17		sbc $17				sbc tmp2+1
.822f	85 17		sta $17				sta tmp2+1
.8231	20 97 82	jsr $8297			jsr _test
.8234	a0 85		ldy #$85			ldy #wh_xt+0		; is this word a constant?
.8236	b1 14		lda ($14),y			lda (tmp1),y
.8238	c9 a0		cmp #$a0			cmp #$a0
.823a	f0 28		beq $8264			beq _PushYA
.823c	c9 a9		cmp #$a9			cmp #$a9
.823e	d0 c8		bne $8208			bne _WordNext
.8240	c8		iny		_PushZA:	iny			; get lda # operand
.8241	b5 24		lda $24,x			lda DStack+0,x
.8243	f1 14		sbc ($14),y			sbc (tmp1),y
.8245	85 16		sta $16				sta tmp2+0
.8247	b5 25		lda $25,x			lda DStack+1,x
.8249	e9 00		sbc #$00			sbc #0
.824b	85 17		sta $17				sta tmp2+1
.824d	c8		iny				iny			; check jmp opcode
.824e	b1 14		lda ($14),y			lda (tmp1),y
.8250	c9 4c		cmp #$4c			cmp #$4c
.8252	d0 b4		bne $8208			bne _WordNext
.8254	c8		iny				iny			; check jmp operand lo
.8255	b1 14		lda ($14),y			lda (tmp1),y
.8257	c9 eb		cmp #$eb			cmp #<PushZA
.8259	d0 ad		bne $8208			bne _WordNext
.825b	c8		iny				iny			; check jmp operand hi
.825c	b1 14		lda ($14),y			lda (tmp1),y
.825e	c9 b8		cmp #$b8			cmp #>PushZA
.8260	d0 a6		bne $8208			bne _WordNext
.8262	f0 2d		beq $8291			beq _KTest
.8264	a0 87		ldy #$87	_PushYA:	ldy #wh_xt+2		; check LDA # opcode
.8266	b1 14		lda ($14),y			lda (tmp1),y
.8268	c9 a9		cmp #$a9			cmp #$a9
.826a	d0 9c		bne $8208			bne _WordNext
.826c	c8		iny				iny			; get lda # operand
.826d	b5 24		lda $24,x			lda DStack+0,x
.826f	f1 14		sbc ($14),y			sbc (tmp1),y
.8271	85 16		sta $16				sta tmp2+0
.8273	a0 86		ldy #$86			ldy #wh_xt+1		; get LDY # operand
.8275	b5 25		lda $25,x			lda DStack+1,x
.8277	f1 14		sbc ($14),y			sbc (tmp1),y
.8279	85 17		sta $17				sta tmp2+1
.827b	a0 89		ldy #$89			ldy #wh_xt+4		; check JMP opcode
.827d	b1 14		lda ($14),y			lda (tmp1),y
.827f	c9 4c		cmp #$4c			cmp #$4c
.8281	d0 85		bne $8208			bne _WordNext
.8283	c8		iny				iny			; check JMP operand lo
.8284	b1 14		lda ($14),y			lda (tmp1),y
.8286	c9 b9		cmp #$b9			cmp #<PushYA
.8288	d0 0a		bne $8294			bne _WordNext3
.828a	c8		iny				iny			; check JMP operand hi
.828b	b1 14		lda ($14),y			lda (tmp1),y
.828d	c9 b8		cmp #$b8			cmp #>PushYA
.828f	d0 03		bne $8294			bne _WordNext3
.8291	20 97 82	jsr $8297	_KTest:		jsr _test
.8294	4c 08 82	jmp $8208	_WordNext3:	jmp _WordNext
.8297					_test:
.8297	a5 16		lda $16				lda tmp2+0		; this word have smaller offset?
.8299	d5 28		cmp $28,x			cmp DStack+4,x
.829b	a5 17		lda $17				lda tmp2+1
.829d	f5 29		sbc $29,x			sbc DStack+5,x
.829f	b0 10		bcs $82b1			bcs _trts
.82a1	a5 16		lda $16				lda tmp2+0		;   save this better offset
.82a3	a4 17		ldy $17				ldy tmp2+1
.82a5	95 28		sta $28,x			sta DStack+4,x
.82a7	94 29		sty $29,x			sty DStack+5,x
.82a9	a5 14		lda $14				lda tmp1+0		;   save this better nt
.82ab	a4 15		ldy $15				ldy tmp1+1
.82ad	95 26		sta $26,x			sta DStack+2,x
.82af	94 27		sty $27,x			sty DStack+3,x
.82b1	60		rts		_trts:		rts
>82b2	44 53 74 61 63 6b		L1:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
>82b8	66					.byte (("DStack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>82b9	19 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82bc	08					.byte NN	;wh_Flags	dictionary flags
=33336					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82bd	a9 24		lda #$24			lda #DStack
.82bf	4c eb b8	jmp $b8eb			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$82c2					en = *	; remember here
>82bb	05					.byte CL	;wh_CodeLength
>82c2	52 6e 64 53 74 61 74 65		L1:	.text "RndState"	;  name of word as a string, ending at wh_NameLastChar
>82ca	a8					.byte (("RndState"[-1]&7)<<5)+(*-L1)	;wh_HNL
>82cb	38 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82ce	08					.byte NN	;wh_Flags	dictionary flags
=33354					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82cf	a0 03		ldy #$03			ldy #>RndState
.82d1	a9 35		lda #$35			lda #<RndState
.82d3	4c b9 b8	jmp $b8b9			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$82d6					en = *	; remember here
>82cd	07					.byte CL	;wh_CodeLength
>82d6	52 61 6e 64			L1:	.text "Rand"	;  name of word as a string, ending at wh_NameLastChar
>82da	84					.byte (("Rand"[-1]&7)<<5)+(*-L1)	;wh_HNL
>82db	4a 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82de	00					.byte 0	;wh_Flags	dictionary flags
=33370					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82df					Rand:
.82df	4e 36 03	lsr $0336			lsr RndState+1
.82e2	6e 35 03	ror $0335			ror RndState+0
.82e5	6e 38 03	ror $0338			ror RndState+3
.82e8	6e 37 03	ror $0337			ror RndState+2
.82eb	90 10		bcc $82fd			bcc _19			;  IfCs,
.82ed	ad 36 03	lda $0336			lda RndState+1
.82f0	49 d0		eor #$d0			eor #$d0
.82f2	8d 36 03	sta $0336			sta RndState+1
.82f5	ad 37 03	lda $0337			lda RndState+2
.82f8	49 01		eor #$01			eor #$01
.82fa	8d 37 03	sta $0337			sta RndState+2
.82fd					_19:
.82fd	ad 37 03	lda $0337			lda RndState+2
.8300	ac 38 03	ldy $0338			ldy RndState+3
=36					CL	.var *-(WordListLink+wh_Xt)
=$8303					en = *	; remember here
>82dd	24					.byte CL	;wh_CodeLength
.8303	60		rts				rts
>8304	52 61 6e 64 4d			L1:	.text "RandM"	;  name of word as a string, ending at wh_NameLastChar
>8309	a5					.byte (("RandM"[-1]&7)<<5)+(*-L1)	;wh_HNL
>830a	5a 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>830c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>830d	08					.byte NN	;wh_Flags	dictionary flags
=33417					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.830e	20 80 d0	jsr $d080	RandM:		jsr Dup		; ( umod umod )
.8311	20 df 82	jsr $82df			jsr Rand
.8314	4a		lsr a				lsr a		; make positive
.8315	95 27		sta $27,x			sta DStack+3,x
.8317	94 26		sty $26,x			sty DStack+2,x	; ( rand umod )
.8319	4c 4c b0	jmp $b04c			jmp Mod
=14					CL	.var *-(WordListLink+wh_Xt)
=$831c					en = *	; remember here
>830c	0e					.byte CL	;wh_CodeLength
>004c					fp:	.byte ?		; floating-point stack index. empty=FDim, full=0
>004d					FSExp:   .fill FDim	; FP stack exponent        array
>0057					FSMant0: .fill FDim	; FP stack mantissa MSByte array
>0061					FSMant1: .fill FDim	; FP stack mantissa 2nd    array
>006b					FSMant2: .fill FDim	; FP stack mantissa 3rd    array
>0075					FSMant3: .fill FDim	; FP stack mantissa 4th    array
>831c	46 50				L1:	.text "FP"	;  name of word as a string, ending at wh_NameLastChar
>831e	02					.byte (("FP"[-1]&7)<<5)+(*-L1)	;wh_HNL
>831f	89 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8321	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8322	08					.byte NN	;wh_Flags	dictionary flags
=33438					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8323	a9 4c		lda #$4c			lda #fp
.8325	4c eb b8	jmp $b8eb			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8328					en = *	; remember here
>8321	05					.byte CL	;wh_CodeLength
>8328	46 44 69 6d			L1:	.text "FDim"	;  name of word as a string, ending at wh_NameLastChar
>832c	a4					.byte (("FDim"[-1]&7)<<5)+(*-L1)	;wh_HNL
>832d	9e 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>832f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8330	08					.byte NN	;wh_Flags	dictionary flags
=33452					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8331	a9 0a		lda #$0a			lda #FDim
.8333	4c eb b8	jmp $b8eb			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8336					en = *	; remember here
>832f	05					.byte CL	;wh_CodeLength
>8336	46 53 45 78 70			L1:	.text "FSExp"	;  name of word as a string, ending at wh_NameLastChar
>833b	05					.byte (("FSExp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>833c	ac 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>833e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>833f	08					.byte NN	;wh_Flags	dictionary flags
=33467					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8340	a9 4d		lda #$4d			lda #FSExp
.8342	4c eb b8	jmp $b8eb			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8345					en = *	; remember here
>833e	05					.byte CL	;wh_CodeLength
>8345	46 53 4d 61 6e 74 30		L1:	.text "FSMant0"	;  name of word as a string, ending at wh_NameLastChar
>834c	07					.byte (("FSMant0"[-1]&7)<<5)+(*-L1)	;wh_HNL
>834d	bb 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>834f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8350	08					.byte NN	;wh_Flags	dictionary flags
=33484					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8351	a9 57		lda #$57			lda #FSMant0
.8353	4c eb b8	jmp $b8eb			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8356					en = *	; remember here
>834f	05					.byte CL	;wh_CodeLength
>8356	46 53 4d 61 6e 74 31		L1:	.text "FSMant1"	;  name of word as a string, ending at wh_NameLastChar
>835d	27					.byte (("FSMant1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>835e	cc 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8360	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8361	08					.byte NN	;wh_Flags	dictionary flags
=33501					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8362	a9 61		lda #$61			lda #FSMant1
.8364	4c eb b8	jmp $b8eb			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8367					en = *	; remember here
>8360	05					.byte CL	;wh_CodeLength
>8367	46 53 4d 61 6e 74 32		L1:	.text "FSMant2"	;  name of word as a string, ending at wh_NameLastChar
>836e	47					.byte (("FSMant2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>836f	dd 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8371	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8372	08					.byte NN	;wh_Flags	dictionary flags
=33518					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8373	a9 6b		lda #$6b			lda #FSMant2
.8375	4c eb b8	jmp $b8eb			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8378					en = *	; remember here
>8371	05					.byte CL	;wh_CodeLength
>8378	46 53 4d 61 6e 74 33		L1:	.text "FSMant3"	;  name of word as a string, ending at wh_NameLastChar
>837f	67					.byte (("FSMant3"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8380	ee 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8382	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8383	08					.byte NN	;wh_Flags	dictionary flags
=33535					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8384	a9 75		lda #$75			lda #FSMant3
.8386	4c eb b8	jmp $b8eb			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8389					en = *	; remember here
>8382	05					.byte CL	;wh_CodeLength
>8389	46 6c 6f 61 74 2b		L1:	.text "Float+"	;  name of word as a string, ending at wh_NameLastChar
>838f	66					.byte (("Float+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8390	ff 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8392	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8393	08					.byte NN	;wh_Flags	dictionary flags
=33551					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8394	a9 05		lda #$05	FloatPlus:	lda #5
.8396	4c 0f cb	jmp $cb0f			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$8399					en = *	; remember here
>8392	05					.byte CL	;wh_CodeLength
>8399	46 6c 6f 61 74 73		L1:	.text "Floats"	;  name of word as a string, ending at wh_NameLastChar
>839f	66					.byte (("Floats"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83a0	0f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83a3	08					.byte NN	;wh_Flags	dictionary flags
=33567					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83a4	a9 05		lda #$05	Floats:		lda #5
.83a6	20 eb b8	jsr $b8eb			jsr PushZA
.83a9	4c 5c af	jmp $af5c			jmp Star
=8					CL	.var *-(WordListLink+wh_Xt)
=$83ac					en = *	; remember here
>83a2	08					.byte CL	;wh_CodeLength
>83ac	46 41 6c 69 67 6e		L1:	.text "FAlign"	;  name of word as a string, ending at wh_NameLastChar
>83b2	c6					.byte (("FAlign"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83b3	1f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83b5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83b6	00					.byte 0	;wh_Flags	dictionary flags
=33586					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83b7					FAlign:
=0					CL	.var *-(WordListLink+wh_Xt)
=$83b7					en = *	; remember here
>83b5	00					.byte CL	;wh_CodeLength
.83b7	60		rts				rts
>83b8	46 41 6c 69 67 6e 65 64		L1:	.text "FAligned"	;  name of word as a string, ending at wh_NameLastChar
>83c0	88					.byte (("FAligned"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83c1	32 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83c4	00					.byte 0	;wh_Flags	dictionary flags
=33600					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83c5					FAligned:
=0					CL	.var *-(WordListLink+wh_Xt)
=$83c5					en = *	; remember here
>83c3	00					.byte CL	;wh_CodeLength
.83c5	60		rts				rts
>83c6	48 65 78 3e 46			L1:	.text "Hex>F"	;  name of word as a string, ending at wh_NameLastChar
>83cb	c5					.byte (("Hex>F"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83cc	40 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83cf	08					.byte NN	;wh_Flags	dictionary flags
=33611					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83d0	20 b1 84	jsr $84b1	HexToF:		jsr FAllocX		; alloc FP stack entry, X= fp stack index
.83d3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.83d5	a4 4c		ldy $4c				ldy fp			; Y= FP stack index
.83d7	20 c2 b4	jsr $b4c2			jsr PopA		; pop n_exp
.83da	99 4d 00	sta $004d,y			sta FSExp,y
.83dd	b5 25		lda $25,x			lda DStack+1,x
.83df	99 57 00	sta $0057,y			sta FSMant0,y
.83e2	b5 24		lda $24,x			lda DStack+0,x
.83e4	99 61 00	sta $0061,y			sta FSMant1,y
.83e7	b5 27		lda $27,x			lda DStack+3,x
.83e9	99 6b 00	sta $006b,y			sta FSMant2,y
.83ec	b5 26		lda $26,x			lda DStack+2,x
.83ee	99 75 00	sta $0075,y			sta FSMant3,y
.83f1	4c 05 c6	jmp $c605			jmp Two_Drop
=36					CL	.var *-(WordListLink+wh_Xt)
=$83f4					en = *	; remember here
>83ce	24					.byte CL	;wh_CodeLength
>83f4	46 3e 48 65 78			L1:	.text "F>Hex"	;  name of word as a string, ending at wh_NameLastChar
>83f9	05					.byte (("F>Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83fa	4b 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83fd	08					.byte NN	;wh_Flags	dictionary flags
=33657					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83fe	a4 4c		ldy $4c		FToHex:		ldy fp		; Y= FP stack index
.8400	ca		dex				dex
.8401	ca		dex				dex
.8402	ca		dex				dex
.8403	ca		dex				dex
.8404	ca		dex				dex
.8405	ca		dex				dex
.8406	b9 57 00	lda $0057,y			lda FSMant0,y	; copy mantissa
.8409	95 27		sta $27,x			sta DStack+3,x
.840b	b9 61 00	lda $0061,y			lda FSMant1,y
.840e	95 26		sta $26,x			sta DStack+2,x
.8410	b9 6b 00	lda $006b,y			lda FSMant2,y
.8413	95 29		sta $29,x			sta DStack+5,x
.8415	b9 75 00	lda $0075,y			lda FSMant3,y
.8418	95 28		sta $28,x			sta DStack+4,x
.841a	b9 4d 00	lda $004d,y			lda FSExp,y	; copy exponent
.841d	95 24		sta $24,x			sta DStack+0,x
.841f	29 80		and #$80			and #$80	;   sign extend
.8421	f0 02		beq $8425			beq +
.8423	a9 ff		lda #$ff			lda #$ff
.8425	95 25		sta $25,x	+		sta DStack+1,x
.8427	e6 4c		inc $4c				inc fp		; FDrop
.8429	60		rts				rts
=44					CL	.var *-(WordListLink+wh_Xt)
=$842a					en = *	; remember here
>83fc	2c					.byte CL	;wh_CodeLength
>842a	46 2e 48 65 78			L1:	.text "F.Hex"	;  name of word as a string, ending at wh_NameLastChar
>842f	05					.byte (("F.Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8430	79 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8432	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8433	08					.byte NN	;wh_Flags	dictionary flags
=33711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8434	20 fe 83	jsr $83fe	FDotHex:	jsr FToHex	; get parts of r
.8437	20 aa cf	jsr $cfaa			jsr Not_Rot
.843a	20 bd a9	jsr $a9bd			jsr Dot_Hex	; do mantissa
.843d	20 bd a9	jsr $a9bd			jsr Dot_Hex
.8440	a9 3a		lda #$3a			lda #':'
.8442	20 ee ce	jsr $ceee			jsr Emit_A
.8445	4c 9b a9	jmp $a99b			jmp C_Dot_Hex	; do exponent
=20					CL	.var *-(WordListLink+wh_Xt)
=$8448					en = *	; remember here
>8432	14					.byte CL	;wh_CodeLength
>8448	46 43 6d 70 41			L1:	.text "FCmpA"	;  name of word as a string, ending at wh_NameLastChar
>844d	25					.byte (("FCmpA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>844e	af 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8450	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8451	08					.byte NN	;wh_Flags	dictionary flags
=33741					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8452	86 14		stx $14		FCmpA:		stx tmp1		; save data stack index
.8454	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.8456	b5 57		lda $57,x			lda FSMant0+0,x		; r2 mantissa = 0 ?
.8458	f0 35		beq $848f			beq _r2Zero
.845a	b4 58		ldy $58,x			ldy FSMant0+1,x		; r1 mantissa = 0 ?
.845c	f0 2b		beq $8489			beq _r1Zero
.845e	55 58		eor $58,x			eor FSMant0+1,x		; compare mantissa sign
.8460	30 3d		bmi $849f			bmi _MantissaSignDifferent
.8462	38		sec				sec			; compare exponent
.8463	b5 4e		lda $4e,x			lda FSExp+1,x
.8465	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8467	d0 2b		bne $8494			bne _ExponentDifferent
.8469	98		tya				tya			; compare mantissa MSB
.846a	f5 57		sbc $57,x			sbc FSMant0+0,x		;   always same sign so can't overflow
.846c	d0 17		bne $8485			bne _13
.846e	b5 62		lda $62,x			lda FSMant1+1,x		; compare mantissa 1
.8470	f5 61		sbc $61,x			sbc FSMant1+0,x
.8472	d0 0c		bne $8480			bne _12
.8474	b5 6c		lda $6c,x			lda FSMant2+1,x		; compare mantissa 2
.8476	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8478	d0 06		bne $8480			bne _12
.847a	b5 76		lda $76,x			lda FSMant3+1,x		; compare mantissa LSB
.847c	f5 75		sbc $75,x			sbc FSMant3+0,x
.847e	f0 05		beq $8485			beq _13
.8480	6a		ror a		_12:		ror a
.8481	49 80		eor #$80	_14:		eor #$80
.8483	09 01		ora #$01			ora #1
.8485	a6 14		ldx $14		_13:		ldx tmp1		; restore data stack index
.8487	a8		tay				tay			; set CPU flags
.8488	60		rts				rts
.8489	b5 57		lda $57,x	_r1Zero:	lda FSMant0+0,x		; return r2
.848b	d0 f4		bne $8481			bne _14
.848d	f0 f6		beq $8485			beq _13
.848f	b5 58		lda $58,x	_r2Zero:	lda FSMant0+1,x		; return 0-r1
.8491	4c 85 84	jmp $8485			jmp _13
.8494					_ExponentDifferent:
.8494	50 02		bvc $8498			bvc +
.8496	49 80		eor #$80			eor #$80
.8498					+
.8498	55 57		eor $57,x			eor FSMant0+0,x
.849a	a6 14		ldx $14				ldx tmp1		; restore data stack index
.849c	09 01		ora #$01			ora #1			; set CPU flags
.849e	60		rts				rts
.849f					_MantissaSignDifferent:
.849f	98		tya				tya
.84a0	a6 14		ldx $14				ldx tmp1		; restore data stack index
.84a2	09 01		ora #$01			ora #1
.84a4	60		rts				rts
=83					CL	.var *-(WordListLink+wh_Xt)
=$84a5					en = *	; remember here
>8450	53					.byte CL	;wh_CodeLength
>84a5	46 41 6c 6c 6f 63 58		L1:	.text "FAllocX"	;  name of word as a string, ending at wh_NameLastChar
>84ac	07					.byte (("FAllocX"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84ad	cd 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84af	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84b0	08					.byte NN	;wh_Flags	dictionary flags
=33836					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84b1	86 14		stx $14		FAllocX:	stx tmp1+0	; save data stack index
.84b3	a6 4c		ldx $4c				ldx fp		; X= floating point stack index
.84b5	ca		dex				dex		; alloc FP stack entry
.84b6	e0 0a		cpx #$0a			cpx #FDim	; overflow or underflow?
.84b8	b0 03		bcs $84bd			bcs _err
.84ba	86 4c		stx $4c				stx fp
.84bc	60		rts				rts		; return X= FP stack index
.84bd	08		php		_err:		php		; save sign bit
.84be	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.84c0	28		plp				plp		; restore sign bit
.84c1	4c 36 b5	jmp $b536			jmp Throw_FPStack
=19					CL	.var *-(WordListLink+wh_Xt)
=$84c4					en = *	; remember here
>84af	13					.byte CL	;wh_CodeLength
>84c4	46 4d 61 78			L1:	.text "FMax"	;  name of word as a string, ending at wh_NameLastChar
>84c8	04					.byte (("FMax"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84c9	2c 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84cb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84cc	08					.byte NN	;wh_Flags	dictionary flags
=33864					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84cd	20 52 84	jsr $8452	FMax:		jsr FCmpA
.84d0	10 2f		bpl $8501			bpl FDrop
.84d2	30 49		bmi $851d			bmi FNip
=7					CL	.var *-(WordListLink+wh_Xt)
=$84d4					en = *	; remember here
>84cb	07					.byte CL	;wh_CodeLength
>84d4	46 4d 69 6e			L1:	.text "FMin"	;  name of word as a string, ending at wh_NameLastChar
>84d8	c4					.byte (("FMin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84d9	48 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84dc	08					.byte NN	;wh_Flags	dictionary flags
=33880					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84dd	20 52 84	jsr $8452	FMin:		jsr FCmpA
.84e0	30 1f		bmi $8501			bmi FDrop
.84e2	10 39		bpl $851d			bpl FNip
=7					CL	.var *-(WordListLink+wh_Xt)
=$84e4					en = *	; remember here
>84db	07					.byte CL	;wh_CodeLength
>84e4	46 44 65 70 74 68		L1:	.text "FDepth"	;  name of word as a string, ending at wh_NameLastChar
>84ea	06					.byte (("FDepth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84eb	58 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84ed	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84ee	08					.byte NN	;wh_Flags	dictionary flags
=33898					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84ef	a9 0a		lda #$0a	FDepth:		lda #FDim
.84f1	38		sec				sec
.84f2	e5 4c		sbc $4c				sbc fp
.84f4	4c eb b8	jmp $b8eb			jmp PushZA
=8					CL	.var *-(WordListLink+wh_Xt)
=$84f7					en = *	; remember here
>84ed	08					.byte CL	;wh_CodeLength
>84f7	46 44 72 6f 70			L1:	.text "FDrop"	;  name of word as a string, ending at wh_NameLastChar
>84fc	05					.byte (("FDrop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84fd	6a 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84ff	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8500	00					.byte 0	;wh_Flags	dictionary flags
=33916					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8501	e6 4c		inc $4c		FDrop:		inc fp
=2					CL	.var *-(WordListLink+wh_Xt)
=$8503					en = *	; remember here
>84ff	02					.byte CL	;wh_CodeLength
.8503	60		rts				rts
>8504	46 32 44 72 6f 70		L1:	.text "F2Drop"	;  name of word as a string, ending at wh_NameLastChar
>850a	06					.byte (("F2Drop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>850b	7c 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>850d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>850e	00					.byte 0	;wh_Flags	dictionary flags
=33930					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.850f	e6 4c		inc $4c		F2Drop:		inc fp
.8511	e6 4c		inc $4c				inc fp
=4					CL	.var *-(WordListLink+wh_Xt)
=$8513					en = *	; remember here
>850d	04					.byte CL	;wh_CodeLength
.8513	60		rts				rts
>8514	46 4e 69 70			L1:	.text "FNip"	;  name of word as a string, ending at wh_NameLastChar
>8518	04					.byte (("FNip"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8519	8a 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>851b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>851c	00					.byte 0	;wh_Flags	dictionary flags
=33944					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.851d	86 14		stx $14		FNip:		stx tmp1		; save data stack index
.851f	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.8521	b5 4d		lda $4d,x			lda FSExp+0,x		; copy exponent
.8523	95 4e		sta $4e,x			sta FSExp+1,x
.8525	b5 57		lda $57,x			lda FSMant0+0,x		; copy mantissa
.8527	95 58		sta $58,x			sta FSMant0+1,x
.8529	b5 61		lda $61,x			lda FSMant1+0,x
.852b	95 62		sta $62,x			sta FSMant1+1,x
.852d	b5 6b		lda $6b,x			lda FSMant2+0,x
.852f	95 6c		sta $6c,x			sta FSMant2+1,x
.8531	b5 75		lda $75,x			lda FSMant3+0,x
.8533	95 76		sta $76,x			sta FSMant3+1,x
.8535	e6 4c		inc $4c				inc fp			; FDrop
.8537	a6 14		ldx $14				ldx tmp1		; restore data stack index
=28					CL	.var *-(WordListLink+wh_Xt)
=$8539					en = *	; remember here
>851b	1c					.byte CL	;wh_CodeLength
.8539	60		rts				rts
>853a	46 44 75 70			L1:	.text "FDup"	;  name of word as a string, ending at wh_NameLastChar
>853e	04					.byte (("FDup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>853f	98 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8541	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8542	00					.byte 0	;wh_Flags	dictionary flags
=33982					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8543	20 b1 84	jsr $84b1	FDup:		jsr FAllocX		; alloc FP stack entry, X=fp stack index
.8546	b5 4e		lda $4e,x			lda FSExp+1,x		; copy exponent
.8548	95 4d		sta $4d,x			sta FSExp+0,x
.854a	b5 58		lda $58,x			lda FSMant0+1,x		; copy mantissa
.854c	95 57		sta $57,x			sta FSMant0+0,x
.854e	b5 62		lda $62,x			lda FSMant1+1,x
.8550	95 61		sta $61,x			sta FSMant1+0,x
.8552	b5 6c		lda $6c,x			lda FSMant2+1,x
.8554	95 6b		sta $6b,x			sta FSMant2+0,x
.8556	b5 76		lda $76,x			lda FSMant3+1,x
.8558	95 75		sta $75,x			sta FSMant3+0,x
.855a	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CL	.var *-(WordListLink+wh_Xt)
=$855c					en = *	; remember here
>8541	19					.byte CL	;wh_CodeLength
.855c	60		rts				rts
>855d	46 4f 76 65 72			L1:	.text "FOver"	;  name of word as a string, ending at wh_NameLastChar
>8562	45					.byte (("FOver"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8563	be 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8565	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8566	00					.byte 0	;wh_Flags	dictionary flags
=34018					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8567	20 b1 84	jsr $84b1	FOver:		jsr FAllocX		; alloc FP stack entry, X=fp stack index
.856a	b5 4f		lda $4f,x			lda FSExp+2,x		; copy exponent
.856c	95 4d		sta $4d,x			sta FSExp+0,x
.856e	b5 59		lda $59,x			lda FSMant0+2,x		; copy mantissa
.8570	95 57		sta $57,x			sta FSMant0+0,x
.8572	b5 63		lda $63,x			lda FSMant1+2,x
.8574	95 61		sta $61,x			sta FSMant1+0,x
.8576	b5 6d		lda $6d,x			lda FSMant2+2,x
.8578	95 6b		sta $6b,x			sta FSMant2+0,x
.857a	b5 77		lda $77,x			lda FSMant3+2,x
.857c	95 75		sta $75,x			sta FSMant3+0,x
.857e	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CL	.var *-(WordListLink+wh_Xt)
=$8580					en = *	; remember here
>8565	19					.byte CL	;wh_CodeLength
.8580	60		rts				rts
>8581	46 50 69 63 6b			L1:	.text "FPick"	;  name of word as a string, ending at wh_NameLastChar
>8586	65					.byte (("FPick"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8587	e2 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8589	03					.byte 3		;wh_CodeLength  (with placeholder value)
>858a	00					.byte 0	;wh_Flags	dictionary flags
=34054					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.858b	20 c2 b4	jsr $b4c2	FPick:		jsr PopA		; pop u (desired entry #)
.858e	18		clc		FPickA:		clc			; Y= fp stack index of [u]
.858f	65 4c		adc $4c				adc fp
.8591	a8		tay		FPick3:		tay
.8592	20 b1 84	jsr $84b1			jsr FAllocX		; alloc FP stack entry, X=fp stack index
.8595	b9 4d 00	lda $004d,y			lda FSExp,y		; copy exponent
.8598	95 4d		sta $4d,x			sta FSExp,x
.859a	b9 57 00	lda $0057,y			lda FSMant0,y		; copy mantissa
.859d	95 57		sta $57,x			sta FSMant0,x
.859f	b9 61 00	lda $0061,y			lda FSMant1,y
.85a2	95 61		sta $61,x			sta FSMant1,x
.85a4	b9 6b 00	lda $006b,y			lda FSMant2,y
.85a7	95 6b		sta $6b,x			sta FSMant2,x
.85a9	b9 75 00	lda $0075,y			lda FSMant3,y
.85ac	95 75		sta $75,x			sta FSMant3,x
.85ae	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=37					CL	.var *-(WordListLink+wh_Xt)
=$85b0					en = *	; remember here
>8589	25					.byte CL	;wh_CodeLength
.85b0	60		rts				rts
>85b1	46 32 44 75 70			L1:	.text "F2Dup"	;  name of word as a string, ending at wh_NameLastChar
>85b6	05					.byte (("F2Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>85b7	06 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85b9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85ba	08					.byte NN	;wh_Flags	dictionary flags
=34102					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85bb	20 67 85	jsr $8567	F2Dup:		jsr FOver
.85be	4c 67 85	jmp $8567			jmp FOver
=6					CL	.var *-(WordListLink+wh_Xt)
=$85c1					en = *	; remember here
>85b9	06					.byte CL	;wh_CodeLength
>85c1	46 53 77 61 70			L1:	.text "FSwap"	;  name of word as a string, ending at wh_NameLastChar
>85c6	05					.byte (("FSwap"[-1]&7)<<5)+(*-L1)	;wh_HNL
>85c7	36 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85c9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85ca	00					.byte 0	;wh_Flags	dictionary flags
=34118					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85cb	86 14		stx $14		FSwap:		stx tmp1+0		; save data stack index
.85cd	a6 4c		ldx $4c				ldx fp			; X=FP stack index
.85cf	b5 4d		lda $4d,x			lda FSExp+0,x		; do FSExp
.85d1	b4 4e		ldy $4e,x			ldy FSExp+1,x
.85d3	95 4e		sta $4e,x			sta FSExp+1,x
.85d5	94 4d		sty $4d,x			sty FSExp+0,x
.85d7	b5 57		lda $57,x			lda FSMant0+0,x		; do FSMant0
.85d9	b4 58		ldy $58,x			ldy FSMant0+1,x
.85db	95 58		sta $58,x			sta FSMant0+1,x
.85dd	94 57		sty $57,x			sty FSMant0+0,x
.85df	b5 61		lda $61,x			lda FSMant1+0,x		; do FSMant1
.85e1	b4 62		ldy $62,x			ldy FSMant1+1,x
.85e3	95 62		sta $62,x			sta FSMant1+1,x
.85e5	94 61		sty $61,x			sty FSMant1+0,x
.85e7	b5 6b		lda $6b,x			lda FSMant2+0,x		; do FSMant2
.85e9	b4 6c		ldy $6c,x			ldy FSMant2+1,x
.85eb	95 6c		sta $6c,x			sta FSMant2+1,x
.85ed	94 6b		sty $6b,x			sty FSMant2+0,x
.85ef	b5 75		lda $75,x			lda FSMant3+0,x		; do FSMant3
.85f1	b4 76		ldy $76,x			ldy FSMant3+1,x
.85f3	95 76		sta $76,x			sta FSMant3+1,x
.85f5	94 75		sty $75,x			sty FSMant3+0,x
.85f7	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=46					CL	.var *-(WordListLink+wh_Xt)
=$85f9					en = *	; remember here
>85c9	2e					.byte CL	;wh_CodeLength
.85f9	60		rts				rts
>85fa	46 54 75 63 6b			L1:	.text "FTuck"	;  name of word as a string, ending at wh_NameLastChar
>85ff	65					.byte (("FTuck"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8600	46 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8602	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8603	08					.byte NN	;wh_Flags	dictionary flags
=34175					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8604	20 cb 85	jsr $85cb	FTuck:		jsr FSwap
.8607	4c 67 85	jmp $8567			jmp FOver
=6					CL	.var *-(WordListLink+wh_Xt)
=$860a					en = *	; remember here
>8602	06					.byte CL	;wh_CodeLength
>860a	46 52 6f 74			L1:	.text "FRot"	;  name of word as a string, ending at wh_NameLastChar
>860e	84					.byte (("FRot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>860f	7f 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8611	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8612	00					.byte 0	;wh_Flags	dictionary flags
=34190					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8613	86 14		stx $14		FRot:		stx tmp1		; save data stack index
.8615	a5 4c		lda $4c				lda fp			; for FSMant3, FSMant2, FSMant1, FSMant0, FSExp
.8617	18		clc				clc
.8618	69 28		adc #$28			adc #4*FDim
.861a	d0 03		bne $861f			bne _3
.861c	8a		txa		_2:		txa			;    next byte
.861d	e9 0a		sbc #$0a			sbc #FDim
.861f	aa		tax		_3:		tax
.8620	b5 4f		lda $4f,x			lda FSExp+2,x		;   do a byte
.8622	b4 4e		ldy $4e,x			ldy FSExp+1,x
.8624	94 4f		sty $4f,x			sty FSExp+2,x
.8626	b4 4d		ldy $4d,x			ldy FSExp+0,x
.8628	94 4e		sty $4e,x			sty FSExp+1,x
.862a	95 4d		sta $4d,x			sta FSExp+0,x
.862c	e4 4c		cpx $4c				cpx fp			; done?
.862e	d0 ec		bne $861c			bne _2
.8630	a6 14		ldx $14				ldx tmp1		; restore param stack index
=31					CL	.var *-(WordListLink+wh_Xt)
=$8632					en = *	; remember here
>8611	1f					.byte CL	;wh_CodeLength
.8632	60		rts				rts
>8633	46 2d 52 6f 74			L1:	.text "F-Rot"	;  name of word as a string, ending at wh_NameLastChar
>8638	85					.byte (("F-Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8639	8e 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>863b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>863c	08					.byte NN	;wh_Flags	dictionary flags
=34232					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.863d	20 13 86	jsr $8613	FMRot:		jsr FRot
.8640	4c 13 86	jmp $8613			jmp FRot
=6					CL	.var *-(WordListLink+wh_Xt)
=$8643					en = *	; remember here
>863b	06					.byte CL	;wh_CodeLength
>8643	46 40				L1:	.text "F@"	;  name of word as a string, ending at wh_NameLastChar
>8645	02					.byte (("F@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8646	b8 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8648	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8649	00					.byte 0	;wh_Flags	dictionary flags
=34245					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.864a	20 de b4	jsr $b4de	FAt:		jsr PopYA		; pop addr
.864d	85 16		sta $16		FAt_YA:		sta tmp2+0		; save addr
.864f	84 17		sty $17				sty tmp2+1
.8651	a0 00		ldy #$00			ldy #0			; starting offset from tmp2
.8653	20 b1 84	jsr $84b1	FAt_Tmp2Y:	jsr FAllocX		; alloc FP stack entry, X= fp stack index
.8656	b1 16		lda ($16),y			lda (tmp2),y		; copy mantissa
.8658	95 75		sta $75,x			sta FSMant3,x
.865a	c8		iny				iny
.865b	b1 16		lda ($16),y			lda (tmp2),y
.865d	95 6b		sta $6b,x			sta FSMant2,x
.865f	c8		iny				iny
.8660	b1 16		lda ($16),y			lda (tmp2),y
.8662	95 61		sta $61,x			sta FSMant1,x
.8664	c8		iny				iny
.8665	b1 16		lda ($16),y			lda (tmp2),y
.8667	95 57		sta $57,x			sta FSMant0,x
.8669	c8		iny				iny			; copy exponent
.866a	b1 16		lda ($16),y			lda (tmp2),y
.866c	95 4d		sta $4d,x			sta FSExp,x
.866e	a6 14		ldx $14				ldx tmp1		; restore data stack index
=38					CL	.var *-(WordListLink+wh_Xt)
=$8670					en = *	; remember here
>8648	26					.byte CL	;wh_CodeLength
.8670	60		rts				rts
>8671	46 21				L1:	.text "F!"	;  name of word as a string, ending at wh_NameLastChar
>8673	22					.byte (("F!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8674	c5 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8676	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8677	00					.byte 0	;wh_Flags	dictionary flags
=34291					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8678	20 de b4	jsr $b4de	FStore:		jsr PopYA		; pop addr
.867b	85 14		sta $14		FStore_YA:	sta tmp1+0		; save addr
.867d	84 15		sty $15				sty tmp1+1
.867f	a0 00		ldy #$00			ldy #0
.8681	86 16		stx $16				stx tmp2		; save data stack index
.8683	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.8685	b5 75		lda $75,x			lda FSMant3,x		; copy mantissa
.8687	91 14		sta ($14),y			sta (tmp1),y
.8689	b5 6b		lda $6b,x			lda FSMant2,x
.868b	c8		iny				iny
.868c	91 14		sta ($14),y			sta (tmp1),y
.868e	b5 61		lda $61,x			lda FSMant1,x
.8690	c8		iny				iny
.8691	91 14		sta ($14),y			sta (tmp1),y
.8693	b5 57		lda $57,x			lda FSMant0,x
.8695	c8		iny				iny
.8696	91 14		sta ($14),y			sta (tmp1),y
.8698	b5 4d		lda $4d,x			lda FSExp,x		; copy exponent
.869a	c8		iny				iny
.869b	91 14		sta ($14),y			sta (tmp1),y
.869d	e6 4c		inc $4c				inc fp			; FDrop
.869f	a6 16		ldx $16				ldx tmp2		; restore data stack index
=41					CL	.var *-(WordListLink+wh_Xt)
=$86a1					en = *	; remember here
>8676	29					.byte CL	;wh_CodeLength
.86a1	60		rts				rts
>86a2	46 2c				L1:	.text "F,"	;  name of word as a string, ending at wh_NameLastChar
>86a4	82					.byte (("F,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>86a5	f3 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86a7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86a8	08					.byte NN	;wh_Flags	dictionary flags
=34340					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86a9	a5 00		lda $00		FComma:		lda cp+0		; store f at Here
.86ab	a4 01		ldy $01				ldy cp+1
.86ad	20 7b 86	jsr $867b			jsr FStore_YA
.86b0	a9 05		lda #$05			lda #5			; Float
.86b2	20 eb b8	jsr $b8eb			jsr PushZA
.86b5	4c cc c1	jmp $c1cc			jmp Allot
=15					CL	.var *-(WordListLink+wh_Xt)
=$86b8					en = *	; remember here
>86a7	0f					.byte CL	;wh_CodeLength
>86b8	46 30 21			L1:	.text "F0!"	;  name of word as a string, ending at wh_NameLastChar
>86bb	23					.byte (("F0!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>86bc	24 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86bf	08					.byte NN	;wh_Flags	dictionary flags
=34363					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86c0	20 bf 88	jsr $88bf	FZStore:	jsr F0
.86c3	4c 78 86	jmp $8678			jmp FStore
=6					CL	.var *-(WordListLink+wh_Xt)
=$86c6					en = *	; remember here
>86be	06					.byte CL	;wh_CodeLength
>86c6	46 30 3d			L1:	.text "F0="	;  name of word as a string, ending at wh_NameLastChar
>86c9	a3					.byte (("F0="[-1]&7)<<5)+(*-L1)	;wh_HNL
>86ca	3b 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86cd	08					.byte NN	;wh_Flags	dictionary flags
=34377					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86ce	a4 4c		ldy $4c		FZEq:		ldy fp
.86d0	b9 57 00	lda $0057,y			lda FSMant0,y
.86d3	d0 26		bne $86fb			bne FFalse1
.86d5					FTrue1:
.86d5	e6 4c		inc $4c				inc fp		; FDrop
.86d7	4c c9 b8	jmp $b8c9			jmp True	; return true
=12					CL	.var *-(WordListLink+wh_Xt)
=$86da					en = *	; remember here
>86cc	0c					.byte CL	;wh_CodeLength
>86da	46 30 3c 3e			L1:	.text "F0<>"	;  name of word as a string, ending at wh_NameLastChar
>86de	c4					.byte (("F0<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>86df	49 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86e2	08					.byte NN	;wh_Flags	dictionary flags
=34398					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86e3	a4 4c		ldy $4c		FZNe:		ldy fp
.86e5	b9 57 00	lda $0057,y			lda FSMant0,y
.86e8	d0 eb		bne $86d5			bne FTrue1
.86ea	f0 0f		beq $86fb			beq FFalse1
=9					CL	.var *-(WordListLink+wh_Xt)
=$86ec					en = *	; remember here
>86e1	09					.byte CL	;wh_CodeLength
>86ec	46 30 3c			L1:	.text "F0<"	;  name of word as a string, ending at wh_NameLastChar
>86ef	83					.byte (("F0<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>86f0	5e 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86f2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86f3	08					.byte NN	;wh_Flags	dictionary flags
=34415					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86f4	a4 4c		ldy $4c		FZLt:		ldy fp
.86f6	b9 57 00	lda $0057,y			lda FSMant0,y
.86f9	30 da		bmi $86d5			bmi FTrue1
.86fb					FFalse1:
.86fb	e6 4c		inc $4c				inc fp		; FDrop
.86fd	4c dc b8	jmp $b8dc			jmp False	; return false
=12					CL	.var *-(WordListLink+wh_Xt)
=$8700					en = *	; remember here
>86f2	0c					.byte CL	;wh_CodeLength
>8700	46 30 3e 3d			L1:	.text "F0>="	;  name of word as a string, ending at wh_NameLastChar
>8704	a4					.byte (("F0>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>8705	6f 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8707	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8708	08					.byte NN	;wh_Flags	dictionary flags
=34436					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8709	a4 4c		ldy $4c		FZGe:		ldy fp
.870b	b9 57 00	lda $0057,y			lda FSMant0,y
.870e	10 c5		bpl $86d5			bpl FTrue1
.8710	30 e9		bmi $86fb			bmi FFalse1
=9					CL	.var *-(WordListLink+wh_Xt)
=$8712					en = *	; remember here
>8707	09					.byte CL	;wh_CodeLength
>8712	46 30 3e			L1:	.text "F0>"	;  name of word as a string, ending at wh_NameLastChar
>8715	c3					.byte (("F0>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8716	84 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8718	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8719	08					.byte NN	;wh_Flags	dictionary flags
=34453					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.871a	a4 4c		ldy $4c		FZGt:		ldy fp
.871c	b9 57 00	lda $0057,y			lda FSMant0,y
.871f	30 da		bmi $86fb			bmi FFalse1
.8721	d0 b2		bne $86d5			bne FTrue1
.8723	f0 d6		beq $86fb			beq FFalse1
=11					CL	.var *-(WordListLink+wh_Xt)
=$8725					en = *	; remember here
>8718	0b					.byte CL	;wh_CodeLength
>8725	46 30 3c 3d			L1:	.text "F0<="	;  name of word as a string, ending at wh_NameLastChar
>8729	a4					.byte (("F0<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>872a	95 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>872c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>872d	08					.byte NN	;wh_Flags	dictionary flags
=34473					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.872e	a4 4c		ldy $4c		FZLe:		ldy fp
.8730	b9 57 00	lda $0057,y			lda FSMant0,y
.8733	30 a0		bmi $86d5			bmi FTrue1
.8735	d0 c4		bne $86fb			bne FFalse1
.8737	f0 9c		beq $86d5			beq FTrue1
=11					CL	.var *-(WordListLink+wh_Xt)
=$8739					en = *	; remember here
>872c	0b					.byte CL	;wh_CodeLength
>8739	46 3c				L1:	.text "F<"	;  name of word as a string, ending at wh_NameLastChar
>873b	82					.byte (("F<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>873c	a9 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>873e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>873f	08					.byte NN	;wh_Flags	dictionary flags
=34491					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8740	20 52 84	jsr $8452	FLt:		jsr FCmpA
.8743	30 35		bmi $877a			bmi FTrue2
.8745					FFalse2:
.8745	e6 4c		inc $4c				inc fp		; FDrop
.8747	e6 4c		inc $4c				inc fp		; FDrop
.8749	4c dc b8	jmp $b8dc			jmp False	; return False
=12					CL	.var *-(WordListLink+wh_Xt)
=$874c					en = *	; remember here
>873e	0c					.byte CL	;wh_CodeLength
>874c	46 3e 3d			L1:	.text "F>="	;  name of word as a string, ending at wh_NameLastChar
>874f	a3					.byte (("F>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>8750	bb 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8752	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8753	08					.byte NN	;wh_Flags	dictionary flags
=34511					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8754	20 52 84	jsr $8452	FGe:		jsr FCmpA
.8757	10 21		bpl $877a			bpl FTrue2
.8759	30 ea		bmi $8745			bmi FFalse2
=7					CL	.var *-(WordListLink+wh_Xt)
=$875b					en = *	; remember here
>8752	07					.byte CL	;wh_CodeLength
>875b	46 3e				L1:	.text "F>"	;  name of word as a string, ending at wh_NameLastChar
>875d	c2					.byte (("F>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>875e	cf 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8760	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8761	08					.byte NN	;wh_Flags	dictionary flags
=34525					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8762	20 52 84	jsr $8452	FGt:		jsr FCmpA
.8765	30 de		bmi $8745			bmi FFalse2
.8767	d0 11		bne $877a			bne FTrue2
.8769	f0 da		beq $8745			beq FFalse2
=9					CL	.var *-(WordListLink+wh_Xt)
=$876b					en = *	; remember here
>8760	09					.byte CL	;wh_CodeLength
>876b	46 3c 3d			L1:	.text "F<="	;  name of word as a string, ending at wh_NameLastChar
>876e	a3					.byte (("F<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>876f	dd 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8771	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8772	08					.byte NN	;wh_Flags	dictionary flags
=34542					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8773	20 52 84	jsr $8452	FLe:		jsr FCmpA
.8776	30 02		bmi $877a			bmi FTrue2
.8778	d0 cb		bne $8745			bne FFalse2
.877a					FTrue2:
.877a	e6 4c		inc $4c				inc fp		; FDrop
.877c	e6 4c		inc $4c				inc fp		; FDrop
.877e	4c c9 b8	jmp $b8c9			jmp True	; return True
=14					CL	.var *-(WordListLink+wh_Xt)
=$8781					en = *	; remember here
>8771	0e					.byte CL	;wh_CodeLength
>8781	46 3c 3e			L1:	.text "F<>"	;  name of word as a string, ending at wh_NameLastChar
>8784	c3					.byte (("F<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8785	ee 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8787	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8788	08					.byte NN	;wh_Flags	dictionary flags
=34564					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8789	20 52 84	jsr $8452	FNe:		jsr FCmpA
.878c	d0 ec		bne $877a			bne FTrue2
.878e	f0 b5		beq $8745			beq FFalse2
=7					CL	.var *-(WordListLink+wh_Xt)
=$8790					en = *	; remember here
>8787	07					.byte CL	;wh_CodeLength
>8790	46 3d				L1:	.text "F="	;  name of word as a string, ending at wh_NameLastChar
>8792	a2					.byte (("F="[-1]&7)<<5)+(*-L1)	;wh_HNL
>8793	04 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8795	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8796	08					.byte NN	;wh_Flags	dictionary flags
=34578					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8797	20 52 84	jsr $8452	FEq:		jsr FCmpA
.879a	d0 a9		bne $8745			bne FFalse2
.879c	f0 dc		beq $877a			beq FTrue2
=7					CL	.var *-(WordListLink+wh_Xt)
=$879e					en = *	; remember here
>8795	07					.byte CL	;wh_CodeLength
>879e	46 7e 41 62 73			L1:	.text "F~Abs"	;  name of word as a string, ending at wh_NameLastChar
>87a3	65					.byte (("F~Abs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>87a4	12 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87a6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87a7	08					.byte NN	;wh_Flags	dictionary flags
=34595					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87a8	20 3d 86	jsr $863d	FTAbs:		jsr FMRot
.87ab	20 80 8b	jsr $8b80			jsr FMinus
.87ae	20 de 8b	jsr $8bde			jsr FAbs
.87b1	4c 62 87	jmp $8762			jmp FGt
=12					CL	.var *-(WordListLink+wh_Xt)
=$87b4					en = *	; remember here
>87a6	0c					.byte CL	;wh_CodeLength
>87b4	46 7e 52 65 6c			L1:	.text "F~Rel"	;  name of word as a string, ending at wh_NameLastChar
>87b9	85					.byte (("F~Rel"[-1]&7)<<5)+(*-L1)	;wh_HNL
>87ba	23 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87bd	08					.byte NN	;wh_Flags	dictionary flags
=34617					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87be	20 67 85	jsr $8567	FTRel:		jsr FOver
.87c1	a9 03		lda #$03			lda #3
.87c3	20 8e 85	jsr $858e			jsr FPickA
.87c6	20 3e 8b	jsr $8b3e			jsr FPlus
.87c9	20 de 8b	jsr $8bde			jsr FAbs
.87cc	20 12 8c	jsr $8c12			jsr FStar		; r1 r2 r3*|r1+r2|
.87cf	20 3d 86	jsr $863d			jsr FMRot		; r3*|r1+r2| r1 r2
.87d2	20 80 8b	jsr $8b80			jsr FMinus
.87d5	20 de 8b	jsr $8bde			jsr FAbs
.87d8	4c 62 87	jmp $8762			jmp FGt
=29					CL	.var *-(WordListLink+wh_Xt)
=$87db					en = *	; remember here
>87bc	1d					.byte CL	;wh_CodeLength
>87db	46 7e				L1:	.text "F~"	;  name of word as a string, ending at wh_NameLastChar
>87dd	c2					.byte (("F~"[-1]&7)<<5)+(*-L1)	;wh_HNL
>87de	39 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87e0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87e1	08					.byte NN	;wh_Flags	dictionary flags
=34653					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87e2	a4 4c		ldy $4c		FTilde:		ldy fp
.87e4	b9 57 00	lda $0057,y			lda FSMant0,y
.87e7	30 06		bmi $87ef			bmi _10			; r3<0
.87e9	d0 bd		bne $87a8			bne FTAbs		; r3>0
.87eb	e6 4c		inc $4c				inc fp			; r3=0
.87ed	d0 a8		bne $8797			bne FEq
.87ef	20 b7 8b	jsr $8bb7	_10:		jsr FNegate
.87f2	4c be 87	jmp $87be			jmp FTRel
=19					CL	.var *-(WordListLink+wh_Xt)
=$87f5					en = *	; remember here
>87e0	13					.byte CL	;wh_CodeLength
>87f5	46 56 61 72 69 61 62 6c		L1:	.text "FVariable"	;  name of word as a string, ending at wh_NameLastChar
>87fd	65
>87fe	a9					.byte (("FVariable"[-1]&7)<<5)+(*-L1)	;wh_HNL
>87ff	5d 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8801	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8802	0c					.byte IM+NN	;wh_Flags	dictionary flags
=34686					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8803	20 c3 c2	jsr $c2c3	FVariable:	jsr Create		; compile word header & push PFA adr
.8806	20 fe bc	jsr $bcfe			jsr adjust_z		; fix word code length
.8809	20 bf 88	jsr $88bf			jsr F0			; alloc & init data
.880c	4c a9 86	jmp $86a9			jmp FComma
=12					CL	.var *-(WordListLink+wh_Xt)
=$880f					en = *	; remember here
>8801	0c					.byte CL	;wh_CodeLength
>880f	46 4c 69 74 65 72 61 6c		L1:	.text "FLiteral"	;  name of word as a string, ending at wh_NameLastChar
>8817	88					.byte (("FLiteral"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8818	7e 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>881a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>881b	0c					.byte IM+NN	;wh_Flags	dictionary flags
=34711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.881c	20 31 88	jsr $8831	FLiteral:	jsr FLitTest
.881f	f0 0a		beq $882b			beq _Short
.8821	a9 5a		lda #$5a			lda #<FLitI		; compile JSR FLitI
.8823	a0 88		ldy #$88			ldy #>FLitI
.8825	20 48 ce	jsr $ce48			jsr Jsr_Comma_YA
.8828	4c a9 86	jmp $86a9			jmp FComma		; inline operand, return
.882b	20 3d 88	jsr $883d	_Short:		jsr FLitShort
.882e	4c 48 ce	jmp $ce48			jmp Jsr_Comma_YA	; compile jsr FLitYA, & return
=21					CL	.var *-(WordListLink+wh_Xt)
=$8831					en = *	; remember here
>881a	15					.byte CL	;wh_CodeLength
.8831					FLitTest:
.8831	a4 4c		ldy $4c				ldy fp
.8833	b9 61 00	lda $0061,y			lda FSMant1,y		; will short work?
.8836	19 6b 00	ora $006b,y			ora FSMant2,y
.8839	19 75 00	ora $0075,y			ora FSMant3,y
.883c	60		rts				rts
.883d					FLitShort:
.883d	a9 a9		lda #$a9			lda #$a9		; compile LDA #mant0
.883f	20 09 ce	jsr $ce09			jsr C_Comma_A
.8842	b9 57 00	lda $0057,y			lda FSMant0,y
.8845	20 09 ce	jsr $ce09			jsr C_Comma_A
.8848	a9 a0		lda #$a0			lda #$a0		; compile LDY #exp
.884a	20 09 ce	jsr $ce09			jsr C_Comma_A
.884d	b9 4d 00	lda $004d,y			lda FSExp,y
.8850	20 09 ce	jsr $ce09			jsr C_Comma_A
.8853	e6 4c		inc $4c				inc fp			; FDrop
.8855	a9 a5		lda #$a5			lda #<FLitYA		; point at FLitYA
.8857	a0 88		ldy #$88			ldy #>FLitYA
.8859	60		rts				rts
.885a					FLitI:
.885a	68		pla				pla			; tmp2= RTS addr
.885b	85 16		sta $16				sta tmp2+0
.885d	18		clc				clc			; bump RTS addr over inline float data
.885e	69 05		adc #$05			adc #5
.8860	a8		tay				tay
.8861	68		pla				pla
.8862	85 17		sta $17				sta tmp2+1
.8864	69 00		adc #$00			adc #0
.8866	48		pha				pha
.8867	98		tya				tya
.8868	48		pha				pha
.8869	a0 01		ldy #$01			ldy #1			; correct for RTS addr
.886b	4c 53 86	jmp $8653			jmp FAt_Tmp2Y		; fetch inline data, & return
>886e	46 43 6f 6e 73 74 61 6e		L1:	.text "FConstant"	;  name of word as a string, ending at wh_NameLastChar
>8876	74
>8877	89					.byte (("FConstant"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8878	97 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>887a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>887b	08					.byte NN	;wh_Flags	dictionary flags
=34807					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.887c	20 26 c2	jsr $c226	FConstant:	jsr Header_Comma	; compile word header
.887f	20 31 88	jsr $8831			jsr FLitTest		; will short work?
.8882	f0 0d		beq $8891			beq _Short
.8884	a9 9a		lda #$9a			lda #<FConstantRun	; compile call
.8886	a0 88		ldy #$88			ldy #>FConstantRun
.8888	20 48 ce	jsr $ce48			jsr Jsr_Comma_YA
.888b	20 fe bc	jsr $bcfe			jsr adjust_z
.888e	4c a9 86	jmp $86a9			jmp FComma		; inline operand, & return
.8891					_Short:
.8891	20 3d 88	jsr $883d			jsr FLitShort		; compile load value
.8894	20 5f ce	jsr $ce5f			jsr Jmp_Comma_YA	; compile JMP
.8897	4c fe bc	jmp $bcfe			jmp adjust_z
=30					CL	.var *-(WordListLink+wh_Xt)
=$889a					en = *	; remember here
>887a	1e					.byte CL	;wh_CodeLength
.889a					FConstantRun:
.889a	68		pla				pla			; tmp2= pop RTS addr
.889b	85 16		sta $16				sta tmp2+0
.889d	68		pla				pla
.889e	85 17		sta $17				sta tmp2+1
.88a0	a0 01		ldy #$01			ldy #1			; correct for RTS addr
.88a2	4c 53 86	jmp $8653			jmp FAt_Tmp2Y		; fetch inline data, & return
.88a5					FLitYA:
.88a5	20 b1 84	jsr $84b1			jsr FAllocX		; alloc FP stack entry, X=fp stack index
.88a8	94 4d		sty $4d,x			sty FSExp,x		; exp= Y
.88aa	95 57		sta $57,x			sta FSMant0,x		; Mant= A,0,0,0
.88ac	a9 00		lda #$00			lda #0
.88ae	95 61		sta $61,x			sta FSMant1,x
.88b0	95 6b		sta $6b,x			sta FSMant2,x
.88b2	95 75		sta $75,x			sta FSMant3,x
.88b4	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.88b6	60		rts				rts
>88b7	30 2e 65			L1:	.text "0.e"	;  name of word as a string, ending at wh_NameLastChar
>88ba	a3					.byte (("0.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>88bb	f7 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88bd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88be	08					.byte NN	;wh_Flags	dictionary flags
=34874					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88bf	a9 00		lda #$00	F0:		lda #0
.88c1	a0 80		ldy #$80			ldy #$80
.88c3	d0 e0		bne $88a5			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$88c5					en = *	; remember here
>88bd	06					.byte CL	;wh_CodeLength
>88c5	31 30 30 30 2e 65		L1:	.text "1000.e"	;  name of word as a string, ending at wh_NameLastChar
>88cb	a6					.byte (("1000.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>88cc	3a 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88cf	08					.byte NN	;wh_Flags	dictionary flags
=34891					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88d0	a9 7d		lda #$7d	F1000:		lda #$7d
.88d2	a0 0a		ldy #$0a			ldy #10
.88d4	d0 cf		bne $88a5			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$88d6					en = *	; remember here
>88ce	06					.byte CL	;wh_CodeLength
>88d6	31 30 2e 65			L1:	.text "10.e"	;  name of word as a string, ending at wh_NameLastChar
>88da	a4					.byte (("10.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>88db	4b 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88de	08					.byte NN	;wh_Flags	dictionary flags
=34906					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88df	a9 50		lda #$50	F10:		lda #$50
.88e1	a0 04		ldy #$04			ldy #4
.88e3	d0 c0		bne $88a5			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$88e5					en = *	; remember here
>88dd	06					.byte CL	;wh_CodeLength
>88e5	32 2e 65			L1:	.text "2.e"	;  name of word as a string, ending at wh_NameLastChar
>88e8	a3					.byte (("2.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>88e9	5a 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88eb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88ec	08					.byte NN	;wh_Flags	dictionary flags
=34920					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88ed	a9 40		lda #$40	F2:		lda #$40
.88ef	a0 02		ldy #$02			ldy #2
.88f1	d0 b2		bne $88a5			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$88f3					en = *	; remember here
>88eb	06					.byte CL	;wh_CodeLength
>88f3	31 2e 65			L1:	.text "1.e"	;  name of word as a string, ending at wh_NameLastChar
>88f6	a3					.byte (("1.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>88f7	68 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88f9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88fa	08					.byte NN	;wh_Flags	dictionary flags
=34934					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88fb	a9 40		lda #$40	F1:		lda #$40
.88fd	a0 01		ldy #$01			ldy #1
.88ff	d0 a4		bne $88a5			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8901					en = *	; remember here
>88f9	06					.byte CL	;wh_CodeLength
>8901	2e 31 65			L1:	.text ".1e"	;  name of word as a string, ending at wh_NameLastChar
>8904	a3					.byte ((".1e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8905	76 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8907	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8908	08					.byte NN	;wh_Flags	dictionary flags
=34948					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8909	20 9a 88	jsr $889a	F10th:		jsr FConstantRun
>890c	67 66 66 66					.dword $66666667	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8910	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$8911					en = *	; remember here
>8907	08					.byte CL	;wh_CodeLength
>8911	50 69				L1:	.text "Pi"	;  name of word as a string, ending at wh_NameLastChar
>8913	22					.byte (("Pi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8914	84 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8916	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8917	08					.byte NN	;wh_Flags	dictionary flags
=34963					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8918	20 9a 88	jsr $889a	FPi:		jsr FConstantRun
>891b	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>891f	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$8920					en = *	; remember here
>8916	08					.byte CL	;wh_CodeLength
>8920	50 69 2f 32			L1:	.text "Pi/2"	;  name of word as a string, ending at wh_NameLastChar
>8924	44					.byte (("Pi/2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8925	93 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8927	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8928	08					.byte NN	;wh_Flags	dictionary flags
=34980					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8929	20 9a 88	jsr $889a	FPiH:		jsr FConstantRun
>892c	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8930	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$8931					en = *	; remember here
>8927	08					.byte CL	;wh_CodeLength
>8931	50 69 2f 34			L1:	.text "Pi/4"	;  name of word as a string, ending at wh_NameLastChar
>8935	84					.byte (("Pi/4"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8936	a4 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8938	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8939	08					.byte NN	;wh_Flags	dictionary flags
=34997					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.893a	20 9a 88	jsr $889a	FPiQ:		jsr FConstantRun
>893d	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8941	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$8942					en = *	; remember here
>8938	08					.byte CL	;wh_CodeLength
>8942	32 50 69			L1:	.text "2Pi"	;  name of word as a string, ending at wh_NameLastChar
>8945	23					.byte (("2Pi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8946	b5 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8948	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8949	08					.byte NN	;wh_Flags	dictionary flags
=35013					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.894a	20 9a 88	jsr $889a	F2Pi:		jsr FConstantRun
>894d	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8951	03						.char 3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$8952					en = *	; remember here
>8948	08					.byte CL	;wh_CodeLength
>8952	46 2e 45			L1:	.text "F.E"	;  name of word as a string, ending at wh_NameLastChar
>8955	a3					.byte (("F.E"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8956	c5 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8958	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8959	08					.byte NN	;wh_Flags	dictionary flags
=35029					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.895a	20 9a 88	jsr $889a	FE:		jsr FConstantRun
>895d	2c 2a fc 56					.dword $56fc2a2c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8961	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$8962					en = *	; remember here
>8958	08					.byte CL	;wh_CodeLength
>8962	46 56 61 6c 75 65		L1:	.text "FValue"	;  name of word as a string, ending at wh_NameLastChar
>8968	a6					.byte (("FValue"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8969	d5 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>896b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>896c	0c					.byte IM+NN	;wh_Flags	dictionary flags
=35048					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.896d	20 26 c2	jsr $c226	FValue:		jsr Header_Comma	; compile word header
.8970	a9 7d		lda #$7d			lda #<FValue_runtime	; compile JSR FValue_runtime
.8972	a0 89		ldy #$89			ldy #>FValue_runtime
.8974	20 48 ce	jsr $ce48			jsr Jsr_Comma_YA
.8977	20 fe bc	jsr $bcfe			jsr adjust_z		; fix word length
.897a	4c a9 86	jmp $86a9			jmp FComma		; alloc & init value
=16					CL	.var *-(WordListLink+wh_Xt)
=$897d					en = *	; remember here
>896b	10					.byte CL	;wh_CodeLength
.897d					FValue_runtime:
.897d	4c 9a 88	jmp $889a			jmp FConstantRun
>8980	46 53 63 61 6c 65		L1:	.text "FScale"	;  name of word as a string, ending at wh_NameLastChar
>8986	a6					.byte (("FScale"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8987	e8 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8989	03					.byte 3		;wh_CodeLength  (with placeholder value)
>898a	08					.byte NN	;wh_Flags	dictionary flags
=35078					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.898b	20 c2 b4	jsr $b4c2	FScale:		jsr PopA		; pop n
.898e	86 14		stx $14		FScaleA:	stx tmp1		; save data stack index
.8990	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.8992	b4 57		ldy $57,x			ldy FSMant0,x		; mantissa zero?
.8994	f0 07		beq $899d			beq _8
.8996	18		clc				clc
.8997	75 4d		adc $4d,x			adc FSExp,x
.8999	95 4d		sta $4d,x			sta FSExp,x
.899b	70 03		bvs $89a0			bvs _overflow		; overflow or underflow?
.899d	a6 14		ldx $14		_8:		ldx tmp1		; restore data stack index
.899f	60		rts				rts
.89a0					_overflow:
.89a0	a6 14		ldx $14				ldx tmp1		; restore data stack index
.89a2	20 40 b5	jsr $b540			jsr Throw_FpOutOfRange
=26					CL	.var *-(WordListLink+wh_Xt)
=$89a5					en = *	; remember here
>8989	1a					.byte CL	;wh_CodeLength
>89a5	46 32 2a			L1:	.text "F2*"	;  name of word as a string, ending at wh_NameLastChar
>89a8	43					.byte (("F2*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>89a9	06 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89ac	08					.byte NN	;wh_Flags	dictionary flags
=35112					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89ad	a9 01		lda #$01	F2Star:		lda #1
.89af	d0 dd		bne $898e			bne FScaleA
=4					CL	.var *-(WordListLink+wh_Xt)
=$89b1					en = *	; remember here
>89ab	04					.byte CL	;wh_CodeLength
>89b1	46 32 2f			L1:	.text "F2/"	;  name of word as a string, ending at wh_NameLastChar
>89b4	e3					.byte (("F2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>89b5	28 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89b8	08					.byte NN	;wh_Flags	dictionary flags
=35124					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89b9	a9 ff		lda #$ff	F2Slash:	lda #$ff
.89bb	d0 d1		bne $898e			bne FScaleA
=4					CL	.var *-(WordListLink+wh_Xt)
=$89bd					en = *	; remember here
>89b7	04					.byte CL	;wh_CodeLength
>89bd	46 6c 6f 6f 72			L1:	.text "Floor"	;  name of word as a string, ending at wh_NameLastChar
>89c2	45					.byte (("Floor"[-1]&7)<<5)+(*-L1)	;wh_HNL
>89c3	34 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89c5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89c6	08					.byte NN	;wh_Flags	dictionary flags
=35138					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89c7	a4 4c		ldy $4c		Floor:		ldy fp
.89c9	b9 57 00	lda $0057,y			lda FSMant0,y		; negative?
.89cc	10 19		bpl $89e7			bpl _a
.89ce	b9 4d 00	lda $004d,y			lda FSExp,y		; > -1 ?
.89d1	10 14		bpl $89e7			bpl _a
.89d3	a9 80		lda #$80			lda #$80		; return -1
.89d5	99 57 00	sta $0057,y			sta FSMant0,y
.89d8	a9 00		lda #$00			lda #0
.89da	99 4d 00	sta $004d,y			sta FSExp,y
.89dd	99 61 00	sta $0061,y			sta FSMant1,y
.89e0	99 6b 00	sta $006b,y			sta FSMant2,y
.89e3	99 75 00	sta $0075,y			sta FSMant3,y
.89e6	60		rts				rts
.89e7	a9 1f		lda #$1f	_a:		lda #31
.89e9	20 ef 89	jsr $89ef			jsr FShiftA
.89ec	4c b7 8a	jmp $8ab7			jmp FNormX
=40					CL	.var *-(WordListLink+wh_Xt)
=$89ef					en = *	; remember here
>89c5	28					.byte CL	;wh_CodeLength
.89ef	86 14		stx $14		FShiftA:	stx tmp1+0		; save data stack index
.89f1	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.89f3	a8		tay		FShiftAX:	tay			; save desired alignment
.89f4	38		sec				sec			; calc bit shift count
.89f5	f5 4d		sbc $4d,x			sbc FSExp,x
.89f7	f0 2e		beq $8a27			beq _leave
.89f9	70 1e		bvs $8a19			bvs _overflow
.89fb	30 2a		bmi $8a27			bmi _leave
.89fd	c9 20		cmp #$20			cmp #32
.89ff	b0 1a		bcs $8a1b			bcs _zero
.8a01	94 4d		sty $4d,x			sty FSExp,x
.8a03	a8		tay				tay
.8a04	b5 57		lda $57,x			lda FSMant0,x
.8a06	c9 80		cmp #$80	_12:		cmp #$80		; mantissa >>=1
.8a08	6a		ror a				ror a
.8a09	76 61		ror $61,x			ror FSMant1,x
.8a0b	76 6b		ror $6b,x			ror FSMant2,x
.8a0d	76 75		ror $75,x			ror FSMant3,x
.8a0f	88		dey				dey
.8a10	d0 f4		bne $8a06			bne _12
.8a12	95 57		sta $57,x			sta FSMant0,x
.8a14	b4 4d		ldy $4d,x	_30:		ldy FSExp,x
.8a16	a6 4c		ldx $4c				ldx fp			; restore fp stack index (FShiftAX could have had a funny one)
.8a18	60		rts				rts
.8a19	10 0c		bpl $8a27	_overflow:	bpl _leave
.8a1b	94 4d		sty $4d,x	_zero:		sty FSExp,x		; return zero
.8a1d	a9 00		lda #$00			lda #0
.8a1f	95 57		sta $57,x			sta FSMant0,x
.8a21	95 61		sta $61,x			sta FSMant1,x
.8a23	95 6b		sta $6b,x			sta FSMant2,x
.8a25	95 75		sta $75,x			sta FSMant3,x
.8a27	18		clc		_leave:		clc
.8a28	90 ea		bcc $8a14			bcc _30
>8a2a	46 54 72 75 6e 63		L1:	.text "FTrunc"	;  name of word as a string, ending at wh_NameLastChar
>8a30	66					.byte (("FTrunc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a31	42 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a33	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a34	08					.byte NN	;wh_Flags	dictionary flags
=35248					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a35	a4 4c		ldy $4c		FTrunc:		ldy fp
.8a37	b9 57 00	lda $0057,y			lda FSMant0,y
.8a3a	10 8b		bpl $89c7			bpl Floor
.8a3c	20 b7 8b	jsr $8bb7			jsr FNegate
.8a3f	20 c7 89	jsr $89c7			jsr Floor
.8a42	4c b7 8b	jmp $8bb7			jmp FNegate
>8a45	46 52 6f 75 6e 64		L1:	.text "FRound"	;  name of word as a string, ending at wh_NameLastChar
>8a4b	86					.byte (("FRound"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a4c	b0 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a4e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a4f	08					.byte NN	;wh_Flags	dictionary flags
=35275					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a50	a9 1f		lda #$1f	FRound:		lda #31
.8a52	20 ef 89	jsr $89ef			jsr FShiftA
.8a55	90 05		bcc $8a5c			bcc _15
.8a57	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8a59	4c 73 8b	jmp $8b73			jmp F1Plus
.8a5c	4c b7 8a	jmp $8ab7	_15:		jmp FNormX
=15					CL	.var *-(WordListLink+wh_Xt)
=$8a5f					en = *	; remember here
>8a4e	0f					.byte CL	;wh_CodeLength
>8a5f	46 49 6e 74 46 72 63		L1:	.text "FIntFrc"	;  name of word as a string, ending at wh_NameLastChar
>8a66	67					.byte (("FIntFrc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a67	cb 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a69	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a6a	08					.byte NN	;wh_Flags	dictionary flags
=35302					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a6b	20 43 85	jsr $8543	FIntFrc:	jsr FDup	; ( r1 r1 )
.8a6e	20 c7 89	jsr $89c7			jsr Floor	; ( r1 rint )
.8a71	20 04 86	jsr $8604			jsr FTuck	; ( rint r1 rint )
.8a74	20 80 8b	jsr $8b80			jsr FMinus	; ( rint rfrac )
.8a77	4c cb 85	jmp $85cb			jmp FSwap	; ( rfrac rint )
=15					CL	.var *-(WordListLink+wh_Xt)
=$8a7a					en = *	; remember here
>8a69	0f					.byte CL	;wh_CodeLength
>8a7a	46 4d 41 6c 69 67 6e 58		L1:	.text "FMAlignX"	;  name of word as a string, ending at wh_NameLastChar
>8a82	08					.byte (("FMAlignX"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a83	e6 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a85	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a86	08					.byte NN	;wh_Flags	dictionary flags
=35330					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a87	86 14		stx $14		FMAlignX:	stx tmp1+0	; save data stack index
.8a89	a6 4c		ldx $4c				ldx fp		; load FP stack index
.8a8b	e0 09		cpx #$09			cpx #FDim-1	; check FP stack for >=2 entries
.8a8d	b0 19		bcs $8aa8			bcs Throw_FPStack_3
.8a8f	b5 4d		lda $4d,x			lda FSExp+0,x	; compare exponents
.8a91	38		sec				sec
.8a92	f5 4e		sbc $4e,x			sbc FSExp+1,x
.8a94	30 03		bmi $8a99			bmi _1		; r1 smaller?
.8a96	d0 08		bne $8aa0			bne _2		; r2 smaller?
.8a98	60		rts				rts
.8a99					_1:
.8a99	70 07		bvs $8aa2			bvs _2b		; was this a big positive #?
.8a9b	b5 4e		lda $4e,x	_1b:		lda FSExp+1,x	; make r1 like r2
.8a9d	4c f3 89	jmp $89f3			jmp FShiftAX
.8aa0					_2:
.8aa0	70 f7		bvs $8a99			bvs _1		; was this a big negative #?
.8aa2	b5 4d		lda $4d,x	_2b:		lda FSExp+0,x	; make r2 like r1
.8aa4	e8		inx				inx
.8aa5	4c f3 89	jmp $89f3			jmp FShiftAX
=33					CL	.var *-(WordListLink+wh_Xt)
=$8aa8					en = *	; remember here
>8a85	21					.byte CL	;wh_CodeLength
.8aa8	20 36 b5	jsr $b536	Throw_FPStack_3: jsr Throw_FPStack
>8aab	46 4e 6f 72 6d			L1:	.text "FNorm"	;  name of word as a string, ending at wh_NameLastChar
>8ab0	a5					.byte (("FNorm"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8ab1	02 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ab3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ab4	08					.byte NN	;wh_Flags	dictionary flags
=35376					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ab5	86 14		stx $14		FNorm:		stx tmp1+0		; save data stack index
.8ab7	a6 4c		ldx $4c		FNormX:		ldx fp			; switch to FP stack
.8ab9	b4 4d		ldy $4d,x			ldy FSExp,x
.8abb	b5 57		lda $57,x			lda FSMant0,x		; mantissa negative?
.8abd	30 2d		bmi $8aec			bmi _Neg
.8abf	d0 0f		bne $8ad0			bne _Pos2		; do byte shift
.8ac1	20 1f 8b	jsr $8b1f			jsr _ShiftB
.8ac4	d0 0a		bne $8ad0			bne _Pos2
.8ac6	20 1f 8b	jsr $8b1f			jsr _ShiftB
.8ac9	d0 05		bne $8ad0			bne _Pos2
.8acb	20 1f 8b	jsr $8b1f			jsr _ShiftB
.8ace	f0 43		beq $8b13			beq _zero		; no significant bits left?
.8ad0	18		clc		_Pos2:		clc
.8ad1	30 0a		bmi $8add			bmi _RShft
.8ad3	88		dey		_Pos3:		dey			; do bit shift
.8ad4	16 75		asl $75,x			asl FSMant3,x
.8ad6	36 6b		rol $6b,x			rol FSMant2,x
.8ad8	36 61		rol $61,x			rol FSMant1,x
.8ada	2a		rol a				rol a
.8adb	10 f6		bpl $8ad3			bpl _Pos3
.8add					_RShft:
.8add	c8		iny				iny
.8ade	6a		ror a				ror a
.8adf	76 61		ror $61,x			ror FSMant1,x
.8ae1	76 6b		ror $6b,x			ror FSMant2,x
.8ae3	76 75		ror $75,x			ror FSMant3,x
.8ae5					_28:
.8ae5	95 57		sta $57,x			sta FSMant0,x
.8ae7	94 4d		sty $4d,x			sty FSExp,x
.8ae9	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.8aeb	60		rts				rts
.8aec					_Neg:
.8aec	c9 ff		cmp #$ff			cmp #$ff
.8aee	d0 11		bne $8b01			bne _Neg2	; do byte shift
.8af0	20 1f 8b	jsr $8b1f			jsr _ShiftB
.8af3	c9 ff		cmp #$ff			cmp #$ff
.8af5	d0 0a		bne $8b01			bne _Neg2
.8af7	20 1f 8b	jsr $8b1f			jsr _ShiftB
.8afa	c9 ff		cmp #$ff			cmp #$ff
.8afc	d0 03		bne $8b01			bne _Neg2
.8afe	20 1f 8b	jsr $8b1f			jsr _ShiftB
.8b01	c9 00		cmp #$00	_Neg2:		cmp #0
.8b03	10 d8		bpl $8add			bpl _RShft
.8b05	88		dey		_Neg3:		dey
.8b06	16 75		asl $75,x			asl FSMant3,x
.8b08	36 6b		rol $6b,x			rol FSMant2,x
.8b0a	36 61		rol $61,x			rol FSMant1,x
.8b0c	2a		rol a				rol a
.8b0d	30 f6		bmi $8b05			bmi _Neg3
.8b0f	10 cc		bpl $8add			bpl _RShft
.8b11	68		pla		_Zerop:		pla
.8b12	68		pla				pla		; pop rts addr from _ShiftB
.8b13	a9 00		lda #$00	_zero:		lda #0
.8b15	95 75		sta $75,x			sta FSMant3,x
.8b17	95 6b		sta $6b,x			sta FSMant2,x
.8b19	95 61		sta $61,x			sta FSMant1,x
.8b1b	a0 80		ldy #$80			ldy #$80
.8b1d	d0 c6		bne $8ae5			bne _28
.8b1f					_ShiftB:
.8b1f	98		tya				tya		; exponent -= 8
.8b20	38		sec				sec
.8b21	e9 08		sbc #$08			sbc #8
.8b23	a8		tay				tay
.8b24	70 eb		bvs $8b11			bvs _zerop	;is this useful? do we need more of them?
.8b26	b5 61		lda $61,x			lda FSMant1,x
.8b28	48		pha				pha
.8b29	b5 6b		lda $6b,x			lda FSMant2,x
.8b2b	95 61		sta $61,x			sta FSMant1,x
.8b2d	b5 75		lda $75,x			lda FSMant3,x
.8b2f	95 6b		sta $6b,x			sta FSMant2,x
.8b31	a9 00		lda #$00			lda #0
.8b33	95 75		sta $75,x			sta FSMant3,x
.8b35	68		pla				pla
.8b36	60		rts				rts
=130					CL	.var *-(WordListLink+wh_Xt)
=$8b37					en = *	; remember here
>8ab3	82					.byte CL	;wh_CodeLength
>8b37	46 2b				L1:	.text "F+"	;  name of word as a string, ending at wh_NameLastChar
>8b39	62					.byte (("F+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b3a	30 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b3c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b3d	08					.byte NN	;wh_Flags	dictionary flags
=35513					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b3e	20 87 8a	jsr $8a87	FPlus:		jsr FMAlignX	; align mantissas, X= fp stack index
.8b41	18		clc				clc		; add mantissas
.8b42	b5 76		lda $76,x			lda FSMant3+1,x
.8b44	75 75		adc $75,x			adc FSMant3+0,x
.8b46	95 76		sta $76,x			sta FSMant3+1,x
.8b48	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b4a	75 6b		adc $6b,x			adc FSMant2+0,x
.8b4c	95 6c		sta $6c,x			sta FSMant2+1,x
.8b4e	b5 62		lda $62,x			lda FSMant1+1,x
.8b50	75 61		adc $61,x			adc FSMant1+0,x
.8b52	95 62		sta $62,x			sta FSMant1+1,x
.8b54	b5 58		lda $58,x			lda FSMant0+1,x
.8b56	75 57		adc $57,x			adc FSMant0+0,x
.8b58					FPlusFin:
.8b58	e8		inx				inx		; FDrop r2
.8b59	86 4c		stx $4c				stx fp
.8b5b	50 09		bvc $8b66	FPlusFin3:	bvc _19		; if overflow
.8b5d	6a		ror a				ror a		;   shift mantissa right 1 bit
.8b5e	76 61		ror $61,x			ror FSMant1,x
.8b60	76 6b		ror $6b,x			ror FSMant2,x
.8b62	76 75		ror $75,x			ror FSMant3,x
.8b64	f6 4d		inc $4d,x			inc FSExp,x	;   adjust exponent
.8b66					_19:
.8b66	95 57		sta $57,x			sta FSMant0,x
.8b68	4c b7 8a	jmp $8ab7			jmp FNormX	; normalize, return
=45					CL	.var *-(WordListLink+wh_Xt)
=$8b6b					en = *	; remember here
>8b3c	2d					.byte CL	;wh_CodeLength
>8b6b	46 31 2b			L1:	.text "F1+"	;  name of word as a string, ending at wh_NameLastChar
>8b6e	63					.byte (("F1+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b6f	b9 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b71	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b72	08					.byte NN	;wh_Flags	dictionary flags
=35566					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b73	20 fb 88	jsr $88fb	F1Plus:		jsr F1
.8b76	4c 3e 8b	jmp $8b3e			jmp FPlus
=6					CL	.var *-(WordListLink+wh_Xt)
=$8b79					en = *	; remember here
>8b71	06					.byte CL	;wh_CodeLength
>8b79	46 2d				L1:	.text "F-"	;  name of word as a string, ending at wh_NameLastChar
>8b7b	a2					.byte (("F-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b7c	ee 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b7e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b7f	08					.byte NN	;wh_Flags	dictionary flags
=35579					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b80	20 87 8a	jsr $8a87	FMinus:		jsr FMAlignX	; align mantissas
.8b83	38		sec				sec		; subtract mantissas
.8b84	b5 76		lda $76,x			lda FSMant3+1,x
.8b86	f5 75		sbc $75,x			sbc FSMant3+0,x
.8b88	95 76		sta $76,x			sta FSMant3+1,x
.8b8a	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b8c	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8b8e	95 6c		sta $6c,x			sta FSMant2+1,x
.8b90	b5 62		lda $62,x			lda FSMant1+1,x
.8b92	f5 61		sbc $61,x			sbc FSMant1+0,x
.8b94	95 62		sta $62,x			sta FSMant1+1,x
.8b96	b5 58		lda $58,x			lda FSMant0+1,x
.8b98	f5 57		sbc $57,x			sbc FSMant0+0,x
.8b9a	4c 58 8b	jmp $8b58			jmp FPlusFin
=29					CL	.var *-(WordListLink+wh_Xt)
=$8b9d					en = *	; remember here
>8b7e	1d					.byte CL	;wh_CodeLength
>8b9d	46 31 2d			L1:	.text "F1-"	;  name of word as a string, ending at wh_NameLastChar
>8ba0	a3					.byte (("F1-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8ba1	fb 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ba3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ba4	08					.byte NN	;wh_Flags	dictionary flags
=35616					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ba5	20 fb 88	jsr $88fb	F1Minus:	jsr F1
.8ba8	4c 80 8b	jmp $8b80			jmp FMinus
=6					CL	.var *-(WordListLink+wh_Xt)
=$8bab					en = *	; remember here
>8ba3	06					.byte CL	;wh_CodeLength
>8bab	46 4e 65 67 61 74 65		L1:	.text "FNegate"	;  name of word as a string, ending at wh_NameLastChar
>8bb2	a7					.byte (("FNegate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8bb3	20 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8bb5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8bb6	08					.byte NN	;wh_Flags	dictionary flags
=35634					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8bb7	86 14		stx $14		FNegate:	stx tmp1	; save data stack index
.8bb9	a6 4c		ldx $4c				ldx fp		; X= FP stack index
.8bbb	38		sec				sec		; mantissa = 0 - mantissa
.8bbc	a9 00		lda #$00			lda #0
.8bbe	f5 75		sbc $75,x			sbc FSMant3,x
.8bc0	95 75		sta $75,x			sta FSMant3,x
.8bc2	a9 00		lda #$00			lda #0
.8bc4	f5 6b		sbc $6b,x			sbc FSMant2,x
.8bc6	95 6b		sta $6b,x			sta FSMant2,x
.8bc8	a9 00		lda #$00			lda #0
.8bca	f5 61		sbc $61,x			sbc FSMant1,x
.8bcc	95 61		sta $61,x			sta FSMant1,x
.8bce	a9 00		lda #$00			lda #0
.8bd0	f5 57		sbc $57,x			sbc FSMant0,x
.8bd2	4c 5b 8b	jmp $8b5b			jmp FPlusFin3	; finish up, return
=30					CL	.var *-(WordListLink+wh_Xt)
=$8bd5					en = *	; remember here
>8bb5	1e					.byte CL	;wh_CodeLength
>8bd5	46 41 62 73			L1:	.text "FAbs"	;  name of word as a string, ending at wh_NameLastChar
>8bd9	64					.byte (("FAbs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8bda	32 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8bdc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8bdd	08					.byte NN	;wh_Flags	dictionary flags
=35673					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8bde	a4 4c		ldy $4c		FAbs:		ldy fp
.8be0	b9 57 00	lda $0057,y			lda FSMant0,y		; mantissa negative?
.8be3	30 d2		bmi $8bb7			bmi FNegate
.8be5	60		rts				rts
=8					CL	.var *-(WordListLink+wh_Xt)
=$8be6					en = *	; remember here
>8bdc	08					.byte CL	;wh_CodeLength
.8be6	4c 36 b5	jmp $b536	Throw_FPStack_4: jmp Throw_FPStack
.8be9	a4 4c		ldy $4c		FPos:		ldy fp			; load FP stack index
.8beb	c0 09		cpy #$09			cpy #FDim-1		; check FP stack for 2
.8bed	b0 f7		bcs $8be6			bcs Throw_FPStack_4
.8bef	b9 57 00	lda $0057,y			lda FSMant0+0,y		; calc result sign
.8bf2	59 58 00	eor $0058,y			eor FSMant0+1,y
.8bf5	08		php				php
.8bf6	b9 58 00	lda $0058,y			lda FSMant0+1,y		; if NOS negative
.8bf9	10 07		bpl $8c02			bpl +
.8bfb	e6 4c		inc $4c				inc fp			;   point at NOS
.8bfd	20 b7 8b	jsr $8bb7			jsr FNegate		;   negate NOS
.8c00	c6 4c		dec $4c				dec fp			;   restore fp
.8c02					+
.8c02	20 de 8b	jsr $8bde			jsr FAbs		; abs TOS
.8c05	86 14		stx $14				stx tmp1+0		; save data stack index
.8c07	a6 4c		ldx $4c				ldx fp			; load FP stack index
.8c09	28		plp				plp			; restore sign flag
.8c0a	60		rts				rts
>8c0b	46 2a				L1:	.text "F*"	;  name of word as a string, ending at wh_NameLastChar
>8c0d	42					.byte (("F*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8c0e	59 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8c10	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8c11	08					.byte NN	;wh_Flags	dictionary flags
=35725					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8c12					FStar:
.8c12	20 e9 8b	jsr $8be9			jsr FPos		; make r1 & r2 positive,
.8c15	08		php				php			;   save r3 sign
.8c16	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8c18	38		sec				sec
.8c19	75 4e		adc $4e,x			adc FSExp+1,x
.8c1b	95 4e		sta $4e,x			sta FSExp+1,x
.8c1d	50 12		bvc $8c31			bvc _49			; IfVs,
.8c1f	b0 06		bcs $8c27			bcs _zero		;   underflow?
.8c21	a6 14		ldx $14				ldx tmp1+0		;   restore data stack index
.8c23	28		plp				plp			; RDrop sign flag
.8c24	20 40 b5	jsr $b540			jsr Throw_FpOutOfRange
.8c27	e8		inx		_zero:		inx			; F2Drop
.8c28	e8		inx				inx
.8c29	86 4c		stx $4c				stx fp
.8c2b	28		plp				plp			; rdrop saved result sign
.8c2c	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c2e	4c bf 88	jmp $88bf			jmp F0			; return zero
.8c31					_49:
.8c31	a9 00		lda #$00			lda #0			; tmp32= 0
.8c33	85 16		sta $16				sta tmp2+0
.8c35	85 17		sta $17				sta tmp2+1
.8c37	85 18		sta $18				sta tmp3+0
.8c39	85 19		sta $19				sta tmp3+1
.8c3b	b5 76		lda $76,x			lda FSMant3+1,x
.8c3d	20 6c 8c	jsr $8c6c			jsr _Byte		; do bytes of r1 mantissa
.8c40	b5 6c		lda $6c,x			lda FSMant2+1,x
.8c42	20 6c 8c	jsr $8c6c			jsr _Byte
.8c45	b5 62		lda $62,x			lda FSMant1+1,x
.8c47	20 6c 8c	jsr $8c6c			jsr _Byte
.8c4a	b5 58		lda $58,x			lda FSMant0+1,x
.8c4c	20 6c 8c	jsr $8c6c			jsr _Byte
.8c4f	a5 16		lda $16				lda tmp2+0		; r1.mant= tmp32
.8c51	95 76		sta $76,x			sta FSMant3+1,x
.8c53	a5 17		lda $17				lda tmp2+1
.8c55	95 6c		sta $6c,x			sta FSMant2+1,x
.8c57	a5 18		lda $18				lda tmp3+0
.8c59	95 62		sta $62,x			sta FSMant1+1,x
.8c5b	a5 19		lda $19				lda tmp3+1
.8c5d	95 58		sta $58,x			sta FSMant0+1,x
.8c5f	e6 4c		inc $4c				inc fp			; FDrop
.8c61	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c63	28		plp				plp			; fix result sign
.8c64	10 03		bpl $8c69			bpl +
.8c66	4c b7 8b	jmp $8bb7			jmp FNegate
.8c69					+
.8c69	4c b5 8a	jmp $8ab5			jmp FNorm
.8c6c					_Byte:
.8c6c	49 ff		eor #$ff			eor #$ff
.8c6e	85 15		sta $15				sta tmp1+1
.8c70	a0 08		ldy #$08			ldy #8			; for each bit in byte
.8c72	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8c74	b0 18		bcs $8c8e			bcs _b3
.8c76	a5 16		lda $16				lda tmp2+0		;     tmp32 += r2
.8c78	75 75		adc $75,x			adc FSMant3+0,x
.8c7a	85 16		sta $16				sta tmp2+0
.8c7c	a5 17		lda $17				lda tmp2+1
.8c7e	75 6b		adc $6b,x			adc FSMant2+0,x
.8c80	85 17		sta $17				sta tmp2+1
.8c82	a5 18		lda $18				lda tmp3+0
.8c84	75 61		adc $61,x			adc FSMant1+0,x
.8c86	85 18		sta $18				sta tmp3+0
.8c88	a5 19		lda $19				lda tmp3+1
.8c8a	75 57		adc $57,x			adc FSMant0+0,x
.8c8c	85 19		sta $19				sta tmp3+1
.8c8e	46 19		lsr $19		_b3:		lsr tmp3+1		;   tmp32 >>= 1
.8c90	66 18		ror $18				ror tmp3+0
.8c92	66 17		ror $17				ror tmp2+1
.8c94	66 16		ror $16				ror tmp2+0
.8c96	88		dey				dey			;  next bit
.8c97	d0 d9		bne $8c72			bne _b1
.8c99	60		rts				rts
=136					CL	.var *-(WordListLink+wh_Xt)
=$8c9a					en = *	; remember here
>8c10	88					.byte CL	;wh_CodeLength
>8c9a	46 53 71 72			L1:	.text "FSqr"	;  name of word as a string, ending at wh_NameLastChar
>8c9e	44					.byte (("FSqr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8c9f	8d 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ca1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ca2	08					.byte NN	;wh_Flags	dictionary flags
=35870					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ca3	20 43 85	jsr $8543	FSqr:		jsr FDup
.8ca6	4c 12 8c	jmp $8c12			jmp FStar
=6					CL	.var *-(WordListLink+wh_Xt)
=$8ca9					en = *	; remember here
>8ca1	06					.byte CL	;wh_CodeLength
>8ca9	46 31 30 2a			L1:	.text "F10*"	;  name of word as a string, ending at wh_NameLastChar
>8cad	44					.byte (("F10*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8cae	1e 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8cb0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8cb1	08					.byte NN	;wh_Flags	dictionary flags
=35885					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8cb2	20 43 85	jsr $8543	F10Star:	jsr FDup
.8cb5	a4 4c		ldy $4c				ldy fp
.8cb7	b9 4d 00	lda $004d,y			lda FSExp+0,y
.8cba	18		clc				clc
.8cbb	69 01		adc #$01			adc #1
.8cbd	99 4d 00	sta $004d,y			sta FSExp+0,y
.8cc0	18		clc				clc
.8cc1	69 02		adc #$02			adc #2
.8cc3	99 4e 00	sta $004e,y			sta FSExp+1,y
.8cc6	4c 3e 8b	jmp $8b3e			jmp FPlus
=23					CL	.var *-(WordListLink+wh_Xt)
=$8cc9					en = *	; remember here
>8cb0	17					.byte CL	;wh_CodeLength
>8cc9	46 2f				L1:	.text "F/"	;  name of word as a string, ending at wh_NameLastChar
>8ccb	e2					.byte (("F/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8ccc	2d 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8cce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ccf	08					.byte NN	;wh_Flags	dictionary flags
=35915					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8cd0	20 e9 8b	jsr $8be9	FSlash:		jsr FPos		; make r1 & r2 positive
.8cd3	08		php				php			;   save result sign
.8cd4	b5 4e		lda $4e,x			lda FSExp+1,x		; calc exponent
.8cd6	18		clc				clc
.8cd7	69 01		adc #$01			adc #1
.8cd9	38		sec				sec
.8cda	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8cdc	95 4e		sta $4e,x			sta FSExp+1,x
.8cde	50 12		bvc $8cf2			bvc _49			;  IfVs
.8ce0	b0 06		bcs $8ce8			bcs _Zero		; underflow?
.8ce2	28		plp				plp			; drop saved result sign
.8ce3	a6 15		ldx $15				ldx tmp1+1		; restore data stack index
.8ce5	20 40 b5	jsr $b540			jsr Throw_FpOutOfRange	; overflow
.8ce8	e8		inx		_Zero:		inx			; F2Drop
.8ce9	e8		inx				inx
.8cea	86 4c		stx $4c				stx fp
.8cec	28		plp				plp			; drop saved result sign
.8ced	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8cef	4c bf 88	jmp $88bf			jmp F0			; return 0
.8cf2					_49:
.8cf2	b5 76		lda $76,x			lda FSMant3+1,x		; tmp32 = r1
.8cf4	85 16		sta $16				sta tmp2+0
.8cf6	b5 6c		lda $6c,x			lda FSMant2+1,x
.8cf8	85 17		sta $17				sta tmp2+1
.8cfa	b5 62		lda $62,x			lda FSMant1+1,x
.8cfc	85 18		sta $18				sta tmp3+0
.8cfe	b5 58		lda $58,x			lda FSMant0+1,x
.8d00	85 19		sta $19				sta tmp3+1
.8d02	20 2b 8d	jsr $8d2b			jsr _Byte
.8d05	95 58		sta $58,x			sta FSMant0+1,x
.8d07	20 2b 8d	jsr $8d2b			jsr _Byte
.8d0a	95 62		sta $62,x			sta FSMant1+1,x
.8d0c	20 2b 8d	jsr $8d2b			jsr _Byte
.8d0f	95 6c		sta $6c,x			sta FSMant2+1,x
.8d11	20 2b 8d	jsr $8d2b			jsr _Byte
.8d14	95 76		sta $76,x			sta FSMant3+1,x
.8d16	56 58		lsr $58,x			lsr FSMant0+1,x
.8d18	76 62		ror $62,x			ror FSMant1+1,x
.8d1a	76 6c		ror $6c,x			ror FSMant2+1,x
.8d1c	76 76		ror $76,x			ror FSMant3+1,x
.8d1e	e6 4c		inc $4c				inc fp			; FDrop
.8d20	a6 14		ldx $14				ldx tmp1+0		; restore X
.8d22	28		plp				plp			; fix sign
.8d23	10 03		bpl $8d28			bpl +
.8d25	20 b7 8b	jsr $8bb7			jsr FNegate
.8d28	4c b5 8a	jmp $8ab5	+		jmp FNorm
.8d2b					_Byte:
.8d2b	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d2d					_1:
.8d2d	a5 19		lda $19				lda tmp3+1		;   if r1>=r2
.8d2f	d5 57		cmp $57,x			cmp FSMant0+0,x
.8d31	d0 10		bne $8d43			bne _4
.8d33	a5 18		lda $18				lda tmp3+0
.8d35	d5 61		cmp $61,x			cmp FSMant1+0,x
.8d37	d0 0a		bne $8d43			bne _4
.8d39	a5 17		lda $17				lda tmp2+1
.8d3b	d5 6b		cmp $6b,x			cmp FSMant2+0,x
.8d3d	d0 04		bne $8d43			bne _4
.8d3f	a5 16		lda $16				lda tmp2+0
.8d41	d5 75		cmp $75,x			cmp FSMant3+0,x
.8d43	90 18		bcc $8d5d	_4:		bcc _2
.8d45	a5 16		lda $16				lda tmp2+0		;     tmp32 -= r2
.8d47	f5 75		sbc $75,x			sbc FSMant3+0,x
.8d49	85 16		sta $16				sta tmp2+0
.8d4b	a5 17		lda $17				lda tmp2+1
.8d4d	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8d4f	85 17		sta $17				sta tmp2+1
.8d51	a5 18		lda $18				lda tmp3+0
.8d53	f5 61		sbc $61,x			sbc FSMant1+0,x
.8d55	85 18		sta $18				sta tmp3+0
.8d57	a5 19		lda $19				lda tmp3+1
.8d59	f5 57		sbc $57,x			sbc FSMant0+0,x
.8d5b	85 19		sta $19				sta tmp3+1
.8d5d	26 15		rol $15		_2:		rol tmp1+1		;   accum quotient bits
.8d5f	06 16		asl $16				asl tmp2+0
.8d61	26 17		rol $17				rol tmp2+1
.8d63	26 18		rol $18				rol tmp3+0
.8d65	26 19		rol $19				rol tmp3+1		;   tmp32<<=1
.8d67	88		dey				dey			;  next
.8d68	d0 c3		bne $8d2d			bne _1
.8d6a	a5 15		lda $15				lda tmp1+1		; return bits
.8d6c	60		rts				rts
=157					CL	.var *-(WordListLink+wh_Xt)
=$8d6d					en = *	; remember here
>8cce	9d					.byte CL	;wh_CodeLength
>8d6d	46 31 2f			L1:	.text "F1/"	;  name of word as a string, ending at wh_NameLastChar
>8d70	e3					.byte (("F1/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8d71	4b 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8d73	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8d74	08					.byte NN	;wh_Flags	dictionary flags
=36080					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8d75	20 fb 88	jsr $88fb	F1Slash:	jsr F1
.8d78	20 cb 85	jsr $85cb			jsr FSwap
.8d7b	4c d0 8c	jmp $8cd0			jmp FSlash
=9					CL	.var *-(WordListLink+wh_Xt)
=$8d7e					en = *	; remember here
>8d73	09					.byte CL	;wh_CodeLength
>8d7e	45 2a				L1:	.text "E*"	;  name of word as a string, ending at wh_NameLastChar
>8d80	42					.byte (("E*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8d81	f0 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8d83	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8d84	08					.byte NN	;wh_Flags	dictionary flags
=36096					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8d85					EStar:
.8d85	20 e9 8b	jsr $8be9			jsr FPos		; make r1 & r2 positive
.8d88	08		php				php			;   remember result sign
.8d89	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8d8b	38		sec				sec
.8d8c	75 4e		adc $4e,x			adc FSExp+1,x
.8d8e	95 4e		sta $4e,x			sta FSExp+1,x
.8d90	70 15		bvs $8da7			bvs _ExpOvfl
.8d92	b5 58		lda $58,x			lda FSMant0+1,x		; save e1
.8d94	48		pha				pha
.8d95	b5 62		lda $62,x			lda FSMant1+1,x
.8d97	a0 00		ldy #$00			ldy #0
.8d99	94 58		sty $58,x			sty FSMant0+1,x
.8d9b	94 62		sty $62,x			sty FSMant1+1,x		; zero result
.8d9d	20 b6 8d	jsr $8db6			jsr _Byte		; do FSMant1+1 byte
.8da0	68		pla				pla
.8da1	20 b6 8d	jsr $8db6			jsr _Byte		; do FSMant0+1 byte
.8da4	4c d3 8d	jmp $8dd3			jmp EFix3		; finish
.8da7					_ExpOvfl:
.8da7	b0 05		bcs $8dae			bcs _Zero		;underflow?
.8da9	a6 14		ldx $14				ldx tmp1+0		; restore X
.8dab	20 40 b5	jsr $b540			jsr Throw_FpOutOfRange	;overflow
.8dae	a9 00		lda #$00	_Zero:		lda #0
.8db0	95 62		sta $62,x			sta FSMant1+1,x
.8db2	95 58		sta $58,x			sta FSMant0+1,x
.8db4	f0 1d		beq $8dd3			beq EFix3
.8db6					_Byte:
.8db6	85 15		sta $15				sta tmp1+1
.8db8	a0 08		ldy #$08			ldy #8			; for 8 bits
.8dba	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8dbc	90 0d		bcc $8dcb			bcc _b5
.8dbe	18		clc				clc			;     r3 += r2
.8dbf	b5 61		lda $61,x			lda FSMant1+0,x
.8dc1	75 62		adc $62,x			adc FSMant1+1,x
.8dc3	95 62		sta $62,x			sta FSMant1+1,x
.8dc5	b5 57		lda $57,x			lda FSMant0+0,x
.8dc7	75 58		adc $58,x			adc FSMant0+1,x
.8dc9	95 58		sta $58,x			sta FSMant0+1,x
.8dcb					_b5:
.8dcb	76 58		ror $58,x			ror FSMant0+1,x		;   r3 <<= 1
.8dcd	76 62		ror $62,x			ror FSMant1+1,x
.8dcf	88		dey				dey			;  next bit
.8dd0	d0 e8		bne $8dba			bne _b1
.8dd2	60		rts				rts
=78					CL	.var *-(WordListLink+wh_Xt)
=$8dd3					en = *	; remember here
>8d83	4e					.byte CL	;wh_CodeLength
.8dd3					EFix3:
.8dd3	a9 00		lda #$00			lda #0			; zero unused mantissa
.8dd5	95 6c		sta $6c,x			sta FSMant2+1,x
.8dd7	95 76		sta $76,x			sta FSMant3+1,x
.8dd9	e6 4c		inc $4c				inc fp			; FDrop
.8ddb	a6 14		ldx $14				ldx tmp1+0		; restore X
.8ddd	28		plp				plp			;fix result sign
.8dde	10 03		bpl $8de3			bpl +
.8de0	4c b7 8b	jmp $8bb7			jmp FNegate
.8de3	4c b5 8a	jmp $8ab5	+		jmp FNorm
>8de6	45 53 71 72			L1:	.text "ESqr"	;  name of word as a string, ending at wh_NameLastChar
>8dea	44					.byte (("ESqr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8deb	00 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ded	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8dee	08					.byte NN	;wh_Flags	dictionary flags
=36202					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8def	20 43 85	jsr $8543	ESqr:		jsr FDup
.8df2	4c 85 8d	jmp $8d85			jmp EStar
=6					CL	.var *-(WordListLink+wh_Xt)
=$8df5					en = *	; remember here
>8ded	06					.byte CL	;wh_CodeLength
>8df5	45 2f				L1:	.text "E/"	;  name of word as a string, ending at wh_NameLastChar
>8df7	e2					.byte (("E/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8df8	6a 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8dfa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8dfb	08					.byte NN	;wh_Flags	dictionary flags
=36215					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8dfc	20 e9 8b	jsr $8be9	ESlash:		jsr FPos	; make r1 & r2 positive
.8dff	08		php				php		; remember result sign
.8e00	b5 4e		lda $4e,x			lda FSExp+1,x		; calc r3 exponent
.8e02	38		sec				sec
.8e03	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8e05	70 17		bvs $8e1e			bvs _ExpOvfl
.8e07	18		clc				clc
.8e08	69 01		adc #$01			adc #1
.8e0a	95 4e		sta $4e,x			sta FSExp+1,x
.8e0c	20 24 8e	jsr $8e24			jsr _Byte		; gen quotient hi byte
.8e0f	48		pha				pha
.8e10	20 24 8e	jsr $8e24			jsr _Byte		; gen quotient lo byte
.8e13	95 62		sta $62,x			sta FSMant1+1,x
.8e15	68		pla				pla
.8e16	4a		lsr a				lsr a
.8e17	95 58		sta $58,x			sta FSMant0+1,x
.8e19	76 62		ror $62,x			ror FSMant1+1,x
.8e1b	4c d3 8d	jmp $8dd3			jmp EFix3
.8e1e					_ExpOvfl:
.8e1e	28		plp				plp			; rdrop saved result sign
.8e1f	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e21	20 40 b5	jsr $b540			jsr Throw_FpOutOfRange	; overflow
.8e24					_Byte:
.8e24	a0 08		ldy #$08			ldy #8			; for 8 bits
.8e26	b5 62		lda $62,x	_b1:		lda FSMant1+1,x		;   if r1 >= r2
.8e28	d5 61		cmp $61,x			cmp FSMant1+0,x
.8e2a	b5 58		lda $58,x			lda FSMant0+1,x
.8e2c	f5 57		sbc $57,x			sbc FSMant0+0,x
.8e2e	90 09		bcc $8e39			bcc _b5
.8e30	95 58		sta $58,x			sta FSMant0+1,x
.8e32	b5 62		lda $62,x			lda FSMant1+1,x		;     r1 -= r2
.8e34	f5 61		sbc $61,x			sbc FSMant1+0,x
.8e36	95 62		sta $62,x			sta FSMant1+1,x
.8e38	38		sec				sec
.8e39					_b5:
.8e39	26 15		rol $15				rol tmp1+1		;   save quotient bit
.8e3b	16 62		asl $62,x			asl FSMant1+1,x		;   r1 *= 2
.8e3d	36 58		rol $58,x			rol FSMant0+1,x
.8e3f	88		dey				dey			;  next bit
.8e40	d0 e4		bne $8e26			bne _b1
.8e42	a5 15		lda $15				lda tmp1+1		; return bits
.8e44	60		rts				rts
=73					CL	.var *-(WordListLink+wh_Xt)
=$8e45					en = *	; remember here
>8dfa	49					.byte CL	;wh_CodeLength
>8e45	45 31 2f			L1:	.text "E1/"	;  name of word as a string, ending at wh_NameLastChar
>8e48	e3					.byte (("E1/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e49	77 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e4b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e4c	08					.byte NN	;wh_Flags	dictionary flags
=36296					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e4d	20 fb 88	jsr $88fb	E1Slash:	jsr F1
.8e50	20 cb 85	jsr $85cb			jsr FSwap
.8e53	4c fc 8d	jmp $8dfc			jmp ESlash
=9					CL	.var *-(WordListLink+wh_Xt)
=$8e56					en = *	; remember here
>8e4b	09					.byte CL	;wh_CodeLength
>8e56	53 3e 46			L1:	.text "S>F"	;  name of word as a string, ending at wh_NameLastChar
>8e59	c3					.byte (("S>F"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e5a	c8 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e5c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e5d	08					.byte NN	;wh_Flags	dictionary flags
=36313					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e5e	20 de b4	jsr $b4de	SToF:		jsr PopYA		; pop n
.8e61	20 b1 84	jsr $84b1	SToFYA:		jsr FAllocX		; alloc FP stack entry
.8e64	94 57		sty $57,x			sty FSMant0,x		; copy n to mantissa
.8e66	95 61		sta $61,x			sta FSMant1,x
.8e68	a9 00		lda #$00			lda #0			; pad mantissa
.8e6a	95 6b		sta $6b,x			sta FSMant2,x
.8e6c	95 75		sta $75,x			sta FSMant3,x
.8e6e	a9 0f		lda #$0f			lda #15			; set exponent
.8e70	95 4d		sta $4d,x			sta FSExp,x
.8e72	4c b7 8a	jmp $8ab7			jmp FNormX		; normalize, return
=23					CL	.var *-(WordListLink+wh_Xt)
=$8e75					en = *	; remember here
>8e5c	17					.byte CL	;wh_CodeLength
>8e75	44 3e 46			L1:	.text "D>F"	;  name of word as a string, ending at wh_NameLastChar
>8e78	c3					.byte (("D>F"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e79	d9 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e7b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e7c	08					.byte NN	;wh_Flags	dictionary flags
=36344					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e7d	20 b1 84	jsr $84b1	FDToF:		jsr FAllocX		; alloc FP stack entry
.8e80	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e82	a4 4c		ldy $4c				ldy fp			; Y= fp stack index
.8e84	b5 26		lda $26,x			lda DStack+2,x		; mantissa= d
.8e86	99 75 00	sta $0075,y			sta FSMant3,y
.8e89	b5 27		lda $27,x			lda DStack+3,x
.8e8b	99 6b 00	sta $006b,y			sta FSMant2,y
.8e8e	b5 24		lda $24,x			lda DStack+0,x
.8e90	99 61 00	sta $0061,y			sta FSMant1,y
.8e93	b5 25		lda $25,x			lda DStack+1,x
.8e95	99 57 00	sta $0057,y			sta FSMant0,y
.8e98	a9 1f		lda #$1f			lda #31			; set exponent
.8e9a	99 4d 00	sta $004d,y			sta FSExp,y
.8e9d	20 05 c6	jsr $c605			jsr Two_Drop
.8ea0	4c b5 8a	jmp $8ab5			jmp FNorm		; normalize, return
=38					CL	.var *-(WordListLink+wh_Xt)
=$8ea3					en = *	; remember here
>8e7b	26					.byte CL	;wh_CodeLength
>8ea3	46 3e 53			L1:	.text "F>S"	;  name of word as a string, ending at wh_NameLastChar
>8ea6	63					.byte (("F>S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8ea7	f8 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ea9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8eaa	08					.byte NN	;wh_Flags	dictionary flags
=36390					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8eab	a4 4c		ldy $4c		FToS:		ldy fp
.8ead	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8eb0	08		php				php
.8eb1	10 03		bpl $8eb6			bpl +
.8eb3	20 b7 8b	jsr $8bb7			jsr FNegate
.8eb6					+
.8eb6	a9 0f		lda #$0f			lda #15
.8eb8	20 ef 89	jsr $89ef			jsr FShiftA
.8ebb	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8ebd	c0 10		cpy #$10			cpy #15+1		; always positive, so unsigned compare works
.8ebf	b0 17		bcs $8ed8			bcs _overflow
.8ec1	a4 4c		ldy $4c				ldy fp
.8ec3	ca		dex				dex
.8ec4	ca		dex				dex
.8ec5	b9 57 00	lda $0057,y			lda FSMant0,y
.8ec8	95 25		sta $25,x			sta DStack+1,x
.8eca	b9 61 00	lda $0061,y			lda FSMant1,y
.8ecd	95 24		sta $24,x			sta DStack+0,x
.8ecf	e6 4c		inc $4c				inc fp			; FDrop
.8ed1	28		plp				plp			; apply saved sign
.8ed2	30 01		bmi $8ed5			bmi +
.8ed4	60		rts				rts
.8ed5	4c 84 c7	jmp $c784	+		jmp Negate
.8ed8	28		plp		_overflow:	plp			; RDrop saved sign
.8ed9	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8edb	20 67 b5	jsr $b567			jsr ThrowA
=51					CL	.var *-(WordListLink+wh_Xt)
=$8ede					en = *	; remember here
>8ea9	33					.byte CL	;wh_CodeLength
>8ede	46 3e 44			L1:	.text "F>D"	;  name of word as a string, ending at wh_NameLastChar
>8ee1	83					.byte (("F>D"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8ee2	26 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ee4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ee5	08					.byte NN	;wh_Flags	dictionary flags
=36449					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ee6	a4 4c		ldy $4c		FToD:		ldy fp
.8ee8	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8eeb	08		php				php
.8eec	10 03		bpl $8ef1			bpl +
.8eee	20 b7 8b	jsr $8bb7			jsr FNegate
.8ef1					+
.8ef1	a9 1f		lda #$1f			lda #31
.8ef3	20 ef 89	jsr $89ef			jsr FShiftA
.8ef6	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8ef8	c0 20		cpy #$20			cpy #31+1		; always positive, so unsigned compare works
.8efa	b0 23		bcs $8f1f			bcs _overflow
.8efc	a4 4c		ldy $4c				ldy fp
.8efe	ca		dex				dex			; d= mantissa
.8eff	ca		dex				dex
.8f00	ca		dex				dex
.8f01	ca		dex				dex
.8f02	b9 57 00	lda $0057,y			lda FSMant0,y
.8f05	95 25		sta $25,x			sta DStack+1,x
.8f07	b9 61 00	lda $0061,y			lda FSMant1,y
.8f0a	95 24		sta $24,x			sta DStack+0,x
.8f0c	b9 6b 00	lda $006b,y			lda FSMant2,y
.8f0f	95 27		sta $27,x			sta DStack+3,x
.8f11	b9 75 00	lda $0075,y			lda FSMant3,y
.8f14	95 26		sta $26,x			sta DStack+2,x
.8f16	e6 4c		inc $4c				inc fp			; FDrop
.8f18	28		plp				plp			; apply saved sign
.8f19	30 01		bmi $8f1c			bmi +
.8f1b	60		rts				rts
.8f1c	4c b5 c7	jmp $c7b5	+		jmp DNegate
.8f1f	28		plp		_overflow:	plp			; RDrop sign
.8f20	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8f22	20 67 b5	jsr $b567			jsr ThrowA
=63					CL	.var *-(WordListLink+wh_Xt)
=$8f25					en = *	; remember here
>8ee4	3f					.byte CL	;wh_CodeLength
>8f25	46 52 6e 64			L1:	.text "FRnd"	;  name of word as a string, ending at wh_NameLastChar
>8f29	84					.byte (("FRnd"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f2a	61 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f2c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f2d	08					.byte NN	;wh_Flags	dictionary flags
=36521					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f2e	20 df 82	jsr $82df	FRnd:		jsr Rand		; generate next RndState
.8f31	20 b1 84	jsr $84b1			jsr FAllocX		; alloc FP stack entry
.8f34	4a		lsr a				lsr a			;   make positive
.8f35	95 57		sta $57,x			sta FSMant0,x
.8f37	94 61		sty $61,x			sty FSMant1,x
.8f39	ad 35 03	lda $0335			lda RndState+0
.8f3c	95 6b		sta $6b,x			sta FSMant2,x
.8f3e	ad 36 03	lda $0336			lda RndState+1
.8f41	95 75		sta $75,x			sta FSMant3,x
.8f43	a9 00		lda #$00			lda #0			; exponent=0
.8f45	95 4d		sta $4d,x			sta FSExp,x
.8f47	4c b7 8a	jmp $8ab7			jmp FNormX		; normalize, return
=28					CL	.var *-(WordListLink+wh_Xt)
=$8f4a					en = *	; remember here
>8f2c	1c					.byte CL	;wh_CodeLength
>8f4a	46 53 71 72 74			L1:	.text "FSqrt"	;  name of word as a string, ending at wh_NameLastChar
>8f4f	85					.byte (("FSqrt"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f50	a9 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f52	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f53	08					.byte NN	;wh_Flags	dictionary flags
=36559					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f54	a4 4c		ldy $4c		FSqrt:		ldy fp
.8f56	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.8f59	d0 01		bne $8f5c			bne +
.8f5b	60		rts				rts			;   just return the zero
.8f5c					+
.8f5c	20 43 85	jsr $8543			jsr FDup		; get trial value
.8f5f	a4 4c		ldy $4c				ldy fp
.8f61	b9 4d 00	lda $004d,y			lda FSExp,y		; halve the exponent of trial value
.8f64	c9 80		cmp #$80			cmp #$80
.8f66	6a		ror a				ror a
.8f67	99 4d 00	sta $004d,y			sta FSExp,y
.8f6a	a9 09		lda #$09			lda #9			; for 9 iterations
.8f6c	48		pha		_3:		pha
.8f6d	20 bb 85	jsr $85bb			jsr F2Dup		;   calc new trial value
.8f70	20 d0 8c	jsr $8cd0			jsr FSlash
.8f73	20 3e 8b	jsr $8b3e			jsr FPlus
.8f76	20 b9 89	jsr $89b9			jsr F2Slash
.8f79	68		pla				pla			;  next
.8f7a	38		sec				sec
.8f7b	e9 01		sbc #$01			sbc #1
.8f7d	d0 ed		bne $8f6c			bne _3
.8f7f	4c 1d 85	jmp $851d			jmp FNip		; return trial value
=46					CL	.var *-(WordListLink+wh_Xt)
=$8f82					en = *	; remember here
>8f52	2e					.byte CL	;wh_CodeLength
>8f82	50 72 65 63 69 73 69 6f		L1:	.text "Precision"	;  name of word as a string, ending at wh_NameLastChar
>8f8a	6e
>8f8b	c9					.byte (("Precision"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f8c	cf 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f8e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f8f	08					.byte NN	;wh_Flags	dictionary flags
=36619					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f90	ad ff 02	lda $02ff	Precision:	lda PrecisionV
.8f93	4c eb b8	jmp $b8eb			jmp PushZA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8f96					en = *	; remember here
>8f8e	06					.byte CL	;wh_CodeLength
.8f96	60		rts				rts
>8f97	53 65 74 2d 50 72 65 63		L1:	.text "Set-Precision"	;  name of word as a string, ending at wh_NameLastChar
>8f9f	69 73 69 6f 6e
>8fa4	cd					.byte (("Set-Precision"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8fa5	0b 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8fa7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8fa8	08					.byte NN	;wh_Flags	dictionary flags
=36644					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8fa9	20 c2 b4	jsr $b4c2			jsr PopA
.8fac	8d ff 02	sta $02ff			sta PrecisionV
=6					CL	.var *-(WordListLink+wh_Xt)
=$8faf					en = *	; remember here
>8fa7	06					.byte CL	;wh_CodeLength
.8faf	60		rts				rts
>8fb0	28 46 2e 29			L1:	.text "(F.)"	;  name of word as a string, ending at wh_NameLastChar
>8fb4	24					.byte (("(F.)"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8fb5	24 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8fb7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8fb8	08					.byte NN	;wh_Flags	dictionary flags
=36660					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8fb9	20 36 90	jsr $9036	PFDot:		jsr pfcst		;start collecting chars, make r positive
.8fbc	20 c2 8f	jsr $8fc2			jsr PFDotSub
.8fbf	4c 54 90	jmp $9054			jmp pfcen
.8fc2					PFDotSub:
.8fc2	20 90 8f	jsr $8f90			jsr Precision	;alloc & init work area
.8fc5	20 04 b9	jsr $b904			jsr One
=$27					_mantNzFound  = DStack+3	; nonzero mantissa digit processed
=$26					_NumSigDigits = DStack+2	; # of significant digits
=$24					_decimalPos   = DStack+0	; decimal point position
.8fc8	20 16 90	jsr $9016			jsr FLt10		; scale down to <10, counting exponent
.8fcb					_c:
.8fcb	b5 24		lda $24,x			lda _decimalPos,x	;  insert decimal point here?
.8fcd	d0 05		bne $8fd4			bne _c2
.8fcf	a9 2e		lda #$2e			lda #'.'
.8fd1	20 4b 90	jsr $904b			jsr pfch
.8fd4	d6 24		dec $24,x	_c2:		dec _decimalPos,x
.8fd6	20 43 85	jsr $8543			jsr FDup		;  do a digit
.8fd9	20 ab 8e	jsr $8eab			jsr FToS		; ( work n )
.8fdc	b5 24		lda $24,x			lda DStack+0,x
.8fde	15 29		ora $29,x			ora _mantNzFound+2,x	;  doing significant digits?
.8fe0	95 29		sta $29,x			sta _mantNzFound+2,x
.8fe2	f0 08		beq $8fec			beq _c7
.8fe4	d6 28		dec $28,x			dec _NumSigDigits+2,x
.8fe6	10 04		bpl $8fec			bpl +
.8fe8	e8		inx				inx			;    drop integer
.8fe9	e8		inx				inx
.8fea	d0 17		bne $9003			bne _d
.8fec					+
.8fec	b5 24		lda $24,x	_c7:		lda DStack+0,x		;  store the char
.8fee	09 30		ora #$30			ora #'0'
.8ff0	20 4b 90	jsr $904b			jsr pfch
.8ff3	20 5e 8e	jsr $8e5e			jsr SToF		; ( work )
.8ff6	20 80 8b	jsr $8b80			jsr FMinus
.8ff9	20 b2 8c	jsr $8cb2			jsr F10Star
.8ffc	a4 4c		ldy $4c				ldy fp			;  until mantissa==0
.8ffe	b9 57 00	lda $0057,y			lda FSMant0,y
.9001	d0 c8		bne $8fcb			bne _c
.9003	d6 24		dec $24,x	_d:		dec _decimalPos,x	;do trailing zeros
.9005	30 08		bmi $900f			bmi _d9
.9007	a9 30		lda #$30			lda #'0'
.9009	20 4b 90	jsr $904b			jsr pfch
.900c	4c 03 90	jmp $9003			jmp _d
.900f					_d9:
.900f	e8		inx				inx			; drop work area
.9010	e8		inx				inx
.9011	e8		inx				inx
.9012	e8		inx				inx
.9013	e6 4c		inc $4c				inc fp			; FDrop
.9015	60		rts				rts
=93					CL	.var *-(WordListLink+wh_Xt)
=$9016					en = *	; remember here
>8fb7	5d					.byte CL	;wh_CodeLength
.9016					FLt10:
.9016	a4 4c		ldy $4c		_1:		ldy fp			; while r >= 10
.9018	b9 4d 00	lda $004d,y			lda FSExp,y
.901b	30 18		bmi $9035			bmi _9			;   exponent negative?
.901d	c9 04		cmp #$04			cmp #4
.901f	90 14		bcc $9035			bcc _9			;   < 4 ?
.9021	d0 07		bne $902a			bne _2			;   > 4 ?
.9023	b9 57 00	lda $0057,y			lda FSMant0,y
.9026	c9 50		cmp #$50			cmp #$50
.9028	90 0b		bcc $9035			bcc _9
.902a	f6 24		inc $24,x	_2:		inc DStack+0,x		;   exp ++
.902c	20 df 88	jsr $88df			jsr F10			;   r /= 10
.902f	20 d0 8c	jsr $8cd0			jsr FSlash
.9032	4c 16 90	jmp $9016			jmp _1
.9035	60		rts		_9:		rts
.9036					pfcst:
.9036	a9 01		lda #$01			lda #1
.9038	8d 34 03	sta $0334			sta ToHold
.903b	a4 4c		ldy $4c				ldy fp			; if r1 negative
.903d	b9 57 00	lda $0057,y			lda FSMant0,y
.9040	10 08		bpl $904a			bpl _19
.9042	a9 2d		lda #$2d			lda #'-'		;   append sign
.9044	20 4b 90	jsr $904b			jsr pfch
.9047	4c b7 8b	jmp $8bb7			jmp FNegate		;   make positive, return
.904a	60		rts		_19:		rts
.904b					pfch:
.904b	ac 34 03	ldy $0334			ldy ToHold
.904e	91 00		sta ($00),y			sta (cp),y
.9050	ee 34 03	inc $0334			inc ToHold
.9053	60		rts				rts
.9054					pfcen:
.9054	ad 34 03	lda $0334			lda ToHold
.9057	38		sec				sec
.9058	e9 01		sbc #$01			sbc #1
.905a	a0 00		ldy #$00			ldy #0
.905c	91 00		sta ($00),y			sta (cp),y		; fill in length
.905e	4c 2c cb	jmp $cb2c			jmp Here		; push start addr
.9061					pfciA:
.9061	a8		tay				tay
.9062	10 0a		bpl $906e			bpl _15			; IfMi,
.9064	49 ff		eor #$ff			eor #$ff
.9066	18		clc				clc
.9067	69 01		adc #$01			adc #1
.9069	48		pha				pha
.906a	a9 2d		lda #$2d			lda #'-'
.906c	d0 03		bne $9071			bne _19
.906e	48		pha		_15:		pha
.906f	a9 2b		lda #$2b			lda #'+'
.9071					_19:
.9071	20 4b 90	jsr $904b			jsr pfch
.9074	68		pla				pla
.9075	a0 2f		ldy #$2f			ldy #'0'-1
.9077	c8		iny		_20:		iny
.9078	38		sec				sec
.9079	e9 0a		sbc #$0a			sbc #10
.907b	b0 fa		bcs $9077			bcs _20
.907d	69 0a		adc #$0a			adc #10
.907f	48		pha				pha
.9080	98		tya				tya
.9081	20 4b 90	jsr $904b			jsr pfch
.9084	68		pla				pla
.9085	09 30		ora #$30			ora #'0'
.9087	d0 c2		bne $904b			bne pfch
>9089	46 2e				L1:	.text "F."	;  name of word as a string, ending at wh_NameLastChar
>908b	c2					.byte (("F."[-1]&7)<<5)+(*-L1)	;wh_HNL
>908c	34 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>908e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>908f	08					.byte NN	;wh_Flags	dictionary flags
=36875					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9090	20 b9 8f	jsr $8fb9	FDot:		jsr PFDot
.9093	20 c9 b2	jsr $b2c9	FDot2:		jsr Count
.9096	20 08 cf	jsr $cf08			jsr Type
.9099	4c fb ce	jmp $cefb			jmp Space
=12					CL	.var *-(WordListLink+wh_Xt)
=$909c					en = *	; remember here
>908e	0c					.byte CL	;wh_CodeLength
>909c	46 2e 53			L1:	.text "F.S"	;  name of word as a string, ending at wh_NameLastChar
>909f	63					.byte (("F.S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>90a0	0b 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90a3	08					.byte NN	;wh_Flags	dictionary flags
=36895					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90a4	a9 09		lda #$09	FDotS:		lda #FDim-1	; for each FP stack entry
.90a6	d0 0b		bne $90b3			bne _8
.90a8	48		pha		_2:		pha
.90a9	20 91 85	jsr $8591			jsr FPick3	;   print it
.90ac	20 90 90	jsr $9090			jsr FDot
.90af	68		pla				pla		;  next
.90b0	38		sec				sec
.90b1	e9 01		sbc #$01			sbc #1
.90b3	c5 4c		cmp $4c		_8:		cmp fp
.90b5	b0 f1		bcs $90a8			bcs _2
=19					CL	.var *-(WordListLink+wh_Xt)
=$90b7					en = *	; remember here
>90a2	13					.byte CL	;wh_CodeLength
.90b7	60		rts				rts
>90b8	28 46 53 2e 29			L1:	.text "(FS.)"	;  name of word as a string, ending at wh_NameLastChar
>90bd	25					.byte (("(FS.)"[-1]&7)<<5)+(*-L1)	;wh_HNL
>90be	1f 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90c0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90c1	08					.byte NN	;wh_Flags	dictionary flags
=36925					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90c2	20 fa b8	jsr $b8fa	PFSDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.90c5	20 36 90	jsr $9036			jsr pfcst		; start collecting chars, make r positive
.90c8	20 16 90	jsr $9016			jsr FLt10		; scale down to <10
.90cb	a4 4c		ldy $4c		_c1:		ldy fp			; while r < 1
.90cd	b9 57 00	lda $0057,y			lda FSMant0,y		;   mantissa == 0 ?
.90d0	f0 0f		beq $90e1			beq _c9
.90d2	b9 4d 00	lda $004d,y			lda FSExp,y		;   exp < 1 ?
.90d5	f0 02		beq $90d9			beq _c2
.90d7	10 08		bpl $90e1			bpl _c9
.90d9	d6 24		dec $24,x	_c2:		dec DStack+0,x		;  exp -= 1
.90db	20 b2 8c	jsr $8cb2			jsr F10Star		;  r *= 10
.90de	4c cb 90	jmp $90cb			jmp _c1
.90e1					_c9:
.90e1	20 c2 8f	jsr $8fc2	PFSDotM:	jsr PFDotSub		; do mantissa
.90e4	a9 45		lda #$45			lda #'E'
.90e6	20 4b 90	jsr $904b			jsr pfch		; do exponent
.90e9	b5 24		lda $24,x			lda DStack+0,x		;   _exp
.90eb	20 61 90	jsr $9061			jsr pfciA
.90ee	e8		inx				inx			; Drop work area
.90ef	e8		inx				inx
.90f0	4c 54 90	jmp $9054			jmp pfcen		; finish string
=49					CL	.var *-(WordListLink+wh_Xt)
=$90f3					en = *	; remember here
>90c0	31					.byte CL	;wh_CodeLength
>90f3	46 53 2e			L1:	.text "FS."	;  name of word as a string, ending at wh_NameLastChar
>90f6	c3					.byte (("FS."[-1]&7)<<5)+(*-L1)	;wh_HNL
>90f7	3d 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90f9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90fa	08					.byte NN	;wh_Flags	dictionary flags
=36982					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90fb	20 c2 90	jsr $90c2	FSDot:		jsr PFSDot
.90fe	4c 93 90	jmp $9093			jmp FDot2
=6					CL	.var *-(WordListLink+wh_Xt)
=$9101					en = *	; remember here
>90f9	06					.byte CL	;wh_CodeLength
>9101	28 46 45 2e 29			L1:	.text "(FE.)"	;  name of word as a string, ending at wh_NameLastChar
>9106	25					.byte (("(FE.)"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9107	76 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9109	03					.byte 3		;wh_CodeLength  (with placeholder value)
>910a	08					.byte NN	;wh_Flags	dictionary flags
=36998					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.910b	20 fa b8	jsr $b8fa	PFEDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.910e	20 36 90	jsr $9036			jsr pfcst		; start collecting chars, make r positive
.9111	a4 4c		ldy $4c		_30:		ldy fp			; while r < 1
.9113	b9 57 00	lda $0057,y			lda FSMant0,y
.9116	f0 16		beq $912e			beq _39
.9118	b9 4d 00	lda $004d,y			lda FSExp,y
.911b	f0 02		beq $911f			beq _31
.911d	10 0f		bpl $912e			bpl _39
.911f	d6 24		dec $24,x	_31:		dec _exp,x		;  exp -= 3
.9121	d6 24		dec $24,x			dec _exp,x
.9123	d6 24		dec $24,x			dec _exp,x
.9125	20 d0 88	jsr $88d0			jsr F1000		;  r *= 1000
.9128	20 12 8c	jsr $8c12			jsr FStar
.912b	4c 11 91	jmp $9111			jmp _30
.912e					_39:
.912e	a4 4c		ldy $4c		_a:		ldy fp			; while r >= 1000
.9130	b9 4d 00	lda $004d,y			lda FSExp,y
.9133	30 1c		bmi $9151			bmi _a9			; exponent negative?
.9135	c9 0a		cmp #$0a			cmp #10
.9137	90 18		bcc $9151			bcc _a9			;   < 10 ?
.9139	d0 07		bne $9142			bne _a2			;   > 10 ?
.913b	b9 57 00	lda $0057,y			lda FSMant0,y
.913e	c9 7d		cmp #$7d			cmp #$7d
.9140	90 0f		bcc $9151			bcc _a9
.9142	f6 24		inc $24,x	_a2:		inc _exp,x		;   exp += 3
.9144	f6 24		inc $24,x			inc _exp,x
.9146	f6 24		inc $24,x			inc _exp,x
.9148	20 d0 88	jsr $88d0			jsr F1000		;   r /= 1000
.914b	20 d0 8c	jsr $8cd0			jsr FSlash
.914e	4c 2e 91	jmp $912e			jmp _a
.9151					_a9:
.9151	4c e1 90	jmp $90e1			jmp PFSDotM
=73					CL	.var *-(WordListLink+wh_Xt)
=$9154					en = *	; remember here
>9109	49					.byte CL	;wh_CodeLength
>9154	46 45 2e			L1:	.text "FE."	;  name of word as a string, ending at wh_NameLastChar
>9157	c3					.byte (("FE."[-1]&7)<<5)+(*-L1)	;wh_HNL
>9158	86 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>915a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>915b	08					.byte NN	;wh_Flags	dictionary flags
=37079					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.915c	20 0b 91	jsr $910b	FEDot:		jsr PFEDot
.915f	4c 93 90	jmp $9093			jmp FDot2
=6					CL	.var *-(WordListLink+wh_Xt)
=$9162					en = *	; remember here
>915a	06					.byte CL	;wh_CodeLength
>9162	46 22				L1:	.text 'F"'	;  name of word as a string, ending at wh_NameLastChar
>9164	42					.byte (('F"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>9165	d7 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9167	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9168	0c					.byte IM+NN	;wh_Flags	dictionary flags
=37092					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9169	20 9a bb	jsr $bb9a	FQuote:		jsr Parse_Name		; get string
.916c	20 8d 91	jsr $918d			jsr ToFloat		; convert
.916f	b5 24		lda $24,x			lda DStack+0,x		; error?
.9171	f0 0a		beq $917d			beq _Err
.9173	e8		inx				inx
.9174	e8		inx				inx
.9175	a5 0a		lda $0a				lda State		; compiling?
.9177	d0 01		bne $917a			bne _compile
.9179	60		rts				rts
.917a	4c 1c 88	jmp $881c	_compile:	jmp FLiteral		; compile a FP literal
.917d	a9 36		lda #$36	_Err:		lda #100+err_FPInvalidArg
.917f	20 67 b5	jsr $b567			jsr ThrowA
=25					CL	.var *-(WordListLink+wh_Xt)
=$9182					en = *	; remember here
>9167	19					.byte CL	;wh_CodeLength
>9182	3e 46 6c 6f 61 74		L1:	.text ">Float"	;  name of word as a string, ending at wh_NameLastChar
>9188	86					.byte ((">Float"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9189	e4 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>918b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>918c	08					.byte NN	;wh_Flags	dictionary flags
=37128					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.918d					ToFloat:
.918d	20 fa b8	jsr $b8fa			jsr Zero	; alloc & init workspace
.9190	20 fa b8	jsr $b8fa			jsr Zero
.9193	20 fa b8	jsr $b8fa			jsr Zero
=$2c					_addr		= DStack+8
=$2a					_len		= DStack+6
=$29					_mantfound 	= DStack+5		;mantissa digits found
=$28					_exponent 	= DStack+4		;exponent
=$27					_decimalPos 	= DStack+3		;decimal point position
=$26					_DecPointFound1 = DStack+2
=$25					_MantissaNegative1 = DStack+1
=$24					_ExponentNegative1 = DStack+0
.9196	20 bf 88	jsr $88bf			jsr F0			; init result
.9199	20 6b 92	jsr $926b	_11:		jsr _GetChar		; get mantissa prefix
.919c	b0 57		bcs $91f5			bcs _trueb ;_finishb
.919e	c9 20		cmp #$20			cmp #' '
.91a0	f0 f7		beq $9199			beq _11
.91a2	c9 2b		cmp #$2b			cmp #'+'
.91a4	f0 06		beq $91ac			beq _20
.91a6	c9 2d		cmp #$2d			cmp #'-'
.91a8	d0 07		bne $91b1			bne _21
.91aa	95 25		sta $25,x			sta _MantissaNegative1,x ; remember mantissa is negative
.91ac	20 6b 92	jsr $926b	_20:		jsr _GetChar		; do next mantissa digits
.91af	b0 47		bcs $91f8			bcs _finishb
.91b1	c9 2e		cmp #$2e	_21:		cmp #'.'
.91b3	f0 31		beq $91e6			beq _27
.91b5	c9 45		cmp #$45			cmp #'E'
.91b7	f0 42		beq $91fb			beq _30
.91b9	c9 65		cmp #$65			cmp #'e'
.91bb	f0 3e		beq $91fb			beq _30
.91bd	c9 44		cmp #$44			cmp #'D'
.91bf	f0 3a		beq $91fb			beq _30
.91c1	c9 64		cmp #$64			cmp #'d'
.91c3	f0 36		beq $91fb			beq _30
.91c5	38		sec				sec			;   a digit?
.91c6	e9 30		sbc #$30			sbc #'0'
.91c8	90 24		bcc $91ee			bcc _fail
.91ca	c9 0a		cmp #$0a			cmp #9+1
.91cc	b0 20		bcs $91ee			bcs _fail
.91ce	48		pha				pha			; append digit to mantissa
.91cf	20 b2 8c	jsr $8cb2			jsr F10Star
.91d2	68		pla				pla
.91d3	a0 00		ldy #$00			ldy #0
.91d5	20 61 8e	jsr $8e61			jsr SToFYA
.91d8	20 3e 8b	jsr $8b3e			jsr FPlus
.91db	f6 29		inc $29,x			inc _mantfound,x	; remember we found a mantissa digit
.91dd	b5 26		lda $26,x			lda _DecPointFound1,x	; if mantissa decimal point found
.91df	f0 02		beq $91e3			beq +
.91e1	d6 27		dec $27,x			dec _decimalPos,x	;   increment decimal point position
.91e3					+
.91e3	4c ac 91	jmp $91ac			jmp _20
.91e6					_27:
.91e6	b4 26		ldy $26,x			ldy _DecPointFound1,x	; already have one?
.91e8	d0 04		bne $91ee			bne _fail
.91ea	95 26		sta $26,x			sta _DecPointFound1,x	; we have one now!
.91ec	f0 be		beq $91ac			beq _20
.91ee					_fail:
.91ee	20 01 85	jsr $8501			jsr FDrop
.91f1	a9 00		lda #$00			lda #0			;return false
.91f3	f0 69		beq $925e			beq _return
.91f5	4c 5c 92	jmp $925c	_trueb:		jmp _true
.91f8	4c 29 92	jmp $9229	_finishb:	jmp _finish
.91fb					_30:
.91fb	20 6b 92	jsr $926b			jsr _GetChar
.91fe	b0 29		bcs $9229			bcs _finish
.9200	c9 2b		cmp #$2b			cmp #'+'
.9202	f0 06		beq $920a			beq _40
.9204	c9 2d		cmp #$2d			cmp #'-'
.9206	d0 07		bne $920f			bne _41
.9208	95 24		sta $24,x			sta _ExponentNegative1,x ; remember exponent is negative
.920a	20 6b 92	jsr $926b	_40:		jsr _GetChar		;get exponent digits
.920d	b0 1a		bcs $9229			bcs _finish
.920f	38		sec		_41:		sec			;  digit?
.9210	e9 30		sbc #$30			sbc #'0'
.9212	90 da		bcc $91ee			bcc _fail
.9214	c9 0a		cmp #$0a			cmp #9+1
.9216	b0 d6		bcs $91ee			bcs _fail
.9218	85 14		sta $14				sta tmp1
.921a	16 28		asl $28,x			asl _exponent,x		;  exponent *= 10
.921c	b5 28		lda $28,x			lda _exponent,x
.921e	0a		asl a				asl a
.921f	0a		asl a				asl a
.9220	75 28		adc $28,x			adc _exponent,x
.9222	65 14		adc $14				adc tmp1		;  + digit
.9224	95 28		sta $28,x			sta _exponent,x
.9226	4c 0a 92	jmp $920a			jmp _40
.9229					_finish:
.9229	b5 29		lda $29,x			lda _mantfound,x	;some mantissa digits found?
.922b	f0 c1		beq $91ee			beq _fail
.922d	b5 24		lda $24,x			lda _ExponentNegative1,x ;apply exponent sign
.922f	f0 07		beq $9238			beq +
.9231	a9 00		lda #$00			lda #0
.9233	38		sec				sec
.9234	f5 28		sbc $28,x			sbc _exponent,x
.9236	95 28		sta $28,x			sta _exponent,x
.9238					+
.9238	b5 28		lda $28,x			lda _exponent,x		;apply decimal position to exponent
.923a	18		clc				clc
.923b	75 27		adc $27,x			adc _decimalPos,x
.923d	95 28		sta $28,x			sta _exponent,x
.923f	4c 47 92	jmp $9247			jmp _93
.9242	20 b2 8c	jsr $8cb2	_93b:		jsr F10Star		;apply exponent to mantissa
.9245	d6 28		dec $28,x			dec _exponent,x
.9247	f0 0a		beq $9253	_93:		beq _94
.9249	10 f7		bpl $9242			bpl _93b
.924b	20 df 88	jsr $88df	_94b:		jsr F10
.924e	20 d0 8c	jsr $8cd0			jsr FSlash
.9251	f6 28		inc $28,x			inc _exponent,x
.9253	30 f6		bmi $924b	_94:		bmi _94b
.9255					_95:
.9255	b5 25		lda $25,x			lda _MantissaNegative1,x ;apply mantissa sign
.9257	f0 03		beq $925c			beq +
.9259	20 b7 8b	jsr $8bb7			jsr FNegate
.925c					+
.925c	a9 ff		lda #$ff	_true:		lda #$ff		;return true
.925e					_return:
.925e	95 2c		sta $2c,x			sta _addr+0,x		; replace _addr with flag
.9260	95 2d		sta $2d,x			sta _addr+1,x
.9262	e8		inx				inx			; Drop work
.9263	e8		inx				inx
.9264	e8		inx				inx			; 2Drop work
.9265	e8		inx				inx
.9266	e8		inx				inx
.9267	e8		inx				inx
.9268	e8		inx				inx			; Drop len
.9269	e8		inx				inx
.926a	60		rts				rts
.926b					_GetChar:
.926b	38		sec				sec
.926c	b5 2a		lda $2a,x			lda _len,x
.926e	f0 0b		beq $927b			beq _gc_rts		; if end, return C=1
.9270	d6 2a		dec $2a,x			dec _len,x
.9272	a1 2c		lda ($2c,x)			lda (_addr,x)
.9274	f6 2c		inc $2c,x			inc _addr+0,x
.9276	d0 02		bne $927a			bne +
.9278	f6 2d		inc $2d,x			inc _addr+1,x
.927a					+
.927a	18		clc				clc			; get char, return C=0
.927b	60		rts		_gc_rts:	rts
>927c	46 4b 65 79			L1:	.text "FKey"	;  name of word as a string, ending at wh_NameLastChar
>9280	24					.byte (("FKey"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9281	08 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9283	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9284	08					.byte NN	;wh_Flags	dictionary flags
=37376					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9285					FKey:
.9285	20 2c cb	jsr $cb2c			jsr Here		; ( addr )
.9288	20 2c cb	jsr $cb2c			jsr Here		; ( addr addr )
.928b	a9 28		lda #$28			lda #40			; ( addr addr 40 )
.928d	20 eb b8	jsr $b8eb			jsr PushZA
.9290	20 c0 c3	jsr $c3c0			jsr Accept		; ( addr len )
.9293	20 8d 91	jsr $918d			jsr ToFloat		; ( true | false)
.9296	e8		inx				inx			; err?
.9297	e8		inx				inx
.9298	b5 22		lda $22,x			lda DStack-2,x
.929a	f0 01		beq $929d			beq _err
.929c	60		rts				rts
.929d	20 ca b9	jsr $b9ca	_err:		jsr SLiteral_runtime
.92a0	4c a6 92	jmp $92a6			  jmp +
>92a3	20 3f 20					  .text " ? "
.92a6	20 08 cf	jsr $cf08	+		jsr Type
.92a9	4c 85 92	jmp $9285			jmp FKey
>92ac	53 46 40			L1:	.text "SF@"	;  name of word as a string, ending at wh_NameLastChar
>92af	03					.byte (("SF@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>92b0	00 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>92b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>92b3	08					.byte NN	;wh_Flags	dictionary flags
=37423					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.92b4	20 de b4	jsr $b4de	SFAt:		jsr PopYA		; pop sf_addr
.92b7	85 16		sta $16		SFAt_YA:	sta tmp2+0		; save sf_addr
.92b9	84 17		sty $17				sty tmp2+1
.92bb	20 b1 84	jsr $84b1			jsr FAllocX		; alloc FP stack entry
.92be	a0 01		ldy #$01			ldy #1			; copy exponent
.92c0	b1 16		lda ($16),y			lda (tmp2),y
.92c2	0a		asl a				asl a
.92c3	88		dey				dey
.92c4	b1 16		lda ($16),y			lda (tmp2),y
.92c6	2a		rol a				rol a
.92c7	38		sec				sec
.92c8	e9 7e		sbc #$7e			sbc #126
.92ca	95 4d		sta $4d,x			sta FSExp,x
.92cc	a0 01		ldy #$01			ldy #1			; copy mantissa
.92ce	b1 16		lda ($16),y			lda (tmp2),y
.92d0	09 80		ora #$80			ora #$80
.92d2	4a		lsr a				lsr a
.92d3	95 57		sta $57,x			sta FSMant0,x
.92d5	c8		iny				iny
.92d6	b1 16		lda ($16),y			lda (tmp2),y
.92d8	6a		ror a				ror a
.92d9	95 61		sta $61,x			sta FSMant1,x
.92db	c8		iny				iny
.92dc	b1 16		lda ($16),y			lda (tmp2),y
.92de	6a		ror a				ror a
.92df	95 6b		sta $6b,x			sta FSMant2,x
.92e1	a9 00		lda #$00			lda #0
.92e3	6a		ror a				ror a
.92e4	95 75		sta $75,x			sta FSMant3,x
.92e6	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.92e8	a0 00		ldy #$00			ldy #0			; get sign
.92ea	b1 16		lda ($16),y			lda (tmp2),y
.92ec	10 03		bpl $92f1			bpl +
.92ee	20 b7 8b	jsr $8bb7			jsr FNegate
.92f1					+
=61					CL	.var *-(WordListLink+wh_Xt)
=$92f1					en = *	; remember here
>92b2	3d					.byte CL	;wh_CodeLength
.92f1	60		rts				rts
>92f2	53 46 21			L1:	.text "SF!"	;  name of word as a string, ending at wh_NameLastChar
>92f5	23					.byte (("SF!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>92f6	2f 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>92f8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>92f9	08					.byte NN	;wh_Flags	dictionary flags
=37493					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.92fa	20 de b4	jsr $b4de	SFStore:	jsr PopYA		; pop sf_addr
.92fd	85 16		sta $16		SFStore_YA:	sta tmp2+0		; save
.92ff	84 17		sty $17				sty tmp2+1
.9301	a4 4c		ldy $4c				ldy fp			; negative?
.9303	b9 57 00	lda $0057,y			lda FSMant0,y
.9306	29 80		and #$80			and #$80		;  save sign
.9308	85 19		sta $19				sta tmp3+1
.930a	10 03		bpl $930f			bpl +
.930c	20 b7 8b	jsr $8bb7			jsr FNegate
.930f					+
.930f	86 14		stx $14				stx tmp1+0		; save data stack index
.9311	a6 4c		ldx $4c				ldx fp			; switch to FP stack index
.9313	b5 4d		lda $4d,x			lda FSExp,x		; +128
.9315	18		clc				clc
.9316	69 7e		adc #$7e			adc #126
.9318	95 4d		sta $4d,x			sta FSExp,x
.931a	16 75		asl $75,x			asl FSMant3,x
.931c	b5 6b		lda $6b,x			lda FSMant2,x
.931e	2a		rol a				rol a
.931f	a0 03		ldy #$03			ldy #3			; +3 IEEE
.9321	91 16		sta ($16),y			sta (tmp2),y
.9323	b5 61		lda $61,x			lda FSMant1,x
.9325	2a		rol a				rol a
.9326	88		dey				dey			; +2 IEEE
.9327	91 16		sta ($16),y			sta (tmp2),y
.9329	b5 57		lda $57,x			lda FSMant0,x
.932b	2a		rol a				rol a
.932c	2a		rol a				rol a
.932d	56 4d		lsr $4d,x			lsr FSExp,x
.932f	6a		ror a				ror a
.9330	88		dey				dey			; +1 IEEE
.9331	91 16		sta ($16),y			sta (tmp2),y
.9333	b5 4d		lda $4d,x			lda FSExp,x
.9335	05 19		ora $19				ora tmp3+1		;  insert sign
.9337	88		dey				dey			; +0 IEEE
.9338	91 16		sta ($16),y			sta (tmp2),y
.933a	e6 4c		inc $4c				inc fp			; FDrop
.933c	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=68					CL	.var *-(WordListLink+wh_Xt)
=$933e					en = *	; remember here
>92f8	44					.byte CL	;wh_CodeLength
.933e	60		rts				rts
>933f	53 46 6c 6f 61 74 2b		L1:	.text "SFloat+"	;  name of word as a string, ending at wh_NameLastChar
>9346	67					.byte (("SFloat+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9347	75 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9349	03					.byte 3		;wh_CodeLength  (with placeholder value)
>934a	08					.byte NN	;wh_Flags	dictionary flags
=37574					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.934b	a9 04		lda #$04	SFloatPlus:	lda #4
.934d	4c 0f cb	jmp $cb0f			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9350					en = *	; remember here
>9349	05					.byte CL	;wh_CodeLength
>9350	53 46 6c 6f 61 74 73		L1:	.text "SFloats"	;  name of word as a string, ending at wh_NameLastChar
>9357	67					.byte (("SFloats"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9358	c6 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>935a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>935b	08					.byte NN	;wh_Flags	dictionary flags
=37591					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.935c	a9 02		lda #$02	SFloats:	lda #2
.935e	4c 53 cc	jmp $cc53			jmp LShift_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9361					en = *	; remember here
>935a	05					.byte CL	;wh_CodeLength
>9361	44 46 21			L1:	.text "DF!"	;  name of word as a string, ending at wh_NameLastChar
>9364	23					.byte (("DF!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9365	d7 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9367	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9368	08					.byte NN	;wh_Flags	dictionary flags
=37604					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9369	20 de b4	jsr $b4de	DFStore:	jsr PopYA		; pop df_addr
.936c	85 16		sta $16		DFStore_YA:	sta tmp2+0		; save df_addr
.936e	84 17		sty $17				sty tmp2+1
.9370	a4 4c		ldy $4c				ldy fp			; negative?
.9372	b9 57 00	lda $0057,y			lda FSMant0,y
.9375	29 80		and #$80			and #$80		; remember sign
.9377	85 19		sta $19				sta tmp3+1
.9379	10 03		bpl $937e			bpl +			; make positive
.937b	20 b7 8b	jsr $8bb7			jsr FNegate
.937e					+
.937e	86 14		stx $14				stx tmp1+0		; save data stack index
.9380	a6 4c		ldx $4c				ldx fp
.9382	a9 00		lda #$00			lda #0
.9384	a0 07		ldy #$07			ldy #7			; +7 IEEE
.9386	91 16		sta ($16),y			sta (tmp2),y
.9388	88		dey				dey			; +6 IEEE
.9389	91 16		sta ($16),y			sta (tmp2),y
.938b	20 d3 93	jsr $93d3			jsr _shift		; shift mantissa
.938e	20 d3 93	jsr $93d3			jsr _shift
.9391	88		dey				dey			; +5 IEEE
.9392	91 16		sta ($16),y			sta (tmp2),y
.9394	b5 75		lda $75,x			lda FSMant3,x
.9396	88		dey				dey			; +4 IEEE
.9397	91 16		sta ($16),y			sta (tmp2),y
.9399	b5 6b		lda $6b,x			lda FSMant2,x
.939b	88		dey				dey			; +3 IEEE
.939c	91 16		sta ($16),y			sta (tmp2),y
.939e	b5 61		lda $61,x			lda FSMant1,x
.93a0	88		dey				dey			; +2 IEEE
.93a1	91 16		sta ($16),y			sta (tmp2),y
.93a3	b5 57		lda $57,x			lda FSMant0,x		; clear extra bits
.93a5	29 0f		and #$0f			and #$f
.93a7	95 57		sta $57,x			sta FSMant0,x
.93a9	b5 4d		lda $4d,x			lda FSExp,x
.93ab	38		sec				sec
.93ac	e9 02		sbc #$02			sbc #2
.93ae	95 4d		sta $4d,x			sta FSExp,x
.93b0	0a		asl a				asl a
.93b1	0a		asl a				asl a
.93b2	0a		asl a				asl a
.93b3	0a		asl a				asl a
.93b4	15 57		ora $57,x			ora FSMant0,x
.93b6	88		dey				dey			; +1 IEEE
.93b7	91 16		sta ($16),y			sta (tmp2),y
.93b9	b5 4d		lda $4d,x			lda FSExp,x
.93bb	08		php				php
.93bc	4a		lsr a				lsr a
.93bd	4a		lsr a				lsr a
.93be	4a		lsr a				lsr a
.93bf	4a		lsr a				lsr a
.93c0	18		clc				clc
.93c1	69 30		adc #$30			adc #$30
.93c3	28		plp				plp
.93c4	30 03		bmi $93c9			bmi +
.93c6	18		clc				clc
.93c7	69 10		adc #$10			adc #$10
.93c9	05 19		ora $19		+		ora tmp3+1		; add sign bit
.93cb	88		dey				dey			; +0 IEEE
.93cc	91 16		sta ($16),y			sta (tmp2),y
.93ce	e6 4c		inc $4c				inc fp			; FDrop
.93d0	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.93d2	60		rts				rts
.93d3	56 57		lsr $57,x	_shift:		lsr FSMant0,x
.93d5	76 61		ror $61,x			ror FSMant1,x
.93d7	76 6b		ror $6b,x			ror FSMant2,x
.93d9	76 75		ror $75,x			ror FSMant3,x
.93db	6a		ror a				ror a
=115					CL	.var *-(WordListLink+wh_Xt)
=$93dc					en = *	; remember here
>9367	73					.byte CL	;wh_CodeLength
.93dc	60		rts				rts
>93dd	44 46 40			L1:	.text "DF@"	;  name of word as a string, ending at wh_NameLastChar
>93e0	03					.byte (("DF@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>93e1	e4 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>93e3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>93e4	08					.byte NN	;wh_Flags	dictionary flags
=37728					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.93e5	20 de b4	jsr $b4de	DFAt:		jsr PopYA		; pop df_addr
.93e8	85 16		sta $16		DFAt_YA:	sta tmp2+0		; save df_addr
.93ea	84 17		sty $17				sty tmp2+1
.93ec	20 b1 84	jsr $84b1			jsr FAllocX		; alloc FP stack entry
.93ef	a0 00		ldy #$00			ldy #0			; +0 IEEE byte
.93f1	b1 16		lda ($16),y			lda (tmp2),y
.93f3	95 4d		sta $4d,x			sta FSExp,x
.93f5	c8		iny				iny			; +1 IEEE byte
.93f6	b1 16		lda ($16),y			lda (tmp2),y
.93f8	95 57		sta $57,x			sta FSMant0,x
.93fa	c8		iny				iny			; +2 IEEE byte
.93fb	b1 16		lda ($16),y			lda (tmp2),y
.93fd	95 61		sta $61,x			sta FSMant1,x
.93ff	c8		iny				iny			; +3 IEEE byte
.9400	b1 16		lda ($16),y			lda (tmp2),y
.9402	95 6b		sta $6b,x			sta FSMant2,x
.9404	c8		iny				iny			; +4 IEEE byte
.9405	b1 16		lda ($16),y			lda (tmp2),y
.9407	95 75		sta $75,x			sta FSMant3,x
.9409	c8		iny				iny			; +5 IEEE byte
.940a	b1 16		lda ($16),y			lda (tmp2),y
.940c	20 35 94	jsr $9435			jsr _shifta		; shift exponent & mantissa bits into place
.940f	20 35 94	jsr $9435			jsr _shifta
.9412	b5 57		lda $57,x			lda FSMant0,x		; finish shifting exponent bits
.9414	0a		asl a				asl a
.9415	36 4d		rol $4d,x			rol FSExp,x
.9417	0a		asl a				asl a
.9418	36 4d		rol $4d,x			rol FSExp,x
.941a	b5 4d		lda $4d,x			lda FSExp,x		; remove +1023
.941c	18		clc				clc
.941d	69 02		adc #$02			adc #2
.941f	95 4d		sta $4d,x			sta FSExp,x
.9421	b5 57		lda $57,x			lda FSMant0,x
.9423	29 7f		and #$7f			and #$7f
.9425	09 40		ora #$40			ora #$40		;   insert implied 1
.9427	95 57		sta $57,x			sta FSMant0,x		;   insert sign=0
.9429	a6 14		ldx $14				ldx tmp1		; restore data stack index
.942b	a0 00		ldy #$00			ldy #0			; get sign from +0 IEEE byte
.942d	b1 16		lda ($16),y			lda (tmp2),y
.942f	10 03		bpl $9434			bpl +
.9431	20 b7 8b	jsr $8bb7			jsr FNegate
.9434					+
.9434	60		rts				rts
.9435	0a		asl a		_shifta:	asl a
.9436	36 75		rol $75,x			rol FSMant3,x
.9438	36 6b		rol $6b,x			rol FSMant2,x
.943a	36 61		rol $61,x			rol FSMant1,x
.943c	36 57		rol $57,x			rol FSMant0,x
.943e	36 4d		rol $4d,x			rol FSExp,x
.9440	60		rts				rts
=92					CL	.var *-(WordListLink+wh_Xt)
=$9441					en = *	; remember here
>93e3	5c					.byte CL	;wh_CodeLength
>9441	44 46 6c 6f 61 74 2b		L1:	.text "DFloat+"	;  name of word as a string, ending at wh_NameLastChar
>9448	67					.byte (("DFloat+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9449	60 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>944b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>944c	08					.byte NN	;wh_Flags	dictionary flags
=37832					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.944d	a9 08		lda #$08	DFloatPlus:	lda #8
.944f	4c 0f cb	jmp $cb0f			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9452					en = *	; remember here
>944b	05					.byte CL	;wh_CodeLength
>9452	44 46 6c 6f 61 74 73		L1:	.text "DFloats"	;  name of word as a string, ending at wh_NameLastChar
>9459	67					.byte (("DFloats"[-1]&7)<<5)+(*-L1)	;wh_HNL
>945a	c8 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>945c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>945d	08					.byte NN	;wh_Flags	dictionary flags
=37849					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.945e	a9 03		lda #$03	DFloats:	lda #3
.9460	4c 53 cc	jmp $cc53			jmp LShift_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9463					en = *	; remember here
>945c	05					.byte CL	;wh_CodeLength
>9463	46 4d 50 6f 6c 79		L1:	.text "FMPoly"	;  name of word as a string, ending at wh_NameLastChar
>9469	26					.byte (("FMPoly"[-1]&7)<<5)+(*-L1)	;wh_HNL
>946a	d9 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>946c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>946d	08					.byte NN	;wh_Flags	dictionary flags
=37865					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.946e	20 de b4	jsr $b4de	FMPoly:		jsr PopYA
.9471	20 b9 b8	jsr $b8b9	FMPolyYA:	jsr PushYA		; push coefficent addr
.9474	20 4d 86	jsr $864d			jsr FAt_YA		; fetch 1st coefficent
.9477	4c 8a 94	jmp $948a			jmp _4
.947a	20 67 85	jsr $8567	_2:		jsr FOver
.947d	20 12 8c	jsr $8c12			jsr FStar
.9480	b5 24		lda $24,x			lda DStack+0,x		; fetch next coefficent
.9482	b4 25		ldy $25,x			ldy DStack+1,x
.9484	20 4d 86	jsr $864d			jsr FAt_YA
.9487	20 3e 8b	jsr $8b3e			jsr FPlus
.948a	a9 05		lda #$05	_4:		lda #5			; bump coefficent ptr
.948c	20 0f cb	jsr $cb0f			jsr Plus_A
.948f	a1 24		lda ($24,x)			lda (DStack+0,x)	; end of coefficent list?
.9491	d0 e7		bne $947a			bne _2
.9493	e8		inx				inx			; Drop coefficent ptr
.9494	e8		inx				inx
=39					CL	.var *-(WordListLink+wh_Xt)
=$9495					en = *	; remember here
>946c	27					.byte CL	;wh_CodeLength
.9495	60		rts				rts
>9496	46 4c 6f 67 32 4d 31 4d		L1:	.text "FLog2M1M"	;  name of word as a string, ending at wh_NameLastChar
>949e	a8					.byte (("FLog2M1M"[-1]&7)<<5)+(*-L1)	;wh_HNL
>949f	e9 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>94a1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>94a2	08					.byte NN	;wh_Flags	dictionary flags
=37918					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.94a3	a9 ad		lda #$ad	FLog2M1M:	lda #<_c
.94a5	a0 94		ldy #$94			ldy #>_c
.94a7	20 71 94	jsr $9471			jsr FMPolyYA
.94aa	4c 12 8c	jmp $8c12			jmp FStar
=10					CL	.var *-(WordListLink+wh_Xt)
=$94ad					en = *	; remember here
>94a1	0a					.byte CL	;wh_CodeLength
.94ad					_c:
>94ad	cc cf 97 7c					.dword $7C97CFCC	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94b1	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>94b2	64 87 94 af					.dword $AF948764	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94b6	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>94b7	66 c8 d4 62					.dword $62D4C866	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94bb	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>94bc	e2 9c c3 ac					.dword $ACC39CE2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94c0	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>94c1	1a c6 2b 79					.dword $792BC61A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94c5	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>94c6	07 e1 c4 a3					.dword $A3C4E107	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94ca	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>94cb	91 a5 54 5c					.dword $5C54A591	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94cf	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>94d0	00 00						.word 0
>94d2	46 4c 6f 67 32			L1:	.text "FLog2"	;  name of word as a string, ending at wh_NameLastChar
>94d7	45					.byte (("FLog2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>94d8	1e 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>94da	03					.byte 3		;wh_CodeLength  (with placeholder value)
>94db	08					.byte NN	;wh_Flags	dictionary flags
=37975					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.94dc	a4 4c		ldy $4c		FLog2:		ldy fp
.94de	b9 57 00	lda $0057,y			lda FSMant0,y	; bad param?
.94e1	30 20		bmi $9503			bmi _OutOfRange
.94e3	f0 1e		beq $9503			beq _OutOfRange
.94e5	b9 4d 00	lda $004d,y			lda FSExp,y
.94e8	48		pha				pha		; remember orig exponent
.94e9	a9 01		lda #$01			lda #1
.94eb	99 4d 00	sta $004d,y			sta FSExp,y	; set to 1
.94ee	20 a5 8b	jsr $8ba5			jsr F1Minus
.94f1	20 a3 94	jsr $94a3			jsr FLog2M1M
.94f4	a0 00		ldy #$00			ldy #0		; add orig exponent to float
.94f6	68		pla				pla
.94f7	38		sec				sec
.94f8	e9 01		sbc #$01			sbc #1
.94fa	10 01		bpl $94fd			bpl +
.94fc	88		dey				dey
.94fd					+
.94fd	20 61 8e	jsr $8e61			jsr SToFYA
.9500	4c 3e 8b	jmp $8b3e			jmp FPlus
.9503	4c 40 b5	jmp $b540	_OutOfRange:	jmp Throw_FpOutOfRange
=42					CL	.var *-(WordListLink+wh_Xt)
=$9506					en = *	; remember here
>94da	2a					.byte CL	;wh_CodeLength
>9506	46 4c 6e			L1:	.text "FLn"	;  name of word as a string, ending at wh_NameLastChar
>9509	c3					.byte (("FLn"[-1]&7)<<5)+(*-L1)	;wh_HNL
>950a	57 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>950c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>950d	08					.byte NN	;wh_Flags	dictionary flags
=38025					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.950e	20 dc 94	jsr $94dc	FLn:		jsr FLog2
.9511	20 5a 88	jsr $885a			jsr FLitI
>9514	f8 0b b9 58					.dword $58b90bf8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9518	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
.9519	4c 12 8c	jmp $8c12			jmp FStar
=14					CL	.var *-(WordListLink+wh_Xt)
=$951c					en = *	; remember here
>950c	0e					.byte CL	;wh_CodeLength
>951c	46 4c 6e 50 31			L1:	.text "FLnP1"	;  name of word as a string, ending at wh_NameLastChar
>9521	25					.byte (("FLnP1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9522	89 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9524	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9525	08					.byte NN	;wh_Flags	dictionary flags
=38049					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9526	20 73 8b	jsr $8b73	FlnP1:		jsr F1Plus
.9529	4c 0e 95	jmp $950e			jmp FLn
=6					CL	.var *-(WordListLink+wh_Xt)
=$952c					en = *	; remember here
>9524	06					.byte CL	;wh_CodeLength
>952c	46 4c 6f 67			L1:	.text "FLog"	;  name of word as a string, ending at wh_NameLastChar
>9530	e4					.byte (("FLog"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9531	a1 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9533	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9534	08					.byte NN	;wh_Flags	dictionary flags
=38064					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9535	20 dc 94	jsr $94dc	FLog:		jsr FLog2
.9538	20 5a 88	jsr $885a			jsr FLitI
>953b	3c 4d 10 4d					.dword $4d104d3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>953f	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
.9540	4c 12 8c	jmp $8c12			jmp FStar
=14					CL	.var *-(WordListLink+wh_Xt)
=$9543					en = *	; remember here
>9533	0e					.byte CL	;wh_CodeLength
>9543	46 45 78 70 32 4d 31 4d		L1:	.text "FExp2M1M"	;  name of word as a string, ending at wh_NameLastChar
>954b	a8					.byte (("FExp2M1M"[-1]&7)<<5)+(*-L1)	;wh_HNL
>954c	b0 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>954e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>954f	08					.byte NN	;wh_Flags	dictionary flags
=38091					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9550	a9 5a		lda #$5a	FExp2M1M:	lda #<_c
.9552	a0 95		ldy #$95			ldy #>_c
.9554	20 71 94	jsr $9471			jsr FMPolyYA
.9557	4c 12 8c	jmp $8c12			jmp FStar
=10					CL	.var *-(WordListLink+wh_Xt)
=$955a					en = *	; remember here
>954e	0a					.byte CL	;wh_CodeLength
.955a					_c:
>955a	e7 dc 4f 7c					.dword $7C4FDCe7	; 32 bit signed binary mantissa.  $40000000 = +0.5
>955e	f7						.char -9		; 8 bit signed exponent.  $00 = 2**0
>955f	de ca 4c 49					.dword $494CCADe	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9563	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9564	fb 42 64 72					.dword $726442fb	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9568	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9569	50 90 f4 7a					.dword $7AF49050	; 32 bit signed binary mantissa.  $40000000 = +0.5
>956d	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>956e	a2 3c b9 58					.dword $58B93Ca2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9572	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>9573	00						.byte 0
>9574	46 45 78 70 32			L1:	.text "FExp2"	;  name of word as a string, ending at wh_NameLastChar
>9579	45					.byte (("FExp2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>957a	cb 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>957c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>957d	08					.byte NN	;wh_Flags	dictionary flags
=38137					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.957e	20 6b 8a	jsr $8a6b	FExp2:		jsr FIntFrc	; ( f: r_rem r_int )
.9581	20 ab 8e	jsr $8eab			jsr FToS
.9584	20 50 95	jsr $9550			jsr FExp2M1M
.9587	20 73 8b	jsr $8b73			jsr F1Plus
.958a	20 c2 b4	jsr $b4c2			jsr PopA
.958d	a4 4c		ldy $4c				ldy fp
.958f	18		clc				clc
.9590	79 4d 00	adc $004d,y			adc FSExp,y
.9593	99 4d 00	sta $004d,y			sta FSExp,y
=24					CL	.var *-(WordListLink+wh_Xt)
=$9596					en = *	; remember here
>957c	18					.byte CL	;wh_CodeLength
.9596	60		rts				rts
>9597	46 45 78 70			L1:	.text "FExp"	;  name of word as a string, ending at wh_NameLastChar
>959b	04					.byte (("FExp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>959c	f9 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>959e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>959f	08					.byte NN	;wh_Flags	dictionary flags
=38171					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95a0					FExp:
.95a0	20 5a 88	jsr $885a			jsr FLitI
>95a3	94 1d 55 5c					.dword $5c551d94	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95a7	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
.95a8	20 12 8c	jsr $8c12			jsr FStar
.95ab	4c 7e 95	jmp $957e			jmp FExp2
=14					CL	.var *-(WordListLink+wh_Xt)
=$95ae					en = *	; remember here
>959e	0e					.byte CL	;wh_CodeLength
>95ae	46 45 78 70 4d 31		L1:	.text "FExpM1"	;  name of word as a string, ending at wh_NameLastChar
>95b4	26					.byte (("FExpM1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95b5	1b 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95b8	08					.byte NN	;wh_Flags	dictionary flags
=38196					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95b9	20 a0 95	jsr $95a0	FExpM1:		jsr FExp
.95bc	4c a5 8b	jmp $8ba5			jmp F1Minus
=6					CL	.var *-(WordListLink+wh_Xt)
=$95bf					en = *	; remember here
>95b7	06					.byte CL	;wh_CodeLength
>95bf	46 41 4c 6f 67			L1:	.text "FALog"	;  name of word as a string, ending at wh_NameLastChar
>95c4	e5					.byte (("FALog"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95c5	34 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95c8	08					.byte NN	;wh_Flags	dictionary flags
=38212					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95c9					FALog:
.95c9	20 5a 88	jsr $885a			jsr FLitI
>95cc	25 3c 4d 6a					.dword $6a4d3c25	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95d0	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
.95d1	20 12 8c	jsr $8c12			jsr FStar
.95d4	4c 7e 95	jmp $957e			jmp FExp2
=14					CL	.var *-(WordListLink+wh_Xt)
=$95d7					en = *	; remember here
>95c7	0e					.byte CL	;wh_CodeLength
>95d7	46 2a 2a			L1:	.text "F**"	;  name of word as a string, ending at wh_NameLastChar
>95da	43					.byte (("F**"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95db	44 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95de	08					.byte NN	;wh_Flags	dictionary flags
=38234					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95df	20 cb 85	jsr $85cb	FPower:		jsr FSwap
.95e2	20 dc 94	jsr $94dc			jsr FLog2
.95e5	20 12 8c	jsr $8c12			jsr FStar
.95e8	4c 7e 95	jmp $957e			jmp FExp2
=12					CL	.var *-(WordListLink+wh_Xt)
=$95eb					en = *	; remember here
>95dd	0c					.byte CL	;wh_CodeLength
>95eb	44 65 67 32 52 61 64		L1:	.text "Deg2Rad"	;  name of word as a string, ending at wh_NameLastChar
>95f2	87					.byte (("Deg2Rad"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95f3	5a 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95f5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95f6	08					.byte NN	;wh_Flags	dictionary flags
=38258					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95f7					Deg2Rad:
.95f7	20 5a 88	jsr $885a			jsr FLitI
>95fa	8a 1a 7d 47					.dword $477d1A8A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95fe	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
.95ff	4c 12 8c	jmp $8c12			jmp FStar
=11					CL	.var *-(WordListLink+wh_Xt)
=$9602					en = *	; remember here
>95f5	0b					.byte CL	;wh_CodeLength
>9602	52 61 64 32 44 65 67		L1:	.text "Rad2Deg"	;  name of word as a string, ending at wh_NameLastChar
>9609	e7					.byte (("Rad2Deg"[-1]&7)<<5)+(*-L1)	;wh_HNL
>960a	72 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>960c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>960d	08					.byte NN	;wh_Flags	dictionary flags
=38281					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.960e					Rad2Deg:
.960e	20 5a 88	jsr $885a			jsr FLitI
>9611	68 70 97 72					.dword $72977068	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9615	06						.char 6		; 8 bit signed exponent.  $00 = 2**0
.9616	4c 12 8c	jmp $8c12			jmp FStar
=11					CL	.var *-(WordListLink+wh_Xt)
=$9619					en = *	; remember here
>960c	0b					.byte CL	;wh_CodeLength
>9619	46 41 52 65 64 75 63 65		L1:	.text "FAReduce"	;  name of word as a string, ending at wh_NameLastChar
>9621	a8					.byte (("FAReduce"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9622	89 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9624	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9625	08					.byte NN	;wh_Flags	dictionary flags
=38305					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9626	a4 4c		ldy $4c		FAReduce:	ldy fp
.9628	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.962b	f0 2f		beq $965c			beq _ok
.962d	b9 4d 00	lda $004d,y			lda FSExp,y		; get exponent
.9630	30 2a		bmi $965c			bmi _ok			; small?
.9632	c9 01		cmp #$01			cmp #1			; maybe need mirror?
.9634	30 26		bmi $965c			bmi _ok			;if exponent <=0
.9636	f0 24		beq $965c			beq _ok
.9638	c9 02		cmp #$02			cmp #2			; maybe need rotation?
.963a	b0 22		bcs $965e			bcs _exp2
.963c	b9 57 00	lda $0057,y			lda FSMant0,y
.963f	c9 65		cmp #$65			cmp #$65		;in -pi/2..pi/2 ?
.9641	90 19		bcc $965c			bcc _ok
.9643	c9 9b		cmp #$9b			cmp #$100-$65
.9645	b0 15		bcs $965c			bcs _ok
.9647					_mir:
.9647	20 18 89	jsr $8918			jsr FPi
.964a	a4 4c		ldy $4c				ldy fp
.964c	b9 58 00	lda $0058,y			lda FSMant0+1,y
.964f	10 03		bpl $9654			bpl _3
.9651	20 b7 8b	jsr $8bb7			jsr FNegate
.9654	20 cb 85	jsr $85cb	_3:		jsr FSwap
.9657	20 80 8b	jsr $8b80			jsr FMinus
.965a	38		sec				sec		; mirrored
.965b	60		rts				rts
.965c	18		clc		_ok:		clc		; not mirrored
.965d	60		rts				rts
.965e	d0 0b		bne $966b	_exp2:		bne _rot	;if exp>2 then fix
.9660	b9 57 00	lda $0057,y			lda FSMant0,y
.9663	c9 65		cmp #$65			cmp #$65	;if mant>pi or mant<-pi then fix
.9665	90 e0		bcc $9647			bcc _mir
.9667	c9 9b		cmp #$9b			cmp #$100-$65
.9669	b0 dc		bcs $9647			bcs _mir
.966b	20 4a 89	jsr $894a	_rot:		jsr F2Pi
.966e	20 d0 8c	jsr $8cd0			jsr FSlash
.9671	20 6b 8a	jsr $8a6b			jsr FIntFrc
.9674	e6 4c		inc $4c				inc fp		; FDrop integer part
.9676	a4 4c		ldy $4c				ldy fp		;if >=.5
.9678	b9 4d 00	lda $004d,y			lda FSExp,y
.967b	a8		tay				tay
.967c	30 03		bmi $9681			bmi _rot4
.967e	20 a5 8b	jsr $8ba5			jsr F1Minus	;  subtract 1
.9681	20 4a 89	jsr $894a	_rot4:		jsr F2Pi
.9684	20 12 8c	jsr $8c12			jsr FStar
.9687	4c 26 96	jmp $9626			jmp FAReduce	; rotate done, look again
=100					CL	.var *-(WordListLink+wh_Xt)
=$968a					en = *	; remember here
>9624	64					.byte CL	;wh_CodeLength
>968a	46 53 69 6e			L1:	.text "FSin"	;  name of word as a string, ending at wh_NameLastChar
>968e	c4					.byte (("FSin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>968f	a1 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9691	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9692	08					.byte NN	;wh_Flags	dictionary flags
=38414					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9693	20 26 96	jsr $9626	FSin:		jsr FAReduce
.9696	4c 99 96	jmp $9699			jmp FSinM
=6					CL	.var *-(WordListLink+wh_Xt)
=$9699					en = *	; remember here
>9691	06					.byte CL	;wh_CodeLength
.9699	20 43 85	jsr $8543	FSinM:		jsr FDup
.969c	20 a3 8c	jsr $8ca3			jsr FSqr	; x x^2
.969f	a9 af		lda #$af			lda #<_c
.96a1	a0 96		ldy #$96			ldy #>_c
.96a3	20 71 94	jsr $9471			jsr FMPolyYA
.96a6	20 12 8c	jsr $8c12			jsr FStar
.96a9	20 73 8b	jsr $8b73			jsr F1Plus	; C0 +1.0
.96ac	4c 12 8c	jmp $8c12			jmp FStar
.96af					_c:
>96af	ba a7 21 57					.dword $5721a7ba	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96b3	ee						.char -18		; 8 bit signed exponent.  $00 = 2**0
>96b4	3a 0b 2a 98					.dword $982a0b3a	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96b8	f4						.char -12		; 8 bit signed exponent.  $00 = 2**0
>96b9	4c 8f 43 44					.dword $44438f4c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96bd	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>96be	2b ae aa aa					.dword $aaaaae2b	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96c2	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>96c3	00						.byte 0
>96c4	46 43 73 63			L1:	.text "FCsc"	;  name of word as a string, ending at wh_NameLastChar
>96c8	64					.byte (("FCsc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>96c9	0e 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96cb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96cc	08					.byte NN	;wh_Flags	dictionary flags
=38472					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.96cd	20 93 96	jsr $9693	FCsc:		jsr FSin
.96d0	4c 75 8d	jmp $8d75			jmp F1Slash		; 1/SIN(r1)
=6					CL	.var *-(WordListLink+wh_Xt)
=$96d3					en = *	; remember here
>96cb	06					.byte CL	;wh_CodeLength
>96d3	46 43 6f 73			L1:	.text "FCos"	;  name of word as a string, ending at wh_NameLastChar
>96d7	64					.byte (("FCos"[-1]&7)<<5)+(*-L1)	;wh_HNL
>96d8	48 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96da	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96db	08					.byte NN	;wh_Flags	dictionary flags
=38487					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.96dc	20 29 89	jsr $8929	FCos:		jsr FPiH
.96df	20 3e 8b	jsr $8b3e			jsr FPlus
.96e2	4c 93 96	jmp $9693			jmp FSin
=9					CL	.var *-(WordListLink+wh_Xt)
=$96e5					en = *	; remember here
>96da	09					.byte CL	;wh_CodeLength
>96e5	46 53 65 63			L1:	.text "FSec"	;  name of word as a string, ending at wh_NameLastChar
>96e9	64					.byte (("FSec"[-1]&7)<<5)+(*-L1)	;wh_HNL
>96ea	57 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96ec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96ed	08					.byte NN	;wh_Flags	dictionary flags
=38505					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.96ee	20 dc 96	jsr $96dc	FSec:		jsr FCos
.96f1	4c 75 8d	jmp $8d75			jmp F1Slash		; 1/COS(r1)
=6					CL	.var *-(WordListLink+wh_Xt)
=$96f4					en = *	; remember here
>96ec	06					.byte CL	;wh_CodeLength
>96f4	46 53 69 6e 43 6f 73		L1:	.text "FSinCos"	;  name of word as a string, ending at wh_NameLastChar
>96fb	67					.byte (("FSinCos"[-1]&7)<<5)+(*-L1)	;wh_HNL
>96fc	69 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96ff	08					.byte NN	;wh_Flags	dictionary flags
=38523					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9700	20 43 85	jsr $8543	FSinCos:	jsr FDup
.9703	20 93 96	jsr $9693			jsr FSin
.9706	20 cb 85	jsr $85cb			jsr FSwap
.9709	4c dc 96	jmp $96dc			jmp FCos
=12					CL	.var *-(WordListLink+wh_Xt)
=$970c					en = *	; remember here
>96fe	0c					.byte CL	;wh_CodeLength
>970c	46 54 61 6e			L1:	.text "FTan"	;  name of word as a string, ending at wh_NameLastChar
>9710	c4					.byte (("FTan"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9711	7b 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9713	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9714	08					.byte NN	;wh_Flags	dictionary flags
=38544					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9715	20 26 96	jsr $9626	FTan:		jsr FAReduce
.9718	90 06		bcc $9720			bcc _30
.971a	20 20 97	jsr $9720			jsr _30
.971d	4c b7 8b	jmp $8bb7			jmp FNegate
.9720					_30:
.9720	20 43 85	jsr $8543			jsr FDup
.9723	20 de 8b	jsr $8bde			jsr FAbs
.9726	20 3a 89	jsr $893a			jsr FPiQ
.9729	20 73 87	jsr $8773			jsr FLe
.972c	e8		inx				inx			; pop f
.972d	e8		inx				inx
.972e	b5 24		lda $24,x			lda DStack+0,x
.9730	d0 19		bne $974b			bne FTanM
.9732	20 8c 44	jsr $448c			jsr FPi/2
.9735	a4 4c		ldy $4c				ldy fp			; get sign
.9737	b9 57 00	lda $0057,y			lda FSMant0,y
.973a	10 03		bpl $973f			bpl +
.973c	20 b7 8b	jsr $8bb7			jsr FNegate
.973f					+
.973f	20 cb 85	jsr $85cb			jsr FSwap
.9742	20 80 8b	jsr $8b80			jsr FMinus
.9745	20 4b 97	jsr $974b			jsr FTanM
.9748	4c 75 8d	jmp $8d75			jmp F1Slash
=54					CL	.var *-(WordListLink+wh_Xt)
=$974b					en = *	; remember here
>9713	36					.byte CL	;wh_CodeLength
.974b	20 43 85	jsr $8543	FTanM:		jsr FDup
.974e	20 a3 8c	jsr $8ca3			jsr FSqr		; x x^2
.9751	a9 61		lda #$61			lda #<_c
.9753	a0 97		ldy #$97			ldy #>_c
.9755	20 71 94	jsr $9471			jsr FMPolyYA
.9758	20 12 8c	jsr $8c12			jsr FStar
.975b	20 73 8b	jsr $8b73			jsr F1Plus		; c0 1.0
.975e	4c 12 8c	jmp $8c12			jmp FStar
.9761					_c:
>9761	1e ae 4d 58					.dword $584DAE1E	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9765	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>9766	51 0a eb 57					.dword $57EB0A51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>976a	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>976b	98 d9 14 77					.dword $7714D998	; 32 bit signed binary mantissa.  $40000000 = +0.5
>976f	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9770	f9 10 ea 43					.dword $43EA10F9	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9774	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9775	1b e2 57 55					.dword $5557E21B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9779	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>977a	00						.byte 0
>977b	46 43 6f 74			L1:	.text "FCot"	;  name of word as a string, ending at wh_NameLastChar
>977f	84					.byte (("FCot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9780	90 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9782	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9783	08					.byte NN	;wh_Flags	dictionary flags
=38655					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9784	20 15 97	jsr $9715	FCot:		jsr FTan
.9787	4c 75 8d	jmp $8d75			jmp F1Slash	; =1/TAN(r1)
=6					CL	.var *-(WordListLink+wh_Xt)
=$978a					en = *	; remember here
>9782	06					.byte CL	;wh_CodeLength
>978a	46 41 43 6f 73			L1:	.text "FACos"	;  name of word as a string, ending at wh_NameLastChar
>978f	65					.byte (("FACos"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9790	ff 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9792	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9793	08					.byte NN	;wh_Flags	dictionary flags
=38671					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9794	a4 4c		ldy $4c		FACos:		ldy fp
.9796	b9 57 00	lda $0057,y			lda FSMant0,y
.9799	08		php				php			; save sign
.979a	20 de 8b	jsr $8bde			jsr FAbs
.979d	a9 c0		lda #$c0			lda #<_c
.979f	a0 97		ldy #$97			ldy #>_c
.97a1	20 71 94	jsr $9471			jsr FMPolyYA
.97a4	20 cb 85	jsr $85cb			jsr FSwap
.97a7	20 b7 8b	jsr $8bb7			jsr FNegate
.97aa	20 73 8b	jsr $8b73			jsr F1Plus
.97ad	20 54 8f	jsr $8f54			jsr FSqrt
.97b0	20 12 8c	jsr $8c12			jsr FStar
.97b3	28		plp				plp			; was r1 negative?
.97b4	10 09		bpl $97bf			bpl +
.97b6	20 18 89	jsr $8918			jsr FPi
.97b9	20 cb 85	jsr $85cb			jsr FSwap
.97bc	20 80 8b	jsr $8b80			jsr FMinus
.97bf					+
=43					CL	.var *-(WordListLink+wh_Xt)
=$97bf					en = *	; remember here
>9792	2b					.byte CL	;wh_CodeLength
.97bf	60		rts				rts
.97c0					_c:
>97c0	8b 5e 9f 4b					.dword $4B9F5E8B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97c4	f8						.char -8		; 8 bit signed exponent.  $00 = 2**0
>97c5	ad cc 29 a4					.dword $A429CCAD	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97c9	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>97ca	98 a1 a3 6e					.dword $6EA3A198	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97ce	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>97cf	5a 10 e1 9b					.dword $9BE1105A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97d3	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>97d4	c6 71 ea 5a					.dword $5AEA71C6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97d8	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>97d9	e0 56 21 92					.dword $922156E0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97dd	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>97de	41 ed 87 64					.dword $6487ED41	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97e2	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>97e3	00						.byte 0
>97e4	46 41 53 65 63			L1:	.text "FASec"	;  name of word as a string, ending at wh_NameLastChar
>97e9	65					.byte (("FASec"[-1]&7)<<5)+(*-L1)	;wh_HNL
>97ea	0f 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>97ec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>97ed	08					.byte NN	;wh_Flags	dictionary flags
=38761					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.97ee	20 75 8d	jsr $8d75	FASec:		jsr F1Slash
.97f1	4c 94 97	jmp $9794			jmp FACos
=6					CL	.var *-(WordListLink+wh_Xt)
=$97f4					en = *	; remember here
>97ec	06					.byte CL	;wh_CodeLength
>97f4	46 41 53 69 6e			L1:	.text "FASin"	;  name of word as a string, ending at wh_NameLastChar
>97f9	c5					.byte (("FASin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>97fa	69 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>97fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>97fd	08					.byte NN	;wh_Flags	dictionary flags
=38777					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.97fe	20 94 97	jsr $9794	FASin:		jsr FACos
.9801	20 b7 8b	jsr $8bb7			jsr FNegate
.9804	20 29 89	jsr $8929			jsr FPiH
.9807	4c 3e 8b	jmp $8b3e			jmp FPlus
=12					CL	.var *-(WordListLink+wh_Xt)
=$980a					en = *	; remember here
>97fc	0c					.byte CL	;wh_CodeLength
>980a	46 41 43 73 63			L1:	.text "FACsc"	;  name of word as a string, ending at wh_NameLastChar
>980f	65					.byte (("FACsc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9810	79 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9812	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9813	08					.byte NN	;wh_Flags	dictionary flags
=38799					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9814	20 75 8d	jsr $8d75	FACsc:		jsr F1Slash
.9817	4c fe 97	jmp $97fe			jmp FASin
=6					CL	.var *-(WordListLink+wh_Xt)
=$981a					en = *	; remember here
>9812	06					.byte CL	;wh_CodeLength
>981a	46 41 54 61 6e			L1:	.text "FATan"	;  name of word as a string, ending at wh_NameLastChar
>981f	c5					.byte (("FATan"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9820	8f 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9822	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9823	08					.byte NN	;wh_Flags	dictionary flags
=38815					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9824					FATan:
.9824	a4 4c		ldy $4c				ldy fp
.9826	b9 4d 00	lda $004d,y			lda FSExp,y		; Abs(r1)<1 ?
.9829	30 1b		bmi $9846			bmi FATanM
.982b	f0 19		beq $9846			beq FATanM
.982d	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.9830	08		php				php
.9831	20 75 8d	jsr $8d75			jsr F1Slash
.9834	20 46 98	jsr $9846			jsr FATanM
.9837	20 b7 8b	jsr $8bb7			jsr FNegate
.983a	20 29 89	jsr $8929			jsr FPiH
.983d	28		plp				plp
.983e	10 03		bpl $9843			bpl _18
.9840	20 b7 8b	jsr $8bb7			jsr FNegate
.9843	4c 3e 8b	jmp $8b3e	_18:		jmp FPlus
.9846	20 43 85	jsr $8543	FATanM:		jsr FDup		; x x
.9849	20 a3 8c	jsr $8ca3			jsr FSqr		; x xsqr
.984c	a9 5c		lda #$5c			lda #<_c
.984e	a0 98		ldy #$98			ldy #>_c
.9850	20 71 94	jsr $9471			jsr FMPolyYA
.9853	20 12 8c	jsr $8c12			jsr FStar		; x poly
.9856	20 73 8b	jsr $8b73			jsr F1Plus		; x poly
.9859	4c 12 8c	jmp $8c12			jmp FStar
.985c					_c:
>985c	98 08 2d 76					.dword $762D0898	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9860	f9						.char -7		; 8 bit signed exponent.  $00 = 2**0
>9861	55 a1 32 b8					.dword $B832A155	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9865	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9866	a8 d7 a2 53					.dword $53A2D7A8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>986a	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>986b	be 91 85 bb					.dword $BB8591BE	; 32 bit signed binary mantissa.  $40000000 = +0.5
>986f	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9870	06 65 aa 65					.dword $65AA6506	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9874	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9875	12 21 b0 aa					.dword $AAB02112	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9879	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>987a	00						.byte 0
>987b	46 41 43 6f 74			L1:	.text "FACot"	;  name of word as a string, ending at wh_NameLastChar
>9880	85					.byte (("FACot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9881	9f 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9883	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9884	08					.byte NN	;wh_Flags	dictionary flags
=38912					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9885	20 75 8d	jsr $8d75	FACot:		jsr F1Slash
.9888	4c 24 98	jmp $9824			jmp FATan
=6					CL	.var *-(WordListLink+wh_Xt)
=$988b					en = *	; remember here
>9883	06					.byte CL	;wh_CodeLength
>988b	46 41 54 61 6e 32		L1:	.text "FATan2"	;  name of word as a string, ending at wh_NameLastChar
>9891	46					.byte (("FATan2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9892	00 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9894	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9895	08					.byte NN	;wh_Flags	dictionary flags
=38929					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9896	a4 4c		ldy $4c		FATan2:		ldy fp
.9898	b9 57 00	lda $0057,y			lda FSMant0+0,y	; get rx sign
.989b	f0 1c		beq $98b9			beq _rxzero
.989d	0a		asl a				asl a		;   C=rx sign
.989e	b9 58 00	lda $0058,y			lda FSMant0+1,y	;   N=ry sign
.98a1	08		php				php		; save signs
.98a2	20 d0 8c	jsr $8cd0			jsr FSlash
.98a5	20 24 98	jsr $9824			jsr FATan
.98a8	28		plp				plp		; pop signs
.98a9	b0 01		bcs $98ac			bcs _rxneg
.98ab	60		rts		_rts:		rts
.98ac	08		php		_rxneg:		php
.98ad	20 18 89	jsr $8918			jsr FPi
.98b0	28		plp				plp
.98b1	10 03		bpl $98b6			bpl +
.98b3	20 b7 8b	jsr $8bb7			jsr FNegate
.98b6	4c 3e 8b	jmp $8b3e	+		jmp FPlus
.98b9	e6 4c		inc $4c		_rxzero:	inc fp		; FDrop rx
.98bb	b9 57 00	lda $0057,y			lda FSMant0,y
.98be	08		php				php
.98bf	e6 4c		inc $4c				inc fp		; FDrop ry
.98c1	20 29 89	jsr $8929			jsr FPiH
.98c4	28		plp				plp
.98c5	10 e4		bpl $98ab			bpl _rts
.98c7	4c b7 8b	jmp $8bb7			jmp FNegate
=52					CL	.var *-(WordListLink+wh_Xt)
=$98ca					en = *	; remember here
>9894	34					.byte CL	;wh_CodeLength
>98ca	46 53 67 6e			L1:	.text "FSgn"	;  name of word as a string, ending at wh_NameLastChar
>98ce	c4					.byte (("FSgn"[-1]&7)<<5)+(*-L1)	;wh_HNL
>98cf	11 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>98d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>98d2	08					.byte NN	;wh_Flags	dictionary flags
=38990					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.98d3	a4 4c		ldy $4c		FSgn:		ldy fp
.98d5	b9 57 00	lda $0057,y			lda FSMant0,y
.98d8	f0 0a		beq $98e4			beq _zero
.98da	e6 4c		inc $4c				inc fp
.98dc	b9 57 00	lda $0057,y			lda FSMant0,y
.98df	30 04		bmi $98e5			bmi FM1
.98e1	4c fb 88	jmp $88fb			jmp F1
.98e4	60		rts		_zero:		rts
=18					CL	.var *-(WordListLink+wh_Xt)
=$98e5					en = *	; remember here
>98d1	12					.byte CL	;wh_CodeLength
.98e5	a9 80		lda #$80	FM1:		lda #$80
.98e7	a0 00		ldy #$00			ldy #0
.98e9	4c a5 88	jmp $88a5			jmp FLitYA
>98ec	46 53 69 6e 48			L1:	.text "FSinH"	;  name of word as a string, ending at wh_NameLastChar
>98f1	05					.byte (("FSinH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>98f2	4e 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>98f4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>98f5	08					.byte NN	;wh_Flags	dictionary flags
=39025					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.98f6	20 43 85	jsr $8543	FSinH:		jsr FDup
.98f9	20 a0 95	jsr $95a0			jsr FExp
.98fc	20 cb 85	jsr $85cb			jsr FSwap
.98ff	20 b7 8b	jsr $8bb7			jsr FNegate
.9902	20 a0 95	jsr $95a0			jsr FExp
.9905	20 80 8b	jsr $8b80			jsr FMinus
.9908	4c b9 89	jmp $89b9			jmp F2Slash
=21					CL	.var *-(WordListLink+wh_Xt)
=$990b					en = *	; remember here
>98f4	15					.byte CL	;wh_CodeLength
>990b	46 43 73 63 48			L1:	.text "FCscH"	;  name of word as a string, ending at wh_NameLastChar
>9910	05					.byte (("FCscH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9911	71 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9913	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9914	08					.byte NN	;wh_Flags	dictionary flags
=39056					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9915	20 f6 98	jsr $98f6	FCscH:		jsr FSinH
.9918	4c 75 8d	jmp $8d75			jmp F1Slash
=6					CL	.var *-(WordListLink+wh_Xt)
=$991b					en = *	; remember here
>9913	06					.byte CL	;wh_CodeLength
>991b	46 43 6f 73 48			L1:	.text "FCosH"	;  name of word as a string, ending at wh_NameLastChar
>9920	05					.byte (("FCosH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9921	90 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9923	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9924	08					.byte NN	;wh_Flags	dictionary flags
=39072					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9925	20 43 85	jsr $8543	FCosH:		jsr FDup
.9928	20 a0 95	jsr $95a0			jsr FExp
.992b	20 cb 85	jsr $85cb			jsr FSwap
.992e	20 b7 8b	jsr $8bb7			jsr FNegate
.9931	20 a0 95	jsr $95a0			jsr FExp
.9934	20 3e 8b	jsr $8b3e			jsr FPlus
.9937	4c b9 89	jmp $89b9			jmp F2Slash
=21					CL	.var *-(WordListLink+wh_Xt)
=$993a					en = *	; remember here
>9923	15					.byte CL	;wh_CodeLength
>993a	46 53 65 63 48			L1:	.text "FSecH"	;  name of word as a string, ending at wh_NameLastChar
>993f	05					.byte (("FSecH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9940	a0 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9942	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9943	08					.byte NN	;wh_Flags	dictionary flags
=39103					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9944	20 25 99	jsr $9925	FSecH:		jsr FCosH
.9947	4c 75 8d	jmp $8d75			jmp F1Slash
=6					CL	.var *-(WordListLink+wh_Xt)
=$994a					en = *	; remember here
>9942	06					.byte CL	;wh_CodeLength
>994a	46 54 61 6e 48			L1:	.text "FTanH"	;  name of word as a string, ending at wh_NameLastChar
>994f	05					.byte (("FTanH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9950	bf 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9952	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9953	08					.byte NN	;wh_Flags	dictionary flags
=39119					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9954	20 43 85	jsr $8543	FTanH:		jsr FDup
.9957	20 b7 8b	jsr $8bb7			jsr FNegate	; X -X
.995a	20 a0 95	jsr $95a0			jsr FExp	; X Exp(-X)
.995d	20 cb 85	jsr $85cb			jsr FSwap	; Exp(-X) X
.9960	20 a0 95	jsr $95a0			jsr FExp	; Exp(-X) Exp(X)
.9963	20 67 85	jsr $8567			jsr FOver	; Exp(-X) Exp(X) Exp(-X)
.9966	20 3e 8b	jsr $8b3e			jsr FPlus	; Exp(-X) Exp(X)+Exp(-X)
.9969	20 d0 8c	jsr $8cd0			jsr FSlash	; Exp(-X)/(Exp(X)+Exp(-X))
.996c	20 ad 89	jsr $89ad			jsr F2Star	; Exp(-X)/(Exp(X)+Exp(-X))*2
.996f	20 b7 8b	jsr $8bb7			jsr FNegate
.9972	4c 73 8b	jmp $8b73			jmp F1Plus
=33					CL	.var *-(WordListLink+wh_Xt)
=$9975					en = *	; remember here
>9952	21					.byte CL	;wh_CodeLength
>9975	46 43 6f 74 48			L1:	.text "FCotH"	;  name of word as a string, ending at wh_NameLastChar
>997a	05					.byte (("FCotH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>997b	cf 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>997d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>997e	08					.byte NN	;wh_Flags	dictionary flags
=39162					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.997f	20 54 99	jsr $9954	FCotH:		jsr FTanH
.9982	4c 75 8d	jmp $8d75			jmp F1Slash
=6					CL	.var *-(WordListLink+wh_Xt)
=$9985					en = *	; remember here
>997d	06					.byte CL	;wh_CodeLength
>9985	46 41 53 69 6e 48		L1:	.text "FASinH"	;  name of word as a string, ending at wh_NameLastChar
>998b	06					.byte (("FASinH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>998c	fa 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>998e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>998f	08					.byte NN	;wh_Flags	dictionary flags
=39179					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9990	20 43 85	jsr $8543	FASinH:		jsr FDup	; X X
.9993	20 a3 8c	jsr $8ca3			jsr FSqr	; X X*X
.9996	20 73 8b	jsr $8b73			jsr F1Plus	; X X*X+1
.9999	20 54 8f	jsr $8f54			jsr FSqrt	; X sqrt(X*X+1)
.999c	20 3e 8b	jsr $8b3e			jsr FPlus	;
.999f	4c 0e 95	jmp $950e			jmp FLn
=18					CL	.var *-(WordListLink+wh_Xt)
=$99a2					en = *	; remember here
>998e	12					.byte CL	;wh_CodeLength
>99a2	46 41 43 73 63 48		L1:	.text "FACscH"	;  name of word as a string, ending at wh_NameLastChar
>99a8	06					.byte (("FACscH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>99a9	0b 99					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>99ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>99ac	08					.byte NN	;wh_Flags	dictionary flags
=39208					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.99ad	20 75 8d	jsr $8d75	FACscH:		jsr F1Slash
.99b0	4c 90 99	jmp $9990			jmp FASinH
=6					CL	.var *-(WordListLink+wh_Xt)
=$99b3					en = *	; remember here
>99ab	06					.byte CL	;wh_CodeLength
>99b3	46 41 43 6f 73 48		L1:	.text "FACosH"	;  name of word as a string, ending at wh_NameLastChar
>99b9	06					.byte (("FACosH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>99ba	28 99					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>99bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>99bd	08					.byte NN	;wh_Flags	dictionary flags
=39225					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.99be	20 43 85	jsr $8543	FACosH:		jsr FDup
.99c1	20 a3 8c	jsr $8ca3			jsr FSqr
.99c4	20 a5 8b	jsr $8ba5			jsr F1Minus
.99c7	20 54 8f	jsr $8f54			jsr FSqrt
.99ca	20 3e 8b	jsr $8b3e			jsr FPlus
.99cd	4c 0e 95	jmp $950e			jmp FLn
=18					CL	.var *-(WordListLink+wh_Xt)
=$99d0					en = *	; remember here
>99bc	12					.byte CL	;wh_CodeLength
>99d0	46 41 53 65 63 48		L1:	.text "FASecH"	;  name of word as a string, ending at wh_NameLastChar
>99d6	06					.byte (("FASecH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>99d7	39 99					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>99d9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>99da	08					.byte NN	;wh_Flags	dictionary flags
=39254					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.99db	20 75 8d	jsr $8d75	FASecH:		jsr F1Slash
.99de	4c be 99	jmp $99be			jmp FACosH
=6					CL	.var *-(WordListLink+wh_Xt)
=$99e1					en = *	; remember here
>99d9	06					.byte CL	;wh_CodeLength
>99e1	46 41 54 61 6e 48		L1:	.text "FATanH"	;  name of word as a string, ending at wh_NameLastChar
>99e7	06					.byte (("FATanH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>99e8	56 99					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>99ea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>99eb	08					.byte NN	;wh_Flags	dictionary flags
=39271					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.99ec	20 43 85	jsr $8543	FAtanH:		jsr FDup	; x x
.99ef	20 73 8b	jsr $8b73			jsr F1Plus	; x x+1
.99f2	20 cb 85	jsr $85cb			jsr FSwap	; 1+x x
.99f5	20 fb 88	jsr $88fb			jsr F1
.99f8	20 cb 85	jsr $85cb			jsr FSwap
.99fb	20 80 8b	jsr $8b80			jsr FMinus	; 1+x 1-x
.99fe	20 d0 8c	jsr $8cd0			jsr FSlash	; (1+x)/(1-x)
.9a01	20 0e 95	jsr $950e			jsr FLn
.9a04	4c b9 89	jmp $89b9			jmp F2Slash
=27					CL	.var *-(WordListLink+wh_Xt)
=$9a07					en = *	; remember here
>99ea	1b					.byte CL	;wh_CodeLength
>9a07	46 41 43 6f 74 48		L1:	.text "FACotH"	;  name of word as a string, ending at wh_NameLastChar
>9a0d	06					.byte (("FACotH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9a0e	67 99					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9a10	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9a11	08					.byte NN	;wh_Flags	dictionary flags
=39309					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9a12	20 75 8d	jsr $8d75	FACotH: 	jsr F1Slash
.9a15	4c ec 99	jmp $99ec			jmp FATanH
=6					CL	.var *-(WordListLink+wh_Xt)
=$9a18					en = *	; remember here
>9a10	06					.byte CL	;wh_CodeLength
>9a18	45 64				L1:	.text "Ed"	;  name of word as a string, ending at wh_NameLastChar
>9a1a	82					.byte (("Ed"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9a1b	8d 99					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9a1d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9a1e	08					.byte NN	;wh_Flags	dictionary flags
=39322					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9a1f	4c 22 9a	jmp $9a22	Ed:		jmp ed6502
=3					CL	.var *-(WordListLink+wh_Xt)
=$9a22					en = *	; remember here
>9a1d	03					.byte CL	;wh_CodeLength
=$1e					ed_head	 = editor1  ; pointer to first list element (addr) (2 bytes)
=$20					ed_cur	 = editor2  ; current line number (1 is first line) (2 bytes)
=$22					ed_flags = editor3  ; Flags used by ed, where
.9a22					ed6502:
.9a22	ad 00 03	lda $0300			lda base
.9a25	85 23		sta $23				sta editor3+1
.9a27	20 a4 b2	jsr $b2a4			jsr Decimal
.9a2a	a9 00		lda #$00			lda #0
.9a2c	85 1e		sta $1e				sta ed_head
.9a2e	85 1f		sta $1f				sta ed_head+1
.9a30	85 20		sta $20				sta ed_cur
.9a32	85 21		sta $21				sta ed_cur+1
.9a34	85 22		sta $22				sta ed_flags
.9a36	20 fa b8	jsr $b8fa			jsr Zero
.9a39	20 fa b8	jsr $b8fa			jsr Zero		; ( addr-t u-t )
.9a3c	20 28 ac	jsr $ac28			jsr CR
.9a3f					ed_input_loop:
.9a3f	a9 7e		lda #$7e			lda #$ff-%10000001
.9a41	25 22		and $22				and ed_flags
.9a43	85 22		sta $22				sta ed_flags
.9a45	20 e7 9e	jsr $9ee7			jsr ed_get_input
.9a48	a5 06		lda $06				lda ciblen+0
.9a4a	d0 1e		bne $9a6a			bne _command_mode
.9a4c	a5 20		lda $20				lda ed_cur+0
.9a4e	a4 21		ldy $21				ldy ed_cur+1
.9a50	20 b9 b8	jsr $b8b9			jsr PushYA		; ( addr-t u-t u )
.9a53	a9 80		lda #$80			lda #%10000000
.9a55	05 22		ora $22				ora ed_flags
.9a57	85 22		sta $22				sta ed_flags
.9a59	20 60 cb	jsr $cb60			jsr One_Plus		; ( addr-t u-t u+1 )
.9a5c	20 02 9f	jsr $9f02			jsr ed_is_valid_line
.9a5f	b0 03		bcs $9a64			bcs +
.9a61	4c d7 9e	jmp $9ed7			jmp ed_error_1drop	; New line number is not legal, abort
.9a64					+
.9a64	20 fa b8	jsr $b8fa			jsr Zero		; ( addr-t u-t u+1 0 )
.9a67	4c 29 9b	jmp $9b29			jmp _line_number_only_from_external
.9a6a					_command_mode:
.9a6a	20 fa b8	jsr $b8fa			jsr Zero		; parameter 1 is NOS ( addr-t u-t 0 )
.9a6d	20 fa b8	jsr $b8fa			jsr Zero		; parameter 2 is TOS ( addr-t u-t 0 0 )
.9a70	a0 00		ldy #$00			ldy #0			; get char
.9a72	b1 04		lda ($04),y			lda (cib),y
.9a74	c9 2e		cmp #$2e			cmp #'.'
.9a76	d0 31		bne $9aa9			bne _prefix_dollar
.9a78	20 f6 9e	jsr $9ef6			jsr ed_have_text
.9a7b	a5 20		lda $20				lda ed_cur
.9a7d	95 26		sta $26,x			sta DStack+2,x
.9a7f	a5 21		lda $21				lda ed_cur+1
.9a81	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9a83	a9 80		lda #$80			lda #%10000000
.9a85	05 22		ora $22				ora ed_flags
.9a87	85 22		sta $22				sta ed_flags
.9a89	a5 06		lda $06				lda ciblen
.9a8b	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9a8d	d0 03		bne $9a92			bne +
.9a8f	4c 29 9b	jmp $9b29			jmp _line_number_only_from_external
.9a92					+
.9a92	a5 04		lda $04				lda cib+0
.9a94	a4 05		ldy $05				ldy cib+1
.9a96	20 b9 b8	jsr $b8b9			jsr PushYA
.9a99	a5 06		lda $06				lda ciblen+0
.9a9b	a4 07		ldy $07				ldy ciblen+1
.9a9d	20 b9 b8	jsr $b8b9			jsr PushYA
.9aa0	20 3a cb	jsr $cb3a			jsr One_Minus		; ( addr-t u-t para1 0 addr u-1 )
.9aa3	20 6a cb	jsr $cb6a			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr+1 u-1 )
.9aa6	4c 7b 9b	jmp $9b7b			jmp _check_for_para2
.9aa9					_prefix_dollar:
.9aa9	c9 24		cmp #$24			cmp #'$'
.9aab	d0 1f		bne $9acc			bne _prefix_percent
.9aad	20 f6 9e	jsr $9ef6			jsr ed_have_text
.9ab0	e8		inx				inx
.9ab1	e8		inx				inx			; ( addr-t u-t 0 )
.9ab2	20 23 9f	jsr $9f23			jsr ed_last_line	; ( addr-t u-t 0 para1 )
.9ab5	20 9e d0	jsr $d09e			jsr Swap		; ( addr-t u-t para1 0 )
.9ab8	a9 80		lda #$80			lda #%10000000
.9aba	05 22		ora $22				ora ed_flags
.9abc	85 22		sta $22				sta ed_flags
.9abe	a5 06		lda $06				lda ciblen
.9ac0	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9ac2	d0 03		bne $9ac7			bne +
.9ac4	4c 29 9b	jmp $9b29			jmp _line_number_only_from_external
.9ac7					+
.9ac7	a0 01		ldy #$01			ldy #1
.9ac9	4c f1 9b	jmp $9bf1			jmp _check_command
.9acc					_prefix_percent:
.9acc	c9 25		cmp #$25			cmp #'%'
.9ace	f0 04		beq $9ad4			beq _whole_text
.9ad0	c9 2c		cmp #$2c			cmp #','
.9ad2	d0 1b		bne $9aef			bne _prefix_semicolon
.9ad4					_whole_text:
.9ad4	20 f6 9e	jsr $9ef6			jsr ed_have_text
.9ad7	a9 01		lda #$01			lda #1
.9ad9	95 26		sta $26,x			sta DStack+2,x		; LSB of NOS is para 1
.9adb	a9 00		lda #$00			lda #0
.9add	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t para1 0 )
.9adf					_semicolon_entry:
.9adf	e8		inx				inx
.9ae0	e8		inx				inx			; DROP ( addr-t u-t para1 )
.9ae1	20 23 9f	jsr $9f23			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9ae4	a9 80		lda #$80			lda #%10000000
.9ae6	05 22		ora $22				ora ed_flags
.9ae8	85 22		sta $22				sta ed_flags
.9aea	a0 01		ldy #$01			ldy #1
.9aec	4c f1 9b	jmp $9bf1			jmp _check_command
.9aef					_prefix_semicolon:
.9aef	c9 3b		cmp #$3b			cmp #';'
.9af1	d0 0e		bne $9b01			bne _prefix_number
.9af3	20 f6 9e	jsr $9ef6			jsr ed_have_text
.9af6	a5 20		lda $20				lda ed_cur
.9af8	95 26		sta $26,x			sta DStack+2,x
.9afa	a5 21		lda $21				lda ed_cur+1
.9afc	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9afe	4c df 9a	jmp $9adf			jmp _semicolon_entry
.9b01					_prefix_number:
.9b01	20 fa b8	jsr $b8fa			jsr Zero
.9b04	20 fa b8	jsr $b8fa			jsr Zero		; ( addr-t u-t 0 0 0 0 )
.9b07	a5 04		lda $04				lda cib+0
.9b09	a4 05		ldy $05				ldy cib+1
.9b0b	20 b9 b8	jsr $b8b9			jsr PushYA
.9b0e	a5 06		lda $06				lda ciblen+0
.9b10	a4 07		ldy $07				ldy ciblen+1
.9b12	20 b9 b8	jsr $b8b9			jsr PushYA		; ( addr-t u-t 0 0 0 0 cib ciblen )
.9b15	20 25 b1	jsr $b125			jsr To_Number		; ( addr-t u-t 0 0 ud addr2 u2 )
.9b18	b5 24		lda $24,x			lda DStack+0,x
.9b1a	15 25		ora $25,x			ora DStack+1,x
.9b1c	d0 25		bne $9b43			bne _have_unconverted_chars
.9b1e	20 05 c6	jsr $c605			jsr Two_Drop		; ( addr-t u-t 0 0 ud )
.9b21	20 32 c1	jsr $c132			jsr D_To_S		; ( addr-t u-t 0 0 u )
.9b24	20 aa cf	jsr $cfaa			jsr Not_Rot		; ( addr-t u-t u 0 0 )
.9b27	e8		inx				inx
.9b28	e8		inx				inx			; ( addr-t u-t u 0 ) drop through
.9b29					_line_number_only_from_external:
.9b29	20 9e d0	jsr $d09e			jsr Swap		; ( addr-t u-t 0 u )
.9b2c	20 02 9f	jsr $9f02			jsr ed_is_valid_line
.9b2f	b0 03		bcs $9b34			bcs +
.9b31	4c d5 9e	jmp $9ed5			jmp ed_error_2drop
.9b34					+
.9b34	20 9e d0	jsr $d09e			jsr Swap		; ( addr-t u-t u 0 )
.9b37	20 62 9f	jsr $9f62			jsr ed_para1_to_cur
.9b3a	a9 80		lda #$80			lda #%10000000
.9b3c	05 22		ora $22				ora ed_flags
.9b3e	85 22		sta $22				sta ed_flags
.9b40	4c c0 9d	jmp $9dc0			jmp ed_cmd_p_from_external
.9b43					_have_unconverted_chars:
.9b43	a5 06		lda $06				lda ciblen+0
.9b45	d5 24		cmp $24,x			cmp DStack+0,x
.9b47	d0 16		bne $9b5f			bne _no_command_yet
.9b49	a5 07		lda $07				lda ciblen+1
.9b4b	d5 25		cmp $25,x			cmp DStack+1,x
.9b4d	d0 10		bne $9b5f			bne _no_command_yet
.9b4f	8a		txa				txa
.9b50	18		clc				clc
.9b51	69 08		adc #$08			adc #8
.9b53	aa		tax				tax			; ( addr-t u-t 0 0 )
.9b54	a9 7f		lda #$7f			lda #$ff-%10000000
.9b56	25 22		and $22				and ed_flags
.9b58	85 22		sta $22				sta ed_flags
.9b5a	a0 00		ldy #$00			ldy #0
.9b5c	4c f1 9b	jmp $9bf1			jmp _check_command
.9b5f					_no_command_yet:
.9b5f	20 05 d0	jsr $d005			jsr To_R		; >R ( ... 0 0 ud addr2 ) (R: u2)
.9b62	20 aa cf	jsr $cfaa			jsr Not_Rot		; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.9b65	20 32 c1	jsr $c132			jsr D_To_S		; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.9b68	b5 24		lda $24,x			lda DStack+0,x		; LSB
.9b6a	95 2a		sta $2a,x			sta DStack+6,x
.9b6c	b5 25		lda $25,x			lda DStack+1,x		; MSB
.9b6e	95 2b		sta $2b,x			sta DStack+7,x		; ( ... para1 0 addr2 para1 ) (R: u2)
.9b70	e8		inx				inx
.9b71	e8		inx				inx			; ( addr-t u-t para1 0 addr2 ) (R: u2)
.9b72	20 24 d0	jsr $d024			jsr R_From		; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.9b75	a9 80		lda #$80			lda #%10000000
.9b77	05 22		ora $22				ora ed_flags
.9b79	85 22		sta $22				sta ed_flags
.9b7b					_check_for_para2:
.9b7b	a1 26		lda ($26,x)			lda (DStack+2,x)
.9b7d	c9 2c		cmp #$2c			cmp #','
.9b7f	f0 0c		beq $9b8d			beq _got_comma
.9b81	38		sec				sec
.9b82	a5 06		lda $06				lda ciblen
.9b84	f5 24		sbc $24,x			sbc DStack+0,x
.9b86	a8		tay				tay
.9b87	20 05 c6	jsr $c605			jsr Two_Drop		; Remove the leftover stuff from >NUMBER
.9b8a	4c f1 9b	jmp $9bf1			jmp _check_command
.9b8d					_got_comma:
.9b8d	20 6a cb	jsr $cb6a			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr2+1 u2 )
.9b90	20 3a cb	jsr $cb3a			jsr One_Minus		; ( addr-t u-t para1 0 addr2+1 u2-1 )
.9b93	a1 26		lda ($26,x)			lda (DStack+2,x)
.9b95	c9 24		cmp #$24			cmp #'$'
.9b97	d0 16		bne $9baf			bne _para2_not_dollar
.9b99	38		sec				sec
.9b9a	a5 06		lda $06				lda ciblen
.9b9c	f5 26		sbc $26,x			sbc DStack+2,x
.9b9e	a8		tay				tay
.9b9f	c8		iny				iny
.9ba0	98		tya				tya
.9ba1	48		pha				pha
.9ba2	8a		txa				txa
.9ba3	18		clc				clc
.9ba4	69 06		adc #$06			adc #6
.9ba6	aa		tax				tax			; ( addr-t u-t para1 )
.9ba7	20 23 9f	jsr $9f23			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9baa	68		pla				pla
.9bab	a8		tay				tay
.9bac	4c f1 9b	jmp $9bf1			jmp _check_command
.9baf					_para2_not_dollar:
.9baf	20 05 d0	jsr $d005			jsr To_R		; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.9bb2	20 fa b8	jsr $b8fa			jsr Zero		; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.9bb5	20 fa b8	jsr $b8fa			jsr Zero		; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.9bb8	20 84 cf	jsr $cf84			jsr Rot		; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.9bbb	20 24 d0	jsr $d024			jsr R_From		; R> ( ... para1 0 0 0 addr2+1 u2-1)
.9bbe	20 80 d0	jsr $d080			jsr Dup		; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.9bc1	20 05 d0	jsr $d005			jsr To_R		; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.9bc4	20 25 b1	jsr $b125			jsr To_Number	; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.9bc7	20 80 d0	jsr $d080			jsr Dup		; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.9bca	20 24 d0	jsr $d024			jsr R_From		; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.9bcd	20 28 c9	jsr $c928			jsr Equal		; = ( ... para1 0 ud addr3 u3 f )
.9bd0	b5 24		lda $24,x			lda DStack+0,x
.9bd2	15 25		ora $25,x			ora DStack+1,x
.9bd4	f0 08		beq $9bde			beq _second_number
.9bd6	8a		txa				txa
.9bd7	18		clc				clc
.9bd8	69 0c		adc #$0c			adc #12
.9bda	aa		tax				tax			; back to ( addr-t u-t )
.9bdb	4c d9 9e	jmp $9ed9			jmp ed_error
.9bde					_second_number:
.9bde	e8		inx				inx
.9bdf	e8		inx				inx			; ( addr-t u-t para1 0 ud addr3 u3 )
.9be0	38		sec				sec
.9be1	a5 06		lda $06				lda ciblen
.9be3	f5 24		sbc $24,x			sbc DStack+0,x
.9be5	48		pha				pha
.9be6	20 05 c6	jsr $c605			jsr Two_drop		; 2DROP ( addr-t u-t para1 0 ud )
.9be9	20 32 c1	jsr $c132			jsr D_To_S		; D>S  ( addr-t u-t para1 0 para2 )
.9bec	20 8c ca	jsr $ca8c			jsr Nip			; NIP ( addr-t u-t para1 para2 )
.9bef	68		pla				pla
.9bf0	a8		tay				tay
.9bf1					_check_command:
.9bf1	24 22		bit $22				bit ed_flags
.9bf3	30 08		bmi $9bfd			bmi _check_command_have_arg
.9bf5	a5 20		lda $20				lda ed_cur+0
.9bf7	95 26		sta $26,x			sta DStack+2,x
.9bf9	a5 21		lda $21				lda ed_cur+1
.9bfb	95 27		sta $27,x			sta DStack+3,x
.9bfd					_check_command_have_arg:
.9bfd	b1 04		lda ($04),y			lda (cib),y		; get mystery char from input
.9bff	85 14		sta $14				sta tmp1+0
.9c01	85 15		sta $15				sta tmp1+1		; We need X for awhile, so it has to
.9c03	a2 ff		ldx #$ff			ldx #$ff		; for each char
.9c05	e8		inx		_cmd_loop:	inx			;   next char
.9c06	bd 86 9f	lda $9f86,x			lda ed_cmd_list,x
.9c09	f0 13		beq $9c1e			beq _illegal_command	;   end of list?
.9c0b	c5 14		cmp $14				cmp tmp1+0
.9c0d	d0 f6		bne $9c05			bne _cmd_loop		;   not found?
.9c0f	8a		txa				txa
.9c10	0a		asl a				asl
.9c11	aa		tax				tax			; X * 2 for table
.9c12	bd 92 9f	lda $9f92,x			lda ed_cmd_table+1,x
.9c15	48		pha				pha
.9c16	bd 91 9f	lda $9f91,x			lda ed_Cmd_table+0,x
.9c19	48		pha				pha
.9c1a	a6 15		ldx $15				ldx tmp1+1		; restore X
.9c1c	08		php				php
.9c1d	40		rti				rti			; jump to command routine
.9c1e					_illegal_command:
.9c1e	4c d5 9e	jmp $9ed5			jmp ed_error_2drop
.9c21					ed_next_command:
.9c21	20 05 c6	jsr $c605			jsr Two_Drop		; ( addr-t u-t ) Fall through
.9c24					_next_command_empty:
.9c24	4c 3f 9a	jmp $9a3f			jmp ed_input_loop
.9c27					ed_all_done:
.9c27	a9 00		lda #$00			lda #0
.9c29	85 06		sta $06				sta ciblen
.9c2b	85 07		sta $07				sta ciblen+1
.9c2d	20 05 c6	jsr $c605			jsr Two_drop			; ( addr-t u-t )
.9c30	a5 23		lda $23				lda editor3+1
.9c32	8d 00 03	sta $0300			sta base
.9c35	60		rts				rts
.9c36					ed_cmd_a:
.9c36	e8		inx				inx
.9c37	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9c38					ed_entry_cmd_i:
.9c38					ed_cmd_a_have_para:
.9c38	20 47 9f	jsr $9f47			jsr ed_num_to_addr	  ;  ( addr-t u-t addr1 )
.9c3b	20 28 ac	jsr $ac28			jsr CR
.9c3e					_next_string_loop:
.9c3e	20 e7 9e	jsr $9ee7			jsr ed_get_input
.9c41	a0 00		ldy #$00			ldy #0
.9c43	b1 04		lda ($04),y			lda (cib),y
.9c45	c9 2e		cmp #$2e			cmp #'.'
.9c47	d0 18		bne $9c61			bne _add_line
.9c49	a4 06		ldy $06				ldy ciblen
.9c4b	c0 01		cpy #$01			cpy #1
.9c4d	d0 12		bne $9c61			bne _add_line
.9c4f	a4 07		ldy $07				ldy ciblen+1
.9c51	d0 0e		bne $9c61			bne _add_line
.9c53	e8		inx				inx
.9c54	e8		inx				inx
.9c55	a9 40		lda #$40			lda #%01000000
.9c57	05 22		ora $22				ora ed_flags
.9c59	85 22		sta $22				sta ed_flags
.9c5b	20 28 ac	jsr $ac28			jsr CR
.9c5e	4c 3f 9a	jmp $9a3f			jmp ed_input_loop
.9c61					_add_line:
.9c61	20 80 d0	jsr $d080			jsr Dup			; ( addr-t u-t addr1 addr1 )
.9c64	20 2c cb	jsr $cb2c			jsr Here		; ( addr-t u-t addr1 addr1 here )
.9c67	20 9e d0	jsr $d09e			jsr Swap		; ( addr-t u-t addr1 here addr1 )
.9c6a	20 ea cf	jsr $cfea			jsr Fetch		; ( addr-t u-t addr1 here addr2 )
.9c6d	20 20 ce	jsr $ce20			jsr Comma		; ( addr-t u-t addr1 here )
.9c70	20 e5 cd	jsr $cde5			jsr Tuck		; TUCK ( addr-t u-t here addr1 here )
.9c73	20 9e d0	jsr $d09e			jsr Swap		; ( addr-t u-t here here addr1 )
.9c76	20 cd cf	jsr $cfcd			jsr Store		; ( addr-t u-t here )
.9c79	20 2c cb	jsr $cb2c			jsr Here		; HERE ( addr-t u-t here here2)
.9c7c	a9 04		lda #$04			lda #4
.9c7e	20 eb b8	jsr $b8eb			jsr PushZA
.9c81	20 cc c1	jsr $c1cc			jsr Allot
.9c84	e6 20		inc $20				inc ed_cur
.9c86	d0 02		bne $9c8a			bne +
.9c88	e6 21		inc $21				inc ed_cur+1
.9c8a					+
.9c8a	20 2c cb	jsr $cb2c			jsr Here	; ( addr-t u-t here here2 here3 )
.9c8d	a5 04		lda $04				lda cib+0
.9c8f	a4 05		ldy $05				ldy cib+1
.9c91	20 b9 b8	jsr $b8b9			jsr PushYA	; ( addr-t u-t here here2 here3 cib )
.9c94	20 57 d0	jsr $d057			jsr Over	; ( addr-t u-t here here2 here3 cib here3 )
.9c97	a5 06		lda $06				lda ciblen+0
.9c99	a4 07		ldy $07				ldy ciblen+1
.9c9b	20 b9 b8	jsr $b8b9			jsr PushYA	; ( addr-t u-t here here2 here3 cib here3 ciblen )
.9c9e	20 45 ae	jsr $ae45			jsr Move	; ( addr-t u-t here here2 here3 )
.9ca1	18		clc				clc
.9ca2	a5 00		lda $00				lda cp
.9ca4	65 06		adc $06				adc ciblen
.9ca6	85 00		sta $00				sta cp
.9ca8	90 06		bcc $9cb0			bcc +
.9caa	a5 01		lda $01				lda cp+1
.9cac	65 07		adc $07				adc ciblen+1
.9cae	85 01		sta $01				sta cp+1
.9cb0					+
.9cb0	20 57 d0	jsr $d057			jsr Over		; ( addr-t u-t here here2 here3 here2 )
.9cb3	20 cd cf	jsr $cfcd			jsr Store		; ( addr-t u-t here here2 )
.9cb6	20 0d cb	jsr $cb0d			jsr Cell_Plus_NoUf	; ( addr-t u-t here here2+2 )
.9cb9	20 80 d0	jsr $d080			jsr Dup			; ( addr-t u-t here here2+2 here2+2 )
.9cbc	a5 06		lda $06				lda ciblen
.9cbe	95 26		sta $26,x			sta DStack+2,x
.9cc0	a5 07		lda $07				lda ciblen+1
.9cc2	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t here ciblen here2+2 )
.9cc4	20 cd cf	jsr $cfcd			jsr Store		; ( addr-t u-t here )
.9cc7	20 28 ac	jsr $ac28			jsr CR			; Add a line feed for visuals
.9cca	4c 3e 9c	jmp $9c3e			jmp _next_string_loop
.9ccd					ed_cmd_d:
.9ccd	20 f6 9e	jsr $9ef6			jsr ed_have_text
.9cd0	20 39 9f	jsr $9f39			jsr ed_no_line_zero
.9cd3	b5 24		lda $24,x			lda DStack+0,x
.9cd5	15 25		ora $25,x			ora DStack+1,x
.9cd7	d0 09		bne $9ce2			bne +
.9cd9	20 57 d0	jsr $d057			jsr Over		; ( addr-t u-t para1 0 para1 )
.9cdc	20 17 9d	jsr $9d17			jsr _cmd_d_common	; ( addr-t u-t para1 0 )
.9cdf	4c 0b 9d	jmp $9d0b			jmp _cmd_d_done
.9ce2					+
.9ce2	20 02 9f	jsr $9f02			jsr ed_is_valid_line	  ; result is in C flag
.9ce5	b0 03		bcs $9cea			bcs _cmd_d_loop
.9ce7	4c d5 9e	jmp $9ed5			jmp ed_error_2drop
.9cea					_cmd_d_loop:
.9cea	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9cec	d5 26		cmp $26,x			cmp DStack+2,x
.9cee	b5 25		lda $25,x			lda DStack+1,x
.9cf0	f5 27		sbc $27,x			sbc DStack+3,x
.9cf2	90 0c		bcc $9d00			bcc _cmd_d_done_with_flag
.9cf4	20 80 d0	jsr $d080			jsr Dup		; DUP ( addr-t u-t para1 para2 para2 )
.9cf7	20 17 9d	jsr $9d17			jsr _cmd_d_common	; ( addr-t u-t para1 para2 )
.9cfa	20 3a cb	jsr $cb3a			jsr One_minus	; 1- ( addr-t u-t para1 para2-1 )
.9cfd	4c ea 9c	jmp $9cea			jmp _cmd_d_loop
.9d00					_cmd_d_done_with_flag:
.9d00	20 46 cb	jsr $cb46			jsr NOS_One_Minus
.9d03	b5 26		lda $26,x			lda DStack+2,x
.9d05	85 20		sta $20				sta ed_cur
.9d07	b5 27		lda $27,x			lda DStack+3,x
.9d09	85 21		sta $21				sta ed_cur+1		; drop through to _cmd_d_done
.9d0b					_cmd_d_done:
.9d0b	a9 40		lda #$40			lda #%01000000
.9d0d	05 22		ora $22				ora ed_flags
.9d0f	85 22		sta $22				sta ed_flags
.9d11	20 28 ac	jsr $ac28			jsr CR
.9d14	4c 21 9c	jmp $9c21			jmp ed_next_command
.9d17					_cmd_d_common:
.9d17	20 80 d0	jsr $d080			jsr Dup			; ( addr-t u-t u u )
.9d1a	20 47 9f	jsr $9f47			jsr ed_num_to_addr	; ( addr-t u-t u addr )
.9d1d	20 ea cf	jsr $cfea			jsr Fetch		; ( addr-t u-t u addr1 )
.9d20	20 9e d0	jsr $d09e			jsr Swap		; ( addr-t u-t addr1 u )
.9d23	20 3a cb	jsr $cb3a			jsr One_minus		; ( addr-t u-t addr1 u-1 )
.9d26	20 47 9f	jsr $9f47			jsr ed_num_to_addr	; ( addr-t u-t addr1 addr-1 )
.9d29	4c cd cf	jmp $cfcd			jmp Store		; ( addr-t u-t )
.9d2c					ed_cmd_equ:
.9d2c	a5 1e		lda $1e				lda ed_head
.9d2e	05 1f		ora $1f				ora ed_head+1
.9d30	d0 06		bne $9d38			bne _cmd_equ_have_text
.9d32	20 fa b8	jsr $b8fa			jsr Zero		; ( addr-t u-t para1 para2 0 )
.9d35	4c 58 9d	jmp $9d58			jmp _cmd_equ_done
.9d38					_cmd_equ_have_text:
.9d38	20 39 9f	jsr $9f39			jsr ed_no_line_zero
.9d3b	24 22		bit $22				bit ed_flags
.9d3d	30 0a		bmi $9d49			bmi _cmd_equ_have_para
.9d3f	a5 20		lda $20				lda ed_cur+0		; ( addr-t u-t para1 para2 ? )
.9d41	a4 21		ldy $21				ldy ed_cur+1
.9d43	20 b9 b8	jsr $b8b9			jsr PushYA
.9d46	4c 58 9d	jmp $9d58			jmp _cmd_equ_done	; ( addr-t u-t para1 para2 cur )
.9d49					_cmd_equ_have_para:
.9d49	b5 24		lda $24,x			lda DStack+0,x
.9d4b	15 25		ora $25,x			ora DStack+1,x
.9d4d	d0 06		bne $9d55			bne _cmd_equ_two_paras
.9d4f	20 57 d0	jsr $d057			jsr Over		; ( addr-t u-t para1 para2 para1)
.9d52	4c 58 9d	jmp $9d58			jmp _cmd_equ_done
.9d55					_cmd_equ_two_paras:
.9d55	20 80 d0	jsr $d080			jsr Dup			; ( addr-t u-t para1 para2 para2) drop through
.9d58					_cmd_equ_done:
.9d58	20 28 ac	jsr $ac28			jsr CR			; number goes on new line
.9d5b	20 19 cd	jsr $cd19			jsr U_Dot		; ( addr-t u-t para1 para2 )
.9d5e	20 28 ac	jsr $ac28			jsr CR
.9d61	4c 21 9c	jmp $9c21			jmp ed_next_command
.9d64					ed_cmd_f:
.9d64	24 22		bit $22				bit ed_flags
.9d66	30 18		bmi $9d80			bmi _cmd_f_have_para
.9d68	20 28 ac	jsr $ac28			jsr CR
.9d6b	20 05 d0	jsr $d005			jsr To_R		; ( addr-t u-t 0 ) ( R: 0 )
.9d6e	20 84 cf	jsr $cf84			jsr Rot			; ( u-t 0 addr-t ) ( R: 0 )
.9d71	20 80 d0	jsr $d080			jsr Dup			; ( u-t 0 addr-t addr-t ) ( R: 0 )
.9d74	20 19 cd	jsr $cd19			jsr U_Dot		; ( u-t 0 addr-t ) ( R: 0 )
.9d77	20 aa cf	jsr $cfaa			jsr Not_Rot		; ( addr-t u-t 0 ) ( R: 0 )
.9d7a	20 24 d0	jsr $d024			jsr R_From		; ( addr-t u-t 0 0 )
.9d7d	4c 91 9d	jmp $9d91			jmp _cmd_f_done
.9d80					_cmd_f_have_para:
.9d80	20 57 d0	jsr $d057			jsr Over
.9d83	20 28 ac	jsr $ac28			jsr CR
.9d86	20 19 cd	jsr $cd19			jsr U_Dot
.9d89	b5 26		lda $26,x			lda DStack+2,x
.9d8b	95 2a		sta $2a,x			sta DStack+6,x
.9d8d	b5 27		lda $27,x			lda DStack+3,x
.9d8f	95 2b		sta $2b,x			sta DStack+7,x		; fall through to _cmd_f_done
.9d91					_cmd_f_done:
.9d91	20 28 ac	jsr $ac28			jsr CR
.9d94	4c 21 9c	jmp $9c21			jmp ed_next_command
.9d97					ed_cmd_i:
.9d97	e8		inx				inx
.9d98	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9d99	24 22		bit $22				bit ed_flags
.9d9b	30 08		bmi $9da5			bmi _cmd_i_have_para
.9d9d	a5 20		lda $20				lda ed_cur
.9d9f	95 24		sta $24,x			sta DStack+0,x
.9da1	a5 21		lda $21				lda ed_cur+1
.9da3	95 25		sta $25,x			sta DStack+1,x		;  ( addr-t u-t cur ) drop through
.9da5					_cmd_i_have_para:
.9da5	b5 24		lda $24,x			lda DStack+0,x
.9da7	15 25		ora $25,x			ora DStack+1,x
.9da9	f0 09		beq $9db4			beq _cmd_i_done
.9dab	20 3a cb	jsr $cb3a			jsr One_minus		; ( addr-t u-t para1-1 )
.9dae	20 fa b8	jsr $b8fa			jsr Zero		; ( addr-t u-t para1-1 0 )
.9db1	20 71 ca	jsr $ca71			jsr Max			; ( addr-t u-t para1-1 | 0 )
.9db4					_cmd_i_done:
.9db4	4c 38 9c	jmp $9c38			jmp ed_entry_cmd_i
.9db7					ed_cmd_n:
.9db7	a9 01		lda #$01			lda #%00000001
.9db9	05 22		ora $22				ora ed_flags
.9dbb	85 22		sta $22				sta ed_flags
.9dbd	4c c6 9d	jmp $9dc6			jmp ed_cmd_p_entry_for_cmd_n
.9dc0					ed_cmd_p:
.9dc0					ed_cmd_p_from_external:
.9dc0	a9 fe		lda #$fe			lda #$ff-%00000001
.9dc2	25 22		and $22				and ed_flags
.9dc4	85 22		sta $22				sta ed_flags
.9dc6					ed_cmd_p_entry_for_cmd_n:
.9dc6	20 f6 9e	jsr $9ef6			jsr ed_have_text
.9dc9	20 39 9f	jsr $9f39			jsr ed_no_line_zero
.9dcc	20 28 ac	jsr $ac28			jsr CR
.9dcf	b5 24		lda $24,x			lda DStack+0,x
.9dd1	15 25		ora $25,x			ora DStack+1,x
.9dd3	d0 11		bne $9de6			bne _cmd_p_loop
.9dd5	b5 26		lda $26,x			lda DStack+2,x
.9dd7	85 20		sta $20				sta ed_cur
.9dd9	b5 27		lda $27,x			lda DStack+3,x
.9ddb	85 21		sta $21				sta ed_cur+1
.9ddd	20 57 d0	jsr $d057			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9de0	20 07 9e	jsr $9e07			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9de3	4c 04 9e	jmp $9e04			jmp _cmd_p_all_done
.9de6					_cmd_p_loop:
.9de6	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9de8	d5 26		cmp $26,x			cmp DStack+2,x
.9dea	b5 25		lda $25,x			lda DStack+1,x
.9dec	f5 27		sbc $27,x			sbc DStack+3,x
.9dee	90 0c		bcc $9dfc			bcc _cmd_p_done
.9df0	20 57 d0	jsr $d057			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9df3	20 07 9e	jsr $9e07			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9df6	20 6a cb	jsr $cb6a			jsr NOS_One_Plus
.9df9	4c e6 9d	jmp $9de6			jmp _cmd_p_loop
.9dfc					_cmd_p_done:
.9dfc	b5 24		lda $24,x			lda DStack+0,x
.9dfe	85 20		sta $20				sta ed_cur
.9e00	b5 25		lda $25,x			lda DStack+1,x
.9e02	85 21		sta $21				sta ed_cur+1
.9e04					_cmd_p_all_done:
.9e04	4c 21 9c	jmp $9c21			jmp ed_next_command
.9e07					_cmd_p_common:
.9e07	a5 22		lda $22				lda ed_flags
.9e09	4a		lsr a				lsr			; bit 0 now in carry
.9e0a	90 0b		bcc $9e17			bcc _cmd_p_common_no_num
.9e0c	20 80 d0	jsr $d080			jsr Dup			; ( addr-t u-t para1 para1 )
.9e0f	20 19 cd	jsr $cd19			jsr U_Dot		; ( addr-t u-t para1 )
.9e12	a9 09		lda #$09			lda #AscHT
.9e14	20 ee ce	jsr $ceee			jsr Emit_A
.9e17					_cmd_p_common_no_num:
.9e17	20 47 9f	jsr $9f47			jsr ed_num_to_addr	  ; ( addr-t u-t addr )
.9e1a	4c 6b 9f	jmp $9f6b			jmp ed_print_addr
.9e1d					ed_cmd_q:
.9e1d	24 22		bit $22				bit ed_flags		; bit 6 is change flag
.9e1f	50 03		bvc $9e24			bvc +
.9e21	4c d5 9e	jmp $9ed5			jmp ed_error_2drop
.9e24					+
.9e24	4c 27 9c	jmp $9c27			jmp ed_all_done		   ; can't fall thru because of PLX
.9e27					ed_cmd_qq:
.9e27	4c 27 9c	jmp $9c27			jmp ed_all_done
.9e2a					ed_cmd_w:
.9e2a	20 f6 9e	jsr $9ef6			jsr ed_have_text
.9e2d	24 22		bit $22				bit ed_flags		; parameter given?
.9e2f	30 12		bmi $9e43			bmi _cmd_w_have_para
.9e31	b5 2b		lda $2b,x			lda DStack+7,x		; $0000 thru $00ff ?
.9e33	d0 03		bne $9e38			bne +
.9e35	4c d5 9e	jmp $9ed5			jmp ed_error_2drop
.9e38					+
.9e38	b5 2a		lda $2a,x			lda DStack+6,x
.9e3a	95 26		sta $26,x			sta DStack+2,x
.9e3c	b5 2b		lda $2b,x			lda DStack+7,x
.9e3e	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t addr-t ? )
.9e40	4c 4b 9e	jmp $9e4b			jmp _cmd_w_para_ready
.9e43					_cmd_w_have_para:
.9e43	b5 26		lda $26,x			lda DStack+2,x
.9e45	95 2a		sta $2a,x			sta DStack+6,x
.9e47	b5 27		lda $27,x			lda DStack+3,x
.9e49	95 2b		sta $2b,x			sta DStack+7,x		; drop through to _cmd_w_para_ready
.9e4b					_cmd_w_para_ready:
.9e4b	a9 1e		lda #$1e			lda #<ed_head
.9e4d	95 24		sta $24,x			sta DStack+0,x
.9e4f	a9 00		lda #$00			lda #>ed_head
.9e51	95 25		sta $25,x			sta DStack+1,x		; ( addr-t u-t addr-t addr-h )
.9e53	20 57 d0	jsr $d057			jsr Over		; ( addr-t u-t addr-t addr-h addr-t )
.9e56	20 05 d0	jsr $d005			jsr To_R		; ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.9e59					_cmd_w_loop:
.9e59	20 ea cf	jsr $cfea			jsr Fetch		; ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.9e5c	b5 24		lda $24,x			lda DStack+0,x
.9e5e	15 25		ora $25,x			ora DStack+1,x
.9e60	f0 4d		beq $9eaf			beq _cmd_w_eol
.9e62	20 c4 cd	jsr $cdc4			jsr Two_dup		; ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.9e65	20 3e c7	jsr $c73e			jsr Two_to_r		; ( addr-t addr-1 ) (R: ... )
.9e68	20 0d cb	jsr $cb0d			jsr Cell_Plus_NoUf	; ( addr-t addr1+2 ) (R: ... )
.9e6b	20 80 d0	jsr $d080			jsr Dup			; ( addr-t addr1+2 addr1+2 ) ( R: ... )
.9e6e	20 ea cf	jsr $cfea			jsr Fetch		; ( addr-t addr1+2 addr-s ) ( R: ... )
.9e71	20 9e d0	jsr $d09e			jsr Swap		; ( addr-t addr-s addr1+2 ) ( R: ... )
.9e74	20 0d cb	jsr $cb0d			jsr Cell_Plus_NoUf	; ( addr-t addr-s addr1+2 ) (R: ... )
.9e77	20 ea cf	jsr $cfea			jsr Fetch		; ( addr-t addr-s u-s ) ( R: ... )
.9e7a	20 aa cf	jsr $cfaa			jsr Not_Rot		; ( u-s addr-t addr-s ) ( R: ... )
.9e7d	20 9e d0	jsr $d09e			jsr Swap		; ( u-s addr-s addr-t ) ( R: ... )
.9e80	20 84 cf	jsr $cf84			jsr Rot			; (addr-s addr-t u-s ) ( R: ... )
.9e83	20 80 d0	jsr $d080			jsr Dup			; (addr-s addr-t u-s u-s ) ( R: ... )
.9e86	20 05 d0	jsr $d005			jsr To_R		; (addr-s addr-t u-s ) ( R: ... u-s )
.9e89	20 45 ae	jsr $ae45			jsr Move		; ( )( R: addr-t addr-1 addr-t )
.9e8c	20 24 d0	jsr $d024			jsr R_From		; ( u-s )  ( R: addr-t addr-h addr-t )
.9e8f	20 19 c7	jsr $c719			jsr Two_r_from		; ( u-s addr-t addr-h ) ( R: addr-t )
.9e92	20 aa cf	jsr $cfaa			jsr Not_Rot		; ( addr-h u-s addr-t ) ( R: addr-t )
.9e95	20 b4 cc	jsr $ccb4			jsr Plus		; ( addr-h addr-t1 ) ( R: addr-t )
.9e98	20 80 d0	jsr $d080			jsr Dup			; ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.9e9b	a9 0a		lda #$0a			lda #AscLF
.9e9d	20 eb b8	jsr $b8eb			jsr PushZA		; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.9ea0	20 9e d0	jsr $d09e			jsr Swap		; ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.9ea3	20 cd cf	jsr $cfcd			jsr Store		; ( addr-h addr-t1 ) ( R: addr-t )
.9ea6	20 60 cb	jsr $cb60			jsr One_plus		; ( addr-h addr-t1+1 ) ( R: addr-t )
.9ea9	20 9e d0	jsr $d09e			jsr Swap		; ( addr-t1+1 addr-h ) ( R: addr-t )
.9eac	4c 59 9e	jmp $9e59			jmp _cmd_w_loop
.9eaf					_cmd_w_eol:
.9eaf	20 9e d0	jsr $d09e			jsr Swap		; ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.9eb2	20 24 d0	jsr $d024			jsr R_From		; ( addr-t u-t addr-n addr-tn addr-t )
.9eb5	20 cd cc	jsr $cccd			jsr Minus		; ( addr-t u-t addr-n u )
.9eb8	b5 24		lda $24,x			lda DStack+0,x
.9eba	95 28		sta $28,x			sta DStack+4,x
.9ebc	b5 25		lda $25,x			lda DStack+1,x
.9ebe	95 29		sta $29,x			sta DStack+5,x		; ( addr-t u addr-n u )
.9ec0	20 28 ac	jsr $ac28			jsr CR
.9ec3	20 80 d0	jsr $d080			jsr Dup			; ( addr-t u addr-n u u )
.9ec6	20 19 cd	jsr $cd19			jsr U_Dot		; ( addr-t u addr-n u )
.9ec9	20 28 ac	jsr $ac28			jsr CR
.9ecc	a9 bf		lda #$bf			lda #$ff-%01000000
.9ece	25 22		and $22				and ed_flags
.9ed0	85 22		sta $22				sta ed_flags
.9ed2	4c 21 9c	jmp $9c21			jmp ed_next_command
.9ed5					ed_error_2drop:
.9ed5	e8		inx				inx			; Drop para2
.9ed6	e8		inx				inx
.9ed7					ed_error_1drop:
.9ed7	e8		inx				inx			; Drop para1
.9ed8	e8		inx				inx
.9ed9					ed_error:
.9ed9	20 28 ac	jsr $ac28			jsr CR
.9edc	a9 3f		lda #$3f			lda #'?'
.9ede	20 ee ce	jsr $ceee			jsr Emit_A
.9ee1	20 28 ac	jsr $ac28			jsr CR
.9ee4	4c 3f 9a	jmp $9a3f			jmp ed_input_loop
.9ee7					ed_get_input:
.9ee7	20 7b c3	jsr $c37b			jsr Refill		;  ( addr-t u-t f )
.9eea	b5 24		lda $24,x			lda DStack+0,x
.9eec	d0 05		bne $9ef3			bne +
.9eee	68		pla				pla
.9eef	68		pla				pla
.9ef0	4c d7 9e	jmp $9ed7			jmp ed_error_1drop
.9ef3					+
.9ef3	e8		inx				inx
.9ef4	e8		inx				inx
.9ef5	60		rts				rts
.9ef6					ed_have_text:
.9ef6	a5 1e		lda $1e				lda ed_head
.9ef8	05 1f		ora $1f				ora ed_head+1
.9efa	d0 05		bne $9f01			bne +
.9efc	68		pla				pla
.9efd	68		pla				pla
.9efe	4c d9 9e	jmp $9ed9			jmp ed_error
.9f01					+
.9f01	60		rts				rts
.9f02					ed_is_valid_line:
.9f02	38		sec				sec				; default is legal line number
.9f03	b5 24		lda $24,x			lda DStack+0,x
.9f05	15 25		ora $25,x			ora DStack+1,x
.9f07	f0 18		beq $9f21			beq _nope_zero	; ( n )
.9f09	20 80 d0	jsr $d080			jsr Dup				; ( n n )
.9f0c	20 23 9f	jsr $9f23			jsr ed_last_line		; ( n n last )
.9f0f	20 9e d0	jsr $d09e			jsr Swap			; ( n last n )
.9f12	20 5e c9	jsr $c95e			jsr Less_Than			; ( n f )
.9f15	b5 24		lda $24,x			lda DStack+0,x			; 0 flag is good
.9f17	15 25		ora $25,x			ora DStack+1,x
.9f19	d0 04		bne $9f1f			bne _too_small
.9f1b	e8		inx				inx
.9f1c	e8		inx				inx			; DROP flag ( n )
.9f1d	38		sec				sec			; signal valid
.9f1e	60		rts				rts
.9f1f					_too_small:
.9f1f	e8		inx				inx
.9f20	e8		inx				inx
.9f21					_nope_zero:
.9f21	18		clc				clc			; signal not valid
.9f22	60		rts				rts
.9f23					ed_last_line:
.9f23	20 fa b8	jsr $b8fa			jsr Zero		; Set counter to zero
.9f26	a9 1e		lda #$1e			lda #ed_head
.9f28	20 eb b8	jsr $b8eb			jsr PushZA		; ( count addr )
.9f2b					_loop:
.9f2b	20 ea cf	jsr $cfea			jsr Fetch		; ( count addr|0 )
.9f2e	b5 25		lda $25,x			lda DStack+1,x		; at end-of-list?
.9f30	f0 06		beq $9f38			beq _done
.9f32	20 6a cb	jsr $cb6a			jsr NOS_One_Plus	; Increase counter
.9f35	4c 2b 9f	jmp $9f2b			jmp _loop		; continue
.9f38					_done:
.9f38	60		rts				rts
.9f39					ed_no_line_zero:
.9f39	b5 26		lda $26,x			lda DStack+2,x
.9f3b	15 27		ora $27,x			ora DStack+3,x
.9f3d	d0 07		bne $9f46			bne _done
.9f3f	24 22		bit $22				bit ed_flags
.9f41	10 03		bpl $9f46			bpl _done
.9f43	4c d5 9e	jmp $9ed5			jmp ed_error_2drop
.9f46					_done:
.9f46	60		rts				rts
.9f47					ed_num_to_addr:
.9f47	a9 1e		lda #$1e			lda #ed_head
.9f49	20 eb b8	jsr $b8eb			jsr PushZA		; ( u addr-h )
.9f4c	4c 59 9f	jmp $9f59			jmp _test
.9f4f					_loop:
.9f4f	20 ea cf	jsr $cfea			jsr Fetch		; @ ( u addr1 )
.9f52	b5 25		lda $25,x			lda DStack+1,x		; at end of list?
.9f54	f0 09		beq $9f5f			beq _finished
.9f56	20 46 cb	jsr $cb46			jsr NOS_One_Minus	; decrement the line count
.9f59	b5 26		lda $26,x	_test:		lda DStack+2,x		; is the nth element we're looking for?
.9f5b	15 27		ora $27,x			ora DStack+3,x
.9f5d	d0 f0		bne $9f4f			bne _loop
.9f5f					_finished:
.9f5f	4c 8c ca	jmp $ca8c			jmp Nip			; ( addr )
.9f62					ed_para1_to_cur:
.9f62	b5 26		lda $26,x			lda DStack+2,x
.9f64	85 20		sta $20				sta ed_cur
.9f66	b5 27		lda $27,x			lda DStack+3,x
.9f68	85 21		sta $21				sta ed_cur+1
.9f6a	60		rts				rts
.9f6b					ed_print_addr:
.9f6b	20 0a cb	jsr $cb0a			jsr Cell_Plus		; ( addr+2 )
.9f6e	20 80 d0	jsr $d080			jsr Dup			; ( addr+2 addr+2 )
.9f71	20 0a cb	jsr $cb0a			jsr Cell_Plus		; ( addr+2 addr+4 )
.9f74	20 ea cf	jsr $cfea			jsr Fetch		; ( addr+2 u-s )
.9f77	20 9e d0	jsr $d09e			jsr Swap		; ( u-s addr+2 )
.9f7a	20 ea cf	jsr $cfea			jsr Fetch		; ( u-s addr-s )
.9f7d	20 9e d0	jsr $d09e			jsr Swap		; ( addr-s u-s )
.9f80	20 08 cf	jsr $cf08			jsr Type
.9f83	4c 28 ac	jmp $ac28			jmp CR
>9f86	61 66 69 64 70 6e 3d 77		ed_cmd_list:	.text "afidpn=wqQ", 0
>9f8e	71 51 00
.9f91					ed_cmd_table:
>9f91	36 9c 64 9d 97 9d cd 9c				.word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>9f99	c0 9d b7 9d
>9f9d	2c 9d 2a 9e 1d 9e 27 9e				.word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.9fa5					ed6502_end:
>9fa5	53 65 65			L1:	.text "See"	;  name of word as a string, ending at wh_NameLastChar
>9fa8	a3					.byte (("See"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9fa9	9a 99					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fac	08					.byte NN	;wh_Flags	dictionary flags
=40744					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9fad					See:
.9fad	20 67 bd	jsr $bd67			jsr Tick_Nt		; ( nt )
.9fb0	20 28 ac	jsr $ac28			jsr CR
.9fb3	ad 00 03	lda $0300			lda base		; Save the current number base
.9fb6	48		pha				pha
.9fb7	a9 23		lda #$23			lda #<str_see_nt	; print nt
.9fb9	a0 dc		ldy #$dc			ldy #>str_see_nt
.9fbb	20 23 cf	jsr $cf23			jsr Print_ASCIIZ_YA_no_lf
.9fbe	20 80 d0	jsr $d080			jsr Dup			; ( nt nt )
.9fc1	20 bd a9	jsr $a9bd			jsr Dot_Hex
.9fc4	20 fb ce	jsr $cefb			jsr Space		; ( nt )
.9fc7	20 80 d0	jsr $d080			jsr Dup			; ( nt nt )
.9fca	20 e3 be	jsr $bee3			jsr Name_To_Int		; ( nt xt )
.9fcd	a9 29		lda #$29			lda #<str_see_xt	; print xt
.9fcf	a0 dc		ldy #$dc			ldy #>str_see_xt
.9fd1	20 23 cf	jsr $cf23			jsr Print_ASCIIZ_YA_no_lf
.9fd4	20 80 d0	jsr $d080			jsr Dup			; ( nt xt xt )
.9fd7	20 bd a9	jsr $a9bd			jsr Dot_Hex
.9fda	20 28 ac	jsr $ac28			jsr CR			; ( nt xt )
.9fdd	a9 1c		lda #$1c			lda #<str_see_flags
.9fdf	a0 dc		ldy #$dc			ldy #>str_see_flags
.9fe1	20 23 cf	jsr $cf23			jsr Print_ASCIIZ_YA_no_lf
.9fe4	20 57 d0	jsr $d057			jsr Over		; ( nt xt nt )
.9fe7	a9 84		lda #$84			lda #Wh_Flags
.9fe9	20 0f cb	jsr $cb0f			jsr Plus_A		; ( nt xt ^flags )
.9fec	a1 24		lda ($24,x)			lda (DStack+0,x)	; ( nt xt ^flags )
.9fee	95 24		sta $24,x			sta DStack+0,x		; ( nt xt flags )
.9ff0	a0 0e		ldy #$0e			ldy #2*7		; for bit 7..0
.9ff2	20 fb ce	jsr $cefb	_flag_loop:	jsr Space
.9ff5	b9 59 a0	lda $a059,y			lda _FlagLabels+0,y	;   print label
.9ff8	20 ee ce	jsr $ceee			jsr Emit_A
.9ffb	b9 5a a0	lda $a05a,y			lda _FlagLabels+1,y
.9ffe	20 ee ce	jsr $ceee			jsr Emit_A
.a001	a9 3d		lda #$3d			lda #'='
.a003	20 ee ce	jsr $ceee			jsr Emit_A
.a006	16 24		asl $24,x			asl DStack+0,x		;   c = flag, rotate the rest
.a008	a9 00		lda #$00			lda #0
.a00a	69 30		adc #$30			adc #'0'
.a00c	20 ee ce	jsr $ceee			jsr Emit_A
.a00f	88		dey				dey
.a010	88		dey				dey
.a011	10 df		bpl $9ff2			bpl _flag_loop
.a013	e8		inx				inx
.a014	e8		inx				inx			; ( nt xt )
.a015	20 28 ac	jsr $ac28			jsr CR
.a018	a9 2f		lda #$2f			lda #<str_see_size	; print size
.a01a	a0 dc		ldy #$dc			ldy #>str_see_size
.a01c	20 23 cf	jsr $cf23			jsr Print_ASCIIZ_YA_no_lf
.a01f	20 9e d0	jsr $d09e			jsr Swap		; ( xt nt )
.a022	20 dc ab	jsr $abdc			jsr WordSize		; ( xt u )
.a025	20 a4 b2	jsr $b2a4			jsr Decimal
.a028	b5 24		lda $24,x			lda DStack+0,x		; if = 255
.a02a	c9 ff		cmp #$ff			cmp #$ff
.a02c	d0 11		bne $a03f			bne _size5
.a02e	20 ca b9	jsr $b9ca			jsr sliteral_runtime	;   type "large"
.a031	4c 39 a0	jmp $a039			  jmp _size2
>a034	6c 61 72 67 65					  .text "large"
.a039	20 08 cf	jsr $cf08	_size2:		jsr Type
.a03c	4c 45 a0	jmp $a045			jmp _size9		;  else
.a03f	20 80 d0	jsr $d080	_size5:		jsr Dup			;    type size
.a042	20 19 cd	jsr $cd19			jsr U_Dot
.a045					_size9:
.a045	20 28 ac	jsr $ac28			jsr CR
.a048	68		pla				pla			; restore base
.a049	8d 00 03	sta $0300			sta base
.a04c	20 c4 cd	jsr $cdc4			jsr Two_dup
.a04f	20 15 a9	jsr $a915			jsr Dump		; dump
.a052	20 28 ac	jsr $ac28			jsr CR
.a055	20 a6 d9	jsr $d9a6			jsr DisAsm		; disassemble
=171					CL	.var *-(WordListLink+wh_Xt)
=$a058					en = *	; remember here
>9fab	ab					.byte CL	;wh_CodeLength
.a058	60		rts				rts
>a059	43 4f 41 4e 49 4d 4e 4e		_FlagLabels:	.text "COANIMNNUF__R6__"
>a061	55 46 5f 5f 52 36 5f 5f
>a069	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-WordList"	;  name of word as a string, ending at wh_NameLastChar
>a071	72 64 4c 69 73 74
>a077	8e					.byte (("Forth-WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a078	28 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a07a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a07b	08					.byte NN	;wh_Flags	dictionary flags
=40951					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a07c	4c fa b8	jmp $b8fa	Forth_WordList:	jmp Zero
=3					CL	.var *-(WordListLink+wh_Xt)
=$a07f					en = *	; remember here
>a07a	03					.byte CL	;wh_CodeLength
>a07f	45 64 69 74 6f 72 2d 57		L1:	.text "Editor-WordList"	;  name of word as a string, ending at wh_NameLastChar
>a087	6f 72 64 4c 69 73 74
>a08e	8f					.byte (("Editor-WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a08f	f7 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a091	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a092	08					.byte NN	;wh_Flags	dictionary flags
=40974					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a093					Editor_WordList:
.a093	4c 04 b9	jmp $b904			jmp One
=3					CL	.var *-(WordListLink+wh_Xt)
=$a096					en = *	; remember here
>a091	03					.byte CL	;wh_CodeLength
>a096	41 73 73 65 6d 62 6c 65		L1:	.text "Assembler-WordList"	;  name of word as a string, ending at wh_NameLastChar
>a09e	72 2d 57 6f 72 64 4c 69 73 74
>a0a8	92					.byte (("Assembler-WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0a9	0e a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0ac	08					.byte NN	;wh_Flags	dictionary flags
=41000					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0ad					Assembler_WordList:
.a0ad	4c 0e b9	jmp $b90e			jmp Two
=3					CL	.var *-(WordListLink+wh_Xt)
=$a0b0					en = *	; remember here
>a0ab	03					.byte CL	;wh_CodeLength
>a0b0	52 6f 6f 74 2d 57 6f 72		L1:	.text "Root-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a0b8	64 6c 69 73 74
>a0bd	8d					.byte (("Root-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0be	28 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0c0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0c1	08					.byte NN	;wh_Flags	dictionary flags
=41021					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0c2	a9 03		lda #$03	Root_WordList:	lda #wid_Root
.a0c4	4c eb b8	jmp $b8eb			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$a0c7					en = *	; remember here
>a0c0	05					.byte CL	;wh_CodeLength
>a0c7	4f 6e 6c 79			L1:	.text "Only"	;  name of word as a string, ending at wh_NameLastChar
>a0cb	24					.byte (("Only"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0cc	3d a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0cf	08					.byte NN	;wh_Flags	dictionary flags
=41035					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0d0	20 c9 b8	jsr $b8c9	Only:		jsr True	; Push -1
.a0d3	4c 39 a2	jmp $a239			jmp Set_Order	; set the minimum search order.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a0d6					en = *	; remember here
>a0ce	06					.byte CL	;wh_CodeLength
>a0d6	41 6c 73 6f			L1:	.text "Also"	;  name of word as a string, ending at wh_NameLastChar
>a0da	e4					.byte (("Also"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0db	4b a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0de	08					.byte NN	;wh_Flags	dictionary flags
=41050					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0df	20 71 a2	jsr $a271	Also:		jsr Get_Order
.a0e2	20 57 d0	jsr $d057			jsr Over
.a0e5	20 9e d0	jsr $d09e			jsr Swap
.a0e8	20 60 cb	jsr $cb60			jsr One_plus
.a0eb	4c 39 a2	jmp $a239			jmp Set_Order
=15					CL	.var *-(WordListLink+wh_Xt)
=$a0ee					en = *	; remember here
>a0dd	0f					.byte CL	;wh_CodeLength
>a0ee	50 72 65 76 69 6f 75 73		L1:	.text "Previous"	;  name of word as a string, ending at wh_NameLastChar
>a0f6	68					.byte (("Previous"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0f7	5a a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0f9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0fa	08					.byte NN	;wh_Flags	dictionary flags
=41078					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0fb	20 71 a2	jsr $a271	Previous:	jsr Get_Order
.a0fe	20 8c ca	jsr $ca8c			jsr Nip
.a101	20 3a cb	jsr $cb3a			jsr One_minus
.a104	4c 39 a2	jmp $a239			jmp Set_Order
=12					CL	.var *-(WordListLink+wh_Xt)
=$a107					en = *	; remember here
>a0f9	0c					.byte CL	;wh_CodeLength
>a107	3e 4f 72 64 65 72		L1:	.text ">Order"	;  name of word as a string, ending at wh_NameLastChar
>a10d	46					.byte ((">Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a10e	76 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a110	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a111	08					.byte NN	;wh_Flags	dictionary flags
=41101					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a112					To_Order:
.a112	20 05 d0	jsr $d005			jsr To_R		; Put the wid on the return stack for now.
.a115	20 71 a2	jsr $a271			jsr Get_Order		; Get the current search order.
.a118	20 24 d0	jsr $d024			jsr R_From		; Get back the wid and add it to the list.
.a11b	20 9e d0	jsr $d09e			jsr Swap
.a11e	20 60 cb	jsr $cb60			jsr One_plus
.a121	4c 39 a2	jmp $a239			jmp Set_Order		; Set the search order with the new list.
=18					CL	.var *-(WordListLink+wh_Xt)
=$a124					en = *	; remember here
>a110	12					.byte CL	;wh_CodeLength
>a124	4f 72 64 65 72			L1:	.text "Order"	;  name of word as a string, ending at wh_NameLastChar
>a129	45					.byte (("Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a12a	8d a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a12c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a12d	08					.byte NN	;wh_Flags	dictionary flags
=41129					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a12e					Order:
.a12e	20 28 ac	jsr $ac28			jsr CR
.a131	a0 00		ldy #$00			ldy #0			; for each search_orderV[]
.a133	f0 0b		beq $a140			beq _test
.a135	98		tya		_loop:		tya
.a136	48		pha				pha
.a137	b9 2b 03	lda $032b,y			lda Search_orderV,y
.a13a	20 4b a1	jsr $a14b			jsr order_print_wid_string   ; internal helper function
.a13d	68		pla				pla
.a13e	a8		tay				tay
.a13f	c8		iny				iny			;  next
.a140	cc 2a 03	cpy $032a	_test:		cpy Num_orderV
.a143	90 f0		bcc $a135			bcc _loop
.a145	20 28 ac	jsr $ac28			jsr CR
.a148	ad 10 03	lda $0310			lda CurrentV		; print the current wordlist.
.a14b					order_print_wid_string:
.a14b	c9 04		cmp #$04			cmp #wid_Root+1		; do we have a string?
.a14d	90 06		bcc $a155			bcc _string
.a14f	20 eb b8	jsr $b8eb			jsr PushZA		; print the WID number
.a152	4c 19 cd	jmp $cd19			jmp U_Dot		; JSR/RTS
.a155	0a		asl a		_string:	asl		; Get the string based on WID 0 to 3
.a156	a8		tay				tay
.a157	b9 63 a1	lda $a163,y			lda _wid_Table+0,y
.a15a	48		pha				pha
.a15b	b9 64 a1	lda $a164,y			lda _wid_Table+1,y
.a15e	a8		tay				tay
.a15f	68		pla				pla
.a160	4c 23 cf	jmp $cf23			jmp Print_ASCIIZ_YA_no_lf ; Print without a line feed
=53					CL	.var *-(WordListLink+wh_Xt)
=$a163					en = *	; remember here
>a12c	35					.byte CL	;wh_CodeLength
.a163					_wid_Table:
>a163	0f dc					.word str_wid_forth	       ; WID 0: "Forth"
>a165	07 dc					.word str_wid_editor	       ; WID 1: "Editor"
>a167	fc db					.word str_wid_asm	       ; WID 2: "Assembler"
>a169	16 dc					.word str_wid_root	       ; WID 3: "Root"
>a16b	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
>a170	05					.byte (("Forth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a171	a9 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a173	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a174	08					.byte NN	;wh_Flags	dictionary flags
=41200					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a175	a9 00		lda #$00	Forth:		lda #wid_Forth
.a177	8d 2b 03	sta $032b			sta Search_OrderV+0
=5					CL	.var *-(WordListLink+wh_Xt)
=$a17a					en = *	; remember here
>a173	05					.byte CL	;wh_CodeLength
.a17a	60		rts				rts
>a17b	44 65 66 69 6e 69 74 69		L1:	.text "Definitions"	;  name of word as a string, ending at wh_NameLastChar
>a183	6f 6e 73
>a186	6b					.byte (("Definitions"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a187	f0 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a189	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a18a	08					.byte NN	;wh_Flags	dictionary flags
=41222					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a18b	ad 2b 03	lda $032b	Definitions:	lda Search_OrderV	; Transfer SEARCH_ORDER[0] to
.a18e	8d 10 03	sta $0310			sta CurrentV		;   byte variable CURRENT.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a191					en = *	; remember here
>a189	06					.byte CL	;wh_CodeLength
.a191	60		rts				rts
>a192	57 6f 72 64 4c 69 73 74		L1:	.text "WordList"	;  name of word as a string, ending at wh_NameLastChar
>a19a	88					.byte (("WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a19b	06 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a19d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a19e	08					.byte NN	;wh_Flags	dictionary flags
=41242					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a19f					WordList:
.a19f	ad 11 03	lda $0311			lda Num_wordlistsV	; Get the current number of wordlists
.a1a2	c9 0c		cmp #$0c			cmp #max_wordlists	; already at the max?
.a1a4	90 05		bcc $a1ab			bcc +
.a1a6	a9 66		lda #$66			lda #$100+err_TooManyWordlists	;   Print an error message
.a1a8	4c 67 b5	jmp $b567			jmp ThrowA
.a1ab					+
.a1ab	ee 11 03	inc $0311			inc Num_WordlistsV	; increment wordlist count
.a1ae	4c eb b8	jmp $b8eb			jmp PushZA		; and put it on the stack.
=18					CL	.var *-(WordListLink+wh_Xt)
=$a1b1					en = *	; remember here
>a19d	12					.byte CL	;wh_CodeLength
>a1b1	53 65 61 72 63 68 2d 57		L1:	.text "Search-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a1b9	6f 72 64 6c 69 73 74
>a1c0	8f					.byte (("Search-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a1c1	1a a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1c4	18					.byte UF+NN	;wh_Flags	dictionary flags
=41280					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1c5					Search_WordList:
.a1c5	20 22 b5	jsr $b522			jsr underflow_3
.a1c8	b5 24		lda $24,x			lda DStack+0,x		; Pop wid
.a1ca	e8		inx				inx
.a1cb	e8		inx				inx
.a1cc	48		pha				pha
.a1cd	20 10 be	jsr $be10			jsr fina_pattern_prepare ; tmp2 = pseudo-header for pattern name, zeros NOS
.a1d0	68		pla				pla			; pop wid
.a1d1	20 3a be	jsr $be3a			jsr fina_search_wordlist ; tmp1 = nt of matching word
.a1d4	f0 25		beq $a1fb			beq _fail
.a1d6	18		clc				clc
.a1d7	a5 14		lda $14				lda tmp1+0		; NOS = xt
.a1d9	69 85		adc #$85			adc #Wh_xt
.a1db	95 26		sta $26,x			sta DStack+2,x
.a1dd	a5 15		lda $15				lda tmp1+1
.a1df	69 00		adc #$00			adc #0
.a1e1	95 27		sta $27,x			sta DStack+3,x
.a1e3	a0 84		ldy #$84			ldy #Wh_Flags		; get flags
.a1e5	b1 14		lda ($14),y			lda (tmp1),y
.a1e7	29 04		and #$04			and #IM
.a1e9	d0 07		bne $a1f2			bne _immediate		; bit set, we're immediate
.a1eb	a9 ff		lda #$ff			lda #$FF		; We're not immediate, return -1
.a1ed	95 24		sta $24,x			sta DStack+0,x
.a1ef	95 25		sta $25,x			sta DStack+1,x
.a1f1	60		rts				rts
.a1f2					_immediate:
.a1f2	a9 01		lda #$01			lda #1			; We're immediate, return 1
.a1f4	95 24		sta $24,x			sta DStack+0,x
.a1f6	a9 00		lda #$00			lda #0
.a1f8	95 25		sta $25,x			sta DStack+1,x
.a1fa	60		rts				rts
.a1fb					_fail:
.a1fb	e8		inx				inx			; Drop u
.a1fc	e8		inx				inx
.a1fd	60		rts				rts
=57					CL	.var *-(WordListLink+wh_Xt)
=$a1fe					en = *	; remember here
>a1c3	39					.byte CL	;wh_CodeLength
>a1fe	53 65 74 2d 43 75 72 72		L1:	.text "Set-Current"	;  name of word as a string, ending at wh_NameLastChar
>a206	65 6e 74
>a209	8b					.byte (("Set-Current"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a20a	40 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a20c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a20d	00					.byte 0	;wh_Flags	dictionary flags
=41353					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a20e	20 c2 b4	jsr $b4c2	Set_Current:	jsr PopA	; pop wid
.a211	8d 10 03	sta $0310			sta CurrentV	; only the LSB is used.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a214					en = *	; remember here
>a20c	06					.byte CL	;wh_CodeLength
.a214	60		rts				rts
>a215	47 65 74 2d 43 75 72 72		L1:	.text "Get-Current"	;  name of word as a string, ending at wh_NameLastChar
>a21d	65 6e 74
>a220	8b					.byte (("Get-Current"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a221	89 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a223	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a224	08					.byte NN	;wh_Flags	dictionary flags
=41376					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a225					Get_Current:
.a225	ad 10 03	lda $0310			lda CurrentV
.a228	4c eb b8	jmp $b8eb			jmp PushZA	; CURRENT is a byte variable
=6					CL	.var *-(WordListLink+wh_Xt)
=$a22b					en = *	; remember here
>a223	06					.byte CL	;wh_CodeLength
>a22b	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>a233	72
>a234	49					.byte (("Set-Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a235	a0 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a237	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a238	00					.byte 0	;wh_Flags	dictionary flags
=41396					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a239					Set_Order:
.a239	b5 25		lda $25,x			lda DStack+1,x		; Test for -1 TOS
.a23b	10 0b		bpl $a248			bpl _start
.a23d	a9 00		lda #$00			lda #0
.a23f	95 25		sta $25,x			sta DStack+1,x
.a241	a9 03		lda #$03			lda #wid_Root
.a243	95 24		sta $24,x			sta DStack+0,x
.a245	20 04 b9	jsr $b904			jsr One			; Count is 1.
.a248					_start:
.a248	b5 24		lda $24,x			lda DStack+0,x
.a24a	99 2a 03	sta $032a,y			sta Num_orderV,y	; #ORDER is a byte variable.
.a24d	85 14		sta $14				sta tmp1	; Save a copy for zero check and looping.
.a24f	e8		inx				inx		; Drop the count off the data stack.
.a250	e8		inx				inx
.a251	a5 14		lda $14				lda tmp1
.a253	f0 0d		beq $a262			beq _done	; If zero, there are no wordlists.
.a255	a0 00		ldy #$00			ldy #0
.a257					_loop:
.a257	20 c2 b4	jsr $b4c2			jsr PopA		; The search order is a byte array
.a25a	99 2b 03	sta $032b,y			sta Search_OrderV,y	; so only save the LSB
.a25d	c8		iny				iny
.a25e	c6 14		dec $14				dec tmp1
.a260	d0 f5		bne $a257			bne _loop
.a262					_done:
=41					CL	.var *-(WordListLink+wh_Xt)
=$a262					en = *	; remember here
>a237	29					.byte CL	;wh_CodeLength
.a262	60		rts				rts
>a263	47 65 74 2d 4f 72 64 65		L1:	.text "Get-Order"	;  name of word as a string, ending at wh_NameLastChar
>a26b	72
>a26c	49					.byte (("Get-Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a26d	b4 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a26f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a270	08					.byte NN	;wh_Flags	dictionary flags
=41452					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a271					Get_Order:
.a271	ac 2a 03	ldy $032a			ldy Num_OrderV	; Get #ORDER - the number of wordlists in the search order.
.a274	f0 09		beq $a27f			beq _done	; If zero, there are no wordlists.
.a276					_loop:
.a276	b9 2a 03	lda $032a,y			lda Search_OrderV-1,y	; Put that wordlist id on the stack.
.a279	20 eb b8	jsr $b8eb			jsr PushZA
.a27c	88		dey				dey
.a27d	d0 f7		bne $a276			bne _loop		; See if that was the last one to process (first in the list).
.a27f					_done:
.a27f	ad 2a 03	lda $032a			lda Num_OrderV		; Push the number of items
.a282	4c eb b8	jmp $b8eb			jmp PushZA
=20					CL	.var *-(WordListLink+wh_Xt)
=$a285					en = *	; remember here
>a26f	14					.byte CL	;wh_CodeLength
>0339					BlockReadV: .word ?	; Vector to block reading routine
>033b					BlockWriteV: .word ?	; Vector to block writing routine
>033d					BuffBlockNumV: .word ?	; Block number current in BlockBuffer
>033f					BuffStatusV: .word ?	; Status of BlockBuffer (bit 0 = used, bit 1 = dirty)
>0341					BlockBuffer: .fill 1024
.a285					BlockInit:
.a285	a9 00		lda #$00			lda #0
.a287	8d 3f 03	sta $033f			sta BuffStatusV
.a28a	a9 45		lda #$45			lda #<Platform_Block_Read
.a28c	a0 f1		ldy #$f1			ldy #>Platform_Block_Read
.a28e	8d 39 03	sta $0339			sta BlockReadV+0
.a291	8c 3a 03	sty $033a			sty BlockReadV+1
.a294	a9 70		lda #$70			lda #<Platform_Block_Write
.a296	a0 f1		ldy #$f1			ldy #>Platform_Block_Write
.a298	8d 3b 03	sta $033b			sta BlockWriteV+0
.a29b	8c 3c 03	sty $033c			sty BlockWriteV+1
.a29e	60		rts				rts
>0741					RamDriveV: .word ?	; ptr to RamDrive storage area
=0					io_blk_status = 0
=0					io_blk_action = 0
=0					io_blk_number = 0
=0					io_blk_buffer = 0
>a29f	42 6c 6f 63 6b 2d 52 61		L1:	.text "Block-RamDrive-Init"	;  name of word as a string, ending at wh_NameLastChar
>a2a7	6d 44 72 69 76 65 2d 49 6e 69 74
>a2b2	93					.byte (("Block-RamDrive-Init"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a2b3	ec a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a2b5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a2b6	18					.byte UF+NN	;wh_Flags	dictionary flags
=41522					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2b7					Block_RamDrive_Init:
.a2b7	a9 0a		lda #$0a			lda #10			; Calculate how many bytes are needed for numblocks blocks
.a2b9	20 eb b8	jsr $b8eb			jsr PushZA
.a2bc	20 50 cc	jsr $cc50			jsr LShift
.a2bf	20 2c cb	jsr $cb2c			jsr Here		; ( size addr )
.a2c2	8d 41 07	sta $0741			sta RamDriveV+0
.a2c5	8c 42 07	sty $0742			sty RamDriveV+1
.a2c8	20 57 d0	jsr $d057			jsr Over
.a2cb	20 cc c1	jsr $c1cc			jsr Allot		; Create ramdrive buffer
.a2ce	20 9e d0	jsr $d09e			jsr Swap		; blank the buffer
.a2d1	20 45 bf	jsr $bf45			jsr Blank
.a2d4	a9 e9		lda #$e9			lda #<_read		; set block read vector
.a2d6	a0 a2		ldy #$a2			ldy #>_read
.a2d8	8d 39 03	sta $0339			sta BlockReadV+0
.a2db	8c 3a 03	sty $033a			sty BlockReadV+1
.a2de	a9 f9		lda #$f9			lda #<_write		; set block write vector
.a2e0	a0 a2		ldy #$a2			ldy #>_write
.a2e2	8d 3b 03	sta $033b			sta BlockWriteV+0
.a2e5	8c 3c 03	sty $033c			sty BlockWriteV+1
.a2e8	60		rts				rts
=50					CL	.var *-(WordListLink+wh_Xt)
=$a2e9					en = *	; remember here
>a2b5	32					.byte CL	;wh_CodeLength
.a2e9					_read:
.a2e9	20 06 a3	jsr $a306			jsr _addr
.a2ec	20 9e d0	jsr $d09e			jsr Swap
.a2ef	a9 00		lda #$00			lda #0
.a2f1	a0 04		ldy #$04			ldy #>1024
.a2f3	20 b9 b8	jsr $b8b9			jsr PushYA
.a2f6	4c 45 ae	jmp $ae45			jmp Move
.a2f9					_write:
.a2f9	20 06 a3	jsr $a306			jsr _addr
.a2fc	a9 00		lda #$00			lda #0
.a2fe	a0 04		ldy #$04			ldy #>1024
.a300	20 b9 b8	jsr $b8b9			jsr PushYA
.a303	4c 45 ae	jmp $ae45			jmp Move
.a306					_addr:
.a306	a9 0a		lda #$0a			lda #10
.a308	20 eb b8	jsr $b8eb			jsr PushZA
.a30b	20 50 cc	jsr $cc50			jsr LShift
.a30e	20 21 a3	jsr $a321			jsr RamDrive
.a311	4c b4 cc	jmp $ccb4			jmp Plus
>a314	52 61 6d 44 72 69 76 65		L1:	.text "RamDrive"	;  name of word as a string, ending at wh_NameLastChar
>a31c	a8					.byte (("RamDrive"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a31d	32 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a31f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a320	08					.byte NN	;wh_Flags	dictionary flags
=41628					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a321	ad 41 07	lda $0741	RamDrive:	lda RamDriveV+0
.a324	ac 42 07	ldy $0742			ldy RamDriveV+1
.a327	4c b9 b8	jmp $b8b9			jmp PushYA
=9					CL	.var *-(WordListLink+wh_Xt)
=$a32a					en = *	; remember here
>a31f	09					.byte CL	;wh_CodeLength
>a32a	42 75 66 66 53 74 61 74		L1:	.text "BuffStatus"	;  name of word as a string, ending at wh_NameLastChar
>a332	75 73
>a334	6a					.byte (("BuffStatus"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a335	9c a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a337	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a338	08					.byte NN	;wh_Flags	dictionary flags
=41652					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a339	a0 03		ldy #$03	BuffStatus:	ldy #>BuffStatusV
.a33b	a9 3f		lda #$3f			lda #<BuffStatusV
.a33d	4c b9 b8	jmp $b8b9			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a340					en = *	; remember here
>a337	07					.byte CL	;wh_CodeLength
>a340	42 75 66 66 42 6c 6f 63		L1:	.text "BuffBlockNum"	;  name of word as a string, ending at wh_NameLastChar
>a348	6b 4e 75 6d
>a34c	ac					.byte (("BuffBlockNum"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a34d	b4 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a34f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a350	08					.byte NN	;wh_Flags	dictionary flags
=41676					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a351	a0 03		ldy #$03	BuffBlockNum:	ldy #>BuffBlockNumV
.a353	a9 3d		lda #$3d			lda #<BuffBlockNumV
.a355	4c b9 b8	jmp $b8b9			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a358					en = *	; remember here
>a34f	07					.byte CL	;wh_CodeLength
>a358	42 6c 6b 42 75 66 66 65		L1:	.text "BlkBuffer"	;  name of word as a string, ending at wh_NameLastChar
>a360	72
>a361	49					.byte (("BlkBuffer"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a362	cc a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a364	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a365	08					.byte NN	;wh_Flags	dictionary flags
=41697					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a366	a0 03		ldy #$03	BlkBuffer:	ldy #>BlockBuffer
.a368	a9 41		lda #$41			lda #<BlockBuffer
.a36a	4c b9 b8	jmp $b8b9			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a36d					en = *	; remember here
>a364	07					.byte CL	;wh_CodeLength
>a36d	53 63 72			L1:	.text "Scr"	;  name of word as a string, ending at wh_NameLastChar
>a370	43					.byte (("Scr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a371	e1 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a373	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a374	08					.byte NN	;wh_Flags	dictionary flags
=41712					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a375	a0 03		ldy #$03	Scr:		ldy #>ScrV
.a377	a9 0e		lda #$0e			lda #<ScrV
.a379	4c b9 b8	jmp $b8b9			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a37c					en = *	; remember here
>a373	07					.byte CL	;wh_CodeLength
>a37c	42 6c 6b			L1:	.text "Blk"	;  name of word as a string, ending at wh_NameLastChar
>a37f	63					.byte (("Blk"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a380	f0 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a382	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a383	08					.byte NN	;wh_Flags	dictionary flags
=41727					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a384	a0 03		ldy #$03	Blk:		ldy #>BlkV
.a386	a9 0c		lda #$0c			lda #<BlkV
.a388	4c b9 b8	jmp $b8b9			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a38b					en = *	; remember here
>a382	07					.byte CL	;wh_CodeLength
>a38b	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write"	;  name of word as a string, ending at wh_NameLastChar
>a393	69 74 65
>a396	ab					.byte (("Block-Write"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a397	ff a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a399	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a39a	08					.byte NN	;wh_Flags	dictionary flags
=41750					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a39b	6c 3b 03	jmp ($033b)	Block_Write:	jmp (BlockWriteV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-(WordListLink+wh_Xt)
=$a39e					en = *	; remember here
>a399	03					.byte CL	;wh_CodeLength
>a39e	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a3a6	69 74 65 2d 56 65 63 74 6f 72
>a3b0	52					.byte (("Block-Write-Vector"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a3b1	16 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3b3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3b4	08					.byte NN	;wh_Flags	dictionary flags
=41776					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3b5					Block_Write_Vector:
.a3b5	a0 03		ldy #$03			ldy #>BlockWriteV
.a3b7	a9 3b		lda #$3b			lda #<BlockWriteV	; Get the BLOCK-WRITE-VECTOR address
.a3b9	4c b9 b8	jmp $b8b9			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a3bc					en = *	; remember here
>a3b3	07					.byte CL	;wh_CodeLength
>a3bc	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read"	;  name of word as a string, ending at wh_NameLastChar
>a3c4	61 64
>a3c6	8a					.byte (("Block-Read"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a3c7	30 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3c9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3ca	08					.byte NN	;wh_Flags	dictionary flags
=41798					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3cb	6c 39 03	jmp ($0339)	Block_Read:	jmp (BlockReadV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-(WordListLink+wh_Xt)
=$a3ce					en = *	; remember here
>a3c9	03					.byte CL	;wh_CodeLength
>a3ce	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a3d6	61 64 2d 56 65 63 74 6f 72
>a3df	51					.byte (("Block-Read-Vector"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a3e0	46 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3e3	08					.byte NN	;wh_Flags	dictionary flags
=41823					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3e4					Block_Read_Vector:
.a3e4	a0 03		ldy #$03			ldy #>BlockReadV
.a3e6	a9 39		lda #$39			lda #<BlockReadV	; Get the BLOCK-READ-VECTOR address
.a3e8	4c b9 b8	jmp $b8b9			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a3eb					en = *	; remember here
>a3e2	07					.byte CL	;wh_CodeLength
>a3eb	53 61 76 65 2d 42 75 66		L1:	.text "Save-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a3f3	66 65 72 73
>a3f7	6c					.byte (("Save-Buffers"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a3f8	5f a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3fa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3fb	00					.byte 0	;wh_Flags	dictionary flags
=41847					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3fc					Save_Buffers:
.a3fc	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a3ff	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a401	d0 11		bne $a414			bne _done	; Either not used or not dirty = done!
.a403	20 66 a3	jsr $a366			jsr BlkBuffer
.a406	20 51 a3	jsr $a351			jsr BuffBlockNum
.a409	20 ea cf	jsr $cfea			jsr Fetch
.a40c	20 9b a3	jsr $a39b			jsr Block_Write
.a40f	a9 01		lda #$01			lda #1
.a411	8d 3f 03	sta $033f			sta BuffStatusV+0
.a414					_done:
=24					CL	.var *-(WordListLink+wh_Xt)
=$a414					en = *	; remember here
>a3fa	18					.byte CL	;wh_CodeLength
.a414	60		rts				rts
>a415	42 6c 6f 63 6b			L1:	.text "Block"	;  name of word as a string, ending at wh_NameLastChar
>a41a	65					.byte (("Block"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a41b	77 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a41d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a41e	00					.byte 0	;wh_Flags	dictionary flags
=41882					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a41f					Block:
.a41f	ad 3d 03	lda $033d			lda BuffBlockNumV+0	; check the LSB
.a422	d5 24		cmp $24,x			cmp DStack+0,x
.a424	d0 0e		bne $a434			bne _not_in_buffer
.a426	ad 3e 03	lda $033e			lda BuffBlockNumV+1	; check the MSB
.a429	d5 25		cmp $25,x			cmp DStack+1,x
.a42b	d0 07		bne $a434			bne _not_in_buffer
.a42d	ad 3f 03	lda $033f			lda BuffStatusV+0
.a430	29 01		and #$01			and #1		; Check the in-use flag (bit 0)
.a432	d0 2d		bne $a461			bne _done	; It's already in the buffer and in use.
.a434					_not_in_buffer:
.a434	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a437	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a439	d0 0c		bne $a447			bne _buffer_available ; Unused or not dirty = available
.a43b	20 66 a3	jsr $a366			jsr BlkBuffer
.a43e	20 51 a3	jsr $a351			jsr BuffBlockNum
.a441	20 ea cf	jsr $cfea			jsr Fetch
.a444	20 9b a3	jsr $a39b			jsr Block_Write
.a447					_buffer_available:
.a447	b5 24		lda $24,x			lda DStack+0,x
.a449	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a44c	b5 25		lda $25,x			lda DStack+1,x
.a44e	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a451	20 66 a3	jsr $a366			jsr BlkBuffer
.a454	20 9e d0	jsr $d09e			jsr Swap
.a457	20 cb a3	jsr $a3cb			jsr Block_Read
.a45a	a9 01		lda #$01			lda #1
.a45c	8d 3f 03	sta $033f			sta BuffStatusV+0
.a45f	ca		dex				dex
.a460	ca		dex				dex
.a461					_done:
.a461	a9 41		lda #$41			lda #<BlockBuffer
.a463	95 24		sta $24,x			sta DStack+0,x
.a465	a9 03		lda #$03			lda #>BlockBuffer
.a467	95 25		sta $25,x			sta DStack+1,x
=74					CL	.var *-(WordListLink+wh_Xt)
=$a469					en = *	; remember here
>a41d	4a					.byte CL	;wh_CodeLength
.a469	60		rts				rts
>a46a	55 70 64 61 74 65		L1:	.text "Update"	;  name of word as a string, ending at wh_NameLastChar
>a470	a6					.byte (("Update"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a471	9a a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a473	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a474	00					.byte 0	;wh_Flags	dictionary flags
=41968					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a475					Update:
.a475	ad 3f 03	lda $033f			lda BuffStatusV+0
.a478	09 02		ora #$02			ora #2		; Turn on dirty flag (bit 2)
.a47a	8d 3f 03	sta $033f			sta BuffStatusV+0
=8					CL	.var *-(WordListLink+wh_Xt)
=$a47d					en = *	; remember here
>a473	08					.byte CL	;wh_CodeLength
.a47d	60		rts				rts
>a47e	42 75 66 66 65 72		L1:	.text "Buffer"	;  name of word as a string, ending at wh_NameLastChar
>a484	46					.byte (("Buffer"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a485	f0 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a487	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a488	08					.byte NN	;wh_Flags	dictionary flags
=41988					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a489					Buffer:
.a489	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a48c	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a48e	d0 0c		bne $a49c			bne _buffer_available ; Unused or not dirty = available
.a490	20 66 a3	jsr $a366			jsr BlkBuffer
.a493	20 51 a3	jsr $a351			jsr BuffBlockNum
.a496	20 ea cf	jsr $cfea			jsr Fetch
.a499	20 9b a3	jsr $a39b			jsr Block_Write
.a49c					_buffer_available:
.a49c	b5 24		lda $24,x			lda DStack+0,x
.a49e	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a4a1	b5 25		lda $25,x			lda DStack+1,x
.a4a3	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a4a6	a9 01		lda #$01			lda #1
.a4a8	8d 3f 03	sta $033f			sta BuffStatusV+0
.a4ab					_done:
.a4ab	a9 41		lda #$41			lda #<BlockBuffer
.a4ad	95 24		sta $24,x			sta DStack+0,x
.a4af	a9 03		lda #$03			lda #>BlockBuffer
.a4b1	95 25		sta $25,x			sta DStack+1,x
=42					CL	.var *-(WordListLink+wh_Xt)
=$a4b3					en = *	; remember here
>a487	2a					.byte CL	;wh_CodeLength
.a4b3	60		rts				rts
>a4b4	45 6d 70 74 79 2d 42 75		L1:	.text "Empty-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a4bc	66 66 65 72 73
>a4c1	6d					.byte (("Empty-Buffers"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4c2	04 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4c4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4c5	08					.byte NN	;wh_Flags	dictionary flags
=42049					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4c6	a9 00		lda #$00	Empty_Buffers:	lda #0		; Set the buffer status to empty.
.a4c8	8d 3f 03	sta $033f			sta BuffStatusV+0 ; Only LSB is used.
=5					CL	.var *-(WordListLink+wh_Xt)
=$a4cb					en = *	; remember here
>a4c4	05					.byte CL	;wh_CodeLength
.a4cb	60		rts				rts
>a4cc	46 6c 75 73 68			L1:	.text "Flush"	;  name of word as a string, ending at wh_NameLastChar
>a4d1	05					.byte (("Flush"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4d2	41 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4d4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4d5	08					.byte NN	;wh_Flags	dictionary flags
=42065					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4d6	20 fc a3	jsr $a3fc	Flush:		jsr Save_Buffers
.a4d9	4c c6 a4	jmp $a4c6			jmp Empty_Buffers
=6					CL	.var *-(WordListLink+wh_Xt)
=$a4dc					en = *	; remember here
>a4d4	06					.byte CL	;wh_CodeLength
>a4dc	4c 6f 61 64			L1:	.text "Load"	;  name of word as a string, ending at wh_NameLastChar
>a4e0	84					.byte (("Load"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4e1	51 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4e3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4e4	10					.byte UF	;wh_Flags	dictionary flags
=42080					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4e5					Load:
.a4e5	20 08 b5	jsr $b508			jsr underflow_1
.a4e8	ad 0d 03	lda $030d			lda BlkV+1		; Save the current value of BLK on the return stack.
.a4eb	48		pha				pha
.a4ec	ad 0c 03	lda $030c			lda BlkV+0
.a4ef	48		pha				pha
.a4f0	b5 24		lda $24,x			lda DStack+0,x		; Set BLK to the given block/screen number.
.a4f2	8d 0c 03	sta $030c			sta BlkV+0
.a4f5	b5 25		lda $25,x			lda DStack+1,x
.a4f7	8d 0d 03	sta $030d			sta BlkV+1
.a4fa	20 1f a4	jsr $a41f			jsr Block		; Load that block into a buffer
.a4fd	a9 00		lda #$00			lda #<1024		; block length.
.a4ff	a0 04		ldy #$04			ldy #>1024
.a501	20 b9 b8	jsr $b8b9			jsr PushYA
.a504	38		sec				sec		; Set a flag to not zero BLK
.a505	20 db b0	jsr $b0db			jsr load_evaluate
.a508	68		pla				pla
.a509	8d 0c 03	sta $030c			sta BlkV+0
.a50c	68		pla				pla
.a50d	8d 0d 03	sta $030d			sta BlkV+1
.a510	0d 0c 03	ora $030c			ora BlkV+0
.a513	f0 13		beq $a528			beq _done
.a515	ad 0c 03	lda $030c			lda BlkV+0
.a518	ac 0d 03	ldy $030d			ldy BlkV+1
.a51b	20 b9 b8	jsr $b8b9			jsr PushYA
.a51e	20 1f a4	jsr $a41f			jsr Block
.a521	20 de b4	jsr $b4de			jsr PopYA	; Pop the buffer address.
.a524	85 04		sta $04				sta cib+0
.a526	84 05		sty $05				sty cib+1
.a528					_done:
=67					CL	.var *-(WordListLink+wh_Xt)
=$a528					en = *	; remember here
>a4e3	43					.byte CL	;wh_CodeLength
.a528	60		rts				rts
>a529	54 68 72 75			L1:	.text "Thru"	;  name of word as a string, ending at wh_NameLastChar
>a52d	a4					.byte (("Thru"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a52e	60 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a530	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a531	18					.byte UF+NN	;wh_Flags	dictionary flags
=42157					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a532					Thru:
.a532	20 1d b5	jsr $b51d			jsr underflow_2
.a535	20 05 d0	jsr $d005			jsr To_R
.a538					_loop:
.a538	b5 25		lda $25,x			lda DStack+1,x		; copy to return stack
.a53a	48		pha				pha
.a53b	b5 24		lda $24,x			lda DStack+0,x
.a53d	48		pha				pha
.a53e	20 e5 a4	jsr $a4e5			jsr Load		; Load this screen.
.a541	20 24 d0	jsr $d024			jsr R_From		; Get the screen # we just loaded.
.a544	20 60 cb	jsr $cb60			jsr One_plus		; increment
.a547	86 14		stx $14				stx tmp1
.a549	ba		tsx				tsx
.a54a	8a		txa				txa
.a54b	a8		tay				tay
.a54c	a6 14		ldx $14				ldx tmp1
.a54e	b9 01 01	lda $0101,y			lda RStack+1,y
.a551	d5 24		cmp $24,x			cmp DStack+0,x
.a553	b9 02 01	lda $0102,y			lda RStack+2,y
.a556	f5 25		sbc $25,x			sbc DStack+1,x
.a558	b0 de		bcs $a538			bcs _loop
.a55a	e8		inx				inx			; Drop index
.a55b	e8		inx				inx
.a55c	68		pla				pla			; RDrop limit
.a55d	68		pla				pla
=44					CL	.var *-(WordListLink+wh_Xt)
=$a55e					en = *	; remember here
>a530	2c					.byte CL	;wh_CodeLength
.a55e	60		rts				rts
>a55f	4c 69 73 74			L1:	.text "List"	;  name of word as a string, ending at wh_NameLastChar
>a563	84					.byte (("List"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a564	ad a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a566	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a567	08					.byte NN	;wh_Flags	dictionary flags
=42211					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a568	20 de b4	jsr $b4de	List:		jsr PopYA	; Save the screen number
.a56b	8d 0e 03	sta $030e			sta ScrV+0
.a56e	8c 0f 03	sty $030f			sty ScrV+1
.a571					ListScr:
.a571	20 75 a3	jsr $a375			jsr Scr
.a574	20 ea cf	jsr $cfea			jsr Fetch
.a577	20 1f a4	jsr $a41f			jsr Block	; Get the current screen contents.
.a57a	20 28 ac	jsr $ac28			jsr CR
.a57d	20 ca b9	jsr $b9ca			jsr SLiteral_Runtime
.a580	4c 8b a5	jmp $a58b			  jmp +				; for SLiteral_Runtime
>a583	53 63 72 65 65 6e 20 23				  .text "Screen #"		; for SLiteral_Runtime
.a58b					+
.a58b	20 08 cf	jsr $cf08			jsr Type
.a58e	20 75 a3	jsr $a375			jsr Scr		; print screen number
.a591	20 ea cf	jsr $cfea			jsr Fetch
.a594	a9 04		lda #$04			lda #4		;    in 4 positions
.a596	20 4d cd	jsr $cd4d			jsr U_Dot_R_A
.a599	a9 00		lda #$00			lda #0			; line #
.a59b					_line_loop:
.a59b	48		pha				pha
.a59c	20 28 ac	jsr $ac28			jsr CR
.a59f	68		pla				pla		; Print the line number
.a5a0	48		pha				pha
.a5a1	20 eb b8	jsr $b8eb			jsr PushZA
.a5a4	a9 02		lda #$02			lda #2		;   in 2 positions
.a5a6	20 4d cd	jsr $cd4d			jsr U_Dot_R_A
.a5a9	20 fb ce	jsr $cefb			jsr Space
.a5ac	20 80 d0	jsr $d080			jsr Dup		; Print one line using the address on the stack.
.a5af	a9 40		lda #$40			lda #64
.a5b1	20 eb b8	jsr $b8eb			jsr PushZA
.a5b4	20 08 cf	jsr $cf08			jsr Type
.a5b7	a9 40		lda #$40			lda #64		; move address to the next line.
.a5b9	20 0f cb	jsr $cb0f			jsr Plus_A
.a5bc	68		pla				pla		; Increment the line number
.a5bd	18		clc				clc
.a5be	69 01		adc #$01			adc #1
.a5c0	c9 10		cmp #$10			cmp #16		; See if we are done.
.a5c2	d0 d7		bne $a59b			bne _line_loop
.a5c4	e8		inx				inx		; Drop the address
.a5c5	e8		inx				inx
.a5c6	4c 28 ac	jmp $ac28			jmp CR
=97					CL	.var *-(WordListLink+wh_Xt)
=$a5c9					en = *	; remember here
>a566	61					.byte CL	;wh_CodeLength
>a5c9	44 65 66 65 72			L1:	.text "Defer"	;  name of word as a string, ending at wh_NameLastChar
>a5ce	45					.byte (("Defer"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5cf	e3 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5d2	08					.byte NN	;wh_Flags	dictionary flags
=42318					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5d3					Defer:
.a5d3	20 26 c2	jsr $c226			jsr Header_Comma	; compile word header
.a5d6	a9 e0		lda #$e0			lda #<_undefined	; compile "jmp _undefined"
.a5d8	a0 a5		ldy #$a5			ldy #>_undefined
.a5da	20 5f ce	jsr $ce5f			jsr Jmp_Comma_YA
.a5dd	4c fe bc	jmp $bcfe			jmp adjust_z	; adjust header to correct length
=13					CL	.var *-(WordListLink+wh_Xt)
=$a5e0					en = *	; remember here
>a5d1	0d					.byte CL	;wh_CodeLength
.a5e0					_undefined:
.a5e0	a9 6a		lda #$6a			lda #$100+err_Defer	; throw exception
.a5e2	4c 67 b5	jmp $b567			jmp ThrowA
>a5e5	44 65 66 65 72 40		L1:	.text "Defer@"	;  name of word as a string, ending at wh_NameLastChar
>a5eb	06					.byte (("Defer@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5ec	4e a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5ef	08					.byte NN	;wh_Flags	dictionary flags
=42347					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5f0					Defer_Fetch:
.a5f0	20 60 cb	jsr $cb60			jsr One_plus	; step over JMP opcode to operand
.a5f3	4c ea cf	jmp $cfea			jmp Fetch	; get JMP operand, return
=6					CL	.var *-(WordListLink+wh_Xt)
=$a5f6					en = *	; remember here
>a5ee	06					.byte CL	;wh_CodeLength
>a5f6	44 65 66 65 72 21		L1:	.text "Defer!"	;  name of word as a string, ending at wh_NameLastChar
>a5fc	26					.byte (("Defer!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5fd	6b a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5ff	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a600	08					.byte NN	;wh_Flags	dictionary flags
=42364					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a601					Defer_Store:
.a601	20 60 cb	jsr $cb60			jsr One_plus	; step over JMP opcode to operand
.a604	4c cd cf	jmp $cfcd			jmp Store	; set JMP operand, return
=6					CL	.var *-(WordListLink+wh_Xt)
=$a607					en = *	; remember here
>a5ff	06					.byte CL	;wh_CodeLength
>a607	49 73				L1:	.text "Is"	;  name of word as a string, ending at wh_NameLastChar
>a609	62					.byte (("Is"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a60a	7c a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a60c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a60d	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42377					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a60e					Is:
.a60e	a5 0a		lda $0a				lda state		; Check STATE
.a610	f0 0a		beq $a61c			beq _interpreting
.a612					_compiling:
.a612	20 75 bd	jsr $bd75			jsr Bracket_Tick	; compile the xt of the next word as a literal.
.a615	a0 a6		ldy #$a6			ldy #>Defer_Store	; Postpone DEFER! by compiling a JSR to it.
.a617	a9 01		lda #$01			lda #<Defer_Store
.a619	4c 48 ce	jmp $ce48			jmp Jsr_Comma_YA
.a61c					_interpreting:
.a61c	20 61 bd	jsr $bd61			jsr Tick
.a61f	4c 01 a6	jmp $a601			jmp Defer_Store
=20					CL	.var *-(WordListLink+wh_Xt)
=$a622					en = *	; remember here
>a60c	14					.byte CL	;wh_CodeLength
>a622	41 63 74 69 6f 6e 2d 4f		L1:	.text "Action-Of"	;  name of word as a string, ending at wh_NameLastChar
>a62a	66
>a62b	c9					.byte (("Action-Of"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a62c	89 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a62e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a62f	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42411					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a630					Action_Of:
.a630	a5 0a		lda $0a				lda state		; Check STATE
.a632	f0 0a		beq $a63e			beq _interpreting
.a634					_compiling:
.a634	20 75 bd	jsr $bd75			jsr Bracket_Tick	; compile the xt of the next word as a literal.
.a637	a0 a5		ldy #$a5			ldy #>Defer_Fetch	; Postpone DEFER@ by compiling a JSR to it.
.a639	a9 f0		lda #$f0			lda #<Defer_Fetch
.a63b	4c 48 ce	jmp $ce48			jmp Jsr_Comma_YA
.a63e					_interpreting:
.a63e	20 61 bd	jsr $bd61			jsr Tick
.a641	4c f0 a5	jmp $a5f0			jmp Defer_Fetch
=20					CL	.var *-(WordListLink+wh_Xt)
=$a644					en = *	; remember here
>a62e	14					.byte CL	;wh_CodeLength
>a644	55 73 65 72 41 64 64 72		L1:	.text "UserAddr"	;  name of word as a string, ending at wh_NameLastChar
>a64c	48					.byte (("UserAddr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a64d	ab a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a64f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a650	08					.byte NN	;wh_Flags	dictionary flags
=42444					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a651	a0 02		ldy #$02	UserAddr:	ldy #>User0
.a653	a9 ff		lda #$ff			lda #<User0
.a655	4c b9 b8	jmp $b8b9			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a658					en = *	; remember here
>a64f	07					.byte CL	;wh_CodeLength
>a658	42 75 66 66 65 72 3a		L1:	.text "Buffer:"	;  name of word as a string, ending at wh_NameLastChar
>a65f	47					.byte (("Buffer:"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a660	cc a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a662	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a663	08					.byte NN	;wh_Flags	dictionary flags
=42463					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a664	20 c3 c2	jsr $c2c3	Buffer_Colon:	jsr Create
.a667	4c cc c1	jmp $c1cc			jmp Allot
=6					CL	.var *-(WordListLink+wh_Xt)
=$a66a					en = *	; remember here
>a662	06					.byte CL	;wh_CodeLength
>a66a	43 61 73 65			L1:	.text "Case"	;  name of word as a string, ending at wh_NameLastChar
>a66e	a4					.byte (("Case"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a66f	df a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a671	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a672	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42478					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a673					Case:
.a673	4c fa b8	jmp $b8fa			jmp Zero	; init jmp fixup chain
=3					CL	.var *-(WordListLink+wh_Xt)
=$a676					en = *	; remember here
>a671	03					.byte CL	;wh_CodeLength
>a676	45 6e 64 43 61 73 65		L1:	.text "EndCase"	;  name of word as a string, ending at wh_NameLastChar
>a67d	a7					.byte (("EndCase"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a67e	ee a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a680	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a681	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42493					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a682					EndCase:
.a682	20 37 ce	jsr $ce37			jsr Drop_Comma
.a685					_loop:
.a685	b5 25		lda $25,x			lda DStack+1,x	; while addr fixup entries left
.a687	f0 06		beq $a68f			beq _done
.a689	20 08 a7	jsr $a708			jsr Then	;   fixup another one
.a68c	4c 85 a6	jmp $a685			jmp _loop
.a68f					_done:
.a68f	e8		inx				inx		; Drop the 0
.a690	e8		inx				inx
=15					CL	.var *-(WordListLink+wh_Xt)
=$a691					en = *	; remember here
>a680	0f					.byte CL	;wh_CodeLength
.a691	60		rts				rts
>a692	4f 66				L1:	.text "Of"	;  name of word as a string, ending at wh_NameLastChar
>a694	c2					.byte (("Of"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a695	fd a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a697	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a698	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42516					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a699					Of:
.a699	a0 a6		ldy #$a6			ldy #>_runtime		; Check if value is equal to this case.
.a69b	a9 ae		lda #$ae			lda #<_runtime
.a69d	20 48 ce	jsr $ce48			jsr Jsr_Comma_YA
.a6a0	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a6a2	20 09 ce	jsr $ce09			jsr C_Comma_A
.a6a5	20 2c cb	jsr $cb2c			jsr Here		; Put the origination address on the stack for else/then
.a6a8	20 fa b8	jsr $b8fa			jsr Zero
.a6ab	4c 20 ce	jmp $ce20			jmp Comma
=21					CL	.var *-(WordListLink+wh_Xt)
=$a6ae					en = *	; remember here
>a697	15					.byte CL	;wh_CodeLength
.a6ae					_runtime:
.a6ae	e8		inx				inx		; Drop x2
.a6af	e8		inx				inx
.a6b0	b5 22		lda $22,x			lda DStack-2,x	; compare x1 with x2
.a6b2	d5 24		cmp $24,x			cmp DStack+0,x
.a6b4	d0 06		bne $a6bc			bne _NotEq
.a6b6	b5 23		lda $23,x			lda DStack-1,x
.a6b8	d5 25		cmp $25,x			cmp DStack+1,x
.a6ba	f0 33		beq $a6ef			beq zbranch_run2 ; Drop x1 & return to after the jmp abs
.a6bc	60		rts		_NotEq:		rts		; return to the jmp abs to next test
>a6bd	45 6e 64 4f 66			L1:	.text "EndOf"	;  name of word as a string, ending at wh_NameLastChar
>a6c2	c5					.byte (("EndOf"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a6c3	14 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6c5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6c6	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42562					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6c7	4c 1a a7	jmp $a71a	EndOf:		jmp Else
=3					CL	.var *-(WordListLink+wh_Xt)
=$a6ca					en = *	; remember here
>a6c5	03					.byte CL	;wh_CodeLength
>a6ca	49 66				L1:	.text "If"	;  name of word as a string, ending at wh_NameLastChar
>a6cc	c2					.byte (("If"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a6cd	42 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6cf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6d0	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42572					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6d1					If:
.a6d1	20 e2 a6	jsr $a6e2	If3:		jsr zbranch_jsr_comma	; Compile a 0BRANCH
.a6d4					zbranch_jmp0_comma:
.a6d4	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a6d6	20 09 ce	jsr $ce09			jsr C_Comma_A
.a6d9	20 2c cb	jsr $cb2c			jsr Here		; save ptr to address for else/then
.a6dc	a9 00		lda #$00			lda #0			; Stuff zero in for the branch address right now.
.a6de	a8		tay				tay			; THEN or ELSE will fix it later.
.a6df	4c 23 ce	jmp $ce23			jmp Comma_YA
=17					CL	.var *-(WordListLink+wh_Xt)
=$a6e2					en = *	; remember here
>a6cf	11					.byte CL	;wh_CodeLength
=$ce5c					zbranch_jmp_comma = Jmp_Comma		; compile jmp abs
.a6e2					zbranch_jsr_comma:
.a6e2	a0 a6		ldy #$a6			ldy #>_runtime
.a6e4	a9 e9		lda #$e9			lda #<_runtime
.a6e6	4c 48 ce	jmp $ce48			jmp Jsr_Comma_YA
.a6e9					_runtime:
.a6e9	b5 24		lda $24,x			lda DStack+0,x		;flag is false?
.a6eb	15 25		ora $25,x			ora DStack+1,x
.a6ed	f0 0d		beq $a6fc			beq zbranch_run_done
.a6ef	18		clc		zbranch_run2:	clc			; move RTS addr over the next jmp abs.
.a6f0	68		pla				pla
.a6f1	69 03		adc #$03			adc #3
.a6f3	90 06		bcc $a6fb			bcc +
.a6f5	a8		tay				tay
.a6f6	68		pla				pla
.a6f7	69 00		adc #$00			adc #0
.a6f9	48		pha				pha
.a6fa	98		tya				tya
.a6fb	48		pha		+		pha
.a6fc					zbranch_run_done:
.a6fc	e8		inx				inx			; Drop f
.a6fd	e8		inx				inx
.a6fe	60		rts				rts
>a6ff	54 68 65 6e			L1:	.text "Then"	;  name of word as a string, ending at wh_NameLastChar
>a703	c4					.byte (("Then"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a704	4c a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a706	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a707	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42627					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a708					Then:
.a708	20 2c cb	jsr $cb2c			jsr Here
.a70b	20 9e d0	jsr $d09e			jsr Swap
.a70e	4c cd cf	jmp $cfcd			jmp Store
=9					CL	.var *-(WordListLink+wh_Xt)
=$a711					en = *	; remember here
>a706	09					.byte CL	;wh_CodeLength
>a711	45 6c 73 65			L1:	.text "Else"	;  name of word as a string, ending at wh_NameLastChar
>a715	a4					.byte (("Else"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a716	83 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a718	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a719	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42645					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a71a					Else:
.a71a	20 d4 a6	jsr $a6d4			jsr zbranch_jmp0_comma	; compile jmp 0, push addr of addr
.a71d	20 2c cb	jsr $cb2c			jsr Here
.a720	20 84 cf	jsr $cf84			jsr Rot
.a723	4c cd cf	jmp $cfcd			jmp Store
=12					CL	.var *-(WordListLink+wh_Xt)
=$a726					en = *	; remember here
>a718	0c					.byte CL	;wh_CodeLength
>a726	42 65 67 69 6e			L1:	.text "Begin"	;  name of word as a string, ending at wh_NameLastChar
>a72b	c5					.byte (("Begin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a72c	95 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a72e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a72f	0d					.byte NN+CO+IM	;wh_Flags	dictionary flags
=42667					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a730	20 2c cb	jsr $cb2c	Begin:		jsr Here	; remember the loop starting location
.a733	a9 30		lda #$30			lda #<Begin	; pairing marker
.a735	4c eb b8	jmp $b8eb			jmp PushZA
=8					CL	.var *-(WordListLink+wh_Xt)
=$a738					en = *	; remember here
>a72e	08					.byte CL	;wh_CodeLength
>a738	41 67 61 69 6e			L1:	.text "Again"	;  name of word as a string, ending at wh_NameLastChar
>a73d	c5					.byte (("Again"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a73e	ab a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a740	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a741	1d					.byte NN+CO+IM+UF	;wh_Flags	dictionary flags
=42685					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a742	20 1d b5	jsr $b51d	Again:		jsr underflow_2
.a745	a9 30		lda #$30			lda #<Begin	; check pairing
.a747	20 e5 b2	jsr $b2e5			jsr QPairCtlA
.a74a	4c 5c ce	jmp $ce5c			jmp Jmp_Comma	; Compile a jmp abs.
=11					CL	.var *-(WordListLink+wh_Xt)
=$a74d					en = *	; remember here
>a740	0b					.byte CL	;wh_CodeLength
>a74d	55 6e 74 69 6c			L1:	.text "Until"	;  name of word as a string, ending at wh_NameLastChar
>a752	85					.byte (("Until"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a753	bd a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a755	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a756	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42706					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a757	a9 30		lda #$30	Until:		lda #<Begin		; check pairing
.a759	20 e5 b2	jsr $b2e5			jsr QPairCtlA
.a75c	4c 95 a7	jmp $a795			jmp ZBranch_Comma	; The address to loop back to is on the stack.
=8					CL	.var *-(WordListLink+wh_Xt)
=$a75f					en = *	; remember here
>a755	08					.byte CL	;wh_CodeLength
>a75f	57 68 69 6c 65			L1:	.text "While"	;  name of word as a string, ending at wh_NameLastChar
>a764	a5					.byte (("While"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a765	d2 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a767	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a768	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42724					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a769	a9 30		lda #$30	While:		lda #<Begin	; check pairing
.a76b	20 e5 b2	jsr $b2e5			jsr QPairCtlA
.a76e	20 d1 a6	jsr $a6d1			jsr If3		; Compile a 0branch & jmp, push addr of addr
.a771	20 9e d0	jsr $d09e			jsr Swap	; Swap the two addresses on the stack.
.a774	a9 30		lda #$30			lda #<Begin	; pairing marker
.a776	4c eb b8	jmp $b8eb			jmp PushZA
=16					CL	.var *-(WordListLink+wh_Xt)
=$a779					en = *	; remember here
>a767	10					.byte CL	;wh_CodeLength
>a779	52 65 70 65 61 74		L1:	.text "Repeat"	;  name of word as a string, ending at wh_NameLastChar
>a77f	86					.byte (("Repeat"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a780	e4 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a782	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a783	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42751					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a784	a9 30		lda #$30	Repeat:		lda #<Begin	; check pairing
.a786	20 e5 b2	jsr $b2e5			jsr QPairCtlA
.a789	20 5c ce	jsr $ce5c			jsr Jmp_Comma	; compile the jmp back
.a78c	20 2c cb	jsr $cb2c			jsr Here	; patch the WHILE jmp operand
.a78f	20 9e d0	jsr $d09e			jsr Swap
.a792	4c cd cf	jmp $cfcd			jmp Store
=17					CL	.var *-(WordListLink+wh_Xt)
=$a795					en = *	; remember here
>a782	11					.byte CL	;wh_CodeLength
.a795					ZBranch_Comma:
.a795	a9 e8		lda #$e8			lda #$e8		; compile inx; inx
.a797	a8		tay				tay
.a798	20 23 ce	jsr $ce23			jsr Comma_YA
.a79b	a9 b5		lda #$b5			lda #$b5		; compile lda DStack-2,x
.a79d	a0 22		ldy #$22			ldy #DStack-2
.a79f	20 23 ce	jsr $ce23			jsr Comma_YA
.a7a2	a9 15		lda #$15			lda #$15		; compile ora DStack-1,x
.a7a4	a0 23		ldy #$23			ldy #DStack-1
.a7a6	20 23 ce	jsr $ce23			jsr Comma_YA
.a7a9	a9 f0		lda #$f0			lda #$f0		; BEQ
.a7ab	d0 0f		bne $a7bc			bne Branch_CommaA
>a7ad	42 72 61 6e 63 68 2c		L1:	.text "Branch,"	;  name of word as a string, ending at wh_NameLastChar
>a7b4	87					.byte (("Branch,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a7b5	ff a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a7b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a7b8	08					.byte NN	;wh_Flags	dictionary flags
=42804					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a7b9	20 c2 b4	jsr $b4c2			jsr PopA		; pop opcode to A
.a7bc					Branch_CommaA:
.a7bc	48		pha				pha			; save branch opcode
.a7bd	38		sec				sec			; AY= displacement+2
.a7be	b5 24		lda $24,x			lda DStack+0,x
.a7c0	e5 00		sbc $00				sbc cp+0
.a7c2	a8		tay				tay
.a7c3	b5 25		lda $25,x			lda DStack+1,x
.a7c5	e5 01		sbc $01				sbc cp+1
.a7c7	c9 ff		cmp #$ff			cmp #$ff		; offset maybe in range?
.a7c9	f0 0b		beq $a7d6			beq _rev
.a7cb	68		pla		_2byte:		pla			; restore branch opcode
.a7cc	49 20		eor #$20			eor #$20		; reverse branch sense
.a7ce	a0 03		ldy #$03			ldy #3			; compile Bcc *+5
.a7d0	20 23 ce	jsr $ce23			jsr Comma_YA
.a7d3	4c 5c ce	jmp $ce5c			jmp Jmp_Comma		; compile JMP abs
.a7d6	c0 82		cpy #$82	_rev:		cpy #$80+2		; offset in range?
.a7d8	90 f1		bcc $a7cb			bcc _2byte
.a7da	e8		inx		_1byte:		inx			; Drop address
.a7db	e8		inx				inx
.a7dc	88		dey				dey			; fix displacement
.a7dd	88		dey				dey
.a7de	68		pla				pla			; restore branch opcode
.a7df	4c 23 ce	jmp $ce23			jmp Comma_YA		; compile Bcc
>a7e2	57 6f 72 64			L1:	.text "Word"	;  name of word as a string, ending at wh_NameLastChar
>a7e6	84					.byte (("Word"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a7e7	34 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a7e9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a7ea	18					.byte UF+NN	;wh_Flags	dictionary flags
=42854					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a7eb					Word:
.a7eb	20 08 b5	jsr $b508			jsr underflow_1
.a7ee	a4 08		ldy $08				ldy toin+0		; >IN
.a7f0	c4 06		cpy $06		_DelimLoop:	cpy ciblen+0		; quit if end of input
.a7f2	f0 09		beq $a7fd			beq _found_char
.a7f4	b1 04		lda ($04),y			lda (cib),y
.a7f6	d5 24		cmp $24,x			cmp DStack+0,x		; ASCII of delimiter
.a7f8	d0 03		bne $a7fd			bne _found_char
.a7fa	c8		iny				iny
.a7fb	d0 f3		bne $a7f0			bne _DelimLoop
.a7fd					_found_char:
.a7fd	84 08		sty $08				sty toin+0		; Save index of where word starts
.a7ff	20 e2 bb	jsr $bbe2			jsr Parse		; The real work is done by parse
.a802	20 c2 b4	jsr $b4c2			jsr PopA		; pop u
.a805	85 16		sta $16				sta tmp2+0
.a807	20 e9 b4	jsr $b4e9			jsr PopTmp1		; pop addr
.a80a	20 2c cb	jsr $cb2c			jsr Here		; Return caddr
.a80d	a5 16		lda $16				lda tmp2+0
.a80f	a0 00		ldy #$00			ldy #0			; Save length of string
.a811	f0 03		beq $a816			beq _CopyStart
.a813	b1 14		lda ($14),y	_CopyLoop:	lda (tmp1),y
.a815	c8		iny				iny
.a816	20 09 ce	jsr $ce09	_CopyStart:	jsr C_Comma_A
.a819	c4 16		cpy $16				cpy tmp2+0
.a81b	90 f6		bcc $a813			bcc _CopyLoop
=50					CL	.var *-(WordListLink+wh_Xt)
=$a81d					en = *	; remember here
>a7e9	32					.byte CL	;wh_CodeLength
.a81d	60		rts				rts
>a81e	28				L1:	.text "("	;  name of word as a string, ending at wh_NameLastChar
>a81f	01					.byte (("("[-1]&7)<<5)+(*-L1)	;wh_HNL
>a820	66 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a822	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a823	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42911					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a824	a9 29		lda #$29	Paren:		lda #')'		; separator
.a826	20 e5 bb	jsr $bbe5			jsr Parse_A		; Call parse.
.a829	4c 05 c6	jmp $c605			jmp Two_drop		; 2Drop the result.
=8					CL	.var *-(WordListLink+wh_Xt)
=$a82c					en = *	; remember here
>a822	08					.byte CL	;wh_CodeLength
>a82c	2e 28				L1:	.text ".("	;  name of word as a string, ending at wh_NameLastChar
>a82e	02					.byte ((".("[-1]&7)<<5)+(*-L1)	;wh_HNL
>a82f	9f a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a831	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a832	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42926					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a833	a9 29		lda #$29	Dot_paren:	lda #')'
.a835	20 e5 bb	jsr $bbe5			jsr Parse_A
.a838	4c 08 cf	jmp $cf08			jmp Type
=8					CL	.var *-(WordListLink+wh_Xt)
=$a83b					en = *	; remember here
>a831	08					.byte CL	;wh_CodeLength
>a83b	48 61 73 68			L1:	.text "Hash"	;  name of word as a string, ending at wh_NameLastChar
>a83f	04					.byte (("Hash"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a840	ae a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a842	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a843	08					.byte NN	;wh_Flags	dictionary flags
=42943					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a844	20 c2 b4	jsr $b4c2	Hash:		jsr PopA		; save length
.a847	85 16		sta $16				sta tmp2+0
.a849	b5 24		lda $24,x			lda DStack+0,x		; copy addr
.a84b	b4 25		ldy $25,x			ldy DStack+1,x
.a84d	85 14		sta $14				sta tmp1+0
.a84f	84 15		sty $15				sty tmp1+1
.a851	a9 b3		lda #$b3			lda #$b3		; init hash
.a853	95 24		sta $24,x			sta DStack+0,x
.a855	95 25		sta $25,x			sta DStack+1,x
.a857	a0 00		ldy #$00			ldy #0			; for each char
.a859	f0 15		beq $a870			beq _next
.a85b	b1 14		lda ($14),y	_loop:		lda (tmp1),y		;   get char
.a85d	c9 61		cmp #$61			cmp #'a'		;   uppercase
.a85f	90 06		bcc $a867			bcc _3
.a861	c9 7b		cmp #$7b			cmp #'z'+1
.a863	b0 02		bcs $a867			bcs _3
.a865	29 df		and #$df			and #$df
.a867	16 24		asl $24,x	_3:		asl DStack+0,x		;   add to hash
.a869	36 25		rol $25,x			rol DStack+1,x
.a86b	75 24		adc $24,x			adc DStack+0,x
.a86d	95 24		sta $24,x			sta DStack+0,x
.a86f	c8		iny				iny
.a870	c4 16		cpy $16		_Next:		cpy tmp2+0
.a872	90 e7		bcc $a85b			bcc _loop
=48					CL	.var *-(WordListLink+wh_Xt)
=$a874					en = *	; remember here
>a842	30					.byte CL	;wh_CodeLength
.a874	60		rts				rts
>a875	45 6e 76 69 72 6f 6e 6d		L1:	.text "Environment?"	;  name of word as a string, ending at wh_NameLastChar
>a87d	65 6e 74 3f
>a881	ec					.byte (("Environment?"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a882	bf a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a884	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a885	08					.byte NN	;wh_Flags	dictionary flags
=43009					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a886					Environment_Q:
.a886	20 44 a8	jsr $a844			jsr Hash		; ( hash )
.a889	a0 00		ldy #$00			ldy #0			; Y= table index
.a88b	f0 0a		beq $a897			beq _entry_test
.a88d	98		tya		_entry_next:	tya
.a88e	c0 34		cpy #$34			cpy #_table_dbl		; if double
.a890	90 02		bcc $a894			bcc +
.a892	69 01		adc #$01			adc #6-4-1		;   skip double
.a894	69 04		adc #$04	+		adc #4			;   skip single
.a896	a8		tay		_3:		tay
.a897	b9 cb a8	lda $a8cb,y	_entry_test:	lda _Table+0,y		; match?
.a89a	f0 28		beq $a8c4			beq _notfound
.a89c	d5 24		cmp $24,x			cmp DStack+0,x
.a89e	d0 ed		bne $a88d			bne _entry_next
.a8a0	b9 cc a8	lda $a8cc,y			lda _Table+1,y
.a8a3	d5 25		cmp $25,x			cmp DStack+1,x
.a8a5	d0 e6		bne $a88d			bne _entry_next
.a8a7	b9 cd a8	lda $a8cd,y			lda _Table+2,y
.a8aa	95 24		sta $24,x			sta DStack+0,x
.a8ac	b9 ce a8	lda $a8ce,y			lda _Table+3,y
.a8af	95 25		sta $25,x			sta DStack+1,x
.a8b1	c0 34		cpy #$34			cpy #_table_dbl		; single or double data?
.a8b3	90 0c		bcc $a8c1			bcc _single
.a8b5	ca		dex				dex			;  push 2nd cell
.a8b6	ca		dex				dex
.a8b7	b9 cf a8	lda $a8cf,y			lda _Table+4,y
.a8ba	95 24		sta $24,x			sta DStack+0,x
.a8bc	b9 d0 a8	lda $a8d0,y			lda _Table+5,y
.a8bf	95 25		sta $25,x			sta DStack+1,x
.a8c1					_single:
.a8c1	4c c9 b8	jmp $b8c9			jmp True		; return True
.a8c4					_notfound:
.a8c4	a9 00		lda #$00			lda #0			; return 0
.a8c6	95 24		sta $24,x			sta DStack+0,x
.a8c8	95 25		sta $25,x			sta DStack+1,x
.a8ca	60		rts				rts
=69					CL	.var *-(WordListLink+wh_Xt)
=$a8cb					en = *	; remember here
>a884	45					.byte CL	;wh_CodeLength
.a8cb					_Table:
>a8cb	5e e6 ff 7f				.word $e65e,$7fff	; "/COUNTED-STRING"
>a8cf	be 79 ff 00				.word $79BE,$ff		; "/HOLD"
>a8d3	b9 3c 54 00				.word $3cb9,padoffset	; "/PAD"
>a8d7	8b 81 08 00				.word $818b,8		; "ADDRESS-UNIT-BITS"
>a8db	57 fc 00 00				.word $fc57,0		; "FLOORED"	we have symmetric)
>a8df	4f fb ff 00				.word $fb4f,$ff		; "MAX-CHAR"
>a8e3	56 7f ff 7f				.word $7f56,$7fff	; "MAX-N"
>a8e7	5d 7f ff ff				.word $7f5d,$ffff	; "MAX-U"
>a8eb	38 ce 80 00				.word $ce38,$80		; "RETURN-STACK-CELLS"
>a8ef	f2 c0 14 00				.word $c0f2,DStack0/2	; "STACK-CELLS"
>a8f3	36 e3 09 00				.word $e336,9		; "WORDLISTS"
>a8f7	4a f2 ff ff				.word $f24a,$ffff	; "FLOATING"		flag	no	   floating-point word set present
>a8fb	01 99 0a 00				.word $9901,FDim	; "FLOATING-STACK"	n	yes	   If n = zero, floating-point numbers are
=52					_table_dbl = *-_Table	; These return a double-cell number
>a8ff	4c 7f ff ff ff 7f			.word $7f4c,$ffff,$7fff	; "MAX-D"
>a905	fe fe ff ff ff ff			.word $fefe,$ffff,$ffff	; "MAX-UD"
>a90b	00					.byte 0		; end of list
>a90c	44 75 6d 70			L1:	.text "Dump"	;  name of word as a string, ending at wh_NameLastChar
>a910	04					.byte (("Dump"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a911	01 a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a913	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a914	18					.byte UF+NN	;wh_Flags	dictionary flags
=43152					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a915					Dump:
.a915	20 1d b5	jsr $b51d			jsr underflow_2
.a918	ca		dex				dex			; alloc work area
.a919	ca		dex				dex
.a91a					_row:
.a91a	20 28 ac	jsr $ac28			jsr CR
.a91d	b5 29		lda $29,x			lda DStack+5,x		; print address number
.a91f	20 9e a9	jsr $a99e			jsr C_Dot_Hex_A
.a922	b5 28		lda $28,x			lda DStack+4,x
.a924	20 9e a9	jsr $a99e			jsr C_Dot_Hex_A
.a927	20 fb ce	jsr $cefb			jsr Space
.a92a	20 fb ce	jsr $cefb			jsr Space
.a92d	a9 00		lda #$00			lda #0
.a92f	95 24		sta $24,x			sta DStack+0,x
.a931					_loop:
.a931	b5 26		lda $26,x			lda DStack+2,x
.a933	15 27		ora $27,x			ora DStack+3,x
.a935	f0 36		beq $a96d			beq _all_printed
.a937	a1 28		lda ($28,x)			lda (DStack+4,x)
.a939	20 9e a9	jsr $a99e			jsr C_Dot_Hex_A
.a93c	20 fb ce	jsr $cefb			jsr Space
.a93f	a1 28		lda ($28,x)			lda (DStack+4,x)
.a941	20 c5 a9	jsr $a9c5			jsr is_printable
.a944	b0 02		bcs $a948			bcs _printable
.a946	a9 2e		lda #$2e			lda #'.'		 ; Print dot if not printable
.a948					_printable:
.a948	b4 24		ldy $24,x			ldy DStack+0,x
.a94a	91 00		sta ($00),y			sta (cp),y
.a94c	c0 07		cpy #$07			cpy #7
.a94e	d0 03		bne $a953			bne +
.a950	20 fb ce	jsr $cefb			jsr Space
.a953					+
.a953	f6 28		inc $28,x			inc DStack+4,x
.a955	d0 02		bne $a959			bne +
.a957	f6 29		inc $29,x			inc DStack+5,x
.a959					+
.a959	20 46 cb	jsr $cb46			jsr NOS_One_Minus	; loop counter
.a95c	f6 24		inc $24,x			inc DStack+0,x
.a95e	b5 24		lda $24,x			lda DStack+0,x
.a960	c9 10		cmp #$10			cmp #16
.a962	90 cd		bcc $a931			bcc _loop		; next byte
.a964	20 fb ce	jsr $cefb			jsr Space
.a967	20 7c a9	jsr $a97c			jsr dump_print_ascii
.a96a	4c 1a a9	jmp $a91a			jmp _row		; new row
.a96d					_all_printed:
.a96d	b5 24		lda $24,x			lda DStack+0,x
.a96f	f0 06		beq $a977			beq _done
.a971	20 fb ce	jsr $cefb			jsr Space
.a974	20 7c a9	jsr $a97c			jsr dump_print_ascii
.a977					_done:
.a977	e8		inx				inx			; drop work area
.a978	e8		inx				inx
.a979	4c 05 c6	jmp $c605			jmp Two_drop		; one byte less than 4x INX
.a97c					dump_print_ascii:
.a97c	a0 00		ldy #$00			ldy #0
.a97e					_loop:
.a97e	b1 00		lda ($00),y			lda (cp),y
.a980	20 ee ce	jsr $ceee			jsr Emit_A
.a983	c8		iny				iny
.a984	c0 08		cpy #$08			cpy #8
.a986	d0 03		bne $a98b			bne +
.a988	20 fb ce	jsr $cefb			jsr Space
.a98b					+
.a98b	98		tya				tya
.a98c	d5 24		cmp $24,x			cmp DStack+0,x
.a98e	90 ee		bcc $a97e			bcc _loop
.a990	60		rts				rts
=124					CL	.var *-(WordListLink+wh_Xt)
=$a991					en = *	; remember here
>a913	7c					.byte CL	;wh_CodeLength
>a991	43 2e 48 65 78			L1:	.text "C.Hex"	;  name of word as a string, ending at wh_NameLastChar
>a996	05					.byte (("C.Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a997	90 a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a999	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a99a	08					.byte NN	;wh_Flags	dictionary flags
=43286					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a99b	20 c2 b4	jsr $b4c2	C_Dot_Hex:	jsr PopA
.a99e	48		pha		C_Dot_Hex_A:	pha
.a99f	4a		lsr a				lsr		; convert high nibble first
.a9a0	4a		lsr a				lsr
.a9a1	4a		lsr a				lsr
.a9a2	4a		lsr a				lsr
.a9a3	20 a7 a9	jsr $a9a7			jsr _nibble_to_ascii
.a9a6	68		pla				pla
.a9a7					_nibble_to_ascii:
.a9a7	29 0f		and #$0f			and #$0F	; only use lower nibble
.a9a9	c9 0a		cmp #$0a			cmp #9+1
.a9ab	90 02		bcc $a9af			bcc +
.a9ad	69 06		adc #$06			adc #6
.a9af	69 30		adc #$30	+		adc #'0'
.a9b1	4c ee ce	jmp $ceee			jmp Emit_A
=25					CL	.var *-(WordListLink+wh_Xt)
=$a9b4					en = *	; remember here
>a999	19					.byte CL	;wh_CodeLength
>a9b4	2e 48 65 78			L1:	.text ".Hex"	;  name of word as a string, ending at wh_NameLastChar
>a9b8	04					.byte ((".Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a9b9	16 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9bc	08					.byte NN	;wh_Flags	dictionary flags
=43320					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9bd	b5 25		lda $25,x	Dot_Hex:	lda DStack+1,x	; do hi byte
.a9bf	20 9e a9	jsr $a99e			jsr C_Dot_Hex_A
.a9c2	4c 9b a9	jmp $a99b			jmp C_Dot_Hex	; do lo byte
=8					CL	.var *-(WordListLink+wh_Xt)
=$a9c5					en = *	; remember here
>a9bb	08					.byte CL	;wh_CodeLength
.a9c5					is_printable:
.a9c5	c9 20		cmp #$20	                cmp #AscSP              ; $20
.a9c7	90 07		bcc $a9d0	                bcc _done
.a9c9	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.a9cb	b0 02		bcs $a9cf	                bcs _failed
.a9cd	38		sec		                sec
.a9ce	60		rts		                rts
.a9cf	18		clc		_failed:	clc
.a9d0	60		rts		_done:		rts
>a9d1	2e 53				L1:	.text ".S"	;  name of word as a string, ending at wh_NameLastChar
>a9d3	62					.byte ((".S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a9d4	38 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9d6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9d7	08					.byte NN	;wh_Flags	dictionary flags
=43347					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9d8					Dot_s:
.a9d8	a9 3c		lda #$3c			lda #'<'
.a9da	20 ee ce	jsr $ceee			jsr Emit_A
.a9dd	20 42 c3	jsr $c342			jsr Depth	; ( -- u )
.a9e0	20 33 cd	jsr $cd33			jsr print_u
.a9e3	a9 3e		lda #$3e			lda #'>'
.a9e5	20 ee ce	jsr $ceee			jsr Emit_A
.a9e8	20 fb ce	jsr $cefb			jsr Space
.a9eb	a0 28		ldy #$28			ldy #DStack0		; for each cell on the stack
.a9ed	88		dey		_loop:		dey
.a9ee	88		dey				dey
.a9ef	86 14		stx $14				stx tmp1
.a9f1	c4 14		cpy $14				cpy tmp1
.a9f3	90 15		bcc $aa0a			bcc _done
.a9f5	98		tya				tya			; save index
.a9f6	48		pha				pha
.a9f7	ca		dex				dex			; push stack[index]
.a9f8	ca		dex				dex
.a9f9	b9 24 00	lda $0024,y			lda DStack+0,y
.a9fc	95 24		sta $24,x			sta DStack+0,x
.a9fe	b9 25 00	lda $0025,y			lda DStack+1,y
.aa01	95 25		sta $25,x			sta DStack+1,x
.aa03	20 e6 cc	jsr $cce6			jsr Dot
.aa06	68		pla				pla			; restore index
.aa07	a8		tay				tay
.aa08	d0 e3		bne $a9ed			bne _loop
.aa0a					_done:
=50					CL	.var *-(WordListLink+wh_Xt)
=$aa0a					en = *	; remember here
>a9d6	32					.byte CL	;wh_CodeLength
.aa0a	60		rts				rts
>aa0b	43 6f 6d 70 61 72 65		L1:	.text "Compare"	;  name of word as a string, ending at wh_NameLastChar
>aa12	a7					.byte (("Compare"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aa13	53 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa15	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa16	18					.byte UF+NN	;wh_Flags	dictionary flags
=43410					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa17					Compare:
.aa17	20 27 b5	jsr $b527			jsr underflow_4
.aa1a	b5 24		lda $24,x			lda DStack+0,x		; tmp3+1= u2.lo
.aa1c	85 19		sta $19				sta tmp3+1
.aa1e	b5 26		lda $26,x			lda DStack+2,x		; tmp2= addr2
.aa20	b4 27		ldy $27,x			ldy DStack+3,x
.aa22	85 16		sta $16				sta tmp2+0
.aa24	84 17		sty $17				sty tmp2+1
.aa26	b5 28		lda $28,x			lda DStack+4,x		; tmp3+0= u1.lo
.aa28	85 18		sta $18				sta tmp3+0
.aa2a	b5 2a		lda $2a,x			lda DStack+6,x		; tmp1= addr1
.aa2c	b4 2b		ldy $2b,x			ldy DStack+7,x
.aa2e	85 14		sta $14				sta tmp1+0
.aa30	84 15		sty $15				sty tmp1+1
.aa32	a0 00		ldy #$00			ldy #0		; for each char
.aa34					_loop:
.aa34	c4 18		cpy $18				cpy tmp3+0	; string1 empty?
.aa36	f0 13		beq $aa4b			beq _str1
.aa38					_L1:
.aa38	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.aa3a	f0 27		beq $aa63			beq _str2
.aa3c					_L2:
.aa3c	b1 14		lda ($14),y			lda (tmp1),y	; Are they different?
.aa3e	d1 16		cmp ($16),y			cmp (tmp2),y
.aa40	d0 19		bne $aa5b			bne _neq
.aa42	c8		iny				iny		; to next char
.aa43	d0 ef		bne $aa34			bne _loop
.aa45	e6 15		inc $15				inc tmp1+1	; to next page
.aa47	e6 17		inc $17				inc tmp2+1
.aa49	d0 e9		bne $aa34			bne _loop
.aa4b	d6 29		dec $29,x	_str1:		dec DStack+5,x	; string1 really empty?
.aa4d	10 e9		bpl $aa38			bpl _L1
.aa4f	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.aa51	d0 0a		bne $aa5d			bne _less
.aa53	b5 25		lda $25,x			lda DStack+1,x
.aa55	d0 06		bne $aa5d			bne _less
.aa57	a9 00		lda #$00	_equal:		lda #0		; Return 0
.aa59	f0 0e		beq $aa69			beq _gt2
.aa5b	b0 0a		bcs $aa67	_neq:		bcs _greater
.aa5d	a9 ff		lda #$ff	_less:		lda #$FF	; Return -1
.aa5f	95 2a		sta $2a,x			sta DStack+6,x
.aa61	d0 0a		bne $aa6d			bne _done
.aa63	d6 25		dec $25,x	_str2:		dec DStack+1,x	; is string2 empty?
.aa65	10 d5		bpl $aa3c			bpl _L2
.aa67	a9 01		lda #$01	_greater:	lda #1		; Return 1
.aa69	95 2a		sta $2a,x	_gt2:		sta DStack+6,x
.aa6b	a9 00		lda #$00			lda #0
.aa6d	95 2b		sta $2b,x	_done:		sta DStack+7,x
.aa6f	8a		txa				txa		; Remove all but the result from the stack.
.aa70	18		clc				clc
.aa71	69 06		adc #$06			adc #6
.aa73	aa		tax				tax
=93					CL	.var *-(WordListLink+wh_Xt)
=$aa74					en = *	; remember here
>aa15	5d					.byte CL	;wh_CodeLength
.aa74	60		rts				rts
>aa75	53 65 61 72 63 68		L1:	.text "Search"	;  name of word as a string, ending at wh_NameLastChar
>aa7b	06					.byte (("Search"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aa7c	92 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa7e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa7f	18					.byte UF+NN	;wh_Flags	dictionary flags
=43515					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa80					Search:
.aa80	20 27 b5	jsr $b527			jsr underflow_4
.aa83	b5 24		lda $24,x			lda DStack+0,x
.aa85	15 25		ora $25,x			ora DStack+1,x
.aa87	d0 09		bne $aa92			bne _start_search
.aa89	e8		inx				inx		; Drop u2
.aa8a	e8		inx				inx
.aa8b	a9 ff		lda #$ff			lda #$FF	; overwrite addr2 with a true flag
.aa8d	95 24		sta $24,x			sta DStack+0,x
.aa8f	95 25		sta $25,x			sta DStack+1,x
.aa91	60		rts				rts
.aa92					_start_search:
.aa92	20 fa b8	jsr $b8fa			jsr Zero
.aa95					_search_loop:
.aa95	18		clc				clc
.aa96	b5 24		lda $24,x			lda DStack+0,x
.aa98	75 26		adc $26,x			adc DStack+2,x
.aa9a	85 14		sta $14				sta tmp1+0
.aa9c	b5 25		lda $25,x			lda DStack+1,x
.aa9e	75 27		adc $27,x			adc DStack+3,x
.aaa0	85 15		sta $15				sta tmp1+1
.aaa2	d5 2b		cmp $2b,x			cmp DStack+7,x
.aaa4	90 13		bcc $aab9			bcc _init_comparison ; Obviously less
.aaa6	d0 06		bne $aaae			bne _not_found
.aaa8	b5 2a		lda $2a,x			lda DStack+6,x
.aaaa	c5 14		cmp $14				cmp tmp1
.aaac	b0 0b		bcs $aab9			bcs _init_comparison
.aaae					_not_found:
.aaae	e8		inx				inx		; Remove offset
.aaaf	e8		inx				inx
.aab0	e8		inx				inx		; Remove u2
.aab1	e8		inx				inx
.aab2	a9 00		lda #$00			lda #0
.aab4	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a false flag
.aab6	95 25		sta $25,x			sta DStack+1,x
.aab8	60		rts				rts
.aab9					_init_comparison:
.aab9	18		clc				clc
.aaba	b5 2c		lda $2c,x			lda DStack+8,x
.aabc	75 24		adc $24,x			adc DStack+0,x
.aabe	85 14		sta $14				sta tmp1
.aac0	b5 2d		lda $2d,x			lda DStack+9,x
.aac2	75 25		adc $25,x			adc DStack+1,x
.aac4	85 15		sta $15				sta tmp1+1
.aac6	b5 28		lda $28,x			lda DStack+4,x
.aac8	85 16		sta $16				sta tmp2
.aaca	b5 29		lda $29,x			lda DStack+5,x
.aacc	85 17		sta $17				sta tmp2+1
.aace	b5 26		lda $26,x			lda DStack+2,x
.aad0	85 18		sta $18				sta tmp3+0
.aad2	b5 27		lda $27,x			lda DStack+3,x
.aad4	85 19		sta $19				sta tmp3+1
.aad6					_comparison_loop:
.aad6	a0 00		ldy #$00			ldy #0
.aad8	b1 14		lda ($14),y			lda (tmp1),y
.aada	d1 16		cmp ($16),y			cmp (tmp2),y
.aadc	f0 06		beq $aae4			beq _letters_match
.aade	20 60 cb	jsr $cb60			jsr One_plus
.aae1	4c 95 aa	jmp $aa95			jmp _search_loop
.aae4					_letters_match:
.aae4	e6 14		inc $14				inc tmp1
.aae6	d0 02		bne $aaea			bne +
.aae8	e6 15		inc $15				inc tmp1+1
.aaea					+
.aaea	e6 16		inc $16				inc tmp2
.aaec	d0 02		bne $aaf0			bne +
.aaee	e6 17		inc $17				inc tmp2+1
.aaf0					+
.aaf0	a5 18		lda $18				lda tmp3
.aaf2	d0 02		bne $aaf6			bne +
.aaf4	c6 19		dec $19				dec tmp3+1
.aaf6					+
.aaf6	c6 18		dec $18				dec tmp3
.aaf8	a5 18		lda $18				lda tmp3
.aafa	05 19		ora $19				ora tmp3+1
.aafc	d0 d8		bne $aad6			bne _comparison_loop ; Check the next letter
.aafe	18		clc				clc
.aaff	b5 24		lda $24,x			lda DStack+0,x
.ab01	75 2c		adc $2c,x			adc DStack+8,x
.ab03	95 2c		sta $2c,x			sta DStack+8,x
.ab05	b5 25		lda $25,x			lda DStack+1,x
.ab07	75 2d		adc $2d,x			adc DStack+9,x
.ab09	95 2d		sta $2d,x			sta DStack+9,x
.ab0b	38		sec				sec
.ab0c	b5 2a		lda $2a,x			lda DStack+6,x
.ab0e	f5 24		sbc $24,x			sbc DStack+0,x
.ab10	95 2a		sta $2a,x			sta DStack+6,x
.ab12	b5 2b		lda $2b,x			lda DStack+7,x
.ab14	f5 25		sbc $25,x			sbc DStack+1,x
.ab16	95 2b		sta $2b,x			sta DStack+7,x
.ab18	e8		inx				inx		; drop offset
.ab19	e8		inx				inx
.ab1a	e8		inx				inx		; drop u2
.ab1b	e8		inx				inx
.ab1c	a9 ff		lda #$ff			lda #$FF
.ab1e	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a true flag.
.ab20	95 25		sta $25,x			sta DStack+1,x
=162					CL	.var *-(WordListLink+wh_Xt)
=$ab22					en = *	; remember here
>aa7e	a2					.byte CL	;wh_CodeLength
.ab22	60		rts				rts
>ab23	4d 61 72 6b 65 72		L1:	.text "Marker"	;  name of word as a string, ending at wh_NameLastChar
>ab29	46					.byte (("Marker"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab2a	fb a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab2c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab2d	0c					.byte IM+NN	;wh_Flags	dictionary flags
=43689					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab2e					Marker:
.ab2e	20 2c cb	jsr $cb2c			jsr Here		; Save original CP, which
.ab31	20 34 c2	jsr $c234			jsr Header_Build	; compile a word header, but don't link into wordlist
.ab34	a0 ab		ldy #$ab			ldy #>_runtime		; compile JSR _runtime
.ab36	a9 4e		lda #$4e			lda #<_runtime
.ab38	20 48 ce	jsr $ce48			jsr Jsr_Comma_YA
.ab3b	20 20 ce	jsr $ce20			jsr Comma		; Append original CP
.ab3e	a0 00		ldy #$00			ldy #0			; Start at CURRENT
.ab40	b9 10 03	lda $0310,y	_loop:		lda CurrentV,y
.ab43	20 09 ce	jsr $ce09			jsr C_Comma_A
.ab46	c8		iny				iny
.ab47	c0 24		cpy #$24			cpy #MarkEnd-CurrentV	; One past the end of the search order.
.ab49	90 f5		bcc $ab40			bcc _loop
.ab4b	4c 29 c2	jmp $c229			jmp Header_Link		; link built header into current dictionary
=32					CL	.var *-(WordListLink+wh_Xt)
=$ab4e					en = *	; remember here
>ab2c	20					.byte CL	;wh_CodeLength
.ab4e					_runtime:
.ab4e	68		pla				pla		; Pop the RTS address off the stack
.ab4f	85 14		sta $14				sta tmp1+0
.ab51	68		pla				pla
.ab52	85 15		sta $15				sta tmp1+1
.ab54	a0 01		ldy #$01			ldy #1		; start just aftet JSR _runtime
.ab56	b1 14		lda ($14),y			lda (tmp1),y	; CP was stored first
.ab58	85 00		sta $00				sta cp+0
.ab5a	c8		iny				iny
.ab5b	b1 14		lda ($14),y			lda (tmp1),y
.ab5d	85 01		sta $01				sta cp+1
.ab5f	c8		iny				iny
.ab60					_rloop:
.ab60	b1 14		lda ($14),y			lda (tmp1),y
.ab62	99 0d 03	sta $030d,y			sta CurrentV-2-1,y
.ab65	c8		iny				iny
.ab66	c0 27		cpy #$27			cpy #MarkEnd-CurrentV+2+1 ; One past the end of the search order.
.ab68	90 f6		bcc $ab60			bcc _rloop
.ab6a	60		rts				rts
>ab6b	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
>ab70	65					.byte (("Words"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab71	a9 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab73	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab74	08					.byte NN	;wh_Flags	dictionary flags
=43760					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab75					Words:
.ab75	a9 ff		lda #$ff			lda #$ff
.ab77	20 eb b8	jsr $b8eb			jsr PushZA		; Alloc space for line size & wordlist #
.ab7a	ca		dex				dex			; Alloc space for a nt
.ab7b	ca		dex				dex
.ab7c					_wordlist_next:
.ab7c	20 28 ac	jsr $ac28			jsr CR			; start wordlist on new line
.ab7f	f6 26		inc $26,x			inc DStack+2,x		; step to next search wordlist
.ab81	b4 26		ldy $26,x			ldy DStack+2,x		; Y= wordlist index
.ab83	cc 2a 03	cpy $032a			cpy Num_OrderV
.ab86	b0 44		bcs $abcc			bcs _wordslist_done	; ran out of search wordlist entries?
.ab88	b9 2b 03	lda $032b,y			lda Search_OrderV,y	; A= SEARCH-ORDER[Y]	Get the current wordlist id
.ab8b	0a		asl a				asl			; TOS= WORDLISTS[A]
.ab8c	a8		tay				tay
.ab8d	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.ab90	95 24		sta $24,x			sta DStack+0,x
.ab92	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.ab95	95 25		sta $25,x			sta DStack+1,x
.ab97	f0 e3		beq $ab7c			beq _wordlist_next	; end of list?
.ab99					_word_loop:
.ab99	20 80 d0	jsr $d080			jsr Dup			; ( wordlist# nt nt )
.ab9c	20 fb be	jsr $befb			jsr Name_To_String	; ( wordlist# nt addr u )
.ab9f	b5 2b		lda $2b,x			lda DStack+7,x
.aba1	38		sec				sec			; don't forget the space between words
.aba2	75 24		adc $24,x			adc DStack+0,x
.aba4	c9 4e		cmp #$4e			cmp #MAX_LINE_LENGTH-1
.aba6	90 05		bcc $abad			bcc +
.aba8	20 28 ac	jsr $ac28			jsr CR
.abab	b5 24		lda $24,x			lda DStack+0,x		; After going to next line, start
.abad	95 2b		sta $2b,x	+		sta DStack+7,x
.abaf	20 08 cf	jsr $cf08			jsr Type		; ( wordlist# nt )
.abb2	20 fb ce	jsr $cefb			jsr Space
.abb5	b5 24		lda $24,x			lda DStack+0,x
.abb7	85 14		sta $14				sta tmp1+0
.abb9	b5 25		lda $25,x			lda DStack+1,x
.abbb	85 15		sta $15				sta tmp1+1
.abbd	a0 81		ldy #$81			ldy #wh_WordListLink	; get next word nt
.abbf	b1 14		lda ($14),y			lda (tmp1),y
.abc1	95 24		sta $24,x			sta DStack+0,x
.abc3	c8		iny				iny
.abc4	b1 14		lda ($14),y			lda (tmp1),y
.abc6	95 25		sta $25,x			sta DStack+1,x
.abc8	d0 cf		bne $ab99			bne _word_loop		; end of list?
.abca	f0 b0		beq $ab7c			beq _wordlist_next
.abcc					_wordslist_done:
.abcc	4c 05 c6	jmp $c605			jmp Two_Drop
=90					CL	.var *-(WordListLink+wh_Xt)
=$abcf					en = *	; remember here
>ab73	5a					.byte CL	;wh_CodeLength
>abcf	57 6f 72 64 53 69 7a 65		L1:	.text "WordSize"	;  name of word as a string, ending at wh_NameLastChar
>abd7	a8					.byte (("WordSize"[-1]&7)<<5)+(*-L1)	;wh_HNL
>abd8	f0 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abda	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abdb	08					.byte NN	;wh_Flags	dictionary flags
=43863					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abdc	20 e9 b4	jsr $b4e9	WordSize:	jsr PopTmp1
.abdf	a0 83		ldy #$83			ldy #Wh_CodeLength
.abe1	b1 14		lda ($14),y			lda (tmp1),y
.abe3	4c eb b8	jmp $b8eb			jmp PushZA
=10					CL	.var *-(WordListLink+wh_Xt)
=$abe6					en = *	; remember here
>abda	0a					.byte CL	;wh_CodeLength
>abe6	41 6c 69 67 6e 65 64		L1:	.text "Aligned"	;  name of word as a string, ending at wh_NameLastChar
>abed	87					.byte (("Aligned"[-1]&7)<<5)+(*-L1)	;wh_HNL
>abee	57 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abf0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abf1	00					.byte 0	;wh_Flags	dictionary flags
=43885					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abf2					Aligned:
=0					CL	.var *-(WordListLink+wh_Xt)
=$abf2					en = *	; remember here
>abf0	00					.byte CL	;wh_CodeLength
.abf2	60		rts				rts
>abf3	41 6c 69 67 6e			L1:	.text "Align"	;  name of word as a string, ending at wh_NameLastChar
>abf8	c5					.byte (("Align"[-1]&7)<<5)+(*-L1)	;wh_HNL
>abf9	6d ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abfb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abfc	00					.byte 0	;wh_Flags	dictionary flags
=43896					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abfd					Align:
=0					CL	.var *-(WordListLink+wh_Xt)
=$abfd					en = *	; remember here
>abfb	00					.byte CL	;wh_CodeLength
.abfd	60		rts				rts
>abfe	4f 75 74 70 75 74		L1:	.text "Output"	;  name of word as a string, ending at wh_NameLastChar
>ac04	86					.byte (("Output"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ac05	78 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac07	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac08	08					.byte NN	;wh_Flags	dictionary flags
=43908					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac09					xt_output:
.ac09	a0 03		ldy #$03			ldy #>output
.ac0b	a9 06		lda #$06			lda #<output
.ac0d	4c b9 b8	jmp $b8b9			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$ac10					en = *	; remember here
>ac07	07					.byte CL	;wh_CodeLength
>ac10	49 6e 70 75 74			L1:	.text "Input"	;  name of word as a string, ending at wh_NameLastChar
>ac15	85					.byte (("Input"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ac16	84 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac18	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac19	08					.byte NN	;wh_Flags	dictionary flags
=43925					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac1a	a0 03		ldy #$03	xt_input:	ldy #>input
.ac1c	a9 08		lda #$08			lda #<input
.ac1e	4c b9 b8	jmp $b8b9			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$ac21					en = *	; remember here
>ac18	07					.byte CL	;wh_CodeLength
>ac21	43 52				L1:	.text "CR"	;  name of word as a string, ending at wh_NameLastChar
>ac23	42					.byte (("CR"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ac24	95 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac26	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac27	08					.byte NN	;wh_Flags	dictionary flags
=43939					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac28					CR:
.ac28	a9 0a		lda #$0a			lda #AscLF
.ac2a	20 ee ce	jsr $ceee			jsr Emit_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$ac2d					en = *	; remember here
>ac26	05					.byte CL	;wh_CodeLength
.ac2d	60		rts				rts
>ac2e	50 61 67 65			L1:	.text "Page"	;  name of word as a string, ending at wh_NameLastChar
>ac32	a4					.byte (("Page"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ac33	a3 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac35	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac36	08					.byte NN	;wh_Flags	dictionary flags
=43954					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac37	20 ca b9	jsr $b9ca	Page:		jsr SLiteral_Runtime
.ac3a	4c 47 ac	jmp $ac47			  jmp +
>ac3d	1b 5b 32 4a					  .text AscESC,"[2J"	; ANSI clear screen
>ac41	1b 5b 31 3b 31 48				  .text AscESC,"[1;1H"	; move cursor to top left of screen
.ac47	4c 08 cf	jmp $cf08	+		jmp Type
=19					CL	.var *-(WordListLink+wh_Xt)
=$ac4a					en = *	; remember here
>ac35	13					.byte CL	;wh_CodeLength
>ac4a	41 74 2d 58 59			L1:	.text "At-XY"	;  name of word as a string, ending at wh_NameLastChar
>ac4f	25					.byte (("At-XY"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ac50	b2 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac52	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac53	18					.byte UF+NN	;wh_Flags	dictionary flags
=43983					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac54					At_XY:
.ac54	20 1d b5	jsr $b51d			jsr underflow_2
.ac57	ad 00 03	lda $0300			lda base	; Save the BASE
.ac5a	48		pha				pha
.ac5b	20 a4 b2	jsr $b2a4			jsr Decimal	; ANSI escape code values need to be in decimal.
.ac5e	a9 1b		lda #$1b			lda #AscESC
.ac60	20 ee ce	jsr $ceee			jsr Emit_A
.ac63	a9 5b		lda #$5b			lda #'['
.ac65	20 ee ce	jsr $ceee			jsr Emit_A
.ac68	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.ac6a	20 33 cd	jsr $cd33			jsr print_u
.ac6d	a9 3b		lda #$3b			lda #';'
.ac6f	20 ee ce	jsr $ceee			jsr Emit_A
.ac72	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.ac74	20 33 cd	jsr $cd33			jsr print_u
.ac77	a9 48		lda #$48			lda #'H'
.ac79	20 ee ce	jsr $ceee			jsr Emit_A
.ac7c	68		pla				pla		; Restore the base
.ac7d	8d 00 03	sta $0300			sta base
=44					CL	.var *-(WordListLink+wh_Xt)
=$ac80					en = *	; remember here
>ac52	2c					.byte CL	;wh_CodeLength
.ac80	60		rts				rts
>ac81	50 61 64			L1:	.text "Pad"	;  name of word as a string, ending at wh_NameLastChar
>ac84	83					.byte (("Pad"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ac85	cf ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac87	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac88	00					.byte 0	;wh_Flags	dictionary flags
=44036					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac89	ca		dex		Pad:		dex		; push cp+PadOffset
.ac8a	ca		dex				dex
.ac8b	18		clc				clc
.ac8c	a5 00		lda $00				lda cp+0
.ac8e	69 54		adc #$54			adc #PadOffset
.ac90	95 24		sta $24,x			sta DStack+0,x
.ac92	a5 01		lda $01				lda cp+1
.ac94	69 00		adc #$00			adc #0
.ac96	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$ac98					en = *	; remember here
>ac87	0f					.byte CL	;wh_CodeLength
.ac98	60		rts				rts
>ac99	3c 23				L1:	.text "<#"	;  name of word as a string, ending at wh_NameLastChar
>ac9b	62					.byte (("<#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ac9c	04 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac9e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac9f	00					.byte 0	;wh_Flags	dictionary flags
=44059					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aca0					Less_Number_Sign:
.aca0	a9 54		lda #$54			lda #PadOffset		; init hold buffer index
.aca2	8d 34 03	sta $0334			sta ToHold
=5					CL	.var *-(WordListLink+wh_Xt)
=$aca5					en = *	; remember here
>ac9e	05					.byte CL	;wh_CodeLength
.aca5	60		rts				rts
>aca6	23 3e				L1:	.text "#>"	;  name of word as a string, ending at wh_NameLastChar
>aca8	c2					.byte (("#>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aca9	1b ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>acab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acac	10					.byte UF	;wh_Flags	dictionary flags
=44072					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.acad					Number_Sign_Greater:
.acad	20 1d b5	jsr $b51d			jsr underflow_2		; double number
.acb0	18		clc				clc			; addr= cp + ToHold
.acb1	a5 00		lda $00				lda cp+0
.acb3	6d 34 03	adc $0334			adc ToHold
.acb6	95 26		sta $26,x			sta DStack+2,x
.acb8	a5 01		lda $01				lda cp+1
.acba	69 00		adc #$00			adc #0
.acbc	95 27		sta $27,x			sta DStack+3,x
.acbe	38		sec				sec			; u= PadOffset - ToHold
.acbf	a9 54		lda #$54			lda #PadOffset
.acc1	ed 34 03	sbc $0334			sbc ToHold
.acc4	95 24		sta $24,x			sta DStack+0,x
.acc6	a9 00		lda #$00			lda #0
.acc8	95 25		sta $25,x			sta DStack+1,x
=29					CL	.var *-(WordListLink+wh_Xt)
=$acca					en = *	; remember here
>acab	1d					.byte CL	;wh_CodeLength
.acca	60		rts				rts
>accb	48 6f 6c 64			L1:	.text "Hold"	;  name of word as a string, ending at wh_NameLastChar
>accf	84					.byte (("Hold"[-1]&7)<<5)+(*-L1)	;wh_HNL
>acd0	28 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>acd2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acd3	00					.byte 0	;wh_Flags	dictionary flags
=44111					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.acd4	20 c2 b4	jsr $b4c2	Hold:		jsr PopA
.acd7	ce 34 03	dec $0334	Hold_A:		dec ToHold
.acda	ac 34 03	ldy $0334			ldy ToHold
.acdd	91 00		sta ($00),y			sta (cp),y
=11					CL	.var *-(WordListLink+wh_Xt)
=$acdf					en = *	; remember here
>acd2	0b					.byte CL	;wh_CodeLength
.acdf	60		rts				rts
>ace0	23				L1:	.text "#"	;  name of word as a string, ending at wh_NameLastChar
>ace1	61					.byte (("#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ace2	4f ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ace4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ace5	18					.byte UF+NN	;wh_Flags	dictionary flags
=44129					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ace6					Number_Sign:
.ace6	20 1d b5	jsr $b51d			jsr underflow_2		; double number
.ace9	a9 00		lda #$00			lda #0			;   init remainder
.aceb	18		clc				clc
.acec	a0 21		ldy #$21			ldy #32+1		;   for each bit
.acee					_11:
.acee	2a		rol a				rol a			;   shift remainder
.acef	cd 00 03	cmp $0300			cmp base		;   will it fit?
.acf2	90 03		bcc $acf7			bcc _27
.acf4	ed 00 03	sbc $0300			sbc base
.acf7					_27:
.acf7	36 26		rol $26,x			rol DStack+2,x		;   shift ud
.acf9	36 27		rol $27,x			rol DStack+3,x
.acfb	36 24		rol $24,x			rol DStack+0,x
.acfd	36 25		rol $25,x			rol DStack+1,x
.acff	88		dey				dey
.ad00	d0 ec		bne $acee			bne _11
.ad02	c9 0a		cmp #$0a			cmp #9+1		; alternatively this could use s_abc_upper
.ad04	90 02		bcc $ad08			bcc +
.ad06	69 06		adc #$06			adc #7-1
.ad08	69 30		adc #$30	+		adc #'0'
.ad0a	d0 cb		bne $acd7			bne Hold_A
=38					CL	.var *-(WordListLink+wh_Xt)
=$ad0c					en = *	; remember here
>ace4	26					.byte CL	;wh_CodeLength
>ad0c	23 53				L1:	.text "#S"	;  name of word as a string, ending at wh_NameLastChar
>ad0e	62					.byte (("#S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ad0f	61 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad11	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad12	00					.byte 0	;wh_Flags	dictionary flags
=44174					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad13					Number_Sign_S:
.ad13					_loop:
.ad13	20 e6 ac	jsr $ace6			jsr Number_sign	; convert a single number ("#")
.ad16	b5 24		lda $24,x			lda DStack+0,x	; until d is zero
.ad18	15 25		ora $25,x			ora DStack+1,x
.ad1a	15 26		ora $26,x			ora DStack+2,x
.ad1c	15 27		ora $27,x			ora DStack+3,x
.ad1e	d0 f3		bne $ad13			bne _loop
=13					CL	.var *-(WordListLink+wh_Xt)
=$ad20					en = *	; remember here
>ad11	0d					.byte CL	;wh_CodeLength
.ad20	60		rts				rts
>ad21	53 69 67 6e			L1:	.text "Sign"	;  name of word as a string, ending at wh_NameLastChar
>ad25	c4					.byte (("Sign"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ad26	8e ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad28	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad29	08					.byte NN	;wh_Flags	dictionary flags
=44197					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad2a	20 de b4	jsr $b4de	Sign:		jsr PopYA
.ad2d	98		tya				tya		; test MSB of TOS
.ad2e					Sign_P:
.ad2e	30 01		bmi $ad31			bmi _minus
.ad30	60		rts				rts
.ad31	a9 2d		lda #$2d	_minus:		lda #'-'	; add minus sign
.ad33	d0 a2		bne $acd7			bne hold_a
=11					CL	.var *-(WordListLink+wh_Xt)
=$ad35					en = *	; remember here
>ad28	0b					.byte CL	;wh_CodeLength
>ad35	43 6c 65 61 76 65		L1:	.text "Cleave"	;  name of word as a string, ending at wh_NameLastChar
>ad3b	a6					.byte (("Cleave"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ad3c	a5 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad3e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad3f	18					.byte UF+NN	;wh_Flags	dictionary flags
=44219					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad40					Cleave:
.ad40	20 1d b5	jsr $b51d			jsr underflow_2
.ad43	20 b2 c5	jsr $c5b2			jsr Minus_leading	; -LEADING ( addr u )
.ad46	20 f7 c4	jsr $c4f7			jsr Input_To_R	; save old imput state
.ad49	b5 24		lda $24,x			lda DStack+0,x	; u is new ciblen
.ad4b	85 06		sta $06				sta ciblen
.ad4d	b5 25		lda $25,x			lda DStack+1,x
.ad4f	85 07		sta $07				sta ciblen+1
.ad51	b5 26		lda $26,x			lda DStack+2,x	; addr is new cib
.ad53	85 04		sta $04				sta cib
.ad55	b5 27		lda $27,x			lda DStack+3,x
.ad57	85 05		sta $05				sta cib+1
.ad59	a9 00		lda #$00			lda #0
.ad5b	85 08		sta $08				sta toin	; >IN pointer is zero
.ad5d	85 09		sta $09				sta toin+1
.ad5f	20 9a bb	jsr $bb9a			jsr parse_name	; ( addr u addr-s u-s )
.ad62	b5 24		lda $24,x			lda DStack+0,x
.ad64	15 25		ora $25,x			ora DStack+1,x
.ad66	f0 23		beq $ad8b			beq _done
.ad68	38		sec				sec
.ad69	b5 28		lda $28,x			lda DStack+4,x	; LSB of original u
.ad6b	f5 24		sbc $24,x			sbc DStack+0,x
.ad6d	95 28		sta $28,x			sta DStack+4,x
.ad6f	b5 29		lda $29,x			lda DStack+5,x	; MSB of original u
.ad71	f5 25		sbc $25,x			sbc DStack+1,x
.ad73	95 29		sta $29,x			sta DStack+5,x
.ad75	18		clc				clc
.ad76	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of original addr
.ad78	75 24		adc $24,x			adc DStack+0,x
.ad7a	95 2a		sta $2a,x			sta DStack+6,x
.ad7c	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of original addr
.ad7e	75 25		adc $25,x			adc DStack+1,x
.ad80	95 2b		sta $2b,x			sta DStack+7,x
.ad82	20 17 c6	jsr $c617			jsr Two_swap		; ( addr-s u-s addr u )
.ad85	20 b2 c5	jsr $c5b2			jsr Minus_leading
.ad88	20 17 c6	jsr $c617			jsr Two_swap		; ( addr u addr-s u-s )
.ad8b					_done:
.ad8b	20 19 c5	jsr $c519			jsr R_To_Input
=78					CL	.var *-(WordListLink+wh_Xt)
=$ad8e					en = *	; remember here
>ad3e	4e					.byte CL	;wh_CodeLength
.ad8e	60		rts				rts
>ad8f	48 65 78 53 74 6f 72 65		L1:	.text "HexStore"	;  name of word as a string, ending at wh_NameLastChar
>ad97	a8					.byte (("HexStore"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ad98	bb ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad9a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad9b	18					.byte UF+NN	;wh_Flags	dictionary flags
=44311					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad9c					Hexstore:
.ad9c	20 22 b5	jsr $b522			jsr underflow_3
.ad9f	20 80 d0	jsr $d080			jsr Dup		; Save copy of original address
.ada2	20 3e c7	jsr $c73e			jsr Two_to_r		; ( addr1 u1 ) ( R: addr2 addr2 )
.ada5					_loop:
.ada5	b5 24		lda $24,x			lda DStack+0,x
.ada7	15 25		ora $25,x			ora DStack+1,x
.ada9	f0 37		beq $ade2			beq _done
.adab	20 40 ad	jsr $ad40			jsr Cleave		; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.adae	20 3e c7	jsr $c73e			jsr Two_to_r
.adb1	20 fa b8	jsr $b8fa			jsr Zero
.adb4	20 fa b8	jsr $b8fa			jsr Zero
.adb7	20 19 c7	jsr $c719			jsr Two_r_from	; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.adba	20 25 b1	jsr $b125			jsr To_Number	; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.adbd	b5 24		lda $24,x			lda DStack+0,x
.adbf	15 25		ora $25,x			ora DStack+1,x
.adc1	d0 18		bne $addb			bne _have_chars_left
.adc3	20 05 c6	jsr $c605			jsr Two_drop		; ( addr1 u1 n n ) ( R: addr2 addr2 )
.adc6	20 32 c1	jsr $c132			jsr D_To_S		; ( addr1 u1 n ) ( R: addr2 addr2 )
.adc9	20 40 d0	jsr $d040			jsr R_Fetch		; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.adcc	20 89 ce	jsr $ce89			jsr C_Store		; ( addr1 u1 ) ( R: addr2 addr2 )
.adcf	20 24 d0	jsr $d024			jsr R_From		; R>
.add2	20 60 cb	jsr $cb60			jsr One_plus		; 1+
.add5	20 05 d0	jsr $d005			jsr To_R		; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.add8	4c a5 ad	jmp $ada5			jmp _loop
.addb					_have_chars_left:
.addb	8a		txa				txa
.addc	18		clc				clc
.addd	69 08		adc #$08			adc #8
.addf	aa		tax				tax
.ade0	d0 c3		bne $ada5			bne _loop
.ade2					_done:
.ade2	e8		inx				inx
.ade3	e8		inx				inx
.ade4	e8		inx				inx
.ade5	e8		inx				inx			; 2DROP
.ade6	20 19 c7	jsr $c719			jsr Two_r_from		; ( addr2+n addr2 )
.ade9	20 9e d0	jsr $d09e			jsr Swap
.adec	4c cd cc	jmp $cccd			jmp Minus		; ( n )
=83					CL	.var *-(WordListLink+wh_Xt)
=$adef					en = *	; remember here
>ad9a	53					.byte CL	;wh_CodeLength
>adef	57 69 74 68 69 6e		L1:	.text "Within"	;  name of word as a string, ending at wh_NameLastChar
>adf5	c6					.byte (("Within"[-1]&7)<<5)+(*-L1)	;wh_HNL
>adf6	17 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>adf8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>adf9	18					.byte UF+NN	;wh_Flags	dictionary flags
=44405					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.adfa					Within:
.adfa	20 22 b5	jsr $b522			jsr underflow_3
.adfd	20 57 d0	jsr $d057			jsr Over
.ae00	20 cd cc	jsr $cccd			jsr Minus
.ae03	20 05 d0	jsr $d005			jsr To_R
.ae06	20 cd cc	jsr $cccd			jsr Minus
.ae09	20 24 d0	jsr $d024			jsr R_From
.ae0c	4c 82 c9	jmp $c982			jmp U_Less_Than
=21					CL	.var *-(WordListLink+wh_Xt)
=$ae0f					en = *	; remember here
>adf8	15					.byte CL	;wh_CodeLength
>ae0f	5c				L1:	.text "\"	;  name of word as a string, ending at wh_NameLastChar
>ae10	81					.byte (("\"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ae11	75 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae13	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae14	0c					.byte IM+NN	;wh_Flags	dictionary flags
=44432					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae15					Backslash:
.ae15	ad 0c 03	lda $030c			lda BlkV+0		; interpreting a block?
.ae18	0d 0d 03	ora $030d			ora BlkV+1
.ae1b	f0 16		beq $ae33			beq _not_block
.ae1d	a5 08		lda $08				lda toin+0
.ae1f	29 3f		and #$3f			and #$3F
.ae21	c9 02		cmp #$02			cmp #2
.ae23	90 16		bcc $ae3b			bcc _rts
.ae25	a5 08		lda $08		                lda toin+0		; Move toin to next multiple of 64.
.ae27	29 c0		and #$c0	                and #$C0        	;   Clear lower bits to move to beginning of line.
.ae29	18		clc		                clc             	;   Add $40 (64 decimal) to move to next line.
.ae2a	69 40		adc #$40	                adc #$40
.ae2c	85 08		sta $08		                sta toin+0
.ae2e	90 0b		bcc $ae3b	                bcc _rts
.ae30	e6 09		inc $09		                inc toin+1
.ae32	60		rts				rts
.ae33					_not_block:
.ae33	a5 06		lda $06		                lda ciblen+0
.ae35	85 08		sta $08		                sta toin+0
.ae37	a5 07		lda $07		                lda ciblen+1
.ae39	85 09		sta $09		                sta toin+1
=38					CL	.var *-(WordListLink+wh_Xt)
=$ae3b					en = *	; remember here
>ae13	26					.byte CL	;wh_CodeLength
.ae3b	60		rts		_rts:		rts
>ae3c	4d 6f 76 65			L1:	.text "Move"	;  name of word as a string, ending at wh_NameLastChar
>ae40	a4					.byte (("Move"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ae41	90 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae43	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae44	18					.byte NN+UF	;wh_Flags	dictionary flags
=44480					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae45					Move:
.ae45	b5 27		lda $27,x			lda DStack+3,x		; MSB of addr2
.ae47	d5 29		cmp $29,x			cmp DStack+5,x		; MSB of addr1
.ae49	d0 04		bne $ae4f			bne _ne
.ae4b	b5 26		lda $26,x			lda DStack+2,x		; LSB of addr2
.ae4d	d5 28		cmp $28,x			cmp DStack+4,x		; LSB of addr1
.ae4f	90 5a		bcc $aeab	_ne:		bcc CMove
.ae51	d0 11		bne $ae64			bne CMove_up
.ae53	8a		txa		ThreeDrop:	txa		; drop three entries from Data Stack
.ae54	18		clc				clc
.ae55	69 06		adc #$06			adc #6
.ae57	aa		tax				tax
=19					CL	.var *-(WordListLink+wh_Xt)
=$ae58					en = *	; remember here
>ae43	13					.byte CL	;wh_CodeLength
.ae58	60		rts				rts
>ae59	43 4d 6f 76 65 3e		L1:	.text "CMove>"	;  name of word as a string, ending at wh_NameLastChar
>ae5f	c6					.byte (("CMove>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ae60	c0 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae62	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae63	18					.byte UF+NN	;wh_Flags	dictionary flags
=44511					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae64					CMove_up:
.ae64	20 22 b5	jsr $b522			jsr underflow_3
.ae67	b5 26		lda $26,x			lda DStack+2,x
.ae69	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.ae6b	b5 27		lda $27,x			lda DStack+3,x
.ae6d	18		clc				clc
.ae6e	75 25		adc $25,x			adc DStack+1,x
.ae70	85 17		sta $17				sta tmp2+1	; point to last page of destination
.ae72	b5 28		lda $28,x			lda DStack+4,x
.ae74	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.ae76	b5 29		lda $29,x			lda DStack+5,x
.ae78	18		clc				clc
.ae79	75 25		adc $25,x			adc DStack+1,x
.ae7b	85 15		sta $15				sta tmp1+1	; point to last page of source
.ae7d	f6 25		inc $25,x			inc DStack+1,x	; allows us to use bne with dec DStack+1,x below
.ae7f	b4 24		ldy $24,x			ldy DStack+0,x	; length of last page
.ae81	f0 10		beq $ae93			beq _nopartial
.ae83					_outerloop:
.ae83	88		dey				dey
.ae84	f0 07		beq $ae8d			beq _finishpage
.ae86					_innerloop:
.ae86	b1 14		lda ($14),y			lda (tmp1),y
.ae88	91 16		sta ($16),y			sta (tmp2),y
.ae8a	88		dey				dey
.ae8b	d0 f9		bne $ae86			bne _innerloop
.ae8d					_finishpage:
.ae8d	a0 00		ldy #$00			ldy #0
.ae8f	b1 14		lda ($14),y			lda (tmp1),y	; handle y = 0 separately
.ae91	91 16		sta ($16),y			sta (tmp2),y
.ae93					_nopartial:
.ae93	c6 15		dec $15				dec tmp1+1	; back up to previous pages
.ae95	c6 17		dec $17				dec tmp2+1
.ae97	d6 25		dec $25,x			dec DStack+1,x
.ae99	d0 e8		bne $ae83			bne _outerloop
.ae9b					_done:
.ae9b	4c 53 ae	jmp $ae53			jmp ThreeDrop	; clear up the stack and leave
=58					CL	.var *-(WordListLink+wh_Xt)
=$ae9e					en = *	; remember here
>ae62	3a					.byte CL	;wh_CodeLength
.ae9e	4c 2c b5	jmp $b52c	Throw_Stack_14: jmp Throw_Stack
>aea1	43 4d 6f 76 65			L1:	.text "CMove"	;  name of word as a string, ending at wh_NameLastChar
>aea6	a5					.byte (("CMove"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aea7	df ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aea9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aeaa	18					.byte UF+NN	;wh_Flags	dictionary flags
=44582					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aeab					CMove:
.aeab	20 22 b5	jsr $b522			jsr underflow_3
.aeae	b5 26		lda $26,x			lda DStack+2,x
.aeb0	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.aeb2	b5 27		lda $27,x			lda DStack+3,x
.aeb4	85 17		sta $17				sta tmp2+1
.aeb6	b5 28		lda $28,x			lda DStack+4,x
.aeb8	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.aeba	b5 29		lda $29,x			lda DStack+5,x
.aebc	85 15		sta $15				sta tmp1+1
.aebe	a0 00		ldy #$00			ldy #0
.aec0	b5 25		lda $25,x			lda DStack+1,x	; number of whole pages to move
.aec2	f0 0f		beq $aed3			beq _dopartial
.aec4					_page:
.aec4	b1 14		lda ($14),y			lda (tmp1),y
.aec6	91 16		sta ($16),y			sta (tmp2),y
.aec8	c8		iny				iny
.aec9	d0 f9		bne $aec4			bne _page
.aecb	e6 15		inc $15				inc tmp1+1
.aecd	e6 17		inc $17				inc tmp2+1
.aecf	d6 25		dec $25,x			dec DStack+1,x
.aed1	d0 f1		bne $aec4			bne _page
.aed3					_dopartial:
.aed3	b5 24		lda $24,x			lda DStack+0,x	; length of last page
.aed5	f0 09		beq $aee0			beq _done
.aed7					_partial:
.aed7	b1 14		lda ($14),y			lda (tmp1),y
.aed9	91 16		sta ($16),y			sta (tmp2),y
.aedb	c8		iny				iny
.aedc	d6 24		dec $24,x			dec DStack+0,x
.aede	d0 f7		bne $aed7			bne _partial
.aee0	4c 53 ae	jmp $ae53	_done:		jmp ThreeDrop	; clear the stack
=56					CL	.var *-(WordListLink+wh_Xt)
=$aee3					en = *	; remember here
>aea9	38					.byte CL	;wh_CodeLength
>aee3	55 4d 2a			L1:	.text "UM*"	;  name of word as a string, ending at wh_NameLastChar
>aee6	43					.byte (("UM*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aee7	26 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aee9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aeea	08					.byte NN	;wh_Flags	dictionary flags
=44646					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aeeb					UM_Star:
.aeeb	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.aeed	b0 af		bcs $ae9e		bcs Throw_Stack_14
.aeef	18		clc				clc		; tmp2= divsor-1
.aef0	b5 24		lda $24,x			lda DStack+0,x
.aef2	e9 00		sbc #$00			sbc #0
.aef4	85 16		sta $16				sta tmp2+0
.aef6	b5 25		lda $25,x			lda DStack+1,x
.aef8	e9 00		sbc #$00			sbc #0
.aefa	85 17		sta $17				sta tmp2+1
.aefc	90 2e		bcc $af2c			bcc _zero	; is divisor zero?
.aefe	a9 00		lda #$00			lda #0
.af00	85 14		sta $14				sta tmp1
.af02	86 18		stx $18				stx tmp3	; tested for exit from outer loop
.af04	ca		dex				dex
.af05	ca		dex				dex
.af06					_outer_loop:
.af06	a0 08		ldy #$08			ldy #8		; counter inner loop
.af08	56 28		lsr $28,x			lsr DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.af0a					_inner_loop:
.af0a	90 0c		bcc $af18			bcc _no_add
.af0c	85 15		sta $15				sta tmp1+1	; save time, don't CLC
.af0e	a5 14		lda $14				lda tmp1
.af10	65 16		adc $16				adc tmp2
.af12	85 14		sta $14				sta tmp1
.af14	a5 15		lda $15				lda tmp1+1
.af16	65 17		adc $17				adc tmp2+1
.af18					_no_add:
.af18	6a		ror a				ror
.af19	66 14		ror $14				ror tmp1
.af1b	76 28		ror $28,x			ror DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.af1d	88		dey				dey
.af1e	d0 ea		bne $af0a			bne _inner_loop ; go back for one more shift?
.af20	e8		inx				inx
.af21	e4 18		cpx $18				cpx tmp3
.af23	d0 e1		bne $af06			bne _outer_loop ; go back for eight more shifts?
.af25	95 25		sta $25,x			sta DStack+1,x
.af27	a5 14		lda $14				lda tmp1
.af29	95 24		sta $24,x			sta DStack+0,x
.af2b	60		rts				rts
.af2c	a9 00		lda #$00	_zero:		lda #0
.af2e	95 26		sta $26,x			sta DStack+2,x
.af30	95 27		sta $27,x			sta DStack+3,x
.af32	60		rts				rts
=72					CL	.var *-(WordListLink+wh_Xt)
=$af33					en = *	; remember here
>aee9	48					.byte CL	;wh_CodeLength
>af33	4d 2a				L1:	.text "M*"	;  name of word as a string, ending at wh_NameLastChar
>af35	42					.byte (("M*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af36	66 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af38	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af39	08					.byte NN	;wh_Flags	dictionary flags
=44725					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af3a					M_Star:
.af3a	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.af3c	b0 6d		bcs $afab		bcs Throw_Stack_15
.af3e	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.af40	55 27		eor $27,x			eor DStack+3,x	; MSB of n2
.af42	08		php				php
.af43	20 9d c7	jsr $c79d			jsr Abs
.af46	20 9e d0	jsr $d09e			jsr Swap
.af49	20 9d c7	jsr $c79d			jsr Abs
.af4c	20 eb ae	jsr $aeeb			jsr UM_Star		; ( d )
.af4f	28		plp				plp			; handle the sign
.af50	10 03		bpl $af55			bpl +
.af52	4c b5 c7	jmp $c7b5			jmp DNegate
.af55					+
=27					CL	.var *-(WordListLink+wh_Xt)
=$af55					en = *	; remember here
>af38	1b					.byte CL	;wh_CodeLength
.af55	60		rts				rts
>af56	2a				L1:	.text "*"	;  name of word as a string, ending at wh_NameLastChar
>af57	41					.byte (("*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af58	b5 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af5a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af5b	00					.byte 0	;wh_Flags	dictionary flags
=44759					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af5c					Star:
.af5c	20 eb ae	jsr $aeeb			jsr UM_Star
.af5f	e8		inx				inx		; D>S	drop hi cell
.af60	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$af61					en = *	; remember here
>af5a	05					.byte CL	;wh_CodeLength
.af61	60		rts				rts
>af62	55 4d 2f 4d 6f 64		L1:	.text "UM/Mod"	;  name of word as a string, ending at wh_NameLastChar
>af68	86					.byte (("UM/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af69	d7 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af6b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af6c	08					.byte NN	;wh_Flags	dictionary flags
=44776					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af6d					UM_Slash_Mod:
.af6d	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.af6f	b0 3a		bcs $afab		bcs Throw_Stack_15
.af71	b5 24		lda $24,x			lda DStack+0,x		; catch division by zero
.af73	15 25		ora $25,x			ora DStack+1,x
.af75	f0 2f		beq $afa6			beq _DivByZero
.af77	a0 10		ldy #$10			ldy #16			; for 16 bits
.af79					_loop:
.af79	36 28		rol $28,x			rol DStack+4,x		;   rotate low cell of dividend one bit left
.af7b	36 29		rol $29,x			rol DStack+5,x
.af7d	36 26		rol $26,x			rol DStack+2,x		;   rotate high cell of dividend one bit left
.af7f	36 27		rol $27,x			rol DStack+3,x
.af81	b0 0a		bcs $af8d			bcs _subtract		;   overflow?
.af83	b5 26		lda $26,x			lda DStack+2,x		;   dividend.hi >= divisor?
.af85	d5 24		cmp $24,x			cmp DStack+0,x
.af87	b5 27		lda $27,x			lda DStack+3,x
.af89	f5 25		sbc $25,x			sbc DStack+1,x
.af8b	90 0d		bcc $af9a			bcc _next
.af8d	b5 26		lda $26,x	_subtract:	lda DStack+2,x		;   dividend.hi -= divisor
.af8f	f5 24		sbc $24,x			sbc DStack+0,x
.af91	95 26		sta $26,x			sta DStack+2,x
.af93	b5 27		lda $27,x			lda DStack+3,x
.af95	f5 25		sbc $25,x			sbc DStack+1,x
.af97	95 27		sta $27,x			sta DStack+3,x
.af99	38		sec				sec			;   it always fits
.af9a	88		dey		_next:		dey			;  next
.af9b	d0 dc		bne $af79			bne _loop
.af9d	36 28		rol $28,x			rol DStack+4,x		; finish rotating quotient bit in
.af9f	36 29		rol $29,x			rol DStack+5,x
.afa1	e8		inx				inx			; drop divisor
.afa2	e8		inx				inx
.afa3	4c 9e d0	jmp $d09e			jmp Swap
.afa6	a9 f6		lda #$f6	_DivByZero:	lda #$100+err_DivideBy0
.afa8	4c 67 b5	jmp $b567			jmp ThrowA
=62					CL	.var *-(WordListLink+wh_Xt)
=$afab					en = *	; remember here
>af6b	3e					.byte CL	;wh_CodeLength
.afab	4c 2c b5	jmp $b52c	Throw_Stack_15: jmp Throw_Stack
>afae	53 4d 2f 52 65 6d		L1:	.text "SM/Rem"	;  name of word as a string, ending at wh_NameLastChar
>afb4	a6					.byte (("SM/Rem"[-1]&7)<<5)+(*-L1)	;wh_HNL
>afb5	e8 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>afb7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>afb8	08					.byte NN	;wh_Flags	dictionary flags
=44852					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.afb9					SM_Slash_Rem:
.afb9	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.afbb	b0 ee		bcs $afab		bcs Throw_Stack_15
.afbd	b5 27		lda $27,x			lda DStack+3,x
.afbf	08		php				php
.afc0	55 25		eor $25,x			eor DStack+1,x
.afc2	08		php				php
.afc3	20 9d c7	jsr $c79d			jsr Abs
.afc6	e8		inx				inx		; pretend we pushed n1 to R
.afc7	e8		inx				inx
.afc8	20 d2 c7	jsr $c7d2			jsr DAbs
.afcb	ca		dex				dex
.afcc	ca		dex				dex
.afcd	20 6d af	jsr $af6d			jsr UM_Slash_Mod	; UM/MOD
.afd0	28		plp				plp
.afd1	10 03		bpl $afd6			bpl +
.afd3	20 84 c7	jsr $c784			jsr Negate
.afd6					+
.afd6	28		plp				plp
.afd7	10 07		bpl $afe0			bpl _done
.afd9	e8		inx				inx		; pretend we pushed quotient to R
.afda	e8		inx				inx
.afdb	20 84 c7	jsr $c784			jsr Negate
.afde	ca		dex				dex
.afdf	ca		dex				dex
.afe0					_done:
=39					CL	.var *-(WordListLink+wh_Xt)
=$afe0					en = *	; remember here
>afb7	27					.byte CL	;wh_CodeLength
.afe0	60		rts				rts
>afe1	46 4d 2f 4d 6f 64		L1:	.text "FM/Mod"	;  name of word as a string, ending at wh_NameLastChar
>afe7	86					.byte (("FM/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>afe8	34 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>afea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>afeb	08					.byte NN	;wh_Flags	dictionary flags
=44903					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.afec					FM_Slash_Mod:
.afec	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.afee	b0 bb		bcs $afab		bcs Throw_Stack_15
.aff0	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.aff2	08		php				php		;  save sign
.aff3	10 0a		bpl $afff			bpl +
.aff5	20 84 c7	jsr $c784			jsr Negate	; NEGATE
.aff8	e8		inx				inx
.aff9	e8		inx				inx
.affa	20 b5 c7	jsr $c7b5			jsr DNegate	; DNEGATE
.affd	ca		dex				dex
.affe	ca		dex				dex
.afff					+
.afff	b5 27		lda $27,x			lda DStack+3,x	; MSB of high word of d
.b001	10 0d		bpl $b010			bpl +
.b003	18		clc				clc
.b004	b5 24		lda $24,x			lda DStack+0,x	; LSB of n1
.b006	75 26		adc $26,x			adc DStack+2,x	; LSB of dh
.b008	95 26		sta $26,x			sta DStack+2,x
.b00a	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.b00c	75 27		adc $27,x			adc DStack+3,x	; MSB of dh
.b00e	95 27		sta $27,x			sta DStack+3,x
.b010					+
.b010	20 6d af	jsr $af6d			jsr UM_Slash_Mod	; ( d n1 -- rem n2 )
.b013	28		plp				plp
.b014	10 07		bpl $b01d			bpl +
.b016	e8		inx				inx		; pretend that we SWAP
.b017	e8		inx				inx
.b018	20 84 c7	jsr $c784			jsr Negate
.b01b	ca		dex				dex
.b01c	ca		dex				dex
.b01d					+
=49					CL	.var *-(WordListLink+wh_Xt)
=$b01d					en = *	; remember here
>afea	31					.byte CL	;wh_CodeLength
.b01d	60		rts				rts
>b01e	2f 4d 6f 64			L1:	.text "/Mod"	;  name of word as a string, ending at wh_NameLastChar
>b022	84					.byte (("/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b023	67 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b025	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b026	08					.byte NN	;wh_Flags	dictionary flags
=44962					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b027	20 80 d0	jsr $d080	Slash_Mod:	jsr Dup			; ( n1 n_div n_div )
.b02a	a0 00		ldy #$00			ldy #0			; sign extend n1
.b02c	b5 29		lda $29,x			lda DStack+5,x
.b02e	10 01		bpl $b031			bpl +
.b030	88		dey				dey
.b031	94 26		sty $26,x	+		sty DStack+2,x
.b033	94 27		sty $27,x			sty DStack+3,x		; ( d1 n_div )
.b035	4c b9 af	jmp $afb9			jmp SM_Slash_Rem	; SM/REM
=17					CL	.var *-(WordListLink+wh_Xt)
=$b038					en = *	; remember here
>b025	11					.byte CL	;wh_CodeLength
>b038	2f				L1:	.text "/"	;  name of word as a string, ending at wh_NameLastChar
>b039	e1					.byte (("/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b03a	a2 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b03c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b03d	08					.byte NN	;wh_Flags	dictionary flags
=44985					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b03e	20 27 b0	jsr $b027	Slash:		jsr Slash_Mod
.b041	4c 8c ca	jmp $ca8c			jmp Nip		; Nip remainder
=6					CL	.var *-(WordListLink+wh_Xt)
=$b044					en = *	; remember here
>b03c	06					.byte CL	;wh_CodeLength
>b044	4d 6f 64			L1:	.text "Mod"	;  name of word as a string, ending at wh_NameLastChar
>b047	83					.byte (("Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b048	b9 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b04a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b04b	00					.byte 0	;wh_Flags	dictionary flags
=44999					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b04c	20 27 b0	jsr $b027	Mod:		jsr Slash_Mod
.b04f	e8		inx				inx		; Drop quotient
.b050	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$b051					en = *	; remember here
>b04a	05					.byte CL	;wh_CodeLength
.b051	60		rts				rts
>b052	2a 2f 4d 6f 64			L1:	.text "*/Mod"	;  name of word as a string, ending at wh_NameLastChar
>b057	85					.byte (("*/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b058	c7 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b05a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b05b	18					.byte UF+NN	;wh_Flags	dictionary flags
=45015					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b05c					Star_Slash_Mod:
.b05c	20 22 b5	jsr $b522			jsr underflow_3
.b05f	20 05 d0	jsr $d005			jsr To_R
.b062	20 3a af	jsr $af3a			jsr M_Star
.b065	20 24 d0	jsr $d024			jsr R_From
.b068	4c b9 af	jmp $afb9			jmp SM_Slash_Rem
=15					CL	.var *-(WordListLink+wh_Xt)
=$b06b					en = *	; remember here
>b05a	0f					.byte CL	;wh_CodeLength
>b06b	2a 2f				L1:	.text "*/"	;  name of word as a string, ending at wh_NameLastChar
>b06d	e2					.byte (("*/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b06e	d7 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b070	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b071	08					.byte NN	;wh_Flags	dictionary flags
=45037					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b072					Star_Slash:
.b072	20 5c b0	jsr $b05c			jsr Star_Slash_Mod
.b075	4c 8c ca	jmp $ca8c			jmp Nip			; mod
=6					CL	.var *-(WordListLink+wh_Xt)
=$b078					en = *	; remember here
>b070	06					.byte CL	;wh_CodeLength
>b078	4d 2a 2f			L1:	.text "M*/"	;  name of word as a string, ending at wh_NameLastChar
>b07b	e3					.byte (("M*/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b07c	ed af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b07e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b07f	08					.byte NN	;wh_Flags	dictionary flags
=45051					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b080					m_star_slash:
.b080	20 27 b5	jsr $b527	                jsr underflow_4
.b083	b5 24		lda $24,x			lda DStack+0,x		; calc result sign
.b085	55 26		eor $26,x			eor DStack+2,x
.b087	55 28		eor $28,x			eor DStack+4,x
.b089	08		php				php
.b08a	20 9d c7	jsr $c79d	                jsr Abs			; Abs
.b08d	20 05 d0	jsr $d005	                jsr To_R		; >R		( d1 n1 ) ( R: sign abs(n2) )
.b090	20 9d c7	jsr $c79d	                jsr Abs			; Abs
.b093	20 05 d0	jsr $d005	                jsr To_R		; >R		( d1 ) ( R: sign abs(n2) abs(n1) )
.b096	20 d2 c7	jsr $c7d2	                jsr DAbs		; DAbs		( abs(d1) ) ( R: sign abs(n2) abs(n1) )
.b099	20 9e d0	jsr $d09e	                jsr Swap		; Swap
.b09c	20 40 d0	jsr $d040	                jsr R_Fetch		; R@
.b09f	20 eb ae	jsr $aeeb	                jsr UM_Star		; UM*
.b0a2	20 84 cf	jsr $cf84	                jsr Rot			; Rot
.b0a5	20 24 d0	jsr $d024	                jsr R_From		; R>
.b0a8	20 eb ae	jsr $aeeb	                jsr UM_Star		; UM*
.b0ab	20 84 cf	jsr $cf84	                jsr Rot			; Rot
.b0ae	20 79 cb	jsr $cb79	                jsr UMPlus		; 0 D+
.b0b1	20 40 d0	jsr $d040	                jsr R_Fetch		; R@
.b0b4	20 6d af	jsr $af6d	                jsr UM_Slash_Mod	; UM/Mod
.b0b7	20 aa cf	jsr $cfaa	                jsr Not_Rot		; Rot Rot
.b0ba	20 24 d0	jsr $d024	                jsr R_From		; R>
.b0bd	20 6d af	jsr $af6d	                jsr UM_Slash_Mod	; UM/Mod
.b0c0	20 8c ca	jsr $ca8c	                jsr Nip			; Swap Drop
.b0c3	20 9e d0	jsr $d09e	                jsr Swap		; Swap
.b0c6	28		plp				plp
.b0c7	10 03		bpl $b0cc			bpl _rts		; ... 0< if ...
.b0c9	4c b5 c7	jmp $c7b5	                jmp DNegate
.b0cc	60		rts		_rts:		rts
=77					CL	.var *-(WordListLink+wh_Xt)
=$b0cd					en = *	; remember here
>b07e	4d					.byte CL	;wh_CodeLength
>b0cd	45 76 61 6c 75 61 74 65		L1:	.text "Evaluate"	;  name of word as a string, ending at wh_NameLastChar
>b0d5	a8					.byte (("Evaluate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b0d6	fb af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b0d8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b0d9	08					.byte NN	;wh_Flags	dictionary flags
=45141					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b0da					Evaluate:
.b0da	18		clc				clc			; signal to zero BLK.
.b0db					load_evaluate:
.b0db	ad 0d 03	lda $030d			lda BlkV+1	; Save the current value of BLK on the return stack.
.b0de	48		pha				pha
.b0df	ad 0c 03	lda $030c			lda BlkV+0
.b0e2	48		pha				pha
.b0e3	b0 08		bcs $b0ed			bcs +		; See if we should zero BLK.
.b0e5	a9 00		lda #$00			lda #0		; Set BLK to zero.
.b0e7	8d 0c 03	sta $030c			sta BlkV+0
.b0ea	8d 0d 03	sta $030d			sta BlkV+1
.b0ed					+
.b0ed	20 f7 c4	jsr $c4f7			jsr Input_To_R	; Save the input state to the Return Stack
.b0f0	a9 ff		lda #$ff			lda #$ff	; SOURCE-ID= -1
.b0f2	85 02		sta $02				sta insrc+0
.b0f4	85 03		sta $03				sta insrc+1
.b0f6	a9 00		lda #$00			lda #0		; >IN= zero
.b0f8	85 08		sta $08				sta toin+0
.b0fa	85 09		sta $09				sta toin+1
.b0fc	20 de b4	jsr $b4de			jsr PopYA	; ciblen= string length (u)
.b0ff	85 06		sta $06				sta ciblen+0
.b101	84 07		sty $07				sty ciblen+1
.b103	20 de b4	jsr $b4de			jsr PopYA	; cib= string addr
.b106	85 04		sta $04				sta cib+0
.b108	84 05		sty $05				sty cib+1
.b10a	20 21 b6	jsr $b621			jsr interpret	; ( -- )
.b10d	20 19 c5	jsr $c519			jsr R_To_Input	; restore input state
.b110	68		pla				pla		; Restore BLK from the return stack.
.b111	8d 0c 03	sta $030c			sta BlkV+0
.b114	68		pla				pla
.b115	8d 0d 03	sta $030d			sta BlkV+1
=62					CL	.var *-(WordListLink+wh_Xt)
=$b118					en = *	; remember here
>b0d8	3e					.byte CL	;wh_CodeLength
.b118	60		rts				rts
>b119	3e 4e 75 6d 62 65 72		L1:	.text ">Number"	;  name of word as a string, ending at wh_NameLastChar
>b120	47					.byte ((">Number"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b121	55 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b123	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b124	18					.byte UF+NN	;wh_Flags	dictionary flags
=45216					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b125					To_Number:
.b125	20 27 b5	jsr $b527			jsr underflow_4
.b128	b5 24		lda $24,x			lda DStack+0,x		; no chars left?
.b12a	f0 72		beq $b19e			beq _done
.b12c					_Char_loop:
.b12c	a1 26		lda ($26,x)			lda (DStack+2,x)		; Get next character
.b12e	c9 30		cmp #$30			cmp #'0'		; convert to value (Digit_Question)
.b130	90 6c		bcc $b19e			bcc _done
.b132	c9 3a		cmp #$3a			cmp #'9'+1
.b134	90 08		bcc $b13e			bcc _digit
.b136	29 df		and #$df			and #$df		;   ASCII uppercase
.b138	c9 41		cmp #$41			cmp #'A'
.b13a	90 62		bcc $b19e			bcc _done
.b13c	e9 07		sbc #$07			sbc #7 ;'A'-'0'-10	;   to make 'A'=10 below
.b13e	38		sec		_digit:		sec
.b13f	e9 30		sbc #$30			sbc #'0'
.b141	cd 00 03	cmp $0300			cmp base		; must be < base
.b144	b0 58		bcs $b19e			bcs _done
.b146	48		pha				pha			; Save char value
.b147	20 39 c6	jsr $c639			jsr Two_Over		;   copy ud to work (multiplicand)
.b14a	a9 00		lda #$00			lda #0			;   zero ud (product)
.b14c	95 2c		sta $2c,x			sta DStack+8,x
.b14e	95 2d		sta $2d,x			sta DStack+9,x
.b150	95 2e		sta $2e,x			sta DStack+10,x
.b152	95 2f		sta $2f,x			sta DStack+11,x
.b154	ad 00 03	lda $0300			lda base		;   get multiplier
.b157	d0 23		bne $b17c			bne _Mul_Test
.b159	48		pha		_Mul_Add:	pha			;   save multiplier
.b15a	18		clc				clc			;   ud += work
.b15b	b5 26		lda $26,x			lda DStack+2,x
.b15d	75 2e		adc $2e,x			adc DStack+10,x
.b15f	95 2e		sta $2e,x			sta DStack+10,x
.b161	b5 27		lda $27,x			lda DStack+3,x
.b163	75 2f		adc $2f,x			adc DStack+11,x
.b165	95 2f		sta $2f,x			sta DStack+11,x
.b167	b5 24		lda $24,x			lda DStack+0,x
.b169	75 2c		adc $2c,x			adc DStack+8,x
.b16b	95 2c		sta $2c,x			sta DStack+8,x
.b16d	b5 25		lda $25,x			lda DStack+1,x
.b16f	75 2d		adc $2d,x			adc DStack+9,x
.b171	95 2d		sta $2d,x			sta DStack+9,x
.b173	68		pla				pla			;   restore multiplier
.b174	16 26		asl $26,x	_Mul_Shift:	asl DStack+2,x		;   work <<= 1
.b176	36 27		rol $27,x			rol DStack+3,x
.b178	36 24		rol $24,x			rol DStack+0,x
.b17a	36 25		rol $25,x			rol DStack+1,x
.b17c	4a		lsr a		_Mul_Test:	lsr a			;   shift multiplier
.b17d	b0 da		bcs $b159			bcs _Mul_Add
.b17f	d0 f3		bne $b174			bne _Mul_Shift
.b181	e8		inx				inx			;   2Drop work
.b182	e8		inx				inx
.b183	e8		inx				inx
.b184	e8		inx				inx
.b185	68		pla				pla			; recover value
.b186	18		clc				clc			; add to ud
.b187	75 2a		adc $2a,x			adc DStack+6,x
.b189	95 2a		sta $2a,x			sta DStack+6,x
.b18b	90 0a		bcc $b197			bcc +
.b18d	f6 2b		inc $2b,x			inc DStack+7,x
.b18f	d0 06		bne $b197			bne +
.b191	f6 28		inc $28,x			inc DStack+4,x
.b193	d0 02		bne $b197			bne +
.b195	f6 29		inc $29,x			inc DStack+5,x
.b197					+
.b197	20 6a cb	jsr $cb6a			jsr NOS_One_Plus	; consume the char
.b19a	d6 24		dec $24,x			dec DStack+0,x
.b19c	d0 8e		bne $b12c			bne _Char_loop
.b19e					_done:
=121					CL	.var *-(WordListLink+wh_Xt)
=$b19e					en = *	; remember here
>b123	79					.byte CL	;wh_CodeLength
.b19e	60		rts				rts
>b19f	4e 75 6d 62 65 72		L1:	.text "Number"	;  name of word as a string, ending at wh_NameLastChar
>b1a5	46					.byte (("Number"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b1a6	a0 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b1a8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b1a9	18					.byte UF+NN	;wh_Flags	dictionary flags
=45349					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b1aa					Number:
.b1aa	20 1d b5	jsr $b51d			jsr underflow_2
.b1ad	a9 00		lda #$00			lda #0
.b1af	85 1a		sta $1a				sta tmp4+0	; flag for double
.b1b1	85 1b		sta $1b				sta tmp4+1	; flag for minus
.b1b3	ad 00 03	lda $0300			lda base
.b1b6	48		pha				pha
.b1b7	20 c4 cd	jsr $cdc4			jsr Two_dup		; ( addr u addr u )
.b1ba	a1 26		lda ($26,x)			lda (DStack+2,x)	; get 1st char
.b1bc	20 7e b2	jsr $b27e			jsr _MinusCheck		; a minus sign?
.b1bf	a0 0a		ldy #$0a			ldy #10			; decimal?
.b1c1	c9 23		cmp #$23			cmp #'#'
.b1c3	f0 35		beq $b1fa			beq _base_changed
.b1c5	a0 10		ldy #$10			ldy #16			; hex?
.b1c7	c9 24		cmp #$24			cmp #'$'
.b1c9	f0 2f		beq $b1fa			beq _base_changed
.b1cb	a0 02		ldy #$02			ldy #2			; binary?
.b1cd	c9 25		cmp #$25			cmp #'%'
.b1cf	f0 29		beq $b1fa			beq _base_changed
.b1d1	c9 27		cmp #$27			cmp #$27		; ASCII for "'"
.b1d3	d0 2f		bne $b204			bne _check_dot
.b1d5	b5 24		lda $24,x			lda DStack+0,x	; length=3 ?
.b1d7	c9 03		cmp #$03			cmp #3
.b1d9	d0 1c		bne $b1f7			bne _not_a_char
.b1db	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b1dd	85 1c		sta $1c				sta tmp5
.b1df	b5 27		lda $27,x			lda DStack+3,x
.b1e1	85 1d		sta $1d				sta tmp5+1
.b1e3	a0 02		ldy #$02			ldy #2
.b1e5	b1 1c		lda ($1c),y			lda (tmp5),y
.b1e7	c9 27		cmp #$27			cmp #$27	; ASCII for "'"
.b1e9	d0 0c		bne $b1f7			bne _not_a_char
.b1eb	88		dey				dey		; The char we want is between the single quotes.
.b1ec	b1 1c		lda ($1c),y			lda (tmp5),y
.b1ee	95 26		sta $26,x			sta DStack+2,x
.b1f0	a9 00		lda #$00			lda #0
.b1f2	95 27		sta $27,x			sta DStack+3,x
.b1f4	4c 53 b2	jmp $b253			jmp _drop_original_string ; Single flag will drop the TOS for us.
.b1f7					_not_a_char:
.b1f7	4c 30 b2	jmp $b230			jmp _number_error
.b1fa					_base_changed:
.b1fa	8c 00 03	sty $0300			sty base	; Switch to the new base
.b1fd	20 6a cb	jsr $cb6a			jsr NOS_One_Plus ; start one character later
.b200	d6 24		dec $24,x			dec DStack+0,x	; decrease string length by one
.b202	a1 26		lda ($26,x)			lda (DStack+2,x) ; Load the first char again
.b204					_check_dot:
.b204	20 7e b2	jsr $b27e			jsr _MinusCheck
.b207	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b209	85 1c		sta $1c				sta tmp5
.b20b	b5 27		lda $27,x			lda DStack+3,x
.b20d	85 1d		sta $1d				sta tmp5+1
.b20f	b4 24		ldy $24,x			ldy DStack+0,x	; Y now points to the first character after the string,
.b211	88		dey				dey		; but we need the last character
.b212	b1 1c		lda ($1c),y			lda (tmp5),y
.b214	c9 2e		cmp #$2e			cmp #'.'
.b216	d0 04		bne $b21c			bne _main
.b218	c6 1a		dec $1a				dec tmp4	; Flag the fact
.b21a	d6 24		dec $24,x			dec DStack+0,x	; reduce string length by one
.b21c					_main:
.b21c	20 c4 cd	jsr $cdc4			jsr Two_Dup
.b21f	a9 00		lda #$00			lda #0
.b221	95 28		sta $28,x			sta DStack+4,x	; clear ud
.b223	95 29		sta $29,x			sta DStack+5,x
.b225	95 2a		sta $2a,x			sta DStack+6,x
.b227	95 2b		sta $2b,x			sta DStack+7,x
.b229	20 25 b1	jsr $b125			jsr To_Number	; ( ud addr u -- ud addr u )
.b22c	b5 24		lda $24,x			lda DStack+0,x
.b22e	f0 1f		beq $b24f			beq _all_converted
.b230					_number_error:
.b230	20 05 c6	jsr $c605			jsr Two_drop	; >NUMBER modified addr u
.b233	20 05 c6	jsr $c605			jsr Two_drop	; ud   (partially converted number)
.b236	a9 3e		lda #$3e			lda #'>'	; print the unknown
.b238	20 ee ce	jsr $ceee			jsr Emit_A	; word using the original addr u we saved at the beginning.
.b23b	20 08 cf	jsr $cf08			jsr Type
.b23e	a9 3c		lda #$3c			lda #'<'
.b240	20 ee ce	jsr $ceee			jsr Emit_A
.b243	20 fb ce	jsr $cefb			jsr Space
.b246	68		pla				pla		; restore base
.b247	8d 00 03	sta $0300			sta base
.b24a	a9 f3		lda #$f3			lda #$100+err_UndefinedWord
.b24c	4c 67 b5	jmp $b567			jmp ThrowA
.b24f					_all_converted:
.b24f	e8		inx				inx		; Drop the current addr u
.b250	e8		inx				inx
.b251	e8		inx				inx
.b252	e8		inx				inx
.b253					_drop_original_string:
.b253	20 fb c0	jsr $c0fb			jsr TwoNip	 ; Drop the original addr u
.b256	a5 1a		lda $1a				lda tmp4	; flag for double
.b258	f0 10		beq $b26a			beq _single
.b25a	a9 20		lda #$20			lda #%00100000
.b25c	05 0c		ora $0c				ora status
.b25e	85 0c		sta $0c				sta status
.b260	a5 1b		lda $1b				lda tmp4+1
.b262	f0 15		beq $b279			beq _done	; no minus, all done
.b264	20 b5 c7	jsr $c7b5			jsr DNegate
.b267	4c 79 b2	jmp $b279			jmp _done
.b26a					_single:
.b26a	e8		inx				inx		; convert ud to u
.b26b	e8		inx				inx
.b26c	a9 df		lda #$df			lda #$ff-%00100000
.b26e	25 0c		and $0c				and status
.b270	85 0c		sta $0c				sta status
.b272	a5 1b		lda $1b				lda tmp4+1
.b274	f0 03		beq $b279			beq _done	; no minus, all done
.b276	20 84 c7	jsr $c784			jsr Negate
.b279					_done:
.b279	68		pla				pla
.b27a	8d 00 03	sta $0300			sta base
=211					CL	.var *-(WordListLink+wh_Xt)
=$b27d					en = *	; remember here
>b1a8	d3					.byte CL	;wh_CodeLength
.b27d	60		rts				rts
.b27e					_MinusCheck:
.b27e	c9 2d		cmp #$2d			cmp #'-'		; a minus sign?
.b280	d0 09		bne $b28b			bne +
.b282	c6 1b		dec $1b				dec tmp4+1		; set flag
.b284	20 6a cb	jsr $cb6a			jsr NOS_One_Plus	; start one character later
.b287	d6 24		dec $24,x			dec DStack+0,x		; decrease string length by one
.b289	a1 26		lda ($26,x)			lda (DStack+2,x)	; get next char
.b28b	60		rts		+		rts
>b28c	48 65 78			L1:	.text "Hex"	;  name of word as a string, ending at wh_NameLastChar
>b28f	03					.byte (("Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b290	25 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b292	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b293	08					.byte NN	;wh_Flags	dictionary flags
=45583					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b294	a9 10		lda #$10	Hex:		lda #16
.b296	d0 0e		bne $b2a6			bne decimal_a
=4					CL	.var *-(WordListLink+wh_Xt)
=$b298					en = *	; remember here
>b292	04					.byte CL	;wh_CodeLength
>b298	44 65 63 69 6d 61 6c		L1:	.text "Decimal"	;  name of word as a string, ending at wh_NameLastChar
>b29f	87					.byte (("Decimal"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b2a0	0f b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2a3	00					.byte 0	;wh_Flags	dictionary flags
=45599					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2a4	a9 0a		lda #$0a	Decimal:	lda #10
.b2a6	8d 00 03	sta $0300	decimal_a:	sta base+0
.b2a9	a9 00		lda #$00			lda #0
.b2ab	8d 01 03	sta $0301			sta base+1		; paranoid
=10					CL	.var *-(WordListLink+wh_Xt)
=$b2ae					en = *	; remember here
>b2a2	0a					.byte CL	;wh_CodeLength
.b2ae	60		rts				rts
>b2af	42 61 73 65			L1:	.text "Base"	;  name of word as a string, ending at wh_NameLastChar
>b2b3	a4					.byte (("Base"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b2b4	1f b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2b6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2b7	08					.byte NN	;wh_Flags	dictionary flags
=45619					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2b8	a0 03		ldy #$03			ldy #>base
.b2ba	a9 00		lda #$00			lda #<base
.b2bc	4c b9 b8	jmp $b8b9			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b2bf					en = *	; remember here
>b2b6	07					.byte CL	;wh_CodeLength
>b2bf	43 6f 75 6e 74			L1:	.text "Count"	;  name of word as a string, ending at wh_NameLastChar
>b2c4	85					.byte (("Count"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b2c5	33 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2c8	18					.byte UF+NN	;wh_Flags	dictionary flags
=45636					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2c9					Count:
.b2c9	20 08 b5	jsr $b508			jsr underflow_1
.b2cc	a1 24		lda ($24,x)			lda (DStack+0,x)	; A= number of characters
.b2ce	f6 24		inc $24,x			inc DStack+0,x		; move start address up by one
.b2d0	d0 02		bne $b2d4			bne +
.b2d2	f6 25		inc $25,x			inc DStack+1,x
.b2d4					+
.b2d4	4c eb b8	jmp $b8eb			jmp PushZA		; push number of characters, return
=14					CL	.var *-(WordListLink+wh_Xt)
=$b2d7					en = *	; remember here
>b2c7	0e					.byte CL	;wh_CodeLength
>b2d7	3f 50 61 69 72 43 74 6c		L1:	.text "?PairCtlA"	;  name of word as a string, ending at wh_NameLastChar
>b2df	41
>b2e0	29					.byte (("?PairCtlA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b2e1	44 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2e3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2e4	08					.byte NN	;wh_Flags	dictionary flags
=45664					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2e5	d5 24		cmp $24,x	QPairCtlA:	cmp DStack+0,x
.b2e7	f0 05		beq $b2ee			beq _8
.b2e9	a9 ea		lda #$ea			lda #$100+err_ControlMismatch
.b2eb	4c 67 b5	jmp $b567			jmp ThrowA
.b2ee	e8		inx		_8:		inx
.b2ef	e8		inx				inx	; Drop n
.b2f0	60		rts				rts
=12					CL	.var *-(WordListLink+wh_Xt)
=$b2f1					en = *	; remember here
>b2e3	0c					.byte CL	;wh_CodeLength
>0743					DoLeave  .word ?	; head of leave addr patch chain
>0745					DoStkIndex: .byte ?
>0746					DoIndexL: .fill DoStkDim
>074e					DoIndexH: .fill DoStkDim
>0756					DoFufaL:  .fill DoStkDim
>075e					DoFufaH:  .fill DoStkDim
>b2f1	3f 44 6f			L1:	.text "?Do"	;  name of word as a string, ending at wh_NameLastChar
>b2f4	e3					.byte (("?Do"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b2f5	60 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2f8	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45684					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2f9					Question_Do:
.b2f9	20 3a b4	jsr $b43a			jsr Do_Leave_Init
.b2fc	a9 10		lda #$10			lda #<_runtime
.b2fe	a0 b3		ldy #$b3			ldy #>_runtime
.b300	20 48 ce	jsr $ce48			jsr Jsr_Comma_YA	; compile JSR _runtime
.b303	a9 d0		lda #$d0			lda #$d0		; compile BNE *+5
.b305	a0 03		ldy #$03			ldy #3
.b307	20 23 ce	jsr $ce23			jsr Comma_YA
.b30a	20 1d b4	jsr $b41d			jsr Leave		; compile JMP leave
.b30d	4c 2e b3	jmp $b32e			jmp Do_8		; finish
=23					CL	.var *-(WordListLink+wh_Xt)
=$b310					en = *	; remember here
>b2f7	17					.byte CL	;wh_CodeLength
.b310					_runtime:
.b310	20 36 b3	jsr $b336			jsr Do_Runtime	; start normally (we assume TOS!=NOS)
.b313	a5 12		lda $12				lda DoIndex+0	; Are TOS and NOS equal?
.b315	f0 01		beq $b318			beq _2
.b317	60		rts				rts		; return Z=0 to signal continue
.b318	a5 13		lda $13		_2:		lda DoIndex+1
.b31a	c9 80		cmp #$80			cmp #$80
.b31c	60		rts				rts		; return Z
>b31d	44 6f				L1:	.text "Do"	;  name of word as a string, ending at wh_NameLastChar
>b31f	e2					.byte (("Do"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b320	74 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b322	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b323	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45727					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b324					Do:
.b324	20 3a b4	jsr $b43a			jsr Do_Leave_Init
.b327	a9 36		lda #$36			lda #<Do_runtime
.b329	a0 b3		ldy #$b3			ldy #>Do_runtime
.b32b	20 48 ce	jsr $ce48			jsr Jsr_Comma_YA	; compile JSR _runtime
.b32e	20 2c cb	jsr $cb2c	Do_8:		jsr Here		; remember loop body start addr
.b331	a9 24		lda #$24			lda #<Do		; identifier
.b333	4c eb b8	jmp $b8eb			jmp PushZA
=18					CL	.var *-(WordListLink+wh_Xt)
=$b336					en = *	; remember here
>b322	12					.byte CL	;wh_CodeLength
.b336					Do_Runtime:
.b336	ce 45 07	dec $0745			dec DoStkIndex		; alloc DO stack entry
.b339	ac 45 07	ldy $0745			ldy DoStkIndex
.b33c	30 2d		bmi $b36b			bmi _TooDeep
.b33e	a5 12		lda $12				lda DoIndex+0		; save previous DoIndex
.b340	99 46 07	sta $0746,y			sta DoIndexL,y
.b343	a5 13		lda $13				lda DoIndex+1
.b345	99 4e 07	sta $074e,y			sta DoIndexH,y
.b348	38		sec				sec			; fudge factor (FUFA)= $8000 - limit
.b349	a9 00		lda #$00			lda #0			;   the number that will trip the overflow flag
.b34b	f5 26		sbc $26,x			sbc DStack+2,x
.b34d	99 56 07	sta $0756,y			sta DoFuFaL,y
.b350	a9 80		lda #$80			lda #$80
.b352	f5 27		sbc $27,x			sbc DStack+3,x
.b354	99 5e 07	sta $075e,y			sta DoFuFaH,y
.b357	18		clc				clc			; index= FUFA plus original index
.b358	b5 24		lda $24,x			lda DStack+0,x
.b35a	79 56 07	adc $0756,y			adc DoFuFaL,y
.b35d	85 12		sta $12				sta DoIndex+0
.b35f	b5 25		lda $25,x			lda DStack+1,x
.b361	79 5e 07	adc $075e,y			adc DoFuFaH,y
.b364	85 13		sta $13				sta DoIndex+1
.b366	e8		inx				inx			; Drop orig index
.b367	e8		inx				inx
.b368	e8		inx				inx			; Drop orig limit
.b369	e8		inx				inx
.b36a	60		rts				rts			; return
.b36b	a9 f9		lda #$f9	_TooDeep:	lda #$100+err_DoLoop_TooDeep
.b36d	20 67 b5	jsr $b567			jsr ThrowA
>b370	4c 6f 6f 70			L1:	.text "Loop"	;  name of word as a string, ending at wh_NameLastChar
>b374	04					.byte (("Loop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b375	9f b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b377	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b378	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45812					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b379					Loop:
.b379	a9 80		lda #$80			lda #<_Runtime
.b37b	a0 b3		ldy #$b3			ldy #>_Runtime
.b37d	4c 9c b3	jmp $b39c			jmp Plus_Loop_5
=7					CL	.var *-(WordListLink+wh_Xt)
=$b380					en = *	; remember here
>b377	07					.byte CL	;wh_CodeLength
.b380					_Runtime:
.b380	e6 12		inc $12				inc DoIndex+0
.b382	f0 02		beq $b386			beq _Runtime2
.b384	b8		clv				clv			; return V=0 to signal loop back
.b385	60		rts				rts
.b386	18		clc		_Runtime2:	clc
.b387	a5 13		lda $13				lda DoIndex+1		; handle carry from lo byte
.b389	69 01		adc #$01			adc #1
.b38b	85 13		sta $13				sta DoIndex+1
.b38d	60		rts				rts			; return V to signal loop back
>b38e	2b 4c 6f 6f 70			L1:	.text "+Loop"	;  name of word as a string, ending at wh_NameLastChar
>b393	05					.byte (("+Loop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b394	f4 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b396	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b397	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45843					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b398					Plus_Loop:
.b398	a9 a6		lda #$a6			lda #<Plus_Loop_Runtime
.b39a	a0 b3		ldy #$b3			ldy #>Plus_Loop_Runtime
.b39c	20 bd b3	jsr $b3bd	Plus_Loop_5:	jsr Loop_End		; compile JSR _runtime, BVC back
.b39f	a9 7d		lda #$7d			lda #<(Unloop-wh_xt)
.b3a1	a0 b3		ldy #$b3			ldy #>(Unloop-wh_xt)
.b3a3	4c b0 b7	jmp $b7b0			jmp Compile_Comma_NT_YA ; compile Unloop, return
=14					CL	.var *-(WordListLink+wh_Xt)
=$b3a6					en = *	; remember here
>b396	0e					.byte CL	;wh_CodeLength
.b3a6					Plus_Loop_Runtime:
.b3a6	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b3a8	b0 10		bcs $b3ba		bcs Throw_Stack_12
.b3aa	18		clc				clc			; DoIndex += step
.b3ab	b5 24		lda $24,x			lda DStack+0,x
.b3ad	65 12		adc $12				adc DoIndex+0
.b3af	85 12		sta $12				sta DoIndex+0
.b3b1	b5 25		lda $25,x			lda DStack+1,x
.b3b3	65 13		adc $13				adc DoIndex+1
.b3b5	85 13		sta $13				sta DoIndex+1
.b3b7	e8		inx				inx			; Drop step
.b3b8	e8		inx				inx
.b3b9	60		rts				rts			; return V=0 to signal loop back
.b3ba	4c 2c b5	jmp $b52c	Throw_Stack_12: jmp Throw_Stack
.b3bd					Loop_End:
.b3bd	20 48 ce	jsr $ce48			jsr Jsr_Comma_YA	; compile JSR runtime
.b3c0	a9 24		lda #$24			lda #<Do		; check id
.b3c2	20 e5 b2	jsr $b2e5	Loop_End_3:	jsr QPairCtlA
.b3c5	a9 50		lda #$50			lda #$50		; compile BVC body
.b3c7	20 bc a7	jsr $a7bc			jsr Branch_CommaA
.b3ca	ac 43 07	ldy $0743			ldy DoLeave+0		; for each leave addr entry
.b3cd	ad 44 07	lda $0744			lda DoLeave+1
.b3d0	f0 1b		beq $b3ed			beq _p9
.b3d2	84 14		sty $14		_p1:		sty tmp1+0		;   save entry pointer
.b3d4	85 15		sta $15				sta tmp1+1
.b3d6	a0 01		ldy #$01			ldy #1			;   save link
.b3d8	b1 14		lda ($14),y			lda (tmp1),y
.b3da	48		pha				pha
.b3db	88		dey				dey
.b3dc	b1 14		lda ($14),y			lda (tmp1),y
.b3de	48		pha				pha
.b3df	a5 00		lda $00				lda cp+0		;   patch addr
.b3e1	91 14		sta ($14),y			sta (tmp1),y
.b3e3	a5 01		lda $01				lda cp+1
.b3e5	c8		iny				iny
.b3e6	91 14		sta ($14),y			sta (tmp1),y
.b3e8	68		pla				pla			;   get saved link
.b3e9	a8		tay				tay
.b3ea	68		pla				pla
.b3eb	d0 e5		bne $b3d2			bne _p1
.b3ed					_p9:
.b3ed	20 de b4	jsr $b4de			jsr PopYA		; restore DoLeave
.b3f0	8d 43 07	sta $0743			sta DoLeave+0
.b3f3	8c 44 07	sty $0744			sty DoLeave+1
.b3f6	60		rts				rts
>b3f7	55 6e 6c 6f 6f 70		L1:	.text "Unloop"	;  name of word as a string, ending at wh_NameLastChar
>b3fd	06					.byte (("Unloop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b3fe	13 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b400	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b401	01					.byte CO	;wh_Flags	dictionary flags
=45949					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b402					Unloop:
.b402	ac 45 07	ldy $0745			ldy DoStkIndex
.b405	b9 46 07	lda $0746,y			lda DoIndexL,y	; restore Index
.b408	85 12		sta $12				sta DoIndex+0
.b40a	b9 4e 07	lda $074e,y			lda DoIndexH,y
.b40d	85 13		sta $13				sta DoIndex+1
.b40f	ee 45 07	inc $0745			inc DoStkIndex	; drop Do stack entry
=16					CL	.var *-(WordListLink+wh_Xt)
=$b412					en = *	; remember here
>b400	10					.byte CL	;wh_CodeLength
.b412	60		rts				rts
>b413	4c 65 61 76 65			L1:	.text "Leave"	;  name of word as a string, ending at wh_NameLastChar
>b418	a5					.byte (("Leave"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b419	7d b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b41b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b41c	0d					.byte IM+NN+CO	;wh_Flags	dictionary flags
=45976					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b41d					Leave:
.b41d	a9 4c		lda #$4c			lda #$4c	; JMP abs
.b41f	20 09 ce	jsr $ce09			jsr C_Comma_A
.b422	a5 01		lda $01				lda cp+1	; save cp
.b424	48		pha				pha
.b425	a5 00		lda $00				lda cp+0
.b427	48		pha				pha
.b428	ad 43 07	lda $0743			lda DoLeave+0	; compile DoLeave link, patched later
.b42b	ac 44 07	ldy $0744			ldy DoLeave+1
.b42e	20 23 ce	jsr $ce23			jsr Comma_YA
.b431	68		pla				pla		; update DoLeave
.b432	8d 43 07	sta $0743			sta DoLeave+0
.b435	68		pla				pla
.b436	8d 44 07	sta $0744			sta DoLeave+1
=28					CL	.var *-(WordListLink+wh_Xt)
=$b439					en = *	; remember here
>b41b	1c					.byte CL	;wh_CodeLength
.b439	60		rts				rts
.b43a					Do_Leave_Init:
.b43a	ad 43 07	lda $0743			lda DoLeave+0
.b43d	ac 44 07	ldy $0744			ldy DoLeave+1
.b440	20 b9 b8	jsr $b8b9			jsr PushYA	; save old leave head
.b443	a9 00		lda #$00			lda #0		; init
.b445	8d 44 07	sta $0744			sta DoLeave+1
.b448	60		rts				rts
>b449	49				L1:	.text "I"	;  name of word as a string, ending at wh_NameLastChar
>b44a	21					.byte (("I"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b44b	98 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b44d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b44e	01					.byte CO	;wh_Flags	dictionary flags
=46026					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b44f	ac 45 07	ldy $0745	I:		ldy DoStkIndex
.b452	ca		dex				dex
.b453	ca		dex				dex
.b454	38		sec				sec		; n= fudged index - fudge factor (FUFA)
.b455	a5 12		lda $12				lda DoIndex+0
.b457	f9 56 07	sbc $0756,y			sbc DoFuFaL,y
.b45a	95 24		sta $24,x			sta DStack+0,x
.b45c	a5 13		lda $13				lda DoIndex+1
.b45e	f9 5e 07	sbc $075e,y			sbc DoFuFaH,y
.b461	95 25		sta $25,x			sta DStack+1,x
=20					CL	.var *-(WordListLink+wh_Xt)
=$b463					en = *	; remember here
>b44d	14					.byte CL	;wh_CodeLength
.b463	60		rts				rts
>b464	4a				L1:	.text "J"	;  name of word as a string, ending at wh_NameLastChar
>b465	41					.byte (("J"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b466	ca b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b468	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b469	01					.byte CO	;wh_Flags	dictionary flags
=46053					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b46a	ac 45 07	ldy $0745	J:		ldy DoStkIndex
.b46d	ca		dex				dex
.b46e	ca		dex				dex
.b46f	38		sec				sec		; n= 2nd fudged index - 2nd fudge factor (FUFA)
.b470	b9 46 07	lda $0746,y			lda DoIndexL+0,y	; LSB
.b473	f9 57 07	sbc $0757,y			sbc DoFufaL+1,y
.b476	95 24		sta $24,x			sta DStack+0,x
.b478	b9 4e 07	lda $074e,y			lda DoIndexH+0,y	; MSB
.b47b	f9 5f 07	sbc $075f,y			sbc DoFufaH+1,y
.b47e	95 25		sta $25,x			sta DStack+1,x
=22					CL	.var *-(WordListLink+wh_Xt)
=$b480					en = *	; remember here
>b468	16					.byte CL	;wh_CodeLength
.b480	60		rts				rts
>b481	41 62 6f 72 74 22		L1:	.text 'Abort"'	;  name of word as a string, ending at wh_NameLastChar
>b487	46					.byte (('Abort"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>b488	e5 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b48a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b48b	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=46087					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b48c					Abort_Quote:
.b48c	20 13 ba	jsr $ba13			jsr S_Quote		; compile the string literal
.b48f	a0 b4		ldy #$b4			ldy #>_runtime		; compile JSR runtime, return
.b491	a9 96		lda #$96			lda #<_runtime
.b493	4c 48 ce	jmp $ce48			jmp Jsr_Comma_YA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b496					en = *	; remember here
>b48a	0a					.byte CL	;wh_CodeLength
.b496					_runtime:
.b496	b5 28		lda $28,x			lda DStack+4,x
.b498	15 29		ora $29,x			ora DStack+5,x
.b49a	d0 03		bne $b49f			bne _do_abort	; true?
.b49c	4c 53 ae	jmp $ae53			jmp ThreeDrop	; Drop three entries from the Data Stack
.b49f					_do_abort:
.b49f	20 08 cf	jsr $cf08			jsr Type	; print string
.b4a2	20 28 ac	jsr $ac28			jsr CR		; We follow Gforth in going to a new line
.b4a5	a9 fe		lda #$fe			lda #$100+err_AbortQuote
.b4a7	4c 67 b5	jmp $b567			jmp ThrowA
>b4aa	41 62 6f 72 74			L1:	.text "Abort"	;  name of word as a string, ending at wh_NameLastChar
>b4af	85					.byte (("Abort"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b4b0	07 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b4b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b4b3	08					.byte NN	;wh_Flags	dictionary flags
=46127					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b4b4	a9 ff		lda #$ff	Abort:		lda #$100+err_Abort
.b4b6	4c 67 b5	jmp $b567			jmp ThrowA
=5					CL	.var *-(WordListLink+wh_Xt)
=$b4b9					en = *	; remember here
>b4b2	05					.byte CL	;wh_CodeLength
>b4b9	50 6f 70 41			L1:	.text "PopA"	;  name of word as a string, ending at wh_NameLastChar
>b4bd	24					.byte (("PopA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b4be	2f b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b4c0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b4c1	08					.byte NN	;wh_Flags	dictionary flags
=46141					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b4c2					PopA:
.b4c2	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b4c4	b0 66		bcs $b52c		bcs Throw_Stack
.b4c6	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b4c8	e8		inx				inx
.b4c9	e8		inx				inx
=8					CL	.var *-(WordListLink+wh_Xt)
=$b4ca					en = *	; remember here
>b4c0	08					.byte CL	;wh_CodeLength
.b4ca	60		rts		                rts
.b4cb					PopA2:
.b4cb	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b4cd	b0 5d		bcs $b52c		bcs Throw_Stack
.b4cf	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b4d1	e8		inx				inx
.b4d2	e8		inx				inx
.b4d3	60		rts		                rts
>b4d4	50 6f 70 59 41			L1:	.text "PopYA"	;  name of word as a string, ending at wh_NameLastChar
>b4d9	25					.byte (("PopYA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b4da	3d b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b4dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b4dd	08					.byte NN	;wh_Flags	dictionary flags
=46169					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b4de					PopYA:
.b4de	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b4e0	b0 4a		bcs $b52c		bcs Throw_Stack
.b4e2	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to YA
.b4e4	b4 25		ldy $25,x			ldy DStack+1,x
.b4e6	e8		inx				inx
.b4e7	e8		inx				inx
=10					CL	.var *-(WordListLink+wh_Xt)
=$b4e8					en = *	; remember here
>b4dc	0a					.byte CL	;wh_CodeLength
.b4e8	60		rts				rts
.b4e9					PopTmp1:
.b4e9	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b4eb	b0 3f		bcs $b52c		bcs Throw_Stack
.b4ed	b5 24		lda $24,x			lda DStack+0,x	; PopYA
.b4ef	b4 25		ldy $25,x			ldy DStack+1,x
.b4f1	e8		inx				inx
.b4f2	e8		inx				inx
.b4f3	85 14		sta $14				sta tmp1+0
.b4f5	84 15		sty $15				sty tmp1+1
.b4f7	60		rts				rts
>b4f8	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_1"	;  name of word as a string, ending at wh_NameLastChar
>b500	77 5f 31
>b503	2b					.byte (("underflow_1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b504	59 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b506	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b507	08					.byte NN	;wh_Flags	dictionary flags
=46211					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b508					underflow_1:
.b508	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b50a	b0 20		bcs $b52c		bcs Throw_Stack
=4					CL	.var *-(WordListLink+wh_Xt)
=$b50c					en = *	; remember here
>b506	04					.byte CL	;wh_CodeLength
.b50c	60		rts				rts
>b50d	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_2"	;  name of word as a string, ending at wh_NameLastChar
>b515	77 5f 32
>b518	4b					.byte (("underflow_2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b519	83 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b51b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b51c	08					.byte NN	;wh_Flags	dictionary flags
=46232					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b51d					underflow_2:
.b51d	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b51f	b0 0b		bcs $b52c		bcs Throw_Stack
=4					CL	.var *-(WordListLink+wh_Xt)
=$b521					en = *	; remember here
>b51b	04					.byte CL	;wh_CodeLength
.b521	60		rts		                rts
.b522					underflow_3:
.b522	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.b524	b0 06		bcs $b52c		bcs Throw_Stack
.b526	60		rts		                rts
.b527					underflow_4:
.b527	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.b529	b0 01		bcs $b52c		bcs Throw_Stack
.b52b	60		rts		                rts
.b52c					Throw_Stack:
.b52c	30 04		bmi $b532			bmi _over
.b52e	a9 fc		lda #$fc			lda #$100+err_Stack_Underflow
.b530	d0 35		bne $b567			bne ThrowA
.b532	a9 fd		lda #$fd	_over:		lda #$100+err_Stack_Overflow
.b534	d0 31		bne $b567			bne ThrowA
.b536					Throw_FPStack:
.b536	30 04		bmi $b53c			bmi _over
.b538	a9 d3		lda #$d3			lda #$100+err_FPStackUnderflow
.b53a	d0 2b		bne $b567			bne ThrowA
.b53c	a9 d4		lda #$d4	_over:		lda #$100+err_FPStackOverflow
.b53e	d0 27		bne $b567			bne ThrowA
.b540					Throw_FpOutOfRange:
.b540	a9 d5		lda #$d5			lda #$100+err_FpOutOfRange
.b542	d0 23		bne $b567			bne ThrowA
>b544	3f 53 74 61 63 6b		L1:	.text "?Stack"	;  name of word as a string, ending at wh_NameLastChar
>b54a	66					.byte (("?Stack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b54b	98 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b54d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b54e	08					.byte NN	;wh_Flags	dictionary flags
=46282					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b54f					QStack:
.b54f	e0 29		cpx #$29		cpx #-2*0+DStack0+1
.b551	b0 d9		bcs $b52c		bcs Throw_Stack
.b553	a4 4c		ldy $4c				ldy fp			; check floating point stack
.b555	c0 0b		cpy #$0b			cpy #FDim+1
.b557	b0 dd		bcs $b536			bcs Throw_FPStack
=10					CL	.var *-(WordListLink+wh_Xt)
=$b559					en = *	; remember here
>b54d	0a					.byte CL	;wh_CodeLength
.b559	60		rts				rts			; all OK
>b55a	54 68 72 6f 77			L1:	.text "Throw"	;  name of word as a string, ending at wh_NameLastChar
>b55f	e5					.byte (("Throw"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b560	ca b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b562	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b563	08					.byte NN	;wh_Flags	dictionary flags
=46303					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b564	20 c2 b4	jsr $b4c2	Throw:		jsr PopA		; pop n
.b567	20 92 b5	jsr $b592	ThrowA:		jsr Type_Exception_Text_A ; print the associated error string
.b56a	a2 28		ldx #$28			ldx #DStack0		; reset data stack (in case of underflow)
.b56c					Abort_Core:
.b56c	20 ca b9	jsr $b9ca			jsr SLiteral_runtime
.b56f	4c 75 b5	jmp $b575			  jmp +
>b572	3f 00 20					  .text "?",0," "	; signal an error to the simulator
.b575	20 08 cf	jsr $cf08	+		jsr Type
.b578	20 24 d0	jsr $d024			jsr R_From		; show return stack TOS
.b57b	20 9e 81	jsr $819e			jsr TypeSymbol
.b57e	20 40 d0	jsr $d040			jsr R_Fetch		; show return stack NOS
.b581	20 9e 81	jsr $819e			jsr TypeSymbol
.b584	20 28 ac	jsr $ac28			jsr CR
.b587					Abort_Core2:
.b587	a9 08		lda #$08			lda #DoStkDim		; init do stack
.b589	8d 45 07	sta $0745			sta DoStkIndex
.b58c	20 d6 b5	jsr $b5d6			jsr Empty_Stack		; empty the Data Stack & FP stack
.b58f	4c e6 b5	jmp $b5e6			jmp Quit		; continue into QUIT.
.b592					Type_Exception_Text_A:
.b592	85 16		sta $16				sta tmp2+0	; save error code
.b594	a9 37		lda #$37			lda #<Exception_Text_List
.b596	a0 dc		ldy #$dc			ldy #>Exception_Text_List	; for each table entry
.b598	85 18		sta $18				sta tmp3+0
.b59a	84 19		sty $19				sty tmp3+1
.b59c	a0 00		ldy #$00	_TestEntry:	ldy #0		;   code match?
.b59e	b1 18		lda ($18),y			lda (tmp3),y
.b5a0	f0 1a		beq $b5bc			beq _NotFound
.b5a2	c5 16		cmp $16				cmp tmp2+0
.b5a4	f0 11		beq $b5b7			beq _Found
.b5a6	c8		iny		-		iny		;   step to end of entry
.b5a7	b1 18		lda ($18),y			lda (tmp3),y
.b5a9	d0 fb		bne $b5a6			bne -
.b5ab	98		tya				tya		;   step to next entry
.b5ac	38		sec				sec
.b5ad	65 18		adc $18				adc tmp3+0
.b5af	85 18		sta $18				sta tmp3+0
.b5b1	90 e9		bcc $b59c			bcc _TestEntry
.b5b3	e6 19		inc $19				inc tmp3+1
.b5b5	d0 e5		bne $b59c			bne _TestEntry
.b5b7					_Found:
.b5b7	a0 01		ldy #$01			ldy #1
.b5b9	4c 29 cf	jmp $cf29			jmp Print_ASCIIZ_tmp3_no_lf
.b5bc	a0 ff		ldy #$ff	_NotFound:	ldy #$ff		; print code
.b5be	a5 16		lda $16				lda tmp2+0
.b5c0	20 b9 b8	jsr $b8b9			jsr PushYA
.b5c3	4c e6 cc	jmp $cce6			jmp Dot
>b5c6	45 6d 70 74 79 2d 53 74		L1:	.text "Empty-Stack"	;  name of word as a string, ending at wh_NameLastChar
>b5ce	61 63 6b
>b5d1	6b					.byte (("Empty-Stack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b5d2	df b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5d4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5d5	08					.byte NN	;wh_Flags	dictionary flags
=46417					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5d6	a2 28		ldx #$28	Empty_Stack:	ldx #DStack0	; empty data stack
.b5d8	a9 0a		lda #$0a			lda #FDim	; empty FP stack
.b5da	85 4c		sta $4c				sta fp
=6					CL	.var *-(WordListLink+wh_Xt)
=$b5dc					en = *	; remember here
>b5d4	06					.byte CL	;wh_CodeLength
.b5dc	60		rts				rts
>b5dd	51 75 69 74			L1:	.text "Quit"	;  name of word as a string, ending at wh_NameLastChar
>b5e1	84					.byte (("Quit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b5e2	51 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5e4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5e5	08					.byte NN	;wh_Flags	dictionary flags
=46433					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5e6					Quit:
.b5e6	8a		txa				txa		; Save the DStack that we just defined
.b5e7	a2 ff		ldx #$ff			ldx #rsp0
.b5e9	9a		txs				txs
.b5ea	aa		tax				tax		; Restore the DStack. Dude, seriously.
.b5eb	a9 00		lda #$00			lda #0		; SOURCE-ID= zero (keyboard input)
.b5ed	85 02		sta $02				sta insrc+0
.b5ef	85 03		sta $03				sta insrc+1
.b5f1	20 46 b8	jsr $b846			jsr Left_Bracket_NoCheck ; switch to interpret state
.b5f4					_get_line:
.b5f4	a9 00		lda #$00			lda #<buffer0	; input buffer, this is paranoid
.b5f6	85 04		sta $04				sta cib+0
.b5f8	a9 02		lda #$02			lda #>buffer0
.b5fa	85 05		sta $05				sta cib+1
.b5fc	20 7b c3	jsr $c37b			jsr Refill		; ( -- f )
.b5ff	b5 24		lda $24,x			lda DStack+0,x
.b601	d0 05		bne $b608			bne +
.b603	a9 6b		lda #$6b			lda #$100+err_Refill	; REFILL returned a FALSE flag, something went wrong
.b605	4c 67 b5	jmp $b567			jmp ThrowA
.b608	e8		inx		+		inx			; drop the flag
.b609	e8		inx				inx
.b60a	20 21 b6	jsr $b621			jsr interpret
.b60d	a5 0a		lda $0a				lda state
.b60f	d0 06		bne $b617			bne _print_compiled
.b611	a9 e3		lda #$e3			lda #<str_ok
.b613	a0 db		ldy #$db			ldy #>str_ok
.b615	d0 04		bne $b61b			bne _print
.b617	a9 e7		lda #$e7	_print_compiled: lda #<str_compiled	; "compile" string
.b619	a0 db		ldy #$db			ldy #>str_compiled
.b61b	20 34 cf	jsr $cf34	_print:		jsr Print_ASCIIZ_YA
.b61e	4c f4 b5	jmp $b5f4			jmp _get_line
=59					CL	.var *-(WordListLink+wh_Xt)
=$b621					en = *	; remember here
>b5e4	3b					.byte CL	;wh_CodeLength
.b621					Interpret:
.b621					_loop:
.b621	20 4f b5	jsr $b54f			jsr QStack		; check stack bounds
.b624	20 9a bb	jsr $bb9a			jsr parse_name		; ( "string" -- addr u )
.b627	b5 24		lda $24,x	                lda DStack+0,x		; empty line?
.b629	f0 53		beq $b67e	                beq _line_done
.b62b	20 c4 cd	jsr $cdc4			jsr Two_dup		; ( addr u -- addr u addr u )
.b62e	20 d7 bd	jsr $bdd7			jsr find_name		; ( addr u addr u -- addr u nt|0 )
.b631	b5 25		lda $25,x			lda DStack+1,x		; word found?
.b633	d0 1b		bne $b650			bne _got_name_token
.b635	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.b636	e8		inx		                inx
.b637	20 aa b1	jsr $b1aa	                jsr Number           ; ( addr u -- u|d )
.b63a	a5 0a		lda $0a		                lda state		; interpreting?
.b63c	f0 e3		beq $b621	                beq _loop		;   we're done
.b63e	a9 20		lda #$20	                lda #$20		; double cell number?
.b640	24 0c		bit $0c		                bit status
.b642	f0 06		beq $b64a	                beq _single_number
.b644	20 70 b9	jsr $b970			jsr Two_literal		; compile a double number
.b647	4c 21 b6	jmp $b621			jmp _loop
.b64a	20 6c b8	jsr $b86c	_single_number:	jsr Literal		; compile a single number
.b64d	4c 21 b6	jmp $b621			jmp _loop
.b650					_got_name_token:
.b650	20 8c ca	jsr $ca8c			jsr Nip
.b653	20 8c ca	jsr $ca8c			jsr Nip			; ( nt )
.b656	85 14		sta $14				sta tmp1+0		; save a work copy of nt
.b658	84 15		sty $15				sty tmp1+1
.b65a	a0 84		ldy #$84			ldy #Wh_Flags		; get word flags, we'll need them shortly
.b65c	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b65e	a4 0a		ldy $0a				ldy state		; interpreting or compiling?
.b660	d0 12		bne $b674			bne _compile
.b662	29 01		and #$01			and #CO			; is the word COMPILE-ONLY?
.b664	f0 05		beq $b66b			beq _execute
.b666	a9 f2		lda #$f2			lda #$100+err_CompileOnly ;   complain & quit
.b668	20 67 b5	jsr $b567			jsr ThrowA
.b66b	20 e3 be	jsr $bee3	_execute:	jsr Name_To_Int		; ( nt -- xt )
.b66e	20 46 cf	jsr $cf46			jsr Execute		; EXECUTE the xt that is TOS
.b671	4c 21 b6	jmp $b621	                jmp _loop
.b674					_compile:
.b674	29 04		and #$04			and #IM			; is the word IMMEDIATE?
.b676	d0 f3		bne $b66b			bne _execute		;   IMMEDIATE word, execute now
.b678	20 ad b7	jsr $b7ad			jsr Compile_Comma_NT	; Compile the nt into the Dictionary
.b67b	4c 21 b6	jmp $b621			jmp _loop
.b67e					_line_done:
.b67e	e8		inx				inx			; drop stuff from PARSE_NAME
.b67f	e8		inx				inx
.b680	e8		inx				inx
.b681	e8		inx				inx
.b682	60		rts				rts
>b683	49 6d 6d 65 64 69 61 74		L1:	.text "Immediate"	;  name of word as a string, ending at wh_NameLastChar
>b68b	65
>b68c	a9					.byte (("Immediate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b68d	61 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b68f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b690	08					.byte NN	;wh_Flags	dictionary flags
=46604					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b691	a9 04		lda #$04	Immediate:	lda #IM
.b693	48		pha		SetFlag:	pha
.b694	20 6b bb	jsr $bb6b			jsr current_to_dp
.b697	a0 84		ldy #$84			ldy #Wh_Flags
.b699	68		pla				pla
.b69a	11 10		ora ($10),y			ora (dp),y
.b69c	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b69e					en = *	; remember here
>b68f	0d					.byte CL	;wh_CodeLength
.b69e	60		rts				rts
>b69f	43 6f 6d 70 69 6c 65 2d		L1:	.text "Compile-only"	;  name of word as a string, ending at wh_NameLastChar
>b6a7	6f 6e 6c 79
>b6ab	2c					.byte (("Compile-only"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b6ac	0c b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6ae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6af	08					.byte NN	;wh_Flags	dictionary flags
=46635					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6b0	a9 01		lda #$01	Compile_Only:	lda #CO
.b6b2	d0 df		bne $b693			bne SetFlag
=4					CL	.var *-(WordListLink+wh_Xt)
=$b6b4					en = *	; remember here
>b6ae	04					.byte CL	;wh_CodeLength
>b6b4	6e 65 76 65 72 2d 6e 61		L1:	.text "never-native"	;  name of word as a string, ending at wh_NameLastChar
>b6bc	74 69 76 65
>b6c0	ac					.byte (("never-native"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b6c1	2b b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6c4	08					.byte NN	;wh_Flags	dictionary flags
=46656					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6c5	20 6b bb	jsr $bb6b	Never_Native:	jsr current_to_dp
.b6c8	a0 84		ldy #$84			ldy #Wh_Flags
.b6ca	b1 10		lda ($10),y			lda (dp),y
.b6cc	09 08		ora #$08			ora #NN		; set NN flag
.b6ce	29 fd		and #$fd			and #$ff-AN	; clear AN flag
.b6d0	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b6d2					en = *	; remember here
>b6c3	0d					.byte CL	;wh_CodeLength
.b6d2	60		rts				rts
>b6d3	61 6c 77 61 79 73 2d 6e		L1:	.text "always-native"	;  name of word as a string, ending at wh_NameLastChar
>b6db	61 74 69 76 65
>b6e0	ad					.byte (("always-native"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b6e1	40 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6e3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6e4	08					.byte NN	;wh_Flags	dictionary flags
=46688					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6e5	20 6b bb	jsr $bb6b	Always_Native:	jsr current_to_dp
.b6e8	a0 84		ldy #$84			ldy #Wh_Flags
.b6ea	b1 10		lda ($10),y			lda (dp),y
.b6ec	09 02		ora #$02			ora #AN		; Make sure AN flag is set
.b6ee	29 f7		and #$f7			and #$ff-NN	; and NN flag is clear.
.b6f0	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b6f2					en = *	; remember here
>b6e3	0d					.byte CL	;wh_CodeLength
.b6f2	60		rts				rts
>b6f3	61 6c 6c 6f 77 2d 6e 61		L1:	.text "allow-native"	;  name of word as a string, ending at wh_NameLastChar
>b6fb	74 69 76 65
>b6ff	ac					.byte (("allow-native"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b700	60 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b702	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b703	08					.byte NN	;wh_Flags	dictionary flags
=46719					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b704	20 6b bb	jsr $bb6b	Allow_Native:	jsr current_to_dp
.b707	a0 84		ldy #$84			ldy #Wh_Flags	; offset for status byte
.b709	b1 10		lda ($10),y			lda (dp),y
.b70b	29 f5		and #$f5			and #$ff-NN-AN	; AN and NN flag is clear.
.b70d	91 10		sta ($10),y			sta (dp),y
=11					CL	.var *-(WordListLink+wh_Xt)
=$b70f					en = *	; remember here
>b702	0b					.byte CL	;wh_CodeLength
.b70f	60		rts				rts
>b710	6e 63 2d 6c 69 6d 69 74		L1:	.text "nc-limit"	;  name of word as a string, ending at wh_NameLastChar
>b718	88					.byte (("nc-limit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b719	7f b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b71b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b71c	08					.byte NN	;wh_Flags	dictionary flags
=46744					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b71d	a0 03		ldy #$03			ldy #>nc_limit
.b71f	a9 02		lda #$02			lda #<nc_limit
.b721	4c b9 b8	jmp $b8b9			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b724					en = *	; remember here
>b71b	07					.byte CL	;wh_CodeLength
>b724	73 74 72 69 70 2d 75 6e		L1:	.text "strip-underflow"	;  name of word as a string, ending at wh_NameLastChar
>b72c	64 65 72 66 6c 6f 77
>b733	ef					.byte (("strip-underflow"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b734	98 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b736	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b737	08					.byte NN	;wh_Flags	dictionary flags
=46771					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b738	a0 03		ldy #$03			ldy #>uf_strip
.b73a	a9 04		lda #$04			lda #<uf_strip
.b73c	4c b9 b8	jmp $b8b9			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b73f					en = *	; remember here
>b736	07					.byte CL	;wh_CodeLength
>b73f	70 6f 73 74 70 6f 6e 65		L1:	.text "postpone"	;  name of word as a string, ending at wh_NameLastChar
>b747	a8					.byte (("postpone"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b748	b3 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b74a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b74b	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=46791					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b74c					Postpone:
.b74c	20 cb bb	jsr $bbcb			jsr parse_name_check	; get name string
.b74f	20 03 be	jsr $be03			jsr find_name_check	; lookup name
.b752	a0 84		ldy #$84			ldy #Wh_Flags		; IMMEDIATE word?
.b754	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b756	29 04		and #$04			and #IM
.b758	f0 03		beq $b75d			beq _not_immediate
.b75a	4c ad b7	jmp $b7ad			jmp Compile_Comma_NT	; compile it as if it was not IMMEDIATE
.b75d					_not_immediate:
.b75d	20 9f b8	jsr $b89f			jsr LDYA_Immed_Comma		; compile LDA #; LDY # with nt of the word
.b760	a0 b7		ldy #$b7			ldy #>Compile_Comma_NT_YA	; compile COMPILE,
.b762	a9 b0		lda #$b0			lda #<Compile_Comma_NT_YA
.b764	4c 48 ce	jmp $ce48			jmp Jsr_Comma_YA
=27					CL	.var *-(WordListLink+wh_Xt)
=$b767					en = *	; remember here
>b74a	1b					.byte CL	;wh_CodeLength
>b767	52 65 63 75 72 73 65		L1:	.text "Recurse"	;  name of word as a string, ending at wh_NameLastChar
>b76e	a7					.byte (("Recurse"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b76f	c7 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b771	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b772	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=46830					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b773					Recurse:
.b773	a5 0e		lda $0e				lda WorkWord+0
.b775	a4 0f		ldy $0f				ldy WorkWord+1
.b777	20 b9 b8	jsr $b8b9			jsr PushYA
.b77a	24 0c		bit $0c				bit status		; does WorkWord contain xt or nt?
.b77c	50 10		bvc $b78e			bvc _xt
.b77e	a0 84		ldy #$84			ldy #wh_Flags		; is it Always-Native ?
.b780	b1 0e		lda ($0e),y			lda (WorkWord),y
.b782	29 02		and #$02			and #AN
.b784	f0 05		beq $b78b			beq _NotAn
.b786	a9 e5		lda #$e5			lda #$100+err_InvalidRecursion
.b788	20 67 b5	jsr $b567			jsr ThrowA
.b78b					_NotAN:
.b78b	20 e3 be	jsr $bee3			jsr Name_To_Int		; convert nt to xt
.b78e					_xt:
.b78e	4c 45 ce	jmp $ce45			jmp Jsr_Comma		; compile JSR xt, return
=30					CL	.var *-(WordListLink+wh_Xt)
=$b791					en = *	; remember here
>b771	1e					.byte CL	;wh_CodeLength
>b791	43 6f 6d 70 69 6c 65 2c		L1:	.text "Compile,"	;  name of word as a string, ending at wh_NameLastChar
>b799	88					.byte (("Compile,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b79a	ee b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b79c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b79d	08					.byte NN	;wh_Flags	dictionary flags
=46873					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b79e					Compile_Comma:
.b79e	20 80 d0	jsr $d080			jsr Dup			; ( xt xt )
.b7a1	20 89 be	jsr $be89			jsr Int_To_Name		; ( xt nt )	does a dictionary search, tmp1=nt
.b7a4	e8		inx				inx			; drop nt
.b7a5	e8		inx				inx
.b7a6	a5 15		lda $15				lda tmp1+1
.b7a8	d0 0a		bne $b7b4			bne Compile_Comma_NT_Tmp1
.b7aa	4c 45 ce	jmp $ce45			jmp Jsr_Comma		; compile jsr, return
.b7ad					Compile_Comma_NT:
.b7ad	20 de b4	jsr $b4de			jsr PopYA
.b7b0					Compile_Comma_NT_YA:
.b7b0	85 14		sta $14				sta tmp1+0		; tmp1= nt
.b7b2	84 15		sty $15				sty tmp1+1
.b7b4					Compile_Comma_NT_Tmp1:
.b7b4	ca		dex				dex
.b7b5	ca		dex				dex
.b7b6	18		clc				clc
.b7b7	a5 14		lda $14				lda tmp1+0
.b7b9	69 85		adc #$85			adc #wh_xt
.b7bb	95 24		sta $24,x			sta DSTack+0,x
.b7bd	a5 15		lda $15				lda tmp1+1
.b7bf	69 00		adc #$00			adc #0
.b7c1	95 25		sta $25,x			sta DStack+1,x		; ( xt )
.b7c3	a0 83		ldy #$83			ldy #wh_CodeLength
.b7c5	b1 14		lda ($14),y			lda (tmp1),y
.b7c7	20 eb b8	jsr $b8eb			jsr PushZA		; ( xt u )
.b7ca	a0 84		ldy #$84			ldy #Wh_Flags		; save word flags
.b7cc	b1 14		lda ($14),y			lda (tmp1),y
.b7ce	95 25		sta $25,x			sta DStack+1,x
.b7d0	29 02		and #$02			and #AN			; Always Native (AN) word?
.b7d2	d0 2b		bne $b7ff			bne _inline
.b7d4	b5 25		lda $25,x			lda DStack+1,x		; Never Native (NN) word?
.b7d6	29 08		and #$08			and #NN
.b7d8	d0 0e		bne $b7e8			bne _jsr_opt
.b7da	ad 03 03	lda $0303			lda nc_limit+1		; wordsize<=nc_limit?
.b7dd	d0 20		bne $b7ff			bne _inline
.b7df	ad 02 03	lda $0302			lda nc_limit+0
.b7e2	d5 24		cmp $24,x			cmp DStack+0,x
.b7e4	f0 02		beq $b7e8			beq _jsr_opt
.b7e6	b0 17		bcs $b7ff			bcs _inline
.b7e8					_jsr_opt:
.b7e8	ad 04 03	lda $0304			lda uf_strip
.b7eb	f0 0d		beq $b7fa			beq _jsr
.b7ed	b5 25		lda $25,x			lda DStack+1,x		; underflow strip & not stack strip?
.b7ef	49 10		eor #$10			eor #UF
.b7f1	29 50		and #$50			and #UF+R6
.b7f3	d0 05		bne $b7fa			bne _jsr
.b7f5	a9 03		lda #$03			lda #3			; skip the underflow check
.b7f7	20 19 cb	jsr $cb19			jsr Nos_Plus_A
.b7fa					_jsr:
.b7fa	e8		inx				inx			; Drop len or nt
.b7fb	e8		inx				inx
.b7fc	4c 45 ce	jmp $ce45			jmp Jsr_Comma		; compile jsr, return
.b7ff					_inline:
.b7ff	b5 25		lda $25,x			lda DStack+1,x		; this word contains RTS addr save & restore?
.b801	29 40		and #$40			and #R6
.b803	f0 0a		beq $b80f			beq +
.b805	a9 06		lda #$06			lda #6			;   Adjust xt: skip over the leading RTS addr save
.b807	20 19 cb	jsr $cb19			jsr Nos_Plus_A
.b80a	a9 f4		lda #$f4			lda #$f4		;   Adjust u: omit the leading RTS addr save & trailing RTS addr restore
.b80c	20 4f cb	jsr $cb4f			jsr minus_a
.b80f					+
.b80f	ad 04 03	lda $0304			lda uf_strip+0		; user wants underflow stripping?
.b812	f0 10		beq $b824			beq +
.b814	b5 25		lda $25,x			lda DStack+1,x		; this word contains underflow checking?
.b816	29 10		and #$10			and #UF
.b818	f0 0a		beq $b824			beq +
.b81a	a9 03		lda #$03			lda #3			;   Adjust xt: Start after underflow check
.b81c	20 19 cb	jsr $cb19			jsr Nos_Plus_A
.b81f	a9 fd		lda #$fd			lda #$fd		;   Adjust u: omit underflow check
.b821	20 4f cb	jsr $cb4f			jsr minus_a
.b824					+
.b824	b5 24		lda $24,x			lda DStack+0,x		; compile code bytes
.b826	f0 0c		beq $b834			beq _copy_end
.b828	a1 26		lda ($26,x)	_copy_loop:	lda (DStack+2,x)
.b82a	20 09 ce	jsr $ce09			jsr C_Comma_A
.b82d	20 6a cb	jsr $cb6a			jsr NOS_One_Plus
.b830	d6 24		dec $24,x			dec DStack+0,x
.b832	d0 f4		bne $b828			bne _copy_loop
.b834					_copy_end:
.b834	4c 05 c6	jmp $c605			jmp Two_drop
=153					CL	.var *-(WordListLink+wh_Xt)
=$b837					en = *	; remember here
>b79c	99					.byte CL	;wh_CodeLength
>b837	5b				L1:	.text "["	;  name of word as a string, ending at wh_NameLastChar
>b838	61					.byte (("["[-1]&7)<<5)+(*-L1)	;wh_HNL
>b839	19 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b83b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b83c	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=47032					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b83d	a5 0a		lda $0a		Left_Bracket:	lda state+0		; Already in the interpret state?
.b83f	d0 05		bne $b846			bne Left_Bracket_NoCheck
.b841	a9 69		lda #$69			lda #$100+err_AlreadyInterpreting
.b843	4c 67 b5	jmp $b567			jmp ThrowA
.b846					Left_Bracket_NoCheck:
.b846	a9 00		lda #$00			lda #0
.b848	85 0a		sta $0a		Left_Bracket_3:	sta state+0
.b84a	85 0b		sta $0b				sta state+1
=15					CL	.var *-(WordListLink+wh_Xt)
=$b84c					en = *	; remember here
>b83b	0f					.byte CL	;wh_CodeLength
.b84c	60		rts				rts
>b84d	5d				L1:	.text "]"	;  name of word as a string, ending at wh_NameLastChar
>b84e	a1					.byte (("]"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b84f	b8 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b851	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b852	0c					.byte IM+NN	;wh_Flags	dictionary flags
=47054					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b853					Right_Bracket:
.b853	a5 0a		lda $0a				lda state+0		; Already in the compile state?
.b855	f0 05		beq $b85c			beq +
.b857	a9 68		lda #$68			lda #$100+err_AlreadyCompiling ;   complain and quit
.b859	4c 67 b5	jmp $b567			jmp ThrowA
.b85c					+
.b85c	a9 ff		lda #$ff			lda #$FF
.b85e	d0 e8		bne $b848			bne Left_Bracket_3
=13					CL	.var *-(WordListLink+wh_Xt)
=$b860					en = *	; remember here
>b851	0d					.byte CL	;wh_CodeLength
>b860	4c 69 74 65 72 61 6c		L1:	.text "Literal"	;  name of word as a string, ending at wh_NameLastChar
>b867	87					.byte (("Literal"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b868	ce b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b86a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b86b	1d					.byte IM+CO+UF+NN	;wh_Flags	dictionary flags
=47079					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b86c					Literal:
.b86c	20 08 b5	jsr $b508			jsr underflow_1
.b86f	20 75 b8	jsr $b875			jsr LitCompile		; compile load regs, choose a runtime routine
.b872	4c b0 b7	jmp $b7b0			jmp Compile_Comma_NT_YA ; compile JSR runtime
=9					CL	.var *-(WordListLink+wh_Xt)
=$b875					en = *	; remember here
>b86a	09					.byte CL	;wh_CodeLength
.b875					LitCompile:
.b875	b5 25		lda $25,x			lda DStack+1,x		; hi byte zero?
.b877	f0 08		beq $b881			beq _ZByte
.b879	20 9f b8	jsr $b89f			jsr ldya_immed_comma	; compile "ldy #; lda #" using TOS
.b87c	a9 34		lda #$34			lda #<(PushYA-wh_xt)	; prepare for Compile_Comma_NT_YA or Jmp_Comma_NT_YA
.b87e	a0 b8		ldy #$b8			ldy #>(PushYA-wh_xt)
.b880	60		rts				rts
.b881					_ZByte:
.b881	b4 24		ldy $24,x			ldy DStack+0,x		; is it 0 ?
.b883	f0 08		beq $b88d			beq _zero
.b885	20 a6 b8	jsr $b8a6			jsr lda_immed_comma	; compile "lda #" using TOS
.b888	a9 66		lda #$66			lda #<(PushZA-wh_xt)	; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b88a	a0 b8		ldy #$b8			ldy #>(PushZA-wh_xt)
.b88c	60		rts				rts
.b88d	e8		inx		_zero:		inx			; drop
.b88e	e8		inx				inx
.b88f	a9 75		lda #$75			lda #<(Zero-wh_xt)	; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b891	a0 b8		ldy #$b8			ldy #>(Zero-wh_xt)
.b893	60		rts				rts
>b894	4c 44 59 41 23 2c		L1:	.text "LDYA#,"	;  name of word as a string, ending at wh_NameLastChar
>b89a	86					.byte (("LDYA#,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b89b	e7 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b89d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b89e	08					.byte NN	;wh_Flags	dictionary flags
=47130					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b89f					ldya_immed_comma:
.b89f	a9 a0		lda #$a0			lda #$a0		; ldy #
.b8a1	b4 25		ldy $25,x			ldy DStack+1,x
.b8a3	20 23 ce	jsr $ce23			jsr Comma_YA
.b8a6					lda_immed_comma:
.b8a6	a9 a9		lda #$a9			lda #$a9		; lda #
.b8a8	20 09 ce	jsr $ce09			jsr C_Comma_A
.b8ab	4c 06 ce	jmp $ce06			jmp C_Comma
=15					CL	.var *-(WordListLink+wh_Xt)
=$b8ae					en = *	; remember here
>b89d	0f					.byte CL	;wh_CodeLength
>b8ae	50 75 73 68 59 41		L1:	.text "PushYA"	;  name of word as a string, ending at wh_NameLastChar
>b8b4	26					.byte (("PushYA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b8b5	1a b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b8b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b8b8	00					.byte 0	;wh_Flags	dictionary flags
=47156					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b8b9	ca		dex		PushYA:		dex
.b8ba	ca		dex				dex
.b8bb	95 24		sta $24,x			sta DStack+0,x
.b8bd	94 25		sty $25,x			sty DStack+1,x
=6					CL	.var *-(WordListLink+wh_Xt)
=$b8bf					en = *	; remember here
>b8b7	06					.byte CL	;wh_CodeLength
.b8bf	60		rts				rts
>b8c0	54 72 75 65			L1:	.text "True"	;  name of word as a string, ending at wh_NameLastChar
>b8c4	a4					.byte (("True"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b8c5	34 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b8c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b8c8	00					.byte 0	;wh_Flags	dictionary flags
=47172					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b8c9	a9 ff		lda #$ff	True:		lda #$FF
.b8cb	ca		dex		PushAA:		dex
.b8cc	ca		dex				dex
.b8cd	95 24		sta $24,x			sta DStack+0,x
.b8cf	95 25		sta $25,x			sta DStack+1,x
=8					CL	.var *-(WordListLink+wh_Xt)
=$b8d1					en = *	; remember here
>b8c7	08					.byte CL	;wh_CodeLength
.b8d1	60		rts				rts
>b8d2	46 61 6c 73 65			L1:	.text "False"	;  name of word as a string, ending at wh_NameLastChar
>b8d7	a5					.byte (("False"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b8d8	44 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b8da	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b8db	08					.byte NN	;wh_Flags	dictionary flags
=47191					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b8dc	a9 00		lda #$00	False:		lda #0
.b8de	f0 0b		beq $b8eb			beq PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b8e0					en = *	; remember here
>b8da	04					.byte CL	;wh_CodeLength
>b8e0	50 75 73 68 5a 41		L1:	.text "PushZA"	;  name of word as a string, ending at wh_NameLastChar
>b8e6	26					.byte (("PushZA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b8e7	57 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b8e9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b8ea	00					.byte 0	;wh_Flags	dictionary flags
=47206					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b8eb	ca		dex		PushZA:		dex
.b8ec	ca		dex				dex
.b8ed	95 24		sta $24,x			sta DStack+0,x
.b8ef	a9 00		lda #$00			lda #0
.b8f1	95 25		sta $25,x			sta DStack+1,x
=8					CL	.var *-(WordListLink+wh_Xt)
=$b8f3					en = *	; remember here
>b8e9	08					.byte CL	;wh_CodeLength
.b8f3	60		rts				rts
>b8f4	30				L1:	.text "0"	;  name of word as a string, ending at wh_NameLastChar
>b8f5	01					.byte (("0"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b8f6	66 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b8f8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b8f9	08					.byte NN	;wh_Flags	dictionary flags
=47221					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b8fa	a9 00		lda #$00	Zero:		lda #0
.b8fc	f0 ed		beq $b8eb			beq PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b8fe					en = *	; remember here
>b8f8	04					.byte CL	;wh_CodeLength
>b8fe	31				L1:	.text "1"	;  name of word as a string, ending at wh_NameLastChar
>b8ff	21					.byte (("1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b900	75 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b902	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b903	08					.byte NN	;wh_Flags	dictionary flags
=47231					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b904	a9 01		lda #$01	One:		lda #1
.b906	d0 e3		bne $b8eb			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b908					en = *	; remember here
>b902	04					.byte CL	;wh_CodeLength
>b908	32				L1:	.text "2"	;  name of word as a string, ending at wh_NameLastChar
>b909	41					.byte (("2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b90a	7f b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b90c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b90d	08					.byte NN	;wh_Flags	dictionary flags
=47241					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b90e	a9 02		lda #$02	Two:		lda #2
.b910	d0 d9		bne $b8eb			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b912					en = *	; remember here
>b90c	04					.byte CL	;wh_CodeLength
>b912	42 6c				L1:	.text "Bl"	;  name of word as a string, ending at wh_NameLastChar
>b914	82					.byte (("Bl"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b915	89 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b917	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b918	08					.byte NN	;wh_Flags	dictionary flags
=47252					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b919	a9 20		lda #$20	Bl:		lda #AscSP
.b91b	d0 ce		bne $b8eb			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b91d					en = *	; remember here
>b917	04					.byte CL	;wh_CodeLength
>b91d	3e 49 6e			L1:	.text ">In"	;  name of word as a string, ending at wh_NameLastChar
>b920	c3					.byte ((">In"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b921	94 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b923	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b924	08					.byte NN	;wh_Flags	dictionary flags
=47264					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b925	a9 08		lda #$08			lda #ToIn
.b927	4c eb b8	jmp $b8eb			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b92a					en = *	; remember here
>b923	05					.byte CL	;wh_CodeLength
>b92a	53 74 61 74 65			L1:	.text "State"	;  name of word as a string, ending at wh_NameLastChar
>b92f	a5					.byte (("State"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b930	a0 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b932	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b933	08					.byte NN	;wh_Flags	dictionary flags
=47279					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b934	a9 0a		lda #$0a			lda #state
.b936	4c eb b8	jmp $b8eb			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b939					en = *	; remember here
>b932	05					.byte CL	;wh_CodeLength
>b939	64 70				L1:	.text "dp"	;  name of word as a string, ending at wh_NameLastChar
>b93b	02					.byte (("dp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b93c	af b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b93e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b93f	08					.byte NN	;wh_Flags	dictionary flags
=47291					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b940	a9 10		lda #$10			lda #dp
.b942	4c eb b8	jmp $b8eb			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b945					en = *	; remember here
>b93e	05					.byte CL	;wh_CodeLength
>b945	54 6d 70 31			L1:	.text "Tmp1"	;  name of word as a string, ending at wh_NameLastChar
>b949	24					.byte (("Tmp1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b94a	bb b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b94c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b94d	08					.byte NN	;wh_Flags	dictionary flags
=47305					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b94e	a9 14		lda #$14			lda #tmp1
.b950	4c eb b8	jmp $b8eb			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b953					en = *	; remember here
>b94c	05					.byte CL	;wh_CodeLength
>b953	44 53 74 61 63 6b		L1:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
>b959	66					.byte (("DStack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b95a	c9 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b95c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b95d	08					.byte NN	;wh_Flags	dictionary flags
=47321					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b95e	a9 24		lda #$24			lda #DStack
.b960	4c eb b8	jmp $b8eb			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b963					en = *	; remember here
>b95c	05					.byte CL	;wh_CodeLength
>b963	32 4c 69 74 65 72 61 6c		L1:	.text "2Literal"	;  name of word as a string, ending at wh_NameLastChar
>b96b	88					.byte (("2Literal"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b96c	d9 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b96e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b96f	1c					.byte UF+IM+NN	;wh_Flags	dictionary flags
=47339					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b970					Two_literal:
.b970	20 1d b5	jsr $b51d			jsr underflow_2 ; check double number
.b973	20 9e d0	jsr $d09e			jsr Swap
.b976	20 6c b8	jsr $b86c			jsr Literal	; do lo cell
.b979	4c 6c b8	jmp $b86c			jmp Literal	; do hi cell
=12					CL	.var *-(WordListLink+wh_Xt)
=$b97c					en = *	; remember here
>b96e	0c					.byte CL	;wh_CodeLength
>b97c	53 4c 69 74 65 72 61 6c		L1:	.text "SLiteral"	;  name of word as a string, ending at wh_NameLastChar
>b984	88					.byte (("SLiteral"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b985	eb b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b987	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b988	1d					.byte CO+IM+UF+NN	;wh_Flags	dictionary flags
=47364					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b989					SLiteral:
.b989	20 1d b5	jsr $b51d			jsr underflow_2
.b98c	20 ac b9	jsr $b9ac			jsr SLiteral_Start	; compile header
.b98f	4c a0 b9	jmp $b9a0			jmp _Move_Test
.b992	a1 28		lda ($28,x)	_Move_Loop:	lda (DStack+4,x)
.b994	20 09 ce	jsr $ce09			jsr C_Comma_A
.b997	f6 28		inc $28,x			inc DStack+4,x
.b999	d0 02		bne $b99d			bne +
.b99b	f6 29		inc $29,x			inc DStack+5,x
.b99d					+
.b99d	20 46 cb	jsr $cb46			jsr NOS_One_Minus
.b9a0	b5 26		lda $26,x	_Move_Test:	lda DStack+2,x
.b9a2	15 27		ora $27,x			ora DStack+3,x
.b9a4	d0 ec		bne $b992			bne _Move_Loop
.b9a6	20 b9 b9	jsr $b9b9			jsr SLiteral_End
.b9a9	4c 05 c6	jmp $c605			jmp Two_Drop		; clean up and leave
=35					CL	.var *-(WordListLink+wh_Xt)
=$b9ac					en = *	; remember here
>b987	23					.byte CL	;wh_CodeLength
.b9ac					SLiteral_Start:
.b9ac	a9 ca		lda #$ca			lda #<SLiteral_runtime	; compile JSR SLiteral_Runtime
.b9ae	a0 b9		ldy #$b9			ldy #>SLiteral_runtime
.b9b0	20 48 ce	jsr $ce48			jsr Jsr_Comma_YA
.b9b3	20 2c cb	jsr $cb2c			jsr Here		; push addr of start of JMP
.b9b6	4c 5f ce	jmp $ce5f			jmp Jmp_Comma_YA	; compile JMP around string (dummy addr)
.b9b9					SLiteral_End:
.b9b9	20 60 cb	jsr $cb60			jsr One_Plus
.b9bc	a5 00		lda $00				lda cp+0		; Update the address of the jump to HERE.
.b9be	81 24		sta ($24,x)			sta (DStack+0,x)
.b9c0	20 60 cb	jsr $cb60			jsr One_Plus
.b9c3	a5 01		lda $01				lda cp+1
.b9c5	81 24		sta ($24,x)			sta (DStack+0,x)
.b9c7	e8		inx				inx			; drop herej
.b9c8	e8		inx				inx
.b9c9	60		rts				rts
.b9ca					SLiteral_Runtime:
.b9ca	86 16		stx $16				stx tmp2	; save data stack index
.b9cc	ba		tsx				tsx
.b9cd	bd 01 01	lda $0101,x	SLiteral_Run2:	lda RStack+1,x	; tmp1= RTS addr
.b9d0	85 14		sta $14				sta tmp1+0
.b9d2	bd 02 01	lda $0102,x			lda RStack+2,x
.b9d5	85 15		sta $15				sta tmp1+1
.b9d7	a6 16		ldx $16				ldx tmp2	; restore data stack index
.b9d9	ca		dex				dex		; push string addr
.b9da	ca		dex				dex
.b9db	18		clc				clc
.b9dc	a5 14		lda $14				lda tmp1+0
.b9de	69 04		adc #$04			adc #3+1	;   just after the following JMP + correcting for JSR behavior
.b9e0	95 24		sta $24,x			sta DStack+0,x
.b9e2	a5 15		lda $15				lda tmp1+1
.b9e4	69 00		adc #$00			adc #0
.b9e6	95 25		sta $25,x			sta DStack+1,x
.b9e8	ca		dex				dex		; push string length
.b9e9	ca		dex				dex
.b9ea	38		sec				sec
.b9eb	a0 02		ldy #$02			ldy #2		;   = string_end - string_addr
.b9ed	b1 14		lda ($14),y			lda (tmp1),y
.b9ef	f5 26		sbc $26,x			sbc DStack+2,x
.b9f1	95 24		sta $24,x			sta DStack+0,x
.b9f3	c8		iny				iny
.b9f4	b1 14		lda ($14),y			lda (tmp1),y
.b9f6	f5 27		sbc $27,x			sbc DStack+3,x
.b9f8	95 25		sta $25,x			sta DStack+1,x
.b9fa	60		rts				rts
>b9fb	2e 22				L1:	.text '."'	;  name of word as a string, ending at wh_NameLastChar
>b9fd	42					.byte (('."'[-1]&7)<<5)+(*-L1)	;wh_HNL
>b9fe	04 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba00	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba01	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=47485					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba02					Dot_quote:
.ba02	20 13 ba	jsr $ba13			jsr S_Quote		; compile the string literal
.ba05	a0 cf		ldy #$cf			ldy #>Type		; compile: print string
.ba07	a9 08		lda #$08			lda #<Type
.ba09	4c 48 ce	jmp $ce48			jmp Jsr_Comma_YA
=10					CL	.var *-(WordListLink+wh_Xt)
=$ba0c					en = *	; remember here
>ba00	0a					.byte CL	;wh_CodeLength
>ba0c	53 22				L1:	.text 'S"'	;  name of word as a string, ending at wh_NameLastChar
>ba0e	42					.byte (('S"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>ba0f	7d b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba11	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba12	0c					.byte IM+NN	;wh_Flags	dictionary flags
=47502					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba13					S_Quote:
.ba13	a9 00		lda #$00			lda #0		; Don't handle escaped chars.
.ba15					S_Quote_start:
.ba15	48		pha				pha			; save "handle escaped chars" flag
.ba16	a5 0a		lda $0a				lda state		; compiling?
.ba18	f0 06		beq $ba20			beq _15
.ba1a	20 ac b9	jsr $b9ac			jsr SLiteral_Start	; compile SLiteral header
.ba1d	4c 23 ba	jmp $ba23			jmp _19
.ba20	20 2c cb	jsr $cb2c	_15:		jsr Here		; remember start addr
.ba23					_19:
.ba23	68		pla				pla			; init t2 flags
.ba24	20 eb b8	jsr $b8eb			jsr PushZA
.ba27	20 fa b8	jsr $b8fa			jsr Zero		; init t3 flags
.ba2a					_savechars_loop:
.ba2a	a5 08		lda $08				lda toin+0		; LSB
.ba2c	c5 06		cmp $06				cmp ciblen+0
.ba2e	a5 09		lda $09				lda toin+1		; MSB
.ba30	e5 07		sbc $07				sbc ciblen+1
.ba32	90 10		bcc $ba44			bcc _input_fine		; input buffer empty?
.ba34	20 7b c3	jsr $c37b			jsr Refill		; Refill it  ( -- f )
.ba37	b5 24		lda $24,x			lda DStack+0,x		; Check result of refill.
.ba39	d0 05		bne $ba40			bne +
.ba3b	a9 6b		lda #$6b			lda #$100+err_refill	; Something when wrong with refill.
.ba3d	4c 67 b5	jmp $b567			jmp ThrowA
.ba40	e8		inx		+		inx			; Drop the refill flag
.ba41	e8		inx				inx
.ba42	d0 e6		bne $ba2a			bne _savechars_loop	; jump back up to the empty check, just in
.ba44					_input_fine:
.ba44	18		clc				clc			; tmp1= A= the char at Cib+ToIn
.ba45	a5 04		lda $04				lda cib+0
.ba47	85 14		sta $14				sta tmp1+0
.ba49	a5 05		lda $05				lda cib+1
.ba4b	65 09		adc $09				adc toin+1
.ba4d	85 15		sta $15				sta tmp1+1
.ba4f	a4 08		ldy $08				ldy ToIn
.ba51	b1 14		lda ($14),y			lda (tmp1),y
.ba53	85 14		sta $14				sta tmp1
.ba55	e6 08		inc $08				inc toin+0		; Move on to the next character.
.ba57	d0 02		bne $ba5b			bne +
.ba59	e6 09		inc $09				inc toin+1
.ba5b					+
.ba5b	b4 26		ldy $26,x			ldy DStack+2,x		; handling escaped characters?
.ba5d	30 03		bmi $ba62			bmi +
.ba5f	4c 05 bb	jmp $bb05			jmp _regular_char
.ba62					+
.ba62	b4 27		ldy $27,x			ldy DStack+3,x  		; already seen the backslash?
.ba64	30 03		bmi $ba69			bmi +
.ba66	4c fb ba	jmp $bafb			jmp _not_escaped
.ba69					+
.ba69	84 15		sty $15				sty tmp1+1
.ba6b	24 15		bit $15				bit tmp1+1		; in the middle of a \x sequence ?
.ba6d	70 25		bvs $ba94			bvs _check_esc_chars
.ba6f	a9 01		lda #$01			lda #1
.ba71	24 15		bit $15				bit tmp1+1
.ba73	d0 11		bne $ba86			bne _esc_x_second_digit
.ba75	c8		iny				iny			; Adjust flag for second digit next time.
.ba76	94 27		sty $27,x			sty DStack+3,x
.ba78	a5 14		lda $14				lda tmp1+0		; Get the char again.
.ba7a	20 28 bb	jsr $bb28			jsr convert_hex_value	; Convert to hex
.ba7d	0a		asl a				asl			; This is the upper nybble, so move it up.
.ba7e	0a		asl a				asl
.ba7f	0a		asl a				asl
.ba80	0a		asl a				asl
.ba81	95 24		sta $24,x			sta DStack+0,x		; Save it for later.
.ba83	4c 0c bb	jmp $bb0c			jmp _next_character
.ba86					_esc_x_second_digit:
.ba86	a9 00		lda #$00			lda #0			; Clear the escaped character flag
.ba88	95 27		sta $27,x			sta DStack+3,x		;   (because we are handling it right here)
.ba8a	a5 14		lda $14				lda tmp1+0		; Convert to hex
.ba8c	20 28 bb	jsr $bb28			jsr convert_hex_value
.ba8f	15 24		ora $24,x			ora DStack+0,x		; combine with value in t3
.ba91	4c 09 bb	jmp $bb09			jmp _save_character
.ba94					_check_esc_chars:
.ba94	a0 00		ldy #$00			ldy #0
.ba96	94 27		sty $27,x			sty DStack+3,x
.ba98	a8		tay				tay
.ba99	a9 07		lda #$07			lda #AscBELL	      ; BEL (ASCII value 7)
.ba9b	c0 61		cpy #$61			cpy #'a'
.ba9d	f0 6a		beq $bb09			beq _save_character
.ba9f	a9 08		lda #$08			lda #AscBS	      ; Backspace (ASCII value 8)
.baa1	c0 62		cpy #$62			cpy #'b'
.baa3	f0 64		beq $bb09			beq _save_character
.baa5	a9 1b		lda #$1b			lda #AscESC	       ; ESC (ASCII value 27)
.baa7	c0 65		cpy #$65			cpy #'e'
.baa9	f0 5e		beq $bb09			beq _save_character
.baab	a9 0c		lda #$0c			lda #AscFF	       ; FF (ASCII value 12)
.baad	c0 66		cpy #$66			cpy #'f'
.baaf	f0 58		beq $bb09			beq _save_character
.bab1	a9 0a		lda #$0a			lda #AscLF	       ; LF (ASCII value 10)
.bab3	c0 6c		cpy #$6c			cpy #'l'
.bab5	f0 52		beq $bb09			beq _save_character
.bab7	c0 6e		cpy #$6e			cpy #'n'
.bab9	f0 4e		beq $bb09			beq _save_character
.babb	c0 6d		cpy #$6d			cpy #'m'
.babd	d0 09		bne $bac8			bne +
.babf	a9 0d		lda #$0d			lda #AscCR		; CR/LF pair (ASCII values 13, 10)
.bac1	20 09 ce	jsr $ce09			jsr C_Comma_A
.bac4	a9 0a		lda #$0a			lda #AscLF
.bac6	d0 41		bne $bb09			bne _save_character
.bac8					+
.bac8	a9 22		lda #$22			lda #AscDQuote		; Double quote (ASCII value 34)
.baca	c0 71		cpy #$71			cpy #'q'
.bacc	f0 3b		beq $bb09			beq _save_character
.bace	c0 22		cpy #$22			cpy #AscDQuote
.bad0	f0 37		beq $bb09			beq _save_character
.bad2	a9 0d		lda #$0d			lda #AscCR		; CR (ASCII value 13)
.bad4	c0 72		cpy #$72			cpy #'r'
.bad6	f0 31		beq $bb09			beq _save_character
.bad8	a9 09		lda #$09			lda #AscHT		; Horizontal TAB (ASCII value 9)
.bada	c0 74		cpy #$74			cpy #'t'
.badc	f0 2b		beq $bb09			beq _save_character
.bade	a9 0b		lda #$0b			lda #AscVT		; Vertical TAB (ASCII value 11)
.bae0	c0 76		cpy #$76			cpy #'v'
.bae2	f0 25		beq $bb09			beq _save_character
.bae4	a9 00		lda #$00			lda #0			; NULL (ASCII value 0)
.bae6	c0 7a		cpy #$7a			cpy #'z'
.bae8	f0 1f		beq $bb09			beq _save_character
.baea					_check_esc_x:
.baea	c0 78		cpy #$78			cpy #'x'
.baec	d0 06		bne $baf4			bne +
.baee	a9 be		lda #$be			lda #$BE	; Clear bits 6 and 0
.baf0	95 27		sta $27,x			sta DStack+3,x
.baf2	d0 18		bne $bb0c			bne _next_character
.baf4					+
.baf4	a9 5c		lda #$5c			lda #AscBackslash	; Backslash (ASCII value 92)
.baf6	c0 5c		cpy #$5c			cpy #AscBackslash
.baf8	f0 0f		beq $bb09			beq _save_character
.bafa	98		tya				tya
.bafb					_not_escaped:
.bafb	c9 5c		cmp #$5c			cmp #$5C	; The backslash char
.bafd	d0 06		bne $bb05			bne _regular_char
.baff	a9 ff		lda #$ff			lda #$FF
.bb01	95 27		sta $27,x			sta DStack+3,x
.bb03	d0 07		bne $bb0c			bne _next_character
.bb05					_regular_char:
.bb05	c9 22		cmp #$22			cmp #AscDQuote		; ASCII for "
.bb07	f0 06		beq $bb0f			beq _found_string_end
.bb09					_save_character:
.bb09	20 09 ce	jsr $ce09			jsr C_Comma_A		; compile this character into the dictionary
.bb0c					_next_character:
.bb0c	4c 2a ba	jmp $ba2a			jmp _savechars_loop
.bb0f					_found_string_end:
.bb0f	e8		inx				inx			; Drop t3
.bb10	e8		inx				inx
.bb11	a5 0a		lda $0a				lda state		; What happens next depends on the state (which is bad, but
.bb13	d0 0e		bne $bb23			bne _cmpl		; that's the way it works at the moment).
.bb15	38		sec				sec			; TOS= length of string = Here - start_addr
.bb16	a5 00		lda $00				lda cp+0
.bb18	f5 26		sbc $26,x			sbc DStack+2,x
.bb1a	95 24		sta $24,x			sta DStack+0,x		;   LSB
.bb1c	a5 01		lda $01				lda cp+1
.bb1e	f5 27		sbc $27,x			sbc DStack+3,x
.bb20	95 25		sta $25,x			sta DStack+1,x		;   MSB
.bb22	60		rts				rts			; ( startaddr u )
.bb23					_cmpl:
.bb23	e8		inx				inx			; Drop t2
.bb24	e8		inx				inx
.bb25	4c b9 b9	jmp $b9b9			jmp SLiteral_End	; ( jmpaddr )
=277					CL	.var *-(WordListLink+wh_Xt)
=$ff					CL	 .var $ff
=$bb28					en = *	; remember here
>ba11	ff					.byte CL	;wh_CodeLength
.bb28					convert_hex_value:
.bb28	c9 41		cmp #$41			cmp #'A'
.bb2a	90 05		bcc $bb31			bcc _digit
.bb2c	29 1f		and #$1f	_alpha:		and #$1F		; Make it uppercase.
.bb2e	69 08		adc #$08			adc #9-1		; gives value 10 for 'A'
.bb30	60		rts				rts
.bb31					_digit:
.bb31	e9 2f		sbc #$2f			sbc #'0'-1
.bb33	60		rts				rts
>bb34	53 5c 22			L1:	.text 'S\"'	;  name of word as a string, ending at wh_NameLastChar
>bb37	43					.byte (('S\"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb38	8e b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb3a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb3b	0c					.byte IM+NN	;wh_Flags	dictionary flags
=47799					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb3c					S_Backslash_Quote:
.bb3c	a9 ff		lda #$ff			lda #$ff	; Do handle escaped chars.
.bb3e	4c 15 ba	jmp $ba15			jmp S_Quote_start
=5					CL	.var *-(WordListLink+wh_Xt)
=$bb41					en = *	; remember here
>bb3a	05					.byte CL	;wh_CodeLength
>bb41	4c 61 74 65 73 74 58 74		L1:	.text "LatestXt"	;  name of word as a string, ending at wh_NameLastChar
>bb49	88					.byte (("LatestXt"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb4a	b7 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb4c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb4d	08					.byte NN	;wh_Flags	dictionary flags
=47817					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb4e	20 61 bb	jsr $bb61	LatestXt:	jsr LatestNt	; ( nt )
.bb51	4c e3 be	jmp $bee3			jmp Name_To_Int	; ( xt )
=6					CL	.var *-(WordListLink+wh_Xt)
=$bb54					en = *	; remember here
>bb4c	06					.byte CL	;wh_CodeLength
>bb54	4c 61 74 65 73 74 4e 74		L1:	.text "LatestNt"	;  name of word as a string, ending at wh_NameLastChar
>bb5c	88					.byte (("LatestNt"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb5d	c9 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb5f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb60	08					.byte NN	;wh_Flags	dictionary flags
=47836					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb61	20 6b bb	jsr $bb6b	LatestNt:	jsr current_to_dp
.bb64	a5 10		lda $10				lda dp+0
.bb66	a4 11		ldy $11				ldy dp+1
.bb68	4c b9 b8	jmp $b8b9			jmp PushYA
=10					CL	.var *-(WordListLink+wh_Xt)
=$bb6b					en = *	; remember here
>bb5f	0a					.byte CL	;wh_CodeLength
.bb6b					current_to_dp:
.bb6b	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.bb6e	0a		asl a				asl			; dp= wordlists[A]
.bb6f	a8		tay				tay
.bb70	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.bb73	85 10		sta $10				sta dp+0
.bb75	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bb78	85 11		sta $11				sta dp+1
.bb7a	60		rts				rts
.bb7b					dp_to_current:
.bb7b	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.bb7e	0a		asl a		                asl			; wordlists[A]=dp
.bb7f	a8		tay		                tay
.bb80	a5 10		lda $10		                lda dp+0
.bb82	99 12 03	sta $0312,y			sta WordlistsV+0,y
.bb85	a5 11		lda $11		                lda dp+1
.bb87	99 13 03	sta $0313,y	                sta WordlistsV+1,y
.bb8a	60		rts		                rts
>bb8b	50 61 72 73 65 2d 4e 61		L1:	.text "Parse-Name"	;  name of word as a string, ending at wh_NameLastChar
>bb93	6d 65
>bb95	aa					.byte (("Parse-Name"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb96	dc ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb98	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb99	08					.byte NN	;wh_Flags	dictionary flags
=47893					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb9a					Parse_Name:
.bb9a	a5 04		lda $04				lda cib+0		; tmp2= cib+(toin & $ff00)
.bb9c	85 16		sta $16				sta tmp2+0
.bb9e	18		clc				clc
.bb9f	a5 05		lda $05				lda cib+1
.bba1	65 09		adc $09				adc toin+1
.bba3	85 17		sta $17				sta tmp2+1
.bba5	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.bba7					_skip_loop:
.bba7	c4 06		cpy $06				cpy ciblen+0		; more chars left?
.bba9	a5 09		lda $09				lda toin+1
.bbab	e5 07		sbc $07				sbc ciblen+1
.bbad	b0 11		bcs $bbc0			bcs _empty_line
.bbaf	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.bbb1	c9 21		cmp #$21			cmp #AscSP+1		; is_whitespace
.bbb3	b0 10		bcs $bbc5			bcs _char_found
.bbb5	c8		iny				iny			; increment toin
.bbb6	84 08		sty $08				sty toin+0
.bbb8	d0 ed		bne $bba7			bne _skip_loop
.bbba	e6 09		inc $09				inc toin+1
.bbbc	e6 17		inc $17				inc tmp2+1
.bbbe	d0 e7		bne $bba7			bne _skip_loop
.bbc0					_empty_line:
.bbc0	ca		dex				dex			; junk address
.bbc1	ca		dex				dex
.bbc2	4c fa b8	jmp $b8fa			jmp Zero		; length=0
.bbc5					_char_found:
.bbc5	20 19 b9	jsr $b919			jsr Bl			; push delimiter char
.bbc8	4c e2 bb	jmp $bbe2			jmp Parse
=49					CL	.var *-(WordListLink+wh_Xt)
=$bbcb					en = *	; remember here
>bb98	31					.byte CL	;wh_CodeLength
.bbcb					parse_name_check:
.bbcb	20 9a bb	jsr $bb9a			jsr parse_name		; get character from string
.bbce	b5 24		lda $24,x			lda DStack+0,x		; empty string?
.bbd0	f0 01		beq $bbd3			beq _empty
.bbd2	60		rts				rts
.bbd3	a9 f3		lda #$f3	_empty:		lda #$100+err_UndefinedWord	; complain & abort
.bbd5	4c 67 b5	jmp $b567			jmp ThrowA
>bbd8	50 61 72 73 65			L1:	.text "Parse"	;  name of word as a string, ending at wh_NameLastChar
>bbdd	a5					.byte (("Parse"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bbde	15 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bbe0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bbe1	08					.byte NN	;wh_Flags	dictionary flags
=47965					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bbe2	20 c2 b4	jsr $b4c2	Parse:		jsr PopA		; pop c (check for underflow)
.bbe5	85 1c		sta $1c		Parse_A:	sta tmp5		; save delimiter
.bbe7	ca		dex				dex			; alloc space for addr
.bbe8	ca		dex				dex
.bbe9	ca		dex				dex			; alloc space for length
.bbea	ca		dex				dex
.bbeb	18		clc				clc			; addr= cib+toin
.bbec	a5 08		lda $08				lda toin+0
.bbee	65 04		adc $04				adc cib+0
.bbf0	95 26		sta $26,x			sta DStack+2,x
.bbf2	a5 09		lda $09				lda toin+1
.bbf4	65 05		adc $05				adc cib+1
.bbf6	95 27		sta $27,x			sta DStack+3,x
.bbf8	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.bbfa	84 14		sty $14				sty tmp1+0
.bbfc	a5 04		lda $04				lda cib+0		; tmp2= cib + (toin & $ff00)
.bbfe	85 16		sta $16				sta tmp2+0
.bc00	18		clc				clc
.bc01	a5 09		lda $09				lda toin+1		; tmp1= toin
.bc03	85 15		sta $15				sta tmp1+1
.bc05	65 05		adc $05				adc cib+1
.bc07	85 17		sta $17				sta tmp2+1
.bc09	a9 00		lda #$00			lda #0		; Initialize the offset we use to adjust EOL or found delimiter
.bc0b	85 1d		sta $1d				sta tmp5+1
.bc0d					_loop:
.bc0d	c4 06		cpy $06				cpy ciblen+0		; end of string?
.bc0f	a5 09		lda $09				lda toin+1
.bc11	e5 07		sbc $07				sbc ciblen+1
.bc13	b0 1d		bcs $bc32			bcs _eol
.bc15	a5 1c		lda $1c				lda tmp5+0		; get delimiter
.bc17	c9 20		cmp #$20			cmp #AscSP		; is it whitespace?
.bc19	d0 08		bne $bc23			bne _not_whitespace
.bc1b	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.bc1d	c9 21		cmp #$21			cmp #AscSP+1		; we're looking for all whitespace
.bc1f	90 0f		bcc $bc30			bcc _found_delimiter
.bc21	b0 04		bcs $bc27			bcs _not_delimiter
.bc23	d1 16		cmp ($16),y	_not_whitespace: cmp (tmp2),y		; compare delimter to cib[toin]
.bc25	f0 09		beq $bc30			beq _found_delimiter
.bc27					_not_delimiter:
.bc27	c8		iny				iny			; next character
.bc28	d0 e3		bne $bc0d			bne _loop
.bc2a	e6 09		inc $09				inc toin+1
.bc2c	e6 17		inc $17				inc tmp2+1
.bc2e	d0 dd		bne $bc0d			bne _loop
.bc30					_found_delimiter:
.bc30	e6 1d		inc $1d				inc tmp5+1
.bc32					_eol:
.bc32	38		sec				sec			; length = toin - tmp1
.bc33	98		tya				tya
.bc34	e5 14		sbc $14				sbc tmp1+0
.bc36	95 24		sta $24,x			sta DStack+0,x
.bc38	a5 09		lda $09				lda toin+1
.bc3a	e5 15		sbc $15				sbc tmp1+1
.bc3c	95 25		sta $25,x			sta DStack+1,x
.bc3e	18		clc				clc			; toin = toin + delimiter_offset
.bc3f	98		tya				tya
.bc40	65 1d		adc $1d				adc tmp5+1
.bc42	85 08		sta $08				sta toin+0
.bc44	90 02		bcc $bc48			bcc +
.bc46	e6 09		inc $09				inc toin+1
.bc48					+
=102					CL	.var *-(WordListLink+wh_Xt)
=$bc48					en = *	; remember here
>bbe0	66					.byte CL	;wh_CodeLength
.bc48	60		rts				rts
>bc49	45 78 65 63 75 74 65 2d		L1:	.text "Execute-Parsing"	;  name of word as a string, ending at wh_NameLastChar
>bc51	50 61 72 73 69 6e 67
>bc58	ef					.byte (("Execute-Parsing"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bc59	5d bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc5b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc5c	18					.byte UF+NN	;wh_Flags	dictionary flags
=48088					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc5d					Execute_parsing:
.bc5d	20 22 b5	jsr $b522			jsr underflow_3
.bc60	20 f7 c4	jsr $c4f7			jsr Input_To_R		; save existing input for later
.bc63	20 aa cf	jsr $cfaa			jsr Not_Rot		; -ROT ( xt addr u )
.bc66	20 de b4	jsr $b4de			jsr PopYA		; TOS is new ciblen
.bc69	85 06		sta $06				sta ciblen+0
.bc6b	84 07		sty $07				sty ciblen+1
.bc6d	20 de b4	jsr $b4de			jsr PopYA		; NOS is new cib
.bc70	85 04		sta $04				sta cib+0
.bc72	84 05		sty $05				sty cib+1
.bc74	a9 00		lda #$00			lda #0
.bc76	85 08		sta $08				sta toin+0		; Set >IN to zero
.bc78	85 09		sta $09				sta toin+1
.bc7a	20 46 cf	jsr $cf46			jsr Execute
.bc7d	20 19 c5	jsr $c519			jsr R_To_Input		; restore
=35					CL	.var *-(WordListLink+wh_Xt)
=$bc80					en = *	; remember here
>bc5b	23					.byte CL	;wh_CodeLength
.bc80	60		rts				rts
>bc81	53 6f 75 72 63 65		L1:	.text "Source"	;  name of word as a string, ending at wh_NameLastChar
>bc87	a6					.byte (("Source"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bc88	d8 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc8a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc8b	08					.byte NN	;wh_Flags	dictionary flags
=48135					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc8c					Source:
.bc8c	a5 04		lda $04				lda cib+0	; push address
.bc8e	a4 05		ldy $05				ldy cib+1
.bc90	20 b9 b8	jsr $b8b9			jsr PushYA
.bc93	a5 06		lda $06				lda ciblen+0	; push size, return
.bc95	a4 07		ldy $07				ldy ciblen+1
.bc97	4c b9 b8	jmp $b8b9			jmp PushYA
=14					CL	.var *-(WordListLink+wh_Xt)
=$bc9a					en = *	; remember here
>bc8a	0e					.byte CL	;wh_CodeLength
>bc9a	53 6f 75 72 63 65 2d 49		L1:	.text "Source-Id"	;  name of word as a string, ending at wh_NameLastChar
>bca2	64
>bca3	89					.byte (("Source-Id"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bca4	07 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bca6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bca7	08					.byte NN	;wh_Flags	dictionary flags
=48163					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bca8	a5 02		lda $02		Source_Id:	lda insrc+0
.bcaa	a4 03		ldy $03				ldy insrc+1
.bcac	4c b9 b8	jmp $b8b9			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$bcaf					en = *	; remember here
>bca6	07					.byte CL	;wh_CodeLength
>bcaf	45 78 69 74			L1:	.text "Exit"	;  name of word as a string, ending at wh_NameLastChar
>bcb3	84					.byte (("Exit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bcb4	23 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bcb6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bcb7	03					.byte AN+CO	;wh_Flags	dictionary flags
=48179					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bcb8					Exit:
.bcb8	60		rts				rts		; keep before FEnd so it gets inlined
=1					CL	.var *-(WordListLink+wh_Xt)
=$bcb9					en = *	; remember here
>bcb6	01					.byte CL	;wh_CodeLength
>bcb9	3b				L1:	.text ";"	;  name of word as a string, ending at wh_NameLastChar
>bcba	61					.byte ((";"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bcbb	33 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bcbd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bcbe	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=48186					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bcbf					Semicolon:
.bcbf	20 3d b8	jsr $b83d			jsr Left_Bracket	; switch to interpret state
.bcc2	24 0c		bit $0c				bit status		; is this a : word or a :NONAME word?
.bcc4	70 0c		bvs $bcd2			bvs _colonword
.bcc6	a9 60		lda #$60			lda #$60		; compile an RTS
.bcc8	20 09 ce	jsr $ce09			jsr C_Comma_A
.bccb	a5 0e		lda $0e				lda WorkWord+0		; push xt, return
.bccd	a4 0f		ldy $0f				ldy WorkWord+1
.bccf	4c b9 b8	jmp $b8b9			jmp PushYA
.bcd2					_colonword:
.bcd2	24 0c		bit $0c				bit status
.bcd4	10 1d		bpl $bcf3			bpl _new_word	; Bit 7 is clear = new word
.bcd6	a5 0e		lda $0e				lda WorkWord+0		; push our nt
.bcd8	a4 0f		ldy $0f				ldy WorkWord+1
.bcda	20 b9 b8	jsr $b8b9			jsr PushYA
.bcdd	20 fb be	jsr $befb			jsr Name_To_String	; get our name string
.bce0	a9 f1		lda #$f1			lda #<str_redefined	; string "redefined"
.bce2	a0 db		ldy #$db			ldy #>str_redefined
.bce4	20 23 cf	jsr $cf23			jsr Print_ASCIIZ_YA_no_lf
.bce7	20 08 cf	jsr $cf08			jsr Type		; print the offending word.
.bcea	20 fb ce	jsr $cefb			jsr Space
.bced	a9 7f		lda #$7f			lda #$ff-%10000000
.bcef	25 0c		and $0c				and status
.bcf1	85 0c		sta $0c				sta status
.bcf3					_new_word:
.bcf3	20 29 c2	jsr $c229			jsr Header_Link		; finish linking into current dictionary
.bcf6	20 fe bc	jsr $bcfe			jsr adjust_z		; fix word length
.bcf9	a9 60		lda #$60			lda #$60		; compile an RTS
.bcfb	4c 09 ce	jmp $ce09			jmp C_Comma_A
=63					CL	.var *-(WordListLink+wh_Xt)
=$bcfe					en = *	; remember here
>bcbd	3f					.byte CL	;wh_CodeLength
.bcfe					adjust_z:
.bcfe	a5 10		lda $10				lda dp+0		; tmp1= xt
.bd00	18		clc				clc
.bd01	69 85		adc #$85			adc #Wh_xt
.bd03	85 14		sta $14				sta tmp1+0
.bd05	a5 11		lda $11				lda dp+1
.bd07	69 00		adc #$00			adc #0
.bd09	85 15		sta $15				sta tmp1+1
.bd0b	38		sec				sec			; length= cp-xt
.bd0c	a5 00		lda $00				lda cp+0
.bd0e	e5 14		sbc $14				sbc tmp1+0
.bd10	a8		tay				tay
.bd11	a5 01		lda $01				lda cp+1
.bd13	e5 15		sbc $15				sbc tmp1+1
.bd15	f0 0c		beq $bd23			beq _short		; length > $ff ?
.bd17	a0 84		ldy #$84			ldy #Wh_Flags		; make it NN
.bd19	b1 10		lda ($10),y			lda (dp),y
.bd1b	29 fd		and #$fd			and #$ff-AN
.bd1d	09 08		ora #$08			ora #NN
.bd1f	91 10		sta ($10),y			sta (dp),y
.bd21	a0 ff		ldy #$ff			ldy #$ff		; set max length for header
.bd23	98		tya		_short:		tya			; fill in length in header
.bd24	a0 83		ldy #$83			ldy #Wh_CodeLength
.bd26	91 10		sta ($10),y			sta (dp),y
.bd28	60		rts				rts
>bd29	3a				L1:	.text ":"	;  name of word as a string, ending at wh_NameLastChar
>bd2a	41					.byte ((":"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bd2b	3a bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd2d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd2e	08					.byte NN	;wh_Flags	dictionary flags
=48298					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd2f					Colon:
.bd2f	20 53 b8	jsr $b853			jsr Right_Bracket	; switch to compile state
.bd32	a5 0c		lda $0c				lda status
.bd34	09 40		ora #$40			ora #%01000000	; tell ";" and RECURSE this is a normal word
.bd36	09 80		ora #$80			ora #%10000000	; Tell Header_Build not to print warning for duplicate name.
.bd38	85 0c		sta $0c				sta status
.bd3a	4c 34 c2	jmp $c234			jmp Header_Build	; compile word header (but don't link)
=14					CL	.var *-(WordListLink+wh_Xt)
=$bd3d					en = *	; remember here
>bd2d	0e					.byte CL	;wh_CodeLength
>bd3d	3a 4e 6f 4e 61 6d 65		L1:	.text ":NoName"	;  name of word as a string, ending at wh_NameLastChar
>bd44	a7					.byte ((":NoName"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bd45	aa bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd47	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd48	08					.byte NN	;wh_Flags	dictionary flags
=48324					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd49					Colon_NoName:
.bd49	20 53 b8	jsr $b853			jsr Right_Bracket	; switch to compile state
.bd4c	a9 bf		lda #$bf			lda #$ff-%01000000	; tell ";" and RECURSE this is
.bd4e	25 0c		and $0c				and status		; a :NONAME word.
.bd50	85 0c		sta $0c				sta status
.bd52	a5 00		lda $00				lda cp+0
.bd54	85 0e		sta $0e				sta WorkWord+0
.bd56	a5 01		lda $01				lda cp+1
.bd58	85 0f		sta $0f				sta WorkWord+1
=17					CL	.var *-(WordListLink+wh_Xt)
=$bd5a					en = *	; remember here
>bd47	11					.byte CL	;wh_CodeLength
.bd5a	60		rts				rts
>bd5b	27				L1:	.text "'"	;  name of word as a string, ending at wh_NameLastChar
>bd5c	e1					.byte (("'"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bd5d	c4 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd5f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd60	08					.byte NN	;wh_Flags	dictionary flags
=48348					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd61	20 67 bd	jsr $bd67	Tick:		jsr Tick_Nt
.bd64	4c e3 be	jmp $bee3			jmp Name_To_Int	; ( nt -- xt )
=6					CL	.var *-(WordListLink+wh_Xt)
=$bd67					en = *	; remember here
>bd5f	06					.byte CL	;wh_CodeLength
.bd67	20 cb bb	jsr $bbcb	Tick_Nt:	jsr parse_name_check	; ( -- addr u )
.bd6a	4c 03 be	jmp $be03			jmp find_name_check	; ( addr u -- nt )
>bd6d	5b 27 5d			L1:	.text "[']"	;  name of word as a string, ending at wh_NameLastChar
>bd70	a3					.byte (("[']"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bd71	dc bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd73	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd74	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=48368					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd75	20 61 bd	jsr $bd61	Bracket_Tick:	jsr Tick
.bd78	4c 6c b8	jmp $b86c			jmp Literal
=6					CL	.var *-(WordListLink+wh_Xt)
=$bd7b					en = *	; remember here
>bd73	06					.byte CL	;wh_CodeLength
>bd7b	46 69 6e 64			L1:	.text "Find"	;  name of word as a string, ending at wh_NameLastChar
>bd7f	84					.byte (("Find"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bd80	f0 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd82	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd83	18					.byte UF+NN	;wh_Flags	dictionary flags
=48383					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd84					Find:
.bd84	20 08 b5	jsr $b508			jsr underflow_1
.bd87	b5 25		lda $25,x			lda DStack+1,x		; MSB
.bd89	48		pha				pha
.bd8a	b5 24		lda $24,x			lda DStack+0,x		; LSB
.bd8c	48		pha				pha
.bd8d	20 c9 b2	jsr $b2c9			jsr Count		; ( caddr -- addr u )
.bd90	20 d7 bd	jsr $bdd7			jsr find_name		; ( addr u -- nt | 0 )
.bd93	b5 25		lda $25,x			lda DStack+1,x		; word found?
.bd95	d0 0a		bne $bda1			bne _found_word
.bd97	20 dc b8	jsr $b8dc			jsr False		; ( 0 0 )
.bd9a	68		pla				pla			; LSB of address
.bd9b	95 26		sta $26,x			sta DStack+2,x
.bd9d	68		pla				pla
.bd9e	95 27		sta $27,x			sta DStack+3,x		; MSB of address
.bda0	60		rts				rts			; ( addr 0 )
.bda1					_found_word:
.bda1	68		pla				pla			; We don't need the address after all, RDrop it
.bda2	68		pla				pla
.bda3	20 80 d0	jsr $d080			jsr Dup		; ( nt nt )
.bda6	20 e3 be	jsr $bee3			jsr Name_To_Int	; ( nt xt )
.bda9	20 9e d0	jsr $d09e			jsr Swap		; ( xt nt )
.bdac	a0 00		ldy #$00			ldy #0			; Prepare flag
.bdae	a9 84		lda #$84			lda #Wh_Flags		; get flags
.bdb0	20 0f cb	jsr $cb0f			jsr Plus_A		; ( xt nt+Wh_Flags )
.bdb3	a1 24		lda ($24,x)			lda (DStack+0,x)		; ( xt flags )
.bdb5	29 04		and #$04			and #IM
.bdb7	d0 07		bne $bdc0			bne _immediate		; bit set, we're immediate
.bdb9	a9 ff		lda #$ff			lda #$FF		; We're not immediate, return -1
.bdbb	95 24		sta $24,x			sta DStack+0,x
.bdbd	95 25		sta $25,x			sta DStack+1,x
.bdbf	60		rts				rts
.bdc0					_immediate:
.bdc0	a9 01		lda #$01			lda #1			; We're immediate, return 1
.bdc2	95 24		sta $24,x			sta DStack+0,x
.bdc4	a9 00		lda #$00			lda #0
.bdc6	95 25		sta $25,x			sta DStack+1,x
=68					CL	.var *-(WordListLink+wh_Xt)
=$bdc8					en = *	; remember here
>bd82	44					.byte CL	;wh_CodeLength
.bdc8	60		rts				rts
>bdc9	46 69 6e 64 2d 4e 61 6d		L1:	.text "Find-Name"	;  name of word as a string, ending at wh_NameLastChar
>bdd1	65
>bdd2	a9					.byte (("Find-Name"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bdd3	ff bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bdd5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bdd6	18					.byte UF+NN	;wh_Flags	dictionary flags
=48466					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bdd7					find_name:
.bdd7	20 1d b5	jsr $b51d			jsr underflow_2
.bdda	20 10 be	jsr $be10			jsr fina_pattern_prepare ; tmp2 = pseudo-header of pattern name
.bddd	a9 ff		lda #$ff			lda #$ff		; for each wordlist in the wordlist search order.
.bddf	95 25		sta $25,x			sta DStack+1,x
.bde1					_wordlist_next:
.bde1	f6 25		inc $25,x			inc DStack+1,x
.bde3	b4 25		ldy $25,x			ldy DStack+1,x
.bde5	cc 2a 03	cpy $032a			cpy Num_OrderV		; at end of list?
.bde8	90 06		bcc $bdf0			bcc _nextS
.bdea	d0 14		bne $be00			bne _fail
.bdec	a9 03		lda #$03			lda #wid_Root		; also try root wordlist
.bdee	d0 03		bne $bdf3			bne _nextA
.bdf0	b9 2b 03	lda $032b,y	_nextS:		lda Search_OrderV,y	; A = search_order[Y]  get wordlist ID
.bdf3	20 3a be	jsr $be3a	_nextA:		jsr fina_search_wordlist
.bdf6	f0 e9		beq $bde1			beq _wordlist_next
.bdf8	a5 14		lda $14				lda tmp1+0		; NOS = nt
.bdfa	95 26		sta $26,x			sta DStack+2,x
.bdfc	a5 15		lda $15				lda tmp1+1
.bdfe	95 27		sta $27,x			sta DStack+3,x
.be00					_fail:
.be00	e8		inx				inx			; Drop	pattern name length
.be01	e8		inx				inx
=43					CL	.var *-(WordListLink+wh_Xt)
=$be02					en = *	; remember here
>bdd5	2b					.byte CL	;wh_CodeLength
.be02	60		rts				rts
.be03					find_name_check:
.be03	20 d7 bd	jsr $bdd7			jsr find_name
.be06	b5 25		lda $25,x			lda DStack+1,x		; not found?
.be08	f0 01		beq $be0b			beq _NotFound
.be0a	60		rts				rts
.be0b	a9 f3		lda #$f3	_NotFound:	lda #$100+err_UndefinedWord	; complain & quit
.be0d	4c 67 b5	jmp $b567			jmp ThrowA
.be10					fina_pattern_prepare:
.be10	38		sec				sec			; A= 0 - name start offset
.be11	b5 24		lda $24,x			lda DStack+0,x
.be13	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.be15	75 26		adc $26,x			adc DStack+2,x		; tmp2 = pattern nt
.be17	85 16		sta $16				sta tmp2+0
.be19	a9 ff		lda #$ff			lda #$ff
.be1b	75 27		adc $27,x			adc DStack+3,x
.be1d	85 17		sta $17				sta tmp2+1
.be1f	a9 7f		lda #$7f			lda #wh_NameLastChar
.be21	38		sec				sec
.be22	f5 24		sbc $24,x			sbc DStack+0,x
.be24	85 1a		sta $1a				sta tmp4+0
.be26	a0 7f		ldy #$7f			ldy #wh_NameLastChar	; tmp3+0= wh_HNL (hash & length)
.be28	b1 16		lda ($16),y			lda (tmp2),y
.be2a	0a		asl a				asl a
.be2b	0a		asl a				asl a
.be2c	0a		asl a				asl a
.be2d	0a		asl a				asl a
.be2e	0a		asl a				asl a
.be2f	15 24		ora $24,x			ora DStack+0,x
.be31	85 18		sta $18				sta tmp3+0
.be33	a9 00		lda #$00			lda #0			; assuming failure
.be35	95 26		sta $26,x			sta DStack+2,x
.be37	95 27		sta $27,x			sta DStack+3,x
.be39	60		rts				rts
.be3a					fina_search_wordlist:
.be3a	86 19		stx $19				stx tmp3+1		; save data stack index
.be3c	0a		asl a				asl			; tmp1 = up->wordlists[A]
.be3d	a8		tay				tay
.be3e	be 12 03	ldx $0312,y			ldx WordlistsV+0,y
.be41	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.be44	d0 0f		bne $be55			bne _word_3		;   not end-of-list?
.be46	08		php		_rts:		php
.be47	a6 19		ldx $19				ldx tmp3+1		; restore data stack index
.be49	28		plp				plp
.be4a	60		rts				rts			; Z= end_of_list
.be4b					_word_next:
.be4b	a0 81		ldy #$81			ldy #wh_WordListLink	; tmp1= tmp1->Wh_WordListLink
.be4d	b1 14		lda ($14),y			lda (tmp1),y
.be4f	aa		tax				tax
.be50	c8		iny				iny
.be51	b1 14		lda ($14),y			lda (tmp1),y
.be53	f0 f1		beq $be46			beq _rts		; end of list?
.be55	85 15		sta $15		_word_3:	sta tmp1+1
.be57	86 14		stx $14				stx tmp1+0
.be59	a0 80		ldy #$80			ldy #Wh_HNL		; Are hash & name length the same?
.be5b	b1 14		lda ($14),y			lda (tmp1),y
.be5d	c5 18		cmp $18				cmp tmp3+0
.be5f	d0 ea		bne $be4b			bne _word_next
.be61	a4 1a		ldy $1a				ldy tmp4+0		; Y= index of 1st char -1
.be63	c8		iny		_char_next:	iny			; to next char
.be64	30 e0		bmi $be46			bmi _rts		; end of string?
.be66	b1 16		lda ($16),y			lda (tmp2),y		; char of pattern name
.be68	51 14		eor ($14),y			eor (tmp1),y		; char of this word name
.be6a	f0 f7		beq $be63			beq _char_next		;   exact match?
.be6c	c9 20		cmp #$20			cmp #$20		;   only a case mismatch?
.be6e	d0 db		bne $be4b			bne _word_next
.be70	b1 14		lda ($14),y			lda (tmp1),y		;   verify it is alpha char
.be72	29 df		and #$df			and #$df
.be74	e9 41		sbc #$41			sbc #'A'
.be76	c9 1a		cmp #$1a			cmp #'Z'-'A'+1
.be78	90 e9		bcc $be63			bcc _char_next
.be7a	b0 cf		bcs $be4b			bcs _word_next
>be7c	49 6e 74 3e 4e 61 6d 65		L1:	.text "Int>Name"	;  name of word as a string, ending at wh_NameLastChar
>be84	a8					.byte (("Int>Name"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be85	52 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be87	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be88	18					.byte UF+NN	;wh_Flags	dictionary flags
=48644					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be89					Int_To_Name:
.be89	20 08 b5	jsr $b508			jsr underflow_1
.be8c	a9 7b		lda #$7b			lda #$100-Wh_xt		; convert xt on stack to proposed nt
.be8e	20 4f cb	jsr $cb4f			jsr Minus_A
.be91	b5 24		lda $24,x			lda DStack+0,x		; tmp3= proposed nt
.be93	b4 25		ldy $25,x			ldy DStack+1,x
.be95	85 18		sta $18				sta tmp3+0
.be97	84 19		sty $19				sty tmp3+1
.be99	86 16		stx $16				stx tmp2+0		; save data stack index
.be9b	a9 fe		lda #$fe			lda #$100-2		; for each wordlist
.be9d	85 17		sta $17				sta tmp2+1
.be9f					_wordlist_next:
.be9f	a4 17		ldy $17				ldy tmp2+1		; get next wordlist index
.bea1	c8		iny				iny
.bea2	c8		iny				iny
.bea3	84 17		sty $17				sty tmp2+1
.bea5	c0 0c		cpy #$0c			cpy #(Num_OrderV-WordlistsV)/2
.bea7	b0 22		bcs $becb			bcs _fail
.bea9	be 12 03	ldx $0312,y			ldx WordlistsV+0,y
.beac	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.beaf	4c be be	jmp $bebe			jmp _word_3
.beb2	86 14		stx $14		_word_next:	stx tmp1+0
.beb4	85 15		sta $15				sta tmp1+1
.beb6	a0 81		ldy #$81			ldy #wh_WordListLink	; follow wh_WordListLink to next word
.beb8	b1 14		lda ($14),y			lda (tmp1),y
.beba	aa		tax				tax
.bebb	c8		iny				iny
.bebc	b1 14		lda ($14),y			lda (tmp1),y
.bebe	f0 df		beq $be9f	_word_3:	beq _wordlist_next	;  end of list?
.bec0	c5 19		cmp $19				cmp tmp3+1		;  match?
.bec2	d0 ee		bne $beb2			bne _word_next
.bec4	e4 18		cpx $18				cpx tmp3+0
.bec6	d0 ea		bne $beb2			bne _word_next
.bec8	a6 16		ldx $16				ldx tmp2+0		; restore data stack index
.beca	60		rts				rts			; return P.Z=0
.becb					_fail:
.becb	a6 16		ldx $16				ldx tmp2+0		; restore data stack index
.becd	a9 00		lda #$00			lda #0			; return a zero to indicate that we didn't find it.
.becf	95 24		sta $24,x			sta DStack+0,x
.bed1	95 25		sta $25,x			sta DStack+1,x
.bed3	85 15		sta $15				sta tmp1+1
.bed5	60		rts				rts			; return P.Z=1
=77					CL	.var *-(WordListLink+wh_Xt)
=$bed6					en = *	; remember here
>be87	4d					.byte CL	;wh_CodeLength
>bed6	4e 61 6d 65 3e 49 6e 74		L1:	.text "Name>Int"	;  name of word as a string, ending at wh_NameLastChar
>bede	88					.byte (("Name>Int"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bedf	04 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bee1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bee2	18					.byte UF+NN	;wh_Flags	dictionary flags
=48734					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bee3					Name_To_Int:
.bee3	20 08 b5	jsr $b508			jsr underflow_1
.bee6	a9 85		lda #$85			lda #wh_Xt
.bee8	4c 0f cb	jmp $cb0f			jmp Plus_A
=8					CL	.var *-(WordListLink+wh_Xt)
=$beeb					en = *	; remember here
>bee1	08					.byte CL	;wh_CodeLength
>beeb	4e 61 6d 65 3e 53 74 72		L1:	.text "Name>String"	;  name of word as a string, ending at wh_NameLastChar
>bef3	69 6e 67
>bef6	eb					.byte (("Name>String"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bef7	5e be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bef9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>befa	18					.byte UF+NN	;wh_Flags	dictionary flags
=48758					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.befb					Name_To_String:
.befb	20 08 b5	jsr $b508			jsr underflow_1
.befe	b5 24		lda $24,x			lda DStack+0,x		; tmp1 = nt
.bf00	b4 25		ldy $25,x			ldy DStack+1,x
.bf02	85 14		sta $14				sta tmp1+0
.bf04	84 15		sty $15				sty tmp1+1
.bf06	a0 80		ldy #$80			ldy #Wh_HNL
.bf08	b1 14		lda ($14),y			lda (tmp1),y
.bf0a	29 1f		and #$1f			and #wh_HNL_NameLengthMask
.bf0c	48		pha				pha
.bf0d	49 ff		eor #$ff			eor #$ff
.bf0f	38		sec				sec
.bf10	69 80		adc #$80			adc #Wh_NameLastChar+1	; calc start offset
.bf12	20 0f cb	jsr $cb0f			jsr Plus_A		; calc start addr
.bf15	68		pla				pla			; push length
.bf16	4c eb b8	jmp $b8eb			jmp PushZA
=30					CL	.var *-(WordListLink+wh_Xt)
=$bf19					en = *	; remember here
>bef9	1e					.byte CL	;wh_CodeLength
>bf19	3e 42 6f 64 79			L1:	.text ">Body"	;  name of word as a string, ending at wh_NameLastChar
>bf1e	25					.byte ((">Body"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bf1f	76 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf21	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf22	18					.byte UF+NN	;wh_Flags	dictionary flags
=48798					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf23					To_Body:
.bf23	20 08 b5	jsr $b508			jsr underflow_1
.bf26	a9 03		lda #$03			lda #3		; PFA is after the beginning JSR abs
.bf28	4c 0f cb	jmp $cb0f			jmp Plus_A
=8					CL	.var *-(WordListLink+wh_Xt)
=$bf2b					en = *	; remember here
>bf21	08					.byte CL	;wh_CodeLength
>bf2b	45 72 61 73 65			L1:	.text "Erase"	;  name of word as a string, ending at wh_NameLastChar
>bf30	a5					.byte (("Erase"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bf31	9e be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf33	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf34	08					.byte NN	;wh_Flags	dictionary flags
=48816					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf35					Erase:
.bf35	20 fa b8	jsr $b8fa			jsr Zero
.bf38	4c 54 bf	jmp $bf54			jmp Fill
=6					CL	.var *-(WordListLink+wh_Xt)
=$bf3b					en = *	; remember here
>bf33	06					.byte CL	;wh_CodeLength
>bf3b	42 6c 61 6e 6b			L1:	.text "Blank"	;  name of word as a string, ending at wh_NameLastChar
>bf40	65					.byte (("Blank"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bf41	b0 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf43	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf44	08					.byte NN	;wh_Flags	dictionary flags
=48832					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf45					Blank:
.bf45	20 19 b9	jsr $b919			jsr Bl
.bf48	4c 54 bf	jmp $bf54			jmp Fill
=6					CL	.var *-(WordListLink+wh_Xt)
=$bf4b					en = *	; remember here
>bf43	06					.byte CL	;wh_CodeLength
>bf4b	46 69 6c 6c			L1:	.text "Fill"	;  name of word as a string, ending at wh_NameLastChar
>bf4f	84					.byte (("Fill"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bf50	c0 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf52	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf53	18					.byte UF+NN	;wh_Flags	dictionary flags
=48847					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf54					Fill:
.bf54	20 22 b5	jsr $b522			jsr underflow_3
.bf57	b5 28		lda $28,x			lda DStack+4,x		; tmp1= address
.bf59	85 14		sta $14				sta tmp1+0
.bf5b	b5 29		lda $29,x			lda DStack+5,x
.bf5d	85 15		sta $15				sta tmp1+1
.bf5f	b5 26		lda $26,x			lda DStack+2,x		; tmp2= counter.lo
.bf61	85 16		sta $16				sta tmp2+0
.bf63	f6 27		inc $27,x			inc DStack+3,x		; so decrement & test for 0 works
.bf65	b5 24		lda $24,x			lda DStack+0,x		; A= fill byte
.bf67	a0 00		ldy #$00			ldy #0
.bf69	c4 16		cpy $16		_loop:		cpy tmp2+0		; done?
.bf6b	f0 09		beq $bf76			beq _test2
.bf6d	91 14		sta ($14),y	_3:		sta (tmp1),y		; store a byte
.bf6f	c8		iny				iny			; to next byte
.bf70	d0 f7		bne $bf69			bne _loop
.bf72	e6 15		inc $15				inc tmp1+1		; increment addr page
.bf74	d0 f3		bne $bf69			bne _loop
.bf76	d6 27		dec $27,x	_test2:		dec DStack+3,x		; any more pages?
.bf78	d0 f3		bne $bf6d			bne _3
.bf7a	4c 53 ae	jmp $ae53			jmp ThreeDrop	; Drop three cells off the Data Stack.
=41					CL	.var *-(WordListLink+wh_Xt)
=$bf7d					en = *	; remember here
>bf52	29					.byte CL	;wh_CodeLength
>bf7d	56 61 72 69 61 62 6c 65		L1:	.text "Variable"	;  name of word as a string, ending at wh_NameLastChar
>bf85	a8					.byte (("Variable"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bf86	cf be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf88	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf89	08					.byte NN	;wh_Flags	dictionary flags
=48901					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf8a	20 c3 c2	jsr $c2c3	Variable:	jsr Create		; compile word header & push PFA
.bf8d	a9 00		lda #$00			lda #0			; allot & initialize the variable's data
.bf8f	a8		tay				tay
.bf90	4c 23 ce	jmp $ce23			jmp Comma_YA
=9					CL	.var *-(WordListLink+wh_Xt)
=$bf93					en = *	; remember here
>bf88	09					.byte CL	;wh_CodeLength
>bf93	32 56 61 72 69 61 62 6c		L1:	.text "2Variable"	;  name of word as a string, ending at wh_NameLastChar
>bf9b	65
>bf9c	a9					.byte (("2Variable"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bf9d	05 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf9f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfa0	08					.byte NN	;wh_Flags	dictionary flags
=48924					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfa1	20 8a bf	jsr $bf8a	Two_variable:	jsr Variable		; compile word header & push PFA & 1st cell of data
.bfa4	4c 23 ce	jmp $ce23			jmp Comma_YA		; alloc & init 2nd cell of data
=6					CL	.var *-(WordListLink+wh_Xt)
=$bfa7					en = *	; remember here
>bf9f	06					.byte CL	;wh_CodeLength
>bfa7	43 6f 6e 73 74 61 6e 74		L1:	.text "Constant"	;  name of word as a string, ending at wh_NameLastChar
>bfaf	88					.byte (("Constant"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bfb0	1c bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfb2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfb3	18					.byte UF+NN	;wh_Flags	dictionary flags
=48943					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfb4					Constant:
.bfb4	20 08 b5	jsr $b508			jsr underflow_1
.bfb7	20 26 c2	jsr $c226			jsr Header_Comma	; compile word header
.bfba	20 75 b8	jsr $b875			jsr LitCompile		; compile code to load registers, & pick a subroutine
.bfbd	20 66 ce	jsr $ce66			jsr Jmp_Comma_NT_YA	; compile code to JMP to the subroutine
.bfc0	4c fe bc	jmp $bcfe			jmp adjust_z		; fix word length
=15					CL	.var *-(WordListLink+wh_Xt)
=$bfc3					en = *	; remember here
>bfb2	0f					.byte CL	;wh_CodeLength
>bfc3	32 43 6f 6e 73 74 61 6e		L1:	.text "2Constant"	;  name of word as a string, ending at wh_NameLastChar
>bfcb	74
>bfcc	89					.byte (("2Constant"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bfcd	2f bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfcf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfd0	18					.byte UF+NN	;wh_Flags	dictionary flags
=48972					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfd1					Two_constant:
.bfd1	20 1d b5	jsr $b51d			jsr underflow_2
.bfd4	20 26 c2	jsr $c226			jsr Header_Comma	; compile word header
.bfd7	20 9e d0	jsr $d09e			jsr Swap
.bfda	20 6c b8	jsr $b86c			jsr Literal		; compile push lo cell
.bfdd	20 75 b8	jsr $b875			jsr LitCompile		; compile push hi cell, YA=exit routine
.bfe0	20 66 ce	jsr $ce66			jsr Jmp_Comma_NT_YA	; compile JMP from above
.bfe3	4c fe bc	jmp $bcfe			jmp adjust_z		; fix word length
=21					CL	.var *-(WordListLink+wh_Xt)
=$bfe6					en = *	; remember here
>bfcf	15					.byte CL	;wh_CodeLength
>bfe6	56 61 6c 75 65			L1:	.text "Value"	;  name of word as a string, ending at wh_NameLastChar
>bfeb	a5					.byte (("Value"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bfec	4c bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfef	18					.byte UF+NN	;wh_Flags	dictionary flags
=49003					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bff0					Value:
.bff0	20 08 b5	jsr $b508			jsr underflow_1
.bff3	20 26 c2	jsr $c226			jsr Header_Comma	; compile word header
.bff6	20 9f b8	jsr $b89f			jsr ldya_immed_comma	; compile lda # & ldy #
.bff9	a9 b9		lda #$b9			lda #<PushYA		; compile jmp PushYA
.bffb	a0 b8		ldy #$b8			ldy #>PushYA
.bffd	20 5f ce	jsr $ce5f			jsr Jmp_Comma_YA
.c000	4c fe bc	jmp $bcfe			jmp adjust_z		; fix word length
=19					CL	.var *-(WordListLink+wh_Xt)
=$c003					en = *	; remember here
>bfee	13					.byte CL	;wh_CodeLength
>c003	32 56 61 6c 75 65		L1:	.text "2Value"	;  name of word as a string, ending at wh_NameLastChar
>c009	a6					.byte (("2Value"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c00a	6b bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c00c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c00d	18					.byte UF+NN	;wh_Flags	dictionary flags
=49033					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c00e					TwoValue:
.c00e	20 1d b5	jsr $b51d			jsr underflow_2
.c011	20 26 c2	jsr $c226			jsr Header_Comma	; compile word header
.c014	a9 21		lda #$21			lda #<TwoValue_Runtime	; compile JSR TValue_Runtime
.c016	a0 c0		ldy #$c0			ldy #>TwoValue_Runtime
.c018	20 48 ce	jsr $ce48			jsr Jsr_Comma_YA
.c01b	20 fe bc	jsr $bcfe			jsr adjust_z		; fix word length
.c01e	4c 31 ce	jmp $ce31			jmp Two_Comma		; compile the value, return
=19					CL	.var *-(WordListLink+wh_Xt)
=$c021					en = *	; remember here
>c00c	13					.byte CL	;wh_CodeLength
.c021					TwoValue_Runtime:
.c021	68		pla				pla			; pop RTS addr
.c022	85 14		sta $14				sta tmp1+0
.c024	68		pla				pla
.c025	85 15		sta $15				sta tmp1+1
.c027	a0 01		ldy #$01			ldy #1			; start at offset 1 (for RTS addr behavior)
.c029	4c 83 c6	jmp $c683			jmp Two_Fetch_Tmp1Y	; fetch the data, return
>c02c	54 6f				L1:	.text "To"	;  name of word as a string, ending at wh_NameLastChar
>c02e	e2					.byte (("To"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c02f	89 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c031	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c032	0c					.byte NN+IM	;wh_Flags	dictionary flags
=49070					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c033					To:
.c033	20 61 bd	jsr $bd61			jsr Tick		; We always need the xt of the target word
.c036	b5 24		lda $24,x			lda DStack+0,x		; tmp1= xt
.c038	b4 25		ldy $25,x			ldy DStack+1,x
.c03a	85 14		sta $14				sta tmp1+0
.c03c	84 15		sty $15				sty tmp1+1
.c03e	a0 00		ldy #$00			ldy #0			; determine what type xt points at
.c040	b1 14		lda ($14),y			lda (tmp1),y
.c042	c9 a0		cmp #$a0			cmp #$a0		;   LDY #
.c044	d0 38		bne $c07e			bne _Test2
.c046	a5 0a		lda $0a				lda state		; check compile state
.c048	f0 20		beq $c06a			beq _Value_interpret
.c04a	a9 de		lda #$de			lda #<PopYA		; compile jsr PopYA
.c04c	a0 b4		ldy #$b4			ldy #>PopYA
.c04e	20 48 ce	jsr $ce48			jsr Jsr_Comma_YA
.c051	a9 8c		lda #$8c			lda #$8C		; compile STY xt+1
.c053	20 09 ce	jsr $ce09			jsr C_Comma_A
.c056	20 60 cb	jsr $cb60			jsr One_plus
.c059	20 80 d0	jsr $d080			jsr Dup
.c05c	20 20 ce	jsr $ce20			jsr Comma
.c05f	a9 8d		lda #$8d			lda #$8D		; compile STA xt+3
.c061	20 09 ce	jsr $ce09			jsr C_Comma_A
.c064	20 0a cb	jsr $cb0a			jsr Cell_Plus
.c067	4c 20 ce	jmp $ce20			jmp Comma
.c06a					_Value_interpret:
.c06a	20 1d b5	jsr $b51d			jsr underflow_2		; ( n xt )
.c06d	e8		inx				inx			; Drop xt
.c06e	e8		inx				inx
.c06f	b5 24		lda $24,x			lda DStack+0,x		; LSB
.c071	a0 03		ldy #$03			ldy #3			;   modify LDA # data
.c073	91 14		sta ($14),y			sta (tmp1),y
.c075	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c077	a0 01		ldy #$01			ldy #1			;   modify LDY # data
.c079	91 14		sta ($14),y			sta (tmp1),y
.c07b	e8		inx				inx			; Drop n
.c07c	e8		inx				inx
.c07d	60		rts				rts
.c07e	c9 20		cmp #$20	_Test2:		cmp #$20		;   JSR abs ?
.c080	d0 33		bne $c0b5			bne _Err
.c082	a9 03		lda #$03			lda #3			; advance xt over the JSR abs to the data
.c084	20 0f cb	jsr $cb0f			jsr Plus_A
.c087	a0 01		ldy #$01			ldy #1			; get JSR abs addr lo byte
.c089	b1 14		lda ($14),y			lda (tmp1),y
.c08b	c9 21		cmp #$21			cmp #<TwoValue_Runtime
.c08d	d0 11		bne $c0a0			bne _Test3
.c08f	a5 0a		lda $0a				lda state		; check compile state
.c091	f0 0a		beq $c09d			beq _2Value_runtime
.c093	20 9f b8	jsr $b89f			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.c096	a9 55		lda #$55			lda #<Two_Store_YA
.c098	a0 c6		ldy #$c6			ldy #>Two_Store_YA
.c09a	4c 48 ce	jmp $ce48			jmp Jsr_Comma_YA	; compile JSR Two_Store_YA; return
.c09d	4c 4f c6	jmp $c64f	_2Value_runtime: jmp Two_Store
.c0a0					_Test3:
.c0a0	c9 7d		cmp #$7d			cmp #<FValue_runtime
.c0a2	d0 11		bne $c0b5			bne _Err
.c0a4	a5 0a		lda $0a				lda state		; check compile state
.c0a6	f0 0a		beq $c0b2			beq _FValue_interpret
.c0a8	20 9f b8	jsr $b89f			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.c0ab	a9 7b		lda #$7b			lda #<FStore_YA
.c0ad	a0 86		ldy #$86			ldy #>FStore_YA
.c0af	4c 48 ce	jmp $ce48			jmp Jsr_Comma_YA	; compile JSR FStore_YA; return
.c0b2	4c 78 86	jmp $8678	_FValue_interpret: jmp FStore
.c0b5	a9 e0		lda #$e0	_Err:		lda #$100+err_InvalidName ; unrecognized type.
.c0b7	20 67 b5	jsr $b567			jsr ThrowA
=135					CL	.var *-(WordListLink+wh_Xt)
=$c0ba					en = *	; remember here
>c031	87					.byte CL	;wh_CodeLength
>c0ba	44 4d 61 78			L1:	.text "DMax"	;  name of word as a string, ending at wh_NameLastChar
>c0be	04					.byte (("DMax"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c0bf	ae bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c0c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c0c2	08					.byte NN	;wh_Flags	dictionary flags
=49214					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c0c3	a9 80		lda #$80	DMax:		lda #$80
.c0c5	d0 0b		bne $c0d2			bne DMin3
=4					CL	.var *-(WordListLink+wh_Xt)
=$c0c7					en = *	; remember here
>c0c1	04					.byte CL	;wh_CodeLength
>c0c7	44 4d 69 6e			L1:	.text "DMin"	;  name of word as a string, ending at wh_NameLastChar
>c0cb	c4					.byte (("DMin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c0cc	3e c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c0ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c0cf	08					.byte NN	;wh_Flags	dictionary flags
=49227					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c0d0	a9 00		lda #$00	DMin:		lda #0
.c0d2	85 16		sta $16		DMin3:		sta tmp2	; save sign correction
.c0d4	20 27 b5	jsr $b527			jsr underflow_4
.c0d7	b5 26		lda $26,x			lda DStack+2,x	; compare
.c0d9	d5 2a		cmp $2a,x			cmp DStack+6,x
.c0db	b5 27		lda $27,x			lda DStack+3,x
.c0dd	f5 2b		sbc $2b,x			sbc DStack+7,x
.c0df	b5 24		lda $24,x			lda DStack+0,x
.c0e1	f5 28		sbc $28,x			sbc DStack+4,x
.c0e3	b5 25		lda $25,x			lda DStack+1,x
.c0e5	f5 29		sbc $29,x			sbc DStack+5,x
.c0e7	50 02		bvc $c0eb			bvc +
.c0e9	49 80		eor #$80			eor #$80	; fix sign
.c0eb	45 16		eor $16		+		eor tmp2
.c0ed	30 0f		bmi $c0fe			bmi TwoNip_nouf	; if negative, NOS is larger and needs to be kept
.c0ef	4c 05 c6	jmp $c605			jmp Two_Drop
=34					CL	.var *-(WordListLink+wh_Xt)
=$c0f2					en = *	; remember here
>c0ce	22					.byte CL	;wh_CodeLength
>c0f2	32 4e 69 70			L1:	.text "2Nip"	;  name of word as a string, ending at wh_NameLastChar
>c0f6	04					.byte (("2Nip"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c0f7	4b c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c0f9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c0fa	18					.byte UF+NN	;wh_Flags	dictionary flags
=49270					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c0fb	20 27 b5	jsr $b527	TwoNip:		jsr underflow_4
.c0fe	b5 24		lda $24,x	TwoNip_NoUf:	lda DStack+0,x	; copy dTOS to dNOS
.c100	95 28		sta $28,x			sta DStack+4,x
.c102	b5 25		lda $25,x			lda DStack+1,x
.c104	95 29		sta $29,x			sta DStack+5,x
.c106	b5 26		lda $26,x			lda DStack+2,x
.c108	95 2a		sta $2a,x			sta DStack+6,x
.c10a	b5 27		lda $27,x			lda DStack+3,x
.c10c	95 2b		sta $2b,x			sta DStack+7,x
.c10e	4c 05 c6	jmp $c605			jmp Two_Drop
=22					CL	.var *-(WordListLink+wh_Xt)
=$c111					en = *	; remember here
>c0f9	16					.byte CL	;wh_CodeLength
>c111	53 3e 44			L1:	.text "S>D"	;  name of word as a string, ending at wh_NameLastChar
>c114	83					.byte (("S>D"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c115	76 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c117	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c118	10					.byte UF	;wh_Flags	dictionary flags
=49300					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c119					S_To_D:
.c119	20 08 b5	jsr $b508			jsr underflow_1
.c11c	a0 00		ldy #$00			ldy #0			; assume positive
.c11e	b5 25		lda $25,x			lda DStack+1,x		; test n
.c120	10 01		bpl $c123			bpl +
.c122	88		dey				dey			; make negative
.c123					+
.c123	ca		dex				dex			; push new hi cell
.c124	ca		dex				dex
.c125	94 24		sty $24,x			sty DStack+0,x
.c127	94 25		sty $25,x			sty DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$c129					en = *	; remember here
>c117	10					.byte CL	;wh_CodeLength
.c129	60		rts				rts
>c12a	44 3e 53			L1:	.text "D>S"	;  name of word as a string, ending at wh_NameLastChar
>c12d	63					.byte (("D>S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c12e	94 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c130	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c131	10					.byte UF	;wh_Flags	dictionary flags
=49325					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c132					D_To_S:
.c132	20 1d b5	jsr $b51d			jsr underflow_2
.c135	e8		inx				inx		; Drop hi cell
.c136	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$c137					en = *	; remember here
>c130	05					.byte CL	;wh_CodeLength
.c137	60		rts				rts
>c138	44 2d				L1:	.text "D-"	;  name of word as a string, ending at wh_NameLastChar
>c13a	a2					.byte (("D-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c13b	ad c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c13d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c13e	10					.byte UF	;wh_Flags	dictionary flags
=49338					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c13f					D_Minus:
.c13f	20 27 b5	jsr $b527			jsr underflow_4 ; two double numbers
.c142	38		sec				sec
.c143	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of lower word
.c145	f5 26		sbc $26,x			sbc DStack+2,x
.c147	95 2a		sta $2a,x			sta DStack+6,x
.c149	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of lower word
.c14b	f5 27		sbc $27,x			sbc DStack+3,x
.c14d	95 2b		sta $2b,x			sta DStack+7,x
.c14f	b5 28		lda $28,x			lda DStack+4,x	; LSB of upper word
.c151	f5 24		sbc $24,x			sbc DStack+0,x
.c153	95 28		sta $28,x			sta DStack+4,x
.c155	b5 29		lda $29,x			lda DStack+5,x	; MSB of upper word
.c157	f5 25		sbc $25,x			sbc DStack+1,x
.c159	95 29		sta $29,x			sta DStack+5,x
.c15b	e8		inx				inx
.c15c	e8		inx				inx
.c15d	e8		inx				inx
.c15e	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c15f					en = *	; remember here
>c13d	20					.byte CL	;wh_CodeLength
.c15f	60		rts				rts
>c160	44 2b				L1:	.text "D+"	;  name of word as a string, ending at wh_NameLastChar
>c162	62					.byte (("D+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c163	ba c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c165	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c166	10					.byte UF	;wh_Flags	dictionary flags
=49378					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c167					D_Plus:
.c167	20 27 b5	jsr $b527			jsr underflow_4 ; two double numbers
.c16a	18		clc				clc
.c16b	b5 26		lda $26,x			lda DStack+2,x	; LSB of lower word
.c16d	75 2a		adc $2a,x			adc DStack+6,x
.c16f	95 2a		sta $2a,x			sta DStack+6,x
.c171	b5 27		lda $27,x			lda DStack+3,x	; MSB of lower word
.c173	75 2b		adc $2b,x			adc DStack+7,x
.c175	95 2b		sta $2b,x			sta DStack+7,x
.c177	b5 24		lda $24,x			lda DStack+0,x	; LSB of upper word
.c179	75 28		adc $28,x			adc DStack+4,x
.c17b	95 28		sta $28,x			sta DStack+4,x
.c17d	b5 25		lda $25,x			lda DStack+1,x	; MSB of upper word
.c17f	75 29		adc $29,x			adc DStack+5,x
.c181	95 29		sta $29,x			sta DStack+5,x
.c183	e8		inx				inx
.c184	e8		inx				inx
.c185	e8		inx				inx
.c186	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c187					en = *	; remember here
>c165	20					.byte CL	;wh_CodeLength
.c187	60		rts				rts
>c188	44 31 2b			L1:	.text "D1+"	;  name of word as a string, ending at wh_NameLastChar
>c18b	63					.byte (("D1+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c18c	e2 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c18e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c18f	10					.byte UF	;wh_Flags	dictionary flags
=49419					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c190	20 1d b5	jsr $b51d	D1Plus:		jsr underflow_2
.c193	f6 26		inc $26,x			inc DStack+2,x
.c195	d0 0a		bne $c1a1			bne +
.c197	f6 27		inc $27,x			inc DStack+3,x
.c199	d0 06		bne $c1a1			bne +
.c19b	f6 24		inc $24,x			inc DStack+0,x
.c19d	d0 02		bne $c1a1			bne +
.c19f	f6 25		inc $25,x			inc DStack+1,x
.c1a1					+
=17					CL	.var *-(WordListLink+wh_Xt)
=$c1a1					en = *	; remember here
>c18e	11					.byte CL	;wh_CodeLength
.c1a1	60		rts				rts
>c1a2	44 31 2d			L1:	.text "D1-"	;  name of word as a string, ending at wh_NameLastChar
>c1a5	a3					.byte (("D1-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c1a6	0b c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c1a8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c1a9	10					.byte UF	;wh_Flags	dictionary flags
=49445					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c1aa	20 1d b5	jsr $b51d	D1Minus:	jsr underflow_2
.c1ad	b5 26		lda $26,x			lda DStack+2,x
.c1af	d0 0e		bne $c1bf			bne _1
.c1b1	b5 27		lda $27,x			lda DStack+3,x
.c1b3	d0 08		bne $c1bd			bne _2
.c1b5	b5 24		lda $24,x			lda DStack+0,x
.c1b7	d0 02		bne $c1bb			bne _3
.c1b9	d6 25		dec $25,x			dec DStack+1,x
.c1bb	d6 24		dec $24,x	_3:		dec DStack+0,x
.c1bd	d6 27		dec $27,x	_2:		dec DStack+3,x
.c1bf	d6 26		dec $26,x	_1:		dec DStack+2,x
=23					CL	.var *-(WordListLink+wh_Xt)
=$c1c1					en = *	; remember here
>c1a8	17					.byte CL	;wh_CodeLength
.c1c1	60		rts				rts
>c1c2	41 6c 6c 6f 74			L1:	.text "Allot"	;  name of word as a string, ending at wh_NameLastChar
>c1c7	85					.byte (("Allot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c1c8	25 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c1ca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c1cb	18					.byte UF+NN	;wh_Flags	dictionary flags
=49479					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c1cc					Allot:
.c1cc	20 08 b5	jsr $b508			jsr underflow_1
.c1cf	18		clc				clc			; adjust cp
.c1d0	b5 24		lda $24,x			lda DStack+0,x
.c1d2	65 00		adc $00				adc cp+0
.c1d4	85 00		sta $00				sta cp+0
.c1d6	a8		tay				tay			;   save lo byte
.c1d7	b5 25		lda $25,x			lda DStack+1,x
.c1d9	85 14		sta $14				sta tmp1
.c1db	65 01		adc $01				adc cp+1
.c1dd	85 01		sta $01				sta cp+1
.c1df	24 14		bit $14				bit tmp1
.c1e1	30 15		bmi $c1f8			bmi _release
.c1e3	b0 06		bcs $c1eb			bcs _pos_err		; carry from the add is bad
=32600					_last = cp_end-2*PadOffset
.c1e5	c0 58		cpy #$58			cpy #<_last		; cp < cp_end ?
.c1e7	e9 7f		sbc #$7f			sbc #>_last
.c1e9	90 2c		bcc $c217			bcc _done		; we're fine.
.c1eb					_pos_err:
.c1eb	a9 58		lda #$58			lda #<_last
.c1ed	85 00		sta $00				sta cp+0
.c1ef	a9 7f		lda #$7f			lda #>_last
.c1f1	85 01		sta $01				sta cp+1
.c1f3	a9 c5		lda #$c5			lda #$100+err_Allocate
.c1f5	4c 67 b5	jmp $b567			jmp ThrowA
.c1f8					_release:
.c1f8	90 06		bcc $c200			bcc _neg_err		; borrow indicates we've gone below 0
.c1fa	c0 66		cpy #$66			cpy #<cp0
.c1fc	e9 0b		sbc #$0b			sbc #>cp0
.c1fe	b0 17		bcs $c217			bcs _done
.c200					_neg_err:
.c200	a9 66		lda #$66			lda #<cp0		; Set CP to CP0
.c202	85 00		sta $00				sta cp+0
.c204	a9 0b		lda #$0b			lda #>cp0
.c206	85 01		sta $01				sta cp+1
.c208	a9 36		lda #$36			lda #<forth_dictionary_start	; set WordLists[Forth] to the first
.c20a	8d 12 03	sta $0312			sta WordlistsV+0		; word in ROM
.c20d	a9 d0		lda #$d0			lda #>forth_dictionary_start
.c20f	8d 13 03	sta $0313			sta WordlistsV+1
.c212	a9 c4		lda #$c4			lda #$100+err_Free		; abort with an error
.c214	4c 67 b5	jmp $b567			jmp ThrowA
.c217					_done:
.c217	e8		inx				inx			; Drop n
.c218	e8		inx				inx
=77					CL	.var *-(WordListLink+wh_Xt)
=$c219					en = *	; remember here
>c1ca	4d					.byte CL	;wh_CodeLength
.c219	60		rts				rts
>c21a	48 65 61 64 65 72 2c		L1:	.text "Header,"	;  name of word as a string, ending at wh_NameLastChar
>c221	87					.byte (("Header,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c222	47 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c224	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c225	08					.byte NN	;wh_Flags	dictionary flags
=49569					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c226					Header_Comma:
.c226	20 34 c2	jsr $c234			jsr Header_Build
.c229					Header_Link:
.c229	a5 0e		lda $0e				lda WorkWord+0		; dp= WorkWord
.c22b	85 10		sta $10				sta dp+0
.c22d	a5 0f		lda $0f				lda WorkWord+1
.c22f	85 11		sta $11				sta dp+1
.c231	4c 7b bb	jmp $bb7b			jmp dp_to_current	; Update the CURRENT wordlist with the new DP.
.c234					Header_Build:
.c234	20 cb bb	jsr $bbcb			jsr parse_name_check	; get name string, throw error if empty string
.c237	20 c4 cd	jsr $cdc4			jsr Two_dup		; ( addr u addr u )
.c23a	20 25 a2	jsr $a225			jsr Get_Current
.c23d	20 c5 a1	jsr $a1c5			jsr Search_WordList	; ( addr u xt f ) or ( addr u 0 )
.c240	e8		inx				inx			; pop flag.
.c241	e8		inx				inx
.c242	b5 22		lda $22,x			lda DStack-2,x		; not found?
.c244	f0 21		beq $c267			beq _new_name		; We haven't seen this one before.
.c246	e8		inx				inx			; Drop xt
.c247	e8		inx				inx
.c248	24 0c		bit $0c				bit status		; Check bit 7
.c24a	10 08		bpl $c254			bpl _redefined_name	; Bit 7 is zero, so print the message.
.c24c	a9 80		lda #$80			lda #$80		; Set bit 7 to indicate dup
.c24e	05 0c		ora $0c				ora status
.c250	85 0c		sta $0c				sta status
.c252	d0 19		bne $c26d			bne _process_name
.c254					_redefined_name:
.c254	a9 f1		lda #$f1			lda #<str_redefined
.c256	a0 db		ldy #$db			ldy #>str_redefined
.c258	20 23 cf	jsr $cf23			jsr Print_ASCIIZ_YA_no_lf
.c25b	20 c4 cd	jsr $cdc4			jsr Two_dup		 ; ( addr u addr u )
.c25e	20 08 cf	jsr $cf08			jsr Type
.c261	20 fb ce	jsr $cefb			jsr Space
.c264	4c 6d c2	jmp $c26d			jmp _process_name
.c267					_new_name:
.c267	a9 7f		lda #$7f			lda #$7F		; Clear bit 0 of status to indicate new word.
.c269	25 0c		and $0c				and status
.c26b	85 0c		sta $0c				sta status
.c26d					_process_name:
.c26d	20 c4 cd	jsr $cdc4			jsr Two_dup		; compile name string ending at wh_NameLastChar
.c270	20 2c cb	jsr $cb2c			jsr Here
.c273	20 9e d0	jsr $d09e			jsr Swap
.c276	20 ab ae	jsr $aeab			jsr CMove
.c279	20 80 d0	jsr $d080			jsr Dup		;   save length
.c27c	20 cc c1	jsr $c1cc			jsr Allot
.c27f	20 2c cb	jsr $cb2c			jsr Here
.c282	20 3a cb	jsr $cb3a			jsr One_Minus
.c285	a1 24		lda ($24,x)			lda (DStack+0,x)
.c287	0a		asl a				asl a
.c288	0a		asl a				asl a
.c289	0a		asl a				asl a
.c28a	0a		asl a				asl a
.c28b	0a		asl a				asl a
.c28c	95 24		sta $24,x			sta DStack+0,x
.c28e	20 82 cc	jsr $cc82			jsr Or
.c291	20 06 ce	jsr $ce06			jsr C_Comma		; compile wh_HNL
.c294	e8		inx				inx			; drop name string addr
.c295	e8		inx				inx
.c296	20 6b bb	jsr $bb6b			jsr current_to_dp	; Get the CURRENT dictionary pointer.
.c299	a5 10		lda $10				lda dp+0		; compile wh_WordListLink
.c29b	a4 11		ldy $11				ldy dp+1
.c29d	20 23 ce	jsr $ce23			jsr Comma_YA
.c2a0	a9 03		lda #$03			lda #3			; compile wh_CodeLength (temporary value, see adjust_z)
.c2a2	20 09 ce	jsr $ce09			jsr C_Comma_A
.c2a5	a9 08		lda #$08			lda #NN			; compile wh_Flags
.c2a7	20 09 ce	jsr $ce09			jsr C_Comma_A
.c2aa	38		sec				sec			; WorkWord= nt
.c2ab	a5 00		lda $00				lda cp+0
.c2ad	e9 85		sbc #$85			sbc #wh_xt
.c2af	85 0e		sta $0e				sta WorkWord+0
.c2b1	a5 01		lda $01				lda cp+1
.c2b3	e9 00		sbc #$00			sbc #0
.c2b5	85 0f		sta $0f				sta WorkWord+1
.c2b7	60		rts				rts
=146					CL	.var *-(WordListLink+wh_Xt)
=$c2b8					en = *	; remember here
>c224	92					.byte CL	;wh_CodeLength
>c2b8	43 72 65 61 74 65		L1:	.text "Create"	;  name of word as a string, ending at wh_NameLastChar
>c2be	a6					.byte (("Create"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c2bf	a1 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c2c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c2c2	08					.byte NN	;wh_Flags	dictionary flags
=49726					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c2c3					Create:
.c2c3	20 26 c2	jsr $c226			jsr Header_Comma	; compile word header
.c2c6	a9 d0		lda #$d0			lda #<DoVar		; compile JSR DoVar
.c2c8	a0 c2		ldy #$c2			ldy #>DoVar
.c2ca	20 48 ce	jsr $ce48			jsr Jsr_Comma_YA
.c2cd	4c fe bc	jmp $bcfe			jmp adjust_z
=13					CL	.var *-(WordListLink+wh_Xt)
=$c2d0					en = *	; remember here
>c2c1	0d					.byte CL	;wh_CodeLength
.c2d0					DoVar:
.c2d0	68		pla				pla		; Pull the return address off the machine's stack
.c2d1	18		clc				clc		;   +1 because of the way the JSR works
.c2d2	69 01		adc #$01			adc #1
.c2d4	ca		dex				dex		; push on data stack
.c2d5	ca		dex				dex
.c2d6	95 24		sta $24,x			sta DStack+0,x
.c2d8	68		pla				pla
.c2d9	69 00		adc #$00			adc #0
.c2db	95 25		sta $25,x			sta DStack+1,x
.c2dd	60		rts				rts		; takes us to the original caller of the
>c2de	44 6f 65 73 3e			L1:	.text "Does>"	;  name of word as a string, ending at wh_NameLastChar
>c2e3	c5					.byte (("Does>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c2e4	3e c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c2e6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c2e7	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=49763					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c2e8					Does:
.c2e8	a0 c3		ldy #$c3			ldy #>_runtime		; compile JSR _runtime
.c2ea	a9 02		lda #$02			lda #<_runtime
.c2ec	20 48 ce	jsr $ce48			jsr Jsr_Comma_YA
.c2ef	a9 68		lda #$68			lda #$68		; compile PLA  to pop RTS addr (PFA-1) to AY
.c2f1	a0 a8		ldy #$a8			ldy #$a8		;    & TAY
.c2f3	20 23 ce	jsr $ce23			jsr Comma_YA
.c2f6	a9 68		lda #$68			lda #$68		; compile PLA
.c2f8	20 09 ce	jsr $ce09			jsr C_Comma_A
.c2fb	a0 c3		ldy #$c3			ldy #>_DoDoes		; compile JSR _DoDoes
.c2fd	a9 14		lda #$14			lda #<_DoDoes
.c2ff	4c 48 ce	jmp $ce48			jmp Jsr_Comma_YA
=26					CL	.var *-(WordListLink+wh_Xt)
=$c302					en = *	; remember here
>c2e6	1a					.byte CL	;wh_CodeLength
.c302					_runtime:
.c302	20 6b bb	jsr $bb6b			jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.c305	18		clc				clc
.c306	68		pla				pla		; RTS addr LSB
.c307	69 01		adc #$01			adc #1		;   +1 for JSR bahavior
.c309	a0 86		ldy #$86			ldy #Wh_xt+1
.c30b	91 10		sta ($10),y			sta (dp),y
.c30d	68		pla				pla		; RTS addr MSB
.c30e	69 00		adc #$00			adc #0
.c310	c8		iny				iny
.c311	91 10		sta ($10),y			sta (dp),y
.c313	60		rts				rts
.c314					_DoDoes:
.c314	c8		iny				iny		; +1 for JSR behavior
.c315	d0 03		bne $c31a			bne +
.c317	18		clc				clc
.c318	69 01		adc #$01			adc #1
.c31a					+
.c31a	4c 8e d0	jmp $d08e			jmp PushAY
>c31d	55 6e 75 73 65 64		L1:	.text "Unused"	;  name of word as a string, ending at wh_NameLastChar
>c323	86					.byte (("Unused"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c324	63 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c326	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c327	00					.byte 0	;wh_Flags	dictionary flags
=49827					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c328					Unused:
=32600					_last = cp_end-2*padoffset
.c328	ca		dex				dex
.c329	ca		dex				dex
.c32a	38		sec				sec
.c32b	a9 58		lda #$58			lda #<_last
.c32d	e5 00		sbc $00				sbc cp+0
.c32f	95 24		sta $24,x			sta DStack+0,x
.c331	a9 7f		lda #$7f			lda #>_last
.c333	e5 01		sbc $01				sbc cp+1
.c335	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$c337					en = *	; remember here
>c326	0f					.byte CL	;wh_CodeLength
.c337	60		rts				rts
>c338	44 65 70 74 68			L1:	.text "Depth"	;  name of word as a string, ending at wh_NameLastChar
>c33d	05					.byte (("Depth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c33e	a3 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c340	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c341	08					.byte NN	;wh_Flags	dictionary flags
=49853					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c342					Depth:
.c342	a9 28		lda #$28			lda #DStack0	; A= DStack0 - X
.c344	86 1a		stx $1a				stx tmp4
.c346	38		sec				sec
.c347	e5 1a		sbc $1a				sbc tmp4
.c349	4a		lsr a				lsr		; divide by two because each cell is two bytes
.c34a	4c eb b8	jmp $b8eb			jmp PushZA
=11					CL	.var *-(WordListLink+wh_Xt)
=$c34d					en = *	; remember here
>c340	0b					.byte CL	;wh_CodeLength
>c34d	4b 65 79			L1:	.text "Key"	;  name of word as a string, ending at wh_NameLastChar
>c350	23					.byte (("Key"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c351	bd c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c353	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c354	08					.byte NN	;wh_Flags	dictionary flags
=49872					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c355	20 5b c3	jsr $c35b	Key:		jsr key_a		; returns char in A
.c358	4c eb b8	jmp $b8eb			jmp PushZA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c35b					en = *	; remember here
>c353	06					.byte CL	;wh_CodeLength
.c35b					Key_A:
.c35b	6c 08 03	jmp ($0308)			jmp (input)		; JSR/RTS
>c35e	4b 65 79 3f			L1:	.text "Key?"	;  name of word as a string, ending at wh_NameLastChar
>c362	e4					.byte (("Key?"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c363	d0 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c365	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c366	08					.byte NN	;wh_Flags	dictionary flags
=49890					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c367	20 6d c3	jsr $c36d	KeyQ:		jsr KeyQ_A
.c36a	4c eb b8	jmp $b8eb			jmp PushZA
.c36d	6c 0a 03	jmp ($030a)	KeyQ_A:		jmp (HaveKey)
>c370	52 65 66 69 6c 6c		L1:	.text "Refill"	;  name of word as a string, ending at wh_NameLastChar
>c376	86					.byte (("Refill"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c377	e2 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c379	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c37a	08					.byte NN	;wh_Flags	dictionary flags
=49910					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c37b					Refill:
.c37b	a9 00		lda #$00			lda #0			; show empty in case of error
.c37d	85 06		sta $06				sta ciblen+0
.c37f	85 07		sta $07				sta ciblen+1
.c381	a5 02		lda $02				lda insrc		; cheat: We only check LSB
.c383	d0 24		bne $c3a9			bne _src_not_kbd
.c385	a5 04		lda $04				lda cib+0		; address of CIB is NOS
.c387	a4 05		ldy $05				ldy cib+1
.c389	20 b9 b8	jsr $b8b9			jsr PushYA
.c38c	a9 ff		lda #$ff			lda #bsize		; max number of chars is TOS
.c38e	20 eb b8	jsr $b8eb			jsr PushZA		;  cheat: We only accept max 255
.c391	20 c0 c3	jsr $c3c0			jsr Accept		; ( addr n1 -- n2)
.c394	b5 24		lda $24,x			lda DStack+0,x
.c396	85 06		sta $06				sta ciblen+0
.c398	b5 25		lda $25,x			lda DStack+1,x
.c39a	85 07		sta $07				sta ciblen+1		; though we only accept 255 chars
.c39c	a9 00		lda #$00			lda #0
.c39e	85 08		sta $08				sta toin+0
.c3a0	85 09		sta $09				sta toin+1
.c3a2	a9 ff		lda #$ff			lda #$FF		; overwrite with TRUE flag
.c3a4	95 24		sta $24,x			sta DStack+0,x
.c3a6	95 25		sta $25,x			sta DStack+1,x
.c3a8	60		rts				rts
.c3a9					_src_not_kbd:
.c3a9	c9 ff		cmp #$ff			cmp #$ff
.c3ab	d0 03		bne $c3b0			bne _src_not_string
.c3ad	4c dc b8	jmp $b8dc			jmp False
.c3b0					_src_not_string:
.c3b0	a9 eb		lda #$eb			lda #$100+err_Unsupported
.c3b2	20 67 b5	jsr $b567			jsr ThrowA
=58					CL	.var *-(WordListLink+wh_Xt)
=$c3b5					en = *	; remember here
>c379	3a					.byte CL	;wh_CodeLength
>c3b5	41 63 63 65 70 74		L1:	.text "Accept"	;  name of word as a string, ending at wh_NameLastChar
>c3bb	86					.byte (("Accept"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c3bc	f6 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3bf	18					.byte UF+NN	;wh_Flags	dictionary flags
=49979					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3c0					Accept:
.c3c0	20 1d b5	jsr $b51d			jsr underflow_2
.c3c3	b5 24		lda $24,x			lda DStack+0,x		; Abort if we were asked to receive 0 chars
.c3c5	15 25		ora $25,x			ora DStack+1,x
.c3c7	d0 09		bne $c3d2			bne _not_zero
.c3c9	e8		inx				inx			; drop n
.c3ca	e8		inx				inx
.c3cb	95 24		sta $24,x			sta DStack+0,x		; replace addr with 0
.c3cd	95 25		sta $25,x			sta DStack+1,x
.c3cf	4c a7 c4	jmp $c4a7			jmp accept_done
.c3d2					_not_zero:
.c3d2	b5 24		lda $24,x			lda DStack+0,x	; number of chars to get in tmp2 ...
.c3d4	85 16		sta $16				sta tmp2
.c3d6	a9 00		lda #$00			lda #0
.c3d8	85 17		sta $17				sta tmp2+1	; ... but we only accept max 255 chars
.c3da	b5 26		lda $26,x			lda DStack+2,x	; address of buffer is NOS, to tmp1
.c3dc	85 14		sta $14				sta tmp1
.c3de	b5 27		lda $27,x			lda DStack+3,x
.c3e0	85 15		sta $15				sta tmp1+1
.c3e2	e8		inx				inx
.c3e3	e8		inx				inx
.c3e4	a0 00		ldy #$00			ldy #0
.c3e6	a5 0c		lda $0c				lda status
.c3e8	29 f7		and #$f7			and #$f7
.c3ea	18		clc				clc
.c3eb	69 01		adc #$01			adc #1
.c3ed	09 08		ora #$08			ora #$08
.c3ef	85 0c		sta $0c				sta status
.c3f1					accept_loop:
.c3f1	20 5b c3	jsr $c35b			jsr key_a
.c3f4	c9 0a		cmp #$0a			cmp #AscLF
.c3f6	f0 20		beq $c418			beq _eol
.c3f8	c9 0d		cmp #$0d			cmp #AscCR
.c3fa	f0 1c		beq $c418			beq _eol
.c3fc	c9 08		cmp #$08			cmp #AscBS
.c3fe	f0 24		beq $c424			beq _backspace
.c400	c9 7f		cmp #$7f			cmp #AscDEL	; (CTRL-h)
.c402	f0 20		beq $c424			beq _backspace
.c404	c9 10		cmp #$10			cmp #AscCP
.c406	f0 37		beq $c43f			beq _ctrl_p
.c408	c9 0e		cmp #$0e			cmp #AscCN
.c40a	f0 46		beq $c452			beq _ctrl_n
.c40c	91 14		sta ($14),y			sta (tmp1),y
.c40e	c8		iny				iny
.c40f	20 ee ce	jsr $ceee			jsr Emit_A
.c412	c4 16		cpy $16				cpy tmp2	; reached character limit?
.c414	d0 db		bne $c3f1			bne accept_loop	      ; fall through if buffer limit reached
.c416	f0 03		beq $c41b			beq _buffer_full
.c418					_eol:
.c418	20 fb ce	jsr $cefb			jsr Space	; print final space
.c41b					_buffer_full:
.c41b	94 24		sty $24,x			sty DStack+0,x	; Y contains number of chars accepted already
.c41d	a9 00		lda #$00			lda #0
.c41f	95 25		sta $25,x			sta DStack+1,x		; we only accept 256 chars
.c421	4c a7 c4	jmp $c4a7			jmp accept_done
.c424					_backspace:
.c424	c0 00		cpy #$00			cpy #0		; buffer empty?
.c426	d0 06		bne $c42e			bne +
.c428	a9 07		lda #$07			lda #AscBELL	; complain and don't delete beyond the start of line
.c42a	20 ee ce	jsr $ceee			jsr Emit_A
.c42d	c8		iny				iny
.c42e					+
.c42e	88		dey				dey
.c42f	a9 08		lda #$08			lda #AscBS	; move back one
.c431	20 ee ce	jsr $ceee			jsr Emit_A
.c434	20 fb ce	jsr $cefb			jsr Space	; print a space (rubout)
.c437	a9 08		lda #$08			lda #AscBS	; move back over space
.c439	20 ee ce	jsr $ceee			jsr Emit_A
.c43c	4c f1 c3	jmp $c3f1			jmp accept_loop
.c43f					_ctrl_p:
.c43f	a5 0c		lda $0c				lda status
.c441	29 07		and #$07			and #7
.c443	d0 08		bne $c44d			bne _ctrl_p_dec
.c445	a5 0c		lda $0c				lda status
.c447	09 07		ora #$07			ora #7
.c449	85 0c		sta $0c				sta status
.c44b	d0 14		bne $c461			bne _recall_history
.c44d					_ctrl_p_dec:
.c44d	c6 0c		dec $0c				dec status
.c44f	4c 61 c4	jmp $c461			jmp _recall_history
.c452					_ctrl_n:
.c452	a9 08		lda #$08			lda #$8
.c454	24 0c		bit $0c				bit status
.c456	d0 09		bne $c461			bne _recall_history
.c458	a5 0c		lda $0c				lda status
.c45a	29 f7		and #$f7			and #$f7
.c45c	18		clc				clc
.c45d	69 01		adc #$01			adc #1
.c45f	85 0c		sta $0c				sta status
.c461					_recall_history:
.c461	a9 f7		lda #$f7			lda #$ff-%00001000
.c463	25 0c		and $0c				and status
.c465	85 0c		sta $0c				sta status
.c467	20 c2 c4	jsr $c4c2			jsr accept_total_recall
.c46a	a9 0d		lda #$0d			lda #AscCR
.c46c	20 ee ce	jsr $ceee			jsr Emit_A
.c46f					input_clear:
.c46f	c0 00		cpy #$00			cpy #0
.c471	f0 07		beq $c47a			beq input_cleared
.c473	20 fb ce	jsr $cefb			jsr Space
.c476	88		dey				dey
.c477	4c 6f c4	jmp $c46f			jmp input_clear
.c47a					input_cleared:
.c47a	a9 0d		lda #$0d			lda #AscCR
.c47c	20 ee ce	jsr $ceee			jsr Emit_A
.c47f	b1 18		lda ($18),y			lda (tmp3),y
.c481	85 0d		sta $0d				sta status+1
.c483	e6 18		inc $18				inc tmp3
.c485	d0 02		bne $c489			bne +		; Increment the upper byte on carry.
.c487	e6 19		inc $19				inc tmp3+1
.c489					+
.c489	a9 0d		lda #$0d			lda #AscCR
.c48b	20 ee ce	jsr $ceee			jsr Emit_A
.c48e					_history_loop:
.c48e	c4 0d		cpy $0d				cpy status+1
.c490	d0 03		bne $c495			bne +
.c492	4c f1 c3	jmp $c3f1			jmp accept_loop	      ; Needs a long jump
.c495					+
.c495	c4 16		cpy $16				cpy tmp2
.c497	f0 0a		beq $c4a3			beq _hist_filled_buffer
.c499	b1 18		lda ($18),y			lda (tmp3),y
.c49b	91 14		sta ($14),y			sta (tmp1),y
.c49d	20 ee ce	jsr $ceee			jsr Emit_A
.c4a0	c8		iny				iny
.c4a1	d0 eb		bne $c48e			bne _history_loop
.c4a3					_hist_filled_buffer:
.c4a3	88		dey				dey
.c4a4	4c f1 c3	jmp $c3f1			jmp accept_loop
.c4a7					accept_done:
.c4a7	20 c2 c4	jsr $c4c2			jsr accept_total_recall
.c4aa	85 0d		sta $0d				sta status+1
.c4ac	a0 00		ldy #$00			ldy #0
.c4ae	91 18		sta ($18),y			sta (tmp3),y
.c4b0	e6 18		inc $18				inc tmp3
.c4b2	d0 02		bne $c4b6			bne +		; Increment the upper byte on carry.
.c4b4	e6 19		inc $19				inc tmp3+1
.c4b6					+
.c4b6					_save_history_loop:
.c4b6	c4 0d		cpy $0d				cpy status+1
.c4b8	f0 07		beq $c4c1			beq _save_history_done
.c4ba	b1 14		lda ($14),y			lda (tmp1),y
.c4bc	91 18		sta ($18),y			sta (tmp3),y
.c4be	c8		iny				iny
.c4bf	d0 f5		bne $c4b6			bne _save_history_loop
.c4c1					_save_history_done:
=257					CL	.var *-(WordListLink+wh_Xt)
=$ff					CL	 .var $ff
=$c4c1					en = *	; remember here
>c3be	ff					.byte CL	;wh_CodeLength
.c4c1	60		rts				rts
.c4c2					accept_total_recall:
.c4c2	a9 66		lda #$66			lda #<hist_buff
.c4c4	85 18		sta $18				sta tmp3
.c4c6	a9 07		lda #$07			lda #>hist_buff
.c4c8	85 19		sta $19				sta tmp3+1
.c4ca	a5 0c		lda $0c				lda status
.c4cc	6a		ror a				ror
.c4cd	29 03		and #$03			and #3
.c4cf	18		clc				clc
.c4d0	65 19		adc $19				adc tmp3+1
.c4d2	85 19		sta $19				sta tmp3+1
.c4d4	a5 0c		lda $0c				lda status
.c4d6	6a		ror a				ror		; Rotate through carry into msb.
.c4d7	6a		ror a				ror
.c4d8	29 80		and #$80			and #$80
.c4da	18		clc				clc
.c4db	65 18		adc $18				adc tmp3
.c4dd	85 18		sta $18				sta tmp3
.c4df	90 02		bcc $c4e3			bcc +		; Increment the upper byte on carry.
.c4e1	e6 19		inc $19				inc tmp3+1
.c4e3					+
.c4e3	98		tya				tya
.c4e4	c9 80		cmp #$80			cmp #$80
.c4e6	90 02		bcc $c4ea			bcc +
.c4e8	a9 7f		lda #$7f			lda #$7F
.c4ea					+
.c4ea	60		rts				rts
>c4eb	49 6e 70 75 74 3e 52		L1:	.text "Input>R"	;  name of word as a string, ending at wh_NameLastChar
>c4f2	47					.byte (("Input>R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c4f3	3b c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4f5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4f6	48					.byte NN+R6	;wh_Flags	dictionary flags
=50290					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4f7					Input_To_R:
.c4f7	68		pla				pla			; move it out of the way
.c4f8	85 14		sta $14				sta tmp1+0
.c4fa	68		pla				pla
.c4fb	85 15		sta $15				sta tmp1+1
.c4fd	a0 07		ldy #$07			ldy #7
.c4ff	b9 02 00	lda $0002,y	_loop:		lda InSrc,y	; insrc+7 is toin+1
.c502	48		pha				pha
.c503	88		dey				dey
.c504	10 f9		bpl $c4ff			bpl _loop
.c506	a5 15		lda $15				lda tmp1+1		; Restore address for return jump
.c508	48		pha				pha
.c509	a5 14		lda $14				lda tmp1+0
.c50b	48		pha				pha
=21					CL	.var *-(WordListLink+wh_Xt)
=$c50c					en = *	; remember here
>c4f5	15					.byte CL	;wh_CodeLength
.c50c	60		rts				rts
>c50d	52 3e 49 6e 70 75 74		L1:	.text "R>Input"	;  name of word as a string, ending at wh_NameLastChar
>c514	87					.byte (("R>Input"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c515	72 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c517	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c518	48					.byte NN+R6	;wh_Flags	dictionary flags
=50324					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c519					R_To_Input:
.c519	68		pla				pla		 ; move RTS addr out of the way
.c51a	85 14		sta $14				sta tmp1+0
.c51c	68		pla				pla
.c51d	85 15		sta $15				sta tmp1+1
.c51f	a0 00		ldy #$00			ldy #0
.c521	68		pla		_loop:		pla
.c522	99 02 00	sta $0002,y			sta InSrc,y ; also cib ciblen toin
.c525	c8		iny				iny
.c526	c0 08		cpy #$08			cpy #8
.c528	d0 f7		bne $c521			bne _loop
.c52a	a5 15		lda $15				lda tmp1+1	; Restore RTS address
.c52c	48		pha				pha
.c52d	a5 14		lda $14				lda tmp1+0
.c52f	48		pha				pha
=23					CL	.var *-(WordListLink+wh_Xt)
=$c530					en = *	; remember here
>c517	17					.byte CL	;wh_CodeLength
.c530	60		rts				rts
>c531	42 6f 75 6e 64 73		L1:	.text "Bounds"	;  name of word as a string, ending at wh_NameLastChar
>c537	66					.byte (("Bounds"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c538	94 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c53a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c53b	10					.byte UF	;wh_Flags	dictionary flags
=50359					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c53c					Bounds:
.c53c	20 1d b5	jsr $b51d			jsr underflow_2
.c53f	18		clc				clc
.c540	b5 26		lda $26,x			lda DStack+2,x		; LSB addr
.c542	a8		tay				tay
.c543	75 24		adc $24,x			adc DStack+0,x		; LSB u
.c545	95 26		sta $26,x			sta DStack+2,x		; LSB addr+u
.c547	94 24		sty $24,x			sty DStack+0,x
.c549	b5 27		lda $27,x			lda DStack+3,x		; MSB addr
.c54b	a8		tay				tay
.c54c	75 25		adc $25,x			adc DStack+1,x		; MSB u
.c54e	95 27		sta $27,x			sta DStack+3,x		; MSB addr+u
.c550	94 25		sty $25,x			sty DStack+1,x
=22					CL	.var *-(WordListLink+wh_Xt)
=$c552					en = *	; remember here
>c53a	16					.byte CL	;wh_CodeLength
.c552	60		rts				rts
>c553	53 70 61 63 65 73		L1:	.text "Spaces"	;  name of word as a string, ending at wh_NameLastChar
>c559	66					.byte (("Spaces"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c55a	b7 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c55c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c55d	18					.byte UF+NN	;wh_Flags	dictionary flags
=50393					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c55e					 Spaces:
.c55e	20 08 b5	jsr $b508			jsr underflow_1
.c561	4c 67 c5	jmp $c567			jmp _test
.c564					_loop:
.c564	20 fb ce	jsr $cefb			jsr Space		; print a space
.c567	d6 24		dec $24,x	_test:		dec DStack+0,x		; decrement & test
.c569	10 f9		bpl $c564			bpl _loop
.c56b	e8		inx				inx			; Drop
.c56c	e8		inx				inx
=15					CL	.var *-(WordListLink+wh_Xt)
=$c56d					en = *	; remember here
>c55c	0f					.byte CL	;wh_CodeLength
.c56d	60		rts				rts
>c56e	2d 54 72 61 69 6c 69 6e		L1:	.text "-Trailing"	;  name of word as a string, ending at wh_NameLastChar
>c576	67
>c577	e9					.byte (("-Trailing"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c578	d9 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c57a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c57b	18					.byte UF+NN	;wh_Flags	dictionary flags
=50423					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c57c					Minus_trailing:
.c57c	20 1d b5	jsr $b51d			jsr underflow_2
.c57f	b5 26		lda $26,x			lda DStack+2,x		; tmp1= addr + (u1 & $ff00)
.c581	85 14		sta $14				sta tmp1+0
.c583	b5 27		lda $27,x			lda DStack+3,x
.c585	18		clc				clc
.c586	75 25		adc $25,x			adc DStack+1,x
.c588	85 15		sta $15				sta tmp1+1
.c58a	b4 24		ldy $24,x			ldy DStack+0,x
.c58c	88		dey		_loop:		dey			; back 1 char
.c58d	c0 ff		cpy #$ff			cpy #$ff
.c58f	d0 06		bne $c597			bne +
.c591	c6 15		dec $15				dec tmp1+1		;   back 1 page
.c593	d6 25		dec $25,x			dec DStack+1,x
.c595	30 06		bmi $c59d			bmi _done
.c597					+
.c597	b1 14		lda ($14),y			lda (tmp1),y		; if blank, keep going
.c599	c9 20		cmp #$20			cmp #AscSP
.c59b	f0 ef		beq $c58c			beq _loop
.c59d	c8		iny		_done:		iny			; forward 1 char
.c59e	d0 02		bne $c5a2			bne +
.c5a0	f6 25		inc $25,x			inc DStack+1,x
.c5a2	94 24		sty $24,x	+		sty DStack+0,x
=40					CL	.var *-(WordListLink+wh_Xt)
=$c5a4					en = *	; remember here
>c57a	28					.byte CL	;wh_CodeLength
.c5a4	60		rts				rts
>c5a5	2d 4c 65 61 64 69 6e 67		L1:	.text "-Leading"	;  name of word as a string, ending at wh_NameLastChar
>c5ad	e8					.byte (("-Leading"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c5ae	f7 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5b0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5b1	18					.byte UF+NN	;wh_Flags	dictionary flags
=50477					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5b2					Minus_leading:
.c5b2	20 1d b5	jsr $b51d			jsr underflow_2
.c5b5					_loop:
.c5b5	b5 24		lda $24,x			lda DStack+0,x		; chars left?
.c5b7	15 25		ora $25,x			ora DStack+1,x
.c5b9	f0 0f		beq $c5ca			beq _done
.c5bb	a1 26		lda ($26,x)			lda (DStack+2,x)	; get first character
.c5bd	c9 21		cmp #$21			cmp #AscSP+1		;   is_whitespace
.c5bf	b0 09		bcs $c5ca			bcs _done
.c5c1	20 6a cb	jsr $cb6a			jsr NOS_One_Plus
.c5c4	20 3d cb	jsr $cb3d			jsr One_Minus_NoUF
.c5c7	4c b5 c5	jmp $c5b5			jmp _loop
.c5ca					_done:
=24					CL	.var *-(WordListLink+wh_Xt)
=$c5ca					en = *	; remember here
>c5b0	18					.byte CL	;wh_CodeLength
.c5ca	60		rts				rts
>c5cb	2f 53 74 72 69 6e 67		L1:	.text "/String"	;  name of word as a string, ending at wh_NameLastChar
>c5d2	e7					.byte (("/String"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c5d3	2d c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5d5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5d6	18					.byte UF+NN	;wh_Flags	dictionary flags
=50514					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5d7					Slash_String:
.c5d7	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.c5d9	b0 1d		bcs $c5f8		bcs Throw_Stack_20
.c5db	18		clc				clc		; addr += n
.c5dc	b5 24		lda $24,x			lda DStack+0,x
.c5de	75 28		adc $28,x			adc DStack+4,x
.c5e0	95 28		sta $28,x			sta DStack+4,x
.c5e2	b5 25		lda $25,x			lda DStack+1,x
.c5e4	75 29		adc $29,x			adc DStack+5,x
.c5e6	95 29		sta $29,x			sta DStack+5,x
.c5e8	38		sec				sec		; u -= n
.c5e9	b5 26		lda $26,x			lda DStack+2,x
.c5eb	f5 24		sbc $24,x			sbc DStack+0,x
.c5ed	95 26		sta $26,x			sta DStack+2,x
.c5ef	b5 27		lda $27,x			lda DStack+3,x
.c5f1	f5 25		sbc $25,x			sbc DStack+1,x
.c5f3	95 27		sta $27,x			sta DStack+3,x
.c5f5	e8		inx				inx		; Drop n
.c5f6	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c5f7					en = *	; remember here
>c5d5	20					.byte CL	;wh_CodeLength
.c5f7	60		rts				rts
.c5f8	4c 2c b5	jmp $b52c	Throw_Stack_20: jmp Throw_Stack
>c5fb	32 44 72 6f 70			L1:	.text "2Drop"	;  name of word as a string, ending at wh_NameLastChar
>c600	05					.byte (("2Drop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c601	52 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c603	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c604	10					.byte UF	;wh_Flags	dictionary flags
=50560					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c605					Two_drop:
.c605	20 1d b5	jsr $b51d			jsr underflow_2
.c608	e8		inx				inx
.c609	e8		inx				inx
.c60a	e8		inx				inx
.c60b	e8		inx				inx
=7					CL	.var *-(WordListLink+wh_Xt)
=$c60c					en = *	; remember here
>c603	07					.byte CL	;wh_CodeLength
.c60c	60		rts				rts
>c60d	32 53 77 61 70			L1:	.text "2Swap"	;  name of word as a string, ending at wh_NameLastChar
>c612	05					.byte (("2Swap"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c613	80 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c615	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c616	08					.byte NN	;wh_Flags	dictionary flags
=50578					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c617					Two_Swap:
.c617	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c619	b0 dd		bcs $c5f8		bcs Throw_Stack_20
.c61b	86 14		stx $14				stx tmp1
.c61d	ca		dex				dex
.c61e	ca		dex				dex
.c61f	ca		dex				dex
.c620	ca		dex				dex
.c621	e8		inx		_loop:		inx
.c622	b5 27		lda $27,x			lda DStack+3,x	; 3 <-> 7
.c624	b4 2b		ldy $2b,x			ldy DStack+7,x
.c626	95 2b		sta $2b,x			sta DStack+7,x
.c628	94 27		sty $27,x			sty DStack+3,x
.c62a	e4 14		cpx $14				cpx tmp1
.c62c	90 f3		bcc $c621			bcc _loop
=23					CL	.var *-(WordListLink+wh_Xt)
=$c62e					en = *	; remember here
>c615	17					.byte CL	;wh_CodeLength
.c62e	60		rts				rts
>c62f	32 4f 76 65 72			L1:	.text "2Over"	;  name of word as a string, ending at wh_NameLastChar
>c634	45					.byte (("2Over"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c635	92 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c637	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c638	18					.byte UF+NN	;wh_Flags	dictionary flags
=50612					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c639					Two_over:
.c639	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c63b	b0 bb		bcs $c5f8		bcs Throw_Stack_20
.c63d	a0 04		ldy #$04			ldy #4
.c63f	ca		dex		_loop:		dex
.c640	b5 2c		lda $2c,x			lda DStack+8,x
.c642	95 24		sta $24,x			sta DStack+0,x
.c644	88		dey				dey
.c645	d0 f8		bne $c63f			bne _loop
=14					CL	.var *-(WordListLink+wh_Xt)
=$c647					en = *	; remember here
>c637	0e					.byte CL	;wh_CodeLength
.c647	60		rts				rts
>c648	32 21				L1:	.text "2!"	;  name of word as a string, ending at wh_NameLastChar
>c64a	22					.byte (("2!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c64b	b4 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c64d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c64e	10					.byte UF	;wh_Flags	dictionary flags
=50634					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c64f					Two_Store:
.c64f	20 22 b5	jsr $b522			jsr underflow_3
.c652	20 de b4	jsr $b4de			jsr PopYA
.c655	85 14		sta $14		Two_Store_YA:	sta tmp1+0	; save addr
.c657	84 15		sty $15				sty tmp1+1
.c659	b5 24		lda $24,x			lda DStack+0,x	; copy MSB
.c65b	a0 00		ldy #$00			ldy #0
.c65d	91 14		sta ($14),y			sta (tmp1),y
.c65f	b5 25		lda $25,x			lda DStack+1,x	; copy next
.c661	c8		iny				iny
.c662	91 14		sta ($14),y			sta (tmp1),y
.c664	b5 26		lda $26,x			lda DStack+2,x	; copy next
.c666	c8		iny				iny
.c667	91 14		sta ($14),y			sta (tmp1),y
.c669	b5 27		lda $27,x			lda DStack+3,x	; copy MSB
.c66b	c8		iny				iny
.c66c	91 14		sta ($14),y			sta (tmp1),y
.c66e	e8		inx				inx		; 2Drop
.c66f	e8		inx				inx
.c670	e8		inx				inx
.c671	e8		inx				inx
=35					CL	.var *-(WordListLink+wh_Xt)
=$c672					en = *	; remember here
>c64d	23					.byte CL	;wh_CodeLength
.c672	60		rts				rts
>c673	32 40				L1:	.text "2@"	;  name of word as a string, ending at wh_NameLastChar
>c675	02					.byte (("2@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c676	ca c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c678	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c679	00					.byte 0	;wh_Flags	dictionary flags
=50677					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c67a	20 de b4	jsr $b4de	Two_fetch:	jsr PopYA
.c67d	85 14		sta $14		Two_Fetch_YA:	sta tmp1+0	; save addr
.c67f	84 15		sty $15				sty tmp1+1
.c681	a0 00		ldy #$00			ldy #0
.c683					Two_Fetch_Tmp1Y:
.c683	ca		dex				dex
.c684	ca		dex				dex
.c685	ca		dex				dex
.c686	ca		dex				dex
.c687	b1 14		lda ($14),y			lda (tmp1),y	; copy LSB
.c689	95 24		sta $24,x			sta DStack+0,x
.c68b	c8		iny				iny		; copy next
.c68c	b1 14		lda ($14),y			lda (tmp1),y
.c68e	95 25		sta $25,x			sta DStack+1,x
.c690	c8		iny				iny		; copy next
.c691	b1 14		lda ($14),y			lda (tmp1),y
.c693	95 26		sta $26,x			sta DStack+2,x
.c695	c8		iny				iny		; copy next
.c696	b1 14		lda ($14),y			lda (tmp1),y
.c698	95 27		sta $27,x			sta DStack+3,x
=32					CL	.var *-(WordListLink+wh_Xt)
=$c69a					en = *	; remember here
>c678	20					.byte CL	;wh_CodeLength
.c69a	60		rts				rts
>c69b	44 40				L1:	.text "D@"	;  name of word as a string, ending at wh_NameLastChar
>c69d	02					.byte (("D@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c69e	f5 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6a0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6a1	08					.byte NN	;wh_Flags	dictionary flags
=50717					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6a2	20 de b4	jsr $b4de	DFetch:		jsr PopYA
.c6a5	85 14		sta $14		DFetchYA:	sta tmp1+0	; save addr
.c6a7	84 15		sty $15				sty tmp1+1
.c6a9	ca		dex				dex
.c6aa	ca		dex				dex
.c6ab	ca		dex				dex
.c6ac	ca		dex				dex
.c6ad	a0 00		ldy #$00			ldy #0
.c6af	b1 14		lda ($14),y			lda (tmp1),y
.c6b1	95 26		sta $26,x			sta DStack+2,x
.c6b3	c8		iny				iny
.c6b4	b1 14		lda ($14),y			lda (tmp1),y
.c6b6	95 27		sta $27,x			sta DStack+3,x
.c6b8	c8		iny				iny
.c6b9	b1 14		lda ($14),y			lda (tmp1),y
.c6bb	95 24		sta $24,x			sta DStack+0,x
.c6bd	c8		iny				iny
.c6be	b1 14		lda ($14),y			lda (tmp1),y
.c6c0	95 25		sta $25,x			sta DStack+1,x
=32					CL	.var *-(WordListLink+wh_Xt)
=$c6c2					en = *	; remember here
>c6a0	20					.byte CL	;wh_CodeLength
.c6c2	60		rts				rts
>c6c3	44 21				L1:	.text "D!"	;  name of word as a string, ending at wh_NameLastChar
>c6c5	22					.byte (("D!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6c6	1d c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6c8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6c9	08					.byte NN	;wh_Flags	dictionary flags
=50757					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6ca	20 de b4	jsr $b4de	DStore:		jsr PopYA
.c6cd	85 14		sta $14		DStoreYA:	sta tmp1+0	; save addr
.c6cf	84 15		sty $15				sty tmp1+1
.c6d1	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c6d3	a0 00		ldy #$00			ldy #0
.c6d5	91 14		sta ($14),y			sta (tmp1),y
.c6d7	b5 27		lda $27,x			lda DStack+3,x
.c6d9	c8		iny				iny
.c6da	91 14		sta ($14),y			sta (tmp1),y
.c6dc	b5 24		lda $24,x			lda DStack+0,x
.c6de	c8		iny				iny
.c6df	91 14		sta ($14),y			sta (tmp1),y
.c6e1	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c6e3	c8		iny				iny
.c6e4	91 14		sta ($14),y			sta (tmp1),y
.c6e6	4c 05 c6	jmp $c605			jmp Two_Drop	; also check underflow, return
=31					CL	.var *-(WordListLink+wh_Xt)
=$c6e9					en = *	; remember here
>c6c8	1f					.byte CL	;wh_CodeLength
>c6e9	32 52 40			L1:	.text "2R@"	;  name of word as a string, ending at wh_NameLastChar
>c6ec	03					.byte (("2R@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6ed	45 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6ef	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6f0	09					.byte CO+NN	;wh_Flags	dictionary flags
=50796					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6f1					Two_r_fetch:
.c6f1	8a		txa				txa		; Y= return stack index
.c6f2	ba		tsx				tsx
.c6f3	86 14		stx $14				stx tmp1
.c6f5	a4 14		ldy $14				ldy tmp1
.c6f7	aa		tax				tax
.c6f8	ca		dex				dex		; make room on the Data Stack
.c6f9	ca		dex				dex
.c6fa	ca		dex				dex
.c6fb	ca		dex				dex
.c6fc	b9 03 01	lda $0103,y			lda RStack+3,y	; LSB of top entry
.c6ff	95 24		sta $24,x			sta DStack+0,x
.c701	b9 04 01	lda $0104,y			lda RStack+4,y	; MSB of top entry
.c704	95 25		sta $25,x			sta DStack+1,x
.c706	b9 05 01	lda $0105,y			lda RStack+5,y	; LSB of bottom entry
.c709	95 26		sta $26,x			sta DStack+2,x
.c70b	b9 06 01	lda $0106,y			lda RStack+6,y	; MSB of bottom entry
.c70e	95 27		sta $27,x			sta DStack+3,x
=31					CL	.var *-(WordListLink+wh_Xt)
=$c710					en = *	; remember here
>c6ef	1f					.byte CL	;wh_CodeLength
.c710	60		rts				rts
>c711	32 52 3e			L1:	.text "2R>"	;  name of word as a string, ending at wh_NameLastChar
>c714	c3					.byte (("2R>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c715	6c c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c717	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c718	41					.byte CO+R6	;wh_Flags	dictionary flags
=50836					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c719					Two_r_from:
.c719	68		pla				pla			; save the return address
.c71a	85 14		sta $14				sta tmp1+0
.c71c	68		pla				pla
.c71d	85 15		sta $15				sta tmp1+1
.c71f	ca		dex				dex			; make room on stack
.c720	ca		dex				dex
.c721	ca		dex				dex
.c722	ca		dex				dex
.c723	68		pla				pla			; LSB
.c724	95 24		sta $24,x			sta DStack+0,x
.c726	68		pla				pla			; MSB
.c727	95 25		sta $25,x			sta DStack+1,x
.c729	68		pla				pla			; LSB
.c72a	95 26		sta $26,x			sta DStack+2,x
.c72c	68		pla				pla			; MSB
.c72d	95 27		sta $27,x			sta DStack+3,x
.c72f	a5 15		lda $15				lda tmp1+1		; restore return address
.c731	48		pha				pha
.c732	a5 14		lda $14				lda tmp1+0
.c734	48		pha				pha
=28					CL	.var *-(WordListLink+wh_Xt)
=$c735					en = *	; remember here
>c717	1c					.byte CL	;wh_CodeLength
.c735	60		rts				rts
>c736	32 3e 52			L1:	.text "2>R"	;  name of word as a string, ending at wh_NameLastChar
>c739	43					.byte (("2>R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c73a	94 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c73c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c73d	51					.byte CO+UF+R6	;wh_Flags	dictionary flags
=50873					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c73e					Two_to_r:
.c73e	68		pla				pla		; save the return address
.c73f	85 14		sta $14				sta tmp1+0
.c741	68		pla				pla
.c742	85 15		sta $15				sta tmp1+1
.c744	20 1d b5	jsr $b51d			jsr underflow_2
.c747	b5 27		lda $27,x			lda DStack+3,x	; MSB
.c749	48		pha				pha
.c74a	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c74c	48		pha				pha
.c74d	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c74f	48		pha				pha
.c750	b5 24		lda $24,x			lda DStack+0,x	; LSB
.c752	48		pha				pha
.c753	e8		inx				inx
.c754	e8		inx				inx
.c755	e8		inx				inx
.c756	e8		inx				inx
.c757	a5 15		lda $15				lda tmp1+1	; restore return address
.c759	48		pha				pha
.c75a	a5 14		lda $14				lda tmp1+0
.c75c	48		pha				pha
=31					CL	.var *-(WordListLink+wh_Xt)
=$c75d					en = *	; remember here
>c73c	1f					.byte CL	;wh_CodeLength
.c75d	60		rts				rts
>c75e	49 6e 76 65 72 74		L1:	.text "Invert"	;  name of word as a string, ending at wh_NameLastChar
>c764	86					.byte (("Invert"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c765	b9 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c767	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c768	10					.byte UF	;wh_Flags	dictionary flags
=50916					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c769					Invert:
.c769	20 08 b5	jsr $b508			jsr underflow_1
.c76c	a9 ff		lda #$ff			lda #$FF
.c76e	55 24		eor $24,x			eor DStack+0,x	; LSB
.c770	95 24		sta $24,x			sta DStack+0,x
.c772	a9 ff		lda #$ff			lda #$FF
.c774	55 25		eor $25,x			eor DStack+1,x	; MSB
.c776	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$c778					en = *	; remember here
>c767	0f					.byte CL	;wh_CodeLength
.c778	60		rts				rts
>c779	4e 65 67 61 74 65		L1:	.text "Negate"	;  name of word as a string, ending at wh_NameLastChar
>c77f	a6					.byte (("Negate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c780	e4 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c782	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c783	10					.byte UF	;wh_Flags	dictionary flags
=50943					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c784					Negate:
.c784	20 08 b5	jsr $b508			jsr underflow_1
.c787	38		sec		Negate3:	sec
.c788	a9 00		lda #$00	Negate4:	lda #0
.c78a	f5 24		sbc $24,x			sbc DStack+0,x	; LSB
.c78c	95 24		sta $24,x			sta DStack+0,x
.c78e	a9 00		lda #$00			lda #0
.c790	f5 25		sbc $25,x			sbc DStack+1,x	; MSB
.c792	95 25		sta $25,x			sta DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$c794					en = *	; remember here
>c782	10					.byte CL	;wh_CodeLength
.c794	60		rts				rts
>c795	41 62 73			L1:	.text "Abs"	;  name of word as a string, ending at wh_NameLastChar
>c798	63					.byte (("Abs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c799	ff c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c79b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c79c	08					.byte NN	;wh_Flags	dictionary flags
=50968					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c79d					Abs:
.c79d	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c79f	b0 05		bcs $c7a6		bcs Throw_Stack_17
.c7a1	b5 25		lda $25,x			lda DStack+1,x	; n negative?
.c7a3	30 e2		bmi $c787			bmi Negate3
=8					CL	.var *-(WordListLink+wh_Xt)
=$c7a5					en = *	; remember here
>c79b	08					.byte CL	;wh_CodeLength
.c7a5	60		rts				rts
.c7a6	4c 2c b5	jmp $b52c	Throw_Stack_17: jmp Throw_Stack
>c7a9	44 4e 65 67 61 74 65		L1:	.text "DNegate"	;  name of word as a string, ending at wh_NameLastChar
>c7b0	a7					.byte (("DNegate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7b1	18 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7b3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7b4	08					.byte NN	;wh_Flags	dictionary flags
=50992					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7b5					DNegate:
.c7b5	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c7b7	b0 ed		bcs $c7a6		bcs Throw_Stack_17
.c7b9	38		sec		DNegate3:	sec
.c7ba	a9 00		lda #$00			lda #0
.c7bc	f5 26		sbc $26,x			sbc DStack+2,x	; LSB of low cell
.c7be	95 26		sta $26,x			sta DStack+2,x
.c7c0	a9 00		lda #$00			lda #0
.c7c2	f5 27		sbc $27,x			sbc DStack+3,x	; MSB of low cell
.c7c4	95 27		sta $27,x			sta DStack+3,x
.c7c6	4c 88 c7	jmp $c788			jmp Negate4
=20					CL	.var *-(WordListLink+wh_Xt)
=$c7c9					en = *	; remember here
>c7b3	14					.byte CL	;wh_CodeLength
>c7c9	44 41 62 73			L1:	.text "DAbs"	;  name of word as a string, ending at wh_NameLastChar
>c7cd	64					.byte (("DAbs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7ce	30 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7d0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7d1	08					.byte NN	;wh_Flags	dictionary flags
=51021					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7d2					DAbs:
.c7d2	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c7d4	b0 d0		bcs $c7a6		bcs Throw_Stack_17
.c7d6	b5 25		lda $25,x			lda DStack+1,x	; d negative?
.c7d8	30 df		bmi $c7b9			bmi DNegate3
=8					CL	.var *-(WordListLink+wh_Xt)
=$c7da					en = *	; remember here
>c7d0	08					.byte CL	;wh_CodeLength
.c7da	60		rts				rts
>c7db	44 3c 3e			L1:	.text "D<>"	;  name of word as a string, ending at wh_NameLastChar
>c7de	c3					.byte (("D<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7df	4d c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7e2	08					.byte NN	;wh_Flags	dictionary flags
=51038					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7e3	20 f0 c7	jsr $c7f0	DNEq:		jsr DEqual
.c7e6	4c f3 c9	jmp $c9f3			jmp ZEqA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c7e9					en = *	; remember here
>c7e1	06					.byte CL	;wh_CodeLength
>c7e9	44 3d				L1:	.text "D="	;  name of word as a string, ending at wh_NameLastChar
>c7eb	a2					.byte (("D="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7ec	5e c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7ef	08					.byte NN	;wh_Flags	dictionary flags
=51051					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7f0	b5 2a		lda $2a,x	DEqual:		lda DStack+6,x
.c7f2	d5 26		cmp $26,x			cmp DStack+2,x
.c7f4	d0 50		bne $c846			bne False3
.c7f6	b5 2b		lda $2b,x			lda DStack+7,x
.c7f8	d5 27		cmp $27,x			cmp DStack+3,x
.c7fa	d0 4a		bne $c846			bne False3
.c7fc	b5 24		lda $24,x			lda DStack+0,x
.c7fe	d5 28		cmp $28,x			cmp DStack+4,x
.c800	d0 44		bne $c846			bne False3
.c802	b5 25		lda $25,x			lda DStack+1,x
.c804	d5 29		cmp $29,x			cmp DStack+5,x
.c806	d0 3e		bne $c846			bne False3
.c808	f0 62		beq $c86c			beq True3
=26					CL	.var *-(WordListLink+wh_Xt)
=$c80a					en = *	; remember here
>c7ee	1a					.byte CL	;wh_CodeLength
>c80a	44 55 3e			L1:	.text "DU>"	;  name of word as a string, ending at wh_NameLastChar
>c80d	c3					.byte (("DU>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c80e	6b c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c810	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c811	08					.byte NN	;wh_Flags	dictionary flags
=51085					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c812	20 ab c8	jsr $c8ab	DUGt:		jsr DGtSub
.c815	90 55		bcc $c86c			bcc True3
.c817	b0 2d		bcs $c846			bcs False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c819					en = *	; remember here
>c810	07					.byte CL	;wh_CodeLength
>c819	44 55 3c 3d			L1:	.text "DU<="	;  name of word as a string, ending at wh_NameLastChar
>c81d	a4					.byte (("DU<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c81e	8d c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c820	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c821	08					.byte NN	;wh_Flags	dictionary flags
=51101					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c822	20 ab c8	jsr $c8ab	DULe:		jsr DGtSub
.c825	b0 45		bcs $c86c			bcs True3
.c827	90 1d		bcc $c846			bcc False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c829					en = *	; remember here
>c820	07					.byte CL	;wh_CodeLength
>c829	44 55 3e 3d			L1:	.text "DU>="	;  name of word as a string, ending at wh_NameLastChar
>c82d	a4					.byte (("DU>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c82e	9d c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c830	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c831	08					.byte NN	;wh_Flags	dictionary flags
=51117					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c832	20 79 c8	jsr $c879	DUGe:		jsr DLessSub
.c835	b0 35		bcs $c86c			bcs True3
.c837	90 0d		bcc $c846			bcc False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c839					en = *	; remember here
>c830	07					.byte CL	;wh_CodeLength
>c839	44 55 3c			L1:	.text "DU<"	;  name of word as a string, ending at wh_NameLastChar
>c83c	83					.byte (("DU<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c83d	ad c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c83f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c840	08					.byte NN	;wh_Flags	dictionary flags
=51132					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c841	20 79 c8	jsr $c879	DULess:		jsr DLessSub
.c844	90 26		bcc $c86c			bcc True3
.c846	a9 00		lda #$00	False3:		lda #0
.c848	f0 24		beq $c86e			beq DReturn3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c84a					en = *	; remember here
>c83f	09					.byte CL	;wh_CodeLength
.c84a	4c 2c b5	jmp $b52c	Throw_Stack_09: jmp Throw_Stack
>c84d	44 3e 3d			L1:	.text "D>="	;  name of word as a string, ending at wh_NameLastChar
>c850	a3					.byte (("D>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c851	bc c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c853	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c854	08					.byte NN	;wh_Flags	dictionary flags
=51152					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c855	20 79 c8	jsr $c879	DGEq:		jsr DLessSub
.c858	70 10		bvs $c86a			bvs DLess3
.c85a	10 10		bpl $c86c	DGEq3:		bpl True3
.c85c	30 e8		bmi $c846			bmi False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c85e					en = *	; remember here
>c853	09					.byte CL	;wh_CodeLength
>c85e	44 3c				L1:	.text "D<"	;  name of word as a string, ending at wh_NameLastChar
>c860	82					.byte (("D<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c861	d0 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c863	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c864	08					.byte NN	;wh_Flags	dictionary flags
=51168					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c865	20 79 c8	jsr $c879	DLess:		jsr DLessSub
.c868	70 f0		bvs $c85a			bvs DGEq3
.c86a	10 da		bpl $c846	DLess3:		bpl False3
.c86c	a9 ff		lda #$ff	True3:		lda #$ff
.c86e					DReturn3:
.c86e	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c870	b0 d8		bcs $c84a		bcs Throw_Stack_09
.c872	95 2a		sta $2a,x			sta DStack+6,x
.c874	95 2b		sta $2b,x			sta DStack+7,x
.c876	4c 53 ae	jmp $ae53			jmp ThreeDrop
=20					CL	.var *-(WordListLink+wh_Xt)
=$c879					en = *	; remember here
>c863	14					.byte CL	;wh_CodeLength
.c879	b5 2a		lda $2a,x	DLessSub:	lda DStack+6,x
.c87b	d5 26		cmp $26,x			cmp DStack+2,x
.c87d	b5 2b		lda $2b,x			lda DStack+7,x
.c87f	f5 27		sbc $27,x			sbc DStack+3,x
.c881	b5 28		lda $28,x			lda DStack+4,x
.c883	f5 24		sbc $24,x			sbc DStack+0,x
.c885	b5 29		lda $29,x			lda DStack+5,x
.c887	f5 25		sbc $25,x			sbc DStack+1,x
.c889	60		rts				rts
>c88a	44 3c 3d			L1:	.text "D<="	;  name of word as a string, ending at wh_NameLastChar
>c88d	a3					.byte (("D<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c88e	e0 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c890	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c891	08					.byte NN	;wh_Flags	dictionary flags
=51213					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c892	20 ab c8	jsr $c8ab	DLe:		jsr DGtSub
.c895	70 10		bvs $c8a7			bvs DGt3
.c897	10 d3		bpl $c86c	DLe3:		bpl True3
.c899	30 ab		bmi $c846			bmi False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c89b					en = *	; remember here
>c890	09					.byte CL	;wh_CodeLength
>c89b	44 3e				L1:	.text "D>"	;  name of word as a string, ending at wh_NameLastChar
>c89d	c2					.byte (("D>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c89e	0d c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8a0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8a1	08					.byte NN	;wh_Flags	dictionary flags
=51229					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8a2	20 ab c8	jsr $c8ab	DGt:		jsr DGtSub
.c8a5	70 f0		bvs $c897			bvs DLe3
.c8a7	30 c3		bmi $c86c	DGt3:		bmi True3
.c8a9	10 9b		bpl $c846			bpl False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c8ab					en = *	; remember here
>c8a0	09					.byte CL	;wh_CodeLength
.c8ab	b5 26		lda $26,x	DGtSub:		lda DStack+2,x
.c8ad	d5 2a		cmp $2a,x			cmp DStack+6,x
.c8af	b5 27		lda $27,x			lda DStack+3,x
.c8b1	f5 2b		sbc $2b,x			sbc DStack+7,x
.c8b3	b5 24		lda $24,x			lda DStack+0,x
.c8b5	f5 28		sbc $28,x			sbc DStack+4,x
.c8b7	b5 25		lda $25,x			lda DStack+1,x
.c8b9	f5 29		sbc $29,x			sbc DStack+5,x
.c8bb	60		rts				rts
>c8bc	44 30 3c 3d			L1:	.text "D0<="	;  name of word as a string, ending at wh_NameLastChar
>c8c0	a4					.byte (("D0<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8c1	1d c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8c4	08					.byte NN	;wh_Flags	dictionary flags
=51264					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8c5	b5 25		lda $25,x	D0Le:		lda DStack+1,x	; test sign
.c8c7	30 6b		bmi $c934			bmi True1
.c8c9	10 27		bpl $c8f2			bpl D0Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c8cb					en = *	; remember here
>c8c3	06					.byte CL	;wh_CodeLength
>c8cb	44 30 3e			L1:	.text "D0>"	;  name of word as a string, ending at wh_NameLastChar
>c8ce	c3					.byte (("D0>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8cf	40 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8d2	08					.byte NN	;wh_Flags	dictionary flags
=51278					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8d3	b5 25		lda $25,x	D0Gt:		lda DStack+1,x	; test sign
.c8d5	10 0c		bpl $c8e3			bpl D0Ne
.c8d7	4c 54 c9	jmp $c954			jmp False1
>c8da	44 30 3c 3e			L1:	.text "D0<>"	;  name of word as a string, ending at wh_NameLastChar
>c8de	c4					.byte (("D0<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8df	4e c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8e2	08					.byte NN	;wh_Flags	dictionary flags
=51294					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8e3	20 f9 c8	jsr $c8f9	D0Ne:		jsr D0EqSub
.c8e6	d0 4c		bne $c934			bne True1
.c8e8	f0 6a		beq $c954			beq False1
=7					CL	.var *-(WordListLink+wh_Xt)
=$c8ea					en = *	; remember here
>c8e1	07					.byte CL	;wh_CodeLength
>c8ea	44 30 3d			L1:	.text "D0="	;  name of word as a string, ending at wh_NameLastChar
>c8ed	a3					.byte (("D0="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8ee	5e c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8f1	08					.byte NN	;wh_Flags	dictionary flags
=51309					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8f2	20 f9 c8	jsr $c8f9	D0Equal:	jsr D0EqSub
.c8f5	d0 5d		bne $c954			bne False1
.c8f7	f0 3b		beq $c934			beq True1
=7					CL	.var *-(WordListLink+wh_Xt)
=$c8f9					en = *	; remember here
>c8f0	07					.byte CL	;wh_CodeLength
.c8f9	b5 26		lda $26,x	D0EqSub:	lda DStack+2,x
.c8fb	15 27		ora $27,x			ora DStack+3,x
.c8fd	15 24		ora $24,x			ora DStack+0,x
.c8ff	15 25		ora $25,x			ora DStack+1,x
.c901	60		rts				rts
>c902	44 30 3c			L1:	.text "D0<"	;  name of word as a string, ending at wh_NameLastChar
>c905	83					.byte (("D0<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c906	6d c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c908	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c909	08					.byte NN	;wh_Flags	dictionary flags
=51333					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c90a	b5 25		lda $25,x	D0Less:		lda DStack+1,x	; test sign
.c90c	30 26		bmi $c934			bmi True1
.c90e	10 44		bpl $c954			bpl False1
=6					CL	.var *-(WordListLink+wh_Xt)
=$c910					en = *	; remember here
>c908	06					.byte CL	;wh_CodeLength
>c910	44 30 3e 3d			L1:	.text "D0>="	;  name of word as a string, ending at wh_NameLastChar
>c914	a4					.byte (("D0>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c915	85 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c917	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c918	08					.byte NN	;wh_Flags	dictionary flags
=51348					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c919	b5 25		lda $25,x	D0Ge:		lda DStack+1,x	; test sign
.c91b	10 17		bpl $c934			bpl True1
.c91d	30 35		bmi $c954			bmi False1
=6					CL	.var *-(WordListLink+wh_Xt)
=$c91f					en = *	; remember here
>c917	06					.byte CL	;wh_CodeLength
.c91f	4c 2c b5	jmp $b52c	Throw_Stack_08: jmp Throw_Stack
>c922	3d				L1:	.text "="	;  name of word as a string, ending at wh_NameLastChar
>c923	a1					.byte (("="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c924	94 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c926	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c927	08					.byte NN	;wh_Flags	dictionary flags
=51363					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c928	b5 24		lda $24,x	Equal:		lda DStack+0,x		; LSB
.c92a	d5 26		cmp $26,x			cmp DStack+2,x
.c92c	d0 26		bne $c954			bne False1
.c92e	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c930	d5 27		cmp $27,x			cmp DStack+3,x
.c932	d0 20		bne $c954			bne False1
.c934	a9 ff		lda #$ff	True1:		lda #$ff	; return TRUE
.c936					Return1:
.c936	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c938	b0 e5		bcs $c91f		bcs Throw_Stack_08
.c93a	e8		inx				inx		; Drop
.c93b	e8		inx				inx
.c93c	95 24		sta $24,x			sta DStack+0,x	; store f
.c93e	95 25		sta $25,x			sta DStack+1,x
.c940	60		rts				rts
=25					CL	.var *-(WordListLink+wh_Xt)
=$c941					en = *	; remember here
>c926	19					.byte CL	;wh_CodeLength
>c941	3c 3e				L1:	.text "<>"	;  name of word as a string, ending at wh_NameLastChar
>c943	c2					.byte (("<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c944	a3 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c946	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c947	08					.byte NN	;wh_Flags	dictionary flags
=51395					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c948	b5 24		lda $24,x	Not_Equals:	lda DStack+0,x		; LSB
.c94a	d5 26		cmp $26,x			cmp DStack+2,x
.c94c	d0 e6		bne $c934			bne True1
.c94e	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c950	d5 27		cmp $27,x			cmp DStack+3,x
.c952	d0 e0		bne $c934			bne True1
.c954	a9 00		lda #$00	False1:		lda #0		; return FALSE
.c956	f0 de		beq $c936			beq Return1
=16					CL	.var *-(WordListLink+wh_Xt)
=$c958					en = *	; remember here
>c946	10					.byte CL	;wh_CodeLength
>c958	3c				L1:	.text "<"	;  name of word as a string, ending at wh_NameLastChar
>c959	81					.byte (("<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c95a	c3 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c95c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c95d	08					.byte NN	;wh_Flags	dictionary flags
=51417					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c95e	b5 26		lda $26,x	Less_Than:	lda DStack+2,x	; compare
.c960	d5 24		cmp $24,x			cmp DStack+0,x
.c962	b5 27		lda $27,x			lda DStack+3,x
.c964	f5 25		sbc $25,x			sbc DStack+1,x
.c966	50 02		bvc $c96a			bvc _c
.c968	49 80		eor #$80			eor #$80	; fix sign
.c96a	10 e8		bpl $c954	_c:		bpl False1
.c96c	30 c6		bmi $c934			bmi True1
=16					CL	.var *-(WordListLink+wh_Xt)
=$c96e					en = *	; remember here
>c95c	10					.byte CL	;wh_CodeLength
>c96e	3e 3d				L1:	.text ">="	;  name of word as a string, ending at wh_NameLastChar
>c970	a2					.byte ((">="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c971	d9 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c973	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c974	08					.byte NN	;wh_Flags	dictionary flags
=51440					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c975	20 5e c9	jsr $c95e	Ge:		jsr Less_Than
.c978	4c f3 c9	jmp $c9f3			jmp ZEqA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c97b					en = *	; remember here
>c973	06					.byte CL	;wh_CodeLength
>c97b	55 3c				L1:	.text "U<"	;  name of word as a string, ending at wh_NameLastChar
>c97d	82					.byte (("U<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c97e	f0 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c980	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c981	08					.byte NN	;wh_Flags	dictionary flags
=51453					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c982	b5 26		lda $26,x	U_Less_Than:	lda DStack+2,x
.c984	d5 24		cmp $24,x			cmp DStack+0,x
.c986	b5 27		lda $27,x			lda DStack+3,x
.c988	f5 25		sbc $25,x			sbc DStack+1,x
.c98a	b0 c8		bcs $c954			bcs False1
.c98c	90 a6		bcc $c934			bcc True1
=12					CL	.var *-(WordListLink+wh_Xt)
=$c98e					en = *	; remember here
>c980	0c					.byte CL	;wh_CodeLength
>c98e	55 3e				L1:	.text "U>"	;  name of word as a string, ending at wh_NameLastChar
>c990	c2					.byte (("U>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c991	fd c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c993	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c994	08					.byte NN	;wh_Flags	dictionary flags
=51472					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c995	b5 24		lda $24,x	U_Greater_Than:	lda DStack+0,x
.c997	d5 26		cmp $26,x			cmp DStack+2,x
.c999	b5 25		lda $25,x			lda DStack+1,x
.c99b	f5 27		sbc $27,x			sbc DStack+3,x
.c99d	b0 b5		bcs $c954			bcs False1
.c99f	90 93		bcc $c934			bcc True1
=12					CL	.var *-(WordListLink+wh_Xt)
=$c9a1					en = *	; remember here
>c993	0c					.byte CL	;wh_CodeLength
>c9a1	3e				L1:	.text ">"	;  name of word as a string, ending at wh_NameLastChar
>c9a2	c1					.byte ((">"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9a3	10 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9a5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9a6	08					.byte NN	;wh_Flags	dictionary flags
=51490					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9a7	b5 24		lda $24,x	Greater_Than:	lda DStack+0,x	; compare
.c9a9	d5 26		cmp $26,x			cmp DStack+2,x
.c9ab	b5 25		lda $25,x			lda DStack+1,x
.c9ad	f5 27		sbc $27,x			sbc DStack+3,x
.c9af	50 02		bvc $c9b3			bvc _c
.c9b1	49 80		eor #$80			eor #$80	; fix sign
.c9b3	10 9f		bpl $c954	_c:		bpl False1
.c9b5	4c 34 c9	jmp $c934			jmp True1
=17					CL	.var *-(WordListLink+wh_Xt)
=$c9b8					en = *	; remember here
>c9a5	11					.byte CL	;wh_CodeLength
>c9b8	3c 3d				L1:	.text "<="	;  name of word as a string, ending at wh_NameLastChar
>c9ba	a2					.byte (("<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9bb	22 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9bd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9be	08					.byte NN	;wh_Flags	dictionary flags
=51514					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9bf	20 a7 c9	jsr $c9a7	Le:		jsr Greater_Than
.c9c2	4c f3 c9	jmp $c9f3			jmp ZEqA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c9c5					en = *	; remember here
>c9bd	06					.byte CL	;wh_CodeLength
>c9c5	55 3e 3d			L1:	.text "U>="	;  name of word as a string, ending at wh_NameLastChar
>c9c8	a3					.byte (("U>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9c9	3a c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9cb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9cc	08					.byte NN	;wh_Flags	dictionary flags
=51528					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9cd	20 82 c9	jsr $c982	UGe:		jsr U_Less_Than
.c9d0	4c f3 c9	jmp $c9f3			jmp ZEqA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c9d3					en = *	; remember here
>c9cb	06					.byte CL	;wh_CodeLength
>c9d3	55 3c 3d			L1:	.text "U<="	;  name of word as a string, ending at wh_NameLastChar
>c9d6	a3					.byte (("U<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9d7	48 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9d9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9da	08					.byte NN	;wh_Flags	dictionary flags
=51542					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9db	20 95 c9	jsr $c995	ULe:		jsr U_Greater_Than
.c9de	4c f3 c9	jmp $c9f3			jmp ZEqA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c9e1					en = *	; remember here
>c9d9	06					.byte CL	;wh_CodeLength
.c9e1	4c 2c b5	jmp $b52c	Throw_Stack_11: jmp Throw_Stack
>c9e4	30 3d				L1:	.text "0="	;  name of word as a string, ending at wh_NameLastChar
>c9e6	a2					.byte (("0="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9e7	56 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9e9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9ea	08					.byte NN	;wh_Flags	dictionary flags
=51558					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9eb	b5 25		lda $25,x	Zero_Equal:	lda DStack+1,x
.c9ed	15 24		ora $24,x	ZEq3:		ora DStack+0,x
.c9ef	d0 2d		bne $ca1e			bne False0
.c9f1	f0 15		beq $ca08			beq True0
=8					CL	.var *-(WordListLink+wh_Xt)
=$c9f3					en = *	; remember here
>c9e9	08					.byte CL	;wh_CodeLength
.c9f3					ZEqA:
.c9f3	49 ff		eor #$ff			eor #$ff
.c9f5	95 24		sta $24,x			sta DStack+0,x
.c9f7	95 25		sta $25,x			sta DStack+1,x
.c9f9	60		rts				rts
>c9fa	30 3c 3e			L1:	.text "0<>"	;  name of word as a string, ending at wh_NameLastChar
>c9fd	c3					.byte (("0<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9fe	66 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca00	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca01	08					.byte NN	;wh_Flags	dictionary flags
=51581					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca02	b5 25		lda $25,x	Zero_Unequal:	lda DStack+1,x
.ca04	15 24		ora $24,x	ZNe3:		ora DStack+0,x
.ca06	f0 16		beq $ca1e			beq False0
.ca08	a9 ff		lda #$ff	True0:		lda #$ff	; return TRUE
.ca0a	95 24		sta $24,x	Return0:	sta DStack+0,x
.ca0c	95 25		sta $25,x			sta DStack+1,x
.ca0e	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.ca10	b0 39		bcs $ca4b		bcs Throw_Stack_05
.ca12	60		rts				rts
=17					CL	.var *-(WordListLink+wh_Xt)
=$ca13					en = *	; remember here
>ca00	11					.byte CL	;wh_CodeLength
>ca13	30 3e				L1:	.text "0>"	;  name of word as a string, ending at wh_NameLastChar
>ca15	c2					.byte (("0>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca16	7d c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca18	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca19	08					.byte NN	;wh_Flags	dictionary flags
=51605					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca1a	b5 25		lda $25,x	Zero_Greater:	lda DStack+1,x	; MSB
.ca1c	10 e6		bpl $ca04			bpl ZNe3	; >= 0 ?
.ca1e	a9 00		lda #$00	False0:		lda #0		; return FALSE
.ca20	f0 e8		beq $ca0a			beq Return0
=8					CL	.var *-(WordListLink+wh_Xt)
=$ca22					en = *	; remember here
>ca18	08					.byte CL	;wh_CodeLength
>ca22	30 3c 3d			L1:	.text "0<="	;  name of word as a string, ending at wh_NameLastChar
>ca25	a3					.byte (("0<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca26	95 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca28	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca29	08					.byte NN	;wh_Flags	dictionary flags
=51621					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca2a	b5 25		lda $25,x	ZLe:		lda DStack+1,x	; < 0 ?
.ca2c	30 da		bmi $ca08			bmi True0
.ca2e	10 bd		bpl $c9ed			bpl ZEq3
=6					CL	.var *-(WordListLink+wh_Xt)
=$ca30					en = *	; remember here
>ca28	06					.byte CL	;wh_CodeLength
>ca30	30 3e 3d			L1:	.text "0>="	;  name of word as a string, ending at wh_NameLastChar
>ca33	a3					.byte (("0>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca34	a5 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca36	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca37	08					.byte NN	;wh_Flags	dictionary flags
=51635					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca38	b5 25		lda $25,x	ZGe:		lda DStack+1,x
.ca3a	10 cc		bpl $ca08			bpl True0
.ca3c	30 e0		bmi $ca1e			bmi False0
=6					CL	.var *-(WordListLink+wh_Xt)
=$ca3e					en = *	; remember here
>ca36	06					.byte CL	;wh_CodeLength
>ca3e	30 3c				L1:	.text "0<"	;  name of word as a string, ending at wh_NameLastChar
>ca40	82					.byte (("0<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca41	b3 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca43	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca44	08					.byte NN	;wh_Flags	dictionary flags
=51648					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca45	b5 25		lda $25,x	Zero_Less:	lda DStack+1,x	; MSB
.ca47	10 d5		bpl $ca1e			bpl False0
.ca49	30 bd		bmi $ca08			bmi True0
=6					CL	.var *-(WordListLink+wh_Xt)
=$ca4b					en = *	; remember here
>ca43	06					.byte CL	;wh_CodeLength
.ca4b	4c 2c b5	jmp $b52c	Throw_Stack_05: jmp Throw_Stack
>ca4e	4d 69 6e			L1:	.text "Min"	;  name of word as a string, ending at wh_NameLastChar
>ca51	c3					.byte (("Min"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca52	c0 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca54	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca55	18					.byte UF+NN	;wh_Flags	dictionary flags
=51665					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca56					Min:
.ca56	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ca58	b0 f1		bcs $ca4b		bcs Throw_Stack_05
.ca5a	b5 24		lda $24,x			lda DStack+0,x	; compare n1 & n2; sets V & N but not Z
.ca5c	d5 26		cmp $26,x			cmp DStack+2,x
.ca5e	b5 25		lda $25,x			lda DStack+1,x
.ca60	f5 27		sbc $27,x			sbc DStack+3,x
.ca62	70 1b		bvs $ca7f			bvs Max_3	; if overflow, the sign is backwards
.ca64	30 29		bmi $ca8f	Min_3:		bmi Nip_NoUf	; if negative, NOS is larger and needs to be dumped
.ca66	e8		inx				inx		; Drop n2
.ca67	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$ca68					en = *	; remember here
>ca54	12					.byte CL	;wh_CodeLength
.ca68	60		rts				rts
>ca69	4d 61 78			L1:	.text "Max"	;  name of word as a string, ending at wh_NameLastChar
>ca6c	03					.byte (("Max"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca6d	d1 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca6f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca70	08					.byte NN	;wh_Flags	dictionary flags
=51692					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca71					Max:
.ca71	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ca73	b0 d6		bcs $ca4b		bcs Throw_Stack_05
.ca75	b5 24		lda $24,x			lda DStack+0,x	; Compare n1 & n2; sets V & N but not Z
.ca77	d5 26		cmp $26,x			cmp DStack+2,x
.ca79	b5 25		lda $25,x			lda DStack+1,x
.ca7b	f5 27		sbc $27,x			sbc DStack+3,x
.ca7d	70 e5		bvs $ca64			bvs Min_3	; if overflow, the sign is backwards
.ca7f	10 0e		bpl $ca8f	Max_3:		bpl Nip_NoUf	; if negative, NOS is larger and needs to be kept
.ca81	e8		inx				inx		; Drop n2
.ca82	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$ca83					en = *	; remember here
>ca6f	12					.byte CL	;wh_CodeLength
.ca83	60		rts				rts
>ca84	4e 69 70			L1:	.text "Nip"	;  name of word as a string, ending at wh_NameLastChar
>ca87	03					.byte (("Nip"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca88	ec c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca8a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca8b	10					.byte UF	;wh_Flags	dictionary flags
=51719					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca8c					Nip:
.ca8c	20 1d b5	jsr $b51d			jsr underflow_2
.ca8f	b5 24		lda $24,x	Nip_NoUf:	lda DStack+0,x	; PopYA
.ca91	b4 25		ldy $25,x			ldy DStack+1,x
.ca93	e8		inx				inx
.ca94	e8		inx				inx
.ca95	95 24		sta $24,x			sta DStack+0,x	; store over n1
.ca97	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$ca99					en = *	; remember here
>ca8a	0d					.byte CL	;wh_CodeLength
.ca99	60		rts				rts
>ca9a	50 69 63 6b			L1:	.text "Pick"	;  name of word as a string, ending at wh_NameLastChar
>ca9e	64					.byte (("Pick"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca9f	07 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>caa1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>caa2	00					.byte 0	;wh_Flags	dictionary flags
=51742					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.caa3					Pick:
.caa3	16 24		asl $24,x			asl DStack+0,x	; we assume u < 128 (stack is small)
.caa5	8a		txa				txa
.caa6	75 24		adc $24,x			adc DStack+0,x
.caa8	a8		tay				tay
.caa9	b9 26 00	lda $0026,y			lda DStack+2,y
.caac	95 24		sta $24,x			sta DStack+0,x
.caae	b9 27 00	lda $0027,y			lda DStack+3,y
.cab1	95 25		sta $25,x			sta DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$cab3					en = *	; remember here
>caa1	10					.byte CL	;wh_CodeLength
.cab3	60		rts				rts
>cab4	43 68 61 72			L1:	.text "Char"	;  name of word as a string, ending at wh_NameLastChar
>cab8	44					.byte (("Char"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cab9	1e ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cabb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cabc	08					.byte NN	;wh_Flags	dictionary flags
=51768					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cabd					Char:
.cabd	20 cb bb	jsr $bbcb			jsr parse_name_check
.cac0	e8		inx				inx		; Drop number of characters, leave addr
.cac1	e8		inx				inx
.cac2	4c 76 ce	jmp $ce76			jmp C_Fetch	; get character ( C@ )
=8					CL	.var *-(WordListLink+wh_Xt)
=$cac5					en = *	; remember here
>cabb	08					.byte CL	;wh_CodeLength
>cac5	5b 43 68 61 72 5d		L1:	.text "[Char]"	;  name of word as a string, ending at wh_NameLastChar
>cacb	a6					.byte (("[Char]"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cacc	38 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cace	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cacf	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=51787					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cad0	20 bd ca	jsr $cabd	Bracket_Char:	jsr Char
.cad3	4c 6c b8	jmp $b86c			jmp Literal
=6					CL	.var *-(WordListLink+wh_Xt)
=$cad6					en = *	; remember here
>cace	06					.byte CL	;wh_CodeLength
>cad6	43 68 61 72 2b			L1:	.text "Char+"	;  name of word as a string, ending at wh_NameLastChar
>cadb	65					.byte (("Char+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cadc	4b ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cade	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cadf	08					.byte NN	;wh_Flags	dictionary flags
=51803					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cae0	4c 60 cb	jmp $cb60	Char_Plus:	jmp One_Plus
=3					CL	.var *-(WordListLink+wh_Xt)
=$cae3					en = *	; remember here
>cade	03					.byte CL	;wh_CodeLength
>cae3	43 68 61 72 73			L1:	.text "Chars"	;  name of word as a string, ending at wh_NameLastChar
>cae8	65					.byte (("Chars"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cae9	5b ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>caeb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>caec	02					.byte AN	;wh_Flags	dictionary flags
=51816					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.caed					Chars:
=0					CL	.var *-(WordListLink+wh_Xt)
=$caed					en = *	; remember here
>caeb	00					.byte CL	;wh_CodeLength
.caed	60		rts				rts
>caee	43 65 6c 6c 73			L1:	.text "Cells"	;  name of word as a string, ending at wh_NameLastChar
>caf3	65					.byte (("Cells"[-1]&7)<<5)+(*-L1)	;wh_HNL
>caf4	68 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>caf6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>caf7	10					.byte UF	;wh_Flags	dictionary flags
=51827					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.caf8	20 08 b5	jsr $b508	Cells:		jsr underflow_1
.cafb	16 24		asl $24,x			asl DStack+0,x		; 2*
.cafd	36 25		rol $25,x			rol DStack+1,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$caff					en = *	; remember here
>caf6	07					.byte CL	;wh_CodeLength
.caff	60		rts				rts
>cb00	43 65 6c 6c 2b			L1:	.text "Cell+"	;  name of word as a string, ending at wh_NameLastChar
>cb05	65					.byte (("Cell+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb06	73 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb08	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb09	10					.byte UF	;wh_Flags	dictionary flags
=51845					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb0a	20 08 b5	jsr $b508	Cell_Plus:	jsr underflow_1
.cb0d	a9 02		lda #$02	Cell_Plus_NoUf:	lda #2		; our cells are 2 bytes
.cb0f					Plus_A:
.cb0f	18		clc				clc
.cb10	75 24		adc $24,x			adc DStack+0,x
.cb12	95 24		sta $24,x			sta DStack+0,x
.cb14	90 02		bcc $cb18			bcc +
.cb16	f6 25		inc $25,x			inc DStack+1,x
.cb18					+
=14					CL	.var *-(WordListLink+wh_Xt)
=$cb18					en = *	; remember here
>cb08	0e					.byte CL	;wh_CodeLength
.cb18	60		rts				rts
.cb19					Nos_Plus_A:
.cb19	18		clc				clc
.cb1a	75 26		adc $26,x			adc DStack+2,x
.cb1c	95 26		sta $26,x			sta DStack+2,x
.cb1e	90 02		bcc $cb22			bcc +
.cb20	f6 27		inc $27,x			inc DStack+3,x
.cb22	60		rts		+		rts
>cb23	48 65 72 65			L1:	.text "Here"	;  name of word as a string, ending at wh_NameLastChar
>cb27	a4					.byte (("Here"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb28	85 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb2a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb2b	08					.byte NN	;wh_Flags	dictionary flags
=51879					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb2c	a5 00		lda $00		Here:		lda cp+0
.cb2e	a4 01		ldy $01				ldy cp+1
.cb30	4c b9 b8	jmp $b8b9			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$cb33					en = *	; remember here
>cb2a	07					.byte CL	;wh_CodeLength
>cb33	31 2d				L1:	.text "1-"	;  name of word as a string, ending at wh_NameLastChar
>cb35	a2					.byte (("1-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb36	a7 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb38	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb39	10					.byte UF	;wh_Flags	dictionary flags
=51893					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb3a	20 08 b5	jsr $b508	One_Minus:	jsr underflow_1
.cb3d					One_Minus_NoUf:
.cb3d	b5 24		lda $24,x			lda DStack+0,x
.cb3f	d0 02		bne $cb43			bne +
.cb41	d6 25		dec $25,x			dec DStack+1,x
.cb43	d6 24		dec $24,x	+		dec DStack+0,x
=11					CL	.var *-(WordListLink+wh_Xt)
=$cb45					en = *	; remember here
>cb38	0b					.byte CL	;wh_CodeLength
.cb45	60		rts				rts
.cb46					NOS_One_Minus:
.cb46	b5 26		lda $26,x			lda DStack+2,x
.cb48	d0 02		bne $cb4c			bne +
.cb4a	d6 27		dec $27,x			dec DStack+3,x
.cb4c	d6 26		dec $26,x	+		dec DStack+2,x
.cb4e	60		rts				rts
.cb4f					Minus_A:
.cb4f	18		clc				clc
.cb50	75 24		adc $24,x			adc DStack+0,x
.cb52	95 24		sta $24,x			sta DStack+0,x
.cb54	b0 02		bcs $cb58			bcs +
.cb56	d6 25		dec $25,x			dec DStack+1,x
.cb58	60		rts		+		rts
>cb59	31 2b				L1:	.text "1+"	;  name of word as a string, ending at wh_NameLastChar
>cb5b	62					.byte (("1+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb5c	b5 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb5e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb5f	10					.byte UF	;wh_Flags	dictionary flags
=51931					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb60	20 08 b5	jsr $b508	One_Plus:	jsr underflow_1
.cb63	f6 24		inc $24,x			inc DStack+0,x
.cb65	d0 02		bne $cb69			bne +
.cb67	f6 25		inc $25,x			inc DStack+1,x
.cb69					+
=9					CL	.var *-(WordListLink+wh_Xt)
=$cb69					en = *	; remember here
>cb5e	09					.byte CL	;wh_CodeLength
.cb69	60		rts				rts
.cb6a					NOS_One_Plus:
.cb6a	f6 26		inc $26,x			inc DStack+2,x
.cb6c	d0 02		bne $cb70			bne +
.cb6e	f6 27		inc $27,x			inc DStack+3,x
.cb70	60		rts		+		rts
>cb71	55 4d 2b			L1:	.text "UM+"	;  name of word as a string, ending at wh_NameLastChar
>cb74	63					.byte (("UM+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb75	db ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb77	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb78	00					.byte 0	;wh_Flags	dictionary flags
=51956					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb79	20 de b4	jsr $b4de	UMPlus:		jsr PopYA
.cb7c	18		clc				clc		; add n to d1.lo
.cb7d	75 26		adc $26,x			adc DStack+2,x
.cb7f	95 26		sta $26,x			sta DStack+2,x
.cb81	98		tya				tya
.cb82	75 27		adc $27,x			adc DStack+3,x
.cb84	95 27		sta $27,x			sta DStack+3,x
.cb86	90 06		bcc $cb8e			bcc +		; propagate carry thru d1.hi
.cb88	f6 24		inc $24,x			inc DStack+0,x
.cb8a	d0 02		bne $cb8e			bne +
.cb8c	f6 25		inc $25,x			inc DStack+1,x
.cb8e					+
=21					CL	.var *-(WordListLink+wh_Xt)
=$cb8e					en = *	; remember here
>cb77	15					.byte CL	;wh_CodeLength
.cb8e	60		rts				rts
>cb8f	4d 2b				L1:	.text "M+"	;  name of word as a string, ending at wh_NameLastChar
>cb91	62					.byte (("M+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb92	f4 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb94	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb95	08					.byte NN	;wh_Flags	dictionary flags
=51985					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb96	20 79 cb	jsr $cb79	MPlus:		jsr UMPlus
.cb99	98		tya				tya		; if n negative
.cb9a	30 a1		bmi $cb3d			bmi One_Minus_NoUf ;   decrement d1.hi
=6					CL	.var *-(WordListLink+wh_Xt)
=$cb9c					en = *	; remember here
>cb94	06					.byte CL	;wh_CodeLength
.cb9c	60		rts				rts
>cb9d	44 32 2a			L1:	.text "D2*"	;  name of word as a string, ending at wh_NameLastChar
>cba0	43					.byte (("D2*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cba1	11 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cba3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cba4	10					.byte UF	;wh_Flags	dictionary flags
=52000					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cba5	20 1d b5	jsr $b51d	D2Star:		jsr underflow_2
.cba8	16 26		asl $26,x			asl DStack+2,x
.cbaa	36 27		rol $27,x			rol DStack+3,x
.cbac	36 24		rol $24,x			rol DStack+0,x
.cbae	36 25		rol $25,x			rol DStack+1,x
=11					CL	.var *-(WordListLink+wh_Xt)
=$cbb0					en = *	; remember here
>cba3	0b					.byte CL	;wh_CodeLength
.cbb0	60		rts				rts
>cbb1	44 32 2f			L1:	.text "D2/"	;  name of word as a string, ending at wh_NameLastChar
>cbb4	e3					.byte (("D2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbb5	20 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbb7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbb8	10					.byte UF	;wh_Flags	dictionary flags
=52020					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbb9	20 1d b5	jsr $b51d	D2Slash:	jsr underflow_2
.cbbc	b5 25		lda $25,x			lda DStack+1,x		; setup for sign-extended shift right
.cbbe	0a		asl a				asl a
.cbbf	76 25		ror $25,x	D2SlashU:	ror DStack+1,x
.cbc1	76 24		ror $24,x			ror DStack+0,x
.cbc3	76 27		ror $27,x			ror DStack+3,x
.cbc5	76 26		ror $26,x			ror DStack+2,x
=14					CL	.var *-(WordListLink+wh_Xt)
=$cbc7					en = *	; remember here
>cbb7	0e					.byte CL	;wh_CodeLength
.cbc7	60		rts				rts
>cbc8	55 44 32 2f			L1:	.text "UD2/"	;  name of word as a string, ending at wh_NameLastChar
>cbcc	e4					.byte (("UD2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbcd	34 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbcf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbd0	18					.byte UF+NN	;wh_Flags	dictionary flags
=52044					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbd1	20 1d b5	jsr $b51d	DU2Slash:	jsr underflow_2
.cbd4	18		clc				clc
.cbd5	90 e8		bcc $cbbf			bcc D2SlashU
=6					CL	.var *-(WordListLink+wh_Xt)
=$cbd7					en = *	; remember here
>cbcf	06					.byte CL	;wh_CodeLength
>cbd7	32 2a				L1:	.text "2*"	;  name of word as a string, ending at wh_NameLastChar
>cbd9	42					.byte (("2*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbda	4c cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbdc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbdd	10					.byte UF	;wh_Flags	dictionary flags
=52057					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbde					Two_Star:
.cbde	20 08 b5	jsr $b508			jsr underflow_1
.cbe1	16 24		asl $24,x			asl DStack+0,x
.cbe3	36 25		rol $25,x			rol DStack+1,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$cbe5					en = *	; remember here
>cbdc	07					.byte CL	;wh_CodeLength
.cbe5	60		rts				rts
>cbe6	32 2f				L1:	.text "2/"	;  name of word as a string, ending at wh_NameLastChar
>cbe8	e2					.byte (("2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbe9	59 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbeb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbec	10					.byte UF	;wh_Flags	dictionary flags
=52072					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbed					Two_Slash:
.cbed	20 08 b5	jsr $b508			jsr underflow_1
.cbf0	b5 25		lda $25,x			lda DStack+1,x		; load sign into carry, for signed shift
.cbf2	0a		asl a				asl
.cbf3	76 25		ror $25,x			ror DStack+1,x
.cbf5	76 24		ror $24,x			ror DStack+0,x
=10					CL	.var *-(WordListLink+wh_Xt)
=$cbf7					en = *	; remember here
>cbeb	0a					.byte CL	;wh_CodeLength
.cbf7	60		rts				rts
>cbf8	55 32 2f			L1:	.text "U2/"	;  name of word as a string, ending at wh_NameLastChar
>cbfb	e3					.byte (("U2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbfc	68 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbfe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbff	10					.byte UF	;wh_Flags	dictionary flags
=52091					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc00					UTwo_Slash:
.cc00	20 08 b5	jsr $b508			jsr underflow_1
.cc03	56 25		lsr $25,x			lsr DStack+1,x
.cc05	76 24		ror $24,x			ror DStack+0,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$cc07					en = *	; remember here
>cbfe	07					.byte CL	;wh_CodeLength
.cc07	60		rts				rts
>cc08	44 52 53 68 69 66 74		L1:	.text "DRShift"	;  name of word as a string, ending at wh_NameLastChar
>cc0f	87					.byte (("DRShift"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc10	7b cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc12	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc13	00					.byte 0	;wh_Flags	dictionary flags
=52111					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc14	20 c2 b4	jsr $b4c2	DRShift:	jsr PopA	; pop u
.cc17	a8		tay		DRShiftA:	tay
.cc18	f0 0e		beq $cc28			beq _9
.cc1a	b5 25		lda $25,x			lda DStack+1,x
.cc1c	4a		lsr a		_2:		lsr a
.cc1d	76 24		ror $24,x			ror DStack+0,x
.cc1f	76 27		ror $27,x			ror DStack+3,x
.cc21	76 26		ror $26,x			ror DStack+2,x
.cc23	88		dey				dey
.cc24	d0 f6		bne $cc1c			bne _2
.cc26	95 25		sta $25,x			sta DStack+1,x
.cc28					_9:
=20					CL	.var *-(WordListLink+wh_Xt)
=$cc28					en = *	; remember here
>cc12	14					.byte CL	;wh_CodeLength
.cc28	60		rts				rts
>cc29	52 53 68 69 66 74		L1:	.text "RShift"	;  name of word as a string, ending at wh_NameLastChar
>cc2f	86					.byte (("RShift"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc30	8f cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc32	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc33	00					.byte 0	;wh_Flags	dictionary flags
=52143					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc34	20 cb b4	jsr $b4cb	RShift:		jsr PopA2	; pop u, check for 2 params
.cc37	a8		tay		RShift_A:	tay		; get shift count
.cc38	f0 0a		beq $cc44			beq _done
.cc3a	b5 25		lda $25,x			lda DStack+1,x
.cc3c	4a		lsr a		_loop:		lsr a
.cc3d	76 24		ror $24,x			ror DStack+0,x
.cc3f	88		dey				dey
.cc40	d0 fa		bne $cc3c			bne _loop
.cc42	95 25		sta $25,x			sta DStack+1,x
.cc44					_done:
=16					CL	.var *-(WordListLink+wh_Xt)
=$cc44					en = *	; remember here
>cc32	10					.byte CL	;wh_CodeLength
.cc44	60		rts				rts
>cc45	4c 53 68 69 66 74		L1:	.text "LShift"	;  name of word as a string, ending at wh_NameLastChar
>cc4b	86					.byte (("LShift"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc4c	af cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc4e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc4f	00					.byte 0	;wh_Flags	dictionary flags
=52171					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc50	20 cb b4	jsr $b4cb	LShift:		jsr PopA2	; pop u, check for 2 params
.cc53	a8		tay		LShift_A:	tay		; get shift count
.cc54	f0 0a		beq $cc60			beq _done
.cc56	b5 25		lda $25,x			lda DStack+1,x
.cc58	16 24		asl $24,x	_loop:		asl DStack+0,x
.cc5a	2a		rol a				rol a
.cc5b	88		dey				dey
.cc5c	d0 fa		bne $cc58			bne _loop
.cc5e	95 25		sta $25,x			sta DStack+1,x
.cc60					_done:
=16					CL	.var *-(WordListLink+wh_Xt)
=$cc60					en = *	; remember here
>cc4e	10					.byte CL	;wh_CodeLength
.cc60	60		rts				rts
>cc61	41 6e 64			L1:	.text "And"	;  name of word as a string, ending at wh_NameLastChar
>cc64	83					.byte (("And"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc65	cb cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc67	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc68	10					.byte UF	;wh_Flags	dictionary flags
=52196					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc69					And2:
.cc69	20 1d b5	jsr $b51d			jsr underflow_2
.cc6c	b5 24		lda $24,x			lda DStack+0,x
.cc6e	35 26		and $26,x			and DStack+2,x
.cc70	95 26		sta $26,x			sta DStack+2,x
.cc72	b5 25		lda $25,x			lda DStack+1,x
.cc74	35 27		and $27,x			and DStack+3,x
.cc76	95 27		sta $27,x			sta DStack+3,x
.cc78	e8		inx				inx		; Drop n2
.cc79	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$cc7a					en = *	; remember here
>cc67	11					.byte CL	;wh_CodeLength
.cc7a	60		rts				rts
>cc7b	4f 72				L1:	.text "Or"	;  name of word as a string, ending at wh_NameLastChar
>cc7d	42					.byte (("Or"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc7e	e4 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc80	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc81	10					.byte UF	;wh_Flags	dictionary flags
=52221					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc82					Or:
.cc82	20 1d b5	jsr $b51d			jsr underflow_2
.cc85	b5 24		lda $24,x			lda DStack+0,x
.cc87	15 26		ora $26,x			ora DStack+2,x
.cc89	95 26		sta $26,x			sta DStack+2,x
.cc8b	b5 25		lda $25,x			lda DStack+1,x
.cc8d	15 27		ora $27,x			ora DStack+3,x
.cc8f	95 27		sta $27,x			sta DStack+3,x
.cc91	e8		inx				inx		; Drop n2
.cc92	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$cc93					en = *	; remember here
>cc80	11					.byte CL	;wh_CodeLength
.cc93	60		rts				rts
>cc94	58 6f 72			L1:	.text "Xor"	;  name of word as a string, ending at wh_NameLastChar
>cc97	43					.byte (("Xor"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc98	fd cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc9a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc9b	10					.byte UF	;wh_Flags	dictionary flags
=52247					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc9c					Xor:
.cc9c	20 1d b5	jsr $b51d			jsr underflow_2
.cc9f	b5 24		lda $24,x			lda DStack+0,x
.cca1	55 26		eor $26,x			eor DStack+2,x
.cca3	95 26		sta $26,x			sta DStack+2,x
.cca5	b5 25		lda $25,x			lda DStack+1,x
.cca7	55 27		eor $27,x			eor DStack+3,x
.cca9	95 27		sta $27,x			sta DStack+3,x
.ccab	e8		inx				inx		; Drop n2
.ccac	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$ccad					en = *	; remember here
>cc9a	11					.byte CL	;wh_CodeLength
.ccad	60		rts				rts
>ccae	2b				L1:	.text "+"	;  name of word as a string, ending at wh_NameLastChar
>ccaf	61					.byte (("+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ccb0	17 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccb2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccb3	10					.byte UF	;wh_Flags	dictionary flags
=52271					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccb4					Plus:
.ccb4	20 1d b5	jsr $b51d			jsr underflow_2
.ccb7	18		clc				clc
.ccb8	b5 24		lda $24,x			lda DStack+0,x		; LSB
.ccba	75 26		adc $26,x			adc DStack+2,x
.ccbc	95 26		sta $26,x			sta DStack+2,x
.ccbe	b5 25		lda $25,x			lda DStack+1,x		; MSB. No CLC, conserve carry bit
.ccc0	75 27		adc $27,x			adc DStack+3,x
.ccc2	95 27		sta $27,x			sta DStack+3,x
.ccc4	e8		inx				inx
.ccc5	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$ccc6					en = *	; remember here
>ccb2	12					.byte CL	;wh_CodeLength
.ccc6	60		rts				rts
>ccc7	2d				L1:	.text "-"	;  name of word as a string, ending at wh_NameLastChar
>ccc8	a1					.byte (("-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ccc9	2f cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cccb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cccc	10					.byte UF	;wh_Flags	dictionary flags
=52296					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cccd					Minus:
.cccd	20 1d b5	jsr $b51d			jsr underflow_2
.ccd0	38		sec				sec
.ccd1	b5 26		lda $26,x			lda DStack+2,x	; LSB
.ccd3	f5 24		sbc $24,x			sbc DStack+0,x
.ccd5	95 26		sta $26,x			sta DStack+2,x
.ccd7	b5 27		lda $27,x			lda DStack+3,x	; MSB
.ccd9	f5 25		sbc $25,x			sbc DStack+1,x
.ccdb	95 27		sta $27,x			sta DStack+3,x
.ccdd	e8		inx				inx		; Drop n2
.ccde	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$ccdf					en = *	; remember here
>cccb	12					.byte CL	;wh_CodeLength
.ccdf	60		rts				rts
>cce0	2e				L1:	.text "."	;  name of word as a string, ending at wh_NameLastChar
>cce1	c1					.byte (("."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cce2	48 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cce4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cce5	08					.byte NN	;wh_Flags	dictionary flags
=52321					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cce6	b5 25		lda $25,x	Dot:		lda DStack+1,x		; ( n )	save sign
.cce8	08		php				php
.cce9	20 9d c7	jsr $c79d			jsr Abs			; ( u )
.ccec	20 fa b8	jsr $b8fa			jsr Zero		; ( ud )	u>d  cvt u to ud
.ccef	4c ff cc	jmp $ccff			jmp fmt_d3
=12					CL	.var *-(WordListLink+wh_Xt)
=$ccf2					en = *	; remember here
>cce4	0c					.byte CL	;wh_CodeLength
>ccf2	44 2e				L1:	.text "D."	;  name of word as a string, ending at wh_NameLastChar
>ccf4	c2					.byte (("D."[-1]&7)<<5)+(*-L1)	;wh_HNL
>ccf5	61 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccf7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccf8	08					.byte NN	;wh_Flags	dictionary flags
=52340					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccf9	b5 25		lda $25,x	D_Dot:		lda DStack+1,x		; save sign
.ccfb	08		php				php
.ccfc	20 d2 c7	jsr $c7d2			jsr DAbs
.ccff	20 a0 ac	jsr $aca0	fmt_d3:		jsr Less_Number_Sign	; ( ud )	start formatting
.cd02	20 13 ad	jsr $ad13			jsr Number_sign_s	; ( ud )	do all digits
.cd05	28		plp				plp			; ( ud )	do sign
.cd06	20 2e ad	jsr $ad2e			jsr Sign_P		; ( ud )
.cd09	20 ad ac	jsr $acad			jsr Number_sign_greater	; ( addr u )	end formatting
.cd0c	20 08 cf	jsr $cf08			jsr Type
.cd0f	4c fb ce	jmp $cefb			jmp Space
=25					CL	.var *-(WordListLink+wh_Xt)
=$cd12					en = *	; remember here
>ccf7	19					.byte CL	;wh_CodeLength
>cd12	55 2e				L1:	.text "U."	;  name of word as a string, ending at wh_NameLastChar
>cd14	c2					.byte (("U."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd15	74 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd17	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd18	18					.byte UF+NN	;wh_Flags	dictionary flags
=52372					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd19	20 08 b5	jsr $b508	U_Dot:		jsr underflow_1
.cd1c	20 33 cd	jsr $cd33			jsr print_u
.cd1f	4c fb ce	jmp $cefb			jmp Space
=9					CL	.var *-(WordListLink+wh_Xt)
=$cd22					en = *	; remember here
>cd17	09					.byte CL	;wh_CodeLength
>cd22	55 44 2e			L1:	.text "UD."	;  name of word as a string, ending at wh_NameLastChar
>cd25	c3					.byte (("UD."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd26	94 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd28	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd29	18					.byte UF+NN	;wh_Flags	dictionary flags
=52389					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd2a	20 1d b5	jsr $b51d	UD_Dot:		jsr underflow_2 ; double number
.cd2d	20 36 cd	jsr $cd36			jsr print_ud
.cd30	4c fb ce	jmp $cefb			jmp Space
=9					CL	.var *-(WordListLink+wh_Xt)
=$cd33					en = *	; remember here
>cd28	09					.byte CL	;wh_CodeLength
.cd33					print_u:
.cd33	20 fa b8	jsr $b8fa			jsr Zero			; convert to ud
.cd36					print_ud:
.cd36	20 a0 ac	jsr $aca0			jsr Less_Number_Sign		; <#	start formatting
.cd39	20 13 ad	jsr $ad13			jsr Number_sign_s		; #S	do all digits
.cd3c	20 ad ac	jsr $acad			jsr Number_sign_greater		; #>	end formatting
.cd3f	4c 08 cf	jmp $cf08			jmp Type
>cd42	55 2e 52			L1:	.text "U.R"	;  name of word as a string, ending at wh_NameLastChar
>cd45	43					.byte (("U.R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd46	a5 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd48	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd49	08					.byte NN	;wh_Flags	dictionary flags
=52421					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd4a	20 c2 b4	jsr $b4c2	U_Dot_R:	jsr PopA		; save field width
.cd4d	48		pha		U_Dot_R_A:	pha
.cd4e	20 fa b8	jsr $b8fa			jsr Zero		; u>d  cvt u to ud
.cd51	4c 61 cd	jmp $cd61			jmp fmt_udr3
=10					CL	.var *-(WordListLink+wh_Xt)
=$cd54					en = *	; remember here
>cd48	0a					.byte CL	;wh_CodeLength
>cd54	55 44 2e 52			L1:	.text "UD.R"	;  name of word as a string, ending at wh_NameLastChar
>cd58	44					.byte (("UD.R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd59	c5 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd5b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd5c	08					.byte NN	;wh_Flags	dictionary flags
=52440					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd5d	20 c2 b4	jsr $b4c2	UD_Dot_R:	jsr PopA			; save field width
.cd60	48		pha		UD_Dot_R_A:	pha
.cd61	20 a0 ac	jsr $aca0	fmt_udr3:	jsr Less_Number_Sign		; start formatted
.cd64	20 13 ad	jsr $ad13			jsr Number_sign_s		; do all digits
.cd67	20 ad ac	jsr $acad	fmt_r:		jsr Number_sign_greater		; finish formatted
.cd6a	68		pla				pla				; recover field width
.cd6b	38		sec				sec				; do leading spaces
.cd6c	f5 24		sbc $24,x			sbc DStack+0,x
.cd6e	90 06		bcc $cd76			bcc +
.cd70	20 eb b8	jsr $b8eb			jsr PushZA
.cd73	20 5e c5	jsr $c55e			jsr Spaces
.cd76	4c 08 cf	jmp $cf08	+		jmp Type			; type formatted
=28					CL	.var *-(WordListLink+wh_Xt)
=$cd79					en = *	; remember here
>cd5b	1c					.byte CL	;wh_CodeLength
>cd79	2e 52				L1:	.text ".R"	;  name of word as a string, ending at wh_NameLastChar
>cd7b	42					.byte ((".R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd7c	d8 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd7e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd7f	08					.byte NN	;wh_Flags	dictionary flags
=52475					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd80	20 c2 b4	jsr $b4c2	Dot_R:		jsr PopA		; save field width
.cd83	48		pha		Dot_R_A:	pha
.cd84	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cd86	08		php				php
.cd87	20 9d c7	jsr $c79d			jsr Abs
.cd8a	20 fa b8	jsr $b8fa			jsr Zero		; u>d  cvt u to ud
.cd8d	4c a2 cd	jmp $cda2			jmp fmt_dr3
=16					CL	.var *-(WordListLink+wh_Xt)
=$cd90					en = *	; remember here
>cd7e	10					.byte CL	;wh_CodeLength
>cd90	44 2e 52			L1:	.text "D.R"	;  name of word as a string, ending at wh_NameLastChar
>cd93	43					.byte (("D.R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd94	fb cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd96	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd97	08					.byte NN	;wh_Flags	dictionary flags
=52499					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd98	20 c2 b4	jsr $b4c2	D_Dot_R:	jsr PopA		; save field width
.cd9b	48		pha		D_Dot_R_A:	pha
.cd9c	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cd9e	08		php				php
.cd9f	20 d2 c7	jsr $c7d2			jsr DAbs
.cda2	20 a0 ac	jsr $aca0	fmt_dr3:	jsr Less_Number_Sign	; start formatted output
.cda5	20 13 ad	jsr $ad13			jsr Number_sign_s	; do all digits
.cda8	28		plp				plp			; do the sign
.cda9	20 2e ad	jsr $ad2e			jsr Sign_P
.cdac	4c 67 cd	jmp $cd67			jmp fmt_r
=23					CL	.var *-(WordListLink+wh_Xt)
=$cdaf					en = *	; remember here
>cd96	17					.byte CL	;wh_CodeLength
>cdaf	3f				L1:	.text "?"	;  name of word as a string, ending at wh_NameLastChar
>cdb0	e1					.byte (("?"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cdb1	13 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cdb3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdb4	08					.byte NN	;wh_Flags	dictionary flags
=52528					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdb5					Question:
.cdb5	20 ea cf	jsr $cfea			jsr Fetch
.cdb8	4c e6 cc	jmp $cce6			jmp Dot
=6					CL	.var *-(WordListLink+wh_Xt)
=$cdbb					en = *	; remember here
>cdb3	06					.byte CL	;wh_CodeLength
>cdbb	32 44 75 70			L1:	.text "2Dup"	;  name of word as a string, ending at wh_NameLastChar
>cdbf	04					.byte (("2Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cdc0	30 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cdc2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdc3	10					.byte UF	;wh_Flags	dictionary flags
=52543					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdc4					Two_Dup:
.cdc4	20 1d b5	jsr $b51d			jsr underflow_2
.cdc7	ca		dex				dex
.cdc8	ca		dex				dex
.cdc9	ca		dex				dex
.cdca	ca		dex				dex
.cdcb	b5 28		lda $28,x			lda DStack+4,x	; TOS
.cdcd	95 24		sta $24,x			sta DStack+0,x
.cdcf	b5 29		lda $29,x			lda DStack+5,x
.cdd1	95 25		sta $25,x			sta DStack+1,x
.cdd3	b5 2a		lda $2a,x			lda DStack+6,x	; NOS
.cdd5	95 26		sta $26,x			sta DStack+2,x
.cdd7	b5 2b		lda $2b,x			lda DStack+7,x
.cdd9	95 27		sta $27,x			sta DStack+3,x
=23					CL	.var *-(WordListLink+wh_Xt)
=$cddb					en = *	; remember here
>cdc2	17					.byte CL	;wh_CodeLength
.cddb	60		rts				rts
>cddc	54 75 63 6b			L1:	.text "Tuck"	;  name of word as a string, ending at wh_NameLastChar
>cde0	64					.byte (("Tuck"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cde1	3f cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cde3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cde4	10					.byte UF	;wh_Flags	dictionary flags
=52576					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cde5					Tuck:
.cde5	20 1d b5	jsr $b51d			jsr underflow_2
.cde8	ca		dex				dex
.cde9	ca		dex				dex
.cdea	b4 28		ldy $28,x			ldy DStack+4,x	; LSB
.cdec	b5 26		lda $26,x			lda DStack+2,x
.cdee	95 28		sta $28,x			sta DStack+4,x
.cdf0	94 26		sty $26,x			sty DStack+2,x
.cdf2	95 24		sta $24,x			sta DStack+0,x
.cdf4	b4 29		ldy $29,x			ldy DStack+5,x	; MSB
.cdf6	b5 27		lda $27,x			lda DStack+3,x
.cdf8	95 29		sta $29,x			sta DStack+5,x
.cdfa	94 27		sty $27,x			sty DStack+3,x
.cdfc	95 25		sta $25,x			sta DStack+1,x
=25					CL	.var *-(WordListLink+wh_Xt)
=$cdfe					en = *	; remember here
>cde3	19					.byte CL	;wh_CodeLength
.cdfe	60		rts				rts
>cdff	43 2c				L1:	.text "C,"	;  name of word as a string, ending at wh_NameLastChar
>ce01	82					.byte (("C,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce02	60 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce04	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce05	08					.byte NN	;wh_Flags	dictionary flags
=52609					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce06	20 c2 b4	jsr $b4c2	C_Comma:	jsr PopA	; pop c, with underflow check
.ce09					C_Comma_A:
.ce09	ca		dex				dex
.ce0a	94 24		sty $24,x			sty DStack+0,x	; save Y
.ce0c	a0 00		ldy #$00			ldy #0		; store A
.ce0e	91 00		sta ($00),y			sta (cp),y
.ce10	e6 00		inc $00				inc cp+0	; increment cp
.ce12	d0 02		bne $ce16			bne +
.ce14	e6 01		inc $01				inc cp+1
.ce16					+
.ce16	b4 24		ldy $24,x			ldy DStack+0,x	; restore Y
.ce18	e8		inx				inx
=19					CL	.var *-(WordListLink+wh_Xt)
=$ce19					en = *	; remember here
>ce04	13					.byte CL	;wh_CodeLength
.ce19	60		rts				rts
>ce1a	2c				L1:	.text ","	;  name of word as a string, ending at wh_NameLastChar
>ce1b	81					.byte ((","[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce1c	81 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce1e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce1f	08					.byte NN	;wh_Flags	dictionary flags
=52635					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce20	20 de b4	jsr $b4de	Comma:		jsr PopYA	; pop n, with underflow check
.ce23					Comma_YA:
.ce23	20 09 ce	jsr $ce09			jsr C_Comma_A	; compile LSB
.ce26	98		tya				tya		; compile MSB
.ce27	4c 09 ce	jmp $ce09			jmp C_Comma_A
=10					CL	.var *-(WordListLink+wh_Xt)
=$ce2a					en = *	; remember here
>ce1e	0a					.byte CL	;wh_CodeLength
>ce2a	32 2c				L1:	.text "2,"	;  name of word as a string, ending at wh_NameLastChar
>ce2c	82					.byte (("2,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce2d	9b cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce2f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce30	08					.byte NN	;wh_Flags	dictionary flags
=52652					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce31	20 20 ce	jsr $ce20	Two_Comma:	jsr Comma
.ce34	4c 20 ce	jmp $ce20			jmp Comma
=6					CL	.var *-(WordListLink+wh_Xt)
=$ce37					en = *	; remember here
>ce2f	06					.byte CL	;wh_CodeLength
.ce37	a9 e8		lda #$e8	Drop_Comma:	lda #$e8	;inx
.ce39	a8		tay				tay
.ce3a	d0 e7		bne $ce23			bne Comma_YA
>ce3c	4a 73 72 2c			L1:	.text "Jsr,"	;  name of word as a string, ending at wh_NameLastChar
>ce40	84					.byte (("Jsr,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce41	ac cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce43	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce44	08					.byte NN	;wh_Flags	dictionary flags
=52672					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce45	20 de b4	jsr $b4de	Jsr_Comma:	jsr PopYA	; pop addr (optimize can skip)
.ce48	20 b9 b8	jsr $b8b9	Jsr_Comma_YA:	jsr PushYA	; push addr
.ce4b	a9 20		lda #$20			lda #$20	; JSR abs opcode
.ce4d	20 09 ce	jsr $ce09	Jsr_Comma_3:	jsr C_Comma_A
.ce50	4c 20 ce	jmp $ce20			jmp Comma	; compile addr
=14					CL	.var *-(WordListLink+wh_Xt)
=$ce53					en = *	; remember here
>ce43	0e					.byte CL	;wh_CodeLength
>ce53	4a 6d 70 2c			L1:	.text "Jmp,"	;  name of word as a string, ending at wh_NameLastChar
>ce57	84					.byte (("Jmp,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce58	c0 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce5a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce5b	08					.byte NN	;wh_Flags	dictionary flags
=52695					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce5c	20 de b4	jsr $b4de	Jmp_Comma:	jsr PopYA	; pop addr (optimize can skip)
.ce5f	20 b9 b8	jsr $b8b9	Jmp_Comma_YA:	jsr PushYA	; push addr
.ce62	a9 4c		lda #$4c			lda #$4c	; JMP abs opcode
.ce64	d0 e7		bne $ce4d			bne Jsr_Comma_3
.ce66					Jmp_Comma_NT_YA:
.ce66	20 b9 b8	jsr $b8b9			jsr PushYA
.ce69	20 e3 be	jsr $bee3			jsr Name_To_Int	; convert nt to xt
.ce6c	4c 5c ce	jmp $ce5c			jmp Jmp_Comma
=19					CL	.var *-(WordListLink+wh_Xt)
=$ce6f					en = *	; remember here
>ce5a	13					.byte CL	;wh_CodeLength
>ce6f	43 40				L1:	.text "C@"	;  name of word as a string, ending at wh_NameLastChar
>ce71	02					.byte (("C@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce72	d7 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce74	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce75	10					.byte UF	;wh_Flags	dictionary flags
=52721					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce76	20 08 b5	jsr $b508	C_Fetch:	jsr underflow_1
.ce79	a1 24		lda ($24,x)			lda (DStack+0,x)
.ce7b	95 24		sta $24,x			sta DStack+0,x
.ce7d	a9 00		lda #$00			lda #0
.ce7f	95 25		sta $25,x			sta DStack+1,x	; zero MSB
=11					CL	.var *-(WordListLink+wh_Xt)
=$ce81					en = *	; remember here
>ce74	0b					.byte CL	;wh_CodeLength
.ce81	60		rts				rts
>ce82	43 21				L1:	.text "C!"	;  name of word as a string, ending at wh_NameLastChar
>ce84	22					.byte (("C!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce85	f1 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce87	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce88	10					.byte UF	;wh_Flags	dictionary flags
=52740					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce89	20 1d b5	jsr $b51d	C_Store:	jsr underflow_2
.ce8c	b5 26		lda $26,x			lda DStack+2,x
.ce8e	81 24		sta ($24,x)			sta (DStack+0,x)
.ce90	e8		inx				inx
.ce91	e8		inx				inx
.ce92	e8		inx				inx
.ce93	e8		inx				inx
=11					CL	.var *-(WordListLink+wh_Xt)
=$ce94					en = *	; remember here
>ce87	0b					.byte CL	;wh_CodeLength
.ce94	60		rts				rts
>ce95	31 2b 21			L1:	.text "1+!"	;  name of word as a string, ending at wh_NameLastChar
>ce98	23					.byte (("1+!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce99	04 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce9b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce9c	00					.byte 0	;wh_Flags	dictionary flags
=52760					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce9d					OnePlusStore:
.ce9d	a9 01		lda #$01			lda #1
.ce9f	18		clc				clc
.cea0	61 24		adc ($24,x)			adc (DStack+0,x)	; increment lo byte
.cea2	81 24		sta ($24,x)			sta (DStack+0,x)
.cea4	90 0c		bcc $ceb2			bcc _7			; if carry
.cea6	f6 24		inc $24,x			inc DStack+0,x		;   point at hi byte
.cea8	d0 02		bne $ceac			bne +
.ceaa	f6 25		inc $25,x			inc DStack+1,x
.ceac					+
.ceac	a1 24		lda ($24,x)			lda (DStack+0,x)	;   increment hi byte
.ceae	69 00		adc #$00			adc #0
.ceb0	81 24		sta ($24,x)			sta (Dstack+0,x)
.ceb2					_7:
.ceb2	e8		inx				inx			; Drop addr
.ceb3	e8		inx				inx
=23					CL	.var *-(WordListLink+wh_Xt)
=$ceb4					en = *	; remember here
>ce9b	17					.byte CL	;wh_CodeLength
.ceb4	60		rts				rts
>ceb5	2b 21				L1:	.text "+!"	;  name of word as a string, ending at wh_NameLastChar
>ceb7	22					.byte (("+!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ceb8	18 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ceba	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cebb	18					.byte UF+NN	;wh_Flags	dictionary flags
=52791					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cebc					Plus_store:
.cebc	20 1d b5	jsr $b51d			jsr underflow_2
.cebf	18		clc				clc
.cec0	b5 26		lda $26,x			lda DStack+2,x
.cec2	61 24		adc ($24,x)			adc (DStack+0,x)
.cec4	81 24		sta ($24,x)			sta (DStack+0,x)
.cec6	f6 24		inc $24,x			inc DStack+0,x
.cec8	d0 02		bne $cecc			bne +
.ceca	f6 25		inc $25,x			inc DStack+1,x
.cecc					+
.cecc	b5 27		lda $27,x			lda DStack+3,x
.cece	61 24		adc ($24,x)			adc (DStack+0,x)
.ced0	81 24		sta ($24,x)			sta (DStack+0,x)
.ced2	4c 05 c6	jmp $c605			jmp Two_Drop
=25					CL	.var *-(WordListLink+wh_Xt)
=$ced5					en = *	; remember here
>ceba	19					.byte CL	;wh_CodeLength
>ced5	42 65 6c 6c			L1:	.text "Bell"	;  name of word as a string, ending at wh_NameLastChar
>ced9	84					.byte (("Bell"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ceda	37 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cedc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cedd	08					.byte NN	;wh_Flags	dictionary flags
=52825					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cede	a9 07		lda #$07	Bell:		lda #7		; ASCII value for BELL
.cee0	d0 0c		bne $ceee			bne Emit_A
=4					CL	.var *-(WordListLink+wh_Xt)
=$cee2					en = *	; remember here
>cedc	04					.byte CL	;wh_CodeLength
>cee2	45 6d 69 74			L1:	.text "Emit"	;  name of word as a string, ending at wh_NameLastChar
>cee6	84					.byte (("Emit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cee7	59 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cee9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ceea	08					.byte NN	;wh_Flags	dictionary flags
=52838					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ceeb	20 c2 b4	jsr $b4c2	Emit:		jsr PopA		; pop char, with underflow check
.ceee					Emit_A:
.ceee	6c 06 03	jmp ($0306)			jmp (output)		; JSR/RTS
=6					CL	.var *-(WordListLink+wh_Xt)
=$cef1					en = *	; remember here
>cee9	06					.byte CL	;wh_CodeLength
>cef1	53 70 61 63 65			L1:	.text "Space"	;  name of word as a string, ending at wh_NameLastChar
>cef6	a5					.byte (("Space"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cef7	66 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cef9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cefa	08					.byte NN	;wh_Flags	dictionary flags
=52854					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cefb	a9 20		lda #$20	Space:		lda #AscSP
.cefd	d0 ef		bne $ceee			bne Emit_A
=4					CL	.var *-(WordListLink+wh_Xt)
=$ceff					en = *	; remember here
>cef9	04					.byte CL	;wh_CodeLength
>ceff	54 79 70 65			L1:	.text "Type"	;  name of word as a string, ending at wh_NameLastChar
>cf03	a4					.byte (("Type"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf04	76 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf06	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf07	18					.byte UF+NN	;wh_Flags	dictionary flags
=52867					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf08					Type:
.cf08	20 1d b5	jsr $b51d			jsr underflow_2
.cf0b	4c 18 cf	jmp $cf18			jmp _test
.cf0e					_loop:
.cf0e	d6 24		dec $24,x			dec DStack+0,x		; finish length decrement
.cf10	a1 26		lda ($26,x)			lda (DStack+2,x)	; Send the current character
.cf12	20 ee ce	jsr $ceee			jsr Emit_A
.cf15	20 6a cb	jsr $cb6a			jsr NOS_One_Plus	; increment address
.cf18	b5 24		lda $24,x	_test:		lda DStack+0,x		; decrement length & test for <0
.cf1a	d0 f2		bne $cf0e			bne _loop
.cf1c	d6 25		dec $25,x			dec DStack+1,x
.cf1e	10 ee		bpl $cf0e			bpl _loop
.cf20	4c 05 c6	jmp $c605			jmp Two_drop
=27					CL	.var *-(WordListLink+wh_Xt)
=$cf23					en = *	; remember here
>cf06	1b					.byte CL	;wh_CodeLength
.cf23					Print_ASCIIZ_YA_no_lf:
.cf23	85 18		sta $18				sta tmp3+0		; save string address
.cf25	84 19		sty $19				sty tmp3+1
.cf27	a0 00		ldy #$00			ldy #0
.cf29					Print_ASCIIZ_tmp3_no_lf:
.cf29	b1 18		lda ($18),y			lda (tmp3),y
.cf2b	f0 06		beq $cf33			beq _done		; end of string?
.cf2d	20 ee ce	jsr $ceee			jsr emit_a
.cf30	c8		iny				iny
.cf31	d0 f6		bne $cf29			bne Print_ASCIIZ_tmp3_no_lf
.cf33					_done:
.cf33	60		rts				rts
.cf34					Print_ASCIIZ_YA:
.cf34	20 23 cf	jsr $cf23			jsr Print_ASCIIZ_YA_no_lf
.cf37	4c 28 ac	jmp $ac28	                jmp CR
>cf3a	45 78 65 63 75 74 65		L1:	.text "Execute"	;  name of word as a string, ending at wh_NameLastChar
>cf41	a7					.byte (("Execute"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf42	83 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf44	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf45	08					.byte NN	;wh_Flags	dictionary flags
=52929					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf46					Execute:
.cf46	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.cf48	b0 2f		bcs $cf79		bcs Throw_Stack_03
.cf4a	b5 25		lda $25,x			lda DStack+1,x	; addr for RTI
.cf4c	48		pha				pha
.cf4d	b5 24		lda $24,x			lda DStack+0,x
.cf4f	48		pha				pha
.cf50	e8		inx				inx		; drop addr
.cf51	e8		inx				inx
.cf52	08		php				php		; flags for RTI
.cf53	40		rti				rti
=14					CL	.var *-(WordListLink+wh_Xt)
=$cf54					en = *	; remember here
>cf44	0e					.byte CL	;wh_CodeLength
>cf54	32 52 6f 74			L1:	.text "2Rot"	;  name of word as a string, ending at wh_NameLastChar
>cf58	84					.byte (("2Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf59	c1 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf5b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf5c	08					.byte NN	;wh_Flags	dictionary flags
=52952					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf5d					TwoRot:
.cf5d	e0 1d		cpx #$1d		cpx #-2*6+DStack0+1
.cf5f	b0 18		bcs $cf79		bcs Throw_Stack_03
.cf61	86 14		stx $14				stx tmp1+0
.cf63	e8		inx				inx		; do 4 times
.cf64	e8		inx				inx
.cf65	e8		inx				inx
.cf66	e8		inx				inx
.cf67	ca		dex		-		dex
.cf68	b4 2c		ldy $2c,x			ldy DStack+8,x	; do a byte
.cf6a	b5 28		lda $28,x			lda DStack+4,x
.cf6c	95 2c		sta $2c,x			sta DStack+8,x
.cf6e	b5 24		lda $24,x			lda DStack+0,x
.cf70	95 28		sta $28,x			sta DStack+4,x
.cf72	94 24		sty $24,x			sty DStack+0,x
.cf74	e4 14		cpx $14				cpx tmp1+0
.cf76	d0 ef		bne $cf67			bne -
=27					CL	.var *-(WordListLink+wh_Xt)
=$cf78					en = *	; remember here
>cf5b	1b					.byte CL	;wh_CodeLength
.cf78	60		rts				rts
.cf79	4c 2c b5	jmp $b52c	Throw_Stack_03: jmp Throw_Stack
>cf7c	52 6f 74			L1:	.text "Rot"	;  name of word as a string, ending at wh_NameLastChar
>cf7f	83					.byte (("Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf80	d8 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf82	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf83	08					.byte NN	;wh_Flags	dictionary flags
=52991					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf84					Rot:
.cf84	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.cf86	b0 f1		bcs $cf79		bcs Throw_Stack_03
.cf88	b4 29		ldy $29,x			ldy DStack+5,x	; do MSB
.cf8a	b5 27		lda $27,x			lda DStack+3,x
.cf8c	95 29		sta $29,x			sta DStack+5,x
.cf8e	b5 25		lda $25,x			lda DStack+1,x
.cf90	95 27		sta $27,x			sta DStack+3,x
.cf92	94 25		sty $25,x			sty DStack+1,x
.cf94	b4 28		ldy $28,x			ldy DStack+4,x	; do LSB
.cf96	b5 26		lda $26,x			lda DStack+2,x
.cf98	95 28		sta $28,x			sta DStack+4,x
.cf9a	b5 24		lda $24,x			lda DStack+0,x
.cf9c	95 26		sta $26,x			sta DStack+2,x
.cf9e	94 24		sty $24,x			sty DStack+0,x
=28					CL	.var *-(WordListLink+wh_Xt)
=$cfa0					en = *	; remember here
>cf82	1c					.byte CL	;wh_CodeLength
.cfa0	60		rts				rts
>cfa1	2d 52 6f 74			L1:	.text "-Rot"	;  name of word as a string, ending at wh_NameLastChar
>cfa5	84					.byte (("-Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cfa6	ff ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfa8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfa9	08					.byte NN	;wh_Flags	dictionary flags
=53029					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfaa					Not_Rot:
.cfaa	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.cfac	b0 cb		bcs $cf79		bcs Throw_Stack_03
.cfae	b4 25		ldy $25,x			ldy DStack+1,x	; do MSB
.cfb0	b5 27		lda $27,x			lda DStack+3,x
.cfb2	95 25		sta $25,x			sta DStack+1,x
.cfb4	b5 29		lda $29,x			lda DStack+5,x
.cfb6	95 27		sta $27,x			sta DStack+3,x
.cfb8	94 29		sty $29,x			sty DStack+5,x
.cfba	b4 24		ldy $24,x			ldy DStack+0,x	; do LSB
.cfbc	b5 26		lda $26,x			lda DStack+2,x
.cfbe	95 24		sta $24,x			sta DStack+0,x
.cfc0	b5 28		lda $28,x			lda DStack+4,x
.cfc2	95 26		sta $26,x			sta DStack+2,x
.cfc4	94 28		sty $28,x			sty DStack+4,x
=28					CL	.var *-(WordListLink+wh_Xt)
=$cfc6					en = *	; remember here
>cfa8	1c					.byte CL	;wh_CodeLength
.cfc6	60		rts				rts
>cfc7	21				L1:	.text "!"	;  name of word as a string, ending at wh_NameLastChar
>cfc8	21					.byte (("!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cfc9	25 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfcb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfcc	08					.byte NN	;wh_Flags	dictionary flags
=53064					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfcd					Store:
.cfcd	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.cfcf	b0 a8		bcs $cf79		bcs Throw_Stack_03
.cfd1	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cfd3	81 24		sta ($24,x)			sta (DStack+0,x)
.cfd5	f6 24		inc $24,x			inc DStack+0,x
.cfd7	d0 02		bne $cfdb			bne +
.cfd9	f6 25		inc $25,x			inc DStack+1,x
.cfdb					+
.cfdb	b5 27		lda $27,x			lda DStack+3,x	; MSB
.cfdd	81 24		sta ($24,x)			sta (DStack+0,x)
.cfdf	e8		inx				inx		; 2Drop
.cfe0	e8		inx				inx
.cfe1	e8		inx				inx
.cfe2	e8		inx				inx
=22					CL	.var *-(WordListLink+wh_Xt)
=$cfe3					en = *	; remember here
>cfcb	16					.byte CL	;wh_CodeLength
.cfe3	60		rts				rts
>cfe4	40				L1:	.text "@"	;  name of word as a string, ending at wh_NameLastChar
>cfe5	01					.byte (("@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cfe6	48 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfe8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfe9	08					.byte NN	;wh_Flags	dictionary flags
=53093					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfea					Fetch:
.cfea	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.cfec	b0 8b		bcs $cf79		bcs Throw_Stack_03
.cfee	a1 24		lda ($24,x)			lda (DStack+0,x)		; LSB
.cff0	a8		tay				tay
.cff1	f6 24		inc $24,x			inc DStack+0,x
.cff3	d0 02		bne $cff7			bne +
.cff5	f6 25		inc $25,x			inc DStack+1,x
.cff7					+
.cff7	a1 24		lda ($24,x)			lda (DStack+0,x)		; MSB
.cff9	95 25		sta $25,x			sta DStack+1,x
.cffb	94 24		sty $24,x			sty DStack+0,x
=19					CL	.var *-(WordListLink+wh_Xt)
=$cffd					en = *	; remember here
>cfe8	13					.byte CL	;wh_CodeLength
.cffd	60		rts				rts
>cffe	3e 52				L1:	.text ">R"	;  name of word as a string, ending at wh_NameLastChar
>d000	42					.byte ((">R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d001	65 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d003	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d004	41					.byte CO+R6	;wh_Flags	dictionary flags
=53120					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d005					To_R:
.d005	68		pla				pla		; move the RTS address out of the way
.d006	85 1c		sta $1c				sta tmp5+0
.d008	68		pla				pla
.d009	85 1d		sta $1d				sta tmp5+1
.d00b	20 08 b5	jsr $b508			jsr underflow_1
.d00e	b5 25		lda $25,x			lda DStack+1,x	; MSB
.d010	48		pha				pha
.d011	b5 24		lda $24,x			lda DStack+0,x	; LSB
.d013	48		pha				pha
.d014	e8		inx				inx
.d015	e8		inx				inx
.d016	a5 1d		lda $1d				lda tmp5+1	; move the RTS address back in
.d018	48		pha				pha
.d019	a5 1c		lda $1c				lda tmp5+0
.d01b	48		pha				pha
=23					CL	.var *-(WordListLink+wh_Xt)
=$d01c					en = *	; remember here
>d003	17					.byte CL	;wh_CodeLength
.d01c	60		rts				rts
>d01d	52 3e				L1:	.text "R>"	;  name of word as a string, ending at wh_NameLastChar
>d01f	c2					.byte (("R>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d020	80 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d022	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d023	41					.byte CO+R6	;wh_Flags	dictionary flags
=53151					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d024					R_From:
.d024	68		pla				pla		; Move the RTS addr out of the way
.d025	85 1c		sta $1c				sta tmp5+0
.d027	68		pla				pla
.d028	85 1d		sta $1d				sta tmp5+1
.d02a	ca		dex				dex
.d02b	ca		dex				dex
.d02c	68		pla				pla		; LSB
.d02d	95 24		sta $24,x			sta DStack+0,x
.d02f	68		pla				pla		; MSB
.d030	95 25		sta $25,x			sta DStack+1,x
.d032	a5 1d		lda $1d				lda tmp5+1	; Restore the RTS addr
.d034	48		pha				pha
.d035	a5 1c		lda $1c				lda tmp5+0
.d037	48		pha				pha
=20					CL	.var *-(WordListLink+wh_Xt)
=$d038					en = *	; remember here
>d022	14					.byte CL	;wh_CodeLength
.d038	60		rts				rts
>d039	52 40				L1:	.text "R@"	;  name of word as a string, ending at wh_NameLastChar
>d03b	02					.byte (("R@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d03c	9f cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d03e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d03f	09					.byte NN+CO	;wh_Flags	dictionary flags
=53179					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d040					R_Fetch:
.d040	86 14		stx $14				stx tmp1	; save data stack index
.d042	ba		tsx				tsx		; X= return stack index
.d043	bd 03 01	lda $0103,x			lda RStack+3,x
.d046	bc 04 01	ldy $0104,x			ldy RStack+4,x
.d049	a6 14		ldx $14				ldx tmp1	; restore data stack index
.d04b	4c b9 b8	jmp $b8b9			jmp PushYA
=14					CL	.var *-(WordListLink+wh_Xt)
=$d04e					en = *	; remember here
>d03e	0e					.byte CL	;wh_CodeLength
>d04e	4f 76 65 72			L1:	.text "Over"	;  name of word as a string, ending at wh_NameLastChar
>d052	44					.byte (("Over"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d053	bb cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d055	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d056	10					.byte UF	;wh_Flags	dictionary flags
=53202					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d057					Over:
.d057	20 1d b5	jsr $b51d			jsr underflow_2
.d05a	b5 26		lda $26,x			lda DStack+2,x	; LSB
.d05c	b4 27		ldy $27,x			ldy DStack+3,x	; MSB
.d05e	ca		dex				dex		; PushYA
.d05f	ca		dex				dex
.d060	95 24		sta $24,x			sta DStack+0,x
.d062	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$d064					en = *	; remember here
>d055	0d					.byte CL	;wh_CodeLength
.d064	60		rts				rts
>d065	3f 44 75 70			L1:	.text "?Dup"	;  name of word as a string, ending at wh_NameLastChar
>d069	04					.byte (("?Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d06a	d2 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d06c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d06d	18					.byte UF+NN	;wh_Flags	dictionary flags
=53225					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d06e					Question_Dup:
.d06e	20 08 b5	jsr $b508			jsr underflow_1
.d071	b5 24		lda $24,x			lda DStack+0,x	; Check if TOS is zero
.d073	15 25		ora $25,x			ora DStack+1,x
.d075	d0 0c		bne $d083			bne Dup_NoUf
=9					CL	.var *-(WordListLink+wh_Xt)
=$d077					en = *	; remember here
>d06c	09					.byte CL	;wh_CodeLength
.d077	60		rts				rts
>d078	44 75 70			L1:	.text "Dup"	;  name of word as a string, ending at wh_NameLastChar
>d07b	03					.byte (("Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d07c	e9 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d07e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d07f	10					.byte UF	;wh_Flags	dictionary flags
=53243					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d080					Dup:
.d080	20 08 b5	jsr $b508			jsr underflow_1
.d083	b5 24		lda $24,x	Dup_NoUf:	lda DStack+0,x	; LSB
.d085	b4 25		ldy $25,x			ldy DStack+1,x	; MSB
.d087	ca		dex				dex
.d088	ca		dex				dex
.d089	95 24		sta $24,x			sta DStack+0,x
.d08b	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$d08d					en = *	; remember here
>d07e	0d					.byte CL	;wh_CodeLength
.d08d	60		rts				rts
.d08e					PushAY:
.d08e	ca		dex				dex
.d08f	ca		dex				dex
.d090	94 24		sty $24,x			sty DStack+0,x
.d092	95 25		sta $25,x			sta DStack+1,x
.d094	60		rts				rts
>d095	53 77 61 70			L1:	.text "Swap"	;  name of word as a string, ending at wh_NameLastChar
>d099	04					.byte (("Swap"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d09a	fb cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d09c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d09d	10					.byte UF	;wh_Flags	dictionary flags
=53273					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d09e					Swap:
.d09e	20 1d b5	jsr $b51d			jsr underflow_2
.d0a1	b5 24		lda $24,x			lda DStack+0,x	; do LSB
.d0a3	b4 26		ldy $26,x			ldy DStack+2,x
.d0a5	95 26		sta $26,x			sta DStack+2,x
.d0a7	94 24		sty $24,x			sty DStack+0,x
.d0a9	b5 25		lda $25,x			lda DStack+1,x	; do MSB
.d0ab	b4 27		ldy $27,x			ldy DStack+3,x
.d0ad	95 27		sta $27,x			sta DStack+3,x
.d0af	94 25		sty $25,x			sty DStack+1,x
=19					CL	.var *-(WordListLink+wh_Xt)
=$d0b1					en = *	; remember here
>d09c	13					.byte CL	;wh_CodeLength
.d0b1	60		rts				rts
>d0b2	44 72 6f 70			L1:	.text "Drop"	;  name of word as a string, ending at wh_NameLastChar
>d0b6	04					.byte (("Drop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0b7	19 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0b9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0ba	10					.byte UF	;wh_Flags	dictionary flags
=53302					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0bb					Drop:
.d0bb	20 08 b5	jsr $b508			jsr underflow_1
.d0be	e8		inx				inx
.d0bf	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$d0c0					en = *	; remember here
>d0b9	05					.byte CL	;wh_CodeLength
.d0c0	60		rts				rts
=53302					forth_dictionary_start = WordListLink ; END of FORTH-WORDLIST
=0					WordListLink .var 0
>d0c1	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
>d0c6	65					.byte (("Words"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0c7	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0c9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0ca	08					.byte NN	;wh_Flags	dictionary flags
=53318					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0cb	4c 75 ab	jmp $ab75			jmp Words
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0ce					en = *	; remember here
>d0c9	03					.byte CL	;wh_CodeLength
>d0ce	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>d0d6	72 64 6c 69 73 74
>d0dc	8e					.byte (("Forth-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0dd	46 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0df	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0e0	08					.byte NN	;wh_Flags	dictionary flags
=53340					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0e1	4c 7c a0	jmp $a07c			jmp Forth_WordList
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0e4					en = *	; remember here
>d0df	03					.byte CL	;wh_CodeLength
>d0e4	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
>d0e9	05					.byte (("Forth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0ea	5c d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0ec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0ed	08					.byte NN	;wh_Flags	dictionary flags
=53353					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0ee	4c 75 a1	jmp $a175			jmp Forth
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0f1					en = *	; remember here
>d0ec	03					.byte CL	;wh_CodeLength
>d0f1	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>d0f9	72
>d0fa	49					.byte (("Set-Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0fb	69 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0fd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0fe	08					.byte NN	;wh_Flags	dictionary flags
=53370					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0ff	4c 39 a2	jmp $a239			jmp Set_Order
=3					CL	.var *-(WordListLink+wh_Xt)
=$d102					en = *	; remember here
>d0fd	03					.byte CL	;wh_CodeLength
=53370					root_dictionary_start = WordListLink ; END of ROOT-WORDLIST
=0					WordListLink .var 0
.d102					asm_r:
.d102	68		pla			pla		; pop RTS addr
.d103	a8		tay			tay
.d104	68		pla			pla
.d105	20 44 d1	jsr $d144		jsr asm_op	; compile opcode
.d108	b5 25		lda $25,x		lda DStack+1,x	; check range
.d10a	f0 09		beq $d115		beq _plus
.d10c	c9 ff		cmp #$ff		cmp #$ff
.d10e	f0 0b		beq $d11b		beq _minus
.d110	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.d112	4c 67 b5	jmp $b567		jmp ThrowA
.d115	b5 24		lda $24,x	_plus:	lda DStack+0,x
.d117	30 f7		bmi $d110		bmi _err
.d119	10 04		bpl $d11f		bpl _store
.d11b	b5 24		lda $24,x	_minus:	lda DStack+0,x
.d11d	10 f1		bpl $d110		bpl _err
.d11f	4c 06 ce	jmp $ce06	_store:	jmp C_Comma
.d122					asm_1:
.d122	68		pla			pla		; pop RTS addr
.d123	a8		tay			tay
.d124	68		pla			pla
.d125	20 44 d1	jsr $d144		jsr asm_op	; compile opcode
.d128	b5 25		lda $25,x		lda DStack+1,x	; compile operand
.d12a	f0 04		beq $d130		beq _store	;   unsigned byte?
.d12c	c9 ff		cmp #$ff		cmp #$ff	;   signed byte?
.d12e	d0 03		bne $d133		bne _err
.d130	4c 06 ce	jmp $ce06	_store:	jmp C_Comma
.d133	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.d135	4c 67 b5	jmp $b567		jmp ThrowA
.d138					asm_2:
.d138	68		pla			pla		; pop RTS addr
.d139	a8		tay			tay
.d13a	68		pla			pla
.d13b	20 44 d1	jsr $d144		jsr asm_op	; compile opcode
.d13e	4c 20 ce	jmp $ce20		jmp Comma	; compile operand
.d141					asm_0:
.d141	68		pla			pla		; pop RTS addr
.d142	a8		tay			tay
.d143	68		pla			pla
.d144	84 14		sty $14		asm_op:	sty tmp1+0	; save RTS addr
.d146	85 15		sta $15			sta tmp1+1
.d148	a0 01		ldy #$01		ldy #1		; get opcode byte
.d14a	b1 14		lda ($14),y		lda (tmp1),y
.d14c	4c 09 ce	jmp $ce09		jmp C_Comma_A	; compile opcode
>d14f	61 64 63 2e 23			L1:	.text "adc.#"	;  name of word as a string, ending at wh_NameLastChar
>d154	65					.byte (("adc.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d155	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d157	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d158	08					.byte NN	;wh_Flags	dictionary flags
=53460					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d159	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d15c					en = *	; remember here
>d157	03					.byte CL	;wh_CodeLength
>d15c	69					.byte $69
>d15d	61 64 63 2e 78			L1:	.text "adc.x"	;  name of word as a string, ending at wh_NameLastChar
>d162	05					.byte (("adc.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d163	d4 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d165	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d166	08					.byte NN	;wh_Flags	dictionary flags
=53474					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d167	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d16a					en = *	; remember here
>d165	03					.byte CL	;wh_CodeLength
>d16a	7d					.byte $7d
>d16b	61 64 63 2e 79			L1:	.text "adc.y"	;  name of word as a string, ending at wh_NameLastChar
>d170	25					.byte (("adc.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d171	e2 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d173	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d174	08					.byte NN	;wh_Flags	dictionary flags
=53488					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d175	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d178					en = *	; remember here
>d173	03					.byte CL	;wh_CodeLength
>d178	79					.byte $79
>d179	61 64 63 2e 7a			L1:	.text "adc.z"	;  name of word as a string, ending at wh_NameLastChar
>d17e	45					.byte (("adc.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d17f	f0 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d181	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d182	08					.byte NN	;wh_Flags	dictionary flags
=53502					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d183	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d186					en = *	; remember here
>d181	03					.byte CL	;wh_CodeLength
>d186	65					.byte $65
>d187	61 64 63 2e 7a 69 79		L1:	.text "adc.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d18e	27					.byte (("adc.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d18f	fe d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d191	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d192	08					.byte NN	;wh_Flags	dictionary flags
=53518					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d193	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d196					en = *	; remember here
>d191	03					.byte CL	;wh_CodeLength
>d196	71					.byte $71
>d197	61 64 63 2e 7a 78		L1:	.text "adc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d19d	06					.byte (("adc.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d19e	0e d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1a0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1a1	08					.byte NN	;wh_Flags	dictionary flags
=53533					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1a2	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1a5					en = *	; remember here
>d1a0	03					.byte CL	;wh_CodeLength
>d1a5	75					.byte $75
>d1a6	61 64 63 2e 7a 78 69		L1:	.text "adc.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d1ad	27					.byte (("adc.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1ae	1d d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1b0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1b1	08					.byte NN	;wh_Flags	dictionary flags
=53549					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1b2	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1b5					en = *	; remember here
>d1b0	03					.byte CL	;wh_CodeLength
>d1b5	61					.byte $61
>d1b6	61 6e 64 2e			L1:	.text "and."	;  name of word as a string, ending at wh_NameLastChar
>d1ba	c4					.byte (("and."[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1bb	2d d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1bd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1be	08					.byte NN	;wh_Flags	dictionary flags
=53562					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1bf	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1c2					en = *	; remember here
>d1bd	03					.byte CL	;wh_CodeLength
>d1c2	2d					.byte $2d
>d1c3	61 6e 64 2e 23			L1:	.text "and.#"	;  name of word as a string, ending at wh_NameLastChar
>d1c8	65					.byte (("and.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1c9	3a d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1cb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1cc	08					.byte NN	;wh_Flags	dictionary flags
=53576					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1cd	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1d0					en = *	; remember here
>d1cb	03					.byte CL	;wh_CodeLength
>d1d0	29					.byte $29
>d1d1	61 6e 64 2e 78			L1:	.text "and.x"	;  name of word as a string, ending at wh_NameLastChar
>d1d6	05					.byte (("and.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1d7	48 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1d9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1da	08					.byte NN	;wh_Flags	dictionary flags
=53590					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1db	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1de					en = *	; remember here
>d1d9	03					.byte CL	;wh_CodeLength
>d1de	3d					.byte $3d
>d1df	61 6e 64 2e 79			L1:	.text "and.y"	;  name of word as a string, ending at wh_NameLastChar
>d1e4	25					.byte (("and.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1e5	56 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1e8	08					.byte NN	;wh_Flags	dictionary flags
=53604					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1e9	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1ec					en = *	; remember here
>d1e7	03					.byte CL	;wh_CodeLength
>d1ec	39					.byte $39
>d1ed	61 6e 64 2e 7a			L1:	.text "and.z"	;  name of word as a string, ending at wh_NameLastChar
>d1f2	45					.byte (("and.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1f3	64 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1f5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1f6	08					.byte NN	;wh_Flags	dictionary flags
=53618					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1f7	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1fa					en = *	; remember here
>d1f5	03					.byte CL	;wh_CodeLength
>d1fa	25					.byte $25
>d1fb	61 6e 64 2e 7a 69 79		L1:	.text "and.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d202	27					.byte (("and.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d203	72 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d205	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d206	08					.byte NN	;wh_Flags	dictionary flags
=53634					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d207	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d20a					en = *	; remember here
>d205	03					.byte CL	;wh_CodeLength
>d20a	31					.byte $31
>d20b	61 6e 64 2e 7a 78		L1:	.text "and.zx"	;  name of word as a string, ending at wh_NameLastChar
>d211	06					.byte (("and.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d212	82 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d214	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d215	08					.byte NN	;wh_Flags	dictionary flags
=53649					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d216	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d219					en = *	; remember here
>d214	03					.byte CL	;wh_CodeLength
>d219	35					.byte $35
>d21a	61 6e 64 2e 7a 78 69		L1:	.text "and.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d221	27					.byte (("and.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d222	91 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d224	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d225	08					.byte NN	;wh_Flags	dictionary flags
=53665					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d226	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d229					en = *	; remember here
>d224	03					.byte CL	;wh_CodeLength
>d229	21					.byte $21
>d22a	61 73 6c			L1:	.text "asl"	;  name of word as a string, ending at wh_NameLastChar
>d22d	83					.byte (("asl"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d22e	a1 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d230	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d231	08					.byte NN	;wh_Flags	dictionary flags
=53677					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d232	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d235					en = *	; remember here
>d230	03					.byte CL	;wh_CodeLength
>d235	0e					.byte $0e
>d236	61 73 6c 2e 61			L1:	.text "asl.a"	;  name of word as a string, ending at wh_NameLastChar
>d23b	25					.byte (("asl.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d23c	ad d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d23e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d23f	08					.byte NN	;wh_Flags	dictionary flags
=53691					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d240	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d243					en = *	; remember here
>d23e	03					.byte CL	;wh_CodeLength
>d243	0a					.byte $0a
>d244	61 73 6c 2e 78			L1:	.text "asl.x"	;  name of word as a string, ending at wh_NameLastChar
>d249	05					.byte (("asl.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d24a	bb d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d24c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d24d	08					.byte NN	;wh_Flags	dictionary flags
=53705					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d24e	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d251					en = *	; remember here
>d24c	03					.byte CL	;wh_CodeLength
>d251	1e					.byte $1e
>d252	61 73 6c 2e 7a			L1:	.text "asl.z"	;  name of word as a string, ending at wh_NameLastChar
>d257	45					.byte (("asl.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d258	c9 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d25a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d25b	08					.byte NN	;wh_Flags	dictionary flags
=53719					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d25c	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d25f					en = *	; remember here
>d25a	03					.byte CL	;wh_CodeLength
>d25f	06					.byte $06
>d260	61 73 6c 2e 7a 78		L1:	.text "asl.zx"	;  name of word as a string, ending at wh_NameLastChar
>d266	06					.byte (("asl.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d267	d7 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d269	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d26a	08					.byte NN	;wh_Flags	dictionary flags
=53734					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d26b	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d26e					en = *	; remember here
>d269	03					.byte CL	;wh_CodeLength
>d26e	16					.byte $16
>d26f	62 63 63			L1:	.text "bcc"	;  name of word as a string, ending at wh_NameLastChar
>d272	63					.byte (("bcc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d273	e6 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d275	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d276	08					.byte NN	;wh_Flags	dictionary flags
=53746					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d277	20 02 d1	jsr $d102		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d27a					en = *	; remember here
>d275	03					.byte CL	;wh_CodeLength
>d27a	90					.byte $90
>d27b	62 63 73			L1:	.text "bcs"	;  name of word as a string, ending at wh_NameLastChar
>d27e	63					.byte (("bcs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d27f	f2 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d281	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d282	08					.byte NN	;wh_Flags	dictionary flags
=53758					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d283	20 02 d1	jsr $d102		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d286					en = *	; remember here
>d281	03					.byte CL	;wh_CodeLength
>d286	b0					.byte $b0
>d287	62 65 71			L1:	.text "beq"	;  name of word as a string, ending at wh_NameLastChar
>d28a	23					.byte (("beq"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d28b	fe d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d28d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d28e	08					.byte NN	;wh_Flags	dictionary flags
=53770					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d28f	20 02 d1	jsr $d102		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d292					en = *	; remember here
>d28d	03					.byte CL	;wh_CodeLength
>d292	f0					.byte $f0
>d293	62 69 74			L1:	.text "bit"	;  name of word as a string, ending at wh_NameLastChar
>d296	83					.byte (("bit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d297	0a d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d299	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d29a	08					.byte NN	;wh_Flags	dictionary flags
=53782					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d29b	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d29e					en = *	; remember here
>d299	03					.byte CL	;wh_CodeLength
>d29e	2c					.byte $2c
>d29f	62 69 74 2e 7a			L1:	.text "bit.z"	;  name of word as a string, ending at wh_NameLastChar
>d2a4	45					.byte (("bit.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2a5	16 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2a7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2a8	08					.byte NN	;wh_Flags	dictionary flags
=53796					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2a9	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2ac					en = *	; remember here
>d2a7	03					.byte CL	;wh_CodeLength
>d2ac	24					.byte $24
>d2ad	62 6d 69			L1:	.text "bmi"	;  name of word as a string, ending at wh_NameLastChar
>d2b0	23					.byte (("bmi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2b1	24 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2b3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2b4	08					.byte NN	;wh_Flags	dictionary flags
=53808					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2b5	20 02 d1	jsr $d102		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2b8					en = *	; remember here
>d2b3	03					.byte CL	;wh_CodeLength
>d2b8	30					.byte $30
>d2b9	62 6e 65			L1:	.text "bne"	;  name of word as a string, ending at wh_NameLastChar
>d2bc	a3					.byte (("bne"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2bd	30 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2bf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2c0	08					.byte NN	;wh_Flags	dictionary flags
=53820					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2c1	20 02 d1	jsr $d102		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2c4					en = *	; remember here
>d2bf	03					.byte CL	;wh_CodeLength
>d2c4	d0					.byte $d0
>d2c5	62 70 6c			L1:	.text "bpl"	;  name of word as a string, ending at wh_NameLastChar
>d2c8	83					.byte (("bpl"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2c9	3c d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2cb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2cc	08					.byte NN	;wh_Flags	dictionary flags
=53832					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2cd	20 02 d1	jsr $d102		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2d0					en = *	; remember here
>d2cb	03					.byte CL	;wh_CodeLength
>d2d0	10					.byte $10
>d2d1	62 72 6b			L1:	.text "brk"	;  name of word as a string, ending at wh_NameLastChar
>d2d4	63					.byte (("brk"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2d5	48 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2d7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2d8	08					.byte NN	;wh_Flags	dictionary flags
=53844					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2d9	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2dc					en = *	; remember here
>d2d7	03					.byte CL	;wh_CodeLength
>d2dc	00					.byte $00
>d2dd	62 76 63			L1:	.text "bvc"	;  name of word as a string, ending at wh_NameLastChar
>d2e0	63					.byte (("bvc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2e1	54 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2e3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2e4	08					.byte NN	;wh_Flags	dictionary flags
=53856					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2e5	20 02 d1	jsr $d102		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2e8					en = *	; remember here
>d2e3	03					.byte CL	;wh_CodeLength
>d2e8	50					.byte $50
>d2e9	62 76 73			L1:	.text "bvs"	;  name of word as a string, ending at wh_NameLastChar
>d2ec	63					.byte (("bvs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2ed	60 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2ef	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2f0	08					.byte NN	;wh_Flags	dictionary flags
=53868					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2f1	20 02 d1	jsr $d102		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2f4					en = *	; remember here
>d2ef	03					.byte CL	;wh_CodeLength
>d2f4	70					.byte $70
>d2f5	63 6c 63			L1:	.text "clc"	;  name of word as a string, ending at wh_NameLastChar
>d2f8	63					.byte (("clc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2f9	6c d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2fb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2fc	08					.byte NN	;wh_Flags	dictionary flags
=53880					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2fd	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d300					en = *	; remember here
>d2fb	03					.byte CL	;wh_CodeLength
>d300	18					.byte $18
>d301	63 6c 64			L1:	.text "cld"	;  name of word as a string, ending at wh_NameLastChar
>d304	83					.byte (("cld"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d305	78 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d307	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d308	08					.byte NN	;wh_Flags	dictionary flags
=53892					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d309	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d30c					en = *	; remember here
>d307	03					.byte CL	;wh_CodeLength
>d30c	d8					.byte $d8
>d30d	63 6c 69			L1:	.text "cli"	;  name of word as a string, ending at wh_NameLastChar
>d310	23					.byte (("cli"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d311	84 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d313	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d314	08					.byte NN	;wh_Flags	dictionary flags
=53904					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d315	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d318					en = *	; remember here
>d313	03					.byte CL	;wh_CodeLength
>d318	58					.byte $58
>d319	63 6c 76			L1:	.text "clv"	;  name of word as a string, ending at wh_NameLastChar
>d31c	c3					.byte (("clv"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d31d	90 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d31f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d320	08					.byte NN	;wh_Flags	dictionary flags
=53916					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d321	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d324					en = *	; remember here
>d31f	03					.byte CL	;wh_CodeLength
>d324	b8					.byte $b8
>d325	63 6d 70			L1:	.text "cmp"	;  name of word as a string, ending at wh_NameLastChar
>d328	03					.byte (("cmp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d329	9c d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d32b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d32c	08					.byte NN	;wh_Flags	dictionary flags
=53928					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d32d	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d330					en = *	; remember here
>d32b	03					.byte CL	;wh_CodeLength
>d330	cd					.byte $cd
>d331	63 6d 70 2e 23			L1:	.text "cmp.#"	;  name of word as a string, ending at wh_NameLastChar
>d336	65					.byte (("cmp.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d337	a8 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d339	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d33a	08					.byte NN	;wh_Flags	dictionary flags
=53942					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d33b	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d33e					en = *	; remember here
>d339	03					.byte CL	;wh_CodeLength
>d33e	c9					.byte $c9
>d33f	63 6d 70 2e 78			L1:	.text "cmp.x"	;  name of word as a string, ending at wh_NameLastChar
>d344	05					.byte (("cmp.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d345	b6 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d347	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d348	08					.byte NN	;wh_Flags	dictionary flags
=53956					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d349	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d34c					en = *	; remember here
>d347	03					.byte CL	;wh_CodeLength
>d34c	dd					.byte $dd
>d34d	63 6d 70 2e 79			L1:	.text "cmp.y"	;  name of word as a string, ending at wh_NameLastChar
>d352	25					.byte (("cmp.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d353	c4 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d355	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d356	08					.byte NN	;wh_Flags	dictionary flags
=53970					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d357	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d35a					en = *	; remember here
>d355	03					.byte CL	;wh_CodeLength
>d35a	d9					.byte $d9
>d35b	63 6d 70 2e 7a			L1:	.text "cmp.z"	;  name of word as a string, ending at wh_NameLastChar
>d360	45					.byte (("cmp.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d361	d2 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d363	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d364	08					.byte NN	;wh_Flags	dictionary flags
=53984					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d365	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d368					en = *	; remember here
>d363	03					.byte CL	;wh_CodeLength
>d368	c5					.byte $c5
>d369	63 6d 70 2e 7a 69 79		L1:	.text "cmp.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d370	27					.byte (("cmp.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d371	e0 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d373	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d374	08					.byte NN	;wh_Flags	dictionary flags
=54000					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d375	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d378					en = *	; remember here
>d373	03					.byte CL	;wh_CodeLength
>d378	d1					.byte $d1
>d379	63 6d 70 2e 7a 78		L1:	.text "cmp.zx"	;  name of word as a string, ending at wh_NameLastChar
>d37f	06					.byte (("cmp.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d380	f0 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d382	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d383	08					.byte NN	;wh_Flags	dictionary flags
=54015					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d384	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d387					en = *	; remember here
>d382	03					.byte CL	;wh_CodeLength
>d387	d5					.byte $d5
>d388	63 6d 70 2e 7a 78 69		L1:	.text "cmp.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d38f	27					.byte (("cmp.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d390	ff d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d392	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d393	08					.byte NN	;wh_Flags	dictionary flags
=54031					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d394	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d397					en = *	; remember here
>d392	03					.byte CL	;wh_CodeLength
>d397	c1					.byte $c1
>d398	63 70 78			L1:	.text "cpx"	;  name of word as a string, ending at wh_NameLastChar
>d39b	03					.byte (("cpx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d39c	0f d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d39e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d39f	08					.byte NN	;wh_Flags	dictionary flags
=54043					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3a0	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3a3					en = *	; remember here
>d39e	03					.byte CL	;wh_CodeLength
>d3a3	ec					.byte $ec
>d3a4	63 70 78 2e 23			L1:	.text "cpx.#"	;  name of word as a string, ending at wh_NameLastChar
>d3a9	65					.byte (("cpx.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3aa	1b d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3ac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3ad	08					.byte NN	;wh_Flags	dictionary flags
=54057					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3ae	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3b1					en = *	; remember here
>d3ac	03					.byte CL	;wh_CodeLength
>d3b1	e0					.byte $e0
>d3b2	63 70 78 2e 7a			L1:	.text "cpx.z"	;  name of word as a string, ending at wh_NameLastChar
>d3b7	45					.byte (("cpx.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3b8	29 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3ba	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3bb	08					.byte NN	;wh_Flags	dictionary flags
=54071					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3bc	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3bf					en = *	; remember here
>d3ba	03					.byte CL	;wh_CodeLength
>d3bf	e4					.byte $e4
>d3c0	63 70 79			L1:	.text "cpy"	;  name of word as a string, ending at wh_NameLastChar
>d3c3	23					.byte (("cpy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3c4	37 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3c6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3c7	08					.byte NN	;wh_Flags	dictionary flags
=54083					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3c8	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3cb					en = *	; remember here
>d3c6	03					.byte CL	;wh_CodeLength
>d3cb	cc					.byte $cc
>d3cc	63 70 79 2e 23			L1:	.text "cpy.#"	;  name of word as a string, ending at wh_NameLastChar
>d3d1	65					.byte (("cpy.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3d2	43 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3d4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3d5	08					.byte NN	;wh_Flags	dictionary flags
=54097					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3d6	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3d9					en = *	; remember here
>d3d4	03					.byte CL	;wh_CodeLength
>d3d9	c0					.byte $c0
>d3da	63 70 79 2e 7a			L1:	.text "cpy.z"	;  name of word as a string, ending at wh_NameLastChar
>d3df	45					.byte (("cpy.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3e0	51 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3e3	08					.byte NN	;wh_Flags	dictionary flags
=54111					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3e4	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3e7					en = *	; remember here
>d3e2	03					.byte CL	;wh_CodeLength
>d3e7	c4					.byte $c4
>d3e8	64 65 63			L1:	.text "dec"	;  name of word as a string, ending at wh_NameLastChar
>d3eb	63					.byte (("dec"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3ec	5f d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3ef	08					.byte NN	;wh_Flags	dictionary flags
=54123					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3f0	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3f3					en = *	; remember here
>d3ee	03					.byte CL	;wh_CodeLength
>d3f3	ce					.byte $ce
>d3f4	64 65 63 2e 61			L1:	.text "dec.a"	;  name of word as a string, ending at wh_NameLastChar
>d3f9	25					.byte (("dec.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3fa	6b d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3fd	08					.byte NN	;wh_Flags	dictionary flags
=54137					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3fe	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d401					en = *	; remember here
>d3fc	03					.byte CL	;wh_CodeLength
>d401	3a					.byte $3a
>d402	64 65 63 2e 78			L1:	.text "dec.x"	;  name of word as a string, ending at wh_NameLastChar
>d407	05					.byte (("dec.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d408	79 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d40a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d40b	08					.byte NN	;wh_Flags	dictionary flags
=54151					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d40c	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d40f					en = *	; remember here
>d40a	03					.byte CL	;wh_CodeLength
>d40f	de					.byte $de
>d410	64 65 63 2e 7a			L1:	.text "dec.z"	;  name of word as a string, ending at wh_NameLastChar
>d415	45					.byte (("dec.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d416	87 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d418	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d419	08					.byte NN	;wh_Flags	dictionary flags
=54165					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d41a	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d41d					en = *	; remember here
>d418	03					.byte CL	;wh_CodeLength
>d41d	c6					.byte $c6
>d41e	64 65 63 2e 7a 78		L1:	.text "dec.zx"	;  name of word as a string, ending at wh_NameLastChar
>d424	06					.byte (("dec.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d425	95 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d427	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d428	08					.byte NN	;wh_Flags	dictionary flags
=54180					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d429	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d42c					en = *	; remember here
>d427	03					.byte CL	;wh_CodeLength
>d42c	d6					.byte $d6
>d42d	64 65 78			L1:	.text "dex"	;  name of word as a string, ending at wh_NameLastChar
>d430	03					.byte (("dex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d431	a4 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d433	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d434	08					.byte NN	;wh_Flags	dictionary flags
=54192					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d435	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d438					en = *	; remember here
>d433	03					.byte CL	;wh_CodeLength
>d438	ca					.byte $ca
>d439	64 65 79			L1:	.text "dey"	;  name of word as a string, ending at wh_NameLastChar
>d43c	23					.byte (("dey"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d43d	b0 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d43f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d440	08					.byte NN	;wh_Flags	dictionary flags
=54204					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d441	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d444					en = *	; remember here
>d43f	03					.byte CL	;wh_CodeLength
>d444	88					.byte $88
>d445	65 6f 72			L1:	.text "eor"	;  name of word as a string, ending at wh_NameLastChar
>d448	43					.byte (("eor"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d449	bc d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d44b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d44c	08					.byte NN	;wh_Flags	dictionary flags
=54216					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d44d	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d450					en = *	; remember here
>d44b	03					.byte CL	;wh_CodeLength
>d450	4d					.byte $4d
>d451	65 6f 72 2e 23			L1:	.text "eor.#"	;  name of word as a string, ending at wh_NameLastChar
>d456	65					.byte (("eor.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d457	c8 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d459	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d45a	08					.byte NN	;wh_Flags	dictionary flags
=54230					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d45b	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d45e					en = *	; remember here
>d459	03					.byte CL	;wh_CodeLength
>d45e	49					.byte $49
>d45f	65 6f 72 2e 78			L1:	.text "eor.x"	;  name of word as a string, ending at wh_NameLastChar
>d464	05					.byte (("eor.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d465	d6 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d467	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d468	08					.byte NN	;wh_Flags	dictionary flags
=54244					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d469	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d46c					en = *	; remember here
>d467	03					.byte CL	;wh_CodeLength
>d46c	5d					.byte $5d
>d46d	65 6f 72 2e 79			L1:	.text "eor.y"	;  name of word as a string, ending at wh_NameLastChar
>d472	25					.byte (("eor.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d473	e4 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d475	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d476	08					.byte NN	;wh_Flags	dictionary flags
=54258					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d477	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d47a					en = *	; remember here
>d475	03					.byte CL	;wh_CodeLength
>d47a	59					.byte $59
>d47b	65 6f 72 2e 7a			L1:	.text "eor.z"	;  name of word as a string, ending at wh_NameLastChar
>d480	45					.byte (("eor.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d481	f2 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d483	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d484	08					.byte NN	;wh_Flags	dictionary flags
=54272					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d485	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d488					en = *	; remember here
>d483	03					.byte CL	;wh_CodeLength
>d488	45					.byte $45
>d489	65 6f 72 2e 7a 69 79		L1:	.text "eor.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d490	27					.byte (("eor.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d491	00 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d493	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d494	08					.byte NN	;wh_Flags	dictionary flags
=54288					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d495	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d498					en = *	; remember here
>d493	03					.byte CL	;wh_CodeLength
>d498	51					.byte $51
>d499	65 6f 72 2e 7a 78		L1:	.text "eor.zx"	;  name of word as a string, ending at wh_NameLastChar
>d49f	06					.byte (("eor.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4a0	10 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4a3	08					.byte NN	;wh_Flags	dictionary flags
=54303					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4a4	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4a7					en = *	; remember here
>d4a2	03					.byte CL	;wh_CodeLength
>d4a7	55					.byte $55
>d4a8	65 6f 72 2e 7a 78 69		L1:	.text "eor.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d4af	27					.byte (("eor.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4b0	1f d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4b3	08					.byte NN	;wh_Flags	dictionary flags
=54319					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4b4	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4b7					en = *	; remember here
>d4b2	03					.byte CL	;wh_CodeLength
>d4b7	41					.byte $41
>d4b8	69 6e 63			L1:	.text "inc"	;  name of word as a string, ending at wh_NameLastChar
>d4bb	63					.byte (("inc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4bc	2f d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4bf	08					.byte NN	;wh_Flags	dictionary flags
=54331					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4c0	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4c3					en = *	; remember here
>d4be	03					.byte CL	;wh_CodeLength
>d4c3	ee					.byte $ee
>d4c4	69 6e 63 2e 61			L1:	.text "inc.a"	;  name of word as a string, ending at wh_NameLastChar
>d4c9	25					.byte (("inc.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4ca	3b d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4cd	08					.byte NN	;wh_Flags	dictionary flags
=54345					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4ce	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4d1					en = *	; remember here
>d4cc	03					.byte CL	;wh_CodeLength
>d4d1	1a					.byte $1a
>d4d2	69 6e 63 2e 78			L1:	.text "inc.x"	;  name of word as a string, ending at wh_NameLastChar
>d4d7	05					.byte (("inc.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4d8	49 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4da	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4db	08					.byte NN	;wh_Flags	dictionary flags
=54359					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4dc	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4df					en = *	; remember here
>d4da	03					.byte CL	;wh_CodeLength
>d4df	fe					.byte $fe
>d4e0	69 6e 63 2e 7a			L1:	.text "inc.z"	;  name of word as a string, ending at wh_NameLastChar
>d4e5	45					.byte (("inc.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4e6	57 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4e8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4e9	08					.byte NN	;wh_Flags	dictionary flags
=54373					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4ea	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4ed					en = *	; remember here
>d4e8	03					.byte CL	;wh_CodeLength
>d4ed	e6					.byte $e6
>d4ee	69 6e 63 2e 7a 78		L1:	.text "inc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d4f4	06					.byte (("inc.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4f5	65 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4f8	08					.byte NN	;wh_Flags	dictionary flags
=54388					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4f9	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4fc					en = *	; remember here
>d4f7	03					.byte CL	;wh_CodeLength
>d4fc	f6					.byte $f6
>d4fd	69 6e 78			L1:	.text "inx"	;  name of word as a string, ending at wh_NameLastChar
>d500	03					.byte (("inx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d501	74 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d503	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d504	08					.byte NN	;wh_Flags	dictionary flags
=54400					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d505	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d508					en = *	; remember here
>d503	03					.byte CL	;wh_CodeLength
>d508	e8					.byte $e8
>d509	69 6e 79			L1:	.text "iny"	;  name of word as a string, ending at wh_NameLastChar
>d50c	23					.byte (("iny"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d50d	80 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d50f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d510	08					.byte NN	;wh_Flags	dictionary flags
=54412					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d511	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d514					en = *	; remember here
>d50f	03					.byte CL	;wh_CodeLength
>d514	c8					.byte $c8
>d515	6a 6d 70			L1:	.text "jmp"	;  name of word as a string, ending at wh_NameLastChar
>d518	03					.byte (("jmp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d519	8c d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d51b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d51c	08					.byte NN	;wh_Flags	dictionary flags
=54424					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d51d	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d520					en = *	; remember here
>d51b	03					.byte CL	;wh_CodeLength
>d520	4c					.byte $4c
>d521	6a 6d 70 2e 69			L1:	.text "jmp.i"	;  name of word as a string, ending at wh_NameLastChar
>d526	25					.byte (("jmp.i"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d527	98 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d529	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d52a	08					.byte NN	;wh_Flags	dictionary flags
=54438					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d52b	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d52e					en = *	; remember here
>d529	03					.byte CL	;wh_CodeLength
>d52e	6c					.byte $6c
>d52f	6a 73 72			L1:	.text "jsr"	;  name of word as a string, ending at wh_NameLastChar
>d532	43					.byte (("jsr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d533	a6 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d535	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d536	08					.byte NN	;wh_Flags	dictionary flags
=54450					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d537	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d53a					en = *	; remember here
>d535	03					.byte CL	;wh_CodeLength
>d53a	20					.byte $20
>d53b	6c 64 61			L1:	.text "lda"	;  name of word as a string, ending at wh_NameLastChar
>d53e	23					.byte (("lda"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d53f	b2 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d541	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d542	08					.byte NN	;wh_Flags	dictionary flags
=54462					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d543	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d546					en = *	; remember here
>d541	03					.byte CL	;wh_CodeLength
>d546	ad					.byte $ad
>d547	6c 64 61 2e 23			L1:	.text "lda.#"	;  name of word as a string, ending at wh_NameLastChar
>d54c	65					.byte (("lda.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d54d	be d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d54f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d550	08					.byte NN	;wh_Flags	dictionary flags
=54476					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d551	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d554					en = *	; remember here
>d54f	03					.byte CL	;wh_CodeLength
>d554	a9					.byte $a9
>d555	6c 64 61 2e 78			L1:	.text "lda.x"	;  name of word as a string, ending at wh_NameLastChar
>d55a	05					.byte (("lda.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d55b	cc d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d55d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d55e	08					.byte NN	;wh_Flags	dictionary flags
=54490					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d55f	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d562					en = *	; remember here
>d55d	03					.byte CL	;wh_CodeLength
>d562	bd					.byte $bd
>d563	6c 64 61 2e 79			L1:	.text "lda.y"	;  name of word as a string, ending at wh_NameLastChar
>d568	25					.byte (("lda.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d569	da d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d56b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d56c	08					.byte NN	;wh_Flags	dictionary flags
=54504					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d56d	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d570					en = *	; remember here
>d56b	03					.byte CL	;wh_CodeLength
>d570	b9					.byte $b9
>d571	6c 64 61 2e 7a			L1:	.text "lda.z"	;  name of word as a string, ending at wh_NameLastChar
>d576	45					.byte (("lda.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d577	e8 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d579	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d57a	08					.byte NN	;wh_Flags	dictionary flags
=54518					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d57b	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d57e					en = *	; remember here
>d579	03					.byte CL	;wh_CodeLength
>d57e	a5					.byte $a5
>d57f	6c 64 61 2e 7a 69 79		L1:	.text "lda.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d586	27					.byte (("lda.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d587	f6 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d589	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d58a	08					.byte NN	;wh_Flags	dictionary flags
=54534					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d58b	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d58e					en = *	; remember here
>d589	03					.byte CL	;wh_CodeLength
>d58e	b1					.byte $b1
>d58f	6c 64 61 2e 7a 78		L1:	.text "lda.zx"	;  name of word as a string, ending at wh_NameLastChar
>d595	06					.byte (("lda.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d596	06 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d598	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d599	08					.byte NN	;wh_Flags	dictionary flags
=54549					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d59a	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d59d					en = *	; remember here
>d598	03					.byte CL	;wh_CodeLength
>d59d	b5					.byte $b5
>d59e	6c 64 61 2e 7a 78 69		L1:	.text "lda.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d5a5	27					.byte (("lda.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5a6	15 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5a8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5a9	08					.byte NN	;wh_Flags	dictionary flags
=54565					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5aa	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5ad					en = *	; remember here
>d5a8	03					.byte CL	;wh_CodeLength
>d5ad	a1					.byte $a1
>d5ae	6c 64 78			L1:	.text "ldx"	;  name of word as a string, ending at wh_NameLastChar
>d5b1	03					.byte (("ldx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5b2	25 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5b4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5b5	08					.byte NN	;wh_Flags	dictionary flags
=54577					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5b6	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5b9					en = *	; remember here
>d5b4	03					.byte CL	;wh_CodeLength
>d5b9	ae					.byte $ae
>d5ba	6c 64 78 2e 23			L1:	.text "ldx.#"	;  name of word as a string, ending at wh_NameLastChar
>d5bf	65					.byte (("ldx.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5c0	31 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5c3	08					.byte NN	;wh_Flags	dictionary flags
=54591					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5c4	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5c7					en = *	; remember here
>d5c2	03					.byte CL	;wh_CodeLength
>d5c7	a2					.byte $a2
>d5c8	6c 64 78 2e 79			L1:	.text "ldx.y"	;  name of word as a string, ending at wh_NameLastChar
>d5cd	25					.byte (("ldx.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5ce	3f d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5d0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5d1	08					.byte NN	;wh_Flags	dictionary flags
=54605					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5d2	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5d5					en = *	; remember here
>d5d0	03					.byte CL	;wh_CodeLength
>d5d5	be					.byte $be
>d5d6	6c 64 78 2e 7a			L1:	.text "ldx.z"	;  name of word as a string, ending at wh_NameLastChar
>d5db	45					.byte (("ldx.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5dc	4d d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5df	08					.byte NN	;wh_Flags	dictionary flags
=54619					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5e0	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5e3					en = *	; remember here
>d5de	03					.byte CL	;wh_CodeLength
>d5e3	a6					.byte $a6
>d5e4	6c 64 78 2e 7a 79		L1:	.text "ldx.zy"	;  name of word as a string, ending at wh_NameLastChar
>d5ea	26					.byte (("ldx.zy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5eb	5b d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5ed	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5ee	08					.byte NN	;wh_Flags	dictionary flags
=54634					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5ef	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5f2					en = *	; remember here
>d5ed	03					.byte CL	;wh_CodeLength
>d5f2	b6					.byte $b6
>d5f3	6c 64 79			L1:	.text "ldy"	;  name of word as a string, ending at wh_NameLastChar
>d5f6	23					.byte (("ldy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5f7	6a d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5f9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5fa	08					.byte NN	;wh_Flags	dictionary flags
=54646					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5fb	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5fe					en = *	; remember here
>d5f9	03					.byte CL	;wh_CodeLength
>d5fe	ac					.byte $ac
>d5ff	6c 64 79 2e 23			L1:	.text "ldy.#"	;  name of word as a string, ending at wh_NameLastChar
>d604	65					.byte (("ldy.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d605	76 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d607	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d608	08					.byte NN	;wh_Flags	dictionary flags
=54660					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d609	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d60c					en = *	; remember here
>d607	03					.byte CL	;wh_CodeLength
>d60c	a0					.byte $a0
>d60d	6c 64 79 2e 78			L1:	.text "ldy.x"	;  name of word as a string, ending at wh_NameLastChar
>d612	05					.byte (("ldy.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d613	84 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d615	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d616	08					.byte NN	;wh_Flags	dictionary flags
=54674					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d617	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d61a					en = *	; remember here
>d615	03					.byte CL	;wh_CodeLength
>d61a	bc					.byte $bc
>d61b	6c 64 79 2e 7a			L1:	.text "ldy.z"	;  name of word as a string, ending at wh_NameLastChar
>d620	45					.byte (("ldy.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d621	92 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d623	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d624	08					.byte NN	;wh_Flags	dictionary flags
=54688					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d625	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d628					en = *	; remember here
>d623	03					.byte CL	;wh_CodeLength
>d628	a4					.byte $a4
>d629	6c 64 79 2e 7a 78		L1:	.text "ldy.zx"	;  name of word as a string, ending at wh_NameLastChar
>d62f	06					.byte (("ldy.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d630	a0 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d632	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d633	08					.byte NN	;wh_Flags	dictionary flags
=54703					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d634	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d637					en = *	; remember here
>d632	03					.byte CL	;wh_CodeLength
>d637	b4					.byte $b4
>d638	6c 73 72			L1:	.text "lsr"	;  name of word as a string, ending at wh_NameLastChar
>d63b	43					.byte (("lsr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d63c	af d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d63e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d63f	08					.byte NN	;wh_Flags	dictionary flags
=54715					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d640	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d643					en = *	; remember here
>d63e	03					.byte CL	;wh_CodeLength
>d643	4e					.byte $4e
>d644	6c 73 72 2e 61			L1:	.text "lsr.a"	;  name of word as a string, ending at wh_NameLastChar
>d649	25					.byte (("lsr.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d64a	bb d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d64c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d64d	08					.byte NN	;wh_Flags	dictionary flags
=54729					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d64e	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d651					en = *	; remember here
>d64c	03					.byte CL	;wh_CodeLength
>d651	4a					.byte $4a
>d652	6c 73 72 2e 78			L1:	.text "lsr.x"	;  name of word as a string, ending at wh_NameLastChar
>d657	05					.byte (("lsr.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d658	c9 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d65a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d65b	08					.byte NN	;wh_Flags	dictionary flags
=54743					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d65c	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d65f					en = *	; remember here
>d65a	03					.byte CL	;wh_CodeLength
>d65f	5e					.byte $5e
>d660	6c 73 72 2e 7a			L1:	.text "lsr.z"	;  name of word as a string, ending at wh_NameLastChar
>d665	45					.byte (("lsr.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d666	d7 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d668	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d669	08					.byte NN	;wh_Flags	dictionary flags
=54757					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d66a	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d66d					en = *	; remember here
>d668	03					.byte CL	;wh_CodeLength
>d66d	46					.byte $46
>d66e	6c 73 72 2e 7a 78		L1:	.text "lsr.zx"	;  name of word as a string, ending at wh_NameLastChar
>d674	06					.byte (("lsr.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d675	e5 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d677	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d678	08					.byte NN	;wh_Flags	dictionary flags
=54772					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d679	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d67c					en = *	; remember here
>d677	03					.byte CL	;wh_CodeLength
>d67c	56					.byte $56
>d67d	6e 6f 70			L1:	.text "nop"	;  name of word as a string, ending at wh_NameLastChar
>d680	03					.byte (("nop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d681	f4 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d683	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d684	08					.byte NN	;wh_Flags	dictionary flags
=54784					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d685	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d688					en = *	; remember here
>d683	03					.byte CL	;wh_CodeLength
>d688	ea					.byte $ea
>d689	6f 72 61			L1:	.text "ora"	;  name of word as a string, ending at wh_NameLastChar
>d68c	23					.byte (("ora"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d68d	00 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d68f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d690	08					.byte NN	;wh_Flags	dictionary flags
=54796					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d691	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d694					en = *	; remember here
>d68f	03					.byte CL	;wh_CodeLength
>d694	0d					.byte $0d
>d695	6f 72 61 2e 23			L1:	.text "ora.#"	;  name of word as a string, ending at wh_NameLastChar
>d69a	65					.byte (("ora.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d69b	0c d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d69d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d69e	08					.byte NN	;wh_Flags	dictionary flags
=54810					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d69f	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6a2					en = *	; remember here
>d69d	03					.byte CL	;wh_CodeLength
>d6a2	09					.byte $09
>d6a3	6f 72 61 2e 78			L1:	.text "ora.x"	;  name of word as a string, ending at wh_NameLastChar
>d6a8	05					.byte (("ora.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6a9	1a d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6ac	08					.byte NN	;wh_Flags	dictionary flags
=54824					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6ad	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6b0					en = *	; remember here
>d6ab	03					.byte CL	;wh_CodeLength
>d6b0	1d					.byte $1d
>d6b1	6f 72 61 2e 79			L1:	.text "ora.y"	;  name of word as a string, ending at wh_NameLastChar
>d6b6	25					.byte (("ora.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6b7	28 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6b9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6ba	08					.byte NN	;wh_Flags	dictionary flags
=54838					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6bb	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6be					en = *	; remember here
>d6b9	03					.byte CL	;wh_CodeLength
>d6be	19					.byte $19
>d6bf	6f 72 61 2e 7a			L1:	.text "ora.z"	;  name of word as a string, ending at wh_NameLastChar
>d6c4	45					.byte (("ora.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6c5	36 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6c8	08					.byte NN	;wh_Flags	dictionary flags
=54852					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6c9	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6cc					en = *	; remember here
>d6c7	03					.byte CL	;wh_CodeLength
>d6cc	05					.byte $05
>d6cd	6f 72 61 2e 7a 69 79		L1:	.text "ora.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d6d4	27					.byte (("ora.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6d5	44 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6d7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6d8	08					.byte NN	;wh_Flags	dictionary flags
=54868					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6d9	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6dc					en = *	; remember here
>d6d7	03					.byte CL	;wh_CodeLength
>d6dc	11					.byte $11
>d6dd	6f 72 61 2e 7a 78		L1:	.text "ora.zx"	;  name of word as a string, ending at wh_NameLastChar
>d6e3	06					.byte (("ora.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6e4	54 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6e6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6e7	08					.byte NN	;wh_Flags	dictionary flags
=54883					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6e8	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6eb					en = *	; remember here
>d6e6	03					.byte CL	;wh_CodeLength
>d6eb	15					.byte $15
>d6ec	6f 72 61 2e 7a 78 69		L1:	.text "ora.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d6f3	27					.byte (("ora.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6f4	63 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6f6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6f7	08					.byte NN	;wh_Flags	dictionary flags
=54899					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6f8	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6fb					en = *	; remember here
>d6f6	03					.byte CL	;wh_CodeLength
>d6fb	01					.byte $01
>d6fc	70 68 61			L1:	.text "pha"	;  name of word as a string, ending at wh_NameLastChar
>d6ff	23					.byte (("pha"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d700	73 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d702	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d703	08					.byte NN	;wh_Flags	dictionary flags
=54911					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d704	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d707					en = *	; remember here
>d702	03					.byte CL	;wh_CodeLength
>d707	48					.byte $48
>d708	70 68 70			L1:	.text "php"	;  name of word as a string, ending at wh_NameLastChar
>d70b	03					.byte (("php"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d70c	7f d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d70e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d70f	08					.byte NN	;wh_Flags	dictionary flags
=54923					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d710	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d713					en = *	; remember here
>d70e	03					.byte CL	;wh_CodeLength
>d713	08					.byte $08
>d714	70 6c 61			L1:	.text "pla"	;  name of word as a string, ending at wh_NameLastChar
>d717	23					.byte (("pla"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d718	8b d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d71a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d71b	08					.byte NN	;wh_Flags	dictionary flags
=54935					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d71c	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d71f					en = *	; remember here
>d71a	03					.byte CL	;wh_CodeLength
>d71f	68					.byte $68
>d720	70 6c 70			L1:	.text "plp"	;  name of word as a string, ending at wh_NameLastChar
>d723	03					.byte (("plp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d724	97 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d726	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d727	08					.byte NN	;wh_Flags	dictionary flags
=54947					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d728	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d72b					en = *	; remember here
>d726	03					.byte CL	;wh_CodeLength
>d72b	28					.byte $28
>d72c	72 6f 6c			L1:	.text "rol"	;  name of word as a string, ending at wh_NameLastChar
>d72f	83					.byte (("rol"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d730	a3 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d732	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d733	08					.byte NN	;wh_Flags	dictionary flags
=54959					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d734	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d737					en = *	; remember here
>d732	03					.byte CL	;wh_CodeLength
>d737	2e					.byte $2e
>d738	72 6f 6c 2e 61			L1:	.text "rol.a"	;  name of word as a string, ending at wh_NameLastChar
>d73d	25					.byte (("rol.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d73e	af d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d740	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d741	08					.byte NN	;wh_Flags	dictionary flags
=54973					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d742	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d745					en = *	; remember here
>d740	03					.byte CL	;wh_CodeLength
>d745	2a					.byte $2a
>d746	72 6f 6c 2e 78			L1:	.text "rol.x"	;  name of word as a string, ending at wh_NameLastChar
>d74b	05					.byte (("rol.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d74c	bd d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d74e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d74f	08					.byte NN	;wh_Flags	dictionary flags
=54987					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d750	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d753					en = *	; remember here
>d74e	03					.byte CL	;wh_CodeLength
>d753	3e					.byte $3e
>d754	72 6f 6c 2e 7a			L1:	.text "rol.z"	;  name of word as a string, ending at wh_NameLastChar
>d759	45					.byte (("rol.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d75a	cb d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d75c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d75d	08					.byte NN	;wh_Flags	dictionary flags
=55001					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d75e	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d761					en = *	; remember here
>d75c	03					.byte CL	;wh_CodeLength
>d761	26					.byte $26
>d762	72 6f 6c 2e 7a 78		L1:	.text "rol.zx"	;  name of word as a string, ending at wh_NameLastChar
>d768	06					.byte (("rol.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d769	d9 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d76b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d76c	08					.byte NN	;wh_Flags	dictionary flags
=55016					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d76d	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d770					en = *	; remember here
>d76b	03					.byte CL	;wh_CodeLength
>d770	36					.byte $36
>d771	72 6f 72			L1:	.text "ror"	;  name of word as a string, ending at wh_NameLastChar
>d774	43					.byte (("ror"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d775	e8 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d777	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d778	08					.byte NN	;wh_Flags	dictionary flags
=55028					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d779	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d77c					en = *	; remember here
>d777	03					.byte CL	;wh_CodeLength
>d77c	6e					.byte $6e
>d77d	72 6f 72 2e 61			L1:	.text "ror.a"	;  name of word as a string, ending at wh_NameLastChar
>d782	25					.byte (("ror.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d783	f4 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d785	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d786	08					.byte NN	;wh_Flags	dictionary flags
=55042					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d787	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d78a					en = *	; remember here
>d785	03					.byte CL	;wh_CodeLength
>d78a	6a					.byte $6a
>d78b	72 6f 72 2e 78			L1:	.text "ror.x"	;  name of word as a string, ending at wh_NameLastChar
>d790	05					.byte (("ror.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d791	02 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d793	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d794	08					.byte NN	;wh_Flags	dictionary flags
=55056					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d795	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d798					en = *	; remember here
>d793	03					.byte CL	;wh_CodeLength
>d798	7e					.byte $7e
>d799	72 6f 72 2e 7a			L1:	.text "ror.z"	;  name of word as a string, ending at wh_NameLastChar
>d79e	45					.byte (("ror.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d79f	10 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7a1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7a2	08					.byte NN	;wh_Flags	dictionary flags
=55070					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7a3	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7a6					en = *	; remember here
>d7a1	03					.byte CL	;wh_CodeLength
>d7a6	66					.byte $66
>d7a7	72 6f 72 2e 7a 78		L1:	.text "ror.zx"	;  name of word as a string, ending at wh_NameLastChar
>d7ad	06					.byte (("ror.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7ae	1e d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7b0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7b1	08					.byte NN	;wh_Flags	dictionary flags
=55085					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7b2	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7b5					en = *	; remember here
>d7b0	03					.byte CL	;wh_CodeLength
>d7b5	76					.byte $76
>d7b6	72 74 69			L1:	.text "rti"	;  name of word as a string, ending at wh_NameLastChar
>d7b9	23					.byte (("rti"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7ba	2d d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7bd	08					.byte NN	;wh_Flags	dictionary flags
=55097					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7be	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7c1					en = *	; remember here
>d7bc	03					.byte CL	;wh_CodeLength
>d7c1	40					.byte $40
>d7c2	72 74 73			L1:	.text "rts"	;  name of word as a string, ending at wh_NameLastChar
>d7c5	63					.byte (("rts"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7c6	39 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7c8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7c9	08					.byte NN	;wh_Flags	dictionary flags
=55109					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7ca	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7cd					en = *	; remember here
>d7c8	03					.byte CL	;wh_CodeLength
>d7cd	60					.byte $60
>d7ce	73 62 63			L1:	.text "sbc"	;  name of word as a string, ending at wh_NameLastChar
>d7d1	63					.byte (("sbc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7d2	45 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7d4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7d5	08					.byte NN	;wh_Flags	dictionary flags
=55121					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7d6	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7d9					en = *	; remember here
>d7d4	03					.byte CL	;wh_CodeLength
>d7d9	ed					.byte $ed
>d7da	73 62 63 2e 23			L1:	.text "sbc.#"	;  name of word as a string, ending at wh_NameLastChar
>d7df	65					.byte (("sbc.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7e0	51 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7e3	08					.byte NN	;wh_Flags	dictionary flags
=55135					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7e4	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7e7					en = *	; remember here
>d7e2	03					.byte CL	;wh_CodeLength
>d7e7	e9					.byte $e9
>d7e8	73 62 63 2e 78			L1:	.text "sbc.x"	;  name of word as a string, ending at wh_NameLastChar
>d7ed	05					.byte (("sbc.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7ee	5f d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7f1	08					.byte NN	;wh_Flags	dictionary flags
=55149					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7f2	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7f5					en = *	; remember here
>d7f0	03					.byte CL	;wh_CodeLength
>d7f5	fd					.byte $fd
>d7f6	73 62 63 2e 79			L1:	.text "sbc.y"	;  name of word as a string, ending at wh_NameLastChar
>d7fb	25					.byte (("sbc.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7fc	6d d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7ff	08					.byte NN	;wh_Flags	dictionary flags
=55163					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d800	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d803					en = *	; remember here
>d7fe	03					.byte CL	;wh_CodeLength
>d803	f9					.byte $f9
>d804	73 62 63 2e 7a			L1:	.text "sbc.z"	;  name of word as a string, ending at wh_NameLastChar
>d809	45					.byte (("sbc.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d80a	7b d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d80c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d80d	08					.byte NN	;wh_Flags	dictionary flags
=55177					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d80e	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d811					en = *	; remember here
>d80c	03					.byte CL	;wh_CodeLength
>d811	e5					.byte $e5
>d812	73 62 63 2e 7a 69 79		L1:	.text "sbc.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d819	27					.byte (("sbc.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d81a	89 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d81c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d81d	08					.byte NN	;wh_Flags	dictionary flags
=55193					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d81e	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d821					en = *	; remember here
>d81c	03					.byte CL	;wh_CodeLength
>d821	f1					.byte $f1
>d822	73 62 63 2e 7a 78		L1:	.text "sbc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d828	06					.byte (("sbc.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d829	99 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d82b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d82c	08					.byte NN	;wh_Flags	dictionary flags
=55208					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d82d	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d830					en = *	; remember here
>d82b	03					.byte CL	;wh_CodeLength
>d830	f5					.byte $f5
>d831	73 62 63 2e 7a 78 69		L1:	.text "sbc.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d838	27					.byte (("sbc.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d839	a8 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d83b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d83c	08					.byte NN	;wh_Flags	dictionary flags
=55224					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d83d	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d840					en = *	; remember here
>d83b	03					.byte CL	;wh_CodeLength
>d840	e1					.byte $e1
>d841	73 65 63			L1:	.text "sec"	;  name of word as a string, ending at wh_NameLastChar
>d844	63					.byte (("sec"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d845	b8 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d847	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d848	08					.byte NN	;wh_Flags	dictionary flags
=55236					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d849	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d84c					en = *	; remember here
>d847	03					.byte CL	;wh_CodeLength
>d84c	38					.byte $38
>d84d	73 65 64			L1:	.text "sed"	;  name of word as a string, ending at wh_NameLastChar
>d850	83					.byte (("sed"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d851	c4 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d853	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d854	08					.byte NN	;wh_Flags	dictionary flags
=55248					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d855	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d858					en = *	; remember here
>d853	03					.byte CL	;wh_CodeLength
>d858	f8					.byte $f8
>d859	73 65 69			L1:	.text "sei"	;  name of word as a string, ending at wh_NameLastChar
>d85c	23					.byte (("sei"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d85d	d0 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d85f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d860	08					.byte NN	;wh_Flags	dictionary flags
=55260					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d861	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d864					en = *	; remember here
>d85f	03					.byte CL	;wh_CodeLength
>d864	78					.byte $78
>d865	73 74 61			L1:	.text "sta"	;  name of word as a string, ending at wh_NameLastChar
>d868	23					.byte (("sta"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d869	dc d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d86b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d86c	08					.byte NN	;wh_Flags	dictionary flags
=55272					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d86d	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d870					en = *	; remember here
>d86b	03					.byte CL	;wh_CodeLength
>d870	8d					.byte $8d
>d871	73 74 61 2e 78			L1:	.text "sta.x"	;  name of word as a string, ending at wh_NameLastChar
>d876	05					.byte (("sta.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d877	e8 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d879	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d87a	08					.byte NN	;wh_Flags	dictionary flags
=55286					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d87b	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d87e					en = *	; remember here
>d879	03					.byte CL	;wh_CodeLength
>d87e	9d					.byte $9d
>d87f	73 74 61 2e 79			L1:	.text "sta.y"	;  name of word as a string, ending at wh_NameLastChar
>d884	25					.byte (("sta.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d885	f6 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d887	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d888	08					.byte NN	;wh_Flags	dictionary flags
=55300					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d889	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d88c					en = *	; remember here
>d887	03					.byte CL	;wh_CodeLength
>d88c	99					.byte $99
>d88d	73 74 61 2e 7a			L1:	.text "sta.z"	;  name of word as a string, ending at wh_NameLastChar
>d892	45					.byte (("sta.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d893	04 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d895	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d896	08					.byte NN	;wh_Flags	dictionary flags
=55314					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d897	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d89a					en = *	; remember here
>d895	03					.byte CL	;wh_CodeLength
>d89a	85					.byte $85
>d89b	73 74 61 2e 7a 69 79		L1:	.text "sta.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d8a2	27					.byte (("sta.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d8a3	12 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d8a5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d8a6	08					.byte NN	;wh_Flags	dictionary flags
=55330					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d8a7	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d8aa					en = *	; remember here
>d8a5	03					.byte CL	;wh_CodeLength
>d8aa	91					.byte $91
>d8ab	73 74 61 2e 7a 78		L1:	.text "sta.zx"	;  name of word as a string, ending at wh_NameLastChar
>d8b1	06					.byte (("sta.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d8b2	22 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d8b4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d8b5	08					.byte NN	;wh_Flags	dictionary flags
=55345					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d8b6	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d8b9					en = *	; remember here
>d8b4	03					.byte CL	;wh_CodeLength
>d8b9	95					.byte $95
>d8ba	73 74 61 2e 7a 78 69		L1:	.text "sta.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d8c1	27					.byte (("sta.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d8c2	31 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d8c4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d8c5	08					.byte NN	;wh_Flags	dictionary flags
=55361					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d8c6	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d8c9					en = *	; remember here
>d8c4	03					.byte CL	;wh_CodeLength
>d8c9	81					.byte $81
>d8ca	73 74 78			L1:	.text "stx"	;  name of word as a string, ending at wh_NameLastChar
>d8cd	03					.byte (("stx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d8ce	41 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d8d0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d8d1	08					.byte NN	;wh_Flags	dictionary flags
=55373					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d8d2	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d8d5					en = *	; remember here
>d8d0	03					.byte CL	;wh_CodeLength
>d8d5	8e					.byte $8e
>d8d6	73 74 78 2e 7a			L1:	.text "stx.z"	;  name of word as a string, ending at wh_NameLastChar
>d8db	45					.byte (("stx.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d8dc	4d d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d8de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d8df	08					.byte NN	;wh_Flags	dictionary flags
=55387					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d8e0	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d8e3					en = *	; remember here
>d8de	03					.byte CL	;wh_CodeLength
>d8e3	86					.byte $86
>d8e4	73 74 78 2e 7a 79		L1:	.text "stx.zy"	;  name of word as a string, ending at wh_NameLastChar
>d8ea	26					.byte (("stx.zy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d8eb	5b d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d8ed	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d8ee	08					.byte NN	;wh_Flags	dictionary flags
=55402					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d8ef	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d8f2					en = *	; remember here
>d8ed	03					.byte CL	;wh_CodeLength
>d8f2	96					.byte $96
>d8f3	73 74 79			L1:	.text "sty"	;  name of word as a string, ending at wh_NameLastChar
>d8f6	23					.byte (("sty"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d8f7	6a d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d8f9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d8fa	08					.byte NN	;wh_Flags	dictionary flags
=55414					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d8fb	20 38 d1	jsr $d138		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d8fe					en = *	; remember here
>d8f9	03					.byte CL	;wh_CodeLength
>d8fe	8c					.byte $8c
>d8ff	73 74 79 2e 7a			L1:	.text "sty.z"	;  name of word as a string, ending at wh_NameLastChar
>d904	45					.byte (("sty.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d905	76 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d907	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d908	08					.byte NN	;wh_Flags	dictionary flags
=55428					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d909	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d90c					en = *	; remember here
>d907	03					.byte CL	;wh_CodeLength
>d90c	84					.byte $84
>d90d	73 74 79 2e 7a 78		L1:	.text "sty.zx"	;  name of word as a string, ending at wh_NameLastChar
>d913	06					.byte (("sty.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d914	84 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d916	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d917	08					.byte NN	;wh_Flags	dictionary flags
=55443					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d918	20 22 d1	jsr $d122		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d91b					en = *	; remember here
>d916	03					.byte CL	;wh_CodeLength
>d91b	94					.byte $94
>d91c	74 61 78			L1:	.text "tax"	;  name of word as a string, ending at wh_NameLastChar
>d91f	03					.byte (("tax"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d920	93 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d922	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d923	08					.byte NN	;wh_Flags	dictionary flags
=55455					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d924	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d927					en = *	; remember here
>d922	03					.byte CL	;wh_CodeLength
>d927	aa					.byte $aa
>d928	74 61 79			L1:	.text "tay"	;  name of word as a string, ending at wh_NameLastChar
>d92b	23					.byte (("tay"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d92c	9f d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d92e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d92f	08					.byte NN	;wh_Flags	dictionary flags
=55467					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d930	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d933					en = *	; remember here
>d92e	03					.byte CL	;wh_CodeLength
>d933	a8					.byte $a8
>d934	74 73 78			L1:	.text "tsx"	;  name of word as a string, ending at wh_NameLastChar
>d937	03					.byte (("tsx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d938	ab d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d93a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d93b	08					.byte NN	;wh_Flags	dictionary flags
=55479					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d93c	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d93f					en = *	; remember here
>d93a	03					.byte CL	;wh_CodeLength
>d93f	ba					.byte $BA
>d940	74 78 61			L1:	.text "txa"	;  name of word as a string, ending at wh_NameLastChar
>d943	23					.byte (("txa"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d944	b7 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d946	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d947	08					.byte NN	;wh_Flags	dictionary flags
=55491					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d948	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d94b					en = *	; remember here
>d946	03					.byte CL	;wh_CodeLength
>d94b	8a					.byte $8a
>d94c	74 78 73			L1:	.text "txs"	;  name of word as a string, ending at wh_NameLastChar
>d94f	63					.byte (("txs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d950	c3 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d952	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d953	08					.byte NN	;wh_Flags	dictionary flags
=55503					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d954	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d957					en = *	; remember here
>d952	03					.byte CL	;wh_CodeLength
>d957	9a					.byte $9a
>d958	74 79 61			L1:	.text "tya"	;  name of word as a string, ending at wh_NameLastChar
>d95b	23					.byte (("tya"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d95c	cf d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d95e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d95f	08					.byte NN	;wh_Flags	dictionary flags
=55515					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d960	20 41 d1	jsr $d141		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d963					en = *	; remember here
>d95e	03					.byte CL	;wh_CodeLength
>d963	98					.byte $98
=55515					asm_table = WordListLink ; head of instruction word list for disassembler
>d964	70 75 73 68 2d 61		L1:	.text "push-a"	;  name of word as a string, ending at wh_NameLastChar
>d96a	26					.byte (("push-a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d96b	db d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d96d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d96e	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55530					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d96f	a9 eb		lda #$eb			lda #<PushZA
.d971	a0 b8		ldy #$b8			ldy #>PushZA
.d973	4c 48 ce	jmp $ce48			jmp Jsr_Comma_YA
=7					CL	.var *-(WordListLink+wh_Xt)
=$d976					en = *	; remember here
>d96d	07					.byte CL	;wh_CodeLength
>d976	2d 2d 3e			L1:	.text "-->"	;  name of word as a string, ending at wh_NameLastChar
>d979	c3					.byte (("-->"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d97a	ea d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d97c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d97d	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55545					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d97e	4c 2c cb	jmp $cb2c			jmp Here
=3					CL	.var *-(WordListLink+wh_Xt)
=$d981					en = *	; remember here
>d97c	03					.byte CL	;wh_CodeLength
>d981	3c 6a				L1:	.text "<j"	;  name of word as a string, ending at wh_NameLastChar
>d983	42					.byte (("<j"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d984	f9 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d986	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d987	04					.byte IM	;wh_Flags	dictionary flags
=55555					WordListLink ::= *-wh_xt ; remember the nt of this word for later
=0					CL	.var *-(WordListLink+wh_Xt)
=$d988					en = *	; remember here
>d986	00					.byte CL	;wh_CodeLength
.d988	60		rts				rts
>d989	3c 62				L1:	.text "<b"	;  name of word as a string, ending at wh_NameLastChar
>d98b	42					.byte (("<b"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d98c	03 d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d98e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d98f	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55563					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d990					asm_back_branch:
.d990	20 2c cb	jsr $cb2c			jsr Here		; ( addr-l addr-h )
.d993	20 cd cc	jsr $cccd			jsr Minus		; ( offset )
.d996	a9 fe		lda #$fe			lda #$fe
.d998	4c 4f cb	jmp $cb4f			jmp Minus_A
=11					CL	.var *-(WordListLink+wh_Xt)
=$d99b					en = *	; remember here
>d98e	0b					.byte CL	;wh_CodeLength
>d99b	44 69 73 41 73 6d		L1:	.text "DisAsm"	;  name of word as a string, ending at wh_NameLastChar
>d9a1	a6					.byte (("DisAsm"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d9a2	0b d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d9a4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d9a5	08					.byte NN	;wh_Flags	dictionary flags
=55585					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d9a6					DisAsm:
.d9a6	20 3c c5	jsr $c53c			jsr Bounds		; ( addr_end addr )
.d9a9					_instr:
.d9a9	20 1d b5	jsr $b51d			jsr underflow_2
.d9ac	b5 24		lda $24,x			lda DStack+0,x		; addr >= addr_end?
.d9ae	d5 26		cmp $26,x			cmp DStack+2,x
.d9b0	b5 25		lda $25,x			lda DStack+1,x
.d9b2	f5 27		sbc $27,x			sbc DStack+3,x
.d9b4	90 03		bcc $d9b9			bcc +
.d9b6	4c 05 c6	jmp $c605			jmp Two_drop		; discard parms & return
.d9b9					+
.d9b9	20 28 ac	jsr $ac28			jsr CR			; new line
.d9bc	20 80 d0	jsr $d080			jsr Dup			; print address
.d9bf	20 bd a9	jsr $a9bd			jsr Dot_Hex
.d9c2	20 fb ce	jsr $cefb			jsr Space
.d9c5	a1 24		lda ($24,x)			lda (DStack+0,x)	; print opcode byte
.d9c7	20 08 db	jsr $db08			jsr _print_a
.d9ca	a1 24		lda ($24,x)			lda (DStack+0,x)	; save opcode
.d9cc	85 16		sta $16				sta tmp2
.d9ce	20 60 cb	jsr $cb60			jsr One_plus
.d9d1	a9 db		lda #$db			lda #<asm_table		; for each asm opcode word
.d9d3	a0 d8		ldy #$d8			ldy #>asm_table
.d9d5	85 14		sta $14				sta tmp1+0
.d9d7	84 15		sty $15				sty tmp1+1
.d9d9	d0 0f		bne $d9ea			bne _WTest
.d9db	a0 82		ldy #$82	_WNext:		ldy #wh_WordListLink+1	;   next entry
.d9dd	b1 14		lda ($14),y			lda (tmp1),y
.d9df	f0 2e		beq $da0f			beq _unknown
.d9e1	48		pha				pha
.d9e2	88		dey				dey
.d9e3	b1 14		lda ($14),y			lda (tmp1),y
.d9e5	85 14		sta $14				sta tmp1+0
.d9e7	68		pla				pla
.d9e8	85 15		sta $15				sta tmp1+1
.d9ea	a0 88		ldy #$88	_WTest:		ldy #wh_Xt+3		;   opcode match?
.d9ec	b1 14		lda ($14),y			lda (tmp1),y
.d9ee	c5 16		cmp $16				cmp tmp2
.d9f0	d0 e9		bne $d9db			bne _WNext
.d9f2	a5 16		lda $16				lda tmp2		; save opcode
.d9f4	48		pha				pha
.d9f5	a5 15		lda $15				lda tmp1+1		; save its nt
.d9f7	48		pha				pha
.d9f8	a5 14		lda $14				lda tmp1+0
.d9fa	48		pha				pha
.d9fb	a0 86		ldy #$86			ldy #wh_xt+1		; get processor routine addr lo byte from JSR
.d9fd	b1 14		lda ($14),y			lda (tmp1),y
.d9ff	c9 41		cmp #$41			cmp #<asm_0		; goto disasm processor
.da01	f0 17		beq $da1a			beq _c0
.da03	c9 22		cmp #$22			cmp #<asm_1
.da05	f0 49		beq $da50			beq _c1
.da07	c9 38		cmp #$38			cmp #<asm_2
.da09	f0 61		beq $da6c			beq _c2
.da0b	c9 02		cmp #$02			cmp #<asm_r
.da0d	f0 18		beq $da27			beq _cr
.da0f					_unknown:
.da0f	20 e9 da	jsr $dae9			jsr _tab		; to source area
.da12	a9 3f		lda #$3f			lda #'?'
.da14	20 ee ce	jsr $ceee			jsr Emit_A
.da17	4c a9 d9	jmp $d9a9			jmp _instr
.da1a					_c0:
.da1a	20 e9 da	jsr $dae9			jsr _tab		; to source area
.da1d	68		pla				pla			; get opcode word nt
.da1e	a8		tay				tay
.da1f	68		pla				pla
.da20	20 ee da	jsr $daee			jsr _print_opcode
.da23	68		pla				pla			; discard opcode
.da24	4c a9 d9	jmp $d9a9			jmp _instr
.da27					_cr:
.da27	20 ff da	jsr $daff			jsr _get_byte		; get displacement byte
.da2a	a0 00		ldy #$00			ldy #0			; sign extend displacement
.da2c	09 00		ora #$00			ora #0
.da2e	10 01		bpl $da31			bpl +
.da30	88		dey				dey
.da31	20 b9 b8	jsr $b8b9	+		jsr PushYA
.da34	20 80 d0	jsr $d080			jsr Dup			; save for TypeSymbol
.da37	20 e9 da	jsr $dae9			jsr _tab		; to source area
.da3a	20 19 cd	jsr $cd19			jsr U_Dot		; print dest address
.da3d	68		pla				pla			; get opcode word nt
.da3e	a8		tay				tay
.da3f	68		pla				pla
.da40	20 ee da	jsr $daee			jsr _print_opcode
.da43	68		pla				pla			; discard opcode
.da44	20 57 d0	jsr $d057			jsr Over		; calc dest addr
.da47	20 b4 cc	jsr $ccb4			jsr Plus
.da4a	20 9e 81	jsr $819e			jsr TypeSymbol		; print dest addr symbolic
.da4d	4c a9 d9	jmp $d9a9			jmp _instr
.da50					_c1:
.da50	20 ff da	jsr $daff			jsr _get_byte		; get operand
.da53	20 eb b8	jsr $b8eb			jsr PushZA
.da56	20 e9 da	jsr $dae9			jsr _tab		; to source area
.da59	20 80 d0	jsr $d080			jsr Dup
.da5c	20 19 cd	jsr $cd19			jsr U_Dot		; print operand
.da5f	68		pla				pla			; get opcode word nt
.da60	a8		tay				tay
.da61	68		pla				pla
.da62	20 ee da	jsr $daee			jsr _print_opcode
.da65	68		pla				pla			; discard opcode
.da66	20 9e 81	jsr $819e			jsr TypeSymbol
.da69	4c a9 d9	jmp $d9a9			jmp _instr
.da6c					_c2:
.da6c	20 ff da	jsr $daff			jsr _get_byte		; get operand lo byte
.da6f	48		pha				pha
.da70	20 ff da	jsr $daff			jsr _get_byte		; get operand hi byte
.da73	ca		dex				dex			; push operand bytes
.da74	ca		dex				dex
.da75	95 25		sta $25,x			sta DStack+1,x
.da77	68		pla				pla
.da78	95 24		sta $24,x			sta DStack+0,x
.da7a	20 e9 da	jsr $dae9			jsr _tab		; to source area
.da7d	20 80 d0	jsr $d080			jsr Dup
.da80	20 19 cd	jsr $cd19			jsr U_Dot		; print operand
.da83	68		pla				pla			; AY= opcode word nt
.da84	a8		tay				tay
.da85	68		pla				pla
.da86	20 ee da	jsr $daee			jsr _print_opcode
.da89	20 80 d0	jsr $d080			jsr Dup
.da8c	20 9e 81	jsr $819e			jsr TypeSymbol		; print operand as symbol
.da8f	68		pla				pla			; get opcode
.da90	c9 20		cmp #$20			cmp #$20		;  JSR
.da92	f0 09		beq $da9d			beq _jsr
.da94	e8		inx		_jdrop:		inx			; Drop operand
.da95	e8		inx				inx
.da96	4c a9 d9	jmp $d9a9			jmp _instr		; ( addr_end addr )
.da99	e8		inx		_2drop:		inx			; Drop jsr_nt
.da9a	e8		inx				inx
.da9b	d0 f7		bne $da94			bne _jdrop
.da9d					_jsr:
.da9d	20 de b4	jsr $b4de			jsr PopYA
.daa0	c9 ca		cmp #$ca			cmp #<sliteral_runtime	; string literal?
.daa2	d0 42		bne $dae6			bne _not_sliteral
.daa4	c0 b9		cpy #$b9			cpy #>sliteral_runtime
.daa6	d0 3e		bne $dae6			bne _not_sliteral
.daa8	20 28 ac	jsr $ac28			jsr CR
.daab	20 80 d0	jsr $d080			jsr Dup			; ( addr_end addr addr )
.daae	20 bd a9	jsr $a9bd			jsr Dot_Hex
.dab1	20 fb ce	jsr $cefb			jsr Space
.dab4	20 80 d0	jsr $d080			jsr Dup			; ( addr_end ? addr )
.dab7	20 ff da	jsr $daff			jsr _get_byte		; get JMP opcode
.daba	20 ff da	jsr $daff			jsr _get_byte		; get JMP addr lo byte
.dabd	95 26		sta $26,x			sta DStack+2,x
.dabf	20 ff da	jsr $daff			jsr _get_byte		; get JMP addr hi byte
.dac2	95 27		sta $27,x			sta DStack+3,x		; ( addr_end string_end addr )
.dac4	20 28 ac	jsr $ac28			jsr CR
.dac7	20 80 d0	jsr $d080			jsr Dup
.daca	20 bd a9	jsr $a9bd			jsr Dot_Hex
.dacd	20 fb ce	jsr $cefb			jsr Space
.dad0	b5 24		lda $24,x	_slit_11:	lda DStack+0,x		; done with string data?
.dad2	d5 26		cmp $26,x			cmp DStack+2,x
.dad4	b5 25		lda $25,x			lda DStack+1,x
.dad6	f5 27		sbc $27,x			sbc DStack+3,x
.dad8	b0 06		bcs $dae0			bcs _slit_19
.dada	20 ff da	jsr $daff			jsr _get_byte
.dadd	4c d0 da	jmp $dad0			jmp _slit_11
.dae0					_slit_19:
.dae0	20 8c ca	jsr $ca8c			jsr Nip			; ( addr_end addr )
.dae3	4c a9 d9	jmp $d9a9			jmp _instr
.dae6					_not_sliteral:
.dae6	4c a9 d9	jmp $d9a9			jmp _instr
.dae9					_tab:
.dae9	a9 09		lda #$09			lda #9
.daeb	4c ee ce	jmp $ceee			jmp Emit_A
.daee					_print_opcode:
.daee	20 8e d0	jsr $d08e			jsr PushAY		; save opcode word nt
.daf1	20 fb ce	jsr $cefb			jsr Space
.daf4	20 fb be	jsr $befb			jsr Name_To_String	; get name string
.daf7	4c 08 cf	jmp $cf08			jmp Type		; type word name
.dafa					_get_byte_silent:
.dafa	a1 24		lda ($24,x)			lda (DStack+0,x)
.dafc	4c 60 cb	jmp $cb60			jmp One_plus
.daff					_get_byte:
.daff	20 fa da	jsr $dafa			jsr _get_byte_silent
.db02	48		pha				pha
.db03	20 08 db	jsr $db08			jsr _print_a
.db06	68		pla				pla
.db07	60		rts				rts
.db08					_print_a:
.db08	20 eb b8	jsr $b8eb			jsr PushZA
.db0b	20 9b a9	jsr $a99b			jsr C_Dot_Hex
.db0e	4c fb ce	jmp $cefb			jmp Space
=55585					assembler_dictionary_start = WordListLink ; END of ASSEMBLER-WORDLIST
=0					WordListLink .var 0	; start wordlist
>db11	6c				L1:	.text "l"	;  name of word as a string, ending at wh_NameLastChar
>db12	81					.byte (("l"[-1]&7)<<5)+(*-L1)	;wh_HNL
>db13	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>db15	03					.byte 3		;wh_CodeLength  (with placeholder value)
>db16	08					.byte NN	;wh_Flags	dictionary flags
=55954					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.db17	4c 71 a5	jmp $a571	Editor_l:	jmp ListScr
=3					CL	.var *-(WordListLink+wh_Xt)
=$db1a					en = *	; remember here
>db15	03					.byte CL	;wh_CodeLength
.db1a					Editor_Screen_Helper:
.db1a	20 80 d0	jsr $d080			jsr Dup
.db1d	20 75 a3	jsr $a375			jsr Scr
.db20	20 cd cf	jsr $cfcd			jsr Store
.db23	4c 89 a4	jmp $a489			jmp Buffer
>db26	65 6e 74 65 72 2d 73 63		L1:	.text "enter-screen"	;  name of word as a string, ending at wh_NameLastChar
>db2e	72 65 65 6e
>db32	cc					.byte (("enter-screen"[-1]&7)<<5)+(*-L1)	;wh_HNL
>db33	92 da					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>db35	03					.byte 3		;wh_CodeLength  (with placeholder value)
>db36	08					.byte NN	;wh_Flags	dictionary flags
=55986					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.db37					Editor_Enter_Screen:
.db37	20 1a db	jsr $db1a			jsr Editor_Screen_Helper
.db3a	a9 00		lda #$00			lda #0			; Overwrite the lines one at a time.
.db3c	95 24		sta $24,x	_loop:		sta DStack+0,x
.db3e	20 eb b8	jsr $b8eb			jsr PushZA		; Put the current line number on the stack.
.db41	20 a5 db	jsr $dba5			jsr Editor_o		; prompt for overwrite.
.db44	f6 24		inc $24,x			inc DStack+0,x		; Move on to the next line.
.db46	b5 24		lda $24,x			lda DStack+0,x
.db48	c9 10		cmp #$10			cmp #16
.db4a	90 f0		bcc $db3c			bcc _loop
.db4c	e8		inx				inx			; Drop work area
.db4d	e8		inx				inx
=23					CL	.var *-(WordListLink+wh_Xt)
=$db4e					en = *	; remember here
>db35	17					.byte CL	;wh_CodeLength
.db4e	60		rts				rts
>db4f	6c 69 6e 65			L1:	.text "line"	;  name of word as a string, ending at wh_NameLastChar
>db53	a4					.byte (("line"[-1]&7)<<5)+(*-L1)	;wh_HNL
>db54	b2 da					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>db56	03					.byte 3		;wh_CodeLength  (with placeholder value)
>db57	08					.byte NN	;wh_Flags	dictionary flags
=56019					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.db58					Editor_line:
.db58	a9 06		lda #$06			lda #6		; Multiply the TOS by 64 (chars/line) to compute offset.
.db5a	20 53 cc	jsr $cc53			jsr LShift_A	; *64 is same as left shift 6 times.
.db5d	20 75 a3	jsr $a375			jsr Scr
.db60	20 ea cf	jsr $cfea			jsr Fetch
.db63	20 1f a4	jsr $a41f			jsr Block
.db66	4c b4 cc	jmp $ccb4			jmp Plus
=17					CL	.var *-(WordListLink+wh_Xt)
=$db69					en = *	; remember here
>db56	11					.byte CL	;wh_CodeLength
>db69	65 72 61 73 65 2d 73 63		L1:	.text "erase-screen"	;  name of word as a string, ending at wh_NameLastChar
>db71	72 65 65 6e
>db75	cc					.byte (("erase-screen"[-1]&7)<<5)+(*-L1)	;wh_HNL
>db76	d3 da					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>db78	03					.byte 3		;wh_CodeLength  (with placeholder value)
>db79	08					.byte NN	;wh_Flags	dictionary flags
=56053					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.db7a					Editor_Erase_Screen:
.db7a	20 1a db	jsr $db1a			jsr Editor_Screen_Helper
.db7d	a9 00		lda #$00			lda #<1024
.db7f	a0 04		ldy #$04			ldy #>1024
.db81	20 b9 b8	jsr $b8b9			jsr PushYA
.db84	20 45 bf	jsr $bf45			jsr Blank		; Erase the entire block (fill with spaces).
.db87	4c 75 a4	jmp $a475			jmp Update		; Mark buffer as updated.
=16					CL	.var *-(WordListLink+wh_Xt)
=$db8a					en = *	; remember here
>db78	10					.byte CL	;wh_CodeLength
>db8a	65 6c				L1:	.text "el"	;  name of word as a string, ending at wh_NameLastChar
>db8c	82					.byte (("el"[-1]&7)<<5)+(*-L1)	;wh_HNL
>db8d	f5 da					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>db8f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>db90	08					.byte NN	;wh_Flags	dictionary flags
=56076					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.db91					Editor_el:
.db91	20 58 db	jsr $db58			jsr Editor_line
.db94	a9 40		lda #$40			lda #64			;(# of chars/line)
.db96	20 eb b8	jsr $b8eb			jsr PushZA
.db99	20 45 bf	jsr $bf45			jsr Blank		; Fill with spaces.
.db9c	4c 75 a4	jmp $a475			jmp Update		; Mark buffer as updated.
=14					CL	.var *-(WordListLink+wh_Xt)
=$db9f					en = *	; remember here
>db8f	0e					.byte CL	;wh_CodeLength
>db9f	6f				L1:	.text "o"	;  name of word as a string, ending at wh_NameLastChar
>dba0	e1					.byte (("o"[-1]&7)<<5)+(*-L1)	;wh_HNL
>dba1	0c db					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>dba3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>dba4	08					.byte NN	;wh_Flags	dictionary flags
=56096					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.dba5					Editor_o:
.dba5	20 28 ac	jsr $ac28			jsr CR
.dba8	20 80 d0	jsr $d080			jsr Dup
.dbab	a9 02		lda #$02			lda #2
.dbad	20 4d cd	jsr $cd4d			jsr U_Dot_R_A
.dbb0	20 fb ce	jsr $cefb			jsr Space
.dbb3	a9 2a		lda #$2a			lda #'*'
.dbb5	20 ee ce	jsr $ceee			jsr Emit_A
.dbb8	20 fb ce	jsr $cefb			jsr Space
.dbbb	20 58 db	jsr $db58			jsr Editor_line
.dbbe	20 80 d0	jsr $d080			jsr Dup		; Save a copy of the line address for later.
.dbc1	a9 40		lda #$40			lda #64		; chars/line
.dbc3	20 eb b8	jsr $b8eb			jsr PushZA
.dbc6	20 c0 c3	jsr $c3c0			jsr Accept
.dbc9	20 80 d0	jsr $d080			jsr Dup
.dbcc	20 aa cf	jsr $cfaa			jsr Not_Rot
.dbcf	20 b4 cc	jsr $ccb4			jsr Plus
.dbd2	a9 40		lda #$40			lda #64		; chars/line
.dbd4	20 eb b8	jsr $b8eb			jsr PushZA
.dbd7	20 84 cf	jsr $cf84			jsr Rot
.dbda	20 cd cc	jsr $cccd			jsr Minus
.dbdd	20 45 bf	jsr $bf45			jsr Blank
.dbe0	4c 75 a4	jmp $a475			jmp Update
=62					CL	.var *-(WordListLink+wh_Xt)
=$dbe3					en = *	; remember here
>dba3	3e					.byte CL	;wh_CodeLength
=56096					editor_dictionary_start = WordListLink ; END of EDITOR-WORDLIST

;******  Processing file: platform/../strings.asm

>dbe3	20 6f 6b 00			str_ok:         .text " ok", 0         ; note space at beginning
>dbe7	20 63 6f 6d 70 69 6c 65		str_compiled:   .text " compiled", 0   ; note space at beginning
>dbef	64 00
>dbf1	72 65 64 65 66 69 6e 65		str_redefined:  .text "redefined ", 0  ; note space at end
>dbf9	64 20 00
>dbfc	41 73 73 65 6d 62 6c 65		str_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>dc04	72 20 00
>dc07	45 64 69 74 6f 72 20 00		str_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>dc0f	46 6f 72 74 68 20 00		str_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>dc16	52 6f 6f 74 20 00		str_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>dc1c	66 6c 61 67 73 3a 00		str_see_flags:  .text "flags:", 0
>dc23	6e 74 3a 20 24 00		str_see_nt:     .text "nt: $", 0
>dc29	78 74 3a 20 24 00		str_see_xt:     .text "xt: $", 0
>dc2f	73 69 7a 65 3a 20 23 00		str_see_size:   .text "size: #", 0
.dc37					Exception_Text_List:
>dc37	ff 00					.text $100+err_Abort,0
>dc39	fe 00					.text $100+err_AbortQuote,0
>dc3b	fd 53 74 61 63 6b 20 4f			.text $100+err_Stack_Overflow,"Stack Overflow",0
>dc43	76 65 72 66 6c 6f 77 00
>dc4b	fc 53 74 61 63 6b 20 55			.text $100+err_Stack_Underflow,"Stack Underflow",0
>dc53	6e 64 65 72 66 6c 6f 77 00
>dc5c	f9 64 6f 2d 6c 6f 6f 70			.text $100+err_DoLoop_TooDeep,"do-loops nested too deeply during execution",0
>dc64	73 20 6e 65 73 74 65 64 20 74 6f 6f 20 64 65 65
>dc74	70 6c 79 20 64 75 72 69 6e 67 20 65 78 65 63 75
>dc84	74 69 6f 6e 00
>dc89	f6 44 69 76 69 64 65 20			.text $100+err_DivideBy0,"Divide by 0",0
>dc91	62 79 20 30 00
>dc96	f5 6f 75 74 20 6f 66 20			.text $100+err_OutOfRange,"out of range",0
>dc9e	72 61 6e 67 65 00
>dca4	f4 61 72 67 75 6d 65 6e			.text $100+err_ArgTypeMismatch,"argument type mismatch",0
>dcac	74 20 74 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>dcbc	f3 55 6e 64 65 66 69 6e			.text $100+err_UndefinedWord,"Undefined word",0
>dcc4	65 64 20 77 6f 72 64 00
>dccc	f2 49 6e 74 65 72 70 72			.text $100+err_CompileOnly,"Interpreting a Compile-only word",0
>dcd4	65 74 69 6e 67 20 61 20 43 6f 6d 70 69 6c 65 2d
>dce4	6f 6e 6c 79 20 77 6f 72 64 00
>dcee	eb 75 6e 73 75 70 70 6f			.text $100+err_Unsupported,"unsupported operation",0 ;  (e.g., AT-XY on a too-dumb terminal)
>dcf6	72 74 65 64 20 6f 70 65 72 61 74 69 6f 6e 00
>dd05	ea 63 6f 6e 74 72 6f 6c			.text $100+err_ControlMismatch,"control structure mismatch",0
>dd0d	20 73 74 72 75 63 74 75 72 65 20 6d 69 73 6d 61
>dd1d	74 63 68 00
>dd21	e0 69 6e 76 61 6c 69 64			.text $100+err_InvalidName,"invalid name",0 ; argument (e.g., TO name)
>dd29	20 6e 61 6d 65 00
>dd2f	df 62 6c 6f 63 6b 20 72			.text $100+err_BlockRead,"block read",0
>dd37	65 61 64 00
>dd3b	de 62 6c 6f 63 6b 20 77			.text $100+err_BlockWrite,"block write",0
>dd43	72 69 74 65 00
>dd48	d6 46 50 20 64 69 76 69			.text $100+err_FPDivideBy0,"FP divide by zero",0
>dd50	64 65 20 62 79 20 7a 65 72 6f 00
>dd5b	d5 46 50 20 72 65 73 75			.text $100+err_FPOutOfRange,"FP result out of range",0
>dd63	6c 74 20 6f 75 74 20 6f 66 20 72 61 6e 67 65 00
>dd73	d4 46 50 20 73 74 61 63			.text $100+err_FPStackOverflow,"FP stack overflow",0
>dd7b	6b 20 6f 76 65 72 66 6c 6f 77 00
>dd86	d3 46 50 20 73 74 61 63			.text $100+err_FPStackUnderflow,"FP stack underflow",0
>dd8e	6b 20 75 6e 64 65 72 66 6c 6f 77 00
>dd9a	d2 46 50 20 69 6e 76 61			.text $100+err_FPInvalidArg,"FP invalid argument",0
>dda2	6c 69 64 20 61 72 67 75 6d 65 6e 74 00
>ddaf	ca 46 50 20 75 6e 64 65			.text $100+err_FPUnderflow,"FP underflow",0
>ddb7	72 66 6c 6f 77 00
>ddbd	c5 41 4c 4c 4f 43 41 54			.text $100+err_Allocate,"ALLOCATE",0
>ddc5	45 00
>ddc7	c4 46 52 45 45 00			.text $100+err_Free,"FREE",0
>ddcd	6b 52 65 66 69 6c 6c 00			.text $100+err_Refill,"Refill",0
>ddd5	6a 44 65 66 65 72 20 6e			.text $100+err_Defer,"Defer not set",0
>dddd	6f 74 20 73 65 74 00
>dde4	69 41 6c 72 65 61 64 79			.text $100+err_AlreadyInterpreting,"Already interpreting",0
>ddec	20 69 6e 74 65 72 70 72 65 74 69 6e 67 00
>ddfa	68 41 6c 72 65 61 64 79			.text $100+err_AlreadyCompiling,"Already compiling",0
>de02	20 63 6f 6d 70 69 6c 69 6e 67 00
>de0d	66 4e 6f 20 77 6f 72 64			.text $100+err_TooManyWordlists,"No wordlists available",0
>de15	6c 69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>de25	00					.text 0 ; end of list

;******  Return to file: platform/../taliforth.asm


;******  Return to file: platform/platform-py65mon.asm

>0766					hist_buff: .fill 8*128	; Input History for ACCEPT
.0b66					cp0:
=$f001					c65_putc	= $f001 ;  putc    Write here to send the byte to stdout
=$f003					c65_kbhit	= $f003 ;  kbit    Return non-zero if key ready to fetch with getc
=$f004					c65_getc	= $f004 ;  getc    Non-blocking read from stdin, returns 0 if no byte ready
=$f006					c65_start	= $f006 ;  start   Reading here starts the cycle counter
=$f007					c65_stop	= $f007 ;  stop    Reading here stops the cycle counter
=$f008					c65_cycles	= $f008 ; cycles  Current 32 bit cycle count in NUXI order
=$f010					c65_blkio	= $f010 ;  blkio   Write here to execute a block IO action (see below)
=$f011					c65_status	= $f011 ;  status  Read block IO status here
=$f012					c65_blknum	= $f012 ; blknum  word, Block number to read/write
=$f014					c65_buffer	= $f014 ; buffer  word, Start of 1024 byte memory buffer to read/write
.f100					v_nmi:
.f100					v_reset:
.f100					v_irq:
.f100					kernel_init:
.f100	78		sei		                sei             ; Disable interrupts
.f101	a2 00		ldx #$00	                ldx #0
.f103	bd 83 f1	lda $f183,x	-               lda s_kernel_id,x
.f106	f0 06		beq $f10e	                beq _done
.f108	20 21 f1	jsr $f121	                jsr kernel_putc
.f10b	e8		inx		                inx
.f10c	d0 f5		bne $f103	                bne -
.f10e					_done:
.f10e	2c 06 f0	bit $f006			bit c65_start		; start the cycle counter
.f111	4c 75 a1	jmp $a175	                jmp forth
.f114					kernel_getc:
.f114					_loop:
.f114	ee 35 03	inc $0335	                inc RndState+0	; randomize
.f117	ad 04 f0	lda $f004	                lda c65_getc
.f11a	f0 f8		beq $f114	                beq _loop
.f11c	60		rts		                rts
.f11d					kernel_havekey:
.f11d	ad 03 f0	lda $f003			lda c65_kbhit
.f120	60		rts				rts
.f121					kernel_putc:
.f121	8d 01 f0	sta $f001	                sta c65_putc
.f124	60		rts		                rts
.f125					platform_bye:
.f125	00		brk #		                brk
.f126					platform_CCAt:
.f126	ca		dex				dex			; allot DStack space
.f127	ca		dex				dex
.f128	ca		dex				dex
.f129	ca		dex				dex
.f12a	2c 07 f0	bit $f007			bit c65_stop		; stop the cycle counter so we can read it
.f12d	ad 08 f0	lda $f008			lda c65_cycles+0	; cycles  Current 32 bit cycle count in NUXI order
.f130	95 24		sta $24,x			sta DStack+0,x
.f132	ad 09 f0	lda $f009			lda c65_cycles+1
.f135	95 25		sta $25,x			sta DStack+1,x
.f137	ad 0a f0	lda $f00a			lda c65_cycles+2
.f13a	95 26		sta $26,x			sta DStack+2,x
.f13c	ad 0b f0	lda $f00b			lda c65_cycles+3
.f13f	95 27		sta $27,x			sta DStack+3,x
.f141	2c 06 f0	bit $f006			bit c65_start		; restart the cycle counter
.f144	60		rts		                rts
.f145					Platform_Block_Read:
.f145	20 58 f1	jsr $f158			jsr Platform_BlockParms
.f148	a9 01		lda #$01			lda #1			; read
.f14a	8d 10 f0	sta $f010			sta c65_blkio
.f14d	ad 11 f0	lda $f011			lda c65_status
.f150	f0 05		beq $f157			beq +
.f152	a9 df		lda #$df			lda #$100+err_BlockRead
.f154	20 67 b5	jsr $b567			jsr ThrowA
.f157	60		rts		+		rts
.f158					Platform_BlockParms:
.f158	20 de b4	jsr $b4de			jsr PopYA		; set block #
.f15b	8d 12 f0	sta $f012			sta c65_blknum+0
.f15e	8c 13 f0	sty $f013			sty c65_blknum+1
.f161	20 de b4	jsr $b4de			jsr PopYA		; set buffer addr
.f164	8d 14 f0	sta $f014			sta c65_buffer+0
.f167	8c 15 f0	sty $f015			sty c65_buffer+1
.f16a	a9 ff		lda #$ff			lda #$ff		; in case c65 isn't talking
.f16c	8d 11 f0	sta $f011			sta c65_status
.f16f	60		rts				rts
.f170					Platform_Block_Write:
.f170	20 58 f1	jsr $f158			jsr Platform_BlockParms
.f173	a9 02		lda #$02			lda #2			; write
.f175	8d 10 f0	sta $f010			sta c65_blkio
.f178	ad 11 f0	lda $f011			lda c65_status
.f17b	f0 05		beq $f182			beq +
.f17d	a9 de		lda #$de			lda #$100+err_BlockWrite
.f17f	20 67 b5	jsr $b567			jsr ThrowA
.f182	60		rts		+		rts
.f183					s_kernel_id:
>f183	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 remix default kernel for py65mon (31 May 2024)", AscLF, 0
>f18b	74 68 20 32 20 72 65 6d 69 78 20 64 65 66 61 75
>f19b	6c 74 20 6b 65 72 6e 65 6c 20 66 6f 72 20 70 79
>f1ab	36 35 6d 6f 6e 20 28 33 31 20 4d 61 79 20 32 30
>f1bb	32 34 29 0a 00
>fffa	00 f1				.word v_nmi
>fffc	00 f1				.word v_reset
>fffe	00 f1				.word v_irq

;******  End of listing
