
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/pu65mon-labelmap.txt --output TaliForth-py65mon.bin platform/platform-py65mon.asm
; Mon Jun 10 00:24:14 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

=$0100					RStack = $0100 ; begin of 6502 Return stack
=$ff					rsp0      = $ff		; initial Return Stack Pointer (6502 stack)
=$8000					cp_end = $8000 ; LastRAM byte available for Data
=84					padoffset = 84              ; offset from CP to PAD (holds number strings)
=					TALI_OPTIONAL_WORDS := [ "fp","fpe","fpieee","fptrancendentals","ed", "editor", "ramdrive", "block", "environment?", "assembler", "wordlist" ]
=["lf"]					TALI_OPTION_CR_EOL := [ "lf" ]
=$ff					bsize     = $ff		; size of input/output buffers
>0200					buffer0: .fill bsize	; input buffer

;******  Processing file: platform/../taliforth.asm

=-1					err_Abort		= -1
=-2					err_AbortQuote		= -2
=-3					err_Stack_Overflow	= -3
=-4					err_Stack_Underflow	= -4
=-5					err_Return_Stack_Overflow = -5
=-6					err_Return_Stack_Underflow = -6
=-7					err_DoLoop_TooDeep	= -7	; do-loops nested too deeply during execution
=-8					err_Dictionary_Overflow	= -8
=-9					err_InvalidMemoryAddr	= -9	; invalid memory address
=-10					err_DivideBy0		= -10	; division by zero
=-11					err_OutOfRange		= -11	; result out of range
=-12					err_ArgTypeMismatch	= -12	; argument type mismatch
=-13					err_UndefinedWord	= -13
=-14					err_CompileOnly		= -14	; interpreting a compile-only word
=-15					err_Forget		= -15	; invalid FORGET
=-16					err_EmptyName		= -16	; attempt to use zero-length string as a name
=-17					err_PicStringOverflow	= -17	; pictured numeric output string overflow
=-18					err_ParsedStringOverflow = -18	; parsed string overflow
=-19					err_NameTooLong		= -19	; definition name too long
=-20					err_WriteToRO		= -20	; write to a read-only location
=-21					err_Unsupported		= -21	; unsupported operation  (e.g., AT-XY on a too-dumb terminal)
=-22					err_ControlMismatch	= -22	; control structure mismatch
=-23					err_AddrAlignment	= -23	; address alignment exception
=-24					err_InvalidNumericArg	= -24	; invalid numeric argument
=-25					err_ReturnStackImbalance = -25	; return stack imbalance
=-26					err_LoopParmUnavailable = -26	; loop parameters unavailable
=-27					err_InvalidRecursion	= -27	; invalid recursion
=-28					err_UserInterrupt	= -28	; user interrupt
=-29					err_CompilerNesting	= -29	; compiler nesting
=-30					err_Obsolete		= -30	; obsolescent feature
=-31					err_NoBody		= -31	; >BODY used on non-CREATEd definition
=-32					err_InvalidName		= -32	; invalid name argument (e.g., TO name)
=-33					err_BlockRead		= -33	; block read exception
=-34					err_BlockWrite		= -34	; block write exception
=-35					err_InvalidBlock	= -35	; invalid block number
=-36					err_InvalidFilePosition = -36	; invalid file position
=-37					err_FileIO		= -37	; file I/O exception
=-38					err_FileMissing		= -38	; non-existent file
=-39					err_EndOfFile		= -39	; unexpected end of file
=-40					err_InvalidBase		= -40	; invalid BASE for floating point conversion
=-41					err_LossOfPrecision	= -41	; loss of precision
=-42					err_FPDivideBy0		= -42	; floating-point divide by zero
=-43					err_FPOutOfRange	= -43	; floating-point result out of range
=-44					err_FPStackOverflow	= -44	; floating-point stack overflow
=-45					err_FPStackUnderflow	= -45	; floating-point stack underflow
=-46					err_FPInvalidArg	= -46	; floating-point invalid argument
=-47					err_CompileWordsDeleted = -47	; compilation word list deleted
=-48					err_PostponeInvalid	= -48	; invalid POSTPONE
=-49					err_SearchOrderOverflow = -49	; search-order overflow
=-50					err_SearchOrderUnderflow = -50	; search-order underflow
=-51					err_CompileWordlistChanged = -51 ; compilation word list changed
=-52					err_ControlStackOverflow = -52	; control-flow stack overflow
=-53					err_ExceptionStackOverflow = -53 ; exception stack overflow
=-54					err_FPUnderflow		= -54	; floating-point underflow
=-55					err_FPFault		= -55	; floating-point unidentified fault
=-56					err_Quit		= -56	; QUIT
=-57					err_ConsoleIO		= -57	; exception in sending or receiving a character
=-58					err_BracketIf		= -58	; [IF], [ELSE], or [THEN] exception
=-59					err_Allocate		= -59	; ALLOCATE
=-60					err_Free		= -60	; FREE
=-61					err_Resize		= -61	; RESIZE
=-62					err_CloseFile		= -62	; CLOSE-FILE
=-63					err_CreateFile		= -63	; CREATE-FILE
=-64					err_DeleteFile		= -64	; DELETE-FILE
=-65					err_FilePosition	= -65	; FILE-POSITION
=-66					err_FileSize		= -66	; FILE-SIZE
=-67					err_FileStatus		= -67	; FILE-STATUS
=-68					err_FlushFile		= -68	; FLUSH-FILE
=-69					err_OpenFile		= -69	; OPEN-FILE
=-70					err_ReadFile		= -70	; READ-FILE
=-71					err_ReadLine		= -71	; READ-LINE
=-72					err_RenameFile		= -72	; RENAME-FILE
=-73					err_RepositionFile	= -73	; REPOSITION-FILE
=-74					err_ResizeFile		= -74	; RESIZE-FILE
=-75					err_WriteFile		= -75	; WRITE-FILE
=-76					err_WriteLine		= -76	; WRITE-LINE
=-77					err_MalformedXChar	= -77	; Malformed xchar
=-78					err_Substitute		= -78	; SUBSTITUTE
=-79					err_Replaces		= -79	; REPLACES
=-149					err_Refill		= -149	; Refill failed
=-150					err_Defer		= -150	; Defer not set
=-151					err_NotCompiling	= -151
=-152					err_AlreadyCompiling	= -152
=-153					err_BlockWords		= -153
=-154					err_wordlist     	= -154
.0000					zp0:
>0000					cp:	.word ?		; Compiler Pointer (see HERE)
>0002					InSrc:	.word ?		; input Source for SOURCE-ID
>0004					Cib:	.word ?		; address of current input buffer
>0006					CibLen:	.word ?		; length of current input buffer
>0008					ToIn:	.word ?		; pointer to CIB (>IN in Forth)
>000a					state:	.word ?		; STATE: -1 compile, 0 interpret
>000c					status: .word ?		; internal status flags
>000e					ToHold:	.byte ?		; index for formatted output
>000f					WorkWord: .word ?	; nt or xt of word being compiled (see status)
>0011					dp:	.word ?		; Dictionary Pointer temp
>0013					DoIndex: .word ?	; current Do index
>0015					tmp1:	.word ?		; temporary storage
>0017					tmp2:	.word ?		; temporary storage
>0019					tmp3:	.word ?		; temporary storage
>001b					tmp4:	.word ?		; temporary storage (tmpdsp)
>001d					tmp5:	.word ?		; temporary storage (tmptos)
>001f					editor1: .word ?	; temporary for editors
>0021					editor2: .word ?	; temporary for editors
>0023					editor3: .word ?	; temporary for editors
>0025					DStack:	.fill 20*2	; data stack
=40					DStack0 = *-DStack	;   initial Data Stack index value
.8000					Cold_zp_table:
>8000	65 0b					.word cp0		; cp
>8002	00 00					.word 0			; insrc (SOURCE-ID is 0 for keyboard)
>8004	00 02					.word buffer0		; cib
>8006	00 00					.word 0			; ciblen
>8008	00 00					.word 0			; toin
>800a	00 00					.word 0			; state (0 = interpret)
>800c	00 00					.word 0			; status
=14					Cold_zp_table_length = *-Cold_zp_table
.02ff					User0:
>02ff					PrecisionV: .byte ?	; # of decimal places for FP print
>0300					base:	.word ?		; number radix, default decimal
>0302					nc_limit: .word ?	; limit for Native Compile size
>0304					uf_strip: .word ?	; flag to strip underflow detection code
>0306					output:	.word ?		; vector for EMIT
>0308					input:	.word ?		; vector for KEY
>030a					HaveKey: .word ?	; vector for KEY?
>030c					BlkV:	.word ?		; BLK
>030e					ScrV:	.word ?		; SCR
>0310					CurrentV: .byte ?	; CURRENT (byte) (Compilation wordlist)
>0311					Num_WordlistsV: .byte ?	; #WORDLISTS (byte)
=12					max_wordlists = 12	; Maximum number of wordlists supported
>0312					WordlistsV: .fill 2*max_wordlists	; WORDLISTS (cells)
>032a					Num_OrderV: .byte ?	; #ORDER (byte)
>032b					Search_OrderV: .fill 9	; SEARCH-ORDER (bytes)
.0334					MarkEnd:
>0334					RndState: .dword ?	; random # state
=0					wid_Forth = 0
=1					wid_Editor = 1
=2					wid_Assembler = 2
=3					wid_Root = 3
.800e					Cold_user_table:
>800e	08					.byte 8			; PrecisionV
>800f	0a 00					.word 10		; base
>8011	08 00					.word 8			; nc-limit
>8013	00 00					.word 0			; uf_strip (off by default)
>8015	2a f0					.word kernel_putc	; output
>8017	21 f0					.word kernel_getc	; input
>8019	0b b2					.word Abort		; havekey
>801b	00 00					.word 0				; BLK
>801d	00 00					.word 0				; SCR
>801f	00					.byte 0				; CURRENT = FORTH-WORDLIST
>8020	04					.byte 4				; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>8021	fb cc					.word forth_dictionary_start	; FORTH-WORDLIST
>8023	34 d8					.word editor_dictionary_start	; EDITOR-WORDLIST
>8025	e6 d5					.word assembler_dictionary_start ; ASSEMBLER-WORDLIST
>8027	3f cd					.word root_dictionary_start	; ROOT-WORDLIST
>8029	00 00 00 00 00 00 00 00			.word 0,0,0,0,0,0,0,0		; User wordlists
>8031	00 00 00 00 00 00 00 00
>8039	02					.byte 2				; #ORDER
>803a	00 02 00 00 00 00 00 00			.byte wid_Forth,wid_Assembler,0,0,0,0,0,0,0	; search-order
>8042	00
=53					Cold_user_table_length = *-Cold_user_table
=$03					AscCC   = $03	; break (CTRL-c)
=$07					AscBELL = $07	; bell sound
=$08					AscBS   = $08	; backspace
=$09					AscHT	= $09	; tab
=$0a					AscLF   = $0a	; line feed
=$0b					AScVT	= $0b	; vertical tab
=$0c					AscFF	= $0c	; form feed
=$0d					AscCR   = $0d	; carriage return
=$0e					AscCN   = $0e	; CTRL-n (used to recall next input history)
=$10					AscCP   = $10	; CTRL-p (used to recall previous input history)
=$1b					AscESC  = $1b	; escape
=$20					AscSP   = $20	; space
=$22					AscDQuote = $22	; double quote
=$5c					AscBackslash = $5c ; backslash
=$7f					AscDEL  = $7f	; delete (CTRL-h)
=79					MAX_LINE_LENGTH  = 79      ; assumes 80 character lines
>0000							.fill $80 ; name, right justified
=127					wh_NameLastChar	= *-1	;last char of name
>0080					wh_NameLength:	.byte ?	;length of name
>0081					wh_WordListLink: .word ? ;link to nt of previous word in wordlist chain
>0083					wh_CodeLength:	.byte ?	;size of code (0xff = 255 or greater)
>0084					wh_Flags:	.byte ?	; created by adding the flags defined as:
=1					CO =   1 ; Compile Only
=2					AN =   2 ; Always Native Compile (may not be called by JSR)
=4					IM =   4 ; Immediate Word
=8					NN =   8 ; Never Native Compile (must always be called by JSR)
=$10					UF = $10 ; Includes strippable Underflow Check
=$40					R6 = $40 ; strip 6 bytes from begin & end when native compiling
.0085					wh_xt:
=0					WordListLink .var 0	 ; start of FORTH wordlist
>8043	43 6f 6c 64			L1:	.text "Cold"	;  name of word as a string, ending at wh_NameLastChar
>8047	04					.byte *-L1	;wh_NameLength	length of name
>8048	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>804a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>804b	08					.byte NN	;wh_Flags	dictionary flags
=32711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.804c					Cold:
.804c	d8		cld				cld
.804d	a2 ff		ldx #$ff			ldx #rsp0		; Initialize 6502 stack (Return Stack)
.804f	9a		txs				txs
.8050	a2 0d		ldx #$0d			ldx #Cold_zp_table_length-1
.8052					-
.8052	bd 00 80	lda $8000,x			lda Cold_zp_table,x
.8055	95 00		sta $00,x			sta zp0,x
.8057	ca		dex				dex
.8058	10 f8		bpl $8052			bpl -
.805a	a0 34		ldy #$34			ldy #Cold_user_table_length-1
.805c	b9 0e 80	lda $800e,y	-		lda Cold_user_table,y
.805f	99 ff 02	sta $02ff,y			sta User0,y
.8062	88		dey				dey
.8063	10 f7		bpl $805c			bpl -
.8065	20 2c b3	jsr $b32c			jsr Empty_Stack
.8068	20 9e a0	jsr $a09e			jsr BlockInit
.806b	20 ce a9	jsr $a9ce			jsr CR
.806e	a9 9c		lda #$9c			lda #<forth_words_start		; push start address
.8070	a0 80		ldy #$80			ldy #>forth_words_start
.8072	20 e0 b5	jsr $b5e0			jsr PushYA
.8075	a9 d2		lda #$d2			lda #<forth_words_len		; push length
.8077	a0 00		ldy #$00			ldy #>forth_words_len
.8079	20 e0 b5	jsr $b5e0			jsr PushYA
.807c	20 24 ae	jsr $ae24			jsr Evaluate
.807f	a9 00		lda #$00			lda #0
.8081	8d 65 07	sta $0765			sta hist_buff
.8084	8d e5 07	sta $07e5			sta hist_buff+$80
.8087	8d 65 08	sta $0865			sta hist_buff+$100
.808a	8d e5 08	sta $08e5			sta hist_buff+$180
.808d	8d 65 09	sta $0965			sta hist_buff+$200
.8090	8d e5 09	sta $09e5			sta hist_buff+$280
.8093	8d 65 0a	sta $0a65			sta hist_buff+$300
.8096	8d e5 0a	sta $0ae5			sta hist_buff+$380
.8099	4c dd b2	jmp $b2dd			jmp Abort_Core2	;Quit
=80					CL	.var *-(WordListLink+wh_Xt)
=$809c					en = *	; remember here
>804a	50					.byte CL	;wh_CodeLength
.809c					forth_words_start:
>809c	20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>80a4	61 6c 69 20 46 6f 72 74 68 20 32 20 72 65 6d 69
>80b4	78 20 66 6f 72 20 74 68 65 20 36 35 30 32 29 20
>80c4	63 72 20 2e 28 20 56 65 72 73 69 6f 6e 20 33 31
>80d4	2e 20 4d 61 79 20 32 30 32 34 20 29 20 63 72 20
>80e4	2e 28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31
>80f4	34 2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53
>8104	74 65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f
>8114	6c 77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c
>8124	69 20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20
>8134	77 69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20
>8144	4e 4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20
>8154	2e 28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f
>8164	20 65 78 69 74 29 20 63 72 20
=210					forth_words_len = *-forth_words_start
.816e					user_words_start:
>816e					.binary "user_words.asc"
=0					user_words_len = *-user_words_start
>816e	4e 6f 4f 70			L1:	.text "NoOp"	;  name of word as a string, ending at wh_NameLastChar
>8172	04					.byte *-L1	;wh_NameLength	length of name
>8173	c7 7f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8175	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8176	00					.byte 0	;wh_Flags	dictionary flags
=33010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8177	ea		nop				nop
=1					CL	.var *-(WordListLink+wh_Xt)
=$8178					en = *	; remember here
>8175	01					.byte CL	;wh_CodeLength
.8178	60		rts				rts
>8179	63 63 40			L1:	.text "cc@"	;  name of word as a string, ending at wh_NameLastChar
>817c	03					.byte *-L1	;wh_NameLength	length of name
>817d	f2 80					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>817f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8180	08					.byte NN	;wh_Flags	dictionary flags
=33020					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8181	4c 2f f0	jmp $f02f	CCAt:		jmp platform_CCAt
=3					CL	.var *-(WordListLink+wh_Xt)
=$8184					en = *	; remember here
>817f	03					.byte CL	;wh_CodeLength
>8184	42 79 65			L1:	.text "Bye"	;  name of word as a string, ending at wh_NameLastChar
>8187	03					.byte *-L1	;wh_NameLength	length of name
>8188	fc 80					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>818a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>818b	08					.byte NN	;wh_Flags	dictionary flags
=33031					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.818c	4c 2e f0	jmp $f02e	Bye:		jmp platform_bye
=3					CL	.var *-(WordListLink+wh_Xt)
=$818f					en = *	; remember here
>818a	03					.byte CL	;wh_CodeLength
>818f	54 79 70 65 53 79 6d 62		L1:	.text "TypeSymbol"	;  name of word as a string, ending at wh_NameLastChar
>8197	6f 6c
>8199	0a					.byte *-L1	;wh_NameLength	length of name
>819a	07 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>819c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>819d	08					.byte NN	;wh_Flags	dictionary flags
=33049					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.819e	20 c0 cb	jsr $cbc0	TypeSymbol:	jsr Space
.81a1	20 45 cd	jsr $cd45			jsr Dup
.81a4	a9 24		lda #$24			lda #'$'
.81a6	20 b3 cb	jsr $cbb3			jsr Emit_A
.81a9	20 5b a7	jsr $a75b			jsr Dot_Hex
.81ac					TypeSymbolN:
.81ac	20 c0 cb	jsr $cbc0			jsr Space
.81af	a9 28		lda #$28			lda #'('
.81b1	20 b3 cb	jsr $cbb3			jsr Emit_A
.81b4	20 c0 cb	jsr $cbc0			jsr Space
.81b7	20 de 81	jsr $81de			jsr DictSearchXt	; ( addr_end addr operand offset nt )
.81ba	20 1c bc	jsr $bc1c			jsr Name_To_String	; Change nt into the name
.81bd	20 cd cb	jsr $cbcd			jsr Type		; print it.
.81c0	20 c0 cb	jsr $cbc0			jsr Space
.81c3	b5 25		lda $25,x			lda DStack+0,x		; if non-zero offset
.81c5	15 26		ora $26,x			ora DStack+1,x
.81c7	f0 0b		beq $81d4			beq +
.81c9	a9 2b		lda #$2b			lda #'+'		;   print offset
.81cb	20 b3 cb	jsr $cbb3			jsr Emit_A
.81ce	20 45 cd	jsr $cd45			jsr Dup
.81d1	20 f4 c9	jsr $c9f4			jsr U_Dot
.81d4	e8		inx		+		inx
.81d5	e8		inx				inx
.81d6	a9 29		lda #$29			lda #')'
.81d8	20 b3 cb	jsr $cbb3			jsr Emit_A
.81db	4c c0 cb	jmp $cbc0			jmp Space
=64					CL	.var *-(WordListLink+wh_Xt)
=$81de					en = *	; remember here
>819c	40					.byte CL	;wh_CodeLength
.81de					DictSearchXt:
.81de	ca		dex				dex
.81df	ca		dex				dex
.81e0	20 1c cd	jsr $cd1c			jsr Over
.81e3	a9 ff		lda #$ff			lda #$ff		; init best offset
.81e5	95 2a		sta $2a,x			sta DStack+5,x		; ( offset nt xt )
.81e7	a9 fe		lda #$fe			lda #$fe		; for each wordlist
.81e9	48		pha				pha
.81ea	68		pla		_ListNext:	pla
.81eb	18		clc				clc
.81ec	69 02		adc #$02			adc #2			; to next wordlist
.81ee	c9 18		cmp #$18			cmp #max_wordlists*2
.81f0	b0 56		bcs $8248			bcs _Done
.81f2	48		pha				pha
.81f3	a8		tay				tay
.81f4	b9 12 03	lda $0312,y			lda WordlistsV+0,y	; Get the DP for that wordlist.
.81f7	85 15		sta $15				sta tmp1+0
.81f9	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.81fc	85 16		sta $16				sta tmp1+1
.81fe	d0 11		bne $8211			bne _WordTest
.8200	f0 e8		beq $81ea			beq _ListNext		;   empty list?
.8202	a0 82		ldy #$82	_WordNext:	ldy #wh_WordListLink+1
.8204	b1 15		lda ($15),y			lda (tmp1),y
.8206	f0 e2		beq $81ea			beq _ListNext		; end of Dictionary?
.8208	48		pha				pha
.8209	88		dey				dey
.820a	b1 15		lda ($15),y			lda (tmp1),y
.820c	85 15		sta $15				sta tmp1+0
.820e	68		pla				pla
.820f	85 16		sta $16				sta tmp1+1
.8211	18		clc		_WordTest:	clc			; tmp2 = xt of word
.8212	a5 15		lda $15				lda tmp1+0
.8214	69 85		adc #$85			adc #wh_xt
.8216	85 17		sta $17				sta tmp2+0
.8218	a5 16		lda $16				lda tmp1+1
.821a	69 00		adc #$00			adc #0
.821c	85 18		sta $18				sta tmp2+1
.821e	38		sec				sec			; tmp2 = xt offset for this word
.821f	b5 25		lda $25,x			lda DStack+0,x
.8221	e5 17		sbc $17				sbc tmp2+0
.8223	85 17		sta $17				sta tmp2+0
.8225	b5 26		lda $26,x			lda DStack+1,x
.8227	e5 18		sbc $18				sbc tmp2+1
.8229	85 18		sta $18				sta tmp2+1
.822b	a5 17		lda $17				lda tmp2+0		; this word have smaller offset?
.822d	d5 29		cmp $29,x			cmp DStack+4,x
.822f	a5 18		lda $18				lda tmp2+1
.8231	f5 2a		sbc $2a,x			sbc DStack+5,x
.8233	b0 cd		bcs $8202			bcs _WordNext
.8235	a5 17		lda $17				lda tmp2+0		; save this better offset
.8237	a4 18		ldy $18				ldy tmp2+1
.8239	95 29		sta $29,x			sta DStack+4,x
.823b	94 2a		sty $2a,x			sty DStack+5,x
.823d	a5 15		lda $15				lda tmp1+0		; save this better nt
.823f	a4 16		ldy $16				ldy tmp1+1
.8241	95 27		sta $27,x			sta DStack+2,x
.8243	94 28		sty $28,x			sty DStack+3,x
.8245	4c 02 82	jmp $8202			jmp _WordNext
.8248	e8		inx		_Done:		inx			; Drop xt
.8249	e8		inx				inx
.824a	60		rts				rts
>824b	52 6e 64 53 74 61 74 65		L1:	.text "RndState"	;  name of word as a string, ending at wh_NameLastChar
>8253	08					.byte *-L1	;wh_NameLength	length of name
>8254	19 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8256	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8257	08					.byte NN	;wh_Flags	dictionary flags
=33235					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8258	a9 34		lda #$34			lda #<RndState
.825a	a0 03		ldy #$03			ldy #>RndState
.825c	4c e0 b5	jmp $b5e0			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$825f					en = *	; remember here
>8256	07					.byte CL	;wh_CodeLength
.825f					Rand:
.825f	4e 35 03	lsr $0335			lsr RndState+1
.8262	6e 34 03	ror $0334			ror RndState+0
.8265	6e 37 03	ror $0337			ror RndState+3
.8268	6e 36 03	ror $0336			ror RndState+2
.826b	90 10		bcc $827d			bcc _19			;  IfCs,
.826d	ad 35 03	lda $0335			lda RndState+1
.8270	49 d0		eor #$d0			eor #$d0
.8272	8d 35 03	sta $0335			sta RndState+1
.8275	ad 36 03	lda $0336			lda RndState+2
.8278	49 01		eor #$01			eor #$01
.827a	8d 36 03	sta $0336			sta RndState+2
.827d					_19:
.827d	60		rts				rts
>827e	52 61 6e 64 4d			L1:	.text "RandM"	;  name of word as a string, ending at wh_NameLastChar
>8283	05					.byte *-L1	;wh_NameLength	length of name
>8284	d3 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8286	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8287	08					.byte NN	;wh_Flags	dictionary flags
=33283					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8288	20 45 cd	jsr $cd45	RandM:		jsr Dup		; ( umod umod )
.828b	20 5f 82	jsr $825f			jsr Rand
.828e	ad 36 03	lda $0336			lda RndState+2
.8291	ac 37 03	ldy $0337			ldy RndState+3
.8294	95 27		sta $27,x			sta DStack+2,x
.8296	94 28		sty $28,x			sty DStack+3,x	; ( rand umod )
.8298	4c eb ad	jmp $adeb			jmp Mod
=19					CL	.var *-(WordListLink+wh_Xt)
=$829b					en = *	; remember here
>8286	13					.byte CL	;wh_CodeLength
=10					FDim = 10		; # entries in FP stack
>004d					fp:	.byte ?		; floating-point stack index
>004e					FSExp:   .fill FDim	; FP stack exponent     array
>0058					FSMant0: .fill FDim	; FP stack mantissa MSB array
>0062					FSMant1: .fill FDim	; FP stack mantissa 2nd array
>006c					FSMant2: .fill FDim	; FP stack mantissa 3rd array
>0076					FSMant3: .fill FDim	; FP stack mantissa 4th array
>829b	46 50				L1:	.text "FP"	;  name of word as a string, ending at wh_NameLastChar
>829d	02					.byte *-L1	;wh_NameLength	length of name
>829e	03 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82a0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82a1	08					.byte NN	;wh_Flags	dictionary flags
=33309					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82a2	a9 4d		lda #$4d			lda #fp
.82a4	4c 22 b6	jmp $b622			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$82a7					en = *	; remember here
>82a0	05					.byte CL	;wh_CodeLength
>82a7	46 44 69 6d			L1:	.text "FDim"	;  name of word as a string, ending at wh_NameLastChar
>82ab	04					.byte *-L1	;wh_NameLength	length of name
>82ac	1d 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82ae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82af	08					.byte NN	;wh_Flags	dictionary flags
=33323					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82b0	a9 0a		lda #$0a			lda #FDim
.82b2	4c 22 b6	jmp $b622			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$82b5					en = *	; remember here
>82ae	05					.byte CL	;wh_CodeLength
>82b5	46 53 45 78 70			L1:	.text "FSExp"	;  name of word as a string, ending at wh_NameLastChar
>82ba	05					.byte *-L1	;wh_NameLength	length of name
>82bb	2b 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82bd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82be	08					.byte NN	;wh_Flags	dictionary flags
=33338					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82bf	a9 4e		lda #$4e			lda #FSExp
.82c1	4c 22 b6	jmp $b622			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$82c4					en = *	; remember here
>82bd	05					.byte CL	;wh_CodeLength
>82c4	46 53 4d 61 6e 74 30		L1:	.text "FSMant0"	;  name of word as a string, ending at wh_NameLastChar
>82cb	07					.byte *-L1	;wh_NameLength	length of name
>82cc	3a 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82cf	08					.byte NN	;wh_Flags	dictionary flags
=33355					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82d0	a9 58		lda #$58			lda #FSMant0
.82d2	4c 22 b6	jmp $b622			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$82d5					en = *	; remember here
>82ce	05					.byte CL	;wh_CodeLength
>82d5	46 4d 61 6e 74 31		L1:	.text "FMant1"	;  name of word as a string, ending at wh_NameLastChar
>82db	06					.byte *-L1	;wh_NameLength	length of name
>82dc	4b 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82df	08					.byte NN	;wh_Flags	dictionary flags
=33371					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82e0	a9 62		lda #$62			lda #FSMant1
.82e2	4c 22 b6	jmp $b622			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$82e5					en = *	; remember here
>82de	05					.byte CL	;wh_CodeLength
>82e5	46 4d 61 6e 74 32		L1:	.text "FMant2"	;  name of word as a string, ending at wh_NameLastChar
>82eb	06					.byte *-L1	;wh_NameLength	length of name
>82ec	5b 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82ef	08					.byte NN	;wh_Flags	dictionary flags
=33387					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82f0	a9 6c		lda #$6c			lda #FSMant2
.82f2	4c 22 b6	jmp $b622			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$82f5					en = *	; remember here
>82ee	05					.byte CL	;wh_CodeLength
>82f5	46 4d 61 6e 74 33		L1:	.text "FMant3"	;  name of word as a string, ending at wh_NameLastChar
>82fb	06					.byte *-L1	;wh_NameLength	length of name
>82fc	6b 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82ff	08					.byte NN	;wh_Flags	dictionary flags
=33403					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8300	a9 76		lda #$76			lda #FSMant3
.8302	4c 22 b6	jmp $b622			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8305					en = *	; remember here
>82fe	05					.byte CL	;wh_CodeLength
>8305	46 6c 6f 61 74 2b		L1:	.text "Float+"	;  name of word as a string, ending at wh_NameLastChar
>830b	06					.byte *-L1	;wh_NameLength	length of name
>830c	7b 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>830e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>830f	08					.byte NN	;wh_Flags	dictionary flags
=33419					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8310	a9 05		lda #$05	FloatPlus:	lda #5
.8312	4c f6 c7	jmp $c7f6			jmp plus_a
=5					CL	.var *-(WordListLink+wh_Xt)
=$8315					en = *	; remember here
>830e	05					.byte CL	;wh_CodeLength
>8315	46 6c 6f 61 74 73		L1:	.text "Floats"	;  name of word as a string, ending at wh_NameLastChar
>831b	06					.byte *-L1	;wh_NameLength	length of name
>831c	8b 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>831e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>831f	08					.byte NN	;wh_Flags	dictionary flags
=33435					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8320	a9 05		lda #$05	Floats:		lda #5
.8322	20 22 b6	jsr $b622			jsr PushZA
.8325	4c f5 ac	jmp $acf5			jmp Star
=8					CL	.var *-(WordListLink+wh_Xt)
=$8328					en = *	; remember here
>831e	08					.byte CL	;wh_CodeLength
>8328	50 72 65 63 69 73 69 6f		L1:	.text "Precision"	;  name of word as a string, ending at wh_NameLastChar
>8330	6e
>8331	09					.byte *-L1	;wh_NameLength	length of name
>8332	9b 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8334	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8335	08					.byte NN	;wh_Flags	dictionary flags
=33457					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8336	ad ff 02	lda $02ff			lda PrecisionV
.8339	4c 22 b6	jmp $b622			jmp PushZA
=6					CL	.var *-(WordListLink+wh_Xt)
=$833c					en = *	; remember here
>8334	06					.byte CL	;wh_CodeLength
.833c	60		rts				rts
>833d	53 65 74 2d 50 72 65 63		L1:	.text "Set-Precision"	;  name of word as a string, ending at wh_NameLastChar
>8345	69 73 69 6f 6e
>834a	0d					.byte *-L1	;wh_NameLength	length of name
>834b	b1 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>834d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>834e	08					.byte NN	;wh_Flags	dictionary flags
=33482					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.834f	20 34 b2	jsr $b234			jsr PopA
.8352	8d ff 02	sta $02ff			sta PrecisionV
=6					CL	.var *-(WordListLink+wh_Xt)
=$8355					en = *	; remember here
>834d	06					.byte CL	;wh_CodeLength
.8355	60		rts				rts
>8356	46 44 72 6f 70			L1:	.text "FDrop"	;  name of word as a string, ending at wh_NameLastChar
>835b	05					.byte *-L1	;wh_NameLength	length of name
>835c	ca 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>835e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>835f	00					.byte 0	;wh_Flags	dictionary flags
=33499					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8360	e6 4d		inc $4d		FDrop:		inc fp
=2					CL	.var *-(WordListLink+wh_Xt)
=$8362					en = *	; remember here
>835e	02					.byte CL	;wh_CodeLength
.8362	60		rts				rts
>8363	46 32 44 72 6f 70		L1:	.text "F2Drop"	;  name of word as a string, ending at wh_NameLastChar
>8369	06					.byte *-L1	;wh_NameLength	length of name
>836a	db 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>836c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>836d	00					.byte 0	;wh_Flags	dictionary flags
=33513					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.836e	e6 4d		inc $4d		F2Drop:		inc fp
.8370	e6 4d		inc $4d				inc fp
=4					CL	.var *-(WordListLink+wh_Xt)
=$8372					en = *	; remember here
>836c	04					.byte CL	;wh_CodeLength
.8372	60		rts				rts
>8373	46 44 65 70 74 68		L1:	.text "FDepth"	;  name of word as a string, ending at wh_NameLastChar
>8379	06					.byte *-L1	;wh_NameLength	length of name
>837a	e9 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>837c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>837d	08					.byte NN	;wh_Flags	dictionary flags
=33529					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.837e	a9 0a		lda #$0a	FDepth:		lda #FDim
.8380	38		sec				sec
.8381	e5 4d		sbc $4d				sbc fp
.8383	4c 22 b6	jmp $b622			jmp PushZA
=8					CL	.var *-(WordListLink+wh_Xt)
=$8386					en = *	; remember here
>837c	08					.byte CL	;wh_CodeLength
>8386	46 41 6c 6c 6f 63 58		L1:	.text "FAllocX"	;  name of word as a string, ending at wh_NameLastChar
>838d	07					.byte *-L1	;wh_NameLength	length of name
>838e	f9 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8390	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8391	08					.byte NN	;wh_Flags	dictionary flags
=33549					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8392	86 15		stx $15		FAllocX:	stx tmp1+0	; save data stack index
.8394	a6 4d		ldx $4d				ldx fp		; X= floating point stack index
.8396	e0 0b		cpx #$0b			cpx #FDim+1	; underflow?
.8398	b0 0d		bcs $83a7			bcs _underflow
.839a	ca		dex				dex		; alloc FP stack entry
.839b	30 03		bmi $83a0			bmi _overflow
.839d	86 4d		stx $4d				stx fp
.839f	60		rts				rts		; return X= FP stack index
.83a0	a6 15		ldx $15		_overflow:	ldx tmp1+0	; restore data stack index
.83a2	a9 d4		lda #$d4			lda #$100+err_FPStackOverflow
.83a4	4c bf b2	jmp $b2bf			jmp ThrowA
.83a7	a6 15		ldx $15		_underflow:	ldx tmp1+0	; restore data stack index
.83a9	a9 d3		lda #$d3			lda #$100+err_FPStackUnderflow
.83ab	4c bf b2	jmp $b2bf			jmp ThrowA
=28					CL	.var *-(WordListLink+wh_Xt)
=$83ae					en = *	; remember here
>8390	1c					.byte CL	;wh_CodeLength
>83ae	46 4d 61 78			L1:	.text "FMax"	;  name of word as a string, ending at wh_NameLastChar
>83b2	04					.byte *-L1	;wh_NameLength	length of name
>83b3	0d 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83b5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83b6	08					.byte NN	;wh_Flags	dictionary flags
=33586					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83b7	20 a5 85	jsr $85a5	FMax:		jsr FCmpA
.83ba	10 a4		bpl $8360			bpl FDrop
.83bc	30 19		bmi $83d7			bmi FNip
=7					CL	.var *-(WordListLink+wh_Xt)
=$83be					en = *	; remember here
>83b5	07					.byte CL	;wh_CodeLength
>83be	46 4d 69 6e			L1:	.text "FMin"	;  name of word as a string, ending at wh_NameLastChar
>83c2	04					.byte *-L1	;wh_NameLength	length of name
>83c3	32 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83c5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83c6	08					.byte NN	;wh_Flags	dictionary flags
=33602					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83c7	20 a5 85	jsr $85a5	FMin:		jsr FCmpA
.83ca	30 94		bmi $8360			bmi FDrop
.83cc	10 09		bpl $83d7			bpl FNip
=7					CL	.var *-(WordListLink+wh_Xt)
=$83ce					en = *	; remember here
>83c5	07					.byte CL	;wh_CodeLength
>83ce	46 4e 69 70			L1:	.text "FNip"	;  name of word as a string, ending at wh_NameLastChar
>83d2	04					.byte *-L1	;wh_NameLength	length of name
>83d3	42 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83d5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83d6	00					.byte 0	;wh_Flags	dictionary flags
=33618					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83d7	86 15		stx $15		FNip:		stx tmp1		; save data stack index
.83d9	a6 4d		ldx $4d				ldx fp			; get FP stack index
.83db	b5 4e		lda $4e,x			lda FSExp+0,x		; copy exponent
.83dd	95 4f		sta $4f,x			sta FSExp+1,x
.83df	b5 58		lda $58,x			lda FSMant0+0,x		; copy mantissa
.83e1	95 59		sta $59,x			sta FSMant0+1,x
.83e3	b5 62		lda $62,x			lda FSMant1+0,x
.83e5	95 63		sta $63,x			sta FSMant1+1,x
.83e7	b5 6c		lda $6c,x			lda FSMant2+0,x
.83e9	95 6d		sta $6d,x			sta FSMant2+1,x
.83eb	b5 76		lda $76,x			lda FSMant3+0,x
.83ed	95 77		sta $77,x			sta FSMant3+1,x
.83ef	e6 4d		inc $4d				inc fp			; FDrop
.83f1	a6 15		ldx $15				ldx tmp1		; restore data stack index
=28					CL	.var *-(WordListLink+wh_Xt)
=$83f3					en = *	; remember here
>83d5	1c					.byte CL	;wh_CodeLength
.83f3	60		rts				rts
>83f4	46 44 75 70			L1:	.text "FDup"	;  name of word as a string, ending at wh_NameLastChar
>83f8	04					.byte *-L1	;wh_NameLength	length of name
>83f9	52 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83fb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83fc	00					.byte 0	;wh_Flags	dictionary flags
=33656					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83fd	20 92 83	jsr $8392	FDup:		jsr FAllocX		; alloc FP stack entry
.8400	b5 4f		lda $4f,x			lda FSExp+1,x		; copy exponent
.8402	95 4e		sta $4e,x			sta FSExp+0,x
.8404	b5 59		lda $59,x			lda FSMant0+1,x		; copy mantissa
.8406	95 58		sta $58,x			sta FSMant0+0,x
.8408	b5 63		lda $63,x			lda FSMant1+1,x
.840a	95 62		sta $62,x			sta FSMant1+0,x
.840c	b5 6d		lda $6d,x			lda FSMant2+1,x
.840e	95 6c		sta $6c,x			sta FSMant2+0,x
.8410	b5 77		lda $77,x			lda FSMant3+1,x
.8412	95 76		sta $76,x			sta FSMant3+0,x
.8414	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
=25					CL	.var *-(WordListLink+wh_Xt)
=$8416					en = *	; remember here
>83fb	19					.byte CL	;wh_CodeLength
.8416	60		rts				rts
>8417	46 4f 76 65 72			L1:	.text "FOver"	;  name of word as a string, ending at wh_NameLastChar
>841c	05					.byte *-L1	;wh_NameLength	length of name
>841d	78 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>841f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8420	00					.byte 0	;wh_Flags	dictionary flags
=33692					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8421	20 92 83	jsr $8392	FOver:		jsr FAllocX		; alloc FP stack entry
.8424	b5 50		lda $50,x			lda FSExp+2,x		; copy exponent
.8426	95 4e		sta $4e,x			sta FSExp+0,x
.8428	b5 5a		lda $5a,x			lda FSMant0+2,x		; copy mantissa
.842a	95 58		sta $58,x			sta FSMant0+0,x
.842c	b5 64		lda $64,x			lda FSMant1+2,x
.842e	95 62		sta $62,x			sta FSMant1+0,x
.8430	b5 6e		lda $6e,x			lda FSMant2+2,x
.8432	95 6c		sta $6c,x			sta FSMant2+0,x
.8434	b5 78		lda $78,x			lda FSMant3+2,x
.8436	95 76		sta $76,x			sta FSMant3+0,x
.8438	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
=25					CL	.var *-(WordListLink+wh_Xt)
=$843a					en = *	; remember here
>841f	19					.byte CL	;wh_CodeLength
.843a	60		rts				rts
>843b	46 50 69 63 6b			L1:	.text "FPick"	;  name of word as a string, ending at wh_NameLastChar
>8440	05					.byte *-L1	;wh_NameLength	length of name
>8441	9c 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8443	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8444	00					.byte 0	;wh_Flags	dictionary flags
=33728					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8445	20 34 b2	jsr $b234	FPick:		jsr PopA		; pop u
.8448	18		clc		FPickA:		clc
.8449	65 4d		adc $4d				adc fp
.844b	a8		tay		FPick3:		tay
.844c	20 92 83	jsr $8392			jsr FAllocX
.844f	b9 4e 00	lda $004e,y			lda FSExp,y		; copy exponent
.8452	95 4e		sta $4e,x			sta FSExp,x
.8454	b9 58 00	lda $0058,y			lda FSMant0,y		; copy mantissa
.8457	95 58		sta $58,x			sta FSMant0,x
.8459	b9 62 00	lda $0062,y			lda FSMant1,y
.845c	95 62		sta $62,x			sta FSMant1,x
.845e	b9 6c 00	lda $006c,y			lda FSMant2,y
.8461	95 6c		sta $6c,x			sta FSMant2,x
.8463	b9 76 00	lda $0076,y			lda FSMant3,y
.8466	95 76		sta $76,x			sta FSMant3,x
.8468	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
=37					CL	.var *-(WordListLink+wh_Xt)
=$846a					en = *	; remember here
>8443	25					.byte CL	;wh_CodeLength
.846a	60		rts				rts
>846b	46 32 44 75 70			L1:	.text "F2Dup"	;  name of word as a string, ending at wh_NameLastChar
>8470	05					.byte *-L1	;wh_NameLength	length of name
>8471	c0 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8473	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8474	08					.byte NN	;wh_Flags	dictionary flags
=33776					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8475	20 21 84	jsr $8421	F2Dup:		jsr FOver
.8478	4c 21 84	jmp $8421			jmp FOver
=6					CL	.var *-(WordListLink+wh_Xt)
=$847b					en = *	; remember here
>8473	06					.byte CL	;wh_CodeLength
>847b	46 53 77 61 70			L1:	.text "FSwap"	;  name of word as a string, ending at wh_NameLastChar
>8480	05					.byte *-L1	;wh_NameLength	length of name
>8481	f0 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8483	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8484	00					.byte 0	;wh_Flags	dictionary flags
=33792					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8485	86 15		stx $15		FSwap:		stx tmp1		; save data stack index
.8487	a6 4d		ldx $4d				ldx fp			; X=FP stack index
.8489	b5 4e		lda $4e,x			lda FSExp+0,x		; do FSExp
.848b	b4 4f		ldy $4f,x			ldy FSExp+1,x
.848d	95 4f		sta $4f,x			sta FSExp+1,x
.848f	94 4e		sty $4e,x			sty FSExp+0,x
.8491	b5 58		lda $58,x			lda FSMant0+0,x		; do FSMant0
.8493	b4 59		ldy $59,x			ldy FSMant0+1,x
.8495	95 59		sta $59,x			sta FSMant0+1,x
.8497	94 58		sty $58,x			sty FSMant0+0,x
.8499	b5 62		lda $62,x			lda FSMant1+0,x		; do FSMant1
.849b	b4 63		ldy $63,x			ldy FSMant1+1,x
.849d	95 63		sta $63,x			sta FSMant1+1,x
.849f	94 62		sty $62,x			sty FSMant1+0,x
.84a1	b5 6c		lda $6c,x			lda FSMant2+0,x		; do FSMant2
.84a3	b4 6d		ldy $6d,x			ldy FSMant2+1,x
.84a5	95 6d		sta $6d,x			sta FSMant2+1,x
.84a7	94 6c		sty $6c,x			sty FSMant2+0,x
.84a9	b5 76		lda $76,x			lda FSMant3+0,x		; do FSMant3
.84ab	b4 77		ldy $77,x			ldy FSMant3+1,x
.84ad	95 77		sta $77,x			sta FSMant3+1,x
.84af	94 76		sty $76,x			sty FSMant3+0,x
.84b1	a6 15		ldx $15				ldx tmp1		; restore data stack index
=46					CL	.var *-(WordListLink+wh_Xt)
=$84b3					en = *	; remember here
>8483	2e					.byte CL	;wh_CodeLength
.84b3	60		rts				rts
>84b4	46 54 75 63 6b			L1:	.text "FTuck"	;  name of word as a string, ending at wh_NameLastChar
>84b9	05					.byte *-L1	;wh_NameLength	length of name
>84ba	00 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84bd	08					.byte NN	;wh_Flags	dictionary flags
=33849					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84be	20 85 84	jsr $8485	FTuck:		jsr FSwap
.84c1	4c 21 84	jmp $8421			jmp FOver
=6					CL	.var *-(WordListLink+wh_Xt)
=$84c4					en = *	; remember here
>84bc	06					.byte CL	;wh_CodeLength
>84c4	46 52 6f 74			L1:	.text "FRot"	;  name of word as a string, ending at wh_NameLastChar
>84c8	04					.byte *-L1	;wh_NameLength	length of name
>84c9	39 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84cb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84cc	00					.byte 0	;wh_Flags	dictionary flags
=33864					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84cd	86 15		stx $15		FRot:		stx tmp1		; save data stack index
.84cf	a5 4d		lda $4d				lda fp			; for FSMant3, FSMant2, FSMant1, FSMant0, FSExp
.84d1	18		clc				clc
.84d2	69 28		adc #$28			adc #4*FDim
.84d4	d0 03		bne $84d9			bne _3
.84d6	8a		txa		_2:		txa			;    next byte
.84d7	e9 0a		sbc #$0a			sbc #FDim
.84d9	aa		tax		_3:		tax
.84da	b5 50		lda $50,x			lda FSExp+2,x		;   do a byte
.84dc	b4 4f		ldy $4f,x			ldy FSExp+1,x
.84de	94 50		sty $50,x			sty FSExp+2,x
.84e0	b4 4e		ldy $4e,x			ldy FSExp+0,x
.84e2	94 4f		sty $4f,x			sty FSExp+1,x
.84e4	95 4e		sta $4e,x			sta FSExp+0,x
.84e6	e4 4d		cpx $4d				cpx fp			; done?
.84e8	d0 ec		bne $84d6			bne _2
.84ea	a6 15		ldx $15				ldx tmp1		; restore param stack index
=31					CL	.var *-(WordListLink+wh_Xt)
=$84ec					en = *	; remember here
>84cb	1f					.byte CL	;wh_CodeLength
.84ec	60		rts				rts
>84ed	46 2d 52 6f 74			L1:	.text "F-Rot"	;  name of word as a string, ending at wh_NameLastChar
>84f2	05					.byte *-L1	;wh_NameLength	length of name
>84f3	48 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84f5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84f6	08					.byte NN	;wh_Flags	dictionary flags
=33906					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84f7	20 cd 84	jsr $84cd	FMRot:		jsr FRot
.84fa	4c cd 84	jmp $84cd			jmp FRot
=6					CL	.var *-(WordListLink+wh_Xt)
=$84fd					en = *	; remember here
>84f5	06					.byte CL	;wh_CodeLength
>84fd	46 40				L1:	.text "F@"	;  name of word as a string, ending at wh_NameLastChar
>84ff	02					.byte *-L1	;wh_NameLength	length of name
>8500	72 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8502	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8503	00					.byte 0	;wh_Flags	dictionary flags
=33919					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8504	20 50 b2	jsr $b250	FAt:		jsr PopYA		; pop addr
.8507	85 17		sta $17		FAt_YA:		sta tmp2+0		; save addr
.8509	84 18		sty $18				sty tmp2+1
.850b	20 92 83	jsr $8392	FAt_Tmp2:	jsr FAllocX		; alloc FP stack entry
.850e	a0 00		ldy #$00			ldy #0			; copy mantissa
.8510	b1 17		lda ($17),y			lda (tmp2),y
.8512	95 76		sta $76,x			sta FSMant3,x
.8514	c8		iny				iny
.8515	b1 17		lda ($17),y			lda (tmp2),y
.8517	95 6c		sta $6c,x			sta FSMant2,x
.8519	c8		iny				iny
.851a	b1 17		lda ($17),y			lda (tmp2),y
.851c	95 62		sta $62,x			sta FSMant1,x
.851e	c8		iny				iny
.851f	b1 17		lda ($17),y			lda (tmp2),y
.8521	95 58		sta $58,x			sta FSMant0,x
.8523	c8		iny				iny			; copy exponent
.8524	b1 17		lda ($17),y			lda (tmp2),y
.8526	95 4e		sta $4e,x			sta FSExp,x
.8528	a6 15		ldx $15				ldx tmp1		; restore data stack index
=38					CL	.var *-(WordListLink+wh_Xt)
=$852a					en = *	; remember here
>8502	26					.byte CL	;wh_CodeLength
.852a	60		rts				rts
>852b	46 21				L1:	.text "F!"	;  name of word as a string, ending at wh_NameLastChar
>852d	02					.byte *-L1	;wh_NameLength	length of name
>852e	7f 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8530	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8531	00					.byte 0	;wh_Flags	dictionary flags
=33965					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8532	20 50 b2	jsr $b250	FStore:		jsr PopYA		; pop addr
.8535	85 15		sta $15		FStore_YA:	sta tmp1+0		; save addr
.8537	84 16		sty $16				sty tmp1+1
.8539	86 17		stx $17				stx tmp2		; save data stack index
.853b	a6 4d		ldx $4d				ldx fp			; Y= FP stack index
.853d	b5 76		lda $76,x			lda FSMant3,x		; copy mantissa
.853f	a0 00		ldy #$00			ldy #0
.8541	91 15		sta ($15),y			sta (tmp1),y
.8543	b5 6c		lda $6c,x			lda FSMant2,x
.8545	c8		iny				iny
.8546	91 15		sta ($15),y			sta (tmp1),y
.8548	b5 62		lda $62,x			lda FSMant1,x
.854a	c8		iny				iny
.854b	91 15		sta ($15),y			sta (tmp1),y
.854d	b5 58		lda $58,x			lda FSMant0,x
.854f	c8		iny				iny
.8550	91 15		sta ($15),y			sta (tmp1),y
.8552	b5 4e		lda $4e,x			lda FSExp,x		; copy exponent
.8554	c8		iny				iny
.8555	91 15		sta ($15),y			sta (tmp1),y
.8557	e6 4d		inc $4d				inc fp			; FDrop
.8559	a6 17		ldx $17				ldx tmp2		; restore data stack index
=41					CL	.var *-(WordListLink+wh_Xt)
=$855b					en = *	; remember here
>8530	29					.byte CL	;wh_CodeLength
.855b	60		rts				rts
>855c	46 2c				L1:	.text "F,"	;  name of word as a string, ending at wh_NameLastChar
>855e	02					.byte *-L1	;wh_NameLength	length of name
>855f	ad 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8561	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8562	08					.byte NN	;wh_Flags	dictionary flags
=34014					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8563	a5 00		lda $00		FComma:		lda cp+0
.8565	a4 01		ldy $01				ldy cp+1
.8567	20 35 85	jsr $8535			jsr FStore_YA
.856a	a9 05		lda #$05			lda #5			; Float
.856c	20 22 b6	jsr $b622			jsr PushZA
.856f	4c ec be	jmp $beec			jmp Allot
=15					CL	.var *-(WordListLink+wh_Xt)
=$8572					en = *	; remember here
>8561	0f					.byte CL	;wh_CodeLength
>8572	46 30 21			L1:	.text "F0!"	;  name of word as a string, ending at wh_NameLastChar
>8575	03					.byte *-L1	;wh_NameLength	length of name
>8576	de 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8578	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8579	08					.byte NN	;wh_Flags	dictionary flags
=34037					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.857a	20 50 b2	jsr $b250	FZStore:	jsr PopYA		; pop addr
.857d	85 15		sta $15		FZStore_YA:	sta tmp1+0
.857f	84 16		sty $16				sty tmp1+1
.8581	a9 00		lda #$00			lda #0
.8583	a0 04		ldy #$04			ldy #5-1
.8585	91 15		sta ($15),y	-		sta (tmp1),y
.8587	88		dey				dey
.8588	10 fb		bpl $8585			bpl -
=16					CL	.var *-(WordListLink+wh_Xt)
=$858a					en = *	; remember here
>8578	10					.byte CL	;wh_CodeLength
.858a	60		rts				rts
>858b	46 43 6d 70			L1:	.text "FCmp"	;  name of word as a string, ending at wh_NameLastChar
>858f	04					.byte *-L1	;wh_NameLength	length of name
>8590	f5 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8592	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8593	08					.byte NN	;wh_Flags	dictionary flags
=34063					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8594	20 a5 85	jsr $85a5			jsr FCmpA		; compare #s
.8597	a8		tay				tay			; return >0, 0, <0
.8598	4c e0 b5	jmp $b5e0			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$859b					en = *	; remember here
>8592	07					.byte CL	;wh_CodeLength
>859b	46 43 6d 70 41			L1:	.text "FCmpA"	;  name of word as a string, ending at wh_NameLastChar
>85a0	05					.byte *-L1	;wh_NameLength	length of name
>85a1	0f 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85a3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85a4	08					.byte NN	;wh_Flags	dictionary flags
=34080					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85a5	86 15		stx $15		FCmpA:		stx tmp1		; save data stack index
.85a7	a6 4d		ldx $4d				ldx fp			; X= FP stack index
.85a9	b5 58		lda $58,x			lda FSMant0+0,x		; r2 mantissa = 0 ?
.85ab	f0 35		beq $85e2			beq _r2Zero
.85ad	b4 59		ldy $59,x			ldy FSMant0+1,x		; r1 mantissa = 0 ?
.85af	f0 2b		beq $85dc			beq _r1Zero
.85b1	55 59		eor $59,x			eor FSMant0+1,x		; compare mantissa sign
.85b3	30 3d		bmi $85f2			bmi _MantissaSignDifferent
.85b5	38		sec				sec			; compare exponent
.85b6	b5 4f		lda $4f,x			lda FSExp+1,x
.85b8	f5 4e		sbc $4e,x			sbc FSExp+0,x
.85ba	d0 2b		bne $85e7			bne _ExponentDifferent
.85bc	98		tya				tya			; compare mantissa MSB
.85bd	f5 58		sbc $58,x			sbc FSMant0+0,x		;   always same sign so can't overflow
.85bf	d0 17		bne $85d8			bne _13
.85c1	b5 63		lda $63,x			lda FSMant1+1,x		; compare mantissa 1
.85c3	f5 62		sbc $62,x			sbc FSMant1+0,x
.85c5	d0 0c		bne $85d3			bne _12
.85c7	b5 6d		lda $6d,x			lda FSMant2+1,x		; compare mantissa 2
.85c9	f5 6c		sbc $6c,x			sbc FSMant2+0,x
.85cb	d0 06		bne $85d3			bne _12
.85cd	b5 77		lda $77,x			lda FSMant3+1,x		; compare mantissa LSB
.85cf	f5 76		sbc $76,x			sbc FSMant3+0,x
.85d1	f0 05		beq $85d8			beq _13
.85d3	6a		ror a		_12:		ror a
.85d4	49 80		eor #$80	_14:		eor #$80
.85d6	09 01		ora #$01			ora #1
.85d8	a6 15		ldx $15		_13:		ldx tmp1		; restore data stack index
.85da	a8		tay				tay			; set CPU flags
.85db	60		rts				rts
.85dc	b5 58		lda $58,x	_r1Zero:	lda FSMant0+0,x		; return r2
.85de	d0 f4		bne $85d4			bne _14
.85e0	f0 f6		beq $85d8			beq _13
.85e2	b5 59		lda $59,x	_r2Zero:	lda FSMant0+1,x		; return 0-r1
.85e4	4c d8 85	jmp $85d8			jmp _13
.85e7					_ExponentDifferent:
.85e7	50 02		bvc $85eb			bvc +
.85e9	49 80		eor #$80			eor #$80
.85eb					+
.85eb	55 58		eor $58,x			eor FSMant0+0,x
.85ed	a6 15		ldx $15				ldx tmp1		; restore data stack index
.85ef	09 01		ora #$01			ora #1			; set CPU flags
.85f1	60		rts				rts
.85f2					_MantissaSignDifferent:
.85f2	98		tya				tya
.85f3	a6 15		ldx $15				ldx tmp1		; restore data stack index
.85f5	09 01		ora #$01			ora #1
.85f7	60		rts				rts
=83					CL	.var *-(WordListLink+wh_Xt)
=$85f8					en = *	; remember here
>85a3	53					.byte CL	;wh_CodeLength
>85f8	46 6c 6f 6f 72			L1:	.text "Floor"	;  name of word as a string, ending at wh_NameLastChar
>85fd	05					.byte *-L1	;wh_NameLength	length of name
>85fe	20 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8600	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8601	08					.byte NN	;wh_Flags	dictionary flags
=34173					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8602	a4 4d		ldy $4d		Floor:		ldy fp
.8604	b9 58 00	lda $0058,y			lda FSMant0,y		; negative?
.8607	10 19		bpl $8622			bpl _a
.8609	b9 4e 00	lda $004e,y			lda FSExp,y		; > -1 ?
.860c	10 14		bpl $8622			bpl _a
.860e	a9 80		lda #$80			lda #$80		; return -1
.8610	99 58 00	sta $0058,y			sta FSMant0,y
.8613	a9 00		lda #$00			lda #0
.8615	99 4e 00	sta $004e,y			sta FSExp,y
.8618	99 62 00	sta $0062,y			sta FSMant1,y
.861b	99 6c 00	sta $006c,y			sta FSMant2,y
.861e	99 76 00	sta $0076,y			sta FSMant3,y
.8621	60		rts				rts
.8622	a9 1f		lda #$1f	_a:		lda #31
.8624	20 2a 86	jsr $862a			jsr FIntAlignA
.8627	4c 1c 8a	jmp $8a1c			jmp FNorm
=40					CL	.var *-(WordListLink+wh_Xt)
=$862a					en = *	; remember here
>8600	28					.byte CL	;wh_CodeLength
.862a					FIntAlignA:
.862a	85 17		sta $17				sta tmp2+0		; save alignment
.862c	46 16		lsr $16				lsr tmp1+1		; init saved lo bit
.862e	86 15		stx $15				stx tmp1+0		; save data stack index
.8630	a6 4d		ldx $4d				ldx fp			; X= FP stack index
.8632	b5 58		lda $58,x			lda FSMant0,x
.8634	b4 4e		ldy $4e,x			ldy FSExp,x
.8636	10 18		bpl $8650			bpl _18
.8638	a4 17		ldy $17				ldy tmp2+0		; return zero
.863a	a9 00		lda #$00			lda #0
.863c	95 62		sta $62,x			sta FSMant1,x
.863e	95 6c		sta $6c,x			sta FSMant2,x
.8640	95 76		sta $76,x			sta FSMant3,x
.8642	f0 10		beq $8654			beq _30
.8644	c8		iny		_12:		iny			; exp += 1
.8645	c9 80		cmp #$80			cmp #$80		; mantissa >>=1
.8647	6a		ror a				ror a
.8648	76 62		ror $62,x			ror FSMant1,x
.864a	76 6c		ror $6c,x			ror FSMant2,x
.864c	76 76		ror $76,x			ror FSMant3,x
.864e	66 16		ror $16				ror tmp1+1		; save lo bit
.8650	c4 17		cpy $17		_18:		cpy tmp2+0		; while exp<alignment
.8652	90 f0		bcc $8644			bcc _12
.8654	95 58		sta $58,x	_30:		sta FSMant0,x
.8656	94 4e		sty $4e,x			sty FSExp,x
.8658	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
.865a	06 16		asl $16				asl tmp1+1		; set carry bit
.865c	60		rts				rts
>865d	46 54 72 75 6e 63		L1:	.text "FTrunc"	;  name of word as a string, ending at wh_NameLastChar
>8663	06					.byte *-L1	;wh_NameLength	length of name
>8664	7d 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8666	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8667	08					.byte NN	;wh_Flags	dictionary flags
=34275					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8668	a4 4d		ldy $4d		FTrunc:		ldy fp
.866a	b9 58 00	lda $0058,y			lda FSMant0,y
.866d	10 93		bpl $8602			bpl Floor
.866f	20 1e 8b	jsr $8b1e			jsr FNegate
.8672	20 02 86	jsr $8602			jsr Floor
.8675	4c 1e 8b	jmp $8b1e			jmp FNegate
>8678	46 52 6f 75 6e 64		L1:	.text "FRound"	;  name of word as a string, ending at wh_NameLastChar
>867e	06					.byte *-L1	;wh_NameLength	length of name
>867f	e3 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8681	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8682	08					.byte NN	;wh_Flags	dictionary flags
=34302					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8683	a9 1f		lda #$1f	FRound:		lda #31
.8685	20 2a 86	jsr $862a			jsr FIntAlignA
.8688	90 03		bcc $868d			bcc _15
.868a	4c da 8a	jmp $8ada			jmp F1Plus
.868d	4c 1c 8a	jmp $8a1c	_15:		jmp FNorm
=13					CL	.var *-(WordListLink+wh_Xt)
=$8690					en = *	; remember here
>8681	0d					.byte CL	;wh_CodeLength
>8690	46 49 6e 74 46 72 63		L1:	.text "FIntFrc"	;  name of word as a string, ending at wh_NameLastChar
>8697	07					.byte *-L1	;wh_NameLength	length of name
>8698	fe 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>869a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>869b	08					.byte NN	;wh_Flags	dictionary flags
=34327					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.869c	20 fd 83	jsr $83fd	FIntFrc:	jsr FDup	; ( r1 r1 )
.869f	20 02 86	jsr $8602			jsr Floor	; ( r1 rint )
.86a2	20 be 84	jsr $84be			jsr FTuck	; ( rint r1 rint )
.86a5	20 e7 8a	jsr $8ae7			jsr FMinus	; ( rint rfrac )
.86a8	4c 85 84	jmp $8485			jmp FSwap	; ( rfrac rint )
=15					CL	.var *-(WordListLink+wh_Xt)
=$86ab					en = *	; remember here
>869a	0f					.byte CL	;wh_CodeLength
.86ab					FTrue1:
.86ab	e6 4d		inc $4d				inc fp		; FDrop
.86ad	4c 00 b6	jmp $b600			jmp True	; return true
.86b0					FFalse1:
.86b0	e6 4d		inc $4d				inc fp		; FDrop
.86b2	4c 13 b6	jmp $b613			jmp False	; return false
>86b5	46 30 3d			L1:	.text "F0="	;  name of word as a string, ending at wh_NameLastChar
>86b8	03					.byte *-L1	;wh_NameLength	length of name
>86b9	17 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86bc	08					.byte NN	;wh_Flags	dictionary flags
=34360					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86bd	a4 4d		ldy $4d		FZEq:		ldy fp
.86bf	b9 58 00	lda $0058,y			lda FSMant0,y
.86c2	d0 ec		bne $86b0			bne FFalse1
.86c4	f0 e5		beq $86ab			beq FTrue1
=9					CL	.var *-(WordListLink+wh_Xt)
=$86c6					en = *	; remember here
>86bb	09					.byte CL	;wh_CodeLength
>86c6	46 30 3c 3e			L1:	.text "F0<>"	;  name of word as a string, ending at wh_NameLastChar
>86ca	04					.byte *-L1	;wh_NameLength	length of name
>86cb	38 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86ce	08					.byte NN	;wh_Flags	dictionary flags
=34378					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86cf	a4 4d		ldy $4d		FZNe:		ldy fp
.86d1	b9 58 00	lda $0058,y			lda FSMant0,y
.86d4	f0 da		beq $86b0			beq FFalse1
.86d6	d0 d3		bne $86ab			bne FTrue1
=9					CL	.var *-(WordListLink+wh_Xt)
=$86d8					en = *	; remember here
>86cd	09					.byte CL	;wh_CodeLength
>86d8	46 30 3c			L1:	.text "F0<"	;  name of word as a string, ending at wh_NameLastChar
>86db	03					.byte *-L1	;wh_NameLength	length of name
>86dc	4a 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86df	08					.byte NN	;wh_Flags	dictionary flags
=34395					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86e0	a4 4d		ldy $4d		FZLt:		ldy fp
.86e2	b9 58 00	lda $0058,y			lda FSMant0,y
.86e5	30 c4		bmi $86ab			bmi FTrue1
.86e7	10 c7		bpl $86b0			bpl FFalse1
=9					CL	.var *-(WordListLink+wh_Xt)
=$86e9					en = *	; remember here
>86de	09					.byte CL	;wh_CodeLength
>86e9	46 30 3e 3d			L1:	.text "F0>="	;  name of word as a string, ending at wh_NameLastChar
>86ed	04					.byte *-L1	;wh_NameLength	length of name
>86ee	5b 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86f1	08					.byte NN	;wh_Flags	dictionary flags
=34413					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86f2	a4 4d		ldy $4d		FZGe:		ldy fp
.86f4	b9 58 00	lda $0058,y			lda FSMant0,y
.86f7	10 b2		bpl $86ab			bpl FTrue1
.86f9	30 b5		bmi $86b0			bmi FFalse1
=9					CL	.var *-(WordListLink+wh_Xt)
=$86fb					en = *	; remember here
>86f0	09					.byte CL	;wh_CodeLength
>86fb	46 30 3e			L1:	.text "F0>"	;  name of word as a string, ending at wh_NameLastChar
>86fe	03					.byte *-L1	;wh_NameLength	length of name
>86ff	6d 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8701	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8702	08					.byte NN	;wh_Flags	dictionary flags
=34430					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8703	a4 4d		ldy $4d		FZGt:		ldy fp
.8705	b9 58 00	lda $0058,y			lda FSMant0,y
.8708	30 a6		bmi $86b0			bmi FFalse1
.870a	d0 9f		bne $86ab			bne FTrue1
.870c	f0 a2		beq $86b0			beq FFalse1
=11					CL	.var *-(WordListLink+wh_Xt)
=$870e					en = *	; remember here
>8701	0b					.byte CL	;wh_CodeLength
>870e	46 30 3c 3d			L1:	.text "F0<="	;  name of word as a string, ending at wh_NameLastChar
>8712	04					.byte *-L1	;wh_NameLength	length of name
>8713	7e 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8715	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8716	08					.byte NN	;wh_Flags	dictionary flags
=34450					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8717	a4 4d		ldy $4d		FZLe:		ldy fp
.8719	b9 58 00	lda $0058,y			lda FSMant0,y
.871c	30 8d		bmi $86ab			bmi FTrue1
.871e	d0 90		bne $86b0			bne FFalse1
.8720	f0 89		beq $86ab			beq FTrue1
=11					CL	.var *-(WordListLink+wh_Xt)
=$8722					en = *	; remember here
>8715	0b					.byte CL	;wh_CodeLength
>8722	46 3c				L1:	.text "F<"	;  name of word as a string, ending at wh_NameLastChar
>8724	02					.byte *-L1	;wh_NameLength	length of name
>8725	92 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8727	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8728	08					.byte NN	;wh_Flags	dictionary flags
=34468					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8729	20 a5 85	jsr $85a5	FLt:		jsr FCmpA
.872c	30 35		bmi $8763			bmi FTrue2
.872e					FFalse2:
.872e	e6 4d		inc $4d				inc fp		; FDrop
.8730	e6 4d		inc $4d				inc fp		; FDrop
.8732	4c 13 b6	jmp $b613			jmp False	; return False
=12					CL	.var *-(WordListLink+wh_Xt)
=$8735					en = *	; remember here
>8727	0c					.byte CL	;wh_CodeLength
>8735	46 3e 3d			L1:	.text "F>="	;  name of word as a string, ending at wh_NameLastChar
>8738	03					.byte *-L1	;wh_NameLength	length of name
>8739	a4 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>873b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>873c	08					.byte NN	;wh_Flags	dictionary flags
=34488					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.873d	20 a5 85	jsr $85a5	FGe:		jsr FCmpA
.8740	10 21		bpl $8763			bpl FTrue2
.8742	30 ea		bmi $872e			bmi FFalse2
=7					CL	.var *-(WordListLink+wh_Xt)
=$8744					en = *	; remember here
>873b	07					.byte CL	;wh_CodeLength
>8744	46 3e				L1:	.text "F>"	;  name of word as a string, ending at wh_NameLastChar
>8746	02					.byte *-L1	;wh_NameLength	length of name
>8747	b8 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8749	03					.byte 3		;wh_CodeLength  (with placeholder value)
>874a	08					.byte NN	;wh_Flags	dictionary flags
=34502					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.874b	20 a5 85	jsr $85a5	FGt:		jsr FCmpA
.874e	30 de		bmi $872e			bmi FFalse2
.8750	d0 11		bne $8763			bne FTrue2
.8752	f0 da		beq $872e			beq FFalse2
=9					CL	.var *-(WordListLink+wh_Xt)
=$8754					en = *	; remember here
>8749	09					.byte CL	;wh_CodeLength
>8754	46 3c 3d			L1:	.text "F<="	;  name of word as a string, ending at wh_NameLastChar
>8757	03					.byte *-L1	;wh_NameLength	length of name
>8758	c6 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>875a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>875b	08					.byte NN	;wh_Flags	dictionary flags
=34519					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.875c	20 a5 85	jsr $85a5	FLe:		jsr FCmpA
.875f	30 02		bmi $8763			bmi FTrue2
.8761	d0 cb		bne $872e			bne FFalse2
.8763					FTrue2:
.8763	e6 4d		inc $4d				inc fp		; FDrop
.8765	e6 4d		inc $4d				inc fp		; FDrop
.8767	4c 00 b6	jmp $b600			jmp True	; return True
=14					CL	.var *-(WordListLink+wh_Xt)
=$876a					en = *	; remember here
>875a	0e					.byte CL	;wh_CodeLength
>876a	46 3c 3e			L1:	.text "F<>"	;  name of word as a string, ending at wh_NameLastChar
>876d	03					.byte *-L1	;wh_NameLength	length of name
>876e	d7 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8770	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8771	08					.byte NN	;wh_Flags	dictionary flags
=34541					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8772	20 a5 85	jsr $85a5	FNe:		jsr FCmpA
.8775	d0 ec		bne $8763			bne FTrue2
.8777	f0 b5		beq $872e			beq FFalse2
=7					CL	.var *-(WordListLink+wh_Xt)
=$8779					en = *	; remember here
>8770	07					.byte CL	;wh_CodeLength
>8779	46 3d				L1:	.text "F="	;  name of word as a string, ending at wh_NameLastChar
>877b	02					.byte *-L1	;wh_NameLength	length of name
>877c	ed 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>877e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>877f	08					.byte NN	;wh_Flags	dictionary flags
=34555					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8780	20 a5 85	jsr $85a5	FEq:		jsr FCmpA
.8783	d0 a9		bne $872e			bne FFalse2
.8785	f0 dc		beq $8763			beq FTrue2
=7					CL	.var *-(WordListLink+wh_Xt)
=$8787					en = *	; remember here
>877e	07					.byte CL	;wh_CodeLength
>8787	46 7e 41 62 73			L1:	.text "F~Abs"	;  name of word as a string, ending at wh_NameLastChar
>878c	05					.byte *-L1	;wh_NameLength	length of name
>878d	fb 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>878f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8790	08					.byte NN	;wh_Flags	dictionary flags
=34572					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8791	20 f7 84	jsr $84f7	FTAbs:		jsr FMRot
.8794	20 e7 8a	jsr $8ae7			jsr FMinus
.8797	20 45 8b	jsr $8b45			jsr FAbs
.879a	4c 4b 87	jmp $874b			jmp FGt
=12					CL	.var *-(WordListLink+wh_Xt)
=$879d					en = *	; remember here
>878f	0c					.byte CL	;wh_CodeLength
>879d	46 7e 52 65 6c			L1:	.text "F~Rel"	;  name of word as a string, ending at wh_NameLastChar
>87a2	05					.byte *-L1	;wh_NameLength	length of name
>87a3	0c 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87a5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87a6	08					.byte NN	;wh_Flags	dictionary flags
=34594					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87a7	20 21 84	jsr $8421	FTRel:		jsr FOver
.87aa	a9 03		lda #$03			lda #3
.87ac	20 48 84	jsr $8448			jsr FPickA
.87af	20 a5 8a	jsr $8aa5			jsr FPlus
.87b2	20 45 8b	jsr $8b45			jsr FAbs
.87b5	20 72 8b	jsr $8b72			jsr FStar		; r1 r2 r3*|r1+r2|
.87b8	20 f7 84	jsr $84f7			jsr FMRot		; r3*|r1+r2| r1 r2
.87bb	20 e7 8a	jsr $8ae7			jsr FMinus
.87be	20 45 8b	jsr $8b45			jsr FAbs
.87c1	4c 4b 87	jmp $874b			jmp FGt
=29					CL	.var *-(WordListLink+wh_Xt)
=$87c4					en = *	; remember here
>87a5	1d					.byte CL	;wh_CodeLength
>87c4	46 7e				L1:	.text "F~"	;  name of word as a string, ending at wh_NameLastChar
>87c6	02					.byte *-L1	;wh_NameLength	length of name
>87c7	22 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87c9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87ca	08					.byte NN	;wh_Flags	dictionary flags
=34630					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87cb	a4 4d		ldy $4d		FTilde:		ldy fp
.87cd	b9 58 00	lda $0058,y			lda FSMant0,y
.87d0	30 06		bmi $87d8			bmi _10			; r3<0
.87d2	d0 bd		bne $8791			bne FTAbs		; r3>0
.87d4	e6 4d		inc $4d				inc fp			; r3=0
.87d6	d0 a8		bne $8780			bne FEq
.87d8	20 1e 8b	jsr $8b1e	_10:		jsr FNegate
.87db	4c a7 87	jmp $87a7			jmp FTRel
=19					CL	.var *-(WordListLink+wh_Xt)
=$87de					en = *	; remember here
>87c9	13					.byte CL	;wh_CodeLength
>87de	46 56 61 72 69 61 62 6c		L1:	.text "FVariable"	;  name of word as a string, ending at wh_NameLastChar
>87e6	65
>87e7	09					.byte *-L1	;wh_NameLength	length of name
>87e8	46 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87ea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87eb	0c					.byte IM+NN	;wh_Flags	dictionary flags
=34663					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87ec	20 cd bf	jsr $bfcd	FVariable:	jsr Create		; compile word header & push PFA adr
.87ef	20 31 ba	jsr $ba31			jsr adjust_z		; fix word code length
.87f2	20 66 88	jsr $8866			jsr F0			; alloc & init data
.87f5	4c 63 85	jmp $8563			jmp FComma
=12					CL	.var *-(WordListLink+wh_Xt)
=$87f8					en = *	; remember here
>87ea	0c					.byte CL	;wh_CodeLength
>87f8	46 4c 69 74 65 72 61 6c		L1:	.text "FLiteral"	;  name of word as a string, ending at wh_NameLastChar
>8800	08					.byte *-L1	;wh_NameLength	length of name
>8801	67 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8803	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8804	0c					.byte IM+NN	;wh_Flags	dictionary flags
=34688					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8805	a4 4d		ldy $4d		FLiteral:	ldy fp
.8807	b9 62 00	lda $0062,y			lda FSMant1,y		; will short work?
.880a	19 6c 00	ora $006c,y			ora FSMant2,y
.880d	19 76 00	ora $0076,y			ora FSMant3,y
.8810	f0 0a		beq $881c			beq _Short
.8812	a9 46		lda #$46			lda #<FLitI		; compile FLitI call
.8814	a0 88		ldy #$88			ldy #>FLitI
.8816	20 23 cb	jsr $cb23			jsr Jsr_Comma_YA
.8819	4c 63 85	jmp $8563			jmp FComma		; inline operand, & return
.881c					_Short:
.881c	ca		dex				dex
.881d	ca		dex				dex
.881e	b9 4e 00	lda $004e,y			lda FSExp,y		;compile load value
.8821	95 26		sta $26,x			sta DStack+1,x
.8823	b9 58 00	lda $0058,y			lda FSMant0,y
.8826	95 25		sta $25,x			sta DStack+0,x
.8828	20 c6 b5	jsr $b5c6			jsr ldya_immed_comma
.882b	e6 4d		inc $4d				inc fp			; FDrop
.882d	a9 34		lda #$34			lda #<FLitYA		; compile jsr FLitYA, & return
.882f	a0 88		ldy #$88			ldy #>FLitYA
.8831	4c 23 cb	jmp $cb23			jmp Jsr_Comma_YA
=47					CL	.var *-(WordListLink+wh_Xt)
=$8834					en = *	; remember here
>8803	2f					.byte CL	;wh_CodeLength
.8834					FLitYA:
.8834	20 92 83	jsr $8392			jsr FAllocX		; alloc FP stack entry
.8837	94 4e		sty $4e,x			sty FSExp,x
.8839	95 58		sta $58,x			sta FSMant0,x
.883b	a9 00		lda #$00			lda #0
.883d	95 62		sta $62,x			sta FSMant1,x
.883f	95 6c		sta $6c,x			sta FSMant2,x
.8841	95 76		sta $76,x			sta FSMant3,x
.8843	a6 15		ldx $15				ldx tmp1		; restore param stack index
.8845	60		rts				rts
.8846					FLitI:
.8846	68		pla				pla			; tmp2= RTS addr
.8847	85 17		sta $17				sta tmp2+0
.8849	18		clc				clc			; bump RTS addr over inline data
.884a	69 05		adc #$05			adc #5
.884c	a8		tay				tay
.884d	68		pla				pla
.884e	85 18		sta $18				sta tmp2+1
.8850	69 00		adc #$00			adc #0
.8852	48		pha				pha
.8853	98		tya				tya
.8854	48		pha				pha
.8855	e6 17		inc $17				inc tmp2+0		; tmp2 +=1 1 (correct RTS addr)
.8857	d0 02		bne $885b			bne +
.8859	e6 18		inc $18				inc tmp2+1
.885b					+
.885b	4c 0b 85	jmp $850b			jmp FAt_Tmp2		; fetch inline data, & return
>885e	30 2e 65			L1:	.text "0.e"	;  name of word as a string, ending at wh_NameLastChar
>8861	03					.byte *-L1	;wh_NameLength	length of name
>8862	80 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8864	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8865	08					.byte NN	;wh_Flags	dictionary flags
=34785					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8866	a9 00		lda #$00	F0:		lda #0
.8868	a0 80		ldy #$80			ldy #$80
.886a	d0 c8		bne $8834			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$886c					en = *	; remember here
>8864	06					.byte CL	;wh_CodeLength
>886c	31 30 2e 65			L1:	.text "10.e"	;  name of word as a string, ending at wh_NameLastChar
>8870	04					.byte *-L1	;wh_NameLength	length of name
>8871	e1 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8873	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8874	08					.byte NN	;wh_Flags	dictionary flags
=34800					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8875	a9 50		lda #$50	F10:		lda #$50
.8877	a0 04		ldy #$04			ldy #4
.8879	d0 b9		bne $8834			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$887b					en = *	; remember here
>8873	06					.byte CL	;wh_CodeLength
>887b	32 2e 65			L1:	.text "2.e"	;  name of word as a string, ending at wh_NameLastChar
>887e	03					.byte *-L1	;wh_NameLength	length of name
>887f	f0 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8881	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8882	08					.byte NN	;wh_Flags	dictionary flags
=34814					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8883	a9 40		lda #$40	F2:		lda #$40
.8885	a0 02		ldy #$02			ldy #2
.8887	d0 ab		bne $8834			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8889					en = *	; remember here
>8881	06					.byte CL	;wh_CodeLength
>8889	31 2e 65			L1:	.text "1.e"	;  name of word as a string, ending at wh_NameLastChar
>888c	03					.byte *-L1	;wh_NameLength	length of name
>888d	fe 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>888f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8890	08					.byte NN	;wh_Flags	dictionary flags
=34828					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8891	a9 40		lda #$40	F1:		lda #$40
.8893	a0 01		ldy #$01			ldy #1
.8895	d0 9d		bne $8834			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8897					en = *	; remember here
>888f	06					.byte CL	;wh_CodeLength
>8897	2e 31 65			L1:	.text ".1e"	;  name of word as a string, ending at wh_NameLastChar
>889a	03					.byte *-L1	;wh_NameLength	length of name
>889b	0c 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>889d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>889e	08					.byte NN	;wh_Flags	dictionary flags
=34842					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.889f	20 3e 89	jsr $893e	F10th:		jsr FConstantRun
>88a2	67 66 66 66					.dword $66666667	; 32 bit signed binary mantissa.  $40000000 = +0.5
>88a6	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$88a7					en = *	; remember here
>889d	08					.byte CL	;wh_CodeLength
>88a7	50 69				L1:	.text "Pi"	;  name of word as a string, ending at wh_NameLastChar
>88a9	02					.byte *-L1	;wh_NameLength	length of name
>88aa	1a 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88ac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88ad	08					.byte NN	;wh_Flags	dictionary flags
=34857					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88ae	20 3e 89	jsr $893e	FPi:		jsr FConstantRun
>88b1	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>88b5	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$88b6					en = *	; remember here
>88ac	08					.byte CL	;wh_CodeLength
>88b6	50 69 2f 32			L1:	.text "Pi/2"	;  name of word as a string, ending at wh_NameLastChar
>88ba	04					.byte *-L1	;wh_NameLength	length of name
>88bb	29 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88bd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88be	08					.byte NN	;wh_Flags	dictionary flags
=34874					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88bf	20 3e 89	jsr $893e	FPiH:		jsr FConstantRun
>88c2	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>88c6	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$88c7					en = *	; remember here
>88bd	08					.byte CL	;wh_CodeLength
>88c7	50 69 2f 34			L1:	.text "Pi/4"	;  name of word as a string, ending at wh_NameLastChar
>88cb	04					.byte *-L1	;wh_NameLength	length of name
>88cc	3a 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88cf	08					.byte NN	;wh_Flags	dictionary flags
=34891					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88d0	20 3e 89	jsr $893e	FPiQ:		jsr FConstantRun
>88d3	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>88d7	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$88d8					en = *	; remember here
>88ce	08					.byte CL	;wh_CodeLength
>88d8	32 50 69			L1:	.text "2Pi"	;  name of word as a string, ending at wh_NameLastChar
>88db	03					.byte *-L1	;wh_NameLength	length of name
>88dc	4b 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88df	08					.byte NN	;wh_Flags	dictionary flags
=34907					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88e0	20 3e 89	jsr $893e	F2Pi:		jsr FConstantRun
>88e3	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>88e7	03						.char 3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$88e8					en = *	; remember here
>88de	08					.byte CL	;wh_CodeLength
>88e8	46 2e 45			L1:	.text "F.E"	;  name of word as a string, ending at wh_NameLastChar
>88eb	03					.byte *-L1	;wh_NameLength	length of name
>88ec	5b 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88ef	08					.byte NN	;wh_Flags	dictionary flags
=34923					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88f0	20 3e 89	jsr $893e	FE:		jsr FConstantRun
>88f3	2c 2a fc 56					.dword $56fc2a2c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>88f7	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$88f8					en = *	; remember here
>88ee	08					.byte CL	;wh_CodeLength
>88f8	46 43 6f 6e 73 74 61 6e		L1:	.text "FConstant"	;  name of word as a string, ending at wh_NameLastChar
>8900	74
>8901	09					.byte *-L1	;wh_NameLength	length of name
>8902	6b 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8904	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8905	08					.byte NN	;wh_Flags	dictionary flags
=34945					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8906	20 46 bf	jsr $bf46	FConstant:	jsr Header_Comma	; compile word header
.8909	a4 4d		ldy $4d				ldy fp
.890b	b9 62 00	lda $0062,y			lda FSMant1,y		; will short work?
.890e	19 6c 00	ora $006c,y			ora FSMant2,y
.8911	19 76 00	ora $0076,y			ora FSMant3,y
.8914	f0 0d		beq $8923			beq _Short
.8916	a9 3e		lda #$3e			lda #<FConstantRun	; compile call
.8918	a0 89		ldy #$89			ldy #>FConstantRun
.891a	20 23 cb	jsr $cb23			jsr Jsr_Comma_YA
.891d	20 31 ba	jsr $ba31			jsr adjust_z
.8920	4c 63 85	jmp $8563			jmp FComma		; inline operand, & return
.8923					_Short:
.8923	ca		dex				dex			; compile load value
.8924	ca		dex				dex
.8925	b9 4e 00	lda $004e,y			lda FSExp,y
.8928	95 26		sta $26,x			sta DStack+1,x
.892a	b9 58 00	lda $0058,y			lda FSMant0,y
.892d	95 25		sta $25,x			sta DStack+0,x
.892f	20 c6 b5	jsr $b5c6			jsr ldya_immed_comma
.8932	e6 4d		inc $4d				inc fp			; FDrop
.8934	a9 34		lda #$34			lda #<FLitYA		; compile jmp FLitYA
.8936	a0 88		ldy #$88			ldy #>FLitYA
.8938	20 3a cb	jsr $cb3a			jsr Jmp_Comma_YA
.893b	4c 31 ba	jmp $ba31			jmp adjust_z
=56					CL	.var *-(WordListLink+wh_Xt)
=$893e					en = *	; remember here
>8904	38					.byte CL	;wh_CodeLength
.893e					FConstantRun:
.893e	68		pla				pla			; tmp2= pop RTS addr & add 1
.893f	18		clc				clc
.8940	69 01		adc #$01			adc #1
.8942	85 17		sta $17				sta tmp2+0
.8944	68		pla				pla
.8945	69 00		adc #$00			adc #0
.8947	85 18		sta $18				sta tmp2+1
.8949	4c 0b 85	jmp $850b			jmp FAt_Tmp2		; fetch inline data, & return
>894c	46 56 61 6c 75 65		L1:	.text "FValue"	;  name of word as a string, ending at wh_NameLastChar
>8952	06					.byte *-L1	;wh_NameLength	length of name
>8953	81 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8955	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8956	0c					.byte IM+NN	;wh_Flags	dictionary flags
=35026					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8957	20 46 bf	jsr $bf46	FValue:		jsr Header_Comma	; compile word header
.895a	a9 67		lda #$67			lda #<FValue_runtime	; compile JSR FValue_runtime
.895c	a0 89		ldy #$89			ldy #>FValue_runtime
.895e	20 23 cb	jsr $cb23			jsr Jsr_Comma_YA
.8961	20 31 ba	jsr $ba31			jsr adjust_z		; fix word length
.8964	4c 63 85	jmp $8563			jmp FComma		; alloc & init value
=16					CL	.var *-(WordListLink+wh_Xt)
=$8967					en = *	; remember here
>8955	10					.byte CL	;wh_CodeLength
.8967					FValue_runtime:
.8967	4c 3e 89	jmp $893e			jmp FConstantRun
>896a	46 53 63 61 6c 65		L1:	.text "FScale"	;  name of word as a string, ending at wh_NameLastChar
>8970	06					.byte *-L1	;wh_NameLength	length of name
>8971	d2 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8973	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8974	08					.byte NN	;wh_Flags	dictionary flags
=35056					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8975	20 34 b2	jsr $b234	FScale:		jsr PopA		; pop n
.8978	86 15		stx $15		FScaleA:	stx tmp1		; save data stack index
.897a	a6 4d		ldx $4d				ldx fp
.897c	b4 58		ldy $58,x			ldy FSMant0,x		; mantissa zero?
.897e	f0 07		beq $8987			beq _8
.8980	18		clc				clc
.8981	75 4e		adc $4e,x			adc FSExp,x
.8983	95 4e		sta $4e,x			sta FSExp,x
.8985	70 03		bvs $898a			bvs _overflow		; overflow or underflow?
.8987	a6 15		ldx $15		_8:		ldx tmp1		; restore data stack index
.8989	60		rts				rts
.898a					_overflow:
.898a	a6 15		ldx $15				ldx tmp1		; restore data stack index
.898c	20 72 b2	jsr $b272			jsr Throw_FpOutOfRange
=26					CL	.var *-(WordListLink+wh_Xt)
=$898f					en = *	; remember here
>8973	1a					.byte CL	;wh_CodeLength
>898f	46 32 2a			L1:	.text "F2*"	;  name of word as a string, ending at wh_NameLastChar
>8992	03					.byte *-L1	;wh_NameLength	length of name
>8993	f0 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8995	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8996	08					.byte NN	;wh_Flags	dictionary flags
=35090					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8997	a9 01		lda #$01	F2Star:		lda #1
.8999	d0 dd		bne $8978			bne FScaleA
=4					CL	.var *-(WordListLink+wh_Xt)
=$899b					en = *	; remember here
>8995	04					.byte CL	;wh_CodeLength
>899b	46 32 2f			L1:	.text "F2/"	;  name of word as a string, ending at wh_NameLastChar
>899e	03					.byte *-L1	;wh_NameLength	length of name
>899f	12 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89a1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89a2	08					.byte NN	;wh_Flags	dictionary flags
=35102					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89a3	a9 ff		lda #$ff	F2Slash:	lda #$ff
.89a5	d0 d1		bne $8978			bne FScaleA
=4					CL	.var *-(WordListLink+wh_Xt)
=$89a7					en = *	; remember here
>89a1	04					.byte CL	;wh_CodeLength
>89a7	ae 89				L1:	.text FMAlignX	;  name of word as a string, ending at wh_NameLastChar
>89a9	02					.byte *-L1	;wh_NameLength	length of name
>89aa	1e 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89ac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89ad	08					.byte NN	;wh_Flags	dictionary flags
=35113					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89ae	86 15		stx $15		FMAlignX:	stx tmp1+0	; save data stack index
.89b0	a6 4d		ldx $4d				ldx fp		; load FP stack index
.89b2	b5 4e		lda $4e,x			lda FSExp+0,x
.89b4	38		sec				sec
.89b5	f5 4f		sbc $4f,x			sbc FSExp+1,x	; compare exponents
.89b7	a8		tay				tay
.89b8	f0 22		beq $89dc			beq _rts	; already = ?
.89ba	10 2b		bpl $89e7			bpl _2		; r2 smaller?
.89bc					_1:
.89bc	70 4a		bvs $8a08			bvs _2z		; was this a big positive #?
.89be	c0 e0		cpy #$e0			cpy #-32
.89c0	90 1b		bcc $89dd			bcc _1z		; all significant bits gone?
.89c2	b5 58		lda $58,x			lda FSMant0+0,x
.89c4	29 80		and #$80			and #$80
.89c6	85 16		sta $16				sta tmp1+1	; prepare sign for shifts
.89c8	b5 58		lda $58,x			lda FSMant0+0,x
.89ca	4a		lsr a		_1s:		lsr a
.89cb	05 16		ora $16				ora tmp1+1
.89cd	76 62		ror $62,x			ror FSMant1+0,x
.89cf	76 6c		ror $6c,x			ror FSMant2+0,x
.89d1	76 76		ror $76,x			ror FSMant3+0,x
.89d3	c8		iny				iny
.89d4	d0 f4		bne $89ca			bne _1s
.89d6	95 58		sta $58,x	_1e:		sta FSMant0+0,x
.89d8	b5 4f		lda $4f,x			lda FSExp+1,x
.89da	95 4e		sta $4e,x			sta FSExp+0,x
.89dc	60		rts		_rts:		rts
.89dd	a9 00		lda #$00	_1z:		lda #0		; TOS=0
.89df	95 62		sta $62,x			sta FSMant1+0,x
.89e1	95 6c		sta $6c,x			sta FSMant2+0,x
.89e3	95 76		sta $76,x			sta FSMant3+0,x
.89e5	f0 ef		beq $89d6			beq _1e
.89e7					_2:
.89e7	70 f4		bvs $89dd			bvs _1z		; was this a big negative #?
.89e9	c0 20		cpy #$20			cpy #32
.89eb	b0 1b		bcs $8a08			bcs _2z		; all significant bits gone?
.89ed	b5 59		lda $59,x			lda FSMant0+1,x
.89ef	29 80		and #$80			and #$80
.89f1	85 16		sta $16				sta tmp1+1	; prepare sign for shifts
.89f3	b5 59		lda $59,x			lda FSMant0+1,x
.89f5	4a		lsr a		_2s:		lsr a
.89f6	05 16		ora $16				ora tmp1+1
.89f8	76 63		ror $63,x			ror FSMant1+1,x
.89fa	76 6d		ror $6d,x			ror FSMant2+1,x
.89fc	76 77		ror $77,x			ror FSMant3+1,x
.89fe	88		dey				dey
.89ff	d0 f4		bne $89f5			bne _2s
.8a01	95 59		sta $59,x	_2e:		sta FSMant0+1,x
.8a03	b5 4e		lda $4e,x			lda FSExp+0,x
.8a05	95 4f		sta $4f,x			sta FSExp+1,x
.8a07	60		rts				rts
.8a08	a9 00		lda #$00	_2z:		lda #0		; NOS=0
.8a0a	95 63		sta $63,x			sta FSMant1+1,x
.8a0c	95 6d		sta $6d,x			sta FSMant2+1,x
.8a0e	95 77		sta $77,x			sta FSMant3+1,x
.8a10	f0 ef		beq $8a01			beq _2e
=100					CL	.var *-(WordListLink+wh_Xt)
=$8a12					en = *	; remember here
>89ac	64					.byte CL	;wh_CodeLength
>8a12	46 4e 6f 72 6d			L1:	.text "FNorm"	;  name of word as a string, ending at wh_NameLastChar
>8a17	05					.byte *-L1	;wh_NameLength	length of name
>8a18	29 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a1a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a1b	08					.byte NN	;wh_Flags	dictionary flags
=35223					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a1c	86 15		stx $15		FNorm:		stx tmp1+0		; save data stack index
.8a1e	a6 4d		ldx $4d		FNormX:		ldx fp			; switch to FP stack
.8a20	b4 4e		ldy $4e,x			ldy FSExp,x
.8a22	b5 58		lda $58,x			lda FSMant0,x		; mantissa negative?
.8a24	30 2d		bmi $8a53			bmi _Neg
.8a26	d0 0f		bne $8a37			bne _Pos2		; do byte shift
.8a28	20 86 8a	jsr $8a86			jsr _ShiftB
.8a2b	d0 0a		bne $8a37			bne _Pos2
.8a2d	20 86 8a	jsr $8a86			jsr _ShiftB
.8a30	d0 05		bne $8a37			bne _Pos2
.8a32	20 86 8a	jsr $8a86			jsr _ShiftB
.8a35	f0 43		beq $8a7a			beq _zero		; no significant bits left?
.8a37	18		clc		_Pos2:		clc
.8a38	30 0a		bmi $8a44			bmi _RShft
.8a3a	88		dey		_Pos3:		dey			; do bit shift
.8a3b	16 76		asl $76,x			asl FSMant3,x
.8a3d	36 6c		rol $6c,x			rol FSMant2,x
.8a3f	36 62		rol $62,x			rol FSMant1,x
.8a41	2a		rol a				rol a
.8a42	10 f6		bpl $8a3a			bpl _Pos3
.8a44					_RShft:
.8a44	c8		iny				iny
.8a45	6a		ror a				ror a
.8a46	76 62		ror $62,x			ror FSMant1,x
.8a48	76 6c		ror $6c,x			ror FSMant2,x
.8a4a	76 76		ror $76,x			ror FSMant3,x
.8a4c					_28:
.8a4c	95 58		sta $58,x			sta FSMant0,x
.8a4e	94 4e		sty $4e,x			sty FSExp,x
.8a50	a6 15		ldx $15				ldx tmp1+0	; restore data stack index
.8a52	60		rts				rts
.8a53					_Neg:
.8a53	c9 ff		cmp #$ff			cmp #$ff
.8a55	d0 11		bne $8a68			bne _Neg2	; do byte shift
.8a57	20 86 8a	jsr $8a86			jsr _ShiftB
.8a5a	c9 ff		cmp #$ff			cmp #$ff
.8a5c	d0 0a		bne $8a68			bne _Neg2
.8a5e	20 86 8a	jsr $8a86			jsr _ShiftB
.8a61	c9 ff		cmp #$ff			cmp #$ff
.8a63	d0 03		bne $8a68			bne _Neg2
.8a65	20 86 8a	jsr $8a86			jsr _ShiftB
.8a68	c9 00		cmp #$00	_Neg2:		cmp #0
.8a6a	10 d8		bpl $8a44			bpl _RShft
.8a6c	88		dey		_Neg3:		dey
.8a6d	16 76		asl $76,x			asl FSMant3,x
.8a6f	36 6c		rol $6c,x			rol FSMant2,x
.8a71	36 62		rol $62,x			rol FSMant1,x
.8a73	2a		rol a				rol a
.8a74	30 f6		bmi $8a6c			bmi _Neg3
.8a76	10 cc		bpl $8a44			bpl _RShft
.8a78	68		pla		_Zerop:		pla
.8a79	68		pla				pla		; pop rts addr from _ShiftB
.8a7a	a9 00		lda #$00	_zero:		lda #0
.8a7c	95 76		sta $76,x			sta FSMant3,x
.8a7e	95 6c		sta $6c,x			sta FSMant2,x
.8a80	95 62		sta $62,x			sta FSMant1,x
.8a82	a0 80		ldy #$80			ldy #$80
.8a84	d0 c6		bne $8a4c			bne _28
.8a86					_ShiftB:
.8a86	98		tya				tya
.8a87	38		sec				sec
.8a88	e9 08		sbc #$08			sbc #8
.8a8a	a8		tay				tay
.8a8b	70 eb		bvs $8a78			bvs _zerop	;is this useful? do we need more of them?
.8a8d	b5 62		lda $62,x			lda FSMant1,x
.8a8f	48		pha				pha
.8a90	b5 6c		lda $6c,x			lda FSMant2,x
.8a92	95 62		sta $62,x			sta FSMant1,x
.8a94	b5 76		lda $76,x			lda FSMant3,x
.8a96	95 6c		sta $6c,x			sta FSMant2,x
.8a98	a9 00		lda #$00			lda #0
.8a9a	95 76		sta $76,x			sta FSMant3,x
.8a9c	68		pla				pla
.8a9d	60		rts				rts
=130					CL	.var *-(WordListLink+wh_Xt)
=$8a9e					en = *	; remember here
>8a1a	82					.byte CL	;wh_CodeLength
>8a9e	46 2b				L1:	.text "F+"	;  name of word as a string, ending at wh_NameLastChar
>8aa0	02					.byte *-L1	;wh_NameLength	length of name
>8aa1	97 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8aa3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8aa4	08					.byte NN	;wh_Flags	dictionary flags
=35360					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8aa5	20 ae 89	jsr $89ae	FPlus:		jsr FMAlignX	; align mantissas
.8aa8	18		clc				clc		; add mantissas
.8aa9	b5 77		lda $77,x			lda FSMant3+1,x
.8aab	75 76		adc $76,x			adc FSMant3+0,x
.8aad	95 77		sta $77,x			sta FSMant3+1,x
.8aaf	b5 6d		lda $6d,x			lda FSMant2+1,x
.8ab1	75 6c		adc $6c,x			adc FSMant2+0,x
.8ab3	95 6d		sta $6d,x			sta FSMant2+1,x
.8ab5	b5 63		lda $63,x			lda FSMant1+1,x
.8ab7	75 62		adc $62,x			adc FSMant1+0,x
.8ab9	95 63		sta $63,x			sta FSMant1+1,x
.8abb	b5 59		lda $59,x			lda FSMant0+1,x
.8abd	75 58		adc $58,x			adc FSMant0+0,x
.8abf					FPlusFin:
.8abf	e8		inx				inx		; FDrop
.8ac0	86 4d		stx $4d				stx fp
.8ac2	50 09		bvc $8acd	FPlusFin3:	bvc _19		; if overflow
.8ac4	6a		ror a				ror a		;   shift mantissa right 1 bit
.8ac5	76 62		ror $62,x			ror FSMant1,x
.8ac7	76 6c		ror $6c,x			ror FSMant2,x
.8ac9	76 76		ror $76,x			ror FSMant3,x
.8acb	f6 4e		inc $4e,x			inc FSExp,x	;   adjust exponent
.8acd					_19:
.8acd	95 58		sta $58,x			sta FSMant0,x
.8acf	4c 1e 8a	jmp $8a1e			jmp FNormX	; normalize, return
=45					CL	.var *-(WordListLink+wh_Xt)
=$8ad2					en = *	; remember here
>8aa3	2d					.byte CL	;wh_CodeLength
>8ad2	46 31 2b			L1:	.text "F1+"	;  name of word as a string, ending at wh_NameLastChar
>8ad5	03					.byte *-L1	;wh_NameLength	length of name
>8ad6	20 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ad8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ad9	08					.byte NN	;wh_Flags	dictionary flags
=35413					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ada	20 91 88	jsr $8891	F1Plus:		jsr F1
.8add	4c a5 8a	jmp $8aa5			jmp FPlus
=6					CL	.var *-(WordListLink+wh_Xt)
=$8ae0					en = *	; remember here
>8ad8	06					.byte CL	;wh_CodeLength
>8ae0	46 2d				L1:	.text "F-"	;  name of word as a string, ending at wh_NameLastChar
>8ae2	02					.byte *-L1	;wh_NameLength	length of name
>8ae3	55 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ae5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ae6	08					.byte NN	;wh_Flags	dictionary flags
=35426					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ae7	20 ae 89	jsr $89ae	FMinus:		jsr FMAlignX	; align mantissas
.8aea	38		sec				sec		; subtract mantissas
.8aeb	b5 77		lda $77,x			lda FSMant3+1,x
.8aed	f5 76		sbc $76,x			sbc FSMant3+0,x
.8aef	95 77		sta $77,x			sta FSMant3+1,x
.8af1	b5 6d		lda $6d,x			lda FSMant2+1,x
.8af3	f5 6c		sbc $6c,x			sbc FSMant2+0,x
.8af5	95 6d		sta $6d,x			sta FSMant2+1,x
.8af7	b5 63		lda $63,x			lda FSMant1+1,x
.8af9	f5 62		sbc $62,x			sbc FSMant1+0,x
.8afb	95 63		sta $63,x			sta FSMant1+1,x
.8afd	b5 59		lda $59,x			lda FSMant0+1,x
.8aff	f5 58		sbc $58,x			sbc FSMant0+0,x
.8b01	4c bf 8a	jmp $8abf			jmp FPlusFin
=29					CL	.var *-(WordListLink+wh_Xt)
=$8b04					en = *	; remember here
>8ae5	1d					.byte CL	;wh_CodeLength
>8b04	46 31 2d			L1:	.text "F1-"	;  name of word as a string, ending at wh_NameLastChar
>8b07	03					.byte *-L1	;wh_NameLength	length of name
>8b08	62 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b0a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b0b	08					.byte NN	;wh_Flags	dictionary flags
=35463					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b0c	20 91 88	jsr $8891	F1Minus:	jsr F1
.8b0f	4c e7 8a	jmp $8ae7			jmp FMinus
=6					CL	.var *-(WordListLink+wh_Xt)
=$8b12					en = *	; remember here
>8b0a	06					.byte CL	;wh_CodeLength
>8b12	46 4e 65 67 61 74 65		L1:	.text "FNegate"	;  name of word as a string, ending at wh_NameLastChar
>8b19	07					.byte *-L1	;wh_NameLength	length of name
>8b1a	87 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b1c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b1d	08					.byte NN	;wh_Flags	dictionary flags
=35481					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b1e	86 15		stx $15		FNegate:	stx tmp1	; save data stack index
.8b20	a6 4d		ldx $4d				ldx fp		; X= FP stack index
.8b22	38		sec				sec		; mantissa = 0 - mantissa
.8b23	a9 00		lda #$00			lda #0
.8b25	f5 76		sbc $76,x			sbc FSMant3,x
.8b27	95 76		sta $76,x			sta FSMant3,x
.8b29	a9 00		lda #$00			lda #0
.8b2b	f5 6c		sbc $6c,x			sbc FSMant2,x
.8b2d	95 6c		sta $6c,x			sta FSMant2,x
.8b2f	a9 00		lda #$00			lda #0
.8b31	f5 62		sbc $62,x			sbc FSMant1,x
.8b33	95 62		sta $62,x			sta FSMant1,x
.8b35	a9 00		lda #$00			lda #0
.8b37	f5 58		sbc $58,x			sbc FSMant0,x
.8b39	4c c2 8a	jmp $8ac2			jmp FPlusFin3	; finish up, return
=30					CL	.var *-(WordListLink+wh_Xt)
=$8b3c					en = *	; remember here
>8b1c	1e					.byte CL	;wh_CodeLength
>8b3c	46 41 62 73			L1:	.text "FAbs"	;  name of word as a string, ending at wh_NameLastChar
>8b40	04					.byte *-L1	;wh_NameLength	length of name
>8b41	99 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b43	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b44	08					.byte NN	;wh_Flags	dictionary flags
=35520					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b45	a4 4d		ldy $4d		FAbs:		ldy fp
.8b47	b9 58 00	lda $0058,y			lda FSMant0,y		; mantissa negative?
.8b4a	30 d2		bmi $8b1e			bmi FNegate
.8b4c	60		rts				rts
=8					CL	.var *-(WordListLink+wh_Xt)
=$8b4d					en = *	; remember here
>8b43	08					.byte CL	;wh_CodeLength
.8b4d	a4 4d		ldy $4d		FPos:		ldy fp			; load FP stack index
.8b4f	b9 58 00	lda $0058,y			lda FSMant0+0,y		; calc result sign
.8b52	59 59 00	eor $0059,y			eor FSMant0+1,y
.8b55	08		php				php
.8b56	b9 59 00	lda $0059,y			lda FSMant0+1,y		; if NOS negative
.8b59	10 07		bpl $8b62			bpl +
.8b5b	e6 4d		inc $4d				inc fp			;   point at NOS
.8b5d	20 1e 8b	jsr $8b1e			jsr FNegate		;   negate NOS
.8b60	c6 4d		dec $4d				dec fp			;   restore fp
.8b62					+
.8b62	20 45 8b	jsr $8b45			jsr FAbs		; abs TOS
.8b65	86 15		stx $15				stx tmp1+0		; save data stack index
.8b67	a6 4d		ldx $4d				ldx fp			; load FP stack index
.8b69	28		plp				plp			; restore sign flag
.8b6a	60		rts				rts
>8b6b	46 2a				L1:	.text "F*"	;  name of word as a string, ending at wh_NameLastChar
>8b6d	02					.byte *-L1	;wh_NameLength	length of name
>8b6e	c0 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b70	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b71	08					.byte NN	;wh_Flags	dictionary flags
=35565					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b72					FStar:
.8b72	20 4d 8b	jsr $8b4d			jsr FPos		; make r1 & r2 positive,
.8b75	08		php				php			;   save r3 sign
.8b76	b5 4e		lda $4e,x			lda FSExp+0,x		; add exponents
.8b78	38		sec				sec
.8b79	75 4f		adc $4f,x			adc FSExp+1,x
.8b7b	95 4f		sta $4f,x			sta FSExp+1,x
.8b7d	50 12		bvc $8b91			bvc _49			; IfVs,
.8b7f	b0 06		bcs $8b87			bcs _zero		;   underflow?
.8b81	a6 15		ldx $15				ldx tmp1+0		;   restore data stack index
.8b83	28		plp				plp			; RDrop sign flag
.8b84	20 72 b2	jsr $b272			jsr Throw_FpOutOfRange
.8b87	e8		inx		_zero:		inx			; F2Drop
.8b88	e8		inx				inx
.8b89	86 4d		stx $4d				stx fp
.8b8b	28		plp				plp			; rdrop saved result sign
.8b8c	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
.8b8e	4c 66 88	jmp $8866			jmp F0			; return zero
.8b91					_49:
.8b91	b5 59		lda $59,x			lda FSMant0+1,x		; save r1 mantissa
.8b93	48		pha				pha
.8b94	b5 63		lda $63,x			lda FSMant1+1,x
.8b96	48		pha				pha
.8b97	b5 6d		lda $6d,x			lda FSMant2+1,x
.8b99	48		pha				pha
.8b9a	b5 77		lda $77,x			lda FSMant3+1,x
.8b9c	a0 00		ldy #$00			ldy #0			; init r3 mantissa
.8b9e	94 59		sty $59,x			sty FSMant0+1,x
.8ba0	94 63		sty $63,x			sty FSMant1+1,x
.8ba2	94 6d		sty $6d,x			sty FSMant2+1,x
.8ba4	94 77		sty $77,x			sty FSMant3+1,x
.8ba6	20 c2 8b	jsr $8bc2			jsr _Byte		; do bytes of r1 mantissa
.8ba9	68		pla				pla
.8baa	20 c2 8b	jsr $8bc2			jsr _Byte
.8bad	68		pla				pla
.8bae	20 c2 8b	jsr $8bc2			jsr _Byte
.8bb1	68		pla				pla
.8bb2	20 c2 8b	jsr $8bc2			jsr _Byte
.8bb5	e6 4d		inc $4d				inc fp			; FDrop
.8bb7	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
.8bb9	28		plp				plp			; fix result sign
.8bba	10 03		bpl $8bbf			bpl +
.8bbc	4c 1e 8b	jmp $8b1e			jmp FNegate
.8bbf					+
.8bbf	4c 1c 8a	jmp $8a1c			jmp FNorm
.8bc2					_Byte:
.8bc2	85 16		sta $16				sta tmp1+1
.8bc4	a0 08		ldy #$08			ldy #8			; for each bit in byte
.8bc6	46 16		lsr $16		_b1:		lsr tmp1+1		;   if bit set
.8bc8	90 19		bcc $8be3			bcc _b3
.8bca	18		clc				clc			;     r3 += r2
.8bcb	b5 77		lda $77,x			lda FSMant3+1,x
.8bcd	75 76		adc $76,x			adc FSMant3+0,x
.8bcf	95 77		sta $77,x			sta FSMant3+1,x
.8bd1	b5 6d		lda $6d,x			lda FSMant2+1,x
.8bd3	75 6c		adc $6c,x			adc FSMant2+0,x
.8bd5	95 6d		sta $6d,x			sta FSMant2+1,x
.8bd7	b5 63		lda $63,x			lda FSMant1+1,x
.8bd9	75 62		adc $62,x			adc FSMant1+0,x
.8bdb	95 63		sta $63,x			sta FSMant1+1,x
.8bdd	b5 59		lda $59,x			lda FSMant0+1,x
.8bdf	75 58		adc $58,x			adc FSMant0+0,x
.8be1	95 59		sta $59,x			sta FSMant0+1,x
.8be3	56 59		lsr $59,x	_b3:		lsr FSMant0+1,x		;   r3 >>= 1
.8be5	76 63		ror $63,x			ror FSMant1+1,x
.8be7	76 6d		ror $6d,x			ror FSMant2+1,x
.8be9	76 77		ror $77,x			ror FSMant3+1,x
.8beb	88		dey				dey			;  next bit
.8bec	d0 d8		bne $8bc6			bne _b1
.8bee	60		rts				rts
=125					CL	.var *-(WordListLink+wh_Xt)
=$8bef					en = *	; remember here
>8b70	7d					.byte CL	;wh_CodeLength
>8bef	46 53 71 72			L1:	.text "FSqr"	;  name of word as a string, ending at wh_NameLastChar
>8bf3	04					.byte *-L1	;wh_NameLength	length of name
>8bf4	ed 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8bf6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8bf7	08					.byte NN	;wh_Flags	dictionary flags
=35699					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8bf8	20 fd 83	jsr $83fd	FSqr:		jsr FDup
.8bfb	4c 72 8b	jmp $8b72			jmp FStar
=6					CL	.var *-(WordListLink+wh_Xt)
=$8bfe					en = *	; remember here
>8bf6	06					.byte CL	;wh_CodeLength
>8bfe	46 31 30 2a			L1:	.text "F10*"	;  name of word as a string, ending at wh_NameLastChar
>8c02	04					.byte *-L1	;wh_NameLength	length of name
>8c03	73 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8c05	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8c06	08					.byte NN	;wh_Flags	dictionary flags
=35714					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8c07	20 fd 83	jsr $83fd	F10Star:	jsr FDup
.8c0a	a4 4d		ldy $4d				ldy fp
.8c0c	b9 4e 00	lda $004e,y			lda FSExp+0,y
.8c0f	18		clc				clc
.8c10	69 01		adc #$01			adc #1
.8c12	99 4e 00	sta $004e,y			sta FSExp+0,y
.8c15	18		clc				clc
.8c16	69 02		adc #$02			adc #2
.8c18	99 4f 00	sta $004f,y			sta FSExp+1,y
.8c1b	4c a5 8a	jmp $8aa5			jmp FPlus
=23					CL	.var *-(WordListLink+wh_Xt)
=$8c1e					en = *	; remember here
>8c05	17					.byte CL	;wh_CodeLength
>8c1e	46 2f				L1:	.text "F/"	;  name of word as a string, ending at wh_NameLastChar
>8c20	02					.byte *-L1	;wh_NameLength	length of name
>8c21	82 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8c23	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8c24	08					.byte NN	;wh_Flags	dictionary flags
=35744					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8c25	20 4d 8b	jsr $8b4d	FSlash:		jsr FPos		; make r1 & r2 positive
.8c28	08		php				php			;   save result sign
.8c29	b5 4f		lda $4f,x			lda FSExp+1,x		; calc exponent
.8c2b	18		clc				clc
.8c2c	69 01		adc #$01			adc #1
.8c2e	38		sec				sec
.8c2f	f5 4e		sbc $4e,x			sbc FSExp+0,x
.8c31	95 4f		sta $4f,x			sta FSExp+1,x
.8c33	50 12		bvc $8c47			bvc _49			;  IfVs
.8c35	b0 06		bcs $8c3d			bcs _Zero		; underflow?
.8c37	28		plp				plp			; drop saved result sign
.8c38	a6 16		ldx $16				ldx tmp1+1		; restore data stack index
.8c3a	20 72 b2	jsr $b272			jsr Throw_FpOutOfRange	; overflow
.8c3d	e8		inx		_Zero:		inx			; F2Drop
.8c3e	e8		inx				inx
.8c3f	86 4d		stx $4d				stx fp
.8c41	28		plp				plp			; drop saved result sign
.8c42	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
.8c44	4c 66 88	jmp $8866			jmp F0			; return 0
.8c47					_49:
.8c47	b5 77		lda $77,x			lda FSMant3+1,x		; tmp32 = r1
.8c49	85 17		sta $17				sta tmp2+0
.8c4b	b5 6d		lda $6d,x			lda FSMant2+1,x
.8c4d	85 18		sta $18				sta tmp2+1
.8c4f	b5 63		lda $63,x			lda FSMant1+1,x
.8c51	85 19		sta $19				sta tmp3+0
.8c53	b5 59		lda $59,x			lda FSMant0+1,x
.8c55	85 1a		sta $1a				sta tmp3+1
.8c57	20 80 8c	jsr $8c80			jsr _Byte
.8c5a	95 59		sta $59,x			sta FSMant0+1,x
.8c5c	20 80 8c	jsr $8c80			jsr _Byte
.8c5f	95 63		sta $63,x			sta FSMant1+1,x
.8c61	20 80 8c	jsr $8c80			jsr _Byte
.8c64	95 6d		sta $6d,x			sta FSMant2+1,x
.8c66	20 80 8c	jsr $8c80			jsr _Byte
.8c69	95 77		sta $77,x			sta FSMant3+1,x
.8c6b	56 59		lsr $59,x			lsr FSMant0+1,x
.8c6d	76 63		ror $63,x			ror FSMant1+1,x
.8c6f	76 6d		ror $6d,x			ror FSMant2+1,x
.8c71	76 77		ror $77,x			ror FSMant3+1,x
.8c73	e6 4d		inc $4d				inc fp			; FDrop
.8c75	a6 15		ldx $15				ldx tmp1+0		; restore X
.8c77	28		plp				plp			; fix sign
.8c78	10 03		bpl $8c7d			bpl +
.8c7a	20 1e 8b	jsr $8b1e			jsr FNegate
.8c7d	4c 1c 8a	jmp $8a1c	+		jmp FNorm
.8c80					_Byte:
.8c80	a0 08		ldy #$08			ldy #8			; for 8 bits
.8c82					_1:
.8c82	a5 1a		lda $1a				lda tmp3+1		;   if r1>=r2
.8c84	d5 58		cmp $58,x			cmp FSMant0+0,x
.8c86	d0 10		bne $8c98			bne _4
.8c88	a5 19		lda $19				lda tmp3+0
.8c8a	d5 62		cmp $62,x			cmp FSMant1+0,x
.8c8c	d0 0a		bne $8c98			bne _4
.8c8e	a5 18		lda $18				lda tmp2+1
.8c90	d5 6c		cmp $6c,x			cmp FSMant2+0,x
.8c92	d0 04		bne $8c98			bne _4
.8c94	a5 17		lda $17				lda tmp2+0
.8c96	d5 76		cmp $76,x			cmp FSMant3+0,x
.8c98	90 18		bcc $8cb2	_4:		bcc _2
.8c9a	a5 17		lda $17				lda tmp2+0		;     tmp32 -= r2
.8c9c	f5 76		sbc $76,x			sbc FSMant3+0,x
.8c9e	85 17		sta $17				sta tmp2+0
.8ca0	a5 18		lda $18				lda tmp2+1
.8ca2	f5 6c		sbc $6c,x			sbc FSMant2+0,x
.8ca4	85 18		sta $18				sta tmp2+1
.8ca6	a5 19		lda $19				lda tmp3+0
.8ca8	f5 62		sbc $62,x			sbc FSMant1+0,x
.8caa	85 19		sta $19				sta tmp3+0
.8cac	a5 1a		lda $1a				lda tmp3+1
.8cae	f5 58		sbc $58,x			sbc FSMant0+0,x
.8cb0	85 1a		sta $1a				sta tmp3+1
.8cb2	26 16		rol $16		_2:		rol tmp1+1		;   accum quotient bits
.8cb4	06 17		asl $17				asl tmp2+0
.8cb6	26 18		rol $18				rol tmp2+1
.8cb8	26 19		rol $19				rol tmp3+0
.8cba	26 1a		rol $1a				rol tmp3+1		;   tmp32<<=1
.8cbc	88		dey				dey			;  next
.8cbd	d0 c3		bne $8c82			bne _1
.8cbf	a5 16		lda $16				lda tmp1+1		; return bits
.8cc1	60		rts				rts
=157					CL	.var *-(WordListLink+wh_Xt)
=$8cc2					en = *	; remember here
>8c23	9d					.byte CL	;wh_CodeLength
>8cc2	46 31 2f			L1:	.text "F1/"	;  name of word as a string, ending at wh_NameLastChar
>8cc5	03					.byte *-L1	;wh_NameLength	length of name
>8cc6	a0 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8cc8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8cc9	08					.byte NN	;wh_Flags	dictionary flags
=35909					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8cca	20 91 88	jsr $8891	F1Slash:	jsr F1
.8ccd	20 85 84	jsr $8485			jsr FSwap
.8cd0	4c 25 8c	jmp $8c25			jmp FSlash
=9					CL	.var *-(WordListLink+wh_Xt)
=$8cd3					en = *	; remember here
>8cc8	09					.byte CL	;wh_CodeLength
>8cd3	45 2a				L1:	.text "E*"	;  name of word as a string, ending at wh_NameLastChar
>8cd5	02					.byte *-L1	;wh_NameLength	length of name
>8cd6	45 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8cd8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8cd9	08					.byte NN	;wh_Flags	dictionary flags
=35925					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8cda					EStar:
.8cda	20 4d 8b	jsr $8b4d			jsr FPos		; make r1 & r2 positive
.8cdd	08		php				php			;   remember result sign
.8cde	b5 4e		lda $4e,x			lda FSExp+0,x		; add exponents
.8ce0	38		sec				sec
.8ce1	75 4f		adc $4f,x			adc FSExp+1,x
.8ce3	95 4f		sta $4f,x			sta FSExp+1,x
.8ce5	70 15		bvs $8cfc			bvs _ExpOvfl
.8ce7	b5 59		lda $59,x			lda FSMant0+1,x		; save e1
.8ce9	48		pha				pha
.8cea	b5 63		lda $63,x			lda FSMant1+1,x
.8cec	a0 00		ldy #$00			ldy #0
.8cee	94 59		sty $59,x			sty FSMant0+1,x
.8cf0	94 63		sty $63,x			sty FSMant1+1,x		; zero result
.8cf2	20 0b 8d	jsr $8d0b			jsr _Byte		; do FSMant1+1 byte
.8cf5	68		pla				pla
.8cf6	20 0b 8d	jsr $8d0b			jsr _Byte		; do FSMant0+1 byte
.8cf9	4c 28 8d	jmp $8d28			jmp EFix3		; finish
.8cfc					_ExpOvfl:
.8cfc	b0 05		bcs $8d03			bcs _Zero		;underflow?
.8cfe	a6 15		ldx $15				ldx tmp1+0		; restore X
.8d00	20 72 b2	jsr $b272			jsr Throw_FpOutOfRange	;overflow
.8d03	a9 00		lda #$00	_Zero:		lda #0
.8d05	95 63		sta $63,x			sta FSMant1+1,x
.8d07	95 59		sta $59,x			sta FSMant0+1,x
.8d09	f0 1d		beq $8d28			beq EFix3
.8d0b					_Byte:
.8d0b	85 16		sta $16				sta tmp1+1
.8d0d	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d0f	46 16		lsr $16		_b1:		lsr tmp1+1		;   if bit set
.8d11	90 0d		bcc $8d20			bcc _b5
.8d13	18		clc				clc			;     r3 += r2
.8d14	b5 62		lda $62,x			lda FSMant1+0,x
.8d16	75 63		adc $63,x			adc FSMant1+1,x
.8d18	95 63		sta $63,x			sta FSMant1+1,x
.8d1a	b5 58		lda $58,x			lda FSMant0+0,x
.8d1c	75 59		adc $59,x			adc FSMant0+1,x
.8d1e	95 59		sta $59,x			sta FSMant0+1,x
.8d20					_b5:
.8d20	76 59		ror $59,x			ror FSMant0+1,x		;   r3 <<= 1
.8d22	76 63		ror $63,x			ror FSMant1+1,x
.8d24	88		dey				dey			;  next bit
.8d25	d0 e8		bne $8d0f			bne _b1
.8d27	60		rts				rts
=78					CL	.var *-(WordListLink+wh_Xt)
=$8d28					en = *	; remember here
>8cd8	4e					.byte CL	;wh_CodeLength
.8d28					EFix3:
.8d28	a9 00		lda #$00			lda #0			; zero unused mantissa
.8d2a	95 6d		sta $6d,x			sta FSMant2+1,x
.8d2c	95 77		sta $77,x			sta FSMant3+1,x
.8d2e	e6 4d		inc $4d				inc fp			; FDrop
.8d30	a6 15		ldx $15				ldx tmp1+0		; restore X
.8d32	28		plp				plp			;fix result sign
.8d33	10 03		bpl $8d38			bpl +
.8d35	4c 1e 8b	jmp $8b1e			jmp FNegate
.8d38	4c 1c 8a	jmp $8a1c	+		jmp FNorm
>8d3b	45 53 71 72			L1:	.text "ESqr"	;  name of word as a string, ending at wh_NameLastChar
>8d3f	04					.byte *-L1	;wh_NameLength	length of name
>8d40	55 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8d42	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8d43	08					.byte NN	;wh_Flags	dictionary flags
=36031					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8d44	20 fd 83	jsr $83fd	ESqr:		jsr FDup
.8d47	4c da 8c	jmp $8cda			jmp EStar
=6					CL	.var *-(WordListLink+wh_Xt)
=$8d4a					en = *	; remember here
>8d42	06					.byte CL	;wh_CodeLength
>8d4a	45 2f				L1:	.text "E/"	;  name of word as a string, ending at wh_NameLastChar
>8d4c	02					.byte *-L1	;wh_NameLength	length of name
>8d4d	bf 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8d4f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8d50	08					.byte NN	;wh_Flags	dictionary flags
=36044					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8d51	20 4d 8b	jsr $8b4d	ESlash:		jsr FPos	; make r1 & r2 positive
.8d54	08		php				php		; remember result sign
.8d55	b5 4f		lda $4f,x			lda FSExp+1,x		; calc r3 exponent
.8d57	38		sec				sec
.8d58	f5 4e		sbc $4e,x			sbc FSExp+0,x
.8d5a	70 17		bvs $8d73			bvs _ExpOvfl
.8d5c	18		clc				clc
.8d5d	69 01		adc #$01			adc #1
.8d5f	95 4f		sta $4f,x			sta FSExp+1,x
.8d61	20 79 8d	jsr $8d79			jsr _Byte		; get quotient hi byte
.8d64	48		pha				pha
.8d65	20 79 8d	jsr $8d79			jsr _Byte		; get quotient lo byte
.8d68	95 63		sta $63,x			sta FSMant1+1,x
.8d6a	68		pla				pla
.8d6b	4a		lsr a				lsr a
.8d6c	95 59		sta $59,x			sta FSMant0+1,x
.8d6e	76 63		ror $63,x			ror FSMant1+1,x
.8d70	4c 28 8d	jmp $8d28			jmp EFix3
.8d73					_ExpOvfl:
.8d73	28		plp				plp			; rdrop saved result sign
.8d74	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
.8d76	20 72 b2	jsr $b272			jsr Throw_FpOutOfRange	; overflow
.8d79					_Byte:
.8d79	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d7b	b5 59		lda $59,x	_b1:		lda FSMant0+1,x		;   if r1 >= r2
.8d7d	d5 58		cmp $58,x			cmp FSMant0+0,x
.8d7f	d0 04		bne $8d85			bne _b2
.8d81	b5 63		lda $63,x			lda FSMant1+1,x
.8d83	f5 62		sbc $62,x			sbc FSMant1+0,x
.8d85	90 0c		bcc $8d93	_b2:		bcc _b5
.8d87	b5 63		lda $63,x			lda FSMant1+1,x		;     r1 -= r2
.8d89	f5 62		sbc $62,x			sbc FSMant1+0,x
.8d8b	95 63		sta $63,x			sta FSMant1+1,x
.8d8d	b5 59		lda $59,x			lda FSMant0+1,x
.8d8f	f5 58		sbc $58,x			sbc FSMant0+0,x
.8d91	95 59		sta $59,x			sta FSMant0+1,x
.8d93					_b5:
.8d93	26 16		rol $16				rol tmp1+1		;   save quotient bit
.8d95	16 63		asl $63,x			asl FSMant1+1,x		;   r1 *= 2
.8d97	36 59		rol $59,x			rol FSMant0+1,x
.8d99	88		dey				dey			;  next bit
.8d9a	d0 df		bne $8d7b			bne _b1
.8d9c	a5 16		lda $16				lda tmp1+1		; return bits
.8d9e	60		rts				rts
=78					CL	.var *-(WordListLink+wh_Xt)
=$8d9f					en = *	; remember here
>8d4f	4e					.byte CL	;wh_CodeLength
>8d9f	45 31 2f			L1:	.text "E1/"	;  name of word as a string, ending at wh_NameLastChar
>8da2	03					.byte *-L1	;wh_NameLength	length of name
>8da3	cc 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8da5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8da6	08					.byte NN	;wh_Flags	dictionary flags
=36130					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8da7	20 91 88	jsr $8891	E1Slash:	jsr F1
.8daa	20 85 84	jsr $8485			jsr FSwap
.8dad	4c 51 8d	jmp $8d51			jmp ESlash
=9					CL	.var *-(WordListLink+wh_Xt)
=$8db0					en = *	; remember here
>8da5	09					.byte CL	;wh_CodeLength
>8db0	53 3e 46			L1:	.text "S>F"	;  name of word as a string, ending at wh_NameLastChar
>8db3	03					.byte *-L1	;wh_NameLength	length of name
>8db4	22 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8db6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8db7	08					.byte NN	;wh_Flags	dictionary flags
=36147					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8db8	20 50 b2	jsr $b250	SToF:		jsr PopYA		; pop n
.8dbb	20 92 83	jsr $8392	SToFYA:		jsr FAllocX		; alloc FP stack entry
.8dbe	94 58		sty $58,x			sty FSMant0,x		; copy n to mantissa
.8dc0	95 62		sta $62,x			sta FSMant1,x
.8dc2	a9 00		lda #$00			lda #0			; pad mantissa
.8dc4	95 6c		sta $6c,x			sta FSMant2,x
.8dc6	95 76		sta $76,x			sta FSMant3,x
.8dc8	a9 0f		lda #$0f			lda #15			; set exponent
.8dca	95 4e		sta $4e,x			sta FSExp,x
.8dcc	4c 1e 8a	jmp $8a1e			jmp FNormX		; normalize, return
=23					CL	.var *-(WordListLink+wh_Xt)
=$8dcf					en = *	; remember here
>8db6	17					.byte CL	;wh_CodeLength
>8dcf	44 3e 46			L1:	.text "D>F"	;  name of word as a string, ending at wh_NameLastChar
>8dd2	03					.byte *-L1	;wh_NameLength	length of name
>8dd3	33 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8dd5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8dd6	08					.byte NN	;wh_Flags	dictionary flags
=36178					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8dd7	20 92 83	jsr $8392	FDToF:		jsr FAllocX		; alloc FP stack entry
.8dda	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
.8ddc	a4 4d		ldy $4d				ldy fp
.8dde	b5 27		lda $27,x			lda DStack+2,x		; mantissa= d
.8de0	99 76 00	sta $0076,y			sta FSMant3,y
.8de3	b5 28		lda $28,x			lda DStack+3,x
.8de5	99 6c 00	sta $006c,y			sta FSMant2,y
.8de8	b5 25		lda $25,x			lda DStack+0,x
.8dea	99 62 00	sta $0062,y			sta FSMant1,y
.8ded	b5 26		lda $26,x			lda DStack+1,x
.8def	99 58 00	sta $0058,y			sta FSMant0,y
.8df2	a9 1f		lda #$1f			lda #31			; set exponent
.8df4	99 4e 00	sta $004e,y			sta FSExp,y
.8df7	20 12 c3	jsr $c312			jsr Two_Drop
.8dfa	4c 1c 8a	jmp $8a1c			jmp FNorm		; normalize, & return
=38					CL	.var *-(WordListLink+wh_Xt)
=$8dfd					en = *	; remember here
>8dd5	26					.byte CL	;wh_CodeLength
>8dfd	46 3e 53			L1:	.text "F>S"	;  name of word as a string, ending at wh_NameLastChar
>8e00	03					.byte *-L1	;wh_NameLength	length of name
>8e01	52 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e03	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e04	08					.byte NN	;wh_Flags	dictionary flags
=36224					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e05	a4 4d		ldy $4d		FToS:		ldy fp
.8e07	b9 58 00	lda $0058,y			lda FSMant0,y		; save sign
.8e0a	08		php				php
.8e0b	10 03		bpl $8e10			bpl +
.8e0d	20 1e 8b	jsr $8b1e			jsr FNegate
.8e10					+
.8e10	a9 0f		lda #$0f			lda #15
.8e12	20 2a 86	jsr $862a			jsr FIntAlignA
.8e15	c0 10		cpy #$10			cpy #15+1		; always positive, so unsigned compare works
.8e17	b0 17		bcs $8e30			bcs _overflow
.8e19	a4 4d		ldy $4d				ldy fp
.8e1b	ca		dex				dex
.8e1c	ca		dex				dex
.8e1d	b9 58 00	lda $0058,y			lda FSMant0,y
.8e20	95 26		sta $26,x			sta DStack+1,x
.8e22	b9 62 00	lda $0062,y			lda FSMant1,y
.8e25	95 25		sta $25,x			sta DStack+0,x
.8e27	e6 4d		inc $4d				inc fp			; FDrop
.8e29	28		plp				plp			; apply saved sign
.8e2a	30 01		bmi $8e2d			bmi +
.8e2c	60		rts				rts
.8e2d	4c 6b c4	jmp $c46b	+		jmp Negate
.8e30	28		plp		_overflow:	plp			; RDrop saved sign
.8e31	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8e33	20 bf b2	jsr $b2bf			jsr ThrowA
=49					CL	.var *-(WordListLink+wh_Xt)
=$8e36					en = *	; remember here
>8e03	31					.byte CL	;wh_CodeLength
>8e36	46 3e 44			L1:	.text "F>D"	;  name of word as a string, ending at wh_NameLastChar
>8e39	03					.byte *-L1	;wh_NameLength	length of name
>8e3a	80 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e3c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e3d	08					.byte NN	;wh_Flags	dictionary flags
=36281					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e3e	a4 4d		ldy $4d		FToD:		ldy fp
.8e40	b9 58 00	lda $0058,y			lda FSMant0,y		; save sign
.8e43	08		php				php
.8e44	10 03		bpl $8e49			bpl +
.8e46	20 1e 8b	jsr $8b1e			jsr FNegate
.8e49					+
.8e49	a9 1f		lda #$1f			lda #31
.8e4b	20 2a 86	jsr $862a			jsr FIntAlignA
.8e4e	c0 20		cpy #$20			cpy #31+1		; always positive, so unsigned compare works
.8e50	b0 23		bcs $8e75			bcs _overflow
.8e52	a4 4d		ldy $4d				ldy fp
.8e54	ca		dex				dex
.8e55	ca		dex				dex
.8e56	ca		dex				dex
.8e57	ca		dex				dex
.8e58	b9 58 00	lda $0058,y			lda FSMant0,y
.8e5b	95 26		sta $26,x			sta DStack+1,x
.8e5d	b9 62 00	lda $0062,y			lda FSMant1,y
.8e60	95 25		sta $25,x			sta DStack+0,x
.8e62	b9 6c 00	lda $006c,y			lda FSMant2,y
.8e65	95 28		sta $28,x			sta DStack+3,x
.8e67	b9 76 00	lda $0076,y			lda FSMant3,y
.8e6a	95 27		sta $27,x			sta DStack+2,x
.8e6c	e6 4d		inc $4d				inc fp			; FDrop
.8e6e	28		plp				plp			; apply saved sign
.8e6f	30 01		bmi $8e72			bmi +
.8e71	60		rts				rts
.8e72	4c 9c c4	jmp $c49c	+		jmp DNegate
.8e75	28		plp		_overflow:	plp			; RDrop sign
.8e76	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8e78	20 bf b2	jsr $b2bf			jsr ThrowA
=61					CL	.var *-(WordListLink+wh_Xt)
=$8e7b					en = *	; remember here
>8e3c	3d					.byte CL	;wh_CodeLength
>8e7b	46 52 6e 64			L1:	.text "FRnd"	;  name of word as a string, ending at wh_NameLastChar
>8e7f	04					.byte *-L1	;wh_NameLength	length of name
>8e80	b9 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e82	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e83	08					.byte NN	;wh_Flags	dictionary flags
=36351					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e84	20 5f 82	jsr $825f	FRnd:		jsr Rand		; generate next RndState
.8e87	20 92 83	jsr $8392			jsr FAllocX		; alloc FP stack entry
.8e8a	a9 00		lda #$00			lda #0			; exponent=0
.8e8c	95 4e		sta $4e,x			sta FSExp,x
.8e8e	ad 35 03	lda $0335			lda RndState+1		; mantissa = RndState
.8e91	4a		lsr a				lsr a			;   make positive
.8e92	95 58		sta $58,x			sta FSMant0,x
.8e94	ad 34 03	lda $0334			lda RndState+0
.8e97	95 62		sta $62,x			sta FSMant1,x
.8e99	ad 37 03	lda $0337			lda RndState+3
.8e9c	95 6c		sta $6c,x			sta FSMant2,x
.8e9e	ad 36 03	lda $0336			lda RndState+2
.8ea1	95 76		sta $76,x			sta FSMant3,x
.8ea3	4c 1e 8a	jmp $8a1e			jmp FNormX		; normalize, return
=34					CL	.var *-(WordListLink+wh_Xt)
=$8ea6					en = *	; remember here
>8e82	22					.byte CL	;wh_CodeLength
>8ea6	46 53 71 72 74			L1:	.text "FSqrt"	;  name of word as a string, ending at wh_NameLastChar
>8eab	05					.byte *-L1	;wh_NameLength	length of name
>8eac	ff 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8eae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8eaf	08					.byte NN	;wh_Flags	dictionary flags
=36395					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8eb0	a4 4d		ldy $4d		FSqrt:		ldy fp
.8eb2	b9 58 00	lda $0058,y			lda FSMant0,y		; zero?
.8eb5	d0 01		bne $8eb8			bne +
.8eb7	60		rts				rts			;   just return the zero
.8eb8					+
.8eb8	20 fd 83	jsr $83fd			jsr FDup		; get trial value
.8ebb	a4 4d		ldy $4d				ldy fp
.8ebd	b9 4e 00	lda $004e,y			lda FSExp,y		; halve the exponent of trial value
.8ec0	c9 80		cmp #$80			cmp #$80
.8ec2	6a		ror a				ror a
.8ec3	99 4e 00	sta $004e,y			sta FSExp,y
.8ec6	a9 09		lda #$09			lda #9			; for 9 iterations
.8ec8	48		pha		_3:		pha
.8ec9	20 75 84	jsr $8475			jsr F2Dup		;   calc new trial value
.8ecc	20 25 8c	jsr $8c25			jsr FSlash
.8ecf	20 a5 8a	jsr $8aa5			jsr FPlus
.8ed2	20 a3 89	jsr $89a3			jsr F2Slash
.8ed5	68		pla				pla			;  next
.8ed6	38		sec				sec
.8ed7	e9 01		sbc #$01			sbc #1
.8ed9	d0 ed		bne $8ec8			bne _3
.8edb	4c d7 83	jmp $83d7			jmp FNip		; return trial value
=46					CL	.var *-(WordListLink+wh_Xt)
=$8ede					en = *	; remember here
>8eae	2e					.byte CL	;wh_CodeLength
>8ede	48 65 78 3e 46			L1:	.text "Hex>F"	;  name of word as a string, ending at wh_NameLastChar
>8ee3	05					.byte *-L1	;wh_NameLength	length of name
>8ee4	2b 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ee6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ee7	08					.byte NN	;wh_Flags	dictionary flags
=36451					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ee8	20 92 83	jsr $8392	HexToF:		jsr FAllocX		; alloc FP stack entry
.8eeb	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
.8eed	a4 4d		ldy $4d				ldy fp			; Y= FP stack index
.8eef	20 34 b2	jsr $b234			jsr PopA		; pop n_exp
.8ef2	99 4e 00	sta $004e,y			sta FSExp,y
.8ef5	b5 26		lda $26,x			lda DStack+1,x
.8ef7	99 58 00	sta $0058,y			sta FSMant0,y
.8efa	b5 25		lda $25,x			lda DStack+0,x
.8efc	99 62 00	sta $0062,y			sta FSMant1,y
.8eff	b5 28		lda $28,x			lda DStack+3,x
.8f01	99 6c 00	sta $006c,y			sta FSMant2,y
.8f04	b5 27		lda $27,x			lda DStack+2,x
.8f06	99 76 00	sta $0076,y			sta FSMant3,y
.8f09	4c 12 c3	jmp $c312			jmp Two_Drop
=36					CL	.var *-(WordListLink+wh_Xt)
=$8f0c					en = *	; remember here
>8ee6	24					.byte CL	;wh_CodeLength
>8f0c	46 3e 48 65 78			L1:	.text "F>Hex"	;  name of word as a string, ending at wh_NameLastChar
>8f11	05					.byte *-L1	;wh_NameLength	length of name
>8f12	63 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f14	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f15	08					.byte NN	;wh_Flags	dictionary flags
=36497					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f16	a4 4d		ldy $4d		FToHex:		ldy fp		; Y= FP stack index
.8f18	ca		dex				dex
.8f19	ca		dex				dex
.8f1a	ca		dex				dex
.8f1b	ca		dex				dex
.8f1c	ca		dex				dex
.8f1d	ca		dex				dex
.8f1e	b9 58 00	lda $0058,y			lda FSMant0,y	; copy mantissa
.8f21	95 28		sta $28,x			sta DStack+3,x
.8f23	b9 62 00	lda $0062,y			lda FSMant1,y
.8f26	95 27		sta $27,x			sta DStack+2,x
.8f28	b9 6c 00	lda $006c,y			lda FSMant2,y
.8f2b	95 2a		sta $2a,x			sta DStack+5,x
.8f2d	b9 76 00	lda $0076,y			lda FSMant3,y
.8f30	95 29		sta $29,x			sta DStack+4,x
.8f32	b9 4e 00	lda $004e,y			lda FSExp,y	; copy exponent
.8f35	95 25		sta $25,x			sta DStack+0,x
.8f37	29 80		and #$80			and #$80	;   sign extend
.8f39	f0 02		beq $8f3d			beq +
.8f3b	a9 ff		lda #$ff			lda #$ff
.8f3d	95 26		sta $26,x	+		sta DStack+1,x
.8f3f	e6 4d		inc $4d				inc fp		; FDrop
.8f41	60		rts				rts
=44					CL	.var *-(WordListLink+wh_Xt)
=$8f42					en = *	; remember here
>8f14	2c					.byte CL	;wh_CodeLength
>8f42	46 2e 48 65 78			L1:	.text "F.Hex"	;  name of word as a string, ending at wh_NameLastChar
>8f47	05					.byte *-L1	;wh_NameLength	length of name
>8f48	91 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f4a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f4b	08					.byte NN	;wh_Flags	dictionary flags
=36551					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f4c	20 16 8f	jsr $8f16	FDotHex:	jsr FToHex	; get parts of r
.8f4f	20 6f cc	jsr $cc6f			jsr Not_Rot
.8f52	20 5b a7	jsr $a75b			jsr Dot_Hex	; do mantissa
.8f55	20 5b a7	jsr $a75b			jsr Dot_Hex
.8f58	a9 3a		lda #$3a			lda #':'
.8f5a	20 b3 cb	jsr $cbb3			jsr Emit_A
.8f5d	4c 39 a7	jmp $a739			jmp C_Dot_Hex	; do exponent
=20					CL	.var *-(WordListLink+wh_Xt)
=$8f60					en = *	; remember here
>8f4a	14					.byte CL	;wh_CodeLength
.8f60					pfcst:
.8f60	a9 01		lda #$01			lda #1
.8f62	85 0e		sta $0e				sta ToHold
.8f64	60		rts				rts
.8f65					pfch:
.8f65	a4 0e		ldy $0e				ldy ToHold
.8f67	91 00		sta ($00),y			sta (cp),y
.8f69	e6 0e		inc $0e				inc ToHold
.8f6b	60		rts				rts
.8f6c					pfcen:
.8f6c	a5 0e		lda $0e				lda ToHold
.8f6e	38		sec				sec
.8f6f	e9 01		sbc #$01			sbc #1
.8f71	a0 00		ldy #$00			ldy #0
.8f73	91 00		sta ($00),y			sta (cp),y		; fill in length
.8f75	4c 13 c8	jmp $c813			jmp Here		; push start addr
.8f78					pfciA:
.8f78	a8		tay				tay
.8f79	10 0a		bpl $8f85			bpl _15			; IfMi,
.8f7b	49 ff		eor #$ff			eor #$ff
.8f7d	18		clc				clc
.8f7e	69 01		adc #$01			adc #1
.8f80	48		pha				pha
.8f81	a9 2d		lda #$2d			lda #'-'
.8f83	d0 03		bne $8f88			bne _19
.8f85	48		pha		_15:		pha
.8f86	a9 2b		lda #$2b			lda #'+'
.8f88					_19:
.8f88	20 65 8f	jsr $8f65			jsr pfch
.8f8b	68		pla				pla
.8f8c	a0 2f		ldy #$2f			ldy #'0'-1
.8f8e	c8		iny		_20:		iny
.8f8f	38		sec				sec
.8f90	e9 0a		sbc #$0a			sbc #10
.8f92	b0 fa		bcs $8f8e			bcs _20
.8f94	69 0a		adc #$0a			adc #10
.8f96	48		pha				pha
.8f97	98		tya				tya
.8f98	20 65 8f	jsr $8f65			jsr pfch
.8f9b	68		pla				pla
.8f9c	09 30		ora #$30			ora #'0'
.8f9e	d0 c5		bne $8f65			bne pfch
.8fa0					FMSign:
.8fa0	a4 4d		ldy $4d				ldy fp			; if negative
.8fa2	b9 58 00	lda $0058,y			lda FSMant0,y
.8fa5	10 08		bpl $8faf			bpl _19
.8fa7	a9 2d		lda #$2d			lda #'-'		;   append sign
.8fa9	20 65 8f	jsr $8f65			jsr pfch
.8fac	4c 1e 8b	jmp $8b1e			jmp FNegate		;   make positive, return
.8faf	60		rts		_19:		rts
>8fb0	28 46 2e 29			L1:	.text "(F.)"	;  name of word as a string, ending at wh_NameLastChar
>8fb4	04					.byte *-L1	;wh_NameLength	length of name
>8fb5	c7 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8fb7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8fb8	08					.byte NN	;wh_Flags	dictionary flags
=36660					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8fb9	20 3b b6	jsr $b63b	PFDot:		jsr One		;alloc & init work area
.8fbc	ad ff 02	lda $02ff			lda PrecisionV
.8fbf	20 22 b6	jsr $b622			jsr PushZA
=$27					_decimalPos   = DStack+2	; decimal point position
=$26					_mantNzFound  = DStack+1	; nonzero mantissa digit processed
=$25					_NumSigDigits = DStack+0	; # of significant digits
.8fc2	20 60 8f	jsr $8f60			jsr pfcst		;start collecting chars
.8fc5	20 a0 8f	jsr $8fa0			jsr FMSign		;do mantissa sign
.8fc8	a4 4d		ldy $4d		_a:		ldy fp
.8fca	b9 4e 00	lda $004e,y			lda FSExp,y		;scale down to <10
.8fcd	30 18		bmi $8fe7			bmi _a9			; exponent negative?
.8fcf	c9 04		cmp #$04			cmp #4
.8fd1	90 14		bcc $8fe7			bcc _a9			;   < 4 ?
.8fd3	d0 07		bne $8fdc			bne _a2			;   > 4 ?
.8fd5	b9 58 00	lda $0058,y			lda FSMant0,y
.8fd8	c9 50		cmp #$50			cmp #$50
.8fda	90 0b		bcc $8fe7			bcc _a9
.8fdc	f6 27		inc $27,x	_a2:		inc _decimalPos,x
.8fde	20 75 88	jsr $8875			jsr F10
.8fe1	20 25 8c	jsr $8c25			jsr FSlash
.8fe4	4c c8 8f	jmp $8fc8			jmp _a
.8fe7					_a9:
.8fe7					_c:
.8fe7	b5 27		lda $27,x			lda _decimalPos,x	;  insert decimal point here?
.8fe9	d0 05		bne $8ff0			bne _c2
.8feb	a9 2e		lda #$2e			lda #'.'
.8fed	20 65 8f	jsr $8f65			jsr pfch
.8ff0	d6 27		dec $27,x	_c2:		dec _decimalPos,x
.8ff2	20 fd 83	jsr $83fd			jsr FDup		;  do a digit
.8ff5	20 05 8e	jsr $8e05			jsr FToS		; ( work n )
.8ff8	b5 25		lda $25,x			lda DStack+0,x
.8ffa	15 28		ora $28,x			ora _mantNzFound+2,x	;  doing significant digits?
.8ffc	95 28		sta $28,x			sta _mantNzFound+2,x
.8ffe	f0 08		beq $9008			beq _c7
.9000	d6 27		dec $27,x			dec _NumSigDigits+2,x
.9002	10 04		bpl $9008			bpl +
.9004	e8		inx				inx			;    drop integer
.9005	e8		inx				inx
.9006	d0 17		bne $901f			bne _d
.9008					+
.9008	b5 25		lda $25,x	_c7:		lda DStack+0,x		;  store the char
.900a	09 30		ora #$30			ora #'0'
.900c	20 65 8f	jsr $8f65			jsr pfch
.900f	20 b8 8d	jsr $8db8			jsr SToF		; ( work )
.9012	20 e7 8a	jsr $8ae7			jsr FMinus
.9015	20 07 8c	jsr $8c07			jsr F10Star
.9018	a4 4d		ldy $4d				ldy fp			;  until mantissa==0
.901a	b9 58 00	lda $0058,y			lda FSMant0,y
.901d	d0 c8		bne $8fe7			bne _c
.901f	d6 27		dec $27,x	_d:		dec _decimalPos,x	;do trailing zeros
.9021	30 08		bmi $902b			bmi _d9
.9023	a9 30		lda #$30			lda #'0'
.9025	20 65 8f	jsr $8f65			jsr pfch
.9028	4c 1f 90	jmp $901f			jmp _d
.902b					_d9:
.902b	e8		inx				inx			; drop work area
.902c	e8		inx				inx
.902d	e8		inx				inx
.902e	e8		inx				inx
.902f	e6 4d		inc $4d				inc fp			; FDrop
.9031	4c 6c 8f	jmp $8f6c			jmp pfcen
=123					CL	.var *-(WordListLink+wh_Xt)
=$9034					en = *	; remember here
>8fb7	7b					.byte CL	;wh_CodeLength
>9034	46 2e				L1:	.text "F."	;  name of word as a string, ending at wh_NameLastChar
>9036	02					.byte *-L1	;wh_NameLength	length of name
>9037	34 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9039	03					.byte 3		;wh_CodeLength  (with placeholder value)
>903a	08					.byte NN	;wh_Flags	dictionary flags
=36790					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.903b	20 b9 8f	jsr $8fb9	FDot:		jsr PFDot
.903e	20 16 b0	jsr $b016	FDot2:		jsr Count
.9041	20 cd cb	jsr $cbcd			jsr Type
.9044	4c c0 cb	jmp $cbc0			jmp Space
=12					CL	.var *-(WordListLink+wh_Xt)
=$9047					en = *	; remember here
>9039	0c					.byte CL	;wh_CodeLength
>9047	46 2e 53			L1:	.text "F.S"	;  name of word as a string, ending at wh_NameLastChar
>904a	03					.byte *-L1	;wh_NameLength	length of name
>904b	b6 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>904d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>904e	08					.byte NN	;wh_Flags	dictionary flags
=36810					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.904f	a9 09		lda #$09	FDotS:		lda #FDim-1	; for each FP stack entry
.9051	d0 0b		bne $905e			bne _8
.9053	48		pha		_2:		pha
.9054	20 4b 84	jsr $844b			jsr FPick3	;   print it
.9057	20 3b 90	jsr $903b			jsr FDot
.905a	68		pla				pla		;  next
.905b	38		sec				sec
.905c	e9 01		sbc #$01			sbc #1
.905e	c5 4d		cmp $4d		_8:		cmp fp
.9060	b0 f1		bcs $9053			bcs _2
=19					CL	.var *-(WordListLink+wh_Xt)
=$9062					en = *	; remember here
>904d	13					.byte CL	;wh_CodeLength
.9062	60		rts				rts
>9063	28 46 53 2e 29			L1:	.text "(FS.)"	;  name of word as a string, ending at wh_NameLastChar
>9068	05					.byte *-L1	;wh_NameLength	length of name
>9069	ca 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>906b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>906c	08					.byte NN	;wh_Flags	dictionary flags
=36840					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.906d	20 31 b6	jsr $b631	PFSDot:		jsr Zero		; alloc work area
.9070	20 60 8f	jsr $8f60			jsr pfcst
.9073	20 a0 8f	jsr $8fa0			jsr FMSign		;do mantissa sign
.9076	a4 4d		ldy $4d		_1:		ldy fp
.9078	b9 4e 00	lda $004e,y			lda FSExp,y		;while TOS >= 10
.907b	30 1a		bmi $9097			bmi _19
.907d	c9 04		cmp #$04			cmp #4
.907f	90 16		bcc $9097			bcc _19
.9081	d0 09		bne $908c			bne _12
.9083	a4 4d		ldy $4d				ldy fp
.9085	b9 58 00	lda $0058,y			lda FSMant0,y
.9088	c9 50		cmp #$50			cmp #$50
.908a	90 0b		bcc $9097			bcc _19
.908c	f6 25		inc $25,x	_12:		inc DStack+0,x		;  fp*=0.1
.908e	20 9f 88	jsr $889f			jsr F10th
.9091	20 72 8b	jsr $8b72			jsr FStar
.9094	4c 76 90	jmp $9076			jmp _1
.9097					_19:
.9097	a4 4d		ldy $4d		_3:		ldy fp
.9099	b9 58 00	lda $0058,y			lda FSMant0,y
.909c	f0 0f		beq $90ad			beq _39
.909e	b9 4e 00	lda $004e,y			lda FSExp,y		;while fp < 1
.90a1	f0 02		beq $90a5			beq _31
.90a3	10 08		bpl $90ad			bpl _39
.90a5	d6 25		dec $25,x	_31:		dec DStack+0,x		;  fp*=10
.90a7	20 07 8c	jsr $8c07			jsr F10Star
.90aa	4c 97 90	jmp $9097			jmp _3
.90ad					_39:
.90ad	20 df 90	jsr $90df	_4:		jsr pedotd		;do mantissa digits
.90b0	a9 2e		lda #$2e			lda #'.'
.90b2	20 65 8f	jsr $8f65			jsr pfch
.90b5	20 df 90	jsr $90df			jsr pedotd
.90b8	20 df 90	jsr $90df			jsr pedotd
.90bb	20 df 90	jsr $90df			jsr pedotd
.90be	20 df 90	jsr $90df			jsr pedotd
.90c1	20 df 90	jsr $90df			jsr pedotd
.90c4	20 df 90	jsr $90df			jsr pedotd
.90c7	20 df 90	jsr $90df			jsr pedotd
.90ca	20 df 90	jsr $90df			jsr pedotd
.90cd	a9 45		lda #$45			lda #'E'
.90cf	20 65 8f	jsr $8f65			jsr pfch		; do exponent
.90d2	b5 25		lda $25,x			lda DStack+0,x
.90d4	20 78 8f	jsr $8f78			jsr pfciA
.90d7	e8		inx				inx			; Drop work area
.90d8	e8		inx				inx
.90d9	20 60 83	jsr $8360			jsr FDrop
.90dc	4c 6c 8f	jmp $8f6c			jmp pfcen
=114					CL	.var *-(WordListLink+wh_Xt)
=$90df					en = *	; remember here
>906b	72					.byte CL	;wh_CodeLength
.90df					pedotd:
.90df	20 fd 83	jsr $83fd			jsr FDup
.90e2	20 05 8e	jsr $8e05			jsr FToS
.90e5	b5 25		lda $25,x			lda DStack+0,x
.90e7	48		pha				pha
.90e8	20 b8 8d	jsr $8db8			jsr SToF
.90eb	20 e7 8a	jsr $8ae7			jsr FMinus
.90ee	68		pla				pla
.90ef	18		clc				clc
.90f0	69 30		adc #$30			adc #'0'
.90f2	20 65 8f	jsr $8f65			jsr pfch
.90f5	4c 07 8c	jmp $8c07			jmp F10Star
>90f8	46 53 2e			L1:	.text "FS."	;  name of word as a string, ending at wh_NameLastChar
>90fb	03					.byte *-L1	;wh_NameLength	length of name
>90fc	e8 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90ff	08					.byte NN	;wh_Flags	dictionary flags
=36987					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9100	20 6d 90	jsr $906d	FSDot:		jsr PFSDot
.9103	4c 3e 90	jmp $903e			jmp FDot2
=6					CL	.var *-(WordListLink+wh_Xt)
=$9106					en = *	; remember here
>90fe	06					.byte CL	;wh_CodeLength
>9106	46 22				L1:	.text 'F"'	;  name of word as a string, ending at wh_NameLastChar
>9108	02					.byte *-L1	;wh_NameLength	length of name
>9109	7b 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>910b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>910c	0c					.byte IM+NN	;wh_Flags	dictionary flags
=37000					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.910d	20 cc b8	jsr $b8cc	FQuote:		jsr Parse_Name		; get string
.9110	20 31 91	jsr $9131			jsr ToFloat		; convert
.9113	b5 25		lda $25,x			lda DStack+0,x		; error?
.9115	f0 0a		beq $9121			beq _Err
.9117	e8		inx				inx
.9118	e8		inx				inx
.9119	a5 0a		lda $0a				lda State		; compiling?
.911b	d0 01		bne $911e			bne _compile
.911d	60		rts				rts
.911e	4c 05 88	jmp $8805	_compile:	jmp FLiteral		; compile a FP literal
.9121	a9 36		lda #$36	_Err:		lda #100+err_FPInvalidArg
.9123	20 bf b2	jsr $b2bf			jsr ThrowA
=25					CL	.var *-(WordListLink+wh_Xt)
=$9126					en = *	; remember here
>910b	19					.byte CL	;wh_CodeLength
>9126	3e 46 6c 6f 61 74		L1:	.text ">Float"	;  name of word as a string, ending at wh_NameLastChar
>912c	06					.byte *-L1	;wh_NameLength	length of name
>912d	88 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>912f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9130	08					.byte NN	;wh_Flags	dictionary flags
=37036					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9131					ToFloat:
.9131	20 31 b6	jsr $b631			jsr Zero	; alloc & init workspace
.9134	20 31 b6	jsr $b631			jsr Zero
.9137	20 31 b6	jsr $b631			jsr Zero
=$2d					_addr		= DStack+8
=$2b					_len		= DStack+6
=$2a					_mantfound 	= DStack+5		;mantissa digits found
=$29					_exponent 	= DStack+4		;exponent
=$28					_decimalPos 	= DStack+3		;decimal point position
=$27					_DecPointFound1 = DStack+2
=$26					_MantissaNegative1 = DStack+1
=$25					_ExponentNegative1 = DStack+0
.913a	20 66 88	jsr $8866			jsr F0			; init result
.913d	20 0f 92	jsr $920f	_11:		jsr _GetChar		; get mantissa prefix
.9140	b0 57		bcs $9199			bcs _trueb ;_finishb
.9142	c9 20		cmp #$20			cmp #' '
.9144	f0 f7		beq $913d			beq _11
.9146	c9 2b		cmp #$2b			cmp #'+'
.9148	f0 06		beq $9150			beq _20
.914a	c9 2d		cmp #$2d			cmp #'-'
.914c	d0 07		bne $9155			bne _21
.914e	95 26		sta $26,x			sta _MantissaNegative1,x ; remember mantissa is negative
.9150	20 0f 92	jsr $920f	_20:		jsr _GetChar		; do next mantissa digits
.9153	b0 47		bcs $919c			bcs _finishb
.9155	c9 2e		cmp #$2e	_21:		cmp #'.'
.9157	f0 31		beq $918a			beq _27
.9159	c9 45		cmp #$45			cmp #'E'
.915b	f0 42		beq $919f			beq _30
.915d	c9 65		cmp #$65			cmp #'e'
.915f	f0 3e		beq $919f			beq _30
.9161	c9 44		cmp #$44			cmp #'D'
.9163	f0 3a		beq $919f			beq _30
.9165	c9 64		cmp #$64			cmp #'d'
.9167	f0 36		beq $919f			beq _30
.9169	38		sec				sec			;   a digit?
.916a	e9 30		sbc #$30			sbc #'0'
.916c	90 24		bcc $9192			bcc _fail
.916e	c9 0a		cmp #$0a			cmp #9+1
.9170	b0 20		bcs $9192			bcs _fail
.9172	48		pha				pha			; append digit to mantissa
.9173	20 07 8c	jsr $8c07			jsr F10Star
.9176	68		pla				pla
.9177	a0 00		ldy #$00			ldy #0
.9179	20 bb 8d	jsr $8dbb			jsr SToFYA
.917c	20 a5 8a	jsr $8aa5			jsr FPlus
.917f	f6 2a		inc $2a,x			inc _mantfound,x	; remember we found a mantissa digit
.9181	b5 27		lda $27,x			lda _DecPointFound1,x	; if mantissa decimal point found
.9183	f0 02		beq $9187			beq +
.9185	d6 28		dec $28,x			dec _decimalPos,x	;   increment decimal point position
.9187					+
.9187	4c 50 91	jmp $9150			jmp _20
.918a					_27:
.918a	b4 27		ldy $27,x			ldy _DecPointFound1,x	; already have one?
.918c	d0 04		bne $9192			bne _fail
.918e	95 27		sta $27,x			sta _DecPointFound1,x	; we have one now!
.9190	f0 be		beq $9150			beq _20
.9192					_fail:
.9192	20 60 83	jsr $8360			jsr FDrop
.9195	a9 00		lda #$00			lda #0			;return false
.9197	f0 69		beq $9202			beq _return
.9199	4c 00 92	jmp $9200	_trueb:		jmp _true
.919c	4c cd 91	jmp $91cd	_finishb:	jmp _finish
.919f					_30:
.919f	20 0f 92	jsr $920f			jsr _GetChar
.91a2	b0 29		bcs $91cd			bcs _finish
.91a4	c9 2b		cmp #$2b			cmp #'+'
.91a6	f0 06		beq $91ae			beq _40
.91a8	c9 2d		cmp #$2d			cmp #'-'
.91aa	d0 07		bne $91b3			bne _41
.91ac	95 25		sta $25,x			sta _ExponentNegative1,x ; remember exponent is negative
.91ae	20 0f 92	jsr $920f	_40:		jsr _GetChar		;get exponent digits
.91b1	b0 1a		bcs $91cd			bcs _finish
.91b3	38		sec		_41:		sec			;  digit?
.91b4	e9 30		sbc #$30			sbc #'0'
.91b6	90 da		bcc $9192			bcc _fail
.91b8	c9 0a		cmp #$0a			cmp #9+1
.91ba	b0 d6		bcs $9192			bcs _fail
.91bc	85 15		sta $15				sta tmp1
.91be	16 29		asl $29,x			asl _exponent,x		;  exponent *= 10
.91c0	b5 29		lda $29,x			lda _exponent,x
.91c2	0a		asl a				asl a
.91c3	0a		asl a				asl a
.91c4	75 29		adc $29,x			adc _exponent,x
.91c6	65 15		adc $15				adc tmp1		;  + digit
.91c8	95 29		sta $29,x			sta _exponent,x
.91ca	4c ae 91	jmp $91ae			jmp _40
.91cd					_finish:
.91cd	b5 2a		lda $2a,x			lda _mantfound,x	;some mantissa digits found?
.91cf	f0 c1		beq $9192			beq _fail
.91d1	b5 25		lda $25,x			lda _ExponentNegative1,x ;apply exponent sign
.91d3	f0 07		beq $91dc			beq +
.91d5	a9 00		lda #$00			lda #0
.91d7	38		sec				sec
.91d8	f5 29		sbc $29,x			sbc _exponent,x
.91da	95 29		sta $29,x			sta _exponent,x
.91dc					+
.91dc	b5 29		lda $29,x			lda _exponent,x		;apply decimal position to exponent
.91de	18		clc				clc
.91df	75 28		adc $28,x			adc _decimalPos,x
.91e1	95 29		sta $29,x			sta _exponent,x
.91e3	4c eb 91	jmp $91eb			jmp _93
.91e6	20 07 8c	jsr $8c07	_93b:		jsr F10Star		;apply exponent to mantissa
.91e9	d6 29		dec $29,x			dec _exponent,x
.91eb	f0 0a		beq $91f7	_93:		beq _94
.91ed	10 f7		bpl $91e6			bpl _93b
.91ef	20 75 88	jsr $8875	_94b:		jsr F10
.91f2	20 25 8c	jsr $8c25			jsr FSlash
.91f5	f6 29		inc $29,x			inc _exponent,x
.91f7	30 f6		bmi $91ef	_94:		bmi _94b
.91f9					_95:
.91f9	b5 26		lda $26,x			lda _MantissaNegative1,x ;apply mantissa sign
.91fb	f0 03		beq $9200			beq +
.91fd	20 1e 8b	jsr $8b1e			jsr FNegate
.9200					+
.9200	a9 ff		lda #$ff	_true:		lda #$ff		;return true
.9202					_return:
.9202	95 2d		sta $2d,x			sta _addr+0,x		; replace _addr with flag
.9204	95 2e		sta $2e,x			sta _addr+1,x
.9206	e8		inx				inx			; Drop work
.9207	e8		inx				inx
.9208	e8		inx				inx			; 2Drop work
.9209	e8		inx				inx
.920a	e8		inx				inx
.920b	e8		inx				inx
.920c	e8		inx				inx			; Drop len
.920d	e8		inx				inx
.920e	60		rts				rts
.920f					_GetChar:
.920f	38		sec				sec
.9210	b5 2b		lda $2b,x			lda _len,x
.9212	f0 0b		beq $921f			beq _gc_rts		; if end, return C=1
.9214	d6 2b		dec $2b,x			dec _len,x
.9216	a1 2d		lda ($2d,x)			lda (_addr,x)
.9218	f6 2d		inc $2d,x			inc _addr+0,x
.921a	d0 02		bne $921e			bne +
.921c	f6 2e		inc $2e,x			inc _addr+1,x
.921e					+
.921e	18		clc				clc			; get char, return C=0
.921f	60		rts		_gc_rts:	rts
>9220	53 46 40			L1:	.text "SF@"	;  name of word as a string, ending at wh_NameLastChar
>9223	03					.byte *-L1	;wh_NameLength	length of name
>9224	ac 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9226	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9227	08					.byte NN	;wh_Flags	dictionary flags
=37283					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9228	20 50 b2	jsr $b250	SFAt:		jsr PopYA		; pop sf_addr
.922b	85 17		sta $17		SFAt_YA:	sta tmp2+0		; save sf_addr
.922d	84 18		sty $18				sty tmp2+1
.922f	20 92 83	jsr $8392			jsr FAllocX		; alloc FP stack entry
.9232	a0 01		ldy #$01			ldy #1			; copy exponent
.9234	b1 17		lda ($17),y			lda (tmp2),y
.9236	0a		asl a				asl a
.9237	88		dey				dey
.9238	b1 17		lda ($17),y			lda (tmp2),y
.923a	2a		rol a				rol a
.923b	38		sec				sec
.923c	e9 7e		sbc #$7e			sbc #126
.923e	95 4e		sta $4e,x			sta FSExp,x
.9240	a0 01		ldy #$01			ldy #1			; copy mantissa
.9242	b1 17		lda ($17),y			lda (tmp2),y
.9244	09 80		ora #$80			ora #$80
.9246	4a		lsr a				lsr a
.9247	95 58		sta $58,x			sta FSMant0,x
.9249	c8		iny				iny
.924a	b1 17		lda ($17),y			lda (tmp2),y
.924c	6a		ror a				ror a
.924d	95 62		sta $62,x			sta FSMant1,x
.924f	c8		iny				iny
.9250	b1 17		lda ($17),y			lda (tmp2),y
.9252	6a		ror a				ror a
.9253	95 6c		sta $6c,x			sta FSMant2,x
.9255	a9 00		lda #$00			lda #0
.9257	6a		ror a				ror a
.9258	95 76		sta $76,x			sta FSMant3,x
.925a	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
.925c	a0 00		ldy #$00			ldy #0			; get sign
.925e	b1 17		lda ($17),y			lda (tmp2),y
.9260	10 03		bpl $9265			bpl +
.9262	20 1e 8b	jsr $8b1e			jsr FNegate
.9265					+
=61					CL	.var *-(WordListLink+wh_Xt)
=$9265					en = *	; remember here
>9226	3d					.byte CL	;wh_CodeLength
.9265	60		rts				rts
>9266	53 46 21			L1:	.text "SF!"	;  name of word as a string, ending at wh_NameLastChar
>9269	03					.byte *-L1	;wh_NameLength	length of name
>926a	a3 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>926c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>926d	08					.byte NN	;wh_Flags	dictionary flags
=37353					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.926e	20 50 b2	jsr $b250	SFStore:	jsr PopYA		; pop sf_addr
.9271	85 17		sta $17		SFStore_YA:	sta tmp2+0		; save
.9273	84 18		sty $18				sty tmp2+1
.9275	a4 4d		ldy $4d				ldy fp			; negative?
.9277	b9 58 00	lda $0058,y			lda FSMant0,y
.927a	29 80		and #$80			and #$80		;  save sign
.927c	85 1a		sta $1a				sta tmp3+1
.927e	10 03		bpl $9283			bpl +
.9280	20 1e 8b	jsr $8b1e			jsr FNegate
.9283					+
.9283	86 15		stx $15				stx tmp1+0		; save data stack index
.9285	a6 4d		ldx $4d				ldx fp			; switch to FP stack index
.9287	b5 4e		lda $4e,x			lda FSExp,x		; +128
.9289	18		clc				clc
.928a	69 7e		adc #$7e			adc #126
.928c	95 4e		sta $4e,x			sta FSExp,x
.928e	16 76		asl $76,x			asl FSMant3,x
.9290	b5 6c		lda $6c,x			lda FSMant2,x
.9292	2a		rol a				rol a
.9293	a0 03		ldy #$03			ldy #3			; +3 IEEE
.9295	91 17		sta ($17),y			sta (tmp2),y
.9297	b5 62		lda $62,x			lda FSMant1,x
.9299	2a		rol a				rol a
.929a	88		dey				dey			; +2 IEEE
.929b	91 17		sta ($17),y			sta (tmp2),y
.929d	b5 58		lda $58,x			lda FSMant0,x
.929f	2a		rol a				rol a
.92a0	2a		rol a				rol a
.92a1	56 4e		lsr $4e,x			lsr FSExp,x
.92a3	6a		ror a				ror a
.92a4	88		dey				dey			; +1 IEEE
.92a5	91 17		sta ($17),y			sta (tmp2),y
.92a7	b5 4e		lda $4e,x			lda FSExp,x
.92a9	05 1a		ora $1a				ora tmp3+1		;  insert sign
.92ab	88		dey				dey			; +0 IEEE
.92ac	91 17		sta ($17),y			sta (tmp2),y
.92ae	e6 4d		inc $4d				inc fp			; FDrop
.92b0	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
=68					CL	.var *-(WordListLink+wh_Xt)
=$92b2					en = *	; remember here
>926c	44					.byte CL	;wh_CodeLength
.92b2	60		rts				rts
>92b3	53 46 6c 6f 61 74 2b		L1:	.text "SFloat+"	;  name of word as a string, ending at wh_NameLastChar
>92ba	07					.byte *-L1	;wh_NameLength	length of name
>92bb	e9 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>92bd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>92be	08					.byte NN	;wh_Flags	dictionary flags
=37434					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.92bf	a9 04		lda #$04	SFloatPlus:	lda #4
.92c1	4c f6 c7	jmp $c7f6			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$92c4					en = *	; remember here
>92bd	05					.byte CL	;wh_CodeLength
>92c4	53 46 6c 6f 61 74 73		L1:	.text "SFloats"	;  name of word as a string, ending at wh_NameLastChar
>92cb	07					.byte *-L1	;wh_NameLength	length of name
>92cc	3a 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>92ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>92cf	08					.byte NN	;wh_Flags	dictionary flags
=37451					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.92d0	a9 02		lda #$02	SFloats:	lda #2
.92d2	4c 2e c9	jmp $c92e			jmp LShift_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$92d5					en = *	; remember here
>92ce	05					.byte CL	;wh_CodeLength
>92d5	44 46 21			L1:	.text "DF!"	;  name of word as a string, ending at wh_NameLastChar
>92d8	03					.byte *-L1	;wh_NameLength	length of name
>92d9	4b 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>92db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>92dc	08					.byte NN	;wh_Flags	dictionary flags
=37464					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.92dd	20 50 b2	jsr $b250	DFStore:	jsr PopYA		; pop df_addr
.92e0	85 17		sta $17		DFStore_YA:	sta tmp2+0		; save df_addr
.92e2	84 18		sty $18				sty tmp2+1
.92e4	a4 4d		ldy $4d				ldy fp			; negative?
.92e6	b9 58 00	lda $0058,y			lda FSMant0,y
.92e9	29 80		and #$80			and #$80		; remember sign
.92eb	85 1a		sta $1a				sta tmp3+1
.92ed	10 03		bpl $92f2			bpl +			; make positive
.92ef	20 1e 8b	jsr $8b1e			jsr FNegate
.92f2					+
.92f2	86 15		stx $15				stx tmp1+0		; save data stack index
.92f4	a6 4d		ldx $4d				ldx fp
.92f6	a9 00		lda #$00			lda #0
.92f8	a0 07		ldy #$07			ldy #7			; +7 IEEE
.92fa	91 17		sta ($17),y			sta (tmp2),y
.92fc	88		dey				dey			; +6 IEEE
.92fd	91 17		sta ($17),y			sta (tmp2),y
.92ff	20 47 93	jsr $9347			jsr _shift		; shift mantissa
.9302	20 47 93	jsr $9347			jsr _shift
.9305	88		dey				dey			; +5 IEEE
.9306	91 17		sta ($17),y			sta (tmp2),y
.9308	b5 76		lda $76,x			lda FSMant3,x
.930a	88		dey				dey			; +4 IEEE
.930b	91 17		sta ($17),y			sta (tmp2),y
.930d	b5 6c		lda $6c,x			lda FSMant2,x
.930f	88		dey				dey			; +3 IEEE
.9310	91 17		sta ($17),y			sta (tmp2),y
.9312	b5 62		lda $62,x			lda FSMant1,x
.9314	88		dey				dey			; +2 IEEE
.9315	91 17		sta ($17),y			sta (tmp2),y
.9317	b5 58		lda $58,x			lda FSMant0,x		; clear extra bits
.9319	29 0f		and #$0f			and #$f
.931b	95 58		sta $58,x			sta FSMant0,x
.931d	b5 4e		lda $4e,x			lda FSExp,x
.931f	38		sec				sec
.9320	e9 02		sbc #$02			sbc #2
.9322	95 4e		sta $4e,x			sta FSExp,x
.9324	0a		asl a				asl a
.9325	0a		asl a				asl a
.9326	0a		asl a				asl a
.9327	0a		asl a				asl a
.9328	15 58		ora $58,x			ora FSMant0,x
.932a	88		dey				dey			; +1 IEEE
.932b	91 17		sta ($17),y			sta (tmp2),y
.932d	b5 4e		lda $4e,x			lda FSExp,x
.932f	08		php				php
.9330	4a		lsr a				lsr a
.9331	4a		lsr a				lsr a
.9332	4a		lsr a				lsr a
.9333	4a		lsr a				lsr a
.9334	18		clc				clc
.9335	69 30		adc #$30			adc #$30
.9337	28		plp				plp
.9338	30 03		bmi $933d			bmi +
.933a	18		clc				clc
.933b	69 10		adc #$10			adc #$10
.933d	05 1a		ora $1a		+		ora tmp3+1		; add sign bit
.933f	88		dey				dey			; +0 IEEE
.9340	91 17		sta ($17),y			sta (tmp2),y
.9342	e6 4d		inc $4d				inc fp			; FDrop
.9344	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
.9346	60		rts				rts
.9347	56 58		lsr $58,x	_shift:		lsr FSMant0,x
.9349	76 62		ror $62,x			ror FSMant1,x
.934b	76 6c		ror $6c,x			ror FSMant2,x
.934d	76 76		ror $76,x			ror FSMant3,x
.934f	6a		ror a				ror a
=115					CL	.var *-(WordListLink+wh_Xt)
=$9350					en = *	; remember here
>92db	73					.byte CL	;wh_CodeLength
.9350	60		rts				rts
>9351	44 46 40			L1:	.text "DF@"	;  name of word as a string, ending at wh_NameLastChar
>9354	03					.byte *-L1	;wh_NameLength	length of name
>9355	58 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9357	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9358	08					.byte NN	;wh_Flags	dictionary flags
=37588					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9359	20 50 b2	jsr $b250	DFAt:		jsr PopYA		; pop df_addr
.935c	85 17		sta $17		DFAt_YA:	sta tmp2+0		; save df_addr
.935e	84 18		sty $18				sty tmp2+1
.9360	20 92 83	jsr $8392			jsr FAllocX		; alloc FP stack entry
.9363	a0 00		ldy #$00			ldy #0			; +0 IEEE byte
.9365	b1 17		lda ($17),y			lda (tmp2),y
.9367	95 4e		sta $4e,x			sta FSExp,x
.9369	c8		iny				iny			; +1 IEEE byte
.936a	b1 17		lda ($17),y			lda (tmp2),y
.936c	95 58		sta $58,x			sta FSMant0,x
.936e	c8		iny				iny			; +2 IEEE byte
.936f	b1 17		lda ($17),y			lda (tmp2),y
.9371	95 62		sta $62,x			sta FSMant1,x
.9373	c8		iny				iny			; +3 IEEE byte
.9374	b1 17		lda ($17),y			lda (tmp2),y
.9376	95 6c		sta $6c,x			sta FSMant2,x
.9378	c8		iny				iny			; +4 IEEE byte
.9379	b1 17		lda ($17),y			lda (tmp2),y
.937b	95 76		sta $76,x			sta FSMant3,x
.937d	c8		iny				iny			; +5 IEEE byte
.937e	b1 17		lda ($17),y			lda (tmp2),y
.9380	20 a9 93	jsr $93a9			jsr _shifta		; shift exponent & mantissa bits into place
.9383	20 a9 93	jsr $93a9			jsr _shifta
.9386	b5 58		lda $58,x			lda FSMant0,x		; finish shifting exponent bits
.9388	0a		asl a				asl a
.9389	36 4e		rol $4e,x			rol FSExp,x
.938b	0a		asl a				asl a
.938c	36 4e		rol $4e,x			rol FSExp,x
.938e	b5 4e		lda $4e,x			lda FSExp,x		; remove +1023
.9390	18		clc				clc
.9391	69 02		adc #$02			adc #2
.9393	95 4e		sta $4e,x			sta FSExp,x
.9395	b5 58		lda $58,x			lda FSMant0,x
.9397	29 7f		and #$7f			and #$7f
.9399	09 40		ora #$40			ora #$40		;   insert implied 1
.939b	95 58		sta $58,x			sta FSMant0,x		;   insert sign=0
.939d	a6 15		ldx $15				ldx tmp1		; restore data stack index
.939f	a0 00		ldy #$00			ldy #0			; get sign from +0 IEEE byte
.93a1	b1 17		lda ($17),y			lda (tmp2),y
.93a3	10 03		bpl $93a8			bpl +
.93a5	20 1e 8b	jsr $8b1e			jsr FNegate
.93a8					+
.93a8	60		rts				rts
.93a9	0a		asl a		_shifta:	asl a
.93aa	36 76		rol $76,x			rol FSMant3,x
.93ac	36 6c		rol $6c,x			rol FSMant2,x
.93ae	36 62		rol $62,x			rol FSMant1,x
.93b0	36 58		rol $58,x			rol FSMant0,x
.93b2	36 4e		rol $4e,x			rol FSExp,x
.93b4	60		rts				rts
=92					CL	.var *-(WordListLink+wh_Xt)
=$93b5					en = *	; remember here
>9357	5c					.byte CL	;wh_CodeLength
>93b5	44 46 6c 6f 61 74 2b		L1:	.text "DFloat+"	;  name of word as a string, ending at wh_NameLastChar
>93bc	07					.byte *-L1	;wh_NameLength	length of name
>93bd	d4 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>93bf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>93c0	08					.byte NN	;wh_Flags	dictionary flags
=37692					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.93c1	a9 08		lda #$08	DFloatPlus:	lda #8
.93c3	4c f6 c7	jmp $c7f6			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$93c6					en = *	; remember here
>93bf	05					.byte CL	;wh_CodeLength
>93c6	44 46 6c 6f 61 74 73		L1:	.text "DFloats"	;  name of word as a string, ending at wh_NameLastChar
>93cd	07					.byte *-L1	;wh_NameLength	length of name
>93ce	3c 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>93d0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>93d1	08					.byte NN	;wh_Flags	dictionary flags
=37709					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.93d2	a9 03		lda #$03	DFloats:	lda #3
.93d4	4c 2e c9	jmp $c92e			jmp LShift_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$93d7					en = *	; remember here
>93d0	05					.byte CL	;wh_CodeLength
>93d7	46 4b 65 79			L1:	.text "FKey"	;  name of word as a string, ending at wh_NameLastChar
>93db	04					.byte *-L1	;wh_NameLength	length of name
>93dc	4d 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>93de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>93df	08					.byte NN	;wh_Flags	dictionary flags
=37723					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.93e0	ad 00 03	lda $0300	FKey:		lda base		; save base
.93e3	48		pha				pha
.93e4	20 01 b0	jsr $b001			jsr Decimal
.93e7	20 13 c8	jsr $c813			jsr Here		; ( addr )
.93ea	20 13 c8	jsr $c813			jsr Here		; ( addr addr )
.93ed	a9 28		lda #$28			lda #40			; ( addr addr 40 )
.93ef	20 22 b6	jsr $b622			jsr PushZA
.93f2	20 ca c0	jsr $c0ca			jsr Accept		; ( addr len )
.93f5	20 31 91	jsr $9131			jsr ToFloat		; ( true | false)
.93f8	68		pla				pla			; restore base
.93f9	8d 00 03	sta $0300			sta base
.93fc	e8		inx				inx			; err?
.93fd	e8		inx				inx
.93fe	b5 23		lda $23,x			lda DStack-2,x
.9400	f0 01		beq $9403			beq _err
.9402	60		rts				rts
.9403	20 fc b6	jsr $b6fc	_err:		jsr SLiteral_runtime
.9406	4c 0c 94	jmp $940c			  jmp +
>9409	20 3f 20					  .text " ? "
.940c	20 cd cb	jsr $cbcd	+		jsr Type
.940f	4c e0 93	jmp $93e0			jmp FKey
>9412	46 4d 50 6f 6c 79		L1:	.text "FMPoly"	;  name of word as a string, ending at wh_NameLastChar
>9418	06					.byte *-L1	;wh_NameLength	length of name
>9419	5b 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>941b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>941c	08					.byte NN	;wh_Flags	dictionary flags
=37784					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.941d	20 50 b2	jsr $b250	FMPoly:		jsr PopYA
.9420	20 e0 b5	jsr $b5e0	FMPolyYA:	jsr PushYA		; push coefficent addr
.9423	20 07 85	jsr $8507			jsr FAt_YA		; fetch 1st coefficent
.9426	4c 39 94	jmp $9439			jmp _4
.9429	20 21 84	jsr $8421	_2:		jsr FOver
.942c	20 72 8b	jsr $8b72			jsr FStar
.942f	b5 25		lda $25,x			lda DStack+0,x		; fetch next coefficent
.9431	b4 26		ldy $26,x			ldy DStack+1,x
.9433	20 07 85	jsr $8507			jsr FAt_YA
.9436	20 a5 8a	jsr $8aa5			jsr FPlus
.9439	a9 05		lda #$05	_4:		lda #5			; bump coefficent ptr
.943b	20 f6 c7	jsr $c7f6			jsr Plus_A
.943e	a1 25		lda ($25,x)			lda (DStack+0,x)	; end of coefficent list?
.9440	d0 e7		bne $9429			bne _2
.9442	e8		inx				inx			; Drop coefficent ptr
.9443	e8		inx				inx
=39					CL	.var *-(WordListLink+wh_Xt)
=$9444					en = *	; remember here
>941b	27					.byte CL	;wh_CodeLength
.9444	60		rts				rts
>9445	46 4c 6f 67 32 4d 31 4d		L1:	.text "FLog2M1M"	;  name of word as a string, ending at wh_NameLastChar
>944d	08					.byte *-L1	;wh_NameLength	length of name
>944e	98 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9450	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9451	08					.byte NN	;wh_Flags	dictionary flags
=37837					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9452	a9 5c		lda #$5c	FLog2M1M:	lda #<_c
.9454	a0 94		ldy #$94			ldy #>_c
.9456	20 20 94	jsr $9420			jsr FMPolyYA
.9459	4c 72 8b	jmp $8b72			jmp FStar
.945c					_c:
>945c	cc cf 97 7c					.dword $7C97CFCC	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9460	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9461	64 87 94 af					.dword $AF948764	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9465	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>9466	66 c8 d4 62					.dword $62D4C866	; 32 bit signed binary mantissa.  $40000000 = +0.5
>946a	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>946b	e2 9c c3 ac					.dword $ACC39CE2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>946f	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9470	1a c6 2b 79					.dword $792BC61A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9474	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9475	07 e1 c4 a3					.dword $A3C4E107	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9479	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>947a	91 a5 54 5c					.dword $5C54A591	; 32 bit signed binary mantissa.  $40000000 = +0.5
>947e	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>947f	00 00						.word 0
=47					CL	.var *-(WordListLink+wh_Xt)
=$9481					en = *	; remember here
>9450	2f					.byte CL	;wh_CodeLength
>9481	46 4c 6f 67 32			L1:	.text "FLog2"	;  name of word as a string, ending at wh_NameLastChar
>9486	05					.byte *-L1	;wh_NameLength	length of name
>9487	cd 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9489	03					.byte 3		;wh_CodeLength  (with placeholder value)
>948a	08					.byte NN	;wh_Flags	dictionary flags
=37894					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.948b	a4 4d		ldy $4d		FLog2:		ldy fp
.948d	b9 58 00	lda $0058,y			lda FSMant0,y	; bad param?
.9490	30 20		bmi $94b2			bmi _OutOfRange
.9492	f0 1e		beq $94b2			beq _OutOfRange
.9494	b9 4e 00	lda $004e,y			lda FSExp,y
.9497	48		pha				pha		; remember orig exponent
.9498	a9 01		lda #$01			lda #1
.949a	99 4e 00	sta $004e,y			sta FSExp,y	; set to 1
.949d	20 0c 8b	jsr $8b0c			jsr F1Minus
.94a0	20 52 94	jsr $9452			jsr FLog2M1M
.94a3	a0 00		ldy #$00			ldy #0		; add orig exponent to float
.94a5	68		pla				pla
.94a6	38		sec				sec
.94a7	e9 01		sbc #$01			sbc #1
.94a9	10 01		bpl $94ac			bpl +
.94ab	88		dey				dey
.94ac					+
.94ac	20 bb 8d	jsr $8dbb			jsr SToFYA
.94af	4c a5 8a	jmp $8aa5			jmp FPlus
.94b2	4c 72 b2	jmp $b272	_OutOfRange:	jmp Throw_FpOutOfRange
=42					CL	.var *-(WordListLink+wh_Xt)
=$94b5					en = *	; remember here
>9489	2a					.byte CL	;wh_CodeLength
>94b5	46 4c 6e			L1:	.text "FLn"	;  name of word as a string, ending at wh_NameLastChar
>94b8	03					.byte *-L1	;wh_NameLength	length of name
>94b9	06 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>94bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>94bc	08					.byte NN	;wh_Flags	dictionary flags
=37944					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.94bd	20 8b 94	jsr $948b	FLn:		jsr FLog2
.94c0	20 46 88	jsr $8846			jsr FLitI
>94c3	f8 0b b9 58					.dword $58b90bf8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94c7	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
.94c8	4c 72 8b	jmp $8b72			jmp FStar
=14					CL	.var *-(WordListLink+wh_Xt)
=$94cb					en = *	; remember here
>94bb	0e					.byte CL	;wh_CodeLength
>94cb	46 4c 6e 50 31			L1:	.text "FLnP1"	;  name of word as a string, ending at wh_NameLastChar
>94d0	05					.byte *-L1	;wh_NameLength	length of name
>94d1	38 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>94d3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>94d4	08					.byte NN	;wh_Flags	dictionary flags
=37968					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.94d5	20 da 8a	jsr $8ada	FlnP1:		jsr F1Plus
.94d8	4c bd 94	jmp $94bd			jmp FLn
=6					CL	.var *-(WordListLink+wh_Xt)
=$94db					en = *	; remember here
>94d3	06					.byte CL	;wh_CodeLength
>94db	46 4c 6f 67			L1:	.text "FLog"	;  name of word as a string, ending at wh_NameLastChar
>94df	04					.byte *-L1	;wh_NameLength	length of name
>94e0	50 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>94e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>94e3	08					.byte NN	;wh_Flags	dictionary flags
=37983					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.94e4	20 8b 94	jsr $948b	FLog:		jsr FLog2
.94e7	20 46 88	jsr $8846			jsr FLitI
>94ea	3c 4d 10 4d					.dword $4d104d3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94ee	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
.94ef	4c 72 8b	jmp $8b72			jmp FStar
=14					CL	.var *-(WordListLink+wh_Xt)
=$94f2					en = *	; remember here
>94e2	0e					.byte CL	;wh_CodeLength
>94f2	46 45 78 70 32 4d 31 4d		L1:	.text "FExp2M1M"	;  name of word as a string, ending at wh_NameLastChar
>94fa	08					.byte *-L1	;wh_NameLength	length of name
>94fb	5f 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>94fd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>94fe	08					.byte NN	;wh_Flags	dictionary flags
=38010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.94ff	a9 09		lda #$09	FExp2M1M:	lda #<_c
.9501	a0 95		ldy #$95			ldy #>_c
.9503	20 20 94	jsr $9420			jsr FMPolyYA
.9506	4c 72 8b	jmp $8b72			jmp FStar
=10					CL	.var *-(WordListLink+wh_Xt)
=$9509					en = *	; remember here
>94fd	0a					.byte CL	;wh_CodeLength
.9509					_c:
>9509	da dc 4f 7c					.dword $7C4FDCDa	; 32 bit signed binary mantissa.  $40000000 = +0.5
>950d	f7						.char -9		; 8 bit signed exponent.  $00 = 2**0
>950e	d6 ca 4c 49					.dword $494CCAD6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9512	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9513	f0 42 64 72					.dword $726442f0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9517	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9518	44 90 f4 7a					.dword $7AF49044	; 32 bit signed binary mantissa.  $40000000 = +0.5
>951c	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>951d	9b 3c b9 58					.dword $58B93C9b	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9521	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>9522	00						.byte 0
>9523	46 45 78 70 32			L1:	.text "FExp2"	;  name of word as a string, ending at wh_NameLastChar
>9528	05					.byte *-L1	;wh_NameLength	length of name
>9529	7a 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>952b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>952c	08					.byte NN	;wh_Flags	dictionary flags
=38056					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.952d	20 9c 86	jsr $869c	FExp2:		jsr FIntFrc	; ( f: r_rem r_int )
.9530	20 05 8e	jsr $8e05			jsr FToS
.9533	20 ff 94	jsr $94ff			jsr FExp2M1M
.9536	20 da 8a	jsr $8ada			jsr F1Plus
.9539	20 34 b2	jsr $b234			jsr PopA
.953c	a4 4d		ldy $4d				ldy fp
.953e	18		clc				clc
.953f	79 4e 00	adc $004e,y			adc FSExp,y
.9542	99 4e 00	sta $004e,y			sta FSExp,y
=24					CL	.var *-(WordListLink+wh_Xt)
=$9545					en = *	; remember here
>952b	18					.byte CL	;wh_CodeLength
.9545	60		rts				rts
>9546	46 45 78 70			L1:	.text "FExp"	;  name of word as a string, ending at wh_NameLastChar
>954a	04					.byte *-L1	;wh_NameLength	length of name
>954b	a8 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>954d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>954e	08					.byte NN	;wh_Flags	dictionary flags
=38090					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.954f					FExp:
.954f	20 46 88	jsr $8846			jsr FLitI
>9552	94 1d 55 5c					.dword $5c551d94	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9556	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
.9557	20 72 8b	jsr $8b72			jsr FStar
.955a	4c 2d 95	jmp $952d			jmp FExp2
=14					CL	.var *-(WordListLink+wh_Xt)
=$955d					en = *	; remember here
>954d	0e					.byte CL	;wh_CodeLength
>955d	46 45 78 70 4d 31		L1:	.text "FExpM1"	;  name of word as a string, ending at wh_NameLastChar
>9563	06					.byte *-L1	;wh_NameLength	length of name
>9564	ca 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9566	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9567	08					.byte NN	;wh_Flags	dictionary flags
=38115					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9568	20 4f 95	jsr $954f	FExpM1:		jsr FExp
.956b	4c 0c 8b	jmp $8b0c			jmp F1Minus
=6					CL	.var *-(WordListLink+wh_Xt)
=$956e					en = *	; remember here
>9566	06					.byte CL	;wh_CodeLength
>956e	46 41 4c 6f 67			L1:	.text "FALog"	;  name of word as a string, ending at wh_NameLastChar
>9573	05					.byte *-L1	;wh_NameLength	length of name
>9574	e3 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9576	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9577	08					.byte NN	;wh_Flags	dictionary flags
=38131					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9578					FALog:
.9578	20 46 88	jsr $8846			jsr FLitI
>957b	20 3c 4d 6a					.dword $6a4d3c20	; 32 bit signed binary mantissa.  $40000000 = +0.5
>957f	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
.9580	20 72 8b	jsr $8b72			jsr FStar
.9583	4c 2d 95	jmp $952d			jmp FExp2
=14					CL	.var *-(WordListLink+wh_Xt)
=$9586					en = *	; remember here
>9576	0e					.byte CL	;wh_CodeLength
>9586	46 2a 2a			L1:	.text "F**"	;  name of word as a string, ending at wh_NameLastChar
>9589	03					.byte *-L1	;wh_NameLength	length of name
>958a	f3 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>958c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>958d	08					.byte NN	;wh_Flags	dictionary flags
=38153					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.958e	20 85 84	jsr $8485	FPower:		jsr FSwap
.9591	20 8b 94	jsr $948b			jsr FLog2
.9594	20 72 8b	jsr $8b72			jsr FStar
.9597	4c 2d 95	jmp $952d			jmp FExp2
=12					CL	.var *-(WordListLink+wh_Xt)
=$959a					en = *	; remember here
>958c	0c					.byte CL	;wh_CodeLength
>959a	44 65 67 32 52 61 64		L1:	.text "Deg2Rad"	;  name of word as a string, ending at wh_NameLastChar
>95a1	07					.byte *-L1	;wh_NameLength	length of name
>95a2	09 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95a4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95a5	08					.byte NN	;wh_Flags	dictionary flags
=38177					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95a6					Deg2Rad:
.95a6	20 46 88	jsr $8846			jsr FLitI
>95a9	8a 1a 7d 47					.dword $477d1A8A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95ad	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
.95ae	4c 72 8b	jmp $8b72			jmp FStar
=11					CL	.var *-(WordListLink+wh_Xt)
=$95b1					en = *	; remember here
>95a4	0b					.byte CL	;wh_CodeLength
>95b1	52 61 64 32 44 65 67		L1:	.text "Rad2Deg"	;  name of word as a string, ending at wh_NameLastChar
>95b8	07					.byte *-L1	;wh_NameLength	length of name
>95b9	21 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95bc	08					.byte NN	;wh_Flags	dictionary flags
=38200					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95bd					Rad2Deg:
.95bd	20 46 88	jsr $8846			jsr FLitI
>95c0	68 70 97 72					.dword $72977068	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95c4	06						.char 6		; 8 bit signed exponent.  $00 = 2**0
.95c5	4c 72 8b	jmp $8b72			jmp FStar
=11					CL	.var *-(WordListLink+wh_Xt)
=$95c8					en = *	; remember here
>95bb	0b					.byte CL	;wh_CodeLength
>95c8	46 41 52 65 64 75 63 65		L1:	.text "FAReduce"	;  name of word as a string, ending at wh_NameLastChar
>95d0	08					.byte *-L1	;wh_NameLength	length of name
>95d1	38 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95d3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95d4	08					.byte NN	;wh_Flags	dictionary flags
=38224					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95d5	a4 4d		ldy $4d		FAReduce:	ldy fp
.95d7	b9 58 00	lda $0058,y			lda FSMant0,y		; zero?
.95da	f0 2f		beq $960b			beq _ok
.95dc	b9 4e 00	lda $004e,y			lda FSExp,y		; get exponent
.95df	30 2a		bmi $960b			bmi _ok			; small?
.95e1	c9 01		cmp #$01			cmp #1			; maybe need mirror?
.95e3	30 26		bmi $960b			bmi _ok			;if exponent <=0
.95e5	f0 24		beq $960b			beq _ok
.95e7	c9 02		cmp #$02			cmp #2			; maybe need rotation?
.95e9	b0 22		bcs $960d			bcs _exp2
.95eb	b9 58 00	lda $0058,y			lda FSMant0,y
.95ee	c9 65		cmp #$65			cmp #$65		;in -pi/2..pi/2 ?
.95f0	90 19		bcc $960b			bcc _ok
.95f2	c9 9b		cmp #$9b			cmp #$100-$65
.95f4	b0 15		bcs $960b			bcs _ok
.95f6					_mir:
.95f6	20 ae 88	jsr $88ae			jsr FPi
.95f9	a4 4d		ldy $4d				ldy fp
.95fb	b9 59 00	lda $0059,y			lda FSMant0+1,y
.95fe	10 03		bpl $9603			bpl _3
.9600	20 1e 8b	jsr $8b1e			jsr FNegate
.9603	20 85 84	jsr $8485	_3:		jsr FSwap
.9606	20 e7 8a	jsr $8ae7			jsr FMinus
.9609	38		sec				sec		; mirrored
.960a	60		rts				rts
.960b	18		clc		_ok:		clc		; not mirrored
.960c	60		rts				rts
.960d	d0 0b		bne $961a	_exp2:		bne _rot	;if exp>2 then fix
.960f	b9 58 00	lda $0058,y			lda FSMant0,y
.9612	c9 65		cmp #$65			cmp #$65	;if mant>pi or mant<-pi then fix
.9614	90 e0		bcc $95f6			bcc _mir
.9616	c9 9b		cmp #$9b			cmp #$100-$65
.9618	b0 dc		bcs $95f6			bcs _mir
.961a	20 e0 88	jsr $88e0	_rot:		jsr F2Pi
.961d	20 25 8c	jsr $8c25			jsr FSlash
.9620	20 9c 86	jsr $869c			jsr FIntFrc
.9623	e6 4d		inc $4d				inc fp		; FDrop integer part
.9625	a4 4d		ldy $4d				ldy fp		;if >=.5
.9627	b9 4e 00	lda $004e,y			lda FSExp,y
.962a	a8		tay				tay
.962b	30 03		bmi $9630			bmi _rot4
.962d	20 0c 8b	jsr $8b0c			jsr F1Minus	;  subtract 1
.9630	20 e0 88	jsr $88e0	_rot4:		jsr F2Pi
.9633	20 72 8b	jsr $8b72			jsr FStar
.9636	4c d5 95	jmp $95d5			jmp FAReduce	; rotate done, look again
=100					CL	.var *-(WordListLink+wh_Xt)
=$9639					en = *	; remember here
>95d3	64					.byte CL	;wh_CodeLength
>9639	46 53 69 6e 4d			L1:	.text "FSinM"	;  name of word as a string, ending at wh_NameLastChar
>963e	05					.byte *-L1	;wh_NameLength	length of name
>963f	50 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9641	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9642	08					.byte NN	;wh_Flags	dictionary flags
=38334					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9643	20 fd 83	jsr $83fd	FSinM:		jsr FDup
.9646	20 f8 8b	jsr $8bf8			jsr FSqr	; x x^2
.9649	a9 59		lda #$59			lda #<_c
.964b	a0 96		ldy #$96			ldy #>_c
.964d	20 20 94	jsr $9420			jsr FMPolyYA
.9650	20 72 8b	jsr $8b72			jsr FStar
.9653	20 da 8a	jsr $8ada			jsr F1Plus	; C0 +1.0
.9656	4c 72 8b	jmp $8b72			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$9659					en = *	; remember here
>9641	16					.byte CL	;wh_CodeLength
.9659					_c:
>9659	a6 a7 21 57					.dword $5721a7a6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>965d	ee						.char -18		; 8 bit signed exponent.  $00 = 2**0
>965e	4e 0b 2a 98					.dword $982a0b4e	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9662	f4						.char -12		; 8 bit signed exponent.  $00 = 2**0
>9663	3c 8f 43 44					.dword $44438f3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9667	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9668	37 ae aa aa					.dword $aaaaae37	; 32 bit signed binary mantissa.  $40000000 = +0.5
>966c	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>966d	00						.byte 0
>966e	46 53 69 6e			L1:	.text "FSin"	;  name of word as a string, ending at wh_NameLastChar
>9672	04					.byte *-L1	;wh_NameLength	length of name
>9673	be 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9675	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9676	08					.byte NN	;wh_Flags	dictionary flags
=38386					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9677	20 d5 95	jsr $95d5	FSin:		jsr FAReduce
.967a	4c 43 96	jmp $9643			jmp FSinM
=6					CL	.var *-(WordListLink+wh_Xt)
=$967d					en = *	; remember here
>9675	06					.byte CL	;wh_CodeLength
>967d	46 43 6f 73			L1:	.text "FCos"	;  name of word as a string, ending at wh_NameLastChar
>9681	04					.byte *-L1	;wh_NameLength	length of name
>9682	f2 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9684	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9685	08					.byte NN	;wh_Flags	dictionary flags
=38401					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9686	20 bf 88	jsr $88bf	FCos:		jsr FPiH
.9689	20 a5 8a	jsr $8aa5			jsr FPlus
.968c	4c 77 96	jmp $9677			jmp FSin
=9					CL	.var *-(WordListLink+wh_Xt)
=$968f					en = *	; remember here
>9684	09					.byte CL	;wh_CodeLength
>968f	46 53 69 6e 43 6f 73		L1:	.text "FSinCos"	;  name of word as a string, ending at wh_NameLastChar
>9696	07					.byte *-L1	;wh_NameLength	length of name
>9697	01 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9699	03					.byte 3		;wh_CodeLength  (with placeholder value)
>969a	08					.byte NN	;wh_Flags	dictionary flags
=38422					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.969b	20 fd 83	jsr $83fd	FSinCos:	jsr FDup
.969e	20 77 96	jsr $9677			jsr FSin
.96a1	20 85 84	jsr $8485			jsr FSwap
.96a4	4c 86 96	jmp $9686			jmp FCos
=12					CL	.var *-(WordListLink+wh_Xt)
=$96a7					en = *	; remember here
>9699	0c					.byte CL	;wh_CodeLength
>96a7	46 54 61 6e 4d			L1:	.text "FTanM"	;  name of word as a string, ending at wh_NameLastChar
>96ac	05					.byte *-L1	;wh_NameLength	length of name
>96ad	16 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96af	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96b0	08					.byte NN	;wh_Flags	dictionary flags
=38444					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.96b1	20 fd 83	jsr $83fd	FTanM:		jsr FDup
.96b4	20 f8 8b	jsr $8bf8			jsr FSqr		; x x^2
.96b7	a9 c7		lda #$c7			lda #<_c
.96b9	a0 96		ldy #$96			ldy #>_c
.96bb	20 20 94	jsr $9420			jsr FMPolyYA
.96be	20 72 8b	jsr $8b72			jsr FStar
.96c1	20 da 8a	jsr $8ada			jsr F1Plus		; c0 1.0
.96c4	4c 72 8b	jmp $8b72			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$96c7					en = *	; remember here
>96af	16					.byte CL	;wh_CodeLength
.96c7					_c:
>96c7	1e ae 4d 58					.dword $584DAE1E	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96cb	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>96cc	51 0a eb 57					.dword $57EB0A51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96d0	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>96d1	98 d9 14 77					.dword $7714D998	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96d5	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>96d6	f9 10 ea 43					.dword $43EA10F9	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96da	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>96db	1b e2 57 55					.dword $5557E21B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96df	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>96e0	00						.byte 0
>96e1	46 54 61 6e			L1:	.text "FTan"	;  name of word as a string, ending at wh_NameLastChar
>96e5	04					.byte *-L1	;wh_NameLength	length of name
>96e6	2c 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96e8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96e9	08					.byte NN	;wh_Flags	dictionary flags
=38501					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.96ea	20 d5 95	jsr $95d5	FTan:		jsr FAReduce
.96ed	90 06		bcc $96f5			bcc _30
.96ef	20 f5 96	jsr $96f5			jsr _30
.96f2	4c 1e 8b	jmp $8b1e			jmp FNegate
.96f5					_30:
.96f5	20 fd 83	jsr $83fd			jsr FDup
.96f8	20 45 8b	jsr $8b45			jsr FAbs
.96fb	20 d0 88	jsr $88d0			jsr FPiQ
.96fe	20 5c 87	jsr $875c			jsr FLe
.9701	e8		inx				inx			; pop f
.9702	e8		inx				inx
.9703	b5 25		lda $25,x			lda DStack+0,x
.9705	d0 aa		bne $96b1			bne FTanM
.9707	20 57 44	jsr $4457			jsr FPi/2
.970a	a4 4d		ldy $4d				ldy fp			; get sign
.970c	b9 58 00	lda $0058,y			lda FSMant0,y
.970f	10 03		bpl $9714			bpl +
.9711	20 1e 8b	jsr $8b1e			jsr FNegate
.9714					+
.9714	20 85 84	jsr $8485			jsr FSwap
.9717	20 e7 8a	jsr $8ae7			jsr FMinus
.971a	20 b1 96	jsr $96b1			jsr FTanM
.971d	4c ca 8c	jmp $8cca			jmp F1Slash
=54					CL	.var *-(WordListLink+wh_Xt)
=$9720					en = *	; remember here
>96e8	36					.byte CL	;wh_CodeLength
>9720	46 41 43 6f 73			L1:	.text "FACos"	;  name of word as a string, ending at wh_NameLastChar
>9725	05					.byte *-L1	;wh_NameLength	length of name
>9726	65 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9728	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9729	08					.byte NN	;wh_Flags	dictionary flags
=38565					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.972a	a4 4d		ldy $4d		FACos:		ldy fp
.972c	b9 58 00	lda $0058,y			lda FSMant0,y
.972f	08		php				php			; save sign
.9730	20 45 8b	jsr $8b45			jsr FAbs
.9733	a9 56		lda #$56			lda #<_c
.9735	a0 97		ldy #$97			ldy #>_c
.9737	20 20 94	jsr $9420			jsr FMPolyYA
.973a	20 85 84	jsr $8485			jsr FSwap
.973d	20 1e 8b	jsr $8b1e			jsr FNegate
.9740	20 da 8a	jsr $8ada			jsr F1Plus
.9743	20 b0 8e	jsr $8eb0			jsr FSqrt
.9746	20 72 8b	jsr $8b72			jsr FStar
.9749	28		plp				plp			; was r1 negative?
.974a	10 09		bpl $9755			bpl +
.974c	20 ae 88	jsr $88ae			jsr FPi
.974f	20 85 84	jsr $8485			jsr FSwap
.9752	20 e7 8a	jsr $8ae7			jsr FMinus
.9755					+
=43					CL	.var *-(WordListLink+wh_Xt)
=$9755					en = *	; remember here
>9728	2b					.byte CL	;wh_CodeLength
.9755	60		rts				rts
.9756					_c:
>9756	8b 5e 9f 4b					.dword $4B9F5E8B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>975a	f8						.char -8		; 8 bit signed exponent.  $00 = 2**0
>975b	ad cc 29 a4					.dword $A429CCAD	; 32 bit signed binary mantissa.  $40000000 = +0.5
>975f	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9760	98 a1 a3 6e					.dword $6EA3A198	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9764	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>9765	5a 10 e1 9b					.dword $9BE1105A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9769	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>976a	c6 71 ea 5a					.dword $5AEA71C6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>976e	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>976f	e0 56 21 92					.dword $922156E0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9773	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9774	41 ed 87 64					.dword $6487ED41	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9778	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>9779	00						.byte 0
>977a	46 41 53 69 6e			L1:	.text "FASin"	;  name of word as a string, ending at wh_NameLastChar
>977f	05					.byte *-L1	;wh_NameLength	length of name
>9780	a5 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9782	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9783	08					.byte NN	;wh_Flags	dictionary flags
=38655					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9784	20 2a 97	jsr $972a	FASin:		jsr FACos
.9787	20 1e 8b	jsr $8b1e			jsr FNegate
.978a	20 bf 88	jsr $88bf			jsr FPiH
.978d	4c a5 8a	jmp $8aa5			jmp FPlus
=12					CL	.var *-(WordListLink+wh_Xt)
=$9790					en = *	; remember here
>9782	0c					.byte CL	;wh_CodeLength
>9790	46 41 54 61 6e 4d		L1:	.text "FATanM"	;  name of word as a string, ending at wh_NameLastChar
>9796	06					.byte *-L1	;wh_NameLength	length of name
>9797	ff 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9799	03					.byte 3		;wh_CodeLength  (with placeholder value)
>979a	08					.byte NN	;wh_Flags	dictionary flags
=38678					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.979b	20 fd 83	jsr $83fd	FATanM:		jsr FDup		; x x
.979e	20 f8 8b	jsr $8bf8			jsr FSqr		; x xsqr
.97a1	a9 b1		lda #$b1			lda #<_c
.97a3	a0 97		ldy #$97			ldy #>_c
.97a5	20 20 94	jsr $9420			jsr FMPolyYA
.97a8	20 72 8b	jsr $8b72			jsr FStar		; x poly
.97ab	20 da 8a	jsr $8ada			jsr F1Plus		; x poly
.97ae	4c 72 8b	jmp $8b72			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$97b1					en = *	; remember here
>9799	16					.byte CL	;wh_CodeLength
.97b1					_c:
>97b1	98 08 2d 76					.dword $762D0898	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97b5	f9						.char -7		; 8 bit signed exponent.  $00 = 2**0
>97b6	55 a1 32 b8					.dword $B832A155	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97ba	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>97bb	a8 d7 a2 53					.dword $53A2D7A8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97bf	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>97c0	be 91 85 bb					.dword $BB8591BE	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97c4	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>97c5	06 65 aa 65					.dword $65AA6506	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97c9	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>97ca	12 21 b0 aa					.dword $AAB02112	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97ce	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>97cf	00						.byte 0
>97d0	46 41 54 61 6e			L1:	.text "FATan"	;  name of word as a string, ending at wh_NameLastChar
>97d5	05					.byte *-L1	;wh_NameLength	length of name
>97d6	16 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>97d8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>97d9	08					.byte NN	;wh_Flags	dictionary flags
=38741					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.97da					FATan:
.97da	a4 4d		ldy $4d				ldy fp
.97dc	b9 4e 00	lda $004e,y			lda FSExp,y		; Abs(r1)<1 ?
.97df	30 ba		bmi $979b			bmi FATanM
.97e1	f0 b8		beq $979b			beq FATanM
.97e3	b9 58 00	lda $0058,y			lda FSMant0,y		; save sign
.97e6	08		php				php
.97e7	20 ca 8c	jsr $8cca			jsr F1Slash
.97ea	20 9b 97	jsr $979b			jsr FATanM
.97ed	20 1e 8b	jsr $8b1e			jsr FNegate
.97f0	20 bf 88	jsr $88bf			jsr FPiH
.97f3	28		plp				plp
.97f4	10 03		bpl $97f9			bpl _18
.97f6	20 1e 8b	jsr $8b1e			jsr FNegate
.97f9	4c a5 8a	jmp $8aa5	_18:		jmp FPlus
>97fc	46 41 54 61 6e 32		L1:	.text "FATan2"	;  name of word as a string, ending at wh_NameLastChar
>9802	06					.byte *-L1	;wh_NameLength	length of name
>9803	55 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9805	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9806	08					.byte NN	;wh_Flags	dictionary flags
=38786					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9807	a4 4d		ldy $4d		FATan2:		ldy fp
.9809	b9 58 00	lda $0058,y			lda FSMant0+0,y	; get rx sign
.980c	f0 1c		beq $982a			beq _rxzero
.980e	0a		asl a				asl a		;   C=rx sign
.980f	b9 59 00	lda $0059,y			lda FSMant0+1,y	;   N=ry sign
.9812	08		php				php		; save signs
.9813	20 25 8c	jsr $8c25			jsr FSlash
.9816	20 da 97	jsr $97da			jsr FATan
.9819	28		plp				plp		; pop signs
.981a	b0 01		bcs $981d			bcs _rxneg
.981c	60		rts		_rts:		rts
.981d	08		php		_rxneg:		php
.981e	20 ae 88	jsr $88ae			jsr FPi
.9821	28		plp				plp
.9822	10 03		bpl $9827			bpl +
.9824	20 1e 8b	jsr $8b1e			jsr FNegate
.9827	4c a5 8a	jmp $8aa5	+		jmp FPlus
.982a	e6 4d		inc $4d		_rxzero:	inc fp		; FDrop rx
.982c	b9 58 00	lda $0058,y			lda FSMant0,y
.982f	08		php				php
.9830	e6 4d		inc $4d				inc fp		; FDrop ry
.9832	20 bf 88	jsr $88bf			jsr FPiH
.9835	28		plp				plp
.9836	10 e4		bpl $981c			bpl _rts
.9838	4c 1e 8b	jmp $8b1e			jmp FNegate
=52					CL	.var *-(WordListLink+wh_Xt)
=$983b					en = *	; remember here
>9805	34					.byte CL	;wh_CodeLength
>983b	45 64				L1:	.text "Ed"	;  name of word as a string, ending at wh_NameLastChar
>983d	02					.byte *-L1	;wh_NameLength	length of name
>983e	82 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9840	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9841	08					.byte NN	;wh_Flags	dictionary flags
=38845					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9842	4c 45 98	jmp $9845	Ed:		jmp ed6502
=3					CL	.var *-(WordListLink+wh_Xt)
=$9845					en = *	; remember here
>9840	03					.byte CL	;wh_CodeLength
=$1f					ed_head	 = editor1  ; pointer to first list element (addr) (2 bytes)
=$21					ed_cur	 = editor2  ; current line number (1 is first line) (2 bytes)
=$23					ed_flags = editor3  ; Flags used by ed, where
.9845					ed6502:
.9845	ad 00 03	lda $0300			lda base
.9848	85 24		sta $24				sta editor3+1
.984a	20 01 b0	jsr $b001			jsr Decimal
.984d	a9 00		lda #$00			lda #0
.984f	85 1f		sta $1f				sta ed_head
.9851	85 20		sta $20				sta ed_head+1
.9853	85 21		sta $21				sta ed_cur
.9855	85 22		sta $22				sta ed_cur+1
.9857	85 23		sta $23				sta ed_flags
.9859	20 31 b6	jsr $b631			jsr Zero
.985c	20 31 b6	jsr $b631			jsr Zero		; ( addr-t u-t )
.985f	20 ce a9	jsr $a9ce			jsr CR
.9862					ed_input_loop:
.9862	a9 7e		lda #$7e			lda #$ff-%10000001
.9864	25 23		and $23				and ed_flags
.9866	85 23		sta $23				sta ed_flags
.9868	20 12 9d	jsr $9d12			jsr ed_get_input
.986b	a5 06		lda $06				lda ciblen+0
.986d	d0 1e		bne $988d			bne _command_mode
.986f	a5 21		lda $21				lda ed_cur+0
.9871	a4 22		ldy $22				ldy ed_cur+1
.9873	20 e0 b5	jsr $b5e0			jsr PushYA		; ( addr-t u-t u )
.9876	a9 80		lda #$80			lda #%10000000
.9878	05 23		ora $23				ora ed_flags
.987a	85 23		sta $23				sta ed_flags
.987c	20 47 c8	jsr $c847			jsr One_Plus		; ( addr-t u-t u+1 )
.987f	20 2d 9d	jsr $9d2d			jsr ed_is_valid_line
.9882	b0 03		bcs $9887			bcs +
.9884	4c 02 9d	jmp $9d02			jmp ed_error_1drop	; New line number is not legal, abort
.9887					+
.9887	20 31 b6	jsr $b631			jsr Zero		; ( addr-t u-t u+1 0 )
.988a	4c 4c 99	jmp $994c			jmp _line_number_only_from_external
.988d					_command_mode:
.988d	20 31 b6	jsr $b631			jsr Zero		; parameter 1 is NOS ( addr-t u-t 0 )
.9890	20 31 b6	jsr $b631			jsr Zero		; parameter 2 is TOS ( addr-t u-t 0 0 )
.9893	a0 00		ldy #$00			ldy #0			; get char
.9895	b1 04		lda ($04),y			lda (cib),y
.9897	c9 2e		cmp #$2e			cmp #'.'
.9899	d0 31		bne $98cc			bne _prefix_dollar
.989b	20 21 9d	jsr $9d21			jsr ed_have_text
.989e	a5 21		lda $21				lda ed_cur
.98a0	95 27		sta $27,x			sta DStack+2,x
.98a2	a5 22		lda $22				lda ed_cur+1
.98a4	95 28		sta $28,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.98a6	a9 80		lda #$80			lda #%10000000
.98a8	05 23		ora $23				ora ed_flags
.98aa	85 23		sta $23				sta ed_flags
.98ac	a5 06		lda $06				lda ciblen
.98ae	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.98b0	d0 03		bne $98b5			bne +
.98b2	4c 4c 99	jmp $994c			jmp _line_number_only_from_external
.98b5					+
.98b5	a5 04		lda $04				lda cib+0
.98b7	a4 05		ldy $05				ldy cib+1
.98b9	20 e0 b5	jsr $b5e0			jsr PushYA
.98bc	a5 06		lda $06				lda ciblen+0
.98be	a4 07		ldy $07				ldy ciblen+1
.98c0	20 e0 b5	jsr $b5e0			jsr PushYA
.98c3	20 21 c8	jsr $c821			jsr One_Minus		; ( addr-t u-t para1 0 addr u-1 )
.98c6	20 51 c8	jsr $c851			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr+1 u-1 )
.98c9	4c 9e 99	jmp $999e			jmp _check_for_para2
.98cc					_prefix_dollar:
.98cc	c9 24		cmp #$24			cmp #'$'
.98ce	d0 1f		bne $98ef			bne _prefix_percent
.98d0	20 21 9d	jsr $9d21			jsr ed_have_text
.98d3	e8		inx				inx
.98d4	e8		inx				inx			; ( addr-t u-t 0 )
.98d5	20 4e 9d	jsr $9d4e			jsr ed_last_line	; ( addr-t u-t 0 para1 )
.98d8	20 63 cd	jsr $cd63			jsr Swap		; ( addr-t u-t para1 0 )
.98db	a9 80		lda #$80			lda #%10000000
.98dd	05 23		ora $23				ora ed_flags
.98df	85 23		sta $23				sta ed_flags
.98e1	a5 06		lda $06				lda ciblen
.98e3	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.98e5	d0 03		bne $98ea			bne +
.98e7	4c 4c 99	jmp $994c			jmp _line_number_only_from_external
.98ea					+
.98ea	a0 01		ldy #$01			ldy #1
.98ec	4c 14 9a	jmp $9a14			jmp _check_command
.98ef					_prefix_percent:
.98ef	c9 25		cmp #$25			cmp #'%'
.98f1	f0 04		beq $98f7			beq _whole_text
.98f3	c9 2c		cmp #$2c			cmp #','
.98f5	d0 1b		bne $9912			bne _prefix_semicolon
.98f7					_whole_text:
.98f7	20 21 9d	jsr $9d21			jsr ed_have_text
.98fa	a9 01		lda #$01			lda #1
.98fc	95 27		sta $27,x			sta DStack+2,x		; LSB of NOS is para 1
.98fe	a9 00		lda #$00			lda #0
.9900	95 28		sta $28,x			sta DStack+3,x		; ( addr-t u-t para1 0 )
.9902					_semicolon_entry:
.9902	e8		inx				inx
.9903	e8		inx				inx			; DROP ( addr-t u-t para1 )
.9904	20 4e 9d	jsr $9d4e			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9907	a9 80		lda #$80			lda #%10000000
.9909	05 23		ora $23				ora ed_flags
.990b	85 23		sta $23				sta ed_flags
.990d	a0 01		ldy #$01			ldy #1
.990f	4c 14 9a	jmp $9a14			jmp _check_command
.9912					_prefix_semicolon:
.9912	c9 3b		cmp #$3b			cmp #';'
.9914	d0 0e		bne $9924			bne _prefix_number
.9916	20 21 9d	jsr $9d21			jsr ed_have_text
.9919	a5 21		lda $21				lda ed_cur
.991b	95 27		sta $27,x			sta DStack+2,x
.991d	a5 22		lda $22				lda ed_cur+1
.991f	95 28		sta $28,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9921	4c 02 99	jmp $9902			jmp _semicolon_entry
.9924					_prefix_number:
.9924	20 31 b6	jsr $b631			jsr Zero
.9927	20 31 b6	jsr $b631			jsr Zero		; ( addr-t u-t 0 0 0 0 )
.992a	a5 04		lda $04				lda cib+0
.992c	a4 05		ldy $05				ldy cib+1
.992e	20 e0 b5	jsr $b5e0			jsr PushYA
.9931	a5 06		lda $06				lda ciblen+0
.9933	a4 07		ldy $07				ldy ciblen+1
.9935	20 e0 b5	jsr $b5e0			jsr PushYA		; ( addr-t u-t 0 0 0 0 cib ciblen )
.9938	20 82 ae	jsr $ae82			jsr To_Number		; ( addr-t u-t 0 0 ud addr2 u2 )
.993b	b5 25		lda $25,x			lda DStack+0,x
.993d	15 26		ora $26,x			ora DStack+1,x
.993f	d0 25		bne $9966			bne _have_unconverted_chars
.9941	20 12 c3	jsr $c312			jsr Two_Drop		; ( addr-t u-t 0 0 ud )
.9944	20 52 be	jsr $be52			jsr D_To_S		; ( addr-t u-t 0 0 u )
.9947	20 6f cc	jsr $cc6f			jsr Not_Rot		; ( addr-t u-t u 0 0 )
.994a	e8		inx				inx
.994b	e8		inx				inx			; ( addr-t u-t u 0 ) drop through
.994c					_line_number_only_from_external:
.994c	20 63 cd	jsr $cd63			jsr Swap		; ( addr-t u-t 0 u )
.994f	20 2d 9d	jsr $9d2d			jsr ed_is_valid_line
.9952	b0 03		bcs $9957			bcs +
.9954	4c 00 9d	jmp $9d00			jmp ed_error_2drop
.9957					+
.9957	20 63 cd	jsr $cd63			jsr Swap		; ( addr-t u-t u 0 )
.995a	20 8d 9d	jsr $9d8d			jsr ed_para1_to_cur
.995d	a9 80		lda #$80			lda #%10000000
.995f	05 23		ora $23				ora ed_flags
.9961	85 23		sta $23				sta ed_flags
.9963	4c e5 9b	jmp $9be5			jmp ed_cmd_p_from_external
.9966					_have_unconverted_chars:
.9966	a5 06		lda $06				lda ciblen+0
.9968	d5 25		cmp $25,x			cmp DStack+0,x
.996a	d0 16		bne $9982			bne _no_command_yet
.996c	a5 07		lda $07				lda ciblen+1
.996e	d5 26		cmp $26,x			cmp DStack+1,x
.9970	d0 10		bne $9982			bne _no_command_yet
.9972	8a		txa				txa
.9973	18		clc				clc
.9974	69 08		adc #$08			adc #8
.9976	aa		tax				tax			; ( addr-t u-t 0 0 )
.9977	a9 7f		lda #$7f			lda #$ff-%10000000
.9979	25 23		and $23				and ed_flags
.997b	85 23		sta $23				sta ed_flags
.997d	a0 00		ldy #$00			ldy #0
.997f	4c 14 9a	jmp $9a14			jmp _check_command
.9982					_no_command_yet:
.9982	20 ca cc	jsr $ccca			jsr To_R		; >R ( ... 0 0 ud addr2 ) (R: u2)
.9985	20 6f cc	jsr $cc6f			jsr Not_Rot		; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.9988	20 52 be	jsr $be52			jsr D_To_S		; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.998b	b5 25		lda $25,x			lda DStack+0,x		; LSB
.998d	95 2b		sta $2b,x			sta DStack+6,x
.998f	b5 26		lda $26,x			lda DStack+1,x		; MSB
.9991	95 2c		sta $2c,x			sta DStack+7,x		; ( ... para1 0 addr2 para1 ) (R: u2)
.9993	e8		inx				inx
.9994	e8		inx				inx			; ( addr-t u-t para1 0 addr2 ) (R: u2)
.9995	20 e9 cc	jsr $cce9			jsr R_From		; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.9998	a9 80		lda #$80			lda #%10000000
.999a	05 23		ora $23				ora ed_flags
.999c	85 23		sta $23				sta ed_flags
.999e					_check_for_para2:
.999e	a1 27		lda ($27,x)			lda (DStack+2,x)
.99a0	c9 2c		cmp #$2c			cmp #','
.99a2	f0 0c		beq $99b0			beq _got_comma
.99a4	38		sec				sec
.99a5	a5 06		lda $06				lda ciblen
.99a7	f5 25		sbc $25,x			sbc DStack+0,x
.99a9	a8		tay				tay
.99aa	20 12 c3	jsr $c312			jsr Two_Drop		; Remove the leftover stuff from >NUMBER
.99ad	4c 14 9a	jmp $9a14			jmp _check_command
.99b0					_got_comma:
.99b0	20 51 c8	jsr $c851			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr2+1 u2 )
.99b3	20 21 c8	jsr $c821			jsr One_Minus		; ( addr-t u-t para1 0 addr2+1 u2-1 )
.99b6	a1 27		lda ($27,x)			lda (DStack+2,x)
.99b8	c9 24		cmp #$24			cmp #'$'
.99ba	d0 16		bne $99d2			bne _para2_not_dollar
.99bc	38		sec				sec
.99bd	a5 06		lda $06				lda ciblen
.99bf	f5 27		sbc $27,x			sbc DStack+2,x
.99c1	a8		tay				tay
.99c2	c8		iny				iny
.99c3	98		tya				tya
.99c4	48		pha				pha
.99c5	8a		txa				txa
.99c6	18		clc				clc
.99c7	69 06		adc #$06			adc #6
.99c9	aa		tax				tax			; ( addr-t u-t para1 )
.99ca	20 4e 9d	jsr $9d4e			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.99cd	68		pla				pla
.99ce	a8		tay				tay
.99cf	4c 14 9a	jmp $9a14			jmp _check_command
.99d2					_para2_not_dollar:
.99d2	20 ca cc	jsr $ccca			jsr To_R		; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.99d5	20 31 b6	jsr $b631			jsr Zero		; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.99d8	20 31 b6	jsr $b631			jsr Zero		; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.99db	20 49 cc	jsr $cc49			jsr Rot		; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.99de	20 e9 cc	jsr $cce9			jsr R_From		; R> ( ... para1 0 0 0 addr2+1 u2-1)
.99e1	20 45 cd	jsr $cd45			jsr Dup		; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.99e4	20 ca cc	jsr $ccca			jsr To_R		; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.99e7	20 82 ae	jsr $ae82			jsr To_Number	; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.99ea	20 45 cd	jsr $cd45			jsr Dup		; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.99ed	20 e9 cc	jsr $cce9			jsr R_From		; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.99f0	20 0f c6	jsr $c60f			jsr Equal		; = ( ... para1 0 ud addr3 u3 f )
.99f3	b5 25		lda $25,x			lda DStack+0,x
.99f5	15 26		ora $26,x			ora DStack+1,x
.99f7	f0 08		beq $9a01			beq _second_number
.99f9	8a		txa				txa
.99fa	18		clc				clc
.99fb	69 0c		adc #$0c			adc #12
.99fd	aa		tax				tax			; back to ( addr-t u-t )
.99fe	4c 04 9d	jmp $9d04			jmp ed_error
.9a01					_second_number:
.9a01	e8		inx				inx
.9a02	e8		inx				inx			; ( addr-t u-t para1 0 ud addr3 u3 )
.9a03	38		sec				sec
.9a04	a5 06		lda $06				lda ciblen
.9a06	f5 25		sbc $25,x			sbc DStack+0,x
.9a08	48		pha				pha
.9a09	20 12 c3	jsr $c312			jsr Two_drop		; 2DROP ( addr-t u-t para1 0 ud )
.9a0c	20 52 be	jsr $be52			jsr D_To_S		; D>S  ( addr-t u-t para1 0 para2 )
.9a0f	20 6c c7	jsr $c76c			jsr Nip			; NIP ( addr-t u-t para1 para2 )
.9a12	68		pla				pla
.9a13	a8		tay				tay
.9a14					_check_command:
.9a14	24 23		bit $23				bit ed_flags
.9a16	30 08		bmi $9a20			bmi _check_command_have_arg
.9a18	a5 21		lda $21				lda ed_cur+0
.9a1a	95 27		sta $27,x			sta DStack+2,x
.9a1c	a5 22		lda $22				lda ed_cur+1
.9a1e	95 28		sta $28,x			sta DStack+3,x
.9a20					_check_command_have_arg:
.9a20	b1 04		lda ($04),y			lda (cib),y		; get mystery char from input
.9a22	85 15		sta $15				sta tmp1+0
.9a24	85 16		sta $16				sta tmp1+1		; We need X for awhile, so it has to
.9a26	a2 ff		ldx #$ff			ldx #$ff		; for each char
.9a28	e8		inx		_cmd_loop:	inx			;   next char
.9a29	bd b5 9d	lda $9db5,x			lda ed_cmd_list,x
.9a2c	f0 13		beq $9a41			beq _illegal_command	;   end of list?
.9a2e	c5 15		cmp $15				cmp tmp1+0
.9a30	d0 f6		bne $9a28			bne _cmd_loop		;   not found?
.9a32	8a		txa				txa
.9a33	0a		asl a				asl
.9a34	aa		tax				tax			; X * 2 for table
.9a35	bd c1 9d	lda $9dc1,x			lda ed_cmd_table+1,x
.9a38	48		pha				pha
.9a39	bd c0 9d	lda $9dc0,x			lda ed_Cmd_table+0,x
.9a3c	48		pha				pha
.9a3d	a6 16		ldx $16				ldx tmp1+1		; restore X
.9a3f	08		php				php
.9a40	40		rti				rti			; jump to command routine
.9a41					_illegal_command:
.9a41	4c 00 9d	jmp $9d00			jmp ed_error_2drop
.9a44					ed_next_command:
.9a44	20 12 c3	jsr $c312			jsr Two_Drop		; ( addr-t u-t ) Fall through
.9a47					_next_command_empty:
.9a47	4c 62 98	jmp $9862			jmp ed_input_loop
.9a4a					ed_all_done:
.9a4a	a9 00		lda #$00			lda #0
.9a4c	85 06		sta $06				sta ciblen
.9a4e	85 07		sta $07				sta ciblen+1
.9a50	20 12 c3	jsr $c312			jsr Two_drop			; ( addr-t u-t )
.9a53	a5 24		lda $24				lda editor3+1
.9a55	8d 00 03	sta $0300			sta base
.9a58	60		rts				rts
.9a59					ed_cmd_a:
.9a59	e8		inx				inx
.9a5a	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9a5b					ed_entry_cmd_i:
.9a5b					ed_cmd_a_have_para:
.9a5b	20 72 9d	jsr $9d72			jsr ed_num_to_addr	  ;  ( addr-t u-t addr1 )
.9a5e	20 ce a9	jsr $a9ce			jsr CR
.9a61					_next_string_loop:
.9a61	20 12 9d	jsr $9d12			jsr ed_get_input
.9a64	a0 00		ldy #$00			ldy #0
.9a66	b1 04		lda ($04),y			lda (cib),y
.9a68	c9 2e		cmp #$2e			cmp #'.'
.9a6a	d0 18		bne $9a84			bne _add_line
.9a6c	a4 06		ldy $06				ldy ciblen
.9a6e	c0 01		cpy #$01			cpy #1
.9a70	d0 12		bne $9a84			bne _add_line
.9a72	a4 07		ldy $07				ldy ciblen+1
.9a74	d0 0e		bne $9a84			bne _add_line
.9a76	e8		inx				inx
.9a77	e8		inx				inx
.9a78	a9 40		lda #$40			lda #%01000000
.9a7a	05 23		ora $23				ora ed_flags
.9a7c	85 23		sta $23				sta ed_flags
.9a7e	20 ce a9	jsr $a9ce			jsr CR
.9a81	4c 62 98	jmp $9862			jmp ed_input_loop
.9a84					_add_line:
.9a84	20 45 cd	jsr $cd45			jsr Dup			; ( addr-t u-t addr1 addr1 )
.9a87	20 13 c8	jsr $c813			jsr Here		; ( addr-t u-t addr1 addr1 here )
.9a8a	20 63 cd	jsr $cd63			jsr Swap		; ( addr-t u-t addr1 here addr1 )
.9a8d	20 af cc	jsr $ccaf			jsr Fetch		; ( addr-t u-t addr1 here addr2 )
.9a90	20 fb ca	jsr $cafb			jsr Comma		; ( addr-t u-t addr1 here )
.9a93	20 c0 ca	jsr $cac0			jsr Tuck		; TUCK ( addr-t u-t here addr1 here )
.9a96	20 63 cd	jsr $cd63			jsr Swap		; ( addr-t u-t here here addr1 )
.9a99	20 92 cc	jsr $cc92			jsr Store		; ( addr-t u-t here )
.9a9c	20 13 c8	jsr $c813			jsr Here		; HERE ( addr-t u-t here here2)
.9a9f	a9 04		lda #$04			lda #4
.9aa1	20 22 b6	jsr $b622			jsr PushZA
.9aa4	20 ec be	jsr $beec			jsr Allot
.9aa7	e6 21		inc $21				inc ed_cur
.9aa9	d0 02		bne $9aad			bne +
.9aab	e6 22		inc $22				inc ed_cur+1
.9aad					+
.9aad	20 13 c8	jsr $c813			jsr Here	; ( addr-t u-t here here2 here3 )
.9ab0	a5 04		lda $04				lda cib+0
.9ab2	a4 05		ldy $05				ldy cib+1
.9ab4	20 e0 b5	jsr $b5e0			jsr PushYA	; ( addr-t u-t here here2 here3 cib )
.9ab7	20 1c cd	jsr $cd1c			jsr Over	; ( addr-t u-t here here2 here3 cib here3 )
.9aba	a5 06		lda $06				lda ciblen+0
.9abc	a4 07		ldy $07				ldy ciblen+1
.9abe	20 e0 b5	jsr $b5e0			jsr PushYA	; ( addr-t u-t here here2 here3 cib here3 ciblen )
.9ac1	20 de ab	jsr $abde			jsr Move	; ( addr-t u-t here here2 here3 )
.9ac4	18		clc				clc
.9ac5	a5 00		lda $00				lda cp
.9ac7	65 06		adc $06				adc ciblen
.9ac9	85 00		sta $00				sta cp
.9acb	90 06		bcc $9ad3			bcc +
.9acd	a5 01		lda $01				lda cp+1
.9acf	65 07		adc $07				adc ciblen+1
.9ad1	85 01		sta $01				sta cp+1
.9ad3					+
.9ad3	20 1c cd	jsr $cd1c			jsr Over		; ( addr-t u-t here here2 here3 here2 )
.9ad6	20 92 cc	jsr $cc92			jsr Store		; ( addr-t u-t here here2 )
.9ad9	a9 02		lda #$02			lda #2
.9adb	20 f6 c7	jsr $c7f6			jsr plus_a		; ( addr-t u-t here here2+2 )
.9ade	20 45 cd	jsr $cd45			jsr Dup			; ( addr-t u-t here here2+2 here2+2 )
.9ae1	a5 06		lda $06				lda ciblen
.9ae3	95 27		sta $27,x			sta DStack+2,x
.9ae5	a5 07		lda $07				lda ciblen+1
.9ae7	95 28		sta $28,x			sta DStack+3,x		; ( addr-t u-t here ciblen here2+2 )
.9ae9	20 92 cc	jsr $cc92			jsr Store		; ( addr-t u-t here )
.9aec	20 ce a9	jsr $a9ce			jsr CR			; Add a line feed for visuals
.9aef	4c 61 9a	jmp $9a61			jmp _next_string_loop
.9af2					ed_cmd_d:
.9af2	20 21 9d	jsr $9d21			jsr ed_have_text
.9af5	20 64 9d	jsr $9d64			jsr ed_no_line_zero
.9af8	b5 25		lda $25,x			lda DStack+0,x
.9afa	15 26		ora $26,x			ora DStack+1,x
.9afc	d0 09		bne $9b07			bne +
.9afe	20 1c cd	jsr $cd1c			jsr Over		; ( addr-t u-t para1 0 para1 )
.9b01	20 3c 9b	jsr $9b3c			jsr _cmd_d_common	; ( addr-t u-t para1 0 )
.9b04	4c 30 9b	jmp $9b30			jmp _cmd_d_done
.9b07					+
.9b07	20 2d 9d	jsr $9d2d			jsr ed_is_valid_line	  ; result is in C flag
.9b0a	b0 03		bcs $9b0f			bcs _cmd_d_loop
.9b0c	4c 00 9d	jmp $9d00			jmp ed_error_2drop
.9b0f					_cmd_d_loop:
.9b0f	b5 25		lda $25,x			lda DStack+0,x		; para1 > para2 ?
.9b11	d5 27		cmp $27,x			cmp DStack+2,x
.9b13	b5 26		lda $26,x			lda DStack+1,x
.9b15	f5 28		sbc $28,x			sbc DStack+3,x
.9b17	90 0c		bcc $9b25			bcc _cmd_d_done_with_flag
.9b19	20 45 cd	jsr $cd45			jsr Dup		; DUP ( addr-t u-t para1 para2 para2 )
.9b1c	20 3c 9b	jsr $9b3c			jsr _cmd_d_common	; ( addr-t u-t para1 para2 )
.9b1f	20 21 c8	jsr $c821			jsr One_minus	; 1- ( addr-t u-t para1 para2-1 )
.9b22	4c 0f 9b	jmp $9b0f			jmp _cmd_d_loop
.9b25					_cmd_d_done_with_flag:
.9b25	20 2d c8	jsr $c82d			jsr NOS_One_Minus
.9b28	b5 27		lda $27,x			lda DStack+2,x
.9b2a	85 21		sta $21				sta ed_cur
.9b2c	b5 28		lda $28,x			lda DStack+3,x
.9b2e	85 22		sta $22				sta ed_cur+1		; drop through to _cmd_d_done
.9b30					_cmd_d_done:
.9b30	a9 40		lda #$40			lda #%01000000
.9b32	05 23		ora $23				ora ed_flags
.9b34	85 23		sta $23				sta ed_flags
.9b36	20 ce a9	jsr $a9ce			jsr CR
.9b39	4c 44 9a	jmp $9a44			jmp ed_next_command
.9b3c					_cmd_d_common:
.9b3c	20 45 cd	jsr $cd45			jsr Dup			; ( addr-t u-t u u )
.9b3f	20 72 9d	jsr $9d72			jsr ed_num_to_addr	; ( addr-t u-t u addr )
.9b42	20 af cc	jsr $ccaf			jsr Fetch		; ( addr-t u-t u addr1 )
.9b45	20 63 cd	jsr $cd63			jsr Swap		; ( addr-t u-t addr1 u )
.9b48	20 21 c8	jsr $c821			jsr One_minus		; ( addr-t u-t addr1 u-1 )
.9b4b	20 72 9d	jsr $9d72			jsr ed_num_to_addr	; ( addr-t u-t addr1 addr-1 )
.9b4e	4c 92 cc	jmp $cc92			jmp Store		; ( addr-t u-t )
.9b51					ed_cmd_equ:
.9b51	a5 1f		lda $1f				lda ed_head
.9b53	05 20		ora $20				ora ed_head+1
.9b55	d0 06		bne $9b5d			bne _cmd_equ_have_text
.9b57	20 31 b6	jsr $b631			jsr Zero		; ( addr-t u-t para1 para2 0 )
.9b5a	4c 7d 9b	jmp $9b7d			jmp _cmd_equ_done
.9b5d					_cmd_equ_have_text:
.9b5d	20 64 9d	jsr $9d64			jsr ed_no_line_zero
.9b60	24 23		bit $23				bit ed_flags
.9b62	30 0a		bmi $9b6e			bmi _cmd_equ_have_para
.9b64	a5 21		lda $21				lda ed_cur+0		; ( addr-t u-t para1 para2 ? )
.9b66	a4 22		ldy $22				ldy ed_cur+1
.9b68	20 e0 b5	jsr $b5e0			jsr PushYA
.9b6b	4c 7d 9b	jmp $9b7d			jmp _cmd_equ_done	; ( addr-t u-t para1 para2 cur )
.9b6e					_cmd_equ_have_para:
.9b6e	b5 25		lda $25,x			lda DStack+0,x
.9b70	15 26		ora $26,x			ora DStack+1,x
.9b72	d0 06		bne $9b7a			bne _cmd_equ_two_paras
.9b74	20 1c cd	jsr $cd1c			jsr Over		; ( addr-t u-t para1 para2 para1)
.9b77	4c 7d 9b	jmp $9b7d			jmp _cmd_equ_done
.9b7a					_cmd_equ_two_paras:
.9b7a	20 45 cd	jsr $cd45			jsr Dup			; ( addr-t u-t para1 para2 para2) drop through
.9b7d					_cmd_equ_done:
.9b7d	20 ce a9	jsr $a9ce			jsr CR			; number goes on new line
.9b80	20 f4 c9	jsr $c9f4			jsr U_Dot		; ( addr-t u-t para1 para2 )
.9b83	20 ce a9	jsr $a9ce			jsr CR
.9b86	4c 44 9a	jmp $9a44			jmp ed_next_command
.9b89					ed_cmd_f:
.9b89	24 23		bit $23				bit ed_flags
.9b8b	30 18		bmi $9ba5			bmi _cmd_f_have_para
.9b8d	20 ce a9	jsr $a9ce			jsr CR
.9b90	20 ca cc	jsr $ccca			jsr To_R		; ( addr-t u-t 0 ) ( R: 0 )
.9b93	20 49 cc	jsr $cc49			jsr Rot			; ( u-t 0 addr-t ) ( R: 0 )
.9b96	20 45 cd	jsr $cd45			jsr Dup			; ( u-t 0 addr-t addr-t ) ( R: 0 )
.9b99	20 f4 c9	jsr $c9f4			jsr U_Dot		; ( u-t 0 addr-t ) ( R: 0 )
.9b9c	20 6f cc	jsr $cc6f			jsr Not_Rot		; ( addr-t u-t 0 ) ( R: 0 )
.9b9f	20 e9 cc	jsr $cce9			jsr R_From		; ( addr-t u-t 0 0 )
.9ba2	4c b6 9b	jmp $9bb6			jmp _cmd_f_done
.9ba5					_cmd_f_have_para:
.9ba5	20 1c cd	jsr $cd1c			jsr Over
.9ba8	20 ce a9	jsr $a9ce			jsr CR
.9bab	20 f4 c9	jsr $c9f4			jsr U_Dot
.9bae	b5 27		lda $27,x			lda DStack+2,x
.9bb0	95 2b		sta $2b,x			sta DStack+6,x
.9bb2	b5 28		lda $28,x			lda DStack+3,x
.9bb4	95 2c		sta $2c,x			sta DStack+7,x		; fall through to _cmd_f_done
.9bb6					_cmd_f_done:
.9bb6	20 ce a9	jsr $a9ce			jsr CR
.9bb9	4c 44 9a	jmp $9a44			jmp ed_next_command
.9bbc					ed_cmd_i:
.9bbc	e8		inx				inx
.9bbd	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9bbe	24 23		bit $23				bit ed_flags
.9bc0	30 08		bmi $9bca			bmi _cmd_i_have_para
.9bc2	a5 21		lda $21				lda ed_cur
.9bc4	95 25		sta $25,x			sta DStack+0,x
.9bc6	a5 22		lda $22				lda ed_cur+1
.9bc8	95 26		sta $26,x			sta DStack+1,x		;  ( addr-t u-t cur ) drop through
.9bca					_cmd_i_have_para:
.9bca	b5 25		lda $25,x			lda DStack+0,x
.9bcc	15 26		ora $26,x			ora DStack+1,x
.9bce	f0 09		beq $9bd9			beq _cmd_i_done
.9bd0	20 21 c8	jsr $c821			jsr One_minus		; ( addr-t u-t para1-1 )
.9bd3	20 31 b6	jsr $b631			jsr Zero		; ( addr-t u-t para1-1 0 )
.9bd6	20 51 c7	jsr $c751			jsr Max			; ( addr-t u-t para1-1 | 0 )
.9bd9					_cmd_i_done:
.9bd9	4c 5b 9a	jmp $9a5b			jmp ed_entry_cmd_i
.9bdc					ed_cmd_n:
.9bdc	a9 01		lda #$01			lda #%00000001
.9bde	05 23		ora $23				ora ed_flags
.9be0	85 23		sta $23				sta ed_flags
.9be2	4c eb 9b	jmp $9beb			jmp ed_cmd_p_entry_for_cmd_n
.9be5					ed_cmd_p:
.9be5					ed_cmd_p_from_external:
.9be5	a9 fe		lda #$fe			lda #$ff-%00000001
.9be7	25 23		and $23				and ed_flags
.9be9	85 23		sta $23				sta ed_flags
.9beb					ed_cmd_p_entry_for_cmd_n:
.9beb	20 21 9d	jsr $9d21			jsr ed_have_text
.9bee	20 64 9d	jsr $9d64			jsr ed_no_line_zero
.9bf1	20 ce a9	jsr $a9ce			jsr CR
.9bf4	b5 25		lda $25,x			lda DStack+0,x
.9bf6	15 26		ora $26,x			ora DStack+1,x
.9bf8	d0 11		bne $9c0b			bne _cmd_p_loop
.9bfa	b5 27		lda $27,x			lda DStack+2,x
.9bfc	85 21		sta $21				sta ed_cur
.9bfe	b5 28		lda $28,x			lda DStack+3,x
.9c00	85 22		sta $22				sta ed_cur+1
.9c02	20 1c cd	jsr $cd1c			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9c05	20 2c 9c	jsr $9c2c			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9c08	4c 29 9c	jmp $9c29			jmp _cmd_p_all_done
.9c0b					_cmd_p_loop:
.9c0b	b5 25		lda $25,x			lda DStack+0,x		; para1 > para2 ?
.9c0d	d5 27		cmp $27,x			cmp DStack+2,x
.9c0f	b5 26		lda $26,x			lda DStack+1,x
.9c11	f5 28		sbc $28,x			sbc DStack+3,x
.9c13	90 0c		bcc $9c21			bcc _cmd_p_done
.9c15	20 1c cd	jsr $cd1c			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9c18	20 2c 9c	jsr $9c2c			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9c1b	20 51 c8	jsr $c851			jsr NOS_One_Plus
.9c1e	4c 0b 9c	jmp $9c0b			jmp _cmd_p_loop
.9c21					_cmd_p_done:
.9c21	b5 25		lda $25,x			lda DStack+0,x
.9c23	85 21		sta $21				sta ed_cur
.9c25	b5 26		lda $26,x			lda DStack+1,x
.9c27	85 22		sta $22				sta ed_cur+1
.9c29					_cmd_p_all_done:
.9c29	4c 44 9a	jmp $9a44			jmp ed_next_command
.9c2c					_cmd_p_common:
.9c2c	a5 23		lda $23				lda ed_flags
.9c2e	4a		lsr a				lsr			; bit 0 now in carry
.9c2f	90 0b		bcc $9c3c			bcc _cmd_p_common_no_num
.9c31	20 45 cd	jsr $cd45			jsr Dup			; ( addr-t u-t para1 para1 )
.9c34	20 f4 c9	jsr $c9f4			jsr U_Dot		; ( addr-t u-t para1 )
.9c37	a9 09		lda #$09			lda #AscHT
.9c39	20 b3 cb	jsr $cbb3			jsr Emit_A
.9c3c					_cmd_p_common_no_num:
.9c3c	20 72 9d	jsr $9d72			jsr ed_num_to_addr	  ; ( addr-t u-t addr )
.9c3f	4c 96 9d	jmp $9d96			jmp ed_print_addr
.9c42					ed_cmd_q:
.9c42	24 23		bit $23				bit ed_flags		; bit 6 is change flag
.9c44	50 03		bvc $9c49			bvc +
.9c46	4c 00 9d	jmp $9d00			jmp ed_error_2drop
.9c49					+
.9c49	4c 4a 9a	jmp $9a4a			jmp ed_all_done		   ; can't fall thru because of PLX
.9c4c					ed_cmd_qq:
.9c4c	4c 4a 9a	jmp $9a4a			jmp ed_all_done
.9c4f					ed_cmd_w:
.9c4f	20 21 9d	jsr $9d21			jsr ed_have_text
.9c52	24 23		bit $23				bit ed_flags
.9c54	30 14		bmi $9c6a			bmi _cmd_w_have_para
.9c56	b5 2b		lda $2b,x			lda DStack+6,x
.9c58	15 2c		ora $2c,x			ora DStack+7,x
.9c5a	d0 03		bne $9c5f			bne +
.9c5c	4c 00 9d	jmp $9d00			jmp ed_error_2drop
.9c5f					+
.9c5f	b5 2b		lda $2b,x			lda DStack+6,x
.9c61	95 27		sta $27,x			sta DStack+2,x
.9c63	b5 2c		lda $2c,x			lda DStack+7,x
.9c65	95 28		sta $28,x			sta DStack+3,x		; ( addr-t u-t addr-t ? )
.9c67	4c 72 9c	jmp $9c72			jmp _cmd_w_para_ready
.9c6a					_cmd_w_have_para:
.9c6a	b5 27		lda $27,x			lda DStack+2,x
.9c6c	95 2b		sta $2b,x			sta DStack+6,x
.9c6e	b5 28		lda $28,x			lda DStack+3,x
.9c70	95 2c		sta $2c,x			sta DStack+7,x		; drop through to _cmd_w_para_ready
.9c72					_cmd_w_para_ready:
.9c72	a9 1f		lda #$1f			lda #<ed_head
.9c74	95 25		sta $25,x			sta DStack+0,x
.9c76	a9 00		lda #$00			lda #>ed_head
.9c78	95 26		sta $26,x			sta DStack+1,x		; ( addr-t u-t addr-t addr-h )
.9c7a	20 1c cd	jsr $cd1c			jsr Over		; ( addr-t u-t addr-t addr-h addr-t )
.9c7d	20 ca cc	jsr $ccca			jsr To_R		; ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.9c80					_cmd_w_loop:
.9c80	20 af cc	jsr $ccaf			jsr Fetch		; ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.9c83	b5 25		lda $25,x			lda DStack+0,x
.9c85	15 26		ora $26,x			ora DStack+1,x
.9c87	f0 51		beq $9cda			beq _cmd_w_eol
.9c89	20 9f ca	jsr $ca9f			jsr Two_dup		; ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.9c8c	20 25 c4	jsr $c425			jsr Two_to_r		; ( addr-t addr-1 ) (R: ... )
.9c8f	a9 02		lda #$02			lda #2
.9c91	20 f6 c7	jsr $c7f6			jsr plus_a		; ( addr-t addr1+2 ) (R: ... )
.9c94	20 45 cd	jsr $cd45			jsr Dup			; ( addr-t addr1+2 addr1+2 ) ( R: ... )
.9c97	20 af cc	jsr $ccaf			jsr Fetch		; ( addr-t addr1+2 addr-s ) ( R: ... )
.9c9a	20 63 cd	jsr $cd63			jsr Swap		; ( addr-t addr-s addr1+2 ) ( R: ... )
.9c9d	a9 02		lda #$02			lda #2
.9c9f	20 f6 c7	jsr $c7f6			jsr plus_a		; ( addr-t addr-s addr1+2 ) (R: ... )
.9ca2	20 af cc	jsr $ccaf			jsr Fetch		; ( addr-t addr-s u-s ) ( R: ... )
.9ca5	20 6f cc	jsr $cc6f			jsr Not_Rot		; ( u-s addr-t addr-s ) ( R: ... )
.9ca8	20 63 cd	jsr $cd63			jsr Swap		; ( u-s addr-s addr-t ) ( R: ... )
.9cab	20 49 cc	jsr $cc49			jsr Rot			; (addr-s addr-t u-s ) ( R: ... )
.9cae	20 45 cd	jsr $cd45			jsr Dup			; (addr-s addr-t u-s u-s ) ( R: ... )
.9cb1	20 ca cc	jsr $ccca			jsr To_R		; (addr-s addr-t u-s ) ( R: ... u-s )
.9cb4	20 de ab	jsr $abde			jsr Move		; ( )( R: addr-t addr-1 addr-t )
.9cb7	20 e9 cc	jsr $cce9			jsr R_From		; ( u-s )  ( R: addr-t addr-h addr-t )
.9cba	20 00 c4	jsr $c400			jsr Two_r_from		; ( u-s addr-t addr-h ) ( R: addr-t )
.9cbd	20 6f cc	jsr $cc6f			jsr Not_Rot		; ( addr-h u-s addr-t ) ( R: addr-t )
.9cc0	20 8f c9	jsr $c98f			jsr Plus		; ( addr-h addr-t1 ) ( R: addr-t )
.9cc3	20 45 cd	jsr $cd45			jsr Dup			; ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.9cc6	a9 0a		lda #$0a			lda #AscLF
.9cc8	20 22 b6	jsr $b622			jsr PushZA		; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.9ccb	20 63 cd	jsr $cd63			jsr Swap		; ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.9cce	20 92 cc	jsr $cc92			jsr Store		; ( addr-h addr-t1 ) ( R: addr-t )
.9cd1	20 47 c8	jsr $c847			jsr One_plus		; ( addr-h addr-t1+1 ) ( R: addr-t )
.9cd4	20 63 cd	jsr $cd63			jsr Swap		; ( addr-t1+1 addr-h ) ( R: addr-t )
.9cd7	4c 80 9c	jmp $9c80			jmp _cmd_w_loop
.9cda					_cmd_w_eol:
.9cda	20 63 cd	jsr $cd63			jsr Swap		; ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.9cdd	20 e9 cc	jsr $cce9			jsr R_From		; ( addr-t u-t addr-n addr-tn addr-t )
.9ce0	20 a8 c9	jsr $c9a8			jsr Minus		; ( addr-t u-t addr-n u )
.9ce3	b5 25		lda $25,x			lda DStack+0,x
.9ce5	95 29		sta $29,x			sta DStack+4,x
.9ce7	b5 26		lda $26,x			lda DStack+1,x
.9ce9	95 2a		sta $2a,x			sta DStack+5,x		; ( addr-t u addr-n u )
.9ceb	20 ce a9	jsr $a9ce			jsr CR
.9cee	20 45 cd	jsr $cd45			jsr Dup			; ( addr-t u addr-n u u )
.9cf1	20 f4 c9	jsr $c9f4			jsr U_Dot		; ( addr-t u addr-n u )
.9cf4	20 ce a9	jsr $a9ce			jsr CR
.9cf7	a9 bf		lda #$bf			lda #$ff-%01000000
.9cf9	25 23		and $23				and ed_flags
.9cfb	85 23		sta $23				sta ed_flags
.9cfd	4c 44 9a	jmp $9a44			jmp ed_next_command
.9d00					ed_error_2drop:
.9d00	e8		inx				inx			; Drop para2
.9d01	e8		inx				inx
.9d02					ed_error_1drop:
.9d02	e8		inx				inx			; Drop para1
.9d03	e8		inx				inx
.9d04					ed_error:
.9d04	20 ce a9	jsr $a9ce			jsr CR
.9d07	a9 3f		lda #$3f			lda #'?'
.9d09	20 b3 cb	jsr $cbb3			jsr Emit_A
.9d0c	20 ce a9	jsr $a9ce			jsr CR
.9d0f	4c 62 98	jmp $9862			jmp ed_input_loop
.9d12					ed_get_input:
.9d12	20 85 c0	jsr $c085			jsr Refill		;  ( addr-t u-t f )
.9d15	b5 25		lda $25,x			lda DStack+0,x
.9d17	d0 05		bne $9d1e			bne +
.9d19	68		pla				pla
.9d1a	68		pla				pla
.9d1b	4c 02 9d	jmp $9d02			jmp ed_error_1drop
.9d1e					+
.9d1e	e8		inx				inx
.9d1f	e8		inx				inx
.9d20	60		rts				rts
.9d21					ed_have_text:
.9d21	a5 1f		lda $1f				lda ed_head
.9d23	05 20		ora $20				ora ed_head+1
.9d25	d0 05		bne $9d2c			bne +
.9d27	68		pla				pla
.9d28	68		pla				pla
.9d29	4c 04 9d	jmp $9d04			jmp ed_error
.9d2c					+
.9d2c	60		rts				rts
.9d2d					ed_is_valid_line:
.9d2d	38		sec				sec				; default is legal line number
.9d2e	b5 25		lda $25,x			lda DStack+0,x
.9d30	15 26		ora $26,x			ora DStack+1,x
.9d32	f0 18		beq $9d4c			beq _nope_zero	; ( n )
.9d34	20 45 cd	jsr $cd45			jsr Dup				; ( n n )
.9d37	20 4e 9d	jsr $9d4e			jsr ed_last_line		; ( n n last )
.9d3a	20 63 cd	jsr $cd63			jsr Swap			; ( n last n )
.9d3d	20 45 c6	jsr $c645			jsr Less_Than			; ( n f )
.9d40	b5 25		lda $25,x			lda DStack+0,x			; 0 flag is good
.9d42	15 26		ora $26,x			ora DStack+1,x
.9d44	d0 04		bne $9d4a			bne _too_small
.9d46	e8		inx				inx
.9d47	e8		inx				inx			; DROP flag ( n )
.9d48	38		sec				sec			; signal valid
.9d49	60		rts				rts
.9d4a					_too_small:
.9d4a	e8		inx				inx
.9d4b	e8		inx				inx
.9d4c					_nope_zero:
.9d4c	18		clc				clc			; signal not valid
.9d4d	60		rts				rts
.9d4e					ed_last_line:
.9d4e	20 31 b6	jsr $b631			jsr Zero		; Set counter to zero
.9d51	a9 1f		lda #$1f			lda #ed_head
.9d53	20 22 b6	jsr $b622			jsr PushZA		; ( count addr )
.9d56					_loop:
.9d56	20 af cc	jsr $ccaf			jsr Fetch		; ( count addr|0 )
.9d59	b5 26		lda $26,x			lda DStack+1,x		; at end-of-list?
.9d5b	f0 06		beq $9d63			beq _done
.9d5d	20 51 c8	jsr $c851			jsr NOS_One_Plus	; Increase counter
.9d60	4c 56 9d	jmp $9d56			jmp _loop		; continue
.9d63					_done:
.9d63	60		rts				rts
.9d64					ed_no_line_zero:
.9d64	b5 27		lda $27,x			lda DStack+2,x
.9d66	15 28		ora $28,x			ora DStack+3,x
.9d68	d0 07		bne $9d71			bne _done
.9d6a	24 23		bit $23				bit ed_flags
.9d6c	10 03		bpl $9d71			bpl _done
.9d6e	4c 00 9d	jmp $9d00			jmp ed_error_2drop
.9d71					_done:
.9d71	60		rts				rts
.9d72					ed_num_to_addr:
.9d72	a9 1f		lda #$1f			lda #ed_head
.9d74	20 22 b6	jsr $b622			jsr PushZA		; ( u addr-h )
.9d77	4c 84 9d	jmp $9d84			jmp _test
.9d7a					_loop:
.9d7a	20 af cc	jsr $ccaf			jsr Fetch		; @ ( u addr1 )
.9d7d	b5 26		lda $26,x			lda DStack+1,x		; at end of list?
.9d7f	f0 09		beq $9d8a			beq _finished
.9d81	20 2d c8	jsr $c82d			jsr NOS_One_Minus	; decrement the line count
.9d84	b5 27		lda $27,x	_test:		lda DStack+2,x		; is the nth element we're looking for?
.9d86	15 28		ora $28,x			ora DStack+3,x
.9d88	d0 f0		bne $9d7a			bne _loop
.9d8a					_finished:
.9d8a	4c 6c c7	jmp $c76c			jmp Nip			; ( addr )
.9d8d					ed_para1_to_cur:
.9d8d	b5 27		lda $27,x			lda DStack+2,x
.9d8f	85 21		sta $21				sta ed_cur
.9d91	b5 28		lda $28,x			lda DStack+3,x
.9d93	85 22		sta $22				sta ed_cur+1
.9d95	60		rts				rts
.9d96					ed_print_addr:
.9d96	a9 02		lda #$02			lda #2
.9d98	20 f6 c7	jsr $c7f6			jsr plus_a		; ( addr+2 )
.9d9b	20 45 cd	jsr $cd45			jsr Dup			; ( addr+2 addr+2 )
.9d9e	a9 02		lda #$02			lda #2
.9da0	20 f6 c7	jsr $c7f6			jsr plus_a		; ( addr+2 addr+4 )
.9da3	20 af cc	jsr $ccaf			jsr Fetch		; ( addr+2 u-s )
.9da6	20 63 cd	jsr $cd63			jsr Swap		; ( u-s addr+2 )
.9da9	20 af cc	jsr $ccaf			jsr Fetch		; ( u-s addr-s )
.9dac	20 63 cd	jsr $cd63			jsr Swap		; ( addr-s u-s )
.9daf	20 cd cb	jsr $cbcd			jsr Type
.9db2	4c ce a9	jmp $a9ce			jmp CR
>9db5	61 66 69 64 70 6e 3d 77		ed_cmd_list:	.text "afidpn=wqQ", 0
>9dbd	71 51 00
.9dc0					ed_cmd_table:
>9dc0	59 9a 89 9b bc 9b f2 9a				.word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>9dc8	e5 9b dc 9b
>9dcc	51 9b 4f 9c 42 9c 4c 9c				.word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.9dd4					ed6502_end:
>9dd4	53 65 65			L1:	.text "See"	;  name of word as a string, ending at wh_NameLastChar
>9dd7	03					.byte *-L1	;wh_NameLength	length of name
>9dd8	bd 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9dda	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9ddb	08					.byte NN	;wh_Flags	dictionary flags
=40279					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9ddc					See:
.9ddc	20 9a ba	jsr $ba9a			jsr Tick_Nt		; ( nt )
.9ddf	20 ce a9	jsr $a9ce			jsr CR
.9de2	ad 00 03	lda $0300			lda base		; Save the current number base
.9de5	48		pha				pha
.9de6	a9 37		lda #$37			lda #<str_see_nt	; print nt
.9de8	a0 d9		ldy #$d9			ldy #>str_see_nt
.9dea	20 ee cb	jsr $cbee			jsr Print_ASCIIZ_YA_no_lf
.9ded	20 45 cd	jsr $cd45			jsr Dup			; ( nt nt )
.9df0	20 5b a7	jsr $a75b			jsr Dot_Hex
.9df3	20 c0 cb	jsr $cbc0			jsr Space		; ( nt )
.9df6	20 45 cd	jsr $cd45			jsr Dup			; ( nt nt )
.9df9	20 04 bc	jsr $bc04			jsr Name_To_Int		; ( nt xt )
.9dfc	a9 3d		lda #$3d			lda #<str_see_xt	; print xt
.9dfe	a0 d9		ldy #$d9			ldy #>str_see_xt
.9e00	20 ee cb	jsr $cbee			jsr Print_ASCIIZ_YA_no_lf
.9e03	20 45 cd	jsr $cd45			jsr Dup			; ( nt xt xt )
.9e06	20 5b a7	jsr $a75b			jsr Dot_Hex
.9e09	20 ce a9	jsr $a9ce			jsr CR			; ( nt xt )
.9e0c	a9 30		lda #$30			lda #<str_see_flags
.9e0e	a0 d9		ldy #$d9			ldy #>str_see_flags
.9e10	20 ee cb	jsr $cbee			jsr Print_ASCIIZ_YA_no_lf
.9e13	20 1c cd	jsr $cd1c			jsr Over		; ( nt xt nt )
.9e16	a9 84		lda #$84			lda #Wh_Flags
.9e18	20 f6 c7	jsr $c7f6			jsr plus_a		; ( nt xt ^flags )
.9e1b	a1 25		lda ($25,x)			lda (DStack+0,x)	; ( nt xt ^flags )
.9e1d	95 25		sta $25,x			sta DStack+0,x		; ( nt xt flags )
.9e1f	a0 0e		ldy #$0e			ldy #2*7		; for bit 7..0
.9e21	20 c0 cb	jsr $cbc0	_flag_loop:	jsr Space
.9e24	b9 70 9e	lda $9e70,y			lda _FlagLabels+0,y	;   print label
.9e27	20 b3 cb	jsr $cbb3			jsr Emit_A
.9e2a	b9 71 9e	lda $9e71,y			lda _FlagLabels+1,y
.9e2d	20 b3 cb	jsr $cbb3			jsr Emit_A
.9e30	a9 3d		lda #$3d			lda #'='
.9e32	20 b3 cb	jsr $cbb3			jsr Emit_A
.9e35	16 25		asl $25,x			asl DStack+0,x		;   c = flag, rotate the rest
.9e37	a9 00		lda #$00			lda #0
.9e39	69 30		adc #$30			adc #'0'
.9e3b	20 b3 cb	jsr $cbb3			jsr Emit_A
.9e3e	88		dey				dey
.9e3f	88		dey				dey
.9e40	10 df		bpl $9e21			bpl _flag_loop
.9e42	e8		inx				inx
.9e43	e8		inx				inx			; ( nt xt )
.9e44	20 ce a9	jsr $a9ce			jsr CR
.9e47	a9 43		lda #$43			lda #<str_see_size	; print size
.9e49	a0 d9		ldy #$d9			ldy #>str_see_size
.9e4b	20 ee cb	jsr $cbee			jsr Print_ASCIIZ_YA_no_lf
.9e4e	20 63 cd	jsr $cd63			jsr Swap		; ( xt nt )
.9e51	20 82 a9	jsr $a982			jsr WordSize		; ( xt u )
.9e54	20 45 cd	jsr $cd45			jsr Dup			; ( xt u u ) for DUMP and DISASM
.9e57	20 01 b0	jsr $b001			jsr Decimal
.9e5a	20 f4 c9	jsr $c9f4			jsr U_Dot		; ( xt u )
.9e5d	20 ce a9	jsr $a9ce			jsr CR
.9e60	68		pla				pla			; restore base
.9e61	8d 00 03	sta $0300			sta base
.9e64	20 9f ca	jsr $ca9f			jsr Two_dup
.9e67	20 b3 a6	jsr $a6b3			jsr Dump		; dump
.9e6a	20 ce a9	jsr $a9ce			jsr CR
.9e6d	4c 6b d6	jmp $d66b			jmp DisAsm		; disassemble
=148					CL	.var *-(WordListLink+wh_Xt)
=$9e70					en = *	; remember here
>9dda	94					.byte CL	;wh_CodeLength
>9e70	43 4f 41 4e 49 4d 4e 4e		_FlagLabels:	.text "COANIMNNUF__R6__"
>9e78	55 46 5f 5f 52 36 5f 5f
>9e80	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9e88	72 64 4c 69 73 74
>9e8e	0e					.byte *-L1	;wh_NameLength	length of name
>9e8f	57 9d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9e91	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9e92	08					.byte NN	;wh_Flags	dictionary flags
=40462					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9e93	4c 31 b6	jmp $b631	Forth_WordList:	jmp Zero
=3					CL	.var *-(WordListLink+wh_Xt)
=$9e96					en = *	; remember here
>9e91	03					.byte CL	;wh_CodeLength
>9e96	45 64 69 74 6f 72 2d 57		L1:	.text "Editor-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9e9e	6f 72 64 4c 69 73 74
>9ea5	0f					.byte *-L1	;wh_NameLength	length of name
>9ea6	0e 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9ea8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9ea9	08					.byte NN	;wh_Flags	dictionary flags
=40485					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9eaa					Editor_WordList:
.9eaa	4c 3b b6	jmp $b63b			jmp One
=3					CL	.var *-(WordListLink+wh_Xt)
=$9ead					en = *	; remember here
>9ea8	03					.byte CL	;wh_CodeLength
>9ead	41 73 73 65 6d 62 6c 65		L1:	.text "Assembler-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9eb5	72 2d 57 6f 72 64 4c 69 73 74
>9ebf	12					.byte *-L1	;wh_NameLength	length of name
>9ec0	25 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9ec2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9ec3	08					.byte NN	;wh_Flags	dictionary flags
=40511					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9ec4					Assembler_WordList:
.9ec4	4c 45 b6	jmp $b645			jmp Two
=3					CL	.var *-(WordListLink+wh_Xt)
=$9ec7					en = *	; remember here
>9ec2	03					.byte CL	;wh_CodeLength
>9ec7	52 6f 6f 74 2d 57 6f 72		L1:	.text "Root-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>9ecf	64 6c 69 73 74
>9ed4	0d					.byte *-L1	;wh_NameLength	length of name
>9ed5	3f 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9ed7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9ed8	08					.byte NN	;wh_Flags	dictionary flags
=40532					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9ed9	a9 03		lda #$03	Root_WordList:	lda #wid_Root
.9edb	4c 22 b6	jmp $b622			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$9ede					en = *	; remember here
>9ed7	05					.byte CL	;wh_CodeLength
>9ede	4f 6e 6c 79			L1:	.text "Only"	;  name of word as a string, ending at wh_NameLastChar
>9ee2	04					.byte *-L1	;wh_NameLength	length of name
>9ee3	54 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9ee5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9ee6	08					.byte NN	;wh_Flags	dictionary flags
=40546					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9ee7	20 00 b6	jsr $b600	Only:		jsr True	; Push -1
.9eea	4c 52 a0	jmp $a052			jmp Set_Order	; set the minimum search order.
=6					CL	.var *-(WordListLink+wh_Xt)
=$9eed					en = *	; remember here
>9ee5	06					.byte CL	;wh_CodeLength
>9eed	41 6c 73 6f			L1:	.text "Also"	;  name of word as a string, ending at wh_NameLastChar
>9ef1	04					.byte *-L1	;wh_NameLength	length of name
>9ef2	62 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9ef4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9ef5	08					.byte NN	;wh_Flags	dictionary flags
=40561					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9ef6	20 8a a0	jsr $a08a	Also:		jsr Get_Order
.9ef9	20 1c cd	jsr $cd1c			jsr Over
.9efc	20 63 cd	jsr $cd63			jsr Swap
.9eff	20 47 c8	jsr $c847			jsr One_plus
.9f02	4c 52 a0	jmp $a052			jmp Set_Order
=15					CL	.var *-(WordListLink+wh_Xt)
=$9f05					en = *	; remember here
>9ef4	0f					.byte CL	;wh_CodeLength
>9f05	50 72 65 76 69 6f 75 73		L1:	.text "Previous"	;  name of word as a string, ending at wh_NameLastChar
>9f0d	08					.byte *-L1	;wh_NameLength	length of name
>9f0e	71 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f10	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f11	08					.byte NN	;wh_Flags	dictionary flags
=40589					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f12	20 8a a0	jsr $a08a	Previous:	jsr Get_Order
.9f15	20 6c c7	jsr $c76c			jsr Nip
.9f18	20 21 c8	jsr $c821			jsr One_minus
.9f1b	4c 52 a0	jmp $a052			jmp Set_Order
=12					CL	.var *-(WordListLink+wh_Xt)
=$9f1e					en = *	; remember here
>9f10	0c					.byte CL	;wh_CodeLength
>9f1e	3e 4f 72 64 65 72		L1:	.text ">Order"	;  name of word as a string, ending at wh_NameLastChar
>9f24	06					.byte *-L1	;wh_NameLength	length of name
>9f25	8d 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f27	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f28	08					.byte NN	;wh_Flags	dictionary flags
=40612					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f29					To_Order:
.9f29	20 ca cc	jsr $ccca			jsr To_R		; Put the wid on the return stack for now.
.9f2c	20 8a a0	jsr $a08a			jsr Get_Order		; Get the current search order.
.9f2f	20 e9 cc	jsr $cce9			jsr R_From		; Get back the wid and add it to the list.
.9f32	20 63 cd	jsr $cd63			jsr Swap
.9f35	20 47 c8	jsr $c847			jsr One_plus
.9f38	4c 52 a0	jmp $a052			jmp Set_Order		; Set the search order with the new list.
=18					CL	.var *-(WordListLink+wh_Xt)
=$9f3b					en = *	; remember here
>9f27	12					.byte CL	;wh_CodeLength
>9f3b	4f 72 64 65 72			L1:	.text "Order"	;  name of word as a string, ending at wh_NameLastChar
>9f40	05					.byte *-L1	;wh_NameLength	length of name
>9f41	a4 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f43	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f44	08					.byte NN	;wh_Flags	dictionary flags
=40640					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f45					Order:
.9f45	20 ce a9	jsr $a9ce			jsr CR
.9f48	a0 00		ldy #$00			ldy #0			; for each search_orderV[]
.9f4a	f0 0b		beq $9f57			beq _test
.9f4c	98		tya		_loop:		tya
.9f4d	48		pha				pha
.9f4e	b9 2b 03	lda $032b,y			lda Search_orderV,y
.9f51	20 62 9f	jsr $9f62			jsr order_print_wid_string   ; internal helper function
.9f54	68		pla				pla
.9f55	a8		tay				tay
.9f56	c8		iny				iny			;  next
.9f57	cc 2a 03	cpy $032a	_test:		cpy Num_orderV
.9f5a	90 f0		bcc $9f4c			bcc _loop
.9f5c	20 ce a9	jsr $a9ce			jsr CR
.9f5f	ad 10 03	lda $0310			lda CurrentV		; print the current wordlist.
.9f62					order_print_wid_string:
.9f62	c9 04		cmp #$04			cmp #wid_Root+1		; do we have a string?
.9f64	90 06		bcc $9f6c			bcc _string
.9f66	20 22 b6	jsr $b622			jsr PushZA		; print the WID number
.9f69	4c f4 c9	jmp $c9f4			jmp U_Dot		; JSR/RTS
.9f6c	0a		asl a		_string:	asl		; Get the string based on WID 0 to 3
.9f6d	a8		tay				tay
.9f6e	b9 7a 9f	lda $9f7a,y			lda _wid_Table+0,y
.9f71	48		pha				pha
.9f72	b9 7b 9f	lda $9f7b,y			lda _wid_Table+1,y
.9f75	a8		tay				tay
.9f76	68		pla				pla
.9f77	4c ee cb	jmp $cbee			jmp Print_ASCIIZ_YA_no_lf ; Print without a line feed
=53					CL	.var *-(WordListLink+wh_Xt)
=$9f7a					en = *	; remember here
>9f43	35					.byte CL	;wh_CodeLength
.9f7a					_wid_Table:
>9f7a	23 d9					.word str_wid_forth	       ; WID 0: "Forth"
>9f7c	1b d9					.word str_wid_editor	       ; WID 1: "Editor"
>9f7e	10 d9					.word str_wid_asm	       ; WID 2: "Assembler"
>9f80	2a d9					.word str_wid_root	       ; WID 3: "Root"
>9f82	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
>9f87	05					.byte *-L1	;wh_NameLength	length of name
>9f88	c0 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f8a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f8b	08					.byte NN	;wh_Flags	dictionary flags
=40711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f8c	a9 00		lda #$00	Forth:		lda #wid_Forth
.9f8e	8d 2b 03	sta $032b			sta Search_OrderV+0
=5					CL	.var *-(WordListLink+wh_Xt)
=$9f91					en = *	; remember here
>9f8a	05					.byte CL	;wh_CodeLength
.9f91	60		rts				rts
>9f92	44 65 66 69 6e 69 74 69		L1:	.text "Definitions"	;  name of word as a string, ending at wh_NameLastChar
>9f9a	6f 6e 73
>9f9d	0b					.byte *-L1	;wh_NameLength	length of name
>9f9e	07 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fa0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fa1	08					.byte NN	;wh_Flags	dictionary flags
=40733					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9fa2	ad 2b 03	lda $032b	Definitions:	lda Search_OrderV	; Transfer SEARCH_ORDER[0] to
.9fa5	8d 10 03	sta $0310			sta CurrentV		;   byte variable CURRENT.
=6					CL	.var *-(WordListLink+wh_Xt)
=$9fa8					en = *	; remember here
>9fa0	06					.byte CL	;wh_CodeLength
.9fa8	60		rts				rts
>9fa9	57 6f 72 64 4c 69 73 74		L1:	.text "WordList"	;  name of word as a string, ending at wh_NameLastChar
>9fb1	08					.byte *-L1	;wh_NameLength	length of name
>9fb2	1d 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fb4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fb5	08					.byte NN	;wh_Flags	dictionary flags
=40753					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9fb6					WordList:
.9fb6	ad 11 03	lda $0311			lda Num_wordlistsV	; This is a byte variable
.9fb9	c9 0c		cmp #$0c			cmp #max_wordlists	; already at the max?
.9fbb	90 05		bcc $9fc2			bcc +
.9fbd	a9 66		lda #$66			lda #$100+err_wordlist	;   Print an error message
.9fbf	4c bf b2	jmp $b2bf			jmp ThrowA
.9fc2					+
.9fc2	69 01		adc #$01			adc #1
.9fc4	8d 11 03	sta $0311			sta Num_WordlistsV	; Save it into byte variable #wordlists
.9fc7	4c 22 b6	jmp $b622			jmp PushZA		; and put it on the stack.
=20					CL	.var *-(WordListLink+wh_Xt)
=$9fca					en = *	; remember here
>9fb4	14					.byte CL	;wh_CodeLength
>9fca	53 65 61 72 63 68 2d 57		L1:	.text "Search-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>9fd2	6f 72 64 6c 69 73 74
>9fd9	0f					.byte *-L1	;wh_NameLength	length of name
>9fda	31 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fdc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fdd	18					.byte UF+NN	;wh_Flags	dictionary flags
=40793					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9fde					Search_WordList:
.9fde	20 a8 b2	jsr $b2a8			jsr underflow_3
.9fe1	b5 25		lda $25,x			lda DStack+0,x			; Pop wid
.9fe3	e8		inx				inx
.9fe4	e8		inx				inx
.9fe5	48		pha				pha
.9fe6	20 43 bb	jsr $bb43			jsr fina_pattern_prepare ; tmp2 = pseudo-header for pattern name, zeros NOS
.9fe9	68		pla				pla
.9fea	20 59 bb	jsr $bb59			jsr fina_search_wordlist ; tmp1 = nt of matching word
.9fed	f0 25		beq $a014			beq _fail
.9fef	18		clc				clc
.9ff0	a5 15		lda $15				lda tmp1+0		; NOS = xt
.9ff2	69 85		adc #$85			adc #Wh_xt
.9ff4	95 27		sta $27,x			sta DStack+2,x
.9ff6	a5 16		lda $16				lda tmp1+1
.9ff8	69 00		adc #$00			adc #0
.9ffa	95 28		sta $28,x			sta DStack+3,x
.9ffc	a0 84		ldy #$84			ldy #Wh_Flags		; get flags
.9ffe	b1 15		lda ($15),y			lda (tmp1),y
.a000	29 04		and #$04			and #IM
.a002	d0 07		bne $a00b			bne _immediate		; bit set, we're immediate
.a004	a9 ff		lda #$ff			lda #$FF		; We're not immediate, return -1
.a006	95 25		sta $25,x			sta DStack+0,x
.a008	95 26		sta $26,x			sta DStack+1,x
.a00a	60		rts				rts
.a00b					_immediate:
.a00b	a9 01		lda #$01			lda #1			; We're immediate, return 1
.a00d	95 25		sta $25,x			sta DStack+0,x
.a00f	a9 00		lda #$00			lda #0
.a011	95 26		sta $26,x			sta DStack+1,x
.a013	60		rts				rts
.a014					_fail:
.a014	e8		inx				inx			; Drop u
.a015	e8		inx				inx
.a016	60		rts				rts
=57					CL	.var *-(WordListLink+wh_Xt)
=$a017					en = *	; remember here
>9fdc	39					.byte CL	;wh_CodeLength
>a017	53 65 74 2d 43 75 72 72		L1:	.text "Set-Current"	;  name of word as a string, ending at wh_NameLastChar
>a01f	65 6e 74
>a022	0b					.byte *-L1	;wh_NameLength	length of name
>a023	59 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a025	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a026	08					.byte NN	;wh_Flags	dictionary flags
=40866					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a027	20 34 b2	jsr $b234	Set_Current:	jsr PopA	; pop wid
.a02a	8d 10 03	sta $0310			sta CurrentV	; so only the LSB is used.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a02d					en = *	; remember here
>a025	06					.byte CL	;wh_CodeLength
.a02d	60		rts				rts
>a02e	47 65 74 2d 43 75 72 72		L1:	.text "Get-Current"	;  name of word as a string, ending at wh_NameLastChar
>a036	65 6e 74
>a039	0b					.byte *-L1	;wh_NameLength	length of name
>a03a	a2 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a03c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a03d	08					.byte NN	;wh_Flags	dictionary flags
=40889					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a03e					Get_Current:
.a03e	ad 10 03	lda $0310			lda CurrentV
.a041	4c 22 b6	jmp $b622			jmp PushZA	; CURRENT is a byte variable
=6					CL	.var *-(WordListLink+wh_Xt)
=$a044					en = *	; remember here
>a03c	06					.byte CL	;wh_CodeLength
>a044	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>a04c	72
>a04d	09					.byte *-L1	;wh_NameLength	length of name
>a04e	b9 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a050	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a051	00					.byte 0	;wh_Flags	dictionary flags
=40909					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a052					Set_Order:
.a052	b5 26		lda $26,x			lda DStack+1,x		; Test for -1 TOS
.a054	10 0b		bpl $a061			bpl _start
.a056	a9 00		lda #$00			lda #0
.a058	95 26		sta $26,x			sta DStack+1,x
.a05a	a9 03		lda #$03			lda #wid_Root
.a05c	95 25		sta $25,x			sta DStack+0,x
.a05e	20 3b b6	jsr $b63b			jsr One		; Count is 1.
.a061					_start:
.a061	b5 25		lda $25,x			lda DStack+0,x
.a063	99 2a 03	sta $032a,y			sta Num_orderV,y	; #ORDER is a byte variable.
.a066	85 15		sta $15				sta tmp1	; Save a copy for zero check and looping.
.a068	e8		inx				inx		; Drop the count off the data stack.
.a069	e8		inx				inx
.a06a	a5 15		lda $15				lda tmp1
.a06c	f0 0d		beq $a07b			beq _done	; If zero, there are no wordlists.
.a06e	a0 00		ldy #$00			ldy #0
.a070					_loop:
.a070	20 34 b2	jsr $b234			jsr PopA		; The search order is a byte array
.a073	99 2b 03	sta $032b,y			sta Search_OrderV,y	; so only save the LSB
.a076	c8		iny				iny
.a077	c6 15		dec $15				dec tmp1
.a079	d0 f5		bne $a070			bne _loop
.a07b					_done:
=41					CL	.var *-(WordListLink+wh_Xt)
=$a07b					en = *	; remember here
>a050	29					.byte CL	;wh_CodeLength
.a07b	60		rts				rts
>a07c	47 65 74 2d 4f 72 64 65		L1:	.text "Get-Order"	;  name of word as a string, ending at wh_NameLastChar
>a084	72
>a085	09					.byte *-L1	;wh_NameLength	length of name
>a086	cd 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a088	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a089	08					.byte NN	;wh_Flags	dictionary flags
=40965					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a08a					Get_Order:
.a08a	ac 2a 03	ldy $032a			ldy Num_OrderV	; Get #ORDER - the number of wordlists in the search order.
.a08d	f0 09		beq $a098			beq _done	; If zero, there are no wordlists.
.a08f					_loop:
.a08f	b9 2a 03	lda $032a,y			lda Search_OrderV-1,y	; Put that wordlist id on the stack.
.a092	20 22 b6	jsr $b622			jsr PushZA
.a095	88		dey				dey
.a096	d0 f7		bne $a08f			bne _loop		; See if that was the last one to process (first in the list).
.a098					_done:
.a098	ad 2a 03	lda $032a			lda Num_OrderV		; Put the number of items on the stack.
.a09b	4c 22 b6	jmp $b622			jmp PushZA
=20					CL	.var *-(WordListLink+wh_Xt)
=$a09e					en = *	; remember here
>a088	14					.byte CL	;wh_CodeLength
>0338					BuffBlockNumV: .word ?	; Block number current in BlockBuffer
>033a					BuffStatusV: .word ?	; Status of BlockBuffer (bit 0 = used, bit 1 = dirty)
>033c					BlockBuffer: .fill 1024
>073c					BlockReadV: .word ?	; Vector to block reading routine
>073e					BlockWriteV: .word ?	; Vector to block writing routine
.a09e					BlockInit:
.a09e	a9 00		lda #$00			lda #0
.a0a0	8d 3a 03	sta $033a			sta BuffStatusV
.a0a3	a9 00		lda #$00			lda #<Block_Word_Error
.a0a5	a0 a2		ldy #$a2			ldy #>Block_Word_Error
.a0a7	8d 3c 07	sta $073c			sta BlockReadV+0
.a0aa	8c 3d 07	sty $073d			sty BlockReadV+1
.a0ad	8d 3e 07	sta $073e			sta BlockWriteV+0
.a0b0	8c 3f 07	sty $073f			sty BlockWriteV+1
.a0b3	60		rts				rts
>0740					RamDriveV: .word ?
>a0b4	42 6c 6f 63 6b 2d 52 61		L1:	.text "Block-RamDrive-Init"	;  name of word as a string, ending at wh_NameLastChar
>a0bc	6d 44 72 69 76 65 2d 49 6e 69 74
>a0c7	13					.byte *-L1	;wh_NameLength	length of name
>a0c8	05 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0ca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0cb	18					.byte UF+NN	;wh_Flags	dictionary flags
=41031					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0cc					Block_RamDrive_Init:
.a0cc	a9 0a		lda #$0a			lda #10			; Calculate how many bytes are needed for numblocks blocks
.a0ce	20 22 b6	jsr $b622			jsr PushZA
.a0d1	20 2b c9	jsr $c92b			jsr LShift
.a0d4	20 13 c8	jsr $c813			jsr Here		; ( size addr )
.a0d7	8d 40 07	sta $0740			sta RamDriveV+0
.a0da	8c 41 07	sty $0741			sty RamDriveV+1
.a0dd	20 1c cd	jsr $cd1c			jsr Over
.a0e0	20 ec be	jsr $beec			jsr Allot		; Create ramdrive buffer
.a0e3	20 63 cd	jsr $cd63			jsr Swap		; blank the buffer
.a0e6	20 62 bc	jsr $bc62			jsr Blank
.a0e9	a9 fe		lda #$fe			lda #<_read		; set block read vector
.a0eb	a0 a0		ldy #$a0			ldy #>_read
.a0ed	8d 3c 07	sta $073c			sta BlockReadV+0
.a0f0	8c 3d 07	sty $073d			sty BlockReadV+1
.a0f3	a9 0e		lda #$0e			lda #<_write		; set block write vector
.a0f5	a0 a1		ldy #$a1			ldy #>_write
.a0f7	8d 3e 07	sta $073e			sta BlockWriteV+0
.a0fa	8c 3f 07	sty $073f			sty BlockWriteV+1
.a0fd	60		rts				rts
=50					CL	.var *-(WordListLink+wh_Xt)
=$a0fe					en = *	; remember here
>a0ca	32					.byte CL	;wh_CodeLength
.a0fe					_read:
.a0fe	20 1b a1	jsr $a11b			jsr _addr
.a101	20 63 cd	jsr $cd63			jsr Swap
.a104	a9 00		lda #$00			lda #0
.a106	a0 04		ldy #$04			ldy #>1024
.a108	20 e0 b5	jsr $b5e0			jsr PushYA
.a10b	4c de ab	jmp $abde			jmp Move
.a10e					_write:
.a10e	20 1b a1	jsr $a11b			jsr _addr
.a111	a9 00		lda #$00			lda #0
.a113	a0 04		ldy #$04			ldy #>1024
.a115	20 e0 b5	jsr $b5e0			jsr PushYA
.a118	4c de ab	jmp $abde			jmp Move
.a11b					_addr:
.a11b	a9 0a		lda #$0a			lda #10
.a11d	20 22 b6	jsr $b622			jsr PushZA
.a120	20 2b c9	jsr $c92b			jsr LShift
.a123	20 36 a1	jsr $a136			jsr RamDrive
.a126	4c 8f c9	jmp $c98f			jmp Plus
>a129	52 61 6d 44 72 69 76 65		L1:	.text "RamDrive"	;  name of word as a string, ending at wh_NameLastChar
>a131	08					.byte *-L1	;wh_NameLength	length of name
>a132	47 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a134	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a135	08					.byte NN	;wh_Flags	dictionary flags
=41137					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a136	ad 40 07	lda $0740	RamDrive:	lda RamDriveV+0
.a139	ac 41 07	ldy $0741			ldy RamDriveV+1
.a13c	4c e0 b5	jmp $b5e0			jmp PushYA
=9					CL	.var *-(WordListLink+wh_Xt)
=$a13f					en = *	; remember here
>a134	09					.byte CL	;wh_CodeLength
>a13f	42 75 66 66 53 74 61 74		L1:	.text "BuffStatus"	;  name of word as a string, ending at wh_NameLastChar
>a147	75 73
>a149	0a					.byte *-L1	;wh_NameLength	length of name
>a14a	b1 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a14c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a14d	08					.byte NN	;wh_Flags	dictionary flags
=41161					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a14e	a9 3a		lda #$3a	BuffStatus:	lda #<BuffStatusV
.a150	a0 03		ldy #$03			ldy #>BuffStatusV
.a152	4c e0 b5	jmp $b5e0			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a155					en = *	; remember here
>a14c	07					.byte CL	;wh_CodeLength
>a155	42 75 66 66 42 6c 6f 63		L1:	.text "BuffBlockNum"	;  name of word as a string, ending at wh_NameLastChar
>a15d	6b 4e 75 6d
>a161	0c					.byte *-L1	;wh_NameLength	length of name
>a162	c9 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a164	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a165	08					.byte NN	;wh_Flags	dictionary flags
=41185					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a166	a9 38		lda #$38	BuffBlockNum:	lda #<BuffBlockNumV
.a168	a0 03		ldy #$03			ldy #>BuffBlockNumV
.a16a	4c e0 b5	jmp $b5e0			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a16d					en = *	; remember here
>a164	07					.byte CL	;wh_CodeLength
>a16d	42 6c 6b 42 75 66 66 65		L1:	.text "BlkBuffer"	;  name of word as a string, ending at wh_NameLastChar
>a175	72
>a176	09					.byte *-L1	;wh_NameLength	length of name
>a177	e1 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a179	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a17a	08					.byte NN	;wh_Flags	dictionary flags
=41206					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a17b	a9 3c		lda #$3c	BlkBuffer:	lda #<BlockBuffer
.a17d	a0 03		ldy #$03			ldy #>BlockBuffer
.a17f	4c e0 b5	jmp $b5e0			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a182					en = *	; remember here
>a179	07					.byte CL	;wh_CodeLength
>a182	53 63 72			L1:	.text "Scr"	;  name of word as a string, ending at wh_NameLastChar
>a185	03					.byte *-L1	;wh_NameLength	length of name
>a186	f6 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a188	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a189	08					.byte NN	;wh_Flags	dictionary flags
=41221					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a18a	a9 0e		lda #$0e	Scr:		lda #<ScrV
.a18c	a0 03		ldy #$03			ldy #>ScrV
.a18e	4c e0 b5	jmp $b5e0			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a191					en = *	; remember here
>a188	07					.byte CL	;wh_CodeLength
>a191	42 6c 6b			L1:	.text "Blk"	;  name of word as a string, ending at wh_NameLastChar
>a194	03					.byte *-L1	;wh_NameLength	length of name
>a195	05 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a197	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a198	08					.byte NN	;wh_Flags	dictionary flags
=41236					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a199	a9 0c		lda #$0c	Blk:		lda #<BlkV
.a19b	a0 03		ldy #$03			ldy #>BlkV
.a19d	4c e0 b5	jmp $b5e0			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a1a0					en = *	; remember here
>a197	07					.byte CL	;wh_CodeLength
>a1a0	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write"	;  name of word as a string, ending at wh_NameLastChar
>a1a8	69 74 65
>a1ab	0b					.byte *-L1	;wh_NameLength	length of name
>a1ac	14 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1ae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1af	08					.byte NN	;wh_Flags	dictionary flags
=41259					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1b0	6c 3e 07	jmp ($073e)	Block_Write:	jmp (BlockWriteV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-(WordListLink+wh_Xt)
=$a1b3					en = *	; remember here
>a1ae	03					.byte CL	;wh_CodeLength
>a1b3	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a1bb	69 74 65 2d 56 65 63 74 6f 72
>a1c5	12					.byte *-L1	;wh_NameLength	length of name
>a1c6	2b a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1c8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1c9	08					.byte NN	;wh_Flags	dictionary flags
=41285					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1ca					Block_Write_Vector:
.a1ca	a9 3e		lda #$3e			lda #<BlockWriteV	; Get the BLOCK-WRITE-VECTOR address
.a1cc	a0 07		ldy #$07			ldy #>BlockWriteV
.a1ce	4c e0 b5	jmp $b5e0			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a1d1					en = *	; remember here
>a1c8	07					.byte CL	;wh_CodeLength
>a1d1	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read"	;  name of word as a string, ending at wh_NameLastChar
>a1d9	61 64
>a1db	0a					.byte *-L1	;wh_NameLength	length of name
>a1dc	45 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1df	08					.byte NN	;wh_Flags	dictionary flags
=41307					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1e0	6c 3c 07	jmp ($073c)	Block_Read:	jmp (BlockReadV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-(WordListLink+wh_Xt)
=$a1e3					en = *	; remember here
>a1de	03					.byte CL	;wh_CodeLength
>a1e3	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a1eb	61 64 2d 56 65 63 74 6f 72
>a1f4	11					.byte *-L1	;wh_NameLength	length of name
>a1f5	5b a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1f8	08					.byte NN	;wh_Flags	dictionary flags
=41332					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1f9					Block_Read_Vector:
.a1f9	a9 3c		lda #$3c			lda #<BlockReadV	; Get the BLOCK-READ-VECTOR address
.a1fb	a0 07		ldy #$07			ldy #>BlockReadV
.a1fd	4c e0 b5	jmp $b5e0			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a200					en = *	; remember here
>a1f7	07					.byte CL	;wh_CodeLength
.a200					Block_Word_Error:
.a200	a9 67		lda #$67			lda #$100+err_BlockWords
.a202	20 bf b2	jsr $b2bf			jsr ThrowA
>a205	53 61 76 65 2d 42 75 66		L1:	.text "Save-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a20d	66 65 72 73
>a211	0c					.byte *-L1	;wh_NameLength	length of name
>a212	74 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a214	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a215	00					.byte 0	;wh_Flags	dictionary flags
=41361					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a216					Save_Buffers:
.a216	ad 3a 03	lda $033a			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a219	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a21b	d0 11		bne $a22e			bne _done	; Either not used or not dirty = done!
.a21d	20 7b a1	jsr $a17b			jsr BlkBuffer
.a220	20 66 a1	jsr $a166			jsr BuffBlockNum
.a223	20 af cc	jsr $ccaf			jsr Fetch
.a226	20 b0 a1	jsr $a1b0			jsr Block_Write
.a229	a9 01		lda #$01			lda #1
.a22b	8d 3a 03	sta $033a			sta BuffStatusV+0
.a22e					_done:
=24					CL	.var *-(WordListLink+wh_Xt)
=$a22e					en = *	; remember here
>a214	18					.byte CL	;wh_CodeLength
.a22e	60		rts				rts
>a22f	42 6c 6f 63 6b			L1:	.text "Block"	;  name of word as a string, ending at wh_NameLastChar
>a234	05					.byte *-L1	;wh_NameLength	length of name
>a235	91 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a237	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a238	00					.byte 0	;wh_Flags	dictionary flags
=41396					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a239					Block:
.a239	ad 38 03	lda $0338			lda BuffBlockNumV+0	; check the LSB
.a23c	d5 25		cmp $25,x			cmp DStack+0,x
.a23e	d0 0e		bne $a24e			bne _not_in_buffer
.a240	ad 39 03	lda $0339			lda BuffBlockNumV+1	; check the MSB
.a243	d5 26		cmp $26,x			cmp DStack+1,x
.a245	d0 07		bne $a24e			bne _not_in_buffer
.a247	ad 3a 03	lda $033a			lda BuffStatusV+0
.a24a	29 01		and #$01			and #1		; Check the in-use flag (bit 0)
.a24c	d0 2d		bne $a27b			bne _done	; It's already in the buffer and in use.
.a24e					_not_in_buffer:
.a24e	ad 3a 03	lda $033a			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a251	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a253	d0 0c		bne $a261			bne _buffer_available ; Unused or not dirty = available
.a255	20 7b a1	jsr $a17b			jsr BlkBuffer
.a258	20 66 a1	jsr $a166			jsr BuffBlockNum
.a25b	20 af cc	jsr $ccaf			jsr Fetch
.a25e	20 b0 a1	jsr $a1b0			jsr Block_Write
.a261					_buffer_available:
.a261	b5 25		lda $25,x			lda DStack+0,x
.a263	8d 38 03	sta $0338			sta BuffBlockNumV+0
.a266	b5 26		lda $26,x			lda DStack+1,x
.a268	8d 39 03	sta $0339			sta BuffBlockNumV+1
.a26b	20 7b a1	jsr $a17b			jsr BlkBuffer
.a26e	20 63 cd	jsr $cd63			jsr Swap
.a271	20 e0 a1	jsr $a1e0			jsr Block_Read
.a274	a9 01		lda #$01			lda #1
.a276	8d 3a 03	sta $033a			sta BuffStatusV+0
.a279	ca		dex				dex
.a27a	ca		dex				dex
.a27b					_done:
.a27b	a9 3c		lda #$3c			lda #<BlockBuffer
.a27d	95 25		sta $25,x			sta DStack+0,x
.a27f	a9 03		lda #$03			lda #>BlockBuffer
.a281	95 26		sta $26,x			sta DStack+1,x
=74					CL	.var *-(WordListLink+wh_Xt)
=$a283					en = *	; remember here
>a237	4a					.byte CL	;wh_CodeLength
.a283	60		rts				rts
>a284	55 70 64 61 74 65		L1:	.text "Update"	;  name of word as a string, ending at wh_NameLastChar
>a28a	06					.byte *-L1	;wh_NameLength	length of name
>a28b	b4 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a28d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a28e	00					.byte 0	;wh_Flags	dictionary flags
=41482					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a28f					Update:
.a28f	ad 3a 03	lda $033a			lda BuffStatusV+0
.a292	09 02		ora #$02			ora #2		; Turn on dirty flag (bit 2)
.a294	8d 3a 03	sta $033a			sta BuffStatusV+0
=8					CL	.var *-(WordListLink+wh_Xt)
=$a297					en = *	; remember here
>a28d	08					.byte CL	;wh_CodeLength
.a297	60		rts				rts
>a298	42 75 66 66 65 72		L1:	.text "Buffer"	;  name of word as a string, ending at wh_NameLastChar
>a29e	06					.byte *-L1	;wh_NameLength	length of name
>a29f	0a a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a2a1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a2a2	00					.byte 0	;wh_Flags	dictionary flags
=41502					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2a3					Buffer:
.a2a3	ad 3a 03	lda $033a			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a2a6	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a2a8	d0 0c		bne $a2b6			bne _buffer_available ; Unused or not dirty = available
.a2aa	20 7b a1	jsr $a17b			jsr BlkBuffer
.a2ad	20 66 a1	jsr $a166			jsr BuffBlockNum
.a2b0	20 af cc	jsr $ccaf			jsr Fetch
.a2b3	20 b0 a1	jsr $a1b0			jsr Block_Write
.a2b6					_buffer_available:
.a2b6	b5 25		lda $25,x			lda DStack+0,x
.a2b8	8d 38 03	sta $0338			sta BuffBlockNumV+0
.a2bb	b5 26		lda $26,x			lda DStack+1,x
.a2bd	8d 39 03	sta $0339			sta BuffBlockNumV+1
.a2c0	a9 01		lda #$01			lda #1
.a2c2	8d 3a 03	sta $033a			sta BuffStatusV+0
.a2c5					_done:
.a2c5	a9 3c		lda #$3c			lda #<BlockBuffer
.a2c7	95 25		sta $25,x			sta DStack+0,x
.a2c9	a9 03		lda #$03			lda #>BlockBuffer
.a2cb	95 26		sta $26,x			sta DStack+1,x
=42					CL	.var *-(WordListLink+wh_Xt)
=$a2cd					en = *	; remember here
>a2a1	2a					.byte CL	;wh_CodeLength
.a2cd	60		rts				rts
>a2ce	45 6d 70 74 79 2d 42 75		L1:	.text "Empty-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a2d6	66 66 65 72 73
>a2db	0d					.byte *-L1	;wh_NameLength	length of name
>a2dc	1e a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a2de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a2df	08					.byte NN	;wh_Flags	dictionary flags
=41563					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2e0	a9 00		lda #$00	Empty_Buffers:	lda #0		; Set the buffer status to empty.
.a2e2	8d 3a 03	sta $033a			sta BuffStatusV+0 ; Only LSB is used.
=5					CL	.var *-(WordListLink+wh_Xt)
=$a2e5					en = *	; remember here
>a2de	05					.byte CL	;wh_CodeLength
.a2e5	60		rts				rts
>a2e6	46 6c 75 73 68			L1:	.text "Flush"	;  name of word as a string, ending at wh_NameLastChar
>a2eb	05					.byte *-L1	;wh_NameLength	length of name
>a2ec	5b a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a2ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a2ef	08					.byte NN	;wh_Flags	dictionary flags
=41579					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2f0	20 16 a2	jsr $a216	Flush:		jsr Save_Buffers
.a2f3	4c e0 a2	jmp $a2e0			jmp Empty_Buffers
=6					CL	.var *-(WordListLink+wh_Xt)
=$a2f6					en = *	; remember here
>a2ee	06					.byte CL	;wh_CodeLength
>a2f6	4c 6f 61 64			L1:	.text "Load"	;  name of word as a string, ending at wh_NameLastChar
>a2fa	04					.byte *-L1	;wh_NameLength	length of name
>a2fb	6b a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a2fd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a2fe	10					.byte UF	;wh_Flags	dictionary flags
=41594					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2ff					Load:
.a2ff	20 8e b2	jsr $b28e			jsr underflow_1
.a302	ad 0d 03	lda $030d			lda BlkV+1	; Save the current value of BLK on the return stack.
.a305	48		pha				pha
.a306	ad 0c 03	lda $030c			lda BlkV+0
.a309	48		pha				pha
.a30a	b5 25		lda $25,x			lda DStack+0,x		; Set BLK to the given block/screen number.
.a30c	8d 0c 03	sta $030c			sta BlkV+0
.a30f	b5 26		lda $26,x			lda DStack+1,x
.a311	8d 0d 03	sta $030d			sta BlkV+1
.a314	20 39 a2	jsr $a239			jsr Block		; Load that block into a buffer
.a317	a9 00		lda #$00			lda #<1024		; screen length.
.a319	a0 04		ldy #$04			ldy #>1024
.a31b	20 e0 b5	jsr $b5e0			jsr PushYA
.a31e	20 34 ae	jsr $ae34			jsr load_evaluate
.a321	68		pla				pla
.a322	ad 0c 03	lda $030c			lda BlkV+0
.a325	68		pla				pla
.a326	8d 0d 03	sta $030d			sta BlkV+1
.a329	0d 0c 03	ora $030c			ora BlkV+0
.a32c	f0 0e		beq $a33c			beq _done
.a32e	ad 0c 03	lda $030c			lda BlkV+0
.a331	ac 0d 03	ldy $030d			ldy BlkV+1
.a334	20 e0 b5	jsr $b5e0			jsr PushYA
.a337	20 39 a2	jsr $a239			jsr Block
.a33a	e8		inx				inx		; Drop the buffer address.
.a33b	e8		inx				inx
.a33c					_done:
=61					CL	.var *-(WordListLink+wh_Xt)
=$a33c					en = *	; remember here
>a2fd	3d					.byte CL	;wh_CodeLength
.a33c	60		rts				rts
>a33d	54 68 72 75			L1:	.text "Thru"	;  name of word as a string, ending at wh_NameLastChar
>a341	04					.byte *-L1	;wh_NameLength	length of name
>a342	7a a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a344	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a345	18					.byte UF+NN	;wh_Flags	dictionary flags
=41665					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a346					Thru:
.a346	20 a3 b2	jsr $b2a3			jsr underflow_2
.a349	20 ca cc	jsr $ccca			jsr To_R
.a34c					_loop:
.a34c	b5 26		lda $26,x			lda DStack+1,x		; copy to return stack
.a34e	48		pha				pha
.a34f	b5 25		lda $25,x			lda DStack+0,x
.a351	48		pha				pha
.a352	20 ff a2	jsr $a2ff			jsr Load		; Load this screen.
.a355	20 e9 cc	jsr $cce9			jsr R_From		; Get the screen # we just loaded.
.a358	20 47 c8	jsr $c847			jsr One_plus		; increment
.a35b	86 15		stx $15				stx tmp1
.a35d	ba		tsx				tsx
.a35e	8a		txa				txa
.a35f	a8		tay				tay
.a360	a6 15		ldx $15				ldx tmp1
.a362	b9 01 01	lda $0101,y			lda RStack+1,y
.a365	d5 25		cmp $25,x			cmp DStack+0,x
.a367	b9 02 01	lda $0102,y			lda RStack+2,y
.a36a	f5 26		sbc $26,x			sbc DStack+1,x
.a36c	b0 de		bcs $a34c			bcs _loop
.a36e	e8		inx				inx			; Drop index
.a36f	e8		inx				inx
.a370	68		pla				pla			; RDrop limit
.a371	68		pla				pla
=44					CL	.var *-(WordListLink+wh_Xt)
=$a372					en = *	; remember here
>a344	2c					.byte CL	;wh_CodeLength
.a372	60		rts				rts
>a373	4c 69 73 74			L1:	.text "List"	;  name of word as a string, ending at wh_NameLastChar
>a377	04					.byte *-L1	;wh_NameLength	length of name
>a378	c1 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a37a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a37b	18					.byte UF+NN	;wh_Flags	dictionary flags
=41719					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a37c					List:
.a37c	20 8e b2	jsr $b28e			jsr underflow_1
.a37f	20 8a a1	jsr $a18a			jsr Scr
.a382	20 92 cc	jsr $cc92			jsr Store
.a385	4c d6 d7	jmp $d7d6			jmp Editor_l
=12					CL	.var *-(WordListLink+wh_Xt)
=$a388					en = *	; remember here
>a37a	0c					.byte CL	;wh_CodeLength
>a388	44 65 66 65 72			L1:	.text "Defer"	;  name of word as a string, ending at wh_NameLastChar
>a38d	05					.byte *-L1	;wh_NameLength	length of name
>a38e	f7 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a390	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a391	08					.byte NN	;wh_Flags	dictionary flags
=41741					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a392					Defer:
.a392	20 46 bf	jsr $bf46			jsr Header_Comma	; compile word header
.a395	a9 9f		lda #$9f			lda #<_undefined	; compile "jmp _undefined"
.a397	a0 a3		ldy #$a3			ldy #>_undefined
.a399	20 3a cb	jsr $cb3a			jsr Jmp_Comma_YA
.a39c	4c 31 ba	jmp $ba31			jmp adjust_z	; adjust header to correct length
=13					CL	.var *-(WordListLink+wh_Xt)
=$a39f					en = *	; remember here
>a390	0d					.byte CL	;wh_CodeLength
.a39f					_undefined:
.a39f	a9 6a		lda #$6a			lda #$100+err_Defer	; throw exception
.a3a1	4c bf b2	jmp $b2bf			jmp ThrowA
>a3a4	44 65 66 65 72 40		L1:	.text "Defer@"	;  name of word as a string, ending at wh_NameLastChar
>a3aa	06					.byte *-L1	;wh_NameLength	length of name
>a3ab	0d a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3ad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3ae	08					.byte NN	;wh_Flags	dictionary flags
=41770					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3af					Defer_Fetch:
.a3af	20 47 c8	jsr $c847			jsr One_plus
.a3b2	4c af cc	jmp $ccaf			jmp Fetch
=6					CL	.var *-(WordListLink+wh_Xt)
=$a3b5					en = *	; remember here
>a3ad	06					.byte CL	;wh_CodeLength
>a3b5	44 65 66 65 72 21		L1:	.text "Defer!"	;  name of word as a string, ending at wh_NameLastChar
>a3bb	06					.byte *-L1	;wh_NameLength	length of name
>a3bc	2a a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3bf	08					.byte NN	;wh_Flags	dictionary flags
=41787					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3c0					Defer_Store:
.a3c0	20 47 c8	jsr $c847			jsr One_plus
.a3c3	4c 92 cc	jmp $cc92			jmp Store
=6					CL	.var *-(WordListLink+wh_Xt)
=$a3c6					en = *	; remember here
>a3be	06					.byte CL	;wh_CodeLength
>a3c6	49 73				L1:	.text "Is"	;  name of word as a string, ending at wh_NameLastChar
>a3c8	02					.byte *-L1	;wh_NameLength	length of name
>a3c9	3b a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3cb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3cc	0c					.byte IM+NN	;wh_Flags	dictionary flags
=41800					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3cd					Is:
.a3cd	a5 0a		lda $0a				lda state		; Check STATE
.a3cf	f0 0a		beq $a3db			beq _interpreting
.a3d1					_compiling:
.a3d1	20 a8 ba	jsr $baa8			jsr Bracket_Tick	; compile the xt of the next word as a literal.
.a3d4	a0 a3		ldy #$a3			ldy #>Defer_Store	; Postpone DEFER! by compiling a JSR to it.
.a3d6	a9 c0		lda #$c0			lda #<Defer_Store
.a3d8	4c 23 cb	jmp $cb23			jmp Jsr_Comma_YA
.a3db					_interpreting:
.a3db	20 94 ba	jsr $ba94			jsr Tick
.a3de	4c c0 a3	jmp $a3c0			jmp Defer_Store
=20					CL	.var *-(WordListLink+wh_Xt)
=$a3e1					en = *	; remember here
>a3cb	14					.byte CL	;wh_CodeLength
>a3e1	41 63 74 69 6f 6e 2d 4f		L1:	.text "Action-Of"	;  name of word as a string, ending at wh_NameLastChar
>a3e9	66
>a3ea	09					.byte *-L1	;wh_NameLength	length of name
>a3eb	48 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3ed	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3ee	0c					.byte IM+NN	;wh_Flags	dictionary flags
=41834					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3ef					Action_Of:
.a3ef	a5 0a		lda $0a				lda state		; Check STATE
.a3f1	f0 0a		beq $a3fd			beq _interpreting
.a3f3					_compiling:
.a3f3	20 a8 ba	jsr $baa8			jsr Bracket_Tick	; compile the xt of the next word as a literal.
.a3f6	a0 a3		ldy #$a3			ldy #>Defer_Fetch	; Postpone DEFER@ by compiling a JSR to it.
.a3f8	a9 af		lda #$af			lda #<Defer_Fetch
.a3fa	4c 23 cb	jmp $cb23			jmp Jsr_Comma_YA
.a3fd					_interpreting:
.a3fd	20 94 ba	jsr $ba94			jsr Tick
.a400	4c af a3	jmp $a3af			jmp Defer_Fetch
=20					CL	.var *-(WordListLink+wh_Xt)
=$a403					en = *	; remember here
>a3ed	14					.byte CL	;wh_CodeLength
>a403	55 73 65 72 41 64 64 72		L1:	.text "UserAddr"	;  name of word as a string, ending at wh_NameLastChar
>a40b	08					.byte *-L1	;wh_NameLength	length of name
>a40c	6a a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a40e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a40f	08					.byte NN	;wh_Flags	dictionary flags
=41867					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a410	a9 ff		lda #$ff	UserAddr:	lda #<User0
.a412	a0 02		ldy #$02			ldy #>User0
.a414	4c e0 b5	jmp $b5e0			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a417					en = *	; remember here
>a40e	07					.byte CL	;wh_CodeLength
>a417	42 75 66 66 65 72 3a		L1:	.text "Buffer:"	;  name of word as a string, ending at wh_NameLastChar
>a41e	07					.byte *-L1	;wh_NameLength	length of name
>a41f	8b a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a421	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a422	08					.byte NN	;wh_Flags	dictionary flags
=41886					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a423	20 cd bf	jsr $bfcd	Buffer_Colon:	jsr Create
.a426	4c ec be	jmp $beec			jmp Allot
=6					CL	.var *-(WordListLink+wh_Xt)
=$a429					en = *	; remember here
>a421	06					.byte CL	;wh_CodeLength
>a429	43 61 73 65			L1:	.text "Case"	;  name of word as a string, ending at wh_NameLastChar
>a42d	04					.byte *-L1	;wh_NameLength	length of name
>a42e	9e a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a430	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a431	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=41901					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a432					Case:
.a432	4c 31 b6	jmp $b631			jmp Zero	; init jmp fixup chain
=3					CL	.var *-(WordListLink+wh_Xt)
=$a435					en = *	; remember here
>a430	03					.byte CL	;wh_CodeLength
>a435	45 6e 64 43 61 73 65		L1:	.text "EndCase"	;  name of word as a string, ending at wh_NameLastChar
>a43c	07					.byte *-L1	;wh_NameLength	length of name
>a43d	ad a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a43f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a440	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=41916					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a441					EndCase:
.a441	20 12 cb	jsr $cb12			jsr Drop_Comma
.a444					_loop:
.a444	b5 26		lda $26,x			lda DStack+1,x	; while addr fixup entries left
.a446	f0 06		beq $a44e			beq _done
.a448	20 cb a4	jsr $a4cb			jsr Then	;   fixup another one
.a44b	4c 44 a4	jmp $a444			jmp _loop
.a44e					_done:
.a44e	e8		inx				inx		; Drop the 0
.a44f	e8		inx				inx
=15					CL	.var *-(WordListLink+wh_Xt)
=$a450					en = *	; remember here
>a43f	0f					.byte CL	;wh_CodeLength
.a450	60		rts				rts
>a451	4f 66				L1:	.text "Of"	;  name of word as a string, ending at wh_NameLastChar
>a453	02					.byte *-L1	;wh_NameLength	length of name
>a454	bc a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a456	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a457	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=41939					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a458					Of:
.a458	a0 a4		ldy #$a4			ldy #>OfX		; Check if value is equal to this case.
.a45a	a9 6d		lda #$6d			lda #<OfX
.a45c	20 23 cb	jsr $cb23			jsr Jsr_Comma_YA
.a45f	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a461	20 e4 ca	jsr $cae4			jsr C_Comma_A
.a464	20 13 c8	jsr $c813			jsr Here		; Put the origination address on the stack for else/then
.a467	20 31 b6	jsr $b631			jsr Zero
.a46a	4c fb ca	jmp $cafb			jmp Comma
=21					CL	.var *-(WordListLink+wh_Xt)
=$a46d					en = *	; remember here
>a456	15					.byte CL	;wh_CodeLength
.a46d					OfX:
.a46d	b5 25		lda $25,x			lda DStack+0,x	; compare x1 with x2
.a46f	d5 27		cmp $27,x			cmp DStack+2,x
.a471	d0 0a		bne $a47d			bne _NotEq
.a473	b5 26		lda $26,x			lda DStack+1,x
.a475	d5 28		cmp $28,x			cmp DStack+3,x
.a477	d0 04		bne $a47d			bne _NotEq
.a479	e8		inx				inx		; Drop x2
.a47a	e8		inx				inx
.a47b	d0 35		bne $a4b2			bne zbranch_run2 ; Drop x1 & return to after the jmp abs
.a47d	e8		inx		_NotEq:		inx		; Drop x2
.a47e	e8		inx				inx
.a47f	60		rts				rts		; return to the jmp abs to next test
>a480	45 6e 64 4f 66			L1:	.text "EndOf"	;  name of word as a string, ending at wh_NameLastChar
>a485	05					.byte *-L1	;wh_NameLength	length of name
>a486	d3 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a488	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a489	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=41989					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a48a					EndOf:
.a48a	4c dd a4	jmp $a4dd			jmp Else
=3					CL	.var *-(WordListLink+wh_Xt)
=$a48d					en = *	; remember here
>a488	03					.byte CL	;wh_CodeLength
>a48d	49 66				L1:	.text "If"	;  name of word as a string, ending at wh_NameLastChar
>a48f	02					.byte *-L1	;wh_NameLength	length of name
>a490	05 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a492	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a493	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=41999					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a494					If:
.a494	20 a5 a4	jsr $a4a5			jsr zbranch_jsr_comma	; Compile a 0BRANCH
.a497					zbranch_jmp0_comma:
.a497	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a499	20 e4 ca	jsr $cae4			jsr C_Comma_A
.a49c	20 13 c8	jsr $c813			jsr Here		; save ptr to address for else/then
.a49f	a9 00		lda #$00			lda #0			; Stuff zero in for the branch address right now.
.a4a1	a8		tay				tay			; THEN or ELSE will fix it later.
.a4a2	4c fe ca	jmp $cafe			jmp Comma_YA
=17					CL	.var *-(WordListLink+wh_Xt)
=$a4a5					en = *	; remember here
>a492	11					.byte CL	;wh_CodeLength
=$cb37					zbranch_jmp_comma = Jmp_Comma		; compile jmp abs
.a4a5					zbranch_jsr_comma:
.a4a5	a0 a4		ldy #$a4			ldy #>_runtime
.a4a7	a9 ac		lda #$ac			lda #<_runtime
.a4a9	4c 23 cb	jmp $cb23			jmp Jsr_Comma_YA
.a4ac					_runtime:
.a4ac	b5 25		lda $25,x			lda DStack+0,x		;flag is false?
.a4ae	15 26		ora $26,x			ora DStack+1,x
.a4b0	f0 0d		beq $a4bf			beq zbranch_run_done
.a4b2	18		clc		zbranch_run2:	clc			; move RTS addr over the next jmp abs.
.a4b3	68		pla				pla
.a4b4	69 03		adc #$03			adc #3
.a4b6	90 06		bcc $a4be			bcc +
.a4b8	a8		tay				tay
.a4b9	68		pla				pla
.a4ba	69 00		adc #$00			adc #0
.a4bc	48		pha				pha
.a4bd	98		tya				tya
.a4be	48		pha		+		pha
.a4bf					zbranch_run_done:
.a4bf	e8		inx				inx			; Drop f
.a4c0	e8		inx				inx
.a4c1	60		rts				rts
>a4c2	54 68 65 6e			L1:	.text "Then"	;  name of word as a string, ending at wh_NameLastChar
>a4c6	04					.byte *-L1	;wh_NameLength	length of name
>a4c7	0f a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4c9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4ca	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42054					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4cb					Then:
.a4cb	20 13 c8	jsr $c813			jsr Here
.a4ce	20 63 cd	jsr $cd63			jsr Swap
.a4d1	4c 92 cc	jmp $cc92			jmp Store
=9					CL	.var *-(WordListLink+wh_Xt)
=$a4d4					en = *	; remember here
>a4c9	09					.byte CL	;wh_CodeLength
>a4d4	45 6c 73 65			L1:	.text "Else"	;  name of word as a string, ending at wh_NameLastChar
>a4d8	04					.byte *-L1	;wh_NameLength	length of name
>a4d9	46 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4dc	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42072					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4dd					Else:
.a4dd	20 97 a4	jsr $a497			jsr zbranch_jmp0_comma	; compile jmp 0, push addr of addr
.a4e0	20 13 c8	jsr $c813			jsr Here
.a4e3	20 49 cc	jsr $cc49			jsr Rot
.a4e6	4c 92 cc	jmp $cc92			jmp Store
=12					CL	.var *-(WordListLink+wh_Xt)
=$a4e9					en = *	; remember here
>a4db	0c					.byte CL	;wh_CodeLength
>a4e9	42 65 67 69 6e			L1:	.text "Begin"	;  name of word as a string, ending at wh_NameLastChar
>a4ee	05					.byte *-L1	;wh_NameLength	length of name
>a4ef	58 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4f1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4f2	0d					.byte NN+CO+IM	;wh_Flags	dictionary flags
=42094					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4f3	4c 13 c8	jmp $c813	Begin:		jmp Here	; remember the loop starting location
=3					CL	.var *-(WordListLink+wh_Xt)
=$a4f6					en = *	; remember here
>a4f1	03					.byte CL	;wh_CodeLength
>a4f6	41 67 61 69 6e			L1:	.text "Again"	;  name of word as a string, ending at wh_NameLastChar
>a4fb	05					.byte *-L1	;wh_NameLength	length of name
>a4fc	6e a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4ff	1d					.byte NN+CO+IM+UF	;wh_Flags	dictionary flags
=42107					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a500					Again:
.a500	20 8e b2	jsr $b28e			jsr underflow_1
.a503	4c 37 cb	jmp $cb37			jmp Jmp_Comma	; Compile a jmp abs.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a506					en = *	; remember here
>a4fe	06					.byte CL	;wh_CodeLength
>a506	57 68 69 6c 65			L1:	.text "While"	;  name of word as a string, ending at wh_NameLastChar
>a50b	05					.byte *-L1	;wh_NameLength	length of name
>a50c	7b a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a50e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a50f	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42123					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a510					While:
.a510	20 94 a4	jsr $a494			jsr If		; Compile a 0branch & jmp, push addr of addr
.a513	4c 63 cd	jmp $cd63			jmp Swap	; Swap the two addresses on the stack.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a516					en = *	; remember here
>a50e	06					.byte CL	;wh_CodeLength
>a516	52 65 70 65 61 74		L1:	.text "Repeat"	;  name of word as a string, ending at wh_NameLastChar
>a51c	06					.byte *-L1	;wh_NameLength	length of name
>a51d	8b a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a51f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a520	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42140					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a521					Repeat:
.a521	20 00 a5	jsr $a500			jsr Again	; compile the jmp back
.a524	20 13 c8	jsr $c813			jsr Here	; patch the WHILE jmp operand
.a527	20 63 cd	jsr $cd63			jsr Swap
.a52a	4c 92 cc	jmp $cc92			jmp Store
=12					CL	.var *-(WordListLink+wh_Xt)
=$a52d					en = *	; remember here
>a51f	0c					.byte CL	;wh_CodeLength
>a52d	55 6e 74 69 6c			L1:	.text "Until"	;  name of word as a string, ending at wh_NameLastChar
>a532	05					.byte *-L1	;wh_NameLength	length of name
>a533	9c a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a535	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a536	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42162					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a537					Until:
.a537	4c 3a a5	jmp $a53a			jmp ZBranch_Comma	; The address to loop back to is on the stack.
=3					CL	.var *-(WordListLink+wh_Xt)
=$a53a					en = *	; remember here
>a535	03					.byte CL	;wh_CodeLength
.a53a					ZBranch_Comma:
.a53a	a9 e8		lda #$e8			lda #$e8		; compile inx; inx
.a53c	a8		tay				tay
.a53d	20 fe ca	jsr $cafe			jsr Comma_YA
.a540	a9 b5		lda #$b5			lda #$b5		; compile lda DStack-2,x
.a542	a0 23		ldy #$23			ldy #DStack-2
.a544	20 fe ca	jsr $cafe			jsr Comma_YA
.a547	a9 15		lda #$15			lda #$15		; compile ora DStack-1,x
.a549	a0 24		ldy #$24			ldy #DStack-1
.a54b	20 fe ca	jsr $cafe			jsr Comma_YA
.a54e	a9 f0		lda #$f0			lda #$f0		; BEQ
.a550					Branch_Comma:
.a550	48		pha				pha			; save branch opcode
.a551	38		sec				sec			; AY= displacement+2
.a552	b5 25		lda $25,x			lda DStack+0,x
.a554	e5 00		sbc $00				sbc cp+0
.a556	a8		tay				tay
.a557	b5 26		lda $26,x			lda DStack+1,x
.a559	e5 01		sbc $01				sbc cp+1
.a55b	c9 ff		cmp #$ff			cmp #$ff		; offset maybe in range?
.a55d	f0 0b		beq $a56a			beq _rev
.a55f	68		pla		_2byte:		pla			; restore branch opcode
.a560	49 20		eor #$20			eor #$20		; reverse branch sense
.a562	a0 03		ldy #$03			ldy #3			; compile Bcc *+5
.a564	20 fe ca	jsr $cafe			jsr Comma_YA
.a567	4c 37 cb	jmp $cb37			jmp Jmp_Comma		; compile JMP abs
.a56a	c0 82		cpy #$82	_rev:		cpy #$80+2		; offset in range?
.a56c	90 f1		bcc $a55f			bcc _2byte
.a56e	e8		inx		_1byte:		inx			; Drop address
.a56f	e8		inx				inx
.a570	88		dey				dey			; fix displacement
.a571	88		dey				dey
.a572	68		pla				pla			; restore branch opcode
.a573	4c fe ca	jmp $cafe			jmp Comma_YA		; compile Bcc
>a576	57 6f 72 64			L1:	.text "Word"	;  name of word as a string, ending at wh_NameLastChar
>a57a	04					.byte *-L1	;wh_NameLength	length of name
>a57b	b2 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a57d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a57e	18					.byte UF+NN	;wh_Flags	dictionary flags
=42234					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a57f					Word:
.a57f	20 8e b2	jsr $b28e			jsr underflow_1
.a582	a4 08		ldy $08				ldy toin+0		; >IN
.a584	c4 06		cpy $06		_DelimLoop:	cpy ciblen+0		; quit if end of input
.a586	f0 09		beq $a591			beq _found_char
.a588	b1 04		lda ($04),y			lda (cib),y
.a58a	d5 25		cmp $25,x			cmp DStack+0,x		; ASCII of delimiter
.a58c	d0 03		bne $a591			bne _found_char
.a58e	c8		iny				iny
.a58f	d0 f3		bne $a584			bne _DelimLoop
.a591					_found_char:
.a591	84 08		sty $08				sty toin+0		; Save index of where word starts
.a593	20 15 b9	jsr $b915			jsr Parse		; The real work is done by parse
.a596	20 34 b2	jsr $b234			jsr PopA		; pop u
.a599	85 17		sta $17				sta tmp2+0
.a59b	20 5b b2	jsr $b25b			jsr PopTmp1		; pop addr
.a59e	20 13 c8	jsr $c813			jsr Here		; Return caddr
.a5a1	a5 17		lda $17				lda tmp2+0
.a5a3	a0 00		ldy #$00			ldy #0			; Save length of string
.a5a5	f0 03		beq $a5aa			beq _CopyStart
.a5a7	b1 15		lda ($15),y	_CopyLoop:	lda (tmp1),y
.a5a9	c8		iny				iny
.a5aa	20 e4 ca	jsr $cae4	_CopyStart:	jsr C_Comma_A
.a5ad	c4 17		cpy $17				cpy tmp2+0
.a5af	90 f6		bcc $a5a7			bcc _CopyLoop
=50					CL	.var *-(WordListLink+wh_Xt)
=$a5b1					en = *	; remember here
>a57d	32					.byte CL	;wh_CodeLength
.a5b1	60		rts				rts
>a5b2	28				L1:	.text "("	;  name of word as a string, ending at wh_NameLastChar
>a5b3	01					.byte *-L1	;wh_NameLength	length of name
>a5b4	fa a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5b6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5b7	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42291					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5b8					Paren:
.a5b8	a9 29		lda #$29			lda #')'		; separator
.a5ba	20 18 b9	jsr $b918			jsr Parse_A		; Call parse.
.a5bd	4c 12 c3	jmp $c312			jmp Two_drop		; Throw away the result.
=8					CL	.var *-(WordListLink+wh_Xt)
=$a5c0					en = *	; remember here
>a5b6	08					.byte CL	;wh_CodeLength
>a5c0	2e 28				L1:	.text ".("	;  name of word as a string, ending at wh_NameLastChar
>a5c2	02					.byte *-L1	;wh_NameLength	length of name
>a5c3	33 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5c5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5c6	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42306					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5c7					Dot_paren:
.a5c7	a9 29		lda #$29			lda #')'
.a5c9	20 18 b9	jsr $b918			jsr Parse_A
.a5cc	4c cd cb	jmp $cbcd			jmp Type
=8					CL	.var *-(WordListLink+wh_Xt)
=$a5cf					en = *	; remember here
>a5c5	08					.byte CL	;wh_CodeLength
>a5cf	48 61 73 68			L1:	.text "Hash"	;  name of word as a string, ending at wh_NameLastChar
>a5d3	04					.byte *-L1	;wh_NameLength	length of name
>a5d4	42 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5d6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5d7	08					.byte NN	;wh_Flags	dictionary flags
=42323					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5d8	20 34 b2	jsr $b234	Hash:		jsr PopA		; save length
.a5db	85 17		sta $17				sta tmp2+0
.a5dd	b5 25		lda $25,x			lda DStack+0,x		; copy addr
.a5df	b4 26		ldy $26,x			ldy DStack+1,x
.a5e1	85 15		sta $15				sta tmp1+0
.a5e3	84 16		sty $16				sty tmp1+1
.a5e5	a9 b3		lda #$b3			lda #$b3		; init hash
.a5e7	95 25		sta $25,x			sta DStack+0,x
.a5e9	95 26		sta $26,x			sta DStack+1,x
.a5eb	a0 00		ldy #$00			ldy #0			; for each char
.a5ed	f0 15		beq $a604			beq _next
.a5ef	b1 15		lda ($15),y	_loop:		lda (tmp1),y		;   get char
.a5f1	c9 61		cmp #$61			cmp #'a'		;   uppercase
.a5f3	90 06		bcc $a5fb			bcc _3
.a5f5	c9 7b		cmp #$7b			cmp #'z'+1
.a5f7	b0 02		bcs $a5fb			bcs _3
.a5f9	29 df		and #$df			and #$df
.a5fb	16 25		asl $25,x	_3:		asl DStack+0,x		;   add to hash
.a5fd	36 26		rol $26,x			rol DStack+1,x
.a5ff	75 25		adc $25,x			adc DStack+0,x
.a601	95 25		sta $25,x			sta DStack+0,x
.a603	c8		iny				iny
.a604	c4 17		cpy $17		_Next:		cpy tmp2+0
.a606	90 e7		bcc $a5ef			bcc _loop
=48					CL	.var *-(WordListLink+wh_Xt)
=$a608					en = *	; remember here
>a5d6	30					.byte CL	;wh_CodeLength
.a608	60		rts				rts
>a609	45 6e 76 69 72 6f 6e 6d		L1:	.text "Environment?"	;  name of word as a string, ending at wh_NameLastChar
>a611	65 6e 74 3f
>a615	0c					.byte *-L1	;wh_NameLength	length of name
>a616	53 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a618	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a619	08					.byte NN	;wh_Flags	dictionary flags
=42389					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a61a					Environment_Q:
.a61a	20 d8 a5	jsr $a5d8			jsr Hash		; ( hash )
.a61d	a0 00		ldy #$00			ldy #0			; Y= table index
.a61f	f0 0a		beq $a62b			beq _entry_test
.a621	98		tya		_entry_next:	tya
.a622	c0 30		cpy #$30			cpy #_table_dbl		; if double
.a624	90 02		bcc $a628			bcc +
.a626	69 01		adc #$01			adc #6-4-1		;   skip double
.a628	69 04		adc #$04	+		adc #4			;   skip single
.a62a	a8		tay		_3:		tay
.a62b	b9 5f a6	lda $a65f,y	_entry_test:	lda _Table+0,y		; match?
.a62e	f0 28		beq $a658			beq _notfound
.a630	d5 25		cmp $25,x			cmp DStack+0,x
.a632	d0 ed		bne $a621			bne _entry_next
.a634	b9 60 a6	lda $a660,y			lda _Table+1,y
.a637	d5 26		cmp $26,x			cmp DStack+1,x
.a639	d0 e6		bne $a621			bne _entry_next
.a63b	b9 61 a6	lda $a661,y			lda _Table+2,y
.a63e	95 25		sta $25,x			sta DStack+0,x
.a640	b9 62 a6	lda $a662,y			lda _Table+3,y
.a643	95 26		sta $26,x			sta DStack+1,x
.a645	c0 30		cpy #$30			cpy #_table_dbl		; single or double data?
.a647	90 0c		bcc $a655			bcc _single
.a649	ca		dex				dex			;  push 2nd cell
.a64a	ca		dex				dex
.a64b	b9 63 a6	lda $a663,y			lda _Table+4,y
.a64e	95 25		sta $25,x			sta DStack+0,x
.a650	b9 64 a6	lda $a664,y			lda _Table+5,y
.a653	95 26		sta $26,x			sta DStack+1,x
.a655					_single:
.a655	4c 00 b6	jmp $b600			jmp True		; return True
.a658					_notfound:
.a658	a9 00		lda #$00			lda #0			; return 0
.a65a	95 25		sta $25,x			sta DStack+0,x
.a65c	95 26		sta $26,x			sta DStack+1,x
.a65e	60		rts				rts
=69					CL	.var *-(WordListLink+wh_Xt)
=$a65f					en = *	; remember here
>a618	45					.byte CL	;wh_CodeLength
.a65f					_Table:
>a65f	5e e6 ff 7f				.word $e65e,$7fff	; "/COUNTED-STRING"
>a663	be 79 ff 00				.word $79BE,$ff		; "/HOLD"
>a667	b9 3c 54 00				.word $3cb9,padoffset	; "/PAD"
>a66b	8b 81 08 00				.word $818b,8		; "ADDRESS-UNIT-BITS"
>a66f	57 fc 00 00				.word $fc57,0		; "FLOORED"	we have symmetric)
>a673	4f fb ff 00				.word $fb4f,$ff		; "MAX-CHAR"
>a677	56 7f ff 7f				.word $7f56,$7fff	; "MAX-N"
>a67b	5d 7f ff ff				.word $7f5d,$ffff	; "MAX-U"
>a67f	38 ce 80 00				.word $ce38,$80		; "RETURN-STACK-CELLS"
>a683	f2 c0 14 00				.word $c0f2,DStack0/2	; "STACK-CELLS"
>a687	36 e3 09 00				.word $e336,9		; "WORDLISTS"
>a68b	01 99 0a 00				.word $9901,FDim	; "FLOATING-STACK"	n	yes	   If n = zero, floating-point numbers are
=48					_table_dbl = *-_Table	; These return a double-cell number
>a68f	4c 7f ff ff ff 7f			.word $7f4c,$ffff,$7fff	; "MAX-D"
>a695	fe fe ff ff ff ff			.word $fefe,$ffff,$ffff	; "MAX-UD"
>a69b	00					.byte 0		; end of list
>a69c	42 65 6c 6c			L1:	.text "Bell"	;  name of word as a string, ending at wh_NameLastChar
>a6a0	04					.byte *-L1	;wh_NameLength	length of name
>a6a1	95 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6a3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6a4	08					.byte NN	;wh_Flags	dictionary flags
=42528					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6a5	a9 07		lda #$07	Bell:		lda #7		; ASCII value for BELL
.a6a7	4c b3 cb	jmp $cbb3			jmp Emit_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$a6aa					en = *	; remember here
>a6a3	05					.byte CL	;wh_CodeLength
>a6aa	44 75 6d 70			L1:	.text "Dump"	;  name of word as a string, ending at wh_NameLastChar
>a6ae	04					.byte *-L1	;wh_NameLength	length of name
>a6af	20 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6b1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6b2	18					.byte UF+NN	;wh_Flags	dictionary flags
=42542					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6b3					Dump:
.a6b3	20 a3 b2	jsr $b2a3			jsr underflow_2
.a6b6	ca		dex				dex			; alloc work area
.a6b7	ca		dex				dex
.a6b8					_row:
.a6b8	20 ce a9	jsr $a9ce			jsr CR
.a6bb	b5 2a		lda $2a,x			lda DStack+5,x		; print address number
.a6bd	20 3c a7	jsr $a73c			jsr C_Dot_Hex_A
.a6c0	b5 29		lda $29,x			lda DStack+4,x
.a6c2	20 3c a7	jsr $a73c			jsr C_Dot_Hex_A
.a6c5	20 c0 cb	jsr $cbc0			jsr Space
.a6c8	20 c0 cb	jsr $cbc0			jsr Space
.a6cb	a9 00		lda #$00			lda #0
.a6cd	95 25		sta $25,x			sta DStack+0,x
.a6cf					_loop:
.a6cf	b5 27		lda $27,x			lda DStack+2,x
.a6d1	15 28		ora $28,x			ora DStack+3,x
.a6d3	f0 36		beq $a70b			beq _all_printed
.a6d5	a1 29		lda ($29,x)			lda (DStack+4,x)
.a6d7	20 3c a7	jsr $a73c			jsr C_Dot_Hex_A
.a6da	20 c0 cb	jsr $cbc0			jsr Space
.a6dd	a1 29		lda ($29,x)			lda (DStack+4,x)
.a6df	20 63 a7	jsr $a763			jsr is_printable
.a6e2	b0 02		bcs $a6e6			bcs _printable
.a6e4	a9 2e		lda #$2e			lda #'.'		 ; Print dot if not printable
.a6e6					_printable:
.a6e6	b4 25		ldy $25,x			ldy DStack+0,x
.a6e8	91 00		sta ($00),y			sta (cp),y
.a6ea	c0 07		cpy #$07			cpy #7
.a6ec	d0 03		bne $a6f1			bne +
.a6ee	20 c0 cb	jsr $cbc0			jsr Space
.a6f1					+
.a6f1	f6 29		inc $29,x			inc DStack+4,x
.a6f3	d0 02		bne $a6f7			bne +
.a6f5	f6 2a		inc $2a,x			inc DStack+5,x
.a6f7					+
.a6f7	20 2d c8	jsr $c82d			jsr NOS_One_Minus	; loop counter
.a6fa	f6 25		inc $25,x			inc DStack+0,x
.a6fc	b5 25		lda $25,x			lda DStack+0,x
.a6fe	c9 10		cmp #$10			cmp #16
.a700	90 cd		bcc $a6cf			bcc _loop		; next byte
.a702	20 c0 cb	jsr $cbc0			jsr Space
.a705	20 1a a7	jsr $a71a			jsr dump_print_ascii
.a708	4c b8 a6	jmp $a6b8			jmp _row		; new row
.a70b					_all_printed:
.a70b	b5 25		lda $25,x			lda DStack+0,x
.a70d	f0 06		beq $a715			beq _done
.a70f	20 c0 cb	jsr $cbc0			jsr Space
.a712	20 1a a7	jsr $a71a			jsr dump_print_ascii
.a715					_done:
.a715	e8		inx				inx			; drop work area
.a716	e8		inx				inx
.a717	4c 12 c3	jmp $c312			jmp Two_drop		; one byte less than 4x INX
=103					CL	.var *-(WordListLink+wh_Xt)
=$a71a					en = *	; remember here
>a6b1	67					.byte CL	;wh_CodeLength
.a71a					dump_print_ascii:
.a71a	a0 00		ldy #$00			ldy #0
.a71c					_loop:
.a71c	b1 00		lda ($00),y			lda (cp),y
.a71e	20 b3 cb	jsr $cbb3			jsr Emit_A
.a721	c8		iny				iny
.a722	c0 08		cpy #$08			cpy #8
.a724	d0 03		bne $a729			bne +
.a726	20 c0 cb	jsr $cbc0			jsr Space
.a729					+
.a729	98		tya				tya
.a72a	d5 25		cmp $25,x			cmp DStack+0,x
.a72c	90 ee		bcc $a71c			bcc _loop
.a72e	60		rts				rts
>a72f	43 2e 48 65 78			L1:	.text "C.Hex"	;  name of word as a string, ending at wh_NameLastChar
>a734	05					.byte *-L1	;wh_NameLength	length of name
>a735	2e a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a737	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a738	08					.byte NN	;wh_Flags	dictionary flags
=42676					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a739	20 34 b2	jsr $b234	C_Dot_Hex:	jsr PopA
.a73c					C_Dot_Hex_A:
.a73c	48		pha		                pha
.a73d	4a		lsr a				lsr		; convert high nibble first
.a73e	4a		lsr a				lsr
.a73f	4a		lsr a				lsr
.a740	4a		lsr a				lsr
.a741	20 45 a7	jsr $a745			jsr _nibble_to_ascii
.a744	68		pla				pla
.a745					_nibble_to_ascii:
.a745	29 0f		and #$0f			and #$0F	; only use lower nibble
.a747	c9 0a		cmp #$0a			cmp #9+1
.a749	90 02		bcc $a74d			bcc +
.a74b	69 06		adc #$06			adc #6
.a74d	69 30		adc #$30	+		adc #'0'
.a74f	4c b3 cb	jmp $cbb3			jmp Emit_A
>a752	2e 48 65 78			L1:	.text ".Hex"	;  name of word as a string, ending at wh_NameLastChar
>a756	04					.byte *-L1	;wh_NameLength	length of name
>a757	b4 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a759	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a75a	08					.byte NN	;wh_Flags	dictionary flags
=42710					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a75b	b5 26		lda $26,x	Dot_Hex:	lda DStack+1,x	; do hi byte
.a75d	20 3c a7	jsr $a73c			jsr C_Dot_Hex_A
.a760	4c 39 a7	jmp $a739			jmp C_Dot_Hex	; do lo byte
.a763					is_printable:
.a763	c9 20		cmp #$20	                cmp #AscSP              ; $20
.a765	90 07		bcc $a76e	                bcc _done
.a767	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.a769	b0 02		bcs $a76d	                bcs _failed
.a76b	38		sec		                sec
.a76c	60		rts		                rts
.a76d	18		clc		_failed:	clc
.a76e	60		rts		_done:		rts
.a76f					is_whitespace:
.a76f	c9 21		cmp #$21	                cmp #AscSP+1
.a771	b0 02		bcs $a775	                bcs _failed
.a773	38		sec		                sec
.a774	60		rts		                rts
.a775	18		clc		_failed:	clc
.a776	60		rts				rts
>a777	2e 53				L1:	.text ".S"	;  name of word as a string, ending at wh_NameLastChar
>a779	02					.byte *-L1	;wh_NameLength	length of name
>a77a	d6 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a77c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a77d	08					.byte NN	;wh_Flags	dictionary flags
=42745					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a77e					Dot_s:
.a77e	a9 3c		lda #$3c			lda #'<'
.a780	20 b3 cb	jsr $cbb3			jsr Emit_A
.a783	20 4c c0	jsr $c04c			jsr Depth	; ( -- u )
.a786	20 0e ca	jsr $ca0e			jsr print_u
.a789	a9 3e		lda #$3e			lda #'>'
.a78b	20 b3 cb	jsr $cbb3			jsr Emit_A
.a78e	20 c0 cb	jsr $cbc0			jsr Space
.a791	a0 28		ldy #$28			ldy #DStack0		; for each cell on the stack
.a793	88		dey		_loop:		dey
.a794	88		dey				dey
.a795	86 15		stx $15				stx tmp1
.a797	c4 15		cpy $15				cpy tmp1
.a799	90 15		bcc $a7b0			bcc _done
.a79b	98		tya				tya			; save index
.a79c	48		pha				pha
.a79d	ca		dex				dex			; push stack[index]
.a79e	ca		dex				dex
.a79f	b9 25 00	lda $0025,y			lda DStack+0,y
.a7a2	95 25		sta $25,x			sta DStack+0,x
.a7a4	b9 26 00	lda $0026,y			lda DStack+1,y
.a7a7	95 26		sta $26,x			sta DStack+1,x
.a7a9	20 c1 c9	jsr $c9c1			jsr Dot
.a7ac	68		pla				pla			; restore index
.a7ad	a8		tay				tay
.a7ae	d0 e3		bne $a793			bne _loop
.a7b0					_done:
=50					CL	.var *-(WordListLink+wh_Xt)
=$a7b0					en = *	; remember here
>a77c	32					.byte CL	;wh_CodeLength
.a7b0	60		rts				rts
>a7b1	43 6f 6d 70 61 72 65		L1:	.text "Compare"	;  name of word as a string, ending at wh_NameLastChar
>a7b8	07					.byte *-L1	;wh_NameLength	length of name
>a7b9	f9 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a7bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a7bc	18					.byte UF+NN	;wh_Flags	dictionary flags
=42808					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a7bd					Compare:
.a7bd	20 ad b2	jsr $b2ad			jsr underflow_4
.a7c0	b5 25		lda $25,x			lda DStack+0,x		; tmp3+1= u2.lo
.a7c2	85 1a		sta $1a				sta tmp3+1
.a7c4	b5 27		lda $27,x			lda DStack+2,x		; tmp2= addr2
.a7c6	b4 28		ldy $28,x			ldy DStack+3,x
.a7c8	85 17		sta $17				sta tmp2+0
.a7ca	84 18		sty $18				sty tmp2+1
.a7cc	b5 29		lda $29,x			lda DStack+4,x		; tmp3+0= u1.lo
.a7ce	85 19		sta $19				sta tmp3+0
.a7d0	b5 2b		lda $2b,x			lda DStack+6,x		; tmp1= addr1
.a7d2	b4 2c		ldy $2c,x			ldy DStack+7,x
.a7d4	85 15		sta $15				sta tmp1+0
.a7d6	84 16		sty $16				sty tmp1+1
.a7d8	a0 00		ldy #$00			ldy #0		; for each char
.a7da					_loop:
.a7da	c4 19		cpy $19				cpy tmp3+0	; string1 empty?
.a7dc	f0 13		beq $a7f1			beq _str1
.a7de					_L1:
.a7de	c4 1a		cpy $1a				cpy tmp3+1	; string2 empty?
.a7e0	f0 27		beq $a809			beq _str2
.a7e2					_L2:
.a7e2	b1 15		lda ($15),y			lda (tmp1),y	; Are they different?
.a7e4	d1 17		cmp ($17),y			cmp (tmp2),y
.a7e6	d0 19		bne $a801			bne _neq
.a7e8	c8		iny				iny		; to next char
.a7e9	d0 ef		bne $a7da			bne _loop
.a7eb	e6 16		inc $16				inc tmp1+1	; to next page
.a7ed	e6 18		inc $18				inc tmp2+1
.a7ef	d0 e9		bne $a7da			bne _loop
.a7f1	d6 2a		dec $2a,x	_str1:		dec DStack+5,x	; string1 really empty?
.a7f3	10 e9		bpl $a7de			bpl _L1
.a7f5	c4 1a		cpy $1a				cpy tmp3+1	; string2 empty?
.a7f7	d0 0a		bne $a803			bne _less
.a7f9	b5 26		lda $26,x			lda DStack+1,x
.a7fb	d0 06		bne $a803			bne _less
.a7fd	a9 00		lda #$00	_equal:		lda #0		; Return 0
.a7ff	f0 0e		beq $a80f			beq _gt2
.a801	b0 0a		bcs $a80d	_neq:		bcs _greater
.a803	a9 ff		lda #$ff	_less:		lda #$FF	; Return -1
.a805	95 2b		sta $2b,x			sta DStack+6,x
.a807	d0 0a		bne $a813			bne _done
.a809	d6 26		dec $26,x	_str2:		dec DStack+1,x	; is string2 empty?
.a80b	10 d5		bpl $a7e2			bpl _L2
.a80d	a9 01		lda #$01	_greater:	lda #1		; Return 1
.a80f	95 2b		sta $2b,x	_gt2:		sta DStack+6,x
.a811	a9 00		lda #$00			lda #0
.a813	95 2c		sta $2c,x	_done:		sta DStack+7,x
.a815	8a		txa				txa		; Remove all but the result from the stack.
.a816	18		clc				clc
.a817	69 06		adc #$06			adc #6
.a819	aa		tax				tax
=93					CL	.var *-(WordListLink+wh_Xt)
=$a81a					en = *	; remember here
>a7bb	5d					.byte CL	;wh_CodeLength
.a81a	60		rts				rts
>a81b	53 65 61 72 63 68		L1:	.text "Search"	;  name of word as a string, ending at wh_NameLastChar
>a821	06					.byte *-L1	;wh_NameLength	length of name
>a822	38 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a824	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a825	18					.byte UF+NN	;wh_Flags	dictionary flags
=42913					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a826					Search:
.a826	20 ad b2	jsr $b2ad			jsr underflow_4
.a829	b5 25		lda $25,x			lda DStack+0,x
.a82b	15 26		ora $26,x			ora DStack+1,x
.a82d	d0 09		bne $a838			bne _start_search
.a82f	e8		inx				inx		; Drop u2
.a830	e8		inx				inx
.a831	a9 ff		lda #$ff			lda #$FF	; overwrite addr2 with a true flag
.a833	95 25		sta $25,x			sta DStack+0,x
.a835	95 26		sta $26,x			sta DStack+1,x
.a837	60		rts				rts
.a838					_start_search:
.a838	20 31 b6	jsr $b631			jsr Zero
.a83b					_search_loop:
.a83b	18		clc				clc
.a83c	b5 25		lda $25,x			lda DStack+0,x
.a83e	75 27		adc $27,x			adc DStack+2,x
.a840	85 15		sta $15				sta tmp1+0
.a842	b5 26		lda $26,x			lda DStack+1,x
.a844	75 28		adc $28,x			adc DStack+3,x
.a846	85 16		sta $16				sta tmp1+1
.a848	d5 2c		cmp $2c,x			cmp DStack+7,x
.a84a	90 13		bcc $a85f			bcc _init_comparison ; Obviously less
.a84c	d0 06		bne $a854			bne _not_found
.a84e	b5 2b		lda $2b,x			lda DStack+6,x
.a850	c5 15		cmp $15				cmp tmp1
.a852	b0 0b		bcs $a85f			bcs _init_comparison
.a854					_not_found:
.a854	e8		inx				inx		; Remove offset
.a855	e8		inx				inx
.a856	e8		inx				inx		; Remove u2
.a857	e8		inx				inx
.a858	a9 00		lda #$00			lda #0
.a85a	95 25		sta $25,x			sta DStack+0,x	; Turn addr2 into a false flag
.a85c	95 26		sta $26,x			sta DStack+1,x
.a85e	60		rts				rts
.a85f					_init_comparison:
.a85f	18		clc				clc
.a860	b5 2d		lda $2d,x			lda DStack+8,x
.a862	75 25		adc $25,x			adc DStack+0,x
.a864	85 15		sta $15				sta tmp1
.a866	b5 2e		lda $2e,x			lda DStack+9,x
.a868	75 26		adc $26,x			adc DStack+1,x
.a86a	85 16		sta $16				sta tmp1+1
.a86c	b5 29		lda $29,x			lda DStack+4,x
.a86e	85 17		sta $17				sta tmp2
.a870	b5 2a		lda $2a,x			lda DStack+5,x
.a872	85 18		sta $18				sta tmp2+1
.a874	b5 27		lda $27,x			lda DStack+2,x
.a876	85 19		sta $19				sta tmp3+0
.a878	b5 28		lda $28,x			lda DStack+3,x
.a87a	85 1a		sta $1a				sta tmp3+1
.a87c					_comparison_loop:
.a87c	a0 00		ldy #$00			ldy #0
.a87e	b1 15		lda ($15),y			lda (tmp1),y
.a880	d1 17		cmp ($17),y			cmp (tmp2),y
.a882	f0 06		beq $a88a			beq _letters_match
.a884	20 47 c8	jsr $c847			jsr One_plus
.a887	4c 3b a8	jmp $a83b			jmp _search_loop
.a88a					_letters_match:
.a88a	e6 15		inc $15				inc tmp1
.a88c	d0 02		bne $a890			bne +
.a88e	e6 16		inc $16				inc tmp1+1
.a890					+
.a890	e6 17		inc $17				inc tmp2
.a892	d0 02		bne $a896			bne +
.a894	e6 18		inc $18				inc tmp2+1
.a896					+
.a896	a5 19		lda $19				lda tmp3
.a898	d0 02		bne $a89c			bne +
.a89a	c6 1a		dec $1a				dec tmp3+1
.a89c					+
.a89c	c6 19		dec $19				dec tmp3
.a89e	a5 19		lda $19				lda tmp3
.a8a0	05 1a		ora $1a				ora tmp3+1
.a8a2	d0 d8		bne $a87c			bne _comparison_loop ; Check the next letter
.a8a4	18		clc				clc
.a8a5	b5 25		lda $25,x			lda DStack+0,x
.a8a7	75 2d		adc $2d,x			adc DStack+8,x
.a8a9	95 2d		sta $2d,x			sta DStack+8,x
.a8ab	b5 26		lda $26,x			lda DStack+1,x
.a8ad	75 2e		adc $2e,x			adc DStack+9,x
.a8af	95 2e		sta $2e,x			sta DStack+9,x
.a8b1	38		sec				sec
.a8b2	b5 2b		lda $2b,x			lda DStack+6,x
.a8b4	f5 25		sbc $25,x			sbc DStack+0,x
.a8b6	95 2b		sta $2b,x			sta DStack+6,x
.a8b8	b5 2c		lda $2c,x			lda DStack+7,x
.a8ba	f5 26		sbc $26,x			sbc DStack+1,x
.a8bc	95 2c		sta $2c,x			sta DStack+7,x
.a8be	e8		inx				inx		; drop offset
.a8bf	e8		inx				inx
.a8c0	e8		inx				inx		; drop u2
.a8c1	e8		inx				inx
.a8c2	a9 ff		lda #$ff			lda #$FF
.a8c4	95 25		sta $25,x			sta DStack+0,x	; Turn addr2 into a true flag.
.a8c6	95 26		sta $26,x			sta DStack+1,x
=162					CL	.var *-(WordListLink+wh_Xt)
=$a8c8					en = *	; remember here
>a824	a2					.byte CL	;wh_CodeLength
.a8c8	60		rts				rts
>a8c9	4d 61 72 6b 65 72		L1:	.text "Marker"	;  name of word as a string, ending at wh_NameLastChar
>a8cf	06					.byte *-L1	;wh_NameLength	length of name
>a8d0	a1 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a8d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a8d3	0c					.byte IM+NN	;wh_Flags	dictionary flags
=43087					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a8d4					Marker:
.a8d4	20 13 c8	jsr $c813			jsr Here		; Save original CP, which
.a8d7	20 54 bf	jsr $bf54			jsr Header_Build	; compile a word header, but don't link into wordlist
.a8da	a0 a8		ldy #$a8			ldy #>_runtime		; compile JSR _runtime
.a8dc	a9 f4		lda #$f4			lda #<_runtime
.a8de	20 23 cb	jsr $cb23			jsr Jsr_Comma_YA
.a8e1	20 fb ca	jsr $cafb			jsr Comma		; Append original CP
.a8e4	a0 00		ldy #$00			ldy #0			; Start at CURRENT
.a8e6	b9 10 03	lda $0310,y	_loop:		lda CurrentV,y
.a8e9	20 e4 ca	jsr $cae4			jsr C_Comma_A
.a8ec	c8		iny				iny
.a8ed	c0 24		cpy #$24			cpy #MarkEnd-CurrentV	; One past the end of the search order.
.a8ef	90 f5		bcc $a8e6			bcc _loop
.a8f1	4c 49 bf	jmp $bf49			jmp Header_Link		; link built header into current dictionary
=32					CL	.var *-(WordListLink+wh_Xt)
=$a8f4					en = *	; remember here
>a8d2	20					.byte CL	;wh_CodeLength
.a8f4					_runtime:
.a8f4	68		pla				pla		; Pop the RTS address off the stack
.a8f5	85 15		sta $15				sta tmp1+0
.a8f7	68		pla				pla
.a8f8	85 16		sta $16				sta tmp1+1
.a8fa	a0 01		ldy #$01			ldy #1		; start just aftet JSR _runtime
.a8fc	b1 15		lda ($15),y			lda (tmp1),y	; CP was stored first
.a8fe	85 00		sta $00				sta cp+0
.a900	c8		iny				iny
.a901	b1 15		lda ($15),y			lda (tmp1),y
.a903	85 01		sta $01				sta cp+1
.a905	c8		iny				iny
.a906					_rloop:
.a906	b1 15		lda ($15),y			lda (tmp1),y
.a908	99 0d 03	sta $030d,y			sta CurrentV-2-1,y
.a90b	c8		iny				iny
.a90c	c0 27		cpy #$27			cpy #MarkEnd-CurrentV+2+1 ; One past the end of the search order.
.a90e	90 f6		bcc $a906			bcc _rloop
.a910	60		rts				rts
>a911	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
>a916	05					.byte *-L1	;wh_NameLength	length of name
>a917	4f a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a919	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a91a	08					.byte NN	;wh_Flags	dictionary flags
=43158					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a91b					Words:
.a91b	a9 ff		lda #$ff			lda #$ff
.a91d	20 22 b6	jsr $b622			jsr PushZA		; Alloc space for line size & wordlist #
.a920	ca		dex				dex			; Alloc space for a nt
.a921	ca		dex				dex
.a922					_wordlist_next:
.a922	20 ce a9	jsr $a9ce			jsr CR			; start wordlist on new line
.a925	f6 27		inc $27,x			inc DStack+2,x		; step to next search wordlist
.a927	b4 27		ldy $27,x			ldy DStack+2,x		; Y= wordlist index
.a929	cc 2a 03	cpy $032a			cpy Num_OrderV
.a92c	b0 44		bcs $a972			bcs _wordslist_done	; ran out of search wordlist entries?
.a92e	b9 2b 03	lda $032b,y			lda Search_OrderV,y	; A= SEARCH-ORDER[Y]	Get the current wordlist id
.a931	0a		asl a				asl			; TOS= WORDLISTS[A]
.a932	a8		tay				tay
.a933	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.a936	95 25		sta $25,x			sta DStack+0,x
.a938	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.a93b	95 26		sta $26,x			sta DStack+1,x
.a93d	f0 e3		beq $a922			beq _wordlist_next	; end of list?
.a93f					_word_loop:
.a93f	20 45 cd	jsr $cd45			jsr Dup			; ( wordlist# nt nt )
.a942	20 1c bc	jsr $bc1c			jsr Name_To_String	; ( wordlist# nt addr u )
.a945	b5 2c		lda $2c,x			lda DStack+7,x
.a947	38		sec				sec			; don't forget the space between words
.a948	75 25		adc $25,x			adc DStack+0,x
.a94a	c9 4e		cmp #$4e			cmp #MAX_LINE_LENGTH-1
.a94c	90 05		bcc $a953			bcc +
.a94e	20 ce a9	jsr $a9ce			jsr CR
.a951	b5 25		lda $25,x			lda DStack+0,x		; After going to next line, start
.a953	95 2c		sta $2c,x	+		sta DStack+7,x
.a955	20 cd cb	jsr $cbcd			jsr Type		; ( wordlist# nt )
.a958	20 c0 cb	jsr $cbc0			jsr Space
.a95b	b5 25		lda $25,x			lda DStack+0,x
.a95d	85 15		sta $15				sta tmp1+0
.a95f	b5 26		lda $26,x			lda DStack+1,x
.a961	85 16		sta $16				sta tmp1+1
.a963	a0 81		ldy #$81			ldy #wh_WordListLink	; get next word nt
.a965	b1 15		lda ($15),y			lda (tmp1),y
.a967	95 25		sta $25,x			sta DStack+0,x
.a969	c8		iny				iny
.a96a	b1 15		lda ($15),y			lda (tmp1),y
.a96c	95 26		sta $26,x			sta DStack+1,x
.a96e	d0 cf		bne $a93f			bne _word_loop		; end of list?
.a970	f0 b0		beq $a922			beq _wordlist_next
.a972					_wordslist_done:
.a972	4c 12 c3	jmp $c312			jmp Two_Drop
=90					CL	.var *-(WordListLink+wh_Xt)
=$a975					en = *	; remember here
>a919	5a					.byte CL	;wh_CodeLength
>a975	57 6f 72 64 53 69 7a 65		L1:	.text "WordSize"	;  name of word as a string, ending at wh_NameLastChar
>a97d	08					.byte *-L1	;wh_NameLength	length of name
>a97e	96 a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a980	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a981	08					.byte NN	;wh_Flags	dictionary flags
=43261					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a982	20 5b b2	jsr $b25b	WordSize:	jsr PopTmp1
.a985	a0 83		ldy #$83			ldy #Wh_CodeLength
.a987	b1 15		lda ($15),y			lda (tmp1),y
.a989	4c 22 b6	jmp $b622			jmp PushZA
=10					CL	.var *-(WordListLink+wh_Xt)
=$a98c					en = *	; remember here
>a980	0a					.byte CL	;wh_CodeLength
>a98c	41 6c 69 67 6e 65 64		L1:	.text "Aligned"	;  name of word as a string, ending at wh_NameLastChar
>a993	07					.byte *-L1	;wh_NameLength	length of name
>a994	fd a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a996	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a997	00					.byte 0	;wh_Flags	dictionary flags
=43283					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a998					Aligned:
=0					CL	.var *-(WordListLink+wh_Xt)
=$a998					en = *	; remember here
>a996	00					.byte CL	;wh_CodeLength
.a998	60		rts				rts
>a999	41 6c 69 67 6e			L1:	.text "Align"	;  name of word as a string, ending at wh_NameLastChar
>a99e	05					.byte *-L1	;wh_NameLength	length of name
>a99f	13 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9a1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9a2	00					.byte 0	;wh_Flags	dictionary flags
=43294					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9a3					Align:
=0					CL	.var *-(WordListLink+wh_Xt)
=$a9a3					en = *	; remember here
>a9a1	00					.byte CL	;wh_CodeLength
.a9a3	60		rts				rts
>a9a4	4f 75 74 70 75 74		L1:	.text "Output"	;  name of word as a string, ending at wh_NameLastChar
>a9aa	06					.byte *-L1	;wh_NameLength	length of name
>a9ab	1e a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9ad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9ae	08					.byte NN	;wh_Flags	dictionary flags
=43306					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9af					xt_output:
.a9af	a9 06		lda #$06			lda #<output
.a9b1	a0 03		ldy #$03			ldy #>output
.a9b3	4c e0 b5	jmp $b5e0			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a9b6					en = *	; remember here
>a9ad	07					.byte CL	;wh_CodeLength
>a9b6	49 6e 70 75 74			L1:	.text "Input"	;  name of word as a string, ending at wh_NameLastChar
>a9bb	05					.byte *-L1	;wh_NameLength	length of name
>a9bc	2a a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9bf	08					.byte NN	;wh_Flags	dictionary flags
=43323					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9c0	a9 08		lda #$08	xt_input:	lda #<input
.a9c2	a0 03		ldy #$03			ldy #>input
.a9c4	4c e0 b5	jmp $b5e0			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a9c7					en = *	; remember here
>a9be	07					.byte CL	;wh_CodeLength
>a9c7	43 52				L1:	.text "CR"	;  name of word as a string, ending at wh_NameLastChar
>a9c9	02					.byte *-L1	;wh_NameLength	length of name
>a9ca	3b a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9cd	08					.byte NN	;wh_Flags	dictionary flags
=43337					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9ce					CR:
.a9ce	a9 0a		lda #$0a			lda #AscLF
.a9d0	20 b3 cb	jsr $cbb3			jsr Emit_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$a9d3					en = *	; remember here
>a9cc	05					.byte CL	;wh_CodeLength
.a9d3	60		rts				rts
>a9d4	50 61 67 65			L1:	.text "Page"	;  name of word as a string, ending at wh_NameLastChar
>a9d8	04					.byte *-L1	;wh_NameLength	length of name
>a9d9	49 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9dc	08					.byte NN	;wh_Flags	dictionary flags
=43352					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9dd	20 fc b6	jsr $b6fc	Page:		jsr SLiteral_Runtime
.a9e0	4c ed a9	jmp $a9ed			  jmp +
>a9e3	1b 5b 32 4a					  .text AscESC,"[2J"	; ANSI clear screen
>a9e7	1b 5b 31 3b 31 48				  .text AscESC,"[1;1H"	; move cursor to top left of screen
.a9ed	4c cd cb	jmp $cbcd	+		jmp Type
=19					CL	.var *-(WordListLink+wh_Xt)
=$a9f0					en = *	; remember here
>a9db	13					.byte CL	;wh_CodeLength
>a9f0	41 74 2d 58 59			L1:	.text "At-XY"	;  name of word as a string, ending at wh_NameLastChar
>a9f5	05					.byte *-L1	;wh_NameLength	length of name
>a9f6	58 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9f8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9f9	18					.byte UF+NN	;wh_Flags	dictionary flags
=43381					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9fa					At_XY:
.a9fa	20 a3 b2	jsr $b2a3			jsr underflow_2
.a9fd	ad 00 03	lda $0300			lda base
.aa00	48		pha				pha
.aa01	20 01 b0	jsr $b001			jsr Decimal
.aa04	a9 1b		lda #$1b			lda #AscESC
.aa06	20 b3 cb	jsr $cbb3			jsr Emit_A
.aa09	a9 5b		lda #$5b			lda #'['
.aa0b	20 b3 cb	jsr $cbb3			jsr Emit_A
.aa0e	f6 25		inc $25,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.aa10	20 0e ca	jsr $ca0e			jsr print_u
.aa13	a9 3b		lda #$3b			lda #';'
.aa15	20 b3 cb	jsr $cbb3			jsr Emit_A
.aa18	f6 25		inc $25,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.aa1a	20 0e ca	jsr $ca0e			jsr print_u
.aa1d	a9 48		lda #$48			lda #'H'
.aa1f	20 b3 cb	jsr $cbb3			jsr Emit_A
.aa22	68		pla				pla
.aa23	8d 00 03	sta $0300			sta base
=44					CL	.var *-(WordListLink+wh_Xt)
=$aa26					en = *	; remember here
>a9f8	2c					.byte CL	;wh_CodeLength
.aa26	60		rts				rts
>aa27	3c 23				L1:	.text "<#"	;  name of word as a string, ending at wh_NameLastChar
>aa29	02					.byte *-L1	;wh_NameLength	length of name
>aa2a	75 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa2c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa2d	08					.byte NN	;wh_Flags	dictionary flags
=43433					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa2e					Less_Number_Sign:
.aa2e	a9 54		lda #$54			lda #padoffset
.aa30	85 0e		sta $0e				sta tohold
=4					CL	.var *-(WordListLink+wh_Xt)
=$aa32					en = *	; remember here
>aa2c	04					.byte CL	;wh_CodeLength
.aa32	60		rts				rts
>aa33	23 3e				L1:	.text "#>"	;  name of word as a string, ending at wh_NameLastChar
>aa35	02					.byte *-L1	;wh_NameLength	length of name
>aa36	a9 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa38	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa39	18					.byte UF+NN	;wh_Flags	dictionary flags
=43445					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa3a					Number_Sign_Greater:
.aa3a	20 a3 b2	jsr $b2a3			jsr underflow_2		; double number
.aa3d	18		clc				clc			; start addr
.aa3e	a5 00		lda $00				lda cp+0
.aa40	65 0e		adc $0e				adc tohold
.aa42	95 27		sta $27,x			sta DStack+2,x
.aa44	a5 01		lda $01				lda cp+1
.aa46	69 00		adc #$00			adc #0
.aa48	95 28		sta $28,x			sta DStack+3,x
.aa4a	38		sec				sec			; length
.aa4b	a9 54		lda #$54			lda #padoffset
.aa4d	e5 0e		sbc $0e				sbc tohold
.aa4f	95 25		sta $25,x			sta DStack+0,x
.aa51	a9 00		lda #$00			lda #0
.aa53	95 26		sta $26,x			sta DStack+1,x
=27					CL	.var *-(WordListLink+wh_Xt)
=$aa55					en = *	; remember here
>aa38	1b					.byte CL	;wh_CodeLength
.aa55	60		rts				rts
>aa56	48 6f 6c 64			L1:	.text "Hold"	;  name of word as a string, ending at wh_NameLastChar
>aa5a	04					.byte *-L1	;wh_NameLength	length of name
>aa5b	b5 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa5d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa5e	08					.byte NN	;wh_Flags	dictionary flags
=43482					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa5f	20 34 b2	jsr $b234	Hold:		jsr PopA
.aa62	c6 0e		dec $0e		Hold_A:		dec tohold
.aa64	a4 0e		ldy $0e				ldy tohold
.aa66	91 00		sta ($00),y			sta (cp),y
=9					CL	.var *-(WordListLink+wh_Xt)
=$aa68					en = *	; remember here
>aa5d	09					.byte CL	;wh_CodeLength
.aa68	60		rts				rts
>aa69	23				L1:	.text "#"	;  name of word as a string, ending at wh_NameLastChar
>aa6a	01					.byte *-L1	;wh_NameLength	length of name
>aa6b	da a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa6d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa6e	18					.byte UF+NN	;wh_Flags	dictionary flags
=43498					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa6f					Number_Sign:
.aa6f	20 a3 b2	jsr $b2a3			jsr underflow_2		; double number
.aa72	a9 00		lda #$00			lda #0			;   init remainder
.aa74	18		clc				clc
.aa75	a0 21		ldy #$21			ldy #32+1		;   for each bit
.aa77					_11:
.aa77	2a		rol a				rol a			;   shift remainder
.aa78	cd 00 03	cmp $0300			cmp base		;   will it fit?
.aa7b	90 03		bcc $aa80			bcc _27
.aa7d	ed 00 03	sbc $0300			sbc base
.aa80					_27:
.aa80	36 27		rol $27,x			rol DStack+2,x		;   shift ud
.aa82	36 28		rol $28,x			rol DStack+3,x
.aa84	36 25		rol $25,x			rol DStack+0,x
.aa86	36 26		rol $26,x			rol DStack+1,x
.aa88	88		dey				dey
.aa89	d0 ec		bne $aa77			bne _11
.aa8b	c9 0a		cmp #$0a			cmp #9+1		; alternatively this could use s_abc_upper
.aa8d	90 02		bcc $aa91			bcc +
.aa8f	69 06		adc #$06			adc #7-1
.aa91	69 30		adc #$30	+		adc #'0'
.aa93	d0 cd		bne $aa62			bne Hold_A
=38					CL	.var *-(WordListLink+wh_Xt)
=$aa95					en = *	; remember here
>aa6d	26					.byte CL	;wh_CodeLength
>aa95	23 53				L1:	.text "#S"	;  name of word as a string, ending at wh_NameLastChar
>aa97	02					.byte *-L1	;wh_NameLength	length of name
>aa98	ea a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa9a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa9b	18					.byte UF+NN	;wh_Flags	dictionary flags
=43543					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa9c					Number_Sign_S:
.aa9c					_loop:
.aa9c	20 6f aa	jsr $aa6f			jsr Number_sign	; convert a single number ("#")
.aa9f	b5 25		lda $25,x			lda DStack+0,x	; stop when double-celled number in TOS is zero
.aaa1	15 26		ora $26,x			ora DStack+1,x
.aaa3	15 27		ora $27,x			ora DStack+2,x
.aaa5	15 28		ora $28,x			ora DStack+3,x
.aaa7	d0 f3		bne $aa9c			bne _loop
=13					CL	.var *-(WordListLink+wh_Xt)
=$aaa9					en = *	; remember here
>aa9a	0d					.byte CL	;wh_CodeLength
.aaa9	60		rts				rts
>aaaa	53 69 67 6e			L1:	.text "Sign"	;  name of word as a string, ending at wh_NameLastChar
>aaae	04					.byte *-L1	;wh_NameLength	length of name
>aaaf	17 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aab1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aab2	08					.byte NN	;wh_Flags	dictionary flags
=43566					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aab3	20 50 b2	jsr $b250	Sign:		jsr PopYA
.aab6	98		tya				tya		; test MSB of TOS
.aab7					Sign_P:
.aab7	30 01		bmi $aaba			bmi _minus
.aab9	60		rts				rts
.aaba	a9 2d		lda #$2d	_minus:		lda #'-'	; add minus sign
.aabc	d0 a4		bne $aa62			bne hold_a
=11					CL	.var *-(WordListLink+wh_Xt)
=$aabe					en = *	; remember here
>aab1	0b					.byte CL	;wh_CodeLength
>aabe	50 61 64			L1:	.text "Pad"	;  name of word as a string, ending at wh_NameLastChar
>aac1	03					.byte *-L1	;wh_NameLength	length of name
>aac2	2e aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aac4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aac5	00					.byte 0	;wh_Flags	dictionary flags
=43585					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aac6					Pad:
.aac6	ca		dex				dex		; push cp+padoffset
.aac7	ca		dex				dex
.aac8	18		clc				clc
.aac9	a5 00		lda $00				lda cp+0
.aacb	69 54		adc #$54			adc #padoffset
.aacd	95 25		sta $25,x			sta DStack+0,x
.aacf	a5 01		lda $01				lda cp+1
.aad1	69 00		adc #$00			adc #0
.aad3	95 26		sta $26,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$aad5					en = *	; remember here
>aac4	0f					.byte CL	;wh_CodeLength
.aad5	60		rts				rts
>aad6	43 6c 65 61 76 65		L1:	.text "Cleave"	;  name of word as a string, ending at wh_NameLastChar
>aadc	06					.byte *-L1	;wh_NameLength	length of name
>aadd	41 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aadf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aae0	18					.byte UF+NN	;wh_Flags	dictionary flags
=43612					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aae1					Cleave:
.aae1	20 a3 b2	jsr $b2a3			jsr underflow_2
.aae4	20 be c2	jsr $c2be			jsr Minus_leading	; -LEADING ( addr u )
.aae7	20 01 c2	jsr $c201			jsr Input_To_R	; save old imput state
.aaea	b5 25		lda $25,x			lda DStack+0,x	; u is new ciblen
.aaec	85 06		sta $06				sta ciblen
.aaee	b5 26		lda $26,x			lda DStack+1,x
.aaf0	85 07		sta $07				sta ciblen+1
.aaf2	b5 27		lda $27,x			lda DStack+2,x	; addr is new cib
.aaf4	85 04		sta $04				sta cib
.aaf6	b5 28		lda $28,x			lda DStack+3,x
.aaf8	85 05		sta $05				sta cib+1
.aafa	a9 00		lda #$00			lda #0
.aafc	85 08		sta $08				sta toin	; >IN pointer is zero
.aafe	85 09		sta $09				sta toin+1
.ab00	20 cc b8	jsr $b8cc			jsr parse_name	; ( addr u addr-s u-s )
.ab03	b5 25		lda $25,x			lda DStack+0,x
.ab05	15 26		ora $26,x			ora DStack+1,x
.ab07	f0 23		beq $ab2c			beq _done
.ab09	38		sec				sec
.ab0a	b5 29		lda $29,x			lda DStack+4,x	; LSB of original u
.ab0c	f5 25		sbc $25,x			sbc DStack+0,x
.ab0e	95 29		sta $29,x			sta DStack+4,x
.ab10	b5 2a		lda $2a,x			lda DStack+5,x	; MSB of original u
.ab12	f5 26		sbc $26,x			sbc DStack+1,x
.ab14	95 2a		sta $2a,x			sta DStack+5,x
.ab16	18		clc				clc
.ab17	b5 2b		lda $2b,x			lda DStack+6,x	; LSB of original addr
.ab19	75 25		adc $25,x			adc DStack+0,x
.ab1b	95 2b		sta $2b,x			sta DStack+6,x
.ab1d	b5 2c		lda $2c,x			lda DStack+7,x	; MSB of original addr
.ab1f	75 26		adc $26,x			adc DStack+1,x
.ab21	95 2c		sta $2c,x			sta DStack+7,x
.ab23	20 24 c3	jsr $c324			jsr Two_swap		; ( addr-s u-s addr u )
.ab26	20 be c2	jsr $c2be			jsr Minus_leading
.ab29	20 24 c3	jsr $c324			jsr Two_swap		; ( addr u addr-s u-s )
.ab2c					_done:
.ab2c	20 23 c2	jsr $c223			jsr R_To_Input
=78					CL	.var *-(WordListLink+wh_Xt)
=$ab2f					en = *	; remember here
>aadf	4e					.byte CL	;wh_CodeLength
.ab2f	60		rts				rts
>ab30	48 65 78 53 74 6f 72 65		L1:	.text "HexStore"	;  name of word as a string, ending at wh_NameLastChar
>ab38	08					.byte *-L1	;wh_NameLength	length of name
>ab39	5c aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab3b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab3c	18					.byte UF+NN	;wh_Flags	dictionary flags
=43704					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab3d					Hexstore:
.ab3d	20 a8 b2	jsr $b2a8			jsr underflow_3
.ab40	20 45 cd	jsr $cd45			jsr Dup		; Save copy of original address
.ab43	20 25 c4	jsr $c425			jsr Two_to_r		; ( addr1 u1 ) ( R: addr2 addr2 )
.ab46					_loop:
.ab46	b5 25		lda $25,x			lda DStack+0,x
.ab48	15 26		ora $26,x			ora DStack+1,x
.ab4a	f0 37		beq $ab83			beq _done
.ab4c	20 e1 aa	jsr $aae1			jsr Cleave		; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.ab4f	20 25 c4	jsr $c425			jsr Two_to_r
.ab52	20 31 b6	jsr $b631			jsr Zero
.ab55	20 31 b6	jsr $b631			jsr Zero
.ab58	20 00 c4	jsr $c400			jsr Two_r_from	; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.ab5b	20 82 ae	jsr $ae82			jsr To_Number	; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.ab5e	b5 25		lda $25,x			lda DStack+0,x
.ab60	15 26		ora $26,x			ora DStack+1,x
.ab62	d0 18		bne $ab7c			bne _have_chars_left
.ab64	20 12 c3	jsr $c312			jsr Two_drop		; ( addr1 u1 n n ) ( R: addr2 addr2 )
.ab67	20 52 be	jsr $be52			jsr D_To_S		; ( addr1 u1 n ) ( R: addr2 addr2 )
.ab6a	20 05 cd	jsr $cd05			jsr R_Fetch		; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.ab6d	20 5b cb	jsr $cb5b			jsr C_Store		; ( addr1 u1 ) ( R: addr2 addr2 )
.ab70	20 e9 cc	jsr $cce9			jsr R_From		; R>
.ab73	20 47 c8	jsr $c847			jsr One_plus		; 1+
.ab76	20 ca cc	jsr $ccca			jsr To_R		; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.ab79	4c 46 ab	jmp $ab46			jmp _loop
.ab7c					_have_chars_left:
.ab7c	8a		txa				txa
.ab7d	18		clc				clc
.ab7e	69 08		adc #$08			adc #8
.ab80	aa		tax				tax
.ab81	d0 c3		bne $ab46			bne _loop
.ab83					_done:
.ab83	e8		inx				inx
.ab84	e8		inx				inx
.ab85	e8		inx				inx
.ab86	e8		inx				inx			; 2DROP
.ab87	20 00 c4	jsr $c400			jsr Two_r_from		; ( addr2+n addr2 )
.ab8a	20 63 cd	jsr $cd63			jsr Swap
.ab8d	4c a8 c9	jmp $c9a8			jmp Minus		; ( n )
=83					CL	.var *-(WordListLink+wh_Xt)
=$ab90					en = *	; remember here
>ab3b	53					.byte CL	;wh_CodeLength
>ab90	57 69 74 68 69 6e		L1:	.text "Within"	;  name of word as a string, ending at wh_NameLastChar
>ab96	06					.byte *-L1	;wh_NameLength	length of name
>ab97	b8 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab99	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab9a	18					.byte UF+NN	;wh_Flags	dictionary flags
=43798					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab9b					Within:
.ab9b	20 a8 b2	jsr $b2a8			jsr underflow_3
.ab9e	20 1c cd	jsr $cd1c			jsr Over
.aba1	20 a8 c9	jsr $c9a8			jsr Minus
.aba4	20 ca cc	jsr $ccca			jsr To_R
.aba7	20 a8 c9	jsr $c9a8			jsr Minus
.abaa	20 e9 cc	jsr $cce9			jsr R_From
.abad	4c 69 c6	jmp $c669			jmp U_Less_Than
=21					CL	.var *-(WordListLink+wh_Xt)
=$abb0					en = *	; remember here
>ab99	15					.byte CL	;wh_CodeLength
>abb0	5c				L1:	.text "\"	;  name of word as a string, ending at wh_NameLastChar
>abb1	01					.byte *-L1	;wh_NameLength	length of name
>abb2	16 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abb4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abb5	0c					.byte IM+NN	;wh_Flags	dictionary flags
=43825					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abb6					Backslash:
.abb6	ad 0c 03	lda $030c			lda BlkV+0		; interpreting a block?
.abb9	0d 0d 03	ora $030d			ora BlkV+1
.abbc	f0 0e		beq $abcc			beq _not_block
.abbe	a5 08		lda $08		                lda toin+0		; Move toin to next multiple of 64.
.abc0	29 c0		and #$c0	                and #$C0        	;   Clear lower bits to move to beginning of line.
.abc2	18		clc		                clc             	;   Add $40 (64 decimal) to move to next line.
.abc3	69 40		adc #$40	                adc #$40
.abc5	85 08		sta $08		                sta toin+0
.abc7	90 0b		bcc $abd4	                bcc _rts
.abc9	e6 09		inc $09		                inc toin+1
.abcb	60		rts				rts
.abcc					_not_block:
.abcc	a5 06		lda $06		                lda ciblen+0
.abce	85 08		sta $08		                sta toin+0
.abd0	a5 07		lda $07		                lda ciblen+1
.abd2	85 09		sta $09		                sta toin+1
=30					CL	.var *-(WordListLink+wh_Xt)
=$abd4					en = *	; remember here
>abb4	1e					.byte CL	;wh_CodeLength
.abd4	60		rts		_rts:		rts
>abd5	4d 6f 76 65			L1:	.text "Move"	;  name of word as a string, ending at wh_NameLastChar
>abd9	04					.byte *-L1	;wh_NameLength	length of name
>abda	31 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abdc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abdd	18					.byte NN+UF	;wh_Flags	dictionary flags
=43865					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abde					Move:
.abde	b5 28		lda $28,x			lda DStack+3,x		; MSB of addr2
.abe0	d5 2a		cmp $2a,x			cmp DStack+5,x		; MSB of addr1
.abe2	d0 04		bne $abe8			bne _ne
.abe4	b5 27		lda $27,x			lda DStack+2,x		; LSB of addr2
.abe6	d5 29		cmp $29,x			cmp DStack+4,x		; LSB of addr1
.abe8	90 5a		bcc $ac44	_ne:		bcc CMove
.abea	d0 11		bne $abfd			bne CMove_up
.abec					_equal:
.abec	8a		txa		ThreeDrop:	txa		; drop three entries from Data Stack
.abed	18		clc				clc
.abee	69 06		adc #$06			adc #6
.abf0	aa		tax				tax
=19					CL	.var *-(WordListLink+wh_Xt)
=$abf1					en = *	; remember here
>abdc	13					.byte CL	;wh_CodeLength
.abf1	60		rts				rts
>abf2	43 4d 6f 76 65 3e		L1:	.text "CMove>"	;  name of word as a string, ending at wh_NameLastChar
>abf8	06					.byte *-L1	;wh_NameLength	length of name
>abf9	59 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abfb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abfc	18					.byte UF+NN	;wh_Flags	dictionary flags
=43896					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abfd					CMove_up:
.abfd	20 a8 b2	jsr $b2a8			jsr underflow_3
.ac00	b5 27		lda $27,x			lda DStack+2,x
.ac02	85 17		sta $17				sta tmp2	; use tmp2 because easier to remember
.ac04	b5 28		lda $28,x			lda DStack+3,x
.ac06	18		clc				clc
.ac07	75 26		adc $26,x			adc DStack+1,x
.ac09	85 18		sta $18				sta tmp2+1	; point to last page of destination
.ac0b	b5 29		lda $29,x			lda DStack+4,x
.ac0d	85 15		sta $15				sta tmp1	; use tmp1 because easier to remember
.ac0f	b5 2a		lda $2a,x			lda DStack+5,x
.ac11	18		clc				clc
.ac12	75 26		adc $26,x			adc DStack+1,x
.ac14	85 16		sta $16				sta tmp1+1	; point to last page of source
.ac16	f6 26		inc $26,x			inc DStack+1,x	; allows us to use bne with dec DStack+1,x below
.ac18	b4 25		ldy $25,x			ldy DStack+0,x	; length of last page
.ac1a	f0 10		beq $ac2c			beq _nopartial
.ac1c					_outerloop:
.ac1c	88		dey				dey
.ac1d	f0 07		beq $ac26			beq _finishpage
.ac1f					_innerloop:
.ac1f	b1 15		lda ($15),y			lda (tmp1),y
.ac21	91 17		sta ($17),y			sta (tmp2),y
.ac23	88		dey				dey
.ac24	d0 f9		bne $ac1f			bne _innerloop
.ac26					_finishpage:
.ac26	a0 00		ldy #$00			ldy #0
.ac28	b1 15		lda ($15),y			lda (tmp1),y	; handle y = 0 separately
.ac2a	91 17		sta ($17),y			sta (tmp2),y
.ac2c					_nopartial:
.ac2c	c6 16		dec $16				dec tmp1+1	; back up to previous pages
.ac2e	c6 18		dec $18				dec tmp2+1
.ac30	d6 26		dec $26,x			dec DStack+1,x
.ac32	d0 e8		bne $ac1c			bne _outerloop
.ac34					_done:
.ac34	4c ec ab	jmp $abec			jmp ThreeDrop	; clear up the stack and leave
=58					CL	.var *-(WordListLink+wh_Xt)
=$ac37					en = *	; remember here
>abfb	3a					.byte CL	;wh_CodeLength
.ac37	4c 7a b2	jmp $b27a	Throw_Underflow_14: jmp Throw_Underflow
>ac3a	43 4d 6f 76 65			L1:	.text "CMove"	;  name of word as a string, ending at wh_NameLastChar
>ac3f	05					.byte *-L1	;wh_NameLength	length of name
>ac40	78 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac42	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac43	18					.byte UF+NN	;wh_Flags	dictionary flags
=43967					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac44					CMove:
.ac44	20 a8 b2	jsr $b2a8			jsr underflow_3
.ac47	b5 27		lda $27,x			lda DStack+2,x
.ac49	85 17		sta $17				sta tmp2	; use tmp2 because easier to remember
.ac4b	b5 28		lda $28,x			lda DStack+3,x
.ac4d	85 18		sta $18				sta tmp2+1
.ac4f	b5 29		lda $29,x			lda DStack+4,x
.ac51	85 15		sta $15				sta tmp1	; use tmp1 because easier to remember
.ac53	b5 2a		lda $2a,x			lda DStack+5,x
.ac55	85 16		sta $16				sta tmp1+1
.ac57	a0 00		ldy #$00			ldy #0
.ac59	b5 26		lda $26,x			lda DStack+1,x	; number of whole pages to move
.ac5b	f0 0f		beq $ac6c			beq _dopartial
.ac5d					_page:
.ac5d	b1 15		lda ($15),y			lda (tmp1),y
.ac5f	91 17		sta ($17),y			sta (tmp2),y
.ac61	c8		iny				iny
.ac62	d0 f9		bne $ac5d			bne _page
.ac64	e6 16		inc $16				inc tmp1+1
.ac66	e6 18		inc $18				inc tmp2+1
.ac68	d6 26		dec $26,x			dec DStack+1,x
.ac6a	d0 f1		bne $ac5d			bne _page
.ac6c					_dopartial:
.ac6c	b5 25		lda $25,x			lda DStack+0,x	; length of last page
.ac6e	f0 09		beq $ac79			beq _done
.ac70					_partial:
.ac70	b1 15		lda ($15),y			lda (tmp1),y
.ac72	91 17		sta ($17),y			sta (tmp2),y
.ac74	c8		iny				iny
.ac75	d6 25		dec $25,x			dec DStack+0,x
.ac77	d0 f7		bne $ac70			bne _partial
.ac79	4c ec ab	jmp $abec	_done:		jmp ThreeDrop	; clear the stack
=56					CL	.var *-(WordListLink+wh_Xt)
=$ac7c					en = *	; remember here
>ac42	38					.byte CL	;wh_CodeLength
>ac7c	55 4d 2a			L1:	.text "UM*"	;  name of word as a string, ending at wh_NameLastChar
>ac7f	03					.byte *-L1	;wh_NameLength	length of name
>ac80	bf ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac82	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac83	08					.byte NN	;wh_Flags	dictionary flags
=44031					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac84					UM_Star:
.ac84	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ac86	b0 af		bcs $ac37		bcs Throw_Underflow_14
.ac88	18		clc				clc		; tmp2= divsor-1
.ac89	b5 25		lda $25,x			lda DStack+0,x
.ac8b	e9 00		sbc #$00			sbc #0
.ac8d	85 17		sta $17				sta tmp2+0
.ac8f	b5 26		lda $26,x			lda DStack+1,x
.ac91	e9 00		sbc #$00			sbc #0
.ac93	85 18		sta $18				sta tmp2+1
.ac95	90 2e		bcc $acc5			bcc _zero	; is divisor zero?
.ac97	a9 00		lda #$00			lda #0
.ac99	85 15		sta $15				sta tmp1
.ac9b	86 19		stx $19				stx tmp3	; tested for exit from outer loop
.ac9d	ca		dex				dex
.ac9e	ca		dex				dex
.ac9f					_outer_loop:
.ac9f	a0 08		ldy #$08			ldy #8		; counter inner loop
.aca1	56 29		lsr $29,x			lsr DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.aca3					_inner_loop:
.aca3	90 0c		bcc $acb1			bcc _no_add
.aca5	85 16		sta $16				sta tmp1+1	; save time, don't CLC
.aca7	a5 15		lda $15				lda tmp1
.aca9	65 17		adc $17				adc tmp2
.acab	85 15		sta $15				sta tmp1
.acad	a5 16		lda $16				lda tmp1+1
.acaf	65 18		adc $18				adc tmp2+1
.acb1					_no_add:
.acb1	6a		ror a				ror
.acb2	66 15		ror $15				ror tmp1
.acb4	76 29		ror $29,x			ror DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.acb6	88		dey				dey
.acb7	d0 ea		bne $aca3			bne _inner_loop ; go back for one more shift?
.acb9	e8		inx				inx
.acba	e4 19		cpx $19				cpx tmp3
.acbc	d0 e1		bne $ac9f			bne _outer_loop ; go back for eight more shifts?
.acbe	95 26		sta $26,x			sta DStack+1,x
.acc0	a5 15		lda $15				lda tmp1
.acc2	95 25		sta $25,x			sta DStack+0,x
.acc4	60		rts				rts
.acc5	a9 00		lda #$00	_zero:		lda #0
.acc7	95 27		sta $27,x			sta DStack+2,x
.acc9	95 28		sta $28,x			sta DStack+3,x
.accb	60		rts				rts
=72					CL	.var *-(WordListLink+wh_Xt)
=$accc					en = *	; remember here
>ac82	48					.byte CL	;wh_CodeLength
>accc	4d 2a				L1:	.text "M*"	;  name of word as a string, ending at wh_NameLastChar
>acce	02					.byte *-L1	;wh_NameLength	length of name
>accf	ff ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>acd1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acd2	08					.byte NN	;wh_Flags	dictionary flags
=44110					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.acd3					M_Star:
.acd3	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.acd5	b0 6d		bcs $ad44		bcs Throw_Underflow_15
.acd7	b5 26		lda $26,x			lda DStack+1,x	; MSB of n1
.acd9	55 28		eor $28,x			eor DStack+3,x	; MSB of n2
.acdb	48		pha				pha
.acdc	20 84 c4	jsr $c484			jsr Abs
.acdf	20 63 cd	jsr $cd63			jsr Swap
.ace2	20 84 c4	jsr $c484			jsr Abs
.ace5	20 84 ac	jsr $ac84			jsr UM_Star		; ( d )
.ace8	68		pla				pla
.ace9	10 03		bpl $acee			bpl _done
.aceb	4c 9c c4	jmp $c49c			jmp DNegate
.acee					_done:
=27					CL	.var *-(WordListLink+wh_Xt)
=$acee					en = *	; remember here
>acd1	1b					.byte CL	;wh_CodeLength
.acee	60		rts				rts
>acef	2a				L1:	.text "*"	;  name of word as a string, ending at wh_NameLastChar
>acf0	01					.byte *-L1	;wh_NameLength	length of name
>acf1	4e ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>acf3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acf4	00					.byte 0	;wh_Flags	dictionary flags
=44144					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.acf5					Star:
.acf5	20 84 ac	jsr $ac84			jsr UM_Star
.acf8	e8		inx				inx		; UD>U	drop hi cell
.acf9	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$acfa					en = *	; remember here
>acf3	05					.byte CL	;wh_CodeLength
.acfa	60		rts				rts
>acfb	55 4d 2f 4d 6f 64		L1:	.text "UM/Mod"	;  name of word as a string, ending at wh_NameLastChar
>ad01	06					.byte *-L1	;wh_NameLength	length of name
>ad02	70 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad04	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad05	08					.byte NN	;wh_Flags	dictionary flags
=44161					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad06					UM_Slash_Mod:
.ad06	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ad08	b0 3a		bcs $ad44		bcs Throw_Underflow_15
.ad0a	b5 25		lda $25,x			lda DStack+0,x		; catch division by zero
.ad0c	15 26		ora $26,x			ora DStack+1,x
.ad0e	f0 2f		beq $ad3f			beq _DivByZero
.ad10	a0 10		ldy #$10			ldy #16			; for 16 bits
.ad12					_loop:
.ad12	36 29		rol $29,x			rol DStack+4,x		;   rotate low cell of dividend one bit left
.ad14	36 2a		rol $2a,x			rol DStack+5,x
.ad16	36 27		rol $27,x			rol DStack+2,x		;   rotate high cell of dividend one bit left
.ad18	36 28		rol $28,x			rol DStack+3,x
.ad1a	b0 0a		bcs $ad26			bcs _subtract		;   overflow?
.ad1c	b5 27		lda $27,x			lda DStack+2,x		;   dividend.hi >= divisor?
.ad1e	d5 25		cmp $25,x			cmp DStack+0,x
.ad20	b5 28		lda $28,x			lda DStack+3,x
.ad22	f5 26		sbc $26,x			sbc DStack+1,x
.ad24	90 0d		bcc $ad33			bcc _next
.ad26	b5 27		lda $27,x	_subtract:	lda DStack+2,x		;   dividend.hi -= divisor
.ad28	f5 25		sbc $25,x			sbc DStack+0,x
.ad2a	95 27		sta $27,x			sta DStack+2,x
.ad2c	b5 28		lda $28,x			lda DStack+3,x
.ad2e	f5 26		sbc $26,x			sbc DStack+1,x
.ad30	95 28		sta $28,x			sta DStack+3,x
.ad32	38		sec				sec			;   it always fits
.ad33	88		dey		_next:		dey			;  next
.ad34	d0 dc		bne $ad12			bne _loop
.ad36	36 29		rol $29,x			rol DStack+4,x		; finish rotating quotient bit in
.ad38	36 2a		rol $2a,x			rol DStack+5,x
.ad3a	e8		inx				inx			; drop divisor
.ad3b	e8		inx				inx
.ad3c	4c 63 cd	jmp $cd63			jmp Swap
.ad3f	a9 f6		lda #$f6	_DivByZero:	lda #$100+err_DivideBy0
.ad41	4c bf b2	jmp $b2bf			jmp ThrowA
=62					CL	.var *-(WordListLink+wh_Xt)
=$ad44					en = *	; remember here
>ad04	3e					.byte CL	;wh_CodeLength
.ad44	4c 7a b2	jmp $b27a	Throw_Underflow_15: jmp Throw_Underflow
>ad47	53 4d 2f 52 65 6d		L1:	.text "SM/Rem"	;  name of word as a string, ending at wh_NameLastChar
>ad4d	06					.byte *-L1	;wh_NameLength	length of name
>ad4e	81 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad50	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad51	08					.byte NN	;wh_Flags	dictionary flags
=44237					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad52					SM_Slash_Rem:
.ad52	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ad54	b0 ee		bcs $ad44		bcs Throw_Underflow_15
.ad56	b5 28		lda $28,x			lda DStack+3,x
.ad58	48		pha				pha
.ad59	b5 26		lda $26,x			lda DStack+1,x
.ad5b	55 28		eor $28,x			eor DStack+3,x
.ad5d	48		pha				pha
.ad5e	20 84 c4	jsr $c484			jsr Abs
.ad61	e8		inx				inx		; pretend we pushed n1 to R
.ad62	e8		inx				inx
.ad63	20 b9 c4	jsr $c4b9			jsr DAbs
.ad66	ca		dex				dex
.ad67	ca		dex				dex
.ad68	20 06 ad	jsr $ad06			jsr UM_Slash_Mod	; UM/MOD
.ad6b	68		pla				pla
.ad6c	10 03		bpl $ad71			bpl +
.ad6e	20 6b c4	jsr $c46b			jsr Negate
.ad71					+
.ad71	68		pla				pla
.ad72	10 07		bpl $ad7b			bpl _done
.ad74	e8		inx				inx		; pretend we pushed quotient to R
.ad75	e8		inx				inx
.ad76	20 6b c4	jsr $c46b			jsr Negate
.ad79	ca		dex				dex
.ad7a	ca		dex				dex
.ad7b					_done:
=41					CL	.var *-(WordListLink+wh_Xt)
=$ad7b					en = *	; remember here
>ad50	29					.byte CL	;wh_CodeLength
.ad7b	60		rts				rts
>ad7c	46 4d 2f 4d 6f 64		L1:	.text "FM/Mod"	;  name of word as a string, ending at wh_NameLastChar
>ad82	06					.byte *-L1	;wh_NameLength	length of name
>ad83	cd ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad85	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad86	08					.byte NN	;wh_Flags	dictionary flags
=44290					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad87					FM_Slash_Mod:
.ad87	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ad89	b0 b9		bcs $ad44		bcs Throw_Underflow_15
.ad8b	b5 26		lda $26,x			lda DStack+1,x	; MSB of n1
.ad8d	08		php				php		;  save sign
.ad8e	10 0e		bpl $ad9e			bpl _check_d
.ad90	e6 17		inc $17				inc tmp2	; set flag to negative for n1
.ad92	20 6b c4	jsr $c46b			jsr Negate	; NEGATE
.ad95	20 ca cc	jsr $ccca			jsr To_R	; >R
.ad98	20 9c c4	jsr $c49c			jsr DNegate	; DNEGATE
.ad9b	20 e9 cc	jsr $cce9			jsr R_From	; R>
.ad9e					_check_d:
.ad9e	b5 28		lda $28,x			lda DStack+3,x	; MSB of high word of d
.ada0	10 0d		bpl $adaf			bpl _multiply
.ada2	18		clc				clc
.ada3	b5 25		lda $25,x			lda DStack+0,x	; LSB of n1
.ada5	75 27		adc $27,x			adc DStack+2,x	; LSB of dh
.ada7	95 27		sta $27,x			sta DStack+2,x
.ada9	b5 26		lda $26,x			lda DStack+1,x	; MSB of n1
.adab	75 28		adc $28,x			adc DStack+3,x	; MSB of dh
.adad	95 28		sta $28,x			sta DStack+3,x
.adaf					_multiply:
.adaf	20 06 ad	jsr $ad06			jsr UM_Slash_Mod	; ( d n1 -- rem n2 )
.adb2	28		plp				plp
.adb3	10 07		bpl $adbc			bpl _done
.adb5	e8		inx				inx		; pretend that we SWAP
.adb6	e8		inx				inx
.adb7	20 6b c4	jsr $c46b			jsr Negate
.adba	ca		dex				dex
.adbb	ca		dex				dex
.adbc					_done:
=53					CL	.var *-(WordListLink+wh_Xt)
=$adbc					en = *	; remember here
>ad85	35					.byte CL	;wh_CodeLength
.adbc	60		rts				rts
>adbd	2f 4d 6f 64			L1:	.text "/Mod"	;  name of word as a string, ending at wh_NameLastChar
>adc1	04					.byte *-L1	;wh_NameLength	length of name
>adc2	02 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>adc4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>adc5	08					.byte NN	;wh_Flags	dictionary flags
=44353					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.adc6	20 45 cd	jsr $cd45	Slash_Mod:	jsr Dup			; ( n1 n_div n_div )
.adc9	a0 00		ldy #$00			ldy #0			; sign extend n1
.adcb	b5 2a		lda $2a,x			lda DStack+5,x
.adcd	10 01		bpl $add0			bpl +
.adcf	88		dey				dey
.add0	94 27		sty $27,x	+		sty DStack+2,x
.add2	94 28		sty $28,x			sty DStack+3,x		; ( d1 n_div )
.add4	4c 52 ad	jmp $ad52			jmp SM_Slash_Rem	; SM/REM
=17					CL	.var *-(WordListLink+wh_Xt)
=$add7					en = *	; remember here
>adc4	11					.byte CL	;wh_CodeLength
>add7	2f				L1:	.text "/"	;  name of word as a string, ending at wh_NameLastChar
>add8	01					.byte *-L1	;wh_NameLength	length of name
>add9	41 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>addb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>addc	08					.byte NN	;wh_Flags	dictionary flags
=44376					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.addd	20 c6 ad	jsr $adc6	Slash:		jsr Slash_Mod
.ade0	4c 6c c7	jmp $c76c			jmp Nip		; Nip remainder
=6					CL	.var *-(WordListLink+wh_Xt)
=$ade3					en = *	; remember here
>addb	06					.byte CL	;wh_CodeLength
>ade3	4d 6f 64			L1:	.text "Mod"	;  name of word as a string, ending at wh_NameLastChar
>ade6	03					.byte *-L1	;wh_NameLength	length of name
>ade7	58 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ade9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>adea	00					.byte 0	;wh_Flags	dictionary flags
=44390					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.adeb	20 c6 ad	jsr $adc6	Mod:		jsr Slash_Mod
.adee	e8		inx				inx		; Drop quotient
.adef	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$adf0					en = *	; remember here
>ade9	05					.byte CL	;wh_CodeLength
.adf0	60		rts				rts
>adf1	2a 2f 4d 6f 64			L1:	.text "*/Mod"	;  name of word as a string, ending at wh_NameLastChar
>adf6	05					.byte *-L1	;wh_NameLength	length of name
>adf7	66 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>adf9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>adfa	18					.byte UF+NN	;wh_Flags	dictionary flags
=44406					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.adfb					Star_Slash_Mod:
.adfb	20 a8 b2	jsr $b2a8			jsr underflow_3
.adfe	20 ca cc	jsr $ccca			jsr To_R
.ae01	20 d3 ac	jsr $acd3			jsr M_Star
.ae04	20 e9 cc	jsr $cce9			jsr R_From
.ae07	4c 52 ad	jmp $ad52			jmp SM_Slash_Rem
=15					CL	.var *-(WordListLink+wh_Xt)
=$ae0a					en = *	; remember here
>adf9	0f					.byte CL	;wh_CodeLength
>ae0a	2a 2f				L1:	.text "*/"	;  name of word as a string, ending at wh_NameLastChar
>ae0c	02					.byte *-L1	;wh_NameLength	length of name
>ae0d	76 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae0f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae10	08					.byte NN	;wh_Flags	dictionary flags
=44428					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae11					Star_Slash:
.ae11	20 fb ad	jsr $adfb			jsr Star_Slash_Mod
.ae14	4c 6c c7	jmp $c76c			jmp Nip			; mod
=6					CL	.var *-(WordListLink+wh_Xt)
=$ae17					en = *	; remember here
>ae0f	06					.byte CL	;wh_CodeLength
>ae17	45 76 61 6c 75 61 74 65		L1:	.text "Evaluate"	;  name of word as a string, ending at wh_NameLastChar
>ae1f	08					.byte *-L1	;wh_NameLength	length of name
>ae20	8c ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae22	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae23	18					.byte UF+NN	;wh_Flags	dictionary flags
=44447					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae24					Evaluate:
.ae24	20 a3 b2	jsr $b2a3			jsr underflow_2
.ae27	a9 00		lda #$00			lda #0
.ae29	85 15		sta $15				sta tmp1
.ae2b	b5 25		lda $25,x			lda DStack+0,x
.ae2d	15 26		ora $26,x			ora DStack+1,x
.ae2f	d0 07		bne $ae38			bne evaluate_got_work
.ae31	4c 12 c3	jmp $c312			jmp Two_Drop
.ae34					load_evaluate:
.ae34	a9 ff		lda #$ff			lda #$FF
.ae36	85 15		sta $15				sta tmp1
.ae38					load_evaluate_start:
.ae38					evaluate_got_work:
.ae38	ad 0d 03	lda $030d			lda BlkV+1	; Save the current value of BLK on the return stack.
.ae3b	48		pha				pha
.ae3c	ad 0c 03	lda $030c			lda BlkV+0
.ae3f	48		pha				pha
.ae40	a5 15		lda $15				lda tmp1	; See if we should zero BLK.
.ae42	d0 06		bne $ae4a			bne _nozero
.ae44	8d 0c 03	sta $030c			sta BlkV+0
.ae47	8d 0d 03	sta $030d			sta BlkV+1
.ae4a					_nozero:
.ae4a	20 01 c2	jsr $c201			jsr Input_To_R	; Save the input state to the Return Stack
.ae4d	a9 ff		lda #$ff			lda #$ff	; set SOURCE-ID to -1
.ae4f	85 02		sta $02				sta insrc+0
.ae51	85 03		sta $03				sta insrc+1
.ae53	a9 00		lda #$00			lda #0		; set >IN to zero
.ae55	85 08		sta $08				sta toin+0
.ae57	85 09		sta $09				sta toin+1
.ae59	20 50 b2	jsr $b250			jsr PopYA	; pop u
.ae5c	85 06		sta $06				sta ciblen+0
.ae5e	84 07		sty $07				sty ciblen+1
.ae60	20 50 b2	jsr $b250			jsr PopYA	; pop addr
.ae63	85 04		sta $04				sta cib+0
.ae65	84 05		sty $05				sty cib+1
.ae67	20 77 b3	jsr $b377			jsr interpret	; ( -- )
.ae6a	20 23 c2	jsr $c223			jsr R_To_Input	; restore variables
.ae6d	68		pla				pla		; Restore BLK from the return stack.
.ae6e	8d 0c 03	sta $030c			sta BlkV+0
.ae71	68		pla				pla
.ae72	8d 0d 03	sta $030d			sta BlkV+1
=81					CL	.var *-(WordListLink+wh_Xt)
=$ae75					en = *	; remember here
>ae22	51					.byte CL	;wh_CodeLength
.ae75	60		rts				rts
>ae76	3e 4e 75 6d 62 65 72		L1:	.text ">Number"	;  name of word as a string, ending at wh_NameLastChar
>ae7d	07					.byte *-L1	;wh_NameLength	length of name
>ae7e	9f ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae80	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae81	18					.byte UF+NN	;wh_Flags	dictionary flags
=44541					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae82					To_Number:
.ae82	20 ad b2	jsr $b2ad			jsr underflow_4
.ae85	b5 25		lda $25,x			lda DStack+0,x		; no chars left?
.ae87	f0 72		beq $aefb			beq _done
.ae89					_Char_loop:
.ae89	a1 27		lda ($27,x)			lda (DStack+2,x)		; Get next character
.ae8b	c9 30		cmp #$30			cmp #'0'		; convert to value (Digit_Question)
.ae8d	90 6c		bcc $aefb			bcc _done
.ae8f	c9 3a		cmp #$3a			cmp #'9'+1
.ae91	90 08		bcc $ae9b			bcc _digit
.ae93	29 df		and #$df			and #$df		;   ASCII uppercase
.ae95	c9 41		cmp #$41			cmp #'A'
.ae97	90 62		bcc $aefb			bcc _done
.ae99	e9 07		sbc #$07			sbc #7 ;'A'-'0'-10	;   to make 'A'=10 below
.ae9b	38		sec		_digit:		sec
.ae9c	e9 30		sbc #$30			sbc #'0'
.ae9e	cd 00 03	cmp $0300			cmp base		; must be < base
.aea1	b0 58		bcs $aefb			bcs _done
.aea3	48		pha				pha			; Save char value
.aea4	20 46 c3	jsr $c346			jsr Two_Over		;   copy ud to work (multiplicand)
.aea7	a9 00		lda #$00			lda #0			;   zero ud (product)
.aea9	95 2d		sta $2d,x			sta DStack+8,x
.aeab	95 2e		sta $2e,x			sta DStack+9,x
.aead	95 2f		sta $2f,x			sta DStack+10,x
.aeaf	95 30		sta $30,x			sta DStack+11,x
.aeb1	ad 00 03	lda $0300			lda base		;   get multiplier
.aeb4	d0 23		bne $aed9			bne _Mul_Test
.aeb6	48		pha		_Mul_Add:	pha			;   save multiplier
.aeb7	18		clc				clc			;   ud += work
.aeb8	b5 27		lda $27,x			lda DStack+2,x
.aeba	75 2f		adc $2f,x			adc DStack+10,x
.aebc	95 2f		sta $2f,x			sta DStack+10,x
.aebe	b5 28		lda $28,x			lda DStack+3,x
.aec0	75 30		adc $30,x			adc DStack+11,x
.aec2	95 30		sta $30,x			sta DStack+11,x
.aec4	b5 25		lda $25,x			lda DStack+0,x
.aec6	75 2d		adc $2d,x			adc DStack+8,x
.aec8	95 2d		sta $2d,x			sta DStack+8,x
.aeca	b5 26		lda $26,x			lda DStack+1,x
.aecc	75 2e		adc $2e,x			adc DStack+9,x
.aece	95 2e		sta $2e,x			sta DStack+9,x
.aed0	68		pla				pla			;   restore multiplier
.aed1	16 27		asl $27,x	_Mul_Shift:	asl DStack+2,x		;   work <<= 1
.aed3	36 28		rol $28,x			rol DStack+3,x
.aed5	36 25		rol $25,x			rol DStack+0,x
.aed7	36 26		rol $26,x			rol DStack+1,x
.aed9	4a		lsr a		_Mul_Test:	lsr a			;   shift multiplier
.aeda	b0 da		bcs $aeb6			bcs _Mul_Add
.aedc	d0 f3		bne $aed1			bne _Mul_Shift
.aede	e8		inx				inx			;   2Drop work
.aedf	e8		inx				inx
.aee0	e8		inx				inx
.aee1	e8		inx				inx
.aee2	68		pla				pla			; recover value
.aee3	18		clc				clc			; add to ud
.aee4	75 2b		adc $2b,x			adc DStack+6,x
.aee6	95 2b		sta $2b,x			sta DStack+6,x
.aee8	90 0a		bcc $aef4			bcc +
.aeea	f6 2c		inc $2c,x			inc DStack+7,x
.aeec	d0 06		bne $aef4			bne +
.aeee	f6 29		inc $29,x			inc DStack+4,x
.aef0	d0 02		bne $aef4			bne +
.aef2	f6 2a		inc $2a,x			inc DStack+5,x
.aef4					+
.aef4	20 51 c8	jsr $c851			jsr NOS_One_Plus	; consume the char
.aef7	d6 25		dec $25,x			dec DStack+0,x
.aef9	d0 8e		bne $ae89			bne _Char_loop
.aefb					_done:
=121					CL	.var *-(WordListLink+wh_Xt)
=$aefb					en = *	; remember here
>ae80	79					.byte CL	;wh_CodeLength
.aefb	60		rts				rts
>aefc	4e 75 6d 62 65 72		L1:	.text "Number"	;  name of word as a string, ending at wh_NameLastChar
>af02	06					.byte *-L1	;wh_NameLength	length of name
>af03	fd ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af05	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af06	18					.byte UF+NN	;wh_Flags	dictionary flags
=44674					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af07					Number:
.af07	20 a3 b2	jsr $b2a3			jsr underflow_2
.af0a	a9 00		lda #$00			lda #0
.af0c	85 1b		sta $1b				sta tmp4+0	; flag for double
.af0e	85 1c		sta $1c				sta tmp4+1	; flag for minus
.af10	ad 00 03	lda $0300			lda base
.af13	48		pha				pha
.af14	20 9f ca	jsr $ca9f			jsr Two_dup		; ( addr u addr u )
.af17	a1 27		lda ($27,x)			lda (DStack+2,x)	; get 1st char
.af19	20 db af	jsr $afdb			jsr _MinusCheck		; a minus sign?
.af1c	a0 0a		ldy #$0a			ldy #10			; decimal?
.af1e	c9 23		cmp #$23			cmp #'#'
.af20	f0 35		beq $af57			beq _base_changed
.af22	a0 10		ldy #$10			ldy #16			; hex?
.af24	c9 24		cmp #$24			cmp #'$'
.af26	f0 2f		beq $af57			beq _base_changed
.af28	a0 02		ldy #$02			ldy #2			; binary?
.af2a	c9 25		cmp #$25			cmp #'%'
.af2c	f0 29		beq $af57			beq _base_changed
.af2e	c9 27		cmp #$27			cmp #$27		; ASCII for "'"
.af30	d0 2f		bne $af61			bne _check_dot
.af32	b5 25		lda $25,x			lda DStack+0,x	; length=3 ?
.af34	c9 03		cmp #$03			cmp #3
.af36	d0 1c		bne $af54			bne _not_a_char
.af38	b5 27		lda $27,x			lda DStack+2,x	; LSB of address
.af3a	85 1d		sta $1d				sta tmp5
.af3c	b5 28		lda $28,x			lda DStack+3,x
.af3e	85 1e		sta $1e				sta tmp5+1
.af40	a0 02		ldy #$02			ldy #2
.af42	b1 1d		lda ($1d),y			lda (tmp5),y
.af44	c9 27		cmp #$27			cmp #$27	; ASCII for "'"
.af46	d0 0c		bne $af54			bne _not_a_char
.af48	88		dey				dey		; The char we want is between the single quotes.
.af49	b1 1d		lda ($1d),y			lda (tmp5),y
.af4b	95 27		sta $27,x			sta DStack+2,x
.af4d	a9 00		lda #$00			lda #0
.af4f	95 28		sta $28,x			sta DStack+3,x
.af51	4c b0 af	jmp $afb0			jmp _drop_original_string ; Single flag will drop the TOS for us.
.af54					_not_a_char:
.af54	4c 8d af	jmp $af8d			jmp _number_error
.af57					_base_changed:
.af57	8c 00 03	sty $0300			sty base	; Switch to the new base
.af5a	20 51 c8	jsr $c851			jsr NOS_One_Plus ; start one character later
.af5d	d6 25		dec $25,x			dec DStack+0,x	; decrease string length by one
.af5f	a1 27		lda ($27,x)			lda (DStack+2,x) ; Load the first char again
.af61					_check_dot:
.af61	20 db af	jsr $afdb			jsr _MinusCheck
.af64	b5 27		lda $27,x			lda DStack+2,x	; LSB of address
.af66	85 1d		sta $1d				sta tmp5
.af68	b5 28		lda $28,x			lda DStack+3,x
.af6a	85 1e		sta $1e				sta tmp5+1
.af6c	b4 25		ldy $25,x			ldy DStack+0,x	; Y now points to the first character after the string,
.af6e	88		dey				dey		; but we need the last character
.af6f	b1 1d		lda ($1d),y			lda (tmp5),y
.af71	c9 2e		cmp #$2e			cmp #'.'
.af73	d0 04		bne $af79			bne _main
.af75	c6 1b		dec $1b				dec tmp4	; Flag the fact
.af77	d6 25		dec $25,x			dec DStack+0,x	; reduce string length by one
.af79					_main:
.af79	20 9f ca	jsr $ca9f			jsr Two_Dup
.af7c	a9 00		lda #$00			lda #0
.af7e	95 29		sta $29,x			sta DStack+4,x	; clear ud
.af80	95 2a		sta $2a,x			sta DStack+5,x
.af82	95 2b		sta $2b,x			sta DStack+6,x
.af84	95 2c		sta $2c,x			sta DStack+7,x
.af86	20 82 ae	jsr $ae82			jsr To_Number	; ( ud addr u -- ud addr u )
.af89	b5 25		lda $25,x			lda DStack+0,x
.af8b	f0 1f		beq $afac			beq _all_converted
.af8d					_number_error:
.af8d	20 12 c3	jsr $c312			jsr Two_drop	; >NUMBER modified addr u
.af90	20 12 c3	jsr $c312			jsr Two_drop	; ud   (partially converted number)
.af93	a9 3e		lda #$3e			lda #'>'	; print the unknown
.af95	20 b3 cb	jsr $cbb3			jsr Emit_A	; word using the original addr u we saved at the beginning.
.af98	20 cd cb	jsr $cbcd			jsr Type
.af9b	a9 3c		lda #$3c			lda #'<'
.af9d	20 b3 cb	jsr $cbb3			jsr Emit_A
.afa0	20 c0 cb	jsr $cbc0			jsr Space
.afa3	68		pla				pla		; restore base
.afa4	8d 00 03	sta $0300			sta base
.afa7	a9 f3		lda #$f3			lda #$100+err_UndefinedWord
.afa9	4c bf b2	jmp $b2bf			jmp ThrowA
.afac					_all_converted:
.afac	e8		inx				inx		; Drop the current addr u
.afad	e8		inx				inx
.afae	e8		inx				inx
.afaf	e8		inx				inx
.afb0					_drop_original_string:
.afb0	20 1b be	jsr $be1b			jsr TwoNip	 ; Drop the original addr u
.afb3	a5 1b		lda $1b				lda tmp4	; flag for double
.afb5	f0 10		beq $afc7			beq _single
.afb7	a9 20		lda #$20			lda #%00100000
.afb9	05 0c		ora $0c				ora status
.afbb	85 0c		sta $0c				sta status
.afbd	a5 1c		lda $1c				lda tmp4+1
.afbf	f0 15		beq $afd6			beq _done	; no minus, all done
.afc1	20 9c c4	jsr $c49c			jsr DNegate
.afc4	4c d6 af	jmp $afd6			jmp _done
.afc7					_single:
.afc7	e8		inx				inx		; convert ud to u
.afc8	e8		inx				inx
.afc9	a9 df		lda #$df			lda #$ff-%00100000
.afcb	25 0c		and $0c				and status
.afcd	85 0c		sta $0c				sta status
.afcf	a5 1c		lda $1c				lda tmp4+1
.afd1	f0 03		beq $afd6			beq _done	; no minus, all done
.afd3	20 6b c4	jsr $c46b			jsr Negate
.afd6					_done:
.afd6	68		pla				pla
.afd7	8d 00 03	sta $0300			sta base
=211					CL	.var *-(WordListLink+wh_Xt)
=$afda					en = *	; remember here
>af05	d3					.byte CL	;wh_CodeLength
.afda	60		rts				rts
.afdb					_MinusCheck:
.afdb	c9 2d		cmp #$2d			cmp #'-'		; a minus sign?
.afdd	d0 09		bne $afe8			bne +
.afdf	c6 1c		dec $1c				dec tmp4+1		; set flag
.afe1	20 51 c8	jsr $c851			jsr NOS_One_Plus	; start one character later
.afe4	d6 25		dec $25,x			dec DStack+0,x		; decrease string length by one
.afe6	a1 27		lda ($27,x)			lda (DStack+2,x)	; get next char
.afe8	60		rts		+		rts
>afe9	48 65 78			L1:	.text "Hex"	;  name of word as a string, ending at wh_NameLastChar
>afec	03					.byte *-L1	;wh_NameLength	length of name
>afed	82 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>afef	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aff0	08					.byte NN	;wh_Flags	dictionary flags
=44908					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aff1	a9 10		lda #$10	Hex:		lda #16
.aff3	d0 0e		bne $b003			bne decimal_a
=4					CL	.var *-(WordListLink+wh_Xt)
=$aff5					en = *	; remember here
>afef	04					.byte CL	;wh_CodeLength
>aff5	44 65 63 69 6d 61 6c		L1:	.text "Decimal"	;  name of word as a string, ending at wh_NameLastChar
>affc	07					.byte *-L1	;wh_NameLength	length of name
>affd	6c af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>afff	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b000	00					.byte 0	;wh_Flags	dictionary flags
=44924					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b001	a9 0a		lda #$0a	Decimal:	lda #10
.b003	8d 00 03	sta $0300	decimal_a:	sta base+0
.b006	a9 00		lda #$00			lda #0
.b008	8d 01 03	sta $0301			sta base+1		; paranoid
=10					CL	.var *-(WordListLink+wh_Xt)
=$b00b					en = *	; remember here
>afff	0a					.byte CL	;wh_CodeLength
.b00b	60		rts				rts
>b00c	43 6f 75 6e 74			L1:	.text "Count"	;  name of word as a string, ending at wh_NameLastChar
>b011	05					.byte *-L1	;wh_NameLength	length of name
>b012	7c af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b014	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b015	18					.byte UF+NN	;wh_Flags	dictionary flags
=44945					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b016					Count:
.b016	20 8e b2	jsr $b28e			jsr underflow_1
.b019	a1 25		lda ($25,x)			lda (DStack+0,x)	; A= number of characters
.b01b	f6 25		inc $25,x			inc DStack+0,x		; move start address up by one
.b01d	d0 02		bne $b021			bne +
.b01f	f6 26		inc $26,x			inc DStack+1,x
.b021					+
.b021	4c 22 b6	jmp $b622			jmp PushZA		; push number of characters, return
=14					CL	.var *-(WordListLink+wh_Xt)
=$b024					en = *	; remember here
>b014	0e					.byte CL	;wh_CodeLength
>0742					DoLeave  .word ?	; head of leave addr patch chain
>0744					DoStkIndex: .byte ?
=8					DoStkDim = 8
>0745					DoIndexL: .fill DoStkDim
>074d					DoIndexH: .fill DoStkDim
>0755					DoFufaL:  .fill DoStkDim
>075d					DoFufaH:  .fill DoStkDim
>b024	3f 44 6f			L1:	.text "?Do"	;  name of word as a string, ending at wh_NameLastChar
>b027	03					.byte *-L1	;wh_NameLength	length of name
>b028	91 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b02a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b02b	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=44967					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b02c					Question_Do:
.b02c	20 74 b1	jsr $b174			jsr Do_Leave_Init
.b02f	a9 43		lda #$43			lda #<_runtime
.b031	a0 b0		ldy #$b0			ldy #>_runtime
.b033	20 23 cb	jsr $cb23			jsr Jsr_Comma_YA	; compile JSR _runtime
.b036	a9 d0		lda #$d0			lda #$d0		; compile BNE *+5
.b038	a0 03		ldy #$03			ldy #3
.b03a	20 fe ca	jsr $cafe			jsr Comma_YA
.b03d	20 57 b1	jsr $b157			jsr Leave		; compile JMP leave
.b040	4c 61 b0	jmp $b061			jmp Do_8		; finish
=23					CL	.var *-(WordListLink+wh_Xt)
=$b043					en = *	; remember here
>b02a	17					.byte CL	;wh_CodeLength
.b043					_runtime:
.b043	20 69 b0	jsr $b069			jsr Do_Runtime	; start normally (we assume TOS!=NOS)
.b046	a5 13		lda $13				lda DoIndex+0	; Are TOS and NOS equal?
.b048	f0 01		beq $b04b			beq _2
.b04a	60		rts				rts		; return Z=0 to signal continue
.b04b	a5 14		lda $14		_2:		lda DoIndex+1
.b04d	49 80		eor #$80			eor #$80
.b04f	60		rts				rts		; return Z
>b050	44 6f				L1:	.text "Do"	;  name of word as a string, ending at wh_NameLastChar
>b052	02					.byte *-L1	;wh_NameLength	length of name
>b053	a7 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b055	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b056	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b057					Do:
.b057	20 74 b1	jsr $b174			jsr Do_Leave_Init
.b05a	a9 69		lda #$69			lda #<Do_runtime
.b05c	a0 b0		ldy #$b0			ldy #>Do_runtime
.b05e	20 23 cb	jsr $cb23			jsr Jsr_Comma_YA	; compile JSR _runtime
.b061	20 13 c8	jsr $c813	Do_8:		jsr Here		; remember loop body start addr
.b064	a9 57		lda #$57			lda #<Do		; identifier
.b066	4c 22 b6	jmp $b622			jmp PushZA
=18					CL	.var *-(WordListLink+wh_Xt)
=$b069					en = *	; remember here
>b055	12					.byte CL	;wh_CodeLength
.b069					Do_Runtime:
.b069	ce 44 07	dec $0744			dec DoStkIndex		; alloc DO stack entry
.b06c	ac 44 07	ldy $0744			ldy DoStkIndex
.b06f	30 2d		bmi $b09e			bmi _TooDeep
.b071	a5 13		lda $13				lda DoIndex+0		; save previous DoIndex
.b073	99 45 07	sta $0745,y			sta DoIndexL,y
.b076	a5 14		lda $14				lda DoIndex+1
.b078	99 4d 07	sta $074d,y			sta DoIndexH,y
.b07b	38		sec				sec			; fudge factor (FUFA)= $8000 - limit
.b07c	a9 00		lda #$00			lda #0			;   the number that will trip the overflow flag
.b07e	f5 27		sbc $27,x			sbc DStack+2,x
.b080	99 55 07	sta $0755,y			sta DoFuFaL,y
.b083	a9 80		lda #$80			lda #$80
.b085	f5 28		sbc $28,x			sbc DStack+3,x
.b087	99 5d 07	sta $075d,y			sta DoFuFaH,y
.b08a	18		clc				clc			; index= FUFA plus original index
.b08b	b5 25		lda $25,x			lda DStack+0,x
.b08d	79 55 07	adc $0755,y			adc DoFuFaL,y
.b090	85 13		sta $13				sta DoIndex+0
.b092	b5 26		lda $26,x			lda DStack+1,x
.b094	79 5d 07	adc $075d,y			adc DoFuFaH,y
.b097	85 14		sta $14				sta DoIndex+1
.b099	e8		inx				inx			; Drop orig index
.b09a	e8		inx				inx
.b09b	e8		inx				inx			; Drop orig limit
.b09c	e8		inx				inx
.b09d	60		rts				rts			; return
.b09e	a9 f9		lda #$f9	_TooDeep:	lda #$100+err_DoLoop_TooDeep
.b0a0	20 bf b2	jsr $b2bf			jsr ThrowA
>b0a3	4c 6f 6f 70			L1:	.text "Loop"	;  name of word as a string, ending at wh_NameLastChar
>b0a7	04					.byte *-L1	;wh_NameLength	length of name
>b0a8	d2 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b0aa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b0ab	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45095					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b0ac					Loop:
.b0ac	a9 b3		lda #$b3			lda #<_Runtime
.b0ae	a0 b0		ldy #$b0			ldy #>_Runtime
.b0b0	4c cf b0	jmp $b0cf			jmp Plus_Loop_5
=7					CL	.var *-(WordListLink+wh_Xt)
=$b0b3					en = *	; remember here
>b0aa	07					.byte CL	;wh_CodeLength
.b0b3					_Runtime:
.b0b3	e6 13		inc $13				inc DoIndex+0
.b0b5	f0 02		beq $b0b9			beq _Runtime2
.b0b7	b8		clv				clv			; return V=0 to signal loop back
.b0b8	60		rts				rts
.b0b9	18		clc		_Runtime2:	clc
.b0ba	a5 14		lda $14				lda DoIndex+1		; handle carry from lo byte
.b0bc	69 01		adc #$01			adc #1
.b0be	85 14		sta $14				sta DoIndex+1
.b0c0	60		rts				rts			; return V to signal loop back
>b0c1	2b 4c 6f 6f 70			L1:	.text "+Loop"	;  name of word as a string, ending at wh_NameLastChar
>b0c6	05					.byte *-L1	;wh_NameLength	length of name
>b0c7	27 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b0c9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b0ca	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45126					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b0cb					Plus_Loop:
.b0cb	a9 d9		lda #$d9			lda #<Plus_Loop_Runtime
.b0cd	a0 b0		ldy #$b0			ldy #>Plus_Loop_Runtime
.b0cf	20 f0 b0	jsr $b0f0	Plus_Loop_5:	jsr Loop_End		; compile JSR _runtime, BVC back
.b0d2	a9 3c		lda #$3c			lda #<Unloop
.b0d4	a0 b1		ldy #$b1			ldy #>Unloop
.b0d6	4c 23 cb	jmp $cb23			jmp Jsr_Comma_YA	; compile JSR Unloop, return
=14					CL	.var *-(WordListLink+wh_Xt)
=$b0d9					en = *	; remember here
>b0c9	0e					.byte CL	;wh_CodeLength
.b0d9					Plus_Loop_Runtime:
.b0d9	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b0db	b0 10		bcs $b0ed		bcs Throw_Underflow_12
.b0dd	18		clc				clc			; DoIndex += step
.b0de	b5 25		lda $25,x			lda DStack+0,x
.b0e0	65 13		adc $13				adc DoIndex+0
.b0e2	85 13		sta $13				sta DoIndex+0
.b0e4	b5 26		lda $26,x			lda DStack+1,x
.b0e6	65 14		adc $14				adc DoIndex+1
.b0e8	85 14		sta $14				sta DoIndex+1
.b0ea	e8		inx				inx			; Drop step
.b0eb	e8		inx				inx
.b0ec	60		rts				rts			; return V=0 to signal loop back
.b0ed	4c 7a b2	jmp $b27a	Throw_Underflow_12: jmp Throw_Underflow
.b0f0					Loop_End:
.b0f0	20 23 cb	jsr $cb23			jsr Jsr_Comma_YA	; compile JSR runtime
.b0f3	20 34 b2	jsr $b234			jsr PopA		; check id
.b0f6	c9 57		cmp #$57			cmp #<Do
.b0f8	f0 05		beq $b0ff	Loop_End_3:	beq +
.b0fa	a9 ea		lda #$ea			lda #$100+err_ControlMismatch
.b0fc	20 bf b2	jsr $b2bf			jsr ThrowA
.b0ff					+
.b0ff	a9 50		lda #$50			lda #$50		; compile BVC body
.b101	20 50 a5	jsr $a550			jsr Branch_Comma
.b104	ac 42 07	ldy $0742			ldy DoLeave+0		; for each leave addr entry
.b107	ad 43 07	lda $0743			lda DoLeave+1
.b10a	f0 1b		beq $b127			beq _p9
.b10c	84 15		sty $15		_p1:		sty tmp1+0		;   save entry pointer
.b10e	85 16		sta $16				sta tmp1+1
.b110	a0 01		ldy #$01			ldy #1			;   save link
.b112	b1 15		lda ($15),y			lda (tmp1),y
.b114	48		pha				pha
.b115	88		dey				dey
.b116	b1 15		lda ($15),y			lda (tmp1),y
.b118	48		pha				pha
.b119	a5 00		lda $00				lda cp+0		;   patch addr
.b11b	91 15		sta ($15),y			sta (tmp1),y
.b11d	a5 01		lda $01				lda cp+1
.b11f	c8		iny				iny
.b120	91 15		sta ($15),y			sta (tmp1),y
.b122	68		pla				pla			;   get saved link
.b123	a8		tay				tay
.b124	68		pla				pla
.b125	d0 e5		bne $b10c			bne _p1
.b127					_p9:
.b127	20 50 b2	jsr $b250			jsr PopYA		; restore DoLeave
.b12a	8d 42 07	sta $0742			sta DoLeave+0
.b12d	8c 43 07	sty $0743			sty DoLeave+1
.b130	60		rts				rts
>b131	55 6e 6c 6f 6f 70		L1:	.text "Unloop"	;  name of word as a string, ending at wh_NameLastChar
>b137	06					.byte *-L1	;wh_NameLength	length of name
>b138	46 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b13a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b13b	09					.byte NN+CO	;wh_Flags	dictionary flags
=45239					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b13c					Unloop:
.b13c	ac 44 07	ldy $0744			ldy DoStkIndex
.b13f	b9 45 07	lda $0745,y			lda DoIndexL,y	; restore Index
.b142	85 13		sta $13				sta DoIndex+0
.b144	b9 4d 07	lda $074d,y			lda DoIndexH,y
.b147	85 14		sta $14				sta DoIndex+1
.b149	ee 44 07	inc $0744			inc DoStkIndex	; drop Do stack entry
=16					CL	.var *-(WordListLink+wh_Xt)
=$b14c					en = *	; remember here
>b13a	10					.byte CL	;wh_CodeLength
.b14c	60		rts				rts
>b14d	4c 65 61 76 65			L1:	.text "Leave"	;  name of word as a string, ending at wh_NameLastChar
>b152	05					.byte *-L1	;wh_NameLength	length of name
>b153	b7 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b155	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b156	0d					.byte IM+NN+CO	;wh_Flags	dictionary flags
=45266					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b157					Leave:
.b157	a9 4c		lda #$4c			lda #$4c	; JMP abs
.b159	20 e4 ca	jsr $cae4			jsr C_Comma_A
.b15c	a5 01		lda $01				lda cp+1	; save cp
.b15e	48		pha				pha
.b15f	a5 00		lda $00				lda cp+0
.b161	48		pha				pha
.b162	ad 42 07	lda $0742			lda DoLeave+0	; compile DoLeave link, patched later
.b165	ac 43 07	ldy $0743			ldy DoLeave+1
.b168	20 fe ca	jsr $cafe			jsr Comma_YA
.b16b	68		pla				pla		; update DoLeave
.b16c	8d 42 07	sta $0742			sta DoLeave+0
.b16f	68		pla				pla
.b170	8d 43 07	sta $0743			sta DoLeave+1
=28					CL	.var *-(WordListLink+wh_Xt)
=$b173					en = *	; remember here
>b155	1c					.byte CL	;wh_CodeLength
.b173	60		rts				rts
.b174					Do_Leave_Init:
.b174	ad 42 07	lda $0742			lda DoLeave+0
.b177	ac 43 07	ldy $0743			ldy DoLeave+1
.b17a	20 e0 b5	jsr $b5e0			jsr PushYA	; save old leave head
.b17d	a9 00		lda #$00			lda #0		; init
.b17f	8d 43 07	sta $0743			sta DoLeave+1
.b182	60		rts				rts
>b183	49				L1:	.text "I"	;  name of word as a string, ending at wh_NameLastChar
>b184	01					.byte *-L1	;wh_NameLength	length of name
>b185	d2 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b187	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b188	01					.byte CO	;wh_Flags	dictionary flags
=45316					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b189	ac 44 07	ldy $0744	I:		ldy DoStkIndex
.b18c	ca		dex				dex
.b18d	ca		dex				dex
.b18e	38		sec				sec		; n= fudged index - fudge factor (FUFA)
.b18f	a5 13		lda $13				lda DoIndex+0
.b191	f9 55 07	sbc $0755,y			sbc DoFuFaL,y
.b194	95 25		sta $25,x			sta DStack+0,x
.b196	a5 14		lda $14				lda DoIndex+1
.b198	f9 5d 07	sbc $075d,y			sbc DoFuFaH,y
.b19b	95 26		sta $26,x			sta DStack+1,x
=20					CL	.var *-(WordListLink+wh_Xt)
=$b19d					en = *	; remember here
>b187	14					.byte CL	;wh_CodeLength
.b19d	60		rts				rts
>b19e	4a				L1:	.text "J"	;  name of word as a string, ending at wh_NameLastChar
>b19f	01					.byte *-L1	;wh_NameLength	length of name
>b1a0	04 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b1a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b1a3	01					.byte CO	;wh_Flags	dictionary flags
=45343					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b1a4	ac 44 07	ldy $0744	J:		ldy DoStkIndex
.b1a7	ca		dex				dex
.b1a8	ca		dex				dex
.b1a9	38		sec				sec		; n= 2nd fudged index - 2nd fudge factor (FUFA)
.b1aa	b9 45 07	lda $0745,y			lda DoIndexL+0,y	; LSB
.b1ad	f9 56 07	sbc $0756,y			sbc DoFufaL+1,y
.b1b0	95 25		sta $25,x			sta DStack+0,x
.b1b2	b9 4d 07	lda $074d,y			lda DoIndexH+0,y	; MSB
.b1b5	f9 5e 07	sbc $075e,y			sbc DoFufaH+1,y
.b1b8	95 26		sta $26,x			sta DStack+1,x
=22					CL	.var *-(WordListLink+wh_Xt)
=$b1ba					en = *	; remember here
>b1a2	16					.byte CL	;wh_CodeLength
.b1ba	60		rts				rts
>b1bb	52 65 63 75 72 73 65		L1:	.text "Recurse"	;  name of word as a string, ending at wh_NameLastChar
>b1c2	07					.byte *-L1	;wh_NameLength	length of name
>b1c3	1f b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b1c5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b1c6	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45378					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b1c7					Recurse:
.b1c7	a5 0f		lda $0f				lda workword+0
.b1c9	a4 10		ldy $10				ldy workword+1
.b1cb	20 e0 b5	jsr $b5e0			jsr PushYA
.b1ce	24 0c		bit $0c				bit status		; does WORKWORD contain xt or nt?
.b1d0	50 03		bvc $b1d5			bvc +
.b1d2	20 04 bc	jsr $bc04			jsr Name_To_Int		; convert nt to xt
.b1d5					+
.b1d5	4c 20 cb	jmp $cb20			jmp Jsr_Comma		; compile JSR xt, return
=17					CL	.var *-(WordListLink+wh_Xt)
=$b1d8					en = *	; remember here
>b1c5	11					.byte CL	;wh_CodeLength
>b1d8	41 62 6f 72 74 22		L1:	.text 'Abort"'	;  name of word as a string, ending at wh_NameLastChar
>b1de	06					.byte *-L1	;wh_NameLength	length of name
>b1df	42 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b1e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b1e2	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45406					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b1e3					Abort_Quote:
.b1e3	20 45 b7	jsr $b745			jsr S_Quote		; compile the string literal
.b1e6	a0 b1		ldy #$b1			ldy #>_runtime		; compile JSR runtime, return
.b1e8	a9 ed		lda #$ed			lda #<_runtime
.b1ea	4c 23 cb	jmp $cb23			jmp Jsr_Comma_YA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b1ed					en = *	; remember here
>b1e1	0a					.byte CL	;wh_CodeLength
.b1ed					_runtime:
.b1ed	b5 29		lda $29,x			lda DStack+4,x
.b1ef	15 2a		ora $2a,x			ora DStack+5,x
.b1f1	d0 03		bne $b1f6			bne _do_abort	; true?
.b1f3	4c ec ab	jmp $abec			jmp ThreeDrop	; Drop three entries from the Data Stack
.b1f6					_do_abort:
.b1f6	20 cd cb	jsr $cbcd			jsr Type	; print string
.b1f9	20 ce a9	jsr $a9ce			jsr CR		; We follow Gforth in going to a new line
.b1fc	a9 fe		lda #$fe			lda #$100+err_AbortQuote
.b1fe	4c bf b2	jmp $b2bf			jmp ThrowA
>b201	41 62 6f 72 74			L1:	.text "Abort"	;  name of word as a string, ending at wh_NameLastChar
>b206	05					.byte *-L1	;wh_NameLength	length of name
>b207	5e b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b209	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b20a	08					.byte NN	;wh_Flags	dictionary flags
=45446					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b20b	a9 ff		lda #$ff	Abort:		lda #$100+err_Abort
.b20d	4c bf b2	jmp $b2bf			jmp ThrowA
=5					CL	.var *-(WordListLink+wh_Xt)
=$b210					en = *	; remember here
>b209	05					.byte CL	;wh_CodeLength
>b210	3f 53 74 61 63 6b		L1:	.text "?Stack"	;  name of word as a string, ending at wh_NameLastChar
>b216	06					.byte *-L1	;wh_NameLength	length of name
>b217	86 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b219	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b21a	08					.byte NN	;wh_Flags	dictionary flags
=45462					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b21b	8a		txa		QStack:		txa
.b21c	30 58		bmi $b276			bmi Throw_Overflow
.b21e	e0 29		cpx #$29			cpx #DStack0+1		; check data stack (UnderflowCheck)
.b220	b0 58		bcs $b27a			bcs Throw_Underflow
.b222	a4 4d		ldy $4d				ldy fp			; check floating point stack
.b224	30 44		bmi $b26a			bmi Throw_FPOverflow
.b226	c0 0b		cpy #$0b			cpy #FDim+1
.b228	b0 44		bcs $b26e			bcs Throw_FPUnderflow
.b22a	60		rts				rts			; all OK
>b22b	50 6f 70 41			L1:	.text "PopA"	;  name of word as a string, ending at wh_NameLastChar
>b22f	04					.byte *-L1	;wh_NameLength	length of name
>b230	96 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b232	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b233	08					.byte NN	;wh_Flags	dictionary flags
=45487					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b234					PopA:
.b234	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b236	b0 42		bcs $b27a		bcs Throw_Underflow
.b238	b5 25		lda $25,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b23a	e8		inx				inx
.b23b	e8		inx				inx
=8					CL	.var *-(WordListLink+wh_Xt)
=$b23c					en = *	; remember here
>b232	08					.byte CL	;wh_CodeLength
.b23c	60		rts		                rts
.b23d					PopA2:
.b23d	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b23f	b0 39		bcs $b27a		bcs Throw_Underflow
.b241	b5 25		lda $25,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b243	e8		inx				inx
.b244	e8		inx				inx
.b245	60		rts		                rts
>b246	50 6f 70 59 41			L1:	.text "PopYA"	;  name of word as a string, ending at wh_NameLastChar
>b24b	05					.byte *-L1	;wh_NameLength	length of name
>b24c	af b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b24e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b24f	08					.byte NN	;wh_Flags	dictionary flags
=45515					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b250					PopYA:
.b250	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b252	b0 26		bcs $b27a		bcs Throw_Underflow
.b254	b5 25		lda $25,x			lda DStack+0,x		; pop TOS to YA
.b256	b4 26		ldy $26,x			ldy DStack+1,x
.b258	e8		inx				inx
.b259	e8		inx				inx
=10					CL	.var *-(WordListLink+wh_Xt)
=$b25a					en = *	; remember here
>b24e	0a					.byte CL	;wh_CodeLength
.b25a	60		rts				rts
.b25b					PopTmp1:
.b25b	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b25d	b0 1b		bcs $b27a		bcs Throw_Underflow
.b25f	b5 25		lda $25,x			lda DStack+0,x	; PopYA
.b261	b4 26		ldy $26,x			ldy DStack+1,x
.b263	e8		inx				inx
.b264	e8		inx				inx
.b265	85 15		sta $15				sta tmp1+0
.b267	84 16		sty $16				sty tmp1+1
.b269	60		rts				rts
.b26a					Throw_FPOverflow:
.b26a	a9 d4		lda #$d4			lda #$100+err_FPStackOverflow
.b26c	d0 51		bne $b2bf			bne ThrowA
.b26e					Throw_FPUnderflow:
.b26e	a9 d3		lda #$d3			lda #$100+err_FPStackUnderflow
.b270	d0 4d		bne $b2bf			bne ThrowA
.b272					Throw_FpOutOfRange:
.b272	a9 d5		lda #$d5			lda #$100+err_FpOutOfRange
.b274	d0 49		bne $b2bf			bne ThrowA
.b276	a9 fd		lda #$fd	Throw_Overflow:	lda #$100+err_Stack_Overflow
.b278	d0 45		bne $b2bf			bne ThrowA
.b27a					Throw_Underflow:
.b27a	a9 fc		lda #$fc			lda #$100+err_Stack_Underflow
.b27c	d0 41		bne $b2bf			bne ThrowA
>b27e	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_1"	;  name of word as a string, ending at wh_NameLastChar
>b286	77 5f 31
>b289	0b					.byte *-L1	;wh_NameLength	length of name
>b28a	cb b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b28c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b28d	08					.byte NN	;wh_Flags	dictionary flags
=45577					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b28e					underflow_1:
.b28e	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b290	b0 e8		bcs $b27a		bcs Throw_Underflow
=4					CL	.var *-(WordListLink+wh_Xt)
=$b292					en = *	; remember here
>b28c	04					.byte CL	;wh_CodeLength
.b292	60		rts				rts
>b293	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_2"	;  name of word as a string, ending at wh_NameLastChar
>b29b	77 5f 32
>b29e	0b					.byte *-L1	;wh_NameLength	length of name
>b29f	09 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2a1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2a2	08					.byte NN	;wh_Flags	dictionary flags
=45598					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2a3					underflow_2:
.b2a3	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b2a5	b0 d3		bcs $b27a		bcs Throw_Underflow
=4					CL	.var *-(WordListLink+wh_Xt)
=$b2a7					en = *	; remember here
>b2a1	04					.byte CL	;wh_CodeLength
.b2a7	60		rts		                rts
.b2a8					underflow_3:
.b2a8	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.b2aa	b0 ce		bcs $b27a		bcs Throw_Underflow
.b2ac	60		rts		                rts
.b2ad					underflow_4:
.b2ad	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.b2af	b0 c9		bcs $b27a		bcs Throw_Underflow
.b2b1	60		rts		                rts
>b2b2	54 68 72 6f 77			L1:	.text "Throw"	;  name of word as a string, ending at wh_NameLastChar
>b2b7	05					.byte *-L1	;wh_NameLength	length of name
>b2b8	1e b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2ba	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2bb	08					.byte NN	;wh_Flags	dictionary flags
=45623					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2bc	20 34 b2	jsr $b234	Throw:		jsr PopA		; pop n
.b2bf	20 e8 b2	jsr $b2e8	ThrowA:		jsr Type_Exception_Text_A ; print the associated error string
.b2c2					Abort_Core:
.b2c2	20 fc b6	jsr $b6fc			jsr SLiteral_runtime
.b2c5	4c cb b2	jmp $b2cb			  jmp +
>b2c8	3f 00 20					  .text "?",0," "	; signal an error to the simulator
.b2cb	20 cd cb	jsr $cbcd	+		jsr Type
.b2ce	20 e9 cc	jsr $cce9			jsr R_From		; show return stack TOS
.b2d1	20 9e 81	jsr $819e			jsr TypeSymbol
.b2d4	20 05 cd	jsr $cd05			jsr R_Fetch		; show return stack NOS
.b2d7	20 9e 81	jsr $819e			jsr TypeSymbol
.b2da	20 ce a9	jsr $a9ce			jsr CR
.b2dd					Abort_Core2:
.b2dd	a9 08		lda #$08			lda #DoStkDim		; init do stack
.b2df	8d 44 07	sta $0744			sta DoStkIndex
.b2e2	20 2c b3	jsr $b32c			jsr Empty_Stack		; empty the Data Stack & FP stack
.b2e5	4c 3c b3	jmp $b33c			jmp Quit		; continue into QUIT.
.b2e8					Type_Exception_Text_A:
.b2e8	85 17		sta $17				sta tmp2+0	; save error code
.b2ea	a9 4b		lda #$4b			lda #<Exception_Text_List
.b2ec	a0 d9		ldy #$d9			ldy #>Exception_Text_List	; for each table entry
.b2ee	85 19		sta $19				sta tmp3+0
.b2f0	84 1a		sty $1a				sty tmp3+1
.b2f2	a0 00		ldy #$00	_TestEntry:	ldy #0		;   code match?
.b2f4	b1 19		lda ($19),y			lda (tmp3),y
.b2f6	f0 1a		beq $b312			beq _NotFound
.b2f8	c5 17		cmp $17				cmp tmp2+0
.b2fa	f0 11		beq $b30d			beq _Found
.b2fc	c8		iny		-		iny		;   step to end of entry
.b2fd	b1 19		lda ($19),y			lda (tmp3),y
.b2ff	d0 fb		bne $b2fc			bne -
.b301	98		tya				tya		;   step to next entry
.b302	38		sec				sec
.b303	65 19		adc $19				adc tmp3+0
.b305	85 19		sta $19				sta tmp3+0
.b307	90 e9		bcc $b2f2			bcc _TestEntry
.b309	e6 1a		inc $1a				inc tmp3+1
.b30b	d0 e5		bne $b2f2			bne _TestEntry
.b30d					_Found:
.b30d	a0 01		ldy #$01			ldy #1
.b30f	4c f4 cb	jmp $cbf4			jmp Print_ASCIIZ_tmp3_no_lf
.b312	a0 ff		ldy #$ff	_NotFound:	ldy #$ff		; print code
.b314	a5 17		lda $17				lda tmp2+0
.b316	20 e0 b5	jsr $b5e0			jsr PushYA
.b319	4c c1 c9	jmp $c9c1			jmp Dot
>b31c	45 6d 70 74 79 2d 53 74		L1:	.text "Empty-Stack"	;  name of word as a string, ending at wh_NameLastChar
>b324	61 63 6b
>b327	0b					.byte *-L1	;wh_NameLength	length of name
>b328	37 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b32a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b32b	08					.byte NN	;wh_Flags	dictionary flags
=45735					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b32c					Empty_Stack:
.b32c	a2 28		ldx #$28			ldx #DStack0	; empty data stack
.b32e	a9 0a		lda #$0a			lda #FDim	; empty FP stack
.b330	85 4d		sta $4d				sta fp
=6					CL	.var *-(WordListLink+wh_Xt)
=$b332					en = *	; remember here
>b32a	06					.byte CL	;wh_CodeLength
.b332	60		rts				rts
>b333	51 75 69 74			L1:	.text "Quit"	;  name of word as a string, ending at wh_NameLastChar
>b337	04					.byte *-L1	;wh_NameLength	length of name
>b338	a7 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b33a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b33b	08					.byte NN	;wh_Flags	dictionary flags
=45751					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b33c					Quit:
.b33c	8a		txa				txa		; Save the DStack that we just defined
.b33d	a2 ff		ldx #$ff			ldx #rsp0
.b33f	9a		txs				txs
.b340	aa		tax				tax		; Restore the DStack. Dude, seriously.
.b341	a9 00		lda #$00			lda #0		; SOURCE-ID= zero (keyboard input)
.b343	85 02		sta $02				sta insrc+0
.b345	85 03		sta $03				sta insrc+1
.b347	20 6d b5	jsr $b56d			jsr Left_Bracket_NoCheck ; switch to interpret state
.b34a					_get_line:
.b34a	a9 00		lda #$00			lda #<buffer0	; input buffer, this is paranoid
.b34c	85 04		sta $04				sta cib+0
.b34e	a9 02		lda #$02			lda #>buffer0
.b350	85 05		sta $05				sta cib+1
.b352	20 85 c0	jsr $c085			jsr Refill		; ( -- f )
.b355	b5 25		lda $25,x			lda DStack+0,x
.b357	d0 05		bne $b35e			bne +
.b359	a9 6b		lda #$6b			lda #$100+err_Refill	; REFILL returned a FALSE flag, something went wrong
.b35b	4c bf b2	jmp $b2bf			jmp ThrowA
.b35e	e8		inx		+		inx			; drop the flag
.b35f	e8		inx				inx
.b360	20 77 b3	jsr $b377			jsr interpret
.b363	a5 0a		lda $0a				lda state
.b365	d0 06		bne $b36d			bne _print_compiled
.b367	a9 f7		lda #$f7			lda #<str_ok
.b369	a0 d8		ldy #$d8			ldy #>str_ok
.b36b	d0 04		bne $b371			bne _print
.b36d	a9 fb		lda #$fb	_print_compiled: lda #<str_compiled	; "compile" string
.b36f	a0 d8		ldy #$d8			ldy #>str_compiled
.b371	20 e8 cb	jsr $cbe8	_print:		jsr Print_ASCIIZ_YA
.b374	4c 4a b3	jmp $b34a			jmp _get_line
=59					CL	.var *-(WordListLink+wh_Xt)
=$b377					en = *	; remember here
>b33a	3b					.byte CL	;wh_CodeLength
.b377					Interpret:
.b377					_loop:
.b377	20 1b b2	jsr $b21b			jsr QStack		; check stack bounds
.b37a	20 cc b8	jsr $b8cc			jsr parse_name		; ( "string" -- addr u )
.b37d	b5 25		lda $25,x	                lda DStack+0,x		; empty line?
.b37f	f0 53		beq $b3d4	                beq _line_done
.b381	20 9f ca	jsr $ca9f			jsr Two_dup		; ( addr u -- addr u addr u )
.b384	20 0a bb	jsr $bb0a			jsr find_name		; ( addr u addr u -- addr u nt|0 )
.b387	b5 26		lda $26,x			lda DStack+1,x		; word found?
.b389	d0 1b		bne $b3a6			bne _got_name_token
.b38b	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.b38c	e8		inx		                inx
.b38d	20 07 af	jsr $af07	                jsr Number           ; ( addr u -- u|d )
.b390	a5 0a		lda $0a		                lda state		; interpreting?
.b392	f0 e3		beq $b377	                beq _loop		;   we're done
.b394	a9 20		lda #$20	                lda #$20		; double cell number?
.b396	24 0c		bit $0c		                bit status
.b398	f0 06		beq $b3a0	                beq _single_number
.b39a	20 a2 b6	jsr $b6a2			jsr Two_literal		; compile a double number
.b39d	4c 77 b3	jmp $b377			jmp _loop
.b3a0	20 93 b5	jsr $b593	_single_number:	jsr Literal		; compile a single number
.b3a3	4c 77 b3	jmp $b377			jmp _loop
.b3a6					_got_name_token:
.b3a6	20 6c c7	jsr $c76c			jsr Nip
.b3a9	20 6c c7	jsr $c76c			jsr Nip			; ( nt )
.b3ac	85 15		sta $15				sta tmp1+0		; save a work copy of nt
.b3ae	84 16		sty $16				sty tmp1+1
.b3b0	20 04 bc	jsr $bc04			jsr Name_To_Int		; ( nt -- xt )
.b3b3	a0 84		ldy #$84			ldy #Wh_Flags		; get word flags, we'll need them shortly
.b3b5	b1 15		lda ($15),y			lda (tmp1),y		;    using saved nt
.b3b7	a4 0a		ldy $0a				ldy state		; interpreting or compiling?
.b3b9	d0 0f		bne $b3ca			bne _compile
.b3bb	29 01		and #$01			and #CO			; is the word COMPILE-ONLY?
.b3bd	f0 05		beq $b3c4			beq _execute
.b3bf	a9 f2		lda #$f2			lda #$100+err_CompileOnly	;   complain & quit
.b3c1	4c bf b2	jmp $b2bf			jmp ThrowA
.b3c4	20 0b cc	jsr $cc0b	_execute:	jsr Execute		; EXECUTE the xt that is TOS
.b3c7	4c 77 b3	jmp $b377	                jmp _loop
.b3ca					_compile:
.b3ca	29 04		and #$04			and #IM			; is the word IMMEDIATE?
.b3cc	d0 f6		bne $b3c4			bne _execute		;   IMMEDIATE word, execute now
.b3ce	20 d5 b4	jsr $b4d5			jsr Compile_Comma	; Compile the xt into the Dictionary
.b3d1	4c 77 b3	jmp $b377			jmp _loop
.b3d4					_line_done:
.b3d4	e8		inx				inx			; drop stuff from PARSE_NAME
.b3d5	e8		inx				inx
.b3d6	e8		inx				inx
.b3d7	e8		inx				inx
.b3d8	60		rts				rts
>b3d9	49 6d 6d 65 64 69 61 74		L1:	.text "Immediate"	;  name of word as a string, ending at wh_NameLastChar
>b3e1	65
>b3e2	09					.byte *-L1	;wh_NameLength	length of name
>b3e3	b7 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b3e5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b3e6	08					.byte NN	;wh_Flags	dictionary flags
=45922					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b3e7	a9 04		lda #$04	Immediate:	lda #IM
.b3e9	48		pha		SetFlag:	pha
.b3ea	20 9d b8	jsr $b89d			jsr current_to_dp
.b3ed	a0 84		ldy #$84			ldy #Wh_Flags
.b3ef	68		pla				pla
.b3f0	11 11		ora ($11),y			ora (dp),y
.b3f2	91 11		sta ($11),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b3f4					en = *	; remember here
>b3e5	0d					.byte CL	;wh_CodeLength
.b3f4	60		rts				rts
>b3f5	43 6f 6d 70 69 6c 65 2d		L1:	.text "Compile-only"	;  name of word as a string, ending at wh_NameLastChar
>b3fd	6f 6e 6c 79
>b401	0c					.byte *-L1	;wh_NameLength	length of name
>b402	62 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b404	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b405	08					.byte NN	;wh_Flags	dictionary flags
=45953					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b406	a9 01		lda #$01	Compile_Only:	lda #CO
.b408	d0 df		bne $b3e9			bne SetFlag
=4					CL	.var *-(WordListLink+wh_Xt)
=$b40a					en = *	; remember here
>b404	04					.byte CL	;wh_CodeLength
>b40a	6e 65 76 65 72 2d 6e 61		L1:	.text "never-native"	;  name of word as a string, ending at wh_NameLastChar
>b412	74 69 76 65
>b416	0c					.byte *-L1	;wh_NameLength	length of name
>b417	81 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b419	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b41a	08					.byte NN	;wh_Flags	dictionary flags
=45974					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b41b	20 9d b8	jsr $b89d	Never_Native:	jsr current_to_dp
.b41e	a0 84		ldy #$84			ldy #Wh_Flags
.b420	b1 11		lda ($11),y			lda (dp),y
.b422	09 08		ora #$08			ora #NN		; set NN flag
.b424	29 fd		and #$fd			and #$ff-AN	; clear AN flag
.b426	91 11		sta ($11),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b428					en = *	; remember here
>b419	0d					.byte CL	;wh_CodeLength
.b428	60		rts				rts
>b429	61 6c 77 61 79 73 2d 6e		L1:	.text "always-native"	;  name of word as a string, ending at wh_NameLastChar
>b431	61 74 69 76 65
>b436	0d					.byte *-L1	;wh_NameLength	length of name
>b437	96 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b439	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b43a	08					.byte NN	;wh_Flags	dictionary flags
=46006					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b43b	20 9d b8	jsr $b89d	Always_Native:	jsr current_to_dp
.b43e	a0 84		ldy #$84			ldy #Wh_Flags
.b440	b1 11		lda ($11),y			lda (dp),y
.b442	09 02		ora #$02			ora #AN		; Make sure AN flag is set
.b444	29 f7		and #$f7			and #$ff-NN	; and NN flag is clear.
.b446	91 11		sta ($11),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b448					en = *	; remember here
>b439	0d					.byte CL	;wh_CodeLength
.b448	60		rts				rts
>b449	61 6c 6c 6f 77 2d 6e 61		L1:	.text "allow-native"	;  name of word as a string, ending at wh_NameLastChar
>b451	74 69 76 65
>b455	0c					.byte *-L1	;wh_NameLength	length of name
>b456	b6 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b458	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b459	08					.byte NN	;wh_Flags	dictionary flags
=46037					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b45a	20 9d b8	jsr $b89d	Allow_Native:	jsr current_to_dp
.b45d	a0 84		ldy #$84			ldy #Wh_Flags	; offset for status byte
.b45f	b1 11		lda ($11),y			lda (dp),y
.b461	29 f5		and #$f5			and #$ff-NN-AN	; AN and NN flag is clear.
.b463	91 11		sta ($11),y			sta (dp),y
=11					CL	.var *-(WordListLink+wh_Xt)
=$b465					en = *	; remember here
>b458	0b					.byte CL	;wh_CodeLength
.b465	60		rts				rts
>b466	6e 63 2d 6c 69 6d 69 74		L1:	.text "nc-limit"	;  name of word as a string, ending at wh_NameLastChar
>b46e	08					.byte *-L1	;wh_NameLength	length of name
>b46f	d5 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b471	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b472	08					.byte NN	;wh_Flags	dictionary flags
=46062					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b473	a9 02		lda #$02			lda #<nc_limit
.b475	a0 03		ldy #$03			ldy #>nc_limit
.b477	4c e0 b5	jmp $b5e0			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b47a					en = *	; remember here
>b471	07					.byte CL	;wh_CodeLength
>b47a	73 74 72 69 70 2d 75 6e		L1:	.text "strip-underflow"	;  name of word as a string, ending at wh_NameLastChar
>b482	64 65 72 66 6c 6f 77
>b489	0f					.byte *-L1	;wh_NameLength	length of name
>b48a	ee b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b48c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b48d	08					.byte NN	;wh_Flags	dictionary flags
=46089					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b48e	a9 04		lda #$04			lda #<uf_strip
.b490	a0 03		ldy #$03			ldy #>uf_strip
.b492	4c e0 b5	jmp $b5e0			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b495					en = *	; remember here
>b48c	07					.byte CL	;wh_CodeLength
>b495	70 6f 73 74 70 6f 6e 65		L1:	.text "postpone"	;  name of word as a string, ending at wh_NameLastChar
>b49d	08					.byte *-L1	;wh_NameLength	length of name
>b49e	09 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b4a0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b4a1	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=46109					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b4a2					Postpone:
.b4a2	20 fe b8	jsr $b8fe			jsr parse_name_check	; ( -- addr n )
.b4a5	20 36 bb	jsr $bb36			jsr find_name_check	; ( -- nt | 0 )
.b4a8	b5 25		lda $25,x			lda DStack+0,x
.b4aa	85 15		sta $15				sta tmp1+0
.b4ac	b5 26		lda $26,x			lda DStack+1,x
.b4ae	85 16		sta $16				sta tmp1+1
.b4b0	20 04 bc	jsr $bc04			jsr Name_To_Int	; ( nt -- xt )
.b4b3	a0 84		ldy #$84			ldy #Wh_Flags		; IMMEDIATE word?
.b4b5	b1 15		lda ($15),y			lda (tmp1),y		;    using saved nt
.b4b7	29 04		and #$04			and #IM
.b4b9	f0 03		beq $b4be			beq _not_immediate
.b4bb	4c d5 b4	jmp $b4d5			jmp Compile_Comma	; compile it
.b4be					_not_immediate:
.b4be	20 93 b5	jsr $b593			jsr Literal		; compile the xt of the word
.b4c1	a0 b4		ldy #$b4			ldy #>Compile_Comma	; compile COMPILE,
.b4c3	a9 d5		lda #$d5			lda #<Compile_Comma
.b4c5	4c 23 cb	jmp $cb23			jmp Jsr_Comma_YA
=38					CL	.var *-(WordListLink+wh_Xt)
=$b4c8					en = *	; remember here
>b4a0	26					.byte CL	;wh_CodeLength
>b4c8	43 6f 6d 70 69 6c 65 2c		L1:	.text "Compile,"	;  name of word as a string, ending at wh_NameLastChar
>b4d0	08					.byte *-L1	;wh_NameLength	length of name
>b4d1	1d b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b4d3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b4d4	08					.byte NN	;wh_Flags	dictionary flags
=46160					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b4d5	20 50 b2	jsr $b250	Compile_Comma:	jsr PopYA		; pop xt (check stack, skippable)
.b4d8	20 e0 b5	jsr $b5e0	Compile_Comma_YA: jsr PushYA		; push xt
.b4db	20 45 cd	jsr $cd45			jsr Dup			; ( xt xt )
.b4de	20 ad bb	jsr $bbad			jsr Int_To_Name		; ( xt nt )
.b4e1	b5 25		lda $25,x			lda DStack+0,x		; tmp5 = nt
.b4e3	85 1d		sta $1d				sta tmp5+0
.b4e5	b5 26		lda $26,x			lda DStack+1,x
.b4e7	85 1e		sta $1e				sta tmp5+1
.b4e9	f0 36		beq $b521			beq _jsr		; no nt found?
.b4eb	a0 83		ldy #$83			ldy #wh_CodeLength
.b4ed	b1 1d		lda ($1d),y			lda (tmp5),y
.b4ef	95 25		sta $25,x			sta DStack+0,x		; ( xt u )
.b4f1	a0 84		ldy #$84			ldy #Wh_Flags		; save word flags
.b4f3	b1 1d		lda ($1d),y			lda (tmp5),y
.b4f5	95 26		sta $26,x			sta DStack+1,x
.b4f7	29 02		and #$02			and #AN			; Always Native (AN) word?
.b4f9	d0 2b		bne $b526			bne _inline
.b4fb	b5 26		lda $26,x			lda DStack+1,x		; Never Native (NN) word?
.b4fd	29 08		and #$08			and #NN
.b4ff	d0 0e		bne $b50f			bne _jsr_opt
.b501	ad 03 03	lda $0303			lda nc_limit+1		; wordsize<=nc_limit?
.b504	d0 20		bne $b526			bne _inline
.b506	ad 02 03	lda $0302			lda nc_limit+0
.b509	d5 25		cmp $25,x			cmp DStack+0,x
.b50b	f0 02		beq $b50f			beq _jsr_opt
.b50d	b0 17		bcs $b526			bcs _inline
.b50f					_jsr_opt:
.b50f	ad 04 03	lda $0304			lda uf_strip
.b512	f0 0d		beq $b521			beq _jsr
.b514	b5 26		lda $26,x			lda DStack+1,x		; underflow strip & not stack strip?
.b516	49 10		eor #$10			eor #UF
.b518	29 50		and #$50			and #UF+R6
.b51a	d0 05		bne $b521			bne _jsr
.b51c	a9 03		lda #$03			lda #3			; skip the underflow check
.b51e	20 00 c8	jsr $c800			jsr Nos_plus_A
.b521					_jsr:
.b521	e8		inx				inx			; Drop len or nt
.b522	e8		inx				inx
.b523	4c 20 cb	jmp $cb20			jmp Jsr_Comma		; compile jsr, return
.b526					_inline:
.b526	b5 26		lda $26,x			lda DStack+1,x		; this word contains RTS addr save & restore?
.b528	29 40		and #$40			and #R6
.b52a	f0 0a		beq $b536			beq +
.b52c	a9 06		lda #$06			lda #6			;   Adjust xt: skip over the leading RTS addr save
.b52e	20 00 c8	jsr $c800			jsr Nos_plus_A
.b531	a9 f4		lda #$f4			lda #$f4		;   Adjust u: omit the leading RTS addr save & trailing RTS addr restore
.b533	20 36 c8	jsr $c836			jsr minus_a
.b536					+
.b536	ad 04 03	lda $0304			lda uf_strip+0		; user wants underflow stripping?
.b539	f0 10		beq $b54b			beq +
.b53b	b5 26		lda $26,x			lda DStack+1,x		; this word contains underflow checking?
.b53d	29 10		and #$10			and #UF
.b53f	f0 0a		beq $b54b			beq +
.b541	a9 03		lda #$03			lda #3			;   Adjust xt: Start after underflow check
.b543	20 00 c8	jsr $c800			jsr Nos_plus_A
.b546	a9 fd		lda #$fd			lda #$fd		;   Adjust u: omit underflow check
.b548	20 36 c8	jsr $c836			jsr minus_a
.b54b					+
.b54b	b5 25		lda $25,x			lda DStack+0,x		; compile code bytes
.b54d	f0 0c		beq $b55b			beq _copy_end
.b54f	a1 27		lda ($27,x)	_copy_loop:	lda (DStack+2,x)
.b551	20 e4 ca	jsr $cae4			jsr C_Comma_A
.b554	20 51 c8	jsr $c851			jsr NOS_One_Plus
.b557	d6 25		dec $25,x			dec DStack+0,x
.b559	d0 f4		bne $b54f			bne _copy_loop
.b55b					_copy_end:
.b55b	4c 12 c3	jmp $c312			jmp Two_drop
=137					CL	.var *-(WordListLink+wh_Xt)
=$b55e					en = *	; remember here
>b4d3	89					.byte CL	;wh_CodeLength
>b55e	5b				L1:	.text "["	;  name of word as a string, ending at wh_NameLastChar
>b55f	01					.byte *-L1	;wh_NameLength	length of name
>b560	50 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b562	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b563	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=46303					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b564	a5 0a		lda $0a		Left_Bracket:	lda state+0		; Already in the interpret state?
.b566	d0 05		bne $b56d			bne Left_Bracket_NoCheck
.b568	a9 69		lda #$69			lda #$100+err_NotCompiling
.b56a	4c bf b2	jmp $b2bf			jmp ThrowA
.b56d					Left_Bracket_NoCheck:
.b56d	a9 00		lda #$00			lda #0
.b56f	85 0a		sta $0a		Left_Bracket_3:	sta state+0
.b571	85 0b		sta $0b				sta state+1
=15					CL	.var *-(WordListLink+wh_Xt)
=$b573					en = *	; remember here
>b562	0f					.byte CL	;wh_CodeLength
.b573	60		rts				rts
>b574	5d				L1:	.text "]"	;  name of word as a string, ending at wh_NameLastChar
>b575	01					.byte *-L1	;wh_NameLength	length of name
>b576	df b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b578	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b579	0c					.byte IM+NN	;wh_Flags	dictionary flags
=46325					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b57a					Right_Bracket:
.b57a	a5 0a		lda $0a				lda state+0		; Already in the compile state?
.b57c	f0 05		beq $b583			beq +
.b57e	a9 68		lda #$68			lda #$100+err_AlreadyCompiling ;   complain and quit
.b580	4c bf b2	jmp $b2bf			jmp ThrowA
.b583					+
.b583	a9 ff		lda #$ff			lda #$FF
.b585	d0 e8		bne $b56f			bne Left_Bracket_3
=13					CL	.var *-(WordListLink+wh_Xt)
=$b587					en = *	; remember here
>b578	0d					.byte CL	;wh_CodeLength
>b587	4c 69 74 65 72 61 6c		L1:	.text "Literal"	;  name of word as a string, ending at wh_NameLastChar
>b58e	07					.byte *-L1	;wh_NameLength	length of name
>b58f	f5 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b591	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b592	1d					.byte IM+CO+UF+NN	;wh_Flags	dictionary flags
=46350					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b593					Literal:
.b593	20 8e b2	jsr $b28e			jsr underflow_1
.b596	20 9c b5	jsr $b59c			jsr LitCompile		; compile load regs, choose a runtime routine
.b599	4c d8 b4	jmp $b4d8			jmp Compile_Comma_YA	; compile JSR runtime
=9					CL	.var *-(WordListLink+wh_Xt)
=$b59c					en = *	; remember here
>b591	09					.byte CL	;wh_CodeLength
.b59c					LitCompile:
.b59c	b5 26		lda $26,x			lda DStack+1,x		; hi byte zero?
.b59e	f0 08		beq $b5a8			beq _ZByte
.b5a0	20 c6 b5	jsr $b5c6			jsr ldya_immed_comma	; compile "ldy #; lda #" using TOS
.b5a3	a9 e0		lda #$e0			lda #<PushYA		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b5a5	a0 b5		ldy #$b5			ldy #>PushYA
.b5a7	60		rts				rts
.b5a8					_ZByte:
.b5a8	b4 25		ldy $25,x			ldy DStack+0,x		; is it 0 ?
.b5aa	f0 08		beq $b5b4			beq _zero
.b5ac	20 cd b5	jsr $b5cd			jsr lda_immed_comma	; compile "lda #" using TOS
.b5af	a9 22		lda #$22			lda #<PushZA		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b5b1	a0 b6		ldy #$b6			ldy #>PushZA
.b5b3	60		rts				rts
.b5b4	e8		inx		_zero:		inx			; drop
.b5b5	e8		inx				inx
.b5b6	a9 31		lda #$31			lda #<Zero		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b5b8	a0 b6		ldy #$b6			ldy #>Zero
.b5ba	60		rts				rts
>b5bb	4c 44 59 41 23 2c		L1:	.text "LDYA#,"	;  name of word as a string, ending at wh_NameLastChar
>b5c1	06					.byte *-L1	;wh_NameLength	length of name
>b5c2	0e b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5c4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5c5	08					.byte NN	;wh_Flags	dictionary flags
=46401					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5c6					ldya_immed_comma:
.b5c6	a9 a0		lda #$a0			lda #$a0		; ldy #
.b5c8	b4 26		ldy $26,x			ldy DStack+1,x
.b5ca	20 fe ca	jsr $cafe			jsr Comma_YA
.b5cd					lda_immed_comma:
.b5cd	a9 a9		lda #$a9			lda #$a9		; lda #
.b5cf	20 e4 ca	jsr $cae4			jsr C_Comma_A
.b5d2	4c e1 ca	jmp $cae1			jmp C_Comma
=15					CL	.var *-(WordListLink+wh_Xt)
=$b5d5					en = *	; remember here
>b5c4	0f					.byte CL	;wh_CodeLength
>b5d5	50 75 73 68 59 41		L1:	.text "PushYA"	;  name of word as a string, ending at wh_NameLastChar
>b5db	06					.byte *-L1	;wh_NameLength	length of name
>b5dc	41 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5df	00					.byte 0	;wh_Flags	dictionary flags
=46427					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5e0	ca		dex		PushYA:		dex
.b5e1	ca		dex				dex
.b5e2	95 25		sta $25,x			sta DStack+0,x
.b5e4	94 26		sty $26,x			sty DStack+1,x
=6					CL	.var *-(WordListLink+wh_Xt)
=$b5e6					en = *	; remember here
>b5de	06					.byte CL	;wh_CodeLength
.b5e6	60		rts				rts
>b5e7	42 61 73 65			L1:	.text "Base"	;  name of word as a string, ending at wh_NameLastChar
>b5eb	04					.byte *-L1	;wh_NameLength	length of name
>b5ec	5b b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5ef	08					.byte NN	;wh_Flags	dictionary flags
=46443					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5f0	a9 00		lda #$00			lda #<base
.b5f2	a0 03		ldy #$03			ldy #>base
.b5f4	4c e0 b5	jmp $b5e0			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b5f7					en = *	; remember here
>b5ee	07					.byte CL	;wh_CodeLength
>b5f7	54 72 75 65			L1:	.text "True"	;  name of word as a string, ending at wh_NameLastChar
>b5fb	04					.byte *-L1	;wh_NameLength	length of name
>b5fc	6b b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5ff	00					.byte 0	;wh_Flags	dictionary flags
=46459					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b600	a9 ff		lda #$ff	True:		lda #$FF
.b602	ca		dex				dex
.b603	ca		dex				dex
.b604	95 25		sta $25,x			sta DStack+0,x
.b606	95 26		sta $26,x			sta DStack+1,x
=8					CL	.var *-(WordListLink+wh_Xt)
=$b608					en = *	; remember here
>b5fe	08					.byte CL	;wh_CodeLength
.b608	60		rts				rts
>b609	46 61 6c 73 65			L1:	.text "False"	;  name of word as a string, ending at wh_NameLastChar
>b60e	05					.byte *-L1	;wh_NameLength	length of name
>b60f	7b b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b611	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b612	08					.byte NN	;wh_Flags	dictionary flags
=46478					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b613	a9 00		lda #$00	False:		lda #0
.b615	f0 0b		beq $b622			beq PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b617					en = *	; remember here
>b611	04					.byte CL	;wh_CodeLength
>b617	50 75 73 68 5a 41		L1:	.text "PushZA"	;  name of word as a string, ending at wh_NameLastChar
>b61d	06					.byte *-L1	;wh_NameLength	length of name
>b61e	8e b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b620	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b621	00					.byte 0	;wh_Flags	dictionary flags
=46493					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b622	ca		dex		PushZA:		dex
.b623	ca		dex				dex
.b624	95 25		sta $25,x			sta DStack+0,x
.b626	a9 00		lda #$00			lda #0
.b628	95 26		sta $26,x			sta DStack+1,x
=8					CL	.var *-(WordListLink+wh_Xt)
=$b62a					en = *	; remember here
>b620	08					.byte CL	;wh_CodeLength
.b62a	60		rts				rts
>b62b	30				L1:	.text "0"	;  name of word as a string, ending at wh_NameLastChar
>b62c	01					.byte *-L1	;wh_NameLength	length of name
>b62d	9d b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b62f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b630	08					.byte NN	;wh_Flags	dictionary flags
=46508					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b631	a9 00		lda #$00	Zero:		lda #0
.b633	f0 ed		beq $b622			beq PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b635					en = *	; remember here
>b62f	04					.byte CL	;wh_CodeLength
>b635	31				L1:	.text "1"	;  name of word as a string, ending at wh_NameLastChar
>b636	01					.byte *-L1	;wh_NameLength	length of name
>b637	ac b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b639	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b63a	08					.byte NN	;wh_Flags	dictionary flags
=46518					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b63b	a9 01		lda #$01	One:		lda #1
.b63d	d0 e3		bne $b622			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b63f					en = *	; remember here
>b639	04					.byte CL	;wh_CodeLength
>b63f	32				L1:	.text "2"	;  name of word as a string, ending at wh_NameLastChar
>b640	01					.byte *-L1	;wh_NameLength	length of name
>b641	b6 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b643	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b644	08					.byte NN	;wh_Flags	dictionary flags
=46528					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b645	a9 02		lda #$02	Two:		lda #2
.b647	d0 d9		bne $b622			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b649					en = *	; remember here
>b643	04					.byte CL	;wh_CodeLength
>b649	42 6c				L1:	.text "Bl"	;  name of word as a string, ending at wh_NameLastChar
>b64b	02					.byte *-L1	;wh_NameLength	length of name
>b64c	c0 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b64e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b64f	08					.byte NN	;wh_Flags	dictionary flags
=46539					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b650	a9 20		lda #$20	Bl:		lda #AscSP
.b652	d0 ce		bne $b622			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b654					en = *	; remember here
>b64e	04					.byte CL	;wh_CodeLength
>b654	3e 49 6e			L1:	.text ">In"	;  name of word as a string, ending at wh_NameLastChar
>b657	03					.byte *-L1	;wh_NameLength	length of name
>b658	cb b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b65a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b65b	08					.byte NN	;wh_Flags	dictionary flags
=46551					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b65c	a9 08		lda #$08			lda #toin
.b65e	d0 c2		bne $b622			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b660					en = *	; remember here
>b65a	04					.byte CL	;wh_CodeLength
>b660	53 74 61 74 65			L1:	.text "State"	;  name of word as a string, ending at wh_NameLastChar
>b665	05					.byte *-L1	;wh_NameLength	length of name
>b666	d7 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b668	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b669	08					.byte NN	;wh_Flags	dictionary flags
=46565					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b66a	a9 0a		lda #$0a			lda #state
.b66c	d0 b4		bne $b622			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b66e					en = *	; remember here
>b668	04					.byte CL	;wh_CodeLength
>b66e	64 70				L1:	.text "dp"	;  name of word as a string, ending at wh_NameLastChar
>b670	02					.byte *-L1	;wh_NameLength	length of name
>b671	e5 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b673	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b674	08					.byte NN	;wh_Flags	dictionary flags
=46576					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b675	a9 11		lda #$11			lda #dp
.b677	d0 a9		bne $b622			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b679					en = *	; remember here
>b673	04					.byte CL	;wh_CodeLength
>b679	54 6d 70 31			L1:	.text "Tmp1"	;  name of word as a string, ending at wh_NameLastChar
>b67d	04					.byte *-L1	;wh_NameLength	length of name
>b67e	f0 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b680	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b681	08					.byte NN	;wh_Flags	dictionary flags
=46589					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b682	a9 15		lda #$15			lda #tmp1
.b684	d0 9c		bne $b622			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b686					en = *	; remember here
>b680	04					.byte CL	;wh_CodeLength
>b686	44 53 74 61 63 6b		L1:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
>b68c	06					.byte *-L1	;wh_NameLength	length of name
>b68d	fd b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b68f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b690	08					.byte NN	;wh_Flags	dictionary flags
=46604					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b691	a9 25		lda #$25			lda #DStack
.b693	d0 8d		bne $b622			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b695					en = *	; remember here
>b68f	04					.byte CL	;wh_CodeLength
>b695	32 4c 69 74 65 72 61 6c		L1:	.text "2Literal"	;  name of word as a string, ending at wh_NameLastChar
>b69d	08					.byte *-L1	;wh_NameLength	length of name
>b69e	0c b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6a0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6a1	1c					.byte UF+IM+NN	;wh_Flags	dictionary flags
=46621					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6a2					Two_literal:
.b6a2	20 a3 b2	jsr $b2a3			jsr underflow_2 ; double number
.b6a5	20 63 cd	jsr $cd63			jsr Swap
.b6a8	20 93 b5	jsr $b593			jsr Literal	; do lo cell
.b6ab	4c 93 b5	jmp $b593			jmp Literal	; do hi cell
=12					CL	.var *-(WordListLink+wh_Xt)
=$b6ae					en = *	; remember here
>b6a0	0c					.byte CL	;wh_CodeLength
>b6ae	53 4c 69 74 65 72 61 6c		L1:	.text "SLiteral"	;  name of word as a string, ending at wh_NameLastChar
>b6b6	08					.byte *-L1	;wh_NameLength	length of name
>b6b7	1d b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6b9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6ba	1d					.byte CO+IM+UF+NN	;wh_Flags	dictionary flags
=46646					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6bb					SLiteral:
.b6bb	20 a3 b2	jsr $b2a3			jsr underflow_2
.b6be	20 de b6	jsr $b6de			jsr SLiteral_Start	; compile header
.b6c1	4c d2 b6	jmp $b6d2			jmp _Move_Test
.b6c4	a1 29		lda ($29,x)	_Move_Loop:	lda (DStack+4,x)
.b6c6	20 e4 ca	jsr $cae4			jsr C_Comma_A
.b6c9	f6 29		inc $29,x			inc DStack+4,x
.b6cb	d0 02		bne $b6cf			bne +
.b6cd	f6 2a		inc $2a,x			inc DStack+5,x
.b6cf					+
.b6cf	20 2d c8	jsr $c82d			jsr NOS_One_Minus
.b6d2	b5 27		lda $27,x	_Move_Test:	lda DStack+2,x
.b6d4	15 28		ora $28,x			ora DStack+3,x
.b6d6	d0 ec		bne $b6c4			bne _Move_Loop
.b6d8	20 eb b6	jsr $b6eb			jsr SLiteral_End
.b6db	4c 12 c3	jmp $c312			jmp Two_Drop		; clean up and leave
=35					CL	.var *-(WordListLink+wh_Xt)
=$b6de					en = *	; remember here
>b6b9	23					.byte CL	;wh_CodeLength
.b6de					SLiteral_Start:
.b6de	a9 fc		lda #$fc			lda #<SLiteral_runtime	; compile JSR SLiteral_Runtime
.b6e0	a0 b6		ldy #$b6			ldy #>SLiteral_runtime
.b6e2	20 23 cb	jsr $cb23			jsr Jsr_Comma_YA
.b6e5	20 13 c8	jsr $c813			jsr Here		; push addr of start of JMP
.b6e8	4c 3a cb	jmp $cb3a			jmp Jmp_Comma_YA	; compile JMP around string (dummy addr)
.b6eb					SLiteral_End:
.b6eb	20 47 c8	jsr $c847			jsr One_Plus
.b6ee	a5 00		lda $00				lda cp+0		; Update the address of the jump to HERE.
.b6f0	81 25		sta ($25,x)			sta (DStack+0,x)
.b6f2	20 47 c8	jsr $c847			jsr One_Plus
.b6f5	a5 01		lda $01				lda cp+1
.b6f7	81 25		sta ($25,x)			sta (DStack+0,x)
.b6f9	e8		inx				inx			; drop herej
.b6fa	e8		inx				inx
.b6fb	60		rts				rts
.b6fc					SLiteral_Runtime:
.b6fc	86 17		stx $17				stx tmp2	; save data stack index
.b6fe	ba		tsx				tsx
.b6ff	bd 01 01	lda $0101,x	SLiteral_Run2:	lda RStack+1,x	; tmp1= RTS addr
.b702	85 15		sta $15				sta tmp1+0
.b704	bd 02 01	lda $0102,x			lda RStack+2,x
.b707	85 16		sta $16				sta tmp1+1
.b709	a6 17		ldx $17				ldx tmp2	; restore data stack index
.b70b	ca		dex				dex		; push string addr
.b70c	ca		dex				dex
.b70d	18		clc				clc
.b70e	a5 15		lda $15				lda tmp1+0
.b710	69 04		adc #$04			adc #3+1	;   just after the following JMP + correcting for JSR behavior
.b712	95 25		sta $25,x			sta DStack+0,x
.b714	a5 16		lda $16				lda tmp1+1
.b716	69 00		adc #$00			adc #0
.b718	95 26		sta $26,x			sta DStack+1,x
.b71a	ca		dex				dex		; push string length
.b71b	ca		dex				dex
.b71c	38		sec				sec
.b71d	a0 02		ldy #$02			ldy #2		;   = string_end - string_addr
.b71f	b1 15		lda ($15),y			lda (tmp1),y
.b721	f5 27		sbc $27,x			sbc DStack+2,x
.b723	95 25		sta $25,x			sta DStack+0,x
.b725	c8		iny				iny
.b726	b1 15		lda ($15),y			lda (tmp1),y
.b728	f5 28		sbc $28,x			sbc DStack+3,x
.b72a	95 26		sta $26,x			sta DStack+1,x
.b72c	60		rts				rts
>b72d	2e 22				L1:	.text '."'	;  name of word as a string, ending at wh_NameLastChar
>b72f	02					.byte *-L1	;wh_NameLength	length of name
>b730	36 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b732	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b733	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=46767					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b734					Dot_quote:
.b734	20 45 b7	jsr $b745			jsr S_Quote		; compile the string literal
.b737	a0 cb		ldy #$cb			ldy #>Type		; compile: print string
.b739	a9 cd		lda #$cd			lda #<Type
.b73b	4c 23 cb	jmp $cb23			jmp Jsr_Comma_YA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b73e					en = *	; remember here
>b732	0a					.byte CL	;wh_CodeLength
>b73e	53 22				L1:	.text 'S"'	;  name of word as a string, ending at wh_NameLastChar
>b740	02					.byte *-L1	;wh_NameLength	length of name
>b741	af b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b743	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b744	0c					.byte IM+NN	;wh_Flags	dictionary flags
=46784					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b745					S_Quote:
.b745	a9 00		lda #$00			lda #0		; Don't handle escaped chars.
.b747					S_Quote_start:
.b747	48		pha				pha			; save "handle escaped chars" flag
.b748	a5 0a		lda $0a				lda state		; compiling?
.b74a	f0 06		beq $b752			beq _15
.b74c	20 de b6	jsr $b6de			jsr SLiteral_Start	; compile SLiteral header
.b74f	4c 55 b7	jmp $b755			jmp _19
.b752	20 13 c8	jsr $c813	_15:		jsr Here		; remember start addr
.b755					_19:
.b755	68		pla				pla			; init t2 flags
.b756	20 22 b6	jsr $b622			jsr PushZA
.b759	20 31 b6	jsr $b631			jsr Zero		; init t3 flags
.b75c					_savechars_loop:
.b75c	a5 08		lda $08				lda toin+0		; LSB
.b75e	c5 06		cmp $06				cmp ciblen+0
.b760	a5 09		lda $09				lda toin+1		; MSB
.b762	e5 07		sbc $07				sbc ciblen+1
.b764	90 10		bcc $b776			bcc _input_fine		; input buffer empty?
.b766	20 85 c0	jsr $c085			jsr Refill		; Refill it  ( -- f )
.b769	b5 25		lda $25,x			lda DStack+0,x		; Check result of refill.
.b76b	d0 05		bne $b772			bne +
.b76d	a9 6b		lda #$6b			lda #$100+err_refill	; Something when wrong with refill.
.b76f	4c bf b2	jmp $b2bf			jmp ThrowA
.b772	e8		inx		+		inx			; Drop the refill flag
.b773	e8		inx				inx
.b774	d0 e6		bne $b75c			bne _savechars_loop	; jump back up to the empty check, just in
.b776					_input_fine:
.b776	18		clc				clc			; tmp1= A= the char at Cib+ToIn
.b777	a5 04		lda $04				lda cib+0
.b779	85 15		sta $15				sta tmp1+0
.b77b	a5 05		lda $05				lda cib+1
.b77d	65 09		adc $09				adc toin+1
.b77f	85 16		sta $16				sta tmp1+1
.b781	a4 08		ldy $08				ldy ToIn
.b783	b1 15		lda ($15),y			lda (tmp1),y
.b785	85 15		sta $15				sta tmp1
.b787	e6 08		inc $08				inc toin+0		; Move on to the next character.
.b789	d0 02		bne $b78d			bne +
.b78b	e6 09		inc $09				inc toin+1
.b78d					+
.b78d	b4 27		ldy $27,x			ldy DStack+2,x		; handling escaped characters?
.b78f	30 03		bmi $b794			bmi +
.b791	4c 37 b8	jmp $b837			jmp _regular_char
.b794					+
.b794	b4 28		ldy $28,x			ldy DStack+3,x  		; already seen the backslash?
.b796	30 03		bmi $b79b			bmi +
.b798	4c 2d b8	jmp $b82d			jmp _not_escaped
.b79b					+
.b79b	84 16		sty $16				sty tmp1+1
.b79d	24 16		bit $16				bit tmp1+1		; in the middle of a \x sequence ?
.b79f	70 25		bvs $b7c6			bvs _check_esc_chars
.b7a1	a9 01		lda #$01			lda #1
.b7a3	24 16		bit $16				bit tmp1+1
.b7a5	d0 11		bne $b7b8			bne _esc_x_second_digit
.b7a7	c8		iny				iny			; Adjust flag for second digit next time.
.b7a8	94 28		sty $28,x			sty DStack+3,x
.b7aa	a5 15		lda $15				lda tmp1+0		; Get the char again.
.b7ac	20 5a b8	jsr $b85a			jsr convert_hex_value	; Convert to hex
.b7af	0a		asl a				asl			; This is the upper nybble, so move it up.
.b7b0	0a		asl a				asl
.b7b1	0a		asl a				asl
.b7b2	0a		asl a				asl
.b7b3	95 25		sta $25,x			sta DStack+0,x		; Save it for later.
.b7b5	4c 3e b8	jmp $b83e			jmp _next_character
.b7b8					_esc_x_second_digit:
.b7b8	a9 00		lda #$00			lda #0			; Clear the escaped character flag
.b7ba	95 28		sta $28,x			sta DStack+3,x		;   (because we are handling it right here)
.b7bc	a5 15		lda $15				lda tmp1+0		; Convert to hex
.b7be	20 5a b8	jsr $b85a			jsr convert_hex_value
.b7c1	15 25		ora $25,x			ora DStack+0,x		; combine with value in t3
.b7c3	4c 3b b8	jmp $b83b			jmp _save_character
.b7c6					_check_esc_chars:
.b7c6	a0 00		ldy #$00			ldy #0
.b7c8	94 28		sty $28,x			sty DStack+3,x
.b7ca	a8		tay				tay
.b7cb	a9 07		lda #$07			lda #AscBELL	      ; BEL (ASCII value 7)
.b7cd	c0 61		cpy #$61			cpy #'a'
.b7cf	f0 6a		beq $b83b			beq _save_character
.b7d1	a9 08		lda #$08			lda #AscBS	      ; Backspace (ASCII value 8)
.b7d3	c0 62		cpy #$62			cpy #'b'
.b7d5	f0 64		beq $b83b			beq _save_character
.b7d7	a9 1b		lda #$1b			lda #AscESC	       ; ESC (ASCII value 27)
.b7d9	c0 65		cpy #$65			cpy #'e'
.b7db	f0 5e		beq $b83b			beq _save_character
.b7dd	a9 0c		lda #$0c			lda #AscFF	       ; FF (ASCII value 12)
.b7df	c0 66		cpy #$66			cpy #'f'
.b7e1	f0 58		beq $b83b			beq _save_character
.b7e3	a9 0a		lda #$0a			lda #AscLF	       ; LF (ASCII value 10)
.b7e5	c0 6c		cpy #$6c			cpy #'l'
.b7e7	f0 52		beq $b83b			beq _save_character
.b7e9	c0 6e		cpy #$6e			cpy #'n'
.b7eb	f0 4e		beq $b83b			beq _save_character
.b7ed	c0 6d		cpy #$6d			cpy #'m'
.b7ef	d0 09		bne $b7fa			bne +
.b7f1	a9 0d		lda #$0d			lda #AscCR		; CR/LF pair (ASCII values 13, 10)
.b7f3	20 e4 ca	jsr $cae4			jsr C_Comma_A
.b7f6	a9 0a		lda #$0a			lda #AscLF
.b7f8	d0 41		bne $b83b			bne _save_character
.b7fa					+
.b7fa	a9 22		lda #$22			lda #AscDQuote		; Double quote (ASCII value 34)
.b7fc	c0 71		cpy #$71			cpy #'q'
.b7fe	f0 3b		beq $b83b			beq _save_character
.b800	c0 22		cpy #$22			cpy #AscDQuote
.b802	f0 37		beq $b83b			beq _save_character
.b804	a9 0d		lda #$0d			lda #AscCR		; CR (ASCII value 13)
.b806	c0 72		cpy #$72			cpy #'r'
.b808	f0 31		beq $b83b			beq _save_character
.b80a	a9 09		lda #$09			lda #AscHT		; Horizontal TAB (ASCII value 9)
.b80c	c0 74		cpy #$74			cpy #'t'
.b80e	f0 2b		beq $b83b			beq _save_character
.b810	a9 0b		lda #$0b			lda #AscVT		; Vertical TAB (ASCII value 11)
.b812	c0 76		cpy #$76			cpy #'v'
.b814	f0 25		beq $b83b			beq _save_character
.b816	a9 00		lda #$00			lda #0			; NULL (ASCII value 0)
.b818	c0 7a		cpy #$7a			cpy #'z'
.b81a	f0 1f		beq $b83b			beq _save_character
.b81c					_check_esc_x:
.b81c	c0 78		cpy #$78			cpy #'x'
.b81e	d0 06		bne $b826			bne +
.b820	a9 be		lda #$be			lda #$BE	; Clear bits 6 and 0
.b822	95 28		sta $28,x			sta DStack+3,x
.b824	d0 18		bne $b83e			bne _next_character
.b826					+
.b826	a9 5c		lda #$5c			lda #AscBackslash	; Backslash (ASCII value 92)
.b828	c0 5c		cpy #$5c			cpy #AscBackslash
.b82a	f0 0f		beq $b83b			beq _save_character
.b82c	98		tya				tya
.b82d					_not_escaped:
.b82d	c9 5c		cmp #$5c			cmp #$5C	; The backslash char
.b82f	d0 06		bne $b837			bne _regular_char
.b831	a9 ff		lda #$ff			lda #$FF
.b833	95 28		sta $28,x			sta DStack+3,x
.b835	d0 07		bne $b83e			bne _next_character
.b837					_regular_char:
.b837	c9 22		cmp #$22			cmp #AscDQuote		; ASCII for "
.b839	f0 06		beq $b841			beq _found_string_end
.b83b					_save_character:
.b83b	20 e4 ca	jsr $cae4			jsr C_Comma_A		; compile this character into the dictionary
.b83e					_next_character:
.b83e	4c 5c b7	jmp $b75c			jmp _savechars_loop
.b841					_found_string_end:
.b841	e8		inx				inx			; Drop t3
.b842	e8		inx				inx
.b843	a5 0a		lda $0a				lda state		; What happens next depends on the state (which is bad, but
.b845	d0 0e		bne $b855			bne _cmpl		; that's the way it works at the moment).
.b847	38		sec				sec			; TOS= length of string = Here - start_addr
.b848	a5 00		lda $00				lda cp+0
.b84a	f5 27		sbc $27,x			sbc DStack+2,x
.b84c	95 25		sta $25,x			sta DStack+0,x		;   LSB
.b84e	a5 01		lda $01				lda cp+1
.b850	f5 28		sbc $28,x			sbc DStack+3,x
.b852	95 26		sta $26,x			sta DStack+1,x		;   MSB
.b854	60		rts				rts			; ( startaddr u )
.b855					_cmpl:
.b855	e8		inx				inx			; Drop t2
.b856	e8		inx				inx
.b857	4c eb b6	jmp $b6eb			jmp SLiteral_End	; ( jmpaddr )
=277					CL	.var *-(WordListLink+wh_Xt)
=$ff					CL	 .var $ff
=$b85a					en = *	; remember here
>b743	ff					.byte CL	;wh_CodeLength
.b85a					convert_hex_value:
.b85a	c9 41		cmp #$41			cmp #'A'
.b85c	90 05		bcc $b863			bcc _digit
.b85e	29 1f		and #$1f	_alpha:		and #$1F		; Make it uppercase.
.b860	69 08		adc #$08			adc #9-1		; gives value 10 for 'A'
.b862	60		rts				rts
.b863					_digit:
.b863	e9 2f		sbc #$2f			sbc #'0'-1
.b865	60		rts				rts
>b866	53 5c 22			L1:	.text 'S\"'	;  name of word as a string, ending at wh_NameLastChar
>b869	03					.byte *-L1	;wh_NameLength	length of name
>b86a	c0 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b86c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b86d	0c					.byte IM+NN	;wh_Flags	dictionary flags
=47081					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b86e					S_Backslash_Quote:
.b86e	a9 ff		lda #$ff			lda #$ff	; Do handle escaped chars.
.b870	4c 47 b7	jmp $b747			jmp S_Quote_start
=5					CL	.var *-(WordListLink+wh_Xt)
=$b873					en = *	; remember here
>b86c	05					.byte CL	;wh_CodeLength
>b873	4c 61 74 65 73 74 58 74		L1:	.text "LatestXt"	;  name of word as a string, ending at wh_NameLastChar
>b87b	08					.byte *-L1	;wh_NameLength	length of name
>b87c	e9 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b87e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b87f	08					.byte NN	;wh_Flags	dictionary flags
=47099					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b880	20 93 b8	jsr $b893	LatestXt:	jsr LatestNt	; ( nt )
.b883	4c 04 bc	jmp $bc04			jmp Name_To_Int	; ( xt )
=6					CL	.var *-(WordListLink+wh_Xt)
=$b886					en = *	; remember here
>b87e	06					.byte CL	;wh_CodeLength
>b886	4c 61 74 65 73 74 4e 74		L1:	.text "LatestNt"	;  name of word as a string, ending at wh_NameLastChar
>b88e	08					.byte *-L1	;wh_NameLength	length of name
>b88f	fb b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b891	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b892	08					.byte NN	;wh_Flags	dictionary flags
=47118					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b893	20 9d b8	jsr $b89d	LatestNt:	jsr current_to_dp
.b896	a5 11		lda $11				lda dp+0
.b898	a4 12		ldy $12				ldy dp+1
.b89a	4c e0 b5	jmp $b5e0			jmp PushYA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b89d					en = *	; remember here
>b891	0a					.byte CL	;wh_CodeLength
.b89d					current_to_dp:
.b89d	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.b8a0	0a		asl a				asl			; dp= wordlists[A]
.b8a1	a8		tay				tay
.b8a2	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.b8a5	85 11		sta $11				sta dp+0
.b8a7	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.b8aa	85 12		sta $12				sta dp+1
.b8ac	60		rts				rts
.b8ad					dp_to_current:
.b8ad	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.b8b0	0a		asl a		                asl			; wordlists[A]=dp
.b8b1	a8		tay		                tay
.b8b2	a5 11		lda $11		                lda dp+0
.b8b4	99 12 03	sta $0312,y			sta WordlistsV+0,y
.b8b7	a5 12		lda $12		                lda dp+1
.b8b9	99 13 03	sta $0313,y	                sta WordlistsV+1,y
.b8bc	60		rts		                rts
>b8bd	50 61 72 73 65 2d 4e 61		L1:	.text "Parse-Name"	;  name of word as a string, ending at wh_NameLastChar
>b8c5	6d 65
>b8c7	0a					.byte *-L1	;wh_NameLength	length of name
>b8c8	0e b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b8ca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b8cb	08					.byte NN	;wh_Flags	dictionary flags
=47175					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b8cc					Parse_Name:
.b8cc	a5 04		lda $04				lda cib+0		; tmp2= cib+(toin & $ff00)
.b8ce	85 17		sta $17				sta tmp2+0
.b8d0	18		clc				clc
.b8d1	a5 05		lda $05				lda cib+1
.b8d3	65 09		adc $09				adc toin+1
.b8d5	85 18		sta $18				sta tmp2+1
.b8d7	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.b8d9					_skip_loop:
.b8d9	c4 06		cpy $06				cpy ciblen+0		; more chars left?
.b8db	a5 09		lda $09				lda toin+1
.b8dd	e5 07		sbc $07				sbc ciblen+1
.b8df	b0 12		bcs $b8f3			bcs _empty_line
.b8e1	b1 17		lda ($17),y			lda (tmp2),y		; get cib[toin]
.b8e3	20 6f a7	jsr $a76f			jsr is_whitespace
.b8e6	90 10		bcc $b8f8			bcc _char_found
.b8e8	c8		iny				iny			; increment toin
.b8e9	84 08		sty $08				sty toin+0
.b8eb	d0 ec		bne $b8d9			bne _skip_loop
.b8ed	e6 09		inc $09				inc toin+1
.b8ef	e6 18		inc $18				inc tmp2+1
.b8f1	d0 e6		bne $b8d9			bne _skip_loop
.b8f3					_empty_line:
.b8f3	ca		dex				dex			; junk address
.b8f4	ca		dex				dex
.b8f5	4c 31 b6	jmp $b631			jmp Zero		; length=0
.b8f8					_char_found:
.b8f8	20 50 b6	jsr $b650			jsr Bl			; push delimiter char
.b8fb	4c 15 b9	jmp $b915			jmp Parse
=50					CL	.var *-(WordListLink+wh_Xt)
=$b8fe					en = *	; remember here
>b8ca	32					.byte CL	;wh_CodeLength
.b8fe					parse_name_check:
.b8fe	20 cc b8	jsr $b8cc			jsr parse_name		; get character from string
.b901	b5 25		lda $25,x			lda DStack+0,x		; empty string?
.b903	f0 01		beq $b906			beq _empty
.b905	60		rts				rts
.b906	a9 f3		lda #$f3	_empty:		lda #$100+err_UndefinedWord	; complain & abort
.b908	4c bf b2	jmp $b2bf			jmp ThrowA
>b90b	50 61 72 73 65			L1:	.text "Parse"	;  name of word as a string, ending at wh_NameLastChar
>b910	05					.byte *-L1	;wh_NameLength	length of name
>b911	47 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b913	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b914	08					.byte NN	;wh_Flags	dictionary flags
=47248					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b915	20 34 b2	jsr $b234	Parse:		jsr PopA		; pop c (check for underflow)
.b918	85 1d		sta $1d		Parse_A:	sta tmp5		; save delimiter
.b91a	ca		dex				dex			; alloc space for addr
.b91b	ca		dex				dex
.b91c	ca		dex				dex			; alloc space for length
.b91d	ca		dex				dex
.b91e	18		clc				clc			; addr= cib+toin
.b91f	a5 08		lda $08				lda toin+0
.b921	65 04		adc $04				adc cib+0
.b923	95 27		sta $27,x			sta DStack+2,x
.b925	a5 09		lda $09				lda toin+1
.b927	65 05		adc $05				adc cib+1
.b929	95 28		sta $28,x			sta DStack+3,x
.b92b	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.b92d	84 15		sty $15				sty tmp1+0
.b92f	a5 04		lda $04				lda cib+0		; tmp2= cib + (toin & $ff00)
.b931	85 17		sta $17				sta tmp2+0
.b933	18		clc				clc
.b934	a5 09		lda $09				lda toin+1		; tmp1= toin
.b936	85 16		sta $16				sta tmp1+1
.b938	65 05		adc $05				adc cib+1
.b93a	85 18		sta $18				sta tmp2+1
.b93c	a9 00		lda #$00			lda #0		; Initialize the offset we use to adjust EOL or found delimiter
.b93e	85 1e		sta $1e				sta tmp5+1
.b940					_loop:
.b940	c4 06		cpy $06				cpy ciblen+0		; end of string?
.b942	a5 09		lda $09				lda toin+1
.b944	e5 07		sbc $07				sbc ciblen+1
.b946	b0 1d		bcs $b965			bcs _eol
.b948	a5 1d		lda $1d				lda tmp5+0		; get delimiter
.b94a	c9 20		cmp #$20			cmp #AscSP		; is it whitespace?
.b94c	d0 08		bne $b956			bne _not_whitespace
.b94e	b1 17		lda ($17),y			lda (tmp2),y		; get cib[toin]
.b950	c9 21		cmp #$21			cmp #AscSP+1		; we're looking for all whitespace
.b952	90 0f		bcc $b963			bcc _found_delimiter
.b954	b0 04		bcs $b95a			bcs _not_delimiter
.b956	d1 17		cmp ($17),y	_not_whitespace: cmp (tmp2),y		; compare delimter to cib[toin]
.b958	f0 09		beq $b963			beq _found_delimiter
.b95a					_not_delimiter:
.b95a	c8		iny				iny			; next character
.b95b	d0 e3		bne $b940			bne _loop
.b95d	e6 09		inc $09				inc toin+1
.b95f	e6 18		inc $18				inc tmp2+1
.b961	d0 dd		bne $b940			bne _loop
.b963					_found_delimiter:
.b963	e6 1e		inc $1e				inc tmp5+1
.b965					_eol:
.b965	38		sec				sec			; length = toin - tmp1
.b966	98		tya				tya
.b967	e5 15		sbc $15				sbc tmp1+0
.b969	95 25		sta $25,x			sta DStack+0,x
.b96b	a5 09		lda $09				lda toin+1
.b96d	e5 16		sbc $16				sbc tmp1+1
.b96f	95 26		sta $26,x			sta DStack+1,x
.b971	18		clc				clc			; toin = toin + delimiter_offset
.b972	98		tya				tya
.b973	65 1e		adc $1e				adc tmp5+1
.b975	85 08		sta $08				sta toin+0
.b977	90 02		bcc $b97b			bcc +
.b979	e6 09		inc $09				inc toin+1
.b97b					+
=102					CL	.var *-(WordListLink+wh_Xt)
=$b97b					en = *	; remember here
>b913	66					.byte CL	;wh_CodeLength
.b97b	60		rts				rts
>b97c	45 78 65 63 75 74 65 2d		L1:	.text "Execute-Parsing"	;  name of word as a string, ending at wh_NameLastChar
>b984	50 61 72 73 69 6e 67
>b98b	0f					.byte *-L1	;wh_NameLength	length of name
>b98c	90 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b98e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b98f	18					.byte UF+NN	;wh_Flags	dictionary flags
=47371					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b990					Execute_parsing:
.b990	20 a8 b2	jsr $b2a8			jsr underflow_3
.b993	20 01 c2	jsr $c201			jsr Input_To_R		; save existing input for later
.b996	20 6f cc	jsr $cc6f			jsr Not_Rot		; -ROT ( xt addr u )
.b999	20 50 b2	jsr $b250			jsr PopYA		; TOS is new ciblen
.b99c	85 06		sta $06				sta ciblen+0
.b99e	84 07		sty $07				sty ciblen+1
.b9a0	20 50 b2	jsr $b250			jsr PopYA		; NOS is new cib
.b9a3	85 04		sta $04				sta cib+0
.b9a5	84 05		sty $05				sty cib+1
.b9a7	a9 00		lda #$00			lda #0
.b9a9	85 08		sta $08				sta toin+0		; Set >IN to zero
.b9ab	85 09		sta $09				sta toin+1
.b9ad	20 0b cc	jsr $cc0b			jsr Execute
.b9b0	20 23 c2	jsr $c223			jsr R_To_Input		; restore
=35					CL	.var *-(WordListLink+wh_Xt)
=$b9b3					en = *	; remember here
>b98e	23					.byte CL	;wh_CodeLength
.b9b3	60		rts				rts
>b9b4	53 6f 75 72 63 65		L1:	.text "Source"	;  name of word as a string, ending at wh_NameLastChar
>b9ba	06					.byte *-L1	;wh_NameLength	length of name
>b9bb	0b b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b9bd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b9be	08					.byte NN	;wh_Flags	dictionary flags
=47418					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b9bf					Source:
.b9bf	a5 04		lda $04				lda cib+0	; push address
.b9c1	a4 05		ldy $05				ldy cib+1
.b9c3	20 e0 b5	jsr $b5e0			jsr PushYA
.b9c6	a5 06		lda $06				lda ciblen+0	; push size, return
.b9c8	a4 07		ldy $07				ldy ciblen+1
.b9ca	4c e0 b5	jmp $b5e0			jmp PushYA
=14					CL	.var *-(WordListLink+wh_Xt)
=$b9cd					en = *	; remember here
>b9bd	0e					.byte CL	;wh_CodeLength
>b9cd	53 6f 75 72 63 65 2d 49		L1:	.text "Source-Id"	;  name of word as a string, ending at wh_NameLastChar
>b9d5	64
>b9d6	09					.byte *-L1	;wh_NameLength	length of name
>b9d7	3a b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b9d9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b9da	08					.byte NN	;wh_Flags	dictionary flags
=47446					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b9db	a5 02		lda $02		Source_Id:	lda insrc+0
.b9dd	a4 03		ldy $03				ldy insrc+1
.b9df	4c e0 b5	jmp $b5e0			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b9e2					en = *	; remember here
>b9d9	07					.byte CL	;wh_CodeLength
>b9e2	45 78 69 74			L1:	.text "Exit"	;  name of word as a string, ending at wh_NameLastChar
>b9e6	04					.byte *-L1	;wh_NameLength	length of name
>b9e7	56 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b9e9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b9ea	03					.byte AN+CO	;wh_Flags	dictionary flags
=47462					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b9eb					Exit:
.b9eb	60		rts				rts		; keep before FEnd so it gets inlined
=1					CL	.var *-(WordListLink+wh_Xt)
=$b9ec					en = *	; remember here
>b9e9	01					.byte CL	;wh_CodeLength
>b9ec	3b				L1:	.text ";"	;  name of word as a string, ending at wh_NameLastChar
>b9ed	01					.byte *-L1	;wh_NameLength	length of name
>b9ee	66 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b9f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b9f1	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=47469					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b9f2					Semicolon:
.b9f2	20 64 b5	jsr $b564			jsr Left_Bracket	; switch to interpret state
.b9f5	24 0c		bit $0c				bit status		; is this a : word or a :NONAME word?
.b9f7	70 0c		bvs $ba05			bvs _colonword
.b9f9	a9 60		lda #$60			lda #$60		; compile an RTS
.b9fb	20 e4 ca	jsr $cae4			jsr C_Comma_A
.b9fe	a5 0f		lda $0f				lda workword+0		; push xt, return
.ba00	a4 10		ldy $10				ldy workword+1
.ba02	4c e0 b5	jmp $b5e0			jmp PushYA
.ba05					_colonword:
.ba05	24 0c		bit $0c				bit status
.ba07	10 1d		bpl $ba26			bpl _new_word	; Bit 7 is clear = new word
.ba09	a5 0f		lda $0f				lda WorkWord+0		; push our nt
.ba0b	a4 10		ldy $10				ldy WorkWord+1
.ba0d	20 e0 b5	jsr $b5e0			jsr PushYA
.ba10	20 1c bc	jsr $bc1c			jsr Name_To_String	; get our name string
.ba13	a9 05		lda #$05			lda #<str_redefined	; string "redefined"
.ba15	a0 d9		ldy #$d9			ldy #>str_redefined
.ba17	20 ee cb	jsr $cbee			jsr Print_ASCIIZ_YA_no_lf
.ba1a	20 cd cb	jsr $cbcd			jsr Type		; print the offending word.
.ba1d	20 c0 cb	jsr $cbc0			jsr Space
.ba20	a9 7f		lda #$7f			lda #$ff-%10000000
.ba22	25 0c		and $0c				and status
.ba24	85 0c		sta $0c				sta status
.ba26					_new_word:
.ba26	20 49 bf	jsr $bf49			jsr Header_Link		; finish linking into current dictionary
.ba29	20 31 ba	jsr $ba31			jsr adjust_z		; fix word length
.ba2c	a9 60		lda #$60			lda #$60		; compile an RTS
.ba2e	4c e4 ca	jmp $cae4			jmp C_Comma_A
=63					CL	.var *-(WordListLink+wh_Xt)
=$ba31					en = *	; remember here
>b9f0	3f					.byte CL	;wh_CodeLength
.ba31					adjust_z:
.ba31	a5 11		lda $11				lda dp+0		; tmp1= xt
.ba33	18		clc				clc
.ba34	69 85		adc #$85			adc #Wh_xt
.ba36	85 15		sta $15				sta tmp1+0
.ba38	a5 12		lda $12				lda dp+1
.ba3a	69 00		adc #$00			adc #0
.ba3c	85 16		sta $16				sta tmp1+1
.ba3e	38		sec				sec			; length= cp-xt
.ba3f	a5 00		lda $00				lda cp+0
.ba41	e5 15		sbc $15				sbc tmp1+0
.ba43	a8		tay				tay
.ba44	a5 01		lda $01				lda cp+1
.ba46	e5 16		sbc $16				sbc tmp1+1
.ba48	f0 0c		beq $ba56			beq _short		; length > $ff ?
.ba4a	a0 84		ldy #$84			ldy #Wh_Flags		; make it NN
.ba4c	b1 11		lda ($11),y			lda (dp),y
.ba4e	29 fd		and #$fd			and #$ff-AN
.ba50	09 08		ora #$08			ora #NN
.ba52	91 11		sta ($11),y			sta (dp),y
.ba54	a0 ff		ldy #$ff			ldy #$ff		; set max length for header
.ba56	98		tya		_short:		tya			; fill in length in header
.ba57	a0 83		ldy #$83			ldy #Wh_CodeLength
.ba59	91 11		sta ($11),y			sta (dp),y
.ba5b	60		rts				rts
>ba5c	3a				L1:	.text ":"	;  name of word as a string, ending at wh_NameLastChar
>ba5d	01					.byte *-L1	;wh_NameLength	length of name
>ba5e	6d b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba60	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba61	08					.byte NN	;wh_Flags	dictionary flags
=47581					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba62					Colon:
.ba62	20 7a b5	jsr $b57a			jsr Right_Bracket	; switch to compile state
.ba65	a5 0c		lda $0c				lda status
.ba67	09 40		ora #$40			ora #%01000000	; tell ";" and RECURSE this is a normal word
.ba69	09 80		ora #$80			ora #%10000000	; Tell Header_Build not to print warning for duplicate name.
.ba6b	85 0c		sta $0c				sta status
.ba6d	4c 54 bf	jmp $bf54			jmp Header_Build	; compile word header (but don't link)
=14					CL	.var *-(WordListLink+wh_Xt)
=$ba70					en = *	; remember here
>ba60	0e					.byte CL	;wh_CodeLength
>ba70	3a 4e 6f 4e 61 6d 65		L1:	.text ":NoName"	;  name of word as a string, ending at wh_NameLastChar
>ba77	07					.byte *-L1	;wh_NameLength	length of name
>ba78	dd b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba7a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba7b	08					.byte NN	;wh_Flags	dictionary flags
=47607					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba7c					Colon_NoName:
.ba7c	20 7a b5	jsr $b57a			jsr Right_Bracket	; switch to compile state
.ba7f	a9 bf		lda #$bf			lda #$ff-%01000000	; tell ";" and RECURSE this is
.ba81	25 0c		and $0c				and status		; a :NONAME word.
.ba83	85 0c		sta $0c				sta status
.ba85	a5 00		lda $00				lda cp+0
.ba87	85 0f		sta $0f				sta workword+0
.ba89	a5 01		lda $01				lda cp+1
.ba8b	85 10		sta $10				sta workword+1
=17					CL	.var *-(WordListLink+wh_Xt)
=$ba8d					en = *	; remember here
>ba7a	11					.byte CL	;wh_CodeLength
.ba8d	60		rts				rts
>ba8e	27				L1:	.text "'"	;  name of word as a string, ending at wh_NameLastChar
>ba8f	01					.byte *-L1	;wh_NameLength	length of name
>ba90	f7 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba92	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba93	08					.byte NN	;wh_Flags	dictionary flags
=47631					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba94	20 9a ba	jsr $ba9a	Tick:		jsr Tick_Nt
.ba97	4c 04 bc	jmp $bc04			jmp Name_To_Int	; ( nt -- xt )
=6					CL	.var *-(WordListLink+wh_Xt)
=$ba9a					en = *	; remember here
>ba92	06					.byte CL	;wh_CodeLength
.ba9a	20 fe b8	jsr $b8fe	Tick_Nt:	jsr parse_name_check	; ( -- addr u )
.ba9d	4c 36 bb	jmp $bb36			jmp find_name_check	; ( addr u -- nt )
>baa0	5b 27 5d			L1:	.text "[']"	;  name of word as a string, ending at wh_NameLastChar
>baa3	03					.byte *-L1	;wh_NameLength	length of name
>baa4	0f ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>baa6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>baa7	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=47651					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.baa8	20 94 ba	jsr $ba94	Bracket_Tick:	jsr Tick
.baab	4c 93 b5	jmp $b593			jmp Literal
=6					CL	.var *-(WordListLink+wh_Xt)
=$baae					en = *	; remember here
>baa6	06					.byte CL	;wh_CodeLength
>baae	46 69 6e 64			L1:	.text "Find"	;  name of word as a string, ending at wh_NameLastChar
>bab2	04					.byte *-L1	;wh_NameLength	length of name
>bab3	23 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bab5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bab6	18					.byte UF+NN	;wh_Flags	dictionary flags
=47666					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bab7					Find:
.bab7	20 8e b2	jsr $b28e			jsr underflow_1
.baba	b5 26		lda $26,x			lda DStack+1,x		; MSB
.babc	48		pha				pha
.babd	b5 25		lda $25,x			lda DStack+0,x		; LSB
.babf	48		pha				pha
.bac0	20 16 b0	jsr $b016			jsr Count		; ( caddr -- addr u )
.bac3	20 0a bb	jsr $bb0a			jsr find_name		; ( addr u -- nt | 0 )
.bac6	b5 26		lda $26,x			lda DStack+1,x		; word found?
.bac8	d0 0a		bne $bad4			bne _found_word
.baca	20 13 b6	jsr $b613			jsr False		; ( 0 0 )
.bacd	68		pla				pla			; LSB of address
.bace	95 27		sta $27,x			sta DStack+2,x
.bad0	68		pla				pla
.bad1	95 28		sta $28,x			sta DStack+3,x		; MSB of address
.bad3	60		rts				rts			; ( addr 0 )
.bad4					_found_word:
.bad4	68		pla				pla			; We don't need the address after all, RDrop it
.bad5	68		pla				pla
.bad6	20 45 cd	jsr $cd45			jsr Dup		; ( nt nt )
.bad9	20 04 bc	jsr $bc04			jsr Name_To_Int	; ( nt xt )
.badc	20 63 cd	jsr $cd63			jsr Swap		; ( xt nt )
.badf	a0 00		ldy #$00			ldy #0			; Prepare flag
.bae1	a9 84		lda #$84			lda #Wh_Flags		; get flags
.bae3	20 f6 c7	jsr $c7f6			jsr plus_a		; ( xt nt+Wh_Flags )
.bae6	a1 25		lda ($25,x)			lda (DStack+0,x)		; ( xt flags )
.bae8	29 04		and #$04			and #IM
.baea	d0 07		bne $baf3			bne _immediate		; bit set, we're immediate
.baec	a9 ff		lda #$ff			lda #$FF		; We're not immediate, return -1
.baee	95 25		sta $25,x			sta DStack+0,x
.baf0	95 26		sta $26,x			sta DStack+1,x
.baf2	60		rts				rts
.baf3					_immediate:
.baf3	a9 01		lda #$01			lda #1			; We're immediate, return 1
.baf5	95 25		sta $25,x			sta DStack+0,x
.baf7	a9 00		lda #$00			lda #0
.baf9	95 26		sta $26,x			sta DStack+1,x
=68					CL	.var *-(WordListLink+wh_Xt)
=$bafb					en = *	; remember here
>bab5	44					.byte CL	;wh_CodeLength
.bafb	60		rts				rts
>bafc	46 69 6e 64 2d 4e 61 6d		L1:	.text "Find-Name"	;  name of word as a string, ending at wh_NameLastChar
>bb04	65
>bb05	09					.byte *-L1	;wh_NameLength	length of name
>bb06	32 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb08	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb09	18					.byte UF+NN	;wh_Flags	dictionary flags
=47749					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb0a					find_name:
.bb0a	20 a3 b2	jsr $b2a3			jsr underflow_2
.bb0d	20 43 bb	jsr $bb43			jsr fina_pattern_prepare ; tmp2 = pseudo-header of pattern name
.bb10	a9 ff		lda #$ff			lda #$ff		; for each wordlist in the wordlist search order.
.bb12	95 26		sta $26,x			sta DStack+1,x
.bb14					_wordlist_next:
.bb14	f6 26		inc $26,x			inc DStack+1,x
.bb16	b4 26		ldy $26,x			ldy DStack+1,x
.bb18	cc 2a 03	cpy $032a			cpy Num_OrderV		; at end of list?
.bb1b	90 06		bcc $bb23			bcc _nextS
.bb1d	d0 14		bne $bb33			bne _fail
.bb1f	a9 03		lda #$03			lda #wid_Root		; also try root wordlist
.bb21	d0 03		bne $bb26			bne _nextA
.bb23	b9 2b 03	lda $032b,y	_nextS:		lda Search_OrderV,y	; A = search_order[Y]  get wordlist ID
.bb26	20 59 bb	jsr $bb59	_nextA:		jsr fina_search_wordlist
.bb29	f0 e9		beq $bb14			beq _wordlist_next
.bb2b	a5 15		lda $15				lda tmp1+0		; NOS = nt
.bb2d	95 27		sta $27,x			sta DStack+2,x
.bb2f	a5 16		lda $16				lda tmp1+1
.bb31	95 28		sta $28,x			sta DStack+3,x
.bb33					_fail:
.bb33	e8		inx				inx			; Drop	pattern name length
.bb34	e8		inx				inx
=43					CL	.var *-(WordListLink+wh_Xt)
=$bb35					en = *	; remember here
>bb08	2b					.byte CL	;wh_CodeLength
.bb35	60		rts				rts
.bb36					find_name_check:
.bb36	20 0a bb	jsr $bb0a			jsr find_name
.bb39	b5 26		lda $26,x			lda DStack+1,x		; not found?
.bb3b	f0 01		beq $bb3e			beq _NotFound
.bb3d	60		rts				rts
.bb3e	a9 f3		lda #$f3	_NotFound:	lda #$100+err_UndefinedWord	; complain & quit
.bb40	4c bf b2	jmp $b2bf			jmp ThrowA
.bb43					fina_pattern_prepare:
.bb43	38		sec				sec			; A= 0 - name start offset
.bb44	b5 25		lda $25,x			lda DStack+0,x
.bb46	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.bb48	75 27		adc $27,x			adc DStack+2,x		; tmp2 = pattern name nt
.bb4a	85 17		sta $17				sta tmp2+0
.bb4c	a9 ff		lda #$ff			lda #$ff
.bb4e	75 28		adc $28,x			adc DStack+3,x
.bb50	85 18		sta $18				sta tmp2+1
.bb52	a9 00		lda #$00			lda #0			; assuming failure
.bb54	95 27		sta $27,x			sta DStack+2,x
.bb56	95 28		sta $28,x			sta DStack+3,x
.bb58	60		rts				rts
.bb59					fina_search_wordlist:
.bb59	0a		asl a				asl			; tmp1 = up->wordlists[A]
.bb5a	a8		tay				tay
.bb5b	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.bb5e	85 15		sta $15				sta tmp1+0
.bb60	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bb63	85 16		sta $16				sta tmp1+1
.bb65	d0 10		bne $bb77			bne _word_test		;   not end-of-list?
.bb67	60		rts		_rts:		rts			; Z= end_of_list
.bb68					_word_next:
.bb68	a0 82		ldy #$82			ldy #wh_WordListLink+1	; tmp1= tmp1->Wh_WordListLink
.bb6a	b1 15		lda ($15),y			lda (tmp1),y
.bb6c	48		pha				pha
.bb6d	88		dey				dey
.bb6e	b1 15		lda ($15),y			lda (tmp1),y
.bb70	85 15		sta $15				sta tmp1+0
.bb72	68		pla				pla
.bb73	85 16		sta $16				sta tmp1+1
.bb75	f0 f0		beq $bb67			beq _rts		; end of list?
.bb77					_word_test:
.bb77	a0 80		ldy #$80			ldy #Wh_NameLength	; Are strings the same length?
.bb79	b1 15		lda ($15),y			lda (tmp1),y
.bb7b	d5 25		cmp $25,x			cmp DStack+0,x
.bb7d	d0 e9		bne $bb68			bne _word_next
.bb7f	a9 7f		lda #$7f			lda #Wh_NameLastChar	; Y= index of 1st name char-1
.bb81	38		sec				sec
.bb82	f5 25		sbc $25,x			sbc DStack+0,x
.bb84	a8		tay				tay
.bb85	c8		iny		_char_next:	iny			; to next char
.bb86	30 df		bmi $bb67			bmi _rts		; end of string?
.bb88	b1 17		lda ($17),y			lda (tmp2),y		; char of mystery string
.bb8a	51 15		eor ($15),y			eor (tmp1),y
.bb8c	f0 f7		beq $bb85			beq _char_next		;   exact match?
.bb8e	29 df		and #$df			and #$df		;   maybe only a case mismatch?
.bb90	d0 d6		bne $bb68			bne _word_next
.bb92	b1 15		lda ($15),y			lda (tmp1),y		;   verify it is alpha char
.bb94	29 df		and #$df			and #$df
.bb96	c9 41		cmp #$41			cmp #'A'
.bb98	90 ce		bcc $bb68			bcc _word_next
.bb9a	c9 5b		cmp #$5b			cmp #'Z'+1
.bb9c	90 e7		bcc $bb85			bcc _char_next
.bb9e	b0 c8		bcs $bb68			bcs _word_next
>bba0	49 6e 74 3e 4e 61 6d 65		L1:	.text "Int>Name"	;  name of word as a string, ending at wh_NameLastChar
>bba8	08					.byte *-L1	;wh_NameLength	length of name
>bba9	85 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bbab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bbac	18					.byte UF+NN	;wh_Flags	dictionary flags
=47912					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bbad					Int_To_Name:
.bbad	20 8e b2	jsr $b28e			jsr underflow_1
.bbb0	a9 7b		lda #$7b			lda #$100-Wh_xt		; convert xt on stack to proposed nt
.bbb2	20 36 c8	jsr $c836			jsr Minus_A
.bbb5	a9 ff		lda #$ff			lda #$ff		; for each wordlist
.bbb7	20 22 b6	jsr $b622			jsr PushZA
.bbba					_wordlist_next:
.bbba	f6 25		inc $25,x			inc DStack+0,x
.bbbc	b5 25		lda $25,x			lda DStack+0,x		; Get the current wordlist index
.bbbe	c9 0c		cmp #$0c			cmp #(Num_OrderV-WordlistsV)/2
.bbc0	b0 2c		bcs $bbee			bcs _fail
.bbc2	0a		asl a				asl			; tmp2 = wordlist[A]
.bbc3	a8		tay				tay
.bbc4	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.bbc7	85 17		sta $17				sta tmp2+0
.bbc9	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bbcc	85 18		sta $18				sta tmp2+1
.bbce	f0 ea		beq $bbba			beq _wordlist_next	;   empty wordlist?
.bbd0	d0 0f		bne $bbe1			bne _word_test
.bbd2	a0 82		ldy #$82	_word_next:	ldy #wh_WordListLink+1	; follow wh_WordListLink to next word
.bbd4	b1 17		lda ($17),y			lda (tmp2),y
.bbd6	48		pha				pha
.bbd7	88		dey				dey
.bbd8	b1 17		lda ($17),y			lda (tmp2),y
.bbda	85 17		sta $17				sta tmp2+0
.bbdc	68		pla				pla
.bbdd	85 18		sta $18				sta tmp2+1
.bbdf	f0 d9		beq $bbba			beq _wordlist_next	;  end of list?
.bbe1	55 28		eor $28,x	_word_test:	eor DStack+3,x		; tmp2 = nt ?
.bbe3	d0 ed		bne $bbd2			bne _word_next
.bbe5	a5 17		lda $17				lda tmp2+0
.bbe7	55 27		eor $27,x			eor DStack+2,x
.bbe9	d0 e7		bne $bbd2			bne _word_next
.bbeb	e8		inx				inx			; Drop wordlist index
.bbec	e8		inx				inx
.bbed	60		rts				rts
.bbee					_fail:
.bbee	e8		inx				inx			; Drop wordlist index
.bbef	e8		inx				inx
.bbf0	a9 00		lda #$00			lda #0			; return a zero to indicate that we didn't find it.
.bbf2	95 25		sta $25,x			sta DStack+0,x
.bbf4	95 26		sta $26,x			sta DStack+1,x
=73					CL	.var *-(WordListLink+wh_Xt)
=$bbf6					en = *	; remember here
>bbab	49					.byte CL	;wh_CodeLength
.bbf6	60		rts				rts
>bbf7	4e 61 6d 65 3e 49 6e 74		L1:	.text "Name>Int"	;  name of word as a string, ending at wh_NameLastChar
>bbff	08					.byte *-L1	;wh_NameLength	length of name
>bc00	28 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc02	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc03	18					.byte UF+NN	;wh_Flags	dictionary flags
=47999					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc04					Name_To_Int:
.bc04	20 8e b2	jsr $b28e			jsr underflow_1
.bc07	a9 85		lda #$85			lda #wh_Xt
.bc09	4c f6 c7	jmp $c7f6			jmp Plus_A
=8					CL	.var *-(WordListLink+wh_Xt)
=$bc0c					en = *	; remember here
>bc02	08					.byte CL	;wh_CodeLength
>bc0c	4e 61 6d 65 3e 53 74 72		L1:	.text "Name>String"	;  name of word as a string, ending at wh_NameLastChar
>bc14	69 6e 67
>bc17	0b					.byte *-L1	;wh_NameLength	length of name
>bc18	7f bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc1a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc1b	18					.byte UF+NN	;wh_Flags	dictionary flags
=48023					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc1c					Name_To_String:
.bc1c	20 8e b2	jsr $b28e			jsr underflow_1
.bc1f	b5 25		lda $25,x			lda DStack+0,x		; tmp1 = nt
.bc21	b4 26		ldy $26,x			ldy DStack+1,x
.bc23	85 15		sta $15				sta tmp1+0
.bc25	84 16		sty $16				sty tmp1+1
.bc27	a0 80		ldy #$80			ldy #Wh_NameLength
.bc29	a9 80		lda #$80			lda #Wh_NameLastChar+1	; calc start offset
.bc2b	38		sec				sec
.bc2c	f1 15		sbc ($15),y			sbc (tmp1),y
.bc2e	20 f6 c7	jsr $c7f6			jsr plus_a		; calc start addr
.bc31	b1 15		lda ($15),y			lda (tmp1),y		; push length
.bc33	4c 22 b6	jmp $b622			jmp PushZA
=26					CL	.var *-(WordListLink+wh_Xt)
=$bc36					en = *	; remember here
>bc1a	1a					.byte CL	;wh_CodeLength
>bc36	3e 42 6f 64 79			L1:	.text ">Body"	;  name of word as a string, ending at wh_NameLastChar
>bc3b	05					.byte *-L1	;wh_NameLength	length of name
>bc3c	97 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc3e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc3f	18					.byte UF+NN	;wh_Flags	dictionary flags
=48059					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc40					To_Body:
.bc40	20 8e b2	jsr $b28e			jsr underflow_1
.bc43	a9 03		lda #$03			lda #3		; PFA is after the beginning JSR abs
.bc45	4c f6 c7	jmp $c7f6			jmp plus_a
=8					CL	.var *-(WordListLink+wh_Xt)
=$bc48					en = *	; remember here
>bc3e	08					.byte CL	;wh_CodeLength
>bc48	45 72 61 73 65			L1:	.text "Erase"	;  name of word as a string, ending at wh_NameLastChar
>bc4d	05					.byte *-L1	;wh_NameLength	length of name
>bc4e	bb bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc50	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc51	08					.byte NN	;wh_Flags	dictionary flags
=48077					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc52					Erase:
.bc52	20 31 b6	jsr $b631			jsr Zero
.bc55	4c 71 bc	jmp $bc71			jmp Fill
=6					CL	.var *-(WordListLink+wh_Xt)
=$bc58					en = *	; remember here
>bc50	06					.byte CL	;wh_CodeLength
>bc58	42 6c 61 6e 6b			L1:	.text "Blank"	;  name of word as a string, ending at wh_NameLastChar
>bc5d	05					.byte *-L1	;wh_NameLength	length of name
>bc5e	cd bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc60	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc61	08					.byte NN	;wh_Flags	dictionary flags
=48093					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc62					Blank:
.bc62	20 50 b6	jsr $b650			jsr Bl
.bc65	4c 71 bc	jmp $bc71			jmp Fill
=6					CL	.var *-(WordListLink+wh_Xt)
=$bc68					en = *	; remember here
>bc60	06					.byte CL	;wh_CodeLength
>bc68	46 69 6c 6c			L1:	.text "Fill"	;  name of word as a string, ending at wh_NameLastChar
>bc6c	04					.byte *-L1	;wh_NameLength	length of name
>bc6d	dd bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc6f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc70	18					.byte UF+NN	;wh_Flags	dictionary flags
=48108					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc71					Fill:
.bc71	20 a8 b2	jsr $b2a8			jsr underflow_3
.bc74	b5 29		lda $29,x			lda DStack+4,x		; tmp1= address
.bc76	85 15		sta $15				sta tmp1+0
.bc78	b5 2a		lda $2a,x			lda DStack+5,x
.bc7a	85 16		sta $16				sta tmp1+1
.bc7c	b5 27		lda $27,x			lda DStack+2,x		; tmp2= counter.lo
.bc7e	85 17		sta $17				sta tmp2+0
.bc80	f6 28		inc $28,x			inc DStack+3,x		; so decrement & test for 0 works
.bc82	a0 00		ldy #$00			ldy #0
.bc84	b5 25		lda $25,x			lda DStack+0,x		; A= fill byte
.bc86	c4 17		cpy $17		_loop:		cpy tmp2+0		; done?
.bc88	f0 09		beq $bc93			beq _test2
.bc8a	91 15		sta ($15),y			sta (tmp1),y		; store a byte
.bc8c	c8		iny				iny			; to next byte
.bc8d	d0 f7		bne $bc86			bne _loop
.bc8f	e6 16		inc $16				inc tmp1+1		; increment addr page
.bc91	d0 f3		bne $bc86			bne _loop
.bc93	d6 28		dec $28,x	_test2:		dec DStack+3,x		; any more pages?
.bc95	d0 ef		bne $bc86			bne _loop
.bc97	4c ec ab	jmp $abec			jmp ThreeDrop	; Drop three cells off the Data Stack.
=41					CL	.var *-(WordListLink+wh_Xt)
=$bc9a					en = *	; remember here
>bc6f	29					.byte CL	;wh_CodeLength
>bc9a	56 61 72 69 61 62 6c 65		L1:	.text "Variable"	;  name of word as a string, ending at wh_NameLastChar
>bca2	08					.byte *-L1	;wh_NameLength	length of name
>bca3	ec bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bca5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bca6	08					.byte NN	;wh_Flags	dictionary flags
=48162					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bca7	20 cd bf	jsr $bfcd	Variable:	jsr Create		; compile word header & push PFA
.bcaa	a9 00		lda #$00			lda #0			; allot & initialize the variable's data
.bcac	a8		tay				tay
.bcad	4c fe ca	jmp $cafe			jmp Comma_YA
=9					CL	.var *-(WordListLink+wh_Xt)
=$bcb0					en = *	; remember here
>bca5	09					.byte CL	;wh_CodeLength
>bcb0	32 56 61 72 69 61 62 6c		L1:	.text "2Variable"	;  name of word as a string, ending at wh_NameLastChar
>bcb8	65
>bcb9	09					.byte *-L1	;wh_NameLength	length of name
>bcba	22 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bcbc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bcbd	08					.byte NN	;wh_Flags	dictionary flags
=48185					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bcbe	20 a7 bc	jsr $bca7	Two_variable:	jsr Variable		; compile word header & push PFA
.bcc1	4c fe ca	jmp $cafe			jmp Comma_YA		; alloc & init 2nd cell of data
=6					CL	.var *-(WordListLink+wh_Xt)
=$bcc4					en = *	; remember here
>bcbc	06					.byte CL	;wh_CodeLength
>bcc4	43 6f 6e 73 74 61 6e 74		L1:	.text "Constant"	;  name of word as a string, ending at wh_NameLastChar
>bccc	08					.byte *-L1	;wh_NameLength	length of name
>bccd	39 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bccf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bcd0	18					.byte UF+NN	;wh_Flags	dictionary flags
=48204					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bcd1					Constant:
.bcd1	20 8e b2	jsr $b28e			jsr underflow_1
.bcd4	20 46 bf	jsr $bf46			jsr Header_Comma	; compile word header
.bcd7	20 9c b5	jsr $b59c			jsr LitCompile		; compile code to load registers, & pick a subroutine
.bcda	20 3a cb	jsr $cb3a			jsr Jmp_Comma_YA	; compile code to JMP to the subroutine
.bcdd	4c 31 ba	jmp $ba31			jmp adjust_z		; fix word length
=15					CL	.var *-(WordListLink+wh_Xt)
=$bce0					en = *	; remember here
>bccf	0f					.byte CL	;wh_CodeLength
>bce0	32 43 6f 6e 73 74 61 6e		L1:	.text "2Constant"	;  name of word as a string, ending at wh_NameLastChar
>bce8	74
>bce9	09					.byte *-L1	;wh_NameLength	length of name
>bcea	4c bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bcec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bced	18					.byte UF+NN	;wh_Flags	dictionary flags
=48233					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bcee					Two_constant:
.bcee	20 a3 b2	jsr $b2a3			jsr underflow_2
.bcf1	20 46 bf	jsr $bf46			jsr Header_Comma	; compile word header
.bcf4	20 63 cd	jsr $cd63			jsr Swap
.bcf7	20 93 b5	jsr $b593			jsr Literal		; compile push lo cell
.bcfa	20 9c b5	jsr $b59c			jsr LitCompile		; compile push hi cell, YA=exit routine
.bcfd	20 3a cb	jsr $cb3a			jsr Jmp_Comma_YA	; compile JMP from above
.bd00	4c 31 ba	jmp $ba31			jmp adjust_z		; fix word length
=21					CL	.var *-(WordListLink+wh_Xt)
=$bd03					en = *	; remember here
>bcec	15					.byte CL	;wh_CodeLength
>bd03	56 61 6c 75 65			L1:	.text "Value"	;  name of word as a string, ending at wh_NameLastChar
>bd08	05					.byte *-L1	;wh_NameLength	length of name
>bd09	69 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd0b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd0c	18					.byte UF+NN	;wh_Flags	dictionary flags
=48264					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd0d					Value:
.bd0d	20 8e b2	jsr $b28e			jsr underflow_1
.bd10	20 46 bf	jsr $bf46			jsr Header_Comma	; compile word header
.bd13	20 c6 b5	jsr $b5c6			jsr ldya_immed_comma	; compile lda # & ldy #
.bd16	a9 e0		lda #$e0			lda #<PushYA		; compile jmp PushYA
.bd18	a0 b5		ldy #$b5			ldy #>PushYA
.bd1a	20 3a cb	jsr $cb3a			jsr Jmp_Comma_YA
.bd1d	4c 31 ba	jmp $ba31			jmp adjust_z		; fix word length
=19					CL	.var *-(WordListLink+wh_Xt)
=$bd20					en = *	; remember here
>bd0b	13					.byte CL	;wh_CodeLength
>bd20	32 56 61 6c 75 65		L1:	.text "2Value"	;  name of word as a string, ending at wh_NameLastChar
>bd26	06					.byte *-L1	;wh_NameLength	length of name
>bd27	88 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd29	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd2a	18					.byte UF+NN	;wh_Flags	dictionary flags
=48294					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd2b					TwoValue:
.bd2b	20 a3 b2	jsr $b2a3			jsr underflow_2
.bd2e	20 46 bf	jsr $bf46			jsr Header_Comma	; compile word header
.bd31	a9 3e		lda #$3e			lda #<TwoValue_Runtime	; compile JSR TValue_Runtime
.bd33	a0 bd		ldy #$bd			ldy #>TwoValue_Runtime
.bd35	20 23 cb	jsr $cb23			jsr Jsr_Comma_YA
.bd38	20 31 ba	jsr $ba31			jsr adjust_z		; fix word length
.bd3b	4c 0c cb	jmp $cb0c			jmp Two_Comma		; compile the value, return
=19					CL	.var *-(WordListLink+wh_Xt)
=$bd3e					en = *	; remember here
>bd29	13					.byte CL	;wh_CodeLength
.bd3e					TwoValue_Runtime:
.bd3e	68		pla				pla			; pop RTS addr, +1,
.bd3f	18		clc				clc
.bd40	69 01		adc #$01			adc #1
.bd42	85 15		sta $15				sta tmp1+0
.bd44	68		pla				pla
.bd45	69 00		adc #$00			adc #0
.bd47	85 16		sta $16				sta tmp1+1
.bd49	4c 8e c3	jmp $c38e			jmp Two_Fetch_tmp1	; fetch the data, return
>bd4c	54 6f				L1:	.text "To"	;  name of word as a string, ending at wh_NameLastChar
>bd4e	02					.byte *-L1	;wh_NameLength	length of name
>bd4f	a6 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd51	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd52	0c					.byte NN+IM	;wh_Flags	dictionary flags
=48334					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd53					To:
.bd53	20 94 ba	jsr $ba94			jsr Tick		; We always need the xt of the target word
.bd56	b5 25		lda $25,x			lda DStack+0,x		; tmp1= xt
.bd58	b4 26		ldy $26,x			ldy DStack+1,x
.bd5a	85 15		sta $15				sta tmp1+0
.bd5c	84 16		sty $16				sty tmp1+1
.bd5e	a0 00		ldy #$00			ldy #0			; determine what type xt points at
.bd60	b1 15		lda ($15),y			lda (tmp1),y
.bd62	c9 a0		cmp #$a0			cmp #$a0		;   LDY #
.bd64	d0 38		bne $bd9e			bne _Test2
.bd66	a5 0a		lda $0a				lda state		; check compile state
.bd68	f0 20		beq $bd8a			beq _Value_interpret
.bd6a	a9 50		lda #$50			lda #<PopYA		; compile jsr PopYA
.bd6c	a0 b2		ldy #$b2			ldy #>PopYA
.bd6e	20 23 cb	jsr $cb23			jsr Jsr_Comma_YA
.bd71	a9 8c		lda #$8c			lda #$8C		; compile STY xt+1
.bd73	20 e4 ca	jsr $cae4			jsr C_Comma_A
.bd76	20 47 c8	jsr $c847			jsr One_plus
.bd79	20 45 cd	jsr $cd45			jsr Dup
.bd7c	20 fb ca	jsr $cafb			jsr Comma
.bd7f	a9 8d		lda #$8d			lda #$8D		; compile STA xt+3
.bd81	20 e4 ca	jsr $cae4			jsr C_Comma_A
.bd84	20 f1 c7	jsr $c7f1			jsr Cell_Plus
.bd87	4c fb ca	jmp $cafb			jmp Comma
.bd8a					_Value_interpret:
.bd8a	20 a3 b2	jsr $b2a3			jsr underflow_2		; ( n xt )
.bd8d	e8		inx				inx			; Drop xt
.bd8e	e8		inx				inx
.bd8f	b5 25		lda $25,x			lda DStack+0,x		; LSB
.bd91	a0 03		ldy #$03			ldy #3			;   modify LDA # data
.bd93	91 15		sta ($15),y			sta (tmp1),y
.bd95	b5 26		lda $26,x			lda DStack+1,x		; MSB
.bd97	a0 01		ldy #$01			ldy #1			;   modify LDY # data
.bd99	91 15		sta ($15),y			sta (tmp1),y
.bd9b	e8		inx				inx			; Drop n
.bd9c	e8		inx				inx
.bd9d	60		rts				rts
.bd9e	c9 20		cmp #$20	_Test2:		cmp #$20		;   JSR abs ?
.bda0	d0 33		bne $bdd5			bne _Err
.bda2	a9 03		lda #$03			lda #3			; advance xt over the JSR abs to the data
.bda4	20 f6 c7	jsr $c7f6			jsr Plus_A
.bda7	a0 01		ldy #$01			ldy #1			; get JSR abs addr lo byte
.bda9	b1 15		lda ($15),y			lda (tmp1),y
.bdab	c9 3e		cmp #$3e			cmp #<TwoValue_Runtime
.bdad	d0 11		bne $bdc0			bne _Test3
.bdaf	a5 0a		lda $0a				lda state		; check compile state
.bdb1	f0 0a		beq $bdbd			beq _2Value_runtime
.bdb3	20 c6 b5	jsr $b5c6			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bdb6	a9 62		lda #$62			lda #<Two_Store_YA
.bdb8	a0 c3		ldy #$c3			ldy #>Two_Store_YA
.bdba	4c 23 cb	jmp $cb23			jmp Jsr_Comma_YA	; compile JSR TwoValue_runtime; return
.bdbd	4c 5c c3	jmp $c35c	_2Value_runtime: jmp Two_Store
.bdc0					_Test3:
.bdc0	c9 67		cmp #$67			cmp #<FValue_runtime
.bdc2	d0 11		bne $bdd5			bne _Err
.bdc4	a5 0a		lda $0a				lda state		; check compile state
.bdc6	f0 0a		beq $bdd2			beq _FValue_interpret
.bdc8	20 c6 b5	jsr $b5c6			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bdcb	a9 35		lda #$35			lda #<FStore_YA
.bdcd	a0 85		ldy #$85			ldy #>FStore_YA
.bdcf	4c 23 cb	jmp $cb23			jmp Jsr_Comma_YA	; compile JSR FValue_runtime; return
.bdd2	4c 32 85	jmp $8532	_FValue_interpret: jmp FStore
.bdd5	a9 e0		lda #$e0	_Err:		lda #$100+err_InvalidName ; unrecognized type.
.bdd7	20 bf b2	jsr $b2bf			jsr ThrowA
=135					CL	.var *-(WordListLink+wh_Xt)
=$bdda					en = *	; remember here
>bd51	87					.byte CL	;wh_CodeLength
>bdda	44 4d 61 78			L1:	.text "DMax"	;  name of word as a string, ending at wh_NameLastChar
>bdde	04					.byte *-L1	;wh_NameLength	length of name
>bddf	ce bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bde1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bde2	08					.byte NN	;wh_Flags	dictionary flags
=48478					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bde3	a9 80		lda #$80	DMax:		lda #$80
.bde5	d0 0b		bne $bdf2			bne DMin3
=4					CL	.var *-(WordListLink+wh_Xt)
=$bde7					en = *	; remember here
>bde1	04					.byte CL	;wh_CodeLength
>bde7	44 4d 69 6e			L1:	.text "DMin"	;  name of word as a string, ending at wh_NameLastChar
>bdeb	04					.byte *-L1	;wh_NameLength	length of name
>bdec	5e bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bdee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bdef	08					.byte NN	;wh_Flags	dictionary flags
=48491					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bdf0	a9 00		lda #$00	DMin:		lda #0
.bdf2	85 17		sta $17		DMin3:		sta tmp2	; save sign correction
.bdf4	20 ad b2	jsr $b2ad			jsr underflow_4
.bdf7	b5 27		lda $27,x			lda DStack+2,x	; compare
.bdf9	d5 2b		cmp $2b,x			cmp DStack+6,x
.bdfb	b5 28		lda $28,x			lda DStack+3,x
.bdfd	f5 2c		sbc $2c,x			sbc DStack+7,x
.bdff	b5 25		lda $25,x			lda DStack+0,x
.be01	f5 29		sbc $29,x			sbc DStack+4,x
.be03	b5 26		lda $26,x			lda DStack+1,x
.be05	f5 2a		sbc $2a,x			sbc DStack+5,x
.be07	50 02		bvc $be0b			bvc +
.be09	49 80		eor #$80			eor #$80	; fix sign
.be0b	45 17		eor $17		+		eor tmp2
.be0d	30 0f		bmi $be1e			bmi TwoNip_nouf	; if negative, NOS is larger and needs to be kept
.be0f	4c 12 c3	jmp $c312			jmp Two_Drop
=34					CL	.var *-(WordListLink+wh_Xt)
=$be12					en = *	; remember here
>bdee	22					.byte CL	;wh_CodeLength
>be12	32 4e 69 70			L1:	.text "2Nip"	;  name of word as a string, ending at wh_NameLastChar
>be16	04					.byte *-L1	;wh_NameLength	length of name
>be17	6b bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be19	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be1a	18					.byte UF+NN	;wh_Flags	dictionary flags
=48534					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be1b	20 ad b2	jsr $b2ad	TwoNip:		jsr underflow_4
.be1e	b5 25		lda $25,x	TwoNip_NoUf:	lda DStack+0,x	; copy dTOS to dNOS
.be20	95 29		sta $29,x			sta DStack+4,x
.be22	b5 26		lda $26,x			lda DStack+1,x
.be24	95 2a		sta $2a,x			sta DStack+5,x
.be26	b5 27		lda $27,x			lda DStack+2,x
.be28	95 2b		sta $2b,x			sta DStack+6,x
.be2a	b5 28		lda $28,x			lda DStack+3,x
.be2c	95 2c		sta $2c,x			sta DStack+7,x
.be2e	4c 12 c3	jmp $c312			jmp Two_Drop
=22					CL	.var *-(WordListLink+wh_Xt)
=$be31					en = *	; remember here
>be19	16					.byte CL	;wh_CodeLength
>be31	53 3e 44			L1:	.text "S>D"	;  name of word as a string, ending at wh_NameLastChar
>be34	03					.byte *-L1	;wh_NameLength	length of name
>be35	96 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be37	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be38	10					.byte UF	;wh_Flags	dictionary flags
=48564					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be39					S_To_D:
.be39	20 8e b2	jsr $b28e			jsr underflow_1
.be3c	a0 00		ldy #$00			ldy #0			; assume positive
.be3e	b5 26		lda $26,x			lda DStack+1,x		; test n
.be40	10 01		bpl $be43			bpl +
.be42	88		dey				dey			; make negative
.be43					+
.be43	ca		dex				dex			; push new hi cell
.be44	ca		dex				dex
.be45	94 25		sty $25,x			sty DStack+0,x
.be47	94 26		sty $26,x			sty DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$be49					en = *	; remember here
>be37	10					.byte CL	;wh_CodeLength
.be49	60		rts				rts
>be4a	44 3e 53			L1:	.text "D>S"	;  name of word as a string, ending at wh_NameLastChar
>be4d	03					.byte *-L1	;wh_NameLength	length of name
>be4e	b4 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be50	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be51	10					.byte UF	;wh_Flags	dictionary flags
=48589					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be52					D_To_S:
.be52	20 a3 b2	jsr $b2a3			jsr underflow_2
.be55	e8		inx				inx		; Drop hi cell
.be56	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$be57					en = *	; remember here
>be50	05					.byte CL	;wh_CodeLength
.be57	60		rts				rts
>be58	44 2d				L1:	.text "D-"	;  name of word as a string, ending at wh_NameLastChar
>be5a	02					.byte *-L1	;wh_NameLength	length of name
>be5b	cd bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be5d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be5e	10					.byte UF	;wh_Flags	dictionary flags
=48602					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be5f					D_Minus:
.be5f	20 ad b2	jsr $b2ad			jsr underflow_4 ; two double numbers
.be62	38		sec				sec
.be63	b5 2b		lda $2b,x			lda DStack+6,x	; LSB of lower word
.be65	f5 27		sbc $27,x			sbc DStack+2,x
.be67	95 2b		sta $2b,x			sta DStack+6,x
.be69	b5 2c		lda $2c,x			lda DStack+7,x	; MSB of lower word
.be6b	f5 28		sbc $28,x			sbc DStack+3,x
.be6d	95 2c		sta $2c,x			sta DStack+7,x
.be6f	b5 29		lda $29,x			lda DStack+4,x	; LSB of upper word
.be71	f5 25		sbc $25,x			sbc DStack+0,x
.be73	95 29		sta $29,x			sta DStack+4,x
.be75	b5 2a		lda $2a,x			lda DStack+5,x	; MSB of upper word
.be77	f5 26		sbc $26,x			sbc DStack+1,x
.be79	95 2a		sta $2a,x			sta DStack+5,x
.be7b	e8		inx				inx
.be7c	e8		inx				inx
.be7d	e8		inx				inx
.be7e	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$be7f					en = *	; remember here
>be5d	20					.byte CL	;wh_CodeLength
.be7f	60		rts				rts
>be80	44 2b				L1:	.text "D+"	;  name of word as a string, ending at wh_NameLastChar
>be82	02					.byte *-L1	;wh_NameLength	length of name
>be83	da bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be85	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be86	10					.byte UF	;wh_Flags	dictionary flags
=48642					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be87					D_Plus:
.be87	20 ad b2	jsr $b2ad			jsr underflow_4 ; two double numbers
.be8a	18		clc				clc
.be8b	b5 27		lda $27,x			lda DStack+2,x	; LSB of lower word
.be8d	75 2b		adc $2b,x			adc DStack+6,x
.be8f	95 2b		sta $2b,x			sta DStack+6,x
.be91	b5 28		lda $28,x			lda DStack+3,x	; MSB of lower word
.be93	75 2c		adc $2c,x			adc DStack+7,x
.be95	95 2c		sta $2c,x			sta DStack+7,x
.be97	b5 25		lda $25,x			lda DStack+0,x	; LSB of upper word
.be99	75 29		adc $29,x			adc DStack+4,x
.be9b	95 29		sta $29,x			sta DStack+4,x
.be9d	b5 26		lda $26,x			lda DStack+1,x	; MSB of upper word
.be9f	75 2a		adc $2a,x			adc DStack+5,x
.bea1	95 2a		sta $2a,x			sta DStack+5,x
.bea3	e8		inx				inx
.bea4	e8		inx				inx
.bea5	e8		inx				inx
.bea6	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$bea7					en = *	; remember here
>be85	20					.byte CL	;wh_CodeLength
.bea7	60		rts				rts
>bea8	44 31 2b			L1:	.text "D1+"	;  name of word as a string, ending at wh_NameLastChar
>beab	03					.byte *-L1	;wh_NameLength	length of name
>beac	02 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>beae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>beaf	10					.byte UF	;wh_Flags	dictionary flags
=48683					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.beb0	20 a3 b2	jsr $b2a3	D1Plus:		jsr underflow_2
.beb3	f6 27		inc $27,x			inc DStack+2,x
.beb5	d0 0a		bne $bec1			bne +
.beb7	f6 28		inc $28,x			inc DStack+3,x
.beb9	d0 06		bne $bec1			bne +
.bebb	f6 25		inc $25,x			inc DStack+0,x
.bebd	d0 02		bne $bec1			bne +
.bebf	f6 26		inc $26,x			inc DStack+1,x
.bec1					+
=17					CL	.var *-(WordListLink+wh_Xt)
=$bec1					en = *	; remember here
>beae	11					.byte CL	;wh_CodeLength
.bec1	60		rts				rts
>bec2	44 31 2d			L1:	.text "D1-"	;  name of word as a string, ending at wh_NameLastChar
>bec5	03					.byte *-L1	;wh_NameLength	length of name
>bec6	2b be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bec8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bec9	10					.byte UF	;wh_Flags	dictionary flags
=48709					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.beca	20 a3 b2	jsr $b2a3	D1Minus:	jsr underflow_2
.becd	b5 27		lda $27,x			lda DStack+2,x
.becf	d0 0e		bne $bedf			bne _1
.bed1	b5 28		lda $28,x			lda DStack+3,x
.bed3	d0 08		bne $bedd			bne _2
.bed5	b5 25		lda $25,x			lda DStack+0,x
.bed7	d0 02		bne $bedb			bne _3
.bed9	d6 26		dec $26,x			dec DStack+1,x
.bedb	d6 25		dec $25,x	_3:		dec DStack+0,x
.bedd	d6 28		dec $28,x	_2:		dec DStack+3,x
.bedf	d6 27		dec $27,x	_1:		dec DStack+2,x
=23					CL	.var *-(WordListLink+wh_Xt)
=$bee1					en = *	; remember here
>bec8	17					.byte CL	;wh_CodeLength
.bee1	60		rts				rts
>bee2	41 6c 6c 6f 74			L1:	.text "Allot"	;  name of word as a string, ending at wh_NameLastChar
>bee7	05					.byte *-L1	;wh_NameLength	length of name
>bee8	45 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>beea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>beeb	18					.byte UF+NN	;wh_Flags	dictionary flags
=48743					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.beec					Allot:
.beec	20 8e b2	jsr $b28e			jsr underflow_1
.beef	18		clc				clc			; adjust cp
.bef0	b5 25		lda $25,x			lda DStack+0,x
.bef2	65 00		adc $00				adc cp+0
.bef4	85 00		sta $00				sta cp+0
.bef6	a8		tay				tay			;   save lo byte
.bef7	b5 26		lda $26,x			lda DStack+1,x
.bef9	85 15		sta $15				sta tmp1
.befb	65 01		adc $01				adc cp+1
.befd	85 01		sta $01				sta cp+1
.beff	24 15		bit $15				bit tmp1
.bf01	30 15		bmi $bf18			bmi _release
.bf03	b0 06		bcs $bf0b			bcs _pos_err		; carry from the add is bad
=32600					_last = cp_end-2*padoffset
.bf05	c0 58		cpy #$58			cpy #<_last		; cp < cp_end ?
.bf07	e9 7f		sbc #$7f			sbc #>_last
.bf09	90 2c		bcc $bf37			bcc _done		; we're fine.
.bf0b					_pos_err:
.bf0b	a9 58		lda #$58			lda #<_last
.bf0d	85 00		sta $00				sta cp+0
.bf0f	a9 7f		lda #$7f			lda #>_last
.bf11	85 01		sta $01				sta cp+1
.bf13	a9 c5		lda #$c5			lda #$100+err_Allocate
.bf15	4c bf b2	jmp $b2bf			jmp ThrowA
.bf18					_release:
.bf18	90 06		bcc $bf20			bcc _neg_err		; borrow indicates we've gone below 0
.bf1a	c0 65		cpy #$65			cpy #<cp0
.bf1c	e9 0b		sbc #$0b			sbc #>cp0
.bf1e	b0 17		bcs $bf37			bcs _done
.bf20					_neg_err:
.bf20	a9 65		lda #$65			lda #<cp0		; Set CP to CP0
.bf22	85 00		sta $00				sta cp+0
.bf24	a9 0b		lda #$0b			lda #>cp0
.bf26	85 01		sta $01				sta cp+1
.bf28	a9 fb		lda #$fb			lda #<forth_dictionary_start	; set WordLists[Forth] to the first
.bf2a	8d 12 03	sta $0312			sta WordlistsV+0		; word in ROM
.bf2d	a9 cc		lda #$cc			lda #>forth_dictionary_start
.bf2f	8d 13 03	sta $0313			sta WordlistsV+1
.bf32	a9 c4		lda #$c4			lda #$100+err_Free		; abort with an error
.bf34	4c bf b2	jmp $b2bf			jmp ThrowA
.bf37					_done:
.bf37	e8		inx				inx			; Drop n
.bf38	e8		inx				inx
=77					CL	.var *-(WordListLink+wh_Xt)
=$bf39					en = *	; remember here
>beea	4d					.byte CL	;wh_CodeLength
.bf39	60		rts				rts
>bf3a	48 65 61 64 65 72 2c		L1:	.text "Header,"	;  name of word as a string, ending at wh_NameLastChar
>bf41	07					.byte *-L1	;wh_NameLength	length of name
>bf42	67 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf44	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf45	08					.byte NN	;wh_Flags	dictionary flags
=48833					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf46					Header_Comma:
.bf46	20 54 bf	jsr $bf54			jsr Header_Build
.bf49					Header_Link:
.bf49	a5 0f		lda $0f				lda WorkWord+0		; dp= WorkWord
.bf4b	85 11		sta $11				sta dp+0
.bf4d	a5 10		lda $10				lda WorkWord+1
.bf4f	85 12		sta $12				sta dp+1
.bf51	4c ad b8	jmp $b8ad			jmp dp_to_current	; Update the CURRENT wordlist with the new DP.
.bf54					Header_Build:
.bf54	20 fe b8	jsr $b8fe			jsr parse_name_check	; get name string
.bf57	20 9f ca	jsr $ca9f			jsr Two_dup		; ( addr u addr u )
.bf5a	20 0a bb	jsr $bb0a			jsr find_name		; ( addr u nt )
.bf5d	b5 26		lda $26,x			lda DStack+1,x		; not found?
.bf5f	e8		inx				inx			; Drop flag from find-name.
.bf60	e8		inx				inx
.bf61	a8		tay				tay
.bf62	f0 1f		beq $bf83			beq _new_name		; We haven't seen this one before.
.bf64	24 0c		bit $0c				bit status		; Check bit 7
.bf66	10 08		bpl $bf70			bpl _redefined_name	; Bit 7 is zero, so print the message.
.bf68	a9 80		lda #$80			lda #$80		; Set bit 7 to indicate dup
.bf6a	05 0c		ora $0c				ora status
.bf6c	85 0c		sta $0c				sta status
.bf6e	d0 19		bne $bf89			bne _process_name
.bf70					_redefined_name:
.bf70	a9 05		lda #$05			lda #<str_redefined
.bf72	a0 d9		ldy #$d9			ldy #>str_redefined
.bf74	20 ee cb	jsr $cbee			jsr Print_ASCIIZ_YA_no_lf
.bf77	20 9f ca	jsr $ca9f			jsr Two_dup		 ; ( addr u addr u )
.bf7a	20 cd cb	jsr $cbcd			jsr Type
.bf7d	20 c0 cb	jsr $cbc0			jsr Space
.bf80	4c 89 bf	jmp $bf89			jmp _process_name
.bf83					_new_name:
.bf83	a9 7f		lda #$7f			lda #$7F		; Clear bit 0 of status to indicate new word.
.bf85	25 0c		and $0c				and status
.bf87	85 0c		sta $0c				sta status
.bf89					_process_name:
.bf89	20 9f ca	jsr $ca9f			jsr Two_dup		; compile name string ending at wh_NameLastChar
.bf8c	20 13 c8	jsr $c813			jsr Here
.bf8f	20 63 cd	jsr $cd63			jsr Swap
.bf92	20 44 ac	jsr $ac44			jsr CMove
.bf95	20 45 cd	jsr $cd45			jsr Dup
.bf98	20 ec be	jsr $beec			jsr Allot
.bf9b	20 e1 ca	jsr $cae1			jsr C_Comma		; compile wh_NameLength
.bf9e	e8		inx				inx			; drop name string addr
.bf9f	e8		inx				inx
.bfa0	20 9d b8	jsr $b89d			jsr current_to_dp	; Get the CURRENT dictionary pointer.
.bfa3	a5 11		lda $11				lda dp+0		; compile wh_WordListLink
.bfa5	a4 12		ldy $12				ldy dp+1
.bfa7	20 fe ca	jsr $cafe			jsr Comma_YA
.bfaa	a9 03		lda #$03			lda #3			; compile wh_CodeLength (temporary value, see adjust_z)
.bfac	20 e4 ca	jsr $cae4			jsr C_Comma_A
.bfaf	a9 08		lda #$08			lda #NN			; compile wh_Flags
.bfb1	20 e4 ca	jsr $cae4			jsr C_Comma_A
.bfb4	38		sec				sec			; WorkWord= nt
.bfb5	a5 00		lda $00				lda cp+0
.bfb7	e9 85		sbc #$85			sbc #wh_xt
.bfb9	85 0f		sta $0f				sta WorkWord+0
.bfbb	a5 01		lda $01				lda cp+1
.bfbd	e9 00		sbc #$00			sbc #0
.bfbf	85 10		sta $10				sta WorkWord+1
.bfc1	60		rts				rts
=124					CL	.var *-(WordListLink+wh_Xt)
=$bfc2					en = *	; remember here
>bf44	7c					.byte CL	;wh_CodeLength
>bfc2	43 72 65 61 74 65		L1:	.text "Create"	;  name of word as a string, ending at wh_NameLastChar
>bfc8	06					.byte *-L1	;wh_NameLength	length of name
>bfc9	c1 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfcb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfcc	08					.byte NN	;wh_Flags	dictionary flags
=48968					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfcd					Create:
.bfcd	20 46 bf	jsr $bf46			jsr Header_Comma	; compile word header
.bfd0	a9 da		lda #$da			lda #<DoVar
.bfd2	a0 bf		ldy #$bf			ldy #>DoVar
.bfd4	20 23 cb	jsr $cb23			jsr Jsr_Comma_YA
.bfd7	4c 31 ba	jmp $ba31			jmp adjust_z
=13					CL	.var *-(WordListLink+wh_Xt)
=$bfda					en = *	; remember here
>bfcb	0d					.byte CL	;wh_CodeLength
.bfda					DoVar:
.bfda	68		pla				pla		; Pull the return address off the machine's stack
.bfdb	18		clc				clc		;   +1 because of the way the JSR works
.bfdc	69 01		adc #$01			adc #1
.bfde	ca		dex				dex		; push on data stack
.bfdf	ca		dex				dex
.bfe0	95 25		sta $25,x			sta DStack+0,x
.bfe2	68		pla				pla
.bfe3	69 00		adc #$00			adc #0
.bfe5	95 26		sta $26,x			sta DStack+1,x
.bfe7	60		rts				rts		; takes us to the original caller of the
>bfe8	44 6f 65 73 3e			L1:	.text "Does>"	;  name of word as a string, ending at wh_NameLastChar
>bfed	05					.byte *-L1	;wh_NameLength	length of name
>bfee	48 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bff0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bff1	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=49005					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bff2					Does:
.bff2	a0 c0		ldy #$c0			ldy #>_runtime
.bff4	a9 0c		lda #$0c			lda #<_runtime
.bff6	20 23 cb	jsr $cb23			jsr Jsr_Comma_YA
.bff9	a9 68		lda #$68			lda #$68		; compile PLA  to pop RTS addr (PFA-1) to AY
.bffb	a0 a8		ldy #$a8			ldy #$a8		;    & TAY
.bffd	20 fe ca	jsr $cafe			jsr Comma_YA
.c000	a9 68		lda #$68			lda #$68		; compile PLA
.c002	20 e4 ca	jsr $cae4			jsr C_Comma_A
.c005	a0 c0		ldy #$c0			ldy #>_dodoes
.c007	a9 1e		lda #$1e			lda #<_dodoes
.c009	4c 23 cb	jmp $cb23			jmp Jsr_Comma_YA
=26					CL	.var *-(WordListLink+wh_Xt)
=$c00c					en = *	; remember here
>bff0	1a					.byte CL	;wh_CodeLength
.c00c					_runtime:
.c00c	20 9d b8	jsr $b89d			jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.c00f	18		clc				clc
.c010	68		pla				pla		; RTS addr LSB
.c011	69 01		adc #$01			adc #1		;   +1 for JSR bahavior
.c013	a0 86		ldy #$86			ldy #Wh_xt+1
.c015	91 11		sta ($11),y			sta (dp),y
.c017	68		pla				pla		; RTS addr MSB
.c018	69 00		adc #$00			adc #0
.c01a	c8		iny				iny
.c01b	91 11		sta ($11),y			sta (dp),y
.c01d	60		rts				rts
.c01e					_dodoes:
.c01e	c8		iny				iny		; +1 for JSR behavior
.c01f	d0 03		bne $c024			bne +
.c021	18		clc				clc
.c022	69 01		adc #$01			adc #1
.c024					+
.c024	4c 53 cd	jmp $cd53			jmp PushAY
>c027	55 6e 75 73 65 64		L1:	.text "Unused"	;  name of word as a string, ending at wh_NameLastChar
>c02d	06					.byte *-L1	;wh_NameLength	length of name
>c02e	6d bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c030	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c031	00					.byte 0	;wh_Flags	dictionary flags
=49069					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c032					Unused:
=32600					_last = cp_end-2*padoffset
.c032	ca		dex				dex
.c033	ca		dex				dex
.c034	38		sec				sec
.c035	a9 58		lda #$58			lda #<_last
.c037	e5 00		sbc $00				sbc cp+0
.c039	95 25		sta $25,x			sta DStack+0,x
.c03b	a9 7f		lda #$7f			lda #>_last
.c03d	e5 01		sbc $01				sbc cp+1
.c03f	95 26		sta $26,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$c041					en = *	; remember here
>c030	0f					.byte CL	;wh_CodeLength
.c041	60		rts				rts
>c042	44 65 70 74 68			L1:	.text "Depth"	;  name of word as a string, ending at wh_NameLastChar
>c047	05					.byte *-L1	;wh_NameLength	length of name
>c048	ad bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c04a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c04b	08					.byte NN	;wh_Flags	dictionary flags
=49095					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c04c					Depth:
.c04c	a9 28		lda #$28			lda #DStack0	; A= DStack0 - X
.c04e	86 1b		stx $1b				stx tmp4
.c050	38		sec				sec
.c051	e5 1b		sbc $1b				sbc tmp4
.c053	4a		lsr a				lsr		; divide by two because each cell is two bytes
.c054	4c 22 b6	jmp $b622			jmp PushZA
=11					CL	.var *-(WordListLink+wh_Xt)
=$c057					en = *	; remember here
>c04a	0b					.byte CL	;wh_CodeLength
>c057	4b 65 79			L1:	.text "Key"	;  name of word as a string, ending at wh_NameLastChar
>c05a	03					.byte *-L1	;wh_NameLength	length of name
>c05b	c7 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c05d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c05e	08					.byte NN	;wh_Flags	dictionary flags
=49114					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c05f	20 65 c0	jsr $c065	Key:		jsr key_a		; returns char in A
.c062	4c 22 b6	jmp $b622			jmp PushZA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c065					en = *	; remember here
>c05d	06					.byte CL	;wh_CodeLength
.c065					Key_A:
.c065	6c 08 03	jmp ($0308)			jmp (input)		; JSR/RTS
>c068	4b 65 79 3f			L1:	.text "Key?"	;  name of word as a string, ending at wh_NameLastChar
>c06c	04					.byte *-L1	;wh_NameLength	length of name
>c06d	da bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c06f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c070	08					.byte NN	;wh_Flags	dictionary flags
=49132					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c071	20 77 c0	jsr $c077	KeyQ:		jsr KeyQ_A
.c074	4c 22 b6	jmp $b622			jmp PushZA
.c077	6c 0a 03	jmp ($030a)	KeyQ_A:		jmp (HaveKey)
>c07a	52 65 66 69 6c 6c		L1:	.text "Refill"	;  name of word as a string, ending at wh_NameLastChar
>c080	06					.byte *-L1	;wh_NameLength	length of name
>c081	ec bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c083	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c084	08					.byte NN	;wh_Flags	dictionary flags
=49152					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c085					Refill:
.c085	a9 00		lda #$00			lda #0			; show empty in case of error
.c087	85 06		sta $06				sta ciblen+0
.c089	85 07		sta $07				sta ciblen+1
.c08b	a5 02		lda $02				lda insrc		; cheat: We only check LSB
.c08d	d0 24		bne $c0b3			bne _src_not_kbd
.c08f	a5 04		lda $04				lda cib+0		; address of CIB is NOS
.c091	a4 05		ldy $05				ldy cib+1
.c093	20 e0 b5	jsr $b5e0			jsr PushYA
.c096	a9 ff		lda #$ff			lda #bsize		; max number of chars is TOS
.c098	20 22 b6	jsr $b622			jsr PushZA		;  cheat: We only accept max 255
.c09b	20 ca c0	jsr $c0ca			jsr Accept		; ( addr n1 -- n2)
.c09e	b5 25		lda $25,x			lda DStack+0,x
.c0a0	85 06		sta $06				sta ciblen+0
.c0a2	b5 26		lda $26,x			lda DStack+1,x
.c0a4	85 07		sta $07				sta ciblen+1		; though we only accept 255 chars
.c0a6	a9 00		lda #$00			lda #0
.c0a8	85 08		sta $08				sta toin+0
.c0aa	85 09		sta $09				sta toin+1
.c0ac	a9 ff		lda #$ff			lda #$FF		; overwrite with TRUE flag
.c0ae	95 25		sta $25,x			sta DStack+0,x
.c0b0	95 26		sta $26,x			sta DStack+1,x
.c0b2	60		rts				rts
.c0b3					_src_not_kbd:
.c0b3	c9 ff		cmp #$ff			cmp #$ff
.c0b5	d0 03		bne $c0ba			bne _src_not_string
.c0b7	4c 13 b6	jmp $b613			jmp False
.c0ba					_src_not_string:
.c0ba	a9 eb		lda #$eb			lda #$100+err_Unsupported
.c0bc	20 bf b2	jsr $b2bf			jsr ThrowA
=58					CL	.var *-(WordListLink+wh_Xt)
=$c0bf					en = *	; remember here
>c083	3a					.byte CL	;wh_CodeLength
>c0bf	41 63 63 65 70 74		L1:	.text "Accept"	;  name of word as a string, ending at wh_NameLastChar
>c0c5	06					.byte *-L1	;wh_NameLength	length of name
>c0c6	00 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c0c8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c0c9	18					.byte UF+NN	;wh_Flags	dictionary flags
=49221					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c0ca					Accept:
.c0ca	20 a3 b2	jsr $b2a3			jsr underflow_2
.c0cd	b5 25		lda $25,x			lda DStack+0,x		; Abort if we were asked to receive 0 chars
.c0cf	15 26		ora $26,x			ora DStack+1,x
.c0d1	d0 09		bne $c0dc			bne _not_zero
.c0d3	e8		inx				inx			; drop n
.c0d4	e8		inx				inx
.c0d5	95 25		sta $25,x			sta DStack+0,x		; replace addr with 0
.c0d7	95 26		sta $26,x			sta DStack+1,x
.c0d9	4c b1 c1	jmp $c1b1			jmp accept_done
.c0dc					_not_zero:
.c0dc	b5 25		lda $25,x			lda DStack+0,x	; number of chars to get in tmp2 ...
.c0de	85 17		sta $17				sta tmp2
.c0e0	a9 00		lda #$00			lda #0
.c0e2	85 18		sta $18				sta tmp2+1	; ... but we only accept max 255 chars
.c0e4	b5 27		lda $27,x			lda DStack+2,x	; address of buffer is NOS, to tmp1
.c0e6	85 15		sta $15				sta tmp1
.c0e8	b5 28		lda $28,x			lda DStack+3,x
.c0ea	85 16		sta $16				sta tmp1+1
.c0ec	e8		inx				inx
.c0ed	e8		inx				inx
.c0ee	a0 00		ldy #$00			ldy #0
.c0f0	a5 0c		lda $0c				lda status
.c0f2	29 f7		and #$f7			and #$f7
.c0f4	18		clc				clc
.c0f5	69 01		adc #$01			adc #1
.c0f7	09 08		ora #$08			ora #$08
.c0f9	85 0c		sta $0c				sta status
.c0fb					accept_loop:
.c0fb	20 65 c0	jsr $c065			jsr key_a
.c0fe	c9 0a		cmp #$0a			cmp #AscLF
.c100	f0 20		beq $c122			beq _eol
.c102	c9 0d		cmp #$0d			cmp #AscCR
.c104	f0 1c		beq $c122			beq _eol
.c106	c9 08		cmp #$08			cmp #AscBS
.c108	f0 24		beq $c12e			beq _backspace
.c10a	c9 7f		cmp #$7f			cmp #AscDEL	; (CTRL-h)
.c10c	f0 20		beq $c12e			beq _backspace
.c10e	c9 10		cmp #$10			cmp #AscCP
.c110	f0 37		beq $c149			beq _ctrl_p
.c112	c9 0e		cmp #$0e			cmp #AscCN
.c114	f0 46		beq $c15c			beq _ctrl_n
.c116	91 15		sta ($15),y			sta (tmp1),y
.c118	c8		iny				iny
.c119	20 b3 cb	jsr $cbb3			jsr Emit_A
.c11c	c4 17		cpy $17				cpy tmp2	; reached character limit?
.c11e	d0 db		bne $c0fb			bne accept_loop	      ; fall through if buffer limit reached
.c120	f0 03		beq $c125			beq _buffer_full
.c122					_eol:
.c122	20 c0 cb	jsr $cbc0			jsr Space	; print final space
.c125					_buffer_full:
.c125	94 25		sty $25,x			sty DStack+0,x	; Y contains number of chars accepted already
.c127	a9 00		lda #$00			lda #0
.c129	95 26		sta $26,x			sta DStack+1,x		; we only accept 256 chars
.c12b	4c b1 c1	jmp $c1b1			jmp accept_done
.c12e					_backspace:
.c12e	c0 00		cpy #$00			cpy #0		; buffer empty?
.c130	d0 06		bne $c138			bne +
.c132	a9 07		lda #$07			lda #AscBELL	; complain and don't delete beyond the start of line
.c134	20 b3 cb	jsr $cbb3			jsr Emit_A
.c137	c8		iny				iny
.c138					+
.c138	88		dey				dey
.c139	a9 08		lda #$08			lda #AscBS	; move back one
.c13b	20 b3 cb	jsr $cbb3			jsr Emit_A
.c13e	20 c0 cb	jsr $cbc0			jsr Space	; print a space (rubout)
.c141	a9 08		lda #$08			lda #AscBS	; move back over space
.c143	20 b3 cb	jsr $cbb3			jsr Emit_A
.c146	4c fb c0	jmp $c0fb			jmp accept_loop
.c149					_ctrl_p:
.c149	a5 0c		lda $0c				lda status
.c14b	29 07		and #$07			and #7
.c14d	d0 08		bne $c157			bne _ctrl_p_dec
.c14f	a5 0c		lda $0c				lda status
.c151	09 07		ora #$07			ora #7
.c153	85 0c		sta $0c				sta status
.c155	d0 14		bne $c16b			bne _recall_history
.c157					_ctrl_p_dec:
.c157	c6 0c		dec $0c				dec status
.c159	4c 6b c1	jmp $c16b			jmp _recall_history
.c15c					_ctrl_n:
.c15c	a9 08		lda #$08			lda #$8
.c15e	24 0c		bit $0c				bit status
.c160	d0 09		bne $c16b			bne _recall_history
.c162	a5 0c		lda $0c				lda status
.c164	29 f7		and #$f7			and #$f7
.c166	18		clc				clc
.c167	69 01		adc #$01			adc #1
.c169	85 0c		sta $0c				sta status
.c16b					_recall_history:
.c16b	a9 f7		lda #$f7			lda #$ff-%00001000
.c16d	25 0c		and $0c				and status
.c16f	85 0c		sta $0c				sta status
.c171	20 cc c1	jsr $c1cc			jsr accept_total_recall
.c174	a9 0d		lda #$0d			lda #AscCR
.c176	20 b3 cb	jsr $cbb3			jsr Emit_A
.c179					input_clear:
.c179	c0 00		cpy #$00			cpy #0
.c17b	f0 07		beq $c184			beq input_cleared
.c17d	20 c0 cb	jsr $cbc0			jsr Space
.c180	88		dey				dey
.c181	4c 79 c1	jmp $c179			jmp input_clear
.c184					input_cleared:
.c184	a9 0d		lda #$0d			lda #AscCR
.c186	20 b3 cb	jsr $cbb3			jsr Emit_A
.c189	b1 19		lda ($19),y			lda (tmp3),y
.c18b	85 0d		sta $0d				sta status+1
.c18d	e6 19		inc $19				inc tmp3
.c18f	d0 02		bne $c193			bne +		; Increment the upper byte on carry.
.c191	e6 1a		inc $1a				inc tmp3+1
.c193					+
.c193	a9 0d		lda #$0d			lda #AscCR
.c195	20 b3 cb	jsr $cbb3			jsr Emit_A
.c198					_history_loop:
.c198	c4 0d		cpy $0d				cpy status+1
.c19a	d0 03		bne $c19f			bne +
.c19c	4c fb c0	jmp $c0fb			jmp accept_loop	      ; Needs a long jump
.c19f					+
.c19f	c4 17		cpy $17				cpy tmp2
.c1a1	f0 0a		beq $c1ad			beq _hist_filled_buffer
.c1a3	b1 19		lda ($19),y			lda (tmp3),y
.c1a5	91 15		sta ($15),y			sta (tmp1),y
.c1a7	20 b3 cb	jsr $cbb3			jsr Emit_A
.c1aa	c8		iny				iny
.c1ab	d0 eb		bne $c198			bne _history_loop
.c1ad					_hist_filled_buffer:
.c1ad	88		dey				dey
.c1ae	4c fb c0	jmp $c0fb			jmp accept_loop
.c1b1					accept_done:
.c1b1	20 cc c1	jsr $c1cc			jsr accept_total_recall
.c1b4	85 0d		sta $0d				sta status+1
.c1b6	a0 00		ldy #$00			ldy #0
.c1b8	91 19		sta ($19),y			sta (tmp3),y
.c1ba	e6 19		inc $19				inc tmp3
.c1bc	d0 02		bne $c1c0			bne +		; Increment the upper byte on carry.
.c1be	e6 1a		inc $1a				inc tmp3+1
.c1c0					+
.c1c0					_save_history_loop:
.c1c0	c4 0d		cpy $0d				cpy status+1
.c1c2	f0 07		beq $c1cb			beq _save_history_done
.c1c4	b1 15		lda ($15),y			lda (tmp1),y
.c1c6	91 19		sta ($19),y			sta (tmp3),y
.c1c8	c8		iny				iny
.c1c9	d0 f5		bne $c1c0			bne _save_history_loop
.c1cb					_save_history_done:
=257					CL	.var *-(WordListLink+wh_Xt)
=$ff					CL	 .var $ff
=$c1cb					en = *	; remember here
>c0c8	ff					.byte CL	;wh_CodeLength
.c1cb	60		rts				rts
.c1cc					accept_total_recall:
.c1cc	a9 65		lda #$65			lda #<hist_buff
.c1ce	85 19		sta $19				sta tmp3
.c1d0	a9 07		lda #$07			lda #>hist_buff
.c1d2	85 1a		sta $1a				sta tmp3+1
.c1d4	a5 0c		lda $0c				lda status
.c1d6	6a		ror a				ror
.c1d7	29 03		and #$03			and #3
.c1d9	18		clc				clc
.c1da	65 1a		adc $1a				adc tmp3+1
.c1dc	85 1a		sta $1a				sta tmp3+1
.c1de	a5 0c		lda $0c				lda status
.c1e0	6a		ror a				ror		; Rotate through carry into msb.
.c1e1	6a		ror a				ror
.c1e2	29 80		and #$80			and #$80
.c1e4	18		clc				clc
.c1e5	65 19		adc $19				adc tmp3
.c1e7	85 19		sta $19				sta tmp3
.c1e9	90 02		bcc $c1ed			bcc +		; Increment the upper byte on carry.
.c1eb	e6 1a		inc $1a				inc tmp3+1
.c1ed					+
.c1ed	98		tya				tya
.c1ee	c9 80		cmp #$80			cmp #$80
.c1f0	90 02		bcc $c1f4			bcc +
.c1f2	a9 7f		lda #$7f			lda #$7F
.c1f4					+
.c1f4	60		rts				rts
>c1f5	49 6e 70 75 74 3e 52		L1:	.text "Input>R"	;  name of word as a string, ending at wh_NameLastChar
>c1fc	07					.byte *-L1	;wh_NameLength	length of name
>c1fd	45 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c1ff	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c200	08					.byte NN	;wh_Flags	dictionary flags
=49532					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c201					Input_To_R:
.c201	68		pla				pla			; move it out of the way
.c202	85 15		sta $15				sta tmp1+0
.c204	68		pla				pla
.c205	85 16		sta $16				sta tmp1+1
.c207	a0 07		ldy #$07			ldy #7
.c209	b9 02 00	lda $0002,y	_loop:		lda InSrc,y	; insrc+7 is toin+1
.c20c	48		pha				pha
.c20d	88		dey				dey
.c20e	10 f9		bpl $c209			bpl _loop
.c210	a5 16		lda $16				lda tmp1+1		; Restore address for return jump
.c212	48		pha				pha
.c213	a5 15		lda $15				lda tmp1+0
.c215	48		pha				pha
=21					CL	.var *-(WordListLink+wh_Xt)
=$c216					en = *	; remember here
>c1ff	15					.byte CL	;wh_CodeLength
.c216	60		rts				rts
>c217	52 3e 49 6e 70 75 74		L1:	.text "R>Input"	;  name of word as a string, ending at wh_NameLastChar
>c21e	07					.byte *-L1	;wh_NameLength	length of name
>c21f	7c c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c221	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c222	08					.byte NN	;wh_Flags	dictionary flags
=49566					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c223					R_To_Input:
.c223	68		pla				pla		 ; move it out of the way
.c224	85 15		sta $15				sta tmp1+0
.c226	68		pla				pla
.c227	85 16		sta $16				sta tmp1+1
.c229	a0 00		ldy #$00			ldy #0
.c22b	68		pla		_loop:		pla
.c22c	99 02 00	sta $0002,y			sta InSrc,y ; also cib ciblen toin
.c22f	c8		iny				iny
.c230	c0 08		cpy #$08			cpy #8
.c232	d0 f7		bne $c22b			bne _loop
.c234	a5 16		lda $16				lda tmp1+1		; Restore address for return jump
.c236	48		pha				pha
.c237	a5 15		lda $15				lda tmp1+0
.c239	48		pha				pha
=23					CL	.var *-(WordListLink+wh_Xt)
=$c23a					en = *	; remember here
>c221	17					.byte CL	;wh_CodeLength
.c23a	60		rts				rts
>c23b	42 6f 75 6e 64 73		L1:	.text "Bounds"	;  name of word as a string, ending at wh_NameLastChar
>c241	06					.byte *-L1	;wh_NameLength	length of name
>c242	9e c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c244	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c245	10					.byte UF	;wh_Flags	dictionary flags
=49601					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c246					Bounds:
.c246	20 a3 b2	jsr $b2a3			jsr underflow_2
.c249	18		clc				clc
.c24a	b5 25		lda $25,x			lda DStack+0,x		; LSB u
.c24c	b4 27		ldy $27,x			ldy DStack+2,x		; LSB addr
.c24e	75 27		adc $27,x			adc DStack+2,x
.c250	95 27		sta $27,x			sta DStack+2,x		; LSB addr+u
.c252	94 25		sty $25,x			sty DStack+0,x
.c254	b5 26		lda $26,x			lda DStack+1,x		; MSB u
.c256	b4 28		ldy $28,x			ldy DStack+3,x		; MSB addr
.c258	75 28		adc $28,x			adc DStack+3,x
.c25a	95 28		sta $28,x			sta DStack+3,x		; MSB addr+u
.c25c	94 26		sty $26,x			sty DStack+1,x
=24					CL	.var *-(WordListLink+wh_Xt)
=$c25e					en = *	; remember here
>c244	18					.byte CL	;wh_CodeLength
.c25e	60		rts				rts
>c25f	53 70 61 63 65 73		L1:	.text "Spaces"	;  name of word as a string, ending at wh_NameLastChar
>c265	06					.byte *-L1	;wh_NameLength	length of name
>c266	c1 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c268	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c269	18					.byte UF+NN	;wh_Flags	dictionary flags
=49637					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c26a					Spaces:
.c26a	20 8e b2	jsr $b28e			jsr underflow_1
.c26d	4c 73 c2	jmp $c273			jmp _test
.c270					_loop:
.c270	20 c0 cb	jsr $cbc0			jsr Space		; print a space
.c273	d6 25		dec $25,x	_test:		dec DStack+0,x		; decrement & test
.c275	10 f9		bpl $c270			bpl _loop
.c277	e8		inx				inx			; Drop
.c278	e8		inx				inx
=15					CL	.var *-(WordListLink+wh_Xt)
=$c279					en = *	; remember here
>c268	0f					.byte CL	;wh_CodeLength
.c279	60		rts				rts
>c27a	2d 54 72 61 69 6c 69 6e		L1:	.text "-Trailing"	;  name of word as a string, ending at wh_NameLastChar
>c282	67
>c283	09					.byte *-L1	;wh_NameLength	length of name
>c284	e5 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c286	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c287	18					.byte UF+NN	;wh_Flags	dictionary flags
=49667					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c288					Minus_trailing:
.c288	20 a3 b2	jsr $b2a3			jsr underflow_2
.c28b	b5 27		lda $27,x			lda DStack+2,x		; tmp1= addr + (u1 & $ff00)
.c28d	85 15		sta $15				sta tmp1+0
.c28f	b5 28		lda $28,x			lda DStack+3,x
.c291	18		clc				clc
.c292	75 26		adc $26,x			adc DStack+1,x
.c294	85 16		sta $16				sta tmp1+1
.c296	b4 25		ldy $25,x			ldy DStack+0,x
.c298	88		dey		_loop:		dey			; back 1 char
.c299	c0 ff		cpy #$ff			cpy #$ff
.c29b	d0 06		bne $c2a3			bne +
.c29d	c6 16		dec $16				dec tmp1+1		;   back 1 page
.c29f	d6 26		dec $26,x			dec DStack+1,x
.c2a1	30 06		bmi $c2a9			bmi _done
.c2a3					+
.c2a3	b1 15		lda ($15),y			lda (tmp1),y		; if blank, keep going
.c2a5	c9 20		cmp #$20			cmp #AscSP
.c2a7	f0 ef		beq $c298			beq _loop
.c2a9	c8		iny		_done:		iny			; forward 1 char
.c2aa	d0 02		bne $c2ae			bne +
.c2ac	f6 26		inc $26,x			inc DStack+1,x
.c2ae	94 25		sty $25,x	+		sty DStack+0,x
=40					CL	.var *-(WordListLink+wh_Xt)
=$c2b0					en = *	; remember here
>c286	28					.byte CL	;wh_CodeLength
.c2b0	60		rts				rts
>c2b1	2d 4c 65 61 64 69 6e 67		L1:	.text "-Leading"	;  name of word as a string, ending at wh_NameLastChar
>c2b9	08					.byte *-L1	;wh_NameLength	length of name
>c2ba	03 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c2bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c2bd	18					.byte UF+NN	;wh_Flags	dictionary flags
=49721					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c2be					Minus_leading:
.c2be	20 a3 b2	jsr $b2a3			jsr underflow_2
.c2c1					_loop:
.c2c1	b5 25		lda $25,x			lda DStack+0,x		; chars left?
.c2c3	15 26		ora $26,x			ora DStack+1,x
.c2c5	f0 10		beq $c2d7			beq _done
.c2c7	a1 27		lda ($27,x)			lda (DStack+2,x)	; get first character
.c2c9	20 6f a7	jsr $a76f			jsr is_whitespace
.c2cc	90 09		bcc $c2d7			bcc _done
.c2ce	20 3b b6	jsr $b63b			jsr One			; ( addr u 1 )
.c2d1	20 e4 c2	jsr $c2e4			jsr Slash_String	; ( addr+ u-1 )
.c2d4	4c c1 c2	jmp $c2c1			jmp _loop
.c2d7					_done:
=25					CL	.var *-(WordListLink+wh_Xt)
=$c2d7					en = *	; remember here
>c2bc	19					.byte CL	;wh_CodeLength
.c2d7	60		rts				rts
>c2d8	2f 53 74 72 69 6e 67		L1:	.text "/String"	;  name of word as a string, ending at wh_NameLastChar
>c2df	07					.byte *-L1	;wh_NameLength	length of name
>c2e0	39 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c2e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c2e3	18					.byte UF+NN	;wh_Flags	dictionary flags
=49759					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c2e4					Slash_String:
.c2e4	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.c2e6	b0 1d		bcs $c305		bcs Throw_Underflow_20
.c2e8	18		clc				clc		; addr += n
.c2e9	b5 25		lda $25,x			lda DStack+0,x
.c2eb	75 29		adc $29,x			adc DStack+4,x
.c2ed	95 29		sta $29,x			sta DStack+4,x
.c2ef	b5 26		lda $26,x			lda DStack+1,x
.c2f1	75 2a		adc $2a,x			adc DStack+5,x
.c2f3	95 2a		sta $2a,x			sta DStack+5,x
.c2f5	38		sec				sec		; u -= n
.c2f6	b5 27		lda $27,x			lda DStack+2,x
.c2f8	f5 25		sbc $25,x			sbc DStack+0,x
.c2fa	95 27		sta $27,x			sta DStack+2,x
.c2fc	b5 28		lda $28,x			lda DStack+3,x
.c2fe	f5 26		sbc $26,x			sbc DStack+1,x
.c300	95 28		sta $28,x			sta DStack+3,x
.c302	e8		inx				inx		; Drop n
.c303	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c304					en = *	; remember here
>c2e2	20					.byte CL	;wh_CodeLength
.c304	60		rts				rts
.c305	4c 7a b2	jmp $b27a	Throw_Underflow_20: jmp Throw_Underflow
>c308	32 44 72 6f 70			L1:	.text "2Drop"	;  name of word as a string, ending at wh_NameLastChar
>c30d	05					.byte *-L1	;wh_NameLength	length of name
>c30e	5f c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c310	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c311	10					.byte UF	;wh_Flags	dictionary flags
=49805					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c312					Two_drop:
.c312	20 a3 b2	jsr $b2a3			jsr underflow_2
.c315	e8		inx				inx
.c316	e8		inx				inx
.c317	e8		inx				inx
.c318	e8		inx				inx
=7					CL	.var *-(WordListLink+wh_Xt)
=$c319					en = *	; remember here
>c310	07					.byte CL	;wh_CodeLength
.c319	60		rts				rts
>c31a	32 53 77 61 70			L1:	.text "2Swap"	;  name of word as a string, ending at wh_NameLastChar
>c31f	05					.byte *-L1	;wh_NameLength	length of name
>c320	8d c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c322	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c323	18					.byte UF+NN	;wh_Flags	dictionary flags
=49823					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c324					Two_swap:
.c324	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c326	b0 dd		bcs $c305		bcs Throw_Underflow_20
.c328	86 15		stx $15				stx tmp1
.c32a	ca		dex				dex
.c32b	ca		dex				dex
.c32c	ca		dex				dex
.c32d	ca		dex				dex
.c32e	e8		inx		_loop:		inx
.c32f	b5 28		lda $28,x			lda DStack+3,x	; 3 <-> 7
.c331	b4 2c		ldy $2c,x			ldy DStack+7,x
.c333	95 2c		sta $2c,x			sta DStack+7,x
.c335	94 28		sty $28,x			sty DStack+3,x
.c337	e4 15		cpx $15				cpx tmp1
.c339	90 f3		bcc $c32e			bcc _loop
=23					CL	.var *-(WordListLink+wh_Xt)
=$c33b					en = *	; remember here
>c322	17					.byte CL	;wh_CodeLength
.c33b	60		rts				rts
>c33c	32 4f 76 65 72			L1:	.text "2Over"	;  name of word as a string, ending at wh_NameLastChar
>c341	05					.byte *-L1	;wh_NameLength	length of name
>c342	9f c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c344	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c345	18					.byte UF+NN	;wh_Flags	dictionary flags
=49857					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c346					Two_over:
.c346	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c348	b0 bb		bcs $c305		bcs Throw_Underflow_20
.c34a	a0 04		ldy #$04			ldy #4
.c34c	ca		dex		_loop:		dex
.c34d	b5 2d		lda $2d,x			lda DStack+8,x
.c34f	95 25		sta $25,x			sta DStack+0,x
.c351	88		dey				dey
.c352	d0 f8		bne $c34c			bne _loop
=14					CL	.var *-(WordListLink+wh_Xt)
=$c354					en = *	; remember here
>c344	0e					.byte CL	;wh_CodeLength
.c354	60		rts				rts
>c355	32 21				L1:	.text "2!"	;  name of word as a string, ending at wh_NameLastChar
>c357	02					.byte *-L1	;wh_NameLength	length of name
>c358	c1 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c35a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c35b	10					.byte UF	;wh_Flags	dictionary flags
=49879					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c35c					Two_Store:
.c35c	20 a8 b2	jsr $b2a8			jsr underflow_3
.c35f	20 50 b2	jsr $b250			jsr PopYA
.c362	85 15		sta $15		Two_Store_YA:	sta tmp1+0	; save addr
.c364	84 16		sty $16				sty tmp1+1
.c366	b5 25		lda $25,x			lda DStack+0,x	; copy MSB
.c368	a0 00		ldy #$00			ldy #0
.c36a	91 15		sta ($15),y			sta (tmp1),y
.c36c	b5 26		lda $26,x			lda DStack+1,x	; copy next
.c36e	c8		iny				iny
.c36f	91 15		sta ($15),y			sta (tmp1),y
.c371	b5 27		lda $27,x			lda DStack+2,x	; copy next
.c373	c8		iny				iny
.c374	91 15		sta ($15),y			sta (tmp1),y
.c376	b5 28		lda $28,x			lda DStack+3,x	; copy MSB
.c378	c8		iny				iny
.c379	91 15		sta ($15),y			sta (tmp1),y
.c37b	e8		inx				inx		; 2Drop
.c37c	e8		inx				inx
.c37d	e8		inx				inx
.c37e	e8		inx				inx
=35					CL	.var *-(WordListLink+wh_Xt)
=$c37f					en = *	; remember here
>c35a	23					.byte CL	;wh_CodeLength
.c37f	60		rts				rts
>c380	32 40				L1:	.text "2@"	;  name of word as a string, ending at wh_NameLastChar
>c382	02					.byte *-L1	;wh_NameLength	length of name
>c383	d7 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c385	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c386	00					.byte 0	;wh_Flags	dictionary flags
=49922					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c387	20 50 b2	jsr $b250	Two_fetch:	jsr PopYA
.c38a	85 15		sta $15		Two_Fetch_YA:	sta tmp1+0	; save addr
.c38c	84 16		sty $16				sty tmp1+1
.c38e					Two_Fetch_tmp1:
.c38e	ca		dex				dex
.c38f	ca		dex				dex
.c390	ca		dex				dex
.c391	ca		dex				dex
.c392	a0 00		ldy #$00			ldy #0		; copy LSB
.c394	b1 15		lda ($15),y			lda (tmp1),y
.c396	95 25		sta $25,x			sta DStack+0,x
.c398	c8		iny				iny		; copy next
.c399	b1 15		lda ($15),y			lda (tmp1),y
.c39b	95 26		sta $26,x			sta DStack+1,x
.c39d	c8		iny				iny		; copy next
.c39e	b1 15		lda ($15),y			lda (tmp1),y
.c3a0	95 27		sta $27,x			sta DStack+2,x
.c3a2	c8		iny				iny		; copy next
.c3a3	b1 15		lda ($15),y			lda (tmp1),y
.c3a5	95 28		sta $28,x			sta DStack+3,x
=32					CL	.var *-(WordListLink+wh_Xt)
=$c3a7					en = *	; remember here
>c385	20					.byte CL	;wh_CodeLength
.c3a7	60		rts				rts
>c3a8	44 40				L1:	.text "D@"	;  name of word as a string, ending at wh_NameLastChar
>c3aa	02					.byte *-L1	;wh_NameLength	length of name
>c3ab	02 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3ad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3ae	08					.byte NN	;wh_Flags	dictionary flags
=49962					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3af	20 50 b2	jsr $b250	DFetch:		jsr PopYA
.c3b2	85 15		sta $15		DFetchYA:	sta tmp1+0	; save addr
.c3b4	84 16		sty $16				sty tmp1+1
.c3b6	ca		dex				dex
.c3b7	ca		dex				dex
.c3b8	ca		dex				dex
.c3b9	ca		dex				dex
.c3ba	a0 00		ldy #$00			ldy #0
.c3bc	b1 15		lda ($15),y			lda (tmp1),y
.c3be	95 27		sta $27,x			sta DStack+2,x
.c3c0	c8		iny				iny
.c3c1	b1 15		lda ($15),y			lda (tmp1),y
.c3c3	95 28		sta $28,x			sta DStack+3,x
.c3c5	c8		iny				iny
.c3c6	b1 15		lda ($15),y			lda (tmp1),y
.c3c8	95 25		sta $25,x			sta DStack+0,x
.c3ca	c8		iny				iny
.c3cb	b1 15		lda ($15),y			lda (tmp1),y
.c3cd	95 26		sta $26,x			sta DStack+1,x
=32					CL	.var *-(WordListLink+wh_Xt)
=$c3cf					en = *	; remember here
>c3ad	20					.byte CL	;wh_CodeLength
.c3cf	60		rts				rts
>c3d0	32 52 40			L1:	.text "2R@"	;  name of word as a string, ending at wh_NameLastChar
>c3d3	03					.byte *-L1	;wh_NameLength	length of name
>c3d4	2a c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3d6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3d7	09					.byte CO+NN	;wh_Flags	dictionary flags
=50003					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3d8					Two_r_fetch:
.c3d8	8a		txa				txa		; Y= return stack index
.c3d9	ba		tsx				tsx
.c3da	86 15		stx $15				stx tmp1
.c3dc	a4 15		ldy $15				ldy tmp1
.c3de	aa		tax				tax
.c3df	ca		dex				dex		; make room on the Data Stack
.c3e0	ca		dex				dex
.c3e1	ca		dex				dex
.c3e2	ca		dex				dex
.c3e3	b9 03 01	lda $0103,y			lda RStack+3,y	; LSB of top entry
.c3e6	95 25		sta $25,x			sta DStack+0,x
.c3e8	b9 04 01	lda $0104,y			lda RStack+4,y	; MSB of top entry
.c3eb	95 26		sta $26,x			sta DStack+1,x
.c3ed	b9 05 01	lda $0105,y			lda RStack+5,y	; LSB of bottom entry
.c3f0	95 27		sta $27,x			sta DStack+2,x
.c3f2	b9 06 01	lda $0106,y			lda RStack+6,y	; MSB of bottom entry
.c3f5	95 28		sta $28,x			sta DStack+3,x
=31					CL	.var *-(WordListLink+wh_Xt)
=$c3f7					en = *	; remember here
>c3d6	1f					.byte CL	;wh_CodeLength
.c3f7	60		rts				rts
>c3f8	32 52 3e			L1:	.text "2R>"	;  name of word as a string, ending at wh_NameLastChar
>c3fb	03					.byte *-L1	;wh_NameLength	length of name
>c3fc	53 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3ff	41					.byte CO+R6	;wh_Flags	dictionary flags
=50043					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c400					Two_r_from:
.c400	68		pla				pla			; save the return address
.c401	85 15		sta $15				sta tmp1+0
.c403	68		pla				pla
.c404	85 16		sta $16				sta tmp1+1
.c406	ca		dex				dex			; make room on stack
.c407	ca		dex				dex
.c408	ca		dex				dex
.c409	ca		dex				dex
.c40a	68		pla				pla			; LSB
.c40b	95 25		sta $25,x			sta DStack+0,x
.c40d	68		pla				pla			; MSB
.c40e	95 26		sta $26,x			sta DStack+1,x
.c410	68		pla				pla			; LSB
.c411	95 27		sta $27,x			sta DStack+2,x
.c413	68		pla				pla			; MSB
.c414	95 28		sta $28,x			sta DStack+3,x
.c416	a5 16		lda $16				lda tmp1+1		; restore return address
.c418	48		pha				pha
.c419	a5 15		lda $15				lda tmp1+0
.c41b	48		pha				pha
=28					CL	.var *-(WordListLink+wh_Xt)
=$c41c					en = *	; remember here
>c3fe	1c					.byte CL	;wh_CodeLength
.c41c	60		rts				rts
>c41d	32 3e 52			L1:	.text "2>R"	;  name of word as a string, ending at wh_NameLastChar
>c420	03					.byte *-L1	;wh_NameLength	length of name
>c421	7b c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c423	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c424	51					.byte CO+UF+R6	;wh_Flags	dictionary flags
=50080					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c425					Two_to_r:
.c425	68		pla				pla		; save the return address
.c426	85 15		sta $15				sta tmp1+0
.c428	68		pla				pla
.c429	85 16		sta $16				sta tmp1+1
.c42b	20 a3 b2	jsr $b2a3			jsr underflow_2
.c42e	b5 28		lda $28,x			lda DStack+3,x	; MSB
.c430	48		pha				pha
.c431	b5 27		lda $27,x			lda DStack+2,x	; LSB
.c433	48		pha				pha
.c434	b5 26		lda $26,x			lda DStack+1,x	; MSB
.c436	48		pha				pha
.c437	b5 25		lda $25,x			lda DStack+0,x	; LSB
.c439	48		pha				pha
.c43a	e8		inx				inx
.c43b	e8		inx				inx
.c43c	e8		inx				inx
.c43d	e8		inx				inx
.c43e	a5 16		lda $16				lda tmp1+1	; restore return address
.c440	48		pha				pha
.c441	a5 15		lda $15				lda tmp1+0
.c443	48		pha				pha
=31					CL	.var *-(WordListLink+wh_Xt)
=$c444					en = *	; remember here
>c423	1f					.byte CL	;wh_CodeLength
.c444	60		rts				rts
>c445	49 6e 76 65 72 74		L1:	.text "Invert"	;  name of word as a string, ending at wh_NameLastChar
>c44b	06					.byte *-L1	;wh_NameLength	length of name
>c44c	a0 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c44e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c44f	10					.byte UF	;wh_Flags	dictionary flags
=50123					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c450					Invert:
.c450	20 8e b2	jsr $b28e			jsr underflow_1
.c453	a9 ff		lda #$ff			lda #$FF
.c455	55 25		eor $25,x			eor DStack+0,x	; LSB
.c457	95 25		sta $25,x			sta DStack+0,x
.c459	a9 ff		lda #$ff			lda #$FF
.c45b	55 26		eor $26,x			eor DStack+1,x	; MSB
.c45d	95 26		sta $26,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$c45f					en = *	; remember here
>c44e	0f					.byte CL	;wh_CodeLength
.c45f	60		rts				rts
>c460	4e 65 67 61 74 65		L1:	.text "Negate"	;  name of word as a string, ending at wh_NameLastChar
>c466	06					.byte *-L1	;wh_NameLength	length of name
>c467	cb c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c469	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c46a	10					.byte UF	;wh_Flags	dictionary flags
=50150					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c46b					Negate:
.c46b	20 8e b2	jsr $b28e			jsr underflow_1
.c46e	38		sec		Negate3:	sec
.c46f	a9 00		lda #$00	Negate4:	lda #0
.c471	f5 25		sbc $25,x			sbc DStack+0,x	; LSB
.c473	95 25		sta $25,x			sta DStack+0,x
.c475	a9 00		lda #$00			lda #0
.c477	f5 26		sbc $26,x			sbc DStack+1,x	; MSB
.c479	95 26		sta $26,x			sta DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$c47b					en = *	; remember here
>c469	10					.byte CL	;wh_CodeLength
.c47b	60		rts				rts
>c47c	41 62 73			L1:	.text "Abs"	;  name of word as a string, ending at wh_NameLastChar
>c47f	03					.byte *-L1	;wh_NameLength	length of name
>c480	e6 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c482	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c483	08					.byte NN	;wh_Flags	dictionary flags
=50175					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c484					Abs:
.c484	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c486	b0 05		bcs $c48d		bcs Throw_Underflow_17
.c488	b5 26		lda $26,x			lda DStack+1,x	; n negative?
.c48a	30 e2		bmi $c46e			bmi Negate3
=8					CL	.var *-(WordListLink+wh_Xt)
=$c48c					en = *	; remember here
>c482	08					.byte CL	;wh_CodeLength
.c48c	60		rts				rts
.c48d	4c 7a b2	jmp $b27a	Throw_Underflow_17: jmp Throw_Underflow
>c490	44 4e 65 67 61 74 65		L1:	.text "DNegate"	;  name of word as a string, ending at wh_NameLastChar
>c497	07					.byte *-L1	;wh_NameLength	length of name
>c498	ff c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c49a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c49b	08					.byte NN	;wh_Flags	dictionary flags
=50199					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c49c					DNegate:
.c49c	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c49e	b0 ed		bcs $c48d		bcs Throw_Underflow_17
.c4a0	38		sec		DNegate3:	sec
.c4a1	a9 00		lda #$00			lda #0
.c4a3	f5 27		sbc $27,x			sbc DStack+2,x	; LSB of low cell
.c4a5	95 27		sta $27,x			sta DStack+2,x
.c4a7	a9 00		lda #$00			lda #0
.c4a9	f5 28		sbc $28,x			sbc DStack+3,x	; MSB of low cell
.c4ab	95 28		sta $28,x			sta DStack+3,x
.c4ad	4c 6f c4	jmp $c46f			jmp Negate4
=20					CL	.var *-(WordListLink+wh_Xt)
=$c4b0					en = *	; remember here
>c49a	14					.byte CL	;wh_CodeLength
>c4b0	44 41 62 73			L1:	.text "DAbs"	;  name of word as a string, ending at wh_NameLastChar
>c4b4	04					.byte *-L1	;wh_NameLength	length of name
>c4b5	17 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4b8	08					.byte NN	;wh_Flags	dictionary flags
=50228					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4b9					DAbs:
.c4b9	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c4bb	b0 d0		bcs $c48d		bcs Throw_Underflow_17
.c4bd	b5 26		lda $26,x			lda DStack+1,x	; d negative?
.c4bf	30 df		bmi $c4a0			bmi DNegate3
=8					CL	.var *-(WordListLink+wh_Xt)
=$c4c1					en = *	; remember here
>c4b7	08					.byte CL	;wh_CodeLength
.c4c1	60		rts				rts
>c4c2	44 3c 3e			L1:	.text "D<>"	;  name of word as a string, ending at wh_NameLastChar
>c4c5	03					.byte *-L1	;wh_NameLength	length of name
>c4c6	34 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4c8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4c9	08					.byte NN	;wh_Flags	dictionary flags
=50245					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4ca	20 d7 c4	jsr $c4d7	DNEq:		jsr DEqual
.c4cd	4c d2 c6	jmp $c6d2			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c4d0					en = *	; remember here
>c4c8	06					.byte CL	;wh_CodeLength
>c4d0	44 3d				L1:	.text "D="	;  name of word as a string, ending at wh_NameLastChar
>c4d2	02					.byte *-L1	;wh_NameLength	length of name
>c4d3	45 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4d5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4d6	08					.byte NN	;wh_Flags	dictionary flags
=50258					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4d7	b5 2b		lda $2b,x	DEqual:		lda DStack+6,x
.c4d9	d5 27		cmp $27,x			cmp DStack+2,x
.c4db	d0 50		bne $c52d			bne False3
.c4dd	b5 2c		lda $2c,x			lda DStack+7,x
.c4df	d5 28		cmp $28,x			cmp DStack+3,x
.c4e1	d0 4a		bne $c52d			bne False3
.c4e3	b5 25		lda $25,x			lda DStack+0,x
.c4e5	d5 29		cmp $29,x			cmp DStack+4,x
.c4e7	d0 44		bne $c52d			bne False3
.c4e9	b5 26		lda $26,x			lda DStack+1,x
.c4eb	d5 2a		cmp $2a,x			cmp DStack+5,x
.c4ed	d0 3e		bne $c52d			bne False3
.c4ef	f0 62		beq $c553			beq True3
=26					CL	.var *-(WordListLink+wh_Xt)
=$c4f1					en = *	; remember here
>c4d5	1a					.byte CL	;wh_CodeLength
>c4f1	44 55 3e			L1:	.text "DU>"	;  name of word as a string, ending at wh_NameLastChar
>c4f4	03					.byte *-L1	;wh_NameLength	length of name
>c4f5	52 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4f8	08					.byte NN	;wh_Flags	dictionary flags
=50292					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4f9	20 92 c5	jsr $c592	DUGt:		jsr DGtSub
.c4fc	90 55		bcc $c553			bcc True3
.c4fe	b0 2d		bcs $c52d			bcs False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c500					en = *	; remember here
>c4f7	07					.byte CL	;wh_CodeLength
>c500	44 55 3c 3d			L1:	.text "DU<="	;  name of word as a string, ending at wh_NameLastChar
>c504	04					.byte *-L1	;wh_NameLength	length of name
>c505	74 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c507	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c508	08					.byte NN	;wh_Flags	dictionary flags
=50308					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c509	20 92 c5	jsr $c592	DULe:		jsr DGtSub
.c50c	b0 45		bcs $c553			bcs True3
.c50e	90 1d		bcc $c52d			bcc False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c510					en = *	; remember here
>c507	07					.byte CL	;wh_CodeLength
>c510	44 55 3e 3d			L1:	.text "DU>="	;  name of word as a string, ending at wh_NameLastChar
>c514	04					.byte *-L1	;wh_NameLength	length of name
>c515	84 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c517	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c518	08					.byte NN	;wh_Flags	dictionary flags
=50324					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c519	20 60 c5	jsr $c560	DUGe:		jsr DLessSub
.c51c	b0 35		bcs $c553			bcs True3
.c51e	90 0d		bcc $c52d			bcc False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c520					en = *	; remember here
>c517	07					.byte CL	;wh_CodeLength
>c520	44 55 3c			L1:	.text "DU<"	;  name of word as a string, ending at wh_NameLastChar
>c523	03					.byte *-L1	;wh_NameLength	length of name
>c524	94 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c526	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c527	08					.byte NN	;wh_Flags	dictionary flags
=50339					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c528	20 60 c5	jsr $c560	DULess:		jsr DLessSub
.c52b	90 26		bcc $c553			bcc True3
.c52d	a9 00		lda #$00	False3:		lda #0
.c52f	f0 24		beq $c555			beq DReturn3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c531					en = *	; remember here
>c526	09					.byte CL	;wh_CodeLength
.c531	4c 7a b2	jmp $b27a	Throw_Underflow_09: jmp Throw_Underflow
>c534	44 3e 3d			L1:	.text "D>="	;  name of word as a string, ending at wh_NameLastChar
>c537	03					.byte *-L1	;wh_NameLength	length of name
>c538	a3 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c53a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c53b	08					.byte NN	;wh_Flags	dictionary flags
=50359					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c53c	20 60 c5	jsr $c560	DGEq:		jsr DLessSub
.c53f	70 10		bvs $c551			bvs DLess3
.c541	10 10		bpl $c553	DGEq3:		bpl True3
.c543	30 e8		bmi $c52d			bmi False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c545					en = *	; remember here
>c53a	09					.byte CL	;wh_CodeLength
>c545	44 3c				L1:	.text "D<"	;  name of word as a string, ending at wh_NameLastChar
>c547	02					.byte *-L1	;wh_NameLength	length of name
>c548	b7 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c54a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c54b	08					.byte NN	;wh_Flags	dictionary flags
=50375					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c54c	20 60 c5	jsr $c560	DLess:		jsr DLessSub
.c54f	70 f0		bvs $c541			bvs DGEq3
.c551	10 da		bpl $c52d	DLess3:		bpl False3
.c553	a9 ff		lda #$ff	True3:		lda #$ff
.c555					DReturn3:
.c555	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c557	b0 d8		bcs $c531		bcs Throw_Underflow_09
.c559	95 2b		sta $2b,x			sta DStack+6,x
.c55b	95 2c		sta $2c,x			sta DStack+7,x
.c55d	4c ec ab	jmp $abec			jmp ThreeDrop
=20					CL	.var *-(WordListLink+wh_Xt)
=$c560					en = *	; remember here
>c54a	14					.byte CL	;wh_CodeLength
.c560	b5 2b		lda $2b,x	DLessSub:	lda DStack+6,x
.c562	d5 27		cmp $27,x			cmp DStack+2,x
.c564	b5 2c		lda $2c,x			lda DStack+7,x
.c566	f5 28		sbc $28,x			sbc DStack+3,x
.c568	b5 29		lda $29,x			lda DStack+4,x
.c56a	f5 25		sbc $25,x			sbc DStack+0,x
.c56c	b5 2a		lda $2a,x			lda DStack+5,x
.c56e	f5 26		sbc $26,x			sbc DStack+1,x
.c570	60		rts				rts
>c571	44 3c 3d			L1:	.text "D<="	;  name of word as a string, ending at wh_NameLastChar
>c574	03					.byte *-L1	;wh_NameLength	length of name
>c575	c7 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c577	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c578	08					.byte NN	;wh_Flags	dictionary flags
=50420					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c579	20 92 c5	jsr $c592	DLe:		jsr DGtSub
.c57c	70 10		bvs $c58e			bvs DGt3
.c57e	10 d3		bpl $c553	DLe3:		bpl True3
.c580	30 ab		bmi $c52d			bmi False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c582					en = *	; remember here
>c577	09					.byte CL	;wh_CodeLength
>c582	44 3e				L1:	.text "D>"	;  name of word as a string, ending at wh_NameLastChar
>c584	02					.byte *-L1	;wh_NameLength	length of name
>c585	f4 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c587	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c588	08					.byte NN	;wh_Flags	dictionary flags
=50436					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c589	20 92 c5	jsr $c592	DGt:		jsr DGtSub
.c58c	70 f0		bvs $c57e			bvs DLe3
.c58e	30 c3		bmi $c553	DGt3:		bmi True3
.c590	10 9b		bpl $c52d			bpl False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c592					en = *	; remember here
>c587	09					.byte CL	;wh_CodeLength
.c592	b5 27		lda $27,x	DGtSub:		lda DStack+2,x
.c594	d5 2b		cmp $2b,x			cmp DStack+6,x
.c596	b5 28		lda $28,x			lda DStack+3,x
.c598	f5 2c		sbc $2c,x			sbc DStack+7,x
.c59a	b5 25		lda $25,x			lda DStack+0,x
.c59c	f5 29		sbc $29,x			sbc DStack+4,x
.c59e	b5 26		lda $26,x			lda DStack+1,x
.c5a0	f5 2a		sbc $2a,x			sbc DStack+5,x
.c5a2	60		rts				rts
>c5a3	44 30 3c 3d			L1:	.text "D0<="	;  name of word as a string, ending at wh_NameLastChar
>c5a7	04					.byte *-L1	;wh_NameLength	length of name
>c5a8	04 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5aa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5ab	08					.byte NN	;wh_Flags	dictionary flags
=50471					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5ac	b5 26		lda $26,x	D0Le:		lda DStack+1,x	; test sign
.c5ae	30 6b		bmi $c61b			bmi True1
.c5b0	10 27		bpl $c5d9			bpl D0Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c5b2					en = *	; remember here
>c5aa	06					.byte CL	;wh_CodeLength
>c5b2	44 30 3e			L1:	.text "D0>"	;  name of word as a string, ending at wh_NameLastChar
>c5b5	03					.byte *-L1	;wh_NameLength	length of name
>c5b6	27 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5b8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5b9	08					.byte NN	;wh_Flags	dictionary flags
=50485					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5ba	b5 26		lda $26,x	D0Gt:		lda DStack+1,x	; test sign
.c5bc	10 0c		bpl $c5ca			bpl D0Ne
.c5be	4c 3b c6	jmp $c63b			jmp False1
>c5c1	44 30 3c 3e			L1:	.text "D0<>"	;  name of word as a string, ending at wh_NameLastChar
>c5c5	04					.byte *-L1	;wh_NameLength	length of name
>c5c6	35 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5c8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5c9	08					.byte NN	;wh_Flags	dictionary flags
=50501					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5ca	20 e0 c5	jsr $c5e0	D0Ne:		jsr D0EqSub
.c5cd	d0 4c		bne $c61b			bne True1
.c5cf	f0 6a		beq $c63b			beq False1
=7					CL	.var *-(WordListLink+wh_Xt)
=$c5d1					en = *	; remember here
>c5c8	07					.byte CL	;wh_CodeLength
>c5d1	44 30 3d			L1:	.text "D0="	;  name of word as a string, ending at wh_NameLastChar
>c5d4	03					.byte *-L1	;wh_NameLength	length of name
>c5d5	45 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5d7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5d8	08					.byte NN	;wh_Flags	dictionary flags
=50516					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5d9	20 e0 c5	jsr $c5e0	D0Equal:	jsr D0EqSub
.c5dc	d0 5d		bne $c63b			bne False1
.c5de	f0 3b		beq $c61b			beq True1
=7					CL	.var *-(WordListLink+wh_Xt)
=$c5e0					en = *	; remember here
>c5d7	07					.byte CL	;wh_CodeLength
.c5e0	b5 27		lda $27,x	D0EqSub:	lda DStack+2,x
.c5e2	15 28		ora $28,x			ora DStack+3,x
.c5e4	15 25		ora $25,x			ora DStack+0,x
.c5e6	15 26		ora $26,x			ora DStack+1,x
.c5e8	60		rts				rts
>c5e9	44 30 3c			L1:	.text "D0<"	;  name of word as a string, ending at wh_NameLastChar
>c5ec	03					.byte *-L1	;wh_NameLength	length of name
>c5ed	54 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5ef	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5f0	08					.byte NN	;wh_Flags	dictionary flags
=50540					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5f1	b5 26		lda $26,x	D0Less:		lda DStack+1,x	; test sign
.c5f3	30 26		bmi $c61b			bmi True1
.c5f5	10 44		bpl $c63b			bpl False1
=6					CL	.var *-(WordListLink+wh_Xt)
=$c5f7					en = *	; remember here
>c5ef	06					.byte CL	;wh_CodeLength
>c5f7	44 30 3e 3d			L1:	.text "D0>="	;  name of word as a string, ending at wh_NameLastChar
>c5fb	04					.byte *-L1	;wh_NameLength	length of name
>c5fc	6c c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5ff	08					.byte NN	;wh_Flags	dictionary flags
=50555					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c600	b5 26		lda $26,x	D0Ge:		lda DStack+1,x	; test sign
.c602	10 17		bpl $c61b			bpl True1
.c604	30 35		bmi $c63b			bmi False1
=6					CL	.var *-(WordListLink+wh_Xt)
=$c606					en = *	; remember here
>c5fe	06					.byte CL	;wh_CodeLength
.c606	4c 7a b2	jmp $b27a	Throw_Underflow_08: jmp Throw_Underflow
>c609	3d				L1:	.text "="	;  name of word as a string, ending at wh_NameLastChar
>c60a	01					.byte *-L1	;wh_NameLength	length of name
>c60b	7b c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c60d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c60e	08					.byte NN	;wh_Flags	dictionary flags
=50570					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c60f	b5 25		lda $25,x	Equal:		lda DStack+0,x		; LSB
.c611	d5 27		cmp $27,x			cmp DStack+2,x
.c613	d0 26		bne $c63b			bne False1
.c615	b5 26		lda $26,x			lda DStack+1,x		; MSB
.c617	d5 28		cmp $28,x			cmp DStack+3,x
.c619	d0 20		bne $c63b			bne False1
.c61b	a9 ff		lda #$ff	True1:		lda #$ff	; return TRUE
.c61d					Return1:
.c61d	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c61f	b0 e5		bcs $c606		bcs Throw_Underflow_08
.c621	e8		inx				inx		; Drop
.c622	e8		inx				inx
.c623	95 25		sta $25,x			sta DStack+0,x	; store f
.c625	95 26		sta $26,x			sta DStack+1,x
.c627	60		rts				rts
=25					CL	.var *-(WordListLink+wh_Xt)
=$c628					en = *	; remember here
>c60d	19					.byte CL	;wh_CodeLength
>c628	3c 3e				L1:	.text "<>"	;  name of word as a string, ending at wh_NameLastChar
>c62a	02					.byte *-L1	;wh_NameLength	length of name
>c62b	8a c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c62d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c62e	08					.byte NN	;wh_Flags	dictionary flags
=50602					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c62f	b5 25		lda $25,x	Not_Equals:	lda DStack+0,x		; LSB
.c631	d5 27		cmp $27,x			cmp DStack+2,x
.c633	d0 e6		bne $c61b			bne True1
.c635	b5 26		lda $26,x			lda DStack+1,x		; MSB
.c637	d5 28		cmp $28,x			cmp DStack+3,x
.c639	d0 e0		bne $c61b			bne True1
.c63b	a9 00		lda #$00	False1:		lda #0		; return FALSE
.c63d	f0 de		beq $c61d			beq Return1
=16					CL	.var *-(WordListLink+wh_Xt)
=$c63f					en = *	; remember here
>c62d	10					.byte CL	;wh_CodeLength
>c63f	3c				L1:	.text "<"	;  name of word as a string, ending at wh_NameLastChar
>c640	01					.byte *-L1	;wh_NameLength	length of name
>c641	aa c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c643	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c644	08					.byte NN	;wh_Flags	dictionary flags
=50624					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c645	b5 27		lda $27,x	Less_Than:	lda DStack+2,x	; compare
.c647	d5 25		cmp $25,x			cmp DStack+0,x
.c649	b5 28		lda $28,x			lda DStack+3,x
.c64b	f5 26		sbc $26,x			sbc DStack+1,x
.c64d	50 02		bvc $c651			bvc _c
.c64f	49 80		eor #$80			eor #$80	; fix sign
.c651	10 e8		bpl $c63b	_c:		bpl False1
.c653	30 c6		bmi $c61b			bmi True1
=16					CL	.var *-(WordListLink+wh_Xt)
=$c655					en = *	; remember here
>c643	10					.byte CL	;wh_CodeLength
>c655	3e 3d				L1:	.text ">="	;  name of word as a string, ending at wh_NameLastChar
>c657	02					.byte *-L1	;wh_NameLength	length of name
>c658	c0 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c65a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c65b	08					.byte NN	;wh_Flags	dictionary flags
=50647					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c65c	20 45 c6	jsr $c645	Ge:		jsr Less_Than
.c65f	4c d2 c6	jmp $c6d2			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c662					en = *	; remember here
>c65a	06					.byte CL	;wh_CodeLength
>c662	55 3c				L1:	.text "U<"	;  name of word as a string, ending at wh_NameLastChar
>c664	02					.byte *-L1	;wh_NameLength	length of name
>c665	d7 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c667	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c668	08					.byte NN	;wh_Flags	dictionary flags
=50660					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c669	b5 27		lda $27,x	U_Less_Than:	lda DStack+2,x
.c66b	d5 25		cmp $25,x			cmp DStack+0,x
.c66d	b5 28		lda $28,x			lda DStack+3,x
.c66f	f5 26		sbc $26,x			sbc DStack+1,x
.c671	b0 c8		bcs $c63b			bcs False1
.c673	90 a6		bcc $c61b			bcc True1
=12					CL	.var *-(WordListLink+wh_Xt)
=$c675					en = *	; remember here
>c667	0c					.byte CL	;wh_CodeLength
>c675	55 3e				L1:	.text "U>"	;  name of word as a string, ending at wh_NameLastChar
>c677	02					.byte *-L1	;wh_NameLength	length of name
>c678	e4 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c67a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c67b	08					.byte NN	;wh_Flags	dictionary flags
=50679					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c67c	b5 25		lda $25,x	U_Greater_Than:	lda DStack+0,x
.c67e	d5 27		cmp $27,x			cmp DStack+2,x
.c680	b5 26		lda $26,x			lda DStack+1,x
.c682	f5 28		sbc $28,x			sbc DStack+3,x
.c684	b0 b5		bcs $c63b			bcs False1
.c686	90 93		bcc $c61b			bcc True1
=12					CL	.var *-(WordListLink+wh_Xt)
=$c688					en = *	; remember here
>c67a	0c					.byte CL	;wh_CodeLength
>c688	3e				L1:	.text ">"	;  name of word as a string, ending at wh_NameLastChar
>c689	01					.byte *-L1	;wh_NameLength	length of name
>c68a	f7 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c68c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c68d	08					.byte NN	;wh_Flags	dictionary flags
=50697					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c68e	b5 25		lda $25,x	Greater_Than:	lda DStack+0,x	; compare
.c690	d5 27		cmp $27,x			cmp DStack+2,x
.c692	b5 26		lda $26,x			lda DStack+1,x
.c694	f5 28		sbc $28,x			sbc DStack+3,x
.c696	50 02		bvc $c69a			bvc _c
.c698	49 80		eor #$80			eor #$80	; fix sign
.c69a	10 9f		bpl $c63b	_c:		bpl False1
.c69c	4c 1b c6	jmp $c61b			jmp True1
=17					CL	.var *-(WordListLink+wh_Xt)
=$c69f					en = *	; remember here
>c68c	11					.byte CL	;wh_CodeLength
>c69f	3c 3d				L1:	.text "<="	;  name of word as a string, ending at wh_NameLastChar
>c6a1	02					.byte *-L1	;wh_NameLength	length of name
>c6a2	09 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6a4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6a5	08					.byte NN	;wh_Flags	dictionary flags
=50721					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6a6	20 8e c6	jsr $c68e	Le:		jsr Greater_Than
.c6a9	4c d2 c6	jmp $c6d2			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c6ac					en = *	; remember here
>c6a4	06					.byte CL	;wh_CodeLength
>c6ac	55 3e 3d			L1:	.text "U>="	;  name of word as a string, ending at wh_NameLastChar
>c6af	03					.byte *-L1	;wh_NameLength	length of name
>c6b0	21 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6b3	08					.byte NN	;wh_Flags	dictionary flags
=50735					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6b4	20 69 c6	jsr $c669	UGe:		jsr U_Less_Than
.c6b7	4c d2 c6	jmp $c6d2			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c6ba					en = *	; remember here
>c6b2	06					.byte CL	;wh_CodeLength
>c6ba	55 3c 3d			L1:	.text "U<="	;  name of word as a string, ending at wh_NameLastChar
>c6bd	03					.byte *-L1	;wh_NameLength	length of name
>c6be	2f c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6c0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6c1	08					.byte NN	;wh_Flags	dictionary flags
=50749					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6c2	20 7c c6	jsr $c67c	ULe:		jsr U_Greater_Than
.c6c5	4c d2 c6	jmp $c6d2			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c6c8					en = *	; remember here
>c6c0	06					.byte CL	;wh_CodeLength
.c6c8	4c 7a b2	jmp $b27a	Throw_Underflow_11: jmp Throw_Underflow
>c6cb	30 3d				L1:	.text "0="	;  name of word as a string, ending at wh_NameLastChar
>c6cd	02					.byte *-L1	;wh_NameLength	length of name
>c6ce	3d c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6d0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6d1	08					.byte NN	;wh_Flags	dictionary flags
=50765					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6d2	b5 26		lda $26,x	Zero_Equal:	lda DStack+1,x
.c6d4	15 25		ora $25,x	ZEq3:		ora DStack+0,x
.c6d6	d0 26		bne $c6fe			bne False0
.c6d8	f0 0e		beq $c6e8			beq True0
=8					CL	.var *-(WordListLink+wh_Xt)
=$c6da					en = *	; remember here
>c6d0	08					.byte CL	;wh_CodeLength
>c6da	30 3c 3e			L1:	.text "0<>"	;  name of word as a string, ending at wh_NameLastChar
>c6dd	03					.byte *-L1	;wh_NameLength	length of name
>c6de	4d c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6e0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6e1	08					.byte NN	;wh_Flags	dictionary flags
=50781					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6e2	b5 26		lda $26,x	Zero_Unequal:	lda DStack+1,x
.c6e4	15 25		ora $25,x	ZNe3:		ora DStack+0,x
.c6e6	f0 16		beq $c6fe			beq False0
.c6e8	a9 ff		lda #$ff	True0:		lda #$ff	; return TRUE
.c6ea	95 25		sta $25,x	Return0:	sta DStack+0,x
.c6ec	95 26		sta $26,x			sta DStack+1,x
.c6ee	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c6f0	b0 39		bcs $c72b		bcs Throw_Underflow_05
.c6f2	60		rts				rts
=17					CL	.var *-(WordListLink+wh_Xt)
=$c6f3					en = *	; remember here
>c6e0	11					.byte CL	;wh_CodeLength
>c6f3	30 3e				L1:	.text "0>"	;  name of word as a string, ending at wh_NameLastChar
>c6f5	02					.byte *-L1	;wh_NameLength	length of name
>c6f6	5d c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6f8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6f9	08					.byte NN	;wh_Flags	dictionary flags
=50805					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6fa	b5 26		lda $26,x	Zero_Greater:	lda DStack+1,x	; MSB
.c6fc	10 e6		bpl $c6e4			bpl ZNe3	; >= 0 ?
.c6fe	a9 00		lda #$00	False0:		lda #0		; return FALSE
.c700	f0 e8		beq $c6ea			beq Return0
=8					CL	.var *-(WordListLink+wh_Xt)
=$c702					en = *	; remember here
>c6f8	08					.byte CL	;wh_CodeLength
>c702	30 3c 3d			L1:	.text "0<="	;  name of word as a string, ending at wh_NameLastChar
>c705	03					.byte *-L1	;wh_NameLength	length of name
>c706	75 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c708	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c709	08					.byte NN	;wh_Flags	dictionary flags
=50821					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c70a	b5 26		lda $26,x	ZLe:		lda DStack+1,x	; < 0 ?
.c70c	30 da		bmi $c6e8			bmi True0
.c70e	10 c4		bpl $c6d4			bpl ZEq3
=6					CL	.var *-(WordListLink+wh_Xt)
=$c710					en = *	; remember here
>c708	06					.byte CL	;wh_CodeLength
>c710	30 3e 3d			L1:	.text "0>="	;  name of word as a string, ending at wh_NameLastChar
>c713	03					.byte *-L1	;wh_NameLength	length of name
>c714	85 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c716	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c717	08					.byte NN	;wh_Flags	dictionary flags
=50835					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c718	b5 26		lda $26,x	ZGe:		lda DStack+1,x
.c71a	10 cc		bpl $c6e8			bpl True0
.c71c	30 e0		bmi $c6fe			bmi False0
=6					CL	.var *-(WordListLink+wh_Xt)
=$c71e					en = *	; remember here
>c716	06					.byte CL	;wh_CodeLength
>c71e	30 3c				L1:	.text "0<"	;  name of word as a string, ending at wh_NameLastChar
>c720	02					.byte *-L1	;wh_NameLength	length of name
>c721	93 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c723	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c724	08					.byte NN	;wh_Flags	dictionary flags
=50848					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c725	b5 26		lda $26,x	Zero_Less:	lda DStack+1,x	; MSB
.c727	10 d5		bpl $c6fe			bpl False0
.c729	30 bd		bmi $c6e8			bmi True0
=6					CL	.var *-(WordListLink+wh_Xt)
=$c72b					en = *	; remember here
>c723	06					.byte CL	;wh_CodeLength
.c72b	4c 7a b2	jmp $b27a	Throw_Underflow_05: jmp Throw_Underflow
>c72e	4d 69 6e			L1:	.text "Min"	;  name of word as a string, ending at wh_NameLastChar
>c731	03					.byte *-L1	;wh_NameLength	length of name
>c732	a0 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c734	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c735	18					.byte UF+NN	;wh_Flags	dictionary flags
=50865					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c736					Min:
.c736	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c738	b0 f1		bcs $c72b		bcs Throw_Underflow_05
.c73a	b5 25		lda $25,x			lda DStack+0,x	; compare n1 & n2; sets V & N but not Z
.c73c	d5 27		cmp $27,x			cmp DStack+2,x
.c73e	b5 26		lda $26,x			lda DStack+1,x
.c740	f5 28		sbc $28,x			sbc DStack+3,x
.c742	70 1b		bvs $c75f			bvs Max_3	; if overflow, the sign is backwards
.c744	30 29		bmi $c76f	Min_3:		bmi Nip_NoUf	; if negative, NOS is larger and needs to be dumped
.c746	e8		inx				inx		; Drop n2
.c747	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$c748					en = *	; remember here
>c734	12					.byte CL	;wh_CodeLength
.c748	60		rts				rts
>c749	4d 61 78			L1:	.text "Max"	;  name of word as a string, ending at wh_NameLastChar
>c74c	03					.byte *-L1	;wh_NameLength	length of name
>c74d	b1 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c74f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c750	08					.byte NN	;wh_Flags	dictionary flags
=50892					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c751					Max:
.c751	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c753	b0 d6		bcs $c72b		bcs Throw_Underflow_05
.c755	b5 25		lda $25,x			lda DStack+0,x	; Compare n1 & n2; sets V & N but not Z
.c757	d5 27		cmp $27,x			cmp DStack+2,x
.c759	b5 26		lda $26,x			lda DStack+1,x
.c75b	f5 28		sbc $28,x			sbc DStack+3,x
.c75d	70 e5		bvs $c744			bvs Min_3	; if overflow, the sign is backwards
.c75f	10 0e		bpl $c76f	Max_3:		bpl Nip_NoUf	; if negative, NOS is larger and needs to be kept
.c761	e8		inx				inx		; Drop n2
.c762	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$c763					en = *	; remember here
>c74f	12					.byte CL	;wh_CodeLength
.c763	60		rts				rts
>c764	4e 69 70			L1:	.text "Nip"	;  name of word as a string, ending at wh_NameLastChar
>c767	03					.byte *-L1	;wh_NameLength	length of name
>c768	cc c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c76a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c76b	10					.byte UF	;wh_Flags	dictionary flags
=50919					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c76c					Nip:
.c76c	20 a3 b2	jsr $b2a3			jsr underflow_2
.c76f	b5 25		lda $25,x	Nip_NoUf:	lda DStack+0,x	; PopYA
.c771	b4 26		ldy $26,x			ldy DStack+1,x
.c773	e8		inx				inx
.c774	e8		inx				inx
.c775	95 25		sta $25,x			sta DStack+0,x	; store over n1
.c777	94 26		sty $26,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$c779					en = *	; remember here
>c76a	0d					.byte CL	;wh_CodeLength
.c779	60		rts				rts
>c77a	50 69 63 6b			L1:	.text "Pick"	;  name of word as a string, ending at wh_NameLastChar
>c77e	04					.byte *-L1	;wh_NameLength	length of name
>c77f	e7 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c781	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c782	00					.byte 0	;wh_Flags	dictionary flags
=50942					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c783					Pick:
.c783	16 25		asl $25,x			asl DStack+0,x	; we assume u < 128 (stack is small)
.c785	8a		txa				txa
.c786	75 25		adc $25,x			adc DStack+0,x
.c788	a8		tay				tay
.c789	b9 27 00	lda $0027,y			lda DStack+2,y
.c78c	95 25		sta $25,x			sta DStack+0,x
.c78e	b9 28 00	lda $0028,y			lda DStack+3,y
.c791	95 26		sta $26,x			sta DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$c793					en = *	; remember here
>c781	10					.byte CL	;wh_CodeLength
.c793	60		rts				rts
>c794	43 68 61 72			L1:	.text "Char"	;  name of word as a string, ending at wh_NameLastChar
>c798	04					.byte *-L1	;wh_NameLength	length of name
>c799	fe c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c79b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c79c	08					.byte NN	;wh_Flags	dictionary flags
=50968					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c79d					Char:
.c79d	20 fe b8	jsr $b8fe			jsr parse_name_check
.c7a0	e8		inx				inx		; Drop number of characters, leave addr
.c7a1	e8		inx				inx
.c7a2	4c 48 cb	jmp $cb48			jmp C_Fetch	; get character ( C@ )
=8					CL	.var *-(WordListLink+wh_Xt)
=$c7a5					en = *	; remember here
>c79b	08					.byte CL	;wh_CodeLength
>c7a5	5b 43 68 61 72 5d		L1:	.text "[Char]"	;  name of word as a string, ending at wh_NameLastChar
>c7ab	06					.byte *-L1	;wh_NameLength	length of name
>c7ac	18 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7ae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7af	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=50987					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7b0	20 9d c7	jsr $c79d	Bracket_Char:	jsr Char
.c7b3	4c 93 b5	jmp $b593			jmp Literal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c7b6					en = *	; remember here
>c7ae	06					.byte CL	;wh_CodeLength
>c7b6	43 68 61 72 2b			L1:	.text "Char+"	;  name of word as a string, ending at wh_NameLastChar
>c7bb	05					.byte *-L1	;wh_NameLength	length of name
>c7bc	2b c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7bf	00					.byte 0	;wh_Flags	dictionary flags
=51003					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7c0					Char_Plus:
.c7c0	20 8e b2	jsr $b28e			jsr underflow_1
.c7c3	f6 25		inc $25,x			inc DStack+0,x
.c7c5	d0 02		bne $c7c9			bne +
.c7c7	f6 26		inc $26,x			inc DStack+1,x
.c7c9					+
=9					CL	.var *-(WordListLink+wh_Xt)
=$c7c9					en = *	; remember here
>c7be	09					.byte CL	;wh_CodeLength
.c7c9	60		rts				rts
>c7ca	43 68 61 72 73			L1:	.text "Chars"	;  name of word as a string, ending at wh_NameLastChar
>c7cf	05					.byte *-L1	;wh_NameLength	length of name
>c7d0	3b c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7d3	02					.byte AN	;wh_Flags	dictionary flags
=51023					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7d4					Chars:
=0					CL	.var *-(WordListLink+wh_Xt)
=$c7d4					en = *	; remember here
>c7d2	00					.byte CL	;wh_CodeLength
.c7d4	60		rts				rts
>c7d5	43 65 6c 6c 73			L1:	.text "Cells"	;  name of word as a string, ending at wh_NameLastChar
>c7da	05					.byte *-L1	;wh_NameLength	length of name
>c7db	4f c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7de	10					.byte UF	;wh_Flags	dictionary flags
=51034					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7df					Cells:
.c7df	20 8e b2	jsr $b28e			jsr underflow_1
.c7e2	16 25		asl $25,x			asl DStack+0,x		; 2*
.c7e4	36 26		rol $26,x			rol DStack+1,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$c7e6					en = *	; remember here
>c7dd	07					.byte CL	;wh_CodeLength
.c7e6	60		rts				rts
>c7e7	43 65 6c 6c 2b			L1:	.text "Cell+"	;  name of word as a string, ending at wh_NameLastChar
>c7ec	05					.byte *-L1	;wh_NameLength	length of name
>c7ed	5a c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7ef	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7f0	10					.byte UF	;wh_Flags	dictionary flags
=51052					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7f1					Cell_Plus:
.c7f1	20 8e b2	jsr $b28e			jsr underflow_1
.c7f4	a9 02		lda #$02			lda #2		; our cells are 2 bytes
.c7f6					Plus_A:
.c7f6	18		clc				clc
.c7f7	75 25		adc $25,x			adc DStack+0,x
.c7f9	95 25		sta $25,x			sta DStack+0,x
.c7fb	90 02		bcc $c7ff			bcc +
.c7fd	f6 26		inc $26,x			inc DStack+1,x
.c7ff					+
=14					CL	.var *-(WordListLink+wh_Xt)
=$c7ff					en = *	; remember here
>c7ef	0e					.byte CL	;wh_CodeLength
.c7ff	60		rts				rts
.c800					Nos_Plus_A:
.c800	18		clc				clc
.c801	75 27		adc $27,x			adc DStack+2,x
.c803	95 27		sta $27,x			sta DStack+2,x
.c805	90 02		bcc $c809			bcc +
.c807	f6 28		inc $28,x			inc DStack+3,x
.c809	60		rts		+		rts
>c80a	48 65 72 65			L1:	.text "Here"	;  name of word as a string, ending at wh_NameLastChar
>c80e	04					.byte *-L1	;wh_NameLength	length of name
>c80f	6c c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c811	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c812	08					.byte NN	;wh_Flags	dictionary flags
=51086					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c813	a5 00		lda $00		Here:		lda cp+0
.c815	a4 01		ldy $01				ldy cp+1
.c817	4c e0 b5	jmp $b5e0			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$c81a					en = *	; remember here
>c811	07					.byte CL	;wh_CodeLength
>c81a	31 2d				L1:	.text "1-"	;  name of word as a string, ending at wh_NameLastChar
>c81c	02					.byte *-L1	;wh_NameLength	length of name
>c81d	8e c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c81f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c820	10					.byte UF	;wh_Flags	dictionary flags
=51100					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c821					One_Minus:
.c821	20 8e b2	jsr $b28e			jsr underflow_1
.c824					One_Minus_NoUf:
.c824	b5 25		lda $25,x			lda DStack+0,x
.c826	d0 02		bne $c82a			bne +
.c828	d6 26		dec $26,x			dec DStack+1,x
.c82a	d6 25		dec $25,x	+		dec DStack+0,x
=11					CL	.var *-(WordListLink+wh_Xt)
=$c82c					en = *	; remember here
>c81f	0b					.byte CL	;wh_CodeLength
.c82c	60		rts				rts
.c82d					NOS_One_Minus:
.c82d	b5 27		lda $27,x			lda DStack+2,x
.c82f	d0 02		bne $c833			bne +
.c831	d6 28		dec $28,x			dec DStack+3,x
.c833	d6 27		dec $27,x	+		dec DStack+2,x
.c835	60		rts				rts
.c836					Minus_A:
.c836	18		clc				clc
.c837	75 25		adc $25,x			adc DStack+0,x
.c839	95 25		sta $25,x			sta DStack+0,x
.c83b	b0 02		bcs $c83f			bcs +
.c83d	d6 26		dec $26,x			dec DStack+1,x
.c83f	60		rts		+		rts
>c840	31 2b				L1:	.text "1+"	;  name of word as a string, ending at wh_NameLastChar
>c842	02					.byte *-L1	;wh_NameLength	length of name
>c843	9c c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c845	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c846	10					.byte UF	;wh_Flags	dictionary flags
=51138					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c847					One_Plus:
.c847	20 8e b2	jsr $b28e			jsr underflow_1
.c84a	f6 25		inc $25,x			inc DStack+0,x
.c84c	d0 02		bne $c850			bne +
.c84e	f6 26		inc $26,x			inc DStack+1,x
.c850					+
=9					CL	.var *-(WordListLink+wh_Xt)
=$c850					en = *	; remember here
>c845	09					.byte CL	;wh_CodeLength
.c850	60		rts				rts
.c851					NOS_One_Plus:
.c851	f6 27		inc $27,x			inc DStack+2,x
.c853	d0 02		bne $c857			bne +
.c855	f6 28		inc $28,x			inc DStack+3,x
.c857	60		rts		+		rts
>c858	4d 2b				L1:	.text "M+"	;  name of word as a string, ending at wh_NameLastChar
>c85a	02					.byte *-L1	;wh_NameLength	length of name
>c85b	c2 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c85d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c85e	08					.byte NN	;wh_Flags	dictionary flags
=51162					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c85f	20 50 b2	jsr $b250	MPlus:		jsr PopYA
.c862	18		clc				clc		; add n to lo word of d1
.c863	75 27		adc $27,x			adc DStack+2,x
.c865	95 27		sta $27,x			sta DStack+2,x
.c867	98		tya				tya
.c868	75 28		adc $28,x			adc DStack+3,x
.c86a	95 28		sta $28,x			sta DStack+3,x
.c86c	90 06		bcc $c874			bcc +		; propagate carry thru hi word of d1
.c86e	f6 25		inc $25,x			inc DStack+0,x
.c870	d0 02		bne $c874			bne +
.c872	f6 26		inc $26,x			inc DStack+1,x
.c874					+
.c874	98		tya				tya		; if n negative
.c875	30 ad		bmi $c824			bmi One_Minus_NoUf ;   decrement hi word of d1
=24					CL	.var *-(WordListLink+wh_Xt)
=$c877					en = *	; remember here
>c85d	18					.byte CL	;wh_CodeLength
.c877	60		rts				rts
>c878	44 32 2a			L1:	.text "D2*"	;  name of word as a string, ending at wh_NameLastChar
>c87b	03					.byte *-L1	;wh_NameLength	length of name
>c87c	da c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c87e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c87f	10					.byte UF	;wh_Flags	dictionary flags
=51195					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c880	20 a3 b2	jsr $b2a3	D2Star:		jsr underflow_2
.c883	16 27		asl $27,x			asl DStack+2,x
.c885	36 28		rol $28,x			rol DStack+3,x
.c887	36 25		rol $25,x			rol DStack+0,x
.c889	36 26		rol $26,x			rol DStack+1,x
=11					CL	.var *-(WordListLink+wh_Xt)
=$c88b					en = *	; remember here
>c87e	0b					.byte CL	;wh_CodeLength
.c88b	60		rts				rts
>c88c	44 32 2f			L1:	.text "D2/"	;  name of word as a string, ending at wh_NameLastChar
>c88f	03					.byte *-L1	;wh_NameLength	length of name
>c890	fb c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c892	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c893	10					.byte UF	;wh_Flags	dictionary flags
=51215					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c894	20 a3 b2	jsr $b2a3	D2Slash:	jsr underflow_2
.c897	b5 26		lda $26,x			lda DStack+1,x
.c899	0a		asl a				asl a
.c89a	76 26		ror $26,x	D2SlashU:	ror DStack+1,x
.c89c	76 25		ror $25,x			ror DStack+0,x
.c89e	76 28		ror $28,x			ror DStack+3,x
.c8a0	76 27		ror $27,x			ror DStack+2,x
=14					CL	.var *-(WordListLink+wh_Xt)
=$c8a2					en = *	; remember here
>c892	0e					.byte CL	;wh_CodeLength
.c8a2	60		rts				rts
>c8a3	55 44 32 2f			L1:	.text "UD2/"	;  name of word as a string, ending at wh_NameLastChar
>c8a7	04					.byte *-L1	;wh_NameLength	length of name
>c8a8	0f c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8aa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8ab	18					.byte UF+NN	;wh_Flags	dictionary flags
=51239					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8ac	20 a3 b2	jsr $b2a3	DU2Slash:	jsr underflow_2
.c8af	18		clc				clc
.c8b0	90 e8		bcc $c89a			bcc D2SlashU
=6					CL	.var *-(WordListLink+wh_Xt)
=$c8b2					en = *	; remember here
>c8aa	06					.byte CL	;wh_CodeLength
>c8b2	32 2a				L1:	.text "2*"	;  name of word as a string, ending at wh_NameLastChar
>c8b4	02					.byte *-L1	;wh_NameLength	length of name
>c8b5	27 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8b8	10					.byte UF	;wh_Flags	dictionary flags
=51252					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8b9					Two_Star:
.c8b9	20 8e b2	jsr $b28e			jsr underflow_1
.c8bc	16 25		asl $25,x			asl DStack+0,x
.c8be	36 26		rol $26,x			rol DStack+1,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$c8c0					en = *	; remember here
>c8b7	07					.byte CL	;wh_CodeLength
.c8c0	60		rts				rts
>c8c1	32 2f				L1:	.text "2/"	;  name of word as a string, ending at wh_NameLastChar
>c8c3	02					.byte *-L1	;wh_NameLength	length of name
>c8c4	34 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8c6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8c7	10					.byte UF	;wh_Flags	dictionary flags
=51267					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8c8					Two_Slash:
.c8c8	20 8e b2	jsr $b28e			jsr underflow_1
.c8cb	b5 26		lda $26,x			lda DStack+1,x		; load sign into carry, for signed shift
.c8cd	0a		asl a				asl
.c8ce	76 26		ror $26,x			ror DStack+1,x
.c8d0	76 25		ror $25,x			ror DStack+0,x
=10					CL	.var *-(WordListLink+wh_Xt)
=$c8d2					en = *	; remember here
>c8c6	0a					.byte CL	;wh_CodeLength
.c8d2	60		rts				rts
>c8d3	55 32 2f			L1:	.text "U2/"	;  name of word as a string, ending at wh_NameLastChar
>c8d6	03					.byte *-L1	;wh_NameLength	length of name
>c8d7	43 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8d9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8da	10					.byte UF	;wh_Flags	dictionary flags
=51286					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8db					UTwo_Slash:
.c8db	20 8e b2	jsr $b28e			jsr underflow_1
.c8de	56 26		lsr $26,x			lsr DStack+1,x
.c8e0	76 25		ror $25,x			ror DStack+0,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$c8e2					en = *	; remember here
>c8d9	07					.byte CL	;wh_CodeLength
.c8e2	60		rts				rts
>c8e3	44 52 53 68 69 66 74		L1:	.text "DRShift"	;  name of word as a string, ending at wh_NameLastChar
>c8ea	07					.byte *-L1	;wh_NameLength	length of name
>c8eb	56 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8ed	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8ee	00					.byte 0	;wh_Flags	dictionary flags
=51306					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8ef	20 34 b2	jsr $b234	DRShift:	jsr PopA	; pop u
.c8f2	a8		tay		DRShiftA:	tay
.c8f3	f0 0e		beq $c903			beq _9
.c8f5	b5 26		lda $26,x			lda DStack+1,x
.c8f7	4a		lsr a		_2:		lsr a
.c8f8	76 25		ror $25,x			ror DStack+0,x
.c8fa	76 28		ror $28,x			ror DStack+3,x
.c8fc	76 27		ror $27,x			ror DStack+2,x
.c8fe	88		dey				dey
.c8ff	d0 f6		bne $c8f7			bne _2
.c901	95 26		sta $26,x			sta DStack+1,x
.c903					_9:
=20					CL	.var *-(WordListLink+wh_Xt)
=$c903					en = *	; remember here
>c8ed	14					.byte CL	;wh_CodeLength
.c903	60		rts				rts
>c904	52 53 68 69 66 74		L1:	.text "RShift"	;  name of word as a string, ending at wh_NameLastChar
>c90a	06					.byte *-L1	;wh_NameLength	length of name
>c90b	6a c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c90d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c90e	00					.byte 0	;wh_Flags	dictionary flags
=51338					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c90f	20 3d b2	jsr $b23d	RShift:		jsr PopA2	; pop u, check for 2 params
.c912	a8		tay		RShift_A:	tay		; get shift count
.c913	f0 0a		beq $c91f			beq _done
.c915	b5 26		lda $26,x			lda DStack+1,x
.c917	4a		lsr a		_loop:		lsr a
.c918	76 25		ror $25,x			ror DStack+0,x
.c91a	88		dey				dey
.c91b	d0 fa		bne $c917			bne _loop
.c91d	95 26		sta $26,x			sta DStack+1,x
.c91f					_done:
=16					CL	.var *-(WordListLink+wh_Xt)
=$c91f					en = *	; remember here
>c90d	10					.byte CL	;wh_CodeLength
.c91f	60		rts				rts
>c920	4c 53 68 69 66 74		L1:	.text "LShift"	;  name of word as a string, ending at wh_NameLastChar
>c926	06					.byte *-L1	;wh_NameLength	length of name
>c927	8a c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c929	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c92a	00					.byte 0	;wh_Flags	dictionary flags
=51366					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c92b	20 3d b2	jsr $b23d	LShift:		jsr PopA2	; pop u, check for 2 params
.c92e	a8		tay		LShift_A:	tay		; get shift count
.c92f	f0 0a		beq $c93b			beq _done
.c931	b5 26		lda $26,x			lda DStack+1,x
.c933	16 25		asl $25,x	_loop:		asl DStack+0,x
.c935	2a		rol a				rol a
.c936	88		dey				dey
.c937	d0 fa		bne $c933			bne _loop
.c939	95 26		sta $26,x			sta DStack+1,x
.c93b					_done:
=16					CL	.var *-(WordListLink+wh_Xt)
=$c93b					en = *	; remember here
>c929	10					.byte CL	;wh_CodeLength
.c93b	60		rts				rts
>c93c	41 6e 64			L1:	.text "And"	;  name of word as a string, ending at wh_NameLastChar
>c93f	03					.byte *-L1	;wh_NameLength	length of name
>c940	a6 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c942	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c943	10					.byte UF	;wh_Flags	dictionary flags
=51391					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c944					And2:
.c944	20 a3 b2	jsr $b2a3			jsr underflow_2
.c947	b5 25		lda $25,x			lda DStack+0,x
.c949	35 27		and $27,x			and DStack+2,x
.c94b	95 27		sta $27,x			sta DStack+2,x
.c94d	b5 26		lda $26,x			lda DStack+1,x
.c94f	35 28		and $28,x			and DStack+3,x
.c951	95 28		sta $28,x			sta DStack+3,x
.c953	e8		inx				inx		; Drop n2
.c954	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$c955					en = *	; remember here
>c942	11					.byte CL	;wh_CodeLength
.c955	60		rts				rts
>c956	4f 72				L1:	.text "Or"	;  name of word as a string, ending at wh_NameLastChar
>c958	02					.byte *-L1	;wh_NameLength	length of name
>c959	bf c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c95b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c95c	10					.byte UF	;wh_Flags	dictionary flags
=51416					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c95d					Or:
.c95d	20 a3 b2	jsr $b2a3			jsr underflow_2
.c960	b5 25		lda $25,x			lda DStack+0,x
.c962	15 27		ora $27,x			ora DStack+2,x
.c964	95 27		sta $27,x			sta DStack+2,x
.c966	b5 26		lda $26,x			lda DStack+1,x
.c968	15 28		ora $28,x			ora DStack+3,x
.c96a	95 28		sta $28,x			sta DStack+3,x
.c96c	e8		inx				inx		; Drop n2
.c96d	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$c96e					en = *	; remember here
>c95b	11					.byte CL	;wh_CodeLength
.c96e	60		rts				rts
>c96f	58 6f 72			L1:	.text "Xor"	;  name of word as a string, ending at wh_NameLastChar
>c972	03					.byte *-L1	;wh_NameLength	length of name
>c973	d8 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c975	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c976	10					.byte UF	;wh_Flags	dictionary flags
=51442					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c977					Xor:
.c977	20 a3 b2	jsr $b2a3			jsr underflow_2
.c97a	b5 25		lda $25,x			lda DStack+0,x
.c97c	55 27		eor $27,x			eor DStack+2,x
.c97e	95 27		sta $27,x			sta DStack+2,x
.c980	b5 26		lda $26,x			lda DStack+1,x
.c982	55 28		eor $28,x			eor DStack+3,x
.c984	95 28		sta $28,x			sta DStack+3,x
.c986	e8		inx				inx		; Drop n2
.c987	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$c988					en = *	; remember here
>c975	11					.byte CL	;wh_CodeLength
.c988	60		rts				rts
>c989	2b				L1:	.text "+"	;  name of word as a string, ending at wh_NameLastChar
>c98a	01					.byte *-L1	;wh_NameLength	length of name
>c98b	f2 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c98d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c98e	10					.byte UF	;wh_Flags	dictionary flags
=51466					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c98f					Plus:
.c98f	20 a3 b2	jsr $b2a3			jsr underflow_2
.c992	18		clc				clc
.c993	b5 25		lda $25,x			lda DStack+0,x		; LSB
.c995	75 27		adc $27,x			adc DStack+2,x
.c997	95 27		sta $27,x			sta DStack+2,x
.c999	b5 26		lda $26,x			lda DStack+1,x		; MSB. No CLC, conserve carry bit
.c99b	75 28		adc $28,x			adc DStack+3,x
.c99d	95 28		sta $28,x			sta DStack+3,x
.c99f	e8		inx				inx
.c9a0	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$c9a1					en = *	; remember here
>c98d	12					.byte CL	;wh_CodeLength
.c9a1	60		rts				rts
>c9a2	2d				L1:	.text "-"	;  name of word as a string, ending at wh_NameLastChar
>c9a3	01					.byte *-L1	;wh_NameLength	length of name
>c9a4	0a c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9a6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9a7	10					.byte UF	;wh_Flags	dictionary flags
=51491					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9a8					Minus:
.c9a8	20 a3 b2	jsr $b2a3			jsr underflow_2
.c9ab	38		sec				sec
.c9ac	b5 27		lda $27,x			lda DStack+2,x	; LSB
.c9ae	f5 25		sbc $25,x			sbc DStack+0,x
.c9b0	95 27		sta $27,x			sta DStack+2,x
.c9b2	b5 28		lda $28,x			lda DStack+3,x	; MSB
.c9b4	f5 26		sbc $26,x			sbc DStack+1,x
.c9b6	95 28		sta $28,x			sta DStack+3,x
.c9b8	e8		inx				inx		; Drop n2
.c9b9	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$c9ba					en = *	; remember here
>c9a6	12					.byte CL	;wh_CodeLength
.c9ba	60		rts				rts
>c9bb	2e				L1:	.text "."	;  name of word as a string, ending at wh_NameLastChar
>c9bc	01					.byte *-L1	;wh_NameLength	length of name
>c9bd	23 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9bf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9c0	08					.byte NN	;wh_Flags	dictionary flags
=51516					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9c1	b5 26		lda $26,x	Dot:		lda DStack+1,x		; ( n )	save sign
.c9c3	08		php				php
.c9c4	20 84 c4	jsr $c484			jsr Abs			; ( u )
.c9c7	20 31 b6	jsr $b631			jsr Zero		; ( ud )	u>d  cvt u to ud
.c9ca	4c da c9	jmp $c9da			jmp fmt_d3
=12					CL	.var *-(WordListLink+wh_Xt)
=$c9cd					en = *	; remember here
>c9bf	0c					.byte CL	;wh_CodeLength
>c9cd	44 2e				L1:	.text "D."	;  name of word as a string, ending at wh_NameLastChar
>c9cf	02					.byte *-L1	;wh_NameLength	length of name
>c9d0	3c c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9d3	08					.byte NN	;wh_Flags	dictionary flags
=51535					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9d4	b5 26		lda $26,x	D_Dot:		lda DStack+1,x		; save sign
.c9d6	08		php				php
.c9d7	20 b9 c4	jsr $c4b9			jsr DAbs
.c9da	20 2e aa	jsr $aa2e	fmt_d3:		jsr Less_Number_Sign	; ( ud )	start formatting
.c9dd	20 9c aa	jsr $aa9c			jsr Number_sign_s	; ( ud )	do all digits
.c9e0	28		plp				plp			; ( ud )	do sign
.c9e1	20 b7 aa	jsr $aab7			jsr Sign_P		; ( ud )
.c9e4	20 3a aa	jsr $aa3a			jsr Number_sign_greater	; ( addr u )	end formatting
.c9e7	20 cd cb	jsr $cbcd			jsr Type
.c9ea	4c c0 cb	jmp $cbc0			jmp Space
=25					CL	.var *-(WordListLink+wh_Xt)
=$c9ed					en = *	; remember here
>c9d2	19					.byte CL	;wh_CodeLength
>c9ed	55 2e				L1:	.text "U."	;  name of word as a string, ending at wh_NameLastChar
>c9ef	02					.byte *-L1	;wh_NameLength	length of name
>c9f0	4f c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9f2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9f3	18					.byte UF+NN	;wh_Flags	dictionary flags
=51567					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9f4	20 8e b2	jsr $b28e	U_Dot:		jsr underflow_1
.c9f7	20 0e ca	jsr $ca0e			jsr print_u
.c9fa	4c c0 cb	jmp $cbc0			jmp Space
=9					CL	.var *-(WordListLink+wh_Xt)
=$c9fd					en = *	; remember here
>c9f2	09					.byte CL	;wh_CodeLength
>c9fd	55 44 2e			L1:	.text "UD."	;  name of word as a string, ending at wh_NameLastChar
>ca00	03					.byte *-L1	;wh_NameLength	length of name
>ca01	6f c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca03	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca04	18					.byte UF+NN	;wh_Flags	dictionary flags
=51584					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca05	20 a3 b2	jsr $b2a3	UD_Dot:		jsr underflow_2 ; double number
.ca08	20 11 ca	jsr $ca11			jsr print_ud
.ca0b	4c c0 cb	jmp $cbc0			jmp Space
=9					CL	.var *-(WordListLink+wh_Xt)
=$ca0e					en = *	; remember here
>ca03	09					.byte CL	;wh_CodeLength
.ca0e					print_u:
.ca0e	20 31 b6	jsr $b631			jsr Zero			; convert to ud
.ca11					print_ud:
.ca11	20 2e aa	jsr $aa2e			jsr Less_Number_Sign		; <#	start formatting
.ca14	20 9c aa	jsr $aa9c			jsr Number_sign_s		; #S	do all digits
.ca17	20 3a aa	jsr $aa3a			jsr Number_sign_greater		; #>	end formatting
.ca1a	4c cd cb	jmp $cbcd			jmp Type
>ca1d	55 2e 52			L1:	.text "U.R"	;  name of word as a string, ending at wh_NameLastChar
>ca20	03					.byte *-L1	;wh_NameLength	length of name
>ca21	80 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca23	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca24	08					.byte NN	;wh_Flags	dictionary flags
=51616					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca25	20 34 b2	jsr $b234	U_Dot_R:	jsr PopA		; save field width
.ca28	48		pha		U_Dot_R_A:	pha
.ca29	20 31 b6	jsr $b631			jsr Zero		; u>d  cvt u to ud
.ca2c	4c 3c ca	jmp $ca3c			jmp fmt_udr3
=10					CL	.var *-(WordListLink+wh_Xt)
=$ca2f					en = *	; remember here
>ca23	0a					.byte CL	;wh_CodeLength
>ca2f	55 44 2e 52			L1:	.text "UD.R"	;  name of word as a string, ending at wh_NameLastChar
>ca33	04					.byte *-L1	;wh_NameLength	length of name
>ca34	a0 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca36	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca37	08					.byte NN	;wh_Flags	dictionary flags
=51635					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca38	20 34 b2	jsr $b234	UD_Dot_R:	jsr PopA			; save field width
.ca3b	48		pha		UD_Dot_R_A:	pha
.ca3c	20 2e aa	jsr $aa2e	fmt_udr3:	jsr Less_Number_Sign		; start formatted
.ca3f	20 9c aa	jsr $aa9c			jsr Number_sign_s		; do all digits
.ca42	20 3a aa	jsr $aa3a	fmt_r:		jsr Number_sign_greater		; finish formatted
.ca45	68		pla				pla				; recover field width
.ca46	38		sec				sec				; do leading spaces
.ca47	f5 25		sbc $25,x			sbc DStack+0,x
.ca49	90 06		bcc $ca51			bcc +
.ca4b	20 22 b6	jsr $b622			jsr PushZA
.ca4e	20 6a c2	jsr $c26a			jsr Spaces
.ca51	4c cd cb	jmp $cbcd	+		jmp Type			; type formatted
=28					CL	.var *-(WordListLink+wh_Xt)
=$ca54					en = *	; remember here
>ca36	1c					.byte CL	;wh_CodeLength
>ca54	2e 52				L1:	.text ".R"	;  name of word as a string, ending at wh_NameLastChar
>ca56	02					.byte *-L1	;wh_NameLength	length of name
>ca57	b3 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca59	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca5a	08					.byte NN	;wh_Flags	dictionary flags
=51670					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca5b	20 34 b2	jsr $b234	Dot_R:		jsr PopA		; save field width
.ca5e	48		pha		Dot_R_A:	pha
.ca5f	b5 26		lda $26,x			lda DStack+1,x		; save sign
.ca61	08		php				php
.ca62	20 84 c4	jsr $c484			jsr Abs
.ca65	20 31 b6	jsr $b631			jsr Zero		; u>d  cvt u to ud
.ca68	4c 7d ca	jmp $ca7d			jmp fmt_dr3
=16					CL	.var *-(WordListLink+wh_Xt)
=$ca6b					en = *	; remember here
>ca59	10					.byte CL	;wh_CodeLength
>ca6b	44 2e 52			L1:	.text "D.R"	;  name of word as a string, ending at wh_NameLastChar
>ca6e	03					.byte *-L1	;wh_NameLength	length of name
>ca6f	d6 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca71	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca72	08					.byte NN	;wh_Flags	dictionary flags
=51694					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca73	20 34 b2	jsr $b234	D_Dot_R:	jsr PopA		; save field width
.ca76	48		pha		D_Dot_R_A:	pha
.ca77	b5 26		lda $26,x			lda DStack+1,x		; save sign
.ca79	08		php				php
.ca7a	20 b9 c4	jsr $c4b9			jsr DAbs
.ca7d	20 2e aa	jsr $aa2e	fmt_dr3:	jsr Less_Number_Sign	; start formatted output
.ca80	20 9c aa	jsr $aa9c			jsr Number_sign_s	; do all digits
.ca83	28		plp				plp			; do the sign
.ca84	20 b7 aa	jsr $aab7			jsr Sign_P
.ca87	4c 42 ca	jmp $ca42			jmp fmt_r
=23					CL	.var *-(WordListLink+wh_Xt)
=$ca8a					en = *	; remember here
>ca71	17					.byte CL	;wh_CodeLength
>ca8a	3f				L1:	.text "?"	;  name of word as a string, ending at wh_NameLastChar
>ca8b	01					.byte *-L1	;wh_NameLength	length of name
>ca8c	ee c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca8e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca8f	08					.byte NN	;wh_Flags	dictionary flags
=51723					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca90					Question:
.ca90	20 af cc	jsr $ccaf			jsr Fetch
.ca93	4c c1 c9	jmp $c9c1			jmp Dot
=6					CL	.var *-(WordListLink+wh_Xt)
=$ca96					en = *	; remember here
>ca8e	06					.byte CL	;wh_CodeLength
>ca96	32 44 75 70			L1:	.text "2Dup"	;  name of word as a string, ending at wh_NameLastChar
>ca9a	04					.byte *-L1	;wh_NameLength	length of name
>ca9b	0b ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca9d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca9e	10					.byte UF	;wh_Flags	dictionary flags
=51738					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca9f					Two_Dup:
.ca9f	20 a3 b2	jsr $b2a3			jsr underflow_2
.caa2	ca		dex				dex
.caa3	ca		dex				dex
.caa4	ca		dex				dex
.caa5	ca		dex				dex
.caa6	b5 29		lda $29,x			lda DStack+4,x	; TOS
.caa8	95 25		sta $25,x			sta DStack+0,x
.caaa	b5 2a		lda $2a,x			lda DStack+5,x
.caac	95 26		sta $26,x			sta DStack+1,x
.caae	b5 2b		lda $2b,x			lda DStack+6,x	; NOS
.cab0	95 27		sta $27,x			sta DStack+2,x
.cab2	b5 2c		lda $2c,x			lda DStack+7,x
.cab4	95 28		sta $28,x			sta DStack+3,x
=23					CL	.var *-(WordListLink+wh_Xt)
=$cab6					en = *	; remember here
>ca9d	17					.byte CL	;wh_CodeLength
.cab6	60		rts				rts
>cab7	54 75 63 6b			L1:	.text "Tuck"	;  name of word as a string, ending at wh_NameLastChar
>cabb	04					.byte *-L1	;wh_NameLength	length of name
>cabc	1a ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cabe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cabf	10					.byte UF	;wh_Flags	dictionary flags
=51771					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cac0					Tuck:
.cac0	20 a3 b2	jsr $b2a3			jsr underflow_2
.cac3	ca		dex				dex
.cac4	ca		dex				dex
.cac5	b4 29		ldy $29,x			ldy DStack+4,x	; LSB
.cac7	b5 27		lda $27,x			lda DStack+2,x
.cac9	95 29		sta $29,x			sta DStack+4,x
.cacb	94 27		sty $27,x			sty DStack+2,x
.cacd	95 25		sta $25,x			sta DStack+0,x
.cacf	b4 2a		ldy $2a,x			ldy DStack+5,x	; MSB
.cad1	b5 28		lda $28,x			lda DStack+3,x
.cad3	95 2a		sta $2a,x			sta DStack+5,x
.cad5	94 28		sty $28,x			sty DStack+3,x
.cad7	95 26		sta $26,x			sta DStack+1,x
=25					CL	.var *-(WordListLink+wh_Xt)
=$cad9					en = *	; remember here
>cabe	19					.byte CL	;wh_CodeLength
.cad9	60		rts				rts
>cada	43 2c				L1:	.text "C,"	;  name of word as a string, ending at wh_NameLastChar
>cadc	02					.byte *-L1	;wh_NameLength	length of name
>cadd	3b ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cadf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cae0	08					.byte NN	;wh_Flags	dictionary flags
=51804					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cae1	20 34 b2	jsr $b234	C_Comma:	jsr PopA	; pop c, with underflow check
.cae4					C_Comma_A:
.cae4	ca		dex				dex
.cae5	94 25		sty $25,x			sty DStack+0,x	; save Y
.cae7	a0 00		ldy #$00			ldy #0		; store A
.cae9	91 00		sta ($00),y			sta (cp),y
.caeb	e6 00		inc $00				inc cp+0	; increment cp
.caed	d0 02		bne $caf1			bne +
.caef	e6 01		inc $01				inc cp+1
.caf1					+
.caf1	b4 25		ldy $25,x			ldy DStack+0,x	; restore Y
.caf3	e8		inx				inx
=19					CL	.var *-(WordListLink+wh_Xt)
=$caf4					en = *	; remember here
>cadf	13					.byte CL	;wh_CodeLength
.caf4	60		rts				rts
>caf5	2c				L1:	.text ","	;  name of word as a string, ending at wh_NameLastChar
>caf6	01					.byte *-L1	;wh_NameLength	length of name
>caf7	5c ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>caf9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cafa	08					.byte NN	;wh_Flags	dictionary flags
=51830					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cafb	20 50 b2	jsr $b250	Comma:		jsr PopYA	; pop n, with underflow check
.cafe					Comma_YA:
.cafe	20 e4 ca	jsr $cae4			jsr C_Comma_A	; compile LSB
.cb01	98		tya				tya		; compile MSB
.cb02	4c e4 ca	jmp $cae4			jmp C_Comma_A
=10					CL	.var *-(WordListLink+wh_Xt)
=$cb05					en = *	; remember here
>caf9	0a					.byte CL	;wh_CodeLength
>cb05	32 2c				L1:	.text "2,"	;  name of word as a string, ending at wh_NameLastChar
>cb07	02					.byte *-L1	;wh_NameLength	length of name
>cb08	76 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb0a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb0b	08					.byte NN	;wh_Flags	dictionary flags
=51847					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb0c	20 fb ca	jsr $cafb	Two_Comma:	jsr Comma
.cb0f	4c fb ca	jmp $cafb			jmp Comma
=6					CL	.var *-(WordListLink+wh_Xt)
=$cb12					en = *	; remember here
>cb0a	06					.byte CL	;wh_CodeLength
.cb12	a9 e8		lda #$e8	Drop_Comma:	lda #$e8	;inx
.cb14	a8		tay				tay
.cb15	d0 e7		bne $cafe			bne Comma_YA
>cb17	4a 73 72 2c			L1:	.text "Jsr,"	;  name of word as a string, ending at wh_NameLastChar
>cb1b	04					.byte *-L1	;wh_NameLength	length of name
>cb1c	87 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb1e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb1f	08					.byte NN	;wh_Flags	dictionary flags
=51867					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb20	20 50 b2	jsr $b250	Jsr_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cb23	20 e0 b5	jsr $b5e0	Jsr_Comma_YA:	jsr PushYA	; push addr
.cb26	a9 20		lda #$20			lda #$20	; JSR abs opcode
.cb28	20 e4 ca	jsr $cae4	Jsr_Comma_3:	jsr C_Comma_A
.cb2b	4c fb ca	jmp $cafb			jmp Comma	; compile addr
=14					CL	.var *-(WordListLink+wh_Xt)
=$cb2e					en = *	; remember here
>cb1e	0e					.byte CL	;wh_CodeLength
>cb2e	4a 6d 70 2c			L1:	.text "Jmp,"	;  name of word as a string, ending at wh_NameLastChar
>cb32	04					.byte *-L1	;wh_NameLength	length of name
>cb33	9b ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb35	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb36	08					.byte NN	;wh_Flags	dictionary flags
=51890					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb37	20 50 b2	jsr $b250	Jmp_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cb3a	20 e0 b5	jsr $b5e0	Jmp_Comma_YA:	jsr PushYA	; push addr
.cb3d	a9 4c		lda #$4c			lda #$4c	; JMP abs opcode
.cb3f	d0 e7		bne $cb28			bne Jsr_Comma_3
=10					CL	.var *-(WordListLink+wh_Xt)
=$cb41					en = *	; remember here
>cb35	0a					.byte CL	;wh_CodeLength
>cb41	43 40				L1:	.text "C@"	;  name of word as a string, ending at wh_NameLastChar
>cb43	02					.byte *-L1	;wh_NameLength	length of name
>cb44	b2 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb46	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb47	10					.byte UF	;wh_Flags	dictionary flags
=51907					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb48	20 8e b2	jsr $b28e	C_Fetch:	jsr underflow_1
.cb4b	a1 25		lda ($25,x)			lda (DStack+0,x)
.cb4d	95 25		sta $25,x			sta DStack+0,x
.cb4f	a9 00		lda #$00			lda #0
.cb51	95 26		sta $26,x			sta DStack+1,x	; zero MSB
=11					CL	.var *-(WordListLink+wh_Xt)
=$cb53					en = *	; remember here
>cb46	0b					.byte CL	;wh_CodeLength
.cb53	60		rts				rts
>cb54	43 21				L1:	.text "C!"	;  name of word as a string, ending at wh_NameLastChar
>cb56	02					.byte *-L1	;wh_NameLength	length of name
>cb57	c3 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb59	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb5a	10					.byte UF	;wh_Flags	dictionary flags
=51926					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb5b	20 a3 b2	jsr $b2a3	C_Store:	jsr underflow_2
.cb5e	b5 27		lda $27,x			lda DStack+2,x
.cb60	81 25		sta ($25,x)			sta (DStack+0,x)
.cb62	e8		inx				inx
.cb63	e8		inx				inx
.cb64	e8		inx				inx
.cb65	e8		inx				inx
=11					CL	.var *-(WordListLink+wh_Xt)
=$cb66					en = *	; remember here
>cb59	0b					.byte CL	;wh_CodeLength
.cb66	60		rts				rts
>cb67	31 2b 21			L1:	.text "1+!"	;  name of word as a string, ending at wh_NameLastChar
>cb6a	03					.byte *-L1	;wh_NameLength	length of name
>cb6b	d6 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb6d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb6e	08					.byte NN	;wh_Flags	dictionary flags
=51946					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb6f					OnePlusStore:
.cb6f	a1 25		lda ($25,x)			lda (DStack+0,x)
.cb71	18		clc				clc
.cb72	69 01		adc #$01			adc #1
.cb74	81 25		sta ($25,x)			sta (DStack+0,x)
.cb76	90 0c		bcc $cb84			bcc _7
.cb78	e6 25		inc $25				inc DStack+0
.cb7a	d0 02		bne $cb7e			bne +
.cb7c	e6 26		inc $26				inc DStack+1
.cb7e					+
.cb7e	a1 25		lda ($25,x)			lda (DStack+0,x)
.cb80	69 00		adc #$00			adc #0
.cb82	81 25		sta ($25,x)			sta (Dstack+0,x)
.cb84					_7:
.cb84	e8		inx				inx
.cb85	e8		inx				inx
=23					CL	.var *-(WordListLink+wh_Xt)
=$cb86					en = *	; remember here
>cb6d	17					.byte CL	;wh_CodeLength
.cb86	60		rts				rts
>cb87	2b 21				L1:	.text "+!"	;  name of word as a string, ending at wh_NameLastChar
>cb89	02					.byte *-L1	;wh_NameLength	length of name
>cb8a	ea ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb8c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb8d	10					.byte UF	;wh_Flags	dictionary flags
=51977					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb8e					Plus_store:
.cb8e	20 a3 b2	jsr $b2a3			jsr underflow_2
.cb91	20 5b b2	jsr $b25b			jsr PopTmp1	; pop addr to tmp1
.cb94	a0 00		ldy #$00			ldy #0		; LSB
.cb96	b1 15		lda ($15),y			lda (tmp1),y
.cb98	18		clc				clc
.cb99	75 25		adc $25,x			adc DStack+0,x
.cb9b	91 15		sta ($15),y			sta (tmp1),y
.cb9d	c8		iny				iny		; MSB
.cb9e	b1 15		lda ($15),y			lda (tmp1),y
.cba0	75 26		adc $26,x			adc DStack+1,x
.cba2	91 15		sta ($15),y			sta (tmp1),y
.cba4	e8		inx				inx
.cba5	e8		inx				inx
=24					CL	.var *-(WordListLink+wh_Xt)
=$cba6					en = *	; remember here
>cb8c	18					.byte CL	;wh_CodeLength
.cba6	60		rts				rts
>cba7	45 6d 69 74			L1:	.text "Emit"	;  name of word as a string, ending at wh_NameLastChar
>cbab	04					.byte *-L1	;wh_NameLength	length of name
>cbac	09 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbaf	08					.byte NN	;wh_Flags	dictionary flags
=52011					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbb0	20 34 b2	jsr $b234	Emit:		jsr PopA		; pop char, with underflow check
.cbb3					Emit_A:
.cbb3	6c 06 03	jmp ($0306)			jmp (output)		; JSR/RTS
=6					CL	.var *-(WordListLink+wh_Xt)
=$cbb6					en = *	; remember here
>cbae	06					.byte CL	;wh_CodeLength
>cbb6	53 70 61 63 65			L1:	.text "Space"	;  name of word as a string, ending at wh_NameLastChar
>cbbb	05					.byte *-L1	;wh_NameLength	length of name
>cbbc	2b cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbbe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbbf	08					.byte NN	;wh_Flags	dictionary flags
=52027					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbc0	a9 20		lda #$20	Space:		lda #AscSP
.cbc2	d0 ef		bne $cbb3			bne Emit_A
=4					CL	.var *-(WordListLink+wh_Xt)
=$cbc4					en = *	; remember here
>cbbe	04					.byte CL	;wh_CodeLength
>cbc4	54 79 70 65			L1:	.text "Type"	;  name of word as a string, ending at wh_NameLastChar
>cbc8	04					.byte *-L1	;wh_NameLength	length of name
>cbc9	3b cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbcb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbcc	18					.byte UF+NN	;wh_Flags	dictionary flags
=52040					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbcd					Type:
.cbcd	20 a3 b2	jsr $b2a3			jsr underflow_2
.cbd0	4c dd cb	jmp $cbdd			jmp _test
.cbd3					_loop:
.cbd3	d6 25		dec $25,x			dec DStack+0,x		; finish length decrement
.cbd5	a1 27		lda ($27,x)			lda (DStack+2,x)	; Send the current character
.cbd7	20 b3 cb	jsr $cbb3			jsr Emit_A
.cbda	20 51 c8	jsr $c851			jsr NOS_One_Plus	; increment address
.cbdd	b5 25		lda $25,x	_test:		lda DStack+0,x		; decrement length & test for <0
.cbdf	d0 f2		bne $cbd3			bne _loop
.cbe1	d6 26		dec $26,x			dec DStack+1,x
.cbe3	10 ee		bpl $cbd3			bpl _loop
.cbe5	4c 12 c3	jmp $c312			jmp Two_drop
=27					CL	.var *-(WordListLink+wh_Xt)
=$cbe8					en = *	; remember here
>cbcb	1b					.byte CL	;wh_CodeLength
.cbe8					Print_ASCIIZ_YA:
.cbe8	20 ee cb	jsr $cbee			jsr Print_ASCIIZ_YA_no_lf
.cbeb	4c ce a9	jmp $a9ce	                jmp CR
.cbee					Print_ASCIIZ_YA_no_lf:
.cbee	85 19		sta $19				sta tmp3+0		; save string address
.cbf0	84 1a		sty $1a				sty tmp3+1
.cbf2	a0 00		ldy #$00			ldy #0
.cbf4					Print_ASCIIZ_tmp3_no_lf:
.cbf4	b1 19		lda ($19),y			lda (tmp3),y
.cbf6	f0 06		beq $cbfe			beq _done		; end of string?
.cbf8	20 b3 cb	jsr $cbb3			jsr emit_a
.cbfb	c8		iny				iny
.cbfc	d0 f6		bne $cbf4			bne Print_ASCIIZ_tmp3_no_lf
.cbfe					_done:
.cbfe	60		rts				rts
>cbff	45 78 65 63 75 74 65		L1:	.text "Execute"	;  name of word as a string, ending at wh_NameLastChar
>cc06	07					.byte *-L1	;wh_NameLength	length of name
>cc07	48 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc09	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc0a	08					.byte NN	;wh_Flags	dictionary flags
=52102					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc0b					Execute:
.cc0b	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.cc0d	b0 2f		bcs $cc3e		bcs Throw_Underflow_03
.cc0f	b5 26		lda $26,x			lda DStack+1,x	; addr for RTI
.cc11	48		pha				pha
.cc12	b5 25		lda $25,x			lda DStack+0,x
.cc14	48		pha				pha
.cc15	e8		inx				inx		; drop addr
.cc16	e8		inx				inx
.cc17	08		php				php		; flags for RTI
.cc18	40		rti				rti
=14					CL	.var *-(WordListLink+wh_Xt)
=$cc19					en = *	; remember here
>cc09	0e					.byte CL	;wh_CodeLength
>cc19	32 52 6f 74			L1:	.text "2Rot"	;  name of word as a string, ending at wh_NameLastChar
>cc1d	04					.byte *-L1	;wh_NameLength	length of name
>cc1e	86 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc20	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc21	08					.byte NN	;wh_Flags	dictionary flags
=52125					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc22					TwoRot:
.cc22	e0 1d		cpx #$1d		cpx #-2*6+DStack0+1
.cc24	b0 18		bcs $cc3e		bcs Throw_Underflow_03
.cc26	86 15		stx $15				stx tmp1+0
.cc28	e8		inx				inx		; do 4 times
.cc29	e8		inx				inx
.cc2a	e8		inx				inx
.cc2b	e8		inx				inx
.cc2c	ca		dex		-		dex
.cc2d	b4 2d		ldy $2d,x			ldy DStack+8,x	; do a byte
.cc2f	b5 29		lda $29,x			lda DStack+4,x
.cc31	95 2d		sta $2d,x			sta DStack+8,x
.cc33	b5 25		lda $25,x			lda DStack+0,x
.cc35	95 29		sta $29,x			sta DStack+4,x
.cc37	94 25		sty $25,x			sty DStack+0,x
.cc39	e4 15		cpx $15				cpx tmp1+0
.cc3b	d0 ef		bne $cc2c			bne -
=27					CL	.var *-(WordListLink+wh_Xt)
=$cc3d					en = *	; remember here
>cc20	1b					.byte CL	;wh_CodeLength
.cc3d	60		rts				rts
.cc3e	4c 7a b2	jmp $b27a	Throw_Underflow_03: jmp Throw_Underflow
>cc41	52 6f 74			L1:	.text "Rot"	;  name of word as a string, ending at wh_NameLastChar
>cc44	03					.byte *-L1	;wh_NameLength	length of name
>cc45	9d cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc47	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc48	08					.byte NN	;wh_Flags	dictionary flags
=52164					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc49					Rot:
.cc49	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.cc4b	b0 f1		bcs $cc3e		bcs Throw_Underflow_03
.cc4d	b4 2a		ldy $2a,x			ldy DStack+5,x	; do MSB
.cc4f	b5 28		lda $28,x			lda DStack+3,x
.cc51	95 2a		sta $2a,x			sta DStack+5,x
.cc53	b5 26		lda $26,x			lda DStack+1,x
.cc55	95 28		sta $28,x			sta DStack+3,x
.cc57	94 26		sty $26,x			sty DStack+1,x
.cc59	b4 29		ldy $29,x			ldy DStack+4,x	; do LSB
.cc5b	b5 27		lda $27,x			lda DStack+2,x
.cc5d	95 29		sta $29,x			sta DStack+4,x
.cc5f	b5 25		lda $25,x			lda DStack+0,x
.cc61	95 27		sta $27,x			sta DStack+2,x
.cc63	94 25		sty $25,x			sty DStack+0,x
=28					CL	.var *-(WordListLink+wh_Xt)
=$cc65					en = *	; remember here
>cc47	1c					.byte CL	;wh_CodeLength
.cc65	60		rts				rts
>cc66	2d 52 6f 74			L1:	.text "-Rot"	;  name of word as a string, ending at wh_NameLastChar
>cc6a	04					.byte *-L1	;wh_NameLength	length of name
>cc6b	c4 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc6d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc6e	08					.byte NN	;wh_Flags	dictionary flags
=52202					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc6f					Not_Rot:
.cc6f	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.cc71	b0 cb		bcs $cc3e		bcs Throw_Underflow_03
.cc73	b4 26		ldy $26,x			ldy DStack+1,x	; do MSB
.cc75	b5 28		lda $28,x			lda DStack+3,x
.cc77	95 26		sta $26,x			sta DStack+1,x
.cc79	b5 2a		lda $2a,x			lda DStack+5,x
.cc7b	95 28		sta $28,x			sta DStack+3,x
.cc7d	94 2a		sty $2a,x			sty DStack+5,x
.cc7f	b4 25		ldy $25,x			ldy DStack+0,x	; do LSB
.cc81	b5 27		lda $27,x			lda DStack+2,x
.cc83	95 25		sta $25,x			sta DStack+0,x
.cc85	b5 29		lda $29,x			lda DStack+4,x
.cc87	95 27		sta $27,x			sta DStack+2,x
.cc89	94 29		sty $29,x			sty DStack+4,x
=28					CL	.var *-(WordListLink+wh_Xt)
=$cc8b					en = *	; remember here
>cc6d	1c					.byte CL	;wh_CodeLength
.cc8b	60		rts				rts
>cc8c	21				L1:	.text "!"	;  name of word as a string, ending at wh_NameLastChar
>cc8d	01					.byte *-L1	;wh_NameLength	length of name
>cc8e	ea cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc90	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc91	08					.byte NN	;wh_Flags	dictionary flags
=52237					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc92					Store:
.cc92	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.cc94	b0 a8		bcs $cc3e		bcs Throw_Underflow_03
.cc96	b5 27		lda $27,x			lda DStack+2,x	; LSB
.cc98	81 25		sta ($25,x)			sta (DStack+0,x)
.cc9a	f6 25		inc $25,x			inc DStack+0,x
.cc9c	d0 02		bne $cca0			bne +
.cc9e	f6 26		inc $26,x			inc DStack+1,x
.cca0					+
.cca0	b5 28		lda $28,x			lda DStack+3,x	; MSB
.cca2	81 25		sta ($25,x)			sta (DStack+0,x)
.cca4	e8		inx				inx		; 2Drop
.cca5	e8		inx				inx
.cca6	e8		inx				inx
.cca7	e8		inx				inx
=22					CL	.var *-(WordListLink+wh_Xt)
=$cca8					en = *	; remember here
>cc90	16					.byte CL	;wh_CodeLength
.cca8	60		rts				rts
>cca9	40				L1:	.text "@"	;  name of word as a string, ending at wh_NameLastChar
>ccaa	01					.byte *-L1	;wh_NameLength	length of name
>ccab	0d cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccae	08					.byte NN	;wh_Flags	dictionary flags
=52266					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccaf					Fetch:
.ccaf	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.ccb1	b0 8b		bcs $cc3e		bcs Throw_Underflow_03
.ccb3	a1 25		lda ($25,x)			lda (DStack+0,x)		; LSB
.ccb5	a8		tay				tay
.ccb6	f6 25		inc $25,x			inc DStack+0,x
.ccb8	d0 02		bne $ccbc			bne +
.ccba	f6 26		inc $26,x			inc DStack+1,x
.ccbc					+
.ccbc	a1 25		lda ($25,x)			lda (DStack+0,x)		; MSB
.ccbe	95 26		sta $26,x			sta DStack+1,x
.ccc0	94 25		sty $25,x			sty DStack+0,x
=19					CL	.var *-(WordListLink+wh_Xt)
=$ccc2					en = *	; remember here
>ccad	13					.byte CL	;wh_CodeLength
.ccc2	60		rts				rts
>ccc3	3e 52				L1:	.text ">R"	;  name of word as a string, ending at wh_NameLastChar
>ccc5	02					.byte *-L1	;wh_NameLength	length of name
>ccc6	2a cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccc8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccc9	41					.byte CO+R6	;wh_Flags	dictionary flags
=52293					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccca					To_R:
.ccca	68		pla				pla		; move the return address out of the way
.cccb	85 1d		sta $1d				sta tmp5+0
.cccd	68		pla				pla
.ccce	85 1e		sta $1e				sta tmp5+1
.ccd0	20 8e b2	jsr $b28e			jsr underflow_1
.ccd3	b5 26		lda $26,x			lda DStack+1,x	; MSB
.ccd5	48		pha				pha
.ccd6	b5 25		lda $25,x			lda DStack+0,x	; LSB
.ccd8	48		pha				pha
.ccd9	e8		inx				inx
.ccda	e8		inx				inx
.ccdb	a5 1e		lda $1e				lda tmp5+1	; move the return address back in
.ccdd	48		pha				pha
.ccde	a5 1d		lda $1d				lda tmp5+0
.cce0	48		pha				pha
=23					CL	.var *-(WordListLink+wh_Xt)
=$cce1					en = *	; remember here
>ccc8	17					.byte CL	;wh_CodeLength
.cce1	60		rts				rts
>cce2	52 3e				L1:	.text "R>"	;  name of word as a string, ending at wh_NameLastChar
>cce4	02					.byte *-L1	;wh_NameLength	length of name
>cce5	45 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cce7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cce8	41					.byte CO+R6	;wh_Flags	dictionary flags
=52324					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cce9					R_From:
.cce9	68		pla				pla		; Move the RTS addr out of the way
.ccea	85 1d		sta $1d				sta tmp5+0
.ccec	68		pla				pla
.cced	85 1e		sta $1e				sta tmp5+1
.ccef	ca		dex				dex		; move n
.ccf0	ca		dex				dex
.ccf1	68		pla				pla		; LSB
.ccf2	95 25		sta $25,x			sta DStack+0,x
.ccf4	68		pla				pla		; MSB
.ccf5	95 26		sta $26,x			sta DStack+1,x
.ccf7	a5 1e		lda $1e				lda tmp5+1	; Restore the RTS addr
.ccf9	48		pha				pha
.ccfa	a5 1d		lda $1d				lda tmp5+0
.ccfc	48		pha				pha
=20					CL	.var *-(WordListLink+wh_Xt)
=$ccfd					en = *	; remember here
>cce7	14					.byte CL	;wh_CodeLength
.ccfd	60		rts				rts
>ccfe	52 40				L1:	.text "R@"	;  name of word as a string, ending at wh_NameLastChar
>cd00	02					.byte *-L1	;wh_NameLength	length of name
>cd01	64 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd03	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd04	09					.byte NN+CO	;wh_Flags	dictionary flags
=52352					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd05					R_Fetch:
.cd05	86 15		stx $15				stx tmp1	; save data stack index
.cd07	ba		tsx				tsx		; X= return stack index
.cd08	bd 03 01	lda $0103,x			lda RStack+3,x
.cd0b	bc 04 01	ldy $0104,x			ldy RStack+4,x
.cd0e	a6 15		ldx $15				ldx tmp1	; restore data stack index
.cd10	4c e0 b5	jmp $b5e0			jmp PushYA
=14					CL	.var *-(WordListLink+wh_Xt)
=$cd13					en = *	; remember here
>cd03	0e					.byte CL	;wh_CodeLength
>cd13	4f 76 65 72			L1:	.text "Over"	;  name of word as a string, ending at wh_NameLastChar
>cd17	04					.byte *-L1	;wh_NameLength	length of name
>cd18	80 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd1a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd1b	10					.byte UF	;wh_Flags	dictionary flags
=52375					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd1c					Over:
.cd1c	20 a3 b2	jsr $b2a3			jsr underflow_2
.cd1f	b5 27		lda $27,x			lda DStack+2,x	; LSB
.cd21	b4 28		ldy $28,x			ldy DStack+3,x	; MSB
.cd23	ca		dex				dex		; PushYA
.cd24	ca		dex				dex
.cd25	95 25		sta $25,x			sta DStack+0,x
.cd27	94 26		sty $26,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$cd29					en = *	; remember here
>cd1a	0d					.byte CL	;wh_CodeLength
.cd29	60		rts				rts
>cd2a	3f 44 75 70			L1:	.text "?Dup"	;  name of word as a string, ending at wh_NameLastChar
>cd2e	04					.byte *-L1	;wh_NameLength	length of name
>cd2f	97 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd31	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd32	18					.byte UF+NN	;wh_Flags	dictionary flags
=52398					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd33					Question_Dup:
.cd33	20 8e b2	jsr $b28e			jsr underflow_1
.cd36	b5 25		lda $25,x			lda DStack+0,x	; Check if TOS is zero
.cd38	15 26		ora $26,x			ora DStack+1,x
.cd3a	d0 0c		bne $cd48			bne Dup_NoUf
=9					CL	.var *-(WordListLink+wh_Xt)
=$cd3c					en = *	; remember here
>cd31	09					.byte CL	;wh_CodeLength
.cd3c	60		rts				rts
>cd3d	44 75 70			L1:	.text "Dup"	;  name of word as a string, ending at wh_NameLastChar
>cd40	03					.byte *-L1	;wh_NameLength	length of name
>cd41	ae cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd43	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd44	10					.byte UF	;wh_Flags	dictionary flags
=52416					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd45					Dup:
.cd45	20 8e b2	jsr $b28e			jsr underflow_1
.cd48	b5 25		lda $25,x	Dup_NoUf:	lda DStack+0,x	; LSB
.cd4a	b4 26		ldy $26,x			ldy DStack+1,x	; MSB
.cd4c	ca		dex				dex
.cd4d	ca		dex				dex
.cd4e	95 25		sta $25,x			sta DStack+0,x
.cd50	94 26		sty $26,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$cd52					en = *	; remember here
>cd43	0d					.byte CL	;wh_CodeLength
.cd52	60		rts				rts
.cd53					PushAY:
.cd53	ca		dex				dex
.cd54	ca		dex				dex
.cd55	94 25		sty $25,x			sty DStack+0,x
.cd57	95 26		sta $26,x			sta DStack+1,x
.cd59	60		rts				rts
>cd5a	53 77 61 70			L1:	.text "Swap"	;  name of word as a string, ending at wh_NameLastChar
>cd5e	04					.byte *-L1	;wh_NameLength	length of name
>cd5f	c0 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd61	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd62	10					.byte UF	;wh_Flags	dictionary flags
=52446					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd63					Swap:
.cd63	20 a3 b2	jsr $b2a3			jsr underflow_2
.cd66	b5 25		lda $25,x			lda DStack+0,x	; do LSB
.cd68	b4 27		ldy $27,x			ldy DStack+2,x
.cd6a	95 27		sta $27,x			sta DStack+2,x
.cd6c	94 25		sty $25,x			sty DStack+0,x
.cd6e	b5 26		lda $26,x			lda DStack+1,x	; do MSB
.cd70	b4 28		ldy $28,x			ldy DStack+3,x
.cd72	95 28		sta $28,x			sta DStack+3,x
.cd74	94 26		sty $26,x			sty DStack+1,x
=19					CL	.var *-(WordListLink+wh_Xt)
=$cd76					en = *	; remember here
>cd61	13					.byte CL	;wh_CodeLength
.cd76	60		rts				rts
>cd77	44 72 6f 70			L1:	.text "Drop"	;  name of word as a string, ending at wh_NameLastChar
>cd7b	04					.byte *-L1	;wh_NameLength	length of name
>cd7c	de cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd7e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd7f	10					.byte UF	;wh_Flags	dictionary flags
=52475					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd80					Drop:
.cd80	20 8e b2	jsr $b28e			jsr underflow_1
.cd83	e8		inx				inx
.cd84	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$cd85					en = *	; remember here
>cd7e	05					.byte CL	;wh_CodeLength
.cd85	60		rts				rts
=52475					forth_dictionary_start = WordListLink ; END of FORTH-WORDLIST
=0					WordListLink .var 0
>cd86	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
>cd8b	05					.byte *-L1	;wh_NameLength	length of name
>cd8c	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd8e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd8f	08					.byte NN	;wh_Flags	dictionary flags
=52491					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd90	4c 1b a9	jmp $a91b			jmp Words
=3					CL	.var *-(WordListLink+wh_Xt)
=$cd93					en = *	; remember here
>cd8e	03					.byte CL	;wh_CodeLength
>cd93	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>cd9b	72 64 6c 69 73 74
>cda1	0e					.byte *-L1	;wh_NameLength	length of name
>cda2	0b cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cda4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cda5	08					.byte NN	;wh_Flags	dictionary flags
=52513					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cda6	4c 93 9e	jmp $9e93			jmp Forth_WordList
=3					CL	.var *-(WordListLink+wh_Xt)
=$cda9					en = *	; remember here
>cda4	03					.byte CL	;wh_CodeLength
>cda9	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
>cdae	05					.byte *-L1	;wh_NameLength	length of name
>cdaf	21 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cdb1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdb2	08					.byte NN	;wh_Flags	dictionary flags
=52526					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdb3	4c 8c 9f	jmp $9f8c			jmp Forth
=3					CL	.var *-(WordListLink+wh_Xt)
=$cdb6					en = *	; remember here
>cdb1	03					.byte CL	;wh_CodeLength
>cdb6	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>cdbe	72
>cdbf	09					.byte *-L1	;wh_NameLength	length of name
>cdc0	2e cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cdc2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdc3	08					.byte NN	;wh_Flags	dictionary flags
=52543					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdc4	4c 52 a0	jmp $a052			jmp Set_Order
=3					CL	.var *-(WordListLink+wh_Xt)
=$cdc7					en = *	; remember here
>cdc2	03					.byte CL	;wh_CodeLength
=52543					root_dictionary_start = WordListLink ; END of ROOT-WORDLIST
.cdc7					assembler:
=0					WordListLink .var 0
.cdc7					asm_r:
.cdc7	68		pla			pla		; pop RTS addr
.cdc8	a8		tay			tay
.cdc9	68		pla			pla
.cdca	20 09 ce	jsr $ce09		jsr asm_op	; compile opcode
.cdcd	b5 26		lda $26,x		lda DStack+1,x	; check range
.cdcf	f0 09		beq $cdda		beq _plus
.cdd1	c9 ff		cmp #$ff		cmp #$ff
.cdd3	f0 0b		beq $cde0		beq _minus
.cdd5	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cdd7	4c bf b2	jmp $b2bf		jmp ThrowA
.cdda	b5 25		lda $25,x	_plus:	lda DStack+0,x
.cddc	30 f7		bmi $cdd5		bmi _err
.cdde	10 04		bpl $cde4		bpl _store
.cde0	b5 25		lda $25,x	_minus:	lda DStack+0,x
.cde2	10 f1		bpl $cdd5		bpl _err
.cde4	4c e1 ca	jmp $cae1	_store:	jmp C_Comma
.cde7					asm_1:
.cde7	68		pla			pla		; pop RTS addr
.cde8	a8		tay			tay
.cde9	68		pla			pla
.cdea	20 09 ce	jsr $ce09		jsr asm_op	; compile opcode
.cded	b5 26		lda $26,x		lda DStack+1,x	; compile operand
.cdef	f0 04		beq $cdf5		beq _store	;   unsigned byte?
.cdf1	c9 ff		cmp #$ff		cmp #$ff	;   signed byte?
.cdf3	d0 03		bne $cdf8		bne _err
.cdf5	4c e1 ca	jmp $cae1	_store:	jmp C_Comma
.cdf8	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cdfa	4c bf b2	jmp $b2bf		jmp ThrowA
.cdfd					asm_2:
.cdfd	68		pla			pla		; pop RTS addr
.cdfe	a8		tay			tay
.cdff	68		pla			pla
.ce00	20 09 ce	jsr $ce09		jsr asm_op	; compile opcode
.ce03	4c fb ca	jmp $cafb		jmp Comma	; compile operand
.ce06					asm_0:
.ce06	68		pla			pla		; pop RTS addr
.ce07	a8		tay			tay
.ce08	68		pla			pla
.ce09	84 15		sty $15		asm_op:	sty tmp1+0	; save RTS addr
.ce0b	85 16		sta $16			sta tmp1+1
.ce0d	a0 01		ldy #$01		ldy #1		; get opcode byte
.ce0f	b1 15		lda ($15),y		lda (tmp1),y
.ce11	4c e4 ca	jmp $cae4		jmp C_Comma_A	; compile opcode
>ce14	61 64 63 2e 23			L1:	.text "adc.#"	;  name of word as a string, ending at wh_NameLastChar
>ce19	05					.byte *-L1	;wh_NameLength	length of name
>ce1a	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce1c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce1d	08					.byte NN	;wh_Flags	dictionary flags
=52633					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce1e	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$ce21					en = *	; remember here
>ce1c	03					.byte CL	;wh_CodeLength
>ce21	69					.byte $69
>ce22	61 64 63 2e 78			L1:	.text "adc.x"	;  name of word as a string, ending at wh_NameLastChar
>ce27	05					.byte *-L1	;wh_NameLength	length of name
>ce28	99 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce2a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce2b	08					.byte NN	;wh_Flags	dictionary flags
=52647					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce2c	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$ce2f					en = *	; remember here
>ce2a	03					.byte CL	;wh_CodeLength
>ce2f	7d					.byte $7d
>ce30	61 64 63 2e 79			L1:	.text "adc.y"	;  name of word as a string, ending at wh_NameLastChar
>ce35	05					.byte *-L1	;wh_NameLength	length of name
>ce36	a7 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce38	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce39	08					.byte NN	;wh_Flags	dictionary flags
=52661					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce3a	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$ce3d					en = *	; remember here
>ce38	03					.byte CL	;wh_CodeLength
>ce3d	79					.byte $79
>ce3e	61 64 63 2e 7a			L1:	.text "adc.z"	;  name of word as a string, ending at wh_NameLastChar
>ce43	05					.byte *-L1	;wh_NameLength	length of name
>ce44	b5 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce46	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce47	08					.byte NN	;wh_Flags	dictionary flags
=52675					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce48	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$ce4b					en = *	; remember here
>ce46	03					.byte CL	;wh_CodeLength
>ce4b	65					.byte $65
>ce4c	61 64 63 2e 7a 69 79		L1:	.text "adc.ziy"	;  name of word as a string, ending at wh_NameLastChar
>ce53	07					.byte *-L1	;wh_NameLength	length of name
>ce54	c3 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce56	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce57	08					.byte NN	;wh_Flags	dictionary flags
=52691					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce58	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$ce5b					en = *	; remember here
>ce56	03					.byte CL	;wh_CodeLength
>ce5b	71					.byte $71
>ce5c	61 64 63 2e 7a 78		L1:	.text "adc.zx"	;  name of word as a string, ending at wh_NameLastChar
>ce62	06					.byte *-L1	;wh_NameLength	length of name
>ce63	d3 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce65	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce66	08					.byte NN	;wh_Flags	dictionary flags
=52706					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce67	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$ce6a					en = *	; remember here
>ce65	03					.byte CL	;wh_CodeLength
>ce6a	75					.byte $75
>ce6b	61 64 63 2e 7a 78 69		L1:	.text "adc.zxi"	;  name of word as a string, ending at wh_NameLastChar
>ce72	07					.byte *-L1	;wh_NameLength	length of name
>ce73	e2 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce75	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce76	08					.byte NN	;wh_Flags	dictionary flags
=52722					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce77	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$ce7a					en = *	; remember here
>ce75	03					.byte CL	;wh_CodeLength
>ce7a	61					.byte $61
>ce7b	61 6e 64 2e			L1:	.text "and."	;  name of word as a string, ending at wh_NameLastChar
>ce7f	04					.byte *-L1	;wh_NameLength	length of name
>ce80	f2 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce82	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce83	08					.byte NN	;wh_Flags	dictionary flags
=52735					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce84	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$ce87					en = *	; remember here
>ce82	03					.byte CL	;wh_CodeLength
>ce87	2d					.byte $2d
>ce88	61 6e 64 2e 23			L1:	.text "and.#"	;  name of word as a string, ending at wh_NameLastChar
>ce8d	05					.byte *-L1	;wh_NameLength	length of name
>ce8e	ff cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce90	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce91	08					.byte NN	;wh_Flags	dictionary flags
=52749					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce92	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$ce95					en = *	; remember here
>ce90	03					.byte CL	;wh_CodeLength
>ce95	29					.byte $29
>ce96	61 6e 64 2e 78			L1:	.text "and.x"	;  name of word as a string, ending at wh_NameLastChar
>ce9b	05					.byte *-L1	;wh_NameLength	length of name
>ce9c	0d ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce9e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce9f	08					.byte NN	;wh_Flags	dictionary flags
=52763					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cea0	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cea3					en = *	; remember here
>ce9e	03					.byte CL	;wh_CodeLength
>cea3	3d					.byte $3d
>cea4	61 6e 64 2e 79			L1:	.text "and.y"	;  name of word as a string, ending at wh_NameLastChar
>cea9	05					.byte *-L1	;wh_NameLength	length of name
>ceaa	1b ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ceac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cead	08					.byte NN	;wh_Flags	dictionary flags
=52777					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ceae	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$ceb1					en = *	; remember here
>ceac	03					.byte CL	;wh_CodeLength
>ceb1	39					.byte $39
>ceb2	61 6e 64 2e 7a			L1:	.text "and.z"	;  name of word as a string, ending at wh_NameLastChar
>ceb7	05					.byte *-L1	;wh_NameLength	length of name
>ceb8	29 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ceba	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cebb	08					.byte NN	;wh_Flags	dictionary flags
=52791					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cebc	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cebf					en = *	; remember here
>ceba	03					.byte CL	;wh_CodeLength
>cebf	25					.byte $25
>cec0	61 6e 64 2e 7a 69 79		L1:	.text "and.ziy"	;  name of word as a string, ending at wh_NameLastChar
>cec7	07					.byte *-L1	;wh_NameLength	length of name
>cec8	37 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ceca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cecb	08					.byte NN	;wh_Flags	dictionary flags
=52807					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cecc	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cecf					en = *	; remember here
>ceca	03					.byte CL	;wh_CodeLength
>cecf	31					.byte $31
>ced0	61 6e 64 2e 7a 78		L1:	.text "and.zx"	;  name of word as a string, ending at wh_NameLastChar
>ced6	06					.byte *-L1	;wh_NameLength	length of name
>ced7	47 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ced9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ceda	08					.byte NN	;wh_Flags	dictionary flags
=52822					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cedb	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cede					en = *	; remember here
>ced9	03					.byte CL	;wh_CodeLength
>cede	35					.byte $35
>cedf	61 6e 64 2e 7a 78 69		L1:	.text "and.zxi"	;  name of word as a string, ending at wh_NameLastChar
>cee6	07					.byte *-L1	;wh_NameLength	length of name
>cee7	56 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cee9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ceea	08					.byte NN	;wh_Flags	dictionary flags
=52838					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ceeb	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$ceee					en = *	; remember here
>cee9	03					.byte CL	;wh_CodeLength
>ceee	21					.byte $21
>ceef	61 73 6c			L1:	.text "asl"	;  name of word as a string, ending at wh_NameLastChar
>cef2	03					.byte *-L1	;wh_NameLength	length of name
>cef3	66 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cef5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cef6	08					.byte NN	;wh_Flags	dictionary flags
=52850					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cef7	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cefa					en = *	; remember here
>cef5	03					.byte CL	;wh_CodeLength
>cefa	0e					.byte $0e
>cefb	61 73 6c 2e 61			L1:	.text "asl.a"	;  name of word as a string, ending at wh_NameLastChar
>cf00	05					.byte *-L1	;wh_NameLength	length of name
>cf01	72 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf03	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf04	08					.byte NN	;wh_Flags	dictionary flags
=52864					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf05	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf08					en = *	; remember here
>cf03	03					.byte CL	;wh_CodeLength
>cf08	0a					.byte $0a
>cf09	61 73 6c 2e 78			L1:	.text "asl.x"	;  name of word as a string, ending at wh_NameLastChar
>cf0e	05					.byte *-L1	;wh_NameLength	length of name
>cf0f	80 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf11	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf12	08					.byte NN	;wh_Flags	dictionary flags
=52878					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf13	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf16					en = *	; remember here
>cf11	03					.byte CL	;wh_CodeLength
>cf16	1e					.byte $1e
>cf17	61 73 6c 2e 7a			L1:	.text "asl.z"	;  name of word as a string, ending at wh_NameLastChar
>cf1c	05					.byte *-L1	;wh_NameLength	length of name
>cf1d	8e ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf1f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf20	08					.byte NN	;wh_Flags	dictionary flags
=52892					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf21	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf24					en = *	; remember here
>cf1f	03					.byte CL	;wh_CodeLength
>cf24	06					.byte $06
>cf25	61 73 6c 2e 7a 78		L1:	.text "asl.zx"	;  name of word as a string, ending at wh_NameLastChar
>cf2b	06					.byte *-L1	;wh_NameLength	length of name
>cf2c	9c ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf2e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf2f	08					.byte NN	;wh_Flags	dictionary flags
=52907					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf30	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf33					en = *	; remember here
>cf2e	03					.byte CL	;wh_CodeLength
>cf33	16					.byte $16
>cf34	62 63 63			L1:	.text "bcc"	;  name of word as a string, ending at wh_NameLastChar
>cf37	03					.byte *-L1	;wh_NameLength	length of name
>cf38	ab ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf3a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf3b	08					.byte NN	;wh_Flags	dictionary flags
=52919					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf3c	20 c7 cd	jsr $cdc7		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf3f					en = *	; remember here
>cf3a	03					.byte CL	;wh_CodeLength
>cf3f	90					.byte $90
>cf40	62 63 73			L1:	.text "bcs"	;  name of word as a string, ending at wh_NameLastChar
>cf43	03					.byte *-L1	;wh_NameLength	length of name
>cf44	b7 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf46	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf47	08					.byte NN	;wh_Flags	dictionary flags
=52931					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf48	20 c7 cd	jsr $cdc7		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf4b					en = *	; remember here
>cf46	03					.byte CL	;wh_CodeLength
>cf4b	b0					.byte $b0
>cf4c	62 65 71			L1:	.text "beq"	;  name of word as a string, ending at wh_NameLastChar
>cf4f	03					.byte *-L1	;wh_NameLength	length of name
>cf50	c3 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf52	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf53	08					.byte NN	;wh_Flags	dictionary flags
=52943					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf54	20 c7 cd	jsr $cdc7		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf57					en = *	; remember here
>cf52	03					.byte CL	;wh_CodeLength
>cf57	f0					.byte $f0
>cf58	62 69 74			L1:	.text "bit"	;  name of word as a string, ending at wh_NameLastChar
>cf5b	03					.byte *-L1	;wh_NameLength	length of name
>cf5c	cf ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf5e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf5f	08					.byte NN	;wh_Flags	dictionary flags
=52955					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf60	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf63					en = *	; remember here
>cf5e	03					.byte CL	;wh_CodeLength
>cf63	2c					.byte $2c
>cf64	62 69 74 2e 7a			L1:	.text "bit.z"	;  name of word as a string, ending at wh_NameLastChar
>cf69	05					.byte *-L1	;wh_NameLength	length of name
>cf6a	db ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf6c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf6d	08					.byte NN	;wh_Flags	dictionary flags
=52969					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf6e	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf71					en = *	; remember here
>cf6c	03					.byte CL	;wh_CodeLength
>cf71	24					.byte $24
>cf72	62 6d 69			L1:	.text "bmi"	;  name of word as a string, ending at wh_NameLastChar
>cf75	03					.byte *-L1	;wh_NameLength	length of name
>cf76	e9 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf78	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf79	08					.byte NN	;wh_Flags	dictionary flags
=52981					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf7a	20 c7 cd	jsr $cdc7		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf7d					en = *	; remember here
>cf78	03					.byte CL	;wh_CodeLength
>cf7d	30					.byte $30
>cf7e	62 6e 65			L1:	.text "bne"	;  name of word as a string, ending at wh_NameLastChar
>cf81	03					.byte *-L1	;wh_NameLength	length of name
>cf82	f5 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf84	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf85	08					.byte NN	;wh_Flags	dictionary flags
=52993					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf86	20 c7 cd	jsr $cdc7		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf89					en = *	; remember here
>cf84	03					.byte CL	;wh_CodeLength
>cf89	d0					.byte $d0
>cf8a	62 70 6c			L1:	.text "bpl"	;  name of word as a string, ending at wh_NameLastChar
>cf8d	03					.byte *-L1	;wh_NameLength	length of name
>cf8e	01 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf90	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf91	08					.byte NN	;wh_Flags	dictionary flags
=53005					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf92	20 c7 cd	jsr $cdc7		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf95					en = *	; remember here
>cf90	03					.byte CL	;wh_CodeLength
>cf95	10					.byte $10
>cf96	62 72 6b			L1:	.text "brk"	;  name of word as a string, ending at wh_NameLastChar
>cf99	03					.byte *-L1	;wh_NameLength	length of name
>cf9a	0d cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf9c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf9d	08					.byte NN	;wh_Flags	dictionary flags
=53017					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf9e	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfa1					en = *	; remember here
>cf9c	03					.byte CL	;wh_CodeLength
>cfa1	00					.byte $00
>cfa2	62 76 63			L1:	.text "bvc"	;  name of word as a string, ending at wh_NameLastChar
>cfa5	03					.byte *-L1	;wh_NameLength	length of name
>cfa6	19 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfa8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfa9	08					.byte NN	;wh_Flags	dictionary flags
=53029					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfaa	20 c7 cd	jsr $cdc7		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfad					en = *	; remember here
>cfa8	03					.byte CL	;wh_CodeLength
>cfad	50					.byte $50
>cfae	62 76 73			L1:	.text "bvs"	;  name of word as a string, ending at wh_NameLastChar
>cfb1	03					.byte *-L1	;wh_NameLength	length of name
>cfb2	25 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfb4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfb5	08					.byte NN	;wh_Flags	dictionary flags
=53041					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfb6	20 c7 cd	jsr $cdc7		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfb9					en = *	; remember here
>cfb4	03					.byte CL	;wh_CodeLength
>cfb9	70					.byte $70
>cfba	63 6c 63			L1:	.text "clc"	;  name of word as a string, ending at wh_NameLastChar
>cfbd	03					.byte *-L1	;wh_NameLength	length of name
>cfbe	31 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfc0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfc1	08					.byte NN	;wh_Flags	dictionary flags
=53053					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfc2	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfc5					en = *	; remember here
>cfc0	03					.byte CL	;wh_CodeLength
>cfc5	18					.byte $18
>cfc6	63 6c 64			L1:	.text "cld"	;  name of word as a string, ending at wh_NameLastChar
>cfc9	03					.byte *-L1	;wh_NameLength	length of name
>cfca	3d cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfcc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfcd	08					.byte NN	;wh_Flags	dictionary flags
=53065					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfce	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfd1					en = *	; remember here
>cfcc	03					.byte CL	;wh_CodeLength
>cfd1	d8					.byte $d8
>cfd2	63 6c 69			L1:	.text "cli"	;  name of word as a string, ending at wh_NameLastChar
>cfd5	03					.byte *-L1	;wh_NameLength	length of name
>cfd6	49 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfd8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfd9	08					.byte NN	;wh_Flags	dictionary flags
=53077					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfda	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfdd					en = *	; remember here
>cfd8	03					.byte CL	;wh_CodeLength
>cfdd	58					.byte $58
>cfde	63 6c 76			L1:	.text "clv"	;  name of word as a string, ending at wh_NameLastChar
>cfe1	03					.byte *-L1	;wh_NameLength	length of name
>cfe2	55 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfe4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfe5	08					.byte NN	;wh_Flags	dictionary flags
=53089					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfe6	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfe9					en = *	; remember here
>cfe4	03					.byte CL	;wh_CodeLength
>cfe9	b8					.byte $b8
>cfea	63 6d 70			L1:	.text "cmp"	;  name of word as a string, ending at wh_NameLastChar
>cfed	03					.byte *-L1	;wh_NameLength	length of name
>cfee	61 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cff0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cff1	08					.byte NN	;wh_Flags	dictionary flags
=53101					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cff2	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cff5					en = *	; remember here
>cff0	03					.byte CL	;wh_CodeLength
>cff5	cd					.byte $cd
>cff6	63 6d 70 2e 23			L1:	.text "cmp.#"	;  name of word as a string, ending at wh_NameLastChar
>cffb	05					.byte *-L1	;wh_NameLength	length of name
>cffc	6d cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cffe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfff	08					.byte NN	;wh_Flags	dictionary flags
=53115					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d000	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d003					en = *	; remember here
>cffe	03					.byte CL	;wh_CodeLength
>d003	c9					.byte $c9
>d004	63 6d 70 2e 78			L1:	.text "cmp.x"	;  name of word as a string, ending at wh_NameLastChar
>d009	05					.byte *-L1	;wh_NameLength	length of name
>d00a	7b cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d00c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d00d	08					.byte NN	;wh_Flags	dictionary flags
=53129					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d00e	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d011					en = *	; remember here
>d00c	03					.byte CL	;wh_CodeLength
>d011	dd					.byte $dd
>d012	63 6d 70 2e 79			L1:	.text "cmp.y"	;  name of word as a string, ending at wh_NameLastChar
>d017	05					.byte *-L1	;wh_NameLength	length of name
>d018	89 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d01a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d01b	08					.byte NN	;wh_Flags	dictionary flags
=53143					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d01c	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d01f					en = *	; remember here
>d01a	03					.byte CL	;wh_CodeLength
>d01f	d9					.byte $d9
>d020	63 6d 70 2e 7a			L1:	.text "cmp.z"	;  name of word as a string, ending at wh_NameLastChar
>d025	05					.byte *-L1	;wh_NameLength	length of name
>d026	97 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d028	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d029	08					.byte NN	;wh_Flags	dictionary flags
=53157					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d02a	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d02d					en = *	; remember here
>d028	03					.byte CL	;wh_CodeLength
>d02d	c5					.byte $c5
>d02e	63 6d 70 2e 7a 69 79		L1:	.text "cmp.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d035	07					.byte *-L1	;wh_NameLength	length of name
>d036	a5 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d038	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d039	08					.byte NN	;wh_Flags	dictionary flags
=53173					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d03a	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d03d					en = *	; remember here
>d038	03					.byte CL	;wh_CodeLength
>d03d	d1					.byte $d1
>d03e	63 6d 70 2e 7a 78		L1:	.text "cmp.zx"	;  name of word as a string, ending at wh_NameLastChar
>d044	06					.byte *-L1	;wh_NameLength	length of name
>d045	b5 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d047	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d048	08					.byte NN	;wh_Flags	dictionary flags
=53188					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d049	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d04c					en = *	; remember here
>d047	03					.byte CL	;wh_CodeLength
>d04c	d5					.byte $d5
>d04d	63 6d 70 2e 7a 78 69		L1:	.text "cmp.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d054	07					.byte *-L1	;wh_NameLength	length of name
>d055	c4 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d057	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d058	08					.byte NN	;wh_Flags	dictionary flags
=53204					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d059	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d05c					en = *	; remember here
>d057	03					.byte CL	;wh_CodeLength
>d05c	c1					.byte $c1
>d05d	63 70 78			L1:	.text "cpx"	;  name of word as a string, ending at wh_NameLastChar
>d060	03					.byte *-L1	;wh_NameLength	length of name
>d061	d4 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d063	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d064	08					.byte NN	;wh_Flags	dictionary flags
=53216					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d065	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d068					en = *	; remember here
>d063	03					.byte CL	;wh_CodeLength
>d068	ec					.byte $ec
>d069	63 70 78 2e 23			L1:	.text "cpx.#"	;  name of word as a string, ending at wh_NameLastChar
>d06e	05					.byte *-L1	;wh_NameLength	length of name
>d06f	e0 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d071	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d072	08					.byte NN	;wh_Flags	dictionary flags
=53230					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d073	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d076					en = *	; remember here
>d071	03					.byte CL	;wh_CodeLength
>d076	e0					.byte $e0
>d077	63 70 78 2e 7a			L1:	.text "cpx.z"	;  name of word as a string, ending at wh_NameLastChar
>d07c	05					.byte *-L1	;wh_NameLength	length of name
>d07d	ee cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d07f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d080	08					.byte NN	;wh_Flags	dictionary flags
=53244					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d081	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d084					en = *	; remember here
>d07f	03					.byte CL	;wh_CodeLength
>d084	e4					.byte $e4
>d085	63 70 79			L1:	.text "cpy"	;  name of word as a string, ending at wh_NameLastChar
>d088	03					.byte *-L1	;wh_NameLength	length of name
>d089	fc cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d08b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d08c	08					.byte NN	;wh_Flags	dictionary flags
=53256					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d08d	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d090					en = *	; remember here
>d08b	03					.byte CL	;wh_CodeLength
>d090	cc					.byte $cc
>d091	63 70 79 2e 23			L1:	.text "cpy.#"	;  name of word as a string, ending at wh_NameLastChar
>d096	05					.byte *-L1	;wh_NameLength	length of name
>d097	08 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d099	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d09a	08					.byte NN	;wh_Flags	dictionary flags
=53270					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d09b	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d09e					en = *	; remember here
>d099	03					.byte CL	;wh_CodeLength
>d09e	c0					.byte $c0
>d09f	63 70 79 2e 7a			L1:	.text "cpy.z"	;  name of word as a string, ending at wh_NameLastChar
>d0a4	05					.byte *-L1	;wh_NameLength	length of name
>d0a5	16 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0a7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0a8	08					.byte NN	;wh_Flags	dictionary flags
=53284					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0a9	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0ac					en = *	; remember here
>d0a7	03					.byte CL	;wh_CodeLength
>d0ac	c4					.byte $c4
>d0ad	64 65 63			L1:	.text "dec"	;  name of word as a string, ending at wh_NameLastChar
>d0b0	03					.byte *-L1	;wh_NameLength	length of name
>d0b1	24 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0b3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0b4	08					.byte NN	;wh_Flags	dictionary flags
=53296					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0b5	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0b8					en = *	; remember here
>d0b3	03					.byte CL	;wh_CodeLength
>d0b8	ce					.byte $ce
>d0b9	64 65 63 2e 61			L1:	.text "dec.a"	;  name of word as a string, ending at wh_NameLastChar
>d0be	05					.byte *-L1	;wh_NameLength	length of name
>d0bf	30 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0c2	08					.byte NN	;wh_Flags	dictionary flags
=53310					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0c3	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0c6					en = *	; remember here
>d0c1	03					.byte CL	;wh_CodeLength
>d0c6	3a					.byte $3a
>d0c7	64 65 63 2e 78			L1:	.text "dec.x"	;  name of word as a string, ending at wh_NameLastChar
>d0cc	05					.byte *-L1	;wh_NameLength	length of name
>d0cd	3e d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0cf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0d0	08					.byte NN	;wh_Flags	dictionary flags
=53324					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0d1	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0d4					en = *	; remember here
>d0cf	03					.byte CL	;wh_CodeLength
>d0d4	de					.byte $de
>d0d5	64 65 63 2e 7a			L1:	.text "dec.z"	;  name of word as a string, ending at wh_NameLastChar
>d0da	05					.byte *-L1	;wh_NameLength	length of name
>d0db	4c d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0de	08					.byte NN	;wh_Flags	dictionary flags
=53338					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0df	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0e2					en = *	; remember here
>d0dd	03					.byte CL	;wh_CodeLength
>d0e2	c6					.byte $c6
>d0e3	64 65 63 2e 7a 78		L1:	.text "dec.zx"	;  name of word as a string, ending at wh_NameLastChar
>d0e9	06					.byte *-L1	;wh_NameLength	length of name
>d0ea	5a d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0ec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0ed	08					.byte NN	;wh_Flags	dictionary flags
=53353					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0ee	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0f1					en = *	; remember here
>d0ec	03					.byte CL	;wh_CodeLength
>d0f1	d6					.byte $d6
>d0f2	64 65 78			L1:	.text "dex"	;  name of word as a string, ending at wh_NameLastChar
>d0f5	03					.byte *-L1	;wh_NameLength	length of name
>d0f6	69 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0f8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0f9	08					.byte NN	;wh_Flags	dictionary flags
=53365					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0fa	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0fd					en = *	; remember here
>d0f8	03					.byte CL	;wh_CodeLength
>d0fd	ca					.byte $ca
>d0fe	64 65 79			L1:	.text "dey"	;  name of word as a string, ending at wh_NameLastChar
>d101	03					.byte *-L1	;wh_NameLength	length of name
>d102	75 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d104	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d105	08					.byte NN	;wh_Flags	dictionary flags
=53377					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d106	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d109					en = *	; remember here
>d104	03					.byte CL	;wh_CodeLength
>d109	88					.byte $88
>d10a	65 6f 72			L1:	.text "eor"	;  name of word as a string, ending at wh_NameLastChar
>d10d	03					.byte *-L1	;wh_NameLength	length of name
>d10e	81 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d110	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d111	08					.byte NN	;wh_Flags	dictionary flags
=53389					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d112	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d115					en = *	; remember here
>d110	03					.byte CL	;wh_CodeLength
>d115	4d					.byte $4d
>d116	65 6f 72 2e 23			L1:	.text "eor.#"	;  name of word as a string, ending at wh_NameLastChar
>d11b	05					.byte *-L1	;wh_NameLength	length of name
>d11c	8d d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d11e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d11f	08					.byte NN	;wh_Flags	dictionary flags
=53403					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d120	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d123					en = *	; remember here
>d11e	03					.byte CL	;wh_CodeLength
>d123	49					.byte $49
>d124	65 6f 72 2e 78			L1:	.text "eor.x"	;  name of word as a string, ending at wh_NameLastChar
>d129	05					.byte *-L1	;wh_NameLength	length of name
>d12a	9b d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d12c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d12d	08					.byte NN	;wh_Flags	dictionary flags
=53417					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d12e	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d131					en = *	; remember here
>d12c	03					.byte CL	;wh_CodeLength
>d131	5d					.byte $5d
>d132	65 6f 72 2e 79			L1:	.text "eor.y"	;  name of word as a string, ending at wh_NameLastChar
>d137	05					.byte *-L1	;wh_NameLength	length of name
>d138	a9 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d13a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d13b	08					.byte NN	;wh_Flags	dictionary flags
=53431					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d13c	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d13f					en = *	; remember here
>d13a	03					.byte CL	;wh_CodeLength
>d13f	59					.byte $59
>d140	65 6f 72 2e 7a			L1:	.text "eor.z"	;  name of word as a string, ending at wh_NameLastChar
>d145	05					.byte *-L1	;wh_NameLength	length of name
>d146	b7 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d148	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d149	08					.byte NN	;wh_Flags	dictionary flags
=53445					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d14a	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d14d					en = *	; remember here
>d148	03					.byte CL	;wh_CodeLength
>d14d	45					.byte $45
>d14e	65 6f 72 2e 7a 69 79		L1:	.text "eor.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d155	07					.byte *-L1	;wh_NameLength	length of name
>d156	c5 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d158	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d159	08					.byte NN	;wh_Flags	dictionary flags
=53461					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d15a	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d15d					en = *	; remember here
>d158	03					.byte CL	;wh_CodeLength
>d15d	51					.byte $51
>d15e	65 6f 72 2e 7a 78		L1:	.text "eor.zx"	;  name of word as a string, ending at wh_NameLastChar
>d164	06					.byte *-L1	;wh_NameLength	length of name
>d165	d5 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d167	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d168	08					.byte NN	;wh_Flags	dictionary flags
=53476					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d169	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d16c					en = *	; remember here
>d167	03					.byte CL	;wh_CodeLength
>d16c	55					.byte $55
>d16d	65 6f 72 2e 7a 78 69		L1:	.text "eor.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d174	07					.byte *-L1	;wh_NameLength	length of name
>d175	e4 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d177	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d178	08					.byte NN	;wh_Flags	dictionary flags
=53492					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d179	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d17c					en = *	; remember here
>d177	03					.byte CL	;wh_CodeLength
>d17c	41					.byte $41
>d17d	69 6e 63			L1:	.text "inc"	;  name of word as a string, ending at wh_NameLastChar
>d180	03					.byte *-L1	;wh_NameLength	length of name
>d181	f4 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d183	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d184	08					.byte NN	;wh_Flags	dictionary flags
=53504					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d185	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d188					en = *	; remember here
>d183	03					.byte CL	;wh_CodeLength
>d188	ee					.byte $ee
>d189	69 6e 63 2e 61			L1:	.text "inc.a"	;  name of word as a string, ending at wh_NameLastChar
>d18e	05					.byte *-L1	;wh_NameLength	length of name
>d18f	00 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d191	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d192	08					.byte NN	;wh_Flags	dictionary flags
=53518					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d193	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d196					en = *	; remember here
>d191	03					.byte CL	;wh_CodeLength
>d196	1a					.byte $1a
>d197	69 6e 63 2e 78			L1:	.text "inc.x"	;  name of word as a string, ending at wh_NameLastChar
>d19c	05					.byte *-L1	;wh_NameLength	length of name
>d19d	0e d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d19f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1a0	08					.byte NN	;wh_Flags	dictionary flags
=53532					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1a1	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1a4					en = *	; remember here
>d19f	03					.byte CL	;wh_CodeLength
>d1a4	fe					.byte $fe
>d1a5	69 6e 63 2e 7a			L1:	.text "inc.z"	;  name of word as a string, ending at wh_NameLastChar
>d1aa	05					.byte *-L1	;wh_NameLength	length of name
>d1ab	1c d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1ad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1ae	08					.byte NN	;wh_Flags	dictionary flags
=53546					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1af	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1b2					en = *	; remember here
>d1ad	03					.byte CL	;wh_CodeLength
>d1b2	e6					.byte $e6
>d1b3	69 6e 63 2e 7a 78		L1:	.text "inc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d1b9	06					.byte *-L1	;wh_NameLength	length of name
>d1ba	2a d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1bd	08					.byte NN	;wh_Flags	dictionary flags
=53561					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1be	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1c1					en = *	; remember here
>d1bc	03					.byte CL	;wh_CodeLength
>d1c1	f6					.byte $f6
>d1c2	69 6e 78			L1:	.text "inx"	;  name of word as a string, ending at wh_NameLastChar
>d1c5	03					.byte *-L1	;wh_NameLength	length of name
>d1c6	39 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1c8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1c9	08					.byte NN	;wh_Flags	dictionary flags
=53573					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1ca	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1cd					en = *	; remember here
>d1c8	03					.byte CL	;wh_CodeLength
>d1cd	e8					.byte $e8
>d1ce	69 6e 79			L1:	.text "iny"	;  name of word as a string, ending at wh_NameLastChar
>d1d1	03					.byte *-L1	;wh_NameLength	length of name
>d1d2	45 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1d4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1d5	08					.byte NN	;wh_Flags	dictionary flags
=53585					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1d6	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1d9					en = *	; remember here
>d1d4	03					.byte CL	;wh_CodeLength
>d1d9	c8					.byte $c8
>d1da	6a 6d 70			L1:	.text "jmp"	;  name of word as a string, ending at wh_NameLastChar
>d1dd	03					.byte *-L1	;wh_NameLength	length of name
>d1de	51 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1e0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1e1	08					.byte NN	;wh_Flags	dictionary flags
=53597					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1e2	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1e5					en = *	; remember here
>d1e0	03					.byte CL	;wh_CodeLength
>d1e5	4c					.byte $4c
>d1e6	6a 6d 70 2e 69			L1:	.text "jmp.i"	;  name of word as a string, ending at wh_NameLastChar
>d1eb	05					.byte *-L1	;wh_NameLength	length of name
>d1ec	5d d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1ef	08					.byte NN	;wh_Flags	dictionary flags
=53611					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1f0	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1f3					en = *	; remember here
>d1ee	03					.byte CL	;wh_CodeLength
>d1f3	6c					.byte $6c
>d1f4	6a 73 72			L1:	.text "jsr"	;  name of word as a string, ending at wh_NameLastChar
>d1f7	03					.byte *-L1	;wh_NameLength	length of name
>d1f8	6b d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1fa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1fb	08					.byte NN	;wh_Flags	dictionary flags
=53623					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1fc	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1ff					en = *	; remember here
>d1fa	03					.byte CL	;wh_CodeLength
>d1ff	20					.byte $20
>d200	6c 64 61			L1:	.text "lda"	;  name of word as a string, ending at wh_NameLastChar
>d203	03					.byte *-L1	;wh_NameLength	length of name
>d204	77 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d206	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d207	08					.byte NN	;wh_Flags	dictionary flags
=53635					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d208	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d20b					en = *	; remember here
>d206	03					.byte CL	;wh_CodeLength
>d20b	ad					.byte $ad
>d20c	6c 64 61 2e 23			L1:	.text "lda.#"	;  name of word as a string, ending at wh_NameLastChar
>d211	05					.byte *-L1	;wh_NameLength	length of name
>d212	83 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d214	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d215	08					.byte NN	;wh_Flags	dictionary flags
=53649					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d216	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d219					en = *	; remember here
>d214	03					.byte CL	;wh_CodeLength
>d219	a9					.byte $a9
>d21a	6c 64 61 2e 78			L1:	.text "lda.x"	;  name of word as a string, ending at wh_NameLastChar
>d21f	05					.byte *-L1	;wh_NameLength	length of name
>d220	91 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d222	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d223	08					.byte NN	;wh_Flags	dictionary flags
=53663					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d224	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d227					en = *	; remember here
>d222	03					.byte CL	;wh_CodeLength
>d227	bd					.byte $bd
>d228	6c 64 61 2e 79			L1:	.text "lda.y"	;  name of word as a string, ending at wh_NameLastChar
>d22d	05					.byte *-L1	;wh_NameLength	length of name
>d22e	9f d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d230	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d231	08					.byte NN	;wh_Flags	dictionary flags
=53677					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d232	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d235					en = *	; remember here
>d230	03					.byte CL	;wh_CodeLength
>d235	b9					.byte $b9
>d236	6c 64 61 2e 7a			L1:	.text "lda.z"	;  name of word as a string, ending at wh_NameLastChar
>d23b	05					.byte *-L1	;wh_NameLength	length of name
>d23c	ad d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d23e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d23f	08					.byte NN	;wh_Flags	dictionary flags
=53691					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d240	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d243					en = *	; remember here
>d23e	03					.byte CL	;wh_CodeLength
>d243	a5					.byte $a5
>d244	6c 64 61 2e 7a 69 79		L1:	.text "lda.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d24b	07					.byte *-L1	;wh_NameLength	length of name
>d24c	bb d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d24e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d24f	08					.byte NN	;wh_Flags	dictionary flags
=53707					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d250	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d253					en = *	; remember here
>d24e	03					.byte CL	;wh_CodeLength
>d253	b1					.byte $b1
>d254	6c 64 61 2e 7a 78		L1:	.text "lda.zx"	;  name of word as a string, ending at wh_NameLastChar
>d25a	06					.byte *-L1	;wh_NameLength	length of name
>d25b	cb d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d25d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d25e	08					.byte NN	;wh_Flags	dictionary flags
=53722					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d25f	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d262					en = *	; remember here
>d25d	03					.byte CL	;wh_CodeLength
>d262	b5					.byte $b5
>d263	6c 64 61 2e 7a 78 69		L1:	.text "lda.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d26a	07					.byte *-L1	;wh_NameLength	length of name
>d26b	da d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d26d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d26e	08					.byte NN	;wh_Flags	dictionary flags
=53738					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d26f	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d272					en = *	; remember here
>d26d	03					.byte CL	;wh_CodeLength
>d272	a1					.byte $a1
>d273	6c 64 78			L1:	.text "ldx"	;  name of word as a string, ending at wh_NameLastChar
>d276	03					.byte *-L1	;wh_NameLength	length of name
>d277	ea d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d279	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d27a	08					.byte NN	;wh_Flags	dictionary flags
=53750					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d27b	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d27e					en = *	; remember here
>d279	03					.byte CL	;wh_CodeLength
>d27e	ae					.byte $ae
>d27f	6c 64 78 2e 23			L1:	.text "ldx.#"	;  name of word as a string, ending at wh_NameLastChar
>d284	05					.byte *-L1	;wh_NameLength	length of name
>d285	f6 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d287	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d288	08					.byte NN	;wh_Flags	dictionary flags
=53764					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d289	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d28c					en = *	; remember here
>d287	03					.byte CL	;wh_CodeLength
>d28c	a2					.byte $a2
>d28d	6c 64 78 2e 79			L1:	.text "ldx.y"	;  name of word as a string, ending at wh_NameLastChar
>d292	05					.byte *-L1	;wh_NameLength	length of name
>d293	04 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d295	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d296	08					.byte NN	;wh_Flags	dictionary flags
=53778					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d297	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d29a					en = *	; remember here
>d295	03					.byte CL	;wh_CodeLength
>d29a	be					.byte $be
>d29b	6c 64 78 2e 7a			L1:	.text "ldx.z"	;  name of word as a string, ending at wh_NameLastChar
>d2a0	05					.byte *-L1	;wh_NameLength	length of name
>d2a1	12 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2a3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2a4	08					.byte NN	;wh_Flags	dictionary flags
=53792					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2a5	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2a8					en = *	; remember here
>d2a3	03					.byte CL	;wh_CodeLength
>d2a8	a6					.byte $a6
>d2a9	6c 64 78 2e 7a 79		L1:	.text "ldx.zy"	;  name of word as a string, ending at wh_NameLastChar
>d2af	06					.byte *-L1	;wh_NameLength	length of name
>d2b0	20 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2b3	08					.byte NN	;wh_Flags	dictionary flags
=53807					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2b4	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2b7					en = *	; remember here
>d2b2	03					.byte CL	;wh_CodeLength
>d2b7	b6					.byte $b6
>d2b8	6c 64 79			L1:	.text "ldy"	;  name of word as a string, ending at wh_NameLastChar
>d2bb	03					.byte *-L1	;wh_NameLength	length of name
>d2bc	2f d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2bf	08					.byte NN	;wh_Flags	dictionary flags
=53819					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2c0	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2c3					en = *	; remember here
>d2be	03					.byte CL	;wh_CodeLength
>d2c3	ac					.byte $ac
>d2c4	6c 64 79 2e 23			L1:	.text "ldy.#"	;  name of word as a string, ending at wh_NameLastChar
>d2c9	05					.byte *-L1	;wh_NameLength	length of name
>d2ca	3b d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2cd	08					.byte NN	;wh_Flags	dictionary flags
=53833					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2ce	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2d1					en = *	; remember here
>d2cc	03					.byte CL	;wh_CodeLength
>d2d1	a0					.byte $a0
>d2d2	6c 64 79 2e 78			L1:	.text "ldy.x"	;  name of word as a string, ending at wh_NameLastChar
>d2d7	05					.byte *-L1	;wh_NameLength	length of name
>d2d8	49 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2da	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2db	08					.byte NN	;wh_Flags	dictionary flags
=53847					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2dc	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2df					en = *	; remember here
>d2da	03					.byte CL	;wh_CodeLength
>d2df	bc					.byte $bc
>d2e0	6c 64 79 2e 7a			L1:	.text "ldy.z"	;  name of word as a string, ending at wh_NameLastChar
>d2e5	05					.byte *-L1	;wh_NameLength	length of name
>d2e6	57 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2e8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2e9	08					.byte NN	;wh_Flags	dictionary flags
=53861					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2ea	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2ed					en = *	; remember here
>d2e8	03					.byte CL	;wh_CodeLength
>d2ed	a4					.byte $a4
>d2ee	6c 64 79 2e 7a 78		L1:	.text "ldy.zx"	;  name of word as a string, ending at wh_NameLastChar
>d2f4	06					.byte *-L1	;wh_NameLength	length of name
>d2f5	65 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2f8	08					.byte NN	;wh_Flags	dictionary flags
=53876					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2f9	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2fc					en = *	; remember here
>d2f7	03					.byte CL	;wh_CodeLength
>d2fc	b4					.byte $b4
>d2fd	6c 73 72			L1:	.text "lsr"	;  name of word as a string, ending at wh_NameLastChar
>d300	03					.byte *-L1	;wh_NameLength	length of name
>d301	74 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d303	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d304	08					.byte NN	;wh_Flags	dictionary flags
=53888					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d305	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d308					en = *	; remember here
>d303	03					.byte CL	;wh_CodeLength
>d308	4e					.byte $4e
>d309	6c 73 72 2e 61			L1:	.text "lsr.a"	;  name of word as a string, ending at wh_NameLastChar
>d30e	05					.byte *-L1	;wh_NameLength	length of name
>d30f	80 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d311	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d312	08					.byte NN	;wh_Flags	dictionary flags
=53902					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d313	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d316					en = *	; remember here
>d311	03					.byte CL	;wh_CodeLength
>d316	4a					.byte $4a
>d317	6c 73 72 2e 78			L1:	.text "lsr.x"	;  name of word as a string, ending at wh_NameLastChar
>d31c	05					.byte *-L1	;wh_NameLength	length of name
>d31d	8e d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d31f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d320	08					.byte NN	;wh_Flags	dictionary flags
=53916					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d321	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d324					en = *	; remember here
>d31f	03					.byte CL	;wh_CodeLength
>d324	5e					.byte $5e
>d325	6c 73 72 2e 7a			L1:	.text "lsr.z"	;  name of word as a string, ending at wh_NameLastChar
>d32a	05					.byte *-L1	;wh_NameLength	length of name
>d32b	9c d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d32d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d32e	08					.byte NN	;wh_Flags	dictionary flags
=53930					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d32f	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d332					en = *	; remember here
>d32d	03					.byte CL	;wh_CodeLength
>d332	46					.byte $46
>d333	6c 73 72 2e 7a 78		L1:	.text "lsr.zx"	;  name of word as a string, ending at wh_NameLastChar
>d339	06					.byte *-L1	;wh_NameLength	length of name
>d33a	aa d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d33c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d33d	08					.byte NN	;wh_Flags	dictionary flags
=53945					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d33e	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d341					en = *	; remember here
>d33c	03					.byte CL	;wh_CodeLength
>d341	56					.byte $56
>d342	6e 6f 70			L1:	.text "nop"	;  name of word as a string, ending at wh_NameLastChar
>d345	03					.byte *-L1	;wh_NameLength	length of name
>d346	b9 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d348	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d349	08					.byte NN	;wh_Flags	dictionary flags
=53957					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d34a	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d34d					en = *	; remember here
>d348	03					.byte CL	;wh_CodeLength
>d34d	ea					.byte $ea
>d34e	6f 72 61			L1:	.text "ora"	;  name of word as a string, ending at wh_NameLastChar
>d351	03					.byte *-L1	;wh_NameLength	length of name
>d352	c5 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d354	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d355	08					.byte NN	;wh_Flags	dictionary flags
=53969					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d356	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d359					en = *	; remember here
>d354	03					.byte CL	;wh_CodeLength
>d359	0d					.byte $0d
>d35a	6f 72 61 2e 23			L1:	.text "ora.#"	;  name of word as a string, ending at wh_NameLastChar
>d35f	05					.byte *-L1	;wh_NameLength	length of name
>d360	d1 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d362	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d363	08					.byte NN	;wh_Flags	dictionary flags
=53983					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d364	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d367					en = *	; remember here
>d362	03					.byte CL	;wh_CodeLength
>d367	09					.byte $09
>d368	6f 72 61 2e 78			L1:	.text "ora.x"	;  name of word as a string, ending at wh_NameLastChar
>d36d	05					.byte *-L1	;wh_NameLength	length of name
>d36e	df d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d370	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d371	08					.byte NN	;wh_Flags	dictionary flags
=53997					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d372	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d375					en = *	; remember here
>d370	03					.byte CL	;wh_CodeLength
>d375	1d					.byte $1d
>d376	6f 72 61 2e 79			L1:	.text "ora.y"	;  name of word as a string, ending at wh_NameLastChar
>d37b	05					.byte *-L1	;wh_NameLength	length of name
>d37c	ed d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d37e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d37f	08					.byte NN	;wh_Flags	dictionary flags
=54011					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d380	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d383					en = *	; remember here
>d37e	03					.byte CL	;wh_CodeLength
>d383	19					.byte $19
>d384	6f 72 61 2e 7a			L1:	.text "ora.z"	;  name of word as a string, ending at wh_NameLastChar
>d389	05					.byte *-L1	;wh_NameLength	length of name
>d38a	fb d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d38c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d38d	08					.byte NN	;wh_Flags	dictionary flags
=54025					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d38e	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d391					en = *	; remember here
>d38c	03					.byte CL	;wh_CodeLength
>d391	05					.byte $05
>d392	6f 72 61 2e 7a 69 79		L1:	.text "ora.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d399	07					.byte *-L1	;wh_NameLength	length of name
>d39a	09 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d39c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d39d	08					.byte NN	;wh_Flags	dictionary flags
=54041					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d39e	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3a1					en = *	; remember here
>d39c	03					.byte CL	;wh_CodeLength
>d3a1	11					.byte $11
>d3a2	6f 72 61 2e 7a 78		L1:	.text "ora.zx"	;  name of word as a string, ending at wh_NameLastChar
>d3a8	06					.byte *-L1	;wh_NameLength	length of name
>d3a9	19 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3ac	08					.byte NN	;wh_Flags	dictionary flags
=54056					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3ad	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3b0					en = *	; remember here
>d3ab	03					.byte CL	;wh_CodeLength
>d3b0	15					.byte $15
>d3b1	6f 72 61 2e 7a 78 69		L1:	.text "ora.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d3b8	07					.byte *-L1	;wh_NameLength	length of name
>d3b9	28 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3bc	08					.byte NN	;wh_Flags	dictionary flags
=54072					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3bd	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3c0					en = *	; remember here
>d3bb	03					.byte CL	;wh_CodeLength
>d3c0	01					.byte $01
>d3c1	70 68 61			L1:	.text "pha"	;  name of word as a string, ending at wh_NameLastChar
>d3c4	03					.byte *-L1	;wh_NameLength	length of name
>d3c5	38 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3c8	08					.byte NN	;wh_Flags	dictionary flags
=54084					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3c9	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3cc					en = *	; remember here
>d3c7	03					.byte CL	;wh_CodeLength
>d3cc	48					.byte $48
>d3cd	70 68 70			L1:	.text "php"	;  name of word as a string, ending at wh_NameLastChar
>d3d0	03					.byte *-L1	;wh_NameLength	length of name
>d3d1	44 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3d3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3d4	08					.byte NN	;wh_Flags	dictionary flags
=54096					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3d5	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3d8					en = *	; remember here
>d3d3	03					.byte CL	;wh_CodeLength
>d3d8	08					.byte $08
>d3d9	70 6c 61			L1:	.text "pla"	;  name of word as a string, ending at wh_NameLastChar
>d3dc	03					.byte *-L1	;wh_NameLength	length of name
>d3dd	50 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3df	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3e0	08					.byte NN	;wh_Flags	dictionary flags
=54108					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3e1	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3e4					en = *	; remember here
>d3df	03					.byte CL	;wh_CodeLength
>d3e4	68					.byte $68
>d3e5	70 6c 70			L1:	.text "plp"	;  name of word as a string, ending at wh_NameLastChar
>d3e8	03					.byte *-L1	;wh_NameLength	length of name
>d3e9	5c d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3eb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3ec	08					.byte NN	;wh_Flags	dictionary flags
=54120					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3ed	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3f0					en = *	; remember here
>d3eb	03					.byte CL	;wh_CodeLength
>d3f0	28					.byte $28
>d3f1	72 6f 6c			L1:	.text "rol"	;  name of word as a string, ending at wh_NameLastChar
>d3f4	03					.byte *-L1	;wh_NameLength	length of name
>d3f5	68 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3f8	08					.byte NN	;wh_Flags	dictionary flags
=54132					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3f9	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3fc					en = *	; remember here
>d3f7	03					.byte CL	;wh_CodeLength
>d3fc	2e					.byte $2e
>d3fd	72 6f 6c 2e 61			L1:	.text "rol.a"	;  name of word as a string, ending at wh_NameLastChar
>d402	05					.byte *-L1	;wh_NameLength	length of name
>d403	74 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d405	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d406	08					.byte NN	;wh_Flags	dictionary flags
=54146					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d407	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d40a					en = *	; remember here
>d405	03					.byte CL	;wh_CodeLength
>d40a	2a					.byte $2a
>d40b	72 6f 6c 2e 78			L1:	.text "rol.x"	;  name of word as a string, ending at wh_NameLastChar
>d410	05					.byte *-L1	;wh_NameLength	length of name
>d411	82 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d413	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d414	08					.byte NN	;wh_Flags	dictionary flags
=54160					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d415	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d418					en = *	; remember here
>d413	03					.byte CL	;wh_CodeLength
>d418	3e					.byte $3e
>d419	72 6f 6c 2e 7a			L1:	.text "rol.z"	;  name of word as a string, ending at wh_NameLastChar
>d41e	05					.byte *-L1	;wh_NameLength	length of name
>d41f	90 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d421	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d422	08					.byte NN	;wh_Flags	dictionary flags
=54174					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d423	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d426					en = *	; remember here
>d421	03					.byte CL	;wh_CodeLength
>d426	26					.byte $26
>d427	72 6f 6c 2e 7a 78		L1:	.text "rol.zx"	;  name of word as a string, ending at wh_NameLastChar
>d42d	06					.byte *-L1	;wh_NameLength	length of name
>d42e	9e d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d430	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d431	08					.byte NN	;wh_Flags	dictionary flags
=54189					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d432	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d435					en = *	; remember here
>d430	03					.byte CL	;wh_CodeLength
>d435	36					.byte $36
>d436	72 6f 72			L1:	.text "ror"	;  name of word as a string, ending at wh_NameLastChar
>d439	03					.byte *-L1	;wh_NameLength	length of name
>d43a	ad d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d43c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d43d	08					.byte NN	;wh_Flags	dictionary flags
=54201					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d43e	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d441					en = *	; remember here
>d43c	03					.byte CL	;wh_CodeLength
>d441	6e					.byte $6e
>d442	72 6f 72 2e 61			L1:	.text "ror.a"	;  name of word as a string, ending at wh_NameLastChar
>d447	05					.byte *-L1	;wh_NameLength	length of name
>d448	b9 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d44a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d44b	08					.byte NN	;wh_Flags	dictionary flags
=54215					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d44c	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d44f					en = *	; remember here
>d44a	03					.byte CL	;wh_CodeLength
>d44f	6a					.byte $6a
>d450	72 6f 72 2e 78			L1:	.text "ror.x"	;  name of word as a string, ending at wh_NameLastChar
>d455	05					.byte *-L1	;wh_NameLength	length of name
>d456	c7 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d458	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d459	08					.byte NN	;wh_Flags	dictionary flags
=54229					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d45a	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d45d					en = *	; remember here
>d458	03					.byte CL	;wh_CodeLength
>d45d	7e					.byte $7e
>d45e	72 6f 72 2e 7a			L1:	.text "ror.z"	;  name of word as a string, ending at wh_NameLastChar
>d463	05					.byte *-L1	;wh_NameLength	length of name
>d464	d5 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d466	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d467	08					.byte NN	;wh_Flags	dictionary flags
=54243					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d468	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d46b					en = *	; remember here
>d466	03					.byte CL	;wh_CodeLength
>d46b	66					.byte $66
>d46c	72 6f 72 2e 7a 78		L1:	.text "ror.zx"	;  name of word as a string, ending at wh_NameLastChar
>d472	06					.byte *-L1	;wh_NameLength	length of name
>d473	e3 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d475	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d476	08					.byte NN	;wh_Flags	dictionary flags
=54258					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d477	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d47a					en = *	; remember here
>d475	03					.byte CL	;wh_CodeLength
>d47a	76					.byte $76
>d47b	72 74 69			L1:	.text "rti"	;  name of word as a string, ending at wh_NameLastChar
>d47e	03					.byte *-L1	;wh_NameLength	length of name
>d47f	f2 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d481	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d482	08					.byte NN	;wh_Flags	dictionary flags
=54270					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d483	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d486					en = *	; remember here
>d481	03					.byte CL	;wh_CodeLength
>d486	40					.byte $40
>d487	72 74 73			L1:	.text "rts"	;  name of word as a string, ending at wh_NameLastChar
>d48a	03					.byte *-L1	;wh_NameLength	length of name
>d48b	fe d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d48d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d48e	08					.byte NN	;wh_Flags	dictionary flags
=54282					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d48f	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d492					en = *	; remember here
>d48d	03					.byte CL	;wh_CodeLength
>d492	60					.byte $60
>d493	73 62 63			L1:	.text "sbc"	;  name of word as a string, ending at wh_NameLastChar
>d496	03					.byte *-L1	;wh_NameLength	length of name
>d497	0a d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d499	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d49a	08					.byte NN	;wh_Flags	dictionary flags
=54294					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d49b	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d49e					en = *	; remember here
>d499	03					.byte CL	;wh_CodeLength
>d49e	ed					.byte $ed
>d49f	73 62 63 2e 23			L1:	.text "sbc.#"	;  name of word as a string, ending at wh_NameLastChar
>d4a4	05					.byte *-L1	;wh_NameLength	length of name
>d4a5	16 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4a7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4a8	08					.byte NN	;wh_Flags	dictionary flags
=54308					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4a9	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4ac					en = *	; remember here
>d4a7	03					.byte CL	;wh_CodeLength
>d4ac	e9					.byte $e9
>d4ad	73 62 63 2e 78			L1:	.text "sbc.x"	;  name of word as a string, ending at wh_NameLastChar
>d4b2	05					.byte *-L1	;wh_NameLength	length of name
>d4b3	24 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4b5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4b6	08					.byte NN	;wh_Flags	dictionary flags
=54322					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4b7	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4ba					en = *	; remember here
>d4b5	03					.byte CL	;wh_CodeLength
>d4ba	fd					.byte $fd
>d4bb	73 62 63 2e 79			L1:	.text "sbc.y"	;  name of word as a string, ending at wh_NameLastChar
>d4c0	05					.byte *-L1	;wh_NameLength	length of name
>d4c1	32 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4c4	08					.byte NN	;wh_Flags	dictionary flags
=54336					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4c5	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4c8					en = *	; remember here
>d4c3	03					.byte CL	;wh_CodeLength
>d4c8	f9					.byte $f9
>d4c9	73 62 63 2e 7a			L1:	.text "sbc.z"	;  name of word as a string, ending at wh_NameLastChar
>d4ce	05					.byte *-L1	;wh_NameLength	length of name
>d4cf	40 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4d2	08					.byte NN	;wh_Flags	dictionary flags
=54350					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4d3	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4d6					en = *	; remember here
>d4d1	03					.byte CL	;wh_CodeLength
>d4d6	e5					.byte $e5
>d4d7	73 62 63 2e 7a 69 79		L1:	.text "sbc.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d4de	07					.byte *-L1	;wh_NameLength	length of name
>d4df	4e d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4e2	08					.byte NN	;wh_Flags	dictionary flags
=54366					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4e3	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4e6					en = *	; remember here
>d4e1	03					.byte CL	;wh_CodeLength
>d4e6	f1					.byte $f1
>d4e7	73 62 63 2e 7a 78		L1:	.text "sbc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d4ed	06					.byte *-L1	;wh_NameLength	length of name
>d4ee	5e d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4f1	08					.byte NN	;wh_Flags	dictionary flags
=54381					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4f2	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4f5					en = *	; remember here
>d4f0	03					.byte CL	;wh_CodeLength
>d4f5	f5					.byte $f5
>d4f6	73 62 63 2e 7a 78 69		L1:	.text "sbc.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d4fd	07					.byte *-L1	;wh_NameLength	length of name
>d4fe	6d d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d500	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d501	08					.byte NN	;wh_Flags	dictionary flags
=54397					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d502	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d505					en = *	; remember here
>d500	03					.byte CL	;wh_CodeLength
>d505	e1					.byte $e1
>d506	73 65 63			L1:	.text "sec"	;  name of word as a string, ending at wh_NameLastChar
>d509	03					.byte *-L1	;wh_NameLength	length of name
>d50a	7d d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d50c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d50d	08					.byte NN	;wh_Flags	dictionary flags
=54409					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d50e	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d511					en = *	; remember here
>d50c	03					.byte CL	;wh_CodeLength
>d511	38					.byte $38
>d512	73 65 64			L1:	.text "sed"	;  name of word as a string, ending at wh_NameLastChar
>d515	03					.byte *-L1	;wh_NameLength	length of name
>d516	89 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d518	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d519	08					.byte NN	;wh_Flags	dictionary flags
=54421					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d51a	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d51d					en = *	; remember here
>d518	03					.byte CL	;wh_CodeLength
>d51d	f8					.byte $f8
>d51e	73 65 69			L1:	.text "sei"	;  name of word as a string, ending at wh_NameLastChar
>d521	03					.byte *-L1	;wh_NameLength	length of name
>d522	95 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d524	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d525	08					.byte NN	;wh_Flags	dictionary flags
=54433					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d526	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d529					en = *	; remember here
>d524	03					.byte CL	;wh_CodeLength
>d529	78					.byte $78
>d52a	73 74 61			L1:	.text "sta"	;  name of word as a string, ending at wh_NameLastChar
>d52d	03					.byte *-L1	;wh_NameLength	length of name
>d52e	a1 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d530	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d531	08					.byte NN	;wh_Flags	dictionary flags
=54445					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d532	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d535					en = *	; remember here
>d530	03					.byte CL	;wh_CodeLength
>d535	8d					.byte $8d
>d536	73 74 61 2e 78			L1:	.text "sta.x"	;  name of word as a string, ending at wh_NameLastChar
>d53b	05					.byte *-L1	;wh_NameLength	length of name
>d53c	ad d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d53e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d53f	08					.byte NN	;wh_Flags	dictionary flags
=54459					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d540	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d543					en = *	; remember here
>d53e	03					.byte CL	;wh_CodeLength
>d543	9d					.byte $9d
>d544	73 74 61 2e 79			L1:	.text "sta.y"	;  name of word as a string, ending at wh_NameLastChar
>d549	05					.byte *-L1	;wh_NameLength	length of name
>d54a	bb d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d54c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d54d	08					.byte NN	;wh_Flags	dictionary flags
=54473					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d54e	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d551					en = *	; remember here
>d54c	03					.byte CL	;wh_CodeLength
>d551	99					.byte $99
>d552	73 74 61 2e 7a			L1:	.text "sta.z"	;  name of word as a string, ending at wh_NameLastChar
>d557	05					.byte *-L1	;wh_NameLength	length of name
>d558	c9 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d55a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d55b	08					.byte NN	;wh_Flags	dictionary flags
=54487					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d55c	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d55f					en = *	; remember here
>d55a	03					.byte CL	;wh_CodeLength
>d55f	85					.byte $85
>d560	73 74 61 2e 7a 69 79		L1:	.text "sta.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d567	07					.byte *-L1	;wh_NameLength	length of name
>d568	d7 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d56a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d56b	08					.byte NN	;wh_Flags	dictionary flags
=54503					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d56c	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d56f					en = *	; remember here
>d56a	03					.byte CL	;wh_CodeLength
>d56f	91					.byte $91
>d570	73 74 61 2e 7a 78		L1:	.text "sta.zx"	;  name of word as a string, ending at wh_NameLastChar
>d576	06					.byte *-L1	;wh_NameLength	length of name
>d577	e7 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d579	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d57a	08					.byte NN	;wh_Flags	dictionary flags
=54518					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d57b	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d57e					en = *	; remember here
>d579	03					.byte CL	;wh_CodeLength
>d57e	95					.byte $95
>d57f	73 74 61 2e 7a 78 69		L1:	.text "sta.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d586	07					.byte *-L1	;wh_NameLength	length of name
>d587	f6 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d589	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d58a	08					.byte NN	;wh_Flags	dictionary flags
=54534					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d58b	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d58e					en = *	; remember here
>d589	03					.byte CL	;wh_CodeLength
>d58e	81					.byte $81
>d58f	73 74 78			L1:	.text "stx"	;  name of word as a string, ending at wh_NameLastChar
>d592	03					.byte *-L1	;wh_NameLength	length of name
>d593	06 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d595	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d596	08					.byte NN	;wh_Flags	dictionary flags
=54546					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d597	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d59a					en = *	; remember here
>d595	03					.byte CL	;wh_CodeLength
>d59a	8e					.byte $8e
>d59b	73 74 78 2e 7a			L1:	.text "stx.z"	;  name of word as a string, ending at wh_NameLastChar
>d5a0	05					.byte *-L1	;wh_NameLength	length of name
>d5a1	12 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5a3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5a4	08					.byte NN	;wh_Flags	dictionary flags
=54560					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5a5	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5a8					en = *	; remember here
>d5a3	03					.byte CL	;wh_CodeLength
>d5a8	86					.byte $86
>d5a9	73 74 78 2e 7a 79		L1:	.text "stx.zy"	;  name of word as a string, ending at wh_NameLastChar
>d5af	06					.byte *-L1	;wh_NameLength	length of name
>d5b0	20 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5b3	08					.byte NN	;wh_Flags	dictionary flags
=54575					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5b4	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5b7					en = *	; remember here
>d5b2	03					.byte CL	;wh_CodeLength
>d5b7	96					.byte $96
>d5b8	73 74 79			L1:	.text "sty"	;  name of word as a string, ending at wh_NameLastChar
>d5bb	03					.byte *-L1	;wh_NameLength	length of name
>d5bc	2f d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5bf	08					.byte NN	;wh_Flags	dictionary flags
=54587					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5c0	20 fd cd	jsr $cdfd		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5c3					en = *	; remember here
>d5be	03					.byte CL	;wh_CodeLength
>d5c3	8c					.byte $8c
>d5c4	73 74 79 2e 7a			L1:	.text "sty.z"	;  name of word as a string, ending at wh_NameLastChar
>d5c9	05					.byte *-L1	;wh_NameLength	length of name
>d5ca	3b d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5cd	08					.byte NN	;wh_Flags	dictionary flags
=54601					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5ce	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5d1					en = *	; remember here
>d5cc	03					.byte CL	;wh_CodeLength
>d5d1	84					.byte $84
>d5d2	73 74 79 2e 7a 78		L1:	.text "sty.zx"	;  name of word as a string, ending at wh_NameLastChar
>d5d8	06					.byte *-L1	;wh_NameLength	length of name
>d5d9	49 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5dc	08					.byte NN	;wh_Flags	dictionary flags
=54616					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5dd	20 e7 cd	jsr $cde7		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5e0					en = *	; remember here
>d5db	03					.byte CL	;wh_CodeLength
>d5e0	94					.byte $94
>d5e1	74 61 78			L1:	.text "tax"	;  name of word as a string, ending at wh_NameLastChar
>d5e4	03					.byte *-L1	;wh_NameLength	length of name
>d5e5	58 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5e8	08					.byte NN	;wh_Flags	dictionary flags
=54628					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5e9	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5ec					en = *	; remember here
>d5e7	03					.byte CL	;wh_CodeLength
>d5ec	aa					.byte $aa
>d5ed	74 61 79			L1:	.text "tay"	;  name of word as a string, ending at wh_NameLastChar
>d5f0	03					.byte *-L1	;wh_NameLength	length of name
>d5f1	64 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5f4	08					.byte NN	;wh_Flags	dictionary flags
=54640					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5f5	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5f8					en = *	; remember here
>d5f3	03					.byte CL	;wh_CodeLength
>d5f8	a8					.byte $a8
>d5f9	74 73 78			L1:	.text "tsx"	;  name of word as a string, ending at wh_NameLastChar
>d5fc	03					.byte *-L1	;wh_NameLength	length of name
>d5fd	70 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5ff	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d600	08					.byte NN	;wh_Flags	dictionary flags
=54652					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d601	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d604					en = *	; remember here
>d5ff	03					.byte CL	;wh_CodeLength
>d604	ba					.byte $BA
>d605	74 78 61			L1:	.text "txa"	;  name of word as a string, ending at wh_NameLastChar
>d608	03					.byte *-L1	;wh_NameLength	length of name
>d609	7c d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d60b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d60c	08					.byte NN	;wh_Flags	dictionary flags
=54664					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d60d	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d610					en = *	; remember here
>d60b	03					.byte CL	;wh_CodeLength
>d610	8a					.byte $8a
>d611	74 78 73			L1:	.text "txs"	;  name of word as a string, ending at wh_NameLastChar
>d614	03					.byte *-L1	;wh_NameLength	length of name
>d615	88 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d617	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d618	08					.byte NN	;wh_Flags	dictionary flags
=54676					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d619	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d61c					en = *	; remember here
>d617	03					.byte CL	;wh_CodeLength
>d61c	9a					.byte $9a
>d61d	74 79 61			L1:	.text "tya"	;  name of word as a string, ending at wh_NameLastChar
>d620	03					.byte *-L1	;wh_NameLength	length of name
>d621	94 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d623	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d624	08					.byte NN	;wh_Flags	dictionary flags
=54688					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d625	20 06 ce	jsr $ce06		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d628					en = *	; remember here
>d623	03					.byte CL	;wh_CodeLength
>d628	98					.byte $98
=54688					asm_table = WordListLink ; head of instruction word list for disassembler
>d629	70 75 73 68 2d 61		L1:	.text "push-a"	;  name of word as a string, ending at wh_NameLastChar
>d62f	06					.byte *-L1	;wh_NameLength	length of name
>d630	a0 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d632	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d633	0c					.byte IM+NN	;wh_Flags	dictionary flags
=54703					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d634	a9 22		lda #$22			lda #<PushZA
.d636	a0 b6		ldy #$b6			ldy #>PushZA
.d638	4c 23 cb	jmp $cb23			jmp Jsr_Comma_YA
=7					CL	.var *-(WordListLink+wh_Xt)
=$d63b					en = *	; remember here
>d632	07					.byte CL	;wh_CodeLength
>d63b	2d 2d 3e			L1:	.text "-->"	;  name of word as a string, ending at wh_NameLastChar
>d63e	03					.byte *-L1	;wh_NameLength	length of name
>d63f	af d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d641	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d642	0c					.byte IM+NN	;wh_Flags	dictionary flags
=54718					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d643	4c 13 c8	jmp $c813			jmp Here
=3					CL	.var *-(WordListLink+wh_Xt)
=$d646					en = *	; remember here
>d641	03					.byte CL	;wh_CodeLength
>d646	3c 6a				L1:	.text "<j"	;  name of word as a string, ending at wh_NameLastChar
>d648	02					.byte *-L1	;wh_NameLength	length of name
>d649	be d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d64b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d64c	04					.byte IM	;wh_Flags	dictionary flags
=54728					WordListLink ::= *-wh_xt ; remember the nt of this word for later
=0					CL	.var *-(WordListLink+wh_Xt)
=$d64d					en = *	; remember here
>d64b	00					.byte CL	;wh_CodeLength
.d64d	60		rts				rts
>d64e	3c 62				L1:	.text "<b"	;  name of word as a string, ending at wh_NameLastChar
>d650	02					.byte *-L1	;wh_NameLength	length of name
>d651	c8 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d653	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d654	0c					.byte IM+NN	;wh_Flags	dictionary flags
=54736					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d655					asm_back_branch:
.d655	20 13 c8	jsr $c813			jsr Here		; ( addr-l addr-h )
.d658	20 a8 c9	jsr $c9a8			jsr Minus		; ( offset )
.d65b	a9 fe		lda #$fe			lda #$fe
.d65d	4c 36 c8	jmp $c836			jmp Minus_A
=11					CL	.var *-(WordListLink+wh_Xt)
=$d660					en = *	; remember here
>d653	0b					.byte CL	;wh_CodeLength
>d660	44 69 73 41 73 6d		L1:	.text "DisAsm"	;  name of word as a string, ending at wh_NameLastChar
>d666	06					.byte *-L1	;wh_NameLength	length of name
>d667	d0 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d669	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d66a	08					.byte NN	;wh_Flags	dictionary flags
=54758					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d66b					DisAsm:
.d66b	20 46 c2	jsr $c246			jsr Bounds		; ( addr_end addr )
.d66e					_instr:
.d66e	20 a3 b2	jsr $b2a3			jsr underflow_2
.d671	b5 25		lda $25,x			lda DStack+0,x		; addr >= addr_end?
.d673	d5 27		cmp $27,x			cmp DStack+2,x
.d675	b5 26		lda $26,x			lda DStack+1,x
.d677	f5 28		sbc $28,x			sbc DStack+3,x
.d679	90 03		bcc $d67e			bcc +
.d67b	4c 12 c3	jmp $c312			jmp Two_drop		; discard parms & return
.d67e					+
.d67e	20 ce a9	jsr $a9ce			jsr CR			; new line
.d681	20 45 cd	jsr $cd45			jsr Dup			; print address
.d684	20 5b a7	jsr $a75b			jsr Dot_Hex
.d687	20 c0 cb	jsr $cbc0			jsr Space
.d68a	a1 25		lda ($25,x)			lda (DStack+0,x)	; print opcode byte
.d68c	20 c7 d7	jsr $d7c7			jsr _print_a
.d68f	a1 25		lda ($25,x)			lda (DStack+0,x)	; save opcode
.d691	85 17		sta $17				sta tmp2
.d693	20 47 c8	jsr $c847			jsr One_plus
.d696	a9 a0		lda #$a0			lda #<asm_table		; for each asm opcode word
.d698	a0 d5		ldy #$d5			ldy #>asm_table
.d69a	85 15		sta $15				sta tmp1+0
.d69c	84 16		sty $16				sty tmp1+1
.d69e	d0 0f		bne $d6af			bne _WTest
.d6a0	a0 82		ldy #$82	_WNext:		ldy #wh_WordListLink+1	;   next entry
.d6a2	b1 15		lda ($15),y			lda (tmp1),y
.d6a4	f0 2e		beq $d6d4			beq _unknown
.d6a6	48		pha				pha
.d6a7	88		dey				dey
.d6a8	b1 15		lda ($15),y			lda (tmp1),y
.d6aa	85 15		sta $15				sta tmp1+0
.d6ac	68		pla				pla
.d6ad	85 16		sta $16				sta tmp1+1
.d6af	a0 88		ldy #$88	_WTest:		ldy #wh_Xt+3		;   opcode match?
.d6b1	b1 15		lda ($15),y			lda (tmp1),y
.d6b3	c5 17		cmp $17				cmp tmp2
.d6b5	d0 e9		bne $d6a0			bne _WNext
.d6b7	a5 17		lda $17				lda tmp2		; save opcode
.d6b9	48		pha				pha
.d6ba	a5 16		lda $16				lda tmp1+1		; save its nt
.d6bc	48		pha				pha
.d6bd	a5 15		lda $15				lda tmp1+0
.d6bf	48		pha				pha
.d6c0	a0 86		ldy #$86			ldy #wh_xt+1		; get processor routine addr lo byte from JSR
.d6c2	b1 15		lda ($15),y			lda (tmp1),y
.d6c4	c9 06		cmp #$06			cmp #<asm_0		; goto disasm processor
.d6c6	f0 17		beq $d6df			beq _c0
.d6c8	c9 e7		cmp #$e7			cmp #<asm_1
.d6ca	f0 49		beq $d715			beq _c1
.d6cc	c9 fd		cmp #$fd			cmp #<asm_2
.d6ce	f0 5b		beq $d72b			beq _c2
.d6d0	c9 c7		cmp #$c7			cmp #<asm_r
.d6d2	f0 18		beq $d6ec			beq _cr
.d6d4					_unknown:
.d6d4	20 a8 d7	jsr $d7a8			jsr _tab		; to source area
.d6d7	a9 3f		lda #$3f			lda #'?'
.d6d9	20 b3 cb	jsr $cbb3			jsr Emit_A
.d6dc	4c 6e d6	jmp $d66e			jmp _instr
.d6df					_c0:
.d6df	20 a8 d7	jsr $d7a8			jsr _tab		; to source area
.d6e2	68		pla				pla			; get opcode word nt
.d6e3	a8		tay				tay
.d6e4	68		pla				pla
.d6e5	20 ad d7	jsr $d7ad			jsr _print_opcode
.d6e8	68		pla				pla			; discard opcode
.d6e9	4c 6e d6	jmp $d66e			jmp _instr
.d6ec					_cr:
.d6ec	20 be d7	jsr $d7be			jsr _get_byte		; get displacement byte
.d6ef	a0 00		ldy #$00			ldy #0			; sign extend displacement
.d6f1	09 00		ora #$00			ora #0
.d6f3	10 01		bpl $d6f6			bpl +
.d6f5	88		dey				dey
.d6f6	20 e0 b5	jsr $b5e0	+		jsr PushYA
.d6f9	20 1c cd	jsr $cd1c			jsr Over		; calc dest addr
.d6fc	20 8f c9	jsr $c98f			jsr Plus
.d6ff	20 45 cd	jsr $cd45			jsr Dup			; save for TypeSymbolN
.d702	20 a8 d7	jsr $d7a8			jsr _tab		; to source area
.d705	20 f4 c9	jsr $c9f4			jsr U_Dot		; print dest address
.d708	68		pla				pla			; get opcode word nt
.d709	a8		tay				tay
.d70a	68		pla				pla
.d70b	20 ad d7	jsr $d7ad			jsr _print_opcode
.d70e	68		pla				pla			; discard opcode
.d70f	20 ac 81	jsr $81ac			jsr TypeSymbolN		; print dest addr symbolic
.d712	4c 6e d6	jmp $d66e			jmp _instr
.d715					_c1:
.d715	20 be d7	jsr $d7be			jsr _get_byte		; get operand
.d718	20 22 b6	jsr $b622			jsr PushZA
.d71b	20 a8 d7	jsr $d7a8			jsr _tab		; to source area
.d71e	20 f4 c9	jsr $c9f4			jsr U_Dot		; print operand
.d721	68		pla				pla			; get opcode word nt
.d722	a8		tay				tay
.d723	68		pla				pla
.d724	20 ad d7	jsr $d7ad			jsr _print_opcode
.d727	68		pla				pla			; discard opcode
.d728	4c 6e d6	jmp $d66e			jmp _instr
.d72b					_c2:
.d72b	20 be d7	jsr $d7be			jsr _get_byte		; get operand lo byte
.d72e	48		pha				pha
.d72f	20 be d7	jsr $d7be			jsr _get_byte		; get operand hi byte
.d732	ca		dex				dex			; push operand bytes
.d733	ca		dex				dex
.d734	95 26		sta $26,x			sta DStack+1,x
.d736	68		pla				pla
.d737	95 25		sta $25,x			sta DStack+0,x
.d739	20 a8 d7	jsr $d7a8			jsr _tab		; to source area
.d73c	20 45 cd	jsr $cd45			jsr Dup
.d73f	20 f4 c9	jsr $c9f4			jsr U_Dot		; print operand
.d742	68		pla				pla			; AY= opcode word nt
.d743	a8		tay				tay
.d744	68		pla				pla
.d745	20 ad d7	jsr $d7ad			jsr _print_opcode
.d748	20 45 cd	jsr $cd45			jsr Dup
.d74b	20 ac 81	jsr $81ac			jsr TypeSymbolN		; print operand as symbol
.d74e	68		pla				pla			; get opcode
.d74f	c9 20		cmp #$20			cmp #$20		;  JSR
.d751	f0 09		beq $d75c			beq _jsr
.d753	e8		inx		_jdrop:		inx			; Drop operand
.d754	e8		inx				inx
.d755	4c 6e d6	jmp $d66e			jmp _instr		; ( addr_end addr )
.d758	e8		inx		_2drop:		inx			; Drop jsr_nt
.d759	e8		inx				inx
.d75a	d0 f7		bne $d753			bne _jdrop
.d75c					_jsr:
.d75c	20 50 b2	jsr $b250			jsr PopYA
.d75f	c9 fc		cmp #$fc			cmp #<sliteral_runtime	; string literal?
.d761	d0 42		bne $d7a5			bne _not_sliteral
.d763	c0 b6		cpy #$b6			cpy #>sliteral_runtime
.d765	d0 3e		bne $d7a5			bne _not_sliteral
.d767	20 ce a9	jsr $a9ce			jsr CR
.d76a	20 45 cd	jsr $cd45			jsr Dup			; ( addr_end addr addr )
.d76d	20 5b a7	jsr $a75b			jsr Dot_Hex
.d770	20 c0 cb	jsr $cbc0			jsr Space
.d773	20 45 cd	jsr $cd45			jsr Dup			; ( addr_end ? addr )
.d776	20 be d7	jsr $d7be			jsr _get_byte		; get JMP opcode
.d779	20 be d7	jsr $d7be			jsr _get_byte		; get JMP addr lo byte
.d77c	95 27		sta $27,x			sta DStack+2,x
.d77e	20 be d7	jsr $d7be			jsr _get_byte		; get JMP addr hi byte
.d781	95 28		sta $28,x			sta DStack+3,x		; ( addr_end string_end addr )
.d783	20 ce a9	jsr $a9ce			jsr CR
.d786	20 45 cd	jsr $cd45			jsr Dup
.d789	20 5b a7	jsr $a75b			jsr Dot_Hex
.d78c	20 c0 cb	jsr $cbc0			jsr Space
.d78f	b5 25		lda $25,x	_slit_11:	lda DStack+0,x		; done with string data?
.d791	d5 27		cmp $27,x			cmp DStack+2,x
.d793	b5 26		lda $26,x			lda DStack+1,x
.d795	f5 28		sbc $28,x			sbc DStack+3,x
.d797	b0 06		bcs $d79f			bcs _slit_19
.d799	20 be d7	jsr $d7be			jsr _get_byte
.d79c	4c 8f d7	jmp $d78f			jmp _slit_11
.d79f					_slit_19:
.d79f	20 6c c7	jsr $c76c			jsr Nip			; ( addr_end addr )
.d7a2	4c 6e d6	jmp $d66e			jmp _instr
.d7a5					_not_sliteral:
.d7a5	4c 6e d6	jmp $d66e			jmp _instr
.d7a8					_tab:
.d7a8	a9 09		lda #$09			lda #9
.d7aa	4c b3 cb	jmp $cbb3			jmp Emit_A
.d7ad					_print_opcode:
.d7ad	20 53 cd	jsr $cd53			jsr PushAY		; save opcode word nt
.d7b0	20 c0 cb	jsr $cbc0			jsr Space
.d7b3	20 1c bc	jsr $bc1c			jsr Name_To_String	; get name string
.d7b6	4c cd cb	jmp $cbcd			jmp Type		; type word name
.d7b9					_get_byte_silent:
.d7b9	a1 25		lda ($25,x)			lda (DStack+0,x)
.d7bb	4c 47 c8	jmp $c847			jmp One_plus
.d7be					_get_byte:
.d7be	20 b9 d7	jsr $d7b9			jsr _get_byte_silent
.d7c1	48		pha				pha
.d7c2	20 c7 d7	jsr $d7c7			jsr _print_a
.d7c5	68		pla				pla
.d7c6	60		rts				rts
.d7c7					_print_a:
.d7c7	20 22 b6	jsr $b622			jsr PushZA
.d7ca	20 39 a7	jsr $a739			jsr C_Dot_Hex
.d7cd	4c c0 cb	jmp $cbc0			jmp Space
=54758					assembler_dictionary_start = WordListLink ; END of ASSEMBLER-WORDLIST
=0					WordListLink .var 0
>d7d0	6c				L1:	.text "l"	;  name of word as a string, ending at wh_NameLastChar
>d7d1	01					.byte *-L1	;wh_NameLength	length of name
>d7d2	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7d4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7d5	08					.byte NN	;wh_Flags	dictionary flags
=55121					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7d6					Editor_l:
.d7d6	20 8a a1	jsr $a18a			jsr Scr
.d7d9	20 af cc	jsr $ccaf			jsr Fetch
.d7dc	20 39 a2	jsr $a239			jsr Block	; Get the current screen contents.
.d7df	20 ce a9	jsr $a9ce			jsr CR
.d7e2	20 fc b6	jsr $b6fc			jsr SLiteral_Runtime
.d7e5	4c f0 d7	jmp $d7f0			  jmp +				; for SLiteral_Runtime
>d7e8	53 63 72 65 65 6e 20 23				  .text "Screen #"		; for SLiteral_Runtime
.d7f0					+
.d7f0	20 cd cb	jsr $cbcd			jsr Type
.d7f3	20 8a a1	jsr $a18a			jsr Scr		; print screen number
.d7f6	20 af cc	jsr $ccaf			jsr Fetch
.d7f9	a9 04		lda #$04			lda #4		;    in 4 positions
.d7fb	20 28 ca	jsr $ca28			jsr U_Dot_R_A
.d7fe	a9 00		lda #$00			lda #0			; line #
.d800					_line_loop:
.d800	48		pha				pha
.d801	20 ce a9	jsr $a9ce			jsr CR
.d804	68		pla				pla		; Print the line number
.d805	48		pha				pha
.d806	20 22 b6	jsr $b622			jsr PushZA
.d809	a9 02		lda #$02			lda #2		;   in 2 positions
.d80b	20 28 ca	jsr $ca28			jsr U_Dot_R_A
.d80e	20 c0 cb	jsr $cbc0			jsr Space
.d811	20 45 cd	jsr $cd45			jsr Dup		; Print one line using the address on the stack.
.d814	a9 40		lda #$40			lda #64
.d816	20 22 b6	jsr $b622			jsr PushZA
.d819	20 cd cb	jsr $cbcd			jsr Type
.d81c	a9 40		lda #$40			lda #64		; move address to the next line.
.d81e	20 f6 c7	jsr $c7f6			jsr plus_a
.d821	68		pla				pla		; Increment the line number
.d822	18		clc				clc
.d823	69 01		adc #$01			adc #1
.d825	c9 10		cmp #$10			cmp #16		; See if we are done.
.d827	d0 d7		bne $d800			bne _line_loop
.d829	e8		inx				inx		; Drop the address
.d82a	e8		inx				inx
.d82b	4c ce a9	jmp $a9ce			jmp CR
=88					CL	.var *-(WordListLink+wh_Xt)
=$d82e					en = *	; remember here
>d7d4	58					.byte CL	;wh_CodeLength
.d82e					Editor_Screen_Helper:
.d82e	20 45 cd	jsr $cd45			jsr Dup
.d831	20 8a a1	jsr $a18a			jsr Scr
.d834	20 92 cc	jsr $cc92			jsr Store
.d837	4c a3 a2	jmp $a2a3			jmp Buffer
>d83a	65 6e 74 65 72 2d 73 63		L1:	.text "enter-screen"	;  name of word as a string, ending at wh_NameLastChar
>d842	72 65 65 6e
>d846	0c					.byte *-L1	;wh_NameLength	length of name
>d847	51 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d849	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d84a	08					.byte NN	;wh_Flags	dictionary flags
=55238					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d84b					Editor_Enter_Screen:
.d84b	20 2e d8	jsr $d82e			jsr Editor_Screen_Helper
.d84e	a9 00		lda #$00			lda #0			; Overwrite the lines one at a time.
.d850	95 25		sta $25,x	_loop:		sta DStack+0,x
.d852	20 22 b6	jsr $b622			jsr PushZA		; Put the current line number on the stack.
.d855	20 b9 d8	jsr $d8b9			jsr Editor_o		; prompt for overwrite.
.d858	f6 25		inc $25,x			inc DStack+0,x		; Move on to the next line.
.d85a	b5 25		lda $25,x			lda DStack+0,x
.d85c	c9 10		cmp #$10			cmp #16
.d85e	90 f0		bcc $d850			bcc _loop
.d860	e8		inx				inx			; Drop work area
.d861	e8		inx				inx
=23					CL	.var *-(WordListLink+wh_Xt)
=$d862					en = *	; remember here
>d849	17					.byte CL	;wh_CodeLength
.d862	60		rts				rts
>d863	6c 69 6e 65			L1:	.text "line"	;  name of word as a string, ending at wh_NameLastChar
>d867	04					.byte *-L1	;wh_NameLength	length of name
>d868	c6 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d86a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d86b	08					.byte NN	;wh_Flags	dictionary flags
=55271					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d86c					Editor_line:
.d86c	a9 06		lda #$06			lda #6		; Multiply the TOS by 64 (chars/line) to compute offset.
.d86e	20 2e c9	jsr $c92e			jsr LShift_A	; *64 is same as left shift 6 times.
.d871	20 8a a1	jsr $a18a			jsr Scr
.d874	20 af cc	jsr $ccaf			jsr Fetch
.d877	20 39 a2	jsr $a239			jsr Block
.d87a	4c 8f c9	jmp $c98f			jmp Plus
=17					CL	.var *-(WordListLink+wh_Xt)
=$d87d					en = *	; remember here
>d86a	11					.byte CL	;wh_CodeLength
>d87d	65 72 61 73 65 2d 73 63		L1:	.text "erase-screen"	;  name of word as a string, ending at wh_NameLastChar
>d885	72 65 65 6e
>d889	0c					.byte *-L1	;wh_NameLength	length of name
>d88a	e7 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d88c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d88d	08					.byte NN	;wh_Flags	dictionary flags
=55305					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d88e					Editor_Erase_Screen:
.d88e	20 2e d8	jsr $d82e			jsr Editor_Screen_Helper
.d891	a9 00		lda #$00			lda #<1024
.d893	a0 04		ldy #$04			ldy #>1024
.d895	20 e0 b5	jsr $b5e0			jsr PushYA
.d898	20 62 bc	jsr $bc62			jsr Blank		; Erase the entire block (fill with spaces).
.d89b	4c 8f a2	jmp $a28f			jmp Update		; Mark buffer as updated.
=16					CL	.var *-(WordListLink+wh_Xt)
=$d89e					en = *	; remember here
>d88c	10					.byte CL	;wh_CodeLength
>d89e	65 6c				L1:	.text "el"	;  name of word as a string, ending at wh_NameLastChar
>d8a0	02					.byte *-L1	;wh_NameLength	length of name
>d8a1	09 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d8a3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d8a4	08					.byte NN	;wh_Flags	dictionary flags
=55328					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d8a5					Editor_el:
.d8a5	20 6c d8	jsr $d86c			jsr Editor_line
.d8a8	a9 40		lda #$40			lda #64			;(# of chars/line)
.d8aa	20 22 b6	jsr $b622			jsr PushZA
.d8ad	20 62 bc	jsr $bc62			jsr Blank		; Fill with spaces.
.d8b0	4c 8f a2	jmp $a28f			jmp Update		; Mark buffer as updated.
=14					CL	.var *-(WordListLink+wh_Xt)
=$d8b3					en = *	; remember here
>d8a3	0e					.byte CL	;wh_CodeLength
>d8b3	6f				L1:	.text "o"	;  name of word as a string, ending at wh_NameLastChar
>d8b4	01					.byte *-L1	;wh_NameLength	length of name
>d8b5	20 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d8b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d8b8	08					.byte NN	;wh_Flags	dictionary flags
=55348					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d8b9					Editor_o:
.d8b9	20 ce a9	jsr $a9ce			jsr CR
.d8bc	20 45 cd	jsr $cd45			jsr Dup
.d8bf	a9 02		lda #$02			lda #2
.d8c1	20 28 ca	jsr $ca28			jsr U_Dot_R_A
.d8c4	20 c0 cb	jsr $cbc0			jsr Space
.d8c7	a9 2a		lda #$2a			lda #'*'
.d8c9	20 b3 cb	jsr $cbb3			jsr Emit_A
.d8cc	20 c0 cb	jsr $cbc0			jsr Space
.d8cf	20 6c d8	jsr $d86c			jsr Editor_line
.d8d2	20 45 cd	jsr $cd45			jsr Dup		; Save a copy of the line address for later.
.d8d5	a9 40		lda #$40			lda #64		; chars/line
.d8d7	20 22 b6	jsr $b622			jsr PushZA
.d8da	20 ca c0	jsr $c0ca			jsr Accept
.d8dd	20 45 cd	jsr $cd45			jsr Dup
.d8e0	20 6f cc	jsr $cc6f			jsr Not_Rot
.d8e3	20 8f c9	jsr $c98f			jsr Plus
.d8e6	a9 40		lda #$40			lda #64		; chars/line
.d8e8	20 22 b6	jsr $b622			jsr PushZA
.d8eb	20 49 cc	jsr $cc49			jsr Rot
.d8ee	20 a8 c9	jsr $c9a8			jsr Minus
.d8f1	20 62 bc	jsr $bc62			jsr Blank
.d8f4	4c 8f a2	jmp $a28f			jmp Update
=62					CL	.var *-(WordListLink+wh_Xt)
=$d8f7					en = *	; remember here
>d8b7	3e					.byte CL	;wh_CodeLength
=55348					editor_dictionary_start = WordListLink ; END of EDITOR-WORDLIST

;******  Processing file: platform/../strings.asm

>d8f7	20 6f 6b 00			str_ok:         .text " ok", 0         ; note space at beginning
>d8fb	20 63 6f 6d 70 69 6c 65		str_compiled:   .text " compiled", 0   ; note space at beginning
>d903	64 00
>d905	72 65 64 65 66 69 6e 65		str_redefined:  .text "redefined ", 0  ; note space at end
>d90d	64 20 00
>d910	41 73 73 65 6d 62 6c 65		str_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>d918	72 20 00
>d91b	45 64 69 74 6f 72 20 00		str_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>d923	46 6f 72 74 68 20 00		str_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>d92a	52 6f 6f 74 20 00		str_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>d930	66 6c 61 67 73 3a 00		str_see_flags:  .text "flags:", 0
>d937	6e 74 3a 20 24 00		str_see_nt:     .text "nt: $", 0
>d93d	78 74 3a 20 24 00		str_see_xt:     .text "xt: $", 0
>d943	73 69 7a 65 3a 20 23 00		str_see_size:   .text "size: #", 0
.d94b					Exception_Text_List:
>d94b	ff 00					.text $100+err_Abort,0
>d94d	fe 00					.text $100+err_AbortQuote,0
>d94f	fd 53 74 61 63 6b 20 4f			.text $100+err_Stack_Overflow,"Stack Overflow",0
>d957	76 65 72 66 6c 6f 77 00
>d95f	fc 53 74 61 63 6b 20 55			.text $100+err_Stack_Underflow,"Stack Underflow",0
>d967	6e 64 65 72 66 6c 6f 77 00
>d970	f9 64 6f 2d 6c 6f 6f 70			.text $100+err_DoLoop_TooDeep,"do-loops nested too deeply during execution",0
>d978	73 20 6e 65 73 74 65 64 20 74 6f 6f 20 64 65 65
>d988	70 6c 79 20 64 75 72 69 6e 67 20 65 78 65 63 75
>d998	74 69 6f 6e 00
>d99d	f6 44 69 76 69 64 65 20			.text $100+err_DivideBy0,"Divide by 0",0
>d9a5	62 79 20 30 00
>d9aa	f5 6f 75 74 20 6f 66 20			.text $100+err_OutOfRange,"out of range",0
>d9b2	72 61 6e 67 65 00
>d9b8	f4 61 72 67 75 6d 65 6e			.text $100+err_ArgTypeMismatch,"argument type mismatch",0
>d9c0	74 20 74 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>d9d0	f3 55 6e 64 65 66 69 6e			.text $100+err_UndefinedWord,"Undefined word",0
>d9d8	65 64 20 77 6f 72 64 00
>d9e0	f2 49 6e 74 65 72 70 72			.text $100+err_CompileOnly,"Interpreting a Compile-only word",0
>d9e8	65 74 69 6e 67 20 61 20 43 6f 6d 70 69 6c 65 2d
>d9f8	6f 6e 6c 79 20 77 6f 72 64 00
>da02	eb 75 6e 73 75 70 70 6f			.text $100+err_Unsupported,"unsupported operation",0 ;  (e.g., AT-XY on a too-dumb terminal)
>da0a	72 74 65 64 20 6f 70 65 72 61 74 69 6f 6e 00
>da19	ea 63 6f 6e 74 72 6f 6c			.text $100+err_ControlMismatch,"control structure mismatch",0
>da21	20 73 74 72 75 63 74 75 72 65 20 6d 69 73 6d 61
>da31	74 63 68 00
>da35	e0 69 6e 76 61 6c 69 64			.text $100+err_InvalidName,"invalid name",0 ; argument (e.g., TO name)
>da3d	20 6e 61 6d 65 00
>da43	df 62 6c 6f 63 6b 20 72			.text $100+err_BlockRead,"block read",0
>da4b	65 61 64 00
>da4f	de 62 6c 6f 63 6b 20 77			.text $100+err_BlockWrite,"block write",0
>da57	72 69 74 65 00
>da5c	d6 46 50 20 64 69 76 69			.text $100+err_FPDivideBy0,"FP divide by zero",0
>da64	64 65 20 62 79 20 7a 65 72 6f 00
>da6f	d5 46 50 20 72 65 73 75			.text $100+err_FPOutOfRange,"FP result out of range",0
>da77	6c 74 20 6f 75 74 20 6f 66 20 72 61 6e 67 65 00
>da87	d4 46 50 20 73 74 61 63			.text $100+err_FPStackOverflow,"FP stack overflow",0
>da8f	6b 20 6f 76 65 72 66 6c 6f 77 00
>da9a	d3 46 50 20 73 74 61 63			.text $100+err_FPStackUnderflow,"FP stack underflow",0
>daa2	6b 20 75 6e 64 65 72 66 6c 6f 77 00
>daae	d2 46 50 20 69 6e 76 61			.text $100+err_FPInvalidArg,"FP invalid argument",0
>dab6	6c 69 64 20 61 72 67 75 6d 65 6e 74 00
>dac3	ca 46 50 20 75 6e 64 65			.text $100+err_FPUnderflow,"FP underflow",0
>dacb	72 66 6c 6f 77 00
>dad1	c5 41 4c 4c 4f 43 41 54			.text $100+err_Allocate,"ALLOCATE",0
>dad9	45 00
>dadb	c4 46 52 45 45 00			.text $100+err_Free,"FREE",0
>dae1	6b 52 65 66 69 6c 6c 00			.text $100+err_Refill,"Refill",0
>dae9	6a 44 65 66 65 72 20 6e			.text $100+err_Defer,"Defer not set",0
>daf1	6f 74 20 73 65 74 00
>daf8	69 4e 6f 74 20 63 6f 6d			.text $100+err_NotCompiling,"Not compiling",0
>db00	70 69 6c 69 6e 67 00
>db07	68 41 6c 72 65 61 64 79			.text $100+err_AlreadyCompiling,"Already compiling",0
>db0f	20 63 6f 6d 70 69 6c 69 6e 67 00
>db1a	66 4e 6f 20 77 6f 72 64			.text $100+err_wordlist,"No wordlists available",0
>db22	6c 69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>db32	67 50 6c 65 61 73 65 20			.text $100+err_blockwords,"Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
>db3a	61 73 73 69 67 6e 20 76 65 63 74 6f 72 73 20 42
>db4a	4c 4f 43 4b 2d 52 45 41 44 2d 56 45 43 54 4f 52
>db5a	20 61 6e 64 20 42 4c 4f 43 4b 2d 57 52 49 54 45
>db6a	2d 56 45 43 54 4f 52 00
>db72	00					.text 0 ; end of list

;******  Return to file: platform/../taliforth.asm


;******  Return to file: platform/platform-py65mon.asm

>0765					hist_buff: .fill 8*128	; Input History for ACCEPT
.0b65					cp0:
.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 34 f0	lda $f034,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 2a f0	jsr $f02a	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	d0 f5		bne $f013	                bne -
.f01e					_done:
.f01e	4c 8c 9f	jmp $9f8c	                jmp forth
.f021					kernel_getc:
.f021					_loop:
.f021	ee 34 03	inc $0334	                inc RndState+0	; randomize
.f024	ad 04 f0	lda $f004	                lda $f004
.f027	f0 f8		beq $f021	                beq _loop
.f029	60		rts		                rts
.f02a					kernel_putc:
.f02a	8d 01 f0	sta $f001	                sta $f001
.f02d	60		rts		                rts
.f02e					platform_bye:
.f02e	00		brk #		                brk
.f02f					platform_CCAt:
.f02f	a9 eb		lda #$eb	                lda #$100+err_Unsupported
.f031	4c bf b2	jmp $b2bf	                jmp ThrowA  ; py65mon does't have this yet
.f034					s_kernel_id:
>f034	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 remix default kernel for py65mon (31 May 2024)", AscLF, 0
>f03c	74 68 20 32 20 72 65 6d 69 78 20 64 65 66 61 75
>f04c	6c 74 20 6b 65 72 6e 65 6c 20 66 6f 72 20 70 79
>f05c	36 35 6d 6f 6e 20 28 33 31 20 4d 61 79 20 32 30
>f06c	32 34 29 0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
