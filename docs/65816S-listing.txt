
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/65816S-listing.txt --labels=docs/65816S-labelmap.txt --output TaliForth-65816S.bin platform/platform-65816S.asm
; Wed Jun 19 18:55:05 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-65816S.asm

=$0100					RStack = $0100	; begin of 6502 Return Stack
=$ff					rsp0      = $ff		; initial Return Stack Pointer (6502 stack)
=$8000					cp_end    = $8000	; Last RAM byte available for code
=84					PadOffset = 84	; offset from CP to PAD (holds number strings)
=79					MAX_LINE_LENGTH  = 79      ; output line size
=20					DDim = 20	; # of cells in data stack
=10					FDim = 10	; # of entries in floating-point stack
=8					DoStkDim = 8	; # of entries in Do stack
=["cr","lf"]				TALI_OPTION_CR_EOL := [ "cr", "lf" ]
=$ff					bsize     = $ff		; size of input/output buffers
>0200					buffer0: .fill bsize	; input buffer

;******  Processing file: platform/../taliforth.asm

=					TALI_OPTIONAL_WORDS := ["fp","fpe", "fpieee","fptrancendentals", "ed", "editor", "ramdrive", "block", "environment?", "assembler", "wordlist" ]
=-1					err_Abort		= -1
=-2					err_AbortQuote		= -2
=-3					err_Stack_Overflow	= -3
=-4					err_Stack_Underflow	= -4
=-5					err_Return_Stack_Overflow = -5
=-6					err_Return_Stack_Underflow = -6
=-7					err_DoLoop_TooDeep	= -7	; do-loops nested too deeply during execution
=-8					err_Dictionary_Overflow	= -8
=-9					err_InvalidMemoryAddr	= -9	; invalid memory address
=-10					err_DivideBy0		= -10	; division by zero
=-11					err_OutOfRange		= -11	; result out of range
=-12					err_ArgTypeMismatch	= -12	; argument type mismatch
=-13					err_UndefinedWord	= -13
=-14					err_CompileOnly		= -14	; interpreting a compile-only word
=-15					err_Forget		= -15	; invalid FORGET
=-16					err_EmptyName		= -16	; attempt to use zero-length string as a name
=-17					err_PicStringOverflow	= -17	; pictured numeric output string overflow
=-18					err_ParsedStringOverflow = -18	; parsed string overflow
=-19					err_NameTooLong		= -19	; definition name too long
=-20					err_WriteToRO		= -20	; write to a read-only location
=-21					err_Unsupported		= -21	; unsupported operation  (e.g., AT-XY on a too-dumb terminal)
=-22					err_ControlMismatch	= -22	; control structure mismatch
=-23					err_AddrAlignment	= -23	; address alignment exception
=-24					err_InvalidNumericArg	= -24	; invalid numeric argument
=-25					err_ReturnStackImbalance = -25	; return stack imbalance
=-26					err_LoopParmUnavailable = -26	; loop parameters unavailable
=-27					err_InvalidRecursion	= -27	; invalid recursion
=-28					err_UserInterrupt	= -28	; user interrupt
=-29					err_CompilerNesting	= -29	; compiler nesting
=-30					err_Obsolete		= -30	; obsolescent feature
=-31					err_NoBody		= -31	; >BODY used on non-CREATEd definition
=-32					err_InvalidName		= -32	; invalid name argument (e.g., TO name)
=-33					err_BlockRead		= -33	; block read exception
=-34					err_BlockWrite		= -34	; block write exception
=-35					err_InvalidBlock	= -35	; invalid block number
=-36					err_InvalidFilePosition = -36	; invalid file position
=-37					err_FileIO		= -37	; file I/O exception
=-38					err_FileMissing		= -38	; non-existent file
=-39					err_EndOfFile		= -39	; unexpected end of file
=-40					err_InvalidBase		= -40	; invalid BASE for floating point conversion
=-41					err_LossOfPrecision	= -41	; loss of precision
=-42					err_FPDivideBy0		= -42	; floating-point divide by zero
=-43					err_FPOutOfRange	= -43	; floating-point result out of range
=-44					err_FPStackOverflow	= -44	; floating-point stack overflow
=-45					err_FPStackUnderflow	= -45	; floating-point stack underflow
=-46					err_FPInvalidArg	= -46	; floating-point invalid argument
=-47					err_CompileWordsDeleted = -47	; compilation word list deleted
=-48					err_PostponeInvalid	= -48	; invalid POSTPONE
=-49					err_SearchOrderOverflow = -49	; search-order overflow
=-50					err_SearchOrderUnderflow = -50	; search-order underflow
=-51					err_CompileWordlistChanged = -51 ; compilation word list changed
=-52					err_ControlStackOverflow = -52	; control-flow stack overflow
=-53					err_ExceptionStackOverflow = -53 ; exception stack overflow
=-54					err_FPUnderflow		= -54	; floating-point underflow
=-55					err_FPFault		= -55	; floating-point unidentified fault
=-56					err_Quit		= -56	; QUIT
=-57					err_ConsoleIO		= -57	; exception in sending or receiving a character
=-58					err_BracketIf		= -58	; [IF], [ELSE], or [THEN] exception
=-59					err_Allocate		= -59	; ALLOCATE
=-60					err_Free		= -60	; FREE
=-61					err_Resize		= -61	; RESIZE
=-62					err_CloseFile		= -62	; CLOSE-FILE
=-63					err_CreateFile		= -63	; CREATE-FILE
=-64					err_DeleteFile		= -64	; DELETE-FILE
=-65					err_FilePosition	= -65	; FILE-POSITION
=-66					err_FileSize		= -66	; FILE-SIZE
=-67					err_FileStatus		= -67	; FILE-STATUS
=-68					err_FlushFile		= -68	; FLUSH-FILE
=-69					err_OpenFile		= -69	; OPEN-FILE
=-70					err_ReadFile		= -70	; READ-FILE
=-71					err_ReadLine		= -71	; READ-LINE
=-72					err_RenameFile		= -72	; RENAME-FILE
=-73					err_RepositionFile	= -73	; REPOSITION-FILE
=-74					err_ResizeFile		= -74	; RESIZE-FILE
=-75					err_WriteFile		= -75	; WRITE-FILE
=-76					err_WriteLine		= -76	; WRITE-LINE
=-77					err_MalformedXChar	= -77	; Malformed xchar
=-78					err_Substitute		= -78	; SUBSTITUTE
=-79					err_Replaces		= -79	; REPLACES
=-149					err_Refill		= -149	; Refill failed
=-150					err_Defer		= -150	; Defer not set
=-151					err_AlreadyInterpreting	= -151	; entering interpret when already interpreting
=-152					err_AlreadyCompiling	= -152	; entering compile when already compiling
=-154					err_TooManyWordlists   	= -154
.0000					zp0:
>0000					cp:	.word ?		; Compiler Pointer (see HERE)
>0002					InSrc:	.word ?		; input Source for SOURCE-ID
>0004					Cib:	.word ?		; address of current input buffer
>0006					CibLen:	.word ?		; length of current input buffer
>0008					ToIn:	.word ?		; pointer to CIB (>IN in Forth)
>000a					state:	.word ?		; STATE: -1 compile, 0 interpret
>000c					status: .word ?		; internal status flags
>000e					WorkWord: .word ?	; nt or xt of word being compiled (see status)
>0010					dp:	.word ?		; Dictionary Pointer temp
>0012					DoIndex: .word ?	; current Do index
>0014					tmp1:	.word ?		; temporary storage
>0016					tmp2:	.word ?		; temporary storage
>0018					tmp3:	.word ?		; temporary storage
>001a					tmp4:	.word ?		; temporary storage (tmpdsp)
>001c					tmp5:	.word ?		; temporary storage (tmptos)
>001e					editor1: .word ?	; temporary for editors
>0020					editor2: .word ?	; temporary for editors
>0022					editor3: .word ?	; temporary for editors
>0024					DStack:	.fill DDim*2	; data stack
=40					DStack0 = *-DStack	;   initial Data Stack index value
.8000					Cold_zp_table:
>8000	66 0b					.word cp0		; cp
>8002	00 00					.word 0			; insrc (SOURCE-ID is 0 for keyboard)
>8004	00 02					.word buffer0		; cib
>8006	00 00					.word 0			; ciblen
>8008	00 00					.word 0			; toin
>800a	00 00					.word 0			; state (0 = interpret)
>800c	00 00					.word 0			; status
=14					Cold_zp_table_length = *-Cold_zp_table
.02ff					User0:
>02ff					PrecisionV: .byte ?	; # of decimal places for FP print
>0300					base:	.word ?		; number radix, default decimal
>0302					nc_limit: .word ?	; limit for Native Compile size
>0304					uf_strip: .word ?	; flag to strip underflow detection code
>0306					output:	.word ?		; vector for EMIT
>0308					input:	.word ?		; vector for KEY
>030a					HaveKey: .word ?	; vector for KEY?
>030c					BlkV:	.word ?		; BLK
>030e					ScrV:	.word ?		; SCR
>0310					CurrentV: .byte ?	; CURRENT (byte) (Compilation wordlist)
>0311					Num_WordlistsV: .byte ?	; #WORDLISTS (byte)
=12					max_wordlists = 12	; Maximum number of wordlists supported
>0312					WordlistsV: .fill 2*max_wordlists	; WORDLISTS (cells)
>032a					Num_OrderV: .byte ?	; #ORDER (byte)
>032b					Search_OrderV: .fill 9	; SEARCH-ORDER (bytes)
.0334					MarkEnd:
>0334					ToHold:	.byte ?		; index for formatted output
>0335					RndState: .dword ?	; random # state
=0					wid_Forth = 0
=1					wid_Editor = 1
=2					wid_Assembler = 2
=3					wid_Root = 3
.800e					Cold_user_table:
>800e	08					.byte 8			; PrecisionV
>800f	0a 00					.word 10		; base
>8011	08 00					.word 8			; nc-limit
>8013	00 00					.word 0			; uf_strip (off by default)
>8015	20 f1					.word kernel_putc	; output
>8017	11 f1					.word kernel_getc	; input
>8019	1b f1					.word kernel_havekey	; havekey
>801b	00 00					.word 0				; BLK
>801d	00 00					.word 0				; SCR
>801f	00					.byte 0				; CURRENT = FORTH-WORDLIST
>8020	04					.byte 4				; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>8021	bd ce					.word forth_dictionary_start	; FORTH-WORDLIST
>8023	a7 d9					.word editor_dictionary_start	; EDITOR-WORDLIST
>8025	a8 d7					.word assembler_dictionary_start ; ASSEMBLER-WORDLIST
>8027	01 cf					.word root_dictionary_start	; ROOT-WORDLIST
>8029	00 00 00 00 00 00 00 00			.word 0,0,0,0,0,0,0,0		; User wordlists
>8031	00 00 00 00 00 00 00 00
>8039	02					.byte 2				; #ORDER
>803a	00 02 00 00 00 00 00 00			.byte wid_Forth,wid_Assembler,0,0,0,0,0,0,0	; search-order
>8042	00
=53					Cold_user_table_length = *-Cold_user_table
=$03					AscCC   = $03	; break (CTRL-c)
=$07					AscBELL = $07	; bell sound
=$08					AscBS   = $08	; backspace
=$09					AscHT	= $09	; tab
=$0a					AscLF   = $0a	; line feed
=$0b					AScVT	= $0b	; vertical tab
=$0c					AscFF	= $0c	; form feed
=$0d					AscCR   = $0d	; carriage return
=$0e					AscCN   = $0e	; CTRL-n (used to recall next input history)
=$10					AscCP   = $10	; CTRL-p (used to recall previous input history)
=$1b					AscESC  = $1b	; escape
=$20					AscSP   = $20	; space
=$22					AscDQuote = $22	; double quote
=$5c					AscBackslash = $5c ; backslash
=$7f					AscDEL  = $7f	; delete (CTRL-h)
>0000							.fill $80 ; name, right justified
=127					wh_NameLastChar	= *-1	;last char of name
>0080					wh_HNL:		.byte ?	;
=$e0					wh_HNL_HashMask = $e0		; lo 3 bits of last char of name
=$1f					wh_HNL_NameLengthMask = $1f	; length of name
.0081					wh_
>0081					wh_WordListLink: .word ? ;link to nt of previous word in wordlist chain
>0083					wh_CodeLength:	.byte ?	;size of code (0xff = 255 or greater)
>0084					wh_Flags:	.byte ?	; created by adding the flags defined as:
=1					CO =   1 ; Compile Only
=2					AN =   2 ; Always Native Compile (may not be called by JSR)
=4					IM =   4 ; Immediate Word
=8					NN =   8 ; Never Native Compile (must always be called by JSR)
=$10					UF = $10 ; Includes strippable Underflow Check
=$40					R6 = $40 ; strip 6 bytes from begin & end when native compiling
.0085					wh_xt:
=0					WordListLink .var 0	 ; start of FORTH wordlist
>8043	43 6f 6c 64			L1:	.text "Cold"	;  name of word as a string, ending at wh_NameLastChar
>8047	84					.byte (("Cold"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8048	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>804a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>804b	08					.byte NN	;wh_Flags	dictionary flags
=32711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.804c					Cold:
.804c	d8		cld				cld
.804d	a2 ff		ldx #$ff			ldx #rsp0		; Initialize 6502 stack (Return Stack)
.804f	9a		txs				txs
.8050	a2 0d		ldx #$0d			ldx #Cold_zp_table_length-1
.8052					-
.8052	bd 00 80	lda $8000,x			lda Cold_zp_table,x
.8055	95 00		sta $00,x			sta zp0,x
.8057	ca		dex				dex
.8058	10 f8		bpl $8052			bpl -
.805a	a0 34		ldy #$34			ldy #Cold_user_table_length-1
.805c	b9 0e 80	lda $800e,y	-		lda Cold_user_table,y
.805f	99 ff 02	sta $02ff,y			sta User0,y
.8062	88		dey				dey
.8063	10 f7		bpl $805c			bpl -
.8065	20 a2 b4	jsr $b4a2			jsr Empty_Stack
.8068	20 34 a1	jsr $a134			jsr BlockInit
.806b	20 e2 aa	jsr $aae2			jsr CR
.806e	a9 9c		lda #$9c			lda #<forth_words_start		; push start address
.8070	a0 80		ldy #$80			ldy #>forth_words_start
.8072	20 64 b7	jsr $b764			jsr PushYA
.8075	a9 d2		lda #$d2			lda #<forth_words_len		; push length
.8077	a0 00		ldy #$00			ldy #>forth_words_len
.8079	20 64 b7	jsr $b764			jsr PushYA
.807c	20 99 af	jsr $af99			jsr Evaluate
.807f	a9 00		lda #$00			lda #0
.8081	8d 66 07	sta $0766			sta hist_buff
.8084	8d e6 07	sta $07e6			sta hist_buff+$80
.8087	8d 66 08	sta $0866			sta hist_buff+$100
.808a	8d e6 08	sta $08e6			sta hist_buff+$180
.808d	8d 66 09	sta $0966			sta hist_buff+$200
.8090	8d e6 09	sta $09e6			sta hist_buff+$280
.8093	8d 66 0a	sta $0a66			sta hist_buff+$300
.8096	8d e6 0a	sta $0ae6			sta hist_buff+$380
.8099	4c 53 b4	jmp $b453			jmp Abort_Core2	;Quit
=80					CL	.var *-(WordListLink+wh_Xt)
=$809c					en = *	; remember here
>804a	50					.byte CL	;wh_CodeLength
.809c					forth_words_start:
>809c	20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>80a4	61 6c 69 20 46 6f 72 74 68 20 32 20 72 65 6d 69
>80b4	78 20 66 6f 72 20 74 68 65 20 36 35 30 32 29 20
>80c4	63 72 20 2e 28 20 56 65 72 73 69 6f 6e 20 33 31
>80d4	2e 20 4d 61 79 20 32 30 32 34 20 29 20 63 72 20
>80e4	2e 28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31
>80f4	34 2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53
>8104	74 65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f
>8114	6c 77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c
>8124	69 20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20
>8134	77 69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20
>8144	4e 4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20
>8154	2e 28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f
>8164	20 65 78 69 74 29 20 63 72 20
=210					forth_words_len = *-forth_words_start
.816e					user_words_start:
>816e					.binary "user_words.asc"
=0					user_words_len = *-user_words_start
>816e	4e 6f 4f 70			L1:	.text "NoOp"	;  name of word as a string, ending at wh_NameLastChar
>8172	04					.byte (("NoOp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8173	c7 7f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8175	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8176	00					.byte 0	;wh_Flags	dictionary flags
=33010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8177	ea		nop				nop
=1					CL	.var *-(WordListLink+wh_Xt)
=$8178					en = *	; remember here
>8175	01					.byte CL	;wh_CodeLength
.8178	60		rts				rts
>8179	63 63 40			L1:	.text "cc@"	;  name of word as a string, ending at wh_NameLastChar
>817c	03					.byte (("cc@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>817d	f2 80					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>817f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8180	08					.byte NN	;wh_Flags	dictionary flags
=33020					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8181	4c 28 f1	jmp $f128	CCAt:		jmp platform_CCAt
=3					CL	.var *-(WordListLink+wh_Xt)
=$8184					en = *	; remember here
>817f	03					.byte CL	;wh_CodeLength
>8184	42 79 65			L1:	.text "Bye"	;  name of word as a string, ending at wh_NameLastChar
>8187	a3					.byte (("Bye"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8188	fc 80					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>818a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>818b	08					.byte NN	;wh_Flags	dictionary flags
=33031					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.818c	4c 27 f1	jmp $f127	Bye:		jmp platform_bye
=3					CL	.var *-(WordListLink+wh_Xt)
=$818f					en = *	; remember here
>818a	03					.byte CL	;wh_CodeLength
>818f	54 79 70 65 53 79 6d 62		L1:	.text "TypeSymbol"	;  name of word as a string, ending at wh_NameLastChar
>8197	6f 6c
>8199	8a					.byte (("TypeSymbol"[-1]&7)<<5)+(*-L1)	;wh_HNL
>819a	07 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>819c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>819d	08					.byte NN	;wh_Flags	dictionary flags
=33049					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.819e	20 c9 b7	jsr $b7c9	TypeSymbol:	jsr Two
.81a1	20 1a c4	jsr $c41a			jsr Spaces
.81a4	a9 28		lda #$28			lda #'('
.81a6	20 75 cd	jsr $cd75			jsr Emit_A
.81a9	20 82 cd	jsr $cd82			jsr Space
.81ac	20 07 cf	jsr $cf07			jsr Dup
.81af	a9 24		lda #$24			lda #'$'
.81b1	20 75 cd	jsr $cd75			jsr Emit_A
.81b4	20 77 a8	jsr $a877			jsr Dot_Hex
.81b7	20 82 cd	jsr $cd82			jsr Space
.81ba	20 e1 81	jsr $81e1			jsr DictSearchXt	; ( addr_end addr operand offset nt )
.81bd	20 b4 bd	jsr $bdb4			jsr Name_To_String	; Change nt into the name
.81c0	20 8f cd	jsr $cd8f			jsr Type		; print it.
.81c3	20 82 cd	jsr $cd82			jsr Space
.81c6	b5 24		lda $24,x			lda DStack+0,x		; if non-zero offset
.81c8	15 25		ora $25,x			ora DStack+1,x
.81ca	f0 0b		beq $81d7			beq +
.81cc	a9 2b		lda #$2b			lda #'+'		;   print offset
.81ce	20 75 cd	jsr $cd75			jsr Emit_A
.81d1	20 07 cf	jsr $cf07			jsr Dup
.81d4	20 b6 cb	jsr $cbb6			jsr U_Dot
.81d7	e8		inx		+		inx
.81d8	e8		inx				inx
.81d9	a9 29		lda #$29			lda #')'
.81db	20 75 cd	jsr $cd75			jsr Emit_A
.81de	4c 82 cd	jmp $cd82			jmp Space
=67					CL	.var *-(WordListLink+wh_Xt)
=$81e1					en = *	; remember here
>819c	43					.byte CL	;wh_CodeLength
.81e1					DictSearchXt:
.81e1	ca		dex				dex
.81e2	ca		dex				dex
.81e3	20 de ce	jsr $cede			jsr Over
.81e6	a9 ff		lda #$ff			lda #$ff		; init best offset
.81e8	95 29		sta $29,x			sta DStack+5,x		; ( offset nt xt )
.81ea	a9 fe		lda #$fe			lda #$fe		; for each wordlist
.81ec	48		pha				pha
.81ed	68		pla		_ListNext:	pla
.81ee	18		clc				clc
.81ef	69 02		adc #$02			adc #2			; to next wordlist
.81f1	c9 18		cmp #$18			cmp #max_wordlists*2
.81f3	b0 10		bcs $8205			bcs _Done
.81f5	48		pha				pha
.81f6	a8		tay				tay
.81f7	b9 12 03	lda $0312,y			lda WordlistsV+0,y	; Get the DP for that wordlist.
.81fa	85 14		sta $14				sta tmp1+0
.81fc	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.81ff	85 15		sta $15				sta tmp1+1
.8201	d0 14		bne $8217			bne _WordTest
.8203	f0 e8		beq $81ed			beq _ListNext		;   empty list
.8205	e8		inx		_Done:		inx			; Drop xt
.8206	e8		inx				inx
.8207	60		rts				rts
.8208	a0 82		ldy #$82	_WordNext:	ldy #wh_WordListLink+1
.820a	b1 14		lda ($14),y			lda (tmp1),y
.820c	f0 df		beq $81ed			beq _ListNext		; end of Dictionary?
.820e	48		pha				pha
.820f	88		dey				dey
.8210	b1 14		lda ($14),y			lda (tmp1),y
.8212	85 14		sta $14				sta tmp1+0
.8214	68		pla				pla
.8215	85 15		sta $15				sta tmp1+1
.8217	18		clc		_WordTest:	clc			; tmp2 = xt of this word
.8218	a5 14		lda $14				lda tmp1+0
.821a	69 85		adc #$85			adc #wh_xt
.821c	85 16		sta $16				sta tmp2+0
.821e	a5 15		lda $15				lda tmp1+1
.8220	69 00		adc #$00			adc #0
.8222	85 17		sta $17				sta tmp2+1
.8224	38		sec				sec			; tmp2 = xt offset for this word
.8225	b5 24		lda $24,x			lda DStack+0,x
.8227	e5 16		sbc $16				sbc tmp2+0
.8229	85 16		sta $16				sta tmp2+0
.822b	b5 25		lda $25,x			lda DStack+1,x
.822d	e5 17		sbc $17				sbc tmp2+1
.822f	85 17		sta $17				sta tmp2+1
.8231	20 97 82	jsr $8297			jsr _test
.8234	a0 85		ldy #$85			ldy #wh_xt+0		; is this word a constant?
.8236	b1 14		lda ($14),y			lda (tmp1),y
.8238	c9 a0		cmp #$a0			cmp #$a0
.823a	f0 28		beq $8264			beq _PushYA
.823c	c9 a9		cmp #$a9			cmp #$a9
.823e	d0 c8		bne $8208			bne _WordNext
.8240	c8		iny		_PushZA:	iny			; get lda # operand
.8241	b5 24		lda $24,x			lda DStack+0,x
.8243	f1 14		sbc ($14),y			sbc (tmp1),y
.8245	85 16		sta $16				sta tmp2+0
.8247	b5 25		lda $25,x			lda DStack+1,x
.8249	e9 00		sbc #$00			sbc #0
.824b	85 17		sta $17				sta tmp2+1
.824d	c8		iny				iny			; check jmp opcode
.824e	b1 14		lda ($14),y			lda (tmp1),y
.8250	c9 4c		cmp #$4c			cmp #$4c
.8252	d0 b4		bne $8208			bne _WordNext
.8254	c8		iny				iny			; check jmp operand lo
.8255	b1 14		lda ($14),y			lda (tmp1),y
.8257	c9 a6		cmp #$a6			cmp #<PushZA
.8259	d0 ad		bne $8208			bne _WordNext
.825b	c8		iny				iny			; check jmp operand hi
.825c	b1 14		lda ($14),y			lda (tmp1),y
.825e	c9 b7		cmp #$b7			cmp #>PushZA
.8260	d0 a6		bne $8208			bne _WordNext
.8262	f0 2d		beq $8291			beq _KTest
.8264	a0 87		ldy #$87	_PushYA:	ldy #wh_xt+2		; check LDA # opcode
.8266	b1 14		lda ($14),y			lda (tmp1),y
.8268	c9 a9		cmp #$a9			cmp #$a9
.826a	d0 9c		bne $8208			bne _WordNext
.826c	c8		iny				iny			; get lda # operand
.826d	b5 24		lda $24,x			lda DStack+0,x
.826f	f1 14		sbc ($14),y			sbc (tmp1),y
.8271	85 16		sta $16				sta tmp2+0
.8273	a0 86		ldy #$86			ldy #wh_xt+1		; get LDY # operand
.8275	b5 25		lda $25,x			lda DStack+1,x
.8277	f1 14		sbc ($14),y			sbc (tmp1),y
.8279	85 17		sta $17				sta tmp2+1
.827b	a0 89		ldy #$89			ldy #wh_xt+4		; check JMP opcode
.827d	b1 14		lda ($14),y			lda (tmp1),y
.827f	c9 4c		cmp #$4c			cmp #$4c
.8281	d0 85		bne $8208			bne _WordNext
.8283	c8		iny				iny			; check JMP operand lo
.8284	b1 14		lda ($14),y			lda (tmp1),y
.8286	c9 64		cmp #$64			cmp #<PushYA
.8288	d0 0a		bne $8294			bne _WordNext3
.828a	c8		iny				iny			; check JMP operand hi
.828b	b1 14		lda ($14),y			lda (tmp1),y
.828d	c9 b7		cmp #$b7			cmp #>PushYA
.828f	d0 03		bne $8294			bne _WordNext3
.8291	20 97 82	jsr $8297	_KTest:		jsr _test
.8294	4c 08 82	jmp $8208	_WordNext3:	jmp _WordNext
.8297					_test:
.8297	a5 16		lda $16				lda tmp2+0		; this word have smaller offset?
.8299	d5 28		cmp $28,x			cmp DStack+4,x
.829b	a5 17		lda $17				lda tmp2+1
.829d	f5 29		sbc $29,x			sbc DStack+5,x
.829f	b0 10		bcs $82b1			bcs _trts
.82a1	a5 16		lda $16				lda tmp2+0		;   save this better offset
.82a3	a4 17		ldy $17				ldy tmp2+1
.82a5	95 28		sta $28,x			sta DStack+4,x
.82a7	94 29		sty $29,x			sty DStack+5,x
.82a9	a5 14		lda $14				lda tmp1+0		;   save this better nt
.82ab	a4 15		ldy $15				ldy tmp1+1
.82ad	95 26		sta $26,x			sta DStack+2,x
.82af	94 27		sty $27,x			sty DStack+3,x
.82b1	60		rts		_trts:		rts
>82b2	44 53 74 61 63 6b		L1:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
>82b8	66					.byte (("DStack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>82b9	19 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82bc	08					.byte NN	;wh_Flags	dictionary flags
=33336					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82bd	a9 24		lda #$24			lda #DStack
.82bf	4c a6 b7	jmp $b7a6			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$82c2					en = *	; remember here
>82bb	05					.byte CL	;wh_CodeLength
>82c2	52 6e 64 53 74 61 74 65		L1:	.text "RndState"	;  name of word as a string, ending at wh_NameLastChar
>82ca	a8					.byte (("RndState"[-1]&7)<<5)+(*-L1)	;wh_HNL
>82cb	38 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82ce	08					.byte NN	;wh_Flags	dictionary flags
=33354					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82cf	a0 03		ldy #$03			ldy #>RndState
.82d1	a9 35		lda #$35			lda #<RndState
.82d3	4c 64 b7	jmp $b764			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$82d6					en = *	; remember here
>82cd	07					.byte CL	;wh_CodeLength
>82d6	52 61 6e 64			L1:	.text "Rand"	;  name of word as a string, ending at wh_NameLastChar
>82da	84					.byte (("Rand"[-1]&7)<<5)+(*-L1)	;wh_HNL
>82db	4a 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82de	00					.byte 0	;wh_Flags	dictionary flags
=33370					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82df					Rand:
.82df	4e 36 03	lsr $0336			lsr RndState+1
.82e2	6e 35 03	ror $0335			ror RndState+0
.82e5	6e 38 03	ror $0338			ror RndState+3
.82e8	6e 37 03	ror $0337			ror RndState+2
.82eb	90 10		bcc $82fd			bcc _19			;  IfCs,
.82ed	ad 36 03	lda $0336			lda RndState+1
.82f0	49 d0		eor #$d0			eor #$d0
.82f2	8d 36 03	sta $0336			sta RndState+1
.82f5	ad 37 03	lda $0337			lda RndState+2
.82f8	49 01		eor #$01			eor #$01
.82fa	8d 37 03	sta $0337			sta RndState+2
.82fd					_19:
.82fd	ad 37 03	lda $0337			lda RndState+2
.8300	ac 38 03	ldy $0338			ldy RndState+3
=36					CL	.var *-(WordListLink+wh_Xt)
=$8303					en = *	; remember here
>82dd	24					.byte CL	;wh_CodeLength
.8303	60		rts				rts
>8304	52 61 6e 64 4d			L1:	.text "RandM"	;  name of word as a string, ending at wh_NameLastChar
>8309	a5					.byte (("RandM"[-1]&7)<<5)+(*-L1)	;wh_HNL
>830a	5a 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>830c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>830d	08					.byte NN	;wh_Flags	dictionary flags
=33417					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.830e	20 07 cf	jsr $cf07	RandM:		jsr Dup		; ( umod umod )
.8311	20 df 82	jsr $82df			jsr Rand
.8314	4a		lsr a				lsr a		; make positive
.8315	95 27		sta $27,x			sta DStack+3,x
.8317	94 26		sty $26,x			sty DStack+2,x	; ( rand umod )
.8319	4c 0b af	jmp $af0b			jmp Mod
=14					CL	.var *-(WordListLink+wh_Xt)
=$831c					en = *	; remember here
>830c	0e					.byte CL	;wh_CodeLength
>004c					fp:	.byte ?		; floating-point stack index
>004d					FSExp:   .fill FDim	; FP stack exponent     array
>0057					FSMant0: .fill FDim	; FP stack mantissa MSB array
>0061					FSMant1: .fill FDim	; FP stack mantissa 2nd array
>006b					FSMant2: .fill FDim	; FP stack mantissa 3rd array
>0075					FSMant3: .fill FDim	; FP stack mantissa 4th array
>831c	46 50				L1:	.text "FP"	;  name of word as a string, ending at wh_NameLastChar
>831e	02					.byte (("FP"[-1]&7)<<5)+(*-L1)	;wh_HNL
>831f	89 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8321	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8322	08					.byte NN	;wh_Flags	dictionary flags
=33438					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8323	a9 4c		lda #$4c			lda #fp
.8325	4c a6 b7	jmp $b7a6			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8328					en = *	; remember here
>8321	05					.byte CL	;wh_CodeLength
>8328	46 44 69 6d			L1:	.text "FDim"	;  name of word as a string, ending at wh_NameLastChar
>832c	a4					.byte (("FDim"[-1]&7)<<5)+(*-L1)	;wh_HNL
>832d	9e 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>832f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8330	08					.byte NN	;wh_Flags	dictionary flags
=33452					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8331	a9 0a		lda #$0a			lda #FDim
.8333	4c a6 b7	jmp $b7a6			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8336					en = *	; remember here
>832f	05					.byte CL	;wh_CodeLength
>8336	46 53 45 78 70			L1:	.text "FSExp"	;  name of word as a string, ending at wh_NameLastChar
>833b	05					.byte (("FSExp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>833c	ac 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>833e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>833f	08					.byte NN	;wh_Flags	dictionary flags
=33467					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8340	a9 4d		lda #$4d			lda #FSExp
.8342	4c a6 b7	jmp $b7a6			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8345					en = *	; remember here
>833e	05					.byte CL	;wh_CodeLength
>8345	46 53 4d 61 6e 74 30		L1:	.text "FSMant0"	;  name of word as a string, ending at wh_NameLastChar
>834c	07					.byte (("FSMant0"[-1]&7)<<5)+(*-L1)	;wh_HNL
>834d	bb 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>834f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8350	08					.byte NN	;wh_Flags	dictionary flags
=33484					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8351	a9 57		lda #$57			lda #FSMant0
.8353	4c a6 b7	jmp $b7a6			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8356					en = *	; remember here
>834f	05					.byte CL	;wh_CodeLength
>8356	46 53 4d 61 6e 74 31		L1:	.text "FSMant1"	;  name of word as a string, ending at wh_NameLastChar
>835d	27					.byte (("FSMant1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>835e	cc 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8360	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8361	08					.byte NN	;wh_Flags	dictionary flags
=33501					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8362	a9 61		lda #$61			lda #FSMant1
.8364	4c a6 b7	jmp $b7a6			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8367					en = *	; remember here
>8360	05					.byte CL	;wh_CodeLength
>8367	46 53 4d 61 6e 74 32		L1:	.text "FSMant2"	;  name of word as a string, ending at wh_NameLastChar
>836e	47					.byte (("FSMant2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>836f	dd 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8371	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8372	08					.byte NN	;wh_Flags	dictionary flags
=33518					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8373	a9 6b		lda #$6b			lda #FSMant2
.8375	4c a6 b7	jmp $b7a6			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8378					en = *	; remember here
>8371	05					.byte CL	;wh_CodeLength
>8378	46 53 4d 61 6e 74 33		L1:	.text "FSMant3"	;  name of word as a string, ending at wh_NameLastChar
>837f	67					.byte (("FSMant3"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8380	ee 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8382	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8383	08					.byte NN	;wh_Flags	dictionary flags
=33535					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8384	a9 75		lda #$75			lda #FSMant3
.8386	4c a6 b7	jmp $b7a6			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8389					en = *	; remember here
>8382	05					.byte CL	;wh_CodeLength
>8389	46 6c 6f 61 74 2b		L1:	.text "Float+"	;  name of word as a string, ending at wh_NameLastChar
>838f	66					.byte (("Float+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8390	ff 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8392	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8393	08					.byte NN	;wh_Flags	dictionary flags
=33551					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8394	a9 05		lda #$05	FloatPlus:	lda #5
.8396	4c ac c9	jmp $c9ac			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$8399					en = *	; remember here
>8392	05					.byte CL	;wh_CodeLength
>8399	46 6c 6f 61 74 73		L1:	.text "Floats"	;  name of word as a string, ending at wh_NameLastChar
>839f	66					.byte (("Floats"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83a0	0f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83a3	08					.byte NN	;wh_Flags	dictionary flags
=33567					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83a4	a9 05		lda #$05	Floats:		lda #5
.83a6	20 a6 b7	jsr $b7a6			jsr PushZA
.83a9	4c 1b ae	jmp $ae1b			jmp Star
=8					CL	.var *-(WordListLink+wh_Xt)
=$83ac					en = *	; remember here
>83a2	08					.byte CL	;wh_CodeLength
>83ac	50 72 65 63 69 73 69 6f		L1:	.text "Precision"	;  name of word as a string, ending at wh_NameLastChar
>83b4	6e
>83b5	c9					.byte (("Precision"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83b6	1f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83b8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83b9	08					.byte NN	;wh_Flags	dictionary flags
=33589					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83ba	ad ff 02	lda $02ff	Precision:	lda PrecisionV
.83bd	4c a6 b7	jmp $b7a6			jmp PushZA
=6					CL	.var *-(WordListLink+wh_Xt)
=$83c0					en = *	; remember here
>83b8	06					.byte CL	;wh_CodeLength
.83c0	60		rts				rts
>83c1	53 65 74 2d 50 72 65 63		L1:	.text "Set-Precision"	;  name of word as a string, ending at wh_NameLastChar
>83c9	69 73 69 6f 6e
>83ce	cd					.byte (("Set-Precision"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83cf	35 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83d2	08					.byte NN	;wh_Flags	dictionary flags
=33614					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83d3	20 8e b3	jsr $b38e			jsr PopA
.83d6	8d ff 02	sta $02ff			sta PrecisionV
=6					CL	.var *-(WordListLink+wh_Xt)
=$83d9					en = *	; remember here
>83d1	06					.byte CL	;wh_CodeLength
.83d9	60		rts				rts
>83da	46 44 72 6f 70			L1:	.text "FDrop"	;  name of word as a string, ending at wh_NameLastChar
>83df	05					.byte (("FDrop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83e0	4e 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83e3	00					.byte 0	;wh_Flags	dictionary flags
=33631					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83e4	e6 4c		inc $4c		FDrop:		inc fp
=2					CL	.var *-(WordListLink+wh_Xt)
=$83e6					en = *	; remember here
>83e2	02					.byte CL	;wh_CodeLength
.83e6	60		rts				rts
>83e7	46 32 44 72 6f 70		L1:	.text "F2Drop"	;  name of word as a string, ending at wh_NameLastChar
>83ed	06					.byte (("F2Drop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83ee	5f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83f1	00					.byte 0	;wh_Flags	dictionary flags
=33645					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83f2	e6 4c		inc $4c		F2Drop:		inc fp
.83f4	e6 4c		inc $4c				inc fp
=4					CL	.var *-(WordListLink+wh_Xt)
=$83f6					en = *	; remember here
>83f0	04					.byte CL	;wh_CodeLength
.83f6	60		rts				rts
>83f7	46 44 65 70 74 68		L1:	.text "FDepth"	;  name of word as a string, ending at wh_NameLastChar
>83fd	06					.byte (("FDepth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83fe	6d 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8400	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8401	08					.byte NN	;wh_Flags	dictionary flags
=33661					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8402	a9 0a		lda #$0a	FDepth:		lda #FDim
.8404	38		sec				sec
.8405	e5 4c		sbc $4c				sbc fp
.8407	4c a6 b7	jmp $b7a6			jmp PushZA
=8					CL	.var *-(WordListLink+wh_Xt)
=$840a					en = *	; remember here
>8400	08					.byte CL	;wh_CodeLength
>840a	46 41 6c 6c 6f 63 58		L1:	.text "FAllocX"	;  name of word as a string, ending at wh_NameLastChar
>8411	07					.byte (("FAllocX"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8412	7d 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8414	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8415	08					.byte NN	;wh_Flags	dictionary flags
=33681					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8416	86 14		stx $14		FAllocX:	stx tmp1+0	; save data stack index
.8418	a6 4c		ldx $4c				ldx fp		; X= floating point stack index
.841a	ca		dex				dex		; alloc FP stack entry
.841b	e0 0a		cpx #$0a			cpx #FDim	; overflow or underflow?
.841d	b0 03		bcs $8422			bcs _err
.841f	86 4c		stx $4c				stx fp
.8421	60		rts				rts		; return X= FP stack index
.8422	0a		asl a		_err:		asl a		; save sign bit
.8423	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.8425	6a		ror a				ror a		; restore sign bit
.8426	4c 02 b4	jmp $b402			jmp Throw_FPStack
=19					CL	.var *-(WordListLink+wh_Xt)
=$8429					en = *	; remember here
>8414	13					.byte CL	;wh_CodeLength
>8429	46 4d 61 78			L1:	.text "FMax"	;  name of word as a string, ending at wh_NameLastChar
>842d	04					.byte (("FMax"[-1]&7)<<5)+(*-L1)	;wh_HNL
>842e	91 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8430	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8431	08					.byte NN	;wh_Flags	dictionary flags
=33709					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8432	20 20 86	jsr $8620	FMax:		jsr FCmpA
.8435	10 ad		bpl $83e4			bpl FDrop
.8437	30 19		bmi $8452			bmi FNip
=7					CL	.var *-(WordListLink+wh_Xt)
=$8439					en = *	; remember here
>8430	07					.byte CL	;wh_CodeLength
>8439	46 4d 69 6e			L1:	.text "FMin"	;  name of word as a string, ending at wh_NameLastChar
>843d	c4					.byte (("FMin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>843e	ad 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8440	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8441	08					.byte NN	;wh_Flags	dictionary flags
=33725					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8442	20 20 86	jsr $8620	FMin:		jsr FCmpA
.8445	30 9d		bmi $83e4			bmi FDrop
.8447	10 09		bpl $8452			bpl FNip
=7					CL	.var *-(WordListLink+wh_Xt)
=$8449					en = *	; remember here
>8440	07					.byte CL	;wh_CodeLength
>8449	46 4e 69 70			L1:	.text "FNip"	;  name of word as a string, ending at wh_NameLastChar
>844d	04					.byte (("FNip"[-1]&7)<<5)+(*-L1)	;wh_HNL
>844e	bd 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8450	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8451	00					.byte 0	;wh_Flags	dictionary flags
=33741					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8452	86 14		stx $14		FNip:		stx tmp1		; save data stack index
.8454	a6 4c		ldx $4c				ldx fp			; get FP stack index
.8456	b5 4d		lda $4d,x			lda FSExp+0,x		; copy exponent
.8458	95 4e		sta $4e,x			sta FSExp+1,x
.845a	b5 57		lda $57,x			lda FSMant0+0,x		; copy mantissa
.845c	95 58		sta $58,x			sta FSMant0+1,x
.845e	b5 61		lda $61,x			lda FSMant1+0,x
.8460	95 62		sta $62,x			sta FSMant1+1,x
.8462	b5 6b		lda $6b,x			lda FSMant2+0,x
.8464	95 6c		sta $6c,x			sta FSMant2+1,x
.8466	b5 75		lda $75,x			lda FSMant3+0,x
.8468	95 76		sta $76,x			sta FSMant3+1,x
.846a	e6 4c		inc $4c				inc fp			; FDrop
.846c	a6 14		ldx $14				ldx tmp1		; restore data stack index
=28					CL	.var *-(WordListLink+wh_Xt)
=$846e					en = *	; remember here
>8450	1c					.byte CL	;wh_CodeLength
.846e	60		rts				rts
>846f	46 44 75 70			L1:	.text "FDup"	;  name of word as a string, ending at wh_NameLastChar
>8473	04					.byte (("FDup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8474	cd 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8476	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8477	00					.byte 0	;wh_Flags	dictionary flags
=33779					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8478	20 16 84	jsr $8416	FDup:		jsr FAllocX		; alloc FP stack entry
.847b	b5 4e		lda $4e,x			lda FSExp+1,x		; copy exponent
.847d	95 4d		sta $4d,x			sta FSExp+0,x
.847f	b5 58		lda $58,x			lda FSMant0+1,x		; copy mantissa
.8481	95 57		sta $57,x			sta FSMant0+0,x
.8483	b5 62		lda $62,x			lda FSMant1+1,x
.8485	95 61		sta $61,x			sta FSMant1+0,x
.8487	b5 6c		lda $6c,x			lda FSMant2+1,x
.8489	95 6b		sta $6b,x			sta FSMant2+0,x
.848b	b5 76		lda $76,x			lda FSMant3+1,x
.848d	95 75		sta $75,x			sta FSMant3+0,x
.848f	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CL	.var *-(WordListLink+wh_Xt)
=$8491					en = *	; remember here
>8476	19					.byte CL	;wh_CodeLength
.8491	60		rts				rts
>8492	46 4f 76 65 72			L1:	.text "FOver"	;  name of word as a string, ending at wh_NameLastChar
>8497	45					.byte (("FOver"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8498	f3 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>849a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>849b	00					.byte 0	;wh_Flags	dictionary flags
=33815					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.849c	20 16 84	jsr $8416	FOver:		jsr FAllocX		; alloc FP stack entry
.849f	b5 4f		lda $4f,x			lda FSExp+2,x		; copy exponent
.84a1	95 4d		sta $4d,x			sta FSExp+0,x
.84a3	b5 59		lda $59,x			lda FSMant0+2,x		; copy mantissa
.84a5	95 57		sta $57,x			sta FSMant0+0,x
.84a7	b5 63		lda $63,x			lda FSMant1+2,x
.84a9	95 61		sta $61,x			sta FSMant1+0,x
.84ab	b5 6d		lda $6d,x			lda FSMant2+2,x
.84ad	95 6b		sta $6b,x			sta FSMant2+0,x
.84af	b5 77		lda $77,x			lda FSMant3+2,x
.84b1	95 75		sta $75,x			sta FSMant3+0,x
.84b3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CL	.var *-(WordListLink+wh_Xt)
=$84b5					en = *	; remember here
>849a	19					.byte CL	;wh_CodeLength
.84b5	60		rts				rts
>84b6	46 50 69 63 6b			L1:	.text "FPick"	;  name of word as a string, ending at wh_NameLastChar
>84bb	65					.byte (("FPick"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84bc	17 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84bf	00					.byte 0	;wh_Flags	dictionary flags
=33851					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84c0	20 8e b3	jsr $b38e	FPick:		jsr PopA		; pop u
.84c3	18		clc		FPickA:		clc
.84c4	65 4c		adc $4c				adc fp
.84c6	a8		tay		FPick3:		tay
.84c7	20 16 84	jsr $8416			jsr FAllocX
.84ca	b9 4d 00	lda $004d,y			lda FSExp,y		; copy exponent
.84cd	95 4d		sta $4d,x			sta FSExp,x
.84cf	b9 57 00	lda $0057,y			lda FSMant0,y		; copy mantissa
.84d2	95 57		sta $57,x			sta FSMant0,x
.84d4	b9 61 00	lda $0061,y			lda FSMant1,y
.84d7	95 61		sta $61,x			sta FSMant1,x
.84d9	b9 6b 00	lda $006b,y			lda FSMant2,y
.84dc	95 6b		sta $6b,x			sta FSMant2,x
.84de	b9 75 00	lda $0075,y			lda FSMant3,y
.84e1	95 75		sta $75,x			sta FSMant3,x
.84e3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=37					CL	.var *-(WordListLink+wh_Xt)
=$84e5					en = *	; remember here
>84be	25					.byte CL	;wh_CodeLength
.84e5	60		rts				rts
>84e6	46 32 44 75 70			L1:	.text "F2Dup"	;  name of word as a string, ending at wh_NameLastChar
>84eb	05					.byte (("F2Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84ec	3b 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84ef	08					.byte NN	;wh_Flags	dictionary flags
=33899					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84f0	20 9c 84	jsr $849c	F2Dup:		jsr FOver
.84f3	4c 9c 84	jmp $849c			jmp FOver
=6					CL	.var *-(WordListLink+wh_Xt)
=$84f6					en = *	; remember here
>84ee	06					.byte CL	;wh_CodeLength
>84f6	46 53 77 61 70			L1:	.text "FSwap"	;  name of word as a string, ending at wh_NameLastChar
>84fb	05					.byte (("FSwap"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84fc	6b 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84ff	00					.byte 0	;wh_Flags	dictionary flags
=33915					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8500	86 14		stx $14		FSwap:		stx tmp1		; save data stack index
.8502	a6 4c		ldx $4c				ldx fp			; X=FP stack index
.8504	b5 4d		lda $4d,x			lda FSExp+0,x		; do FSExp
.8506	b4 4e		ldy $4e,x			ldy FSExp+1,x
.8508	95 4e		sta $4e,x			sta FSExp+1,x
.850a	94 4d		sty $4d,x			sty FSExp+0,x
.850c	b5 57		lda $57,x			lda FSMant0+0,x		; do FSMant0
.850e	b4 58		ldy $58,x			ldy FSMant0+1,x
.8510	95 58		sta $58,x			sta FSMant0+1,x
.8512	94 57		sty $57,x			sty FSMant0+0,x
.8514	b5 61		lda $61,x			lda FSMant1+0,x		; do FSMant1
.8516	b4 62		ldy $62,x			ldy FSMant1+1,x
.8518	95 62		sta $62,x			sta FSMant1+1,x
.851a	94 61		sty $61,x			sty FSMant1+0,x
.851c	b5 6b		lda $6b,x			lda FSMant2+0,x		; do FSMant2
.851e	b4 6c		ldy $6c,x			ldy FSMant2+1,x
.8520	95 6c		sta $6c,x			sta FSMant2+1,x
.8522	94 6b		sty $6b,x			sty FSMant2+0,x
.8524	b5 75		lda $75,x			lda FSMant3+0,x		; do FSMant3
.8526	b4 76		ldy $76,x			ldy FSMant3+1,x
.8528	95 76		sta $76,x			sta FSMant3+1,x
.852a	94 75		sty $75,x			sty FSMant3+0,x
.852c	a6 14		ldx $14				ldx tmp1		; restore data stack index
=46					CL	.var *-(WordListLink+wh_Xt)
=$852e					en = *	; remember here
>84fe	2e					.byte CL	;wh_CodeLength
.852e	60		rts				rts
>852f	46 54 75 63 6b			L1:	.text "FTuck"	;  name of word as a string, ending at wh_NameLastChar
>8534	65					.byte (("FTuck"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8535	7b 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8537	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8538	08					.byte NN	;wh_Flags	dictionary flags
=33972					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8539	20 00 85	jsr $8500	FTuck:		jsr FSwap
.853c	4c 9c 84	jmp $849c			jmp FOver
=6					CL	.var *-(WordListLink+wh_Xt)
=$853f					en = *	; remember here
>8537	06					.byte CL	;wh_CodeLength
>853f	46 52 6f 74			L1:	.text "FRot"	;  name of word as a string, ending at wh_NameLastChar
>8543	84					.byte (("FRot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8544	b4 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8546	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8547	00					.byte 0	;wh_Flags	dictionary flags
=33987					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8548	86 14		stx $14		FRot:		stx tmp1		; save data stack index
.854a	a5 4c		lda $4c				lda fp			; for FSMant3, FSMant2, FSMant1, FSMant0, FSExp
.854c	18		clc				clc
.854d	69 28		adc #$28			adc #4*FDim
.854f	d0 03		bne $8554			bne _3
.8551	8a		txa		_2:		txa			;    next byte
.8552	e9 0a		sbc #$0a			sbc #FDim
.8554	aa		tax		_3:		tax
.8555	b5 4f		lda $4f,x			lda FSExp+2,x		;   do a byte
.8557	b4 4e		ldy $4e,x			ldy FSExp+1,x
.8559	94 4f		sty $4f,x			sty FSExp+2,x
.855b	b4 4d		ldy $4d,x			ldy FSExp+0,x
.855d	94 4e		sty $4e,x			sty FSExp+1,x
.855f	95 4d		sta $4d,x			sta FSExp+0,x
.8561	e4 4c		cpx $4c				cpx fp			; done?
.8563	d0 ec		bne $8551			bne _2
.8565	a6 14		ldx $14				ldx tmp1		; restore param stack index
=31					CL	.var *-(WordListLink+wh_Xt)
=$8567					en = *	; remember here
>8546	1f					.byte CL	;wh_CodeLength
.8567	60		rts				rts
>8568	46 2d 52 6f 74			L1:	.text "F-Rot"	;  name of word as a string, ending at wh_NameLastChar
>856d	85					.byte (("F-Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>856e	c3 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8570	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8571	08					.byte NN	;wh_Flags	dictionary flags
=34029					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8572	20 48 85	jsr $8548	FMRot:		jsr FRot
.8575	4c 48 85	jmp $8548			jmp FRot
=6					CL	.var *-(WordListLink+wh_Xt)
=$8578					en = *	; remember here
>8570	06					.byte CL	;wh_CodeLength
>8578	46 40				L1:	.text "F@"	;  name of word as a string, ending at wh_NameLastChar
>857a	02					.byte (("F@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>857b	ed 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>857d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>857e	00					.byte 0	;wh_Flags	dictionary flags
=34042					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.857f	20 aa b3	jsr $b3aa	FAt:		jsr PopYA		; pop addr
.8582	85 16		sta $16		FAt_YA:		sta tmp2+0		; save addr
.8584	84 17		sty $17				sty tmp2+1
.8586	20 16 84	jsr $8416	FAt_Tmp2:	jsr FAllocX		; alloc FP stack entry
.8589	a0 00		ldy #$00			ldy #0			; copy mantissa
.858b	b1 16		lda ($16),y			lda (tmp2),y
.858d	95 75		sta $75,x			sta FSMant3,x
.858f	c8		iny				iny
.8590	b1 16		lda ($16),y			lda (tmp2),y
.8592	95 6b		sta $6b,x			sta FSMant2,x
.8594	c8		iny				iny
.8595	b1 16		lda ($16),y			lda (tmp2),y
.8597	95 61		sta $61,x			sta FSMant1,x
.8599	c8		iny				iny
.859a	b1 16		lda ($16),y			lda (tmp2),y
.859c	95 57		sta $57,x			sta FSMant0,x
.859e	c8		iny				iny			; copy exponent
.859f	b1 16		lda ($16),y			lda (tmp2),y
.85a1	95 4d		sta $4d,x			sta FSExp,x
.85a3	a6 14		ldx $14				ldx tmp1		; restore data stack index
=38					CL	.var *-(WordListLink+wh_Xt)
=$85a5					en = *	; remember here
>857d	26					.byte CL	;wh_CodeLength
.85a5	60		rts				rts
>85a6	46 21				L1:	.text "F!"	;  name of word as a string, ending at wh_NameLastChar
>85a8	22					.byte (("F!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>85a9	fa 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85ac	00					.byte 0	;wh_Flags	dictionary flags
=34088					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85ad	20 aa b3	jsr $b3aa	FStore:		jsr PopYA		; pop addr
.85b0	85 14		sta $14		FStore_YA:	sta tmp1+0		; save addr
.85b2	84 15		sty $15				sty tmp1+1
.85b4	86 16		stx $16				stx tmp2		; save data stack index
.85b6	a6 4c		ldx $4c				ldx fp			; Y= FP stack index
.85b8	b5 75		lda $75,x			lda FSMant3,x		; copy mantissa
.85ba	a0 00		ldy #$00			ldy #0
.85bc	91 14		sta ($14),y			sta (tmp1),y
.85be	b5 6b		lda $6b,x			lda FSMant2,x
.85c0	c8		iny				iny
.85c1	91 14		sta ($14),y			sta (tmp1),y
.85c3	b5 61		lda $61,x			lda FSMant1,x
.85c5	c8		iny				iny
.85c6	91 14		sta ($14),y			sta (tmp1),y
.85c8	b5 57		lda $57,x			lda FSMant0,x
.85ca	c8		iny				iny
.85cb	91 14		sta ($14),y			sta (tmp1),y
.85cd	b5 4d		lda $4d,x			lda FSExp,x		; copy exponent
.85cf	c8		iny				iny
.85d0	91 14		sta ($14),y			sta (tmp1),y
.85d2	e6 4c		inc $4c				inc fp			; FDrop
.85d4	a6 16		ldx $16				ldx tmp2		; restore data stack index
=41					CL	.var *-(WordListLink+wh_Xt)
=$85d6					en = *	; remember here
>85ab	29					.byte CL	;wh_CodeLength
.85d6	60		rts				rts
>85d7	46 2c				L1:	.text "F,"	;  name of word as a string, ending at wh_NameLastChar
>85d9	82					.byte (("F,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>85da	28 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85dd	08					.byte NN	;wh_Flags	dictionary flags
=34137					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85de	a5 00		lda $00		FComma:		lda cp+0
.85e0	a4 01		ldy $01				ldy cp+1
.85e2	20 b0 85	jsr $85b0			jsr FStore_YA
.85e5	a9 05		lda #$05			lda #5			; Float
.85e7	20 a6 b7	jsr $b7a6			jsr PushZA
.85ea	4c 88 c0	jmp $c088			jmp Allot
=15					CL	.var *-(WordListLink+wh_Xt)
=$85ed					en = *	; remember here
>85dc	0f					.byte CL	;wh_CodeLength
>85ed	46 30 21			L1:	.text "F0!"	;  name of word as a string, ending at wh_NameLastChar
>85f0	23					.byte (("F0!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>85f1	59 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85f4	08					.byte NN	;wh_Flags	dictionary flags
=34160					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85f5	20 aa b3	jsr $b3aa	FZStore:	jsr PopYA		; pop addr
.85f8	85 14		sta $14		FZStore_YA:	sta tmp1+0
.85fa	84 15		sty $15				sty tmp1+1
.85fc	a9 00		lda #$00			lda #0
.85fe	a0 04		ldy #$04			ldy #5-1
.8600	91 14		sta ($14),y	-		sta (tmp1),y
.8602	88		dey				dey
.8603	10 fb		bpl $8600			bpl -
=16					CL	.var *-(WordListLink+wh_Xt)
=$8605					en = *	; remember here
>85f3	10					.byte CL	;wh_CodeLength
.8605	60		rts				rts
>8606	46 43 6d 70			L1:	.text "FCmp"	;  name of word as a string, ending at wh_NameLastChar
>860a	04					.byte (("FCmp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>860b	70 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>860d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>860e	08					.byte NN	;wh_Flags	dictionary flags
=34186					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.860f	20 20 86	jsr $8620			jsr FCmpA		; compare #s
.8612	a8		tay				tay			; return >0, 0, <0
.8613	4c 64 b7	jmp $b764			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$8616					en = *	; remember here
>860d	07					.byte CL	;wh_CodeLength
>8616	46 43 6d 70 41			L1:	.text "FCmpA"	;  name of word as a string, ending at wh_NameLastChar
>861b	25					.byte (("FCmpA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>861c	8a 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>861e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>861f	08					.byte NN	;wh_Flags	dictionary flags
=34203					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8620	86 14		stx $14		FCmpA:		stx tmp1		; save data stack index
.8622	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.8624	b5 57		lda $57,x			lda FSMant0+0,x		; r2 mantissa = 0 ?
.8626	f0 35		beq $865d			beq _r2Zero
.8628	b4 58		ldy $58,x			ldy FSMant0+1,x		; r1 mantissa = 0 ?
.862a	f0 2b		beq $8657			beq _r1Zero
.862c	55 58		eor $58,x			eor FSMant0+1,x		; compare mantissa sign
.862e	30 3d		bmi $866d			bmi _MantissaSignDifferent
.8630	38		sec				sec			; compare exponent
.8631	b5 4e		lda $4e,x			lda FSExp+1,x
.8633	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8635	d0 2b		bne $8662			bne _ExponentDifferent
.8637	98		tya				tya			; compare mantissa MSB
.8638	f5 57		sbc $57,x			sbc FSMant0+0,x		;   always same sign so can't overflow
.863a	d0 17		bne $8653			bne _13
.863c	b5 62		lda $62,x			lda FSMant1+1,x		; compare mantissa 1
.863e	f5 61		sbc $61,x			sbc FSMant1+0,x
.8640	d0 0c		bne $864e			bne _12
.8642	b5 6c		lda $6c,x			lda FSMant2+1,x		; compare mantissa 2
.8644	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8646	d0 06		bne $864e			bne _12
.8648	b5 76		lda $76,x			lda FSMant3+1,x		; compare mantissa LSB
.864a	f5 75		sbc $75,x			sbc FSMant3+0,x
.864c	f0 05		beq $8653			beq _13
.864e	6a		ror a		_12:		ror a
.864f	49 80		eor #$80	_14:		eor #$80
.8651	09 01		ora #$01			ora #1
.8653	a6 14		ldx $14		_13:		ldx tmp1		; restore data stack index
.8655	a8		tay				tay			; set CPU flags
.8656	60		rts				rts
.8657	b5 57		lda $57,x	_r1Zero:	lda FSMant0+0,x		; return r2
.8659	d0 f4		bne $864f			bne _14
.865b	f0 f6		beq $8653			beq _13
.865d	b5 58		lda $58,x	_r2Zero:	lda FSMant0+1,x		; return 0-r1
.865f	4c 53 86	jmp $8653			jmp _13
.8662					_ExponentDifferent:
.8662	50 02		bvc $8666			bvc +
.8664	49 80		eor #$80			eor #$80
.8666					+
.8666	55 57		eor $57,x			eor FSMant0+0,x
.8668	a6 14		ldx $14				ldx tmp1		; restore data stack index
.866a	09 01		ora #$01			ora #1			; set CPU flags
.866c	60		rts				rts
.866d					_MantissaSignDifferent:
.866d	98		tya				tya
.866e	a6 14		ldx $14				ldx tmp1		; restore data stack index
.8670	09 01		ora #$01			ora #1
.8672	60		rts				rts
=83					CL	.var *-(WordListLink+wh_Xt)
=$8673					en = *	; remember here
>861e	53					.byte CL	;wh_CodeLength
>8673	46 6c 6f 6f 72			L1:	.text "Floor"	;  name of word as a string, ending at wh_NameLastChar
>8678	45					.byte (("Floor"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8679	9b 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>867b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>867c	08					.byte NN	;wh_Flags	dictionary flags
=34296					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.867d	a4 4c		ldy $4c		Floor:		ldy fp
.867f	b9 57 00	lda $0057,y			lda FSMant0,y		; negative?
.8682	10 19		bpl $869d			bpl _a
.8684	b9 4d 00	lda $004d,y			lda FSExp,y		; > -1 ?
.8687	10 14		bpl $869d			bpl _a
.8689	a9 80		lda #$80			lda #$80		; return -1
.868b	99 57 00	sta $0057,y			sta FSMant0,y
.868e	a9 00		lda #$00			lda #0
.8690	99 4d 00	sta $004d,y			sta FSExp,y
.8693	99 61 00	sta $0061,y			sta FSMant1,y
.8696	99 6b 00	sta $006b,y			sta FSMant2,y
.8699	99 75 00	sta $0075,y			sta FSMant3,y
.869c	60		rts				rts
.869d	a9 1f		lda #$1f	_a:		lda #31
.869f	20 a5 86	jsr $86a5			jsr FIntAlignA
.86a2	4c a0 8a	jmp $8aa0			jmp FNorm
=40					CL	.var *-(WordListLink+wh_Xt)
=$86a5					en = *	; remember here
>867b	28					.byte CL	;wh_CodeLength
.86a5					FIntAlignA:
.86a5	85 16		sta $16				sta tmp2+0		; save alignment
.86a7	46 15		lsr $15				lsr tmp1+1		; init saved lo bit
.86a9	86 14		stx $14				stx tmp1+0		; save data stack index
.86ab	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.86ad	b5 57		lda $57,x			lda FSMant0,x
.86af	b4 4d		ldy $4d,x			ldy FSExp,x
.86b1	10 18		bpl $86cb			bpl _18
.86b3	a4 16		ldy $16				ldy tmp2+0		; return zero
.86b5	a9 00		lda #$00			lda #0
.86b7	95 61		sta $61,x			sta FSMant1,x
.86b9	95 6b		sta $6b,x			sta FSMant2,x
.86bb	95 75		sta $75,x			sta FSMant3,x
.86bd	f0 10		beq $86cf			beq _30
.86bf	c8		iny		_12:		iny			; exp += 1
.86c0	c9 80		cmp #$80			cmp #$80		; mantissa >>=1
.86c2	6a		ror a				ror a
.86c3	76 61		ror $61,x			ror FSMant1,x
.86c5	76 6b		ror $6b,x			ror FSMant2,x
.86c7	76 75		ror $75,x			ror FSMant3,x
.86c9	66 15		ror $15				ror tmp1+1		; save lo bit
.86cb	c4 16		cpy $16		_18:		cpy tmp2+0		; while exp<alignment
.86cd	90 f0		bcc $86bf			bcc _12
.86cf	95 57		sta $57,x	_30:		sta FSMant0,x
.86d1	94 4d		sty $4d,x			sty FSExp,x
.86d3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.86d5	06 15		asl $15				asl tmp1+1		; set carry bit
.86d7	60		rts				rts
>86d8	46 54 72 75 6e 63		L1:	.text "FTrunc"	;  name of word as a string, ending at wh_NameLastChar
>86de	66					.byte (("FTrunc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>86df	f8 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86e2	08					.byte NN	;wh_Flags	dictionary flags
=34398					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86e3	a4 4c		ldy $4c		FTrunc:		ldy fp
.86e5	b9 57 00	lda $0057,y			lda FSMant0,y
.86e8	10 93		bpl $867d			bpl Floor
.86ea	20 a2 8b	jsr $8ba2			jsr FNegate
.86ed	20 7d 86	jsr $867d			jsr Floor
.86f0	4c a2 8b	jmp $8ba2			jmp FNegate
>86f3	46 52 6f 75 6e 64		L1:	.text "FRound"	;  name of word as a string, ending at wh_NameLastChar
>86f9	86					.byte (("FRound"[-1]&7)<<5)+(*-L1)	;wh_HNL
>86fa	5e 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86fd	08					.byte NN	;wh_Flags	dictionary flags
=34425					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86fe	a9 1f		lda #$1f	FRound:		lda #31
.8700	20 a5 86	jsr $86a5			jsr FIntAlignA
.8703	90 03		bcc $8708			bcc _15
.8705	4c 5e 8b	jmp $8b5e			jmp F1Plus
.8708	4c a0 8a	jmp $8aa0	_15:		jmp FNorm
=13					CL	.var *-(WordListLink+wh_Xt)
=$870b					en = *	; remember here
>86fc	0d					.byte CL	;wh_CodeLength
>870b	46 49 6e 74 46 72 63		L1:	.text "FIntFrc"	;  name of word as a string, ending at wh_NameLastChar
>8712	67					.byte (("FIntFrc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8713	79 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8715	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8716	08					.byte NN	;wh_Flags	dictionary flags
=34450					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8717	20 78 84	jsr $8478	FIntFrc:	jsr FDup	; ( r1 r1 )
.871a	20 7d 86	jsr $867d			jsr Floor	; ( r1 rint )
.871d	20 39 85	jsr $8539			jsr FTuck	; ( rint r1 rint )
.8720	20 6b 8b	jsr $8b6b			jsr FMinus	; ( rint rfrac )
.8723	4c 00 85	jmp $8500			jmp FSwap	; ( rfrac rint )
=15					CL	.var *-(WordListLink+wh_Xt)
=$8726					en = *	; remember here
>8715	0f					.byte CL	;wh_CodeLength
>8726	46 30 3d			L1:	.text "F0="	;  name of word as a string, ending at wh_NameLastChar
>8729	a3					.byte (("F0="[-1]&7)<<5)+(*-L1)	;wh_HNL
>872a	92 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>872c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>872d	08					.byte NN	;wh_Flags	dictionary flags
=34473					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.872e	a4 4c		ldy $4c		FZEq:		ldy fp
.8730	b9 57 00	lda $0057,y			lda FSMant0,y
.8733	d0 26		bne $875b			bne FFalse1
.8735					FTrue1:
.8735	e6 4c		inc $4c				inc fp		; FDrop
.8737	4c 84 b7	jmp $b784			jmp True	; return true
=12					CL	.var *-(WordListLink+wh_Xt)
=$873a					en = *	; remember here
>872c	0c					.byte CL	;wh_CodeLength
>873a	46 30 3c 3e			L1:	.text "F0<>"	;  name of word as a string, ending at wh_NameLastChar
>873e	c4					.byte (("F0<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>873f	a9 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8741	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8742	08					.byte NN	;wh_Flags	dictionary flags
=34494					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8743	a4 4c		ldy $4c		FZNe:		ldy fp
.8745	b9 57 00	lda $0057,y			lda FSMant0,y
.8748	f0 11		beq $875b			beq FFalse1
.874a	d0 e9		bne $8735			bne FTrue1
=9					CL	.var *-(WordListLink+wh_Xt)
=$874c					en = *	; remember here
>8741	09					.byte CL	;wh_CodeLength
>874c	46 30 3c			L1:	.text "F0<"	;  name of word as a string, ending at wh_NameLastChar
>874f	83					.byte (("F0<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8750	be 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8752	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8753	08					.byte NN	;wh_Flags	dictionary flags
=34511					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8754	a4 4c		ldy $4c		FZLt:		ldy fp
.8756	b9 57 00	lda $0057,y			lda FSMant0,y
.8759	30 da		bmi $8735			bmi FTrue1
.875b					FFalse1:
.875b	e6 4c		inc $4c				inc fp		; FDrop
.875d	4c 97 b7	jmp $b797			jmp False	; return false
=12					CL	.var *-(WordListLink+wh_Xt)
=$8760					en = *	; remember here
>8752	0c					.byte CL	;wh_CodeLength
>8760	46 30 3e 3d			L1:	.text "F0>="	;  name of word as a string, ending at wh_NameLastChar
>8764	a4					.byte (("F0>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>8765	cf 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8767	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8768	08					.byte NN	;wh_Flags	dictionary flags
=34532					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8769	a4 4c		ldy $4c		FZGe:		ldy fp
.876b	b9 57 00	lda $0057,y			lda FSMant0,y
.876e	10 c5		bpl $8735			bpl FTrue1
.8770	30 e9		bmi $875b			bmi FFalse1
=9					CL	.var *-(WordListLink+wh_Xt)
=$8772					en = *	; remember here
>8767	09					.byte CL	;wh_CodeLength
>8772	46 30 3e			L1:	.text "F0>"	;  name of word as a string, ending at wh_NameLastChar
>8775	c3					.byte (("F0>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8776	e4 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8778	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8779	08					.byte NN	;wh_Flags	dictionary flags
=34549					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.877a	a4 4c		ldy $4c		FZGt:		ldy fp
.877c	b9 57 00	lda $0057,y			lda FSMant0,y
.877f	30 da		bmi $875b			bmi FFalse1
.8781	d0 b2		bne $8735			bne FTrue1
.8783	f0 d6		beq $875b			beq FFalse1
=11					CL	.var *-(WordListLink+wh_Xt)
=$8785					en = *	; remember here
>8778	0b					.byte CL	;wh_CodeLength
>8785	46 30 3c 3d			L1:	.text "F0<="	;  name of word as a string, ending at wh_NameLastChar
>8789	a4					.byte (("F0<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>878a	f5 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>878c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>878d	08					.byte NN	;wh_Flags	dictionary flags
=34569					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.878e	a4 4c		ldy $4c		FZLe:		ldy fp
.8790	b9 57 00	lda $0057,y			lda FSMant0,y
.8793	30 a0		bmi $8735			bmi FTrue1
.8795	d0 c4		bne $875b			bne FFalse1
.8797	f0 9c		beq $8735			beq FTrue1
=11					CL	.var *-(WordListLink+wh_Xt)
=$8799					en = *	; remember here
>878c	0b					.byte CL	;wh_CodeLength
>8799	46 3c				L1:	.text "F<"	;  name of word as a string, ending at wh_NameLastChar
>879b	82					.byte (("F<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>879c	09 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>879e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>879f	08					.byte NN	;wh_Flags	dictionary flags
=34587					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87a0	20 20 86	jsr $8620	FLt:		jsr FCmpA
.87a3	30 35		bmi $87da			bmi FTrue2
.87a5					FFalse2:
.87a5	e6 4c		inc $4c				inc fp		; FDrop
.87a7	e6 4c		inc $4c				inc fp		; FDrop
.87a9	4c 97 b7	jmp $b797			jmp False	; return False
=12					CL	.var *-(WordListLink+wh_Xt)
=$87ac					en = *	; remember here
>879e	0c					.byte CL	;wh_CodeLength
>87ac	46 3e 3d			L1:	.text "F>="	;  name of word as a string, ending at wh_NameLastChar
>87af	a3					.byte (("F>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>87b0	1b 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87b3	08					.byte NN	;wh_Flags	dictionary flags
=34607					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87b4	20 20 86	jsr $8620	FGe:		jsr FCmpA
.87b7	10 21		bpl $87da			bpl FTrue2
.87b9	30 ea		bmi $87a5			bmi FFalse2
=7					CL	.var *-(WordListLink+wh_Xt)
=$87bb					en = *	; remember here
>87b2	07					.byte CL	;wh_CodeLength
>87bb	46 3e				L1:	.text "F>"	;  name of word as a string, ending at wh_NameLastChar
>87bd	c2					.byte (("F>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>87be	2f 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87c0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87c1	08					.byte NN	;wh_Flags	dictionary flags
=34621					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87c2	20 20 86	jsr $8620	FGt:		jsr FCmpA
.87c5	30 de		bmi $87a5			bmi FFalse2
.87c7	d0 11		bne $87da			bne FTrue2
.87c9	f0 da		beq $87a5			beq FFalse2
=9					CL	.var *-(WordListLink+wh_Xt)
=$87cb					en = *	; remember here
>87c0	09					.byte CL	;wh_CodeLength
>87cb	46 3c 3d			L1:	.text "F<="	;  name of word as a string, ending at wh_NameLastChar
>87ce	a3					.byte (("F<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>87cf	3d 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87d2	08					.byte NN	;wh_Flags	dictionary flags
=34638					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87d3	20 20 86	jsr $8620	FLe:		jsr FCmpA
.87d6	30 02		bmi $87da			bmi FTrue2
.87d8	d0 cb		bne $87a5			bne FFalse2
.87da					FTrue2:
.87da	e6 4c		inc $4c				inc fp		; FDrop
.87dc	e6 4c		inc $4c				inc fp		; FDrop
.87de	4c 84 b7	jmp $b784			jmp True	; return True
=14					CL	.var *-(WordListLink+wh_Xt)
=$87e1					en = *	; remember here
>87d1	0e					.byte CL	;wh_CodeLength
>87e1	46 3c 3e			L1:	.text "F<>"	;  name of word as a string, ending at wh_NameLastChar
>87e4	c3					.byte (("F<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>87e5	4e 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87e8	08					.byte NN	;wh_Flags	dictionary flags
=34660					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87e9	20 20 86	jsr $8620	FNe:		jsr FCmpA
.87ec	d0 ec		bne $87da			bne FTrue2
.87ee	f0 b5		beq $87a5			beq FFalse2
=7					CL	.var *-(WordListLink+wh_Xt)
=$87f0					en = *	; remember here
>87e7	07					.byte CL	;wh_CodeLength
>87f0	46 3d				L1:	.text "F="	;  name of word as a string, ending at wh_NameLastChar
>87f2	a2					.byte (("F="[-1]&7)<<5)+(*-L1)	;wh_HNL
>87f3	64 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87f5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87f6	08					.byte NN	;wh_Flags	dictionary flags
=34674					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87f7	20 20 86	jsr $8620	FEq:		jsr FCmpA
.87fa	d0 a9		bne $87a5			bne FFalse2
.87fc	f0 dc		beq $87da			beq FTrue2
=7					CL	.var *-(WordListLink+wh_Xt)
=$87fe					en = *	; remember here
>87f5	07					.byte CL	;wh_CodeLength
>87fe	46 7e 41 62 73			L1:	.text "F~Abs"	;  name of word as a string, ending at wh_NameLastChar
>8803	65					.byte (("F~Abs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8804	72 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8806	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8807	08					.byte NN	;wh_Flags	dictionary flags
=34691					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8808	20 72 85	jsr $8572	FTAbs:		jsr FMRot
.880b	20 6b 8b	jsr $8b6b			jsr FMinus
.880e	20 c9 8b	jsr $8bc9			jsr FAbs
.8811	4c c2 87	jmp $87c2			jmp FGt
=12					CL	.var *-(WordListLink+wh_Xt)
=$8814					en = *	; remember here
>8806	0c					.byte CL	;wh_CodeLength
>8814	46 7e 52 65 6c			L1:	.text "F~Rel"	;  name of word as a string, ending at wh_NameLastChar
>8819	85					.byte (("F~Rel"[-1]&7)<<5)+(*-L1)	;wh_HNL
>881a	83 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>881c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>881d	08					.byte NN	;wh_Flags	dictionary flags
=34713					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.881e	20 9c 84	jsr $849c	FTRel:		jsr FOver
.8821	a9 03		lda #$03			lda #3
.8823	20 c3 84	jsr $84c3			jsr FPickA
.8826	20 29 8b	jsr $8b29			jsr FPlus
.8829	20 c9 8b	jsr $8bc9			jsr FAbs
.882c	20 fd 8b	jsr $8bfd			jsr FStar		; r1 r2 r3*|r1+r2|
.882f	20 72 85	jsr $8572			jsr FMRot		; r3*|r1+r2| r1 r2
.8832	20 6b 8b	jsr $8b6b			jsr FMinus
.8835	20 c9 8b	jsr $8bc9			jsr FAbs
.8838	4c c2 87	jmp $87c2			jmp FGt
=29					CL	.var *-(WordListLink+wh_Xt)
=$883b					en = *	; remember here
>881c	1d					.byte CL	;wh_CodeLength
>883b	46 7e				L1:	.text "F~"	;  name of word as a string, ending at wh_NameLastChar
>883d	c2					.byte (("F~"[-1]&7)<<5)+(*-L1)	;wh_HNL
>883e	99 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8840	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8841	08					.byte NN	;wh_Flags	dictionary flags
=34749					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8842	a4 4c		ldy $4c		FTilde:		ldy fp
.8844	b9 57 00	lda $0057,y			lda FSMant0,y
.8847	30 06		bmi $884f			bmi _10			; r3<0
.8849	d0 bd		bne $8808			bne FTAbs		; r3>0
.884b	e6 4c		inc $4c				inc fp			; r3=0
.884d	d0 a8		bne $87f7			bne FEq
.884f	20 a2 8b	jsr $8ba2	_10:		jsr FNegate
.8852	4c 1e 88	jmp $881e			jmp FTRel
=19					CL	.var *-(WordListLink+wh_Xt)
=$8855					en = *	; remember here
>8840	13					.byte CL	;wh_CodeLength
>8855	46 56 61 72 69 61 62 6c		L1:	.text "FVariable"	;  name of word as a string, ending at wh_NameLastChar
>885d	65
>885e	a9					.byte (("FVariable"[-1]&7)<<5)+(*-L1)	;wh_HNL
>885f	bd 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8861	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8862	0c					.byte IM+NN	;wh_Flags	dictionary flags
=34782					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8863	20 7f c1	jsr $c17f	FVariable:	jsr Create		; compile word header & push PFA adr
.8866	20 b9 bb	jsr $bbb9			jsr adjust_z		; fix word code length
.8869	20 ec 88	jsr $88ec			jsr F0			; alloc & init data
.886c	4c de 85	jmp $85de			jmp FComma
=12					CL	.var *-(WordListLink+wh_Xt)
=$886f					en = *	; remember here
>8861	0c					.byte CL	;wh_CodeLength
>886f	46 4c 69 74 65 72 61 6c		L1:	.text "FLiteral"	;  name of word as a string, ending at wh_NameLastChar
>8877	88					.byte (("FLiteral"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8878	de 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>887a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>887b	0c					.byte IM+NN	;wh_Flags	dictionary flags
=34807					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.887c	20 91 88	jsr $8891	FLiteral:	jsr FLitTest
.887f	f0 0a		beq $888b			beq _Short
.8881	a9 cc		lda #$cc			lda #<FLitI		; compile JSR FLitI
.8883	a0 88		ldy #$88			ldy #>FLitI
.8885	20 e5 cc	jsr $cce5			jsr Jsr_Comma_YA
.8888	4c de 85	jmp $85de			jmp FComma		; inline operand, return
.888b	20 9d 88	jsr $889d	_Short:		jsr FLitShort
.888e	4c e5 cc	jmp $cce5			jmp Jsr_Comma_YA	; compile jsr FLitYA, & return
=21					CL	.var *-(WordListLink+wh_Xt)
=$8891					en = *	; remember here
>887a	15					.byte CL	;wh_CodeLength
.8891					FLitTest:
.8891	a4 4c		ldy $4c				ldy fp
.8893	b9 61 00	lda $0061,y			lda FSMant1,y		; will short work?
.8896	19 6b 00	ora $006b,y			ora FSMant2,y
.8899	19 75 00	ora $0075,y			ora FSMant3,y
.889c	60		rts				rts
.889d					FLitShort:
.889d	a9 a9		lda #$a9			lda #$a9		; compile LDA #mant0
.889f	20 a6 cc	jsr $cca6			jsr C_Comma_A
.88a2	b9 57 00	lda $0057,y			lda FSMant0,y
.88a5	20 a6 cc	jsr $cca6			jsr C_Comma_A
.88a8	a9 a0		lda #$a0			lda #$a0		; compile LDY #exp
.88aa	20 a6 cc	jsr $cca6			jsr C_Comma_A
.88ad	b9 4d 00	lda $004d,y			lda FSExp,y
.88b0	20 a6 cc	jsr $cca6			jsr C_Comma_A
.88b3	e6 4c		inc $4c				inc fp			; FDrop
.88b5	a9 ba		lda #$ba			lda #<FLitYA		; point at FLitYA
.88b7	a0 88		ldy #$88			ldy #>FLitYA
.88b9	60		rts				rts
.88ba					FLitYA:
.88ba	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.88bd	94 4d		sty $4d,x			sty FSExp,x
.88bf	95 57		sta $57,x			sta FSMant0,x
.88c1	a9 00		lda #$00			lda #0
.88c3	95 61		sta $61,x			sta FSMant1,x
.88c5	95 6b		sta $6b,x			sta FSMant2,x
.88c7	95 75		sta $75,x			sta FSMant3,x
.88c9	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.88cb	60		rts				rts
.88cc					FLitI:
.88cc	68		pla				pla			; tmp2= RTS addr
.88cd	85 16		sta $16				sta tmp2+0
.88cf	18		clc				clc			; bump RTS addr over inline data
.88d0	69 05		adc #$05			adc #5
.88d2	a8		tay				tay
.88d3	68		pla				pla
.88d4	85 17		sta $17				sta tmp2+1
.88d6	69 00		adc #$00			adc #0
.88d8	48		pha				pha
.88d9	98		tya				tya
.88da	48		pha				pha
.88db	e6 16		inc $16				inc tmp2+0		; tmp2 +=1 1 (correct RTS addr)
.88dd	d0 02		bne $88e1			bne +
.88df	e6 17		inc $17				inc tmp2+1
.88e1					+
.88e1	4c 86 85	jmp $8586			jmp FAt_Tmp2		; fetch inline data, & return
>88e4	30 2e 65			L1:	.text "0.e"	;  name of word as a string, ending at wh_NameLastChar
>88e7	a3					.byte (("0.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>88e8	f7 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88ea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88eb	08					.byte NN	;wh_Flags	dictionary flags
=34919					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88ec	a9 00		lda #$00	F0:		lda #0
.88ee	a0 80		ldy #$80			ldy #$80
.88f0	d0 c8		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$88f2					en = *	; remember here
>88ea	06					.byte CL	;wh_CodeLength
>88f2	31 30 30 30 2e 65		L1:	.text "1000.e"	;  name of word as a string, ending at wh_NameLastChar
>88f8	a6					.byte (("1000.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>88f9	67 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88fb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88fc	08					.byte NN	;wh_Flags	dictionary flags
=34936					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88fd	a9 7d		lda #$7d	F1000:		lda #$7d
.88ff	a0 0a		ldy #$0a			ldy #10
.8901	d0 b7		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8903					en = *	; remember here
>88fb	06					.byte CL	;wh_CodeLength
>8903	31 30 2e 65			L1:	.text "10.e"	;  name of word as a string, ending at wh_NameLastChar
>8907	a4					.byte (("10.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8908	78 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>890a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>890b	08					.byte NN	;wh_Flags	dictionary flags
=34951					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.890c	a9 50		lda #$50	F10:		lda #$50
.890e	a0 04		ldy #$04			ldy #4
.8910	d0 a8		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8912					en = *	; remember here
>890a	06					.byte CL	;wh_CodeLength
>8912	32 2e 65			L1:	.text "2.e"	;  name of word as a string, ending at wh_NameLastChar
>8915	a3					.byte (("2.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8916	87 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8918	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8919	08					.byte NN	;wh_Flags	dictionary flags
=34965					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.891a	a9 40		lda #$40	F2:		lda #$40
.891c	a0 02		ldy #$02			ldy #2
.891e	d0 9a		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8920					en = *	; remember here
>8918	06					.byte CL	;wh_CodeLength
>8920	31 2e 65			L1:	.text "1.e"	;  name of word as a string, ending at wh_NameLastChar
>8923	a3					.byte (("1.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8924	95 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8926	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8927	08					.byte NN	;wh_Flags	dictionary flags
=34979					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8928	a9 40		lda #$40	F1:		lda #$40
.892a	a0 01		ldy #$01			ldy #1
.892c	d0 8c		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$892e					en = *	; remember here
>8926	06					.byte CL	;wh_CodeLength
>892e	2e 31 65			L1:	.text ".1e"	;  name of word as a string, ending at wh_NameLastChar
>8931	a3					.byte ((".1e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8932	a3 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8934	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8935	08					.byte NN	;wh_Flags	dictionary flags
=34993					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8936	20 bb 89	jsr $89bb	F10th:		jsr FConstantRun
>8939	67 66 66 66					.dword $66666667	; 32 bit signed binary mantissa.  $40000000 = +0.5
>893d	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$893e					en = *	; remember here
>8934	08					.byte CL	;wh_CodeLength
>893e	50 69				L1:	.text "Pi"	;  name of word as a string, ending at wh_NameLastChar
>8940	22					.byte (("Pi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8941	b1 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8943	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8944	08					.byte NN	;wh_Flags	dictionary flags
=35008					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8945	20 bb 89	jsr $89bb	FPi:		jsr FConstantRun
>8948	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>894c	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$894d					en = *	; remember here
>8943	08					.byte CL	;wh_CodeLength
>894d	50 69 2f 32			L1:	.text "Pi/2"	;  name of word as a string, ending at wh_NameLastChar
>8951	44					.byte (("Pi/2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8952	c0 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8954	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8955	08					.byte NN	;wh_Flags	dictionary flags
=35025					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8956	20 bb 89	jsr $89bb	FPiH:		jsr FConstantRun
>8959	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>895d	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$895e					en = *	; remember here
>8954	08					.byte CL	;wh_CodeLength
>895e	50 69 2f 34			L1:	.text "Pi/4"	;  name of word as a string, ending at wh_NameLastChar
>8962	84					.byte (("Pi/4"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8963	d1 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8965	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8966	08					.byte NN	;wh_Flags	dictionary flags
=35042					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8967	20 bb 89	jsr $89bb	FPiQ:		jsr FConstantRun
>896a	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>896e	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$896f					en = *	; remember here
>8965	08					.byte CL	;wh_CodeLength
>896f	32 50 69			L1:	.text "2Pi"	;  name of word as a string, ending at wh_NameLastChar
>8972	23					.byte (("2Pi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8973	e2 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8975	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8976	08					.byte NN	;wh_Flags	dictionary flags
=35058					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8977	20 bb 89	jsr $89bb	F2Pi:		jsr FConstantRun
>897a	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>897e	03						.char 3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$897f					en = *	; remember here
>8975	08					.byte CL	;wh_CodeLength
>897f	46 2e 45			L1:	.text "F.E"	;  name of word as a string, ending at wh_NameLastChar
>8982	a3					.byte (("F.E"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8983	f2 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8985	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8986	08					.byte NN	;wh_Flags	dictionary flags
=35074					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8987	20 bb 89	jsr $89bb	FE:		jsr FConstantRun
>898a	2c 2a fc 56					.dword $56fc2a2c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>898e	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$898f					en = *	; remember here
>8985	08					.byte CL	;wh_CodeLength
>898f	46 43 6f 6e 73 74 61 6e		L1:	.text "FConstant"	;  name of word as a string, ending at wh_NameLastChar
>8997	74
>8998	89					.byte (("FConstant"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8999	02 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>899b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>899c	08					.byte NN	;wh_Flags	dictionary flags
=35096					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.899d	20 e2 c0	jsr $c0e2	FConstant:	jsr Header_Comma	; compile word header
.89a0	20 91 88	jsr $8891			jsr FLitTest		; will short work?
.89a3	f0 0d		beq $89b2			beq _Short
.89a5	a9 bb		lda #$bb			lda #<FConstantRun	; compile call
.89a7	a0 89		ldy #$89			ldy #>FConstantRun
.89a9	20 e5 cc	jsr $cce5			jsr Jsr_Comma_YA
.89ac	20 b9 bb	jsr $bbb9			jsr adjust_z
.89af	4c de 85	jmp $85de			jmp FComma		; inline operand, & return
.89b2					_Short:
.89b2	20 9d 88	jsr $889d			jsr FLitShort		; compile load value
.89b5	20 fc cc	jsr $ccfc			jsr Jmp_Comma_YA
.89b8	4c b9 bb	jmp $bbb9			jmp adjust_z
=30					CL	.var *-(WordListLink+wh_Xt)
=$89bb					en = *	; remember here
>899b	1e					.byte CL	;wh_CodeLength
.89bb					FConstantRun:
.89bb	68		pla				pla			; tmp2= pop RTS addr & add 1
.89bc	18		clc				clc
.89bd	69 01		adc #$01			adc #1
.89bf	85 16		sta $16				sta tmp2+0
.89c1	68		pla				pla
.89c2	69 00		adc #$00			adc #0
.89c4	85 17		sta $17				sta tmp2+1
.89c6	4c 86 85	jmp $8586			jmp FAt_Tmp2		; fetch inline data, & return
>89c9	46 56 61 6c 75 65		L1:	.text "FValue"	;  name of word as a string, ending at wh_NameLastChar
>89cf	a6					.byte (("FValue"[-1]&7)<<5)+(*-L1)	;wh_HNL
>89d0	18 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89d3	0c					.byte IM+NN	;wh_Flags	dictionary flags
=35151					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89d4	20 e2 c0	jsr $c0e2	FValue:		jsr Header_Comma	; compile word header
.89d7	a9 e4		lda #$e4			lda #<FValue_runtime	; compile JSR FValue_runtime
.89d9	a0 89		ldy #$89			ldy #>FValue_runtime
.89db	20 e5 cc	jsr $cce5			jsr Jsr_Comma_YA
.89de	20 b9 bb	jsr $bbb9			jsr adjust_z		; fix word length
.89e1	4c de 85	jmp $85de			jmp FComma		; alloc & init value
=16					CL	.var *-(WordListLink+wh_Xt)
=$89e4					en = *	; remember here
>89d2	10					.byte CL	;wh_CodeLength
.89e4					FValue_runtime:
.89e4	4c bb 89	jmp $89bb			jmp FConstantRun
>89e7	46 53 63 61 6c 65		L1:	.text "FScale"	;  name of word as a string, ending at wh_NameLastChar
>89ed	a6					.byte (("FScale"[-1]&7)<<5)+(*-L1)	;wh_HNL
>89ee	4f 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89f1	08					.byte NN	;wh_Flags	dictionary flags
=35181					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89f2	20 8e b3	jsr $b38e	FScale:		jsr PopA		; pop n
.89f5	86 14		stx $14		FScaleA:	stx tmp1		; save data stack index
.89f7	a6 4c		ldx $4c				ldx fp
.89f9	b4 57		ldy $57,x			ldy FSMant0,x		; mantissa zero?
.89fb	f0 07		beq $8a04			beq _8
.89fd	18		clc				clc
.89fe	75 4d		adc $4d,x			adc FSExp,x
.8a00	95 4d		sta $4d,x			sta FSExp,x
.8a02	70 03		bvs $8a07			bvs _overflow		; overflow or underflow?
.8a04	a6 14		ldx $14		_8:		ldx tmp1		; restore data stack index
.8a06	60		rts				rts
.8a07					_overflow:
.8a07	a6 14		ldx $14				ldx tmp1		; restore data stack index
.8a09	20 0c b4	jsr $b40c			jsr Throw_FpOutOfRange
=26					CL	.var *-(WordListLink+wh_Xt)
=$8a0c					en = *	; remember here
>89f0	1a					.byte CL	;wh_CodeLength
>8a0c	46 32 2a			L1:	.text "F2*"	;  name of word as a string, ending at wh_NameLastChar
>8a0f	43					.byte (("F2*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a10	6d 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a12	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a13	08					.byte NN	;wh_Flags	dictionary flags
=35215					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a14	a9 01		lda #$01	F2Star:		lda #1
.8a16	d0 dd		bne $89f5			bne FScaleA
=4					CL	.var *-(WordListLink+wh_Xt)
=$8a18					en = *	; remember here
>8a12	04					.byte CL	;wh_CodeLength
>8a18	46 32 2f			L1:	.text "F2/"	;  name of word as a string, ending at wh_NameLastChar
>8a1b	e3					.byte (("F2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a1c	8f 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a1e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a1f	08					.byte NN	;wh_Flags	dictionary flags
=35227					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a20	a9 ff		lda #$ff	F2Slash:	lda #$ff
.8a22	d0 d1		bne $89f5			bne FScaleA
=4					CL	.var *-(WordListLink+wh_Xt)
=$8a24					en = *	; remember here
>8a1e	04					.byte CL	;wh_CodeLength
>8a24	2b 8a				L1:	.text FMAlignX	;  name of word as a string, ending at wh_NameLastChar
>8a26	82					.byte ((FMAlignX[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a27	9b 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a29	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a2a	08					.byte NN	;wh_Flags	dictionary flags
=35238					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a2b	86 14		stx $14		FMAlignX:	stx tmp1+0	; save data stack index
.8a2d	a6 4c		ldx $4c				ldx fp		; load FP stack index
.8a2f	e0 09		cpx #$09			cpx #FDim-1	; check FP stack for 2 entries
.8a31	b0 60		bcs $8a93			bcs Throw_FPStack_3
.8a33	b5 4d		lda $4d,x			lda FSExp+0,x
.8a35	38		sec				sec
.8a36	f5 4e		sbc $4e,x			sbc FSExp+1,x	; compare exponents
.8a38	a8		tay				tay
.8a39	f0 22		beq $8a5d			beq _rts	; already = ?
.8a3b	10 2b		bpl $8a68			bpl _2		; r2 smaller?
.8a3d					_1:
.8a3d	70 4a		bvs $8a89			bvs _2z		; was this a big positive #?
.8a3f	c0 e0		cpy #$e0			cpy #-32
.8a41	90 1b		bcc $8a5e			bcc _1z		; all significant bits gone?
.8a43	b5 57		lda $57,x			lda FSMant0+0,x
.8a45	29 80		and #$80			and #$80
.8a47	85 15		sta $15				sta tmp1+1	; prepare sign for shifts
.8a49	b5 57		lda $57,x			lda FSMant0+0,x
.8a4b	4a		lsr a		_1s:		lsr a
.8a4c	05 15		ora $15				ora tmp1+1
.8a4e	76 61		ror $61,x			ror FSMant1+0,x
.8a50	76 6b		ror $6b,x			ror FSMant2+0,x
.8a52	76 75		ror $75,x			ror FSMant3+0,x
.8a54	c8		iny				iny
.8a55	d0 f4		bne $8a4b			bne _1s
.8a57	95 57		sta $57,x	_1e:		sta FSMant0+0,x
.8a59	b5 4e		lda $4e,x			lda FSExp+1,x
.8a5b	95 4d		sta $4d,x			sta FSExp+0,x
.8a5d	60		rts		_rts:		rts
.8a5e	a9 00		lda #$00	_1z:		lda #0		; TOS=0
.8a60	95 61		sta $61,x			sta FSMant1+0,x
.8a62	95 6b		sta $6b,x			sta FSMant2+0,x
.8a64	95 75		sta $75,x			sta FSMant3+0,x
.8a66	f0 ef		beq $8a57			beq _1e
.8a68					_2:
.8a68	70 f4		bvs $8a5e			bvs _1z		; was this a big negative #?
.8a6a	c0 20		cpy #$20			cpy #32
.8a6c	b0 1b		bcs $8a89			bcs _2z		; all significant bits gone?
.8a6e	b5 58		lda $58,x			lda FSMant0+1,x
.8a70	29 80		and #$80			and #$80
.8a72	85 15		sta $15				sta tmp1+1	; prepare sign for shifts
.8a74	b5 58		lda $58,x			lda FSMant0+1,x
.8a76	4a		lsr a		_2s:		lsr a
.8a77	05 15		ora $15				ora tmp1+1
.8a79	76 62		ror $62,x			ror FSMant1+1,x
.8a7b	76 6c		ror $6c,x			ror FSMant2+1,x
.8a7d	76 76		ror $76,x			ror FSMant3+1,x
.8a7f	88		dey				dey
.8a80	d0 f4		bne $8a76			bne _2s
.8a82	95 58		sta $58,x	_2e:		sta FSMant0+1,x
.8a84	b5 4d		lda $4d,x			lda FSExp+0,x
.8a86	95 4e		sta $4e,x			sta FSExp+1,x
.8a88	60		rts				rts
.8a89	a9 00		lda #$00	_2z:		lda #0		; NOS=0
.8a8b	95 62		sta $62,x			sta FSMant1+1,x
.8a8d	95 6c		sta $6c,x			sta FSMant2+1,x
.8a8f	95 76		sta $76,x			sta FSMant3+1,x
.8a91	f0 ef		beq $8a82			beq _2e
=104					CL	.var *-(WordListLink+wh_Xt)
=$8a93					en = *	; remember here
>8a29	68					.byte CL	;wh_CodeLength
.8a93	4c 02 b4	jmp $b402	Throw_FPStack_3: jmp Throw_FPStack
>8a96	46 4e 6f 72 6d			L1:	.text "FNorm"	;  name of word as a string, ending at wh_NameLastChar
>8a9b	a5					.byte (("FNorm"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a9c	a6 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a9e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a9f	08					.byte NN	;wh_Flags	dictionary flags
=35355					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8aa0	86 14		stx $14		FNorm:		stx tmp1+0		; save data stack index
.8aa2	a6 4c		ldx $4c		FNormX:		ldx fp			; switch to FP stack
.8aa4	b4 4d		ldy $4d,x			ldy FSExp,x
.8aa6	b5 57		lda $57,x			lda FSMant0,x		; mantissa negative?
.8aa8	30 2d		bmi $8ad7			bmi _Neg
.8aaa	d0 0f		bne $8abb			bne _Pos2		; do byte shift
.8aac	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8aaf	d0 0a		bne $8abb			bne _Pos2
.8ab1	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ab4	d0 05		bne $8abb			bne _Pos2
.8ab6	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ab9	f0 43		beq $8afe			beq _zero		; no significant bits left?
.8abb	18		clc		_Pos2:		clc
.8abc	30 0a		bmi $8ac8			bmi _RShft
.8abe	88		dey		_Pos3:		dey			; do bit shift
.8abf	16 75		asl $75,x			asl FSMant3,x
.8ac1	36 6b		rol $6b,x			rol FSMant2,x
.8ac3	36 61		rol $61,x			rol FSMant1,x
.8ac5	2a		rol a				rol a
.8ac6	10 f6		bpl $8abe			bpl _Pos3
.8ac8					_RShft:
.8ac8	c8		iny				iny
.8ac9	6a		ror a				ror a
.8aca	76 61		ror $61,x			ror FSMant1,x
.8acc	76 6b		ror $6b,x			ror FSMant2,x
.8ace	76 75		ror $75,x			ror FSMant3,x
.8ad0					_28:
.8ad0	95 57		sta $57,x			sta FSMant0,x
.8ad2	94 4d		sty $4d,x			sty FSExp,x
.8ad4	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.8ad6	60		rts				rts
.8ad7					_Neg:
.8ad7	c9 ff		cmp #$ff			cmp #$ff
.8ad9	d0 11		bne $8aec			bne _Neg2	; do byte shift
.8adb	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ade	c9 ff		cmp #$ff			cmp #$ff
.8ae0	d0 0a		bne $8aec			bne _Neg2
.8ae2	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ae5	c9 ff		cmp #$ff			cmp #$ff
.8ae7	d0 03		bne $8aec			bne _Neg2
.8ae9	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8aec	c9 00		cmp #$00	_Neg2:		cmp #0
.8aee	10 d8		bpl $8ac8			bpl _RShft
.8af0	88		dey		_Neg3:		dey
.8af1	16 75		asl $75,x			asl FSMant3,x
.8af3	36 6b		rol $6b,x			rol FSMant2,x
.8af5	36 61		rol $61,x			rol FSMant1,x
.8af7	2a		rol a				rol a
.8af8	30 f6		bmi $8af0			bmi _Neg3
.8afa	10 cc		bpl $8ac8			bpl _RShft
.8afc	68		pla		_Zerop:		pla
.8afd	68		pla				pla		; pop rts addr from _ShiftB
.8afe	a9 00		lda #$00	_zero:		lda #0
.8b00	95 75		sta $75,x			sta FSMant3,x
.8b02	95 6b		sta $6b,x			sta FSMant2,x
.8b04	95 61		sta $61,x			sta FSMant1,x
.8b06	a0 80		ldy #$80			ldy #$80
.8b08	d0 c6		bne $8ad0			bne _28
.8b0a					_ShiftB:
.8b0a	98		tya				tya
.8b0b	38		sec				sec
.8b0c	e9 08		sbc #$08			sbc #8
.8b0e	a8		tay				tay
.8b0f	70 eb		bvs $8afc			bvs _zerop	;is this useful? do we need more of them?
.8b11	b5 61		lda $61,x			lda FSMant1,x
.8b13	48		pha				pha
.8b14	b5 6b		lda $6b,x			lda FSMant2,x
.8b16	95 61		sta $61,x			sta FSMant1,x
.8b18	b5 75		lda $75,x			lda FSMant3,x
.8b1a	95 6b		sta $6b,x			sta FSMant2,x
.8b1c	a9 00		lda #$00			lda #0
.8b1e	95 75		sta $75,x			sta FSMant3,x
.8b20	68		pla				pla
.8b21	60		rts				rts
=130					CL	.var *-(WordListLink+wh_Xt)
=$8b22					en = *	; remember here
>8a9e	82					.byte CL	;wh_CodeLength
>8b22	46 2b				L1:	.text "F+"	;  name of word as a string, ending at wh_NameLastChar
>8b24	62					.byte (("F+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b25	1b 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b27	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b28	08					.byte NN	;wh_Flags	dictionary flags
=35492					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b29	20 2b 8a	jsr $8a2b	FPlus:		jsr FMAlignX	; align mantissas
.8b2c	18		clc				clc		; add mantissas
.8b2d	b5 76		lda $76,x			lda FSMant3+1,x
.8b2f	75 75		adc $75,x			adc FSMant3+0,x
.8b31	95 76		sta $76,x			sta FSMant3+1,x
.8b33	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b35	75 6b		adc $6b,x			adc FSMant2+0,x
.8b37	95 6c		sta $6c,x			sta FSMant2+1,x
.8b39	b5 62		lda $62,x			lda FSMant1+1,x
.8b3b	75 61		adc $61,x			adc FSMant1+0,x
.8b3d	95 62		sta $62,x			sta FSMant1+1,x
.8b3f	b5 58		lda $58,x			lda FSMant0+1,x
.8b41	75 57		adc $57,x			adc FSMant0+0,x
.8b43					FPlusFin:
.8b43	e8		inx				inx		; FDrop
.8b44	86 4c		stx $4c				stx fp
.8b46	50 09		bvc $8b51	FPlusFin3:	bvc _19		; if overflow
.8b48	6a		ror a				ror a		;   shift mantissa right 1 bit
.8b49	76 61		ror $61,x			ror FSMant1,x
.8b4b	76 6b		ror $6b,x			ror FSMant2,x
.8b4d	76 75		ror $75,x			ror FSMant3,x
.8b4f	f6 4d		inc $4d,x			inc FSExp,x	;   adjust exponent
.8b51					_19:
.8b51	95 57		sta $57,x			sta FSMant0,x
.8b53	4c a2 8a	jmp $8aa2			jmp FNormX	; normalize, return
=45					CL	.var *-(WordListLink+wh_Xt)
=$8b56					en = *	; remember here
>8b27	2d					.byte CL	;wh_CodeLength
>8b56	46 31 2b			L1:	.text "F1+"	;  name of word as a string, ending at wh_NameLastChar
>8b59	63					.byte (("F1+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b5a	a4 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b5c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b5d	08					.byte NN	;wh_Flags	dictionary flags
=35545					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b5e	20 28 89	jsr $8928	F1Plus:		jsr F1
.8b61	4c 29 8b	jmp $8b29			jmp FPlus
=6					CL	.var *-(WordListLink+wh_Xt)
=$8b64					en = *	; remember here
>8b5c	06					.byte CL	;wh_CodeLength
>8b64	46 2d				L1:	.text "F-"	;  name of word as a string, ending at wh_NameLastChar
>8b66	a2					.byte (("F-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b67	d9 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b69	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b6a	08					.byte NN	;wh_Flags	dictionary flags
=35558					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b6b	20 2b 8a	jsr $8a2b	FMinus:		jsr FMAlignX	; align mantissas
.8b6e	38		sec				sec		; subtract mantissas
.8b6f	b5 76		lda $76,x			lda FSMant3+1,x
.8b71	f5 75		sbc $75,x			sbc FSMant3+0,x
.8b73	95 76		sta $76,x			sta FSMant3+1,x
.8b75	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b77	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8b79	95 6c		sta $6c,x			sta FSMant2+1,x
.8b7b	b5 62		lda $62,x			lda FSMant1+1,x
.8b7d	f5 61		sbc $61,x			sbc FSMant1+0,x
.8b7f	95 62		sta $62,x			sta FSMant1+1,x
.8b81	b5 58		lda $58,x			lda FSMant0+1,x
.8b83	f5 57		sbc $57,x			sbc FSMant0+0,x
.8b85	4c 43 8b	jmp $8b43			jmp FPlusFin
=29					CL	.var *-(WordListLink+wh_Xt)
=$8b88					en = *	; remember here
>8b69	1d					.byte CL	;wh_CodeLength
>8b88	46 31 2d			L1:	.text "F1-"	;  name of word as a string, ending at wh_NameLastChar
>8b8b	a3					.byte (("F1-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b8c	e6 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b8e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b8f	08					.byte NN	;wh_Flags	dictionary flags
=35595					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b90	20 28 89	jsr $8928	F1Minus:	jsr F1
.8b93	4c 6b 8b	jmp $8b6b			jmp FMinus
=6					CL	.var *-(WordListLink+wh_Xt)
=$8b96					en = *	; remember here
>8b8e	06					.byte CL	;wh_CodeLength
>8b96	46 4e 65 67 61 74 65		L1:	.text "FNegate"	;  name of word as a string, ending at wh_NameLastChar
>8b9d	a7					.byte (("FNegate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b9e	0b 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ba0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ba1	08					.byte NN	;wh_Flags	dictionary flags
=35613					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ba2	86 14		stx $14		FNegate:	stx tmp1	; save data stack index
.8ba4	a6 4c		ldx $4c				ldx fp		; X= FP stack index
.8ba6	38		sec				sec		; mantissa = 0 - mantissa
.8ba7	a9 00		lda #$00			lda #0
.8ba9	f5 75		sbc $75,x			sbc FSMant3,x
.8bab	95 75		sta $75,x			sta FSMant3,x
.8bad	a9 00		lda #$00			lda #0
.8baf	f5 6b		sbc $6b,x			sbc FSMant2,x
.8bb1	95 6b		sta $6b,x			sta FSMant2,x
.8bb3	a9 00		lda #$00			lda #0
.8bb5	f5 61		sbc $61,x			sbc FSMant1,x
.8bb7	95 61		sta $61,x			sta FSMant1,x
.8bb9	a9 00		lda #$00			lda #0
.8bbb	f5 57		sbc $57,x			sbc FSMant0,x
.8bbd	4c 46 8b	jmp $8b46			jmp FPlusFin3	; finish up, return
=30					CL	.var *-(WordListLink+wh_Xt)
=$8bc0					en = *	; remember here
>8ba0	1e					.byte CL	;wh_CodeLength
>8bc0	46 41 62 73			L1:	.text "FAbs"	;  name of word as a string, ending at wh_NameLastChar
>8bc4	64					.byte (("FAbs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8bc5	1d 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8bc7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8bc8	08					.byte NN	;wh_Flags	dictionary flags
=35652					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8bc9	a4 4c		ldy $4c		FAbs:		ldy fp
.8bcb	b9 57 00	lda $0057,y			lda FSMant0,y		; mantissa negative?
.8bce	30 d2		bmi $8ba2			bmi FNegate
.8bd0	60		rts				rts
=8					CL	.var *-(WordListLink+wh_Xt)
=$8bd1					en = *	; remember here
>8bc7	08					.byte CL	;wh_CodeLength
.8bd1	4c 02 b4	jmp $b402	Throw_FPStack_4: jmp Throw_FPStack
.8bd4	a4 4c		ldy $4c		FPos:		ldy fp			; load FP stack index
.8bd6	c0 09		cpy #$09			cpy #FDim-1		; check FP stack for 2
.8bd8	b0 f7		bcs $8bd1			bcs Throw_FPStack_4
.8bda	b9 57 00	lda $0057,y			lda FSMant0+0,y		; calc result sign
.8bdd	59 58 00	eor $0058,y			eor FSMant0+1,y
.8be0	08		php				php
.8be1	b9 58 00	lda $0058,y			lda FSMant0+1,y		; if NOS negative
.8be4	10 07		bpl $8bed			bpl +
.8be6	e6 4c		inc $4c				inc fp			;   point at NOS
.8be8	20 a2 8b	jsr $8ba2			jsr FNegate		;   negate NOS
.8beb	c6 4c		dec $4c				dec fp			;   restore fp
.8bed					+
.8bed	20 c9 8b	jsr $8bc9			jsr FAbs		; abs TOS
.8bf0	86 14		stx $14				stx tmp1+0		; save data stack index
.8bf2	a6 4c		ldx $4c				ldx fp			; load FP stack index
.8bf4	28		plp				plp			; restore sign flag
.8bf5	60		rts				rts
>8bf6	46 2a				L1:	.text "F*"	;  name of word as a string, ending at wh_NameLastChar
>8bf8	42					.byte (("F*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8bf9	44 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8bfb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8bfc	08					.byte NN	;wh_Flags	dictionary flags
=35704					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8bfd					FStar:
.8bfd	20 d4 8b	jsr $8bd4			jsr FPos		; make r1 & r2 positive,
.8c00	08		php				php			;   save r3 sign
.8c01	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8c03	38		sec				sec
.8c04	75 4e		adc $4e,x			adc FSExp+1,x
.8c06	95 4e		sta $4e,x			sta FSExp+1,x
.8c08	50 12		bvc $8c1c			bvc _49			; IfVs,
.8c0a	b0 06		bcs $8c12			bcs _zero		;   underflow?
.8c0c	a6 14		ldx $14				ldx tmp1+0		;   restore data stack index
.8c0e	28		plp				plp			; RDrop sign flag
.8c0f	20 0c b4	jsr $b40c			jsr Throw_FpOutOfRange
.8c12	e8		inx		_zero:		inx			; F2Drop
.8c13	e8		inx				inx
.8c14	86 4c		stx $4c				stx fp
.8c16	28		plp				plp			; rdrop saved result sign
.8c17	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c19	4c ec 88	jmp $88ec			jmp F0			; return zero
.8c1c					_49:
.8c1c	a9 00		lda #$00			lda #0			; tmp32= 0
.8c1e	85 16		sta $16				sta tmp2+0
.8c20	85 17		sta $17				sta tmp2+1
.8c22	85 18		sta $18				sta tmp3+0
.8c24	85 19		sta $19				sta tmp3+1
.8c26	b5 76		lda $76,x			lda FSMant3+1,x
.8c28	20 57 8c	jsr $8c57			jsr _Byte		; do bytes of r1 mantissa
.8c2b	b5 6c		lda $6c,x			lda FSMant2+1,x
.8c2d	20 57 8c	jsr $8c57			jsr _Byte
.8c30	b5 62		lda $62,x			lda FSMant1+1,x
.8c32	20 57 8c	jsr $8c57			jsr _Byte
.8c35	b5 58		lda $58,x			lda FSMant0+1,x
.8c37	20 57 8c	jsr $8c57			jsr _Byte
.8c3a	a5 16		lda $16				lda tmp2+0		; r1.mant= tmp32
.8c3c	95 76		sta $76,x			sta FSMant3+1,x
.8c3e	a5 17		lda $17				lda tmp2+1
.8c40	95 6c		sta $6c,x			sta FSMant2+1,x
.8c42	a5 18		lda $18				lda tmp3+0
.8c44	95 62		sta $62,x			sta FSMant1+1,x
.8c46	a5 19		lda $19				lda tmp3+1
.8c48	95 58		sta $58,x			sta FSMant0+1,x
.8c4a	e6 4c		inc $4c				inc fp			; FDrop
.8c4c	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c4e	28		plp				plp			; fix result sign
.8c4f	10 03		bpl $8c54			bpl +
.8c51	4c a2 8b	jmp $8ba2			jmp FNegate
.8c54					+
.8c54	4c a0 8a	jmp $8aa0			jmp FNorm
.8c57					_Byte:
.8c57	49 ff		eor #$ff			eor #$ff
.8c59	85 15		sta $15				sta tmp1+1
.8c5b	a0 08		ldy #$08			ldy #8			; for each bit in byte
.8c5d	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8c5f	b0 18		bcs $8c79			bcs _b3
.8c61	a5 16		lda $16				lda tmp2+0		;     tmp32 += r2
.8c63	75 75		adc $75,x			adc FSMant3+0,x
.8c65	85 16		sta $16				sta tmp2+0
.8c67	a5 17		lda $17				lda tmp2+1
.8c69	75 6b		adc $6b,x			adc FSMant2+0,x
.8c6b	85 17		sta $17				sta tmp2+1
.8c6d	a5 18		lda $18				lda tmp3+0
.8c6f	75 61		adc $61,x			adc FSMant1+0,x
.8c71	85 18		sta $18				sta tmp3+0
.8c73	a5 19		lda $19				lda tmp3+1
.8c75	75 57		adc $57,x			adc FSMant0+0,x
.8c77	85 19		sta $19				sta tmp3+1
.8c79	46 19		lsr $19		_b3:		lsr tmp3+1		;   tmp32 >>= 1
.8c7b	66 18		ror $18				ror tmp3+0
.8c7d	66 17		ror $17				ror tmp2+1
.8c7f	66 16		ror $16				ror tmp2+0
.8c81	88		dey				dey			;  next bit
.8c82	d0 d9		bne $8c5d			bne _b1
.8c84	60		rts				rts
=136					CL	.var *-(WordListLink+wh_Xt)
=$8c85					en = *	; remember here
>8bfb	88					.byte CL	;wh_CodeLength
>8c85	46 53 71 72			L1:	.text "FSqr"	;  name of word as a string, ending at wh_NameLastChar
>8c89	44					.byte (("FSqr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8c8a	78 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8c8c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8c8d	08					.byte NN	;wh_Flags	dictionary flags
=35849					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8c8e	20 78 84	jsr $8478	FSqr:		jsr FDup
.8c91	4c fd 8b	jmp $8bfd			jmp FStar
=6					CL	.var *-(WordListLink+wh_Xt)
=$8c94					en = *	; remember here
>8c8c	06					.byte CL	;wh_CodeLength
>8c94	46 31 30 2a			L1:	.text "F10*"	;  name of word as a string, ending at wh_NameLastChar
>8c98	44					.byte (("F10*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8c99	09 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8c9b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8c9c	08					.byte NN	;wh_Flags	dictionary flags
=35864					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8c9d	20 78 84	jsr $8478	F10Star:	jsr FDup
.8ca0	a4 4c		ldy $4c				ldy fp
.8ca2	b9 4d 00	lda $004d,y			lda FSExp+0,y
.8ca5	18		clc				clc
.8ca6	69 01		adc #$01			adc #1
.8ca8	99 4d 00	sta $004d,y			sta FSExp+0,y
.8cab	18		clc				clc
.8cac	69 02		adc #$02			adc #2
.8cae	99 4e 00	sta $004e,y			sta FSExp+1,y
.8cb1	4c 29 8b	jmp $8b29			jmp FPlus
=23					CL	.var *-(WordListLink+wh_Xt)
=$8cb4					en = *	; remember here
>8c9b	17					.byte CL	;wh_CodeLength
>8cb4	46 2f				L1:	.text "F/"	;  name of word as a string, ending at wh_NameLastChar
>8cb6	e2					.byte (("F/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8cb7	18 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8cb9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8cba	08					.byte NN	;wh_Flags	dictionary flags
=35894					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8cbb	20 d4 8b	jsr $8bd4	FSlash:		jsr FPos		; make r1 & r2 positive
.8cbe	08		php				php			;   save result sign
.8cbf	b5 4e		lda $4e,x			lda FSExp+1,x		; calc exponent
.8cc1	18		clc				clc
.8cc2	69 01		adc #$01			adc #1
.8cc4	38		sec				sec
.8cc5	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8cc7	95 4e		sta $4e,x			sta FSExp+1,x
.8cc9	50 12		bvc $8cdd			bvc _49			;  IfVs
.8ccb	b0 06		bcs $8cd3			bcs _Zero		; underflow?
.8ccd	28		plp				plp			; drop saved result sign
.8cce	a6 15		ldx $15				ldx tmp1+1		; restore data stack index
.8cd0	20 0c b4	jsr $b40c			jsr Throw_FpOutOfRange	; overflow
.8cd3	e8		inx		_Zero:		inx			; F2Drop
.8cd4	e8		inx				inx
.8cd5	86 4c		stx $4c				stx fp
.8cd7	28		plp				plp			; drop saved result sign
.8cd8	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8cda	4c ec 88	jmp $88ec			jmp F0			; return 0
.8cdd					_49:
.8cdd	b5 76		lda $76,x			lda FSMant3+1,x		; tmp32 = r1
.8cdf	85 16		sta $16				sta tmp2+0
.8ce1	b5 6c		lda $6c,x			lda FSMant2+1,x
.8ce3	85 17		sta $17				sta tmp2+1
.8ce5	b5 62		lda $62,x			lda FSMant1+1,x
.8ce7	85 18		sta $18				sta tmp3+0
.8ce9	b5 58		lda $58,x			lda FSMant0+1,x
.8ceb	85 19		sta $19				sta tmp3+1
.8ced	20 16 8d	jsr $8d16			jsr _Byte
.8cf0	95 58		sta $58,x			sta FSMant0+1,x
.8cf2	20 16 8d	jsr $8d16			jsr _Byte
.8cf5	95 62		sta $62,x			sta FSMant1+1,x
.8cf7	20 16 8d	jsr $8d16			jsr _Byte
.8cfa	95 6c		sta $6c,x			sta FSMant2+1,x
.8cfc	20 16 8d	jsr $8d16			jsr _Byte
.8cff	95 76		sta $76,x			sta FSMant3+1,x
.8d01	56 58		lsr $58,x			lsr FSMant0+1,x
.8d03	76 62		ror $62,x			ror FSMant1+1,x
.8d05	76 6c		ror $6c,x			ror FSMant2+1,x
.8d07	76 76		ror $76,x			ror FSMant3+1,x
.8d09	e6 4c		inc $4c				inc fp			; FDrop
.8d0b	a6 14		ldx $14				ldx tmp1+0		; restore X
.8d0d	28		plp				plp			; fix sign
.8d0e	10 03		bpl $8d13			bpl +
.8d10	20 a2 8b	jsr $8ba2			jsr FNegate
.8d13	4c a0 8a	jmp $8aa0	+		jmp FNorm
.8d16					_Byte:
.8d16	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d18					_1:
.8d18	a5 19		lda $19				lda tmp3+1		;   if r1>=r2
.8d1a	d5 57		cmp $57,x			cmp FSMant0+0,x
.8d1c	d0 10		bne $8d2e			bne _4
.8d1e	a5 18		lda $18				lda tmp3+0
.8d20	d5 61		cmp $61,x			cmp FSMant1+0,x
.8d22	d0 0a		bne $8d2e			bne _4
.8d24	a5 17		lda $17				lda tmp2+1
.8d26	d5 6b		cmp $6b,x			cmp FSMant2+0,x
.8d28	d0 04		bne $8d2e			bne _4
.8d2a	a5 16		lda $16				lda tmp2+0
.8d2c	d5 75		cmp $75,x			cmp FSMant3+0,x
.8d2e	90 18		bcc $8d48	_4:		bcc _2
.8d30	a5 16		lda $16				lda tmp2+0		;     tmp32 -= r2
.8d32	f5 75		sbc $75,x			sbc FSMant3+0,x
.8d34	85 16		sta $16				sta tmp2+0
.8d36	a5 17		lda $17				lda tmp2+1
.8d38	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8d3a	85 17		sta $17				sta tmp2+1
.8d3c	a5 18		lda $18				lda tmp3+0
.8d3e	f5 61		sbc $61,x			sbc FSMant1+0,x
.8d40	85 18		sta $18				sta tmp3+0
.8d42	a5 19		lda $19				lda tmp3+1
.8d44	f5 57		sbc $57,x			sbc FSMant0+0,x
.8d46	85 19		sta $19				sta tmp3+1
.8d48	26 15		rol $15		_2:		rol tmp1+1		;   accum quotient bits
.8d4a	06 16		asl $16				asl tmp2+0
.8d4c	26 17		rol $17				rol tmp2+1
.8d4e	26 18		rol $18				rol tmp3+0
.8d50	26 19		rol $19				rol tmp3+1		;   tmp32<<=1
.8d52	88		dey				dey			;  next
.8d53	d0 c3		bne $8d18			bne _1
.8d55	a5 15		lda $15				lda tmp1+1		; return bits
.8d57	60		rts				rts
=157					CL	.var *-(WordListLink+wh_Xt)
=$8d58					en = *	; remember here
>8cb9	9d					.byte CL	;wh_CodeLength
>8d58	46 31 2f			L1:	.text "F1/"	;  name of word as a string, ending at wh_NameLastChar
>8d5b	e3					.byte (("F1/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8d5c	36 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8d5e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8d5f	08					.byte NN	;wh_Flags	dictionary flags
=36059					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8d60	20 28 89	jsr $8928	F1Slash:	jsr F1
.8d63	20 00 85	jsr $8500			jsr FSwap
.8d66	4c bb 8c	jmp $8cbb			jmp FSlash
=9					CL	.var *-(WordListLink+wh_Xt)
=$8d69					en = *	; remember here
>8d5e	09					.byte CL	;wh_CodeLength
>8d69	45 2a				L1:	.text "E*"	;  name of word as a string, ending at wh_NameLastChar
>8d6b	42					.byte (("E*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8d6c	db 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8d6e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8d6f	08					.byte NN	;wh_Flags	dictionary flags
=36075					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8d70					EStar:
.8d70	20 d4 8b	jsr $8bd4			jsr FPos		; make r1 & r2 positive
.8d73	08		php				php			;   remember result sign
.8d74	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8d76	38		sec				sec
.8d77	75 4e		adc $4e,x			adc FSExp+1,x
.8d79	95 4e		sta $4e,x			sta FSExp+1,x
.8d7b	70 15		bvs $8d92			bvs _ExpOvfl
.8d7d	b5 58		lda $58,x			lda FSMant0+1,x		; save e1
.8d7f	48		pha				pha
.8d80	b5 62		lda $62,x			lda FSMant1+1,x
.8d82	a0 00		ldy #$00			ldy #0
.8d84	94 58		sty $58,x			sty FSMant0+1,x
.8d86	94 62		sty $62,x			sty FSMant1+1,x		; zero result
.8d88	20 a1 8d	jsr $8da1			jsr _Byte		; do FSMant1+1 byte
.8d8b	68		pla				pla
.8d8c	20 a1 8d	jsr $8da1			jsr _Byte		; do FSMant0+1 byte
.8d8f	4c be 8d	jmp $8dbe			jmp EFix3		; finish
.8d92					_ExpOvfl:
.8d92	b0 05		bcs $8d99			bcs _Zero		;underflow?
.8d94	a6 14		ldx $14				ldx tmp1+0		; restore X
.8d96	20 0c b4	jsr $b40c			jsr Throw_FpOutOfRange	;overflow
.8d99	a9 00		lda #$00	_Zero:		lda #0
.8d9b	95 62		sta $62,x			sta FSMant1+1,x
.8d9d	95 58		sta $58,x			sta FSMant0+1,x
.8d9f	f0 1d		beq $8dbe			beq EFix3
.8da1					_Byte:
.8da1	85 15		sta $15				sta tmp1+1
.8da3	a0 08		ldy #$08			ldy #8			; for 8 bits
.8da5	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8da7	90 0d		bcc $8db6			bcc _b5
.8da9	18		clc				clc			;     r3 += r2
.8daa	b5 61		lda $61,x			lda FSMant1+0,x
.8dac	75 62		adc $62,x			adc FSMant1+1,x
.8dae	95 62		sta $62,x			sta FSMant1+1,x
.8db0	b5 57		lda $57,x			lda FSMant0+0,x
.8db2	75 58		adc $58,x			adc FSMant0+1,x
.8db4	95 58		sta $58,x			sta FSMant0+1,x
.8db6					_b5:
.8db6	76 58		ror $58,x			ror FSMant0+1,x		;   r3 <<= 1
.8db8	76 62		ror $62,x			ror FSMant1+1,x
.8dba	88		dey				dey			;  next bit
.8dbb	d0 e8		bne $8da5			bne _b1
.8dbd	60		rts				rts
=78					CL	.var *-(WordListLink+wh_Xt)
=$8dbe					en = *	; remember here
>8d6e	4e					.byte CL	;wh_CodeLength
.8dbe					EFix3:
.8dbe	a9 00		lda #$00			lda #0			; zero unused mantissa
.8dc0	95 6c		sta $6c,x			sta FSMant2+1,x
.8dc2	95 76		sta $76,x			sta FSMant3+1,x
.8dc4	e6 4c		inc $4c				inc fp			; FDrop
.8dc6	a6 14		ldx $14				ldx tmp1+0		; restore X
.8dc8	28		plp				plp			;fix result sign
.8dc9	10 03		bpl $8dce			bpl +
.8dcb	4c a2 8b	jmp $8ba2			jmp FNegate
.8dce	4c a0 8a	jmp $8aa0	+		jmp FNorm
>8dd1	45 53 71 72			L1:	.text "ESqr"	;  name of word as a string, ending at wh_NameLastChar
>8dd5	44					.byte (("ESqr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8dd6	eb 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8dd8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8dd9	08					.byte NN	;wh_Flags	dictionary flags
=36181					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8dda	20 78 84	jsr $8478	ESqr:		jsr FDup
.8ddd	4c 70 8d	jmp $8d70			jmp EStar
=6					CL	.var *-(WordListLink+wh_Xt)
=$8de0					en = *	; remember here
>8dd8	06					.byte CL	;wh_CodeLength
>8de0	45 2f				L1:	.text "E/"	;  name of word as a string, ending at wh_NameLastChar
>8de2	e2					.byte (("E/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8de3	55 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8de5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8de6	08					.byte NN	;wh_Flags	dictionary flags
=36194					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8de7	20 d4 8b	jsr $8bd4	ESlash:		jsr FPos	; make r1 & r2 positive
.8dea	08		php				php		; remember result sign
.8deb	b5 4e		lda $4e,x			lda FSExp+1,x		; calc r3 exponent
.8ded	38		sec				sec
.8dee	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8df0	70 17		bvs $8e09			bvs _ExpOvfl
.8df2	18		clc				clc
.8df3	69 01		adc #$01			adc #1
.8df5	95 4e		sta $4e,x			sta FSExp+1,x
.8df7	20 0f 8e	jsr $8e0f			jsr _Byte		; gen quotient hi byte
.8dfa	48		pha				pha
.8dfb	20 0f 8e	jsr $8e0f			jsr _Byte		; gen quotient lo byte
.8dfe	95 62		sta $62,x			sta FSMant1+1,x
.8e00	68		pla				pla
.8e01	4a		lsr a				lsr a
.8e02	95 58		sta $58,x			sta FSMant0+1,x
.8e04	76 62		ror $62,x			ror FSMant1+1,x
.8e06	4c be 8d	jmp $8dbe			jmp EFix3
.8e09					_ExpOvfl:
.8e09	28		plp				plp			; rdrop saved result sign
.8e0a	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e0c	20 0c b4	jsr $b40c			jsr Throw_FpOutOfRange	; overflow
.8e0f					_Byte:
.8e0f	a0 08		ldy #$08			ldy #8			; for 8 bits
.8e11	b5 62		lda $62,x	_b1:		lda FSMant1+1,x		;   if r1 >= r2
.8e13	d5 61		cmp $61,x			cmp FSMant1+0,x
.8e15	b5 58		lda $58,x			lda FSMant0+1,x
.8e17	f5 57		sbc $57,x			sbc FSMant0+0,x
.8e19	90 09		bcc $8e24			bcc _b5
.8e1b	95 58		sta $58,x			sta FSMant0+1,x
.8e1d	b5 62		lda $62,x			lda FSMant1+1,x		;     r1 -= r2
.8e1f	f5 61		sbc $61,x			sbc FSMant1+0,x
.8e21	95 62		sta $62,x			sta FSMant1+1,x
.8e23	38		sec				sec
.8e24					_b5:
.8e24	26 15		rol $15				rol tmp1+1		;   save quotient bit
.8e26	16 62		asl $62,x			asl FSMant1+1,x		;   r1 *= 2
.8e28	36 58		rol $58,x			rol FSMant0+1,x
.8e2a	88		dey				dey			;  next bit
.8e2b	d0 e4		bne $8e11			bne _b1
.8e2d	a5 15		lda $15				lda tmp1+1		; return bits
.8e2f	60		rts				rts
=73					CL	.var *-(WordListLink+wh_Xt)
=$8e30					en = *	; remember here
>8de5	49					.byte CL	;wh_CodeLength
>8e30	45 31 2f			L1:	.text "E1/"	;  name of word as a string, ending at wh_NameLastChar
>8e33	e3					.byte (("E1/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e34	62 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e36	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e37	08					.byte NN	;wh_Flags	dictionary flags
=36275					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e38	20 28 89	jsr $8928	E1Slash:	jsr F1
.8e3b	20 00 85	jsr $8500			jsr FSwap
.8e3e	4c e7 8d	jmp $8de7			jmp ESlash
=9					CL	.var *-(WordListLink+wh_Xt)
=$8e41					en = *	; remember here
>8e36	09					.byte CL	;wh_CodeLength
>8e41	53 3e 46			L1:	.text "S>F"	;  name of word as a string, ending at wh_NameLastChar
>8e44	c3					.byte (("S>F"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e45	b3 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e47	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e48	08					.byte NN	;wh_Flags	dictionary flags
=36292					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e49	20 aa b3	jsr $b3aa	SToF:		jsr PopYA		; pop n
.8e4c	20 16 84	jsr $8416	SToFYA:		jsr FAllocX		; alloc FP stack entry
.8e4f	94 57		sty $57,x			sty FSMant0,x		; copy n to mantissa
.8e51	95 61		sta $61,x			sta FSMant1,x
.8e53	a9 00		lda #$00			lda #0			; pad mantissa
.8e55	95 6b		sta $6b,x			sta FSMant2,x
.8e57	95 75		sta $75,x			sta FSMant3,x
.8e59	a9 0f		lda #$0f			lda #15			; set exponent
.8e5b	95 4d		sta $4d,x			sta FSExp,x
.8e5d	4c a2 8a	jmp $8aa2			jmp FNormX		; normalize, return
=23					CL	.var *-(WordListLink+wh_Xt)
=$8e60					en = *	; remember here
>8e47	17					.byte CL	;wh_CodeLength
>8e60	44 3e 46			L1:	.text "D>F"	;  name of word as a string, ending at wh_NameLastChar
>8e63	c3					.byte (("D>F"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e64	c4 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e66	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e67	08					.byte NN	;wh_Flags	dictionary flags
=36323					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e68	20 16 84	jsr $8416	FDToF:		jsr FAllocX		; alloc FP stack entry
.8e6b	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e6d	a4 4c		ldy $4c				ldy fp
.8e6f	b5 26		lda $26,x			lda DStack+2,x		; mantissa= d
.8e71	99 75 00	sta $0075,y			sta FSMant3,y
.8e74	b5 27		lda $27,x			lda DStack+3,x
.8e76	99 6b 00	sta $006b,y			sta FSMant2,y
.8e79	b5 24		lda $24,x			lda DStack+0,x
.8e7b	99 61 00	sta $0061,y			sta FSMant1,y
.8e7e	b5 25		lda $25,x			lda DStack+1,x
.8e80	99 57 00	sta $0057,y			sta FSMant0,y
.8e83	a9 1f		lda #$1f			lda #31			; set exponent
.8e85	99 4d 00	sta $004d,y			sta FSExp,y
.8e88	20 c1 c4	jsr $c4c1			jsr Two_Drop
.8e8b	4c a0 8a	jmp $8aa0			jmp FNorm		; normalize, return
=38					CL	.var *-(WordListLink+wh_Xt)
=$8e8e					en = *	; remember here
>8e66	26					.byte CL	;wh_CodeLength
>8e8e	46 3e 53			L1:	.text "F>S"	;  name of word as a string, ending at wh_NameLastChar
>8e91	63					.byte (("F>S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e92	e3 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e94	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e95	08					.byte NN	;wh_Flags	dictionary flags
=36369					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e96	a4 4c		ldy $4c		FToS:		ldy fp
.8e98	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8e9b	08		php				php
.8e9c	10 03		bpl $8ea1			bpl +
.8e9e	20 a2 8b	jsr $8ba2			jsr FNegate
.8ea1					+
.8ea1	a9 0f		lda #$0f			lda #15
.8ea3	20 a5 86	jsr $86a5			jsr FIntAlignA
.8ea6	c0 10		cpy #$10			cpy #15+1		; always positive, so unsigned compare works
.8ea8	b0 17		bcs $8ec1			bcs _overflow
.8eaa	a4 4c		ldy $4c				ldy fp
.8eac	ca		dex				dex
.8ead	ca		dex				dex
.8eae	b9 57 00	lda $0057,y			lda FSMant0,y
.8eb1	95 25		sta $25,x			sta DStack+1,x
.8eb3	b9 61 00	lda $0061,y			lda FSMant1,y
.8eb6	95 24		sta $24,x			sta DStack+0,x
.8eb8	e6 4c		inc $4c				inc fp			; FDrop
.8eba	28		plp				plp			; apply saved sign
.8ebb	30 01		bmi $8ebe			bmi +
.8ebd	60		rts				rts
.8ebe	4c 1a c6	jmp $c61a	+		jmp Negate
.8ec1	28		plp		_overflow:	plp			; RDrop saved sign
.8ec2	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8ec4	20 33 b4	jsr $b433			jsr ThrowA
=49					CL	.var *-(WordListLink+wh_Xt)
=$8ec7					en = *	; remember here
>8e94	31					.byte CL	;wh_CodeLength
>8ec7	46 3e 44			L1:	.text "F>D"	;  name of word as a string, ending at wh_NameLastChar
>8eca	83					.byte (("F>D"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8ecb	11 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ecd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ece	08					.byte NN	;wh_Flags	dictionary flags
=36426					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ecf	a4 4c		ldy $4c		FToD:		ldy fp
.8ed1	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8ed4	08		php				php
.8ed5	10 03		bpl $8eda			bpl +
.8ed7	20 a2 8b	jsr $8ba2			jsr FNegate
.8eda					+
.8eda	a9 1f		lda #$1f			lda #31
.8edc	20 a5 86	jsr $86a5			jsr FIntAlignA
.8edf	c0 20		cpy #$20			cpy #31+1		; always positive, so unsigned compare works
.8ee1	b0 23		bcs $8f06			bcs _overflow
.8ee3	a4 4c		ldy $4c				ldy fp
.8ee5	ca		dex				dex			; d= mantissa
.8ee6	ca		dex				dex
.8ee7	ca		dex				dex
.8ee8	ca		dex				dex
.8ee9	b9 57 00	lda $0057,y			lda FSMant0,y
.8eec	95 25		sta $25,x			sta DStack+1,x
.8eee	b9 61 00	lda $0061,y			lda FSMant1,y
.8ef1	95 24		sta $24,x			sta DStack+0,x
.8ef3	b9 6b 00	lda $006b,y			lda FSMant2,y
.8ef6	95 27		sta $27,x			sta DStack+3,x
.8ef8	b9 75 00	lda $0075,y			lda FSMant3,y
.8efb	95 26		sta $26,x			sta DStack+2,x
.8efd	e6 4c		inc $4c				inc fp			; FDrop
.8eff	28		plp				plp			; apply saved sign
.8f00	30 01		bmi $8f03			bmi +
.8f02	60		rts				rts
.8f03	4c 4b c6	jmp $c64b	+		jmp DNegate
.8f06	28		plp		_overflow:	plp			; RDrop sign
.8f07	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8f09	20 33 b4	jsr $b433			jsr ThrowA
=61					CL	.var *-(WordListLink+wh_Xt)
=$8f0c					en = *	; remember here
>8ecd	3d					.byte CL	;wh_CodeLength
>8f0c	46 52 6e 64			L1:	.text "FRnd"	;  name of word as a string, ending at wh_NameLastChar
>8f10	84					.byte (("FRnd"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f11	4a 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f13	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f14	08					.byte NN	;wh_Flags	dictionary flags
=36496					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f15	20 df 82	jsr $82df	FRnd:		jsr Rand		; generate next RndState
.8f18	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.8f1b	4a		lsr a				lsr a			;   make positive
.8f1c	95 57		sta $57,x			sta FSMant0,x
.8f1e	94 61		sty $61,x			sty FSMant1,x
.8f20	ad 35 03	lda $0335			lda RndState+0
.8f23	95 6b		sta $6b,x			sta FSMant2,x
.8f25	ad 36 03	lda $0336			lda RndState+1
.8f28	95 75		sta $75,x			sta FSMant3,x
.8f2a	a9 00		lda #$00			lda #0			; exponent=0
.8f2c	95 4d		sta $4d,x			sta FSExp,x
.8f2e	4c a2 8a	jmp $8aa2			jmp FNormX		; normalize, return
=28					CL	.var *-(WordListLink+wh_Xt)
=$8f31					en = *	; remember here
>8f13	1c					.byte CL	;wh_CodeLength
>8f31	46 53 71 72 74			L1:	.text "FSqrt"	;  name of word as a string, ending at wh_NameLastChar
>8f36	85					.byte (("FSqrt"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f37	90 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f39	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f3a	08					.byte NN	;wh_Flags	dictionary flags
=36534					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f3b	a4 4c		ldy $4c		FSqrt:		ldy fp
.8f3d	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.8f40	d0 01		bne $8f43			bne +
.8f42	60		rts				rts			;   just return the zero
.8f43					+
.8f43	20 78 84	jsr $8478			jsr FDup		; get trial value
.8f46	a4 4c		ldy $4c				ldy fp
.8f48	b9 4d 00	lda $004d,y			lda FSExp,y		; halve the exponent of trial value
.8f4b	c9 80		cmp #$80			cmp #$80
.8f4d	6a		ror a				ror a
.8f4e	99 4d 00	sta $004d,y			sta FSExp,y
.8f51	a9 09		lda #$09			lda #9			; for 9 iterations
.8f53	48		pha		_3:		pha
.8f54	20 f0 84	jsr $84f0			jsr F2Dup		;   calc new trial value
.8f57	20 bb 8c	jsr $8cbb			jsr FSlash
.8f5a	20 29 8b	jsr $8b29			jsr FPlus
.8f5d	20 20 8a	jsr $8a20			jsr F2Slash
.8f60	68		pla				pla			;  next
.8f61	38		sec				sec
.8f62	e9 01		sbc #$01			sbc #1
.8f64	d0 ed		bne $8f53			bne _3
.8f66	4c 52 84	jmp $8452			jmp FNip		; return trial value
=46					CL	.var *-(WordListLink+wh_Xt)
=$8f69					en = *	; remember here
>8f39	2e					.byte CL	;wh_CodeLength
>8f69	48 65 78 3e 46			L1:	.text "Hex>F"	;  name of word as a string, ending at wh_NameLastChar
>8f6e	c5					.byte (("Hex>F"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f6f	b6 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f71	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f72	08					.byte NN	;wh_Flags	dictionary flags
=36590					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f73	20 16 84	jsr $8416	HexToF:		jsr FAllocX		; alloc FP stack entry
.8f76	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8f78	a4 4c		ldy $4c				ldy fp			; Y= FP stack index
.8f7a	20 8e b3	jsr $b38e			jsr PopA		; pop n_exp
.8f7d	99 4d 00	sta $004d,y			sta FSExp,y
.8f80	b5 25		lda $25,x			lda DStack+1,x
.8f82	99 57 00	sta $0057,y			sta FSMant0,y
.8f85	b5 24		lda $24,x			lda DStack+0,x
.8f87	99 61 00	sta $0061,y			sta FSMant1,y
.8f8a	b5 27		lda $27,x			lda DStack+3,x
.8f8c	99 6b 00	sta $006b,y			sta FSMant2,y
.8f8f	b5 26		lda $26,x			lda DStack+2,x
.8f91	99 75 00	sta $0075,y			sta FSMant3,y
.8f94	4c c1 c4	jmp $c4c1			jmp Two_Drop
=36					CL	.var *-(WordListLink+wh_Xt)
=$8f97					en = *	; remember here
>8f71	24					.byte CL	;wh_CodeLength
>8f97	46 3e 48 65 78			L1:	.text "F>Hex"	;  name of word as a string, ending at wh_NameLastChar
>8f9c	05					.byte (("F>Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f9d	ee 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f9f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8fa0	08					.byte NN	;wh_Flags	dictionary flags
=36636					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8fa1	a4 4c		ldy $4c		FToHex:		ldy fp		; Y= FP stack index
.8fa3	ca		dex				dex
.8fa4	ca		dex				dex
.8fa5	ca		dex				dex
.8fa6	ca		dex				dex
.8fa7	ca		dex				dex
.8fa8	ca		dex				dex
.8fa9	b9 57 00	lda $0057,y			lda FSMant0,y	; copy mantissa
.8fac	95 27		sta $27,x			sta DStack+3,x
.8fae	b9 61 00	lda $0061,y			lda FSMant1,y
.8fb1	95 26		sta $26,x			sta DStack+2,x
.8fb3	b9 6b 00	lda $006b,y			lda FSMant2,y
.8fb6	95 29		sta $29,x			sta DStack+5,x
.8fb8	b9 75 00	lda $0075,y			lda FSMant3,y
.8fbb	95 28		sta $28,x			sta DStack+4,x
.8fbd	b9 4d 00	lda $004d,y			lda FSExp,y	; copy exponent
.8fc0	95 24		sta $24,x			sta DStack+0,x
.8fc2	29 80		and #$80			and #$80	;   sign extend
.8fc4	f0 02		beq $8fc8			beq +
.8fc6	a9 ff		lda #$ff			lda #$ff
.8fc8	95 25		sta $25,x	+		sta DStack+1,x
.8fca	e6 4c		inc $4c				inc fp		; FDrop
.8fcc	60		rts				rts
=44					CL	.var *-(WordListLink+wh_Xt)
=$8fcd					en = *	; remember here
>8f9f	2c					.byte CL	;wh_CodeLength
>8fcd	46 2e 48 65 78			L1:	.text "F.Hex"	;  name of word as a string, ending at wh_NameLastChar
>8fd2	05					.byte (("F.Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8fd3	1c 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8fd5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8fd6	08					.byte NN	;wh_Flags	dictionary flags
=36690					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8fd7	20 a1 8f	jsr $8fa1	FDotHex:	jsr FToHex	; get parts of r
.8fda	20 31 ce	jsr $ce31			jsr Not_Rot
.8fdd	20 77 a8	jsr $a877			jsr Dot_Hex	; do mantissa
.8fe0	20 77 a8	jsr $a877			jsr Dot_Hex
.8fe3	a9 3a		lda #$3a			lda #':'
.8fe5	20 75 cd	jsr $cd75			jsr Emit_A
.8fe8	4c 55 a8	jmp $a855			jmp C_Dot_Hex	; do exponent
=20					CL	.var *-(WordListLink+wh_Xt)
=$8feb					en = *	; remember here
>8fd5	14					.byte CL	;wh_CodeLength
>8feb	28 46 2e 29			L1:	.text "(F.)"	;  name of word as a string, ending at wh_NameLastChar
>8fef	24					.byte (("(F.)"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8ff0	52 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ff2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ff3	08					.byte NN	;wh_Flags	dictionary flags
=36719					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ff4	20 71 90	jsr $9071	PFDot:		jsr pfcst		;start collecting chars, make r positive
.8ff7	20 fd 8f	jsr $8ffd			jsr PFDotSub
.8ffa	4c 8f 90	jmp $908f			jmp pfcen
.8ffd					PFDotSub:
.8ffd	20 ba 83	jsr $83ba			jsr Precision	;alloc & init work area
.9000	20 bf b7	jsr $b7bf			jsr One
=$27					_mantNzFound  = DStack+3	; nonzero mantissa digit processed
=$26					_NumSigDigits = DStack+2	; # of significant digits
=$24					_decimalPos   = DStack+0	; decimal point position
.9003	20 51 90	jsr $9051			jsr FLt10		; scale down to <10, counting exponent
.9006					_c:
.9006	b5 24		lda $24,x			lda _decimalPos,x	;  insert decimal point here?
.9008	d0 05		bne $900f			bne _c2
.900a	a9 2e		lda #$2e			lda #'.'
.900c	20 86 90	jsr $9086			jsr pfch
.900f	d6 24		dec $24,x	_c2:		dec _decimalPos,x
.9011	20 78 84	jsr $8478			jsr FDup		;  do a digit
.9014	20 96 8e	jsr $8e96			jsr FToS		; ( work n )
.9017	b5 24		lda $24,x			lda DStack+0,x
.9019	15 29		ora $29,x			ora _mantNzFound+2,x	;  doing significant digits?
.901b	95 29		sta $29,x			sta _mantNzFound+2,x
.901d	f0 08		beq $9027			beq _c7
.901f	d6 28		dec $28,x			dec _NumSigDigits+2,x
.9021	10 04		bpl $9027			bpl +
.9023	e8		inx				inx			;    drop integer
.9024	e8		inx				inx
.9025	d0 17		bne $903e			bne _d
.9027					+
.9027	b5 24		lda $24,x	_c7:		lda DStack+0,x		;  store the char
.9029	09 30		ora #$30			ora #'0'
.902b	20 86 90	jsr $9086			jsr pfch
.902e	20 49 8e	jsr $8e49			jsr SToF		; ( work )
.9031	20 6b 8b	jsr $8b6b			jsr FMinus
.9034	20 9d 8c	jsr $8c9d			jsr F10Star
.9037	a4 4c		ldy $4c				ldy fp			;  until mantissa==0
.9039	b9 57 00	lda $0057,y			lda FSMant0,y
.903c	d0 c8		bne $9006			bne _c
.903e	d6 24		dec $24,x	_d:		dec _decimalPos,x	;do trailing zeros
.9040	30 08		bmi $904a			bmi _d9
.9042	a9 30		lda #$30			lda #'0'
.9044	20 86 90	jsr $9086			jsr pfch
.9047	4c 3e 90	jmp $903e			jmp _d
.904a					_d9:
.904a	e8		inx				inx			; drop work area
.904b	e8		inx				inx
.904c	e8		inx				inx
.904d	e8		inx				inx
.904e	e6 4c		inc $4c				inc fp			; FDrop
.9050	60		rts				rts
=93					CL	.var *-(WordListLink+wh_Xt)
=$9051					en = *	; remember here
>8ff2	5d					.byte CL	;wh_CodeLength
.9051					FLt10:
.9051	a4 4c		ldy $4c		_1:		ldy fp			; while r >= 10
.9053	b9 4d 00	lda $004d,y			lda FSExp,y
.9056	30 18		bmi $9070			bmi _9			;   exponent negative?
.9058	c9 04		cmp #$04			cmp #4
.905a	90 14		bcc $9070			bcc _9			;   < 4 ?
.905c	d0 07		bne $9065			bne _2			;   > 4 ?
.905e	b9 57 00	lda $0057,y			lda FSMant0,y
.9061	c9 50		cmp #$50			cmp #$50
.9063	90 0b		bcc $9070			bcc _9
.9065	f6 24		inc $24,x	_2:		inc DStack+0,x		;   exp ++
.9067	20 0c 89	jsr $890c			jsr F10			;   r /= 10
.906a	20 bb 8c	jsr $8cbb			jsr FSlash
.906d	4c 51 90	jmp $9051			jmp _1
.9070	60		rts		_9:		rts
.9071					pfcst:
.9071	a9 01		lda #$01			lda #1
.9073	8d 34 03	sta $0334			sta ToHold
.9076	a4 4c		ldy $4c				ldy fp			; if r1 negative
.9078	b9 57 00	lda $0057,y			lda FSMant0,y
.907b	10 08		bpl $9085			bpl _19
.907d	a9 2d		lda #$2d			lda #'-'		;   append sign
.907f	20 86 90	jsr $9086			jsr pfch
.9082	4c a2 8b	jmp $8ba2			jmp FNegate		;   make positive, return
.9085	60		rts		_19:		rts
.9086					pfch:
.9086	ac 34 03	ldy $0334			ldy ToHold
.9089	91 00		sta ($00),y			sta (cp),y
.908b	ee 34 03	inc $0334			inc ToHold
.908e	60		rts				rts
.908f					pfcen:
.908f	ad 34 03	lda $0334			lda ToHold
.9092	38		sec				sec
.9093	e9 01		sbc #$01			sbc #1
.9095	a0 00		ldy #$00			ldy #0
.9097	91 00		sta ($00),y			sta (cp),y		; fill in length
.9099	4c c9 c9	jmp $c9c9			jmp Here		; push start addr
.909c					pfciA:
.909c	a8		tay				tay
.909d	10 0a		bpl $90a9			bpl _15			; IfMi,
.909f	49 ff		eor #$ff			eor #$ff
.90a1	18		clc				clc
.90a2	69 01		adc #$01			adc #1
.90a4	48		pha				pha
.90a5	a9 2d		lda #$2d			lda #'-'
.90a7	d0 03		bne $90ac			bne _19
.90a9	48		pha		_15:		pha
.90aa	a9 2b		lda #$2b			lda #'+'
.90ac					_19:
.90ac	20 86 90	jsr $9086			jsr pfch
.90af	68		pla				pla
.90b0	a0 2f		ldy #$2f			ldy #'0'-1
.90b2	c8		iny		_20:		iny
.90b3	38		sec				sec
.90b4	e9 0a		sbc #$0a			sbc #10
.90b6	b0 fa		bcs $90b2			bcs _20
.90b8	69 0a		adc #$0a			adc #10
.90ba	48		pha				pha
.90bb	98		tya				tya
.90bc	20 86 90	jsr $9086			jsr pfch
.90bf	68		pla				pla
.90c0	09 30		ora #$30			ora #'0'
.90c2	d0 c2		bne $9086			bne pfch
>90c4	46 2e				L1:	.text "F."	;  name of word as a string, ending at wh_NameLastChar
>90c6	c2					.byte (("F."[-1]&7)<<5)+(*-L1)	;wh_HNL
>90c7	6f 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90c9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90ca	08					.byte NN	;wh_Flags	dictionary flags
=36934					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90cb	20 f4 8f	jsr $8ff4	FDot:		jsr PFDot
.90ce	20 78 b1	jsr $b178	FDot2:		jsr Count
.90d1	20 8f cd	jsr $cd8f			jsr Type
.90d4	4c 82 cd	jmp $cd82			jmp Space
=12					CL	.var *-(WordListLink+wh_Xt)
=$90d7					en = *	; remember here
>90c9	0c					.byte CL	;wh_CodeLength
>90d7	46 2e 53			L1:	.text "F.S"	;  name of word as a string, ending at wh_NameLastChar
>90da	63					.byte (("F.S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>90db	46 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90de	08					.byte NN	;wh_Flags	dictionary flags
=36954					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90df	a9 09		lda #$09	FDotS:		lda #FDim-1	; for each FP stack entry
.90e1	d0 0b		bne $90ee			bne _8
.90e3	48		pha		_2:		pha
.90e4	20 c6 84	jsr $84c6			jsr FPick3	;   print it
.90e7	20 cb 90	jsr $90cb			jsr FDot
.90ea	68		pla				pla		;  next
.90eb	38		sec				sec
.90ec	e9 01		sbc #$01			sbc #1
.90ee	c5 4c		cmp $4c		_8:		cmp fp
.90f0	b0 f1		bcs $90e3			bcs _2
=19					CL	.var *-(WordListLink+wh_Xt)
=$90f2					en = *	; remember here
>90dd	13					.byte CL	;wh_CodeLength
.90f2	60		rts				rts
>90f3	28 46 53 2e 29			L1:	.text "(FS.)"	;  name of word as a string, ending at wh_NameLastChar
>90f8	25					.byte (("(FS.)"[-1]&7)<<5)+(*-L1)	;wh_HNL
>90f9	5a 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90fb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90fc	08					.byte NN	;wh_Flags	dictionary flags
=36984					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90fd	20 b5 b7	jsr $b7b5	PFSDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.9100	20 71 90	jsr $9071			jsr pfcst		; start collecting chars, make r positive
.9103	20 51 90	jsr $9051			jsr FLt10		; scale down to <10
.9106	a4 4c		ldy $4c		_c1:		ldy fp			; while r < 1
.9108	b9 57 00	lda $0057,y			lda FSMant0,y		;   mantissa == 0 ?
.910b	f0 0f		beq $911c			beq _c9
.910d	b9 4d 00	lda $004d,y			lda FSExp,y		;   exp < 1 ?
.9110	f0 02		beq $9114			beq _c2
.9112	10 08		bpl $911c			bpl _c9
.9114	d6 24		dec $24,x	_c2:		dec DStack+0,x		;  exp -= 1
.9116	20 9d 8c	jsr $8c9d			jsr F10Star		;  r *= 10
.9119	4c 06 91	jmp $9106			jmp _c1
.911c					_c9:
.911c	20 fd 8f	jsr $8ffd	PFSDotM:	jsr PFDotSub		; do mantissa
.911f	a9 45		lda #$45			lda #'E'
.9121	20 86 90	jsr $9086			jsr pfch		; do exponent
.9124	b5 24		lda $24,x			lda DStack+0,x		;   _exp
.9126	20 9c 90	jsr $909c			jsr pfciA
.9129	e8		inx				inx			; Drop work area
.912a	e8		inx				inx
.912b	4c 8f 90	jmp $908f			jmp pfcen		; finish string
=49					CL	.var *-(WordListLink+wh_Xt)
=$912e					en = *	; remember here
>90fb	31					.byte CL	;wh_CodeLength
>912e	46 53 2e			L1:	.text "FS."	;  name of word as a string, ending at wh_NameLastChar
>9131	c3					.byte (("FS."[-1]&7)<<5)+(*-L1)	;wh_HNL
>9132	78 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9134	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9135	08					.byte NN	;wh_Flags	dictionary flags
=37041					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9136	20 fd 90	jsr $90fd	FSDot:		jsr PFSDot
.9139	4c ce 90	jmp $90ce			jmp FDot2
=6					CL	.var *-(WordListLink+wh_Xt)
=$913c					en = *	; remember here
>9134	06					.byte CL	;wh_CodeLength
>913c	28 46 45 2e 29			L1:	.text "(FE.)"	;  name of word as a string, ending at wh_NameLastChar
>9141	25					.byte (("(FE.)"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9142	b1 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9144	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9145	08					.byte NN	;wh_Flags	dictionary flags
=37057					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9146	20 b5 b7	jsr $b7b5	PFEDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.9149	20 71 90	jsr $9071			jsr pfcst		; start collecting chars, make r positive
.914c	a4 4c		ldy $4c		_30:		ldy fp			; while r < 1
.914e	b9 57 00	lda $0057,y			lda FSMant0,y
.9151	f0 16		beq $9169			beq _39
.9153	b9 4d 00	lda $004d,y			lda FSExp,y
.9156	f0 02		beq $915a			beq _31
.9158	10 0f		bpl $9169			bpl _39
.915a	d6 24		dec $24,x	_31:		dec _exp,x		;  exp -= 3
.915c	d6 24		dec $24,x			dec _exp,x
.915e	d6 24		dec $24,x			dec _exp,x
.9160	20 fd 88	jsr $88fd			jsr F1000		;  r *= 1000
.9163	20 fd 8b	jsr $8bfd			jsr FStar
.9166	4c 4c 91	jmp $914c			jmp _30
.9169					_39:
.9169	a4 4c		ldy $4c		_a:		ldy fp			; while r >= 1000
.916b	b9 4d 00	lda $004d,y			lda FSExp,y
.916e	30 1c		bmi $918c			bmi _a9			; exponent negative?
.9170	c9 0a		cmp #$0a			cmp #10
.9172	90 18		bcc $918c			bcc _a9			;   < 10 ?
.9174	d0 07		bne $917d			bne _a2			;   > 10 ?
.9176	b9 57 00	lda $0057,y			lda FSMant0,y
.9179	c9 7d		cmp #$7d			cmp #$7d
.917b	90 0f		bcc $918c			bcc _a9
.917d	f6 24		inc $24,x	_a2:		inc _exp,x		;   exp += 3
.917f	f6 24		inc $24,x			inc _exp,x
.9181	f6 24		inc $24,x			inc _exp,x
.9183	20 fd 88	jsr $88fd			jsr F1000		;   r /= 1000
.9186	20 bb 8c	jsr $8cbb			jsr FSlash
.9189	4c 69 91	jmp $9169			jmp _a
.918c					_a9:
.918c	4c 1c 91	jmp $911c			jmp PFSDotM
=73					CL	.var *-(WordListLink+wh_Xt)
=$918f					en = *	; remember here
>9144	49					.byte CL	;wh_CodeLength
>918f	46 45 2e			L1:	.text "FE."	;  name of word as a string, ending at wh_NameLastChar
>9192	c3					.byte (("FE."[-1]&7)<<5)+(*-L1)	;wh_HNL
>9193	c1 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9195	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9196	08					.byte NN	;wh_Flags	dictionary flags
=37138					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9197	20 46 91	jsr $9146	FEDot:		jsr PFEDot
.919a	4c ce 90	jmp $90ce			jmp FDot2
=6					CL	.var *-(WordListLink+wh_Xt)
=$919d					en = *	; remember here
>9195	06					.byte CL	;wh_CodeLength
>919d	46 22				L1:	.text 'F"'	;  name of word as a string, ending at wh_NameLastChar
>919f	42					.byte (('F"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>91a0	12 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>91a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>91a3	0c					.byte IM+NN	;wh_Flags	dictionary flags
=37151					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.91a4	20 55 ba	jsr $ba55	FQuote:		jsr Parse_Name		; get string
.91a7	20 c8 91	jsr $91c8			jsr ToFloat		; convert
.91aa	b5 24		lda $24,x			lda DStack+0,x		; error?
.91ac	f0 0a		beq $91b8			beq _Err
.91ae	e8		inx				inx
.91af	e8		inx				inx
.91b0	a5 0a		lda $0a				lda State		; compiling?
.91b2	d0 01		bne $91b5			bne _compile
.91b4	60		rts				rts
.91b5	4c 7c 88	jmp $887c	_compile:	jmp FLiteral		; compile a FP literal
.91b8	a9 36		lda #$36	_Err:		lda #100+err_FPInvalidArg
.91ba	20 33 b4	jsr $b433			jsr ThrowA
=25					CL	.var *-(WordListLink+wh_Xt)
=$91bd					en = *	; remember here
>91a2	19					.byte CL	;wh_CodeLength
>91bd	3e 46 6c 6f 61 74		L1:	.text ">Float"	;  name of word as a string, ending at wh_NameLastChar
>91c3	86					.byte ((">Float"[-1]&7)<<5)+(*-L1)	;wh_HNL
>91c4	1f 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>91c6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>91c7	08					.byte NN	;wh_Flags	dictionary flags
=37187					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.91c8					ToFloat:
.91c8	20 b5 b7	jsr $b7b5			jsr Zero	; alloc & init workspace
.91cb	20 b5 b7	jsr $b7b5			jsr Zero
.91ce	20 b5 b7	jsr $b7b5			jsr Zero
=$2c					_addr		= DStack+8
=$2a					_len		= DStack+6
=$29					_mantfound 	= DStack+5		;mantissa digits found
=$28					_exponent 	= DStack+4		;exponent
=$27					_decimalPos 	= DStack+3		;decimal point position
=$26					_DecPointFound1 = DStack+2
=$25					_MantissaNegative1 = DStack+1
=$24					_ExponentNegative1 = DStack+0
.91d1	20 ec 88	jsr $88ec			jsr F0			; init result
.91d4	20 a6 92	jsr $92a6	_11:		jsr _GetChar		; get mantissa prefix
.91d7	b0 57		bcs $9230			bcs _trueb ;_finishb
.91d9	c9 20		cmp #$20			cmp #' '
.91db	f0 f7		beq $91d4			beq _11
.91dd	c9 2b		cmp #$2b			cmp #'+'
.91df	f0 06		beq $91e7			beq _20
.91e1	c9 2d		cmp #$2d			cmp #'-'
.91e3	d0 07		bne $91ec			bne _21
.91e5	95 25		sta $25,x			sta _MantissaNegative1,x ; remember mantissa is negative
.91e7	20 a6 92	jsr $92a6	_20:		jsr _GetChar		; do next mantissa digits
.91ea	b0 47		bcs $9233			bcs _finishb
.91ec	c9 2e		cmp #$2e	_21:		cmp #'.'
.91ee	f0 31		beq $9221			beq _27
.91f0	c9 45		cmp #$45			cmp #'E'
.91f2	f0 42		beq $9236			beq _30
.91f4	c9 65		cmp #$65			cmp #'e'
.91f6	f0 3e		beq $9236			beq _30
.91f8	c9 44		cmp #$44			cmp #'D'
.91fa	f0 3a		beq $9236			beq _30
.91fc	c9 64		cmp #$64			cmp #'d'
.91fe	f0 36		beq $9236			beq _30
.9200	38		sec				sec			;   a digit?
.9201	e9 30		sbc #$30			sbc #'0'
.9203	90 24		bcc $9229			bcc _fail
.9205	c9 0a		cmp #$0a			cmp #9+1
.9207	b0 20		bcs $9229			bcs _fail
.9209	48		pha				pha			; append digit to mantissa
.920a	20 9d 8c	jsr $8c9d			jsr F10Star
.920d	68		pla				pla
.920e	a0 00		ldy #$00			ldy #0
.9210	20 4c 8e	jsr $8e4c			jsr SToFYA
.9213	20 29 8b	jsr $8b29			jsr FPlus
.9216	f6 29		inc $29,x			inc _mantfound,x	; remember we found a mantissa digit
.9218	b5 26		lda $26,x			lda _DecPointFound1,x	; if mantissa decimal point found
.921a	f0 02		beq $921e			beq +
.921c	d6 27		dec $27,x			dec _decimalPos,x	;   increment decimal point position
.921e					+
.921e	4c e7 91	jmp $91e7			jmp _20
.9221					_27:
.9221	b4 26		ldy $26,x			ldy _DecPointFound1,x	; already have one?
.9223	d0 04		bne $9229			bne _fail
.9225	95 26		sta $26,x			sta _DecPointFound1,x	; we have one now!
.9227	f0 be		beq $91e7			beq _20
.9229					_fail:
.9229	20 e4 83	jsr $83e4			jsr FDrop
.922c	a9 00		lda #$00			lda #0			;return false
.922e	f0 69		beq $9299			beq _return
.9230	4c 97 92	jmp $9297	_trueb:		jmp _true
.9233	4c 64 92	jmp $9264	_finishb:	jmp _finish
.9236					_30:
.9236	20 a6 92	jsr $92a6			jsr _GetChar
.9239	b0 29		bcs $9264			bcs _finish
.923b	c9 2b		cmp #$2b			cmp #'+'
.923d	f0 06		beq $9245			beq _40
.923f	c9 2d		cmp #$2d			cmp #'-'
.9241	d0 07		bne $924a			bne _41
.9243	95 24		sta $24,x			sta _ExponentNegative1,x ; remember exponent is negative
.9245	20 a6 92	jsr $92a6	_40:		jsr _GetChar		;get exponent digits
.9248	b0 1a		bcs $9264			bcs _finish
.924a	38		sec		_41:		sec			;  digit?
.924b	e9 30		sbc #$30			sbc #'0'
.924d	90 da		bcc $9229			bcc _fail
.924f	c9 0a		cmp #$0a			cmp #9+1
.9251	b0 d6		bcs $9229			bcs _fail
.9253	85 14		sta $14				sta tmp1
.9255	16 28		asl $28,x			asl _exponent,x		;  exponent *= 10
.9257	b5 28		lda $28,x			lda _exponent,x
.9259	0a		asl a				asl a
.925a	0a		asl a				asl a
.925b	75 28		adc $28,x			adc _exponent,x
.925d	65 14		adc $14				adc tmp1		;  + digit
.925f	95 28		sta $28,x			sta _exponent,x
.9261	4c 45 92	jmp $9245			jmp _40
.9264					_finish:
.9264	b5 29		lda $29,x			lda _mantfound,x	;some mantissa digits found?
.9266	f0 c1		beq $9229			beq _fail
.9268	b5 24		lda $24,x			lda _ExponentNegative1,x ;apply exponent sign
.926a	f0 07		beq $9273			beq +
.926c	a9 00		lda #$00			lda #0
.926e	38		sec				sec
.926f	f5 28		sbc $28,x			sbc _exponent,x
.9271	95 28		sta $28,x			sta _exponent,x
.9273					+
.9273	b5 28		lda $28,x			lda _exponent,x		;apply decimal position to exponent
.9275	18		clc				clc
.9276	75 27		adc $27,x			adc _decimalPos,x
.9278	95 28		sta $28,x			sta _exponent,x
.927a	4c 82 92	jmp $9282			jmp _93
.927d	20 9d 8c	jsr $8c9d	_93b:		jsr F10Star		;apply exponent to mantissa
.9280	d6 28		dec $28,x			dec _exponent,x
.9282	f0 0a		beq $928e	_93:		beq _94
.9284	10 f7		bpl $927d			bpl _93b
.9286	20 0c 89	jsr $890c	_94b:		jsr F10
.9289	20 bb 8c	jsr $8cbb			jsr FSlash
.928c	f6 28		inc $28,x			inc _exponent,x
.928e	30 f6		bmi $9286	_94:		bmi _94b
.9290					_95:
.9290	b5 25		lda $25,x			lda _MantissaNegative1,x ;apply mantissa sign
.9292	f0 03		beq $9297			beq +
.9294	20 a2 8b	jsr $8ba2			jsr FNegate
.9297					+
.9297	a9 ff		lda #$ff	_true:		lda #$ff		;return true
.9299					_return:
.9299	95 2c		sta $2c,x			sta _addr+0,x		; replace _addr with flag
.929b	95 2d		sta $2d,x			sta _addr+1,x
.929d	e8		inx				inx			; Drop work
.929e	e8		inx				inx
.929f	e8		inx				inx			; 2Drop work
.92a0	e8		inx				inx
.92a1	e8		inx				inx
.92a2	e8		inx				inx
.92a3	e8		inx				inx			; Drop len
.92a4	e8		inx				inx
.92a5	60		rts				rts
.92a6					_GetChar:
.92a6	38		sec				sec
.92a7	b5 2a		lda $2a,x			lda _len,x
.92a9	f0 0b		beq $92b6			beq _gc_rts		; if end, return C=1
.92ab	d6 2a		dec $2a,x			dec _len,x
.92ad	a1 2c		lda ($2c,x)			lda (_addr,x)
.92af	f6 2c		inc $2c,x			inc _addr+0,x
.92b1	d0 02		bne $92b5			bne +
.92b3	f6 2d		inc $2d,x			inc _addr+1,x
.92b5					+
.92b5	18		clc				clc			; get char, return C=0
.92b6	60		rts		_gc_rts:	rts
>92b7	53 46 40			L1:	.text "SF@"	;  name of word as a string, ending at wh_NameLastChar
>92ba	03					.byte (("SF@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>92bb	43 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>92bd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>92be	08					.byte NN	;wh_Flags	dictionary flags
=37434					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.92bf	20 aa b3	jsr $b3aa	SFAt:		jsr PopYA		; pop sf_addr
.92c2	85 16		sta $16		SFAt_YA:	sta tmp2+0		; save sf_addr
.92c4	84 17		sty $17				sty tmp2+1
.92c6	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.92c9	a0 01		ldy #$01			ldy #1			; copy exponent
.92cb	b1 16		lda ($16),y			lda (tmp2),y
.92cd	0a		asl a				asl a
.92ce	88		dey				dey
.92cf	b1 16		lda ($16),y			lda (tmp2),y
.92d1	2a		rol a				rol a
.92d2	38		sec				sec
.92d3	e9 7e		sbc #$7e			sbc #126
.92d5	95 4d		sta $4d,x			sta FSExp,x
.92d7	a0 01		ldy #$01			ldy #1			; copy mantissa
.92d9	b1 16		lda ($16),y			lda (tmp2),y
.92db	09 80		ora #$80			ora #$80
.92dd	4a		lsr a				lsr a
.92de	95 57		sta $57,x			sta FSMant0,x
.92e0	c8		iny				iny
.92e1	b1 16		lda ($16),y			lda (tmp2),y
.92e3	6a		ror a				ror a
.92e4	95 61		sta $61,x			sta FSMant1,x
.92e6	c8		iny				iny
.92e7	b1 16		lda ($16),y			lda (tmp2),y
.92e9	6a		ror a				ror a
.92ea	95 6b		sta $6b,x			sta FSMant2,x
.92ec	a9 00		lda #$00			lda #0
.92ee	6a		ror a				ror a
.92ef	95 75		sta $75,x			sta FSMant3,x
.92f1	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.92f3	a0 00		ldy #$00			ldy #0			; get sign
.92f5	b1 16		lda ($16),y			lda (tmp2),y
.92f7	10 03		bpl $92fc			bpl +
.92f9	20 a2 8b	jsr $8ba2			jsr FNegate
.92fc					+
=61					CL	.var *-(WordListLink+wh_Xt)
=$92fc					en = *	; remember here
>92bd	3d					.byte CL	;wh_CodeLength
.92fc	60		rts				rts
>92fd	53 46 21			L1:	.text "SF!"	;  name of word as a string, ending at wh_NameLastChar
>9300	23					.byte (("SF!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9301	3a 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9303	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9304	08					.byte NN	;wh_Flags	dictionary flags
=37504					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9305	20 aa b3	jsr $b3aa	SFStore:	jsr PopYA		; pop sf_addr
.9308	85 16		sta $16		SFStore_YA:	sta tmp2+0		; save
.930a	84 17		sty $17				sty tmp2+1
.930c	a4 4c		ldy $4c				ldy fp			; negative?
.930e	b9 57 00	lda $0057,y			lda FSMant0,y
.9311	29 80		and #$80			and #$80		;  save sign
.9313	85 19		sta $19				sta tmp3+1
.9315	10 03		bpl $931a			bpl +
.9317	20 a2 8b	jsr $8ba2			jsr FNegate
.931a					+
.931a	86 14		stx $14				stx tmp1+0		; save data stack index
.931c	a6 4c		ldx $4c				ldx fp			; switch to FP stack index
.931e	b5 4d		lda $4d,x			lda FSExp,x		; +128
.9320	18		clc				clc
.9321	69 7e		adc #$7e			adc #126
.9323	95 4d		sta $4d,x			sta FSExp,x
.9325	16 75		asl $75,x			asl FSMant3,x
.9327	b5 6b		lda $6b,x			lda FSMant2,x
.9329	2a		rol a				rol a
.932a	a0 03		ldy #$03			ldy #3			; +3 IEEE
.932c	91 16		sta ($16),y			sta (tmp2),y
.932e	b5 61		lda $61,x			lda FSMant1,x
.9330	2a		rol a				rol a
.9331	88		dey				dey			; +2 IEEE
.9332	91 16		sta ($16),y			sta (tmp2),y
.9334	b5 57		lda $57,x			lda FSMant0,x
.9336	2a		rol a				rol a
.9337	2a		rol a				rol a
.9338	56 4d		lsr $4d,x			lsr FSExp,x
.933a	6a		ror a				ror a
.933b	88		dey				dey			; +1 IEEE
.933c	91 16		sta ($16),y			sta (tmp2),y
.933e	b5 4d		lda $4d,x			lda FSExp,x
.9340	05 19		ora $19				ora tmp3+1		;  insert sign
.9342	88		dey				dey			; +0 IEEE
.9343	91 16		sta ($16),y			sta (tmp2),y
.9345	e6 4c		inc $4c				inc fp			; FDrop
.9347	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=68					CL	.var *-(WordListLink+wh_Xt)
=$9349					en = *	; remember here
>9303	44					.byte CL	;wh_CodeLength
.9349	60		rts				rts
>934a	53 46 6c 6f 61 74 2b		L1:	.text "SFloat+"	;  name of word as a string, ending at wh_NameLastChar
>9351	67					.byte (("SFloat+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9352	80 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9354	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9355	08					.byte NN	;wh_Flags	dictionary flags
=37585					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9356	a9 04		lda #$04	SFloatPlus:	lda #4
.9358	4c ac c9	jmp $c9ac			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$935b					en = *	; remember here
>9354	05					.byte CL	;wh_CodeLength
>935b	53 46 6c 6f 61 74 73		L1:	.text "SFloats"	;  name of word as a string, ending at wh_NameLastChar
>9362	67					.byte (("SFloats"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9363	d1 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9365	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9366	08					.byte NN	;wh_Flags	dictionary flags
=37602					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9367	a9 02		lda #$02	SFloats:	lda #2
.9369	4c f0 ca	jmp $caf0			jmp LShift_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$936c					en = *	; remember here
>9365	05					.byte CL	;wh_CodeLength
>936c	44 46 21			L1:	.text "DF!"	;  name of word as a string, ending at wh_NameLastChar
>936f	23					.byte (("DF!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9370	e2 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9372	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9373	08					.byte NN	;wh_Flags	dictionary flags
=37615					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9374	20 aa b3	jsr $b3aa	DFStore:	jsr PopYA		; pop df_addr
.9377	85 16		sta $16		DFStore_YA:	sta tmp2+0		; save df_addr
.9379	84 17		sty $17				sty tmp2+1
.937b	a4 4c		ldy $4c				ldy fp			; negative?
.937d	b9 57 00	lda $0057,y			lda FSMant0,y
.9380	29 80		and #$80			and #$80		; remember sign
.9382	85 19		sta $19				sta tmp3+1
.9384	10 03		bpl $9389			bpl +			; make positive
.9386	20 a2 8b	jsr $8ba2			jsr FNegate
.9389					+
.9389	86 14		stx $14				stx tmp1+0		; save data stack index
.938b	a6 4c		ldx $4c				ldx fp
.938d	a9 00		lda #$00			lda #0
.938f	a0 07		ldy #$07			ldy #7			; +7 IEEE
.9391	91 16		sta ($16),y			sta (tmp2),y
.9393	88		dey				dey			; +6 IEEE
.9394	91 16		sta ($16),y			sta (tmp2),y
.9396	20 de 93	jsr $93de			jsr _shift		; shift mantissa
.9399	20 de 93	jsr $93de			jsr _shift
.939c	88		dey				dey			; +5 IEEE
.939d	91 16		sta ($16),y			sta (tmp2),y
.939f	b5 75		lda $75,x			lda FSMant3,x
.93a1	88		dey				dey			; +4 IEEE
.93a2	91 16		sta ($16),y			sta (tmp2),y
.93a4	b5 6b		lda $6b,x			lda FSMant2,x
.93a6	88		dey				dey			; +3 IEEE
.93a7	91 16		sta ($16),y			sta (tmp2),y
.93a9	b5 61		lda $61,x			lda FSMant1,x
.93ab	88		dey				dey			; +2 IEEE
.93ac	91 16		sta ($16),y			sta (tmp2),y
.93ae	b5 57		lda $57,x			lda FSMant0,x		; clear extra bits
.93b0	29 0f		and #$0f			and #$f
.93b2	95 57		sta $57,x			sta FSMant0,x
.93b4	b5 4d		lda $4d,x			lda FSExp,x
.93b6	38		sec				sec
.93b7	e9 02		sbc #$02			sbc #2
.93b9	95 4d		sta $4d,x			sta FSExp,x
.93bb	0a		asl a				asl a
.93bc	0a		asl a				asl a
.93bd	0a		asl a				asl a
.93be	0a		asl a				asl a
.93bf	15 57		ora $57,x			ora FSMant0,x
.93c1	88		dey				dey			; +1 IEEE
.93c2	91 16		sta ($16),y			sta (tmp2),y
.93c4	b5 4d		lda $4d,x			lda FSExp,x
.93c6	08		php				php
.93c7	4a		lsr a				lsr a
.93c8	4a		lsr a				lsr a
.93c9	4a		lsr a				lsr a
.93ca	4a		lsr a				lsr a
.93cb	18		clc				clc
.93cc	69 30		adc #$30			adc #$30
.93ce	28		plp				plp
.93cf	30 03		bmi $93d4			bmi +
.93d1	18		clc				clc
.93d2	69 10		adc #$10			adc #$10
.93d4	05 19		ora $19		+		ora tmp3+1		; add sign bit
.93d6	88		dey				dey			; +0 IEEE
.93d7	91 16		sta ($16),y			sta (tmp2),y
.93d9	e6 4c		inc $4c				inc fp			; FDrop
.93db	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.93dd	60		rts				rts
.93de	56 57		lsr $57,x	_shift:		lsr FSMant0,x
.93e0	76 61		ror $61,x			ror FSMant1,x
.93e2	76 6b		ror $6b,x			ror FSMant2,x
.93e4	76 75		ror $75,x			ror FSMant3,x
.93e6	6a		ror a				ror a
=115					CL	.var *-(WordListLink+wh_Xt)
=$93e7					en = *	; remember here
>9372	73					.byte CL	;wh_CodeLength
.93e7	60		rts				rts
>93e8	44 46 40			L1:	.text "DF@"	;  name of word as a string, ending at wh_NameLastChar
>93eb	03					.byte (("DF@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>93ec	ef 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>93ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>93ef	08					.byte NN	;wh_Flags	dictionary flags
=37739					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.93f0	20 aa b3	jsr $b3aa	DFAt:		jsr PopYA		; pop df_addr
.93f3	85 16		sta $16		DFAt_YA:	sta tmp2+0		; save df_addr
.93f5	84 17		sty $17				sty tmp2+1
.93f7	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.93fa	a0 00		ldy #$00			ldy #0			; +0 IEEE byte
.93fc	b1 16		lda ($16),y			lda (tmp2),y
.93fe	95 4d		sta $4d,x			sta FSExp,x
.9400	c8		iny				iny			; +1 IEEE byte
.9401	b1 16		lda ($16),y			lda (tmp2),y
.9403	95 57		sta $57,x			sta FSMant0,x
.9405	c8		iny				iny			; +2 IEEE byte
.9406	b1 16		lda ($16),y			lda (tmp2),y
.9408	95 61		sta $61,x			sta FSMant1,x
.940a	c8		iny				iny			; +3 IEEE byte
.940b	b1 16		lda ($16),y			lda (tmp2),y
.940d	95 6b		sta $6b,x			sta FSMant2,x
.940f	c8		iny				iny			; +4 IEEE byte
.9410	b1 16		lda ($16),y			lda (tmp2),y
.9412	95 75		sta $75,x			sta FSMant3,x
.9414	c8		iny				iny			; +5 IEEE byte
.9415	b1 16		lda ($16),y			lda (tmp2),y
.9417	20 40 94	jsr $9440			jsr _shifta		; shift exponent & mantissa bits into place
.941a	20 40 94	jsr $9440			jsr _shifta
.941d	b5 57		lda $57,x			lda FSMant0,x		; finish shifting exponent bits
.941f	0a		asl a				asl a
.9420	36 4d		rol $4d,x			rol FSExp,x
.9422	0a		asl a				asl a
.9423	36 4d		rol $4d,x			rol FSExp,x
.9425	b5 4d		lda $4d,x			lda FSExp,x		; remove +1023
.9427	18		clc				clc
.9428	69 02		adc #$02			adc #2
.942a	95 4d		sta $4d,x			sta FSExp,x
.942c	b5 57		lda $57,x			lda FSMant0,x
.942e	29 7f		and #$7f			and #$7f
.9430	09 40		ora #$40			ora #$40		;   insert implied 1
.9432	95 57		sta $57,x			sta FSMant0,x		;   insert sign=0
.9434	a6 14		ldx $14				ldx tmp1		; restore data stack index
.9436	a0 00		ldy #$00			ldy #0			; get sign from +0 IEEE byte
.9438	b1 16		lda ($16),y			lda (tmp2),y
.943a	10 03		bpl $943f			bpl +
.943c	20 a2 8b	jsr $8ba2			jsr FNegate
.943f					+
.943f	60		rts				rts
.9440	0a		asl a		_shifta:	asl a
.9441	36 75		rol $75,x			rol FSMant3,x
.9443	36 6b		rol $6b,x			rol FSMant2,x
.9445	36 61		rol $61,x			rol FSMant1,x
.9447	36 57		rol $57,x			rol FSMant0,x
.9449	36 4d		rol $4d,x			rol FSExp,x
.944b	60		rts				rts
=92					CL	.var *-(WordListLink+wh_Xt)
=$944c					en = *	; remember here
>93ee	5c					.byte CL	;wh_CodeLength
>944c	44 46 6c 6f 61 74 2b		L1:	.text "DFloat+"	;  name of word as a string, ending at wh_NameLastChar
>9453	67					.byte (("DFloat+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9454	6b 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9456	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9457	08					.byte NN	;wh_Flags	dictionary flags
=37843					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9458	a9 08		lda #$08	DFloatPlus:	lda #8
.945a	4c ac c9	jmp $c9ac			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$945d					en = *	; remember here
>9456	05					.byte CL	;wh_CodeLength
>945d	44 46 6c 6f 61 74 73		L1:	.text "DFloats"	;  name of word as a string, ending at wh_NameLastChar
>9464	67					.byte (("DFloats"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9465	d3 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9467	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9468	08					.byte NN	;wh_Flags	dictionary flags
=37860					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9469	a9 03		lda #$03	DFloats:	lda #3
.946b	4c f0 ca	jmp $caf0			jmp LShift_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$946e					en = *	; remember here
>9467	05					.byte CL	;wh_CodeLength
>946e	46 4b 65 79			L1:	.text "FKey"	;  name of word as a string, ending at wh_NameLastChar
>9472	24					.byte (("FKey"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9473	e4 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9475	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9476	08					.byte NN	;wh_Flags	dictionary flags
=37874					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9477					FKey:
.9477	20 c9 c9	jsr $c9c9			jsr Here		; ( addr )
.947a	20 c9 c9	jsr $c9c9			jsr Here		; ( addr addr )
.947d	a9 28		lda #$28			lda #40			; ( addr addr 40 )
.947f	20 a6 b7	jsr $b7a6			jsr PushZA
.9482	20 7c c2	jsr $c27c			jsr Accept		; ( addr len )
.9485	20 c8 91	jsr $91c8			jsr ToFloat		; ( true | false)
.9488	e8		inx				inx			; err?
.9489	e8		inx				inx
.948a	b5 22		lda $22,x			lda DStack-2,x
.948c	f0 01		beq $948f			beq _err
.948e	60		rts				rts
.948f	20 85 b8	jsr $b885	_err:		jsr SLiteral_runtime
.9492	4c 98 94	jmp $9498			  jmp +
>9495	20 3f 20					  .text " ? "
.9498	20 8f cd	jsr $cd8f	+		jsr Type
.949b	4c 77 94	jmp $9477			jmp FKey
>949e	46 4d 50 6f 6c 79		L1:	.text "FMPoly"	;  name of word as a string, ending at wh_NameLastChar
>94a4	26					.byte (("FMPoly"[-1]&7)<<5)+(*-L1)	;wh_HNL
>94a5	f2 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>94a7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>94a8	08					.byte NN	;wh_Flags	dictionary flags
=37924					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.94a9	20 aa b3	jsr $b3aa	FMPoly:		jsr PopYA
.94ac	20 64 b7	jsr $b764	FMPolyYA:	jsr PushYA		; push coefficent addr
.94af	20 82 85	jsr $8582			jsr FAt_YA		; fetch 1st coefficent
.94b2	4c c5 94	jmp $94c5			jmp _4
.94b5	20 9c 84	jsr $849c	_2:		jsr FOver
.94b8	20 fd 8b	jsr $8bfd			jsr FStar
.94bb	b5 24		lda $24,x			lda DStack+0,x		; fetch next coefficent
.94bd	b4 25		ldy $25,x			ldy DStack+1,x
.94bf	20 82 85	jsr $8582			jsr FAt_YA
.94c2	20 29 8b	jsr $8b29			jsr FPlus
.94c5	a9 05		lda #$05	_4:		lda #5			; bump coefficent ptr
.94c7	20 ac c9	jsr $c9ac			jsr Plus_A
.94ca	a1 24		lda ($24,x)			lda (DStack+0,x)	; end of coefficent list?
.94cc	d0 e7		bne $94b5			bne _2
.94ce	e8		inx				inx			; Drop coefficent ptr
.94cf	e8		inx				inx
=39					CL	.var *-(WordListLink+wh_Xt)
=$94d0					en = *	; remember here
>94a7	27					.byte CL	;wh_CodeLength
.94d0	60		rts				rts
>94d1	46 4c 6f 67 32 4d 31 4d		L1:	.text "FLog2M1M"	;  name of word as a string, ending at wh_NameLastChar
>94d9	a8					.byte (("FLog2M1M"[-1]&7)<<5)+(*-L1)	;wh_HNL
>94da	24 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>94dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>94dd	08					.byte NN	;wh_Flags	dictionary flags
=37977					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.94de	a9 e8		lda #$e8	FLog2M1M:	lda #<_c
.94e0	a0 94		ldy #$94			ldy #>_c
.94e2	20 ac 94	jsr $94ac			jsr FMPolyYA
.94e5	4c fd 8b	jmp $8bfd			jmp FStar
.94e8					_c:
>94e8	cc cf 97 7c					.dword $7C97CFCC	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94ec	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>94ed	64 87 94 af					.dword $AF948764	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94f1	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>94f2	66 c8 d4 62					.dword $62D4C866	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94f6	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>94f7	e2 9c c3 ac					.dword $ACC39CE2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94fb	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>94fc	1a c6 2b 79					.dword $792BC61A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9500	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9501	07 e1 c4 a3					.dword $A3C4E107	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9505	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>9506	91 a5 54 5c					.dword $5C54A591	; 32 bit signed binary mantissa.  $40000000 = +0.5
>950a	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>950b	00 00						.word 0
=47					CL	.var *-(WordListLink+wh_Xt)
=$950d					en = *	; remember here
>94dc	2f					.byte CL	;wh_CodeLength
>950d	46 4c 6f 67 32			L1:	.text "FLog2"	;  name of word as a string, ending at wh_NameLastChar
>9512	45					.byte (("FLog2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9513	59 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9515	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9516	08					.byte NN	;wh_Flags	dictionary flags
=38034					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9517	a4 4c		ldy $4c		FLog2:		ldy fp
.9519	b9 57 00	lda $0057,y			lda FSMant0,y	; bad param?
.951c	30 20		bmi $953e			bmi _OutOfRange
.951e	f0 1e		beq $953e			beq _OutOfRange
.9520	b9 4d 00	lda $004d,y			lda FSExp,y
.9523	48		pha				pha		; remember orig exponent
.9524	a9 01		lda #$01			lda #1
.9526	99 4d 00	sta $004d,y			sta FSExp,y	; set to 1
.9529	20 90 8b	jsr $8b90			jsr F1Minus
.952c	20 de 94	jsr $94de			jsr FLog2M1M
.952f	a0 00		ldy #$00			ldy #0		; add orig exponent to float
.9531	68		pla				pla
.9532	38		sec				sec
.9533	e9 01		sbc #$01			sbc #1
.9535	10 01		bpl $9538			bpl +
.9537	88		dey				dey
.9538					+
.9538	20 4c 8e	jsr $8e4c			jsr SToFYA
.953b	4c 29 8b	jmp $8b29			jmp FPlus
.953e	4c 0c b4	jmp $b40c	_OutOfRange:	jmp Throw_FpOutOfRange
=42					CL	.var *-(WordListLink+wh_Xt)
=$9541					en = *	; remember here
>9515	2a					.byte CL	;wh_CodeLength
>9541	46 4c 6e			L1:	.text "FLn"	;  name of word as a string, ending at wh_NameLastChar
>9544	c3					.byte (("FLn"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9545	92 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9547	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9548	08					.byte NN	;wh_Flags	dictionary flags
=38084					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9549	20 17 95	jsr $9517	FLn:		jsr FLog2
.954c	20 cc 88	jsr $88cc			jsr FLitI
>954f	f8 0b b9 58					.dword $58b90bf8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9553	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
.9554	4c fd 8b	jmp $8bfd			jmp FStar
=14					CL	.var *-(WordListLink+wh_Xt)
=$9557					en = *	; remember here
>9547	0e					.byte CL	;wh_CodeLength
>9557	46 4c 6e 50 31			L1:	.text "FLnP1"	;  name of word as a string, ending at wh_NameLastChar
>955c	25					.byte (("FLnP1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>955d	c4 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>955f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9560	08					.byte NN	;wh_Flags	dictionary flags
=38108					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9561	20 5e 8b	jsr $8b5e	FlnP1:		jsr F1Plus
.9564	4c 49 95	jmp $9549			jmp FLn
=6					CL	.var *-(WordListLink+wh_Xt)
=$9567					en = *	; remember here
>955f	06					.byte CL	;wh_CodeLength
>9567	46 4c 6f 67			L1:	.text "FLog"	;  name of word as a string, ending at wh_NameLastChar
>956b	e4					.byte (("FLog"[-1]&7)<<5)+(*-L1)	;wh_HNL
>956c	dc 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>956e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>956f	08					.byte NN	;wh_Flags	dictionary flags
=38123					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9570	20 17 95	jsr $9517	FLog:		jsr FLog2
.9573	20 cc 88	jsr $88cc			jsr FLitI
>9576	3c 4d 10 4d					.dword $4d104d3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>957a	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
.957b	4c fd 8b	jmp $8bfd			jmp FStar
=14					CL	.var *-(WordListLink+wh_Xt)
=$957e					en = *	; remember here
>956e	0e					.byte CL	;wh_CodeLength
>957e	46 45 78 70 32 4d 31 4d		L1:	.text "FExp2M1M"	;  name of word as a string, ending at wh_NameLastChar
>9586	a8					.byte (("FExp2M1M"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9587	eb 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9589	03					.byte 3		;wh_CodeLength  (with placeholder value)
>958a	08					.byte NN	;wh_Flags	dictionary flags
=38150					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.958b	a9 95		lda #$95	FExp2M1M:	lda #<_c
.958d	a0 95		ldy #$95			ldy #>_c
.958f	20 ac 94	jsr $94ac			jsr FMPolyYA
.9592	4c fd 8b	jmp $8bfd			jmp FStar
=10					CL	.var *-(WordListLink+wh_Xt)
=$9595					en = *	; remember here
>9589	0a					.byte CL	;wh_CodeLength
.9595					_c:
>9595	da dc 4f 7c					.dword $7C4FDCDa	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9599	f7						.char -9		; 8 bit signed exponent.  $00 = 2**0
>959a	d6 ca 4c 49					.dword $494CCAD6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>959e	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>959f	f0 42 64 72					.dword $726442f0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95a3	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>95a4	44 90 f4 7a					.dword $7AF49044	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95a8	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>95a9	9b 3c b9 58					.dword $58B93C9b	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95ad	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>95ae	00						.byte 0
>95af	46 45 78 70 32			L1:	.text "FExp2"	;  name of word as a string, ending at wh_NameLastChar
>95b4	45					.byte (("FExp2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95b5	06 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95b8	08					.byte NN	;wh_Flags	dictionary flags
=38196					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95b9	20 17 87	jsr $8717	FExp2:		jsr FIntFrc	; ( f: r_rem r_int )
.95bc	20 96 8e	jsr $8e96			jsr FToS
.95bf	20 8b 95	jsr $958b			jsr FExp2M1M
.95c2	20 5e 8b	jsr $8b5e			jsr F1Plus
.95c5	20 8e b3	jsr $b38e			jsr PopA
.95c8	a4 4c		ldy $4c				ldy fp
.95ca	18		clc				clc
.95cb	79 4d 00	adc $004d,y			adc FSExp,y
.95ce	99 4d 00	sta $004d,y			sta FSExp,y
=24					CL	.var *-(WordListLink+wh_Xt)
=$95d1					en = *	; remember here
>95b7	18					.byte CL	;wh_CodeLength
.95d1	60		rts				rts
>95d2	46 45 78 70			L1:	.text "FExp"	;  name of word as a string, ending at wh_NameLastChar
>95d6	04					.byte (("FExp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95d7	34 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95d9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95da	08					.byte NN	;wh_Flags	dictionary flags
=38230					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95db					FExp:
.95db	20 cc 88	jsr $88cc			jsr FLitI
>95de	94 1d 55 5c					.dword $5c551d94	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95e2	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
.95e3	20 fd 8b	jsr $8bfd			jsr FStar
.95e6	4c b9 95	jmp $95b9			jmp FExp2
=14					CL	.var *-(WordListLink+wh_Xt)
=$95e9					en = *	; remember here
>95d9	0e					.byte CL	;wh_CodeLength
>95e9	46 45 78 70 4d 31		L1:	.text "FExpM1"	;  name of word as a string, ending at wh_NameLastChar
>95ef	26					.byte (("FExpM1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95f0	56 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95f2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95f3	08					.byte NN	;wh_Flags	dictionary flags
=38255					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95f4	20 db 95	jsr $95db	FExpM1:		jsr FExp
.95f7	4c 90 8b	jmp $8b90			jmp F1Minus
=6					CL	.var *-(WordListLink+wh_Xt)
=$95fa					en = *	; remember here
>95f2	06					.byte CL	;wh_CodeLength
>95fa	46 41 4c 6f 67			L1:	.text "FALog"	;  name of word as a string, ending at wh_NameLastChar
>95ff	e5					.byte (("FALog"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9600	6f 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9602	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9603	08					.byte NN	;wh_Flags	dictionary flags
=38271					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9604					FALog:
.9604	20 cc 88	jsr $88cc			jsr FLitI
>9607	20 3c 4d 6a					.dword $6a4d3c20	; 32 bit signed binary mantissa.  $40000000 = +0.5
>960b	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
.960c	20 fd 8b	jsr $8bfd			jsr FStar
.960f	4c b9 95	jmp $95b9			jmp FExp2
=14					CL	.var *-(WordListLink+wh_Xt)
=$9612					en = *	; remember here
>9602	0e					.byte CL	;wh_CodeLength
>9612	46 2a 2a			L1:	.text "F**"	;  name of word as a string, ending at wh_NameLastChar
>9615	43					.byte (("F**"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9616	7f 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9618	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9619	08					.byte NN	;wh_Flags	dictionary flags
=38293					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.961a	20 00 85	jsr $8500	FPower:		jsr FSwap
.961d	20 17 95	jsr $9517			jsr FLog2
.9620	20 fd 8b	jsr $8bfd			jsr FStar
.9623	4c b9 95	jmp $95b9			jmp FExp2
=12					CL	.var *-(WordListLink+wh_Xt)
=$9626					en = *	; remember here
>9618	0c					.byte CL	;wh_CodeLength
>9626	44 65 67 32 52 61 64		L1:	.text "Deg2Rad"	;  name of word as a string, ending at wh_NameLastChar
>962d	87					.byte (("Deg2Rad"[-1]&7)<<5)+(*-L1)	;wh_HNL
>962e	95 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9630	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9631	08					.byte NN	;wh_Flags	dictionary flags
=38317					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9632					Deg2Rad:
.9632	20 cc 88	jsr $88cc			jsr FLitI
>9635	8a 1a 7d 47					.dword $477d1A8A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9639	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
.963a	4c fd 8b	jmp $8bfd			jmp FStar
=11					CL	.var *-(WordListLink+wh_Xt)
=$963d					en = *	; remember here
>9630	0b					.byte CL	;wh_CodeLength
>963d	52 61 64 32 44 65 67		L1:	.text "Rad2Deg"	;  name of word as a string, ending at wh_NameLastChar
>9644	e7					.byte (("Rad2Deg"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9645	ad 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9647	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9648	08					.byte NN	;wh_Flags	dictionary flags
=38340					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9649					Rad2Deg:
.9649	20 cc 88	jsr $88cc			jsr FLitI
>964c	68 70 97 72					.dword $72977068	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9650	06						.char 6		; 8 bit signed exponent.  $00 = 2**0
.9651	4c fd 8b	jmp $8bfd			jmp FStar
=11					CL	.var *-(WordListLink+wh_Xt)
=$9654					en = *	; remember here
>9647	0b					.byte CL	;wh_CodeLength
>9654	46 41 52 65 64 75 63 65		L1:	.text "FAReduce"	;  name of word as a string, ending at wh_NameLastChar
>965c	a8					.byte (("FAReduce"[-1]&7)<<5)+(*-L1)	;wh_HNL
>965d	c4 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>965f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9660	08					.byte NN	;wh_Flags	dictionary flags
=38364					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9661	a4 4c		ldy $4c		FAReduce:	ldy fp
.9663	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.9666	f0 2f		beq $9697			beq _ok
.9668	b9 4d 00	lda $004d,y			lda FSExp,y		; get exponent
.966b	30 2a		bmi $9697			bmi _ok			; small?
.966d	c9 01		cmp #$01			cmp #1			; maybe need mirror?
.966f	30 26		bmi $9697			bmi _ok			;if exponent <=0
.9671	f0 24		beq $9697			beq _ok
.9673	c9 02		cmp #$02			cmp #2			; maybe need rotation?
.9675	b0 22		bcs $9699			bcs _exp2
.9677	b9 57 00	lda $0057,y			lda FSMant0,y
.967a	c9 65		cmp #$65			cmp #$65		;in -pi/2..pi/2 ?
.967c	90 19		bcc $9697			bcc _ok
.967e	c9 9b		cmp #$9b			cmp #$100-$65
.9680	b0 15		bcs $9697			bcs _ok
.9682					_mir:
.9682	20 45 89	jsr $8945			jsr FPi
.9685	a4 4c		ldy $4c				ldy fp
.9687	b9 58 00	lda $0058,y			lda FSMant0+1,y
.968a	10 03		bpl $968f			bpl _3
.968c	20 a2 8b	jsr $8ba2			jsr FNegate
.968f	20 00 85	jsr $8500	_3:		jsr FSwap
.9692	20 6b 8b	jsr $8b6b			jsr FMinus
.9695	38		sec				sec		; mirrored
.9696	60		rts				rts
.9697	18		clc		_ok:		clc		; not mirrored
.9698	60		rts				rts
.9699	d0 0b		bne $96a6	_exp2:		bne _rot	;if exp>2 then fix
.969b	b9 57 00	lda $0057,y			lda FSMant0,y
.969e	c9 65		cmp #$65			cmp #$65	;if mant>pi or mant<-pi then fix
.96a0	90 e0		bcc $9682			bcc _mir
.96a2	c9 9b		cmp #$9b			cmp #$100-$65
.96a4	b0 dc		bcs $9682			bcs _mir
.96a6	20 77 89	jsr $8977	_rot:		jsr F2Pi
.96a9	20 bb 8c	jsr $8cbb			jsr FSlash
.96ac	20 17 87	jsr $8717			jsr FIntFrc
.96af	e6 4c		inc $4c				inc fp		; FDrop integer part
.96b1	a4 4c		ldy $4c				ldy fp		;if >=.5
.96b3	b9 4d 00	lda $004d,y			lda FSExp,y
.96b6	a8		tay				tay
.96b7	30 03		bmi $96bc			bmi _rot4
.96b9	20 90 8b	jsr $8b90			jsr F1Minus	;  subtract 1
.96bc	20 77 89	jsr $8977	_rot4:		jsr F2Pi
.96bf	20 fd 8b	jsr $8bfd			jsr FStar
.96c2	4c 61 96	jmp $9661			jmp FAReduce	; rotate done, look again
=100					CL	.var *-(WordListLink+wh_Xt)
=$96c5					en = *	; remember here
>965f	64					.byte CL	;wh_CodeLength
>96c5	46 53 69 6e 4d			L1:	.text "FSinM"	;  name of word as a string, ending at wh_NameLastChar
>96ca	a5					.byte (("FSinM"[-1]&7)<<5)+(*-L1)	;wh_HNL
>96cb	dc 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96ce	08					.byte NN	;wh_Flags	dictionary flags
=38474					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.96cf	20 78 84	jsr $8478	FSinM:		jsr FDup
.96d2	20 8e 8c	jsr $8c8e			jsr FSqr	; x x^2
.96d5	a9 e5		lda #$e5			lda #<_c
.96d7	a0 96		ldy #$96			ldy #>_c
.96d9	20 ac 94	jsr $94ac			jsr FMPolyYA
.96dc	20 fd 8b	jsr $8bfd			jsr FStar
.96df	20 5e 8b	jsr $8b5e			jsr F1Plus	; C0 +1.0
.96e2	4c fd 8b	jmp $8bfd			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$96e5					en = *	; remember here
>96cd	16					.byte CL	;wh_CodeLength
.96e5					_c:
>96e5	a6 a7 21 57					.dword $5721a7a6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96e9	ee						.char -18		; 8 bit signed exponent.  $00 = 2**0
>96ea	4e 0b 2a 98					.dword $982a0b4e	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96ee	f4						.char -12		; 8 bit signed exponent.  $00 = 2**0
>96ef	3c 8f 43 44					.dword $44438f3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96f3	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>96f4	37 ae aa aa					.dword $aaaaae37	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96f8	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>96f9	00						.byte 0
>96fa	46 53 69 6e			L1:	.text "FSin"	;  name of word as a string, ending at wh_NameLastChar
>96fe	c4					.byte (("FSin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>96ff	4a 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9701	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9702	08					.byte NN	;wh_Flags	dictionary flags
=38526					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9703	20 61 96	jsr $9661	FSin:		jsr FAReduce
.9706	4c cf 96	jmp $96cf			jmp FSinM
=6					CL	.var *-(WordListLink+wh_Xt)
=$9709					en = *	; remember here
>9701	06					.byte CL	;wh_CodeLength
>9709	46 43 6f 73			L1:	.text "FCos"	;  name of word as a string, ending at wh_NameLastChar
>970d	64					.byte (("FCos"[-1]&7)<<5)+(*-L1)	;wh_HNL
>970e	7e 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9710	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9711	08					.byte NN	;wh_Flags	dictionary flags
=38541					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9712	20 56 89	jsr $8956	FCos:		jsr FPiH
.9715	20 29 8b	jsr $8b29			jsr FPlus
.9718	4c 03 97	jmp $9703			jmp FSin
=9					CL	.var *-(WordListLink+wh_Xt)
=$971b					en = *	; remember here
>9710	09					.byte CL	;wh_CodeLength
>971b	46 53 69 6e 43 6f 73		L1:	.text "FSinCos"	;  name of word as a string, ending at wh_NameLastChar
>9722	67					.byte (("FSinCos"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9723	8d 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9725	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9726	08					.byte NN	;wh_Flags	dictionary flags
=38562					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9727	20 78 84	jsr $8478	FSinCos:	jsr FDup
.972a	20 03 97	jsr $9703			jsr FSin
.972d	20 00 85	jsr $8500			jsr FSwap
.9730	4c 12 97	jmp $9712			jmp FCos
=12					CL	.var *-(WordListLink+wh_Xt)
=$9733					en = *	; remember here
>9725	0c					.byte CL	;wh_CodeLength
>9733	46 54 61 6e 4d			L1:	.text "FTanM"	;  name of word as a string, ending at wh_NameLastChar
>9738	a5					.byte (("FTanM"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9739	a2 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>973b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>973c	08					.byte NN	;wh_Flags	dictionary flags
=38584					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.973d	20 78 84	jsr $8478	FTanM:		jsr FDup
.9740	20 8e 8c	jsr $8c8e			jsr FSqr		; x x^2
.9743	a9 53		lda #$53			lda #<_c
.9745	a0 97		ldy #$97			ldy #>_c
.9747	20 ac 94	jsr $94ac			jsr FMPolyYA
.974a	20 fd 8b	jsr $8bfd			jsr FStar
.974d	20 5e 8b	jsr $8b5e			jsr F1Plus		; c0 1.0
.9750	4c fd 8b	jmp $8bfd			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$9753					en = *	; remember here
>973b	16					.byte CL	;wh_CodeLength
.9753					_c:
>9753	1e ae 4d 58					.dword $584DAE1E	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9757	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>9758	51 0a eb 57					.dword $57EB0A51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>975c	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>975d	98 d9 14 77					.dword $7714D998	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9761	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9762	f9 10 ea 43					.dword $43EA10F9	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9766	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9767	1b e2 57 55					.dword $5557E21B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>976b	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>976c	00						.byte 0
>976d	46 54 61 6e			L1:	.text "FTan"	;  name of word as a string, ending at wh_NameLastChar
>9771	c4					.byte (("FTan"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9772	b8 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9774	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9775	08					.byte NN	;wh_Flags	dictionary flags
=38641					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9776	20 61 96	jsr $9661	FTan:		jsr FAReduce
.9779	90 06		bcc $9781			bcc _30
.977b	20 81 97	jsr $9781			jsr _30
.977e	4c a2 8b	jmp $8ba2			jmp FNegate
.9781					_30:
.9781	20 78 84	jsr $8478			jsr FDup
.9784	20 c9 8b	jsr $8bc9			jsr FAbs
.9787	20 67 89	jsr $8967			jsr FPiQ
.978a	20 d3 87	jsr $87d3			jsr FLe
.978d	e8		inx				inx			; pop f
.978e	e8		inx				inx
.978f	b5 24		lda $24,x			lda DStack+0,x
.9791	d0 aa		bne $973d			bne FTanM
.9793	20 a2 44	jsr $44a2			jsr FPi/2
.9796	a4 4c		ldy $4c				ldy fp			; get sign
.9798	b9 57 00	lda $0057,y			lda FSMant0,y
.979b	10 03		bpl $97a0			bpl +
.979d	20 a2 8b	jsr $8ba2			jsr FNegate
.97a0					+
.97a0	20 00 85	jsr $8500			jsr FSwap
.97a3	20 6b 8b	jsr $8b6b			jsr FMinus
.97a6	20 3d 97	jsr $973d			jsr FTanM
.97a9	4c 60 8d	jmp $8d60			jmp F1Slash
=54					CL	.var *-(WordListLink+wh_Xt)
=$97ac					en = *	; remember here
>9774	36					.byte CL	;wh_CodeLength
>97ac	46 41 43 6f 73			L1:	.text "FACos"	;  name of word as a string, ending at wh_NameLastChar
>97b1	65					.byte (("FACos"[-1]&7)<<5)+(*-L1)	;wh_HNL
>97b2	f1 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>97b4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>97b5	08					.byte NN	;wh_Flags	dictionary flags
=38705					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.97b6	a4 4c		ldy $4c		FACos:		ldy fp
.97b8	b9 57 00	lda $0057,y			lda FSMant0,y
.97bb	08		php				php			; save sign
.97bc	20 c9 8b	jsr $8bc9			jsr FAbs
.97bf	a9 e2		lda #$e2			lda #<_c
.97c1	a0 97		ldy #$97			ldy #>_c
.97c3	20 ac 94	jsr $94ac			jsr FMPolyYA
.97c6	20 00 85	jsr $8500			jsr FSwap
.97c9	20 a2 8b	jsr $8ba2			jsr FNegate
.97cc	20 5e 8b	jsr $8b5e			jsr F1Plus
.97cf	20 3b 8f	jsr $8f3b			jsr FSqrt
.97d2	20 fd 8b	jsr $8bfd			jsr FStar
.97d5	28		plp				plp			; was r1 negative?
.97d6	10 09		bpl $97e1			bpl +
.97d8	20 45 89	jsr $8945			jsr FPi
.97db	20 00 85	jsr $8500			jsr FSwap
.97de	20 6b 8b	jsr $8b6b			jsr FMinus
.97e1					+
=43					CL	.var *-(WordListLink+wh_Xt)
=$97e1					en = *	; remember here
>97b4	2b					.byte CL	;wh_CodeLength
.97e1	60		rts				rts
.97e2					_c:
>97e2	8b 5e 9f 4b					.dword $4B9F5E8B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97e6	f8						.char -8		; 8 bit signed exponent.  $00 = 2**0
>97e7	ad cc 29 a4					.dword $A429CCAD	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97eb	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>97ec	98 a1 a3 6e					.dword $6EA3A198	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97f0	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>97f1	5a 10 e1 9b					.dword $9BE1105A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97f5	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>97f6	c6 71 ea 5a					.dword $5AEA71C6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97fa	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>97fb	e0 56 21 92					.dword $922156E0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97ff	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9800	41 ed 87 64					.dword $6487ED41	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9804	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>9805	00						.byte 0
>9806	46 41 53 69 6e			L1:	.text "FASin"	;  name of word as a string, ending at wh_NameLastChar
>980b	c5					.byte (("FASin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>980c	31 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>980e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>980f	08					.byte NN	;wh_Flags	dictionary flags
=38795					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9810	20 b6 97	jsr $97b6	FASin:		jsr FACos
.9813	20 a2 8b	jsr $8ba2			jsr FNegate
.9816	20 56 89	jsr $8956			jsr FPiH
.9819	4c 29 8b	jmp $8b29			jmp FPlus
=12					CL	.var *-(WordListLink+wh_Xt)
=$981c					en = *	; remember here
>980e	0c					.byte CL	;wh_CodeLength
>981c	46 41 54 61 6e 4d		L1:	.text "FATanM"	;  name of word as a string, ending at wh_NameLastChar
>9822	a6					.byte (("FATanM"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9823	8b 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9825	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9826	08					.byte NN	;wh_Flags	dictionary flags
=38818					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9827	20 78 84	jsr $8478	FATanM:		jsr FDup		; x x
.982a	20 8e 8c	jsr $8c8e			jsr FSqr		; x xsqr
.982d	a9 3d		lda #$3d			lda #<_c
.982f	a0 98		ldy #$98			ldy #>_c
.9831	20 ac 94	jsr $94ac			jsr FMPolyYA
.9834	20 fd 8b	jsr $8bfd			jsr FStar		; x poly
.9837	20 5e 8b	jsr $8b5e			jsr F1Plus		; x poly
.983a	4c fd 8b	jmp $8bfd			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$983d					en = *	; remember here
>9825	16					.byte CL	;wh_CodeLength
.983d					_c:
>983d	98 08 2d 76					.dword $762D0898	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9841	f9						.char -7		; 8 bit signed exponent.  $00 = 2**0
>9842	55 a1 32 b8					.dword $B832A155	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9846	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9847	a8 d7 a2 53					.dword $53A2D7A8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>984b	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>984c	be 91 85 bb					.dword $BB8591BE	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9850	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9851	06 65 aa 65					.dword $65AA6506	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9855	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9856	12 21 b0 aa					.dword $AAB02112	; 32 bit signed binary mantissa.  $40000000 = +0.5
>985a	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>985b	00						.byte 0
>985c	46 41 54 61 6e			L1:	.text "FATan"	;  name of word as a string, ending at wh_NameLastChar
>9861	c5					.byte (("FATan"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9862	a2 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9864	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9865	08					.byte NN	;wh_Flags	dictionary flags
=38881					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9866					FATan:
.9866	a4 4c		ldy $4c				ldy fp
.9868	b9 4d 00	lda $004d,y			lda FSExp,y		; Abs(r1)<1 ?
.986b	30 ba		bmi $9827			bmi FATanM
.986d	f0 b8		beq $9827			beq FATanM
.986f	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.9872	08		php				php
.9873	20 60 8d	jsr $8d60			jsr F1Slash
.9876	20 27 98	jsr $9827			jsr FATanM
.9879	20 a2 8b	jsr $8ba2			jsr FNegate
.987c	20 56 89	jsr $8956			jsr FPiH
.987f	28		plp				plp
.9880	10 03		bpl $9885			bpl _18
.9882	20 a2 8b	jsr $8ba2			jsr FNegate
.9885	4c 29 8b	jmp $8b29	_18:		jmp FPlus
>9888	46 41 54 61 6e 32		L1:	.text "FATan2"	;  name of word as a string, ending at wh_NameLastChar
>988e	46					.byte (("FATan2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>988f	e1 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9891	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9892	08					.byte NN	;wh_Flags	dictionary flags
=38926					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9893	a4 4c		ldy $4c		FATan2:		ldy fp
.9895	b9 57 00	lda $0057,y			lda FSMant0+0,y	; get rx sign
.9898	f0 1c		beq $98b6			beq _rxzero
.989a	0a		asl a				asl a		;   C=rx sign
.989b	b9 58 00	lda $0058,y			lda FSMant0+1,y	;   N=ry sign
.989e	08		php				php		; save signs
.989f	20 bb 8c	jsr $8cbb			jsr FSlash
.98a2	20 66 98	jsr $9866			jsr FATan
.98a5	28		plp				plp		; pop signs
.98a6	b0 01		bcs $98a9			bcs _rxneg
.98a8	60		rts		_rts:		rts
.98a9	08		php		_rxneg:		php
.98aa	20 45 89	jsr $8945			jsr FPi
.98ad	28		plp				plp
.98ae	10 03		bpl $98b3			bpl +
.98b0	20 a2 8b	jsr $8ba2			jsr FNegate
.98b3	4c 29 8b	jmp $8b29	+		jmp FPlus
.98b6	e6 4c		inc $4c		_rxzero:	inc fp		; FDrop rx
.98b8	b9 57 00	lda $0057,y			lda FSMant0,y
.98bb	08		php				php
.98bc	e6 4c		inc $4c				inc fp		; FDrop ry
.98be	20 56 89	jsr $8956			jsr FPiH
.98c1	28		plp				plp
.98c2	10 e4		bpl $98a8			bpl _rts
.98c4	4c a2 8b	jmp $8ba2			jmp FNegate
=52					CL	.var *-(WordListLink+wh_Xt)
=$98c7					en = *	; remember here
>9891	34					.byte CL	;wh_CodeLength
>98c7	45 64				L1:	.text "Ed"	;  name of word as a string, ending at wh_NameLastChar
>98c9	82					.byte (("Ed"[-1]&7)<<5)+(*-L1)	;wh_HNL
>98ca	0e 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>98cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>98cd	08					.byte NN	;wh_Flags	dictionary flags
=38985					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.98ce	4c d1 98	jmp $98d1	Ed:		jmp ed6502
=3					CL	.var *-(WordListLink+wh_Xt)
=$98d1					en = *	; remember here
>98cc	03					.byte CL	;wh_CodeLength
=$1e					ed_head	 = editor1  ; pointer to first list element (addr) (2 bytes)
=$20					ed_cur	 = editor2  ; current line number (1 is first line) (2 bytes)
=$22					ed_flags = editor3  ; Flags used by ed, where
.98d1					ed6502:
.98d1	ad 00 03	lda $0300			lda base
.98d4	85 23		sta $23				sta editor3+1
.98d6	20 63 b1	jsr $b163			jsr Decimal
.98d9	a9 00		lda #$00			lda #0
.98db	85 1e		sta $1e				sta ed_head
.98dd	85 1f		sta $1f				sta ed_head+1
.98df	85 20		sta $20				sta ed_cur
.98e1	85 21		sta $21				sta ed_cur+1
.98e3	85 22		sta $22				sta ed_flags
.98e5	20 b5 b7	jsr $b7b5			jsr Zero
.98e8	20 b5 b7	jsr $b7b5			jsr Zero		; ( addr-t u-t )
.98eb	20 e2 aa	jsr $aae2			jsr CR
.98ee					ed_input_loop:
.98ee	a9 7e		lda #$7e			lda #$ff-%10000001
.98f0	25 22		and $22				and ed_flags
.98f2	85 22		sta $22				sta ed_flags
.98f4	20 96 9d	jsr $9d96			jsr ed_get_input
.98f7	a5 06		lda $06				lda ciblen+0
.98f9	d0 1e		bne $9919			bne _command_mode
.98fb	a5 20		lda $20				lda ed_cur+0
.98fd	a4 21		ldy $21				ldy ed_cur+1
.98ff	20 64 b7	jsr $b764			jsr PushYA		; ( addr-t u-t u )
.9902	a9 80		lda #$80			lda #%10000000
.9904	05 22		ora $22				ora ed_flags
.9906	85 22		sta $22				sta ed_flags
.9908	20 fd c9	jsr $c9fd			jsr One_Plus		; ( addr-t u-t u+1 )
.990b	20 b1 9d	jsr $9db1			jsr ed_is_valid_line
.990e	b0 03		bcs $9913			bcs +
.9910	4c 86 9d	jmp $9d86			jmp ed_error_1drop	; New line number is not legal, abort
.9913					+
.9913	20 b5 b7	jsr $b7b5			jsr Zero		; ( addr-t u-t u+1 0 )
.9916	4c d8 99	jmp $99d8			jmp _line_number_only_from_external
.9919					_command_mode:
.9919	20 b5 b7	jsr $b7b5			jsr Zero		; parameter 1 is NOS ( addr-t u-t 0 )
.991c	20 b5 b7	jsr $b7b5			jsr Zero		; parameter 2 is TOS ( addr-t u-t 0 0 )
.991f	a0 00		ldy #$00			ldy #0			; get char
.9921	b1 04		lda ($04),y			lda (cib),y
.9923	c9 2e		cmp #$2e			cmp #'.'
.9925	d0 31		bne $9958			bne _prefix_dollar
.9927	20 a5 9d	jsr $9da5			jsr ed_have_text
.992a	a5 20		lda $20				lda ed_cur
.992c	95 26		sta $26,x			sta DStack+2,x
.992e	a5 21		lda $21				lda ed_cur+1
.9930	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9932	a9 80		lda #$80			lda #%10000000
.9934	05 22		ora $22				ora ed_flags
.9936	85 22		sta $22				sta ed_flags
.9938	a5 06		lda $06				lda ciblen
.993a	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.993c	d0 03		bne $9941			bne +
.993e	4c d8 99	jmp $99d8			jmp _line_number_only_from_external
.9941					+
.9941	a5 04		lda $04				lda cib+0
.9943	a4 05		ldy $05				ldy cib+1
.9945	20 64 b7	jsr $b764			jsr PushYA
.9948	a5 06		lda $06				lda ciblen+0
.994a	a4 07		ldy $07				ldy ciblen+1
.994c	20 64 b7	jsr $b764			jsr PushYA
.994f	20 d7 c9	jsr $c9d7			jsr One_Minus		; ( addr-t u-t para1 0 addr u-1 )
.9952	20 07 ca	jsr $ca07			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr+1 u-1 )
.9955	4c 2a 9a	jmp $9a2a			jmp _check_for_para2
.9958					_prefix_dollar:
.9958	c9 24		cmp #$24			cmp #'$'
.995a	d0 1f		bne $997b			bne _prefix_percent
.995c	20 a5 9d	jsr $9da5			jsr ed_have_text
.995f	e8		inx				inx
.9960	e8		inx				inx			; ( addr-t u-t 0 )
.9961	20 d2 9d	jsr $9dd2			jsr ed_last_line	; ( addr-t u-t 0 para1 )
.9964	20 25 cf	jsr $cf25			jsr Swap		; ( addr-t u-t para1 0 )
.9967	a9 80		lda #$80			lda #%10000000
.9969	05 22		ora $22				ora ed_flags
.996b	85 22		sta $22				sta ed_flags
.996d	a5 06		lda $06				lda ciblen
.996f	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9971	d0 03		bne $9976			bne +
.9973	4c d8 99	jmp $99d8			jmp _line_number_only_from_external
.9976					+
.9976	a0 01		ldy #$01			ldy #1
.9978	4c a0 9a	jmp $9aa0			jmp _check_command
.997b					_prefix_percent:
.997b	c9 25		cmp #$25			cmp #'%'
.997d	f0 04		beq $9983			beq _whole_text
.997f	c9 2c		cmp #$2c			cmp #','
.9981	d0 1b		bne $999e			bne _prefix_semicolon
.9983					_whole_text:
.9983	20 a5 9d	jsr $9da5			jsr ed_have_text
.9986	a9 01		lda #$01			lda #1
.9988	95 26		sta $26,x			sta DStack+2,x		; LSB of NOS is para 1
.998a	a9 00		lda #$00			lda #0
.998c	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t para1 0 )
.998e					_semicolon_entry:
.998e	e8		inx				inx
.998f	e8		inx				inx			; DROP ( addr-t u-t para1 )
.9990	20 d2 9d	jsr $9dd2			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9993	a9 80		lda #$80			lda #%10000000
.9995	05 22		ora $22				ora ed_flags
.9997	85 22		sta $22				sta ed_flags
.9999	a0 01		ldy #$01			ldy #1
.999b	4c a0 9a	jmp $9aa0			jmp _check_command
.999e					_prefix_semicolon:
.999e	c9 3b		cmp #$3b			cmp #';'
.99a0	d0 0e		bne $99b0			bne _prefix_number
.99a2	20 a5 9d	jsr $9da5			jsr ed_have_text
.99a5	a5 20		lda $20				lda ed_cur
.99a7	95 26		sta $26,x			sta DStack+2,x
.99a9	a5 21		lda $21				lda ed_cur+1
.99ab	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.99ad	4c 8e 99	jmp $998e			jmp _semicolon_entry
.99b0					_prefix_number:
.99b0	20 b5 b7	jsr $b7b5			jsr Zero
.99b3	20 b5 b7	jsr $b7b5			jsr Zero		; ( addr-t u-t 0 0 0 0 )
.99b6	a5 04		lda $04				lda cib+0
.99b8	a4 05		ldy $05				ldy cib+1
.99ba	20 64 b7	jsr $b764			jsr PushYA
.99bd	a5 06		lda $06				lda ciblen+0
.99bf	a4 07		ldy $07				ldy ciblen+1
.99c1	20 64 b7	jsr $b764			jsr PushYA		; ( addr-t u-t 0 0 0 0 cib ciblen )
.99c4	20 e4 af	jsr $afe4			jsr To_Number		; ( addr-t u-t 0 0 ud addr2 u2 )
.99c7	b5 24		lda $24,x			lda DStack+0,x
.99c9	15 25		ora $25,x			ora DStack+1,x
.99cb	d0 25		bne $99f2			bne _have_unconverted_chars
.99cd	20 c1 c4	jsr $c4c1			jsr Two_Drop		; ( addr-t u-t 0 0 ud )
.99d0	20 ee bf	jsr $bfee			jsr D_To_S		; ( addr-t u-t 0 0 u )
.99d3	20 31 ce	jsr $ce31			jsr Not_Rot		; ( addr-t u-t u 0 0 )
.99d6	e8		inx				inx
.99d7	e8		inx				inx			; ( addr-t u-t u 0 ) drop through
.99d8					_line_number_only_from_external:
.99d8	20 25 cf	jsr $cf25			jsr Swap		; ( addr-t u-t 0 u )
.99db	20 b1 9d	jsr $9db1			jsr ed_is_valid_line
.99de	b0 03		bcs $99e3			bcs +
.99e0	4c 84 9d	jmp $9d84			jmp ed_error_2drop
.99e3					+
.99e3	20 25 cf	jsr $cf25			jsr Swap		; ( addr-t u-t u 0 )
.99e6	20 11 9e	jsr $9e11			jsr ed_para1_to_cur
.99e9	a9 80		lda #$80			lda #%10000000
.99eb	05 22		ora $22				ora ed_flags
.99ed	85 22		sta $22				sta ed_flags
.99ef	4c 6f 9c	jmp $9c6f			jmp ed_cmd_p_from_external
.99f2					_have_unconverted_chars:
.99f2	a5 06		lda $06				lda ciblen+0
.99f4	d5 24		cmp $24,x			cmp DStack+0,x
.99f6	d0 16		bne $9a0e			bne _no_command_yet
.99f8	a5 07		lda $07				lda ciblen+1
.99fa	d5 25		cmp $25,x			cmp DStack+1,x
.99fc	d0 10		bne $9a0e			bne _no_command_yet
.99fe	8a		txa				txa
.99ff	18		clc				clc
.9a00	69 08		adc #$08			adc #8
.9a02	aa		tax				tax			; ( addr-t u-t 0 0 )
.9a03	a9 7f		lda #$7f			lda #$ff-%10000000
.9a05	25 22		and $22				and ed_flags
.9a07	85 22		sta $22				sta ed_flags
.9a09	a0 00		ldy #$00			ldy #0
.9a0b	4c a0 9a	jmp $9aa0			jmp _check_command
.9a0e					_no_command_yet:
.9a0e	20 8c ce	jsr $ce8c			jsr To_R		; >R ( ... 0 0 ud addr2 ) (R: u2)
.9a11	20 31 ce	jsr $ce31			jsr Not_Rot		; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.9a14	20 ee bf	jsr $bfee			jsr D_To_S		; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.9a17	b5 24		lda $24,x			lda DStack+0,x		; LSB
.9a19	95 2a		sta $2a,x			sta DStack+6,x
.9a1b	b5 25		lda $25,x			lda DStack+1,x		; MSB
.9a1d	95 2b		sta $2b,x			sta DStack+7,x		; ( ... para1 0 addr2 para1 ) (R: u2)
.9a1f	e8		inx				inx
.9a20	e8		inx				inx			; ( addr-t u-t para1 0 addr2 ) (R: u2)
.9a21	20 ab ce	jsr $ceab			jsr R_From		; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.9a24	a9 80		lda #$80			lda #%10000000
.9a26	05 22		ora $22				ora ed_flags
.9a28	85 22		sta $22				sta ed_flags
.9a2a					_check_for_para2:
.9a2a	a1 26		lda ($26,x)			lda (DStack+2,x)
.9a2c	c9 2c		cmp #$2c			cmp #','
.9a2e	f0 0c		beq $9a3c			beq _got_comma
.9a30	38		sec				sec
.9a31	a5 06		lda $06				lda ciblen
.9a33	f5 24		sbc $24,x			sbc DStack+0,x
.9a35	a8		tay				tay
.9a36	20 c1 c4	jsr $c4c1			jsr Two_Drop		; Remove the leftover stuff from >NUMBER
.9a39	4c a0 9a	jmp $9aa0			jmp _check_command
.9a3c					_got_comma:
.9a3c	20 07 ca	jsr $ca07			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr2+1 u2 )
.9a3f	20 d7 c9	jsr $c9d7			jsr One_Minus		; ( addr-t u-t para1 0 addr2+1 u2-1 )
.9a42	a1 26		lda ($26,x)			lda (DStack+2,x)
.9a44	c9 24		cmp #$24			cmp #'$'
.9a46	d0 16		bne $9a5e			bne _para2_not_dollar
.9a48	38		sec				sec
.9a49	a5 06		lda $06				lda ciblen
.9a4b	f5 26		sbc $26,x			sbc DStack+2,x
.9a4d	a8		tay				tay
.9a4e	c8		iny				iny
.9a4f	98		tya				tya
.9a50	48		pha				pha
.9a51	8a		txa				txa
.9a52	18		clc				clc
.9a53	69 06		adc #$06			adc #6
.9a55	aa		tax				tax			; ( addr-t u-t para1 )
.9a56	20 d2 9d	jsr $9dd2			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9a59	68		pla				pla
.9a5a	a8		tay				tay
.9a5b	4c a0 9a	jmp $9aa0			jmp _check_command
.9a5e					_para2_not_dollar:
.9a5e	20 8c ce	jsr $ce8c			jsr To_R		; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.9a61	20 b5 b7	jsr $b7b5			jsr Zero		; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.9a64	20 b5 b7	jsr $b7b5			jsr Zero		; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.9a67	20 0b ce	jsr $ce0b			jsr Rot		; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.9a6a	20 ab ce	jsr $ceab			jsr R_From		; R> ( ... para1 0 0 0 addr2+1 u2-1)
.9a6d	20 07 cf	jsr $cf07			jsr Dup		; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.9a70	20 8c ce	jsr $ce8c			jsr To_R		; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.9a73	20 e4 af	jsr $afe4			jsr To_Number	; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.9a76	20 07 cf	jsr $cf07			jsr Dup		; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.9a79	20 ab ce	jsr $ceab			jsr R_From		; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.9a7c	20 be c7	jsr $c7be			jsr Equal		; = ( ... para1 0 ud addr3 u3 f )
.9a7f	b5 24		lda $24,x			lda DStack+0,x
.9a81	15 25		ora $25,x			ora DStack+1,x
.9a83	f0 08		beq $9a8d			beq _second_number
.9a85	8a		txa				txa
.9a86	18		clc				clc
.9a87	69 0c		adc #$0c			adc #12
.9a89	aa		tax				tax			; back to ( addr-t u-t )
.9a8a	4c 88 9d	jmp $9d88			jmp ed_error
.9a8d					_second_number:
.9a8d	e8		inx				inx
.9a8e	e8		inx				inx			; ( addr-t u-t para1 0 ud addr3 u3 )
.9a8f	38		sec				sec
.9a90	a5 06		lda $06				lda ciblen
.9a92	f5 24		sbc $24,x			sbc DStack+0,x
.9a94	48		pha				pha
.9a95	20 c1 c4	jsr $c4c1			jsr Two_drop		; 2DROP ( addr-t u-t para1 0 ud )
.9a98	20 ee bf	jsr $bfee			jsr D_To_S		; D>S  ( addr-t u-t para1 0 para2 )
.9a9b	20 22 c9	jsr $c922			jsr Nip			; NIP ( addr-t u-t para1 para2 )
.9a9e	68		pla				pla
.9a9f	a8		tay				tay
.9aa0					_check_command:
.9aa0	24 22		bit $22				bit ed_flags
.9aa2	30 08		bmi $9aac			bmi _check_command_have_arg
.9aa4	a5 20		lda $20				lda ed_cur+0
.9aa6	95 26		sta $26,x			sta DStack+2,x
.9aa8	a5 21		lda $21				lda ed_cur+1
.9aaa	95 27		sta $27,x			sta DStack+3,x
.9aac					_check_command_have_arg:
.9aac	b1 04		lda ($04),y			lda (cib),y		; get mystery char from input
.9aae	85 14		sta $14				sta tmp1+0
.9ab0	85 15		sta $15				sta tmp1+1		; We need X for awhile, so it has to
.9ab2	a2 ff		ldx #$ff			ldx #$ff		; for each char
.9ab4	e8		inx		_cmd_loop:	inx			;   next char
.9ab5	bd 35 9e	lda $9e35,x			lda ed_cmd_list,x
.9ab8	f0 13		beq $9acd			beq _illegal_command	;   end of list?
.9aba	c5 14		cmp $14				cmp tmp1+0
.9abc	d0 f6		bne $9ab4			bne _cmd_loop		;   not found?
.9abe	8a		txa				txa
.9abf	0a		asl a				asl
.9ac0	aa		tax				tax			; X * 2 for table
.9ac1	bd 41 9e	lda $9e41,x			lda ed_cmd_table+1,x
.9ac4	48		pha				pha
.9ac5	bd 40 9e	lda $9e40,x			lda ed_Cmd_table+0,x
.9ac8	48		pha				pha
.9ac9	a6 15		ldx $15				ldx tmp1+1		; restore X
.9acb	08		php				php
.9acc	40		rti				rti			; jump to command routine
.9acd					_illegal_command:
.9acd	4c 84 9d	jmp $9d84			jmp ed_error_2drop
.9ad0					ed_next_command:
.9ad0	20 c1 c4	jsr $c4c1			jsr Two_Drop		; ( addr-t u-t ) Fall through
.9ad3					_next_command_empty:
.9ad3	4c ee 98	jmp $98ee			jmp ed_input_loop
.9ad6					ed_all_done:
.9ad6	a9 00		lda #$00			lda #0
.9ad8	85 06		sta $06				sta ciblen
.9ada	85 07		sta $07				sta ciblen+1
.9adc	20 c1 c4	jsr $c4c1			jsr Two_drop			; ( addr-t u-t )
.9adf	a5 23		lda $23				lda editor3+1
.9ae1	8d 00 03	sta $0300			sta base
.9ae4	60		rts				rts
.9ae5					ed_cmd_a:
.9ae5	e8		inx				inx
.9ae6	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9ae7					ed_entry_cmd_i:
.9ae7					ed_cmd_a_have_para:
.9ae7	20 f6 9d	jsr $9df6			jsr ed_num_to_addr	  ;  ( addr-t u-t addr1 )
.9aea	20 e2 aa	jsr $aae2			jsr CR
.9aed					_next_string_loop:
.9aed	20 96 9d	jsr $9d96			jsr ed_get_input
.9af0	a0 00		ldy #$00			ldy #0
.9af2	b1 04		lda ($04),y			lda (cib),y
.9af4	c9 2e		cmp #$2e			cmp #'.'
.9af6	d0 18		bne $9b10			bne _add_line
.9af8	a4 06		ldy $06				ldy ciblen
.9afa	c0 01		cpy #$01			cpy #1
.9afc	d0 12		bne $9b10			bne _add_line
.9afe	a4 07		ldy $07				ldy ciblen+1
.9b00	d0 0e		bne $9b10			bne _add_line
.9b02	e8		inx				inx
.9b03	e8		inx				inx
.9b04	a9 40		lda #$40			lda #%01000000
.9b06	05 22		ora $22				ora ed_flags
.9b08	85 22		sta $22				sta ed_flags
.9b0a	20 e2 aa	jsr $aae2			jsr CR
.9b0d	4c ee 98	jmp $98ee			jmp ed_input_loop
.9b10					_add_line:
.9b10	20 07 cf	jsr $cf07			jsr Dup			; ( addr-t u-t addr1 addr1 )
.9b13	20 c9 c9	jsr $c9c9			jsr Here		; ( addr-t u-t addr1 addr1 here )
.9b16	20 25 cf	jsr $cf25			jsr Swap		; ( addr-t u-t addr1 here addr1 )
.9b19	20 71 ce	jsr $ce71			jsr Fetch		; ( addr-t u-t addr1 here addr2 )
.9b1c	20 bd cc	jsr $ccbd			jsr Comma		; ( addr-t u-t addr1 here )
.9b1f	20 82 cc	jsr $cc82			jsr Tuck		; TUCK ( addr-t u-t here addr1 here )
.9b22	20 25 cf	jsr $cf25			jsr Swap		; ( addr-t u-t here here addr1 )
.9b25	20 54 ce	jsr $ce54			jsr Store		; ( addr-t u-t here )
.9b28	20 c9 c9	jsr $c9c9			jsr Here		; HERE ( addr-t u-t here here2)
.9b2b	a9 04		lda #$04			lda #4
.9b2d	20 a6 b7	jsr $b7a6			jsr PushZA
.9b30	20 88 c0	jsr $c088			jsr Allot
.9b33	e6 20		inc $20				inc ed_cur
.9b35	d0 02		bne $9b39			bne +
.9b37	e6 21		inc $21				inc ed_cur+1
.9b39					+
.9b39	20 c9 c9	jsr $c9c9			jsr Here	; ( addr-t u-t here here2 here3 )
.9b3c	a5 04		lda $04				lda cib+0
.9b3e	a4 05		ldy $05				ldy cib+1
.9b40	20 64 b7	jsr $b764			jsr PushYA	; ( addr-t u-t here here2 here3 cib )
.9b43	20 de ce	jsr $cede			jsr Over	; ( addr-t u-t here here2 here3 cib here3 )
.9b46	a5 06		lda $06				lda ciblen+0
.9b48	a4 07		ldy $07				ldy ciblen+1
.9b4a	20 64 b7	jsr $b764			jsr PushYA	; ( addr-t u-t here here2 here3 cib here3 ciblen )
.9b4d	20 04 ad	jsr $ad04			jsr Move	; ( addr-t u-t here here2 here3 )
.9b50	18		clc				clc
.9b51	a5 00		lda $00				lda cp
.9b53	65 06		adc $06				adc ciblen
.9b55	85 00		sta $00				sta cp
.9b57	90 06		bcc $9b5f			bcc +
.9b59	a5 01		lda $01				lda cp+1
.9b5b	65 07		adc $07				adc ciblen+1
.9b5d	85 01		sta $01				sta cp+1
.9b5f					+
.9b5f	20 de ce	jsr $cede			jsr Over		; ( addr-t u-t here here2 here3 here2 )
.9b62	20 54 ce	jsr $ce54			jsr Store		; ( addr-t u-t here here2 )
.9b65	20 aa c9	jsr $c9aa			jsr Cell_Plus_NoUf	; ( addr-t u-t here here2+2 )
.9b68	20 07 cf	jsr $cf07			jsr Dup			; ( addr-t u-t here here2+2 here2+2 )
.9b6b	a5 06		lda $06				lda ciblen
.9b6d	95 26		sta $26,x			sta DStack+2,x
.9b6f	a5 07		lda $07				lda ciblen+1
.9b71	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t here ciblen here2+2 )
.9b73	20 54 ce	jsr $ce54			jsr Store		; ( addr-t u-t here )
.9b76	20 e2 aa	jsr $aae2			jsr CR			; Add a line feed for visuals
.9b79	4c ed 9a	jmp $9aed			jmp _next_string_loop
.9b7c					ed_cmd_d:
.9b7c	20 a5 9d	jsr $9da5			jsr ed_have_text
.9b7f	20 e8 9d	jsr $9de8			jsr ed_no_line_zero
.9b82	b5 24		lda $24,x			lda DStack+0,x
.9b84	15 25		ora $25,x			ora DStack+1,x
.9b86	d0 09		bne $9b91			bne +
.9b88	20 de ce	jsr $cede			jsr Over		; ( addr-t u-t para1 0 para1 )
.9b8b	20 c6 9b	jsr $9bc6			jsr _cmd_d_common	; ( addr-t u-t para1 0 )
.9b8e	4c ba 9b	jmp $9bba			jmp _cmd_d_done
.9b91					+
.9b91	20 b1 9d	jsr $9db1			jsr ed_is_valid_line	  ; result is in C flag
.9b94	b0 03		bcs $9b99			bcs _cmd_d_loop
.9b96	4c 84 9d	jmp $9d84			jmp ed_error_2drop
.9b99					_cmd_d_loop:
.9b99	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9b9b	d5 26		cmp $26,x			cmp DStack+2,x
.9b9d	b5 25		lda $25,x			lda DStack+1,x
.9b9f	f5 27		sbc $27,x			sbc DStack+3,x
.9ba1	90 0c		bcc $9baf			bcc _cmd_d_done_with_flag
.9ba3	20 07 cf	jsr $cf07			jsr Dup		; DUP ( addr-t u-t para1 para2 para2 )
.9ba6	20 c6 9b	jsr $9bc6			jsr _cmd_d_common	; ( addr-t u-t para1 para2 )
.9ba9	20 d7 c9	jsr $c9d7			jsr One_minus	; 1- ( addr-t u-t para1 para2-1 )
.9bac	4c 99 9b	jmp $9b99			jmp _cmd_d_loop
.9baf					_cmd_d_done_with_flag:
.9baf	20 e3 c9	jsr $c9e3			jsr NOS_One_Minus
.9bb2	b5 26		lda $26,x			lda DStack+2,x
.9bb4	85 20		sta $20				sta ed_cur
.9bb6	b5 27		lda $27,x			lda DStack+3,x
.9bb8	85 21		sta $21				sta ed_cur+1		; drop through to _cmd_d_done
.9bba					_cmd_d_done:
.9bba	a9 40		lda #$40			lda #%01000000
.9bbc	05 22		ora $22				ora ed_flags
.9bbe	85 22		sta $22				sta ed_flags
.9bc0	20 e2 aa	jsr $aae2			jsr CR
.9bc3	4c d0 9a	jmp $9ad0			jmp ed_next_command
.9bc6					_cmd_d_common:
.9bc6	20 07 cf	jsr $cf07			jsr Dup			; ( addr-t u-t u u )
.9bc9	20 f6 9d	jsr $9df6			jsr ed_num_to_addr	; ( addr-t u-t u addr )
.9bcc	20 71 ce	jsr $ce71			jsr Fetch		; ( addr-t u-t u addr1 )
.9bcf	20 25 cf	jsr $cf25			jsr Swap		; ( addr-t u-t addr1 u )
.9bd2	20 d7 c9	jsr $c9d7			jsr One_minus		; ( addr-t u-t addr1 u-1 )
.9bd5	20 f6 9d	jsr $9df6			jsr ed_num_to_addr	; ( addr-t u-t addr1 addr-1 )
.9bd8	4c 54 ce	jmp $ce54			jmp Store		; ( addr-t u-t )
.9bdb					ed_cmd_equ:
.9bdb	a5 1e		lda $1e				lda ed_head
.9bdd	05 1f		ora $1f				ora ed_head+1
.9bdf	d0 06		bne $9be7			bne _cmd_equ_have_text
.9be1	20 b5 b7	jsr $b7b5			jsr Zero		; ( addr-t u-t para1 para2 0 )
.9be4	4c 07 9c	jmp $9c07			jmp _cmd_equ_done
.9be7					_cmd_equ_have_text:
.9be7	20 e8 9d	jsr $9de8			jsr ed_no_line_zero
.9bea	24 22		bit $22				bit ed_flags
.9bec	30 0a		bmi $9bf8			bmi _cmd_equ_have_para
.9bee	a5 20		lda $20				lda ed_cur+0		; ( addr-t u-t para1 para2 ? )
.9bf0	a4 21		ldy $21				ldy ed_cur+1
.9bf2	20 64 b7	jsr $b764			jsr PushYA
.9bf5	4c 07 9c	jmp $9c07			jmp _cmd_equ_done	; ( addr-t u-t para1 para2 cur )
.9bf8					_cmd_equ_have_para:
.9bf8	b5 24		lda $24,x			lda DStack+0,x
.9bfa	15 25		ora $25,x			ora DStack+1,x
.9bfc	d0 06		bne $9c04			bne _cmd_equ_two_paras
.9bfe	20 de ce	jsr $cede			jsr Over		; ( addr-t u-t para1 para2 para1)
.9c01	4c 07 9c	jmp $9c07			jmp _cmd_equ_done
.9c04					_cmd_equ_two_paras:
.9c04	20 07 cf	jsr $cf07			jsr Dup			; ( addr-t u-t para1 para2 para2) drop through
.9c07					_cmd_equ_done:
.9c07	20 e2 aa	jsr $aae2			jsr CR			; number goes on new line
.9c0a	20 b6 cb	jsr $cbb6			jsr U_Dot		; ( addr-t u-t para1 para2 )
.9c0d	20 e2 aa	jsr $aae2			jsr CR
.9c10	4c d0 9a	jmp $9ad0			jmp ed_next_command
.9c13					ed_cmd_f:
.9c13	24 22		bit $22				bit ed_flags
.9c15	30 18		bmi $9c2f			bmi _cmd_f_have_para
.9c17	20 e2 aa	jsr $aae2			jsr CR
.9c1a	20 8c ce	jsr $ce8c			jsr To_R		; ( addr-t u-t 0 ) ( R: 0 )
.9c1d	20 0b ce	jsr $ce0b			jsr Rot			; ( u-t 0 addr-t ) ( R: 0 )
.9c20	20 07 cf	jsr $cf07			jsr Dup			; ( u-t 0 addr-t addr-t ) ( R: 0 )
.9c23	20 b6 cb	jsr $cbb6			jsr U_Dot		; ( u-t 0 addr-t ) ( R: 0 )
.9c26	20 31 ce	jsr $ce31			jsr Not_Rot		; ( addr-t u-t 0 ) ( R: 0 )
.9c29	20 ab ce	jsr $ceab			jsr R_From		; ( addr-t u-t 0 0 )
.9c2c	4c 40 9c	jmp $9c40			jmp _cmd_f_done
.9c2f					_cmd_f_have_para:
.9c2f	20 de ce	jsr $cede			jsr Over
.9c32	20 e2 aa	jsr $aae2			jsr CR
.9c35	20 b6 cb	jsr $cbb6			jsr U_Dot
.9c38	b5 26		lda $26,x			lda DStack+2,x
.9c3a	95 2a		sta $2a,x			sta DStack+6,x
.9c3c	b5 27		lda $27,x			lda DStack+3,x
.9c3e	95 2b		sta $2b,x			sta DStack+7,x		; fall through to _cmd_f_done
.9c40					_cmd_f_done:
.9c40	20 e2 aa	jsr $aae2			jsr CR
.9c43	4c d0 9a	jmp $9ad0			jmp ed_next_command
.9c46					ed_cmd_i:
.9c46	e8		inx				inx
.9c47	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9c48	24 22		bit $22				bit ed_flags
.9c4a	30 08		bmi $9c54			bmi _cmd_i_have_para
.9c4c	a5 20		lda $20				lda ed_cur
.9c4e	95 24		sta $24,x			sta DStack+0,x
.9c50	a5 21		lda $21				lda ed_cur+1
.9c52	95 25		sta $25,x			sta DStack+1,x		;  ( addr-t u-t cur ) drop through
.9c54					_cmd_i_have_para:
.9c54	b5 24		lda $24,x			lda DStack+0,x
.9c56	15 25		ora $25,x			ora DStack+1,x
.9c58	f0 09		beq $9c63			beq _cmd_i_done
.9c5a	20 d7 c9	jsr $c9d7			jsr One_minus		; ( addr-t u-t para1-1 )
.9c5d	20 b5 b7	jsr $b7b5			jsr Zero		; ( addr-t u-t para1-1 0 )
.9c60	20 07 c9	jsr $c907			jsr Max			; ( addr-t u-t para1-1 | 0 )
.9c63					_cmd_i_done:
.9c63	4c e7 9a	jmp $9ae7			jmp ed_entry_cmd_i
.9c66					ed_cmd_n:
.9c66	a9 01		lda #$01			lda #%00000001
.9c68	05 22		ora $22				ora ed_flags
.9c6a	85 22		sta $22				sta ed_flags
.9c6c	4c 75 9c	jmp $9c75			jmp ed_cmd_p_entry_for_cmd_n
.9c6f					ed_cmd_p:
.9c6f					ed_cmd_p_from_external:
.9c6f	a9 fe		lda #$fe			lda #$ff-%00000001
.9c71	25 22		and $22				and ed_flags
.9c73	85 22		sta $22				sta ed_flags
.9c75					ed_cmd_p_entry_for_cmd_n:
.9c75	20 a5 9d	jsr $9da5			jsr ed_have_text
.9c78	20 e8 9d	jsr $9de8			jsr ed_no_line_zero
.9c7b	20 e2 aa	jsr $aae2			jsr CR
.9c7e	b5 24		lda $24,x			lda DStack+0,x
.9c80	15 25		ora $25,x			ora DStack+1,x
.9c82	d0 11		bne $9c95			bne _cmd_p_loop
.9c84	b5 26		lda $26,x			lda DStack+2,x
.9c86	85 20		sta $20				sta ed_cur
.9c88	b5 27		lda $27,x			lda DStack+3,x
.9c8a	85 21		sta $21				sta ed_cur+1
.9c8c	20 de ce	jsr $cede			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9c8f	20 b6 9c	jsr $9cb6			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9c92	4c b3 9c	jmp $9cb3			jmp _cmd_p_all_done
.9c95					_cmd_p_loop:
.9c95	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9c97	d5 26		cmp $26,x			cmp DStack+2,x
.9c99	b5 25		lda $25,x			lda DStack+1,x
.9c9b	f5 27		sbc $27,x			sbc DStack+3,x
.9c9d	90 0c		bcc $9cab			bcc _cmd_p_done
.9c9f	20 de ce	jsr $cede			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9ca2	20 b6 9c	jsr $9cb6			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9ca5	20 07 ca	jsr $ca07			jsr NOS_One_Plus
.9ca8	4c 95 9c	jmp $9c95			jmp _cmd_p_loop
.9cab					_cmd_p_done:
.9cab	b5 24		lda $24,x			lda DStack+0,x
.9cad	85 20		sta $20				sta ed_cur
.9caf	b5 25		lda $25,x			lda DStack+1,x
.9cb1	85 21		sta $21				sta ed_cur+1
.9cb3					_cmd_p_all_done:
.9cb3	4c d0 9a	jmp $9ad0			jmp ed_next_command
.9cb6					_cmd_p_common:
.9cb6	a5 22		lda $22				lda ed_flags
.9cb8	4a		lsr a				lsr			; bit 0 now in carry
.9cb9	90 0b		bcc $9cc6			bcc _cmd_p_common_no_num
.9cbb	20 07 cf	jsr $cf07			jsr Dup			; ( addr-t u-t para1 para1 )
.9cbe	20 b6 cb	jsr $cbb6			jsr U_Dot		; ( addr-t u-t para1 )
.9cc1	a9 09		lda #$09			lda #AscHT
.9cc3	20 75 cd	jsr $cd75			jsr Emit_A
.9cc6					_cmd_p_common_no_num:
.9cc6	20 f6 9d	jsr $9df6			jsr ed_num_to_addr	  ; ( addr-t u-t addr )
.9cc9	4c 1a 9e	jmp $9e1a			jmp ed_print_addr
.9ccc					ed_cmd_q:
.9ccc	24 22		bit $22				bit ed_flags		; bit 6 is change flag
.9cce	50 03		bvc $9cd3			bvc +
.9cd0	4c 84 9d	jmp $9d84			jmp ed_error_2drop
.9cd3					+
.9cd3	4c d6 9a	jmp $9ad6			jmp ed_all_done		   ; can't fall thru because of PLX
.9cd6					ed_cmd_qq:
.9cd6	4c d6 9a	jmp $9ad6			jmp ed_all_done
.9cd9					ed_cmd_w:
.9cd9	20 a5 9d	jsr $9da5			jsr ed_have_text
.9cdc	24 22		bit $22				bit ed_flags		; parameter given?
.9cde	30 12		bmi $9cf2			bmi _cmd_w_have_para
.9ce0	b5 2b		lda $2b,x			lda DStack+7,x		; $0000 thru $00ff ?
.9ce2	d0 03		bne $9ce7			bne +
.9ce4	4c 84 9d	jmp $9d84			jmp ed_error_2drop
.9ce7					+
.9ce7	b5 2a		lda $2a,x			lda DStack+6,x
.9ce9	95 26		sta $26,x			sta DStack+2,x
.9ceb	b5 2b		lda $2b,x			lda DStack+7,x
.9ced	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t addr-t ? )
.9cef	4c fa 9c	jmp $9cfa			jmp _cmd_w_para_ready
.9cf2					_cmd_w_have_para:
.9cf2	b5 26		lda $26,x			lda DStack+2,x
.9cf4	95 2a		sta $2a,x			sta DStack+6,x
.9cf6	b5 27		lda $27,x			lda DStack+3,x
.9cf8	95 2b		sta $2b,x			sta DStack+7,x		; drop through to _cmd_w_para_ready
.9cfa					_cmd_w_para_ready:
.9cfa	a9 1e		lda #$1e			lda #<ed_head
.9cfc	95 24		sta $24,x			sta DStack+0,x
.9cfe	a9 00		lda #$00			lda #>ed_head
.9d00	95 25		sta $25,x			sta DStack+1,x		; ( addr-t u-t addr-t addr-h )
.9d02	20 de ce	jsr $cede			jsr Over		; ( addr-t u-t addr-t addr-h addr-t )
.9d05	20 8c ce	jsr $ce8c			jsr To_R		; ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.9d08					_cmd_w_loop:
.9d08	20 71 ce	jsr $ce71			jsr Fetch		; ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.9d0b	b5 24		lda $24,x			lda DStack+0,x
.9d0d	15 25		ora $25,x			ora DStack+1,x
.9d0f	f0 4d		beq $9d5e			beq _cmd_w_eol
.9d11	20 61 cc	jsr $cc61			jsr Two_dup		; ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.9d14	20 d4 c5	jsr $c5d4			jsr Two_to_r		; ( addr-t addr-1 ) (R: ... )
.9d17	20 aa c9	jsr $c9aa			jsr Cell_Plus_NoUf	; ( addr-t addr1+2 ) (R: ... )
.9d1a	20 07 cf	jsr $cf07			jsr Dup			; ( addr-t addr1+2 addr1+2 ) ( R: ... )
.9d1d	20 71 ce	jsr $ce71			jsr Fetch		; ( addr-t addr1+2 addr-s ) ( R: ... )
.9d20	20 25 cf	jsr $cf25			jsr Swap		; ( addr-t addr-s addr1+2 ) ( R: ... )
.9d23	20 aa c9	jsr $c9aa			jsr Cell_Plus_NoUf	; ( addr-t addr-s addr1+2 ) (R: ... )
.9d26	20 71 ce	jsr $ce71			jsr Fetch		; ( addr-t addr-s u-s ) ( R: ... )
.9d29	20 31 ce	jsr $ce31			jsr Not_Rot		; ( u-s addr-t addr-s ) ( R: ... )
.9d2c	20 25 cf	jsr $cf25			jsr Swap		; ( u-s addr-s addr-t ) ( R: ... )
.9d2f	20 0b ce	jsr $ce0b			jsr Rot			; (addr-s addr-t u-s ) ( R: ... )
.9d32	20 07 cf	jsr $cf07			jsr Dup			; (addr-s addr-t u-s u-s ) ( R: ... )
.9d35	20 8c ce	jsr $ce8c			jsr To_R		; (addr-s addr-t u-s ) ( R: ... u-s )
.9d38	20 04 ad	jsr $ad04			jsr Move		; ( )( R: addr-t addr-1 addr-t )
.9d3b	20 ab ce	jsr $ceab			jsr R_From		; ( u-s )  ( R: addr-t addr-h addr-t )
.9d3e	20 af c5	jsr $c5af			jsr Two_r_from		; ( u-s addr-t addr-h ) ( R: addr-t )
.9d41	20 31 ce	jsr $ce31			jsr Not_Rot		; ( addr-h u-s addr-t ) ( R: addr-t )
.9d44	20 51 cb	jsr $cb51			jsr Plus		; ( addr-h addr-t1 ) ( R: addr-t )
.9d47	20 07 cf	jsr $cf07			jsr Dup			; ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.9d4a	a9 0a		lda #$0a			lda #AscLF
.9d4c	20 a6 b7	jsr $b7a6			jsr PushZA		; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.9d4f	20 25 cf	jsr $cf25			jsr Swap		; ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.9d52	20 54 ce	jsr $ce54			jsr Store		; ( addr-h addr-t1 ) ( R: addr-t )
.9d55	20 fd c9	jsr $c9fd			jsr One_plus		; ( addr-h addr-t1+1 ) ( R: addr-t )
.9d58	20 25 cf	jsr $cf25			jsr Swap		; ( addr-t1+1 addr-h ) ( R: addr-t )
.9d5b	4c 08 9d	jmp $9d08			jmp _cmd_w_loop
.9d5e					_cmd_w_eol:
.9d5e	20 25 cf	jsr $cf25			jsr Swap		; ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.9d61	20 ab ce	jsr $ceab			jsr R_From		; ( addr-t u-t addr-n addr-tn addr-t )
.9d64	20 6a cb	jsr $cb6a			jsr Minus		; ( addr-t u-t addr-n u )
.9d67	b5 24		lda $24,x			lda DStack+0,x
.9d69	95 28		sta $28,x			sta DStack+4,x
.9d6b	b5 25		lda $25,x			lda DStack+1,x
.9d6d	95 29		sta $29,x			sta DStack+5,x		; ( addr-t u addr-n u )
.9d6f	20 e2 aa	jsr $aae2			jsr CR
.9d72	20 07 cf	jsr $cf07			jsr Dup			; ( addr-t u addr-n u u )
.9d75	20 b6 cb	jsr $cbb6			jsr U_Dot		; ( addr-t u addr-n u )
.9d78	20 e2 aa	jsr $aae2			jsr CR
.9d7b	a9 bf		lda #$bf			lda #$ff-%01000000
.9d7d	25 22		and $22				and ed_flags
.9d7f	85 22		sta $22				sta ed_flags
.9d81	4c d0 9a	jmp $9ad0			jmp ed_next_command
.9d84					ed_error_2drop:
.9d84	e8		inx				inx			; Drop para2
.9d85	e8		inx				inx
.9d86					ed_error_1drop:
.9d86	e8		inx				inx			; Drop para1
.9d87	e8		inx				inx
.9d88					ed_error:
.9d88	20 e2 aa	jsr $aae2			jsr CR
.9d8b	a9 3f		lda #$3f			lda #'?'
.9d8d	20 75 cd	jsr $cd75			jsr Emit_A
.9d90	20 e2 aa	jsr $aae2			jsr CR
.9d93	4c ee 98	jmp $98ee			jmp ed_input_loop
.9d96					ed_get_input:
.9d96	20 37 c2	jsr $c237			jsr Refill		;  ( addr-t u-t f )
.9d99	b5 24		lda $24,x			lda DStack+0,x
.9d9b	d0 05		bne $9da2			bne +
.9d9d	68		pla				pla
.9d9e	68		pla				pla
.9d9f	4c 86 9d	jmp $9d86			jmp ed_error_1drop
.9da2					+
.9da2	e8		inx				inx
.9da3	e8		inx				inx
.9da4	60		rts				rts
.9da5					ed_have_text:
.9da5	a5 1e		lda $1e				lda ed_head
.9da7	05 1f		ora $1f				ora ed_head+1
.9da9	d0 05		bne $9db0			bne +
.9dab	68		pla				pla
.9dac	68		pla				pla
.9dad	4c 88 9d	jmp $9d88			jmp ed_error
.9db0					+
.9db0	60		rts				rts
.9db1					ed_is_valid_line:
.9db1	38		sec				sec				; default is legal line number
.9db2	b5 24		lda $24,x			lda DStack+0,x
.9db4	15 25		ora $25,x			ora DStack+1,x
.9db6	f0 18		beq $9dd0			beq _nope_zero	; ( n )
.9db8	20 07 cf	jsr $cf07			jsr Dup				; ( n n )
.9dbb	20 d2 9d	jsr $9dd2			jsr ed_last_line		; ( n n last )
.9dbe	20 25 cf	jsr $cf25			jsr Swap			; ( n last n )
.9dc1	20 f4 c7	jsr $c7f4			jsr Less_Than			; ( n f )
.9dc4	b5 24		lda $24,x			lda DStack+0,x			; 0 flag is good
.9dc6	15 25		ora $25,x			ora DStack+1,x
.9dc8	d0 04		bne $9dce			bne _too_small
.9dca	e8		inx				inx
.9dcb	e8		inx				inx			; DROP flag ( n )
.9dcc	38		sec				sec			; signal valid
.9dcd	60		rts				rts
.9dce					_too_small:
.9dce	e8		inx				inx
.9dcf	e8		inx				inx
.9dd0					_nope_zero:
.9dd0	18		clc				clc			; signal not valid
.9dd1	60		rts				rts
.9dd2					ed_last_line:
.9dd2	20 b5 b7	jsr $b7b5			jsr Zero		; Set counter to zero
.9dd5	a9 1e		lda #$1e			lda #ed_head
.9dd7	20 a6 b7	jsr $b7a6			jsr PushZA		; ( count addr )
.9dda					_loop:
.9dda	20 71 ce	jsr $ce71			jsr Fetch		; ( count addr|0 )
.9ddd	b5 25		lda $25,x			lda DStack+1,x		; at end-of-list?
.9ddf	f0 06		beq $9de7			beq _done
.9de1	20 07 ca	jsr $ca07			jsr NOS_One_Plus	; Increase counter
.9de4	4c da 9d	jmp $9dda			jmp _loop		; continue
.9de7					_done:
.9de7	60		rts				rts
.9de8					ed_no_line_zero:
.9de8	b5 26		lda $26,x			lda DStack+2,x
.9dea	15 27		ora $27,x			ora DStack+3,x
.9dec	d0 07		bne $9df5			bne _done
.9dee	24 22		bit $22				bit ed_flags
.9df0	10 03		bpl $9df5			bpl _done
.9df2	4c 84 9d	jmp $9d84			jmp ed_error_2drop
.9df5					_done:
.9df5	60		rts				rts
.9df6					ed_num_to_addr:
.9df6	a9 1e		lda #$1e			lda #ed_head
.9df8	20 a6 b7	jsr $b7a6			jsr PushZA		; ( u addr-h )
.9dfb	4c 08 9e	jmp $9e08			jmp _test
.9dfe					_loop:
.9dfe	20 71 ce	jsr $ce71			jsr Fetch		; @ ( u addr1 )
.9e01	b5 25		lda $25,x			lda DStack+1,x		; at end of list?
.9e03	f0 09		beq $9e0e			beq _finished
.9e05	20 e3 c9	jsr $c9e3			jsr NOS_One_Minus	; decrement the line count
.9e08	b5 26		lda $26,x	_test:		lda DStack+2,x		; is the nth element we're looking for?
.9e0a	15 27		ora $27,x			ora DStack+3,x
.9e0c	d0 f0		bne $9dfe			bne _loop
.9e0e					_finished:
.9e0e	4c 22 c9	jmp $c922			jmp Nip			; ( addr )
.9e11					ed_para1_to_cur:
.9e11	b5 26		lda $26,x			lda DStack+2,x
.9e13	85 20		sta $20				sta ed_cur
.9e15	b5 27		lda $27,x			lda DStack+3,x
.9e17	85 21		sta $21				sta ed_cur+1
.9e19	60		rts				rts
.9e1a					ed_print_addr:
.9e1a	20 a7 c9	jsr $c9a7			jsr Cell_Plus		; ( addr+2 )
.9e1d	20 07 cf	jsr $cf07			jsr Dup			; ( addr+2 addr+2 )
.9e20	20 a7 c9	jsr $c9a7			jsr Cell_Plus		; ( addr+2 addr+4 )
.9e23	20 71 ce	jsr $ce71			jsr Fetch		; ( addr+2 u-s )
.9e26	20 25 cf	jsr $cf25			jsr Swap		; ( u-s addr+2 )
.9e29	20 71 ce	jsr $ce71			jsr Fetch		; ( u-s addr-s )
.9e2c	20 25 cf	jsr $cf25			jsr Swap		; ( addr-s u-s )
.9e2f	20 8f cd	jsr $cd8f			jsr Type
.9e32	4c e2 aa	jmp $aae2			jmp CR
>9e35	61 66 69 64 70 6e 3d 77		ed_cmd_list:	.text "afidpn=wqQ", 0
>9e3d	71 51 00
.9e40					ed_cmd_table:
>9e40	e5 9a 13 9c 46 9c 7c 9b				.word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>9e48	6f 9c 66 9c
>9e4c	db 9b d9 9c cc 9c d6 9c				.word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.9e54					ed6502_end:
>9e54	53 65 65			L1:	.text "See"	;  name of word as a string, ending at wh_NameLastChar
>9e57	a3					.byte (("See"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9e58	49 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9e5a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9e5b	08					.byte NN	;wh_Flags	dictionary flags
=40407					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9e5c					See:
.9e5c	20 22 bc	jsr $bc22			jsr Tick_Nt		; ( nt )
.9e5f	20 e2 aa	jsr $aae2			jsr CR
.9e62	ad 00 03	lda $0300			lda base		; Save the current number base
.9e65	48		pha				pha
.9e66	a9 aa		lda #$aa			lda #<str_see_nt	; print nt
.9e68	a0 da		ldy #$da			ldy #>str_see_nt
.9e6a	20 b0 cd	jsr $cdb0			jsr Print_ASCIIZ_YA_no_lf
.9e6d	20 07 cf	jsr $cf07			jsr Dup			; ( nt nt )
.9e70	20 77 a8	jsr $a877			jsr Dot_Hex
.9e73	20 82 cd	jsr $cd82			jsr Space		; ( nt )
.9e76	20 07 cf	jsr $cf07			jsr Dup			; ( nt nt )
.9e79	20 9c bd	jsr $bd9c			jsr Name_To_Int		; ( nt xt )
.9e7c	a9 b0		lda #$b0			lda #<str_see_xt	; print xt
.9e7e	a0 da		ldy #$da			ldy #>str_see_xt
.9e80	20 b0 cd	jsr $cdb0			jsr Print_ASCIIZ_YA_no_lf
.9e83	20 07 cf	jsr $cf07			jsr Dup			; ( nt xt xt )
.9e86	20 77 a8	jsr $a877			jsr Dot_Hex
.9e89	20 e2 aa	jsr $aae2			jsr CR			; ( nt xt )
.9e8c	a9 a3		lda #$a3			lda #<str_see_flags
.9e8e	a0 da		ldy #$da			ldy #>str_see_flags
.9e90	20 b0 cd	jsr $cdb0			jsr Print_ASCIIZ_YA_no_lf
.9e93	20 de ce	jsr $cede			jsr Over		; ( nt xt nt )
.9e96	a9 84		lda #$84			lda #Wh_Flags
.9e98	20 ac c9	jsr $c9ac			jsr Plus_A		; ( nt xt ^flags )
.9e9b	a1 24		lda ($24,x)			lda (DStack+0,x)	; ( nt xt ^flags )
.9e9d	95 24		sta $24,x			sta DStack+0,x		; ( nt xt flags )
.9e9f	a0 0e		ldy #$0e			ldy #2*7		; for bit 7..0
.9ea1	20 82 cd	jsr $cd82	_flag_loop:	jsr Space
.9ea4	b9 08 9f	lda $9f08,y			lda _FlagLabels+0,y	;   print label
.9ea7	20 75 cd	jsr $cd75			jsr Emit_A
.9eaa	b9 09 9f	lda $9f09,y			lda _FlagLabels+1,y
.9ead	20 75 cd	jsr $cd75			jsr Emit_A
.9eb0	a9 3d		lda #$3d			lda #'='
.9eb2	20 75 cd	jsr $cd75			jsr Emit_A
.9eb5	16 24		asl $24,x			asl DStack+0,x		;   c = flag, rotate the rest
.9eb7	a9 00		lda #$00			lda #0
.9eb9	69 30		adc #$30			adc #'0'
.9ebb	20 75 cd	jsr $cd75			jsr Emit_A
.9ebe	88		dey				dey
.9ebf	88		dey				dey
.9ec0	10 df		bpl $9ea1			bpl _flag_loop
.9ec2	e8		inx				inx
.9ec3	e8		inx				inx			; ( nt xt )
.9ec4	20 e2 aa	jsr $aae2			jsr CR
.9ec7	a9 b6		lda #$b6			lda #<str_see_size	; print size
.9ec9	a0 da		ldy #$da			ldy #>str_see_size
.9ecb	20 b0 cd	jsr $cdb0			jsr Print_ASCIIZ_YA_no_lf
.9ece	20 25 cf	jsr $cf25			jsr Swap		; ( xt nt )
.9ed1	20 96 aa	jsr $aa96			jsr WordSize		; ( xt u )
.9ed4	20 63 b1	jsr $b163			jsr Decimal
.9ed7	b5 24		lda $24,x			lda DStack+0,x		; if = 255
.9ed9	c9 ff		cmp #$ff			cmp #$ff
.9edb	d0 11		bne $9eee			bne _size5
.9edd	20 85 b8	jsr $b885			jsr sliteral_runtime	;   type "large"
.9ee0	4c e8 9e	jmp $9ee8			  jmp _size2
>9ee3	6c 61 72 67 65					  .text "large"
.9ee8	20 8f cd	jsr $cd8f	_size2:		jsr Type
.9eeb	4c f4 9e	jmp $9ef4			jmp _size9		;  else
.9eee	20 07 cf	jsr $cf07	_size5:		jsr Dup			;    type size
.9ef1	20 b6 cb	jsr $cbb6			jsr U_Dot
.9ef4					_size9:
.9ef4	20 e2 aa	jsr $aae2			jsr CR
.9ef7	68		pla				pla			; restore base
.9ef8	8d 00 03	sta $0300			sta base
.9efb	20 61 cc	jsr $cc61			jsr Two_dup
.9efe	20 cf a7	jsr $a7cf			jsr Dump		; dump
.9f01	20 e2 aa	jsr $aae2			jsr CR
.9f04	20 2d d8	jsr $d82d			jsr DisAsm		; disassemble
=171					CL	.var *-(WordListLink+wh_Xt)
=$9f07					en = *	; remember here
>9e5a	ab					.byte CL	;wh_CodeLength
.9f07	60		rts				rts
>9f08	43 4f 41 4e 49 4d 4e 4e		_FlagLabels:	.text "COANIMNNUF__R6__"
>9f10	55 46 5f 5f 52 36 5f 5f
>9f18	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9f20	72 64 4c 69 73 74
>9f26	8e					.byte (("Forth-WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f27	d7 9d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f29	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f2a	08					.byte NN	;wh_Flags	dictionary flags
=40614					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f2b	4c b5 b7	jmp $b7b5	Forth_WordList:	jmp Zero
=3					CL	.var *-(WordListLink+wh_Xt)
=$9f2e					en = *	; remember here
>9f29	03					.byte CL	;wh_CodeLength
>9f2e	45 64 69 74 6f 72 2d 57		L1:	.text "Editor-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9f36	6f 72 64 4c 69 73 74
>9f3d	8f					.byte (("Editor-WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f3e	a6 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f40	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f41	08					.byte NN	;wh_Flags	dictionary flags
=40637					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f42					Editor_WordList:
.9f42	4c bf b7	jmp $b7bf			jmp One
=3					CL	.var *-(WordListLink+wh_Xt)
=$9f45					en = *	; remember here
>9f40	03					.byte CL	;wh_CodeLength
>9f45	41 73 73 65 6d 62 6c 65		L1:	.text "Assembler-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9f4d	72 2d 57 6f 72 64 4c 69 73 74
>9f57	92					.byte (("Assembler-WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f58	bd 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f5a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f5b	08					.byte NN	;wh_Flags	dictionary flags
=40663					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f5c					Assembler_WordList:
.9f5c	4c c9 b7	jmp $b7c9			jmp Two
=3					CL	.var *-(WordListLink+wh_Xt)
=$9f5f					en = *	; remember here
>9f5a	03					.byte CL	;wh_CodeLength
>9f5f	52 6f 6f 74 2d 57 6f 72		L1:	.text "Root-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>9f67	64 6c 69 73 74
>9f6c	8d					.byte (("Root-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f6d	d7 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f6f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f70	08					.byte NN	;wh_Flags	dictionary flags
=40684					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f71	a9 03		lda #$03	Root_WordList:	lda #wid_Root
.9f73	4c a6 b7	jmp $b7a6			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$9f76					en = *	; remember here
>9f6f	05					.byte CL	;wh_CodeLength
>9f76	4f 6e 6c 79			L1:	.text "Only"	;  name of word as a string, ending at wh_NameLastChar
>9f7a	24					.byte (("Only"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f7b	ec 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f7d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f7e	08					.byte NN	;wh_Flags	dictionary flags
=40698					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f7f	20 84 b7	jsr $b784	Only:		jsr True	; Push -1
.9f82	4c e8 a0	jmp $a0e8			jmp Set_Order	; set the minimum search order.
=6					CL	.var *-(WordListLink+wh_Xt)
=$9f85					en = *	; remember here
>9f7d	06					.byte CL	;wh_CodeLength
>9f85	41 6c 73 6f			L1:	.text "Also"	;  name of word as a string, ending at wh_NameLastChar
>9f89	e4					.byte (("Also"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f8a	fa 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f8c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f8d	08					.byte NN	;wh_Flags	dictionary flags
=40713					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f8e	20 20 a1	jsr $a120	Also:		jsr Get_Order
.9f91	20 de ce	jsr $cede			jsr Over
.9f94	20 25 cf	jsr $cf25			jsr Swap
.9f97	20 fd c9	jsr $c9fd			jsr One_plus
.9f9a	4c e8 a0	jmp $a0e8			jmp Set_Order
=15					CL	.var *-(WordListLink+wh_Xt)
=$9f9d					en = *	; remember here
>9f8c	0f					.byte CL	;wh_CodeLength
>9f9d	50 72 65 76 69 6f 75 73		L1:	.text "Previous"	;  name of word as a string, ending at wh_NameLastChar
>9fa5	68					.byte (("Previous"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9fa6	09 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fa8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fa9	08					.byte NN	;wh_Flags	dictionary flags
=40741					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9faa	20 20 a1	jsr $a120	Previous:	jsr Get_Order
.9fad	20 22 c9	jsr $c922			jsr Nip
.9fb0	20 d7 c9	jsr $c9d7			jsr One_minus
.9fb3	4c e8 a0	jmp $a0e8			jmp Set_Order
=12					CL	.var *-(WordListLink+wh_Xt)
=$9fb6					en = *	; remember here
>9fa8	0c					.byte CL	;wh_CodeLength
>9fb6	3e 4f 72 64 65 72		L1:	.text ">Order"	;  name of word as a string, ending at wh_NameLastChar
>9fbc	46					.byte ((">Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9fbd	25 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fbf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fc0	08					.byte NN	;wh_Flags	dictionary flags
=40764					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9fc1					To_Order:
.9fc1	20 8c ce	jsr $ce8c			jsr To_R		; Put the wid on the return stack for now.
.9fc4	20 20 a1	jsr $a120			jsr Get_Order		; Get the current search order.
.9fc7	20 ab ce	jsr $ceab			jsr R_From		; Get back the wid and add it to the list.
.9fca	20 25 cf	jsr $cf25			jsr Swap
.9fcd	20 fd c9	jsr $c9fd			jsr One_plus
.9fd0	4c e8 a0	jmp $a0e8			jmp Set_Order		; Set the search order with the new list.
=18					CL	.var *-(WordListLink+wh_Xt)
=$9fd3					en = *	; remember here
>9fbf	12					.byte CL	;wh_CodeLength
>9fd3	4f 72 64 65 72			L1:	.text "Order"	;  name of word as a string, ending at wh_NameLastChar
>9fd8	45					.byte (("Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9fd9	3c 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fdb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fdc	08					.byte NN	;wh_Flags	dictionary flags
=40792					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9fdd					Order:
.9fdd	20 e2 aa	jsr $aae2			jsr CR
.9fe0	a0 00		ldy #$00			ldy #0			; for each search_orderV[]
.9fe2	f0 0b		beq $9fef			beq _test
.9fe4	98		tya		_loop:		tya
.9fe5	48		pha				pha
.9fe6	b9 2b 03	lda $032b,y			lda Search_orderV,y
.9fe9	20 fa 9f	jsr $9ffa			jsr order_print_wid_string   ; internal helper function
.9fec	68		pla				pla
.9fed	a8		tay				tay
.9fee	c8		iny				iny			;  next
.9fef	cc 2a 03	cpy $032a	_test:		cpy Num_orderV
.9ff2	90 f0		bcc $9fe4			bcc _loop
.9ff4	20 e2 aa	jsr $aae2			jsr CR
.9ff7	ad 10 03	lda $0310			lda CurrentV		; print the current wordlist.
.9ffa					order_print_wid_string:
.9ffa	c9 04		cmp #$04			cmp #wid_Root+1		; do we have a string?
.9ffc	90 06		bcc $a004			bcc _string
.9ffe	20 a6 b7	jsr $b7a6			jsr PushZA		; print the WID number
.a001	4c b6 cb	jmp $cbb6			jmp U_Dot		; JSR/RTS
.a004	0a		asl a		_string:	asl		; Get the string based on WID 0 to 3
.a005	a8		tay				tay
.a006	b9 12 a0	lda $a012,y			lda _wid_Table+0,y
.a009	48		pha				pha
.a00a	b9 13 a0	lda $a013,y			lda _wid_Table+1,y
.a00d	a8		tay				tay
.a00e	68		pla				pla
.a00f	4c b0 cd	jmp $cdb0			jmp Print_ASCIIZ_YA_no_lf ; Print without a line feed
=53					CL	.var *-(WordListLink+wh_Xt)
=$a012					en = *	; remember here
>9fdb	35					.byte CL	;wh_CodeLength
.a012					_wid_Table:
>a012	96 da					.word str_wid_forth	       ; WID 0: "Forth"
>a014	8e da					.word str_wid_editor	       ; WID 1: "Editor"
>a016	83 da					.word str_wid_asm	       ; WID 2: "Assembler"
>a018	9d da					.word str_wid_root	       ; WID 3: "Root"
>a01a	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
>a01f	05					.byte (("Forth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a020	58 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a022	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a023	08					.byte NN	;wh_Flags	dictionary flags
=40863					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a024	a9 00		lda #$00	Forth:		lda #wid_Forth
.a026	8d 2b 03	sta $032b			sta Search_OrderV+0
=5					CL	.var *-(WordListLink+wh_Xt)
=$a029					en = *	; remember here
>a022	05					.byte CL	;wh_CodeLength
.a029	60		rts				rts
>a02a	44 65 66 69 6e 69 74 69		L1:	.text "Definitions"	;  name of word as a string, ending at wh_NameLastChar
>a032	6f 6e 73
>a035	6b					.byte (("Definitions"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a036	9f 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a038	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a039	08					.byte NN	;wh_Flags	dictionary flags
=40885					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a03a	ad 2b 03	lda $032b	Definitions:	lda Search_OrderV	; Transfer SEARCH_ORDER[0] to
.a03d	8d 10 03	sta $0310			sta CurrentV		;   byte variable CURRENT.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a040					en = *	; remember here
>a038	06					.byte CL	;wh_CodeLength
.a040	60		rts				rts
>a041	57 6f 72 64 4c 69 73 74		L1:	.text "WordList"	;  name of word as a string, ending at wh_NameLastChar
>a049	88					.byte (("WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a04a	b5 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a04c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a04d	08					.byte NN	;wh_Flags	dictionary flags
=40905					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a04e					WordList:
.a04e	ad 11 03	lda $0311			lda Num_wordlistsV	; Get the current number of wordlists
.a051	c9 0c		cmp #$0c			cmp #max_wordlists	; already at the max?
.a053	90 05		bcc $a05a			bcc +
.a055	a9 66		lda #$66			lda #$100+err_TooManyWordlists	;   Print an error message
.a057	4c 33 b4	jmp $b433			jmp ThrowA
.a05a					+
.a05a	ee 11 03	inc $0311			inc Num_WordlistsV	; increment wordlist count
.a05d	4c a6 b7	jmp $b7a6			jmp PushZA		; and put it on the stack.
=18					CL	.var *-(WordListLink+wh_Xt)
=$a060					en = *	; remember here
>a04c	12					.byte CL	;wh_CodeLength
>a060	53 65 61 72 63 68 2d 57		L1:	.text "Search-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a068	6f 72 64 6c 69 73 74
>a06f	8f					.byte (("Search-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a070	c9 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a072	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a073	18					.byte UF+NN	;wh_Flags	dictionary flags
=40943					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a074					Search_WordList:
.a074	20 ee b3	jsr $b3ee			jsr underflow_3
.a077	b5 24		lda $24,x			lda DStack+0,x		; Pop wid
.a079	e8		inx				inx
.a07a	e8		inx				inx
.a07b	48		pha				pha
.a07c	20 cb bc	jsr $bccb			jsr fina_pattern_prepare ; tmp2 = pseudo-header for pattern name, zeros NOS
.a07f	68		pla				pla			; pop wid
.a080	20 f5 bc	jsr $bcf5			jsr fina_search_wordlist ; tmp1 = nt of matching word
.a083	f0 25		beq $a0aa			beq _fail
.a085	18		clc				clc
.a086	a5 14		lda $14				lda tmp1+0		; NOS = xt
.a088	69 85		adc #$85			adc #Wh_xt
.a08a	95 26		sta $26,x			sta DStack+2,x
.a08c	a5 15		lda $15				lda tmp1+1
.a08e	69 00		adc #$00			adc #0
.a090	95 27		sta $27,x			sta DStack+3,x
.a092	a0 84		ldy #$84			ldy #Wh_Flags		; get flags
.a094	b1 14		lda ($14),y			lda (tmp1),y
.a096	29 04		and #$04			and #IM
.a098	d0 07		bne $a0a1			bne _immediate		; bit set, we're immediate
.a09a	a9 ff		lda #$ff			lda #$FF		; We're not immediate, return -1
.a09c	95 24		sta $24,x			sta DStack+0,x
.a09e	95 25		sta $25,x			sta DStack+1,x
.a0a0	60		rts				rts
.a0a1					_immediate:
.a0a1	a9 01		lda #$01			lda #1			; We're immediate, return 1
.a0a3	95 24		sta $24,x			sta DStack+0,x
.a0a5	a9 00		lda #$00			lda #0
.a0a7	95 25		sta $25,x			sta DStack+1,x
.a0a9	60		rts				rts
.a0aa					_fail:
.a0aa	e8		inx				inx			; Drop u
.a0ab	e8		inx				inx
.a0ac	60		rts				rts
=57					CL	.var *-(WordListLink+wh_Xt)
=$a0ad					en = *	; remember here
>a072	39					.byte CL	;wh_CodeLength
>a0ad	53 65 74 2d 43 75 72 72		L1:	.text "Set-Current"	;  name of word as a string, ending at wh_NameLastChar
>a0b5	65 6e 74
>a0b8	8b					.byte (("Set-Current"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0b9	ef 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0bc	00					.byte 0	;wh_Flags	dictionary flags
=41016					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0bd	20 8e b3	jsr $b38e	Set_Current:	jsr PopA	; pop wid
.a0c0	8d 10 03	sta $0310			sta CurrentV	; only the LSB is used.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a0c3					en = *	; remember here
>a0bb	06					.byte CL	;wh_CodeLength
.a0c3	60		rts				rts
>a0c4	47 65 74 2d 43 75 72 72		L1:	.text "Get-Current"	;  name of word as a string, ending at wh_NameLastChar
>a0cc	65 6e 74
>a0cf	8b					.byte (("Get-Current"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0d0	38 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0d3	08					.byte NN	;wh_Flags	dictionary flags
=41039					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0d4					Get_Current:
.a0d4	ad 10 03	lda $0310			lda CurrentV
.a0d7	4c a6 b7	jmp $b7a6			jmp PushZA	; CURRENT is a byte variable
=6					CL	.var *-(WordListLink+wh_Xt)
=$a0da					en = *	; remember here
>a0d2	06					.byte CL	;wh_CodeLength
>a0da	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>a0e2	72
>a0e3	49					.byte (("Set-Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0e4	4f a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0e6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0e7	00					.byte 0	;wh_Flags	dictionary flags
=41059					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0e8					Set_Order:
.a0e8	b5 25		lda $25,x			lda DStack+1,x		; Test for -1 TOS
.a0ea	10 0b		bpl $a0f7			bpl _start
.a0ec	a9 00		lda #$00			lda #0
.a0ee	95 25		sta $25,x			sta DStack+1,x
.a0f0	a9 03		lda #$03			lda #wid_Root
.a0f2	95 24		sta $24,x			sta DStack+0,x
.a0f4	20 bf b7	jsr $b7bf			jsr One			; Count is 1.
.a0f7					_start:
.a0f7	b5 24		lda $24,x			lda DStack+0,x
.a0f9	99 2a 03	sta $032a,y			sta Num_orderV,y	; #ORDER is a byte variable.
.a0fc	85 14		sta $14				sta tmp1	; Save a copy for zero check and looping.
.a0fe	e8		inx				inx		; Drop the count off the data stack.
.a0ff	e8		inx				inx
.a100	a5 14		lda $14				lda tmp1
.a102	f0 0d		beq $a111			beq _done	; If zero, there are no wordlists.
.a104	a0 00		ldy #$00			ldy #0
.a106					_loop:
.a106	20 8e b3	jsr $b38e			jsr PopA		; The search order is a byte array
.a109	99 2b 03	sta $032b,y			sta Search_OrderV,y	; so only save the LSB
.a10c	c8		iny				iny
.a10d	c6 14		dec $14				dec tmp1
.a10f	d0 f5		bne $a106			bne _loop
.a111					_done:
=41					CL	.var *-(WordListLink+wh_Xt)
=$a111					en = *	; remember here
>a0e6	29					.byte CL	;wh_CodeLength
.a111	60		rts				rts
>a112	47 65 74 2d 4f 72 64 65		L1:	.text "Get-Order"	;  name of word as a string, ending at wh_NameLastChar
>a11a	72
>a11b	49					.byte (("Get-Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a11c	63 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a11e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a11f	08					.byte NN	;wh_Flags	dictionary flags
=41115					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a120					Get_Order:
.a120	ac 2a 03	ldy $032a			ldy Num_OrderV	; Get #ORDER - the number of wordlists in the search order.
.a123	f0 09		beq $a12e			beq _done	; If zero, there are no wordlists.
.a125					_loop:
.a125	b9 2a 03	lda $032a,y			lda Search_OrderV-1,y	; Put that wordlist id on the stack.
.a128	20 a6 b7	jsr $b7a6			jsr PushZA
.a12b	88		dey				dey
.a12c	d0 f7		bne $a125			bne _loop		; See if that was the last one to process (first in the list).
.a12e					_done:
.a12e	ad 2a 03	lda $032a			lda Num_OrderV		; Put the number of items on the stack.
.a131	4c a6 b7	jmp $b7a6			jmp PushZA
=20					CL	.var *-(WordListLink+wh_Xt)
=$a134					en = *	; remember here
>a11e	14					.byte CL	;wh_CodeLength
>0339					BlockReadV: .word ?	; Vector to block reading routine
>033b					BlockWriteV: .word ?	; Vector to block writing routine
>033d					BuffBlockNumV: .word ?	; Block number current in BlockBuffer
>033f					BuffStatusV: .word ?	; Status of BlockBuffer (bit 0 = used, bit 1 = dirty)
>0341					BlockBuffer: .fill 1024
.a134					BlockInit:
.a134	a9 00		lda #$00			lda #0
.a136	8d 3f 03	sta $033f			sta BuffStatusV
.a139	a9 30		lda #$30			lda #<Platform_Block_Read
.a13b	a0 f1		ldy #$f1			ldy #>Platform_Block_Read
.a13d	8d 39 03	sta $0339			sta BlockReadV+0
.a140	8c 3a 03	sty $033a			sty BlockReadV+1
.a143	a9 30		lda #$30			lda #<Platform_Block_Write
.a145	a0 f1		ldy #$f1			ldy #>Platform_Block_Write
.a147	8d 3b 03	sta $033b			sta BlockWriteV+0
.a14a	8c 3c 03	sty $033c			sty BlockWriteV+1
.a14d	60		rts				rts
>0741					RamDriveV: .word ?
=0					io_blk_status = 0
=0					io_blk_action = 0
=0					io_blk_number = 0
=0					io_blk_buffer = 0
>a14e	42 6c 6f 63 6b 2d 52 61		L1:	.text "Block-RamDrive-Init"	;  name of word as a string, ending at wh_NameLastChar
>a156	6d 44 72 69 76 65 2d 49 6e 69 74
>a161	93					.byte (("Block-RamDrive-Init"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a162	9b a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a164	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a165	18					.byte UF+NN	;wh_Flags	dictionary flags
=41185					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a166					Block_RamDrive_Init:
.a166	a9 0a		lda #$0a			lda #10			; Calculate how many bytes are needed for numblocks blocks
.a168	20 a6 b7	jsr $b7a6			jsr PushZA
.a16b	20 ed ca	jsr $caed			jsr LShift
.a16e	20 c9 c9	jsr $c9c9			jsr Here		; ( size addr )
.a171	8d 41 07	sta $0741			sta RamDriveV+0
.a174	8c 42 07	sty $0742			sty RamDriveV+1
.a177	20 de ce	jsr $cede			jsr Over
.a17a	20 88 c0	jsr $c088			jsr Allot		; Create ramdrive buffer
.a17d	20 25 cf	jsr $cf25			jsr Swap		; blank the buffer
.a180	20 fe bd	jsr $bdfe			jsr Blank
.a183	a9 98		lda #$98			lda #<_read		; set block read vector
.a185	a0 a1		ldy #$a1			ldy #>_read
.a187	8d 39 03	sta $0339			sta BlockReadV+0
.a18a	8c 3a 03	sty $033a			sty BlockReadV+1
.a18d	a9 a8		lda #$a8			lda #<_write		; set block write vector
.a18f	a0 a1		ldy #$a1			ldy #>_write
.a191	8d 3b 03	sta $033b			sta BlockWriteV+0
.a194	8c 3c 03	sty $033c			sty BlockWriteV+1
.a197	60		rts				rts
=50					CL	.var *-(WordListLink+wh_Xt)
=$a198					en = *	; remember here
>a164	32					.byte CL	;wh_CodeLength
.a198					_read:
.a198	20 b5 a1	jsr $a1b5			jsr _addr
.a19b	20 25 cf	jsr $cf25			jsr Swap
.a19e	a9 00		lda #$00			lda #0
.a1a0	a0 04		ldy #$04			ldy #>1024
.a1a2	20 64 b7	jsr $b764			jsr PushYA
.a1a5	4c 04 ad	jmp $ad04			jmp Move
.a1a8					_write:
.a1a8	20 b5 a1	jsr $a1b5			jsr _addr
.a1ab	a9 00		lda #$00			lda #0
.a1ad	a0 04		ldy #$04			ldy #>1024
.a1af	20 64 b7	jsr $b764			jsr PushYA
.a1b2	4c 04 ad	jmp $ad04			jmp Move
.a1b5					_addr:
.a1b5	a9 0a		lda #$0a			lda #10
.a1b7	20 a6 b7	jsr $b7a6			jsr PushZA
.a1ba	20 ed ca	jsr $caed			jsr LShift
.a1bd	20 d0 a1	jsr $a1d0			jsr RamDrive
.a1c0	4c 51 cb	jmp $cb51			jmp Plus
>a1c3	52 61 6d 44 72 69 76 65		L1:	.text "RamDrive"	;  name of word as a string, ending at wh_NameLastChar
>a1cb	a8					.byte (("RamDrive"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a1cc	e1 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1cf	08					.byte NN	;wh_Flags	dictionary flags
=41291					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1d0	ad 41 07	lda $0741	RamDrive:	lda RamDriveV+0
.a1d3	ac 42 07	ldy $0742			ldy RamDriveV+1
.a1d6	4c 64 b7	jmp $b764			jmp PushYA
=9					CL	.var *-(WordListLink+wh_Xt)
=$a1d9					en = *	; remember here
>a1ce	09					.byte CL	;wh_CodeLength
>a1d9	42 75 66 66 53 74 61 74		L1:	.text "BuffStatus"	;  name of word as a string, ending at wh_NameLastChar
>a1e1	75 73
>a1e3	6a					.byte (("BuffStatus"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a1e4	4b a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1e6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1e7	08					.byte NN	;wh_Flags	dictionary flags
=41315					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1e8	a0 03		ldy #$03	BuffStatus:	ldy #>BuffStatusV
.a1ea	a9 3f		lda #$3f			lda #<BuffStatusV
.a1ec	4c 64 b7	jmp $b764			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a1ef					en = *	; remember here
>a1e6	07					.byte CL	;wh_CodeLength
>a1ef	42 75 66 66 42 6c 6f 63		L1:	.text "BuffBlockNum"	;  name of word as a string, ending at wh_NameLastChar
>a1f7	6b 4e 75 6d
>a1fb	ac					.byte (("BuffBlockNum"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a1fc	63 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1ff	08					.byte NN	;wh_Flags	dictionary flags
=41339					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a200	a0 03		ldy #$03	BuffBlockNum:	ldy #>BuffBlockNumV
.a202	a9 3d		lda #$3d			lda #<BuffBlockNumV
.a204	4c 64 b7	jmp $b764			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a207					en = *	; remember here
>a1fe	07					.byte CL	;wh_CodeLength
>a207	42 6c 6b 42 75 66 66 65		L1:	.text "BlkBuffer"	;  name of word as a string, ending at wh_NameLastChar
>a20f	72
>a210	49					.byte (("BlkBuffer"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a211	7b a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a213	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a214	08					.byte NN	;wh_Flags	dictionary flags
=41360					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a215	a0 03		ldy #$03	BlkBuffer:	ldy #>BlockBuffer
.a217	a9 41		lda #$41			lda #<BlockBuffer
.a219	4c 64 b7	jmp $b764			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a21c					en = *	; remember here
>a213	07					.byte CL	;wh_CodeLength
>a21c	53 63 72			L1:	.text "Scr"	;  name of word as a string, ending at wh_NameLastChar
>a21f	43					.byte (("Scr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a220	90 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a222	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a223	08					.byte NN	;wh_Flags	dictionary flags
=41375					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a224	a0 03		ldy #$03	Scr:		ldy #>ScrV
.a226	a9 0e		lda #$0e			lda #<ScrV
.a228	4c 64 b7	jmp $b764			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a22b					en = *	; remember here
>a222	07					.byte CL	;wh_CodeLength
>a22b	42 6c 6b			L1:	.text "Blk"	;  name of word as a string, ending at wh_NameLastChar
>a22e	63					.byte (("Blk"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a22f	9f a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a231	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a232	08					.byte NN	;wh_Flags	dictionary flags
=41390					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a233	a0 03		ldy #$03	Blk:		ldy #>BlkV
.a235	a9 0c		lda #$0c			lda #<BlkV
.a237	4c 64 b7	jmp $b764			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a23a					en = *	; remember here
>a231	07					.byte CL	;wh_CodeLength
>a23a	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write"	;  name of word as a string, ending at wh_NameLastChar
>a242	69 74 65
>a245	ab					.byte (("Block-Write"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a246	ae a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a248	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a249	08					.byte NN	;wh_Flags	dictionary flags
=41413					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a24a	6c 3b 03	jmp ($033b)	Block_Write:	jmp (BlockWriteV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-(WordListLink+wh_Xt)
=$a24d					en = *	; remember here
>a248	03					.byte CL	;wh_CodeLength
>a24d	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a255	69 74 65 2d 56 65 63 74 6f 72
>a25f	52					.byte (("Block-Write-Vector"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a260	c5 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a262	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a263	08					.byte NN	;wh_Flags	dictionary flags
=41439					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a264					Block_Write_Vector:
.a264	a0 03		ldy #$03			ldy #>BlockWriteV
.a266	a9 3b		lda #$3b			lda #<BlockWriteV	; Get the BLOCK-WRITE-VECTOR address
.a268	4c 64 b7	jmp $b764			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a26b					en = *	; remember here
>a262	07					.byte CL	;wh_CodeLength
>a26b	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read"	;  name of word as a string, ending at wh_NameLastChar
>a273	61 64
>a275	8a					.byte (("Block-Read"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a276	df a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a278	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a279	08					.byte NN	;wh_Flags	dictionary flags
=41461					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a27a	6c 39 03	jmp ($0339)	Block_Read:	jmp (BlockReadV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-(WordListLink+wh_Xt)
=$a27d					en = *	; remember here
>a278	03					.byte CL	;wh_CodeLength
>a27d	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a285	61 64 2d 56 65 63 74 6f 72
>a28e	51					.byte (("Block-Read-Vector"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a28f	f5 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a291	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a292	08					.byte NN	;wh_Flags	dictionary flags
=41486					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a293					Block_Read_Vector:
.a293	a0 03		ldy #$03			ldy #>BlockReadV
.a295	a9 39		lda #$39			lda #<BlockReadV	; Get the BLOCK-READ-VECTOR address
.a297	4c 64 b7	jmp $b764			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a29a					en = *	; remember here
>a291	07					.byte CL	;wh_CodeLength
>a29a	53 61 76 65 2d 42 75 66		L1:	.text "Save-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a2a2	66 65 72 73
>a2a6	6c					.byte (("Save-Buffers"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a2a7	0e a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a2a9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a2aa	00					.byte 0	;wh_Flags	dictionary flags
=41510					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2ab					Save_Buffers:
.a2ab	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a2ae	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a2b0	d0 11		bne $a2c3			bne _done	; Either not used or not dirty = done!
.a2b2	20 15 a2	jsr $a215			jsr BlkBuffer
.a2b5	20 00 a2	jsr $a200			jsr BuffBlockNum
.a2b8	20 71 ce	jsr $ce71			jsr Fetch
.a2bb	20 4a a2	jsr $a24a			jsr Block_Write
.a2be	a9 01		lda #$01			lda #1
.a2c0	8d 3f 03	sta $033f			sta BuffStatusV+0
.a2c3					_done:
=24					CL	.var *-(WordListLink+wh_Xt)
=$a2c3					en = *	; remember here
>a2a9	18					.byte CL	;wh_CodeLength
.a2c3	60		rts				rts
>a2c4	42 6c 6f 63 6b			L1:	.text "Block"	;  name of word as a string, ending at wh_NameLastChar
>a2c9	65					.byte (("Block"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a2ca	26 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a2cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a2cd	00					.byte 0	;wh_Flags	dictionary flags
=41545					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2ce					Block:
.a2ce	ad 3d 03	lda $033d			lda BuffBlockNumV+0	; check the LSB
.a2d1	d5 24		cmp $24,x			cmp DStack+0,x
.a2d3	d0 0e		bne $a2e3			bne _not_in_buffer
.a2d5	ad 3e 03	lda $033e			lda BuffBlockNumV+1	; check the MSB
.a2d8	d5 25		cmp $25,x			cmp DStack+1,x
.a2da	d0 07		bne $a2e3			bne _not_in_buffer
.a2dc	ad 3f 03	lda $033f			lda BuffStatusV+0
.a2df	29 01		and #$01			and #1		; Check the in-use flag (bit 0)
.a2e1	d0 2d		bne $a310			bne _done	; It's already in the buffer and in use.
.a2e3					_not_in_buffer:
.a2e3	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a2e6	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a2e8	d0 0c		bne $a2f6			bne _buffer_available ; Unused or not dirty = available
.a2ea	20 15 a2	jsr $a215			jsr BlkBuffer
.a2ed	20 00 a2	jsr $a200			jsr BuffBlockNum
.a2f0	20 71 ce	jsr $ce71			jsr Fetch
.a2f3	20 4a a2	jsr $a24a			jsr Block_Write
.a2f6					_buffer_available:
.a2f6	b5 24		lda $24,x			lda DStack+0,x
.a2f8	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a2fb	b5 25		lda $25,x			lda DStack+1,x
.a2fd	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a300	20 15 a2	jsr $a215			jsr BlkBuffer
.a303	20 25 cf	jsr $cf25			jsr Swap
.a306	20 7a a2	jsr $a27a			jsr Block_Read
.a309	a9 01		lda #$01			lda #1
.a30b	8d 3f 03	sta $033f			sta BuffStatusV+0
.a30e	ca		dex				dex
.a30f	ca		dex				dex
.a310					_done:
.a310	a9 41		lda #$41			lda #<BlockBuffer
.a312	95 24		sta $24,x			sta DStack+0,x
.a314	a9 03		lda #$03			lda #>BlockBuffer
.a316	95 25		sta $25,x			sta DStack+1,x
=74					CL	.var *-(WordListLink+wh_Xt)
=$a318					en = *	; remember here
>a2cc	4a					.byte CL	;wh_CodeLength
.a318	60		rts				rts
>a319	55 70 64 61 74 65		L1:	.text "Update"	;  name of word as a string, ending at wh_NameLastChar
>a31f	a6					.byte (("Update"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a320	49 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a322	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a323	00					.byte 0	;wh_Flags	dictionary flags
=41631					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a324					Update:
.a324	ad 3f 03	lda $033f			lda BuffStatusV+0
.a327	09 02		ora #$02			ora #2		; Turn on dirty flag (bit 2)
.a329	8d 3f 03	sta $033f			sta BuffStatusV+0
=8					CL	.var *-(WordListLink+wh_Xt)
=$a32c					en = *	; remember here
>a322	08					.byte CL	;wh_CodeLength
.a32c	60		rts				rts
>a32d	42 75 66 66 65 72		L1:	.text "Buffer"	;  name of word as a string, ending at wh_NameLastChar
>a333	46					.byte (("Buffer"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a334	9f a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a336	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a337	08					.byte NN	;wh_Flags	dictionary flags
=41651					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a338					Buffer:
.a338	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a33b	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a33d	d0 0c		bne $a34b			bne _buffer_available ; Unused or not dirty = available
.a33f	20 15 a2	jsr $a215			jsr BlkBuffer
.a342	20 00 a2	jsr $a200			jsr BuffBlockNum
.a345	20 71 ce	jsr $ce71			jsr Fetch
.a348	20 4a a2	jsr $a24a			jsr Block_Write
.a34b					_buffer_available:
.a34b	b5 24		lda $24,x			lda DStack+0,x
.a34d	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a350	b5 25		lda $25,x			lda DStack+1,x
.a352	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a355	a9 01		lda #$01			lda #1
.a357	8d 3f 03	sta $033f			sta BuffStatusV+0
.a35a					_done:
.a35a	a9 41		lda #$41			lda #<BlockBuffer
.a35c	95 24		sta $24,x			sta DStack+0,x
.a35e	a9 03		lda #$03			lda #>BlockBuffer
.a360	95 25		sta $25,x			sta DStack+1,x
=42					CL	.var *-(WordListLink+wh_Xt)
=$a362					en = *	; remember here
>a336	2a					.byte CL	;wh_CodeLength
.a362	60		rts				rts
>a363	45 6d 70 74 79 2d 42 75		L1:	.text "Empty-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a36b	66 66 65 72 73
>a370	6d					.byte (("Empty-Buffers"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a371	b3 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a373	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a374	08					.byte NN	;wh_Flags	dictionary flags
=41712					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a375	a9 00		lda #$00	Empty_Buffers:	lda #0		; Set the buffer status to empty.
.a377	8d 3f 03	sta $033f			sta BuffStatusV+0 ; Only LSB is used.
=5					CL	.var *-(WordListLink+wh_Xt)
=$a37a					en = *	; remember here
>a373	05					.byte CL	;wh_CodeLength
.a37a	60		rts				rts
>a37b	46 6c 75 73 68			L1:	.text "Flush"	;  name of word as a string, ending at wh_NameLastChar
>a380	05					.byte (("Flush"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a381	f0 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a383	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a384	08					.byte NN	;wh_Flags	dictionary flags
=41728					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a385	20 ab a2	jsr $a2ab	Flush:		jsr Save_Buffers
.a388	4c 75 a3	jmp $a375			jmp Empty_Buffers
=6					CL	.var *-(WordListLink+wh_Xt)
=$a38b					en = *	; remember here
>a383	06					.byte CL	;wh_CodeLength
>a38b	4c 6f 61 64			L1:	.text "Load"	;  name of word as a string, ending at wh_NameLastChar
>a38f	84					.byte (("Load"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a390	00 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a392	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a393	10					.byte UF	;wh_Flags	dictionary flags
=41743					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a394					Load:
.a394	20 d4 b3	jsr $b3d4			jsr underflow_1
.a397	ad 0d 03	lda $030d			lda BlkV+1		; Save the current value of BLK on the return stack.
.a39a	48		pha				pha
.a39b	ad 0c 03	lda $030c			lda BlkV+0
.a39e	48		pha				pha
.a39f	b5 24		lda $24,x			lda DStack+0,x		; Set BLK to the given block/screen number.
.a3a1	8d 0c 03	sta $030c			sta BlkV+0
.a3a4	b5 25		lda $25,x			lda DStack+1,x
.a3a6	8d 0d 03	sta $030d			sta BlkV+1
.a3a9	20 ce a2	jsr $a2ce			jsr Block		; Load that block into a buffer
.a3ac	a9 00		lda #$00			lda #<1024		; block length.
.a3ae	a0 04		ldy #$04			ldy #>1024
.a3b0	20 64 b7	jsr $b764			jsr PushYA
.a3b3	38		sec				sec		; Set a flag to not zero BLK
.a3b4	20 9a af	jsr $af9a			jsr load_evaluate
.a3b7	68		pla				pla
.a3b8	8d 0c 03	sta $030c			sta BlkV+0
.a3bb	68		pla				pla
.a3bc	8d 0d 03	sta $030d			sta BlkV+1
.a3bf	0d 0c 03	ora $030c			ora BlkV+0
.a3c2	f0 13		beq $a3d7			beq _done
.a3c4	ad 0c 03	lda $030c			lda BlkV+0
.a3c7	ac 0d 03	ldy $030d			ldy BlkV+1
.a3ca	20 64 b7	jsr $b764			jsr PushYA
.a3cd	20 ce a2	jsr $a2ce			jsr Block
.a3d0	20 aa b3	jsr $b3aa			jsr PopYA	; Pop the buffer address.
.a3d3	85 04		sta $04				sta cib+0
.a3d5	84 05		sty $05				sty cib+1
.a3d7					_done:
=67					CL	.var *-(WordListLink+wh_Xt)
=$a3d7					en = *	; remember here
>a392	43					.byte CL	;wh_CodeLength
.a3d7	60		rts				rts
>a3d8	54 68 72 75			L1:	.text "Thru"	;  name of word as a string, ending at wh_NameLastChar
>a3dc	a4					.byte (("Thru"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a3dd	0f a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3df	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3e0	18					.byte UF+NN	;wh_Flags	dictionary flags
=41820					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3e1					Thru:
.a3e1	20 e9 b3	jsr $b3e9			jsr underflow_2
.a3e4	20 8c ce	jsr $ce8c			jsr To_R
.a3e7					_loop:
.a3e7	b5 25		lda $25,x			lda DStack+1,x		; copy to return stack
.a3e9	48		pha				pha
.a3ea	b5 24		lda $24,x			lda DStack+0,x
.a3ec	48		pha				pha
.a3ed	20 94 a3	jsr $a394			jsr Load		; Load this screen.
.a3f0	20 ab ce	jsr $ceab			jsr R_From		; Get the screen # we just loaded.
.a3f3	20 fd c9	jsr $c9fd			jsr One_plus		; increment
.a3f6	86 14		stx $14				stx tmp1
.a3f8	ba		tsx				tsx
.a3f9	8a		txa				txa
.a3fa	a8		tay				tay
.a3fb	a6 14		ldx $14				ldx tmp1
.a3fd	b9 01 01	lda $0101,y			lda RStack+1,y
.a400	d5 24		cmp $24,x			cmp DStack+0,x
.a402	b9 02 01	lda $0102,y			lda RStack+2,y
.a405	f5 25		sbc $25,x			sbc DStack+1,x
.a407	b0 de		bcs $a3e7			bcs _loop
.a409	e8		inx				inx			; Drop index
.a40a	e8		inx				inx
.a40b	68		pla				pla			; RDrop limit
.a40c	68		pla				pla
=44					CL	.var *-(WordListLink+wh_Xt)
=$a40d					en = *	; remember here
>a3df	2c					.byte CL	;wh_CodeLength
.a40d	60		rts				rts
>a40e	4c 69 73 74			L1:	.text "List"	;  name of word as a string, ending at wh_NameLastChar
>a412	84					.byte (("List"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a413	5c a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a415	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a416	08					.byte NN	;wh_Flags	dictionary flags
=41874					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a417	20 aa b3	jsr $b3aa	List:		jsr PopYA	; Save the screen number
.a41a	8d 0e 03	sta $030e			sta ScrV+0
.a41d	8c 0f 03	sty $030f			sty ScrV+1
.a420					ListScr:
.a420	20 24 a2	jsr $a224			jsr Scr
.a423	20 71 ce	jsr $ce71			jsr Fetch
.a426	20 ce a2	jsr $a2ce			jsr Block	; Get the current screen contents.
.a429	20 e2 aa	jsr $aae2			jsr CR
.a42c	20 85 b8	jsr $b885			jsr SLiteral_Runtime
.a42f	4c 3a a4	jmp $a43a			  jmp +				; for SLiteral_Runtime
>a432	53 63 72 65 65 6e 20 23				  .text "Screen #"		; for SLiteral_Runtime
.a43a					+
.a43a	20 8f cd	jsr $cd8f			jsr Type
.a43d	20 24 a2	jsr $a224			jsr Scr		; print screen number
.a440	20 71 ce	jsr $ce71			jsr Fetch
.a443	a9 04		lda #$04			lda #4		;    in 4 positions
.a445	20 ea cb	jsr $cbea			jsr U_Dot_R_A
.a448	a9 00		lda #$00			lda #0			; line #
.a44a					_line_loop:
.a44a	48		pha				pha
.a44b	20 e2 aa	jsr $aae2			jsr CR
.a44e	68		pla				pla		; Print the line number
.a44f	48		pha				pha
.a450	20 a6 b7	jsr $b7a6			jsr PushZA
.a453	a9 02		lda #$02			lda #2		;   in 2 positions
.a455	20 ea cb	jsr $cbea			jsr U_Dot_R_A
.a458	20 82 cd	jsr $cd82			jsr Space
.a45b	20 07 cf	jsr $cf07			jsr Dup		; Print one line using the address on the stack.
.a45e	a9 40		lda #$40			lda #64
.a460	20 a6 b7	jsr $b7a6			jsr PushZA
.a463	20 8f cd	jsr $cd8f			jsr Type
.a466	a9 40		lda #$40			lda #64		; move address to the next line.
.a468	20 ac c9	jsr $c9ac			jsr Plus_A
.a46b	68		pla				pla		; Increment the line number
.a46c	18		clc				clc
.a46d	69 01		adc #$01			adc #1
.a46f	c9 10		cmp #$10			cmp #16		; See if we are done.
.a471	d0 d7		bne $a44a			bne _line_loop
.a473	e8		inx				inx		; Drop the address
.a474	e8		inx				inx
.a475	4c e2 aa	jmp $aae2			jmp CR
=97					CL	.var *-(WordListLink+wh_Xt)
=$a478					en = *	; remember here
>a415	61					.byte CL	;wh_CodeLength
>a478	44 65 66 65 72			L1:	.text "Defer"	;  name of word as a string, ending at wh_NameLastChar
>a47d	45					.byte (("Defer"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a47e	92 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a480	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a481	08					.byte NN	;wh_Flags	dictionary flags
=41981					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a482					Defer:
.a482	20 e2 c0	jsr $c0e2			jsr Header_Comma	; compile word header
.a485	a9 8f		lda #$8f			lda #<_undefined	; compile "jmp _undefined"
.a487	a0 a4		ldy #$a4			ldy #>_undefined
.a489	20 fc cc	jsr $ccfc			jsr Jmp_Comma_YA
.a48c	4c b9 bb	jmp $bbb9			jmp adjust_z	; adjust header to correct length
=13					CL	.var *-(WordListLink+wh_Xt)
=$a48f					en = *	; remember here
>a480	0d					.byte CL	;wh_CodeLength
.a48f					_undefined:
.a48f	a9 6a		lda #$6a			lda #$100+err_Defer	; throw exception
.a491	4c 33 b4	jmp $b433			jmp ThrowA
>a494	44 65 66 65 72 40		L1:	.text "Defer@"	;  name of word as a string, ending at wh_NameLastChar
>a49a	06					.byte (("Defer@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a49b	fd a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a49d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a49e	08					.byte NN	;wh_Flags	dictionary flags
=42010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a49f					Defer_Fetch:
.a49f	20 fd c9	jsr $c9fd			jsr One_plus	; step over JMP opcode to operand
.a4a2	4c 71 ce	jmp $ce71			jmp Fetch	; get JMP operand, return
=6					CL	.var *-(WordListLink+wh_Xt)
=$a4a5					en = *	; remember here
>a49d	06					.byte CL	;wh_CodeLength
>a4a5	44 65 66 65 72 21		L1:	.text "Defer!"	;  name of word as a string, ending at wh_NameLastChar
>a4ab	26					.byte (("Defer!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4ac	1a a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4ae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4af	08					.byte NN	;wh_Flags	dictionary flags
=42027					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4b0					Defer_Store:
.a4b0	20 fd c9	jsr $c9fd			jsr One_plus	; step over JMP opcode to operand
.a4b3	4c 54 ce	jmp $ce54			jmp Store	; set JMP operand, return
=6					CL	.var *-(WordListLink+wh_Xt)
=$a4b6					en = *	; remember here
>a4ae	06					.byte CL	;wh_CodeLength
>a4b6	49 73				L1:	.text "Is"	;  name of word as a string, ending at wh_NameLastChar
>a4b8	62					.byte (("Is"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4b9	2b a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4bc	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42040					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4bd					Is:
.a4bd	a5 0a		lda $0a				lda state		; Check STATE
.a4bf	f0 0a		beq $a4cb			beq _interpreting
.a4c1					_compiling:
.a4c1	20 30 bc	jsr $bc30			jsr Bracket_Tick	; compile the xt of the next word as a literal.
.a4c4	a0 a4		ldy #$a4			ldy #>Defer_Store	; Postpone DEFER! by compiling a JSR to it.
.a4c6	a9 b0		lda #$b0			lda #<Defer_Store
.a4c8	4c e5 cc	jmp $cce5			jmp Jsr_Comma_YA
.a4cb					_interpreting:
.a4cb	20 1c bc	jsr $bc1c			jsr Tick
.a4ce	4c b0 a4	jmp $a4b0			jmp Defer_Store
=20					CL	.var *-(WordListLink+wh_Xt)
=$a4d1					en = *	; remember here
>a4bb	14					.byte CL	;wh_CodeLength
>a4d1	41 63 74 69 6f 6e 2d 4f		L1:	.text "Action-Of"	;  name of word as a string, ending at wh_NameLastChar
>a4d9	66
>a4da	c9					.byte (("Action-Of"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4db	38 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4de	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42074					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4df					Action_Of:
.a4df	a5 0a		lda $0a				lda state		; Check STATE
.a4e1	f0 0a		beq $a4ed			beq _interpreting
.a4e3					_compiling:
.a4e3	20 30 bc	jsr $bc30			jsr Bracket_Tick	; compile the xt of the next word as a literal.
.a4e6	a0 a4		ldy #$a4			ldy #>Defer_Fetch	; Postpone DEFER@ by compiling a JSR to it.
.a4e8	a9 9f		lda #$9f			lda #<Defer_Fetch
.a4ea	4c e5 cc	jmp $cce5			jmp Jsr_Comma_YA
.a4ed					_interpreting:
.a4ed	20 1c bc	jsr $bc1c			jsr Tick
.a4f0	4c 9f a4	jmp $a49f			jmp Defer_Fetch
=20					CL	.var *-(WordListLink+wh_Xt)
=$a4f3					en = *	; remember here
>a4dd	14					.byte CL	;wh_CodeLength
>a4f3	55 73 65 72 41 64 64 72		L1:	.text "UserAddr"	;  name of word as a string, ending at wh_NameLastChar
>a4fb	48					.byte (("UserAddr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4fc	5a a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4ff	08					.byte NN	;wh_Flags	dictionary flags
=42107					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a500	a0 02		ldy #$02	UserAddr:	ldy #>User0
.a502	a9 ff		lda #$ff			lda #<User0
.a504	4c 64 b7	jmp $b764			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a507					en = *	; remember here
>a4fe	07					.byte CL	;wh_CodeLength
>a507	42 75 66 66 65 72 3a		L1:	.text "Buffer:"	;  name of word as a string, ending at wh_NameLastChar
>a50e	47					.byte (("Buffer:"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a50f	7b a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a511	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a512	08					.byte NN	;wh_Flags	dictionary flags
=42126					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a513	20 7f c1	jsr $c17f	Buffer_Colon:	jsr Create
.a516	4c 88 c0	jmp $c088			jmp Allot
=6					CL	.var *-(WordListLink+wh_Xt)
=$a519					en = *	; remember here
>a511	06					.byte CL	;wh_CodeLength
>a519	43 61 73 65			L1:	.text "Case"	;  name of word as a string, ending at wh_NameLastChar
>a51d	a4					.byte (("Case"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a51e	8e a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a520	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a521	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42141					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a522					Case:
.a522	4c b5 b7	jmp $b7b5			jmp Zero	; init jmp fixup chain
=3					CL	.var *-(WordListLink+wh_Xt)
=$a525					en = *	; remember here
>a520	03					.byte CL	;wh_CodeLength
>a525	45 6e 64 43 61 73 65		L1:	.text "EndCase"	;  name of word as a string, ending at wh_NameLastChar
>a52c	a7					.byte (("EndCase"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a52d	9d a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a52f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a530	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42156					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a531					EndCase:
.a531	20 d4 cc	jsr $ccd4			jsr Drop_Comma
.a534					_loop:
.a534	b5 25		lda $25,x			lda DStack+1,x	; while addr fixup entries left
.a536	f0 06		beq $a53e			beq _done
.a538	20 bb a5	jsr $a5bb			jsr Then	;   fixup another one
.a53b	4c 34 a5	jmp $a534			jmp _loop
.a53e					_done:
.a53e	e8		inx				inx		; Drop the 0
.a53f	e8		inx				inx
=15					CL	.var *-(WordListLink+wh_Xt)
=$a540					en = *	; remember here
>a52f	0f					.byte CL	;wh_CodeLength
.a540	60		rts				rts
>a541	4f 66				L1:	.text "Of"	;  name of word as a string, ending at wh_NameLastChar
>a543	c2					.byte (("Of"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a544	ac a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a546	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a547	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42179					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a548					Of:
.a548	a0 a5		ldy #$a5			ldy #>_runtime		; Check if value is equal to this case.
.a54a	a9 5d		lda #$5d			lda #<_runtime
.a54c	20 e5 cc	jsr $cce5			jsr Jsr_Comma_YA
.a54f	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a551	20 a6 cc	jsr $cca6			jsr C_Comma_A
.a554	20 c9 c9	jsr $c9c9			jsr Here		; Put the origination address on the stack for else/then
.a557	20 b5 b7	jsr $b7b5			jsr Zero
.a55a	4c bd cc	jmp $ccbd			jmp Comma
=21					CL	.var *-(WordListLink+wh_Xt)
=$a55d					en = *	; remember here
>a546	15					.byte CL	;wh_CodeLength
.a55d					_runtime:
.a55d	b5 24		lda $24,x			lda DStack+0,x	; compare x1 with x2
.a55f	d5 26		cmp $26,x			cmp DStack+2,x
.a561	d0 0a		bne $a56d			bne _NotEq
.a563	b5 25		lda $25,x			lda DStack+1,x
.a565	d5 27		cmp $27,x			cmp DStack+3,x
.a567	d0 04		bne $a56d			bne _NotEq
.a569	e8		inx				inx		; Drop x2
.a56a	e8		inx				inx
.a56b	d0 35		bne $a5a2			bne zbranch_run2 ; Drop x1 & return to after the jmp abs
.a56d	e8		inx		_NotEq:		inx		; Drop x2
.a56e	e8		inx				inx
.a56f	60		rts				rts		; return to the jmp abs to next test
>a570	45 6e 64 4f 66			L1:	.text "EndOf"	;  name of word as a string, ending at wh_NameLastChar
>a575	c5					.byte (("EndOf"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a576	c3 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a578	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a579	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42229					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a57a					EndOf:
.a57a	4c cd a5	jmp $a5cd			jmp Else
=3					CL	.var *-(WordListLink+wh_Xt)
=$a57d					en = *	; remember here
>a578	03					.byte CL	;wh_CodeLength
>a57d	49 66				L1:	.text "If"	;  name of word as a string, ending at wh_NameLastChar
>a57f	c2					.byte (("If"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a580	f5 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a582	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a583	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42239					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a584					If:
.a584	20 95 a5	jsr $a595	If3:		jsr zbranch_jsr_comma	; Compile a 0BRANCH
.a587					zbranch_jmp0_comma:
.a587	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a589	20 a6 cc	jsr $cca6			jsr C_Comma_A
.a58c	20 c9 c9	jsr $c9c9			jsr Here		; save ptr to address for else/then
.a58f	a9 00		lda #$00			lda #0			; Stuff zero in for the branch address right now.
.a591	a8		tay				tay			; THEN or ELSE will fix it later.
.a592	4c c0 cc	jmp $ccc0			jmp Comma_YA
=17					CL	.var *-(WordListLink+wh_Xt)
=$a595					en = *	; remember here
>a582	11					.byte CL	;wh_CodeLength
=$ccf9					zbranch_jmp_comma = Jmp_Comma		; compile jmp abs
.a595					zbranch_jsr_comma:
.a595	a0 a5		ldy #$a5			ldy #>_runtime
.a597	a9 9c		lda #$9c			lda #<_runtime
.a599	4c e5 cc	jmp $cce5			jmp Jsr_Comma_YA
.a59c					_runtime:
.a59c	b5 24		lda $24,x			lda DStack+0,x		;flag is false?
.a59e	15 25		ora $25,x			ora DStack+1,x
.a5a0	f0 0d		beq $a5af			beq zbranch_run_done
.a5a2	18		clc		zbranch_run2:	clc			; move RTS addr over the next jmp abs.
.a5a3	68		pla				pla
.a5a4	69 03		adc #$03			adc #3
.a5a6	90 06		bcc $a5ae			bcc +
.a5a8	a8		tay				tay
.a5a9	68		pla				pla
.a5aa	69 00		adc #$00			adc #0
.a5ac	48		pha				pha
.a5ad	98		tya				tya
.a5ae	48		pha		+		pha
.a5af					zbranch_run_done:
.a5af	e8		inx				inx			; Drop f
.a5b0	e8		inx				inx
.a5b1	60		rts				rts
>a5b2	54 68 65 6e			L1:	.text "Then"	;  name of word as a string, ending at wh_NameLastChar
>a5b6	c4					.byte (("Then"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5b7	ff a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5b9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5ba	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42294					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5bb					Then:
.a5bb	20 c9 c9	jsr $c9c9			jsr Here
.a5be	20 25 cf	jsr $cf25			jsr Swap
.a5c1	4c 54 ce	jmp $ce54			jmp Store
=9					CL	.var *-(WordListLink+wh_Xt)
=$a5c4					en = *	; remember here
>a5b9	09					.byte CL	;wh_CodeLength
>a5c4	45 6c 73 65			L1:	.text "Else"	;  name of word as a string, ending at wh_NameLastChar
>a5c8	a4					.byte (("Else"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5c9	36 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5cb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5cc	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42312					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5cd					Else:
.a5cd	20 87 a5	jsr $a587			jsr zbranch_jmp0_comma	; compile jmp 0, push addr of addr
.a5d0	20 c9 c9	jsr $c9c9			jsr Here
.a5d3	20 0b ce	jsr $ce0b			jsr Rot
.a5d6	4c 54 ce	jmp $ce54			jmp Store
=12					CL	.var *-(WordListLink+wh_Xt)
=$a5d9					en = *	; remember here
>a5cb	0c					.byte CL	;wh_CodeLength
>a5d9	42 65 67 69 6e			L1:	.text "Begin"	;  name of word as a string, ending at wh_NameLastChar
>a5de	c5					.byte (("Begin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5df	48 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5e2	0d					.byte NN+CO+IM	;wh_Flags	dictionary flags
=42334					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5e3	20 c9 c9	jsr $c9c9	Begin:		jsr Here	; remember the loop starting location
.a5e6	a9 e3		lda #$e3			lda #<Begin	; pairing marker
.a5e8	4c a6 b7	jmp $b7a6			jmp PushZA
=8					CL	.var *-(WordListLink+wh_Xt)
=$a5eb					en = *	; remember here
>a5e1	08					.byte CL	;wh_CodeLength
>a5eb	41 67 61 69 6e			L1:	.text "Again"	;  name of word as a string, ending at wh_NameLastChar
>a5f0	c5					.byte (("Again"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5f1	5e a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5f4	1d					.byte NN+CO+IM+UF	;wh_Flags	dictionary flags
=42352					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5f5	20 e9 b3	jsr $b3e9	Again:		jsr underflow_2
.a5f8	a9 e3		lda #$e3			lda #<Begin	; check pairing
.a5fa	20 9a b2	jsr $b29a			jsr QPairCtlA
.a5fd	4c f9 cc	jmp $ccf9			jmp Jmp_Comma	; Compile a jmp abs.
=11					CL	.var *-(WordListLink+wh_Xt)
=$a600					en = *	; remember here
>a5f3	0b					.byte CL	;wh_CodeLength
>a600	55 6e 74 69 6c			L1:	.text "Until"	;  name of word as a string, ending at wh_NameLastChar
>a605	85					.byte (("Until"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a606	70 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a608	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a609	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42373					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a60a	a9 e3		lda #$e3	Until:		lda #<Begin		; check pairing
.a60c	20 9a b2	jsr $b29a			jsr QPairCtlA
.a60f	4c 48 a6	jmp $a648			jmp ZBranch_Comma	; The address to loop back to is on the stack.
=8					CL	.var *-(WordListLink+wh_Xt)
=$a612					en = *	; remember here
>a608	08					.byte CL	;wh_CodeLength
>a612	57 68 69 6c 65			L1:	.text "While"	;  name of word as a string, ending at wh_NameLastChar
>a617	a5					.byte (("While"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a618	85 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a61a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a61b	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42391					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a61c	a9 e3		lda #$e3	While:		lda #<Begin	; check pairing
.a61e	20 9a b2	jsr $b29a			jsr QPairCtlA
.a621	20 84 a5	jsr $a584			jsr If3		; Compile a 0branch & jmp, push addr of addr
.a624	20 25 cf	jsr $cf25			jsr Swap	; Swap the two addresses on the stack.
.a627	a9 e3		lda #$e3			lda #<Begin	; pairing marker
.a629	4c a6 b7	jmp $b7a6			jmp PushZA
=16					CL	.var *-(WordListLink+wh_Xt)
=$a62c					en = *	; remember here
>a61a	10					.byte CL	;wh_CodeLength
>a62c	52 65 70 65 61 74		L1:	.text "Repeat"	;  name of word as a string, ending at wh_NameLastChar
>a632	86					.byte (("Repeat"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a633	97 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a635	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a636	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42418					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a637	a9 e3		lda #$e3	Repeat:		lda #<Begin	; check pairing
.a639	20 9a b2	jsr $b29a			jsr QPairCtlA
.a63c	20 f9 cc	jsr $ccf9			jsr Jmp_Comma	; compile the jmp back
.a63f	20 c9 c9	jsr $c9c9			jsr Here	; patch the WHILE jmp operand
.a642	20 25 cf	jsr $cf25			jsr Swap
.a645	4c 54 ce	jmp $ce54			jmp Store
=17					CL	.var *-(WordListLink+wh_Xt)
=$a648					en = *	; remember here
>a635	11					.byte CL	;wh_CodeLength
.a648					ZBranch_Comma:
.a648	a9 e8		lda #$e8			lda #$e8		; compile inx; inx
.a64a	a8		tay				tay
.a64b	20 c0 cc	jsr $ccc0			jsr Comma_YA
.a64e	a9 b5		lda #$b5			lda #$b5		; compile lda DStack-2,x
.a650	a0 22		ldy #$22			ldy #DStack-2
.a652	20 c0 cc	jsr $ccc0			jsr Comma_YA
.a655	a9 15		lda #$15			lda #$15		; compile ora DStack-1,x
.a657	a0 23		ldy #$23			ldy #DStack-1
.a659	20 c0 cc	jsr $ccc0			jsr Comma_YA
.a65c	a9 f0		lda #$f0			lda #$f0		; BEQ
.a65e	d0 0c		bne $a66c			bne Branch_Comma
>a660	42 72 61 6e 63 68 2c		L1:	.text "Branch,"	;  name of word as a string, ending at wh_NameLastChar
>a667	87					.byte (("Branch,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a668	b2 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a66a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a66b	08					.byte NN	;wh_Flags	dictionary flags
=42471					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a66c					Branch_Comma:
.a66c	48		pha				pha			; save branch opcode
.a66d	38		sec				sec			; AY= displacement+2
.a66e	b5 24		lda $24,x			lda DStack+0,x
.a670	e5 00		sbc $00				sbc cp+0
.a672	a8		tay				tay
.a673	b5 25		lda $25,x			lda DStack+1,x
.a675	e5 01		sbc $01				sbc cp+1
.a677	c9 ff		cmp #$ff			cmp #$ff		; offset maybe in range?
.a679	f0 0b		beq $a686			beq _rev
.a67b	68		pla		_2byte:		pla			; restore branch opcode
.a67c	49 20		eor #$20			eor #$20		; reverse branch sense
.a67e	a0 03		ldy #$03			ldy #3			; compile Bcc *+5
.a680	20 c0 cc	jsr $ccc0			jsr Comma_YA
.a683	4c f9 cc	jmp $ccf9			jmp Jmp_Comma		; compile JMP abs
.a686	c0 82		cpy #$82	_rev:		cpy #$80+2		; offset in range?
.a688	90 f1		bcc $a67b			bcc _2byte
.a68a	e8		inx		_1byte:		inx			; Drop address
.a68b	e8		inx				inx
.a68c	88		dey				dey			; fix displacement
.a68d	88		dey				dey
.a68e	68		pla				pla			; restore branch opcode
.a68f	4c c0 cc	jmp $ccc0			jmp Comma_YA		; compile Bcc
>a692	57 6f 72 64			L1:	.text "Word"	;  name of word as a string, ending at wh_NameLastChar
>a696	84					.byte (("Word"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a697	e7 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a699	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a69a	18					.byte UF+NN	;wh_Flags	dictionary flags
=42518					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a69b					Word:
.a69b	20 d4 b3	jsr $b3d4			jsr underflow_1
.a69e	a4 08		ldy $08				ldy toin+0		; >IN
.a6a0	c4 06		cpy $06		_DelimLoop:	cpy ciblen+0		; quit if end of input
.a6a2	f0 09		beq $a6ad			beq _found_char
.a6a4	b1 04		lda ($04),y			lda (cib),y
.a6a6	d5 24		cmp $24,x			cmp DStack+0,x		; ASCII of delimiter
.a6a8	d0 03		bne $a6ad			bne _found_char
.a6aa	c8		iny				iny
.a6ab	d0 f3		bne $a6a0			bne _DelimLoop
.a6ad					_found_char:
.a6ad	84 08		sty $08				sty toin+0		; Save index of where word starts
.a6af	20 9d ba	jsr $ba9d			jsr Parse		; The real work is done by parse
.a6b2	20 8e b3	jsr $b38e			jsr PopA		; pop u
.a6b5	85 16		sta $16				sta tmp2+0
.a6b7	20 b5 b3	jsr $b3b5			jsr PopTmp1		; pop addr
.a6ba	20 c9 c9	jsr $c9c9			jsr Here		; Return caddr
.a6bd	a5 16		lda $16				lda tmp2+0
.a6bf	a0 00		ldy #$00			ldy #0			; Save length of string
.a6c1	f0 03		beq $a6c6			beq _CopyStart
.a6c3	b1 14		lda ($14),y	_CopyLoop:	lda (tmp1),y
.a6c5	c8		iny				iny
.a6c6	20 a6 cc	jsr $cca6	_CopyStart:	jsr C_Comma_A
.a6c9	c4 16		cpy $16				cpy tmp2+0
.a6cb	90 f6		bcc $a6c3			bcc _CopyLoop
=50					CL	.var *-(WordListLink+wh_Xt)
=$a6cd					en = *	; remember here
>a699	32					.byte CL	;wh_CodeLength
.a6cd	60		rts				rts
>a6ce	28				L1:	.text "("	;  name of word as a string, ending at wh_NameLastChar
>a6cf	01					.byte (("("[-1]&7)<<5)+(*-L1)	;wh_HNL
>a6d0	16 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6d3	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42575					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6d4	a9 29		lda #$29	Paren:		lda #')'		; separator
.a6d6	20 a0 ba	jsr $baa0			jsr Parse_A		; Call parse.
.a6d9	4c c1 c4	jmp $c4c1			jmp Two_drop		; Throw away the result.
=8					CL	.var *-(WordListLink+wh_Xt)
=$a6dc					en = *	; remember here
>a6d2	08					.byte CL	;wh_CodeLength
>a6dc	2e 28				L1:	.text ".("	;  name of word as a string, ending at wh_NameLastChar
>a6de	02					.byte ((".("[-1]&7)<<5)+(*-L1)	;wh_HNL
>a6df	4f a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6e2	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42590					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6e3	a9 29		lda #$29	Dot_paren:	lda #')'
.a6e5	20 a0 ba	jsr $baa0			jsr Parse_A
.a6e8	4c 8f cd	jmp $cd8f			jmp Type
=8					CL	.var *-(WordListLink+wh_Xt)
=$a6eb					en = *	; remember here
>a6e1	08					.byte CL	;wh_CodeLength
>a6eb	48 61 73 68			L1:	.text "Hash"	;  name of word as a string, ending at wh_NameLastChar
>a6ef	04					.byte (("Hash"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a6f0	5e a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6f2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6f3	08					.byte NN	;wh_Flags	dictionary flags
=42607					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6f4	20 8e b3	jsr $b38e	Hash:		jsr PopA		; save length
.a6f7	85 16		sta $16				sta tmp2+0
.a6f9	b5 24		lda $24,x			lda DStack+0,x		; copy addr
.a6fb	b4 25		ldy $25,x			ldy DStack+1,x
.a6fd	85 14		sta $14				sta tmp1+0
.a6ff	84 15		sty $15				sty tmp1+1
.a701	a9 b3		lda #$b3			lda #$b3		; init hash
.a703	95 24		sta $24,x			sta DStack+0,x
.a705	95 25		sta $25,x			sta DStack+1,x
.a707	a0 00		ldy #$00			ldy #0			; for each char
.a709	f0 15		beq $a720			beq _next
.a70b	b1 14		lda ($14),y	_loop:		lda (tmp1),y		;   get char
.a70d	c9 61		cmp #$61			cmp #'a'		;   uppercase
.a70f	90 06		bcc $a717			bcc _3
.a711	c9 7b		cmp #$7b			cmp #'z'+1
.a713	b0 02		bcs $a717			bcs _3
.a715	29 df		and #$df			and #$df
.a717	16 24		asl $24,x	_3:		asl DStack+0,x		;   add to hash
.a719	36 25		rol $25,x			rol DStack+1,x
.a71b	75 24		adc $24,x			adc DStack+0,x
.a71d	95 24		sta $24,x			sta DStack+0,x
.a71f	c8		iny				iny
.a720	c4 16		cpy $16		_Next:		cpy tmp2+0
.a722	90 e7		bcc $a70b			bcc _loop
=48					CL	.var *-(WordListLink+wh_Xt)
=$a724					en = *	; remember here
>a6f2	30					.byte CL	;wh_CodeLength
.a724	60		rts				rts
>a725	45 6e 76 69 72 6f 6e 6d		L1:	.text "Environment?"	;  name of word as a string, ending at wh_NameLastChar
>a72d	65 6e 74 3f
>a731	ec					.byte (("Environment?"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a732	6f a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a734	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a735	08					.byte NN	;wh_Flags	dictionary flags
=42673					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a736					Environment_Q:
.a736	20 f4 a6	jsr $a6f4			jsr Hash		; ( hash )
.a739	a0 00		ldy #$00			ldy #0			; Y= table index
.a73b	f0 0a		beq $a747			beq _entry_test
.a73d	98		tya		_entry_next:	tya
.a73e	c0 30		cpy #$30			cpy #_table_dbl		; if double
.a740	90 02		bcc $a744			bcc +
.a742	69 01		adc #$01			adc #6-4-1		;   skip double
.a744	69 04		adc #$04	+		adc #4			;   skip single
.a746	a8		tay		_3:		tay
.a747	b9 7b a7	lda $a77b,y	_entry_test:	lda _Table+0,y		; match?
.a74a	f0 28		beq $a774			beq _notfound
.a74c	d5 24		cmp $24,x			cmp DStack+0,x
.a74e	d0 ed		bne $a73d			bne _entry_next
.a750	b9 7c a7	lda $a77c,y			lda _Table+1,y
.a753	d5 25		cmp $25,x			cmp DStack+1,x
.a755	d0 e6		bne $a73d			bne _entry_next
.a757	b9 7d a7	lda $a77d,y			lda _Table+2,y
.a75a	95 24		sta $24,x			sta DStack+0,x
.a75c	b9 7e a7	lda $a77e,y			lda _Table+3,y
.a75f	95 25		sta $25,x			sta DStack+1,x
.a761	c0 30		cpy #$30			cpy #_table_dbl		; single or double data?
.a763	90 0c		bcc $a771			bcc _single
.a765	ca		dex				dex			;  push 2nd cell
.a766	ca		dex				dex
.a767	b9 7f a7	lda $a77f,y			lda _Table+4,y
.a76a	95 24		sta $24,x			sta DStack+0,x
.a76c	b9 80 a7	lda $a780,y			lda _Table+5,y
.a76f	95 25		sta $25,x			sta DStack+1,x
.a771					_single:
.a771	4c 84 b7	jmp $b784			jmp True		; return True
.a774					_notfound:
.a774	a9 00		lda #$00			lda #0			; return 0
.a776	95 24		sta $24,x			sta DStack+0,x
.a778	95 25		sta $25,x			sta DStack+1,x
.a77a	60		rts				rts
=69					CL	.var *-(WordListLink+wh_Xt)
=$a77b					en = *	; remember here
>a734	45					.byte CL	;wh_CodeLength
.a77b					_Table:
>a77b	5e e6 ff 7f				.word $e65e,$7fff	; "/COUNTED-STRING"
>a77f	be 79 ff 00				.word $79BE,$ff		; "/HOLD"
>a783	b9 3c 54 00				.word $3cb9,padoffset	; "/PAD"
>a787	8b 81 08 00				.word $818b,8		; "ADDRESS-UNIT-BITS"
>a78b	57 fc 00 00				.word $fc57,0		; "FLOORED"	we have symmetric)
>a78f	4f fb ff 00				.word $fb4f,$ff		; "MAX-CHAR"
>a793	56 7f ff 7f				.word $7f56,$7fff	; "MAX-N"
>a797	5d 7f ff ff				.word $7f5d,$ffff	; "MAX-U"
>a79b	38 ce 80 00				.word $ce38,$80		; "RETURN-STACK-CELLS"
>a79f	f2 c0 14 00				.word $c0f2,DStack0/2	; "STACK-CELLS"
>a7a3	36 e3 09 00				.word $e336,9		; "WORDLISTS"
>a7a7	01 99 0a 00				.word $9901,FDim	; "FLOATING-STACK"	n	yes	   If n = zero, floating-point numbers are
=48					_table_dbl = *-_Table	; These return a double-cell number
>a7ab	4c 7f ff ff ff 7f			.word $7f4c,$ffff,$7fff	; "MAX-D"
>a7b1	fe fe ff ff ff ff			.word $fefe,$ffff,$ffff	; "MAX-UD"
>a7b7	00					.byte 0		; end of list
>a7b8	42 65 6c 6c			L1:	.text "Bell"	;  name of word as a string, ending at wh_NameLastChar
>a7bc	84					.byte (("Bell"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a7bd	b1 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a7bf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a7c0	08					.byte NN	;wh_Flags	dictionary flags
=42812					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a7c1	a9 07		lda #$07	Bell:		lda #7		; ASCII value for BELL
.a7c3	4c 75 cd	jmp $cd75			jmp Emit_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$a7c6					en = *	; remember here
>a7bf	05					.byte CL	;wh_CodeLength
>a7c6	44 75 6d 70			L1:	.text "Dump"	;  name of word as a string, ending at wh_NameLastChar
>a7ca	04					.byte (("Dump"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a7cb	3c a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a7cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a7ce	18					.byte UF+NN	;wh_Flags	dictionary flags
=42826					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a7cf					Dump:
.a7cf	20 e9 b3	jsr $b3e9			jsr underflow_2
.a7d2	ca		dex				dex			; alloc work area
.a7d3	ca		dex				dex
.a7d4					_row:
.a7d4	20 e2 aa	jsr $aae2			jsr CR
.a7d7	b5 29		lda $29,x			lda DStack+5,x		; print address number
.a7d9	20 58 a8	jsr $a858			jsr C_Dot_Hex_A
.a7dc	b5 28		lda $28,x			lda DStack+4,x
.a7de	20 58 a8	jsr $a858			jsr C_Dot_Hex_A
.a7e1	20 82 cd	jsr $cd82			jsr Space
.a7e4	20 82 cd	jsr $cd82			jsr Space
.a7e7	a9 00		lda #$00			lda #0
.a7e9	95 24		sta $24,x			sta DStack+0,x
.a7eb					_loop:
.a7eb	b5 26		lda $26,x			lda DStack+2,x
.a7ed	15 27		ora $27,x			ora DStack+3,x
.a7ef	f0 36		beq $a827			beq _all_printed
.a7f1	a1 28		lda ($28,x)			lda (DStack+4,x)
.a7f3	20 58 a8	jsr $a858			jsr C_Dot_Hex_A
.a7f6	20 82 cd	jsr $cd82			jsr Space
.a7f9	a1 28		lda ($28,x)			lda (DStack+4,x)
.a7fb	20 7f a8	jsr $a87f			jsr is_printable
.a7fe	b0 02		bcs $a802			bcs _printable
.a800	a9 2e		lda #$2e			lda #'.'		 ; Print dot if not printable
.a802					_printable:
.a802	b4 24		ldy $24,x			ldy DStack+0,x
.a804	91 00		sta ($00),y			sta (cp),y
.a806	c0 07		cpy #$07			cpy #7
.a808	d0 03		bne $a80d			bne +
.a80a	20 82 cd	jsr $cd82			jsr Space
.a80d					+
.a80d	f6 28		inc $28,x			inc DStack+4,x
.a80f	d0 02		bne $a813			bne +
.a811	f6 29		inc $29,x			inc DStack+5,x
.a813					+
.a813	20 e3 c9	jsr $c9e3			jsr NOS_One_Minus	; loop counter
.a816	f6 24		inc $24,x			inc DStack+0,x
.a818	b5 24		lda $24,x			lda DStack+0,x
.a81a	c9 10		cmp #$10			cmp #16
.a81c	90 cd		bcc $a7eb			bcc _loop		; next byte
.a81e	20 82 cd	jsr $cd82			jsr Space
.a821	20 36 a8	jsr $a836			jsr dump_print_ascii
.a824	4c d4 a7	jmp $a7d4			jmp _row		; new row
.a827					_all_printed:
.a827	b5 24		lda $24,x			lda DStack+0,x
.a829	f0 06		beq $a831			beq _done
.a82b	20 82 cd	jsr $cd82			jsr Space
.a82e	20 36 a8	jsr $a836			jsr dump_print_ascii
.a831					_done:
.a831	e8		inx				inx			; drop work area
.a832	e8		inx				inx
.a833	4c c1 c4	jmp $c4c1			jmp Two_drop		; one byte less than 4x INX
=103					CL	.var *-(WordListLink+wh_Xt)
=$a836					en = *	; remember here
>a7cd	67					.byte CL	;wh_CodeLength
.a836					dump_print_ascii:
.a836	a0 00		ldy #$00			ldy #0
.a838					_loop:
.a838	b1 00		lda ($00),y			lda (cp),y
.a83a	20 75 cd	jsr $cd75			jsr Emit_A
.a83d	c8		iny				iny
.a83e	c0 08		cpy #$08			cpy #8
.a840	d0 03		bne $a845			bne +
.a842	20 82 cd	jsr $cd82			jsr Space
.a845					+
.a845	98		tya				tya
.a846	d5 24		cmp $24,x			cmp DStack+0,x
.a848	90 ee		bcc $a838			bcc _loop
.a84a	60		rts				rts
>a84b	43 2e 48 65 78			L1:	.text "C.Hex"	;  name of word as a string, ending at wh_NameLastChar
>a850	05					.byte (("C.Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a851	4a a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a853	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a854	08					.byte NN	;wh_Flags	dictionary flags
=42960					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a855	20 8e b3	jsr $b38e	C_Dot_Hex:	jsr PopA
.a858					C_Dot_Hex_A:
.a858	48		pha		                pha
.a859	4a		lsr a				lsr		; convert high nibble first
.a85a	4a		lsr a				lsr
.a85b	4a		lsr a				lsr
.a85c	4a		lsr a				lsr
.a85d	20 61 a8	jsr $a861			jsr _nibble_to_ascii
.a860	68		pla				pla
.a861					_nibble_to_ascii:
.a861	29 0f		and #$0f			and #$0F	; only use lower nibble
.a863	c9 0a		cmp #$0a			cmp #9+1
.a865	90 02		bcc $a869			bcc +
.a867	69 06		adc #$06			adc #6
.a869	69 30		adc #$30	+		adc #'0'
.a86b	4c 75 cd	jmp $cd75			jmp Emit_A
>a86e	2e 48 65 78			L1:	.text ".Hex"	;  name of word as a string, ending at wh_NameLastChar
>a872	04					.byte ((".Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a873	d0 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a875	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a876	08					.byte NN	;wh_Flags	dictionary flags
=42994					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a877	b5 25		lda $25,x	Dot_Hex:	lda DStack+1,x	; do hi byte
.a879	20 58 a8	jsr $a858			jsr C_Dot_Hex_A
.a87c	4c 55 a8	jmp $a855			jmp C_Dot_Hex	; do lo byte
.a87f					is_printable:
.a87f	c9 20		cmp #$20	                cmp #AscSP              ; $20
.a881	90 07		bcc $a88a	                bcc _done
.a883	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.a885	b0 02		bcs $a889	                bcs _failed
.a887	38		sec		                sec
.a888	60		rts		                rts
.a889	18		clc		_failed:	clc
.a88a	60		rts		_done:		rts
>a88b	2e 53				L1:	.text ".S"	;  name of word as a string, ending at wh_NameLastChar
>a88d	62					.byte ((".S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a88e	f2 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a890	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a891	08					.byte NN	;wh_Flags	dictionary flags
=43021					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a892					Dot_s:
.a892	a9 3c		lda #$3c			lda #'<'
.a894	20 75 cd	jsr $cd75			jsr Emit_A
.a897	20 fe c1	jsr $c1fe			jsr Depth	; ( -- u )
.a89a	20 d0 cb	jsr $cbd0			jsr print_u
.a89d	a9 3e		lda #$3e			lda #'>'
.a89f	20 75 cd	jsr $cd75			jsr Emit_A
.a8a2	20 82 cd	jsr $cd82			jsr Space
.a8a5	a0 28		ldy #$28			ldy #DStack0		; for each cell on the stack
.a8a7	88		dey		_loop:		dey
.a8a8	88		dey				dey
.a8a9	86 14		stx $14				stx tmp1
.a8ab	c4 14		cpy $14				cpy tmp1
.a8ad	90 15		bcc $a8c4			bcc _done
.a8af	98		tya				tya			; save index
.a8b0	48		pha				pha
.a8b1	ca		dex				dex			; push stack[index]
.a8b2	ca		dex				dex
.a8b3	b9 24 00	lda $0024,y			lda DStack+0,y
.a8b6	95 24		sta $24,x			sta DStack+0,x
.a8b8	b9 25 00	lda $0025,y			lda DStack+1,y
.a8bb	95 25		sta $25,x			sta DStack+1,x
.a8bd	20 83 cb	jsr $cb83			jsr Dot
.a8c0	68		pla				pla			; restore index
.a8c1	a8		tay				tay
.a8c2	d0 e3		bne $a8a7			bne _loop
.a8c4					_done:
=50					CL	.var *-(WordListLink+wh_Xt)
=$a8c4					en = *	; remember here
>a890	32					.byte CL	;wh_CodeLength
.a8c4	60		rts				rts
>a8c5	43 6f 6d 70 61 72 65		L1:	.text "Compare"	;  name of word as a string, ending at wh_NameLastChar
>a8cc	a7					.byte (("Compare"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a8cd	0d a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a8cf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a8d0	18					.byte UF+NN	;wh_Flags	dictionary flags
=43084					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a8d1					Compare:
.a8d1	20 f3 b3	jsr $b3f3			jsr underflow_4
.a8d4	b5 24		lda $24,x			lda DStack+0,x		; tmp3+1= u2.lo
.a8d6	85 19		sta $19				sta tmp3+1
.a8d8	b5 26		lda $26,x			lda DStack+2,x		; tmp2= addr2
.a8da	b4 27		ldy $27,x			ldy DStack+3,x
.a8dc	85 16		sta $16				sta tmp2+0
.a8de	84 17		sty $17				sty tmp2+1
.a8e0	b5 28		lda $28,x			lda DStack+4,x		; tmp3+0= u1.lo
.a8e2	85 18		sta $18				sta tmp3+0
.a8e4	b5 2a		lda $2a,x			lda DStack+6,x		; tmp1= addr1
.a8e6	b4 2b		ldy $2b,x			ldy DStack+7,x
.a8e8	85 14		sta $14				sta tmp1+0
.a8ea	84 15		sty $15				sty tmp1+1
.a8ec	a0 00		ldy #$00			ldy #0		; for each char
.a8ee					_loop:
.a8ee	c4 18		cpy $18				cpy tmp3+0	; string1 empty?
.a8f0	f0 13		beq $a905			beq _str1
.a8f2					_L1:
.a8f2	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a8f4	f0 27		beq $a91d			beq _str2
.a8f6					_L2:
.a8f6	b1 14		lda ($14),y			lda (tmp1),y	; Are they different?
.a8f8	d1 16		cmp ($16),y			cmp (tmp2),y
.a8fa	d0 19		bne $a915			bne _neq
.a8fc	c8		iny				iny		; to next char
.a8fd	d0 ef		bne $a8ee			bne _loop
.a8ff	e6 15		inc $15				inc tmp1+1	; to next page
.a901	e6 17		inc $17				inc tmp2+1
.a903	d0 e9		bne $a8ee			bne _loop
.a905	d6 29		dec $29,x	_str1:		dec DStack+5,x	; string1 really empty?
.a907	10 e9		bpl $a8f2			bpl _L1
.a909	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a90b	d0 0a		bne $a917			bne _less
.a90d	b5 25		lda $25,x			lda DStack+1,x
.a90f	d0 06		bne $a917			bne _less
.a911	a9 00		lda #$00	_equal:		lda #0		; Return 0
.a913	f0 0e		beq $a923			beq _gt2
.a915	b0 0a		bcs $a921	_neq:		bcs _greater
.a917	a9 ff		lda #$ff	_less:		lda #$FF	; Return -1
.a919	95 2a		sta $2a,x			sta DStack+6,x
.a91b	d0 0a		bne $a927			bne _done
.a91d	d6 25		dec $25,x	_str2:		dec DStack+1,x	; is string2 empty?
.a91f	10 d5		bpl $a8f6			bpl _L2
.a921	a9 01		lda #$01	_greater:	lda #1		; Return 1
.a923	95 2a		sta $2a,x	_gt2:		sta DStack+6,x
.a925	a9 00		lda #$00			lda #0
.a927	95 2b		sta $2b,x	_done:		sta DStack+7,x
.a929	8a		txa				txa		; Remove all but the result from the stack.
.a92a	18		clc				clc
.a92b	69 06		adc #$06			adc #6
.a92d	aa		tax				tax
=93					CL	.var *-(WordListLink+wh_Xt)
=$a92e					en = *	; remember here
>a8cf	5d					.byte CL	;wh_CodeLength
.a92e	60		rts				rts
>a92f	53 65 61 72 63 68		L1:	.text "Search"	;  name of word as a string, ending at wh_NameLastChar
>a935	06					.byte (("Search"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a936	4c a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a938	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a939	18					.byte UF+NN	;wh_Flags	dictionary flags
=43189					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a93a					Search:
.a93a	20 f3 b3	jsr $b3f3			jsr underflow_4
.a93d	b5 24		lda $24,x			lda DStack+0,x
.a93f	15 25		ora $25,x			ora DStack+1,x
.a941	d0 09		bne $a94c			bne _start_search
.a943	e8		inx				inx		; Drop u2
.a944	e8		inx				inx
.a945	a9 ff		lda #$ff			lda #$FF	; overwrite addr2 with a true flag
.a947	95 24		sta $24,x			sta DStack+0,x
.a949	95 25		sta $25,x			sta DStack+1,x
.a94b	60		rts				rts
.a94c					_start_search:
.a94c	20 b5 b7	jsr $b7b5			jsr Zero
.a94f					_search_loop:
.a94f	18		clc				clc
.a950	b5 24		lda $24,x			lda DStack+0,x
.a952	75 26		adc $26,x			adc DStack+2,x
.a954	85 14		sta $14				sta tmp1+0
.a956	b5 25		lda $25,x			lda DStack+1,x
.a958	75 27		adc $27,x			adc DStack+3,x
.a95a	85 15		sta $15				sta tmp1+1
.a95c	d5 2b		cmp $2b,x			cmp DStack+7,x
.a95e	90 13		bcc $a973			bcc _init_comparison ; Obviously less
.a960	d0 06		bne $a968			bne _not_found
.a962	b5 2a		lda $2a,x			lda DStack+6,x
.a964	c5 14		cmp $14				cmp tmp1
.a966	b0 0b		bcs $a973			bcs _init_comparison
.a968					_not_found:
.a968	e8		inx				inx		; Remove offset
.a969	e8		inx				inx
.a96a	e8		inx				inx		; Remove u2
.a96b	e8		inx				inx
.a96c	a9 00		lda #$00			lda #0
.a96e	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a false flag
.a970	95 25		sta $25,x			sta DStack+1,x
.a972	60		rts				rts
.a973					_init_comparison:
.a973	18		clc				clc
.a974	b5 2c		lda $2c,x			lda DStack+8,x
.a976	75 24		adc $24,x			adc DStack+0,x
.a978	85 14		sta $14				sta tmp1
.a97a	b5 2d		lda $2d,x			lda DStack+9,x
.a97c	75 25		adc $25,x			adc DStack+1,x
.a97e	85 15		sta $15				sta tmp1+1
.a980	b5 28		lda $28,x			lda DStack+4,x
.a982	85 16		sta $16				sta tmp2
.a984	b5 29		lda $29,x			lda DStack+5,x
.a986	85 17		sta $17				sta tmp2+1
.a988	b5 26		lda $26,x			lda DStack+2,x
.a98a	85 18		sta $18				sta tmp3+0
.a98c	b5 27		lda $27,x			lda DStack+3,x
.a98e	85 19		sta $19				sta tmp3+1
.a990					_comparison_loop:
.a990	a0 00		ldy #$00			ldy #0
.a992	b1 14		lda ($14),y			lda (tmp1),y
.a994	d1 16		cmp ($16),y			cmp (tmp2),y
.a996	f0 06		beq $a99e			beq _letters_match
.a998	20 fd c9	jsr $c9fd			jsr One_plus
.a99b	4c 4f a9	jmp $a94f			jmp _search_loop
.a99e					_letters_match:
.a99e	e6 14		inc $14				inc tmp1
.a9a0	d0 02		bne $a9a4			bne +
.a9a2	e6 15		inc $15				inc tmp1+1
.a9a4					+
.a9a4	e6 16		inc $16				inc tmp2
.a9a6	d0 02		bne $a9aa			bne +
.a9a8	e6 17		inc $17				inc tmp2+1
.a9aa					+
.a9aa	a5 18		lda $18				lda tmp3
.a9ac	d0 02		bne $a9b0			bne +
.a9ae	c6 19		dec $19				dec tmp3+1
.a9b0					+
.a9b0	c6 18		dec $18				dec tmp3
.a9b2	a5 18		lda $18				lda tmp3
.a9b4	05 19		ora $19				ora tmp3+1
.a9b6	d0 d8		bne $a990			bne _comparison_loop ; Check the next letter
.a9b8	18		clc				clc
.a9b9	b5 24		lda $24,x			lda DStack+0,x
.a9bb	75 2c		adc $2c,x			adc DStack+8,x
.a9bd	95 2c		sta $2c,x			sta DStack+8,x
.a9bf	b5 25		lda $25,x			lda DStack+1,x
.a9c1	75 2d		adc $2d,x			adc DStack+9,x
.a9c3	95 2d		sta $2d,x			sta DStack+9,x
.a9c5	38		sec				sec
.a9c6	b5 2a		lda $2a,x			lda DStack+6,x
.a9c8	f5 24		sbc $24,x			sbc DStack+0,x
.a9ca	95 2a		sta $2a,x			sta DStack+6,x
.a9cc	b5 2b		lda $2b,x			lda DStack+7,x
.a9ce	f5 25		sbc $25,x			sbc DStack+1,x
.a9d0	95 2b		sta $2b,x			sta DStack+7,x
.a9d2	e8		inx				inx		; drop offset
.a9d3	e8		inx				inx
.a9d4	e8		inx				inx		; drop u2
.a9d5	e8		inx				inx
.a9d6	a9 ff		lda #$ff			lda #$FF
.a9d8	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a true flag.
.a9da	95 25		sta $25,x			sta DStack+1,x
=162					CL	.var *-(WordListLink+wh_Xt)
=$a9dc					en = *	; remember here
>a938	a2					.byte CL	;wh_CodeLength
.a9dc	60		rts				rts
>a9dd	4d 61 72 6b 65 72		L1:	.text "Marker"	;  name of word as a string, ending at wh_NameLastChar
>a9e3	46					.byte (("Marker"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a9e4	b5 a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9e6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9e7	0c					.byte IM+NN	;wh_Flags	dictionary flags
=43363					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9e8					Marker:
.a9e8	20 c9 c9	jsr $c9c9			jsr Here		; Save original CP, which
.a9eb	20 f0 c0	jsr $c0f0			jsr Header_Build	; compile a word header, but don't link into wordlist
.a9ee	a0 aa		ldy #$aa			ldy #>_runtime		; compile JSR _runtime
.a9f0	a9 08		lda #$08			lda #<_runtime
.a9f2	20 e5 cc	jsr $cce5			jsr Jsr_Comma_YA
.a9f5	20 bd cc	jsr $ccbd			jsr Comma		; Append original CP
.a9f8	a0 00		ldy #$00			ldy #0			; Start at CURRENT
.a9fa	b9 10 03	lda $0310,y	_loop:		lda CurrentV,y
.a9fd	20 a6 cc	jsr $cca6			jsr C_Comma_A
.aa00	c8		iny				iny
.aa01	c0 24		cpy #$24			cpy #MarkEnd-CurrentV	; One past the end of the search order.
.aa03	90 f5		bcc $a9fa			bcc _loop
.aa05	4c e5 c0	jmp $c0e5			jmp Header_Link		; link built header into current dictionary
=32					CL	.var *-(WordListLink+wh_Xt)
=$aa08					en = *	; remember here
>a9e6	20					.byte CL	;wh_CodeLength
.aa08					_runtime:
.aa08	68		pla				pla		; Pop the RTS address off the stack
.aa09	85 14		sta $14				sta tmp1+0
.aa0b	68		pla				pla
.aa0c	85 15		sta $15				sta tmp1+1
.aa0e	a0 01		ldy #$01			ldy #1		; start just aftet JSR _runtime
.aa10	b1 14		lda ($14),y			lda (tmp1),y	; CP was stored first
.aa12	85 00		sta $00				sta cp+0
.aa14	c8		iny				iny
.aa15	b1 14		lda ($14),y			lda (tmp1),y
.aa17	85 01		sta $01				sta cp+1
.aa19	c8		iny				iny
.aa1a					_rloop:
.aa1a	b1 14		lda ($14),y			lda (tmp1),y
.aa1c	99 0d 03	sta $030d,y			sta CurrentV-2-1,y
.aa1f	c8		iny				iny
.aa20	c0 27		cpy #$27			cpy #MarkEnd-CurrentV+2+1 ; One past the end of the search order.
.aa22	90 f6		bcc $aa1a			bcc _rloop
.aa24	60		rts				rts
>aa25	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
>aa2a	65					.byte (("Words"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aa2b	63 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa2d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa2e	08					.byte NN	;wh_Flags	dictionary flags
=43434					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa2f					Words:
.aa2f	a9 ff		lda #$ff			lda #$ff
.aa31	20 a6 b7	jsr $b7a6			jsr PushZA		; Alloc space for line size & wordlist #
.aa34	ca		dex				dex			; Alloc space for a nt
.aa35	ca		dex				dex
.aa36					_wordlist_next:
.aa36	20 e2 aa	jsr $aae2			jsr CR			; start wordlist on new line
.aa39	f6 26		inc $26,x			inc DStack+2,x		; step to next search wordlist
.aa3b	b4 26		ldy $26,x			ldy DStack+2,x		; Y= wordlist index
.aa3d	cc 2a 03	cpy $032a			cpy Num_OrderV
.aa40	b0 44		bcs $aa86			bcs _wordslist_done	; ran out of search wordlist entries?
.aa42	b9 2b 03	lda $032b,y			lda Search_OrderV,y	; A= SEARCH-ORDER[Y]	Get the current wordlist id
.aa45	0a		asl a				asl			; TOS= WORDLISTS[A]
.aa46	a8		tay				tay
.aa47	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.aa4a	95 24		sta $24,x			sta DStack+0,x
.aa4c	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.aa4f	95 25		sta $25,x			sta DStack+1,x
.aa51	f0 e3		beq $aa36			beq _wordlist_next	; end of list?
.aa53					_word_loop:
.aa53	20 07 cf	jsr $cf07			jsr Dup			; ( wordlist# nt nt )
.aa56	20 b4 bd	jsr $bdb4			jsr Name_To_String	; ( wordlist# nt addr u )
.aa59	b5 2b		lda $2b,x			lda DStack+7,x
.aa5b	38		sec				sec			; don't forget the space between words
.aa5c	75 24		adc $24,x			adc DStack+0,x
.aa5e	c9 4e		cmp #$4e			cmp #MAX_LINE_LENGTH-1
.aa60	90 05		bcc $aa67			bcc +
.aa62	20 e2 aa	jsr $aae2			jsr CR
.aa65	b5 24		lda $24,x			lda DStack+0,x		; After going to next line, start
.aa67	95 2b		sta $2b,x	+		sta DStack+7,x
.aa69	20 8f cd	jsr $cd8f			jsr Type		; ( wordlist# nt )
.aa6c	20 82 cd	jsr $cd82			jsr Space
.aa6f	b5 24		lda $24,x			lda DStack+0,x
.aa71	85 14		sta $14				sta tmp1+0
.aa73	b5 25		lda $25,x			lda DStack+1,x
.aa75	85 15		sta $15				sta tmp1+1
.aa77	a0 81		ldy #$81			ldy #wh_WordListLink	; get next word nt
.aa79	b1 14		lda ($14),y			lda (tmp1),y
.aa7b	95 24		sta $24,x			sta DStack+0,x
.aa7d	c8		iny				iny
.aa7e	b1 14		lda ($14),y			lda (tmp1),y
.aa80	95 25		sta $25,x			sta DStack+1,x
.aa82	d0 cf		bne $aa53			bne _word_loop		; end of list?
.aa84	f0 b0		beq $aa36			beq _wordlist_next
.aa86					_wordslist_done:
.aa86	4c c1 c4	jmp $c4c1			jmp Two_Drop
=90					CL	.var *-(WordListLink+wh_Xt)
=$aa89					en = *	; remember here
>aa2d	5a					.byte CL	;wh_CodeLength
>aa89	57 6f 72 64 53 69 7a 65		L1:	.text "WordSize"	;  name of word as a string, ending at wh_NameLastChar
>aa91	a8					.byte (("WordSize"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aa92	aa a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa94	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa95	08					.byte NN	;wh_Flags	dictionary flags
=43537					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa96	20 b5 b3	jsr $b3b5	WordSize:	jsr PopTmp1
.aa99	a0 83		ldy #$83			ldy #Wh_CodeLength
.aa9b	b1 14		lda ($14),y			lda (tmp1),y
.aa9d	4c a6 b7	jmp $b7a6			jmp PushZA
=10					CL	.var *-(WordListLink+wh_Xt)
=$aaa0					en = *	; remember here
>aa94	0a					.byte CL	;wh_CodeLength
>aaa0	41 6c 69 67 6e 65 64		L1:	.text "Aligned"	;  name of word as a string, ending at wh_NameLastChar
>aaa7	87					.byte (("Aligned"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aaa8	11 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aaaa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aaab	00					.byte 0	;wh_Flags	dictionary flags
=43559					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aaac					Aligned:
=0					CL	.var *-(WordListLink+wh_Xt)
=$aaac					en = *	; remember here
>aaaa	00					.byte CL	;wh_CodeLength
.aaac	60		rts				rts
>aaad	41 6c 69 67 6e			L1:	.text "Align"	;  name of word as a string, ending at wh_NameLastChar
>aab2	c5					.byte (("Align"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aab3	27 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aab5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aab6	00					.byte 0	;wh_Flags	dictionary flags
=43570					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aab7					Align:
=0					CL	.var *-(WordListLink+wh_Xt)
=$aab7					en = *	; remember here
>aab5	00					.byte CL	;wh_CodeLength
.aab7	60		rts				rts
>aab8	4f 75 74 70 75 74		L1:	.text "Output"	;  name of word as a string, ending at wh_NameLastChar
>aabe	86					.byte (("Output"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aabf	32 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aac1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aac2	08					.byte NN	;wh_Flags	dictionary flags
=43582					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aac3					xt_output:
.aac3	a0 03		ldy #$03			ldy #>output
.aac5	a9 06		lda #$06			lda #<output
.aac7	4c 64 b7	jmp $b764			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$aaca					en = *	; remember here
>aac1	07					.byte CL	;wh_CodeLength
>aaca	49 6e 70 75 74			L1:	.text "Input"	;  name of word as a string, ending at wh_NameLastChar
>aacf	85					.byte (("Input"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aad0	3e aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aad2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aad3	08					.byte NN	;wh_Flags	dictionary flags
=43599					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aad4	a0 03		ldy #$03	xt_input:	ldy #>input
.aad6	a9 08		lda #$08			lda #<input
.aad8	4c 64 b7	jmp $b764			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$aadb					en = *	; remember here
>aad2	07					.byte CL	;wh_CodeLength
>aadb	43 52				L1:	.text "CR"	;  name of word as a string, ending at wh_NameLastChar
>aadd	42					.byte (("CR"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aade	4f aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aae0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aae1	08					.byte NN	;wh_Flags	dictionary flags
=43613					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aae2					CR:
.aae2	a9 0d		lda #$0d			lda #AscCR
.aae4	20 75 cd	jsr $cd75			jsr Emit_A
.aae7	a9 0a		lda #$0a			lda #AscLF
.aae9	20 75 cd	jsr $cd75			jsr Emit_A
=10					CL	.var *-(WordListLink+wh_Xt)
=$aaec					en = *	; remember here
>aae0	0a					.byte CL	;wh_CodeLength
.aaec	60		rts				rts
>aaed	50 61 67 65			L1:	.text "Page"	;  name of word as a string, ending at wh_NameLastChar
>aaf1	a4					.byte (("Page"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aaf2	5d aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aaf4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aaf5	08					.byte NN	;wh_Flags	dictionary flags
=43633					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aaf6	20 85 b8	jsr $b885	Page:		jsr SLiteral_Runtime
.aaf9	4c 06 ab	jmp $ab06			  jmp +
>aafc	1b 5b 32 4a					  .text AscESC,"[2J"	; ANSI clear screen
>ab00	1b 5b 31 3b 31 48				  .text AscESC,"[1;1H"	; move cursor to top left of screen
.ab06	4c 8f cd	jmp $cd8f	+		jmp Type
=19					CL	.var *-(WordListLink+wh_Xt)
=$ab09					en = *	; remember here
>aaf4	13					.byte CL	;wh_CodeLength
>ab09	41 74 2d 58 59			L1:	.text "At-XY"	;  name of word as a string, ending at wh_NameLastChar
>ab0e	25					.byte (("At-XY"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab0f	71 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab11	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab12	18					.byte UF+NN	;wh_Flags	dictionary flags
=43662					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab13					At_XY:
.ab13	20 e9 b3	jsr $b3e9			jsr underflow_2
.ab16	ad 00 03	lda $0300			lda base	; Save the BASE
.ab19	48		pha				pha
.ab1a	20 63 b1	jsr $b163			jsr Decimal	; ANSI escape code values need to be in decimal.
.ab1d	a9 1b		lda #$1b			lda #AscESC
.ab1f	20 75 cd	jsr $cd75			jsr Emit_A
.ab22	a9 5b		lda #$5b			lda #'['
.ab24	20 75 cd	jsr $cd75			jsr Emit_A
.ab27	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.ab29	20 d0 cb	jsr $cbd0			jsr print_u
.ab2c	a9 3b		lda #$3b			lda #';'
.ab2e	20 75 cd	jsr $cd75			jsr Emit_A
.ab31	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.ab33	20 d0 cb	jsr $cbd0			jsr print_u
.ab36	a9 48		lda #$48			lda #'H'
.ab38	20 75 cd	jsr $cd75			jsr Emit_A
.ab3b	68		pla				pla		; Restore the base
.ab3c	8d 00 03	sta $0300			sta base
=44					CL	.var *-(WordListLink+wh_Xt)
=$ab3f					en = *	; remember here
>ab11	2c					.byte CL	;wh_CodeLength
.ab3f	60		rts				rts
>ab40	50 61 64			L1:	.text "Pad"	;  name of word as a string, ending at wh_NameLastChar
>ab43	83					.byte (("Pad"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab44	8e aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab46	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab47	00					.byte 0	;wh_Flags	dictionary flags
=43715					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab48	ca		dex		Pad:		dex		; push cp+PadOffset
.ab49	ca		dex				dex
.ab4a	18		clc				clc
.ab4b	a5 00		lda $00				lda cp+0
.ab4d	69 54		adc #$54			adc #PadOffset
.ab4f	95 24		sta $24,x			sta DStack+0,x
.ab51	a5 01		lda $01				lda cp+1
.ab53	69 00		adc #$00			adc #0
.ab55	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$ab57					en = *	; remember here
>ab46	0f					.byte CL	;wh_CodeLength
.ab57	60		rts				rts
>ab58	3c 23				L1:	.text "<#"	;  name of word as a string, ending at wh_NameLastChar
>ab5a	62					.byte (("<#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab5b	c3 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab5d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab5e	00					.byte 0	;wh_Flags	dictionary flags
=43738					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab5f					Less_Number_Sign:
.ab5f	a9 54		lda #$54			lda #PadOffset		; init hold buffer index
.ab61	8d 34 03	sta $0334			sta ToHold
=5					CL	.var *-(WordListLink+wh_Xt)
=$ab64					en = *	; remember here
>ab5d	05					.byte CL	;wh_CodeLength
.ab64	60		rts				rts
>ab65	23 3e				L1:	.text "#>"	;  name of word as a string, ending at wh_NameLastChar
>ab67	c2					.byte (("#>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab68	da aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab6a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab6b	10					.byte UF	;wh_Flags	dictionary flags
=43751					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab6c					Number_Sign_Greater:
.ab6c	20 e9 b3	jsr $b3e9			jsr underflow_2		; double number
.ab6f	18		clc				clc			; addr= cp + ToHold
.ab70	a5 00		lda $00				lda cp+0
.ab72	6d 34 03	adc $0334			adc ToHold
.ab75	95 26		sta $26,x			sta DStack+2,x
.ab77	a5 01		lda $01				lda cp+1
.ab79	69 00		adc #$00			adc #0
.ab7b	95 27		sta $27,x			sta DStack+3,x
.ab7d	38		sec				sec			; u= PadOffset - ToHold
.ab7e	a9 54		lda #$54			lda #PadOffset
.ab80	ed 34 03	sbc $0334			sbc ToHold
.ab83	95 24		sta $24,x			sta DStack+0,x
.ab85	a9 00		lda #$00			lda #0
.ab87	95 25		sta $25,x			sta DStack+1,x
=29					CL	.var *-(WordListLink+wh_Xt)
=$ab89					en = *	; remember here
>ab6a	1d					.byte CL	;wh_CodeLength
.ab89	60		rts				rts
>ab8a	48 6f 6c 64			L1:	.text "Hold"	;  name of word as a string, ending at wh_NameLastChar
>ab8e	84					.byte (("Hold"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab8f	e7 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab91	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab92	00					.byte 0	;wh_Flags	dictionary flags
=43790					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab93	20 8e b3	jsr $b38e	Hold:		jsr PopA
.ab96	ce 34 03	dec $0334	Hold_A:		dec ToHold
.ab99	ac 34 03	ldy $0334			ldy ToHold
.ab9c	91 00		sta ($00),y			sta (cp),y
=11					CL	.var *-(WordListLink+wh_Xt)
=$ab9e					en = *	; remember here
>ab91	0b					.byte CL	;wh_CodeLength
.ab9e	60		rts				rts
>ab9f	23				L1:	.text "#"	;  name of word as a string, ending at wh_NameLastChar
>aba0	61					.byte (("#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aba1	0e ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aba3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aba4	18					.byte UF+NN	;wh_Flags	dictionary flags
=43808					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aba5					Number_Sign:
.aba5	20 e9 b3	jsr $b3e9			jsr underflow_2		; double number
.aba8	a9 00		lda #$00			lda #0			;   init remainder
.abaa	18		clc				clc
.abab	a0 21		ldy #$21			ldy #32+1		;   for each bit
.abad					_11:
.abad	2a		rol a				rol a			;   shift remainder
.abae	cd 00 03	cmp $0300			cmp base		;   will it fit?
.abb1	90 03		bcc $abb6			bcc _27
.abb3	ed 00 03	sbc $0300			sbc base
.abb6					_27:
.abb6	36 26		rol $26,x			rol DStack+2,x		;   shift ud
.abb8	36 27		rol $27,x			rol DStack+3,x
.abba	36 24		rol $24,x			rol DStack+0,x
.abbc	36 25		rol $25,x			rol DStack+1,x
.abbe	88		dey				dey
.abbf	d0 ec		bne $abad			bne _11
.abc1	c9 0a		cmp #$0a			cmp #9+1		; alternatively this could use s_abc_upper
.abc3	90 02		bcc $abc7			bcc +
.abc5	69 06		adc #$06			adc #7-1
.abc7	69 30		adc #$30	+		adc #'0'
.abc9	d0 cb		bne $ab96			bne Hold_A
=38					CL	.var *-(WordListLink+wh_Xt)
=$abcb					en = *	; remember here
>aba3	26					.byte CL	;wh_CodeLength
>abcb	23 53				L1:	.text "#S"	;  name of word as a string, ending at wh_NameLastChar
>abcd	62					.byte (("#S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>abce	20 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abd0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abd1	00					.byte 0	;wh_Flags	dictionary flags
=43853					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abd2					Number_Sign_S:
.abd2					_loop:
.abd2	20 a5 ab	jsr $aba5			jsr Number_sign	; convert a single number ("#")
.abd5	b5 24		lda $24,x			lda DStack+0,x	; stop when double-celled number in TOS is zero
.abd7	15 25		ora $25,x			ora DStack+1,x
.abd9	15 26		ora $26,x			ora DStack+2,x
.abdb	15 27		ora $27,x			ora DStack+3,x
.abdd	d0 f3		bne $abd2			bne _loop
=13					CL	.var *-(WordListLink+wh_Xt)
=$abdf					en = *	; remember here
>abd0	0d					.byte CL	;wh_CodeLength
.abdf	60		rts				rts
>abe0	53 69 67 6e			L1:	.text "Sign"	;  name of word as a string, ending at wh_NameLastChar
>abe4	c4					.byte (("Sign"[-1]&7)<<5)+(*-L1)	;wh_HNL
>abe5	4d ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abe7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abe8	08					.byte NN	;wh_Flags	dictionary flags
=43876					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abe9	20 aa b3	jsr $b3aa	Sign:		jsr PopYA
.abec	98		tya				tya		; test MSB of TOS
.abed					Sign_P:
.abed	30 01		bmi $abf0			bmi _minus
.abef	60		rts				rts
.abf0	a9 2d		lda #$2d	_minus:		lda #'-'	; add minus sign
.abf2	d0 a2		bne $ab96			bne hold_a
=11					CL	.var *-(WordListLink+wh_Xt)
=$abf4					en = *	; remember here
>abe7	0b					.byte CL	;wh_CodeLength
>abf4	43 6c 65 61 76 65		L1:	.text "Cleave"	;  name of word as a string, ending at wh_NameLastChar
>abfa	a6					.byte (("Cleave"[-1]&7)<<5)+(*-L1)	;wh_HNL
>abfb	64 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abfd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abfe	18					.byte UF+NN	;wh_Flags	dictionary flags
=43898					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abff					Cleave:
.abff	20 e9 b3	jsr $b3e9			jsr underflow_2
.ac02	20 6e c4	jsr $c46e			jsr Minus_leading	; -LEADING ( addr u )
.ac05	20 b3 c3	jsr $c3b3			jsr Input_To_R	; save old imput state
.ac08	b5 24		lda $24,x			lda DStack+0,x	; u is new ciblen
.ac0a	85 06		sta $06				sta ciblen
.ac0c	b5 25		lda $25,x			lda DStack+1,x
.ac0e	85 07		sta $07				sta ciblen+1
.ac10	b5 26		lda $26,x			lda DStack+2,x	; addr is new cib
.ac12	85 04		sta $04				sta cib
.ac14	b5 27		lda $27,x			lda DStack+3,x
.ac16	85 05		sta $05				sta cib+1
.ac18	a9 00		lda #$00			lda #0
.ac1a	85 08		sta $08				sta toin	; >IN pointer is zero
.ac1c	85 09		sta $09				sta toin+1
.ac1e	20 55 ba	jsr $ba55			jsr parse_name	; ( addr u addr-s u-s )
.ac21	b5 24		lda $24,x			lda DStack+0,x
.ac23	15 25		ora $25,x			ora DStack+1,x
.ac25	f0 23		beq $ac4a			beq _done
.ac27	38		sec				sec
.ac28	b5 28		lda $28,x			lda DStack+4,x	; LSB of original u
.ac2a	f5 24		sbc $24,x			sbc DStack+0,x
.ac2c	95 28		sta $28,x			sta DStack+4,x
.ac2e	b5 29		lda $29,x			lda DStack+5,x	; MSB of original u
.ac30	f5 25		sbc $25,x			sbc DStack+1,x
.ac32	95 29		sta $29,x			sta DStack+5,x
.ac34	18		clc				clc
.ac35	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of original addr
.ac37	75 24		adc $24,x			adc DStack+0,x
.ac39	95 2a		sta $2a,x			sta DStack+6,x
.ac3b	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of original addr
.ac3d	75 25		adc $25,x			adc DStack+1,x
.ac3f	95 2b		sta $2b,x			sta DStack+7,x
.ac41	20 d3 c4	jsr $c4d3			jsr Two_swap		; ( addr-s u-s addr u )
.ac44	20 6e c4	jsr $c46e			jsr Minus_leading
.ac47	20 d3 c4	jsr $c4d3			jsr Two_swap		; ( addr u addr-s u-s )
.ac4a					_done:
.ac4a	20 d5 c3	jsr $c3d5			jsr R_To_Input
=78					CL	.var *-(WordListLink+wh_Xt)
=$ac4d					en = *	; remember here
>abfd	4e					.byte CL	;wh_CodeLength
.ac4d	60		rts				rts
>ac4e	48 65 78 53 74 6f 72 65		L1:	.text "HexStore"	;  name of word as a string, ending at wh_NameLastChar
>ac56	a8					.byte (("HexStore"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ac57	7a ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac59	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac5a	18					.byte UF+NN	;wh_Flags	dictionary flags
=43990					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac5b					Hexstore:
.ac5b	20 ee b3	jsr $b3ee			jsr underflow_3
.ac5e	20 07 cf	jsr $cf07			jsr Dup		; Save copy of original address
.ac61	20 d4 c5	jsr $c5d4			jsr Two_to_r		; ( addr1 u1 ) ( R: addr2 addr2 )
.ac64					_loop:
.ac64	b5 24		lda $24,x			lda DStack+0,x
.ac66	15 25		ora $25,x			ora DStack+1,x
.ac68	f0 37		beq $aca1			beq _done
.ac6a	20 ff ab	jsr $abff			jsr Cleave		; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.ac6d	20 d4 c5	jsr $c5d4			jsr Two_to_r
.ac70	20 b5 b7	jsr $b7b5			jsr Zero
.ac73	20 b5 b7	jsr $b7b5			jsr Zero
.ac76	20 af c5	jsr $c5af			jsr Two_r_from	; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.ac79	20 e4 af	jsr $afe4			jsr To_Number	; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.ac7c	b5 24		lda $24,x			lda DStack+0,x
.ac7e	15 25		ora $25,x			ora DStack+1,x
.ac80	d0 18		bne $ac9a			bne _have_chars_left
.ac82	20 c1 c4	jsr $c4c1			jsr Two_drop		; ( addr1 u1 n n ) ( R: addr2 addr2 )
.ac85	20 ee bf	jsr $bfee			jsr D_To_S		; ( addr1 u1 n ) ( R: addr2 addr2 )
.ac88	20 c7 ce	jsr $cec7			jsr R_Fetch		; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.ac8b	20 1d cd	jsr $cd1d			jsr C_Store		; ( addr1 u1 ) ( R: addr2 addr2 )
.ac8e	20 ab ce	jsr $ceab			jsr R_From		; R>
.ac91	20 fd c9	jsr $c9fd			jsr One_plus		; 1+
.ac94	20 8c ce	jsr $ce8c			jsr To_R		; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.ac97	4c 64 ac	jmp $ac64			jmp _loop
.ac9a					_have_chars_left:
.ac9a	8a		txa				txa
.ac9b	18		clc				clc
.ac9c	69 08		adc #$08			adc #8
.ac9e	aa		tax				tax
.ac9f	d0 c3		bne $ac64			bne _loop
.aca1					_done:
.aca1	e8		inx				inx
.aca2	e8		inx				inx
.aca3	e8		inx				inx
.aca4	e8		inx				inx			; 2DROP
.aca5	20 af c5	jsr $c5af			jsr Two_r_from		; ( addr2+n addr2 )
.aca8	20 25 cf	jsr $cf25			jsr Swap
.acab	4c 6a cb	jmp $cb6a			jmp Minus		; ( n )
=83					CL	.var *-(WordListLink+wh_Xt)
=$acae					en = *	; remember here
>ac59	53					.byte CL	;wh_CodeLength
>acae	57 69 74 68 69 6e		L1:	.text "Within"	;  name of word as a string, ending at wh_NameLastChar
>acb4	c6					.byte (("Within"[-1]&7)<<5)+(*-L1)	;wh_HNL
>acb5	d6 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>acb7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acb8	18					.byte UF+NN	;wh_Flags	dictionary flags
=44084					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.acb9					Within:
.acb9	20 ee b3	jsr $b3ee			jsr underflow_3
.acbc	20 de ce	jsr $cede			jsr Over
.acbf	20 6a cb	jsr $cb6a			jsr Minus
.acc2	20 8c ce	jsr $ce8c			jsr To_R
.acc5	20 6a cb	jsr $cb6a			jsr Minus
.acc8	20 ab ce	jsr $ceab			jsr R_From
.accb	4c 18 c8	jmp $c818			jmp U_Less_Than
=21					CL	.var *-(WordListLink+wh_Xt)
=$acce					en = *	; remember here
>acb7	15					.byte CL	;wh_CodeLength
>acce	5c				L1:	.text "\"	;  name of word as a string, ending at wh_NameLastChar
>accf	81					.byte (("\"[-1]&7)<<5)+(*-L1)	;wh_HNL
>acd0	34 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>acd2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acd3	0c					.byte IM+NN	;wh_Flags	dictionary flags
=44111					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.acd4					Backslash:
.acd4	ad 0c 03	lda $030c			lda BlkV+0		; interpreting a block?
.acd7	0d 0d 03	ora $030d			ora BlkV+1
.acda	f0 16		beq $acf2			beq _not_block
.acdc	a5 08		lda $08				lda toin+0
.acde	29 3f		and #$3f			and #$3F
.ace0	c9 02		cmp #$02			cmp #2
.ace2	90 16		bcc $acfa			bcc _rts
.ace4	a5 08		lda $08		                lda toin+0		; Move toin to next multiple of 64.
.ace6	29 c0		and #$c0	                and #$C0        	;   Clear lower bits to move to beginning of line.
.ace8	18		clc		                clc             	;   Add $40 (64 decimal) to move to next line.
.ace9	69 40		adc #$40	                adc #$40
.aceb	85 08		sta $08		                sta toin+0
.aced	90 0b		bcc $acfa	                bcc _rts
.acef	e6 09		inc $09		                inc toin+1
.acf1	60		rts				rts
.acf2					_not_block:
.acf2	a5 06		lda $06		                lda ciblen+0
.acf4	85 08		sta $08		                sta toin+0
.acf6	a5 07		lda $07		                lda ciblen+1
.acf8	85 09		sta $09		                sta toin+1
=38					CL	.var *-(WordListLink+wh_Xt)
=$acfa					en = *	; remember here
>acd2	26					.byte CL	;wh_CodeLength
.acfa	60		rts		_rts:		rts
>acfb	4d 6f 76 65			L1:	.text "Move"	;  name of word as a string, ending at wh_NameLastChar
>acff	a4					.byte (("Move"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ad00	4f ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad02	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad03	18					.byte NN+UF	;wh_Flags	dictionary flags
=44159					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad04					Move:
.ad04	b5 27		lda $27,x			lda DStack+3,x		; MSB of addr2
.ad06	d5 29		cmp $29,x			cmp DStack+5,x		; MSB of addr1
.ad08	d0 04		bne $ad0e			bne _ne
.ad0a	b5 26		lda $26,x			lda DStack+2,x		; LSB of addr2
.ad0c	d5 28		cmp $28,x			cmp DStack+4,x		; LSB of addr1
.ad0e	90 5a		bcc $ad6a	_ne:		bcc CMove
.ad10	d0 11		bne $ad23			bne CMove_up
.ad12	8a		txa		ThreeDrop:	txa		; drop three entries from Data Stack
.ad13	18		clc				clc
.ad14	69 06		adc #$06			adc #6
.ad16	aa		tax				tax
=19					CL	.var *-(WordListLink+wh_Xt)
=$ad17					en = *	; remember here
>ad02	13					.byte CL	;wh_CodeLength
.ad17	60		rts				rts
>ad18	43 4d 6f 76 65 3e		L1:	.text "CMove>"	;  name of word as a string, ending at wh_NameLastChar
>ad1e	c6					.byte (("CMove>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ad1f	7f ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad21	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad22	18					.byte UF+NN	;wh_Flags	dictionary flags
=44190					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad23					CMove_up:
.ad23	20 ee b3	jsr $b3ee			jsr underflow_3
.ad26	b5 26		lda $26,x			lda DStack+2,x
.ad28	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.ad2a	b5 27		lda $27,x			lda DStack+3,x
.ad2c	18		clc				clc
.ad2d	75 25		adc $25,x			adc DStack+1,x
.ad2f	85 17		sta $17				sta tmp2+1	; point to last page of destination
.ad31	b5 28		lda $28,x			lda DStack+4,x
.ad33	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.ad35	b5 29		lda $29,x			lda DStack+5,x
.ad37	18		clc				clc
.ad38	75 25		adc $25,x			adc DStack+1,x
.ad3a	85 15		sta $15				sta tmp1+1	; point to last page of source
.ad3c	f6 25		inc $25,x			inc DStack+1,x	; allows us to use bne with dec DStack+1,x below
.ad3e	b4 24		ldy $24,x			ldy DStack+0,x	; length of last page
.ad40	f0 10		beq $ad52			beq _nopartial
.ad42					_outerloop:
.ad42	88		dey				dey
.ad43	f0 07		beq $ad4c			beq _finishpage
.ad45					_innerloop:
.ad45	b1 14		lda ($14),y			lda (tmp1),y
.ad47	91 16		sta ($16),y			sta (tmp2),y
.ad49	88		dey				dey
.ad4a	d0 f9		bne $ad45			bne _innerloop
.ad4c					_finishpage:
.ad4c	a0 00		ldy #$00			ldy #0
.ad4e	b1 14		lda ($14),y			lda (tmp1),y	; handle y = 0 separately
.ad50	91 16		sta ($16),y			sta (tmp2),y
.ad52					_nopartial:
.ad52	c6 15		dec $15				dec tmp1+1	; back up to previous pages
.ad54	c6 17		dec $17				dec tmp2+1
.ad56	d6 25		dec $25,x			dec DStack+1,x
.ad58	d0 e8		bne $ad42			bne _outerloop
.ad5a					_done:
.ad5a	4c 12 ad	jmp $ad12			jmp ThreeDrop	; clear up the stack and leave
=58					CL	.var *-(WordListLink+wh_Xt)
=$ad5d					en = *	; remember here
>ad21	3a					.byte CL	;wh_CodeLength
.ad5d	4c f8 b3	jmp $b3f8	Throw_Stack_14: jmp Throw_Stack
>ad60	43 4d 6f 76 65			L1:	.text "CMove"	;  name of word as a string, ending at wh_NameLastChar
>ad65	a5					.byte (("CMove"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ad66	9e ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad68	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad69	18					.byte UF+NN	;wh_Flags	dictionary flags
=44261					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad6a					CMove:
.ad6a	20 ee b3	jsr $b3ee			jsr underflow_3
.ad6d	b5 26		lda $26,x			lda DStack+2,x
.ad6f	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.ad71	b5 27		lda $27,x			lda DStack+3,x
.ad73	85 17		sta $17				sta tmp2+1
.ad75	b5 28		lda $28,x			lda DStack+4,x
.ad77	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.ad79	b5 29		lda $29,x			lda DStack+5,x
.ad7b	85 15		sta $15				sta tmp1+1
.ad7d	a0 00		ldy #$00			ldy #0
.ad7f	b5 25		lda $25,x			lda DStack+1,x	; number of whole pages to move
.ad81	f0 0f		beq $ad92			beq _dopartial
.ad83					_page:
.ad83	b1 14		lda ($14),y			lda (tmp1),y
.ad85	91 16		sta ($16),y			sta (tmp2),y
.ad87	c8		iny				iny
.ad88	d0 f9		bne $ad83			bne _page
.ad8a	e6 15		inc $15				inc tmp1+1
.ad8c	e6 17		inc $17				inc tmp2+1
.ad8e	d6 25		dec $25,x			dec DStack+1,x
.ad90	d0 f1		bne $ad83			bne _page
.ad92					_dopartial:
.ad92	b5 24		lda $24,x			lda DStack+0,x	; length of last page
.ad94	f0 09		beq $ad9f			beq _done
.ad96					_partial:
.ad96	b1 14		lda ($14),y			lda (tmp1),y
.ad98	91 16		sta ($16),y			sta (tmp2),y
.ad9a	c8		iny				iny
.ad9b	d6 24		dec $24,x			dec DStack+0,x
.ad9d	d0 f7		bne $ad96			bne _partial
.ad9f	4c 12 ad	jmp $ad12	_done:		jmp ThreeDrop	; clear the stack
=56					CL	.var *-(WordListLink+wh_Xt)
=$ada2					en = *	; remember here
>ad68	38					.byte CL	;wh_CodeLength
>ada2	55 4d 2a			L1:	.text "UM*"	;  name of word as a string, ending at wh_NameLastChar
>ada5	43					.byte (("UM*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ada6	e5 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ada8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ada9	08					.byte NN	;wh_Flags	dictionary flags
=44325					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.adaa					UM_Star:
.adaa	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.adac	b0 af		bcs $ad5d		bcs Throw_Stack_14
.adae	18		clc				clc		; tmp2= divsor-1
.adaf	b5 24		lda $24,x			lda DStack+0,x
.adb1	e9 00		sbc #$00			sbc #0
.adb3	85 16		sta $16				sta tmp2+0
.adb5	b5 25		lda $25,x			lda DStack+1,x
.adb7	e9 00		sbc #$00			sbc #0
.adb9	85 17		sta $17				sta tmp2+1
.adbb	90 2e		bcc $adeb			bcc _zero	; is divisor zero?
.adbd	a9 00		lda #$00			lda #0
.adbf	85 14		sta $14				sta tmp1
.adc1	86 18		stx $18				stx tmp3	; tested for exit from outer loop
.adc3	ca		dex				dex
.adc4	ca		dex				dex
.adc5					_outer_loop:
.adc5	a0 08		ldy #$08			ldy #8		; counter inner loop
.adc7	56 28		lsr $28,x			lsr DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.adc9					_inner_loop:
.adc9	90 0c		bcc $add7			bcc _no_add
.adcb	85 15		sta $15				sta tmp1+1	; save time, don't CLC
.adcd	a5 14		lda $14				lda tmp1
.adcf	65 16		adc $16				adc tmp2
.add1	85 14		sta $14				sta tmp1
.add3	a5 15		lda $15				lda tmp1+1
.add5	65 17		adc $17				adc tmp2+1
.add7					_no_add:
.add7	6a		ror a				ror
.add8	66 14		ror $14				ror tmp1
.adda	76 28		ror $28,x			ror DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.addc	88		dey				dey
.addd	d0 ea		bne $adc9			bne _inner_loop ; go back for one more shift?
.addf	e8		inx				inx
.ade0	e4 18		cpx $18				cpx tmp3
.ade2	d0 e1		bne $adc5			bne _outer_loop ; go back for eight more shifts?
.ade4	95 25		sta $25,x			sta DStack+1,x
.ade6	a5 14		lda $14				lda tmp1
.ade8	95 24		sta $24,x			sta DStack+0,x
.adea	60		rts				rts
.adeb	a9 00		lda #$00	_zero:		lda #0
.aded	95 26		sta $26,x			sta DStack+2,x
.adef	95 27		sta $27,x			sta DStack+3,x
.adf1	60		rts				rts
=72					CL	.var *-(WordListLink+wh_Xt)
=$adf2					en = *	; remember here
>ada8	48					.byte CL	;wh_CodeLength
>adf2	4d 2a				L1:	.text "M*"	;  name of word as a string, ending at wh_NameLastChar
>adf4	42					.byte (("M*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>adf5	25 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>adf7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>adf8	08					.byte NN	;wh_Flags	dictionary flags
=44404					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.adf9					M_Star:
.adf9	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.adfb	b0 6d		bcs $ae6a		bcs Throw_Stack_15
.adfd	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.adff	55 27		eor $27,x			eor DStack+3,x	; MSB of n2
.ae01	08		php				php
.ae02	20 33 c6	jsr $c633			jsr Abs
.ae05	20 25 cf	jsr $cf25			jsr Swap
.ae08	20 33 c6	jsr $c633			jsr Abs
.ae0b	20 aa ad	jsr $adaa			jsr UM_Star		; ( d )
.ae0e	28		plp				plp			; handle the sign
.ae0f	10 03		bpl $ae14			bpl +
.ae11	4c 4b c6	jmp $c64b			jmp DNegate
.ae14					+
=27					CL	.var *-(WordListLink+wh_Xt)
=$ae14					en = *	; remember here
>adf7	1b					.byte CL	;wh_CodeLength
.ae14	60		rts				rts
>ae15	2a				L1:	.text "*"	;  name of word as a string, ending at wh_NameLastChar
>ae16	41					.byte (("*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ae17	74 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae19	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae1a	00					.byte 0	;wh_Flags	dictionary flags
=44438					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae1b					Star:
.ae1b	20 aa ad	jsr $adaa			jsr UM_Star
.ae1e	e8		inx				inx		; UD>U	drop hi cell
.ae1f	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$ae20					en = *	; remember here
>ae19	05					.byte CL	;wh_CodeLength
.ae20	60		rts				rts
>ae21	55 4d 2f 4d 6f 64		L1:	.text "UM/Mod"	;  name of word as a string, ending at wh_NameLastChar
>ae27	86					.byte (("UM/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ae28	96 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae2a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae2b	08					.byte NN	;wh_Flags	dictionary flags
=44455					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae2c					UM_Slash_Mod:
.ae2c	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ae2e	b0 3a		bcs $ae6a		bcs Throw_Stack_15
.ae30	b5 24		lda $24,x			lda DStack+0,x		; catch division by zero
.ae32	15 25		ora $25,x			ora DStack+1,x
.ae34	f0 2f		beq $ae65			beq _DivByZero
.ae36	a0 10		ldy #$10			ldy #16			; for 16 bits
.ae38					_loop:
.ae38	36 28		rol $28,x			rol DStack+4,x		;   rotate low cell of dividend one bit left
.ae3a	36 29		rol $29,x			rol DStack+5,x
.ae3c	36 26		rol $26,x			rol DStack+2,x		;   rotate high cell of dividend one bit left
.ae3e	36 27		rol $27,x			rol DStack+3,x
.ae40	b0 0a		bcs $ae4c			bcs _subtract		;   overflow?
.ae42	b5 26		lda $26,x			lda DStack+2,x		;   dividend.hi >= divisor?
.ae44	d5 24		cmp $24,x			cmp DStack+0,x
.ae46	b5 27		lda $27,x			lda DStack+3,x
.ae48	f5 25		sbc $25,x			sbc DStack+1,x
.ae4a	90 0d		bcc $ae59			bcc _next
.ae4c	b5 26		lda $26,x	_subtract:	lda DStack+2,x		;   dividend.hi -= divisor
.ae4e	f5 24		sbc $24,x			sbc DStack+0,x
.ae50	95 26		sta $26,x			sta DStack+2,x
.ae52	b5 27		lda $27,x			lda DStack+3,x
.ae54	f5 25		sbc $25,x			sbc DStack+1,x
.ae56	95 27		sta $27,x			sta DStack+3,x
.ae58	38		sec				sec			;   it always fits
.ae59	88		dey		_next:		dey			;  next
.ae5a	d0 dc		bne $ae38			bne _loop
.ae5c	36 28		rol $28,x			rol DStack+4,x		; finish rotating quotient bit in
.ae5e	36 29		rol $29,x			rol DStack+5,x
.ae60	e8		inx				inx			; drop divisor
.ae61	e8		inx				inx
.ae62	4c 25 cf	jmp $cf25			jmp Swap
.ae65	a9 f6		lda #$f6	_DivByZero:	lda #$100+err_DivideBy0
.ae67	4c 33 b4	jmp $b433			jmp ThrowA
=62					CL	.var *-(WordListLink+wh_Xt)
=$ae6a					en = *	; remember here
>ae2a	3e					.byte CL	;wh_CodeLength
.ae6a	4c f8 b3	jmp $b3f8	Throw_Stack_15: jmp Throw_Stack
>ae6d	53 4d 2f 52 65 6d		L1:	.text "SM/Rem"	;  name of word as a string, ending at wh_NameLastChar
>ae73	a6					.byte (("SM/Rem"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ae74	a7 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae76	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae77	08					.byte NN	;wh_Flags	dictionary flags
=44531					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae78					SM_Slash_Rem:
.ae78	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ae7a	b0 ee		bcs $ae6a		bcs Throw_Stack_15
.ae7c	b5 27		lda $27,x			lda DStack+3,x
.ae7e	08		php				php
.ae7f	55 25		eor $25,x			eor DStack+1,x
.ae81	08		php				php
.ae82	20 33 c6	jsr $c633			jsr Abs
.ae85	e8		inx				inx		; pretend we pushed n1 to R
.ae86	e8		inx				inx
.ae87	20 68 c6	jsr $c668			jsr DAbs
.ae8a	ca		dex				dex
.ae8b	ca		dex				dex
.ae8c	20 2c ae	jsr $ae2c			jsr UM_Slash_Mod	; UM/MOD
.ae8f	28		plp				plp
.ae90	10 03		bpl $ae95			bpl +
.ae92	20 1a c6	jsr $c61a			jsr Negate
.ae95					+
.ae95	28		plp				plp
.ae96	10 07		bpl $ae9f			bpl _done
.ae98	e8		inx				inx		; pretend we pushed quotient to R
.ae99	e8		inx				inx
.ae9a	20 1a c6	jsr $c61a			jsr Negate
.ae9d	ca		dex				dex
.ae9e	ca		dex				dex
.ae9f					_done:
=39					CL	.var *-(WordListLink+wh_Xt)
=$ae9f					en = *	; remember here
>ae76	27					.byte CL	;wh_CodeLength
.ae9f	60		rts				rts
>aea0	46 4d 2f 4d 6f 64		L1:	.text "FM/Mod"	;  name of word as a string, ending at wh_NameLastChar
>aea6	86					.byte (("FM/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aea7	f3 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aea9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aeaa	08					.byte NN	;wh_Flags	dictionary flags
=44582					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aeab					FM_Slash_Mod:
.aeab	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.aead	b0 bb		bcs $ae6a		bcs Throw_Stack_15
.aeaf	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.aeb1	08		php				php		;  save sign
.aeb2	10 0a		bpl $aebe			bpl +
.aeb4	20 1a c6	jsr $c61a			jsr Negate	; NEGATE
.aeb7	e8		inx				inx
.aeb8	e8		inx				inx
.aeb9	20 4b c6	jsr $c64b			jsr DNegate	; DNEGATE
.aebc	ca		dex				dex
.aebd	ca		dex				dex
.aebe					+
.aebe	b5 27		lda $27,x			lda DStack+3,x	; MSB of high word of d
.aec0	10 0d		bpl $aecf			bpl +
.aec2	18		clc				clc
.aec3	b5 24		lda $24,x			lda DStack+0,x	; LSB of n1
.aec5	75 26		adc $26,x			adc DStack+2,x	; LSB of dh
.aec7	95 26		sta $26,x			sta DStack+2,x
.aec9	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.aecb	75 27		adc $27,x			adc DStack+3,x	; MSB of dh
.aecd	95 27		sta $27,x			sta DStack+3,x
.aecf					+
.aecf	20 2c ae	jsr $ae2c			jsr UM_Slash_Mod	; ( d n1 -- rem n2 )
.aed2	28		plp				plp
.aed3	10 07		bpl $aedc			bpl +
.aed5	e8		inx				inx		; pretend that we SWAP
.aed6	e8		inx				inx
.aed7	20 1a c6	jsr $c61a			jsr Negate
.aeda	ca		dex				dex
.aedb	ca		dex				dex
.aedc					+
=49					CL	.var *-(WordListLink+wh_Xt)
=$aedc					en = *	; remember here
>aea9	31					.byte CL	;wh_CodeLength
.aedc	60		rts				rts
>aedd	2f 4d 6f 64			L1:	.text "/Mod"	;  name of word as a string, ending at wh_NameLastChar
>aee1	84					.byte (("/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aee2	26 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aee4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aee5	08					.byte NN	;wh_Flags	dictionary flags
=44641					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aee6	20 07 cf	jsr $cf07	Slash_Mod:	jsr Dup			; ( n1 n_div n_div )
.aee9	a0 00		ldy #$00			ldy #0			; sign extend n1
.aeeb	b5 29		lda $29,x			lda DStack+5,x
.aeed	10 01		bpl $aef0			bpl +
.aeef	88		dey				dey
.aef0	94 26		sty $26,x	+		sty DStack+2,x
.aef2	94 27		sty $27,x			sty DStack+3,x		; ( d1 n_div )
.aef4	4c 78 ae	jmp $ae78			jmp SM_Slash_Rem	; SM/REM
=17					CL	.var *-(WordListLink+wh_Xt)
=$aef7					en = *	; remember here
>aee4	11					.byte CL	;wh_CodeLength
>aef7	2f				L1:	.text "/"	;  name of word as a string, ending at wh_NameLastChar
>aef8	e1					.byte (("/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aef9	61 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aefb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aefc	08					.byte NN	;wh_Flags	dictionary flags
=44664					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aefd	20 e6 ae	jsr $aee6	Slash:		jsr Slash_Mod
.af00	4c 22 c9	jmp $c922			jmp Nip		; Nip remainder
=6					CL	.var *-(WordListLink+wh_Xt)
=$af03					en = *	; remember here
>aefb	06					.byte CL	;wh_CodeLength
>af03	4d 6f 64			L1:	.text "Mod"	;  name of word as a string, ending at wh_NameLastChar
>af06	83					.byte (("Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af07	78 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af09	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af0a	00					.byte 0	;wh_Flags	dictionary flags
=44678					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af0b	20 e6 ae	jsr $aee6	Mod:		jsr Slash_Mod
.af0e	e8		inx				inx		; Drop quotient
.af0f	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$af10					en = *	; remember here
>af09	05					.byte CL	;wh_CodeLength
.af10	60		rts				rts
>af11	2a 2f 4d 6f 64			L1:	.text "*/Mod"	;  name of word as a string, ending at wh_NameLastChar
>af16	85					.byte (("*/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af17	86 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af19	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af1a	18					.byte UF+NN	;wh_Flags	dictionary flags
=44694					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af1b					Star_Slash_Mod:
.af1b	20 ee b3	jsr $b3ee			jsr underflow_3
.af1e	20 8c ce	jsr $ce8c			jsr To_R
.af21	20 f9 ad	jsr $adf9			jsr M_Star
.af24	20 ab ce	jsr $ceab			jsr R_From
.af27	4c 78 ae	jmp $ae78			jmp SM_Slash_Rem
=15					CL	.var *-(WordListLink+wh_Xt)
=$af2a					en = *	; remember here
>af19	0f					.byte CL	;wh_CodeLength
>af2a	2a 2f				L1:	.text "*/"	;  name of word as a string, ending at wh_NameLastChar
>af2c	e2					.byte (("*/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af2d	96 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af2f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af30	08					.byte NN	;wh_Flags	dictionary flags
=44716					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af31					Star_Slash:
.af31	20 1b af	jsr $af1b			jsr Star_Slash_Mod
.af34	4c 22 c9	jmp $c922			jmp Nip			; mod
=6					CL	.var *-(WordListLink+wh_Xt)
=$af37					en = *	; remember here
>af2f	06					.byte CL	;wh_CodeLength
>af37	4d 2a 2f			L1:	.text "M*/"	;  name of word as a string, ending at wh_NameLastChar
>af3a	e3					.byte (("M*/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af3b	ac ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af3d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af3e	08					.byte NN	;wh_Flags	dictionary flags
=44730					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af3f					m_star_slash:
.af3f	20 f3 b3	jsr $b3f3	                jsr underflow_4
.af42	b5 24		lda $24,x			lda DStack+0,x		; calc result sign
.af44	55 26		eor $26,x			eor DStack+2,x
.af46	55 28		eor $28,x			eor DStack+4,x
.af48	08		php				php
.af49	20 33 c6	jsr $c633	                jsr Abs			; Abs
.af4c	20 8c ce	jsr $ce8c	                jsr To_R		; >R		( d1 n1 ) ( R: sign abs(n2) )
.af4f	20 33 c6	jsr $c633	                jsr Abs			; Abs
.af52	20 8c ce	jsr $ce8c	                jsr To_R		; >R		( d1 ) ( R: sign abs(n2) abs(n1) )
.af55	20 68 c6	jsr $c668	                jsr DAbs		; DAbs		( abs(d1) ) ( R: sign abs(n2) abs(n1) )
.af58	20 25 cf	jsr $cf25	                jsr Swap		; Swap
.af5b	20 c7 ce	jsr $cec7	                jsr R_Fetch		; R@
.af5e	20 aa ad	jsr $adaa	                jsr UM_Star		; UM*
.af61	20 0b ce	jsr $ce0b	                jsr Rot			; Rot
.af64	20 ab ce	jsr $ceab	                jsr R_From		; R>
.af67	20 aa ad	jsr $adaa	                jsr UM_Star		; UM*
.af6a	20 0b ce	jsr $ce0b	                jsr Rot			; Rot
.af6d	20 16 ca	jsr $ca16	                jsr UMPlus		; 0 D+
.af70	20 c7 ce	jsr $cec7	                jsr R_Fetch		; R@
.af73	20 2c ae	jsr $ae2c	                jsr UM_Slash_Mod	; UM/Mod
.af76	20 31 ce	jsr $ce31	                jsr Not_Rot		; Rot Rot
.af79	20 ab ce	jsr $ceab	                jsr R_From		; R>
.af7c	20 2c ae	jsr $ae2c	                jsr UM_Slash_Mod	; UM/Mod
.af7f	20 22 c9	jsr $c922	                jsr Nip			; Swap Drop
.af82	20 25 cf	jsr $cf25	                jsr Swap		; Swap
.af85	28		plp				plp
.af86	10 03		bpl $af8b			bpl _rts		; ... 0< if ...
.af88	4c 4b c6	jmp $c64b	                jmp DNegate
.af8b	60		rts		_rts:		rts
=77					CL	.var *-(WordListLink+wh_Xt)
=$af8c					en = *	; remember here
>af3d	4d					.byte CL	;wh_CodeLength
>af8c	45 76 61 6c 75 61 74 65		L1:	.text "Evaluate"	;  name of word as a string, ending at wh_NameLastChar
>af94	a8					.byte (("Evaluate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af95	ba ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af97	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af98	08					.byte NN	;wh_Flags	dictionary flags
=44820					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af99					Evaluate:
.af99	18		clc				clc			; signal to zero BLK.
.af9a					load_evaluate:
.af9a	ad 0d 03	lda $030d			lda BlkV+1	; Save the current value of BLK on the return stack.
.af9d	48		pha				pha
.af9e	ad 0c 03	lda $030c			lda BlkV+0
.afa1	48		pha				pha
.afa2	b0 08		bcs $afac			bcs +		; See if we should zero BLK.
.afa4	a9 00		lda #$00			lda #0		; Set BLK to zero.
.afa6	8d 0c 03	sta $030c			sta BlkV+0
.afa9	8d 0d 03	sta $030d			sta BlkV+1
.afac					+
.afac	20 b3 c3	jsr $c3b3			jsr Input_To_R	; Save the input state to the Return Stack
.afaf	a9 ff		lda #$ff			lda #$ff	; SOURCE-ID= -1
.afb1	85 02		sta $02				sta insrc+0
.afb3	85 03		sta $03				sta insrc+1
.afb5	a9 00		lda #$00			lda #0		; >IN= zero
.afb7	85 08		sta $08				sta toin+0
.afb9	85 09		sta $09				sta toin+1
.afbb	20 aa b3	jsr $b3aa			jsr PopYA	; ciblen= string length (u)
.afbe	85 06		sta $06				sta ciblen+0
.afc0	84 07		sty $07				sty ciblen+1
.afc2	20 aa b3	jsr $b3aa			jsr PopYA	; cib= string addr
.afc5	85 04		sta $04				sta cib+0
.afc7	84 05		sty $05				sty cib+1
.afc9	20 ed b4	jsr $b4ed			jsr interpret	; ( -- )
.afcc	20 d5 c3	jsr $c3d5			jsr R_To_Input	; restore input state
.afcf	68		pla				pla		; Restore BLK from the return stack.
.afd0	8d 0c 03	sta $030c			sta BlkV+0
.afd3	68		pla				pla
.afd4	8d 0d 03	sta $030d			sta BlkV+1
=62					CL	.var *-(WordListLink+wh_Xt)
=$afd7					en = *	; remember here
>af97	3e					.byte CL	;wh_CodeLength
.afd7	60		rts				rts
>afd8	3e 4e 75 6d 62 65 72		L1:	.text ">Number"	;  name of word as a string, ending at wh_NameLastChar
>afdf	47					.byte ((">Number"[-1]&7)<<5)+(*-L1)	;wh_HNL
>afe0	14 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>afe2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>afe3	18					.byte UF+NN	;wh_Flags	dictionary flags
=44895					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.afe4					To_Number:
.afe4	20 f3 b3	jsr $b3f3			jsr underflow_4
.afe7	b5 24		lda $24,x			lda DStack+0,x		; no chars left?
.afe9	f0 72		beq $b05d			beq _done
.afeb					_Char_loop:
.afeb	a1 26		lda ($26,x)			lda (DStack+2,x)		; Get next character
.afed	c9 30		cmp #$30			cmp #'0'		; convert to value (Digit_Question)
.afef	90 6c		bcc $b05d			bcc _done
.aff1	c9 3a		cmp #$3a			cmp #'9'+1
.aff3	90 08		bcc $affd			bcc _digit
.aff5	29 df		and #$df			and #$df		;   ASCII uppercase
.aff7	c9 41		cmp #$41			cmp #'A'
.aff9	90 62		bcc $b05d			bcc _done
.affb	e9 07		sbc #$07			sbc #7 ;'A'-'0'-10	;   to make 'A'=10 below
.affd	38		sec		_digit:		sec
.affe	e9 30		sbc #$30			sbc #'0'
.b000	cd 00 03	cmp $0300			cmp base		; must be < base
.b003	b0 58		bcs $b05d			bcs _done
.b005	48		pha				pha			; Save char value
.b006	20 f5 c4	jsr $c4f5			jsr Two_Over		;   copy ud to work (multiplicand)
.b009	a9 00		lda #$00			lda #0			;   zero ud (product)
.b00b	95 2c		sta $2c,x			sta DStack+8,x
.b00d	95 2d		sta $2d,x			sta DStack+9,x
.b00f	95 2e		sta $2e,x			sta DStack+10,x
.b011	95 2f		sta $2f,x			sta DStack+11,x
.b013	ad 00 03	lda $0300			lda base		;   get multiplier
.b016	d0 23		bne $b03b			bne _Mul_Test
.b018	48		pha		_Mul_Add:	pha			;   save multiplier
.b019	18		clc				clc			;   ud += work
.b01a	b5 26		lda $26,x			lda DStack+2,x
.b01c	75 2e		adc $2e,x			adc DStack+10,x
.b01e	95 2e		sta $2e,x			sta DStack+10,x
.b020	b5 27		lda $27,x			lda DStack+3,x
.b022	75 2f		adc $2f,x			adc DStack+11,x
.b024	95 2f		sta $2f,x			sta DStack+11,x
.b026	b5 24		lda $24,x			lda DStack+0,x
.b028	75 2c		adc $2c,x			adc DStack+8,x
.b02a	95 2c		sta $2c,x			sta DStack+8,x
.b02c	b5 25		lda $25,x			lda DStack+1,x
.b02e	75 2d		adc $2d,x			adc DStack+9,x
.b030	95 2d		sta $2d,x			sta DStack+9,x
.b032	68		pla				pla			;   restore multiplier
.b033	16 26		asl $26,x	_Mul_Shift:	asl DStack+2,x		;   work <<= 1
.b035	36 27		rol $27,x			rol DStack+3,x
.b037	36 24		rol $24,x			rol DStack+0,x
.b039	36 25		rol $25,x			rol DStack+1,x
.b03b	4a		lsr a		_Mul_Test:	lsr a			;   shift multiplier
.b03c	b0 da		bcs $b018			bcs _Mul_Add
.b03e	d0 f3		bne $b033			bne _Mul_Shift
.b040	e8		inx				inx			;   2Drop work
.b041	e8		inx				inx
.b042	e8		inx				inx
.b043	e8		inx				inx
.b044	68		pla				pla			; recover value
.b045	18		clc				clc			; add to ud
.b046	75 2a		adc $2a,x			adc DStack+6,x
.b048	95 2a		sta $2a,x			sta DStack+6,x
.b04a	90 0a		bcc $b056			bcc +
.b04c	f6 2b		inc $2b,x			inc DStack+7,x
.b04e	d0 06		bne $b056			bne +
.b050	f6 28		inc $28,x			inc DStack+4,x
.b052	d0 02		bne $b056			bne +
.b054	f6 29		inc $29,x			inc DStack+5,x
.b056					+
.b056	20 07 ca	jsr $ca07			jsr NOS_One_Plus	; consume the char
.b059	d6 24		dec $24,x			dec DStack+0,x
.b05b	d0 8e		bne $afeb			bne _Char_loop
.b05d					_done:
=121					CL	.var *-(WordListLink+wh_Xt)
=$b05d					en = *	; remember here
>afe2	79					.byte CL	;wh_CodeLength
.b05d	60		rts				rts
>b05e	4e 75 6d 62 65 72		L1:	.text "Number"	;  name of word as a string, ending at wh_NameLastChar
>b064	46					.byte (("Number"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b065	5f af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b067	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b068	18					.byte UF+NN	;wh_Flags	dictionary flags
=45028					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b069					Number:
.b069	20 e9 b3	jsr $b3e9			jsr underflow_2
.b06c	a9 00		lda #$00			lda #0
.b06e	85 1a		sta $1a				sta tmp4+0	; flag for double
.b070	85 1b		sta $1b				sta tmp4+1	; flag for minus
.b072	ad 00 03	lda $0300			lda base
.b075	48		pha				pha
.b076	20 61 cc	jsr $cc61			jsr Two_dup		; ( addr u addr u )
.b079	a1 26		lda ($26,x)			lda (DStack+2,x)	; get 1st char
.b07b	20 3d b1	jsr $b13d			jsr _MinusCheck		; a minus sign?
.b07e	a0 0a		ldy #$0a			ldy #10			; decimal?
.b080	c9 23		cmp #$23			cmp #'#'
.b082	f0 35		beq $b0b9			beq _base_changed
.b084	a0 10		ldy #$10			ldy #16			; hex?
.b086	c9 24		cmp #$24			cmp #'$'
.b088	f0 2f		beq $b0b9			beq _base_changed
.b08a	a0 02		ldy #$02			ldy #2			; binary?
.b08c	c9 25		cmp #$25			cmp #'%'
.b08e	f0 29		beq $b0b9			beq _base_changed
.b090	c9 27		cmp #$27			cmp #$27		; ASCII for "'"
.b092	d0 2f		bne $b0c3			bne _check_dot
.b094	b5 24		lda $24,x			lda DStack+0,x	; length=3 ?
.b096	c9 03		cmp #$03			cmp #3
.b098	d0 1c		bne $b0b6			bne _not_a_char
.b09a	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b09c	85 1c		sta $1c				sta tmp5
.b09e	b5 27		lda $27,x			lda DStack+3,x
.b0a0	85 1d		sta $1d				sta tmp5+1
.b0a2	a0 02		ldy #$02			ldy #2
.b0a4	b1 1c		lda ($1c),y			lda (tmp5),y
.b0a6	c9 27		cmp #$27			cmp #$27	; ASCII for "'"
.b0a8	d0 0c		bne $b0b6			bne _not_a_char
.b0aa	88		dey				dey		; The char we want is between the single quotes.
.b0ab	b1 1c		lda ($1c),y			lda (tmp5),y
.b0ad	95 26		sta $26,x			sta DStack+2,x
.b0af	a9 00		lda #$00			lda #0
.b0b1	95 27		sta $27,x			sta DStack+3,x
.b0b3	4c 12 b1	jmp $b112			jmp _drop_original_string ; Single flag will drop the TOS for us.
.b0b6					_not_a_char:
.b0b6	4c ef b0	jmp $b0ef			jmp _number_error
.b0b9					_base_changed:
.b0b9	8c 00 03	sty $0300			sty base	; Switch to the new base
.b0bc	20 07 ca	jsr $ca07			jsr NOS_One_Plus ; start one character later
.b0bf	d6 24		dec $24,x			dec DStack+0,x	; decrease string length by one
.b0c1	a1 26		lda ($26,x)			lda (DStack+2,x) ; Load the first char again
.b0c3					_check_dot:
.b0c3	20 3d b1	jsr $b13d			jsr _MinusCheck
.b0c6	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b0c8	85 1c		sta $1c				sta tmp5
.b0ca	b5 27		lda $27,x			lda DStack+3,x
.b0cc	85 1d		sta $1d				sta tmp5+1
.b0ce	b4 24		ldy $24,x			ldy DStack+0,x	; Y now points to the first character after the string,
.b0d0	88		dey				dey		; but we need the last character
.b0d1	b1 1c		lda ($1c),y			lda (tmp5),y
.b0d3	c9 2e		cmp #$2e			cmp #'.'
.b0d5	d0 04		bne $b0db			bne _main
.b0d7	c6 1a		dec $1a				dec tmp4	; Flag the fact
.b0d9	d6 24		dec $24,x			dec DStack+0,x	; reduce string length by one
.b0db					_main:
.b0db	20 61 cc	jsr $cc61			jsr Two_Dup
.b0de	a9 00		lda #$00			lda #0
.b0e0	95 28		sta $28,x			sta DStack+4,x	; clear ud
.b0e2	95 29		sta $29,x			sta DStack+5,x
.b0e4	95 2a		sta $2a,x			sta DStack+6,x
.b0e6	95 2b		sta $2b,x			sta DStack+7,x
.b0e8	20 e4 af	jsr $afe4			jsr To_Number	; ( ud addr u -- ud addr u )
.b0eb	b5 24		lda $24,x			lda DStack+0,x
.b0ed	f0 1f		beq $b10e			beq _all_converted
.b0ef					_number_error:
.b0ef	20 c1 c4	jsr $c4c1			jsr Two_drop	; >NUMBER modified addr u
.b0f2	20 c1 c4	jsr $c4c1			jsr Two_drop	; ud   (partially converted number)
.b0f5	a9 3e		lda #$3e			lda #'>'	; print the unknown
.b0f7	20 75 cd	jsr $cd75			jsr Emit_A	; word using the original addr u we saved at the beginning.
.b0fa	20 8f cd	jsr $cd8f			jsr Type
.b0fd	a9 3c		lda #$3c			lda #'<'
.b0ff	20 75 cd	jsr $cd75			jsr Emit_A
.b102	20 82 cd	jsr $cd82			jsr Space
.b105	68		pla				pla		; restore base
.b106	8d 00 03	sta $0300			sta base
.b109	a9 f3		lda #$f3			lda #$100+err_UndefinedWord
.b10b	4c 33 b4	jmp $b433			jmp ThrowA
.b10e					_all_converted:
.b10e	e8		inx				inx		; Drop the current addr u
.b10f	e8		inx				inx
.b110	e8		inx				inx
.b111	e8		inx				inx
.b112					_drop_original_string:
.b112	20 b7 bf	jsr $bfb7			jsr TwoNip	 ; Drop the original addr u
.b115	a5 1a		lda $1a				lda tmp4	; flag for double
.b117	f0 10		beq $b129			beq _single
.b119	a9 20		lda #$20			lda #%00100000
.b11b	05 0c		ora $0c				ora status
.b11d	85 0c		sta $0c				sta status
.b11f	a5 1b		lda $1b				lda tmp4+1
.b121	f0 15		beq $b138			beq _done	; no minus, all done
.b123	20 4b c6	jsr $c64b			jsr DNegate
.b126	4c 38 b1	jmp $b138			jmp _done
.b129					_single:
.b129	e8		inx				inx		; convert ud to u
.b12a	e8		inx				inx
.b12b	a9 df		lda #$df			lda #$ff-%00100000
.b12d	25 0c		and $0c				and status
.b12f	85 0c		sta $0c				sta status
.b131	a5 1b		lda $1b				lda tmp4+1
.b133	f0 03		beq $b138			beq _done	; no minus, all done
.b135	20 1a c6	jsr $c61a			jsr Negate
.b138					_done:
.b138	68		pla				pla
.b139	8d 00 03	sta $0300			sta base
=211					CL	.var *-(WordListLink+wh_Xt)
=$b13c					en = *	; remember here
>b067	d3					.byte CL	;wh_CodeLength
.b13c	60		rts				rts
.b13d					_MinusCheck:
.b13d	c9 2d		cmp #$2d			cmp #'-'		; a minus sign?
.b13f	d0 09		bne $b14a			bne +
.b141	c6 1b		dec $1b				dec tmp4+1		; set flag
.b143	20 07 ca	jsr $ca07			jsr NOS_One_Plus	; start one character later
.b146	d6 24		dec $24,x			dec DStack+0,x		; decrease string length by one
.b148	a1 26		lda ($26,x)			lda (DStack+2,x)	; get next char
.b14a	60		rts		+		rts
>b14b	48 65 78			L1:	.text "Hex"	;  name of word as a string, ending at wh_NameLastChar
>b14e	03					.byte (("Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b14f	e4 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b151	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b152	08					.byte NN	;wh_Flags	dictionary flags
=45262					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b153	a9 10		lda #$10	Hex:		lda #16
.b155	d0 0e		bne $b165			bne decimal_a
=4					CL	.var *-(WordListLink+wh_Xt)
=$b157					en = *	; remember here
>b151	04					.byte CL	;wh_CodeLength
>b157	44 65 63 69 6d 61 6c		L1:	.text "Decimal"	;  name of word as a string, ending at wh_NameLastChar
>b15e	87					.byte (("Decimal"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b15f	ce b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b161	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b162	00					.byte 0	;wh_Flags	dictionary flags
=45278					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b163	a9 0a		lda #$0a	Decimal:	lda #10
.b165	8d 00 03	sta $0300	decimal_a:	sta base+0
.b168	a9 00		lda #$00			lda #0
.b16a	8d 01 03	sta $0301			sta base+1		; paranoid
=10					CL	.var *-(WordListLink+wh_Xt)
=$b16d					en = *	; remember here
>b161	0a					.byte CL	;wh_CodeLength
.b16d	60		rts				rts
>b16e	43 6f 75 6e 74			L1:	.text "Count"	;  name of word as a string, ending at wh_NameLastChar
>b173	85					.byte (("Count"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b174	de b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b176	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b177	18					.byte UF+NN	;wh_Flags	dictionary flags
=45299					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b178					Count:
.b178	20 d4 b3	jsr $b3d4			jsr underflow_1
.b17b	a1 24		lda ($24,x)			lda (DStack+0,x)	; A= number of characters
.b17d	f6 24		inc $24,x			inc DStack+0,x		; move start address up by one
.b17f	d0 02		bne $b183			bne +
.b181	f6 25		inc $25,x			inc DStack+1,x
.b183					+
.b183	4c a6 b7	jmp $b7a6			jmp PushZA		; push number of characters, return
=14					CL	.var *-(WordListLink+wh_Xt)
=$b186					en = *	; remember here
>b176	0e					.byte CL	;wh_CodeLength
>0743					DoLeave  .word ?	; head of leave addr patch chain
>0745					DoStkIndex: .byte ?
>0746					DoIndexL: .fill DoStkDim
>074e					DoIndexH: .fill DoStkDim
>0756					DoFufaL:  .fill DoStkDim
>075e					DoFufaH:  .fill DoStkDim
>b186	3f 44 6f			L1:	.text "?Do"	;  name of word as a string, ending at wh_NameLastChar
>b189	e3					.byte (("?Do"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b18a	f3 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b18c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b18d	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45321					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b18e					Question_Do:
.b18e	20 e9 b2	jsr $b2e9			jsr Do_Leave_Init
.b191	a9 a5		lda #$a5			lda #<_runtime
.b193	a0 b1		ldy #$b1			ldy #>_runtime
.b195	20 e5 cc	jsr $cce5			jsr Jsr_Comma_YA	; compile JSR _runtime
.b198	a9 d0		lda #$d0			lda #$d0		; compile BNE *+5
.b19a	a0 03		ldy #$03			ldy #3
.b19c	20 c0 cc	jsr $ccc0			jsr Comma_YA
.b19f	20 cc b2	jsr $b2cc			jsr Leave		; compile JMP leave
.b1a2	4c c3 b1	jmp $b1c3			jmp Do_8		; finish
=23					CL	.var *-(WordListLink+wh_Xt)
=$b1a5					en = *	; remember here
>b18c	17					.byte CL	;wh_CodeLength
.b1a5					_runtime:
.b1a5	20 cb b1	jsr $b1cb			jsr Do_Runtime	; start normally (we assume TOS!=NOS)
.b1a8	a5 12		lda $12				lda DoIndex+0	; Are TOS and NOS equal?
.b1aa	f0 01		beq $b1ad			beq _2
.b1ac	60		rts				rts		; return Z=0 to signal continue
.b1ad	a5 13		lda $13		_2:		lda DoIndex+1
.b1af	c9 80		cmp #$80			cmp #$80
.b1b1	60		rts				rts		; return Z
>b1b2	44 6f				L1:	.text "Do"	;  name of word as a string, ending at wh_NameLastChar
>b1b4	e2					.byte (("Do"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b1b5	09 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b1b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b1b8	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45364					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b1b9					Do:
.b1b9	20 e9 b2	jsr $b2e9			jsr Do_Leave_Init
.b1bc	a9 cb		lda #$cb			lda #<Do_runtime
.b1be	a0 b1		ldy #$b1			ldy #>Do_runtime
.b1c0	20 e5 cc	jsr $cce5			jsr Jsr_Comma_YA	; compile JSR _runtime
.b1c3	20 c9 c9	jsr $c9c9	Do_8:		jsr Here		; remember loop body start addr
.b1c6	a9 b9		lda #$b9			lda #<Do		; identifier
.b1c8	4c a6 b7	jmp $b7a6			jmp PushZA
=18					CL	.var *-(WordListLink+wh_Xt)
=$b1cb					en = *	; remember here
>b1b7	12					.byte CL	;wh_CodeLength
.b1cb					Do_Runtime:
.b1cb	ce 45 07	dec $0745			dec DoStkIndex		; alloc DO stack entry
.b1ce	ac 45 07	ldy $0745			ldy DoStkIndex
.b1d1	30 2d		bmi $b200			bmi _TooDeep
.b1d3	a5 12		lda $12				lda DoIndex+0		; save previous DoIndex
.b1d5	99 46 07	sta $0746,y			sta DoIndexL,y
.b1d8	a5 13		lda $13				lda DoIndex+1
.b1da	99 4e 07	sta $074e,y			sta DoIndexH,y
.b1dd	38		sec				sec			; fudge factor (FUFA)= $8000 - limit
.b1de	a9 00		lda #$00			lda #0			;   the number that will trip the overflow flag
.b1e0	f5 26		sbc $26,x			sbc DStack+2,x
.b1e2	99 56 07	sta $0756,y			sta DoFuFaL,y
.b1e5	a9 80		lda #$80			lda #$80
.b1e7	f5 27		sbc $27,x			sbc DStack+3,x
.b1e9	99 5e 07	sta $075e,y			sta DoFuFaH,y
.b1ec	18		clc				clc			; index= FUFA plus original index
.b1ed	b5 24		lda $24,x			lda DStack+0,x
.b1ef	79 56 07	adc $0756,y			adc DoFuFaL,y
.b1f2	85 12		sta $12				sta DoIndex+0
.b1f4	b5 25		lda $25,x			lda DStack+1,x
.b1f6	79 5e 07	adc $075e,y			adc DoFuFaH,y
.b1f9	85 13		sta $13				sta DoIndex+1
.b1fb	e8		inx				inx			; Drop orig index
.b1fc	e8		inx				inx
.b1fd	e8		inx				inx			; Drop orig limit
.b1fe	e8		inx				inx
.b1ff	60		rts				rts			; return
.b200	a9 f9		lda #$f9	_TooDeep:	lda #$100+err_DoLoop_TooDeep
.b202	20 33 b4	jsr $b433			jsr ThrowA
>b205	4c 6f 6f 70			L1:	.text "Loop"	;  name of word as a string, ending at wh_NameLastChar
>b209	04					.byte (("Loop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b20a	34 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b20c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b20d	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45449					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b20e					Loop:
.b20e	a9 15		lda #$15			lda #<_Runtime
.b210	a0 b2		ldy #$b2			ldy #>_Runtime
.b212	4c 31 b2	jmp $b231			jmp Plus_Loop_5
=7					CL	.var *-(WordListLink+wh_Xt)
=$b215					en = *	; remember here
>b20c	07					.byte CL	;wh_CodeLength
.b215					_Runtime:
.b215	e6 12		inc $12				inc DoIndex+0
.b217	f0 02		beq $b21b			beq _Runtime2
.b219	b8		clv				clv			; return V=0 to signal loop back
.b21a	60		rts				rts
.b21b	18		clc		_Runtime2:	clc
.b21c	a5 13		lda $13				lda DoIndex+1		; handle carry from lo byte
.b21e	69 01		adc #$01			adc #1
.b220	85 13		sta $13				sta DoIndex+1
.b222	60		rts				rts			; return V to signal loop back
>b223	2b 4c 6f 6f 70			L1:	.text "+Loop"	;  name of word as a string, ending at wh_NameLastChar
>b228	05					.byte (("+Loop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b229	89 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b22b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b22c	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45480					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b22d					Plus_Loop:
.b22d	a9 3b		lda #$3b			lda #<Plus_Loop_Runtime
.b22f	a0 b2		ldy #$b2			ldy #>Plus_Loop_Runtime
.b231	20 52 b2	jsr $b252	Plus_Loop_5:	jsr Loop_End		; compile JSR _runtime, BVC back
.b234	a9 b1		lda #$b1			lda #<Unloop
.b236	a0 b2		ldy #$b2			ldy #>Unloop
.b238	4c 5a b6	jmp $b65a			jmp Compile_Comma_WithNT_YA ; compile JSR Unloop, return
=14					CL	.var *-(WordListLink+wh_Xt)
=$b23b					en = *	; remember here
>b22b	0e					.byte CL	;wh_CodeLength
.b23b					Plus_Loop_Runtime:
.b23b	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b23d	b0 10		bcs $b24f		bcs Throw_Stack_12
.b23f	18		clc				clc			; DoIndex += step
.b240	b5 24		lda $24,x			lda DStack+0,x
.b242	65 12		adc $12				adc DoIndex+0
.b244	85 12		sta $12				sta DoIndex+0
.b246	b5 25		lda $25,x			lda DStack+1,x
.b248	65 13		adc $13				adc DoIndex+1
.b24a	85 13		sta $13				sta DoIndex+1
.b24c	e8		inx				inx			; Drop step
.b24d	e8		inx				inx
.b24e	60		rts				rts			; return V=0 to signal loop back
.b24f	4c f8 b3	jmp $b3f8	Throw_Stack_12: jmp Throw_Stack
.b252					Loop_End:
.b252	20 e5 cc	jsr $cce5			jsr Jsr_Comma_YA	; compile JSR runtime
.b255	a9 b9		lda #$b9			lda #<Do		; check id
.b257	20 9a b2	jsr $b29a	Loop_End_3:	jsr QPairCtlA
.b25a	a9 50		lda #$50			lda #$50		; compile BVC body
.b25c	20 6c a6	jsr $a66c			jsr Branch_Comma
.b25f	ac 43 07	ldy $0743			ldy DoLeave+0		; for each leave addr entry
.b262	ad 44 07	lda $0744			lda DoLeave+1
.b265	f0 1b		beq $b282			beq _p9
.b267	84 14		sty $14		_p1:		sty tmp1+0		;   save entry pointer
.b269	85 15		sta $15				sta tmp1+1
.b26b	a0 01		ldy #$01			ldy #1			;   save link
.b26d	b1 14		lda ($14),y			lda (tmp1),y
.b26f	48		pha				pha
.b270	88		dey				dey
.b271	b1 14		lda ($14),y			lda (tmp1),y
.b273	48		pha				pha
.b274	a5 00		lda $00				lda cp+0		;   patch addr
.b276	91 14		sta ($14),y			sta (tmp1),y
.b278	a5 01		lda $01				lda cp+1
.b27a	c8		iny				iny
.b27b	91 14		sta ($14),y			sta (tmp1),y
.b27d	68		pla				pla			;   get saved link
.b27e	a8		tay				tay
.b27f	68		pla				pla
.b280	d0 e5		bne $b267			bne _p1
.b282					_p9:
.b282	20 aa b3	jsr $b3aa			jsr PopYA		; restore DoLeave
.b285	8d 43 07	sta $0743			sta DoLeave+0
.b288	8c 44 07	sty $0744			sty DoLeave+1
.b28b	60		rts				rts
>b28c	3f 50 61 69 72 43 74 6c		L1:	.text "?PairCtlA"	;  name of word as a string, ending at wh_NameLastChar
>b294	41
>b295	29					.byte (("?PairCtlA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b296	a8 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b298	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b299	08					.byte NN	;wh_Flags	dictionary flags
=45589					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b29a	d5 24		cmp $24,x	QPairCtlA:	cmp DStack+0,x
.b29c	f0 05		beq $b2a3			beq _8
.b29e	a9 ea		lda #$ea			lda #$100+err_ControlMismatch
.b2a0	4c 33 b4	jmp $b433			jmp ThrowA
.b2a3	e8		inx		_8:		inx
.b2a4	e8		inx				inx	; Drop n
.b2a5	60		rts				rts
=12					CL	.var *-(WordListLink+wh_Xt)
=$b2a6					en = *	; remember here
>b298	0c					.byte CL	;wh_CodeLength
>b2a6	55 6e 6c 6f 6f 70		L1:	.text "Unloop"	;  name of word as a string, ending at wh_NameLastChar
>b2ac	06					.byte (("Unloop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b2ad	15 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2af	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2b0	01					.byte CO	;wh_Flags	dictionary flags
=45612					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2b1					Unloop:
.b2b1	ac 45 07	ldy $0745			ldy DoStkIndex
.b2b4	b9 46 07	lda $0746,y			lda DoIndexL,y	; restore Index
.b2b7	85 12		sta $12				sta DoIndex+0
.b2b9	b9 4e 07	lda $074e,y			lda DoIndexH,y
.b2bc	85 13		sta $13				sta DoIndex+1
.b2be	ee 45 07	inc $0745			inc DoStkIndex	; drop Do stack entry
=16					CL	.var *-(WordListLink+wh_Xt)
=$b2c1					en = *	; remember here
>b2af	10					.byte CL	;wh_CodeLength
.b2c1	60		rts				rts
>b2c2	4c 65 61 76 65			L1:	.text "Leave"	;  name of word as a string, ending at wh_NameLastChar
>b2c7	a5					.byte (("Leave"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b2c8	2c b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2ca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2cb	0d					.byte IM+NN+CO	;wh_Flags	dictionary flags
=45639					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2cc					Leave:
.b2cc	a9 4c		lda #$4c			lda #$4c	; JMP abs
.b2ce	20 a6 cc	jsr $cca6			jsr C_Comma_A
.b2d1	a5 01		lda $01				lda cp+1	; save cp
.b2d3	48		pha				pha
.b2d4	a5 00		lda $00				lda cp+0
.b2d6	48		pha				pha
.b2d7	ad 43 07	lda $0743			lda DoLeave+0	; compile DoLeave link, patched later
.b2da	ac 44 07	ldy $0744			ldy DoLeave+1
.b2dd	20 c0 cc	jsr $ccc0			jsr Comma_YA
.b2e0	68		pla				pla		; update DoLeave
.b2e1	8d 43 07	sta $0743			sta DoLeave+0
.b2e4	68		pla				pla
.b2e5	8d 44 07	sta $0744			sta DoLeave+1
=28					CL	.var *-(WordListLink+wh_Xt)
=$b2e8					en = *	; remember here
>b2ca	1c					.byte CL	;wh_CodeLength
.b2e8	60		rts				rts
.b2e9					Do_Leave_Init:
.b2e9	ad 43 07	lda $0743			lda DoLeave+0
.b2ec	ac 44 07	ldy $0744			ldy DoLeave+1
.b2ef	20 64 b7	jsr $b764			jsr PushYA	; save old leave head
.b2f2	a9 00		lda #$00			lda #0		; init
.b2f4	8d 44 07	sta $0744			sta DoLeave+1
.b2f7	60		rts				rts
>b2f8	49				L1:	.text "I"	;  name of word as a string, ending at wh_NameLastChar
>b2f9	21					.byte (("I"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b2fa	47 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2fd	01					.byte CO	;wh_Flags	dictionary flags
=45689					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2fe	ac 45 07	ldy $0745	I:		ldy DoStkIndex
.b301	ca		dex				dex
.b302	ca		dex				dex
.b303	38		sec				sec		; n= fudged index - fudge factor (FUFA)
.b304	a5 12		lda $12				lda DoIndex+0
.b306	f9 56 07	sbc $0756,y			sbc DoFuFaL,y
.b309	95 24		sta $24,x			sta DStack+0,x
.b30b	a5 13		lda $13				lda DoIndex+1
.b30d	f9 5e 07	sbc $075e,y			sbc DoFuFaH,y
.b310	95 25		sta $25,x			sta DStack+1,x
=20					CL	.var *-(WordListLink+wh_Xt)
=$b312					en = *	; remember here
>b2fc	14					.byte CL	;wh_CodeLength
.b312	60		rts				rts
>b313	4a				L1:	.text "J"	;  name of word as a string, ending at wh_NameLastChar
>b314	41					.byte (("J"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b315	79 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b317	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b318	01					.byte CO	;wh_Flags	dictionary flags
=45716					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b319	ac 45 07	ldy $0745	J:		ldy DoStkIndex
.b31c	ca		dex				dex
.b31d	ca		dex				dex
.b31e	38		sec				sec		; n= 2nd fudged index - 2nd fudge factor (FUFA)
.b31f	b9 46 07	lda $0746,y			lda DoIndexL+0,y	; LSB
.b322	f9 57 07	sbc $0757,y			sbc DoFufaL+1,y
.b325	95 24		sta $24,x			sta DStack+0,x
.b327	b9 4e 07	lda $074e,y			lda DoIndexH+0,y	; MSB
.b32a	f9 5f 07	sbc $075f,y			sbc DoFufaH+1,y
.b32d	95 25		sta $25,x			sta DStack+1,x
=22					CL	.var *-(WordListLink+wh_Xt)
=$b32f					en = *	; remember here
>b317	16					.byte CL	;wh_CodeLength
.b32f	60		rts				rts
>b330	52 65 63 75 72 73 65		L1:	.text "Recurse"	;  name of word as a string, ending at wh_NameLastChar
>b337	a7					.byte (("Recurse"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b338	94 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b33a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b33b	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45751					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b33c					Recurse:
.b33c	a5 0e		lda $0e				lda workword+0
.b33e	a4 0f		ldy $0f				ldy workword+1
.b340	20 64 b7	jsr $b764			jsr PushYA
.b343	24 0c		bit $0c				bit status		; does WORKWORD contain xt or nt?
.b345	50 03		bvc $b34a			bvc +
.b347	20 9c bd	jsr $bd9c			jsr Name_To_Int		; convert nt to xt
.b34a					+
.b34a	4c e2 cc	jmp $cce2			jmp Jsr_Comma		; compile JSR xt, return
=17					CL	.var *-(WordListLink+wh_Xt)
=$b34d					en = *	; remember here
>b33a	11					.byte CL	;wh_CodeLength
>b34d	41 62 6f 72 74 22		L1:	.text 'Abort"'	;  name of word as a string, ending at wh_NameLastChar
>b353	46					.byte (('Abort"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>b354	b7 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b356	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b357	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45779					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b358					Abort_Quote:
.b358	20 ce b8	jsr $b8ce			jsr S_Quote		; compile the string literal
.b35b	a0 b3		ldy #$b3			ldy #>_runtime		; compile JSR runtime, return
.b35d	a9 62		lda #$62			lda #<_runtime
.b35f	4c e5 cc	jmp $cce5			jmp Jsr_Comma_YA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b362					en = *	; remember here
>b356	0a					.byte CL	;wh_CodeLength
.b362					_runtime:
.b362	b5 28		lda $28,x			lda DStack+4,x
.b364	15 29		ora $29,x			ora DStack+5,x
.b366	d0 03		bne $b36b			bne _do_abort	; true?
.b368	4c 12 ad	jmp $ad12			jmp ThreeDrop	; Drop three entries from the Data Stack
.b36b					_do_abort:
.b36b	20 8f cd	jsr $cd8f			jsr Type	; print string
.b36e	20 e2 aa	jsr $aae2			jsr CR		; We follow Gforth in going to a new line
.b371	a9 fe		lda #$fe			lda #$100+err_AbortQuote
.b373	4c 33 b4	jmp $b433			jmp ThrowA
>b376	41 62 6f 72 74			L1:	.text "Abort"	;  name of word as a string, ending at wh_NameLastChar
>b37b	85					.byte (("Abort"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b37c	d3 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b37e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b37f	08					.byte NN	;wh_Flags	dictionary flags
=45819					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b380	a9 ff		lda #$ff	Abort:		lda #$100+err_Abort
.b382	4c 33 b4	jmp $b433			jmp ThrowA
=5					CL	.var *-(WordListLink+wh_Xt)
=$b385					en = *	; remember here
>b37e	05					.byte CL	;wh_CodeLength
>b385	50 6f 70 41			L1:	.text "PopA"	;  name of word as a string, ending at wh_NameLastChar
>b389	24					.byte (("PopA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b38a	fb b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b38c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b38d	08					.byte NN	;wh_Flags	dictionary flags
=45833					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b38e					PopA:
.b38e	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b390	b0 66		bcs $b3f8		bcs Throw_Stack
.b392	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b394	e8		inx				inx
.b395	e8		inx				inx
=8					CL	.var *-(WordListLink+wh_Xt)
=$b396					en = *	; remember here
>b38c	08					.byte CL	;wh_CodeLength
.b396	60		rts		                rts
.b397					PopA2:
.b397	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b399	b0 5d		bcs $b3f8		bcs Throw_Stack
.b39b	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b39d	e8		inx				inx
.b39e	e8		inx				inx
.b39f	60		rts		                rts
>b3a0	50 6f 70 59 41			L1:	.text "PopYA"	;  name of word as a string, ending at wh_NameLastChar
>b3a5	25					.byte (("PopYA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b3a6	09 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b3a8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b3a9	08					.byte NN	;wh_Flags	dictionary flags
=45861					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b3aa					PopYA:
.b3aa	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b3ac	b0 4a		bcs $b3f8		bcs Throw_Stack
.b3ae	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to YA
.b3b0	b4 25		ldy $25,x			ldy DStack+1,x
.b3b2	e8		inx				inx
.b3b3	e8		inx				inx
=10					CL	.var *-(WordListLink+wh_Xt)
=$b3b4					en = *	; remember here
>b3a8	0a					.byte CL	;wh_CodeLength
.b3b4	60		rts				rts
.b3b5					PopTmp1:
.b3b5	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b3b7	b0 3f		bcs $b3f8		bcs Throw_Stack
.b3b9	b5 24		lda $24,x			lda DStack+0,x	; PopYA
.b3bb	b4 25		ldy $25,x			ldy DStack+1,x
.b3bd	e8		inx				inx
.b3be	e8		inx				inx
.b3bf	85 14		sta $14				sta tmp1+0
.b3c1	84 15		sty $15				sty tmp1+1
.b3c3	60		rts				rts
>b3c4	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_1"	;  name of word as a string, ending at wh_NameLastChar
>b3cc	77 5f 31
>b3cf	2b					.byte (("underflow_1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b3d0	25 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b3d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b3d3	08					.byte NN	;wh_Flags	dictionary flags
=45903					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b3d4					underflow_1:
.b3d4	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b3d6	b0 20		bcs $b3f8		bcs Throw_Stack
=4					CL	.var *-(WordListLink+wh_Xt)
=$b3d8					en = *	; remember here
>b3d2	04					.byte CL	;wh_CodeLength
.b3d8	60		rts				rts
>b3d9	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_2"	;  name of word as a string, ending at wh_NameLastChar
>b3e1	77 5f 32
>b3e4	4b					.byte (("underflow_2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b3e5	4f b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b3e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b3e8	08					.byte NN	;wh_Flags	dictionary flags
=45924					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b3e9					underflow_2:
.b3e9	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b3eb	b0 0b		bcs $b3f8		bcs Throw_Stack
=4					CL	.var *-(WordListLink+wh_Xt)
=$b3ed					en = *	; remember here
>b3e7	04					.byte CL	;wh_CodeLength
.b3ed	60		rts		                rts
.b3ee					underflow_3:
.b3ee	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.b3f0	b0 06		bcs $b3f8		bcs Throw_Stack
.b3f2	60		rts		                rts
.b3f3					underflow_4:
.b3f3	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.b3f5	b0 01		bcs $b3f8		bcs Throw_Stack
.b3f7	60		rts		                rts
.b3f8					Throw_Stack:
.b3f8	30 04		bmi $b3fe			bmi _over
.b3fa	a9 fc		lda #$fc			lda #$100+err_Stack_Underflow
.b3fc	d0 35		bne $b433			bne ThrowA
.b3fe	a9 fd		lda #$fd	_over:		lda #$100+err_Stack_Overflow
.b400	d0 31		bne $b433			bne ThrowA
.b402					Throw_FPStack:
.b402	30 04		bmi $b408			bmi _over
.b404	a9 d3		lda #$d3			lda #$100+err_FPStackUnderflow
.b406	d0 2b		bne $b433			bne ThrowA
.b408	a9 d4		lda #$d4	_over:		lda #$100+err_FPStackOverflow
.b40a	d0 27		bne $b433			bne ThrowA
.b40c					Throw_FpOutOfRange:
.b40c	a9 d5		lda #$d5			lda #$100+err_FpOutOfRange
.b40e	d0 23		bne $b433			bne ThrowA
>b410	3f 53 74 61 63 6b		L1:	.text "?Stack"	;  name of word as a string, ending at wh_NameLastChar
>b416	66					.byte (("?Stack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b417	64 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b419	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b41a	08					.byte NN	;wh_Flags	dictionary flags
=45974					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b41b					QStack:
.b41b	e0 29		cpx #$29		cpx #-2*0+DStack0+1
.b41d	b0 d9		bcs $b3f8		bcs Throw_Stack
.b41f	a4 4c		ldy $4c				ldy fp			; check floating point stack
.b421	c0 0b		cpy #$0b			cpy #FDim+1
.b423	b0 dd		bcs $b402			bcs Throw_FPStack
=10					CL	.var *-(WordListLink+wh_Xt)
=$b425					en = *	; remember here
>b419	0a					.byte CL	;wh_CodeLength
.b425	60		rts				rts			; all OK
>b426	54 68 72 6f 77			L1:	.text "Throw"	;  name of word as a string, ending at wh_NameLastChar
>b42b	e5					.byte (("Throw"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b42c	96 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b42e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b42f	08					.byte NN	;wh_Flags	dictionary flags
=45995					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b430	20 8e b3	jsr $b38e	Throw:		jsr PopA		; pop n
.b433	20 5e b4	jsr $b45e	ThrowA:		jsr Type_Exception_Text_A ; print the associated error string
.b436	a2 28		ldx #$28			ldx #DStack0		; reset data stack (in case of underflow)
.b438					Abort_Core:
.b438	20 85 b8	jsr $b885			jsr SLiteral_runtime
.b43b	4c 41 b4	jmp $b441			  jmp +
>b43e	3f 00 20					  .text "?",0," "	; signal an error to the simulator
.b441	20 8f cd	jsr $cd8f	+		jsr Type
.b444	20 ab ce	jsr $ceab			jsr R_From		; show return stack TOS
.b447	20 9e 81	jsr $819e			jsr TypeSymbol
.b44a	20 c7 ce	jsr $cec7			jsr R_Fetch		; show return stack NOS
.b44d	20 9e 81	jsr $819e			jsr TypeSymbol
.b450	20 e2 aa	jsr $aae2			jsr CR
.b453					Abort_Core2:
.b453	a9 08		lda #$08			lda #DoStkDim		; init do stack
.b455	8d 45 07	sta $0745			sta DoStkIndex
.b458	20 a2 b4	jsr $b4a2			jsr Empty_Stack		; empty the Data Stack & FP stack
.b45b	4c b2 b4	jmp $b4b2			jmp Quit		; continue into QUIT.
.b45e					Type_Exception_Text_A:
.b45e	85 16		sta $16				sta tmp2+0	; save error code
.b460	a9 be		lda #$be			lda #<Exception_Text_List
.b462	a0 da		ldy #$da			ldy #>Exception_Text_List	; for each table entry
.b464	85 18		sta $18				sta tmp3+0
.b466	84 19		sty $19				sty tmp3+1
.b468	a0 00		ldy #$00	_TestEntry:	ldy #0		;   code match?
.b46a	b1 18		lda ($18),y			lda (tmp3),y
.b46c	f0 1a		beq $b488			beq _NotFound
.b46e	c5 16		cmp $16				cmp tmp2+0
.b470	f0 11		beq $b483			beq _Found
.b472	c8		iny		-		iny		;   step to end of entry
.b473	b1 18		lda ($18),y			lda (tmp3),y
.b475	d0 fb		bne $b472			bne -
.b477	98		tya				tya		;   step to next entry
.b478	38		sec				sec
.b479	65 18		adc $18				adc tmp3+0
.b47b	85 18		sta $18				sta tmp3+0
.b47d	90 e9		bcc $b468			bcc _TestEntry
.b47f	e6 19		inc $19				inc tmp3+1
.b481	d0 e5		bne $b468			bne _TestEntry
.b483					_Found:
.b483	a0 01		ldy #$01			ldy #1
.b485	4c b6 cd	jmp $cdb6			jmp Print_ASCIIZ_tmp3_no_lf
.b488	a0 ff		ldy #$ff	_NotFound:	ldy #$ff		; print code
.b48a	a5 16		lda $16				lda tmp2+0
.b48c	20 64 b7	jsr $b764			jsr PushYA
.b48f	4c 83 cb	jmp $cb83			jmp Dot
>b492	45 6d 70 74 79 2d 53 74		L1:	.text "Empty-Stack"	;  name of word as a string, ending at wh_NameLastChar
>b49a	61 63 6b
>b49d	6b					.byte (("Empty-Stack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b49e	ab b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b4a0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b4a1	08					.byte NN	;wh_Flags	dictionary flags
=46109					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b4a2	a2 28		ldx #$28	Empty_Stack:	ldx #DStack0	; empty data stack
.b4a4	a9 0a		lda #$0a			lda #FDim	; empty FP stack
.b4a6	85 4c		sta $4c				sta fp
=6					CL	.var *-(WordListLink+wh_Xt)
=$b4a8					en = *	; remember here
>b4a0	06					.byte CL	;wh_CodeLength
.b4a8	60		rts				rts
>b4a9	51 75 69 74			L1:	.text "Quit"	;  name of word as a string, ending at wh_NameLastChar
>b4ad	84					.byte (("Quit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b4ae	1d b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b4b0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b4b1	08					.byte NN	;wh_Flags	dictionary flags
=46125					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b4b2					Quit:
.b4b2	8a		txa				txa		; Save the DStack that we just defined
.b4b3	a2 ff		ldx #$ff			ldx #rsp0
.b4b5	9a		txs				txs
.b4b6	aa		tax				tax		; Restore the DStack. Dude, seriously.
.b4b7	a9 00		lda #$00			lda #0		; SOURCE-ID= zero (keyboard input)
.b4b9	85 02		sta $02				sta insrc+0
.b4bb	85 03		sta $03				sta insrc+1
.b4bd	20 f1 b6	jsr $b6f1			jsr Left_Bracket_NoCheck ; switch to interpret state
.b4c0					_get_line:
.b4c0	a9 00		lda #$00			lda #<buffer0	; input buffer, this is paranoid
.b4c2	85 04		sta $04				sta cib+0
.b4c4	a9 02		lda #$02			lda #>buffer0
.b4c6	85 05		sta $05				sta cib+1
.b4c8	20 37 c2	jsr $c237			jsr Refill		; ( -- f )
.b4cb	b5 24		lda $24,x			lda DStack+0,x
.b4cd	d0 05		bne $b4d4			bne +
.b4cf	a9 6b		lda #$6b			lda #$100+err_Refill	; REFILL returned a FALSE flag, something went wrong
.b4d1	4c 33 b4	jmp $b433			jmp ThrowA
.b4d4	e8		inx		+		inx			; drop the flag
.b4d5	e8		inx				inx
.b4d6	20 ed b4	jsr $b4ed			jsr interpret
.b4d9	a5 0a		lda $0a				lda state
.b4db	d0 06		bne $b4e3			bne _print_compiled
.b4dd	a9 6a		lda #$6a			lda #<str_ok
.b4df	a0 da		ldy #$da			ldy #>str_ok
.b4e1	d0 04		bne $b4e7			bne _print
.b4e3	a9 6e		lda #$6e	_print_compiled: lda #<str_compiled	; "compile" string
.b4e5	a0 da		ldy #$da			ldy #>str_compiled
.b4e7	20 aa cd	jsr $cdaa	_print:		jsr Print_ASCIIZ_YA
.b4ea	4c c0 b4	jmp $b4c0			jmp _get_line
=59					CL	.var *-(WordListLink+wh_Xt)
=$b4ed					en = *	; remember here
>b4b0	3b					.byte CL	;wh_CodeLength
.b4ed					Interpret:
.b4ed					_loop:
.b4ed	20 1b b4	jsr $b41b			jsr QStack		; check stack bounds
.b4f0	20 55 ba	jsr $ba55			jsr parse_name		; ( "string" -- addr u )
.b4f3	b5 24		lda $24,x	                lda DStack+0,x		; empty line?
.b4f5	f0 53		beq $b54a	                beq _line_done
.b4f7	20 61 cc	jsr $cc61			jsr Two_dup		; ( addr u -- addr u addr u )
.b4fa	20 92 bc	jsr $bc92			jsr find_name		; ( addr u addr u -- addr u nt|0 )
.b4fd	b5 25		lda $25,x			lda DStack+1,x		; word found?
.b4ff	d0 1b		bne $b51c			bne _got_name_token
.b501	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.b502	e8		inx		                inx
.b503	20 69 b0	jsr $b069	                jsr Number           ; ( addr u -- u|d )
.b506	a5 0a		lda $0a		                lda state		; interpreting?
.b508	f0 e3		beq $b4ed	                beq _loop		;   we're done
.b50a	a9 20		lda #$20	                lda #$20		; double cell number?
.b50c	24 0c		bit $0c		                bit status
.b50e	f0 06		beq $b516	                beq _single_number
.b510	20 2b b8	jsr $b82b			jsr Two_literal		; compile a double number
.b513	4c ed b4	jmp $b4ed			jmp _loop
.b516	20 17 b7	jsr $b717	_single_number:	jsr Literal		; compile a single number
.b519	4c ed b4	jmp $b4ed			jmp _loop
.b51c					_got_name_token:
.b51c	20 22 c9	jsr $c922			jsr Nip
.b51f	20 22 c9	jsr $c922			jsr Nip			; ( nt )
.b522	85 14		sta $14				sta tmp1+0		; save a work copy of nt
.b524	84 15		sty $15				sty tmp1+1
.b526	20 9c bd	jsr $bd9c			jsr Name_To_Int		; ( nt -- xt )
.b529	a0 84		ldy #$84			ldy #Wh_Flags		; get word flags, we'll need them shortly
.b52b	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b52d	a4 0a		ldy $0a				ldy state		; interpreting or compiling?
.b52f	d0 0f		bne $b540			bne _compile
.b531	29 01		and #$01			and #CO			; is the word COMPILE-ONLY?
.b533	f0 05		beq $b53a			beq _execute
.b535	a9 f2		lda #$f2			lda #$100+err_CompileOnly	;   complain & quit
.b537	4c 33 b4	jmp $b433			jmp ThrowA
.b53a	20 cd cd	jsr $cdcd	_execute:	jsr Execute		; EXECUTE the xt that is TOS
.b53d	4c ed b4	jmp $b4ed	                jmp _loop
.b540					_compile:
.b540	29 04		and #$04			and #IM			; is the word IMMEDIATE?
.b542	d0 f6		bne $b53a			bne _execute		;   IMMEDIATE word, execute now
.b544	20 5d b6	jsr $b65d			jsr Compile_Comma_WithNT ; Compile the xt into the Dictionary
.b547	4c ed b4	jmp $b4ed			jmp _loop
.b54a					_line_done:
.b54a	e8		inx				inx			; drop stuff from PARSE_NAME
.b54b	e8		inx				inx
.b54c	e8		inx				inx
.b54d	e8		inx				inx
.b54e	60		rts				rts
>b54f	49 6d 6d 65 64 69 61 74		L1:	.text "Immediate"	;  name of word as a string, ending at wh_NameLastChar
>b557	65
>b558	a9					.byte (("Immediate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b559	2d b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b55b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b55c	08					.byte NN	;wh_Flags	dictionary flags
=46296					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b55d	a9 04		lda #$04	Immediate:	lda #IM
.b55f	48		pha		SetFlag:	pha
.b560	20 26 ba	jsr $ba26			jsr current_to_dp
.b563	a0 84		ldy #$84			ldy #Wh_Flags
.b565	68		pla				pla
.b566	11 10		ora ($10),y			ora (dp),y
.b568	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b56a					en = *	; remember here
>b55b	0d					.byte CL	;wh_CodeLength
.b56a	60		rts				rts
>b56b	43 6f 6d 70 69 6c 65 2d		L1:	.text "Compile-only"	;  name of word as a string, ending at wh_NameLastChar
>b573	6f 6e 6c 79
>b577	2c					.byte (("Compile-only"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b578	d8 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b57a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b57b	08					.byte NN	;wh_Flags	dictionary flags
=46327					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b57c	a9 01		lda #$01	Compile_Only:	lda #CO
.b57e	d0 df		bne $b55f			bne SetFlag
=4					CL	.var *-(WordListLink+wh_Xt)
=$b580					en = *	; remember here
>b57a	04					.byte CL	;wh_CodeLength
>b580	6e 65 76 65 72 2d 6e 61		L1:	.text "never-native"	;  name of word as a string, ending at wh_NameLastChar
>b588	74 69 76 65
>b58c	ac					.byte (("never-native"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b58d	f7 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b58f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b590	08					.byte NN	;wh_Flags	dictionary flags
=46348					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b591	20 26 ba	jsr $ba26	Never_Native:	jsr current_to_dp
.b594	a0 84		ldy #$84			ldy #Wh_Flags
.b596	b1 10		lda ($10),y			lda (dp),y
.b598	09 08		ora #$08			ora #NN		; set NN flag
.b59a	29 fd		and #$fd			and #$ff-AN	; clear AN flag
.b59c	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b59e					en = *	; remember here
>b58f	0d					.byte CL	;wh_CodeLength
.b59e	60		rts				rts
>b59f	61 6c 77 61 79 73 2d 6e		L1:	.text "always-native"	;  name of word as a string, ending at wh_NameLastChar
>b5a7	61 74 69 76 65
>b5ac	ad					.byte (("always-native"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b5ad	0c b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5af	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5b0	08					.byte NN	;wh_Flags	dictionary flags
=46380					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5b1	20 26 ba	jsr $ba26	Always_Native:	jsr current_to_dp
.b5b4	a0 84		ldy #$84			ldy #Wh_Flags
.b5b6	b1 10		lda ($10),y			lda (dp),y
.b5b8	09 02		ora #$02			ora #AN		; Make sure AN flag is set
.b5ba	29 f7		and #$f7			and #$ff-NN	; and NN flag is clear.
.b5bc	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b5be					en = *	; remember here
>b5af	0d					.byte CL	;wh_CodeLength
.b5be	60		rts				rts
>b5bf	61 6c 6c 6f 77 2d 6e 61		L1:	.text "allow-native"	;  name of word as a string, ending at wh_NameLastChar
>b5c7	74 69 76 65
>b5cb	ac					.byte (("allow-native"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b5cc	2c b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5cf	08					.byte NN	;wh_Flags	dictionary flags
=46411					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5d0	20 26 ba	jsr $ba26	Allow_Native:	jsr current_to_dp
.b5d3	a0 84		ldy #$84			ldy #Wh_Flags	; offset for status byte
.b5d5	b1 10		lda ($10),y			lda (dp),y
.b5d7	29 f5		and #$f5			and #$ff-NN-AN	; AN and NN flag is clear.
.b5d9	91 10		sta ($10),y			sta (dp),y
=11					CL	.var *-(WordListLink+wh_Xt)
=$b5db					en = *	; remember here
>b5ce	0b					.byte CL	;wh_CodeLength
.b5db	60		rts				rts
>b5dc	6e 63 2d 6c 69 6d 69 74		L1:	.text "nc-limit"	;  name of word as a string, ending at wh_NameLastChar
>b5e4	88					.byte (("nc-limit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b5e5	4b b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5e8	08					.byte NN	;wh_Flags	dictionary flags
=46436					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5e9	a0 03		ldy #$03			ldy #>nc_limit
.b5eb	a9 02		lda #$02			lda #<nc_limit
.b5ed	4c 64 b7	jmp $b764			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b5f0					en = *	; remember here
>b5e7	07					.byte CL	;wh_CodeLength
>b5f0	73 74 72 69 70 2d 75 6e		L1:	.text "strip-underflow"	;  name of word as a string, ending at wh_NameLastChar
>b5f8	64 65 72 66 6c 6f 77
>b5ff	ef					.byte (("strip-underflow"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b600	64 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b602	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b603	08					.byte NN	;wh_Flags	dictionary flags
=46463					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b604	a0 03		ldy #$03			ldy #>uf_strip
.b606	a9 04		lda #$04			lda #<uf_strip
.b608	4c 64 b7	jmp $b764			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b60b					en = *	; remember here
>b602	07					.byte CL	;wh_CodeLength
>b60b	70 6f 73 74 70 6f 6e 65		L1:	.text "postpone"	;  name of word as a string, ending at wh_NameLastChar
>b613	a8					.byte (("postpone"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b614	7f b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b616	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b617	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=46483					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b618					Postpone:
.b618	20 86 ba	jsr $ba86			jsr parse_name_check	; ( -- addr n )
.b61b	20 be bc	jsr $bcbe			jsr find_name_check	; ( -- nt | 0 )
.b61e	b5 24		lda $24,x			lda DStack+0,x
.b620	85 14		sta $14				sta tmp1+0
.b622	b5 25		lda $25,x			lda DStack+1,x
.b624	85 15		sta $15				sta tmp1+1
.b626	20 9c bd	jsr $bd9c			jsr Name_To_Int	; ( nt -- xt )
.b629	a0 84		ldy #$84			ldy #Wh_Flags		; IMMEDIATE word?
.b62b	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b62d	29 04		and #$04			and #IM
.b62f	f0 03		beq $b634			beq _not_immediate
.b631	4c 5d b6	jmp $b65d			jmp Compile_Comma_WithNT ; compile it
.b634					_not_immediate:
.b634	20 4a b7	jsr $b74a			jsr LDYA_Immed_Comma		; compile LDA #; LDY # with xt of the word
.b637	a0 b6		ldy #$b6			ldy #>Compile_Comma_WithNT_YA	; compile COMPILE,
.b639	a9 5a		lda #$5a			lda #<Compile_Comma_WithNT_YA
.b63b	4c e5 cc	jmp $cce5			jmp Jsr_Comma_YA
=38					CL	.var *-(WordListLink+wh_Xt)
=$b63e					en = *	; remember here
>b616	26					.byte CL	;wh_CodeLength
>b63e	43 6f 6d 70 69 6c 65 2c		L1:	.text "Compile,"	;  name of word as a string, ending at wh_NameLastChar
>b646	88					.byte (("Compile,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b647	93 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b649	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b64a	08					.byte NN	;wh_Flags	dictionary flags
=46534					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b64b	20 aa b3	jsr $b3aa	Compile_Comma:	jsr PopYA		; pop xt (check stack, skippable)
.b64e	20 64 b7	jsr $b764	Compile_Comma_YA: jsr PushYA		; push xt
.b651	20 07 cf	jsr $cf07			jsr Dup			; ( xt xt )
.b654	20 44 bd	jsr $bd44			jsr Int_To_Name		; ( xt nt )	does a dictionary search
.b657	4c 65 b6	jmp $b665			jmp Compile_Comma_B
.b65a	20 64 b7	jsr $b764	Compile_Comma_WithNT_YA: jsr PushYA
.b65d					Compile_Comma_WithNT:
.b65d	20 07 cf	jsr $cf07			jsr Dup
.b660	a9 7b		lda #$7b			lda #$100-wh_xt		; convert xt to nt
.b662	20 ec c9	jsr $c9ec			jsr Minus_A
.b665					Compile_Comma_B:
.b665	b5 24		lda $24,x			lda DStack+0,x		; tmp5 = nt
.b667	85 1c		sta $1c				sta tmp5+0
.b669	b5 25		lda $25,x			lda DStack+1,x
.b66b	85 1d		sta $1d				sta tmp5+1
.b66d	f0 36		beq $b6a5			beq _jsr		; no nt found (we have no flags) ?
.b66f	a0 83		ldy #$83			ldy #wh_CodeLength
.b671	b1 1c		lda ($1c),y			lda (tmp5),y
.b673	95 24		sta $24,x			sta DStack+0,x		; ( xt u )
.b675	a0 84		ldy #$84			ldy #Wh_Flags		; save word flags
.b677	b1 1c		lda ($1c),y			lda (tmp5),y
.b679	95 25		sta $25,x			sta DStack+1,x
.b67b	29 02		and #$02			and #AN			; Always Native (AN) word?
.b67d	d0 2b		bne $b6aa			bne _inline
.b67f	b5 25		lda $25,x			lda DStack+1,x		; Never Native (NN) word?
.b681	29 08		and #$08			and #NN
.b683	d0 0e		bne $b693			bne _jsr_opt
.b685	ad 03 03	lda $0303			lda nc_limit+1		; wordsize<=nc_limit?
.b688	d0 20		bne $b6aa			bne _inline
.b68a	ad 02 03	lda $0302			lda nc_limit+0
.b68d	d5 24		cmp $24,x			cmp DStack+0,x
.b68f	f0 02		beq $b693			beq _jsr_opt
.b691	b0 17		bcs $b6aa			bcs _inline
.b693					_jsr_opt:
.b693	ad 04 03	lda $0304			lda uf_strip
.b696	f0 0d		beq $b6a5			beq _jsr
.b698	b5 25		lda $25,x			lda DStack+1,x		; underflow strip & not stack strip?
.b69a	49 10		eor #$10			eor #UF
.b69c	29 50		and #$50			and #UF+R6
.b69e	d0 05		bne $b6a5			bne _jsr
.b6a0	a9 03		lda #$03			lda #3			; skip the underflow check
.b6a2	20 b6 c9	jsr $c9b6			jsr Nos_Plus_A
.b6a5					_jsr:
.b6a5	e8		inx				inx			; Drop len or nt
.b6a6	e8		inx				inx
.b6a7	4c e2 cc	jmp $cce2			jmp Jsr_Comma		; compile jsr, return
.b6aa					_inline:
.b6aa	b5 25		lda $25,x			lda DStack+1,x		; this word contains RTS addr save & restore?
.b6ac	29 40		and #$40			and #R6
.b6ae	f0 0a		beq $b6ba			beq +
.b6b0	a9 06		lda #$06			lda #6			;   Adjust xt: skip over the leading RTS addr save
.b6b2	20 b6 c9	jsr $c9b6			jsr Nos_Plus_A
.b6b5	a9 f4		lda #$f4			lda #$f4		;   Adjust u: omit the leading RTS addr save & trailing RTS addr restore
.b6b7	20 ec c9	jsr $c9ec			jsr minus_a
.b6ba					+
.b6ba	ad 04 03	lda $0304			lda uf_strip+0		; user wants underflow stripping?
.b6bd	f0 10		beq $b6cf			beq +
.b6bf	b5 25		lda $25,x			lda DStack+1,x		; this word contains underflow checking?
.b6c1	29 10		and #$10			and #UF
.b6c3	f0 0a		beq $b6cf			beq +
.b6c5	a9 03		lda #$03			lda #3			;   Adjust xt: Start after underflow check
.b6c7	20 b6 c9	jsr $c9b6			jsr Nos_Plus_A
.b6ca	a9 fd		lda #$fd			lda #$fd		;   Adjust u: omit underflow check
.b6cc	20 ec c9	jsr $c9ec			jsr minus_a
.b6cf					+
.b6cf	b5 24		lda $24,x			lda DStack+0,x		; compile code bytes
.b6d1	f0 0c		beq $b6df			beq _copy_end
.b6d3	a1 26		lda ($26,x)	_copy_loop:	lda (DStack+2,x)
.b6d5	20 a6 cc	jsr $cca6			jsr C_Comma_A
.b6d8	20 07 ca	jsr $ca07			jsr NOS_One_Plus
.b6db	d6 24		dec $24,x			dec DStack+0,x
.b6dd	d0 f4		bne $b6d3			bne _copy_loop
.b6df					_copy_end:
.b6df	4c c1 c4	jmp $c4c1			jmp Two_drop
=151					CL	.var *-(WordListLink+wh_Xt)
=$b6e2					en = *	; remember here
>b649	97					.byte CL	;wh_CodeLength
>b6e2	5b				L1:	.text "["	;  name of word as a string, ending at wh_NameLastChar
>b6e3	61					.byte (("["[-1]&7)<<5)+(*-L1)	;wh_HNL
>b6e4	c6 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6e6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6e7	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=46691					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6e8	a5 0a		lda $0a		Left_Bracket:	lda state+0		; Already in the interpret state?
.b6ea	d0 05		bne $b6f1			bne Left_Bracket_NoCheck
.b6ec	a9 69		lda #$69			lda #$100+err_AlreadyInterpreting
.b6ee	4c 33 b4	jmp $b433			jmp ThrowA
.b6f1					Left_Bracket_NoCheck:
.b6f1	a9 00		lda #$00			lda #0
.b6f3	85 0a		sta $0a		Left_Bracket_3:	sta state+0
.b6f5	85 0b		sta $0b				sta state+1
=15					CL	.var *-(WordListLink+wh_Xt)
=$b6f7					en = *	; remember here
>b6e6	0f					.byte CL	;wh_CodeLength
.b6f7	60		rts				rts
>b6f8	5d				L1:	.text "]"	;  name of word as a string, ending at wh_NameLastChar
>b6f9	a1					.byte (("]"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b6fa	63 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6fd	0c					.byte IM+NN	;wh_Flags	dictionary flags
=46713					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6fe					Right_Bracket:
.b6fe	a5 0a		lda $0a				lda state+0		; Already in the compile state?
.b700	f0 05		beq $b707			beq +
.b702	a9 68		lda #$68			lda #$100+err_AlreadyCompiling ;   complain and quit
.b704	4c 33 b4	jmp $b433			jmp ThrowA
.b707					+
.b707	a9 ff		lda #$ff			lda #$FF
.b709	d0 e8		bne $b6f3			bne Left_Bracket_3
=13					CL	.var *-(WordListLink+wh_Xt)
=$b70b					en = *	; remember here
>b6fc	0d					.byte CL	;wh_CodeLength
>b70b	4c 69 74 65 72 61 6c		L1:	.text "Literal"	;  name of word as a string, ending at wh_NameLastChar
>b712	87					.byte (("Literal"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b713	79 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b715	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b716	1d					.byte IM+CO+UF+NN	;wh_Flags	dictionary flags
=46738					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b717					Literal:
.b717	20 d4 b3	jsr $b3d4			jsr underflow_1
.b71a	20 20 b7	jsr $b720			jsr LitCompile		; compile load regs, choose a runtime routine
.b71d	4c 5a b6	jmp $b65a			jmp Compile_Comma_WithNT_YA ; compile JSR runtime
=9					CL	.var *-(WordListLink+wh_Xt)
=$b720					en = *	; remember here
>b715	09					.byte CL	;wh_CodeLength
.b720					LitCompile:
.b720	b5 25		lda $25,x			lda DStack+1,x		; hi byte zero?
.b722	f0 08		beq $b72c			beq _ZByte
.b724	20 4a b7	jsr $b74a			jsr ldya_immed_comma	; compile "ldy #; lda #" using TOS
.b727	a9 64		lda #$64			lda #<PushYA		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b729	a0 b7		ldy #$b7			ldy #>PushYA
.b72b	60		rts				rts
.b72c					_ZByte:
.b72c	b4 24		ldy $24,x			ldy DStack+0,x		; is it 0 ?
.b72e	f0 08		beq $b738			beq _zero
.b730	20 51 b7	jsr $b751			jsr lda_immed_comma	; compile "lda #" using TOS
.b733	a9 a6		lda #$a6			lda #<PushZA		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b735	a0 b7		ldy #$b7			ldy #>PushZA
.b737	60		rts				rts
.b738	e8		inx		_zero:		inx			; drop
.b739	e8		inx				inx
.b73a	a9 b5		lda #$b5			lda #<Zero		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b73c	a0 b7		ldy #$b7			ldy #>Zero
.b73e	60		rts				rts
>b73f	4c 44 59 41 23 2c		L1:	.text "LDYA#,"	;  name of word as a string, ending at wh_NameLastChar
>b745	86					.byte (("LDYA#,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b746	92 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b748	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b749	08					.byte NN	;wh_Flags	dictionary flags
=46789					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b74a					ldya_immed_comma:
.b74a	a9 a0		lda #$a0			lda #$a0		; ldy #
.b74c	b4 25		ldy $25,x			ldy DStack+1,x
.b74e	20 c0 cc	jsr $ccc0			jsr Comma_YA
.b751					lda_immed_comma:
.b751	a9 a9		lda #$a9			lda #$a9		; lda #
.b753	20 a6 cc	jsr $cca6			jsr C_Comma_A
.b756	4c a3 cc	jmp $cca3			jmp C_Comma
=15					CL	.var *-(WordListLink+wh_Xt)
=$b759					en = *	; remember here
>b748	0f					.byte CL	;wh_CodeLength
>b759	50 75 73 68 59 41		L1:	.text "PushYA"	;  name of word as a string, ending at wh_NameLastChar
>b75f	26					.byte (("PushYA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b760	c5 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b762	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b763	00					.byte 0	;wh_Flags	dictionary flags
=46815					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b764	ca		dex		PushYA:		dex
.b765	ca		dex				dex
.b766	95 24		sta $24,x			sta DStack+0,x
.b768	94 25		sty $25,x			sty DStack+1,x
=6					CL	.var *-(WordListLink+wh_Xt)
=$b76a					en = *	; remember here
>b762	06					.byte CL	;wh_CodeLength
.b76a	60		rts				rts
>b76b	42 61 73 65			L1:	.text "Base"	;  name of word as a string, ending at wh_NameLastChar
>b76f	a4					.byte (("Base"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b770	df b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b772	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b773	08					.byte NN	;wh_Flags	dictionary flags
=46831					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b774	a0 03		ldy #$03			ldy #>base
.b776	a9 00		lda #$00			lda #<base
.b778	4c 64 b7	jmp $b764			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b77b					en = *	; remember here
>b772	07					.byte CL	;wh_CodeLength
>b77b	54 72 75 65			L1:	.text "True"	;  name of word as a string, ending at wh_NameLastChar
>b77f	a4					.byte (("True"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b780	ef b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b782	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b783	00					.byte 0	;wh_Flags	dictionary flags
=46847					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b784	a9 ff		lda #$ff	True:		lda #$FF
.b786	ca		dex		PushAA:		dex
.b787	ca		dex				dex
.b788	95 24		sta $24,x			sta DStack+0,x
.b78a	95 25		sta $25,x			sta DStack+1,x
=8					CL	.var *-(WordListLink+wh_Xt)
=$b78c					en = *	; remember here
>b782	08					.byte CL	;wh_CodeLength
.b78c	60		rts				rts
>b78d	46 61 6c 73 65			L1:	.text "False"	;  name of word as a string, ending at wh_NameLastChar
>b792	a5					.byte (("False"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b793	ff b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b795	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b796	08					.byte NN	;wh_Flags	dictionary flags
=46866					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b797	a9 00		lda #$00	False:		lda #0
.b799	f0 0b		beq $b7a6			beq PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b79b					en = *	; remember here
>b795	04					.byte CL	;wh_CodeLength
>b79b	50 75 73 68 5a 41		L1:	.text "PushZA"	;  name of word as a string, ending at wh_NameLastChar
>b7a1	26					.byte (("PushZA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7a2	12 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7a4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7a5	00					.byte 0	;wh_Flags	dictionary flags
=46881					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7a6	ca		dex		PushZA:		dex
.b7a7	ca		dex				dex
.b7a8	95 24		sta $24,x			sta DStack+0,x
.b7aa	a9 00		lda #$00			lda #0
.b7ac	95 25		sta $25,x			sta DStack+1,x
=8					CL	.var *-(WordListLink+wh_Xt)
=$b7ae					en = *	; remember here
>b7a4	08					.byte CL	;wh_CodeLength
.b7ae	60		rts				rts
>b7af	30				L1:	.text "0"	;  name of word as a string, ending at wh_NameLastChar
>b7b0	01					.byte (("0"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7b1	21 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7b3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7b4	08					.byte NN	;wh_Flags	dictionary flags
=46896					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7b5	a9 00		lda #$00	Zero:		lda #0
.b7b7	f0 ed		beq $b7a6			beq PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b7b9					en = *	; remember here
>b7b3	04					.byte CL	;wh_CodeLength
>b7b9	31				L1:	.text "1"	;  name of word as a string, ending at wh_NameLastChar
>b7ba	21					.byte (("1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7bb	30 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7bd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7be	08					.byte NN	;wh_Flags	dictionary flags
=46906					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7bf	a9 01		lda #$01	One:		lda #1
.b7c1	d0 e3		bne $b7a6			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b7c3					en = *	; remember here
>b7bd	04					.byte CL	;wh_CodeLength
>b7c3	32				L1:	.text "2"	;  name of word as a string, ending at wh_NameLastChar
>b7c4	41					.byte (("2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7c5	3a b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7c8	08					.byte NN	;wh_Flags	dictionary flags
=46916					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7c9	a9 02		lda #$02	Two:		lda #2
.b7cb	d0 d9		bne $b7a6			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b7cd					en = *	; remember here
>b7c7	04					.byte CL	;wh_CodeLength
>b7cd	42 6c				L1:	.text "Bl"	;  name of word as a string, ending at wh_NameLastChar
>b7cf	82					.byte (("Bl"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7d0	44 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7d3	08					.byte NN	;wh_Flags	dictionary flags
=46927					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7d4	a9 20		lda #$20	Bl:		lda #AscSP
.b7d6	d0 ce		bne $b7a6			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b7d8					en = *	; remember here
>b7d2	04					.byte CL	;wh_CodeLength
>b7d8	3e 49 6e			L1:	.text ">In"	;  name of word as a string, ending at wh_NameLastChar
>b7db	c3					.byte ((">In"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7dc	4f b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7df	08					.byte NN	;wh_Flags	dictionary flags
=46939					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7e0	a9 08		lda #$08			lda #ToIn
.b7e2	4c a6 b7	jmp $b7a6			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b7e5					en = *	; remember here
>b7de	05					.byte CL	;wh_CodeLength
>b7e5	53 74 61 74 65			L1:	.text "State"	;  name of word as a string, ending at wh_NameLastChar
>b7ea	a5					.byte (("State"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7eb	5b b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7ed	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7ee	08					.byte NN	;wh_Flags	dictionary flags
=46954					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7ef	a9 0a		lda #$0a			lda #state
.b7f1	4c a6 b7	jmp $b7a6			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b7f4					en = *	; remember here
>b7ed	05					.byte CL	;wh_CodeLength
>b7f4	64 70				L1:	.text "dp"	;  name of word as a string, ending at wh_NameLastChar
>b7f6	02					.byte (("dp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7f7	6a b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7f9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7fa	08					.byte NN	;wh_Flags	dictionary flags
=46966					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7fb	a9 10		lda #$10			lda #dp
.b7fd	4c a6 b7	jmp $b7a6			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b800					en = *	; remember here
>b7f9	05					.byte CL	;wh_CodeLength
>b800	54 6d 70 31			L1:	.text "Tmp1"	;  name of word as a string, ending at wh_NameLastChar
>b804	24					.byte (("Tmp1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b805	76 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b807	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b808	08					.byte NN	;wh_Flags	dictionary flags
=46980					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b809	a9 14		lda #$14			lda #tmp1
.b80b	4c a6 b7	jmp $b7a6			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b80e					en = *	; remember here
>b807	05					.byte CL	;wh_CodeLength
>b80e	44 53 74 61 63 6b		L1:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
>b814	66					.byte (("DStack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b815	84 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b817	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b818	08					.byte NN	;wh_Flags	dictionary flags
=46996					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b819	a9 24		lda #$24			lda #DStack
.b81b	4c a6 b7	jmp $b7a6			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b81e					en = *	; remember here
>b817	05					.byte CL	;wh_CodeLength
>b81e	32 4c 69 74 65 72 61 6c		L1:	.text "2Literal"	;  name of word as a string, ending at wh_NameLastChar
>b826	88					.byte (("2Literal"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b827	94 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b829	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b82a	1c					.byte UF+IM+NN	;wh_Flags	dictionary flags
=47014					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b82b					Two_literal:
.b82b	20 e9 b3	jsr $b3e9			jsr underflow_2 ; double number
.b82e	20 25 cf	jsr $cf25			jsr Swap
.b831	20 17 b7	jsr $b717			jsr Literal	; do lo cell
.b834	4c 17 b7	jmp $b717			jmp Literal	; do hi cell
=12					CL	.var *-(WordListLink+wh_Xt)
=$b837					en = *	; remember here
>b829	0c					.byte CL	;wh_CodeLength
>b837	53 4c 69 74 65 72 61 6c		L1:	.text "SLiteral"	;  name of word as a string, ending at wh_NameLastChar
>b83f	88					.byte (("SLiteral"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b840	a6 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b842	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b843	1d					.byte CO+IM+UF+NN	;wh_Flags	dictionary flags
=47039					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b844					SLiteral:
.b844	20 e9 b3	jsr $b3e9			jsr underflow_2
.b847	20 67 b8	jsr $b867			jsr SLiteral_Start	; compile header
.b84a	4c 5b b8	jmp $b85b			jmp _Move_Test
.b84d	a1 28		lda ($28,x)	_Move_Loop:	lda (DStack+4,x)
.b84f	20 a6 cc	jsr $cca6			jsr C_Comma_A
.b852	f6 28		inc $28,x			inc DStack+4,x
.b854	d0 02		bne $b858			bne +
.b856	f6 29		inc $29,x			inc DStack+5,x
.b858					+
.b858	20 e3 c9	jsr $c9e3			jsr NOS_One_Minus
.b85b	b5 26		lda $26,x	_Move_Test:	lda DStack+2,x
.b85d	15 27		ora $27,x			ora DStack+3,x
.b85f	d0 ec		bne $b84d			bne _Move_Loop
.b861	20 74 b8	jsr $b874			jsr SLiteral_End
.b864	4c c1 c4	jmp $c4c1			jmp Two_Drop		; clean up and leave
=35					CL	.var *-(WordListLink+wh_Xt)
=$b867					en = *	; remember here
>b842	23					.byte CL	;wh_CodeLength
.b867					SLiteral_Start:
.b867	a9 85		lda #$85			lda #<SLiteral_runtime	; compile JSR SLiteral_Runtime
.b869	a0 b8		ldy #$b8			ldy #>SLiteral_runtime
.b86b	20 e5 cc	jsr $cce5			jsr Jsr_Comma_YA
.b86e	20 c9 c9	jsr $c9c9			jsr Here		; push addr of start of JMP
.b871	4c fc cc	jmp $ccfc			jmp Jmp_Comma_YA	; compile JMP around string (dummy addr)
.b874					SLiteral_End:
.b874	20 fd c9	jsr $c9fd			jsr One_Plus
.b877	a5 00		lda $00				lda cp+0		; Update the address of the jump to HERE.
.b879	81 24		sta ($24,x)			sta (DStack+0,x)
.b87b	20 fd c9	jsr $c9fd			jsr One_Plus
.b87e	a5 01		lda $01				lda cp+1
.b880	81 24		sta ($24,x)			sta (DStack+0,x)
.b882	e8		inx				inx			; drop herej
.b883	e8		inx				inx
.b884	60		rts				rts
.b885					SLiteral_Runtime:
.b885	86 16		stx $16				stx tmp2	; save data stack index
.b887	ba		tsx				tsx
.b888	bd 01 01	lda $0101,x	SLiteral_Run2:	lda RStack+1,x	; tmp1= RTS addr
.b88b	85 14		sta $14				sta tmp1+0
.b88d	bd 02 01	lda $0102,x			lda RStack+2,x
.b890	85 15		sta $15				sta tmp1+1
.b892	a6 16		ldx $16				ldx tmp2	; restore data stack index
.b894	ca		dex				dex		; push string addr
.b895	ca		dex				dex
.b896	18		clc				clc
.b897	a5 14		lda $14				lda tmp1+0
.b899	69 04		adc #$04			adc #3+1	;   just after the following JMP + correcting for JSR behavior
.b89b	95 24		sta $24,x			sta DStack+0,x
.b89d	a5 15		lda $15				lda tmp1+1
.b89f	69 00		adc #$00			adc #0
.b8a1	95 25		sta $25,x			sta DStack+1,x
.b8a3	ca		dex				dex		; push string length
.b8a4	ca		dex				dex
.b8a5	38		sec				sec
.b8a6	a0 02		ldy #$02			ldy #2		;   = string_end - string_addr
.b8a8	b1 14		lda ($14),y			lda (tmp1),y
.b8aa	f5 26		sbc $26,x			sbc DStack+2,x
.b8ac	95 24		sta $24,x			sta DStack+0,x
.b8ae	c8		iny				iny
.b8af	b1 14		lda ($14),y			lda (tmp1),y
.b8b1	f5 27		sbc $27,x			sbc DStack+3,x
.b8b3	95 25		sta $25,x			sta DStack+1,x
.b8b5	60		rts				rts
>b8b6	2e 22				L1:	.text '."'	;  name of word as a string, ending at wh_NameLastChar
>b8b8	42					.byte (('."'[-1]&7)<<5)+(*-L1)	;wh_HNL
>b8b9	bf b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b8bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b8bc	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=47160					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b8bd					Dot_quote:
.b8bd	20 ce b8	jsr $b8ce			jsr S_Quote		; compile the string literal
.b8c0	a0 cd		ldy #$cd			ldy #>Type		; compile: print string
.b8c2	a9 8f		lda #$8f			lda #<Type
.b8c4	4c e5 cc	jmp $cce5			jmp Jsr_Comma_YA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b8c7					en = *	; remember here
>b8bb	0a					.byte CL	;wh_CodeLength
>b8c7	53 22				L1:	.text 'S"'	;  name of word as a string, ending at wh_NameLastChar
>b8c9	42					.byte (('S"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>b8ca	38 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b8cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b8cd	0c					.byte IM+NN	;wh_Flags	dictionary flags
=47177					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b8ce					S_Quote:
.b8ce	a9 00		lda #$00			lda #0		; Don't handle escaped chars.
.b8d0					S_Quote_start:
.b8d0	48		pha				pha			; save "handle escaped chars" flag
.b8d1	a5 0a		lda $0a				lda state		; compiling?
.b8d3	f0 06		beq $b8db			beq _15
.b8d5	20 67 b8	jsr $b867			jsr SLiteral_Start	; compile SLiteral header
.b8d8	4c de b8	jmp $b8de			jmp _19
.b8db	20 c9 c9	jsr $c9c9	_15:		jsr Here		; remember start addr
.b8de					_19:
.b8de	68		pla				pla			; init t2 flags
.b8df	20 a6 b7	jsr $b7a6			jsr PushZA
.b8e2	20 b5 b7	jsr $b7b5			jsr Zero		; init t3 flags
.b8e5					_savechars_loop:
.b8e5	a5 08		lda $08				lda toin+0		; LSB
.b8e7	c5 06		cmp $06				cmp ciblen+0
.b8e9	a5 09		lda $09				lda toin+1		; MSB
.b8eb	e5 07		sbc $07				sbc ciblen+1
.b8ed	90 10		bcc $b8ff			bcc _input_fine		; input buffer empty?
.b8ef	20 37 c2	jsr $c237			jsr Refill		; Refill it  ( -- f )
.b8f2	b5 24		lda $24,x			lda DStack+0,x		; Check result of refill.
.b8f4	d0 05		bne $b8fb			bne +
.b8f6	a9 6b		lda #$6b			lda #$100+err_refill	; Something when wrong with refill.
.b8f8	4c 33 b4	jmp $b433			jmp ThrowA
.b8fb	e8		inx		+		inx			; Drop the refill flag
.b8fc	e8		inx				inx
.b8fd	d0 e6		bne $b8e5			bne _savechars_loop	; jump back up to the empty check, just in
.b8ff					_input_fine:
.b8ff	18		clc				clc			; tmp1= A= the char at Cib+ToIn
.b900	a5 04		lda $04				lda cib+0
.b902	85 14		sta $14				sta tmp1+0
.b904	a5 05		lda $05				lda cib+1
.b906	65 09		adc $09				adc toin+1
.b908	85 15		sta $15				sta tmp1+1
.b90a	a4 08		ldy $08				ldy ToIn
.b90c	b1 14		lda ($14),y			lda (tmp1),y
.b90e	85 14		sta $14				sta tmp1
.b910	e6 08		inc $08				inc toin+0		; Move on to the next character.
.b912	d0 02		bne $b916			bne +
.b914	e6 09		inc $09				inc toin+1
.b916					+
.b916	b4 26		ldy $26,x			ldy DStack+2,x		; handling escaped characters?
.b918	30 03		bmi $b91d			bmi +
.b91a	4c c0 b9	jmp $b9c0			jmp _regular_char
.b91d					+
.b91d	b4 27		ldy $27,x			ldy DStack+3,x  		; already seen the backslash?
.b91f	30 03		bmi $b924			bmi +
.b921	4c b6 b9	jmp $b9b6			jmp _not_escaped
.b924					+
.b924	84 15		sty $15				sty tmp1+1
.b926	24 15		bit $15				bit tmp1+1		; in the middle of a \x sequence ?
.b928	70 25		bvs $b94f			bvs _check_esc_chars
.b92a	a9 01		lda #$01			lda #1
.b92c	24 15		bit $15				bit tmp1+1
.b92e	d0 11		bne $b941			bne _esc_x_second_digit
.b930	c8		iny				iny			; Adjust flag for second digit next time.
.b931	94 27		sty $27,x			sty DStack+3,x
.b933	a5 14		lda $14				lda tmp1+0		; Get the char again.
.b935	20 e3 b9	jsr $b9e3			jsr convert_hex_value	; Convert to hex
.b938	0a		asl a				asl			; This is the upper nybble, so move it up.
.b939	0a		asl a				asl
.b93a	0a		asl a				asl
.b93b	0a		asl a				asl
.b93c	95 24		sta $24,x			sta DStack+0,x		; Save it for later.
.b93e	4c c7 b9	jmp $b9c7			jmp _next_character
.b941					_esc_x_second_digit:
.b941	a9 00		lda #$00			lda #0			; Clear the escaped character flag
.b943	95 27		sta $27,x			sta DStack+3,x		;   (because we are handling it right here)
.b945	a5 14		lda $14				lda tmp1+0		; Convert to hex
.b947	20 e3 b9	jsr $b9e3			jsr convert_hex_value
.b94a	15 24		ora $24,x			ora DStack+0,x		; combine with value in t3
.b94c	4c c4 b9	jmp $b9c4			jmp _save_character
.b94f					_check_esc_chars:
.b94f	a0 00		ldy #$00			ldy #0
.b951	94 27		sty $27,x			sty DStack+3,x
.b953	a8		tay				tay
.b954	a9 07		lda #$07			lda #AscBELL	      ; BEL (ASCII value 7)
.b956	c0 61		cpy #$61			cpy #'a'
.b958	f0 6a		beq $b9c4			beq _save_character
.b95a	a9 08		lda #$08			lda #AscBS	      ; Backspace (ASCII value 8)
.b95c	c0 62		cpy #$62			cpy #'b'
.b95e	f0 64		beq $b9c4			beq _save_character
.b960	a9 1b		lda #$1b			lda #AscESC	       ; ESC (ASCII value 27)
.b962	c0 65		cpy #$65			cpy #'e'
.b964	f0 5e		beq $b9c4			beq _save_character
.b966	a9 0c		lda #$0c			lda #AscFF	       ; FF (ASCII value 12)
.b968	c0 66		cpy #$66			cpy #'f'
.b96a	f0 58		beq $b9c4			beq _save_character
.b96c	a9 0a		lda #$0a			lda #AscLF	       ; LF (ASCII value 10)
.b96e	c0 6c		cpy #$6c			cpy #'l'
.b970	f0 52		beq $b9c4			beq _save_character
.b972	c0 6e		cpy #$6e			cpy #'n'
.b974	f0 4e		beq $b9c4			beq _save_character
.b976	c0 6d		cpy #$6d			cpy #'m'
.b978	d0 09		bne $b983			bne +
.b97a	a9 0d		lda #$0d			lda #AscCR		; CR/LF pair (ASCII values 13, 10)
.b97c	20 a6 cc	jsr $cca6			jsr C_Comma_A
.b97f	a9 0a		lda #$0a			lda #AscLF
.b981	d0 41		bne $b9c4			bne _save_character
.b983					+
.b983	a9 22		lda #$22			lda #AscDQuote		; Double quote (ASCII value 34)
.b985	c0 71		cpy #$71			cpy #'q'
.b987	f0 3b		beq $b9c4			beq _save_character
.b989	c0 22		cpy #$22			cpy #AscDQuote
.b98b	f0 37		beq $b9c4			beq _save_character
.b98d	a9 0d		lda #$0d			lda #AscCR		; CR (ASCII value 13)
.b98f	c0 72		cpy #$72			cpy #'r'
.b991	f0 31		beq $b9c4			beq _save_character
.b993	a9 09		lda #$09			lda #AscHT		; Horizontal TAB (ASCII value 9)
.b995	c0 74		cpy #$74			cpy #'t'
.b997	f0 2b		beq $b9c4			beq _save_character
.b999	a9 0b		lda #$0b			lda #AscVT		; Vertical TAB (ASCII value 11)
.b99b	c0 76		cpy #$76			cpy #'v'
.b99d	f0 25		beq $b9c4			beq _save_character
.b99f	a9 00		lda #$00			lda #0			; NULL (ASCII value 0)
.b9a1	c0 7a		cpy #$7a			cpy #'z'
.b9a3	f0 1f		beq $b9c4			beq _save_character
.b9a5					_check_esc_x:
.b9a5	c0 78		cpy #$78			cpy #'x'
.b9a7	d0 06		bne $b9af			bne +
.b9a9	a9 be		lda #$be			lda #$BE	; Clear bits 6 and 0
.b9ab	95 27		sta $27,x			sta DStack+3,x
.b9ad	d0 18		bne $b9c7			bne _next_character
.b9af					+
.b9af	a9 5c		lda #$5c			lda #AscBackslash	; Backslash (ASCII value 92)
.b9b1	c0 5c		cpy #$5c			cpy #AscBackslash
.b9b3	f0 0f		beq $b9c4			beq _save_character
.b9b5	98		tya				tya
.b9b6					_not_escaped:
.b9b6	c9 5c		cmp #$5c			cmp #$5C	; The backslash char
.b9b8	d0 06		bne $b9c0			bne _regular_char
.b9ba	a9 ff		lda #$ff			lda #$FF
.b9bc	95 27		sta $27,x			sta DStack+3,x
.b9be	d0 07		bne $b9c7			bne _next_character
.b9c0					_regular_char:
.b9c0	c9 22		cmp #$22			cmp #AscDQuote		; ASCII for "
.b9c2	f0 06		beq $b9ca			beq _found_string_end
.b9c4					_save_character:
.b9c4	20 a6 cc	jsr $cca6			jsr C_Comma_A		; compile this character into the dictionary
.b9c7					_next_character:
.b9c7	4c e5 b8	jmp $b8e5			jmp _savechars_loop
.b9ca					_found_string_end:
.b9ca	e8		inx				inx			; Drop t3
.b9cb	e8		inx				inx
.b9cc	a5 0a		lda $0a				lda state		; What happens next depends on the state (which is bad, but
.b9ce	d0 0e		bne $b9de			bne _cmpl		; that's the way it works at the moment).
.b9d0	38		sec				sec			; TOS= length of string = Here - start_addr
.b9d1	a5 00		lda $00				lda cp+0
.b9d3	f5 26		sbc $26,x			sbc DStack+2,x
.b9d5	95 24		sta $24,x			sta DStack+0,x		;   LSB
.b9d7	a5 01		lda $01				lda cp+1
.b9d9	f5 27		sbc $27,x			sbc DStack+3,x
.b9db	95 25		sta $25,x			sta DStack+1,x		;   MSB
.b9dd	60		rts				rts			; ( startaddr u )
.b9de					_cmpl:
.b9de	e8		inx				inx			; Drop t2
.b9df	e8		inx				inx
.b9e0	4c 74 b8	jmp $b874			jmp SLiteral_End	; ( jmpaddr )
=277					CL	.var *-(WordListLink+wh_Xt)
=$ff					CL	 .var $ff
=$b9e3					en = *	; remember here
>b8cc	ff					.byte CL	;wh_CodeLength
.b9e3					convert_hex_value:
.b9e3	c9 41		cmp #$41			cmp #'A'
.b9e5	90 05		bcc $b9ec			bcc _digit
.b9e7	29 1f		and #$1f	_alpha:		and #$1F		; Make it uppercase.
.b9e9	69 08		adc #$08			adc #9-1		; gives value 10 for 'A'
.b9eb	60		rts				rts
.b9ec					_digit:
.b9ec	e9 2f		sbc #$2f			sbc #'0'-1
.b9ee	60		rts				rts
>b9ef	53 5c 22			L1:	.text 'S\"'	;  name of word as a string, ending at wh_NameLastChar
>b9f2	43					.byte (('S\"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>b9f3	49 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b9f5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b9f6	0c					.byte IM+NN	;wh_Flags	dictionary flags
=47474					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b9f7					S_Backslash_Quote:
.b9f7	a9 ff		lda #$ff			lda #$ff	; Do handle escaped chars.
.b9f9	4c d0 b8	jmp $b8d0			jmp S_Quote_start
=5					CL	.var *-(WordListLink+wh_Xt)
=$b9fc					en = *	; remember here
>b9f5	05					.byte CL	;wh_CodeLength
>b9fc	4c 61 74 65 73 74 58 74		L1:	.text "LatestXt"	;  name of word as a string, ending at wh_NameLastChar
>ba04	88					.byte (("LatestXt"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ba05	72 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba07	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba08	08					.byte NN	;wh_Flags	dictionary flags
=47492					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba09	20 1c ba	jsr $ba1c	LatestXt:	jsr LatestNt	; ( nt )
.ba0c	4c 9c bd	jmp $bd9c			jmp Name_To_Int	; ( xt )
=6					CL	.var *-(WordListLink+wh_Xt)
=$ba0f					en = *	; remember here
>ba07	06					.byte CL	;wh_CodeLength
>ba0f	4c 61 74 65 73 74 4e 74		L1:	.text "LatestNt"	;  name of word as a string, ending at wh_NameLastChar
>ba17	88					.byte (("LatestNt"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ba18	84 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba1a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba1b	08					.byte NN	;wh_Flags	dictionary flags
=47511					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba1c	20 26 ba	jsr $ba26	LatestNt:	jsr current_to_dp
.ba1f	a5 10		lda $10				lda dp+0
.ba21	a4 11		ldy $11				ldy dp+1
.ba23	4c 64 b7	jmp $b764			jmp PushYA
=10					CL	.var *-(WordListLink+wh_Xt)
=$ba26					en = *	; remember here
>ba1a	0a					.byte CL	;wh_CodeLength
.ba26					current_to_dp:
.ba26	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.ba29	0a		asl a				asl			; dp= wordlists[A]
.ba2a	a8		tay				tay
.ba2b	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.ba2e	85 10		sta $10				sta dp+0
.ba30	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.ba33	85 11		sta $11				sta dp+1
.ba35	60		rts				rts
.ba36					dp_to_current:
.ba36	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.ba39	0a		asl a		                asl			; wordlists[A]=dp
.ba3a	a8		tay		                tay
.ba3b	a5 10		lda $10		                lda dp+0
.ba3d	99 12 03	sta $0312,y			sta WordlistsV+0,y
.ba40	a5 11		lda $11		                lda dp+1
.ba42	99 13 03	sta $0313,y	                sta WordlistsV+1,y
.ba45	60		rts		                rts
>ba46	50 61 72 73 65 2d 4e 61		L1:	.text "Parse-Name"	;  name of word as a string, ending at wh_NameLastChar
>ba4e	6d 65
>ba50	aa					.byte (("Parse-Name"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ba51	97 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba53	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba54	08					.byte NN	;wh_Flags	dictionary flags
=47568					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba55					Parse_Name:
.ba55	a5 04		lda $04				lda cib+0		; tmp2= cib+(toin & $ff00)
.ba57	85 16		sta $16				sta tmp2+0
.ba59	18		clc				clc
.ba5a	a5 05		lda $05				lda cib+1
.ba5c	65 09		adc $09				adc toin+1
.ba5e	85 17		sta $17				sta tmp2+1
.ba60	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.ba62					_skip_loop:
.ba62	c4 06		cpy $06				cpy ciblen+0		; more chars left?
.ba64	a5 09		lda $09				lda toin+1
.ba66	e5 07		sbc $07				sbc ciblen+1
.ba68	b0 11		bcs $ba7b			bcs _empty_line
.ba6a	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.ba6c	c9 21		cmp #$21			cmp #AscSP+1		; is_whitespace
.ba6e	b0 10		bcs $ba80			bcs _char_found
.ba70	c8		iny				iny			; increment toin
.ba71	84 08		sty $08				sty toin+0
.ba73	d0 ed		bne $ba62			bne _skip_loop
.ba75	e6 09		inc $09				inc toin+1
.ba77	e6 17		inc $17				inc tmp2+1
.ba79	d0 e7		bne $ba62			bne _skip_loop
.ba7b					_empty_line:
.ba7b	ca		dex				dex			; junk address
.ba7c	ca		dex				dex
.ba7d	4c b5 b7	jmp $b7b5			jmp Zero		; length=0
.ba80					_char_found:
.ba80	20 d4 b7	jsr $b7d4			jsr Bl			; push delimiter char
.ba83	4c 9d ba	jmp $ba9d			jmp Parse
=49					CL	.var *-(WordListLink+wh_Xt)
=$ba86					en = *	; remember here
>ba53	31					.byte CL	;wh_CodeLength
.ba86					parse_name_check:
.ba86	20 55 ba	jsr $ba55			jsr parse_name		; get character from string
.ba89	b5 24		lda $24,x			lda DStack+0,x		; empty string?
.ba8b	f0 01		beq $ba8e			beq _empty
.ba8d	60		rts				rts
.ba8e	a9 f3		lda #$f3	_empty:		lda #$100+err_UndefinedWord	; complain & abort
.ba90	4c 33 b4	jmp $b433			jmp ThrowA
>ba93	50 61 72 73 65			L1:	.text "Parse"	;  name of word as a string, ending at wh_NameLastChar
>ba98	a5					.byte (("Parse"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ba99	d0 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba9b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba9c	08					.byte NN	;wh_Flags	dictionary flags
=47640					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba9d	20 8e b3	jsr $b38e	Parse:		jsr PopA		; pop c (check for underflow)
.baa0	85 1c		sta $1c		Parse_A:	sta tmp5		; save delimiter
.baa2	ca		dex				dex			; alloc space for addr
.baa3	ca		dex				dex
.baa4	ca		dex				dex			; alloc space for length
.baa5	ca		dex				dex
.baa6	18		clc				clc			; addr= cib+toin
.baa7	a5 08		lda $08				lda toin+0
.baa9	65 04		adc $04				adc cib+0
.baab	95 26		sta $26,x			sta DStack+2,x
.baad	a5 09		lda $09				lda toin+1
.baaf	65 05		adc $05				adc cib+1
.bab1	95 27		sta $27,x			sta DStack+3,x
.bab3	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.bab5	84 14		sty $14				sty tmp1+0
.bab7	a5 04		lda $04				lda cib+0		; tmp2= cib + (toin & $ff00)
.bab9	85 16		sta $16				sta tmp2+0
.babb	18		clc				clc
.babc	a5 09		lda $09				lda toin+1		; tmp1= toin
.babe	85 15		sta $15				sta tmp1+1
.bac0	65 05		adc $05				adc cib+1
.bac2	85 17		sta $17				sta tmp2+1
.bac4	a9 00		lda #$00			lda #0		; Initialize the offset we use to adjust EOL or found delimiter
.bac6	85 1d		sta $1d				sta tmp5+1
.bac8					_loop:
.bac8	c4 06		cpy $06				cpy ciblen+0		; end of string?
.baca	a5 09		lda $09				lda toin+1
.bacc	e5 07		sbc $07				sbc ciblen+1
.bace	b0 1d		bcs $baed			bcs _eol
.bad0	a5 1c		lda $1c				lda tmp5+0		; get delimiter
.bad2	c9 20		cmp #$20			cmp #AscSP		; is it whitespace?
.bad4	d0 08		bne $bade			bne _not_whitespace
.bad6	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.bad8	c9 21		cmp #$21			cmp #AscSP+1		; we're looking for all whitespace
.bada	90 0f		bcc $baeb			bcc _found_delimiter
.badc	b0 04		bcs $bae2			bcs _not_delimiter
.bade	d1 16		cmp ($16),y	_not_whitespace: cmp (tmp2),y		; compare delimter to cib[toin]
.bae0	f0 09		beq $baeb			beq _found_delimiter
.bae2					_not_delimiter:
.bae2	c8		iny				iny			; next character
.bae3	d0 e3		bne $bac8			bne _loop
.bae5	e6 09		inc $09				inc toin+1
.bae7	e6 17		inc $17				inc tmp2+1
.bae9	d0 dd		bne $bac8			bne _loop
.baeb					_found_delimiter:
.baeb	e6 1d		inc $1d				inc tmp5+1
.baed					_eol:
.baed	38		sec				sec			; length = toin - tmp1
.baee	98		tya				tya
.baef	e5 14		sbc $14				sbc tmp1+0
.baf1	95 24		sta $24,x			sta DStack+0,x
.baf3	a5 09		lda $09				lda toin+1
.baf5	e5 15		sbc $15				sbc tmp1+1
.baf7	95 25		sta $25,x			sta DStack+1,x
.baf9	18		clc				clc			; toin = toin + delimiter_offset
.bafa	98		tya				tya
.bafb	65 1d		adc $1d				adc tmp5+1
.bafd	85 08		sta $08				sta toin+0
.baff	90 02		bcc $bb03			bcc +
.bb01	e6 09		inc $09				inc toin+1
.bb03					+
=102					CL	.var *-(WordListLink+wh_Xt)
=$bb03					en = *	; remember here
>ba9b	66					.byte CL	;wh_CodeLength
.bb03	60		rts				rts
>bb04	45 78 65 63 75 74 65 2d		L1:	.text "Execute-Parsing"	;  name of word as a string, ending at wh_NameLastChar
>bb0c	50 61 72 73 69 6e 67
>bb13	ef					.byte (("Execute-Parsing"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb14	18 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb16	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb17	18					.byte UF+NN	;wh_Flags	dictionary flags
=47763					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb18					Execute_parsing:
.bb18	20 ee b3	jsr $b3ee			jsr underflow_3
.bb1b	20 b3 c3	jsr $c3b3			jsr Input_To_R		; save existing input for later
.bb1e	20 31 ce	jsr $ce31			jsr Not_Rot		; -ROT ( xt addr u )
.bb21	20 aa b3	jsr $b3aa			jsr PopYA		; TOS is new ciblen
.bb24	85 06		sta $06				sta ciblen+0
.bb26	84 07		sty $07				sty ciblen+1
.bb28	20 aa b3	jsr $b3aa			jsr PopYA		; NOS is new cib
.bb2b	85 04		sta $04				sta cib+0
.bb2d	84 05		sty $05				sty cib+1
.bb2f	a9 00		lda #$00			lda #0
.bb31	85 08		sta $08				sta toin+0		; Set >IN to zero
.bb33	85 09		sta $09				sta toin+1
.bb35	20 cd cd	jsr $cdcd			jsr Execute
.bb38	20 d5 c3	jsr $c3d5			jsr R_To_Input		; restore
=35					CL	.var *-(WordListLink+wh_Xt)
=$bb3b					en = *	; remember here
>bb16	23					.byte CL	;wh_CodeLength
.bb3b	60		rts				rts
>bb3c	53 6f 75 72 63 65		L1:	.text "Source"	;  name of word as a string, ending at wh_NameLastChar
>bb42	a6					.byte (("Source"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb43	93 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb45	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb46	08					.byte NN	;wh_Flags	dictionary flags
=47810					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb47					Source:
.bb47	a5 04		lda $04				lda cib+0	; push address
.bb49	a4 05		ldy $05				ldy cib+1
.bb4b	20 64 b7	jsr $b764			jsr PushYA
.bb4e	a5 06		lda $06				lda ciblen+0	; push size, return
.bb50	a4 07		ldy $07				ldy ciblen+1
.bb52	4c 64 b7	jmp $b764			jmp PushYA
=14					CL	.var *-(WordListLink+wh_Xt)
=$bb55					en = *	; remember here
>bb45	0e					.byte CL	;wh_CodeLength
>bb55	53 6f 75 72 63 65 2d 49		L1:	.text "Source-Id"	;  name of word as a string, ending at wh_NameLastChar
>bb5d	64
>bb5e	89					.byte (("Source-Id"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb5f	c2 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb61	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb62	08					.byte NN	;wh_Flags	dictionary flags
=47838					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb63	a5 02		lda $02		Source_Id:	lda insrc+0
.bb65	a4 03		ldy $03				ldy insrc+1
.bb67	4c 64 b7	jmp $b764			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$bb6a					en = *	; remember here
>bb61	07					.byte CL	;wh_CodeLength
>bb6a	45 78 69 74			L1:	.text "Exit"	;  name of word as a string, ending at wh_NameLastChar
>bb6e	84					.byte (("Exit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb6f	de ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb71	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb72	03					.byte AN+CO	;wh_Flags	dictionary flags
=47854					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb73					Exit:
.bb73	60		rts				rts		; keep before FEnd so it gets inlined
=1					CL	.var *-(WordListLink+wh_Xt)
=$bb74					en = *	; remember here
>bb71	01					.byte CL	;wh_CodeLength
>bb74	3b				L1:	.text ";"	;  name of word as a string, ending at wh_NameLastChar
>bb75	61					.byte ((";"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb76	ee ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb78	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb79	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=47861					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb7a					Semicolon:
.bb7a	20 e8 b6	jsr $b6e8			jsr Left_Bracket	; switch to interpret state
.bb7d	24 0c		bit $0c				bit status		; is this a : word or a :NONAME word?
.bb7f	70 0c		bvs $bb8d			bvs _colonword
.bb81	a9 60		lda #$60			lda #$60		; compile an RTS
.bb83	20 a6 cc	jsr $cca6			jsr C_Comma_A
.bb86	a5 0e		lda $0e				lda workword+0		; push xt, return
.bb88	a4 0f		ldy $0f				ldy workword+1
.bb8a	4c 64 b7	jmp $b764			jmp PushYA
.bb8d					_colonword:
.bb8d	24 0c		bit $0c				bit status
.bb8f	10 1d		bpl $bbae			bpl _new_word	; Bit 7 is clear = new word
.bb91	a5 0e		lda $0e				lda WorkWord+0		; push our nt
.bb93	a4 0f		ldy $0f				ldy WorkWord+1
.bb95	20 64 b7	jsr $b764			jsr PushYA
.bb98	20 b4 bd	jsr $bdb4			jsr Name_To_String	; get our name string
.bb9b	a9 78		lda #$78			lda #<str_redefined	; string "redefined"
.bb9d	a0 da		ldy #$da			ldy #>str_redefined
.bb9f	20 b0 cd	jsr $cdb0			jsr Print_ASCIIZ_YA_no_lf
.bba2	20 8f cd	jsr $cd8f			jsr Type		; print the offending word.
.bba5	20 82 cd	jsr $cd82			jsr Space
.bba8	a9 7f		lda #$7f			lda #$ff-%10000000
.bbaa	25 0c		and $0c				and status
.bbac	85 0c		sta $0c				sta status
.bbae					_new_word:
.bbae	20 e5 c0	jsr $c0e5			jsr Header_Link		; finish linking into current dictionary
.bbb1	20 b9 bb	jsr $bbb9			jsr adjust_z		; fix word length
.bbb4	a9 60		lda #$60			lda #$60		; compile an RTS
.bbb6	4c a6 cc	jmp $cca6			jmp C_Comma_A
=63					CL	.var *-(WordListLink+wh_Xt)
=$bbb9					en = *	; remember here
>bb78	3f					.byte CL	;wh_CodeLength
.bbb9					adjust_z:
.bbb9	a5 10		lda $10				lda dp+0		; tmp1= xt
.bbbb	18		clc				clc
.bbbc	69 85		adc #$85			adc #Wh_xt
.bbbe	85 14		sta $14				sta tmp1+0
.bbc0	a5 11		lda $11				lda dp+1
.bbc2	69 00		adc #$00			adc #0
.bbc4	85 15		sta $15				sta tmp1+1
.bbc6	38		sec				sec			; length= cp-xt
.bbc7	a5 00		lda $00				lda cp+0
.bbc9	e5 14		sbc $14				sbc tmp1+0
.bbcb	a8		tay				tay
.bbcc	a5 01		lda $01				lda cp+1
.bbce	e5 15		sbc $15				sbc tmp1+1
.bbd0	f0 0c		beq $bbde			beq _short		; length > $ff ?
.bbd2	a0 84		ldy #$84			ldy #Wh_Flags		; make it NN
.bbd4	b1 10		lda ($10),y			lda (dp),y
.bbd6	29 fd		and #$fd			and #$ff-AN
.bbd8	09 08		ora #$08			ora #NN
.bbda	91 10		sta ($10),y			sta (dp),y
.bbdc	a0 ff		ldy #$ff			ldy #$ff		; set max length for header
.bbde	98		tya		_short:		tya			; fill in length in header
.bbdf	a0 83		ldy #$83			ldy #Wh_CodeLength
.bbe1	91 10		sta ($10),y			sta (dp),y
.bbe3	60		rts				rts
>bbe4	3a				L1:	.text ":"	;  name of word as a string, ending at wh_NameLastChar
>bbe5	41					.byte ((":"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bbe6	f5 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bbe8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bbe9	08					.byte NN	;wh_Flags	dictionary flags
=47973					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bbea					Colon:
.bbea	20 fe b6	jsr $b6fe			jsr Right_Bracket	; switch to compile state
.bbed	a5 0c		lda $0c				lda status
.bbef	09 40		ora #$40			ora #%01000000	; tell ";" and RECURSE this is a normal word
.bbf1	09 80		ora #$80			ora #%10000000	; Tell Header_Build not to print warning for duplicate name.
.bbf3	85 0c		sta $0c				sta status
.bbf5	4c f0 c0	jmp $c0f0			jmp Header_Build	; compile word header (but don't link)
=14					CL	.var *-(WordListLink+wh_Xt)
=$bbf8					en = *	; remember here
>bbe8	0e					.byte CL	;wh_CodeLength
>bbf8	3a 4e 6f 4e 61 6d 65		L1:	.text ":NoName"	;  name of word as a string, ending at wh_NameLastChar
>bbff	a7					.byte ((":NoName"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bc00	65 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc02	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc03	08					.byte NN	;wh_Flags	dictionary flags
=47999					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc04					Colon_NoName:
.bc04	20 fe b6	jsr $b6fe			jsr Right_Bracket	; switch to compile state
.bc07	a9 bf		lda #$bf			lda #$ff-%01000000	; tell ";" and RECURSE this is
.bc09	25 0c		and $0c				and status		; a :NONAME word.
.bc0b	85 0c		sta $0c				sta status
.bc0d	a5 00		lda $00				lda cp+0
.bc0f	85 0e		sta $0e				sta workword+0
.bc11	a5 01		lda $01				lda cp+1
.bc13	85 0f		sta $0f				sta workword+1
=17					CL	.var *-(WordListLink+wh_Xt)
=$bc15					en = *	; remember here
>bc02	11					.byte CL	;wh_CodeLength
.bc15	60		rts				rts
>bc16	27				L1:	.text "'"	;  name of word as a string, ending at wh_NameLastChar
>bc17	e1					.byte (("'"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bc18	7f bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc1a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc1b	08					.byte NN	;wh_Flags	dictionary flags
=48023					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc1c	20 22 bc	jsr $bc22	Tick:		jsr Tick_Nt
.bc1f	4c 9c bd	jmp $bd9c			jmp Name_To_Int	; ( nt -- xt )
=6					CL	.var *-(WordListLink+wh_Xt)
=$bc22					en = *	; remember here
>bc1a	06					.byte CL	;wh_CodeLength
.bc22	20 86 ba	jsr $ba86	Tick_Nt:	jsr parse_name_check	; ( -- addr u )
.bc25	4c be bc	jmp $bcbe			jmp find_name_check	; ( addr u -- nt )
>bc28	5b 27 5d			L1:	.text "[']"	;  name of word as a string, ending at wh_NameLastChar
>bc2b	a3					.byte (("[']"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bc2c	97 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc2e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc2f	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=48043					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc30	20 1c bc	jsr $bc1c	Bracket_Tick:	jsr Tick
.bc33	4c 17 b7	jmp $b717			jmp Literal
=6					CL	.var *-(WordListLink+wh_Xt)
=$bc36					en = *	; remember here
>bc2e	06					.byte CL	;wh_CodeLength
>bc36	46 69 6e 64			L1:	.text "Find"	;  name of word as a string, ending at wh_NameLastChar
>bc3a	84					.byte (("Find"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bc3b	ab bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc3d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc3e	18					.byte UF+NN	;wh_Flags	dictionary flags
=48058					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc3f					Find:
.bc3f	20 d4 b3	jsr $b3d4			jsr underflow_1
.bc42	b5 25		lda $25,x			lda DStack+1,x		; MSB
.bc44	48		pha				pha
.bc45	b5 24		lda $24,x			lda DStack+0,x		; LSB
.bc47	48		pha				pha
.bc48	20 78 b1	jsr $b178			jsr Count		; ( caddr -- addr u )
.bc4b	20 92 bc	jsr $bc92			jsr find_name		; ( addr u -- nt | 0 )
.bc4e	b5 25		lda $25,x			lda DStack+1,x		; word found?
.bc50	d0 0a		bne $bc5c			bne _found_word
.bc52	20 97 b7	jsr $b797			jsr False		; ( 0 0 )
.bc55	68		pla				pla			; LSB of address
.bc56	95 26		sta $26,x			sta DStack+2,x
.bc58	68		pla				pla
.bc59	95 27		sta $27,x			sta DStack+3,x		; MSB of address
.bc5b	60		rts				rts			; ( addr 0 )
.bc5c					_found_word:
.bc5c	68		pla				pla			; We don't need the address after all, RDrop it
.bc5d	68		pla				pla
.bc5e	20 07 cf	jsr $cf07			jsr Dup		; ( nt nt )
.bc61	20 9c bd	jsr $bd9c			jsr Name_To_Int	; ( nt xt )
.bc64	20 25 cf	jsr $cf25			jsr Swap		; ( xt nt )
.bc67	a0 00		ldy #$00			ldy #0			; Prepare flag
.bc69	a9 84		lda #$84			lda #Wh_Flags		; get flags
.bc6b	20 ac c9	jsr $c9ac			jsr Plus_A		; ( xt nt+Wh_Flags )
.bc6e	a1 24		lda ($24,x)			lda (DStack+0,x)		; ( xt flags )
.bc70	29 04		and #$04			and #IM
.bc72	d0 07		bne $bc7b			bne _immediate		; bit set, we're immediate
.bc74	a9 ff		lda #$ff			lda #$FF		; We're not immediate, return -1
.bc76	95 24		sta $24,x			sta DStack+0,x
.bc78	95 25		sta $25,x			sta DStack+1,x
.bc7a	60		rts				rts
.bc7b					_immediate:
.bc7b	a9 01		lda #$01			lda #1			; We're immediate, return 1
.bc7d	95 24		sta $24,x			sta DStack+0,x
.bc7f	a9 00		lda #$00			lda #0
.bc81	95 25		sta $25,x			sta DStack+1,x
=68					CL	.var *-(WordListLink+wh_Xt)
=$bc83					en = *	; remember here
>bc3d	44					.byte CL	;wh_CodeLength
.bc83	60		rts				rts
>bc84	46 69 6e 64 2d 4e 61 6d		L1:	.text "Find-Name"	;  name of word as a string, ending at wh_NameLastChar
>bc8c	65
>bc8d	a9					.byte (("Find-Name"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bc8e	ba bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc90	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc91	18					.byte UF+NN	;wh_Flags	dictionary flags
=48141					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc92					find_name:
.bc92	20 e9 b3	jsr $b3e9			jsr underflow_2
.bc95	20 cb bc	jsr $bccb			jsr fina_pattern_prepare ; tmp2 = pseudo-header of pattern name
.bc98	a9 ff		lda #$ff			lda #$ff		; for each wordlist in the wordlist search order.
.bc9a	95 25		sta $25,x			sta DStack+1,x
.bc9c					_wordlist_next:
.bc9c	f6 25		inc $25,x			inc DStack+1,x
.bc9e	b4 25		ldy $25,x			ldy DStack+1,x
.bca0	cc 2a 03	cpy $032a			cpy Num_OrderV		; at end of list?
.bca3	90 06		bcc $bcab			bcc _nextS
.bca5	d0 14		bne $bcbb			bne _fail
.bca7	a9 03		lda #$03			lda #wid_Root		; also try root wordlist
.bca9	d0 03		bne $bcae			bne _nextA
.bcab	b9 2b 03	lda $032b,y	_nextS:		lda Search_OrderV,y	; A = search_order[Y]  get wordlist ID
.bcae	20 f5 bc	jsr $bcf5	_nextA:		jsr fina_search_wordlist
.bcb1	f0 e9		beq $bc9c			beq _wordlist_next
.bcb3	a5 14		lda $14				lda tmp1+0		; NOS = nt
.bcb5	95 26		sta $26,x			sta DStack+2,x
.bcb7	a5 15		lda $15				lda tmp1+1
.bcb9	95 27		sta $27,x			sta DStack+3,x
.bcbb					_fail:
.bcbb	e8		inx				inx			; Drop	pattern name length
.bcbc	e8		inx				inx
=43					CL	.var *-(WordListLink+wh_Xt)
=$bcbd					en = *	; remember here
>bc90	2b					.byte CL	;wh_CodeLength
.bcbd	60		rts				rts
.bcbe					find_name_check:
.bcbe	20 92 bc	jsr $bc92			jsr find_name
.bcc1	b5 25		lda $25,x			lda DStack+1,x		; not found?
.bcc3	f0 01		beq $bcc6			beq _NotFound
.bcc5	60		rts				rts
.bcc6	a9 f3		lda #$f3	_NotFound:	lda #$100+err_UndefinedWord	; complain & quit
.bcc8	4c 33 b4	jmp $b433			jmp ThrowA
.bccb					fina_pattern_prepare:
.bccb	38		sec				sec			; A= 0 - name start offset
.bccc	b5 24		lda $24,x			lda DStack+0,x
.bcce	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.bcd0	75 26		adc $26,x			adc DStack+2,x		; tmp2 = pattern nt
.bcd2	85 16		sta $16				sta tmp2+0
.bcd4	a9 ff		lda #$ff			lda #$ff
.bcd6	75 27		adc $27,x			adc DStack+3,x
.bcd8	85 17		sta $17				sta tmp2+1
.bcda	a9 7f		lda #$7f			lda #wh_NameLastChar
.bcdc	38		sec				sec
.bcdd	f5 24		sbc $24,x			sbc DStack+0,x
.bcdf	85 1a		sta $1a				sta tmp4+0
.bce1	a0 7f		ldy #$7f			ldy #wh_NameLastChar	; tmp3+0= wh_HNL (hash & length)
.bce3	b1 16		lda ($16),y			lda (tmp2),y
.bce5	0a		asl a				asl a
.bce6	0a		asl a				asl a
.bce7	0a		asl a				asl a
.bce8	0a		asl a				asl a
.bce9	0a		asl a				asl a
.bcea	15 24		ora $24,x			ora DStack+0,x
.bcec	85 18		sta $18				sta tmp3+0
.bcee	a9 00		lda #$00			lda #0			; assuming failure
.bcf0	95 26		sta $26,x			sta DStack+2,x
.bcf2	95 27		sta $27,x			sta DStack+3,x
.bcf4	60		rts				rts
.bcf5					fina_search_wordlist:
.bcf5	86 19		stx $19				stx tmp3+1		; save data stack index
.bcf7	0a		asl a				asl			; tmp1 = up->wordlists[A]
.bcf8	a8		tay				tay
.bcf9	be 12 03	ldx $0312,y			ldx WordlistsV+0,y
.bcfc	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bcff	d0 0f		bne $bd10			bne _word_3		;   not end-of-list?
.bd01	08		php		_rts:		php
.bd02	a6 19		ldx $19				ldx tmp3+1		; restore data stack index
.bd04	28		plp				plp
.bd05	60		rts				rts			; Z= end_of_list
.bd06					_word_next:
.bd06	a0 81		ldy #$81			ldy #wh_WordListLink	; tmp1= tmp1->Wh_WordListLink
.bd08	b1 14		lda ($14),y			lda (tmp1),y
.bd0a	aa		tax				tax
.bd0b	c8		iny				iny
.bd0c	b1 14		lda ($14),y			lda (tmp1),y
.bd0e	f0 f1		beq $bd01			beq _rts		; end of list?
.bd10	85 15		sta $15		_word_3:	sta tmp1+1
.bd12	86 14		stx $14				stx tmp1+0
.bd14	a0 80		ldy #$80			ldy #Wh_HNL		; Are hash & name length the same?
.bd16	b1 14		lda ($14),y			lda (tmp1),y
.bd18	c5 18		cmp $18				cmp tmp3+0
.bd1a	d0 ea		bne $bd06			bne _word_next
.bd1c	a4 1a		ldy $1a				ldy tmp4+0		; Y= index of 1st char -1
.bd1e	c8		iny		_char_next:	iny			; to next char
.bd1f	30 e0		bmi $bd01			bmi _rts		; end of string?
.bd21	b1 16		lda ($16),y			lda (tmp2),y		; char of pattern name
.bd23	51 14		eor ($14),y			eor (tmp1),y		; char of this word name
.bd25	f0 f7		beq $bd1e			beq _char_next		;   exact match?
.bd27	c9 20		cmp #$20			cmp #$20		;   only a case mismatch?
.bd29	d0 db		bne $bd06			bne _word_next
.bd2b	b1 14		lda ($14),y			lda (tmp1),y		;   verify it is alpha char
.bd2d	29 df		and #$df			and #$df
.bd2f	e9 41		sbc #$41			sbc #'A'
.bd31	c9 1a		cmp #$1a			cmp #'Z'-'A'+1
.bd33	90 e9		bcc $bd1e			bcc _char_next
.bd35	b0 cf		bcs $bd06			bcs _word_next
>bd37	49 6e 74 3e 4e 61 6d 65		L1:	.text "Int>Name"	;  name of word as a string, ending at wh_NameLastChar
>bd3f	a8					.byte (("Int>Name"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bd40	0d bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd42	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd43	18					.byte UF+NN	;wh_Flags	dictionary flags
=48319					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd44					Int_To_Name:
.bd44	20 d4 b3	jsr $b3d4			jsr underflow_1
.bd47	a9 7b		lda #$7b			lda #$100-Wh_xt		; convert xt on stack to proposed nt
.bd49	20 ec c9	jsr $c9ec			jsr Minus_A
.bd4c	b5 24		lda $24,x			lda DStack+0,x		; tmp3= proposed nt
.bd4e	b4 25		ldy $25,x			ldy DStack+1,x
.bd50	85 18		sta $18				sta tmp3+0
.bd52	84 19		sty $19				sty tmp3+1
.bd54	86 14		stx $14				stx tmp1+0		; save data stack index
.bd56	a9 fe		lda #$fe			lda #$100-2		; for each wordlist
.bd58	85 15		sta $15				sta tmp1+1
.bd5a					_wordlist_next:
.bd5a	a4 15		ldy $15				ldy tmp1+1		; get next wordlist index
.bd5c	c8		iny				iny
.bd5d	c8		iny				iny
.bd5e	84 15		sty $15				sty tmp1+1
.bd60	c0 0c		cpy #$0c			cpy #(Num_OrderV-WordlistsV)/2
.bd62	b0 22		bcs $bd86			bcs _fail
.bd64	be 12 03	ldx $0312,y			ldx WordlistsV+0,y
.bd67	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bd6a	4c 79 bd	jmp $bd79			jmp _word_3
.bd6d	86 16		stx $16		_word_next:	stx tmp2+0
.bd6f	85 17		sta $17				sta tmp2+1
.bd71	a0 81		ldy #$81			ldy #wh_WordListLink	; follow wh_WordListLink to next word
.bd73	b1 16		lda ($16),y			lda (tmp2),y
.bd75	aa		tax				tax
.bd76	c8		iny				iny
.bd77	b1 16		lda ($16),y			lda (tmp2),y
.bd79	f0 df		beq $bd5a	_word_3:	beq _wordlist_next	;  end of list?
.bd7b	c5 19		cmp $19				cmp tmp3+1		;  match?
.bd7d	d0 ee		bne $bd6d			bne _word_next
.bd7f	e4 18		cpx $18				cpx tmp3+0
.bd81	d0 ea		bne $bd6d			bne _word_next
.bd83	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.bd85	60		rts				rts
.bd86					_fail:
.bd86	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.bd88	a9 00		lda #$00			lda #0			; return a zero to indicate that we didn't find it.
.bd8a	95 24		sta $24,x			sta DStack+0,x
.bd8c	95 25		sta $25,x			sta DStack+1,x
.bd8e	60		rts				rts
=75					CL	.var *-(WordListLink+wh_Xt)
=$bd8f					en = *	; remember here
>bd42	4b					.byte CL	;wh_CodeLength
>bd8f	4e 61 6d 65 3e 49 6e 74		L1:	.text "Name>Int"	;  name of word as a string, ending at wh_NameLastChar
>bd97	88					.byte (("Name>Int"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bd98	bf bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd9a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd9b	18					.byte UF+NN	;wh_Flags	dictionary flags
=48407					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd9c					Name_To_Int:
.bd9c	20 d4 b3	jsr $b3d4			jsr underflow_1
.bd9f	a9 85		lda #$85			lda #wh_Xt
.bda1	4c ac c9	jmp $c9ac			jmp Plus_A
=8					CL	.var *-(WordListLink+wh_Xt)
=$bda4					en = *	; remember here
>bd9a	08					.byte CL	;wh_CodeLength
>bda4	4e 61 6d 65 3e 53 74 72		L1:	.text "Name>String"	;  name of word as a string, ending at wh_NameLastChar
>bdac	69 6e 67
>bdaf	eb					.byte (("Name>String"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bdb0	17 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bdb2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bdb3	18					.byte UF+NN	;wh_Flags	dictionary flags
=48431					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bdb4					Name_To_String:
.bdb4	20 d4 b3	jsr $b3d4			jsr underflow_1
.bdb7	b5 24		lda $24,x			lda DStack+0,x		; tmp1 = nt
.bdb9	b4 25		ldy $25,x			ldy DStack+1,x
.bdbb	85 14		sta $14				sta tmp1+0
.bdbd	84 15		sty $15				sty tmp1+1
.bdbf	a0 80		ldy #$80			ldy #Wh_HNL
.bdc1	b1 14		lda ($14),y			lda (tmp1),y
.bdc3	29 1f		and #$1f			and #wh_HNL_NameLengthMask
.bdc5	48		pha				pha
.bdc6	49 ff		eor #$ff			eor #$ff
.bdc8	38		sec				sec
.bdc9	69 80		adc #$80			adc #Wh_NameLastChar+1	; calc start offset
.bdcb	20 ac c9	jsr $c9ac			jsr Plus_A		; calc start addr
.bdce	68		pla				pla			; push length
.bdcf	4c a6 b7	jmp $b7a6			jmp PushZA
=30					CL	.var *-(WordListLink+wh_Xt)
=$bdd2					en = *	; remember here
>bdb2	1e					.byte CL	;wh_CodeLength
>bdd2	3e 42 6f 64 79			L1:	.text ">Body"	;  name of word as a string, ending at wh_NameLastChar
>bdd7	25					.byte ((">Body"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bdd8	2f bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bdda	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bddb	18					.byte UF+NN	;wh_Flags	dictionary flags
=48471					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bddc					To_Body:
.bddc	20 d4 b3	jsr $b3d4			jsr underflow_1
.bddf	a9 03		lda #$03			lda #3		; PFA is after the beginning JSR abs
.bde1	4c ac c9	jmp $c9ac			jmp Plus_A
=8					CL	.var *-(WordListLink+wh_Xt)
=$bde4					en = *	; remember here
>bdda	08					.byte CL	;wh_CodeLength
>bde4	45 72 61 73 65			L1:	.text "Erase"	;  name of word as a string, ending at wh_NameLastChar
>bde9	a5					.byte (("Erase"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bdea	57 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bdec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bded	08					.byte NN	;wh_Flags	dictionary flags
=48489					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bdee					Erase:
.bdee	20 b5 b7	jsr $b7b5			jsr Zero
.bdf1	4c 0d be	jmp $be0d			jmp Fill
=6					CL	.var *-(WordListLink+wh_Xt)
=$bdf4					en = *	; remember here
>bdec	06					.byte CL	;wh_CodeLength
>bdf4	42 6c 61 6e 6b			L1:	.text "Blank"	;  name of word as a string, ending at wh_NameLastChar
>bdf9	65					.byte (("Blank"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bdfa	69 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bdfc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bdfd	08					.byte NN	;wh_Flags	dictionary flags
=48505					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bdfe					Blank:
.bdfe	20 d4 b7	jsr $b7d4			jsr Bl
.be01	4c 0d be	jmp $be0d			jmp Fill
=6					CL	.var *-(WordListLink+wh_Xt)
=$be04					en = *	; remember here
>bdfc	06					.byte CL	;wh_CodeLength
>be04	46 69 6c 6c			L1:	.text "Fill"	;  name of word as a string, ending at wh_NameLastChar
>be08	84					.byte (("Fill"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be09	79 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be0b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be0c	18					.byte UF+NN	;wh_Flags	dictionary flags
=48520					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be0d					Fill:
.be0d	20 ee b3	jsr $b3ee			jsr underflow_3
.be10	b5 28		lda $28,x			lda DStack+4,x		; tmp1= address
.be12	85 14		sta $14				sta tmp1+0
.be14	b5 29		lda $29,x			lda DStack+5,x
.be16	85 15		sta $15				sta tmp1+1
.be18	b5 26		lda $26,x			lda DStack+2,x		; tmp2= counter.lo
.be1a	85 16		sta $16				sta tmp2+0
.be1c	f6 27		inc $27,x			inc DStack+3,x		; so decrement & test for 0 works
.be1e	b5 24		lda $24,x			lda DStack+0,x		; A= fill byte
.be20	a0 00		ldy #$00			ldy #0
.be22	c4 16		cpy $16		_loop:		cpy tmp2+0		; done?
.be24	f0 09		beq $be2f			beq _test2
.be26	91 14		sta ($14),y	_3:		sta (tmp1),y		; store a byte
.be28	c8		iny				iny			; to next byte
.be29	d0 f7		bne $be22			bne _loop
.be2b	e6 15		inc $15				inc tmp1+1		; increment addr page
.be2d	d0 f3		bne $be22			bne _loop
.be2f	d6 27		dec $27,x	_test2:		dec DStack+3,x		; any more pages?
.be31	d0 f3		bne $be26			bne _3
.be33	4c 12 ad	jmp $ad12			jmp ThreeDrop	; Drop three cells off the Data Stack.
=41					CL	.var *-(WordListLink+wh_Xt)
=$be36					en = *	; remember here
>be0b	29					.byte CL	;wh_CodeLength
>be36	56 61 72 69 61 62 6c 65		L1:	.text "Variable"	;  name of word as a string, ending at wh_NameLastChar
>be3e	a8					.byte (("Variable"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be3f	88 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be41	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be42	08					.byte NN	;wh_Flags	dictionary flags
=48574					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be43	20 7f c1	jsr $c17f	Variable:	jsr Create		; compile word header & push PFA
.be46	a9 00		lda #$00			lda #0			; allot & initialize the variable's data
.be48	a8		tay				tay
.be49	4c c0 cc	jmp $ccc0			jmp Comma_YA
=9					CL	.var *-(WordListLink+wh_Xt)
=$be4c					en = *	; remember here
>be41	09					.byte CL	;wh_CodeLength
>be4c	32 56 61 72 69 61 62 6c		L1:	.text "2Variable"	;  name of word as a string, ending at wh_NameLastChar
>be54	65
>be55	a9					.byte (("2Variable"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be56	be bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be58	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be59	08					.byte NN	;wh_Flags	dictionary flags
=48597					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be5a	20 43 be	jsr $be43	Two_variable:	jsr Variable		; compile word header & push PFA & 1st cell of data
.be5d	4c c0 cc	jmp $ccc0			jmp Comma_YA		; alloc & init 2nd cell of data
=6					CL	.var *-(WordListLink+wh_Xt)
=$be60					en = *	; remember here
>be58	06					.byte CL	;wh_CodeLength
>be60	43 6f 6e 73 74 61 6e 74		L1:	.text "Constant"	;  name of word as a string, ending at wh_NameLastChar
>be68	88					.byte (("Constant"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be69	d5 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be6b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be6c	18					.byte UF+NN	;wh_Flags	dictionary flags
=48616					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be6d					Constant:
.be6d	20 d4 b3	jsr $b3d4			jsr underflow_1
.be70	20 e2 c0	jsr $c0e2			jsr Header_Comma	; compile word header
.be73	20 20 b7	jsr $b720			jsr LitCompile		; compile code to load registers, & pick a subroutine
.be76	20 fc cc	jsr $ccfc			jsr Jmp_Comma_YA	; compile code to JMP to the subroutine
.be79	4c b9 bb	jmp $bbb9			jmp adjust_z		; fix word length
=15					CL	.var *-(WordListLink+wh_Xt)
=$be7c					en = *	; remember here
>be6b	0f					.byte CL	;wh_CodeLength
>be7c	32 43 6f 6e 73 74 61 6e		L1:	.text "2Constant"	;  name of word as a string, ending at wh_NameLastChar
>be84	74
>be85	89					.byte (("2Constant"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be86	e8 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be88	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be89	18					.byte UF+NN	;wh_Flags	dictionary flags
=48645					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be8a					Two_constant:
.be8a	20 e9 b3	jsr $b3e9			jsr underflow_2
.be8d	20 e2 c0	jsr $c0e2			jsr Header_Comma	; compile word header
.be90	20 25 cf	jsr $cf25			jsr Swap
.be93	20 17 b7	jsr $b717			jsr Literal		; compile push lo cell
.be96	20 20 b7	jsr $b720			jsr LitCompile		; compile push hi cell, YA=exit routine
.be99	20 fc cc	jsr $ccfc			jsr Jmp_Comma_YA	; compile JMP from above
.be9c	4c b9 bb	jmp $bbb9			jmp adjust_z		; fix word length
=21					CL	.var *-(WordListLink+wh_Xt)
=$be9f					en = *	; remember here
>be88	15					.byte CL	;wh_CodeLength
>be9f	56 61 6c 75 65			L1:	.text "Value"	;  name of word as a string, ending at wh_NameLastChar
>bea4	a5					.byte (("Value"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bea5	05 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bea7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bea8	18					.byte UF+NN	;wh_Flags	dictionary flags
=48676					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bea9					Value:
.bea9	20 d4 b3	jsr $b3d4			jsr underflow_1
.beac	20 e2 c0	jsr $c0e2			jsr Header_Comma	; compile word header
.beaf	20 4a b7	jsr $b74a			jsr ldya_immed_comma	; compile lda # & ldy #
.beb2	a9 64		lda #$64			lda #<PushYA		; compile jmp PushYA
.beb4	a0 b7		ldy #$b7			ldy #>PushYA
.beb6	20 fc cc	jsr $ccfc			jsr Jmp_Comma_YA
.beb9	4c b9 bb	jmp $bbb9			jmp adjust_z		; fix word length
=19					CL	.var *-(WordListLink+wh_Xt)
=$bebc					en = *	; remember here
>bea7	13					.byte CL	;wh_CodeLength
>bebc	32 56 61 6c 75 65		L1:	.text "2Value"	;  name of word as a string, ending at wh_NameLastChar
>bec2	a6					.byte (("2Value"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bec3	24 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bec5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bec6	18					.byte UF+NN	;wh_Flags	dictionary flags
=48706					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bec7					TwoValue:
.bec7	20 e9 b3	jsr $b3e9			jsr underflow_2
.beca	20 e2 c0	jsr $c0e2			jsr Header_Comma	; compile word header
.becd	a9 da		lda #$da			lda #<TwoValue_Runtime	; compile JSR TValue_Runtime
.becf	a0 be		ldy #$be			ldy #>TwoValue_Runtime
.bed1	20 e5 cc	jsr $cce5			jsr Jsr_Comma_YA
.bed4	20 b9 bb	jsr $bbb9			jsr adjust_z		; fix word length
.bed7	4c ce cc	jmp $ccce			jmp Two_Comma		; compile the value, return
=19					CL	.var *-(WordListLink+wh_Xt)
=$beda					en = *	; remember here
>bec5	13					.byte CL	;wh_CodeLength
.beda					TwoValue_Runtime:
.beda	68		pla				pla			; pop RTS addr, +1,
.bedb	18		clc				clc
.bedc	69 01		adc #$01			adc #1
.bede	85 14		sta $14				sta tmp1+0
.bee0	68		pla				pla
.bee1	69 00		adc #$00			adc #0
.bee3	85 15		sta $15				sta tmp1+1
.bee5	4c 3d c5	jmp $c53d			jmp Two_Fetch_tmp1	; fetch the data, return
>bee8	54 6f				L1:	.text "To"	;  name of word as a string, ending at wh_NameLastChar
>beea	e2					.byte (("To"[-1]&7)<<5)+(*-L1)	;wh_HNL
>beeb	42 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>beed	03					.byte 3		;wh_CodeLength  (with placeholder value)
>beee	0c					.byte NN+IM	;wh_Flags	dictionary flags
=48746					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.beef					To:
.beef	20 1c bc	jsr $bc1c			jsr Tick		; We always need the xt of the target word
.bef2	b5 24		lda $24,x			lda DStack+0,x		; tmp1= xt
.bef4	b4 25		ldy $25,x			ldy DStack+1,x
.bef6	85 14		sta $14				sta tmp1+0
.bef8	84 15		sty $15				sty tmp1+1
.befa	a0 00		ldy #$00			ldy #0			; determine what type xt points at
.befc	b1 14		lda ($14),y			lda (tmp1),y
.befe	c9 a0		cmp #$a0			cmp #$a0		;   LDY #
.bf00	d0 38		bne $bf3a			bne _Test2
.bf02	a5 0a		lda $0a				lda state		; check compile state
.bf04	f0 20		beq $bf26			beq _Value_interpret
.bf06	a9 aa		lda #$aa			lda #<PopYA		; compile jsr PopYA
.bf08	a0 b3		ldy #$b3			ldy #>PopYA
.bf0a	20 e5 cc	jsr $cce5			jsr Jsr_Comma_YA
.bf0d	a9 8c		lda #$8c			lda #$8C		; compile STY xt+1
.bf0f	20 a6 cc	jsr $cca6			jsr C_Comma_A
.bf12	20 fd c9	jsr $c9fd			jsr One_plus
.bf15	20 07 cf	jsr $cf07			jsr Dup
.bf18	20 bd cc	jsr $ccbd			jsr Comma
.bf1b	a9 8d		lda #$8d			lda #$8D		; compile STA xt+3
.bf1d	20 a6 cc	jsr $cca6			jsr C_Comma_A
.bf20	20 a7 c9	jsr $c9a7			jsr Cell_Plus
.bf23	4c bd cc	jmp $ccbd			jmp Comma
.bf26					_Value_interpret:
.bf26	20 e9 b3	jsr $b3e9			jsr underflow_2		; ( n xt )
.bf29	e8		inx				inx			; Drop xt
.bf2a	e8		inx				inx
.bf2b	b5 24		lda $24,x			lda DStack+0,x		; LSB
.bf2d	a0 03		ldy #$03			ldy #3			;   modify LDA # data
.bf2f	91 14		sta ($14),y			sta (tmp1),y
.bf31	b5 25		lda $25,x			lda DStack+1,x		; MSB
.bf33	a0 01		ldy #$01			ldy #1			;   modify LDY # data
.bf35	91 14		sta ($14),y			sta (tmp1),y
.bf37	e8		inx				inx			; Drop n
.bf38	e8		inx				inx
.bf39	60		rts				rts
.bf3a	c9 20		cmp #$20	_Test2:		cmp #$20		;   JSR abs ?
.bf3c	d0 33		bne $bf71			bne _Err
.bf3e	a9 03		lda #$03			lda #3			; advance xt over the JSR abs to the data
.bf40	20 ac c9	jsr $c9ac			jsr Plus_A
.bf43	a0 01		ldy #$01			ldy #1			; get JSR abs addr lo byte
.bf45	b1 14		lda ($14),y			lda (tmp1),y
.bf47	c9 da		cmp #$da			cmp #<TwoValue_Runtime
.bf49	d0 11		bne $bf5c			bne _Test3
.bf4b	a5 0a		lda $0a				lda state		; check compile state
.bf4d	f0 0a		beq $bf59			beq _2Value_runtime
.bf4f	20 4a b7	jsr $b74a			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bf52	a9 11		lda #$11			lda #<Two_Store_YA
.bf54	a0 c5		ldy #$c5			ldy #>Two_Store_YA
.bf56	4c e5 cc	jmp $cce5			jmp Jsr_Comma_YA	; compile JSR TwoValue_runtime; return
.bf59	4c 0b c5	jmp $c50b	_2Value_runtime: jmp Two_Store
.bf5c					_Test3:
.bf5c	c9 e4		cmp #$e4			cmp #<FValue_runtime
.bf5e	d0 11		bne $bf71			bne _Err
.bf60	a5 0a		lda $0a				lda state		; check compile state
.bf62	f0 0a		beq $bf6e			beq _FValue_interpret
.bf64	20 4a b7	jsr $b74a			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bf67	a9 b0		lda #$b0			lda #<FStore_YA
.bf69	a0 85		ldy #$85			ldy #>FStore_YA
.bf6b	4c e5 cc	jmp $cce5			jmp Jsr_Comma_YA	; compile JSR FValue_runtime; return
.bf6e	4c ad 85	jmp $85ad	_FValue_interpret: jmp FStore
.bf71	a9 e0		lda #$e0	_Err:		lda #$100+err_InvalidName ; unrecognized type.
.bf73	20 33 b4	jsr $b433			jsr ThrowA
=135					CL	.var *-(WordListLink+wh_Xt)
=$bf76					en = *	; remember here
>beed	87					.byte CL	;wh_CodeLength
>bf76	44 4d 61 78			L1:	.text "DMax"	;  name of word as a string, ending at wh_NameLastChar
>bf7a	04					.byte (("DMax"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bf7b	6a be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf7d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf7e	08					.byte NN	;wh_Flags	dictionary flags
=48890					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf7f	a9 80		lda #$80	DMax:		lda #$80
.bf81	d0 0b		bne $bf8e			bne DMin3
=4					CL	.var *-(WordListLink+wh_Xt)
=$bf83					en = *	; remember here
>bf7d	04					.byte CL	;wh_CodeLength
>bf83	44 4d 69 6e			L1:	.text "DMin"	;  name of word as a string, ending at wh_NameLastChar
>bf87	c4					.byte (("DMin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bf88	fa be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf8a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf8b	08					.byte NN	;wh_Flags	dictionary flags
=48903					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf8c	a9 00		lda #$00	DMin:		lda #0
.bf8e	85 16		sta $16		DMin3:		sta tmp2	; save sign correction
.bf90	20 f3 b3	jsr $b3f3			jsr underflow_4
.bf93	b5 26		lda $26,x			lda DStack+2,x	; compare
.bf95	d5 2a		cmp $2a,x			cmp DStack+6,x
.bf97	b5 27		lda $27,x			lda DStack+3,x
.bf99	f5 2b		sbc $2b,x			sbc DStack+7,x
.bf9b	b5 24		lda $24,x			lda DStack+0,x
.bf9d	f5 28		sbc $28,x			sbc DStack+4,x
.bf9f	b5 25		lda $25,x			lda DStack+1,x
.bfa1	f5 29		sbc $29,x			sbc DStack+5,x
.bfa3	50 02		bvc $bfa7			bvc +
.bfa5	49 80		eor #$80			eor #$80	; fix sign
.bfa7	45 16		eor $16		+		eor tmp2
.bfa9	30 0f		bmi $bfba			bmi TwoNip_nouf	; if negative, NOS is larger and needs to be kept
.bfab	4c c1 c4	jmp $c4c1			jmp Two_Drop
=34					CL	.var *-(WordListLink+wh_Xt)
=$bfae					en = *	; remember here
>bf8a	22					.byte CL	;wh_CodeLength
>bfae	32 4e 69 70			L1:	.text "2Nip"	;  name of word as a string, ending at wh_NameLastChar
>bfb2	04					.byte (("2Nip"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bfb3	07 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfb5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfb6	18					.byte UF+NN	;wh_Flags	dictionary flags
=48946					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfb7	20 f3 b3	jsr $b3f3	TwoNip:		jsr underflow_4
.bfba	b5 24		lda $24,x	TwoNip_NoUf:	lda DStack+0,x	; copy dTOS to dNOS
.bfbc	95 28		sta $28,x			sta DStack+4,x
.bfbe	b5 25		lda $25,x			lda DStack+1,x
.bfc0	95 29		sta $29,x			sta DStack+5,x
.bfc2	b5 26		lda $26,x			lda DStack+2,x
.bfc4	95 2a		sta $2a,x			sta DStack+6,x
.bfc6	b5 27		lda $27,x			lda DStack+3,x
.bfc8	95 2b		sta $2b,x			sta DStack+7,x
.bfca	4c c1 c4	jmp $c4c1			jmp Two_Drop
=22					CL	.var *-(WordListLink+wh_Xt)
=$bfcd					en = *	; remember here
>bfb5	16					.byte CL	;wh_CodeLength
>bfcd	53 3e 44			L1:	.text "S>D"	;  name of word as a string, ending at wh_NameLastChar
>bfd0	83					.byte (("S>D"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bfd1	32 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfd3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfd4	10					.byte UF	;wh_Flags	dictionary flags
=48976					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfd5					S_To_D:
.bfd5	20 d4 b3	jsr $b3d4			jsr underflow_1
.bfd8	a0 00		ldy #$00			ldy #0			; assume positive
.bfda	b5 25		lda $25,x			lda DStack+1,x		; test n
.bfdc	10 01		bpl $bfdf			bpl +
.bfde	88		dey				dey			; make negative
.bfdf					+
.bfdf	ca		dex				dex			; push new hi cell
.bfe0	ca		dex				dex
.bfe1	94 24		sty $24,x			sty DStack+0,x
.bfe3	94 25		sty $25,x			sty DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$bfe5					en = *	; remember here
>bfd3	10					.byte CL	;wh_CodeLength
.bfe5	60		rts				rts
>bfe6	44 3e 53			L1:	.text "D>S"	;  name of word as a string, ending at wh_NameLastChar
>bfe9	63					.byte (("D>S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bfea	50 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfed	10					.byte UF	;wh_Flags	dictionary flags
=49001					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfee					D_To_S:
.bfee	20 e9 b3	jsr $b3e9			jsr underflow_2
.bff1	e8		inx				inx		; Drop hi cell
.bff2	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$bff3					en = *	; remember here
>bfec	05					.byte CL	;wh_CodeLength
.bff3	60		rts				rts
>bff4	44 2d				L1:	.text "D-"	;  name of word as a string, ending at wh_NameLastChar
>bff6	a2					.byte (("D-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bff7	69 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bff9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bffa	10					.byte UF	;wh_Flags	dictionary flags
=49014					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bffb					D_Minus:
.bffb	20 f3 b3	jsr $b3f3			jsr underflow_4 ; two double numbers
.bffe	38		sec				sec
.bfff	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of lower word
.c001	f5 26		sbc $26,x			sbc DStack+2,x
.c003	95 2a		sta $2a,x			sta DStack+6,x
.c005	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of lower word
.c007	f5 27		sbc $27,x			sbc DStack+3,x
.c009	95 2b		sta $2b,x			sta DStack+7,x
.c00b	b5 28		lda $28,x			lda DStack+4,x	; LSB of upper word
.c00d	f5 24		sbc $24,x			sbc DStack+0,x
.c00f	95 28		sta $28,x			sta DStack+4,x
.c011	b5 29		lda $29,x			lda DStack+5,x	; MSB of upper word
.c013	f5 25		sbc $25,x			sbc DStack+1,x
.c015	95 29		sta $29,x			sta DStack+5,x
.c017	e8		inx				inx
.c018	e8		inx				inx
.c019	e8		inx				inx
.c01a	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c01b					en = *	; remember here
>bff9	20					.byte CL	;wh_CodeLength
.c01b	60		rts				rts
>c01c	44 2b				L1:	.text "D+"	;  name of word as a string, ending at wh_NameLastChar
>c01e	62					.byte (("D+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c01f	76 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c021	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c022	10					.byte UF	;wh_Flags	dictionary flags
=49054					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c023					D_Plus:
.c023	20 f3 b3	jsr $b3f3			jsr underflow_4 ; two double numbers
.c026	18		clc				clc
.c027	b5 26		lda $26,x			lda DStack+2,x	; LSB of lower word
.c029	75 2a		adc $2a,x			adc DStack+6,x
.c02b	95 2a		sta $2a,x			sta DStack+6,x
.c02d	b5 27		lda $27,x			lda DStack+3,x	; MSB of lower word
.c02f	75 2b		adc $2b,x			adc DStack+7,x
.c031	95 2b		sta $2b,x			sta DStack+7,x
.c033	b5 24		lda $24,x			lda DStack+0,x	; LSB of upper word
.c035	75 28		adc $28,x			adc DStack+4,x
.c037	95 28		sta $28,x			sta DStack+4,x
.c039	b5 25		lda $25,x			lda DStack+1,x	; MSB of upper word
.c03b	75 29		adc $29,x			adc DStack+5,x
.c03d	95 29		sta $29,x			sta DStack+5,x
.c03f	e8		inx				inx
.c040	e8		inx				inx
.c041	e8		inx				inx
.c042	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c043					en = *	; remember here
>c021	20					.byte CL	;wh_CodeLength
.c043	60		rts				rts
>c044	44 31 2b			L1:	.text "D1+"	;  name of word as a string, ending at wh_NameLastChar
>c047	63					.byte (("D1+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c048	9e bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c04a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c04b	10					.byte UF	;wh_Flags	dictionary flags
=49095					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c04c	20 e9 b3	jsr $b3e9	D1Plus:		jsr underflow_2
.c04f	f6 26		inc $26,x			inc DStack+2,x
.c051	d0 0a		bne $c05d			bne +
.c053	f6 27		inc $27,x			inc DStack+3,x
.c055	d0 06		bne $c05d			bne +
.c057	f6 24		inc $24,x			inc DStack+0,x
.c059	d0 02		bne $c05d			bne +
.c05b	f6 25		inc $25,x			inc DStack+1,x
.c05d					+
=17					CL	.var *-(WordListLink+wh_Xt)
=$c05d					en = *	; remember here
>c04a	11					.byte CL	;wh_CodeLength
.c05d	60		rts				rts
>c05e	44 31 2d			L1:	.text "D1-"	;  name of word as a string, ending at wh_NameLastChar
>c061	a3					.byte (("D1-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c062	c7 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c064	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c065	10					.byte UF	;wh_Flags	dictionary flags
=49121					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c066	20 e9 b3	jsr $b3e9	D1Minus:	jsr underflow_2
.c069	b5 26		lda $26,x			lda DStack+2,x
.c06b	d0 0e		bne $c07b			bne _1
.c06d	b5 27		lda $27,x			lda DStack+3,x
.c06f	d0 08		bne $c079			bne _2
.c071	b5 24		lda $24,x			lda DStack+0,x
.c073	d0 02		bne $c077			bne _3
.c075	d6 25		dec $25,x			dec DStack+1,x
.c077	d6 24		dec $24,x	_3:		dec DStack+0,x
.c079	d6 27		dec $27,x	_2:		dec DStack+3,x
.c07b	d6 26		dec $26,x	_1:		dec DStack+2,x
=23					CL	.var *-(WordListLink+wh_Xt)
=$c07d					en = *	; remember here
>c064	17					.byte CL	;wh_CodeLength
.c07d	60		rts				rts
>c07e	41 6c 6c 6f 74			L1:	.text "Allot"	;  name of word as a string, ending at wh_NameLastChar
>c083	85					.byte (("Allot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c084	e1 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c086	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c087	18					.byte UF+NN	;wh_Flags	dictionary flags
=49155					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c088					Allot:
.c088	20 d4 b3	jsr $b3d4			jsr underflow_1
.c08b	18		clc				clc			; adjust cp
.c08c	b5 24		lda $24,x			lda DStack+0,x
.c08e	65 00		adc $00				adc cp+0
.c090	85 00		sta $00				sta cp+0
.c092	a8		tay				tay			;   save lo byte
.c093	b5 25		lda $25,x			lda DStack+1,x
.c095	85 14		sta $14				sta tmp1
.c097	65 01		adc $01				adc cp+1
.c099	85 01		sta $01				sta cp+1
.c09b	24 14		bit $14				bit tmp1
.c09d	30 15		bmi $c0b4			bmi _release
.c09f	b0 06		bcs $c0a7			bcs _pos_err		; carry from the add is bad
=32600					_last = cp_end-2*PadOffset
.c0a1	c0 58		cpy #$58			cpy #<_last		; cp < cp_end ?
.c0a3	e9 7f		sbc #$7f			sbc #>_last
.c0a5	90 2c		bcc $c0d3			bcc _done		; we're fine.
.c0a7					_pos_err:
.c0a7	a9 58		lda #$58			lda #<_last
.c0a9	85 00		sta $00				sta cp+0
.c0ab	a9 7f		lda #$7f			lda #>_last
.c0ad	85 01		sta $01				sta cp+1
.c0af	a9 c5		lda #$c5			lda #$100+err_Allocate
.c0b1	4c 33 b4	jmp $b433			jmp ThrowA
.c0b4					_release:
.c0b4	90 06		bcc $c0bc			bcc _neg_err		; borrow indicates we've gone below 0
.c0b6	c0 66		cpy #$66			cpy #<cp0
.c0b8	e9 0b		sbc #$0b			sbc #>cp0
.c0ba	b0 17		bcs $c0d3			bcs _done
.c0bc					_neg_err:
.c0bc	a9 66		lda #$66			lda #<cp0		; Set CP to CP0
.c0be	85 00		sta $00				sta cp+0
.c0c0	a9 0b		lda #$0b			lda #>cp0
.c0c2	85 01		sta $01				sta cp+1
.c0c4	a9 bd		lda #$bd			lda #<forth_dictionary_start	; set WordLists[Forth] to the first
.c0c6	8d 12 03	sta $0312			sta WordlistsV+0		; word in ROM
.c0c9	a9 ce		lda #$ce			lda #>forth_dictionary_start
.c0cb	8d 13 03	sta $0313			sta WordlistsV+1
.c0ce	a9 c4		lda #$c4			lda #$100+err_Free		; abort with an error
.c0d0	4c 33 b4	jmp $b433			jmp ThrowA
.c0d3					_done:
.c0d3	e8		inx				inx			; Drop n
.c0d4	e8		inx				inx
=77					CL	.var *-(WordListLink+wh_Xt)
=$c0d5					en = *	; remember here
>c086	4d					.byte CL	;wh_CodeLength
.c0d5	60		rts				rts
>c0d6	48 65 61 64 65 72 2c		L1:	.text "Header,"	;  name of word as a string, ending at wh_NameLastChar
>c0dd	87					.byte (("Header,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c0de	03 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c0e0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c0e1	08					.byte NN	;wh_Flags	dictionary flags
=49245					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c0e2					Header_Comma:
.c0e2	20 f0 c0	jsr $c0f0			jsr Header_Build
.c0e5					Header_Link:
.c0e5	a5 0e		lda $0e				lda WorkWord+0		; dp= WorkWord
.c0e7	85 10		sta $10				sta dp+0
.c0e9	a5 0f		lda $0f				lda WorkWord+1
.c0eb	85 11		sta $11				sta dp+1
.c0ed	4c 36 ba	jmp $ba36			jmp dp_to_current	; Update the CURRENT wordlist with the new DP.
.c0f0					Header_Build:
.c0f0	20 86 ba	jsr $ba86			jsr parse_name_check	; get name string, throw error if empty string
.c0f3	20 61 cc	jsr $cc61			jsr Two_dup		; ( addr u addr u )
.c0f6	20 d4 a0	jsr $a0d4			jsr Get_Current
.c0f9	20 74 a0	jsr $a074			jsr Search_WordList	; ( addr u xt f ) or ( addr u 0 )
.c0fc	e8		inx				inx			; pop flag.
.c0fd	e8		inx				inx
.c0fe	b5 22		lda $22,x			lda DStack-2,x		; not found?
.c100	f0 21		beq $c123			beq _new_name		; We haven't seen this one before.
.c102	e8		inx				inx			; Drop xt
.c103	e8		inx				inx
.c104	24 0c		bit $0c				bit status		; Check bit 7
.c106	10 08		bpl $c110			bpl _redefined_name	; Bit 7 is zero, so print the message.
.c108	a9 80		lda #$80			lda #$80		; Set bit 7 to indicate dup
.c10a	05 0c		ora $0c				ora status
.c10c	85 0c		sta $0c				sta status
.c10e	d0 19		bne $c129			bne _process_name
.c110					_redefined_name:
.c110	a9 78		lda #$78			lda #<str_redefined
.c112	a0 da		ldy #$da			ldy #>str_redefined
.c114	20 b0 cd	jsr $cdb0			jsr Print_ASCIIZ_YA_no_lf
.c117	20 61 cc	jsr $cc61			jsr Two_dup		 ; ( addr u addr u )
.c11a	20 8f cd	jsr $cd8f			jsr Type
.c11d	20 82 cd	jsr $cd82			jsr Space
.c120	4c 29 c1	jmp $c129			jmp _process_name
.c123					_new_name:
.c123	a9 7f		lda #$7f			lda #$7F		; Clear bit 0 of status to indicate new word.
.c125	25 0c		and $0c				and status
.c127	85 0c		sta $0c				sta status
.c129					_process_name:
.c129	20 61 cc	jsr $cc61			jsr Two_dup		; compile name string ending at wh_NameLastChar
.c12c	20 c9 c9	jsr $c9c9			jsr Here
.c12f	20 25 cf	jsr $cf25			jsr Swap
.c132	20 6a ad	jsr $ad6a			jsr CMove
.c135	20 07 cf	jsr $cf07			jsr Dup		;   save length
.c138	20 88 c0	jsr $c088			jsr Allot
.c13b	20 c9 c9	jsr $c9c9			jsr Here
.c13e	20 d7 c9	jsr $c9d7			jsr One_Minus
.c141	a1 24		lda ($24,x)			lda (DStack+0,x)
.c143	0a		asl a				asl a
.c144	0a		asl a				asl a
.c145	0a		asl a				asl a
.c146	0a		asl a				asl a
.c147	0a		asl a				asl a
.c148	95 24		sta $24,x			sta DStack+0,x
.c14a	20 1f cb	jsr $cb1f			jsr Or
.c14d	20 a3 cc	jsr $cca3			jsr C_Comma		; compile wh_HNL
.c150	e8		inx				inx			; drop name string addr
.c151	e8		inx				inx
.c152	20 26 ba	jsr $ba26			jsr current_to_dp	; Get the CURRENT dictionary pointer.
.c155	a5 10		lda $10				lda dp+0		; compile wh_WordListLink
.c157	a4 11		ldy $11				ldy dp+1
.c159	20 c0 cc	jsr $ccc0			jsr Comma_YA
.c15c	a9 03		lda #$03			lda #3			; compile wh_CodeLength (temporary value, see adjust_z)
.c15e	20 a6 cc	jsr $cca6			jsr C_Comma_A
.c161	a9 08		lda #$08			lda #NN			; compile wh_Flags
.c163	20 a6 cc	jsr $cca6			jsr C_Comma_A
.c166	38		sec				sec			; WorkWord= nt
.c167	a5 00		lda $00				lda cp+0
.c169	e9 85		sbc #$85			sbc #wh_xt
.c16b	85 0e		sta $0e				sta WorkWord+0
.c16d	a5 01		lda $01				lda cp+1
.c16f	e9 00		sbc #$00			sbc #0
.c171	85 0f		sta $0f				sta WorkWord+1
.c173	60		rts				rts
=146					CL	.var *-(WordListLink+wh_Xt)
=$c174					en = *	; remember here
>c0e0	92					.byte CL	;wh_CodeLength
>c174	43 72 65 61 74 65		L1:	.text "Create"	;  name of word as a string, ending at wh_NameLastChar
>c17a	a6					.byte (("Create"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c17b	5d c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c17d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c17e	08					.byte NN	;wh_Flags	dictionary flags
=49402					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c17f					Create:
.c17f	20 e2 c0	jsr $c0e2			jsr Header_Comma	; compile word header
.c182	a9 8c		lda #$8c			lda #<DoVar
.c184	a0 c1		ldy #$c1			ldy #>DoVar
.c186	20 e5 cc	jsr $cce5			jsr Jsr_Comma_YA
.c189	4c b9 bb	jmp $bbb9			jmp adjust_z
=13					CL	.var *-(WordListLink+wh_Xt)
=$c18c					en = *	; remember here
>c17d	0d					.byte CL	;wh_CodeLength
.c18c					DoVar:
.c18c	68		pla				pla		; Pull the return address off the machine's stack
.c18d	18		clc				clc		;   +1 because of the way the JSR works
.c18e	69 01		adc #$01			adc #1
.c190	ca		dex				dex		; push on data stack
.c191	ca		dex				dex
.c192	95 24		sta $24,x			sta DStack+0,x
.c194	68		pla				pla
.c195	69 00		adc #$00			adc #0
.c197	95 25		sta $25,x			sta DStack+1,x
.c199	60		rts				rts		; takes us to the original caller of the
>c19a	44 6f 65 73 3e			L1:	.text "Does>"	;  name of word as a string, ending at wh_NameLastChar
>c19f	c5					.byte (("Does>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c1a0	fa c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c1a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c1a3	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=49439					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c1a4					Does:
.c1a4	a0 c1		ldy #$c1			ldy #>_runtime
.c1a6	a9 be		lda #$be			lda #<_runtime
.c1a8	20 e5 cc	jsr $cce5			jsr Jsr_Comma_YA
.c1ab	a9 68		lda #$68			lda #$68		; compile PLA  to pop RTS addr (PFA-1) to AY
.c1ad	a0 a8		ldy #$a8			ldy #$a8		;    & TAY
.c1af	20 c0 cc	jsr $ccc0			jsr Comma_YA
.c1b2	a9 68		lda #$68			lda #$68		; compile PLA
.c1b4	20 a6 cc	jsr $cca6			jsr C_Comma_A
.c1b7	a0 c1		ldy #$c1			ldy #>_dodoes
.c1b9	a9 d0		lda #$d0			lda #<_dodoes
.c1bb	4c e5 cc	jmp $cce5			jmp Jsr_Comma_YA
=26					CL	.var *-(WordListLink+wh_Xt)
=$c1be					en = *	; remember here
>c1a2	1a					.byte CL	;wh_CodeLength
.c1be					_runtime:
.c1be	20 26 ba	jsr $ba26			jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.c1c1	18		clc				clc
.c1c2	68		pla				pla		; RTS addr LSB
.c1c3	69 01		adc #$01			adc #1		;   +1 for JSR bahavior
.c1c5	a0 86		ldy #$86			ldy #Wh_xt+1
.c1c7	91 10		sta ($10),y			sta (dp),y
.c1c9	68		pla				pla		; RTS addr MSB
.c1ca	69 00		adc #$00			adc #0
.c1cc	c8		iny				iny
.c1cd	91 10		sta ($10),y			sta (dp),y
.c1cf	60		rts				rts
.c1d0					_dodoes:
.c1d0	c8		iny				iny		; +1 for JSR behavior
.c1d1	d0 03		bne $c1d6			bne +
.c1d3	18		clc				clc
.c1d4	69 01		adc #$01			adc #1
.c1d6					+
.c1d6	4c 15 cf	jmp $cf15			jmp PushAY
>c1d9	55 6e 75 73 65 64		L1:	.text "Unused"	;  name of word as a string, ending at wh_NameLastChar
>c1df	86					.byte (("Unused"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c1e0	1f c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c1e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c1e3	00					.byte 0	;wh_Flags	dictionary flags
=49503					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c1e4					Unused:
=32600					_last = cp_end-2*padoffset
.c1e4	ca		dex				dex
.c1e5	ca		dex				dex
.c1e6	38		sec				sec
.c1e7	a9 58		lda #$58			lda #<_last
.c1e9	e5 00		sbc $00				sbc cp+0
.c1eb	95 24		sta $24,x			sta DStack+0,x
.c1ed	a9 7f		lda #$7f			lda #>_last
.c1ef	e5 01		sbc $01				sbc cp+1
.c1f1	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$c1f3					en = *	; remember here
>c1e2	0f					.byte CL	;wh_CodeLength
.c1f3	60		rts				rts
>c1f4	44 65 70 74 68			L1:	.text "Depth"	;  name of word as a string, ending at wh_NameLastChar
>c1f9	05					.byte (("Depth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c1fa	5f c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c1fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c1fd	08					.byte NN	;wh_Flags	dictionary flags
=49529					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c1fe					Depth:
.c1fe	a9 28		lda #$28			lda #DStack0	; A= DStack0 - X
.c200	86 1a		stx $1a				stx tmp4
.c202	38		sec				sec
.c203	e5 1a		sbc $1a				sbc tmp4
.c205	4a		lsr a				lsr		; divide by two because each cell is two bytes
.c206	4c a6 b7	jmp $b7a6			jmp PushZA
=11					CL	.var *-(WordListLink+wh_Xt)
=$c209					en = *	; remember here
>c1fc	0b					.byte CL	;wh_CodeLength
>c209	4b 65 79			L1:	.text "Key"	;  name of word as a string, ending at wh_NameLastChar
>c20c	23					.byte (("Key"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c20d	79 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c20f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c210	08					.byte NN	;wh_Flags	dictionary flags
=49548					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c211	20 17 c2	jsr $c217	Key:		jsr key_a		; returns char in A
.c214	4c a6 b7	jmp $b7a6			jmp PushZA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c217					en = *	; remember here
>c20f	06					.byte CL	;wh_CodeLength
.c217					Key_A:
.c217	6c 08 03	jmp ($0308)			jmp (input)		; JSR/RTS
>c21a	4b 65 79 3f			L1:	.text "Key?"	;  name of word as a string, ending at wh_NameLastChar
>c21e	e4					.byte (("Key?"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c21f	8c c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c221	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c222	08					.byte NN	;wh_Flags	dictionary flags
=49566					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c223	20 29 c2	jsr $c229	KeyQ:		jsr KeyQ_A
.c226	4c a6 b7	jmp $b7a6			jmp PushZA
.c229	6c 0a 03	jmp ($030a)	KeyQ_A:		jmp (HaveKey)
>c22c	52 65 66 69 6c 6c		L1:	.text "Refill"	;  name of word as a string, ending at wh_NameLastChar
>c232	86					.byte (("Refill"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c233	9e c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c235	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c236	08					.byte NN	;wh_Flags	dictionary flags
=49586					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c237					Refill:
.c237	a9 00		lda #$00			lda #0			; show empty in case of error
.c239	85 06		sta $06				sta ciblen+0
.c23b	85 07		sta $07				sta ciblen+1
.c23d	a5 02		lda $02				lda insrc		; cheat: We only check LSB
.c23f	d0 24		bne $c265			bne _src_not_kbd
.c241	a5 04		lda $04				lda cib+0		; address of CIB is NOS
.c243	a4 05		ldy $05				ldy cib+1
.c245	20 64 b7	jsr $b764			jsr PushYA
.c248	a9 ff		lda #$ff			lda #bsize		; max number of chars is TOS
.c24a	20 a6 b7	jsr $b7a6			jsr PushZA		;  cheat: We only accept max 255
.c24d	20 7c c2	jsr $c27c			jsr Accept		; ( addr n1 -- n2)
.c250	b5 24		lda $24,x			lda DStack+0,x
.c252	85 06		sta $06				sta ciblen+0
.c254	b5 25		lda $25,x			lda DStack+1,x
.c256	85 07		sta $07				sta ciblen+1		; though we only accept 255 chars
.c258	a9 00		lda #$00			lda #0
.c25a	85 08		sta $08				sta toin+0
.c25c	85 09		sta $09				sta toin+1
.c25e	a9 ff		lda #$ff			lda #$FF		; overwrite with TRUE flag
.c260	95 24		sta $24,x			sta DStack+0,x
.c262	95 25		sta $25,x			sta DStack+1,x
.c264	60		rts				rts
.c265					_src_not_kbd:
.c265	c9 ff		cmp #$ff			cmp #$ff
.c267	d0 03		bne $c26c			bne _src_not_string
.c269	4c 97 b7	jmp $b797			jmp False
.c26c					_src_not_string:
.c26c	a9 eb		lda #$eb			lda #$100+err_Unsupported
.c26e	20 33 b4	jsr $b433			jsr ThrowA
=58					CL	.var *-(WordListLink+wh_Xt)
=$c271					en = *	; remember here
>c235	3a					.byte CL	;wh_CodeLength
>c271	41 63 63 65 70 74		L1:	.text "Accept"	;  name of word as a string, ending at wh_NameLastChar
>c277	86					.byte (("Accept"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c278	b2 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c27a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c27b	18					.byte UF+NN	;wh_Flags	dictionary flags
=49655					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c27c					Accept:
.c27c	20 e9 b3	jsr $b3e9			jsr underflow_2
.c27f	b5 24		lda $24,x			lda DStack+0,x		; Abort if we were asked to receive 0 chars
.c281	15 25		ora $25,x			ora DStack+1,x
.c283	d0 09		bne $c28e			bne _not_zero
.c285	e8		inx				inx			; drop n
.c286	e8		inx				inx
.c287	95 24		sta $24,x			sta DStack+0,x		; replace addr with 0
.c289	95 25		sta $25,x			sta DStack+1,x
.c28b	4c 63 c3	jmp $c363			jmp accept_done
.c28e					_not_zero:
.c28e	b5 24		lda $24,x			lda DStack+0,x	; number of chars to get in tmp2 ...
.c290	85 16		sta $16				sta tmp2
.c292	a9 00		lda #$00			lda #0
.c294	85 17		sta $17				sta tmp2+1	; ... but we only accept max 255 chars
.c296	b5 26		lda $26,x			lda DStack+2,x	; address of buffer is NOS, to tmp1
.c298	85 14		sta $14				sta tmp1
.c29a	b5 27		lda $27,x			lda DStack+3,x
.c29c	85 15		sta $15				sta tmp1+1
.c29e	e8		inx				inx
.c29f	e8		inx				inx
.c2a0	a0 00		ldy #$00			ldy #0
.c2a2	a5 0c		lda $0c				lda status
.c2a4	29 f7		and #$f7			and #$f7
.c2a6	18		clc				clc
.c2a7	69 01		adc #$01			adc #1
.c2a9	09 08		ora #$08			ora #$08
.c2ab	85 0c		sta $0c				sta status
.c2ad					accept_loop:
.c2ad	20 17 c2	jsr $c217			jsr key_a
.c2b0	c9 0a		cmp #$0a			cmp #AscLF
.c2b2	f0 20		beq $c2d4			beq _eol
.c2b4	c9 0d		cmp #$0d			cmp #AscCR
.c2b6	f0 1c		beq $c2d4			beq _eol
.c2b8	c9 08		cmp #$08			cmp #AscBS
.c2ba	f0 24		beq $c2e0			beq _backspace
.c2bc	c9 7f		cmp #$7f			cmp #AscDEL	; (CTRL-h)
.c2be	f0 20		beq $c2e0			beq _backspace
.c2c0	c9 10		cmp #$10			cmp #AscCP
.c2c2	f0 37		beq $c2fb			beq _ctrl_p
.c2c4	c9 0e		cmp #$0e			cmp #AscCN
.c2c6	f0 46		beq $c30e			beq _ctrl_n
.c2c8	91 14		sta ($14),y			sta (tmp1),y
.c2ca	c8		iny				iny
.c2cb	20 75 cd	jsr $cd75			jsr Emit_A
.c2ce	c4 16		cpy $16				cpy tmp2	; reached character limit?
.c2d0	d0 db		bne $c2ad			bne accept_loop	      ; fall through if buffer limit reached
.c2d2	f0 03		beq $c2d7			beq _buffer_full
.c2d4					_eol:
.c2d4	20 82 cd	jsr $cd82			jsr Space	; print final space
.c2d7					_buffer_full:
.c2d7	94 24		sty $24,x			sty DStack+0,x	; Y contains number of chars accepted already
.c2d9	a9 00		lda #$00			lda #0
.c2db	95 25		sta $25,x			sta DStack+1,x		; we only accept 256 chars
.c2dd	4c 63 c3	jmp $c363			jmp accept_done
.c2e0					_backspace:
.c2e0	c0 00		cpy #$00			cpy #0		; buffer empty?
.c2e2	d0 06		bne $c2ea			bne +
.c2e4	a9 07		lda #$07			lda #AscBELL	; complain and don't delete beyond the start of line
.c2e6	20 75 cd	jsr $cd75			jsr Emit_A
.c2e9	c8		iny				iny
.c2ea					+
.c2ea	88		dey				dey
.c2eb	a9 08		lda #$08			lda #AscBS	; move back one
.c2ed	20 75 cd	jsr $cd75			jsr Emit_A
.c2f0	20 82 cd	jsr $cd82			jsr Space	; print a space (rubout)
.c2f3	a9 08		lda #$08			lda #AscBS	; move back over space
.c2f5	20 75 cd	jsr $cd75			jsr Emit_A
.c2f8	4c ad c2	jmp $c2ad			jmp accept_loop
.c2fb					_ctrl_p:
.c2fb	a5 0c		lda $0c				lda status
.c2fd	29 07		and #$07			and #7
.c2ff	d0 08		bne $c309			bne _ctrl_p_dec
.c301	a5 0c		lda $0c				lda status
.c303	09 07		ora #$07			ora #7
.c305	85 0c		sta $0c				sta status
.c307	d0 14		bne $c31d			bne _recall_history
.c309					_ctrl_p_dec:
.c309	c6 0c		dec $0c				dec status
.c30b	4c 1d c3	jmp $c31d			jmp _recall_history
.c30e					_ctrl_n:
.c30e	a9 08		lda #$08			lda #$8
.c310	24 0c		bit $0c				bit status
.c312	d0 09		bne $c31d			bne _recall_history
.c314	a5 0c		lda $0c				lda status
.c316	29 f7		and #$f7			and #$f7
.c318	18		clc				clc
.c319	69 01		adc #$01			adc #1
.c31b	85 0c		sta $0c				sta status
.c31d					_recall_history:
.c31d	a9 f7		lda #$f7			lda #$ff-%00001000
.c31f	25 0c		and $0c				and status
.c321	85 0c		sta $0c				sta status
.c323	20 7e c3	jsr $c37e			jsr accept_total_recall
.c326	a9 0d		lda #$0d			lda #AscCR
.c328	20 75 cd	jsr $cd75			jsr Emit_A
.c32b					input_clear:
.c32b	c0 00		cpy #$00			cpy #0
.c32d	f0 07		beq $c336			beq input_cleared
.c32f	20 82 cd	jsr $cd82			jsr Space
.c332	88		dey				dey
.c333	4c 2b c3	jmp $c32b			jmp input_clear
.c336					input_cleared:
.c336	a9 0d		lda #$0d			lda #AscCR
.c338	20 75 cd	jsr $cd75			jsr Emit_A
.c33b	b1 18		lda ($18),y			lda (tmp3),y
.c33d	85 0d		sta $0d				sta status+1
.c33f	e6 18		inc $18				inc tmp3
.c341	d0 02		bne $c345			bne +		; Increment the upper byte on carry.
.c343	e6 19		inc $19				inc tmp3+1
.c345					+
.c345	a9 0d		lda #$0d			lda #AscCR
.c347	20 75 cd	jsr $cd75			jsr Emit_A
.c34a					_history_loop:
.c34a	c4 0d		cpy $0d				cpy status+1
.c34c	d0 03		bne $c351			bne +
.c34e	4c ad c2	jmp $c2ad			jmp accept_loop	      ; Needs a long jump
.c351					+
.c351	c4 16		cpy $16				cpy tmp2
.c353	f0 0a		beq $c35f			beq _hist_filled_buffer
.c355	b1 18		lda ($18),y			lda (tmp3),y
.c357	91 14		sta ($14),y			sta (tmp1),y
.c359	20 75 cd	jsr $cd75			jsr Emit_A
.c35c	c8		iny				iny
.c35d	d0 eb		bne $c34a			bne _history_loop
.c35f					_hist_filled_buffer:
.c35f	88		dey				dey
.c360	4c ad c2	jmp $c2ad			jmp accept_loop
.c363					accept_done:
.c363	20 7e c3	jsr $c37e			jsr accept_total_recall
.c366	85 0d		sta $0d				sta status+1
.c368	a0 00		ldy #$00			ldy #0
.c36a	91 18		sta ($18),y			sta (tmp3),y
.c36c	e6 18		inc $18				inc tmp3
.c36e	d0 02		bne $c372			bne +		; Increment the upper byte on carry.
.c370	e6 19		inc $19				inc tmp3+1
.c372					+
.c372					_save_history_loop:
.c372	c4 0d		cpy $0d				cpy status+1
.c374	f0 07		beq $c37d			beq _save_history_done
.c376	b1 14		lda ($14),y			lda (tmp1),y
.c378	91 18		sta ($18),y			sta (tmp3),y
.c37a	c8		iny				iny
.c37b	d0 f5		bne $c372			bne _save_history_loop
.c37d					_save_history_done:
=257					CL	.var *-(WordListLink+wh_Xt)
=$ff					CL	 .var $ff
=$c37d					en = *	; remember here
>c27a	ff					.byte CL	;wh_CodeLength
.c37d	60		rts				rts
.c37e					accept_total_recall:
.c37e	a9 66		lda #$66			lda #<hist_buff
.c380	85 18		sta $18				sta tmp3
.c382	a9 07		lda #$07			lda #>hist_buff
.c384	85 19		sta $19				sta tmp3+1
.c386	a5 0c		lda $0c				lda status
.c388	6a		ror a				ror
.c389	29 03		and #$03			and #3
.c38b	18		clc				clc
.c38c	65 19		adc $19				adc tmp3+1
.c38e	85 19		sta $19				sta tmp3+1
.c390	a5 0c		lda $0c				lda status
.c392	6a		ror a				ror		; Rotate through carry into msb.
.c393	6a		ror a				ror
.c394	29 80		and #$80			and #$80
.c396	18		clc				clc
.c397	65 18		adc $18				adc tmp3
.c399	85 18		sta $18				sta tmp3
.c39b	90 02		bcc $c39f			bcc +		; Increment the upper byte on carry.
.c39d	e6 19		inc $19				inc tmp3+1
.c39f					+
.c39f	98		tya				tya
.c3a0	c9 80		cmp #$80			cmp #$80
.c3a2	90 02		bcc $c3a6			bcc +
.c3a4	a9 7f		lda #$7f			lda #$7F
.c3a6					+
.c3a6	60		rts				rts
>c3a7	49 6e 70 75 74 3e 52		L1:	.text "Input>R"	;  name of word as a string, ending at wh_NameLastChar
>c3ae	47					.byte (("Input>R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c3af	f7 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3b1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3b2	08					.byte NN	;wh_Flags	dictionary flags
=49966					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3b3					Input_To_R:
.c3b3	68		pla				pla			; move it out of the way
.c3b4	85 14		sta $14				sta tmp1+0
.c3b6	68		pla				pla
.c3b7	85 15		sta $15				sta tmp1+1
.c3b9	a0 07		ldy #$07			ldy #7
.c3bb	b9 02 00	lda $0002,y	_loop:		lda InSrc,y	; insrc+7 is toin+1
.c3be	48		pha				pha
.c3bf	88		dey				dey
.c3c0	10 f9		bpl $c3bb			bpl _loop
.c3c2	a5 15		lda $15				lda tmp1+1		; Restore address for return jump
.c3c4	48		pha				pha
.c3c5	a5 14		lda $14				lda tmp1+0
.c3c7	48		pha				pha
=21					CL	.var *-(WordListLink+wh_Xt)
=$c3c8					en = *	; remember here
>c3b1	15					.byte CL	;wh_CodeLength
.c3c8	60		rts				rts
>c3c9	52 3e 49 6e 70 75 74		L1:	.text "R>Input"	;  name of word as a string, ending at wh_NameLastChar
>c3d0	87					.byte (("R>Input"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c3d1	2e c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3d3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3d4	08					.byte NN	;wh_Flags	dictionary flags
=50000					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3d5					R_To_Input:
.c3d5	68		pla				pla		 ; move it out of the way
.c3d6	85 14		sta $14				sta tmp1+0
.c3d8	68		pla				pla
.c3d9	85 15		sta $15				sta tmp1+1
.c3db	a0 00		ldy #$00			ldy #0
.c3dd	68		pla		_loop:		pla
.c3de	99 02 00	sta $0002,y			sta InSrc,y ; also cib ciblen toin
.c3e1	c8		iny				iny
.c3e2	c0 08		cpy #$08			cpy #8
.c3e4	d0 f7		bne $c3dd			bne _loop
.c3e6	a5 15		lda $15				lda tmp1+1		; Restore address for return jump
.c3e8	48		pha				pha
.c3e9	a5 14		lda $14				lda tmp1+0
.c3eb	48		pha				pha
=23					CL	.var *-(WordListLink+wh_Xt)
=$c3ec					en = *	; remember here
>c3d3	17					.byte CL	;wh_CodeLength
.c3ec	60		rts				rts
>c3ed	42 6f 75 6e 64 73		L1:	.text "Bounds"	;  name of word as a string, ending at wh_NameLastChar
>c3f3	66					.byte (("Bounds"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c3f4	50 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3f6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3f7	10					.byte UF	;wh_Flags	dictionary flags
=50035					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3f8					Bounds:
.c3f8	20 e9 b3	jsr $b3e9			jsr underflow_2
.c3fb	18		clc				clc
.c3fc	b5 26		lda $26,x			lda DStack+2,x		; LSB addr
.c3fe	a8		tay				tay
.c3ff	75 24		adc $24,x			adc DStack+0,x		; LSB u
.c401	95 26		sta $26,x			sta DStack+2,x		; LSB addr+u
.c403	94 24		sty $24,x			sty DStack+0,x
.c405	b5 27		lda $27,x			lda DStack+3,x		; MSB addr
.c407	a8		tay				tay
.c408	75 25		adc $25,x			adc DStack+1,x		; MSB u
.c40a	95 27		sta $27,x			sta DStack+3,x		; MSB addr+u
.c40c	94 25		sty $25,x			sty DStack+1,x
=22					CL	.var *-(WordListLink+wh_Xt)
=$c40e					en = *	; remember here
>c3f6	16					.byte CL	;wh_CodeLength
.c40e	60		rts				rts
>c40f	53 70 61 63 65 73		L1:	.text "Spaces"	;  name of word as a string, ending at wh_NameLastChar
>c415	66					.byte (("Spaces"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c416	73 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c418	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c419	18					.byte UF+NN	;wh_Flags	dictionary flags
=50069					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c41a					Spaces:
.c41a	20 d4 b3	jsr $b3d4			jsr underflow_1
.c41d	4c 23 c4	jmp $c423			jmp _test
.c420					_loop:
.c420	20 82 cd	jsr $cd82			jsr Space		; print a space
.c423	d6 24		dec $24,x	_test:		dec DStack+0,x		; decrement & test
.c425	10 f9		bpl $c420			bpl _loop
.c427	e8		inx				inx			; Drop
.c428	e8		inx				inx
=15					CL	.var *-(WordListLink+wh_Xt)
=$c429					en = *	; remember here
>c418	0f					.byte CL	;wh_CodeLength
.c429	60		rts				rts
>c42a	2d 54 72 61 69 6c 69 6e		L1:	.text "-Trailing"	;  name of word as a string, ending at wh_NameLastChar
>c432	67
>c433	e9					.byte (("-Trailing"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c434	95 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c436	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c437	18					.byte UF+NN	;wh_Flags	dictionary flags
=50099					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c438					Minus_trailing:
.c438	20 e9 b3	jsr $b3e9			jsr underflow_2
.c43b	b5 26		lda $26,x			lda DStack+2,x		; tmp1= addr + (u1 & $ff00)
.c43d	85 14		sta $14				sta tmp1+0
.c43f	b5 27		lda $27,x			lda DStack+3,x
.c441	18		clc				clc
.c442	75 25		adc $25,x			adc DStack+1,x
.c444	85 15		sta $15				sta tmp1+1
.c446	b4 24		ldy $24,x			ldy DStack+0,x
.c448	88		dey		_loop:		dey			; back 1 char
.c449	c0 ff		cpy #$ff			cpy #$ff
.c44b	d0 06		bne $c453			bne +
.c44d	c6 15		dec $15				dec tmp1+1		;   back 1 page
.c44f	d6 25		dec $25,x			dec DStack+1,x
.c451	30 06		bmi $c459			bmi _done
.c453					+
.c453	b1 14		lda ($14),y			lda (tmp1),y		; if blank, keep going
.c455	c9 20		cmp #$20			cmp #AscSP
.c457	f0 ef		beq $c448			beq _loop
.c459	c8		iny		_done:		iny			; forward 1 char
.c45a	d0 02		bne $c45e			bne +
.c45c	f6 25		inc $25,x			inc DStack+1,x
.c45e	94 24		sty $24,x	+		sty DStack+0,x
=40					CL	.var *-(WordListLink+wh_Xt)
=$c460					en = *	; remember here
>c436	28					.byte CL	;wh_CodeLength
.c460	60		rts				rts
>c461	2d 4c 65 61 64 69 6e 67		L1:	.text "-Leading"	;  name of word as a string, ending at wh_NameLastChar
>c469	e8					.byte (("-Leading"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c46a	b3 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c46c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c46d	18					.byte UF+NN	;wh_Flags	dictionary flags
=50153					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c46e					Minus_leading:
.c46e	20 e9 b3	jsr $b3e9			jsr underflow_2
.c471					_loop:
.c471	b5 24		lda $24,x			lda DStack+0,x		; chars left?
.c473	15 25		ora $25,x			ora DStack+1,x
.c475	f0 0f		beq $c486			beq _done
.c477	a1 26		lda ($26,x)			lda (DStack+2,x)	; get first character
.c479	c9 21		cmp #$21			cmp #AscSP+1		;   is_whitespace
.c47b	b0 09		bcs $c486			bcs _done
.c47d	20 07 ca	jsr $ca07			jsr NOS_One_Plus
.c480	20 da c9	jsr $c9da			jsr One_Minus_NoUF
.c483	4c 71 c4	jmp $c471			jmp _loop
.c486					_done:
=24					CL	.var *-(WordListLink+wh_Xt)
=$c486					en = *	; remember here
>c46c	18					.byte CL	;wh_CodeLength
.c486	60		rts				rts
>c487	2f 53 74 72 69 6e 67		L1:	.text "/String"	;  name of word as a string, ending at wh_NameLastChar
>c48e	e7					.byte (("/String"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c48f	e9 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c491	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c492	18					.byte UF+NN	;wh_Flags	dictionary flags
=50190					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c493					Slash_String:
.c493	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.c495	b0 1d		bcs $c4b4		bcs Throw_Stack_20
.c497	18		clc				clc		; addr += n
.c498	b5 24		lda $24,x			lda DStack+0,x
.c49a	75 28		adc $28,x			adc DStack+4,x
.c49c	95 28		sta $28,x			sta DStack+4,x
.c49e	b5 25		lda $25,x			lda DStack+1,x
.c4a0	75 29		adc $29,x			adc DStack+5,x
.c4a2	95 29		sta $29,x			sta DStack+5,x
.c4a4	38		sec				sec		; u -= n
.c4a5	b5 26		lda $26,x			lda DStack+2,x
.c4a7	f5 24		sbc $24,x			sbc DStack+0,x
.c4a9	95 26		sta $26,x			sta DStack+2,x
.c4ab	b5 27		lda $27,x			lda DStack+3,x
.c4ad	f5 25		sbc $25,x			sbc DStack+1,x
.c4af	95 27		sta $27,x			sta DStack+3,x
.c4b1	e8		inx				inx		; Drop n
.c4b2	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c4b3					en = *	; remember here
>c491	20					.byte CL	;wh_CodeLength
.c4b3	60		rts				rts
.c4b4	4c f8 b3	jmp $b3f8	Throw_Stack_20: jmp Throw_Stack
>c4b7	32 44 72 6f 70			L1:	.text "2Drop"	;  name of word as a string, ending at wh_NameLastChar
>c4bc	05					.byte (("2Drop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c4bd	0e c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4bf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4c0	10					.byte UF	;wh_Flags	dictionary flags
=50236					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4c1					Two_drop:
.c4c1	20 e9 b3	jsr $b3e9			jsr underflow_2
.c4c4	e8		inx				inx
.c4c5	e8		inx				inx
.c4c6	e8		inx				inx
.c4c7	e8		inx				inx
=7					CL	.var *-(WordListLink+wh_Xt)
=$c4c8					en = *	; remember here
>c4bf	07					.byte CL	;wh_CodeLength
.c4c8	60		rts				rts
>c4c9	32 53 77 61 70			L1:	.text "2Swap"	;  name of word as a string, ending at wh_NameLastChar
>c4ce	05					.byte (("2Swap"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c4cf	3c c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4d2	08					.byte NN	;wh_Flags	dictionary flags
=50254					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4d3					Two_swap:
.c4d3	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c4d5	b0 dd		bcs $c4b4		bcs Throw_Stack_20
.c4d7	86 14		stx $14				stx tmp1
.c4d9	ca		dex				dex
.c4da	ca		dex				dex
.c4db	ca		dex				dex
.c4dc	ca		dex				dex
.c4dd	e8		inx		_loop:		inx
.c4de	b5 27		lda $27,x			lda DStack+3,x	; 3 <-> 7
.c4e0	b4 2b		ldy $2b,x			ldy DStack+7,x
.c4e2	95 2b		sta $2b,x			sta DStack+7,x
.c4e4	94 27		sty $27,x			sty DStack+3,x
.c4e6	e4 14		cpx $14				cpx tmp1
.c4e8	90 f3		bcc $c4dd			bcc _loop
=23					CL	.var *-(WordListLink+wh_Xt)
=$c4ea					en = *	; remember here
>c4d1	17					.byte CL	;wh_CodeLength
.c4ea	60		rts				rts
>c4eb	32 4f 76 65 72			L1:	.text "2Over"	;  name of word as a string, ending at wh_NameLastChar
>c4f0	45					.byte (("2Over"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c4f1	4e c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4f4	18					.byte UF+NN	;wh_Flags	dictionary flags
=50288					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4f5					Two_over:
.c4f5	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c4f7	b0 bb		bcs $c4b4		bcs Throw_Stack_20
.c4f9	a0 04		ldy #$04			ldy #4
.c4fb	ca		dex		_loop:		dex
.c4fc	b5 2c		lda $2c,x			lda DStack+8,x
.c4fe	95 24		sta $24,x			sta DStack+0,x
.c500	88		dey				dey
.c501	d0 f8		bne $c4fb			bne _loop
=14					CL	.var *-(WordListLink+wh_Xt)
=$c503					en = *	; remember here
>c4f3	0e					.byte CL	;wh_CodeLength
.c503	60		rts				rts
>c504	32 21				L1:	.text "2!"	;  name of word as a string, ending at wh_NameLastChar
>c506	22					.byte (("2!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c507	70 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c509	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c50a	10					.byte UF	;wh_Flags	dictionary flags
=50310					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c50b					Two_Store:
.c50b	20 ee b3	jsr $b3ee			jsr underflow_3
.c50e	20 aa b3	jsr $b3aa			jsr PopYA
.c511	85 14		sta $14		Two_Store_YA:	sta tmp1+0	; save addr
.c513	84 15		sty $15				sty tmp1+1
.c515	b5 24		lda $24,x			lda DStack+0,x	; copy MSB
.c517	a0 00		ldy #$00			ldy #0
.c519	91 14		sta ($14),y			sta (tmp1),y
.c51b	b5 25		lda $25,x			lda DStack+1,x	; copy next
.c51d	c8		iny				iny
.c51e	91 14		sta ($14),y			sta (tmp1),y
.c520	b5 26		lda $26,x			lda DStack+2,x	; copy next
.c522	c8		iny				iny
.c523	91 14		sta ($14),y			sta (tmp1),y
.c525	b5 27		lda $27,x			lda DStack+3,x	; copy MSB
.c527	c8		iny				iny
.c528	91 14		sta ($14),y			sta (tmp1),y
.c52a	e8		inx				inx		; 2Drop
.c52b	e8		inx				inx
.c52c	e8		inx				inx
.c52d	e8		inx				inx
=35					CL	.var *-(WordListLink+wh_Xt)
=$c52e					en = *	; remember here
>c509	23					.byte CL	;wh_CodeLength
.c52e	60		rts				rts
>c52f	32 40				L1:	.text "2@"	;  name of word as a string, ending at wh_NameLastChar
>c531	02					.byte (("2@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c532	86 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c534	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c535	00					.byte 0	;wh_Flags	dictionary flags
=50353					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c536	20 aa b3	jsr $b3aa	Two_fetch:	jsr PopYA
.c539	85 14		sta $14		Two_Fetch_YA:	sta tmp1+0	; save addr
.c53b	84 15		sty $15				sty tmp1+1
.c53d					Two_Fetch_tmp1:
.c53d	ca		dex				dex
.c53e	ca		dex				dex
.c53f	ca		dex				dex
.c540	ca		dex				dex
.c541	a0 00		ldy #$00			ldy #0		; copy LSB
.c543	b1 14		lda ($14),y			lda (tmp1),y
.c545	95 24		sta $24,x			sta DStack+0,x
.c547	c8		iny				iny		; copy next
.c548	b1 14		lda ($14),y			lda (tmp1),y
.c54a	95 25		sta $25,x			sta DStack+1,x
.c54c	c8		iny				iny		; copy next
.c54d	b1 14		lda ($14),y			lda (tmp1),y
.c54f	95 26		sta $26,x			sta DStack+2,x
.c551	c8		iny				iny		; copy next
.c552	b1 14		lda ($14),y			lda (tmp1),y
.c554	95 27		sta $27,x			sta DStack+3,x
=32					CL	.var *-(WordListLink+wh_Xt)
=$c556					en = *	; remember here
>c534	20					.byte CL	;wh_CodeLength
.c556	60		rts				rts
>c557	44 40				L1:	.text "D@"	;  name of word as a string, ending at wh_NameLastChar
>c559	02					.byte (("D@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c55a	b1 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c55c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c55d	08					.byte NN	;wh_Flags	dictionary flags
=50393					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c55e	20 aa b3	jsr $b3aa	DFetch:		jsr PopYA
.c561	85 14		sta $14		DFetchYA:	sta tmp1+0	; save addr
.c563	84 15		sty $15				sty tmp1+1
.c565	ca		dex				dex
.c566	ca		dex				dex
.c567	ca		dex				dex
.c568	ca		dex				dex
.c569	a0 00		ldy #$00			ldy #0
.c56b	b1 14		lda ($14),y			lda (tmp1),y
.c56d	95 26		sta $26,x			sta DStack+2,x
.c56f	c8		iny				iny
.c570	b1 14		lda ($14),y			lda (tmp1),y
.c572	95 27		sta $27,x			sta DStack+3,x
.c574	c8		iny				iny
.c575	b1 14		lda ($14),y			lda (tmp1),y
.c577	95 24		sta $24,x			sta DStack+0,x
.c579	c8		iny				iny
.c57a	b1 14		lda ($14),y			lda (tmp1),y
.c57c	95 25		sta $25,x			sta DStack+1,x
=32					CL	.var *-(WordListLink+wh_Xt)
=$c57e					en = *	; remember here
>c55c	20					.byte CL	;wh_CodeLength
.c57e	60		rts				rts
>c57f	32 52 40			L1:	.text "2R@"	;  name of word as a string, ending at wh_NameLastChar
>c582	03					.byte (("2R@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c583	d9 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c585	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c586	09					.byte CO+NN	;wh_Flags	dictionary flags
=50434					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c587					Two_r_fetch:
.c587	8a		txa				txa		; Y= return stack index
.c588	ba		tsx				tsx
.c589	86 14		stx $14				stx tmp1
.c58b	a4 14		ldy $14				ldy tmp1
.c58d	aa		tax				tax
.c58e	ca		dex				dex		; make room on the Data Stack
.c58f	ca		dex				dex
.c590	ca		dex				dex
.c591	ca		dex				dex
.c592	b9 03 01	lda $0103,y			lda RStack+3,y	; LSB of top entry
.c595	95 24		sta $24,x			sta DStack+0,x
.c597	b9 04 01	lda $0104,y			lda RStack+4,y	; MSB of top entry
.c59a	95 25		sta $25,x			sta DStack+1,x
.c59c	b9 05 01	lda $0105,y			lda RStack+5,y	; LSB of bottom entry
.c59f	95 26		sta $26,x			sta DStack+2,x
.c5a1	b9 06 01	lda $0106,y			lda RStack+6,y	; MSB of bottom entry
.c5a4	95 27		sta $27,x			sta DStack+3,x
=31					CL	.var *-(WordListLink+wh_Xt)
=$c5a6					en = *	; remember here
>c585	1f					.byte CL	;wh_CodeLength
.c5a6	60		rts				rts
>c5a7	32 52 3e			L1:	.text "2R>"	;  name of word as a string, ending at wh_NameLastChar
>c5aa	c3					.byte (("2R>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c5ab	02 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5ad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5ae	41					.byte CO+R6	;wh_Flags	dictionary flags
=50474					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5af					Two_r_from:
.c5af	68		pla				pla			; save the return address
.c5b0	85 14		sta $14				sta tmp1+0
.c5b2	68		pla				pla
.c5b3	85 15		sta $15				sta tmp1+1
.c5b5	ca		dex				dex			; make room on stack
.c5b6	ca		dex				dex
.c5b7	ca		dex				dex
.c5b8	ca		dex				dex
.c5b9	68		pla				pla			; LSB
.c5ba	95 24		sta $24,x			sta DStack+0,x
.c5bc	68		pla				pla			; MSB
.c5bd	95 25		sta $25,x			sta DStack+1,x
.c5bf	68		pla				pla			; LSB
.c5c0	95 26		sta $26,x			sta DStack+2,x
.c5c2	68		pla				pla			; MSB
.c5c3	95 27		sta $27,x			sta DStack+3,x
.c5c5	a5 15		lda $15				lda tmp1+1		; restore return address
.c5c7	48		pha				pha
.c5c8	a5 14		lda $14				lda tmp1+0
.c5ca	48		pha				pha
=28					CL	.var *-(WordListLink+wh_Xt)
=$c5cb					en = *	; remember here
>c5ad	1c					.byte CL	;wh_CodeLength
.c5cb	60		rts				rts
>c5cc	32 3e 52			L1:	.text "2>R"	;  name of word as a string, ending at wh_NameLastChar
>c5cf	43					.byte (("2>R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c5d0	2a c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5d3	51					.byte CO+UF+R6	;wh_Flags	dictionary flags
=50511					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5d4					Two_to_r:
.c5d4	68		pla				pla		; save the return address
.c5d5	85 14		sta $14				sta tmp1+0
.c5d7	68		pla				pla
.c5d8	85 15		sta $15				sta tmp1+1
.c5da	20 e9 b3	jsr $b3e9			jsr underflow_2
.c5dd	b5 27		lda $27,x			lda DStack+3,x	; MSB
.c5df	48		pha				pha
.c5e0	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c5e2	48		pha				pha
.c5e3	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c5e5	48		pha				pha
.c5e6	b5 24		lda $24,x			lda DStack+0,x	; LSB
.c5e8	48		pha				pha
.c5e9	e8		inx				inx
.c5ea	e8		inx				inx
.c5eb	e8		inx				inx
.c5ec	e8		inx				inx
.c5ed	a5 15		lda $15				lda tmp1+1	; restore return address
.c5ef	48		pha				pha
.c5f0	a5 14		lda $14				lda tmp1+0
.c5f2	48		pha				pha
=31					CL	.var *-(WordListLink+wh_Xt)
=$c5f3					en = *	; remember here
>c5d2	1f					.byte CL	;wh_CodeLength
.c5f3	60		rts				rts
>c5f4	49 6e 76 65 72 74		L1:	.text "Invert"	;  name of word as a string, ending at wh_NameLastChar
>c5fa	86					.byte (("Invert"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c5fb	4f c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5fd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5fe	10					.byte UF	;wh_Flags	dictionary flags
=50554					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5ff					Invert:
.c5ff	20 d4 b3	jsr $b3d4			jsr underflow_1
.c602	a9 ff		lda #$ff			lda #$FF
.c604	55 24		eor $24,x			eor DStack+0,x	; LSB
.c606	95 24		sta $24,x			sta DStack+0,x
.c608	a9 ff		lda #$ff			lda #$FF
.c60a	55 25		eor $25,x			eor DStack+1,x	; MSB
.c60c	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$c60e					en = *	; remember here
>c5fd	0f					.byte CL	;wh_CodeLength
.c60e	60		rts				rts
>c60f	4e 65 67 61 74 65		L1:	.text "Negate"	;  name of word as a string, ending at wh_NameLastChar
>c615	a6					.byte (("Negate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c616	7a c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c618	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c619	10					.byte UF	;wh_Flags	dictionary flags
=50581					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c61a					Negate:
.c61a	20 d4 b3	jsr $b3d4			jsr underflow_1
.c61d	38		sec		Negate3:	sec
.c61e	a9 00		lda #$00	Negate4:	lda #0
.c620	f5 24		sbc $24,x			sbc DStack+0,x	; LSB
.c622	95 24		sta $24,x			sta DStack+0,x
.c624	a9 00		lda #$00			lda #0
.c626	f5 25		sbc $25,x			sbc DStack+1,x	; MSB
.c628	95 25		sta $25,x			sta DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$c62a					en = *	; remember here
>c618	10					.byte CL	;wh_CodeLength
.c62a	60		rts				rts
>c62b	41 62 73			L1:	.text "Abs"	;  name of word as a string, ending at wh_NameLastChar
>c62e	63					.byte (("Abs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c62f	95 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c631	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c632	08					.byte NN	;wh_Flags	dictionary flags
=50606					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c633					Abs:
.c633	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c635	b0 05		bcs $c63c		bcs Throw_Stack_17
.c637	b5 25		lda $25,x			lda DStack+1,x	; n negative?
.c639	30 e2		bmi $c61d			bmi Negate3
=8					CL	.var *-(WordListLink+wh_Xt)
=$c63b					en = *	; remember here
>c631	08					.byte CL	;wh_CodeLength
.c63b	60		rts				rts
.c63c	4c f8 b3	jmp $b3f8	Throw_Stack_17: jmp Throw_Stack
>c63f	44 4e 65 67 61 74 65		L1:	.text "DNegate"	;  name of word as a string, ending at wh_NameLastChar
>c646	a7					.byte (("DNegate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c647	ae c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c649	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c64a	08					.byte NN	;wh_Flags	dictionary flags
=50630					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c64b					DNegate:
.c64b	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c64d	b0 ed		bcs $c63c		bcs Throw_Stack_17
.c64f	38		sec		DNegate3:	sec
.c650	a9 00		lda #$00			lda #0
.c652	f5 26		sbc $26,x			sbc DStack+2,x	; LSB of low cell
.c654	95 26		sta $26,x			sta DStack+2,x
.c656	a9 00		lda #$00			lda #0
.c658	f5 27		sbc $27,x			sbc DStack+3,x	; MSB of low cell
.c65a	95 27		sta $27,x			sta DStack+3,x
.c65c	4c 1e c6	jmp $c61e			jmp Negate4
=20					CL	.var *-(WordListLink+wh_Xt)
=$c65f					en = *	; remember here
>c649	14					.byte CL	;wh_CodeLength
>c65f	44 41 62 73			L1:	.text "DAbs"	;  name of word as a string, ending at wh_NameLastChar
>c663	64					.byte (("DAbs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c664	c6 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c666	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c667	08					.byte NN	;wh_Flags	dictionary flags
=50659					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c668					DAbs:
.c668	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c66a	b0 d0		bcs $c63c		bcs Throw_Stack_17
.c66c	b5 25		lda $25,x			lda DStack+1,x	; d negative?
.c66e	30 df		bmi $c64f			bmi DNegate3
=8					CL	.var *-(WordListLink+wh_Xt)
=$c670					en = *	; remember here
>c666	08					.byte CL	;wh_CodeLength
.c670	60		rts				rts
>c671	44 3c 3e			L1:	.text "D<>"	;  name of word as a string, ending at wh_NameLastChar
>c674	c3					.byte (("D<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c675	e3 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c677	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c678	08					.byte NN	;wh_Flags	dictionary flags
=50676					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c679	20 86 c6	jsr $c686	DNEq:		jsr DEqual
.c67c	4c 89 c8	jmp $c889			jmp ZEqA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c67f					en = *	; remember here
>c677	06					.byte CL	;wh_CodeLength
>c67f	44 3d				L1:	.text "D="	;  name of word as a string, ending at wh_NameLastChar
>c681	a2					.byte (("D="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c682	f4 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c684	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c685	08					.byte NN	;wh_Flags	dictionary flags
=50689					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c686	b5 2a		lda $2a,x	DEqual:		lda DStack+6,x
.c688	d5 26		cmp $26,x			cmp DStack+2,x
.c68a	d0 50		bne $c6dc			bne False3
.c68c	b5 2b		lda $2b,x			lda DStack+7,x
.c68e	d5 27		cmp $27,x			cmp DStack+3,x
.c690	d0 4a		bne $c6dc			bne False3
.c692	b5 24		lda $24,x			lda DStack+0,x
.c694	d5 28		cmp $28,x			cmp DStack+4,x
.c696	d0 44		bne $c6dc			bne False3
.c698	b5 25		lda $25,x			lda DStack+1,x
.c69a	d5 29		cmp $29,x			cmp DStack+5,x
.c69c	d0 3e		bne $c6dc			bne False3
.c69e	f0 62		beq $c702			beq True3
=26					CL	.var *-(WordListLink+wh_Xt)
=$c6a0					en = *	; remember here
>c684	1a					.byte CL	;wh_CodeLength
>c6a0	44 55 3e			L1:	.text "DU>"	;  name of word as a string, ending at wh_NameLastChar
>c6a3	c3					.byte (("DU>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6a4	01 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6a6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6a7	08					.byte NN	;wh_Flags	dictionary flags
=50723					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6a8	20 41 c7	jsr $c741	DUGt:		jsr DGtSub
.c6ab	90 55		bcc $c702			bcc True3
.c6ad	b0 2d		bcs $c6dc			bcs False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c6af					en = *	; remember here
>c6a6	07					.byte CL	;wh_CodeLength
>c6af	44 55 3c 3d			L1:	.text "DU<="	;  name of word as a string, ending at wh_NameLastChar
>c6b3	a4					.byte (("DU<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6b4	23 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6b6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6b7	08					.byte NN	;wh_Flags	dictionary flags
=50739					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6b8	20 41 c7	jsr $c741	DULe:		jsr DGtSub
.c6bb	b0 45		bcs $c702			bcs True3
.c6bd	90 1d		bcc $c6dc			bcc False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c6bf					en = *	; remember here
>c6b6	07					.byte CL	;wh_CodeLength
>c6bf	44 55 3e 3d			L1:	.text "DU>="	;  name of word as a string, ending at wh_NameLastChar
>c6c3	a4					.byte (("DU>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6c4	33 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6c6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6c7	08					.byte NN	;wh_Flags	dictionary flags
=50755					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6c8	20 0f c7	jsr $c70f	DUGe:		jsr DLessSub
.c6cb	b0 35		bcs $c702			bcs True3
.c6cd	90 0d		bcc $c6dc			bcc False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c6cf					en = *	; remember here
>c6c6	07					.byte CL	;wh_CodeLength
>c6cf	44 55 3c			L1:	.text "DU<"	;  name of word as a string, ending at wh_NameLastChar
>c6d2	83					.byte (("DU<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6d3	43 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6d5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6d6	08					.byte NN	;wh_Flags	dictionary flags
=50770					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6d7	20 0f c7	jsr $c70f	DULess:		jsr DLessSub
.c6da	90 26		bcc $c702			bcc True3
.c6dc	a9 00		lda #$00	False3:		lda #0
.c6de	f0 24		beq $c704			beq DReturn3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c6e0					en = *	; remember here
>c6d5	09					.byte CL	;wh_CodeLength
.c6e0	4c f8 b3	jmp $b3f8	Throw_Stack_09: jmp Throw_Stack
>c6e3	44 3e 3d			L1:	.text "D>="	;  name of word as a string, ending at wh_NameLastChar
>c6e6	a3					.byte (("D>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6e7	52 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6e9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6ea	08					.byte NN	;wh_Flags	dictionary flags
=50790					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6eb	20 0f c7	jsr $c70f	DGEq:		jsr DLessSub
.c6ee	70 10		bvs $c700			bvs DLess3
.c6f0	10 10		bpl $c702	DGEq3:		bpl True3
.c6f2	30 e8		bmi $c6dc			bmi False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c6f4					en = *	; remember here
>c6e9	09					.byte CL	;wh_CodeLength
>c6f4	44 3c				L1:	.text "D<"	;  name of word as a string, ending at wh_NameLastChar
>c6f6	82					.byte (("D<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6f7	66 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6f9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6fa	08					.byte NN	;wh_Flags	dictionary flags
=50806					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6fb	20 0f c7	jsr $c70f	DLess:		jsr DLessSub
.c6fe	70 f0		bvs $c6f0			bvs DGEq3
.c700	10 da		bpl $c6dc	DLess3:		bpl False3
.c702	a9 ff		lda #$ff	True3:		lda #$ff
.c704					DReturn3:
.c704	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c706	b0 d8		bcs $c6e0		bcs Throw_Stack_09
.c708	95 2a		sta $2a,x			sta DStack+6,x
.c70a	95 2b		sta $2b,x			sta DStack+7,x
.c70c	4c 12 ad	jmp $ad12			jmp ThreeDrop
=20					CL	.var *-(WordListLink+wh_Xt)
=$c70f					en = *	; remember here
>c6f9	14					.byte CL	;wh_CodeLength
.c70f	b5 2a		lda $2a,x	DLessSub:	lda DStack+6,x
.c711	d5 26		cmp $26,x			cmp DStack+2,x
.c713	b5 2b		lda $2b,x			lda DStack+7,x
.c715	f5 27		sbc $27,x			sbc DStack+3,x
.c717	b5 28		lda $28,x			lda DStack+4,x
.c719	f5 24		sbc $24,x			sbc DStack+0,x
.c71b	b5 29		lda $29,x			lda DStack+5,x
.c71d	f5 25		sbc $25,x			sbc DStack+1,x
.c71f	60		rts				rts
>c720	44 3c 3d			L1:	.text "D<="	;  name of word as a string, ending at wh_NameLastChar
>c723	a3					.byte (("D<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c724	76 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c726	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c727	08					.byte NN	;wh_Flags	dictionary flags
=50851					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c728	20 41 c7	jsr $c741	DLe:		jsr DGtSub
.c72b	70 10		bvs $c73d			bvs DGt3
.c72d	10 d3		bpl $c702	DLe3:		bpl True3
.c72f	30 ab		bmi $c6dc			bmi False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c731					en = *	; remember here
>c726	09					.byte CL	;wh_CodeLength
>c731	44 3e				L1:	.text "D>"	;  name of word as a string, ending at wh_NameLastChar
>c733	c2					.byte (("D>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c734	a3 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c736	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c737	08					.byte NN	;wh_Flags	dictionary flags
=50867					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c738	20 41 c7	jsr $c741	DGt:		jsr DGtSub
.c73b	70 f0		bvs $c72d			bvs DLe3
.c73d	30 c3		bmi $c702	DGt3:		bmi True3
.c73f	10 9b		bpl $c6dc			bpl False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c741					en = *	; remember here
>c736	09					.byte CL	;wh_CodeLength
.c741	b5 26		lda $26,x	DGtSub:		lda DStack+2,x
.c743	d5 2a		cmp $2a,x			cmp DStack+6,x
.c745	b5 27		lda $27,x			lda DStack+3,x
.c747	f5 2b		sbc $2b,x			sbc DStack+7,x
.c749	b5 24		lda $24,x			lda DStack+0,x
.c74b	f5 28		sbc $28,x			sbc DStack+4,x
.c74d	b5 25		lda $25,x			lda DStack+1,x
.c74f	f5 29		sbc $29,x			sbc DStack+5,x
.c751	60		rts				rts
>c752	44 30 3c 3d			L1:	.text "D0<="	;  name of word as a string, ending at wh_NameLastChar
>c756	a4					.byte (("D0<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c757	b3 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c759	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c75a	08					.byte NN	;wh_Flags	dictionary flags
=50902					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c75b	b5 25		lda $25,x	D0Le:		lda DStack+1,x	; test sign
.c75d	30 6b		bmi $c7ca			bmi True1
.c75f	10 27		bpl $c788			bpl D0Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c761					en = *	; remember here
>c759	06					.byte CL	;wh_CodeLength
>c761	44 30 3e			L1:	.text "D0>"	;  name of word as a string, ending at wh_NameLastChar
>c764	c3					.byte (("D0>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c765	d6 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c767	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c768	08					.byte NN	;wh_Flags	dictionary flags
=50916					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c769	b5 25		lda $25,x	D0Gt:		lda DStack+1,x	; test sign
.c76b	10 0c		bpl $c779			bpl D0Ne
.c76d	4c ea c7	jmp $c7ea			jmp False1
>c770	44 30 3c 3e			L1:	.text "D0<>"	;  name of word as a string, ending at wh_NameLastChar
>c774	c4					.byte (("D0<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c775	e4 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c777	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c778	08					.byte NN	;wh_Flags	dictionary flags
=50932					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c779	20 8f c7	jsr $c78f	D0Ne:		jsr D0EqSub
.c77c	d0 4c		bne $c7ca			bne True1
.c77e	f0 6a		beq $c7ea			beq False1
=7					CL	.var *-(WordListLink+wh_Xt)
=$c780					en = *	; remember here
>c777	07					.byte CL	;wh_CodeLength
>c780	44 30 3d			L1:	.text "D0="	;  name of word as a string, ending at wh_NameLastChar
>c783	a3					.byte (("D0="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c784	f4 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c786	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c787	08					.byte NN	;wh_Flags	dictionary flags
=50947					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c788	20 8f c7	jsr $c78f	D0Equal:	jsr D0EqSub
.c78b	d0 5d		bne $c7ea			bne False1
.c78d	f0 3b		beq $c7ca			beq True1
=7					CL	.var *-(WordListLink+wh_Xt)
=$c78f					en = *	; remember here
>c786	07					.byte CL	;wh_CodeLength
.c78f	b5 26		lda $26,x	D0EqSub:	lda DStack+2,x
.c791	15 27		ora $27,x			ora DStack+3,x
.c793	15 24		ora $24,x			ora DStack+0,x
.c795	15 25		ora $25,x			ora DStack+1,x
.c797	60		rts				rts
>c798	44 30 3c			L1:	.text "D0<"	;  name of word as a string, ending at wh_NameLastChar
>c79b	83					.byte (("D0<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c79c	03 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c79e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c79f	08					.byte NN	;wh_Flags	dictionary flags
=50971					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7a0	b5 25		lda $25,x	D0Less:		lda DStack+1,x	; test sign
.c7a2	30 26		bmi $c7ca			bmi True1
.c7a4	10 44		bpl $c7ea			bpl False1
=6					CL	.var *-(WordListLink+wh_Xt)
=$c7a6					en = *	; remember here
>c79e	06					.byte CL	;wh_CodeLength
>c7a6	44 30 3e 3d			L1:	.text "D0>="	;  name of word as a string, ending at wh_NameLastChar
>c7aa	a4					.byte (("D0>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7ab	1b c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7ad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7ae	08					.byte NN	;wh_Flags	dictionary flags
=50986					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7af	b5 25		lda $25,x	D0Ge:		lda DStack+1,x	; test sign
.c7b1	10 17		bpl $c7ca			bpl True1
.c7b3	30 35		bmi $c7ea			bmi False1
=6					CL	.var *-(WordListLink+wh_Xt)
=$c7b5					en = *	; remember here
>c7ad	06					.byte CL	;wh_CodeLength
.c7b5	4c f8 b3	jmp $b3f8	Throw_Stack_08: jmp Throw_Stack
>c7b8	3d				L1:	.text "="	;  name of word as a string, ending at wh_NameLastChar
>c7b9	a1					.byte (("="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7ba	2a c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7bd	08					.byte NN	;wh_Flags	dictionary flags
=51001					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7be	b5 24		lda $24,x	Equal:		lda DStack+0,x		; LSB
.c7c0	d5 26		cmp $26,x			cmp DStack+2,x
.c7c2	d0 26		bne $c7ea			bne False1
.c7c4	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c7c6	d5 27		cmp $27,x			cmp DStack+3,x
.c7c8	d0 20		bne $c7ea			bne False1
.c7ca	a9 ff		lda #$ff	True1:		lda #$ff	; return TRUE
.c7cc					Return1:
.c7cc	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c7ce	b0 e5		bcs $c7b5		bcs Throw_Stack_08
.c7d0	e8		inx				inx		; Drop
.c7d1	e8		inx				inx
.c7d2	95 24		sta $24,x			sta DStack+0,x	; store f
.c7d4	95 25		sta $25,x			sta DStack+1,x
.c7d6	60		rts				rts
=25					CL	.var *-(WordListLink+wh_Xt)
=$c7d7					en = *	; remember here
>c7bc	19					.byte CL	;wh_CodeLength
>c7d7	3c 3e				L1:	.text "<>"	;  name of word as a string, ending at wh_NameLastChar
>c7d9	c2					.byte (("<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7da	39 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7dd	08					.byte NN	;wh_Flags	dictionary flags
=51033					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7de	b5 24		lda $24,x	Not_Equals:	lda DStack+0,x		; LSB
.c7e0	d5 26		cmp $26,x			cmp DStack+2,x
.c7e2	d0 e6		bne $c7ca			bne True1
.c7e4	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c7e6	d5 27		cmp $27,x			cmp DStack+3,x
.c7e8	d0 e0		bne $c7ca			bne True1
.c7ea	a9 00		lda #$00	False1:		lda #0		; return FALSE
.c7ec	f0 de		beq $c7cc			beq Return1
=16					CL	.var *-(WordListLink+wh_Xt)
=$c7ee					en = *	; remember here
>c7dc	10					.byte CL	;wh_CodeLength
>c7ee	3c				L1:	.text "<"	;  name of word as a string, ending at wh_NameLastChar
>c7ef	81					.byte (("<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7f0	59 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7f2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7f3	08					.byte NN	;wh_Flags	dictionary flags
=51055					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7f4	b5 26		lda $26,x	Less_Than:	lda DStack+2,x	; compare
.c7f6	d5 24		cmp $24,x			cmp DStack+0,x
.c7f8	b5 27		lda $27,x			lda DStack+3,x
.c7fa	f5 25		sbc $25,x			sbc DStack+1,x
.c7fc	50 02		bvc $c800			bvc _c
.c7fe	49 80		eor #$80			eor #$80	; fix sign
.c800	10 e8		bpl $c7ea	_c:		bpl False1
.c802	30 c6		bmi $c7ca			bmi True1
=16					CL	.var *-(WordListLink+wh_Xt)
=$c804					en = *	; remember here
>c7f2	10					.byte CL	;wh_CodeLength
>c804	3e 3d				L1:	.text ">="	;  name of word as a string, ending at wh_NameLastChar
>c806	a2					.byte ((">="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c807	6f c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c809	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c80a	08					.byte NN	;wh_Flags	dictionary flags
=51078					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c80b	20 f4 c7	jsr $c7f4	Ge:		jsr Less_Than
.c80e	4c 89 c8	jmp $c889			jmp ZEqA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c811					en = *	; remember here
>c809	06					.byte CL	;wh_CodeLength
>c811	55 3c				L1:	.text "U<"	;  name of word as a string, ending at wh_NameLastChar
>c813	82					.byte (("U<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c814	86 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c816	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c817	08					.byte NN	;wh_Flags	dictionary flags
=51091					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c818	b5 26		lda $26,x	U_Less_Than:	lda DStack+2,x
.c81a	d5 24		cmp $24,x			cmp DStack+0,x
.c81c	b5 27		lda $27,x			lda DStack+3,x
.c81e	f5 25		sbc $25,x			sbc DStack+1,x
.c820	b0 c8		bcs $c7ea			bcs False1
.c822	90 a6		bcc $c7ca			bcc True1
=12					CL	.var *-(WordListLink+wh_Xt)
=$c824					en = *	; remember here
>c816	0c					.byte CL	;wh_CodeLength
>c824	55 3e				L1:	.text "U>"	;  name of word as a string, ending at wh_NameLastChar
>c826	c2					.byte (("U>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c827	93 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c829	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c82a	08					.byte NN	;wh_Flags	dictionary flags
=51110					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c82b	b5 24		lda $24,x	U_Greater_Than:	lda DStack+0,x
.c82d	d5 26		cmp $26,x			cmp DStack+2,x
.c82f	b5 25		lda $25,x			lda DStack+1,x
.c831	f5 27		sbc $27,x			sbc DStack+3,x
.c833	b0 b5		bcs $c7ea			bcs False1
.c835	90 93		bcc $c7ca			bcc True1
=12					CL	.var *-(WordListLink+wh_Xt)
=$c837					en = *	; remember here
>c829	0c					.byte CL	;wh_CodeLength
>c837	3e				L1:	.text ">"	;  name of word as a string, ending at wh_NameLastChar
>c838	c1					.byte ((">"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c839	a6 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c83b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c83c	08					.byte NN	;wh_Flags	dictionary flags
=51128					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c83d	b5 24		lda $24,x	Greater_Than:	lda DStack+0,x	; compare
.c83f	d5 26		cmp $26,x			cmp DStack+2,x
.c841	b5 25		lda $25,x			lda DStack+1,x
.c843	f5 27		sbc $27,x			sbc DStack+3,x
.c845	50 02		bvc $c849			bvc _c
.c847	49 80		eor #$80			eor #$80	; fix sign
.c849	10 9f		bpl $c7ea	_c:		bpl False1
.c84b	4c ca c7	jmp $c7ca			jmp True1
=17					CL	.var *-(WordListLink+wh_Xt)
=$c84e					en = *	; remember here
>c83b	11					.byte CL	;wh_CodeLength
>c84e	3c 3d				L1:	.text "<="	;  name of word as a string, ending at wh_NameLastChar
>c850	a2					.byte (("<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c851	b8 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c853	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c854	08					.byte NN	;wh_Flags	dictionary flags
=51152					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c855	20 3d c8	jsr $c83d	Le:		jsr Greater_Than
.c858	4c 89 c8	jmp $c889			jmp ZEqA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c85b					en = *	; remember here
>c853	06					.byte CL	;wh_CodeLength
>c85b	55 3e 3d			L1:	.text "U>="	;  name of word as a string, ending at wh_NameLastChar
>c85e	a3					.byte (("U>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c85f	d0 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c861	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c862	08					.byte NN	;wh_Flags	dictionary flags
=51166					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c863	20 18 c8	jsr $c818	UGe:		jsr U_Less_Than
.c866	4c 89 c8	jmp $c889			jmp ZEqA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c869					en = *	; remember here
>c861	06					.byte CL	;wh_CodeLength
>c869	55 3c 3d			L1:	.text "U<="	;  name of word as a string, ending at wh_NameLastChar
>c86c	a3					.byte (("U<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c86d	de c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c86f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c870	08					.byte NN	;wh_Flags	dictionary flags
=51180					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c871	20 2b c8	jsr $c82b	ULe:		jsr U_Greater_Than
.c874	4c 89 c8	jmp $c889			jmp ZEqA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c877					en = *	; remember here
>c86f	06					.byte CL	;wh_CodeLength
.c877	4c f8 b3	jmp $b3f8	Throw_Stack_11: jmp Throw_Stack
>c87a	30 3d				L1:	.text "0="	;  name of word as a string, ending at wh_NameLastChar
>c87c	a2					.byte (("0="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c87d	ec c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c87f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c880	08					.byte NN	;wh_Flags	dictionary flags
=51196					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c881	b5 25		lda $25,x	Zero_Equal:	lda DStack+1,x
.c883	15 24		ora $24,x	ZEq3:		ora DStack+0,x
.c885	d0 2d		bne $c8b4			bne False0
.c887	f0 15		beq $c89e			beq True0
=8					CL	.var *-(WordListLink+wh_Xt)
=$c889					en = *	; remember here
>c87f	08					.byte CL	;wh_CodeLength
.c889					ZEqA:
.c889	49 ff		eor #$ff			eor #$ff
.c88b	95 24		sta $24,x			sta DStack+0,x
.c88d	95 25		sta $25,x			sta DStack+1,x
.c88f	60		rts				rts
>c890	30 3c 3e			L1:	.text "0<>"	;  name of word as a string, ending at wh_NameLastChar
>c893	c3					.byte (("0<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c894	fc c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c896	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c897	08					.byte NN	;wh_Flags	dictionary flags
=51219					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c898	b5 25		lda $25,x	Zero_Unequal:	lda DStack+1,x
.c89a	15 24		ora $24,x	ZNe3:		ora DStack+0,x
.c89c	f0 16		beq $c8b4			beq False0
.c89e	a9 ff		lda #$ff	True0:		lda #$ff	; return TRUE
.c8a0	95 24		sta $24,x	Return0:	sta DStack+0,x
.c8a2	95 25		sta $25,x			sta DStack+1,x
.c8a4	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c8a6	b0 39		bcs $c8e1		bcs Throw_Stack_05
.c8a8	60		rts				rts
=17					CL	.var *-(WordListLink+wh_Xt)
=$c8a9					en = *	; remember here
>c896	11					.byte CL	;wh_CodeLength
>c8a9	30 3e				L1:	.text "0>"	;  name of word as a string, ending at wh_NameLastChar
>c8ab	c2					.byte (("0>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8ac	13 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8ae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8af	08					.byte NN	;wh_Flags	dictionary flags
=51243					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8b0	b5 25		lda $25,x	Zero_Greater:	lda DStack+1,x	; MSB
.c8b2	10 e6		bpl $c89a			bpl ZNe3	; >= 0 ?
.c8b4	a9 00		lda #$00	False0:		lda #0		; return FALSE
.c8b6	f0 e8		beq $c8a0			beq Return0
=8					CL	.var *-(WordListLink+wh_Xt)
=$c8b8					en = *	; remember here
>c8ae	08					.byte CL	;wh_CodeLength
>c8b8	30 3c 3d			L1:	.text "0<="	;  name of word as a string, ending at wh_NameLastChar
>c8bb	a3					.byte (("0<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8bc	2b c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8bf	08					.byte NN	;wh_Flags	dictionary flags
=51259					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8c0	b5 25		lda $25,x	ZLe:		lda DStack+1,x	; < 0 ?
.c8c2	30 da		bmi $c89e			bmi True0
.c8c4	10 bd		bpl $c883			bpl ZEq3
=6					CL	.var *-(WordListLink+wh_Xt)
=$c8c6					en = *	; remember here
>c8be	06					.byte CL	;wh_CodeLength
>c8c6	30 3e 3d			L1:	.text "0>="	;  name of word as a string, ending at wh_NameLastChar
>c8c9	a3					.byte (("0>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8ca	3b c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8cd	08					.byte NN	;wh_Flags	dictionary flags
=51273					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8ce	b5 25		lda $25,x	ZGe:		lda DStack+1,x
.c8d0	10 cc		bpl $c89e			bpl True0
.c8d2	30 e0		bmi $c8b4			bmi False0
=6					CL	.var *-(WordListLink+wh_Xt)
=$c8d4					en = *	; remember here
>c8cc	06					.byte CL	;wh_CodeLength
>c8d4	30 3c				L1:	.text "0<"	;  name of word as a string, ending at wh_NameLastChar
>c8d6	82					.byte (("0<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8d7	49 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8d9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8da	08					.byte NN	;wh_Flags	dictionary flags
=51286					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8db	b5 25		lda $25,x	Zero_Less:	lda DStack+1,x	; MSB
.c8dd	10 d5		bpl $c8b4			bpl False0
.c8df	30 bd		bmi $c89e			bmi True0
=6					CL	.var *-(WordListLink+wh_Xt)
=$c8e1					en = *	; remember here
>c8d9	06					.byte CL	;wh_CodeLength
.c8e1	4c f8 b3	jmp $b3f8	Throw_Stack_05: jmp Throw_Stack
>c8e4	4d 69 6e			L1:	.text "Min"	;  name of word as a string, ending at wh_NameLastChar
>c8e7	c3					.byte (("Min"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8e8	56 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8ea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8eb	18					.byte UF+NN	;wh_Flags	dictionary flags
=51303					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8ec					Min:
.c8ec	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c8ee	b0 f1		bcs $c8e1		bcs Throw_Stack_05
.c8f0	b5 24		lda $24,x			lda DStack+0,x	; compare n1 & n2; sets V & N but not Z
.c8f2	d5 26		cmp $26,x			cmp DStack+2,x
.c8f4	b5 25		lda $25,x			lda DStack+1,x
.c8f6	f5 27		sbc $27,x			sbc DStack+3,x
.c8f8	70 1b		bvs $c915			bvs Max_3	; if overflow, the sign is backwards
.c8fa	30 29		bmi $c925	Min_3:		bmi Nip_NoUf	; if negative, NOS is larger and needs to be dumped
.c8fc	e8		inx				inx		; Drop n2
.c8fd	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$c8fe					en = *	; remember here
>c8ea	12					.byte CL	;wh_CodeLength
.c8fe	60		rts				rts
>c8ff	4d 61 78			L1:	.text "Max"	;  name of word as a string, ending at wh_NameLastChar
>c902	03					.byte (("Max"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c903	67 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c905	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c906	08					.byte NN	;wh_Flags	dictionary flags
=51330					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c907					Max:
.c907	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c909	b0 d6		bcs $c8e1		bcs Throw_Stack_05
.c90b	b5 24		lda $24,x			lda DStack+0,x	; Compare n1 & n2; sets V & N but not Z
.c90d	d5 26		cmp $26,x			cmp DStack+2,x
.c90f	b5 25		lda $25,x			lda DStack+1,x
.c911	f5 27		sbc $27,x			sbc DStack+3,x
.c913	70 e5		bvs $c8fa			bvs Min_3	; if overflow, the sign is backwards
.c915	10 0e		bpl $c925	Max_3:		bpl Nip_NoUf	; if negative, NOS is larger and needs to be kept
.c917	e8		inx				inx		; Drop n2
.c918	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$c919					en = *	; remember here
>c905	12					.byte CL	;wh_CodeLength
.c919	60		rts				rts
>c91a	4e 69 70			L1:	.text "Nip"	;  name of word as a string, ending at wh_NameLastChar
>c91d	03					.byte (("Nip"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c91e	82 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c920	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c921	10					.byte UF	;wh_Flags	dictionary flags
=51357					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c922					Nip:
.c922	20 e9 b3	jsr $b3e9			jsr underflow_2
.c925	b5 24		lda $24,x	Nip_NoUf:	lda DStack+0,x	; PopYA
.c927	b4 25		ldy $25,x			ldy DStack+1,x
.c929	e8		inx				inx
.c92a	e8		inx				inx
.c92b	95 24		sta $24,x			sta DStack+0,x	; store over n1
.c92d	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$c92f					en = *	; remember here
>c920	0d					.byte CL	;wh_CodeLength
.c92f	60		rts				rts
>c930	50 69 63 6b			L1:	.text "Pick"	;  name of word as a string, ending at wh_NameLastChar
>c934	64					.byte (("Pick"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c935	9d c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c937	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c938	00					.byte 0	;wh_Flags	dictionary flags
=51380					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c939					Pick:
.c939	16 24		asl $24,x			asl DStack+0,x	; we assume u < 128 (stack is small)
.c93b	8a		txa				txa
.c93c	75 24		adc $24,x			adc DStack+0,x
.c93e	a8		tay				tay
.c93f	b9 26 00	lda $0026,y			lda DStack+2,y
.c942	95 24		sta $24,x			sta DStack+0,x
.c944	b9 27 00	lda $0027,y			lda DStack+3,y
.c947	95 25		sta $25,x			sta DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$c949					en = *	; remember here
>c937	10					.byte CL	;wh_CodeLength
.c949	60		rts				rts
>c94a	43 68 61 72			L1:	.text "Char"	;  name of word as a string, ending at wh_NameLastChar
>c94e	44					.byte (("Char"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c94f	b4 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c951	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c952	08					.byte NN	;wh_Flags	dictionary flags
=51406					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c953					Char:
.c953	20 86 ba	jsr $ba86			jsr parse_name_check
.c956	e8		inx				inx		; Drop number of characters, leave addr
.c957	e8		inx				inx
.c958	4c 0a cd	jmp $cd0a			jmp C_Fetch	; get character ( C@ )
=8					CL	.var *-(WordListLink+wh_Xt)
=$c95b					en = *	; remember here
>c951	08					.byte CL	;wh_CodeLength
>c95b	5b 43 68 61 72 5d		L1:	.text "[Char]"	;  name of word as a string, ending at wh_NameLastChar
>c961	a6					.byte (("[Char]"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c962	ce c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c964	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c965	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=51425					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c966	20 53 c9	jsr $c953	Bracket_Char:	jsr Char
.c969	4c 17 b7	jmp $b717			jmp Literal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c96c					en = *	; remember here
>c964	06					.byte CL	;wh_CodeLength
>c96c	43 68 61 72 2b			L1:	.text "Char+"	;  name of word as a string, ending at wh_NameLastChar
>c971	65					.byte (("Char+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c972	e1 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c974	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c975	00					.byte 0	;wh_Flags	dictionary flags
=51441					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c976					Char_Plus:
.c976	20 d4 b3	jsr $b3d4			jsr underflow_1
.c979	f6 24		inc $24,x			inc DStack+0,x
.c97b	d0 02		bne $c97f			bne +
.c97d	f6 25		inc $25,x			inc DStack+1,x
.c97f					+
=9					CL	.var *-(WordListLink+wh_Xt)
=$c97f					en = *	; remember here
>c974	09					.byte CL	;wh_CodeLength
.c97f	60		rts				rts
>c980	43 68 61 72 73			L1:	.text "Chars"	;  name of word as a string, ending at wh_NameLastChar
>c985	65					.byte (("Chars"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c986	f1 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c988	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c989	02					.byte AN	;wh_Flags	dictionary flags
=51461					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c98a					Chars:
=0					CL	.var *-(WordListLink+wh_Xt)
=$c98a					en = *	; remember here
>c988	00					.byte CL	;wh_CodeLength
.c98a	60		rts				rts
>c98b	43 65 6c 6c 73			L1:	.text "Cells"	;  name of word as a string, ending at wh_NameLastChar
>c990	65					.byte (("Cells"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c991	05 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c993	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c994	10					.byte UF	;wh_Flags	dictionary flags
=51472					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c995					Cells:
.c995	20 d4 b3	jsr $b3d4			jsr underflow_1
.c998	16 24		asl $24,x			asl DStack+0,x		; 2*
.c99a	36 25		rol $25,x			rol DStack+1,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$c99c					en = *	; remember here
>c993	07					.byte CL	;wh_CodeLength
.c99c	60		rts				rts
>c99d	43 65 6c 6c 2b			L1:	.text "Cell+"	;  name of word as a string, ending at wh_NameLastChar
>c9a2	65					.byte (("Cell+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9a3	10 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9a5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9a6	10					.byte UF	;wh_Flags	dictionary flags
=51490					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9a7					Cell_Plus:
.c9a7	20 d4 b3	jsr $b3d4			jsr underflow_1
.c9aa	a9 02		lda #$02	Cell_Plus_NoUf:	lda #2		; our cells are 2 bytes
.c9ac					Plus_A:
.c9ac	18		clc				clc
.c9ad	75 24		adc $24,x			adc DStack+0,x
.c9af	95 24		sta $24,x			sta DStack+0,x
.c9b1	90 02		bcc $c9b5			bcc +
.c9b3	f6 25		inc $25,x			inc DStack+1,x
.c9b5					+
=14					CL	.var *-(WordListLink+wh_Xt)
=$c9b5					en = *	; remember here
>c9a5	0e					.byte CL	;wh_CodeLength
.c9b5	60		rts				rts
.c9b6					Nos_Plus_A:
.c9b6	18		clc				clc
.c9b7	75 26		adc $26,x			adc DStack+2,x
.c9b9	95 26		sta $26,x			sta DStack+2,x
.c9bb	90 02		bcc $c9bf			bcc +
.c9bd	f6 27		inc $27,x			inc DStack+3,x
.c9bf	60		rts		+		rts
>c9c0	48 65 72 65			L1:	.text "Here"	;  name of word as a string, ending at wh_NameLastChar
>c9c4	a4					.byte (("Here"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9c5	22 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9c8	08					.byte NN	;wh_Flags	dictionary flags
=51524					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9c9	a5 00		lda $00		Here:		lda cp+0
.c9cb	a4 01		ldy $01				ldy cp+1
.c9cd	4c 64 b7	jmp $b764			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$c9d0					en = *	; remember here
>c9c7	07					.byte CL	;wh_CodeLength
>c9d0	31 2d				L1:	.text "1-"	;  name of word as a string, ending at wh_NameLastChar
>c9d2	a2					.byte (("1-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9d3	44 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9d5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9d6	10					.byte UF	;wh_Flags	dictionary flags
=51538					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9d7					One_Minus:
.c9d7	20 d4 b3	jsr $b3d4			jsr underflow_1
.c9da					One_Minus_NoUf:
.c9da	b5 24		lda $24,x			lda DStack+0,x
.c9dc	d0 02		bne $c9e0			bne +
.c9de	d6 25		dec $25,x			dec DStack+1,x
.c9e0	d6 24		dec $24,x	+		dec DStack+0,x
=11					CL	.var *-(WordListLink+wh_Xt)
=$c9e2					en = *	; remember here
>c9d5	0b					.byte CL	;wh_CodeLength
.c9e2	60		rts				rts
.c9e3					NOS_One_Minus:
.c9e3	b5 26		lda $26,x			lda DStack+2,x
.c9e5	d0 02		bne $c9e9			bne +
.c9e7	d6 27		dec $27,x			dec DStack+3,x
.c9e9	d6 26		dec $26,x	+		dec DStack+2,x
.c9eb	60		rts				rts
.c9ec					Minus_A:
.c9ec	18		clc				clc
.c9ed	75 24		adc $24,x			adc DStack+0,x
.c9ef	95 24		sta $24,x			sta DStack+0,x
.c9f1	b0 02		bcs $c9f5			bcs +
.c9f3	d6 25		dec $25,x			dec DStack+1,x
.c9f5	60		rts		+		rts
>c9f6	31 2b				L1:	.text "1+"	;  name of word as a string, ending at wh_NameLastChar
>c9f8	62					.byte (("1+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9f9	52 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9fb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9fc	10					.byte UF	;wh_Flags	dictionary flags
=51576					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9fd					One_Plus:
.c9fd	20 d4 b3	jsr $b3d4			jsr underflow_1
.ca00	f6 24		inc $24,x			inc DStack+0,x
.ca02	d0 02		bne $ca06			bne +
.ca04	f6 25		inc $25,x			inc DStack+1,x
.ca06					+
=9					CL	.var *-(WordListLink+wh_Xt)
=$ca06					en = *	; remember here
>c9fb	09					.byte CL	;wh_CodeLength
.ca06	60		rts				rts
.ca07					NOS_One_Plus:
.ca07	f6 26		inc $26,x			inc DStack+2,x
.ca09	d0 02		bne $ca0d			bne +
.ca0b	f6 27		inc $27,x			inc DStack+3,x
.ca0d	60		rts		+		rts
>ca0e	55 4d 2b			L1:	.text "UM+"	;  name of word as a string, ending at wh_NameLastChar
>ca11	63					.byte (("UM+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca12	78 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca14	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca15	00					.byte 0	;wh_Flags	dictionary flags
=51601					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca16	20 aa b3	jsr $b3aa	UMPlus:		jsr PopYA
.ca19	18		clc				clc		; add n to d1.lo
.ca1a	75 26		adc $26,x			adc DStack+2,x
.ca1c	95 26		sta $26,x			sta DStack+2,x
.ca1e	98		tya				tya
.ca1f	75 27		adc $27,x			adc DStack+3,x
.ca21	95 27		sta $27,x			sta DStack+3,x
.ca23	90 06		bcc $ca2b			bcc +		; propagate carry thru d1.hi
.ca25	f6 24		inc $24,x			inc DStack+0,x
.ca27	d0 02		bne $ca2b			bne +
.ca29	f6 25		inc $25,x			inc DStack+1,x
.ca2b					+
=21					CL	.var *-(WordListLink+wh_Xt)
=$ca2b					en = *	; remember here
>ca14	15					.byte CL	;wh_CodeLength
.ca2b	60		rts				rts
>ca2c	4d 2b				L1:	.text "M+"	;  name of word as a string, ending at wh_NameLastChar
>ca2e	62					.byte (("M+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca2f	91 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca31	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca32	08					.byte NN	;wh_Flags	dictionary flags
=51630					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca33	20 16 ca	jsr $ca16	MPlus:		jsr UMPlus
.ca36	98		tya				tya		; if n negative
.ca37	30 a1		bmi $c9da			bmi One_Minus_NoUf ;   decrement d1.hi
=6					CL	.var *-(WordListLink+wh_Xt)
=$ca39					en = *	; remember here
>ca31	06					.byte CL	;wh_CodeLength
.ca39	60		rts				rts
>ca3a	44 32 2a			L1:	.text "D2*"	;  name of word as a string, ending at wh_NameLastChar
>ca3d	43					.byte (("D2*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca3e	ae c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca40	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca41	10					.byte UF	;wh_Flags	dictionary flags
=51645					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca42	20 e9 b3	jsr $b3e9	D2Star:		jsr underflow_2
.ca45	16 26		asl $26,x			asl DStack+2,x
.ca47	36 27		rol $27,x			rol DStack+3,x
.ca49	36 24		rol $24,x			rol DStack+0,x
.ca4b	36 25		rol $25,x			rol DStack+1,x
=11					CL	.var *-(WordListLink+wh_Xt)
=$ca4d					en = *	; remember here
>ca40	0b					.byte CL	;wh_CodeLength
.ca4d	60		rts				rts
>ca4e	44 32 2f			L1:	.text "D2/"	;  name of word as a string, ending at wh_NameLastChar
>ca51	e3					.byte (("D2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca52	bd c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca54	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca55	10					.byte UF	;wh_Flags	dictionary flags
=51665					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca56	20 e9 b3	jsr $b3e9	D2Slash:	jsr underflow_2
.ca59	b5 25		lda $25,x			lda DStack+1,x		; setup for sign-extended shift right
.ca5b	0a		asl a				asl a
.ca5c	76 25		ror $25,x	D2SlashU:	ror DStack+1,x
.ca5e	76 24		ror $24,x			ror DStack+0,x
.ca60	76 27		ror $27,x			ror DStack+3,x
.ca62	76 26		ror $26,x			ror DStack+2,x
=14					CL	.var *-(WordListLink+wh_Xt)
=$ca64					en = *	; remember here
>ca54	0e					.byte CL	;wh_CodeLength
.ca64	60		rts				rts
>ca65	55 44 32 2f			L1:	.text "UD2/"	;  name of word as a string, ending at wh_NameLastChar
>ca69	e4					.byte (("UD2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca6a	d1 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca6c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca6d	18					.byte UF+NN	;wh_Flags	dictionary flags
=51689					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca6e	20 e9 b3	jsr $b3e9	DU2Slash:	jsr underflow_2
.ca71	18		clc				clc
.ca72	90 e8		bcc $ca5c			bcc D2SlashU
=6					CL	.var *-(WordListLink+wh_Xt)
=$ca74					en = *	; remember here
>ca6c	06					.byte CL	;wh_CodeLength
>ca74	32 2a				L1:	.text "2*"	;  name of word as a string, ending at wh_NameLastChar
>ca76	42					.byte (("2*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca77	e9 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca79	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca7a	10					.byte UF	;wh_Flags	dictionary flags
=51702					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca7b					Two_Star:
.ca7b	20 d4 b3	jsr $b3d4			jsr underflow_1
.ca7e	16 24		asl $24,x			asl DStack+0,x
.ca80	36 25		rol $25,x			rol DStack+1,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$ca82					en = *	; remember here
>ca79	07					.byte CL	;wh_CodeLength
.ca82	60		rts				rts
>ca83	32 2f				L1:	.text "2/"	;  name of word as a string, ending at wh_NameLastChar
>ca85	e2					.byte (("2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca86	f6 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca88	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca89	10					.byte UF	;wh_Flags	dictionary flags
=51717					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca8a					Two_Slash:
.ca8a	20 d4 b3	jsr $b3d4			jsr underflow_1
.ca8d	b5 25		lda $25,x			lda DStack+1,x		; load sign into carry, for signed shift
.ca8f	0a		asl a				asl
.ca90	76 25		ror $25,x			ror DStack+1,x
.ca92	76 24		ror $24,x			ror DStack+0,x
=10					CL	.var *-(WordListLink+wh_Xt)
=$ca94					en = *	; remember here
>ca88	0a					.byte CL	;wh_CodeLength
.ca94	60		rts				rts
>ca95	55 32 2f			L1:	.text "U2/"	;  name of word as a string, ending at wh_NameLastChar
>ca98	e3					.byte (("U2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca99	05 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca9b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca9c	10					.byte UF	;wh_Flags	dictionary flags
=51736					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca9d					UTwo_Slash:
.ca9d	20 d4 b3	jsr $b3d4			jsr underflow_1
.caa0	56 25		lsr $25,x			lsr DStack+1,x
.caa2	76 24		ror $24,x			ror DStack+0,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$caa4					en = *	; remember here
>ca9b	07					.byte CL	;wh_CodeLength
.caa4	60		rts				rts
>caa5	44 52 53 68 69 66 74		L1:	.text "DRShift"	;  name of word as a string, ending at wh_NameLastChar
>caac	87					.byte (("DRShift"[-1]&7)<<5)+(*-L1)	;wh_HNL
>caad	18 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>caaf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cab0	00					.byte 0	;wh_Flags	dictionary flags
=51756					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cab1	20 8e b3	jsr $b38e	DRShift:	jsr PopA	; pop u
.cab4	a8		tay		DRShiftA:	tay
.cab5	f0 0e		beq $cac5			beq _9
.cab7	b5 25		lda $25,x			lda DStack+1,x
.cab9	4a		lsr a		_2:		lsr a
.caba	76 24		ror $24,x			ror DStack+0,x
.cabc	76 27		ror $27,x			ror DStack+3,x
.cabe	76 26		ror $26,x			ror DStack+2,x
.cac0	88		dey				dey
.cac1	d0 f6		bne $cab9			bne _2
.cac3	95 25		sta $25,x			sta DStack+1,x
.cac5					_9:
=20					CL	.var *-(WordListLink+wh_Xt)
=$cac5					en = *	; remember here
>caaf	14					.byte CL	;wh_CodeLength
.cac5	60		rts				rts
>cac6	52 53 68 69 66 74		L1:	.text "RShift"	;  name of word as a string, ending at wh_NameLastChar
>cacc	86					.byte (("RShift"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cacd	2c ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cacf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cad0	00					.byte 0	;wh_Flags	dictionary flags
=51788					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cad1	20 97 b3	jsr $b397	RShift:		jsr PopA2	; pop u, check for 2 params
.cad4	a8		tay		RShift_A:	tay		; get shift count
.cad5	f0 0a		beq $cae1			beq _done
.cad7	b5 25		lda $25,x			lda DStack+1,x
.cad9	4a		lsr a		_loop:		lsr a
.cada	76 24		ror $24,x			ror DStack+0,x
.cadc	88		dey				dey
.cadd	d0 fa		bne $cad9			bne _loop
.cadf	95 25		sta $25,x			sta DStack+1,x
.cae1					_done:
=16					CL	.var *-(WordListLink+wh_Xt)
=$cae1					en = *	; remember here
>cacf	10					.byte CL	;wh_CodeLength
.cae1	60		rts				rts
>cae2	4c 53 68 69 66 74		L1:	.text "LShift"	;  name of word as a string, ending at wh_NameLastChar
>cae8	86					.byte (("LShift"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cae9	4c ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>caeb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>caec	00					.byte 0	;wh_Flags	dictionary flags
=51816					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.caed	20 97 b3	jsr $b397	LShift:		jsr PopA2	; pop u, check for 2 params
.caf0	a8		tay		LShift_A:	tay		; get shift count
.caf1	f0 0a		beq $cafd			beq _done
.caf3	b5 25		lda $25,x			lda DStack+1,x
.caf5	16 24		asl $24,x	_loop:		asl DStack+0,x
.caf7	2a		rol a				rol a
.caf8	88		dey				dey
.caf9	d0 fa		bne $caf5			bne _loop
.cafb	95 25		sta $25,x			sta DStack+1,x
.cafd					_done:
=16					CL	.var *-(WordListLink+wh_Xt)
=$cafd					en = *	; remember here
>caeb	10					.byte CL	;wh_CodeLength
.cafd	60		rts				rts
>cafe	41 6e 64			L1:	.text "And"	;  name of word as a string, ending at wh_NameLastChar
>cb01	83					.byte (("And"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb02	68 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb04	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb05	10					.byte UF	;wh_Flags	dictionary flags
=51841					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb06					And2:
.cb06	20 e9 b3	jsr $b3e9			jsr underflow_2
.cb09	b5 24		lda $24,x			lda DStack+0,x
.cb0b	35 26		and $26,x			and DStack+2,x
.cb0d	95 26		sta $26,x			sta DStack+2,x
.cb0f	b5 25		lda $25,x			lda DStack+1,x
.cb11	35 27		and $27,x			and DStack+3,x
.cb13	95 27		sta $27,x			sta DStack+3,x
.cb15	e8		inx				inx		; Drop n2
.cb16	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$cb17					en = *	; remember here
>cb04	11					.byte CL	;wh_CodeLength
.cb17	60		rts				rts
>cb18	4f 72				L1:	.text "Or"	;  name of word as a string, ending at wh_NameLastChar
>cb1a	42					.byte (("Or"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb1b	81 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb1d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb1e	10					.byte UF	;wh_Flags	dictionary flags
=51866					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb1f					Or:
.cb1f	20 e9 b3	jsr $b3e9			jsr underflow_2
.cb22	b5 24		lda $24,x			lda DStack+0,x
.cb24	15 26		ora $26,x			ora DStack+2,x
.cb26	95 26		sta $26,x			sta DStack+2,x
.cb28	b5 25		lda $25,x			lda DStack+1,x
.cb2a	15 27		ora $27,x			ora DStack+3,x
.cb2c	95 27		sta $27,x			sta DStack+3,x
.cb2e	e8		inx				inx		; Drop n2
.cb2f	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$cb30					en = *	; remember here
>cb1d	11					.byte CL	;wh_CodeLength
.cb30	60		rts				rts
>cb31	58 6f 72			L1:	.text "Xor"	;  name of word as a string, ending at wh_NameLastChar
>cb34	43					.byte (("Xor"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb35	9a ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb37	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb38	10					.byte UF	;wh_Flags	dictionary flags
=51892					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb39					Xor:
.cb39	20 e9 b3	jsr $b3e9			jsr underflow_2
.cb3c	b5 24		lda $24,x			lda DStack+0,x
.cb3e	55 26		eor $26,x			eor DStack+2,x
.cb40	95 26		sta $26,x			sta DStack+2,x
.cb42	b5 25		lda $25,x			lda DStack+1,x
.cb44	55 27		eor $27,x			eor DStack+3,x
.cb46	95 27		sta $27,x			sta DStack+3,x
.cb48	e8		inx				inx		; Drop n2
.cb49	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$cb4a					en = *	; remember here
>cb37	11					.byte CL	;wh_CodeLength
.cb4a	60		rts				rts
>cb4b	2b				L1:	.text "+"	;  name of word as a string, ending at wh_NameLastChar
>cb4c	61					.byte (("+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb4d	b4 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb4f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb50	10					.byte UF	;wh_Flags	dictionary flags
=51916					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb51					Plus:
.cb51	20 e9 b3	jsr $b3e9			jsr underflow_2
.cb54	18		clc				clc
.cb55	b5 24		lda $24,x			lda DStack+0,x		; LSB
.cb57	75 26		adc $26,x			adc DStack+2,x
.cb59	95 26		sta $26,x			sta DStack+2,x
.cb5b	b5 25		lda $25,x			lda DStack+1,x		; MSB. No CLC, conserve carry bit
.cb5d	75 27		adc $27,x			adc DStack+3,x
.cb5f	95 27		sta $27,x			sta DStack+3,x
.cb61	e8		inx				inx
.cb62	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$cb63					en = *	; remember here
>cb4f	12					.byte CL	;wh_CodeLength
.cb63	60		rts				rts
>cb64	2d				L1:	.text "-"	;  name of word as a string, ending at wh_NameLastChar
>cb65	a1					.byte (("-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb66	cc ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb68	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb69	10					.byte UF	;wh_Flags	dictionary flags
=51941					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb6a					Minus:
.cb6a	20 e9 b3	jsr $b3e9			jsr underflow_2
.cb6d	38		sec				sec
.cb6e	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cb70	f5 24		sbc $24,x			sbc DStack+0,x
.cb72	95 26		sta $26,x			sta DStack+2,x
.cb74	b5 27		lda $27,x			lda DStack+3,x	; MSB
.cb76	f5 25		sbc $25,x			sbc DStack+1,x
.cb78	95 27		sta $27,x			sta DStack+3,x
.cb7a	e8		inx				inx		; Drop n2
.cb7b	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$cb7c					en = *	; remember here
>cb68	12					.byte CL	;wh_CodeLength
.cb7c	60		rts				rts
>cb7d	2e				L1:	.text "."	;  name of word as a string, ending at wh_NameLastChar
>cb7e	c1					.byte (("."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb7f	e5 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb81	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb82	08					.byte NN	;wh_Flags	dictionary flags
=51966					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb83	b5 25		lda $25,x	Dot:		lda DStack+1,x		; ( n )	save sign
.cb85	08		php				php
.cb86	20 33 c6	jsr $c633			jsr Abs			; ( u )
.cb89	20 b5 b7	jsr $b7b5			jsr Zero		; ( ud )	u>d  cvt u to ud
.cb8c	4c 9c cb	jmp $cb9c			jmp fmt_d3
=12					CL	.var *-(WordListLink+wh_Xt)
=$cb8f					en = *	; remember here
>cb81	0c					.byte CL	;wh_CodeLength
>cb8f	44 2e				L1:	.text "D."	;  name of word as a string, ending at wh_NameLastChar
>cb91	c2					.byte (("D."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb92	fe ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb94	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb95	08					.byte NN	;wh_Flags	dictionary flags
=51985					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb96	b5 25		lda $25,x	D_Dot:		lda DStack+1,x		; save sign
.cb98	08		php				php
.cb99	20 68 c6	jsr $c668			jsr DAbs
.cb9c	20 5f ab	jsr $ab5f	fmt_d3:		jsr Less_Number_Sign	; ( ud )	start formatting
.cb9f	20 d2 ab	jsr $abd2			jsr Number_sign_s	; ( ud )	do all digits
.cba2	28		plp				plp			; ( ud )	do sign
.cba3	20 ed ab	jsr $abed			jsr Sign_P		; ( ud )
.cba6	20 6c ab	jsr $ab6c			jsr Number_sign_greater	; ( addr u )	end formatting
.cba9	20 8f cd	jsr $cd8f			jsr Type
.cbac	4c 82 cd	jmp $cd82			jmp Space
=25					CL	.var *-(WordListLink+wh_Xt)
=$cbaf					en = *	; remember here
>cb94	19					.byte CL	;wh_CodeLength
>cbaf	55 2e				L1:	.text "U."	;  name of word as a string, ending at wh_NameLastChar
>cbb1	c2					.byte (("U."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbb2	11 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbb4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbb5	18					.byte UF+NN	;wh_Flags	dictionary flags
=52017					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbb6	20 d4 b3	jsr $b3d4	U_Dot:		jsr underflow_1
.cbb9	20 d0 cb	jsr $cbd0			jsr print_u
.cbbc	4c 82 cd	jmp $cd82			jmp Space
=9					CL	.var *-(WordListLink+wh_Xt)
=$cbbf					en = *	; remember here
>cbb4	09					.byte CL	;wh_CodeLength
>cbbf	55 44 2e			L1:	.text "UD."	;  name of word as a string, ending at wh_NameLastChar
>cbc2	c3					.byte (("UD."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbc3	31 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbc5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbc6	18					.byte UF+NN	;wh_Flags	dictionary flags
=52034					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbc7	20 e9 b3	jsr $b3e9	UD_Dot:		jsr underflow_2 ; double number
.cbca	20 d3 cb	jsr $cbd3			jsr print_ud
.cbcd	4c 82 cd	jmp $cd82			jmp Space
=9					CL	.var *-(WordListLink+wh_Xt)
=$cbd0					en = *	; remember here
>cbc5	09					.byte CL	;wh_CodeLength
.cbd0					print_u:
.cbd0	20 b5 b7	jsr $b7b5			jsr Zero			; convert to ud
.cbd3					print_ud:
.cbd3	20 5f ab	jsr $ab5f			jsr Less_Number_Sign		; <#	start formatting
.cbd6	20 d2 ab	jsr $abd2			jsr Number_sign_s		; #S	do all digits
.cbd9	20 6c ab	jsr $ab6c			jsr Number_sign_greater		; #>	end formatting
.cbdc	4c 8f cd	jmp $cd8f			jmp Type
>cbdf	55 2e 52			L1:	.text "U.R"	;  name of word as a string, ending at wh_NameLastChar
>cbe2	43					.byte (("U.R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbe3	42 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbe5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbe6	08					.byte NN	;wh_Flags	dictionary flags
=52066					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbe7	20 8e b3	jsr $b38e	U_Dot_R:	jsr PopA		; save field width
.cbea	48		pha		U_Dot_R_A:	pha
.cbeb	20 b5 b7	jsr $b7b5			jsr Zero		; u>d  cvt u to ud
.cbee	4c fe cb	jmp $cbfe			jmp fmt_udr3
=10					CL	.var *-(WordListLink+wh_Xt)
=$cbf1					en = *	; remember here
>cbe5	0a					.byte CL	;wh_CodeLength
>cbf1	55 44 2e 52			L1:	.text "UD.R"	;  name of word as a string, ending at wh_NameLastChar
>cbf5	44					.byte (("UD.R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbf6	62 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbf8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbf9	08					.byte NN	;wh_Flags	dictionary flags
=52085					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbfa	20 8e b3	jsr $b38e	UD_Dot_R:	jsr PopA			; save field width
.cbfd	48		pha		UD_Dot_R_A:	pha
.cbfe	20 5f ab	jsr $ab5f	fmt_udr3:	jsr Less_Number_Sign		; start formatted
.cc01	20 d2 ab	jsr $abd2			jsr Number_sign_s		; do all digits
.cc04	20 6c ab	jsr $ab6c	fmt_r:		jsr Number_sign_greater		; finish formatted
.cc07	68		pla				pla				; recover field width
.cc08	38		sec				sec				; do leading spaces
.cc09	f5 24		sbc $24,x			sbc DStack+0,x
.cc0b	90 06		bcc $cc13			bcc +
.cc0d	20 a6 b7	jsr $b7a6			jsr PushZA
.cc10	20 1a c4	jsr $c41a			jsr Spaces
.cc13	4c 8f cd	jmp $cd8f	+		jmp Type			; type formatted
=28					CL	.var *-(WordListLink+wh_Xt)
=$cc16					en = *	; remember here
>cbf8	1c					.byte CL	;wh_CodeLength
>cc16	2e 52				L1:	.text ".R"	;  name of word as a string, ending at wh_NameLastChar
>cc18	42					.byte ((".R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc19	75 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc1b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc1c	08					.byte NN	;wh_Flags	dictionary flags
=52120					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc1d	20 8e b3	jsr $b38e	Dot_R:		jsr PopA		; save field width
.cc20	48		pha		Dot_R_A:	pha
.cc21	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cc23	08		php				php
.cc24	20 33 c6	jsr $c633			jsr Abs
.cc27	20 b5 b7	jsr $b7b5			jsr Zero		; u>d  cvt u to ud
.cc2a	4c 3f cc	jmp $cc3f			jmp fmt_dr3
=16					CL	.var *-(WordListLink+wh_Xt)
=$cc2d					en = *	; remember here
>cc1b	10					.byte CL	;wh_CodeLength
>cc2d	44 2e 52			L1:	.text "D.R"	;  name of word as a string, ending at wh_NameLastChar
>cc30	43					.byte (("D.R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc31	98 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc33	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc34	08					.byte NN	;wh_Flags	dictionary flags
=52144					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc35	20 8e b3	jsr $b38e	D_Dot_R:	jsr PopA		; save field width
.cc38	48		pha		D_Dot_R_A:	pha
.cc39	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cc3b	08		php				php
.cc3c	20 68 c6	jsr $c668			jsr DAbs
.cc3f	20 5f ab	jsr $ab5f	fmt_dr3:	jsr Less_Number_Sign	; start formatted output
.cc42	20 d2 ab	jsr $abd2			jsr Number_sign_s	; do all digits
.cc45	28		plp				plp			; do the sign
.cc46	20 ed ab	jsr $abed			jsr Sign_P
.cc49	4c 04 cc	jmp $cc04			jmp fmt_r
=23					CL	.var *-(WordListLink+wh_Xt)
=$cc4c					en = *	; remember here
>cc33	17					.byte CL	;wh_CodeLength
>cc4c	3f				L1:	.text "?"	;  name of word as a string, ending at wh_NameLastChar
>cc4d	e1					.byte (("?"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc4e	b0 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc50	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc51	08					.byte NN	;wh_Flags	dictionary flags
=52173					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc52					Question:
.cc52	20 71 ce	jsr $ce71			jsr Fetch
.cc55	4c 83 cb	jmp $cb83			jmp Dot
=6					CL	.var *-(WordListLink+wh_Xt)
=$cc58					en = *	; remember here
>cc50	06					.byte CL	;wh_CodeLength
>cc58	32 44 75 70			L1:	.text "2Dup"	;  name of word as a string, ending at wh_NameLastChar
>cc5c	04					.byte (("2Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc5d	cd cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc5f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc60	10					.byte UF	;wh_Flags	dictionary flags
=52188					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc61					Two_Dup:
.cc61	20 e9 b3	jsr $b3e9			jsr underflow_2
.cc64	ca		dex				dex
.cc65	ca		dex				dex
.cc66	ca		dex				dex
.cc67	ca		dex				dex
.cc68	b5 28		lda $28,x			lda DStack+4,x	; TOS
.cc6a	95 24		sta $24,x			sta DStack+0,x
.cc6c	b5 29		lda $29,x			lda DStack+5,x
.cc6e	95 25		sta $25,x			sta DStack+1,x
.cc70	b5 2a		lda $2a,x			lda DStack+6,x	; NOS
.cc72	95 26		sta $26,x			sta DStack+2,x
.cc74	b5 2b		lda $2b,x			lda DStack+7,x
.cc76	95 27		sta $27,x			sta DStack+3,x
=23					CL	.var *-(WordListLink+wh_Xt)
=$cc78					en = *	; remember here
>cc5f	17					.byte CL	;wh_CodeLength
.cc78	60		rts				rts
>cc79	54 75 63 6b			L1:	.text "Tuck"	;  name of word as a string, ending at wh_NameLastChar
>cc7d	64					.byte (("Tuck"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc7e	dc cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc80	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc81	10					.byte UF	;wh_Flags	dictionary flags
=52221					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc82					Tuck:
.cc82	20 e9 b3	jsr $b3e9			jsr underflow_2
.cc85	ca		dex				dex
.cc86	ca		dex				dex
.cc87	b4 28		ldy $28,x			ldy DStack+4,x	; LSB
.cc89	b5 26		lda $26,x			lda DStack+2,x
.cc8b	95 28		sta $28,x			sta DStack+4,x
.cc8d	94 26		sty $26,x			sty DStack+2,x
.cc8f	95 24		sta $24,x			sta DStack+0,x
.cc91	b4 29		ldy $29,x			ldy DStack+5,x	; MSB
.cc93	b5 27		lda $27,x			lda DStack+3,x
.cc95	95 29		sta $29,x			sta DStack+5,x
.cc97	94 27		sty $27,x			sty DStack+3,x
.cc99	95 25		sta $25,x			sta DStack+1,x
=25					CL	.var *-(WordListLink+wh_Xt)
=$cc9b					en = *	; remember here
>cc80	19					.byte CL	;wh_CodeLength
.cc9b	60		rts				rts
>cc9c	43 2c				L1:	.text "C,"	;  name of word as a string, ending at wh_NameLastChar
>cc9e	82					.byte (("C,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc9f	fd cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cca1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cca2	08					.byte NN	;wh_Flags	dictionary flags
=52254					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cca3	20 8e b3	jsr $b38e	C_Comma:	jsr PopA	; pop c, with underflow check
.cca6					C_Comma_A:
.cca6	ca		dex				dex
.cca7	94 24		sty $24,x			sty DStack+0,x	; save Y
.cca9	a0 00		ldy #$00			ldy #0		; store A
.ccab	91 00		sta ($00),y			sta (cp),y
.ccad	e6 00		inc $00				inc cp+0	; increment cp
.ccaf	d0 02		bne $ccb3			bne +
.ccb1	e6 01		inc $01				inc cp+1
.ccb3					+
.ccb3	b4 24		ldy $24,x			ldy DStack+0,x	; restore Y
.ccb5	e8		inx				inx
=19					CL	.var *-(WordListLink+wh_Xt)
=$ccb6					en = *	; remember here
>cca1	13					.byte CL	;wh_CodeLength
.ccb6	60		rts				rts
>ccb7	2c				L1:	.text ","	;  name of word as a string, ending at wh_NameLastChar
>ccb8	81					.byte ((","[-1]&7)<<5)+(*-L1)	;wh_HNL
>ccb9	1e cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccbb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccbc	08					.byte NN	;wh_Flags	dictionary flags
=52280					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccbd	20 aa b3	jsr $b3aa	Comma:		jsr PopYA	; pop n, with underflow check
.ccc0					Comma_YA:
.ccc0	20 a6 cc	jsr $cca6			jsr C_Comma_A	; compile LSB
.ccc3	98		tya				tya		; compile MSB
.ccc4	4c a6 cc	jmp $cca6			jmp C_Comma_A
=10					CL	.var *-(WordListLink+wh_Xt)
=$ccc7					en = *	; remember here
>ccbb	0a					.byte CL	;wh_CodeLength
>ccc7	32 2c				L1:	.text "2,"	;  name of word as a string, ending at wh_NameLastChar
>ccc9	82					.byte (("2,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ccca	38 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cccc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cccd	08					.byte NN	;wh_Flags	dictionary flags
=52297					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccce	20 bd cc	jsr $ccbd	Two_Comma:	jsr Comma
.ccd1	4c bd cc	jmp $ccbd			jmp Comma
=6					CL	.var *-(WordListLink+wh_Xt)
=$ccd4					en = *	; remember here
>cccc	06					.byte CL	;wh_CodeLength
.ccd4	a9 e8		lda #$e8	Drop_Comma:	lda #$e8	;inx
.ccd6	a8		tay				tay
.ccd7	d0 e7		bne $ccc0			bne Comma_YA
>ccd9	4a 73 72 2c			L1:	.text "Jsr,"	;  name of word as a string, ending at wh_NameLastChar
>ccdd	84					.byte (("Jsr,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ccde	49 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cce0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cce1	08					.byte NN	;wh_Flags	dictionary flags
=52317					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cce2	20 aa b3	jsr $b3aa	Jsr_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cce5	20 64 b7	jsr $b764	Jsr_Comma_YA:	jsr PushYA	; push addr
.cce8	a9 20		lda #$20			lda #$20	; JSR abs opcode
.ccea	20 a6 cc	jsr $cca6	Jsr_Comma_3:	jsr C_Comma_A
.cced	4c bd cc	jmp $ccbd			jmp Comma	; compile addr
=14					CL	.var *-(WordListLink+wh_Xt)
=$ccf0					en = *	; remember here
>cce0	0e					.byte CL	;wh_CodeLength
>ccf0	4a 6d 70 2c			L1:	.text "Jmp,"	;  name of word as a string, ending at wh_NameLastChar
>ccf4	84					.byte (("Jmp,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ccf5	5d cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccf7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccf8	08					.byte NN	;wh_Flags	dictionary flags
=52340					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccf9	20 aa b3	jsr $b3aa	Jmp_Comma:	jsr PopYA	; pop addr (optimize can skip)
.ccfc	20 64 b7	jsr $b764	Jmp_Comma_YA:	jsr PushYA	; push addr
.ccff	a9 4c		lda #$4c			lda #$4c	; JMP abs opcode
.cd01	d0 e7		bne $ccea			bne Jsr_Comma_3
=10					CL	.var *-(WordListLink+wh_Xt)
=$cd03					en = *	; remember here
>ccf7	0a					.byte CL	;wh_CodeLength
>cd03	43 40				L1:	.text "C@"	;  name of word as a string, ending at wh_NameLastChar
>cd05	02					.byte (("C@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd06	74 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd08	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd09	10					.byte UF	;wh_Flags	dictionary flags
=52357					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd0a	20 d4 b3	jsr $b3d4	C_Fetch:	jsr underflow_1
.cd0d	a1 24		lda ($24,x)			lda (DStack+0,x)
.cd0f	95 24		sta $24,x			sta DStack+0,x
.cd11	a9 00		lda #$00			lda #0
.cd13	95 25		sta $25,x			sta DStack+1,x	; zero MSB
=11					CL	.var *-(WordListLink+wh_Xt)
=$cd15					en = *	; remember here
>cd08	0b					.byte CL	;wh_CodeLength
.cd15	60		rts				rts
>cd16	43 21				L1:	.text "C!"	;  name of word as a string, ending at wh_NameLastChar
>cd18	22					.byte (("C!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd19	85 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd1b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd1c	10					.byte UF	;wh_Flags	dictionary flags
=52376					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd1d	20 e9 b3	jsr $b3e9	C_Store:	jsr underflow_2
.cd20	b5 26		lda $26,x			lda DStack+2,x
.cd22	81 24		sta ($24,x)			sta (DStack+0,x)
.cd24	e8		inx				inx
.cd25	e8		inx				inx
.cd26	e8		inx				inx
.cd27	e8		inx				inx
=11					CL	.var *-(WordListLink+wh_Xt)
=$cd28					en = *	; remember here
>cd1b	0b					.byte CL	;wh_CodeLength
.cd28	60		rts				rts
>cd29	31 2b 21			L1:	.text "1+!"	;  name of word as a string, ending at wh_NameLastChar
>cd2c	23					.byte (("1+!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd2d	98 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd2f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd30	00					.byte 0	;wh_Flags	dictionary flags
=52396					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd31					OnePlusStore:
.cd31	a9 01		lda #$01			lda #1
.cd33	18		clc				clc
.cd34	61 24		adc ($24,x)			adc (DStack+0,x)	; increment lo byte
.cd36	81 24		sta ($24,x)			sta (DStack+0,x)
.cd38	90 0c		bcc $cd46			bcc _7			; if carry
.cd3a	f6 24		inc $24,x			inc DStack+0,x		;   point at hi byte
.cd3c	d0 02		bne $cd40			bne +
.cd3e	f6 25		inc $25,x			inc DStack+1,x
.cd40					+
.cd40	a1 24		lda ($24,x)			lda (DStack+0,x)	;   increment hi byte
.cd42	69 00		adc #$00			adc #0
.cd44	81 24		sta ($24,x)			sta (Dstack+0,x)
.cd46					_7:
.cd46	e8		inx				inx			; Drop addr
.cd47	e8		inx				inx
=23					CL	.var *-(WordListLink+wh_Xt)
=$cd48					en = *	; remember here
>cd2f	17					.byte CL	;wh_CodeLength
.cd48	60		rts				rts
>cd49	2b 21				L1:	.text "+!"	;  name of word as a string, ending at wh_NameLastChar
>cd4b	22					.byte (("+!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd4c	ac cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd4e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd4f	18					.byte UF+NN	;wh_Flags	dictionary flags
=52427					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd50					Plus_store:
.cd50	20 e9 b3	jsr $b3e9			jsr underflow_2
.cd53	18		clc				clc
.cd54	b5 26		lda $26,x			lda DStack+2,x
.cd56	61 24		adc ($24,x)			adc (DStack+0,x)
.cd58	81 24		sta ($24,x)			sta (DStack+0,x)
.cd5a	f6 24		inc $24,x			inc DStack+0,x
.cd5c	d0 02		bne $cd60			bne +
.cd5e	f6 25		inc $25,x			inc DStack+1,x
.cd60					+
.cd60	b5 27		lda $27,x			lda DStack+3,x
.cd62	61 24		adc ($24,x)			adc (DStack+0,x)
.cd64	81 24		sta ($24,x)			sta (DStack+0,x)
.cd66	4c c1 c4	jmp $c4c1			jmp Two_Drop
=25					CL	.var *-(WordListLink+wh_Xt)
=$cd69					en = *	; remember here
>cd4e	19					.byte CL	;wh_CodeLength
>cd69	45 6d 69 74			L1:	.text "Emit"	;  name of word as a string, ending at wh_NameLastChar
>cd6d	84					.byte (("Emit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd6e	cb cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd70	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd71	08					.byte NN	;wh_Flags	dictionary flags
=52461					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd72	20 8e b3	jsr $b38e	Emit:		jsr PopA		; pop char, with underflow check
.cd75					Emit_A:
.cd75	6c 06 03	jmp ($0306)			jmp (output)		; JSR/RTS
=6					CL	.var *-(WordListLink+wh_Xt)
=$cd78					en = *	; remember here
>cd70	06					.byte CL	;wh_CodeLength
>cd78	53 70 61 63 65			L1:	.text "Space"	;  name of word as a string, ending at wh_NameLastChar
>cd7d	a5					.byte (("Space"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd7e	ed cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd80	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd81	08					.byte NN	;wh_Flags	dictionary flags
=52477					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd82	a9 20		lda #$20	Space:		lda #AscSP
.cd84	d0 ef		bne $cd75			bne Emit_A
=4					CL	.var *-(WordListLink+wh_Xt)
=$cd86					en = *	; remember here
>cd80	04					.byte CL	;wh_CodeLength
>cd86	54 79 70 65			L1:	.text "Type"	;  name of word as a string, ending at wh_NameLastChar
>cd8a	a4					.byte (("Type"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd8b	fd cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd8d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd8e	18					.byte UF+NN	;wh_Flags	dictionary flags
=52490					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd8f					Type:
.cd8f	20 e9 b3	jsr $b3e9			jsr underflow_2
.cd92	4c 9f cd	jmp $cd9f			jmp _test
.cd95					_loop:
.cd95	d6 24		dec $24,x			dec DStack+0,x		; finish length decrement
.cd97	a1 26		lda ($26,x)			lda (DStack+2,x)	; Send the current character
.cd99	20 75 cd	jsr $cd75			jsr Emit_A
.cd9c	20 07 ca	jsr $ca07			jsr NOS_One_Plus	; increment address
.cd9f	b5 24		lda $24,x	_test:		lda DStack+0,x		; decrement length & test for <0
.cda1	d0 f2		bne $cd95			bne _loop
.cda3	d6 25		dec $25,x			dec DStack+1,x
.cda5	10 ee		bpl $cd95			bpl _loop
.cda7	4c c1 c4	jmp $c4c1			jmp Two_drop
=27					CL	.var *-(WordListLink+wh_Xt)
=$cdaa					en = *	; remember here
>cd8d	1b					.byte CL	;wh_CodeLength
.cdaa					Print_ASCIIZ_YA:
.cdaa	20 b0 cd	jsr $cdb0			jsr Print_ASCIIZ_YA_no_lf
.cdad	4c e2 aa	jmp $aae2	                jmp CR
.cdb0					Print_ASCIIZ_YA_no_lf:
.cdb0	85 18		sta $18				sta tmp3+0		; save string address
.cdb2	84 19		sty $19				sty tmp3+1
.cdb4	a0 00		ldy #$00			ldy #0
.cdb6					Print_ASCIIZ_tmp3_no_lf:
.cdb6	b1 18		lda ($18),y			lda (tmp3),y
.cdb8	f0 06		beq $cdc0			beq _done		; end of string?
.cdba	20 75 cd	jsr $cd75			jsr emit_a
.cdbd	c8		iny				iny
.cdbe	d0 f6		bne $cdb6			bne Print_ASCIIZ_tmp3_no_lf
.cdc0					_done:
.cdc0	60		rts				rts
>cdc1	45 78 65 63 75 74 65		L1:	.text "Execute"	;  name of word as a string, ending at wh_NameLastChar
>cdc8	a7					.byte (("Execute"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cdc9	0a cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cdcb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdcc	08					.byte NN	;wh_Flags	dictionary flags
=52552					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdcd					Execute:
.cdcd	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.cdcf	b0 2f		bcs $ce00		bcs Throw_Stack_03
.cdd1	b5 25		lda $25,x			lda DStack+1,x	; addr for RTI
.cdd3	48		pha				pha
.cdd4	b5 24		lda $24,x			lda DStack+0,x
.cdd6	48		pha				pha
.cdd7	e8		inx				inx		; drop addr
.cdd8	e8		inx				inx
.cdd9	08		php				php		; flags for RTI
.cdda	40		rti				rti
=14					CL	.var *-(WordListLink+wh_Xt)
=$cddb					en = *	; remember here
>cdcb	0e					.byte CL	;wh_CodeLength
>cddb	32 52 6f 74			L1:	.text "2Rot"	;  name of word as a string, ending at wh_NameLastChar
>cddf	84					.byte (("2Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cde0	48 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cde2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cde3	08					.byte NN	;wh_Flags	dictionary flags
=52575					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cde4					TwoRot:
.cde4	e0 1d		cpx #$1d		cpx #-2*6+DStack0+1
.cde6	b0 18		bcs $ce00		bcs Throw_Stack_03
.cde8	86 14		stx $14				stx tmp1+0
.cdea	e8		inx				inx		; do 4 times
.cdeb	e8		inx				inx
.cdec	e8		inx				inx
.cded	e8		inx				inx
.cdee	ca		dex		-		dex
.cdef	b4 2c		ldy $2c,x			ldy DStack+8,x	; do a byte
.cdf1	b5 28		lda $28,x			lda DStack+4,x
.cdf3	95 2c		sta $2c,x			sta DStack+8,x
.cdf5	b5 24		lda $24,x			lda DStack+0,x
.cdf7	95 28		sta $28,x			sta DStack+4,x
.cdf9	94 24		sty $24,x			sty DStack+0,x
.cdfb	e4 14		cpx $14				cpx tmp1+0
.cdfd	d0 ef		bne $cdee			bne -
=27					CL	.var *-(WordListLink+wh_Xt)
=$cdff					en = *	; remember here
>cde2	1b					.byte CL	;wh_CodeLength
.cdff	60		rts				rts
.ce00	4c f8 b3	jmp $b3f8	Throw_Stack_03: jmp Throw_Stack
>ce03	52 6f 74			L1:	.text "Rot"	;  name of word as a string, ending at wh_NameLastChar
>ce06	83					.byte (("Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce07	5f cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce09	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce0a	08					.byte NN	;wh_Flags	dictionary flags
=52614					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce0b					Rot:
.ce0b	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ce0d	b0 f1		bcs $ce00		bcs Throw_Stack_03
.ce0f	b4 29		ldy $29,x			ldy DStack+5,x	; do MSB
.ce11	b5 27		lda $27,x			lda DStack+3,x
.ce13	95 29		sta $29,x			sta DStack+5,x
.ce15	b5 25		lda $25,x			lda DStack+1,x
.ce17	95 27		sta $27,x			sta DStack+3,x
.ce19	94 25		sty $25,x			sty DStack+1,x
.ce1b	b4 28		ldy $28,x			ldy DStack+4,x	; do LSB
.ce1d	b5 26		lda $26,x			lda DStack+2,x
.ce1f	95 28		sta $28,x			sta DStack+4,x
.ce21	b5 24		lda $24,x			lda DStack+0,x
.ce23	95 26		sta $26,x			sta DStack+2,x
.ce25	94 24		sty $24,x			sty DStack+0,x
=28					CL	.var *-(WordListLink+wh_Xt)
=$ce27					en = *	; remember here
>ce09	1c					.byte CL	;wh_CodeLength
.ce27	60		rts				rts
>ce28	2d 52 6f 74			L1:	.text "-Rot"	;  name of word as a string, ending at wh_NameLastChar
>ce2c	84					.byte (("-Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce2d	86 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce2f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce30	08					.byte NN	;wh_Flags	dictionary flags
=52652					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce31					Not_Rot:
.ce31	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ce33	b0 cb		bcs $ce00		bcs Throw_Stack_03
.ce35	b4 25		ldy $25,x			ldy DStack+1,x	; do MSB
.ce37	b5 27		lda $27,x			lda DStack+3,x
.ce39	95 25		sta $25,x			sta DStack+1,x
.ce3b	b5 29		lda $29,x			lda DStack+5,x
.ce3d	95 27		sta $27,x			sta DStack+3,x
.ce3f	94 29		sty $29,x			sty DStack+5,x
.ce41	b4 24		ldy $24,x			ldy DStack+0,x	; do LSB
.ce43	b5 26		lda $26,x			lda DStack+2,x
.ce45	95 24		sta $24,x			sta DStack+0,x
.ce47	b5 28		lda $28,x			lda DStack+4,x
.ce49	95 26		sta $26,x			sta DStack+2,x
.ce4b	94 28		sty $28,x			sty DStack+4,x
=28					CL	.var *-(WordListLink+wh_Xt)
=$ce4d					en = *	; remember here
>ce2f	1c					.byte CL	;wh_CodeLength
.ce4d	60		rts				rts
>ce4e	21				L1:	.text "!"	;  name of word as a string, ending at wh_NameLastChar
>ce4f	21					.byte (("!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce50	ac cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce52	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce53	08					.byte NN	;wh_Flags	dictionary flags
=52687					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce54					Store:
.ce54	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ce56	b0 a8		bcs $ce00		bcs Throw_Stack_03
.ce58	b5 26		lda $26,x			lda DStack+2,x	; LSB
.ce5a	81 24		sta ($24,x)			sta (DStack+0,x)
.ce5c	f6 24		inc $24,x			inc DStack+0,x
.ce5e	d0 02		bne $ce62			bne +
.ce60	f6 25		inc $25,x			inc DStack+1,x
.ce62					+
.ce62	b5 27		lda $27,x			lda DStack+3,x	; MSB
.ce64	81 24		sta ($24,x)			sta (DStack+0,x)
.ce66	e8		inx				inx		; 2Drop
.ce67	e8		inx				inx
.ce68	e8		inx				inx
.ce69	e8		inx				inx
=22					CL	.var *-(WordListLink+wh_Xt)
=$ce6a					en = *	; remember here
>ce52	16					.byte CL	;wh_CodeLength
.ce6a	60		rts				rts
>ce6b	40				L1:	.text "@"	;  name of word as a string, ending at wh_NameLastChar
>ce6c	01					.byte (("@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce6d	cf cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce6f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce70	08					.byte NN	;wh_Flags	dictionary flags
=52716					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce71					Fetch:
.ce71	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.ce73	b0 8b		bcs $ce00		bcs Throw_Stack_03
.ce75	a1 24		lda ($24,x)			lda (DStack+0,x)		; LSB
.ce77	a8		tay				tay
.ce78	f6 24		inc $24,x			inc DStack+0,x
.ce7a	d0 02		bne $ce7e			bne +
.ce7c	f6 25		inc $25,x			inc DStack+1,x
.ce7e					+
.ce7e	a1 24		lda ($24,x)			lda (DStack+0,x)		; MSB
.ce80	95 25		sta $25,x			sta DStack+1,x
.ce82	94 24		sty $24,x			sty DStack+0,x
=19					CL	.var *-(WordListLink+wh_Xt)
=$ce84					en = *	; remember here
>ce6f	13					.byte CL	;wh_CodeLength
.ce84	60		rts				rts
>ce85	3e 52				L1:	.text ">R"	;  name of word as a string, ending at wh_NameLastChar
>ce87	42					.byte ((">R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce88	ec cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce8a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce8b	41					.byte CO+R6	;wh_Flags	dictionary flags
=52743					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce8c					To_R:
.ce8c	68		pla				pla		; move the return address out of the way
.ce8d	85 1c		sta $1c				sta tmp5+0
.ce8f	68		pla				pla
.ce90	85 1d		sta $1d				sta tmp5+1
.ce92	20 d4 b3	jsr $b3d4			jsr underflow_1
.ce95	b5 25		lda $25,x			lda DStack+1,x	; MSB
.ce97	48		pha				pha
.ce98	b5 24		lda $24,x			lda DStack+0,x	; LSB
.ce9a	48		pha				pha
.ce9b	e8		inx				inx
.ce9c	e8		inx				inx
.ce9d	a5 1d		lda $1d				lda tmp5+1	; move the return address back in
.ce9f	48		pha				pha
.cea0	a5 1c		lda $1c				lda tmp5+0
.cea2	48		pha				pha
=23					CL	.var *-(WordListLink+wh_Xt)
=$cea3					en = *	; remember here
>ce8a	17					.byte CL	;wh_CodeLength
.cea3	60		rts				rts
>cea4	52 3e				L1:	.text "R>"	;  name of word as a string, ending at wh_NameLastChar
>cea6	c2					.byte (("R>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cea7	07 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cea9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ceaa	41					.byte CO+R6	;wh_Flags	dictionary flags
=52774					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ceab					R_From:
.ceab	68		pla				pla		; Move the RTS addr out of the way
.ceac	85 1c		sta $1c				sta tmp5+0
.ceae	68		pla				pla
.ceaf	85 1d		sta $1d				sta tmp5+1
.ceb1	ca		dex				dex
.ceb2	ca		dex				dex
.ceb3	68		pla				pla		; LSB
.ceb4	95 24		sta $24,x			sta DStack+0,x
.ceb6	68		pla				pla		; MSB
.ceb7	95 25		sta $25,x			sta DStack+1,x
.ceb9	a5 1d		lda $1d				lda tmp5+1	; Restore the RTS addr
.cebb	48		pha				pha
.cebc	a5 1c		lda $1c				lda tmp5+0
.cebe	48		pha				pha
=20					CL	.var *-(WordListLink+wh_Xt)
=$cebf					en = *	; remember here
>cea9	14					.byte CL	;wh_CodeLength
.cebf	60		rts				rts
>cec0	52 40				L1:	.text "R@"	;  name of word as a string, ending at wh_NameLastChar
>cec2	02					.byte (("R@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cec3	26 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cec5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cec6	09					.byte NN+CO	;wh_Flags	dictionary flags
=52802					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cec7					R_Fetch:
.cec7	86 14		stx $14				stx tmp1	; save data stack index
.cec9	ba		tsx				tsx		; X= return stack index
.ceca	bd 03 01	lda $0103,x			lda RStack+3,x
.cecd	bc 04 01	ldy $0104,x			ldy RStack+4,x
.ced0	a6 14		ldx $14				ldx tmp1	; restore data stack index
.ced2	4c 64 b7	jmp $b764			jmp PushYA
=14					CL	.var *-(WordListLink+wh_Xt)
=$ced5					en = *	; remember here
>cec5	0e					.byte CL	;wh_CodeLength
>ced5	4f 76 65 72			L1:	.text "Over"	;  name of word as a string, ending at wh_NameLastChar
>ced9	44					.byte (("Over"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ceda	42 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cedc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cedd	10					.byte UF	;wh_Flags	dictionary flags
=52825					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cede					Over:
.cede	20 e9 b3	jsr $b3e9			jsr underflow_2
.cee1	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cee3	b4 27		ldy $27,x			ldy DStack+3,x	; MSB
.cee5	ca		dex				dex		; PushYA
.cee6	ca		dex				dex
.cee7	95 24		sta $24,x			sta DStack+0,x
.cee9	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$ceeb					en = *	; remember here
>cedc	0d					.byte CL	;wh_CodeLength
.ceeb	60		rts				rts
>ceec	3f 44 75 70			L1:	.text "?Dup"	;  name of word as a string, ending at wh_NameLastChar
>cef0	04					.byte (("?Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cef1	59 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cef3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cef4	18					.byte UF+NN	;wh_Flags	dictionary flags
=52848					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cef5					Question_Dup:
.cef5	20 d4 b3	jsr $b3d4			jsr underflow_1
.cef8	b5 24		lda $24,x			lda DStack+0,x	; Check if TOS is zero
.cefa	15 25		ora $25,x			ora DStack+1,x
.cefc	d0 0c		bne $cf0a			bne Dup_NoUf
=9					CL	.var *-(WordListLink+wh_Xt)
=$cefe					en = *	; remember here
>cef3	09					.byte CL	;wh_CodeLength
.cefe	60		rts				rts
>ceff	44 75 70			L1:	.text "Dup"	;  name of word as a string, ending at wh_NameLastChar
>cf02	03					.byte (("Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf03	70 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf05	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf06	10					.byte UF	;wh_Flags	dictionary flags
=52866					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf07					Dup:
.cf07	20 d4 b3	jsr $b3d4			jsr underflow_1
.cf0a	b5 24		lda $24,x	Dup_NoUf:	lda DStack+0,x	; LSB
.cf0c	b4 25		ldy $25,x			ldy DStack+1,x	; MSB
.cf0e	ca		dex				dex
.cf0f	ca		dex				dex
.cf10	95 24		sta $24,x			sta DStack+0,x
.cf12	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$cf14					en = *	; remember here
>cf05	0d					.byte CL	;wh_CodeLength
.cf14	60		rts				rts
.cf15					PushAY:
.cf15	ca		dex				dex
.cf16	ca		dex				dex
.cf17	94 24		sty $24,x			sty DStack+0,x
.cf19	95 25		sta $25,x			sta DStack+1,x
.cf1b	60		rts				rts
>cf1c	53 77 61 70			L1:	.text "Swap"	;  name of word as a string, ending at wh_NameLastChar
>cf20	04					.byte (("Swap"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf21	82 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf23	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf24	10					.byte UF	;wh_Flags	dictionary flags
=52896					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf25					Swap:
.cf25	20 e9 b3	jsr $b3e9			jsr underflow_2
.cf28	b5 24		lda $24,x			lda DStack+0,x	; do LSB
.cf2a	b4 26		ldy $26,x			ldy DStack+2,x
.cf2c	95 26		sta $26,x			sta DStack+2,x
.cf2e	94 24		sty $24,x			sty DStack+0,x
.cf30	b5 25		lda $25,x			lda DStack+1,x	; do MSB
.cf32	b4 27		ldy $27,x			ldy DStack+3,x
.cf34	95 27		sta $27,x			sta DStack+3,x
.cf36	94 25		sty $25,x			sty DStack+1,x
=19					CL	.var *-(WordListLink+wh_Xt)
=$cf38					en = *	; remember here
>cf23	13					.byte CL	;wh_CodeLength
.cf38	60		rts				rts
>cf39	44 72 6f 70			L1:	.text "Drop"	;  name of word as a string, ending at wh_NameLastChar
>cf3d	04					.byte (("Drop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf3e	a0 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf40	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf41	10					.byte UF	;wh_Flags	dictionary flags
=52925					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf42					Drop:
.cf42	20 d4 b3	jsr $b3d4			jsr underflow_1
.cf45	e8		inx				inx
.cf46	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$cf47					en = *	; remember here
>cf40	05					.byte CL	;wh_CodeLength
.cf47	60		rts				rts
=52925					forth_dictionary_start = WordListLink ; END of FORTH-WORDLIST
=0					WordListLink .var 0
>cf48	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
>cf4d	65					.byte (("Words"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf4e	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf50	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf51	08					.byte NN	;wh_Flags	dictionary flags
=52941					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf52	4c 2f aa	jmp $aa2f			jmp Words
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf55					en = *	; remember here
>cf50	03					.byte CL	;wh_CodeLength
>cf55	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>cf5d	72 64 6c 69 73 74
>cf63	8e					.byte (("Forth-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf64	cd ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf66	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf67	08					.byte NN	;wh_Flags	dictionary flags
=52963					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf68	4c 2b 9f	jmp $9f2b			jmp Forth_WordList
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf6b					en = *	; remember here
>cf66	03					.byte CL	;wh_CodeLength
>cf6b	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
>cf70	05					.byte (("Forth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf71	e3 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf73	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf74	08					.byte NN	;wh_Flags	dictionary flags
=52976					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf75	4c 24 a0	jmp $a024			jmp Forth
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf78					en = *	; remember here
>cf73	03					.byte CL	;wh_CodeLength
>cf78	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>cf80	72
>cf81	49					.byte (("Set-Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf82	f0 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf84	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf85	08					.byte NN	;wh_Flags	dictionary flags
=52993					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf86	4c e8 a0	jmp $a0e8			jmp Set_Order
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf89					en = *	; remember here
>cf84	03					.byte CL	;wh_CodeLength
=52993					root_dictionary_start = WordListLink ; END of ROOT-WORDLIST
.cf89					assembler:
=0					WordListLink .var 0
.cf89					asm_r:
.cf89	68		pla			pla		; pop RTS addr
.cf8a	a8		tay			tay
.cf8b	68		pla			pla
.cf8c	20 cb cf	jsr $cfcb		jsr asm_op	; compile opcode
.cf8f	b5 25		lda $25,x		lda DStack+1,x	; check range
.cf91	f0 09		beq $cf9c		beq _plus
.cf93	c9 ff		cmp #$ff		cmp #$ff
.cf95	f0 0b		beq $cfa2		beq _minus
.cf97	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cf99	4c 33 b4	jmp $b433		jmp ThrowA
.cf9c	b5 24		lda $24,x	_plus:	lda DStack+0,x
.cf9e	30 f7		bmi $cf97		bmi _err
.cfa0	10 04		bpl $cfa6		bpl _store
.cfa2	b5 24		lda $24,x	_minus:	lda DStack+0,x
.cfa4	10 f1		bpl $cf97		bpl _err
.cfa6	4c a3 cc	jmp $cca3	_store:	jmp C_Comma
.cfa9					asm_1:
.cfa9	68		pla			pla		; pop RTS addr
.cfaa	a8		tay			tay
.cfab	68		pla			pla
.cfac	20 cb cf	jsr $cfcb		jsr asm_op	; compile opcode
.cfaf	b5 25		lda $25,x		lda DStack+1,x	; compile operand
.cfb1	f0 04		beq $cfb7		beq _store	;   unsigned byte?
.cfb3	c9 ff		cmp #$ff		cmp #$ff	;   signed byte?
.cfb5	d0 03		bne $cfba		bne _err
.cfb7	4c a3 cc	jmp $cca3	_store:	jmp C_Comma
.cfba	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cfbc	4c 33 b4	jmp $b433		jmp ThrowA
.cfbf					asm_2:
.cfbf	68		pla			pla		; pop RTS addr
.cfc0	a8		tay			tay
.cfc1	68		pla			pla
.cfc2	20 cb cf	jsr $cfcb		jsr asm_op	; compile opcode
.cfc5	4c bd cc	jmp $ccbd		jmp Comma	; compile operand
.cfc8					asm_0:
.cfc8	68		pla			pla		; pop RTS addr
.cfc9	a8		tay			tay
.cfca	68		pla			pla
.cfcb	84 14		sty $14		asm_op:	sty tmp1+0	; save RTS addr
.cfcd	85 15		sta $15			sta tmp1+1
.cfcf	a0 01		ldy #$01		ldy #1		; get opcode byte
.cfd1	b1 14		lda ($14),y		lda (tmp1),y
.cfd3	4c a6 cc	jmp $cca6		jmp C_Comma_A	; compile opcode
>cfd6	61 64 63 2e 23			L1:	.text "adc.#"	;  name of word as a string, ending at wh_NameLastChar
>cfdb	65					.byte (("adc.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cfdc	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfde	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfdf	08					.byte NN	;wh_Flags	dictionary flags
=53083					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfe0	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfe3					en = *	; remember here
>cfde	03					.byte CL	;wh_CodeLength
>cfe3	69					.byte $69
>cfe4	61 64 63 2e 78			L1:	.text "adc.x"	;  name of word as a string, ending at wh_NameLastChar
>cfe9	05					.byte (("adc.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cfea	5b cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfed	08					.byte NN	;wh_Flags	dictionary flags
=53097					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfee	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cff1					en = *	; remember here
>cfec	03					.byte CL	;wh_CodeLength
>cff1	7d					.byte $7d
>cff2	61 64 63 2e 79			L1:	.text "adc.y"	;  name of word as a string, ending at wh_NameLastChar
>cff7	25					.byte (("adc.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cff8	69 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cffa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cffb	08					.byte NN	;wh_Flags	dictionary flags
=53111					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cffc	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfff					en = *	; remember here
>cffa	03					.byte CL	;wh_CodeLength
>cfff	79					.byte $79
>d000	61 64 63 2e 7a			L1:	.text "adc.z"	;  name of word as a string, ending at wh_NameLastChar
>d005	45					.byte (("adc.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d006	77 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d008	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d009	08					.byte NN	;wh_Flags	dictionary flags
=53125					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d00a	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d00d					en = *	; remember here
>d008	03					.byte CL	;wh_CodeLength
>d00d	65					.byte $65
>d00e	61 64 63 2e 7a 69 79		L1:	.text "adc.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d015	27					.byte (("adc.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d016	85 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d018	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d019	08					.byte NN	;wh_Flags	dictionary flags
=53141					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d01a	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d01d					en = *	; remember here
>d018	03					.byte CL	;wh_CodeLength
>d01d	71					.byte $71
>d01e	61 64 63 2e 7a 78		L1:	.text "adc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d024	06					.byte (("adc.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d025	95 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d027	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d028	08					.byte NN	;wh_Flags	dictionary flags
=53156					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d029	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d02c					en = *	; remember here
>d027	03					.byte CL	;wh_CodeLength
>d02c	75					.byte $75
>d02d	61 64 63 2e 7a 78 69		L1:	.text "adc.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d034	27					.byte (("adc.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d035	a4 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d037	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d038	08					.byte NN	;wh_Flags	dictionary flags
=53172					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d039	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d03c					en = *	; remember here
>d037	03					.byte CL	;wh_CodeLength
>d03c	61					.byte $61
>d03d	61 6e 64 2e			L1:	.text "and."	;  name of word as a string, ending at wh_NameLastChar
>d041	c4					.byte (("and."[-1]&7)<<5)+(*-L1)	;wh_HNL
>d042	b4 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d044	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d045	08					.byte NN	;wh_Flags	dictionary flags
=53185					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d046	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d049					en = *	; remember here
>d044	03					.byte CL	;wh_CodeLength
>d049	2d					.byte $2d
>d04a	61 6e 64 2e 23			L1:	.text "and.#"	;  name of word as a string, ending at wh_NameLastChar
>d04f	65					.byte (("and.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d050	c1 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d052	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d053	08					.byte NN	;wh_Flags	dictionary flags
=53199					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d054	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d057					en = *	; remember here
>d052	03					.byte CL	;wh_CodeLength
>d057	29					.byte $29
>d058	61 6e 64 2e 78			L1:	.text "and.x"	;  name of word as a string, ending at wh_NameLastChar
>d05d	05					.byte (("and.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d05e	cf cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d060	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d061	08					.byte NN	;wh_Flags	dictionary flags
=53213					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d062	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d065					en = *	; remember here
>d060	03					.byte CL	;wh_CodeLength
>d065	3d					.byte $3d
>d066	61 6e 64 2e 79			L1:	.text "and.y"	;  name of word as a string, ending at wh_NameLastChar
>d06b	25					.byte (("and.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d06c	dd cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d06e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d06f	08					.byte NN	;wh_Flags	dictionary flags
=53227					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d070	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d073					en = *	; remember here
>d06e	03					.byte CL	;wh_CodeLength
>d073	39					.byte $39
>d074	61 6e 64 2e 7a			L1:	.text "and.z"	;  name of word as a string, ending at wh_NameLastChar
>d079	45					.byte (("and.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d07a	eb cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d07c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d07d	08					.byte NN	;wh_Flags	dictionary flags
=53241					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d07e	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d081					en = *	; remember here
>d07c	03					.byte CL	;wh_CodeLength
>d081	25					.byte $25
>d082	61 6e 64 2e 7a 69 79		L1:	.text "and.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d089	27					.byte (("and.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d08a	f9 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d08c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d08d	08					.byte NN	;wh_Flags	dictionary flags
=53257					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d08e	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d091					en = *	; remember here
>d08c	03					.byte CL	;wh_CodeLength
>d091	31					.byte $31
>d092	61 6e 64 2e 7a 78		L1:	.text "and.zx"	;  name of word as a string, ending at wh_NameLastChar
>d098	06					.byte (("and.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d099	09 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d09b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d09c	08					.byte NN	;wh_Flags	dictionary flags
=53272					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d09d	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0a0					en = *	; remember here
>d09b	03					.byte CL	;wh_CodeLength
>d0a0	35					.byte $35
>d0a1	61 6e 64 2e 7a 78 69		L1:	.text "and.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d0a8	27					.byte (("and.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0a9	18 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0ac	08					.byte NN	;wh_Flags	dictionary flags
=53288					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0ad	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0b0					en = *	; remember here
>d0ab	03					.byte CL	;wh_CodeLength
>d0b0	21					.byte $21
>d0b1	61 73 6c			L1:	.text "asl"	;  name of word as a string, ending at wh_NameLastChar
>d0b4	83					.byte (("asl"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0b5	28 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0b8	08					.byte NN	;wh_Flags	dictionary flags
=53300					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0b9	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0bc					en = *	; remember here
>d0b7	03					.byte CL	;wh_CodeLength
>d0bc	0e					.byte $0e
>d0bd	61 73 6c 2e 61			L1:	.text "asl.a"	;  name of word as a string, ending at wh_NameLastChar
>d0c2	25					.byte (("asl.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0c3	34 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0c5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0c6	08					.byte NN	;wh_Flags	dictionary flags
=53314					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0c7	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0ca					en = *	; remember here
>d0c5	03					.byte CL	;wh_CodeLength
>d0ca	0a					.byte $0a
>d0cb	61 73 6c 2e 78			L1:	.text "asl.x"	;  name of word as a string, ending at wh_NameLastChar
>d0d0	05					.byte (("asl.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0d1	42 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0d3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0d4	08					.byte NN	;wh_Flags	dictionary flags
=53328					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0d5	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0d8					en = *	; remember here
>d0d3	03					.byte CL	;wh_CodeLength
>d0d8	1e					.byte $1e
>d0d9	61 73 6c 2e 7a			L1:	.text "asl.z"	;  name of word as a string, ending at wh_NameLastChar
>d0de	45					.byte (("asl.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0df	50 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0e2	08					.byte NN	;wh_Flags	dictionary flags
=53342					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0e3	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0e6					en = *	; remember here
>d0e1	03					.byte CL	;wh_CodeLength
>d0e6	06					.byte $06
>d0e7	61 73 6c 2e 7a 78		L1:	.text "asl.zx"	;  name of word as a string, ending at wh_NameLastChar
>d0ed	06					.byte (("asl.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0ee	5e d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0f1	08					.byte NN	;wh_Flags	dictionary flags
=53357					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0f2	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0f5					en = *	; remember here
>d0f0	03					.byte CL	;wh_CodeLength
>d0f5	16					.byte $16
>d0f6	62 63 63			L1:	.text "bcc"	;  name of word as a string, ending at wh_NameLastChar
>d0f9	63					.byte (("bcc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0fa	6d d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0fd	08					.byte NN	;wh_Flags	dictionary flags
=53369					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0fe	20 89 cf	jsr $cf89		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d101					en = *	; remember here
>d0fc	03					.byte CL	;wh_CodeLength
>d101	90					.byte $90
>d102	62 63 73			L1:	.text "bcs"	;  name of word as a string, ending at wh_NameLastChar
>d105	63					.byte (("bcs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d106	79 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d108	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d109	08					.byte NN	;wh_Flags	dictionary flags
=53381					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d10a	20 89 cf	jsr $cf89		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d10d					en = *	; remember here
>d108	03					.byte CL	;wh_CodeLength
>d10d	b0					.byte $b0
>d10e	62 65 71			L1:	.text "beq"	;  name of word as a string, ending at wh_NameLastChar
>d111	23					.byte (("beq"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d112	85 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d114	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d115	08					.byte NN	;wh_Flags	dictionary flags
=53393					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d116	20 89 cf	jsr $cf89		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d119					en = *	; remember here
>d114	03					.byte CL	;wh_CodeLength
>d119	f0					.byte $f0
>d11a	62 69 74			L1:	.text "bit"	;  name of word as a string, ending at wh_NameLastChar
>d11d	83					.byte (("bit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d11e	91 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d120	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d121	08					.byte NN	;wh_Flags	dictionary flags
=53405					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d122	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d125					en = *	; remember here
>d120	03					.byte CL	;wh_CodeLength
>d125	2c					.byte $2c
>d126	62 69 74 2e 7a			L1:	.text "bit.z"	;  name of word as a string, ending at wh_NameLastChar
>d12b	45					.byte (("bit.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d12c	9d d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d12e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d12f	08					.byte NN	;wh_Flags	dictionary flags
=53419					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d130	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d133					en = *	; remember here
>d12e	03					.byte CL	;wh_CodeLength
>d133	24					.byte $24
>d134	62 6d 69			L1:	.text "bmi"	;  name of word as a string, ending at wh_NameLastChar
>d137	23					.byte (("bmi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d138	ab d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d13a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d13b	08					.byte NN	;wh_Flags	dictionary flags
=53431					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d13c	20 89 cf	jsr $cf89		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d13f					en = *	; remember here
>d13a	03					.byte CL	;wh_CodeLength
>d13f	30					.byte $30
>d140	62 6e 65			L1:	.text "bne"	;  name of word as a string, ending at wh_NameLastChar
>d143	a3					.byte (("bne"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d144	b7 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d146	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d147	08					.byte NN	;wh_Flags	dictionary flags
=53443					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d148	20 89 cf	jsr $cf89		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d14b					en = *	; remember here
>d146	03					.byte CL	;wh_CodeLength
>d14b	d0					.byte $d0
>d14c	62 70 6c			L1:	.text "bpl"	;  name of word as a string, ending at wh_NameLastChar
>d14f	83					.byte (("bpl"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d150	c3 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d152	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d153	08					.byte NN	;wh_Flags	dictionary flags
=53455					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d154	20 89 cf	jsr $cf89		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d157					en = *	; remember here
>d152	03					.byte CL	;wh_CodeLength
>d157	10					.byte $10
>d158	62 72 6b			L1:	.text "brk"	;  name of word as a string, ending at wh_NameLastChar
>d15b	63					.byte (("brk"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d15c	cf d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d15e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d15f	08					.byte NN	;wh_Flags	dictionary flags
=53467					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d160	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d163					en = *	; remember here
>d15e	03					.byte CL	;wh_CodeLength
>d163	00					.byte $00
>d164	62 76 63			L1:	.text "bvc"	;  name of word as a string, ending at wh_NameLastChar
>d167	63					.byte (("bvc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d168	db d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d16a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d16b	08					.byte NN	;wh_Flags	dictionary flags
=53479					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d16c	20 89 cf	jsr $cf89		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d16f					en = *	; remember here
>d16a	03					.byte CL	;wh_CodeLength
>d16f	50					.byte $50
>d170	62 76 73			L1:	.text "bvs"	;  name of word as a string, ending at wh_NameLastChar
>d173	63					.byte (("bvs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d174	e7 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d176	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d177	08					.byte NN	;wh_Flags	dictionary flags
=53491					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d178	20 89 cf	jsr $cf89		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d17b					en = *	; remember here
>d176	03					.byte CL	;wh_CodeLength
>d17b	70					.byte $70
>d17c	63 6c 63			L1:	.text "clc"	;  name of word as a string, ending at wh_NameLastChar
>d17f	63					.byte (("clc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d180	f3 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d182	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d183	08					.byte NN	;wh_Flags	dictionary flags
=53503					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d184	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d187					en = *	; remember here
>d182	03					.byte CL	;wh_CodeLength
>d187	18					.byte $18
>d188	63 6c 64			L1:	.text "cld"	;  name of word as a string, ending at wh_NameLastChar
>d18b	83					.byte (("cld"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d18c	ff d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d18e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d18f	08					.byte NN	;wh_Flags	dictionary flags
=53515					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d190	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d193					en = *	; remember here
>d18e	03					.byte CL	;wh_CodeLength
>d193	d8					.byte $d8
>d194	63 6c 69			L1:	.text "cli"	;  name of word as a string, ending at wh_NameLastChar
>d197	23					.byte (("cli"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d198	0b d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d19a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d19b	08					.byte NN	;wh_Flags	dictionary flags
=53527					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d19c	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d19f					en = *	; remember here
>d19a	03					.byte CL	;wh_CodeLength
>d19f	58					.byte $58
>d1a0	63 6c 76			L1:	.text "clv"	;  name of word as a string, ending at wh_NameLastChar
>d1a3	c3					.byte (("clv"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1a4	17 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1a6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1a7	08					.byte NN	;wh_Flags	dictionary flags
=53539					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1a8	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1ab					en = *	; remember here
>d1a6	03					.byte CL	;wh_CodeLength
>d1ab	b8					.byte $b8
>d1ac	63 6d 70			L1:	.text "cmp"	;  name of word as a string, ending at wh_NameLastChar
>d1af	03					.byte (("cmp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1b0	23 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1b3	08					.byte NN	;wh_Flags	dictionary flags
=53551					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1b4	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1b7					en = *	; remember here
>d1b2	03					.byte CL	;wh_CodeLength
>d1b7	cd					.byte $cd
>d1b8	63 6d 70 2e 23			L1:	.text "cmp.#"	;  name of word as a string, ending at wh_NameLastChar
>d1bd	65					.byte (("cmp.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1be	2f d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1c0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1c1	08					.byte NN	;wh_Flags	dictionary flags
=53565					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1c2	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1c5					en = *	; remember here
>d1c0	03					.byte CL	;wh_CodeLength
>d1c5	c9					.byte $c9
>d1c6	63 6d 70 2e 78			L1:	.text "cmp.x"	;  name of word as a string, ending at wh_NameLastChar
>d1cb	05					.byte (("cmp.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1cc	3d d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1cf	08					.byte NN	;wh_Flags	dictionary flags
=53579					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1d0	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1d3					en = *	; remember here
>d1ce	03					.byte CL	;wh_CodeLength
>d1d3	dd					.byte $dd
>d1d4	63 6d 70 2e 79			L1:	.text "cmp.y"	;  name of word as a string, ending at wh_NameLastChar
>d1d9	25					.byte (("cmp.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1da	4b d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1dd	08					.byte NN	;wh_Flags	dictionary flags
=53593					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1de	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1e1					en = *	; remember here
>d1dc	03					.byte CL	;wh_CodeLength
>d1e1	d9					.byte $d9
>d1e2	63 6d 70 2e 7a			L1:	.text "cmp.z"	;  name of word as a string, ending at wh_NameLastChar
>d1e7	45					.byte (("cmp.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1e8	59 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1ea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1eb	08					.byte NN	;wh_Flags	dictionary flags
=53607					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1ec	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1ef					en = *	; remember here
>d1ea	03					.byte CL	;wh_CodeLength
>d1ef	c5					.byte $c5
>d1f0	63 6d 70 2e 7a 69 79		L1:	.text "cmp.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d1f7	27					.byte (("cmp.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1f8	67 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1fa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1fb	08					.byte NN	;wh_Flags	dictionary flags
=53623					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1fc	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1ff					en = *	; remember here
>d1fa	03					.byte CL	;wh_CodeLength
>d1ff	d1					.byte $d1
>d200	63 6d 70 2e 7a 78		L1:	.text "cmp.zx"	;  name of word as a string, ending at wh_NameLastChar
>d206	06					.byte (("cmp.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d207	77 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d209	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d20a	08					.byte NN	;wh_Flags	dictionary flags
=53638					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d20b	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d20e					en = *	; remember here
>d209	03					.byte CL	;wh_CodeLength
>d20e	d5					.byte $d5
>d20f	63 6d 70 2e 7a 78 69		L1:	.text "cmp.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d216	27					.byte (("cmp.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d217	86 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d219	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d21a	08					.byte NN	;wh_Flags	dictionary flags
=53654					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d21b	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d21e					en = *	; remember here
>d219	03					.byte CL	;wh_CodeLength
>d21e	c1					.byte $c1
>d21f	63 70 78			L1:	.text "cpx"	;  name of word as a string, ending at wh_NameLastChar
>d222	03					.byte (("cpx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d223	96 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d225	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d226	08					.byte NN	;wh_Flags	dictionary flags
=53666					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d227	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d22a					en = *	; remember here
>d225	03					.byte CL	;wh_CodeLength
>d22a	ec					.byte $ec
>d22b	63 70 78 2e 23			L1:	.text "cpx.#"	;  name of word as a string, ending at wh_NameLastChar
>d230	65					.byte (("cpx.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d231	a2 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d233	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d234	08					.byte NN	;wh_Flags	dictionary flags
=53680					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d235	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d238					en = *	; remember here
>d233	03					.byte CL	;wh_CodeLength
>d238	e0					.byte $e0
>d239	63 70 78 2e 7a			L1:	.text "cpx.z"	;  name of word as a string, ending at wh_NameLastChar
>d23e	45					.byte (("cpx.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d23f	b0 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d241	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d242	08					.byte NN	;wh_Flags	dictionary flags
=53694					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d243	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d246					en = *	; remember here
>d241	03					.byte CL	;wh_CodeLength
>d246	e4					.byte $e4
>d247	63 70 79			L1:	.text "cpy"	;  name of word as a string, ending at wh_NameLastChar
>d24a	23					.byte (("cpy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d24b	be d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d24d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d24e	08					.byte NN	;wh_Flags	dictionary flags
=53706					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d24f	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d252					en = *	; remember here
>d24d	03					.byte CL	;wh_CodeLength
>d252	cc					.byte $cc
>d253	63 70 79 2e 23			L1:	.text "cpy.#"	;  name of word as a string, ending at wh_NameLastChar
>d258	65					.byte (("cpy.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d259	ca d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d25b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d25c	08					.byte NN	;wh_Flags	dictionary flags
=53720					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d25d	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d260					en = *	; remember here
>d25b	03					.byte CL	;wh_CodeLength
>d260	c0					.byte $c0
>d261	63 70 79 2e 7a			L1:	.text "cpy.z"	;  name of word as a string, ending at wh_NameLastChar
>d266	45					.byte (("cpy.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d267	d8 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d269	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d26a	08					.byte NN	;wh_Flags	dictionary flags
=53734					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d26b	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d26e					en = *	; remember here
>d269	03					.byte CL	;wh_CodeLength
>d26e	c4					.byte $c4
>d26f	64 65 63			L1:	.text "dec"	;  name of word as a string, ending at wh_NameLastChar
>d272	63					.byte (("dec"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d273	e6 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d275	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d276	08					.byte NN	;wh_Flags	dictionary flags
=53746					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d277	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d27a					en = *	; remember here
>d275	03					.byte CL	;wh_CodeLength
>d27a	ce					.byte $ce
>d27b	64 65 63 2e 61			L1:	.text "dec.a"	;  name of word as a string, ending at wh_NameLastChar
>d280	25					.byte (("dec.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d281	f2 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d283	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d284	08					.byte NN	;wh_Flags	dictionary flags
=53760					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d285	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d288					en = *	; remember here
>d283	03					.byte CL	;wh_CodeLength
>d288	3a					.byte $3a
>d289	64 65 63 2e 78			L1:	.text "dec.x"	;  name of word as a string, ending at wh_NameLastChar
>d28e	05					.byte (("dec.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d28f	00 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d291	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d292	08					.byte NN	;wh_Flags	dictionary flags
=53774					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d293	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d296					en = *	; remember here
>d291	03					.byte CL	;wh_CodeLength
>d296	de					.byte $de
>d297	64 65 63 2e 7a			L1:	.text "dec.z"	;  name of word as a string, ending at wh_NameLastChar
>d29c	45					.byte (("dec.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d29d	0e d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d29f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2a0	08					.byte NN	;wh_Flags	dictionary flags
=53788					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2a1	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2a4					en = *	; remember here
>d29f	03					.byte CL	;wh_CodeLength
>d2a4	c6					.byte $c6
>d2a5	64 65 63 2e 7a 78		L1:	.text "dec.zx"	;  name of word as a string, ending at wh_NameLastChar
>d2ab	06					.byte (("dec.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2ac	1c d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2ae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2af	08					.byte NN	;wh_Flags	dictionary flags
=53803					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2b0	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2b3					en = *	; remember here
>d2ae	03					.byte CL	;wh_CodeLength
>d2b3	d6					.byte $d6
>d2b4	64 65 78			L1:	.text "dex"	;  name of word as a string, ending at wh_NameLastChar
>d2b7	03					.byte (("dex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2b8	2b d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2ba	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2bb	08					.byte NN	;wh_Flags	dictionary flags
=53815					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2bc	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2bf					en = *	; remember here
>d2ba	03					.byte CL	;wh_CodeLength
>d2bf	ca					.byte $ca
>d2c0	64 65 79			L1:	.text "dey"	;  name of word as a string, ending at wh_NameLastChar
>d2c3	23					.byte (("dey"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2c4	37 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2c6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2c7	08					.byte NN	;wh_Flags	dictionary flags
=53827					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2c8	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2cb					en = *	; remember here
>d2c6	03					.byte CL	;wh_CodeLength
>d2cb	88					.byte $88
>d2cc	65 6f 72			L1:	.text "eor"	;  name of word as a string, ending at wh_NameLastChar
>d2cf	43					.byte (("eor"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2d0	43 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2d3	08					.byte NN	;wh_Flags	dictionary flags
=53839					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2d4	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2d7					en = *	; remember here
>d2d2	03					.byte CL	;wh_CodeLength
>d2d7	4d					.byte $4d
>d2d8	65 6f 72 2e 23			L1:	.text "eor.#"	;  name of word as a string, ending at wh_NameLastChar
>d2dd	65					.byte (("eor.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2de	4f d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2e0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2e1	08					.byte NN	;wh_Flags	dictionary flags
=53853					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2e2	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2e5					en = *	; remember here
>d2e0	03					.byte CL	;wh_CodeLength
>d2e5	49					.byte $49
>d2e6	65 6f 72 2e 78			L1:	.text "eor.x"	;  name of word as a string, ending at wh_NameLastChar
>d2eb	05					.byte (("eor.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2ec	5d d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2ef	08					.byte NN	;wh_Flags	dictionary flags
=53867					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2f0	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2f3					en = *	; remember here
>d2ee	03					.byte CL	;wh_CodeLength
>d2f3	5d					.byte $5d
>d2f4	65 6f 72 2e 79			L1:	.text "eor.y"	;  name of word as a string, ending at wh_NameLastChar
>d2f9	25					.byte (("eor.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2fa	6b d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2fd	08					.byte NN	;wh_Flags	dictionary flags
=53881					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2fe	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d301					en = *	; remember here
>d2fc	03					.byte CL	;wh_CodeLength
>d301	59					.byte $59
>d302	65 6f 72 2e 7a			L1:	.text "eor.z"	;  name of word as a string, ending at wh_NameLastChar
>d307	45					.byte (("eor.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d308	79 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d30a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d30b	08					.byte NN	;wh_Flags	dictionary flags
=53895					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d30c	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d30f					en = *	; remember here
>d30a	03					.byte CL	;wh_CodeLength
>d30f	45					.byte $45
>d310	65 6f 72 2e 7a 69 79		L1:	.text "eor.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d317	27					.byte (("eor.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d318	87 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d31a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d31b	08					.byte NN	;wh_Flags	dictionary flags
=53911					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d31c	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d31f					en = *	; remember here
>d31a	03					.byte CL	;wh_CodeLength
>d31f	51					.byte $51
>d320	65 6f 72 2e 7a 78		L1:	.text "eor.zx"	;  name of word as a string, ending at wh_NameLastChar
>d326	06					.byte (("eor.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d327	97 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d329	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d32a	08					.byte NN	;wh_Flags	dictionary flags
=53926					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d32b	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d32e					en = *	; remember here
>d329	03					.byte CL	;wh_CodeLength
>d32e	55					.byte $55
>d32f	65 6f 72 2e 7a 78 69		L1:	.text "eor.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d336	27					.byte (("eor.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d337	a6 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d339	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d33a	08					.byte NN	;wh_Flags	dictionary flags
=53942					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d33b	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d33e					en = *	; remember here
>d339	03					.byte CL	;wh_CodeLength
>d33e	41					.byte $41
>d33f	69 6e 63			L1:	.text "inc"	;  name of word as a string, ending at wh_NameLastChar
>d342	63					.byte (("inc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d343	b6 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d345	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d346	08					.byte NN	;wh_Flags	dictionary flags
=53954					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d347	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d34a					en = *	; remember here
>d345	03					.byte CL	;wh_CodeLength
>d34a	ee					.byte $ee
>d34b	69 6e 63 2e 61			L1:	.text "inc.a"	;  name of word as a string, ending at wh_NameLastChar
>d350	25					.byte (("inc.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d351	c2 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d353	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d354	08					.byte NN	;wh_Flags	dictionary flags
=53968					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d355	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d358					en = *	; remember here
>d353	03					.byte CL	;wh_CodeLength
>d358	1a					.byte $1a
>d359	69 6e 63 2e 78			L1:	.text "inc.x"	;  name of word as a string, ending at wh_NameLastChar
>d35e	05					.byte (("inc.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d35f	d0 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d361	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d362	08					.byte NN	;wh_Flags	dictionary flags
=53982					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d363	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d366					en = *	; remember here
>d361	03					.byte CL	;wh_CodeLength
>d366	fe					.byte $fe
>d367	69 6e 63 2e 7a			L1:	.text "inc.z"	;  name of word as a string, ending at wh_NameLastChar
>d36c	45					.byte (("inc.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d36d	de d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d36f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d370	08					.byte NN	;wh_Flags	dictionary flags
=53996					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d371	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d374					en = *	; remember here
>d36f	03					.byte CL	;wh_CodeLength
>d374	e6					.byte $e6
>d375	69 6e 63 2e 7a 78		L1:	.text "inc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d37b	06					.byte (("inc.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d37c	ec d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d37e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d37f	08					.byte NN	;wh_Flags	dictionary flags
=54011					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d380	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d383					en = *	; remember here
>d37e	03					.byte CL	;wh_CodeLength
>d383	f6					.byte $f6
>d384	69 6e 78			L1:	.text "inx"	;  name of word as a string, ending at wh_NameLastChar
>d387	03					.byte (("inx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d388	fb d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d38a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d38b	08					.byte NN	;wh_Flags	dictionary flags
=54023					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d38c	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d38f					en = *	; remember here
>d38a	03					.byte CL	;wh_CodeLength
>d38f	e8					.byte $e8
>d390	69 6e 79			L1:	.text "iny"	;  name of word as a string, ending at wh_NameLastChar
>d393	23					.byte (("iny"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d394	07 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d396	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d397	08					.byte NN	;wh_Flags	dictionary flags
=54035					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d398	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d39b					en = *	; remember here
>d396	03					.byte CL	;wh_CodeLength
>d39b	c8					.byte $c8
>d39c	6a 6d 70			L1:	.text "jmp"	;  name of word as a string, ending at wh_NameLastChar
>d39f	03					.byte (("jmp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3a0	13 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3a3	08					.byte NN	;wh_Flags	dictionary flags
=54047					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3a4	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3a7					en = *	; remember here
>d3a2	03					.byte CL	;wh_CodeLength
>d3a7	4c					.byte $4c
>d3a8	6a 6d 70 2e 69			L1:	.text "jmp.i"	;  name of word as a string, ending at wh_NameLastChar
>d3ad	25					.byte (("jmp.i"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3ae	1f d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3b0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3b1	08					.byte NN	;wh_Flags	dictionary flags
=54061					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3b2	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3b5					en = *	; remember here
>d3b0	03					.byte CL	;wh_CodeLength
>d3b5	6c					.byte $6c
>d3b6	6a 73 72			L1:	.text "jsr"	;  name of word as a string, ending at wh_NameLastChar
>d3b9	43					.byte (("jsr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3ba	2d d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3bd	08					.byte NN	;wh_Flags	dictionary flags
=54073					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3be	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3c1					en = *	; remember here
>d3bc	03					.byte CL	;wh_CodeLength
>d3c1	20					.byte $20
>d3c2	6c 64 61			L1:	.text "lda"	;  name of word as a string, ending at wh_NameLastChar
>d3c5	23					.byte (("lda"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3c6	39 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3c8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3c9	08					.byte NN	;wh_Flags	dictionary flags
=54085					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3ca	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3cd					en = *	; remember here
>d3c8	03					.byte CL	;wh_CodeLength
>d3cd	ad					.byte $ad
>d3ce	6c 64 61 2e 23			L1:	.text "lda.#"	;  name of word as a string, ending at wh_NameLastChar
>d3d3	65					.byte (("lda.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3d4	45 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3d6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3d7	08					.byte NN	;wh_Flags	dictionary flags
=54099					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3d8	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3db					en = *	; remember here
>d3d6	03					.byte CL	;wh_CodeLength
>d3db	a9					.byte $a9
>d3dc	6c 64 61 2e 78			L1:	.text "lda.x"	;  name of word as a string, ending at wh_NameLastChar
>d3e1	05					.byte (("lda.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3e2	53 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3e4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3e5	08					.byte NN	;wh_Flags	dictionary flags
=54113					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3e6	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3e9					en = *	; remember here
>d3e4	03					.byte CL	;wh_CodeLength
>d3e9	bd					.byte $bd
>d3ea	6c 64 61 2e 79			L1:	.text "lda.y"	;  name of word as a string, ending at wh_NameLastChar
>d3ef	25					.byte (("lda.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3f0	61 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3f2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3f3	08					.byte NN	;wh_Flags	dictionary flags
=54127					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3f4	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3f7					en = *	; remember here
>d3f2	03					.byte CL	;wh_CodeLength
>d3f7	b9					.byte $b9
>d3f8	6c 64 61 2e 7a			L1:	.text "lda.z"	;  name of word as a string, ending at wh_NameLastChar
>d3fd	45					.byte (("lda.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3fe	6f d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d400	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d401	08					.byte NN	;wh_Flags	dictionary flags
=54141					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d402	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d405					en = *	; remember here
>d400	03					.byte CL	;wh_CodeLength
>d405	a5					.byte $a5
>d406	6c 64 61 2e 7a 69 79		L1:	.text "lda.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d40d	27					.byte (("lda.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d40e	7d d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d410	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d411	08					.byte NN	;wh_Flags	dictionary flags
=54157					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d412	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d415					en = *	; remember here
>d410	03					.byte CL	;wh_CodeLength
>d415	b1					.byte $b1
>d416	6c 64 61 2e 7a 78		L1:	.text "lda.zx"	;  name of word as a string, ending at wh_NameLastChar
>d41c	06					.byte (("lda.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d41d	8d d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d41f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d420	08					.byte NN	;wh_Flags	dictionary flags
=54172					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d421	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d424					en = *	; remember here
>d41f	03					.byte CL	;wh_CodeLength
>d424	b5					.byte $b5
>d425	6c 64 61 2e 7a 78 69		L1:	.text "lda.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d42c	27					.byte (("lda.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d42d	9c d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d42f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d430	08					.byte NN	;wh_Flags	dictionary flags
=54188					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d431	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d434					en = *	; remember here
>d42f	03					.byte CL	;wh_CodeLength
>d434	a1					.byte $a1
>d435	6c 64 78			L1:	.text "ldx"	;  name of word as a string, ending at wh_NameLastChar
>d438	03					.byte (("ldx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d439	ac d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d43b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d43c	08					.byte NN	;wh_Flags	dictionary flags
=54200					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d43d	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d440					en = *	; remember here
>d43b	03					.byte CL	;wh_CodeLength
>d440	ae					.byte $ae
>d441	6c 64 78 2e 23			L1:	.text "ldx.#"	;  name of word as a string, ending at wh_NameLastChar
>d446	65					.byte (("ldx.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d447	b8 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d449	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d44a	08					.byte NN	;wh_Flags	dictionary flags
=54214					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d44b	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d44e					en = *	; remember here
>d449	03					.byte CL	;wh_CodeLength
>d44e	a2					.byte $a2
>d44f	6c 64 78 2e 79			L1:	.text "ldx.y"	;  name of word as a string, ending at wh_NameLastChar
>d454	25					.byte (("ldx.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d455	c6 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d457	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d458	08					.byte NN	;wh_Flags	dictionary flags
=54228					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d459	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d45c					en = *	; remember here
>d457	03					.byte CL	;wh_CodeLength
>d45c	be					.byte $be
>d45d	6c 64 78 2e 7a			L1:	.text "ldx.z"	;  name of word as a string, ending at wh_NameLastChar
>d462	45					.byte (("ldx.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d463	d4 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d465	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d466	08					.byte NN	;wh_Flags	dictionary flags
=54242					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d467	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d46a					en = *	; remember here
>d465	03					.byte CL	;wh_CodeLength
>d46a	a6					.byte $a6
>d46b	6c 64 78 2e 7a 79		L1:	.text "ldx.zy"	;  name of word as a string, ending at wh_NameLastChar
>d471	26					.byte (("ldx.zy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d472	e2 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d474	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d475	08					.byte NN	;wh_Flags	dictionary flags
=54257					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d476	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d479					en = *	; remember here
>d474	03					.byte CL	;wh_CodeLength
>d479	b6					.byte $b6
>d47a	6c 64 79			L1:	.text "ldy"	;  name of word as a string, ending at wh_NameLastChar
>d47d	23					.byte (("ldy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d47e	f1 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d480	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d481	08					.byte NN	;wh_Flags	dictionary flags
=54269					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d482	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d485					en = *	; remember here
>d480	03					.byte CL	;wh_CodeLength
>d485	ac					.byte $ac
>d486	6c 64 79 2e 23			L1:	.text "ldy.#"	;  name of word as a string, ending at wh_NameLastChar
>d48b	65					.byte (("ldy.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d48c	fd d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d48e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d48f	08					.byte NN	;wh_Flags	dictionary flags
=54283					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d490	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d493					en = *	; remember here
>d48e	03					.byte CL	;wh_CodeLength
>d493	a0					.byte $a0
>d494	6c 64 79 2e 78			L1:	.text "ldy.x"	;  name of word as a string, ending at wh_NameLastChar
>d499	05					.byte (("ldy.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d49a	0b d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d49c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d49d	08					.byte NN	;wh_Flags	dictionary flags
=54297					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d49e	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4a1					en = *	; remember here
>d49c	03					.byte CL	;wh_CodeLength
>d4a1	bc					.byte $bc
>d4a2	6c 64 79 2e 7a			L1:	.text "ldy.z"	;  name of word as a string, ending at wh_NameLastChar
>d4a7	45					.byte (("ldy.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4a8	19 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4aa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4ab	08					.byte NN	;wh_Flags	dictionary flags
=54311					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4ac	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4af					en = *	; remember here
>d4aa	03					.byte CL	;wh_CodeLength
>d4af	a4					.byte $a4
>d4b0	6c 64 79 2e 7a 78		L1:	.text "ldy.zx"	;  name of word as a string, ending at wh_NameLastChar
>d4b6	06					.byte (("ldy.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4b7	27 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4b9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4ba	08					.byte NN	;wh_Flags	dictionary flags
=54326					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4bb	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4be					en = *	; remember here
>d4b9	03					.byte CL	;wh_CodeLength
>d4be	b4					.byte $b4
>d4bf	6c 73 72			L1:	.text "lsr"	;  name of word as a string, ending at wh_NameLastChar
>d4c2	43					.byte (("lsr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4c3	36 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4c5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4c6	08					.byte NN	;wh_Flags	dictionary flags
=54338					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4c7	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4ca					en = *	; remember here
>d4c5	03					.byte CL	;wh_CodeLength
>d4ca	4e					.byte $4e
>d4cb	6c 73 72 2e 61			L1:	.text "lsr.a"	;  name of word as a string, ending at wh_NameLastChar
>d4d0	25					.byte (("lsr.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4d1	42 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4d3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4d4	08					.byte NN	;wh_Flags	dictionary flags
=54352					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4d5	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4d8					en = *	; remember here
>d4d3	03					.byte CL	;wh_CodeLength
>d4d8	4a					.byte $4a
>d4d9	6c 73 72 2e 78			L1:	.text "lsr.x"	;  name of word as a string, ending at wh_NameLastChar
>d4de	05					.byte (("lsr.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4df	50 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4e2	08					.byte NN	;wh_Flags	dictionary flags
=54366					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4e3	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4e6					en = *	; remember here
>d4e1	03					.byte CL	;wh_CodeLength
>d4e6	5e					.byte $5e
>d4e7	6c 73 72 2e 7a			L1:	.text "lsr.z"	;  name of word as a string, ending at wh_NameLastChar
>d4ec	45					.byte (("lsr.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4ed	5e d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4ef	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4f0	08					.byte NN	;wh_Flags	dictionary flags
=54380					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4f1	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4f4					en = *	; remember here
>d4ef	03					.byte CL	;wh_CodeLength
>d4f4	46					.byte $46
>d4f5	6c 73 72 2e 7a 78		L1:	.text "lsr.zx"	;  name of word as a string, ending at wh_NameLastChar
>d4fb	06					.byte (("lsr.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4fc	6c d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4ff	08					.byte NN	;wh_Flags	dictionary flags
=54395					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d500	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d503					en = *	; remember here
>d4fe	03					.byte CL	;wh_CodeLength
>d503	56					.byte $56
>d504	6e 6f 70			L1:	.text "nop"	;  name of word as a string, ending at wh_NameLastChar
>d507	03					.byte (("nop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d508	7b d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d50a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d50b	08					.byte NN	;wh_Flags	dictionary flags
=54407					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d50c	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d50f					en = *	; remember here
>d50a	03					.byte CL	;wh_CodeLength
>d50f	ea					.byte $ea
>d510	6f 72 61			L1:	.text "ora"	;  name of word as a string, ending at wh_NameLastChar
>d513	23					.byte (("ora"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d514	87 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d516	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d517	08					.byte NN	;wh_Flags	dictionary flags
=54419					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d518	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d51b					en = *	; remember here
>d516	03					.byte CL	;wh_CodeLength
>d51b	0d					.byte $0d
>d51c	6f 72 61 2e 23			L1:	.text "ora.#"	;  name of word as a string, ending at wh_NameLastChar
>d521	65					.byte (("ora.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d522	93 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d524	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d525	08					.byte NN	;wh_Flags	dictionary flags
=54433					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d526	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d529					en = *	; remember here
>d524	03					.byte CL	;wh_CodeLength
>d529	09					.byte $09
>d52a	6f 72 61 2e 78			L1:	.text "ora.x"	;  name of word as a string, ending at wh_NameLastChar
>d52f	05					.byte (("ora.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d530	a1 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d532	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d533	08					.byte NN	;wh_Flags	dictionary flags
=54447					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d534	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d537					en = *	; remember here
>d532	03					.byte CL	;wh_CodeLength
>d537	1d					.byte $1d
>d538	6f 72 61 2e 79			L1:	.text "ora.y"	;  name of word as a string, ending at wh_NameLastChar
>d53d	25					.byte (("ora.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d53e	af d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d540	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d541	08					.byte NN	;wh_Flags	dictionary flags
=54461					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d542	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d545					en = *	; remember here
>d540	03					.byte CL	;wh_CodeLength
>d545	19					.byte $19
>d546	6f 72 61 2e 7a			L1:	.text "ora.z"	;  name of word as a string, ending at wh_NameLastChar
>d54b	45					.byte (("ora.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d54c	bd d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d54e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d54f	08					.byte NN	;wh_Flags	dictionary flags
=54475					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d550	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d553					en = *	; remember here
>d54e	03					.byte CL	;wh_CodeLength
>d553	05					.byte $05
>d554	6f 72 61 2e 7a 69 79		L1:	.text "ora.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d55b	27					.byte (("ora.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d55c	cb d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d55e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d55f	08					.byte NN	;wh_Flags	dictionary flags
=54491					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d560	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d563					en = *	; remember here
>d55e	03					.byte CL	;wh_CodeLength
>d563	11					.byte $11
>d564	6f 72 61 2e 7a 78		L1:	.text "ora.zx"	;  name of word as a string, ending at wh_NameLastChar
>d56a	06					.byte (("ora.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d56b	db d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d56d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d56e	08					.byte NN	;wh_Flags	dictionary flags
=54506					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d56f	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d572					en = *	; remember here
>d56d	03					.byte CL	;wh_CodeLength
>d572	15					.byte $15
>d573	6f 72 61 2e 7a 78 69		L1:	.text "ora.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d57a	27					.byte (("ora.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d57b	ea d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d57d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d57e	08					.byte NN	;wh_Flags	dictionary flags
=54522					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d57f	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d582					en = *	; remember here
>d57d	03					.byte CL	;wh_CodeLength
>d582	01					.byte $01
>d583	70 68 61			L1:	.text "pha"	;  name of word as a string, ending at wh_NameLastChar
>d586	23					.byte (("pha"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d587	fa d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d589	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d58a	08					.byte NN	;wh_Flags	dictionary flags
=54534					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d58b	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d58e					en = *	; remember here
>d589	03					.byte CL	;wh_CodeLength
>d58e	48					.byte $48
>d58f	70 68 70			L1:	.text "php"	;  name of word as a string, ending at wh_NameLastChar
>d592	03					.byte (("php"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d593	06 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d595	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d596	08					.byte NN	;wh_Flags	dictionary flags
=54546					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d597	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d59a					en = *	; remember here
>d595	03					.byte CL	;wh_CodeLength
>d59a	08					.byte $08
>d59b	70 6c 61			L1:	.text "pla"	;  name of word as a string, ending at wh_NameLastChar
>d59e	23					.byte (("pla"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d59f	12 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5a1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5a2	08					.byte NN	;wh_Flags	dictionary flags
=54558					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5a3	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5a6					en = *	; remember here
>d5a1	03					.byte CL	;wh_CodeLength
>d5a6	68					.byte $68
>d5a7	70 6c 70			L1:	.text "plp"	;  name of word as a string, ending at wh_NameLastChar
>d5aa	03					.byte (("plp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5ab	1e d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5ad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5ae	08					.byte NN	;wh_Flags	dictionary flags
=54570					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5af	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5b2					en = *	; remember here
>d5ad	03					.byte CL	;wh_CodeLength
>d5b2	28					.byte $28
>d5b3	72 6f 6c			L1:	.text "rol"	;  name of word as a string, ending at wh_NameLastChar
>d5b6	83					.byte (("rol"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5b7	2a d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5b9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5ba	08					.byte NN	;wh_Flags	dictionary flags
=54582					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5bb	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5be					en = *	; remember here
>d5b9	03					.byte CL	;wh_CodeLength
>d5be	2e					.byte $2e
>d5bf	72 6f 6c 2e 61			L1:	.text "rol.a"	;  name of word as a string, ending at wh_NameLastChar
>d5c4	25					.byte (("rol.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5c5	36 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5c8	08					.byte NN	;wh_Flags	dictionary flags
=54596					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5c9	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5cc					en = *	; remember here
>d5c7	03					.byte CL	;wh_CodeLength
>d5cc	2a					.byte $2a
>d5cd	72 6f 6c 2e 78			L1:	.text "rol.x"	;  name of word as a string, ending at wh_NameLastChar
>d5d2	05					.byte (("rol.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5d3	44 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5d5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5d6	08					.byte NN	;wh_Flags	dictionary flags
=54610					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5d7	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5da					en = *	; remember here
>d5d5	03					.byte CL	;wh_CodeLength
>d5da	3e					.byte $3e
>d5db	72 6f 6c 2e 7a			L1:	.text "rol.z"	;  name of word as a string, ending at wh_NameLastChar
>d5e0	45					.byte (("rol.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5e1	52 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5e3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5e4	08					.byte NN	;wh_Flags	dictionary flags
=54624					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5e5	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5e8					en = *	; remember here
>d5e3	03					.byte CL	;wh_CodeLength
>d5e8	26					.byte $26
>d5e9	72 6f 6c 2e 7a 78		L1:	.text "rol.zx"	;  name of word as a string, ending at wh_NameLastChar
>d5ef	06					.byte (("rol.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5f0	60 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5f2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5f3	08					.byte NN	;wh_Flags	dictionary flags
=54639					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5f4	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5f7					en = *	; remember here
>d5f2	03					.byte CL	;wh_CodeLength
>d5f7	36					.byte $36
>d5f8	72 6f 72			L1:	.text "ror"	;  name of word as a string, ending at wh_NameLastChar
>d5fb	43					.byte (("ror"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5fc	6f d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5ff	08					.byte NN	;wh_Flags	dictionary flags
=54651					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d600	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d603					en = *	; remember here
>d5fe	03					.byte CL	;wh_CodeLength
>d603	6e					.byte $6e
>d604	72 6f 72 2e 61			L1:	.text "ror.a"	;  name of word as a string, ending at wh_NameLastChar
>d609	25					.byte (("ror.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d60a	7b d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d60c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d60d	08					.byte NN	;wh_Flags	dictionary flags
=54665					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d60e	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d611					en = *	; remember here
>d60c	03					.byte CL	;wh_CodeLength
>d611	6a					.byte $6a
>d612	72 6f 72 2e 78			L1:	.text "ror.x"	;  name of word as a string, ending at wh_NameLastChar
>d617	05					.byte (("ror.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d618	89 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d61a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d61b	08					.byte NN	;wh_Flags	dictionary flags
=54679					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d61c	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d61f					en = *	; remember here
>d61a	03					.byte CL	;wh_CodeLength
>d61f	7e					.byte $7e
>d620	72 6f 72 2e 7a			L1:	.text "ror.z"	;  name of word as a string, ending at wh_NameLastChar
>d625	45					.byte (("ror.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d626	97 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d628	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d629	08					.byte NN	;wh_Flags	dictionary flags
=54693					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d62a	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d62d					en = *	; remember here
>d628	03					.byte CL	;wh_CodeLength
>d62d	66					.byte $66
>d62e	72 6f 72 2e 7a 78		L1:	.text "ror.zx"	;  name of word as a string, ending at wh_NameLastChar
>d634	06					.byte (("ror.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d635	a5 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d637	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d638	08					.byte NN	;wh_Flags	dictionary flags
=54708					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d639	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d63c					en = *	; remember here
>d637	03					.byte CL	;wh_CodeLength
>d63c	76					.byte $76
>d63d	72 74 69			L1:	.text "rti"	;  name of word as a string, ending at wh_NameLastChar
>d640	23					.byte (("rti"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d641	b4 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d643	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d644	08					.byte NN	;wh_Flags	dictionary flags
=54720					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d645	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d648					en = *	; remember here
>d643	03					.byte CL	;wh_CodeLength
>d648	40					.byte $40
>d649	72 74 73			L1:	.text "rts"	;  name of word as a string, ending at wh_NameLastChar
>d64c	63					.byte (("rts"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d64d	c0 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d64f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d650	08					.byte NN	;wh_Flags	dictionary flags
=54732					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d651	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d654					en = *	; remember here
>d64f	03					.byte CL	;wh_CodeLength
>d654	60					.byte $60
>d655	73 62 63			L1:	.text "sbc"	;  name of word as a string, ending at wh_NameLastChar
>d658	63					.byte (("sbc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d659	cc d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d65b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d65c	08					.byte NN	;wh_Flags	dictionary flags
=54744					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d65d	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d660					en = *	; remember here
>d65b	03					.byte CL	;wh_CodeLength
>d660	ed					.byte $ed
>d661	73 62 63 2e 23			L1:	.text "sbc.#"	;  name of word as a string, ending at wh_NameLastChar
>d666	65					.byte (("sbc.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d667	d8 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d669	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d66a	08					.byte NN	;wh_Flags	dictionary flags
=54758					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d66b	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d66e					en = *	; remember here
>d669	03					.byte CL	;wh_CodeLength
>d66e	e9					.byte $e9
>d66f	73 62 63 2e 78			L1:	.text "sbc.x"	;  name of word as a string, ending at wh_NameLastChar
>d674	05					.byte (("sbc.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d675	e6 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d677	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d678	08					.byte NN	;wh_Flags	dictionary flags
=54772					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d679	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d67c					en = *	; remember here
>d677	03					.byte CL	;wh_CodeLength
>d67c	fd					.byte $fd
>d67d	73 62 63 2e 79			L1:	.text "sbc.y"	;  name of word as a string, ending at wh_NameLastChar
>d682	25					.byte (("sbc.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d683	f4 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d685	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d686	08					.byte NN	;wh_Flags	dictionary flags
=54786					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d687	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d68a					en = *	; remember here
>d685	03					.byte CL	;wh_CodeLength
>d68a	f9					.byte $f9
>d68b	73 62 63 2e 7a			L1:	.text "sbc.z"	;  name of word as a string, ending at wh_NameLastChar
>d690	45					.byte (("sbc.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d691	02 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d693	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d694	08					.byte NN	;wh_Flags	dictionary flags
=54800					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d695	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d698					en = *	; remember here
>d693	03					.byte CL	;wh_CodeLength
>d698	e5					.byte $e5
>d699	73 62 63 2e 7a 69 79		L1:	.text "sbc.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d6a0	27					.byte (("sbc.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6a1	10 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6a3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6a4	08					.byte NN	;wh_Flags	dictionary flags
=54816					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6a5	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6a8					en = *	; remember here
>d6a3	03					.byte CL	;wh_CodeLength
>d6a8	f1					.byte $f1
>d6a9	73 62 63 2e 7a 78		L1:	.text "sbc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d6af	06					.byte (("sbc.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6b0	20 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6b3	08					.byte NN	;wh_Flags	dictionary flags
=54831					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6b4	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6b7					en = *	; remember here
>d6b2	03					.byte CL	;wh_CodeLength
>d6b7	f5					.byte $f5
>d6b8	73 62 63 2e 7a 78 69		L1:	.text "sbc.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d6bf	27					.byte (("sbc.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6c0	2f d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6c3	08					.byte NN	;wh_Flags	dictionary flags
=54847					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6c4	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6c7					en = *	; remember here
>d6c2	03					.byte CL	;wh_CodeLength
>d6c7	e1					.byte $e1
>d6c8	73 65 63			L1:	.text "sec"	;  name of word as a string, ending at wh_NameLastChar
>d6cb	63					.byte (("sec"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6cc	3f d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6cf	08					.byte NN	;wh_Flags	dictionary flags
=54859					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6d0	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6d3					en = *	; remember here
>d6ce	03					.byte CL	;wh_CodeLength
>d6d3	38					.byte $38
>d6d4	73 65 64			L1:	.text "sed"	;  name of word as a string, ending at wh_NameLastChar
>d6d7	83					.byte (("sed"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6d8	4b d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6da	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6db	08					.byte NN	;wh_Flags	dictionary flags
=54871					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6dc	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6df					en = *	; remember here
>d6da	03					.byte CL	;wh_CodeLength
>d6df	f8					.byte $f8
>d6e0	73 65 69			L1:	.text "sei"	;  name of word as a string, ending at wh_NameLastChar
>d6e3	23					.byte (("sei"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6e4	57 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6e6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6e7	08					.byte NN	;wh_Flags	dictionary flags
=54883					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6e8	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6eb					en = *	; remember here
>d6e6	03					.byte CL	;wh_CodeLength
>d6eb	78					.byte $78
>d6ec	73 74 61			L1:	.text "sta"	;  name of word as a string, ending at wh_NameLastChar
>d6ef	23					.byte (("sta"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6f0	63 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6f2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6f3	08					.byte NN	;wh_Flags	dictionary flags
=54895					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6f4	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6f7					en = *	; remember here
>d6f2	03					.byte CL	;wh_CodeLength
>d6f7	8d					.byte $8d
>d6f8	73 74 61 2e 78			L1:	.text "sta.x"	;  name of word as a string, ending at wh_NameLastChar
>d6fd	05					.byte (("sta.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6fe	6f d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d700	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d701	08					.byte NN	;wh_Flags	dictionary flags
=54909					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d702	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d705					en = *	; remember here
>d700	03					.byte CL	;wh_CodeLength
>d705	9d					.byte $9d
>d706	73 74 61 2e 79			L1:	.text "sta.y"	;  name of word as a string, ending at wh_NameLastChar
>d70b	25					.byte (("sta.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d70c	7d d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d70e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d70f	08					.byte NN	;wh_Flags	dictionary flags
=54923					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d710	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d713					en = *	; remember here
>d70e	03					.byte CL	;wh_CodeLength
>d713	99					.byte $99
>d714	73 74 61 2e 7a			L1:	.text "sta.z"	;  name of word as a string, ending at wh_NameLastChar
>d719	45					.byte (("sta.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d71a	8b d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d71c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d71d	08					.byte NN	;wh_Flags	dictionary flags
=54937					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d71e	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d721					en = *	; remember here
>d71c	03					.byte CL	;wh_CodeLength
>d721	85					.byte $85
>d722	73 74 61 2e 7a 69 79		L1:	.text "sta.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d729	27					.byte (("sta.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d72a	99 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d72c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d72d	08					.byte NN	;wh_Flags	dictionary flags
=54953					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d72e	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d731					en = *	; remember here
>d72c	03					.byte CL	;wh_CodeLength
>d731	91					.byte $91
>d732	73 74 61 2e 7a 78		L1:	.text "sta.zx"	;  name of word as a string, ending at wh_NameLastChar
>d738	06					.byte (("sta.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d739	a9 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d73b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d73c	08					.byte NN	;wh_Flags	dictionary flags
=54968					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d73d	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d740					en = *	; remember here
>d73b	03					.byte CL	;wh_CodeLength
>d740	95					.byte $95
>d741	73 74 61 2e 7a 78 69		L1:	.text "sta.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d748	27					.byte (("sta.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d749	b8 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d74b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d74c	08					.byte NN	;wh_Flags	dictionary flags
=54984					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d74d	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d750					en = *	; remember here
>d74b	03					.byte CL	;wh_CodeLength
>d750	81					.byte $81
>d751	73 74 78			L1:	.text "stx"	;  name of word as a string, ending at wh_NameLastChar
>d754	03					.byte (("stx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d755	c8 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d757	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d758	08					.byte NN	;wh_Flags	dictionary flags
=54996					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d759	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d75c					en = *	; remember here
>d757	03					.byte CL	;wh_CodeLength
>d75c	8e					.byte $8e
>d75d	73 74 78 2e 7a			L1:	.text "stx.z"	;  name of word as a string, ending at wh_NameLastChar
>d762	45					.byte (("stx.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d763	d4 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d765	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d766	08					.byte NN	;wh_Flags	dictionary flags
=55010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d767	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d76a					en = *	; remember here
>d765	03					.byte CL	;wh_CodeLength
>d76a	86					.byte $86
>d76b	73 74 78 2e 7a 79		L1:	.text "stx.zy"	;  name of word as a string, ending at wh_NameLastChar
>d771	26					.byte (("stx.zy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d772	e2 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d774	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d775	08					.byte NN	;wh_Flags	dictionary flags
=55025					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d776	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d779					en = *	; remember here
>d774	03					.byte CL	;wh_CodeLength
>d779	96					.byte $96
>d77a	73 74 79			L1:	.text "sty"	;  name of word as a string, ending at wh_NameLastChar
>d77d	23					.byte (("sty"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d77e	f1 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d780	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d781	08					.byte NN	;wh_Flags	dictionary flags
=55037					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d782	20 bf cf	jsr $cfbf		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d785					en = *	; remember here
>d780	03					.byte CL	;wh_CodeLength
>d785	8c					.byte $8c
>d786	73 74 79 2e 7a			L1:	.text "sty.z"	;  name of word as a string, ending at wh_NameLastChar
>d78b	45					.byte (("sty.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d78c	fd d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d78e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d78f	08					.byte NN	;wh_Flags	dictionary flags
=55051					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d790	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d793					en = *	; remember here
>d78e	03					.byte CL	;wh_CodeLength
>d793	84					.byte $84
>d794	73 74 79 2e 7a 78		L1:	.text "sty.zx"	;  name of word as a string, ending at wh_NameLastChar
>d79a	06					.byte (("sty.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d79b	0b d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d79d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d79e	08					.byte NN	;wh_Flags	dictionary flags
=55066					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d79f	20 a9 cf	jsr $cfa9		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7a2					en = *	; remember here
>d79d	03					.byte CL	;wh_CodeLength
>d7a2	94					.byte $94
>d7a3	74 61 78			L1:	.text "tax"	;  name of word as a string, ending at wh_NameLastChar
>d7a6	03					.byte (("tax"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7a7	1a d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7a9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7aa	08					.byte NN	;wh_Flags	dictionary flags
=55078					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7ab	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7ae					en = *	; remember here
>d7a9	03					.byte CL	;wh_CodeLength
>d7ae	aa					.byte $aa
>d7af	74 61 79			L1:	.text "tay"	;  name of word as a string, ending at wh_NameLastChar
>d7b2	23					.byte (("tay"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7b3	26 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7b5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7b6	08					.byte NN	;wh_Flags	dictionary flags
=55090					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7b7	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7ba					en = *	; remember here
>d7b5	03					.byte CL	;wh_CodeLength
>d7ba	a8					.byte $a8
>d7bb	74 73 78			L1:	.text "tsx"	;  name of word as a string, ending at wh_NameLastChar
>d7be	03					.byte (("tsx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7bf	32 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7c2	08					.byte NN	;wh_Flags	dictionary flags
=55102					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7c3	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7c6					en = *	; remember here
>d7c1	03					.byte CL	;wh_CodeLength
>d7c6	ba					.byte $BA
>d7c7	74 78 61			L1:	.text "txa"	;  name of word as a string, ending at wh_NameLastChar
>d7ca	23					.byte (("txa"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7cb	3e d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7ce	08					.byte NN	;wh_Flags	dictionary flags
=55114					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7cf	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7d2					en = *	; remember here
>d7cd	03					.byte CL	;wh_CodeLength
>d7d2	8a					.byte $8a
>d7d3	74 78 73			L1:	.text "txs"	;  name of word as a string, ending at wh_NameLastChar
>d7d6	63					.byte (("txs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7d7	4a d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7d9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7da	08					.byte NN	;wh_Flags	dictionary flags
=55126					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7db	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7de					en = *	; remember here
>d7d9	03					.byte CL	;wh_CodeLength
>d7de	9a					.byte $9a
>d7df	74 79 61			L1:	.text "tya"	;  name of word as a string, ending at wh_NameLastChar
>d7e2	23					.byte (("tya"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7e3	56 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7e5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7e6	08					.byte NN	;wh_Flags	dictionary flags
=55138					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7e7	20 c8 cf	jsr $cfc8		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7ea					en = *	; remember here
>d7e5	03					.byte CL	;wh_CodeLength
>d7ea	98					.byte $98
=55138					asm_table = WordListLink ; head of instruction word list for disassembler
>d7eb	70 75 73 68 2d 61		L1:	.text "push-a"	;  name of word as a string, ending at wh_NameLastChar
>d7f1	26					.byte (("push-a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7f2	62 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7f4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7f5	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55153					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7f6	a9 a6		lda #$a6			lda #<PushZA
.d7f8	a0 b7		ldy #$b7			ldy #>PushZA
.d7fa	4c e5 cc	jmp $cce5			jmp Jsr_Comma_YA
=7					CL	.var *-(WordListLink+wh_Xt)
=$d7fd					en = *	; remember here
>d7f4	07					.byte CL	;wh_CodeLength
>d7fd	2d 2d 3e			L1:	.text "-->"	;  name of word as a string, ending at wh_NameLastChar
>d800	c3					.byte (("-->"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d801	71 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d803	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d804	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55168					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d805	4c c9 c9	jmp $c9c9			jmp Here
=3					CL	.var *-(WordListLink+wh_Xt)
=$d808					en = *	; remember here
>d803	03					.byte CL	;wh_CodeLength
>d808	3c 6a				L1:	.text "<j"	;  name of word as a string, ending at wh_NameLastChar
>d80a	42					.byte (("<j"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d80b	80 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d80d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d80e	04					.byte IM	;wh_Flags	dictionary flags
=55178					WordListLink ::= *-wh_xt ; remember the nt of this word for later
=0					CL	.var *-(WordListLink+wh_Xt)
=$d80f					en = *	; remember here
>d80d	00					.byte CL	;wh_CodeLength
.d80f	60		rts				rts
>d810	3c 62				L1:	.text "<b"	;  name of word as a string, ending at wh_NameLastChar
>d812	42					.byte (("<b"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d813	8a d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d815	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d816	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55186					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d817					asm_back_branch:
.d817	20 c9 c9	jsr $c9c9			jsr Here		; ( addr-l addr-h )
.d81a	20 6a cb	jsr $cb6a			jsr Minus		; ( offset )
.d81d	a9 fe		lda #$fe			lda #$fe
.d81f	4c ec c9	jmp $c9ec			jmp Minus_A
=11					CL	.var *-(WordListLink+wh_Xt)
=$d822					en = *	; remember here
>d815	0b					.byte CL	;wh_CodeLength
>d822	44 69 73 41 73 6d		L1:	.text "DisAsm"	;  name of word as a string, ending at wh_NameLastChar
>d828	a6					.byte (("DisAsm"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d829	92 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d82b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d82c	08					.byte NN	;wh_Flags	dictionary flags
=55208					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d82d					DisAsm:
.d82d	20 f8 c3	jsr $c3f8			jsr Bounds		; ( addr_end addr )
.d830					_instr:
.d830	20 e9 b3	jsr $b3e9			jsr underflow_2
.d833	b5 24		lda $24,x			lda DStack+0,x		; addr >= addr_end?
.d835	d5 26		cmp $26,x			cmp DStack+2,x
.d837	b5 25		lda $25,x			lda DStack+1,x
.d839	f5 27		sbc $27,x			sbc DStack+3,x
.d83b	90 03		bcc $d840			bcc +
.d83d	4c c1 c4	jmp $c4c1			jmp Two_drop		; discard parms & return
.d840					+
.d840	20 e2 aa	jsr $aae2			jsr CR			; new line
.d843	20 07 cf	jsr $cf07			jsr Dup			; print address
.d846	20 77 a8	jsr $a877			jsr Dot_Hex
.d849	20 82 cd	jsr $cd82			jsr Space
.d84c	a1 24		lda ($24,x)			lda (DStack+0,x)	; print opcode byte
.d84e	20 8f d9	jsr $d98f			jsr _print_a
.d851	a1 24		lda ($24,x)			lda (DStack+0,x)	; save opcode
.d853	85 16		sta $16				sta tmp2
.d855	20 fd c9	jsr $c9fd			jsr One_plus
.d858	a9 62		lda #$62			lda #<asm_table		; for each asm opcode word
.d85a	a0 d7		ldy #$d7			ldy #>asm_table
.d85c	85 14		sta $14				sta tmp1+0
.d85e	84 15		sty $15				sty tmp1+1
.d860	d0 0f		bne $d871			bne _WTest
.d862	a0 82		ldy #$82	_WNext:		ldy #wh_WordListLink+1	;   next entry
.d864	b1 14		lda ($14),y			lda (tmp1),y
.d866	f0 2e		beq $d896			beq _unknown
.d868	48		pha				pha
.d869	88		dey				dey
.d86a	b1 14		lda ($14),y			lda (tmp1),y
.d86c	85 14		sta $14				sta tmp1+0
.d86e	68		pla				pla
.d86f	85 15		sta $15				sta tmp1+1
.d871	a0 88		ldy #$88	_WTest:		ldy #wh_Xt+3		;   opcode match?
.d873	b1 14		lda ($14),y			lda (tmp1),y
.d875	c5 16		cmp $16				cmp tmp2
.d877	d0 e9		bne $d862			bne _WNext
.d879	a5 16		lda $16				lda tmp2		; save opcode
.d87b	48		pha				pha
.d87c	a5 15		lda $15				lda tmp1+1		; save its nt
.d87e	48		pha				pha
.d87f	a5 14		lda $14				lda tmp1+0
.d881	48		pha				pha
.d882	a0 86		ldy #$86			ldy #wh_xt+1		; get processor routine addr lo byte from JSR
.d884	b1 14		lda ($14),y			lda (tmp1),y
.d886	c9 c8		cmp #$c8			cmp #<asm_0		; goto disasm processor
.d888	f0 17		beq $d8a1			beq _c0
.d88a	c9 a9		cmp #$a9			cmp #<asm_1
.d88c	f0 49		beq $d8d7			beq _c1
.d88e	c9 bf		cmp #$bf			cmp #<asm_2
.d890	f0 61		beq $d8f3			beq _c2
.d892	c9 89		cmp #$89			cmp #<asm_r
.d894	f0 18		beq $d8ae			beq _cr
.d896					_unknown:
.d896	20 70 d9	jsr $d970			jsr _tab		; to source area
.d899	a9 3f		lda #$3f			lda #'?'
.d89b	20 75 cd	jsr $cd75			jsr Emit_A
.d89e	4c 30 d8	jmp $d830			jmp _instr
.d8a1					_c0:
.d8a1	20 70 d9	jsr $d970			jsr _tab		; to source area
.d8a4	68		pla				pla			; get opcode word nt
.d8a5	a8		tay				tay
.d8a6	68		pla				pla
.d8a7	20 75 d9	jsr $d975			jsr _print_opcode
.d8aa	68		pla				pla			; discard opcode
.d8ab	4c 30 d8	jmp $d830			jmp _instr
.d8ae					_cr:
.d8ae	20 86 d9	jsr $d986			jsr _get_byte		; get displacement byte
.d8b1	a0 00		ldy #$00			ldy #0			; sign extend displacement
.d8b3	09 00		ora #$00			ora #0
.d8b5	10 01		bpl $d8b8			bpl +
.d8b7	88		dey				dey
.d8b8	20 64 b7	jsr $b764	+		jsr PushYA
.d8bb	20 07 cf	jsr $cf07			jsr Dup			; save for TypeSymbol
.d8be	20 70 d9	jsr $d970			jsr _tab		; to source area
.d8c1	20 b6 cb	jsr $cbb6			jsr U_Dot		; print dest address
.d8c4	68		pla				pla			; get opcode word nt
.d8c5	a8		tay				tay
.d8c6	68		pla				pla
.d8c7	20 75 d9	jsr $d975			jsr _print_opcode
.d8ca	68		pla				pla			; discard opcode
.d8cb	20 de ce	jsr $cede			jsr Over		; calc dest addr
.d8ce	20 51 cb	jsr $cb51			jsr Plus
.d8d1	20 9e 81	jsr $819e			jsr TypeSymbol		; print dest addr symbolic
.d8d4	4c 30 d8	jmp $d830			jmp _instr
.d8d7					_c1:
.d8d7	20 86 d9	jsr $d986			jsr _get_byte		; get operand
.d8da	20 a6 b7	jsr $b7a6			jsr PushZA
.d8dd	20 70 d9	jsr $d970			jsr _tab		; to source area
.d8e0	20 07 cf	jsr $cf07			jsr Dup
.d8e3	20 b6 cb	jsr $cbb6			jsr U_Dot		; print operand
.d8e6	68		pla				pla			; get opcode word nt
.d8e7	a8		tay				tay
.d8e8	68		pla				pla
.d8e9	20 75 d9	jsr $d975			jsr _print_opcode
.d8ec	68		pla				pla			; discard opcode
.d8ed	20 9e 81	jsr $819e			jsr TypeSymbol
.d8f0	4c 30 d8	jmp $d830			jmp _instr
.d8f3					_c2:
.d8f3	20 86 d9	jsr $d986			jsr _get_byte		; get operand lo byte
.d8f6	48		pha				pha
.d8f7	20 86 d9	jsr $d986			jsr _get_byte		; get operand hi byte
.d8fa	ca		dex				dex			; push operand bytes
.d8fb	ca		dex				dex
.d8fc	95 25		sta $25,x			sta DStack+1,x
.d8fe	68		pla				pla
.d8ff	95 24		sta $24,x			sta DStack+0,x
.d901	20 70 d9	jsr $d970			jsr _tab		; to source area
.d904	20 07 cf	jsr $cf07			jsr Dup
.d907	20 b6 cb	jsr $cbb6			jsr U_Dot		; print operand
.d90a	68		pla				pla			; AY= opcode word nt
.d90b	a8		tay				tay
.d90c	68		pla				pla
.d90d	20 75 d9	jsr $d975			jsr _print_opcode
.d910	20 07 cf	jsr $cf07			jsr Dup
.d913	20 9e 81	jsr $819e			jsr TypeSymbol		; print operand as symbol
.d916	68		pla				pla			; get opcode
.d917	c9 20		cmp #$20			cmp #$20		;  JSR
.d919	f0 09		beq $d924			beq _jsr
.d91b	e8		inx		_jdrop:		inx			; Drop operand
.d91c	e8		inx				inx
.d91d	4c 30 d8	jmp $d830			jmp _instr		; ( addr_end addr )
.d920	e8		inx		_2drop:		inx			; Drop jsr_nt
.d921	e8		inx				inx
.d922	d0 f7		bne $d91b			bne _jdrop
.d924					_jsr:
.d924	20 aa b3	jsr $b3aa			jsr PopYA
.d927	c9 85		cmp #$85			cmp #<sliteral_runtime	; string literal?
.d929	d0 42		bne $d96d			bne _not_sliteral
.d92b	c0 b8		cpy #$b8			cpy #>sliteral_runtime
.d92d	d0 3e		bne $d96d			bne _not_sliteral
.d92f	20 e2 aa	jsr $aae2			jsr CR
.d932	20 07 cf	jsr $cf07			jsr Dup			; ( addr_end addr addr )
.d935	20 77 a8	jsr $a877			jsr Dot_Hex
.d938	20 82 cd	jsr $cd82			jsr Space
.d93b	20 07 cf	jsr $cf07			jsr Dup			; ( addr_end ? addr )
.d93e	20 86 d9	jsr $d986			jsr _get_byte		; get JMP opcode
.d941	20 86 d9	jsr $d986			jsr _get_byte		; get JMP addr lo byte
.d944	95 26		sta $26,x			sta DStack+2,x
.d946	20 86 d9	jsr $d986			jsr _get_byte		; get JMP addr hi byte
.d949	95 27		sta $27,x			sta DStack+3,x		; ( addr_end string_end addr )
.d94b	20 e2 aa	jsr $aae2			jsr CR
.d94e	20 07 cf	jsr $cf07			jsr Dup
.d951	20 77 a8	jsr $a877			jsr Dot_Hex
.d954	20 82 cd	jsr $cd82			jsr Space
.d957	b5 24		lda $24,x	_slit_11:	lda DStack+0,x		; done with string data?
.d959	d5 26		cmp $26,x			cmp DStack+2,x
.d95b	b5 25		lda $25,x			lda DStack+1,x
.d95d	f5 27		sbc $27,x			sbc DStack+3,x
.d95f	b0 06		bcs $d967			bcs _slit_19
.d961	20 86 d9	jsr $d986			jsr _get_byte
.d964	4c 57 d9	jmp $d957			jmp _slit_11
.d967					_slit_19:
.d967	20 22 c9	jsr $c922			jsr Nip			; ( addr_end addr )
.d96a	4c 30 d8	jmp $d830			jmp _instr
.d96d					_not_sliteral:
.d96d	4c 30 d8	jmp $d830			jmp _instr
.d970					_tab:
.d970	a9 09		lda #$09			lda #9
.d972	4c 75 cd	jmp $cd75			jmp Emit_A
.d975					_print_opcode:
.d975	20 15 cf	jsr $cf15			jsr PushAY		; save opcode word nt
.d978	20 82 cd	jsr $cd82			jsr Space
.d97b	20 b4 bd	jsr $bdb4			jsr Name_To_String	; get name string
.d97e	4c 8f cd	jmp $cd8f			jmp Type		; type word name
.d981					_get_byte_silent:
.d981	a1 24		lda ($24,x)			lda (DStack+0,x)
.d983	4c fd c9	jmp $c9fd			jmp One_plus
.d986					_get_byte:
.d986	20 81 d9	jsr $d981			jsr _get_byte_silent
.d989	48		pha				pha
.d98a	20 8f d9	jsr $d98f			jsr _print_a
.d98d	68		pla				pla
.d98e	60		rts				rts
.d98f					_print_a:
.d98f	20 a6 b7	jsr $b7a6			jsr PushZA
.d992	20 55 a8	jsr $a855			jsr C_Dot_Hex
.d995	4c 82 cd	jmp $cd82			jmp Space
=55208					assembler_dictionary_start = WordListLink ; END of ASSEMBLER-WORDLIST
=0					WordListLink .var 0	; start wordlist
>d998	6c				L1:	.text "l"	;  name of word as a string, ending at wh_NameLastChar
>d999	81					.byte (("l"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d99a	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d99c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d99d	08					.byte NN	;wh_Flags	dictionary flags
=55577					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d99e	4c 20 a4	jmp $a420	Editor_l:	jmp ListScr
=3					CL	.var *-(WordListLink+wh_Xt)
=$d9a1					en = *	; remember here
>d99c	03					.byte CL	;wh_CodeLength
.d9a1					Editor_Screen_Helper:
.d9a1	20 07 cf	jsr $cf07			jsr Dup
.d9a4	20 24 a2	jsr $a224			jsr Scr
.d9a7	20 54 ce	jsr $ce54			jsr Store
.d9aa	4c 38 a3	jmp $a338			jmp Buffer
>d9ad	65 6e 74 65 72 2d 73 63		L1:	.text "enter-screen"	;  name of word as a string, ending at wh_NameLastChar
>d9b5	72 65 65 6e
>d9b9	cc					.byte (("enter-screen"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d9ba	19 d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d9bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d9bd	08					.byte NN	;wh_Flags	dictionary flags
=55609					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d9be					Editor_Enter_Screen:
.d9be	20 a1 d9	jsr $d9a1			jsr Editor_Screen_Helper
.d9c1	a9 00		lda #$00			lda #0			; Overwrite the lines one at a time.
.d9c3	95 24		sta $24,x	_loop:		sta DStack+0,x
.d9c5	20 a6 b7	jsr $b7a6			jsr PushZA		; Put the current line number on the stack.
.d9c8	20 2c da	jsr $da2c			jsr Editor_o		; prompt for overwrite.
.d9cb	f6 24		inc $24,x			inc DStack+0,x		; Move on to the next line.
.d9cd	b5 24		lda $24,x			lda DStack+0,x
.d9cf	c9 10		cmp #$10			cmp #16
.d9d1	90 f0		bcc $d9c3			bcc _loop
.d9d3	e8		inx				inx			; Drop work area
.d9d4	e8		inx				inx
=23					CL	.var *-(WordListLink+wh_Xt)
=$d9d5					en = *	; remember here
>d9bc	17					.byte CL	;wh_CodeLength
.d9d5	60		rts				rts
>d9d6	6c 69 6e 65			L1:	.text "line"	;  name of word as a string, ending at wh_NameLastChar
>d9da	a4					.byte (("line"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d9db	39 d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d9dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d9de	08					.byte NN	;wh_Flags	dictionary flags
=55642					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d9df					Editor_line:
.d9df	a9 06		lda #$06			lda #6		; Multiply the TOS by 64 (chars/line) to compute offset.
.d9e1	20 f0 ca	jsr $caf0			jsr LShift_A	; *64 is same as left shift 6 times.
.d9e4	20 24 a2	jsr $a224			jsr Scr
.d9e7	20 71 ce	jsr $ce71			jsr Fetch
.d9ea	20 ce a2	jsr $a2ce			jsr Block
.d9ed	4c 51 cb	jmp $cb51			jmp Plus
=17					CL	.var *-(WordListLink+wh_Xt)
=$d9f0					en = *	; remember here
>d9dd	11					.byte CL	;wh_CodeLength
>d9f0	65 72 61 73 65 2d 73 63		L1:	.text "erase-screen"	;  name of word as a string, ending at wh_NameLastChar
>d9f8	72 65 65 6e
>d9fc	cc					.byte (("erase-screen"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d9fd	5a d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d9ff	03					.byte 3		;wh_CodeLength  (with placeholder value)
>da00	08					.byte NN	;wh_Flags	dictionary flags
=55676					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.da01					Editor_Erase_Screen:
.da01	20 a1 d9	jsr $d9a1			jsr Editor_Screen_Helper
.da04	a9 00		lda #$00			lda #<1024
.da06	a0 04		ldy #$04			ldy #>1024
.da08	20 64 b7	jsr $b764			jsr PushYA
.da0b	20 fe bd	jsr $bdfe			jsr Blank		; Erase the entire block (fill with spaces).
.da0e	4c 24 a3	jmp $a324			jmp Update		; Mark buffer as updated.
=16					CL	.var *-(WordListLink+wh_Xt)
=$da11					en = *	; remember here
>d9ff	10					.byte CL	;wh_CodeLength
>da11	65 6c				L1:	.text "el"	;  name of word as a string, ending at wh_NameLastChar
>da13	82					.byte (("el"[-1]&7)<<5)+(*-L1)	;wh_HNL
>da14	7c d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>da16	03					.byte 3		;wh_CodeLength  (with placeholder value)
>da17	08					.byte NN	;wh_Flags	dictionary flags
=55699					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.da18					Editor_el:
.da18	20 df d9	jsr $d9df			jsr Editor_line
.da1b	a9 40		lda #$40			lda #64			;(# of chars/line)
.da1d	20 a6 b7	jsr $b7a6			jsr PushZA
.da20	20 fe bd	jsr $bdfe			jsr Blank		; Fill with spaces.
.da23	4c 24 a3	jmp $a324			jmp Update		; Mark buffer as updated.
=14					CL	.var *-(WordListLink+wh_Xt)
=$da26					en = *	; remember here
>da16	0e					.byte CL	;wh_CodeLength
>da26	6f				L1:	.text "o"	;  name of word as a string, ending at wh_NameLastChar
>da27	e1					.byte (("o"[-1]&7)<<5)+(*-L1)	;wh_HNL
>da28	93 d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>da2a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>da2b	08					.byte NN	;wh_Flags	dictionary flags
=55719					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.da2c					Editor_o:
.da2c	20 e2 aa	jsr $aae2			jsr CR
.da2f	20 07 cf	jsr $cf07			jsr Dup
.da32	a9 02		lda #$02			lda #2
.da34	20 ea cb	jsr $cbea			jsr U_Dot_R_A
.da37	20 82 cd	jsr $cd82			jsr Space
.da3a	a9 2a		lda #$2a			lda #'*'
.da3c	20 75 cd	jsr $cd75			jsr Emit_A
.da3f	20 82 cd	jsr $cd82			jsr Space
.da42	20 df d9	jsr $d9df			jsr Editor_line
.da45	20 07 cf	jsr $cf07			jsr Dup		; Save a copy of the line address for later.
.da48	a9 40		lda #$40			lda #64		; chars/line
.da4a	20 a6 b7	jsr $b7a6			jsr PushZA
.da4d	20 7c c2	jsr $c27c			jsr Accept
.da50	20 07 cf	jsr $cf07			jsr Dup
.da53	20 31 ce	jsr $ce31			jsr Not_Rot
.da56	20 51 cb	jsr $cb51			jsr Plus
.da59	a9 40		lda #$40			lda #64		; chars/line
.da5b	20 a6 b7	jsr $b7a6			jsr PushZA
.da5e	20 0b ce	jsr $ce0b			jsr Rot
.da61	20 6a cb	jsr $cb6a			jsr Minus
.da64	20 fe bd	jsr $bdfe			jsr Blank
.da67	4c 24 a3	jmp $a324			jmp Update
=62					CL	.var *-(WordListLink+wh_Xt)
=$da6a					en = *	; remember here
>da2a	3e					.byte CL	;wh_CodeLength
=55719					editor_dictionary_start = WordListLink ; END of EDITOR-WORDLIST

;******  Processing file: platform/../strings.asm

>da6a	20 6f 6b 00			str_ok:         .text " ok", 0         ; note space at beginning
>da6e	20 63 6f 6d 70 69 6c 65		str_compiled:   .text " compiled", 0   ; note space at beginning
>da76	64 00
>da78	72 65 64 65 66 69 6e 65		str_redefined:  .text "redefined ", 0  ; note space at end
>da80	64 20 00
>da83	41 73 73 65 6d 62 6c 65		str_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>da8b	72 20 00
>da8e	45 64 69 74 6f 72 20 00		str_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>da96	46 6f 72 74 68 20 00		str_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>da9d	52 6f 6f 74 20 00		str_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>daa3	66 6c 61 67 73 3a 00		str_see_flags:  .text "flags:", 0
>daaa	6e 74 3a 20 24 00		str_see_nt:     .text "nt: $", 0
>dab0	78 74 3a 20 24 00		str_see_xt:     .text "xt: $", 0
>dab6	73 69 7a 65 3a 20 23 00		str_see_size:   .text "size: #", 0
.dabe					Exception_Text_List:
>dabe	ff 00					.text $100+err_Abort,0
>dac0	fe 00					.text $100+err_AbortQuote,0
>dac2	fd 53 74 61 63 6b 20 4f			.text $100+err_Stack_Overflow,"Stack Overflow",0
>daca	76 65 72 66 6c 6f 77 00
>dad2	fc 53 74 61 63 6b 20 55			.text $100+err_Stack_Underflow,"Stack Underflow",0
>dada	6e 64 65 72 66 6c 6f 77 00
>dae3	f9 64 6f 2d 6c 6f 6f 70			.text $100+err_DoLoop_TooDeep,"do-loops nested too deeply during execution",0
>daeb	73 20 6e 65 73 74 65 64 20 74 6f 6f 20 64 65 65
>dafb	70 6c 79 20 64 75 72 69 6e 67 20 65 78 65 63 75
>db0b	74 69 6f 6e 00
>db10	f6 44 69 76 69 64 65 20			.text $100+err_DivideBy0,"Divide by 0",0
>db18	62 79 20 30 00
>db1d	f5 6f 75 74 20 6f 66 20			.text $100+err_OutOfRange,"out of range",0
>db25	72 61 6e 67 65 00
>db2b	f4 61 72 67 75 6d 65 6e			.text $100+err_ArgTypeMismatch,"argument type mismatch",0
>db33	74 20 74 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>db43	f3 55 6e 64 65 66 69 6e			.text $100+err_UndefinedWord,"Undefined word",0
>db4b	65 64 20 77 6f 72 64 00
>db53	f2 49 6e 74 65 72 70 72			.text $100+err_CompileOnly,"Interpreting a Compile-only word",0
>db5b	65 74 69 6e 67 20 61 20 43 6f 6d 70 69 6c 65 2d
>db6b	6f 6e 6c 79 20 77 6f 72 64 00
>db75	eb 75 6e 73 75 70 70 6f			.text $100+err_Unsupported,"unsupported operation",0 ;  (e.g., AT-XY on a too-dumb terminal)
>db7d	72 74 65 64 20 6f 70 65 72 61 74 69 6f 6e 00
>db8c	ea 63 6f 6e 74 72 6f 6c			.text $100+err_ControlMismatch,"control structure mismatch",0
>db94	20 73 74 72 75 63 74 75 72 65 20 6d 69 73 6d 61
>dba4	74 63 68 00
>dba8	e0 69 6e 76 61 6c 69 64			.text $100+err_InvalidName,"invalid name",0 ; argument (e.g., TO name)
>dbb0	20 6e 61 6d 65 00
>dbb6	df 62 6c 6f 63 6b 20 72			.text $100+err_BlockRead,"block read",0
>dbbe	65 61 64 00
>dbc2	de 62 6c 6f 63 6b 20 77			.text $100+err_BlockWrite,"block write",0
>dbca	72 69 74 65 00
>dbcf	d6 46 50 20 64 69 76 69			.text $100+err_FPDivideBy0,"FP divide by zero",0
>dbd7	64 65 20 62 79 20 7a 65 72 6f 00
>dbe2	d5 46 50 20 72 65 73 75			.text $100+err_FPOutOfRange,"FP result out of range",0
>dbea	6c 74 20 6f 75 74 20 6f 66 20 72 61 6e 67 65 00
>dbfa	d4 46 50 20 73 74 61 63			.text $100+err_FPStackOverflow,"FP stack overflow",0
>dc02	6b 20 6f 76 65 72 66 6c 6f 77 00
>dc0d	d3 46 50 20 73 74 61 63			.text $100+err_FPStackUnderflow,"FP stack underflow",0
>dc15	6b 20 75 6e 64 65 72 66 6c 6f 77 00
>dc21	d2 46 50 20 69 6e 76 61			.text $100+err_FPInvalidArg,"FP invalid argument",0
>dc29	6c 69 64 20 61 72 67 75 6d 65 6e 74 00
>dc36	ca 46 50 20 75 6e 64 65			.text $100+err_FPUnderflow,"FP underflow",0
>dc3e	72 66 6c 6f 77 00
>dc44	c5 41 4c 4c 4f 43 41 54			.text $100+err_Allocate,"ALLOCATE",0
>dc4c	45 00
>dc4e	c4 46 52 45 45 00			.text $100+err_Free,"FREE",0
>dc54	6b 52 65 66 69 6c 6c 00			.text $100+err_Refill,"Refill",0
>dc5c	6a 44 65 66 65 72 20 6e			.text $100+err_Defer,"Defer not set",0
>dc64	6f 74 20 73 65 74 00
>dc6b	69 41 6c 72 65 61 64 79			.text $100+err_AlreadyInterpreting,"Already interpreting",0
>dc73	20 69 6e 74 65 72 70 72 65 74 69 6e 67 00
>dc81	68 41 6c 72 65 61 64 79			.text $100+err_AlreadyCompiling,"Already compiling",0
>dc89	20 63 6f 6d 70 69 6c 69 6e 67 00
>dc94	66 4e 6f 20 77 6f 72 64			.text $100+err_TooManyWordlists,"No wordlists available",0
>dc9c	6c 69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>dcac	00					.text 0 ; end of list

;******  Return to file: platform/../taliforth.asm


;******  Return to file: platform/platform-65816S.asm

>0766					hist_buff: .fill 8*128	; Input History for ACCEPT
.0b66					cp0:
.f100					v_nmi:
.f100					v_reset:
.f100					v_irq:
.f100					kernel_init:
.f100	78		sei		                sei             ; Disable interrupts
.f101	a2 00		ldx #$00	                ldx #0
.f103	bd 35 f1	lda $f135,x	-               lda s_kernel_id,x
.f106	f0 06		beq $f10e	                beq _done
.f108	20 20 f1	jsr $f120	                jsr kernel_putc
.f10b	e8		inx		                inx
.f10c	d0 f5		bne $f103	                bne -
.f10e					_done:
.f10e	4c 4c 80	jmp $804c	                jmp Cold
.f111					kernel_getc:
.f111	ee 35 03	inc $0335	-		inc RndState+0	; randomize
>f114	22						.byte $22	; jsl GET_BYTE_FROM_PC
>f115	33 e0						.word $e033
>f117	00						.byte 0
.f118	b0 f7		bcs $f111			bcs -
.f11a	60		rts				rts
.f11b					kernel_havekey:
.f11b	a9 eb		lda #$eb			lda #$100+err_unsupported
.f11d	4c 33 b4	jmp $b433			jmp ThrowA
.f120					kernel_putc:
>f120	22				-		.byte $22	; jsl SEND_BYTE_TO_PC
>f121	63 e0						.word $e063
>f123	00						.byte 0
.f124	b0 fa		bcs $f120			bcs -
.f126	60		rts				rts
.f127					platform_bye:
.f127	00		brk #		                brk
.f128					platform_CCAt:
.f128	ca		dex				dex
.f129	ca		dex				dex
.f12a	ca		dex				dex
.f12b	ca		dex				dex
>f12c	02 f4 24					.byte $02,$F4,DStack ; cop $f4	get 65816s simulator cycle count in DStack,x
.f12f	60		rts				rts
.f130					Platform_Block_Read:
.f130					Platform_Block_Write:
.f130	a9 eb		lda #$eb			lda #$100+err_Unsupported
.f132	20 33 b4	jsr $b433			jsr ThrowA
.f135					s_kernel_id:
>f135	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 kernel for 65816s (31. May 2024)", AscCR,AscLF, 0
>f13d	74 68 20 32 20 6b 65 72 6e 65 6c 20 66 6f 72 20
>f14d	36 35 38 31 36 73 20 28 33 31 2e 20 4d 61 79 20
>f15d	32 30 32 34 29 0d 0a 00
>fffa	00 f1				.word v_nmi
>fffc	00 f1				.word v_reset
>fffe	00 f1				.word v_irq

;******  End of listing
