
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/65816S-listing.txt --labels=docs/65816S-labelmap.txt --output TaliForth-65816S.bin platform/platform-65816S.asm
; Fri Jul 12 09:33:38 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-65816S.asm

=$0100					RStack = $0100	; begin of 6502 Return Stack
=$ff					rsp0      = $ff		; initial Return Stack Pointer (6502 stack)
=$8000					cp_end    = $8000	; Last RAM byte available for code
=84					PadOffset = 84	; offset from CP to PAD (holds number strings)
=79					MAX_LINE_LENGTH  = 79      ; output line size
=20					DDim = 20	; # of cells in data stack
=10					FDim = 10	; # of entries in floating-point stack
=8					DoStkDim = 8	; # of entries in Do stack
=["cr","lf"]				TALI_OPTION_CR_EOL := [ "cr", "lf" ]
=$ff					bsize     = $ff		; size of input/output buffers
>0200					buffer0: .fill bsize	; input buffer

;******  Processing file: platform/../taliforth.asm

=					TALI_OPTIONAL_WORDS := ["fp","fpe", "fpieee","fptrancendentals", "fphyperbolic", "ed", "editor", "ramdrive", "block", "environment?", "assembler", "wordlist" ]
=-1					err_Abort		= -1
=-2					err_AbortQuote		= -2
=-3					err_Stack_Overflow	= -3
=-4					err_Stack_Underflow	= -4
=-5					err_Return_Stack_Overflow = -5
=-6					err_Return_Stack_Underflow = -6
=-7					err_DoLoop_TooDeep	= -7	; do-loops nested too deeply during execution
=-8					err_Dictionary_Overflow	= -8
=-9					err_InvalidMemoryAddr	= -9	; invalid memory address
=-10					err_DivideBy0		= -10	; division by zero
=-11					err_OutOfRange		= -11	; result out of range
=-12					err_ArgTypeMismatch	= -12	; argument type mismatch
=-13					err_UndefinedWord	= -13
=-14					err_CompileOnly		= -14	; interpreting a compile-only word
=-15					err_Forget		= -15	; invalid FORGET
=-16					err_EmptyName		= -16	; attempt to use zero-length string as a name
=-17					err_PicStringOverflow	= -17	; pictured numeric output string overflow
=-18					err_ParsedStringOverflow = -18	; parsed string overflow
=-19					err_NameTooLong		= -19	; definition name too long
=-20					err_WriteToRO		= -20	; write to a read-only location
=-21					err_Unsupported		= -21	; unsupported operation  (e.g., AT-XY on a too-dumb terminal)
=-22					err_ControlMismatch	= -22	; control structure mismatch
=-23					err_AddrAlignment	= -23	; address alignment exception
=-24					err_InvalidNumericArg	= -24	; invalid numeric argument
=-25					err_ReturnStackImbalance = -25	; return stack imbalance
=-26					err_LoopParmUnavailable = -26	; loop parameters unavailable
=-27					err_InvalidRecursion	= -27	; invalid recursion
=-28					err_UserInterrupt	= -28	; user interrupt
=-29					err_CompilerNesting	= -29	; compiler nesting
=-30					err_Obsolete		= -30	; obsolescent feature
=-31					err_NoBody		= -31	; >BODY used on non-CREATEd definition
=-32					err_InvalidName		= -32	; invalid name argument (e.g., TO name)
=-33					err_BlockRead		= -33	; block read exception
=-34					err_BlockWrite		= -34	; block write exception
=-35					err_InvalidBlock	= -35	; invalid block number
=-36					err_InvalidFilePosition = -36	; invalid file position
=-37					err_FileIO		= -37	; file I/O exception
=-38					err_FileMissing		= -38	; non-existent file
=-39					err_EndOfFile		= -39	; unexpected end of file
=-40					err_InvalidBase		= -40	; invalid BASE for floating point conversion
=-41					err_LossOfPrecision	= -41	; loss of precision
=-42					err_FPDivideBy0		= -42	; floating-point divide by zero
=-43					err_FPOutOfRange	= -43	; floating-point result out of range
=-44					err_FPStackOverflow	= -44	; floating-point stack overflow
=-45					err_FPStackUnderflow	= -45	; floating-point stack underflow
=-46					err_FPInvalidArg	= -46	; floating-point invalid argument
=-47					err_CompileWordsDeleted = -47	; compilation word list deleted
=-48					err_PostponeInvalid	= -48	; invalid POSTPONE
=-49					err_SearchOrderOverflow = -49	; search-order overflow
=-50					err_SearchOrderUnderflow = -50	; search-order underflow
=-51					err_CompileWordlistChanged = -51 ; compilation word list changed
=-52					err_ControlStackOverflow = -52	; control-flow stack overflow
=-53					err_ExceptionStackOverflow = -53 ; exception stack overflow
=-54					err_FPUnderflow		= -54	; floating-point underflow
=-55					err_FPFault		= -55	; floating-point unidentified fault
=-56					err_Quit		= -56	; QUIT
=-57					err_ConsoleIO		= -57	; exception in sending or receiving a character
=-58					err_BracketIf		= -58	; [IF], [ELSE], or [THEN] exception
=-59					err_Allocate		= -59	; ALLOCATE
=-60					err_Free		= -60	; FREE
=-61					err_Resize		= -61	; RESIZE
=-62					err_CloseFile		= -62	; CLOSE-FILE
=-63					err_CreateFile		= -63	; CREATE-FILE
=-64					err_DeleteFile		= -64	; DELETE-FILE
=-65					err_FilePosition	= -65	; FILE-POSITION
=-66					err_FileSize		= -66	; FILE-SIZE
=-67					err_FileStatus		= -67	; FILE-STATUS
=-68					err_FlushFile		= -68	; FLUSH-FILE
=-69					err_OpenFile		= -69	; OPEN-FILE
=-70					err_ReadFile		= -70	; READ-FILE
=-71					err_ReadLine		= -71	; READ-LINE
=-72					err_RenameFile		= -72	; RENAME-FILE
=-73					err_RepositionFile	= -73	; REPOSITION-FILE
=-74					err_ResizeFile		= -74	; RESIZE-FILE
=-75					err_WriteFile		= -75	; WRITE-FILE
=-76					err_WriteLine		= -76	; WRITE-LINE
=-77					err_MalformedXChar	= -77	; Malformed xchar
=-78					err_Substitute		= -78	; SUBSTITUTE
=-79					err_Replaces		= -79	; REPLACES
=-149					err_Refill		= -149	; Refill failed
=-150					err_Defer		= -150	; Defer not set
=-151					err_AlreadyInterpreting	= -151	; entering interpret when already interpreting
=-152					err_AlreadyCompiling	= -152	; entering compile when already compiling
=-154					err_TooManyWordlists   	= -154
.0000					zp0:
>0000					cp:	.word ?		; Compiler Pointer (see HERE)
>0002					InSrc:	.word ?		; input Source for SOURCE-ID
>0004					Cib:	.word ?		; address of current input buffer
>0006					CibLen:	.word ?		; length of current input buffer
>0008					ToIn:	.word ?		; pointer to CIB (>IN in Forth)
>000a					state:	.word ?		; STATE: -1 compile, 0 interpret
>000c					status: .word ?		; internal status flags
>000e					WorkWord: .word ?	; nt or xt of word being compiled (see status)
>0010					dp:	.word ?		; Dictionary Pointer temp
>0012					DoIndex: .word ?	; current Do index
>0014					tmp1:	.word ?		; temporary storage
>0016					tmp2:	.word ?		; temporary storage
>0018					tmp3:	.word ?		; temporary storage
>001a					tmp4:	.word ?		; temporary storage (tmpdsp)
>001c					tmp5:	.word ?		; temporary storage (tmptos)
>001e					editor1: .word ?	; temporary for editors
>0020					editor2: .word ?	; temporary for editors
>0022					editor3: .word ?	; temporary for editors
>0024					DStack:	.fill DDim*2	; data stack
=40					DStack0 = *-DStack	;   initial Data Stack index value
.8000					Cold_zp_table:
>8000	66 0b					.word cp0		; cp
>8002	00 00					.word 0			; insrc (SOURCE-ID is 0 for keyboard)
>8004	00 02					.word buffer0		; cib
>8006	00 00					.word 0			; ciblen
>8008	00 00					.word 0			; toin
>800a	00 00					.word 0			; state (0 = interpret)
>800c	00 00					.word 0			; status
=14					Cold_zp_table_length = *-Cold_zp_table
.02ff					User0:
>02ff					PrecisionV: .byte ?	; # of decimal places for FP print
>0300					base:	.word ?		; number radix, default decimal
>0302					nc_limit: .word ?	; limit for Native Compile size
>0304					uf_strip: .word ?	; flag to strip underflow detection code
>0306					output:	.word ?		; vector for EMIT
>0308					input:	.word ?		; vector for KEY
>030a					HaveKey: .word ?	; vector for KEY?
>030c					BlkV:	.word ?		; BLK
>030e					ScrV:	.word ?		; SCR
>0310					CurrentV: .byte ?	; CURRENT (byte) (Compilation wordlist)
>0311					Num_WordlistsV: .byte ?	; #WORDLISTS (byte)
=12					max_wordlists = 12	; Maximum number of wordlists supported
>0312					WordlistsV: .fill 2*max_wordlists	; WORDLISTS (cells)
>032a					Num_OrderV: .byte ?	; #ORDER (byte)
>032b					Search_OrderV: .fill 9	; SEARCH-ORDER (bytes)
.0334					MarkEnd:
>0334					ToHold:	.byte ?		; pad buffer index for formatted output
>0335					RndState: .dword ?	; random # state
=0					wid_Forth = 0
=1					wid_Editor = 1
=2					wid_Assembler = 2
=3					wid_Root = 3
.800e					Cold_user_table:
>800e	08					.byte 8			; PrecisionV
>800f	0a 00					.word 10		; base
>8011	08 00					.word 8			; nc-limit
>8013	00 00					.word 0			; uf_strip (off by default)
>8015	20 f1					.word kernel_putc	; output
>8017	11 f1					.word kernel_getc	; input
>8019	1b f1					.word kernel_havekey	; havekey
>801b	00 00					.word 0				; BLK
>801d	00 00					.word 0				; SCR
>801f	00					.byte 0				; CURRENT = FORTH-WORDLIST
>8020	04					.byte 4				; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>8021	0b cf					.word forth_dictionary_start	; FORTH-WORDLIST
>8023	49 d9					.word editor_dictionary_start	; EDITOR-WORDLIST
>8025	53 d7					.word assembler_dictionary_start ; ASSEMBLER-WORDLIST
>8027	4c cf					.word root_dictionary_start	; ROOT-WORDLIST
>8029	00 00 00 00 00 00 00 00			.word 0,0,0,0,0,0,0,0		; User wordlists
>8031	00 00 00 00 00 00 00 00
>8039	02					.byte 2				; #ORDER
>803a	00 02 00 00 00 00 00 00			.byte wid_Forth,wid_Assembler,0,0,0,0,0,0,0	; search-order
>8042	00
=53					Cold_user_table_length = *-Cold_user_table
=$03					AscCC   = $03	; break (CTRL-c)
=$07					AscBELL = $07	; bell sound
=$08					AscBS   = $08	; backspace
=$09					AscHT	= $09	; tab
=$0a					AscLF   = $0a	; line feed
=$0b					AScVT	= $0b	; vertical tab
=$0c					AscFF	= $0c	; form feed
=$0d					AscCR   = $0d	; carriage return
=$0e					AscCN   = $0e	; CTRL-n (used to recall next input history)
=$10					AscCP   = $10	; CTRL-p (used to recall previous input history)
=$1b					AscESC  = $1b	; escape
=$20					AscSP   = $20	; space
=$22					AscDQuote = $22	; double quote
=$5c					AscBackslash = $5c ; backslash
=$7f					AscDEL  = $7f	; delete (CTRL-h)
>0000							.fill $80	; |  unused space |   To align the last char of name.
=127					wh_NameLastChar	= *-1		; |		  |   Last char of name.
>0080					wh_HashNameLen:			    .byte ?	; |
=$e0					wh_HNL_HashMask		=	    %11100000	; |      lo 3 bits of last char of name
=$1f					wh_HNL_NameLengthMask	=	    %00011111	; |      length of name
>0081					wh_Flags:			    .byte ?	; |  flag bits
=$01					FP	=			    %00000001	; |	Far previous NT (two byte pointer rather than one byte offset)
=$02					DB	=			    %00000010	; |	Disjoint body (two byte pointer rather than adjoining body code)
=$04					CO	=			    %00000100	; |	Compile Only
=$08					IM	=			    %00001000	; |     Immediate Word
=$10					NN	=			    %00010000	; |	    | 1 | 0 |  NN : Word can only be called by JSR (never native)
=$20					AN	=			    %00100000  	; |	    | 0 | 1 |  AN : Word can only be inlined (always native)
=$30					ST	=			    %00110000	; |	    | 1 | 1 |  ST : Normal word with return stack juggling that
=3					wh_HeaderExtendMask =		     FP+DB	; |	of the header length directly by adding 4 to `flags & %00000011`.
=$40					UF	=			    %01000000   ; |     strippable underflow
>0082					wh_CodeLength:			   .byte ?	; |  Code length  |   Code length for native compile, max 255
.0083					wh_LinkNt:
=0					WordFlags .var 0 ; initialize for macro
=0					XtPtr1  .var 0  ; initialize for macro
=0					WordListLink .var 0	 ; start of FORTH wordlist
>8043	43 6f 6c 64			Name0:	.text "Cold"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=32711					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8047	84					.byte (("Cold"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=32711					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>8048	11					.byte WordFlags	;wh_Flags
>8049	03					.byte 3	;wh_CodeLength
>804a	00 00					  .word WordListLink
=$804c					XtPtr1 ::= *
=32711					WordListLink ::= Nt0 ; remember the nt of this word for later
.804c					Cold:
.804c	d8		cld				cld
.804d	a2 ff		ldx #$ff			ldx #rsp0		; Initialize 6502 stack (Return Stack)
.804f	9a		txs				txs
.8050	a2 0d		ldx #$0d			ldx #Cold_zp_table_length-1 ; Initialize important zero page variables from ROM
.8052	bd 00 80	lda $8000,x	-		lda Cold_zp_table,x	;   We can use X here
.8055	95 00		sta $00,x			sta zp0,x		;   because Tali hasn't set up the param stack yet.
.8057	ca		dex				dex
.8058	10 f8		bpl $8052			bpl -
.805a	a0 34		ldy #$34			ldy #Cold_user_table_length-1	; Initialize the user variables.
.805c	b9 0e 80	lda $800e,y	-		lda Cold_user_table,y
.805f	99 ff 02	sta $02ff,y			sta User0,y
.8062	88		dey				dey
.8063	10 f7		bpl $805c			bpl -
.8065	20 e7 b4	jsr $b4e7			jsr Empty_Stack		; Clear Data Stack. This is repeated in ABORT, but this way we
.8068	20 e9 a1	jsr $a1e9			jsr BlockInit
.806b	20 69 ab	jsr $ab69			jsr CR
.806e	a9 9c		lda #$9c			lda #<forth_words_start		; push start address
.8070	a0 80		ldy #$80			ldy #>forth_words_start
.8072	20 b3 b7	jsr $b7b3			jsr PushYA
.8075	a9 d2		lda #$d2			lda #<forth_words_len		; push length
.8077	a0 00		ldy #$00			ldy #>forth_words_len
.8079	20 b3 b7	jsr $b7b3			jsr PushYA
.807c	20 03 b0	jsr $b003			jsr Evaluate
.807f	a9 00		lda #$00			lda #0
.8081	8d 66 07	sta $0766			sta hist_buff
.8084	8d e6 07	sta $07e6			sta hist_buff+$80
.8087	8d 66 08	sta $0866			sta hist_buff+$100
.808a	8d e6 08	sta $08e6			sta hist_buff+$180
.808d	8d 66 09	sta $0966			sta hist_buff+$200
.8090	8d e6 09	sta $09e6			sta hist_buff+$280
.8093	8d 66 0a	sta $0a66			sta hist_buff+$300
.8096	8d e6 0a	sta $0ae6			sta hist_buff+$380
.8099	4c 99 b4	jmp $b499			jmp Abort_Core2	;Quit
=80					CodeLen	.var *-XtPtr1
=$809c					Here1 = *	; remember here
>8049	50					.byte CodeLen	;patch wh_CodeLength
>809c	20 63 72 20 2e 28 20 54		forth_words_start: .binary "forth_words.asc" ; High-level Forth words, see forth_code/README.md
>80a4	61 6c 69 20 46 6f 72 74 68 20 32 20 72 65 6d 69
>80b4	78 20 66 6f 72 20 74 68 65 20 36 35 30 32 29 20
>80c4	63 72 20 2e 28 20 56 65 72 73 69 6f 6e 20 33 31
>80d4	2e 20 4d 61 79 20 32 30 32 34 20 29 20 63 72 20
>80e4	2e 28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31
>80f4	34 2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53
>8104	74 65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f
>8114	6c 77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c
>8124	69 20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20
>8134	77 69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20
>8144	4e 4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20
>8154	2e 28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f
>8164	20 65 78 69 74 29 20 63 72 20
=210					forth_words_len = *-forth_words_start
>816e					user_words_start: .binary "user_words.asc" ; User-defined Forth words, see forth_code/README.md
=0					user_words_len = *-user_words_start
>816e	4e 6f 4f 70			Name0:	.text "NoOp"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33010					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8172	04					.byte (("NoOp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=299					LinkDisplacement = Nt0-WordListLink
=1						  WordFlags ::= WordFlags | FP
>8173	01					.byte WordFlags	;wh_Flags
>8174	03					.byte 3	;wh_CodeLength
>8175	c7 7f					  .word WordListLink
=$8177					XtPtr1 ::= *
=33010					WordListLink ::= Nt0 ; remember the nt of this word for later
.8177	ea		nop				nop
=1					CodeLen	.var *-XtPtr1
=$8178					Here1 = *	; remember here
>8174	01					.byte CodeLen	;patch wh_CodeLength
.8178	60		rts				rts
>8179	43 43 40			Name0:	.text "CC@"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=33020					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>817c	03					.byte (("CC@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
=$12						  WordFlags ::= WordFlags | DB
>817d	12					.byte WordFlags	;wh_Flags
>817e	08					.byte 8	;wh_CodeLength
>817f	0a					  .byte LinkDisplacement	; offset to previous nt
>8180	28 f1					  .word platform_CCAT		; pointer to xt
=0					XtPtr1 ::= 0
=33020					WordListLink ::= Nt0 ; remember the nt of this word for later
>8182	42 79 65			Name0:	.text "Bye"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=33029					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8185	a3					.byte (("Bye"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
=$12						  WordFlags ::= WordFlags | DB
>8186	12					.byte WordFlags	;wh_Flags
>8187	08					.byte 8	;wh_CodeLength
>8188	09					  .byte LinkDisplacement	; offset to previous nt
>8189	27 f1					  .word platform_bye		; pointer to xt
=0					XtPtr1 ::= 0
=33029					WordListLink ::= Nt0 ; remember the nt of this word for later
>818b	54 79 70 65 53 79 6d 62		Name0:	.text "TypeSymbol"	;  name of word as a string, ending at wh_NameLastChar
>8193	6f 6c
=10					NameLength = *-Name0
=33045					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8195	8a					.byte (("TypeSymbol"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8196	10					.byte WordFlags	;wh_Flags
>8197	03					.byte 3	;wh_CodeLength
>8198	10					  .byte LinkDisplacement	; offset to previous nt
=$8199					XtPtr1 ::= *
=33045					WordListLink ::= Nt0 ; remember the nt of this word for later
.8199	20 a7 b8	jsr $b8a7	TypeSymbol:	jsr SLiteral_runtime
.819c	4c a4 81	jmp $81a4			  jmp +
>819f	20 20 28 20 24					  .text "  ( $"
.81a4	20 d8 cd	jsr $cdd8	+		jsr Type
.81a7	20 56 cf	jsr $cf56			jsr Dup
.81aa	20 09 a9	jsr $a909			jsr Dot_Hex
.81ad	20 cc cd	jsr $cdcc			jsr Space
.81b0	20 d7 81	jsr $81d7			jsr DictSearchXt	; ( addr_end addr operand offset nt )
.81b3	20 e6 bd	jsr $bde6			jsr Name_To_String	; Change nt into the name
.81b6	20 d8 cd	jsr $cdd8			jsr Type		; print it.
.81b9	20 cc cd	jsr $cdcc			jsr Space
.81bc	b5 24		lda $24,x			lda DStack+0,x		; if non-zero offset
.81be	15 25		ora $25,x			ora DStack+1,x
.81c0	f0 0b		beq $81cd			beq +
.81c2	a9 2b		lda #$2b			lda #'+'		;   print offset
.81c4	20 c0 cd	jsr $cdc0			jsr Emit_A
.81c7	20 56 cf	jsr $cf56			jsr Dup
.81ca	20 00 cc	jsr $cc00			jsr U_Dot
.81cd	e8		inx		+		inx
.81ce	e8		inx				inx
.81cf	a9 29		lda #$29			lda #')'
.81d1	20 c0 cd	jsr $cdc0			jsr Emit_A
.81d4	4c cc cd	jmp $cdcc			jmp Space
=62					CodeLen	.var *-XtPtr1
=$81d7					Here1 = *	; remember here
>8197	3e					.byte CodeLen	;patch wh_CodeLength
.81d7					DictSearchXt:
.81d7	ca		dex				dex			; alloc nt
.81d8	ca		dex				dex
.81d9	20 2f cf	jsr $cf2f			jsr Over		; alloc xt
.81dc	a9 ff		lda #$ff			lda #$ff		; init best offset
.81de	95 29		sta $29,x			sta DStack+5,x		; ( offset nt xt )
.81e0	a9 fe		lda #$fe			lda #$100-2		; for each wordlist
.81e2	48		pha				pha
.81e3	68		pla		_ListNext:	pla
.81e4	18		clc				clc
.81e5	69 02		adc #$02			adc #2			; to next wordlist
.81e7	c9 18		cmp #$18			cmp #max_wordlists*2
.81e9	b0 10		bcs $81fb			bcs _ListDone
.81eb	48		pha				pha
.81ec	a8		tay				tay
.81ed	b9 12 03	lda $0312,y			lda WordlistsV+0,y	; Get the DP for that wordlist.
.81f0	85 14		sta $14				sta tmp1+0
.81f2	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.81f5	85 15		sta $15				sta tmp1+1
.81f7	d0 0a		bne $8203			bne _WordTest
.81f9	f0 e8		beq $81e3			beq _ListNext		;   empty list
.81fb	e8		inx		_ListDone:	inx			; Drop pattern xt
.81fc	e8		inx				inx			; ( offset nt )
.81fd	60		rts				rts
.81fe	20 96 82	jsr $8296	_WordNext:	jsr LinkNext		; tmp1= next nt in list
.8201	f0 e0		beq $81e3			beq _ListNext		; end of Dictionary?
.8203	20 aa bd	jsr $bdaa	_WordTest:	jsr NameToIntTmp	; tmp2 = xt of this word
.8206	38		sec				sec			; tmp3 = xt offset for this word
.8207	b5 24		lda $24,x			lda DStack+0,x
.8209	e5 16		sbc $16				sbc tmp2+0
.820b	85 18		sta $18				sta tmp3+0
.820d	b5 25		lda $25,x			lda DStack+1,x
.820f	e5 17		sbc $17				sbc tmp2+1
.8211	85 19		sta $19				sta tmp3+1
.8213	20 7b 82	jsr $827b			jsr _test
.8216	a0 00		ldy #$00			ldy #0			; is this word a constant?
.8218	b1 16		lda ($16),y			lda (tmp2),y
.821a	c9 a0		cmp #$a0			cmp #$a0
.821c	f0 2a		beq $8248			beq _PushYA
.821e	c9 a9		cmp #$a9			cmp #$a9
.8220	f0 02		beq $8224			beq _PushZA
.8222	d0 da		bne $81fe			bne _WordNext
.8224	c8		iny		_PushZA:	iny			; get lda # operand
.8225	b5 24		lda $24,x			lda DStack+0,x
.8227	f1 16		sbc ($16),y			sbc (tmp2),y
.8229	85 18		sta $18				sta tmp3+0
.822b	b5 25		lda $25,x			lda DStack+1,x
.822d	e9 00		sbc #$00			sbc #0
.822f	85 19		sta $19				sta tmp3+1
.8231	c8		iny				iny			; check jmp opcode
.8232	b1 16		lda ($16),y			lda (tmp2),y
.8234	c9 4c		cmp #$4c			cmp #$4c
.8236	d0 c6		bne $81fe			bne _WordNext
.8238	c8		iny				iny			; check jmp operand lo
.8239	b1 16		lda ($16),y			lda (tmp2),y
.823b	c9 e2		cmp #$e2			cmp #<PushZA
.823d	d0 bf		bne $81fe			bne _WordNext
.823f	c8		iny				iny			; check jmp operand hi
.8240	b1 16		lda ($16),y			lda (tmp2),y
.8242	c9 b7		cmp #$b7			cmp #>PushZA
.8244	f0 2f		beq $8275			beq _KTest
.8246	d0 b6		bne $81fe			bne _WordNext
.8248	a0 02		ldy #$02	_PushYA:	ldy #2			; check LDA # opcode
.824a	b1 16		lda ($16),y			lda (tmp2),y
.824c	c9 a9		cmp #$a9			cmp #$a9
.824e	d0 ae		bne $81fe			bne _WordNext
.8250	c8		iny				iny			; get lda # operand
.8251	b5 24		lda $24,x			lda DStack+0,x
.8253	f1 16		sbc ($16),y			sbc (tmp2),y
.8255	85 18		sta $18				sta tmp3+0
.8257	a0 01		ldy #$01			ldy #1			; get LDY # operand
.8259	b5 25		lda $25,x			lda DStack+1,x
.825b	f1 16		sbc ($16),y			sbc (tmp2),y
.825d	85 19		sta $19				sta tmp3+1
.825f	a0 04		ldy #$04			ldy #4			; check JMP opcode
.8261	b1 16		lda ($16),y			lda (tmp2),y
.8263	c9 4c		cmp #$4c			cmp #$4c
.8265	d0 97		bne $81fe			bne _WordNext
.8267	c8		iny				iny			; check JMP operand lo
.8268	b1 16		lda ($16),y			lda (tmp2),y
.826a	c9 b3		cmp #$b3			cmp #<PushYA
.826c	d0 0a		bne $8278			bne _WordNext3
.826e	c8		iny				iny			; check JMP operand hi
.826f	b1 16		lda ($16),y			lda (tmp2),y
.8271	c9 b7		cmp #$b7			cmp #>PushYA
.8273	d0 03		bne $8278			bne _WordNext3
.8275	20 7b 82	jsr $827b	_KTest:		jsr _test
.8278	4c fe 81	jmp $81fe	_WordNext3:	jmp _WordNext
.827b					_test:
.827b	a5 18		lda $18				lda tmp3+0		; this word have smaller offset?
.827d	d5 28		cmp $28,x			cmp DStack+4,x
.827f	a5 19		lda $19				lda tmp3+1
.8281	f5 29		sbc $29,x			sbc DStack+5,x
.8283	b0 10		bcs $8295			bcs _trts
.8285	a5 18		lda $18				lda tmp3+0		;   save this better offset
.8287	a4 19		ldy $19				ldy tmp3+1
.8289	95 28		sta $28,x			sta DStack+4,x
.828b	94 29		sty $29,x			sty DStack+5,x
.828d	a5 14		lda $14				lda tmp1+0		;   save this better nt
.828f	a4 15		ldy $15				ldy tmp1+1
.8291	95 26		sta $26,x			sta DStack+2,x
.8293	94 27		sty $27,x			sty DStack+3,x
.8295	60		rts		_trts:		rts
.8296					LinkNext:
.8296	a0 81		ldy #$81			ldy #wh_Flags		; which kind of wh_LinkNt?
.8298	b1 14		lda ($14),y			lda (tmp1),y
.829a	29 01		and #$01			and #FP
.829c	f0 0e		beq $82ac			beq _LinkShort
.829e	a0 84		ldy #$84	_LinkLong:	ldy #wh_LinkNt+1	; tmp1 = tmp1->LinkNt (ptr)
.82a0	b1 14		lda ($14),y			lda (tmp1),y
.82a2	48		pha				pha
.82a3	88		dey				dey
.82a4	b1 14		lda ($14),y			lda (tmp1),y
.82a6	85 14		sta $14				sta tmp1+0
.82a8	68		pla				pla
.82a9	85 15		sta $15				sta tmp1+1
.82ab	60		rts				rts
.82ac	a0 83		ldy #$83	_LinkShort:	ldy #wh_LinkNt		; tmp1 -= tmp1->LinkNt byte offset
.82ae	38		sec				sec
.82af	a5 14		lda $14				lda tmp1+0
.82b1	f1 14		sbc ($14),y			sbc (tmp1),y
.82b3	85 14		sta $14				sta tmp1+0
.82b5	a5 15		lda $15				lda tmp1+1
.82b7	e9 00		sbc #$00			sbc #0
.82b9	85 15		sta $15				sta tmp1+1
.82bb	60		rts				rts
>82bc	44 53 74 61 63 6b		Name0:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33346					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82c2	66					.byte (("DStack"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=301					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>82c3	11					.byte WordFlags	;wh_Flags
>82c4	03					.byte 3	;wh_CodeLength
>82c5	15 81					  .word WordListLink
=$82c7					XtPtr1 ::= *
=33346					WordListLink ::= Nt0 ; remember the nt of this word for later
.82c7	a9 24		lda #$24			lda #DStack
.82c9	4c e2 b7	jmp $b7e2			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$82cc					Here1 = *	; remember here
>82c4	05					.byte CodeLen	;patch wh_CodeLength
>82cc	52 53 74 61 63 6b		Name0:	.text "RStack"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33362					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82d2	66					.byte (("RStack"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>82d3	10					.byte WordFlags	;wh_Flags
>82d4	03					.byte 3	;wh_CodeLength
>82d5	10					  .byte LinkDisplacement	; offset to previous nt
=$82d6					XtPtr1 ::= *
=33362					WordListLink ::= Nt0 ; remember the nt of this word for later
.82d6	a0 01		ldy #$01			ldy #>RStack
.82d8	a9 00		lda #$00			lda #<RStack
.82da	4c b3 b7	jmp $b7b3			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$82dd					Here1 = *	; remember here
>82d4	07					.byte CodeLen	;patch wh_CodeLength
>82dd	52 6e 64 53 74 61 74 65		Name0:	.text "RndState"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=33381					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82e5	a8					.byte (("RndState"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>82e6	10					.byte WordFlags	;wh_Flags
>82e7	03					.byte 3	;wh_CodeLength
>82e8	13					  .byte LinkDisplacement	; offset to previous nt
=$82e9					XtPtr1 ::= *
=33381					WordListLink ::= Nt0 ; remember the nt of this word for later
.82e9	a0 03		ldy #$03			ldy #>RndState
.82eb	a9 35		lda #$35			lda #<RndState
.82ed	4c b3 b7	jmp $b7b3			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$82f0					Here1 = *	; remember here
>82e7	07					.byte CodeLen	;patch wh_CodeLength
>82f0	52 61 6e 64			Name0:	.text "Rand"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33396					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82f4	84					.byte (("Rand"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>82f5	00					.byte WordFlags	;wh_Flags
>82f6	03					.byte 3	;wh_CodeLength
>82f7	0f					  .byte LinkDisplacement	; offset to previous nt
=$82f8					XtPtr1 ::= *
=33396					WordListLink ::= Nt0 ; remember the nt of this word for later
.82f8					Rand:
.82f8	4e 36 03	lsr $0336			lsr RndState+1
.82fb	6e 35 03	ror $0335			ror RndState+0
.82fe	6e 38 03	ror $0338			ror RndState+3
.8301	6e 37 03	ror $0337			ror RndState+2
.8304	90 10		bcc $8316			bcc _19			;  IfCs,
.8306	ad 36 03	lda $0336			lda RndState+1
.8309	49 d0		eor #$d0			eor #$d0
.830b	8d 36 03	sta $0336			sta RndState+1
.830e	ad 37 03	lda $0337			lda RndState+2
.8311	49 01		eor #$01			eor #$01
.8313	8d 37 03	sta $0337			sta RndState+2
.8316					_19:
.8316	ad 37 03	lda $0337			lda RndState+2
.8319	ac 38 03	ldy $0338			ldy RndState+3
=36					CodeLen	.var *-XtPtr1
=$831c					Here1 = *	; remember here
>82f6	24					.byte CodeLen	;patch wh_CodeLength
.831c	60		rts				rts
>831d	52 61 6e 64 4d			Name0:	.text "RandM"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33442					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8322	a5					.byte (("RandM"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=46					LinkDisplacement = Nt0-WordListLink
>8323	10					.byte WordFlags	;wh_Flags
>8324	03					.byte 3	;wh_CodeLength
>8325	2e					  .byte LinkDisplacement	; offset to previous nt
=$8326					XtPtr1 ::= *
=33442					WordListLink ::= Nt0 ; remember the nt of this word for later
.8326	20 56 cf	jsr $cf56	RandM:		jsr Dup		; ( umod umod )
.8329	20 f8 82	jsr $82f8			jsr Rand
.832c	4a		lsr a				lsr a		; make positive
.832d	95 27		sta $27,x			sta DStack+3,x
.832f	94 26		sty $26,x			sty DStack+2,x	; ( rand umod )
.8331	4c 79 af	jmp $af79			jmp Mod
=14					CodeLen	.var *-XtPtr1
=$8334					Here1 = *	; remember here
>8324	0e					.byte CodeLen	;patch wh_CodeLength
>004c					FIndex:	.byte ?		; floating-point stack index. empty=FDim, full=0
>004d					FSExp:   .fill FDim	; FP stack exponent        array
>0057					FSMant0: .fill FDim	; FP stack mantissa MSByte array
>0061					FSMant1: .fill FDim	; FP stack mantissa 2nd    array
>006b					FSMant2: .fill FDim	; FP stack mantissa 3rd    array
>0075					FSMant3: .fill FDim	; FP stack mantissa 4th    array
>8334	46 49 6e 64 65 78		Name0:	.text "FIndex"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33466					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>833a	06					.byte (("FIndex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>833b	10					.byte WordFlags	;wh_Flags
>833c	03					.byte 3	;wh_CodeLength
>833d	18					  .byte LinkDisplacement	; offset to previous nt
=$833e					XtPtr1 ::= *
=33466					WordListLink ::= Nt0 ; remember the nt of this word for later
.833e	a9 4c		lda #$4c			lda #FIndex
.8340	4c e2 b7	jmp $b7e2			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$8343					Here1 = *	; remember here
>833c	05					.byte CodeLen	;patch wh_CodeLength
>8343	46 44 69 6d			Name0:	.text "FDim"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33479					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8347	a4					.byte (("FDim"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8348	10					.byte WordFlags	;wh_Flags
>8349	03					.byte 3	;wh_CodeLength
>834a	0d					  .byte LinkDisplacement	; offset to previous nt
=$834b					XtPtr1 ::= *
=33479					WordListLink ::= Nt0 ; remember the nt of this word for later
.834b	a9 0a		lda #$0a			lda #FDim
.834d	4c e2 b7	jmp $b7e2			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$8350					Here1 = *	; remember here
>8349	05					.byte CodeLen	;patch wh_CodeLength
>8350	46 53 45 78 70			Name0:	.text "FSExp"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33493					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8355	05					.byte (("FSExp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>8356	10					.byte WordFlags	;wh_Flags
>8357	03					.byte 3	;wh_CodeLength
>8358	0e					  .byte LinkDisplacement	; offset to previous nt
=$8359					XtPtr1 ::= *
=33493					WordListLink ::= Nt0 ; remember the nt of this word for later
.8359	a9 4d		lda #$4d			lda #FSExp
.835b	4c e2 b7	jmp $b7e2			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$835e					Here1 = *	; remember here
>8357	05					.byte CodeLen	;patch wh_CodeLength
>835e	46 53 4d 61 6e 74 30		Name0:	.text "FSMant0"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=33509					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8365	07					.byte (("FSMant0"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8366	10					.byte WordFlags	;wh_Flags
>8367	03					.byte 3	;wh_CodeLength
>8368	10					  .byte LinkDisplacement	; offset to previous nt
=$8369					XtPtr1 ::= *
=33509					WordListLink ::= Nt0 ; remember the nt of this word for later
.8369	a9 57		lda #$57			lda #FSMant0
.836b	4c e2 b7	jmp $b7e2			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$836e					Here1 = *	; remember here
>8367	05					.byte CodeLen	;patch wh_CodeLength
>836e	46 53 4d 61 6e 74 31		Name0:	.text "FSMant1"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=33525					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8375	27					.byte (("FSMant1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8376	10					.byte WordFlags	;wh_Flags
>8377	03					.byte 3	;wh_CodeLength
>8378	10					  .byte LinkDisplacement	; offset to previous nt
=$8379					XtPtr1 ::= *
=33525					WordListLink ::= Nt0 ; remember the nt of this word for later
.8379	a9 61		lda #$61			lda #FSMant1
.837b	4c e2 b7	jmp $b7e2			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$837e					Here1 = *	; remember here
>8377	05					.byte CodeLen	;patch wh_CodeLength
>837e	46 53 4d 61 6e 74 32		Name0:	.text "FSMant2"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=33541					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8385	47					.byte (("FSMant2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8386	10					.byte WordFlags	;wh_Flags
>8387	03					.byte 3	;wh_CodeLength
>8388	10					  .byte LinkDisplacement	; offset to previous nt
=$8389					XtPtr1 ::= *
=33541					WordListLink ::= Nt0 ; remember the nt of this word for later
.8389	a9 6b		lda #$6b			lda #FSMant2
.838b	4c e2 b7	jmp $b7e2			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$838e					Here1 = *	; remember here
>8387	05					.byte CodeLen	;patch wh_CodeLength
>838e	46 53 4d 61 6e 74 33		Name0:	.text "FSMant3"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=33557					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8395	67					.byte (("FSMant3"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8396	10					.byte WordFlags	;wh_Flags
>8397	03					.byte 3	;wh_CodeLength
>8398	10					  .byte LinkDisplacement	; offset to previous nt
=$8399					XtPtr1 ::= *
=33557					WordListLink ::= Nt0 ; remember the nt of this word for later
.8399	a9 75		lda #$75			lda #FSMant3
.839b	4c e2 b7	jmp $b7e2			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$839e					Here1 = *	; remember here
>8397	05					.byte CodeLen	;patch wh_CodeLength
>839e	46 6c 6f 61 74 2b		Name0:	.text "Float+"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33572					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83a4	66					.byte (("Float+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>83a5	10					.byte WordFlags	;wh_Flags
>83a6	03					.byte 3	;wh_CodeLength
>83a7	0f					  .byte LinkDisplacement	; offset to previous nt
=$83a8					XtPtr1 ::= *
=33572					WordListLink ::= Nt0 ; remember the nt of this word for later
.83a8	a9 05		lda #$05	FloatPlus:	lda #5
.83aa	4c 0c ca	jmp $ca0c			jmp Plus_A
=5					CodeLen	.var *-XtPtr1
=$83ad					Here1 = *	; remember here
>83a6	05					.byte CodeLen	;patch wh_CodeLength
>83ad	46 6c 6f 61 74 73		Name0:	.text "Floats"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33587					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83b3	66					.byte (("Floats"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>83b4	10					.byte WordFlags	;wh_Flags
>83b5	03					.byte 3	;wh_CodeLength
>83b6	0f					  .byte LinkDisplacement	; offset to previous nt
=$83b7					XtPtr1 ::= *
=33587					WordListLink ::= Nt0 ; remember the nt of this word for later
.83b7	a9 05		lda #$05	Floats:		lda #5
.83b9	20 e2 b7	jsr $b7e2			jsr PushZA
.83bc	4c 8f ae	jmp $ae8f			jmp Star
=8					CodeLen	.var *-XtPtr1
=$83bf					Here1 = *	; remember here
>83b5	08					.byte CodeLen	;patch wh_CodeLength
>83bf	46 41 6c 69 67 6e		Name0:	.text "FAlign"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33605					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83c5	c6					.byte (("FAlign"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>83c6	00					.byte WordFlags	;wh_Flags
>83c7	03					.byte 3	;wh_CodeLength
>83c8	12					  .byte LinkDisplacement	; offset to previous nt
=$83c9					XtPtr1 ::= *
=33605					WordListLink ::= Nt0 ; remember the nt of this word for later
.83c9					FAlign:
=0					CodeLen	.var *-XtPtr1
=$83c9					Here1 = *	; remember here
>83c7	00					.byte CodeLen	;patch wh_CodeLength
.83c9	60		rts				rts
>83ca	46 41 6c 69 67 6e 65 64		Name0:	.text "FAligned"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=33618					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83d2	88					.byte (("FAligned"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>83d3	00					.byte WordFlags	;wh_Flags
>83d4	03					.byte 3	;wh_CodeLength
>83d5	0d					  .byte LinkDisplacement	; offset to previous nt
=$83d6					XtPtr1 ::= *
=33618					WordListLink ::= Nt0 ; remember the nt of this word for later
.83d6					FAligned:
=0					CodeLen	.var *-XtPtr1
=$83d6					Here1 = *	; remember here
>83d4	00					.byte CodeLen	;patch wh_CodeLength
.83d6	60		rts				rts
>83d7	48 65 78 3e 46			Name0:	.text "Hex>F"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33628					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83dc	c5					.byte (("Hex>F"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>83dd	10					.byte WordFlags	;wh_Flags
>83de	03					.byte 3	;wh_CodeLength
>83df	0a					  .byte LinkDisplacement	; offset to previous nt
=$83e0					XtPtr1 ::= *
=33628					WordListLink ::= Nt0 ; remember the nt of this word for later
.83e0	20 bd 84	jsr $84bd	HexToF:		jsr FAllocX		; alloc FP stack entry, X= fp stack index
.83e3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.83e5	a4 4c		ldy $4c				ldy FIndex		; Y= FP stack index
.83e7	20 d9 b3	jsr $b3d9			jsr PopA		; pop n_exp
.83ea	99 4d 00	sta $004d,y			sta FSExp,y
.83ed	b5 25		lda $25,x			lda DStack+1,x
.83ef	99 57 00	sta $0057,y			sta FSMant0,y
.83f2	b5 24		lda $24,x			lda DStack+0,x
.83f4	99 61 00	sta $0061,y			sta FSMant1,y
.83f7	b5 27		lda $27,x			lda DStack+3,x
.83f9	99 6b 00	sta $006b,y			sta FSMant2,y
.83fc	b5 26		lda $26,x			lda DStack+2,x
.83fe	99 75 00	sta $0075,y			sta FSMant3,y
.8401	4c 36 c5	jmp $c536			jmp Two_Drop
=36					CodeLen	.var *-XtPtr1
=$8404					Here1 = *	; remember here
>83de	24					.byte CodeLen	;patch wh_CodeLength
>8404	46 3e 48 65 78			Name0:	.text "F>Hex"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33673					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8409	05					.byte (("F>Hex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>840a	10					.byte WordFlags	;wh_Flags
>840b	03					.byte 3	;wh_CodeLength
>840c	2d					  .byte LinkDisplacement	; offset to previous nt
=$840d					XtPtr1 ::= *
=33673					WordListLink ::= Nt0 ; remember the nt of this word for later
.840d	a4 4c		ldy $4c		FToHex:		ldy FIndex	; Y= FP stack index
.840f	ca		dex				dex
.8410	ca		dex				dex
.8411	ca		dex				dex
.8412	ca		dex				dex
.8413	ca		dex				dex
.8414	ca		dex				dex
.8415	b9 57 00	lda $0057,y			lda FSMant0,y	; copy mantissa
.8418	95 27		sta $27,x			sta DStack+3,x
.841a	b9 61 00	lda $0061,y			lda FSMant1,y
.841d	95 26		sta $26,x			sta DStack+2,x
.841f	b9 6b 00	lda $006b,y			lda FSMant2,y
.8422	95 29		sta $29,x			sta DStack+5,x
.8424	b9 75 00	lda $0075,y			lda FSMant3,y
.8427	95 28		sta $28,x			sta DStack+4,x
.8429	b9 4d 00	lda $004d,y			lda FSExp,y	; copy exponent
.842c	95 24		sta $24,x			sta DStack+0,x
.842e	29 80		and #$80			and #$80	;   sign extend
.8430	f0 02		beq $8434			beq +
.8432	a9 ff		lda #$ff			lda #$ff
.8434	95 25		sta $25,x	+		sta DStack+1,x
.8436	e6 4c		inc $4c				inc FIndex	; FDrop
.8438	60		rts				rts
=44					CodeLen	.var *-XtPtr1
=$8439					Here1 = *	; remember here
>840b	2c					.byte CodeLen	;patch wh_CodeLength
>8439	46 2e 48 65 78			Name0:	.text "F.Hex"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33726					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>843e	05					.byte (("F.Hex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>843f	10					.byte WordFlags	;wh_Flags
>8440	03					.byte 3	;wh_CodeLength
>8441	35					  .byte LinkDisplacement	; offset to previous nt
=$8442					XtPtr1 ::= *
=33726					WordListLink ::= Nt0 ; remember the nt of this word for later
.8442	20 0d 84	jsr $840d	FDotHex:	jsr FToHex	; get parts of r
.8445	20 76 ce	jsr $ce76			jsr Not_Rot
.8448	20 09 a9	jsr $a909			jsr Dot_Hex	; do mantissa
.844b	20 09 a9	jsr $a909			jsr Dot_Hex
.844e	a9 3a		lda #$3a			lda #':'
.8450	20 c0 cd	jsr $cdc0			jsr Emit_A
.8453	4c e8 a8	jmp $a8e8			jmp C_Dot_Hex	; do exponent
=20					CodeLen	.var *-XtPtr1
=$8456					Here1 = *	; remember here
>8440	14					.byte CodeLen	;patch wh_CodeLength
>8456	46 43 6d 70 41			Name0:	.text "FCmpA"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33755					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>845b	25					.byte (("FCmpA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>845c	10					.byte WordFlags	;wh_Flags
>845d	03					.byte 3	;wh_CodeLength
>845e	1d					  .byte LinkDisplacement	; offset to previous nt
=$845f					XtPtr1 ::= *
=33755					WordListLink ::= Nt0 ; remember the nt of this word for later
.845f	86 14		stx $14		FCmpA:		stx tmp1		; save data stack index
.8461	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.8463	b5 57		lda $57,x			lda FSMant0+0,x		; r2 mantissa = 0 ?
.8465	f0 35		beq $849c			beq _r2Zero
.8467	b4 58		ldy $58,x			ldy FSMant0+1,x		; r1 mantissa = 0 ?
.8469	f0 2b		beq $8496			beq _r1Zero
.846b	55 58		eor $58,x			eor FSMant0+1,x		; compare mantissa sign
.846d	30 3d		bmi $84ac			bmi _MantissaSignDifferent
.846f	38		sec				sec			; compare exponent
.8470	b5 4e		lda $4e,x			lda FSExp+1,x
.8472	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8474	d0 2b		bne $84a1			bne _ExponentDifferent
.8476	98		tya				tya			; compare mantissa MSB
.8477	f5 57		sbc $57,x			sbc FSMant0+0,x		;   always same sign so can't overflow
.8479	d0 17		bne $8492			bne _13
.847b	b5 62		lda $62,x			lda FSMant1+1,x		; compare mantissa 1
.847d	f5 61		sbc $61,x			sbc FSMant1+0,x
.847f	d0 0c		bne $848d			bne _12
.8481	b5 6c		lda $6c,x			lda FSMant2+1,x		; compare mantissa 2
.8483	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8485	d0 06		bne $848d			bne _12
.8487	b5 76		lda $76,x			lda FSMant3+1,x		; compare mantissa LSB
.8489	f5 75		sbc $75,x			sbc FSMant3+0,x
.848b	f0 05		beq $8492			beq _13
.848d	6a		ror a		_12:		ror a
.848e	49 80		eor #$80	_14:		eor #$80
.8490	09 01		ora #$01			ora #1
.8492	a6 14		ldx $14		_13:		ldx tmp1		; restore data stack index
.8494	a8		tay				tay			; set CPU flags
.8495	60		rts				rts
.8496	b5 57		lda $57,x	_r1Zero:	lda FSMant0+0,x		; return r2
.8498	d0 f4		bne $848e			bne _14
.849a	f0 f6		beq $8492			beq _13
.849c	b5 58		lda $58,x	_r2Zero:	lda FSMant0+1,x		; return 0-r1
.849e	4c 92 84	jmp $8492			jmp _13
.84a1					_ExponentDifferent:
.84a1	50 02		bvc $84a5			bvc +
.84a3	49 80		eor #$80			eor #$80
.84a5					+
.84a5	55 57		eor $57,x			eor FSMant0+0,x
.84a7	a6 14		ldx $14				ldx tmp1		; restore data stack index
.84a9	09 01		ora #$01			ora #1			; set CPU flags
.84ab	60		rts				rts
.84ac					_MantissaSignDifferent:
.84ac	98		tya				tya
.84ad	a6 14		ldx $14				ldx tmp1		; restore data stack index
.84af	09 01		ora #$01			ora #1
.84b1	60		rts				rts
=83					CodeLen	.var *-XtPtr1
=$84b2					Here1 = *	; remember here
>845d	53					.byte CodeLen	;patch wh_CodeLength
>84b2	46 41 6c 6c 6f 63 58		Name0:	.text "FAllocX"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=33849					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84b9	07					.byte (("FAllocX"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=94					LinkDisplacement = Nt0-WordListLink
>84ba	10					.byte WordFlags	;wh_Flags
>84bb	03					.byte 3	;wh_CodeLength
>84bc	5e					  .byte LinkDisplacement	; offset to previous nt
=$84bd					XtPtr1 ::= *
=33849					WordListLink ::= Nt0 ; remember the nt of this word for later
.84bd	86 14		stx $14		FAllocX:	stx tmp1+0	; save data stack index
.84bf	a6 4c		ldx $4c				ldx FIndex	; X= floating point stack index
.84c1	ca		dex				dex		; alloc FP stack entry
.84c2	e0 0a		cpx #$0a			cpx #FDim	; overflow or underflow?
.84c4	b0 03		bcs $84c9			bcs _err
.84c6	86 4c		stx $4c				stx FIndex
.84c8	60		rts				rts		; return X= FP stack index
.84c9	08		php		_err:		php		; save sign bit
.84ca	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.84cc	28		plp				plp		; restore sign bit
.84cd	4c 4a b4	jmp $b44a			jmp Throw_FPStack
=19					CodeLen	.var *-XtPtr1
=$84d0					Here1 = *	; remember here
>84bb	13					.byte CodeLen	;patch wh_CodeLength
>84d0	46 4d 61 78			Name0:	.text "FMax"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33876					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84d4	04					.byte (("FMax"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>84d5	10					.byte WordFlags	;wh_Flags
>84d6	03					.byte 3	;wh_CodeLength
>84d7	1b					  .byte LinkDisplacement	; offset to previous nt
=$84d8					XtPtr1 ::= *
=33876					WordListLink ::= Nt0 ; remember the nt of this word for later
.84d8	20 5f 84	jsr $845f	FMax:		jsr FCmpA
.84db	10 2c		bpl $8509			bpl FDrop
.84dd	30 44		bmi $8523			bmi FNip
=7					CodeLen	.var *-XtPtr1
=$84df					Here1 = *	; remember here
>84d6	07					.byte CodeLen	;patch wh_CodeLength
>84df	46 4d 69 6e			Name0:	.text "FMin"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33891					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84e3	c4					.byte (("FMin"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>84e4	10					.byte WordFlags	;wh_Flags
>84e5	03					.byte 3	;wh_CodeLength
>84e6	0f					  .byte LinkDisplacement	; offset to previous nt
=$84e7					XtPtr1 ::= *
=33891					WordListLink ::= Nt0 ; remember the nt of this word for later
.84e7	20 5f 84	jsr $845f	FMin:		jsr FCmpA
.84ea	30 1d		bmi $8509			bmi FDrop
.84ec	10 35		bpl $8523			bpl FNip
=7					CodeLen	.var *-XtPtr1
=$84ee					Here1 = *	; remember here
>84e5	07					.byte CodeLen	;patch wh_CodeLength
>84ee	46 44 65 70 74 68		Name0:	.text "FDepth"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33908					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84f4	06					.byte (("FDepth"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>84f5	10					.byte WordFlags	;wh_Flags
>84f6	03					.byte 3	;wh_CodeLength
>84f7	11					  .byte LinkDisplacement	; offset to previous nt
=$84f8					XtPtr1 ::= *
=33908					WordListLink ::= Nt0 ; remember the nt of this word for later
.84f8	a9 0a		lda #$0a	FDepth:		lda #FDim
.84fa	38		sec				sec
.84fb	e5 4c		sbc $4c				sbc FIndex
.84fd	4c e2 b7	jmp $b7e2			jmp PushZA
=8					CodeLen	.var *-XtPtr1
=$8500					Here1 = *	; remember here
>84f6	08					.byte CodeLen	;patch wh_CodeLength
>8500	46 44 72 6f 70			Name0:	.text "FDrop"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33925					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8505	05					.byte (("FDrop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>8506	00					.byte WordFlags	;wh_Flags
>8507	03					.byte 3	;wh_CodeLength
>8508	11					  .byte LinkDisplacement	; offset to previous nt
=$8509					XtPtr1 ::= *
=33925					WordListLink ::= Nt0 ; remember the nt of this word for later
.8509	e6 4c		inc $4c		FDrop:		inc FIndex
=2					CodeLen	.var *-XtPtr1
=$850b					Here1 = *	; remember here
>8507	02					.byte CodeLen	;patch wh_CodeLength
.850b	60		rts				rts
>850c	46 32 44 72 6f 70		Name0:	.text "F2Drop"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33938					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8512	06					.byte (("F2Drop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8513	00					.byte WordFlags	;wh_Flags
>8514	03					.byte 3	;wh_CodeLength
>8515	0d					  .byte LinkDisplacement	; offset to previous nt
=$8516					XtPtr1 ::= *
=33938					WordListLink ::= Nt0 ; remember the nt of this word for later
.8516	e6 4c		inc $4c		F2Drop:		inc FIndex
.8518	e6 4c		inc $4c				inc FIndex
=4					CodeLen	.var *-XtPtr1
=$851a					Here1 = *	; remember here
>8514	04					.byte CodeLen	;patch wh_CodeLength
.851a	60		rts				rts
>851b	46 4e 69 70			Name0:	.text "FNip"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33951					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>851f	04					.byte (("FNip"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8520	00					.byte WordFlags	;wh_Flags
>8521	03					.byte 3	;wh_CodeLength
>8522	0d					  .byte LinkDisplacement	; offset to previous nt
=$8523					XtPtr1 ::= *
=33951					WordListLink ::= Nt0 ; remember the nt of this word for later
.8523	86 14		stx $14		FNip:		stx tmp1		; save data stack index
.8525	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.8527	b5 4d		lda $4d,x			lda FSExp+0,x		; copy exponent
.8529	95 4e		sta $4e,x			sta FSExp+1,x
.852b	b5 57		lda $57,x			lda FSMant0+0,x		; copy mantissa
.852d	95 58		sta $58,x			sta FSMant0+1,x
.852f	b5 61		lda $61,x			lda FSMant1+0,x
.8531	95 62		sta $62,x			sta FSMant1+1,x
.8533	b5 6b		lda $6b,x			lda FSMant2+0,x
.8535	95 6c		sta $6c,x			sta FSMant2+1,x
.8537	b5 75		lda $75,x			lda FSMant3+0,x
.8539	95 76		sta $76,x			sta FSMant3+1,x
.853b	e6 4c		inc $4c				inc FIndex		; FDrop
.853d	a6 14		ldx $14				ldx tmp1		; restore data stack index
=28					CodeLen	.var *-XtPtr1
=$853f					Here1 = *	; remember here
>8521	1c					.byte CodeLen	;patch wh_CodeLength
.853f	60		rts				rts
>8540	46 44 75 70			Name0:	.text "FDup"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33988					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8544	04					.byte (("FDup"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>8545	00					.byte WordFlags	;wh_Flags
>8546	03					.byte 3	;wh_CodeLength
>8547	25					  .byte LinkDisplacement	; offset to previous nt
=$8548					XtPtr1 ::= *
=33988					WordListLink ::= Nt0 ; remember the nt of this word for later
.8548	20 bd 84	jsr $84bd	FDup:		jsr FAllocX		; alloc FP stack entry, X=fp stack index
.854b	b5 4e		lda $4e,x			lda FSExp+1,x		; copy exponent
.854d	95 4d		sta $4d,x			sta FSExp+0,x
.854f	b5 58		lda $58,x			lda FSMant0+1,x		; copy mantissa
.8551	95 57		sta $57,x			sta FSMant0+0,x
.8553	b5 62		lda $62,x			lda FSMant1+1,x
.8555	95 61		sta $61,x			sta FSMant1+0,x
.8557	b5 6c		lda $6c,x			lda FSMant2+1,x
.8559	95 6b		sta $6b,x			sta FSMant2+0,x
.855b	b5 76		lda $76,x			lda FSMant3+1,x
.855d	95 75		sta $75,x			sta FSMant3+0,x
.855f	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CodeLen	.var *-XtPtr1
=$8561					Here1 = *	; remember here
>8546	19					.byte CodeLen	;patch wh_CodeLength
.8561	60		rts				rts
>8562	46 4f 76 65 72			Name0:	.text "FOver"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34023					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8567	45					.byte (("FOver"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>8568	00					.byte WordFlags	;wh_Flags
>8569	03					.byte 3	;wh_CodeLength
>856a	23					  .byte LinkDisplacement	; offset to previous nt
=$856b					XtPtr1 ::= *
=34023					WordListLink ::= Nt0 ; remember the nt of this word for later
.856b	20 bd 84	jsr $84bd	FOver:		jsr FAllocX		; alloc FP stack entry, X=fp stack index
.856e	b5 4f		lda $4f,x			lda FSExp+2,x		; copy exponent
.8570	95 4d		sta $4d,x			sta FSExp+0,x
.8572	b5 59		lda $59,x			lda FSMant0+2,x		; copy mantissa
.8574	95 57		sta $57,x			sta FSMant0+0,x
.8576	b5 63		lda $63,x			lda FSMant1+2,x
.8578	95 61		sta $61,x			sta FSMant1+0,x
.857a	b5 6d		lda $6d,x			lda FSMant2+2,x
.857c	95 6b		sta $6b,x			sta FSMant2+0,x
.857e	b5 77		lda $77,x			lda FSMant3+2,x
.8580	95 75		sta $75,x			sta FSMant3+0,x
.8582	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CodeLen	.var *-XtPtr1
=$8584					Here1 = *	; remember here
>8569	19					.byte CodeLen	;patch wh_CodeLength
.8584	60		rts				rts
>8585	46 50 69 63 6b			Name0:	.text "FPick"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34058					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>858a	65					.byte (("FPick"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>858b	00					.byte WordFlags	;wh_Flags
>858c	03					.byte 3	;wh_CodeLength
>858d	23					  .byte LinkDisplacement	; offset to previous nt
=$858e					XtPtr1 ::= *
=34058					WordListLink ::= Nt0 ; remember the nt of this word for later
.858e	20 d9 b3	jsr $b3d9	FPick:		jsr PopA		; pop u (desired entry #)
.8591	18		clc		FPickA:		clc			; Y= fp stack index of [u]
.8592	65 4c		adc $4c				adc FIndex
.8594	a8		tay		FPick3:		tay
.8595	20 bd 84	jsr $84bd			jsr FAllocX		; alloc FP stack entry, X=fp stack index
.8598	b9 4d 00	lda $004d,y			lda FSExp,y		; copy exponent
.859b	95 4d		sta $4d,x			sta FSExp,x
.859d	b9 57 00	lda $0057,y			lda FSMant0,y		; copy mantissa
.85a0	95 57		sta $57,x			sta FSMant0,x
.85a2	b9 61 00	lda $0061,y			lda FSMant1,y
.85a5	95 61		sta $61,x			sta FSMant1,x
.85a7	b9 6b 00	lda $006b,y			lda FSMant2,y
.85aa	95 6b		sta $6b,x			sta FSMant2,x
.85ac	b9 75 00	lda $0075,y			lda FSMant3,y
.85af	95 75		sta $75,x			sta FSMant3,x
.85b1	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=37					CodeLen	.var *-XtPtr1
=$85b3					Here1 = *	; remember here
>858c	25					.byte CodeLen	;patch wh_CodeLength
.85b3	60		rts				rts
>85b4	46 32 44 75 70			Name0:	.text "F2Dup"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34105					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>85b9	05					.byte (("F2Dup"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=47					LinkDisplacement = Nt0-WordListLink
>85ba	10					.byte WordFlags	;wh_Flags
>85bb	03					.byte 3	;wh_CodeLength
>85bc	2f					  .byte LinkDisplacement	; offset to previous nt
=$85bd					XtPtr1 ::= *
=34105					WordListLink ::= Nt0 ; remember the nt of this word for later
.85bd	20 6b 85	jsr $856b	F2Dup:		jsr FOver
.85c0	4c 6b 85	jmp $856b			jmp FOver
=6					CodeLen	.var *-XtPtr1
=$85c3					Here1 = *	; remember here
>85bb	06					.byte CodeLen	;patch wh_CodeLength
>85c3	46 53 77 61 70			Name0:	.text "FSwap"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34120					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>85c8	05					.byte (("FSwap"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>85c9	00					.byte WordFlags	;wh_Flags
>85ca	03					.byte 3	;wh_CodeLength
>85cb	0f					  .byte LinkDisplacement	; offset to previous nt
=$85cc					XtPtr1 ::= *
=34120					WordListLink ::= Nt0 ; remember the nt of this word for later
.85cc	86 14		stx $14		FSwap:		stx tmp1+0		; save data stack index
.85ce	a6 4c		ldx $4c				ldx FIndex		; X=FP stack index
.85d0	b5 4d		lda $4d,x			lda FSExp+0,x		; do FSExp
.85d2	b4 4e		ldy $4e,x			ldy FSExp+1,x
.85d4	95 4e		sta $4e,x			sta FSExp+1,x
.85d6	94 4d		sty $4d,x			sty FSExp+0,x
.85d8	b5 57		lda $57,x			lda FSMant0+0,x		; do FSMant0
.85da	b4 58		ldy $58,x			ldy FSMant0+1,x
.85dc	95 58		sta $58,x			sta FSMant0+1,x
.85de	94 57		sty $57,x			sty FSMant0+0,x
.85e0	b5 61		lda $61,x			lda FSMant1+0,x		; do FSMant1
.85e2	b4 62		ldy $62,x			ldy FSMant1+1,x
.85e4	95 62		sta $62,x			sta FSMant1+1,x
.85e6	94 61		sty $61,x			sty FSMant1+0,x
.85e8	b5 6b		lda $6b,x			lda FSMant2+0,x		; do FSMant2
.85ea	b4 6c		ldy $6c,x			ldy FSMant2+1,x
.85ec	95 6c		sta $6c,x			sta FSMant2+1,x
.85ee	94 6b		sty $6b,x			sty FSMant2+0,x
.85f0	b5 75		lda $75,x			lda FSMant3+0,x		; do FSMant3
.85f2	b4 76		ldy $76,x			ldy FSMant3+1,x
.85f4	95 76		sta $76,x			sta FSMant3+1,x
.85f6	94 75		sty $75,x			sty FSMant3+0,x
.85f8	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=46					CodeLen	.var *-XtPtr1
=$85fa					Here1 = *	; remember here
>85ca	2e					.byte CodeLen	;patch wh_CodeLength
.85fa	60		rts				rts
>85fb	46 54 75 63 6b			Name0:	.text "FTuck"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34176					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8600	65					.byte (("FTuck"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>8601	10					.byte WordFlags	;wh_Flags
>8602	03					.byte 3	;wh_CodeLength
>8603	38					  .byte LinkDisplacement	; offset to previous nt
=$8604					XtPtr1 ::= *
=34176					WordListLink ::= Nt0 ; remember the nt of this word for later
.8604	20 cc 85	jsr $85cc	FTuck:		jsr FSwap
.8607	4c 6b 85	jmp $856b			jmp FOver
=6					CodeLen	.var *-XtPtr1
=$860a					Here1 = *	; remember here
>8602	06					.byte CodeLen	;patch wh_CodeLength
>860a	46 52 6f 74			Name0:	.text "FRot"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34190					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>860e	84					.byte (("FRot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>860f	00					.byte WordFlags	;wh_Flags
>8610	03					.byte 3	;wh_CodeLength
>8611	0e					  .byte LinkDisplacement	; offset to previous nt
=$8612					XtPtr1 ::= *
=34190					WordListLink ::= Nt0 ; remember the nt of this word for later
.8612	86 14		stx $14		FRot:		stx tmp1		; save data stack index
.8614	a5 4c		lda $4c				lda FIndex		; for FSMant3, FSMant2, FSMant1, FSMant0, FSExp
.8616	18		clc				clc
.8617	69 28		adc #$28			adc #4*FDim
.8619	d0 03		bne $861e			bne _3
.861b	8a		txa		_2:		txa			;    next byte
.861c	e9 0a		sbc #$0a			sbc #FDim
.861e	aa		tax		_3:		tax
.861f	b5 4f		lda $4f,x			lda FSExp+2,x		;   do a byte
.8621	b4 4e		ldy $4e,x			ldy FSExp+1,x
.8623	94 4f		sty $4f,x			sty FSExp+2,x
.8625	b4 4d		ldy $4d,x			ldy FSExp+0,x
.8627	94 4e		sty $4e,x			sty FSExp+1,x
.8629	95 4d		sta $4d,x			sta FSExp+0,x
.862b	e4 4c		cpx $4c				cpx FIndex		; done?
.862d	d0 ec		bne $861b			bne _2
.862f	a6 14		ldx $14				ldx tmp1		; restore param stack index
=31					CodeLen	.var *-XtPtr1
=$8631					Here1 = *	; remember here
>8610	1f					.byte CodeLen	;patch wh_CodeLength
.8631	60		rts				rts
>8632	46 2d 52 6f 74			Name0:	.text "F-Rot"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34231					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8637	85					.byte (("F-Rot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=41					LinkDisplacement = Nt0-WordListLink
>8638	10					.byte WordFlags	;wh_Flags
>8639	03					.byte 3	;wh_CodeLength
>863a	29					  .byte LinkDisplacement	; offset to previous nt
=$863b					XtPtr1 ::= *
=34231					WordListLink ::= Nt0 ; remember the nt of this word for later
.863b	20 12 86	jsr $8612	FMRot:		jsr FRot
.863e	4c 12 86	jmp $8612			jmp FRot
=6					CodeLen	.var *-XtPtr1
=$8641					Here1 = *	; remember here
>8639	06					.byte CodeLen	;patch wh_CodeLength
>8641	46 40				Name0:	.text "F@"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34243					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8643	02					.byte (("F@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>8644	00					.byte WordFlags	;wh_Flags
>8645	03					.byte 3	;wh_CodeLength
>8646	0c					  .byte LinkDisplacement	; offset to previous nt
=$8647					XtPtr1 ::= *
=34243					WordListLink ::= Nt0 ; remember the nt of this word for later
.8647	20 f4 b3	jsr $b3f4	FAt:		jsr PopYA		; pop addr
.864a	85 16		sta $16		FAt_YA:		sta tmp2+0		; save addr
.864c	84 17		sty $17				sty tmp2+1
.864e	a0 00		ldy #$00			ldy #0			; starting offset from tmp2
.8650	20 bd 84	jsr $84bd	FAt_Tmp2Y:	jsr FAllocX		; alloc FP stack entry, X= fp stack index
.8653	b1 16		lda ($16),y			lda (tmp2),y		; copy mantissa
.8655	95 75		sta $75,x			sta FSMant3,x
.8657	c8		iny				iny
.8658	b1 16		lda ($16),y			lda (tmp2),y
.865a	95 6b		sta $6b,x			sta FSMant2,x
.865c	c8		iny				iny
.865d	b1 16		lda ($16),y			lda (tmp2),y
.865f	95 61		sta $61,x			sta FSMant1,x
.8661	c8		iny				iny
.8662	b1 16		lda ($16),y			lda (tmp2),y
.8664	95 57		sta $57,x			sta FSMant0,x
.8666	c8		iny				iny			; copy exponent
.8667	b1 16		lda ($16),y			lda (tmp2),y
.8669	95 4d		sta $4d,x			sta FSExp,x
.866b	a6 14		ldx $14				ldx tmp1		; restore data stack index
=38					CodeLen	.var *-XtPtr1
=$866d					Here1 = *	; remember here
>8645	26					.byte CodeLen	;patch wh_CodeLength
.866d	60		rts				rts
>866e	46 21				Name0:	.text "F!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34288					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8670	22					.byte (("F!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>8671	00					.byte WordFlags	;wh_Flags
>8672	03					.byte 3	;wh_CodeLength
>8673	2d					  .byte LinkDisplacement	; offset to previous nt
=$8674					XtPtr1 ::= *
=34288					WordListLink ::= Nt0 ; remember the nt of this word for later
.8674	20 f4 b3	jsr $b3f4	FStore:		jsr PopYA		; pop addr
.8677	85 14		sta $14		FStore_YA:	sta tmp1+0		; save addr
.8679	84 15		sty $15				sty tmp1+1
.867b	a0 00		ldy #$00			ldy #0
.867d	86 16		stx $16				stx tmp2		; save data stack index
.867f	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.8681	b5 75		lda $75,x			lda FSMant3,x		; copy mantissa
.8683	91 14		sta ($14),y			sta (tmp1),y
.8685	b5 6b		lda $6b,x			lda FSMant2,x
.8687	c8		iny				iny
.8688	91 14		sta ($14),y			sta (tmp1),y
.868a	b5 61		lda $61,x			lda FSMant1,x
.868c	c8		iny				iny
.868d	91 14		sta ($14),y			sta (tmp1),y
.868f	b5 57		lda $57,x			lda FSMant0,x
.8691	c8		iny				iny
.8692	91 14		sta ($14),y			sta (tmp1),y
.8694	b5 4d		lda $4d,x			lda FSExp,x		; copy exponent
.8696	c8		iny				iny
.8697	91 14		sta ($14),y			sta (tmp1),y
.8699	e6 4c		inc $4c				inc FIndex		; FDrop
.869b	a6 16		ldx $16				ldx tmp2		; restore data stack index
=41					CodeLen	.var *-XtPtr1
=$869d					Here1 = *	; remember here
>8672	29					.byte CodeLen	;patch wh_CodeLength
.869d	60		rts				rts
>869e	46 2c				Name0:	.text "F,"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34336					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86a0	82					.byte (("F,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=48					LinkDisplacement = Nt0-WordListLink
>86a1	10					.byte WordFlags	;wh_Flags
>86a2	03					.byte 3	;wh_CodeLength
>86a3	30					  .byte LinkDisplacement	; offset to previous nt
=$86a4					XtPtr1 ::= *
=34336					WordListLink ::= Nt0 ; remember the nt of this word for later
.86a4	a5 00		lda $00		FComma:		lda cp+0		; store f at Here
.86a6	a4 01		ldy $01				ldy cp+1
.86a8	20 77 86	jsr $8677			jsr FStore_YA
.86ab	a9 05		lda #$05			lda #5			; Float
.86ad	20 e2 b7	jsr $b7e2			jsr PushZA
.86b0	4c a2 c0	jmp $c0a2			jmp Allot
=15					CodeLen	.var *-XtPtr1
=$86b3					Here1 = *	; remember here
>86a2	0f					.byte CodeLen	;patch wh_CodeLength
>86b3	46 30 21			Name0:	.text "F0!"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34358					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86b6	23					.byte (("F0!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>86b7	10					.byte WordFlags	;wh_Flags
>86b8	03					.byte 3	;wh_CodeLength
>86b9	16					  .byte LinkDisplacement	; offset to previous nt
=$86ba					XtPtr1 ::= *
=34358					WordListLink ::= Nt0 ; remember the nt of this word for later
.86ba	20 a6 88	jsr $88a6	FZStore:	jsr F0
.86bd	4c 74 86	jmp $8674			jmp FStore
=6					CodeLen	.var *-XtPtr1
=$86c0					Here1 = *	; remember here
>86b8	06					.byte CodeLen	;patch wh_CodeLength
>86c0	46 30 3d			Name0:	.text "F0="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34371					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86c3	a3					.byte (("F0="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>86c4	10					.byte WordFlags	;wh_Flags
>86c5	03					.byte 3	;wh_CodeLength
>86c6	0d					  .byte LinkDisplacement	; offset to previous nt
=$86c7					XtPtr1 ::= *
=34371					WordListLink ::= Nt0 ; remember the nt of this word for later
.86c7	a4 4c		ldy $4c		FZEq:		ldy FIndex
.86c9	b9 57 00	lda $0057,y			lda FSMant0,y
.86cc	d0 24		bne $86f2			bne FFalse1
.86ce					FTrue1:
.86ce	e6 4c		inc $4c				inc FIndex	; FDrop
.86d0	4c c2 b7	jmp $b7c2			jmp True	; return true
=12					CodeLen	.var *-XtPtr1
=$86d3					Here1 = *	; remember here
>86c5	0c					.byte CodeLen	;patch wh_CodeLength
>86d3	46 30 3c 3e			Name0:	.text "F0<>"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34391					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86d7	c4					.byte (("F0<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>86d8	10					.byte WordFlags	;wh_Flags
>86d9	03					.byte 3	;wh_CodeLength
>86da	14					  .byte LinkDisplacement	; offset to previous nt
=$86db					XtPtr1 ::= *
=34391					WordListLink ::= Nt0 ; remember the nt of this word for later
.86db	a4 4c		ldy $4c		FZNe:		ldy FIndex
.86dd	b9 57 00	lda $0057,y			lda FSMant0,y
.86e0	d0 ec		bne $86ce			bne FTrue1
.86e2	f0 0e		beq $86f2			beq FFalse1
=9					CodeLen	.var *-XtPtr1
=$86e4					Here1 = *	; remember here
>86d9	09					.byte CodeLen	;patch wh_CodeLength
>86e4	46 30 3c			Name0:	.text "F0<"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34407					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86e7	83					.byte (("F0<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>86e8	10					.byte WordFlags	;wh_Flags
>86e9	03					.byte 3	;wh_CodeLength
>86ea	10					  .byte LinkDisplacement	; offset to previous nt
=$86eb					XtPtr1 ::= *
=34407					WordListLink ::= Nt0 ; remember the nt of this word for later
.86eb	a4 4c		ldy $4c		FZLt:		ldy FIndex
.86ed	b9 57 00	lda $0057,y			lda FSMant0,y
.86f0	30 dc		bmi $86ce			bmi FTrue1
.86f2					FFalse1:
.86f2	e6 4c		inc $4c				inc FIndex	; FDrop
.86f4	4c d4 b7	jmp $b7d4			jmp False	; return false
=12					CodeLen	.var *-XtPtr1
=$86f7					Here1 = *	; remember here
>86e9	0c					.byte CodeLen	;patch wh_CodeLength
>86f7	46 30 3e 3d			Name0:	.text "F0>="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34427					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86fb	a4					.byte (("F0>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>86fc	10					.byte WordFlags	;wh_Flags
>86fd	03					.byte 3	;wh_CodeLength
>86fe	14					  .byte LinkDisplacement	; offset to previous nt
=$86ff					XtPtr1 ::= *
=34427					WordListLink ::= Nt0 ; remember the nt of this word for later
.86ff	a4 4c		ldy $4c		FZGe:		ldy FIndex
.8701	b9 57 00	lda $0057,y			lda FSMant0,y
.8704	10 c8		bpl $86ce			bpl FTrue1
.8706	30 ea		bmi $86f2			bmi FFalse1
=9					CodeLen	.var *-XtPtr1
=$8708					Here1 = *	; remember here
>86fd	09					.byte CodeLen	;patch wh_CodeLength
>8708	46 30 3e			Name0:	.text "F0>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34443					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>870b	c3					.byte (("F0>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>870c	10					.byte WordFlags	;wh_Flags
>870d	03					.byte 3	;wh_CodeLength
>870e	10					  .byte LinkDisplacement	; offset to previous nt
=$870f					XtPtr1 ::= *
=34443					WordListLink ::= Nt0 ; remember the nt of this word for later
.870f	a4 4c		ldy $4c		FZGt:		ldy FIndex
.8711	b9 57 00	lda $0057,y			lda FSMant0,y
.8714	30 dc		bmi $86f2			bmi FFalse1
.8716	d0 b6		bne $86ce			bne FTrue1
.8718	f0 d8		beq $86f2			beq FFalse1
=11					CodeLen	.var *-XtPtr1
=$871a					Here1 = *	; remember here
>870d	0b					.byte CodeLen	;patch wh_CodeLength
>871a	46 30 3c 3d			Name0:	.text "F0<="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34462					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>871e	a4					.byte (("F0<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>871f	10					.byte WordFlags	;wh_Flags
>8720	03					.byte 3	;wh_CodeLength
>8721	13					  .byte LinkDisplacement	; offset to previous nt
=$8722					XtPtr1 ::= *
=34462					WordListLink ::= Nt0 ; remember the nt of this word for later
.8722	a4 4c		ldy $4c		FZLe:		ldy FIndex
.8724	b9 57 00	lda $0057,y			lda FSMant0,y
.8727	30 a5		bmi $86ce			bmi FTrue1
.8729	d0 c7		bne $86f2			bne FFalse1
.872b	f0 a1		beq $86ce			beq FTrue1
=11					CodeLen	.var *-XtPtr1
=$872d					Here1 = *	; remember here
>8720	0b					.byte CodeLen	;patch wh_CodeLength
>872d	46 3c				Name0:	.text "F<"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34479					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>872f	82					.byte (("F<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>8730	10					.byte WordFlags	;wh_Flags
>8731	03					.byte 3	;wh_CodeLength
>8732	11					  .byte LinkDisplacement	; offset to previous nt
=$8733					XtPtr1 ::= *
=34479					WordListLink ::= Nt0 ; remember the nt of this word for later
.8733	20 5f 84	jsr $845f	FLt:		jsr FCmpA
.8736	30 32		bmi $876a			bmi FTrue2
.8738					FFalse2:
.8738	e6 4c		inc $4c				inc FIndex	; FDrop
.873a	e6 4c		inc $4c				inc FIndex	; FDrop
.873c	4c d4 b7	jmp $b7d4			jmp False	; return False
=12					CodeLen	.var *-XtPtr1
=$873f					Here1 = *	; remember here
>8731	0c					.byte CodeLen	;patch wh_CodeLength
>873f	46 3e 3d			Name0:	.text "F>="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34498					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8742	a3					.byte (("F>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>8743	10					.byte WordFlags	;wh_Flags
>8744	03					.byte 3	;wh_CodeLength
>8745	13					  .byte LinkDisplacement	; offset to previous nt
=$8746					XtPtr1 ::= *
=34498					WordListLink ::= Nt0 ; remember the nt of this word for later
.8746	20 5f 84	jsr $845f	FGe:		jsr FCmpA
.8749	10 1f		bpl $876a			bpl FTrue2
.874b	30 eb		bmi $8738			bmi FFalse2
=7					CodeLen	.var *-XtPtr1
=$874d					Here1 = *	; remember here
>8744	07					.byte CodeLen	;patch wh_CodeLength
>874d	46 3e				Name0:	.text "F>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34511					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>874f	c2					.byte (("F>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8750	10					.byte WordFlags	;wh_Flags
>8751	03					.byte 3	;wh_CodeLength
>8752	0d					  .byte LinkDisplacement	; offset to previous nt
=$8753					XtPtr1 ::= *
=34511					WordListLink ::= Nt0 ; remember the nt of this word for later
.8753	20 5f 84	jsr $845f	FGt:		jsr FCmpA
.8756	30 e0		bmi $8738			bmi FFalse2
.8758	d0 10		bne $876a			bne FTrue2
.875a	f0 dc		beq $8738			beq FFalse2
=9					CodeLen	.var *-XtPtr1
=$875c					Here1 = *	; remember here
>8751	09					.byte CodeLen	;patch wh_CodeLength
>875c	46 3c 3d			Name0:	.text "F<="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34527					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>875f	a3					.byte (("F<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8760	10					.byte WordFlags	;wh_Flags
>8761	03					.byte 3	;wh_CodeLength
>8762	10					  .byte LinkDisplacement	; offset to previous nt
=$8763					XtPtr1 ::= *
=34527					WordListLink ::= Nt0 ; remember the nt of this word for later
.8763	20 5f 84	jsr $845f	FLe:		jsr FCmpA
.8766	30 02		bmi $876a			bmi FTrue2
.8768	d0 ce		bne $8738			bne FFalse2
.876a					FTrue2:
.876a	e6 4c		inc $4c				inc FIndex	; FDrop
.876c	e6 4c		inc $4c				inc FIndex	; FDrop
.876e	4c c2 b7	jmp $b7c2			jmp True	; return True
=14					CodeLen	.var *-XtPtr1
=$8771					Here1 = *	; remember here
>8761	0e					.byte CodeLen	;patch wh_CodeLength
>8771	46 3c 3e			Name0:	.text "F<>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34548					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8774	c3					.byte (("F<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>8775	10					.byte WordFlags	;wh_Flags
>8776	03					.byte 3	;wh_CodeLength
>8777	15					  .byte LinkDisplacement	; offset to previous nt
=$8778					XtPtr1 ::= *
=34548					WordListLink ::= Nt0 ; remember the nt of this word for later
.8778	20 5f 84	jsr $845f	FNe:		jsr FCmpA
.877b	d0 ed		bne $876a			bne FTrue2
.877d	f0 b9		beq $8738			beq FFalse2
=7					CodeLen	.var *-XtPtr1
=$877f					Here1 = *	; remember here
>8776	07					.byte CodeLen	;patch wh_CodeLength
>877f	46 3d				Name0:	.text "F="	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34561					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8781	a2					.byte (("F="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8782	10					.byte WordFlags	;wh_Flags
>8783	03					.byte 3	;wh_CodeLength
>8784	0d					  .byte LinkDisplacement	; offset to previous nt
=$8785					XtPtr1 ::= *
=34561					WordListLink ::= Nt0 ; remember the nt of this word for later
.8785	20 5f 84	jsr $845f	FEq:		jsr FCmpA
.8788	d0 ae		bne $8738			bne FFalse2
.878a	f0 de		beq $876a			beq FTrue2
=7					CodeLen	.var *-XtPtr1
=$878c					Here1 = *	; remember here
>8783	07					.byte CodeLen	;patch wh_CodeLength
>878c	46 7e 41 62 73			Name0:	.text "F~Abs"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34577					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8791	65					.byte (("F~Abs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8792	10					.byte WordFlags	;wh_Flags
>8793	03					.byte 3	;wh_CodeLength
>8794	10					  .byte LinkDisplacement	; offset to previous nt
=$8795					XtPtr1 ::= *
=34577					WordListLink ::= Nt0 ; remember the nt of this word for later
.8795	20 3b 86	jsr $863b	FTAbs:		jsr FMRot
.8798	20 50 8b	jsr $8b50			jsr FMinus
.879b	20 ab 8b	jsr $8bab			jsr FAbs
.879e	4c 53 87	jmp $8753			jmp FGt
=12					CodeLen	.var *-XtPtr1
=$87a1					Here1 = *	; remember here
>8793	0c					.byte CodeLen	;patch wh_CodeLength
>87a1	46 7e 52 65 6c			Name0:	.text "F~Rel"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34598					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>87a6	85					.byte (("F~Rel"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>87a7	10					.byte WordFlags	;wh_Flags
>87a8	03					.byte 3	;wh_CodeLength
>87a9	15					  .byte LinkDisplacement	; offset to previous nt
=$87aa					XtPtr1 ::= *
=34598					WordListLink ::= Nt0 ; remember the nt of this word for later
.87aa	20 6b 85	jsr $856b	FTRel:		jsr FOver
.87ad	a9 03		lda #$03			lda #3
.87af	20 91 85	jsr $8591			jsr FPickA
.87b2	20 10 8b	jsr $8b10			jsr FPlus
.87b5	20 ab 8b	jsr $8bab			jsr FAbs
.87b8	20 de 8b	jsr $8bde			jsr FStar		; r1 r2 r3*|r1+r2|
.87bb	20 3b 86	jsr $863b			jsr FMRot		; r3*|r1+r2| r1 r2
.87be	20 50 8b	jsr $8b50			jsr FMinus
.87c1	20 ab 8b	jsr $8bab			jsr FAbs
.87c4	4c 53 87	jmp $8753			jmp FGt
=29					CodeLen	.var *-XtPtr1
=$87c7					Here1 = *	; remember here
>87a8	1d					.byte CodeLen	;patch wh_CodeLength
>87c7	46 7e				Name0:	.text "F~"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34633					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>87c9	c2					.byte (("F~"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>87ca	10					.byte WordFlags	;wh_Flags
>87cb	03					.byte 3	;wh_CodeLength
>87cc	23					  .byte LinkDisplacement	; offset to previous nt
=$87cd					XtPtr1 ::= *
=34633					WordListLink ::= Nt0 ; remember the nt of this word for later
.87cd	a4 4c		ldy $4c		FTilde:		ldy FIndex
.87cf	b9 57 00	lda $0057,y			lda FSMant0,y
.87d2	30 06		bmi $87da			bmi _10			; r3<0
.87d4	d0 bf		bne $8795			bne FTAbs		; r3>0
.87d6	e6 4c		inc $4c				inc FIndex		; r3=0
.87d8	d0 ab		bne $8785			bne FEq
.87da	20 85 8b	jsr $8b85	_10:		jsr FNegate
.87dd	4c aa 87	jmp $87aa			jmp FTRel
=19					CodeLen	.var *-XtPtr1
=$87e0					Here1 = *	; remember here
>87cb	13					.byte CodeLen	;patch wh_CodeLength
>87e0	46 56 61 72 69 61 62 6c		Name0:	.text "FVariable"	;  name of word as a string, ending at wh_NameLastChar
>87e8	65
=9					NameLength = *-Name0
=34665					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>87e9	a9					.byte (("FVariable"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>87ea	18					.byte WordFlags	;wh_Flags
>87eb	03					.byte 3	;wh_CodeLength
>87ec	20					  .byte LinkDisplacement	; offset to previous nt
=$87ed					XtPtr1 ::= *
=34665					WordListLink ::= Nt0 ; remember the nt of this word for later
.87ed	20 a9 c1	jsr $c1a9	FVariable:	jsr Create		; compile word header & push PFA adr
.87f0	20 cf bb	jsr $bbcf			jsr adjust_z		; fix word code length
.87f3	20 a6 88	jsr $88a6			jsr F0			; alloc & init data
.87f6	4c a4 86	jmp $86a4			jmp FComma
=12					CodeLen	.var *-XtPtr1
=$87f9					Here1 = *	; remember here
>87eb	0c					.byte CodeLen	;patch wh_CodeLength
>87f9	46 4c 69 74 65 72 61 6c		Name0:	.text "FLiteral"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=34689					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8801	88					.byte (("FLiteral"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>8802	18					.byte WordFlags	;wh_Flags
>8803	03					.byte 3	;wh_CodeLength
>8804	18					  .byte LinkDisplacement	; offset to previous nt
=$8805					XtPtr1 ::= *
=34689					WordListLink ::= Nt0 ; remember the nt of this word for later
.8805	20 1a 88	jsr $881a	FLiteral:	jsr FLitTest
.8808	f0 0a		beq $8814			beq _Short
.880a	a9 43		lda #$43			lda #<FLitI		; compile JSR FLitI
.880c	a0 88		ldy #$88			ldy #>FLitI
.880e	20 21 cd	jsr $cd21			jsr Jsr_Comma_YA
.8811	4c a4 86	jmp $86a4			jmp FComma		; inline operand, return
.8814	20 26 88	jsr $8826	_Short:		jsr FLitShort
.8817	4c 21 cd	jmp $cd21			jmp Jsr_Comma_YA	; compile jsr FLitYA, & return
=21					CodeLen	.var *-XtPtr1
=$881a					Here1 = *	; remember here
>8803	15					.byte CodeLen	;patch wh_CodeLength
.881a					FLitTest:
.881a	a4 4c		ldy $4c				ldy FIndex
.881c	b9 61 00	lda $0061,y			lda FSMant1,y		; will short work?
.881f	19 6b 00	ora $006b,y			ora FSMant2,y
.8822	19 75 00	ora $0075,y			ora FSMant3,y
.8825	60		rts				rts
.8826					FLitShort:
.8826	a9 a9		lda #$a9			lda #$a9		; compile LDA #mant0
.8828	20 e7 cc	jsr $cce7			jsr C_Comma_A
.882b	b9 57 00	lda $0057,y			lda FSMant0,y
.882e	20 e7 cc	jsr $cce7			jsr C_Comma_A
.8831	a9 a0		lda #$a0			lda #$a0		; compile LDY #exp
.8833	20 e7 cc	jsr $cce7			jsr C_Comma_A
.8836	b9 4d 00	lda $004d,y			lda FSExp,y
.8839	20 e7 cc	jsr $cce7			jsr C_Comma_A
.883c	e6 4c		inc $4c				inc FIndex		; FDrop
.883e	a9 8d		lda #$8d			lda #<FLitYA		; point at FLitYA
.8840	a0 88		ldy #$88			ldy #>FLitYA
.8842	60		rts				rts
.8843					FLitI:
.8843	68		pla				pla			; tmp2= RTS addr
.8844	85 16		sta $16				sta tmp2+0
.8846	18		clc				clc			; bump RTS addr over inline float data
.8847	69 05		adc #$05			adc #5
.8849	a8		tay				tay
.884a	68		pla				pla
.884b	85 17		sta $17				sta tmp2+1
.884d	69 00		adc #$00			adc #0
.884f	48		pha				pha
.8850	98		tya				tya
.8851	48		pha				pha
.8852	a0 01		ldy #$01			ldy #1			; correct for RTS addr
.8854	4c 50 86	jmp $8650			jmp FAt_Tmp2Y		; fetch inline data, & return
>8857	46 43 6f 6e 73 74 61 6e		Name0:	.text "FConstant"	;  name of word as a string, ending at wh_NameLastChar
>885f	74
=9					NameLength = *-Name0
=34784					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8860	89					.byte (("FConstant"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=95					LinkDisplacement = Nt0-WordListLink
>8861	10					.byte WordFlags	;wh_Flags
>8862	03					.byte 3	;wh_CodeLength
>8863	5f					  .byte LinkDisplacement	; offset to previous nt
=$8864					XtPtr1 ::= *
=34784					WordListLink ::= Nt0 ; remember the nt of this word for later
.8864	20 fb c0	jsr $c0fb	FConstant:	jsr Header_Comma	; compile word header
.8867	20 1a 88	jsr $881a			jsr FLitTest		; will short work?
.886a	f0 0d		beq $8879			beq _Short
.886c	a9 82		lda #$82			lda #<FConstantRun	; compile call
.886e	a0 88		ldy #$88			ldy #>FConstantRun
.8870	20 21 cd	jsr $cd21			jsr Jsr_Comma_YA
.8873	20 cf bb	jsr $bbcf			jsr adjust_z
.8876	4c a4 86	jmp $86a4			jmp FComma		; inline operand, & return
.8879					_Short:
.8879	20 26 88	jsr $8826			jsr FLitShort		; compile load value
.887c	20 37 cd	jsr $cd37			jsr Jmp_Comma_YA	; compile JMP
.887f	4c cf bb	jmp $bbcf			jmp adjust_z
=30					CodeLen	.var *-XtPtr1
=$8882					Here1 = *	; remember here
>8862	1e					.byte CodeLen	;patch wh_CodeLength
.8882					FConstantRun:
.8882	68		pla				pla			; tmp2= pop RTS addr
.8883	85 16		sta $16				sta tmp2+0
.8885	68		pla				pla
.8886	85 17		sta $17				sta tmp2+1
.8888	a0 01		ldy #$01			ldy #1			; correct for RTS addr
.888a	4c 50 86	jmp $8650			jmp FAt_Tmp2Y		; fetch inline data, & return
.888d					FLitYA:
.888d	20 bd 84	jsr $84bd			jsr FAllocX		; alloc FP stack entry, X=fp stack index
.8890	94 4d		sty $4d,x			sty FSExp,x		; exp= Y
.8892	95 57		sta $57,x			sta FSMant0,x		; Mant= A,0,0,0
.8894	a9 00		lda #$00			lda #0
.8896	95 61		sta $61,x			sta FSMant1,x
.8898	95 6b		sta $6b,x			sta FSMant2,x
.889a	95 75		sta $75,x			sta FSMant3,x
.889c	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.889e	60		rts				rts
>889f	30 2e 65			Name0:	.text "0.e"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34850					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88a2	a3					.byte (("0.e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=66					LinkDisplacement = Nt0-WordListLink
>88a3	10					.byte WordFlags	;wh_Flags
>88a4	03					.byte 3	;wh_CodeLength
>88a5	42					  .byte LinkDisplacement	; offset to previous nt
=$88a6					XtPtr1 ::= *
=34850					WordListLink ::= Nt0 ; remember the nt of this word for later
.88a6	a9 00		lda #$00	F0:		lda #0
.88a8	a0 80		ldy #$80			ldy #$80
.88aa	d0 e1		bne $888d			bne FLitYA
=6					CodeLen	.var *-XtPtr1
=$88ac					Here1 = *	; remember here
>88a4	06					.byte CodeLen	;patch wh_CodeLength
>88ac	31 30 30 30 2e 65		Name0:	.text "1000.e"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=34866					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88b2	a6					.byte (("1000.e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>88b3	10					.byte WordFlags	;wh_Flags
>88b4	03					.byte 3	;wh_CodeLength
>88b5	10					  .byte LinkDisplacement	; offset to previous nt
=$88b6					XtPtr1 ::= *
=34866					WordListLink ::= Nt0 ; remember the nt of this word for later
.88b6	a9 7d		lda #$7d	F1000:		lda #$7d
.88b8	a0 0a		ldy #$0a			ldy #10
.88ba	d0 d1		bne $888d			bne FLitYA
=6					CodeLen	.var *-XtPtr1
=$88bc					Here1 = *	; remember here
>88b4	06					.byte CodeLen	;patch wh_CodeLength
>88bc	31 30 2e 65			Name0:	.text "10.e"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34880					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88c0	a4					.byte (("10.e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>88c1	10					.byte WordFlags	;wh_Flags
>88c2	03					.byte 3	;wh_CodeLength
>88c3	0e					  .byte LinkDisplacement	; offset to previous nt
=$88c4					XtPtr1 ::= *
=34880					WordListLink ::= Nt0 ; remember the nt of this word for later
.88c4	a9 50		lda #$50	F10:		lda #$50
.88c6	a0 04		ldy #$04			ldy #4
.88c8	d0 c3		bne $888d			bne FLitYA
=6					CodeLen	.var *-XtPtr1
=$88ca					Here1 = *	; remember here
>88c2	06					.byte CodeLen	;patch wh_CodeLength
>88ca	32 2e 65			Name0:	.text "2.e"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34893					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88cd	a3					.byte (("2.e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>88ce	10					.byte WordFlags	;wh_Flags
>88cf	03					.byte 3	;wh_CodeLength
>88d0	0d					  .byte LinkDisplacement	; offset to previous nt
=$88d1					XtPtr1 ::= *
=34893					WordListLink ::= Nt0 ; remember the nt of this word for later
.88d1	a9 40		lda #$40	F2:		lda #$40
.88d3	a0 02		ldy #$02			ldy #2
.88d5	d0 b6		bne $888d			bne FLitYA
=6					CodeLen	.var *-XtPtr1
=$88d7					Here1 = *	; remember here
>88cf	06					.byte CodeLen	;patch wh_CodeLength
>88d7	31 2e 65			Name0:	.text "1.e"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34906					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88da	a3					.byte (("1.e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>88db	10					.byte WordFlags	;wh_Flags
>88dc	03					.byte 3	;wh_CodeLength
>88dd	0d					  .byte LinkDisplacement	; offset to previous nt
=$88de					XtPtr1 ::= *
=34906					WordListLink ::= Nt0 ; remember the nt of this word for later
.88de	a9 40		lda #$40	F1:		lda #$40
.88e0	a0 01		ldy #$01			ldy #1
.88e2	d0 a9		bne $888d			bne FLitYA
=6					CodeLen	.var *-XtPtr1
=$88e4					Here1 = *	; remember here
>88dc	06					.byte CodeLen	;patch wh_CodeLength
>88e4	2e 31 65			Name0:	.text ".1e"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34919					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88e7	a3					.byte ((".1e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>88e8	10					.byte WordFlags	;wh_Flags
>88e9	03					.byte 3	;wh_CodeLength
>88ea	0d					  .byte LinkDisplacement	; offset to previous nt
=$88eb					XtPtr1 ::= *
=34919					WordListLink ::= Nt0 ; remember the nt of this word for later
.88eb	20 82 88	jsr $8882	F10th:		jsr FConstantRun
>88ee	67 66 66 66					.dword $66666667	; 32 bit signed binary mantissa.  $40000000 = +0.5
>88f2	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$88f3					Here1 = *	; remember here
>88e9	08					.byte CodeLen	;patch wh_CodeLength
>88f3	50 69				Name0:	.text "Pi"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34933					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88f5	22					.byte (("Pi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>88f6	10					.byte WordFlags	;wh_Flags
>88f7	03					.byte 3	;wh_CodeLength
>88f8	0e					  .byte LinkDisplacement	; offset to previous nt
=$88f9					XtPtr1 ::= *
=34933					WordListLink ::= Nt0 ; remember the nt of this word for later
.88f9	20 82 88	jsr $8882	FPi:		jsr FConstantRun
>88fc	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8900	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$8901					Here1 = *	; remember here
>88f7	08					.byte CodeLen	;patch wh_CodeLength
>8901	50 69 2f 32			Name0:	.text "Pi/2"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34949					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8905	44					.byte (("Pi/2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8906	10					.byte WordFlags	;wh_Flags
>8907	03					.byte 3	;wh_CodeLength
>8908	10					  .byte LinkDisplacement	; offset to previous nt
=$8909					XtPtr1 ::= *
=34949					WordListLink ::= Nt0 ; remember the nt of this word for later
.8909	20 82 88	jsr $8882	FPiH:		jsr FConstantRun
>890c	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8910	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$8911					Here1 = *	; remember here
>8907	08					.byte CodeLen	;patch wh_CodeLength
>8911	50 69 2f 34			Name0:	.text "Pi/4"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34965					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8915	84					.byte (("Pi/4"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8916	10					.byte WordFlags	;wh_Flags
>8917	03					.byte 3	;wh_CodeLength
>8918	10					  .byte LinkDisplacement	; offset to previous nt
=$8919					XtPtr1 ::= *
=34965					WordListLink ::= Nt0 ; remember the nt of this word for later
.8919	20 82 88	jsr $8882	FPiQ:		jsr FConstantRun
>891c	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8920	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$8921					Here1 = *	; remember here
>8917	08					.byte CodeLen	;patch wh_CodeLength
>8921	32 50 69			Name0:	.text "2Pi"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34980					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8924	23					.byte (("2Pi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>8925	10					.byte WordFlags	;wh_Flags
>8926	03					.byte 3	;wh_CodeLength
>8927	0f					  .byte LinkDisplacement	; offset to previous nt
=$8928					XtPtr1 ::= *
=34980					WordListLink ::= Nt0 ; remember the nt of this word for later
.8928	20 82 88	jsr $8882	F2Pi:		jsr FConstantRun
>892b	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>892f	03						.char 3		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$8930					Here1 = *	; remember here
>8926	08					.byte CodeLen	;patch wh_CodeLength
>8930	46 2e 45			Name0:	.text "F.E"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34995					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8933	a3					.byte (("F.E"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>8934	10					.byte WordFlags	;wh_Flags
>8935	03					.byte 3	;wh_CodeLength
>8936	0f					  .byte LinkDisplacement	; offset to previous nt
=$8937					XtPtr1 ::= *
=34995					WordListLink ::= Nt0 ; remember the nt of this word for later
.8937	20 82 88	jsr $8882	FE:		jsr FConstantRun
>893a	2c 2a fc 56					.dword $56fc2a2c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>893e	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$893f					Here1 = *	; remember here
>8935	08					.byte CodeLen	;patch wh_CodeLength
>893f	46 56 61 6c 75 65		Name0:	.text "FValue"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=35013					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8945	a6					.byte (("FValue"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>8946	18					.byte WordFlags	;wh_Flags
>8947	03					.byte 3	;wh_CodeLength
>8948	12					  .byte LinkDisplacement	; offset to previous nt
=$8949					XtPtr1 ::= *
=35013					WordListLink ::= Nt0 ; remember the nt of this word for later
.8949	20 fb c0	jsr $c0fb	FValue:		jsr Header_Comma	; compile word header
.894c	a9 59		lda #$59			lda #<FValue_runtime	; compile JSR FValue_runtime
.894e	a0 89		ldy #$89			ldy #>FValue_runtime
.8950	20 21 cd	jsr $cd21			jsr Jsr_Comma_YA
.8953	20 cf bb	jsr $bbcf			jsr adjust_z		; fix word length
.8956	4c a4 86	jmp $86a4			jmp FComma		; alloc & init value
=16					CodeLen	.var *-XtPtr1
=$8959					Here1 = *	; remember here
>8947	10					.byte CodeLen	;patch wh_CodeLength
.8959					FValue_runtime:
.8959	4c 82 88	jmp $8882			jmp FConstantRun
>895c	46 53 63 61 6c 65		Name0:	.text "FScale"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=35042					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8962	a6					.byte (("FScale"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>8963	10					.byte WordFlags	;wh_Flags
>8964	03					.byte 3	;wh_CodeLength
>8965	1d					  .byte LinkDisplacement	; offset to previous nt
=$8966					XtPtr1 ::= *
=35042					WordListLink ::= Nt0 ; remember the nt of this word for later
.8966	20 d9 b3	jsr $b3d9	FScale:		jsr PopA		; pop n
.8969	86 14		stx $14		FScaleA:	stx tmp1		; save data stack index
.896b	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.896d	b4 57		ldy $57,x			ldy FSMant0,x		; mantissa zero?
.896f	f0 07		beq $8978			beq _8
.8971	18		clc				clc
.8972	75 4d		adc $4d,x			adc FSExp,x
.8974	95 4d		sta $4d,x			sta FSExp,x
.8976	70 03		bvs $897b			bvs _overflow		; overflow or underflow?
.8978	a6 14		ldx $14		_8:		ldx tmp1		; restore data stack index
.897a	60		rts				rts
.897b					_overflow:
.897b	a6 14		ldx $14				ldx tmp1		; restore data stack index
.897d	20 54 b4	jsr $b454			jsr Throw_FpOutOfRange
=26					CodeLen	.var *-XtPtr1
=$8980					Here1 = *	; remember here
>8964	1a					.byte CodeLen	;patch wh_CodeLength
>8980	46 32 2a			Name0:	.text "F2*"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=35075					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8983	43					.byte (("F2*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>8984	10					.byte WordFlags	;wh_Flags
>8985	03					.byte 3	;wh_CodeLength
>8986	21					  .byte LinkDisplacement	; offset to previous nt
=$8987					XtPtr1 ::= *
=35075					WordListLink ::= Nt0 ; remember the nt of this word for later
.8987	a9 01		lda #$01	F2Star:		lda #1
.8989	d0 de		bne $8969			bne FScaleA
=4					CodeLen	.var *-XtPtr1
=$898b					Here1 = *	; remember here
>8985	04					.byte CodeLen	;patch wh_CodeLength
>898b	46 32 2f			Name0:	.text "F2/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=35086					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>898e	e3					.byte (("F2/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>898f	10					.byte WordFlags	;wh_Flags
>8990	03					.byte 3	;wh_CodeLength
>8991	0b					  .byte LinkDisplacement	; offset to previous nt
=$8992					XtPtr1 ::= *
=35086					WordListLink ::= Nt0 ; remember the nt of this word for later
.8992	a9 ff		lda #$ff	F2Slash:	lda #$ff
.8994	d0 d3		bne $8969			bne FScaleA
=4					CodeLen	.var *-XtPtr1
=$8996					Here1 = *	; remember here
>8990	04					.byte CodeLen	;patch wh_CodeLength
>8996	46 6c 6f 6f 72			Name0:	.text "Floor"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=35099					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>899b	45					.byte (("Floor"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>899c	10					.byte WordFlags	;wh_Flags
>899d	03					.byte 3	;wh_CodeLength
>899e	0d					  .byte LinkDisplacement	; offset to previous nt
=$899f					XtPtr1 ::= *
=35099					WordListLink ::= Nt0 ; remember the nt of this word for later
.899f	a4 4c		ldy $4c		Floor:		ldy FIndex
.89a1	b9 57 00	lda $0057,y			lda FSMant0,y		; negative?
.89a4	10 19		bpl $89bf			bpl _a
.89a6	b9 4d 00	lda $004d,y			lda FSExp,y		; > -1 ?
.89a9	10 14		bpl $89bf			bpl _a
.89ab	a9 80		lda #$80			lda #$80		; return -1
.89ad	99 57 00	sta $0057,y			sta FSMant0,y
.89b0	a9 00		lda #$00			lda #0
.89b2	99 4d 00	sta $004d,y			sta FSExp,y
.89b5	99 61 00	sta $0061,y			sta FSMant1,y
.89b8	99 6b 00	sta $006b,y			sta FSMant2,y
.89bb	99 75 00	sta $0075,y			sta FSMant3,y
.89be	60		rts				rts
.89bf	a9 1f		lda #$1f	_a:		lda #31
.89c1	20 c7 89	jsr $89c7			jsr FShiftA
.89c4	4c 8a 8a	jmp $8a8a			jmp FNormX
=40					CodeLen	.var *-XtPtr1
=$89c7					Here1 = *	; remember here
>899d	28					.byte CodeLen	;patch wh_CodeLength
.89c7	86 14		stx $14		FShiftA:	stx tmp1+0		; save data stack index
.89c9	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.89cb	a8		tay		FShiftAX:	tay			; save desired alignment
.89cc	38		sec				sec			; calc bit shift count
.89cd	f5 4d		sbc $4d,x			sbc FSExp,x
.89cf	f0 2e		beq $89ff			beq _leave
.89d1	70 1e		bvs $89f1			bvs _overflow
.89d3	30 2a		bmi $89ff			bmi _leave
.89d5	c9 20		cmp #$20			cmp #32
.89d7	b0 1a		bcs $89f3			bcs _zero
.89d9	94 4d		sty $4d,x			sty FSExp,x
.89db	a8		tay				tay
.89dc	b5 57		lda $57,x			lda FSMant0,x
.89de	c9 80		cmp #$80	_12:		cmp #$80		; mantissa >>=1
.89e0	6a		ror a				ror a
.89e1	76 61		ror $61,x			ror FSMant1,x
.89e3	76 6b		ror $6b,x			ror FSMant2,x
.89e5	76 75		ror $75,x			ror FSMant3,x
.89e7	88		dey				dey
.89e8	d0 f4		bne $89de			bne _12
.89ea	95 57		sta $57,x			sta FSMant0,x
.89ec	b4 4d		ldy $4d,x	_30:		ldy FSExp,x
.89ee	a6 4c		ldx $4c				ldx FIndex		; restore fp stack index (FShiftAX could have had a funny one)
.89f0	60		rts				rts
.89f1	10 0c		bpl $89ff	_overflow:	bpl _leave
.89f3	94 4d		sty $4d,x	_zero:		sty FSExp,x		; return zero
.89f5	a9 00		lda #$00			lda #0
.89f7	95 57		sta $57,x			sta FSMant0,x
.89f9	95 61		sta $61,x			sta FSMant1,x
.89fb	95 6b		sta $6b,x			sta FSMant2,x
.89fd	95 75		sta $75,x			sta FSMant3,x
.89ff	18		clc		_leave:		clc
.8a00	90 ea		bcc $89ec			bcc _30
>8a02	46 54 72 75 6e 63		Name0:	.text "FTrunc"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=35208					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a08	66					.byte (("FTrunc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=109					LinkDisplacement = Nt0-WordListLink
>8a09	10					.byte WordFlags	;wh_Flags
>8a0a	03					.byte 3	;wh_CodeLength
>8a0b	6d					  .byte LinkDisplacement	; offset to previous nt
=$8a0c					XtPtr1 ::= *
=35208					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a0c	a4 4c		ldy $4c		FTrunc:		ldy FIndex
.8a0e	b9 57 00	lda $0057,y			lda FSMant0,y
.8a11	10 8c		bpl $899f			bpl Floor
.8a13	20 85 8b	jsr $8b85			jsr FNegate
.8a16	20 9f 89	jsr $899f			jsr Floor
.8a19	4c 85 8b	jmp $8b85			jmp FNegate
>8a1c	46 52 6f 75 6e 64		Name0:	.text "FRound"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=35234					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a22	86					.byte (("FRound"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>8a23	10					.byte WordFlags	;wh_Flags
>8a24	03					.byte 3	;wh_CodeLength
>8a25	1a					  .byte LinkDisplacement	; offset to previous nt
=$8a26					XtPtr1 ::= *
=35234					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a26	a9 1f		lda #$1f	FRound:		lda #31
.8a28	20 c7 89	jsr $89c7			jsr FShiftA
.8a2b	90 05		bcc $8a32			bcc _15
.8a2d	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8a2f	4c 44 8b	jmp $8b44			jmp F1Plus
.8a32	4c 8a 8a	jmp $8a8a	_15:		jmp FNormX
=15					CodeLen	.var *-XtPtr1
=$8a35					Here1 = *	; remember here
>8a24	0f					.byte CodeLen	;patch wh_CodeLength
>8a35	46 49 6e 74 46 72 63		Name0:	.text "FIntFrc"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=35260					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a3c	67					.byte (("FIntFrc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>8a3d	10					.byte WordFlags	;wh_Flags
>8a3e	03					.byte 3	;wh_CodeLength
>8a3f	1a					  .byte LinkDisplacement	; offset to previous nt
=$8a40					XtPtr1 ::= *
=35260					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a40	20 48 85	jsr $8548	FIntFrc:	jsr FDup	; ( r1 r1 )
.8a43	20 9f 89	jsr $899f			jsr Floor	; ( r1 rint )
.8a46	20 04 86	jsr $8604			jsr FTuck	; ( rint r1 rint )
.8a49	20 50 8b	jsr $8b50			jsr FMinus	; ( rint rfrac )
.8a4c	4c cc 85	jmp $85cc			jmp FSwap	; ( rfrac rint )
=15					CodeLen	.var *-XtPtr1
=$8a4f					Here1 = *	; remember here
>8a3e	0f					.byte CodeLen	;patch wh_CodeLength
>8a4f	46 4d 41 6c 69 67 6e 58		Name0:	.text "FMAlignX"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=35287					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a57	08					.byte (("FMAlignX"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>8a58	10					.byte WordFlags	;wh_Flags
>8a59	03					.byte 3	;wh_CodeLength
>8a5a	1b					  .byte LinkDisplacement	; offset to previous nt
=$8a5b					XtPtr1 ::= *
=35287					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a5b	86 14		stx $14		FMAlignX:	stx tmp1+0	; save data stack index
.8a5d	a6 4c		ldx $4c				ldx FIndex	; load FP stack index
.8a5f	e0 09		cpx #$09			cpx #FDim-1	; check FP stack for >=2 entries
.8a61	b0 19		bcs $8a7c			bcs Throw_FPStack_3
.8a63	b5 4d		lda $4d,x			lda FSExp+0,x	; compare exponents
.8a65	38		sec				sec
.8a66	f5 4e		sbc $4e,x			sbc FSExp+1,x
.8a68	30 03		bmi $8a6d			bmi _1		; r1 smaller?
.8a6a	d0 08		bne $8a74			bne _2		; r2 smaller?
.8a6c	60		rts				rts
.8a6d					_1:
.8a6d	70 07		bvs $8a76			bvs _2b		; was this a big positive #?
.8a6f	b5 4e		lda $4e,x	_1b:		lda FSExp+1,x	; make r1 like r2
.8a71	4c cb 89	jmp $89cb			jmp FShiftAX
.8a74					_2:
.8a74	70 f7		bvs $8a6d			bvs _1		; was this a big negative #?
.8a76	b5 4d		lda $4d,x	_2b:		lda FSExp+0,x	; make r2 like r1
.8a78	e8		inx				inx
.8a79	4c cb 89	jmp $89cb			jmp FShiftAX
=33					CodeLen	.var *-XtPtr1
=$8a7c					Here1 = *	; remember here
>8a59	21					.byte CodeLen	;patch wh_CodeLength
.8a7c	20 4a b4	jsr $b44a	Throw_FPStack_3: jsr Throw_FPStack
>8a7f	46 4e 6f 72 6d			Name0:	.text "FNorm"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=35332					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a84	a5					.byte (("FNorm"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>8a85	10					.byte WordFlags	;wh_Flags
>8a86	03					.byte 3	;wh_CodeLength
>8a87	2d					  .byte LinkDisplacement	; offset to previous nt
=$8a88					XtPtr1 ::= *
=35332					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a88	86 14		stx $14		FNorm:		stx tmp1+0		; save data stack index
.8a8a	a6 4c		ldx $4c		FNormX:		ldx FIndex		; switch to FP stack
.8a8c	b4 4d		ldy $4d,x			ldy FSExp,x
.8a8e	b5 57		lda $57,x			lda FSMant0,x		; mantissa negative?
.8a90	30 2d		bmi $8abf			bmi _Neg
.8a92	d0 0f		bne $8aa3			bne _Pos2		; do byte shift
.8a94	20 f2 8a	jsr $8af2			jsr _ShiftB
.8a97	d0 0a		bne $8aa3			bne _Pos2
.8a99	20 f2 8a	jsr $8af2			jsr _ShiftB
.8a9c	d0 05		bne $8aa3			bne _Pos2
.8a9e	20 f2 8a	jsr $8af2			jsr _ShiftB
.8aa1	f0 43		beq $8ae6			beq _zero		; no significant bits left?
.8aa3	18		clc		_Pos2:		clc
.8aa4	30 0a		bmi $8ab0			bmi _RShft
.8aa6	88		dey		_Pos3:		dey			; do bit shift
.8aa7	16 75		asl $75,x			asl FSMant3,x
.8aa9	36 6b		rol $6b,x			rol FSMant2,x
.8aab	36 61		rol $61,x			rol FSMant1,x
.8aad	2a		rol a				rol a
.8aae	10 f6		bpl $8aa6			bpl _Pos3
.8ab0					_RShft:
.8ab0	c8		iny				iny
.8ab1	6a		ror a				ror a
.8ab2	76 61		ror $61,x			ror FSMant1,x
.8ab4	76 6b		ror $6b,x			ror FSMant2,x
.8ab6	76 75		ror $75,x			ror FSMant3,x
.8ab8					_28:
.8ab8	95 57		sta $57,x			sta FSMant0,x
.8aba	94 4d		sty $4d,x			sty FSExp,x
.8abc	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.8abe	60		rts				rts
.8abf					_Neg:
.8abf	c9 ff		cmp #$ff			cmp #$ff
.8ac1	d0 11		bne $8ad4			bne _Neg2	; do byte shift
.8ac3	20 f2 8a	jsr $8af2			jsr _ShiftB
.8ac6	c9 ff		cmp #$ff			cmp #$ff
.8ac8	d0 0a		bne $8ad4			bne _Neg2
.8aca	20 f2 8a	jsr $8af2			jsr _ShiftB
.8acd	c9 ff		cmp #$ff			cmp #$ff
.8acf	d0 03		bne $8ad4			bne _Neg2
.8ad1	20 f2 8a	jsr $8af2			jsr _ShiftB
.8ad4	c9 00		cmp #$00	_Neg2:		cmp #0
.8ad6	10 d8		bpl $8ab0			bpl _RShft
.8ad8	88		dey		_Neg3:		dey
.8ad9	16 75		asl $75,x			asl FSMant3,x
.8adb	36 6b		rol $6b,x			rol FSMant2,x
.8add	36 61		rol $61,x			rol FSMant1,x
.8adf	2a		rol a				rol a
.8ae0	30 f6		bmi $8ad8			bmi _Neg3
.8ae2	10 cc		bpl $8ab0			bpl _RShft
.8ae4	68		pla		_Zerop:		pla
.8ae5	68		pla				pla		; pop rts addr from _ShiftB
.8ae6	a9 00		lda #$00	_zero:		lda #0
.8ae8	95 75		sta $75,x			sta FSMant3,x
.8aea	95 6b		sta $6b,x			sta FSMant2,x
.8aec	95 61		sta $61,x			sta FSMant1,x
.8aee	a0 80		ldy #$80			ldy #$80
.8af0	d0 c6		bne $8ab8			bne _28
.8af2					_ShiftB:
.8af2	98		tya				tya		; exponent -= 8
.8af3	38		sec				sec
.8af4	e9 08		sbc #$08			sbc #8
.8af6	a8		tay				tay
.8af7	70 eb		bvs $8ae4			bvs _zerop	;is this useful? do we need more of them?
.8af9	b5 61		lda $61,x			lda FSMant1,x
.8afb	48		pha				pha
.8afc	b5 6b		lda $6b,x			lda FSMant2,x
.8afe	95 61		sta $61,x			sta FSMant1,x
.8b00	b5 75		lda $75,x			lda FSMant3,x
.8b02	95 6b		sta $6b,x			sta FSMant2,x
.8b04	a9 00		lda #$00			lda #0
.8b06	95 75		sta $75,x			sta FSMant3,x
.8b08	68		pla				pla
.8b09	60		rts				rts
=130					CodeLen	.var *-XtPtr1
=$8b0a					Here1 = *	; remember here
>8a86	82					.byte CodeLen	;patch wh_CodeLength
>8b0a	46 2b				Name0:	.text "F+"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=35468					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b0c	62					.byte (("F+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=136					LinkDisplacement = Nt0-WordListLink
>8b0d	10					.byte WordFlags	;wh_Flags
>8b0e	03					.byte 3	;wh_CodeLength
>8b0f	88					  .byte LinkDisplacement	; offset to previous nt
=$8b10					XtPtr1 ::= *
=35468					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b10	20 5b 8a	jsr $8a5b	FPlus:		jsr FMAlignX	; align mantissas, X= fp stack index
.8b13	18		clc				clc		; add mantissas
.8b14	b5 76		lda $76,x			lda FSMant3+1,x
.8b16	75 75		adc $75,x			adc FSMant3+0,x
.8b18	95 76		sta $76,x			sta FSMant3+1,x
.8b1a	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b1c	75 6b		adc $6b,x			adc FSMant2+0,x
.8b1e	95 6c		sta $6c,x			sta FSMant2+1,x
.8b20	b5 62		lda $62,x			lda FSMant1+1,x
.8b22	75 61		adc $61,x			adc FSMant1+0,x
.8b24	95 62		sta $62,x			sta FSMant1+1,x
.8b26	b5 58		lda $58,x			lda FSMant0+1,x
.8b28	75 57		adc $57,x			adc FSMant0+0,x
.8b2a					FPlusFin:
.8b2a	e8		inx				inx		; FDrop r2
.8b2b	86 4c		stx $4c				stx FIndex
.8b2d	50 09		bvc $8b38	FPlusFin3:	bvc _19		; if overflow
.8b2f	6a		ror a				ror a		;   shift mantissa right 1 bit
.8b30	76 61		ror $61,x			ror FSMant1,x
.8b32	76 6b		ror $6b,x			ror FSMant2,x
.8b34	76 75		ror $75,x			ror FSMant3,x
.8b36	f6 4d		inc $4d,x			inc FSExp,x	;   adjust exponent
.8b38					_19:
.8b38	95 57		sta $57,x			sta FSMant0,x
.8b3a	4c 8a 8a	jmp $8a8a			jmp FNormX	; normalize, return
=45					CodeLen	.var *-XtPtr1
=$8b3d					Here1 = *	; remember here
>8b0e	2d					.byte CodeLen	;patch wh_CodeLength
>8b3d	46 31 2b			Name0:	.text "F1+"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=35520					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b40	63					.byte (("F1+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>8b41	10					.byte WordFlags	;wh_Flags
>8b42	03					.byte 3	;wh_CodeLength
>8b43	34					  .byte LinkDisplacement	; offset to previous nt
=$8b44					XtPtr1 ::= *
=35520					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b44	20 de 88	jsr $88de	F1Plus:		jsr F1
.8b47	4c 10 8b	jmp $8b10			jmp FPlus
=6					CodeLen	.var *-XtPtr1
=$8b4a					Here1 = *	; remember here
>8b42	06					.byte CodeLen	;patch wh_CodeLength
>8b4a	46 2d				Name0:	.text "F-"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=35532					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b4c	a2					.byte (("F-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>8b4d	10					.byte WordFlags	;wh_Flags
>8b4e	03					.byte 3	;wh_CodeLength
>8b4f	0c					  .byte LinkDisplacement	; offset to previous nt
=$8b50					XtPtr1 ::= *
=35532					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b50	20 5b 8a	jsr $8a5b	FMinus:		jsr FMAlignX	; align mantissas
.8b53	38		sec				sec		; subtract mantissas
.8b54	b5 76		lda $76,x			lda FSMant3+1,x
.8b56	f5 75		sbc $75,x			sbc FSMant3+0,x
.8b58	95 76		sta $76,x			sta FSMant3+1,x
.8b5a	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b5c	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8b5e	95 6c		sta $6c,x			sta FSMant2+1,x
.8b60	b5 62		lda $62,x			lda FSMant1+1,x
.8b62	f5 61		sbc $61,x			sbc FSMant1+0,x
.8b64	95 62		sta $62,x			sta FSMant1+1,x
.8b66	b5 58		lda $58,x			lda FSMant0+1,x
.8b68	f5 57		sbc $57,x			sbc FSMant0+0,x
.8b6a	4c 2a 8b	jmp $8b2a			jmp FPlusFin
=29					CodeLen	.var *-XtPtr1
=$8b6d					Here1 = *	; remember here
>8b4e	1d					.byte CodeLen	;patch wh_CodeLength
>8b6d	46 31 2d			Name0:	.text "F1-"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=35568					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b70	a3					.byte (("F1-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>8b71	10					.byte WordFlags	;wh_Flags
>8b72	03					.byte 3	;wh_CodeLength
>8b73	24					  .byte LinkDisplacement	; offset to previous nt
=$8b74					XtPtr1 ::= *
=35568					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b74	20 de 88	jsr $88de	F1Minus:	jsr F1
.8b77	4c 50 8b	jmp $8b50			jmp FMinus
=6					CodeLen	.var *-XtPtr1
=$8b7a					Here1 = *	; remember here
>8b72	06					.byte CodeLen	;patch wh_CodeLength
>8b7a	46 4e 65 67 61 74 65		Name0:	.text "FNegate"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=35585					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b81	a7					.byte (("FNegate"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>8b82	10					.byte WordFlags	;wh_Flags
>8b83	03					.byte 3	;wh_CodeLength
>8b84	11					  .byte LinkDisplacement	; offset to previous nt
=$8b85					XtPtr1 ::= *
=35585					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b85	86 14		stx $14		FNegate:	stx tmp1	; save data stack index
.8b87	a6 4c		ldx $4c				ldx FIndex	; X= FP stack index
.8b89	38		sec				sec		; mantissa = 0 - mantissa
.8b8a	a9 00		lda #$00			lda #0
.8b8c	f5 75		sbc $75,x			sbc FSMant3,x
.8b8e	95 75		sta $75,x			sta FSMant3,x
.8b90	a9 00		lda #$00			lda #0
.8b92	f5 6b		sbc $6b,x			sbc FSMant2,x
.8b94	95 6b		sta $6b,x			sta FSMant2,x
.8b96	a9 00		lda #$00			lda #0
.8b98	f5 61		sbc $61,x			sbc FSMant1,x
.8b9a	95 61		sta $61,x			sta FSMant1,x
.8b9c	a9 00		lda #$00			lda #0
.8b9e	f5 57		sbc $57,x			sbc FSMant0,x
.8ba0	4c 2d 8b	jmp $8b2d			jmp FPlusFin3	; finish up, return
=30					CodeLen	.var *-XtPtr1
=$8ba3					Here1 = *	; remember here
>8b83	1e					.byte CodeLen	;patch wh_CodeLength
>8ba3	46 41 62 73			Name0:	.text "FAbs"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=35623					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8ba7	64					.byte (("FAbs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>8ba8	10					.byte WordFlags	;wh_Flags
>8ba9	03					.byte 3	;wh_CodeLength
>8baa	26					  .byte LinkDisplacement	; offset to previous nt
=$8bab					XtPtr1 ::= *
=35623					WordListLink ::= Nt0 ; remember the nt of this word for later
.8bab	a4 4c		ldy $4c		FAbs:		ldy FIndex
.8bad	b9 57 00	lda $0057,y			lda FSMant0,y		; mantissa negative?
.8bb0	30 d3		bmi $8b85			bmi FNegate
.8bb2	60		rts				rts
=8					CodeLen	.var *-XtPtr1
=$8bb3					Here1 = *	; remember here
>8ba9	08					.byte CodeLen	;patch wh_CodeLength
.8bb3	4c 4a b4	jmp $b44a	Throw_FPStack_4: jmp Throw_FPStack
.8bb6	a4 4c		ldy $4c		FPos:		ldy FIndex		; load FP stack index
.8bb8	c0 09		cpy #$09			cpy #FDim-1		; check FP stack for 2
.8bba	b0 f7		bcs $8bb3			bcs Throw_FPStack_4
.8bbc	b9 57 00	lda $0057,y			lda FSMant0+0,y		; calc result sign
.8bbf	59 58 00	eor $0058,y			eor FSMant0+1,y
.8bc2	08		php				php
.8bc3	b9 58 00	lda $0058,y			lda FSMant0+1,y		; if NOS negative
.8bc6	10 07		bpl $8bcf			bpl +
.8bc8	e6 4c		inc $4c				inc FIndex		;   point at NOS
.8bca	20 85 8b	jsr $8b85			jsr FNegate		;   negate NOS
.8bcd	c6 4c		dec $4c				dec FIndex		;   restore fp
.8bcf					+
.8bcf	20 ab 8b	jsr $8bab			jsr FAbs		; abs TOS
.8bd2	86 14		stx $14				stx tmp1+0		; save data stack index
.8bd4	a6 4c		ldx $4c				ldx FIndex		; load FP stack index
.8bd6	28		plp				plp			; restore sign flag
.8bd7	60		rts				rts
>8bd8	46 2a				Name0:	.text "F*"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=35674					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8bda	42					.byte (("F*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=51					LinkDisplacement = Nt0-WordListLink
>8bdb	10					.byte WordFlags	;wh_Flags
>8bdc	03					.byte 3	;wh_CodeLength
>8bdd	33					  .byte LinkDisplacement	; offset to previous nt
=$8bde					XtPtr1 ::= *
=35674					WordListLink ::= Nt0 ; remember the nt of this word for later
.8bde					FStar:
.8bde	20 b6 8b	jsr $8bb6			jsr FPos		; make r1 & r2 positive,
.8be1	08		php				php			;   save r3 sign
.8be2	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8be4	38		sec				sec
.8be5	75 4e		adc $4e,x			adc FSExp+1,x
.8be7	95 4e		sta $4e,x			sta FSExp+1,x
.8be9	50 12		bvc $8bfd			bvc _49			; IfVs,
.8beb	b0 06		bcs $8bf3			bcs _zero		;   underflow?
.8bed	a6 14		ldx $14				ldx tmp1+0		;   restore data stack index
.8bef	28		plp				plp			; RDrop sign flag
.8bf0	20 54 b4	jsr $b454			jsr Throw_FpOutOfRange
.8bf3	e8		inx		_zero:		inx			; F2Drop r1 & r2
.8bf4	e8		inx				inx
.8bf5	86 4c		stx $4c				stx FIndex
.8bf7	28		plp				plp			; RDrop saved result sign
.8bf8	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8bfa	4c a6 88	jmp $88a6			jmp F0			; return zero
.8bfd					_49:
.8bfd	a9 00		lda #$00			lda #0			; tmp32= 0
.8bff	85 16		sta $16				sta tmp2+0
.8c01	85 17		sta $17				sta tmp2+1
.8c03	85 18		sta $18				sta tmp3+0
.8c05	85 19		sta $19				sta tmp3+1
.8c07	b5 76		lda $76,x			lda FSMant3+1,x
.8c09	20 38 8c	jsr $8c38			jsr _Byte		; do bytes of r1 mantissa
.8c0c	b5 6c		lda $6c,x			lda FSMant2+1,x
.8c0e	20 38 8c	jsr $8c38			jsr _Byte
.8c11	b5 62		lda $62,x			lda FSMant1+1,x
.8c13	20 38 8c	jsr $8c38			jsr _Byte
.8c16	b5 58		lda $58,x			lda FSMant0+1,x
.8c18	20 38 8c	jsr $8c38			jsr _Byte
.8c1b	a5 16		lda $16				lda tmp2+0		; r1.mant= tmp32
.8c1d	95 76		sta $76,x			sta FSMant3+1,x
.8c1f	a5 17		lda $17				lda tmp2+1
.8c21	95 6c		sta $6c,x			sta FSMant2+1,x
.8c23	a5 18		lda $18				lda tmp3+0
.8c25	95 62		sta $62,x			sta FSMant1+1,x
.8c27	a5 19		lda $19				lda tmp3+1
.8c29	95 58		sta $58,x			sta FSMant0+1,x
.8c2b	e6 4c		inc $4c				inc FIndex		; FDrop
.8c2d	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c2f	28		plp				plp			; fix result sign
.8c30	10 03		bpl $8c35			bpl +
.8c32	4c 85 8b	jmp $8b85			jmp FNegate
.8c35					+
.8c35	4c 88 8a	jmp $8a88			jmp FNorm
.8c38					_Byte:
.8c38	49 ff		eor #$ff			eor #$ff
.8c3a	85 15		sta $15				sta tmp1+1
.8c3c	a0 08		ldy #$08			ldy #8			; for each bit in byte
.8c3e	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8c40	b0 18		bcs $8c5a			bcs _b3
.8c42	a5 16		lda $16				lda tmp2+0		;     tmp32 += r2
.8c44	75 75		adc $75,x			adc FSMant3+0,x
.8c46	85 16		sta $16				sta tmp2+0
.8c48	a5 17		lda $17				lda tmp2+1
.8c4a	75 6b		adc $6b,x			adc FSMant2+0,x
.8c4c	85 17		sta $17				sta tmp2+1
.8c4e	a5 18		lda $18				lda tmp3+0
.8c50	75 61		adc $61,x			adc FSMant1+0,x
.8c52	85 18		sta $18				sta tmp3+0
.8c54	a5 19		lda $19				lda tmp3+1
.8c56	75 57		adc $57,x			adc FSMant0+0,x
.8c58	85 19		sta $19				sta tmp3+1
.8c5a	46 19		lsr $19		_b3:		lsr tmp3+1		;   tmp32 >>= 1
.8c5c	66 18		ror $18				ror tmp3+0
.8c5e	66 17		ror $17				ror tmp2+1
.8c60	66 16		ror $16				ror tmp2+0
.8c62	88		dey				dey			;  next bit
.8c63	d0 d9		bne $8c3e			bne _b1
.8c65	60		rts				rts
=136					CodeLen	.var *-XtPtr1
=$8c66					Here1 = *	; remember here
>8bdc	88					.byte CodeLen	;patch wh_CodeLength
>8c66	46 53 71 72			Name0:	.text "FSqr"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=35818					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8c6a	44					.byte (("FSqr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=144					LinkDisplacement = Nt0-WordListLink
>8c6b	10					.byte WordFlags	;wh_Flags
>8c6c	03					.byte 3	;wh_CodeLength
>8c6d	90					  .byte LinkDisplacement	; offset to previous nt
=$8c6e					XtPtr1 ::= *
=35818					WordListLink ::= Nt0 ; remember the nt of this word for later
.8c6e	20 48 85	jsr $8548	FSqr:		jsr FDup
.8c71	4c de 8b	jmp $8bde			jmp FStar
=6					CodeLen	.var *-XtPtr1
=$8c74					Here1 = *	; remember here
>8c6c	06					.byte CodeLen	;patch wh_CodeLength
>8c74	46 31 30 2a			Name0:	.text "F10*"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=35832					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8c78	44					.byte (("F10*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>8c79	10					.byte WordFlags	;wh_Flags
>8c7a	03					.byte 3	;wh_CodeLength
>8c7b	0e					  .byte LinkDisplacement	; offset to previous nt
=$8c7c					XtPtr1 ::= *
=35832					WordListLink ::= Nt0 ; remember the nt of this word for later
.8c7c	20 48 85	jsr $8548	F10Star:	jsr FDup
.8c7f	a4 4c		ldy $4c				ldy FIndex
.8c81	b9 4d 00	lda $004d,y			lda FSExp+0,y
.8c84	18		clc				clc
.8c85	69 01		adc #$01			adc #1
.8c87	99 4d 00	sta $004d,y			sta FSExp+0,y
.8c8a	18		clc				clc
.8c8b	69 02		adc #$02			adc #2
.8c8d	99 4e 00	sta $004e,y			sta FSExp+1,y
.8c90	4c 10 8b	jmp $8b10			jmp FPlus
=23					CodeLen	.var *-XtPtr1
=$8c93					Here1 = *	; remember here
>8c7a	17					.byte CodeLen	;patch wh_CodeLength
>8c93	46 2f				Name0:	.text "F/"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=35861					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8c95	e2					.byte (("F/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>8c96	10					.byte WordFlags	;wh_Flags
>8c97	03					.byte 3	;wh_CodeLength
>8c98	1d					  .byte LinkDisplacement	; offset to previous nt
=$8c99					XtPtr1 ::= *
=35861					WordListLink ::= Nt0 ; remember the nt of this word for later
.8c99	20 b6 8b	jsr $8bb6	FSlash:		jsr FPos		; make r1 & r2 positive
.8c9c	08		php				php			;   save result sign
.8c9d	b5 4e		lda $4e,x			lda FSExp+1,x		; calc exponent
.8c9f	18		clc				clc
.8ca0	69 01		adc #$01			adc #1
.8ca2	38		sec				sec
.8ca3	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8ca5	95 4e		sta $4e,x			sta FSExp+1,x
.8ca7	50 12		bvc $8cbb			bvc _49			;  IfVs
.8ca9	b0 06		bcs $8cb1			bcs _Zero		; underflow?
.8cab	28		plp				plp			; drop saved result sign
.8cac	a6 15		ldx $15				ldx tmp1+1		; restore data stack index
.8cae	20 54 b4	jsr $b454			jsr Throw_FpOutOfRange	; overflow
.8cb1	e8		inx		_Zero:		inx			; F2Drop
.8cb2	e8		inx				inx
.8cb3	86 4c		stx $4c				stx FIndex
.8cb5	28		plp				plp			; drop saved result sign
.8cb6	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8cb8	4c a6 88	jmp $88a6			jmp F0			; return 0
.8cbb					_49:
.8cbb	b5 76		lda $76,x			lda FSMant3+1,x		; tmp32 = r1
.8cbd	85 16		sta $16				sta tmp2+0
.8cbf	b5 6c		lda $6c,x			lda FSMant2+1,x
.8cc1	85 17		sta $17				sta tmp2+1
.8cc3	b5 62		lda $62,x			lda FSMant1+1,x
.8cc5	85 18		sta $18				sta tmp3+0
.8cc7	b5 58		lda $58,x			lda FSMant0+1,x
.8cc9	85 19		sta $19				sta tmp3+1
.8ccb	20 f4 8c	jsr $8cf4			jsr _Byte
.8cce	95 58		sta $58,x			sta FSMant0+1,x
.8cd0	20 f4 8c	jsr $8cf4			jsr _Byte
.8cd3	95 62		sta $62,x			sta FSMant1+1,x
.8cd5	20 f4 8c	jsr $8cf4			jsr _Byte
.8cd8	95 6c		sta $6c,x			sta FSMant2+1,x
.8cda	20 f4 8c	jsr $8cf4			jsr _Byte
.8cdd	95 76		sta $76,x			sta FSMant3+1,x
.8cdf	56 58		lsr $58,x			lsr FSMant0+1,x
.8ce1	76 62		ror $62,x			ror FSMant1+1,x
.8ce3	76 6c		ror $6c,x			ror FSMant2+1,x
.8ce5	76 76		ror $76,x			ror FSMant3+1,x
.8ce7	e6 4c		inc $4c				inc FIndex		; FDrop
.8ce9	a6 14		ldx $14				ldx tmp1+0		; restore X
.8ceb	28		plp				plp			; fix sign
.8cec	10 03		bpl $8cf1			bpl +
.8cee	20 85 8b	jsr $8b85			jsr FNegate
.8cf1	4c 88 8a	jmp $8a88	+		jmp FNorm
.8cf4					_Byte:
.8cf4	a0 08		ldy #$08			ldy #8			; for 8 bits
.8cf6					_1:
.8cf6	a5 19		lda $19				lda tmp3+1		;   if r1>=r2
.8cf8	d5 57		cmp $57,x			cmp FSMant0+0,x
.8cfa	d0 10		bne $8d0c			bne _4
.8cfc	a5 18		lda $18				lda tmp3+0
.8cfe	d5 61		cmp $61,x			cmp FSMant1+0,x
.8d00	d0 0a		bne $8d0c			bne _4
.8d02	a5 17		lda $17				lda tmp2+1
.8d04	d5 6b		cmp $6b,x			cmp FSMant2+0,x
.8d06	d0 04		bne $8d0c			bne _4
.8d08	a5 16		lda $16				lda tmp2+0
.8d0a	d5 75		cmp $75,x			cmp FSMant3+0,x
.8d0c	90 18		bcc $8d26	_4:		bcc _2
.8d0e	a5 16		lda $16				lda tmp2+0		;     tmp32 -= r2
.8d10	f5 75		sbc $75,x			sbc FSMant3+0,x
.8d12	85 16		sta $16				sta tmp2+0
.8d14	a5 17		lda $17				lda tmp2+1
.8d16	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8d18	85 17		sta $17				sta tmp2+1
.8d1a	a5 18		lda $18				lda tmp3+0
.8d1c	f5 61		sbc $61,x			sbc FSMant1+0,x
.8d1e	85 18		sta $18				sta tmp3+0
.8d20	a5 19		lda $19				lda tmp3+1
.8d22	f5 57		sbc $57,x			sbc FSMant0+0,x
.8d24	85 19		sta $19				sta tmp3+1
.8d26	26 15		rol $15		_2:		rol tmp1+1		;   accum quotient bits
.8d28	06 16		asl $16				asl tmp2+0
.8d2a	26 17		rol $17				rol tmp2+1
.8d2c	26 18		rol $18				rol tmp3+0
.8d2e	26 19		rol $19				rol tmp3+1		;   tmp32<<=1
.8d30	88		dey				dey			;  next
.8d31	d0 c3		bne $8cf6			bne _1
.8d33	a5 15		lda $15				lda tmp1+1		; return bits
.8d35	60		rts				rts
=157					CodeLen	.var *-XtPtr1
=$8d36					Here1 = *	; remember here
>8c97	9d					.byte CodeLen	;patch wh_CodeLength
>8d36	46 31 2f			Name0:	.text "F1/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36025					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8d39	e3					.byte (("F1/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=164					LinkDisplacement = Nt0-WordListLink
>8d3a	10					.byte WordFlags	;wh_Flags
>8d3b	03					.byte 3	;wh_CodeLength
>8d3c	a4					  .byte LinkDisplacement	; offset to previous nt
=$8d3d					XtPtr1 ::= *
=36025					WordListLink ::= Nt0 ; remember the nt of this word for later
.8d3d	20 de 88	jsr $88de	F1Slash:	jsr F1
.8d40	20 cc 85	jsr $85cc			jsr FSwap
.8d43	4c 99 8c	jmp $8c99			jmp FSlash
=9					CodeLen	.var *-XtPtr1
=$8d46					Here1 = *	; remember here
>8d3b	09					.byte CodeLen	;patch wh_CodeLength
>8d46	45 2a				Name0:	.text "E*"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=36040					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8d48	42					.byte (("E*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>8d49	10					.byte WordFlags	;wh_Flags
>8d4a	03					.byte 3	;wh_CodeLength
>8d4b	0f					  .byte LinkDisplacement	; offset to previous nt
=$8d4c					XtPtr1 ::= *
=36040					WordListLink ::= Nt0 ; remember the nt of this word for later
.8d4c					EStar:
.8d4c	20 b6 8b	jsr $8bb6			jsr FPos		; make r1 & r2 positive
.8d4f	08		php				php			;   remember result sign
.8d50	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8d52	38		sec				sec
.8d53	75 4e		adc $4e,x			adc FSExp+1,x
.8d55	95 4e		sta $4e,x			sta FSExp+1,x
.8d57	70 1b		bvs $8d74			bvs _ExpOvfl
.8d59	a0 00		ldy #$00			ldy #0
.8d5b	84 16		sty $16				sty tmp2+0
.8d5d	84 17		sty $17				sty tmp2+1		; zero result
.8d5f	b5 62		lda $62,x			lda FSMant1+1,x
.8d61	20 83 8d	jsr $8d83			jsr _Byte		; do FSMant1+1 byte
.8d64	b5 58		lda $58,x			lda FSMant0+1,x
.8d66	20 83 8d	jsr $8d83			jsr _Byte		; do FSMant0+1 byte
.8d69	a5 16		lda $16				lda tmp2+0		; r3 = tmp2
.8d6b	95 62		sta $62,x			sta FSMant1+1,x
.8d6d	a5 17		lda $17				lda tmp2+1
.8d6f	95 58		sta $58,x			sta FSMant0+1,x
.8d71	4c a1 8d	jmp $8da1			jmp EFix3		; finish
.8d74					_ExpOvfl:
.8d74	b0 05		bcs $8d7b			bcs _Zero		;underflow?
.8d76	a6 14		ldx $14				ldx tmp1+0		; restore X
.8d78	20 54 b4	jsr $b454			jsr Throw_FpOutOfRange	;overflow
.8d7b	a9 00		lda #$00	_Zero:		lda #0
.8d7d	95 62		sta $62,x			sta FSMant1+1,x
.8d7f	95 58		sta $58,x			sta FSMant0+1,x
.8d81	f0 1e		beq $8da1			beq EFix3
.8d83					_Byte:
.8d83	49 ff		eor #$ff			eor #$ff
.8d85	85 15		sta $15				sta tmp1+1
.8d87	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d89	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8d8b	b0 0c		bcs $8d99			bcs _b5
.8d8d	a5 16		lda $16				lda tmp2+0		;     tmp2 += r2
.8d8f	75 61		adc $61,x			adc FSMant1+0,x
.8d91	85 16		sta $16				sta tmp2+0
.8d93	a5 17		lda $17				lda tmp2+1
.8d95	75 57		adc $57,x			adc FSMant0+0,x
.8d97	85 17		sta $17				sta tmp2+1
.8d99	46 17		lsr $17		_b5:		lsr tmp2+1		;   tmp2 <<= 1
.8d9b	66 16		ror $16				ror tmp2+0
.8d9d	88		dey				dey			;  next bit
.8d9e	d0 e9		bne $8d89			bne _b1
.8da0	60		rts				rts
=85					CodeLen	.var *-XtPtr1
=$8da1					Here1 = *	; remember here
>8d4a	55					.byte CodeLen	;patch wh_CodeLength
.8da1					EFix3:
.8da1	a9 00		lda #$00			lda #0			; zero unused mantissa
.8da3	95 6c		sta $6c,x			sta FSMant2+1,x
.8da5	95 76		sta $76,x			sta FSMant3+1,x
.8da7	e6 4c		inc $4c				inc FIndex		; FDrop
.8da9	a6 14		ldx $14				ldx tmp1+0		; restore X
.8dab	28		plp				plp			;fix result sign
.8dac	10 03		bpl $8db1			bpl +
.8dae	4c 85 8b	jmp $8b85			jmp FNegate
.8db1	4c 88 8a	jmp $8a88	+		jmp FNorm
>8db4	45 53 71 72			Name0:	.text "ESqr"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=36152					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8db8	44					.byte (("ESqr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=112					LinkDisplacement = Nt0-WordListLink
>8db9	10					.byte WordFlags	;wh_Flags
>8dba	03					.byte 3	;wh_CodeLength
>8dbb	70					  .byte LinkDisplacement	; offset to previous nt
=$8dbc					XtPtr1 ::= *
=36152					WordListLink ::= Nt0 ; remember the nt of this word for later
.8dbc	20 48 85	jsr $8548	ESqr:		jsr FDup
.8dbf	4c 4c 8d	jmp $8d4c			jmp EStar
=6					CodeLen	.var *-XtPtr1
=$8dc2					Here1 = *	; remember here
>8dba	06					.byte CodeLen	;patch wh_CodeLength
>8dc2	45 2f				Name0:	.text "E/"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=36164					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8dc4	e2					.byte (("E/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>8dc5	10					.byte WordFlags	;wh_Flags
>8dc6	03					.byte 3	;wh_CodeLength
>8dc7	0c					  .byte LinkDisplacement	; offset to previous nt
=$8dc8					XtPtr1 ::= *
=36164					WordListLink ::= Nt0 ; remember the nt of this word for later
.8dc8	20 b6 8b	jsr $8bb6	ESlash:		jsr FPos	; make r1 & r2 positive
.8dcb	08		php				php		; remember result sign
.8dcc	b5 4e		lda $4e,x			lda FSExp+1,x		; calc r3 exponent
.8dce	38		sec				sec
.8dcf	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8dd1	70 17		bvs $8dea			bvs _ExpOvfl
.8dd3	18		clc				clc
.8dd4	69 01		adc #$01			adc #1
.8dd6	95 4e		sta $4e,x			sta FSExp+1,x
.8dd8	20 f0 8d	jsr $8df0			jsr _Byte		; gen quotient hi byte
.8ddb	48		pha				pha
.8ddc	20 f0 8d	jsr $8df0			jsr _Byte		; gen quotient lo byte
.8ddf	95 62		sta $62,x			sta FSMant1+1,x
.8de1	68		pla				pla
.8de2	4a		lsr a				lsr a
.8de3	95 58		sta $58,x			sta FSMant0+1,x
.8de5	76 62		ror $62,x			ror FSMant1+1,x
.8de7	4c a1 8d	jmp $8da1			jmp EFix3
.8dea					_ExpOvfl:
.8dea	28		plp				plp			; rdrop saved result sign
.8deb	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8ded	20 54 b4	jsr $b454			jsr Throw_FpOutOfRange	; overflow
.8df0					_Byte:
.8df0	a0 08		ldy #$08			ldy #8			; for 8 bits
.8df2	b5 62		lda $62,x	_b1:		lda FSMant1+1,x		;   if r1 >= r2
.8df4	d5 61		cmp $61,x			cmp FSMant1+0,x
.8df6	b5 58		lda $58,x			lda FSMant0+1,x
.8df8	f5 57		sbc $57,x			sbc FSMant0+0,x
.8dfa	90 09		bcc $8e05			bcc _b5
.8dfc	95 58		sta $58,x			sta FSMant0+1,x
.8dfe	b5 62		lda $62,x			lda FSMant1+1,x		;     r1 -= r2
.8e00	f5 61		sbc $61,x			sbc FSMant1+0,x
.8e02	95 62		sta $62,x			sta FSMant1+1,x
.8e04	38		sec				sec
.8e05					_b5:
.8e05	26 15		rol $15				rol tmp1+1		;   save quotient bit
.8e07	16 62		asl $62,x			asl FSMant1+1,x		;   r1 *= 2
.8e09	36 58		rol $58,x			rol FSMant0+1,x
.8e0b	88		dey				dey			;  next bit
.8e0c	d0 e4		bne $8df2			bne _b1
.8e0e	a5 15		lda $15				lda tmp1+1		; return bits
.8e10	60		rts				rts
=73					CodeLen	.var *-XtPtr1
=$8e11					Here1 = *	; remember here
>8dc6	49					.byte CodeLen	;patch wh_CodeLength
>8e11	45 31 2f			Name0:	.text "E1/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36244					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e14	e3					.byte (("E1/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>8e15	10					.byte WordFlags	;wh_Flags
>8e16	03					.byte 3	;wh_CodeLength
>8e17	50					  .byte LinkDisplacement	; offset to previous nt
=$8e18					XtPtr1 ::= *
=36244					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e18	20 de 88	jsr $88de	E1Slash:	jsr F1
.8e1b	20 cc 85	jsr $85cc			jsr FSwap
.8e1e	4c c8 8d	jmp $8dc8			jmp ESlash
=9					CodeLen	.var *-XtPtr1
=$8e21					Here1 = *	; remember here
>8e16	09					.byte CodeLen	;patch wh_CodeLength
>8e21	53 3e 46			Name0:	.text "S>F"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36260					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e24	c3					.byte (("S>F"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8e25	10					.byte WordFlags	;wh_Flags
>8e26	03					.byte 3	;wh_CodeLength
>8e27	10					  .byte LinkDisplacement	; offset to previous nt
=$8e28					XtPtr1 ::= *
=36260					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e28	20 f4 b3	jsr $b3f4	SToF:		jsr PopYA		; pop n
.8e2b	20 bd 84	jsr $84bd	SToFYA:		jsr FAllocX		; alloc FP stack entry
.8e2e	94 57		sty $57,x			sty FSMant0,x		; copy n to mantissa
.8e30	95 61		sta $61,x			sta FSMant1,x
.8e32	a9 00		lda #$00			lda #0			; pad mantissa
.8e34	95 6b		sta $6b,x			sta FSMant2,x
.8e36	95 75		sta $75,x			sta FSMant3,x
.8e38	a9 0f		lda #$0f			lda #15			; set exponent
.8e3a	95 4d		sta $4d,x			sta FSExp,x
.8e3c	4c 8a 8a	jmp $8a8a			jmp FNormX		; normalize, return
=23					CodeLen	.var *-XtPtr1
=$8e3f					Here1 = *	; remember here
>8e26	17					.byte CodeLen	;patch wh_CodeLength
>8e3f	44 3e 46			Name0:	.text "D>F"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36290					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e42	c3					.byte (("D>F"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>8e43	10					.byte WordFlags	;wh_Flags
>8e44	03					.byte 3	;wh_CodeLength
>8e45	1e					  .byte LinkDisplacement	; offset to previous nt
=$8e46					XtPtr1 ::= *
=36290					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e46	20 bd 84	jsr $84bd	FDToF:		jsr FAllocX		; alloc FP stack entry
.8e49	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e4b	a4 4c		ldy $4c				ldy FIndex		; Y= fp stack index
.8e4d	b5 26		lda $26,x			lda DStack+2,x		; mantissa= d
.8e4f	99 75 00	sta $0075,y			sta FSMant3,y
.8e52	b5 27		lda $27,x			lda DStack+3,x
.8e54	99 6b 00	sta $006b,y			sta FSMant2,y
.8e57	b5 24		lda $24,x			lda DStack+0,x
.8e59	99 61 00	sta $0061,y			sta FSMant1,y
.8e5c	b5 25		lda $25,x			lda DStack+1,x
.8e5e	99 57 00	sta $0057,y			sta FSMant0,y
.8e61	a9 1f		lda #$1f			lda #31			; set exponent
.8e63	99 4d 00	sta $004d,y			sta FSExp,y
.8e66	20 36 c5	jsr $c536			jsr Two_Drop
.8e69	4c 88 8a	jmp $8a88			jmp FNorm		; normalize, return
=38					CodeLen	.var *-XtPtr1
=$8e6c					Here1 = *	; remember here
>8e44	26					.byte CodeLen	;patch wh_CodeLength
>8e6c	46 3e 53			Name0:	.text "F>S"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36335					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e6f	63					.byte (("F>S"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>8e70	10					.byte WordFlags	;wh_Flags
>8e71	03					.byte 3	;wh_CodeLength
>8e72	2d					  .byte LinkDisplacement	; offset to previous nt
=$8e73					XtPtr1 ::= *
=36335					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e73	a4 4c		ldy $4c		FToS:		ldy FIndex
.8e75	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8e78	08		php				php
.8e79	10 03		bpl $8e7e			bpl +
.8e7b	20 85 8b	jsr $8b85			jsr FNegate
.8e7e					+
.8e7e	a9 0f		lda #$0f			lda #15
.8e80	20 c7 89	jsr $89c7			jsr FShiftA
.8e83	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e85	c0 10		cpy #$10			cpy #15+1		; always positive, so unsigned compare works
.8e87	b0 17		bcs $8ea0			bcs _overflow
.8e89	a4 4c		ldy $4c				ldy FIndex
.8e8b	ca		dex				dex
.8e8c	ca		dex				dex
.8e8d	b9 57 00	lda $0057,y			lda FSMant0,y
.8e90	95 25		sta $25,x			sta DStack+1,x
.8e92	b9 61 00	lda $0061,y			lda FSMant1,y
.8e95	95 24		sta $24,x			sta DStack+0,x
.8e97	e6 4c		inc $4c				inc FIndex		; FDrop
.8e99	28		plp				plp			; apply saved sign
.8e9a	30 01		bmi $8e9d			bmi +
.8e9c	60		rts				rts
.8e9d	4c aa c6	jmp $c6aa	+		jmp Negate
.8ea0	28		plp		_overflow:	plp			; RDrop saved sign
.8ea1	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8ea3	20 79 b4	jsr $b479			jsr ThrowA
=51					CodeLen	.var *-XtPtr1
=$8ea6					Here1 = *	; remember here
>8e71	33					.byte CodeLen	;patch wh_CodeLength
>8ea6	46 3e 44			Name0:	.text "F>D"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36393					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8ea9	83					.byte (("F>D"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=58					LinkDisplacement = Nt0-WordListLink
>8eaa	10					.byte WordFlags	;wh_Flags
>8eab	03					.byte 3	;wh_CodeLength
>8eac	3a					  .byte LinkDisplacement	; offset to previous nt
=$8ead					XtPtr1 ::= *
=36393					WordListLink ::= Nt0 ; remember the nt of this word for later
.8ead	a4 4c		ldy $4c		FToD:		ldy FIndex
.8eaf	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8eb2	08		php				php
.8eb3	10 03		bpl $8eb8			bpl +
.8eb5	20 85 8b	jsr $8b85			jsr FNegate
.8eb8					+
.8eb8	a9 1f		lda #$1f			lda #31
.8eba	20 c7 89	jsr $89c7			jsr FShiftA
.8ebd	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8ebf	c0 20		cpy #$20			cpy #31+1		; always positive, so unsigned compare works
.8ec1	b0 23		bcs $8ee6			bcs _overflow
.8ec3	a4 4c		ldy $4c				ldy FIndex
.8ec5	ca		dex				dex			; d= mantissa
.8ec6	ca		dex				dex
.8ec7	ca		dex				dex
.8ec8	ca		dex				dex
.8ec9	b9 57 00	lda $0057,y			lda FSMant0,y
.8ecc	95 25		sta $25,x			sta DStack+1,x
.8ece	b9 61 00	lda $0061,y			lda FSMant1,y
.8ed1	95 24		sta $24,x			sta DStack+0,x
.8ed3	b9 6b 00	lda $006b,y			lda FSMant2,y
.8ed6	95 27		sta $27,x			sta DStack+3,x
.8ed8	b9 75 00	lda $0075,y			lda FSMant3,y
.8edb	95 26		sta $26,x			sta DStack+2,x
.8edd	e6 4c		inc $4c				inc FIndex		; FDrop
.8edf	28		plp				plp			; apply saved sign
.8ee0	30 01		bmi $8ee3			bmi +
.8ee2	60		rts				rts
.8ee3	4c d9 c6	jmp $c6d9	+		jmp DNegate
.8ee6	28		plp		_overflow:	plp			; RDrop sign
.8ee7	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8ee9	20 79 b4	jsr $b479			jsr ThrowA
=63					CodeLen	.var *-XtPtr1
=$8eec					Here1 = *	; remember here
>8eab	3f					.byte CodeLen	;patch wh_CodeLength
>8eec	46 52 6e 64			Name0:	.text "FRnd"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=36464					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8ef0	84					.byte (("FRnd"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=71					LinkDisplacement = Nt0-WordListLink
>8ef1	10					.byte WordFlags	;wh_Flags
>8ef2	03					.byte 3	;wh_CodeLength
>8ef3	47					  .byte LinkDisplacement	; offset to previous nt
=$8ef4					XtPtr1 ::= *
=36464					WordListLink ::= Nt0 ; remember the nt of this word for later
.8ef4	20 f8 82	jsr $82f8	FRnd:		jsr Rand		; generate next RndState
.8ef7	20 bd 84	jsr $84bd			jsr FAllocX		; alloc FP stack entry
.8efa	4a		lsr a				lsr a			;   make positive
.8efb	95 57		sta $57,x			sta FSMant0,x
.8efd	94 61		sty $61,x			sty FSMant1,x
.8eff	ad 35 03	lda $0335			lda RndState+0
.8f02	95 6b		sta $6b,x			sta FSMant2,x
.8f04	ad 36 03	lda $0336			lda RndState+1
.8f07	95 75		sta $75,x			sta FSMant3,x
.8f09	a9 00		lda #$00			lda #0			; exponent=0
.8f0b	95 4d		sta $4d,x			sta FSExp,x
.8f0d	4c 8a 8a	jmp $8a8a			jmp FNormX		; normalize, return
=28					CodeLen	.var *-XtPtr1
=$8f10					Here1 = *	; remember here
>8ef2	1c					.byte CodeLen	;patch wh_CodeLength
>8f10	46 53 71 72 74			Name0:	.text "FSqrt"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=36501					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f15	85					.byte (("FSqrt"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>8f16	10					.byte WordFlags	;wh_Flags
>8f17	03					.byte 3	;wh_CodeLength
>8f18	25					  .byte LinkDisplacement	; offset to previous nt
=$8f19					XtPtr1 ::= *
=36501					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f19	a4 4c		ldy $4c		FSqrt:		ldy FIndex
.8f1b	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.8f1e	d0 01		bne $8f21			bne +
.8f20	60		rts				rts			;   just return the zero
.8f21					+
.8f21	20 48 85	jsr $8548			jsr FDup		; get trial value
.8f24	a4 4c		ldy $4c				ldy FIndex
.8f26	b9 4d 00	lda $004d,y			lda FSExp,y		; halve the exponent of trial value
.8f29	c9 80		cmp #$80			cmp #$80
.8f2b	6a		ror a				ror a
.8f2c	99 4d 00	sta $004d,y			sta FSExp,y
.8f2f	a9 09		lda #$09			lda #9			; for 9 iterations
.8f31	48		pha		_3:		pha
.8f32	20 bd 85	jsr $85bd			jsr F2Dup		;   calc new trial value
.8f35	20 99 8c	jsr $8c99			jsr FSlash
.8f38	20 10 8b	jsr $8b10			jsr FPlus
.8f3b	20 92 89	jsr $8992			jsr F2Slash
.8f3e	68		pla				pla			;  next
.8f3f	38		sec				sec
.8f40	e9 01		sbc #$01			sbc #1
.8f42	d0 ed		bne $8f31			bne _3
.8f44	4c 23 85	jmp $8523			jmp FNip		; return trial value
=46					CodeLen	.var *-XtPtr1
=$8f47					Here1 = *	; remember here
>8f17	2e					.byte CodeLen	;patch wh_CodeLength
>8f47	50 72 65 63 69 73 69 6f		Name0:	.text "Precision"	;  name of word as a string, ending at wh_NameLastChar
>8f4f	6e
=9					NameLength = *-Name0
=36560					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f50	c9					.byte (("Precision"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=59					LinkDisplacement = Nt0-WordListLink
>8f51	10					.byte WordFlags	;wh_Flags
>8f52	03					.byte 3	;wh_CodeLength
>8f53	3b					  .byte LinkDisplacement	; offset to previous nt
=$8f54					XtPtr1 ::= *
=36560					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f54	ad ff 02	lda $02ff	Precision:	lda PrecisionV
.8f57	4c e2 b7	jmp $b7e2			jmp PushZA
=6					CodeLen	.var *-XtPtr1
=$8f5a					Here1 = *	; remember here
>8f52	06					.byte CodeLen	;patch wh_CodeLength
.8f5a	60		rts				rts
>8f5b	53 65 74 2d 50 72 65 63		Name0:	.text "Set-Precision"	;  name of word as a string, ending at wh_NameLastChar
>8f63	69 73 69 6f 6e
=13					NameLength = *-Name0
=36584					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f68	cd					.byte (("Set-Precision"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>8f69	10					.byte WordFlags	;wh_Flags
>8f6a	03					.byte 3	;wh_CodeLength
>8f6b	18					  .byte LinkDisplacement	; offset to previous nt
=$8f6c					XtPtr1 ::= *
=36584					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f6c	20 d9 b3	jsr $b3d9			jsr PopA
.8f6f	8d ff 02	sta $02ff			sta PrecisionV
=6					CodeLen	.var *-XtPtr1
=$8f72					Here1 = *	; remember here
>8f6a	06					.byte CodeLen	;patch wh_CodeLength
.8f72	60		rts				rts
>8f73	28 46 2e 29			Name0:	.text "(F.)"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=36599					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f77	24					.byte (("(F.)"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>8f78	10					.byte WordFlags	;wh_Flags
>8f79	03					.byte 3	;wh_CodeLength
>8f7a	0f					  .byte LinkDisplacement	; offset to previous nt
=$8f7b					XtPtr1 ::= *
=36599					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f7b	20 f8 8f	jsr $8ff8	PFDot:		jsr pfcst		;start collecting chars, make r positive
.8f7e	20 84 8f	jsr $8f84			jsr PFDotSub
.8f81	4c 16 90	jmp $9016			jmp pfcen
.8f84					PFDotSub:
.8f84	20 54 8f	jsr $8f54			jsr Precision	;alloc & init work area
.8f87	20 f9 b7	jsr $b7f9			jsr One
=$27					_mantNzFound  = DStack+3	; nonzero mantissa digit processed
=$26					_NumSigDigits = DStack+2	; # of significant digits
=$24					_decimalPos   = DStack+0	; decimal point position
.8f8a	20 d8 8f	jsr $8fd8			jsr FLt10		; scale down to <10, counting exponent
.8f8d					_c:
.8f8d	b5 24		lda $24,x			lda _decimalPos,x	;  insert decimal point here?
.8f8f	d0 05		bne $8f96			bne _c2
.8f91	a9 2e		lda #$2e			lda #'.'
.8f93	20 0d 90	jsr $900d			jsr pfch
.8f96	d6 24		dec $24,x	_c2:		dec _decimalPos,x
.8f98	20 48 85	jsr $8548			jsr FDup		;  do a digit
.8f9b	20 73 8e	jsr $8e73			jsr FToS		; ( work n )
.8f9e	b5 24		lda $24,x			lda DStack+0,x
.8fa0	15 29		ora $29,x			ora _mantNzFound+2,x	;  doing significant digits?
.8fa2	95 29		sta $29,x			sta _mantNzFound+2,x
.8fa4	f0 08		beq $8fae			beq _c7
.8fa6	d6 28		dec $28,x			dec _NumSigDigits+2,x
.8fa8	10 04		bpl $8fae			bpl +
.8faa	e8		inx				inx			;    drop integer
.8fab	e8		inx				inx
.8fac	d0 17		bne $8fc5			bne _d
.8fae					+
.8fae	b5 24		lda $24,x	_c7:		lda DStack+0,x		;  store the char
.8fb0	09 30		ora #$30			ora #'0'
.8fb2	20 0d 90	jsr $900d			jsr pfch
.8fb5	20 28 8e	jsr $8e28			jsr SToF		; ( work )
.8fb8	20 50 8b	jsr $8b50			jsr FMinus
.8fbb	20 7c 8c	jsr $8c7c			jsr F10Star
.8fbe	a4 4c		ldy $4c				ldy FIndex		;  until mantissa==0
.8fc0	b9 57 00	lda $0057,y			lda FSMant0,y
.8fc3	d0 c8		bne $8f8d			bne _c
.8fc5	d6 24		dec $24,x	_d:		dec _decimalPos,x	;do trailing zeros
.8fc7	30 08		bmi $8fd1			bmi _d9
.8fc9	a9 30		lda #$30			lda #'0'
.8fcb	20 0d 90	jsr $900d			jsr pfch
.8fce	4c c5 8f	jmp $8fc5			jmp _d
.8fd1					_d9:
.8fd1	e8		inx				inx			; drop work area
.8fd2	e8		inx				inx
.8fd3	e8		inx				inx
.8fd4	e8		inx				inx
.8fd5	e6 4c		inc $4c				inc FIndex		; FDrop
.8fd7	60		rts				rts
=93					CodeLen	.var *-XtPtr1
=$8fd8					Here1 = *	; remember here
>8f79	5d					.byte CodeLen	;patch wh_CodeLength
.8fd8					FLt10:
.8fd8	a4 4c		ldy $4c		_1:		ldy FIndex		; while r >= 10
.8fda	b9 4d 00	lda $004d,y			lda FSExp,y
.8fdd	30 18		bmi $8ff7			bmi _9			;   exponent negative?
.8fdf	c9 04		cmp #$04			cmp #4
.8fe1	90 14		bcc $8ff7			bcc _9			;   < 4 ?
.8fe3	d0 07		bne $8fec			bne _2			;   > 4 ?
.8fe5	b9 57 00	lda $0057,y			lda FSMant0,y
.8fe8	c9 50		cmp #$50			cmp #$50
.8fea	90 0b		bcc $8ff7			bcc _9
.8fec	f6 24		inc $24,x	_2:		inc DStack+0,x		;   exp ++
.8fee	20 c4 88	jsr $88c4			jsr F10			;   r /= 10
.8ff1	20 99 8c	jsr $8c99			jsr FSlash
.8ff4	4c d8 8f	jmp $8fd8			jmp _1
.8ff7	60		rts		_9:		rts
.8ff8					pfcst:
.8ff8	a9 01		lda #$01			lda #1
.8ffa	8d 34 03	sta $0334			sta ToHold
.8ffd	a4 4c		ldy $4c				ldy FIndex		; if r1 negative
.8fff	b9 57 00	lda $0057,y			lda FSMant0,y
.9002	10 08		bpl $900c			bpl _19
.9004	a9 2d		lda #$2d			lda #'-'		;   append sign
.9006	20 0d 90	jsr $900d			jsr pfch
.9009	4c 85 8b	jmp $8b85			jmp FNegate		;   make positive, return
.900c	60		rts		_19:		rts
.900d					pfch:
.900d	ac 34 03	ldy $0334			ldy ToHold
.9010	91 00		sta ($00),y			sta (cp),y
.9012	ee 34 03	inc $0334			inc ToHold
.9015	60		rts				rts
.9016					pfcen:
.9016	ad 34 03	lda $0334			lda ToHold
.9019	38		sec				sec
.901a	e9 01		sbc #$01			sbc #1
.901c	a0 00		ldy #$00			ldy #0
.901e	91 00		sta ($00),y			sta (cp),y		; fill in length
.9020	4c 28 ca	jmp $ca28			jmp Here		; push start addr
.9023					pfciA:
.9023	a8		tay				tay
.9024	10 0a		bpl $9030			bpl _15			; IfMi,
.9026	49 ff		eor #$ff			eor #$ff
.9028	18		clc				clc
.9029	69 01		adc #$01			adc #1
.902b	48		pha				pha
.902c	a9 2d		lda #$2d			lda #'-'
.902e	d0 03		bne $9033			bne _19
.9030	48		pha		_15:		pha
.9031	a9 2b		lda #$2b			lda #'+'
.9033					_19:
.9033	20 0d 90	jsr $900d			jsr pfch
.9036	68		pla				pla
.9037	a0 2f		ldy #$2f			ldy #'0'-1
.9039	c8		iny		_20:		iny
.903a	38		sec				sec
.903b	e9 0a		sbc #$0a			sbc #10
.903d	b0 fa		bcs $9039			bcs _20
.903f	69 0a		adc #$0a			adc #10
.9041	48		pha				pha
.9042	98		tya				tya
.9043	20 0d 90	jsr $900d			jsr pfch
.9046	68		pla				pla
.9047	09 30		ora #$30			ora #'0'
.9049	d0 c2		bne $900d			bne pfch
>904b	46 2e				Name0:	.text "F."	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=36813					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>904d	c2					.byte (("F."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=214					LinkDisplacement = Nt0-WordListLink
>904e	10					.byte WordFlags	;wh_Flags
>904f	03					.byte 3	;wh_CodeLength
>9050	d6					  .byte LinkDisplacement	; offset to previous nt
=$9051					XtPtr1 ::= *
=36813					WordListLink ::= Nt0 ; remember the nt of this word for later
.9051	20 7b 8f	jsr $8f7b	FDot:		jsr PFDot
.9054	20 ec b1	jsr $b1ec	FDot2:		jsr Count
.9057	20 d8 cd	jsr $cdd8			jsr Type
.905a	4c cc cd	jmp $cdcc			jmp Space
=12					CodeLen	.var *-XtPtr1
=$905d					Here1 = *	; remember here
>904f	0c					.byte CodeLen	;patch wh_CodeLength
>905d	46 2e 53			Name0:	.text "F.S"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36832					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9060	63					.byte (("F.S"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>9061	10					.byte WordFlags	;wh_Flags
>9062	03					.byte 3	;wh_CodeLength
>9063	13					  .byte LinkDisplacement	; offset to previous nt
=$9064					XtPtr1 ::= *
=36832					WordListLink ::= Nt0 ; remember the nt of this word for later
.9064	a9 09		lda #$09	FDotS:		lda #FDim-1	; for each FP stack entry
.9066	d0 0b		bne $9073			bne _8
.9068	48		pha		_2:		pha
.9069	20 94 85	jsr $8594			jsr FPick3	;   print it
.906c	20 51 90	jsr $9051			jsr FDot
.906f	68		pla				pla		;  next
.9070	38		sec				sec
.9071	e9 01		sbc #$01			sbc #1
.9073	c5 4c		cmp $4c		_8:		cmp FIndex
.9075	b0 f1		bcs $9068			bcs _2
=19					CodeLen	.var *-XtPtr1
=$9077					Here1 = *	; remember here
>9062	13					.byte CodeLen	;patch wh_CodeLength
.9077	60		rts				rts
>9078	28 46 53 2e 29			Name0:	.text "(FS.)"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=36861					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>907d	25					.byte (("(FS.)"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>907e	10					.byte WordFlags	;wh_Flags
>907f	03					.byte 3	;wh_CodeLength
>9080	1d					  .byte LinkDisplacement	; offset to previous nt
=$9081					XtPtr1 ::= *
=36861					WordListLink ::= Nt0 ; remember the nt of this word for later
.9081	20 f0 b7	jsr $b7f0	PFSDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.9084	20 f8 8f	jsr $8ff8			jsr pfcst		; start collecting chars, make r positive
.9087	20 d8 8f	jsr $8fd8			jsr FLt10		; scale down to <10
.908a	a4 4c		ldy $4c		_c1:		ldy FIndex		; while r < 1
.908c	b9 57 00	lda $0057,y			lda FSMant0,y		;   mantissa == 0 ?
.908f	f0 0f		beq $90a0			beq _c9
.9091	b9 4d 00	lda $004d,y			lda FSExp,y		;   exp < 1 ?
.9094	f0 02		beq $9098			beq _c2
.9096	10 08		bpl $90a0			bpl _c9
.9098	d6 24		dec $24,x	_c2:		dec DStack+0,x		;  exp -= 1
.909a	20 7c 8c	jsr $8c7c			jsr F10Star		;  r *= 10
.909d	4c 8a 90	jmp $908a			jmp _c1
.90a0					_c9:
.90a0	20 84 8f	jsr $8f84	PFSDotM:	jsr PFDotSub		; do mantissa
.90a3	a9 45		lda #$45			lda #'E'
.90a5	20 0d 90	jsr $900d			jsr pfch		; do exponent
.90a8	b5 24		lda $24,x			lda DStack+0,x		;   _exp
.90aa	20 23 90	jsr $9023			jsr pfciA
.90ad	e8		inx				inx			; Drop work area
.90ae	e8		inx				inx
.90af	4c 16 90	jmp $9016			jmp pfcen		; finish string
=49					CodeLen	.var *-XtPtr1
=$90b2					Here1 = *	; remember here
>907f	31					.byte CodeLen	;patch wh_CodeLength
>90b2	46 53 2e			Name0:	.text "FS."	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36917					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>90b5	c3					.byte (("FS."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>90b6	10					.byte WordFlags	;wh_Flags
>90b7	03					.byte 3	;wh_CodeLength
>90b8	38					  .byte LinkDisplacement	; offset to previous nt
=$90b9					XtPtr1 ::= *
=36917					WordListLink ::= Nt0 ; remember the nt of this word for later
.90b9	20 81 90	jsr $9081	FSDot:		jsr PFSDot
.90bc	4c 54 90	jmp $9054			jmp FDot2
=6					CodeLen	.var *-XtPtr1
=$90bf					Here1 = *	; remember here
>90b7	06					.byte CodeLen	;patch wh_CodeLength
>90bf	28 46 45 2e 29			Name0:	.text "(FE.)"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=36932					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>90c4	25					.byte (("(FE.)"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>90c5	10					.byte WordFlags	;wh_Flags
>90c6	03					.byte 3	;wh_CodeLength
>90c7	0f					  .byte LinkDisplacement	; offset to previous nt
=$90c8					XtPtr1 ::= *
=36932					WordListLink ::= Nt0 ; remember the nt of this word for later
.90c8	20 f0 b7	jsr $b7f0	PFEDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.90cb	20 f8 8f	jsr $8ff8			jsr pfcst		; start collecting chars, make r positive
.90ce	a4 4c		ldy $4c		_30:		ldy FIndex		; while r < 1
.90d0	b9 57 00	lda $0057,y			lda FSMant0,y
.90d3	f0 16		beq $90eb			beq _39
.90d5	b9 4d 00	lda $004d,y			lda FSExp,y
.90d8	f0 02		beq $90dc			beq _31
.90da	10 0f		bpl $90eb			bpl _39
.90dc	d6 24		dec $24,x	_31:		dec _exp,x		;  exp -= 3
.90de	d6 24		dec $24,x			dec _exp,x
.90e0	d6 24		dec $24,x			dec _exp,x
.90e2	20 b6 88	jsr $88b6			jsr F1000		;  r *= 1000
.90e5	20 de 8b	jsr $8bde			jsr FStar
.90e8	4c ce 90	jmp $90ce			jmp _30
.90eb					_39:
.90eb	a4 4c		ldy $4c		_a:		ldy FIndex		; while r >= 1000
.90ed	b9 4d 00	lda $004d,y			lda FSExp,y
.90f0	30 1c		bmi $910e			bmi _a9			; exponent negative?
.90f2	c9 0a		cmp #$0a			cmp #10
.90f4	90 18		bcc $910e			bcc _a9			;   < 10 ?
.90f6	d0 07		bne $90ff			bne _a2			;   > 10 ?
.90f8	b9 57 00	lda $0057,y			lda FSMant0,y
.90fb	c9 7d		cmp #$7d			cmp #$7d
.90fd	90 0f		bcc $910e			bcc _a9
.90ff	f6 24		inc $24,x	_a2:		inc _exp,x		;   exp += 3
.9101	f6 24		inc $24,x			inc _exp,x
.9103	f6 24		inc $24,x			inc _exp,x
.9105	20 b6 88	jsr $88b6			jsr F1000		;   r /= 1000
.9108	20 99 8c	jsr $8c99			jsr FSlash
.910b	4c eb 90	jmp $90eb			jmp _a
.910e					_a9:
.910e	4c a0 90	jmp $90a0			jmp PFSDotM
=73					CodeLen	.var *-XtPtr1
=$9111					Here1 = *	; remember here
>90c6	49					.byte CodeLen	;patch wh_CodeLength
>9111	46 45 2e			Name0:	.text "FE."	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37012					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9114	c3					.byte (("FE."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>9115	10					.byte WordFlags	;wh_Flags
>9116	03					.byte 3	;wh_CodeLength
>9117	50					  .byte LinkDisplacement	; offset to previous nt
=$9118					XtPtr1 ::= *
=37012					WordListLink ::= Nt0 ; remember the nt of this word for later
.9118	20 c8 90	jsr $90c8	FEDot:		jsr PFEDot
.911b	4c 54 90	jmp $9054			jmp FDot2
=6					CodeLen	.var *-XtPtr1
=$911e					Here1 = *	; remember here
>9116	06					.byte CodeLen	;patch wh_CodeLength
>911e	46 22				Name0:	.text 'F"'	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=37024					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9120	42					.byte (('F"'[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>9121	18					.byte WordFlags	;wh_Flags
>9122	03					.byte 3	;wh_CodeLength
>9123	0c					  .byte LinkDisplacement	; offset to previous nt
=$9124					XtPtr1 ::= *
=37024					WordListLink ::= Nt0 ; remember the nt of this word for later
.9124	20 71 ba	jsr $ba71	FQuote:		jsr Parse_Name		; get string
.9127	20 47 91	jsr $9147			jsr ToFloat		; convert
.912a	b5 24		lda $24,x			lda DStack+0,x		; error?
.912c	f0 0a		beq $9138			beq _Err
.912e	e8		inx				inx
.912f	e8		inx				inx
.9130	a5 0a		lda $0a				lda State		; compiling?
.9132	d0 01		bne $9135			bne _compile
.9134	60		rts				rts
.9135	4c 05 88	jmp $8805	_compile:	jmp FLiteral		; compile a FP literal
.9138	a9 36		lda #$36	_Err:		lda #100+err_FPInvalidArg
.913a	20 79 b4	jsr $b479			jsr ThrowA
=25					CodeLen	.var *-XtPtr1
=$913d					Here1 = *	; remember here
>9122	19					.byte CodeLen	;patch wh_CodeLength
>913d	3e 46 6c 6f 61 74		Name0:	.text ">Float"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=37059					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9143	86					.byte ((">Float"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>9144	10					.byte WordFlags	;wh_Flags
>9145	03					.byte 3	;wh_CodeLength
>9146	23					  .byte LinkDisplacement	; offset to previous nt
=$9147					XtPtr1 ::= *
=37059					WordListLink ::= Nt0 ; remember the nt of this word for later
.9147					ToFloat:
.9147	20 f0 b7	jsr $b7f0			jsr Zero	; alloc & init workspace
.914a	20 f0 b7	jsr $b7f0			jsr Zero
.914d	20 f0 b7	jsr $b7f0			jsr Zero
=$2c					_addr		= DStack+8
=$2a					_len		= DStack+6
=$29					_mantfound 	= DStack+5		;mantissa digits found
=$28					_exponent 	= DStack+4		;exponent
=$27					_decimalPos 	= DStack+3		;decimal point position
=$26					_DecPointFound1 = DStack+2
=$25					_MantissaNegative1 = DStack+1
=$24					_ExponentNegative1 = DStack+0
.9150	20 a6 88	jsr $88a6			jsr F0			; init result
.9153	20 25 92	jsr $9225	_11:		jsr _GetChar		; get mantissa prefix
.9156	b0 57		bcs $91af			bcs _trueb ;_finishb
.9158	c9 20		cmp #$20			cmp #' '
.915a	f0 f7		beq $9153			beq _11
.915c	c9 2b		cmp #$2b			cmp #'+'
.915e	f0 06		beq $9166			beq _20
.9160	c9 2d		cmp #$2d			cmp #'-'
.9162	d0 07		bne $916b			bne _21
.9164	95 25		sta $25,x			sta _MantissaNegative1,x ; remember mantissa is negative
.9166	20 25 92	jsr $9225	_20:		jsr _GetChar		; do next mantissa digits
.9169	b0 47		bcs $91b2			bcs _finishb
.916b	c9 2e		cmp #$2e	_21:		cmp #'.'
.916d	f0 31		beq $91a0			beq _27
.916f	c9 45		cmp #$45			cmp #'E'
.9171	f0 42		beq $91b5			beq _30
.9173	c9 65		cmp #$65			cmp #'e'
.9175	f0 3e		beq $91b5			beq _30
.9177	c9 44		cmp #$44			cmp #'D'
.9179	f0 3a		beq $91b5			beq _30
.917b	c9 64		cmp #$64			cmp #'d'
.917d	f0 36		beq $91b5			beq _30
.917f	38		sec				sec			;   a digit?
.9180	e9 30		sbc #$30			sbc #'0'
.9182	90 24		bcc $91a8			bcc _fail
.9184	c9 0a		cmp #$0a			cmp #9+1
.9186	b0 20		bcs $91a8			bcs _fail
.9188	48		pha				pha			; append digit to mantissa
.9189	20 7c 8c	jsr $8c7c			jsr F10Star
.918c	68		pla				pla
.918d	a0 00		ldy #$00			ldy #0
.918f	20 2b 8e	jsr $8e2b			jsr SToFYA
.9192	20 10 8b	jsr $8b10			jsr FPlus
.9195	f6 29		inc $29,x			inc _mantfound,x	; remember we found a mantissa digit
.9197	b5 26		lda $26,x			lda _DecPointFound1,x	; if mantissa decimal point found
.9199	f0 02		beq $919d			beq +
.919b	d6 27		dec $27,x			dec _decimalPos,x	;   increment decimal point position
.919d					+
.919d	4c 66 91	jmp $9166			jmp _20
.91a0					_27:
.91a0	b4 26		ldy $26,x			ldy _DecPointFound1,x	; already have one?
.91a2	d0 04		bne $91a8			bne _fail
.91a4	95 26		sta $26,x			sta _DecPointFound1,x	; we have one now!
.91a6	f0 be		beq $9166			beq _20
.91a8					_fail:
.91a8	20 09 85	jsr $8509			jsr FDrop
.91ab	a9 00		lda #$00			lda #0			;return false
.91ad	f0 69		beq $9218			beq _return
.91af	4c 16 92	jmp $9216	_trueb:		jmp _true
.91b2	4c e3 91	jmp $91e3	_finishb:	jmp _finish
.91b5					_30:
.91b5	20 25 92	jsr $9225			jsr _GetChar
.91b8	b0 29		bcs $91e3			bcs _finish
.91ba	c9 2b		cmp #$2b			cmp #'+'
.91bc	f0 06		beq $91c4			beq _40
.91be	c9 2d		cmp #$2d			cmp #'-'
.91c0	d0 07		bne $91c9			bne _41
.91c2	95 24		sta $24,x			sta _ExponentNegative1,x ; remember exponent is negative
.91c4	20 25 92	jsr $9225	_40:		jsr _GetChar		;get exponent digits
.91c7	b0 1a		bcs $91e3			bcs _finish
.91c9	38		sec		_41:		sec			;  digit?
.91ca	e9 30		sbc #$30			sbc #'0'
.91cc	90 da		bcc $91a8			bcc _fail
.91ce	c9 0a		cmp #$0a			cmp #9+1
.91d0	b0 d6		bcs $91a8			bcs _fail
.91d2	85 14		sta $14				sta tmp1
.91d4	16 28		asl $28,x			asl _exponent,x		;  exponent *= 10
.91d6	b5 28		lda $28,x			lda _exponent,x
.91d8	0a		asl a				asl a
.91d9	0a		asl a				asl a
.91da	75 28		adc $28,x			adc _exponent,x
.91dc	65 14		adc $14				adc tmp1		;  + digit
.91de	95 28		sta $28,x			sta _exponent,x
.91e0	4c c4 91	jmp $91c4			jmp _40
.91e3					_finish:
.91e3	b5 29		lda $29,x			lda _mantfound,x	;some mantissa digits found?
.91e5	f0 c1		beq $91a8			beq _fail
.91e7	b5 24		lda $24,x			lda _ExponentNegative1,x ;apply exponent sign
.91e9	f0 07		beq $91f2			beq +
.91eb	a9 00		lda #$00			lda #0
.91ed	38		sec				sec
.91ee	f5 28		sbc $28,x			sbc _exponent,x
.91f0	95 28		sta $28,x			sta _exponent,x
.91f2					+
.91f2	b5 28		lda $28,x			lda _exponent,x		;apply decimal position to exponent
.91f4	18		clc				clc
.91f5	75 27		adc $27,x			adc _decimalPos,x
.91f7	95 28		sta $28,x			sta _exponent,x
.91f9	4c 01 92	jmp $9201			jmp _93
.91fc	20 7c 8c	jsr $8c7c	_93b:		jsr F10Star		;apply exponent to mantissa
.91ff	d6 28		dec $28,x			dec _exponent,x
.9201	f0 0a		beq $920d	_93:		beq _94
.9203	10 f7		bpl $91fc			bpl _93b
.9205	20 c4 88	jsr $88c4	_94b:		jsr F10
.9208	20 99 8c	jsr $8c99			jsr FSlash
.920b	f6 28		inc $28,x			inc _exponent,x
.920d	30 f6		bmi $9205	_94:		bmi _94b
.920f					_95:
.920f	b5 25		lda $25,x			lda _MantissaNegative1,x ;apply mantissa sign
.9211	f0 03		beq $9216			beq +
.9213	20 85 8b	jsr $8b85			jsr FNegate
.9216					+
.9216	a9 ff		lda #$ff	_true:		lda #$ff		;return true
.9218					_return:
.9218	95 2c		sta $2c,x			sta _addr+0,x		; replace _addr with flag
.921a	95 2d		sta $2d,x			sta _addr+1,x
.921c	e8		inx				inx			; Drop work
.921d	e8		inx				inx
.921e	e8		inx				inx			; 2Drop work
.921f	e8		inx				inx
.9220	e8		inx				inx
.9221	e8		inx				inx
.9222	e8		inx				inx			; Drop len
.9223	e8		inx				inx
.9224	60		rts				rts
.9225					_GetChar:
.9225	38		sec				sec
.9226	b5 2a		lda $2a,x			lda _len,x
.9228	f0 0b		beq $9235			beq _gc_rts		; if end, return C=1
.922a	d6 2a		dec $2a,x			dec _len,x
.922c	a1 2c		lda ($2c,x)			lda (_addr,x)
.922e	f6 2c		inc $2c,x			inc _addr+0,x
.9230	d0 02		bne $9234			bne +
.9232	f6 2d		inc $2d,x			inc _addr+1,x
.9234					+
.9234	18		clc				clc			; get char, return C=0
.9235	60		rts		_gc_rts:	rts
>9236	46 4b 65 79			Name0:	.text "FKey"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=37306					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>923a	24					.byte (("FKey"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=247					LinkDisplacement = Nt0-WordListLink
>923b	10					.byte WordFlags	;wh_Flags
>923c	03					.byte 3	;wh_CodeLength
>923d	f7					  .byte LinkDisplacement	; offset to previous nt
=$923e					XtPtr1 ::= *
=37306					WordListLink ::= Nt0 ; remember the nt of this word for later
.923e					FKey:
.923e	20 28 ca	jsr $ca28			jsr Here		; ( addr )
.9241	20 28 ca	jsr $ca28			jsr Here		; ( addr addr )
.9244	a9 28		lda #$28			lda #40			; ( addr addr 40 )
.9246	20 e2 b7	jsr $b7e2			jsr PushZA
.9249	20 aa c2	jsr $c2aa			jsr Accept		; ( addr len )
.924c	20 47 91	jsr $9147			jsr ToFloat		; ( true | false)
.924f	e8		inx				inx			; err?
.9250	e8		inx				inx
.9251	b5 22		lda $22,x			lda DStack-2,x
.9253	f0 01		beq $9256			beq _err
.9255	60		rts				rts
.9256	20 a7 b8	jsr $b8a7	_err:		jsr SLiteral_runtime
.9259	4c 5f 92	jmp $925f			  jmp +
>925c	20 3f 20					  .text " ? "
.925f	20 d8 cd	jsr $cdd8	+		jsr Type
.9262	4c 3e 92	jmp $923e			jmp FKey
>9265	53 46 40			Name0:	.text "SF@"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37352					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9268	03					.byte (("SF@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=46					LinkDisplacement = Nt0-WordListLink
>9269	10					.byte WordFlags	;wh_Flags
>926a	03					.byte 3	;wh_CodeLength
>926b	2e					  .byte LinkDisplacement	; offset to previous nt
=$926c					XtPtr1 ::= *
=37352					WordListLink ::= Nt0 ; remember the nt of this word for later
.926c	20 f4 b3	jsr $b3f4	SFAt:		jsr PopYA		; pop sf_addr
.926f	85 16		sta $16		SFAt_YA:	sta tmp2+0		; save sf_addr
.9271	84 17		sty $17				sty tmp2+1
.9273	20 bd 84	jsr $84bd			jsr FAllocX		; alloc FP stack entry
.9276	a0 01		ldy #$01			ldy #1			; copy exponent
.9278	b1 16		lda ($16),y			lda (tmp2),y
.927a	0a		asl a				asl a
.927b	88		dey				dey
.927c	b1 16		lda ($16),y			lda (tmp2),y
.927e	2a		rol a				rol a
.927f	38		sec				sec
.9280	e9 7e		sbc #$7e			sbc #126
.9282	95 4d		sta $4d,x			sta FSExp,x
.9284	a0 01		ldy #$01			ldy #1			; copy mantissa
.9286	b1 16		lda ($16),y			lda (tmp2),y
.9288	09 80		ora #$80			ora #$80
.928a	4a		lsr a				lsr a
.928b	95 57		sta $57,x			sta FSMant0,x
.928d	c8		iny				iny
.928e	b1 16		lda ($16),y			lda (tmp2),y
.9290	6a		ror a				ror a
.9291	95 61		sta $61,x			sta FSMant1,x
.9293	c8		iny				iny
.9294	b1 16		lda ($16),y			lda (tmp2),y
.9296	6a		ror a				ror a
.9297	95 6b		sta $6b,x			sta FSMant2,x
.9299	a9 00		lda #$00			lda #0
.929b	6a		ror a				ror a
.929c	95 75		sta $75,x			sta FSMant3,x
.929e	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.92a0	a0 00		ldy #$00			ldy #0			; get sign
.92a2	b1 16		lda ($16),y			lda (tmp2),y
.92a4	10 03		bpl $92a9			bpl +
.92a6	20 85 8b	jsr $8b85			jsr FNegate
.92a9					+
=61					CodeLen	.var *-XtPtr1
=$92a9					Here1 = *	; remember here
>926a	3d					.byte CodeLen	;patch wh_CodeLength
.92a9	60		rts				rts
>92aa	53 46 21			Name0:	.text "SF!"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37421					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>92ad	23					.byte (("SF!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=69					LinkDisplacement = Nt0-WordListLink
>92ae	10					.byte WordFlags	;wh_Flags
>92af	03					.byte 3	;wh_CodeLength
>92b0	45					  .byte LinkDisplacement	; offset to previous nt
=$92b1					XtPtr1 ::= *
=37421					WordListLink ::= Nt0 ; remember the nt of this word for later
.92b1	20 f4 b3	jsr $b3f4	SFStore:	jsr PopYA		; pop sf_addr
.92b4	85 16		sta $16		SFStore_YA:	sta tmp2+0		; save
.92b6	84 17		sty $17				sty tmp2+1
.92b8	a4 4c		ldy $4c				ldy FIndex		; negative?
.92ba	b9 57 00	lda $0057,y			lda FSMant0,y
.92bd	29 80		and #$80			and #$80		;  save sign
.92bf	85 19		sta $19				sta tmp3+1
.92c1	10 03		bpl $92c6			bpl +
.92c3	20 85 8b	jsr $8b85			jsr FNegate
.92c6					+
.92c6	86 14		stx $14				stx tmp1+0		; save data stack index
.92c8	a6 4c		ldx $4c				ldx FIndex		; switch to FP stack index
.92ca	b5 4d		lda $4d,x			lda FSExp,x		; +128
.92cc	18		clc				clc
.92cd	69 7e		adc #$7e			adc #126
.92cf	95 4d		sta $4d,x			sta FSExp,x
.92d1	16 75		asl $75,x			asl FSMant3,x
.92d3	b5 6b		lda $6b,x			lda FSMant2,x
.92d5	2a		rol a				rol a
.92d6	a0 03		ldy #$03			ldy #3			; +3 IEEE
.92d8	91 16		sta ($16),y			sta (tmp2),y
.92da	b5 61		lda $61,x			lda FSMant1,x
.92dc	2a		rol a				rol a
.92dd	88		dey				dey			; +2 IEEE
.92de	91 16		sta ($16),y			sta (tmp2),y
.92e0	b5 57		lda $57,x			lda FSMant0,x
.92e2	2a		rol a				rol a
.92e3	2a		rol a				rol a
.92e4	56 4d		lsr $4d,x			lsr FSExp,x
.92e6	6a		ror a				ror a
.92e7	88		dey				dey			; +1 IEEE
.92e8	91 16		sta ($16),y			sta (tmp2),y
.92ea	b5 4d		lda $4d,x			lda FSExp,x
.92ec	05 19		ora $19				ora tmp3+1		;  insert sign
.92ee	88		dey				dey			; +0 IEEE
.92ef	91 16		sta ($16),y			sta (tmp2),y
.92f1	e6 4c		inc $4c				inc FIndex		; FDrop
.92f3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=68					CodeLen	.var *-XtPtr1
=$92f5					Here1 = *	; remember here
>92af	44					.byte CodeLen	;patch wh_CodeLength
.92f5	60		rts				rts
>92f6	53 46 6c 6f 61 74 2b		Name0:	.text "SFloat+"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=37501					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>92fd	67					.byte (("SFloat+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>92fe	10					.byte WordFlags	;wh_Flags
>92ff	03					.byte 3	;wh_CodeLength
>9300	50					  .byte LinkDisplacement	; offset to previous nt
=$9301					XtPtr1 ::= *
=37501					WordListLink ::= Nt0 ; remember the nt of this word for later
.9301	a9 04		lda #$04	SFloatPlus:	lda #4
.9303	4c 0c ca	jmp $ca0c			jmp Plus_A
=5					CodeLen	.var *-XtPtr1
=$9306					Here1 = *	; remember here
>92ff	05					.byte CodeLen	;patch wh_CodeLength
>9306	53 46 6c 6f 61 74 73		Name0:	.text "SFloats"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=37517					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>930d	67					.byte (("SFloats"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>930e	10					.byte WordFlags	;wh_Flags
>930f	03					.byte 3	;wh_CodeLength
>9310	10					  .byte LinkDisplacement	; offset to previous nt
=$9311					XtPtr1 ::= *
=37517					WordListLink ::= Nt0 ; remember the nt of this word for later
.9311	a9 02		lda #$02	SFloats:	lda #2
.9313	4c 42 cb	jmp $cb42			jmp LShift_A
=5					CodeLen	.var *-XtPtr1
=$9316					Here1 = *	; remember here
>930f	05					.byte CodeLen	;patch wh_CodeLength
>9316	44 46 21			Name0:	.text "DF!"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37529					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9319	23					.byte (("DF!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>931a	10					.byte WordFlags	;wh_Flags
>931b	03					.byte 3	;wh_CodeLength
>931c	0c					  .byte LinkDisplacement	; offset to previous nt
=$931d					XtPtr1 ::= *
=37529					WordListLink ::= Nt0 ; remember the nt of this word for later
.931d	20 f4 b3	jsr $b3f4	DFStore:	jsr PopYA		; pop df_addr
.9320	85 16		sta $16		DFStore_YA:	sta tmp2+0		; save df_addr
.9322	84 17		sty $17				sty tmp2+1
.9324	a4 4c		ldy $4c				ldy FIndex		; negative?
.9326	b9 57 00	lda $0057,y			lda FSMant0,y
.9329	29 80		and #$80			and #$80		; remember sign
.932b	85 19		sta $19				sta tmp3+1
.932d	10 03		bpl $9332			bpl +			; make positive
.932f	20 85 8b	jsr $8b85			jsr FNegate
.9332					+
.9332	86 14		stx $14				stx tmp1+0		; save data stack index
.9334	a6 4c		ldx $4c				ldx FIndex
.9336	a9 00		lda #$00			lda #0
.9338	a0 07		ldy #$07			ldy #7			; +7 IEEE
.933a	91 16		sta ($16),y			sta (tmp2),y
.933c	88		dey				dey			; +6 IEEE
.933d	91 16		sta ($16),y			sta (tmp2),y
.933f	20 87 93	jsr $9387			jsr _shift		; shift mantissa
.9342	20 87 93	jsr $9387			jsr _shift
.9345	88		dey				dey			; +5 IEEE
.9346	91 16		sta ($16),y			sta (tmp2),y
.9348	b5 75		lda $75,x			lda FSMant3,x
.934a	88		dey				dey			; +4 IEEE
.934b	91 16		sta ($16),y			sta (tmp2),y
.934d	b5 6b		lda $6b,x			lda FSMant2,x
.934f	88		dey				dey			; +3 IEEE
.9350	91 16		sta ($16),y			sta (tmp2),y
.9352	b5 61		lda $61,x			lda FSMant1,x
.9354	88		dey				dey			; +2 IEEE
.9355	91 16		sta ($16),y			sta (tmp2),y
.9357	b5 57		lda $57,x			lda FSMant0,x		; clear extra bits
.9359	29 0f		and #$0f			and #$f
.935b	95 57		sta $57,x			sta FSMant0,x
.935d	b5 4d		lda $4d,x			lda FSExp,x
.935f	38		sec				sec
.9360	e9 02		sbc #$02			sbc #2
.9362	95 4d		sta $4d,x			sta FSExp,x
.9364	0a		asl a				asl a
.9365	0a		asl a				asl a
.9366	0a		asl a				asl a
.9367	0a		asl a				asl a
.9368	15 57		ora $57,x			ora FSMant0,x
.936a	88		dey				dey			; +1 IEEE
.936b	91 16		sta ($16),y			sta (tmp2),y
.936d	b5 4d		lda $4d,x			lda FSExp,x
.936f	08		php				php
.9370	4a		lsr a				lsr a
.9371	4a		lsr a				lsr a
.9372	4a		lsr a				lsr a
.9373	4a		lsr a				lsr a
.9374	18		clc				clc
.9375	69 30		adc #$30			adc #$30
.9377	28		plp				plp
.9378	30 03		bmi $937d			bmi +
.937a	18		clc				clc
.937b	69 10		adc #$10			adc #$10
.937d	05 19		ora $19		+		ora tmp3+1		; add sign bit
.937f	88		dey				dey			; +0 IEEE
.9380	91 16		sta ($16),y			sta (tmp2),y
.9382	e6 4c		inc $4c				inc FIndex		; FDrop
.9384	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.9386	60		rts				rts
.9387	56 57		lsr $57,x	_shift:		lsr FSMant0,x
.9389	76 61		ror $61,x			ror FSMant1,x
.938b	76 6b		ror $6b,x			ror FSMant2,x
.938d	76 75		ror $75,x			ror FSMant3,x
.938f	6a		ror a				ror a
=115					CodeLen	.var *-XtPtr1
=$9390					Here1 = *	; remember here
>931b	73					.byte CodeLen	;patch wh_CodeLength
.9390	60		rts				rts
>9391	44 46 40			Name0:	.text "DF@"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37652					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9394	03					.byte (("DF@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=123					LinkDisplacement = Nt0-WordListLink
>9395	10					.byte WordFlags	;wh_Flags
>9396	03					.byte 3	;wh_CodeLength
>9397	7b					  .byte LinkDisplacement	; offset to previous nt
=$9398					XtPtr1 ::= *
=37652					WordListLink ::= Nt0 ; remember the nt of this word for later
.9398	20 f4 b3	jsr $b3f4	DFAt:		jsr PopYA		; pop df_addr
.939b	85 16		sta $16		DFAt_YA:	sta tmp2+0		; save df_addr
.939d	84 17		sty $17				sty tmp2+1
.939f	20 bd 84	jsr $84bd			jsr FAllocX		; alloc FP stack entry
.93a2	a0 00		ldy #$00			ldy #0			; +0 IEEE byte
.93a4	b1 16		lda ($16),y			lda (tmp2),y
.93a6	95 4d		sta $4d,x			sta FSExp,x
.93a8	c8		iny				iny			; +1 IEEE byte
.93a9	b1 16		lda ($16),y			lda (tmp2),y
.93ab	95 57		sta $57,x			sta FSMant0,x
.93ad	c8		iny				iny			; +2 IEEE byte
.93ae	b1 16		lda ($16),y			lda (tmp2),y
.93b0	95 61		sta $61,x			sta FSMant1,x
.93b2	c8		iny				iny			; +3 IEEE byte
.93b3	b1 16		lda ($16),y			lda (tmp2),y
.93b5	95 6b		sta $6b,x			sta FSMant2,x
.93b7	c8		iny				iny			; +4 IEEE byte
.93b8	b1 16		lda ($16),y			lda (tmp2),y
.93ba	95 75		sta $75,x			sta FSMant3,x
.93bc	c8		iny				iny			; +5 IEEE byte
.93bd	b1 16		lda ($16),y			lda (tmp2),y
.93bf	20 e8 93	jsr $93e8			jsr _shifta		; shift exponent & mantissa bits into place
.93c2	20 e8 93	jsr $93e8			jsr _shifta
.93c5	b5 57		lda $57,x			lda FSMant0,x		; finish shifting exponent bits
.93c7	0a		asl a				asl a
.93c8	36 4d		rol $4d,x			rol FSExp,x
.93ca	0a		asl a				asl a
.93cb	36 4d		rol $4d,x			rol FSExp,x
.93cd	b5 4d		lda $4d,x			lda FSExp,x		; remove +1023
.93cf	18		clc				clc
.93d0	69 02		adc #$02			adc #2
.93d2	95 4d		sta $4d,x			sta FSExp,x
.93d4	b5 57		lda $57,x			lda FSMant0,x
.93d6	29 7f		and #$7f			and #$7f
.93d8	09 40		ora #$40			ora #$40		;   insert implied 1
.93da	95 57		sta $57,x			sta FSMant0,x		;   insert sign=0
.93dc	a6 14		ldx $14				ldx tmp1		; restore data stack index
.93de	a0 00		ldy #$00			ldy #0			; get sign from +0 IEEE byte
.93e0	b1 16		lda ($16),y			lda (tmp2),y
.93e2	10 03		bpl $93e7			bpl +
.93e4	20 85 8b	jsr $8b85			jsr FNegate
.93e7					+
.93e7	60		rts				rts
.93e8	0a		asl a		_shifta:	asl a
.93e9	36 75		rol $75,x			rol FSMant3,x
.93eb	36 6b		rol $6b,x			rol FSMant2,x
.93ed	36 61		rol $61,x			rol FSMant1,x
.93ef	36 57		rol $57,x			rol FSMant0,x
.93f1	36 4d		rol $4d,x			rol FSExp,x
.93f3	60		rts				rts
=92					CodeLen	.var *-XtPtr1
=$93f4					Here1 = *	; remember here
>9396	5c					.byte CodeLen	;patch wh_CodeLength
>93f4	44 46 6c 6f 61 74 2b		Name0:	.text "DFloat+"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=37755					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>93fb	67					.byte (("DFloat+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=103					LinkDisplacement = Nt0-WordListLink
>93fc	10					.byte WordFlags	;wh_Flags
>93fd	03					.byte 3	;wh_CodeLength
>93fe	67					  .byte LinkDisplacement	; offset to previous nt
=$93ff					XtPtr1 ::= *
=37755					WordListLink ::= Nt0 ; remember the nt of this word for later
.93ff	a9 08		lda #$08	DFloatPlus:	lda #8
.9401	4c 0c ca	jmp $ca0c			jmp Plus_A
=5					CodeLen	.var *-XtPtr1
=$9404					Here1 = *	; remember here
>93fd	05					.byte CodeLen	;patch wh_CodeLength
>9404	44 46 6c 6f 61 74 73		Name0:	.text "DFloats"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=37771					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>940b	67					.byte (("DFloats"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>940c	10					.byte WordFlags	;wh_Flags
>940d	03					.byte 3	;wh_CodeLength
>940e	10					  .byte LinkDisplacement	; offset to previous nt
=$940f					XtPtr1 ::= *
=37771					WordListLink ::= Nt0 ; remember the nt of this word for later
.940f	a9 03		lda #$03	DFloats:	lda #3
.9411	4c 42 cb	jmp $cb42			jmp LShift_A
=5					CodeLen	.var *-XtPtr1
=$9414					Here1 = *	; remember here
>940d	05					.byte CodeLen	;patch wh_CodeLength
>9414	46 4d 50 6f 6c 79		Name0:	.text "FMPoly"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=37786					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>941a	26					.byte (("FMPoly"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>941b	10					.byte WordFlags	;wh_Flags
>941c	03					.byte 3	;wh_CodeLength
>941d	0f					  .byte LinkDisplacement	; offset to previous nt
=$941e					XtPtr1 ::= *
=37786					WordListLink ::= Nt0 ; remember the nt of this word for later
.941e	20 f4 b3	jsr $b3f4	FMPoly:		jsr PopYA
.9421	20 b3 b7	jsr $b7b3	FMPolyYA:	jsr PushYA		; push coefficent addr
.9424	20 4a 86	jsr $864a			jsr FAt_YA		; fetch 1st coefficent
.9427	4c 3a 94	jmp $943a			jmp _4
.942a	20 6b 85	jsr $856b	_2:		jsr FOver
.942d	20 de 8b	jsr $8bde			jsr FStar
.9430	b5 24		lda $24,x			lda DStack+0,x		; fetch next coefficent
.9432	b4 25		ldy $25,x			ldy DStack+1,x
.9434	20 4a 86	jsr $864a			jsr FAt_YA
.9437	20 10 8b	jsr $8b10			jsr FPlus
.943a	a9 05		lda #$05	_4:		lda #5			; bump coefficent ptr
.943c	20 0c ca	jsr $ca0c			jsr Plus_A
.943f	a1 24		lda ($24,x)			lda (DStack+0,x)	; end of coefficent list?
.9441	d0 e7		bne $942a			bne _2
.9443	e8		inx				inx			; Drop coefficent ptr
.9444	e8		inx				inx
=39					CodeLen	.var *-XtPtr1
=$9445					Here1 = *	; remember here
>941c	27					.byte CodeLen	;patch wh_CodeLength
.9445	60		rts				rts
>9446	46 4c 6f 67 32 4d 31 4d		Name0:	.text "FLog2M1M"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=37838					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>944e	a8					.byte (("FLog2M1M"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>944f	10					.byte WordFlags	;wh_Flags
>9450	03					.byte 3	;wh_CodeLength
>9451	34					  .byte LinkDisplacement	; offset to previous nt
=$9452					XtPtr1 ::= *
=37838					WordListLink ::= Nt0 ; remember the nt of this word for later
.9452	a9 5c		lda #$5c	FLog2M1M:	lda #<_c
.9454	a0 94		ldy #$94			ldy #>_c
.9456	20 21 94	jsr $9421			jsr FMPolyYA
.9459	4c de 8b	jmp $8bde			jmp FStar
=10					CodeLen	.var *-XtPtr1
=$945c					Here1 = *	; remember here
>9450	0a					.byte CodeLen	;patch wh_CodeLength
.945c					_c:
>945c	cc cf 97 7c					.dword $7C97CFCC	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9460	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9461	64 87 94 af					.dword $AF948764	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9465	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>9466	66 c8 d4 62					.dword $62D4C866	; 32 bit signed binary mantissa.  $40000000 = +0.5
>946a	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>946b	e2 9c c3 ac					.dword $ACC39CE2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>946f	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9470	1a c6 2b 79					.dword $792BC61A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9474	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9475	07 e1 c4 a3					.dword $A3C4E107	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9479	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>947a	91 a5 54 5c					.dword $5C54A591	; 32 bit signed binary mantissa.  $40000000 = +0.5
>947e	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>947f	00 00						.word 0
>9481	46 4c 6f 67 32			Name0:	.text "FLog2"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=37894					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9486	45					.byte (("FLog2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>9487	10					.byte WordFlags	;wh_Flags
>9488	03					.byte 3	;wh_CodeLength
>9489	38					  .byte LinkDisplacement	; offset to previous nt
=$948a					XtPtr1 ::= *
=37894					WordListLink ::= Nt0 ; remember the nt of this word for later
.948a	a4 4c		ldy $4c		FLog2:		ldy FIndex
.948c	b9 57 00	lda $0057,y			lda FSMant0,y	; bad param?
.948f	30 20		bmi $94b1			bmi _OutOfRange
.9491	f0 1e		beq $94b1			beq _OutOfRange
.9493	b9 4d 00	lda $004d,y			lda FSExp,y
.9496	48		pha				pha		; remember orig exponent
.9497	a9 01		lda #$01			lda #1
.9499	99 4d 00	sta $004d,y			sta FSExp,y	; set to 1
.949c	20 74 8b	jsr $8b74			jsr F1Minus
.949f	20 52 94	jsr $9452			jsr FLog2M1M
.94a2	a0 00		ldy #$00			ldy #0		; add orig exponent to float
.94a4	68		pla				pla
.94a5	38		sec				sec
.94a6	e9 01		sbc #$01			sbc #1
.94a8	10 01		bpl $94ab			bpl +
.94aa	88		dey				dey
.94ab					+
.94ab	20 2b 8e	jsr $8e2b			jsr SToFYA
.94ae	4c 10 8b	jmp $8b10			jmp FPlus
.94b1	4c 54 b4	jmp $b454	_OutOfRange:	jmp Throw_FpOutOfRange
=42					CodeLen	.var *-XtPtr1
=$94b4					Here1 = *	; remember here
>9488	2a					.byte CodeLen	;patch wh_CodeLength
>94b4	46 4c 6e			Name0:	.text "FLn"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37943					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94b7	c3					.byte (("FLn"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>94b8	10					.byte WordFlags	;wh_Flags
>94b9	03					.byte 3	;wh_CodeLength
>94ba	31					  .byte LinkDisplacement	; offset to previous nt
=$94bb					XtPtr1 ::= *
=37943					WordListLink ::= Nt0 ; remember the nt of this word for later
.94bb	20 8a 94	jsr $948a	FLn:		jsr FLog2
.94be	20 43 88	jsr $8843			jsr FLitI
>94c1	f8 0b b9 58					.dword $58b90bf8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94c5	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
.94c6	4c de 8b	jmp $8bde			jmp FStar
=14					CodeLen	.var *-XtPtr1
=$94c9					Here1 = *	; remember here
>94b9	0e					.byte CodeLen	;patch wh_CodeLength
>94c9	46 4c 6e 50 31			Name0:	.text "FLnP1"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=37966					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94ce	25					.byte (("FLnP1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>94cf	10					.byte WordFlags	;wh_Flags
>94d0	03					.byte 3	;wh_CodeLength
>94d1	17					  .byte LinkDisplacement	; offset to previous nt
=$94d2					XtPtr1 ::= *
=37966					WordListLink ::= Nt0 ; remember the nt of this word for later
.94d2	20 44 8b	jsr $8b44	FlnP1:		jsr F1Plus
.94d5	4c bb 94	jmp $94bb			jmp FLn
=6					CodeLen	.var *-XtPtr1
=$94d8					Here1 = *	; remember here
>94d0	06					.byte CodeLen	;patch wh_CodeLength
>94d8	46 4c 6f 67			Name0:	.text "FLog"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=37980					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94dc	e4					.byte (("FLog"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>94dd	10					.byte WordFlags	;wh_Flags
>94de	03					.byte 3	;wh_CodeLength
>94df	0e					  .byte LinkDisplacement	; offset to previous nt
=$94e0					XtPtr1 ::= *
=37980					WordListLink ::= Nt0 ; remember the nt of this word for later
.94e0	20 8a 94	jsr $948a	FLog:		jsr FLog2
.94e3	20 43 88	jsr $8843			jsr FLitI
>94e6	3c 4d 10 4d					.dword $4d104d3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94ea	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
.94eb	4c de 8b	jmp $8bde			jmp FStar
=14					CodeLen	.var *-XtPtr1
=$94ee					Here1 = *	; remember here
>94de	0e					.byte CodeLen	;patch wh_CodeLength
>94ee	46 45 78 70 32 4d 31 4d		Name0:	.text "FExp2M1M"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=38006					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94f6	a8					.byte (("FExp2M1M"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>94f7	10					.byte WordFlags	;wh_Flags
>94f8	03					.byte 3	;wh_CodeLength
>94f9	1a					  .byte LinkDisplacement	; offset to previous nt
=$94fa					XtPtr1 ::= *
=38006					WordListLink ::= Nt0 ; remember the nt of this word for later
.94fa	a9 04		lda #$04	FExp2M1M:	lda #<_c
.94fc	a0 95		ldy #$95			ldy #>_c
.94fe	20 21 94	jsr $9421			jsr FMPolyYA
.9501	4c de 8b	jmp $8bde			jmp FStar
=10					CodeLen	.var *-XtPtr1
=$9504					Here1 = *	; remember here
>94f8	0a					.byte CodeLen	;patch wh_CodeLength
.9504					_c:
>9504	e7 dc 4f 7c					.dword $7C4FDCe7	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9508	f7						.char -9		; 8 bit signed exponent.  $00 = 2**0
>9509	de ca 4c 49					.dword $494CCADe	; 32 bit signed binary mantissa.  $40000000 = +0.5
>950d	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>950e	fb 42 64 72					.dword $726442fb	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9512	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9513	50 90 f4 7a					.dword $7AF49050	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9517	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9518	a2 3c b9 58					.dword $58B93Ca2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>951c	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>951d	00						.byte 0
>951e	46 45 78 70 32			Name0:	.text "FExp2"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38051					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9523	45					.byte (("FExp2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>9524	10					.byte WordFlags	;wh_Flags
>9525	03					.byte 3	;wh_CodeLength
>9526	2d					  .byte LinkDisplacement	; offset to previous nt
=$9527					XtPtr1 ::= *
=38051					WordListLink ::= Nt0 ; remember the nt of this word for later
.9527	20 40 8a	jsr $8a40	FExp2:		jsr FIntFrc	; ( f: r_rem r_int )
.952a	20 73 8e	jsr $8e73			jsr FToS
.952d	20 fa 94	jsr $94fa			jsr FExp2M1M
.9530	20 44 8b	jsr $8b44			jsr F1Plus
.9533	20 d9 b3	jsr $b3d9			jsr PopA
.9536	a4 4c		ldy $4c				ldy FIndex
.9538	18		clc				clc
.9539	79 4d 00	adc $004d,y			adc FSExp,y
.953c	99 4d 00	sta $004d,y			sta FSExp,y
=24					CodeLen	.var *-XtPtr1
=$953f					Here1 = *	; remember here
>9525	18					.byte CodeLen	;patch wh_CodeLength
.953f	60		rts				rts
>9540	46 45 78 70			Name0:	.text "FExp"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38084					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9544	04					.byte (("FExp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>9545	10					.byte WordFlags	;wh_Flags
>9546	03					.byte 3	;wh_CodeLength
>9547	21					  .byte LinkDisplacement	; offset to previous nt
=$9548					XtPtr1 ::= *
=38084					WordListLink ::= Nt0 ; remember the nt of this word for later
.9548					FExp:
.9548	20 43 88	jsr $8843			jsr FLitI
>954b	94 1d 55 5c					.dword $5c551d94	; 32 bit signed binary mantissa.  $40000000 = +0.5
>954f	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
.9550	20 de 8b	jsr $8bde			jsr FStar
.9553	4c 27 95	jmp $9527			jmp FExp2
=14					CodeLen	.var *-XtPtr1
=$9556					Here1 = *	; remember here
>9546	0e					.byte CodeLen	;patch wh_CodeLength
>9556	46 45 78 70 4d 31		Name0:	.text "FExpM1"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=38108					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>955c	26					.byte (("FExpM1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>955d	10					.byte WordFlags	;wh_Flags
>955e	03					.byte 3	;wh_CodeLength
>955f	18					  .byte LinkDisplacement	; offset to previous nt
=$9560					XtPtr1 ::= *
=38108					WordListLink ::= Nt0 ; remember the nt of this word for later
.9560	20 48 95	jsr $9548	FExpM1:		jsr FExp
.9563	4c 74 8b	jmp $8b74			jmp F1Minus
=6					CodeLen	.var *-XtPtr1
=$9566					Here1 = *	; remember here
>955e	06					.byte CodeLen	;patch wh_CodeLength
>9566	46 41 4c 6f 67			Name0:	.text "FALog"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38123					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>956b	e5					.byte (("FALog"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>956c	10					.byte WordFlags	;wh_Flags
>956d	03					.byte 3	;wh_CodeLength
>956e	0f					  .byte LinkDisplacement	; offset to previous nt
=$956f					XtPtr1 ::= *
=38123					WordListLink ::= Nt0 ; remember the nt of this word for later
.956f					FALog:
.956f	20 43 88	jsr $8843			jsr FLitI
>9572	25 3c 4d 6a					.dword $6a4d3c25	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9576	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
.9577	20 de 8b	jsr $8bde			jsr FStar
.957a	4c 27 95	jmp $9527			jmp FExp2
=14					CodeLen	.var *-XtPtr1
=$957d					Here1 = *	; remember here
>956d	0e					.byte CodeLen	;patch wh_CodeLength
>957d	46 2a 2a			Name0:	.text "F**"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=38144					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9580	43					.byte (("F**"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>9581	10					.byte WordFlags	;wh_Flags
>9582	03					.byte 3	;wh_CodeLength
>9583	15					  .byte LinkDisplacement	; offset to previous nt
=$9584					XtPtr1 ::= *
=38144					WordListLink ::= Nt0 ; remember the nt of this word for later
.9584	20 cc 85	jsr $85cc	FPower:		jsr FSwap
.9587	20 8a 94	jsr $948a			jsr FLog2
.958a	20 de 8b	jsr $8bde			jsr FStar
.958d	4c 27 95	jmp $9527			jmp FExp2
=12					CodeLen	.var *-XtPtr1
=$9590					Here1 = *	; remember here
>9582	0c					.byte CodeLen	;patch wh_CodeLength
>9590	44 65 67 32 52 61 64		Name0:	.text "Deg2Rad"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=38167					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9597	87					.byte (("Deg2Rad"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>9598	10					.byte WordFlags	;wh_Flags
>9599	03					.byte 3	;wh_CodeLength
>959a	17					  .byte LinkDisplacement	; offset to previous nt
=$959b					XtPtr1 ::= *
=38167					WordListLink ::= Nt0 ; remember the nt of this word for later
.959b					Deg2Rad:
.959b	20 43 88	jsr $8843			jsr FLitI
>959e	8a 1a 7d 47					.dword $477d1A8A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95a2	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
.95a3	4c de 8b	jmp $8bde			jmp FStar
=11					CodeLen	.var *-XtPtr1
=$95a6					Here1 = *	; remember here
>9599	0b					.byte CodeLen	;patch wh_CodeLength
>95a6	52 61 64 32 44 65 67		Name0:	.text "Rad2Deg"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=38189					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>95ad	e7					.byte (("Rad2Deg"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>95ae	10					.byte WordFlags	;wh_Flags
>95af	03					.byte 3	;wh_CodeLength
>95b0	16					  .byte LinkDisplacement	; offset to previous nt
=$95b1					XtPtr1 ::= *
=38189					WordListLink ::= Nt0 ; remember the nt of this word for later
.95b1					Rad2Deg:
.95b1	20 43 88	jsr $8843			jsr FLitI
>95b4	68 70 97 72					.dword $72977068	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95b8	06						.char 6		; 8 bit signed exponent.  $00 = 2**0
.95b9	4c de 8b	jmp $8bde			jmp FStar
=11					CodeLen	.var *-XtPtr1
=$95bc					Here1 = *	; remember here
>95af	0b					.byte CodeLen	;patch wh_CodeLength
>95bc	46 41 52 65 64 75 63 65		Name0:	.text "FAReduce"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=38212					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>95c4	a8					.byte (("FAReduce"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>95c5	10					.byte WordFlags	;wh_Flags
>95c6	03					.byte 3	;wh_CodeLength
>95c7	17					  .byte LinkDisplacement	; offset to previous nt
=$95c8					XtPtr1 ::= *
=38212					WordListLink ::= Nt0 ; remember the nt of this word for later
.95c8	a4 4c		ldy $4c		FAReduce:	ldy FIndex
.95ca	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.95cd	f0 2f		beq $95fe			beq _ok
.95cf	b9 4d 00	lda $004d,y			lda FSExp,y		; get exponent
.95d2	30 2a		bmi $95fe			bmi _ok			; small?
.95d4	c9 01		cmp #$01			cmp #1			; maybe need mirror?
.95d6	30 26		bmi $95fe			bmi _ok			;if exponent <=0
.95d8	f0 24		beq $95fe			beq _ok
.95da	c9 02		cmp #$02			cmp #2			; maybe need rotation?
.95dc	b0 22		bcs $9600			bcs _exp2
.95de	b9 57 00	lda $0057,y			lda FSMant0,y
.95e1	c9 65		cmp #$65			cmp #$65		;in -pi/2..pi/2 ?
.95e3	90 19		bcc $95fe			bcc _ok
.95e5	c9 9b		cmp #$9b			cmp #$100-$65
.95e7	b0 15		bcs $95fe			bcs _ok
.95e9					_mir:
.95e9	20 f9 88	jsr $88f9			jsr FPi
.95ec	a4 4c		ldy $4c				ldy FIndex
.95ee	b9 58 00	lda $0058,y			lda FSMant0+1,y
.95f1	10 03		bpl $95f6			bpl _3
.95f3	20 85 8b	jsr $8b85			jsr FNegate
.95f6	20 cc 85	jsr $85cc	_3:		jsr FSwap
.95f9	20 50 8b	jsr $8b50			jsr FMinus
.95fc	38		sec				sec		; mirrored
.95fd	60		rts				rts
.95fe	18		clc		_ok:		clc		; not mirrored
.95ff	60		rts				rts
.9600	d0 0b		bne $960d	_exp2:		bne _rot	;if exp>2 then fix
.9602	b9 57 00	lda $0057,y			lda FSMant0,y
.9605	c9 65		cmp #$65			cmp #$65	;if mant>pi or mant<-pi then fix
.9607	90 e0		bcc $95e9			bcc _mir
.9609	c9 9b		cmp #$9b			cmp #$100-$65
.960b	b0 dc		bcs $95e9			bcs _mir
.960d	20 28 89	jsr $8928	_rot:		jsr F2Pi
.9610	20 99 8c	jsr $8c99			jsr FSlash
.9613	20 40 8a	jsr $8a40			jsr FIntFrc
.9616	e6 4c		inc $4c				inc FIndex	; FDrop integer part
.9618	a4 4c		ldy $4c				ldy FIndex	;if >=.5
.961a	b9 4d 00	lda $004d,y			lda FSExp,y
.961d	a8		tay				tay
.961e	30 03		bmi $9623			bmi _rot4
.9620	20 74 8b	jsr $8b74			jsr F1Minus	;  subtract 1
.9623	20 28 89	jsr $8928	_rot4:		jsr F2Pi
.9626	20 de 8b	jsr $8bde			jsr FStar
.9629	4c c8 95	jmp $95c8			jmp FAReduce	; rotate done, look again
=100					CodeLen	.var *-XtPtr1
=$962c					Here1 = *	; remember here
>95c6	64					.byte CodeLen	;patch wh_CodeLength
>962c	46 53 69 6e			Name0:	.text "FSin"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38320					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9630	c4					.byte (("FSin"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=108					LinkDisplacement = Nt0-WordListLink
>9631	10					.byte WordFlags	;wh_Flags
>9632	03					.byte 3	;wh_CodeLength
>9633	6c					  .byte LinkDisplacement	; offset to previous nt
=$9634					XtPtr1 ::= *
=38320					WordListLink ::= Nt0 ; remember the nt of this word for later
.9634	20 c8 95	jsr $95c8	FSin:		jsr FAReduce
.9637	4c 3a 96	jmp $963a			jmp FSinM
=6					CodeLen	.var *-XtPtr1
=$963a					Here1 = *	; remember here
>9632	06					.byte CodeLen	;patch wh_CodeLength
.963a	20 48 85	jsr $8548	FSinM:		jsr FDup
.963d	20 6e 8c	jsr $8c6e			jsr FSqr	; x x^2
.9640	a9 50		lda #$50			lda #<_c
.9642	a0 96		ldy #$96			ldy #>_c
.9644	20 21 94	jsr $9421			jsr FMPolyYA
.9647	20 de 8b	jsr $8bde			jsr FStar
.964a	20 44 8b	jsr $8b44			jsr F1Plus	; C0 +1.0
.964d	4c de 8b	jmp $8bde			jmp FStar
.9650					_c:
>9650	ba a7 21 57					.dword $5721a7ba	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9654	ee						.char -18		; 8 bit signed exponent.  $00 = 2**0
>9655	3a 0b 2a 98					.dword $982a0b3a	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9659	f4						.char -12		; 8 bit signed exponent.  $00 = 2**0
>965a	4c 8f 43 44					.dword $44438f4c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>965e	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>965f	2b ae aa aa					.dword $aaaaae2b	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9663	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9664	00						.byte 0
>9665	46 43 73 63			Name0:	.text "FCsc"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38377					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9669	64					.byte (("FCsc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=57					LinkDisplacement = Nt0-WordListLink
>966a	10					.byte WordFlags	;wh_Flags
>966b	03					.byte 3	;wh_CodeLength
>966c	39					  .byte LinkDisplacement	; offset to previous nt
=$966d					XtPtr1 ::= *
=38377					WordListLink ::= Nt0 ; remember the nt of this word for later
.966d	20 34 96	jsr $9634	FCsc:		jsr FSin
.9670	4c 3d 8d	jmp $8d3d			jmp F1Slash		; 1/SIN(r1)
=6					CodeLen	.var *-XtPtr1
=$9673					Here1 = *	; remember here
>966b	06					.byte CodeLen	;patch wh_CodeLength
>9673	46 43 6f 73			Name0:	.text "FCos"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38391					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9677	64					.byte (("FCos"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>9678	10					.byte WordFlags	;wh_Flags
>9679	03					.byte 3	;wh_CodeLength
>967a	0e					  .byte LinkDisplacement	; offset to previous nt
=$967b					XtPtr1 ::= *
=38391					WordListLink ::= Nt0 ; remember the nt of this word for later
.967b	20 09 89	jsr $8909	FCos:		jsr FPiH
.967e	20 10 8b	jsr $8b10			jsr FPlus
.9681	4c 34 96	jmp $9634			jmp FSin
=9					CodeLen	.var *-XtPtr1
=$9684					Here1 = *	; remember here
>9679	09					.byte CodeLen	;patch wh_CodeLength
>9684	46 53 65 63			Name0:	.text "FSec"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38408					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9688	64					.byte (("FSec"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>9689	10					.byte WordFlags	;wh_Flags
>968a	03					.byte 3	;wh_CodeLength
>968b	11					  .byte LinkDisplacement	; offset to previous nt
=$968c					XtPtr1 ::= *
=38408					WordListLink ::= Nt0 ; remember the nt of this word for later
.968c	20 7b 96	jsr $967b	FSec:		jsr FCos
.968f	4c 3d 8d	jmp $8d3d			jmp F1Slash		; 1/COS(r1)
=6					CodeLen	.var *-XtPtr1
=$9692					Here1 = *	; remember here
>968a	06					.byte CodeLen	;patch wh_CodeLength
>9692	46 53 69 6e 43 6f 73		Name0:	.text "FSinCos"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=38425					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9699	67					.byte (("FSinCos"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>969a	10					.byte WordFlags	;wh_Flags
>969b	03					.byte 3	;wh_CodeLength
>969c	11					  .byte LinkDisplacement	; offset to previous nt
=$969d					XtPtr1 ::= *
=38425					WordListLink ::= Nt0 ; remember the nt of this word for later
.969d	20 48 85	jsr $8548	FSinCos:	jsr FDup
.96a0	20 34 96	jsr $9634			jsr FSin
.96a3	20 cc 85	jsr $85cc			jsr FSwap
.96a6	4c 7b 96	jmp $967b			jmp FCos
=12					CodeLen	.var *-XtPtr1
=$96a9					Here1 = *	; remember here
>969b	0c					.byte CodeLen	;patch wh_CodeLength
>96a9	46 54 61 6e			Name0:	.text "FTan"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38445					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>96ad	c4					.byte (("FTan"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>96ae	10					.byte WordFlags	;wh_Flags
>96af	03					.byte 3	;wh_CodeLength
>96b0	14					  .byte LinkDisplacement	; offset to previous nt
=$96b1					XtPtr1 ::= *
=38445					WordListLink ::= Nt0 ; remember the nt of this word for later
.96b1	20 c8 95	jsr $95c8	FTan:		jsr FAReduce
.96b4	90 06		bcc $96bc			bcc _30
.96b6	20 bc 96	jsr $96bc			jsr _30
.96b9	4c 85 8b	jmp $8b85			jmp FNegate
.96bc					_30:
.96bc	20 48 85	jsr $8548			jsr FDup
.96bf	20 ab 8b	jsr $8bab			jsr FAbs
.96c2	20 19 89	jsr $8919			jsr FPiQ
.96c5	20 63 87	jsr $8763			jsr FLe
.96c8	e8		inx				inx			; pop f
.96c9	e8		inx				inx
.96ca	b5 24		lda $24,x			lda DStack+0,x
.96cc	d0 19		bne $96e7			bne FTanM
.96ce	20 09 89	jsr $8909			jsr FPiH
.96d1	a4 4c		ldy $4c				ldy FIndex		; get sign
.96d3	b9 57 00	lda $0057,y			lda FSMant0,y
.96d6	10 03		bpl $96db			bpl +
.96d8	20 85 8b	jsr $8b85			jsr FNegate
.96db					+
.96db	20 cc 85	jsr $85cc			jsr FSwap
.96de	20 50 8b	jsr $8b50			jsr FMinus
.96e1	20 e7 96	jsr $96e7			jsr FTanM
.96e4	4c 3d 8d	jmp $8d3d			jmp F1Slash
=54					CodeLen	.var *-XtPtr1
=$96e7					Here1 = *	; remember here
>96af	36					.byte CodeLen	;patch wh_CodeLength
.96e7	20 48 85	jsr $8548	FTanM:		jsr FDup
.96ea	20 6e 8c	jsr $8c6e			jsr FSqr		; x x^2
.96ed	a9 fd		lda #$fd			lda #<_c
.96ef	a0 96		ldy #$96			ldy #>_c
.96f1	20 21 94	jsr $9421			jsr FMPolyYA
.96f4	20 de 8b	jsr $8bde			jsr FStar
.96f7	20 44 8b	jsr $8b44			jsr F1Plus		; c0 1.0
.96fa	4c de 8b	jmp $8bde			jmp FStar
.96fd					_c:
>96fd	1e ae 4d 58					.dword $584DAE1E	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9701	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>9702	51 0a eb 57					.dword $57EB0A51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9706	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9707	98 d9 14 77					.dword $7714D998	; 32 bit signed binary mantissa.  $40000000 = +0.5
>970b	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>970c	f9 10 ea 43					.dword $43EA10F9	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9710	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9711	1b e2 57 55					.dword $5557E21B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9715	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9716	00						.byte 0
>9717	46 43 6f 74			Name0:	.text "FCot"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38555					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>971b	84					.byte (("FCot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=110					LinkDisplacement = Nt0-WordListLink
>971c	10					.byte WordFlags	;wh_Flags
>971d	03					.byte 3	;wh_CodeLength
>971e	6e					  .byte LinkDisplacement	; offset to previous nt
=$971f					XtPtr1 ::= *
=38555					WordListLink ::= Nt0 ; remember the nt of this word for later
.971f	20 b1 96	jsr $96b1	FCot:		jsr FTan
.9722	4c 3d 8d	jmp $8d3d			jmp F1Slash	; =1/TAN(r1)
=6					CodeLen	.var *-XtPtr1
=$9725					Here1 = *	; remember here
>971d	06					.byte CodeLen	;patch wh_CodeLength
>9725	46 41 43 6f 73			Name0:	.text "FACos"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38570					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>972a	65					.byte (("FACos"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>972b	10					.byte WordFlags	;wh_Flags
>972c	03					.byte 3	;wh_CodeLength
>972d	0f					  .byte LinkDisplacement	; offset to previous nt
=$972e					XtPtr1 ::= *
=38570					WordListLink ::= Nt0 ; remember the nt of this word for later
.972e	a4 4c		ldy $4c		FACos:		ldy FIndex
.9730	b9 57 00	lda $0057,y			lda FSMant0,y
.9733	08		php				php			; save sign
.9734	20 ab 8b	jsr $8bab			jsr FAbs
.9737	a9 5a		lda #$5a			lda #<_c
.9739	a0 97		ldy #$97			ldy #>_c
.973b	20 21 94	jsr $9421			jsr FMPolyYA
.973e	20 cc 85	jsr $85cc			jsr FSwap
.9741	20 85 8b	jsr $8b85			jsr FNegate
.9744	20 44 8b	jsr $8b44			jsr F1Plus
.9747	20 19 8f	jsr $8f19			jsr FSqrt
.974a	20 de 8b	jsr $8bde			jsr FStar
.974d	28		plp				plp			; was r1 negative?
.974e	10 09		bpl $9759			bpl +
.9750	20 f9 88	jsr $88f9			jsr FPi
.9753	20 cc 85	jsr $85cc			jsr FSwap
.9756	20 50 8b	jsr $8b50			jsr FMinus
.9759					+
=43					CodeLen	.var *-XtPtr1
=$9759					Here1 = *	; remember here
>972c	2b					.byte CodeLen	;patch wh_CodeLength
.9759	60		rts				rts
.975a					_c:
>975a	8b 5e 9f 4b					.dword $4B9F5E8B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>975e	f8						.char -8		; 8 bit signed exponent.  $00 = 2**0
>975f	ad cc 29 a4					.dword $A429CCAD	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9763	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9764	98 a1 a3 6e					.dword $6EA3A198	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9768	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>9769	5a 10 e1 9b					.dword $9BE1105A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>976d	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>976e	c6 71 ea 5a					.dword $5AEA71C6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9772	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>9773	e0 56 21 92					.dword $922156E0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9777	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9778	41 ed 87 64					.dword $6487ED41	; 32 bit signed binary mantissa.  $40000000 = +0.5
>977c	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>977d	00						.byte 0
>977e	46 41 53 65 63			Name0:	.text "FASec"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38659					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9783	65					.byte (("FASec"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=89					LinkDisplacement = Nt0-WordListLink
>9784	10					.byte WordFlags	;wh_Flags
>9785	03					.byte 3	;wh_CodeLength
>9786	59					  .byte LinkDisplacement	; offset to previous nt
=$9787					XtPtr1 ::= *
=38659					WordListLink ::= Nt0 ; remember the nt of this word for later
.9787	20 3d 8d	jsr $8d3d	FASec:		jsr F1Slash
.978a	4c 2e 97	jmp $972e			jmp FACos
=6					CodeLen	.var *-XtPtr1
=$978d					Here1 = *	; remember here
>9785	06					.byte CodeLen	;patch wh_CodeLength
>978d	46 41 53 69 6e			Name0:	.text "FASin"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38674					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9792	c5					.byte (("FASin"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>9793	10					.byte WordFlags	;wh_Flags
>9794	03					.byte 3	;wh_CodeLength
>9795	0f					  .byte LinkDisplacement	; offset to previous nt
=$9796					XtPtr1 ::= *
=38674					WordListLink ::= Nt0 ; remember the nt of this word for later
.9796	20 2e 97	jsr $972e	FASin:		jsr FACos
.9799	20 85 8b	jsr $8b85			jsr FNegate
.979c	20 09 89	jsr $8909			jsr FPiH
.979f	4c 10 8b	jmp $8b10			jmp FPlus
=12					CodeLen	.var *-XtPtr1
=$97a2					Here1 = *	; remember here
>9794	0c					.byte CodeLen	;patch wh_CodeLength
>97a2	46 41 43 73 63			Name0:	.text "FACsc"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38695					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>97a7	65					.byte (("FACsc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>97a8	10					.byte WordFlags	;wh_Flags
>97a9	03					.byte 3	;wh_CodeLength
>97aa	15					  .byte LinkDisplacement	; offset to previous nt
=$97ab					XtPtr1 ::= *
=38695					WordListLink ::= Nt0 ; remember the nt of this word for later
.97ab	20 3d 8d	jsr $8d3d	FACsc:		jsr F1Slash
.97ae	4c 96 97	jmp $9796			jmp FASin
=6					CodeLen	.var *-XtPtr1
=$97b1					Here1 = *	; remember here
>97a9	06					.byte CodeLen	;patch wh_CodeLength
>97b1	46 41 54 61 6e			Name0:	.text "FATan"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38710					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>97b6	c5					.byte (("FATan"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>97b7	10					.byte WordFlags	;wh_Flags
>97b8	03					.byte 3	;wh_CodeLength
>97b9	0f					  .byte LinkDisplacement	; offset to previous nt
=$97ba					XtPtr1 ::= *
=38710					WordListLink ::= Nt0 ; remember the nt of this word for later
.97ba					FATan:
.97ba	a4 4c		ldy $4c				ldy FIndex
.97bc	b9 4d 00	lda $004d,y			lda FSExp,y		; Abs(r1)<1 ?
.97bf	30 1b		bmi $97dc			bmi FATanM
.97c1	f0 19		beq $97dc			beq FATanM
.97c3	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.97c6	08		php				php
.97c7	20 3d 8d	jsr $8d3d			jsr F1Slash
.97ca	20 dc 97	jsr $97dc			jsr FATanM
.97cd	20 85 8b	jsr $8b85			jsr FNegate
.97d0	20 09 89	jsr $8909			jsr FPiH
.97d3	28		plp				plp
.97d4	10 03		bpl $97d9			bpl _18
.97d6	20 85 8b	jsr $8b85			jsr FNegate
.97d9	4c 10 8b	jmp $8b10	_18:		jmp FPlus
.97dc	20 48 85	jsr $8548	FATanM:		jsr FDup		; x x
.97df	20 6e 8c	jsr $8c6e			jsr FSqr		; x xsqr
.97e2	a9 f2		lda #$f2			lda #<_c
.97e4	a0 97		ldy #$97			ldy #>_c
.97e6	20 21 94	jsr $9421			jsr FMPolyYA
.97e9	20 de 8b	jsr $8bde			jsr FStar		; x poly
.97ec	20 44 8b	jsr $8b44			jsr F1Plus		; x poly
.97ef	4c de 8b	jmp $8bde			jmp FStar
.97f2					_c:
>97f2	98 08 2d 76					.dword $762D0898	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97f6	f9						.char -7		; 8 bit signed exponent.  $00 = 2**0
>97f7	55 a1 32 b8					.dword $B832A155	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97fb	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>97fc	a8 d7 a2 53					.dword $53A2D7A8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9800	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>9801	be 91 85 bb					.dword $BB8591BE	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9805	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9806	06 65 aa 65					.dword $65AA6506	; 32 bit signed binary mantissa.  $40000000 = +0.5
>980a	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>980b	12 21 b0 aa					.dword $AAB02112	; 32 bit signed binary mantissa.  $40000000 = +0.5
>980f	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9810	00						.byte 0
>9811	46 41 43 6f 74			Name0:	.text "FACot"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38806					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9816	85					.byte (("FACot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=96					LinkDisplacement = Nt0-WordListLink
>9817	10					.byte WordFlags	;wh_Flags
>9818	03					.byte 3	;wh_CodeLength
>9819	60					  .byte LinkDisplacement	; offset to previous nt
=$981a					XtPtr1 ::= *
=38806					WordListLink ::= Nt0 ; remember the nt of this word for later
.981a	20 3d 8d	jsr $8d3d	FACot:		jsr F1Slash
.981d	4c ba 97	jmp $97ba			jmp FATan
=6					CodeLen	.var *-XtPtr1
=$9820					Here1 = *	; remember here
>9818	06					.byte CodeLen	;patch wh_CodeLength
>9820	46 41 54 61 6e 32		Name0:	.text "FATan2"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=38822					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9826	46					.byte (("FATan2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>9827	10					.byte WordFlags	;wh_Flags
>9828	03					.byte 3	;wh_CodeLength
>9829	10					  .byte LinkDisplacement	; offset to previous nt
=$982a					XtPtr1 ::= *
=38822					WordListLink ::= Nt0 ; remember the nt of this word for later
.982a	a4 4c		ldy $4c		FATan2:		ldy FIndex
.982c	b9 57 00	lda $0057,y			lda FSMant0+0,y	; get rx sign
.982f	f0 1c		beq $984d			beq _rxzero
.9831	0a		asl a				asl a		;   C=rx sign
.9832	b9 58 00	lda $0058,y			lda FSMant0+1,y	;   N=ry sign
.9835	08		php				php		; save signs
.9836	20 99 8c	jsr $8c99			jsr FSlash
.9839	20 ba 97	jsr $97ba			jsr FATan
.983c	28		plp				plp		; pop signs
.983d	b0 01		bcs $9840			bcs _rxneg
.983f	60		rts		_rts:		rts
.9840	08		php		_rxneg:		php
.9841	20 f9 88	jsr $88f9			jsr FPi
.9844	28		plp				plp
.9845	10 03		bpl $984a			bpl +
.9847	20 85 8b	jsr $8b85			jsr FNegate
.984a	4c 10 8b	jmp $8b10	+		jmp FPlus
.984d	e6 4c		inc $4c		_rxzero:	inc FIndex	; FDrop rx
.984f	b9 57 00	lda $0057,y			lda FSMant0,y
.9852	08		php				php
.9853	e6 4c		inc $4c				inc FIndex	; FDrop ry
.9855	20 09 89	jsr $8909			jsr FPiH
.9858	28		plp				plp
.9859	10 e4		bpl $983f			bpl _rts
.985b	4c 85 8b	jmp $8b85			jmp FNegate
=52					CodeLen	.var *-XtPtr1
=$985e					Here1 = *	; remember here
>9828	34					.byte CodeLen	;patch wh_CodeLength
>985e	46 53 67 6e			Name0:	.text "FSgn"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38882					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9862	c4					.byte (("FSgn"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=60					LinkDisplacement = Nt0-WordListLink
>9863	10					.byte WordFlags	;wh_Flags
>9864	03					.byte 3	;wh_CodeLength
>9865	3c					  .byte LinkDisplacement	; offset to previous nt
=$9866					XtPtr1 ::= *
=38882					WordListLink ::= Nt0 ; remember the nt of this word for later
.9866	a4 4c		ldy $4c		FSgn:		ldy FIndex
.9868	b9 57 00	lda $0057,y			lda FSMant0,y
.986b	f0 0a		beq $9877			beq _zero
.986d	e6 4c		inc $4c				inc FIndex
.986f	b9 57 00	lda $0057,y			lda FSMant0,y
.9872	30 04		bmi $9878			bmi FM1
.9874	4c de 88	jmp $88de			jmp F1
.9877	60		rts		_zero:		rts
=18					CodeLen	.var *-XtPtr1
=$9878					Here1 = *	; remember here
>9864	12					.byte CodeLen	;patch wh_CodeLength
.9878	a9 80		lda #$80	FM1:		lda #$80
.987a	a0 00		ldy #$00			ldy #0
.987c	4c 8d 88	jmp $888d			jmp FLitYA
>987f	46 53 69 6e 48			Name0:	.text "FSinH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38916					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9884	05					.byte (("FSinH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>9885	10					.byte WordFlags	;wh_Flags
>9886	03					.byte 3	;wh_CodeLength
>9887	22					  .byte LinkDisplacement	; offset to previous nt
=$9888					XtPtr1 ::= *
=38916					WordListLink ::= Nt0 ; remember the nt of this word for later
.9888	20 48 85	jsr $8548	FSinH:		jsr FDup
.988b	20 48 95	jsr $9548			jsr FExp
.988e	20 cc 85	jsr $85cc			jsr FSwap
.9891	20 85 8b	jsr $8b85			jsr FNegate
.9894	20 48 95	jsr $9548			jsr FExp
.9897	20 50 8b	jsr $8b50			jsr FMinus
.989a	4c 92 89	jmp $8992			jmp F2Slash
=21					CodeLen	.var *-XtPtr1
=$989d					Here1 = *	; remember here
>9886	15					.byte CodeLen	;patch wh_CodeLength
>989d	46 43 73 63 48			Name0:	.text "FCscH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38946					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98a2	05					.byte (("FCscH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>98a3	10					.byte WordFlags	;wh_Flags
>98a4	03					.byte 3	;wh_CodeLength
>98a5	1e					  .byte LinkDisplacement	; offset to previous nt
=$98a6					XtPtr1 ::= *
=38946					WordListLink ::= Nt0 ; remember the nt of this word for later
.98a6	20 88 98	jsr $9888	FCscH:		jsr FSinH
.98a9	4c 3d 8d	jmp $8d3d			jmp F1Slash
=6					CodeLen	.var *-XtPtr1
=$98ac					Here1 = *	; remember here
>98a4	06					.byte CodeLen	;patch wh_CodeLength
>98ac	46 43 6f 73 48			Name0:	.text "FCosH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38961					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98b1	05					.byte (("FCosH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>98b2	10					.byte WordFlags	;wh_Flags
>98b3	03					.byte 3	;wh_CodeLength
>98b4	0f					  .byte LinkDisplacement	; offset to previous nt
=$98b5					XtPtr1 ::= *
=38961					WordListLink ::= Nt0 ; remember the nt of this word for later
.98b5	20 48 85	jsr $8548	FCosH:		jsr FDup
.98b8	20 48 95	jsr $9548			jsr FExp
.98bb	20 cc 85	jsr $85cc			jsr FSwap
.98be	20 85 8b	jsr $8b85			jsr FNegate
.98c1	20 48 95	jsr $9548			jsr FExp
.98c4	20 10 8b	jsr $8b10			jsr FPlus
.98c7	4c 92 89	jmp $8992			jmp F2Slash
=21					CodeLen	.var *-XtPtr1
=$98ca					Here1 = *	; remember here
>98b3	15					.byte CodeLen	;patch wh_CodeLength
>98ca	46 53 65 63 48			Name0:	.text "FSecH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38991					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98cf	05					.byte (("FSecH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>98d0	10					.byte WordFlags	;wh_Flags
>98d1	03					.byte 3	;wh_CodeLength
>98d2	1e					  .byte LinkDisplacement	; offset to previous nt
=$98d3					XtPtr1 ::= *
=38991					WordListLink ::= Nt0 ; remember the nt of this word for later
.98d3	20 b5 98	jsr $98b5	FSecH:		jsr FCosH
.98d6	4c 3d 8d	jmp $8d3d			jmp F1Slash
=6					CodeLen	.var *-XtPtr1
=$98d9					Here1 = *	; remember here
>98d1	06					.byte CodeLen	;patch wh_CodeLength
>98d9	46 54 61 6e 48			Name0:	.text "FTanH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=39006					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98de	05					.byte (("FTanH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>98df	10					.byte WordFlags	;wh_Flags
>98e0	03					.byte 3	;wh_CodeLength
>98e1	0f					  .byte LinkDisplacement	; offset to previous nt
=$98e2					XtPtr1 ::= *
=39006					WordListLink ::= Nt0 ; remember the nt of this word for later
.98e2	20 48 85	jsr $8548	FTanH:		jsr FDup
.98e5	20 85 8b	jsr $8b85			jsr FNegate	; X -X
.98e8	20 48 95	jsr $9548			jsr FExp	; X Exp(-X)
.98eb	20 cc 85	jsr $85cc			jsr FSwap	; Exp(-X) X
.98ee	20 48 95	jsr $9548			jsr FExp	; Exp(-X) Exp(X)
.98f1	20 6b 85	jsr $856b			jsr FOver	; Exp(-X) Exp(X) Exp(-X)
.98f4	20 10 8b	jsr $8b10			jsr FPlus	; Exp(-X) Exp(X)+Exp(-X)
.98f7	20 99 8c	jsr $8c99			jsr FSlash	; Exp(-X)/(Exp(X)+Exp(-X))
.98fa	20 87 89	jsr $8987			jsr F2Star	; Exp(-X)/(Exp(X)+Exp(-X))*2
.98fd	20 85 8b	jsr $8b85			jsr FNegate
.9900	4c 44 8b	jmp $8b44			jmp F1Plus
=33					CodeLen	.var *-XtPtr1
=$9903					Here1 = *	; remember here
>98e0	21					.byte CodeLen	;patch wh_CodeLength
>9903	46 43 6f 74 48			Name0:	.text "FCotH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=39048					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9908	05					.byte (("FCotH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>9909	10					.byte WordFlags	;wh_Flags
>990a	03					.byte 3	;wh_CodeLength
>990b	2a					  .byte LinkDisplacement	; offset to previous nt
=$990c					XtPtr1 ::= *
=39048					WordListLink ::= Nt0 ; remember the nt of this word for later
.990c	20 e2 98	jsr $98e2	FCotH:		jsr FTanH
.990f	4c 3d 8d	jmp $8d3d			jmp F1Slash
=6					CodeLen	.var *-XtPtr1
=$9912					Here1 = *	; remember here
>990a	06					.byte CodeLen	;patch wh_CodeLength
>9912	46 41 53 69 6e 48		Name0:	.text "FASinH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39064					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9918	06					.byte (("FASinH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>9919	10					.byte WordFlags	;wh_Flags
>991a	03					.byte 3	;wh_CodeLength
>991b	10					  .byte LinkDisplacement	; offset to previous nt
=$991c					XtPtr1 ::= *
=39064					WordListLink ::= Nt0 ; remember the nt of this word for later
.991c	20 48 85	jsr $8548	FASinH:		jsr FDup	; X X
.991f	20 6e 8c	jsr $8c6e			jsr FSqr	; X X*X
.9922	20 44 8b	jsr $8b44			jsr F1Plus	; X X*X+1
.9925	20 19 8f	jsr $8f19			jsr FSqrt	; X sqrt(X*X+1)
.9928	20 10 8b	jsr $8b10			jsr FPlus	;
.992b	4c bb 94	jmp $94bb			jmp FLn
=18					CodeLen	.var *-XtPtr1
=$992e					Here1 = *	; remember here
>991a	12					.byte CodeLen	;patch wh_CodeLength
>992e	46 41 43 73 63 48		Name0:	.text "FACscH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39092					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9934	06					.byte (("FACscH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>9935	10					.byte WordFlags	;wh_Flags
>9936	03					.byte 3	;wh_CodeLength
>9937	1c					  .byte LinkDisplacement	; offset to previous nt
=$9938					XtPtr1 ::= *
=39092					WordListLink ::= Nt0 ; remember the nt of this word for later
.9938	20 3d 8d	jsr $8d3d	FACscH:		jsr F1Slash
.993b	4c 1c 99	jmp $991c			jmp FASinH
=6					CodeLen	.var *-XtPtr1
=$993e					Here1 = *	; remember here
>9936	06					.byte CodeLen	;patch wh_CodeLength
>993e	46 41 43 6f 73 48		Name0:	.text "FACosH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39108					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9944	06					.byte (("FACosH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>9945	10					.byte WordFlags	;wh_Flags
>9946	03					.byte 3	;wh_CodeLength
>9947	10					  .byte LinkDisplacement	; offset to previous nt
=$9948					XtPtr1 ::= *
=39108					WordListLink ::= Nt0 ; remember the nt of this word for later
.9948	20 48 85	jsr $8548	FACosH:		jsr FDup
.994b	20 6e 8c	jsr $8c6e			jsr FSqr
.994e	20 74 8b	jsr $8b74			jsr F1Minus
.9951	20 19 8f	jsr $8f19			jsr FSqrt
.9954	20 10 8b	jsr $8b10			jsr FPlus
.9957	4c bb 94	jmp $94bb			jmp FLn
=18					CodeLen	.var *-XtPtr1
=$995a					Here1 = *	; remember here
>9946	12					.byte CodeLen	;patch wh_CodeLength
>995a	46 41 53 65 63 48		Name0:	.text "FASecH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39136					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9960	06					.byte (("FASecH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>9961	10					.byte WordFlags	;wh_Flags
>9962	03					.byte 3	;wh_CodeLength
>9963	1c					  .byte LinkDisplacement	; offset to previous nt
=$9964					XtPtr1 ::= *
=39136					WordListLink ::= Nt0 ; remember the nt of this word for later
.9964	20 3d 8d	jsr $8d3d	FASecH:		jsr F1Slash
.9967	4c 48 99	jmp $9948			jmp FACosH
=6					CodeLen	.var *-XtPtr1
=$996a					Here1 = *	; remember here
>9962	06					.byte CodeLen	;patch wh_CodeLength
>996a	46 41 54 61 6e 48		Name0:	.text "FATanH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39152					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9970	06					.byte (("FATanH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>9971	10					.byte WordFlags	;wh_Flags
>9972	03					.byte 3	;wh_CodeLength
>9973	10					  .byte LinkDisplacement	; offset to previous nt
=$9974					XtPtr1 ::= *
=39152					WordListLink ::= Nt0 ; remember the nt of this word for later
.9974	20 48 85	jsr $8548	FAtanH:		jsr FDup	; x x
.9977	20 44 8b	jsr $8b44			jsr F1Plus	; x x+1
.997a	20 cc 85	jsr $85cc			jsr FSwap	; 1+x x
.997d	20 de 88	jsr $88de			jsr F1
.9980	20 cc 85	jsr $85cc			jsr FSwap
.9983	20 50 8b	jsr $8b50			jsr FMinus	; 1+x 1-x
.9986	20 99 8c	jsr $8c99			jsr FSlash	; (1+x)/(1-x)
.9989	20 bb 94	jsr $94bb			jsr FLn
.998c	4c 92 89	jmp $8992			jmp F2Slash
=27					CodeLen	.var *-XtPtr1
=$998f					Here1 = *	; remember here
>9972	1b					.byte CodeLen	;patch wh_CodeLength
>998f	46 41 43 6f 74 48		Name0:	.text "FACotH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39189					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9995	06					.byte (("FACotH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>9996	10					.byte WordFlags	;wh_Flags
>9997	03					.byte 3	;wh_CodeLength
>9998	25					  .byte LinkDisplacement	; offset to previous nt
=$9999					XtPtr1 ::= *
=39189					WordListLink ::= Nt0 ; remember the nt of this word for later
.9999	20 3d 8d	jsr $8d3d	FACotH: 	jsr F1Slash
.999c	4c 74 99	jmp $9974			jmp FATanH
=6					CodeLen	.var *-XtPtr1
=$999f					Here1 = *	; remember here
>9997	06					.byte CodeLen	;patch wh_CodeLength
>999f	45 64				Name0:	.text "Ed"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=39201					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>99a1	82					.byte (("Ed"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>99a2	10					.byte WordFlags	;wh_Flags
>99a3	03					.byte 3	;wh_CodeLength
>99a4	0c					  .byte LinkDisplacement	; offset to previous nt
=$99a5					XtPtr1 ::= *
=39201					WordListLink ::= Nt0 ; remember the nt of this word for later
.99a5	4c a8 99	jmp $99a8	Ed:		jmp ed6502
=3					CodeLen	.var *-XtPtr1
=$99a8					Here1 = *	; remember here
>99a3	03					.byte CodeLen	;patch wh_CodeLength
=$1e					ed_head	 = editor1  ; pointer to first list element (addr) (2 bytes)
=$20					ed_cur	 = editor2  ; current line number (1 is first line) (2 bytes)
=$22					ed_flags = editor3  ; Flags used by ed, where
.99a8					ed6502:
.99a8	ad 00 03	lda $0300			lda base
.99ab	85 23		sta $23				sta editor3+1
.99ad	20 c9 b1	jsr $b1c9			jsr Decimal
.99b0	a9 00		lda #$00			lda #0
.99b2	85 1e		sta $1e				sta ed_head
.99b4	85 1f		sta $1f				sta ed_head+1
.99b6	85 20		sta $20				sta ed_cur
.99b8	85 21		sta $21				sta ed_cur+1
.99ba	85 22		sta $22				sta ed_flags
.99bc	20 f0 b7	jsr $b7f0			jsr Zero
.99bf	20 f0 b7	jsr $b7f0			jsr Zero		; ( addr-t u-t )
.99c2	20 69 ab	jsr $ab69			jsr CR
.99c5					ed_input_loop:
.99c5	a9 7e		lda #$7e			lda #$ff-%10000001
.99c7	25 22		and $22				and ed_flags
.99c9	85 22		sta $22				sta ed_flags
.99cb	20 6d 9e	jsr $9e6d			jsr ed_get_input
.99ce	a5 06		lda $06				lda ciblen+0
.99d0	d0 1e		bne $99f0			bne _command_mode
.99d2	a5 20		lda $20				lda ed_cur+0
.99d4	a4 21		ldy $21				ldy ed_cur+1
.99d6	20 b3 b7	jsr $b7b3			jsr PushYA		; ( addr-t u-t u )
.99d9	a9 80		lda #$80			lda #%10000000
.99db	05 22		ora $22				ora ed_flags
.99dd	85 22		sta $22				sta ed_flags
.99df	20 5a ca	jsr $ca5a			jsr One_Plus		; ( addr-t u-t u+1 )
.99e2	20 88 9e	jsr $9e88			jsr ed_is_valid_line
.99e5	b0 03		bcs $99ea			bcs +
.99e7	4c 5d 9e	jmp $9e5d			jmp ed_error_1drop	; New line number is not legal, abort
.99ea					+
.99ea	20 f0 b7	jsr $b7f0			jsr Zero		; ( addr-t u-t u+1 0 )
.99ed	4c af 9a	jmp $9aaf			jmp _line_number_only_from_external
.99f0					_command_mode:
.99f0	20 f0 b7	jsr $b7f0			jsr Zero		; parameter 1 is NOS ( addr-t u-t 0 )
.99f3	20 f0 b7	jsr $b7f0			jsr Zero		; parameter 2 is TOS ( addr-t u-t 0 0 )
.99f6	a0 00		ldy #$00			ldy #0			; get char
.99f8	b1 04		lda ($04),y			lda (cib),y
.99fa	c9 2e		cmp #$2e			cmp #'.'
.99fc	d0 31		bne $9a2f			bne _prefix_dollar
.99fe	20 7c 9e	jsr $9e7c			jsr ed_have_text
.9a01	a5 20		lda $20				lda ed_cur
.9a03	95 26		sta $26,x			sta DStack+2,x
.9a05	a5 21		lda $21				lda ed_cur+1
.9a07	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9a09	a9 80		lda #$80			lda #%10000000
.9a0b	05 22		ora $22				ora ed_flags
.9a0d	85 22		sta $22				sta ed_flags
.9a0f	a5 06		lda $06				lda ciblen
.9a11	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9a13	d0 03		bne $9a18			bne +
.9a15	4c af 9a	jmp $9aaf			jmp _line_number_only_from_external
.9a18					+
.9a18	a5 04		lda $04				lda cib+0
.9a1a	a4 05		ldy $05				ldy cib+1
.9a1c	20 b3 b7	jsr $b7b3			jsr PushYA
.9a1f	a5 06		lda $06				lda ciblen+0
.9a21	a4 07		ldy $07				ldy ciblen+1
.9a23	20 b3 b7	jsr $b7b3			jsr PushYA
.9a26	20 35 ca	jsr $ca35			jsr One_Minus		; ( addr-t u-t para1 0 addr u-1 )
.9a29	20 64 ca	jsr $ca64			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr+1 u-1 )
.9a2c	4c 01 9b	jmp $9b01			jmp _check_for_para2
.9a2f					_prefix_dollar:
.9a2f	c9 24		cmp #$24			cmp #'$'
.9a31	d0 1f		bne $9a52			bne _prefix_percent
.9a33	20 7c 9e	jsr $9e7c			jsr ed_have_text
.9a36	e8		inx				inx
.9a37	e8		inx				inx			; ( addr-t u-t 0 )
.9a38	20 a9 9e	jsr $9ea9			jsr ed_last_line	; ( addr-t u-t 0 para1 )
.9a3b	20 73 cf	jsr $cf73			jsr Swap		; ( addr-t u-t para1 0 )
.9a3e	a9 80		lda #$80			lda #%10000000
.9a40	05 22		ora $22				ora ed_flags
.9a42	85 22		sta $22				sta ed_flags
.9a44	a5 06		lda $06				lda ciblen
.9a46	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9a48	d0 03		bne $9a4d			bne +
.9a4a	4c af 9a	jmp $9aaf			jmp _line_number_only_from_external
.9a4d					+
.9a4d	a0 01		ldy #$01			ldy #1
.9a4f	4c 77 9b	jmp $9b77			jmp _check_command
.9a52					_prefix_percent:
.9a52	c9 25		cmp #$25			cmp #'%'
.9a54	f0 04		beq $9a5a			beq _whole_text
.9a56	c9 2c		cmp #$2c			cmp #','
.9a58	d0 1b		bne $9a75			bne _prefix_semicolon
.9a5a					_whole_text:
.9a5a	20 7c 9e	jsr $9e7c			jsr ed_have_text
.9a5d	a9 01		lda #$01			lda #1
.9a5f	95 26		sta $26,x			sta DStack+2,x		; LSB of NOS is para 1
.9a61	a9 00		lda #$00			lda #0
.9a63	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t para1 0 )
.9a65					_semicolon_entry:
.9a65	e8		inx				inx
.9a66	e8		inx				inx			; DROP ( addr-t u-t para1 )
.9a67	20 a9 9e	jsr $9ea9			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9a6a	a9 80		lda #$80			lda #%10000000
.9a6c	05 22		ora $22				ora ed_flags
.9a6e	85 22		sta $22				sta ed_flags
.9a70	a0 01		ldy #$01			ldy #1
.9a72	4c 77 9b	jmp $9b77			jmp _check_command
.9a75					_prefix_semicolon:
.9a75	c9 3b		cmp #$3b			cmp #';'
.9a77	d0 0e		bne $9a87			bne _prefix_number
.9a79	20 7c 9e	jsr $9e7c			jsr ed_have_text
.9a7c	a5 20		lda $20				lda ed_cur
.9a7e	95 26		sta $26,x			sta DStack+2,x
.9a80	a5 21		lda $21				lda ed_cur+1
.9a82	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9a84	4c 65 9a	jmp $9a65			jmp _semicolon_entry
.9a87					_prefix_number:
.9a87	20 f0 b7	jsr $b7f0			jsr Zero
.9a8a	20 f0 b7	jsr $b7f0			jsr Zero		; ( addr-t u-t 0 0 0 0 )
.9a8d	a5 04		lda $04				lda cib+0
.9a8f	a4 05		ldy $05				ldy cib+1
.9a91	20 b3 b7	jsr $b7b3			jsr PushYA
.9a94	a5 06		lda $06				lda ciblen+0
.9a96	a4 07		ldy $07				ldy ciblen+1
.9a98	20 b3 b7	jsr $b7b3			jsr PushYA		; ( addr-t u-t 0 0 0 0 cib ciblen )
.9a9b	20 4d b0	jsr $b04d			jsr To_Number		; ( addr-t u-t 0 0 ud addr2 u2 )
.9a9e	b5 24		lda $24,x			lda DStack+0,x
.9aa0	15 25		ora $25,x			ora DStack+1,x
.9aa2	d0 25		bne $9ac9			bne _have_unconverted_chars
.9aa4	20 36 c5	jsr $c536			jsr Two_Drop		; ( addr-t u-t 0 0 ud )
.9aa7	20 0d c0	jsr $c00d			jsr D_To_S		; ( addr-t u-t 0 0 u )
.9aaa	20 76 ce	jsr $ce76			jsr Not_Rot		; ( addr-t u-t u 0 0 )
.9aad	e8		inx				inx
.9aae	e8		inx				inx			; ( addr-t u-t u 0 ) drop through
.9aaf					_line_number_only_from_external:
.9aaf	20 73 cf	jsr $cf73			jsr Swap		; ( addr-t u-t 0 u )
.9ab2	20 88 9e	jsr $9e88			jsr ed_is_valid_line
.9ab5	b0 03		bcs $9aba			bcs +
.9ab7	4c 5b 9e	jmp $9e5b			jmp ed_error_2drop
.9aba					+
.9aba	20 73 cf	jsr $cf73			jsr Swap		; ( addr-t u-t u 0 )
.9abd	20 e8 9e	jsr $9ee8			jsr ed_para1_to_cur
.9ac0	a9 80		lda #$80			lda #%10000000
.9ac2	05 22		ora $22				ora ed_flags
.9ac4	85 22		sta $22				sta ed_flags
.9ac6	4c 46 9d	jmp $9d46			jmp ed_cmd_p_from_external
.9ac9					_have_unconverted_chars:
.9ac9	a5 06		lda $06				lda ciblen+0
.9acb	d5 24		cmp $24,x			cmp DStack+0,x
.9acd	d0 16		bne $9ae5			bne _no_command_yet
.9acf	a5 07		lda $07				lda ciblen+1
.9ad1	d5 25		cmp $25,x			cmp DStack+1,x
.9ad3	d0 10		bne $9ae5			bne _no_command_yet
.9ad5	8a		txa				txa
.9ad6	18		clc				clc
.9ad7	69 08		adc #$08			adc #8
.9ad9	aa		tax				tax			; ( addr-t u-t 0 0 )
.9ada	a9 7f		lda #$7f			lda #$ff-%10000000
.9adc	25 22		and $22				and ed_flags
.9ade	85 22		sta $22				sta ed_flags
.9ae0	a0 00		ldy #$00			ldy #0
.9ae2	4c 77 9b	jmp $9b77			jmp _check_command
.9ae5					_no_command_yet:
.9ae5	20 e0 ce	jsr $cee0			jsr To_R		; >R ( ... 0 0 ud addr2 ) (R: u2)
.9ae8	20 76 ce	jsr $ce76			jsr Not_Rot		; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.9aeb	20 0d c0	jsr $c00d			jsr D_To_S		; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.9aee	b5 24		lda $24,x			lda DStack+0,x		; LSB
.9af0	95 2a		sta $2a,x			sta DStack+6,x
.9af2	b5 25		lda $25,x			lda DStack+1,x		; MSB
.9af4	95 2b		sta $2b,x			sta DStack+7,x		; ( ... para1 0 addr2 para1 ) (R: u2)
.9af6	e8		inx				inx
.9af7	e8		inx				inx			; ( addr-t u-t para1 0 addr2 ) (R: u2)
.9af8	20 fe ce	jsr $cefe			jsr R_From		; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.9afb	a9 80		lda #$80			lda #%10000000
.9afd	05 22		ora $22				ora ed_flags
.9aff	85 22		sta $22				sta ed_flags
.9b01					_check_for_para2:
.9b01	a1 26		lda ($26,x)			lda (DStack+2,x)
.9b03	c9 2c		cmp #$2c			cmp #','
.9b05	f0 0c		beq $9b13			beq _got_comma
.9b07	38		sec				sec
.9b08	a5 06		lda $06				lda ciblen
.9b0a	f5 24		sbc $24,x			sbc DStack+0,x
.9b0c	a8		tay				tay
.9b0d	20 36 c5	jsr $c536			jsr Two_Drop		; Remove the leftover stuff from >NUMBER
.9b10	4c 77 9b	jmp $9b77			jmp _check_command
.9b13					_got_comma:
.9b13	20 64 ca	jsr $ca64			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr2+1 u2 )
.9b16	20 35 ca	jsr $ca35			jsr One_Minus		; ( addr-t u-t para1 0 addr2+1 u2-1 )
.9b19	a1 26		lda ($26,x)			lda (DStack+2,x)
.9b1b	c9 24		cmp #$24			cmp #'$'
.9b1d	d0 16		bne $9b35			bne _para2_not_dollar
.9b1f	38		sec				sec
.9b20	a5 06		lda $06				lda ciblen
.9b22	f5 26		sbc $26,x			sbc DStack+2,x
.9b24	a8		tay				tay
.9b25	c8		iny				iny
.9b26	98		tya				tya
.9b27	48		pha				pha
.9b28	8a		txa				txa
.9b29	18		clc				clc
.9b2a	69 06		adc #$06			adc #6
.9b2c	aa		tax				tax			; ( addr-t u-t para1 )
.9b2d	20 a9 9e	jsr $9ea9			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9b30	68		pla				pla
.9b31	a8		tay				tay
.9b32	4c 77 9b	jmp $9b77			jmp _check_command
.9b35					_para2_not_dollar:
.9b35	20 e0 ce	jsr $cee0			jsr To_R		; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.9b38	20 f0 b7	jsr $b7f0			jsr Zero		; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.9b3b	20 f0 b7	jsr $b7f0			jsr Zero		; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.9b3e	20 51 ce	jsr $ce51			jsr Rot		; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.9b41	20 fe ce	jsr $cefe			jsr R_From		; R> ( ... para1 0 0 0 addr2+1 u2-1)
.9b44	20 56 cf	jsr $cf56			jsr Dup		; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.9b47	20 e0 ce	jsr $cee0			jsr To_R		; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.9b4a	20 4d b0	jsr $b04d			jsr To_Number	; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.9b4d	20 56 cf	jsr $cf56			jsr Dup		; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.9b50	20 fe ce	jsr $cefe			jsr R_From		; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.9b53	20 3e c8	jsr $c83e			jsr Equal		; = ( ... para1 0 ud addr3 u3 f )
.9b56	b5 24		lda $24,x			lda DStack+0,x
.9b58	15 25		ora $25,x			ora DStack+1,x
.9b5a	f0 08		beq $9b64			beq _second_number
.9b5c	8a		txa				txa
.9b5d	18		clc				clc
.9b5e	69 0c		adc #$0c			adc #12
.9b60	aa		tax				tax			; back to ( addr-t u-t )
.9b61	4c 5f 9e	jmp $9e5f			jmp ed_error
.9b64					_second_number:
.9b64	e8		inx				inx
.9b65	e8		inx				inx			; ( addr-t u-t para1 0 ud addr3 u3 )
.9b66	38		sec				sec
.9b67	a5 06		lda $06				lda ciblen
.9b69	f5 24		sbc $24,x			sbc DStack+0,x
.9b6b	48		pha				pha
.9b6c	20 36 c5	jsr $c536			jsr Two_drop		; 2DROP ( addr-t u-t para1 0 ud )
.9b6f	20 0d c0	jsr $c00d			jsr D_To_S		; D>S  ( addr-t u-t para1 0 para2 )
.9b72	20 90 c9	jsr $c990			jsr Nip			; NIP ( addr-t u-t para1 para2 )
.9b75	68		pla				pla
.9b76	a8		tay				tay
.9b77					_check_command:
.9b77	24 22		bit $22				bit ed_flags
.9b79	30 08		bmi $9b83			bmi _check_command_have_arg
.9b7b	a5 20		lda $20				lda ed_cur+0
.9b7d	95 26		sta $26,x			sta DStack+2,x
.9b7f	a5 21		lda $21				lda ed_cur+1
.9b81	95 27		sta $27,x			sta DStack+3,x
.9b83					_check_command_have_arg:
.9b83	b1 04		lda ($04),y			lda (cib),y		; get mystery char from input
.9b85	85 14		sta $14				sta tmp1+0
.9b87	85 15		sta $15				sta tmp1+1		; We need X for awhile, so it has to
.9b89	a2 ff		ldx #$ff			ldx #$ff		; for each char
.9b8b	e8		inx		_cmd_loop:	inx			;   next char
.9b8c	bd 0c 9f	lda $9f0c,x			lda ed_cmd_list,x
.9b8f	f0 13		beq $9ba4			beq _illegal_command	;   end of list?
.9b91	c5 14		cmp $14				cmp tmp1+0
.9b93	d0 f6		bne $9b8b			bne _cmd_loop		;   not found?
.9b95	8a		txa				txa
.9b96	0a		asl a				asl
.9b97	aa		tax				tax			; X * 2 for table
.9b98	bd 18 9f	lda $9f18,x			lda ed_cmd_table+1,x
.9b9b	48		pha				pha
.9b9c	bd 17 9f	lda $9f17,x			lda ed_Cmd_table+0,x
.9b9f	48		pha				pha
.9ba0	a6 15		ldx $15				ldx tmp1+1		; restore X
.9ba2	08		php				php
.9ba3	40		rti				rti			; jump to command routine
.9ba4					_illegal_command:
.9ba4	4c 5b 9e	jmp $9e5b			jmp ed_error_2drop
.9ba7					ed_next_command:
.9ba7	20 36 c5	jsr $c536			jsr Two_Drop		; ( addr-t u-t ) Fall through
.9baa					_next_command_empty:
.9baa	4c c5 99	jmp $99c5			jmp ed_input_loop
.9bad					ed_all_done:
.9bad	a9 00		lda #$00			lda #0
.9baf	85 06		sta $06				sta ciblen
.9bb1	85 07		sta $07				sta ciblen+1
.9bb3	20 36 c5	jsr $c536			jsr Two_drop			; ( addr-t u-t )
.9bb6	a5 23		lda $23				lda editor3+1
.9bb8	8d 00 03	sta $0300			sta base
.9bbb	60		rts				rts
.9bbc					ed_cmd_a:
.9bbc	e8		inx				inx
.9bbd	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9bbe					ed_entry_cmd_i:
.9bbe					ed_cmd_a_have_para:
.9bbe	20 cd 9e	jsr $9ecd			jsr ed_num_to_addr	  ;  ( addr-t u-t addr1 )
.9bc1	20 69 ab	jsr $ab69			jsr CR
.9bc4					_next_string_loop:
.9bc4	20 6d 9e	jsr $9e6d			jsr ed_get_input
.9bc7	a0 00		ldy #$00			ldy #0
.9bc9	b1 04		lda ($04),y			lda (cib),y
.9bcb	c9 2e		cmp #$2e			cmp #'.'
.9bcd	d0 18		bne $9be7			bne _add_line
.9bcf	a4 06		ldy $06				ldy ciblen
.9bd1	c0 01		cpy #$01			cpy #1
.9bd3	d0 12		bne $9be7			bne _add_line
.9bd5	a4 07		ldy $07				ldy ciblen+1
.9bd7	d0 0e		bne $9be7			bne _add_line
.9bd9	e8		inx				inx
.9bda	e8		inx				inx
.9bdb	a9 40		lda #$40			lda #%01000000
.9bdd	05 22		ora $22				ora ed_flags
.9bdf	85 22		sta $22				sta ed_flags
.9be1	20 69 ab	jsr $ab69			jsr CR
.9be4	4c c5 99	jmp $99c5			jmp ed_input_loop
.9be7					_add_line:
.9be7	20 56 cf	jsr $cf56			jsr Dup			; ( addr-t u-t addr1 addr1 )
.9bea	20 28 ca	jsr $ca28			jsr Here		; ( addr-t u-t addr1 addr1 here )
.9bed	20 73 cf	jsr $cf73			jsr Swap		; ( addr-t u-t addr1 here addr1 )
.9bf0	20 98 ce	jsr $ce98			jsr Fetch		; ( addr-t u-t addr1 here addr2 )
.9bf3	20 fb cc	jsr $ccfb			jsr Comma		; ( addr-t u-t addr1 here )
.9bf6	20 c4 cc	jsr $ccc4			jsr Tuck		; TUCK ( addr-t u-t here addr1 here )
.9bf9	20 73 cf	jsr $cf73			jsr Swap		; ( addr-t u-t here here addr1 )
.9bfc	20 b1 ce	jsr $ceb1			jsr Store		; ( addr-t u-t here )
.9bff	20 28 ca	jsr $ca28			jsr Here		; HERE ( addr-t u-t here here2)
.9c02	a9 04		lda #$04			lda #4
.9c04	20 e2 b7	jsr $b7e2			jsr PushZA
.9c07	20 a2 c0	jsr $c0a2			jsr Allot
.9c0a	e6 20		inc $20				inc ed_cur
.9c0c	d0 02		bne $9c10			bne +
.9c0e	e6 21		inc $21				inc ed_cur+1
.9c10					+
.9c10	20 28 ca	jsr $ca28			jsr Here	; ( addr-t u-t here here2 here3 )
.9c13	a5 04		lda $04				lda cib+0
.9c15	a4 05		ldy $05				ldy cib+1
.9c17	20 b3 b7	jsr $b7b3			jsr PushYA	; ( addr-t u-t here here2 here3 cib )
.9c1a	20 2f cf	jsr $cf2f			jsr Over	; ( addr-t u-t here here2 here3 cib here3 )
.9c1d	a5 06		lda $06				lda ciblen+0
.9c1f	a4 07		ldy $07				ldy ciblen+1
.9c21	20 b3 b7	jsr $b7b3			jsr PushYA	; ( addr-t u-t here here2 here3 cib here3 ciblen )
.9c24	20 7d ad	jsr $ad7d			jsr Move	; ( addr-t u-t here here2 here3 )
.9c27	18		clc				clc
.9c28	a5 00		lda $00				lda cp
.9c2a	65 06		adc $06				adc ciblen
.9c2c	85 00		sta $00				sta cp
.9c2e	90 06		bcc $9c36			bcc +
.9c30	a5 01		lda $01				lda cp+1
.9c32	65 07		adc $07				adc ciblen+1
.9c34	85 01		sta $01				sta cp+1
.9c36					+
.9c36	20 2f cf	jsr $cf2f			jsr Over		; ( addr-t u-t here here2 here3 here2 )
.9c39	20 b1 ce	jsr $ceb1			jsr Store		; ( addr-t u-t here here2 )
.9c3c	20 0a ca	jsr $ca0a			jsr Cell_Plus_NoUf	; ( addr-t u-t here here2+2 )
.9c3f	20 56 cf	jsr $cf56			jsr Dup			; ( addr-t u-t here here2+2 here2+2 )
.9c42	a5 06		lda $06				lda ciblen
.9c44	95 26		sta $26,x			sta DStack+2,x
.9c46	a5 07		lda $07				lda ciblen+1
.9c48	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t here ciblen here2+2 )
.9c4a	20 b1 ce	jsr $ceb1			jsr Store		; ( addr-t u-t here )
.9c4d	20 69 ab	jsr $ab69			jsr CR			; Add a line feed for visuals
.9c50	4c c4 9b	jmp $9bc4			jmp _next_string_loop
.9c53					ed_cmd_d:
.9c53	20 7c 9e	jsr $9e7c			jsr ed_have_text
.9c56	20 bf 9e	jsr $9ebf			jsr ed_no_line_zero
.9c59	b5 24		lda $24,x			lda DStack+0,x
.9c5b	15 25		ora $25,x			ora DStack+1,x
.9c5d	d0 09		bne $9c68			bne +
.9c5f	20 2f cf	jsr $cf2f			jsr Over		; ( addr-t u-t para1 0 para1 )
.9c62	20 9d 9c	jsr $9c9d			jsr _cmd_d_common	; ( addr-t u-t para1 0 )
.9c65	4c 91 9c	jmp $9c91			jmp _cmd_d_done
.9c68					+
.9c68	20 88 9e	jsr $9e88			jsr ed_is_valid_line	  ; result is in C flag
.9c6b	b0 03		bcs $9c70			bcs _cmd_d_loop
.9c6d	4c 5b 9e	jmp $9e5b			jmp ed_error_2drop
.9c70					_cmd_d_loop:
.9c70	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9c72	d5 26		cmp $26,x			cmp DStack+2,x
.9c74	b5 25		lda $25,x			lda DStack+1,x
.9c76	f5 27		sbc $27,x			sbc DStack+3,x
.9c78	90 0c		bcc $9c86			bcc _cmd_d_done_with_flag
.9c7a	20 56 cf	jsr $cf56			jsr Dup		; DUP ( addr-t u-t para1 para2 para2 )
.9c7d	20 9d 9c	jsr $9c9d			jsr _cmd_d_common	; ( addr-t u-t para1 para2 )
.9c80	20 35 ca	jsr $ca35			jsr One_minus	; 1- ( addr-t u-t para1 para2-1 )
.9c83	4c 70 9c	jmp $9c70			jmp _cmd_d_loop
.9c86					_cmd_d_done_with_flag:
.9c86	20 41 ca	jsr $ca41			jsr NOS_One_Minus
.9c89	b5 26		lda $26,x			lda DStack+2,x
.9c8b	85 20		sta $20				sta ed_cur
.9c8d	b5 27		lda $27,x			lda DStack+3,x
.9c8f	85 21		sta $21				sta ed_cur+1		; drop through to _cmd_d_done
.9c91					_cmd_d_done:
.9c91	a9 40		lda #$40			lda #%01000000
.9c93	05 22		ora $22				ora ed_flags
.9c95	85 22		sta $22				sta ed_flags
.9c97	20 69 ab	jsr $ab69			jsr CR
.9c9a	4c a7 9b	jmp $9ba7			jmp ed_next_command
.9c9d					_cmd_d_common:
.9c9d	20 56 cf	jsr $cf56			jsr Dup			; ( addr-t u-t u u )
.9ca0	20 cd 9e	jsr $9ecd			jsr ed_num_to_addr	; ( addr-t u-t u addr )
.9ca3	20 98 ce	jsr $ce98			jsr Fetch		; ( addr-t u-t u addr1 )
.9ca6	20 73 cf	jsr $cf73			jsr Swap		; ( addr-t u-t addr1 u )
.9ca9	20 35 ca	jsr $ca35			jsr One_minus		; ( addr-t u-t addr1 u-1 )
.9cac	20 cd 9e	jsr $9ecd			jsr ed_num_to_addr	; ( addr-t u-t addr1 addr-1 )
.9caf	4c b1 ce	jmp $ceb1			jmp Store		; ( addr-t u-t )
.9cb2					ed_cmd_equ:
.9cb2	a5 1e		lda $1e				lda ed_head
.9cb4	05 1f		ora $1f				ora ed_head+1
.9cb6	d0 06		bne $9cbe			bne _cmd_equ_have_text
.9cb8	20 f0 b7	jsr $b7f0			jsr Zero		; ( addr-t u-t para1 para2 0 )
.9cbb	4c de 9c	jmp $9cde			jmp _cmd_equ_done
.9cbe					_cmd_equ_have_text:
.9cbe	20 bf 9e	jsr $9ebf			jsr ed_no_line_zero
.9cc1	24 22		bit $22				bit ed_flags
.9cc3	30 0a		bmi $9ccf			bmi _cmd_equ_have_para
.9cc5	a5 20		lda $20				lda ed_cur+0		; ( addr-t u-t para1 para2 ? )
.9cc7	a4 21		ldy $21				ldy ed_cur+1
.9cc9	20 b3 b7	jsr $b7b3			jsr PushYA
.9ccc	4c de 9c	jmp $9cde			jmp _cmd_equ_done	; ( addr-t u-t para1 para2 cur )
.9ccf					_cmd_equ_have_para:
.9ccf	b5 24		lda $24,x			lda DStack+0,x
.9cd1	15 25		ora $25,x			ora DStack+1,x
.9cd3	d0 06		bne $9cdb			bne _cmd_equ_two_paras
.9cd5	20 2f cf	jsr $cf2f			jsr Over		; ( addr-t u-t para1 para2 para1)
.9cd8	4c de 9c	jmp $9cde			jmp _cmd_equ_done
.9cdb					_cmd_equ_two_paras:
.9cdb	20 56 cf	jsr $cf56			jsr Dup			; ( addr-t u-t para1 para2 para2) drop through
.9cde					_cmd_equ_done:
.9cde	20 69 ab	jsr $ab69			jsr CR			; number goes on new line
.9ce1	20 00 cc	jsr $cc00			jsr U_Dot		; ( addr-t u-t para1 para2 )
.9ce4	20 69 ab	jsr $ab69			jsr CR
.9ce7	4c a7 9b	jmp $9ba7			jmp ed_next_command
.9cea					ed_cmd_f:
.9cea	24 22		bit $22				bit ed_flags
.9cec	30 18		bmi $9d06			bmi _cmd_f_have_para
.9cee	20 69 ab	jsr $ab69			jsr CR
.9cf1	20 e0 ce	jsr $cee0			jsr To_R		; ( addr-t u-t 0 ) ( R: 0 )
.9cf4	20 51 ce	jsr $ce51			jsr Rot			; ( u-t 0 addr-t ) ( R: 0 )
.9cf7	20 56 cf	jsr $cf56			jsr Dup			; ( u-t 0 addr-t addr-t ) ( R: 0 )
.9cfa	20 00 cc	jsr $cc00			jsr U_Dot		; ( u-t 0 addr-t ) ( R: 0 )
.9cfd	20 76 ce	jsr $ce76			jsr Not_Rot		; ( addr-t u-t 0 ) ( R: 0 )
.9d00	20 fe ce	jsr $cefe			jsr R_From		; ( addr-t u-t 0 0 )
.9d03	4c 17 9d	jmp $9d17			jmp _cmd_f_done
.9d06					_cmd_f_have_para:
.9d06	20 2f cf	jsr $cf2f			jsr Over
.9d09	20 69 ab	jsr $ab69			jsr CR
.9d0c	20 00 cc	jsr $cc00			jsr U_Dot
.9d0f	b5 26		lda $26,x			lda DStack+2,x
.9d11	95 2a		sta $2a,x			sta DStack+6,x
.9d13	b5 27		lda $27,x			lda DStack+3,x
.9d15	95 2b		sta $2b,x			sta DStack+7,x		; fall through to _cmd_f_done
.9d17					_cmd_f_done:
.9d17	20 69 ab	jsr $ab69			jsr CR
.9d1a	4c a7 9b	jmp $9ba7			jmp ed_next_command
.9d1d					ed_cmd_i:
.9d1d	e8		inx				inx
.9d1e	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9d1f	24 22		bit $22				bit ed_flags
.9d21	30 08		bmi $9d2b			bmi _cmd_i_have_para
.9d23	a5 20		lda $20				lda ed_cur
.9d25	95 24		sta $24,x			sta DStack+0,x
.9d27	a5 21		lda $21				lda ed_cur+1
.9d29	95 25		sta $25,x			sta DStack+1,x		;  ( addr-t u-t cur ) drop through
.9d2b					_cmd_i_have_para:
.9d2b	b5 24		lda $24,x			lda DStack+0,x
.9d2d	15 25		ora $25,x			ora DStack+1,x
.9d2f	f0 09		beq $9d3a			beq _cmd_i_done
.9d31	20 35 ca	jsr $ca35			jsr One_minus		; ( addr-t u-t para1-1 )
.9d34	20 f0 b7	jsr $b7f0			jsr Zero		; ( addr-t u-t para1-1 0 )
.9d37	20 76 c9	jsr $c976			jsr Max			; ( addr-t u-t para1-1 | 0 )
.9d3a					_cmd_i_done:
.9d3a	4c be 9b	jmp $9bbe			jmp ed_entry_cmd_i
.9d3d					ed_cmd_n:
.9d3d	a9 01		lda #$01			lda #%00000001
.9d3f	05 22		ora $22				ora ed_flags
.9d41	85 22		sta $22				sta ed_flags
.9d43	4c 4c 9d	jmp $9d4c			jmp ed_cmd_p_entry_for_cmd_n
.9d46					ed_cmd_p:
.9d46					ed_cmd_p_from_external:
.9d46	a9 fe		lda #$fe			lda #$ff-%00000001
.9d48	25 22		and $22				and ed_flags
.9d4a	85 22		sta $22				sta ed_flags
.9d4c					ed_cmd_p_entry_for_cmd_n:
.9d4c	20 7c 9e	jsr $9e7c			jsr ed_have_text
.9d4f	20 bf 9e	jsr $9ebf			jsr ed_no_line_zero
.9d52	20 69 ab	jsr $ab69			jsr CR
.9d55	b5 24		lda $24,x			lda DStack+0,x
.9d57	15 25		ora $25,x			ora DStack+1,x
.9d59	d0 11		bne $9d6c			bne _cmd_p_loop
.9d5b	b5 26		lda $26,x			lda DStack+2,x
.9d5d	85 20		sta $20				sta ed_cur
.9d5f	b5 27		lda $27,x			lda DStack+3,x
.9d61	85 21		sta $21				sta ed_cur+1
.9d63	20 2f cf	jsr $cf2f			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9d66	20 8d 9d	jsr $9d8d			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9d69	4c 8a 9d	jmp $9d8a			jmp _cmd_p_all_done
.9d6c					_cmd_p_loop:
.9d6c	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9d6e	d5 26		cmp $26,x			cmp DStack+2,x
.9d70	b5 25		lda $25,x			lda DStack+1,x
.9d72	f5 27		sbc $27,x			sbc DStack+3,x
.9d74	90 0c		bcc $9d82			bcc _cmd_p_done
.9d76	20 2f cf	jsr $cf2f			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9d79	20 8d 9d	jsr $9d8d			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9d7c	20 64 ca	jsr $ca64			jsr NOS_One_Plus
.9d7f	4c 6c 9d	jmp $9d6c			jmp _cmd_p_loop
.9d82					_cmd_p_done:
.9d82	b5 24		lda $24,x			lda DStack+0,x
.9d84	85 20		sta $20				sta ed_cur
.9d86	b5 25		lda $25,x			lda DStack+1,x
.9d88	85 21		sta $21				sta ed_cur+1
.9d8a					_cmd_p_all_done:
.9d8a	4c a7 9b	jmp $9ba7			jmp ed_next_command
.9d8d					_cmd_p_common:
.9d8d	a5 22		lda $22				lda ed_flags
.9d8f	4a		lsr a				lsr			; bit 0 now in carry
.9d90	90 0b		bcc $9d9d			bcc _cmd_p_common_no_num
.9d92	20 56 cf	jsr $cf56			jsr Dup			; ( addr-t u-t para1 para1 )
.9d95	20 00 cc	jsr $cc00			jsr U_Dot		; ( addr-t u-t para1 )
.9d98	a9 09		lda #$09			lda #AscHT
.9d9a	20 c0 cd	jsr $cdc0			jsr Emit_A
.9d9d					_cmd_p_common_no_num:
.9d9d	20 cd 9e	jsr $9ecd			jsr ed_num_to_addr	  ; ( addr-t u-t addr )
.9da0	4c f1 9e	jmp $9ef1			jmp ed_print_addr
.9da3					ed_cmd_q:
.9da3	24 22		bit $22				bit ed_flags		; bit 6 is change flag
.9da5	50 03		bvc $9daa			bvc +
.9da7	4c 5b 9e	jmp $9e5b			jmp ed_error_2drop
.9daa					+
.9daa	4c ad 9b	jmp $9bad			jmp ed_all_done		   ; can't fall thru because of PLX
.9dad					ed_cmd_qq:
.9dad	4c ad 9b	jmp $9bad			jmp ed_all_done
.9db0					ed_cmd_w:
.9db0	20 7c 9e	jsr $9e7c			jsr ed_have_text
.9db3	24 22		bit $22				bit ed_flags		; parameter given?
.9db5	30 12		bmi $9dc9			bmi _cmd_w_have_para
.9db7	b5 2b		lda $2b,x			lda DStack+7,x		; $0000 thru $00ff ?
.9db9	d0 03		bne $9dbe			bne +
.9dbb	4c 5b 9e	jmp $9e5b			jmp ed_error_2drop
.9dbe					+
.9dbe	b5 2a		lda $2a,x			lda DStack+6,x
.9dc0	95 26		sta $26,x			sta DStack+2,x
.9dc2	b5 2b		lda $2b,x			lda DStack+7,x
.9dc4	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t addr-t ? )
.9dc6	4c d1 9d	jmp $9dd1			jmp _cmd_w_para_ready
.9dc9					_cmd_w_have_para:
.9dc9	b5 26		lda $26,x			lda DStack+2,x
.9dcb	95 2a		sta $2a,x			sta DStack+6,x
.9dcd	b5 27		lda $27,x			lda DStack+3,x
.9dcf	95 2b		sta $2b,x			sta DStack+7,x		; drop through to _cmd_w_para_ready
.9dd1					_cmd_w_para_ready:
.9dd1	a9 1e		lda #$1e			lda #<ed_head
.9dd3	95 24		sta $24,x			sta DStack+0,x
.9dd5	a9 00		lda #$00			lda #>ed_head
.9dd7	95 25		sta $25,x			sta DStack+1,x		; ( addr-t u-t addr-t addr-h )
.9dd9	20 2f cf	jsr $cf2f			jsr Over		; ( addr-t u-t addr-t addr-h addr-t )
.9ddc	20 e0 ce	jsr $cee0			jsr To_R		; ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.9ddf					_cmd_w_loop:
.9ddf	20 98 ce	jsr $ce98			jsr Fetch		; ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.9de2	b5 24		lda $24,x			lda DStack+0,x
.9de4	15 25		ora $25,x			ora DStack+1,x
.9de6	f0 4d		beq $9e35			beq _cmd_w_eol
.9de8	20 a4 cc	jsr $cca4			jsr Two_dup		; ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.9deb	20 66 c6	jsr $c666			jsr Two_to_r		; ( addr-t addr-1 ) (R: ... )
.9dee	20 0a ca	jsr $ca0a			jsr Cell_Plus_NoUf	; ( addr-t addr1+2 ) (R: ... )
.9df1	20 56 cf	jsr $cf56			jsr Dup			; ( addr-t addr1+2 addr1+2 ) ( R: ... )
.9df4	20 98 ce	jsr $ce98			jsr Fetch		; ( addr-t addr1+2 addr-s ) ( R: ... )
.9df7	20 73 cf	jsr $cf73			jsr Swap		; ( addr-t addr-s addr1+2 ) ( R: ... )
.9dfa	20 0a ca	jsr $ca0a			jsr Cell_Plus_NoUf	; ( addr-t addr-s addr1+2 ) (R: ... )
.9dfd	20 98 ce	jsr $ce98			jsr Fetch		; ( addr-t addr-s u-s ) ( R: ... )
.9e00	20 76 ce	jsr $ce76			jsr Not_Rot		; ( u-s addr-t addr-s ) ( R: ... )
.9e03	20 73 cf	jsr $cf73			jsr Swap		; ( u-s addr-s addr-t ) ( R: ... )
.9e06	20 51 ce	jsr $ce51			jsr Rot			; (addr-s addr-t u-s ) ( R: ... )
.9e09	20 56 cf	jsr $cf56			jsr Dup			; (addr-s addr-t u-s u-s ) ( R: ... )
.9e0c	20 e0 ce	jsr $cee0			jsr To_R		; (addr-s addr-t u-s ) ( R: ... u-s )
.9e0f	20 7d ad	jsr $ad7d			jsr Move		; ( )( R: addr-t addr-1 addr-t )
.9e12	20 fe ce	jsr $cefe			jsr R_From		; ( u-s )  ( R: addr-t addr-h addr-t )
.9e15	20 42 c6	jsr $c642			jsr Two_r_from		; ( u-s addr-t addr-h ) ( R: addr-t )
.9e18	20 76 ce	jsr $ce76			jsr Not_Rot		; ( addr-h u-s addr-t ) ( R: addr-t )
.9e1b	20 9f cb	jsr $cb9f			jsr Plus		; ( addr-h addr-t1 ) ( R: addr-t )
.9e1e	20 56 cf	jsr $cf56			jsr Dup			; ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.9e21	a9 0a		lda #$0a			lda #AscLF
.9e23	20 e2 b7	jsr $b7e2			jsr PushZA		; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.9e26	20 73 cf	jsr $cf73			jsr Swap		; ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.9e29	20 b1 ce	jsr $ceb1			jsr Store		; ( addr-h addr-t1 ) ( R: addr-t )
.9e2c	20 5a ca	jsr $ca5a			jsr One_plus		; ( addr-h addr-t1+1 ) ( R: addr-t )
.9e2f	20 73 cf	jsr $cf73			jsr Swap		; ( addr-t1+1 addr-h ) ( R: addr-t )
.9e32	4c df 9d	jmp $9ddf			jmp _cmd_w_loop
.9e35					_cmd_w_eol:
.9e35	20 73 cf	jsr $cf73			jsr Swap		; ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.9e38	20 fe ce	jsr $cefe			jsr R_From		; ( addr-t u-t addr-n addr-tn addr-t )
.9e3b	20 b7 cb	jsr $cbb7			jsr Minus		; ( addr-t u-t addr-n u )
.9e3e	b5 24		lda $24,x			lda DStack+0,x
.9e40	95 28		sta $28,x			sta DStack+4,x
.9e42	b5 25		lda $25,x			lda DStack+1,x
.9e44	95 29		sta $29,x			sta DStack+5,x		; ( addr-t u addr-n u )
.9e46	20 69 ab	jsr $ab69			jsr CR
.9e49	20 56 cf	jsr $cf56			jsr Dup			; ( addr-t u addr-n u u )
.9e4c	20 00 cc	jsr $cc00			jsr U_Dot		; ( addr-t u addr-n u )
.9e4f	20 69 ab	jsr $ab69			jsr CR
.9e52	a9 bf		lda #$bf			lda #$ff-%01000000
.9e54	25 22		and $22				and ed_flags
.9e56	85 22		sta $22				sta ed_flags
.9e58	4c a7 9b	jmp $9ba7			jmp ed_next_command
.9e5b					ed_error_2drop:
.9e5b	e8		inx				inx			; Drop para2
.9e5c	e8		inx				inx
.9e5d					ed_error_1drop:
.9e5d	e8		inx				inx			; Drop para1
.9e5e	e8		inx				inx
.9e5f					ed_error:
.9e5f	20 69 ab	jsr $ab69			jsr CR
.9e62	a9 3f		lda #$3f			lda #'?'
.9e64	20 c0 cd	jsr $cdc0			jsr Emit_A
.9e67	20 69 ab	jsr $ab69			jsr CR
.9e6a	4c c5 99	jmp $99c5			jmp ed_input_loop
.9e6d					ed_get_input:
.9e6d	20 66 c2	jsr $c266			jsr Refill		;  ( addr-t u-t f )
.9e70	b5 24		lda $24,x			lda DStack+0,x
.9e72	d0 05		bne $9e79			bne +
.9e74	68		pla				pla
.9e75	68		pla				pla
.9e76	4c 5d 9e	jmp $9e5d			jmp ed_error_1drop
.9e79					+
.9e79	e8		inx				inx
.9e7a	e8		inx				inx
.9e7b	60		rts				rts
.9e7c					ed_have_text:
.9e7c	a5 1e		lda $1e				lda ed_head
.9e7e	05 1f		ora $1f				ora ed_head+1
.9e80	d0 05		bne $9e87			bne +
.9e82	68		pla				pla
.9e83	68		pla				pla
.9e84	4c 5f 9e	jmp $9e5f			jmp ed_error
.9e87					+
.9e87	60		rts				rts
.9e88					ed_is_valid_line:
.9e88	38		sec				sec				; default is legal line number
.9e89	b5 24		lda $24,x			lda DStack+0,x
.9e8b	15 25		ora $25,x			ora DStack+1,x
.9e8d	f0 18		beq $9ea7			beq _nope_zero	; ( n )
.9e8f	20 56 cf	jsr $cf56			jsr Dup				; ( n n )
.9e92	20 a9 9e	jsr $9ea9			jsr ed_last_line		; ( n n last )
.9e95	20 73 cf	jsr $cf73			jsr Swap			; ( n last n )
.9e98	20 72 c8	jsr $c872			jsr Less_Than			; ( n f )
.9e9b	b5 24		lda $24,x			lda DStack+0,x			; 0 flag is good
.9e9d	15 25		ora $25,x			ora DStack+1,x
.9e9f	d0 04		bne $9ea5			bne _too_small
.9ea1	e8		inx				inx
.9ea2	e8		inx				inx			; DROP flag ( n )
.9ea3	38		sec				sec			; signal valid
.9ea4	60		rts				rts
.9ea5					_too_small:
.9ea5	e8		inx				inx
.9ea6	e8		inx				inx
.9ea7					_nope_zero:
.9ea7	18		clc				clc			; signal not valid
.9ea8	60		rts				rts
.9ea9					ed_last_line:
.9ea9	20 f0 b7	jsr $b7f0			jsr Zero		; Set counter to zero
.9eac	a9 1e		lda #$1e			lda #ed_head
.9eae	20 e2 b7	jsr $b7e2			jsr PushZA		; ( count addr )
.9eb1					_loop:
.9eb1	20 98 ce	jsr $ce98			jsr Fetch		; ( count addr|0 )
.9eb4	b5 25		lda $25,x			lda DStack+1,x		; at end-of-list?
.9eb6	f0 06		beq $9ebe			beq _done
.9eb8	20 64 ca	jsr $ca64			jsr NOS_One_Plus	; Increase counter
.9ebb	4c b1 9e	jmp $9eb1			jmp _loop		; continue
.9ebe					_done:
.9ebe	60		rts				rts
.9ebf					ed_no_line_zero:
.9ebf	b5 26		lda $26,x			lda DStack+2,x
.9ec1	15 27		ora $27,x			ora DStack+3,x
.9ec3	d0 07		bne $9ecc			bne _done
.9ec5	24 22		bit $22				bit ed_flags
.9ec7	10 03		bpl $9ecc			bpl _done
.9ec9	4c 5b 9e	jmp $9e5b			jmp ed_error_2drop
.9ecc					_done:
.9ecc	60		rts				rts
.9ecd					ed_num_to_addr:
.9ecd	a9 1e		lda #$1e			lda #ed_head
.9ecf	20 e2 b7	jsr $b7e2			jsr PushZA		; ( u addr-h )
.9ed2	4c df 9e	jmp $9edf			jmp _test
.9ed5					_loop:
.9ed5	20 98 ce	jsr $ce98			jsr Fetch		; @ ( u addr1 )
.9ed8	b5 25		lda $25,x			lda DStack+1,x		; at end of list?
.9eda	f0 09		beq $9ee5			beq _finished
.9edc	20 41 ca	jsr $ca41			jsr NOS_One_Minus	; decrement the line count
.9edf	b5 26		lda $26,x	_test:		lda DStack+2,x		; is the nth element we're looking for?
.9ee1	15 27		ora $27,x			ora DStack+3,x
.9ee3	d0 f0		bne $9ed5			bne _loop
.9ee5					_finished:
.9ee5	4c 90 c9	jmp $c990			jmp Nip			; ( addr )
.9ee8					ed_para1_to_cur:
.9ee8	b5 26		lda $26,x			lda DStack+2,x
.9eea	85 20		sta $20				sta ed_cur
.9eec	b5 27		lda $27,x			lda DStack+3,x
.9eee	85 21		sta $21				sta ed_cur+1
.9ef0	60		rts				rts
.9ef1					ed_print_addr:
.9ef1	20 07 ca	jsr $ca07			jsr Cell_Plus		; ( addr+2 )
.9ef4	20 56 cf	jsr $cf56			jsr Dup			; ( addr+2 addr+2 )
.9ef7	20 07 ca	jsr $ca07			jsr Cell_Plus		; ( addr+2 addr+4 )
.9efa	20 98 ce	jsr $ce98			jsr Fetch		; ( addr+2 u-s )
.9efd	20 73 cf	jsr $cf73			jsr Swap		; ( u-s addr+2 )
.9f00	20 98 ce	jsr $ce98			jsr Fetch		; ( u-s addr-s )
.9f03	20 73 cf	jsr $cf73			jsr Swap		; ( addr-s u-s )
.9f06	20 d8 cd	jsr $cdd8			jsr Type
.9f09	4c 69 ab	jmp $ab69			jmp CR
>9f0c	61 66 69 64 70 6e 3d 77		ed_cmd_list:	.text "afidpn=wqQ", 0
>9f14	71 51 00
.9f17					ed_cmd_table:
>9f17	bc 9b ea 9c 1d 9d 53 9c				.word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>9f1f	46 9d 3d 9d
>9f23	b2 9c b0 9d a3 9d ad 9d				.word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.9f2b					ed6502_end:
>9f2b	53 65 65			Name0:	.text "See"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=40622					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9f2e	a3					.byte (("See"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=1421					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>9f2f	11					.byte WordFlags	;wh_Flags
>9f30	03					.byte 3	;wh_CodeLength
>9f31	21 99					  .word WordListLink
=$9f33					XtPtr1 ::= *
=40622					WordListLink ::= Nt0 ; remember the nt of this word for later
.9f33					See:
.9f33	20 3b bc	jsr $bc3b			jsr Tick_Nt		; ( nt )
.9f36	20 69 ab	jsr $ab69			jsr CR
.9f39	ad 00 03	lda $0300			lda base		; Save the current number base
.9f3c	48		pha				pha
.9f3d	a9 2b		lda #$2b			lda #<str_see_nt	; print nt
.9f3f	a0 da		ldy #$da			ldy #>str_see_nt
.9f41	20 f3 cd	jsr $cdf3			jsr Print_ASCIIZ_YA_no_lf
.9f44	20 56 cf	jsr $cf56			jsr Dup			; ( nt nt )
.9f47	20 09 a9	jsr $a909			jsr Dot_Hex
.9f4a	20 cc cd	jsr $cdcc			jsr Space		; ( nt )
.9f4d	20 56 cf	jsr $cf56			jsr Dup			; ( nt nt )
.9f50	20 9d bd	jsr $bd9d			jsr Name_To_Int		; ( nt xt )
.9f53	a9 31		lda #$31			lda #<str_see_xt	; print xt
.9f55	a0 da		ldy #$da			ldy #>str_see_xt
.9f57	20 f3 cd	jsr $cdf3			jsr Print_ASCIIZ_YA_no_lf
.9f5a	20 56 cf	jsr $cf56			jsr Dup			; ( nt xt xt )
.9f5d	20 09 a9	jsr $a909			jsr Dot_Hex
.9f60	20 69 ab	jsr $ab69			jsr CR			; ( nt xt )
.9f63	a9 24		lda #$24			lda #<str_see_flags
.9f65	a0 da		ldy #$da			ldy #>str_see_flags
.9f67	20 f3 cd	jsr $cdf3			jsr Print_ASCIIZ_YA_no_lf
.9f6a	20 2f cf	jsr $cf2f			jsr Over		; ( nt xt nt )
.9f6d	a9 81		lda #$81			lda #Wh_Flags
.9f6f	20 0c ca	jsr $ca0c			jsr Plus_A		; ( nt xt ^flags )
.9f72	a1 24		lda ($24,x)			lda (DStack+0,x)	; ( nt xt ^flags )
.9f74	95 24		sta $24,x			sta DStack+0,x		; ( nt xt flags )
.9f76	a0 0e		ldy #$0e			ldy #2*7		; for bit 7..0
.9f78	20 cc cd	jsr $cdcc	_flag_loop:	jsr Space
.9f7b	b9 df 9f	lda $9fdf,y			lda _FlagLabels+0,y	;   print label
.9f7e	20 c0 cd	jsr $cdc0			jsr Emit_A
.9f81	b9 e0 9f	lda $9fe0,y			lda _FlagLabels+1,y
.9f84	20 c0 cd	jsr $cdc0			jsr Emit_A
.9f87	a9 3d		lda #$3d			lda #'='
.9f89	20 c0 cd	jsr $cdc0			jsr Emit_A
.9f8c	16 24		asl $24,x			asl DStack+0,x		;   c = flag, rotate the rest
.9f8e	a9 00		lda #$00			lda #0
.9f90	69 30		adc #$30			adc #'0'
.9f92	20 c0 cd	jsr $cdc0			jsr Emit_A
.9f95	88		dey				dey
.9f96	88		dey				dey
.9f97	10 df		bpl $9f78			bpl _flag_loop
.9f99	e8		inx				inx
.9f9a	e8		inx				inx			; ( nt xt )
.9f9b	20 69 ab	jsr $ab69			jsr CR
.9f9e	a9 37		lda #$37			lda #<str_see_size	; print size
.9fa0	a0 da		ldy #$da			ldy #>str_see_size
.9fa2	20 f3 cd	jsr $cdf3			jsr Print_ASCIIZ_YA_no_lf
.9fa5	20 73 cf	jsr $cf73			jsr Swap		; ( xt nt )
.9fa8	20 22 ab	jsr $ab22			jsr WordSize		; ( xt u )
.9fab	20 c9 b1	jsr $b1c9			jsr Decimal
.9fae	b5 24		lda $24,x			lda DStack+0,x		; if = 255
.9fb0	c9 ff		cmp #$ff			cmp #$ff
.9fb2	d0 11		bne $9fc5			bne _size5
.9fb4	20 a7 b8	jsr $b8a7			jsr sliteral_runtime	;   type "large"
.9fb7	4c bf 9f	jmp $9fbf			  jmp _size2
>9fba	6c 61 72 67 65					  .text "large"
.9fbf	20 d8 cd	jsr $cdd8	_size2:		jsr Type
.9fc2	4c cb 9f	jmp $9fcb			jmp _size9		;  else
.9fc5	20 56 cf	jsr $cf56	_size5:		jsr Dup			;    type size
.9fc8	20 00 cc	jsr $cc00			jsr U_Dot
.9fcb					_size9:
.9fcb	20 69 ab	jsr $ab69			jsr CR
.9fce	68		pla				pla			; restore base
.9fcf	8d 00 03	sta $0300			sta base
.9fd2	20 a4 cc	jsr $cca4			jsr Two_dup
.9fd5	20 63 a8	jsr $a863			jsr Dump		; dump
.9fd8	20 69 ab	jsr $ab69			jsr CR
.9fdb	20 d7 d7	jsr $d7d7			jsr DisAsm		; disassemble
=171					CodeLen	.var *-XtPtr1
=$9fde					Here1 = *	; remember here
>9f30	ab					.byte CodeLen	;patch wh_CodeLength
.9fde	60		rts				rts
>9fdf	46 50 44 42 43 4f 49 4d		_FlagLabels:	.text "FPDBCOIMNNANUF__"
>9fe7	4e 4e 41 4e 55 46 5f 5f
>9fef	46 6f 72 74 68 2d 57 6f		Name0:	.text "Forth-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9ff7	72 64 4c 69 73 74
=14					NameLength = *-Name0
=40829					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9ffd	8e					.byte (("Forth-WordList"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=207					LinkDisplacement = Nt0-WordListLink
>9ffe	10					.byte WordFlags	;wh_Flags
>9fff	03					.byte 3	;wh_CodeLength
>a000	cf					  .byte LinkDisplacement	; offset to previous nt
=$a001					XtPtr1 ::= *
=40829					WordListLink ::= Nt0 ; remember the nt of this word for later
.a001	4c f0 b7	jmp $b7f0	Forth_WordList:	jmp Zero
=3					CodeLen	.var *-XtPtr1
=$a004					Here1 = *	; remember here
>9fff	03					.byte CodeLen	;patch wh_CodeLength
>a004	45 64 69 74 6f 72 2d 57		Name0:	.text "Editor-WordList"	;  name of word as a string, ending at wh_NameLastChar
>a00c	6f 72 64 4c 69 73 74
=15					NameLength = *-Name0
=40851					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a013	8f					.byte (("Editor-WordList"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a014	10					.byte WordFlags	;wh_Flags
>a015	03					.byte 3	;wh_CodeLength
>a016	16					  .byte LinkDisplacement	; offset to previous nt
=$a017					XtPtr1 ::= *
=40851					WordListLink ::= Nt0 ; remember the nt of this word for later
.a017					Editor_WordList:
.a017	4c f9 b7	jmp $b7f9			jmp One
=3					CodeLen	.var *-XtPtr1
=$a01a					Here1 = *	; remember here
>a015	03					.byte CodeLen	;patch wh_CodeLength
>a01a	41 73 73 65 6d 62 6c 65		Name0:	.text "Assembler-WordList"	;  name of word as a string, ending at wh_NameLastChar
>a022	72 2d 57 6f 72 64 4c 69 73 74
=18					NameLength = *-Name0
=40876					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a02c	92					.byte (("Assembler-WordList"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>a02d	10					.byte WordFlags	;wh_Flags
>a02e	03					.byte 3	;wh_CodeLength
>a02f	19					  .byte LinkDisplacement	; offset to previous nt
=$a030					XtPtr1 ::= *
=40876					WordListLink ::= Nt0 ; remember the nt of this word for later
.a030					Assembler_WordList:
.a030	4c 02 b8	jmp $b802			jmp Two
=3					CodeLen	.var *-XtPtr1
=$a033					Here1 = *	; remember here
>a02e	03					.byte CodeLen	;patch wh_CodeLength
>a033	52 6f 6f 74 2d 57 6f 72		Name0:	.text "Root-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a03b	64 6c 69 73 74
=13					NameLength = *-Name0
=40896					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a040	8d					.byte (("Root-Wordlist"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>a041	10					.byte WordFlags	;wh_Flags
>a042	03					.byte 3	;wh_CodeLength
>a043	14					  .byte LinkDisplacement	; offset to previous nt
=$a044					XtPtr1 ::= *
=40896					WordListLink ::= Nt0 ; remember the nt of this word for later
.a044	a9 03		lda #$03	Root_WordList:	lda #wid_Root
.a046	4c e2 b7	jmp $b7e2			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$a049					Here1 = *	; remember here
>a042	05					.byte CodeLen	;patch wh_CodeLength
>a049	4f 6e 6c 79			Name0:	.text "Only"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=40909					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a04d	24					.byte (("Only"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>a04e	10					.byte WordFlags	;wh_Flags
>a04f	03					.byte 3	;wh_CodeLength
>a050	0d					  .byte LinkDisplacement	; offset to previous nt
=$a051					XtPtr1 ::= *
=40909					WordListLink ::= Nt0 ; remember the nt of this word for later
.a051	20 c2 b7	jsr $b7c2	Only:		jsr True	; Push -1
.a054	4c 71 a1	jmp $a171			jmp Set_Order	; set the minimum search order.
=6					CodeLen	.var *-XtPtr1
=$a057					Here1 = *	; remember here
>a04f	06					.byte CodeLen	;patch wh_CodeLength
>a057	41 6c 73 6f			Name0:	.text "Also"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=40923					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a05b	e4					.byte (("Also"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a05c	10					.byte WordFlags	;wh_Flags
>a05d	03					.byte 3	;wh_CodeLength
>a05e	0e					  .byte LinkDisplacement	; offset to previous nt
=$a05f					XtPtr1 ::= *
=40923					WordListLink ::= Nt0 ; remember the nt of this word for later
.a05f	20 a1 a1	jsr $a1a1	Also:		jsr Get_Order
.a062	20 2f cf	jsr $cf2f			jsr Over
.a065	20 73 cf	jsr $cf73			jsr Swap
.a068	20 5a ca	jsr $ca5a			jsr One_plus
.a06b	4c 71 a1	jmp $a171			jmp Set_Order
=15					CodeLen	.var *-XtPtr1
=$a06e					Here1 = *	; remember here
>a05d	0f					.byte CodeLen	;patch wh_CodeLength
>a06e	50 72 65 76 69 6f 75 73		Name0:	.text "Previous"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=40950					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a076	68					.byte (("Previous"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>a077	10					.byte WordFlags	;wh_Flags
>a078	03					.byte 3	;wh_CodeLength
>a079	1b					  .byte LinkDisplacement	; offset to previous nt
=$a07a					XtPtr1 ::= *
=40950					WordListLink ::= Nt0 ; remember the nt of this word for later
.a07a	20 a1 a1	jsr $a1a1	Previous:	jsr Get_Order
.a07d	20 90 c9	jsr $c990			jsr Nip
.a080	20 35 ca	jsr $ca35			jsr One_minus
.a083	4c 71 a1	jmp $a171			jmp Set_Order
=12					CodeLen	.var *-XtPtr1
=$a086					Here1 = *	; remember here
>a078	0c					.byte CodeLen	;patch wh_CodeLength
>a086	3e 4f 72 64 65 72		Name0:	.text ">Order"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=40972					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a08c	46					.byte ((">Order"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a08d	10					.byte WordFlags	;wh_Flags
>a08e	03					.byte 3	;wh_CodeLength
>a08f	16					  .byte LinkDisplacement	; offset to previous nt
=$a090					XtPtr1 ::= *
=40972					WordListLink ::= Nt0 ; remember the nt of this word for later
.a090					To_Order:
.a090	20 e0 ce	jsr $cee0			jsr To_R		; Put the wid on the return stack for now.
.a093	20 a1 a1	jsr $a1a1			jsr Get_Order		; Get the current search order.
.a096	20 fe ce	jsr $cefe			jsr R_From		; Get back the wid and add it to the list.
.a099	20 73 cf	jsr $cf73			jsr Swap
.a09c	20 5a ca	jsr $ca5a			jsr One_plus
.a09f	4c 71 a1	jmp $a171			jmp Set_Order		; Set the search order with the new list.
=18					CodeLen	.var *-XtPtr1
=$a0a2					Here1 = *	; remember here
>a08e	12					.byte CodeLen	;patch wh_CodeLength
>a0a2	4f 72 64 65 72			Name0:	.text "Order"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=40999					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a0a7	45					.byte (("Order"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>a0a8	10					.byte WordFlags	;wh_Flags
>a0a9	03					.byte 3	;wh_CodeLength
>a0aa	1b					  .byte LinkDisplacement	; offset to previous nt
=$a0ab					XtPtr1 ::= *
=40999					WordListLink ::= Nt0 ; remember the nt of this word for later
.a0ab					Order:
.a0ab	20 69 ab	jsr $ab69			jsr CR
.a0ae	a0 00		ldy #$00			ldy #0			; for each search_orderV[]
.a0b0	f0 0b		beq $a0bd			beq _test
.a0b2	98		tya		_loop:		tya
.a0b3	48		pha				pha
.a0b4	b9 2b 03	lda $032b,y			lda Search_orderV,y
.a0b7	20 c8 a0	jsr $a0c8			jsr print_wid_stringA	; internal helper function
.a0ba	68		pla				pla
.a0bb	a8		tay				tay
.a0bc	c8		iny				iny			;  next
.a0bd	cc 2a 03	cpy $032a	_test:		cpy Num_orderV
.a0c0	90 f0		bcc $a0b2			bcc _loop
.a0c2	20 69 ab	jsr $ab69			jsr CR
.a0c5	ad 10 03	lda $0310			lda CurrentV		; print the current wordlist.
.a0c8					print_wid_stringA:
.a0c8	c9 04		cmp #$04			cmp #wid_Root+1		; do we have a string?
.a0ca	90 06		bcc $a0d2			bcc _string
.a0cc	20 e2 b7	jsr $b7e2			jsr PushZA		; print the WID number
.a0cf	4c 00 cc	jmp $cc00			jmp U_Dot		; JSR/RTS
.a0d2	0a		asl a		_string:	asl			; Get the word index based on WID 0 to 3
.a0d3	a8		tay				tay
.a0d4	ca		dex				dex			; TOS= word nt
.a0d5	ca		dex				dex
.a0d6	b9 ee a0	lda $a0ee,y			lda _wid_Table+0,y
.a0d9	95 24		sta $24,x			sta DStack+0,x
.a0db	b9 ef a0	lda $a0ef,y			lda _wid_Table+1,y
.a0de	95 25		sta $25,x			sta DStack+1,x		; ( nt )
.a0e0	20 e6 bd	jsr $bde6			jsr Name_To_String	; ( addr u )
.a0e3	a9 f7		lda #$f7			lda #$100-9		;   cut off "_wordlist"
.a0e5	20 4a ca	jsr $ca4a			jsr Minus_A
.a0e8	20 d8 cd	jsr $cdd8			jsr Type		; Print
.a0eb	4c cc cd	jmp $cdcc			jmp Space
=67					CodeLen	.var *-XtPtr1
=$a0ee					Here1 = *	; remember here
>a0a9	43					.byte CodeLen	;patch wh_CodeLength
.a0ee					_wid_Table:
>a0ee	7d 9f					.word forth_wordlist-wh_LinkNt-1	; WID 0:
>a0f0	93 9f					.word editor_wordlist-wh_LinkNt-1	; WID 1:
>a0f2	ac 9f					.word assembler_wordlist-wh_LinkNt-1	; WID 2:
>a0f4	c0 9f					.word root_wordlist-wh_LinkNt-1		; WID 3:
>a0f6	46 6f 72 74 68			Name0:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=41083					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a0fb	05					.byte (("Forth"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=84					LinkDisplacement = Nt0-WordListLink
>a0fc	10					.byte WordFlags	;wh_Flags
>a0fd	03					.byte 3	;wh_CodeLength
>a0fe	54					  .byte LinkDisplacement	; offset to previous nt
=$a0ff					XtPtr1 ::= *
=41083					WordListLink ::= Nt0 ; remember the nt of this word for later
.a0ff	a9 00		lda #$00	Forth:		lda #wid_Forth
.a101	8d 2b 03	sta $032b			sta Search_OrderV+0
=5					CodeLen	.var *-XtPtr1
=$a104					Here1 = *	; remember here
>a0fd	05					.byte CodeLen	;patch wh_CodeLength
.a104	60		rts				rts
>a105	44 65 66 69 6e 69 74 69		Name0:	.text "Definitions"	;  name of word as a string, ending at wh_NameLastChar
>a10d	6f 6e 73
=11					NameLength = *-Name0
=41104					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a110	6b					.byte (("Definitions"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>a111	10					.byte WordFlags	;wh_Flags
>a112	03					.byte 3	;wh_CodeLength
>a113	15					  .byte LinkDisplacement	; offset to previous nt
=$a114					XtPtr1 ::= *
=41104					WordListLink ::= Nt0 ; remember the nt of this word for later
.a114	ad 2b 03	lda $032b	Definitions:	lda Search_OrderV	; Transfer SEARCH_ORDER[0] to
.a117	8d 10 03	sta $0310			sta CurrentV		;   byte variable CURRENT.
=6					CodeLen	.var *-XtPtr1
=$a11a					Here1 = *	; remember here
>a112	06					.byte CodeLen	;patch wh_CodeLength
.a11a	60		rts				rts
>a11b	57 6f 72 64 4c 69 73 74		Name0:	.text "WordList"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=41123					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a123	88					.byte (("WordList"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>a124	10					.byte WordFlags	;wh_Flags
>a125	03					.byte 3	;wh_CodeLength
>a126	13					  .byte LinkDisplacement	; offset to previous nt
=$a127					XtPtr1 ::= *
=41123					WordListLink ::= Nt0 ; remember the nt of this word for later
.a127					WordList:
.a127	ad 11 03	lda $0311			lda Num_wordlistsV	; Get the current number of wordlists
.a12a	c9 0c		cmp #$0c			cmp #max_wordlists	; already at the max?
.a12c	90 05		bcc $a133			bcc +
.a12e	a9 66		lda #$66			lda #$100+err_TooManyWordlists	;   Print an error message
.a130	4c 79 b4	jmp $b479			jmp ThrowA
.a133					+
.a133	ee 11 03	inc $0311			inc Num_WordlistsV	; increment wordlist count
.a136	4c e2 b7	jmp $b7e2			jmp PushZA		; and put it on the stack.
=18					CodeLen	.var *-XtPtr1
=$a139					Here1 = *	; remember here
>a125	12					.byte CodeLen	;patch wh_CodeLength
>a139	53 65 74 2d 43 75 72 72		Name0:	.text "Set-Current"	;  name of word as a string, ending at wh_NameLastChar
>a141	65 6e 74
=11					NameLength = *-Name0
=41156					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a144	8b					.byte (("Set-Current"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>a145	00					.byte WordFlags	;wh_Flags
>a146	03					.byte 3	;wh_CodeLength
>a147	21					  .byte LinkDisplacement	; offset to previous nt
=$a148					XtPtr1 ::= *
=41156					WordListLink ::= Nt0 ; remember the nt of this word for later
.a148	20 d9 b3	jsr $b3d9	Set_Current:	jsr PopA	; pop wid
.a14b	8d 10 03	sta $0310			sta CurrentV	; only the LSB is used.
=6					CodeLen	.var *-XtPtr1
=$a14e					Here1 = *	; remember here
>a146	06					.byte CodeLen	;patch wh_CodeLength
.a14e	60		rts				rts
>a14f	47 65 74 2d 43 75 72 72		Name0:	.text "Get-Current"	;  name of word as a string, ending at wh_NameLastChar
>a157	65 6e 74
=11					NameLength = *-Name0
=41178					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a15a	8b					.byte (("Get-Current"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a15b	10					.byte WordFlags	;wh_Flags
>a15c	03					.byte 3	;wh_CodeLength
>a15d	16					  .byte LinkDisplacement	; offset to previous nt
=$a15e					XtPtr1 ::= *
=41178					WordListLink ::= Nt0 ; remember the nt of this word for later
.a15e					Get_Current:
.a15e	ad 10 03	lda $0310			lda CurrentV
.a161	4c e2 b7	jmp $b7e2			jmp PushZA	; CURRENT is a byte variable
=6					CodeLen	.var *-XtPtr1
=$a164					Here1 = *	; remember here
>a15c	06					.byte CodeLen	;patch wh_CodeLength
>a164	53 65 74 2d 4f 72 64 65		Name0:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>a16c	72
=9					NameLength = *-Name0
=41197					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a16d	49					.byte (("Set-Order"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>a16e	10					.byte WordFlags	;wh_Flags
>a16f	03					.byte 3	;wh_CodeLength
>a170	13					  .byte LinkDisplacement	; offset to previous nt
=$a171					XtPtr1 ::= *
=41197					WordListLink ::= Nt0 ; remember the nt of this word for later
.a171					Set_Order:
.a171	b5 25		lda $25,x			lda DStack+1,x		; Test for -1 TOS
.a173	10 08		bpl $a17d			bpl _start
.a175	e8		inx				inx			; Drop
.a176	e8		inx				inx
.a177	20 44 a0	jsr $a044			jsr Root_Wordlist	; wid
.a17a	20 f9 b7	jsr $b7f9			jsr One			; Count is 1.
.a17d					_start:
.a17d	20 d9 b3	jsr $b3d9			jsr PopA	; pop count
.a180	8d 2a 03	sta $032a			sta Num_orderV	; #ORDER is a byte variable.
.a183	a0 00		ldy #$00			ldy #0
.a185	f0 07		beq $a18e			beq _test
.a187					_loop:
.a187	20 d9 b3	jsr $b3d9			jsr PopA		; The search order is a byte array
.a18a	99 2b 03	sta $032b,y			sta Search_OrderV,y	; so only save the LSB
.a18d	c8		iny				iny
.a18e					_test:
.a18e	cc 2a 03	cpy $032a			cpy Num_orderV
.a191	d0 f4		bne $a187			bne _loop
=34					CodeLen	.var *-XtPtr1
=$a193					Here1 = *	; remember here
>a16f	22					.byte CodeLen	;patch wh_CodeLength
.a193	60		rts				rts
>a194	47 65 74 2d 4f 72 64 65		Name0:	.text "Get-Order"	;  name of word as a string, ending at wh_NameLastChar
>a19c	72
=9					NameLength = *-Name0
=41245					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a19d	49					.byte (("Get-Order"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=48					LinkDisplacement = Nt0-WordListLink
>a19e	10					.byte WordFlags	;wh_Flags
>a19f	03					.byte 3	;wh_CodeLength
>a1a0	30					  .byte LinkDisplacement	; offset to previous nt
=$a1a1					XtPtr1 ::= *
=41245					WordListLink ::= Nt0 ; remember the nt of this word for later
.a1a1					Get_Order:
.a1a1	ac 2a 03	ldy $032a			ldy Num_OrderV	; Get #ORDER - the number of wordlists in the search order.
.a1a4	f0 09		beq $a1af			beq _done	; If zero, there are no wordlists.
.a1a6					_loop:
.a1a6	b9 2a 03	lda $032a,y			lda Search_OrderV-1,y	; Put that wordlist id on the stack.
.a1a9	20 e2 b7	jsr $b7e2			jsr PushZA
.a1ac	88		dey				dey
.a1ad	d0 f7		bne $a1a6			bne _loop		; See if that was the last one to process (first in the list).
.a1af					_done:
.a1af	ad 2a 03	lda $032a			lda Num_OrderV		; Push the number of items
.a1b2	4c e2 b7	jmp $b7e2			jmp PushZA
=20					CodeLen	.var *-XtPtr1
=$a1b5					Here1 = *	; remember here
>a19f	14					.byte CodeLen	;patch wh_CodeLength
>a1b5	53 65 61 72 63 68 2d 57		Name0:	.text "Search-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a1bd	6f 72 64 6c 69 73 74
=15					NameLength = *-Name0
=41284					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a1c4	8f					.byte (("Search-Wordlist"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>a1c5	10					.byte WordFlags	;wh_Flags
>a1c6	03					.byte 3	;wh_CodeLength
>a1c7	27					  .byte LinkDisplacement	; offset to previous nt
=$a1c8					XtPtr1 ::= *
=41284					WordListLink ::= Nt0 ; remember the nt of this word for later
.a1c8					Search_WordList:
.a1c8	20 d9 b3	jsr $b3d9			jsr PopA		; Pop wid
.a1cb	48		pha				pha
.a1cc	20 96 bc	jsr $bc96			jsr swl_prepare 	; ( )
.a1cf	68		pla				pla			; get wid
.a1d0	20 bf bc	jsr $bcbf			jsr swl_search_wordlist ; tmp1= nt of matching word
.a1d3	f0 11		beq $a1e6			beq _NotFound
.a1d5	20 a0 bd	jsr $bda0			jsr Name_To_Int_T	; ( xt )
.a1d8	a0 81		ldy #$81			ldy #Wh_Flags		; get flags
.a1da	b1 14		lda ($14),y			lda (tmp1),y
.a1dc	29 08		and #$08			and #IM
.a1de	d0 03		bne $a1e3			bne _immediate		; bit set, we're immediate
.a1e0	4c c2 b7	jmp $b7c2			jmp True		; We're not immediate, return -1
.a1e3	4c f9 b7	jmp $b7f9	_immediate:	jmp One			; We're immediate, return 1
.a1e6	4c f0 b7	jmp $b7f0	_NotFound:	jmp Zero		; ( 0 )
=33					CodeLen	.var *-XtPtr1
=$a1e9					Here1 = *	; remember here
>a1c6	21					.byte CodeLen	;patch wh_CodeLength
>0339					BlockReadV: .word ?	; Vector to block reading routine
>033b					BlockWriteV: .word ?	; Vector to block writing routine
>033d					BuffBlockNumV: .word ?	; Block number current in BlockBuffer
>033f					BuffStatusV: .word ?	; Status of BlockBuffer (bit 0 = used, bit 1 = dirty)
>0341					BlockBuffer: .fill 1024
.a1e9					BlockInit:
.a1e9	a9 00		lda #$00			lda #0
.a1eb	8d 3f 03	sta $033f			sta BuffStatusV
.a1ee	a9 30		lda #$30			lda #<Platform_Block_Read
.a1f0	a0 f1		ldy #$f1			ldy #>Platform_Block_Read
.a1f2	8d 39 03	sta $0339			sta BlockReadV+0
.a1f5	8c 3a 03	sty $033a			sty BlockReadV+1
.a1f8	a9 30		lda #$30			lda #<Platform_Block_Write
.a1fa	a0 f1		ldy #$f1			ldy #>Platform_Block_Write
.a1fc	8d 3b 03	sta $033b			sta BlockWriteV+0
.a1ff	8c 3c 03	sty $033c			sty BlockWriteV+1
.a202	60		rts				rts
>0741					RamDriveV: .word ?	; ptr to RamDrive storage area
=0					io_blk_status = 0
=0					io_blk_action = 0
=0					io_blk_number = 0
=0					io_blk_buffer = 0
>a203	42 6c 6f 63 6b 2d 52 61		Name0:	.text "Block-RamDrive-Init"	;  name of word as a string, ending at wh_NameLastChar
>a20b	6d 44 72 69 76 65 2d 49 6e 69 74
=19					NameLength = *-Name0
=41366					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a216	93					.byte (("Block-RamDrive-Init"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=82					LinkDisplacement = Nt0-WordListLink
>a217	50					.byte WordFlags	;wh_Flags
>a218	03					.byte 3	;wh_CodeLength
>a219	52					  .byte LinkDisplacement	; offset to previous nt
=$a21a					XtPtr1 ::= *
=41366					WordListLink ::= Nt0 ; remember the nt of this word for later
.a21a					Block_RamDrive_Init:
.a21a	a9 0a		lda #$0a			lda #10			; Calculate how many bytes are needed for numblocks blocks
.a21c	20 e2 b7	jsr $b7e2			jsr PushZA
.a21f	20 3f cb	jsr $cb3f			jsr LShift
.a222	20 28 ca	jsr $ca28			jsr Here		; ( size addr )
.a225	8d 41 07	sta $0741			sta RamDriveV+0
.a228	8c 42 07	sty $0742			sty RamDriveV+1
.a22b	20 2f cf	jsr $cf2f			jsr Over
.a22e	20 a2 c0	jsr $c0a2			jsr Allot		; Create ramdrive buffer
.a231	20 73 cf	jsr $cf73			jsr Swap		; blank the buffer
.a234	20 2d be	jsr $be2d			jsr Blank
.a237	a9 4c		lda #$4c			lda #<_read		; set block read vector
.a239	a0 a2		ldy #$a2			ldy #>_read
.a23b	8d 39 03	sta $0339			sta BlockReadV+0
.a23e	8c 3a 03	sty $033a			sty BlockReadV+1
.a241	a9 5c		lda #$5c			lda #<_write		; set block write vector
.a243	a0 a2		ldy #$a2			ldy #>_write
.a245	8d 3b 03	sta $033b			sta BlockWriteV+0
.a248	8c 3c 03	sty $033c			sty BlockWriteV+1
.a24b	60		rts				rts
=50					CodeLen	.var *-XtPtr1
=$a24c					Here1 = *	; remember here
>a218	32					.byte CodeLen	;patch wh_CodeLength
.a24c					_read:
.a24c	20 69 a2	jsr $a269			jsr _addr
.a24f	20 73 cf	jsr $cf73			jsr Swap
.a252	a9 00		lda #$00			lda #0
.a254	a0 04		ldy #$04			ldy #>1024
.a256	20 b3 b7	jsr $b7b3			jsr PushYA
.a259	4c 7d ad	jmp $ad7d			jmp Move
.a25c					_write:
.a25c	20 69 a2	jsr $a269			jsr _addr
.a25f	a9 00		lda #$00			lda #0
.a261	a0 04		ldy #$04			ldy #>1024
.a263	20 b3 b7	jsr $b7b3			jsr PushYA
.a266	4c 7d ad	jmp $ad7d			jmp Move
.a269					_addr:
.a269	a9 0a		lda #$0a			lda #10
.a26b	20 e2 b7	jsr $b7e2			jsr PushZA
.a26e	20 3f cb	jsr $cb3f			jsr LShift
.a271	20 83 a2	jsr $a283			jsr RamDrive
.a274	4c 9f cb	jmp $cb9f			jmp Plus
>a277	52 61 6d 44 72 69 76 65		Name0:	.text "RamDrive"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=41471					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a27f	a8					.byte (("RamDrive"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=105					LinkDisplacement = Nt0-WordListLink
>a280	10					.byte WordFlags	;wh_Flags
>a281	03					.byte 3	;wh_CodeLength
>a282	69					  .byte LinkDisplacement	; offset to previous nt
=$a283					XtPtr1 ::= *
=41471					WordListLink ::= Nt0 ; remember the nt of this word for later
.a283	ad 41 07	lda $0741	RamDrive:	lda RamDriveV+0
.a286	ac 42 07	ldy $0742			ldy RamDriveV+1
.a289	4c b3 b7	jmp $b7b3			jmp PushYA
=9					CodeLen	.var *-XtPtr1
=$a28c					Here1 = *	; remember here
>a281	09					.byte CodeLen	;patch wh_CodeLength
>a28c	42 75 66 66 53 74 61 74		Name0:	.text "BuffStatus"	;  name of word as a string, ending at wh_NameLastChar
>a294	75 73
=10					NameLength = *-Name0
=41494					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a296	6a					.byte (("BuffStatus"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>a297	10					.byte WordFlags	;wh_Flags
>a298	03					.byte 3	;wh_CodeLength
>a299	17					  .byte LinkDisplacement	; offset to previous nt
=$a29a					XtPtr1 ::= *
=41494					WordListLink ::= Nt0 ; remember the nt of this word for later
.a29a	a0 03		ldy #$03	BuffStatus:	ldy #>BuffStatusV
.a29c	a9 3f		lda #$3f			lda #<BuffStatusV
.a29e	4c b3 b7	jmp $b7b3			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a2a1					Here1 = *	; remember here
>a298	07					.byte CodeLen	;patch wh_CodeLength
>a2a1	42 75 66 66 42 6c 6f 63		Name0:	.text "BuffBlockNum"	;  name of word as a string, ending at wh_NameLastChar
>a2a9	6b 4e 75 6d
=12					NameLength = *-Name0
=41517					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2ad	ac					.byte (("BuffBlockNum"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>a2ae	10					.byte WordFlags	;wh_Flags
>a2af	03					.byte 3	;wh_CodeLength
>a2b0	17					  .byte LinkDisplacement	; offset to previous nt
=$a2b1					XtPtr1 ::= *
=41517					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2b1	a0 03		ldy #$03	BuffBlockNum:	ldy #>BuffBlockNumV
.a2b3	a9 3d		lda #$3d			lda #<BuffBlockNumV
.a2b5	4c b3 b7	jmp $b7b3			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a2b8					Here1 = *	; remember here
>a2af	07					.byte CodeLen	;patch wh_CodeLength
>a2b8	42 6c 6b 42 75 66 66 65		Name0:	.text "BlkBuffer"	;  name of word as a string, ending at wh_NameLastChar
>a2c0	72
=9					NameLength = *-Name0
=41537					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2c1	49					.byte (("BlkBuffer"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>a2c2	10					.byte WordFlags	;wh_Flags
>a2c3	03					.byte 3	;wh_CodeLength
>a2c4	14					  .byte LinkDisplacement	; offset to previous nt
=$a2c5					XtPtr1 ::= *
=41537					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2c5	a0 03		ldy #$03	BlkBuffer:	ldy #>BlockBuffer
.a2c7	a9 41		lda #$41			lda #<BlockBuffer
.a2c9	4c b3 b7	jmp $b7b3			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a2cc					Here1 = *	; remember here
>a2c3	07					.byte CodeLen	;patch wh_CodeLength
>a2cc	53 63 72			Name0:	.text "Scr"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=41551					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2cf	43					.byte (("Scr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a2d0	10					.byte WordFlags	;wh_Flags
>a2d1	03					.byte 3	;wh_CodeLength
>a2d2	0e					  .byte LinkDisplacement	; offset to previous nt
=$a2d3					XtPtr1 ::= *
=41551					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2d3	a0 03		ldy #$03	Scr:		ldy #>ScrV
.a2d5	a9 0e		lda #$0e			lda #<ScrV
.a2d7	4c b3 b7	jmp $b7b3			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a2da					Here1 = *	; remember here
>a2d1	07					.byte CodeLen	;patch wh_CodeLength
>a2da	42 6c 6b			Name0:	.text "Blk"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=41565					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2dd	63					.byte (("Blk"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a2de	10					.byte WordFlags	;wh_Flags
>a2df	03					.byte 3	;wh_CodeLength
>a2e0	0e					  .byte LinkDisplacement	; offset to previous nt
=$a2e1					XtPtr1 ::= *
=41565					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2e1	a0 03		ldy #$03	Blk:		ldy #>BlkV
.a2e3	a9 0c		lda #$0c			lda #<BlkV
.a2e5	4c b3 b7	jmp $b7b3			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a2e8					Here1 = *	; remember here
>a2df	07					.byte CodeLen	;patch wh_CodeLength
>a2e8	42 6c 6f 63 6b 2d 57 72		Name0:	.text "Block-Write"	;  name of word as a string, ending at wh_NameLastChar
>a2f0	69 74 65
=11					NameLength = *-Name0
=41587					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2f3	ab					.byte (("Block-Write"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a2f4	10					.byte WordFlags	;wh_Flags
>a2f5	03					.byte 3	;wh_CodeLength
>a2f6	16					  .byte LinkDisplacement	; offset to previous nt
=$a2f7					XtPtr1 ::= *
=41587					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2f7	6c 3b 03	jmp ($033b)	Block_Write:	jmp (BlockWriteV)	; Execute the BLOCK-READ-VECTOR
=3					CodeLen	.var *-XtPtr1
=$a2fa					Here1 = *	; remember here
>a2f5	03					.byte CodeLen	;patch wh_CodeLength
>a2fa	42 6c 6f 63 6b 2d 57 72		Name0:	.text "Block-Write-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a302	69 74 65 2d 56 65 63 74 6f 72
=18					NameLength = *-Name0
=41612					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a30c	52					.byte (("Block-Write-Vector"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>a30d	10					.byte WordFlags	;wh_Flags
>a30e	03					.byte 3	;wh_CodeLength
>a30f	19					  .byte LinkDisplacement	; offset to previous nt
=$a310					XtPtr1 ::= *
=41612					WordListLink ::= Nt0 ; remember the nt of this word for later
.a310					Block_Write_Vector:
.a310	a0 03		ldy #$03			ldy #>BlockWriteV
.a312	a9 3b		lda #$3b			lda #<BlockWriteV	; Get the BLOCK-WRITE-VECTOR address
.a314	4c b3 b7	jmp $b7b3			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a317					Here1 = *	; remember here
>a30e	07					.byte CodeLen	;patch wh_CodeLength
>a317	42 6c 6f 63 6b 2d 52 65		Name0:	.text "Block-Read"	;  name of word as a string, ending at wh_NameLastChar
>a31f	61 64
=10					NameLength = *-Name0
=41633					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a321	8a					.byte (("Block-Read"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>a322	10					.byte WordFlags	;wh_Flags
>a323	03					.byte 3	;wh_CodeLength
>a324	15					  .byte LinkDisplacement	; offset to previous nt
=$a325					XtPtr1 ::= *
=41633					WordListLink ::= Nt0 ; remember the nt of this word for later
.a325	6c 39 03	jmp ($0339)	Block_Read:	jmp (BlockReadV)	; Execute the BLOCK-READ-VECTOR
=3					CodeLen	.var *-XtPtr1
=$a328					Here1 = *	; remember here
>a323	03					.byte CodeLen	;patch wh_CodeLength
>a328	42 6c 6f 63 6b 2d 52 65		Name0:	.text "Block-Read-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a330	61 64 2d 56 65 63 74 6f 72
=17					NameLength = *-Name0
=41657					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a339	51					.byte (("Block-Read-Vector"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>a33a	10					.byte WordFlags	;wh_Flags
>a33b	03					.byte 3	;wh_CodeLength
>a33c	18					  .byte LinkDisplacement	; offset to previous nt
=$a33d					XtPtr1 ::= *
=41657					WordListLink ::= Nt0 ; remember the nt of this word for later
.a33d					Block_Read_Vector:
.a33d	a0 03		ldy #$03			ldy #>BlockReadV
.a33f	a9 39		lda #$39			lda #<BlockReadV	; Get the BLOCK-READ-VECTOR address
.a341	4c b3 b7	jmp $b7b3			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a344					Here1 = *	; remember here
>a33b	07					.byte CodeLen	;patch wh_CodeLength
>a344	53 61 76 65 2d 42 75 66		Name0:	.text "Save-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a34c	66 65 72 73
=12					NameLength = *-Name0
=41680					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a350	6c					.byte (("Save-Buffers"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>a351	00					.byte WordFlags	;wh_Flags
>a352	03					.byte 3	;wh_CodeLength
>a353	17					  .byte LinkDisplacement	; offset to previous nt
=$a354					XtPtr1 ::= *
=41680					WordListLink ::= Nt0 ; remember the nt of this word for later
.a354					Save_Buffers:
.a354	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a357	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a359	d0 11		bne $a36c			bne _done	; Either not used or not dirty = done!
.a35b	20 c5 a2	jsr $a2c5			jsr BlkBuffer
.a35e	20 b1 a2	jsr $a2b1			jsr BuffBlockNum
.a361	20 98 ce	jsr $ce98			jsr Fetch
.a364	20 f7 a2	jsr $a2f7			jsr Block_Write
.a367	a9 01		lda #$01			lda #1
.a369	8d 3f 03	sta $033f			sta BuffStatusV+0
.a36c					_done:
=24					CodeLen	.var *-XtPtr1
=$a36c					Here1 = *	; remember here
>a352	18					.byte CodeLen	;patch wh_CodeLength
.a36c	60		rts				rts
>a36d	42 6c 6f 63 6b			Name0:	.text "Block"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=41714					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a372	65					.byte (("Block"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>a373	00					.byte WordFlags	;wh_Flags
>a374	03					.byte 3	;wh_CodeLength
>a375	22					  .byte LinkDisplacement	; offset to previous nt
=$a376					XtPtr1 ::= *
=41714					WordListLink ::= Nt0 ; remember the nt of this word for later
.a376					Block:
.a376	ad 3d 03	lda $033d			lda BuffBlockNumV+0	; check the LSB
.a379	d5 24		cmp $24,x			cmp DStack+0,x
.a37b	d0 0e		bne $a38b			bne _not_in_buffer
.a37d	ad 3e 03	lda $033e			lda BuffBlockNumV+1	; check the MSB
.a380	d5 25		cmp $25,x			cmp DStack+1,x
.a382	d0 07		bne $a38b			bne _not_in_buffer
.a384	ad 3f 03	lda $033f			lda BuffStatusV+0
.a387	29 01		and #$01			and #1		; Check the in-use flag (bit 0)
.a389	d0 2d		bne $a3b8			bne _done	; It's already in the buffer and in use.
.a38b					_not_in_buffer:
.a38b	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a38e	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a390	d0 0c		bne $a39e			bne _buffer_available ; Unused or not dirty = available
.a392	20 c5 a2	jsr $a2c5			jsr BlkBuffer
.a395	20 b1 a2	jsr $a2b1			jsr BuffBlockNum
.a398	20 98 ce	jsr $ce98			jsr Fetch
.a39b	20 f7 a2	jsr $a2f7			jsr Block_Write
.a39e					_buffer_available:
.a39e	b5 24		lda $24,x			lda DStack+0,x
.a3a0	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a3a3	b5 25		lda $25,x			lda DStack+1,x
.a3a5	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a3a8	20 c5 a2	jsr $a2c5			jsr BlkBuffer
.a3ab	20 73 cf	jsr $cf73			jsr Swap
.a3ae	20 25 a3	jsr $a325			jsr Block_Read
.a3b1	a9 01		lda #$01			lda #1
.a3b3	8d 3f 03	sta $033f			sta BuffStatusV+0
.a3b6	ca		dex				dex
.a3b7	ca		dex				dex
.a3b8					_done:
.a3b8	a9 41		lda #$41			lda #<BlockBuffer
.a3ba	95 24		sta $24,x			sta DStack+0,x
.a3bc	a9 03		lda #$03			lda #>BlockBuffer
.a3be	95 25		sta $25,x			sta DStack+1,x
=74					CodeLen	.var *-XtPtr1
=$a3c0					Here1 = *	; remember here
>a374	4a					.byte CodeLen	;patch wh_CodeLength
.a3c0	60		rts				rts
>a3c1	55 70 64 61 74 65		Name0:	.text "Update"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=41799					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a3c7	a6					.byte (("Update"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=85					LinkDisplacement = Nt0-WordListLink
>a3c8	00					.byte WordFlags	;wh_Flags
>a3c9	03					.byte 3	;wh_CodeLength
>a3ca	55					  .byte LinkDisplacement	; offset to previous nt
=$a3cb					XtPtr1 ::= *
=41799					WordListLink ::= Nt0 ; remember the nt of this word for later
.a3cb					Update:
.a3cb	ad 3f 03	lda $033f			lda BuffStatusV+0
.a3ce	09 02		ora #$02			ora #2		; Turn on dirty flag (bit 2)
.a3d0	8d 3f 03	sta $033f			sta BuffStatusV+0
=8					CodeLen	.var *-XtPtr1
=$a3d3					Here1 = *	; remember here
>a3c9	08					.byte CodeLen	;patch wh_CodeLength
.a3d3	60		rts				rts
>a3d4	42 75 66 66 65 72		Name0:	.text "Buffer"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=41818					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a3da	46					.byte (("Buffer"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>a3db	10					.byte WordFlags	;wh_Flags
>a3dc	03					.byte 3	;wh_CodeLength
>a3dd	13					  .byte LinkDisplacement	; offset to previous nt
=$a3de					XtPtr1 ::= *
=41818					WordListLink ::= Nt0 ; remember the nt of this word for later
.a3de					Buffer:
.a3de	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a3e1	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a3e3	d0 0c		bne $a3f1			bne _buffer_available ; Unused or not dirty = available
.a3e5	20 c5 a2	jsr $a2c5			jsr BlkBuffer
.a3e8	20 b1 a2	jsr $a2b1			jsr BuffBlockNum
.a3eb	20 98 ce	jsr $ce98			jsr Fetch
.a3ee	20 f7 a2	jsr $a2f7			jsr Block_Write
.a3f1					_buffer_available:
.a3f1	b5 24		lda $24,x			lda DStack+0,x
.a3f3	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a3f6	b5 25		lda $25,x			lda DStack+1,x
.a3f8	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a3fb	a9 01		lda #$01			lda #1
.a3fd	8d 3f 03	sta $033f			sta BuffStatusV+0
.a400					_done:
.a400	a9 41		lda #$41			lda #<BlockBuffer
.a402	95 24		sta $24,x			sta DStack+0,x
.a404	a9 03		lda #$03			lda #>BlockBuffer
.a406	95 25		sta $25,x			sta DStack+1,x
=42					CodeLen	.var *-XtPtr1
=$a408					Here1 = *	; remember here
>a3dc	2a					.byte CodeLen	;patch wh_CodeLength
.a408	60		rts				rts
>a409	45 6d 70 74 79 2d 42 75		Name0:	.text "Empty-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a411	66 66 65 72 73
=13					NameLength = *-Name0
=41878					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a416	6d					.byte (("Empty-Buffers"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=60					LinkDisplacement = Nt0-WordListLink
>a417	10					.byte WordFlags	;wh_Flags
>a418	03					.byte 3	;wh_CodeLength
>a419	3c					  .byte LinkDisplacement	; offset to previous nt
=$a41a					XtPtr1 ::= *
=41878					WordListLink ::= Nt0 ; remember the nt of this word for later
.a41a	a9 00		lda #$00	Empty_Buffers:	lda #0		; Set the buffer status to empty.
.a41c	8d 3f 03	sta $033f			sta BuffStatusV+0 ; Only LSB is used.
=5					CodeLen	.var *-XtPtr1
=$a41f					Here1 = *	; remember here
>a418	05					.byte CodeLen	;patch wh_CodeLength
.a41f	60		rts				rts
>a420	46 6c 75 73 68			Name0:	.text "Flush"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=41893					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a425	05					.byte (("Flush"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>a426	10					.byte WordFlags	;wh_Flags
>a427	03					.byte 3	;wh_CodeLength
>a428	0f					  .byte LinkDisplacement	; offset to previous nt
=$a429					XtPtr1 ::= *
=41893					WordListLink ::= Nt0 ; remember the nt of this word for later
.a429	20 54 a3	jsr $a354	Flush:		jsr Save_Buffers
.a42c	4c 1a a4	jmp $a41a			jmp Empty_Buffers
=6					CodeLen	.var *-XtPtr1
=$a42f					Here1 = *	; remember here
>a427	06					.byte CodeLen	;patch wh_CodeLength
>a42f	4c 6f 61 64			Name0:	.text "Load"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=41907					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a433	84					.byte (("Load"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a434	40					.byte WordFlags	;wh_Flags
>a435	03					.byte 3	;wh_CodeLength
>a436	0e					  .byte LinkDisplacement	; offset to previous nt
=$a437					XtPtr1 ::= *
=41907					WordListLink ::= Nt0 ; remember the nt of this word for later
.a437					Load:
.a437	20 1d b4	jsr $b41d			jsr underflow_1
.a43a	ad 0d 03	lda $030d			lda BlkV+1		; Save the current value of BLK on the return stack.
.a43d	48		pha				pha
.a43e	ad 0c 03	lda $030c			lda BlkV+0
.a441	48		pha				pha
.a442	b5 24		lda $24,x			lda DStack+0,x		; Set BLK to the given block/screen number.
.a444	8d 0c 03	sta $030c			sta BlkV+0
.a447	b5 25		lda $25,x			lda DStack+1,x
.a449	8d 0d 03	sta $030d			sta BlkV+1
.a44c	20 76 a3	jsr $a376			jsr Block		; Load that block into a buffer
.a44f	a9 00		lda #$00			lda #<1024		; block length.
.a451	a0 04		ldy #$04			ldy #>1024
.a453	20 b3 b7	jsr $b7b3			jsr PushYA
.a456	38		sec				sec		; Set a flag to not zero BLK
.a457	20 04 b0	jsr $b004			jsr load_evaluate
.a45a	68		pla				pla
.a45b	8d 0c 03	sta $030c			sta BlkV+0
.a45e	68		pla				pla
.a45f	8d 0d 03	sta $030d			sta BlkV+1
.a462	0d 0c 03	ora $030c			ora BlkV+0
.a465	f0 13		beq $a47a			beq _done
.a467	ad 0c 03	lda $030c			lda BlkV+0
.a46a	ac 0d 03	ldy $030d			ldy BlkV+1
.a46d	20 b3 b7	jsr $b7b3			jsr PushYA
.a470	20 76 a3	jsr $a376			jsr Block
.a473	20 f4 b3	jsr $b3f4			jsr PopYA	; Pop the buffer address.
.a476	85 04		sta $04				sta cib+0
.a478	84 05		sty $05				sty cib+1
.a47a					_done:
=67					CodeLen	.var *-XtPtr1
=$a47a					Here1 = *	; remember here
>a435	43					.byte CodeLen	;patch wh_CodeLength
.a47a	60		rts				rts
>a47b	54 68 72 75			Name0:	.text "Thru"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=41983					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a47f	a4					.byte (("Thru"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=76					LinkDisplacement = Nt0-WordListLink
>a480	50					.byte WordFlags	;wh_Flags
>a481	03					.byte 3	;wh_CodeLength
>a482	4c					  .byte LinkDisplacement	; offset to previous nt
=$a483					XtPtr1 ::= *
=41983					WordListLink ::= Nt0 ; remember the nt of this word for later
.a483					Thru:
.a483	20 31 b4	jsr $b431			jsr underflow_2
.a486	20 e0 ce	jsr $cee0			jsr To_R
.a489					_loop:
.a489	b5 25		lda $25,x			lda DStack+1,x		; copy to return stack
.a48b	48		pha				pha
.a48c	b5 24		lda $24,x			lda DStack+0,x
.a48e	48		pha				pha
.a48f	20 37 a4	jsr $a437			jsr Load		; Load this screen.
.a492	20 fe ce	jsr $cefe			jsr R_From		; Get the screen # we just loaded.
.a495	20 5a ca	jsr $ca5a			jsr One_plus		; increment
.a498	86 14		stx $14				stx tmp1
.a49a	ba		tsx				tsx
.a49b	8a		txa				txa
.a49c	a8		tay				tay
.a49d	a6 14		ldx $14				ldx tmp1
.a49f	b9 01 01	lda $0101,y			lda RStack+1,y
.a4a2	d5 24		cmp $24,x			cmp DStack+0,x
.a4a4	b9 02 01	lda $0102,y			lda RStack+2,y
.a4a7	f5 25		sbc $25,x			sbc DStack+1,x
.a4a9	b0 de		bcs $a489			bcs _loop
.a4ab	e8		inx				inx			; Drop index
.a4ac	e8		inx				inx
.a4ad	68		pla				pla			; RDrop limit
.a4ae	68		pla				pla
=44					CodeLen	.var *-XtPtr1
=$a4af					Here1 = *	; remember here
>a481	2c					.byte CodeLen	;patch wh_CodeLength
.a4af	60		rts				rts
>a4b0	4c 69 73 74			Name0:	.text "List"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42036					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a4b4	84					.byte (("List"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>a4b5	10					.byte WordFlags	;wh_Flags
>a4b6	03					.byte 3	;wh_CodeLength
>a4b7	35					  .byte LinkDisplacement	; offset to previous nt
=$a4b8					XtPtr1 ::= *
=42036					WordListLink ::= Nt0 ; remember the nt of this word for later
.a4b8	20 f4 b3	jsr $b3f4	List:		jsr PopYA	; Save the screen number
.a4bb	8d 0e 03	sta $030e			sta ScrV+0
.a4be	8c 0f 03	sty $030f			sty ScrV+1
.a4c1					ListScr:
.a4c1	20 d3 a2	jsr $a2d3			jsr Scr
.a4c4	20 98 ce	jsr $ce98			jsr Fetch
.a4c7	20 76 a3	jsr $a376			jsr Block	; Get the current screen contents.
.a4ca	20 69 ab	jsr $ab69			jsr CR
.a4cd	20 a7 b8	jsr $b8a7			jsr SLiteral_Runtime
.a4d0	4c db a4	jmp $a4db			  jmp +				; for SLiteral_Runtime
>a4d3	53 63 72 65 65 6e 20 23				  .text "Screen #"		; for SLiteral_Runtime
.a4db					+
.a4db	20 d8 cd	jsr $cdd8			jsr Type
.a4de	20 d3 a2	jsr $a2d3			jsr Scr		; print screen number
.a4e1	20 98 ce	jsr $ce98			jsr Fetch
.a4e4	a9 04		lda #$04			lda #4		;    in 4 positions
.a4e6	20 32 cc	jsr $cc32			jsr U_Dot_R_A
.a4e9	a9 00		lda #$00			lda #0			; line #
.a4eb					_line_loop:
.a4eb	48		pha				pha
.a4ec	20 69 ab	jsr $ab69			jsr CR
.a4ef	68		pla				pla		; Print the line number
.a4f0	48		pha				pha
.a4f1	20 e2 b7	jsr $b7e2			jsr PushZA
.a4f4	a9 02		lda #$02			lda #2		;   in 2 positions
.a4f6	20 32 cc	jsr $cc32			jsr U_Dot_R_A
.a4f9	20 cc cd	jsr $cdcc			jsr Space
.a4fc	20 56 cf	jsr $cf56			jsr Dup		; Print one line using the address on the stack.
.a4ff	a9 40		lda #$40			lda #64
.a501	20 e2 b7	jsr $b7e2			jsr PushZA
.a504	20 d8 cd	jsr $cdd8			jsr Type
.a507	a9 40		lda #$40			lda #64		; move address to the next line.
.a509	20 0c ca	jsr $ca0c			jsr Plus_A
.a50c	68		pla				pla		; Increment the line number
.a50d	18		clc				clc
.a50e	69 01		adc #$01			adc #1
.a510	c9 10		cmp #$10			cmp #16		; See if we are done.
.a512	d0 d7		bne $a4eb			bne _line_loop
.a514	e8		inx				inx		; Drop the address
.a515	e8		inx				inx
.a516	4c 69 ab	jmp $ab69			jmp CR
=97					CodeLen	.var *-XtPtr1
=$a519					Here1 = *	; remember here
>a4b6	61					.byte CodeLen	;patch wh_CodeLength
>a519	44 65 66 65 72			Name0:	.text "Defer"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42142					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a51e	45					.byte (("Defer"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=106					LinkDisplacement = Nt0-WordListLink
>a51f	10					.byte WordFlags	;wh_Flags
>a520	03					.byte 3	;wh_CodeLength
>a521	6a					  .byte LinkDisplacement	; offset to previous nt
=$a522					XtPtr1 ::= *
=42142					WordListLink ::= Nt0 ; remember the nt of this word for later
.a522					Defer:
.a522	20 fb c0	jsr $c0fb			jsr Header_Comma	; compile word header
.a525	a9 2f		lda #$2f			lda #<_undefined	; compile "jmp _undefined" (patched later)
.a527	a0 a5		ldy #$a5			ldy #>_undefined
.a529	20 37 cd	jsr $cd37			jsr Jmp_Comma_YA
.a52c	4c cf bb	jmp $bbcf			jmp adjust_z		; set word length
=13					CodeLen	.var *-XtPtr1
=$a52f					Here1 = *	; remember here
>a520	0d					.byte CodeLen	;patch wh_CodeLength
.a52f					_undefined:
.a52f	a9 6a		lda #$6a			lda #$100+err_Defer	; throw exception
.a531	4c 79 b4	jmp $b479			jmp ThrowA
>a534	44 65 66 65 72 21		Name0:	.text "Defer!"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=42170					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a53a	26					.byte (("Defer!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>a53b	10					.byte WordFlags	;wh_Flags
>a53c	03					.byte 3	;wh_CodeLength
>a53d	1c					  .byte LinkDisplacement	; offset to previous nt
=$a53e					XtPtr1 ::= *
=42170					WordListLink ::= Nt0 ; remember the nt of this word for later
.a53e	20 f4 b3	jsr $b3f4	Defer_Store:	jsr PopYA
.a541	85 14		sta $14		Defer_Store_YA:	sta tmp1+0
.a543	84 15		sty $15				sty tmp1+1
.a545	b5 24		lda $24,x			lda DStack+0,x		; DEFERs JMP abs operand= xt2
.a547	a0 01		ldy #$01			ldy #1
.a549	91 14		sta ($14),y			sta (tmp1),y
.a54b	b5 25		lda $25,x			lda DStack+1,x
.a54d	c8		iny				iny
.a54e	91 14		sta ($14),y			sta (tmp1),y
.a550	4c 8f cf	jmp $cf8f			jmp Drop		; Drop xt2
=21					CodeLen	.var *-XtPtr1
=$a553					Here1 = *	; remember here
>a53c	15					.byte CodeLen	;patch wh_CodeLength
>a553	44 65 66 65 72 40		Name0:	.text "Defer@"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=42201					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a559	06					.byte (("Defer@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>a55a	10					.byte WordFlags	;wh_Flags
>a55b	03					.byte 3	;wh_CodeLength
>a55c	1f					  .byte LinkDisplacement	; offset to previous nt
=$a55d					XtPtr1 ::= *
=42201					WordListLink ::= Nt0 ; remember the nt of this word for later
.a55d	20 f4 b3	jsr $b3f4	Defer_Fetch:	jsr PopYA	; pop xt1, check underflow
.a560	85 14		sta $14		Defer_Fetch_YA:	sta tmp1+0
.a562	84 15		sty $15				sty tmp1+1
.a564	ca		dex				dex		; push DEFERs JMP abs operand
.a565	ca		dex				dex
.a566	a0 01		ldy #$01			ldy #1
.a568	b1 14		lda ($14),y			lda (tmp1),y
.a56a	95 24		sta $24,x			sta DStack+0,x
.a56c	c8		iny				iny
.a56d	b1 14		lda ($14),y			lda (tmp1),y
.a56f	95 25		sta $25,x			sta DStack+1,x
.a571	60		rts				rts
=21					CodeLen	.var *-XtPtr1
=$a572					Here1 = *	; remember here
>a55b	15					.byte CodeLen	;patch wh_CodeLength
>a572	49 73				Name0:	.text "Is"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=42228					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a574	62					.byte (("Is"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>a575	18					.byte WordFlags	;wh_Flags
>a576	03					.byte 3	;wh_CodeLength
>a577	1b					  .byte LinkDisplacement	; offset to previous nt
=$a578					XtPtr1 ::= *
=42228					WordListLink ::= Nt0 ; remember the nt of this word for later
.a578					Is:
.a578	20 35 bc	jsr $bc35			jsr Tick		; get xt of "name"
.a57b	a5 0a		lda $0a				lda state		; Check STATE
.a57d	f0 bf		beq $a53e			beq Defer_Store		; interpreting, put xt in the DEFER word
.a57f					_compiling:
.a57f	20 9a b7	jsr $b79a			jsr ldya_immed_comma	; compile LDY #; LDA # of the xt of "name"
.a582	a0 a5		ldy #$a5			ldy #>Defer_Store_YA	; Postpone DEFER! by compiling a JSR to it.
.a584	a9 41		lda #$41			lda #<Defer_Store_YA
.a586	4c 21 cd	jmp $cd21			jmp Jsr_Comma_YA
=17					CodeLen	.var *-XtPtr1
=$a589					Here1 = *	; remember here
>a576	11					.byte CodeLen	;patch wh_CodeLength
>a589	41 63 74 69 6f 6e 2d 4f		Name0:	.text "Action-Of"	;  name of word as a string, ending at wh_NameLastChar
>a591	66
=9					NameLength = *-Name0
=42258					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a592	c9					.byte (("Action-Of"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>a593	18					.byte WordFlags	;wh_Flags
>a594	03					.byte 3	;wh_CodeLength
>a595	1e					  .byte LinkDisplacement	; offset to previous nt
=$a596					XtPtr1 ::= *
=42258					WordListLink ::= Nt0 ; remember the nt of this word for later
.a596					Action_Of:
.a596	20 35 bc	jsr $bc35			jsr Tick		; get xt of "name"
.a599	a5 0a		lda $0a				lda state		; Check STATE
.a59b	f0 c0		beq $a55d			beq Defer_Fetch		; interpreting, get xt in the DEFER word
.a59d					_compiling:
.a59d	20 9a b7	jsr $b79a			jsr ldya_immed_comma	; compile LDY #; LDA # of the xt of "name"
.a5a0	a0 a5		ldy #$a5			ldy #>Defer_Fetch_YA	; Postpone DEFER@ by compiling a JSR to it.
.a5a2	a9 60		lda #$60			lda #<Defer_Fetch_YA
.a5a4	4c 21 cd	jmp $cd21			jmp Jsr_Comma_YA
=17					CodeLen	.var *-XtPtr1
=$a5a7					Here1 = *	; remember here
>a594	11					.byte CodeLen	;patch wh_CodeLength
>a5a7	55 73 65 72 41 64 64 72		Name0:	.text "UserAddr"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=42287					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5af	48					.byte (("UserAddr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>a5b0	10					.byte WordFlags	;wh_Flags
>a5b1	03					.byte 3	;wh_CodeLength
>a5b2	1d					  .byte LinkDisplacement	; offset to previous nt
=$a5b3					XtPtr1 ::= *
=42287					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5b3	a0 02		ldy #$02	UserAddr:	ldy #>User0
.a5b5	a9 ff		lda #$ff			lda #<User0
.a5b7	4c b3 b7	jmp $b7b3			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a5ba					Here1 = *	; remember here
>a5b1	07					.byte CodeLen	;patch wh_CodeLength
>a5ba	42 75 66 66 65 72 3a		Name0:	.text "Buffer:"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=42305					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5c1	47					.byte (("Buffer:"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>a5c2	10					.byte WordFlags	;wh_Flags
>a5c3	03					.byte 3	;wh_CodeLength
>a5c4	12					  .byte LinkDisplacement	; offset to previous nt
=$a5c5					XtPtr1 ::= *
=42305					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5c5	20 a9 c1	jsr $c1a9	Buffer_Colon:	jsr Create
.a5c8	4c a2 c0	jmp $c0a2			jmp Allot
=6					CodeLen	.var *-XtPtr1
=$a5cb					Here1 = *	; remember here
>a5c3	06					.byte CodeLen	;patch wh_CodeLength
>a5cb	43 61 73 65			Name0:	.text "Case"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42319					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5cf	a4					.byte (("Case"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a5d0	1c					.byte WordFlags	;wh_Flags
>a5d1	03					.byte 3	;wh_CodeLength
>a5d2	0e					  .byte LinkDisplacement	; offset to previous nt
=$a5d3					XtPtr1 ::= *
=42319					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5d3					Case:
.a5d3	4c f0 b7	jmp $b7f0			jmp Zero	; init jmp fixup chain
=3					CodeLen	.var *-XtPtr1
=$a5d6					Here1 = *	; remember here
>a5d1	03					.byte CodeLen	;patch wh_CodeLength
>a5d6	45 6e 64 43 61 73 65		Name0:	.text "EndCase"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=42333					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5dd	a7					.byte (("EndCase"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a5de	1c					.byte WordFlags	;wh_Flags
>a5df	03					.byte 3	;wh_CodeLength
>a5e0	0e					  .byte LinkDisplacement	; offset to previous nt
=$a5e1					XtPtr1 ::= *
=42333					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5e1					EndCase:
.a5e1	20 11 cd	jsr $cd11			jsr Drop_Comma
.a5e4					_loop:
.a5e4	b5 25		lda $25,x			lda DStack+1,x	; while addr fixup entries left
.a5e6	f0 06		beq $a5ee			beq _done
.a5e8	20 63 a6	jsr $a663			jsr Then	;   fixup another one
.a5eb	4c e4 a5	jmp $a5e4			jmp _loop
.a5ee					_done:
.a5ee	e8		inx				inx		; Drop the 0
.a5ef	e8		inx				inx
=15					CodeLen	.var *-XtPtr1
=$a5f0					Here1 = *	; remember here
>a5df	0f					.byte CodeLen	;patch wh_CodeLength
.a5f0	60		rts				rts
>a5f1	4f 66				Name0:	.text "Of"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=42355					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5f3	c2					.byte (("Of"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a5f4	1c					.byte WordFlags	;wh_Flags
>a5f5	03					.byte 3	;wh_CodeLength
>a5f6	16					  .byte LinkDisplacement	; offset to previous nt
=$a5f7					XtPtr1 ::= *
=42355					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5f7					Of:
.a5f7	a0 a6		ldy #$a6			ldy #>_runtime		; Check if value is equal to this case.
.a5f9	a9 0c		lda #$0c			lda #<_runtime
.a5fb	20 21 cd	jsr $cd21			jsr Jsr_Comma_YA
.a5fe	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a600	20 e7 cc	jsr $cce7			jsr C_Comma_A
.a603	20 28 ca	jsr $ca28			jsr Here		; Put the origination address on the stack for else/then
.a606	20 f0 b7	jsr $b7f0			jsr Zero
.a609	4c fb cc	jmp $ccfb			jmp Comma
=21					CodeLen	.var *-XtPtr1
=$a60c					Here1 = *	; remember here
>a5f5	15					.byte CodeLen	;patch wh_CodeLength
.a60c					_runtime:
.a60c	e8		inx				inx		; Drop x2
.a60d	e8		inx				inx
.a60e	b5 22		lda $22,x			lda DStack-2,x	; compare x1 with x2
.a610	d5 24		cmp $24,x			cmp DStack+0,x
.a612	d0 06		bne $a61a			bne _NotEq
.a614	b5 23		lda $23,x			lda DStack-1,x
.a616	d5 25		cmp $25,x			cmp DStack+1,x
.a618	f0 31		beq $a64b			beq zbranch_run2 ; Drop x1 & return to after the jmp abs
.a61a	60		rts		_NotEq:		rts		; return to the jmp abs to next test
>a61b	45 6e 64 4f 66			Name0:	.text "EndOf"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42400					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a620	c5					.byte (("EndOf"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>a621	1c					.byte WordFlags	;wh_Flags
>a622	03					.byte 3	;wh_CodeLength
>a623	2d					  .byte LinkDisplacement	; offset to previous nt
=$a624					XtPtr1 ::= *
=42400					WordListLink ::= Nt0 ; remember the nt of this word for later
.a624	4c 74 a6	jmp $a674	EndOf:		jmp Else
=3					CodeLen	.var *-XtPtr1
=$a627					Here1 = *	; remember here
>a622	03					.byte CodeLen	;patch wh_CodeLength
>a627	49 66				Name0:	.text "If"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=42409					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a629	c2					.byte (("If"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>a62a	1c					.byte WordFlags	;wh_Flags
>a62b	03					.byte 3	;wh_CodeLength
>a62c	09					  .byte LinkDisplacement	; offset to previous nt
=$a62d					XtPtr1 ::= *
=42409					WordListLink ::= Nt0 ; remember the nt of this word for later
.a62d					If:
.a62d	20 3e a6	jsr $a63e	If3:		jsr zbranch_jsr_comma	; Compile a 0BRANCH
.a630					zbranch_jmp0_comma:
.a630	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a632	20 e7 cc	jsr $cce7			jsr C_Comma_A
.a635	20 28 ca	jsr $ca28			jsr Here		; save ptr to address for else/then
.a638	a9 00		lda #$00			lda #0			; Stuff zero in for the branch address right now.
.a63a	a8		tay				tay			; THEN or ELSE will fix it later.
.a63b	4c fe cc	jmp $ccfe			jmp Comma_YA
=17					CodeLen	.var *-XtPtr1
=$a63e					Here1 = *	; remember here
>a62b	11					.byte CodeLen	;patch wh_CodeLength
=$cd34					zbranch_jmp_comma = Jmp_Comma		; compile jmp abs
.a63e					zbranch_jsr_comma:
.a63e	a0 a6		ldy #$a6			ldy #>_runtime
.a640	a9 45		lda #$45			lda #<_runtime
.a642	4c 21 cd	jmp $cd21			jmp Jsr_Comma_YA
.a645					_runtime:
.a645	b5 24		lda $24,x			lda DStack+0,x		;flag is false?
.a647	15 25		ora $25,x			ora DStack+1,x
.a649	f0 0d		beq $a658			beq zbranch_run_done
.a64b	18		clc		zbranch_run2:	clc			; move RTS addr over the next jmp abs.
.a64c	68		pla				pla
.a64d	69 03		adc #$03			adc #3
.a64f	90 06		bcc $a657			bcc +
.a651	a8		tay				tay
.a652	68		pla				pla
.a653	69 00		adc #$00			adc #0
.a655	48		pha				pha
.a656	98		tya				tya
.a657	48		pha		+		pha
.a658					zbranch_run_done:
.a658	e8		inx				inx			; Drop f
.a659	e8		inx				inx
.a65a	60		rts				rts
>a65b	54 68 65 6e			Name0:	.text "Then"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42463					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a65f	c4					.byte (("Then"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=54					LinkDisplacement = Nt0-WordListLink
>a660	1c					.byte WordFlags	;wh_Flags
>a661	03					.byte 3	;wh_CodeLength
>a662	36					  .byte LinkDisplacement	; offset to previous nt
=$a663					XtPtr1 ::= *
=42463					WordListLink ::= Nt0 ; remember the nt of this word for later
.a663					Then:
.a663	20 28 ca	jsr $ca28			jsr Here
.a666	20 73 cf	jsr $cf73			jsr Swap
.a669	4c b1 ce	jmp $ceb1			jmp Store
=9					CodeLen	.var *-XtPtr1
=$a66c					Here1 = *	; remember here
>a661	09					.byte CodeLen	;patch wh_CodeLength
>a66c	45 6c 73 65			Name0:	.text "Else"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42480					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a670	a4					.byte (("Else"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>a671	1c					.byte WordFlags	;wh_Flags
>a672	03					.byte 3	;wh_CodeLength
>a673	11					  .byte LinkDisplacement	; offset to previous nt
=$a674					XtPtr1 ::= *
=42480					WordListLink ::= Nt0 ; remember the nt of this word for later
.a674					Else:
.a674	20 30 a6	jsr $a630			jsr zbranch_jmp0_comma	; compile jmp 0, push addr of addr
.a677	20 28 ca	jsr $ca28			jsr Here
.a67a	20 51 ce	jsr $ce51			jsr Rot
.a67d	4c b1 ce	jmp $ceb1			jmp Store
=12					CodeLen	.var *-XtPtr1
=$a680					Here1 = *	; remember here
>a672	0c					.byte CodeLen	;patch wh_CodeLength
>a680	42 65 67 69 6e			Name0:	.text "Begin"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42501					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a685	c5					.byte (("Begin"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= NN+CO+IM	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>a686	1c					.byte WordFlags	;wh_Flags
>a687	03					.byte 3	;wh_CodeLength
>a688	15					  .byte LinkDisplacement	; offset to previous nt
=$a689					XtPtr1 ::= *
=42501					WordListLink ::= Nt0 ; remember the nt of this word for later
.a689	20 28 ca	jsr $ca28	Begin:		jsr Here	; remember the loop starting location
.a68c	a9 89		lda #$89			lda #<Begin	; pairing marker
.a68e	4c e2 b7	jmp $b7e2			jmp PushZA
=8					CodeLen	.var *-XtPtr1
=$a691					Here1 = *	; remember here
>a687	08					.byte CodeLen	;patch wh_CodeLength
>a691	41 67 61 69 6e			Name0:	.text "Again"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42518					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a696	c5					.byte (("Again"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=92					WordFlags ::= NN+CO+IM+UF	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>a697	5c					.byte WordFlags	;wh_Flags
>a698	03					.byte 3	;wh_CodeLength
>a699	11					  .byte LinkDisplacement	; offset to previous nt
=$a69a					XtPtr1 ::= *
=42518					WordListLink ::= Nt0 ; remember the nt of this word for later
.a69a	20 31 b4	jsr $b431	Again:		jsr underflow_2
.a69d	a9 89		lda #$89			lda #<Begin	; check pairing
.a69f	20 07 b2	jsr $b207			jsr QPairCtlA
.a6a2	4c 34 cd	jmp $cd34			jmp Jmp_Comma	; Compile a jmp abs.
=11					CodeLen	.var *-XtPtr1
=$a6a5					Here1 = *	; remember here
>a698	0b					.byte CodeLen	;patch wh_CodeLength
>a6a5	55 6e 74 69 6c			Name0:	.text "Until"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42538					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6aa	85					.byte (("Until"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>a6ab	1c					.byte WordFlags	;wh_Flags
>a6ac	03					.byte 3	;wh_CodeLength
>a6ad	14					  .byte LinkDisplacement	; offset to previous nt
=$a6ae					XtPtr1 ::= *
=42538					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6ae	a9 89		lda #$89	Until:		lda #<Begin		; check pairing
.a6b0	20 07 b2	jsr $b207			jsr QPairCtlA
.a6b3	4c ea a6	jmp $a6ea			jmp ZBranch_Comma	; The address to loop back to is on the stack.
=8					CodeLen	.var *-XtPtr1
=$a6b6					Here1 = *	; remember here
>a6ac	08					.byte CodeLen	;patch wh_CodeLength
>a6b6	57 68 69 6c 65			Name0:	.text "While"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42555					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6bb	a5					.byte (("While"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>a6bc	1c					.byte WordFlags	;wh_Flags
>a6bd	03					.byte 3	;wh_CodeLength
>a6be	11					  .byte LinkDisplacement	; offset to previous nt
=$a6bf					XtPtr1 ::= *
=42555					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6bf	a9 89		lda #$89	While:		lda #<Begin	; check pairing
.a6c1	20 07 b2	jsr $b207			jsr QPairCtlA
.a6c4	20 2d a6	jsr $a62d			jsr If3		; Compile a 0branch & jmp, push addr of addr
.a6c7	20 73 cf	jsr $cf73			jsr Swap	; Swap the two addresses on the stack.
.a6ca	a9 89		lda #$89			lda #<Begin	; pairing marker
.a6cc	4c e2 b7	jmp $b7e2			jmp PushZA
=16					CodeLen	.var *-XtPtr1
=$a6cf					Here1 = *	; remember here
>a6bd	10					.byte CodeLen	;patch wh_CodeLength
>a6cf	52 65 70 65 61 74		Name0:	.text "Repeat"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=42581					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6d5	86					.byte (("Repeat"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>a6d6	1c					.byte WordFlags	;wh_Flags
>a6d7	03					.byte 3	;wh_CodeLength
>a6d8	1a					  .byte LinkDisplacement	; offset to previous nt
=$a6d9					XtPtr1 ::= *
=42581					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6d9	a9 89		lda #$89	Repeat:		lda #<Begin	; check pairing
.a6db	20 07 b2	jsr $b207			jsr QPairCtlA
.a6de	20 34 cd	jsr $cd34			jsr Jmp_Comma	; compile the jmp back
.a6e1	20 28 ca	jsr $ca28			jsr Here	; patch the WHILE jmp operand
.a6e4	20 73 cf	jsr $cf73			jsr Swap
.a6e7	4c b1 ce	jmp $ceb1			jmp Store
=17					CodeLen	.var *-XtPtr1
=$a6ea					Here1 = *	; remember here
>a6d7	11					.byte CodeLen	;patch wh_CodeLength
.a6ea					ZBranch_Comma:
.a6ea	a9 e8		lda #$e8			lda #$e8		; compile inx; inx
.a6ec	a8		tay				tay
.a6ed	20 fe cc	jsr $ccfe			jsr Comma_YA
.a6f0	a9 b5		lda #$b5			lda #$b5		; compile lda DStack-2,x
.a6f2	a0 22		ldy #$22			ldy #DStack-2
.a6f4	20 fe cc	jsr $ccfe			jsr Comma_YA
.a6f7	a9 15		lda #$15			lda #$15		; compile ora DStack-1,x
.a6f9	a0 23		ldy #$23			ldy #DStack-1
.a6fb	20 fe cc	jsr $ccfe			jsr Comma_YA
.a6fe	a9 f0		lda #$f0			lda #$f0		; BEQ
.a700	d0 0e		bne $a710			bne Branch_CommaA
>a702	42 72 61 6e 63 68 2c		Name0:	.text "Branch,"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=42633					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a709	87					.byte (("Branch,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>a70a	10					.byte WordFlags	;wh_Flags
>a70b	03					.byte 3	;wh_CodeLength
>a70c	34					  .byte LinkDisplacement	; offset to previous nt
=$a70d					XtPtr1 ::= *
=42633					WordListLink ::= Nt0 ; remember the nt of this word for later
.a70d	20 d9 b3	jsr $b3d9			jsr PopA		; pop opcode to A
.a710					Branch_CommaA:
.a710	48		pha				pha			; save branch opcode
.a711	38		sec				sec			; AY= displacement+2
.a712	b5 24		lda $24,x			lda DStack+0,x
.a714	e5 00		sbc $00				sbc cp+0
.a716	a8		tay				tay
.a717	b5 25		lda $25,x			lda DStack+1,x
.a719	e5 01		sbc $01				sbc cp+1
.a71b	c9 ff		cmp #$ff			cmp #$ff		; offset maybe in range?
.a71d	f0 0b		beq $a72a			beq _rev
.a71f	68		pla		_2byte:		pla			; restore branch opcode
.a720	49 20		eor #$20			eor #$20		; reverse branch sense
.a722	a0 03		ldy #$03			ldy #3			; compile Bcc *+5
.a724	20 fe cc	jsr $ccfe			jsr Comma_YA
.a727	4c 34 cd	jmp $cd34			jmp Jmp_Comma		; compile JMP abs
.a72a	c0 82		cpy #$82	_rev:		cpy #$80+2		; offset in range?
.a72c	90 f1		bcc $a71f			bcc _2byte
.a72e	e8		inx		_1byte:		inx			; Drop address
.a72f	e8		inx				inx
.a730	88		dey				dey			; fix displacement
.a731	88		dey				dey
.a732	68		pla				pla			; restore branch opcode
.a733	4c fe cc	jmp $ccfe			jmp Comma_YA		; compile Bcc
>a736	57 6f 72 64			Name0:	.text "Word"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42682					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a73a	84					.byte (("Word"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>a73b	50					.byte WordFlags	;wh_Flags
>a73c	03					.byte 3	;wh_CodeLength
>a73d	31					  .byte LinkDisplacement	; offset to previous nt
=$a73e					XtPtr1 ::= *
=42682					WordListLink ::= Nt0 ; remember the nt of this word for later
.a73e					Word:
.a73e	20 1d b4	jsr $b41d			jsr underflow_1
.a741	a4 08		ldy $08				ldy toin+0		; >IN
.a743	c4 06		cpy $06		_DelimLoop:	cpy ciblen+0		; quit if end of input
.a745	f0 09		beq $a750			beq _found_char
.a747	b1 04		lda ($04),y			lda (cib),y
.a749	d5 24		cmp $24,x			cmp DStack+0,x		; ASCII of delimiter
.a74b	d0 03		bne $a750			bne _found_char
.a74d	c8		iny				iny
.a74e	d0 f3		bne $a743			bne _DelimLoop
.a750					_found_char:
.a750	84 08		sty $08				sty toin+0		; Save index of where word starts
.a752	20 b8 ba	jsr $bab8			jsr Parse		; The real work is done by parse
.a755	20 d9 b3	jsr $b3d9			jsr PopA		; pop u
.a758	85 16		sta $16				sta tmp2+0
.a75a	20 ff b3	jsr $b3ff			jsr PopTmp1		; pop addr
.a75d	20 28 ca	jsr $ca28			jsr Here		; Return caddr
.a760	a5 16		lda $16				lda tmp2+0
.a762	a0 00		ldy #$00			ldy #0			; Save length of string
.a764	f0 03		beq $a769			beq _CopyStart
.a766	b1 14		lda ($14),y	_CopyLoop:	lda (tmp1),y
.a768	c8		iny				iny
.a769	20 e7 cc	jsr $cce7	_CopyStart:	jsr C_Comma_A
.a76c	c4 16		cpy $16				cpy tmp2+0
.a76e	90 f6		bcc $a766			bcc _CopyLoop
=50					CodeLen	.var *-XtPtr1
=$a770					Here1 = *	; remember here
>a73c	32					.byte CodeLen	;patch wh_CodeLength
.a770	60		rts				rts
>a771	28				Name0:	.text "("	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=42738					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a772	01					.byte (("("[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>a773	18					.byte WordFlags	;wh_Flags
>a774	03					.byte 3	;wh_CodeLength
>a775	38					  .byte LinkDisplacement	; offset to previous nt
=$a776					XtPtr1 ::= *
=42738					WordListLink ::= Nt0 ; remember the nt of this word for later
.a776	a9 29		lda #$29	Paren:		lda #')'		; separator
.a778	20 bb ba	jsr $babb			jsr Parse_A		; Call parse.
.a77b	4c 36 c5	jmp $c536			jmp Two_drop		; 2Drop the result.
=8					CodeLen	.var *-XtPtr1
=$a77e					Here1 = *	; remember here
>a774	08					.byte CodeLen	;patch wh_CodeLength
>a77e	2e 28				Name0:	.text ".("	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=42752					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a780	02					.byte ((".("[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a781	18					.byte WordFlags	;wh_Flags
>a782	03					.byte 3	;wh_CodeLength
>a783	0e					  .byte LinkDisplacement	; offset to previous nt
=$a784					XtPtr1 ::= *
=42752					WordListLink ::= Nt0 ; remember the nt of this word for later
.a784	a9 29		lda #$29	Dot_paren:	lda #')'
.a786	20 bb ba	jsr $babb			jsr Parse_A
.a789	4c d8 cd	jmp $cdd8			jmp Type
=8					CodeLen	.var *-XtPtr1
=$a78c					Here1 = *	; remember here
>a782	08					.byte CodeLen	;patch wh_CodeLength
>a78c	48 61 73 68			Name0:	.text "Hash"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42768					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a790	04					.byte (("Hash"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>a791	10					.byte WordFlags	;wh_Flags
>a792	03					.byte 3	;wh_CodeLength
>a793	10					  .byte LinkDisplacement	; offset to previous nt
=$a794					XtPtr1 ::= *
=42768					WordListLink ::= Nt0 ; remember the nt of this word for later
.a794	20 d9 b3	jsr $b3d9	Hash:		jsr PopA		; save length
.a797	85 16		sta $16				sta tmp2+0
.a799	b5 24		lda $24,x			lda DStack+0,x		; copy addr
.a79b	b4 25		ldy $25,x			ldy DStack+1,x
.a79d	85 14		sta $14				sta tmp1+0
.a79f	84 15		sty $15				sty tmp1+1
.a7a1	a9 b3		lda #$b3			lda #$b3		; init hash
.a7a3	95 24		sta $24,x			sta DStack+0,x
.a7a5	95 25		sta $25,x			sta DStack+1,x
.a7a7	a0 00		ldy #$00			ldy #0			; for each char
.a7a9	f0 15		beq $a7c0			beq _next
.a7ab	b1 14		lda ($14),y	_loop:		lda (tmp1),y		;   get char
.a7ad	c9 61		cmp #$61			cmp #'a'		;   uppercase
.a7af	90 06		bcc $a7b7			bcc _3
.a7b1	c9 7b		cmp #$7b			cmp #'z'+1
.a7b3	b0 02		bcs $a7b7			bcs _3
.a7b5	29 df		and #$df			and #$df
.a7b7	16 24		asl $24,x	_3:		asl DStack+0,x		;   add to hash
.a7b9	36 25		rol $25,x			rol DStack+1,x
.a7bb	75 24		adc $24,x			adc DStack+0,x
.a7bd	95 24		sta $24,x			sta DStack+0,x
.a7bf	c8		iny				iny
.a7c0	c4 16		cpy $16		_Next:		cpy tmp2+0
.a7c2	90 e7		bcc $a7ab			bcc _loop
=48					CodeLen	.var *-XtPtr1
=$a7c4					Here1 = *	; remember here
>a792	30					.byte CodeLen	;patch wh_CodeLength
.a7c4	60		rts				rts
>a7c5	45 6e 76 69 72 6f 6e 6d		Name0:	.text "Environment?"	;  name of word as a string, ending at wh_NameLastChar
>a7cd	65 6e 74 3f
=12					NameLength = *-Name0
=42833					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a7d1	ec					.byte (("Environment?"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=65					LinkDisplacement = Nt0-WordListLink
>a7d2	10					.byte WordFlags	;wh_Flags
>a7d3	03					.byte 3	;wh_CodeLength
>a7d4	41					  .byte LinkDisplacement	; offset to previous nt
=$a7d5					XtPtr1 ::= *
=42833					WordListLink ::= Nt0 ; remember the nt of this word for later
.a7d5					Environment_Q:
.a7d5	20 94 a7	jsr $a794			jsr Hash		; ( hash )
.a7d8	a0 00		ldy #$00			ldy #0			; Y= table index
.a7da	f0 0a		beq $a7e6			beq _entry_test
.a7dc	98		tya		_entry_next:	tya
.a7dd	c0 34		cpy #$34			cpy #_table_dbl		; if double
.a7df	90 02		bcc $a7e3			bcc +
.a7e1	69 01		adc #$01			adc #6-4-1		;   skip double
.a7e3	69 04		adc #$04	+		adc #4			;   skip single
.a7e5	a8		tay		_3:		tay
.a7e6	b9 1a a8	lda $a81a,y	_entry_test:	lda _Table+0,y		; match?
.a7e9	f0 28		beq $a813			beq _notfound
.a7eb	d5 24		cmp $24,x			cmp DStack+0,x
.a7ed	d0 ed		bne $a7dc			bne _entry_next
.a7ef	b9 1b a8	lda $a81b,y			lda _Table+1,y
.a7f2	d5 25		cmp $25,x			cmp DStack+1,x
.a7f4	d0 e6		bne $a7dc			bne _entry_next
.a7f6	b9 1c a8	lda $a81c,y			lda _Table+2,y
.a7f9	95 24		sta $24,x			sta DStack+0,x
.a7fb	b9 1d a8	lda $a81d,y			lda _Table+3,y
.a7fe	95 25		sta $25,x			sta DStack+1,x
.a800	c0 34		cpy #$34			cpy #_table_dbl		; single or double data?
.a802	90 0c		bcc $a810			bcc _single
.a804	ca		dex				dex			;  push 2nd cell
.a805	ca		dex				dex
.a806	b9 1e a8	lda $a81e,y			lda _Table+4,y
.a809	95 24		sta $24,x			sta DStack+0,x
.a80b	b9 1f a8	lda $a81f,y			lda _Table+5,y
.a80e	95 25		sta $25,x			sta DStack+1,x
.a810					_single:
.a810	4c c2 b7	jmp $b7c2			jmp True		; return True
.a813					_notfound:
.a813	a9 00		lda #$00			lda #0			; return 0
.a815	95 24		sta $24,x			sta DStack+0,x
.a817	95 25		sta $25,x			sta DStack+1,x
.a819	60		rts				rts
=69					CodeLen	.var *-XtPtr1
=$a81a					Here1 = *	; remember here
>a7d3	45					.byte CodeLen	;patch wh_CodeLength
.a81a					_Table:
>a81a	5e e6 ff 7f				.word $e65e,$7fff	; "/COUNTED-STRING"
>a81e	be 79 ff 00				.word $79BE,$ff		; "/HOLD"
>a822	b9 3c 54 00				.word $3cb9,padoffset	; "/PAD"
>a826	8b 81 08 00				.word $818b,8		; "ADDRESS-UNIT-BITS"
>a82a	57 fc 00 00				.word $fc57,0		; "FLOORED"	we have symmetric)
>a82e	4f fb ff 00				.word $fb4f,$ff		; "MAX-CHAR"
>a832	56 7f ff 7f				.word $7f56,$7fff	; "MAX-N"
>a836	5d 7f ff ff				.word $7f5d,$ffff	; "MAX-U"
>a83a	38 ce 80 00				.word $ce38,$80		; "RETURN-STACK-CELLS"
>a83e	f2 c0 14 00				.word $c0f2,DStack0/2	; "STACK-CELLS"
>a842	36 e3 09 00				.word $e336,9		; "WORDLISTS"
>a846	4a f2 ff ff				.word $f24a,$ffff	; "FLOATING"		flag	no	   floating-point word set present
>a84a	01 99 0a 00				.word $9901,FDim	; "FLOATING-STACK"	n	yes	   If n = zero, floating-point numbers are
=52					_table_dbl = *-_Table	; These return a double-cell number
>a84e	4c 7f ff ff ff 7f			.word $7f4c,$ffff,$7fff	; "MAX-D"
>a854	fe fe ff ff ff ff			.word $fefe,$ffff,$ffff	; "MAX-UD"
>a85a	00					.byte 0		; end of list
>a85b	44 75 6d 70			Name0:	.text "Dump"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42975					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a85f	04					.byte (("Dump"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=142					LinkDisplacement = Nt0-WordListLink
>a860	50					.byte WordFlags	;wh_Flags
>a861	03					.byte 3	;wh_CodeLength
>a862	8e					  .byte LinkDisplacement	; offset to previous nt
=$a863					XtPtr1 ::= *
=42975					WordListLink ::= Nt0 ; remember the nt of this word for later
.a863					Dump:
.a863	20 31 b4	jsr $b431			jsr underflow_2
.a866	ca		dex				dex			; alloc work area
.a867	ca		dex				dex
.a868					_row:
.a868	20 69 ab	jsr $ab69			jsr CR
.a86b	b5 29		lda $29,x			lda DStack+5,x		; print address number
.a86d	20 eb a8	jsr $a8eb			jsr C_Dot_Hex_A
.a870	b5 28		lda $28,x			lda DStack+4,x
.a872	20 eb a8	jsr $a8eb			jsr C_Dot_Hex_A
.a875	20 cc cd	jsr $cdcc			jsr Space
.a878	20 cc cd	jsr $cdcc			jsr Space
.a87b	a9 00		lda #$00			lda #0
.a87d	95 24		sta $24,x			sta DStack+0,x
.a87f					_loop:
.a87f	b5 26		lda $26,x			lda DStack+2,x
.a881	15 27		ora $27,x			ora DStack+3,x
.a883	f0 36		beq $a8bb			beq _all_printed
.a885	a1 28		lda ($28,x)			lda (DStack+4,x)
.a887	20 eb a8	jsr $a8eb			jsr C_Dot_Hex_A
.a88a	20 cc cd	jsr $cdcc			jsr Space
.a88d	a1 28		lda ($28,x)			lda (DStack+4,x)
.a88f	20 11 a9	jsr $a911			jsr is_printable
.a892	b0 02		bcs $a896			bcs _printable
.a894	a9 2e		lda #$2e			lda #'.'		 ; Print dot if not printable
.a896					_printable:
.a896	b4 24		ldy $24,x			ldy DStack+0,x
.a898	91 00		sta ($00),y			sta (cp),y
.a89a	c0 07		cpy #$07			cpy #7
.a89c	d0 03		bne $a8a1			bne +
.a89e	20 cc cd	jsr $cdcc			jsr Space
.a8a1					+
.a8a1	f6 28		inc $28,x			inc DStack+4,x
.a8a3	d0 02		bne $a8a7			bne +
.a8a5	f6 29		inc $29,x			inc DStack+5,x
.a8a7					+
.a8a7	20 41 ca	jsr $ca41			jsr NOS_One_Minus	; loop counter
.a8aa	f6 24		inc $24,x			inc DStack+0,x
.a8ac	b5 24		lda $24,x			lda DStack+0,x
.a8ae	c9 10		cmp #$10			cmp #16
.a8b0	90 cd		bcc $a87f			bcc _loop		; next byte
.a8b2	20 cc cd	jsr $cdcc			jsr Space
.a8b5	20 ca a8	jsr $a8ca			jsr dump_print_ascii
.a8b8	4c 68 a8	jmp $a868			jmp _row		; new row
.a8bb					_all_printed:
.a8bb	b5 24		lda $24,x			lda DStack+0,x
.a8bd	f0 06		beq $a8c5			beq _done
.a8bf	20 cc cd	jsr $cdcc			jsr Space
.a8c2	20 ca a8	jsr $a8ca			jsr dump_print_ascii
.a8c5					_done:
.a8c5	e8		inx				inx			; drop work area
.a8c6	e8		inx				inx
.a8c7	4c 36 c5	jmp $c536			jmp Two_drop		; one byte less than 4x INX
.a8ca					dump_print_ascii:
.a8ca	a0 00		ldy #$00			ldy #0
.a8cc					_loop:
.a8cc	b1 00		lda ($00),y			lda (cp),y
.a8ce	20 c0 cd	jsr $cdc0			jsr Emit_A
.a8d1	c8		iny				iny
.a8d2	c0 08		cpy #$08			cpy #8
.a8d4	d0 03		bne $a8d9			bne +
.a8d6	20 cc cd	jsr $cdcc			jsr Space
.a8d9					+
.a8d9	98		tya				tya
.a8da	d5 24		cmp $24,x			cmp DStack+0,x
.a8dc	90 ee		bcc $a8cc			bcc _loop
.a8de	60		rts				rts
=124					CodeLen	.var *-XtPtr1
=$a8df					Here1 = *	; remember here
>a861	7c					.byte CodeLen	;patch wh_CodeLength
>a8df	43 2e 48 65 78			Name0:	.text "C.Hex"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=43108					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a8e4	05					.byte (("C.Hex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=133					LinkDisplacement = Nt0-WordListLink
>a8e5	10					.byte WordFlags	;wh_Flags
>a8e6	03					.byte 3	;wh_CodeLength
>a8e7	85					  .byte LinkDisplacement	; offset to previous nt
=$a8e8					XtPtr1 ::= *
=43108					WordListLink ::= Nt0 ; remember the nt of this word for later
.a8e8	20 d9 b3	jsr $b3d9	C_Dot_Hex:	jsr PopA
.a8eb	48		pha		C_Dot_Hex_A:	pha
.a8ec	4a		lsr a				lsr		; convert high nibble first
.a8ed	4a		lsr a				lsr
.a8ee	4a		lsr a				lsr
.a8ef	4a		lsr a				lsr
.a8f0	20 f4 a8	jsr $a8f4			jsr _nibble_to_ascii
.a8f3	68		pla				pla
.a8f4					_nibble_to_ascii:
.a8f4	29 0f		and #$0f			and #$0F	; only use lower nibble
.a8f6	c9 0a		cmp #$0a			cmp #9+1
.a8f8	90 02		bcc $a8fc			bcc +
.a8fa	69 06		adc #$06			adc #6
.a8fc	69 30		adc #$30	+		adc #'0'
.a8fe	4c c0 cd	jmp $cdc0			jmp Emit_A
=25					CodeLen	.var *-XtPtr1
=$a901					Here1 = *	; remember here
>a8e6	19					.byte CodeLen	;patch wh_CodeLength
>a901	2e 48 65 78			Name0:	.text ".Hex"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=43141					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a905	04					.byte ((".Hex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>a906	10					.byte WordFlags	;wh_Flags
>a907	03					.byte 3	;wh_CodeLength
>a908	21					  .byte LinkDisplacement	; offset to previous nt
=$a909					XtPtr1 ::= *
=43141					WordListLink ::= Nt0 ; remember the nt of this word for later
.a909	b5 25		lda $25,x	Dot_Hex:	lda DStack+1,x	; do hi byte
.a90b	20 eb a8	jsr $a8eb			jsr C_Dot_Hex_A
.a90e	4c e8 a8	jmp $a8e8			jmp C_Dot_Hex	; do lo byte
=8					CodeLen	.var *-XtPtr1
=$a911					Here1 = *	; remember here
>a907	08					.byte CodeLen	;patch wh_CodeLength
.a911					is_printable:
.a911	c9 20		cmp #$20	                cmp #AscSP              ; $20
.a913	90 07		bcc $a91c	                bcc _done
.a915	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.a917	b0 02		bcs $a91b	                bcs _failed
.a919	38		sec		                sec
.a91a	60		rts		                rts
.a91b	18		clc		_failed:	clc
.a91c	60		rts		_done:		rts
>a91d	2e 53				Name0:	.text ".S"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=43167					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a91f	62					.byte ((".S"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>a920	10					.byte WordFlags	;wh_Flags
>a921	03					.byte 3	;wh_CodeLength
>a922	1a					  .byte LinkDisplacement	; offset to previous nt
=$a923					XtPtr1 ::= *
=43167					WordListLink ::= Nt0 ; remember the nt of this word for later
.a923					Dot_s:
.a923	a9 3c		lda #$3c			lda #'<'
.a925	20 c0 cd	jsr $cdc0			jsr Emit_A
.a928	20 30 c2	jsr $c230			jsr Depth	; ( -- u )
.a92b	20 19 cc	jsr $cc19			jsr print_u
.a92e	a9 3e		lda #$3e			lda #'>'
.a930	20 c0 cd	jsr $cdc0			jsr Emit_A
.a933	20 cc cd	jsr $cdcc			jsr Space
.a936	a0 28		ldy #$28			ldy #DStack0		; for each cell on the stack
.a938	88		dey		_loop:		dey
.a939	88		dey				dey
.a93a	86 14		stx $14				stx tmp1
.a93c	c4 14		cpy $14				cpy tmp1
.a93e	90 15		bcc $a955			bcc _done
.a940	98		tya				tya			; save index
.a941	48		pha				pha
.a942	ca		dex				dex			; push stack[index]
.a943	ca		dex				dex
.a944	b9 24 00	lda $0024,y			lda DStack+0,y
.a947	95 24		sta $24,x			sta DStack+0,x
.a949	b9 25 00	lda $0025,y			lda DStack+1,y
.a94c	95 25		sta $25,x			sta DStack+1,x
.a94e	20 cf cb	jsr $cbcf			jsr Dot
.a951	68		pla				pla			; restore index
.a952	a8		tay				tay
.a953	d0 e3		bne $a938			bne _loop
.a955					_done:
=50					CodeLen	.var *-XtPtr1
=$a955					Here1 = *	; remember here
>a921	32					.byte CodeLen	;patch wh_CodeLength
.a955	60		rts				rts
>a956	43 6f 6d 70 61 72 65		Name0:	.text "Compare"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=43229					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a95d	a7					.byte (("Compare"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=62					LinkDisplacement = Nt0-WordListLink
>a95e	50					.byte WordFlags	;wh_Flags
>a95f	03					.byte 3	;wh_CodeLength
>a960	3e					  .byte LinkDisplacement	; offset to previous nt
=$a961					XtPtr1 ::= *
=43229					WordListLink ::= Nt0 ; remember the nt of this word for later
.a961					Compare:
.a961	20 3b b4	jsr $b43b			jsr underflow_4
.a964	b5 24		lda $24,x			lda DStack+0,x		; tmp3+1= u2.lo
.a966	85 19		sta $19				sta tmp3+1
.a968	b5 26		lda $26,x			lda DStack+2,x		; tmp2= addr2
.a96a	b4 27		ldy $27,x			ldy DStack+3,x
.a96c	85 16		sta $16				sta tmp2+0
.a96e	84 17		sty $17				sty tmp2+1
.a970	b5 28		lda $28,x			lda DStack+4,x		; tmp3+0= u1.lo
.a972	85 18		sta $18				sta tmp3+0
.a974	b5 2a		lda $2a,x			lda DStack+6,x		; tmp1= addr1
.a976	b4 2b		ldy $2b,x			ldy DStack+7,x
.a978	85 14		sta $14				sta tmp1+0
.a97a	84 15		sty $15				sty tmp1+1
.a97c	a0 00		ldy #$00			ldy #0		; for each char
.a97e					_loop:
.a97e	c4 18		cpy $18				cpy tmp3+0	; string1 empty?
.a980	f0 13		beq $a995			beq _str1
.a982					_L1:
.a982	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a984	f0 27		beq $a9ad			beq _str2
.a986					_L2:
.a986	b1 14		lda ($14),y			lda (tmp1),y	; Are they different?
.a988	d1 16		cmp ($16),y			cmp (tmp2),y
.a98a	d0 19		bne $a9a5			bne _neq
.a98c	c8		iny				iny		; to next char
.a98d	d0 ef		bne $a97e			bne _loop
.a98f	e6 15		inc $15				inc tmp1+1	; to next page
.a991	e6 17		inc $17				inc tmp2+1
.a993	d0 e9		bne $a97e			bne _loop
.a995	d6 29		dec $29,x	_str1:		dec DStack+5,x	; string1 really empty?
.a997	10 e9		bpl $a982			bpl _L1
.a999	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a99b	d0 0a		bne $a9a7			bne _less
.a99d	b5 25		lda $25,x			lda DStack+1,x
.a99f	d0 06		bne $a9a7			bne _less
.a9a1	a9 00		lda #$00	_equal:		lda #0		; Return 0
.a9a3	f0 0e		beq $a9b3			beq _gt2
.a9a5	b0 0a		bcs $a9b1	_neq:		bcs _greater
.a9a7	a9 ff		lda #$ff	_less:		lda #$FF	; Return -1
.a9a9	95 2a		sta $2a,x			sta DStack+6,x
.a9ab	d0 0a		bne $a9b7			bne _done
.a9ad	d6 25		dec $25,x	_str2:		dec DStack+1,x	; is string2 empty?
.a9af	10 d5		bpl $a986			bpl _L2
.a9b1	a9 01		lda #$01	_greater:	lda #1		; Return 1
.a9b3	95 2a		sta $2a,x	_gt2:		sta DStack+6,x
.a9b5	a9 00		lda #$00			lda #0
.a9b7	95 2b		sta $2b,x	_done:		sta DStack+7,x
.a9b9	8a		txa				txa		; Remove all but the result from the stack.
.a9ba	18		clc				clc
.a9bb	69 06		adc #$06			adc #6
.a9bd	aa		tax				tax
=93					CodeLen	.var *-XtPtr1
=$a9be					Here1 = *	; remember here
>a95f	5d					.byte CodeLen	;patch wh_CodeLength
.a9be	60		rts				rts
>a9bf	53 65 61 72 63 68		Name0:	.text "Search"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=43333					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a9c5	06					.byte (("Search"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=104					LinkDisplacement = Nt0-WordListLink
>a9c6	50					.byte WordFlags	;wh_Flags
>a9c7	03					.byte 3	;wh_CodeLength
>a9c8	68					  .byte LinkDisplacement	; offset to previous nt
=$a9c9					XtPtr1 ::= *
=43333					WordListLink ::= Nt0 ; remember the nt of this word for later
.a9c9					Search:
.a9c9	20 3b b4	jsr $b43b			jsr underflow_4
.a9cc	b5 24		lda $24,x			lda DStack+0,x
.a9ce	15 25		ora $25,x			ora DStack+1,x
.a9d0	d0 09		bne $a9db			bne _start_search
.a9d2	e8		inx				inx		; Drop u2
.a9d3	e8		inx				inx
.a9d4	a9 ff		lda #$ff			lda #$FF	; overwrite addr2 with a true flag
.a9d6	95 24		sta $24,x			sta DStack+0,x
.a9d8	95 25		sta $25,x			sta DStack+1,x
.a9da	60		rts				rts
.a9db					_start_search:
.a9db	20 f0 b7	jsr $b7f0			jsr Zero
.a9de					_search_loop:
.a9de	18		clc				clc
.a9df	b5 24		lda $24,x			lda DStack+0,x
.a9e1	75 26		adc $26,x			adc DStack+2,x
.a9e3	85 14		sta $14				sta tmp1+0
.a9e5	b5 25		lda $25,x			lda DStack+1,x
.a9e7	75 27		adc $27,x			adc DStack+3,x
.a9e9	85 15		sta $15				sta tmp1+1
.a9eb	d5 2b		cmp $2b,x			cmp DStack+7,x
.a9ed	90 13		bcc $aa02			bcc _init_comparison ; Obviously less
.a9ef	d0 06		bne $a9f7			bne _not_found
.a9f1	b5 2a		lda $2a,x			lda DStack+6,x
.a9f3	c5 14		cmp $14				cmp tmp1
.a9f5	b0 0b		bcs $aa02			bcs _init_comparison
.a9f7					_not_found:
.a9f7	e8		inx				inx		; Remove offset
.a9f8	e8		inx				inx
.a9f9	e8		inx				inx		; Remove u2
.a9fa	e8		inx				inx
.a9fb	a9 00		lda #$00			lda #0
.a9fd	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a false flag
.a9ff	95 25		sta $25,x			sta DStack+1,x
.aa01	60		rts				rts
.aa02					_init_comparison:
.aa02	18		clc				clc
.aa03	b5 2c		lda $2c,x			lda DStack+8,x
.aa05	75 24		adc $24,x			adc DStack+0,x
.aa07	85 14		sta $14				sta tmp1
.aa09	b5 2d		lda $2d,x			lda DStack+9,x
.aa0b	75 25		adc $25,x			adc DStack+1,x
.aa0d	85 15		sta $15				sta tmp1+1
.aa0f	b5 28		lda $28,x			lda DStack+4,x
.aa11	85 16		sta $16				sta tmp2
.aa13	b5 29		lda $29,x			lda DStack+5,x
.aa15	85 17		sta $17				sta tmp2+1
.aa17	b5 26		lda $26,x			lda DStack+2,x
.aa19	85 18		sta $18				sta tmp3+0
.aa1b	b5 27		lda $27,x			lda DStack+3,x
.aa1d	85 19		sta $19				sta tmp3+1
.aa1f					_comparison_loop:
.aa1f	a0 00		ldy #$00			ldy #0
.aa21	b1 14		lda ($14),y			lda (tmp1),y
.aa23	d1 16		cmp ($16),y			cmp (tmp2),y
.aa25	f0 06		beq $aa2d			beq _letters_match
.aa27	20 5a ca	jsr $ca5a			jsr One_plus
.aa2a	4c de a9	jmp $a9de			jmp _search_loop
.aa2d					_letters_match:
.aa2d	e6 14		inc $14				inc tmp1
.aa2f	d0 02		bne $aa33			bne +
.aa31	e6 15		inc $15				inc tmp1+1
.aa33					+
.aa33	e6 16		inc $16				inc tmp2
.aa35	d0 02		bne $aa39			bne +
.aa37	e6 17		inc $17				inc tmp2+1
.aa39					+
.aa39	a5 18		lda $18				lda tmp3
.aa3b	d0 02		bne $aa3f			bne +
.aa3d	c6 19		dec $19				dec tmp3+1
.aa3f					+
.aa3f	c6 18		dec $18				dec tmp3
.aa41	a5 18		lda $18				lda tmp3
.aa43	05 19		ora $19				ora tmp3+1
.aa45	d0 d8		bne $aa1f			bne _comparison_loop ; Check the next letter
.aa47	18		clc				clc
.aa48	b5 24		lda $24,x			lda DStack+0,x
.aa4a	75 2c		adc $2c,x			adc DStack+8,x
.aa4c	95 2c		sta $2c,x			sta DStack+8,x
.aa4e	b5 25		lda $25,x			lda DStack+1,x
.aa50	75 2d		adc $2d,x			adc DStack+9,x
.aa52	95 2d		sta $2d,x			sta DStack+9,x
.aa54	38		sec				sec
.aa55	b5 2a		lda $2a,x			lda DStack+6,x
.aa57	f5 24		sbc $24,x			sbc DStack+0,x
.aa59	95 2a		sta $2a,x			sta DStack+6,x
.aa5b	b5 2b		lda $2b,x			lda DStack+7,x
.aa5d	f5 25		sbc $25,x			sbc DStack+1,x
.aa5f	95 2b		sta $2b,x			sta DStack+7,x
.aa61	e8		inx				inx		; drop offset
.aa62	e8		inx				inx
.aa63	e8		inx				inx		; drop u2
.aa64	e8		inx				inx
.aa65	a9 ff		lda #$ff			lda #$FF
.aa67	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a true flag.
.aa69	95 25		sta $25,x			sta DStack+1,x
=162					CodeLen	.var *-XtPtr1
=$aa6b					Here1 = *	; remember here
>a9c7	a2					.byte CodeLen	;patch wh_CodeLength
.aa6b	60		rts				rts
>aa6c	4d 61 72 6b 65 72		Name0:	.text "Marker"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=43506					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aa72	46					.byte (("Marker"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=173					LinkDisplacement = Nt0-WordListLink
>aa73	18					.byte WordFlags	;wh_Flags
>aa74	03					.byte 3	;wh_CodeLength
>aa75	ad					  .byte LinkDisplacement	; offset to previous nt
=$aa76					XtPtr1 ::= *
=43506					WordListLink ::= Nt0 ; remember the nt of this word for later
.aa76					Marker:
.aa76	20 28 ca	jsr $ca28			jsr Here		; Save original CP, which
.aa79	20 09 c1	jsr $c109			jsr Header_Build	; compile a word header, but don't link into wordlist
.aa7c	a0 aa		ldy #$aa			ldy #>_runtime		; compile JSR _runtime
.aa7e	a9 96		lda #$96			lda #<_runtime
.aa80	20 21 cd	jsr $cd21			jsr Jsr_Comma_YA
.aa83	20 fb cc	jsr $ccfb			jsr Comma		; Append original CP
.aa86	a0 00		ldy #$00			ldy #0			; Start at CURRENT
.aa88	b9 10 03	lda $0310,y	_loop:		lda CurrentV,y
.aa8b	20 e7 cc	jsr $cce7			jsr C_Comma_A
.aa8e	c8		iny				iny
.aa8f	c0 24		cpy #$24			cpy #MarkEnd-CurrentV	; One past the end of the search order.
.aa91	90 f5		bcc $aa88			bcc _loop
.aa93	4c fe c0	jmp $c0fe			jmp Header_Link		; link built header into current dictionary
=32					CodeLen	.var *-XtPtr1
=$aa96					Here1 = *	; remember here
>aa74	20					.byte CodeLen	;patch wh_CodeLength
.aa96					_runtime:
.aa96	68		pla				pla		; Pop the RTS address off the stack
.aa97	85 14		sta $14				sta tmp1+0
.aa99	68		pla				pla
.aa9a	85 15		sta $15				sta tmp1+1
.aa9c	a0 01		ldy #$01			ldy #1		; start just aftet JSR _runtime
.aa9e	b1 14		lda ($14),y			lda (tmp1),y	; CP was stored first
.aaa0	85 00		sta $00				sta cp+0
.aaa2	c8		iny				iny
.aaa3	b1 14		lda ($14),y			lda (tmp1),y
.aaa5	85 01		sta $01				sta cp+1
.aaa7	c8		iny				iny
.aaa8					_rloop:
.aaa8	b1 14		lda ($14),y			lda (tmp1),y
.aaaa	99 0d 03	sta $030d,y			sta CurrentV-2-1,y
.aaad	c8		iny				iny
.aaae	c0 27		cpy #$27			cpy #MarkEnd-CurrentV+2+1 ; One past the end of the search order.
.aab0	90 f6		bcc $aaa8			bcc _rloop
.aab2	60		rts				rts
>aab3	57 6f 72 64 73			Name0:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=43576					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aab8	65					.byte (("Words"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=70					LinkDisplacement = Nt0-WordListLink
>aab9	10					.byte WordFlags	;wh_Flags
>aaba	03					.byte 3	;wh_CodeLength
>aabb	46					  .byte LinkDisplacement	; offset to previous nt
=$aabc					XtPtr1 ::= *
=43576					WordListLink ::= Nt0 ; remember the nt of this word for later
.aabc					Words:
.aabc	a9 ff		lda #$ff			lda #$ff
.aabe	20 e2 b7	jsr $b7e2			jsr PushZA		; Alloc space for line size & wordlist #
.aac1	ca		dex				dex			; Alloc space for a nt
.aac2	ca		dex				dex
.aac3					_wordlist_next:
.aac3	20 69 ab	jsr $ab69			jsr CR			; start wordlist on new line
.aac6	f6 26		inc $26,x			inc DStack+2,x		; step to next search wordlist
.aac8	b4 26		ldy $26,x			ldy DStack+2,x		; Y= wordlist index
.aaca	cc 2a 03	cpy $032a			cpy Num_OrderV
.aacd	b0 44		bcs $ab13			bcs _wordslist_done	; ran out of search wordlist entries?
.aacf	b9 2b 03	lda $032b,y			lda Search_OrderV,y	; A= SEARCH-ORDER[Y]	Get the current wordlist id
.aad2	0a		asl a				asl			; TOS= WORDLISTS[A]
.aad3	a8		tay				tay
.aad4	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.aad7	95 24		sta $24,x			sta DStack+0,x
.aad9	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.aadc	95 25		sta $25,x			sta DStack+1,x
.aade	f0 e3		beq $aac3			beq _wordlist_next	; end of list?
.aae0					_word_loop:
.aae0	20 56 cf	jsr $cf56			jsr Dup			; ( wordlist# nt nt )
.aae3	20 e6 bd	jsr $bde6			jsr Name_To_String	; ( wordlist# nt addr u )
.aae6	b5 2b		lda $2b,x			lda DStack+7,x
.aae8	38		sec				sec			; don't forget the space between words
.aae9	75 24		adc $24,x			adc DStack+0,x
.aaeb	c9 4e		cmp #$4e			cmp #MAX_LINE_LENGTH-1
.aaed	90 05		bcc $aaf4			bcc +
.aaef	20 69 ab	jsr $ab69			jsr CR
.aaf2	b5 24		lda $24,x			lda DStack+0,x		; After going to next line, start
.aaf4	95 2b		sta $2b,x	+		sta DStack+7,x
.aaf6	20 d8 cd	jsr $cdd8			jsr Type		; ( wordlist# nt )
.aaf9	20 cc cd	jsr $cdcc			jsr Space
.aafc	b5 24		lda $24,x			lda DStack+0,x
.aafe	85 14		sta $14				sta tmp1+0
.ab00	b5 25		lda $25,x			lda DStack+1,x
.ab02	85 15		sta $15				sta tmp1+1
.ab04	20 96 82	jsr $8296			jsr LinkNext		; tmp1= next word nt in list
.ab07	a5 14		lda $14				lda tmp1+0
.ab09	95 24		sta $24,x			sta DStack+0,x
.ab0b	a5 15		lda $15				lda tmp1+1
.ab0d	95 25		sta $25,x			sta DStack+1,x
.ab0f	d0 cf		bne $aae0			bne _word_loop		; end of list?
.ab11	f0 b0		beq $aac3			beq _wordlist_next
.ab13					_wordslist_done:
.ab13	4c 36 c5	jmp $c536			jmp Two_Drop
=90					CodeLen	.var *-XtPtr1
=$ab16					Here1 = *	; remember here
>aaba	5a					.byte CodeLen	;patch wh_CodeLength
>ab16	57 6f 72 64 53 69 7a 65		Name0:	.text "WordSize"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=43678					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab1e	a8					.byte (("WordSize"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=102					LinkDisplacement = Nt0-WordListLink
>ab1f	10					.byte WordFlags	;wh_Flags
>ab20	03					.byte 3	;wh_CodeLength
>ab21	66					  .byte LinkDisplacement	; offset to previous nt
=$ab22					XtPtr1 ::= *
=43678					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab22	20 ff b3	jsr $b3ff	WordSize:	jsr PopTmp1
.ab25	a0 82		ldy #$82			ldy #Wh_CodeLength
.ab27	b1 14		lda ($14),y			lda (tmp1),y
.ab29	4c e2 b7	jmp $b7e2			jmp PushZA
=10					CodeLen	.var *-XtPtr1
=$ab2c					Here1 = *	; remember here
>ab20	0a					.byte CodeLen	;patch wh_CodeLength
>ab2c	41 6c 69 67 6e 65 64		Name0:	.text "Aligned"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=43699					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab33	87					.byte (("Aligned"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>ab34	00					.byte WordFlags	;wh_Flags
>ab35	03					.byte 3	;wh_CodeLength
>ab36	15					  .byte LinkDisplacement	; offset to previous nt
=$ab37					XtPtr1 ::= *
=43699					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab37					Aligned:
=0					CodeLen	.var *-XtPtr1
=$ab37					Here1 = *	; remember here
>ab35	00					.byte CodeLen	;patch wh_CodeLength
.ab37	60		rts				rts
>ab38	41 6c 69 67 6e			Name0:	.text "Align"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=43709					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab3d	c5					.byte (("Align"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>ab3e	00					.byte WordFlags	;wh_Flags
>ab3f	03					.byte 3	;wh_CodeLength
>ab40	0a					  .byte LinkDisplacement	; offset to previous nt
=$ab41					XtPtr1 ::= *
=43709					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab41					Align:
=0					CodeLen	.var *-XtPtr1
=$ab41					Here1 = *	; remember here
>ab3f	00					.byte CodeLen	;patch wh_CodeLength
.ab41	60		rts				rts
>ab42	4f 75 74 70 75 74		Name0:	.text "Output"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=43720					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab48	86					.byte (("Output"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>ab49	10					.byte WordFlags	;wh_Flags
>ab4a	03					.byte 3	;wh_CodeLength
>ab4b	0b					  .byte LinkDisplacement	; offset to previous nt
=$ab4c					XtPtr1 ::= *
=43720					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab4c					xt_output:
.ab4c	a0 03		ldy #$03			ldy #>output
.ab4e	a9 06		lda #$06			lda #<output
.ab50	4c b3 b7	jmp $b7b3			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$ab53					Here1 = *	; remember here
>ab4a	07					.byte CodeLen	;patch wh_CodeLength
>ab53	49 6e 70 75 74			Name0:	.text "Input"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=43736					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab58	85					.byte (("Input"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>ab59	10					.byte WordFlags	;wh_Flags
>ab5a	03					.byte 3	;wh_CodeLength
>ab5b	10					  .byte LinkDisplacement	; offset to previous nt
=$ab5c					XtPtr1 ::= *
=43736					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab5c	a0 03		ldy #$03	xt_input:	ldy #>input
.ab5e	a9 08		lda #$08			lda #<input
.ab60	4c b3 b7	jmp $b7b3			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$ab63					Here1 = *	; remember here
>ab5a	07					.byte CodeLen	;patch wh_CodeLength
>ab63	43 52				Name0:	.text "CR"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=43749					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab65	42					.byte (("CR"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>ab66	10					.byte WordFlags	;wh_Flags
>ab67	03					.byte 3	;wh_CodeLength
>ab68	0d					  .byte LinkDisplacement	; offset to previous nt
=$ab69					XtPtr1 ::= *
=43749					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab69					CR:
.ab69	a9 0d		lda #$0d			lda #AscCR
.ab6b	20 c0 cd	jsr $cdc0			jsr Emit_A
.ab6e	a9 0a		lda #$0a			lda #AscLF
.ab70	20 c0 cd	jsr $cdc0			jsr Emit_A
=10					CodeLen	.var *-XtPtr1
=$ab73					Here1 = *	; remember here
>ab67	0a					.byte CodeLen	;patch wh_CodeLength
.ab73	60		rts				rts
>ab74	50 61 67 65			Name0:	.text "Page"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=43768					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab78	a4					.byte (("Page"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>ab79	10					.byte WordFlags	;wh_Flags
>ab7a	03					.byte 3	;wh_CodeLength
>ab7b	13					  .byte LinkDisplacement	; offset to previous nt
=$ab7c					XtPtr1 ::= *
=43768					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab7c	20 a7 b8	jsr $b8a7	Page:		jsr SLiteral_Runtime
.ab7f	4c 8c ab	jmp $ab8c			  jmp +
>ab82	1b 5b 32 4a					  .text AscESC,"[2J"	; ANSI clear screen
>ab86	1b 5b 31 3b 31 48				  .text AscESC,"[1;1H"	; move cursor to top left of screen
.ab8c	4c d8 cd	jmp $cdd8	+		jmp Type
=19					CodeLen	.var *-XtPtr1
=$ab8f					Here1 = *	; remember here
>ab7a	13					.byte CodeLen	;patch wh_CodeLength
>ab8f	41 74 2d 58 59			Name0:	.text "At-XY"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=43796					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab94	25					.byte (("At-XY"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>ab95	50					.byte WordFlags	;wh_Flags
>ab96	03					.byte 3	;wh_CodeLength
>ab97	1c					  .byte LinkDisplacement	; offset to previous nt
=$ab98					XtPtr1 ::= *
=43796					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab98					At_XY:
.ab98	20 31 b4	jsr $b431			jsr underflow_2
.ab9b	ad 00 03	lda $0300			lda base	; Save the BASE
.ab9e	48		pha				pha
.ab9f	20 c9 b1	jsr $b1c9			jsr Decimal	; ANSI escape code values need to be in decimal.
.aba2	a9 1b		lda #$1b			lda #AscESC
.aba4	20 c0 cd	jsr $cdc0			jsr Emit_A
.aba7	a9 5b		lda #$5b			lda #'['
.aba9	20 c0 cd	jsr $cdc0			jsr Emit_A
.abac	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.abae	20 19 cc	jsr $cc19			jsr print_u
.abb1	a9 3b		lda #$3b			lda #';'
.abb3	20 c0 cd	jsr $cdc0			jsr Emit_A
.abb6	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.abb8	20 19 cc	jsr $cc19			jsr print_u
.abbb	a9 48		lda #$48			lda #'H'
.abbd	20 c0 cd	jsr $cdc0			jsr Emit_A
.abc0	68		pla				pla		; Restore the base
.abc1	8d 00 03	sta $0300			sta base
=44					CodeLen	.var *-XtPtr1
=$abc4					Here1 = *	; remember here
>ab96	2c					.byte CodeLen	;patch wh_CodeLength
.abc4	60		rts				rts
>abc5	50 61 64			Name0:	.text "Pad"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=43848					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>abc8	83					.byte (("Pad"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>abc9	00					.byte WordFlags	;wh_Flags
>abca	03					.byte 3	;wh_CodeLength
>abcb	34					  .byte LinkDisplacement	; offset to previous nt
=$abcc					XtPtr1 ::= *
=43848					WordListLink ::= Nt0 ; remember the nt of this word for later
.abcc	ca		dex		Pad:		dex		; push cp+PadOffset
.abcd	ca		dex				dex
.abce	18		clc				clc
.abcf	a5 00		lda $00				lda cp+0
.abd1	69 54		adc #$54			adc #PadOffset
.abd3	95 24		sta $24,x			sta DStack+0,x
.abd5	a5 01		lda $01				lda cp+1
.abd7	69 00		adc #$00			adc #0
.abd9	95 25		sta $25,x			sta DStack+1,x
=15					CodeLen	.var *-XtPtr1
=$abdb					Here1 = *	; remember here
>abca	0f					.byte CodeLen	;patch wh_CodeLength
.abdb	60		rts				rts
>abdc	3c 23				Name0:	.text "<#"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=43870					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>abde	62					.byte (("<#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>abdf	00					.byte WordFlags	;wh_Flags
>abe0	03					.byte 3	;wh_CodeLength
>abe1	16					  .byte LinkDisplacement	; offset to previous nt
=$abe2					XtPtr1 ::= *
=43870					WordListLink ::= Nt0 ; remember the nt of this word for later
.abe2					Less_Number_Sign:
.abe2	a9 54		lda #$54			lda #PadOffset		; init hold buffer index
.abe4	8d 34 03	sta $0334			sta ToHold
=5					CodeLen	.var *-XtPtr1
=$abe7					Here1 = *	; remember here
>abe0	05					.byte CodeLen	;patch wh_CodeLength
.abe7	60		rts				rts
>abe8	23 3e				Name0:	.text "#>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=43882					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>abea	c2					.byte (("#>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>abeb	40					.byte WordFlags	;wh_Flags
>abec	03					.byte 3	;wh_CodeLength
>abed	0c					  .byte LinkDisplacement	; offset to previous nt
=$abee					XtPtr1 ::= *
=43882					WordListLink ::= Nt0 ; remember the nt of this word for later
.abee					Number_Sign_Greater:
.abee	20 31 b4	jsr $b431			jsr underflow_2		; double number
.abf1	18		clc				clc			; addr= cp + ToHold
.abf2	a5 00		lda $00				lda cp+0
.abf4	6d 34 03	adc $0334			adc ToHold
.abf7	95 26		sta $26,x			sta DStack+2,x
.abf9	a5 01		lda $01				lda cp+1
.abfb	69 00		adc #$00			adc #0
.abfd	95 27		sta $27,x			sta DStack+3,x
.abff	38		sec				sec			; u= PadOffset - ToHold
.ac00	a9 54		lda #$54			lda #PadOffset
.ac02	ed 34 03	sbc $0334			sbc ToHold
.ac05	95 24		sta $24,x			sta DStack+0,x
.ac07	a9 00		lda #$00			lda #0
.ac09	95 25		sta $25,x			sta DStack+1,x
=29					CodeLen	.var *-XtPtr1
=$ac0b					Here1 = *	; remember here
>abec	1d					.byte CodeLen	;patch wh_CodeLength
.ac0b	60		rts				rts
>ac0c	48 6f 6c 64			Name0:	.text "Hold"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=43920					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac10	84					.byte (("Hold"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>ac11	00					.byte WordFlags	;wh_Flags
>ac12	03					.byte 3	;wh_CodeLength
>ac13	26					  .byte LinkDisplacement	; offset to previous nt
=$ac14					XtPtr1 ::= *
=43920					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac14	20 d9 b3	jsr $b3d9	Hold:		jsr PopA
.ac17	ce 34 03	dec $0334	Hold_A:		dec ToHold
.ac1a	ac 34 03	ldy $0334			ldy ToHold
.ac1d	91 00		sta ($00),y			sta (cp),y
=11					CodeLen	.var *-XtPtr1
=$ac1f					Here1 = *	; remember here
>ac12	0b					.byte CodeLen	;patch wh_CodeLength
.ac1f	60		rts				rts
>ac20	23				Name0:	.text "#"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=43937					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac21	61					.byte (("#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>ac22	50					.byte WordFlags	;wh_Flags
>ac23	03					.byte 3	;wh_CodeLength
>ac24	11					  .byte LinkDisplacement	; offset to previous nt
=$ac25					XtPtr1 ::= *
=43937					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac25					Number_Sign:
.ac25	20 31 b4	jsr $b431			jsr underflow_2		; double number
.ac28	a9 00		lda #$00			lda #0			;   init remainder
.ac2a	18		clc				clc
.ac2b	a0 21		ldy #$21			ldy #32+1		;   for each bit
.ac2d					_11:
.ac2d	2a		rol a				rol a			;   shift remainder
.ac2e	cd 00 03	cmp $0300			cmp base		;   will it fit?
.ac31	90 03		bcc $ac36			bcc _27
.ac33	ed 00 03	sbc $0300			sbc base
.ac36					_27:
.ac36	36 26		rol $26,x			rol DStack+2,x		;   shift ud
.ac38	36 27		rol $27,x			rol DStack+3,x
.ac3a	36 24		rol $24,x			rol DStack+0,x
.ac3c	36 25		rol $25,x			rol DStack+1,x
.ac3e	88		dey				dey
.ac3f	d0 ec		bne $ac2d			bne _11
.ac41	c9 0a		cmp #$0a			cmp #9+1		; alternatively this could use s_abc_upper
.ac43	90 02		bcc $ac47			bcc +
.ac45	69 06		adc #$06			adc #7-1
.ac47	69 30		adc #$30	+		adc #'0'
.ac49	d0 cc		bne $ac17			bne Hold_A
=38					CodeLen	.var *-XtPtr1
=$ac4b					Here1 = *	; remember here
>ac23	26					.byte CodeLen	;patch wh_CodeLength
>ac4b	23 53				Name0:	.text "#S"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=43981					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac4d	62					.byte (("#S"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=44					LinkDisplacement = Nt0-WordListLink
>ac4e	00					.byte WordFlags	;wh_Flags
>ac4f	03					.byte 3	;wh_CodeLength
>ac50	2c					  .byte LinkDisplacement	; offset to previous nt
=$ac51					XtPtr1 ::= *
=43981					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac51					Number_Sign_S:
.ac51					_loop:
.ac51	20 25 ac	jsr $ac25			jsr Number_sign	; convert a single number ("#")
.ac54	b5 24		lda $24,x			lda DStack+0,x	; until d is zero
.ac56	15 25		ora $25,x			ora DStack+1,x
.ac58	15 26		ora $26,x			ora DStack+2,x
.ac5a	15 27		ora $27,x			ora DStack+3,x
.ac5c	d0 f3		bne $ac51			bne _loop
=13					CodeLen	.var *-XtPtr1
=$ac5e					Here1 = *	; remember here
>ac4f	0d					.byte CodeLen	;patch wh_CodeLength
.ac5e	60		rts				rts
>ac5f	53 69 67 6e			Name0:	.text "Sign"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=44003					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac63	c4					.byte (("Sign"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>ac64	10					.byte WordFlags	;wh_Flags
>ac65	03					.byte 3	;wh_CodeLength
>ac66	16					  .byte LinkDisplacement	; offset to previous nt
=$ac67					XtPtr1 ::= *
=44003					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac67	20 f4 b3	jsr $b3f4	Sign:		jsr PopYA
.ac6a	98		tya				tya		; test MSB of TOS
.ac6b					Sign_P:
.ac6b	30 01		bmi $ac6e			bmi _minus
.ac6d	60		rts				rts
.ac6e	a9 2d		lda #$2d	_minus:		lda #'-'	; add minus sign
.ac70	d0 a5		bne $ac17			bne hold_a
=11					CodeLen	.var *-XtPtr1
=$ac72					Here1 = *	; remember here
>ac65	0b					.byte CodeLen	;patch wh_CodeLength
>ac72	43 6c 65 61 76 65		Name0:	.text "Cleave"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44024					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac78	a6					.byte (("Cleave"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>ac79	50					.byte WordFlags	;wh_Flags
>ac7a	03					.byte 3	;wh_CodeLength
>ac7b	15					  .byte LinkDisplacement	; offset to previous nt
=$ac7c					XtPtr1 ::= *
=44024					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac7c					Cleave:
.ac7c	20 31 b4	jsr $b431			jsr underflow_2
.ac7f	20 e5 c4	jsr $c4e5			jsr Minus_leading	; -LEADING ( addr u )
.ac82	20 e1 c3	jsr $c3e1			jsr Input_To_R	; save old imput state
.ac85	b5 24		lda $24,x			lda DStack+0,x	; u is new ciblen
.ac87	85 06		sta $06				sta ciblen
.ac89	b5 25		lda $25,x			lda DStack+1,x
.ac8b	85 07		sta $07				sta ciblen+1
.ac8d	b5 26		lda $26,x			lda DStack+2,x	; addr is new cib
.ac8f	85 04		sta $04				sta cib
.ac91	b5 27		lda $27,x			lda DStack+3,x
.ac93	85 05		sta $05				sta cib+1
.ac95	a9 00		lda #$00			lda #0
.ac97	85 08		sta $08				sta toin	; >IN pointer is zero
.ac99	85 09		sta $09				sta toin+1
.ac9b	20 71 ba	jsr $ba71			jsr parse_name	; ( addr u addr-s u-s )
.ac9e	b5 24		lda $24,x			lda DStack+0,x
.aca0	15 25		ora $25,x			ora DStack+1,x
.aca2	f0 23		beq $acc7			beq _done
.aca4	38		sec				sec
.aca5	b5 28		lda $28,x			lda DStack+4,x	; LSB of original u
.aca7	f5 24		sbc $24,x			sbc DStack+0,x
.aca9	95 28		sta $28,x			sta DStack+4,x
.acab	b5 29		lda $29,x			lda DStack+5,x	; MSB of original u
.acad	f5 25		sbc $25,x			sbc DStack+1,x
.acaf	95 29		sta $29,x			sta DStack+5,x
.acb1	18		clc				clc
.acb2	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of original addr
.acb4	75 24		adc $24,x			adc DStack+0,x
.acb6	95 2a		sta $2a,x			sta DStack+6,x
.acb8	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of original addr
.acba	75 25		adc $25,x			adc DStack+1,x
.acbc	95 2b		sta $2b,x			sta DStack+7,x
.acbe	20 47 c5	jsr $c547			jsr Two_swap		; ( addr-s u-s addr u )
.acc1	20 e5 c4	jsr $c4e5			jsr Minus_leading
.acc4	20 47 c5	jsr $c547			jsr Two_swap		; ( addr u addr-s u-s )
.acc7					_done:
.acc7	20 02 c4	jsr $c402			jsr R_To_Input
=78					CodeLen	.var *-XtPtr1
=$acca					Here1 = *	; remember here
>ac7a	4e					.byte CodeLen	;patch wh_CodeLength
.acca	60		rts				rts
>accb	48 65 78 53 74 6f 72 65		Name0:	.text "HexStore"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=44115					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>acd3	a8					.byte (("HexStore"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=91					LinkDisplacement = Nt0-WordListLink
>acd4	50					.byte WordFlags	;wh_Flags
>acd5	03					.byte 3	;wh_CodeLength
>acd6	5b					  .byte LinkDisplacement	; offset to previous nt
=$acd7					XtPtr1 ::= *
=44115					WordListLink ::= Nt0 ; remember the nt of this word for later
.acd7					Hexstore:
.acd7	20 36 b4	jsr $b436			jsr underflow_3
.acda	20 56 cf	jsr $cf56			jsr Dup		; Save copy of original address
.acdd	20 66 c6	jsr $c666			jsr Two_to_r		; ( addr1 u1 ) ( R: addr2 addr2 )
.ace0					_loop:
.ace0	b5 24		lda $24,x			lda DStack+0,x
.ace2	15 25		ora $25,x			ora DStack+1,x
.ace4	f0 37		beq $ad1d			beq _done
.ace6	20 7c ac	jsr $ac7c			jsr Cleave		; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.ace9	20 66 c6	jsr $c666			jsr Two_to_r
.acec	20 f0 b7	jsr $b7f0			jsr Zero
.acef	20 f0 b7	jsr $b7f0			jsr Zero
.acf2	20 42 c6	jsr $c642			jsr Two_r_from	; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.acf5	20 4d b0	jsr $b04d			jsr To_Number	; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.acf8	b5 24		lda $24,x			lda DStack+0,x
.acfa	15 25		ora $25,x			ora DStack+1,x
.acfc	d0 18		bne $ad16			bne _have_chars_left
.acfe	20 36 c5	jsr $c536			jsr Two_drop		; ( addr1 u1 n n ) ( R: addr2 addr2 )
.ad01	20 0d c0	jsr $c00d			jsr D_To_S		; ( addr1 u1 n ) ( R: addr2 addr2 )
.ad04	20 19 cf	jsr $cf19			jsr R_Fetch		; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.ad07	20 5f cd	jsr $cd5f			jsr C_Store		; ( addr1 u1 ) ( R: addr2 addr2 )
.ad0a	20 fe ce	jsr $cefe			jsr R_From		; R>
.ad0d	20 5a ca	jsr $ca5a			jsr One_plus		; 1+
.ad10	20 e0 ce	jsr $cee0			jsr To_R		; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.ad13	4c e0 ac	jmp $ace0			jmp _loop
.ad16					_have_chars_left:
.ad16	8a		txa				txa
.ad17	18		clc				clc
.ad18	69 08		adc #$08			adc #8
.ad1a	aa		tax				tax
.ad1b	d0 c3		bne $ace0			bne _loop
.ad1d					_done:
.ad1d	e8		inx				inx
.ad1e	e8		inx				inx
.ad1f	e8		inx				inx
.ad20	e8		inx				inx			; 2DROP
.ad21	20 42 c6	jsr $c642			jsr Two_r_from		; ( addr2+n addr2 )
.ad24	20 73 cf	jsr $cf73			jsr Swap
.ad27	4c b7 cb	jmp $cbb7			jmp Minus		; ( n )
=83					CodeLen	.var *-XtPtr1
=$ad2a					Here1 = *	; remember here
>acd5	53					.byte CodeLen	;patch wh_CodeLength
>ad2a	57 69 74 68 69 6e		Name0:	.text "Within"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44208					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ad30	c6					.byte (("Within"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=93					LinkDisplacement = Nt0-WordListLink
>ad31	50					.byte WordFlags	;wh_Flags
>ad32	03					.byte 3	;wh_CodeLength
>ad33	5d					  .byte LinkDisplacement	; offset to previous nt
=$ad34					XtPtr1 ::= *
=44208					WordListLink ::= Nt0 ; remember the nt of this word for later
.ad34					Within:
.ad34	20 36 b4	jsr $b436			jsr underflow_3
.ad37	20 2f cf	jsr $cf2f			jsr Over
.ad3a	20 b7 cb	jsr $cbb7			jsr Minus
.ad3d	20 e0 ce	jsr $cee0			jsr To_R
.ad40	20 b7 cb	jsr $cbb7			jsr Minus
.ad43	20 fe ce	jsr $cefe			jsr R_From
.ad46	4c 94 c8	jmp $c894			jmp U_Less_Than
=21					CodeLen	.var *-XtPtr1
=$ad49					Here1 = *	; remember here
>ad32	15					.byte CodeLen	;patch wh_CodeLength
>ad49	5c				Name0:	.text "\"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=44234					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ad4a	81					.byte (("\"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>ad4b	18					.byte WordFlags	;wh_Flags
>ad4c	03					.byte 3	;wh_CodeLength
>ad4d	1a					  .byte LinkDisplacement	; offset to previous nt
=$ad4e					XtPtr1 ::= *
=44234					WordListLink ::= Nt0 ; remember the nt of this word for later
.ad4e					Backslash:
.ad4e	ad 0c 03	lda $030c			lda BlkV+0		; interpreting a block?
.ad51	0d 0d 03	ora $030d			ora BlkV+1
.ad54	f0 16		beq $ad6c			beq _not_block
.ad56	a5 08		lda $08				lda toin+0
.ad58	29 3f		and #$3f			and #$3F
.ad5a	c9 02		cmp #$02			cmp #2
.ad5c	90 16		bcc $ad74			bcc _rts
.ad5e	a5 08		lda $08		                lda toin+0		; Move toin to next multiple of 64.
.ad60	29 c0		and #$c0	                and #$C0        	;   Clear lower bits to move to beginning of line.
.ad62	18		clc		                clc             	;   Add $40 (64 decimal) to move to next line.
.ad63	69 40		adc #$40	                adc #$40
.ad65	85 08		sta $08		                sta toin+0
.ad67	90 0b		bcc $ad74	                bcc _rts
.ad69	e6 09		inc $09		                inc toin+1
.ad6b	60		rts				rts
.ad6c					_not_block:
.ad6c	a5 06		lda $06		                lda ciblen+0
.ad6e	85 08		sta $08		                sta toin+0
.ad70	a5 07		lda $07		                lda ciblen+1
.ad72	85 09		sta $09		                sta toin+1
=38					CodeLen	.var *-XtPtr1
=$ad74					Here1 = *	; remember here
>ad4c	26					.byte CodeLen	;patch wh_CodeLength
.ad74	60		rts		_rts:		rts
>ad75	4d 6f 76 65			Name0:	.text "Move"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=44281					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ad79	a4					.byte (("Move"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= NN+UF	; modifiable copy, remember for later
=47					LinkDisplacement = Nt0-WordListLink
>ad7a	50					.byte WordFlags	;wh_Flags
>ad7b	03					.byte 3	;wh_CodeLength
>ad7c	2f					  .byte LinkDisplacement	; offset to previous nt
=$ad7d					XtPtr1 ::= *
=44281					WordListLink ::= Nt0 ; remember the nt of this word for later
.ad7d					Move:
.ad7d	b5 27		lda $27,x			lda DStack+3,x		; MSB of addr2
.ad7f	d5 29		cmp $29,x			cmp DStack+5,x		; MSB of addr1
.ad81	d0 04		bne $ad87			bne _ne
.ad83	b5 26		lda $26,x			lda DStack+2,x		; LSB of addr2
.ad85	d5 28		cmp $28,x			cmp DStack+4,x		; LSB of addr1
.ad87	90 58		bcc $ade1	_ne:		bcc CMove
.ad89	d0 10		bne $ad9b			bne CMove_up
.ad8b	8a		txa		ThreeDrop:	txa		; drop three entries from Data Stack
.ad8c	18		clc				clc
.ad8d	69 06		adc #$06			adc #6
.ad8f	aa		tax				tax
=19					CodeLen	.var *-XtPtr1
=$ad90					Here1 = *	; remember here
>ad7b	13					.byte CodeLen	;patch wh_CodeLength
.ad90	60		rts				rts
>ad91	43 4d 6f 76 65 3e		Name0:	.text "CMove>"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44311					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ad97	c6					.byte (("CMove>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>ad98	50					.byte WordFlags	;wh_Flags
>ad99	03					.byte 3	;wh_CodeLength
>ad9a	1e					  .byte LinkDisplacement	; offset to previous nt
=$ad9b					XtPtr1 ::= *
=44311					WordListLink ::= Nt0 ; remember the nt of this word for later
.ad9b					CMove_up:
.ad9b	20 36 b4	jsr $b436			jsr underflow_3
.ad9e	b5 26		lda $26,x			lda DStack+2,x
.ada0	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.ada2	b5 27		lda $27,x			lda DStack+3,x
.ada4	18		clc				clc
.ada5	75 25		adc $25,x			adc DStack+1,x
.ada7	85 17		sta $17				sta tmp2+1	; point to last page of destination
.ada9	b5 28		lda $28,x			lda DStack+4,x
.adab	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.adad	b5 29		lda $29,x			lda DStack+5,x
.adaf	18		clc				clc
.adb0	75 25		adc $25,x			adc DStack+1,x
.adb2	85 15		sta $15				sta tmp1+1	; point to last page of source
.adb4	f6 25		inc $25,x			inc DStack+1,x	; allows us to use bne with dec DStack+1,x below
.adb6	b4 24		ldy $24,x			ldy DStack+0,x	; length of last page
.adb8	f0 10		beq $adca			beq _nopartial
.adba					_outerloop:
.adba	88		dey				dey
.adbb	f0 07		beq $adc4			beq _finishpage
.adbd					_innerloop:
.adbd	b1 14		lda ($14),y			lda (tmp1),y
.adbf	91 16		sta ($16),y			sta (tmp2),y
.adc1	88		dey				dey
.adc2	d0 f9		bne $adbd			bne _innerloop
.adc4					_finishpage:
.adc4	a0 00		ldy #$00			ldy #0
.adc6	b1 14		lda ($14),y			lda (tmp1),y	; handle y = 0 separately
.adc8	91 16		sta ($16),y			sta (tmp2),y
.adca					_nopartial:
.adca	c6 15		dec $15				dec tmp1+1	; back up to previous pages
.adcc	c6 17		dec $17				dec tmp2+1
.adce	d6 25		dec $25,x			dec DStack+1,x
.add0	d0 e8		bne $adba			bne _outerloop
.add2					_done:
.add2	4c 8b ad	jmp $ad8b			jmp ThreeDrop	; clear up the stack and leave
=58					CodeLen	.var *-XtPtr1
=$add5					Here1 = *	; remember here
>ad99	3a					.byte CodeLen	;patch wh_CodeLength
.add5	4c 40 b4	jmp $b440	Throw_Stack_14: jmp Throw_Stack
>add8	43 4d 6f 76 65			Name0:	.text "CMove"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=44381					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>addd	a5					.byte (("CMove"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=70					LinkDisplacement = Nt0-WordListLink
>adde	50					.byte WordFlags	;wh_Flags
>addf	03					.byte 3	;wh_CodeLength
>ade0	46					  .byte LinkDisplacement	; offset to previous nt
=$ade1					XtPtr1 ::= *
=44381					WordListLink ::= Nt0 ; remember the nt of this word for later
.ade1					CMove:
.ade1	20 36 b4	jsr $b436			jsr underflow_3
.ade4	b5 26		lda $26,x			lda DStack+2,x
.ade6	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.ade8	b5 27		lda $27,x			lda DStack+3,x
.adea	85 17		sta $17				sta tmp2+1
.adec	b5 28		lda $28,x			lda DStack+4,x
.adee	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.adf0	b5 29		lda $29,x			lda DStack+5,x
.adf2	85 15		sta $15				sta tmp1+1
.adf4	a0 00		ldy #$00			ldy #0
.adf6	b5 25		lda $25,x			lda DStack+1,x	; number of whole pages to move
.adf8	f0 0f		beq $ae09			beq _dopartial
.adfa					_page:
.adfa	b1 14		lda ($14),y			lda (tmp1),y
.adfc	91 16		sta ($16),y			sta (tmp2),y
.adfe	c8		iny				iny
.adff	d0 f9		bne $adfa			bne _page
.ae01	e6 15		inc $15				inc tmp1+1
.ae03	e6 17		inc $17				inc tmp2+1
.ae05	d6 25		dec $25,x			dec DStack+1,x
.ae07	d0 f1		bne $adfa			bne _page
.ae09					_dopartial:
.ae09	b5 24		lda $24,x			lda DStack+0,x	; length of last page
.ae0b	f0 09		beq $ae16			beq _done
.ae0d					_partial:
.ae0d	b1 14		lda ($14),y			lda (tmp1),y
.ae0f	91 16		sta ($16),y			sta (tmp2),y
.ae11	c8		iny				iny
.ae12	d6 24		dec $24,x			dec DStack+0,x
.ae14	d0 f7		bne $ae0d			bne _partial
.ae16	4c 8b ad	jmp $ad8b	_done:		jmp ThreeDrop	; clear the stack
=56					CodeLen	.var *-XtPtr1
=$ae19					Here1 = *	; remember here
>addf	38					.byte CodeLen	;patch wh_CodeLength
>ae19	55 4d 2a			Name0:	.text "UM*"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=44444					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ae1c	43					.byte (("UM*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=63					LinkDisplacement = Nt0-WordListLink
>ae1d	10					.byte WordFlags	;wh_Flags
>ae1e	03					.byte 3	;wh_CodeLength
>ae1f	3f					  .byte LinkDisplacement	; offset to previous nt
=$ae20					XtPtr1 ::= *
=44444					WordListLink ::= Nt0 ; remember the nt of this word for later
.ae20					UM_Star:
.ae20	e0 25		cpx #$25		cpx #-2*2+DStack0+1	; far enough below end of data stack (& not negative)?
.ae22	b0 b1		bcs $add5		bcs Throw_Stack_14
.ae24	18		clc				clc		; tmp2= divsor-1
.ae25	b5 24		lda $24,x			lda DStack+0,x
.ae27	e9 00		sbc #$00			sbc #0
.ae29	85 16		sta $16				sta tmp2+0
.ae2b	b5 25		lda $25,x			lda DStack+1,x
.ae2d	e9 00		sbc #$00			sbc #0
.ae2f	85 17		sta $17				sta tmp2+1
.ae31	90 2e		bcc $ae61			bcc _zero	; is divisor zero?
.ae33	a9 00		lda #$00			lda #0
.ae35	85 14		sta $14				sta tmp1
.ae37	86 18		stx $18				stx tmp3	; tested for exit from outer loop
.ae39	ca		dex				dex
.ae3a	ca		dex				dex
.ae3b					_outer_loop:
.ae3b	a0 08		ldy #$08			ldy #8		; counter inner loop
.ae3d	56 28		lsr $28,x			lsr DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.ae3f					_inner_loop:
.ae3f	90 0c		bcc $ae4d			bcc _no_add
.ae41	85 15		sta $15				sta tmp1+1	; save time, don't CLC
.ae43	a5 14		lda $14				lda tmp1
.ae45	65 16		adc $16				adc tmp2
.ae47	85 14		sta $14				sta tmp1
.ae49	a5 15		lda $15				lda tmp1+1
.ae4b	65 17		adc $17				adc tmp2+1
.ae4d					_no_add:
.ae4d	6a		ror a				ror
.ae4e	66 14		ror $14				ror tmp1
.ae50	76 28		ror $28,x			ror DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.ae52	88		dey				dey
.ae53	d0 ea		bne $ae3f			bne _inner_loop ; go back for one more shift?
.ae55	e8		inx				inx
.ae56	e4 18		cpx $18				cpx tmp3
.ae58	d0 e1		bne $ae3b			bne _outer_loop ; go back for eight more shifts?
.ae5a	95 25		sta $25,x			sta DStack+1,x
.ae5c	a5 14		lda $14				lda tmp1
.ae5e	95 24		sta $24,x			sta DStack+0,x
.ae60	60		rts				rts
.ae61	a9 00		lda #$00	_zero:		lda #0
.ae63	95 26		sta $26,x			sta DStack+2,x
.ae65	95 27		sta $27,x			sta DStack+3,x
.ae67	60		rts				rts
=72					CodeLen	.var *-XtPtr1
=$ae68					Here1 = *	; remember here
>ae1e	48					.byte CodeLen	;patch wh_CodeLength
>ae68	4d 2a				Name0:	.text "M*"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=44522					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ae6a	42					.byte (("M*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=78					LinkDisplacement = Nt0-WordListLink
>ae6b	10					.byte WordFlags	;wh_Flags
>ae6c	03					.byte 3	;wh_CodeLength
>ae6d	4e					  .byte LinkDisplacement	; offset to previous nt
=$ae6e					XtPtr1 ::= *
=44522					WordListLink ::= Nt0 ; remember the nt of this word for later
.ae6e					M_Star:
.ae6e	e0 25		cpx #$25		cpx #-2*2+DStack0+1	; far enough below end of data stack (& not negative)?
.ae70	b0 6b		bcs $aedd		bcs Throw_Stack_15
.ae72	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.ae74	55 27		eor $27,x			eor DStack+3,x	; MSB of n2
.ae76	08		php				php
.ae77	20 c2 c6	jsr $c6c2			jsr Abs
.ae7a	20 73 cf	jsr $cf73			jsr Swap
.ae7d	20 c2 c6	jsr $c6c2			jsr Abs
.ae80	20 20 ae	jsr $ae20			jsr UM_Star		; ( d )
.ae83	28		plp				plp			; handle the sign
.ae84	10 03		bpl $ae89			bpl +
.ae86	4c d9 c6	jmp $c6d9			jmp DNegate
.ae89					+
=27					CodeLen	.var *-XtPtr1
=$ae89					Here1 = *	; remember here
>ae6c	1b					.byte CodeLen	;patch wh_CodeLength
.ae89	60		rts				rts
>ae8a	2a				Name0:	.text "*"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=44555					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ae8b	41					.byte (("*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>ae8c	00					.byte WordFlags	;wh_Flags
>ae8d	03					.byte 3	;wh_CodeLength
>ae8e	21					  .byte LinkDisplacement	; offset to previous nt
=$ae8f					XtPtr1 ::= *
=44555					WordListLink ::= Nt0 ; remember the nt of this word for later
.ae8f					Star:
.ae8f	20 20 ae	jsr $ae20			jsr UM_Star
.ae92	e8		inx				inx		; D>S	drop hi cell
.ae93	e8		inx				inx
=5					CodeLen	.var *-XtPtr1
=$ae94					Here1 = *	; remember here
>ae8d	05					.byte CodeLen	;patch wh_CodeLength
.ae94	60		rts				rts
>ae95	55 4d 2f 4d 6f 64		Name0:	.text "UM/Mod"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44571					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ae9b	86					.byte (("UM/Mod"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>ae9c	10					.byte WordFlags	;wh_Flags
>ae9d	03					.byte 3	;wh_CodeLength
>ae9e	10					  .byte LinkDisplacement	; offset to previous nt
=$ae9f					XtPtr1 ::= *
=44571					WordListLink ::= Nt0 ; remember the nt of this word for later
.ae9f					UM_Slash_Mod:
.ae9f	e0 23		cpx #$23		cpx #-2*3+DStack0+1	; far enough below end of data stack (& not negative)?
.aea1	b0 3a		bcs $aedd		bcs Throw_Stack_15
.aea3	b5 24		lda $24,x			lda DStack+0,x		; catch division by zero
.aea5	15 25		ora $25,x			ora DStack+1,x
.aea7	f0 2f		beq $aed8			beq _DivByZero
.aea9	a0 10		ldy #$10			ldy #16			; for 16 bits
.aeab					_loop:
.aeab	36 28		rol $28,x			rol DStack+4,x		;   rotate low cell of dividend one bit left
.aead	36 29		rol $29,x			rol DStack+5,x
.aeaf	36 26		rol $26,x			rol DStack+2,x		;   rotate high cell of dividend one bit left
.aeb1	36 27		rol $27,x			rol DStack+3,x
.aeb3	b0 0a		bcs $aebf			bcs _subtract		;   overflow?
.aeb5	b5 26		lda $26,x			lda DStack+2,x		;   dividend.hi >= divisor?
.aeb7	d5 24		cmp $24,x			cmp DStack+0,x
.aeb9	b5 27		lda $27,x			lda DStack+3,x
.aebb	f5 25		sbc $25,x			sbc DStack+1,x
.aebd	90 0d		bcc $aecc			bcc _next
.aebf	b5 26		lda $26,x	_subtract:	lda DStack+2,x		;   dividend.hi -= divisor
.aec1	f5 24		sbc $24,x			sbc DStack+0,x
.aec3	95 26		sta $26,x			sta DStack+2,x
.aec5	b5 27		lda $27,x			lda DStack+3,x
.aec7	f5 25		sbc $25,x			sbc DStack+1,x
.aec9	95 27		sta $27,x			sta DStack+3,x
.aecb	38		sec				sec			;   it always fits
.aecc	88		dey		_next:		dey			;  next
.aecd	d0 dc		bne $aeab			bne _loop
.aecf	36 28		rol $28,x			rol DStack+4,x		; finish rotating quotient bit in
.aed1	36 29		rol $29,x			rol DStack+5,x
.aed3	e8		inx				inx			; drop divisor
.aed4	e8		inx				inx
.aed5	4c 73 cf	jmp $cf73			jmp Swap
.aed8	a9 f6		lda #$f6	_DivByZero:	lda #$100+err_DivideBy0
.aeda	4c 79 b4	jmp $b479			jmp ThrowA
=62					CodeLen	.var *-XtPtr1
=$aedd					Here1 = *	; remember here
>ae9d	3e					.byte CodeLen	;patch wh_CodeLength
.aedd	4c 40 b4	jmp $b440	Throw_Stack_15: jmp Throw_Stack
>aee0	53 4d 2f 52 65 6d		Name0:	.text "SM/Rem"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44646					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aee6	a6					.byte (("SM/Rem"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=75					LinkDisplacement = Nt0-WordListLink
>aee7	10					.byte WordFlags	;wh_Flags
>aee8	03					.byte 3	;wh_CodeLength
>aee9	4b					  .byte LinkDisplacement	; offset to previous nt
=$aeea					XtPtr1 ::= *
=44646					WordListLink ::= Nt0 ; remember the nt of this word for later
.aeea					SM_Slash_Rem:
.aeea	e0 23		cpx #$23		cpx #-2*3+DStack0+1	; far enough below end of data stack (& not negative)?
.aeec	b0 ef		bcs $aedd		bcs Throw_Stack_15
.aeee	b5 27		lda $27,x			lda DStack+3,x
.aef0	08		php				php
.aef1	55 25		eor $25,x			eor DStack+1,x
.aef3	08		php				php
.aef4	20 c2 c6	jsr $c6c2			jsr Abs
.aef7	e8		inx				inx		; pretend we pushed n1 to R
.aef8	e8		inx				inx
.aef9	20 f5 c6	jsr $c6f5			jsr DAbs
.aefc	ca		dex				dex
.aefd	ca		dex				dex
.aefe	20 9f ae	jsr $ae9f			jsr UM_Slash_Mod	; UM/MOD
.af01	28		plp				plp
.af02	10 03		bpl $af07			bpl +
.af04	20 aa c6	jsr $c6aa			jsr Negate
.af07					+
.af07	28		plp				plp
.af08	10 07		bpl $af11			bpl _done
.af0a	e8		inx				inx		; pretend we pushed quotient to R
.af0b	e8		inx				inx
.af0c	20 aa c6	jsr $c6aa			jsr Negate
.af0f	ca		dex				dex
.af10	ca		dex				dex
.af11					_done:
=39					CodeLen	.var *-XtPtr1
=$af11					Here1 = *	; remember here
>aee8	27					.byte CodeLen	;patch wh_CodeLength
.af11	60		rts				rts
>af12	46 4d 2f 4d 6f 64		Name0:	.text "FM/Mod"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44696					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af18	86					.byte (("FM/Mod"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=50					LinkDisplacement = Nt0-WordListLink
>af19	10					.byte WordFlags	;wh_Flags
>af1a	03					.byte 3	;wh_CodeLength
>af1b	32					  .byte LinkDisplacement	; offset to previous nt
=$af1c					XtPtr1 ::= *
=44696					WordListLink ::= Nt0 ; remember the nt of this word for later
.af1c					FM_Slash_Mod:
.af1c	e0 23		cpx #$23		cpx #-2*3+DStack0+1	; far enough below end of data stack (& not negative)?
.af1e	b0 bd		bcs $aedd		bcs Throw_Stack_15
.af20	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.af22	08		php				php		;  save sign
.af23	10 0a		bpl $af2f			bpl +
.af25	20 aa c6	jsr $c6aa			jsr Negate	; NEGATE
.af28	e8		inx				inx
.af29	e8		inx				inx
.af2a	20 d9 c6	jsr $c6d9			jsr DNegate	; DNEGATE
.af2d	ca		dex				dex
.af2e	ca		dex				dex
.af2f					+
.af2f	b5 27		lda $27,x			lda DStack+3,x	; MSB of high word of d
.af31	10 0d		bpl $af40			bpl +
.af33	18		clc				clc
.af34	b5 24		lda $24,x			lda DStack+0,x	; LSB of n1
.af36	75 26		adc $26,x			adc DStack+2,x	; LSB of dh
.af38	95 26		sta $26,x			sta DStack+2,x
.af3a	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.af3c	75 27		adc $27,x			adc DStack+3,x	; MSB of dh
.af3e	95 27		sta $27,x			sta DStack+3,x
.af40					+
.af40	20 9f ae	jsr $ae9f			jsr UM_Slash_Mod	; ( d n1 -- rem n2 )
.af43	28		plp				plp
.af44	10 07		bpl $af4d			bpl +
.af46	e8		inx				inx		; pretend that we SWAP
.af47	e8		inx				inx
.af48	20 aa c6	jsr $c6aa			jsr Negate
.af4b	ca		dex				dex
.af4c	ca		dex				dex
.af4d					+
=49					CodeLen	.var *-XtPtr1
=$af4d					Here1 = *	; remember here
>af1a	31					.byte CodeLen	;patch wh_CodeLength
.af4d	60		rts				rts
>af4e	2f 4d 6f 64			Name0:	.text "/Mod"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=44754					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af52	84					.byte (("/Mod"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=58					LinkDisplacement = Nt0-WordListLink
>af53	10					.byte WordFlags	;wh_Flags
>af54	03					.byte 3	;wh_CodeLength
>af55	3a					  .byte LinkDisplacement	; offset to previous nt
=$af56					XtPtr1 ::= *
=44754					WordListLink ::= Nt0 ; remember the nt of this word for later
.af56	20 56 cf	jsr $cf56	Slash_Mod:	jsr Dup			; ( n1 n_div n_div )
.af59	a0 00		ldy #$00			ldy #0			; sign extend n1
.af5b	b5 29		lda $29,x			lda DStack+5,x
.af5d	10 01		bpl $af60			bpl +
.af5f	88		dey				dey
.af60	94 26		sty $26,x	+		sty DStack+2,x
.af62	94 27		sty $27,x			sty DStack+3,x		; ( d1 n_div )
.af64	4c ea ae	jmp $aeea			jmp SM_Slash_Rem	; SM/REM
=17					CodeLen	.var *-XtPtr1
=$af67					Here1 = *	; remember here
>af54	11					.byte CodeLen	;patch wh_CodeLength
>af67	2f				Name0:	.text "/"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=44776					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af68	e1					.byte (("/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>af69	10					.byte WordFlags	;wh_Flags
>af6a	03					.byte 3	;wh_CodeLength
>af6b	16					  .byte LinkDisplacement	; offset to previous nt
=$af6c					XtPtr1 ::= *
=44776					WordListLink ::= Nt0 ; remember the nt of this word for later
.af6c	20 56 af	jsr $af56	Slash:		jsr Slash_Mod
.af6f	4c 90 c9	jmp $c990			jmp Nip		; Nip remainder
=6					CodeLen	.var *-XtPtr1
=$af72					Here1 = *	; remember here
>af6a	06					.byte CodeLen	;patch wh_CodeLength
>af72	4d 6f 64			Name0:	.text "Mod"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=44789					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af75	83					.byte (("Mod"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>af76	00					.byte WordFlags	;wh_Flags
>af77	03					.byte 3	;wh_CodeLength
>af78	0d					  .byte LinkDisplacement	; offset to previous nt
=$af79					XtPtr1 ::= *
=44789					WordListLink ::= Nt0 ; remember the nt of this word for later
.af79	20 56 af	jsr $af56	Mod:		jsr Slash_Mod
.af7c	e8		inx				inx		; Drop quotient
.af7d	e8		inx				inx
=5					CodeLen	.var *-XtPtr1
=$af7e					Here1 = *	; remember here
>af77	05					.byte CodeLen	;patch wh_CodeLength
.af7e	60		rts				rts
>af7f	2a 2f 4d 6f 64			Name0:	.text "*/Mod"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=44804					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af84	85					.byte (("*/Mod"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>af85	50					.byte WordFlags	;wh_Flags
>af86	03					.byte 3	;wh_CodeLength
>af87	0f					  .byte LinkDisplacement	; offset to previous nt
=$af88					XtPtr1 ::= *
=44804					WordListLink ::= Nt0 ; remember the nt of this word for later
.af88					Star_Slash_Mod:
.af88	20 36 b4	jsr $b436			jsr underflow_3
.af8b	20 e0 ce	jsr $cee0			jsr To_R
.af8e	20 6e ae	jsr $ae6e			jsr M_Star
.af91	20 fe ce	jsr $cefe			jsr R_From
.af94	4c ea ae	jmp $aeea			jmp SM_Slash_Rem
=15					CodeLen	.var *-XtPtr1
=$af97					Here1 = *	; remember here
>af86	0f					.byte CodeLen	;patch wh_CodeLength
>af97	2a 2f				Name0:	.text "*/"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=44825					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af99	e2					.byte (("*/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>af9a	10					.byte WordFlags	;wh_Flags
>af9b	03					.byte 3	;wh_CodeLength
>af9c	15					  .byte LinkDisplacement	; offset to previous nt
=$af9d					XtPtr1 ::= *
=44825					WordListLink ::= Nt0 ; remember the nt of this word for later
.af9d					Star_Slash:
.af9d	20 88 af	jsr $af88			jsr Star_Slash_Mod
.afa0	4c 90 c9	jmp $c990			jmp Nip			; mod
=6					CodeLen	.var *-XtPtr1
=$afa3					Here1 = *	; remember here
>af9b	06					.byte CodeLen	;patch wh_CodeLength
>afa3	4d 2a 2f			Name0:	.text "M*/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=44838					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>afa6	e3					.byte (("M*/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>afa7	10					.byte WordFlags	;wh_Flags
>afa8	03					.byte 3	;wh_CodeLength
>afa9	0d					  .byte LinkDisplacement	; offset to previous nt
=$afaa					XtPtr1 ::= *
=44838					WordListLink ::= Nt0 ; remember the nt of this word for later
.afaa					m_star_slash:
.afaa	20 3b b4	jsr $b43b	                jsr underflow_4
.afad	b5 25		lda $25,x			lda DStack+1,x		; calc result sign
.afaf	55 27		eor $27,x			eor DStack+3,x
.afb1	55 29		eor $29,x			eor DStack+5,x
.afb3	08		php				php
.afb4	20 c2 c6	jsr $c6c2	                jsr Abs			; Abs
.afb7	20 e0 ce	jsr $cee0	                jsr To_R		; >R		( d1 n1 ) ( R: sign abs(n2) )
.afba	20 c2 c6	jsr $c6c2	                jsr Abs			; Abs
.afbd	20 e0 ce	jsr $cee0	                jsr To_R		; >R		( d1 ) ( R: sign abs(n2) abs(n1) )
.afc0	20 f5 c6	jsr $c6f5	                jsr DAbs		; DAbs		( abs(d1) ) ( R: sign abs(n2) abs(n1) )
.afc3	20 73 cf	jsr $cf73	                jsr Swap		; Swap
.afc6	20 19 cf	jsr $cf19	                jsr R_Fetch		; R@
.afc9	20 20 ae	jsr $ae20	                jsr UM_Star		; UM*
.afcc	20 51 ce	jsr $ce51	                jsr Rot			; Rot
.afcf	20 fe ce	jsr $cefe	                jsr R_From		; R>
.afd2	20 20 ae	jsr $ae20	                jsr UM_Star		; UM*
.afd5	20 51 ce	jsr $ce51	                jsr Rot			; Rot
.afd8	20 72 ca	jsr $ca72	                jsr UMPlus		; 0 D+
.afdb	20 19 cf	jsr $cf19	                jsr R_Fetch		; R@
.afde	20 9f ae	jsr $ae9f	                jsr UM_Slash_Mod	; UM/Mod
.afe1	20 76 ce	jsr $ce76	                jsr Not_Rot		; Rot Rot
.afe4	20 fe ce	jsr $cefe	                jsr R_From		; R>
.afe7	20 9f ae	jsr $ae9f	                jsr UM_Slash_Mod	; UM/Mod
.afea	20 90 c9	jsr $c990	                jsr Nip			; Swap Drop
.afed	20 73 cf	jsr $cf73	                jsr Swap		; Swap
.aff0	28		plp				plp
.aff1	10 03		bpl $aff6			bpl _rts		; ... 0< if ...
.aff3	4c d9 c6	jmp $c6d9	                jmp DNegate
.aff6	60		rts		_rts:		rts
=77					CodeLen	.var *-XtPtr1
=$aff7					Here1 = *	; remember here
>afa8	4d					.byte CodeLen	;patch wh_CodeLength
>aff7	45 76 61 6c 75 61 74 65		Name0:	.text "Evaluate"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=44927					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>afff	a8					.byte (("Evaluate"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=89					LinkDisplacement = Nt0-WordListLink
>b000	10					.byte WordFlags	;wh_Flags
>b001	03					.byte 3	;wh_CodeLength
>b002	59					  .byte LinkDisplacement	; offset to previous nt
=$b003					XtPtr1 ::= *
=44927					WordListLink ::= Nt0 ; remember the nt of this word for later
.b003					Evaluate:
.b003	18		clc				clc			; signal to zero BLK.
.b004					load_evaluate:
.b004	ad 0d 03	lda $030d			lda BlkV+1	; Save the current value of BLK on the return stack.
.b007	48		pha				pha
.b008	ad 0c 03	lda $030c			lda BlkV+0
.b00b	48		pha				pha
.b00c	b0 08		bcs $b016			bcs +		; See if we should zero BLK.
.b00e	a9 00		lda #$00			lda #0		; Set BLK to zero.
.b010	8d 0c 03	sta $030c			sta BlkV+0
.b013	8d 0d 03	sta $030d			sta BlkV+1
.b016					+
.b016	20 e1 c3	jsr $c3e1			jsr Input_To_R	; Save the input state to the Return Stack
.b019	a9 ff		lda #$ff			lda #$ff	; SOURCE-ID= -1
.b01b	85 02		sta $02				sta insrc+0
.b01d	85 03		sta $03				sta insrc+1
.b01f	a9 00		lda #$00			lda #0		; >IN= zero
.b021	85 08		sta $08				sta toin+0
.b023	85 09		sta $09				sta toin+1
.b025	20 f4 b3	jsr $b3f4			jsr PopYA	; ciblen= string length (u)
.b028	85 06		sta $06				sta ciblen+0
.b02a	84 07		sty $07				sty ciblen+1
.b02c	20 f4 b3	jsr $b3f4			jsr PopYA	; cib= string addr
.b02f	85 04		sta $04				sta cib+0
.b031	84 05		sty $05				sty cib+1
.b033	20 31 b5	jsr $b531			jsr interpret	; ( -- )
.b036	20 02 c4	jsr $c402			jsr R_To_Input	; restore input state
.b039	68		pla				pla		; Restore BLK from the return stack.
.b03a	8d 0c 03	sta $030c			sta BlkV+0
.b03d	68		pla				pla
.b03e	8d 0d 03	sta $030d			sta BlkV+1
=62					CodeLen	.var *-XtPtr1
=$b041					Here1 = *	; remember here
>b001	3e					.byte CodeLen	;patch wh_CodeLength
.b041	60		rts				rts
>b042	3e 4e 75 6d 62 65 72		Name0:	.text ">Number"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=45001					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b049	47					.byte ((">Number"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=74					LinkDisplacement = Nt0-WordListLink
>b04a	50					.byte WordFlags	;wh_Flags
>b04b	03					.byte 3	;wh_CodeLength
>b04c	4a					  .byte LinkDisplacement	; offset to previous nt
=$b04d					XtPtr1 ::= *
=45001					WordListLink ::= Nt0 ; remember the nt of this word for later
.b04d					To_Number:
.b04d	20 3b b4	jsr $b43b			jsr underflow_4
.b050	b5 24		lda $24,x			lda DStack+0,x		; no chars left?
.b052	f0 72		beq $b0c6			beq _done
.b054					_Char_loop:
.b054	a1 26		lda ($26,x)			lda (DStack+2,x)		; Get next character
.b056	c9 30		cmp #$30			cmp #'0'		; convert to value (Digit_Question)
.b058	90 6c		bcc $b0c6			bcc _done
.b05a	c9 3a		cmp #$3a			cmp #'9'+1
.b05c	90 08		bcc $b066			bcc _digit
.b05e	29 df		and #$df			and #$df		;   ASCII uppercase
.b060	c9 41		cmp #$41			cmp #'A'
.b062	90 62		bcc $b0c6			bcc _done
.b064	e9 07		sbc #$07			sbc #7 ;'A'-'0'-10	;   to make 'A'=10 below
.b066	38		sec		_digit:		sec
.b067	e9 30		sbc #$30			sbc #'0'
.b069	cd 00 03	cmp $0300			cmp base		; must be < base
.b06c	b0 58		bcs $b0c6			bcs _done
.b06e	48		pha				pha			; Save char value
.b06f	20 68 c5	jsr $c568			jsr Two_Over		;   copy ud to work (multiplicand)
.b072	a9 00		lda #$00			lda #0			;   zero ud (product)
.b074	95 2c		sta $2c,x			sta DStack+8,x
.b076	95 2d		sta $2d,x			sta DStack+9,x
.b078	95 2e		sta $2e,x			sta DStack+10,x
.b07a	95 2f		sta $2f,x			sta DStack+11,x
.b07c	ad 00 03	lda $0300			lda base		;   get multiplier
.b07f	d0 23		bne $b0a4			bne _Mul_Test
.b081	48		pha		_Mul_Add:	pha			;   save multiplier
.b082	18		clc				clc			;   ud += work
.b083	b5 26		lda $26,x			lda DStack+2,x
.b085	75 2e		adc $2e,x			adc DStack+10,x
.b087	95 2e		sta $2e,x			sta DStack+10,x
.b089	b5 27		lda $27,x			lda DStack+3,x
.b08b	75 2f		adc $2f,x			adc DStack+11,x
.b08d	95 2f		sta $2f,x			sta DStack+11,x
.b08f	b5 24		lda $24,x			lda DStack+0,x
.b091	75 2c		adc $2c,x			adc DStack+8,x
.b093	95 2c		sta $2c,x			sta DStack+8,x
.b095	b5 25		lda $25,x			lda DStack+1,x
.b097	75 2d		adc $2d,x			adc DStack+9,x
.b099	95 2d		sta $2d,x			sta DStack+9,x
.b09b	68		pla				pla			;   restore multiplier
.b09c	16 26		asl $26,x	_Mul_Shift:	asl DStack+2,x		;   work <<= 1
.b09e	36 27		rol $27,x			rol DStack+3,x
.b0a0	36 24		rol $24,x			rol DStack+0,x
.b0a2	36 25		rol $25,x			rol DStack+1,x
.b0a4	4a		lsr a		_Mul_Test:	lsr a			;   shift multiplier
.b0a5	b0 da		bcs $b081			bcs _Mul_Add
.b0a7	d0 f3		bne $b09c			bne _Mul_Shift
.b0a9	e8		inx				inx			;   2Drop work
.b0aa	e8		inx				inx
.b0ab	e8		inx				inx
.b0ac	e8		inx				inx
.b0ad	68		pla				pla			; recover value
.b0ae	18		clc				clc			; add to ud
.b0af	75 2a		adc $2a,x			adc DStack+6,x
.b0b1	95 2a		sta $2a,x			sta DStack+6,x
.b0b3	90 0a		bcc $b0bf			bcc +
.b0b5	f6 2b		inc $2b,x			inc DStack+7,x
.b0b7	d0 06		bne $b0bf			bne +
.b0b9	f6 28		inc $28,x			inc DStack+4,x
.b0bb	d0 02		bne $b0bf			bne +
.b0bd	f6 29		inc $29,x			inc DStack+5,x
.b0bf					+
.b0bf	20 64 ca	jsr $ca64			jsr NOS_One_Plus	; consume the char
.b0c2	d6 24		dec $24,x			dec DStack+0,x
.b0c4	d0 8e		bne $b054			bne _Char_loop
.b0c6					_done:
=121					CodeLen	.var *-XtPtr1
=$b0c6					Here1 = *	; remember here
>b04b	79					.byte CodeLen	;patch wh_CodeLength
.b0c6	60		rts				rts
>b0c7	4e 75 6d 62 65 72		Name0:	.text "Number"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=45133					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b0cd	46					.byte (("Number"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=132					LinkDisplacement = Nt0-WordListLink
>b0ce	50					.byte WordFlags	;wh_Flags
>b0cf	03					.byte 3	;wh_CodeLength
>b0d0	84					  .byte LinkDisplacement	; offset to previous nt
=$b0d1					XtPtr1 ::= *
=45133					WordListLink ::= Nt0 ; remember the nt of this word for later
.b0d1					Number:
.b0d1	20 31 b4	jsr $b431			jsr underflow_2
.b0d4	a9 00		lda #$00			lda #0
.b0d6	85 1a		sta $1a				sta tmp4+0	; flag for double
.b0d8	85 1b		sta $1b				sta tmp4+1	; flag for minus
.b0da	ad 00 03	lda $0300			lda base
.b0dd	48		pha				pha
.b0de	20 a4 cc	jsr $cca4			jsr Two_dup		; ( addr u addr u )
.b0e1	a1 26		lda ($26,x)			lda (DStack+2,x)	; get 1st char
.b0e3	20 a5 b1	jsr $b1a5			jsr _MinusCheck		; a minus sign?
.b0e6	a0 0a		ldy #$0a			ldy #10			; decimal?
.b0e8	c9 23		cmp #$23			cmp #'#'
.b0ea	f0 35		beq $b121			beq _base_changed
.b0ec	a0 10		ldy #$10			ldy #16			; hex?
.b0ee	c9 24		cmp #$24			cmp #'$'
.b0f0	f0 2f		beq $b121			beq _base_changed
.b0f2	a0 02		ldy #$02			ldy #2			; binary?
.b0f4	c9 25		cmp #$25			cmp #'%'
.b0f6	f0 29		beq $b121			beq _base_changed
.b0f8	c9 27		cmp #$27			cmp #$27		; ASCII for "'"
.b0fa	d0 2f		bne $b12b			bne _check_dot
.b0fc	b5 24		lda $24,x			lda DStack+0,x	; length=3 ?
.b0fe	c9 03		cmp #$03			cmp #3
.b100	d0 1c		bne $b11e			bne _not_a_char
.b102	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b104	85 1c		sta $1c				sta tmp5
.b106	b5 27		lda $27,x			lda DStack+3,x
.b108	85 1d		sta $1d				sta tmp5+1
.b10a	a0 02		ldy #$02			ldy #2
.b10c	b1 1c		lda ($1c),y			lda (tmp5),y
.b10e	c9 27		cmp #$27			cmp #$27	; ASCII for "'"
.b110	d0 0c		bne $b11e			bne _not_a_char
.b112	88		dey				dey		; The char we want is between the single quotes.
.b113	b1 1c		lda ($1c),y			lda (tmp5),y
.b115	95 26		sta $26,x			sta DStack+2,x
.b117	a9 00		lda #$00			lda #0
.b119	95 27		sta $27,x			sta DStack+3,x
.b11b	4c 7a b1	jmp $b17a			jmp _drop_original_string ; Single flag will drop the TOS for us.
.b11e					_not_a_char:
.b11e	4c 57 b1	jmp $b157			jmp _number_error
.b121					_base_changed:
.b121	8c 00 03	sty $0300			sty base	; Switch to the new base
.b124	20 64 ca	jsr $ca64			jsr NOS_One_Plus ; start one character later
.b127	d6 24		dec $24,x			dec DStack+0,x	; decrease string length by one
.b129	a1 26		lda ($26,x)			lda (DStack+2,x) ; Load the first char again
.b12b					_check_dot:
.b12b	20 a5 b1	jsr $b1a5			jsr _MinusCheck
.b12e	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b130	85 1c		sta $1c				sta tmp5
.b132	b5 27		lda $27,x			lda DStack+3,x
.b134	85 1d		sta $1d				sta tmp5+1
.b136	b4 24		ldy $24,x			ldy DStack+0,x	; Y now points to the first character after the string,
.b138	88		dey				dey		; but we need the last character
.b139	b1 1c		lda ($1c),y			lda (tmp5),y
.b13b	c9 2e		cmp #$2e			cmp #'.'
.b13d	d0 04		bne $b143			bne _main
.b13f	c6 1a		dec $1a				dec tmp4	; Flag the fact
.b141	d6 24		dec $24,x			dec DStack+0,x	; reduce string length by one
.b143					_main:
.b143	20 a4 cc	jsr $cca4			jsr Two_Dup
.b146	a9 00		lda #$00			lda #0
.b148	95 28		sta $28,x			sta DStack+4,x	; clear ud
.b14a	95 29		sta $29,x			sta DStack+5,x
.b14c	95 2a		sta $2a,x			sta DStack+6,x
.b14e	95 2b		sta $2b,x			sta DStack+7,x
.b150	20 4d b0	jsr $b04d			jsr To_Number	; ( ud addr u -- ud addr u )
.b153	b5 24		lda $24,x			lda DStack+0,x
.b155	f0 1f		beq $b176			beq _all_converted
.b157					_number_error:
.b157	20 36 c5	jsr $c536			jsr Two_drop	; >NUMBER modified addr u
.b15a	20 36 c5	jsr $c536			jsr Two_drop	; ud   (partially converted number)
.b15d	a9 3e		lda #$3e			lda #'>'	; print the unknown
.b15f	20 c0 cd	jsr $cdc0			jsr Emit_A	; word using the original addr u we saved at the beginning.
.b162	20 d8 cd	jsr $cdd8			jsr Type
.b165	a9 3c		lda #$3c			lda #'<'
.b167	20 c0 cd	jsr $cdc0			jsr Emit_A
.b16a	20 cc cd	jsr $cdcc			jsr Space
.b16d	68		pla				pla		; restore base
.b16e	8d 00 03	sta $0300			sta base
.b171	a9 f3		lda #$f3			lda #$100+err_UndefinedWord
.b173	4c 79 b4	jmp $b479			jmp ThrowA
.b176					_all_converted:
.b176	e8		inx				inx		; Drop the current addr u
.b177	e8		inx				inx
.b178	e8		inx				inx
.b179	e8		inx				inx
.b17a					_drop_original_string:
.b17a	20 d8 bf	jsr $bfd8			jsr TwoNip	 ; Drop the original addr u
.b17d	a5 1a		lda $1a				lda tmp4	; flag for double
.b17f	f0 10		beq $b191			beq _single
.b181	a9 20		lda #$20			lda #%00100000
.b183	05 0c		ora $0c				ora status
.b185	85 0c		sta $0c				sta status
.b187	a5 1b		lda $1b				lda tmp4+1
.b189	f0 15		beq $b1a0			beq _done	; no minus, all done
.b18b	20 d9 c6	jsr $c6d9			jsr DNegate
.b18e	4c a0 b1	jmp $b1a0			jmp _done
.b191					_single:
.b191	e8		inx				inx		; convert ud to u
.b192	e8		inx				inx
.b193	a9 df		lda #$df			lda #$ff-%00100000
.b195	25 0c		and $0c				and status
.b197	85 0c		sta $0c				sta status
.b199	a5 1b		lda $1b				lda tmp4+1
.b19b	f0 03		beq $b1a0			beq _done	; no minus, all done
.b19d	20 aa c6	jsr $c6aa			jsr Negate
.b1a0					_done:
.b1a0	68		pla				pla
.b1a1	8d 00 03	sta $0300			sta base
=211					CodeLen	.var *-XtPtr1
=$b1a4					Here1 = *	; remember here
>b0cf	d3					.byte CodeLen	;patch wh_CodeLength
.b1a4	60		rts				rts
.b1a5					_MinusCheck:
.b1a5	c9 2d		cmp #$2d			cmp #'-'		; a minus sign?
.b1a7	d0 09		bne $b1b2			bne +
.b1a9	c6 1b		dec $1b				dec tmp4+1		; set flag
.b1ab	20 64 ca	jsr $ca64			jsr NOS_One_Plus	; start one character later
.b1ae	d6 24		dec $24,x			dec DStack+0,x		; decrease string length by one
.b1b0	a1 26		lda ($26,x)			lda (DStack+2,x)	; get next char
.b1b2	60		rts		+		rts
>b1b3	48 65 78			Name0:	.text "Hex"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=45366					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1b6	03					.byte (("Hex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=233					LinkDisplacement = Nt0-WordListLink
>b1b7	10					.byte WordFlags	;wh_Flags
>b1b8	03					.byte 3	;wh_CodeLength
>b1b9	e9					  .byte LinkDisplacement	; offset to previous nt
=$b1ba					XtPtr1 ::= *
=45366					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1ba	a9 10		lda #$10	Hex:		lda #16
.b1bc	d0 0d		bne $b1cb			bne Decimal_a
=4					CodeLen	.var *-XtPtr1
=$b1be					Here1 = *	; remember here
>b1b8	04					.byte CodeLen	;patch wh_CodeLength
>b1be	44 65 63 69 6d 61 6c		Name0:	.text "Decimal"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=45381					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1c5	87					.byte (("Decimal"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>b1c6	00					.byte WordFlags	;wh_Flags
>b1c7	03					.byte 3	;wh_CodeLength
>b1c8	0f					  .byte LinkDisplacement	; offset to previous nt
=$b1c9					XtPtr1 ::= *
=45381					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1c9	a9 0a		lda #$0a	Decimal:	lda #10
.b1cb	8d 00 03	sta $0300	Decimal_a:	sta base+0
.b1ce	a9 00		lda #$00			lda #0
.b1d0	8d 01 03	sta $0301			sta base+1		; paranoid
=10					CodeLen	.var *-XtPtr1
=$b1d3					Here1 = *	; remember here
>b1c7	0a					.byte CodeLen	;patch wh_CodeLength
.b1d3	60		rts				rts
>b1d4	42 61 73 65			Name0:	.text "Base"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=45400					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1d8	a4					.byte (("Base"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>b1d9	10					.byte WordFlags	;wh_Flags
>b1da	03					.byte 3	;wh_CodeLength
>b1db	13					  .byte LinkDisplacement	; offset to previous nt
=$b1dc					XtPtr1 ::= *
=45400					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1dc	a0 03		ldy #$03			ldy #>base
.b1de	a9 00		lda #$00			lda #<base
.b1e0	4c b3 b7	jmp $b7b3			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$b1e3					Here1 = *	; remember here
>b1da	07					.byte CodeLen	;patch wh_CodeLength
>b1e3	43 6f 75 6e 74			Name0:	.text "Count"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=45416					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1e8	85					.byte (("Count"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>b1e9	50					.byte WordFlags	;wh_Flags
>b1ea	03					.byte 3	;wh_CodeLength
>b1eb	10					  .byte LinkDisplacement	; offset to previous nt
=$b1ec					XtPtr1 ::= *
=45416					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1ec					Count:
.b1ec	20 1d b4	jsr $b41d			jsr underflow_1
.b1ef	a1 24		lda ($24,x)			lda (DStack+0,x)	; A= number of characters
.b1f1	f6 24		inc $24,x			inc DStack+0,x		; move start address up by one
.b1f3	d0 02		bne $b1f7			bne +
.b1f5	f6 25		inc $25,x			inc DStack+1,x
.b1f7					+
.b1f7	4c e2 b7	jmp $b7e2			jmp PushZA		; push number of characters, return
=14					CodeLen	.var *-XtPtr1
=$b1fa					Here1 = *	; remember here
>b1ea	0e					.byte CodeLen	;patch wh_CodeLength
>b1fa	3f 50 61 69 72 43 74 6c		Name0:	.text "?PairCtlA"	;  name of word as a string, ending at wh_NameLastChar
>b202	41
=9					NameLength = *-Name0
=45443					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b203	29					.byte (("?PairCtlA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>b204	10					.byte WordFlags	;wh_Flags
>b205	03					.byte 3	;wh_CodeLength
>b206	1b					  .byte LinkDisplacement	; offset to previous nt
=$b207					XtPtr1 ::= *
=45443					WordListLink ::= Nt0 ; remember the nt of this word for later
.b207	d5 24		cmp $24,x	QPairCtlA:	cmp DStack+0,x
.b209	f0 05		beq $b210			beq _8
.b20b	a9 ea		lda #$ea			lda #$100+err_ControlMismatch
.b20d	4c 79 b4	jmp $b479			jmp ThrowA
.b210	e8		inx		_8:		inx
.b211	e8		inx				inx	; Drop n
.b212	60		rts				rts
=12					CodeLen	.var *-XtPtr1
=$b213					Here1 = *	; remember here
>b205	0c					.byte CodeLen	;patch wh_CodeLength
>0743					DoLeave  .word ?	; head of leave addr patch chain
>0745					DoStkIndex: .byte ?
>0746					DoIndexL: .fill DoStkDim
>074e					DoIndexH: .fill DoStkDim
>0756					DoFufaL:  .fill DoStkDim
>075e					DoFufaH:  .fill DoStkDim
>b213	3f 44 6f			Name0:	.text "?Do"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=45462					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b216	e3					.byte (("?Do"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>b217	1c					.byte WordFlags	;wh_Flags
>b218	03					.byte 3	;wh_CodeLength
>b219	13					  .byte LinkDisplacement	; offset to previous nt
=$b21a					XtPtr1 ::= *
=45462					WordListLink ::= Nt0 ; remember the nt of this word for later
.b21a					Question_Do:
.b21a	20 56 b3	jsr $b356			jsr Do_Leave_Init
.b21d	a9 31		lda #$31			lda #<_runtime
.b21f	a0 b2		ldy #$b2			ldy #>_runtime
.b221	20 21 cd	jsr $cd21			jsr Jsr_Comma_YA	; compile JSR _runtime
.b224	a9 d0		lda #$d0			lda #$d0		; compile BNE *+5
.b226	a0 03		ldy #$03			ldy #3
.b228	20 fe cc	jsr $ccfe			jsr Comma_YA
.b22b	20 39 b3	jsr $b339			jsr Leave		; compile JMP leave
.b22e	4c 4e b2	jmp $b24e			jmp Do_8		; finish
=23					CodeLen	.var *-XtPtr1
=$b231					Here1 = *	; remember here
>b218	17					.byte CodeLen	;patch wh_CodeLength
.b231					_runtime:
.b231	20 56 b2	jsr $b256			jsr Do_Runtime	; start normally (we assume TOS!=NOS)
.b234	a5 12		lda $12				lda DoIndex+0	; Are TOS and NOS equal?
.b236	f0 01		beq $b239			beq _2
.b238	60		rts				rts		; return Z=0 to signal continue
.b239	a5 13		lda $13		_2:		lda DoIndex+1
.b23b	c9 80		cmp #$80			cmp #$80
.b23d	60		rts				rts		; return Z
>b23e	44 6f				Name0:	.text "Do"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=45504					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b240	e2					.byte (("Do"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>b241	1c					.byte WordFlags	;wh_Flags
>b242	03					.byte 3	;wh_CodeLength
>b243	2a					  .byte LinkDisplacement	; offset to previous nt
=$b244					XtPtr1 ::= *
=45504					WordListLink ::= Nt0 ; remember the nt of this word for later
.b244					Do:
.b244	20 56 b3	jsr $b356			jsr Do_Leave_Init
.b247	a9 56		lda #$56			lda #<Do_runtime
.b249	a0 b2		ldy #$b2			ldy #>Do_runtime
.b24b	20 21 cd	jsr $cd21			jsr Jsr_Comma_YA	; compile JSR _runtime
.b24e	20 28 ca	jsr $ca28	Do_8:		jsr Here		; remember loop body start addr
.b251	a9 44		lda #$44			lda #<Do		; identifier
.b253	4c e2 b7	jmp $b7e2			jmp PushZA
=18					CodeLen	.var *-XtPtr1
=$b256					Here1 = *	; remember here
>b242	12					.byte CodeLen	;patch wh_CodeLength
.b256					Do_Runtime:
.b256	ce 45 07	dec $0745			dec DoStkIndex		; alloc DO stack entry
.b259	ac 45 07	ldy $0745			ldy DoStkIndex
.b25c	30 2d		bmi $b28b			bmi _TooDeep
.b25e	a5 12		lda $12				lda DoIndex+0		; save previous DoIndex
.b260	99 46 07	sta $0746,y			sta DoIndexL,y
.b263	a5 13		lda $13				lda DoIndex+1
.b265	99 4e 07	sta $074e,y			sta DoIndexH,y
.b268	38		sec				sec			; fudge factor (FUFA)= $8000 - limit
.b269	a9 00		lda #$00			lda #0			;   the number that will trip the overflow flag
.b26b	f5 26		sbc $26,x			sbc DStack+2,x
.b26d	99 56 07	sta $0756,y			sta DoFuFaL,y
.b270	a9 80		lda #$80			lda #$80
.b272	f5 27		sbc $27,x			sbc DStack+3,x
.b274	99 5e 07	sta $075e,y			sta DoFuFaH,y
.b277	18		clc				clc			; index= FUFA plus original index
.b278	b5 24		lda $24,x			lda DStack+0,x
.b27a	79 56 07	adc $0756,y			adc DoFuFaL,y
.b27d	85 12		sta $12				sta DoIndex+0
.b27f	b5 25		lda $25,x			lda DStack+1,x
.b281	79 5e 07	adc $075e,y			adc DoFuFaH,y
.b284	85 13		sta $13				sta DoIndex+1
.b286	e8		inx				inx			; Drop orig index
.b287	e8		inx				inx
.b288	e8		inx				inx			; Drop orig limit
.b289	e8		inx				inx
.b28a	60		rts				rts			; return
.b28b	a9 f9		lda #$f9	_TooDeep:	lda #$100+err_DoLoop_TooDeep
.b28d	20 79 b4	jsr $b479			jsr ThrowA
>b290	4c 6f 6f 70			Name0:	.text "Loop"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=45588					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b294	04					.byte (("Loop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=84					LinkDisplacement = Nt0-WordListLink
>b295	1c					.byte WordFlags	;wh_Flags
>b296	03					.byte 3	;wh_CodeLength
>b297	54					  .byte LinkDisplacement	; offset to previous nt
=$b298					XtPtr1 ::= *
=45588					WordListLink ::= Nt0 ; remember the nt of this word for later
.b298					Loop:
.b298	a9 9f		lda #$9f			lda #<_Runtime
.b29a	a0 b2		ldy #$b2			ldy #>_Runtime
.b29c	4c ba b2	jmp $b2ba			jmp Plus_Loop_5
=7					CodeLen	.var *-XtPtr1
=$b29f					Here1 = *	; remember here
>b296	07					.byte CodeLen	;patch wh_CodeLength
.b29f					_Runtime:
.b29f	e6 12		inc $12				inc DoIndex+0
.b2a1	f0 02		beq $b2a5			beq _Runtime2
.b2a3	b8		clv				clv			; return V=0 to signal loop back
.b2a4	60		rts				rts
.b2a5	18		clc		_Runtime2:	clc
.b2a6	a5 13		lda $13				lda DoIndex+1		; handle carry from lo byte
.b2a8	69 01		adc #$01			adc #1
.b2aa	85 13		sta $13				sta DoIndex+1
.b2ac	60		rts				rts			; return V to signal loop back
>b2ad	2b 4c 6f 6f 70			Name0:	.text "+Loop"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=45618					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b2b2	05					.byte (("+Loop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>b2b3	1c					.byte WordFlags	;wh_Flags
>b2b4	03					.byte 3	;wh_CodeLength
>b2b5	1e					  .byte LinkDisplacement	; offset to previous nt
=$b2b6					XtPtr1 ::= *
=45618					WordListLink ::= Nt0 ; remember the nt of this word for later
.b2b6					Plus_Loop:
.b2b6	a9 c4		lda #$c4			lda #<Plus_Loop_Runtime
.b2b8	a0 b2		ldy #$b2			ldy #>Plus_Loop_Runtime
.b2ba	20 db b2	jsr $b2db	Plus_Loop_5:	jsr Loop_End		; compile JSR _runtime, BVC back
.b2bd	a9 9b		lda #$9b			lda #<(Unloop-wh_LinkNt-1)
.b2bf	a0 b2		ldy #$b2			ldy #>(Unloop-wh_LinkNt-1)
.b2c1	4c b6 b6	jmp $b6b6			jmp Compile_Comma_NT_YA ; compile Unloop, return
=14					CodeLen	.var *-XtPtr1
=$b2c4					Here1 = *	; remember here
>b2b4	0e					.byte CodeLen	;patch wh_CodeLength
.b2c4					Plus_Loop_Runtime:
.b2c4	e0 27		cpx #$27		cpx #-2*1+DStack0+1	; far enough below end of data stack (& not negative)?
.b2c6	b0 10		bcs $b2d8		bcs Throw_Stack_12
.b2c8	18		clc				clc			; DoIndex += step
.b2c9	b5 24		lda $24,x			lda DStack+0,x
.b2cb	65 12		adc $12				adc DoIndex+0
.b2cd	85 12		sta $12				sta DoIndex+0
.b2cf	b5 25		lda $25,x			lda DStack+1,x
.b2d1	65 13		adc $13				adc DoIndex+1
.b2d3	85 13		sta $13				sta DoIndex+1
.b2d5	e8		inx				inx			; Drop step
.b2d6	e8		inx				inx
.b2d7	60		rts				rts			; return V=0 to signal loop back
.b2d8	4c 40 b4	jmp $b440	Throw_Stack_12: jmp Throw_Stack
.b2db					Loop_End:
.b2db	20 21 cd	jsr $cd21			jsr Jsr_Comma_YA	; compile JSR runtime
.b2de	a9 44		lda #$44			lda #<Do		; check id
.b2e0	20 07 b2	jsr $b207	Loop_End_3:	jsr QPairCtlA
.b2e3	a9 50		lda #$50			lda #$50		; compile BVC body
.b2e5	20 10 a7	jsr $a710			jsr Branch_CommaA
.b2e8	ac 43 07	ldy $0743			ldy DoLeave+0		; for each leave addr entry
.b2eb	ad 44 07	lda $0744			lda DoLeave+1
.b2ee	f0 1b		beq $b30b			beq _p9
.b2f0	84 14		sty $14		_p1:		sty tmp1+0		;   save entry pointer
.b2f2	85 15		sta $15				sta tmp1+1
.b2f4	a0 01		ldy #$01			ldy #1			;   save link
.b2f6	b1 14		lda ($14),y			lda (tmp1),y
.b2f8	48		pha				pha
.b2f9	88		dey				dey
.b2fa	b1 14		lda ($14),y			lda (tmp1),y
.b2fc	48		pha				pha
.b2fd	a5 00		lda $00				lda cp+0		;   patch addr
.b2ff	91 14		sta ($14),y			sta (tmp1),y
.b301	a5 01		lda $01				lda cp+1
.b303	c8		iny				iny
.b304	91 14		sta ($14),y			sta (tmp1),y
.b306	68		pla				pla			;   get saved link
.b307	a8		tay				tay
.b308	68		pla				pla
.b309	d0 e5		bne $b2f0			bne _p1
.b30b					_p9:
.b30b	20 f4 b3	jsr $b3f4			jsr PopYA		; restore DoLeave
.b30e	8d 43 07	sta $0743			sta DoLeave+0
.b311	8c 44 07	sty $0744			sty DoLeave+1
.b314	60		rts				rts
>b315	55 6e 6c 6f 6f 70		Name0:	.text "Unloop"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=45723					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b31b	06					.byte (("Unloop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$04					WordFlags ::= CO	; modifiable copy, remember for later
=105					LinkDisplacement = Nt0-WordListLink
>b31c	04					.byte WordFlags	;wh_Flags
>b31d	03					.byte 3	;wh_CodeLength
>b31e	69					  .byte LinkDisplacement	; offset to previous nt
=$b31f					XtPtr1 ::= *
=45723					WordListLink ::= Nt0 ; remember the nt of this word for later
.b31f					Unloop:
.b31f	ac 45 07	ldy $0745			ldy DoStkIndex
.b322	b9 46 07	lda $0746,y			lda DoIndexL,y	; restore Index
.b325	85 12		sta $12				sta DoIndex+0
.b327	b9 4e 07	lda $074e,y			lda DoIndexH,y
.b32a	85 13		sta $13				sta DoIndex+1
.b32c	ee 45 07	inc $0745			inc DoStkIndex	; drop Do stack entry
=16					CodeLen	.var *-XtPtr1
=$b32f					Here1 = *	; remember here
>b31d	10					.byte CodeLen	;patch wh_CodeLength
.b32f	60		rts				rts
>b330	4c 65 61 76 65			Name0:	.text "Leave"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=45749					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b335	a5					.byte (("Leave"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+NN+CO	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>b336	1c					.byte WordFlags	;wh_Flags
>b337	03					.byte 3	;wh_CodeLength
>b338	1a					  .byte LinkDisplacement	; offset to previous nt
=$b339					XtPtr1 ::= *
=45749					WordListLink ::= Nt0 ; remember the nt of this word for later
.b339					Leave:
.b339	a9 4c		lda #$4c			lda #$4c	; JMP abs
.b33b	20 e7 cc	jsr $cce7			jsr C_Comma_A
.b33e	a5 01		lda $01				lda cp+1	; save cp
.b340	48		pha				pha
.b341	a5 00		lda $00				lda cp+0
.b343	48		pha				pha
.b344	ad 43 07	lda $0743			lda DoLeave+0	; compile DoLeave link, patched later
.b347	ac 44 07	ldy $0744			ldy DoLeave+1
.b34a	20 fe cc	jsr $ccfe			jsr Comma_YA
.b34d	68		pla				pla		; update DoLeave
.b34e	8d 43 07	sta $0743			sta DoLeave+0
.b351	68		pla				pla
.b352	8d 44 07	sta $0744			sta DoLeave+1
=28					CodeLen	.var *-XtPtr1
=$b355					Here1 = *	; remember here
>b337	1c					.byte CodeLen	;patch wh_CodeLength
.b355	60		rts				rts
.b356					Do_Leave_Init:
.b356	ad 43 07	lda $0743			lda DoLeave+0
.b359	ac 44 07	ldy $0744			ldy DoLeave+1
.b35c	20 b3 b7	jsr $b7b3			jsr PushYA	; save old leave head
.b35f	a9 00		lda #$00			lda #0		; init
.b361	8d 44 07	sta $0744			sta DoLeave+1
.b364	60		rts				rts
>b365	49				Name0:	.text "I"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=45798					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b366	21					.byte (("I"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$04					WordFlags ::= CO	; modifiable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>b367	04					.byte WordFlags	;wh_Flags
>b368	03					.byte 3	;wh_CodeLength
>b369	31					  .byte LinkDisplacement	; offset to previous nt
=$b36a					XtPtr1 ::= *
=45798					WordListLink ::= Nt0 ; remember the nt of this word for later
.b36a	ac 45 07	ldy $0745	I:		ldy DoStkIndex
.b36d	ca		dex				dex
.b36e	ca		dex				dex
.b36f	38		sec				sec		; n= fudged index - fudge factor (FUFA)
.b370	a5 12		lda $12				lda DoIndex+0
.b372	f9 56 07	sbc $0756,y			sbc DoFuFaL,y
.b375	95 24		sta $24,x			sta DStack+0,x
.b377	a5 13		lda $13				lda DoIndex+1
.b379	f9 5e 07	sbc $075e,y			sbc DoFuFaH,y
.b37c	95 25		sta $25,x			sta DStack+1,x
=20					CodeLen	.var *-XtPtr1
=$b37e					Here1 = *	; remember here
>b368	14					.byte CodeLen	;patch wh_CodeLength
.b37e	60		rts				rts
>b37f	4a				Name0:	.text "J"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=45824					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b380	41					.byte (("J"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$04					WordFlags ::= CO	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>b381	04					.byte WordFlags	;wh_Flags
>b382	03					.byte 3	;wh_CodeLength
>b383	1a					  .byte LinkDisplacement	; offset to previous nt
=$b384					XtPtr1 ::= *
=45824					WordListLink ::= Nt0 ; remember the nt of this word for later
.b384	ac 45 07	ldy $0745	J:		ldy DoStkIndex
.b387	ca		dex				dex
.b388	ca		dex				dex
.b389	38		sec				sec		; n= 2nd fudged index - 2nd fudge factor (FUFA)
.b38a	b9 46 07	lda $0746,y			lda DoIndexL+0,y	; LSB
.b38d	f9 57 07	sbc $0757,y			sbc DoFufaL+1,y
.b390	95 24		sta $24,x			sta DStack+0,x
.b392	b9 4e 07	lda $074e,y			lda DoIndexH+0,y	; MSB
.b395	f9 5f 07	sbc $075f,y			sbc DoFufaH+1,y
.b398	95 25		sta $25,x			sta DStack+1,x
=22					CodeLen	.var *-XtPtr1
=$b39a					Here1 = *	; remember here
>b382	16					.byte CodeLen	;patch wh_CodeLength
.b39a	60		rts				rts
>b39b	41 62 6f 72 74 22		Name0:	.text 'Abort"'	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=45857					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3a1	46					.byte (('Abort"'[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>b3a2	1c					.byte WordFlags	;wh_Flags
>b3a3	03					.byte 3	;wh_CodeLength
>b3a4	21					  .byte LinkDisplacement	; offset to previous nt
=$b3a5					XtPtr1 ::= *
=45857					WordListLink ::= Nt0 ; remember the nt of this word for later
.b3a5					Abort_Quote:
.b3a5	20 f9 b8	jsr $b8f9			jsr S_Quote		; compile the string literal
.b3a8	a0 b3		ldy #$b3			ldy #>_runtime		; compile JSR runtime, return
.b3aa	a9 af		lda #$af			lda #<_runtime
.b3ac	4c 21 cd	jmp $cd21			jmp Jsr_Comma_YA
=10					CodeLen	.var *-XtPtr1
=$b3af					Here1 = *	; remember here
>b3a3	0a					.byte CodeLen	;patch wh_CodeLength
.b3af					_runtime:
.b3af	b5 28		lda $28,x			lda DStack+4,x
.b3b1	15 29		ora $29,x			ora DStack+5,x
.b3b3	d0 03		bne $b3b8			bne _do_abort	; true?
.b3b5	4c 8b ad	jmp $ad8b			jmp ThreeDrop	; Drop three entries from the Data Stack
.b3b8					_do_abort:
.b3b8	20 d8 cd	jsr $cdd8			jsr Type	; print string
.b3bb	20 69 ab	jsr $ab69			jsr CR		; We follow Gforth in going to a new line
.b3be	a9 fe		lda #$fe			lda #$100+err_AbortQuote
.b3c0	4c 79 b4	jmp $b479			jmp ThrowA
>b3c3	41 62 6f 72 74			Name0:	.text "Abort"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=45896					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3c8	85					.byte (("Abort"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>b3c9	10					.byte WordFlags	;wh_Flags
>b3ca	03					.byte 3	;wh_CodeLength
>b3cb	27					  .byte LinkDisplacement	; offset to previous nt
=$b3cc					XtPtr1 ::= *
=45896					WordListLink ::= Nt0 ; remember the nt of this word for later
.b3cc	a9 ff		lda #$ff	Abort:		lda #$100+err_Abort
.b3ce	4c 79 b4	jmp $b479			jmp ThrowA
=5					CodeLen	.var *-XtPtr1
=$b3d1					Here1 = *	; remember here
>b3ca	05					.byte CodeLen	;patch wh_CodeLength
>b3d1	50 6f 70 41			Name0:	.text "PopA"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=45909					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3d5	24					.byte (("PopA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>b3d6	10					.byte WordFlags	;wh_Flags
>b3d7	03					.byte 3	;wh_CodeLength
>b3d8	0d					  .byte LinkDisplacement	; offset to previous nt
=$b3d9					XtPtr1 ::= *
=45909					WordListLink ::= Nt0 ; remember the nt of this word for later
.b3d9					PopA:
.b3d9	e0 27		cpx #$27		cpx #-2*1+DStack0+1	; far enough below end of data stack (& not negative)?
.b3db	b0 63		bcs $b440		bcs Throw_Stack
.b3dd	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b3df	e8		inx				inx
.b3e0	e8		inx				inx
=8					CodeLen	.var *-XtPtr1
=$b3e1					Here1 = *	; remember here
>b3d7	08					.byte CodeLen	;patch wh_CodeLength
.b3e1	60		rts		                rts
.b3e2					PopA2:
.b3e2	e0 25		cpx #$25		cpx #-2*2+DStack0+1	; far enough below end of data stack (& not negative)?
.b3e4	b0 5a		bcs $b440		bcs Throw_Stack
.b3e6	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b3e8	e8		inx				inx
.b3e9	e8		inx				inx
.b3ea	60		rts		                rts
>b3eb	50 6f 70 59 41			Name0:	.text "PopYA"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=45936					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3f0	25					.byte (("PopYA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>b3f1	10					.byte WordFlags	;wh_Flags
>b3f2	03					.byte 3	;wh_CodeLength
>b3f3	1b					  .byte LinkDisplacement	; offset to previous nt
=$b3f4					XtPtr1 ::= *
=45936					WordListLink ::= Nt0 ; remember the nt of this word for later
.b3f4					PopYA:
.b3f4	e0 27		cpx #$27		cpx #-2*1+DStack0+1	; far enough below end of data stack (& not negative)?
.b3f6	b0 48		bcs $b440		bcs Throw_Stack
.b3f8	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to YA
.b3fa	b4 25		ldy $25,x			ldy DStack+1,x
.b3fc	e8		inx				inx
.b3fd	e8		inx				inx
=10					CodeLen	.var *-XtPtr1
=$b3fe					Here1 = *	; remember here
>b3f2	0a					.byte CodeLen	;patch wh_CodeLength
.b3fe	60		rts				rts
.b3ff					PopTmp1:
.b3ff	e0 27		cpx #$27		cpx #-2*1+DStack0+1	; far enough below end of data stack (& not negative)?
.b401	b0 3d		bcs $b440		bcs Throw_Stack
.b403	b5 24		lda $24,x			lda DStack+0,x	; PopYA
.b405	b4 25		ldy $25,x			ldy DStack+1,x
.b407	e8		inx				inx
.b408	e8		inx				inx
.b409	85 14		sta $14				sta tmp1+0
.b40b	84 15		sty $15				sty tmp1+1
.b40d	60		rts				rts
>b40e	75 6e 64 65 72 66 6c 6f		Name0:	.text "underflow_1"	;  name of word as a string, ending at wh_NameLastChar
>b416	77 5f 31
=11					NameLength = *-Name0
=45977					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b419	2b					.byte (("underflow_1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=41					LinkDisplacement = Nt0-WordListLink
>b41a	10					.byte WordFlags	;wh_Flags
>b41b	03					.byte 3	;wh_CodeLength
>b41c	29					  .byte LinkDisplacement	; offset to previous nt
=$b41d					XtPtr1 ::= *
=45977					WordListLink ::= Nt0 ; remember the nt of this word for later
.b41d					underflow_1:
.b41d	e0 27		cpx #$27		cpx #-2*1+DStack0+1	; far enough below end of data stack (& not negative)?
.b41f	b0 1f		bcs $b440		bcs Throw_Stack
=4					CodeLen	.var *-XtPtr1
=$b421					Here1 = *	; remember here
>b41b	04					.byte CodeLen	;patch wh_CodeLength
.b421	60		rts				rts
>b422	75 6e 64 65 72 66 6c 6f		Name0:	.text "underflow_2"	;  name of word as a string, ending at wh_NameLastChar
>b42a	77 5f 32
=11					NameLength = *-Name0
=45997					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b42d	4b					.byte (("underflow_2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>b42e	10					.byte WordFlags	;wh_Flags
>b42f	03					.byte 3	;wh_CodeLength
>b430	14					  .byte LinkDisplacement	; offset to previous nt
=$b431					XtPtr1 ::= *
=45997					WordListLink ::= Nt0 ; remember the nt of this word for later
.b431					underflow_2:
.b431	e0 25		cpx #$25		cpx #-2*2+DStack0+1	; far enough below end of data stack (& not negative)?
.b433	b0 0b		bcs $b440		bcs Throw_Stack
=4					CodeLen	.var *-XtPtr1
=$b435					Here1 = *	; remember here
>b42f	04					.byte CodeLen	;patch wh_CodeLength
.b435	60		rts		                rts
.b436					underflow_3:
.b436	e0 23		cpx #$23		cpx #-2*3+DStack0+1	; far enough below end of data stack (& not negative)?
.b438	b0 06		bcs $b440		bcs Throw_Stack
.b43a	60		rts		                rts
.b43b					underflow_4:
.b43b	e0 21		cpx #$21		cpx #-2*4+DStack0+1	; far enough below end of data stack (& not negative)?
.b43d	b0 01		bcs $b440		bcs Throw_Stack
.b43f	60		rts		                rts
.b440					Throw_Stack:
.b440	30 04		bmi $b446			bmi _over
.b442	a9 fc		lda #$fc			lda #$100+err_Stack_Underflow
.b444	d0 33		bne $b479			bne ThrowA
.b446	a9 fd		lda #$fd	_over:		lda #$100+err_Stack_Overflow
.b448	d0 2f		bne $b479			bne ThrowA
.b44a					Throw_FPStack:
.b44a	30 04		bmi $b450			bmi _over
.b44c	a9 d3		lda #$d3			lda #$100+err_FPStackUnderflow
.b44e	d0 29		bne $b479			bne ThrowA
.b450	a9 d4		lda #$d4	_over:		lda #$100+err_FPStackOverflow
.b452	d0 25		bne $b479			bne ThrowA
.b454					Throw_FpOutOfRange:
.b454	a9 d5		lda #$d5			lda #$100+err_FpOutOfRange
.b456	d0 21		bne $b479			bne ThrowA
>b458	3f 53 74 61 63 6b		Name0:	.text "?Stack"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=46046					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b45e	66					.byte (("?Stack"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>b45f	10					.byte WordFlags	;wh_Flags
>b460	03					.byte 3	;wh_CodeLength
>b461	31					  .byte LinkDisplacement	; offset to previous nt
=$b462					XtPtr1 ::= *
=46046					WordListLink ::= Nt0 ; remember the nt of this word for later
.b462					QStack:
.b462	e0 29		cpx #$29		cpx #-2*0+DStack0+1	; far enough below end of data stack (& not negative)?
.b464	b0 da		bcs $b440		bcs Throw_Stack
.b466	a4 4c		ldy $4c				ldy FIndex		; check floating point stack
.b468	c0 0b		cpy #$0b			cpy #FDim+1
.b46a	b0 de		bcs $b44a			bcs Throw_FPStack
=10					CodeLen	.var *-XtPtr1
=$b46c					Here1 = *	; remember here
>b460	0a					.byte CodeLen	;patch wh_CodeLength
.b46c	60		rts				rts			; all OK
>b46d	54 68 72 6f 77			Name0:	.text "Throw"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=46066					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b472	e5					.byte (("Throw"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>b473	10					.byte WordFlags	;wh_Flags
>b474	03					.byte 3	;wh_CodeLength
>b475	14					  .byte LinkDisplacement	; offset to previous nt
=$b476					XtPtr1 ::= *
=46066					WordListLink ::= Nt0 ; remember the nt of this word for later
.b476	20 d9 b3	jsr $b3d9	Throw:		jsr PopA		; pop n
.b479	20 a4 b4	jsr $b4a4	ThrowA:		jsr Type_Exception_Text_A ; print the associated error string
.b47c	a2 28		ldx #$28			ldx #DStack0		; reset data stack (in case of underflow)
.b47e					Abort_Core:
.b47e	20 a7 b8	jsr $b8a7			jsr SLiteral_runtime
.b481	4c 87 b4	jmp $b487			  jmp +
>b484	3f 00 20					  .text "?",0," "	; signal an error to the simulator
.b487	20 d8 cd	jsr $cdd8	+		jsr Type
.b48a	20 fe ce	jsr $cefe			jsr R_From		; show return stack TOS
.b48d	20 99 81	jsr $8199			jsr TypeSymbol
.b490	20 19 cf	jsr $cf19			jsr R_Fetch		; show return stack NOS
.b493	20 99 81	jsr $8199			jsr TypeSymbol
.b496	20 69 ab	jsr $ab69			jsr CR
.b499					Abort_Core2:
.b499	a9 08		lda #$08			lda #DoStkDim		; init do stack
.b49b	8d 45 07	sta $0745			sta DoStkIndex
.b49e	20 e7 b4	jsr $b4e7			jsr Empty_Stack		; empty the Data Stack & FP stack
.b4a1	4c f6 b4	jmp $b4f6			jmp Quit		; continue into QUIT.
.b4a4					Type_Exception_Text_A:
.b4a4	85 16		sta $16				sta tmp2+0	; save error code
.b4a6	a9 3f		lda #$3f			lda #<Exception_Text_List
.b4a8	a0 da		ldy #$da			ldy #>Exception_Text_List	; for each table entry
.b4aa	85 18		sta $18				sta tmp3+0
.b4ac	84 19		sty $19				sty tmp3+1
.b4ae	a0 00		ldy #$00	_TestEntry:	ldy #0		;   code match?
.b4b0	b1 18		lda ($18),y			lda (tmp3),y
.b4b2	f0 1a		beq $b4ce			beq _NotFound
.b4b4	c5 16		cmp $16				cmp tmp2+0
.b4b6	f0 11		beq $b4c9			beq _Found
.b4b8	c8		iny		-		iny		;   step to end of entry
.b4b9	b1 18		lda ($18),y			lda (tmp3),y
.b4bb	d0 fb		bne $b4b8			bne -
.b4bd	98		tya				tya		;   step to next entry
.b4be	38		sec				sec
.b4bf	65 18		adc $18				adc tmp3+0
.b4c1	85 18		sta $18				sta tmp3+0
.b4c3	90 e9		bcc $b4ae			bcc _TestEntry
.b4c5	e6 19		inc $19				inc tmp3+1
.b4c7	d0 e5		bne $b4ae			bne _TestEntry
.b4c9					_Found:
.b4c9	a0 01		ldy #$01			ldy #1
.b4cb	4c f9 cd	jmp $cdf9			jmp Print_ASCIIZ_tmp3_no_lf
.b4ce	a0 ff		ldy #$ff	_NotFound:	ldy #$ff		; print code
.b4d0	a5 16		lda $16				lda tmp2+0
.b4d2	20 b3 b7	jsr $b7b3			jsr PushYA
.b4d5	4c cf cb	jmp $cbcf			jmp Dot
=98					CodeLen	.var *-XtPtr1
=$b4d8					Here1 = *	; remember here
>b474	62					.byte CodeLen	;patch wh_CodeLength
>b4d8	45 6d 70 74 79 2d 53 74		Name0:	.text "Empty-Stack"	;  name of word as a string, ending at wh_NameLastChar
>b4e0	61 63 6b
=11					NameLength = *-Name0
=46179					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b4e3	6b					.byte (("Empty-Stack"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=113					LinkDisplacement = Nt0-WordListLink
>b4e4	10					.byte WordFlags	;wh_Flags
>b4e5	03					.byte 3	;wh_CodeLength
>b4e6	71					  .byte LinkDisplacement	; offset to previous nt
=$b4e7					XtPtr1 ::= *
=46179					WordListLink ::= Nt0 ; remember the nt of this word for later
.b4e7	a2 28		ldx #$28	Empty_Stack:	ldx #DStack0	; init data stack
.b4e9	a9 0a		lda #$0a			lda #FDim	; init FP stack
.b4eb	85 4c		sta $4c				sta FIndex
=6					CodeLen	.var *-XtPtr1
=$b4ed					Here1 = *	; remember here
>b4e5	06					.byte CodeLen	;patch wh_CodeLength
.b4ed	60		rts				rts
>b4ee	51 75 69 74			Name0:	.text "Quit"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=46194					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b4f2	84					.byte (("Quit"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>b4f3	10					.byte WordFlags	;wh_Flags
>b4f4	03					.byte 3	;wh_CodeLength
>b4f5	0f					  .byte LinkDisplacement	; offset to previous nt
=$b4f6					XtPtr1 ::= *
=46194					WordListLink ::= Nt0 ; remember the nt of this word for later
.b4f6					Quit:
.b4f6	8a		txa				txa		; Save the DStack that we just defined
.b4f7	a2 ff		ldx #$ff			ldx #rsp0
.b4f9	9a		txs				txs
.b4fa	aa		tax				tax		; Restore the DStack. Dude, seriously.
.b4fb	a9 00		lda #$00			lda #0		; SOURCE-ID= zero (keyboard input)
.b4fd	85 02		sta $02				sta insrc+0
.b4ff	85 03		sta $03				sta insrc+1
.b501	20 44 b7	jsr $b744			jsr Left_Bracket_NoCheck ; switch to interpret state
.b504					_get_line:
.b504	a9 00		lda #$00			lda #<buffer0	; input buffer, this is paranoid
.b506	85 04		sta $04				sta cib+0
.b508	a9 02		lda #$02			lda #>buffer0
.b50a	85 05		sta $05				sta cib+1
.b50c	20 66 c2	jsr $c266			jsr Refill		; ( -- f )
.b50f	b5 24		lda $24,x			lda DStack+0,x
.b511	d0 05		bne $b518			bne +
.b513	a9 6b		lda #$6b			lda #$100+err_Refill	; REFILL returned a FALSE flag, something went wrong
.b515	4c 79 b4	jmp $b479			jmp ThrowA
.b518	e8		inx		+		inx			; drop the flag
.b519	e8		inx				inx
.b51a	20 31 b5	jsr $b531			jsr interpret
.b51d	a5 0a		lda $0a				lda state
.b51f	d0 06		bne $b527			bne _print_compiled
.b521	a9 0b		lda #$0b			lda #<str_ok
.b523	a0 da		ldy #$da			ldy #>str_ok
.b525	d0 04		bne $b52b			bne _print
.b527	a9 0f		lda #$0f	_print_compiled: lda #<str_compiled	; "compile" string
.b529	a0 da		ldy #$da			ldy #>str_compiled
.b52b	20 04 ce	jsr $ce04	_print:		jsr Print_ASCIIZ_YA
.b52e	4c 04 b5	jmp $b504			jmp _get_line
=59					CodeLen	.var *-XtPtr1
=$b531					Here1 = *	; remember here
>b4f4	3b					.byte CodeLen	;patch wh_CodeLength
.b531					Interpret:
.b531					_loop:
.b531	20 62 b4	jsr $b462			jsr QStack		; check stack bounds
.b534	20 71 ba	jsr $ba71			jsr parse_name		; ( "string" -- addr u )
.b537	b5 24		lda $24,x	                lda DStack+0,x		; empty line?
.b539	f0 53		beq $b58e	                beq _line_done
.b53b	20 a4 cc	jsr $cca4			jsr Two_dup		; ( addr u -- addr u addr u )
.b53e	20 5b bc	jsr $bc5b			jsr Find_Name		; ( addr u addr u -- addr u nt|0 )
.b541	b5 25		lda $25,x			lda DStack+1,x		; word found?
.b543	d0 1b		bne $b560			bne _got_name_token
.b545	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.b546	e8		inx		                inx
.b547	20 d1 b0	jsr $b0d1	                jsr Number           ; ( addr u -- u|d )
.b54a	a5 0a		lda $0a		                lda state		; interpreting?
.b54c	f0 e3		beq $b531	                beq _loop		;   we're done
.b54e	a9 20		lda #$20	                lda #$20		; double cell number?
.b550	24 0c		bit $0c		                bit status
.b552	f0 06		beq $b55a	                beq _single_number
.b554	20 4e b8	jsr $b84e			jsr Two_literal		; compile a double number
.b557	4c 31 b5	jmp $b531			jmp _loop
.b55a	20 68 b7	jsr $b768	_single_number:	jsr Literal		; compile a single number
.b55d	4c 31 b5	jmp $b531			jmp _loop
.b560					_got_name_token:
.b560	20 90 c9	jsr $c990			jsr Nip
.b563	20 90 c9	jsr $c990			jsr Nip			; ( nt )
.b566	85 14		sta $14				sta tmp1+0		; save a work copy of nt
.b568	84 15		sty $15				sty tmp1+1
.b56a	a0 81		ldy #$81			ldy #Wh_Flags		; get word flags, we'll need them shortly
.b56c	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b56e	a4 0a		ldy $0a				ldy state		; interpreting or compiling?
.b570	d0 12		bne $b584			bne _compile
.b572	29 04		and #$04			and #CO			; is the word COMPILE-ONLY?
.b574	f0 05		beq $b57b			beq _execute
.b576	a9 f2		lda #$f2			lda #$100+err_CompileOnly ;   complain & quit
.b578	20 79 b4	jsr $b479			jsr ThrowA
.b57b	20 9d bd	jsr $bd9d	_execute:	jsr Name_To_Int		; ( nt -- xt )
.b57e	20 15 ce	jsr $ce15			jsr Execute		; EXECUTE the xt that is TOS
.b581	4c 31 b5	jmp $b531	                jmp _loop
.b584					_compile:
.b584	29 08		and #$08			and #IM			; is the word IMMEDIATE?
.b586	d0 f3		bne $b57b			bne _execute		;   IMMEDIATE word, execute now
.b588	20 b3 b6	jsr $b6b3			jsr Compile_Comma_NT	; Compile the nt into the Dictionary
.b58b	4c 31 b5	jmp $b531			jmp _loop
.b58e					_line_done:
.b58e	e8		inx				inx			; drop stuff from PARSE_NAME
.b58f	e8		inx				inx
.b590	e8		inx				inx
.b591	e8		inx				inx
.b592	60		rts				rts
>b593	49 6d 6d 65 64 69 61 74		Name0:	.text "Immediate"	;  name of word as a string, ending at wh_NameLastChar
>b59b	65
=9					NameLength = *-Name0
=46364					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b59c	a9					.byte (("Immediate"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=170					LinkDisplacement = Nt0-WordListLink
>b59d	10					.byte WordFlags	;wh_Flags
>b59e	03					.byte 3	;wh_CodeLength
>b59f	aa					  .byte LinkDisplacement	; offset to previous nt
=$b5a0					XtPtr1 ::= *
=46364					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5a0	a9 08		lda #$08	Immediate:	lda #IM
.b5a2	48		pha		SetFlag:	pha
.b5a3	20 43 ba	jsr $ba43			jsr current_to_dp
.b5a6	a0 81		ldy #$81			ldy #Wh_Flags
.b5a8	68		pla				pla
.b5a9	11 10		ora ($10),y			ora (dp),y
.b5ab	91 10		sta ($10),y			sta (dp),y
=13					CodeLen	.var *-XtPtr1
=$b5ad					Here1 = *	; remember here
>b59e	0d					.byte CodeLen	;patch wh_CodeLength
.b5ad	60		rts				rts
>b5ae	43 6f 6d 70 69 6c 65 2d		Name0:	.text "Compile-only"	;  name of word as a string, ending at wh_NameLastChar
>b5b6	6f 6e 6c 79
=12					NameLength = *-Name0
=46394					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b5ba	2c					.byte (("Compile-only"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>b5bb	10					.byte WordFlags	;wh_Flags
>b5bc	03					.byte 3	;wh_CodeLength
>b5bd	1e					  .byte LinkDisplacement	; offset to previous nt
=$b5be					XtPtr1 ::= *
=46394					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5be	a9 04		lda #$04	Compile_Only:	lda #CO
.b5c0	d0 e0		bne $b5a2			bne SetFlag
=4					CodeLen	.var *-XtPtr1
=$b5c2					Here1 = *	; remember here
>b5bc	04					.byte CodeLen	;patch wh_CodeLength
>b5c2	6e 65 76 65 72 2d 6e 61		Name0:	.text "never-native"	;  name of word as a string, ending at wh_NameLastChar
>b5ca	74 69 76 65
=12					NameLength = *-Name0
=46414					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b5ce	ac					.byte (("never-native"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>b5cf	10					.byte WordFlags	;wh_Flags
>b5d0	03					.byte 3	;wh_CodeLength
>b5d1	14					  .byte LinkDisplacement	; offset to previous nt
=$b5d2					XtPtr1 ::= *
=46414					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5d2	20 43 ba	jsr $ba43	Never_Native:	jsr current_to_dp
.b5d5	a0 81		ldy #$81			ldy #Wh_Flags
.b5d7	b1 10		lda ($10),y			lda (dp),y
.b5d9	09 10		ora #$10			ora #NN		; set NN flag
.b5db	29 df		and #$df			and #$ff-AN	; clear AN flag
.b5dd	91 10		sta ($10),y			sta (dp),y
=13					CodeLen	.var *-XtPtr1
=$b5df					Here1 = *	; remember here
>b5d0	0d					.byte CodeLen	;patch wh_CodeLength
.b5df	60		rts				rts
>b5e0	61 6c 77 61 79 73 2d 6e		Name0:	.text "always-native"	;  name of word as a string, ending at wh_NameLastChar
>b5e8	61 74 69 76 65
=13					NameLength = *-Name0
=46445					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b5ed	ad					.byte (("always-native"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>b5ee	10					.byte WordFlags	;wh_Flags
>b5ef	03					.byte 3	;wh_CodeLength
>b5f0	1f					  .byte LinkDisplacement	; offset to previous nt
=$b5f1					XtPtr1 ::= *
=46445					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5f1	20 43 ba	jsr $ba43	Always_Native:	jsr current_to_dp
.b5f4	a0 81		ldy #$81			ldy #Wh_Flags
.b5f6	b1 10		lda ($10),y			lda (dp),y
.b5f8	09 20		ora #$20			ora #AN		; Make sure AN flag is set
.b5fa	29 ef		and #$ef			and #$ff-NN	; and NN flag is clear.
.b5fc	91 10		sta ($10),y			sta (dp),y
=13					CodeLen	.var *-XtPtr1
=$b5fe					Here1 = *	; remember here
>b5ef	0d					.byte CodeLen	;patch wh_CodeLength
.b5fe	60		rts				rts
>b5ff	61 6c 6c 6f 77 2d 6e 61		Name0:	.text "allow-native"	;  name of word as a string, ending at wh_NameLastChar
>b607	74 69 76 65
=12					NameLength = *-Name0
=46475					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b60b	ac					.byte (("allow-native"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>b60c	10					.byte WordFlags	;wh_Flags
>b60d	03					.byte 3	;wh_CodeLength
>b60e	1e					  .byte LinkDisplacement	; offset to previous nt
=$b60f					XtPtr1 ::= *
=46475					WordListLink ::= Nt0 ; remember the nt of this word for later
.b60f	20 43 ba	jsr $ba43	Allow_Native:	jsr current_to_dp
.b612	a0 81		ldy #$81			ldy #Wh_Flags	; offset for status byte
.b614	b1 10		lda ($10),y			lda (dp),y
.b616	29 cf		and #$cf			and #$ff-NN-AN	; AN and NN flag is clear.
.b618	91 10		sta ($10),y			sta (dp),y
=11					CodeLen	.var *-XtPtr1
=$b61a					Here1 = *	; remember here
>b60d	0b					.byte CodeLen	;patch wh_CodeLength
.b61a	60		rts				rts
>b61b	6e 63 2d 6c 69 6d 69 74		Name0:	.text "nc-limit"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=46499					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b623	88					.byte (("nc-limit"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>b624	10					.byte WordFlags	;wh_Flags
>b625	03					.byte 3	;wh_CodeLength
>b626	18					  .byte LinkDisplacement	; offset to previous nt
=$b627					XtPtr1 ::= *
=46499					WordListLink ::= Nt0 ; remember the nt of this word for later
.b627	a0 03		ldy #$03			ldy #>nc_limit
.b629	a9 02		lda #$02			lda #<nc_limit
.b62b	4c b3 b7	jmp $b7b3			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$b62e					Here1 = *	; remember here
>b625	07					.byte CodeLen	;patch wh_CodeLength
>b62e	73 74 72 69 70 2d 75 6e		Name0:	.text "strip-underflow"	;  name of word as a string, ending at wh_NameLastChar
>b636	64 65 72 66 6c 6f 77
=15					NameLength = *-Name0
=46525					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b63d	ef					.byte (("strip-underflow"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>b63e	10					.byte WordFlags	;wh_Flags
>b63f	03					.byte 3	;wh_CodeLength
>b640	1a					  .byte LinkDisplacement	; offset to previous nt
=$b641					XtPtr1 ::= *
=46525					WordListLink ::= Nt0 ; remember the nt of this word for later
.b641	a0 03		ldy #$03			ldy #>uf_strip
.b643	a9 04		lda #$04			lda #<uf_strip
.b645	4c b3 b7	jmp $b7b3			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$b648					Here1 = *	; remember here
>b63f	07					.byte CodeLen	;patch wh_CodeLength
>b648	70 6f 73 74 70 6f 6e 65		Name0:	.text "postpone"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=46544					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b650	a8					.byte (("postpone"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>b651	1c					.byte WordFlags	;wh_Flags
>b652	03					.byte 3	;wh_CodeLength
>b653	13					  .byte LinkDisplacement	; offset to previous nt
=$b654					XtPtr1 ::= *
=46544					WordListLink ::= Nt0 ; remember the nt of this word for later
.b654					Postpone:
.b654	20 a2 ba	jsr $baa2			jsr parse_name_check	; get name string
.b657	20 89 bc	jsr $bc89			jsr find_name_check	; lookup name
.b65a	a0 81		ldy #$81			ldy #Wh_Flags		; IMMEDIATE word?
.b65c	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b65e	29 08		and #$08			and #IM
.b660	f0 03		beq $b665			beq _not_immediate
.b662	4c b3 b6	jmp $b6b3			jmp Compile_Comma_NT	; compile it as if it was not IMMEDIATE
.b665					_not_immediate:
.b665	20 9a b7	jsr $b79a			jsr LDYA_Immed_Comma		; compile LDA #; LDY # with nt of the word
.b668	a0 b6		ldy #$b6			ldy #>Compile_Comma_NT_YA	; compile COMPILE,
.b66a	a9 b6		lda #$b6			lda #<Compile_Comma_NT_YA
.b66c	4c 21 cd	jmp $cd21			jmp Jsr_Comma_YA
=27					CodeLen	.var *-XtPtr1
=$b66f					Here1 = *	; remember here
>b652	1b					.byte CodeLen	;patch wh_CodeLength
>b66f	52 65 63 75 72 73 65		Name0:	.text "Recurse"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=46582					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b676	a7					.byte (("Recurse"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>b677	1c					.byte WordFlags	;wh_Flags
>b678	03					.byte 3	;wh_CodeLength
>b679	26					  .byte LinkDisplacement	; offset to previous nt
=$b67a					XtPtr1 ::= *
=46582					WordListLink ::= Nt0 ; remember the nt of this word for later
.b67a					Recurse:
.b67a	a5 0e		lda $0e				lda WorkWord+0
.b67c	a4 0f		ldy $0f				ldy WorkWord+1
.b67e	20 b3 b7	jsr $b7b3			jsr PushYA
.b681	24 0c		bit $0c				bit status		; does WorkWord contain xt or nt?
.b683	50 10		bvc $b695			bvc _xt
.b685	a0 81		ldy #$81			ldy #wh_Flags		; is it Always-Native ?
.b687	b1 0e		lda ($0e),y			lda (WorkWord),y
.b689	29 20		and #$20			and #AN
.b68b	f0 05		beq $b692			beq _NotAn
.b68d	a9 e5		lda #$e5			lda #$100+err_InvalidRecursion
.b68f	20 79 b4	jsr $b479			jsr ThrowA
.b692					_NotAN:
.b692	20 9d bd	jsr $bd9d			jsr Name_To_Int		; convert nt to xt
.b695					_xt:
.b695	4c 1e cd	jmp $cd1e			jmp Jsr_Comma		; compile JSR xt, return
=30					CodeLen	.var *-XtPtr1
=$b698					Here1 = *	; remember here
>b678	1e					.byte CodeLen	;patch wh_CodeLength
>b698	43 6f 6d 70 69 6c 65 2c		Name0:	.text "Compile,"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=46624					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b6a0	88					.byte (("Compile,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>b6a1	10					.byte WordFlags	;wh_Flags
>b6a2	03					.byte 3	;wh_CodeLength
>b6a3	2a					  .byte LinkDisplacement	; offset to previous nt
=$b6a4					XtPtr1 ::= *
=46624					WordListLink ::= Nt0 ; remember the nt of this word for later
.b6a4					Compile_Comma:
.b6a4	20 56 cf	jsr $cf56			jsr Dup			; ( xt xt )
.b6a7	20 4c bd	jsr $bd4c			jsr Int_To_Name		; ( xt nt )	does a dictionary search, tmp1=nt
.b6aa	e8		inx				inx			; drop nt
.b6ab	e8		inx				inx
.b6ac	a5 15		lda $15				lda tmp1+1
.b6ae	d0 0a		bne $b6ba			bne Compile_Comma_NT_Tmp1
.b6b0	4c 1e cd	jmp $cd1e			jmp Jsr_Comma		; compile jsr, return
.b6b3					Compile_Comma_NT:
.b6b3	20 f4 b3	jsr $b3f4			jsr PopYA
.b6b6					Compile_Comma_NT_YA:
.b6b6	85 14		sta $14				sta tmp1+0		; tmp1= nt
.b6b8	84 15		sty $15				sty tmp1+1
.b6ba					Compile_Comma_NT_Tmp1:
.b6ba	20 aa bd	jsr $bdaa			jsr NameToIntTmp	; tmp2= xt
.b6bd	a5 16		lda $16				lda tmp2+0
.b6bf	a4 17		ldy $17				ldy tmp2+1
.b6c1	20 b3 b7	jsr $b7b3			jsr PushYA		; ( xt )
.b6c4	a0 82		ldy #$82			ldy #wh_CodeLength
.b6c6	b1 14		lda ($14),y			lda (tmp1),y
.b6c8	20 e2 b7	jsr $b7e2			jsr PushZA		; ( xt u )
.b6cb	a0 81		ldy #$81			ldy #Wh_Flags		; save word flags
.b6cd	b1 14		lda ($14),y			lda (tmp1),y
.b6cf	29 30		and #$30			and #ST
.b6d1	c9 30		cmp #$30			cmp #ST			; inline & strip RTS addr save/restore?
.b6d3	f0 2d		beq $b702			beq _strip
.b6d5	c9 10		cmp #$10			cmp #NN			; Never Native word?
.b6d7	f0 12		beq $b6eb			beq _jsr_opt
.b6d9	c9 20		cmp #$20			cmp #AN			; Always Native word?
.b6db	f0 2f		beq $b70c			beq _inline
.b6dd	ad 03 03	lda $0303			lda nc_limit+1		; wordsize<=nc_limit?
.b6e0	d0 2a		bne $b70c			bne _inline
.b6e2	ad 02 03	lda $0302			lda nc_limit+0
.b6e5	d5 24		cmp $24,x			cmp DStack+0,x
.b6e7	f0 02		beq $b6eb			beq _jsr_opt
.b6e9	b0 21		bcs $b70c			bcs _inline
.b6eb					_jsr_opt:
.b6eb	ad 04 03	lda $0304			lda uf_strip
.b6ee	f0 0d		beq $b6fd			beq _jsr
.b6f0	a0 81		ldy #$81			ldy #wh_Flags		; underflow strip & not stack strip?
.b6f2	b1 14		lda ($14),y			lda (tmp1),y
.b6f4	29 40		and #$40			and #UF
.b6f6	f0 05		beq $b6fd			beq _jsr
.b6f8	a9 03		lda #$03			lda #3			;   strip the underflow check
.b6fa	20 16 ca	jsr $ca16			jsr Nos_Plus_A
.b6fd					_jsr:
.b6fd	e8		inx				inx			; Drop len
.b6fe	e8		inx				inx
.b6ff	4c 1e cd	jmp $cd1e			jmp Jsr_Comma		; compile jsr, return
.b702					_strip:
.b702	a9 06		lda #$06			lda #6			;   Adjust xt: skip over the leading RTS addr save
.b704	20 16 ca	jsr $ca16			jsr Nos_Plus_A
.b707	a9 f4		lda #$f4			lda #$100-12		;   Adjust u: omit the leading RTS addr save & trailing RTS addr restore
.b709	20 4a ca	jsr $ca4a			jsr minus_a
.b70c					_inline:
.b70c	ad 04 03	lda $0304			lda uf_strip+0		; user wants underflow stripping?
.b70f	f0 12		beq $b723			beq +
.b711	a0 81		ldy #$81			ldy #wh_Flags		; this word contains underflow checking?
.b713	b1 14		lda ($14),y			lda (tmp1),y
.b715	29 40		and #$40			and #UF
.b717	f0 0a		beq $b723			beq +
.b719	a9 03		lda #$03			lda #3			;   Adjust xt: Start after underflow check
.b71b	20 16 ca	jsr $ca16			jsr Nos_Plus_A
.b71e	a9 fd		lda #$fd			lda #$100-3		;   Adjust u: omit underflow check
.b720	20 4a ca	jsr $ca4a			jsr minus_a
.b723					+
.b723	b5 24		lda $24,x			lda DStack+0,x		; compile code bytes
.b725	f0 0c		beq $b733			beq _copy_end
.b727	a1 26		lda ($26,x)	_copy_loop:	lda (DStack+2,x)
.b729	20 e7 cc	jsr $cce7			jsr C_Comma_A
.b72c	20 64 ca	jsr $ca64			jsr NOS_One_Plus
.b72f	d6 24		dec $24,x			dec DStack+0,x
.b731	d0 f4		bne $b727			bne _copy_loop
.b733					_copy_end:
.b733	4c 36 c5	jmp $c536			jmp Two_drop
=146					CodeLen	.var *-XtPtr1
=$b736					Here1 = *	; remember here
>b6a2	92					.byte CodeLen	;patch wh_CodeLength
>b736	5b				Name0:	.text "["	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=46775					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b737	61					.byte (("["[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=151					LinkDisplacement = Nt0-WordListLink
>b738	1c					.byte WordFlags	;wh_Flags
>b739	03					.byte 3	;wh_CodeLength
>b73a	97					  .byte LinkDisplacement	; offset to previous nt
=$b73b					XtPtr1 ::= *
=46775					WordListLink ::= Nt0 ; remember the nt of this word for later
.b73b	a5 0a		lda $0a		Left_Bracket:	lda state+0		; Already in the interpret state?
.b73d	d0 05		bne $b744			bne Left_Bracket_NoCheck
.b73f	a9 69		lda #$69			lda #$100+err_AlreadyInterpreting
.b741	4c 79 b4	jmp $b479			jmp ThrowA
.b744					Left_Bracket_NoCheck:
.b744	a9 00		lda #$00			lda #0
.b746	85 0a		sta $0a		Left_Bracket_3:	sta state+0
.b748	85 0b		sta $0b				sta state+1
=15					CodeLen	.var *-XtPtr1
=$b74a					Here1 = *	; remember here
>b739	0f					.byte CodeLen	;patch wh_CodeLength
.b74a	60		rts				rts
>b74b	5d				Name0:	.text "]"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=46796					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b74c	a1					.byte (("]"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>b74d	18					.byte WordFlags	;wh_Flags
>b74e	03					.byte 3	;wh_CodeLength
>b74f	15					  .byte LinkDisplacement	; offset to previous nt
=$b750					XtPtr1 ::= *
=46796					WordListLink ::= Nt0 ; remember the nt of this word for later
.b750					Right_Bracket:
.b750	a5 0a		lda $0a				lda state+0		; Already in the compile state?
.b752	f0 05		beq $b759			beq +
.b754	a9 68		lda #$68			lda #$100+err_AlreadyCompiling ;   complain and quit
.b756	4c 79 b4	jmp $b479			jmp ThrowA
.b759					+
.b759	a9 ff		lda #$ff			lda #$FF
.b75b	d0 e9		bne $b746			bne Left_Bracket_3
=13					CodeLen	.var *-XtPtr1
=$b75d					Here1 = *	; remember here
>b74e	0d					.byte CodeLen	;patch wh_CodeLength
>b75d	4c 69 74 65 72 61 6c		Name0:	.text "Literal"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=46820					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b764	87					.byte (("Literal"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=92					WordFlags ::= IM+CO+UF+NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>b765	5c					.byte WordFlags	;wh_Flags
>b766	03					.byte 3	;wh_CodeLength
>b767	18					  .byte LinkDisplacement	; offset to previous nt
=$b768					XtPtr1 ::= *
=46820					WordListLink ::= Nt0 ; remember the nt of this word for later
.b768					Literal:
.b768	20 1d b4	jsr $b41d			jsr underflow_1
.b76b	20 71 b7	jsr $b771			jsr LitCompile		; compile load regs, choose a runtime routine
.b76e	4c b6 b6	jmp $b6b6			jmp Compile_Comma_NT_YA ; compile JSR runtime
=9					CodeLen	.var *-XtPtr1
=$b771					Here1 = *	; remember here
>b766	09					.byte CodeLen	;patch wh_CodeLength
.b771					LitCompile:
.b771	b5 25		lda $25,x			lda DStack+1,x		; hi byte zero?
.b773	f0 08		beq $b77d			beq _ZByte
.b775	20 9a b7	jsr $b79a			jsr ldya_immed_comma	; compile "ldy #; lda #" using TOS
.b778	a9 2f		lda #$2f			lda #<(PushYA-wh_LinkNt-1) ; prepare for Compile_Comma_NT_YA or Jmp_Comma_NT_YA
.b77a	a0 b7		ldy #$b7			ldy #>(PushYA-wh_LinkNt-1)
.b77c	60		rts				rts
.b77d					_ZByte:
.b77d	b4 24		ldy $24,x			ldy DStack+0,x		; is it 0 ?
.b77f	f0 08		beq $b789			beq _zero
.b781	20 a1 b7	jsr $b7a1			jsr lda_immed_comma	; compile "lda #" using TOS
.b784	a9 5e		lda #$5e			lda #<(PushZA-wh_LinkNt-1) ; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b786	a0 b7		ldy #$b7			ldy #>(PushZA-wh_LinkNt-1)
.b788	60		rts				rts
.b789	e8		inx		_zero:		inx			; drop
.b78a	e8		inx				inx
.b78b	a9 6c		lda #$6c			lda #<(Zero-wh_LinkNt-1)	; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b78d	a0 b7		ldy #$b7			ldy #>(Zero-wh_LinkNt-1)
.b78f	60		rts				rts
>b790	4c 44 59 41 23 2c		Name0:	.text "LDYA#,"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=46870					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b796	86					.byte (("LDYA#,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=50					LinkDisplacement = Nt0-WordListLink
>b797	10					.byte WordFlags	;wh_Flags
>b798	03					.byte 3	;wh_CodeLength
>b799	32					  .byte LinkDisplacement	; offset to previous nt
=$b79a					XtPtr1 ::= *
=46870					WordListLink ::= Nt0 ; remember the nt of this word for later
.b79a					ldya_immed_comma:
.b79a	a9 a0		lda #$a0			lda #$a0		; ldy #
.b79c	b4 25		ldy $25,x			ldy DStack+1,x
.b79e	20 fe cc	jsr $ccfe			jsr Comma_YA
.b7a1					lda_immed_comma:
.b7a1	a9 a9		lda #$a9			lda #$a9		; lda #
.b7a3	20 e7 cc	jsr $cce7			jsr C_Comma_A
.b7a6	4c e4 cc	jmp $cce4			jmp C_Comma
=15					CodeLen	.var *-XtPtr1
=$b7a9					Here1 = *	; remember here
>b798	0f					.byte CodeLen	;patch wh_CodeLength
>b7a9	50 75 73 68 59 41		Name0:	.text "PushYA"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=46895					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7af	26					.byte (("PushYA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>b7b0	00					.byte WordFlags	;wh_Flags
>b7b1	03					.byte 3	;wh_CodeLength
>b7b2	19					  .byte LinkDisplacement	; offset to previous nt
=$b7b3					XtPtr1 ::= *
=46895					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7b3	ca		dex		PushYA:		dex
.b7b4	ca		dex				dex
.b7b5	95 24		sta $24,x			sta DStack+0,x
.b7b7	94 25		sty $25,x			sty DStack+1,x
=6					CodeLen	.var *-XtPtr1
=$b7b9					Here1 = *	; remember here
>b7b1	06					.byte CodeLen	;patch wh_CodeLength
.b7b9	60		rts				rts
>b7ba	54 72 75 65			Name0:	.text "True"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=46910					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7be	a4					.byte (("True"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>b7bf	00					.byte WordFlags	;wh_Flags
>b7c0	03					.byte 3	;wh_CodeLength
>b7c1	0f					  .byte LinkDisplacement	; offset to previous nt
=$b7c2					XtPtr1 ::= *
=46910					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7c2	a9 ff		lda #$ff	True:		lda #$FF
.b7c4	ca		dex		PushAA:		dex
.b7c5	ca		dex				dex
.b7c6	95 24		sta $24,x			sta DStack+0,x
.b7c8	95 25		sta $25,x			sta DStack+1,x
=8					CodeLen	.var *-XtPtr1
=$b7ca					Here1 = *	; remember here
>b7c0	08					.byte CodeLen	;patch wh_CodeLength
.b7ca	60		rts				rts
>b7cb	46 61 6c 73 65			Name0:	.text "False"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=46928					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7d0	a5					.byte (("False"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>b7d1	10					.byte WordFlags	;wh_Flags
>b7d2	03					.byte 3	;wh_CodeLength
>b7d3	12					  .byte LinkDisplacement	; offset to previous nt
=$b7d4					XtPtr1 ::= *
=46928					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7d4	a9 00		lda #$00	False:		lda #0
.b7d6	f0 0a		beq $b7e2			beq PushZA
=4					CodeLen	.var *-XtPtr1
=$b7d8					Here1 = *	; remember here
>b7d2	04					.byte CodeLen	;patch wh_CodeLength
>b7d8	50 75 73 68 5a 41		Name0:	.text "PushZA"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=46942					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7de	26					.byte (("PushZA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>b7df	00					.byte WordFlags	;wh_Flags
>b7e0	03					.byte 3	;wh_CodeLength
>b7e1	0e					  .byte LinkDisplacement	; offset to previous nt
=$b7e2					XtPtr1 ::= *
=46942					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7e2	ca		dex		PushZA:		dex
.b7e3	ca		dex				dex
.b7e4	95 24		sta $24,x			sta DStack+0,x
.b7e6	a9 00		lda #$00			lda #0
.b7e8	95 25		sta $25,x			sta DStack+1,x
=8					CodeLen	.var *-XtPtr1
=$b7ea					Here1 = *	; remember here
>b7e0	08					.byte CodeLen	;patch wh_CodeLength
.b7ea	60		rts				rts
>b7eb	30				Name0:	.text "0"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=46956					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7ec	01					.byte (("0"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>b7ed	10					.byte WordFlags	;wh_Flags
>b7ee	03					.byte 3	;wh_CodeLength
>b7ef	0e					  .byte LinkDisplacement	; offset to previous nt
=$b7f0					XtPtr1 ::= *
=46956					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7f0	a9 00		lda #$00	Zero:		lda #0
.b7f2	f0 ee		beq $b7e2			beq PushZA
=4					CodeLen	.var *-XtPtr1
=$b7f4					Here1 = *	; remember here
>b7ee	04					.byte CodeLen	;patch wh_CodeLength
>b7f4	31				Name0:	.text "1"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=46965					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7f5	21					.byte (("1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>b7f6	10					.byte WordFlags	;wh_Flags
>b7f7	03					.byte 3	;wh_CodeLength
>b7f8	09					  .byte LinkDisplacement	; offset to previous nt
=$b7f9					XtPtr1 ::= *
=46965					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7f9	a9 01		lda #$01	One:		lda #1
.b7fb	d0 e5		bne $b7e2			bne PushZA
=4					CodeLen	.var *-XtPtr1
=$b7fd					Here1 = *	; remember here
>b7f7	04					.byte CodeLen	;patch wh_CodeLength
>b7fd	32				Name0:	.text "2"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=46974					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7fe	41					.byte (("2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>b7ff	10					.byte WordFlags	;wh_Flags
>b800	03					.byte 3	;wh_CodeLength
>b801	09					  .byte LinkDisplacement	; offset to previous nt
=$b802					XtPtr1 ::= *
=46974					WordListLink ::= Nt0 ; remember the nt of this word for later
.b802	a9 02		lda #$02	Two:		lda #2
.b804	d0 dc		bne $b7e2			bne PushZA
=4					CodeLen	.var *-XtPtr1
=$b806					Here1 = *	; remember here
>b800	04					.byte CodeLen	;patch wh_CodeLength
>b806	42 6c				Name0:	.text "Bl"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=46984					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b808	82					.byte (("Bl"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>b809	10					.byte WordFlags	;wh_Flags
>b80a	03					.byte 3	;wh_CodeLength
>b80b	0a					  .byte LinkDisplacement	; offset to previous nt
=$b80c					XtPtr1 ::= *
=46984					WordListLink ::= Nt0 ; remember the nt of this word for later
.b80c	a9 20		lda #$20	Bl:		lda #AscSP
.b80e	d0 d2		bne $b7e2			bne PushZA
=4					CodeLen	.var *-XtPtr1
=$b810					Here1 = *	; remember here
>b80a	04					.byte CodeLen	;patch wh_CodeLength
>b810	3e 49 6e			Name0:	.text ">In"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=46995					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b813	c3					.byte ((">In"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>b814	10					.byte WordFlags	;wh_Flags
>b815	03					.byte 3	;wh_CodeLength
>b816	0b					  .byte LinkDisplacement	; offset to previous nt
=$b817					XtPtr1 ::= *
=46995					WordListLink ::= Nt0 ; remember the nt of this word for later
.b817	a9 08		lda #$08			lda #ToIn
.b819	4c e2 b7	jmp $b7e2			jmp PushZA	; jmp to be a recognizable constant
=5					CodeLen	.var *-XtPtr1
=$b81c					Here1 = *	; remember here
>b815	05					.byte CodeLen	;patch wh_CodeLength
>b81c	53 74 61 74 65			Name0:	.text "State"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=47009					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b821	a5					.byte (("State"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>b822	10					.byte WordFlags	;wh_Flags
>b823	03					.byte 3	;wh_CodeLength
>b824	0e					  .byte LinkDisplacement	; offset to previous nt
=$b825					XtPtr1 ::= *
=47009					WordListLink ::= Nt0 ; remember the nt of this word for later
.b825	a9 0a		lda #$0a			lda #state
.b827	4c e2 b7	jmp $b7e2			jmp PushZA	; jmp to be a recognizable constant
=5					CodeLen	.var *-XtPtr1
=$b82a					Here1 = *	; remember here
>b823	05					.byte CodeLen	;patch wh_CodeLength
>b82a	64 70				Name0:	.text "dp"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=47020					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b82c	02					.byte (("dp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>b82d	10					.byte WordFlags	;wh_Flags
>b82e	03					.byte 3	;wh_CodeLength
>b82f	0b					  .byte LinkDisplacement	; offset to previous nt
=$b830					XtPtr1 ::= *
=47020					WordListLink ::= Nt0 ; remember the nt of this word for later
.b830	a9 10		lda #$10			lda #dp
.b832	4c e2 b7	jmp $b7e2			jmp PushZA	; jmp to be a recognizable constant
=5					CodeLen	.var *-XtPtr1
=$b835					Here1 = *	; remember here
>b82e	05					.byte CodeLen	;patch wh_CodeLength
>b835	54 6d 70 31			Name0:	.text "Tmp1"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=47033					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b839	24					.byte (("Tmp1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>b83a	10					.byte WordFlags	;wh_Flags
>b83b	03					.byte 3	;wh_CodeLength
>b83c	0d					  .byte LinkDisplacement	; offset to previous nt
=$b83d					XtPtr1 ::= *
=47033					WordListLink ::= Nt0 ; remember the nt of this word for later
.b83d	a9 14		lda #$14			lda #tmp1
.b83f	4c e2 b7	jmp $b7e2			jmp PushZA	; jmp to be a recognizable constant
=5					CodeLen	.var *-XtPtr1
=$b842					Here1 = *	; remember here
>b83b	05					.byte CodeLen	;patch wh_CodeLength
>b842	32 4c 69 74 65 72 61 6c		Name0:	.text "2Literal"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=47050					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b84a	88					.byte (("2Literal"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=88					WordFlags ::= UF+IM+NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>b84b	58					.byte WordFlags	;wh_Flags
>b84c	03					.byte 3	;wh_CodeLength
>b84d	11					  .byte LinkDisplacement	; offset to previous nt
=$b84e					XtPtr1 ::= *
=47050					WordListLink ::= Nt0 ; remember the nt of this word for later
.b84e					Two_literal:
.b84e	20 31 b4	jsr $b431			jsr underflow_2 ; check double number
.b851	20 73 cf	jsr $cf73			jsr Swap
.b854	20 68 b7	jsr $b768			jsr Literal	; do lo cell
.b857	4c 68 b7	jmp $b768			jmp Literal	; do hi cell
=12					CodeLen	.var *-XtPtr1
=$b85a					Here1 = *	; remember here
>b84c	0c					.byte CodeLen	;patch wh_CodeLength
>b85a	53 4c 69 74 65 72 61 6c		Name0:	.text "SLiteral"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=47074					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b862	88					.byte (("SLiteral"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=92					WordFlags ::= CO+IM+UF+NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>b863	5c					.byte WordFlags	;wh_Flags
>b864	03					.byte 3	;wh_CodeLength
>b865	18					  .byte LinkDisplacement	; offset to previous nt
=$b866					XtPtr1 ::= *
=47074					WordListLink ::= Nt0 ; remember the nt of this word for later
.b866					SLiteral:
.b866	20 31 b4	jsr $b431			jsr underflow_2
.b869	20 89 b8	jsr $b889			jsr SLiteral_Start	; compile header
.b86c	4c 7d b8	jmp $b87d			jmp _Move_Test
.b86f	a1 28		lda ($28,x)	_Move_Loop:	lda (DStack+4,x)
.b871	20 e7 cc	jsr $cce7			jsr C_Comma_A
.b874	f6 28		inc $28,x			inc DStack+4,x
.b876	d0 02		bne $b87a			bne +
.b878	f6 29		inc $29,x			inc DStack+5,x
.b87a					+
.b87a	20 41 ca	jsr $ca41			jsr NOS_One_Minus
.b87d	b5 26		lda $26,x	_Move_Test:	lda DStack+2,x
.b87f	15 27		ora $27,x			ora DStack+3,x
.b881	d0 ec		bne $b86f			bne _Move_Loop
.b883	20 96 b8	jsr $b896			jsr SLiteral_End
.b886	4c 36 c5	jmp $c536			jmp Two_Drop		; clean up and leave
=35					CodeLen	.var *-XtPtr1
=$b889					Here1 = *	; remember here
>b864	23					.byte CodeLen	;patch wh_CodeLength
.b889					SLiteral_Start:
.b889	a9 a7		lda #$a7			lda #<SLiteral_runtime	; compile JSR SLiteral_Runtime
.b88b	a0 b8		ldy #$b8			ldy #>SLiteral_runtime
.b88d	20 21 cd	jsr $cd21			jsr Jsr_Comma_YA
.b890	20 28 ca	jsr $ca28			jsr Here		; push addr of start of JMP
.b893	4c 37 cd	jmp $cd37			jmp Jmp_Comma_YA	; compile JMP around string (dummy addr)
.b896					SLiteral_End:
.b896	20 5a ca	jsr $ca5a			jsr One_Plus
.b899	a5 00		lda $00				lda cp+0		; Update the address of the jump to HERE.
.b89b	81 24		sta ($24,x)			sta (DStack+0,x)
.b89d	20 5a ca	jsr $ca5a			jsr One_Plus
.b8a0	a5 01		lda $01				lda cp+1
.b8a2	81 24		sta ($24,x)			sta (DStack+0,x)
.b8a4	e8		inx				inx			; drop herej
.b8a5	e8		inx				inx
.b8a6	60		rts				rts
.b8a7					SLiteral_Runtime:
.b8a7	86 16		stx $16				stx tmp2	; save data stack index
.b8a9	ba		tsx				tsx
.b8aa	bd 01 01	lda $0101,x	SLiteral_Run2:	lda RStack+1,x	; tmp1= RTS addr
.b8ad	85 14		sta $14				sta tmp1+0
.b8af	bd 02 01	lda $0102,x			lda RStack+2,x
.b8b2	85 15		sta $15				sta tmp1+1
.b8b4	a6 16		ldx $16				ldx tmp2	; restore data stack index
.b8b6	ca		dex				dex		; push string addr
.b8b7	ca		dex				dex
.b8b8	18		clc				clc
.b8b9	a5 14		lda $14				lda tmp1+0
.b8bb	69 04		adc #$04			adc #3+1	;   just after the following JMP + correcting for JSR behavior
.b8bd	95 24		sta $24,x			sta DStack+0,x
.b8bf	a5 15		lda $15				lda tmp1+1
.b8c1	69 00		adc #$00			adc #0
.b8c3	95 25		sta $25,x			sta DStack+1,x
.b8c5	ca		dex				dex		; push string length
.b8c6	ca		dex				dex
.b8c7	38		sec				sec
.b8c8	a0 02		ldy #$02			ldy #2		;   = string_end - string_addr
.b8ca	b1 14		lda ($14),y			lda (tmp1),y
.b8cc	f5 26		sbc $26,x			sbc DStack+2,x
.b8ce	95 24		sta $24,x			sta DStack+0,x
.b8d0	c8		iny				iny
.b8d1	b1 14		lda ($14),y			lda (tmp1),y
.b8d3	f5 27		sbc $27,x			sbc DStack+3,x
.b8d5	95 25		sta $25,x			sta DStack+1,x
.b8d7	60		rts				rts
>b8d8	2e 22				Name0:	.text '."'	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=47194					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b8da	42					.byte (('."'[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=120					LinkDisplacement = Nt0-WordListLink
>b8db	1c					.byte WordFlags	;wh_Flags
>b8dc	03					.byte 3	;wh_CodeLength
>b8dd	78					  .byte LinkDisplacement	; offset to previous nt
=$b8de					XtPtr1 ::= *
=47194					WordListLink ::= Nt0 ; remember the nt of this word for later
.b8de					Dot_quote:
.b8de	20 f9 b8	jsr $b8f9			jsr S_Quote		; compile the string literal
.b8e1	a0 cd		ldy #$cd			ldy #>Type		; compile: print string
.b8e3	a9 d8		lda #$d8			lda #<Type
.b8e5	4c 21 cd	jmp $cd21			jmp Jsr_Comma_YA
=10					CodeLen	.var *-XtPtr1
=$b8e8					Here1 = *	; remember here
>b8dc	0a					.byte CodeLen	;patch wh_CodeLength
>b8e8	53 5c 22			Name0:	.text 'S\"'	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=47211					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b8eb	43					.byte (('S\"'[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>b8ec	18					.byte WordFlags	;wh_Flags
>b8ed	03					.byte 3	;wh_CodeLength
>b8ee	11					  .byte LinkDisplacement	; offset to previous nt
=$b8ef					XtPtr1 ::= *
=47211					WordListLink ::= Nt0 ; remember the nt of this word for later
.b8ef					S_Backslash_Quote:
.b8ef	a9 ff		lda #$ff			lda #$ff	; Do handle escaped chars.
.b8f1	d0 08		bne $b8fb			bne S_Quote_start
=4					CodeLen	.var *-XtPtr1
=$b8f3					Here1 = *	; remember here
>b8ed	04					.byte CodeLen	;patch wh_CodeLength
>b8f3	53 22				Name0:	.text 'S"'	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=47221					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b8f5	42					.byte (('S"'[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>b8f6	18					.byte WordFlags	;wh_Flags
>b8f7	03					.byte 3	;wh_CodeLength
>b8f8	0a					  .byte LinkDisplacement	; offset to previous nt
=$b8f9					XtPtr1 ::= *
=47221					WordListLink ::= Nt0 ; remember the nt of this word for later
.b8f9					S_Quote:
.b8f9	a9 00		lda #$00			lda #0		; Don't handle escaped chars.
.b8fb					S_Quote_start:
.b8fb	48		pha				pha			; save "handle escaped chars" flag
.b8fc	a5 0a		lda $0a				lda state		; compiling?
.b8fe	f0 06		beq $b906			beq _15
.b900	20 89 b8	jsr $b889			jsr SLiteral_Start	; compile SLiteral header
.b903	4c 09 b9	jmp $b909			jmp _19
.b906	20 28 ca	jsr $ca28	_15:		jsr Here		; remember start addr
.b909					_19:
.b909	68		pla				pla			; init t2 flags
.b90a	20 e2 b7	jsr $b7e2			jsr PushZA
.b90d	20 f0 b7	jsr $b7f0			jsr Zero		; init t3 flags
.b910					_savechars_loop:
.b910	a5 08		lda $08				lda toin+0		; LSB
.b912	c5 06		cmp $06				cmp ciblen+0
.b914	a5 09		lda $09				lda toin+1		; MSB
.b916	e5 07		sbc $07				sbc ciblen+1
.b918	90 10		bcc $b92a			bcc _input_fine		; input buffer empty?
.b91a	20 66 c2	jsr $c266			jsr Refill		; Refill it  ( -- f )
.b91d	b5 24		lda $24,x			lda DStack+0,x		; Check result of refill.
.b91f	d0 05		bne $b926			bne +
.b921	a9 6b		lda #$6b			lda #$100+err_refill	; Something when wrong with refill.
.b923	4c 79 b4	jmp $b479			jmp ThrowA
.b926	e8		inx		+		inx			; Drop the refill flag
.b927	e8		inx				inx
.b928	d0 e6		bne $b910			bne _savechars_loop	; jump back up to the empty check, just in
.b92a					_input_fine:
.b92a	18		clc				clc			; tmp1= A= the char at Cib+ToIn
.b92b	a5 04		lda $04				lda cib+0
.b92d	85 14		sta $14				sta tmp1+0
.b92f	a5 05		lda $05				lda cib+1
.b931	65 09		adc $09				adc toin+1
.b933	85 15		sta $15				sta tmp1+1
.b935	a4 08		ldy $08				ldy ToIn
.b937	b1 14		lda ($14),y			lda (tmp1),y
.b939	85 14		sta $14				sta tmp1
.b93b	e6 08		inc $08				inc toin+0		; Move on to the next character.
.b93d	d0 02		bne $b941			bne +
.b93f	e6 09		inc $09				inc toin+1
.b941					+
.b941	b4 26		ldy $26,x			ldy DStack+2,x		; handling escaped characters?
.b943	30 03		bmi $b948			bmi +
.b945	4c eb b9	jmp $b9eb			jmp _regular_char
.b948					+
.b948	b4 27		ldy $27,x			ldy DStack+3,x  		; already seen the backslash?
.b94a	30 03		bmi $b94f			bmi +
.b94c	4c e1 b9	jmp $b9e1			jmp _not_escaped
.b94f					+
.b94f	84 15		sty $15				sty tmp1+1
.b951	24 15		bit $15				bit tmp1+1		; in the middle of a \x sequence ?
.b953	70 25		bvs $b97a			bvs _check_esc_chars
.b955	a9 01		lda #$01			lda #1
.b957	24 15		bit $15				bit tmp1+1
.b959	d0 11		bne $b96c			bne _esc_x_second_digit
.b95b	c8		iny				iny			; Adjust flag for second digit next time.
.b95c	94 27		sty $27,x			sty DStack+3,x
.b95e	a5 14		lda $14				lda tmp1+0		; Get the char again.
.b960	20 0e ba	jsr $ba0e			jsr convert_hex_value	; Convert to hex
.b963	0a		asl a				asl			; This is the upper nybble, so move it up.
.b964	0a		asl a				asl
.b965	0a		asl a				asl
.b966	0a		asl a				asl
.b967	95 24		sta $24,x			sta DStack+0,x		; Save it for later.
.b969	4c f2 b9	jmp $b9f2			jmp _next_character
.b96c					_esc_x_second_digit:
.b96c	a9 00		lda #$00			lda #0			; Clear the escaped character flag
.b96e	95 27		sta $27,x			sta DStack+3,x		;   (because we are handling it right here)
.b970	a5 14		lda $14				lda tmp1+0		; Convert to hex
.b972	20 0e ba	jsr $ba0e			jsr convert_hex_value
.b975	15 24		ora $24,x			ora DStack+0,x		; combine with value in t3
.b977	4c ef b9	jmp $b9ef			jmp _save_character
.b97a					_check_esc_chars:
.b97a	a0 00		ldy #$00			ldy #0
.b97c	94 27		sty $27,x			sty DStack+3,x
.b97e	a8		tay				tay
.b97f	a9 07		lda #$07			lda #AscBELL	      ; BEL (ASCII value 7)
.b981	c0 61		cpy #$61			cpy #'a'
.b983	f0 6a		beq $b9ef			beq _save_character
.b985	a9 08		lda #$08			lda #AscBS	      ; Backspace (ASCII value 8)
.b987	c0 62		cpy #$62			cpy #'b'
.b989	f0 64		beq $b9ef			beq _save_character
.b98b	a9 1b		lda #$1b			lda #AscESC	       ; ESC (ASCII value 27)
.b98d	c0 65		cpy #$65			cpy #'e'
.b98f	f0 5e		beq $b9ef			beq _save_character
.b991	a9 0c		lda #$0c			lda #AscFF	       ; FF (ASCII value 12)
.b993	c0 66		cpy #$66			cpy #'f'
.b995	f0 58		beq $b9ef			beq _save_character
.b997	a9 0a		lda #$0a			lda #AscLF	       ; LF (ASCII value 10)
.b999	c0 6c		cpy #$6c			cpy #'l'
.b99b	f0 52		beq $b9ef			beq _save_character
.b99d	c0 6e		cpy #$6e			cpy #'n'
.b99f	f0 4e		beq $b9ef			beq _save_character
.b9a1	c0 6d		cpy #$6d			cpy #'m'
.b9a3	d0 09		bne $b9ae			bne +
.b9a5	a9 0d		lda #$0d			lda #AscCR		; CR/LF pair (ASCII values 13, 10)
.b9a7	20 e7 cc	jsr $cce7			jsr C_Comma_A
.b9aa	a9 0a		lda #$0a			lda #AscLF
.b9ac	d0 41		bne $b9ef			bne _save_character
.b9ae					+
.b9ae	a9 22		lda #$22			lda #AscDQuote		; Double quote (ASCII value 34)
.b9b0	c0 71		cpy #$71			cpy #'q'
.b9b2	f0 3b		beq $b9ef			beq _save_character
.b9b4	c0 22		cpy #$22			cpy #AscDQuote
.b9b6	f0 37		beq $b9ef			beq _save_character
.b9b8	a9 0d		lda #$0d			lda #AscCR		; CR (ASCII value 13)
.b9ba	c0 72		cpy #$72			cpy #'r'
.b9bc	f0 31		beq $b9ef			beq _save_character
.b9be	a9 09		lda #$09			lda #AscHT		; Horizontal TAB (ASCII value 9)
.b9c0	c0 74		cpy #$74			cpy #'t'
.b9c2	f0 2b		beq $b9ef			beq _save_character
.b9c4	a9 0b		lda #$0b			lda #AscVT		; Vertical TAB (ASCII value 11)
.b9c6	c0 76		cpy #$76			cpy #'v'
.b9c8	f0 25		beq $b9ef			beq _save_character
.b9ca	a9 00		lda #$00			lda #0			; NULL (ASCII value 0)
.b9cc	c0 7a		cpy #$7a			cpy #'z'
.b9ce	f0 1f		beq $b9ef			beq _save_character
.b9d0					_check_esc_x:
.b9d0	c0 78		cpy #$78			cpy #'x'
.b9d2	d0 06		bne $b9da			bne +
.b9d4	a9 be		lda #$be			lda #$BE	; Clear bits 6 and 0
.b9d6	95 27		sta $27,x			sta DStack+3,x
.b9d8	d0 18		bne $b9f2			bne _next_character
.b9da					+
.b9da	a9 5c		lda #$5c			lda #AscBackslash	; Backslash (ASCII value 92)
.b9dc	c0 5c		cpy #$5c			cpy #AscBackslash
.b9de	f0 0f		beq $b9ef			beq _save_character
.b9e0	98		tya				tya
.b9e1					_not_escaped:
.b9e1	c9 5c		cmp #$5c			cmp #$5C	; The backslash char
.b9e3	d0 06		bne $b9eb			bne _regular_char
.b9e5	a9 ff		lda #$ff			lda #$FF
.b9e7	95 27		sta $27,x			sta DStack+3,x
.b9e9	d0 07		bne $b9f2			bne _next_character
.b9eb					_regular_char:
.b9eb	c9 22		cmp #$22			cmp #AscDQuote		; ASCII for "
.b9ed	f0 06		beq $b9f5			beq _found_string_end
.b9ef					_save_character:
.b9ef	20 e7 cc	jsr $cce7			jsr C_Comma_A		; compile this character into the dictionary
.b9f2					_next_character:
.b9f2	4c 10 b9	jmp $b910			jmp _savechars_loop
.b9f5					_found_string_end:
.b9f5	e8		inx				inx			; Drop t3
.b9f6	e8		inx				inx
.b9f7	a5 0a		lda $0a				lda state		; What happens next depends on the state (which is bad, but
.b9f9	d0 0e		bne $ba09			bne _cmpl		; that's the way it works at the moment).
.b9fb	38		sec				sec			; TOS= length of string = Here - start_addr
.b9fc	a5 00		lda $00				lda cp+0
.b9fe	f5 26		sbc $26,x			sbc DStack+2,x
.ba00	95 24		sta $24,x			sta DStack+0,x		;   LSB
.ba02	a5 01		lda $01				lda cp+1
.ba04	f5 27		sbc $27,x			sbc DStack+3,x
.ba06	95 25		sta $25,x			sta DStack+1,x		;   MSB
.ba08	60		rts				rts			; ( startaddr u )
.ba09					_cmpl:
.ba09	e8		inx				inx			; Drop t2
.ba0a	e8		inx				inx
.ba0b	4c 96 b8	jmp $b896			jmp SLiteral_End	; ( jmpaddr )
=277					CodeLen	.var *-XtPtr1
=$ff					CodeLen	 .var $ff
=$ba0e					Here1 = *	; remember here
>b8f7	ff					.byte CodeLen	;patch wh_CodeLength
.ba0e					convert_hex_value:
.ba0e	c9 41		cmp #$41			cmp #'A'
.ba10	90 05		bcc $ba17			bcc _digit
.ba12	29 1f		and #$1f	_alpha:		and #$1F		; Make it uppercase.
.ba14	69 08		adc #$08			adc #9-1		; gives value 10 for 'A'
.ba16	60		rts				rts
.ba17					_digit:
.ba17	e9 2f		sbc #$2f			sbc #'0'-1
.ba19	60		rts				rts
>ba1a	4c 61 74 65 73 74 58 74		Name0:	.text "LatestXt"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=47522					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba22	88					.byte (("LatestXt"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=301					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>ba23	11					.byte WordFlags	;wh_Flags
>ba24	03					.byte 3	;wh_CodeLength
>ba25	75 b8					  .word WordListLink
=$ba27					XtPtr1 ::= *
=47522					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba27	20 39 ba	jsr $ba39	LatestXt:	jsr LatestNt	; ( nt )
.ba2a	4c 9d bd	jmp $bd9d			jmp Name_To_Int	; ( xt )
=6					CodeLen	.var *-XtPtr1
=$ba2d					Here1 = *	; remember here
>ba24	06					.byte CodeLen	;patch wh_CodeLength
>ba2d	4c 61 74 65 73 74 4e 74		Name0:	.text "LatestNt"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=47541					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba35	88					.byte (("LatestNt"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>ba36	10					.byte WordFlags	;wh_Flags
>ba37	03					.byte 3	;wh_CodeLength
>ba38	13					  .byte LinkDisplacement	; offset to previous nt
=$ba39					XtPtr1 ::= *
=47541					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba39	20 43 ba	jsr $ba43	LatestNt:	jsr current_to_dp
.ba3c	a5 10		lda $10				lda dp+0
.ba3e	a4 11		ldy $11				ldy dp+1
.ba40	4c b3 b7	jmp $b7b3			jmp PushYA
=10					CodeLen	.var *-XtPtr1
=$ba43					Here1 = *	; remember here
>ba37	0a					.byte CodeLen	;patch wh_CodeLength
.ba43					current_to_dp:
.ba43	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.ba46	0a		asl a				asl			; dp= wordlists[A]
.ba47	a8		tay				tay
.ba48	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.ba4b	85 10		sta $10				sta dp+0
.ba4d	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.ba50	85 11		sta $11				sta dp+1
.ba52	60		rts				rts
.ba53					dp_to_current:
.ba53	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.ba56	0a		asl a		                asl			; wordlists[A]=dp
.ba57	a8		tay		                tay
.ba58	a5 10		lda $10		                lda dp+0
.ba5a	99 12 03	sta $0312,y			sta WordlistsV+0,y
.ba5d	a5 11		lda $11		                lda dp+1
.ba5f	99 13 03	sta $0313,y	                sta WordlistsV+1,y
.ba62	60		rts		                rts
>ba63	50 61 72 73 65 2d 4e 61		Name0:	.text "Parse-Name"	;  name of word as a string, ending at wh_NameLastChar
>ba6b	6d 65
=10					NameLength = *-Name0
=47597					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba6d	aa					.byte (("Parse-Name"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>ba6e	10					.byte WordFlags	;wh_Flags
>ba6f	03					.byte 3	;wh_CodeLength
>ba70	38					  .byte LinkDisplacement	; offset to previous nt
=$ba71					XtPtr1 ::= *
=47597					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba71					Parse_Name:
.ba71	a5 04		lda $04				lda cib+0		; tmp2= cib+(toin & $ff00)
.ba73	85 16		sta $16				sta tmp2+0
.ba75	18		clc				clc
.ba76	a5 05		lda $05				lda cib+1
.ba78	65 09		adc $09				adc toin+1
.ba7a	85 17		sta $17				sta tmp2+1
.ba7c	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.ba7e					_skip_loop:
.ba7e	c4 06		cpy $06				cpy ciblen+0		; more chars left?
.ba80	a5 09		lda $09				lda toin+1
.ba82	e5 07		sbc $07				sbc ciblen+1
.ba84	b0 11		bcs $ba97			bcs _empty_line
.ba86	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.ba88	c9 21		cmp #$21			cmp #AscSP+1		; is_whitespace
.ba8a	b0 10		bcs $ba9c			bcs _char_found
.ba8c	c8		iny				iny			; increment toin
.ba8d	84 08		sty $08				sty toin+0
.ba8f	d0 ed		bne $ba7e			bne _skip_loop
.ba91	e6 09		inc $09				inc toin+1
.ba93	e6 17		inc $17				inc tmp2+1
.ba95	d0 e7		bne $ba7e			bne _skip_loop
.ba97					_empty_line:
.ba97	ca		dex				dex			; junk address
.ba98	ca		dex				dex
.ba99	4c f0 b7	jmp $b7f0			jmp Zero		; length=0
.ba9c					_char_found:
.ba9c	20 0c b8	jsr $b80c			jsr Bl			; push delimiter char
.ba9f	4c b8 ba	jmp $bab8			jmp Parse
=49					CodeLen	.var *-XtPtr1
=$baa2					Here1 = *	; remember here
>ba6f	31					.byte CodeLen	;patch wh_CodeLength
.baa2					parse_name_check:
.baa2	20 71 ba	jsr $ba71			jsr parse_name		; get character from string
.baa5	b5 24		lda $24,x			lda DStack+0,x		; empty string?
.baa7	f0 01		beq $baaa			beq _empty
.baa9	60		rts				rts
.baaa	a9 f3		lda #$f3	_empty:		lda #$100+err_UndefinedWord	; complain & abort
.baac	4c 79 b4	jmp $b479			jmp ThrowA
>baaf	50 61 72 73 65			Name0:	.text "Parse"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=47668					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bab4	a5					.byte (("Parse"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=71					LinkDisplacement = Nt0-WordListLink
>bab5	10					.byte WordFlags	;wh_Flags
>bab6	03					.byte 3	;wh_CodeLength
>bab7	47					  .byte LinkDisplacement	; offset to previous nt
=$bab8					XtPtr1 ::= *
=47668					WordListLink ::= Nt0 ; remember the nt of this word for later
.bab8	20 d9 b3	jsr $b3d9	Parse:		jsr PopA		; pop c (check for underflow)
.babb	85 1c		sta $1c		Parse_A:	sta tmp5		; save delimiter
.babd	ca		dex				dex			; alloc space for addr
.babe	ca		dex				dex
.babf	ca		dex				dex			; alloc space for length
.bac0	ca		dex				dex
.bac1	18		clc				clc			; addr= cib+toin
.bac2	a5 08		lda $08				lda toin+0
.bac4	65 04		adc $04				adc cib+0
.bac6	95 26		sta $26,x			sta DStack+2,x
.bac8	a5 09		lda $09				lda toin+1
.baca	65 05		adc $05				adc cib+1
.bacc	95 27		sta $27,x			sta DStack+3,x
.bace	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.bad0	84 14		sty $14				sty tmp1+0
.bad2	a5 04		lda $04				lda cib+0		; tmp2= cib + (toin & $ff00)
.bad4	85 16		sta $16				sta tmp2+0
.bad6	18		clc				clc
.bad7	a5 09		lda $09				lda toin+1		; tmp1= toin
.bad9	85 15		sta $15				sta tmp1+1
.badb	65 05		adc $05				adc cib+1
.badd	85 17		sta $17				sta tmp2+1
.badf	a9 00		lda #$00			lda #0		; Initialize the offset we use to adjust EOL or found delimiter
.bae1	85 1d		sta $1d				sta tmp5+1
.bae3					_loop:
.bae3	c4 06		cpy $06				cpy ciblen+0		; end of string?
.bae5	a5 09		lda $09				lda toin+1
.bae7	e5 07		sbc $07				sbc ciblen+1
.bae9	b0 1d		bcs $bb08			bcs _eol
.baeb	a5 1c		lda $1c				lda tmp5+0		; get delimiter
.baed	c9 20		cmp #$20			cmp #AscSP		; is it whitespace?
.baef	d0 08		bne $baf9			bne _not_whitespace
.baf1	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.baf3	c9 21		cmp #$21			cmp #AscSP+1		; we're looking for all whitespace
.baf5	90 0f		bcc $bb06			bcc _found_delimiter
.baf7	b0 04		bcs $bafd			bcs _not_delimiter
.baf9	d1 16		cmp ($16),y	_not_whitespace: cmp (tmp2),y		; compare delimter to cib[toin]
.bafb	f0 09		beq $bb06			beq _found_delimiter
.bafd					_not_delimiter:
.bafd	c8		iny				iny			; next character
.bafe	d0 e3		bne $bae3			bne _loop
.bb00	e6 09		inc $09				inc toin+1
.bb02	e6 17		inc $17				inc tmp2+1
.bb04	d0 dd		bne $bae3			bne _loop
.bb06					_found_delimiter:
.bb06	e6 1d		inc $1d				inc tmp5+1
.bb08					_eol:
.bb08	38		sec				sec			; length = toin - tmp1
.bb09	98		tya				tya
.bb0a	e5 14		sbc $14				sbc tmp1+0
.bb0c	95 24		sta $24,x			sta DStack+0,x
.bb0e	a5 09		lda $09				lda toin+1
.bb10	e5 15		sbc $15				sbc tmp1+1
.bb12	95 25		sta $25,x			sta DStack+1,x
.bb14	18		clc				clc			; toin = toin + delimiter_offset
.bb15	98		tya				tya
.bb16	65 1d		adc $1d				adc tmp5+1
.bb18	85 08		sta $08				sta toin+0
.bb1a	90 02		bcc $bb1e			bcc +
.bb1c	e6 09		inc $09				inc toin+1
.bb1e					+
=102					CodeLen	.var *-XtPtr1
=$bb1e					Here1 = *	; remember here
>bab6	66					.byte CodeLen	;patch wh_CodeLength
.bb1e	60		rts				rts
>bb1f	45 78 65 63 75 74 65 2d		Name0:	.text "Execute-Parsing"	;  name of word as a string, ending at wh_NameLastChar
>bb27	50 61 72 73 69 6e 67
=15					NameLength = *-Name0
=47790					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb2e	ef					.byte (("Execute-Parsing"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=122					LinkDisplacement = Nt0-WordListLink
>bb2f	50					.byte WordFlags	;wh_Flags
>bb30	03					.byte 3	;wh_CodeLength
>bb31	7a					  .byte LinkDisplacement	; offset to previous nt
=$bb32					XtPtr1 ::= *
=47790					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb32					Execute_parsing:
.bb32	20 36 b4	jsr $b436			jsr underflow_3
.bb35	20 e1 c3	jsr $c3e1			jsr Input_To_R		; save existing input for later
.bb38	20 76 ce	jsr $ce76			jsr Not_Rot		; -ROT ( xt addr u )
.bb3b	20 f4 b3	jsr $b3f4			jsr PopYA		; TOS is new ciblen
.bb3e	85 06		sta $06				sta ciblen+0
.bb40	84 07		sty $07				sty ciblen+1
.bb42	20 f4 b3	jsr $b3f4			jsr PopYA		; NOS is new cib
.bb45	85 04		sta $04				sta cib+0
.bb47	84 05		sty $05				sty cib+1
.bb49	a9 00		lda #$00			lda #0
.bb4b	85 08		sta $08				sta toin+0		; Set >IN to zero
.bb4d	85 09		sta $09				sta toin+1
.bb4f	20 15 ce	jsr $ce15			jsr Execute
.bb52	20 02 c4	jsr $c402			jsr R_To_Input		; restore
=35					CodeLen	.var *-XtPtr1
=$bb55					Here1 = *	; remember here
>bb30	23					.byte CodeLen	;patch wh_CodeLength
.bb55	60		rts				rts
>bb56	53 6f 75 72 63 65		Name0:	.text "Source"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=47836					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb5c	a6					.byte (("Source"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=46					LinkDisplacement = Nt0-WordListLink
>bb5d	10					.byte WordFlags	;wh_Flags
>bb5e	03					.byte 3	;wh_CodeLength
>bb5f	2e					  .byte LinkDisplacement	; offset to previous nt
=$bb60					XtPtr1 ::= *
=47836					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb60					Source:
.bb60	a5 04		lda $04				lda cib+0	; push address
.bb62	a4 05		ldy $05				ldy cib+1
.bb64	20 b3 b7	jsr $b7b3			jsr PushYA
.bb67	a5 06		lda $06				lda ciblen+0	; push size, return
.bb69	a4 07		ldy $07				ldy ciblen+1
.bb6b	4c b3 b7	jmp $b7b3			jmp PushYA
=14					CodeLen	.var *-XtPtr1
=$bb6e					Here1 = *	; remember here
>bb5e	0e					.byte CodeLen	;patch wh_CodeLength
>bb6e	53 6f 75 72 63 65 2d 49		Name0:	.text "Source-Id"	;  name of word as a string, ending at wh_NameLastChar
>bb76	64
=9					NameLength = *-Name0
=47863					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb77	89					.byte (("Source-Id"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>bb78	10					.byte WordFlags	;wh_Flags
>bb79	03					.byte 3	;wh_CodeLength
>bb7a	1b					  .byte LinkDisplacement	; offset to previous nt
=$bb7b					XtPtr1 ::= *
=47863					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb7b	a5 02		lda $02		Source_Id:	lda insrc+0
.bb7d	a4 03		ldy $03				ldy insrc+1
.bb7f	4c b3 b7	jmp $b7b3			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$bb82					Here1 = *	; remember here
>bb79	07					.byte CodeLen	;patch wh_CodeLength
>bb82	45 78 69 74			Name0:	.text "Exit"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=47878					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb86	84					.byte (("Exit"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=36					WordFlags ::= AN+CO	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>bb87	24					.byte WordFlags	;wh_Flags
>bb88	03					.byte 3	;wh_CodeLength
>bb89	0f					  .byte LinkDisplacement	; offset to previous nt
=$bb8a					XtPtr1 ::= *
=47878					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb8a					Exit:
.bb8a	60		rts				rts		; keep before WordEnd so it gets inlined
=1					CodeLen	.var *-XtPtr1
=$bb8b					Here1 = *	; remember here
>bb88	01					.byte CodeLen	;patch wh_CodeLength
>bb8b	3b				Name0:	.text ";"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=47884					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb8c	61					.byte ((";"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=6					LinkDisplacement = Nt0-WordListLink
>bb8d	1c					.byte WordFlags	;wh_Flags
>bb8e	03					.byte 3	;wh_CodeLength
>bb8f	06					  .byte LinkDisplacement	; offset to previous nt
=$bb90					XtPtr1 ::= *
=47884					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb90					Semicolon:
.bb90	20 3b b7	jsr $b73b			jsr Left_Bracket	; switch to interpret state
.bb93	24 0c		bit $0c				bit status		; is this a : word or a :NONAME word?
.bb95	70 0c		bvs $bba3			bvs _colonword
.bb97	a9 60		lda #$60			lda #$60		; compile an RTS
.bb99	20 e7 cc	jsr $cce7			jsr C_Comma_A
.bb9c	a5 0e		lda $0e				lda WorkWord+0		; push xt, return
.bb9e	a4 0f		ldy $0f				ldy WorkWord+1
.bba0	4c b3 b7	jmp $b7b3			jmp PushYA
.bba3					_colonword:
.bba3	24 0c		bit $0c				bit status
.bba5	10 1d		bpl $bbc4			bpl _new_word	; Bit 7 is clear = new word
.bba7	a5 0e		lda $0e				lda WorkWord+0		; push our nt
.bba9	a4 0f		ldy $0f				ldy WorkWord+1
.bbab	20 b3 b7	jsr $b7b3			jsr PushYA
.bbae	20 e6 bd	jsr $bde6			jsr Name_To_String	; get our name string
.bbb1	a9 19		lda #$19			lda #<str_redefined	; string "redefined"
.bbb3	a0 da		ldy #$da			ldy #>str_redefined
.bbb5	20 f3 cd	jsr $cdf3			jsr Print_ASCIIZ_YA_no_lf
.bbb8	20 d8 cd	jsr $cdd8			jsr Type		; print the ofWordEnding word.
.bbbb	20 cc cd	jsr $cdcc			jsr Space
.bbbe	a9 7f		lda #$7f			lda #$ff-%10000000
.bbc0	25 0c		and $0c				and status
.bbc2	85 0c		sta $0c				sta status
.bbc4					_new_word:
.bbc4	20 fe c0	jsr $c0fe			jsr Header_Link		; finish linking into current dictionary
.bbc7	20 cf bb	jsr $bbcf			jsr adjust_z		; fix word length
.bbca	a9 60		lda #$60			lda #$60		; compile an RTS
.bbcc	4c e7 cc	jmp $cce7			jmp C_Comma_A
=63					CodeLen	.var *-XtPtr1
=$bbcf					Here1 = *	; remember here
>bb8e	3f					.byte CodeLen	;patch wh_CodeLength
.bbcf					adjust_z:
.bbcf	a0 81		ldy #$81			ldy #wh_Flags		; tmp1= xt
.bbd1	b1 10		lda ($10),y			lda (dp),y
.bbd3	29 03		and #$03			and #FP+DB
.bbd5	18		clc				clc
.bbd6	69 84		adc #$84			adc #wh_LinkNt+1
.bbd8	65 10		adc $10				adc dp+0
.bbda	85 14		sta $14				sta tmp1+0
.bbdc	a9 00		lda #$00			lda #0
.bbde	65 11		adc $11				adc dp+1
.bbe0	85 15		sta $15				sta tmp1+1
.bbe2	38		sec				sec			; length= cp-xt
.bbe3	a5 00		lda $00				lda cp+0
.bbe5	e5 14		sbc $14				sbc tmp1+0
.bbe7	a8		tay				tay
.bbe8	a5 01		lda $01				lda cp+1
.bbea	e5 15		sbc $15				sbc tmp1+1
.bbec	f0 0c		beq $bbfa			beq _short		; length > $ff ?
.bbee	a0 81		ldy #$81			ldy #Wh_Flags		; make it NN
.bbf0	b1 10		lda ($10),y			lda (dp),y
.bbf2	29 df		and #$df			and #$ff-AN
.bbf4	09 10		ora #$10			ora #NN
.bbf6	91 10		sta ($10),y			sta (dp),y
.bbf8	a0 ff		ldy #$ff			ldy #$ff		; set max length for header
.bbfa	98		tya		_short:		tya			; fill in length in header
.bbfb	a0 82		ldy #$82			ldy #Wh_CodeLength
.bbfd	91 10		sta ($10),y			sta (dp),y
.bbff	60		rts				rts
>bc00	3a				Name0:	.text ":"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=48001					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc01	41					.byte ((":"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=117					LinkDisplacement = Nt0-WordListLink
>bc02	10					.byte WordFlags	;wh_Flags
>bc03	03					.byte 3	;wh_CodeLength
>bc04	75					  .byte LinkDisplacement	; offset to previous nt
=$bc05					XtPtr1 ::= *
=48001					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc05					Colon:
.bc05	20 50 b7	jsr $b750			jsr Right_Bracket	; switch to compile state
.bc08	a5 0c		lda $0c				lda status
.bc0a	09 40		ora #$40			ora #%01000000	; tell ";" and RECURSE that WorkWord contains nt
.bc0c	09 80		ora #$80			ora #%10000000	; Tell Header_Build not to print warning for duplicate name.
.bc0e	85 0c		sta $0c				sta status
.bc10	4c 09 c1	jmp $c109			jmp Header_Build	; compile word header (but don't link into wordlist)
=14					CodeLen	.var *-XtPtr1
=$bc13					Here1 = *	; remember here
>bc03	0e					.byte CodeLen	;patch wh_CodeLength
>bc13	3a 4e 6f 4e 61 6d 65		Name0:	.text ":NoName"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=48026					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc1a	a7					.byte ((":NoName"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>bc1b	10					.byte WordFlags	;wh_Flags
>bc1c	03					.byte 3	;wh_CodeLength
>bc1d	19					  .byte LinkDisplacement	; offset to previous nt
=$bc1e					XtPtr1 ::= *
=48026					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc1e					Colon_NoName:
.bc1e	20 50 b7	jsr $b750			jsr Right_Bracket	; switch to compile state
.bc21	a9 bf		lda #$bf			lda #$ff-%01000000	; tell ";" and RECURSE that WorkWord contains xt
.bc23	25 0c		and $0c				and status
.bc25	85 0c		sta $0c				sta status
.bc27	a5 00		lda $00				lda cp+0
.bc29	85 0e		sta $0e				sta WorkWord+0
.bc2b	a5 01		lda $01				lda cp+1
.bc2d	85 0f		sta $0f				sta WorkWord+1
=17					CodeLen	.var *-XtPtr1
=$bc2f					Here1 = *	; remember here
>bc1c	11					.byte CodeLen	;patch wh_CodeLength
.bc2f	60		rts				rts
>bc30	27				Name0:	.text "'"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=48049					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc31	e1					.byte (("'"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>bc32	10					.byte WordFlags	;wh_Flags
>bc33	03					.byte 3	;wh_CodeLength
>bc34	17					  .byte LinkDisplacement	; offset to previous nt
=$bc35					XtPtr1 ::= *
=48049					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc35	20 3b bc	jsr $bc3b	Tick:		jsr Tick_Nt
.bc38	4c 9d bd	jmp $bd9d			jmp Name_To_Int	; ( nt -- xt )
=6					CodeLen	.var *-XtPtr1
=$bc3b					Here1 = *	; remember here
>bc33	06					.byte CodeLen	;patch wh_CodeLength
.bc3b	20 a2 ba	jsr $baa2	Tick_Nt:	jsr parse_name_check	; ( -- addr u )
.bc3e	4c 89 bc	jmp $bc89			jmp find_name_check	; ( addr u -- nt )
>bc41	5b 27 5d			Name0:	.text "[']"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=48068					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc44	a3					.byte (("[']"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>bc45	1c					.byte WordFlags	;wh_Flags
>bc46	03					.byte 3	;wh_CodeLength
>bc47	13					  .byte LinkDisplacement	; offset to previous nt
=$bc48					XtPtr1 ::= *
=48068					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc48	20 35 bc	jsr $bc35	Bracket_Tick:	jsr Tick
.bc4b	4c 68 b7	jmp $b768			jmp Literal
=6					CodeLen	.var *-XtPtr1
=$bc4e					Here1 = *	; remember here
>bc46	06					.byte CodeLen	;patch wh_CodeLength
>bc4e	46 69 6e 64 2d 4e 61 6d		Name0:	.text "Find-Name"	;  name of word as a string, ending at wh_NameLastChar
>bc56	65
=9					NameLength = *-Name0
=48087					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc57	a9					.byte (("Find-Name"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>bc58	10					.byte WordFlags	;wh_Flags
>bc59	03					.byte 3	;wh_CodeLength
>bc5a	13					  .byte LinkDisplacement	; offset to previous nt
=$bc5b					XtPtr1 ::= *
=48087					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc5b					Find_Name:
.bc5b	20 96 bc	jsr $bc96			jsr swl_prepare 	; setup for search
.bc5e	ca		dex				dex
.bc5f	ca		dex				dex			; ( ? )
.bc60	a9 ff		lda #$ff			lda #$ff		; for each entry in search order
.bc62	95 25		sta $25,x			sta DStack+1,x
.bc64	f6 25		inc $25,x	_wordlist_next:	inc DStack+1,x		; step to next search order entry
.bc66	b4 25		ldy $25,x			ldy DStack+1,x
.bc68	cc 2a 03	cpy $032a			cpy Num_OrderV		; at end of list?
.bc6b	90 06		bcc $bc73			bcc _nextS
.bc6d	d0 15		bne $bc84			bne _fail
.bc6f	a9 03		lda #$03			lda #wid_Root		; also try root wordlist
.bc71	d0 03		bne $bc76			bne _nextA
.bc73	b9 2b 03	lda $032b,y	_nextS:		lda Search_OrderV,y	; A= search_order[Y]  get wordlist ID
.bc76	20 bf bc	jsr $bcbf	_nextA:		jsr swl_search_wordlist
.bc79	f0 e9		beq $bc64			beq _wordlist_next
.bc7b	a5 14		lda $14				lda tmp1+0		; return nt
.bc7d	a4 15		ldy $15				ldy tmp1+1
.bc7f	95 24		sta $24,x	_exit:		sta DStack+0,x
.bc81	94 25		sty $25,x			sty DStack+1,x
.bc83	60		rts				rts			; ( ? )
.bc84	a9 00		lda #$00	_fail:		lda #0			; return 0
.bc86	a8		tay				tay
.bc87	f0 f6		beq $bc7f			beq _exit
=46					CodeLen	.var *-XtPtr1
=$bc89					Here1 = *	; remember here
>bc59	2e					.byte CodeLen	;patch wh_CodeLength
.bc89					find_name_check:
.bc89	20 5b bc	jsr $bc5b			jsr Find_Name
.bc8c	b5 25		lda $25,x			lda DStack+1,x		; check that we found a word
.bc8e	f0 01		beq $bc91			beq _NotFound
.bc90	60		rts				rts
.bc91	a9 f3		lda #$f3	_NotFound:	lda #$100+err_UndefinedWord ; complain & quit
.bc93	4c 79 b4	jmp $b479			jmp ThrowA
.bc96					swl_prepare:
.bc96	20 31 b4	jsr $b431			jsr underflow_2
.bc99	38		sec				sec			; A= 0 - name start offset
.bc9a	b5 24		lda $24,x			lda DStack+0,x
.bc9c	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.bc9e	75 26		adc $26,x			adc DStack+2,x		; tmp2= pattern nt
.bca0	85 16		sta $16				sta tmp2+0
.bca2	a9 ff		lda #$ff			lda #$ff
.bca4	75 27		adc $27,x			adc DStack+3,x
.bca6	85 17		sta $17				sta tmp2+1
.bca8	a9 7f		lda #$7f			lda #wh_NameLastChar	; tmp4+0= starting name char index -1
.bcaa	38		sec				sec
.bcab	f5 24		sbc $24,x			sbc DStack+0,x
.bcad	85 1a		sta $1a				sta tmp4+0
.bcaf	a0 7f		ldy #$7f			ldy #wh_NameLastChar	; tmp3+0= wh_HNL (hash & length)
.bcb1	b1 16		lda ($16),y			lda (tmp2),y
.bcb3	0a		asl a				asl a
.bcb4	0a		asl a				asl a
.bcb5	0a		asl a				asl a
.bcb6	0a		asl a				asl a
.bcb7	0a		asl a				asl a
.bcb8	15 24		ora $24,x			ora DStack+0,x
.bcba	85 18		sta $18				sta tmp3+0
.bcbc	4c 36 c5	jmp $c536			jmp Two_Drop		; Drop addr & u
.bcbf					swl_search_wordlist:
.bcbf	86 19		stx $19				stx tmp3+1		; save data stack index
.bcc1	0a		asl a				asl			; tmp1 = up->wordlists[A]
.bcc2	a8		tay				tay
.bcc3	be 12 03	ldx $0312,y			ldx WordlistsV+0,y
.bcc6	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bcc9	d0 15		bne $bce0			bne _word_3		;   not end-of-list?
.bccb	08		php		_rts:		php
.bccc	a6 19		ldx $19				ldx tmp3+1		; restore data stack index
.bcce	28		plp				plp
.bccf	60		rts				rts			; Z= end_of_list
.bcd0					_word_next:
.bcd0	a0 81		ldy #$81			ldy #wh_Flags		; what kind of LinkNt?
.bcd2	b1 14		lda ($14),y			lda (tmp1),y
.bcd4	a0 83		ldy #$83			ldy #wh_LinkNt
.bcd6	29 01		and #$01			and #FP
.bcd8	f0 0e		beq $bce8			beq _LinkShort
.bcda	b1 14		lda ($14),y	_LinkLong:	lda (tmp1),y		; tmp1= tmp1->Wh_LinkNt_word
.bcdc	aa		tax				tax
.bcdd	c8		iny				iny
.bcde	b1 14		lda ($14),y			lda (tmp1),y
.bce0	85 15		sta $15		_word_3:	sta tmp1+1
.bce2	86 14		stx $14				stx tmp1+0
.bce4	d0 0d		bne $bcf3			bne _Test
.bce6	f0 e3		beq $bccb			beq _rts
.bce8	a5 14		lda $14		_LinkShort:	lda tmp1+0		; tmp1 -= tmp1->wh_LinkNt offset byte
.bcea	38		sec				sec
.bceb	f1 14		sbc ($14),y			sbc (tmp1),y
.bced	85 14		sta $14				sta tmp1+0
.bcef	b0 02		bcs $bcf3			bcs +
.bcf1	c6 15		dec $15				dec tmp1+1
.bcf3					+
.bcf3	a0 80		ldy #$80	_Test:		ldy #Wh_HashNameLen	; Are hash & name length the same?
.bcf5	b1 14		lda ($14),y			lda (tmp1),y
.bcf7	c5 18		cmp $18				cmp tmp3+0
.bcf9	d0 d5		bne $bcd0			bne _word_next
.bcfb	a4 1a		ldy $1a				ldy tmp4+0		; Y= index of 1st char -1
.bcfd	c8		iny		_char_next:	iny			; to next char
.bcfe	30 cb		bmi $bccb			bmi _rts		; end of string?
.bd00	b1 16		lda ($16),y			lda (tmp2),y		; char of pattern name
.bd02	51 14		eor ($14),y			eor (tmp1),y		; char of this word name
.bd04	f0 f7		beq $bcfd			beq _char_next		;   exact match?
.bd06	c9 20		cmp #$20			cmp #$20		;   only a case mismatch?
.bd08	d0 c6		bne $bcd0			bne _word_next
.bd0a	b1 16		lda ($16),y			lda (tmp2),y		;   verify it is alpha char
.bd0c	29 df		and #$df			and #$df
.bd0e	e9 41		sbc #$41			sbc #'A'
.bd10	c9 1a		cmp #$1a			cmp #'Z'-'A'+1
.bd12	90 e9		bcc $bcfd			bcc _char_next
.bd14	b0 ba		bcs $bcd0			bcs _word_next
>bd16	46 69 6e 64			Name0:	.text "Find"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=48282					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bd1a	84					.byte (("Find"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=195					LinkDisplacement = Nt0-WordListLink
>bd1b	10					.byte WordFlags	;wh_Flags
>bd1c	03					.byte 3	;wh_CodeLength
>bd1d	c3					  .byte LinkDisplacement	; offset to previous nt
=$bd1e					XtPtr1 ::= *
=48282					WordListLink ::= Nt0 ; remember the nt of this word for later
.bd1e					Find:
.bd1e	20 56 cf	jsr $cf56			jsr Dup			; Save caddr in case conversion fails, check underflow
.bd21	20 ec b1	jsr $b1ec			jsr Count		; Convert counted string address to modern format
.bd24	20 5b bc	jsr $bc5b			jsr Find_Name		; ( caddr nt | 0 ) tmp1=nt
.bd27	b5 25		lda $25,x			lda DStack+1,x		; word found?
.bd29	d0 01		bne $bd2c			bne _found_word
.bd2b	60		rts				rts			; ( caddr 0 )
.bd2c					_found_word:
.bd2c	20 90 c9	jsr $c990			jsr Nip			; ( nt )
.bd2f	20 9d bd	jsr $bd9d			jsr Name_To_Int		; ( xt ) tmp1=nt
.bd32	a0 81		ldy #$81			ldy #Wh_Flags		; immediate?
.bd34	b1 14		lda ($14),y			lda (tmp1),y
.bd36	29 08		and #$08			and #IM
.bd38	d0 03		bne $bd3d			bne _immediate
.bd3a	4c c2 b7	jmp $b7c2			jmp True		; not immediate, return ( xt -1 )
.bd3d	4c f9 b7	jmp $b7f9	_immediate:	jmp One			; immediate, return ( xt 1 )
=34					CodeLen	.var *-XtPtr1
=$bd40					Here1 = *	; remember here
>bd1c	22					.byte CodeLen	;patch wh_CodeLength
>bd40	49 6e 74 3e 4e 61 6d 65		Name0:	.text "Int>Name"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=48328					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bd48	a8					.byte (("Int>Name"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=46					LinkDisplacement = Nt0-WordListLink
>bd49	50					.byte WordFlags	;wh_Flags
>bd4a	03					.byte 3	;wh_CodeLength
>bd4b	2e					  .byte LinkDisplacement	; offset to previous nt
=$bd4c					XtPtr1 ::= *
=48328					WordListLink ::= Nt0 ; remember the nt of this word for later
.bd4c					Int_To_Name:
.bd4c	20 1d b4	jsr $b41d			jsr underflow_1
.bd4f	a9 fe		lda #$fe			lda #$100-2		; for each wordlist
.bd51	85 19		sta $19				sta tmp3+1
.bd53					_wordlist_next:
.bd53	a4 19		ldy $19				ldy tmp3+1		; get next wordlist index
.bd55	c8		iny				iny
.bd56	c8		iny				iny
.bd57	84 19		sty $19				sty tmp3+1
.bd59	c0 0c		cpy #$0c			cpy #(Num_OrderV-WordlistsV)/2
.bd5b	b0 2b		bcs $bd88			bcs _fail
.bd5d	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.bd60	85 14		sta $14				sta tmp1+0
.bd62	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bd65	85 15		sta $15				sta tmp1+1
.bd67	d0 07		bne $bd70			bne _calc
.bd69	f0 e8		beq $bd53			beq _wordlist_next
.bd6b	20 96 82	jsr $8296	_word_next:	jsr LinkNext		; step to next word
.bd6e	f0 e3		beq $bd53			beq _wordlist_next
.bd70	20 aa bd	jsr $bdaa	_calc:		jsr NameToIntTmp	; tmp2= xt
.bd73	a5 16		lda $16				lda tmp2+0
.bd75	d5 24		cmp $24,x			cmp DStack+0,x		;  match?
.bd77	d0 f2		bne $bd6b			bne _word_next
.bd79	a5 17		lda $17				lda tmp2+1
.bd7b	d5 25		cmp $25,x			cmp DStack+1,x
.bd7d	d0 ec		bne $bd6b			bne _word_next
.bd7f	a5 14		lda $14				lda tmp1+0
.bd81	95 24		sta $24,x			sta DStack+0,x
.bd83	a5 15		lda $15				lda tmp1+1
.bd85	95 25		sta $25,x			sta DStack+1,x
.bd87	60		rts				rts			; return P.Z=0
.bd88					_fail:
.bd88	a9 00		lda #$00			lda #0			; return a zero to indicate that we didn't find it.
.bd8a	95 24		sta $24,x			sta DStack+0,x
.bd8c	95 25		sta $25,x			sta DStack+1,x
.bd8e	85 15		sta $15				sta tmp1+1
.bd90	60		rts				rts			; return P.Z=1
=69					CodeLen	.var *-XtPtr1
=$bd91					Here1 = *	; remember here
>bd4a	45					.byte CodeLen	;patch wh_CodeLength
>bd91	4e 61 6d 65 3e 49 6e 74		Name0:	.text "Name>Int"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=48409					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bd99	88					.byte (("Name>Int"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=81					LinkDisplacement = Nt0-WordListLink
>bd9a	10					.byte WordFlags	;wh_Flags
>bd9b	03					.byte 3	;wh_CodeLength
>bd9c	51					  .byte LinkDisplacement	; offset to previous nt
=$bd9d					XtPtr1 ::= *
=48409					WordListLink ::= Nt0 ; remember the nt of this word for later
.bd9d	20 ff b3	jsr $b3ff	Name_To_Int:	jsr PopTmp1
.bda0	20 aa bd	jsr $bdaa	Name_To_Int_T:	jsr NameToIntTmp
.bda3	a5 16		lda $16				lda tmp2+0
.bda5	a4 17		ldy $17				ldy tmp2+1
.bda7	4c b3 b7	jmp $b7b3			jmp PushYA
=13					CodeLen	.var *-XtPtr1
=$bdaa					Here1 = *	; remember here
>bd9b	0d					.byte CodeLen	;patch wh_CodeLength
.bdaa					NameToIntTmp:
.bdaa	a0 81		ldy #$81			ldy #wh_Flags
.bdac	b1 14		lda ($14),y			lda (tmp1),y
.bdae	29 02		and #$02			and #DB			; has XT ptr?
.bdb0	d0 12		bne $bdc4			bne _HasXtPtr
.bdb2	b1 14		lda ($14),y			lda (tmp1),y		; A= header length
.bdb4	29 03		and #$03			and #DB+FP
.bdb6	18		clc				clc
.bdb7	69 84		adc #$84			adc #wh_LinkNt+1
.bdb9	65 14		adc $14				adc tmp1+0		; TOS=tmp1+A
.bdbb	85 16		sta $16				sta tmp2+0
.bdbd	a9 00		lda #$00			lda #0
.bdbf	65 15		adc $15				adc tmp1+1
.bdc1	85 17		sta $17				sta tmp2+1
.bdc3	60		rts				rts
.bdc4	b1 14		lda ($14),y	_HasXtPtr:	lda (tmp1),y		; get wh_Flags again
.bdc6	a0 84		ldy #$84			ldy #wh_LinkNt+1
.bdc8	29 01		and #$01			and #FP			; has long LinkNt ?
.bdca	f0 01		beq $bdcd			beq _short
.bdcc	c8		iny				iny			;   skip extra byte
.bdcd	b1 14		lda ($14),y	_short:		lda (tmp1),y		; tmp2= xt pointer
.bdcf	85 16		sta $16				sta tmp2+0
.bdd1	c8		iny				iny
.bdd2	b1 14		lda ($14),y			lda (tmp1),y
.bdd4	85 17		sta $17				sta tmp2+1
.bdd6	60		rts				rts
>bdd7	4e 61 6d 65 3e 53 74 72		Name0:	.text "Name>String"	;  name of word as a string, ending at wh_NameLastChar
>bddf	69 6e 67
=11					NameLength = *-Name0
=48482					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bde2	eb					.byte (("Name>String"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=73					LinkDisplacement = Nt0-WordListLink
>bde3	50					.byte WordFlags	;wh_Flags
>bde4	03					.byte 3	;wh_CodeLength
>bde5	49					  .byte LinkDisplacement	; offset to previous nt
=$bde6					XtPtr1 ::= *
=48482					WordListLink ::= Nt0 ; remember the nt of this word for later
.bde6					Name_To_String:
.bde6	20 1d b4	jsr $b41d			jsr underflow_1
.bde9	b5 24		lda $24,x			lda DStack+0,x		; tmp1= nt
.bdeb	b4 25		ldy $25,x			ldy DStack+1,x
.bded	85 14		sta $14				sta tmp1+0
.bdef	84 15		sty $15				sty tmp1+1		; ( nt )
.bdf1	a0 80		ldy #$80			ldy #Wh_HashNameLen
.bdf3	b1 14		lda ($14),y			lda (tmp1),y
.bdf5	29 1f		and #$1f			and #wh_HNL_NameLengthMask
.bdf7	48		pha				pha
.bdf8	49 ff		eor #$ff			eor #$ff
.bdfa	38		sec				sec
.bdfb	69 80		adc #$80			adc #Wh_NameLastChar+1	; calc string start offset
.bdfd	20 0c ca	jsr $ca0c			jsr Plus_A		; calc string start addr
.be00	68		pla				pla			; push string length
.be01	4c e2 b7	jmp $b7e2			jmp PushZA
=30					CodeLen	.var *-XtPtr1
=$be04					Here1 = *	; remember here
>bde4	1e					.byte CodeLen	;patch wh_CodeLength
>be04	3e 42 6f 64 79			Name0:	.text ">Body"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=48521					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be09	25					.byte ((">Body"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>be0a	50					.byte WordFlags	;wh_Flags
>be0b	03					.byte 3	;wh_CodeLength
>be0c	27					  .byte LinkDisplacement	; offset to previous nt
=$be0d					XtPtr1 ::= *
=48521					WordListLink ::= Nt0 ; remember the nt of this word for later
.be0d					To_Body:
.be0d	20 1d b4	jsr $b41d			jsr underflow_1
.be10	a9 03		lda #$03			lda #3		; PFA is after the beginning JSR abs
.be12	4c 0c ca	jmp $ca0c			jmp Plus_A
=8					CodeLen	.var *-XtPtr1
=$be15					Here1 = *	; remember here
>be0b	08					.byte CodeLen	;patch wh_CodeLength
>be15	45 72 61 73 65			Name0:	.text "Erase"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=48538					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be1a	a5					.byte (("Erase"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>be1b	10					.byte WordFlags	;wh_Flags
>be1c	03					.byte 3	;wh_CodeLength
>be1d	11					  .byte LinkDisplacement	; offset to previous nt
=$be1e					XtPtr1 ::= *
=48538					WordListLink ::= Nt0 ; remember the nt of this word for later
.be1e					Erase:
.be1e	20 f0 b7	jsr $b7f0			jsr Zero
.be21	4c 3b be	jmp $be3b			jmp Fill
=6					CodeLen	.var *-XtPtr1
=$be24					Here1 = *	; remember here
>be1c	06					.byte CodeLen	;patch wh_CodeLength
>be24	42 6c 61 6e 6b			Name0:	.text "Blank"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=48553					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be29	65					.byte (("Blank"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>be2a	10					.byte WordFlags	;wh_Flags
>be2b	03					.byte 3	;wh_CodeLength
>be2c	0f					  .byte LinkDisplacement	; offset to previous nt
=$be2d					XtPtr1 ::= *
=48553					WordListLink ::= Nt0 ; remember the nt of this word for later
.be2d					Blank:
.be2d	20 0c b8	jsr $b80c			jsr Bl
.be30	4c 3b be	jmp $be3b			jmp Fill
=6					CodeLen	.var *-XtPtr1
=$be33					Here1 = *	; remember here
>be2b	06					.byte CodeLen	;patch wh_CodeLength
>be33	46 69 6c 6c			Name0:	.text "Fill"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=48567					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be37	84					.byte (("Fill"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>be38	50					.byte WordFlags	;wh_Flags
>be39	03					.byte 3	;wh_CodeLength
>be3a	0e					  .byte LinkDisplacement	; offset to previous nt
=$be3b					XtPtr1 ::= *
=48567					WordListLink ::= Nt0 ; remember the nt of this word for later
.be3b					Fill:
.be3b	20 36 b4	jsr $b436			jsr underflow_3
.be3e	b5 28		lda $28,x			lda DStack+4,x		; tmp1= address
.be40	85 14		sta $14				sta tmp1+0
.be42	b5 29		lda $29,x			lda DStack+5,x
.be44	85 15		sta $15				sta tmp1+1
.be46	b5 26		lda $26,x			lda DStack+2,x		; tmp2= counter.lo
.be48	85 16		sta $16				sta tmp2+0
.be4a	f6 27		inc $27,x			inc DStack+3,x		; so decrement & test for 0 works
.be4c	b5 24		lda $24,x			lda DStack+0,x		; A= fill byte
.be4e	a0 00		ldy #$00			ldy #0
.be50	c4 16		cpy $16		_loop:		cpy tmp2+0		; done?
.be52	f0 09		beq $be5d			beq _test2
.be54	91 14		sta ($14),y	_3:		sta (tmp1),y		; store a byte
.be56	c8		iny				iny			; to next byte
.be57	d0 f7		bne $be50			bne _loop
.be59	e6 15		inc $15				inc tmp1+1		; increment addr page
.be5b	d0 f3		bne $be50			bne _loop
.be5d	d6 27		dec $27,x	_test2:		dec DStack+3,x		; any more pages?
.be5f	d0 f3		bne $be54			bne _3
.be61	4c 8b ad	jmp $ad8b			jmp ThreeDrop	; Drop three cells off the Data Stack.
=41					CodeLen	.var *-XtPtr1
=$be64					Here1 = *	; remember here
>be39	29					.byte CodeLen	;patch wh_CodeLength
>be64	56 61 72 69 61 62 6c 65		Name0:	.text "Variable"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=48620					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be6c	a8					.byte (("Variable"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>be6d	10					.byte WordFlags	;wh_Flags
>be6e	03					.byte 3	;wh_CodeLength
>be6f	35					  .byte LinkDisplacement	; offset to previous nt
=$be70					XtPtr1 ::= *
=48620					WordListLink ::= Nt0 ; remember the nt of this word for later
.be70	20 a9 c1	jsr $c1a9	Variable:	jsr Create		; compile word header & push PFA
.be73	a9 00		lda #$00			lda #0			; allot & initialize the variable's data
.be75	a8		tay				tay
.be76	4c fe cc	jmp $ccfe			jmp Comma_YA
=9					CodeLen	.var *-XtPtr1
=$be79					Here1 = *	; remember here
>be6e	09					.byte CodeLen	;patch wh_CodeLength
>be79	32 56 61 72 69 61 62 6c		Name0:	.text "2Variable"	;  name of word as a string, ending at wh_NameLastChar
>be81	65
=9					NameLength = *-Name0
=48642					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be82	a9					.byte (("2Variable"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>be83	10					.byte WordFlags	;wh_Flags
>be84	03					.byte 3	;wh_CodeLength
>be85	16					  .byte LinkDisplacement	; offset to previous nt
=$be86					XtPtr1 ::= *
=48642					WordListLink ::= Nt0 ; remember the nt of this word for later
.be86	20 70 be	jsr $be70	Two_variable:	jsr Variable		; compile word header & push PFA & 1st cell of data
.be89	4c fe cc	jmp $ccfe			jmp Comma_YA		; alloc & init 2nd cell of data
=6					CodeLen	.var *-XtPtr1
=$be8c					Here1 = *	; remember here
>be84	06					.byte CodeLen	;patch wh_CodeLength
>be8c	43 6f 6e 73 74 61 6e 74		Name0:	.text "Constant"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=48660					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be94	88					.byte (("Constant"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>be95	50					.byte WordFlags	;wh_Flags
>be96	03					.byte 3	;wh_CodeLength
>be97	12					  .byte LinkDisplacement	; offset to previous nt
=$be98					XtPtr1 ::= *
=48660					WordListLink ::= Nt0 ; remember the nt of this word for later
.be98					Constant:
.be98	20 1d b4	jsr $b41d			jsr underflow_1
.be9b	20 fb c0	jsr $c0fb			jsr Header_Comma	; compile word header
.be9e	20 71 b7	jsr $b771			jsr LitCompile		; compile code to load registers, & pick a subroutine
.bea1	20 3e cd	jsr $cd3e			jsr Jmp_Comma_NT_YA	; compile code to JMP to the subroutine
.bea4	4c cf bb	jmp $bbcf			jmp adjust_z		; fix word length
=15					CodeLen	.var *-XtPtr1
=$bea7					Here1 = *	; remember here
>be96	0f					.byte CodeLen	;patch wh_CodeLength
>bea7	32 43 6f 6e 73 74 61 6e		Name0:	.text "2Constant"	;  name of word as a string, ending at wh_NameLastChar
>beaf	74
=9					NameLength = *-Name0
=48688					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>beb0	89					.byte (("2Constant"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>beb1	50					.byte WordFlags	;wh_Flags
>beb2	03					.byte 3	;wh_CodeLength
>beb3	1c					  .byte LinkDisplacement	; offset to previous nt
=$beb4					XtPtr1 ::= *
=48688					WordListLink ::= Nt0 ; remember the nt of this word for later
.beb4					Two_constant:
.beb4	20 31 b4	jsr $b431			jsr underflow_2
.beb7	20 fb c0	jsr $c0fb			jsr Header_Comma	; compile word header
.beba	20 73 cf	jsr $cf73			jsr Swap
.bebd	20 68 b7	jsr $b768			jsr Literal		; compile push lo cell
.bec0	20 71 b7	jsr $b771			jsr LitCompile		; compile push hi cell, YA=exit routine
.bec3	20 3e cd	jsr $cd3e			jsr Jmp_Comma_NT_YA	; compile JMP from above
.bec6	4c cf bb	jmp $bbcf			jmp adjust_z		; fix word length
=21					CodeLen	.var *-XtPtr1
=$bec9					Here1 = *	; remember here
>beb2	15					.byte CodeLen	;patch wh_CodeLength
>bec9	56 61 6c 75 65			Name0:	.text "Value"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=48718					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bece	a5					.byte (("Value"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>becf	50					.byte WordFlags	;wh_Flags
>bed0	03					.byte 3	;wh_CodeLength
>bed1	1e					  .byte LinkDisplacement	; offset to previous nt
=$bed2					XtPtr1 ::= *
=48718					WordListLink ::= Nt0 ; remember the nt of this word for later
.bed2					Value:
.bed2	20 1d b4	jsr $b41d			jsr underflow_1
.bed5	20 fb c0	jsr $c0fb			jsr Header_Comma	; compile word header
.bed8	20 9a b7	jsr $b79a			jsr ldya_immed_comma	; compile lda # & ldy #
.bedb	a9 b3		lda #$b3			lda #<PushYA		; compile jmp PushYA
.bedd	a0 b7		ldy #$b7			ldy #>PushYA
.bedf	20 37 cd	jsr $cd37			jsr Jmp_Comma_YA
.bee2	4c cf bb	jmp $bbcf			jmp adjust_z		; fix word length
=19					CodeLen	.var *-XtPtr1
=$bee5					Here1 = *	; remember here
>bed0	13					.byte CodeLen	;patch wh_CodeLength
>bee5	32 56 61 6c 75 65		Name0:	.text "2Value"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=48747					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>beeb	a6					.byte (("2Value"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>beec	50					.byte WordFlags	;wh_Flags
>beed	03					.byte 3	;wh_CodeLength
>beee	1d					  .byte LinkDisplacement	; offset to previous nt
=$beef					XtPtr1 ::= *
=48747					WordListLink ::= Nt0 ; remember the nt of this word for later
.beef					TwoValue:
.beef	20 31 b4	jsr $b431			jsr underflow_2
.bef2	20 fb c0	jsr $c0fb			jsr Header_Comma	; compile word header
.bef5	a9 02		lda #$02			lda #<TwoValue_Runtime	; compile JSR TValue_Runtime
.bef7	a0 bf		ldy #$bf			ldy #>TwoValue_Runtime
.bef9	20 21 cd	jsr $cd21			jsr Jsr_Comma_YA
.befc	20 cf bb	jsr $bbcf			jsr adjust_z		; fix word length
.beff	4c 0b cd	jmp $cd0b			jmp Two_Comma		; compile the value, return
=19					CodeLen	.var *-XtPtr1
=$bf02					Here1 = *	; remember here
>beed	13					.byte CodeLen	;patch wh_CodeLength
.bf02					TwoValue_Runtime:
.bf02	68		pla				pla			; pop RTS addr
.bf03	85 14		sta $14				sta tmp1+0
.bf05	68		pla				pla
.bf06	85 15		sta $15				sta tmp1+1
.bf08	a0 01		ldy #$01			ldy #1			; start at offset 1 (for RTS addr behavior)
.bf0a	4c b0 c5	jmp $c5b0			jmp Two_Fetch_Tmp1Y	; fetch the data, return
>bf0d	54 6f				Name0:	.text "To"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=48783					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bf0f	e2					.byte (("To"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= NN+IM	; modifiable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>bf10	18					.byte WordFlags	;wh_Flags
>bf11	03					.byte 3	;wh_CodeLength
>bf12	24					  .byte LinkDisplacement	; offset to previous nt
=$bf13					XtPtr1 ::= *
=48783					WordListLink ::= Nt0 ; remember the nt of this word for later
.bf13					To:
.bf13	20 35 bc	jsr $bc35			jsr Tick		; We always need the xt of the target word
.bf16	b5 24		lda $24,x			lda DStack+0,x		; tmp1= xt
.bf18	b4 25		ldy $25,x			ldy DStack+1,x
.bf1a	85 14		sta $14				sta tmp1+0
.bf1c	84 15		sty $15				sty tmp1+1
.bf1e	a0 00		ldy #$00			ldy #0			; determine what type xt points at
.bf20	b1 14		lda ($14),y			lda (tmp1),y
.bf22	c9 a0		cmp #$a0			cmp #$a0		;   LDY #
.bf24	d0 38		bne $bf5e			bne _Test2
.bf26	a5 0a		lda $0a				lda state		; check compile state
.bf28	f0 20		beq $bf4a			beq _Value_interpret
.bf2a	a9 f4		lda #$f4			lda #<PopYA		; compile jsr PopYA
.bf2c	a0 b3		ldy #$b3			ldy #>PopYA
.bf2e	20 21 cd	jsr $cd21			jsr Jsr_Comma_YA
.bf31	a9 8c		lda #$8c			lda #$8C		; compile STY xt+1
.bf33	20 e7 cc	jsr $cce7			jsr C_Comma_A
.bf36	20 5a ca	jsr $ca5a			jsr One_plus
.bf39	20 56 cf	jsr $cf56			jsr Dup
.bf3c	20 fb cc	jsr $ccfb			jsr Comma
.bf3f	a9 8d		lda #$8d			lda #$8D		; compile STA xt+3
.bf41	20 e7 cc	jsr $cce7			jsr C_Comma_A
.bf44	20 07 ca	jsr $ca07			jsr Cell_Plus
.bf47	4c fb cc	jmp $ccfb			jmp Comma
.bf4a					_Value_interpret:
.bf4a	20 31 b4	jsr $b431			jsr underflow_2		; ( n xt )
.bf4d	e8		inx				inx			; Drop xt
.bf4e	e8		inx				inx
.bf4f	b5 24		lda $24,x			lda DStack+0,x		; LSB
.bf51	a0 03		ldy #$03			ldy #3			;   modify LDA # data
.bf53	91 14		sta ($14),y			sta (tmp1),y
.bf55	b5 25		lda $25,x			lda DStack+1,x		; MSB
.bf57	a0 01		ldy #$01			ldy #1			;   modify LDY # data
.bf59	91 14		sta ($14),y			sta (tmp1),y
.bf5b	e8		inx				inx			; Drop n
.bf5c	e8		inx				inx
.bf5d	60		rts				rts
.bf5e	c9 20		cmp #$20	_Test2:		cmp #$20		;   JSR abs ?
.bf60	d0 33		bne $bf95			bne _Err
.bf62	a9 03		lda #$03			lda #3			; advance xt over the JSR abs to the data
.bf64	20 0c ca	jsr $ca0c			jsr Plus_A
.bf67	a0 01		ldy #$01			ldy #1			; get JSR abs addr lo byte
.bf69	b1 14		lda ($14),y			lda (tmp1),y
.bf6b	c9 02		cmp #$02			cmp #<TwoValue_Runtime
.bf6d	d0 11		bne $bf80			bne _Test3
.bf6f	a5 0a		lda $0a				lda state		; check compile state
.bf71	f0 0a		beq $bf7d			beq _2Value_runtime
.bf73	20 9a b7	jsr $b79a			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bf76	a9 83		lda #$83			lda #<Two_Store_YA
.bf78	a0 c5		ldy #$c5			ldy #>Two_Store_YA
.bf7a	4c 21 cd	jmp $cd21			jmp Jsr_Comma_YA	; compile JSR Two_Store_YA; return
.bf7d	4c 7d c5	jmp $c57d	_2Value_runtime: jmp Two_Store
.bf80					_Test3:
.bf80	c9 59		cmp #$59			cmp #<FValue_runtime
.bf82	d0 11		bne $bf95			bne _Err
.bf84	a5 0a		lda $0a				lda state		; check compile state
.bf86	f0 0a		beq $bf92			beq _FValue_interpret
.bf88	20 9a b7	jsr $b79a			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bf8b	a9 77		lda #$77			lda #<FStore_YA
.bf8d	a0 86		ldy #$86			ldy #>FStore_YA
.bf8f	4c 21 cd	jmp $cd21			jmp Jsr_Comma_YA	; compile JSR FStore_YA; return
.bf92	4c 74 86	jmp $8674	_FValue_interpret: jmp FStore
.bf95	a9 e0		lda #$e0	_Err:		lda #$100+err_InvalidName ; unrecognized type.
.bf97	20 79 b4	jsr $b479			jsr ThrowA
=135					CodeLen	.var *-XtPtr1
=$bf9a					Here1 = *	; remember here
>bf11	87					.byte CodeLen	;patch wh_CodeLength
>bf9a	44 4d 61 78			Name0:	.text "DMax"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=48926					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bf9e	04					.byte (("DMax"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=143					LinkDisplacement = Nt0-WordListLink
>bf9f	10					.byte WordFlags	;wh_Flags
>bfa0	03					.byte 3	;wh_CodeLength
>bfa1	8f					  .byte LinkDisplacement	; offset to previous nt
=$bfa2					XtPtr1 ::= *
=48926					WordListLink ::= Nt0 ; remember the nt of this word for later
.bfa2	a9 80		lda #$80	DMax:		lda #$80
.bfa4	d0 0a		bne $bfb0			bne DMin3
=4					CodeLen	.var *-XtPtr1
=$bfa6					Here1 = *	; remember here
>bfa0	04					.byte CodeLen	;patch wh_CodeLength
>bfa6	44 4d 69 6e			Name0:	.text "DMin"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=48938					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bfaa	c4					.byte (("DMin"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>bfab	10					.byte WordFlags	;wh_Flags
>bfac	03					.byte 3	;wh_CodeLength
>bfad	0c					  .byte LinkDisplacement	; offset to previous nt
=$bfae					XtPtr1 ::= *
=48938					WordListLink ::= Nt0 ; remember the nt of this word for later
.bfae	a9 00		lda #$00	DMin:		lda #0
.bfb0	85 16		sta $16		DMin3:		sta tmp2	; save sign correction
.bfb2	20 3b b4	jsr $b43b			jsr underflow_4
.bfb5	b5 26		lda $26,x			lda DStack+2,x	; compare
.bfb7	d5 2a		cmp $2a,x			cmp DStack+6,x
.bfb9	b5 27		lda $27,x			lda DStack+3,x
.bfbb	f5 2b		sbc $2b,x			sbc DStack+7,x
.bfbd	b5 24		lda $24,x			lda DStack+0,x
.bfbf	f5 28		sbc $28,x			sbc DStack+4,x
.bfc1	b5 25		lda $25,x			lda DStack+1,x
.bfc3	f5 29		sbc $29,x			sbc DStack+5,x
.bfc5	50 02		bvc $bfc9			bvc +
.bfc7	49 80		eor #$80			eor #$80	; fix sign
.bfc9	45 16		eor $16		+		eor tmp2
.bfcb	30 0e		bmi $bfdb			bmi TwoNip_nouf	; if negative, NOS is larger and needs to be kept
.bfcd	4c 36 c5	jmp $c536			jmp Two_Drop
=34					CodeLen	.var *-XtPtr1
=$bfd0					Here1 = *	; remember here
>bfac	22					.byte CodeLen	;patch wh_CodeLength
>bfd0	32 4e 69 70			Name0:	.text "2Nip"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=48980					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bfd4	04					.byte (("2Nip"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>bfd5	50					.byte WordFlags	;wh_Flags
>bfd6	03					.byte 3	;wh_CodeLength
>bfd7	2a					  .byte LinkDisplacement	; offset to previous nt
=$bfd8					XtPtr1 ::= *
=48980					WordListLink ::= Nt0 ; remember the nt of this word for later
.bfd8	20 3b b4	jsr $b43b	TwoNip:		jsr underflow_4
.bfdb	b5 24		lda $24,x	TwoNip_NoUf:	lda DStack+0,x	; copy dTOS to dNOS
.bfdd	95 28		sta $28,x			sta DStack+4,x
.bfdf	b5 25		lda $25,x			lda DStack+1,x
.bfe1	95 29		sta $29,x			sta DStack+5,x
.bfe3	b5 26		lda $26,x			lda DStack+2,x
.bfe5	95 2a		sta $2a,x			sta DStack+6,x
.bfe7	b5 27		lda $27,x			lda DStack+3,x
.bfe9	95 2b		sta $2b,x			sta DStack+7,x
.bfeb	4c 36 c5	jmp $c536			jmp Two_Drop
=22					CodeLen	.var *-XtPtr1
=$bfee					Here1 = *	; remember here
>bfd6	16					.byte CodeLen	;patch wh_CodeLength
>bfee	53 3e 44			Name0:	.text "S>D"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=49009					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bff1	83					.byte (("S>D"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>bff2	40					.byte WordFlags	;wh_Flags
>bff3	03					.byte 3	;wh_CodeLength
>bff4	1d					  .byte LinkDisplacement	; offset to previous nt
=$bff5					XtPtr1 ::= *
=49009					WordListLink ::= Nt0 ; remember the nt of this word for later
.bff5					S_To_D:
.bff5	20 1d b4	jsr $b41d			jsr underflow_1
.bff8	a0 00		ldy #$00			ldy #0			; assume positive
.bffa	b5 25		lda $25,x			lda DStack+1,x		; test n
.bffc	10 01		bpl $bfff			bpl +
.bffe	88		dey				dey			; make negative
.bfff					+
.bfff	ca		dex				dex			; push new hi cell
.c000	ca		dex				dex
.c001	94 24		sty $24,x			sty DStack+0,x
.c003	94 25		sty $25,x			sty DStack+1,x
=16					CodeLen	.var *-XtPtr1
=$c005					Here1 = *	; remember here
>bff3	10					.byte CodeLen	;patch wh_CodeLength
.c005	60		rts				rts
>c006	44 3e 53			Name0:	.text "D>S"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=49033					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c009	63					.byte (("D>S"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>c00a	40					.byte WordFlags	;wh_Flags
>c00b	03					.byte 3	;wh_CodeLength
>c00c	18					  .byte LinkDisplacement	; offset to previous nt
=$c00d					XtPtr1 ::= *
=49033					WordListLink ::= Nt0 ; remember the nt of this word for later
.c00d					D_To_S:
.c00d	20 31 b4	jsr $b431			jsr underflow_2
.c010	e8		inx				inx		; Drop hi cell
.c011	e8		inx				inx
=5					CodeLen	.var *-XtPtr1
=$c012					Here1 = *	; remember here
>c00b	05					.byte CodeLen	;patch wh_CodeLength
.c012	60		rts				rts
>c013	44 2d				Name0:	.text "D-"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=49045					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c015	a2					.byte (("D-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c016	40					.byte WordFlags	;wh_Flags
>c017	03					.byte 3	;wh_CodeLength
>c018	0c					  .byte LinkDisplacement	; offset to previous nt
=$c019					XtPtr1 ::= *
=49045					WordListLink ::= Nt0 ; remember the nt of this word for later
.c019					D_Minus:
.c019	20 3b b4	jsr $b43b			jsr underflow_4 ; two double numbers
.c01c	38		sec				sec
.c01d	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of lower word
.c01f	f5 26		sbc $26,x			sbc DStack+2,x
.c021	95 2a		sta $2a,x			sta DStack+6,x
.c023	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of lower word
.c025	f5 27		sbc $27,x			sbc DStack+3,x
.c027	95 2b		sta $2b,x			sta DStack+7,x
.c029	b5 28		lda $28,x			lda DStack+4,x	; LSB of upper word
.c02b	f5 24		sbc $24,x			sbc DStack+0,x
.c02d	95 28		sta $28,x			sta DStack+4,x
.c02f	b5 29		lda $29,x			lda DStack+5,x	; MSB of upper word
.c031	f5 25		sbc $25,x			sbc DStack+1,x
.c033	95 29		sta $29,x			sta DStack+5,x
.c035	e8		inx				inx
.c036	e8		inx				inx
.c037	e8		inx				inx
.c038	e8		inx				inx
=32					CodeLen	.var *-XtPtr1
=$c039					Here1 = *	; remember here
>c017	20					.byte CodeLen	;patch wh_CodeLength
.c039	60		rts				rts
>c03a	44 2b				Name0:	.text "D+"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=49084					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c03c	62					.byte (("D+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c03d	40					.byte WordFlags	;wh_Flags
>c03e	03					.byte 3	;wh_CodeLength
>c03f	27					  .byte LinkDisplacement	; offset to previous nt
=$c040					XtPtr1 ::= *
=49084					WordListLink ::= Nt0 ; remember the nt of this word for later
.c040					D_Plus:
.c040	20 3b b4	jsr $b43b			jsr underflow_4 ; two double numbers
.c043	18		clc				clc
.c044	b5 26		lda $26,x			lda DStack+2,x	; LSB of lower word
.c046	75 2a		adc $2a,x			adc DStack+6,x
.c048	95 2a		sta $2a,x			sta DStack+6,x
.c04a	b5 27		lda $27,x			lda DStack+3,x	; MSB of lower word
.c04c	75 2b		adc $2b,x			adc DStack+7,x
.c04e	95 2b		sta $2b,x			sta DStack+7,x
.c050	b5 24		lda $24,x			lda DStack+0,x	; LSB of upper word
.c052	75 28		adc $28,x			adc DStack+4,x
.c054	95 28		sta $28,x			sta DStack+4,x
.c056	b5 25		lda $25,x			lda DStack+1,x	; MSB of upper word
.c058	75 29		adc $29,x			adc DStack+5,x
.c05a	95 29		sta $29,x			sta DStack+5,x
.c05c	e8		inx				inx
.c05d	e8		inx				inx
.c05e	e8		inx				inx
.c05f	e8		inx				inx
=32					CodeLen	.var *-XtPtr1
=$c060					Here1 = *	; remember here
>c03e	20					.byte CodeLen	;patch wh_CodeLength
.c060	60		rts				rts
>c061	44 31 2b			Name0:	.text "D1+"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=49124					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c064	63					.byte (("D1+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=40					LinkDisplacement = Nt0-WordListLink
>c065	40					.byte WordFlags	;wh_Flags
>c066	03					.byte 3	;wh_CodeLength
>c067	28					  .byte LinkDisplacement	; offset to previous nt
=$c068					XtPtr1 ::= *
=49124					WordListLink ::= Nt0 ; remember the nt of this word for later
.c068	20 31 b4	jsr $b431	D1Plus:		jsr underflow_2
.c06b	f6 26		inc $26,x			inc DStack+2,x
.c06d	d0 0a		bne $c079			bne +
.c06f	f6 27		inc $27,x			inc DStack+3,x
.c071	d0 06		bne $c079			bne +
.c073	f6 24		inc $24,x			inc DStack+0,x
.c075	d0 02		bne $c079			bne +
.c077	f6 25		inc $25,x			inc DStack+1,x
.c079					+
=17					CodeLen	.var *-XtPtr1
=$c079					Here1 = *	; remember here
>c066	11					.byte CodeLen	;patch wh_CodeLength
.c079	60		rts				rts
>c07a	44 31 2d			Name0:	.text "D1-"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=49149					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c07d	a3					.byte (("D1-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>c07e	40					.byte WordFlags	;wh_Flags
>c07f	03					.byte 3	;wh_CodeLength
>c080	19					  .byte LinkDisplacement	; offset to previous nt
=$c081					XtPtr1 ::= *
=49149					WordListLink ::= Nt0 ; remember the nt of this word for later
.c081	20 31 b4	jsr $b431	D1Minus:	jsr underflow_2
.c084	b5 26		lda $26,x			lda DStack+2,x
.c086	d0 0e		bne $c096			bne _1
.c088	b5 27		lda $27,x			lda DStack+3,x
.c08a	d0 08		bne $c094			bne _2
.c08c	b5 24		lda $24,x			lda DStack+0,x
.c08e	d0 02		bne $c092			bne _3
.c090	d6 25		dec $25,x			dec DStack+1,x
.c092	d6 24		dec $24,x	_3:		dec DStack+0,x
.c094	d6 27		dec $27,x	_2:		dec DStack+3,x
.c096	d6 26		dec $26,x	_1:		dec DStack+2,x
=23					CodeLen	.var *-XtPtr1
=$c098					Here1 = *	; remember here
>c07f	17					.byte CodeLen	;patch wh_CodeLength
.c098	60		rts				rts
>c099	41 6c 6c 6f 74			Name0:	.text "Allot"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=49182					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c09e	85					.byte (("Allot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c09f	50					.byte WordFlags	;wh_Flags
>c0a0	03					.byte 3	;wh_CodeLength
>c0a1	21					  .byte LinkDisplacement	; offset to previous nt
=$c0a2					XtPtr1 ::= *
=49182					WordListLink ::= Nt0 ; remember the nt of this word for later
.c0a2					Allot:
.c0a2	20 1d b4	jsr $b41d			jsr underflow_1
.c0a5	18		clc				clc			; adjust cp
.c0a6	b5 24		lda $24,x			lda DStack+0,x
.c0a8	65 00		adc $00				adc cp+0
.c0aa	85 00		sta $00				sta cp+0
.c0ac	a8		tay				tay			;   save lo byte
.c0ad	b5 25		lda $25,x			lda DStack+1,x
.c0af	85 14		sta $14				sta tmp1
.c0b1	65 01		adc $01				adc cp+1
.c0b3	85 01		sta $01				sta cp+1
.c0b5	24 14		bit $14				bit tmp1
.c0b7	30 15		bmi $c0ce			bmi _release
.c0b9	b0 06		bcs $c0c1			bcs _pos_err		; carry from the add is bad
=32600					_last = cp_end-2*PadOffset
.c0bb	c0 58		cpy #$58			cpy #<_last		; cp < cp_end ?
.c0bd	e9 7f		sbc #$7f			sbc #>_last
.c0bf	90 2c		bcc $c0ed			bcc _done		; we're fine.
.c0c1					_pos_err:
.c0c1	a9 58		lda #$58			lda #<_last
.c0c3	85 00		sta $00				sta cp+0
.c0c5	a9 7f		lda #$7f			lda #>_last
.c0c7	85 01		sta $01				sta cp+1
.c0c9	a9 c5		lda #$c5			lda #$100+err_Allocate
.c0cb	4c 79 b4	jmp $b479			jmp ThrowA
.c0ce					_release:
.c0ce	90 06		bcc $c0d6			bcc _neg_err		; borrow indicates we've gone below 0
.c0d0	c0 66		cpy #$66			cpy #<cp0
.c0d2	e9 0b		sbc #$0b			sbc #>cp0
.c0d4	b0 17		bcs $c0ed			bcs _done
.c0d6					_neg_err:
.c0d6	a9 66		lda #$66			lda #<cp0		; Set CP to CP0
.c0d8	85 00		sta $00				sta cp+0
.c0da	a9 0b		lda #$0b			lda #>cp0
.c0dc	85 01		sta $01				sta cp+1
.c0de	a9 0b		lda #$0b			lda #<forth_dictionary_start	; set WordLists[Forth] to the first
.c0e0	8d 12 03	sta $0312			sta WordlistsV+0		; word in ROM
.c0e3	a9 cf		lda #$cf			lda #>forth_dictionary_start
.c0e5	8d 13 03	sta $0313			sta WordlistsV+1
.c0e8	a9 c4		lda #$c4			lda #$100+err_Free		; abort with an error
.c0ea	4c 79 b4	jmp $b479			jmp ThrowA
.c0ed					_done:
.c0ed	e8		inx				inx			; Drop n
.c0ee	e8		inx				inx
=77					CodeLen	.var *-XtPtr1
=$c0ef					Here1 = *	; remember here
>c0a0	4d					.byte CodeLen	;patch wh_CodeLength
.c0ef	60		rts				rts
>c0f0	48 65 61 64 65 72 2c		Name0:	.text "Header,"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=49271					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c0f7	87					.byte (("Header,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=89					LinkDisplacement = Nt0-WordListLink
>c0f8	10					.byte WordFlags	;wh_Flags
>c0f9	03					.byte 3	;wh_CodeLength
>c0fa	59					  .byte LinkDisplacement	; offset to previous nt
=$c0fb					XtPtr1 ::= *
=49271					WordListLink ::= Nt0 ; remember the nt of this word for later
.c0fb					Header_Comma:
.c0fb	20 09 c1	jsr $c109			jsr Header_Build
.c0fe					Header_Link:
.c0fe	a5 0e		lda $0e				lda WorkWord+0		; dp= WorkWord
.c100	85 10		sta $10				sta dp+0
.c102	a5 0f		lda $0f				lda WorkWord+1
.c104	85 11		sta $11				sta dp+1
.c106	4c 53 ba	jmp $ba53			jmp dp_to_current	; Update the CURRENT wordlist with the new DP.
.c109					Header_Build:
.c109	20 a2 ba	jsr $baa2			jsr parse_name_check	; get name string, throw error if empty string
.c10c	20 a4 cc	jsr $cca4			jsr Two_dup		; ( addr u addr u )
.c10f	20 5e a1	jsr $a15e			jsr Get_Current
.c112	20 c8 a1	jsr $a1c8			jsr Search_WordList	; ( addr u xt f ) or ( addr u 0 )
.c115	e8		inx				inx			; pop flag.
.c116	e8		inx				inx
.c117	b5 22		lda $22,x			lda DStack-2,x		; not found?
.c119	f0 21		beq $c13c			beq _new_name		; We haven't seen this one before.
.c11b	e8		inx				inx			; Drop xt
.c11c	e8		inx				inx
.c11d	24 0c		bit $0c				bit status		; Check bit 7
.c11f	10 08		bpl $c129			bpl _redefined_name	; Bit 7 is zero, so print the message.
.c121	a9 80		lda #$80			lda #$80		; Set bit 7 to indicate dup
.c123	05 0c		ora $0c				ora status
.c125	85 0c		sta $0c				sta status
.c127	d0 19		bne $c142			bne _process_name
.c129					_redefined_name:
.c129	a9 19		lda #$19			lda #<str_redefined
.c12b	a0 da		ldy #$da			ldy #>str_redefined
.c12d	20 f3 cd	jsr $cdf3			jsr Print_ASCIIZ_YA_no_lf
.c130	20 a4 cc	jsr $cca4			jsr Two_dup		 ; ( addr u addr u )
.c133	20 d8 cd	jsr $cdd8			jsr Type
.c136	20 cc cd	jsr $cdcc			jsr Space
.c139	4c 42 c1	jmp $c142			jmp _process_name
.c13c					_new_name:
.c13c	a9 7f		lda #$7f			lda #$7F		; Clear bit 0 of status to indicate new word.
.c13e	25 0c		and $0c				and status
.c140	85 0c		sta $0c				sta status
.c142					_process_name:
.c142	20 a4 cc	jsr $cca4			jsr Two_dup		; compile name string ending at wh_NameLastChar
.c145	20 28 ca	jsr $ca28			jsr Here
.c148	20 73 cf	jsr $cf73			jsr Swap
.c14b	20 e1 ad	jsr $ade1			jsr CMove
.c14e	20 56 cf	jsr $cf56			jsr Dup			;   save length
.c151	20 a2 c0	jsr $c0a2			jsr Allot
.c154	38		sec				sec
.c155	a5 00		lda $00				lda cp+0		; WorkWord= nt
.c157	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.c159	85 0e		sta $0e				sta WorkWord+0
.c15b	a5 01		lda $01				lda cp+1
.c15d	e9 00		sbc #$00			sbc #0
.c15f	85 0f		sta $0f				sta WorkWord+1
.c161	a0 7f		ldy #$7f			ldy #wh_NameLastChar
.c163	b1 0e		lda ($0e),y			lda (WorkWord),y
.c165	0a		asl a				asl a
.c166	0a		asl a				asl a
.c167	0a		asl a				asl a
.c168	0a		asl a				asl a
.c169	0a		asl a				asl a
.c16a	15 24		ora $24,x			ora DStack+0,x
.c16c	95 24		sta $24,x			sta DStack+0,x
.c16e	20 e4 cc	jsr $cce4			jsr C_Comma		; compile wh_HashNameLen
.c171	e8		inx				inx			; drop name string addr
.c172	e8		inx				inx
.c173	a9 10		lda #$10			lda #NN			; compile wh_Flags
.c175	20 e7 cc	jsr $cce7			jsr C_Comma_A
.c178	a9 03		lda #$03			lda #3			; compile wh_CodeLength (temporary value, see adjust_z)
.c17a	20 e7 cc	jsr $cce7			jsr C_Comma_A
.c17d	20 43 ba	jsr $ba43			jsr current_to_dp	; Get the CURRENT dictionary pointer.
.c180	38		sec				sec
.c181	a5 0e		lda $0e				lda WorkWord+0
.c183	e5 10		sbc $10				sbc dp+0
.c185	a8		tay				tay
.c186	a5 0f		lda $0f				lda WorkWord+1
.c188	e5 11		sbc $11				sbc dp+1
.c18a	f0 0f		beq $c19b			beq _LinkShort
.c18c	a0 81		ldy #$81			ldy #wh_Flags		; set FP flag
.c18e	b1 0e		lda ($0e),y			lda (WorkWord),y
.c190	09 01		ora #$01			ora #FP
.c192	91 0e		sta ($0e),y			sta (WorkWord),y
.c194	a5 10		lda $10				lda dp+0		; compile wh_LinkNt ptr word
.c196	a4 11		ldy $11				ldy dp+1
.c198	4c fe cc	jmp $ccfe			jmp Comma_YA
.c19b	98		tya		_LinkShort:	tya			; compile wh_LinkNt offset byte
.c19c	4c e7 cc	jmp $cce7			jmp C_Comma_A
=164					CodeLen	.var *-XtPtr1
=$c19f					Here1 = *	; remember here
>c0f9	a4					.byte CodeLen	;patch wh_CodeLength
>c19f	43 72 65 61 74 65		Name0:	.text "Create"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=49445					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c1a5	a6					.byte (("Create"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=174					LinkDisplacement = Nt0-WordListLink
>c1a6	10					.byte WordFlags	;wh_Flags
>c1a7	03					.byte 3	;wh_CodeLength
>c1a8	ae					  .byte LinkDisplacement	; offset to previous nt
=$c1a9					XtPtr1 ::= *
=49445					WordListLink ::= Nt0 ; remember the nt of this word for later
.c1a9					Create:
.c1a9	20 fb c0	jsr $c0fb			jsr Header_Comma	; compile word header
.c1ac	a9 b6		lda #$b6			lda #<DoVar		; compile JSR DoVar
.c1ae	a0 c1		ldy #$c1			ldy #>DoVar
.c1b0	20 21 cd	jsr $cd21			jsr Jsr_Comma_YA
.c1b3	4c cf bb	jmp $bbcf			jmp adjust_z
=13					CodeLen	.var *-XtPtr1
=$c1b6					Here1 = *	; remember here
>c1a7	0d					.byte CodeLen	;patch wh_CodeLength
.c1b6					DoVar:
.c1b6	68		pla				pla		; Pull the return address off the machine's stack
.c1b7	18		clc				clc		;   +1 because of the way the JSR works
.c1b8	69 01		adc #$01			adc #1
.c1ba	ca		dex				dex		; push on data stack
.c1bb	ca		dex				dex
.c1bc	95 24		sta $24,x			sta DStack+0,x
.c1be	68		pla				pla
.c1bf	69 00		adc #$00			adc #0
.c1c1	95 25		sta $25,x			sta DStack+1,x
.c1c3	60		rts				rts		; takes us to the original caller of the
>c1c4	44 6f 65 73 3e			Name0:	.text "Does>"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=49481					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c1c9	c5					.byte (("Does>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>c1ca	1c					.byte WordFlags	;wh_Flags
>c1cb	03					.byte 3	;wh_CodeLength
>c1cc	24					  .byte LinkDisplacement	; offset to previous nt
=$c1cd					XtPtr1 ::= *
=49481					WordListLink ::= Nt0 ; remember the nt of this word for later
.c1cd					Does:
.c1cd	a0 c1		ldy #$c1			ldy #>_runtime		; compile JSR _runtime
.c1cf	a9 e7		lda #$e7			lda #<_runtime
.c1d1	20 21 cd	jsr $cd21			jsr Jsr_Comma_YA
.c1d4	a9 68		lda #$68			lda #$68		; compile PLA  to pop RTS addr (PFA-1) to AY
.c1d6	a0 a8		ldy #$a8			ldy #$a8		;    & TAY
.c1d8	20 fe cc	jsr $ccfe			jsr Comma_YA
.c1db	a9 68		lda #$68			lda #$68		; compile PLA
.c1dd	20 e7 cc	jsr $cce7			jsr C_Comma_A
.c1e0	a0 c2		ldy #$c2			ldy #>_DoDoes		; compile JSR _DoDoes
.c1e2	a9 04		lda #$04			lda #<_DoDoes
.c1e4	4c 21 cd	jmp $cd21			jmp Jsr_Comma_YA
=26					CodeLen	.var *-XtPtr1
=$c1e7					Here1 = *	; remember here
>c1cb	1a					.byte CodeLen	;patch wh_CodeLength
.c1e7					_runtime:
.c1e7	20 43 ba	jsr $ba43			jsr current_to_dp	; Grab the DP from the CURRENT wordlist.
.c1ea	a5 10		lda $10				lda dp+0		; tmp1= dp
.c1ec	a4 11		ldy $11				ldy dp+1
.c1ee	85 14		sta $14				sta tmp1+0
.c1f0	84 15		sty $15				sty tmp1+1
.c1f2	20 aa bd	jsr $bdaa			jsr NameToIntTmp	; tmp2= xt
.c1f5	18		clc				clc
.c1f6	68		pla				pla		; RTS addr LSB
.c1f7	69 01		adc #$01			adc #1		;   +1 for JSR bahavior
.c1f9	a0 01		ldy #$01			ldy #1
.c1fb	91 16		sta ($16),y			sta (tmp2),y
.c1fd	68		pla				pla		; RTS addr MSB
.c1fe	69 00		adc #$00			adc #0
.c200	c8		iny				iny
.c201	91 16		sta ($16),y			sta (tmp2),y
.c203	60		rts				rts
.c204					_DoDoes:
.c204	c8		iny				iny		; +1 for JSR behavior
.c205	d0 03		bne $c20a			bne +
.c207	18		clc				clc
.c208	69 01		adc #$01			adc #1
.c20a					+
.c20a	4c 64 cf	jmp $cf64			jmp PushAY
>c20d	55 6e 75 73 65 64		Name0:	.text "Unused"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=49555					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c213	86					.byte (("Unused"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=74					LinkDisplacement = Nt0-WordListLink
>c214	00					.byte WordFlags	;wh_Flags
>c215	03					.byte 3	;wh_CodeLength
>c216	4a					  .byte LinkDisplacement	; offset to previous nt
=$c217					XtPtr1 ::= *
=49555					WordListLink ::= Nt0 ; remember the nt of this word for later
.c217					Unused:
=32600					_last = cp_end-2*padoffset
.c217	ca		dex				dex
.c218	ca		dex				dex
.c219	38		sec				sec
.c21a	a9 58		lda #$58			lda #<_last
.c21c	e5 00		sbc $00				sbc cp+0
.c21e	95 24		sta $24,x			sta DStack+0,x
.c220	a9 7f		lda #$7f			lda #>_last
.c222	e5 01		sbc $01				sbc cp+1
.c224	95 25		sta $25,x			sta DStack+1,x
=15					CodeLen	.var *-XtPtr1
=$c226					Here1 = *	; remember here
>c215	0f					.byte CodeLen	;patch wh_CodeLength
.c226	60		rts				rts
>c227	44 65 70 74 68			Name0:	.text "Depth"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=49580					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c22c	05					.byte (("Depth"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>c22d	10					.byte WordFlags	;wh_Flags
>c22e	03					.byte 3	;wh_CodeLength
>c22f	19					  .byte LinkDisplacement	; offset to previous nt
=$c230					XtPtr1 ::= *
=49580					WordListLink ::= Nt0 ; remember the nt of this word for later
.c230					Depth:
.c230	a9 28		lda #$28			lda #DStack0	; A= DStack0 - X
.c232	86 1a		stx $1a				stx tmp4
.c234	38		sec				sec
.c235	e5 1a		sbc $1a				sbc tmp4
.c237	4a		lsr a				lsr		; divide by two because each cell is two bytes
.c238	4c e2 b7	jmp $b7e2			jmp PushZA
=11					CodeLen	.var *-XtPtr1
=$c23b					Here1 = *	; remember here
>c22e	0b					.byte CodeLen	;patch wh_CodeLength
>c23b	4b 65 79			Name0:	.text "Key"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=49598					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c23e	23					.byte (("Key"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>c23f	10					.byte WordFlags	;wh_Flags
>c240	03					.byte 3	;wh_CodeLength
>c241	12					  .byte LinkDisplacement	; offset to previous nt
=$c242					XtPtr1 ::= *
=49598					WordListLink ::= Nt0 ; remember the nt of this word for later
.c242	20 48 c2	jsr $c248	Key:		jsr key_a		; returns char in A
.c245	4c e2 b7	jmp $b7e2			jmp PushZA
=6					CodeLen	.var *-XtPtr1
=$c248					Here1 = *	; remember here
>c240	06					.byte CodeLen	;patch wh_CodeLength
.c248					Key_A:
.c248	6c 08 03	jmp ($0308)			jmp (input)		; JSR/RTS
>c24b	4b 65 79 3f			Name0:	.text "Key?"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=49615					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c24f	e4					.byte (("Key?"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>c250	10					.byte WordFlags	;wh_Flags
>c251	03					.byte 3	;wh_CodeLength
>c252	11					  .byte LinkDisplacement	; offset to previous nt
=$c253					XtPtr1 ::= *
=49615					WordListLink ::= Nt0 ; remember the nt of this word for later
.c253	20 59 c2	jsr $c259	KeyQ:		jsr KeyQ_A
.c256	4c e2 b7	jmp $b7e2			jmp PushZA
.c259	6c 0a 03	jmp ($030a)	KeyQ_A:		jmp (HaveKey)
>c25c	52 65 66 69 6c 6c		Name0:	.text "Refill"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=49634					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c262	86					.byte (("Refill"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>c263	10					.byte WordFlags	;wh_Flags
>c264	03					.byte 3	;wh_CodeLength
>c265	13					  .byte LinkDisplacement	; offset to previous nt
=$c266					XtPtr1 ::= *
=49634					WordListLink ::= Nt0 ; remember the nt of this word for later
.c266					Refill:
.c266	a9 00		lda #$00			lda #0			; show empty in case of error
.c268	85 06		sta $06				sta ciblen+0
.c26a	85 07		sta $07				sta ciblen+1
.c26c	a5 02		lda $02				lda insrc		; cheat: We only check LSB
.c26e	d0 24		bne $c294			bne _src_not_kbd
.c270	a5 04		lda $04				lda cib+0		; address of CIB is NOS
.c272	a4 05		ldy $05				ldy cib+1
.c274	20 b3 b7	jsr $b7b3			jsr PushYA
.c277	a9 ff		lda #$ff			lda #bsize		; max number of chars is TOS
.c279	20 e2 b7	jsr $b7e2			jsr PushZA		;  cheat: We only accept max 255
.c27c	20 aa c2	jsr $c2aa			jsr Accept		; ( addr n1 -- n2)
.c27f	b5 24		lda $24,x			lda DStack+0,x
.c281	85 06		sta $06				sta ciblen+0
.c283	b5 25		lda $25,x			lda DStack+1,x
.c285	85 07		sta $07				sta ciblen+1		; though we only accept 255 chars
.c287	a9 00		lda #$00			lda #0
.c289	85 08		sta $08				sta toin+0
.c28b	85 09		sta $09				sta toin+1
.c28d	a9 ff		lda #$ff			lda #$FF		; overwrite with TRUE flag
.c28f	95 24		sta $24,x			sta DStack+0,x
.c291	95 25		sta $25,x			sta DStack+1,x
.c293	60		rts				rts
.c294					_src_not_kbd:
.c294	c9 ff		cmp #$ff			cmp #$ff
.c296	d0 03		bne $c29b			bne _src_not_string
.c298	4c d4 b7	jmp $b7d4			jmp False
.c29b					_src_not_string:
.c29b	a9 eb		lda #$eb			lda #$100+err_Unsupported
.c29d	20 79 b4	jsr $b479			jsr ThrowA
=58					CodeLen	.var *-XtPtr1
=$c2a0					Here1 = *	; remember here
>c264	3a					.byte CodeLen	;patch wh_CodeLength
>c2a0	41 63 63 65 70 74		Name0:	.text "Accept"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=49702					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c2a6	86					.byte (("Accept"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=68					LinkDisplacement = Nt0-WordListLink
>c2a7	50					.byte WordFlags	;wh_Flags
>c2a8	03					.byte 3	;wh_CodeLength
>c2a9	44					  .byte LinkDisplacement	; offset to previous nt
=$c2aa					XtPtr1 ::= *
=49702					WordListLink ::= Nt0 ; remember the nt of this word for later
.c2aa					Accept:
.c2aa	20 31 b4	jsr $b431			jsr underflow_2
.c2ad	b5 24		lda $24,x			lda DStack+0,x		; Abort if we were asked to receive 0 chars
.c2af	15 25		ora $25,x			ora DStack+1,x
.c2b1	d0 09		bne $c2bc			bne _not_zero
.c2b3	e8		inx				inx			; drop n
.c2b4	e8		inx				inx
.c2b5	95 24		sta $24,x			sta DStack+0,x		; replace addr with 0
.c2b7	95 25		sta $25,x			sta DStack+1,x
.c2b9	4c 91 c3	jmp $c391			jmp accept_done
.c2bc					_not_zero:
.c2bc	b5 24		lda $24,x			lda DStack+0,x	; number of chars to get in tmp2 ...
.c2be	85 16		sta $16				sta tmp2
.c2c0	a9 00		lda #$00			lda #0
.c2c2	85 17		sta $17				sta tmp2+1	; ... but we only accept max 255 chars
.c2c4	b5 26		lda $26,x			lda DStack+2,x	; address of buffer is NOS, to tmp1
.c2c6	85 14		sta $14				sta tmp1
.c2c8	b5 27		lda $27,x			lda DStack+3,x
.c2ca	85 15		sta $15				sta tmp1+1
.c2cc	e8		inx				inx
.c2cd	e8		inx				inx
.c2ce	a0 00		ldy #$00			ldy #0
.c2d0	a5 0c		lda $0c				lda status
.c2d2	29 f7		and #$f7			and #$f7
.c2d4	18		clc				clc
.c2d5	69 01		adc #$01			adc #1
.c2d7	09 08		ora #$08			ora #$08
.c2d9	85 0c		sta $0c				sta status
.c2db					accept_loop:
.c2db	20 48 c2	jsr $c248			jsr key_a
.c2de	c9 0a		cmp #$0a			cmp #AscLF
.c2e0	f0 20		beq $c302			beq _eol
.c2e2	c9 0d		cmp #$0d			cmp #AscCR
.c2e4	f0 1c		beq $c302			beq _eol
.c2e6	c9 08		cmp #$08			cmp #AscBS
.c2e8	f0 24		beq $c30e			beq _backspace
.c2ea	c9 7f		cmp #$7f			cmp #AscDEL	; (CTRL-h)
.c2ec	f0 20		beq $c30e			beq _backspace
.c2ee	c9 10		cmp #$10			cmp #AscCP
.c2f0	f0 37		beq $c329			beq _ctrl_p
.c2f2	c9 0e		cmp #$0e			cmp #AscCN
.c2f4	f0 46		beq $c33c			beq _ctrl_n
.c2f6	91 14		sta ($14),y			sta (tmp1),y
.c2f8	c8		iny				iny
.c2f9	20 c0 cd	jsr $cdc0			jsr Emit_A
.c2fc	c4 16		cpy $16				cpy tmp2	; reached character limit?
.c2fe	d0 db		bne $c2db			bne accept_loop	      ; fall through if buffer limit reached
.c300	f0 03		beq $c305			beq _buffer_full
.c302					_eol:
.c302	20 cc cd	jsr $cdcc			jsr Space	; print final space
.c305					_buffer_full:
.c305	94 24		sty $24,x			sty DStack+0,x	; Y contains number of chars accepted already
.c307	a9 00		lda #$00			lda #0
.c309	95 25		sta $25,x			sta DStack+1,x		; we only accept 256 chars
.c30b	4c 91 c3	jmp $c391			jmp accept_done
.c30e					_backspace:
.c30e	c0 00		cpy #$00			cpy #0		; buffer empty?
.c310	d0 06		bne $c318			bne +
.c312	a9 07		lda #$07			lda #AscBELL	; complain and don't delete beyond the start of line
.c314	20 c0 cd	jsr $cdc0			jsr Emit_A
.c317	c8		iny				iny
.c318					+
.c318	88		dey				dey
.c319	a9 08		lda #$08			lda #AscBS	; move back one
.c31b	20 c0 cd	jsr $cdc0			jsr Emit_A
.c31e	20 cc cd	jsr $cdcc			jsr Space	; print a space (rubout)
.c321	a9 08		lda #$08			lda #AscBS	; move back over space
.c323	20 c0 cd	jsr $cdc0			jsr Emit_A
.c326	4c db c2	jmp $c2db			jmp accept_loop
.c329					_ctrl_p:
.c329	a5 0c		lda $0c				lda status
.c32b	29 07		and #$07			and #7
.c32d	d0 08		bne $c337			bne _ctrl_p_dec
.c32f	a5 0c		lda $0c				lda status
.c331	09 07		ora #$07			ora #7
.c333	85 0c		sta $0c				sta status
.c335	d0 14		bne $c34b			bne _recall_history
.c337					_ctrl_p_dec:
.c337	c6 0c		dec $0c				dec status
.c339	4c 4b c3	jmp $c34b			jmp _recall_history
.c33c					_ctrl_n:
.c33c	a9 08		lda #$08			lda #$8
.c33e	24 0c		bit $0c				bit status
.c340	d0 09		bne $c34b			bne _recall_history
.c342	a5 0c		lda $0c				lda status
.c344	29 f7		and #$f7			and #$f7
.c346	18		clc				clc
.c347	69 01		adc #$01			adc #1
.c349	85 0c		sta $0c				sta status
.c34b					_recall_history:
.c34b	a9 f7		lda #$f7			lda #$ff-%00001000
.c34d	25 0c		and $0c				and status
.c34f	85 0c		sta $0c				sta status
.c351	20 ac c3	jsr $c3ac			jsr accept_total_recall
.c354	a9 0d		lda #$0d			lda #AscCR
.c356	20 c0 cd	jsr $cdc0			jsr Emit_A
.c359					input_clear:
.c359	c0 00		cpy #$00			cpy #0
.c35b	f0 07		beq $c364			beq input_cleared
.c35d	20 cc cd	jsr $cdcc			jsr Space
.c360	88		dey				dey
.c361	4c 59 c3	jmp $c359			jmp input_clear
.c364					input_cleared:
.c364	a9 0d		lda #$0d			lda #AscCR
.c366	20 c0 cd	jsr $cdc0			jsr Emit_A
.c369	b1 18		lda ($18),y			lda (tmp3),y
.c36b	85 0d		sta $0d				sta status+1
.c36d	e6 18		inc $18				inc tmp3
.c36f	d0 02		bne $c373			bne +		; Increment the upper byte on carry.
.c371	e6 19		inc $19				inc tmp3+1
.c373					+
.c373	a9 0d		lda #$0d			lda #AscCR
.c375	20 c0 cd	jsr $cdc0			jsr Emit_A
.c378					_history_loop:
.c378	c4 0d		cpy $0d				cpy status+1
.c37a	d0 03		bne $c37f			bne +
.c37c	4c db c2	jmp $c2db			jmp accept_loop	      ; Needs a long jump
.c37f					+
.c37f	c4 16		cpy $16				cpy tmp2
.c381	f0 0a		beq $c38d			beq _hist_filled_buffer
.c383	b1 18		lda ($18),y			lda (tmp3),y
.c385	91 14		sta ($14),y			sta (tmp1),y
.c387	20 c0 cd	jsr $cdc0			jsr Emit_A
.c38a	c8		iny				iny
.c38b	d0 eb		bne $c378			bne _history_loop
.c38d					_hist_filled_buffer:
.c38d	88		dey				dey
.c38e	4c db c2	jmp $c2db			jmp accept_loop
.c391					accept_done:
.c391	20 ac c3	jsr $c3ac			jsr accept_total_recall
.c394	85 0d		sta $0d				sta status+1
.c396	a0 00		ldy #$00			ldy #0
.c398	91 18		sta ($18),y			sta (tmp3),y
.c39a	e6 18		inc $18				inc tmp3
.c39c	d0 02		bne $c3a0			bne +		; Increment the upper byte on carry.
.c39e	e6 19		inc $19				inc tmp3+1
.c3a0					+
.c3a0					_save_history_loop:
.c3a0	c4 0d		cpy $0d				cpy status+1
.c3a2	f0 07		beq $c3ab			beq _save_history_done
.c3a4	b1 14		lda ($14),y			lda (tmp1),y
.c3a6	91 18		sta ($18),y			sta (tmp3),y
.c3a8	c8		iny				iny
.c3a9	d0 f5		bne $c3a0			bne _save_history_loop
.c3ab					_save_history_done:
=257					CodeLen	.var *-XtPtr1
=$ff					CodeLen	 .var $ff
=$c3ab					Here1 = *	; remember here
>c2a8	ff					.byte CodeLen	;patch wh_CodeLength
.c3ab	60		rts				rts
.c3ac					accept_total_recall:
.c3ac	a9 66		lda #$66			lda #<hist_buff
.c3ae	85 18		sta $18				sta tmp3
.c3b0	a9 07		lda #$07			lda #>hist_buff
.c3b2	85 19		sta $19				sta tmp3+1
.c3b4	a5 0c		lda $0c				lda status
.c3b6	6a		ror a				ror
.c3b7	29 03		and #$03			and #3
.c3b9	18		clc				clc
.c3ba	65 19		adc $19				adc tmp3+1
.c3bc	85 19		sta $19				sta tmp3+1
.c3be	a5 0c		lda $0c				lda status
.c3c0	6a		ror a				ror		; Rotate through carry into msb.
.c3c1	6a		ror a				ror
.c3c2	29 80		and #$80			and #$80
.c3c4	18		clc				clc
.c3c5	65 18		adc $18				adc tmp3
.c3c7	85 18		sta $18				sta tmp3
.c3c9	90 02		bcc $c3cd			bcc +		; Increment the upper byte on carry.
.c3cb	e6 19		inc $19				inc tmp3+1
.c3cd					+
.c3cd	98		tya				tya
.c3ce	c9 80		cmp #$80			cmp #$80
.c3d0	90 02		bcc $c3d4			bcc +
.c3d2	a9 7f		lda #$7f			lda #$7F
.c3d4					+
.c3d4	60		rts				rts
>c3d5	49 6e 70 75 74 3e 52		Name0:	.text "Input>R"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=50012					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c3dc	47					.byte (("Input>R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$30					WordFlags ::= NN|ST	; modifiable copy, remember for later
=310					LinkDisplacement = Nt0-WordListLink
=$31						  WordFlags ::= WordFlags | FP
>c3dd	31					.byte WordFlags	;wh_Flags
>c3de	03					.byte 3	;wh_CodeLength
>c3df	26 c2					  .word WordListLink
=$c3e1					XtPtr1 ::= *
=50012					WordListLink ::= Nt0 ; remember the nt of this word for later
.c3e1					Input_To_R:
.c3e1	68		pla				pla			; move it out of the way
.c3e2	85 14		sta $14				sta tmp1+0
.c3e4	68		pla				pla
.c3e5	85 15		sta $15				sta tmp1+1
.c3e7	a0 07		ldy #$07			ldy #7
.c3e9	b9 02 00	lda $0002,y	_loop:		lda InSrc,y	; insrc+7 is toin+1
.c3ec	48		pha				pha
.c3ed	88		dey				dey
.c3ee	10 f9		bpl $c3e9			bpl _loop
.c3f0	a5 15		lda $15				lda tmp1+1		; Restore address for return jump
.c3f2	48		pha				pha
.c3f3	a5 14		lda $14				lda tmp1+0
.c3f5	48		pha				pha
=21					CodeLen	.var *-XtPtr1
=$c3f6					Here1 = *	; remember here
>c3de	15					.byte CodeLen	;patch wh_CodeLength
.c3f6	60		rts				rts
>c3f7	52 3e 49 6e 70 75 74		Name0:	.text "R>Input"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=50046					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c3fe	87					.byte (("R>Input"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$30					WordFlags ::= ST	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>c3ff	30					.byte WordFlags	;wh_Flags
>c400	03					.byte 3	;wh_CodeLength
>c401	22					  .byte LinkDisplacement	; offset to previous nt
=$c402					XtPtr1 ::= *
=50046					WordListLink ::= Nt0 ; remember the nt of this word for later
.c402					R_To_Input:
.c402	68		pla				pla		 ; move RTS addr out of the way
.c403	85 14		sta $14				sta tmp1+0
.c405	68		pla				pla
.c406	85 15		sta $15				sta tmp1+1
.c408	a0 00		ldy #$00			ldy #0
.c40a	68		pla		_loop:		pla
.c40b	99 02 00	sta $0002,y			sta InSrc,y ; also cib ciblen toin
.c40e	c8		iny				iny
.c40f	c0 08		cpy #$08			cpy #8
.c411	d0 f7		bne $c40a			bne _loop
.c413	a5 15		lda $15				lda tmp1+1	; Restore RTS address
.c415	48		pha				pha
.c416	a5 14		lda $14				lda tmp1+0
.c418	48		pha				pha
=23					CodeLen	.var *-XtPtr1
=$c419					Here1 = *	; remember here
>c400	17					.byte CodeLen	;patch wh_CodeLength
.c419	60		rts				rts
>c41a	49 4b 65 79			Name0:	.text "IKey"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=50078					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c41e	24					.byte (("IKey"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>c41f	10					.byte WordFlags	;wh_Flags
>c420	03					.byte 3	;wh_CodeLength
>c421	20					  .byte LinkDisplacement	; offset to previous nt
=$c422					XtPtr1 ::= *
=50078					WordListLink ::= Nt0 ; remember the nt of this word for later
.c422					IKey:
.c422	20 f0 b7	jsr $b7f0	_again:		jsr Zero
.c425	20 f0 b7	jsr $b7f0			jsr Zero	; ( ud )
.c428	20 28 ca	jsr $ca28			jsr Here
.c42b	20 56 cf	jsr $cf56			jsr Dup		; get text
.c42e	a9 10		lda #$10			lda #16
.c430	20 e2 b7	jsr $b7e2			jsr PushZA
.c433	20 aa c2	jsr $c2aa			jsr Accept	; ( ud addr len )
.c436	a1 26		lda ($26,x)			lda (DStack+2,x) ; negative?
.c438	c9 2d		cmp #$2d			cmp #'-'
.c43a	08		php				php		;  save sign
.c43b	d0 06		bne $c443			bne +
.c43d	20 64 ca	jsr $ca64			jsr NOS_One_Plus ;   eat the '-'
.c440	20 35 ca	jsr $ca35			jsr One_Minus
.c443					+
.c443	20 4d b0	jsr $b04d			jsr To_Number ; ( ud addr u -- ud addr u )  Continue convert a string to an integer
.c446	e8		inx				inx		; Drop len
.c447	e8		inx				inx
.c448	e8		inx				inx		; Drop addr
.c449	e8		inx				inx
.c44a	e8		inx				inx		; UD>S
.c44b	e8		inx				inx
.c44c	b5 1e		lda $1e,x			lda DStack-6,x	; string all consumed?
.c44e	f0 11		beq $c461			beq _ok
.c450	e8		inx		_err:		inx		; Drop u
.c451	e8		inx				inx
.c452	28		plp				plp		; RDrop saved sign
.c453	20 cc cd	jsr $cdcc			jsr Space	; prompt again
.c456	a9 3f		lda #$3f			lda #'?'
.c458	20 c0 cd	jsr $cdc0			jsr Emit_A
.c45b	20 cc cd	jsr $cdcc			jsr Space
.c45e	4c 22 c4	jmp $c422			jmp _again	; try it again
.c461	28		plp		_ok:		plp		; apply sign
.c462	d0 03		bne $c467			bne +
.c464	20 aa c6	jsr $c6aa			jsr Negate
.c467					+
.c467	60		rts				rts
=70					CodeLen	.var *-XtPtr1
=$c468					Here1 = *	; remember here
>c420	46					.byte CodeLen	;patch wh_CodeLength
>c468	42 6f 75 6e 64 73		Name0:	.text "Bounds"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=50158					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c46e	66					.byte (("Bounds"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>c46f	40					.byte WordFlags	;wh_Flags
>c470	03					.byte 3	;wh_CodeLength
>c471	50					  .byte LinkDisplacement	; offset to previous nt
=$c472					XtPtr1 ::= *
=50158					WordListLink ::= Nt0 ; remember the nt of this word for later
.c472					Bounds:
.c472	20 31 b4	jsr $b431			jsr underflow_2
.c475	18		clc				clc
.c476	b5 26		lda $26,x			lda DStack+2,x		; LSB addr
.c478	a8		tay				tay
.c479	75 24		adc $24,x			adc DStack+0,x		; LSB u
.c47b	95 26		sta $26,x			sta DStack+2,x		; LSB addr+u
.c47d	94 24		sty $24,x			sty DStack+0,x
.c47f	b5 27		lda $27,x			lda DStack+3,x		; MSB addr
.c481	a8		tay				tay
.c482	75 25		adc $25,x			adc DStack+1,x		; MSB u
.c484	95 27		sta $27,x			sta DStack+3,x		; MSB addr+u
.c486	94 25		sty $25,x			sty DStack+1,x
=22					CodeLen	.var *-XtPtr1
=$c488					Here1 = *	; remember here
>c470	16					.byte CodeLen	;patch wh_CodeLength
.c488	60		rts				rts
>c489	53 70 61 63 65 73		Name0:	.text "Spaces"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=50191					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c48f	66					.byte (("Spaces"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c490	50					.byte WordFlags	;wh_Flags
>c491	03					.byte 3	;wh_CodeLength
>c492	21					  .byte LinkDisplacement	; offset to previous nt
=$c493					XtPtr1 ::= *
=50191					WordListLink ::= Nt0 ; remember the nt of this word for later
.c493					 Spaces:
.c493	20 1d b4	jsr $b41d			jsr underflow_1
.c496	4c 9c c4	jmp $c49c			jmp _test
.c499					_loop:
.c499	20 cc cd	jsr $cdcc			jsr Space		; print a space
.c49c	d6 24		dec $24,x	_test:		dec DStack+0,x		; decrement & test
.c49e	10 f9		bpl $c499			bpl _loop
.c4a0	e8		inx				inx			; Drop
.c4a1	e8		inx				inx
=15					CodeLen	.var *-XtPtr1
=$c4a2					Here1 = *	; remember here
>c491	0f					.byte CodeLen	;patch wh_CodeLength
.c4a2	60		rts				rts
>c4a3	2d 54 72 61 69 6c 69 6e		Name0:	.text "-Trailing"	;  name of word as a string, ending at wh_NameLastChar
>c4ab	67
=9					NameLength = *-Name0
=50220					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c4ac	e9					.byte (("-Trailing"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>c4ad	50					.byte WordFlags	;wh_Flags
>c4ae	03					.byte 3	;wh_CodeLength
>c4af	1d					  .byte LinkDisplacement	; offset to previous nt
=$c4b0					XtPtr1 ::= *
=50220					WordListLink ::= Nt0 ; remember the nt of this word for later
.c4b0					Minus_trailing:
.c4b0	20 31 b4	jsr $b431			jsr underflow_2
.c4b3	b5 26		lda $26,x			lda DStack+2,x		; tmp1= addr + (u1 & $ff00)
.c4b5	85 14		sta $14				sta tmp1+0
.c4b7	b5 27		lda $27,x			lda DStack+3,x
.c4b9	18		clc				clc
.c4ba	75 25		adc $25,x			adc DStack+1,x
.c4bc	85 15		sta $15				sta tmp1+1
.c4be	b4 24		ldy $24,x			ldy DStack+0,x
.c4c0	88		dey		_loop:		dey			; back 1 char
.c4c1	c0 ff		cpy #$ff			cpy #$ff
.c4c3	d0 06		bne $c4cb			bne +
.c4c5	c6 15		dec $15				dec tmp1+1		;   back 1 page
.c4c7	d6 25		dec $25,x			dec DStack+1,x
.c4c9	30 06		bmi $c4d1			bmi _done
.c4cb					+
.c4cb	b1 14		lda ($14),y			lda (tmp1),y		; if blank, keep going
.c4cd	c9 20		cmp #$20			cmp #AscSP
.c4cf	f0 ef		beq $c4c0			beq _loop
.c4d1	c8		iny		_done:		iny			; forward 1 char
.c4d2	d0 02		bne $c4d6			bne +
.c4d4	f6 25		inc $25,x			inc DStack+1,x
.c4d6	94 24		sty $24,x	+		sty DStack+0,x
=40					CodeLen	.var *-XtPtr1
=$c4d8					Here1 = *	; remember here
>c4ae	28					.byte CodeLen	;patch wh_CodeLength
.c4d8	60		rts				rts
>c4d9	2d 4c 65 61 64 69 6e 67		Name0:	.text "-Leading"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=50273					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c4e1	e8					.byte (("-Leading"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>c4e2	50					.byte WordFlags	;wh_Flags
>c4e3	03					.byte 3	;wh_CodeLength
>c4e4	35					  .byte LinkDisplacement	; offset to previous nt
=$c4e5					XtPtr1 ::= *
=50273					WordListLink ::= Nt0 ; remember the nt of this word for later
.c4e5					Minus_leading:
.c4e5	20 31 b4	jsr $b431			jsr underflow_2
.c4e8					_loop:
.c4e8	b5 24		lda $24,x			lda DStack+0,x		; chars left?
.c4ea	15 25		ora $25,x			ora DStack+1,x
.c4ec	f0 0f		beq $c4fd			beq _done
.c4ee	a1 26		lda ($26,x)			lda (DStack+2,x)	; get first character
.c4f0	c9 21		cmp #$21			cmp #AscSP+1		;   is_whitespace
.c4f2	b0 09		bcs $c4fd			bcs _done
.c4f4	20 64 ca	jsr $ca64			jsr NOS_One_Plus
.c4f7	20 38 ca	jsr $ca38			jsr One_Minus_NoUF
.c4fa	4c e8 c4	jmp $c4e8			jmp _loop
.c4fd					_done:
=24					CodeLen	.var *-XtPtr1
=$c4fd					Here1 = *	; remember here
>c4e3	18					.byte CodeLen	;patch wh_CodeLength
.c4fd	60		rts				rts
>c4fe	2f 53 74 72 69 6e 67		Name0:	.text "/String"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=50309					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c505	e7					.byte (("/String"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>c506	50					.byte WordFlags	;wh_Flags
>c507	03					.byte 3	;wh_CodeLength
>c508	24					  .byte LinkDisplacement	; offset to previous nt
=$c509					XtPtr1 ::= *
=50309					WordListLink ::= Nt0 ; remember the nt of this word for later
.c509					Slash_String:
.c509	e0 23		cpx #$23		cpx #-2*3+DStack0+1	; far enough below end of data stack (& not negative)?
.c50b	b0 1d		bcs $c52a		bcs Throw_Stack_20
.c50d	18		clc				clc		; addr += n
.c50e	b5 24		lda $24,x			lda DStack+0,x
.c510	75 28		adc $28,x			adc DStack+4,x
.c512	95 28		sta $28,x			sta DStack+4,x
.c514	b5 25		lda $25,x			lda DStack+1,x
.c516	75 29		adc $29,x			adc DStack+5,x
.c518	95 29		sta $29,x			sta DStack+5,x
.c51a	38		sec				sec		; u -= n
.c51b	b5 26		lda $26,x			lda DStack+2,x
.c51d	f5 24		sbc $24,x			sbc DStack+0,x
.c51f	95 26		sta $26,x			sta DStack+2,x
.c521	b5 27		lda $27,x			lda DStack+3,x
.c523	f5 25		sbc $25,x			sbc DStack+1,x
.c525	95 27		sta $27,x			sta DStack+3,x
.c527	e8		inx				inx		; Drop n
.c528	e8		inx				inx
=32					CodeLen	.var *-XtPtr1
=$c529					Here1 = *	; remember here
>c507	20					.byte CodeLen	;patch wh_CodeLength
.c529	60		rts				rts
.c52a	4c 40 b4	jmp $b440	Throw_Stack_20: jmp Throw_Stack
>c52d	32 44 72 6f 70			Name0:	.text "2Drop"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=50354					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c532	05					.byte (("2Drop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>c533	40					.byte WordFlags	;wh_Flags
>c534	03					.byte 3	;wh_CodeLength
>c535	2d					  .byte LinkDisplacement	; offset to previous nt
=$c536					XtPtr1 ::= *
=50354					WordListLink ::= Nt0 ; remember the nt of this word for later
.c536					Two_drop:
.c536	20 31 b4	jsr $b431			jsr underflow_2
.c539	e8		inx				inx
.c53a	e8		inx				inx
.c53b	e8		inx				inx
.c53c	e8		inx				inx
=7					CodeLen	.var *-XtPtr1
=$c53d					Here1 = *	; remember here
>c534	07					.byte CodeLen	;patch wh_CodeLength
.c53d	60		rts				rts
>c53e	32 53 77 61 70			Name0:	.text "2Swap"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=50371					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c543	05					.byte (("2Swap"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>c544	10					.byte WordFlags	;wh_Flags
>c545	03					.byte 3	;wh_CodeLength
>c546	11					  .byte LinkDisplacement	; offset to previous nt
=$c547					XtPtr1 ::= *
=50371					WordListLink ::= Nt0 ; remember the nt of this word for later
.c547					Two_Swap:
.c547	e0 21		cpx #$21		cpx #-2*4+DStack0+1	; far enough below end of data stack (& not negative)?
.c549	b0 df		bcs $c52a		bcs Throw_Stack_20
.c54b	86 14		stx $14				stx tmp1
.c54d	ca		dex				dex
.c54e	ca		dex				dex
.c54f	ca		dex				dex
.c550	ca		dex				dex
.c551	e8		inx		_loop:		inx
.c552	b5 27		lda $27,x			lda DStack+3,x	; 3 <-> 7
.c554	b4 2b		ldy $2b,x			ldy DStack+7,x
.c556	95 2b		sta $2b,x			sta DStack+7,x
.c558	94 27		sty $27,x			sty DStack+3,x
.c55a	e4 14		cpx $14				cpx tmp1
.c55c	90 f3		bcc $c551			bcc _loop
=23					CodeLen	.var *-XtPtr1
=$c55e					Here1 = *	; remember here
>c545	17					.byte CodeLen	;patch wh_CodeLength
.c55e	60		rts				rts
>c55f	32 4f 76 65 72			Name0:	.text "2Over"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=50404					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c564	45					.byte (("2Over"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c565	50					.byte WordFlags	;wh_Flags
>c566	03					.byte 3	;wh_CodeLength
>c567	21					  .byte LinkDisplacement	; offset to previous nt
=$c568					XtPtr1 ::= *
=50404					WordListLink ::= Nt0 ; remember the nt of this word for later
.c568					Two_over:
.c568	e0 21		cpx #$21		cpx #-2*4+DStack0+1	; far enough below end of data stack (& not negative)?
.c56a	b0 be		bcs $c52a		bcs Throw_Stack_20
.c56c	a0 04		ldy #$04			ldy #4
.c56e	ca		dex		_loop:		dex
.c56f	b5 2c		lda $2c,x			lda DStack+8,x
.c571	95 24		sta $24,x			sta DStack+0,x
.c573	88		dey				dey
.c574	d0 f8		bne $c56e			bne _loop
=14					CodeLen	.var *-XtPtr1
=$c576					Here1 = *	; remember here
>c566	0e					.byte CodeLen	;patch wh_CodeLength
.c576	60		rts				rts
>c577	32 21				Name0:	.text "2!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50425					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c579	22					.byte (("2!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>c57a	40					.byte WordFlags	;wh_Flags
>c57b	03					.byte 3	;wh_CodeLength
>c57c	15					  .byte LinkDisplacement	; offset to previous nt
=$c57d					XtPtr1 ::= *
=50425					WordListLink ::= Nt0 ; remember the nt of this word for later
.c57d					Two_Store:
.c57d	20 36 b4	jsr $b436			jsr underflow_3
.c580	20 f4 b3	jsr $b3f4			jsr PopYA
.c583	85 14		sta $14		Two_Store_YA:	sta tmp1+0	; save addr
.c585	84 15		sty $15				sty tmp1+1
.c587	b5 24		lda $24,x			lda DStack+0,x	; copy MSB
.c589	a0 00		ldy #$00			ldy #0
.c58b	91 14		sta ($14),y			sta (tmp1),y
.c58d	b5 25		lda $25,x			lda DStack+1,x	; copy next
.c58f	c8		iny				iny
.c590	91 14		sta ($14),y			sta (tmp1),y
.c592	b5 26		lda $26,x			lda DStack+2,x	; copy next
.c594	c8		iny				iny
.c595	91 14		sta ($14),y			sta (tmp1),y
.c597	b5 27		lda $27,x			lda DStack+3,x	; copy MSB
.c599	c8		iny				iny
.c59a	91 14		sta ($14),y			sta (tmp1),y
.c59c	e8		inx				inx		; 2Drop
.c59d	e8		inx				inx
.c59e	e8		inx				inx
.c59f	e8		inx				inx
=35					CodeLen	.var *-XtPtr1
=$c5a0					Here1 = *	; remember here
>c57b	23					.byte CodeLen	;patch wh_CodeLength
.c5a0	60		rts				rts
>c5a1	32 40				Name0:	.text "2@"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50467					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c5a3	02					.byte (("2@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>c5a4	00					.byte WordFlags	;wh_Flags
>c5a5	03					.byte 3	;wh_CodeLength
>c5a6	2a					  .byte LinkDisplacement	; offset to previous nt
=$c5a7					XtPtr1 ::= *
=50467					WordListLink ::= Nt0 ; remember the nt of this word for later
.c5a7	20 f4 b3	jsr $b3f4	Two_fetch:	jsr PopYA
.c5aa	85 14		sta $14		Two_Fetch_YA:	sta tmp1+0	; save addr
.c5ac	84 15		sty $15				sty tmp1+1
.c5ae	a0 00		ldy #$00			ldy #0
.c5b0					Two_Fetch_Tmp1Y:
.c5b0	ca		dex				dex
.c5b1	ca		dex				dex
.c5b2	ca		dex				dex
.c5b3	ca		dex				dex
.c5b4	b1 14		lda ($14),y			lda (tmp1),y	; copy LSB
.c5b6	95 24		sta $24,x			sta DStack+0,x
.c5b8	c8		iny				iny		; copy next
.c5b9	b1 14		lda ($14),y			lda (tmp1),y
.c5bb	95 25		sta $25,x			sta DStack+1,x
.c5bd	c8		iny				iny		; copy next
.c5be	b1 14		lda ($14),y			lda (tmp1),y
.c5c0	95 26		sta $26,x			sta DStack+2,x
.c5c2	c8		iny				iny		; copy next
.c5c3	b1 14		lda ($14),y			lda (tmp1),y
.c5c5	95 27		sta $27,x			sta DStack+3,x
=32					CodeLen	.var *-XtPtr1
=$c5c7					Here1 = *	; remember here
>c5a5	20					.byte CodeLen	;patch wh_CodeLength
.c5c7	60		rts				rts
>c5c8	44 40				Name0:	.text "D@"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50506					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c5ca	02					.byte (("D@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c5cb	10					.byte WordFlags	;wh_Flags
>c5cc	03					.byte 3	;wh_CodeLength
>c5cd	27					  .byte LinkDisplacement	; offset to previous nt
=$c5ce					XtPtr1 ::= *
=50506					WordListLink ::= Nt0 ; remember the nt of this word for later
.c5ce	20 f4 b3	jsr $b3f4	DFetch:		jsr PopYA
.c5d1	85 14		sta $14		DFetchYA:	sta tmp1+0	; save addr
.c5d3	84 15		sty $15				sty tmp1+1
.c5d5	ca		dex				dex
.c5d6	ca		dex				dex
.c5d7	ca		dex				dex
.c5d8	ca		dex				dex
.c5d9	a0 00		ldy #$00			ldy #0
.c5db	b1 14		lda ($14),y			lda (tmp1),y
.c5dd	95 26		sta $26,x			sta DStack+2,x
.c5df	c8		iny				iny
.c5e0	b1 14		lda ($14),y			lda (tmp1),y
.c5e2	95 27		sta $27,x			sta DStack+3,x
.c5e4	c8		iny				iny
.c5e5	b1 14		lda ($14),y			lda (tmp1),y
.c5e7	95 24		sta $24,x			sta DStack+0,x
.c5e9	c8		iny				iny
.c5ea	b1 14		lda ($14),y			lda (tmp1),y
.c5ec	95 25		sta $25,x			sta DStack+1,x
=32					CodeLen	.var *-XtPtr1
=$c5ee					Here1 = *	; remember here
>c5cc	20					.byte CodeLen	;patch wh_CodeLength
.c5ee	60		rts				rts
>c5ef	44 21				Name0:	.text "D!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50545					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c5f1	22					.byte (("D!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c5f2	10					.byte WordFlags	;wh_Flags
>c5f3	03					.byte 3	;wh_CodeLength
>c5f4	27					  .byte LinkDisplacement	; offset to previous nt
=$c5f5					XtPtr1 ::= *
=50545					WordListLink ::= Nt0 ; remember the nt of this word for later
.c5f5	20 f4 b3	jsr $b3f4	DStore:		jsr PopYA
.c5f8	85 14		sta $14		DStoreYA:	sta tmp1+0	; save addr
.c5fa	84 15		sty $15				sty tmp1+1
.c5fc	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c5fe	a0 00		ldy #$00			ldy #0
.c600	91 14		sta ($14),y			sta (tmp1),y
.c602	b5 27		lda $27,x			lda DStack+3,x
.c604	c8		iny				iny
.c605	91 14		sta ($14),y			sta (tmp1),y
.c607	b5 24		lda $24,x			lda DStack+0,x
.c609	c8		iny				iny
.c60a	91 14		sta ($14),y			sta (tmp1),y
.c60c	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c60e	c8		iny				iny
.c60f	91 14		sta ($14),y			sta (tmp1),y
.c611	4c 36 c5	jmp $c536			jmp Two_Drop	; also check underflow, return
=31					CodeLen	.var *-XtPtr1
=$c614					Here1 = *	; remember here
>c5f3	1f					.byte CodeLen	;patch wh_CodeLength
>c614	32 52 40			Name0:	.text "2R@"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50583					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c617	03					.byte (("2R@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=20					WordFlags ::= CO+NN	; modifiable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>c618	14					.byte WordFlags	;wh_Flags
>c619	03					.byte 3	;wh_CodeLength
>c61a	26					  .byte LinkDisplacement	; offset to previous nt
=$c61b					XtPtr1 ::= *
=50583					WordListLink ::= Nt0 ; remember the nt of this word for later
.c61b					Two_r_fetch:
.c61b	8a		txa				txa		; Y= return stack index
.c61c	ba		tsx				tsx
.c61d	86 14		stx $14				stx tmp1
.c61f	a4 14		ldy $14				ldy tmp1
.c621	aa		tax				tax
.c622	ca		dex				dex		; make room on the Data Stack
.c623	ca		dex				dex
.c624	ca		dex				dex
.c625	ca		dex				dex
.c626	b9 03 01	lda $0103,y			lda RStack+3,y	; LSB of top entry
.c629	95 24		sta $24,x			sta DStack+0,x
.c62b	b9 04 01	lda $0104,y			lda RStack+4,y	; MSB of top entry
.c62e	95 25		sta $25,x			sta DStack+1,x
.c630	b9 05 01	lda $0105,y			lda RStack+5,y	; LSB of bottom entry
.c633	95 26		sta $26,x			sta DStack+2,x
.c635	b9 06 01	lda $0106,y			lda RStack+6,y	; MSB of bottom entry
.c638	95 27		sta $27,x			sta DStack+3,x
=31					CodeLen	.var *-XtPtr1
=$c63a					Here1 = *	; remember here
>c619	1f					.byte CodeLen	;patch wh_CodeLength
.c63a	60		rts				rts
>c63b	32 52 3e			Name0:	.text "2R>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50622					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c63e	c3					.byte (("2R>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=52					WordFlags ::= CO+ST	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c63f	34					.byte WordFlags	;wh_Flags
>c640	03					.byte 3	;wh_CodeLength
>c641	27					  .byte LinkDisplacement	; offset to previous nt
=$c642					XtPtr1 ::= *
=50622					WordListLink ::= Nt0 ; remember the nt of this word for later
.c642					Two_r_from:
.c642	68		pla				pla			; save the return address
.c643	85 14		sta $14				sta tmp1+0
.c645	68		pla				pla
.c646	85 15		sta $15				sta tmp1+1
.c648	ca		dex				dex			; make room on stack
.c649	ca		dex				dex
.c64a	ca		dex				dex
.c64b	ca		dex				dex
.c64c	68		pla				pla			; LSB
.c64d	95 24		sta $24,x			sta DStack+0,x
.c64f	68		pla				pla			; MSB
.c650	95 25		sta $25,x			sta DStack+1,x
.c652	68		pla				pla			; LSB
.c653	95 26		sta $26,x			sta DStack+2,x
.c655	68		pla				pla			; MSB
.c656	95 27		sta $27,x			sta DStack+3,x
.c658	a5 15		lda $15				lda tmp1+1		; restore return address
.c65a	48		pha				pha
.c65b	a5 14		lda $14				lda tmp1+0
.c65d	48		pha				pha
=28					CodeLen	.var *-XtPtr1
=$c65e					Here1 = *	; remember here
>c640	1c					.byte CodeLen	;patch wh_CodeLength
.c65e	60		rts				rts
>c65f	32 3e 52			Name0:	.text "2>R"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50658					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c662	43					.byte (("2>R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=116					WordFlags ::= CO+UF+ST	; modifiable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>c663	74					.byte WordFlags	;wh_Flags
>c664	03					.byte 3	;wh_CodeLength
>c665	24					  .byte LinkDisplacement	; offset to previous nt
=$c666					XtPtr1 ::= *
=50658					WordListLink ::= Nt0 ; remember the nt of this word for later
.c666					Two_to_r:
.c666	68		pla				pla		; save the return address
.c667	85 14		sta $14				sta tmp1+0
.c669	68		pla				pla
.c66a	85 15		sta $15				sta tmp1+1
.c66c	20 31 b4	jsr $b431			jsr underflow_2
.c66f	b5 27		lda $27,x			lda DStack+3,x	; MSB
.c671	48		pha				pha
.c672	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c674	48		pha				pha
.c675	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c677	48		pha				pha
.c678	b5 24		lda $24,x			lda DStack+0,x	; LSB
.c67a	48		pha				pha
.c67b	e8		inx				inx
.c67c	e8		inx				inx
.c67d	e8		inx				inx
.c67e	e8		inx				inx
.c67f	a5 15		lda $15				lda tmp1+1	; restore return address
.c681	48		pha				pha
.c682	a5 14		lda $14				lda tmp1+0
.c684	48		pha				pha
=31					CodeLen	.var *-XtPtr1
=$c685					Here1 = *	; remember here
>c664	1f					.byte CodeLen	;patch wh_CodeLength
.c685	60		rts				rts
>c686	49 6e 76 65 72 74		Name0:	.text "Invert"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=50700					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c68c	86					.byte (("Invert"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>c68d	40					.byte WordFlags	;wh_Flags
>c68e	03					.byte 3	;wh_CodeLength
>c68f	2a					  .byte LinkDisplacement	; offset to previous nt
=$c690					XtPtr1 ::= *
=50700					WordListLink ::= Nt0 ; remember the nt of this word for later
.c690					Invert:
.c690	20 1d b4	jsr $b41d			jsr underflow_1
.c693	a9 ff		lda #$ff			lda #$FF
.c695	55 24		eor $24,x			eor DStack+0,x	; LSB
.c697	95 24		sta $24,x			sta DStack+0,x
.c699	a9 ff		lda #$ff			lda #$FF
.c69b	55 25		eor $25,x			eor DStack+1,x	; MSB
.c69d	95 25		sta $25,x			sta DStack+1,x
=15					CodeLen	.var *-XtPtr1
=$c69f					Here1 = *	; remember here
>c68e	0f					.byte CodeLen	;patch wh_CodeLength
.c69f	60		rts				rts
>c6a0	4e 65 67 61 74 65		Name0:	.text "Negate"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=50726					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6a6	a6					.byte (("Negate"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>c6a7	40					.byte WordFlags	;wh_Flags
>c6a8	03					.byte 3	;wh_CodeLength
>c6a9	1a					  .byte LinkDisplacement	; offset to previous nt
=$c6aa					XtPtr1 ::= *
=50726					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6aa					Negate:
.c6aa	20 1d b4	jsr $b41d			jsr underflow_1
.c6ad	38		sec		Negate3:	sec
.c6ae	a9 00		lda #$00	Negate4:	lda #0
.c6b0	f5 24		sbc $24,x			sbc DStack+0,x	; LSB
.c6b2	95 24		sta $24,x			sta DStack+0,x
.c6b4	a9 00		lda #$00			lda #0
.c6b6	f5 25		sbc $25,x			sbc DStack+1,x	; MSB
.c6b8	95 25		sta $25,x			sta DStack+1,x
=16					CodeLen	.var *-XtPtr1
=$c6ba					Here1 = *	; remember here
>c6a8	10					.byte CodeLen	;patch wh_CodeLength
.c6ba	60		rts				rts
>c6bb	41 62 73			Name0:	.text "Abs"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50750					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6be	63					.byte (("Abs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>c6bf	10					.byte WordFlags	;wh_Flags
>c6c0	03					.byte 3	;wh_CodeLength
>c6c1	18					  .byte LinkDisplacement	; offset to previous nt
=$c6c2					XtPtr1 ::= *
=50750					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6c2					Abs:
.c6c2	e0 27		cpx #$27		cpx #-2*1+DStack0+1	; far enough below end of data stack (& not negative)?
.c6c4	b0 05		bcs $c6cb		bcs Throw_Stack_17
.c6c6	b5 25		lda $25,x			lda DStack+1,x	; n negative?
.c6c8	30 e3		bmi $c6ad			bmi Negate3
=8					CodeLen	.var *-XtPtr1
=$c6ca					Here1 = *	; remember here
>c6c0	08					.byte CodeLen	;patch wh_CodeLength
.c6ca	60		rts				rts
.c6cb	4c 40 b4	jmp $b440	Throw_Stack_17: jmp Throw_Stack
>c6ce	44 4e 65 67 61 74 65		Name0:	.text "DNegate"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=50773					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6d5	a7					.byte (("DNegate"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c6d6	10					.byte WordFlags	;wh_Flags
>c6d7	03					.byte 3	;wh_CodeLength
>c6d8	17					  .byte LinkDisplacement	; offset to previous nt
=$c6d9					XtPtr1 ::= *
=50773					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6d9					DNegate:
.c6d9	e0 25		cpx #$25		cpx #-2*2+DStack0+1	; far enough below end of data stack (& not negative)?
.c6db	b0 ee		bcs $c6cb		bcs Throw_Stack_17
.c6dd	38		sec		DNegate3:	sec
.c6de	a9 00		lda #$00			lda #0
.c6e0	f5 26		sbc $26,x			sbc DStack+2,x	; LSB of low cell
.c6e2	95 26		sta $26,x			sta DStack+2,x
.c6e4	a9 00		lda #$00			lda #0
.c6e6	f5 27		sbc $27,x			sbc DStack+3,x	; MSB of low cell
.c6e8	95 27		sta $27,x			sta DStack+3,x
.c6ea	4c ae c6	jmp $c6ae			jmp Negate4
=20					CodeLen	.var *-XtPtr1
=$c6ed					Here1 = *	; remember here
>c6d7	14					.byte CodeLen	;patch wh_CodeLength
>c6ed	44 41 62 73			Name0:	.text "DAbs"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=50801					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6f1	64					.byte (("DAbs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>c6f2	10					.byte WordFlags	;wh_Flags
>c6f3	03					.byte 3	;wh_CodeLength
>c6f4	1c					  .byte LinkDisplacement	; offset to previous nt
=$c6f5					XtPtr1 ::= *
=50801					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6f5					DAbs:
.c6f5	e0 25		cpx #$25		cpx #-2*2+DStack0+1	; far enough below end of data stack (& not negative)?
.c6f7	b0 d2		bcs $c6cb		bcs Throw_Stack_17
.c6f9	b5 25		lda $25,x			lda DStack+1,x	; d negative?
.c6fb	30 e0		bmi $c6dd			bmi DNegate3
=8					CodeLen	.var *-XtPtr1
=$c6fd					Here1 = *	; remember here
>c6f3	08					.byte CodeLen	;patch wh_CodeLength
.c6fd	60		rts				rts
>c6fe	44 3c 3e			Name0:	.text "D<>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50817					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c701	c3					.byte (("D<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>c702	10					.byte WordFlags	;wh_Flags
>c703	03					.byte 3	;wh_CodeLength
>c704	10					  .byte LinkDisplacement	; offset to previous nt
=$c705					XtPtr1 ::= *
=50817					WordListLink ::= Nt0 ; remember the nt of this word for later
.c705	20 11 c7	jsr $c711	DNEq:		jsr DEqual
.c708	4c ff c8	jmp $c8ff			jmp ZEqA
=6					CodeLen	.var *-XtPtr1
=$c70b					Here1 = *	; remember here
>c703	06					.byte CodeLen	;patch wh_CodeLength
>c70b	44 3d				Name0:	.text "D="	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50829					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c70d	a2					.byte (("D="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c70e	10					.byte WordFlags	;wh_Flags
>c70f	03					.byte 3	;wh_CodeLength
>c710	0c					  .byte LinkDisplacement	; offset to previous nt
=$c711					XtPtr1 ::= *
=50829					WordListLink ::= Nt0 ; remember the nt of this word for later
.c711	b5 2a		lda $2a,x	DEqual:		lda DStack+6,x
.c713	d5 26		cmp $26,x			cmp DStack+2,x
.c715	d0 4c		bne $c763			bne False3
.c717	b5 2b		lda $2b,x			lda DStack+7,x
.c719	d5 27		cmp $27,x			cmp DStack+3,x
.c71b	d0 46		bne $c763			bne False3
.c71d	b5 24		lda $24,x			lda DStack+0,x
.c71f	d5 28		cmp $28,x			cmp DStack+4,x
.c721	d0 40		bne $c763			bne False3
.c723	b5 25		lda $25,x			lda DStack+1,x
.c725	d5 29		cmp $29,x			cmp DStack+5,x
.c727	d0 3a		bne $c763			bne False3
.c729	f0 5c		beq $c787			beq True3
=26					CodeLen	.var *-XtPtr1
=$c72b					Here1 = *	; remember here
>c70f	1a					.byte CodeLen	;patch wh_CodeLength
>c72b	44 55 3e			Name0:	.text "DU>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50862					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c72e	c3					.byte (("DU>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c72f	10					.byte WordFlags	;wh_Flags
>c730	03					.byte 3	;wh_CodeLength
>c731	21					  .byte LinkDisplacement	; offset to previous nt
=$c732					XtPtr1 ::= *
=50862					WordListLink ::= Nt0 ; remember the nt of this word for later
.c732	20 c8 c7	jsr $c7c8	DUGt:		jsr DGtSub
.c735	90 50		bcc $c787			bcc True3
.c737	b0 2a		bcs $c763			bcs False3
=7					CodeLen	.var *-XtPtr1
=$c739					Here1 = *	; remember here
>c730	07					.byte CodeLen	;patch wh_CodeLength
>c739	44 55 3c 3d			Name0:	.text "DU<="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=50877					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c73d	a4					.byte (("DU<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c73e	10					.byte WordFlags	;wh_Flags
>c73f	03					.byte 3	;wh_CodeLength
>c740	0f					  .byte LinkDisplacement	; offset to previous nt
=$c741					XtPtr1 ::= *
=50877					WordListLink ::= Nt0 ; remember the nt of this word for later
.c741	20 c8 c7	jsr $c7c8	DULe:		jsr DGtSub
.c744	b0 41		bcs $c787			bcs True3
.c746	90 1b		bcc $c763			bcc False3
=7					CodeLen	.var *-XtPtr1
=$c748					Here1 = *	; remember here
>c73f	07					.byte CodeLen	;patch wh_CodeLength
>c748	44 55 3e 3d			Name0:	.text "DU>="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=50892					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c74c	a4					.byte (("DU>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c74d	10					.byte WordFlags	;wh_Flags
>c74e	03					.byte 3	;wh_CodeLength
>c74f	0f					  .byte LinkDisplacement	; offset to previous nt
=$c750					XtPtr1 ::= *
=50892					WordListLink ::= Nt0 ; remember the nt of this word for later
.c750	20 98 c7	jsr $c798	DUGe:		jsr DLessSub
.c753	b0 32		bcs $c787			bcs True3
.c755	90 0c		bcc $c763			bcc False3
=7					CodeLen	.var *-XtPtr1
=$c757					Here1 = *	; remember here
>c74e	07					.byte CodeLen	;patch wh_CodeLength
>c757	44 55 3c			Name0:	.text "DU<"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50906					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c75a	83					.byte (("DU<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c75b	10					.byte WordFlags	;wh_Flags
>c75c	03					.byte 3	;wh_CodeLength
>c75d	0e					  .byte LinkDisplacement	; offset to previous nt
=$c75e					XtPtr1 ::= *
=50906					WordListLink ::= Nt0 ; remember the nt of this word for later
.c75e	20 98 c7	jsr $c798	DULess:		jsr DLessSub
.c761	90 24		bcc $c787			bcc True3
.c763	a9 00		lda #$00	False3:		lda #0
.c765	f0 22		beq $c789			beq DReturn3
=9					CodeLen	.var *-XtPtr1
=$c767					Here1 = *	; remember here
>c75c	09					.byte CodeLen	;patch wh_CodeLength
.c767	4c 40 b4	jmp $b440	Throw_Stack_09: jmp Throw_Stack
>c76a	44 3e 3d			Name0:	.text "D>="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50925					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c76d	a3					.byte (("D>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>c76e	10					.byte WordFlags	;wh_Flags
>c76f	03					.byte 3	;wh_CodeLength
>c770	13					  .byte LinkDisplacement	; offset to previous nt
=$c771					XtPtr1 ::= *
=50925					WordListLink ::= Nt0 ; remember the nt of this word for later
.c771	20 98 c7	jsr $c798	DGEq:		jsr DLessSub
.c774	70 0f		bvs $c785			bvs DLess3
.c776	10 0f		bpl $c787	DGEq3:		bpl True3
.c778	30 e9		bmi $c763			bmi False3
=9					CodeLen	.var *-XtPtr1
=$c77a					Here1 = *	; remember here
>c76f	09					.byte CodeLen	;patch wh_CodeLength
>c77a	44 3c				Name0:	.text "D<"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50940					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c77c	82					.byte (("D<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c77d	10					.byte WordFlags	;wh_Flags
>c77e	03					.byte 3	;wh_CodeLength
>c77f	0f					  .byte LinkDisplacement	; offset to previous nt
=$c780					XtPtr1 ::= *
=50940					WordListLink ::= Nt0 ; remember the nt of this word for later
.c780	20 98 c7	jsr $c798	DLess:		jsr DLessSub
.c783	70 f1		bvs $c776			bvs DGEq3
.c785	10 dc		bpl $c763	DLess3:		bpl False3
.c787	a9 ff		lda #$ff	True3:		lda #$ff
.c789					DReturn3:
.c789	e0 21		cpx #$21		cpx #-2*4+DStack0+1	; far enough below end of data stack (& not negative)?
.c78b	b0 da		bcs $c767		bcs Throw_Stack_09
.c78d	95 2a		sta $2a,x			sta DStack+6,x
.c78f	95 2b		sta $2b,x			sta DStack+7,x
.c791	e8		inx				inx			; preserve A, don't use ThreeDrop
.c792	e8		inx				inx
.c793	e8		inx				inx
.c794	e8		inx				inx
.c795	e8		inx				inx
.c796	e8		inx				inx
.c797	60		rts				rts
=24					CodeLen	.var *-XtPtr1
=$c798					Here1 = *	; remember here
>c77e	18					.byte CodeLen	;patch wh_CodeLength
.c798	b5 2a		lda $2a,x	DLessSub:	lda DStack+6,x
.c79a	d5 26		cmp $26,x			cmp DStack+2,x
.c79c	b5 2b		lda $2b,x			lda DStack+7,x
.c79e	f5 27		sbc $27,x			sbc DStack+3,x
.c7a0	b5 28		lda $28,x			lda DStack+4,x
.c7a2	f5 24		sbc $24,x			sbc DStack+0,x
.c7a4	b5 29		lda $29,x			lda DStack+5,x
.c7a6	f5 25		sbc $25,x			sbc DStack+1,x
.c7a8	60		rts				rts
>c7a9	44 3c 3d			Name0:	.text "D<="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50988					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7ac	a3					.byte (("D<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=48					LinkDisplacement = Nt0-WordListLink
>c7ad	10					.byte WordFlags	;wh_Flags
>c7ae	03					.byte 3	;wh_CodeLength
>c7af	30					  .byte LinkDisplacement	; offset to previous nt
=$c7b0					XtPtr1 ::= *
=50988					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7b0	20 c8 c7	jsr $c7c8	DLe:		jsr DGtSub
.c7b3	70 0f		bvs $c7c4			bvs DGt3
.c7b5	10 d0		bpl $c787	DLe3:		bpl True3
.c7b7	30 aa		bmi $c763			bmi False3
=9					CodeLen	.var *-XtPtr1
=$c7b9					Here1 = *	; remember here
>c7ae	09					.byte CodeLen	;patch wh_CodeLength
>c7b9	44 3e				Name0:	.text "D>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51003					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7bb	c2					.byte (("D>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c7bc	10					.byte WordFlags	;wh_Flags
>c7bd	03					.byte 3	;wh_CodeLength
>c7be	0f					  .byte LinkDisplacement	; offset to previous nt
=$c7bf					XtPtr1 ::= *
=51003					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7bf	20 c8 c7	jsr $c7c8	DGt:		jsr DGtSub
.c7c2	70 f1		bvs $c7b5			bvs DLe3
.c7c4	30 c1		bmi $c787	DGt3:		bmi True3
.c7c6	10 9b		bpl $c763			bpl False3
=9					CodeLen	.var *-XtPtr1
=$c7c8					Here1 = *	; remember here
>c7bd	09					.byte CodeLen	;patch wh_CodeLength
.c7c8	b5 26		lda $26,x	DGtSub:		lda DStack+2,x
.c7ca	d5 2a		cmp $2a,x			cmp DStack+6,x
.c7cc	b5 27		lda $27,x			lda DStack+3,x
.c7ce	f5 2b		sbc $2b,x			sbc DStack+7,x
.c7d0	b5 24		lda $24,x			lda DStack+0,x
.c7d2	f5 28		sbc $28,x			sbc DStack+4,x
.c7d4	b5 25		lda $25,x			lda DStack+1,x
.c7d6	f5 29		sbc $29,x			sbc DStack+5,x
.c7d8	60		rts				rts
>c7d9	44 30 3c 3d			Name0:	.text "D0<="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51037					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7dd	a4					.byte (("D0<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>c7de	10					.byte WordFlags	;wh_Flags
>c7df	03					.byte 3	;wh_CodeLength
>c7e0	22					  .byte LinkDisplacement	; offset to previous nt
=$c7e1					XtPtr1 ::= *
=51037					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7e1	b5 25		lda $25,x	D0Le:		lda DStack+1,x	; test sign
.c7e3	30 65		bmi $c84a			bmi True1
.c7e5	10 24		bpl $c80b			bpl D0Equal
=6					CodeLen	.var *-XtPtr1
=$c7e7					Here1 = *	; remember here
>c7df	06					.byte CodeLen	;patch wh_CodeLength
>c7e7	44 30 3e			Name0:	.text "D0>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51050					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7ea	c3					.byte (("D0>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c7eb	10					.byte WordFlags	;wh_Flags
>c7ec	03					.byte 3	;wh_CodeLength
>c7ed	0d					  .byte LinkDisplacement	; offset to previous nt
=$c7ee					XtPtr1 ::= *
=51050					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7ee	b5 25		lda $25,x	D0Gt:		lda DStack+1,x	; test sign
.c7f0	10 0b		bpl $c7fd			bpl D0Ne
.c7f2	4c 69 c8	jmp $c869			jmp False1
>c7f5	44 30 3c 3e			Name0:	.text "D0<>"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51065					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7f9	c4					.byte (("D0<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c7fa	10					.byte WordFlags	;wh_Flags
>c7fb	03					.byte 3	;wh_CodeLength
>c7fc	0f					  .byte LinkDisplacement	; offset to previous nt
=$c7fd					XtPtr1 ::= *
=51065					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7fd	20 12 c8	jsr $c812	D0Ne:		jsr D0EqSub
.c800	d0 48		bne $c84a			bne True1
.c802	f0 65		beq $c869			beq False1
=7					CodeLen	.var *-XtPtr1
=$c804					Here1 = *	; remember here
>c7fb	07					.byte CodeLen	;patch wh_CodeLength
>c804	44 30 3d			Name0:	.text "D0="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51079					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c807	a3					.byte (("D0="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c808	10					.byte WordFlags	;wh_Flags
>c809	03					.byte 3	;wh_CodeLength
>c80a	0e					  .byte LinkDisplacement	; offset to previous nt
=$c80b					XtPtr1 ::= *
=51079					WordListLink ::= Nt0 ; remember the nt of this word for later
.c80b	20 12 c8	jsr $c812	D0Equal:	jsr D0EqSub
.c80e	d0 59		bne $c869			bne False1
.c810	f0 38		beq $c84a			beq True1
=7					CodeLen	.var *-XtPtr1
=$c812					Here1 = *	; remember here
>c809	07					.byte CodeLen	;patch wh_CodeLength
.c812	b5 26		lda $26,x	D0EqSub:	lda DStack+2,x
.c814	15 27		ora $27,x			ora DStack+3,x
.c816	15 24		ora $24,x			ora DStack+0,x
.c818	15 25		ora $25,x			ora DStack+1,x
.c81a	60		rts				rts
>c81b	44 30 3c			Name0:	.text "D0<"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51102					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c81e	83					.byte (("D0<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c81f	10					.byte WordFlags	;wh_Flags
>c820	03					.byte 3	;wh_CodeLength
>c821	17					  .byte LinkDisplacement	; offset to previous nt
=$c822					XtPtr1 ::= *
=51102					WordListLink ::= Nt0 ; remember the nt of this word for later
.c822	b5 25		lda $25,x	D0Less:		lda DStack+1,x	; test sign
.c824	30 24		bmi $c84a			bmi True1
.c826	10 41		bpl $c869			bpl False1
=6					CodeLen	.var *-XtPtr1
=$c828					Here1 = *	; remember here
>c820	06					.byte CodeLen	;patch wh_CodeLength
>c828	44 30 3e 3d			Name0:	.text "D0>="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51116					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c82c	a4					.byte (("D0>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c82d	10					.byte WordFlags	;wh_Flags
>c82e	03					.byte 3	;wh_CodeLength
>c82f	0e					  .byte LinkDisplacement	; offset to previous nt
=$c830					XtPtr1 ::= *
=51116					WordListLink ::= Nt0 ; remember the nt of this word for later
.c830	b5 25		lda $25,x	D0Ge:		lda DStack+1,x	; test sign
.c832	10 16		bpl $c84a			bpl True1
.c834	30 33		bmi $c869			bmi False1
=6					CodeLen	.var *-XtPtr1
=$c836					Here1 = *	; remember here
>c82e	06					.byte CodeLen	;patch wh_CodeLength
.c836	4c 40 b4	jmp $b440	Throw_Stack_08: jmp Throw_Stack
>c839	3d				Name0:	.text "="	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=51130					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c83a	a1					.byte (("="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c83b	10					.byte WordFlags	;wh_Flags
>c83c	03					.byte 3	;wh_CodeLength
>c83d	0e					  .byte LinkDisplacement	; offset to previous nt
=$c83e					XtPtr1 ::= *
=51130					WordListLink ::= Nt0 ; remember the nt of this word for later
.c83e	b5 24		lda $24,x	Equal:		lda DStack+0,x		; LSB
.c840	d5 26		cmp $26,x			cmp DStack+2,x
.c842	d0 25		bne $c869			bne False1
.c844	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c846	d5 27		cmp $27,x			cmp DStack+3,x
.c848	d0 1f		bne $c869			bne False1
.c84a	a9 ff		lda #$ff	True1:		lda #$ff	; return TRUE
.c84c					Return1:
.c84c	e0 25		cpx #$25		cpx #-2*2+DStack0+1	; far enough below end of data stack (& not negative)?
.c84e	b0 e6		bcs $c836		bcs Throw_Stack_08
.c850	e8		inx				inx		; Drop
.c851	e8		inx				inx
.c852	95 24		sta $24,x			sta DStack+0,x	; store f
.c854	95 25		sta $25,x			sta DStack+1,x
.c856	60		rts				rts
=25					CodeLen	.var *-XtPtr1
=$c857					Here1 = *	; remember here
>c83c	19					.byte CodeLen	;patch wh_CodeLength
>c857	3c 3e				Name0:	.text "<>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51161					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c859	c2					.byte (("<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>c85a	10					.byte WordFlags	;wh_Flags
>c85b	03					.byte 3	;wh_CodeLength
>c85c	1f					  .byte LinkDisplacement	; offset to previous nt
=$c85d					XtPtr1 ::= *
=51161					WordListLink ::= Nt0 ; remember the nt of this word for later
.c85d	b5 24		lda $24,x	Not_Equals:	lda DStack+0,x		; LSB
.c85f	d5 26		cmp $26,x			cmp DStack+2,x
.c861	d0 e7		bne $c84a			bne True1
.c863	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c865	d5 27		cmp $27,x			cmp DStack+3,x
.c867	d0 e1		bne $c84a			bne True1
.c869	a9 00		lda #$00	False1:		lda #0		; return FALSE
.c86b	f0 df		beq $c84c			beq Return1
=16					CodeLen	.var *-XtPtr1
=$c86d					Here1 = *	; remember here
>c85b	10					.byte CodeLen	;patch wh_CodeLength
>c86d	3c				Name0:	.text "<"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=51182					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c86e	81					.byte (("<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>c86f	10					.byte WordFlags	;wh_Flags
>c870	03					.byte 3	;wh_CodeLength
>c871	15					  .byte LinkDisplacement	; offset to previous nt
=$c872					XtPtr1 ::= *
=51182					WordListLink ::= Nt0 ; remember the nt of this word for later
.c872	b5 26		lda $26,x	Less_Than:	lda DStack+2,x	; compare
.c874	d5 24		cmp $24,x			cmp DStack+0,x
.c876	b5 27		lda $27,x			lda DStack+3,x
.c878	f5 25		sbc $25,x			sbc DStack+1,x
.c87a	50 02		bvc $c87e			bvc _c
.c87c	49 80		eor #$80			eor #$80	; fix sign
.c87e	10 e9		bpl $c869	_c:		bpl False1
.c880	30 c8		bmi $c84a			bmi True1
=16					CodeLen	.var *-XtPtr1
=$c882					Here1 = *	; remember here
>c870	10					.byte CodeLen	;patch wh_CodeLength
>c882	3e 3d				Name0:	.text ">="	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51204					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c884	a2					.byte ((">="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>c885	10					.byte WordFlags	;wh_Flags
>c886	03					.byte 3	;wh_CodeLength
>c887	16					  .byte LinkDisplacement	; offset to previous nt
=$c888					XtPtr1 ::= *
=51204					WordListLink ::= Nt0 ; remember the nt of this word for later
.c888	20 72 c8	jsr $c872	Ge:		jsr Less_Than
.c88b	4c ff c8	jmp $c8ff			jmp ZEqA
=6					CodeLen	.var *-XtPtr1
=$c88e					Here1 = *	; remember here
>c886	06					.byte CodeLen	;patch wh_CodeLength
>c88e	55 3c				Name0:	.text "U<"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51216					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c890	82					.byte (("U<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c891	10					.byte WordFlags	;wh_Flags
>c892	03					.byte 3	;wh_CodeLength
>c893	0c					  .byte LinkDisplacement	; offset to previous nt
=$c894					XtPtr1 ::= *
=51216					WordListLink ::= Nt0 ; remember the nt of this word for later
.c894	b5 26		lda $26,x	U_Less_Than:	lda DStack+2,x
.c896	d5 24		cmp $24,x			cmp DStack+0,x
.c898	b5 27		lda $27,x			lda DStack+3,x
.c89a	f5 25		sbc $25,x			sbc DStack+1,x
.c89c	b0 cb		bcs $c869			bcs False1
.c89e	90 aa		bcc $c84a			bcc True1
=12					CodeLen	.var *-XtPtr1
=$c8a0					Here1 = *	; remember here
>c892	0c					.byte CodeLen	;patch wh_CodeLength
>c8a0	55 3e				Name0:	.text "U>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51234					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8a2	c2					.byte (("U>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>c8a3	10					.byte WordFlags	;wh_Flags
>c8a4	03					.byte 3	;wh_CodeLength
>c8a5	12					  .byte LinkDisplacement	; offset to previous nt
=$c8a6					XtPtr1 ::= *
=51234					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8a6	b5 24		lda $24,x	U_Greater_Than:	lda DStack+0,x
.c8a8	d5 26		cmp $26,x			cmp DStack+2,x
.c8aa	b5 25		lda $25,x			lda DStack+1,x
.c8ac	f5 27		sbc $27,x			sbc DStack+3,x
.c8ae	b0 b9		bcs $c869			bcs False1
.c8b0	90 98		bcc $c84a			bcc True1
=12					CodeLen	.var *-XtPtr1
=$c8b2					Here1 = *	; remember here
>c8a4	0c					.byte CodeLen	;patch wh_CodeLength
>c8b2	3e				Name0:	.text ">"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=51251					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8b3	c1					.byte ((">"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>c8b4	10					.byte WordFlags	;wh_Flags
>c8b5	03					.byte 3	;wh_CodeLength
>c8b6	11					  .byte LinkDisplacement	; offset to previous nt
=$c8b7					XtPtr1 ::= *
=51251					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8b7	b5 24		lda $24,x	Greater_Than:	lda DStack+0,x	; compare
.c8b9	d5 26		cmp $26,x			cmp DStack+2,x
.c8bb	b5 25		lda $25,x			lda DStack+1,x
.c8bd	f5 27		sbc $27,x			sbc DStack+3,x
.c8bf	50 02		bvc $c8c3			bvc _c
.c8c1	49 80		eor #$80			eor #$80	; fix sign
.c8c3	10 a4		bpl $c869	_c:		bpl False1
.c8c5	4c 4a c8	jmp $c84a			jmp True1
=17					CodeLen	.var *-XtPtr1
=$c8c8					Here1 = *	; remember here
>c8b5	11					.byte CodeLen	;patch wh_CodeLength
>c8c8	3c 3d				Name0:	.text "<="	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51274					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8ca	a2					.byte (("<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c8cb	10					.byte WordFlags	;wh_Flags
>c8cc	03					.byte 3	;wh_CodeLength
>c8cd	17					  .byte LinkDisplacement	; offset to previous nt
=$c8ce					XtPtr1 ::= *
=51274					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8ce	20 b7 c8	jsr $c8b7	Le:		jsr Greater_Than
.c8d1	4c ff c8	jmp $c8ff			jmp ZEqA
=6					CodeLen	.var *-XtPtr1
=$c8d4					Here1 = *	; remember here
>c8cc	06					.byte CodeLen	;patch wh_CodeLength
>c8d4	55 3e 3d			Name0:	.text "U>="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51287					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8d7	a3					.byte (("U>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c8d8	10					.byte WordFlags	;wh_Flags
>c8d9	03					.byte 3	;wh_CodeLength
>c8da	0d					  .byte LinkDisplacement	; offset to previous nt
=$c8db					XtPtr1 ::= *
=51287					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8db	20 94 c8	jsr $c894	UGe:		jsr U_Less_Than
.c8de	4c ff c8	jmp $c8ff			jmp ZEqA
=6					CodeLen	.var *-XtPtr1
=$c8e1					Here1 = *	; remember here
>c8d9	06					.byte CodeLen	;patch wh_CodeLength
>c8e1	55 3c 3d			Name0:	.text "U<="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51300					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8e4	a3					.byte (("U<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c8e5	10					.byte WordFlags	;wh_Flags
>c8e6	03					.byte 3	;wh_CodeLength
>c8e7	0d					  .byte LinkDisplacement	; offset to previous nt
=$c8e8					XtPtr1 ::= *
=51300					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8e8	20 a6 c8	jsr $c8a6	ULe:		jsr U_Greater_Than
.c8eb	4c ff c8	jmp $c8ff			jmp ZEqA
=6					CodeLen	.var *-XtPtr1
=$c8ee					Here1 = *	; remember here
>c8e6	06					.byte CodeLen	;patch wh_CodeLength
.c8ee	4c 40 b4	jmp $b440	Throw_Stack_11: jmp Throw_Stack
>c8f1	30 3d				Name0:	.text "0="	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51315					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8f3	a2					.byte (("0="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c8f4	10					.byte WordFlags	;wh_Flags
>c8f5	03					.byte 3	;wh_CodeLength
>c8f6	0f					  .byte LinkDisplacement	; offset to previous nt
=$c8f7					XtPtr1 ::= *
=51315					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8f7	b5 25		lda $25,x	Zero_Equal:	lda DStack+1,x
.c8f9	15 24		ora $24,x	ZEq3:		ora DStack+0,x
.c8fb	d0 2b		bne $c928			bne False0
.c8fd	f0 14		beq $c913			beq True0
=8					CodeLen	.var *-XtPtr1
=$c8ff					Here1 = *	; remember here
>c8f5	08					.byte CodeLen	;patch wh_CodeLength
.c8ff					ZEqA:
.c8ff	49 ff		eor #$ff			eor #$ff
.c901	95 24		sta $24,x			sta DStack+0,x
.c903	95 25		sta $25,x			sta DStack+1,x
.c905	60		rts				rts
>c906	30 3c 3e			Name0:	.text "0<>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51337					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c909	c3					.byte (("0<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>c90a	10					.byte WordFlags	;wh_Flags
>c90b	03					.byte 3	;wh_CodeLength
>c90c	16					  .byte LinkDisplacement	; offset to previous nt
=$c90d					XtPtr1 ::= *
=51337					WordListLink ::= Nt0 ; remember the nt of this word for later
.c90d	b5 25		lda $25,x	Zero_Unequal:	lda DStack+1,x
.c90f	15 24		ora $24,x	ZNe3:		ora DStack+0,x
.c911	f0 15		beq $c928			beq False0
.c913	a9 ff		lda #$ff	True0:		lda #$ff	; return TRUE
.c915	95 24		sta $24,x	Return0:	sta DStack+0,x
.c917	95 25		sta $25,x			sta DStack+1,x
.c919	e0 27		cpx #$27		cpx #-2*1+DStack0+1	; far enough below end of data stack (& not negative)?
.c91b	b0 35		bcs $c952		bcs Throw_Stack_05
.c91d	60		rts				rts
=17					CodeLen	.var *-XtPtr1
=$c91e					Here1 = *	; remember here
>c90b	11					.byte CodeLen	;patch wh_CodeLength
>c91e	30 3e				Name0:	.text "0>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51360					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c920	c2					.byte (("0>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c921	10					.byte WordFlags	;wh_Flags
>c922	03					.byte 3	;wh_CodeLength
>c923	17					  .byte LinkDisplacement	; offset to previous nt
=$c924					XtPtr1 ::= *
=51360					WordListLink ::= Nt0 ; remember the nt of this word for later
.c924	b5 25		lda $25,x	Zero_Greater:	lda DStack+1,x	; MSB
.c926	10 e7		bpl $c90f			bpl ZNe3	; >= 0 ?
.c928	a9 00		lda #$00	False0:		lda #0		; return FALSE
.c92a	f0 e9		beq $c915			beq Return0
=8					CodeLen	.var *-XtPtr1
=$c92c					Here1 = *	; remember here
>c922	08					.byte CodeLen	;patch wh_CodeLength
>c92c	30 3c 3d			Name0:	.text "0<="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51375					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c92f	a3					.byte (("0<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c930	10					.byte WordFlags	;wh_Flags
>c931	03					.byte 3	;wh_CodeLength
>c932	0f					  .byte LinkDisplacement	; offset to previous nt
=$c933					XtPtr1 ::= *
=51375					WordListLink ::= Nt0 ; remember the nt of this word for later
.c933	b5 25		lda $25,x	ZLe:		lda DStack+1,x	; < 0 ?
.c935	30 dc		bmi $c913			bmi True0
.c937	10 c0		bpl $c8f9			bpl ZEq3
=6					CodeLen	.var *-XtPtr1
=$c939					Here1 = *	; remember here
>c931	06					.byte CodeLen	;patch wh_CodeLength
>c939	30 3e 3d			Name0:	.text "0>="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51388					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c93c	a3					.byte (("0>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c93d	10					.byte WordFlags	;wh_Flags
>c93e	03					.byte 3	;wh_CodeLength
>c93f	0d					  .byte LinkDisplacement	; offset to previous nt
=$c940					XtPtr1 ::= *
=51388					WordListLink ::= Nt0 ; remember the nt of this word for later
.c940	b5 25		lda $25,x	ZGe:		lda DStack+1,x
.c942	10 cf		bpl $c913			bpl True0
.c944	30 e2		bmi $c928			bmi False0
=6					CodeLen	.var *-XtPtr1
=$c946					Here1 = *	; remember here
>c93e	06					.byte CodeLen	;patch wh_CodeLength
>c946	30 3c				Name0:	.text "0<"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51400					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c948	82					.byte (("0<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c949	10					.byte WordFlags	;wh_Flags
>c94a	03					.byte 3	;wh_CodeLength
>c94b	0c					  .byte LinkDisplacement	; offset to previous nt
=$c94c					XtPtr1 ::= *
=51400					WordListLink ::= Nt0 ; remember the nt of this word for later
.c94c	b5 25		lda $25,x	Zero_Less:	lda DStack+1,x	; MSB
.c94e	10 d8		bpl $c928			bpl False0
.c950	30 c1		bmi $c913			bmi True0
=6					CodeLen	.var *-XtPtr1
=$c952					Here1 = *	; remember here
>c94a	06					.byte CodeLen	;patch wh_CodeLength
.c952	4c 40 b4	jmp $b440	Throw_Stack_05: jmp Throw_Stack
>c955	4d 69 6e			Name0:	.text "Min"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51416					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c958	c3					.byte (("Min"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>c959	50					.byte WordFlags	;wh_Flags
>c95a	03					.byte 3	;wh_CodeLength
>c95b	10					  .byte LinkDisplacement	; offset to previous nt
=$c95c					XtPtr1 ::= *
=51416					WordListLink ::= Nt0 ; remember the nt of this word for later
.c95c					Min:
.c95c	e0 25		cpx #$25		cpx #-2*2+DStack0+1	; far enough below end of data stack (& not negative)?
.c95e	b0 f2		bcs $c952		bcs Throw_Stack_05
.c960	b5 24		lda $24,x			lda DStack+0,x	; compare n1 & n2; sets V & N but not Z
.c962	d5 26		cmp $26,x			cmp DStack+2,x
.c964	b5 25		lda $25,x			lda DStack+1,x
.c966	f5 27		sbc $27,x			sbc DStack+3,x
.c968	70 1a		bvs $c984			bvs Max_3	; if overflow, the sign is backwards
.c96a	30 27		bmi $c993	Min_3:		bmi Nip_NoUf	; if negative, NOS is larger and needs to be dumped
.c96c	e8		inx				inx		; Drop n2
.c96d	e8		inx				inx
=18					CodeLen	.var *-XtPtr1
=$c96e					Here1 = *	; remember here
>c95a	12					.byte CodeLen	;patch wh_CodeLength
.c96e	60		rts				rts
>c96f	4d 61 78			Name0:	.text "Max"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51442					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c972	03					.byte (("Max"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>c973	10					.byte WordFlags	;wh_Flags
>c974	03					.byte 3	;wh_CodeLength
>c975	1a					  .byte LinkDisplacement	; offset to previous nt
=$c976					XtPtr1 ::= *
=51442					WordListLink ::= Nt0 ; remember the nt of this word for later
.c976					Max:
.c976	e0 25		cpx #$25		cpx #-2*2+DStack0+1	; far enough below end of data stack (& not negative)?
.c978	b0 d8		bcs $c952		bcs Throw_Stack_05
.c97a	b5 24		lda $24,x			lda DStack+0,x	; Compare n1 & n2; sets V & N but not Z
.c97c	d5 26		cmp $26,x			cmp DStack+2,x
.c97e	b5 25		lda $25,x			lda DStack+1,x
.c980	f5 27		sbc $27,x			sbc DStack+3,x
.c982	70 e6		bvs $c96a			bvs Min_3	; if overflow, the sign is backwards
.c984	10 0d		bpl $c993	Max_3:		bpl Nip_NoUf	; if negative, NOS is larger and needs to be kept
.c986	e8		inx				inx		; Drop n2
.c987	e8		inx				inx
=18					CodeLen	.var *-XtPtr1
=$c988					Here1 = *	; remember here
>c974	12					.byte CodeLen	;patch wh_CodeLength
.c988	60		rts				rts
>c989	4e 69 70			Name0:	.text "Nip"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51468					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c98c	03					.byte (("Nip"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>c98d	40					.byte WordFlags	;wh_Flags
>c98e	03					.byte 3	;wh_CodeLength
>c98f	1a					  .byte LinkDisplacement	; offset to previous nt
=$c990					XtPtr1 ::= *
=51468					WordListLink ::= Nt0 ; remember the nt of this word for later
.c990					Nip:
.c990	20 31 b4	jsr $b431			jsr underflow_2
.c993	b5 24		lda $24,x	Nip_NoUf:	lda DStack+0,x	; PopYA
.c995	b4 25		ldy $25,x			ldy DStack+1,x
.c997	e8		inx				inx
.c998	e8		inx				inx
.c999	95 24		sta $24,x			sta DStack+0,x	; store over n1
.c99b	94 25		sty $25,x			sty DStack+1,x
=13					CodeLen	.var *-XtPtr1
=$c99d					Here1 = *	; remember here
>c98e	0d					.byte CodeLen	;patch wh_CodeLength
.c99d	60		rts				rts
>c99e	50 69 63 6b			Name0:	.text "Pick"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51490					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9a2	64					.byte (("Pick"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>c9a3	00					.byte WordFlags	;wh_Flags
>c9a4	03					.byte 3	;wh_CodeLength
>c9a5	16					  .byte LinkDisplacement	; offset to previous nt
=$c9a6					XtPtr1 ::= *
=51490					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9a6					Pick:
.c9a6	16 24		asl $24,x			asl DStack+0,x	; we assume u < 128 (stack is small)
.c9a8	8a		txa				txa
.c9a9	75 24		adc $24,x			adc DStack+0,x
.c9ab	a8		tay				tay
.c9ac	b9 26 00	lda $0026,y			lda DStack+2,y
.c9af	95 24		sta $24,x			sta DStack+0,x
.c9b1	b9 27 00	lda $0027,y			lda DStack+3,y
.c9b4	95 25		sta $25,x			sta DStack+1,x
=16					CodeLen	.var *-XtPtr1
=$c9b6					Here1 = *	; remember here
>c9a4	10					.byte CodeLen	;patch wh_CodeLength
.c9b6	60		rts				rts
>c9b7	43 68 61 72			Name0:	.text "Char"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51515					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9bb	44					.byte (("Char"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>c9bc	10					.byte WordFlags	;wh_Flags
>c9bd	03					.byte 3	;wh_CodeLength
>c9be	19					  .byte LinkDisplacement	; offset to previous nt
=$c9bf					XtPtr1 ::= *
=51515					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9bf					Char:
.c9bf	20 a2 ba	jsr $baa2			jsr parse_name_check
.c9c2	e8		inx				inx		; Drop number of characters, leave addr
.c9c3	e8		inx				inx
.c9c4	4c 4d cd	jmp $cd4d			jmp C_Fetch	; get character ( C@ )
=8					CodeLen	.var *-XtPtr1
=$c9c7					Here1 = *	; remember here
>c9bd	08					.byte CodeLen	;patch wh_CodeLength
>c9c7	5b 43 68 61 72 5d		Name0:	.text "[Char]"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=51533					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9cd	a6					.byte (("[Char]"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>c9ce	1c					.byte WordFlags	;wh_Flags
>c9cf	03					.byte 3	;wh_CodeLength
>c9d0	12					  .byte LinkDisplacement	; offset to previous nt
=$c9d1					XtPtr1 ::= *
=51533					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9d1	20 bf c9	jsr $c9bf	Bracket_Char:	jsr Char
.c9d4	4c 68 b7	jmp $b768			jmp Literal
=6					CodeLen	.var *-XtPtr1
=$c9d7					Here1 = *	; remember here
>c9cf	06					.byte CodeLen	;patch wh_CodeLength
>c9d7	43 68 61 72 2b			Name0:	.text "Char+"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=51548					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9dc	65					.byte (("Char+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c9dd	10					.byte WordFlags	;wh_Flags
>c9de	03					.byte 3	;wh_CodeLength
>c9df	0f					  .byte LinkDisplacement	; offset to previous nt
=$c9e0					XtPtr1 ::= *
=51548					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9e0	4c 5a ca	jmp $ca5a	Char_Plus:	jmp One_Plus
=3					CodeLen	.var *-XtPtr1
=$c9e3					Here1 = *	; remember here
>c9de	03					.byte CodeLen	;patch wh_CodeLength
>c9e3	43 68 61 72 73			Name0:	.text "Chars"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=51560					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9e8	65					.byte (("Chars"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$20					WordFlags ::= AN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c9e9	20					.byte WordFlags	;wh_Flags
>c9ea	03					.byte 3	;wh_CodeLength
>c9eb	0c					  .byte LinkDisplacement	; offset to previous nt
=$c9ec					XtPtr1 ::= *
=51560					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9ec					Chars:
=0					CodeLen	.var *-XtPtr1
=$c9ec					Here1 = *	; remember here
>c9ea	00					.byte CodeLen	;patch wh_CodeLength
.c9ec	60		rts				rts
>c9ed	43 65 6c 6c 73			Name0:	.text "Cells"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=51570					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9f2	65					.byte (("Cells"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>c9f3	40					.byte WordFlags	;wh_Flags
>c9f4	03					.byte 3	;wh_CodeLength
>c9f5	0a					  .byte LinkDisplacement	; offset to previous nt
=$c9f6					XtPtr1 ::= *
=51570					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9f6	20 1d b4	jsr $b41d	Cells:		jsr underflow_1
.c9f9	16 24		asl $24,x			asl DStack+0,x		; 2*
.c9fb	36 25		rol $25,x			rol DStack+1,x
=7					CodeLen	.var *-XtPtr1
=$c9fd					Here1 = *	; remember here
>c9f4	07					.byte CodeLen	;patch wh_CodeLength
.c9fd	60		rts				rts
>c9fe	43 65 6c 6c 2b			Name0:	.text "Cell+"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=51587					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca03	65					.byte (("Cell+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>ca04	40					.byte WordFlags	;wh_Flags
>ca05	03					.byte 3	;wh_CodeLength
>ca06	11					  .byte LinkDisplacement	; offset to previous nt
=$ca07					XtPtr1 ::= *
=51587					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca07	20 1d b4	jsr $b41d	Cell_Plus:	jsr underflow_1
.ca0a	a9 02		lda #$02	Cell_Plus_NoUf:	lda #2		; our cells are 2 bytes
.ca0c					Plus_A:
.ca0c	18		clc				clc
.ca0d	75 24		adc $24,x			adc DStack+0,x
.ca0f	95 24		sta $24,x			sta DStack+0,x
.ca11	90 02		bcc $ca15			bcc +
.ca13	f6 25		inc $25,x			inc DStack+1,x
.ca15					+
=14					CodeLen	.var *-XtPtr1
=$ca15					Here1 = *	; remember here
>ca05	0e					.byte CodeLen	;patch wh_CodeLength
.ca15	60		rts				rts
.ca16					Nos_Plus_A:
.ca16	18		clc				clc
.ca17	75 26		adc $26,x			adc DStack+2,x
.ca19	95 26		sta $26,x			sta DStack+2,x
.ca1b	90 02		bcc $ca1f			bcc +
.ca1d	f6 27		inc $27,x			inc DStack+3,x
.ca1f	60		rts		+		rts
>ca20	48 65 72 65			Name0:	.text "Here"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51620					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca24	a4					.byte (("Here"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>ca25	10					.byte WordFlags	;wh_Flags
>ca26	03					.byte 3	;wh_CodeLength
>ca27	21					  .byte LinkDisplacement	; offset to previous nt
=$ca28					XtPtr1 ::= *
=51620					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca28	a5 00		lda $00		Here:		lda cp+0
.ca2a	a4 01		ldy $01				ldy cp+1
.ca2c	4c b3 b7	jmp $b7b3			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$ca2f					Here1 = *	; remember here
>ca26	07					.byte CodeLen	;patch wh_CodeLength
>ca2f	31 2d				Name0:	.text "1-"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51633					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca31	a2					.byte (("1-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>ca32	40					.byte WordFlags	;wh_Flags
>ca33	03					.byte 3	;wh_CodeLength
>ca34	0d					  .byte LinkDisplacement	; offset to previous nt
=$ca35					XtPtr1 ::= *
=51633					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca35	20 1d b4	jsr $b41d	One_Minus:	jsr underflow_1
.ca38					One_Minus_NoUf:
.ca38	b5 24		lda $24,x			lda DStack+0,x
.ca3a	d0 02		bne $ca3e			bne +
.ca3c	d6 25		dec $25,x			dec DStack+1,x
.ca3e	d6 24		dec $24,x	+		dec DStack+0,x
=11					CodeLen	.var *-XtPtr1
=$ca40					Here1 = *	; remember here
>ca33	0b					.byte CodeLen	;patch wh_CodeLength
.ca40	60		rts				rts
.ca41					NOS_One_Minus:
.ca41	b5 26		lda $26,x			lda DStack+2,x
.ca43	d0 02		bne $ca47			bne +
.ca45	d6 27		dec $27,x			dec DStack+3,x
.ca47	d6 26		dec $26,x	+		dec DStack+2,x
.ca49	60		rts				rts
.ca4a					Minus_A:
.ca4a	18		clc				clc
.ca4b	75 24		adc $24,x			adc DStack+0,x
.ca4d	95 24		sta $24,x			sta DStack+0,x
.ca4f	b0 02		bcs $ca53			bcs +
.ca51	d6 25		dec $25,x			dec DStack+1,x
.ca53	60		rts		+		rts
>ca54	31 2b				Name0:	.text "1+"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51670					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca56	62					.byte (("1+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>ca57	40					.byte WordFlags	;wh_Flags
>ca58	03					.byte 3	;wh_CodeLength
>ca59	25					  .byte LinkDisplacement	; offset to previous nt
=$ca5a					XtPtr1 ::= *
=51670					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca5a	20 1d b4	jsr $b41d	One_Plus:	jsr underflow_1
.ca5d	f6 24		inc $24,x			inc DStack+0,x
.ca5f	d0 02		bne $ca63			bne +
.ca61	f6 25		inc $25,x			inc DStack+1,x
.ca63					+
=9					CodeLen	.var *-XtPtr1
=$ca63					Here1 = *	; remember here
>ca58	09					.byte CodeLen	;patch wh_CodeLength
.ca63	60		rts				rts
.ca64					NOS_One_Plus:
.ca64	f6 26		inc $26,x			inc DStack+2,x
.ca66	d0 02		bne $ca6a			bne +
.ca68	f6 27		inc $27,x			inc DStack+3,x
.ca6a	60		rts		+		rts
>ca6b	55 4d 2b			Name0:	.text "UM+"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51694					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca6e	63					.byte (("UM+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>ca6f	00					.byte WordFlags	;wh_Flags
>ca70	03					.byte 3	;wh_CodeLength
>ca71	18					  .byte LinkDisplacement	; offset to previous nt
=$ca72					XtPtr1 ::= *
=51694					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca72	20 f4 b3	jsr $b3f4	UMPlus:		jsr PopYA
.ca75	18		clc				clc		; add n to d1.lo
.ca76	75 26		adc $26,x			adc DStack+2,x
.ca78	95 26		sta $26,x			sta DStack+2,x
.ca7a	98		tya				tya
.ca7b	75 27		adc $27,x			adc DStack+3,x
.ca7d	95 27		sta $27,x			sta DStack+3,x
.ca7f	90 06		bcc $ca87			bcc +		; propagate carry thru d1.hi
.ca81	f6 24		inc $24,x			inc DStack+0,x
.ca83	d0 02		bne $ca87			bne +
.ca85	f6 25		inc $25,x			inc DStack+1,x
.ca87					+
=21					CodeLen	.var *-XtPtr1
=$ca87					Here1 = *	; remember here
>ca70	15					.byte CodeLen	;patch wh_CodeLength
.ca87	60		rts				rts
>ca88	4d 2b				Name0:	.text "M+"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51722					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca8a	62					.byte (("M+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>ca8b	10					.byte WordFlags	;wh_Flags
>ca8c	03					.byte 3	;wh_CodeLength
>ca8d	1c					  .byte LinkDisplacement	; offset to previous nt
=$ca8e					XtPtr1 ::= *
=51722					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca8e	20 72 ca	jsr $ca72	MPlus:		jsr UMPlus
.ca91	98		tya				tya		; if n negative
.ca92	30 a4		bmi $ca38			bmi One_Minus_NoUf ;   decrement d1.hi
=6					CodeLen	.var *-XtPtr1
=$ca94					Here1 = *	; remember here
>ca8c	06					.byte CodeLen	;patch wh_CodeLength
.ca94	60		rts				rts
>ca95	44 32 2a			Name0:	.text "D2*"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51736					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca98	43					.byte (("D2*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>ca99	40					.byte WordFlags	;wh_Flags
>ca9a	03					.byte 3	;wh_CodeLength
>ca9b	0e					  .byte LinkDisplacement	; offset to previous nt
=$ca9c					XtPtr1 ::= *
=51736					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca9c	20 31 b4	jsr $b431	D2Star:		jsr underflow_2
.ca9f	16 26		asl $26,x			asl DStack+2,x
.caa1	36 27		rol $27,x			rol DStack+3,x
.caa3	36 24		rol $24,x			rol DStack+0,x
.caa5	36 25		rol $25,x			rol DStack+1,x
=11					CodeLen	.var *-XtPtr1
=$caa7					Here1 = *	; remember here
>ca9a	0b					.byte CodeLen	;patch wh_CodeLength
.caa7	60		rts				rts
>caa8	44 32 2f			Name0:	.text "D2/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51755					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>caab	e3					.byte (("D2/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>caac	40					.byte WordFlags	;wh_Flags
>caad	03					.byte 3	;wh_CodeLength
>caae	13					  .byte LinkDisplacement	; offset to previous nt
=$caaf					XtPtr1 ::= *
=51755					WordListLink ::= Nt0 ; remember the nt of this word for later
.caaf	20 31 b4	jsr $b431	D2Slash:	jsr underflow_2
.cab2	b5 25		lda $25,x			lda DStack+1,x		; setup for sign-extended shift right
.cab4	0a		asl a				asl a
.cab5	76 25		ror $25,x	D2SlashU:	ror DStack+1,x
.cab7	76 24		ror $24,x			ror DStack+0,x
.cab9	76 27		ror $27,x			ror DStack+3,x
.cabb	76 26		ror $26,x			ror DStack+2,x
=14					CodeLen	.var *-XtPtr1
=$cabd					Here1 = *	; remember here
>caad	0e					.byte CodeLen	;patch wh_CodeLength
.cabd	60		rts				rts
>cabe	55 44 32 2f			Name0:	.text "UD2/"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51778					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cac2	e4					.byte (("UD2/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>cac3	50					.byte WordFlags	;wh_Flags
>cac4	03					.byte 3	;wh_CodeLength
>cac5	17					  .byte LinkDisplacement	; offset to previous nt
=$cac6					XtPtr1 ::= *
=51778					WordListLink ::= Nt0 ; remember the nt of this word for later
.cac6	20 31 b4	jsr $b431	DU2Slash:	jsr underflow_2
.cac9	18		clc				clc
.caca	90 e9		bcc $cab5			bcc D2SlashU
=6					CodeLen	.var *-XtPtr1
=$cacc					Here1 = *	; remember here
>cac4	06					.byte CodeLen	;patch wh_CodeLength
>cacc	32 2a				Name0:	.text "2*"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51790					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cace	42					.byte (("2*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cacf	40					.byte WordFlags	;wh_Flags
>cad0	03					.byte 3	;wh_CodeLength
>cad1	0c					  .byte LinkDisplacement	; offset to previous nt
=$cad2					XtPtr1 ::= *
=51790					WordListLink ::= Nt0 ; remember the nt of this word for later
.cad2					Two_Star:
.cad2	20 1d b4	jsr $b41d			jsr underflow_1
.cad5	16 24		asl $24,x			asl DStack+0,x
.cad7	36 25		rol $25,x			rol DStack+1,x
=7					CodeLen	.var *-XtPtr1
=$cad9					Here1 = *	; remember here
>cad0	07					.byte CodeLen	;patch wh_CodeLength
.cad9	60		rts				rts
>cada	32 2f				Name0:	.text "2/"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51804					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cadc	e2					.byte (("2/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>cadd	40					.byte WordFlags	;wh_Flags
>cade	03					.byte 3	;wh_CodeLength
>cadf	0e					  .byte LinkDisplacement	; offset to previous nt
=$cae0					XtPtr1 ::= *
=51804					WordListLink ::= Nt0 ; remember the nt of this word for later
.cae0					Two_Slash:
.cae0	20 1d b4	jsr $b41d			jsr underflow_1
.cae3	b5 25		lda $25,x			lda DStack+1,x		; load sign into carry, for signed shift
.cae5	0a		asl a				asl
.cae6	76 25		ror $25,x			ror DStack+1,x
.cae8	76 24		ror $24,x			ror DStack+0,x
=10					CodeLen	.var *-XtPtr1
=$caea					Here1 = *	; remember here
>cade	0a					.byte CodeLen	;patch wh_CodeLength
.caea	60		rts				rts
>caeb	55 32 2f			Name0:	.text "U2/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51822					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>caee	e3					.byte (("U2/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>caef	40					.byte WordFlags	;wh_Flags
>caf0	03					.byte 3	;wh_CodeLength
>caf1	12					  .byte LinkDisplacement	; offset to previous nt
=$caf2					XtPtr1 ::= *
=51822					WordListLink ::= Nt0 ; remember the nt of this word for later
.caf2					UTwo_Slash:
.caf2	20 1d b4	jsr $b41d			jsr underflow_1
.caf5	56 25		lsr $25,x			lsr DStack+1,x
.caf7	76 24		ror $24,x			ror DStack+0,x
=7					CodeLen	.var *-XtPtr1
=$caf9					Here1 = *	; remember here
>caf0	07					.byte CodeLen	;patch wh_CodeLength
.caf9	60		rts				rts
>cafa	44 52 53 68 69 66 74		Name0:	.text "DRShift"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=51841					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb01	87					.byte (("DRShift"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cb02	00					.byte WordFlags	;wh_Flags
>cb03	03					.byte 3	;wh_CodeLength
>cb04	13					  .byte LinkDisplacement	; offset to previous nt
=$cb05					XtPtr1 ::= *
=51841					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb05	20 d9 b3	jsr $b3d9	DRShift:	jsr PopA	; pop u
.cb08	a8		tay		DRShiftA:	tay
.cb09	f0 0e		beq $cb19			beq _9
.cb0b	b5 25		lda $25,x			lda DStack+1,x
.cb0d	4a		lsr a		_2:		lsr a
.cb0e	76 24		ror $24,x			ror DStack+0,x
.cb10	76 27		ror $27,x			ror DStack+3,x
.cb12	76 26		ror $26,x			ror DStack+2,x
.cb14	88		dey				dey
.cb15	d0 f6		bne $cb0d			bne _2
.cb17	95 25		sta $25,x			sta DStack+1,x
.cb19					_9:
=20					CodeLen	.var *-XtPtr1
=$cb19					Here1 = *	; remember here
>cb03	14					.byte CodeLen	;patch wh_CodeLength
.cb19	60		rts				rts
>cb1a	52 53 68 69 66 74		Name0:	.text "RShift"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=51872					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb20	86					.byte (("RShift"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>cb21	00					.byte WordFlags	;wh_Flags
>cb22	03					.byte 3	;wh_CodeLength
>cb23	1f					  .byte LinkDisplacement	; offset to previous nt
=$cb24					XtPtr1 ::= *
=51872					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb24	20 e2 b3	jsr $b3e2	RShift:		jsr PopA2	; pop u, check for 2 params
.cb27	a8		tay		RShift_A:	tay		; get shift count
.cb28	f0 0a		beq $cb34			beq _done
.cb2a	b5 25		lda $25,x			lda DStack+1,x
.cb2c	4a		lsr a		_loop:		lsr a
.cb2d	76 24		ror $24,x			ror DStack+0,x
.cb2f	88		dey				dey
.cb30	d0 fa		bne $cb2c			bne _loop
.cb32	95 25		sta $25,x			sta DStack+1,x
.cb34					_done:
=16					CodeLen	.var *-XtPtr1
=$cb34					Here1 = *	; remember here
>cb22	10					.byte CodeLen	;patch wh_CodeLength
.cb34	60		rts				rts
>cb35	4c 53 68 69 66 74		Name0:	.text "LShift"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=51899					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb3b	86					.byte (("LShift"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>cb3c	00					.byte WordFlags	;wh_Flags
>cb3d	03					.byte 3	;wh_CodeLength
>cb3e	1b					  .byte LinkDisplacement	; offset to previous nt
=$cb3f					XtPtr1 ::= *
=51899					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb3f	20 e2 b3	jsr $b3e2	LShift:		jsr PopA2	; pop u, check for 2 params
.cb42	a8		tay		LShift_A:	tay		; get shift count
.cb43	f0 0a		beq $cb4f			beq _done
.cb45	b5 25		lda $25,x			lda DStack+1,x
.cb47	16 24		asl $24,x	_loop:		asl DStack+0,x
.cb49	2a		rol a				rol a
.cb4a	88		dey				dey
.cb4b	d0 fa		bne $cb47			bne _loop
.cb4d	95 25		sta $25,x			sta DStack+1,x
.cb4f					_done:
=16					CodeLen	.var *-XtPtr1
=$cb4f					Here1 = *	; remember here
>cb3d	10					.byte CodeLen	;patch wh_CodeLength
.cb4f	60		rts				rts
>cb50	41 6e 64			Name0:	.text "And"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51923					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb53	83					.byte (("And"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cb54	40					.byte WordFlags	;wh_Flags
>cb55	03					.byte 3	;wh_CodeLength
>cb56	18					  .byte LinkDisplacement	; offset to previous nt
=$cb57					XtPtr1 ::= *
=51923					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb57					And2:
.cb57	20 31 b4	jsr $b431			jsr underflow_2
.cb5a	b5 24		lda $24,x			lda DStack+0,x
.cb5c	35 26		and $26,x			and DStack+2,x
.cb5e	95 26		sta $26,x			sta DStack+2,x
.cb60	b5 25		lda $25,x			lda DStack+1,x
.cb62	35 27		and $27,x			and DStack+3,x
.cb64	95 27		sta $27,x			sta DStack+3,x
.cb66	e8		inx				inx		; Drop n2
.cb67	e8		inx				inx
=17					CodeLen	.var *-XtPtr1
=$cb68					Here1 = *	; remember here
>cb55	11					.byte CodeLen	;patch wh_CodeLength
.cb68	60		rts				rts
>cb69	4f 72				Name0:	.text "Or"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51947					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb6b	42					.byte (("Or"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cb6c	40					.byte WordFlags	;wh_Flags
>cb6d	03					.byte 3	;wh_CodeLength
>cb6e	18					  .byte LinkDisplacement	; offset to previous nt
=$cb6f					XtPtr1 ::= *
=51947					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb6f					Or:
.cb6f	20 31 b4	jsr $b431			jsr underflow_2
.cb72	b5 24		lda $24,x			lda DStack+0,x
.cb74	15 26		ora $26,x			ora DStack+2,x
.cb76	95 26		sta $26,x			sta DStack+2,x
.cb78	b5 25		lda $25,x			lda DStack+1,x
.cb7a	15 27		ora $27,x			ora DStack+3,x
.cb7c	95 27		sta $27,x			sta DStack+3,x
.cb7e	e8		inx				inx		; Drop n2
.cb7f	e8		inx				inx
=17					CodeLen	.var *-XtPtr1
=$cb80					Here1 = *	; remember here
>cb6d	11					.byte CodeLen	;patch wh_CodeLength
.cb80	60		rts				rts
>cb81	58 6f 72			Name0:	.text "Xor"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51972					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb84	43					.byte (("Xor"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>cb85	40					.byte WordFlags	;wh_Flags
>cb86	03					.byte 3	;wh_CodeLength
>cb87	19					  .byte LinkDisplacement	; offset to previous nt
=$cb88					XtPtr1 ::= *
=51972					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb88					Xor:
.cb88	20 31 b4	jsr $b431			jsr underflow_2
.cb8b	b5 24		lda $24,x			lda DStack+0,x
.cb8d	55 26		eor $26,x			eor DStack+2,x
.cb8f	95 26		sta $26,x			sta DStack+2,x
.cb91	b5 25		lda $25,x			lda DStack+1,x
.cb93	55 27		eor $27,x			eor DStack+3,x
.cb95	95 27		sta $27,x			sta DStack+3,x
.cb97	e8		inx				inx		; Drop n2
.cb98	e8		inx				inx
=17					CodeLen	.var *-XtPtr1
=$cb99					Here1 = *	; remember here
>cb86	11					.byte CodeLen	;patch wh_CodeLength
.cb99	60		rts				rts
>cb9a	2b				Name0:	.text "+"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=51995					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb9b	61					.byte (("+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>cb9c	40					.byte WordFlags	;wh_Flags
>cb9d	03					.byte 3	;wh_CodeLength
>cb9e	17					  .byte LinkDisplacement	; offset to previous nt
=$cb9f					XtPtr1 ::= *
=51995					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb9f					Plus:
.cb9f	20 31 b4	jsr $b431			jsr underflow_2
.cba2	18		clc				clc
.cba3	b5 24		lda $24,x			lda DStack+0,x		; LSB
.cba5	75 26		adc $26,x			adc DStack+2,x
.cba7	95 26		sta $26,x			sta DStack+2,x
.cba9	b5 25		lda $25,x			lda DStack+1,x		; MSB. No CLC, conserve carry bit
.cbab	75 27		adc $27,x			adc DStack+3,x
.cbad	95 27		sta $27,x			sta DStack+3,x
.cbaf	e8		inx				inx
.cbb0	e8		inx				inx
=18					CodeLen	.var *-XtPtr1
=$cbb1					Here1 = *	; remember here
>cb9d	12					.byte CodeLen	;patch wh_CodeLength
.cbb1	60		rts				rts
>cbb2	2d				Name0:	.text "-"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52019					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbb3	a1					.byte (("-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cbb4	40					.byte WordFlags	;wh_Flags
>cbb5	03					.byte 3	;wh_CodeLength
>cbb6	18					  .byte LinkDisplacement	; offset to previous nt
=$cbb7					XtPtr1 ::= *
=52019					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbb7					Minus:
.cbb7	20 31 b4	jsr $b431			jsr underflow_2
.cbba	38		sec				sec
.cbbb	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cbbd	f5 24		sbc $24,x			sbc DStack+0,x
.cbbf	95 26		sta $26,x			sta DStack+2,x
.cbc1	b5 27		lda $27,x			lda DStack+3,x	; MSB
.cbc3	f5 25		sbc $25,x			sbc DStack+1,x
.cbc5	95 27		sta $27,x			sta DStack+3,x
.cbc7	e8		inx				inx		; Drop n2
.cbc8	e8		inx				inx
=18					CodeLen	.var *-XtPtr1
=$cbc9					Here1 = *	; remember here
>cbb5	12					.byte CodeLen	;patch wh_CodeLength
.cbc9	60		rts				rts
>cbca	2e				Name0:	.text "."	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52043					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbcb	c1					.byte (("."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cbcc	10					.byte WordFlags	;wh_Flags
>cbcd	03					.byte 3	;wh_CodeLength
>cbce	18					  .byte LinkDisplacement	; offset to previous nt
=$cbcf					XtPtr1 ::= *
=52043					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbcf	b5 25		lda $25,x	Dot:		lda DStack+1,x		; ( n )	save sign
.cbd1	08		php				php
.cbd2	20 c2 c6	jsr $c6c2			jsr Abs			; ( u )
.cbd5	20 f0 b7	jsr $b7f0			jsr Zero		; ( ud )	u>d  cvt u to ud
.cbd8	4c e7 cb	jmp $cbe7			jmp fmt_d3
=12					CodeLen	.var *-XtPtr1
=$cbdb					Here1 = *	; remember here
>cbcd	0c					.byte CodeLen	;patch wh_CodeLength
>cbdb	44 2e				Name0:	.text "D."	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52061					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbdd	c2					.byte (("D."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cbde	10					.byte WordFlags	;wh_Flags
>cbdf	03					.byte 3	;wh_CodeLength
>cbe0	12					  .byte LinkDisplacement	; offset to previous nt
=$cbe1					XtPtr1 ::= *
=52061					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbe1	b5 25		lda $25,x	D_Dot:		lda DStack+1,x		; save sign
.cbe3	08		php				php
.cbe4	20 f5 c6	jsr $c6f5			jsr DAbs
.cbe7	20 e2 ab	jsr $abe2	fmt_d3:		jsr Less_Number_Sign	; ( ud )	start formatting
.cbea	20 51 ac	jsr $ac51			jsr Number_sign_s	; ( ud )	do all digits
.cbed	28		plp				plp			; ( ud )	do sign
.cbee	20 6b ac	jsr $ac6b			jsr Sign_P		; ( ud )
.cbf1	20 ee ab	jsr $abee			jsr Number_sign_greater	; ( addr u )	end formatting
.cbf4	20 d8 cd	jsr $cdd8			jsr Type
.cbf7	4c cc cd	jmp $cdcc			jmp Space
=25					CodeLen	.var *-XtPtr1
=$cbfa					Here1 = *	; remember here
>cbdf	19					.byte CodeLen	;patch wh_CodeLength
>cbfa	55 2e				Name0:	.text "U."	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52092					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbfc	c2					.byte (("U."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>cbfd	50					.byte WordFlags	;wh_Flags
>cbfe	03					.byte 3	;wh_CodeLength
>cbff	1f					  .byte LinkDisplacement	; offset to previous nt
=$cc00					XtPtr1 ::= *
=52092					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc00	20 1d b4	jsr $b41d	U_Dot:		jsr underflow_1
.cc03	20 19 cc	jsr $cc19			jsr print_u
.cc06	4c cc cd	jmp $cdcc			jmp Space
=9					CodeLen	.var *-XtPtr1
=$cc09					Here1 = *	; remember here
>cbfe	09					.byte CodeLen	;patch wh_CodeLength
>cc09	55 44 2e			Name0:	.text "UD."	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52108					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc0c	c3					.byte (("UD."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>cc0d	50					.byte WordFlags	;wh_Flags
>cc0e	03					.byte 3	;wh_CodeLength
>cc0f	10					  .byte LinkDisplacement	; offset to previous nt
=$cc10					XtPtr1 ::= *
=52108					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc10	20 31 b4	jsr $b431	UD_Dot:		jsr underflow_2 ; double number
.cc13	20 1c cc	jsr $cc1c			jsr print_ud
.cc16	4c cc cd	jmp $cdcc			jmp Space
=9					CodeLen	.var *-XtPtr1
=$cc19					Here1 = *	; remember here
>cc0e	09					.byte CodeLen	;patch wh_CodeLength
.cc19					print_u:
.cc19	20 f0 b7	jsr $b7f0			jsr Zero			; convert to ud
.cc1c					print_ud:
.cc1c	20 e2 ab	jsr $abe2			jsr Less_Number_Sign		; <#	start formatting
.cc1f	20 51 ac	jsr $ac51			jsr Number_sign_s		; #S	do all digits
.cc22	20 ee ab	jsr $abee			jsr Number_sign_greater		; #>	end formatting
.cc25	4c d8 cd	jmp $cdd8			jmp Type
>cc28	55 2e 52			Name0:	.text "U.R"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52139					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc2b	43					.byte (("U.R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>cc2c	10					.byte WordFlags	;wh_Flags
>cc2d	03					.byte 3	;wh_CodeLength
>cc2e	1f					  .byte LinkDisplacement	; offset to previous nt
=$cc2f					XtPtr1 ::= *
=52139					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc2f	20 d9 b3	jsr $b3d9	U_Dot_R:	jsr PopA		; save field width
.cc32	48		pha		U_Dot_R_A:	pha
.cc33	20 f0 b7	jsr $b7f0			jsr Zero		; u>d  cvt u to ud
.cc36	4c 45 cc	jmp $cc45			jmp fmt_udr3
=10					CodeLen	.var *-XtPtr1
=$cc39					Here1 = *	; remember here
>cc2d	0a					.byte CodeLen	;patch wh_CodeLength
>cc39	55 44 2e 52			Name0:	.text "UD.R"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52157					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc3d	44					.byte (("UD.R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cc3e	10					.byte WordFlags	;wh_Flags
>cc3f	03					.byte 3	;wh_CodeLength
>cc40	12					  .byte LinkDisplacement	; offset to previous nt
=$cc41					XtPtr1 ::= *
=52157					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc41	20 d9 b3	jsr $b3d9	UD_Dot_R:	jsr PopA			; save field width
.cc44	48		pha		UD_Dot_R_A:	pha
.cc45	20 e2 ab	jsr $abe2	fmt_udr3:	jsr Less_Number_Sign		; start formatted
.cc48	20 51 ac	jsr $ac51			jsr Number_sign_s		; do all digits
.cc4b	20 ee ab	jsr $abee	fmt_r:		jsr Number_sign_greater		; finish formatted
.cc4e	68		pla				pla				; recover field width
.cc4f	38		sec				sec				; do leading spaces
.cc50	f5 24		sbc $24,x			sbc DStack+0,x
.cc52	90 06		bcc $cc5a			bcc +
.cc54	20 e2 b7	jsr $b7e2			jsr PushZA
.cc57	20 93 c4	jsr $c493			jsr Spaces
.cc5a	4c d8 cd	jmp $cdd8	+		jmp Type			; type formatted
=28					CodeLen	.var *-XtPtr1
=$cc5d					Here1 = *	; remember here
>cc3f	1c					.byte CodeLen	;patch wh_CodeLength
>cc5d	2e 52				Name0:	.text ".R"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52191					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc5f	42					.byte ((".R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>cc60	10					.byte WordFlags	;wh_Flags
>cc61	03					.byte 3	;wh_CodeLength
>cc62	22					  .byte LinkDisplacement	; offset to previous nt
=$cc63					XtPtr1 ::= *
=52191					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc63	20 d9 b3	jsr $b3d9	Dot_R:		jsr PopA		; save field width
.cc66	48		pha		Dot_R_A:	pha
.cc67	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cc69	08		php				php
.cc6a	20 c2 c6	jsr $c6c2			jsr Abs
.cc6d	20 f0 b7	jsr $b7f0			jsr Zero		; u>d  cvt u to ud
.cc70	4c 84 cc	jmp $cc84			jmp fmt_dr3
=16					CodeLen	.var *-XtPtr1
=$cc73					Here1 = *	; remember here
>cc61	10					.byte CodeLen	;patch wh_CodeLength
>cc73	44 2e 52			Name0:	.text "D.R"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52214					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc76	43					.byte (("D.R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>cc77	10					.byte WordFlags	;wh_Flags
>cc78	03					.byte 3	;wh_CodeLength
>cc79	17					  .byte LinkDisplacement	; offset to previous nt
=$cc7a					XtPtr1 ::= *
=52214					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc7a	20 d9 b3	jsr $b3d9	D_Dot_R:	jsr PopA		; save field width
.cc7d	48		pha		D_Dot_R_A:	pha
.cc7e	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cc80	08		php				php
.cc81	20 f5 c6	jsr $c6f5			jsr DAbs
.cc84	20 e2 ab	jsr $abe2	fmt_dr3:	jsr Less_Number_Sign	; start formatted output
.cc87	20 51 ac	jsr $ac51			jsr Number_sign_s	; do all digits
.cc8a	28		plp				plp			; do the sign
.cc8b	20 6b ac	jsr $ac6b			jsr Sign_P
.cc8e	4c 4b cc	jmp $cc4b			jmp fmt_r
=23					CodeLen	.var *-XtPtr1
=$cc91					Here1 = *	; remember here
>cc78	17					.byte CodeLen	;patch wh_CodeLength
>cc91	3f				Name0:	.text "?"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52242					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc92	e1					.byte (("?"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>cc93	10					.byte WordFlags	;wh_Flags
>cc94	03					.byte 3	;wh_CodeLength
>cc95	1c					  .byte LinkDisplacement	; offset to previous nt
=$cc96					XtPtr1 ::= *
=52242					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc96					Question:
.cc96	20 98 ce	jsr $ce98			jsr Fetch
.cc99	4c cf cb	jmp $cbcf			jmp Dot
=6					CodeLen	.var *-XtPtr1
=$cc9c					Here1 = *	; remember here
>cc94	06					.byte CodeLen	;patch wh_CodeLength
>cc9c	32 44 75 70			Name0:	.text "2Dup"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52256					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cca0	04					.byte (("2Dup"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>cca1	40					.byte WordFlags	;wh_Flags
>cca2	03					.byte 3	;wh_CodeLength
>cca3	0e					  .byte LinkDisplacement	; offset to previous nt
=$cca4					XtPtr1 ::= *
=52256					WordListLink ::= Nt0 ; remember the nt of this word for later
.cca4					Two_Dup:
.cca4	20 31 b4	jsr $b431			jsr underflow_2
.cca7	ca		dex				dex
.cca8	ca		dex				dex
.cca9	ca		dex				dex
.ccaa	ca		dex				dex
.ccab	b5 28		lda $28,x			lda DStack+4,x	; TOS
.ccad	95 24		sta $24,x			sta DStack+0,x
.ccaf	b5 29		lda $29,x			lda DStack+5,x
.ccb1	95 25		sta $25,x			sta DStack+1,x
.ccb3	b5 2a		lda $2a,x			lda DStack+6,x	; NOS
.ccb5	95 26		sta $26,x			sta DStack+2,x
.ccb7	b5 2b		lda $2b,x			lda DStack+7,x
.ccb9	95 27		sta $27,x			sta DStack+3,x
=23					CodeLen	.var *-XtPtr1
=$ccbb					Here1 = *	; remember here
>cca2	17					.byte CodeLen	;patch wh_CodeLength
.ccbb	60		rts				rts
>ccbc	54 75 63 6b			Name0:	.text "Tuck"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52288					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ccc0	64					.byte (("Tuck"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>ccc1	40					.byte WordFlags	;wh_Flags
>ccc2	03					.byte 3	;wh_CodeLength
>ccc3	20					  .byte LinkDisplacement	; offset to previous nt
=$ccc4					XtPtr1 ::= *
=52288					WordListLink ::= Nt0 ; remember the nt of this word for later
.ccc4					Tuck:
.ccc4	20 31 b4	jsr $b431			jsr underflow_2
.ccc7	ca		dex				dex
.ccc8	ca		dex				dex
.ccc9	b4 28		ldy $28,x			ldy DStack+4,x	; LSB
.cccb	b5 26		lda $26,x			lda DStack+2,x
.cccd	95 28		sta $28,x			sta DStack+4,x
.cccf	94 26		sty $26,x			sty DStack+2,x
.ccd1	95 24		sta $24,x			sta DStack+0,x
.ccd3	b4 29		ldy $29,x			ldy DStack+5,x	; MSB
.ccd5	b5 27		lda $27,x			lda DStack+3,x
.ccd7	95 29		sta $29,x			sta DStack+5,x
.ccd9	94 27		sty $27,x			sty DStack+3,x
.ccdb	95 25		sta $25,x			sta DStack+1,x
=25					CodeLen	.var *-XtPtr1
=$ccdd					Here1 = *	; remember here
>ccc2	19					.byte CodeLen	;patch wh_CodeLength
.ccdd	60		rts				rts
>ccde	43 2c				Name0:	.text "C,"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52320					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cce0	82					.byte (("C,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>cce1	10					.byte WordFlags	;wh_Flags
>cce2	03					.byte 3	;wh_CodeLength
>cce3	20					  .byte LinkDisplacement	; offset to previous nt
=$cce4					XtPtr1 ::= *
=52320					WordListLink ::= Nt0 ; remember the nt of this word for later
.cce4	20 d9 b3	jsr $b3d9	C_Comma:	jsr PopA	; pop c, with underflow check
.cce7					C_Comma_A:
.cce7	94 23		sty $23,x			sty DStack-1,x	; save Y
.cce9	a0 00		ldy #$00			ldy #0		; store A
.cceb	91 00		sta ($00),y			sta (cp),y
.cced	e6 00		inc $00				inc cp+0	; increment cp
.ccef	d0 02		bne $ccf3			bne +
.ccf1	e6 01		inc $01				inc cp+1
.ccf3					+
.ccf3	b4 23		ldy $23,x			ldy DStack-1,x	; restore Y
=17					CodeLen	.var *-XtPtr1
=$ccf5					Here1 = *	; remember here
>cce2	11					.byte CodeLen	;patch wh_CodeLength
.ccf5	60		rts				rts
>ccf6	2c				Name0:	.text ","	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52343					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ccf7	81					.byte ((","[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>ccf8	10					.byte WordFlags	;wh_Flags
>ccf9	03					.byte 3	;wh_CodeLength
>ccfa	17					  .byte LinkDisplacement	; offset to previous nt
=$ccfb					XtPtr1 ::= *
=52343					WordListLink ::= Nt0 ; remember the nt of this word for later
.ccfb	20 f4 b3	jsr $b3f4	Comma:		jsr PopYA	; pop n, with underflow check
.ccfe					Comma_YA:
.ccfe	20 e7 cc	jsr $cce7			jsr C_Comma_A	; compile LSB
.cd01	98		tya				tya		; compile MSB
.cd02	4c e7 cc	jmp $cce7			jmp C_Comma_A
=10					CodeLen	.var *-XtPtr1
=$cd05					Here1 = *	; remember here
>ccf9	0a					.byte CodeLen	;patch wh_CodeLength
>cd05	32 2c				Name0:	.text "2,"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52359					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd07	82					.byte (("2,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>cd08	10					.byte WordFlags	;wh_Flags
>cd09	03					.byte 3	;wh_CodeLength
>cd0a	10					  .byte LinkDisplacement	; offset to previous nt
=$cd0b					XtPtr1 ::= *
=52359					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd0b	20 fb cc	jsr $ccfb	Two_Comma:	jsr Comma
.cd0e	4c fb cc	jmp $ccfb			jmp Comma
=6					CodeLen	.var *-XtPtr1
=$cd11					Here1 = *	; remember here
>cd09	06					.byte CodeLen	;patch wh_CodeLength
.cd11	a9 e8		lda #$e8	Drop_Comma:	lda #$e8	;inx
.cd13	a8		tay				tay
.cd14	d0 e8		bne $ccfe			bne Comma_YA
>cd16	4a 73 72 2c			Name0:	.text "Jsr,"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52378					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd1a	84					.byte (("Jsr,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cd1b	10					.byte WordFlags	;wh_Flags
>cd1c	03					.byte 3	;wh_CodeLength
>cd1d	13					  .byte LinkDisplacement	; offset to previous nt
=$cd1e					XtPtr1 ::= *
=52378					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd1e	20 f4 b3	jsr $b3f4	Jsr_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cd21	20 b3 b7	jsr $b7b3	Jsr_Comma_YA:	jsr PushYA	; push addr
.cd24	a9 20		lda #$20			lda #$20	; JSR abs opcode
.cd26	20 e7 cc	jsr $cce7	Jsr_Comma_3:	jsr C_Comma_A
.cd29	4c fb cc	jmp $ccfb			jmp Comma	; compile addr
=14					CodeLen	.var *-XtPtr1
=$cd2c					Here1 = *	; remember here
>cd1c	0e					.byte CodeLen	;patch wh_CodeLength
>cd2c	4a 6d 70 2c			Name0:	.text "Jmp,"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52400					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd30	84					.byte (("Jmp,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cd31	10					.byte WordFlags	;wh_Flags
>cd32	03					.byte 3	;wh_CodeLength
>cd33	16					  .byte LinkDisplacement	; offset to previous nt
=$cd34					XtPtr1 ::= *
=52400					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd34	20 f4 b3	jsr $b3f4	Jmp_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cd37	20 b3 b7	jsr $b7b3	Jmp_Comma_YA:	jsr PushYA	; push addr
.cd3a	a9 4c		lda #$4c			lda #$4c	; JMP abs opcode
.cd3c	d0 e8		bne $cd26			bne Jsr_Comma_3
.cd3e					Jmp_Comma_NT_YA:
.cd3e	20 b3 b7	jsr $b7b3			jsr PushYA
.cd41	20 9d bd	jsr $bd9d			jsr Name_To_Int	; convert nt to xt
.cd44	4c 34 cd	jmp $cd34			jmp Jmp_Comma
=19					CodeLen	.var *-XtPtr1
=$cd47					Here1 = *	; remember here
>cd32	13					.byte CodeLen	;patch wh_CodeLength
>cd47	43 40				Name0:	.text "C@"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52425					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd49	02					.byte (("C@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>cd4a	40					.byte WordFlags	;wh_Flags
>cd4b	03					.byte 3	;wh_CodeLength
>cd4c	19					  .byte LinkDisplacement	; offset to previous nt
=$cd4d					XtPtr1 ::= *
=52425					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd4d	20 1d b4	jsr $b41d	C_Fetch:	jsr underflow_1
.cd50	a1 24		lda ($24,x)			lda (DStack+0,x)
.cd52	95 24		sta $24,x			sta DStack+0,x
.cd54	a9 00		lda #$00			lda #0
.cd56	95 25		sta $25,x			sta DStack+1,x	; zero MSB
=11					CodeLen	.var *-XtPtr1
=$cd58					Here1 = *	; remember here
>cd4b	0b					.byte CodeLen	;patch wh_CodeLength
.cd58	60		rts				rts
>cd59	43 21				Name0:	.text "C!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52443					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd5b	22					.byte (("C!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cd5c	40					.byte WordFlags	;wh_Flags
>cd5d	03					.byte 3	;wh_CodeLength
>cd5e	12					  .byte LinkDisplacement	; offset to previous nt
=$cd5f					XtPtr1 ::= *
=52443					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd5f	20 31 b4	jsr $b431	C_Store:	jsr underflow_2
.cd62	b5 26		lda $26,x			lda DStack+2,x
.cd64	81 24		sta ($24,x)			sta (DStack+0,x)
.cd66	e8		inx				inx
.cd67	e8		inx				inx
.cd68	e8		inx				inx
.cd69	e8		inx				inx
=11					CodeLen	.var *-XtPtr1
=$cd6a					Here1 = *	; remember here
>cd5d	0b					.byte CodeLen	;patch wh_CodeLength
.cd6a	60		rts				rts
>cd6b	31 2b 21			Name0:	.text "1+!"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52462					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd6e	23					.byte (("1+!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cd6f	00					.byte WordFlags	;wh_Flags
>cd70	03					.byte 3	;wh_CodeLength
>cd71	13					  .byte LinkDisplacement	; offset to previous nt
=$cd72					XtPtr1 ::= *
=52462					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd72					OnePlusStore:
.cd72	a9 01		lda #$01			lda #1
.cd74	18		clc				clc
.cd75	61 24		adc ($24,x)			adc (DStack+0,x)	; increment lo byte
.cd77	81 24		sta ($24,x)			sta (DStack+0,x)
.cd79	90 0c		bcc $cd87			bcc _7			; if carry
.cd7b	f6 24		inc $24,x			inc DStack+0,x		;   point at hi byte
.cd7d	d0 02		bne $cd81			bne +
.cd7f	f6 25		inc $25,x			inc DStack+1,x
.cd81					+
.cd81	a1 24		lda ($24,x)			lda (DStack+0,x)	;   increment hi byte
.cd83	69 00		adc #$00			adc #0
.cd85	81 24		sta ($24,x)			sta (Dstack+0,x)
.cd87					_7:
.cd87	e8		inx				inx			; Drop addr
.cd88	e8		inx				inx
=23					CodeLen	.var *-XtPtr1
=$cd89					Here1 = *	; remember here
>cd70	17					.byte CodeLen	;patch wh_CodeLength
.cd89	60		rts				rts
>cd8a	2b 21				Name0:	.text "+!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52492					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd8c	22					.byte (("+!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>cd8d	50					.byte WordFlags	;wh_Flags
>cd8e	03					.byte 3	;wh_CodeLength
>cd8f	1e					  .byte LinkDisplacement	; offset to previous nt
=$cd90					XtPtr1 ::= *
=52492					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd90					Plus_store:
.cd90	20 31 b4	jsr $b431			jsr underflow_2
.cd93	18		clc				clc
.cd94	b5 26		lda $26,x			lda DStack+2,x
.cd96	61 24		adc ($24,x)			adc (DStack+0,x)
.cd98	81 24		sta ($24,x)			sta (DStack+0,x)
.cd9a	f6 24		inc $24,x			inc DStack+0,x
.cd9c	d0 02		bne $cda0			bne +
.cd9e	f6 25		inc $25,x			inc DStack+1,x
.cda0					+
.cda0	b5 27		lda $27,x			lda DStack+3,x
.cda2	61 24		adc ($24,x)			adc (DStack+0,x)
.cda4	81 24		sta ($24,x)			sta (DStack+0,x)
.cda6	4c 36 c5	jmp $c536			jmp Two_Drop
=25					CodeLen	.var *-XtPtr1
=$cda9					Here1 = *	; remember here
>cd8e	19					.byte CodeLen	;patch wh_CodeLength
>cda9	42 65 6c 6c			Name0:	.text "Bell"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52525					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cdad	84					.byte (("Bell"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>cdae	10					.byte WordFlags	;wh_Flags
>cdaf	03					.byte 3	;wh_CodeLength
>cdb0	21					  .byte LinkDisplacement	; offset to previous nt
=$cdb1					XtPtr1 ::= *
=52525					WordListLink ::= Nt0 ; remember the nt of this word for later
.cdb1	a9 07		lda #$07	Bell:		lda #7		; ASCII value for BELL
.cdb3	d0 0b		bne $cdc0			bne Emit_A
=4					CodeLen	.var *-XtPtr1
=$cdb5					Here1 = *	; remember here
>cdaf	04					.byte CodeLen	;patch wh_CodeLength
>cdb5	45 6d 69 74			Name0:	.text "Emit"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52537					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cdb9	84					.byte (("Emit"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cdba	10					.byte WordFlags	;wh_Flags
>cdbb	03					.byte 3	;wh_CodeLength
>cdbc	0c					  .byte LinkDisplacement	; offset to previous nt
=$cdbd					XtPtr1 ::= *
=52537					WordListLink ::= Nt0 ; remember the nt of this word for later
.cdbd	20 d9 b3	jsr $b3d9	Emit:		jsr PopA		; pop char, with underflow check
.cdc0					Emit_A:
.cdc0	6c 06 03	jmp ($0306)			jmp (output)		; JSR/RTS
=6					CodeLen	.var *-XtPtr1
=$cdc3					Here1 = *	; remember here
>cdbb	06					.byte CodeLen	;patch wh_CodeLength
>cdc3	53 70 61 63 65			Name0:	.text "Space"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=52552					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cdc8	a5					.byte (("Space"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>cdc9	10					.byte WordFlags	;wh_Flags
>cdca	03					.byte 3	;wh_CodeLength
>cdcb	0f					  .byte LinkDisplacement	; offset to previous nt
=$cdcc					XtPtr1 ::= *
=52552					WordListLink ::= Nt0 ; remember the nt of this word for later
.cdcc	a9 20		lda #$20	Space:		lda #AscSP
.cdce	d0 f0		bne $cdc0			bne Emit_A
=4					CodeLen	.var *-XtPtr1
=$cdd0					Here1 = *	; remember here
>cdca	04					.byte CodeLen	;patch wh_CodeLength
>cdd0	54 79 70 65			Name0:	.text "Type"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52564					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cdd4	a4					.byte (("Type"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cdd5	50					.byte WordFlags	;wh_Flags
>cdd6	03					.byte 3	;wh_CodeLength
>cdd7	0c					  .byte LinkDisplacement	; offset to previous nt
=$cdd8					XtPtr1 ::= *
=52564					WordListLink ::= Nt0 ; remember the nt of this word for later
.cdd8					Type:
.cdd8	20 31 b4	jsr $b431			jsr underflow_2
.cddb	4c e8 cd	jmp $cde8			jmp _test
.cdde					_loop:
.cdde	d6 24		dec $24,x			dec DStack+0,x		; finish length decrement
.cde0	a1 26		lda ($26,x)			lda (DStack+2,x)	; Send the current character
.cde2	20 c0 cd	jsr $cdc0			jsr Emit_A
.cde5	20 64 ca	jsr $ca64			jsr NOS_One_Plus	; increment address
.cde8	b5 24		lda $24,x	_test:		lda DStack+0,x		; decrement length & test for <0
.cdea	d0 f2		bne $cdde			bne _loop
.cdec	d6 25		dec $25,x			dec DStack+1,x
.cdee	10 ee		bpl $cdde			bpl _loop
.cdf0	4c 36 c5	jmp $c536			jmp Two_drop
=27					CodeLen	.var *-XtPtr1
=$cdf3					Here1 = *	; remember here
>cdd6	1b					.byte CodeLen	;patch wh_CodeLength
.cdf3					Print_ASCIIZ_YA_no_lf:
.cdf3	85 18		sta $18				sta tmp3+0		; save string address
.cdf5	84 19		sty $19				sty tmp3+1
.cdf7	a0 00		ldy #$00			ldy #0
.cdf9					Print_ASCIIZ_tmp3_no_lf:
.cdf9	b1 18		lda ($18),y			lda (tmp3),y
.cdfb	f0 06		beq $ce03			beq _done		; end of string?
.cdfd	20 c0 cd	jsr $cdc0			jsr emit_a
.ce00	c8		iny				iny
.ce01	d0 f6		bne $cdf9			bne Print_ASCIIZ_tmp3_no_lf
.ce03					_done:
.ce03	60		rts				rts
.ce04					Print_ASCIIZ_YA:
.ce04	20 f3 cd	jsr $cdf3			jsr Print_ASCIIZ_YA_no_lf
.ce07	4c 69 ab	jmp $ab69	                jmp CR
>ce0a	45 78 65 63 75 74 65		Name0:	.text "Execute"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=52625					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce11	a7					.byte (("Execute"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=61					LinkDisplacement = Nt0-WordListLink
>ce12	10					.byte WordFlags	;wh_Flags
>ce13	03					.byte 3	;wh_CodeLength
>ce14	3d					  .byte LinkDisplacement	; offset to previous nt
=$ce15					XtPtr1 ::= *
=52625					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce15					Execute:
.ce15	e0 27		cpx #$27		cpx #-2*1+DStack0+1	; far enough below end of data stack (& not negative)?
.ce17	b0 2e		bcs $ce47		bcs Throw_Stack_03
.ce19	b5 25		lda $25,x			lda DStack+1,x	; addr for RTI
.ce1b	48		pha				pha
.ce1c	b5 24		lda $24,x			lda DStack+0,x
.ce1e	48		pha				pha
.ce1f	e8		inx				inx		; drop addr
.ce20	e8		inx				inx
.ce21	08		php				php		; flags for RTI
.ce22	40		rti				rti
=14					CodeLen	.var *-XtPtr1
=$ce23					Here1 = *	; remember here
>ce13	0e					.byte CodeLen	;patch wh_CodeLength
>ce23	32 52 6f 74			Name0:	.text "2Rot"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52647					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce27	84					.byte (("2Rot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>ce28	10					.byte WordFlags	;wh_Flags
>ce29	03					.byte 3	;wh_CodeLength
>ce2a	16					  .byte LinkDisplacement	; offset to previous nt
=$ce2b					XtPtr1 ::= *
=52647					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce2b					TwoRot:
.ce2b	e0 1d		cpx #$1d		cpx #-2*6+DStack0+1	; far enough below end of data stack (& not negative)?
.ce2d	b0 18		bcs $ce47		bcs Throw_Stack_03
.ce2f	86 14		stx $14				stx tmp1+0
.ce31	e8		inx				inx		; do 4 times
.ce32	e8		inx				inx
.ce33	e8		inx				inx
.ce34	e8		inx				inx
.ce35	ca		dex		-		dex
.ce36	b4 2c		ldy $2c,x			ldy DStack+8,x	; do a byte
.ce38	b5 28		lda $28,x			lda DStack+4,x
.ce3a	95 2c		sta $2c,x			sta DStack+8,x
.ce3c	b5 24		lda $24,x			lda DStack+0,x
.ce3e	95 28		sta $28,x			sta DStack+4,x
.ce40	94 24		sty $24,x			sty DStack+0,x
.ce42	e4 14		cpx $14				cpx tmp1+0
.ce44	d0 ef		bne $ce35			bne -
=27					CodeLen	.var *-XtPtr1
=$ce46					Here1 = *	; remember here
>ce29	1b					.byte CodeLen	;patch wh_CodeLength
.ce46	60		rts				rts
.ce47	4c 40 b4	jmp $b440	Throw_Stack_03: jmp Throw_Stack
>ce4a	52 6f 74			Name0:	.text "Rot"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52685					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce4d	83					.byte (("Rot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>ce4e	10					.byte WordFlags	;wh_Flags
>ce4f	03					.byte 3	;wh_CodeLength
>ce50	26					  .byte LinkDisplacement	; offset to previous nt
=$ce51					XtPtr1 ::= *
=52685					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce51					Rot:
.ce51	e0 23		cpx #$23		cpx #-2*3+DStack0+1	; far enough below end of data stack (& not negative)?
.ce53	b0 f2		bcs $ce47		bcs Throw_Stack_03
.ce55	b4 29		ldy $29,x			ldy DStack+5,x	; do MSB
.ce57	b5 27		lda $27,x			lda DStack+3,x
.ce59	95 29		sta $29,x			sta DStack+5,x
.ce5b	b5 25		lda $25,x			lda DStack+1,x
.ce5d	95 27		sta $27,x			sta DStack+3,x
.ce5f	94 25		sty $25,x			sty DStack+1,x
.ce61	b4 28		ldy $28,x			ldy DStack+4,x	; do LSB
.ce63	b5 26		lda $26,x			lda DStack+2,x
.ce65	95 28		sta $28,x			sta DStack+4,x
.ce67	b5 24		lda $24,x			lda DStack+0,x
.ce69	95 26		sta $26,x			sta DStack+2,x
.ce6b	94 24		sty $24,x			sty DStack+0,x
=28					CodeLen	.var *-XtPtr1
=$ce6d					Here1 = *	; remember here
>ce4f	1c					.byte CodeLen	;patch wh_CodeLength
.ce6d	60		rts				rts
>ce6e	2d 52 6f 74			Name0:	.text "-Rot"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52722					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce72	84					.byte (("-Rot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>ce73	10					.byte WordFlags	;wh_Flags
>ce74	03					.byte 3	;wh_CodeLength
>ce75	25					  .byte LinkDisplacement	; offset to previous nt
=$ce76					XtPtr1 ::= *
=52722					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce76					Not_Rot:
.ce76	e0 23		cpx #$23		cpx #-2*3+DStack0+1	; far enough below end of data stack (& not negative)?
.ce78	b0 cd		bcs $ce47		bcs Throw_Stack_03
.ce7a	b4 25		ldy $25,x			ldy DStack+1,x	; do MSB
.ce7c	b5 27		lda $27,x			lda DStack+3,x
.ce7e	95 25		sta $25,x			sta DStack+1,x
.ce80	b5 29		lda $29,x			lda DStack+5,x
.ce82	95 27		sta $27,x			sta DStack+3,x
.ce84	94 29		sty $29,x			sty DStack+5,x
.ce86	b4 24		ldy $24,x			ldy DStack+0,x	; do LSB
.ce88	b5 26		lda $26,x			lda DStack+2,x
.ce8a	95 24		sta $24,x			sta DStack+0,x
.ce8c	b5 28		lda $28,x			lda DStack+4,x
.ce8e	95 26		sta $26,x			sta DStack+2,x
.ce90	94 28		sty $28,x			sty DStack+4,x
=28					CodeLen	.var *-XtPtr1
=$ce92					Here1 = *	; remember here
>ce74	1c					.byte CodeLen	;patch wh_CodeLength
.ce92	60		rts				rts
>ce93	40				Name0:	.text "@"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52756					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce94	01					.byte (("@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>ce95	10					.byte WordFlags	;wh_Flags
>ce96	03					.byte 3	;wh_CodeLength
>ce97	22					  .byte LinkDisplacement	; offset to previous nt
=$ce98					XtPtr1 ::= *
=52756					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce98					Fetch:
.ce98	e0 27		cpx #$27		cpx #-2*1+DStack0+1	; far enough below end of data stack (& not negative)?
.ce9a	b0 ab		bcs $ce47		bcs Throw_Stack_03
.ce9c	a1 24		lda ($24,x)			lda (DStack+0,x)		; LSB
.ce9e	a8		tay				tay
.ce9f	f6 24		inc $24,x			inc DStack+0,x
.cea1	d0 02		bne $cea5			bne +
.cea3	f6 25		inc $25,x			inc DStack+1,x
.cea5					+
.cea5	a1 24		lda ($24,x)			lda (DStack+0,x)		; MSB
.cea7	95 25		sta $25,x			sta DStack+1,x
.cea9	94 24		sty $24,x			sty DStack+0,x
=19					CodeLen	.var *-XtPtr1
=$ceab					Here1 = *	; remember here
>ce96	13					.byte CodeLen	;patch wh_CodeLength
.ceab	60		rts				rts
>ceac	21				Name0:	.text "!"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52781					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cead	21					.byte (("!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>ceae	10					.byte WordFlags	;wh_Flags
>ceaf	03					.byte 3	;wh_CodeLength
>ceb0	19					  .byte LinkDisplacement	; offset to previous nt
=$ceb1					XtPtr1 ::= *
=52781					WordListLink ::= Nt0 ; remember the nt of this word for later
.ceb1					Store:
.ceb1	e0 25		cpx #$25		cpx #-2*2+DStack0+1	; far enough below end of data stack (& not negative)?
.ceb3	b0 92		bcs $ce47		bcs Throw_Stack_03
.ceb5	b5 26		lda $26,x			lda DStack+2,x	; LSB
.ceb7	81 24		sta ($24,x)			sta (DStack+0,x)
.ceb9	f6 24		inc $24,x			inc DStack+0,x
.cebb	d0 02		bne $cebf			bne +
.cebd	f6 25		inc $25,x			inc DStack+1,x
.cebf					+
.cebf	b5 27		lda $27,x			lda DStack+3,x	; MSB
.cec1	81 24		sta ($24,x)			sta (DStack+0,x)
.cec3	e8		inx				inx		; 2Drop
.cec4	e8		inx				inx
.cec5	e8		inx				inx
.cec6	e8		inx				inx
=22					CodeLen	.var *-XtPtr1
=$cec7					Here1 = *	; remember here
>ceaf	16					.byte CodeLen	;patch wh_CodeLength
.cec7	60		rts				rts
>cec8	30 21				Name0:	.text "0!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52810					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ceca	22					.byte (("0!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>cecb	00					.byte WordFlags	;wh_Flags
>cecc	03					.byte 3	;wh_CodeLength
>cecd	1d					  .byte LinkDisplacement	; offset to previous nt
=$cece					XtPtr1 ::= *
=52810					WordListLink ::= Nt0 ; remember the nt of this word for later
.cece	20 ff b3	jsr $b3ff	ZStore:		jsr PopTmp1	; pop addr, check underflow
.ced1	a9 00		lda #$00			lda #0
.ced3	a8		tay				tay		; clear LSB
.ced4	91 14		sta ($14),y			sta (tmp1),y
.ced6	c8		iny				iny		; clear MSB
.ced7	91 14		sta ($14),y			sta (tmp1),y
=11					CodeLen	.var *-XtPtr1
=$ced9					Here1 = *	; remember here
>cecc	0b					.byte CodeLen	;patch wh_CodeLength
.ced9	60		rts				rts
>ceda	3e 52				Name0:	.text ">R"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52828					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cedc	42					.byte ((">R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=52					WordFlags ::= CO+ST	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cedd	34					.byte WordFlags	;wh_Flags
>cede	03					.byte 3	;wh_CodeLength
>cedf	12					  .byte LinkDisplacement	; offset to previous nt
=$cee0					XtPtr1 ::= *
=52828					WordListLink ::= Nt0 ; remember the nt of this word for later
.cee0					To_R:
.cee0	68		pla				pla		; move the RTS address out of the way
.cee1	85 1c		sta $1c				sta tmp5+0
.cee3	68		pla				pla
.cee4	85 1d		sta $1d				sta tmp5+1
.cee6	20 1d b4	jsr $b41d			jsr underflow_1
.cee9	b5 25		lda $25,x			lda DStack+1,x	; MSB
.ceeb	48		pha				pha
.ceec	b5 24		lda $24,x			lda DStack+0,x	; LSB
.ceee	48		pha				pha
.ceef	e8		inx				inx
.cef0	e8		inx				inx
.cef1	a5 1d		lda $1d				lda tmp5+1	; move the RTS address back in
.cef3	48		pha				pha
.cef4	a5 1c		lda $1c				lda tmp5+0
.cef6	48		pha				pha
=23					CodeLen	.var *-XtPtr1
=$cef7					Here1 = *	; remember here
>cede	17					.byte CodeLen	;patch wh_CodeLength
.cef7	60		rts				rts
>cef8	52 3e				Name0:	.text "R>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52858					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cefa	c2					.byte (("R>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=52					WordFlags ::= CO+ST	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>cefb	34					.byte WordFlags	;wh_Flags
>cefc	03					.byte 3	;wh_CodeLength
>cefd	1e					  .byte LinkDisplacement	; offset to previous nt
=$cefe					XtPtr1 ::= *
=52858					WordListLink ::= Nt0 ; remember the nt of this word for later
.cefe					R_From:
.cefe	68		pla				pla		; Move the RTS addr out of the way
.ceff	85 1c		sta $1c				sta tmp5+0
.cf01	68		pla				pla
.cf02	85 1d		sta $1d				sta tmp5+1
.cf04	ca		dex				dex
.cf05	ca		dex				dex
.cf06	68		pla				pla		; LSB
.cf07	95 24		sta $24,x			sta DStack+0,x
.cf09	68		pla				pla		; MSB
.cf0a	95 25		sta $25,x			sta DStack+1,x
.cf0c	a5 1d		lda $1d				lda tmp5+1	; Restore the RTS addr
.cf0e	48		pha				pha
.cf0f	a5 1c		lda $1c				lda tmp5+0
.cf11	48		pha				pha
=20					CodeLen	.var *-XtPtr1
=$cf12					Here1 = *	; remember here
>cefc	14					.byte CodeLen	;patch wh_CodeLength
.cf12	60		rts				rts
>cf13	52 40				Name0:	.text "R@"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52885					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf15	02					.byte (("R@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=20					WordFlags ::= NN+CO	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>cf16	14					.byte WordFlags	;wh_Flags
>cf17	03					.byte 3	;wh_CodeLength
>cf18	1b					  .byte LinkDisplacement	; offset to previous nt
=$cf19					XtPtr1 ::= *
=52885					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf19					R_Fetch:
.cf19	86 14		stx $14				stx tmp1	; save data stack index
.cf1b	ba		tsx				tsx		; X= return stack index
.cf1c	bd 03 01	lda $0103,x			lda RStack+3,x
.cf1f	bc 04 01	ldy $0104,x			ldy RStack+4,x
.cf22	a6 14		ldx $14				ldx tmp1	; restore data stack index
.cf24	4c b3 b7	jmp $b7b3			jmp PushYA
=14					CodeLen	.var *-XtPtr1
=$cf27					Here1 = *	; remember here
>cf17	0e					.byte CodeLen	;patch wh_CodeLength
>cf27	4f 76 65 72			Name0:	.text "Over"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52907					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf2b	44					.byte (("Over"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cf2c	40					.byte WordFlags	;wh_Flags
>cf2d	03					.byte 3	;wh_CodeLength
>cf2e	16					  .byte LinkDisplacement	; offset to previous nt
=$cf2f					XtPtr1 ::= *
=52907					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf2f					Over:
.cf2f	20 31 b4	jsr $b431			jsr underflow_2
.cf32	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cf34	b4 27		ldy $27,x			ldy DStack+3,x	; MSB
.cf36	ca		dex				dex		; PushYA
.cf37	ca		dex				dex
.cf38	95 24		sta $24,x			sta DStack+0,x
.cf3a	94 25		sty $25,x			sty DStack+1,x
=13					CodeLen	.var *-XtPtr1
=$cf3c					Here1 = *	; remember here
>cf2d	0d					.byte CodeLen	;patch wh_CodeLength
.cf3c	60		rts				rts
>cf3d	3f 44 75 70			Name0:	.text "?Dup"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52929					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf41	04					.byte (("?Dup"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cf42	50					.byte WordFlags	;wh_Flags
>cf43	03					.byte 3	;wh_CodeLength
>cf44	16					  .byte LinkDisplacement	; offset to previous nt
=$cf45					XtPtr1 ::= *
=52929					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf45					Question_Dup:
.cf45	20 1d b4	jsr $b41d			jsr underflow_1
.cf48	b5 24		lda $24,x			lda DStack+0,x	; Check if TOS is zero
.cf4a	15 25		ora $25,x			ora DStack+1,x
.cf4c	d0 0b		bne $cf59			bne Dup_NoUf
=9					CodeLen	.var *-XtPtr1
=$cf4e					Here1 = *	; remember here
>cf43	09					.byte CodeLen	;patch wh_CodeLength
.cf4e	60		rts				rts
>cf4f	44 75 70			Name0:	.text "Dup"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52946					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf52	03					.byte (("Dup"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>cf53	40					.byte WordFlags	;wh_Flags
>cf54	03					.byte 3	;wh_CodeLength
>cf55	11					  .byte LinkDisplacement	; offset to previous nt
=$cf56					XtPtr1 ::= *
=52946					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf56					Dup:
.cf56	20 1d b4	jsr $b41d			jsr underflow_1
.cf59	b5 24		lda $24,x	Dup_NoUf:	lda DStack+0,x	; LSB
.cf5b	b4 25		ldy $25,x			ldy DStack+1,x	; MSB
.cf5d	ca		dex				dex
.cf5e	ca		dex				dex
.cf5f	95 24		sta $24,x			sta DStack+0,x
.cf61	94 25		sty $25,x			sty DStack+1,x
=13					CodeLen	.var *-XtPtr1
=$cf63					Here1 = *	; remember here
>cf54	0d					.byte CodeLen	;patch wh_CodeLength
.cf63	60		rts				rts
.cf64					PushAY:
.cf64	ca		dex				dex
.cf65	ca		dex				dex
.cf66	94 24		sty $24,x			sty DStack+0,x
.cf68	95 25		sta $25,x			sta DStack+1,x
.cf6a	60		rts				rts
>cf6b	53 77 61 70			Name0:	.text "Swap"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52975					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf6f	04					.byte (("Swap"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>cf70	40					.byte WordFlags	;wh_Flags
>cf71	03					.byte 3	;wh_CodeLength
>cf72	1d					  .byte LinkDisplacement	; offset to previous nt
=$cf73					XtPtr1 ::= *
=52975					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf73					Swap:
.cf73	20 31 b4	jsr $b431			jsr underflow_2
.cf76	b5 24		lda $24,x			lda DStack+0,x	; do LSB
.cf78	b4 26		ldy $26,x			ldy DStack+2,x
.cf7a	95 26		sta $26,x			sta DStack+2,x
.cf7c	94 24		sty $24,x			sty DStack+0,x
.cf7e	b5 25		lda $25,x			lda DStack+1,x	; do MSB
.cf80	b4 27		ldy $27,x			ldy DStack+3,x
.cf82	95 27		sta $27,x			sta DStack+3,x
.cf84	94 25		sty $25,x			sty DStack+1,x
=19					CodeLen	.var *-XtPtr1
=$cf86					Here1 = *	; remember here
>cf71	13					.byte CodeLen	;patch wh_CodeLength
.cf86	60		rts				rts
>cf87	44 72 6f 70			Name0:	.text "Drop"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=53003					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf8b	04					.byte (("Drop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>cf8c	40					.byte WordFlags	;wh_Flags
>cf8d	03					.byte 3	;wh_CodeLength
>cf8e	1c					  .byte LinkDisplacement	; offset to previous nt
=$cf8f					XtPtr1 ::= *
=53003					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf8f					Drop:
.cf8f	20 1d b4	jsr $b41d			jsr underflow_1
.cf92	e8		inx				inx
.cf93	e8		inx				inx
=5					CodeLen	.var *-XtPtr1
=$cf94					Here1 = *	; remember here
>cf8d	05					.byte CodeLen	;patch wh_CodeLength
.cf94	60		rts				rts
=53003					forth_dictionary_start = WordListLink ; END of FORTH-WORDLIST
=0					WordListLink .var 0
>cf95	57 6f 72 64 73			Name0:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53018					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf9a	65					.byte (("Words"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=53018					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>cf9b	11					.byte WordFlags	;wh_Flags
>cf9c	03					.byte 3	;wh_CodeLength
>cf9d	00 00					  .word WordListLink
=$cf9f					XtPtr1 ::= *
=53018					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf9f	4c bc aa	jmp $aabc			jmp Words
=3					CodeLen	.var *-XtPtr1
=$cfa2					Here1 = *	; remember here
>cf9c	03					.byte CodeLen	;patch wh_CodeLength
>cfa2	46 6f 72 74 68 2d 57 6f		Name0:	.text "Forth-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>cfaa	72 64 6c 69 73 74
=14					NameLength = *-Name0
=53040					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfb0	8e					.byte (("Forth-Wordlist"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cfb1	10					.byte WordFlags	;wh_Flags
>cfb2	03					.byte 3	;wh_CodeLength
>cfb3	16					  .byte LinkDisplacement	; offset to previous nt
=$cfb4					XtPtr1 ::= *
=53040					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfb4	4c 01 a0	jmp $a001			jmp Forth_WordList
=3					CodeLen	.var *-XtPtr1
=$cfb7					Here1 = *	; remember here
>cfb2	03					.byte CodeLen	;patch wh_CodeLength
>cfb7	46 6f 72 74 68			Name0:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53052					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfbc	05					.byte (("Forth"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cfbd	10					.byte WordFlags	;wh_Flags
>cfbe	03					.byte 3	;wh_CodeLength
>cfbf	0c					  .byte LinkDisplacement	; offset to previous nt
=$cfc0					XtPtr1 ::= *
=53052					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfc0	4c ff a0	jmp $a0ff			jmp Forth
=3					CodeLen	.var *-XtPtr1
=$cfc3					Here1 = *	; remember here
>cfbe	03					.byte CodeLen	;patch wh_CodeLength
>cfc3	53 65 74 2d 4f 72 64 65		Name0:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>cfcb	72
=9					NameLength = *-Name0
=53068					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfcc	49					.byte (("Set-Order"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>cfcd	10					.byte WordFlags	;wh_Flags
>cfce	03					.byte 3	;wh_CodeLength
>cfcf	10					  .byte LinkDisplacement	; offset to previous nt
=$cfd0					XtPtr1 ::= *
=53068					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfd0	4c 71 a1	jmp $a171			jmp Set_Order
=3					CodeLen	.var *-XtPtr1
=$cfd3					Here1 = *	; remember here
>cfce	03					.byte CodeLen	;patch wh_CodeLength
=53068					root_dictionary_start = WordListLink ; END of ROOT-WORDLIST
=0					WordListLink .var 0
.cfd3					asm_r:
.cfd3	68		pla			pla		; pop RTS addr
.cfd4	a8		tay			tay
.cfd5	68		pla			pla
.cfd6	20 11 d0	jsr $d011		jsr asm_op	; compile opcode
.cfd9	b5 25		lda $25,x		lda DStack+1,x	; check range
.cfdb	f0 09		beq $cfe6		beq _plus
.cfdd	c9 ff		cmp #$ff		cmp #$ff
.cfdf	f0 0b		beq $cfec		beq _minus
.cfe1	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cfe3	4c 79 b4	jmp $b479		jmp ThrowA
.cfe6	b5 24		lda $24,x	_plus:	lda DStack+0,x
.cfe8	30 f7		bmi $cfe1		bmi _err
.cfea	10 04		bpl $cff0		bpl _store
.cfec	b5 24		lda $24,x	_minus:	lda DStack+0,x
.cfee	10 f1		bpl $cfe1		bpl _err
.cff0	4c e4 cc	jmp $cce4	_store:	jmp C_Comma
.cff3					asm_1:
.cff3	68		pla			pla		; pop RTS addr
.cff4	a8		tay			tay
.cff5	68		pla			pla
.cff6	20 11 d0	jsr $d011		jsr asm_op	; compile opcode
.cff9	b5 25		lda $25,x		lda DStack+1,x	; compile operand
.cffb	f0 00		beq $cffd		beq _store	;   unsigned byte?
.cffd	4c e4 cc	jmp $cce4	_store:	jmp C_Comma
.d000	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.d002	4c 79 b4	jmp $b479		jmp ThrowA
.d005					asm_2:
.d005	68		pla			pla		; pop RTS addr
.d006	a8		tay			tay
.d007	68		pla			pla
.d008	20 11 d0	jsr $d011		jsr asm_op	; compile opcode
.d00b	4c fb cc	jmp $ccfb		jmp Comma	; compile operand
.d00e					asm_0:
.d00e	68		pla			pla		; pop RTS addr
.d00f	a8		tay			tay
.d010	68		pla			pla
.d011	84 14		sty $14		asm_op:	sty tmp1+0	; save RTS addr
.d013	85 15		sta $15			sta tmp1+1
.d015	a0 01		ldy #$01		ldy #1		; get opcode byte
.d017	b1 14		lda ($14),y		lda (tmp1),y
.d019	4c e7 cc	jmp $cce7		jmp C_Comma_A	; compile opcode
>d01c	61 64 63 2e 23			Name0:	.text "adc.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53153					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d021	65					.byte (("adc.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=53153					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>d022	11					.byte WordFlags	;wh_Flags
>d023	03					.byte 3	;wh_CodeLength
>d024	00 00					  .word WordListLink
=$d026					XtPtr1 ::= *
=53153					WordListLink ::= Nt0 ; remember the nt of this word for later
.d026	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d029					Here1 = *	; remember here
>d023	03					.byte CodeLen	;patch wh_CodeLength
>d029	69					.byte $69
>d02a	61 64 63 2e 78			Name0:	.text "adc.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53167					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d02f	05					.byte (("adc.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d030	10					.byte WordFlags	;wh_Flags
>d031	03					.byte 3	;wh_CodeLength
>d032	0e					  .byte LinkDisplacement	; offset to previous nt
=$d033					XtPtr1 ::= *
=53167					WordListLink ::= Nt0 ; remember the nt of this word for later
.d033	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d036					Here1 = *	; remember here
>d031	03					.byte CodeLen	;patch wh_CodeLength
>d036	7d					.byte $7d
>d037	61 64 63 2e 79			Name0:	.text "adc.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53180					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d03c	25					.byte (("adc.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d03d	10					.byte WordFlags	;wh_Flags
>d03e	03					.byte 3	;wh_CodeLength
>d03f	0d					  .byte LinkDisplacement	; offset to previous nt
=$d040					XtPtr1 ::= *
=53180					WordListLink ::= Nt0 ; remember the nt of this word for later
.d040	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d043					Here1 = *	; remember here
>d03e	03					.byte CodeLen	;patch wh_CodeLength
>d043	79					.byte $79
>d044	61 64 63 2e 7a			Name0:	.text "adc.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53193					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d049	45					.byte (("adc.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d04a	10					.byte WordFlags	;wh_Flags
>d04b	03					.byte 3	;wh_CodeLength
>d04c	0d					  .byte LinkDisplacement	; offset to previous nt
=$d04d					XtPtr1 ::= *
=53193					WordListLink ::= Nt0 ; remember the nt of this word for later
.d04d	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d050					Here1 = *	; remember here
>d04b	03					.byte CodeLen	;patch wh_CodeLength
>d050	65					.byte $65
>d051	61 64 63 2e 7a 69 79		Name0:	.text "adc.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53208					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d058	27					.byte (("adc.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d059	10					.byte WordFlags	;wh_Flags
>d05a	03					.byte 3	;wh_CodeLength
>d05b	0f					  .byte LinkDisplacement	; offset to previous nt
=$d05c					XtPtr1 ::= *
=53208					WordListLink ::= Nt0 ; remember the nt of this word for later
.d05c	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d05f					Here1 = *	; remember here
>d05a	03					.byte CodeLen	;patch wh_CodeLength
>d05f	71					.byte $71
>d060	61 64 63 2e 7a 78		Name0:	.text "adc.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53222					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d066	06					.byte (("adc.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d067	10					.byte WordFlags	;wh_Flags
>d068	03					.byte 3	;wh_CodeLength
>d069	0e					  .byte LinkDisplacement	; offset to previous nt
=$d06a					XtPtr1 ::= *
=53222					WordListLink ::= Nt0 ; remember the nt of this word for later
.d06a	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d06d					Here1 = *	; remember here
>d068	03					.byte CodeLen	;patch wh_CodeLength
>d06d	75					.byte $75
>d06e	61 64 63 2e 7a 78 69		Name0:	.text "adc.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53237					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d075	27					.byte (("adc.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d076	10					.byte WordFlags	;wh_Flags
>d077	03					.byte 3	;wh_CodeLength
>d078	0f					  .byte LinkDisplacement	; offset to previous nt
=$d079					XtPtr1 ::= *
=53237					WordListLink ::= Nt0 ; remember the nt of this word for later
.d079	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d07c					Here1 = *	; remember here
>d077	03					.byte CodeLen	;patch wh_CodeLength
>d07c	61					.byte $61
>d07d	61 6e 64 2e			Name0:	.text "and."	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=53249					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d081	c4					.byte (("and."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>d082	10					.byte WordFlags	;wh_Flags
>d083	03					.byte 3	;wh_CodeLength
>d084	0c					  .byte LinkDisplacement	; offset to previous nt
=$d085					XtPtr1 ::= *
=53249					WordListLink ::= Nt0 ; remember the nt of this word for later
.d085	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d088					Here1 = *	; remember here
>d083	03					.byte CodeLen	;patch wh_CodeLength
>d088	2d					.byte $2d
>d089	61 6e 64 2e 23			Name0:	.text "and.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53262					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d08e	65					.byte (("and.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d08f	10					.byte WordFlags	;wh_Flags
>d090	03					.byte 3	;wh_CodeLength
>d091	0d					  .byte LinkDisplacement	; offset to previous nt
=$d092					XtPtr1 ::= *
=53262					WordListLink ::= Nt0 ; remember the nt of this word for later
.d092	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d095					Here1 = *	; remember here
>d090	03					.byte CodeLen	;patch wh_CodeLength
>d095	29					.byte $29
>d096	61 6e 64 2e 78			Name0:	.text "and.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53275					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d09b	05					.byte (("and.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d09c	10					.byte WordFlags	;wh_Flags
>d09d	03					.byte 3	;wh_CodeLength
>d09e	0d					  .byte LinkDisplacement	; offset to previous nt
=$d09f					XtPtr1 ::= *
=53275					WordListLink ::= Nt0 ; remember the nt of this word for later
.d09f	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d0a2					Here1 = *	; remember here
>d09d	03					.byte CodeLen	;patch wh_CodeLength
>d0a2	3d					.byte $3d
>d0a3	61 6e 64 2e 79			Name0:	.text "and.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53288					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0a8	25					.byte (("and.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0a9	10					.byte WordFlags	;wh_Flags
>d0aa	03					.byte 3	;wh_CodeLength
>d0ab	0d					  .byte LinkDisplacement	; offset to previous nt
=$d0ac					XtPtr1 ::= *
=53288					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0ac	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d0af					Here1 = *	; remember here
>d0aa	03					.byte CodeLen	;patch wh_CodeLength
>d0af	39					.byte $39
>d0b0	61 6e 64 2e 7a			Name0:	.text "and.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53301					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0b5	45					.byte (("and.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0b6	10					.byte WordFlags	;wh_Flags
>d0b7	03					.byte 3	;wh_CodeLength
>d0b8	0d					  .byte LinkDisplacement	; offset to previous nt
=$d0b9					XtPtr1 ::= *
=53301					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0b9	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d0bc					Here1 = *	; remember here
>d0b7	03					.byte CodeLen	;patch wh_CodeLength
>d0bc	25					.byte $25
>d0bd	61 6e 64 2e 7a 69 79		Name0:	.text "and.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53316					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0c4	27					.byte (("and.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d0c5	10					.byte WordFlags	;wh_Flags
>d0c6	03					.byte 3	;wh_CodeLength
>d0c7	0f					  .byte LinkDisplacement	; offset to previous nt
=$d0c8					XtPtr1 ::= *
=53316					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0c8	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d0cb					Here1 = *	; remember here
>d0c6	03					.byte CodeLen	;patch wh_CodeLength
>d0cb	31					.byte $31
>d0cc	61 6e 64 2e 7a 78		Name0:	.text "and.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53330					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0d2	06					.byte (("and.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d0d3	10					.byte WordFlags	;wh_Flags
>d0d4	03					.byte 3	;wh_CodeLength
>d0d5	0e					  .byte LinkDisplacement	; offset to previous nt
=$d0d6					XtPtr1 ::= *
=53330					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0d6	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d0d9					Here1 = *	; remember here
>d0d4	03					.byte CodeLen	;patch wh_CodeLength
>d0d9	35					.byte $35
>d0da	61 6e 64 2e 7a 78 69		Name0:	.text "and.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53345					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0e1	27					.byte (("and.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d0e2	10					.byte WordFlags	;wh_Flags
>d0e3	03					.byte 3	;wh_CodeLength
>d0e4	0f					  .byte LinkDisplacement	; offset to previous nt
=$d0e5					XtPtr1 ::= *
=53345					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0e5	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d0e8					Here1 = *	; remember here
>d0e3	03					.byte CodeLen	;patch wh_CodeLength
>d0e8	21					.byte $21
>d0e9	61 73 6c			Name0:	.text "asl"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53356					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0ec	83					.byte (("asl"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d0ed	10					.byte WordFlags	;wh_Flags
>d0ee	03					.byte 3	;wh_CodeLength
>d0ef	0b					  .byte LinkDisplacement	; offset to previous nt
=$d0f0					XtPtr1 ::= *
=53356					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0f0	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d0f3					Here1 = *	; remember here
>d0ee	03					.byte CodeLen	;patch wh_CodeLength
>d0f3	0e					.byte $0e
>d0f4	61 73 6c 2e 61			Name0:	.text "asl.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53369					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0f9	25					.byte (("asl.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0fa	10					.byte WordFlags	;wh_Flags
>d0fb	03					.byte 3	;wh_CodeLength
>d0fc	0d					  .byte LinkDisplacement	; offset to previous nt
=$d0fd					XtPtr1 ::= *
=53369					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0fd	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d100					Here1 = *	; remember here
>d0fb	03					.byte CodeLen	;patch wh_CodeLength
>d100	0a					.byte $0a
>d101	61 73 6c 2e 78			Name0:	.text "asl.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53382					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d106	05					.byte (("asl.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d107	10					.byte WordFlags	;wh_Flags
>d108	03					.byte 3	;wh_CodeLength
>d109	0d					  .byte LinkDisplacement	; offset to previous nt
=$d10a					XtPtr1 ::= *
=53382					WordListLink ::= Nt0 ; remember the nt of this word for later
.d10a	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d10d					Here1 = *	; remember here
>d108	03					.byte CodeLen	;patch wh_CodeLength
>d10d	1e					.byte $1e
>d10e	61 73 6c 2e 7a			Name0:	.text "asl.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53395					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d113	45					.byte (("asl.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d114	10					.byte WordFlags	;wh_Flags
>d115	03					.byte 3	;wh_CodeLength
>d116	0d					  .byte LinkDisplacement	; offset to previous nt
=$d117					XtPtr1 ::= *
=53395					WordListLink ::= Nt0 ; remember the nt of this word for later
.d117	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d11a					Here1 = *	; remember here
>d115	03					.byte CodeLen	;patch wh_CodeLength
>d11a	06					.byte $06
>d11b	61 73 6c 2e 7a 78		Name0:	.text "asl.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53409					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d121	06					.byte (("asl.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d122	10					.byte WordFlags	;wh_Flags
>d123	03					.byte 3	;wh_CodeLength
>d124	0e					  .byte LinkDisplacement	; offset to previous nt
=$d125					XtPtr1 ::= *
=53409					WordListLink ::= Nt0 ; remember the nt of this word for later
.d125	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d128					Here1 = *	; remember here
>d123	03					.byte CodeLen	;patch wh_CodeLength
>d128	16					.byte $16
>d129	62 63 63			Name0:	.text "bcc"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53420					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d12c	63					.byte (("bcc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d12d	10					.byte WordFlags	;wh_Flags
>d12e	03					.byte 3	;wh_CodeLength
>d12f	0b					  .byte LinkDisplacement	; offset to previous nt
=$d130					XtPtr1 ::= *
=53420					WordListLink ::= Nt0 ; remember the nt of this word for later
.d130	20 d3 cf	jsr $cfd3		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d133					Here1 = *	; remember here
>d12e	03					.byte CodeLen	;patch wh_CodeLength
>d133	90					.byte $90
>d134	62 63 73			Name0:	.text "bcs"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53431					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d137	63					.byte (("bcs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d138	10					.byte WordFlags	;wh_Flags
>d139	03					.byte 3	;wh_CodeLength
>d13a	0b					  .byte LinkDisplacement	; offset to previous nt
=$d13b					XtPtr1 ::= *
=53431					WordListLink ::= Nt0 ; remember the nt of this word for later
.d13b	20 d3 cf	jsr $cfd3		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d13e					Here1 = *	; remember here
>d139	03					.byte CodeLen	;patch wh_CodeLength
>d13e	b0					.byte $b0
>d13f	62 65 71			Name0:	.text "beq"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53442					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d142	23					.byte (("beq"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d143	10					.byte WordFlags	;wh_Flags
>d144	03					.byte 3	;wh_CodeLength
>d145	0b					  .byte LinkDisplacement	; offset to previous nt
=$d146					XtPtr1 ::= *
=53442					WordListLink ::= Nt0 ; remember the nt of this word for later
.d146	20 d3 cf	jsr $cfd3		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d149					Here1 = *	; remember here
>d144	03					.byte CodeLen	;patch wh_CodeLength
>d149	f0					.byte $f0
>d14a	62 69 74			Name0:	.text "bit"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53453					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d14d	83					.byte (("bit"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d14e	10					.byte WordFlags	;wh_Flags
>d14f	03					.byte 3	;wh_CodeLength
>d150	0b					  .byte LinkDisplacement	; offset to previous nt
=$d151					XtPtr1 ::= *
=53453					WordListLink ::= Nt0 ; remember the nt of this word for later
.d151	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d154					Here1 = *	; remember here
>d14f	03					.byte CodeLen	;patch wh_CodeLength
>d154	2c					.byte $2c
>d155	62 69 74 2e 7a			Name0:	.text "bit.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53466					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d15a	45					.byte (("bit.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d15b	10					.byte WordFlags	;wh_Flags
>d15c	03					.byte 3	;wh_CodeLength
>d15d	0d					  .byte LinkDisplacement	; offset to previous nt
=$d15e					XtPtr1 ::= *
=53466					WordListLink ::= Nt0 ; remember the nt of this word for later
.d15e	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d161					Here1 = *	; remember here
>d15c	03					.byte CodeLen	;patch wh_CodeLength
>d161	24					.byte $24
>d162	62 6d 69			Name0:	.text "bmi"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53477					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d165	23					.byte (("bmi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d166	10					.byte WordFlags	;wh_Flags
>d167	03					.byte 3	;wh_CodeLength
>d168	0b					  .byte LinkDisplacement	; offset to previous nt
=$d169					XtPtr1 ::= *
=53477					WordListLink ::= Nt0 ; remember the nt of this word for later
.d169	20 d3 cf	jsr $cfd3		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d16c					Here1 = *	; remember here
>d167	03					.byte CodeLen	;patch wh_CodeLength
>d16c	30					.byte $30
>d16d	62 6e 65			Name0:	.text "bne"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53488					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d170	a3					.byte (("bne"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d171	10					.byte WordFlags	;wh_Flags
>d172	03					.byte 3	;wh_CodeLength
>d173	0b					  .byte LinkDisplacement	; offset to previous nt
=$d174					XtPtr1 ::= *
=53488					WordListLink ::= Nt0 ; remember the nt of this word for later
.d174	20 d3 cf	jsr $cfd3		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d177					Here1 = *	; remember here
>d172	03					.byte CodeLen	;patch wh_CodeLength
>d177	d0					.byte $d0
>d178	62 70 6c			Name0:	.text "bpl"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53499					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d17b	83					.byte (("bpl"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d17c	10					.byte WordFlags	;wh_Flags
>d17d	03					.byte 3	;wh_CodeLength
>d17e	0b					  .byte LinkDisplacement	; offset to previous nt
=$d17f					XtPtr1 ::= *
=53499					WordListLink ::= Nt0 ; remember the nt of this word for later
.d17f	20 d3 cf	jsr $cfd3		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d182					Here1 = *	; remember here
>d17d	03					.byte CodeLen	;patch wh_CodeLength
>d182	10					.byte $10
>d183	62 72 6b			Name0:	.text "brk"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53510					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d186	63					.byte (("brk"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d187	10					.byte WordFlags	;wh_Flags
>d188	03					.byte 3	;wh_CodeLength
>d189	0b					  .byte LinkDisplacement	; offset to previous nt
=$d18a					XtPtr1 ::= *
=53510					WordListLink ::= Nt0 ; remember the nt of this word for later
.d18a	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d18d					Here1 = *	; remember here
>d188	03					.byte CodeLen	;patch wh_CodeLength
>d18d	00					.byte $00
>d18e	62 76 63			Name0:	.text "bvc"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53521					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d191	63					.byte (("bvc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d192	10					.byte WordFlags	;wh_Flags
>d193	03					.byte 3	;wh_CodeLength
>d194	0b					  .byte LinkDisplacement	; offset to previous nt
=$d195					XtPtr1 ::= *
=53521					WordListLink ::= Nt0 ; remember the nt of this word for later
.d195	20 d3 cf	jsr $cfd3		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d198					Here1 = *	; remember here
>d193	03					.byte CodeLen	;patch wh_CodeLength
>d198	50					.byte $50
>d199	62 76 73			Name0:	.text "bvs"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53532					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d19c	63					.byte (("bvs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d19d	10					.byte WordFlags	;wh_Flags
>d19e	03					.byte 3	;wh_CodeLength
>d19f	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1a0					XtPtr1 ::= *
=53532					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1a0	20 d3 cf	jsr $cfd3		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d1a3					Here1 = *	; remember here
>d19e	03					.byte CodeLen	;patch wh_CodeLength
>d1a3	70					.byte $70
>d1a4	63 6c 63			Name0:	.text "clc"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53543					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1a7	63					.byte (("clc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1a8	10					.byte WordFlags	;wh_Flags
>d1a9	03					.byte 3	;wh_CodeLength
>d1aa	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1ab					XtPtr1 ::= *
=53543					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1ab	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d1ae					Here1 = *	; remember here
>d1a9	03					.byte CodeLen	;patch wh_CodeLength
>d1ae	18					.byte $18
>d1af	63 6c 64			Name0:	.text "cld"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53554					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1b2	83					.byte (("cld"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1b3	10					.byte WordFlags	;wh_Flags
>d1b4	03					.byte 3	;wh_CodeLength
>d1b5	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1b6					XtPtr1 ::= *
=53554					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1b6	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d1b9					Here1 = *	; remember here
>d1b4	03					.byte CodeLen	;patch wh_CodeLength
>d1b9	d8					.byte $d8
>d1ba	63 6c 69			Name0:	.text "cli"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53565					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1bd	23					.byte (("cli"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1be	10					.byte WordFlags	;wh_Flags
>d1bf	03					.byte 3	;wh_CodeLength
>d1c0	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1c1					XtPtr1 ::= *
=53565					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1c1	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d1c4					Here1 = *	; remember here
>d1bf	03					.byte CodeLen	;patch wh_CodeLength
>d1c4	58					.byte $58
>d1c5	63 6c 76			Name0:	.text "clv"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53576					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1c8	c3					.byte (("clv"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1c9	10					.byte WordFlags	;wh_Flags
>d1ca	03					.byte 3	;wh_CodeLength
>d1cb	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1cc					XtPtr1 ::= *
=53576					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1cc	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d1cf					Here1 = *	; remember here
>d1ca	03					.byte CodeLen	;patch wh_CodeLength
>d1cf	b8					.byte $b8
>d1d0	63 6d 70			Name0:	.text "cmp"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53587					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1d3	03					.byte (("cmp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1d4	10					.byte WordFlags	;wh_Flags
>d1d5	03					.byte 3	;wh_CodeLength
>d1d6	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1d7					XtPtr1 ::= *
=53587					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1d7	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d1da					Here1 = *	; remember here
>d1d5	03					.byte CodeLen	;patch wh_CodeLength
>d1da	cd					.byte $cd
>d1db	63 6d 70 2e 23			Name0:	.text "cmp.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53600					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1e0	65					.byte (("cmp.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d1e1	10					.byte WordFlags	;wh_Flags
>d1e2	03					.byte 3	;wh_CodeLength
>d1e3	0d					  .byte LinkDisplacement	; offset to previous nt
=$d1e4					XtPtr1 ::= *
=53600					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1e4	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d1e7					Here1 = *	; remember here
>d1e2	03					.byte CodeLen	;patch wh_CodeLength
>d1e7	c9					.byte $c9
>d1e8	63 6d 70 2e 78			Name0:	.text "cmp.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53613					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1ed	05					.byte (("cmp.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d1ee	10					.byte WordFlags	;wh_Flags
>d1ef	03					.byte 3	;wh_CodeLength
>d1f0	0d					  .byte LinkDisplacement	; offset to previous nt
=$d1f1					XtPtr1 ::= *
=53613					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1f1	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d1f4					Here1 = *	; remember here
>d1ef	03					.byte CodeLen	;patch wh_CodeLength
>d1f4	dd					.byte $dd
>d1f5	63 6d 70 2e 79			Name0:	.text "cmp.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53626					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1fa	25					.byte (("cmp.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d1fb	10					.byte WordFlags	;wh_Flags
>d1fc	03					.byte 3	;wh_CodeLength
>d1fd	0d					  .byte LinkDisplacement	; offset to previous nt
=$d1fe					XtPtr1 ::= *
=53626					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1fe	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d201					Here1 = *	; remember here
>d1fc	03					.byte CodeLen	;patch wh_CodeLength
>d201	d9					.byte $d9
>d202	63 6d 70 2e 7a			Name0:	.text "cmp.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53639					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d207	45					.byte (("cmp.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d208	10					.byte WordFlags	;wh_Flags
>d209	03					.byte 3	;wh_CodeLength
>d20a	0d					  .byte LinkDisplacement	; offset to previous nt
=$d20b					XtPtr1 ::= *
=53639					WordListLink ::= Nt0 ; remember the nt of this word for later
.d20b	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d20e					Here1 = *	; remember here
>d209	03					.byte CodeLen	;patch wh_CodeLength
>d20e	c5					.byte $c5
>d20f	63 6d 70 2e 7a 69 79		Name0:	.text "cmp.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53654					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d216	27					.byte (("cmp.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d217	10					.byte WordFlags	;wh_Flags
>d218	03					.byte 3	;wh_CodeLength
>d219	0f					  .byte LinkDisplacement	; offset to previous nt
=$d21a					XtPtr1 ::= *
=53654					WordListLink ::= Nt0 ; remember the nt of this word for later
.d21a	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d21d					Here1 = *	; remember here
>d218	03					.byte CodeLen	;patch wh_CodeLength
>d21d	d1					.byte $d1
>d21e	63 6d 70 2e 7a 78		Name0:	.text "cmp.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53668					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d224	06					.byte (("cmp.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d225	10					.byte WordFlags	;wh_Flags
>d226	03					.byte 3	;wh_CodeLength
>d227	0e					  .byte LinkDisplacement	; offset to previous nt
=$d228					XtPtr1 ::= *
=53668					WordListLink ::= Nt0 ; remember the nt of this word for later
.d228	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d22b					Here1 = *	; remember here
>d226	03					.byte CodeLen	;patch wh_CodeLength
>d22b	d5					.byte $d5
>d22c	63 6d 70 2e 7a 78 69		Name0:	.text "cmp.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53683					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d233	27					.byte (("cmp.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d234	10					.byte WordFlags	;wh_Flags
>d235	03					.byte 3	;wh_CodeLength
>d236	0f					  .byte LinkDisplacement	; offset to previous nt
=$d237					XtPtr1 ::= *
=53683					WordListLink ::= Nt0 ; remember the nt of this word for later
.d237	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d23a					Here1 = *	; remember here
>d235	03					.byte CodeLen	;patch wh_CodeLength
>d23a	c1					.byte $c1
>d23b	63 70 78			Name0:	.text "cpx"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53694					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d23e	03					.byte (("cpx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d23f	10					.byte WordFlags	;wh_Flags
>d240	03					.byte 3	;wh_CodeLength
>d241	0b					  .byte LinkDisplacement	; offset to previous nt
=$d242					XtPtr1 ::= *
=53694					WordListLink ::= Nt0 ; remember the nt of this word for later
.d242	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d245					Here1 = *	; remember here
>d240	03					.byte CodeLen	;patch wh_CodeLength
>d245	ec					.byte $ec
>d246	63 70 78 2e 23			Name0:	.text "cpx.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53707					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d24b	65					.byte (("cpx.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d24c	10					.byte WordFlags	;wh_Flags
>d24d	03					.byte 3	;wh_CodeLength
>d24e	0d					  .byte LinkDisplacement	; offset to previous nt
=$d24f					XtPtr1 ::= *
=53707					WordListLink ::= Nt0 ; remember the nt of this word for later
.d24f	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d252					Here1 = *	; remember here
>d24d	03					.byte CodeLen	;patch wh_CodeLength
>d252	e0					.byte $e0
>d253	63 70 78 2e 7a			Name0:	.text "cpx.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53720					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d258	45					.byte (("cpx.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d259	10					.byte WordFlags	;wh_Flags
>d25a	03					.byte 3	;wh_CodeLength
>d25b	0d					  .byte LinkDisplacement	; offset to previous nt
=$d25c					XtPtr1 ::= *
=53720					WordListLink ::= Nt0 ; remember the nt of this word for later
.d25c	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d25f					Here1 = *	; remember here
>d25a	03					.byte CodeLen	;patch wh_CodeLength
>d25f	e4					.byte $e4
>d260	63 70 79			Name0:	.text "cpy"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53731					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d263	23					.byte (("cpy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d264	10					.byte WordFlags	;wh_Flags
>d265	03					.byte 3	;wh_CodeLength
>d266	0b					  .byte LinkDisplacement	; offset to previous nt
=$d267					XtPtr1 ::= *
=53731					WordListLink ::= Nt0 ; remember the nt of this word for later
.d267	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d26a					Here1 = *	; remember here
>d265	03					.byte CodeLen	;patch wh_CodeLength
>d26a	cc					.byte $cc
>d26b	63 70 79 2e 23			Name0:	.text "cpy.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53744					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d270	65					.byte (("cpy.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d271	10					.byte WordFlags	;wh_Flags
>d272	03					.byte 3	;wh_CodeLength
>d273	0d					  .byte LinkDisplacement	; offset to previous nt
=$d274					XtPtr1 ::= *
=53744					WordListLink ::= Nt0 ; remember the nt of this word for later
.d274	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d277					Here1 = *	; remember here
>d272	03					.byte CodeLen	;patch wh_CodeLength
>d277	c0					.byte $c0
>d278	63 70 79 2e 7a			Name0:	.text "cpy.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53757					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d27d	45					.byte (("cpy.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d27e	10					.byte WordFlags	;wh_Flags
>d27f	03					.byte 3	;wh_CodeLength
>d280	0d					  .byte LinkDisplacement	; offset to previous nt
=$d281					XtPtr1 ::= *
=53757					WordListLink ::= Nt0 ; remember the nt of this word for later
.d281	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d284					Here1 = *	; remember here
>d27f	03					.byte CodeLen	;patch wh_CodeLength
>d284	c4					.byte $c4
>d285	64 65 63			Name0:	.text "dec"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53768					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d288	63					.byte (("dec"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d289	10					.byte WordFlags	;wh_Flags
>d28a	03					.byte 3	;wh_CodeLength
>d28b	0b					  .byte LinkDisplacement	; offset to previous nt
=$d28c					XtPtr1 ::= *
=53768					WordListLink ::= Nt0 ; remember the nt of this word for later
.d28c	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d28f					Here1 = *	; remember here
>d28a	03					.byte CodeLen	;patch wh_CodeLength
>d28f	ce					.byte $ce
>d290	64 65 63 2e 61			Name0:	.text "dec.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53781					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d295	25					.byte (("dec.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d296	10					.byte WordFlags	;wh_Flags
>d297	03					.byte 3	;wh_CodeLength
>d298	0d					  .byte LinkDisplacement	; offset to previous nt
=$d299					XtPtr1 ::= *
=53781					WordListLink ::= Nt0 ; remember the nt of this word for later
.d299	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d29c					Here1 = *	; remember here
>d297	03					.byte CodeLen	;patch wh_CodeLength
>d29c	3a					.byte $3a
>d29d	64 65 63 2e 78			Name0:	.text "dec.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53794					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2a2	05					.byte (("dec.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d2a3	10					.byte WordFlags	;wh_Flags
>d2a4	03					.byte 3	;wh_CodeLength
>d2a5	0d					  .byte LinkDisplacement	; offset to previous nt
=$d2a6					XtPtr1 ::= *
=53794					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2a6	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d2a9					Here1 = *	; remember here
>d2a4	03					.byte CodeLen	;patch wh_CodeLength
>d2a9	de					.byte $de
>d2aa	64 65 63 2e 7a			Name0:	.text "dec.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53807					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2af	45					.byte (("dec.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d2b0	10					.byte WordFlags	;wh_Flags
>d2b1	03					.byte 3	;wh_CodeLength
>d2b2	0d					  .byte LinkDisplacement	; offset to previous nt
=$d2b3					XtPtr1 ::= *
=53807					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2b3	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d2b6					Here1 = *	; remember here
>d2b1	03					.byte CodeLen	;patch wh_CodeLength
>d2b6	c6					.byte $c6
>d2b7	64 65 63 2e 7a 78		Name0:	.text "dec.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53821					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2bd	06					.byte (("dec.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d2be	10					.byte WordFlags	;wh_Flags
>d2bf	03					.byte 3	;wh_CodeLength
>d2c0	0e					  .byte LinkDisplacement	; offset to previous nt
=$d2c1					XtPtr1 ::= *
=53821					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2c1	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d2c4					Here1 = *	; remember here
>d2bf	03					.byte CodeLen	;patch wh_CodeLength
>d2c4	d6					.byte $d6
>d2c5	64 65 78			Name0:	.text "dex"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53832					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2c8	03					.byte (("dex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d2c9	10					.byte WordFlags	;wh_Flags
>d2ca	03					.byte 3	;wh_CodeLength
>d2cb	0b					  .byte LinkDisplacement	; offset to previous nt
=$d2cc					XtPtr1 ::= *
=53832					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2cc	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d2cf					Here1 = *	; remember here
>d2ca	03					.byte CodeLen	;patch wh_CodeLength
>d2cf	ca					.byte $ca
>d2d0	64 65 79			Name0:	.text "dey"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53843					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2d3	23					.byte (("dey"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d2d4	10					.byte WordFlags	;wh_Flags
>d2d5	03					.byte 3	;wh_CodeLength
>d2d6	0b					  .byte LinkDisplacement	; offset to previous nt
=$d2d7					XtPtr1 ::= *
=53843					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2d7	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d2da					Here1 = *	; remember here
>d2d5	03					.byte CodeLen	;patch wh_CodeLength
>d2da	88					.byte $88
>d2db	65 6f 72			Name0:	.text "eor"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53854					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2de	43					.byte (("eor"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d2df	10					.byte WordFlags	;wh_Flags
>d2e0	03					.byte 3	;wh_CodeLength
>d2e1	0b					  .byte LinkDisplacement	; offset to previous nt
=$d2e2					XtPtr1 ::= *
=53854					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2e2	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d2e5					Here1 = *	; remember here
>d2e0	03					.byte CodeLen	;patch wh_CodeLength
>d2e5	4d					.byte $4d
>d2e6	65 6f 72 2e 23			Name0:	.text "eor.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53867					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2eb	65					.byte (("eor.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d2ec	10					.byte WordFlags	;wh_Flags
>d2ed	03					.byte 3	;wh_CodeLength
>d2ee	0d					  .byte LinkDisplacement	; offset to previous nt
=$d2ef					XtPtr1 ::= *
=53867					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2ef	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d2f2					Here1 = *	; remember here
>d2ed	03					.byte CodeLen	;patch wh_CodeLength
>d2f2	49					.byte $49
>d2f3	65 6f 72 2e 78			Name0:	.text "eor.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53880					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2f8	05					.byte (("eor.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d2f9	10					.byte WordFlags	;wh_Flags
>d2fa	03					.byte 3	;wh_CodeLength
>d2fb	0d					  .byte LinkDisplacement	; offset to previous nt
=$d2fc					XtPtr1 ::= *
=53880					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2fc	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d2ff					Here1 = *	; remember here
>d2fa	03					.byte CodeLen	;patch wh_CodeLength
>d2ff	5d					.byte $5d
>d300	65 6f 72 2e 79			Name0:	.text "eor.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53893					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d305	25					.byte (("eor.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d306	10					.byte WordFlags	;wh_Flags
>d307	03					.byte 3	;wh_CodeLength
>d308	0d					  .byte LinkDisplacement	; offset to previous nt
=$d309					XtPtr1 ::= *
=53893					WordListLink ::= Nt0 ; remember the nt of this word for later
.d309	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d30c					Here1 = *	; remember here
>d307	03					.byte CodeLen	;patch wh_CodeLength
>d30c	59					.byte $59
>d30d	65 6f 72 2e 7a			Name0:	.text "eor.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53906					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d312	45					.byte (("eor.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d313	10					.byte WordFlags	;wh_Flags
>d314	03					.byte 3	;wh_CodeLength
>d315	0d					  .byte LinkDisplacement	; offset to previous nt
=$d316					XtPtr1 ::= *
=53906					WordListLink ::= Nt0 ; remember the nt of this word for later
.d316	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d319					Here1 = *	; remember here
>d314	03					.byte CodeLen	;patch wh_CodeLength
>d319	45					.byte $45
>d31a	65 6f 72 2e 7a 69 79		Name0:	.text "eor.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53921					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d321	27					.byte (("eor.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d322	10					.byte WordFlags	;wh_Flags
>d323	03					.byte 3	;wh_CodeLength
>d324	0f					  .byte LinkDisplacement	; offset to previous nt
=$d325					XtPtr1 ::= *
=53921					WordListLink ::= Nt0 ; remember the nt of this word for later
.d325	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d328					Here1 = *	; remember here
>d323	03					.byte CodeLen	;patch wh_CodeLength
>d328	51					.byte $51
>d329	65 6f 72 2e 7a 78		Name0:	.text "eor.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53935					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d32f	06					.byte (("eor.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d330	10					.byte WordFlags	;wh_Flags
>d331	03					.byte 3	;wh_CodeLength
>d332	0e					  .byte LinkDisplacement	; offset to previous nt
=$d333					XtPtr1 ::= *
=53935					WordListLink ::= Nt0 ; remember the nt of this word for later
.d333	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d336					Here1 = *	; remember here
>d331	03					.byte CodeLen	;patch wh_CodeLength
>d336	55					.byte $55
>d337	65 6f 72 2e 7a 78 69		Name0:	.text "eor.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53950					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d33e	27					.byte (("eor.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d33f	10					.byte WordFlags	;wh_Flags
>d340	03					.byte 3	;wh_CodeLength
>d341	0f					  .byte LinkDisplacement	; offset to previous nt
=$d342					XtPtr1 ::= *
=53950					WordListLink ::= Nt0 ; remember the nt of this word for later
.d342	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d345					Here1 = *	; remember here
>d340	03					.byte CodeLen	;patch wh_CodeLength
>d345	41					.byte $41
>d346	69 6e 63			Name0:	.text "inc"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53961					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d349	63					.byte (("inc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d34a	10					.byte WordFlags	;wh_Flags
>d34b	03					.byte 3	;wh_CodeLength
>d34c	0b					  .byte LinkDisplacement	; offset to previous nt
=$d34d					XtPtr1 ::= *
=53961					WordListLink ::= Nt0 ; remember the nt of this word for later
.d34d	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d350					Here1 = *	; remember here
>d34b	03					.byte CodeLen	;patch wh_CodeLength
>d350	ee					.byte $ee
>d351	69 6e 63 2e 61			Name0:	.text "inc.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53974					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d356	25					.byte (("inc.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d357	10					.byte WordFlags	;wh_Flags
>d358	03					.byte 3	;wh_CodeLength
>d359	0d					  .byte LinkDisplacement	; offset to previous nt
=$d35a					XtPtr1 ::= *
=53974					WordListLink ::= Nt0 ; remember the nt of this word for later
.d35a	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d35d					Here1 = *	; remember here
>d358	03					.byte CodeLen	;patch wh_CodeLength
>d35d	1a					.byte $1a
>d35e	69 6e 63 2e 78			Name0:	.text "inc.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53987					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d363	05					.byte (("inc.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d364	10					.byte WordFlags	;wh_Flags
>d365	03					.byte 3	;wh_CodeLength
>d366	0d					  .byte LinkDisplacement	; offset to previous nt
=$d367					XtPtr1 ::= *
=53987					WordListLink ::= Nt0 ; remember the nt of this word for later
.d367	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d36a					Here1 = *	; remember here
>d365	03					.byte CodeLen	;patch wh_CodeLength
>d36a	fe					.byte $fe
>d36b	69 6e 63 2e 7a			Name0:	.text "inc.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54000					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d370	45					.byte (("inc.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d371	10					.byte WordFlags	;wh_Flags
>d372	03					.byte 3	;wh_CodeLength
>d373	0d					  .byte LinkDisplacement	; offset to previous nt
=$d374					XtPtr1 ::= *
=54000					WordListLink ::= Nt0 ; remember the nt of this word for later
.d374	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d377					Here1 = *	; remember here
>d372	03					.byte CodeLen	;patch wh_CodeLength
>d377	e6					.byte $e6
>d378	69 6e 63 2e 7a 78		Name0:	.text "inc.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54014					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d37e	06					.byte (("inc.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d37f	10					.byte WordFlags	;wh_Flags
>d380	03					.byte 3	;wh_CodeLength
>d381	0e					  .byte LinkDisplacement	; offset to previous nt
=$d382					XtPtr1 ::= *
=54014					WordListLink ::= Nt0 ; remember the nt of this word for later
.d382	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d385					Here1 = *	; remember here
>d380	03					.byte CodeLen	;patch wh_CodeLength
>d385	f6					.byte $f6
>d386	69 6e 78			Name0:	.text "inx"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54025					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d389	03					.byte (("inx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d38a	10					.byte WordFlags	;wh_Flags
>d38b	03					.byte 3	;wh_CodeLength
>d38c	0b					  .byte LinkDisplacement	; offset to previous nt
=$d38d					XtPtr1 ::= *
=54025					WordListLink ::= Nt0 ; remember the nt of this word for later
.d38d	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d390					Here1 = *	; remember here
>d38b	03					.byte CodeLen	;patch wh_CodeLength
>d390	e8					.byte $e8
>d391	69 6e 79			Name0:	.text "iny"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54036					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d394	23					.byte (("iny"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d395	10					.byte WordFlags	;wh_Flags
>d396	03					.byte 3	;wh_CodeLength
>d397	0b					  .byte LinkDisplacement	; offset to previous nt
=$d398					XtPtr1 ::= *
=54036					WordListLink ::= Nt0 ; remember the nt of this word for later
.d398	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d39b					Here1 = *	; remember here
>d396	03					.byte CodeLen	;patch wh_CodeLength
>d39b	c8					.byte $c8
>d39c	6a 6d 70			Name0:	.text "jmp"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54047					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d39f	03					.byte (("jmp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3a0	10					.byte WordFlags	;wh_Flags
>d3a1	03					.byte 3	;wh_CodeLength
>d3a2	0b					  .byte LinkDisplacement	; offset to previous nt
=$d3a3					XtPtr1 ::= *
=54047					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3a3	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d3a6					Here1 = *	; remember here
>d3a1	03					.byte CodeLen	;patch wh_CodeLength
>d3a6	4c					.byte $4c
>d3a7	6a 6d 70 2e 69			Name0:	.text "jmp.i"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54060					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3ac	25					.byte (("jmp.i"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3ad	10					.byte WordFlags	;wh_Flags
>d3ae	03					.byte 3	;wh_CodeLength
>d3af	0d					  .byte LinkDisplacement	; offset to previous nt
=$d3b0					XtPtr1 ::= *
=54060					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3b0	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d3b3					Here1 = *	; remember here
>d3ae	03					.byte CodeLen	;patch wh_CodeLength
>d3b3	6c					.byte $6c
>d3b4	6a 73 72			Name0:	.text "jsr"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54071					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3b7	43					.byte (("jsr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3b8	10					.byte WordFlags	;wh_Flags
>d3b9	03					.byte 3	;wh_CodeLength
>d3ba	0b					  .byte LinkDisplacement	; offset to previous nt
=$d3bb					XtPtr1 ::= *
=54071					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3bb	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d3be					Here1 = *	; remember here
>d3b9	03					.byte CodeLen	;patch wh_CodeLength
>d3be	20					.byte $20
>d3bf	6c 64 61			Name0:	.text "lda"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54082					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3c2	23					.byte (("lda"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3c3	10					.byte WordFlags	;wh_Flags
>d3c4	03					.byte 3	;wh_CodeLength
>d3c5	0b					  .byte LinkDisplacement	; offset to previous nt
=$d3c6					XtPtr1 ::= *
=54082					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3c6	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d3c9					Here1 = *	; remember here
>d3c4	03					.byte CodeLen	;patch wh_CodeLength
>d3c9	ad					.byte $ad
>d3ca	6c 64 61 2e 23			Name0:	.text "lda.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54095					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3cf	65					.byte (("lda.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3d0	10					.byte WordFlags	;wh_Flags
>d3d1	03					.byte 3	;wh_CodeLength
>d3d2	0d					  .byte LinkDisplacement	; offset to previous nt
=$d3d3					XtPtr1 ::= *
=54095					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3d3	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d3d6					Here1 = *	; remember here
>d3d1	03					.byte CodeLen	;patch wh_CodeLength
>d3d6	a9					.byte $a9
>d3d7	6c 64 61 2e 78			Name0:	.text "lda.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54108					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3dc	05					.byte (("lda.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3dd	10					.byte WordFlags	;wh_Flags
>d3de	03					.byte 3	;wh_CodeLength
>d3df	0d					  .byte LinkDisplacement	; offset to previous nt
=$d3e0					XtPtr1 ::= *
=54108					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3e0	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d3e3					Here1 = *	; remember here
>d3de	03					.byte CodeLen	;patch wh_CodeLength
>d3e3	bd					.byte $bd
>d3e4	6c 64 61 2e 79			Name0:	.text "lda.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54121					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3e9	25					.byte (("lda.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3ea	10					.byte WordFlags	;wh_Flags
>d3eb	03					.byte 3	;wh_CodeLength
>d3ec	0d					  .byte LinkDisplacement	; offset to previous nt
=$d3ed					XtPtr1 ::= *
=54121					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3ed	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d3f0					Here1 = *	; remember here
>d3eb	03					.byte CodeLen	;patch wh_CodeLength
>d3f0	b9					.byte $b9
>d3f1	6c 64 61 2e 7a			Name0:	.text "lda.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54134					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3f6	45					.byte (("lda.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3f7	10					.byte WordFlags	;wh_Flags
>d3f8	03					.byte 3	;wh_CodeLength
>d3f9	0d					  .byte LinkDisplacement	; offset to previous nt
=$d3fa					XtPtr1 ::= *
=54134					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3fa	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d3fd					Here1 = *	; remember here
>d3f8	03					.byte CodeLen	;patch wh_CodeLength
>d3fd	a5					.byte $a5
>d3fe	6c 64 61 2e 7a 69 79		Name0:	.text "lda.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54149					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d405	27					.byte (("lda.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d406	10					.byte WordFlags	;wh_Flags
>d407	03					.byte 3	;wh_CodeLength
>d408	0f					  .byte LinkDisplacement	; offset to previous nt
=$d409					XtPtr1 ::= *
=54149					WordListLink ::= Nt0 ; remember the nt of this word for later
.d409	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d40c					Here1 = *	; remember here
>d407	03					.byte CodeLen	;patch wh_CodeLength
>d40c	b1					.byte $b1
>d40d	6c 64 61 2e 7a 78		Name0:	.text "lda.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54163					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d413	06					.byte (("lda.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d414	10					.byte WordFlags	;wh_Flags
>d415	03					.byte 3	;wh_CodeLength
>d416	0e					  .byte LinkDisplacement	; offset to previous nt
=$d417					XtPtr1 ::= *
=54163					WordListLink ::= Nt0 ; remember the nt of this word for later
.d417	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d41a					Here1 = *	; remember here
>d415	03					.byte CodeLen	;patch wh_CodeLength
>d41a	b5					.byte $b5
>d41b	6c 64 61 2e 7a 78 69		Name0:	.text "lda.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54178					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d422	27					.byte (("lda.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d423	10					.byte WordFlags	;wh_Flags
>d424	03					.byte 3	;wh_CodeLength
>d425	0f					  .byte LinkDisplacement	; offset to previous nt
=$d426					XtPtr1 ::= *
=54178					WordListLink ::= Nt0 ; remember the nt of this word for later
.d426	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d429					Here1 = *	; remember here
>d424	03					.byte CodeLen	;patch wh_CodeLength
>d429	a1					.byte $a1
>d42a	6c 64 78			Name0:	.text "ldx"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54189					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d42d	03					.byte (("ldx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d42e	10					.byte WordFlags	;wh_Flags
>d42f	03					.byte 3	;wh_CodeLength
>d430	0b					  .byte LinkDisplacement	; offset to previous nt
=$d431					XtPtr1 ::= *
=54189					WordListLink ::= Nt0 ; remember the nt of this word for later
.d431	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d434					Here1 = *	; remember here
>d42f	03					.byte CodeLen	;patch wh_CodeLength
>d434	ae					.byte $ae
>d435	6c 64 78 2e 23			Name0:	.text "ldx.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54202					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d43a	65					.byte (("ldx.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d43b	10					.byte WordFlags	;wh_Flags
>d43c	03					.byte 3	;wh_CodeLength
>d43d	0d					  .byte LinkDisplacement	; offset to previous nt
=$d43e					XtPtr1 ::= *
=54202					WordListLink ::= Nt0 ; remember the nt of this word for later
.d43e	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d441					Here1 = *	; remember here
>d43c	03					.byte CodeLen	;patch wh_CodeLength
>d441	a2					.byte $a2
>d442	6c 64 78 2e 79			Name0:	.text "ldx.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54215					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d447	25					.byte (("ldx.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d448	10					.byte WordFlags	;wh_Flags
>d449	03					.byte 3	;wh_CodeLength
>d44a	0d					  .byte LinkDisplacement	; offset to previous nt
=$d44b					XtPtr1 ::= *
=54215					WordListLink ::= Nt0 ; remember the nt of this word for later
.d44b	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d44e					Here1 = *	; remember here
>d449	03					.byte CodeLen	;patch wh_CodeLength
>d44e	be					.byte $be
>d44f	6c 64 78 2e 7a			Name0:	.text "ldx.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54228					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d454	45					.byte (("ldx.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d455	10					.byte WordFlags	;wh_Flags
>d456	03					.byte 3	;wh_CodeLength
>d457	0d					  .byte LinkDisplacement	; offset to previous nt
=$d458					XtPtr1 ::= *
=54228					WordListLink ::= Nt0 ; remember the nt of this word for later
.d458	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d45b					Here1 = *	; remember here
>d456	03					.byte CodeLen	;patch wh_CodeLength
>d45b	a6					.byte $a6
>d45c	6c 64 78 2e 7a 79		Name0:	.text "ldx.zy"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54242					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d462	26					.byte (("ldx.zy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d463	10					.byte WordFlags	;wh_Flags
>d464	03					.byte 3	;wh_CodeLength
>d465	0e					  .byte LinkDisplacement	; offset to previous nt
=$d466					XtPtr1 ::= *
=54242					WordListLink ::= Nt0 ; remember the nt of this word for later
.d466	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d469					Here1 = *	; remember here
>d464	03					.byte CodeLen	;patch wh_CodeLength
>d469	b6					.byte $b6
>d46a	6c 64 79			Name0:	.text "ldy"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54253					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d46d	23					.byte (("ldy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d46e	10					.byte WordFlags	;wh_Flags
>d46f	03					.byte 3	;wh_CodeLength
>d470	0b					  .byte LinkDisplacement	; offset to previous nt
=$d471					XtPtr1 ::= *
=54253					WordListLink ::= Nt0 ; remember the nt of this word for later
.d471	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d474					Here1 = *	; remember here
>d46f	03					.byte CodeLen	;patch wh_CodeLength
>d474	ac					.byte $ac
>d475	6c 64 79 2e 23			Name0:	.text "ldy.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54266					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d47a	65					.byte (("ldy.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d47b	10					.byte WordFlags	;wh_Flags
>d47c	03					.byte 3	;wh_CodeLength
>d47d	0d					  .byte LinkDisplacement	; offset to previous nt
=$d47e					XtPtr1 ::= *
=54266					WordListLink ::= Nt0 ; remember the nt of this word for later
.d47e	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d481					Here1 = *	; remember here
>d47c	03					.byte CodeLen	;patch wh_CodeLength
>d481	a0					.byte $a0
>d482	6c 64 79 2e 78			Name0:	.text "ldy.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54279					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d487	05					.byte (("ldy.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d488	10					.byte WordFlags	;wh_Flags
>d489	03					.byte 3	;wh_CodeLength
>d48a	0d					  .byte LinkDisplacement	; offset to previous nt
=$d48b					XtPtr1 ::= *
=54279					WordListLink ::= Nt0 ; remember the nt of this word for later
.d48b	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d48e					Here1 = *	; remember here
>d489	03					.byte CodeLen	;patch wh_CodeLength
>d48e	bc					.byte $bc
>d48f	6c 64 79 2e 7a			Name0:	.text "ldy.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54292					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d494	45					.byte (("ldy.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d495	10					.byte WordFlags	;wh_Flags
>d496	03					.byte 3	;wh_CodeLength
>d497	0d					  .byte LinkDisplacement	; offset to previous nt
=$d498					XtPtr1 ::= *
=54292					WordListLink ::= Nt0 ; remember the nt of this word for later
.d498	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d49b					Here1 = *	; remember here
>d496	03					.byte CodeLen	;patch wh_CodeLength
>d49b	a4					.byte $a4
>d49c	6c 64 79 2e 7a 78		Name0:	.text "ldy.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54306					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4a2	06					.byte (("ldy.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d4a3	10					.byte WordFlags	;wh_Flags
>d4a4	03					.byte 3	;wh_CodeLength
>d4a5	0e					  .byte LinkDisplacement	; offset to previous nt
=$d4a6					XtPtr1 ::= *
=54306					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4a6	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d4a9					Here1 = *	; remember here
>d4a4	03					.byte CodeLen	;patch wh_CodeLength
>d4a9	b4					.byte $b4
>d4aa	6c 73 72			Name0:	.text "lsr"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54317					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4ad	43					.byte (("lsr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d4ae	10					.byte WordFlags	;wh_Flags
>d4af	03					.byte 3	;wh_CodeLength
>d4b0	0b					  .byte LinkDisplacement	; offset to previous nt
=$d4b1					XtPtr1 ::= *
=54317					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4b1	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d4b4					Here1 = *	; remember here
>d4af	03					.byte CodeLen	;patch wh_CodeLength
>d4b4	4e					.byte $4e
>d4b5	6c 73 72 2e 61			Name0:	.text "lsr.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54330					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4ba	25					.byte (("lsr.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4bb	10					.byte WordFlags	;wh_Flags
>d4bc	03					.byte 3	;wh_CodeLength
>d4bd	0d					  .byte LinkDisplacement	; offset to previous nt
=$d4be					XtPtr1 ::= *
=54330					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4be	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d4c1					Here1 = *	; remember here
>d4bc	03					.byte CodeLen	;patch wh_CodeLength
>d4c1	4a					.byte $4a
>d4c2	6c 73 72 2e 78			Name0:	.text "lsr.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54343					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4c7	05					.byte (("lsr.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4c8	10					.byte WordFlags	;wh_Flags
>d4c9	03					.byte 3	;wh_CodeLength
>d4ca	0d					  .byte LinkDisplacement	; offset to previous nt
=$d4cb					XtPtr1 ::= *
=54343					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4cb	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d4ce					Here1 = *	; remember here
>d4c9	03					.byte CodeLen	;patch wh_CodeLength
>d4ce	5e					.byte $5e
>d4cf	6c 73 72 2e 7a			Name0:	.text "lsr.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54356					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4d4	45					.byte (("lsr.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4d5	10					.byte WordFlags	;wh_Flags
>d4d6	03					.byte 3	;wh_CodeLength
>d4d7	0d					  .byte LinkDisplacement	; offset to previous nt
=$d4d8					XtPtr1 ::= *
=54356					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4d8	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d4db					Here1 = *	; remember here
>d4d6	03					.byte CodeLen	;patch wh_CodeLength
>d4db	46					.byte $46
>d4dc	6c 73 72 2e 7a 78		Name0:	.text "lsr.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54370					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4e2	06					.byte (("lsr.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d4e3	10					.byte WordFlags	;wh_Flags
>d4e4	03					.byte 3	;wh_CodeLength
>d4e5	0e					  .byte LinkDisplacement	; offset to previous nt
=$d4e6					XtPtr1 ::= *
=54370					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4e6	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d4e9					Here1 = *	; remember here
>d4e4	03					.byte CodeLen	;patch wh_CodeLength
>d4e9	56					.byte $56
>d4ea	6e 6f 70			Name0:	.text "nop"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54381					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4ed	03					.byte (("nop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d4ee	10					.byte WordFlags	;wh_Flags
>d4ef	03					.byte 3	;wh_CodeLength
>d4f0	0b					  .byte LinkDisplacement	; offset to previous nt
=$d4f1					XtPtr1 ::= *
=54381					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4f1	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d4f4					Here1 = *	; remember here
>d4ef	03					.byte CodeLen	;patch wh_CodeLength
>d4f4	ea					.byte $ea
>d4f5	6f 72 61			Name0:	.text "ora"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54392					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4f8	23					.byte (("ora"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d4f9	10					.byte WordFlags	;wh_Flags
>d4fa	03					.byte 3	;wh_CodeLength
>d4fb	0b					  .byte LinkDisplacement	; offset to previous nt
=$d4fc					XtPtr1 ::= *
=54392					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4fc	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d4ff					Here1 = *	; remember here
>d4fa	03					.byte CodeLen	;patch wh_CodeLength
>d4ff	0d					.byte $0d
>d500	6f 72 61 2e 23			Name0:	.text "ora.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54405					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d505	65					.byte (("ora.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d506	10					.byte WordFlags	;wh_Flags
>d507	03					.byte 3	;wh_CodeLength
>d508	0d					  .byte LinkDisplacement	; offset to previous nt
=$d509					XtPtr1 ::= *
=54405					WordListLink ::= Nt0 ; remember the nt of this word for later
.d509	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d50c					Here1 = *	; remember here
>d507	03					.byte CodeLen	;patch wh_CodeLength
>d50c	09					.byte $09
>d50d	6f 72 61 2e 78			Name0:	.text "ora.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54418					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d512	05					.byte (("ora.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d513	10					.byte WordFlags	;wh_Flags
>d514	03					.byte 3	;wh_CodeLength
>d515	0d					  .byte LinkDisplacement	; offset to previous nt
=$d516					XtPtr1 ::= *
=54418					WordListLink ::= Nt0 ; remember the nt of this word for later
.d516	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d519					Here1 = *	; remember here
>d514	03					.byte CodeLen	;patch wh_CodeLength
>d519	1d					.byte $1d
>d51a	6f 72 61 2e 79			Name0:	.text "ora.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54431					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d51f	25					.byte (("ora.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d520	10					.byte WordFlags	;wh_Flags
>d521	03					.byte 3	;wh_CodeLength
>d522	0d					  .byte LinkDisplacement	; offset to previous nt
=$d523					XtPtr1 ::= *
=54431					WordListLink ::= Nt0 ; remember the nt of this word for later
.d523	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d526					Here1 = *	; remember here
>d521	03					.byte CodeLen	;patch wh_CodeLength
>d526	19					.byte $19
>d527	6f 72 61 2e 7a			Name0:	.text "ora.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54444					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d52c	45					.byte (("ora.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d52d	10					.byte WordFlags	;wh_Flags
>d52e	03					.byte 3	;wh_CodeLength
>d52f	0d					  .byte LinkDisplacement	; offset to previous nt
=$d530					XtPtr1 ::= *
=54444					WordListLink ::= Nt0 ; remember the nt of this word for later
.d530	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d533					Here1 = *	; remember here
>d52e	03					.byte CodeLen	;patch wh_CodeLength
>d533	05					.byte $05
>d534	6f 72 61 2e 7a 69 79		Name0:	.text "ora.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54459					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d53b	27					.byte (("ora.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d53c	10					.byte WordFlags	;wh_Flags
>d53d	03					.byte 3	;wh_CodeLength
>d53e	0f					  .byte LinkDisplacement	; offset to previous nt
=$d53f					XtPtr1 ::= *
=54459					WordListLink ::= Nt0 ; remember the nt of this word for later
.d53f	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d542					Here1 = *	; remember here
>d53d	03					.byte CodeLen	;patch wh_CodeLength
>d542	11					.byte $11
>d543	6f 72 61 2e 7a 78		Name0:	.text "ora.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54473					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d549	06					.byte (("ora.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d54a	10					.byte WordFlags	;wh_Flags
>d54b	03					.byte 3	;wh_CodeLength
>d54c	0e					  .byte LinkDisplacement	; offset to previous nt
=$d54d					XtPtr1 ::= *
=54473					WordListLink ::= Nt0 ; remember the nt of this word for later
.d54d	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d550					Here1 = *	; remember here
>d54b	03					.byte CodeLen	;patch wh_CodeLength
>d550	15					.byte $15
>d551	6f 72 61 2e 7a 78 69		Name0:	.text "ora.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54488					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d558	27					.byte (("ora.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d559	10					.byte WordFlags	;wh_Flags
>d55a	03					.byte 3	;wh_CodeLength
>d55b	0f					  .byte LinkDisplacement	; offset to previous nt
=$d55c					XtPtr1 ::= *
=54488					WordListLink ::= Nt0 ; remember the nt of this word for later
.d55c	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d55f					Here1 = *	; remember here
>d55a	03					.byte CodeLen	;patch wh_CodeLength
>d55f	01					.byte $01
>d560	70 68 61			Name0:	.text "pha"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54499					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d563	23					.byte (("pha"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d564	10					.byte WordFlags	;wh_Flags
>d565	03					.byte 3	;wh_CodeLength
>d566	0b					  .byte LinkDisplacement	; offset to previous nt
=$d567					XtPtr1 ::= *
=54499					WordListLink ::= Nt0 ; remember the nt of this word for later
.d567	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d56a					Here1 = *	; remember here
>d565	03					.byte CodeLen	;patch wh_CodeLength
>d56a	48					.byte $48
>d56b	70 68 70			Name0:	.text "php"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54510					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d56e	03					.byte (("php"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d56f	10					.byte WordFlags	;wh_Flags
>d570	03					.byte 3	;wh_CodeLength
>d571	0b					  .byte LinkDisplacement	; offset to previous nt
=$d572					XtPtr1 ::= *
=54510					WordListLink ::= Nt0 ; remember the nt of this word for later
.d572	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d575					Here1 = *	; remember here
>d570	03					.byte CodeLen	;patch wh_CodeLength
>d575	08					.byte $08
>d576	70 6c 61			Name0:	.text "pla"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54521					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d579	23					.byte (("pla"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d57a	10					.byte WordFlags	;wh_Flags
>d57b	03					.byte 3	;wh_CodeLength
>d57c	0b					  .byte LinkDisplacement	; offset to previous nt
=$d57d					XtPtr1 ::= *
=54521					WordListLink ::= Nt0 ; remember the nt of this word for later
.d57d	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d580					Here1 = *	; remember here
>d57b	03					.byte CodeLen	;patch wh_CodeLength
>d580	68					.byte $68
>d581	70 6c 70			Name0:	.text "plp"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54532					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d584	03					.byte (("plp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d585	10					.byte WordFlags	;wh_Flags
>d586	03					.byte 3	;wh_CodeLength
>d587	0b					  .byte LinkDisplacement	; offset to previous nt
=$d588					XtPtr1 ::= *
=54532					WordListLink ::= Nt0 ; remember the nt of this word for later
.d588	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d58b					Here1 = *	; remember here
>d586	03					.byte CodeLen	;patch wh_CodeLength
>d58b	28					.byte $28
>d58c	72 6f 6c			Name0:	.text "rol"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54543					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d58f	83					.byte (("rol"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d590	10					.byte WordFlags	;wh_Flags
>d591	03					.byte 3	;wh_CodeLength
>d592	0b					  .byte LinkDisplacement	; offset to previous nt
=$d593					XtPtr1 ::= *
=54543					WordListLink ::= Nt0 ; remember the nt of this word for later
.d593	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d596					Here1 = *	; remember here
>d591	03					.byte CodeLen	;patch wh_CodeLength
>d596	2e					.byte $2e
>d597	72 6f 6c 2e 61			Name0:	.text "rol.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54556					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d59c	25					.byte (("rol.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d59d	10					.byte WordFlags	;wh_Flags
>d59e	03					.byte 3	;wh_CodeLength
>d59f	0d					  .byte LinkDisplacement	; offset to previous nt
=$d5a0					XtPtr1 ::= *
=54556					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5a0	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d5a3					Here1 = *	; remember here
>d59e	03					.byte CodeLen	;patch wh_CodeLength
>d5a3	2a					.byte $2a
>d5a4	72 6f 6c 2e 78			Name0:	.text "rol.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54569					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5a9	05					.byte (("rol.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5aa	10					.byte WordFlags	;wh_Flags
>d5ab	03					.byte 3	;wh_CodeLength
>d5ac	0d					  .byte LinkDisplacement	; offset to previous nt
=$d5ad					XtPtr1 ::= *
=54569					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5ad	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d5b0					Here1 = *	; remember here
>d5ab	03					.byte CodeLen	;patch wh_CodeLength
>d5b0	3e					.byte $3e
>d5b1	72 6f 6c 2e 7a			Name0:	.text "rol.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54582					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5b6	45					.byte (("rol.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5b7	10					.byte WordFlags	;wh_Flags
>d5b8	03					.byte 3	;wh_CodeLength
>d5b9	0d					  .byte LinkDisplacement	; offset to previous nt
=$d5ba					XtPtr1 ::= *
=54582					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5ba	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d5bd					Here1 = *	; remember here
>d5b8	03					.byte CodeLen	;patch wh_CodeLength
>d5bd	26					.byte $26
>d5be	72 6f 6c 2e 7a 78		Name0:	.text "rol.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54596					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5c4	06					.byte (("rol.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d5c5	10					.byte WordFlags	;wh_Flags
>d5c6	03					.byte 3	;wh_CodeLength
>d5c7	0e					  .byte LinkDisplacement	; offset to previous nt
=$d5c8					XtPtr1 ::= *
=54596					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5c8	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d5cb					Here1 = *	; remember here
>d5c6	03					.byte CodeLen	;patch wh_CodeLength
>d5cb	36					.byte $36
>d5cc	72 6f 72			Name0:	.text "ror"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54607					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5cf	43					.byte (("ror"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d5d0	10					.byte WordFlags	;wh_Flags
>d5d1	03					.byte 3	;wh_CodeLength
>d5d2	0b					  .byte LinkDisplacement	; offset to previous nt
=$d5d3					XtPtr1 ::= *
=54607					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5d3	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d5d6					Here1 = *	; remember here
>d5d1	03					.byte CodeLen	;patch wh_CodeLength
>d5d6	6e					.byte $6e
>d5d7	72 6f 72 2e 61			Name0:	.text "ror.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54620					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5dc	25					.byte (("ror.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5dd	10					.byte WordFlags	;wh_Flags
>d5de	03					.byte 3	;wh_CodeLength
>d5df	0d					  .byte LinkDisplacement	; offset to previous nt
=$d5e0					XtPtr1 ::= *
=54620					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5e0	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d5e3					Here1 = *	; remember here
>d5de	03					.byte CodeLen	;patch wh_CodeLength
>d5e3	6a					.byte $6a
>d5e4	72 6f 72 2e 78			Name0:	.text "ror.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54633					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5e9	05					.byte (("ror.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5ea	10					.byte WordFlags	;wh_Flags
>d5eb	03					.byte 3	;wh_CodeLength
>d5ec	0d					  .byte LinkDisplacement	; offset to previous nt
=$d5ed					XtPtr1 ::= *
=54633					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5ed	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d5f0					Here1 = *	; remember here
>d5eb	03					.byte CodeLen	;patch wh_CodeLength
>d5f0	7e					.byte $7e
>d5f1	72 6f 72 2e 7a			Name0:	.text "ror.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54646					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5f6	45					.byte (("ror.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5f7	10					.byte WordFlags	;wh_Flags
>d5f8	03					.byte 3	;wh_CodeLength
>d5f9	0d					  .byte LinkDisplacement	; offset to previous nt
=$d5fa					XtPtr1 ::= *
=54646					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5fa	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d5fd					Here1 = *	; remember here
>d5f8	03					.byte CodeLen	;patch wh_CodeLength
>d5fd	66					.byte $66
>d5fe	72 6f 72 2e 7a 78		Name0:	.text "ror.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54660					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d604	06					.byte (("ror.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d605	10					.byte WordFlags	;wh_Flags
>d606	03					.byte 3	;wh_CodeLength
>d607	0e					  .byte LinkDisplacement	; offset to previous nt
=$d608					XtPtr1 ::= *
=54660					WordListLink ::= Nt0 ; remember the nt of this word for later
.d608	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d60b					Here1 = *	; remember here
>d606	03					.byte CodeLen	;patch wh_CodeLength
>d60b	76					.byte $76
>d60c	72 74 69			Name0:	.text "rti"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54671					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d60f	23					.byte (("rti"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d610	10					.byte WordFlags	;wh_Flags
>d611	03					.byte 3	;wh_CodeLength
>d612	0b					  .byte LinkDisplacement	; offset to previous nt
=$d613					XtPtr1 ::= *
=54671					WordListLink ::= Nt0 ; remember the nt of this word for later
.d613	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d616					Here1 = *	; remember here
>d611	03					.byte CodeLen	;patch wh_CodeLength
>d616	40					.byte $40
>d617	72 74 73			Name0:	.text "rts"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54682					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d61a	63					.byte (("rts"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d61b	10					.byte WordFlags	;wh_Flags
>d61c	03					.byte 3	;wh_CodeLength
>d61d	0b					  .byte LinkDisplacement	; offset to previous nt
=$d61e					XtPtr1 ::= *
=54682					WordListLink ::= Nt0 ; remember the nt of this word for later
.d61e	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d621					Here1 = *	; remember here
>d61c	03					.byte CodeLen	;patch wh_CodeLength
>d621	60					.byte $60
>d622	73 62 63			Name0:	.text "sbc"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54693					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d625	63					.byte (("sbc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d626	10					.byte WordFlags	;wh_Flags
>d627	03					.byte 3	;wh_CodeLength
>d628	0b					  .byte LinkDisplacement	; offset to previous nt
=$d629					XtPtr1 ::= *
=54693					WordListLink ::= Nt0 ; remember the nt of this word for later
.d629	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d62c					Here1 = *	; remember here
>d627	03					.byte CodeLen	;patch wh_CodeLength
>d62c	ed					.byte $ed
>d62d	73 62 63 2e 23			Name0:	.text "sbc.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54706					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d632	65					.byte (("sbc.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d633	10					.byte WordFlags	;wh_Flags
>d634	03					.byte 3	;wh_CodeLength
>d635	0d					  .byte LinkDisplacement	; offset to previous nt
=$d636					XtPtr1 ::= *
=54706					WordListLink ::= Nt0 ; remember the nt of this word for later
.d636	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d639					Here1 = *	; remember here
>d634	03					.byte CodeLen	;patch wh_CodeLength
>d639	e9					.byte $e9
>d63a	73 62 63 2e 78			Name0:	.text "sbc.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54719					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d63f	05					.byte (("sbc.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d640	10					.byte WordFlags	;wh_Flags
>d641	03					.byte 3	;wh_CodeLength
>d642	0d					  .byte LinkDisplacement	; offset to previous nt
=$d643					XtPtr1 ::= *
=54719					WordListLink ::= Nt0 ; remember the nt of this word for later
.d643	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d646					Here1 = *	; remember here
>d641	03					.byte CodeLen	;patch wh_CodeLength
>d646	fd					.byte $fd
>d647	73 62 63 2e 79			Name0:	.text "sbc.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54732					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d64c	25					.byte (("sbc.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d64d	10					.byte WordFlags	;wh_Flags
>d64e	03					.byte 3	;wh_CodeLength
>d64f	0d					  .byte LinkDisplacement	; offset to previous nt
=$d650					XtPtr1 ::= *
=54732					WordListLink ::= Nt0 ; remember the nt of this word for later
.d650	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d653					Here1 = *	; remember here
>d64e	03					.byte CodeLen	;patch wh_CodeLength
>d653	f9					.byte $f9
>d654	73 62 63 2e 7a			Name0:	.text "sbc.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54745					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d659	45					.byte (("sbc.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d65a	10					.byte WordFlags	;wh_Flags
>d65b	03					.byte 3	;wh_CodeLength
>d65c	0d					  .byte LinkDisplacement	; offset to previous nt
=$d65d					XtPtr1 ::= *
=54745					WordListLink ::= Nt0 ; remember the nt of this word for later
.d65d	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d660					Here1 = *	; remember here
>d65b	03					.byte CodeLen	;patch wh_CodeLength
>d660	e5					.byte $e5
>d661	73 62 63 2e 7a 69 79		Name0:	.text "sbc.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54760					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d668	27					.byte (("sbc.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d669	10					.byte WordFlags	;wh_Flags
>d66a	03					.byte 3	;wh_CodeLength
>d66b	0f					  .byte LinkDisplacement	; offset to previous nt
=$d66c					XtPtr1 ::= *
=54760					WordListLink ::= Nt0 ; remember the nt of this word for later
.d66c	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d66f					Here1 = *	; remember here
>d66a	03					.byte CodeLen	;patch wh_CodeLength
>d66f	f1					.byte $f1
>d670	73 62 63 2e 7a 78		Name0:	.text "sbc.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54774					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d676	06					.byte (("sbc.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d677	10					.byte WordFlags	;wh_Flags
>d678	03					.byte 3	;wh_CodeLength
>d679	0e					  .byte LinkDisplacement	; offset to previous nt
=$d67a					XtPtr1 ::= *
=54774					WordListLink ::= Nt0 ; remember the nt of this word for later
.d67a	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d67d					Here1 = *	; remember here
>d678	03					.byte CodeLen	;patch wh_CodeLength
>d67d	f5					.byte $f5
>d67e	73 62 63 2e 7a 78 69		Name0:	.text "sbc.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54789					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d685	27					.byte (("sbc.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d686	10					.byte WordFlags	;wh_Flags
>d687	03					.byte 3	;wh_CodeLength
>d688	0f					  .byte LinkDisplacement	; offset to previous nt
=$d689					XtPtr1 ::= *
=54789					WordListLink ::= Nt0 ; remember the nt of this word for later
.d689	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d68c					Here1 = *	; remember here
>d687	03					.byte CodeLen	;patch wh_CodeLength
>d68c	e1					.byte $e1
>d68d	73 65 63			Name0:	.text "sec"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54800					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d690	63					.byte (("sec"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d691	10					.byte WordFlags	;wh_Flags
>d692	03					.byte 3	;wh_CodeLength
>d693	0b					  .byte LinkDisplacement	; offset to previous nt
=$d694					XtPtr1 ::= *
=54800					WordListLink ::= Nt0 ; remember the nt of this word for later
.d694	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d697					Here1 = *	; remember here
>d692	03					.byte CodeLen	;patch wh_CodeLength
>d697	38					.byte $38
>d698	73 65 64			Name0:	.text "sed"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54811					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d69b	83					.byte (("sed"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d69c	10					.byte WordFlags	;wh_Flags
>d69d	03					.byte 3	;wh_CodeLength
>d69e	0b					  .byte LinkDisplacement	; offset to previous nt
=$d69f					XtPtr1 ::= *
=54811					WordListLink ::= Nt0 ; remember the nt of this word for later
.d69f	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d6a2					Here1 = *	; remember here
>d69d	03					.byte CodeLen	;patch wh_CodeLength
>d6a2	f8					.byte $f8
>d6a3	73 65 69			Name0:	.text "sei"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54822					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6a6	23					.byte (("sei"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d6a7	10					.byte WordFlags	;wh_Flags
>d6a8	03					.byte 3	;wh_CodeLength
>d6a9	0b					  .byte LinkDisplacement	; offset to previous nt
=$d6aa					XtPtr1 ::= *
=54822					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6aa	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d6ad					Here1 = *	; remember here
>d6a8	03					.byte CodeLen	;patch wh_CodeLength
>d6ad	78					.byte $78
>d6ae	73 74 61			Name0:	.text "sta"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54833					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6b1	23					.byte (("sta"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d6b2	10					.byte WordFlags	;wh_Flags
>d6b3	03					.byte 3	;wh_CodeLength
>d6b4	0b					  .byte LinkDisplacement	; offset to previous nt
=$d6b5					XtPtr1 ::= *
=54833					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6b5	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d6b8					Here1 = *	; remember here
>d6b3	03					.byte CodeLen	;patch wh_CodeLength
>d6b8	8d					.byte $8d
>d6b9	73 74 61 2e 78			Name0:	.text "sta.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54846					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6be	05					.byte (("sta.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d6bf	10					.byte WordFlags	;wh_Flags
>d6c0	03					.byte 3	;wh_CodeLength
>d6c1	0d					  .byte LinkDisplacement	; offset to previous nt
=$d6c2					XtPtr1 ::= *
=54846					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6c2	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d6c5					Here1 = *	; remember here
>d6c0	03					.byte CodeLen	;patch wh_CodeLength
>d6c5	9d					.byte $9d
>d6c6	73 74 61 2e 79			Name0:	.text "sta.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54859					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6cb	25					.byte (("sta.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d6cc	10					.byte WordFlags	;wh_Flags
>d6cd	03					.byte 3	;wh_CodeLength
>d6ce	0d					  .byte LinkDisplacement	; offset to previous nt
=$d6cf					XtPtr1 ::= *
=54859					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6cf	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d6d2					Here1 = *	; remember here
>d6cd	03					.byte CodeLen	;patch wh_CodeLength
>d6d2	99					.byte $99
>d6d3	73 74 61 2e 7a			Name0:	.text "sta.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54872					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6d8	45					.byte (("sta.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d6d9	10					.byte WordFlags	;wh_Flags
>d6da	03					.byte 3	;wh_CodeLength
>d6db	0d					  .byte LinkDisplacement	; offset to previous nt
=$d6dc					XtPtr1 ::= *
=54872					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6dc	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d6df					Here1 = *	; remember here
>d6da	03					.byte CodeLen	;patch wh_CodeLength
>d6df	85					.byte $85
>d6e0	73 74 61 2e 7a 69 79		Name0:	.text "sta.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54887					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6e7	27					.byte (("sta.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d6e8	10					.byte WordFlags	;wh_Flags
>d6e9	03					.byte 3	;wh_CodeLength
>d6ea	0f					  .byte LinkDisplacement	; offset to previous nt
=$d6eb					XtPtr1 ::= *
=54887					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6eb	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d6ee					Here1 = *	; remember here
>d6e9	03					.byte CodeLen	;patch wh_CodeLength
>d6ee	91					.byte $91
>d6ef	73 74 61 2e 7a 78		Name0:	.text "sta.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54901					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6f5	06					.byte (("sta.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d6f6	10					.byte WordFlags	;wh_Flags
>d6f7	03					.byte 3	;wh_CodeLength
>d6f8	0e					  .byte LinkDisplacement	; offset to previous nt
=$d6f9					XtPtr1 ::= *
=54901					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6f9	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d6fc					Here1 = *	; remember here
>d6f7	03					.byte CodeLen	;patch wh_CodeLength
>d6fc	95					.byte $95
>d6fd	73 74 61 2e 7a 78 69		Name0:	.text "sta.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54916					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d704	27					.byte (("sta.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d705	10					.byte WordFlags	;wh_Flags
>d706	03					.byte 3	;wh_CodeLength
>d707	0f					  .byte LinkDisplacement	; offset to previous nt
=$d708					XtPtr1 ::= *
=54916					WordListLink ::= Nt0 ; remember the nt of this word for later
.d708	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d70b					Here1 = *	; remember here
>d706	03					.byte CodeLen	;patch wh_CodeLength
>d70b	81					.byte $81
>d70c	73 74 78			Name0:	.text "stx"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54927					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d70f	03					.byte (("stx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d710	10					.byte WordFlags	;wh_Flags
>d711	03					.byte 3	;wh_CodeLength
>d712	0b					  .byte LinkDisplacement	; offset to previous nt
=$d713					XtPtr1 ::= *
=54927					WordListLink ::= Nt0 ; remember the nt of this word for later
.d713	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d716					Here1 = *	; remember here
>d711	03					.byte CodeLen	;patch wh_CodeLength
>d716	8e					.byte $8e
>d717	73 74 78 2e 7a			Name0:	.text "stx.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54940					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d71c	45					.byte (("stx.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d71d	10					.byte WordFlags	;wh_Flags
>d71e	03					.byte 3	;wh_CodeLength
>d71f	0d					  .byte LinkDisplacement	; offset to previous nt
=$d720					XtPtr1 ::= *
=54940					WordListLink ::= Nt0 ; remember the nt of this word for later
.d720	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d723					Here1 = *	; remember here
>d71e	03					.byte CodeLen	;patch wh_CodeLength
>d723	86					.byte $86
>d724	73 74 78 2e 7a 79		Name0:	.text "stx.zy"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54954					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d72a	26					.byte (("stx.zy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d72b	10					.byte WordFlags	;wh_Flags
>d72c	03					.byte 3	;wh_CodeLength
>d72d	0e					  .byte LinkDisplacement	; offset to previous nt
=$d72e					XtPtr1 ::= *
=54954					WordListLink ::= Nt0 ; remember the nt of this word for later
.d72e	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d731					Here1 = *	; remember here
>d72c	03					.byte CodeLen	;patch wh_CodeLength
>d731	96					.byte $96
>d732	73 74 79			Name0:	.text "sty"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54965					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d735	23					.byte (("sty"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d736	10					.byte WordFlags	;wh_Flags
>d737	03					.byte 3	;wh_CodeLength
>d738	0b					  .byte LinkDisplacement	; offset to previous nt
=$d739					XtPtr1 ::= *
=54965					WordListLink ::= Nt0 ; remember the nt of this word for later
.d739	20 05 d0	jsr $d005		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d73c					Here1 = *	; remember here
>d737	03					.byte CodeLen	;patch wh_CodeLength
>d73c	8c					.byte $8c
>d73d	73 74 79 2e 7a			Name0:	.text "sty.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54978					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d742	45					.byte (("sty.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d743	10					.byte WordFlags	;wh_Flags
>d744	03					.byte 3	;wh_CodeLength
>d745	0d					  .byte LinkDisplacement	; offset to previous nt
=$d746					XtPtr1 ::= *
=54978					WordListLink ::= Nt0 ; remember the nt of this word for later
.d746	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d749					Here1 = *	; remember here
>d744	03					.byte CodeLen	;patch wh_CodeLength
>d749	84					.byte $84
>d74a	73 74 79 2e 7a 78		Name0:	.text "sty.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54992					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d750	06					.byte (("sty.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d751	10					.byte WordFlags	;wh_Flags
>d752	03					.byte 3	;wh_CodeLength
>d753	0e					  .byte LinkDisplacement	; offset to previous nt
=$d754					XtPtr1 ::= *
=54992					WordListLink ::= Nt0 ; remember the nt of this word for later
.d754	20 f3 cf	jsr $cff3		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d757					Here1 = *	; remember here
>d752	03					.byte CodeLen	;patch wh_CodeLength
>d757	94					.byte $94
>d758	74 61 78			Name0:	.text "tax"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55003					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d75b	03					.byte (("tax"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d75c	10					.byte WordFlags	;wh_Flags
>d75d	03					.byte 3	;wh_CodeLength
>d75e	0b					  .byte LinkDisplacement	; offset to previous nt
=$d75f					XtPtr1 ::= *
=55003					WordListLink ::= Nt0 ; remember the nt of this word for later
.d75f	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d762					Here1 = *	; remember here
>d75d	03					.byte CodeLen	;patch wh_CodeLength
>d762	aa					.byte $aa
>d763	74 61 79			Name0:	.text "tay"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55014					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d766	23					.byte (("tay"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d767	10					.byte WordFlags	;wh_Flags
>d768	03					.byte 3	;wh_CodeLength
>d769	0b					  .byte LinkDisplacement	; offset to previous nt
=$d76a					XtPtr1 ::= *
=55014					WordListLink ::= Nt0 ; remember the nt of this word for later
.d76a	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d76d					Here1 = *	; remember here
>d768	03					.byte CodeLen	;patch wh_CodeLength
>d76d	a8					.byte $a8
>d76e	74 73 78			Name0:	.text "tsx"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55025					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d771	03					.byte (("tsx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d772	10					.byte WordFlags	;wh_Flags
>d773	03					.byte 3	;wh_CodeLength
>d774	0b					  .byte LinkDisplacement	; offset to previous nt
=$d775					XtPtr1 ::= *
=55025					WordListLink ::= Nt0 ; remember the nt of this word for later
.d775	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d778					Here1 = *	; remember here
>d773	03					.byte CodeLen	;patch wh_CodeLength
>d778	ba					.byte $BA
>d779	74 78 61			Name0:	.text "txa"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55036					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d77c	23					.byte (("txa"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d77d	10					.byte WordFlags	;wh_Flags
>d77e	03					.byte 3	;wh_CodeLength
>d77f	0b					  .byte LinkDisplacement	; offset to previous nt
=$d780					XtPtr1 ::= *
=55036					WordListLink ::= Nt0 ; remember the nt of this word for later
.d780	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d783					Here1 = *	; remember here
>d77e	03					.byte CodeLen	;patch wh_CodeLength
>d783	8a					.byte $8a
>d784	74 78 73			Name0:	.text "txs"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55047					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d787	63					.byte (("txs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d788	10					.byte WordFlags	;wh_Flags
>d789	03					.byte 3	;wh_CodeLength
>d78a	0b					  .byte LinkDisplacement	; offset to previous nt
=$d78b					XtPtr1 ::= *
=55047					WordListLink ::= Nt0 ; remember the nt of this word for later
.d78b	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d78e					Here1 = *	; remember here
>d789	03					.byte CodeLen	;patch wh_CodeLength
>d78e	9a					.byte $9a
>d78f	74 79 61			Name0:	.text "tya"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55058					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d792	23					.byte (("tya"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d793	10					.byte WordFlags	;wh_Flags
>d794	03					.byte 3	;wh_CodeLength
>d795	0b					  .byte LinkDisplacement	; offset to previous nt
=$d796					XtPtr1 ::= *
=55058					WordListLink ::= Nt0 ; remember the nt of this word for later
.d796	20 0e d0	jsr $d00e		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d799					Here1 = *	; remember here
>d794	03					.byte CodeLen	;patch wh_CodeLength
>d799	98					.byte $98
=55058					asm_table = WordListLink ; head of instruction word list for disassembler
>d79a	70 75 73 68 2d 61		Name0:	.text "push-a"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=55072					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7a0	26					.byte (("push-a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d7a1	18					.byte WordFlags	;wh_Flags
>d7a2	03					.byte 3	;wh_CodeLength
>d7a3	0e					  .byte LinkDisplacement	; offset to previous nt
=$d7a4					XtPtr1 ::= *
=55072					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7a4	a9 e2		lda #$e2			lda #<PushZA
.d7a6	a0 b7		ldy #$b7			ldy #>PushZA
.d7a8	4c 21 cd	jmp $cd21			jmp Jsr_Comma_YA
=7					CodeLen	.var *-XtPtr1
=$d7ab					Here1 = *	; remember here
>d7a2	07					.byte CodeLen	;patch wh_CodeLength
>d7ab	2d 2d 3e			Name0:	.text "-->"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55086					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7ae	c3					.byte (("-->"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d7af	18					.byte WordFlags	;wh_Flags
>d7b0	03					.byte 3	;wh_CodeLength
>d7b1	0e					  .byte LinkDisplacement	; offset to previous nt
=$d7b2					XtPtr1 ::= *
=55086					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7b2	4c 28 ca	jmp $ca28			jmp Here
=3					CodeLen	.var *-XtPtr1
=$d7b5					Here1 = *	; remember here
>d7b0	03					.byte CodeLen	;patch wh_CodeLength
>d7b5	3c 6a				Name0:	.text "<j"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=55095					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7b7	42					.byte (("<j"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$08					WordFlags ::= IM	; modifiable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>d7b8	08					.byte WordFlags	;wh_Flags
>d7b9	03					.byte 3	;wh_CodeLength
>d7ba	09					  .byte LinkDisplacement	; offset to previous nt
=$d7bb					XtPtr1 ::= *
=55095					WordListLink ::= Nt0 ; remember the nt of this word for later
=0					CodeLen	.var *-XtPtr1
=$d7bb					Here1 = *	; remember here
>d7b9	00					.byte CodeLen	;patch wh_CodeLength
.d7bb	60		rts				rts
>d7bc	3c 62				Name0:	.text "<b"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=55102					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7be	42					.byte (("<b"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=7					LinkDisplacement = Nt0-WordListLink
>d7bf	18					.byte WordFlags	;wh_Flags
>d7c0	03					.byte 3	;wh_CodeLength
>d7c1	07					  .byte LinkDisplacement	; offset to previous nt
=$d7c2					XtPtr1 ::= *
=55102					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7c2					asm_back_branch:
.d7c2	20 28 ca	jsr $ca28			jsr Here		; ( addr-l addr-h )
.d7c5	20 b7 cb	jsr $cbb7			jsr Minus		; ( offset )
.d7c8	a9 fe		lda #$fe			lda #$fe
.d7ca	4c 4a ca	jmp $ca4a			jmp Minus_A
=11					CodeLen	.var *-XtPtr1
=$d7cd					Here1 = *	; remember here
>d7c0	0b					.byte CodeLen	;patch wh_CodeLength
>d7cd	44 69 73 41 73 6d		Name0:	.text "DisAsm"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=55123					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7d3	a6					.byte (("DisAsm"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>d7d4	10					.byte WordFlags	;wh_Flags
>d7d5	03					.byte 3	;wh_CodeLength
>d7d6	15					  .byte LinkDisplacement	; offset to previous nt
=$d7d7					XtPtr1 ::= *
=55123					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7d7					DisAsm:
.d7d7	20 72 c4	jsr $c472			jsr Bounds		; ( addr_end addr )
.d7da					_instr:
.d7da	20 31 b4	jsr $b431			jsr underflow_2
.d7dd	b5 24		lda $24,x			lda DStack+0,x		; addr >= addr_end?
.d7df	d5 26		cmp $26,x			cmp DStack+2,x
.d7e1	b5 25		lda $25,x			lda DStack+1,x
.d7e3	f5 27		sbc $27,x			sbc DStack+3,x
.d7e5	90 03		bcc $d7ea			bcc +
.d7e7	4c 36 c5	jmp $c536			jmp Two_drop		; discard parms & return
.d7ea					+
.d7ea	20 69 ab	jsr $ab69			jsr CR			; new line
.d7ed	20 56 cf	jsr $cf56			jsr Dup			; print address
.d7f0	20 09 a9	jsr $a909			jsr Dot_Hex
.d7f3	20 cc cd	jsr $cdcc			jsr Space
.d7f6	a1 24		lda ($24,x)			lda (DStack+0,x)	; print opcode byte
.d7f8	20 35 d9	jsr $d935			jsr _print_a
.d7fb	a1 24		lda ($24,x)			lda (DStack+0,x)	; save opcode
.d7fd	85 18		sta $18				sta tmp3
.d7ff	20 5a ca	jsr $ca5a			jsr One_plus
.d802	a9 12		lda #$12			lda #<asm_table		; for each asm opcode word
.d804	a0 d7		ldy #$d7			ldy #>asm_table
.d806	85 14		sta $14				sta tmp1+0
.d808	84 15		sty $15				sty tmp1+1
.d80a	d0 05		bne $d811			bne _WTest
.d80c	20 96 82	jsr $8296	_WNext:		jsr LinkNext		;   next entry
.d80f	f0 2b		beq $d83c			beq _unknown2
.d811	20 aa bd	jsr $bdaa	_WTest:		jsr NameToIntTmp	; tmp2= xt
.d814	a0 03		ldy #$03			ldy #3			;   opcode match?
.d816	b1 16		lda ($16),y			lda (tmp2),y
.d818	c5 18		cmp $18				cmp tmp3
.d81a	d0 f0		bne $d80c			bne _WNext
.d81c	a5 18		lda $18				lda tmp3		; save opcode
.d81e	48		pha				pha
.d81f	a5 15		lda $15				lda tmp1+1		; save its nt
.d821	48		pha				pha
.d822	a5 14		lda $14				lda tmp1+0
.d824	48		pha				pha
.d825	a0 01		ldy #$01			ldy #1			; get processor routine addr lo byte from JSR
.d827	b1 16		lda ($16),y			lda (tmp2),y
.d829	c9 0e		cmp #$0e			cmp #<asm_0		; goto disasm processor
.d82b	f0 1a		beq $d847			beq _c0
.d82d	c9 f3		cmp #$f3			cmp #<asm_1
.d82f	f0 4c		beq $d87d			beq _c1
.d831	c9 05		cmp #$05			cmp #<asm_2
.d833	f0 64		beq $d899			beq _c2
.d835	c9 d3		cmp #$d3			cmp #<asm_r
.d837	f0 1b		beq $d854			beq _cr
.d839					_unknown:
.d839	68		pla				pla			; RDrop nt
.d83a	68		pla				pla
.d83b	68		pla				pla			; RDrop opcode
.d83c	20 16 d9	jsr $d916	_unknown2:	jsr _tab		; to source area
.d83f	a9 3f		lda #$3f			lda #'?'
.d841	20 c0 cd	jsr $cdc0			jsr Emit_A
.d844	4c da d7	jmp $d7da			jmp _instr
.d847					_c0:
.d847	20 16 d9	jsr $d916			jsr _tab		; to source area
.d84a	68		pla				pla			; get opcode word nt
.d84b	a8		tay				tay
.d84c	68		pla				pla
.d84d	20 1b d9	jsr $d91b			jsr _print_opcode
.d850	68		pla				pla			; discard opcode
.d851	4c da d7	jmp $d7da			jmp _instr
.d854					_cr:
.d854	20 2c d9	jsr $d92c			jsr _get_byte		; get displacement byte
.d857	a0 00		ldy #$00			ldy #0			; sign extend displacement
.d859	09 00		ora #$00			ora #0
.d85b	10 01		bpl $d85e			bpl +
.d85d	88		dey				dey
.d85e	20 b3 b7	jsr $b7b3	+		jsr PushYA
.d861	20 56 cf	jsr $cf56			jsr Dup			; save for TypeSymbol
.d864	20 16 d9	jsr $d916			jsr _tab		; to source area
.d867	20 cf cb	jsr $cbcf			jsr Dot			; print dest address
.d86a	68		pla				pla			; get opcode word nt
.d86b	a8		tay				tay
.d86c	68		pla				pla
.d86d	20 1b d9	jsr $d91b			jsr _print_opcode
.d870	68		pla				pla			; discard opcode
.d871	20 2f cf	jsr $cf2f			jsr Over		; calc dest addr
.d874	20 9f cb	jsr $cb9f			jsr Plus
.d877	20 99 81	jsr $8199			jsr TypeSymbol		; print dest addr symbolic
.d87a	4c da d7	jmp $d7da			jmp _instr
.d87d					_c1:
.d87d	20 2c d9	jsr $d92c			jsr _get_byte		; get operand
.d880	20 e2 b7	jsr $b7e2			jsr PushZA
.d883	20 16 d9	jsr $d916			jsr _tab		; to source area
.d886	20 56 cf	jsr $cf56			jsr Dup
.d889	20 00 cc	jsr $cc00			jsr U_Dot		; print operand
.d88c	68		pla				pla			; get opcode word nt
.d88d	a8		tay				tay
.d88e	68		pla				pla
.d88f	20 1b d9	jsr $d91b			jsr _print_opcode
.d892	68		pla				pla			; discard opcode
.d893	20 99 81	jsr $8199			jsr TypeSymbol
.d896	4c da d7	jmp $d7da			jmp _instr
.d899					_c2:
.d899	20 2c d9	jsr $d92c			jsr _get_byte		; get operand lo byte
.d89c	48		pha				pha
.d89d	20 2c d9	jsr $d92c			jsr _get_byte		; get operand hi byte
.d8a0	ca		dex				dex			; push operand bytes
.d8a1	ca		dex				dex
.d8a2	95 25		sta $25,x			sta DStack+1,x
.d8a4	68		pla				pla
.d8a5	95 24		sta $24,x			sta DStack+0,x
.d8a7	20 16 d9	jsr $d916			jsr _tab		; to source area
.d8aa	20 56 cf	jsr $cf56			jsr Dup
.d8ad	20 00 cc	jsr $cc00			jsr U_Dot		; print operand
.d8b0	68		pla				pla			; AY= opcode word nt
.d8b1	a8		tay				tay
.d8b2	68		pla				pla
.d8b3	20 1b d9	jsr $d91b			jsr _print_opcode
.d8b6	20 56 cf	jsr $cf56			jsr Dup
.d8b9	20 99 81	jsr $8199			jsr TypeSymbol		; print operand as symbol
.d8bc	68		pla				pla			; get opcode
.d8bd	c9 20		cmp #$20			cmp #$20		;  JSR
.d8bf	f0 09		beq $d8ca			beq _jsr
.d8c1	e8		inx		_jdrop:		inx			; Drop operand
.d8c2	e8		inx				inx
.d8c3	4c da d7	jmp $d7da			jmp _instr		; ( addr_end addr )
.d8c6	e8		inx		_2drop:		inx			; Drop jsr_nt
.d8c7	e8		inx				inx
.d8c8	d0 f7		bne $d8c1			bne _jdrop
.d8ca					_jsr:
.d8ca	20 f4 b3	jsr $b3f4			jsr PopYA		; pop JSR operand
.d8cd	c9 a7		cmp #$a7			cmp #<sliteral_runtime	; string literal?
.d8cf	d0 42		bne $d913			bne _not_sliteral
.d8d1	c0 b8		cpy #$b8			cpy #>sliteral_runtime
.d8d3	d0 3e		bne $d913			bne _not_sliteral
.d8d5	20 69 ab	jsr $ab69			jsr CR
.d8d8	20 56 cf	jsr $cf56			jsr Dup			; ( addr_end addr addr )
.d8db	20 09 a9	jsr $a909			jsr Dot_Hex
.d8de	20 cc cd	jsr $cdcc			jsr Space
.d8e1	20 56 cf	jsr $cf56			jsr Dup			; ( addr_end ? addr )
.d8e4	20 2c d9	jsr $d92c			jsr _get_byte		; get JMP opcode
.d8e7	20 2c d9	jsr $d92c			jsr _get_byte		; get JMP addr lo byte
.d8ea	95 26		sta $26,x			sta DStack+2,x
.d8ec	20 2c d9	jsr $d92c			jsr _get_byte		; get JMP addr hi byte
.d8ef	95 27		sta $27,x			sta DStack+3,x		; ( addr_end string_end addr )
.d8f1	20 69 ab	jsr $ab69			jsr CR
.d8f4	20 56 cf	jsr $cf56			jsr Dup
.d8f7	20 09 a9	jsr $a909			jsr Dot_Hex
.d8fa	20 cc cd	jsr $cdcc			jsr Space
.d8fd	b5 24		lda $24,x	_slit_11:	lda DStack+0,x		; done with string data?
.d8ff	d5 26		cmp $26,x			cmp DStack+2,x
.d901	b5 25		lda $25,x			lda DStack+1,x
.d903	f5 27		sbc $27,x			sbc DStack+3,x
.d905	b0 06		bcs $d90d			bcs _slit_19
.d907	20 2c d9	jsr $d92c			jsr _get_byte
.d90a	4c fd d8	jmp $d8fd			jmp _slit_11
.d90d					_slit_19:
.d90d	20 90 c9	jsr $c990			jsr Nip			; ( addr_end addr )
.d910	4c da d7	jmp $d7da			jmp _instr
.d913					_not_sliteral:
.d913	4c da d7	jmp $d7da			jmp _instr
.d916					_tab:
.d916	a9 09		lda #$09			lda #9
.d918	4c c0 cd	jmp $cdc0			jmp Emit_A
.d91b					_print_opcode:
.d91b	20 64 cf	jsr $cf64			jsr PushAY		; save opcode word nt
.d91e	20 cc cd	jsr $cdcc			jsr Space
.d921	20 e6 bd	jsr $bde6			jsr Name_To_String	; get name string
.d924	4c d8 cd	jmp $cdd8			jmp Type		; type word name
.d927					_get_byte_silent:
.d927	a1 24		lda ($24,x)			lda (DStack+0,x)
.d929	4c 5a ca	jmp $ca5a			jmp One_plus
.d92c					_get_byte:
.d92c	20 27 d9	jsr $d927			jsr _get_byte_silent
.d92f	48		pha				pha
.d930	20 35 d9	jsr $d935			jsr _print_a
.d933	68		pla				pla
.d934	60		rts				rts
.d935					_print_a:
.d935	20 e2 b7	jsr $b7e2			jsr PushZA
.d938	20 e8 a8	jsr $a8e8			jsr C_Dot_Hex
.d93b	4c cc cd	jmp $cdcc			jmp Space
=55123					assembler_dictionary_start = WordListLink ; END of ASSEMBLER-WORDLIST
=0					WordListLink .var 0	; start wordlist
>d93e	6c				Name0:	.text "l"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=55487					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d93f	81					.byte (("l"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=55487					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>d940	11					.byte WordFlags	;wh_Flags
>d941	03					.byte 3	;wh_CodeLength
>d942	00 00					  .word WordListLink
=$d944					XtPtr1 ::= *
=55487					WordListLink ::= Nt0 ; remember the nt of this word for later
.d944	4c c1 a4	jmp $a4c1	Editor_l:	jmp ListScr
=3					CodeLen	.var *-XtPtr1
=$d947					Here1 = *	; remember here
>d941	03					.byte CodeLen	;patch wh_CodeLength
.d947					Editor_Screen_Helper:
.d947	20 56 cf	jsr $cf56			jsr Dup
.d94a	20 d3 a2	jsr $a2d3			jsr Scr
.d94d	20 b1 ce	jsr $ceb1			jsr Store
.d950	4c de a3	jmp $a3de			jmp Buffer
>d953	65 6e 74 65 72 2d 73 63		Name0:	.text "enter-screen"	;  name of word as a string, ending at wh_NameLastChar
>d95b	72 65 65 6e
=12					NameLength = *-Name0
=55519					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d95f	cc					.byte (("enter-screen"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>d960	10					.byte WordFlags	;wh_Flags
>d961	03					.byte 3	;wh_CodeLength
>d962	20					  .byte LinkDisplacement	; offset to previous nt
=$d963					XtPtr1 ::= *
=55519					WordListLink ::= Nt0 ; remember the nt of this word for later
.d963					Editor_Enter_Screen:
.d963	20 47 d9	jsr $d947			jsr Editor_Screen_Helper
.d966	a9 00		lda #$00			lda #0			; Overwrite the lines one at a time.
.d968	95 24		sta $24,x	_loop:		sta DStack+0,x
.d96a	20 e2 b7	jsr $b7e2			jsr PushZA		; Put the current line number on the stack.
.d96d	20 cd d9	jsr $d9cd			jsr Editor_o		; prompt for overwrite.
.d970	f6 24		inc $24,x			inc DStack+0,x		; Move on to the next line.
.d972	b5 24		lda $24,x			lda DStack+0,x
.d974	c9 10		cmp #$10			cmp #16
.d976	90 f0		bcc $d968			bcc _loop
.d978	e8		inx				inx			; Drop work area
.d979	e8		inx				inx
=23					CodeLen	.var *-XtPtr1
=$d97a					Here1 = *	; remember here
>d961	17					.byte CodeLen	;patch wh_CodeLength
.d97a	60		rts				rts
>d97b	6c 69 6e 65			Name0:	.text "line"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=55551					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d97f	a4					.byte (("line"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>d980	10					.byte WordFlags	;wh_Flags
>d981	03					.byte 3	;wh_CodeLength
>d982	20					  .byte LinkDisplacement	; offset to previous nt
=$d983					XtPtr1 ::= *
=55551					WordListLink ::= Nt0 ; remember the nt of this word for later
.d983					Editor_line:
.d983	a9 06		lda #$06			lda #6		; Multiply the TOS by 64 (chars/line) to compute offset.
.d985	20 42 cb	jsr $cb42			jsr LShift_A	; *64 is same as left shift 6 times.
.d988	20 d3 a2	jsr $a2d3			jsr Scr
.d98b	20 98 ce	jsr $ce98			jsr Fetch
.d98e	20 76 a3	jsr $a376			jsr Block
.d991	4c 9f cb	jmp $cb9f			jmp Plus
=17					CodeLen	.var *-XtPtr1
=$d994					Here1 = *	; remember here
>d981	11					.byte CodeLen	;patch wh_CodeLength
>d994	65 72 61 73 65 2d 73 63		Name0:	.text "erase-screen"	;  name of word as a string, ending at wh_NameLastChar
>d99c	72 65 65 6e
=12					NameLength = *-Name0
=55584					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d9a0	cc					.byte (("erase-screen"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>d9a1	10					.byte WordFlags	;wh_Flags
>d9a2	03					.byte 3	;wh_CodeLength
>d9a3	21					  .byte LinkDisplacement	; offset to previous nt
=$d9a4					XtPtr1 ::= *
=55584					WordListLink ::= Nt0 ; remember the nt of this word for later
.d9a4					Editor_Erase_Screen:
.d9a4	20 47 d9	jsr $d947			jsr Editor_Screen_Helper
.d9a7	a9 00		lda #$00			lda #<1024
.d9a9	a0 04		ldy #$04			ldy #>1024
.d9ab	20 b3 b7	jsr $b7b3			jsr PushYA
.d9ae	20 2d be	jsr $be2d			jsr Blank		; Erase the entire block (fill with spaces).
.d9b1	4c cb a3	jmp $a3cb			jmp Update		; Mark buffer as updated.
=16					CodeLen	.var *-XtPtr1
=$d9b4					Here1 = *	; remember here
>d9a2	10					.byte CodeLen	;patch wh_CodeLength
>d9b4	65 6c				Name0:	.text "el"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=55606					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d9b6	82					.byte (("el"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>d9b7	10					.byte WordFlags	;wh_Flags
>d9b8	03					.byte 3	;wh_CodeLength
>d9b9	16					  .byte LinkDisplacement	; offset to previous nt
=$d9ba					XtPtr1 ::= *
=55606					WordListLink ::= Nt0 ; remember the nt of this word for later
.d9ba					Editor_el:
.d9ba	20 83 d9	jsr $d983			jsr Editor_line
.d9bd	a9 40		lda #$40			lda #64			;(# of chars/line)
.d9bf	20 e2 b7	jsr $b7e2			jsr PushZA
.d9c2	20 2d be	jsr $be2d			jsr Blank		; Fill with spaces.
.d9c5	4c cb a3	jmp $a3cb			jmp Update		; Mark buffer as updated.
=14					CodeLen	.var *-XtPtr1
=$d9c8					Here1 = *	; remember here
>d9b8	0e					.byte CodeLen	;patch wh_CodeLength
>d9c8	6f				Name0:	.text "o"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=55625					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d9c9	e1					.byte (("o"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>d9ca	10					.byte WordFlags	;wh_Flags
>d9cb	03					.byte 3	;wh_CodeLength
>d9cc	13					  .byte LinkDisplacement	; offset to previous nt
=$d9cd					XtPtr1 ::= *
=55625					WordListLink ::= Nt0 ; remember the nt of this word for later
.d9cd					Editor_o:
.d9cd	20 69 ab	jsr $ab69			jsr CR
.d9d0	20 56 cf	jsr $cf56			jsr Dup
.d9d3	a9 02		lda #$02			lda #2
.d9d5	20 32 cc	jsr $cc32			jsr U_Dot_R_A
.d9d8	20 cc cd	jsr $cdcc			jsr Space
.d9db	a9 2a		lda #$2a			lda #'*'
.d9dd	20 c0 cd	jsr $cdc0			jsr Emit_A
.d9e0	20 cc cd	jsr $cdcc			jsr Space
.d9e3	20 83 d9	jsr $d983			jsr Editor_line
.d9e6	20 56 cf	jsr $cf56			jsr Dup		; Save a copy of the line address for later.
.d9e9	a9 40		lda #$40			lda #64		; chars/line
.d9eb	20 e2 b7	jsr $b7e2			jsr PushZA
.d9ee	20 aa c2	jsr $c2aa			jsr Accept
.d9f1	20 56 cf	jsr $cf56			jsr Dup
.d9f4	20 76 ce	jsr $ce76			jsr Not_Rot
.d9f7	20 9f cb	jsr $cb9f			jsr Plus
.d9fa	a9 40		lda #$40			lda #64		; chars/line
.d9fc	20 e2 b7	jsr $b7e2			jsr PushZA
.d9ff	20 51 ce	jsr $ce51			jsr Rot
.da02	20 b7 cb	jsr $cbb7			jsr Minus
.da05	20 2d be	jsr $be2d			jsr Blank
.da08	4c cb a3	jmp $a3cb			jmp Update
=62					CodeLen	.var *-XtPtr1
=$da0b					Here1 = *	; remember here
>d9cb	3e					.byte CodeLen	;patch wh_CodeLength
=55625					editor_dictionary_start = WordListLink ; END of EDITOR-WORDLIST

;******  Processing file: platform/../strings.asm

>da0b	20 6f 6b 00			str_ok:         .text " ok", 0         ; note space at beginning
>da0f	20 63 6f 6d 70 69 6c 65		str_compiled:   .text " compiled", 0   ; note space at beginning
>da17	64 00
>da19	72 65 64 65 66 69 6e 65		str_redefined:  .text "redefined ", 0  ; note space at end
>da21	64 20 00
>da24	66 6c 61 67 73 3a 00		str_see_flags:  .text "flags:", 0
>da2b	6e 74 3a 20 24 00		str_see_nt:     .text "nt: $", 0
>da31	78 74 3a 20 24 00		str_see_xt:     .text "xt: $", 0
>da37	73 69 7a 65 3a 20 23 00		str_see_size:   .text "size: #", 0
.da3f					Exception_Text_List:
>da3f	ff 00					.text $100+err_Abort,0
>da41	fe 00					.text $100+err_AbortQuote,0
>da43	fd 53 74 61 63 6b 20 4f			.text $100+err_Stack_Overflow,"Stack Overflow",0
>da4b	76 65 72 66 6c 6f 77 00
>da53	fc 53 74 61 63 6b 20 55			.text $100+err_Stack_Underflow,"Stack Underflow",0
>da5b	6e 64 65 72 66 6c 6f 77 00
>da64	f9 64 6f 2d 6c 6f 6f 70			.text $100+err_DoLoop_TooDeep,"do-loops nested too deeply during execution",0
>da6c	73 20 6e 65 73 74 65 64 20 74 6f 6f 20 64 65 65
>da7c	70 6c 79 20 64 75 72 69 6e 67 20 65 78 65 63 75
>da8c	74 69 6f 6e 00
>da91	f6 44 69 76 69 64 65 20			.text $100+err_DivideBy0,"Divide by 0",0
>da99	62 79 20 30 00
>da9e	f5 6f 75 74 20 6f 66 20			.text $100+err_OutOfRange,"out of range",0
>daa6	72 61 6e 67 65 00
>daac	f4 61 72 67 75 6d 65 6e			.text $100+err_ArgTypeMismatch,"argument type mismatch",0
>dab4	74 20 74 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>dac4	f3 55 6e 64 65 66 69 6e			.text $100+err_UndefinedWord,"Undefined word",0
>dacc	65 64 20 77 6f 72 64 00
>dad4	f2 49 6e 74 65 72 70 72			.text $100+err_CompileOnly,"Interpreting a Compile-only word",0
>dadc	65 74 69 6e 67 20 61 20 43 6f 6d 70 69 6c 65 2d
>daec	6f 6e 6c 79 20 77 6f 72 64 00
>daf6	eb 75 6e 73 75 70 70 6f			.text $100+err_Unsupported,"unsupported operation",0 ;  (e.g., AT-XY on a too-dumb terminal)
>dafe	72 74 65 64 20 6f 70 65 72 61 74 69 6f 6e 00
>db0d	ea 63 6f 6e 74 72 6f 6c			.text $100+err_ControlMismatch,"control structure mismatch",0
>db15	20 73 74 72 75 63 74 75 72 65 20 6d 69 73 6d 61
>db25	74 63 68 00
>db29	e0 69 6e 76 61 6c 69 64			.text $100+err_InvalidName,"invalid name",0 ; argument (e.g., TO name)
>db31	20 6e 61 6d 65 00
>db37	df 62 6c 6f 63 6b 20 72			.text $100+err_BlockRead,"block read",0
>db3f	65 61 64 00
>db43	de 62 6c 6f 63 6b 20 77			.text $100+err_BlockWrite,"block write",0
>db4b	72 69 74 65 00
>db50	d6 46 50 20 64 69 76 69			.text $100+err_FPDivideBy0,"FP divide by zero",0
>db58	64 65 20 62 79 20 7a 65 72 6f 00
>db63	d5 46 50 20 72 65 73 75			.text $100+err_FPOutOfRange,"FP result out of range",0
>db6b	6c 74 20 6f 75 74 20 6f 66 20 72 61 6e 67 65 00
>db7b	d4 46 50 20 73 74 61 63			.text $100+err_FPStackOverflow,"FP stack overflow",0
>db83	6b 20 6f 76 65 72 66 6c 6f 77 00
>db8e	d3 46 50 20 73 74 61 63			.text $100+err_FPStackUnderflow,"FP stack underflow",0
>db96	6b 20 75 6e 64 65 72 66 6c 6f 77 00
>dba2	d2 46 50 20 69 6e 76 61			.text $100+err_FPInvalidArg,"FP invalid argument",0
>dbaa	6c 69 64 20 61 72 67 75 6d 65 6e 74 00
>dbb7	ca 46 50 20 75 6e 64 65			.text $100+err_FPUnderflow,"FP underflow",0
>dbbf	72 66 6c 6f 77 00
>dbc5	c5 41 4c 4c 4f 43 41 54			.text $100+err_Allocate,"ALLOCATE",0
>dbcd	45 00
>dbcf	c4 46 52 45 45 00			.text $100+err_Free,"FREE",0
>dbd5	6b 52 65 66 69 6c 6c 00			.text $100+err_Refill,"Refill",0
>dbdd	6a 44 65 66 65 72 20 6e			.text $100+err_Defer,"Defer not set",0
>dbe5	6f 74 20 73 65 74 00
>dbec	69 41 6c 72 65 61 64 79			.text $100+err_AlreadyInterpreting,"Already interpreting",0
>dbf4	20 69 6e 74 65 72 70 72 65 74 69 6e 67 00
>dc02	68 41 6c 72 65 61 64 79			.text $100+err_AlreadyCompiling,"Already compiling",0
>dc0a	20 63 6f 6d 70 69 6c 69 6e 67 00
>dc15	66 4e 6f 20 77 6f 72 64			.text $100+err_TooManyWordlists,"No wordlists available",0
>dc1d	6c 69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>dc2d	00					.text 0 ; end of list

;******  Return to file: platform/../taliforth.asm


;******  Return to file: platform/platform-65816S.asm

>0766					hist_buff: .fill 8*128	; Input History for ACCEPT
.0b66					cp0:
.f100					v_nmi:
.f100					v_reset:
.f100					v_irq:
.f100					kernel_init:
.f100	78		sei		                sei             ; Disable interrupts
.f101	a2 00		ldx #$00	                ldx #0
.f103	bd 35 f1	lda $f135,x	-               lda s_kernel_id,x
.f106	f0 06		beq $f10e	                beq _done
.f108	20 20 f1	jsr $f120	                jsr kernel_putc
.f10b	e8		inx		                inx
.f10c	d0 f5		bne $f103	                bne -
.f10e					_done:
.f10e	4c 4c 80	jmp $804c	                jmp Cold
.f111					kernel_getc:
.f111	ee 35 03	inc $0335	-		inc RndState+0	; randomize
>f114	22						.byte $22	; jsl GET_BYTE_FROM_PC
>f115	33 e0						.word $e033
>f117	00						.byte 0
.f118	b0 f7		bcs $f111			bcs -
.f11a	60		rts				rts
.f11b					kernel_havekey:
.f11b	a9 eb		lda #$eb			lda #$100+err_unsupported
.f11d	4c 79 b4	jmp $b479			jmp ThrowA
.f120					kernel_putc:
>f120	22				-		.byte $22	; jsl SEND_BYTE_TO_PC
>f121	63 e0						.word $e063
>f123	00						.byte 0
.f124	b0 fa		bcs $f120			bcs -
.f126	60		rts				rts
.f127					platform_bye:
.f127	00		brk #		                brk
.f128					platform_CCAt:
.f128	ca		dex				dex
.f129	ca		dex				dex
.f12a	ca		dex				dex
.f12b	ca		dex				dex
>f12c	02 f4 24					.byte $02,$F4,DStack ; cop $f4	get 65816s simulator cycle count in DStack,x
.f12f	60		rts				rts
.f130					Platform_Block_Read:
.f130					Platform_Block_Write:
.f130	a9 eb		lda #$eb			lda #$100+err_Unsupported
.f132	20 79 b4	jsr $b479			jsr ThrowA
.f135					s_kernel_id:
>f135	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 kernel for 65816s (31. May 2024)", AscCR,AscLF, 0
>f13d	74 68 20 32 20 6b 65 72 6e 65 6c 20 66 6f 72 20
>f14d	36 35 38 31 36 73 20 28 33 31 2e 20 4d 61 79 20
>f15d	32 30 32 34 29 0d 0a 00
>fffa	00 f1				.word v_nmi
>fffc	00 f1				.word v_reset
>fffe	00 f1				.word v_irq

;******  End of listing
