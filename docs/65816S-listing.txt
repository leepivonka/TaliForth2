
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/65816S-listing.txt --labels=docs/65816S-labelmap.txt --output TaliForth-65816S.bin platform/platform-65816S.asm
; Sun Jun 16 11:35:46 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-65816S.asm

=$0100					RStack = $0100	; begin of 6502 Return Stack
=$ff					rsp0      = $ff		; initial Return Stack Pointer (6502 stack)
=$8000					cp_end    = $8000	; Last RAM byte available for code
=84					PadOffset = 84	; offset from CP to PAD (holds number strings)
=79					MAX_LINE_LENGTH  = 79      ; output line size
=20					DDim = 20	; # of cells in data stack
=10					FDim = 10	; # of entries in floating-point stack
=8					DoStkDim = 8	; # of entries in Do stack
=["cr","lf"]				TALI_OPTION_CR_EOL := [ "cr", "lf" ]
=$ff					bsize     = $ff		; size of input/output buffers
>0200					buffer0: .fill bsize	; input buffer

;******  Processing file: platform/../taliforth.asm

=					TALI_OPTIONAL_WORDS := ["fp","fpe", "fpieee","fptrancendentals", "ed", "editor", "ramdrive", "block", "environment?", "assembler", "wordlist" ]
=-1					err_Abort		= -1
=-2					err_AbortQuote		= -2
=-3					err_Stack_Overflow	= -3
=-4					err_Stack_Underflow	= -4
=-5					err_Return_Stack_Overflow = -5
=-6					err_Return_Stack_Underflow = -6
=-7					err_DoLoop_TooDeep	= -7	; do-loops nested too deeply during execution
=-8					err_Dictionary_Overflow	= -8
=-9					err_InvalidMemoryAddr	= -9	; invalid memory address
=-10					err_DivideBy0		= -10	; division by zero
=-11					err_OutOfRange		= -11	; result out of range
=-12					err_ArgTypeMismatch	= -12	; argument type mismatch
=-13					err_UndefinedWord	= -13
=-14					err_CompileOnly		= -14	; interpreting a compile-only word
=-15					err_Forget		= -15	; invalid FORGET
=-16					err_EmptyName		= -16	; attempt to use zero-length string as a name
=-17					err_PicStringOverflow	= -17	; pictured numeric output string overflow
=-18					err_ParsedStringOverflow = -18	; parsed string overflow
=-19					err_NameTooLong		= -19	; definition name too long
=-20					err_WriteToRO		= -20	; write to a read-only location
=-21					err_Unsupported		= -21	; unsupported operation  (e.g., AT-XY on a too-dumb terminal)
=-22					err_ControlMismatch	= -22	; control structure mismatch
=-23					err_AddrAlignment	= -23	; address alignment exception
=-24					err_InvalidNumericArg	= -24	; invalid numeric argument
=-25					err_ReturnStackImbalance = -25	; return stack imbalance
=-26					err_LoopParmUnavailable = -26	; loop parameters unavailable
=-27					err_InvalidRecursion	= -27	; invalid recursion
=-28					err_UserInterrupt	= -28	; user interrupt
=-29					err_CompilerNesting	= -29	; compiler nesting
=-30					err_Obsolete		= -30	; obsolescent feature
=-31					err_NoBody		= -31	; >BODY used on non-CREATEd definition
=-32					err_InvalidName		= -32	; invalid name argument (e.g., TO name)
=-33					err_BlockRead		= -33	; block read exception
=-34					err_BlockWrite		= -34	; block write exception
=-35					err_InvalidBlock	= -35	; invalid block number
=-36					err_InvalidFilePosition = -36	; invalid file position
=-37					err_FileIO		= -37	; file I/O exception
=-38					err_FileMissing		= -38	; non-existent file
=-39					err_EndOfFile		= -39	; unexpected end of file
=-40					err_InvalidBase		= -40	; invalid BASE for floating point conversion
=-41					err_LossOfPrecision	= -41	; loss of precision
=-42					err_FPDivideBy0		= -42	; floating-point divide by zero
=-43					err_FPOutOfRange	= -43	; floating-point result out of range
=-44					err_FPStackOverflow	= -44	; floating-point stack overflow
=-45					err_FPStackUnderflow	= -45	; floating-point stack underflow
=-46					err_FPInvalidArg	= -46	; floating-point invalid argument
=-47					err_CompileWordsDeleted = -47	; compilation word list deleted
=-48					err_PostponeInvalid	= -48	; invalid POSTPONE
=-49					err_SearchOrderOverflow = -49	; search-order overflow
=-50					err_SearchOrderUnderflow = -50	; search-order underflow
=-51					err_CompileWordlistChanged = -51 ; compilation word list changed
=-52					err_ControlStackOverflow = -52	; control-flow stack overflow
=-53					err_ExceptionStackOverflow = -53 ; exception stack overflow
=-54					err_FPUnderflow		= -54	; floating-point underflow
=-55					err_FPFault		= -55	; floating-point unidentified fault
=-56					err_Quit		= -56	; QUIT
=-57					err_ConsoleIO		= -57	; exception in sending or receiving a character
=-58					err_BracketIf		= -58	; [IF], [ELSE], or [THEN] exception
=-59					err_Allocate		= -59	; ALLOCATE
=-60					err_Free		= -60	; FREE
=-61					err_Resize		= -61	; RESIZE
=-62					err_CloseFile		= -62	; CLOSE-FILE
=-63					err_CreateFile		= -63	; CREATE-FILE
=-64					err_DeleteFile		= -64	; DELETE-FILE
=-65					err_FilePosition	= -65	; FILE-POSITION
=-66					err_FileSize		= -66	; FILE-SIZE
=-67					err_FileStatus		= -67	; FILE-STATUS
=-68					err_FlushFile		= -68	; FLUSH-FILE
=-69					err_OpenFile		= -69	; OPEN-FILE
=-70					err_ReadFile		= -70	; READ-FILE
=-71					err_ReadLine		= -71	; READ-LINE
=-72					err_RenameFile		= -72	; RENAME-FILE
=-73					err_RepositionFile	= -73	; REPOSITION-FILE
=-74					err_ResizeFile		= -74	; RESIZE-FILE
=-75					err_WriteFile		= -75	; WRITE-FILE
=-76					err_WriteLine		= -76	; WRITE-LINE
=-77					err_MalformedXChar	= -77	; Malformed xchar
=-78					err_Substitute		= -78	; SUBSTITUTE
=-79					err_Replaces		= -79	; REPLACES
=-149					err_Refill		= -149	; Refill failed
=-150					err_Defer		= -150	; Defer not set
=-151					err_NotCompiling	= -151
=-152					err_AlreadyCompiling	= -152
=-153					err_BlockWordsNotSet	= -153
=-154					err_wordlist     	= -154
.0000					zp0:
>0000					cp:	.word ?		; Compiler Pointer (see HERE)
>0002					InSrc:	.word ?		; input Source for SOURCE-ID
>0004					Cib:	.word ?		; address of current input buffer
>0006					CibLen:	.word ?		; length of current input buffer
>0008					ToIn:	.word ?		; pointer to CIB (>IN in Forth)
>000a					state:	.word ?		; STATE: -1 compile, 0 interpret
>000c					status: .word ?		; internal status flags
>000e					WorkWord: .word ?	; nt or xt of word being compiled (see status)
>0010					dp:	.word ?		; Dictionary Pointer temp
>0012					DoIndex: .word ?	; current Do index
>0014					tmp1:	.word ?		; temporary storage
>0016					tmp2:	.word ?		; temporary storage
>0018					tmp3:	.word ?		; temporary storage
>001a					tmp4:	.word ?		; temporary storage (tmpdsp)
>001c					tmp5:	.word ?		; temporary storage (tmptos)
>001e					editor1: .word ?	; temporary for editors
>0020					editor2: .word ?	; temporary for editors
>0022					editor3: .word ?	; temporary for editors
>0024					DStack:	.fill DDim*2	; data stack
=40					DStack0 = *-DStack	;   initial Data Stack index value
.8000					Cold_zp_table:
>8000	66 0b					.word cp0		; cp
>8002	00 00					.word 0			; insrc (SOURCE-ID is 0 for keyboard)
>8004	00 02					.word buffer0		; cib
>8006	00 00					.word 0			; ciblen
>8008	00 00					.word 0			; toin
>800a	00 00					.word 0			; state (0 = interpret)
>800c	00 00					.word 0			; status
=14					Cold_zp_table_length = *-Cold_zp_table
.02ff					User0:
>02ff					PrecisionV: .byte ?	; # of decimal places for FP print
>0300					base:	.word ?		; number radix, default decimal
>0302					nc_limit: .word ?	; limit for Native Compile size
>0304					uf_strip: .word ?	; flag to strip underflow detection code
>0306					output:	.word ?		; vector for EMIT
>0308					input:	.word ?		; vector for KEY
>030a					HaveKey: .word ?	; vector for KEY?
>030c					BlkV:	.word ?		; BLK
>030e					ScrV:	.word ?		; SCR
>0310					CurrentV: .byte ?	; CURRENT (byte) (Compilation wordlist)
>0311					Num_WordlistsV: .byte ?	; #WORDLISTS (byte)
=12					max_wordlists = 12	; Maximum number of wordlists supported
>0312					WordlistsV: .fill 2*max_wordlists	; WORDLISTS (cells)
>032a					Num_OrderV: .byte ?	; #ORDER (byte)
>032b					Search_OrderV: .fill 9	; SEARCH-ORDER (bytes)
.0334					MarkEnd:
>0334					ToHold:	.byte ?		; index for formatted output
>0335					RndState: .dword ?	; random # state
=0					wid_Forth = 0
=1					wid_Editor = 1
=2					wid_Assembler = 2
=3					wid_Root = 3
.800e					Cold_user_table:
>800e	08					.byte 8			; PrecisionV
>800f	0a 00					.word 10		; base
>8011	08 00					.word 8			; nc-limit
>8013	00 00					.word 0			; uf_strip (off by default)
>8015	2b f0					.word kernel_putc	; output
>8017	21 f0					.word kernel_getc	; input
>8019	16 b3					.word Abort		; havekey
>801b	00 00					.word 0				; BLK
>801d	00 00					.word 0				; SCR
>801f	00					.byte 0				; CURRENT = FORTH-WORDLIST
>8020	04					.byte 4				; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>8021	20 ce					.word forth_dictionary_start	; FORTH-WORDLIST
>8023	5f d9					.word editor_dictionary_start	; EDITOR-WORDLIST
>8025	0b d7					.word assembler_dictionary_start ; ASSEMBLER-WORDLIST
>8027	64 ce					.word root_dictionary_start	; ROOT-WORDLIST
>8029	00 00 00 00 00 00 00 00			.word 0,0,0,0,0,0,0,0		; User wordlists
>8031	00 00 00 00 00 00 00 00
>8039	02					.byte 2				; #ORDER
>803a	00 02 00 00 00 00 00 00			.byte wid_Forth,wid_Assembler,0,0,0,0,0,0,0	; search-order
>8042	00
=53					Cold_user_table_length = *-Cold_user_table
=$03					AscCC   = $03	; break (CTRL-c)
=$07					AscBELL = $07	; bell sound
=$08					AscBS   = $08	; backspace
=$09					AscHT	= $09	; tab
=$0a					AscLF   = $0a	; line feed
=$0b					AScVT	= $0b	; vertical tab
=$0c					AscFF	= $0c	; form feed
=$0d					AscCR   = $0d	; carriage return
=$0e					AscCN   = $0e	; CTRL-n (used to recall next input history)
=$10					AscCP   = $10	; CTRL-p (used to recall previous input history)
=$1b					AscESC  = $1b	; escape
=$20					AscSP   = $20	; space
=$22					AscDQuote = $22	; double quote
=$5c					AscBackslash = $5c ; backslash
=$7f					AscDEL  = $7f	; delete (CTRL-h)
>0000							.fill $80 ; name, right justified
=127					wh_NameLastChar	= *-1	;last char of name
>0080					wh_NameLength:	.byte ?	;length of name
>0081					wh_WordListLink: .word ? ;link to nt of previous word in wordlist chain
>0083					wh_CodeLength:	.byte ?	;size of code (0xff = 255 or greater)
>0084					wh_Flags:	.byte ?	; created by adding the flags defined as:
=1					CO =   1 ; Compile Only
=2					AN =   2 ; Always Native Compile (may not be called by JSR)
=4					IM =   4 ; Immediate Word
=8					NN =   8 ; Never Native Compile (must always be called by JSR)
=$10					UF = $10 ; Includes strippable Underflow Check
=$40					R6 = $40 ; strip 6 bytes from begin & end when native compiling
.0085					wh_xt:
=0					WordListLink .var 0	 ; start of FORTH wordlist
>8043	43 6f 6c 64			L1:	.text "Cold"	;  name of word as a string, ending at wh_NameLastChar
>8047	04					.byte *-L1	;wh_NameLength	length of name
>8048	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>804a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>804b	08					.byte NN	;wh_Flags	dictionary flags
=32711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.804c					Cold:
.804c	d8		cld				cld
.804d	a2 ff		ldx #$ff			ldx #rsp0		; Initialize 6502 stack (Return Stack)
.804f	9a		txs				txs
.8050	a2 0d		ldx #$0d			ldx #Cold_zp_table_length-1
.8052					-
.8052	bd 00 80	lda $8000,x			lda Cold_zp_table,x
.8055	95 00		sta $00,x			sta zp0,x
.8057	ca		dex				dex
.8058	10 f8		bpl $8052			bpl -
.805a	a0 34		ldy #$34			ldy #Cold_user_table_length-1
.805c	b9 0e 80	lda $800e,y	-		lda Cold_user_table,y
.805f	99 ff 02	sta $02ff,y			sta User0,y
.8062	88		dey				dey
.8063	10 f7		bpl $805c			bpl -
.8065	20 36 b4	jsr $b436			jsr Empty_Stack
.8068	20 29 a1	jsr $a129			jsr BlockInit
.806b	20 7d aa	jsr $aa7d			jsr CR
.806e	a9 9c		lda #$9c			lda #<forth_words_start		; push start address
.8070	a0 80		ldy #$80			ldy #>forth_words_start
.8072	20 f8 b6	jsr $b6f8			jsr PushYA
.8075	a9 d2		lda #$d2			lda #<forth_words_len		; push length
.8077	a0 00		ldy #$00			ldy #>forth_words_len
.8079	20 f8 b6	jsr $b6f8			jsr PushYA
.807c	20 2c af	jsr $af2c			jsr Evaluate
.807f	a9 00		lda #$00			lda #0
.8081	8d 66 07	sta $0766			sta hist_buff
.8084	8d e6 07	sta $07e6			sta hist_buff+$80
.8087	8d 66 08	sta $0866			sta hist_buff+$100
.808a	8d e6 08	sta $08e6			sta hist_buff+$180
.808d	8d 66 09	sta $0966			sta hist_buff+$200
.8090	8d e6 09	sta $09e6			sta hist_buff+$280
.8093	8d 66 0a	sta $0a66			sta hist_buff+$300
.8096	8d e6 0a	sta $0ae6			sta hist_buff+$380
.8099	4c e7 b3	jmp $b3e7			jmp Abort_Core2	;Quit
=80					CL	.var *-(WordListLink+wh_Xt)
=$809c					en = *	; remember here
>804a	50					.byte CL	;wh_CodeLength
.809c					forth_words_start:
>809c	20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>80a4	61 6c 69 20 46 6f 72 74 68 20 32 20 72 65 6d 69
>80b4	78 20 66 6f 72 20 74 68 65 20 36 35 30 32 29 20
>80c4	63 72 20 2e 28 20 56 65 72 73 69 6f 6e 20 33 31
>80d4	2e 20 4d 61 79 20 32 30 32 34 20 29 20 63 72 20
>80e4	2e 28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31
>80f4	34 2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53
>8104	74 65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f
>8114	6c 77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c
>8124	69 20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20
>8134	77 69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20
>8144	4e 4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20
>8154	2e 28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f
>8164	20 65 78 69 74 29 20 63 72 20
=210					forth_words_len = *-forth_words_start
.816e					user_words_start:
>816e					.binary "user_words.asc"
=0					user_words_len = *-user_words_start
>816e	4e 6f 4f 70			L1:	.text "NoOp"	;  name of word as a string, ending at wh_NameLastChar
>8172	04					.byte *-L1	;wh_NameLength	length of name
>8173	c7 7f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8175	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8176	00					.byte 0	;wh_Flags	dictionary flags
=33010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8177	ea		nop				nop
=1					CL	.var *-(WordListLink+wh_Xt)
=$8178					en = *	; remember here
>8175	01					.byte CL	;wh_CodeLength
.8178	60		rts				rts
>8179	63 63 40			L1:	.text "cc@"	;  name of word as a string, ending at wh_NameLastChar
>817c	03					.byte *-L1	;wh_NameLength	length of name
>817d	f2 80					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>817f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8180	08					.byte NN	;wh_Flags	dictionary flags
=33020					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8181	4c 33 f0	jmp $f033	CCAt:		jmp platform_CCAt
=3					CL	.var *-(WordListLink+wh_Xt)
=$8184					en = *	; remember here
>817f	03					.byte CL	;wh_CodeLength
>8184	42 79 65			L1:	.text "Bye"	;  name of word as a string, ending at wh_NameLastChar
>8187	03					.byte *-L1	;wh_NameLength	length of name
>8188	fc 80					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>818a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>818b	08					.byte NN	;wh_Flags	dictionary flags
=33031					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.818c	4c 32 f0	jmp $f032	Bye:		jmp platform_bye
=3					CL	.var *-(WordListLink+wh_Xt)
=$818f					en = *	; remember here
>818a	03					.byte CL	;wh_CodeLength
>818f	54 79 70 65 53 79 6d 62		L1:	.text "TypeSymbol"	;  name of word as a string, ending at wh_NameLastChar
>8197	6f 6c
>8199	0a					.byte *-L1	;wh_NameLength	length of name
>819a	07 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>819c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>819d	08					.byte NN	;wh_Flags	dictionary flags
=33049					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.819e	20 5d b7	jsr $b75d	TypeSymbol:	jsr Two
.81a1	20 84 c3	jsr $c384			jsr Spaces
.81a4	a9 28		lda #$28			lda #'('
.81a6	20 d8 cc	jsr $ccd8			jsr Emit_A
.81a9	20 e5 cc	jsr $cce5			jsr Space
.81ac	20 6a ce	jsr $ce6a			jsr Dup
.81af	a9 24		lda #$24			lda #'$'
.81b1	20 d8 cc	jsr $ccd8			jsr Emit_A
.81b4	20 12 a8	jsr $a812			jsr Dot_Hex
.81b7	20 e5 cc	jsr $cce5			jsr Space
.81ba	20 e1 81	jsr $81e1			jsr DictSearchXt	; ( addr_end addr operand offset nt )
.81bd	20 38 bd	jsr $bd38			jsr Name_To_String	; Change nt into the name
.81c0	20 f2 cc	jsr $ccf2			jsr Type		; print it.
.81c3	20 e5 cc	jsr $cce5			jsr Space
.81c6	b5 24		lda $24,x			lda DStack+0,x		; if non-zero offset
.81c8	15 25		ora $25,x			ora DStack+1,x
.81ca	f0 0b		beq $81d7			beq +
.81cc	a9 2b		lda #$2b			lda #'+'		;   print offset
.81ce	20 d8 cc	jsr $ccd8			jsr Emit_A
.81d1	20 6a ce	jsr $ce6a			jsr Dup
.81d4	20 19 cb	jsr $cb19			jsr U_Dot
.81d7	e8		inx		+		inx
.81d8	e8		inx				inx
.81d9	a9 29		lda #$29			lda #')'
.81db	20 d8 cc	jsr $ccd8			jsr Emit_A
.81de	4c e5 cc	jmp $cce5			jmp Space
=67					CL	.var *-(WordListLink+wh_Xt)
=$81e1					en = *	; remember here
>819c	43					.byte CL	;wh_CodeLength
.81e1					DictSearchXt:
.81e1	ca		dex				dex
.81e2	ca		dex				dex
.81e3	20 41 ce	jsr $ce41			jsr Over
.81e6	a9 ff		lda #$ff			lda #$ff		; init best offset
.81e8	95 29		sta $29,x			sta DStack+5,x		; ( offset nt xt )
.81ea	a9 fe		lda #$fe			lda #$fe		; for each wordlist
.81ec	48		pha				pha
.81ed	68		pla		_ListNext:	pla
.81ee	18		clc				clc
.81ef	69 02		adc #$02			adc #2			; to next wordlist
.81f1	c9 18		cmp #$18			cmp #max_wordlists*2
.81f3	b0 10		bcs $8205			bcs _Done
.81f5	48		pha				pha
.81f6	a8		tay				tay
.81f7	b9 12 03	lda $0312,y			lda WordlistsV+0,y	; Get the DP for that wordlist.
.81fa	85 14		sta $14				sta tmp1+0
.81fc	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.81ff	85 15		sta $15				sta tmp1+1
.8201	d0 14		bne $8217			bne _WordTest
.8203	f0 e8		beq $81ed			beq _ListNext		;   empty list
.8205	e8		inx		_Done:		inx			; Drop xt
.8206	e8		inx				inx
.8207	60		rts				rts
.8208	a0 82		ldy #$82	_WordNext:	ldy #wh_WordListLink+1
.820a	b1 14		lda ($14),y			lda (tmp1),y
.820c	f0 df		beq $81ed			beq _ListNext		; end of Dictionary?
.820e	48		pha				pha
.820f	88		dey				dey
.8210	b1 14		lda ($14),y			lda (tmp1),y
.8212	85 14		sta $14				sta tmp1+0
.8214	68		pla				pla
.8215	85 15		sta $15				sta tmp1+1
.8217	18		clc		_WordTest:	clc			; tmp2 = xt of this word
.8218	a5 14		lda $14				lda tmp1+0
.821a	69 85		adc #$85			adc #wh_xt
.821c	85 16		sta $16				sta tmp2+0
.821e	a5 15		lda $15				lda tmp1+1
.8220	69 00		adc #$00			adc #0
.8222	85 17		sta $17				sta tmp2+1
.8224	38		sec				sec			; tmp2 = xt offset for this word
.8225	b5 24		lda $24,x			lda DStack+0,x
.8227	e5 16		sbc $16				sbc tmp2+0
.8229	85 16		sta $16				sta tmp2+0
.822b	b5 25		lda $25,x			lda DStack+1,x
.822d	e5 17		sbc $17				sbc tmp2+1
.822f	85 17		sta $17				sta tmp2+1
.8231	20 97 82	jsr $8297			jsr _test
.8234	a0 85		ldy #$85			ldy #wh_xt+0		; is this word a constant?
.8236	b1 14		lda ($14),y			lda (tmp1),y
.8238	c9 a0		cmp #$a0			cmp #$a0
.823a	f0 28		beq $8264			beq _PushYA
.823c	c9 a9		cmp #$a9			cmp #$a9
.823e	d0 c8		bne $8208			bne _WordNext
.8240	c8		iny		_PushZA:	iny			; get lda # operand
.8241	b5 24		lda $24,x			lda DStack+0,x
.8243	f1 14		sbc ($14),y			sbc (tmp1),y
.8245	85 16		sta $16				sta tmp2+0
.8247	b5 25		lda $25,x			lda DStack+1,x
.8249	e9 00		sbc #$00			sbc #0
.824b	85 17		sta $17				sta tmp2+1
.824d	c8		iny				iny			; check jmp opcode
.824e	b1 14		lda ($14),y			lda (tmp1),y
.8250	c9 4c		cmp #$4c			cmp #$4c
.8252	d0 b4		bne $8208			bne _WordNext
.8254	c8		iny				iny			; check jmp operand lo
.8255	b1 14		lda ($14),y			lda (tmp1),y
.8257	c9 3a		cmp #$3a			cmp #<PushZA
.8259	d0 ad		bne $8208			bne _WordNext
.825b	c8		iny				iny			; check jmp operand hi
.825c	b1 14		lda ($14),y			lda (tmp1),y
.825e	c9 b7		cmp #$b7			cmp #>PushZA
.8260	d0 a6		bne $8208			bne _WordNext
.8262	f0 2d		beq $8291			beq _KTest
.8264	a0 87		ldy #$87	_PushYA:	ldy #wh_xt+2		; check LDA # opcode
.8266	b1 14		lda ($14),y			lda (tmp1),y
.8268	c9 a9		cmp #$a9			cmp #$a9
.826a	d0 9c		bne $8208			bne _WordNext
.826c	c8		iny				iny			; get lda # operand
.826d	b5 24		lda $24,x			lda DStack+0,x
.826f	f1 14		sbc ($14),y			sbc (tmp1),y
.8271	85 16		sta $16				sta tmp2+0
.8273	a0 86		ldy #$86			ldy #wh_xt+1		; get LDY # operand
.8275	b5 25		lda $25,x			lda DStack+1,x
.8277	f1 14		sbc ($14),y			sbc (tmp1),y
.8279	85 17		sta $17				sta tmp2+1
.827b	a0 89		ldy #$89			ldy #wh_xt+4		; check JMP opcode
.827d	b1 14		lda ($14),y			lda (tmp1),y
.827f	c9 4c		cmp #$4c			cmp #$4c
.8281	d0 85		bne $8208			bne _WordNext
.8283	c8		iny				iny			; check JMP operand lo
.8284	b1 14		lda ($14),y			lda (tmp1),y
.8286	c9 f8		cmp #$f8			cmp #<PushYA
.8288	d0 0a		bne $8294			bne _WordNext3
.828a	c8		iny				iny			; check JMP operand hi
.828b	b1 14		lda ($14),y			lda (tmp1),y
.828d	c9 b6		cmp #$b6			cmp #>PushYA
.828f	d0 03		bne $8294			bne _WordNext3
.8291	20 97 82	jsr $8297	_KTest:		jsr _test
.8294	4c 08 82	jmp $8208	_WordNext3:	jmp _WordNext
.8297					_test:
.8297	a5 16		lda $16				lda tmp2+0		; this word have smaller offset?
.8299	d5 28		cmp $28,x			cmp DStack+4,x
.829b	a5 17		lda $17				lda tmp2+1
.829d	f5 29		sbc $29,x			sbc DStack+5,x
.829f	b0 10		bcs $82b1			bcs _trts
.82a1	a5 16		lda $16				lda tmp2+0		;   save this better offset
.82a3	a4 17		ldy $17				ldy tmp2+1
.82a5	95 28		sta $28,x			sta DStack+4,x
.82a7	94 29		sty $29,x			sty DStack+5,x
.82a9	a5 14		lda $14				lda tmp1+0		;   save this better nt
.82ab	a4 15		ldy $15				ldy tmp1+1
.82ad	95 26		sta $26,x			sta DStack+2,x
.82af	94 27		sty $27,x			sty DStack+3,x
.82b1	60		rts		_trts:		rts
>82b2	44 53 74 61 63 6b		L1:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
>82b8	06					.byte *-L1	;wh_NameLength	length of name
>82b9	19 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82bc	08					.byte NN	;wh_Flags	dictionary flags
=33336					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82bd	a9 24		lda #$24			lda #DStack
.82bf	4c 3a b7	jmp $b73a			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$82c2					en = *	; remember here
>82bb	05					.byte CL	;wh_CodeLength
>82c2	52 6e 64 53 74 61 74 65		L1:	.text "RndState"	;  name of word as a string, ending at wh_NameLastChar
>82ca	08					.byte *-L1	;wh_NameLength	length of name
>82cb	38 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82ce	08					.byte NN	;wh_Flags	dictionary flags
=33354					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82cf	a0 03		ldy #$03			ldy #>RndState
.82d1	a9 35		lda #$35			lda #<RndState
.82d3	4c f8 b6	jmp $b6f8			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$82d6					en = *	; remember here
>82cd	07					.byte CL	;wh_CodeLength
>82d6	52 61 6e 64			L1:	.text "Rand"	;  name of word as a string, ending at wh_NameLastChar
>82da	04					.byte *-L1	;wh_NameLength	length of name
>82db	4a 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82de	00					.byte 0	;wh_Flags	dictionary flags
=33370					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82df					Rand:
.82df	4e 36 03	lsr $0336			lsr RndState+1
.82e2	6e 35 03	ror $0335			ror RndState+0
.82e5	6e 38 03	ror $0338			ror RndState+3
.82e8	6e 37 03	ror $0337			ror RndState+2
.82eb	90 10		bcc $82fd			bcc _19			;  IfCs,
.82ed	ad 36 03	lda $0336			lda RndState+1
.82f0	49 d0		eor #$d0			eor #$d0
.82f2	8d 36 03	sta $0336			sta RndState+1
.82f5	ad 37 03	lda $0337			lda RndState+2
.82f8	49 01		eor #$01			eor #$01
.82fa	8d 37 03	sta $0337			sta RndState+2
.82fd					_19:
.82fd	ad 37 03	lda $0337			lda RndState+2
.8300	ac 38 03	ldy $0338			ldy RndState+3
=36					CL	.var *-(WordListLink+wh_Xt)
=$8303					en = *	; remember here
>82dd	24					.byte CL	;wh_CodeLength
.8303	60		rts				rts
>8304	52 61 6e 64 4d			L1:	.text "RandM"	;  name of word as a string, ending at wh_NameLastChar
>8309	05					.byte *-L1	;wh_NameLength	length of name
>830a	5a 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>830c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>830d	08					.byte NN	;wh_Flags	dictionary flags
=33417					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.830e	20 6a ce	jsr $ce6a	RandM:		jsr Dup		; ( umod umod )
.8311	20 df 82	jsr $82df			jsr Rand
.8314	4a		lsr a				lsr a		; make positive
.8315	95 27		sta $27,x			sta DStack+3,x
.8317	94 26		sty $26,x			sty DStack+2,x	; ( rand umod )
.8319	4c 9e ae	jmp $ae9e			jmp Mod
=14					CL	.var *-(WordListLink+wh_Xt)
=$831c					en = *	; remember here
>830c	0e					.byte CL	;wh_CodeLength
>004c					fp:	.byte ?		; floating-point stack index
>004d					FSExp:   .fill FDim	; FP stack exponent     array
>0057					FSMant0: .fill FDim	; FP stack mantissa MSB array
>0061					FSMant1: .fill FDim	; FP stack mantissa 2nd array
>006b					FSMant2: .fill FDim	; FP stack mantissa 3rd array
>0075					FSMant3: .fill FDim	; FP stack mantissa 4th array
>831c	46 50				L1:	.text "FP"	;  name of word as a string, ending at wh_NameLastChar
>831e	02					.byte *-L1	;wh_NameLength	length of name
>831f	89 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8321	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8322	08					.byte NN	;wh_Flags	dictionary flags
=33438					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8323	a9 4c		lda #$4c			lda #fp
.8325	4c 3a b7	jmp $b73a			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8328					en = *	; remember here
>8321	05					.byte CL	;wh_CodeLength
>8328	46 44 69 6d			L1:	.text "FDim"	;  name of word as a string, ending at wh_NameLastChar
>832c	04					.byte *-L1	;wh_NameLength	length of name
>832d	9e 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>832f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8330	08					.byte NN	;wh_Flags	dictionary flags
=33452					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8331	a9 0a		lda #$0a			lda #FDim
.8333	4c 3a b7	jmp $b73a			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8336					en = *	; remember here
>832f	05					.byte CL	;wh_CodeLength
>8336	46 53 45 78 70			L1:	.text "FSExp"	;  name of word as a string, ending at wh_NameLastChar
>833b	05					.byte *-L1	;wh_NameLength	length of name
>833c	ac 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>833e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>833f	08					.byte NN	;wh_Flags	dictionary flags
=33467					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8340	a9 4d		lda #$4d			lda #FSExp
.8342	4c 3a b7	jmp $b73a			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8345					en = *	; remember here
>833e	05					.byte CL	;wh_CodeLength
>8345	46 53 4d 61 6e 74 30		L1:	.text "FSMant0"	;  name of word as a string, ending at wh_NameLastChar
>834c	07					.byte *-L1	;wh_NameLength	length of name
>834d	bb 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>834f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8350	08					.byte NN	;wh_Flags	dictionary flags
=33484					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8351	a9 57		lda #$57			lda #FSMant0
.8353	4c 3a b7	jmp $b73a			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8356					en = *	; remember here
>834f	05					.byte CL	;wh_CodeLength
>8356	46 53 4d 61 6e 74 31		L1:	.text "FSMant1"	;  name of word as a string, ending at wh_NameLastChar
>835d	07					.byte *-L1	;wh_NameLength	length of name
>835e	cc 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8360	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8361	08					.byte NN	;wh_Flags	dictionary flags
=33501					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8362	a9 61		lda #$61			lda #FSMant1
.8364	4c 3a b7	jmp $b73a			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8367					en = *	; remember here
>8360	05					.byte CL	;wh_CodeLength
>8367	46 53 4d 61 6e 74 32		L1:	.text "FSMant2"	;  name of word as a string, ending at wh_NameLastChar
>836e	07					.byte *-L1	;wh_NameLength	length of name
>836f	dd 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8371	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8372	08					.byte NN	;wh_Flags	dictionary flags
=33518					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8373	a9 6b		lda #$6b			lda #FSMant2
.8375	4c 3a b7	jmp $b73a			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8378					en = *	; remember here
>8371	05					.byte CL	;wh_CodeLength
>8378	46 53 4d 61 6e 74 33		L1:	.text "FSMant3"	;  name of word as a string, ending at wh_NameLastChar
>837f	07					.byte *-L1	;wh_NameLength	length of name
>8380	ee 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8382	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8383	08					.byte NN	;wh_Flags	dictionary flags
=33535					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8384	a9 75		lda #$75			lda #FSMant3
.8386	4c 3a b7	jmp $b73a			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8389					en = *	; remember here
>8382	05					.byte CL	;wh_CodeLength
>8389	46 6c 6f 61 74 2b		L1:	.text "Float+"	;  name of word as a string, ending at wh_NameLastChar
>838f	06					.byte *-L1	;wh_NameLength	length of name
>8390	ff 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8392	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8393	08					.byte NN	;wh_Flags	dictionary flags
=33551					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8394	a9 05		lda #$05	FloatPlus:	lda #5
.8396	4c 0f c9	jmp $c90f			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$8399					en = *	; remember here
>8392	05					.byte CL	;wh_CodeLength
>8399	46 6c 6f 61 74 73		L1:	.text "Floats"	;  name of word as a string, ending at wh_NameLastChar
>839f	06					.byte *-L1	;wh_NameLength	length of name
>83a0	0f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83a3	08					.byte NN	;wh_Flags	dictionary flags
=33567					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83a4	a9 05		lda #$05	Floats:		lda #5
.83a6	20 3a b7	jsr $b73a			jsr PushZA
.83a9	4c ae ad	jmp $adae			jmp Star
=8					CL	.var *-(WordListLink+wh_Xt)
=$83ac					en = *	; remember here
>83a2	08					.byte CL	;wh_CodeLength
>83ac	50 72 65 63 69 73 69 6f		L1:	.text "Precision"	;  name of word as a string, ending at wh_NameLastChar
>83b4	6e
>83b5	09					.byte *-L1	;wh_NameLength	length of name
>83b6	1f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83b8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83b9	08					.byte NN	;wh_Flags	dictionary flags
=33589					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83ba	ad ff 02	lda $02ff	Precision:	lda PrecisionV
.83bd	4c 3a b7	jmp $b73a			jmp PushZA
=6					CL	.var *-(WordListLink+wh_Xt)
=$83c0					en = *	; remember here
>83b8	06					.byte CL	;wh_CodeLength
.83c0	60		rts				rts
>83c1	53 65 74 2d 50 72 65 63		L1:	.text "Set-Precision"	;  name of word as a string, ending at wh_NameLastChar
>83c9	69 73 69 6f 6e
>83ce	0d					.byte *-L1	;wh_NameLength	length of name
>83cf	35 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83d2	08					.byte NN	;wh_Flags	dictionary flags
=33614					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83d3	20 24 b3	jsr $b324			jsr PopA
.83d6	8d ff 02	sta $02ff			sta PrecisionV
=6					CL	.var *-(WordListLink+wh_Xt)
=$83d9					en = *	; remember here
>83d1	06					.byte CL	;wh_CodeLength
.83d9	60		rts				rts
>83da	46 44 72 6f 70			L1:	.text "FDrop"	;  name of word as a string, ending at wh_NameLastChar
>83df	05					.byte *-L1	;wh_NameLength	length of name
>83e0	4e 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83e3	00					.byte 0	;wh_Flags	dictionary flags
=33631					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83e4	e6 4c		inc $4c		FDrop:		inc fp
=2					CL	.var *-(WordListLink+wh_Xt)
=$83e6					en = *	; remember here
>83e2	02					.byte CL	;wh_CodeLength
.83e6	60		rts				rts
>83e7	46 32 44 72 6f 70		L1:	.text "F2Drop"	;  name of word as a string, ending at wh_NameLastChar
>83ed	06					.byte *-L1	;wh_NameLength	length of name
>83ee	5f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83f1	00					.byte 0	;wh_Flags	dictionary flags
=33645					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83f2	e6 4c		inc $4c		F2Drop:		inc fp
.83f4	e6 4c		inc $4c				inc fp
=4					CL	.var *-(WordListLink+wh_Xt)
=$83f6					en = *	; remember here
>83f0	04					.byte CL	;wh_CodeLength
.83f6	60		rts				rts
>83f7	46 44 65 70 74 68		L1:	.text "FDepth"	;  name of word as a string, ending at wh_NameLastChar
>83fd	06					.byte *-L1	;wh_NameLength	length of name
>83fe	6d 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8400	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8401	08					.byte NN	;wh_Flags	dictionary flags
=33661					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8402	a9 0a		lda #$0a	FDepth:		lda #FDim
.8404	38		sec				sec
.8405	e5 4c		sbc $4c				sbc fp
.8407	4c 3a b7	jmp $b73a			jmp PushZA
=8					CL	.var *-(WordListLink+wh_Xt)
=$840a					en = *	; remember here
>8400	08					.byte CL	;wh_CodeLength
>840a	46 41 6c 6c 6f 63 58		L1:	.text "FAllocX"	;  name of word as a string, ending at wh_NameLastChar
>8411	07					.byte *-L1	;wh_NameLength	length of name
>8412	7d 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8414	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8415	08					.byte NN	;wh_Flags	dictionary flags
=33681					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8416	86 14		stx $14		FAllocX:	stx tmp1+0	; save data stack index
.8418	a6 4c		ldx $4c				ldx fp		; X= floating point stack index
.841a	ca		dex				dex		; alloc FP stack entry
.841b	e0 0a		cpx #$0a			cpx #FDim	; overflow or underflow?
.841d	b0 03		bcs $8422			bcs _err
.841f	86 4c		stx $4c				stx fp
.8421	60		rts				rts		; return X= FP stack index
.8422	0a		asl a		_err:		asl a		; save sign bit
.8423	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.8425	6a		ror a				ror a		; restore sign bit
.8426	4c 98 b3	jmp $b398			jmp Throw_FPStack
=19					CL	.var *-(WordListLink+wh_Xt)
=$8429					en = *	; remember here
>8414	13					.byte CL	;wh_CodeLength
>8429	46 4d 61 78			L1:	.text "FMax"	;  name of word as a string, ending at wh_NameLastChar
>842d	04					.byte *-L1	;wh_NameLength	length of name
>842e	91 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8430	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8431	08					.byte NN	;wh_Flags	dictionary flags
=33709					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8432	20 20 86	jsr $8620	FMax:		jsr FCmpA
.8435	10 ad		bpl $83e4			bpl FDrop
.8437	30 19		bmi $8452			bmi FNip
=7					CL	.var *-(WordListLink+wh_Xt)
=$8439					en = *	; remember here
>8430	07					.byte CL	;wh_CodeLength
>8439	46 4d 69 6e			L1:	.text "FMin"	;  name of word as a string, ending at wh_NameLastChar
>843d	04					.byte *-L1	;wh_NameLength	length of name
>843e	ad 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8440	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8441	08					.byte NN	;wh_Flags	dictionary flags
=33725					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8442	20 20 86	jsr $8620	FMin:		jsr FCmpA
.8445	30 9d		bmi $83e4			bmi FDrop
.8447	10 09		bpl $8452			bpl FNip
=7					CL	.var *-(WordListLink+wh_Xt)
=$8449					en = *	; remember here
>8440	07					.byte CL	;wh_CodeLength
>8449	46 4e 69 70			L1:	.text "FNip"	;  name of word as a string, ending at wh_NameLastChar
>844d	04					.byte *-L1	;wh_NameLength	length of name
>844e	bd 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8450	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8451	00					.byte 0	;wh_Flags	dictionary flags
=33741					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8452	86 14		stx $14		FNip:		stx tmp1		; save data stack index
.8454	a6 4c		ldx $4c				ldx fp			; get FP stack index
.8456	b5 4d		lda $4d,x			lda FSExp+0,x		; copy exponent
.8458	95 4e		sta $4e,x			sta FSExp+1,x
.845a	b5 57		lda $57,x			lda FSMant0+0,x		; copy mantissa
.845c	95 58		sta $58,x			sta FSMant0+1,x
.845e	b5 61		lda $61,x			lda FSMant1+0,x
.8460	95 62		sta $62,x			sta FSMant1+1,x
.8462	b5 6b		lda $6b,x			lda FSMant2+0,x
.8464	95 6c		sta $6c,x			sta FSMant2+1,x
.8466	b5 75		lda $75,x			lda FSMant3+0,x
.8468	95 76		sta $76,x			sta FSMant3+1,x
.846a	e6 4c		inc $4c				inc fp			; FDrop
.846c	a6 14		ldx $14				ldx tmp1		; restore data stack index
=28					CL	.var *-(WordListLink+wh_Xt)
=$846e					en = *	; remember here
>8450	1c					.byte CL	;wh_CodeLength
.846e	60		rts				rts
>846f	46 44 75 70			L1:	.text "FDup"	;  name of word as a string, ending at wh_NameLastChar
>8473	04					.byte *-L1	;wh_NameLength	length of name
>8474	cd 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8476	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8477	00					.byte 0	;wh_Flags	dictionary flags
=33779					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8478	20 16 84	jsr $8416	FDup:		jsr FAllocX		; alloc FP stack entry
.847b	b5 4e		lda $4e,x			lda FSExp+1,x		; copy exponent
.847d	95 4d		sta $4d,x			sta FSExp+0,x
.847f	b5 58		lda $58,x			lda FSMant0+1,x		; copy mantissa
.8481	95 57		sta $57,x			sta FSMant0+0,x
.8483	b5 62		lda $62,x			lda FSMant1+1,x
.8485	95 61		sta $61,x			sta FSMant1+0,x
.8487	b5 6c		lda $6c,x			lda FSMant2+1,x
.8489	95 6b		sta $6b,x			sta FSMant2+0,x
.848b	b5 76		lda $76,x			lda FSMant3+1,x
.848d	95 75		sta $75,x			sta FSMant3+0,x
.848f	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CL	.var *-(WordListLink+wh_Xt)
=$8491					en = *	; remember here
>8476	19					.byte CL	;wh_CodeLength
.8491	60		rts				rts
>8492	46 4f 76 65 72			L1:	.text "FOver"	;  name of word as a string, ending at wh_NameLastChar
>8497	05					.byte *-L1	;wh_NameLength	length of name
>8498	f3 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>849a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>849b	00					.byte 0	;wh_Flags	dictionary flags
=33815					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.849c	20 16 84	jsr $8416	FOver:		jsr FAllocX		; alloc FP stack entry
.849f	b5 4f		lda $4f,x			lda FSExp+2,x		; copy exponent
.84a1	95 4d		sta $4d,x			sta FSExp+0,x
.84a3	b5 59		lda $59,x			lda FSMant0+2,x		; copy mantissa
.84a5	95 57		sta $57,x			sta FSMant0+0,x
.84a7	b5 63		lda $63,x			lda FSMant1+2,x
.84a9	95 61		sta $61,x			sta FSMant1+0,x
.84ab	b5 6d		lda $6d,x			lda FSMant2+2,x
.84ad	95 6b		sta $6b,x			sta FSMant2+0,x
.84af	b5 77		lda $77,x			lda FSMant3+2,x
.84b1	95 75		sta $75,x			sta FSMant3+0,x
.84b3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CL	.var *-(WordListLink+wh_Xt)
=$84b5					en = *	; remember here
>849a	19					.byte CL	;wh_CodeLength
.84b5	60		rts				rts
>84b6	46 50 69 63 6b			L1:	.text "FPick"	;  name of word as a string, ending at wh_NameLastChar
>84bb	05					.byte *-L1	;wh_NameLength	length of name
>84bc	17 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84bf	00					.byte 0	;wh_Flags	dictionary flags
=33851					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84c0	20 24 b3	jsr $b324	FPick:		jsr PopA		; pop u
.84c3	18		clc		FPickA:		clc
.84c4	65 4c		adc $4c				adc fp
.84c6	a8		tay		FPick3:		tay
.84c7	20 16 84	jsr $8416			jsr FAllocX
.84ca	b9 4d 00	lda $004d,y			lda FSExp,y		; copy exponent
.84cd	95 4d		sta $4d,x			sta FSExp,x
.84cf	b9 57 00	lda $0057,y			lda FSMant0,y		; copy mantissa
.84d2	95 57		sta $57,x			sta FSMant0,x
.84d4	b9 61 00	lda $0061,y			lda FSMant1,y
.84d7	95 61		sta $61,x			sta FSMant1,x
.84d9	b9 6b 00	lda $006b,y			lda FSMant2,y
.84dc	95 6b		sta $6b,x			sta FSMant2,x
.84de	b9 75 00	lda $0075,y			lda FSMant3,y
.84e1	95 75		sta $75,x			sta FSMant3,x
.84e3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=37					CL	.var *-(WordListLink+wh_Xt)
=$84e5					en = *	; remember here
>84be	25					.byte CL	;wh_CodeLength
.84e5	60		rts				rts
>84e6	46 32 44 75 70			L1:	.text "F2Dup"	;  name of word as a string, ending at wh_NameLastChar
>84eb	05					.byte *-L1	;wh_NameLength	length of name
>84ec	3b 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84ef	08					.byte NN	;wh_Flags	dictionary flags
=33899					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84f0	20 9c 84	jsr $849c	F2Dup:		jsr FOver
.84f3	4c 9c 84	jmp $849c			jmp FOver
=6					CL	.var *-(WordListLink+wh_Xt)
=$84f6					en = *	; remember here
>84ee	06					.byte CL	;wh_CodeLength
>84f6	46 53 77 61 70			L1:	.text "FSwap"	;  name of word as a string, ending at wh_NameLastChar
>84fb	05					.byte *-L1	;wh_NameLength	length of name
>84fc	6b 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84ff	00					.byte 0	;wh_Flags	dictionary flags
=33915					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8500	86 14		stx $14		FSwap:		stx tmp1		; save data stack index
.8502	a6 4c		ldx $4c				ldx fp			; X=FP stack index
.8504	b5 4d		lda $4d,x			lda FSExp+0,x		; do FSExp
.8506	b4 4e		ldy $4e,x			ldy FSExp+1,x
.8508	95 4e		sta $4e,x			sta FSExp+1,x
.850a	94 4d		sty $4d,x			sty FSExp+0,x
.850c	b5 57		lda $57,x			lda FSMant0+0,x		; do FSMant0
.850e	b4 58		ldy $58,x			ldy FSMant0+1,x
.8510	95 58		sta $58,x			sta FSMant0+1,x
.8512	94 57		sty $57,x			sty FSMant0+0,x
.8514	b5 61		lda $61,x			lda FSMant1+0,x		; do FSMant1
.8516	b4 62		ldy $62,x			ldy FSMant1+1,x
.8518	95 62		sta $62,x			sta FSMant1+1,x
.851a	94 61		sty $61,x			sty FSMant1+0,x
.851c	b5 6b		lda $6b,x			lda FSMant2+0,x		; do FSMant2
.851e	b4 6c		ldy $6c,x			ldy FSMant2+1,x
.8520	95 6c		sta $6c,x			sta FSMant2+1,x
.8522	94 6b		sty $6b,x			sty FSMant2+0,x
.8524	b5 75		lda $75,x			lda FSMant3+0,x		; do FSMant3
.8526	b4 76		ldy $76,x			ldy FSMant3+1,x
.8528	95 76		sta $76,x			sta FSMant3+1,x
.852a	94 75		sty $75,x			sty FSMant3+0,x
.852c	a6 14		ldx $14				ldx tmp1		; restore data stack index
=46					CL	.var *-(WordListLink+wh_Xt)
=$852e					en = *	; remember here
>84fe	2e					.byte CL	;wh_CodeLength
.852e	60		rts				rts
>852f	46 54 75 63 6b			L1:	.text "FTuck"	;  name of word as a string, ending at wh_NameLastChar
>8534	05					.byte *-L1	;wh_NameLength	length of name
>8535	7b 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8537	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8538	08					.byte NN	;wh_Flags	dictionary flags
=33972					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8539	20 00 85	jsr $8500	FTuck:		jsr FSwap
.853c	4c 9c 84	jmp $849c			jmp FOver
=6					CL	.var *-(WordListLink+wh_Xt)
=$853f					en = *	; remember here
>8537	06					.byte CL	;wh_CodeLength
>853f	46 52 6f 74			L1:	.text "FRot"	;  name of word as a string, ending at wh_NameLastChar
>8543	04					.byte *-L1	;wh_NameLength	length of name
>8544	b4 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8546	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8547	00					.byte 0	;wh_Flags	dictionary flags
=33987					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8548	86 14		stx $14		FRot:		stx tmp1		; save data stack index
.854a	a5 4c		lda $4c				lda fp			; for FSMant3, FSMant2, FSMant1, FSMant0, FSExp
.854c	18		clc				clc
.854d	69 28		adc #$28			adc #4*FDim
.854f	d0 03		bne $8554			bne _3
.8551	8a		txa		_2:		txa			;    next byte
.8552	e9 0a		sbc #$0a			sbc #FDim
.8554	aa		tax		_3:		tax
.8555	b5 4f		lda $4f,x			lda FSExp+2,x		;   do a byte
.8557	b4 4e		ldy $4e,x			ldy FSExp+1,x
.8559	94 4f		sty $4f,x			sty FSExp+2,x
.855b	b4 4d		ldy $4d,x			ldy FSExp+0,x
.855d	94 4e		sty $4e,x			sty FSExp+1,x
.855f	95 4d		sta $4d,x			sta FSExp+0,x
.8561	e4 4c		cpx $4c				cpx fp			; done?
.8563	d0 ec		bne $8551			bne _2
.8565	a6 14		ldx $14				ldx tmp1		; restore param stack index
=31					CL	.var *-(WordListLink+wh_Xt)
=$8567					en = *	; remember here
>8546	1f					.byte CL	;wh_CodeLength
.8567	60		rts				rts
>8568	46 2d 52 6f 74			L1:	.text "F-Rot"	;  name of word as a string, ending at wh_NameLastChar
>856d	05					.byte *-L1	;wh_NameLength	length of name
>856e	c3 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8570	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8571	08					.byte NN	;wh_Flags	dictionary flags
=34029					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8572	20 48 85	jsr $8548	FMRot:		jsr FRot
.8575	4c 48 85	jmp $8548			jmp FRot
=6					CL	.var *-(WordListLink+wh_Xt)
=$8578					en = *	; remember here
>8570	06					.byte CL	;wh_CodeLength
>8578	46 40				L1:	.text "F@"	;  name of word as a string, ending at wh_NameLastChar
>857a	02					.byte *-L1	;wh_NameLength	length of name
>857b	ed 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>857d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>857e	00					.byte 0	;wh_Flags	dictionary flags
=34042					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.857f	20 40 b3	jsr $b340	FAt:		jsr PopYA		; pop addr
.8582	85 16		sta $16		FAt_YA:		sta tmp2+0		; save addr
.8584	84 17		sty $17				sty tmp2+1
.8586	20 16 84	jsr $8416	FAt_Tmp2:	jsr FAllocX		; alloc FP stack entry
.8589	a0 00		ldy #$00			ldy #0			; copy mantissa
.858b	b1 16		lda ($16),y			lda (tmp2),y
.858d	95 75		sta $75,x			sta FSMant3,x
.858f	c8		iny				iny
.8590	b1 16		lda ($16),y			lda (tmp2),y
.8592	95 6b		sta $6b,x			sta FSMant2,x
.8594	c8		iny				iny
.8595	b1 16		lda ($16),y			lda (tmp2),y
.8597	95 61		sta $61,x			sta FSMant1,x
.8599	c8		iny				iny
.859a	b1 16		lda ($16),y			lda (tmp2),y
.859c	95 57		sta $57,x			sta FSMant0,x
.859e	c8		iny				iny			; copy exponent
.859f	b1 16		lda ($16),y			lda (tmp2),y
.85a1	95 4d		sta $4d,x			sta FSExp,x
.85a3	a6 14		ldx $14				ldx tmp1		; restore data stack index
=38					CL	.var *-(WordListLink+wh_Xt)
=$85a5					en = *	; remember here
>857d	26					.byte CL	;wh_CodeLength
.85a5	60		rts				rts
>85a6	46 21				L1:	.text "F!"	;  name of word as a string, ending at wh_NameLastChar
>85a8	02					.byte *-L1	;wh_NameLength	length of name
>85a9	fa 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85ac	00					.byte 0	;wh_Flags	dictionary flags
=34088					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85ad	20 40 b3	jsr $b340	FStore:		jsr PopYA		; pop addr
.85b0	85 14		sta $14		FStore_YA:	sta tmp1+0		; save addr
.85b2	84 15		sty $15				sty tmp1+1
.85b4	86 16		stx $16				stx tmp2		; save data stack index
.85b6	a6 4c		ldx $4c				ldx fp			; Y= FP stack index
.85b8	b5 75		lda $75,x			lda FSMant3,x		; copy mantissa
.85ba	a0 00		ldy #$00			ldy #0
.85bc	91 14		sta ($14),y			sta (tmp1),y
.85be	b5 6b		lda $6b,x			lda FSMant2,x
.85c0	c8		iny				iny
.85c1	91 14		sta ($14),y			sta (tmp1),y
.85c3	b5 61		lda $61,x			lda FSMant1,x
.85c5	c8		iny				iny
.85c6	91 14		sta ($14),y			sta (tmp1),y
.85c8	b5 57		lda $57,x			lda FSMant0,x
.85ca	c8		iny				iny
.85cb	91 14		sta ($14),y			sta (tmp1),y
.85cd	b5 4d		lda $4d,x			lda FSExp,x		; copy exponent
.85cf	c8		iny				iny
.85d0	91 14		sta ($14),y			sta (tmp1),y
.85d2	e6 4c		inc $4c				inc fp			; FDrop
.85d4	a6 16		ldx $16				ldx tmp2		; restore data stack index
=41					CL	.var *-(WordListLink+wh_Xt)
=$85d6					en = *	; remember here
>85ab	29					.byte CL	;wh_CodeLength
.85d6	60		rts				rts
>85d7	46 2c				L1:	.text "F,"	;  name of word as a string, ending at wh_NameLastChar
>85d9	02					.byte *-L1	;wh_NameLength	length of name
>85da	28 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85dd	08					.byte NN	;wh_Flags	dictionary flags
=34137					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85de	a5 00		lda $00		FComma:		lda cp+0
.85e0	a4 01		ldy $01				ldy cp+1
.85e2	20 b0 85	jsr $85b0			jsr FStore_YA
.85e5	a9 05		lda #$05			lda #5			; Float
.85e7	20 3a b7	jsr $b73a			jsr PushZA
.85ea	4c 08 c0	jmp $c008			jmp Allot
=15					CL	.var *-(WordListLink+wh_Xt)
=$85ed					en = *	; remember here
>85dc	0f					.byte CL	;wh_CodeLength
>85ed	46 30 21			L1:	.text "F0!"	;  name of word as a string, ending at wh_NameLastChar
>85f0	03					.byte *-L1	;wh_NameLength	length of name
>85f1	59 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85f4	08					.byte NN	;wh_Flags	dictionary flags
=34160					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85f5	20 40 b3	jsr $b340	FZStore:	jsr PopYA		; pop addr
.85f8	85 14		sta $14		FZStore_YA:	sta tmp1+0
.85fa	84 15		sty $15				sty tmp1+1
.85fc	a9 00		lda #$00			lda #0
.85fe	a0 04		ldy #$04			ldy #5-1
.8600	91 14		sta ($14),y	-		sta (tmp1),y
.8602	88		dey				dey
.8603	10 fb		bpl $8600			bpl -
=16					CL	.var *-(WordListLink+wh_Xt)
=$8605					en = *	; remember here
>85f3	10					.byte CL	;wh_CodeLength
.8605	60		rts				rts
>8606	46 43 6d 70			L1:	.text "FCmp"	;  name of word as a string, ending at wh_NameLastChar
>860a	04					.byte *-L1	;wh_NameLength	length of name
>860b	70 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>860d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>860e	08					.byte NN	;wh_Flags	dictionary flags
=34186					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.860f	20 20 86	jsr $8620			jsr FCmpA		; compare #s
.8612	a8		tay				tay			; return >0, 0, <0
.8613	4c f8 b6	jmp $b6f8			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$8616					en = *	; remember here
>860d	07					.byte CL	;wh_CodeLength
>8616	46 43 6d 70 41			L1:	.text "FCmpA"	;  name of word as a string, ending at wh_NameLastChar
>861b	05					.byte *-L1	;wh_NameLength	length of name
>861c	8a 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>861e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>861f	08					.byte NN	;wh_Flags	dictionary flags
=34203					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8620	86 14		stx $14		FCmpA:		stx tmp1		; save data stack index
.8622	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.8624	b5 57		lda $57,x			lda FSMant0+0,x		; r2 mantissa = 0 ?
.8626	f0 35		beq $865d			beq _r2Zero
.8628	b4 58		ldy $58,x			ldy FSMant0+1,x		; r1 mantissa = 0 ?
.862a	f0 2b		beq $8657			beq _r1Zero
.862c	55 58		eor $58,x			eor FSMant0+1,x		; compare mantissa sign
.862e	30 3d		bmi $866d			bmi _MantissaSignDifferent
.8630	38		sec				sec			; compare exponent
.8631	b5 4e		lda $4e,x			lda FSExp+1,x
.8633	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8635	d0 2b		bne $8662			bne _ExponentDifferent
.8637	98		tya				tya			; compare mantissa MSB
.8638	f5 57		sbc $57,x			sbc FSMant0+0,x		;   always same sign so can't overflow
.863a	d0 17		bne $8653			bne _13
.863c	b5 62		lda $62,x			lda FSMant1+1,x		; compare mantissa 1
.863e	f5 61		sbc $61,x			sbc FSMant1+0,x
.8640	d0 0c		bne $864e			bne _12
.8642	b5 6c		lda $6c,x			lda FSMant2+1,x		; compare mantissa 2
.8644	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8646	d0 06		bne $864e			bne _12
.8648	b5 76		lda $76,x			lda FSMant3+1,x		; compare mantissa LSB
.864a	f5 75		sbc $75,x			sbc FSMant3+0,x
.864c	f0 05		beq $8653			beq _13
.864e	6a		ror a		_12:		ror a
.864f	49 80		eor #$80	_14:		eor #$80
.8651	09 01		ora #$01			ora #1
.8653	a6 14		ldx $14		_13:		ldx tmp1		; restore data stack index
.8655	a8		tay				tay			; set CPU flags
.8656	60		rts				rts
.8657	b5 57		lda $57,x	_r1Zero:	lda FSMant0+0,x		; return r2
.8659	d0 f4		bne $864f			bne _14
.865b	f0 f6		beq $8653			beq _13
.865d	b5 58		lda $58,x	_r2Zero:	lda FSMant0+1,x		; return 0-r1
.865f	4c 53 86	jmp $8653			jmp _13
.8662					_ExponentDifferent:
.8662	50 02		bvc $8666			bvc +
.8664	49 80		eor #$80			eor #$80
.8666					+
.8666	55 57		eor $57,x			eor FSMant0+0,x
.8668	a6 14		ldx $14				ldx tmp1		; restore data stack index
.866a	09 01		ora #$01			ora #1			; set CPU flags
.866c	60		rts				rts
.866d					_MantissaSignDifferent:
.866d	98		tya				tya
.866e	a6 14		ldx $14				ldx tmp1		; restore data stack index
.8670	09 01		ora #$01			ora #1
.8672	60		rts				rts
=83					CL	.var *-(WordListLink+wh_Xt)
=$8673					en = *	; remember here
>861e	53					.byte CL	;wh_CodeLength
>8673	46 6c 6f 6f 72			L1:	.text "Floor"	;  name of word as a string, ending at wh_NameLastChar
>8678	05					.byte *-L1	;wh_NameLength	length of name
>8679	9b 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>867b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>867c	08					.byte NN	;wh_Flags	dictionary flags
=34296					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.867d	a4 4c		ldy $4c		Floor:		ldy fp
.867f	b9 57 00	lda $0057,y			lda FSMant0,y		; negative?
.8682	10 19		bpl $869d			bpl _a
.8684	b9 4d 00	lda $004d,y			lda FSExp,y		; > -1 ?
.8687	10 14		bpl $869d			bpl _a
.8689	a9 80		lda #$80			lda #$80		; return -1
.868b	99 57 00	sta $0057,y			sta FSMant0,y
.868e	a9 00		lda #$00			lda #0
.8690	99 4d 00	sta $004d,y			sta FSExp,y
.8693	99 61 00	sta $0061,y			sta FSMant1,y
.8696	99 6b 00	sta $006b,y			sta FSMant2,y
.8699	99 75 00	sta $0075,y			sta FSMant3,y
.869c	60		rts				rts
.869d	a9 1f		lda #$1f	_a:		lda #31
.869f	20 a5 86	jsr $86a5			jsr FIntAlignA
.86a2	4c a0 8a	jmp $8aa0			jmp FNorm
=40					CL	.var *-(WordListLink+wh_Xt)
=$86a5					en = *	; remember here
>867b	28					.byte CL	;wh_CodeLength
.86a5					FIntAlignA:
.86a5	85 16		sta $16				sta tmp2+0		; save alignment
.86a7	46 15		lsr $15				lsr tmp1+1		; init saved lo bit
.86a9	86 14		stx $14				stx tmp1+0		; save data stack index
.86ab	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.86ad	b5 57		lda $57,x			lda FSMant0,x
.86af	b4 4d		ldy $4d,x			ldy FSExp,x
.86b1	10 18		bpl $86cb			bpl _18
.86b3	a4 16		ldy $16				ldy tmp2+0		; return zero
.86b5	a9 00		lda #$00			lda #0
.86b7	95 61		sta $61,x			sta FSMant1,x
.86b9	95 6b		sta $6b,x			sta FSMant2,x
.86bb	95 75		sta $75,x			sta FSMant3,x
.86bd	f0 10		beq $86cf			beq _30
.86bf	c8		iny		_12:		iny			; exp += 1
.86c0	c9 80		cmp #$80			cmp #$80		; mantissa >>=1
.86c2	6a		ror a				ror a
.86c3	76 61		ror $61,x			ror FSMant1,x
.86c5	76 6b		ror $6b,x			ror FSMant2,x
.86c7	76 75		ror $75,x			ror FSMant3,x
.86c9	66 15		ror $15				ror tmp1+1		; save lo bit
.86cb	c4 16		cpy $16		_18:		cpy tmp2+0		; while exp<alignment
.86cd	90 f0		bcc $86bf			bcc _12
.86cf	95 57		sta $57,x	_30:		sta FSMant0,x
.86d1	94 4d		sty $4d,x			sty FSExp,x
.86d3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.86d5	06 15		asl $15				asl tmp1+1		; set carry bit
.86d7	60		rts				rts
>86d8	46 54 72 75 6e 63		L1:	.text "FTrunc"	;  name of word as a string, ending at wh_NameLastChar
>86de	06					.byte *-L1	;wh_NameLength	length of name
>86df	f8 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86e2	08					.byte NN	;wh_Flags	dictionary flags
=34398					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86e3	a4 4c		ldy $4c		FTrunc:		ldy fp
.86e5	b9 57 00	lda $0057,y			lda FSMant0,y
.86e8	10 93		bpl $867d			bpl Floor
.86ea	20 a2 8b	jsr $8ba2			jsr FNegate
.86ed	20 7d 86	jsr $867d			jsr Floor
.86f0	4c a2 8b	jmp $8ba2			jmp FNegate
>86f3	46 52 6f 75 6e 64		L1:	.text "FRound"	;  name of word as a string, ending at wh_NameLastChar
>86f9	06					.byte *-L1	;wh_NameLength	length of name
>86fa	5e 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86fd	08					.byte NN	;wh_Flags	dictionary flags
=34425					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86fe	a9 1f		lda #$1f	FRound:		lda #31
.8700	20 a5 86	jsr $86a5			jsr FIntAlignA
.8703	90 03		bcc $8708			bcc _15
.8705	4c 5e 8b	jmp $8b5e			jmp F1Plus
.8708	4c a0 8a	jmp $8aa0	_15:		jmp FNorm
=13					CL	.var *-(WordListLink+wh_Xt)
=$870b					en = *	; remember here
>86fc	0d					.byte CL	;wh_CodeLength
>870b	46 49 6e 74 46 72 63		L1:	.text "FIntFrc"	;  name of word as a string, ending at wh_NameLastChar
>8712	07					.byte *-L1	;wh_NameLength	length of name
>8713	79 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8715	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8716	08					.byte NN	;wh_Flags	dictionary flags
=34450					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8717	20 78 84	jsr $8478	FIntFrc:	jsr FDup	; ( r1 r1 )
.871a	20 7d 86	jsr $867d			jsr Floor	; ( r1 rint )
.871d	20 39 85	jsr $8539			jsr FTuck	; ( rint r1 rint )
.8720	20 6b 8b	jsr $8b6b			jsr FMinus	; ( rint rfrac )
.8723	4c 00 85	jmp $8500			jmp FSwap	; ( rfrac rint )
=15					CL	.var *-(WordListLink+wh_Xt)
=$8726					en = *	; remember here
>8715	0f					.byte CL	;wh_CodeLength
>8726	46 30 3d			L1:	.text "F0="	;  name of word as a string, ending at wh_NameLastChar
>8729	03					.byte *-L1	;wh_NameLength	length of name
>872a	92 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>872c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>872d	08					.byte NN	;wh_Flags	dictionary flags
=34473					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.872e	a4 4c		ldy $4c		FZEq:		ldy fp
.8730	b9 57 00	lda $0057,y			lda FSMant0,y
.8733	d0 26		bne $875b			bne FFalse1
.8735					FTrue1:
.8735	e6 4c		inc $4c				inc fp		; FDrop
.8737	4c 18 b7	jmp $b718			jmp True	; return true
=12					CL	.var *-(WordListLink+wh_Xt)
=$873a					en = *	; remember here
>872c	0c					.byte CL	;wh_CodeLength
>873a	46 30 3c 3e			L1:	.text "F0<>"	;  name of word as a string, ending at wh_NameLastChar
>873e	04					.byte *-L1	;wh_NameLength	length of name
>873f	a9 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8741	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8742	08					.byte NN	;wh_Flags	dictionary flags
=34494					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8743	a4 4c		ldy $4c		FZNe:		ldy fp
.8745	b9 57 00	lda $0057,y			lda FSMant0,y
.8748	f0 11		beq $875b			beq FFalse1
.874a	d0 e9		bne $8735			bne FTrue1
=9					CL	.var *-(WordListLink+wh_Xt)
=$874c					en = *	; remember here
>8741	09					.byte CL	;wh_CodeLength
>874c	46 30 3c			L1:	.text "F0<"	;  name of word as a string, ending at wh_NameLastChar
>874f	03					.byte *-L1	;wh_NameLength	length of name
>8750	be 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8752	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8753	08					.byte NN	;wh_Flags	dictionary flags
=34511					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8754	a4 4c		ldy $4c		FZLt:		ldy fp
.8756	b9 57 00	lda $0057,y			lda FSMant0,y
.8759	30 da		bmi $8735			bmi FTrue1
.875b					FFalse1:
.875b	e6 4c		inc $4c				inc fp		; FDrop
.875d	4c 2b b7	jmp $b72b			jmp False	; return false
=12					CL	.var *-(WordListLink+wh_Xt)
=$8760					en = *	; remember here
>8752	0c					.byte CL	;wh_CodeLength
>8760	46 30 3e 3d			L1:	.text "F0>="	;  name of word as a string, ending at wh_NameLastChar
>8764	04					.byte *-L1	;wh_NameLength	length of name
>8765	cf 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8767	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8768	08					.byte NN	;wh_Flags	dictionary flags
=34532					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8769	a4 4c		ldy $4c		FZGe:		ldy fp
.876b	b9 57 00	lda $0057,y			lda FSMant0,y
.876e	10 c5		bpl $8735			bpl FTrue1
.8770	30 e9		bmi $875b			bmi FFalse1
=9					CL	.var *-(WordListLink+wh_Xt)
=$8772					en = *	; remember here
>8767	09					.byte CL	;wh_CodeLength
>8772	46 30 3e			L1:	.text "F0>"	;  name of word as a string, ending at wh_NameLastChar
>8775	03					.byte *-L1	;wh_NameLength	length of name
>8776	e4 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8778	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8779	08					.byte NN	;wh_Flags	dictionary flags
=34549					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.877a	a4 4c		ldy $4c		FZGt:		ldy fp
.877c	b9 57 00	lda $0057,y			lda FSMant0,y
.877f	30 da		bmi $875b			bmi FFalse1
.8781	d0 b2		bne $8735			bne FTrue1
.8783	f0 d6		beq $875b			beq FFalse1
=11					CL	.var *-(WordListLink+wh_Xt)
=$8785					en = *	; remember here
>8778	0b					.byte CL	;wh_CodeLength
>8785	46 30 3c 3d			L1:	.text "F0<="	;  name of word as a string, ending at wh_NameLastChar
>8789	04					.byte *-L1	;wh_NameLength	length of name
>878a	f5 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>878c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>878d	08					.byte NN	;wh_Flags	dictionary flags
=34569					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.878e	a4 4c		ldy $4c		FZLe:		ldy fp
.8790	b9 57 00	lda $0057,y			lda FSMant0,y
.8793	30 a0		bmi $8735			bmi FTrue1
.8795	d0 c4		bne $875b			bne FFalse1
.8797	f0 9c		beq $8735			beq FTrue1
=11					CL	.var *-(WordListLink+wh_Xt)
=$8799					en = *	; remember here
>878c	0b					.byte CL	;wh_CodeLength
>8799	46 3c				L1:	.text "F<"	;  name of word as a string, ending at wh_NameLastChar
>879b	02					.byte *-L1	;wh_NameLength	length of name
>879c	09 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>879e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>879f	08					.byte NN	;wh_Flags	dictionary flags
=34587					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87a0	20 20 86	jsr $8620	FLt:		jsr FCmpA
.87a3	30 35		bmi $87da			bmi FTrue2
.87a5					FFalse2:
.87a5	e6 4c		inc $4c				inc fp		; FDrop
.87a7	e6 4c		inc $4c				inc fp		; FDrop
.87a9	4c 2b b7	jmp $b72b			jmp False	; return False
=12					CL	.var *-(WordListLink+wh_Xt)
=$87ac					en = *	; remember here
>879e	0c					.byte CL	;wh_CodeLength
>87ac	46 3e 3d			L1:	.text "F>="	;  name of word as a string, ending at wh_NameLastChar
>87af	03					.byte *-L1	;wh_NameLength	length of name
>87b0	1b 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87b3	08					.byte NN	;wh_Flags	dictionary flags
=34607					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87b4	20 20 86	jsr $8620	FGe:		jsr FCmpA
.87b7	10 21		bpl $87da			bpl FTrue2
.87b9	30 ea		bmi $87a5			bmi FFalse2
=7					CL	.var *-(WordListLink+wh_Xt)
=$87bb					en = *	; remember here
>87b2	07					.byte CL	;wh_CodeLength
>87bb	46 3e				L1:	.text "F>"	;  name of word as a string, ending at wh_NameLastChar
>87bd	02					.byte *-L1	;wh_NameLength	length of name
>87be	2f 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87c0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87c1	08					.byte NN	;wh_Flags	dictionary flags
=34621					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87c2	20 20 86	jsr $8620	FGt:		jsr FCmpA
.87c5	30 de		bmi $87a5			bmi FFalse2
.87c7	d0 11		bne $87da			bne FTrue2
.87c9	f0 da		beq $87a5			beq FFalse2
=9					CL	.var *-(WordListLink+wh_Xt)
=$87cb					en = *	; remember here
>87c0	09					.byte CL	;wh_CodeLength
>87cb	46 3c 3d			L1:	.text "F<="	;  name of word as a string, ending at wh_NameLastChar
>87ce	03					.byte *-L1	;wh_NameLength	length of name
>87cf	3d 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87d2	08					.byte NN	;wh_Flags	dictionary flags
=34638					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87d3	20 20 86	jsr $8620	FLe:		jsr FCmpA
.87d6	30 02		bmi $87da			bmi FTrue2
.87d8	d0 cb		bne $87a5			bne FFalse2
.87da					FTrue2:
.87da	e6 4c		inc $4c				inc fp		; FDrop
.87dc	e6 4c		inc $4c				inc fp		; FDrop
.87de	4c 18 b7	jmp $b718			jmp True	; return True
=14					CL	.var *-(WordListLink+wh_Xt)
=$87e1					en = *	; remember here
>87d1	0e					.byte CL	;wh_CodeLength
>87e1	46 3c 3e			L1:	.text "F<>"	;  name of word as a string, ending at wh_NameLastChar
>87e4	03					.byte *-L1	;wh_NameLength	length of name
>87e5	4e 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87e8	08					.byte NN	;wh_Flags	dictionary flags
=34660					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87e9	20 20 86	jsr $8620	FNe:		jsr FCmpA
.87ec	d0 ec		bne $87da			bne FTrue2
.87ee	f0 b5		beq $87a5			beq FFalse2
=7					CL	.var *-(WordListLink+wh_Xt)
=$87f0					en = *	; remember here
>87e7	07					.byte CL	;wh_CodeLength
>87f0	46 3d				L1:	.text "F="	;  name of word as a string, ending at wh_NameLastChar
>87f2	02					.byte *-L1	;wh_NameLength	length of name
>87f3	64 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87f5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87f6	08					.byte NN	;wh_Flags	dictionary flags
=34674					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87f7	20 20 86	jsr $8620	FEq:		jsr FCmpA
.87fa	d0 a9		bne $87a5			bne FFalse2
.87fc	f0 dc		beq $87da			beq FTrue2
=7					CL	.var *-(WordListLink+wh_Xt)
=$87fe					en = *	; remember here
>87f5	07					.byte CL	;wh_CodeLength
>87fe	46 7e 41 62 73			L1:	.text "F~Abs"	;  name of word as a string, ending at wh_NameLastChar
>8803	05					.byte *-L1	;wh_NameLength	length of name
>8804	72 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8806	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8807	08					.byte NN	;wh_Flags	dictionary flags
=34691					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8808	20 72 85	jsr $8572	FTAbs:		jsr FMRot
.880b	20 6b 8b	jsr $8b6b			jsr FMinus
.880e	20 c9 8b	jsr $8bc9			jsr FAbs
.8811	4c c2 87	jmp $87c2			jmp FGt
=12					CL	.var *-(WordListLink+wh_Xt)
=$8814					en = *	; remember here
>8806	0c					.byte CL	;wh_CodeLength
>8814	46 7e 52 65 6c			L1:	.text "F~Rel"	;  name of word as a string, ending at wh_NameLastChar
>8819	05					.byte *-L1	;wh_NameLength	length of name
>881a	83 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>881c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>881d	08					.byte NN	;wh_Flags	dictionary flags
=34713					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.881e	20 9c 84	jsr $849c	FTRel:		jsr FOver
.8821	a9 03		lda #$03			lda #3
.8823	20 c3 84	jsr $84c3			jsr FPickA
.8826	20 29 8b	jsr $8b29			jsr FPlus
.8829	20 c9 8b	jsr $8bc9			jsr FAbs
.882c	20 fd 8b	jsr $8bfd			jsr FStar		; r1 r2 r3*|r1+r2|
.882f	20 72 85	jsr $8572			jsr FMRot		; r3*|r1+r2| r1 r2
.8832	20 6b 8b	jsr $8b6b			jsr FMinus
.8835	20 c9 8b	jsr $8bc9			jsr FAbs
.8838	4c c2 87	jmp $87c2			jmp FGt
=29					CL	.var *-(WordListLink+wh_Xt)
=$883b					en = *	; remember here
>881c	1d					.byte CL	;wh_CodeLength
>883b	46 7e				L1:	.text "F~"	;  name of word as a string, ending at wh_NameLastChar
>883d	02					.byte *-L1	;wh_NameLength	length of name
>883e	99 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8840	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8841	08					.byte NN	;wh_Flags	dictionary flags
=34749					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8842	a4 4c		ldy $4c		FTilde:		ldy fp
.8844	b9 57 00	lda $0057,y			lda FSMant0,y
.8847	30 06		bmi $884f			bmi _10			; r3<0
.8849	d0 bd		bne $8808			bne FTAbs		; r3>0
.884b	e6 4c		inc $4c				inc fp			; r3=0
.884d	d0 a8		bne $87f7			bne FEq
.884f	20 a2 8b	jsr $8ba2	_10:		jsr FNegate
.8852	4c 1e 88	jmp $881e			jmp FTRel
=19					CL	.var *-(WordListLink+wh_Xt)
=$8855					en = *	; remember here
>8840	13					.byte CL	;wh_CodeLength
>8855	46 56 61 72 69 61 62 6c		L1:	.text "FVariable"	;  name of word as a string, ending at wh_NameLastChar
>885d	65
>885e	09					.byte *-L1	;wh_NameLength	length of name
>885f	bd 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8861	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8862	0c					.byte IM+NN	;wh_Flags	dictionary flags
=34782					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8863	20 e9 c0	jsr $c0e9	FVariable:	jsr Create		; compile word header & push PFA adr
.8866	20 4d bb	jsr $bb4d			jsr adjust_z		; fix word code length
.8869	20 ec 88	jsr $88ec			jsr F0			; alloc & init data
.886c	4c de 85	jmp $85de			jmp FComma
=12					CL	.var *-(WordListLink+wh_Xt)
=$886f					en = *	; remember here
>8861	0c					.byte CL	;wh_CodeLength
>886f	46 4c 69 74 65 72 61 6c		L1:	.text "FLiteral"	;  name of word as a string, ending at wh_NameLastChar
>8877	08					.byte *-L1	;wh_NameLength	length of name
>8878	de 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>887a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>887b	0c					.byte IM+NN	;wh_Flags	dictionary flags
=34807					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.887c	20 91 88	jsr $8891	FLiteral:	jsr FLitTest
.887f	f0 0a		beq $888b			beq _Short
.8881	a9 cc		lda #$cc			lda #<FLitI		; compile JSR FLitI
.8883	a0 88		ldy #$88			ldy #>FLitI
.8885	20 48 cc	jsr $cc48			jsr Jsr_Comma_YA
.8888	4c de 85	jmp $85de			jmp FComma		; inline operand, return
.888b	20 9d 88	jsr $889d	_Short:		jsr FLitShort
.888e	4c 48 cc	jmp $cc48			jmp Jsr_Comma_YA	; compile jsr FLitYA, & return
=21					CL	.var *-(WordListLink+wh_Xt)
=$8891					en = *	; remember here
>887a	15					.byte CL	;wh_CodeLength
.8891					FLitTest:
.8891	a4 4c		ldy $4c				ldy fp
.8893	b9 61 00	lda $0061,y			lda FSMant1,y		; will short work?
.8896	19 6b 00	ora $006b,y			ora FSMant2,y
.8899	19 75 00	ora $0075,y			ora FSMant3,y
.889c	60		rts				rts
.889d					FLitShort:
.889d	a9 a9		lda #$a9			lda #$a9		; compile LDA #mant0
.889f	20 09 cc	jsr $cc09			jsr C_Comma_A
.88a2	b9 57 00	lda $0057,y			lda FSMant0,y
.88a5	20 09 cc	jsr $cc09			jsr C_Comma_A
.88a8	a9 a0		lda #$a0			lda #$a0		; compile LDY #exp
.88aa	20 09 cc	jsr $cc09			jsr C_Comma_A
.88ad	b9 4d 00	lda $004d,y			lda FSExp,y
.88b0	20 09 cc	jsr $cc09			jsr C_Comma_A
.88b3	e6 4c		inc $4c				inc fp			; FDrop
.88b5	a9 ba		lda #$ba			lda #<FLitYA		; point at FLitYA
.88b7	a0 88		ldy #$88			ldy #>FLitYA
.88b9	60		rts				rts
.88ba					FLitYA:
.88ba	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.88bd	94 4d		sty $4d,x			sty FSExp,x
.88bf	95 57		sta $57,x			sta FSMant0,x
.88c1	a9 00		lda #$00			lda #0
.88c3	95 61		sta $61,x			sta FSMant1,x
.88c5	95 6b		sta $6b,x			sta FSMant2,x
.88c7	95 75		sta $75,x			sta FSMant3,x
.88c9	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.88cb	60		rts				rts
.88cc					FLitI:
.88cc	68		pla				pla			; tmp2= RTS addr
.88cd	85 16		sta $16				sta tmp2+0
.88cf	18		clc				clc			; bump RTS addr over inline data
.88d0	69 05		adc #$05			adc #5
.88d2	a8		tay				tay
.88d3	68		pla				pla
.88d4	85 17		sta $17				sta tmp2+1
.88d6	69 00		adc #$00			adc #0
.88d8	48		pha				pha
.88d9	98		tya				tya
.88da	48		pha				pha
.88db	e6 16		inc $16				inc tmp2+0		; tmp2 +=1 1 (correct RTS addr)
.88dd	d0 02		bne $88e1			bne +
.88df	e6 17		inc $17				inc tmp2+1
.88e1					+
.88e1	4c 86 85	jmp $8586			jmp FAt_Tmp2		; fetch inline data, & return
>88e4	30 2e 65			L1:	.text "0.e"	;  name of word as a string, ending at wh_NameLastChar
>88e7	03					.byte *-L1	;wh_NameLength	length of name
>88e8	f7 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88ea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88eb	08					.byte NN	;wh_Flags	dictionary flags
=34919					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88ec	a9 00		lda #$00	F0:		lda #0
.88ee	a0 80		ldy #$80			ldy #$80
.88f0	d0 c8		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$88f2					en = *	; remember here
>88ea	06					.byte CL	;wh_CodeLength
>88f2	31 30 30 30 2e 65		L1:	.text "1000.e"	;  name of word as a string, ending at wh_NameLastChar
>88f8	06					.byte *-L1	;wh_NameLength	length of name
>88f9	67 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88fb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88fc	08					.byte NN	;wh_Flags	dictionary flags
=34936					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88fd	a9 7d		lda #$7d	F1000:		lda #$7d
.88ff	a0 0a		ldy #$0a			ldy #10
.8901	d0 b7		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8903					en = *	; remember here
>88fb	06					.byte CL	;wh_CodeLength
>8903	31 30 2e 65			L1:	.text "10.e"	;  name of word as a string, ending at wh_NameLastChar
>8907	04					.byte *-L1	;wh_NameLength	length of name
>8908	78 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>890a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>890b	08					.byte NN	;wh_Flags	dictionary flags
=34951					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.890c	a9 50		lda #$50	F10:		lda #$50
.890e	a0 04		ldy #$04			ldy #4
.8910	d0 a8		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8912					en = *	; remember here
>890a	06					.byte CL	;wh_CodeLength
>8912	32 2e 65			L1:	.text "2.e"	;  name of word as a string, ending at wh_NameLastChar
>8915	03					.byte *-L1	;wh_NameLength	length of name
>8916	87 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8918	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8919	08					.byte NN	;wh_Flags	dictionary flags
=34965					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.891a	a9 40		lda #$40	F2:		lda #$40
.891c	a0 02		ldy #$02			ldy #2
.891e	d0 9a		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8920					en = *	; remember here
>8918	06					.byte CL	;wh_CodeLength
>8920	31 2e 65			L1:	.text "1.e"	;  name of word as a string, ending at wh_NameLastChar
>8923	03					.byte *-L1	;wh_NameLength	length of name
>8924	95 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8926	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8927	08					.byte NN	;wh_Flags	dictionary flags
=34979					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8928	a9 40		lda #$40	F1:		lda #$40
.892a	a0 01		ldy #$01			ldy #1
.892c	d0 8c		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$892e					en = *	; remember here
>8926	06					.byte CL	;wh_CodeLength
>892e	2e 31 65			L1:	.text ".1e"	;  name of word as a string, ending at wh_NameLastChar
>8931	03					.byte *-L1	;wh_NameLength	length of name
>8932	a3 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8934	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8935	08					.byte NN	;wh_Flags	dictionary flags
=34993					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8936	20 bb 89	jsr $89bb	F10th:		jsr FConstantRun
>8939	67 66 66 66					.dword $66666667	; 32 bit signed binary mantissa.  $40000000 = +0.5
>893d	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$893e					en = *	; remember here
>8934	08					.byte CL	;wh_CodeLength
>893e	50 69				L1:	.text "Pi"	;  name of word as a string, ending at wh_NameLastChar
>8940	02					.byte *-L1	;wh_NameLength	length of name
>8941	b1 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8943	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8944	08					.byte NN	;wh_Flags	dictionary flags
=35008					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8945	20 bb 89	jsr $89bb	FPi:		jsr FConstantRun
>8948	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>894c	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$894d					en = *	; remember here
>8943	08					.byte CL	;wh_CodeLength
>894d	50 69 2f 32			L1:	.text "Pi/2"	;  name of word as a string, ending at wh_NameLastChar
>8951	04					.byte *-L1	;wh_NameLength	length of name
>8952	c0 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8954	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8955	08					.byte NN	;wh_Flags	dictionary flags
=35025					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8956	20 bb 89	jsr $89bb	FPiH:		jsr FConstantRun
>8959	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>895d	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$895e					en = *	; remember here
>8954	08					.byte CL	;wh_CodeLength
>895e	50 69 2f 34			L1:	.text "Pi/4"	;  name of word as a string, ending at wh_NameLastChar
>8962	04					.byte *-L1	;wh_NameLength	length of name
>8963	d1 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8965	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8966	08					.byte NN	;wh_Flags	dictionary flags
=35042					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8967	20 bb 89	jsr $89bb	FPiQ:		jsr FConstantRun
>896a	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>896e	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$896f					en = *	; remember here
>8965	08					.byte CL	;wh_CodeLength
>896f	32 50 69			L1:	.text "2Pi"	;  name of word as a string, ending at wh_NameLastChar
>8972	03					.byte *-L1	;wh_NameLength	length of name
>8973	e2 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8975	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8976	08					.byte NN	;wh_Flags	dictionary flags
=35058					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8977	20 bb 89	jsr $89bb	F2Pi:		jsr FConstantRun
>897a	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>897e	03						.char 3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$897f					en = *	; remember here
>8975	08					.byte CL	;wh_CodeLength
>897f	46 2e 45			L1:	.text "F.E"	;  name of word as a string, ending at wh_NameLastChar
>8982	03					.byte *-L1	;wh_NameLength	length of name
>8983	f2 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8985	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8986	08					.byte NN	;wh_Flags	dictionary flags
=35074					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8987	20 bb 89	jsr $89bb	FE:		jsr FConstantRun
>898a	2c 2a fc 56					.dword $56fc2a2c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>898e	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$898f					en = *	; remember here
>8985	08					.byte CL	;wh_CodeLength
>898f	46 43 6f 6e 73 74 61 6e		L1:	.text "FConstant"	;  name of word as a string, ending at wh_NameLastChar
>8997	74
>8998	09					.byte *-L1	;wh_NameLength	length of name
>8999	02 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>899b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>899c	08					.byte NN	;wh_Flags	dictionary flags
=35096					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.899d	20 62 c0	jsr $c062	FConstant:	jsr Header_Comma	; compile word header
.89a0	20 91 88	jsr $8891			jsr FLitTest		; will short work?
.89a3	f0 0d		beq $89b2			beq _Short
.89a5	a9 bb		lda #$bb			lda #<FConstantRun	; compile call
.89a7	a0 89		ldy #$89			ldy #>FConstantRun
.89a9	20 48 cc	jsr $cc48			jsr Jsr_Comma_YA
.89ac	20 4d bb	jsr $bb4d			jsr adjust_z
.89af	4c de 85	jmp $85de			jmp FComma		; inline operand, & return
.89b2					_Short:
.89b2	20 9d 88	jsr $889d			jsr FLitShort		; compile load value
.89b5	20 5f cc	jsr $cc5f			jsr Jmp_Comma_YA
.89b8	4c 4d bb	jmp $bb4d			jmp adjust_z
=30					CL	.var *-(WordListLink+wh_Xt)
=$89bb					en = *	; remember here
>899b	1e					.byte CL	;wh_CodeLength
.89bb					FConstantRun:
.89bb	68		pla				pla			; tmp2= pop RTS addr & add 1
.89bc	18		clc				clc
.89bd	69 01		adc #$01			adc #1
.89bf	85 16		sta $16				sta tmp2+0
.89c1	68		pla				pla
.89c2	69 00		adc #$00			adc #0
.89c4	85 17		sta $17				sta tmp2+1
.89c6	4c 86 85	jmp $8586			jmp FAt_Tmp2		; fetch inline data, & return
>89c9	46 56 61 6c 75 65		L1:	.text "FValue"	;  name of word as a string, ending at wh_NameLastChar
>89cf	06					.byte *-L1	;wh_NameLength	length of name
>89d0	18 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89d3	0c					.byte IM+NN	;wh_Flags	dictionary flags
=35151					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89d4	20 62 c0	jsr $c062	FValue:		jsr Header_Comma	; compile word header
.89d7	a9 e4		lda #$e4			lda #<FValue_runtime	; compile JSR FValue_runtime
.89d9	a0 89		ldy #$89			ldy #>FValue_runtime
.89db	20 48 cc	jsr $cc48			jsr Jsr_Comma_YA
.89de	20 4d bb	jsr $bb4d			jsr adjust_z		; fix word length
.89e1	4c de 85	jmp $85de			jmp FComma		; alloc & init value
=16					CL	.var *-(WordListLink+wh_Xt)
=$89e4					en = *	; remember here
>89d2	10					.byte CL	;wh_CodeLength
.89e4					FValue_runtime:
.89e4	4c bb 89	jmp $89bb			jmp FConstantRun
>89e7	46 53 63 61 6c 65		L1:	.text "FScale"	;  name of word as a string, ending at wh_NameLastChar
>89ed	06					.byte *-L1	;wh_NameLength	length of name
>89ee	4f 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89f1	08					.byte NN	;wh_Flags	dictionary flags
=35181					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89f2	20 24 b3	jsr $b324	FScale:		jsr PopA		; pop n
.89f5	86 14		stx $14		FScaleA:	stx tmp1		; save data stack index
.89f7	a6 4c		ldx $4c				ldx fp
.89f9	b4 57		ldy $57,x			ldy FSMant0,x		; mantissa zero?
.89fb	f0 07		beq $8a04			beq _8
.89fd	18		clc				clc
.89fe	75 4d		adc $4d,x			adc FSExp,x
.8a00	95 4d		sta $4d,x			sta FSExp,x
.8a02	70 03		bvs $8a07			bvs _overflow		; overflow or underflow?
.8a04	a6 14		ldx $14		_8:		ldx tmp1		; restore data stack index
.8a06	60		rts				rts
.8a07					_overflow:
.8a07	a6 14		ldx $14				ldx tmp1		; restore data stack index
.8a09	20 a2 b3	jsr $b3a2			jsr Throw_FpOutOfRange
=26					CL	.var *-(WordListLink+wh_Xt)
=$8a0c					en = *	; remember here
>89f0	1a					.byte CL	;wh_CodeLength
>8a0c	46 32 2a			L1:	.text "F2*"	;  name of word as a string, ending at wh_NameLastChar
>8a0f	03					.byte *-L1	;wh_NameLength	length of name
>8a10	6d 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a12	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a13	08					.byte NN	;wh_Flags	dictionary flags
=35215					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a14	a9 01		lda #$01	F2Star:		lda #1
.8a16	d0 dd		bne $89f5			bne FScaleA
=4					CL	.var *-(WordListLink+wh_Xt)
=$8a18					en = *	; remember here
>8a12	04					.byte CL	;wh_CodeLength
>8a18	46 32 2f			L1:	.text "F2/"	;  name of word as a string, ending at wh_NameLastChar
>8a1b	03					.byte *-L1	;wh_NameLength	length of name
>8a1c	8f 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a1e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a1f	08					.byte NN	;wh_Flags	dictionary flags
=35227					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a20	a9 ff		lda #$ff	F2Slash:	lda #$ff
.8a22	d0 d1		bne $89f5			bne FScaleA
=4					CL	.var *-(WordListLink+wh_Xt)
=$8a24					en = *	; remember here
>8a1e	04					.byte CL	;wh_CodeLength
>8a24	2b 8a				L1:	.text FMAlignX	;  name of word as a string, ending at wh_NameLastChar
>8a26	02					.byte *-L1	;wh_NameLength	length of name
>8a27	9b 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a29	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a2a	08					.byte NN	;wh_Flags	dictionary flags
=35238					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a2b	86 14		stx $14		FMAlignX:	stx tmp1+0	; save data stack index
.8a2d	a6 4c		ldx $4c				ldx fp		; load FP stack index
.8a2f	e0 09		cpx #$09			cpx #FDim-1	; check FP stack for 2 entries
.8a31	b0 60		bcs $8a93			bcs Throw_FPStack_3
.8a33	b5 4d		lda $4d,x			lda FSExp+0,x
.8a35	38		sec				sec
.8a36	f5 4e		sbc $4e,x			sbc FSExp+1,x	; compare exponents
.8a38	a8		tay				tay
.8a39	f0 22		beq $8a5d			beq _rts	; already = ?
.8a3b	10 2b		bpl $8a68			bpl _2		; r2 smaller?
.8a3d					_1:
.8a3d	70 4a		bvs $8a89			bvs _2z		; was this a big positive #?
.8a3f	c0 e0		cpy #$e0			cpy #-32
.8a41	90 1b		bcc $8a5e			bcc _1z		; all significant bits gone?
.8a43	b5 57		lda $57,x			lda FSMant0+0,x
.8a45	29 80		and #$80			and #$80
.8a47	85 15		sta $15				sta tmp1+1	; prepare sign for shifts
.8a49	b5 57		lda $57,x			lda FSMant0+0,x
.8a4b	4a		lsr a		_1s:		lsr a
.8a4c	05 15		ora $15				ora tmp1+1
.8a4e	76 61		ror $61,x			ror FSMant1+0,x
.8a50	76 6b		ror $6b,x			ror FSMant2+0,x
.8a52	76 75		ror $75,x			ror FSMant3+0,x
.8a54	c8		iny				iny
.8a55	d0 f4		bne $8a4b			bne _1s
.8a57	95 57		sta $57,x	_1e:		sta FSMant0+0,x
.8a59	b5 4e		lda $4e,x			lda FSExp+1,x
.8a5b	95 4d		sta $4d,x			sta FSExp+0,x
.8a5d	60		rts		_rts:		rts
.8a5e	a9 00		lda #$00	_1z:		lda #0		; TOS=0
.8a60	95 61		sta $61,x			sta FSMant1+0,x
.8a62	95 6b		sta $6b,x			sta FSMant2+0,x
.8a64	95 75		sta $75,x			sta FSMant3+0,x
.8a66	f0 ef		beq $8a57			beq _1e
.8a68					_2:
.8a68	70 f4		bvs $8a5e			bvs _1z		; was this a big negative #?
.8a6a	c0 20		cpy #$20			cpy #32
.8a6c	b0 1b		bcs $8a89			bcs _2z		; all significant bits gone?
.8a6e	b5 58		lda $58,x			lda FSMant0+1,x
.8a70	29 80		and #$80			and #$80
.8a72	85 15		sta $15				sta tmp1+1	; prepare sign for shifts
.8a74	b5 58		lda $58,x			lda FSMant0+1,x
.8a76	4a		lsr a		_2s:		lsr a
.8a77	05 15		ora $15				ora tmp1+1
.8a79	76 62		ror $62,x			ror FSMant1+1,x
.8a7b	76 6c		ror $6c,x			ror FSMant2+1,x
.8a7d	76 76		ror $76,x			ror FSMant3+1,x
.8a7f	88		dey				dey
.8a80	d0 f4		bne $8a76			bne _2s
.8a82	95 58		sta $58,x	_2e:		sta FSMant0+1,x
.8a84	b5 4d		lda $4d,x			lda FSExp+0,x
.8a86	95 4e		sta $4e,x			sta FSExp+1,x
.8a88	60		rts				rts
.8a89	a9 00		lda #$00	_2z:		lda #0		; NOS=0
.8a8b	95 62		sta $62,x			sta FSMant1+1,x
.8a8d	95 6c		sta $6c,x			sta FSMant2+1,x
.8a8f	95 76		sta $76,x			sta FSMant3+1,x
.8a91	f0 ef		beq $8a82			beq _2e
=104					CL	.var *-(WordListLink+wh_Xt)
=$8a93					en = *	; remember here
>8a29	68					.byte CL	;wh_CodeLength
.8a93	4c 98 b3	jmp $b398	Throw_FPStack_3: jmp Throw_FPStack
>8a96	46 4e 6f 72 6d			L1:	.text "FNorm"	;  name of word as a string, ending at wh_NameLastChar
>8a9b	05					.byte *-L1	;wh_NameLength	length of name
>8a9c	a6 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a9e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a9f	08					.byte NN	;wh_Flags	dictionary flags
=35355					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8aa0	86 14		stx $14		FNorm:		stx tmp1+0		; save data stack index
.8aa2	a6 4c		ldx $4c		FNormX:		ldx fp			; switch to FP stack
.8aa4	b4 4d		ldy $4d,x			ldy FSExp,x
.8aa6	b5 57		lda $57,x			lda FSMant0,x		; mantissa negative?
.8aa8	30 2d		bmi $8ad7			bmi _Neg
.8aaa	d0 0f		bne $8abb			bne _Pos2		; do byte shift
.8aac	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8aaf	d0 0a		bne $8abb			bne _Pos2
.8ab1	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ab4	d0 05		bne $8abb			bne _Pos2
.8ab6	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ab9	f0 43		beq $8afe			beq _zero		; no significant bits left?
.8abb	18		clc		_Pos2:		clc
.8abc	30 0a		bmi $8ac8			bmi _RShft
.8abe	88		dey		_Pos3:		dey			; do bit shift
.8abf	16 75		asl $75,x			asl FSMant3,x
.8ac1	36 6b		rol $6b,x			rol FSMant2,x
.8ac3	36 61		rol $61,x			rol FSMant1,x
.8ac5	2a		rol a				rol a
.8ac6	10 f6		bpl $8abe			bpl _Pos3
.8ac8					_RShft:
.8ac8	c8		iny				iny
.8ac9	6a		ror a				ror a
.8aca	76 61		ror $61,x			ror FSMant1,x
.8acc	76 6b		ror $6b,x			ror FSMant2,x
.8ace	76 75		ror $75,x			ror FSMant3,x
.8ad0					_28:
.8ad0	95 57		sta $57,x			sta FSMant0,x
.8ad2	94 4d		sty $4d,x			sty FSExp,x
.8ad4	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.8ad6	60		rts				rts
.8ad7					_Neg:
.8ad7	c9 ff		cmp #$ff			cmp #$ff
.8ad9	d0 11		bne $8aec			bne _Neg2	; do byte shift
.8adb	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ade	c9 ff		cmp #$ff			cmp #$ff
.8ae0	d0 0a		bne $8aec			bne _Neg2
.8ae2	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ae5	c9 ff		cmp #$ff			cmp #$ff
.8ae7	d0 03		bne $8aec			bne _Neg2
.8ae9	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8aec	c9 00		cmp #$00	_Neg2:		cmp #0
.8aee	10 d8		bpl $8ac8			bpl _RShft
.8af0	88		dey		_Neg3:		dey
.8af1	16 75		asl $75,x			asl FSMant3,x
.8af3	36 6b		rol $6b,x			rol FSMant2,x
.8af5	36 61		rol $61,x			rol FSMant1,x
.8af7	2a		rol a				rol a
.8af8	30 f6		bmi $8af0			bmi _Neg3
.8afa	10 cc		bpl $8ac8			bpl _RShft
.8afc	68		pla		_Zerop:		pla
.8afd	68		pla				pla		; pop rts addr from _ShiftB
.8afe	a9 00		lda #$00	_zero:		lda #0
.8b00	95 75		sta $75,x			sta FSMant3,x
.8b02	95 6b		sta $6b,x			sta FSMant2,x
.8b04	95 61		sta $61,x			sta FSMant1,x
.8b06	a0 80		ldy #$80			ldy #$80
.8b08	d0 c6		bne $8ad0			bne _28
.8b0a					_ShiftB:
.8b0a	98		tya				tya
.8b0b	38		sec				sec
.8b0c	e9 08		sbc #$08			sbc #8
.8b0e	a8		tay				tay
.8b0f	70 eb		bvs $8afc			bvs _zerop	;is this useful? do we need more of them?
.8b11	b5 61		lda $61,x			lda FSMant1,x
.8b13	48		pha				pha
.8b14	b5 6b		lda $6b,x			lda FSMant2,x
.8b16	95 61		sta $61,x			sta FSMant1,x
.8b18	b5 75		lda $75,x			lda FSMant3,x
.8b1a	95 6b		sta $6b,x			sta FSMant2,x
.8b1c	a9 00		lda #$00			lda #0
.8b1e	95 75		sta $75,x			sta FSMant3,x
.8b20	68		pla				pla
.8b21	60		rts				rts
=130					CL	.var *-(WordListLink+wh_Xt)
=$8b22					en = *	; remember here
>8a9e	82					.byte CL	;wh_CodeLength
>8b22	46 2b				L1:	.text "F+"	;  name of word as a string, ending at wh_NameLastChar
>8b24	02					.byte *-L1	;wh_NameLength	length of name
>8b25	1b 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b27	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b28	08					.byte NN	;wh_Flags	dictionary flags
=35492					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b29	20 2b 8a	jsr $8a2b	FPlus:		jsr FMAlignX	; align mantissas
.8b2c	18		clc				clc		; add mantissas
.8b2d	b5 76		lda $76,x			lda FSMant3+1,x
.8b2f	75 75		adc $75,x			adc FSMant3+0,x
.8b31	95 76		sta $76,x			sta FSMant3+1,x
.8b33	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b35	75 6b		adc $6b,x			adc FSMant2+0,x
.8b37	95 6c		sta $6c,x			sta FSMant2+1,x
.8b39	b5 62		lda $62,x			lda FSMant1+1,x
.8b3b	75 61		adc $61,x			adc FSMant1+0,x
.8b3d	95 62		sta $62,x			sta FSMant1+1,x
.8b3f	b5 58		lda $58,x			lda FSMant0+1,x
.8b41	75 57		adc $57,x			adc FSMant0+0,x
.8b43					FPlusFin:
.8b43	e8		inx				inx		; FDrop
.8b44	86 4c		stx $4c				stx fp
.8b46	50 09		bvc $8b51	FPlusFin3:	bvc _19		; if overflow
.8b48	6a		ror a				ror a		;   shift mantissa right 1 bit
.8b49	76 61		ror $61,x			ror FSMant1,x
.8b4b	76 6b		ror $6b,x			ror FSMant2,x
.8b4d	76 75		ror $75,x			ror FSMant3,x
.8b4f	f6 4d		inc $4d,x			inc FSExp,x	;   adjust exponent
.8b51					_19:
.8b51	95 57		sta $57,x			sta FSMant0,x
.8b53	4c a2 8a	jmp $8aa2			jmp FNormX	; normalize, return
=45					CL	.var *-(WordListLink+wh_Xt)
=$8b56					en = *	; remember here
>8b27	2d					.byte CL	;wh_CodeLength
>8b56	46 31 2b			L1:	.text "F1+"	;  name of word as a string, ending at wh_NameLastChar
>8b59	03					.byte *-L1	;wh_NameLength	length of name
>8b5a	a4 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b5c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b5d	08					.byte NN	;wh_Flags	dictionary flags
=35545					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b5e	20 28 89	jsr $8928	F1Plus:		jsr F1
.8b61	4c 29 8b	jmp $8b29			jmp FPlus
=6					CL	.var *-(WordListLink+wh_Xt)
=$8b64					en = *	; remember here
>8b5c	06					.byte CL	;wh_CodeLength
>8b64	46 2d				L1:	.text "F-"	;  name of word as a string, ending at wh_NameLastChar
>8b66	02					.byte *-L1	;wh_NameLength	length of name
>8b67	d9 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b69	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b6a	08					.byte NN	;wh_Flags	dictionary flags
=35558					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b6b	20 2b 8a	jsr $8a2b	FMinus:		jsr FMAlignX	; align mantissas
.8b6e	38		sec				sec		; subtract mantissas
.8b6f	b5 76		lda $76,x			lda FSMant3+1,x
.8b71	f5 75		sbc $75,x			sbc FSMant3+0,x
.8b73	95 76		sta $76,x			sta FSMant3+1,x
.8b75	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b77	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8b79	95 6c		sta $6c,x			sta FSMant2+1,x
.8b7b	b5 62		lda $62,x			lda FSMant1+1,x
.8b7d	f5 61		sbc $61,x			sbc FSMant1+0,x
.8b7f	95 62		sta $62,x			sta FSMant1+1,x
.8b81	b5 58		lda $58,x			lda FSMant0+1,x
.8b83	f5 57		sbc $57,x			sbc FSMant0+0,x
.8b85	4c 43 8b	jmp $8b43			jmp FPlusFin
=29					CL	.var *-(WordListLink+wh_Xt)
=$8b88					en = *	; remember here
>8b69	1d					.byte CL	;wh_CodeLength
>8b88	46 31 2d			L1:	.text "F1-"	;  name of word as a string, ending at wh_NameLastChar
>8b8b	03					.byte *-L1	;wh_NameLength	length of name
>8b8c	e6 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b8e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b8f	08					.byte NN	;wh_Flags	dictionary flags
=35595					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b90	20 28 89	jsr $8928	F1Minus:	jsr F1
.8b93	4c 6b 8b	jmp $8b6b			jmp FMinus
=6					CL	.var *-(WordListLink+wh_Xt)
=$8b96					en = *	; remember here
>8b8e	06					.byte CL	;wh_CodeLength
>8b96	46 4e 65 67 61 74 65		L1:	.text "FNegate"	;  name of word as a string, ending at wh_NameLastChar
>8b9d	07					.byte *-L1	;wh_NameLength	length of name
>8b9e	0b 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ba0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ba1	08					.byte NN	;wh_Flags	dictionary flags
=35613					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ba2	86 14		stx $14		FNegate:	stx tmp1	; save data stack index
.8ba4	a6 4c		ldx $4c				ldx fp		; X= FP stack index
.8ba6	38		sec				sec		; mantissa = 0 - mantissa
.8ba7	a9 00		lda #$00			lda #0
.8ba9	f5 75		sbc $75,x			sbc FSMant3,x
.8bab	95 75		sta $75,x			sta FSMant3,x
.8bad	a9 00		lda #$00			lda #0
.8baf	f5 6b		sbc $6b,x			sbc FSMant2,x
.8bb1	95 6b		sta $6b,x			sta FSMant2,x
.8bb3	a9 00		lda #$00			lda #0
.8bb5	f5 61		sbc $61,x			sbc FSMant1,x
.8bb7	95 61		sta $61,x			sta FSMant1,x
.8bb9	a9 00		lda #$00			lda #0
.8bbb	f5 57		sbc $57,x			sbc FSMant0,x
.8bbd	4c 46 8b	jmp $8b46			jmp FPlusFin3	; finish up, return
=30					CL	.var *-(WordListLink+wh_Xt)
=$8bc0					en = *	; remember here
>8ba0	1e					.byte CL	;wh_CodeLength
>8bc0	46 41 62 73			L1:	.text "FAbs"	;  name of word as a string, ending at wh_NameLastChar
>8bc4	04					.byte *-L1	;wh_NameLength	length of name
>8bc5	1d 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8bc7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8bc8	08					.byte NN	;wh_Flags	dictionary flags
=35652					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8bc9	a4 4c		ldy $4c		FAbs:		ldy fp
.8bcb	b9 57 00	lda $0057,y			lda FSMant0,y		; mantissa negative?
.8bce	30 d2		bmi $8ba2			bmi FNegate
.8bd0	60		rts				rts
=8					CL	.var *-(WordListLink+wh_Xt)
=$8bd1					en = *	; remember here
>8bc7	08					.byte CL	;wh_CodeLength
.8bd1	4c 98 b3	jmp $b398	Throw_FPStack_4: jmp Throw_FPStack
.8bd4	a4 4c		ldy $4c		FPos:		ldy fp			; load FP stack index
.8bd6	c0 09		cpy #$09			cpy #FDim-1		; check FP stack for 2
.8bd8	b0 f7		bcs $8bd1			bcs Throw_FPStack_4
.8bda	b9 57 00	lda $0057,y			lda FSMant0+0,y		; calc result sign
.8bdd	59 58 00	eor $0058,y			eor FSMant0+1,y
.8be0	08		php				php
.8be1	b9 58 00	lda $0058,y			lda FSMant0+1,y		; if NOS negative
.8be4	10 07		bpl $8bed			bpl +
.8be6	e6 4c		inc $4c				inc fp			;   point at NOS
.8be8	20 a2 8b	jsr $8ba2			jsr FNegate		;   negate NOS
.8beb	c6 4c		dec $4c				dec fp			;   restore fp
.8bed					+
.8bed	20 c9 8b	jsr $8bc9			jsr FAbs		; abs TOS
.8bf0	86 14		stx $14				stx tmp1+0		; save data stack index
.8bf2	a6 4c		ldx $4c				ldx fp			; load FP stack index
.8bf4	28		plp				plp			; restore sign flag
.8bf5	60		rts				rts
>8bf6	46 2a				L1:	.text "F*"	;  name of word as a string, ending at wh_NameLastChar
>8bf8	02					.byte *-L1	;wh_NameLength	length of name
>8bf9	44 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8bfb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8bfc	08					.byte NN	;wh_Flags	dictionary flags
=35704					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8bfd					FStar:
.8bfd	20 d4 8b	jsr $8bd4			jsr FPos		; make r1 & r2 positive,
.8c00	08		php				php			;   save r3 sign
.8c01	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8c03	38		sec				sec
.8c04	75 4e		adc $4e,x			adc FSExp+1,x
.8c06	95 4e		sta $4e,x			sta FSExp+1,x
.8c08	50 12		bvc $8c1c			bvc _49			; IfVs,
.8c0a	b0 06		bcs $8c12			bcs _zero		;   underflow?
.8c0c	a6 14		ldx $14				ldx tmp1+0		;   restore data stack index
.8c0e	28		plp				plp			; RDrop sign flag
.8c0f	20 a2 b3	jsr $b3a2			jsr Throw_FpOutOfRange
.8c12	e8		inx		_zero:		inx			; F2Drop
.8c13	e8		inx				inx
.8c14	86 4c		stx $4c				stx fp
.8c16	28		plp				plp			; rdrop saved result sign
.8c17	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c19	4c ec 88	jmp $88ec			jmp F0			; return zero
.8c1c					_49:
.8c1c	b5 58		lda $58,x			lda FSMant0+1,x		; save r1 mantissa
.8c1e	48		pha				pha
.8c1f	b5 62		lda $62,x			lda FSMant1+1,x
.8c21	48		pha				pha
.8c22	b5 6c		lda $6c,x			lda FSMant2+1,x
.8c24	48		pha				pha
.8c25	b5 76		lda $76,x			lda FSMant3+1,x
.8c27	a0 00		ldy #$00			ldy #0			; init r3 mantissa
.8c29	94 58		sty $58,x			sty FSMant0+1,x
.8c2b	94 62		sty $62,x			sty FSMant1+1,x
.8c2d	94 6c		sty $6c,x			sty FSMant2+1,x
.8c2f	94 76		sty $76,x			sty FSMant3+1,x
.8c31	20 4d 8c	jsr $8c4d			jsr _Byte		; do bytes of r1 mantissa
.8c34	68		pla				pla
.8c35	20 4d 8c	jsr $8c4d			jsr _Byte
.8c38	68		pla				pla
.8c39	20 4d 8c	jsr $8c4d			jsr _Byte
.8c3c	68		pla				pla
.8c3d	20 4d 8c	jsr $8c4d			jsr _Byte
.8c40	e6 4c		inc $4c				inc fp			; FDrop
.8c42	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c44	28		plp				plp			; fix result sign
.8c45	10 03		bpl $8c4a			bpl +
.8c47	4c a2 8b	jmp $8ba2			jmp FNegate
.8c4a					+
.8c4a	4c a0 8a	jmp $8aa0			jmp FNorm
.8c4d					_Byte:
.8c4d	85 15		sta $15				sta tmp1+1
.8c4f	a0 08		ldy #$08			ldy #8			; for each bit in byte
.8c51	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8c53	90 19		bcc $8c6e			bcc _b3
.8c55	18		clc				clc			;     r3 += r2
.8c56	b5 76		lda $76,x			lda FSMant3+1,x
.8c58	75 75		adc $75,x			adc FSMant3+0,x
.8c5a	95 76		sta $76,x			sta FSMant3+1,x
.8c5c	b5 6c		lda $6c,x			lda FSMant2+1,x
.8c5e	75 6b		adc $6b,x			adc FSMant2+0,x
.8c60	95 6c		sta $6c,x			sta FSMant2+1,x
.8c62	b5 62		lda $62,x			lda FSMant1+1,x
.8c64	75 61		adc $61,x			adc FSMant1+0,x
.8c66	95 62		sta $62,x			sta FSMant1+1,x
.8c68	b5 58		lda $58,x			lda FSMant0+1,x
.8c6a	75 57		adc $57,x			adc FSMant0+0,x
.8c6c	95 58		sta $58,x			sta FSMant0+1,x
.8c6e	56 58		lsr $58,x	_b3:		lsr FSMant0+1,x		;   r3 >>= 1
.8c70	76 62		ror $62,x			ror FSMant1+1,x
.8c72	76 6c		ror $6c,x			ror FSMant2+1,x
.8c74	76 76		ror $76,x			ror FSMant3+1,x
.8c76	88		dey				dey			;  next bit
.8c77	d0 d8		bne $8c51			bne _b1
.8c79	60		rts				rts
=125					CL	.var *-(WordListLink+wh_Xt)
=$8c7a					en = *	; remember here
>8bfb	7d					.byte CL	;wh_CodeLength
>8c7a	46 53 71 72			L1:	.text "FSqr"	;  name of word as a string, ending at wh_NameLastChar
>8c7e	04					.byte *-L1	;wh_NameLength	length of name
>8c7f	78 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8c81	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8c82	08					.byte NN	;wh_Flags	dictionary flags
=35838					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8c83	20 78 84	jsr $8478	FSqr:		jsr FDup
.8c86	4c fd 8b	jmp $8bfd			jmp FStar
=6					CL	.var *-(WordListLink+wh_Xt)
=$8c89					en = *	; remember here
>8c81	06					.byte CL	;wh_CodeLength
>8c89	46 31 30 2a			L1:	.text "F10*"	;  name of word as a string, ending at wh_NameLastChar
>8c8d	04					.byte *-L1	;wh_NameLength	length of name
>8c8e	fe 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8c90	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8c91	08					.byte NN	;wh_Flags	dictionary flags
=35853					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8c92	20 78 84	jsr $8478	F10Star:	jsr FDup
.8c95	a4 4c		ldy $4c				ldy fp
.8c97	b9 4d 00	lda $004d,y			lda FSExp+0,y
.8c9a	18		clc				clc
.8c9b	69 01		adc #$01			adc #1
.8c9d	99 4d 00	sta $004d,y			sta FSExp+0,y
.8ca0	18		clc				clc
.8ca1	69 02		adc #$02			adc #2
.8ca3	99 4e 00	sta $004e,y			sta FSExp+1,y
.8ca6	4c 29 8b	jmp $8b29			jmp FPlus
=23					CL	.var *-(WordListLink+wh_Xt)
=$8ca9					en = *	; remember here
>8c90	17					.byte CL	;wh_CodeLength
>8ca9	46 2f				L1:	.text "F/"	;  name of word as a string, ending at wh_NameLastChar
>8cab	02					.byte *-L1	;wh_NameLength	length of name
>8cac	0d 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8cae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8caf	08					.byte NN	;wh_Flags	dictionary flags
=35883					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8cb0	20 d4 8b	jsr $8bd4	FSlash:		jsr FPos		; make r1 & r2 positive
.8cb3	08		php				php			;   save result sign
.8cb4	b5 4e		lda $4e,x			lda FSExp+1,x		; calc exponent
.8cb6	18		clc				clc
.8cb7	69 01		adc #$01			adc #1
.8cb9	38		sec				sec
.8cba	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8cbc	95 4e		sta $4e,x			sta FSExp+1,x
.8cbe	50 12		bvc $8cd2			bvc _49			;  IfVs
.8cc0	b0 06		bcs $8cc8			bcs _Zero		; underflow?
.8cc2	28		plp				plp			; drop saved result sign
.8cc3	a6 15		ldx $15				ldx tmp1+1		; restore data stack index
.8cc5	20 a2 b3	jsr $b3a2			jsr Throw_FpOutOfRange	; overflow
.8cc8	e8		inx		_Zero:		inx			; F2Drop
.8cc9	e8		inx				inx
.8cca	86 4c		stx $4c				stx fp
.8ccc	28		plp				plp			; drop saved result sign
.8ccd	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8ccf	4c ec 88	jmp $88ec			jmp F0			; return 0
.8cd2					_49:
.8cd2	b5 76		lda $76,x			lda FSMant3+1,x		; tmp32 = r1
.8cd4	85 16		sta $16				sta tmp2+0
.8cd6	b5 6c		lda $6c,x			lda FSMant2+1,x
.8cd8	85 17		sta $17				sta tmp2+1
.8cda	b5 62		lda $62,x			lda FSMant1+1,x
.8cdc	85 18		sta $18				sta tmp3+0
.8cde	b5 58		lda $58,x			lda FSMant0+1,x
.8ce0	85 19		sta $19				sta tmp3+1
.8ce2	20 0b 8d	jsr $8d0b			jsr _Byte
.8ce5	95 58		sta $58,x			sta FSMant0+1,x
.8ce7	20 0b 8d	jsr $8d0b			jsr _Byte
.8cea	95 62		sta $62,x			sta FSMant1+1,x
.8cec	20 0b 8d	jsr $8d0b			jsr _Byte
.8cef	95 6c		sta $6c,x			sta FSMant2+1,x
.8cf1	20 0b 8d	jsr $8d0b			jsr _Byte
.8cf4	95 76		sta $76,x			sta FSMant3+1,x
.8cf6	56 58		lsr $58,x			lsr FSMant0+1,x
.8cf8	76 62		ror $62,x			ror FSMant1+1,x
.8cfa	76 6c		ror $6c,x			ror FSMant2+1,x
.8cfc	76 76		ror $76,x			ror FSMant3+1,x
.8cfe	e6 4c		inc $4c				inc fp			; FDrop
.8d00	a6 14		ldx $14				ldx tmp1+0		; restore X
.8d02	28		plp				plp			; fix sign
.8d03	10 03		bpl $8d08			bpl +
.8d05	20 a2 8b	jsr $8ba2			jsr FNegate
.8d08	4c a0 8a	jmp $8aa0	+		jmp FNorm
.8d0b					_Byte:
.8d0b	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d0d					_1:
.8d0d	a5 19		lda $19				lda tmp3+1		;   if r1>=r2
.8d0f	d5 57		cmp $57,x			cmp FSMant0+0,x
.8d11	d0 10		bne $8d23			bne _4
.8d13	a5 18		lda $18				lda tmp3+0
.8d15	d5 61		cmp $61,x			cmp FSMant1+0,x
.8d17	d0 0a		bne $8d23			bne _4
.8d19	a5 17		lda $17				lda tmp2+1
.8d1b	d5 6b		cmp $6b,x			cmp FSMant2+0,x
.8d1d	d0 04		bne $8d23			bne _4
.8d1f	a5 16		lda $16				lda tmp2+0
.8d21	d5 75		cmp $75,x			cmp FSMant3+0,x
.8d23	90 18		bcc $8d3d	_4:		bcc _2
.8d25	a5 16		lda $16				lda tmp2+0		;     tmp32 -= r2
.8d27	f5 75		sbc $75,x			sbc FSMant3+0,x
.8d29	85 16		sta $16				sta tmp2+0
.8d2b	a5 17		lda $17				lda tmp2+1
.8d2d	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8d2f	85 17		sta $17				sta tmp2+1
.8d31	a5 18		lda $18				lda tmp3+0
.8d33	f5 61		sbc $61,x			sbc FSMant1+0,x
.8d35	85 18		sta $18				sta tmp3+0
.8d37	a5 19		lda $19				lda tmp3+1
.8d39	f5 57		sbc $57,x			sbc FSMant0+0,x
.8d3b	85 19		sta $19				sta tmp3+1
.8d3d	26 15		rol $15		_2:		rol tmp1+1		;   accum quotient bits
.8d3f	06 16		asl $16				asl tmp2+0
.8d41	26 17		rol $17				rol tmp2+1
.8d43	26 18		rol $18				rol tmp3+0
.8d45	26 19		rol $19				rol tmp3+1		;   tmp32<<=1
.8d47	88		dey				dey			;  next
.8d48	d0 c3		bne $8d0d			bne _1
.8d4a	a5 15		lda $15				lda tmp1+1		; return bits
.8d4c	60		rts				rts
=157					CL	.var *-(WordListLink+wh_Xt)
=$8d4d					en = *	; remember here
>8cae	9d					.byte CL	;wh_CodeLength
>8d4d	46 31 2f			L1:	.text "F1/"	;  name of word as a string, ending at wh_NameLastChar
>8d50	03					.byte *-L1	;wh_NameLength	length of name
>8d51	2b 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8d53	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8d54	08					.byte NN	;wh_Flags	dictionary flags
=36048					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8d55	20 28 89	jsr $8928	F1Slash:	jsr F1
.8d58	20 00 85	jsr $8500			jsr FSwap
.8d5b	4c b0 8c	jmp $8cb0			jmp FSlash
=9					CL	.var *-(WordListLink+wh_Xt)
=$8d5e					en = *	; remember here
>8d53	09					.byte CL	;wh_CodeLength
>8d5e	45 2a				L1:	.text "E*"	;  name of word as a string, ending at wh_NameLastChar
>8d60	02					.byte *-L1	;wh_NameLength	length of name
>8d61	d0 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8d63	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8d64	08					.byte NN	;wh_Flags	dictionary flags
=36064					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8d65					EStar:
.8d65	20 d4 8b	jsr $8bd4			jsr FPos		; make r1 & r2 positive
.8d68	08		php				php			;   remember result sign
.8d69	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8d6b	38		sec				sec
.8d6c	75 4e		adc $4e,x			adc FSExp+1,x
.8d6e	95 4e		sta $4e,x			sta FSExp+1,x
.8d70	70 15		bvs $8d87			bvs _ExpOvfl
.8d72	b5 58		lda $58,x			lda FSMant0+1,x		; save e1
.8d74	48		pha				pha
.8d75	b5 62		lda $62,x			lda FSMant1+1,x
.8d77	a0 00		ldy #$00			ldy #0
.8d79	94 58		sty $58,x			sty FSMant0+1,x
.8d7b	94 62		sty $62,x			sty FSMant1+1,x		; zero result
.8d7d	20 96 8d	jsr $8d96			jsr _Byte		; do FSMant1+1 byte
.8d80	68		pla				pla
.8d81	20 96 8d	jsr $8d96			jsr _Byte		; do FSMant0+1 byte
.8d84	4c b3 8d	jmp $8db3			jmp EFix3		; finish
.8d87					_ExpOvfl:
.8d87	b0 05		bcs $8d8e			bcs _Zero		;underflow?
.8d89	a6 14		ldx $14				ldx tmp1+0		; restore X
.8d8b	20 a2 b3	jsr $b3a2			jsr Throw_FpOutOfRange	;overflow
.8d8e	a9 00		lda #$00	_Zero:		lda #0
.8d90	95 62		sta $62,x			sta FSMant1+1,x
.8d92	95 58		sta $58,x			sta FSMant0+1,x
.8d94	f0 1d		beq $8db3			beq EFix3
.8d96					_Byte:
.8d96	85 15		sta $15				sta tmp1+1
.8d98	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d9a	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8d9c	90 0d		bcc $8dab			bcc _b5
.8d9e	18		clc				clc			;     r3 += r2
.8d9f	b5 61		lda $61,x			lda FSMant1+0,x
.8da1	75 62		adc $62,x			adc FSMant1+1,x
.8da3	95 62		sta $62,x			sta FSMant1+1,x
.8da5	b5 57		lda $57,x			lda FSMant0+0,x
.8da7	75 58		adc $58,x			adc FSMant0+1,x
.8da9	95 58		sta $58,x			sta FSMant0+1,x
.8dab					_b5:
.8dab	76 58		ror $58,x			ror FSMant0+1,x		;   r3 <<= 1
.8dad	76 62		ror $62,x			ror FSMant1+1,x
.8daf	88		dey				dey			;  next bit
.8db0	d0 e8		bne $8d9a			bne _b1
.8db2	60		rts				rts
=78					CL	.var *-(WordListLink+wh_Xt)
=$8db3					en = *	; remember here
>8d63	4e					.byte CL	;wh_CodeLength
.8db3					EFix3:
.8db3	a9 00		lda #$00			lda #0			; zero unused mantissa
.8db5	95 6c		sta $6c,x			sta FSMant2+1,x
.8db7	95 76		sta $76,x			sta FSMant3+1,x
.8db9	e6 4c		inc $4c				inc fp			; FDrop
.8dbb	a6 14		ldx $14				ldx tmp1+0		; restore X
.8dbd	28		plp				plp			;fix result sign
.8dbe	10 03		bpl $8dc3			bpl +
.8dc0	4c a2 8b	jmp $8ba2			jmp FNegate
.8dc3	4c a0 8a	jmp $8aa0	+		jmp FNorm
>8dc6	45 53 71 72			L1:	.text "ESqr"	;  name of word as a string, ending at wh_NameLastChar
>8dca	04					.byte *-L1	;wh_NameLength	length of name
>8dcb	e0 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8dcd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8dce	08					.byte NN	;wh_Flags	dictionary flags
=36170					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8dcf	20 78 84	jsr $8478	ESqr:		jsr FDup
.8dd2	4c 65 8d	jmp $8d65			jmp EStar
=6					CL	.var *-(WordListLink+wh_Xt)
=$8dd5					en = *	; remember here
>8dcd	06					.byte CL	;wh_CodeLength
>8dd5	45 2f				L1:	.text "E/"	;  name of word as a string, ending at wh_NameLastChar
>8dd7	02					.byte *-L1	;wh_NameLength	length of name
>8dd8	4a 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8dda	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ddb	08					.byte NN	;wh_Flags	dictionary flags
=36183					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ddc	20 d4 8b	jsr $8bd4	ESlash:		jsr FPos	; make r1 & r2 positive
.8ddf	08		php				php		; remember result sign
.8de0	b5 4e		lda $4e,x			lda FSExp+1,x		; calc r3 exponent
.8de2	38		sec				sec
.8de3	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8de5	70 17		bvs $8dfe			bvs _ExpOvfl
.8de7	18		clc				clc
.8de8	69 01		adc #$01			adc #1
.8dea	95 4e		sta $4e,x			sta FSExp+1,x
.8dec	20 04 8e	jsr $8e04			jsr _Byte		; gen quotient hi byte
.8def	48		pha				pha
.8df0	20 04 8e	jsr $8e04			jsr _Byte		; gen quotient lo byte
.8df3	95 62		sta $62,x			sta FSMant1+1,x
.8df5	68		pla				pla
.8df6	4a		lsr a				lsr a
.8df7	95 58		sta $58,x			sta FSMant0+1,x
.8df9	76 62		ror $62,x			ror FSMant1+1,x
.8dfb	4c b3 8d	jmp $8db3			jmp EFix3
.8dfe					_ExpOvfl:
.8dfe	28		plp				plp			; rdrop saved result sign
.8dff	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e01	20 a2 b3	jsr $b3a2			jsr Throw_FpOutOfRange	; overflow
.8e04					_Byte:
.8e04	a0 08		ldy #$08			ldy #8			; for 8 bits
.8e06	b5 62		lda $62,x	_b1:		lda FSMant1+1,x		;   if r1 >= r2
.8e08	d5 61		cmp $61,x			cmp FSMant1+0,x
.8e0a	b5 58		lda $58,x			lda FSMant0+1,x
.8e0c	f5 57		sbc $57,x			sbc FSMant0+0,x
.8e0e	90 09		bcc $8e19			bcc _b5
.8e10	95 58		sta $58,x			sta FSMant0+1,x
.8e12	b5 62		lda $62,x			lda FSMant1+1,x		;     r1 -= r2
.8e14	f5 61		sbc $61,x			sbc FSMant1+0,x
.8e16	95 62		sta $62,x			sta FSMant1+1,x
.8e18	38		sec				sec
.8e19					_b5:
.8e19	26 15		rol $15				rol tmp1+1		;   save quotient bit
.8e1b	16 62		asl $62,x			asl FSMant1+1,x		;   r1 *= 2
.8e1d	36 58		rol $58,x			rol FSMant0+1,x
.8e1f	88		dey				dey			;  next bit
.8e20	d0 e4		bne $8e06			bne _b1
.8e22	a5 15		lda $15				lda tmp1+1		; return bits
.8e24	60		rts				rts
=73					CL	.var *-(WordListLink+wh_Xt)
=$8e25					en = *	; remember here
>8dda	49					.byte CL	;wh_CodeLength
>8e25	45 31 2f			L1:	.text "E1/"	;  name of word as a string, ending at wh_NameLastChar
>8e28	03					.byte *-L1	;wh_NameLength	length of name
>8e29	57 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e2b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e2c	08					.byte NN	;wh_Flags	dictionary flags
=36264					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e2d	20 28 89	jsr $8928	E1Slash:	jsr F1
.8e30	20 00 85	jsr $8500			jsr FSwap
.8e33	4c dc 8d	jmp $8ddc			jmp ESlash
=9					CL	.var *-(WordListLink+wh_Xt)
=$8e36					en = *	; remember here
>8e2b	09					.byte CL	;wh_CodeLength
>8e36	53 3e 46			L1:	.text "S>F"	;  name of word as a string, ending at wh_NameLastChar
>8e39	03					.byte *-L1	;wh_NameLength	length of name
>8e3a	a8 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e3c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e3d	08					.byte NN	;wh_Flags	dictionary flags
=36281					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e3e	20 40 b3	jsr $b340	SToF:		jsr PopYA		; pop n
.8e41	20 16 84	jsr $8416	SToFYA:		jsr FAllocX		; alloc FP stack entry
.8e44	94 57		sty $57,x			sty FSMant0,x		; copy n to mantissa
.8e46	95 61		sta $61,x			sta FSMant1,x
.8e48	a9 00		lda #$00			lda #0			; pad mantissa
.8e4a	95 6b		sta $6b,x			sta FSMant2,x
.8e4c	95 75		sta $75,x			sta FSMant3,x
.8e4e	a9 0f		lda #$0f			lda #15			; set exponent
.8e50	95 4d		sta $4d,x			sta FSExp,x
.8e52	4c a2 8a	jmp $8aa2			jmp FNormX		; normalize, return
=23					CL	.var *-(WordListLink+wh_Xt)
=$8e55					en = *	; remember here
>8e3c	17					.byte CL	;wh_CodeLength
>8e55	44 3e 46			L1:	.text "D>F"	;  name of word as a string, ending at wh_NameLastChar
>8e58	03					.byte *-L1	;wh_NameLength	length of name
>8e59	b9 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e5b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e5c	08					.byte NN	;wh_Flags	dictionary flags
=36312					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e5d	20 16 84	jsr $8416	FDToF:		jsr FAllocX		; alloc FP stack entry
.8e60	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e62	a4 4c		ldy $4c				ldy fp
.8e64	b5 26		lda $26,x			lda DStack+2,x		; mantissa= d
.8e66	99 75 00	sta $0075,y			sta FSMant3,y
.8e69	b5 27		lda $27,x			lda DStack+3,x
.8e6b	99 6b 00	sta $006b,y			sta FSMant2,y
.8e6e	b5 24		lda $24,x			lda DStack+0,x
.8e70	99 61 00	sta $0061,y			sta FSMant1,y
.8e73	b5 25		lda $25,x			lda DStack+1,x
.8e75	99 57 00	sta $0057,y			sta FSMant0,y
.8e78	a9 1f		lda #$1f			lda #31			; set exponent
.8e7a	99 4d 00	sta $004d,y			sta FSExp,y
.8e7d	20 2b c4	jsr $c42b			jsr Two_Drop
.8e80	4c a0 8a	jmp $8aa0			jmp FNorm		; normalize, return
=38					CL	.var *-(WordListLink+wh_Xt)
=$8e83					en = *	; remember here
>8e5b	26					.byte CL	;wh_CodeLength
>8e83	46 3e 53			L1:	.text "F>S"	;  name of word as a string, ending at wh_NameLastChar
>8e86	03					.byte *-L1	;wh_NameLength	length of name
>8e87	d8 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e89	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e8a	08					.byte NN	;wh_Flags	dictionary flags
=36358					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e8b	a4 4c		ldy $4c		FToS:		ldy fp
.8e8d	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8e90	08		php				php
.8e91	10 03		bpl $8e96			bpl +
.8e93	20 a2 8b	jsr $8ba2			jsr FNegate
.8e96					+
.8e96	a9 0f		lda #$0f			lda #15
.8e98	20 a5 86	jsr $86a5			jsr FIntAlignA
.8e9b	c0 10		cpy #$10			cpy #15+1		; always positive, so unsigned compare works
.8e9d	b0 17		bcs $8eb6			bcs _overflow
.8e9f	a4 4c		ldy $4c				ldy fp
.8ea1	ca		dex				dex
.8ea2	ca		dex				dex
.8ea3	b9 57 00	lda $0057,y			lda FSMant0,y
.8ea6	95 25		sta $25,x			sta DStack+1,x
.8ea8	b9 61 00	lda $0061,y			lda FSMant1,y
.8eab	95 24		sta $24,x			sta DStack+0,x
.8ead	e6 4c		inc $4c				inc fp			; FDrop
.8eaf	28		plp				plp			; apply saved sign
.8eb0	30 01		bmi $8eb3			bmi +
.8eb2	60		rts				rts
.8eb3	4c 84 c5	jmp $c584	+		jmp Negate
.8eb6	28		plp		_overflow:	plp			; RDrop saved sign
.8eb7	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8eb9	20 c9 b3	jsr $b3c9			jsr ThrowA
=49					CL	.var *-(WordListLink+wh_Xt)
=$8ebc					en = *	; remember here
>8e89	31					.byte CL	;wh_CodeLength
>8ebc	46 3e 44			L1:	.text "F>D"	;  name of word as a string, ending at wh_NameLastChar
>8ebf	03					.byte *-L1	;wh_NameLength	length of name
>8ec0	06 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ec2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ec3	08					.byte NN	;wh_Flags	dictionary flags
=36415					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ec4	a4 4c		ldy $4c		FToD:		ldy fp
.8ec6	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8ec9	08		php				php
.8eca	10 03		bpl $8ecf			bpl +
.8ecc	20 a2 8b	jsr $8ba2			jsr FNegate
.8ecf					+
.8ecf	a9 1f		lda #$1f			lda #31
.8ed1	20 a5 86	jsr $86a5			jsr FIntAlignA
.8ed4	c0 20		cpy #$20			cpy #31+1		; always positive, so unsigned compare works
.8ed6	b0 23		bcs $8efb			bcs _overflow
.8ed8	a4 4c		ldy $4c				ldy fp
.8eda	ca		dex				dex			; d= mantissa
.8edb	ca		dex				dex
.8edc	ca		dex				dex
.8edd	ca		dex				dex
.8ede	b9 57 00	lda $0057,y			lda FSMant0,y
.8ee1	95 25		sta $25,x			sta DStack+1,x
.8ee3	b9 61 00	lda $0061,y			lda FSMant1,y
.8ee6	95 24		sta $24,x			sta DStack+0,x
.8ee8	b9 6b 00	lda $006b,y			lda FSMant2,y
.8eeb	95 27		sta $27,x			sta DStack+3,x
.8eed	b9 75 00	lda $0075,y			lda FSMant3,y
.8ef0	95 26		sta $26,x			sta DStack+2,x
.8ef2	e6 4c		inc $4c				inc fp			; FDrop
.8ef4	28		plp				plp			; apply saved sign
.8ef5	30 01		bmi $8ef8			bmi +
.8ef7	60		rts				rts
.8ef8	4c b5 c5	jmp $c5b5	+		jmp DNegate
.8efb	28		plp		_overflow:	plp			; RDrop sign
.8efc	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8efe	20 c9 b3	jsr $b3c9			jsr ThrowA
=61					CL	.var *-(WordListLink+wh_Xt)
=$8f01					en = *	; remember here
>8ec2	3d					.byte CL	;wh_CodeLength
>8f01	46 52 6e 64			L1:	.text "FRnd"	;  name of word as a string, ending at wh_NameLastChar
>8f05	04					.byte *-L1	;wh_NameLength	length of name
>8f06	3f 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f08	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f09	08					.byte NN	;wh_Flags	dictionary flags
=36485					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f0a	20 df 82	jsr $82df	FRnd:		jsr Rand		; generate next RndState
.8f0d	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.8f10	4a		lsr a				lsr a			;   make positive
.8f11	95 57		sta $57,x			sta FSMant0,x
.8f13	94 61		sty $61,x			sty FSMant1,x
.8f15	ad 35 03	lda $0335			lda RndState+0
.8f18	95 6b		sta $6b,x			sta FSMant2,x
.8f1a	ad 36 03	lda $0336			lda RndState+1
.8f1d	95 75		sta $75,x			sta FSMant3,x
.8f1f	a9 00		lda #$00			lda #0			; exponent=0
.8f21	95 4d		sta $4d,x			sta FSExp,x
.8f23	4c a2 8a	jmp $8aa2			jmp FNormX		; normalize, return
=28					CL	.var *-(WordListLink+wh_Xt)
=$8f26					en = *	; remember here
>8f08	1c					.byte CL	;wh_CodeLength
>8f26	46 53 71 72 74			L1:	.text "FSqrt"	;  name of word as a string, ending at wh_NameLastChar
>8f2b	05					.byte *-L1	;wh_NameLength	length of name
>8f2c	85 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f2e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f2f	08					.byte NN	;wh_Flags	dictionary flags
=36523					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f30	a4 4c		ldy $4c		FSqrt:		ldy fp
.8f32	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.8f35	d0 01		bne $8f38			bne +
.8f37	60		rts				rts			;   just return the zero
.8f38					+
.8f38	20 78 84	jsr $8478			jsr FDup		; get trial value
.8f3b	a4 4c		ldy $4c				ldy fp
.8f3d	b9 4d 00	lda $004d,y			lda FSExp,y		; halve the exponent of trial value
.8f40	c9 80		cmp #$80			cmp #$80
.8f42	6a		ror a				ror a
.8f43	99 4d 00	sta $004d,y			sta FSExp,y
.8f46	a9 09		lda #$09			lda #9			; for 9 iterations
.8f48	48		pha		_3:		pha
.8f49	20 f0 84	jsr $84f0			jsr F2Dup		;   calc new trial value
.8f4c	20 b0 8c	jsr $8cb0			jsr FSlash
.8f4f	20 29 8b	jsr $8b29			jsr FPlus
.8f52	20 20 8a	jsr $8a20			jsr F2Slash
.8f55	68		pla				pla			;  next
.8f56	38		sec				sec
.8f57	e9 01		sbc #$01			sbc #1
.8f59	d0 ed		bne $8f48			bne _3
.8f5b	4c 52 84	jmp $8452			jmp FNip		; return trial value
=46					CL	.var *-(WordListLink+wh_Xt)
=$8f5e					en = *	; remember here
>8f2e	2e					.byte CL	;wh_CodeLength
>8f5e	48 65 78 3e 46			L1:	.text "Hex>F"	;  name of word as a string, ending at wh_NameLastChar
>8f63	05					.byte *-L1	;wh_NameLength	length of name
>8f64	ab 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f66	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f67	08					.byte NN	;wh_Flags	dictionary flags
=36579					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f68	20 16 84	jsr $8416	HexToF:		jsr FAllocX		; alloc FP stack entry
.8f6b	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8f6d	a4 4c		ldy $4c				ldy fp			; Y= FP stack index
.8f6f	20 24 b3	jsr $b324			jsr PopA		; pop n_exp
.8f72	99 4d 00	sta $004d,y			sta FSExp,y
.8f75	b5 25		lda $25,x			lda DStack+1,x
.8f77	99 57 00	sta $0057,y			sta FSMant0,y
.8f7a	b5 24		lda $24,x			lda DStack+0,x
.8f7c	99 61 00	sta $0061,y			sta FSMant1,y
.8f7f	b5 27		lda $27,x			lda DStack+3,x
.8f81	99 6b 00	sta $006b,y			sta FSMant2,y
.8f84	b5 26		lda $26,x			lda DStack+2,x
.8f86	99 75 00	sta $0075,y			sta FSMant3,y
.8f89	4c 2b c4	jmp $c42b			jmp Two_Drop
=36					CL	.var *-(WordListLink+wh_Xt)
=$8f8c					en = *	; remember here
>8f66	24					.byte CL	;wh_CodeLength
>8f8c	46 3e 48 65 78			L1:	.text "F>Hex"	;  name of word as a string, ending at wh_NameLastChar
>8f91	05					.byte *-L1	;wh_NameLength	length of name
>8f92	e3 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f94	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f95	08					.byte NN	;wh_Flags	dictionary flags
=36625					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f96	a4 4c		ldy $4c		FToHex:		ldy fp		; Y= FP stack index
.8f98	ca		dex				dex
.8f99	ca		dex				dex
.8f9a	ca		dex				dex
.8f9b	ca		dex				dex
.8f9c	ca		dex				dex
.8f9d	ca		dex				dex
.8f9e	b9 57 00	lda $0057,y			lda FSMant0,y	; copy mantissa
.8fa1	95 27		sta $27,x			sta DStack+3,x
.8fa3	b9 61 00	lda $0061,y			lda FSMant1,y
.8fa6	95 26		sta $26,x			sta DStack+2,x
.8fa8	b9 6b 00	lda $006b,y			lda FSMant2,y
.8fab	95 29		sta $29,x			sta DStack+5,x
.8fad	b9 75 00	lda $0075,y			lda FSMant3,y
.8fb0	95 28		sta $28,x			sta DStack+4,x
.8fb2	b9 4d 00	lda $004d,y			lda FSExp,y	; copy exponent
.8fb5	95 24		sta $24,x			sta DStack+0,x
.8fb7	29 80		and #$80			and #$80	;   sign extend
.8fb9	f0 02		beq $8fbd			beq +
.8fbb	a9 ff		lda #$ff			lda #$ff
.8fbd	95 25		sta $25,x	+		sta DStack+1,x
.8fbf	e6 4c		inc $4c				inc fp		; FDrop
.8fc1	60		rts				rts
=44					CL	.var *-(WordListLink+wh_Xt)
=$8fc2					en = *	; remember here
>8f94	2c					.byte CL	;wh_CodeLength
>8fc2	46 2e 48 65 78			L1:	.text "F.Hex"	;  name of word as a string, ending at wh_NameLastChar
>8fc7	05					.byte *-L1	;wh_NameLength	length of name
>8fc8	11 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8fca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8fcb	08					.byte NN	;wh_Flags	dictionary flags
=36679					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8fcc	20 96 8f	jsr $8f96	FDotHex:	jsr FToHex	; get parts of r
.8fcf	20 94 cd	jsr $cd94			jsr Not_Rot
.8fd2	20 12 a8	jsr $a812			jsr Dot_Hex	; do mantissa
.8fd5	20 12 a8	jsr $a812			jsr Dot_Hex
.8fd8	a9 3a		lda #$3a			lda #':'
.8fda	20 d8 cc	jsr $ccd8			jsr Emit_A
.8fdd	4c f0 a7	jmp $a7f0			jmp C_Dot_Hex	; do exponent
=20					CL	.var *-(WordListLink+wh_Xt)
=$8fe0					en = *	; remember here
>8fca	14					.byte CL	;wh_CodeLength
>8fe0	28 46 2e 29			L1:	.text "(F.)"	;  name of word as a string, ending at wh_NameLastChar
>8fe4	04					.byte *-L1	;wh_NameLength	length of name
>8fe5	47 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8fe7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8fe8	08					.byte NN	;wh_Flags	dictionary flags
=36708					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8fe9	20 66 90	jsr $9066	PFDot:		jsr pfcst		;start collecting chars, make r positive
.8fec	20 f2 8f	jsr $8ff2			jsr PFDotSub
.8fef	4c 84 90	jmp $9084			jmp pfcen
.8ff2					PFDotSub:
.8ff2	20 ba 83	jsr $83ba			jsr Precision	;alloc & init work area
.8ff5	20 53 b7	jsr $b753			jsr One
=$27					_mantNzFound  = DStack+3	; nonzero mantissa digit processed
=$26					_NumSigDigits = DStack+2	; # of significant digits
=$24					_decimalPos   = DStack+0	; decimal point position
.8ff8	20 46 90	jsr $9046			jsr FLt10		; scale down to <10, counting exponent
.8ffb					_c:
.8ffb	b5 24		lda $24,x			lda _decimalPos,x	;  insert decimal point here?
.8ffd	d0 05		bne $9004			bne _c2
.8fff	a9 2e		lda #$2e			lda #'.'
.9001	20 7b 90	jsr $907b			jsr pfch
.9004	d6 24		dec $24,x	_c2:		dec _decimalPos,x
.9006	20 78 84	jsr $8478			jsr FDup		;  do a digit
.9009	20 8b 8e	jsr $8e8b			jsr FToS		; ( work n )
.900c	b5 24		lda $24,x			lda DStack+0,x
.900e	15 29		ora $29,x			ora _mantNzFound+2,x	;  doing significant digits?
.9010	95 29		sta $29,x			sta _mantNzFound+2,x
.9012	f0 08		beq $901c			beq _c7
.9014	d6 28		dec $28,x			dec _NumSigDigits+2,x
.9016	10 04		bpl $901c			bpl +
.9018	e8		inx				inx			;    drop integer
.9019	e8		inx				inx
.901a	d0 17		bne $9033			bne _d
.901c					+
.901c	b5 24		lda $24,x	_c7:		lda DStack+0,x		;  store the char
.901e	09 30		ora #$30			ora #'0'
.9020	20 7b 90	jsr $907b			jsr pfch
.9023	20 3e 8e	jsr $8e3e			jsr SToF		; ( work )
.9026	20 6b 8b	jsr $8b6b			jsr FMinus
.9029	20 92 8c	jsr $8c92			jsr F10Star
.902c	a4 4c		ldy $4c				ldy fp			;  until mantissa==0
.902e	b9 57 00	lda $0057,y			lda FSMant0,y
.9031	d0 c8		bne $8ffb			bne _c
.9033	d6 24		dec $24,x	_d:		dec _decimalPos,x	;do trailing zeros
.9035	30 08		bmi $903f			bmi _d9
.9037	a9 30		lda #$30			lda #'0'
.9039	20 7b 90	jsr $907b			jsr pfch
.903c	4c 33 90	jmp $9033			jmp _d
.903f					_d9:
.903f	e8		inx				inx			; drop work area
.9040	e8		inx				inx
.9041	e8		inx				inx
.9042	e8		inx				inx
.9043	e6 4c		inc $4c				inc fp			; FDrop
.9045	60		rts				rts
=93					CL	.var *-(WordListLink+wh_Xt)
=$9046					en = *	; remember here
>8fe7	5d					.byte CL	;wh_CodeLength
.9046					FLt10:
.9046	a4 4c		ldy $4c		_1:		ldy fp			; while r >= 10
.9048	b9 4d 00	lda $004d,y			lda FSExp,y
.904b	30 18		bmi $9065			bmi _9			;   exponent negative?
.904d	c9 04		cmp #$04			cmp #4
.904f	90 14		bcc $9065			bcc _9			;   < 4 ?
.9051	d0 07		bne $905a			bne _2			;   > 4 ?
.9053	b9 57 00	lda $0057,y			lda FSMant0,y
.9056	c9 50		cmp #$50			cmp #$50
.9058	90 0b		bcc $9065			bcc _9
.905a	f6 24		inc $24,x	_2:		inc DStack+0,x		;   exp ++
.905c	20 0c 89	jsr $890c			jsr F10			;   r /= 10
.905f	20 b0 8c	jsr $8cb0			jsr FSlash
.9062	4c 46 90	jmp $9046			jmp _1
.9065	60		rts		_9:		rts
.9066					pfcst:
.9066	a9 01		lda #$01			lda #1
.9068	8d 34 03	sta $0334			sta ToHold
.906b	a4 4c		ldy $4c				ldy fp			; if r1 negative
.906d	b9 57 00	lda $0057,y			lda FSMant0,y
.9070	10 08		bpl $907a			bpl _19
.9072	a9 2d		lda #$2d			lda #'-'		;   append sign
.9074	20 7b 90	jsr $907b			jsr pfch
.9077	4c a2 8b	jmp $8ba2			jmp FNegate		;   make positive, return
.907a	60		rts		_19:		rts
.907b					pfch:
.907b	ac 34 03	ldy $0334			ldy ToHold
.907e	91 00		sta ($00),y			sta (cp),y
.9080	ee 34 03	inc $0334			inc ToHold
.9083	60		rts				rts
.9084					pfcen:
.9084	ad 34 03	lda $0334			lda ToHold
.9087	38		sec				sec
.9088	e9 01		sbc #$01			sbc #1
.908a	a0 00		ldy #$00			ldy #0
.908c	91 00		sta ($00),y			sta (cp),y		; fill in length
.908e	4c 2c c9	jmp $c92c			jmp Here		; push start addr
.9091					pfciA:
.9091	a8		tay				tay
.9092	10 0a		bpl $909e			bpl _15			; IfMi,
.9094	49 ff		eor #$ff			eor #$ff
.9096	18		clc				clc
.9097	69 01		adc #$01			adc #1
.9099	48		pha				pha
.909a	a9 2d		lda #$2d			lda #'-'
.909c	d0 03		bne $90a1			bne _19
.909e	48		pha		_15:		pha
.909f	a9 2b		lda #$2b			lda #'+'
.90a1					_19:
.90a1	20 7b 90	jsr $907b			jsr pfch
.90a4	68		pla				pla
.90a5	a0 2f		ldy #$2f			ldy #'0'-1
.90a7	c8		iny		_20:		iny
.90a8	38		sec				sec
.90a9	e9 0a		sbc #$0a			sbc #10
.90ab	b0 fa		bcs $90a7			bcs _20
.90ad	69 0a		adc #$0a			adc #10
.90af	48		pha				pha
.90b0	98		tya				tya
.90b1	20 7b 90	jsr $907b			jsr pfch
.90b4	68		pla				pla
.90b5	09 30		ora #$30			ora #'0'
.90b7	d0 c2		bne $907b			bne pfch
>90b9	46 2e				L1:	.text "F."	;  name of word as a string, ending at wh_NameLastChar
>90bb	02					.byte *-L1	;wh_NameLength	length of name
>90bc	64 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90bf	08					.byte NN	;wh_Flags	dictionary flags
=36923					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90c0	20 e9 8f	jsr $8fe9	FDot:		jsr PFDot
.90c3	20 0e b1	jsr $b10e	FDot2:		jsr Count
.90c6	20 f2 cc	jsr $ccf2			jsr Type
.90c9	4c e5 cc	jmp $cce5			jmp Space
=12					CL	.var *-(WordListLink+wh_Xt)
=$90cc					en = *	; remember here
>90be	0c					.byte CL	;wh_CodeLength
>90cc	46 2e 53			L1:	.text "F.S"	;  name of word as a string, ending at wh_NameLastChar
>90cf	03					.byte *-L1	;wh_NameLength	length of name
>90d0	3b 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90d3	08					.byte NN	;wh_Flags	dictionary flags
=36943					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90d4	a9 09		lda #$09	FDotS:		lda #FDim-1	; for each FP stack entry
.90d6	d0 0b		bne $90e3			bne _8
.90d8	48		pha		_2:		pha
.90d9	20 c6 84	jsr $84c6			jsr FPick3	;   print it
.90dc	20 c0 90	jsr $90c0			jsr FDot
.90df	68		pla				pla		;  next
.90e0	38		sec				sec
.90e1	e9 01		sbc #$01			sbc #1
.90e3	c5 4c		cmp $4c		_8:		cmp fp
.90e5	b0 f1		bcs $90d8			bcs _2
=19					CL	.var *-(WordListLink+wh_Xt)
=$90e7					en = *	; remember here
>90d2	13					.byte CL	;wh_CodeLength
.90e7	60		rts				rts
>90e8	28 46 53 2e 29			L1:	.text "(FS.)"	;  name of word as a string, ending at wh_NameLastChar
>90ed	05					.byte *-L1	;wh_NameLength	length of name
>90ee	4f 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90f1	08					.byte NN	;wh_Flags	dictionary flags
=36973					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90f2	20 49 b7	jsr $b749	PFSDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.90f5	20 66 90	jsr $9066			jsr pfcst		; start collecting chars, make r positive
.90f8	20 46 90	jsr $9046			jsr FLt10		; scale down to <10
.90fb	a4 4c		ldy $4c		_c1:		ldy fp			; while r < 1
.90fd	b9 57 00	lda $0057,y			lda FSMant0,y		;   mantissa == 0 ?
.9100	f0 0f		beq $9111			beq _c9
.9102	b9 4d 00	lda $004d,y			lda FSExp,y		;   exp < 1 ?
.9105	f0 02		beq $9109			beq _c2
.9107	10 08		bpl $9111			bpl _c9
.9109	d6 24		dec $24,x	_c2:		dec DStack+0,x		;  exp -= 1
.910b	20 92 8c	jsr $8c92			jsr F10Star		;  r *= 10
.910e	4c fb 90	jmp $90fb			jmp _c1
.9111					_c9:
.9111	20 f2 8f	jsr $8ff2	PFSDotM:	jsr PFDotSub		; do mantissa
.9114	a9 45		lda #$45			lda #'E'
.9116	20 7b 90	jsr $907b			jsr pfch		; do exponent
.9119	b5 24		lda $24,x			lda DStack+0,x		;   _exp
.911b	20 91 90	jsr $9091			jsr pfciA
.911e	e8		inx				inx			; Drop work area
.911f	e8		inx				inx
.9120	4c 84 90	jmp $9084			jmp pfcen		; finish string
=49					CL	.var *-(WordListLink+wh_Xt)
=$9123					en = *	; remember here
>90f0	31					.byte CL	;wh_CodeLength
>9123	46 53 2e			L1:	.text "FS."	;  name of word as a string, ending at wh_NameLastChar
>9126	03					.byte *-L1	;wh_NameLength	length of name
>9127	6d 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9129	03					.byte 3		;wh_CodeLength  (with placeholder value)
>912a	08					.byte NN	;wh_Flags	dictionary flags
=37030					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.912b	20 f2 90	jsr $90f2	FSDot:		jsr PFSDot
.912e	4c c3 90	jmp $90c3			jmp FDot2
=6					CL	.var *-(WordListLink+wh_Xt)
=$9131					en = *	; remember here
>9129	06					.byte CL	;wh_CodeLength
>9131	28 46 45 2e 29			L1:	.text "(FE.)"	;  name of word as a string, ending at wh_NameLastChar
>9136	05					.byte *-L1	;wh_NameLength	length of name
>9137	a6 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9139	03					.byte 3		;wh_CodeLength  (with placeholder value)
>913a	08					.byte NN	;wh_Flags	dictionary flags
=37046					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.913b	20 49 b7	jsr $b749	PFEDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.913e	20 66 90	jsr $9066			jsr pfcst		; start collecting chars, make r positive
.9141	a4 4c		ldy $4c		_30:		ldy fp			; while r < 1
.9143	b9 57 00	lda $0057,y			lda FSMant0,y
.9146	f0 16		beq $915e			beq _39
.9148	b9 4d 00	lda $004d,y			lda FSExp,y
.914b	f0 02		beq $914f			beq _31
.914d	10 0f		bpl $915e			bpl _39
.914f	d6 24		dec $24,x	_31:		dec _exp,x		;  exp -= 3
.9151	d6 24		dec $24,x			dec _exp,x
.9153	d6 24		dec $24,x			dec _exp,x
.9155	20 fd 88	jsr $88fd			jsr F1000		;  r *= 1000
.9158	20 fd 8b	jsr $8bfd			jsr FStar
.915b	4c 41 91	jmp $9141			jmp _30
.915e					_39:
.915e	a4 4c		ldy $4c		_a:		ldy fp			; while r >= 1000
.9160	b9 4d 00	lda $004d,y			lda FSExp,y
.9163	30 1c		bmi $9181			bmi _a9			; exponent negative?
.9165	c9 0a		cmp #$0a			cmp #10
.9167	90 18		bcc $9181			bcc _a9			;   < 10 ?
.9169	d0 07		bne $9172			bne _a2			;   > 10 ?
.916b	b9 57 00	lda $0057,y			lda FSMant0,y
.916e	c9 7d		cmp #$7d			cmp #$7d
.9170	90 0f		bcc $9181			bcc _a9
.9172	f6 24		inc $24,x	_a2:		inc _exp,x		;   exp += 3
.9174	f6 24		inc $24,x			inc _exp,x
.9176	f6 24		inc $24,x			inc _exp,x
.9178	20 fd 88	jsr $88fd			jsr F1000		;   r /= 1000
.917b	20 b0 8c	jsr $8cb0			jsr FSlash
.917e	4c 5e 91	jmp $915e			jmp _a
.9181					_a9:
.9181	4c 11 91	jmp $9111			jmp PFSDotM
=73					CL	.var *-(WordListLink+wh_Xt)
=$9184					en = *	; remember here
>9139	49					.byte CL	;wh_CodeLength
>9184	46 45 2e			L1:	.text "FE."	;  name of word as a string, ending at wh_NameLastChar
>9187	03					.byte *-L1	;wh_NameLength	length of name
>9188	b6 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>918a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>918b	08					.byte NN	;wh_Flags	dictionary flags
=37127					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.918c	20 3b 91	jsr $913b	FEDot:		jsr PFEDot
.918f	4c c3 90	jmp $90c3			jmp FDot2
=6					CL	.var *-(WordListLink+wh_Xt)
=$9192					en = *	; remember here
>918a	06					.byte CL	;wh_CodeLength
>9192	46 22				L1:	.text 'F"'	;  name of word as a string, ending at wh_NameLastChar
>9194	02					.byte *-L1	;wh_NameLength	length of name
>9195	07 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9197	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9198	0c					.byte IM+NN	;wh_Flags	dictionary flags
=37140					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9199	20 e9 b9	jsr $b9e9	FQuote:		jsr Parse_Name		; get string
.919c	20 bd 91	jsr $91bd			jsr ToFloat		; convert
.919f	b5 24		lda $24,x			lda DStack+0,x		; error?
.91a1	f0 0a		beq $91ad			beq _Err
.91a3	e8		inx				inx
.91a4	e8		inx				inx
.91a5	a5 0a		lda $0a				lda State		; compiling?
.91a7	d0 01		bne $91aa			bne _compile
.91a9	60		rts				rts
.91aa	4c 7c 88	jmp $887c	_compile:	jmp FLiteral		; compile a FP literal
.91ad	a9 36		lda #$36	_Err:		lda #100+err_FPInvalidArg
.91af	20 c9 b3	jsr $b3c9			jsr ThrowA
=25					CL	.var *-(WordListLink+wh_Xt)
=$91b2					en = *	; remember here
>9197	19					.byte CL	;wh_CodeLength
>91b2	3e 46 6c 6f 61 74		L1:	.text ">Float"	;  name of word as a string, ending at wh_NameLastChar
>91b8	06					.byte *-L1	;wh_NameLength	length of name
>91b9	14 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>91bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>91bc	08					.byte NN	;wh_Flags	dictionary flags
=37176					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.91bd					ToFloat:
.91bd	20 49 b7	jsr $b749			jsr Zero	; alloc & init workspace
.91c0	20 49 b7	jsr $b749			jsr Zero
.91c3	20 49 b7	jsr $b749			jsr Zero
=$2c					_addr		= DStack+8
=$2a					_len		= DStack+6
=$29					_mantfound 	= DStack+5		;mantissa digits found
=$28					_exponent 	= DStack+4		;exponent
=$27					_decimalPos 	= DStack+3		;decimal point position
=$26					_DecPointFound1 = DStack+2
=$25					_MantissaNegative1 = DStack+1
=$24					_ExponentNegative1 = DStack+0
.91c6	20 ec 88	jsr $88ec			jsr F0			; init result
.91c9	20 9b 92	jsr $929b	_11:		jsr _GetChar		; get mantissa prefix
.91cc	b0 57		bcs $9225			bcs _trueb ;_finishb
.91ce	c9 20		cmp #$20			cmp #' '
.91d0	f0 f7		beq $91c9			beq _11
.91d2	c9 2b		cmp #$2b			cmp #'+'
.91d4	f0 06		beq $91dc			beq _20
.91d6	c9 2d		cmp #$2d			cmp #'-'
.91d8	d0 07		bne $91e1			bne _21
.91da	95 25		sta $25,x			sta _MantissaNegative1,x ; remember mantissa is negative
.91dc	20 9b 92	jsr $929b	_20:		jsr _GetChar		; do next mantissa digits
.91df	b0 47		bcs $9228			bcs _finishb
.91e1	c9 2e		cmp #$2e	_21:		cmp #'.'
.91e3	f0 31		beq $9216			beq _27
.91e5	c9 45		cmp #$45			cmp #'E'
.91e7	f0 42		beq $922b			beq _30
.91e9	c9 65		cmp #$65			cmp #'e'
.91eb	f0 3e		beq $922b			beq _30
.91ed	c9 44		cmp #$44			cmp #'D'
.91ef	f0 3a		beq $922b			beq _30
.91f1	c9 64		cmp #$64			cmp #'d'
.91f3	f0 36		beq $922b			beq _30
.91f5	38		sec				sec			;   a digit?
.91f6	e9 30		sbc #$30			sbc #'0'
.91f8	90 24		bcc $921e			bcc _fail
.91fa	c9 0a		cmp #$0a			cmp #9+1
.91fc	b0 20		bcs $921e			bcs _fail
.91fe	48		pha				pha			; append digit to mantissa
.91ff	20 92 8c	jsr $8c92			jsr F10Star
.9202	68		pla				pla
.9203	a0 00		ldy #$00			ldy #0
.9205	20 41 8e	jsr $8e41			jsr SToFYA
.9208	20 29 8b	jsr $8b29			jsr FPlus
.920b	f6 29		inc $29,x			inc _mantfound,x	; remember we found a mantissa digit
.920d	b5 26		lda $26,x			lda _DecPointFound1,x	; if mantissa decimal point found
.920f	f0 02		beq $9213			beq +
.9211	d6 27		dec $27,x			dec _decimalPos,x	;   increment decimal point position
.9213					+
.9213	4c dc 91	jmp $91dc			jmp _20
.9216					_27:
.9216	b4 26		ldy $26,x			ldy _DecPointFound1,x	; already have one?
.9218	d0 04		bne $921e			bne _fail
.921a	95 26		sta $26,x			sta _DecPointFound1,x	; we have one now!
.921c	f0 be		beq $91dc			beq _20
.921e					_fail:
.921e	20 e4 83	jsr $83e4			jsr FDrop
.9221	a9 00		lda #$00			lda #0			;return false
.9223	f0 69		beq $928e			beq _return
.9225	4c 8c 92	jmp $928c	_trueb:		jmp _true
.9228	4c 59 92	jmp $9259	_finishb:	jmp _finish
.922b					_30:
.922b	20 9b 92	jsr $929b			jsr _GetChar
.922e	b0 29		bcs $9259			bcs _finish
.9230	c9 2b		cmp #$2b			cmp #'+'
.9232	f0 06		beq $923a			beq _40
.9234	c9 2d		cmp #$2d			cmp #'-'
.9236	d0 07		bne $923f			bne _41
.9238	95 24		sta $24,x			sta _ExponentNegative1,x ; remember exponent is negative
.923a	20 9b 92	jsr $929b	_40:		jsr _GetChar		;get exponent digits
.923d	b0 1a		bcs $9259			bcs _finish
.923f	38		sec		_41:		sec			;  digit?
.9240	e9 30		sbc #$30			sbc #'0'
.9242	90 da		bcc $921e			bcc _fail
.9244	c9 0a		cmp #$0a			cmp #9+1
.9246	b0 d6		bcs $921e			bcs _fail
.9248	85 14		sta $14				sta tmp1
.924a	16 28		asl $28,x			asl _exponent,x		;  exponent *= 10
.924c	b5 28		lda $28,x			lda _exponent,x
.924e	0a		asl a				asl a
.924f	0a		asl a				asl a
.9250	75 28		adc $28,x			adc _exponent,x
.9252	65 14		adc $14				adc tmp1		;  + digit
.9254	95 28		sta $28,x			sta _exponent,x
.9256	4c 3a 92	jmp $923a			jmp _40
.9259					_finish:
.9259	b5 29		lda $29,x			lda _mantfound,x	;some mantissa digits found?
.925b	f0 c1		beq $921e			beq _fail
.925d	b5 24		lda $24,x			lda _ExponentNegative1,x ;apply exponent sign
.925f	f0 07		beq $9268			beq +
.9261	a9 00		lda #$00			lda #0
.9263	38		sec				sec
.9264	f5 28		sbc $28,x			sbc _exponent,x
.9266	95 28		sta $28,x			sta _exponent,x
.9268					+
.9268	b5 28		lda $28,x			lda _exponent,x		;apply decimal position to exponent
.926a	18		clc				clc
.926b	75 27		adc $27,x			adc _decimalPos,x
.926d	95 28		sta $28,x			sta _exponent,x
.926f	4c 77 92	jmp $9277			jmp _93
.9272	20 92 8c	jsr $8c92	_93b:		jsr F10Star		;apply exponent to mantissa
.9275	d6 28		dec $28,x			dec _exponent,x
.9277	f0 0a		beq $9283	_93:		beq _94
.9279	10 f7		bpl $9272			bpl _93b
.927b	20 0c 89	jsr $890c	_94b:		jsr F10
.927e	20 b0 8c	jsr $8cb0			jsr FSlash
.9281	f6 28		inc $28,x			inc _exponent,x
.9283	30 f6		bmi $927b	_94:		bmi _94b
.9285					_95:
.9285	b5 25		lda $25,x			lda _MantissaNegative1,x ;apply mantissa sign
.9287	f0 03		beq $928c			beq +
.9289	20 a2 8b	jsr $8ba2			jsr FNegate
.928c					+
.928c	a9 ff		lda #$ff	_true:		lda #$ff		;return true
.928e					_return:
.928e	95 2c		sta $2c,x			sta _addr+0,x		; replace _addr with flag
.9290	95 2d		sta $2d,x			sta _addr+1,x
.9292	e8		inx				inx			; Drop work
.9293	e8		inx				inx
.9294	e8		inx				inx			; 2Drop work
.9295	e8		inx				inx
.9296	e8		inx				inx
.9297	e8		inx				inx
.9298	e8		inx				inx			; Drop len
.9299	e8		inx				inx
.929a	60		rts				rts
.929b					_GetChar:
.929b	38		sec				sec
.929c	b5 2a		lda $2a,x			lda _len,x
.929e	f0 0b		beq $92ab			beq _gc_rts		; if end, return C=1
.92a0	d6 2a		dec $2a,x			dec _len,x
.92a2	a1 2c		lda ($2c,x)			lda (_addr,x)
.92a4	f6 2c		inc $2c,x			inc _addr+0,x
.92a6	d0 02		bne $92aa			bne +
.92a8	f6 2d		inc $2d,x			inc _addr+1,x
.92aa					+
.92aa	18		clc				clc			; get char, return C=0
.92ab	60		rts		_gc_rts:	rts
>92ac	53 46 40			L1:	.text "SF@"	;  name of word as a string, ending at wh_NameLastChar
>92af	03					.byte *-L1	;wh_NameLength	length of name
>92b0	38 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>92b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>92b3	08					.byte NN	;wh_Flags	dictionary flags
=37423					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.92b4	20 40 b3	jsr $b340	SFAt:		jsr PopYA		; pop sf_addr
.92b7	85 16		sta $16		SFAt_YA:	sta tmp2+0		; save sf_addr
.92b9	84 17		sty $17				sty tmp2+1
.92bb	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.92be	a0 01		ldy #$01			ldy #1			; copy exponent
.92c0	b1 16		lda ($16),y			lda (tmp2),y
.92c2	0a		asl a				asl a
.92c3	88		dey				dey
.92c4	b1 16		lda ($16),y			lda (tmp2),y
.92c6	2a		rol a				rol a
.92c7	38		sec				sec
.92c8	e9 7e		sbc #$7e			sbc #126
.92ca	95 4d		sta $4d,x			sta FSExp,x
.92cc	a0 01		ldy #$01			ldy #1			; copy mantissa
.92ce	b1 16		lda ($16),y			lda (tmp2),y
.92d0	09 80		ora #$80			ora #$80
.92d2	4a		lsr a				lsr a
.92d3	95 57		sta $57,x			sta FSMant0,x
.92d5	c8		iny				iny
.92d6	b1 16		lda ($16),y			lda (tmp2),y
.92d8	6a		ror a				ror a
.92d9	95 61		sta $61,x			sta FSMant1,x
.92db	c8		iny				iny
.92dc	b1 16		lda ($16),y			lda (tmp2),y
.92de	6a		ror a				ror a
.92df	95 6b		sta $6b,x			sta FSMant2,x
.92e1	a9 00		lda #$00			lda #0
.92e3	6a		ror a				ror a
.92e4	95 75		sta $75,x			sta FSMant3,x
.92e6	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.92e8	a0 00		ldy #$00			ldy #0			; get sign
.92ea	b1 16		lda ($16),y			lda (tmp2),y
.92ec	10 03		bpl $92f1			bpl +
.92ee	20 a2 8b	jsr $8ba2			jsr FNegate
.92f1					+
=61					CL	.var *-(WordListLink+wh_Xt)
=$92f1					en = *	; remember here
>92b2	3d					.byte CL	;wh_CodeLength
.92f1	60		rts				rts
>92f2	53 46 21			L1:	.text "SF!"	;  name of word as a string, ending at wh_NameLastChar
>92f5	03					.byte *-L1	;wh_NameLength	length of name
>92f6	2f 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>92f8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>92f9	08					.byte NN	;wh_Flags	dictionary flags
=37493					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.92fa	20 40 b3	jsr $b340	SFStore:	jsr PopYA		; pop sf_addr
.92fd	85 16		sta $16		SFStore_YA:	sta tmp2+0		; save
.92ff	84 17		sty $17				sty tmp2+1
.9301	a4 4c		ldy $4c				ldy fp			; negative?
.9303	b9 57 00	lda $0057,y			lda FSMant0,y
.9306	29 80		and #$80			and #$80		;  save sign
.9308	85 19		sta $19				sta tmp3+1
.930a	10 03		bpl $930f			bpl +
.930c	20 a2 8b	jsr $8ba2			jsr FNegate
.930f					+
.930f	86 14		stx $14				stx tmp1+0		; save data stack index
.9311	a6 4c		ldx $4c				ldx fp			; switch to FP stack index
.9313	b5 4d		lda $4d,x			lda FSExp,x		; +128
.9315	18		clc				clc
.9316	69 7e		adc #$7e			adc #126
.9318	95 4d		sta $4d,x			sta FSExp,x
.931a	16 75		asl $75,x			asl FSMant3,x
.931c	b5 6b		lda $6b,x			lda FSMant2,x
.931e	2a		rol a				rol a
.931f	a0 03		ldy #$03			ldy #3			; +3 IEEE
.9321	91 16		sta ($16),y			sta (tmp2),y
.9323	b5 61		lda $61,x			lda FSMant1,x
.9325	2a		rol a				rol a
.9326	88		dey				dey			; +2 IEEE
.9327	91 16		sta ($16),y			sta (tmp2),y
.9329	b5 57		lda $57,x			lda FSMant0,x
.932b	2a		rol a				rol a
.932c	2a		rol a				rol a
.932d	56 4d		lsr $4d,x			lsr FSExp,x
.932f	6a		ror a				ror a
.9330	88		dey				dey			; +1 IEEE
.9331	91 16		sta ($16),y			sta (tmp2),y
.9333	b5 4d		lda $4d,x			lda FSExp,x
.9335	05 19		ora $19				ora tmp3+1		;  insert sign
.9337	88		dey				dey			; +0 IEEE
.9338	91 16		sta ($16),y			sta (tmp2),y
.933a	e6 4c		inc $4c				inc fp			; FDrop
.933c	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=68					CL	.var *-(WordListLink+wh_Xt)
=$933e					en = *	; remember here
>92f8	44					.byte CL	;wh_CodeLength
.933e	60		rts				rts
>933f	53 46 6c 6f 61 74 2b		L1:	.text "SFloat+"	;  name of word as a string, ending at wh_NameLastChar
>9346	07					.byte *-L1	;wh_NameLength	length of name
>9347	75 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9349	03					.byte 3		;wh_CodeLength  (with placeholder value)
>934a	08					.byte NN	;wh_Flags	dictionary flags
=37574					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.934b	a9 04		lda #$04	SFloatPlus:	lda #4
.934d	4c 0f c9	jmp $c90f			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9350					en = *	; remember here
>9349	05					.byte CL	;wh_CodeLength
>9350	53 46 6c 6f 61 74 73		L1:	.text "SFloats"	;  name of word as a string, ending at wh_NameLastChar
>9357	07					.byte *-L1	;wh_NameLength	length of name
>9358	c6 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>935a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>935b	08					.byte NN	;wh_Flags	dictionary flags
=37591					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.935c	a9 02		lda #$02	SFloats:	lda #2
.935e	4c 53 ca	jmp $ca53			jmp LShift_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9361					en = *	; remember here
>935a	05					.byte CL	;wh_CodeLength
>9361	44 46 21			L1:	.text "DF!"	;  name of word as a string, ending at wh_NameLastChar
>9364	03					.byte *-L1	;wh_NameLength	length of name
>9365	d7 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9367	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9368	08					.byte NN	;wh_Flags	dictionary flags
=37604					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9369	20 40 b3	jsr $b340	DFStore:	jsr PopYA		; pop df_addr
.936c	85 16		sta $16		DFStore_YA:	sta tmp2+0		; save df_addr
.936e	84 17		sty $17				sty tmp2+1
.9370	a4 4c		ldy $4c				ldy fp			; negative?
.9372	b9 57 00	lda $0057,y			lda FSMant0,y
.9375	29 80		and #$80			and #$80		; remember sign
.9377	85 19		sta $19				sta tmp3+1
.9379	10 03		bpl $937e			bpl +			; make positive
.937b	20 a2 8b	jsr $8ba2			jsr FNegate
.937e					+
.937e	86 14		stx $14				stx tmp1+0		; save data stack index
.9380	a6 4c		ldx $4c				ldx fp
.9382	a9 00		lda #$00			lda #0
.9384	a0 07		ldy #$07			ldy #7			; +7 IEEE
.9386	91 16		sta ($16),y			sta (tmp2),y
.9388	88		dey				dey			; +6 IEEE
.9389	91 16		sta ($16),y			sta (tmp2),y
.938b	20 d3 93	jsr $93d3			jsr _shift		; shift mantissa
.938e	20 d3 93	jsr $93d3			jsr _shift
.9391	88		dey				dey			; +5 IEEE
.9392	91 16		sta ($16),y			sta (tmp2),y
.9394	b5 75		lda $75,x			lda FSMant3,x
.9396	88		dey				dey			; +4 IEEE
.9397	91 16		sta ($16),y			sta (tmp2),y
.9399	b5 6b		lda $6b,x			lda FSMant2,x
.939b	88		dey				dey			; +3 IEEE
.939c	91 16		sta ($16),y			sta (tmp2),y
.939e	b5 61		lda $61,x			lda FSMant1,x
.93a0	88		dey				dey			; +2 IEEE
.93a1	91 16		sta ($16),y			sta (tmp2),y
.93a3	b5 57		lda $57,x			lda FSMant0,x		; clear extra bits
.93a5	29 0f		and #$0f			and #$f
.93a7	95 57		sta $57,x			sta FSMant0,x
.93a9	b5 4d		lda $4d,x			lda FSExp,x
.93ab	38		sec				sec
.93ac	e9 02		sbc #$02			sbc #2
.93ae	95 4d		sta $4d,x			sta FSExp,x
.93b0	0a		asl a				asl a
.93b1	0a		asl a				asl a
.93b2	0a		asl a				asl a
.93b3	0a		asl a				asl a
.93b4	15 57		ora $57,x			ora FSMant0,x
.93b6	88		dey				dey			; +1 IEEE
.93b7	91 16		sta ($16),y			sta (tmp2),y
.93b9	b5 4d		lda $4d,x			lda FSExp,x
.93bb	08		php				php
.93bc	4a		lsr a				lsr a
.93bd	4a		lsr a				lsr a
.93be	4a		lsr a				lsr a
.93bf	4a		lsr a				lsr a
.93c0	18		clc				clc
.93c1	69 30		adc #$30			adc #$30
.93c3	28		plp				plp
.93c4	30 03		bmi $93c9			bmi +
.93c6	18		clc				clc
.93c7	69 10		adc #$10			adc #$10
.93c9	05 19		ora $19		+		ora tmp3+1		; add sign bit
.93cb	88		dey				dey			; +0 IEEE
.93cc	91 16		sta ($16),y			sta (tmp2),y
.93ce	e6 4c		inc $4c				inc fp			; FDrop
.93d0	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.93d2	60		rts				rts
.93d3	56 57		lsr $57,x	_shift:		lsr FSMant0,x
.93d5	76 61		ror $61,x			ror FSMant1,x
.93d7	76 6b		ror $6b,x			ror FSMant2,x
.93d9	76 75		ror $75,x			ror FSMant3,x
.93db	6a		ror a				ror a
=115					CL	.var *-(WordListLink+wh_Xt)
=$93dc					en = *	; remember here
>9367	73					.byte CL	;wh_CodeLength
.93dc	60		rts				rts
>93dd	44 46 40			L1:	.text "DF@"	;  name of word as a string, ending at wh_NameLastChar
>93e0	03					.byte *-L1	;wh_NameLength	length of name
>93e1	e4 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>93e3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>93e4	08					.byte NN	;wh_Flags	dictionary flags
=37728					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.93e5	20 40 b3	jsr $b340	DFAt:		jsr PopYA		; pop df_addr
.93e8	85 16		sta $16		DFAt_YA:	sta tmp2+0		; save df_addr
.93ea	84 17		sty $17				sty tmp2+1
.93ec	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.93ef	a0 00		ldy #$00			ldy #0			; +0 IEEE byte
.93f1	b1 16		lda ($16),y			lda (tmp2),y
.93f3	95 4d		sta $4d,x			sta FSExp,x
.93f5	c8		iny				iny			; +1 IEEE byte
.93f6	b1 16		lda ($16),y			lda (tmp2),y
.93f8	95 57		sta $57,x			sta FSMant0,x
.93fa	c8		iny				iny			; +2 IEEE byte
.93fb	b1 16		lda ($16),y			lda (tmp2),y
.93fd	95 61		sta $61,x			sta FSMant1,x
.93ff	c8		iny				iny			; +3 IEEE byte
.9400	b1 16		lda ($16),y			lda (tmp2),y
.9402	95 6b		sta $6b,x			sta FSMant2,x
.9404	c8		iny				iny			; +4 IEEE byte
.9405	b1 16		lda ($16),y			lda (tmp2),y
.9407	95 75		sta $75,x			sta FSMant3,x
.9409	c8		iny				iny			; +5 IEEE byte
.940a	b1 16		lda ($16),y			lda (tmp2),y
.940c	20 35 94	jsr $9435			jsr _shifta		; shift exponent & mantissa bits into place
.940f	20 35 94	jsr $9435			jsr _shifta
.9412	b5 57		lda $57,x			lda FSMant0,x		; finish shifting exponent bits
.9414	0a		asl a				asl a
.9415	36 4d		rol $4d,x			rol FSExp,x
.9417	0a		asl a				asl a
.9418	36 4d		rol $4d,x			rol FSExp,x
.941a	b5 4d		lda $4d,x			lda FSExp,x		; remove +1023
.941c	18		clc				clc
.941d	69 02		adc #$02			adc #2
.941f	95 4d		sta $4d,x			sta FSExp,x
.9421	b5 57		lda $57,x			lda FSMant0,x
.9423	29 7f		and #$7f			and #$7f
.9425	09 40		ora #$40			ora #$40		;   insert implied 1
.9427	95 57		sta $57,x			sta FSMant0,x		;   insert sign=0
.9429	a6 14		ldx $14				ldx tmp1		; restore data stack index
.942b	a0 00		ldy #$00			ldy #0			; get sign from +0 IEEE byte
.942d	b1 16		lda ($16),y			lda (tmp2),y
.942f	10 03		bpl $9434			bpl +
.9431	20 a2 8b	jsr $8ba2			jsr FNegate
.9434					+
.9434	60		rts				rts
.9435	0a		asl a		_shifta:	asl a
.9436	36 75		rol $75,x			rol FSMant3,x
.9438	36 6b		rol $6b,x			rol FSMant2,x
.943a	36 61		rol $61,x			rol FSMant1,x
.943c	36 57		rol $57,x			rol FSMant0,x
.943e	36 4d		rol $4d,x			rol FSExp,x
.9440	60		rts				rts
=92					CL	.var *-(WordListLink+wh_Xt)
=$9441					en = *	; remember here
>93e3	5c					.byte CL	;wh_CodeLength
>9441	44 46 6c 6f 61 74 2b		L1:	.text "DFloat+"	;  name of word as a string, ending at wh_NameLastChar
>9448	07					.byte *-L1	;wh_NameLength	length of name
>9449	60 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>944b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>944c	08					.byte NN	;wh_Flags	dictionary flags
=37832					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.944d	a9 08		lda #$08	DFloatPlus:	lda #8
.944f	4c 0f c9	jmp $c90f			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9452					en = *	; remember here
>944b	05					.byte CL	;wh_CodeLength
>9452	44 46 6c 6f 61 74 73		L1:	.text "DFloats"	;  name of word as a string, ending at wh_NameLastChar
>9459	07					.byte *-L1	;wh_NameLength	length of name
>945a	c8 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>945c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>945d	08					.byte NN	;wh_Flags	dictionary flags
=37849					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.945e	a9 03		lda #$03	DFloats:	lda #3
.9460	4c 53 ca	jmp $ca53			jmp LShift_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9463					en = *	; remember here
>945c	05					.byte CL	;wh_CodeLength
>9463	46 4b 65 79			L1:	.text "FKey"	;  name of word as a string, ending at wh_NameLastChar
>9467	04					.byte *-L1	;wh_NameLength	length of name
>9468	d9 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>946a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>946b	08					.byte NN	;wh_Flags	dictionary flags
=37863					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.946c					FKey:
.946c	20 2c c9	jsr $c92c			jsr Here		; ( addr )
.946f	20 2c c9	jsr $c92c			jsr Here		; ( addr addr )
.9472	a9 28		lda #$28			lda #40			; ( addr addr 40 )
.9474	20 3a b7	jsr $b73a			jsr PushZA
.9477	20 e6 c1	jsr $c1e6			jsr Accept		; ( addr len )
.947a	20 bd 91	jsr $91bd			jsr ToFloat		; ( true | false)
.947d	e8		inx				inx			; err?
.947e	e8		inx				inx
.947f	b5 22		lda $22,x			lda DStack-2,x
.9481	f0 01		beq $9484			beq _err
.9483	60		rts				rts
.9484	20 19 b8	jsr $b819	_err:		jsr SLiteral_runtime
.9487	4c 8d 94	jmp $948d			  jmp +
>948a	20 3f 20					  .text " ? "
.948d	20 f2 cc	jsr $ccf2	+		jsr Type
.9490	4c 6c 94	jmp $946c			jmp FKey
>9493	46 4d 50 6f 6c 79		L1:	.text "FMPoly"	;  name of word as a string, ending at wh_NameLastChar
>9499	06					.byte *-L1	;wh_NameLength	length of name
>949a	e7 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>949c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>949d	08					.byte NN	;wh_Flags	dictionary flags
=37913					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.949e	20 40 b3	jsr $b340	FMPoly:		jsr PopYA
.94a1	20 f8 b6	jsr $b6f8	FMPolyYA:	jsr PushYA		; push coefficent addr
.94a4	20 82 85	jsr $8582			jsr FAt_YA		; fetch 1st coefficent
.94a7	4c ba 94	jmp $94ba			jmp _4
.94aa	20 9c 84	jsr $849c	_2:		jsr FOver
.94ad	20 fd 8b	jsr $8bfd			jsr FStar
.94b0	b5 24		lda $24,x			lda DStack+0,x		; fetch next coefficent
.94b2	b4 25		ldy $25,x			ldy DStack+1,x
.94b4	20 82 85	jsr $8582			jsr FAt_YA
.94b7	20 29 8b	jsr $8b29			jsr FPlus
.94ba	a9 05		lda #$05	_4:		lda #5			; bump coefficent ptr
.94bc	20 0f c9	jsr $c90f			jsr Plus_A
.94bf	a1 24		lda ($24,x)			lda (DStack+0,x)	; end of coefficent list?
.94c1	d0 e7		bne $94aa			bne _2
.94c3	e8		inx				inx			; Drop coefficent ptr
.94c4	e8		inx				inx
=39					CL	.var *-(WordListLink+wh_Xt)
=$94c5					en = *	; remember here
>949c	27					.byte CL	;wh_CodeLength
.94c5	60		rts				rts
>94c6	46 4c 6f 67 32 4d 31 4d		L1:	.text "FLog2M1M"	;  name of word as a string, ending at wh_NameLastChar
>94ce	08					.byte *-L1	;wh_NameLength	length of name
>94cf	19 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>94d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>94d2	08					.byte NN	;wh_Flags	dictionary flags
=37966					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.94d3	a9 dd		lda #$dd	FLog2M1M:	lda #<_c
.94d5	a0 94		ldy #$94			ldy #>_c
.94d7	20 a1 94	jsr $94a1			jsr FMPolyYA
.94da	4c fd 8b	jmp $8bfd			jmp FStar
.94dd					_c:
>94dd	cc cf 97 7c					.dword $7C97CFCC	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94e1	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>94e2	64 87 94 af					.dword $AF948764	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94e6	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>94e7	66 c8 d4 62					.dword $62D4C866	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94eb	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>94ec	e2 9c c3 ac					.dword $ACC39CE2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94f0	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>94f1	1a c6 2b 79					.dword $792BC61A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94f5	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>94f6	07 e1 c4 a3					.dword $A3C4E107	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94fa	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>94fb	91 a5 54 5c					.dword $5C54A591	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94ff	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>9500	00 00						.word 0
=47					CL	.var *-(WordListLink+wh_Xt)
=$9502					en = *	; remember here
>94d1	2f					.byte CL	;wh_CodeLength
>9502	46 4c 6f 67 32			L1:	.text "FLog2"	;  name of word as a string, ending at wh_NameLastChar
>9507	05					.byte *-L1	;wh_NameLength	length of name
>9508	4e 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>950a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>950b	08					.byte NN	;wh_Flags	dictionary flags
=38023					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.950c	a4 4c		ldy $4c		FLog2:		ldy fp
.950e	b9 57 00	lda $0057,y			lda FSMant0,y	; bad param?
.9511	30 20		bmi $9533			bmi _OutOfRange
.9513	f0 1e		beq $9533			beq _OutOfRange
.9515	b9 4d 00	lda $004d,y			lda FSExp,y
.9518	48		pha				pha		; remember orig exponent
.9519	a9 01		lda #$01			lda #1
.951b	99 4d 00	sta $004d,y			sta FSExp,y	; set to 1
.951e	20 90 8b	jsr $8b90			jsr F1Minus
.9521	20 d3 94	jsr $94d3			jsr FLog2M1M
.9524	a0 00		ldy #$00			ldy #0		; add orig exponent to float
.9526	68		pla				pla
.9527	38		sec				sec
.9528	e9 01		sbc #$01			sbc #1
.952a	10 01		bpl $952d			bpl +
.952c	88		dey				dey
.952d					+
.952d	20 41 8e	jsr $8e41			jsr SToFYA
.9530	4c 29 8b	jmp $8b29			jmp FPlus
.9533	4c a2 b3	jmp $b3a2	_OutOfRange:	jmp Throw_FpOutOfRange
=42					CL	.var *-(WordListLink+wh_Xt)
=$9536					en = *	; remember here
>950a	2a					.byte CL	;wh_CodeLength
>9536	46 4c 6e			L1:	.text "FLn"	;  name of word as a string, ending at wh_NameLastChar
>9539	03					.byte *-L1	;wh_NameLength	length of name
>953a	87 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>953c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>953d	08					.byte NN	;wh_Flags	dictionary flags
=38073					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.953e	20 0c 95	jsr $950c	FLn:		jsr FLog2
.9541	20 cc 88	jsr $88cc			jsr FLitI
>9544	f8 0b b9 58					.dword $58b90bf8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9548	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
.9549	4c fd 8b	jmp $8bfd			jmp FStar
=14					CL	.var *-(WordListLink+wh_Xt)
=$954c					en = *	; remember here
>953c	0e					.byte CL	;wh_CodeLength
>954c	46 4c 6e 50 31			L1:	.text "FLnP1"	;  name of word as a string, ending at wh_NameLastChar
>9551	05					.byte *-L1	;wh_NameLength	length of name
>9552	b9 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9554	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9555	08					.byte NN	;wh_Flags	dictionary flags
=38097					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9556	20 5e 8b	jsr $8b5e	FlnP1:		jsr F1Plus
.9559	4c 3e 95	jmp $953e			jmp FLn
=6					CL	.var *-(WordListLink+wh_Xt)
=$955c					en = *	; remember here
>9554	06					.byte CL	;wh_CodeLength
>955c	46 4c 6f 67			L1:	.text "FLog"	;  name of word as a string, ending at wh_NameLastChar
>9560	04					.byte *-L1	;wh_NameLength	length of name
>9561	d1 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9563	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9564	08					.byte NN	;wh_Flags	dictionary flags
=38112					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9565	20 0c 95	jsr $950c	FLog:		jsr FLog2
.9568	20 cc 88	jsr $88cc			jsr FLitI
>956b	3c 4d 10 4d					.dword $4d104d3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>956f	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
.9570	4c fd 8b	jmp $8bfd			jmp FStar
=14					CL	.var *-(WordListLink+wh_Xt)
=$9573					en = *	; remember here
>9563	0e					.byte CL	;wh_CodeLength
>9573	46 45 78 70 32 4d 31 4d		L1:	.text "FExp2M1M"	;  name of word as a string, ending at wh_NameLastChar
>957b	08					.byte *-L1	;wh_NameLength	length of name
>957c	e0 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>957e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>957f	08					.byte NN	;wh_Flags	dictionary flags
=38139					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9580	a9 8a		lda #$8a	FExp2M1M:	lda #<_c
.9582	a0 95		ldy #$95			ldy #>_c
.9584	20 a1 94	jsr $94a1			jsr FMPolyYA
.9587	4c fd 8b	jmp $8bfd			jmp FStar
=10					CL	.var *-(WordListLink+wh_Xt)
=$958a					en = *	; remember here
>957e	0a					.byte CL	;wh_CodeLength
.958a					_c:
>958a	da dc 4f 7c					.dword $7C4FDCDa	; 32 bit signed binary mantissa.  $40000000 = +0.5
>958e	f7						.char -9		; 8 bit signed exponent.  $00 = 2**0
>958f	d6 ca 4c 49					.dword $494CCAD6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9593	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9594	f0 42 64 72					.dword $726442f0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9598	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9599	44 90 f4 7a					.dword $7AF49044	; 32 bit signed binary mantissa.  $40000000 = +0.5
>959d	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>959e	9b 3c b9 58					.dword $58B93C9b	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95a2	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>95a3	00						.byte 0
>95a4	46 45 78 70 32			L1:	.text "FExp2"	;  name of word as a string, ending at wh_NameLastChar
>95a9	05					.byte *-L1	;wh_NameLength	length of name
>95aa	fb 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95ac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95ad	08					.byte NN	;wh_Flags	dictionary flags
=38185					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95ae	20 17 87	jsr $8717	FExp2:		jsr FIntFrc	; ( f: r_rem r_int )
.95b1	20 8b 8e	jsr $8e8b			jsr FToS
.95b4	20 80 95	jsr $9580			jsr FExp2M1M
.95b7	20 5e 8b	jsr $8b5e			jsr F1Plus
.95ba	20 24 b3	jsr $b324			jsr PopA
.95bd	a4 4c		ldy $4c				ldy fp
.95bf	18		clc				clc
.95c0	79 4d 00	adc $004d,y			adc FSExp,y
.95c3	99 4d 00	sta $004d,y			sta FSExp,y
=24					CL	.var *-(WordListLink+wh_Xt)
=$95c6					en = *	; remember here
>95ac	18					.byte CL	;wh_CodeLength
.95c6	60		rts				rts
>95c7	46 45 78 70			L1:	.text "FExp"	;  name of word as a string, ending at wh_NameLastChar
>95cb	04					.byte *-L1	;wh_NameLength	length of name
>95cc	29 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95cf	08					.byte NN	;wh_Flags	dictionary flags
=38219					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95d0					FExp:
.95d0	20 cc 88	jsr $88cc			jsr FLitI
>95d3	94 1d 55 5c					.dword $5c551d94	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95d7	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
.95d8	20 fd 8b	jsr $8bfd			jsr FStar
.95db	4c ae 95	jmp $95ae			jmp FExp2
=14					CL	.var *-(WordListLink+wh_Xt)
=$95de					en = *	; remember here
>95ce	0e					.byte CL	;wh_CodeLength
>95de	46 45 78 70 4d 31		L1:	.text "FExpM1"	;  name of word as a string, ending at wh_NameLastChar
>95e4	06					.byte *-L1	;wh_NameLength	length of name
>95e5	4b 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95e8	08					.byte NN	;wh_Flags	dictionary flags
=38244					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95e9	20 d0 95	jsr $95d0	FExpM1:		jsr FExp
.95ec	4c 90 8b	jmp $8b90			jmp F1Minus
=6					CL	.var *-(WordListLink+wh_Xt)
=$95ef					en = *	; remember here
>95e7	06					.byte CL	;wh_CodeLength
>95ef	46 41 4c 6f 67			L1:	.text "FALog"	;  name of word as a string, ending at wh_NameLastChar
>95f4	05					.byte *-L1	;wh_NameLength	length of name
>95f5	64 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95f8	08					.byte NN	;wh_Flags	dictionary flags
=38260					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95f9					FALog:
.95f9	20 cc 88	jsr $88cc			jsr FLitI
>95fc	20 3c 4d 6a					.dword $6a4d3c20	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9600	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
.9601	20 fd 8b	jsr $8bfd			jsr FStar
.9604	4c ae 95	jmp $95ae			jmp FExp2
=14					CL	.var *-(WordListLink+wh_Xt)
=$9607					en = *	; remember here
>95f7	0e					.byte CL	;wh_CodeLength
>9607	46 2a 2a			L1:	.text "F**"	;  name of word as a string, ending at wh_NameLastChar
>960a	03					.byte *-L1	;wh_NameLength	length of name
>960b	74 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>960d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>960e	08					.byte NN	;wh_Flags	dictionary flags
=38282					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.960f	20 00 85	jsr $8500	FPower:		jsr FSwap
.9612	20 0c 95	jsr $950c			jsr FLog2
.9615	20 fd 8b	jsr $8bfd			jsr FStar
.9618	4c ae 95	jmp $95ae			jmp FExp2
=12					CL	.var *-(WordListLink+wh_Xt)
=$961b					en = *	; remember here
>960d	0c					.byte CL	;wh_CodeLength
>961b	44 65 67 32 52 61 64		L1:	.text "Deg2Rad"	;  name of word as a string, ending at wh_NameLastChar
>9622	07					.byte *-L1	;wh_NameLength	length of name
>9623	8a 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9625	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9626	08					.byte NN	;wh_Flags	dictionary flags
=38306					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9627					Deg2Rad:
.9627	20 cc 88	jsr $88cc			jsr FLitI
>962a	8a 1a 7d 47					.dword $477d1A8A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>962e	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
.962f	4c fd 8b	jmp $8bfd			jmp FStar
=11					CL	.var *-(WordListLink+wh_Xt)
=$9632					en = *	; remember here
>9625	0b					.byte CL	;wh_CodeLength
>9632	52 61 64 32 44 65 67		L1:	.text "Rad2Deg"	;  name of word as a string, ending at wh_NameLastChar
>9639	07					.byte *-L1	;wh_NameLength	length of name
>963a	a2 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>963c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>963d	08					.byte NN	;wh_Flags	dictionary flags
=38329					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.963e					Rad2Deg:
.963e	20 cc 88	jsr $88cc			jsr FLitI
>9641	68 70 97 72					.dword $72977068	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9645	06						.char 6		; 8 bit signed exponent.  $00 = 2**0
.9646	4c fd 8b	jmp $8bfd			jmp FStar
=11					CL	.var *-(WordListLink+wh_Xt)
=$9649					en = *	; remember here
>963c	0b					.byte CL	;wh_CodeLength
>9649	46 41 52 65 64 75 63 65		L1:	.text "FAReduce"	;  name of word as a string, ending at wh_NameLastChar
>9651	08					.byte *-L1	;wh_NameLength	length of name
>9652	b9 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9654	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9655	08					.byte NN	;wh_Flags	dictionary flags
=38353					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9656	a4 4c		ldy $4c		FAReduce:	ldy fp
.9658	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.965b	f0 2f		beq $968c			beq _ok
.965d	b9 4d 00	lda $004d,y			lda FSExp,y		; get exponent
.9660	30 2a		bmi $968c			bmi _ok			; small?
.9662	c9 01		cmp #$01			cmp #1			; maybe need mirror?
.9664	30 26		bmi $968c			bmi _ok			;if exponent <=0
.9666	f0 24		beq $968c			beq _ok
.9668	c9 02		cmp #$02			cmp #2			; maybe need rotation?
.966a	b0 22		bcs $968e			bcs _exp2
.966c	b9 57 00	lda $0057,y			lda FSMant0,y
.966f	c9 65		cmp #$65			cmp #$65		;in -pi/2..pi/2 ?
.9671	90 19		bcc $968c			bcc _ok
.9673	c9 9b		cmp #$9b			cmp #$100-$65
.9675	b0 15		bcs $968c			bcs _ok
.9677					_mir:
.9677	20 45 89	jsr $8945			jsr FPi
.967a	a4 4c		ldy $4c				ldy fp
.967c	b9 58 00	lda $0058,y			lda FSMant0+1,y
.967f	10 03		bpl $9684			bpl _3
.9681	20 a2 8b	jsr $8ba2			jsr FNegate
.9684	20 00 85	jsr $8500	_3:		jsr FSwap
.9687	20 6b 8b	jsr $8b6b			jsr FMinus
.968a	38		sec				sec		; mirrored
.968b	60		rts				rts
.968c	18		clc		_ok:		clc		; not mirrored
.968d	60		rts				rts
.968e	d0 0b		bne $969b	_exp2:		bne _rot	;if exp>2 then fix
.9690	b9 57 00	lda $0057,y			lda FSMant0,y
.9693	c9 65		cmp #$65			cmp #$65	;if mant>pi or mant<-pi then fix
.9695	90 e0		bcc $9677			bcc _mir
.9697	c9 9b		cmp #$9b			cmp #$100-$65
.9699	b0 dc		bcs $9677			bcs _mir
.969b	20 77 89	jsr $8977	_rot:		jsr F2Pi
.969e	20 b0 8c	jsr $8cb0			jsr FSlash
.96a1	20 17 87	jsr $8717			jsr FIntFrc
.96a4	e6 4c		inc $4c				inc fp		; FDrop integer part
.96a6	a4 4c		ldy $4c				ldy fp		;if >=.5
.96a8	b9 4d 00	lda $004d,y			lda FSExp,y
.96ab	a8		tay				tay
.96ac	30 03		bmi $96b1			bmi _rot4
.96ae	20 90 8b	jsr $8b90			jsr F1Minus	;  subtract 1
.96b1	20 77 89	jsr $8977	_rot4:		jsr F2Pi
.96b4	20 fd 8b	jsr $8bfd			jsr FStar
.96b7	4c 56 96	jmp $9656			jmp FAReduce	; rotate done, look again
=100					CL	.var *-(WordListLink+wh_Xt)
=$96ba					en = *	; remember here
>9654	64					.byte CL	;wh_CodeLength
>96ba	46 53 69 6e 4d			L1:	.text "FSinM"	;  name of word as a string, ending at wh_NameLastChar
>96bf	05					.byte *-L1	;wh_NameLength	length of name
>96c0	d1 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96c3	08					.byte NN	;wh_Flags	dictionary flags
=38463					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.96c4	20 78 84	jsr $8478	FSinM:		jsr FDup
.96c7	20 83 8c	jsr $8c83			jsr FSqr	; x x^2
.96ca	a9 da		lda #$da			lda #<_c
.96cc	a0 96		ldy #$96			ldy #>_c
.96ce	20 a1 94	jsr $94a1			jsr FMPolyYA
.96d1	20 fd 8b	jsr $8bfd			jsr FStar
.96d4	20 5e 8b	jsr $8b5e			jsr F1Plus	; C0 +1.0
.96d7	4c fd 8b	jmp $8bfd			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$96da					en = *	; remember here
>96c2	16					.byte CL	;wh_CodeLength
.96da					_c:
>96da	a6 a7 21 57					.dword $5721a7a6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96de	ee						.char -18		; 8 bit signed exponent.  $00 = 2**0
>96df	4e 0b 2a 98					.dword $982a0b4e	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96e3	f4						.char -12		; 8 bit signed exponent.  $00 = 2**0
>96e4	3c 8f 43 44					.dword $44438f3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96e8	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>96e9	37 ae aa aa					.dword $aaaaae37	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96ed	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>96ee	00						.byte 0
>96ef	46 53 69 6e			L1:	.text "FSin"	;  name of word as a string, ending at wh_NameLastChar
>96f3	04					.byte *-L1	;wh_NameLength	length of name
>96f4	3f 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96f6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96f7	08					.byte NN	;wh_Flags	dictionary flags
=38515					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.96f8	20 56 96	jsr $9656	FSin:		jsr FAReduce
.96fb	4c c4 96	jmp $96c4			jmp FSinM
=6					CL	.var *-(WordListLink+wh_Xt)
=$96fe					en = *	; remember here
>96f6	06					.byte CL	;wh_CodeLength
>96fe	46 43 6f 73			L1:	.text "FCos"	;  name of word as a string, ending at wh_NameLastChar
>9702	04					.byte *-L1	;wh_NameLength	length of name
>9703	73 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9705	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9706	08					.byte NN	;wh_Flags	dictionary flags
=38530					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9707	20 56 89	jsr $8956	FCos:		jsr FPiH
.970a	20 29 8b	jsr $8b29			jsr FPlus
.970d	4c f8 96	jmp $96f8			jmp FSin
=9					CL	.var *-(WordListLink+wh_Xt)
=$9710					en = *	; remember here
>9705	09					.byte CL	;wh_CodeLength
>9710	46 53 69 6e 43 6f 73		L1:	.text "FSinCos"	;  name of word as a string, ending at wh_NameLastChar
>9717	07					.byte *-L1	;wh_NameLength	length of name
>9718	82 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>971a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>971b	08					.byte NN	;wh_Flags	dictionary flags
=38551					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.971c	20 78 84	jsr $8478	FSinCos:	jsr FDup
.971f	20 f8 96	jsr $96f8			jsr FSin
.9722	20 00 85	jsr $8500			jsr FSwap
.9725	4c 07 97	jmp $9707			jmp FCos
=12					CL	.var *-(WordListLink+wh_Xt)
=$9728					en = *	; remember here
>971a	0c					.byte CL	;wh_CodeLength
>9728	46 54 61 6e 4d			L1:	.text "FTanM"	;  name of word as a string, ending at wh_NameLastChar
>972d	05					.byte *-L1	;wh_NameLength	length of name
>972e	97 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9730	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9731	08					.byte NN	;wh_Flags	dictionary flags
=38573					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9732	20 78 84	jsr $8478	FTanM:		jsr FDup
.9735	20 83 8c	jsr $8c83			jsr FSqr		; x x^2
.9738	a9 48		lda #$48			lda #<_c
.973a	a0 97		ldy #$97			ldy #>_c
.973c	20 a1 94	jsr $94a1			jsr FMPolyYA
.973f	20 fd 8b	jsr $8bfd			jsr FStar
.9742	20 5e 8b	jsr $8b5e			jsr F1Plus		; c0 1.0
.9745	4c fd 8b	jmp $8bfd			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$9748					en = *	; remember here
>9730	16					.byte CL	;wh_CodeLength
.9748					_c:
>9748	1e ae 4d 58					.dword $584DAE1E	; 32 bit signed binary mantissa.  $40000000 = +0.5
>974c	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>974d	51 0a eb 57					.dword $57EB0A51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9751	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9752	98 d9 14 77					.dword $7714D998	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9756	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9757	f9 10 ea 43					.dword $43EA10F9	; 32 bit signed binary mantissa.  $40000000 = +0.5
>975b	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>975c	1b e2 57 55					.dword $5557E21B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9760	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9761	00						.byte 0
>9762	46 54 61 6e			L1:	.text "FTan"	;  name of word as a string, ending at wh_NameLastChar
>9766	04					.byte *-L1	;wh_NameLength	length of name
>9767	ad 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9769	03					.byte 3		;wh_CodeLength  (with placeholder value)
>976a	08					.byte NN	;wh_Flags	dictionary flags
=38630					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.976b	20 56 96	jsr $9656	FTan:		jsr FAReduce
.976e	90 06		bcc $9776			bcc _30
.9770	20 76 97	jsr $9776			jsr _30
.9773	4c a2 8b	jmp $8ba2			jmp FNegate
.9776					_30:
.9776	20 78 84	jsr $8478			jsr FDup
.9779	20 c9 8b	jsr $8bc9			jsr FAbs
.977c	20 67 89	jsr $8967			jsr FPiQ
.977f	20 d3 87	jsr $87d3			jsr FLe
.9782	e8		inx				inx			; pop f
.9783	e8		inx				inx
.9784	b5 24		lda $24,x			lda DStack+0,x
.9786	d0 aa		bne $9732			bne FTanM
.9788	20 a2 44	jsr $44a2			jsr FPi/2
.978b	a4 4c		ldy $4c				ldy fp			; get sign
.978d	b9 57 00	lda $0057,y			lda FSMant0,y
.9790	10 03		bpl $9795			bpl +
.9792	20 a2 8b	jsr $8ba2			jsr FNegate
.9795					+
.9795	20 00 85	jsr $8500			jsr FSwap
.9798	20 6b 8b	jsr $8b6b			jsr FMinus
.979b	20 32 97	jsr $9732			jsr FTanM
.979e	4c 55 8d	jmp $8d55			jmp F1Slash
=54					CL	.var *-(WordListLink+wh_Xt)
=$97a1					en = *	; remember here
>9769	36					.byte CL	;wh_CodeLength
>97a1	46 41 43 6f 73			L1:	.text "FACos"	;  name of word as a string, ending at wh_NameLastChar
>97a6	05					.byte *-L1	;wh_NameLength	length of name
>97a7	e6 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>97a9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>97aa	08					.byte NN	;wh_Flags	dictionary flags
=38694					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.97ab	a4 4c		ldy $4c		FACos:		ldy fp
.97ad	b9 57 00	lda $0057,y			lda FSMant0,y
.97b0	08		php				php			; save sign
.97b1	20 c9 8b	jsr $8bc9			jsr FAbs
.97b4	a9 d7		lda #$d7			lda #<_c
.97b6	a0 97		ldy #$97			ldy #>_c
.97b8	20 a1 94	jsr $94a1			jsr FMPolyYA
.97bb	20 00 85	jsr $8500			jsr FSwap
.97be	20 a2 8b	jsr $8ba2			jsr FNegate
.97c1	20 5e 8b	jsr $8b5e			jsr F1Plus
.97c4	20 30 8f	jsr $8f30			jsr FSqrt
.97c7	20 fd 8b	jsr $8bfd			jsr FStar
.97ca	28		plp				plp			; was r1 negative?
.97cb	10 09		bpl $97d6			bpl +
.97cd	20 45 89	jsr $8945			jsr FPi
.97d0	20 00 85	jsr $8500			jsr FSwap
.97d3	20 6b 8b	jsr $8b6b			jsr FMinus
.97d6					+
=43					CL	.var *-(WordListLink+wh_Xt)
=$97d6					en = *	; remember here
>97a9	2b					.byte CL	;wh_CodeLength
.97d6	60		rts				rts
.97d7					_c:
>97d7	8b 5e 9f 4b					.dword $4B9F5E8B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97db	f8						.char -8		; 8 bit signed exponent.  $00 = 2**0
>97dc	ad cc 29 a4					.dword $A429CCAD	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97e0	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>97e1	98 a1 a3 6e					.dword $6EA3A198	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97e5	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>97e6	5a 10 e1 9b					.dword $9BE1105A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97ea	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>97eb	c6 71 ea 5a					.dword $5AEA71C6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97ef	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>97f0	e0 56 21 92					.dword $922156E0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97f4	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>97f5	41 ed 87 64					.dword $6487ED41	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97f9	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>97fa	00						.byte 0
>97fb	46 41 53 69 6e			L1:	.text "FASin"	;  name of word as a string, ending at wh_NameLastChar
>9800	05					.byte *-L1	;wh_NameLength	length of name
>9801	26 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9803	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9804	08					.byte NN	;wh_Flags	dictionary flags
=38784					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9805	20 ab 97	jsr $97ab	FASin:		jsr FACos
.9808	20 a2 8b	jsr $8ba2			jsr FNegate
.980b	20 56 89	jsr $8956			jsr FPiH
.980e	4c 29 8b	jmp $8b29			jmp FPlus
=12					CL	.var *-(WordListLink+wh_Xt)
=$9811					en = *	; remember here
>9803	0c					.byte CL	;wh_CodeLength
>9811	46 41 54 61 6e 4d		L1:	.text "FATanM"	;  name of word as a string, ending at wh_NameLastChar
>9817	06					.byte *-L1	;wh_NameLength	length of name
>9818	80 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>981a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>981b	08					.byte NN	;wh_Flags	dictionary flags
=38807					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.981c	20 78 84	jsr $8478	FATanM:		jsr FDup		; x x
.981f	20 83 8c	jsr $8c83			jsr FSqr		; x xsqr
.9822	a9 32		lda #$32			lda #<_c
.9824	a0 98		ldy #$98			ldy #>_c
.9826	20 a1 94	jsr $94a1			jsr FMPolyYA
.9829	20 fd 8b	jsr $8bfd			jsr FStar		; x poly
.982c	20 5e 8b	jsr $8b5e			jsr F1Plus		; x poly
.982f	4c fd 8b	jmp $8bfd			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$9832					en = *	; remember here
>981a	16					.byte CL	;wh_CodeLength
.9832					_c:
>9832	98 08 2d 76					.dword $762D0898	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9836	f9						.char -7		; 8 bit signed exponent.  $00 = 2**0
>9837	55 a1 32 b8					.dword $B832A155	; 32 bit signed binary mantissa.  $40000000 = +0.5
>983b	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>983c	a8 d7 a2 53					.dword $53A2D7A8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9840	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>9841	be 91 85 bb					.dword $BB8591BE	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9845	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9846	06 65 aa 65					.dword $65AA6506	; 32 bit signed binary mantissa.  $40000000 = +0.5
>984a	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>984b	12 21 b0 aa					.dword $AAB02112	; 32 bit signed binary mantissa.  $40000000 = +0.5
>984f	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9850	00						.byte 0
>9851	46 41 54 61 6e			L1:	.text "FATan"	;  name of word as a string, ending at wh_NameLastChar
>9856	05					.byte *-L1	;wh_NameLength	length of name
>9857	97 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9859	03					.byte 3		;wh_CodeLength  (with placeholder value)
>985a	08					.byte NN	;wh_Flags	dictionary flags
=38870					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.985b					FATan:
.985b	a4 4c		ldy $4c				ldy fp
.985d	b9 4d 00	lda $004d,y			lda FSExp,y		; Abs(r1)<1 ?
.9860	30 ba		bmi $981c			bmi FATanM
.9862	f0 b8		beq $981c			beq FATanM
.9864	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.9867	08		php				php
.9868	20 55 8d	jsr $8d55			jsr F1Slash
.986b	20 1c 98	jsr $981c			jsr FATanM
.986e	20 a2 8b	jsr $8ba2			jsr FNegate
.9871	20 56 89	jsr $8956			jsr FPiH
.9874	28		plp				plp
.9875	10 03		bpl $987a			bpl _18
.9877	20 a2 8b	jsr $8ba2			jsr FNegate
.987a	4c 29 8b	jmp $8b29	_18:		jmp FPlus
>987d	46 41 54 61 6e 32		L1:	.text "FATan2"	;  name of word as a string, ending at wh_NameLastChar
>9883	06					.byte *-L1	;wh_NameLength	length of name
>9884	d6 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9886	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9887	08					.byte NN	;wh_Flags	dictionary flags
=38915					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9888	a4 4c		ldy $4c		FATan2:		ldy fp
.988a	b9 57 00	lda $0057,y			lda FSMant0+0,y	; get rx sign
.988d	f0 1c		beq $98ab			beq _rxzero
.988f	0a		asl a				asl a		;   C=rx sign
.9890	b9 58 00	lda $0058,y			lda FSMant0+1,y	;   N=ry sign
.9893	08		php				php		; save signs
.9894	20 b0 8c	jsr $8cb0			jsr FSlash
.9897	20 5b 98	jsr $985b			jsr FATan
.989a	28		plp				plp		; pop signs
.989b	b0 01		bcs $989e			bcs _rxneg
.989d	60		rts		_rts:		rts
.989e	08		php		_rxneg:		php
.989f	20 45 89	jsr $8945			jsr FPi
.98a2	28		plp				plp
.98a3	10 03		bpl $98a8			bpl +
.98a5	20 a2 8b	jsr $8ba2			jsr FNegate
.98a8	4c 29 8b	jmp $8b29	+		jmp FPlus
.98ab	e6 4c		inc $4c		_rxzero:	inc fp		; FDrop rx
.98ad	b9 57 00	lda $0057,y			lda FSMant0,y
.98b0	08		php				php
.98b1	e6 4c		inc $4c				inc fp		; FDrop ry
.98b3	20 56 89	jsr $8956			jsr FPiH
.98b6	28		plp				plp
.98b7	10 e4		bpl $989d			bpl _rts
.98b9	4c a2 8b	jmp $8ba2			jmp FNegate
=52					CL	.var *-(WordListLink+wh_Xt)
=$98bc					en = *	; remember here
>9886	34					.byte CL	;wh_CodeLength
>98bc	45 64				L1:	.text "Ed"	;  name of word as a string, ending at wh_NameLastChar
>98be	02					.byte *-L1	;wh_NameLength	length of name
>98bf	03 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>98c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>98c2	08					.byte NN	;wh_Flags	dictionary flags
=38974					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.98c3	4c c6 98	jmp $98c6	Ed:		jmp ed6502
=3					CL	.var *-(WordListLink+wh_Xt)
=$98c6					en = *	; remember here
>98c1	03					.byte CL	;wh_CodeLength
=$1e					ed_head	 = editor1  ; pointer to first list element (addr) (2 bytes)
=$20					ed_cur	 = editor2  ; current line number (1 is first line) (2 bytes)
=$22					ed_flags = editor3  ; Flags used by ed, where
.98c6					ed6502:
.98c6	ad 00 03	lda $0300			lda base
.98c9	85 23		sta $23				sta editor3+1
.98cb	20 f9 b0	jsr $b0f9			jsr Decimal
.98ce	a9 00		lda #$00			lda #0
.98d0	85 1e		sta $1e				sta ed_head
.98d2	85 1f		sta $1f				sta ed_head+1
.98d4	85 20		sta $20				sta ed_cur
.98d6	85 21		sta $21				sta ed_cur+1
.98d8	85 22		sta $22				sta ed_flags
.98da	20 49 b7	jsr $b749			jsr Zero
.98dd	20 49 b7	jsr $b749			jsr Zero		; ( addr-t u-t )
.98e0	20 7d aa	jsr $aa7d			jsr CR
.98e3					ed_input_loop:
.98e3	a9 7e		lda #$7e			lda #$ff-%10000001
.98e5	25 22		and $22				and ed_flags
.98e7	85 22		sta $22				sta ed_flags
.98e9	20 8b 9d	jsr $9d8b			jsr ed_get_input
.98ec	a5 06		lda $06				lda ciblen+0
.98ee	d0 1e		bne $990e			bne _command_mode
.98f0	a5 20		lda $20				lda ed_cur+0
.98f2	a4 21		ldy $21				ldy ed_cur+1
.98f4	20 f8 b6	jsr $b6f8			jsr PushYA		; ( addr-t u-t u )
.98f7	a9 80		lda #$80			lda #%10000000
.98f9	05 22		ora $22				ora ed_flags
.98fb	85 22		sta $22				sta ed_flags
.98fd	20 60 c9	jsr $c960			jsr One_Plus		; ( addr-t u-t u+1 )
.9900	20 a6 9d	jsr $9da6			jsr ed_is_valid_line
.9903	b0 03		bcs $9908			bcs +
.9905	4c 7b 9d	jmp $9d7b			jmp ed_error_1drop	; New line number is not legal, abort
.9908					+
.9908	20 49 b7	jsr $b749			jsr Zero		; ( addr-t u-t u+1 0 )
.990b	4c cd 99	jmp $99cd			jmp _line_number_only_from_external
.990e					_command_mode:
.990e	20 49 b7	jsr $b749			jsr Zero		; parameter 1 is NOS ( addr-t u-t 0 )
.9911	20 49 b7	jsr $b749			jsr Zero		; parameter 2 is TOS ( addr-t u-t 0 0 )
.9914	a0 00		ldy #$00			ldy #0			; get char
.9916	b1 04		lda ($04),y			lda (cib),y
.9918	c9 2e		cmp #$2e			cmp #'.'
.991a	d0 31		bne $994d			bne _prefix_dollar
.991c	20 9a 9d	jsr $9d9a			jsr ed_have_text
.991f	a5 20		lda $20				lda ed_cur
.9921	95 26		sta $26,x			sta DStack+2,x
.9923	a5 21		lda $21				lda ed_cur+1
.9925	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9927	a9 80		lda #$80			lda #%10000000
.9929	05 22		ora $22				ora ed_flags
.992b	85 22		sta $22				sta ed_flags
.992d	a5 06		lda $06				lda ciblen
.992f	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9931	d0 03		bne $9936			bne +
.9933	4c cd 99	jmp $99cd			jmp _line_number_only_from_external
.9936					+
.9936	a5 04		lda $04				lda cib+0
.9938	a4 05		ldy $05				ldy cib+1
.993a	20 f8 b6	jsr $b6f8			jsr PushYA
.993d	a5 06		lda $06				lda ciblen+0
.993f	a4 07		ldy $07				ldy ciblen+1
.9941	20 f8 b6	jsr $b6f8			jsr PushYA
.9944	20 3a c9	jsr $c93a			jsr One_Minus		; ( addr-t u-t para1 0 addr u-1 )
.9947	20 6a c9	jsr $c96a			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr+1 u-1 )
.994a	4c 1f 9a	jmp $9a1f			jmp _check_for_para2
.994d					_prefix_dollar:
.994d	c9 24		cmp #$24			cmp #'$'
.994f	d0 1f		bne $9970			bne _prefix_percent
.9951	20 9a 9d	jsr $9d9a			jsr ed_have_text
.9954	e8		inx				inx
.9955	e8		inx				inx			; ( addr-t u-t 0 )
.9956	20 c7 9d	jsr $9dc7			jsr ed_last_line	; ( addr-t u-t 0 para1 )
.9959	20 88 ce	jsr $ce88			jsr Swap		; ( addr-t u-t para1 0 )
.995c	a9 80		lda #$80			lda #%10000000
.995e	05 22		ora $22				ora ed_flags
.9960	85 22		sta $22				sta ed_flags
.9962	a5 06		lda $06				lda ciblen
.9964	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9966	d0 03		bne $996b			bne +
.9968	4c cd 99	jmp $99cd			jmp _line_number_only_from_external
.996b					+
.996b	a0 01		ldy #$01			ldy #1
.996d	4c 95 9a	jmp $9a95			jmp _check_command
.9970					_prefix_percent:
.9970	c9 25		cmp #$25			cmp #'%'
.9972	f0 04		beq $9978			beq _whole_text
.9974	c9 2c		cmp #$2c			cmp #','
.9976	d0 1b		bne $9993			bne _prefix_semicolon
.9978					_whole_text:
.9978	20 9a 9d	jsr $9d9a			jsr ed_have_text
.997b	a9 01		lda #$01			lda #1
.997d	95 26		sta $26,x			sta DStack+2,x		; LSB of NOS is para 1
.997f	a9 00		lda #$00			lda #0
.9981	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t para1 0 )
.9983					_semicolon_entry:
.9983	e8		inx				inx
.9984	e8		inx				inx			; DROP ( addr-t u-t para1 )
.9985	20 c7 9d	jsr $9dc7			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9988	a9 80		lda #$80			lda #%10000000
.998a	05 22		ora $22				ora ed_flags
.998c	85 22		sta $22				sta ed_flags
.998e	a0 01		ldy #$01			ldy #1
.9990	4c 95 9a	jmp $9a95			jmp _check_command
.9993					_prefix_semicolon:
.9993	c9 3b		cmp #$3b			cmp #';'
.9995	d0 0e		bne $99a5			bne _prefix_number
.9997	20 9a 9d	jsr $9d9a			jsr ed_have_text
.999a	a5 20		lda $20				lda ed_cur
.999c	95 26		sta $26,x			sta DStack+2,x
.999e	a5 21		lda $21				lda ed_cur+1
.99a0	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.99a2	4c 83 99	jmp $9983			jmp _semicolon_entry
.99a5					_prefix_number:
.99a5	20 49 b7	jsr $b749			jsr Zero
.99a8	20 49 b7	jsr $b749			jsr Zero		; ( addr-t u-t 0 0 0 0 )
.99ab	a5 04		lda $04				lda cib+0
.99ad	a4 05		ldy $05				ldy cib+1
.99af	20 f8 b6	jsr $b6f8			jsr PushYA
.99b2	a5 06		lda $06				lda ciblen+0
.99b4	a4 07		ldy $07				ldy ciblen+1
.99b6	20 f8 b6	jsr $b6f8			jsr PushYA		; ( addr-t u-t 0 0 0 0 cib ciblen )
.99b9	20 7a af	jsr $af7a			jsr To_Number		; ( addr-t u-t 0 0 ud addr2 u2 )
.99bc	b5 24		lda $24,x			lda DStack+0,x
.99be	15 25		ora $25,x			ora DStack+1,x
.99c0	d0 25		bne $99e7			bne _have_unconverted_chars
.99c2	20 2b c4	jsr $c42b			jsr Two_Drop		; ( addr-t u-t 0 0 ud )
.99c5	20 6e bf	jsr $bf6e			jsr D_To_S		; ( addr-t u-t 0 0 u )
.99c8	20 94 cd	jsr $cd94			jsr Not_Rot		; ( addr-t u-t u 0 0 )
.99cb	e8		inx				inx
.99cc	e8		inx				inx			; ( addr-t u-t u 0 ) drop through
.99cd					_line_number_only_from_external:
.99cd	20 88 ce	jsr $ce88			jsr Swap		; ( addr-t u-t 0 u )
.99d0	20 a6 9d	jsr $9da6			jsr ed_is_valid_line
.99d3	b0 03		bcs $99d8			bcs +
.99d5	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.99d8					+
.99d8	20 88 ce	jsr $ce88			jsr Swap		; ( addr-t u-t u 0 )
.99db	20 06 9e	jsr $9e06			jsr ed_para1_to_cur
.99de	a9 80		lda #$80			lda #%10000000
.99e0	05 22		ora $22				ora ed_flags
.99e2	85 22		sta $22				sta ed_flags
.99e4	4c 64 9c	jmp $9c64			jmp ed_cmd_p_from_external
.99e7					_have_unconverted_chars:
.99e7	a5 06		lda $06				lda ciblen+0
.99e9	d5 24		cmp $24,x			cmp DStack+0,x
.99eb	d0 16		bne $9a03			bne _no_command_yet
.99ed	a5 07		lda $07				lda ciblen+1
.99ef	d5 25		cmp $25,x			cmp DStack+1,x
.99f1	d0 10		bne $9a03			bne _no_command_yet
.99f3	8a		txa				txa
.99f4	18		clc				clc
.99f5	69 08		adc #$08			adc #8
.99f7	aa		tax				tax			; ( addr-t u-t 0 0 )
.99f8	a9 7f		lda #$7f			lda #$ff-%10000000
.99fa	25 22		and $22				and ed_flags
.99fc	85 22		sta $22				sta ed_flags
.99fe	a0 00		ldy #$00			ldy #0
.9a00	4c 95 9a	jmp $9a95			jmp _check_command
.9a03					_no_command_yet:
.9a03	20 ef cd	jsr $cdef			jsr To_R		; >R ( ... 0 0 ud addr2 ) (R: u2)
.9a06	20 94 cd	jsr $cd94			jsr Not_Rot		; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.9a09	20 6e bf	jsr $bf6e			jsr D_To_S		; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.9a0c	b5 24		lda $24,x			lda DStack+0,x		; LSB
.9a0e	95 2a		sta $2a,x			sta DStack+6,x
.9a10	b5 25		lda $25,x			lda DStack+1,x		; MSB
.9a12	95 2b		sta $2b,x			sta DStack+7,x		; ( ... para1 0 addr2 para1 ) (R: u2)
.9a14	e8		inx				inx
.9a15	e8		inx				inx			; ( addr-t u-t para1 0 addr2 ) (R: u2)
.9a16	20 0e ce	jsr $ce0e			jsr R_From		; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.9a19	a9 80		lda #$80			lda #%10000000
.9a1b	05 22		ora $22				ora ed_flags
.9a1d	85 22		sta $22				sta ed_flags
.9a1f					_check_for_para2:
.9a1f	a1 26		lda ($26,x)			lda (DStack+2,x)
.9a21	c9 2c		cmp #$2c			cmp #','
.9a23	f0 0c		beq $9a31			beq _got_comma
.9a25	38		sec				sec
.9a26	a5 06		lda $06				lda ciblen
.9a28	f5 24		sbc $24,x			sbc DStack+0,x
.9a2a	a8		tay				tay
.9a2b	20 2b c4	jsr $c42b			jsr Two_Drop		; Remove the leftover stuff from >NUMBER
.9a2e	4c 95 9a	jmp $9a95			jmp _check_command
.9a31					_got_comma:
.9a31	20 6a c9	jsr $c96a			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr2+1 u2 )
.9a34	20 3a c9	jsr $c93a			jsr One_Minus		; ( addr-t u-t para1 0 addr2+1 u2-1 )
.9a37	a1 26		lda ($26,x)			lda (DStack+2,x)
.9a39	c9 24		cmp #$24			cmp #'$'
.9a3b	d0 16		bne $9a53			bne _para2_not_dollar
.9a3d	38		sec				sec
.9a3e	a5 06		lda $06				lda ciblen
.9a40	f5 26		sbc $26,x			sbc DStack+2,x
.9a42	a8		tay				tay
.9a43	c8		iny				iny
.9a44	98		tya				tya
.9a45	48		pha				pha
.9a46	8a		txa				txa
.9a47	18		clc				clc
.9a48	69 06		adc #$06			adc #6
.9a4a	aa		tax				tax			; ( addr-t u-t para1 )
.9a4b	20 c7 9d	jsr $9dc7			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9a4e	68		pla				pla
.9a4f	a8		tay				tay
.9a50	4c 95 9a	jmp $9a95			jmp _check_command
.9a53					_para2_not_dollar:
.9a53	20 ef cd	jsr $cdef			jsr To_R		; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.9a56	20 49 b7	jsr $b749			jsr Zero		; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.9a59	20 49 b7	jsr $b749			jsr Zero		; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.9a5c	20 6e cd	jsr $cd6e			jsr Rot		; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.9a5f	20 0e ce	jsr $ce0e			jsr R_From		; R> ( ... para1 0 0 0 addr2+1 u2-1)
.9a62	20 6a ce	jsr $ce6a			jsr Dup		; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.9a65	20 ef cd	jsr $cdef			jsr To_R		; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.9a68	20 7a af	jsr $af7a			jsr To_Number	; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.9a6b	20 6a ce	jsr $ce6a			jsr Dup		; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.9a6e	20 0e ce	jsr $ce0e			jsr R_From		; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.9a71	20 28 c7	jsr $c728			jsr Equal		; = ( ... para1 0 ud addr3 u3 f )
.9a74	b5 24		lda $24,x			lda DStack+0,x
.9a76	15 25		ora $25,x			ora DStack+1,x
.9a78	f0 08		beq $9a82			beq _second_number
.9a7a	8a		txa				txa
.9a7b	18		clc				clc
.9a7c	69 0c		adc #$0c			adc #12
.9a7e	aa		tax				tax			; back to ( addr-t u-t )
.9a7f	4c 7d 9d	jmp $9d7d			jmp ed_error
.9a82					_second_number:
.9a82	e8		inx				inx
.9a83	e8		inx				inx			; ( addr-t u-t para1 0 ud addr3 u3 )
.9a84	38		sec				sec
.9a85	a5 06		lda $06				lda ciblen
.9a87	f5 24		sbc $24,x			sbc DStack+0,x
.9a89	48		pha				pha
.9a8a	20 2b c4	jsr $c42b			jsr Two_drop		; 2DROP ( addr-t u-t para1 0 ud )
.9a8d	20 6e bf	jsr $bf6e			jsr D_To_S		; D>S  ( addr-t u-t para1 0 para2 )
.9a90	20 85 c8	jsr $c885			jsr Nip			; NIP ( addr-t u-t para1 para2 )
.9a93	68		pla				pla
.9a94	a8		tay				tay
.9a95					_check_command:
.9a95	24 22		bit $22				bit ed_flags
.9a97	30 08		bmi $9aa1			bmi _check_command_have_arg
.9a99	a5 20		lda $20				lda ed_cur+0
.9a9b	95 26		sta $26,x			sta DStack+2,x
.9a9d	a5 21		lda $21				lda ed_cur+1
.9a9f	95 27		sta $27,x			sta DStack+3,x
.9aa1					_check_command_have_arg:
.9aa1	b1 04		lda ($04),y			lda (cib),y		; get mystery char from input
.9aa3	85 14		sta $14				sta tmp1+0
.9aa5	85 15		sta $15				sta tmp1+1		; We need X for awhile, so it has to
.9aa7	a2 ff		ldx #$ff			ldx #$ff		; for each char
.9aa9	e8		inx		_cmd_loop:	inx			;   next char
.9aaa	bd 2a 9e	lda $9e2a,x			lda ed_cmd_list,x
.9aad	f0 13		beq $9ac2			beq _illegal_command	;   end of list?
.9aaf	c5 14		cmp $14				cmp tmp1+0
.9ab1	d0 f6		bne $9aa9			bne _cmd_loop		;   not found?
.9ab3	8a		txa				txa
.9ab4	0a		asl a				asl
.9ab5	aa		tax				tax			; X * 2 for table
.9ab6	bd 36 9e	lda $9e36,x			lda ed_cmd_table+1,x
.9ab9	48		pha				pha
.9aba	bd 35 9e	lda $9e35,x			lda ed_Cmd_table+0,x
.9abd	48		pha				pha
.9abe	a6 15		ldx $15				ldx tmp1+1		; restore X
.9ac0	08		php				php
.9ac1	40		rti				rti			; jump to command routine
.9ac2					_illegal_command:
.9ac2	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.9ac5					ed_next_command:
.9ac5	20 2b c4	jsr $c42b			jsr Two_Drop		; ( addr-t u-t ) Fall through
.9ac8					_next_command_empty:
.9ac8	4c e3 98	jmp $98e3			jmp ed_input_loop
.9acb					ed_all_done:
.9acb	a9 00		lda #$00			lda #0
.9acd	85 06		sta $06				sta ciblen
.9acf	85 07		sta $07				sta ciblen+1
.9ad1	20 2b c4	jsr $c42b			jsr Two_drop			; ( addr-t u-t )
.9ad4	a5 23		lda $23				lda editor3+1
.9ad6	8d 00 03	sta $0300			sta base
.9ad9	60		rts				rts
.9ada					ed_cmd_a:
.9ada	e8		inx				inx
.9adb	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9adc					ed_entry_cmd_i:
.9adc					ed_cmd_a_have_para:
.9adc	20 eb 9d	jsr $9deb			jsr ed_num_to_addr	  ;  ( addr-t u-t addr1 )
.9adf	20 7d aa	jsr $aa7d			jsr CR
.9ae2					_next_string_loop:
.9ae2	20 8b 9d	jsr $9d8b			jsr ed_get_input
.9ae5	a0 00		ldy #$00			ldy #0
.9ae7	b1 04		lda ($04),y			lda (cib),y
.9ae9	c9 2e		cmp #$2e			cmp #'.'
.9aeb	d0 18		bne $9b05			bne _add_line
.9aed	a4 06		ldy $06				ldy ciblen
.9aef	c0 01		cpy #$01			cpy #1
.9af1	d0 12		bne $9b05			bne _add_line
.9af3	a4 07		ldy $07				ldy ciblen+1
.9af5	d0 0e		bne $9b05			bne _add_line
.9af7	e8		inx				inx
.9af8	e8		inx				inx
.9af9	a9 40		lda #$40			lda #%01000000
.9afb	05 22		ora $22				ora ed_flags
.9afd	85 22		sta $22				sta ed_flags
.9aff	20 7d aa	jsr $aa7d			jsr CR
.9b02	4c e3 98	jmp $98e3			jmp ed_input_loop
.9b05					_add_line:
.9b05	20 6a ce	jsr $ce6a			jsr Dup			; ( addr-t u-t addr1 addr1 )
.9b08	20 2c c9	jsr $c92c			jsr Here		; ( addr-t u-t addr1 addr1 here )
.9b0b	20 88 ce	jsr $ce88			jsr Swap		; ( addr-t u-t addr1 here addr1 )
.9b0e	20 d4 cd	jsr $cdd4			jsr Fetch		; ( addr-t u-t addr1 here addr2 )
.9b11	20 20 cc	jsr $cc20			jsr Comma		; ( addr-t u-t addr1 here )
.9b14	20 e5 cb	jsr $cbe5			jsr Tuck		; TUCK ( addr-t u-t here addr1 here )
.9b17	20 88 ce	jsr $ce88			jsr Swap		; ( addr-t u-t here here addr1 )
.9b1a	20 b7 cd	jsr $cdb7			jsr Store		; ( addr-t u-t here )
.9b1d	20 2c c9	jsr $c92c			jsr Here		; HERE ( addr-t u-t here here2)
.9b20	a9 04		lda #$04			lda #4
.9b22	20 3a b7	jsr $b73a			jsr PushZA
.9b25	20 08 c0	jsr $c008			jsr Allot
.9b28	e6 20		inc $20				inc ed_cur
.9b2a	d0 02		bne $9b2e			bne +
.9b2c	e6 21		inc $21				inc ed_cur+1
.9b2e					+
.9b2e	20 2c c9	jsr $c92c			jsr Here	; ( addr-t u-t here here2 here3 )
.9b31	a5 04		lda $04				lda cib+0
.9b33	a4 05		ldy $05				ldy cib+1
.9b35	20 f8 b6	jsr $b6f8			jsr PushYA	; ( addr-t u-t here here2 here3 cib )
.9b38	20 41 ce	jsr $ce41			jsr Over	; ( addr-t u-t here here2 here3 cib here3 )
.9b3b	a5 06		lda $06				lda ciblen+0
.9b3d	a4 07		ldy $07				ldy ciblen+1
.9b3f	20 f8 b6	jsr $b6f8			jsr PushYA	; ( addr-t u-t here here2 here3 cib here3 ciblen )
.9b42	20 97 ac	jsr $ac97			jsr Move	; ( addr-t u-t here here2 here3 )
.9b45	18		clc				clc
.9b46	a5 00		lda $00				lda cp
.9b48	65 06		adc $06				adc ciblen
.9b4a	85 00		sta $00				sta cp
.9b4c	90 06		bcc $9b54			bcc +
.9b4e	a5 01		lda $01				lda cp+1
.9b50	65 07		adc $07				adc ciblen+1
.9b52	85 01		sta $01				sta cp+1
.9b54					+
.9b54	20 41 ce	jsr $ce41			jsr Over		; ( addr-t u-t here here2 here3 here2 )
.9b57	20 b7 cd	jsr $cdb7			jsr Store		; ( addr-t u-t here here2 )
.9b5a	20 0d c9	jsr $c90d			jsr Cell_Plus_NoUf	; ( addr-t u-t here here2+2 )
.9b5d	20 6a ce	jsr $ce6a			jsr Dup			; ( addr-t u-t here here2+2 here2+2 )
.9b60	a5 06		lda $06				lda ciblen
.9b62	95 26		sta $26,x			sta DStack+2,x
.9b64	a5 07		lda $07				lda ciblen+1
.9b66	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t here ciblen here2+2 )
.9b68	20 b7 cd	jsr $cdb7			jsr Store		; ( addr-t u-t here )
.9b6b	20 7d aa	jsr $aa7d			jsr CR			; Add a line feed for visuals
.9b6e	4c e2 9a	jmp $9ae2			jmp _next_string_loop
.9b71					ed_cmd_d:
.9b71	20 9a 9d	jsr $9d9a			jsr ed_have_text
.9b74	20 dd 9d	jsr $9ddd			jsr ed_no_line_zero
.9b77	b5 24		lda $24,x			lda DStack+0,x
.9b79	15 25		ora $25,x			ora DStack+1,x
.9b7b	d0 09		bne $9b86			bne +
.9b7d	20 41 ce	jsr $ce41			jsr Over		; ( addr-t u-t para1 0 para1 )
.9b80	20 bb 9b	jsr $9bbb			jsr _cmd_d_common	; ( addr-t u-t para1 0 )
.9b83	4c af 9b	jmp $9baf			jmp _cmd_d_done
.9b86					+
.9b86	20 a6 9d	jsr $9da6			jsr ed_is_valid_line	  ; result is in C flag
.9b89	b0 03		bcs $9b8e			bcs _cmd_d_loop
.9b8b	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.9b8e					_cmd_d_loop:
.9b8e	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9b90	d5 26		cmp $26,x			cmp DStack+2,x
.9b92	b5 25		lda $25,x			lda DStack+1,x
.9b94	f5 27		sbc $27,x			sbc DStack+3,x
.9b96	90 0c		bcc $9ba4			bcc _cmd_d_done_with_flag
.9b98	20 6a ce	jsr $ce6a			jsr Dup		; DUP ( addr-t u-t para1 para2 para2 )
.9b9b	20 bb 9b	jsr $9bbb			jsr _cmd_d_common	; ( addr-t u-t para1 para2 )
.9b9e	20 3a c9	jsr $c93a			jsr One_minus	; 1- ( addr-t u-t para1 para2-1 )
.9ba1	4c 8e 9b	jmp $9b8e			jmp _cmd_d_loop
.9ba4					_cmd_d_done_with_flag:
.9ba4	20 46 c9	jsr $c946			jsr NOS_One_Minus
.9ba7	b5 26		lda $26,x			lda DStack+2,x
.9ba9	85 20		sta $20				sta ed_cur
.9bab	b5 27		lda $27,x			lda DStack+3,x
.9bad	85 21		sta $21				sta ed_cur+1		; drop through to _cmd_d_done
.9baf					_cmd_d_done:
.9baf	a9 40		lda #$40			lda #%01000000
.9bb1	05 22		ora $22				ora ed_flags
.9bb3	85 22		sta $22				sta ed_flags
.9bb5	20 7d aa	jsr $aa7d			jsr CR
.9bb8	4c c5 9a	jmp $9ac5			jmp ed_next_command
.9bbb					_cmd_d_common:
.9bbb	20 6a ce	jsr $ce6a			jsr Dup			; ( addr-t u-t u u )
.9bbe	20 eb 9d	jsr $9deb			jsr ed_num_to_addr	; ( addr-t u-t u addr )
.9bc1	20 d4 cd	jsr $cdd4			jsr Fetch		; ( addr-t u-t u addr1 )
.9bc4	20 88 ce	jsr $ce88			jsr Swap		; ( addr-t u-t addr1 u )
.9bc7	20 3a c9	jsr $c93a			jsr One_minus		; ( addr-t u-t addr1 u-1 )
.9bca	20 eb 9d	jsr $9deb			jsr ed_num_to_addr	; ( addr-t u-t addr1 addr-1 )
.9bcd	4c b7 cd	jmp $cdb7			jmp Store		; ( addr-t u-t )
.9bd0					ed_cmd_equ:
.9bd0	a5 1e		lda $1e				lda ed_head
.9bd2	05 1f		ora $1f				ora ed_head+1
.9bd4	d0 06		bne $9bdc			bne _cmd_equ_have_text
.9bd6	20 49 b7	jsr $b749			jsr Zero		; ( addr-t u-t para1 para2 0 )
.9bd9	4c fc 9b	jmp $9bfc			jmp _cmd_equ_done
.9bdc					_cmd_equ_have_text:
.9bdc	20 dd 9d	jsr $9ddd			jsr ed_no_line_zero
.9bdf	24 22		bit $22				bit ed_flags
.9be1	30 0a		bmi $9bed			bmi _cmd_equ_have_para
.9be3	a5 20		lda $20				lda ed_cur+0		; ( addr-t u-t para1 para2 ? )
.9be5	a4 21		ldy $21				ldy ed_cur+1
.9be7	20 f8 b6	jsr $b6f8			jsr PushYA
.9bea	4c fc 9b	jmp $9bfc			jmp _cmd_equ_done	; ( addr-t u-t para1 para2 cur )
.9bed					_cmd_equ_have_para:
.9bed	b5 24		lda $24,x			lda DStack+0,x
.9bef	15 25		ora $25,x			ora DStack+1,x
.9bf1	d0 06		bne $9bf9			bne _cmd_equ_two_paras
.9bf3	20 41 ce	jsr $ce41			jsr Over		; ( addr-t u-t para1 para2 para1)
.9bf6	4c fc 9b	jmp $9bfc			jmp _cmd_equ_done
.9bf9					_cmd_equ_two_paras:
.9bf9	20 6a ce	jsr $ce6a			jsr Dup			; ( addr-t u-t para1 para2 para2) drop through
.9bfc					_cmd_equ_done:
.9bfc	20 7d aa	jsr $aa7d			jsr CR			; number goes on new line
.9bff	20 19 cb	jsr $cb19			jsr U_Dot		; ( addr-t u-t para1 para2 )
.9c02	20 7d aa	jsr $aa7d			jsr CR
.9c05	4c c5 9a	jmp $9ac5			jmp ed_next_command
.9c08					ed_cmd_f:
.9c08	24 22		bit $22				bit ed_flags
.9c0a	30 18		bmi $9c24			bmi _cmd_f_have_para
.9c0c	20 7d aa	jsr $aa7d			jsr CR
.9c0f	20 ef cd	jsr $cdef			jsr To_R		; ( addr-t u-t 0 ) ( R: 0 )
.9c12	20 6e cd	jsr $cd6e			jsr Rot			; ( u-t 0 addr-t ) ( R: 0 )
.9c15	20 6a ce	jsr $ce6a			jsr Dup			; ( u-t 0 addr-t addr-t ) ( R: 0 )
.9c18	20 19 cb	jsr $cb19			jsr U_Dot		; ( u-t 0 addr-t ) ( R: 0 )
.9c1b	20 94 cd	jsr $cd94			jsr Not_Rot		; ( addr-t u-t 0 ) ( R: 0 )
.9c1e	20 0e ce	jsr $ce0e			jsr R_From		; ( addr-t u-t 0 0 )
.9c21	4c 35 9c	jmp $9c35			jmp _cmd_f_done
.9c24					_cmd_f_have_para:
.9c24	20 41 ce	jsr $ce41			jsr Over
.9c27	20 7d aa	jsr $aa7d			jsr CR
.9c2a	20 19 cb	jsr $cb19			jsr U_Dot
.9c2d	b5 26		lda $26,x			lda DStack+2,x
.9c2f	95 2a		sta $2a,x			sta DStack+6,x
.9c31	b5 27		lda $27,x			lda DStack+3,x
.9c33	95 2b		sta $2b,x			sta DStack+7,x		; fall through to _cmd_f_done
.9c35					_cmd_f_done:
.9c35	20 7d aa	jsr $aa7d			jsr CR
.9c38	4c c5 9a	jmp $9ac5			jmp ed_next_command
.9c3b					ed_cmd_i:
.9c3b	e8		inx				inx
.9c3c	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9c3d	24 22		bit $22				bit ed_flags
.9c3f	30 08		bmi $9c49			bmi _cmd_i_have_para
.9c41	a5 20		lda $20				lda ed_cur
.9c43	95 24		sta $24,x			sta DStack+0,x
.9c45	a5 21		lda $21				lda ed_cur+1
.9c47	95 25		sta $25,x			sta DStack+1,x		;  ( addr-t u-t cur ) drop through
.9c49					_cmd_i_have_para:
.9c49	b5 24		lda $24,x			lda DStack+0,x
.9c4b	15 25		ora $25,x			ora DStack+1,x
.9c4d	f0 09		beq $9c58			beq _cmd_i_done
.9c4f	20 3a c9	jsr $c93a			jsr One_minus		; ( addr-t u-t para1-1 )
.9c52	20 49 b7	jsr $b749			jsr Zero		; ( addr-t u-t para1-1 0 )
.9c55	20 6a c8	jsr $c86a			jsr Max			; ( addr-t u-t para1-1 | 0 )
.9c58					_cmd_i_done:
.9c58	4c dc 9a	jmp $9adc			jmp ed_entry_cmd_i
.9c5b					ed_cmd_n:
.9c5b	a9 01		lda #$01			lda #%00000001
.9c5d	05 22		ora $22				ora ed_flags
.9c5f	85 22		sta $22				sta ed_flags
.9c61	4c 6a 9c	jmp $9c6a			jmp ed_cmd_p_entry_for_cmd_n
.9c64					ed_cmd_p:
.9c64					ed_cmd_p_from_external:
.9c64	a9 fe		lda #$fe			lda #$ff-%00000001
.9c66	25 22		and $22				and ed_flags
.9c68	85 22		sta $22				sta ed_flags
.9c6a					ed_cmd_p_entry_for_cmd_n:
.9c6a	20 9a 9d	jsr $9d9a			jsr ed_have_text
.9c6d	20 dd 9d	jsr $9ddd			jsr ed_no_line_zero
.9c70	20 7d aa	jsr $aa7d			jsr CR
.9c73	b5 24		lda $24,x			lda DStack+0,x
.9c75	15 25		ora $25,x			ora DStack+1,x
.9c77	d0 11		bne $9c8a			bne _cmd_p_loop
.9c79	b5 26		lda $26,x			lda DStack+2,x
.9c7b	85 20		sta $20				sta ed_cur
.9c7d	b5 27		lda $27,x			lda DStack+3,x
.9c7f	85 21		sta $21				sta ed_cur+1
.9c81	20 41 ce	jsr $ce41			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9c84	20 ab 9c	jsr $9cab			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9c87	4c a8 9c	jmp $9ca8			jmp _cmd_p_all_done
.9c8a					_cmd_p_loop:
.9c8a	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9c8c	d5 26		cmp $26,x			cmp DStack+2,x
.9c8e	b5 25		lda $25,x			lda DStack+1,x
.9c90	f5 27		sbc $27,x			sbc DStack+3,x
.9c92	90 0c		bcc $9ca0			bcc _cmd_p_done
.9c94	20 41 ce	jsr $ce41			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9c97	20 ab 9c	jsr $9cab			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9c9a	20 6a c9	jsr $c96a			jsr NOS_One_Plus
.9c9d	4c 8a 9c	jmp $9c8a			jmp _cmd_p_loop
.9ca0					_cmd_p_done:
.9ca0	b5 24		lda $24,x			lda DStack+0,x
.9ca2	85 20		sta $20				sta ed_cur
.9ca4	b5 25		lda $25,x			lda DStack+1,x
.9ca6	85 21		sta $21				sta ed_cur+1
.9ca8					_cmd_p_all_done:
.9ca8	4c c5 9a	jmp $9ac5			jmp ed_next_command
.9cab					_cmd_p_common:
.9cab	a5 22		lda $22				lda ed_flags
.9cad	4a		lsr a				lsr			; bit 0 now in carry
.9cae	90 0b		bcc $9cbb			bcc _cmd_p_common_no_num
.9cb0	20 6a ce	jsr $ce6a			jsr Dup			; ( addr-t u-t para1 para1 )
.9cb3	20 19 cb	jsr $cb19			jsr U_Dot		; ( addr-t u-t para1 )
.9cb6	a9 09		lda #$09			lda #AscHT
.9cb8	20 d8 cc	jsr $ccd8			jsr Emit_A
.9cbb					_cmd_p_common_no_num:
.9cbb	20 eb 9d	jsr $9deb			jsr ed_num_to_addr	  ; ( addr-t u-t addr )
.9cbe	4c 0f 9e	jmp $9e0f			jmp ed_print_addr
.9cc1					ed_cmd_q:
.9cc1	24 22		bit $22				bit ed_flags		; bit 6 is change flag
.9cc3	50 03		bvc $9cc8			bvc +
.9cc5	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.9cc8					+
.9cc8	4c cb 9a	jmp $9acb			jmp ed_all_done		   ; can't fall thru because of PLX
.9ccb					ed_cmd_qq:
.9ccb	4c cb 9a	jmp $9acb			jmp ed_all_done
.9cce					ed_cmd_w:
.9cce	20 9a 9d	jsr $9d9a			jsr ed_have_text
.9cd1	24 22		bit $22				bit ed_flags		; parameter given?
.9cd3	30 12		bmi $9ce7			bmi _cmd_w_have_para
.9cd5	b5 2b		lda $2b,x			lda DStack+7,x		; $0000 thru $00ff ?
.9cd7	d0 03		bne $9cdc			bne +
.9cd9	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.9cdc					+
.9cdc	b5 2a		lda $2a,x			lda DStack+6,x
.9cde	95 26		sta $26,x			sta DStack+2,x
.9ce0	b5 2b		lda $2b,x			lda DStack+7,x
.9ce2	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t addr-t ? )
.9ce4	4c ef 9c	jmp $9cef			jmp _cmd_w_para_ready
.9ce7					_cmd_w_have_para:
.9ce7	b5 26		lda $26,x			lda DStack+2,x
.9ce9	95 2a		sta $2a,x			sta DStack+6,x
.9ceb	b5 27		lda $27,x			lda DStack+3,x
.9ced	95 2b		sta $2b,x			sta DStack+7,x		; drop through to _cmd_w_para_ready
.9cef					_cmd_w_para_ready:
.9cef	a9 1e		lda #$1e			lda #<ed_head
.9cf1	95 24		sta $24,x			sta DStack+0,x
.9cf3	a9 00		lda #$00			lda #>ed_head
.9cf5	95 25		sta $25,x			sta DStack+1,x		; ( addr-t u-t addr-t addr-h )
.9cf7	20 41 ce	jsr $ce41			jsr Over		; ( addr-t u-t addr-t addr-h addr-t )
.9cfa	20 ef cd	jsr $cdef			jsr To_R		; ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.9cfd					_cmd_w_loop:
.9cfd	20 d4 cd	jsr $cdd4			jsr Fetch		; ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.9d00	b5 24		lda $24,x			lda DStack+0,x
.9d02	15 25		ora $25,x			ora DStack+1,x
.9d04	f0 4d		beq $9d53			beq _cmd_w_eol
.9d06	20 c4 cb	jsr $cbc4			jsr Two_dup		; ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.9d09	20 3e c5	jsr $c53e			jsr Two_to_r		; ( addr-t addr-1 ) (R: ... )
.9d0c	20 0d c9	jsr $c90d			jsr Cell_Plus_NoUf	; ( addr-t addr1+2 ) (R: ... )
.9d0f	20 6a ce	jsr $ce6a			jsr Dup			; ( addr-t addr1+2 addr1+2 ) ( R: ... )
.9d12	20 d4 cd	jsr $cdd4			jsr Fetch		; ( addr-t addr1+2 addr-s ) ( R: ... )
.9d15	20 88 ce	jsr $ce88			jsr Swap		; ( addr-t addr-s addr1+2 ) ( R: ... )
.9d18	20 0d c9	jsr $c90d			jsr Cell_Plus_NoUf	; ( addr-t addr-s addr1+2 ) (R: ... )
.9d1b	20 d4 cd	jsr $cdd4			jsr Fetch		; ( addr-t addr-s u-s ) ( R: ... )
.9d1e	20 94 cd	jsr $cd94			jsr Not_Rot		; ( u-s addr-t addr-s ) ( R: ... )
.9d21	20 88 ce	jsr $ce88			jsr Swap		; ( u-s addr-s addr-t ) ( R: ... )
.9d24	20 6e cd	jsr $cd6e			jsr Rot			; (addr-s addr-t u-s ) ( R: ... )
.9d27	20 6a ce	jsr $ce6a			jsr Dup			; (addr-s addr-t u-s u-s ) ( R: ... )
.9d2a	20 ef cd	jsr $cdef			jsr To_R		; (addr-s addr-t u-s ) ( R: ... u-s )
.9d2d	20 97 ac	jsr $ac97			jsr Move		; ( )( R: addr-t addr-1 addr-t )
.9d30	20 0e ce	jsr $ce0e			jsr R_From		; ( u-s )  ( R: addr-t addr-h addr-t )
.9d33	20 19 c5	jsr $c519			jsr Two_r_from		; ( u-s addr-t addr-h ) ( R: addr-t )
.9d36	20 94 cd	jsr $cd94			jsr Not_Rot		; ( addr-h u-s addr-t ) ( R: addr-t )
.9d39	20 b4 ca	jsr $cab4			jsr Plus		; ( addr-h addr-t1 ) ( R: addr-t )
.9d3c	20 6a ce	jsr $ce6a			jsr Dup			; ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.9d3f	a9 0a		lda #$0a			lda #AscLF
.9d41	20 3a b7	jsr $b73a			jsr PushZA		; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.9d44	20 88 ce	jsr $ce88			jsr Swap		; ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.9d47	20 b7 cd	jsr $cdb7			jsr Store		; ( addr-h addr-t1 ) ( R: addr-t )
.9d4a	20 60 c9	jsr $c960			jsr One_plus		; ( addr-h addr-t1+1 ) ( R: addr-t )
.9d4d	20 88 ce	jsr $ce88			jsr Swap		; ( addr-t1+1 addr-h ) ( R: addr-t )
.9d50	4c fd 9c	jmp $9cfd			jmp _cmd_w_loop
.9d53					_cmd_w_eol:
.9d53	20 88 ce	jsr $ce88			jsr Swap		; ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.9d56	20 0e ce	jsr $ce0e			jsr R_From		; ( addr-t u-t addr-n addr-tn addr-t )
.9d59	20 cd ca	jsr $cacd			jsr Minus		; ( addr-t u-t addr-n u )
.9d5c	b5 24		lda $24,x			lda DStack+0,x
.9d5e	95 28		sta $28,x			sta DStack+4,x
.9d60	b5 25		lda $25,x			lda DStack+1,x
.9d62	95 29		sta $29,x			sta DStack+5,x		; ( addr-t u addr-n u )
.9d64	20 7d aa	jsr $aa7d			jsr CR
.9d67	20 6a ce	jsr $ce6a			jsr Dup			; ( addr-t u addr-n u u )
.9d6a	20 19 cb	jsr $cb19			jsr U_Dot		; ( addr-t u addr-n u )
.9d6d	20 7d aa	jsr $aa7d			jsr CR
.9d70	a9 bf		lda #$bf			lda #$ff-%01000000
.9d72	25 22		and $22				and ed_flags
.9d74	85 22		sta $22				sta ed_flags
.9d76	4c c5 9a	jmp $9ac5			jmp ed_next_command
.9d79					ed_error_2drop:
.9d79	e8		inx				inx			; Drop para2
.9d7a	e8		inx				inx
.9d7b					ed_error_1drop:
.9d7b	e8		inx				inx			; Drop para1
.9d7c	e8		inx				inx
.9d7d					ed_error:
.9d7d	20 7d aa	jsr $aa7d			jsr CR
.9d80	a9 3f		lda #$3f			lda #'?'
.9d82	20 d8 cc	jsr $ccd8			jsr Emit_A
.9d85	20 7d aa	jsr $aa7d			jsr CR
.9d88	4c e3 98	jmp $98e3			jmp ed_input_loop
.9d8b					ed_get_input:
.9d8b	20 a1 c1	jsr $c1a1			jsr Refill		;  ( addr-t u-t f )
.9d8e	b5 24		lda $24,x			lda DStack+0,x
.9d90	d0 05		bne $9d97			bne +
.9d92	68		pla				pla
.9d93	68		pla				pla
.9d94	4c 7b 9d	jmp $9d7b			jmp ed_error_1drop
.9d97					+
.9d97	e8		inx				inx
.9d98	e8		inx				inx
.9d99	60		rts				rts
.9d9a					ed_have_text:
.9d9a	a5 1e		lda $1e				lda ed_head
.9d9c	05 1f		ora $1f				ora ed_head+1
.9d9e	d0 05		bne $9da5			bne +
.9da0	68		pla				pla
.9da1	68		pla				pla
.9da2	4c 7d 9d	jmp $9d7d			jmp ed_error
.9da5					+
.9da5	60		rts				rts
.9da6					ed_is_valid_line:
.9da6	38		sec				sec				; default is legal line number
.9da7	b5 24		lda $24,x			lda DStack+0,x
.9da9	15 25		ora $25,x			ora DStack+1,x
.9dab	f0 18		beq $9dc5			beq _nope_zero	; ( n )
.9dad	20 6a ce	jsr $ce6a			jsr Dup				; ( n n )
.9db0	20 c7 9d	jsr $9dc7			jsr ed_last_line		; ( n n last )
.9db3	20 88 ce	jsr $ce88			jsr Swap			; ( n last n )
.9db6	20 5e c7	jsr $c75e			jsr Less_Than			; ( n f )
.9db9	b5 24		lda $24,x			lda DStack+0,x			; 0 flag is good
.9dbb	15 25		ora $25,x			ora DStack+1,x
.9dbd	d0 04		bne $9dc3			bne _too_small
.9dbf	e8		inx				inx
.9dc0	e8		inx				inx			; DROP flag ( n )
.9dc1	38		sec				sec			; signal valid
.9dc2	60		rts				rts
.9dc3					_too_small:
.9dc3	e8		inx				inx
.9dc4	e8		inx				inx
.9dc5					_nope_zero:
.9dc5	18		clc				clc			; signal not valid
.9dc6	60		rts				rts
.9dc7					ed_last_line:
.9dc7	20 49 b7	jsr $b749			jsr Zero		; Set counter to zero
.9dca	a9 1e		lda #$1e			lda #ed_head
.9dcc	20 3a b7	jsr $b73a			jsr PushZA		; ( count addr )
.9dcf					_loop:
.9dcf	20 d4 cd	jsr $cdd4			jsr Fetch		; ( count addr|0 )
.9dd2	b5 25		lda $25,x			lda DStack+1,x		; at end-of-list?
.9dd4	f0 06		beq $9ddc			beq _done
.9dd6	20 6a c9	jsr $c96a			jsr NOS_One_Plus	; Increase counter
.9dd9	4c cf 9d	jmp $9dcf			jmp _loop		; continue
.9ddc					_done:
.9ddc	60		rts				rts
.9ddd					ed_no_line_zero:
.9ddd	b5 26		lda $26,x			lda DStack+2,x
.9ddf	15 27		ora $27,x			ora DStack+3,x
.9de1	d0 07		bne $9dea			bne _done
.9de3	24 22		bit $22				bit ed_flags
.9de5	10 03		bpl $9dea			bpl _done
.9de7	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.9dea					_done:
.9dea	60		rts				rts
.9deb					ed_num_to_addr:
.9deb	a9 1e		lda #$1e			lda #ed_head
.9ded	20 3a b7	jsr $b73a			jsr PushZA		; ( u addr-h )
.9df0	4c fd 9d	jmp $9dfd			jmp _test
.9df3					_loop:
.9df3	20 d4 cd	jsr $cdd4			jsr Fetch		; @ ( u addr1 )
.9df6	b5 25		lda $25,x			lda DStack+1,x		; at end of list?
.9df8	f0 09		beq $9e03			beq _finished
.9dfa	20 46 c9	jsr $c946			jsr NOS_One_Minus	; decrement the line count
.9dfd	b5 26		lda $26,x	_test:		lda DStack+2,x		; is the nth element we're looking for?
.9dff	15 27		ora $27,x			ora DStack+3,x
.9e01	d0 f0		bne $9df3			bne _loop
.9e03					_finished:
.9e03	4c 85 c8	jmp $c885			jmp Nip			; ( addr )
.9e06					ed_para1_to_cur:
.9e06	b5 26		lda $26,x			lda DStack+2,x
.9e08	85 20		sta $20				sta ed_cur
.9e0a	b5 27		lda $27,x			lda DStack+3,x
.9e0c	85 21		sta $21				sta ed_cur+1
.9e0e	60		rts				rts
.9e0f					ed_print_addr:
.9e0f	20 0a c9	jsr $c90a			jsr Cell_Plus		; ( addr+2 )
.9e12	20 6a ce	jsr $ce6a			jsr Dup			; ( addr+2 addr+2 )
.9e15	20 0a c9	jsr $c90a			jsr Cell_Plus		; ( addr+2 addr+4 )
.9e18	20 d4 cd	jsr $cdd4			jsr Fetch		; ( addr+2 u-s )
.9e1b	20 88 ce	jsr $ce88			jsr Swap		; ( u-s addr+2 )
.9e1e	20 d4 cd	jsr $cdd4			jsr Fetch		; ( u-s addr-s )
.9e21	20 88 ce	jsr $ce88			jsr Swap		; ( addr-s u-s )
.9e24	20 f2 cc	jsr $ccf2			jsr Type
.9e27	4c 7d aa	jmp $aa7d			jmp CR
>9e2a	61 66 69 64 70 6e 3d 77		ed_cmd_list:	.text "afidpn=wqQ", 0
>9e32	71 51 00
.9e35					ed_cmd_table:
>9e35	da 9a 08 9c 3b 9c 71 9b				.word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>9e3d	64 9c 5b 9c
>9e41	d0 9b ce 9c c1 9c cb 9c				.word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.9e49					ed6502_end:
>9e49	53 65 65			L1:	.text "See"	;  name of word as a string, ending at wh_NameLastChar
>9e4c	03					.byte *-L1	;wh_NameLength	length of name
>9e4d	3e 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9e4f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9e50	08					.byte NN	;wh_Flags	dictionary flags
=40396					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9e51					See:
.9e51	20 b6 bb	jsr $bbb6			jsr Tick_Nt		; ( nt )
.9e54	20 7d aa	jsr $aa7d			jsr CR
.9e57	ad 00 03	lda $0300			lda base		; Save the current number base
.9e5a	48		pha				pha
.9e5b	a9 62		lda #$62			lda #<str_see_nt	; print nt
.9e5d	a0 da		ldy #$da			ldy #>str_see_nt
.9e5f	20 13 cd	jsr $cd13			jsr Print_ASCIIZ_YA_no_lf
.9e62	20 6a ce	jsr $ce6a			jsr Dup			; ( nt nt )
.9e65	20 12 a8	jsr $a812			jsr Dot_Hex
.9e68	20 e5 cc	jsr $cce5			jsr Space		; ( nt )
.9e6b	20 6a ce	jsr $ce6a			jsr Dup			; ( nt nt )
.9e6e	20 20 bd	jsr $bd20			jsr Name_To_Int		; ( nt xt )
.9e71	a9 68		lda #$68			lda #<str_see_xt	; print xt
.9e73	a0 da		ldy #$da			ldy #>str_see_xt
.9e75	20 13 cd	jsr $cd13			jsr Print_ASCIIZ_YA_no_lf
.9e78	20 6a ce	jsr $ce6a			jsr Dup			; ( nt xt xt )
.9e7b	20 12 a8	jsr $a812			jsr Dot_Hex
.9e7e	20 7d aa	jsr $aa7d			jsr CR			; ( nt xt )
.9e81	a9 5b		lda #$5b			lda #<str_see_flags
.9e83	a0 da		ldy #$da			ldy #>str_see_flags
.9e85	20 13 cd	jsr $cd13			jsr Print_ASCIIZ_YA_no_lf
.9e88	20 41 ce	jsr $ce41			jsr Over		; ( nt xt nt )
.9e8b	a9 84		lda #$84			lda #Wh_Flags
.9e8d	20 0f c9	jsr $c90f			jsr Plus_A		; ( nt xt ^flags )
.9e90	a1 24		lda ($24,x)			lda (DStack+0,x)	; ( nt xt ^flags )
.9e92	95 24		sta $24,x			sta DStack+0,x		; ( nt xt flags )
.9e94	a0 0e		ldy #$0e			ldy #2*7		; for bit 7..0
.9e96	20 e5 cc	jsr $cce5	_flag_loop:	jsr Space
.9e99	b9 fd 9e	lda $9efd,y			lda _FlagLabels+0,y	;   print label
.9e9c	20 d8 cc	jsr $ccd8			jsr Emit_A
.9e9f	b9 fe 9e	lda $9efe,y			lda _FlagLabels+1,y
.9ea2	20 d8 cc	jsr $ccd8			jsr Emit_A
.9ea5	a9 3d		lda #$3d			lda #'='
.9ea7	20 d8 cc	jsr $ccd8			jsr Emit_A
.9eaa	16 24		asl $24,x			asl DStack+0,x		;   c = flag, rotate the rest
.9eac	a9 00		lda #$00			lda #0
.9eae	69 30		adc #$30			adc #'0'
.9eb0	20 d8 cc	jsr $ccd8			jsr Emit_A
.9eb3	88		dey				dey
.9eb4	88		dey				dey
.9eb5	10 df		bpl $9e96			bpl _flag_loop
.9eb7	e8		inx				inx
.9eb8	e8		inx				inx			; ( nt xt )
.9eb9	20 7d aa	jsr $aa7d			jsr CR
.9ebc	a9 6e		lda #$6e			lda #<str_see_size	; print size
.9ebe	a0 da		ldy #$da			ldy #>str_see_size
.9ec0	20 13 cd	jsr $cd13			jsr Print_ASCIIZ_YA_no_lf
.9ec3	20 88 ce	jsr $ce88			jsr Swap		; ( xt nt )
.9ec6	20 31 aa	jsr $aa31			jsr WordSize		; ( xt u )
.9ec9	20 f9 b0	jsr $b0f9			jsr Decimal
.9ecc	b5 24		lda $24,x			lda DStack+0,x		; if = 255
.9ece	c9 ff		cmp #$ff			cmp #$ff
.9ed0	d0 11		bne $9ee3			bne _size5
.9ed2	20 19 b8	jsr $b819			jsr sliteral_runtime	;   type "large"
.9ed5	4c dd 9e	jmp $9edd			  jmp _size2
>9ed8	6c 61 72 67 65					  .text "large"
.9edd	20 f2 cc	jsr $ccf2	_size2:		jsr Type
.9ee0	4c e9 9e	jmp $9ee9			jmp _size9		;  else
.9ee3	20 6a ce	jsr $ce6a	_size5:		jsr Dup			;    type size
.9ee6	20 19 cb	jsr $cb19			jsr U_Dot
.9ee9					_size9:
.9ee9	20 7d aa	jsr $aa7d			jsr CR
.9eec	68		pla				pla			; restore base
.9eed	8d 00 03	sta $0300			sta base
.9ef0	20 c4 cb	jsr $cbc4			jsr Two_dup
.9ef3	20 6a a7	jsr $a76a			jsr Dump		; dump
.9ef6	20 7d aa	jsr $aa7d			jsr CR
.9ef9	20 90 d7	jsr $d790			jsr DisAsm		; disassemble
=171					CL	.var *-(WordListLink+wh_Xt)
=$9efc					en = *	; remember here
>9e4f	ab					.byte CL	;wh_CodeLength
.9efc	60		rts				rts
>9efd	43 4f 41 4e 49 4d 4e 4e		_FlagLabels:	.text "COANIMNNUF__R6__"
>9f05	55 46 5f 5f 52 36 5f 5f
>9f0d	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9f15	72 64 4c 69 73 74
>9f1b	0e					.byte *-L1	;wh_NameLength	length of name
>9f1c	cc 9d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f1e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f1f	08					.byte NN	;wh_Flags	dictionary flags
=40603					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f20	4c 49 b7	jmp $b749	Forth_WordList:	jmp Zero
=3					CL	.var *-(WordListLink+wh_Xt)
=$9f23					en = *	; remember here
>9f1e	03					.byte CL	;wh_CodeLength
>9f23	45 64 69 74 6f 72 2d 57		L1:	.text "Editor-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9f2b	6f 72 64 4c 69 73 74
>9f32	0f					.byte *-L1	;wh_NameLength	length of name
>9f33	9b 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f35	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f36	08					.byte NN	;wh_Flags	dictionary flags
=40626					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f37					Editor_WordList:
.9f37	4c 53 b7	jmp $b753			jmp One
=3					CL	.var *-(WordListLink+wh_Xt)
=$9f3a					en = *	; remember here
>9f35	03					.byte CL	;wh_CodeLength
>9f3a	41 73 73 65 6d 62 6c 65		L1:	.text "Assembler-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9f42	72 2d 57 6f 72 64 4c 69 73 74
>9f4c	12					.byte *-L1	;wh_NameLength	length of name
>9f4d	b2 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f4f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f50	08					.byte NN	;wh_Flags	dictionary flags
=40652					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f51					Assembler_WordList:
.9f51	4c 5d b7	jmp $b75d			jmp Two
=3					CL	.var *-(WordListLink+wh_Xt)
=$9f54					en = *	; remember here
>9f4f	03					.byte CL	;wh_CodeLength
>9f54	52 6f 6f 74 2d 57 6f 72		L1:	.text "Root-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>9f5c	64 6c 69 73 74
>9f61	0d					.byte *-L1	;wh_NameLength	length of name
>9f62	cc 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f64	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f65	08					.byte NN	;wh_Flags	dictionary flags
=40673					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f66	a9 03		lda #$03	Root_WordList:	lda #wid_Root
.9f68	4c 3a b7	jmp $b73a			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$9f6b					en = *	; remember here
>9f64	05					.byte CL	;wh_CodeLength
>9f6b	4f 6e 6c 79			L1:	.text "Only"	;  name of word as a string, ending at wh_NameLastChar
>9f6f	04					.byte *-L1	;wh_NameLength	length of name
>9f70	e1 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f72	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f73	08					.byte NN	;wh_Flags	dictionary flags
=40687					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f74	20 18 b7	jsr $b718	Only:		jsr True	; Push -1
.9f77	4c dd a0	jmp $a0dd			jmp Set_Order	; set the minimum search order.
=6					CL	.var *-(WordListLink+wh_Xt)
=$9f7a					en = *	; remember here
>9f72	06					.byte CL	;wh_CodeLength
>9f7a	41 6c 73 6f			L1:	.text "Also"	;  name of word as a string, ending at wh_NameLastChar
>9f7e	04					.byte *-L1	;wh_NameLength	length of name
>9f7f	ef 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f81	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f82	08					.byte NN	;wh_Flags	dictionary flags
=40702					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f83	20 15 a1	jsr $a115	Also:		jsr Get_Order
.9f86	20 41 ce	jsr $ce41			jsr Over
.9f89	20 88 ce	jsr $ce88			jsr Swap
.9f8c	20 60 c9	jsr $c960			jsr One_plus
.9f8f	4c dd a0	jmp $a0dd			jmp Set_Order
=15					CL	.var *-(WordListLink+wh_Xt)
=$9f92					en = *	; remember here
>9f81	0f					.byte CL	;wh_CodeLength
>9f92	50 72 65 76 69 6f 75 73		L1:	.text "Previous"	;  name of word as a string, ending at wh_NameLastChar
>9f9a	08					.byte *-L1	;wh_NameLength	length of name
>9f9b	fe 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f9d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f9e	08					.byte NN	;wh_Flags	dictionary flags
=40730					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f9f	20 15 a1	jsr $a115	Previous:	jsr Get_Order
.9fa2	20 85 c8	jsr $c885			jsr Nip
.9fa5	20 3a c9	jsr $c93a			jsr One_minus
.9fa8	4c dd a0	jmp $a0dd			jmp Set_Order
=12					CL	.var *-(WordListLink+wh_Xt)
=$9fab					en = *	; remember here
>9f9d	0c					.byte CL	;wh_CodeLength
>9fab	3e 4f 72 64 65 72		L1:	.text ">Order"	;  name of word as a string, ending at wh_NameLastChar
>9fb1	06					.byte *-L1	;wh_NameLength	length of name
>9fb2	1a 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fb4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fb5	08					.byte NN	;wh_Flags	dictionary flags
=40753					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9fb6					To_Order:
.9fb6	20 ef cd	jsr $cdef			jsr To_R		; Put the wid on the return stack for now.
.9fb9	20 15 a1	jsr $a115			jsr Get_Order		; Get the current search order.
.9fbc	20 0e ce	jsr $ce0e			jsr R_From		; Get back the wid and add it to the list.
.9fbf	20 88 ce	jsr $ce88			jsr Swap
.9fc2	20 60 c9	jsr $c960			jsr One_plus
.9fc5	4c dd a0	jmp $a0dd			jmp Set_Order		; Set the search order with the new list.
=18					CL	.var *-(WordListLink+wh_Xt)
=$9fc8					en = *	; remember here
>9fb4	12					.byte CL	;wh_CodeLength
>9fc8	4f 72 64 65 72			L1:	.text "Order"	;  name of word as a string, ending at wh_NameLastChar
>9fcd	05					.byte *-L1	;wh_NameLength	length of name
>9fce	31 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fd0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fd1	08					.byte NN	;wh_Flags	dictionary flags
=40781					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9fd2					Order:
.9fd2	20 7d aa	jsr $aa7d			jsr CR
.9fd5	a0 00		ldy #$00			ldy #0			; for each search_orderV[]
.9fd7	f0 0b		beq $9fe4			beq _test
.9fd9	98		tya		_loop:		tya
.9fda	48		pha				pha
.9fdb	b9 2b 03	lda $032b,y			lda Search_orderV,y
.9fde	20 ef 9f	jsr $9fef			jsr order_print_wid_string   ; internal helper function
.9fe1	68		pla				pla
.9fe2	a8		tay				tay
.9fe3	c8		iny				iny			;  next
.9fe4	cc 2a 03	cpy $032a	_test:		cpy Num_orderV
.9fe7	90 f0		bcc $9fd9			bcc _loop
.9fe9	20 7d aa	jsr $aa7d			jsr CR
.9fec	ad 10 03	lda $0310			lda CurrentV		; print the current wordlist.
.9fef					order_print_wid_string:
.9fef	c9 04		cmp #$04			cmp #wid_Root+1		; do we have a string?
.9ff1	90 06		bcc $9ff9			bcc _string
.9ff3	20 3a b7	jsr $b73a			jsr PushZA		; print the WID number
.9ff6	4c 19 cb	jmp $cb19			jmp U_Dot		; JSR/RTS
.9ff9	0a		asl a		_string:	asl		; Get the string based on WID 0 to 3
.9ffa	a8		tay				tay
.9ffb	b9 07 a0	lda $a007,y			lda _wid_Table+0,y
.9ffe	48		pha				pha
.9fff	b9 08 a0	lda $a008,y			lda _wid_Table+1,y
.a002	a8		tay				tay
.a003	68		pla				pla
.a004	4c 13 cd	jmp $cd13			jmp Print_ASCIIZ_YA_no_lf ; Print without a line feed
=53					CL	.var *-(WordListLink+wh_Xt)
=$a007					en = *	; remember here
>9fd0	35					.byte CL	;wh_CodeLength
.a007					_wid_Table:
>a007	4e da					.word str_wid_forth	       ; WID 0: "Forth"
>a009	46 da					.word str_wid_editor	       ; WID 1: "Editor"
>a00b	3b da					.word str_wid_asm	       ; WID 2: "Assembler"
>a00d	55 da					.word str_wid_root	       ; WID 3: "Root"
>a00f	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
>a014	05					.byte *-L1	;wh_NameLength	length of name
>a015	4d 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a017	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a018	08					.byte NN	;wh_Flags	dictionary flags
=40852					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a019	a9 00		lda #$00	Forth:		lda #wid_Forth
.a01b	8d 2b 03	sta $032b			sta Search_OrderV+0
=5					CL	.var *-(WordListLink+wh_Xt)
=$a01e					en = *	; remember here
>a017	05					.byte CL	;wh_CodeLength
.a01e	60		rts				rts
>a01f	44 65 66 69 6e 69 74 69		L1:	.text "Definitions"	;  name of word as a string, ending at wh_NameLastChar
>a027	6f 6e 73
>a02a	0b					.byte *-L1	;wh_NameLength	length of name
>a02b	94 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a02d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a02e	08					.byte NN	;wh_Flags	dictionary flags
=40874					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a02f	ad 2b 03	lda $032b	Definitions:	lda Search_OrderV	; Transfer SEARCH_ORDER[0] to
.a032	8d 10 03	sta $0310			sta CurrentV		;   byte variable CURRENT.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a035					en = *	; remember here
>a02d	06					.byte CL	;wh_CodeLength
.a035	60		rts				rts
>a036	57 6f 72 64 4c 69 73 74		L1:	.text "WordList"	;  name of word as a string, ending at wh_NameLastChar
>a03e	08					.byte *-L1	;wh_NameLength	length of name
>a03f	aa 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a041	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a042	08					.byte NN	;wh_Flags	dictionary flags
=40894					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a043					WordList:
.a043	ad 11 03	lda $0311			lda Num_wordlistsV	; Get the current number of wordlists
.a046	c9 0c		cmp #$0c			cmp #max_wordlists	; already at the max?
.a048	90 05		bcc $a04f			bcc +
.a04a	a9 66		lda #$66			lda #$100+err_wordlist	;   Print an error message
.a04c	4c c9 b3	jmp $b3c9			jmp ThrowA
.a04f					+
.a04f	ee 11 03	inc $0311			inc Num_WordlistsV	; increment wordlist count
.a052	4c 3a b7	jmp $b73a			jmp PushZA		; and put it on the stack.
=18					CL	.var *-(WordListLink+wh_Xt)
=$a055					en = *	; remember here
>a041	12					.byte CL	;wh_CodeLength
>a055	53 65 61 72 63 68 2d 57		L1:	.text "Search-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a05d	6f 72 64 6c 69 73 74
>a064	0f					.byte *-L1	;wh_NameLength	length of name
>a065	be 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a067	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a068	18					.byte UF+NN	;wh_Flags	dictionary flags
=40932					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a069					Search_WordList:
.a069	20 84 b3	jsr $b384			jsr underflow_3
.a06c	b5 24		lda $24,x			lda DStack+0,x		; Pop wid
.a06e	e8		inx				inx
.a06f	e8		inx				inx
.a070	48		pha				pha
.a071	20 5f bc	jsr $bc5f			jsr fina_pattern_prepare ; tmp2 = pseudo-header for pattern name, zeros NOS
.a074	68		pla				pla
.a075	20 75 bc	jsr $bc75			jsr fina_search_wordlist ; tmp1 = nt of matching word
.a078	f0 25		beq $a09f			beq _fail
.a07a	18		clc				clc
.a07b	a5 14		lda $14				lda tmp1+0		; NOS = xt
.a07d	69 85		adc #$85			adc #Wh_xt
.a07f	95 26		sta $26,x			sta DStack+2,x
.a081	a5 15		lda $15				lda tmp1+1
.a083	69 00		adc #$00			adc #0
.a085	95 27		sta $27,x			sta DStack+3,x
.a087	a0 84		ldy #$84			ldy #Wh_Flags		; get flags
.a089	b1 14		lda ($14),y			lda (tmp1),y
.a08b	29 04		and #$04			and #IM
.a08d	d0 07		bne $a096			bne _immediate		; bit set, we're immediate
.a08f	a9 ff		lda #$ff			lda #$FF		; We're not immediate, return -1
.a091	95 24		sta $24,x			sta DStack+0,x
.a093	95 25		sta $25,x			sta DStack+1,x
.a095	60		rts				rts
.a096					_immediate:
.a096	a9 01		lda #$01			lda #1			; We're immediate, return 1
.a098	95 24		sta $24,x			sta DStack+0,x
.a09a	a9 00		lda #$00			lda #0
.a09c	95 25		sta $25,x			sta DStack+1,x
.a09e	60		rts				rts
.a09f					_fail:
.a09f	e8		inx				inx			; Drop u
.a0a0	e8		inx				inx
.a0a1	60		rts				rts
=57					CL	.var *-(WordListLink+wh_Xt)
=$a0a2					en = *	; remember here
>a067	39					.byte CL	;wh_CodeLength
>a0a2	53 65 74 2d 43 75 72 72		L1:	.text "Set-Current"	;  name of word as a string, ending at wh_NameLastChar
>a0aa	65 6e 74
>a0ad	0b					.byte *-L1	;wh_NameLength	length of name
>a0ae	e4 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0b0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0b1	00					.byte 0	;wh_Flags	dictionary flags
=41005					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0b2	20 24 b3	jsr $b324	Set_Current:	jsr PopA	; pop wid
.a0b5	8d 10 03	sta $0310			sta CurrentV	; only the LSB is used.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a0b8					en = *	; remember here
>a0b0	06					.byte CL	;wh_CodeLength
.a0b8	60		rts				rts
>a0b9	47 65 74 2d 43 75 72 72		L1:	.text "Get-Current"	;  name of word as a string, ending at wh_NameLastChar
>a0c1	65 6e 74
>a0c4	0b					.byte *-L1	;wh_NameLength	length of name
>a0c5	2d a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0c8	08					.byte NN	;wh_Flags	dictionary flags
=41028					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0c9					Get_Current:
.a0c9	ad 10 03	lda $0310			lda CurrentV
.a0cc	4c 3a b7	jmp $b73a			jmp PushZA	; CURRENT is a byte variable
=6					CL	.var *-(WordListLink+wh_Xt)
=$a0cf					en = *	; remember here
>a0c7	06					.byte CL	;wh_CodeLength
>a0cf	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>a0d7	72
>a0d8	09					.byte *-L1	;wh_NameLength	length of name
>a0d9	44 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0dc	00					.byte 0	;wh_Flags	dictionary flags
=41048					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0dd					Set_Order:
.a0dd	b5 25		lda $25,x			lda DStack+1,x		; Test for -1 TOS
.a0df	10 0b		bpl $a0ec			bpl _start
.a0e1	a9 00		lda #$00			lda #0
.a0e3	95 25		sta $25,x			sta DStack+1,x
.a0e5	a9 03		lda #$03			lda #wid_Root
.a0e7	95 24		sta $24,x			sta DStack+0,x
.a0e9	20 53 b7	jsr $b753			jsr One			; Count is 1.
.a0ec					_start:
.a0ec	b5 24		lda $24,x			lda DStack+0,x
.a0ee	99 2a 03	sta $032a,y			sta Num_orderV,y	; #ORDER is a byte variable.
.a0f1	85 14		sta $14				sta tmp1	; Save a copy for zero check and looping.
.a0f3	e8		inx				inx		; Drop the count off the data stack.
.a0f4	e8		inx				inx
.a0f5	a5 14		lda $14				lda tmp1
.a0f7	f0 0d		beq $a106			beq _done	; If zero, there are no wordlists.
.a0f9	a0 00		ldy #$00			ldy #0
.a0fb					_loop:
.a0fb	20 24 b3	jsr $b324			jsr PopA		; The search order is a byte array
.a0fe	99 2b 03	sta $032b,y			sta Search_OrderV,y	; so only save the LSB
.a101	c8		iny				iny
.a102	c6 14		dec $14				dec tmp1
.a104	d0 f5		bne $a0fb			bne _loop
.a106					_done:
=41					CL	.var *-(WordListLink+wh_Xt)
=$a106					en = *	; remember here
>a0db	29					.byte CL	;wh_CodeLength
.a106	60		rts				rts
>a107	47 65 74 2d 4f 72 64 65		L1:	.text "Get-Order"	;  name of word as a string, ending at wh_NameLastChar
>a10f	72
>a110	09					.byte *-L1	;wh_NameLength	length of name
>a111	58 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a113	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a114	08					.byte NN	;wh_Flags	dictionary flags
=41104					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a115					Get_Order:
.a115	ac 2a 03	ldy $032a			ldy Num_OrderV	; Get #ORDER - the number of wordlists in the search order.
.a118	f0 09		beq $a123			beq _done	; If zero, there are no wordlists.
.a11a					_loop:
.a11a	b9 2a 03	lda $032a,y			lda Search_OrderV-1,y	; Put that wordlist id on the stack.
.a11d	20 3a b7	jsr $b73a			jsr PushZA
.a120	88		dey				dey
.a121	d0 f7		bne $a11a			bne _loop		; See if that was the last one to process (first in the list).
.a123					_done:
.a123	ad 2a 03	lda $032a			lda Num_OrderV		; Put the number of items on the stack.
.a126	4c 3a b7	jmp $b73a			jmp PushZA
=20					CL	.var *-(WordListLink+wh_Xt)
=$a129					en = *	; remember here
>a113	14					.byte CL	;wh_CodeLength
>0339					BlockReadV: .word ?	; Vector to block reading routine
>033b					BlockWriteV: .word ?	; Vector to block writing routine
>033d					BuffBlockNumV: .word ?	; Block number current in BlockBuffer
>033f					BuffStatusV: .word ?	; Status of BlockBuffer (bit 0 = used, bit 1 = dirty)
>0341					BlockBuffer: .fill 1024
.a129					BlockInit:
.a129	a9 00		lda #$00			lda #0
.a12b	8d 3f 03	sta $033f			sta BuffStatusV
.a12e	a9 8b		lda #$8b			lda #<Block_Word_Error
.a130	a0 a2		ldy #$a2			ldy #>Block_Word_Error
.a132	8d 39 03	sta $0339			sta BlockReadV+0
.a135	8c 3a 03	sty $033a			sty BlockReadV+1
.a138	8d 3b 03	sta $033b			sta BlockWriteV+0
.a13b	8c 3c 03	sty $033c			sty BlockWriteV+1
.a13e	60		rts				rts
>0741					RamDriveV: .word ?
=0					io_blk_status = 0
=0					io_blk_action = 0
=0					io_blk_number = 0
=0					io_blk_buffer = 0
>a13f	42 6c 6f 63 6b 2d 52 61		L1:	.text "Block-RamDrive-Init"	;  name of word as a string, ending at wh_NameLastChar
>a147	6d 44 72 69 76 65 2d 49 6e 69 74
>a152	13					.byte *-L1	;wh_NameLength	length of name
>a153	90 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a155	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a156	18					.byte UF+NN	;wh_Flags	dictionary flags
=41170					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a157					Block_RamDrive_Init:
.a157	a9 0a		lda #$0a			lda #10			; Calculate how many bytes are needed for numblocks blocks
.a159	20 3a b7	jsr $b73a			jsr PushZA
.a15c	20 50 ca	jsr $ca50			jsr LShift
.a15f	20 2c c9	jsr $c92c			jsr Here		; ( size addr )
.a162	8d 41 07	sta $0741			sta RamDriveV+0
.a165	8c 42 07	sty $0742			sty RamDriveV+1
.a168	20 41 ce	jsr $ce41			jsr Over
.a16b	20 08 c0	jsr $c008			jsr Allot		; Create ramdrive buffer
.a16e	20 88 ce	jsr $ce88			jsr Swap		; blank the buffer
.a171	20 7e bd	jsr $bd7e			jsr Blank
.a174	a9 89		lda #$89			lda #<_read		; set block read vector
.a176	a0 a1		ldy #$a1			ldy #>_read
.a178	8d 39 03	sta $0339			sta BlockReadV+0
.a17b	8c 3a 03	sty $033a			sty BlockReadV+1
.a17e	a9 99		lda #$99			lda #<_write		; set block write vector
.a180	a0 a1		ldy #$a1			ldy #>_write
.a182	8d 3b 03	sta $033b			sta BlockWriteV+0
.a185	8c 3c 03	sty $033c			sty BlockWriteV+1
.a188	60		rts				rts
=50					CL	.var *-(WordListLink+wh_Xt)
=$a189					en = *	; remember here
>a155	32					.byte CL	;wh_CodeLength
.a189					_read:
.a189	20 a6 a1	jsr $a1a6			jsr _addr
.a18c	20 88 ce	jsr $ce88			jsr Swap
.a18f	a9 00		lda #$00			lda #0
.a191	a0 04		ldy #$04			ldy #>1024
.a193	20 f8 b6	jsr $b6f8			jsr PushYA
.a196	4c 97 ac	jmp $ac97			jmp Move
.a199					_write:
.a199	20 a6 a1	jsr $a1a6			jsr _addr
.a19c	a9 00		lda #$00			lda #0
.a19e	a0 04		ldy #$04			ldy #>1024
.a1a0	20 f8 b6	jsr $b6f8			jsr PushYA
.a1a3	4c 97 ac	jmp $ac97			jmp Move
.a1a6					_addr:
.a1a6	a9 0a		lda #$0a			lda #10
.a1a8	20 3a b7	jsr $b73a			jsr PushZA
.a1ab	20 50 ca	jsr $ca50			jsr LShift
.a1ae	20 c1 a1	jsr $a1c1			jsr RamDrive
.a1b1	4c b4 ca	jmp $cab4			jmp Plus
>a1b4	52 61 6d 44 72 69 76 65		L1:	.text "RamDrive"	;  name of word as a string, ending at wh_NameLastChar
>a1bc	08					.byte *-L1	;wh_NameLength	length of name
>a1bd	d2 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1bf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1c0	08					.byte NN	;wh_Flags	dictionary flags
=41276					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1c1	ad 41 07	lda $0741	RamDrive:	lda RamDriveV+0
.a1c4	ac 42 07	ldy $0742			ldy RamDriveV+1
.a1c7	4c f8 b6	jmp $b6f8			jmp PushYA
=9					CL	.var *-(WordListLink+wh_Xt)
=$a1ca					en = *	; remember here
>a1bf	09					.byte CL	;wh_CodeLength
>a1ca	42 75 66 66 53 74 61 74		L1:	.text "BuffStatus"	;  name of word as a string, ending at wh_NameLastChar
>a1d2	75 73
>a1d4	0a					.byte *-L1	;wh_NameLength	length of name
>a1d5	3c a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1d7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1d8	08					.byte NN	;wh_Flags	dictionary flags
=41300					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1d9	a0 03		ldy #$03	BuffStatus:	ldy #>BuffStatusV
.a1db	a9 3f		lda #$3f			lda #<BuffStatusV
.a1dd	4c f8 b6	jmp $b6f8			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a1e0					en = *	; remember here
>a1d7	07					.byte CL	;wh_CodeLength
>a1e0	42 75 66 66 42 6c 6f 63		L1:	.text "BuffBlockNum"	;  name of word as a string, ending at wh_NameLastChar
>a1e8	6b 4e 75 6d
>a1ec	0c					.byte *-L1	;wh_NameLength	length of name
>a1ed	54 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1ef	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1f0	08					.byte NN	;wh_Flags	dictionary flags
=41324					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1f1	a0 03		ldy #$03	BuffBlockNum:	ldy #>BuffBlockNumV
.a1f3	a9 3d		lda #$3d			lda #<BuffBlockNumV
.a1f5	4c f8 b6	jmp $b6f8			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a1f8					en = *	; remember here
>a1ef	07					.byte CL	;wh_CodeLength
>a1f8	42 6c 6b 42 75 66 66 65		L1:	.text "BlkBuffer"	;  name of word as a string, ending at wh_NameLastChar
>a200	72
>a201	09					.byte *-L1	;wh_NameLength	length of name
>a202	6c a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a204	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a205	08					.byte NN	;wh_Flags	dictionary flags
=41345					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a206	a0 03		ldy #$03	BlkBuffer:	ldy #>BlockBuffer
.a208	a9 41		lda #$41			lda #<BlockBuffer
.a20a	4c f8 b6	jmp $b6f8			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a20d					en = *	; remember here
>a204	07					.byte CL	;wh_CodeLength
>a20d	53 63 72			L1:	.text "Scr"	;  name of word as a string, ending at wh_NameLastChar
>a210	03					.byte *-L1	;wh_NameLength	length of name
>a211	81 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a213	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a214	08					.byte NN	;wh_Flags	dictionary flags
=41360					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a215	a0 03		ldy #$03	Scr:		ldy #>ScrV
.a217	a9 0e		lda #$0e			lda #<ScrV
.a219	4c f8 b6	jmp $b6f8			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a21c					en = *	; remember here
>a213	07					.byte CL	;wh_CodeLength
>a21c	42 6c 6b			L1:	.text "Blk"	;  name of word as a string, ending at wh_NameLastChar
>a21f	03					.byte *-L1	;wh_NameLength	length of name
>a220	90 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a222	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a223	08					.byte NN	;wh_Flags	dictionary flags
=41375					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a224	a0 03		ldy #$03	Blk:		ldy #>BlkV
.a226	a9 0c		lda #$0c			lda #<BlkV
.a228	4c f8 b6	jmp $b6f8			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a22b					en = *	; remember here
>a222	07					.byte CL	;wh_CodeLength
>a22b	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write"	;  name of word as a string, ending at wh_NameLastChar
>a233	69 74 65
>a236	0b					.byte *-L1	;wh_NameLength	length of name
>a237	9f a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a239	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a23a	08					.byte NN	;wh_Flags	dictionary flags
=41398					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a23b	6c 3b 03	jmp ($033b)	Block_Write:	jmp (BlockWriteV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-(WordListLink+wh_Xt)
=$a23e					en = *	; remember here
>a239	03					.byte CL	;wh_CodeLength
>a23e	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a246	69 74 65 2d 56 65 63 74 6f 72
>a250	12					.byte *-L1	;wh_NameLength	length of name
>a251	b6 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a253	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a254	08					.byte NN	;wh_Flags	dictionary flags
=41424					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a255					Block_Write_Vector:
.a255	a0 03		ldy #$03			ldy #>BlockWriteV
.a257	a9 3b		lda #$3b			lda #<BlockWriteV	; Get the BLOCK-WRITE-VECTOR address
.a259	4c f8 b6	jmp $b6f8			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a25c					en = *	; remember here
>a253	07					.byte CL	;wh_CodeLength
>a25c	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read"	;  name of word as a string, ending at wh_NameLastChar
>a264	61 64
>a266	0a					.byte *-L1	;wh_NameLength	length of name
>a267	d0 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a269	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a26a	08					.byte NN	;wh_Flags	dictionary flags
=41446					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a26b	6c 39 03	jmp ($0339)	Block_Read:	jmp (BlockReadV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-(WordListLink+wh_Xt)
=$a26e					en = *	; remember here
>a269	03					.byte CL	;wh_CodeLength
>a26e	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a276	61 64 2d 56 65 63 74 6f 72
>a27f	11					.byte *-L1	;wh_NameLength	length of name
>a280	e6 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a282	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a283	08					.byte NN	;wh_Flags	dictionary flags
=41471					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a284					Block_Read_Vector:
.a284	a0 03		ldy #$03			ldy #>BlockReadV
.a286	a9 39		lda #$39			lda #<BlockReadV	; Get the BLOCK-READ-VECTOR address
.a288	4c f8 b6	jmp $b6f8			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a28b					en = *	; remember here
>a282	07					.byte CL	;wh_CodeLength
.a28b					Block_Word_Error:
.a28b	a9 67		lda #$67			lda #$100+err_BlockWordsNotSet
.a28d	20 c9 b3	jsr $b3c9			jsr ThrowA
>a290	53 61 76 65 2d 42 75 66		L1:	.text "Save-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a298	66 65 72 73
>a29c	0c					.byte *-L1	;wh_NameLength	length of name
>a29d	ff a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a29f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a2a0	00					.byte 0	;wh_Flags	dictionary flags
=41500					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2a1					Save_Buffers:
.a2a1	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a2a4	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a2a6	d0 11		bne $a2b9			bne _done	; Either not used or not dirty = done!
.a2a8	20 06 a2	jsr $a206			jsr BlkBuffer
.a2ab	20 f1 a1	jsr $a1f1			jsr BuffBlockNum
.a2ae	20 d4 cd	jsr $cdd4			jsr Fetch
.a2b1	20 3b a2	jsr $a23b			jsr Block_Write
.a2b4	a9 01		lda #$01			lda #1
.a2b6	8d 3f 03	sta $033f			sta BuffStatusV+0
.a2b9					_done:
=24					CL	.var *-(WordListLink+wh_Xt)
=$a2b9					en = *	; remember here
>a29f	18					.byte CL	;wh_CodeLength
.a2b9	60		rts				rts
>a2ba	42 6c 6f 63 6b			L1:	.text "Block"	;  name of word as a string, ending at wh_NameLastChar
>a2bf	05					.byte *-L1	;wh_NameLength	length of name
>a2c0	1c a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a2c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a2c3	00					.byte 0	;wh_Flags	dictionary flags
=41535					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2c4					Block:
.a2c4	ad 3d 03	lda $033d			lda BuffBlockNumV+0	; check the LSB
.a2c7	d5 24		cmp $24,x			cmp DStack+0,x
.a2c9	d0 0e		bne $a2d9			bne _not_in_buffer
.a2cb	ad 3e 03	lda $033e			lda BuffBlockNumV+1	; check the MSB
.a2ce	d5 25		cmp $25,x			cmp DStack+1,x
.a2d0	d0 07		bne $a2d9			bne _not_in_buffer
.a2d2	ad 3f 03	lda $033f			lda BuffStatusV+0
.a2d5	29 01		and #$01			and #1		; Check the in-use flag (bit 0)
.a2d7	d0 2d		bne $a306			bne _done	; It's already in the buffer and in use.
.a2d9					_not_in_buffer:
.a2d9	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a2dc	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a2de	d0 0c		bne $a2ec			bne _buffer_available ; Unused or not dirty = available
.a2e0	20 06 a2	jsr $a206			jsr BlkBuffer
.a2e3	20 f1 a1	jsr $a1f1			jsr BuffBlockNum
.a2e6	20 d4 cd	jsr $cdd4			jsr Fetch
.a2e9	20 3b a2	jsr $a23b			jsr Block_Write
.a2ec					_buffer_available:
.a2ec	b5 24		lda $24,x			lda DStack+0,x
.a2ee	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a2f1	b5 25		lda $25,x			lda DStack+1,x
.a2f3	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a2f6	20 06 a2	jsr $a206			jsr BlkBuffer
.a2f9	20 88 ce	jsr $ce88			jsr Swap
.a2fc	20 6b a2	jsr $a26b			jsr Block_Read
.a2ff	a9 01		lda #$01			lda #1
.a301	8d 3f 03	sta $033f			sta BuffStatusV+0
.a304	ca		dex				dex
.a305	ca		dex				dex
.a306					_done:
.a306	a9 41		lda #$41			lda #<BlockBuffer
.a308	95 24		sta $24,x			sta DStack+0,x
.a30a	a9 03		lda #$03			lda #>BlockBuffer
.a30c	95 25		sta $25,x			sta DStack+1,x
=74					CL	.var *-(WordListLink+wh_Xt)
=$a30e					en = *	; remember here
>a2c2	4a					.byte CL	;wh_CodeLength
.a30e	60		rts				rts
>a30f	55 70 64 61 74 65		L1:	.text "Update"	;  name of word as a string, ending at wh_NameLastChar
>a315	06					.byte *-L1	;wh_NameLength	length of name
>a316	3f a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a318	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a319	00					.byte 0	;wh_Flags	dictionary flags
=41621					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a31a					Update:
.a31a	ad 3f 03	lda $033f			lda BuffStatusV+0
.a31d	09 02		ora #$02			ora #2		; Turn on dirty flag (bit 2)
.a31f	8d 3f 03	sta $033f			sta BuffStatusV+0
=8					CL	.var *-(WordListLink+wh_Xt)
=$a322					en = *	; remember here
>a318	08					.byte CL	;wh_CodeLength
.a322	60		rts				rts
>a323	42 75 66 66 65 72		L1:	.text "Buffer"	;  name of word as a string, ending at wh_NameLastChar
>a329	06					.byte *-L1	;wh_NameLength	length of name
>a32a	95 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a32c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a32d	08					.byte NN	;wh_Flags	dictionary flags
=41641					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a32e					Buffer:
.a32e	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a331	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a333	d0 0c		bne $a341			bne _buffer_available ; Unused or not dirty = available
.a335	20 06 a2	jsr $a206			jsr BlkBuffer
.a338	20 f1 a1	jsr $a1f1			jsr BuffBlockNum
.a33b	20 d4 cd	jsr $cdd4			jsr Fetch
.a33e	20 3b a2	jsr $a23b			jsr Block_Write
.a341					_buffer_available:
.a341	b5 24		lda $24,x			lda DStack+0,x
.a343	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a346	b5 25		lda $25,x			lda DStack+1,x
.a348	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a34b	a9 01		lda #$01			lda #1
.a34d	8d 3f 03	sta $033f			sta BuffStatusV+0
.a350					_done:
.a350	a9 41		lda #$41			lda #<BlockBuffer
.a352	95 24		sta $24,x			sta DStack+0,x
.a354	a9 03		lda #$03			lda #>BlockBuffer
.a356	95 25		sta $25,x			sta DStack+1,x
=42					CL	.var *-(WordListLink+wh_Xt)
=$a358					en = *	; remember here
>a32c	2a					.byte CL	;wh_CodeLength
.a358	60		rts				rts
>a359	45 6d 70 74 79 2d 42 75		L1:	.text "Empty-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a361	66 66 65 72 73
>a366	0d					.byte *-L1	;wh_NameLength	length of name
>a367	a9 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a369	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a36a	08					.byte NN	;wh_Flags	dictionary flags
=41702					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a36b	a9 00		lda #$00	Empty_Buffers:	lda #0		; Set the buffer status to empty.
.a36d	8d 3f 03	sta $033f			sta BuffStatusV+0 ; Only LSB is used.
=5					CL	.var *-(WordListLink+wh_Xt)
=$a370					en = *	; remember here
>a369	05					.byte CL	;wh_CodeLength
.a370	60		rts				rts
>a371	46 6c 75 73 68			L1:	.text "Flush"	;  name of word as a string, ending at wh_NameLastChar
>a376	05					.byte *-L1	;wh_NameLength	length of name
>a377	e6 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a379	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a37a	08					.byte NN	;wh_Flags	dictionary flags
=41718					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a37b	20 a1 a2	jsr $a2a1	Flush:		jsr Save_Buffers
.a37e	4c 6b a3	jmp $a36b			jmp Empty_Buffers
=6					CL	.var *-(WordListLink+wh_Xt)
=$a381					en = *	; remember here
>a379	06					.byte CL	;wh_CodeLength
>a381	4c 6f 61 64			L1:	.text "Load"	;  name of word as a string, ending at wh_NameLastChar
>a385	04					.byte *-L1	;wh_NameLength	length of name
>a386	f6 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a388	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a389	10					.byte UF	;wh_Flags	dictionary flags
=41733					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a38a					Load:
.a38a	20 6a b3	jsr $b36a			jsr underflow_1
.a38d	ad 0d 03	lda $030d			lda BlkV+1	; Save the current value of BLK on the return stack.
.a390	48		pha				pha
.a391	ad 0c 03	lda $030c			lda BlkV+0
.a394	48		pha				pha
.a395	b5 24		lda $24,x			lda DStack+0,x		; Set BLK to the given block/screen number.
.a397	8d 0c 03	sta $030c			sta BlkV+0
.a39a	b5 25		lda $25,x			lda DStack+1,x
.a39c	8d 0d 03	sta $030d			sta BlkV+1
.a39f	20 c4 a2	jsr $a2c4			jsr Block		; Load that block into a buffer
.a3a2	a9 00		lda #$00			lda #<1024		; screen length.
.a3a4	a0 04		ldy #$04			ldy #>1024
.a3a6	20 f8 b6	jsr $b6f8			jsr PushYA
.a3a9	20 2f af	jsr $af2f			jsr load_evaluate
.a3ac	68		pla				pla
.a3ad	ad 0c 03	lda $030c			lda BlkV+0
.a3b0	68		pla				pla
.a3b1	8d 0d 03	sta $030d			sta BlkV+1
.a3b4	0d 0c 03	ora $030c			ora BlkV+0
.a3b7	f0 0e		beq $a3c7			beq _done
.a3b9	ad 0c 03	lda $030c			lda BlkV+0
.a3bc	ac 0d 03	ldy $030d			ldy BlkV+1
.a3bf	20 f8 b6	jsr $b6f8			jsr PushYA
.a3c2	20 c4 a2	jsr $a2c4			jsr Block
.a3c5	e8		inx				inx		; Drop the buffer address.
.a3c6	e8		inx				inx
.a3c7					_done:
=61					CL	.var *-(WordListLink+wh_Xt)
=$a3c7					en = *	; remember here
>a388	3d					.byte CL	;wh_CodeLength
.a3c7	60		rts				rts
>a3c8	54 68 72 75			L1:	.text "Thru"	;  name of word as a string, ending at wh_NameLastChar
>a3cc	04					.byte *-L1	;wh_NameLength	length of name
>a3cd	05 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3cf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3d0	18					.byte UF+NN	;wh_Flags	dictionary flags
=41804					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3d1					Thru:
.a3d1	20 7f b3	jsr $b37f			jsr underflow_2
.a3d4	20 ef cd	jsr $cdef			jsr To_R
.a3d7					_loop:
.a3d7	b5 25		lda $25,x			lda DStack+1,x		; copy to return stack
.a3d9	48		pha				pha
.a3da	b5 24		lda $24,x			lda DStack+0,x
.a3dc	48		pha				pha
.a3dd	20 8a a3	jsr $a38a			jsr Load		; Load this screen.
.a3e0	20 0e ce	jsr $ce0e			jsr R_From		; Get the screen # we just loaded.
.a3e3	20 60 c9	jsr $c960			jsr One_plus		; increment
.a3e6	86 14		stx $14				stx tmp1
.a3e8	ba		tsx				tsx
.a3e9	8a		txa				txa
.a3ea	a8		tay				tay
.a3eb	a6 14		ldx $14				ldx tmp1
.a3ed	b9 01 01	lda $0101,y			lda RStack+1,y
.a3f0	d5 24		cmp $24,x			cmp DStack+0,x
.a3f2	b9 02 01	lda $0102,y			lda RStack+2,y
.a3f5	f5 25		sbc $25,x			sbc DStack+1,x
.a3f7	b0 de		bcs $a3d7			bcs _loop
.a3f9	e8		inx				inx			; Drop index
.a3fa	e8		inx				inx
.a3fb	68		pla				pla			; RDrop limit
.a3fc	68		pla				pla
=44					CL	.var *-(WordListLink+wh_Xt)
=$a3fd					en = *	; remember here
>a3cf	2c					.byte CL	;wh_CodeLength
.a3fd	60		rts				rts
>a3fe	4c 69 73 74			L1:	.text "List"	;  name of word as a string, ending at wh_NameLastChar
>a402	04					.byte *-L1	;wh_NameLength	length of name
>a403	4c a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a405	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a406	08					.byte NN	;wh_Flags	dictionary flags
=41858					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a407	20 40 b3	jsr $b340	List:		jsr PopYA	; Save the screen number
.a40a	8d 0e 03	sta $030e			sta ScrV+0
.a40d	8c 0f 03	sty $030f			sty ScrV+1
.a410	4c 01 d9	jmp $d901			jmp Editor_l
=12					CL	.var *-(WordListLink+wh_Xt)
=$a413					en = *	; remember here
>a405	0c					.byte CL	;wh_CodeLength
>a413	44 65 66 65 72			L1:	.text "Defer"	;  name of word as a string, ending at wh_NameLastChar
>a418	05					.byte *-L1	;wh_NameLength	length of name
>a419	82 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a41b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a41c	08					.byte NN	;wh_Flags	dictionary flags
=41880					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a41d					Defer:
.a41d	20 62 c0	jsr $c062			jsr Header_Comma	; compile word header
.a420	a9 2a		lda #$2a			lda #<_undefined	; compile "jmp _undefined"
.a422	a0 a4		ldy #$a4			ldy #>_undefined
.a424	20 5f cc	jsr $cc5f			jsr Jmp_Comma_YA
.a427	4c 4d bb	jmp $bb4d			jmp adjust_z	; adjust header to correct length
=13					CL	.var *-(WordListLink+wh_Xt)
=$a42a					en = *	; remember here
>a41b	0d					.byte CL	;wh_CodeLength
.a42a					_undefined:
.a42a	a9 6a		lda #$6a			lda #$100+err_Defer	; throw exception
.a42c	4c c9 b3	jmp $b3c9			jmp ThrowA
>a42f	44 65 66 65 72 40		L1:	.text "Defer@"	;  name of word as a string, ending at wh_NameLastChar
>a435	06					.byte *-L1	;wh_NameLength	length of name
>a436	98 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a438	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a439	08					.byte NN	;wh_Flags	dictionary flags
=41909					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a43a					Defer_Fetch:
.a43a	20 60 c9	jsr $c960			jsr One_plus	; step over JMP opcode to operand
.a43d	4c d4 cd	jmp $cdd4			jmp Fetch	; get JMP operand, return
=6					CL	.var *-(WordListLink+wh_Xt)
=$a440					en = *	; remember here
>a438	06					.byte CL	;wh_CodeLength
>a440	44 65 66 65 72 21		L1:	.text "Defer!"	;  name of word as a string, ending at wh_NameLastChar
>a446	06					.byte *-L1	;wh_NameLength	length of name
>a447	b5 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a449	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a44a	08					.byte NN	;wh_Flags	dictionary flags
=41926					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a44b					Defer_Store:
.a44b	20 60 c9	jsr $c960			jsr One_plus	; step over JMP opcode to operand
.a44e	4c b7 cd	jmp $cdb7			jmp Store	; set JMP operand, return
=6					CL	.var *-(WordListLink+wh_Xt)
=$a451					en = *	; remember here
>a449	06					.byte CL	;wh_CodeLength
>a451	49 73				L1:	.text "Is"	;  name of word as a string, ending at wh_NameLastChar
>a453	02					.byte *-L1	;wh_NameLength	length of name
>a454	c6 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a456	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a457	0c					.byte IM+NN	;wh_Flags	dictionary flags
=41939					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a458					Is:
.a458	a5 0a		lda $0a				lda state		; Check STATE
.a45a	f0 0a		beq $a466			beq _interpreting
.a45c					_compiling:
.a45c	20 c4 bb	jsr $bbc4			jsr Bracket_Tick	; compile the xt of the next word as a literal.
.a45f	a0 a4		ldy #$a4			ldy #>Defer_Store	; Postpone DEFER! by compiling a JSR to it.
.a461	a9 4b		lda #$4b			lda #<Defer_Store
.a463	4c 48 cc	jmp $cc48			jmp Jsr_Comma_YA
.a466					_interpreting:
.a466	20 b0 bb	jsr $bbb0			jsr Tick
.a469	4c 4b a4	jmp $a44b			jmp Defer_Store
=20					CL	.var *-(WordListLink+wh_Xt)
=$a46c					en = *	; remember here
>a456	14					.byte CL	;wh_CodeLength
>a46c	41 63 74 69 6f 6e 2d 4f		L1:	.text "Action-Of"	;  name of word as a string, ending at wh_NameLastChar
>a474	66
>a475	09					.byte *-L1	;wh_NameLength	length of name
>a476	d3 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a478	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a479	0c					.byte IM+NN	;wh_Flags	dictionary flags
=41973					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a47a					Action_Of:
.a47a	a5 0a		lda $0a				lda state		; Check STATE
.a47c	f0 0a		beq $a488			beq _interpreting
.a47e					_compiling:
.a47e	20 c4 bb	jsr $bbc4			jsr Bracket_Tick	; compile the xt of the next word as a literal.
.a481	a0 a4		ldy #$a4			ldy #>Defer_Fetch	; Postpone DEFER@ by compiling a JSR to it.
.a483	a9 3a		lda #$3a			lda #<Defer_Fetch
.a485	4c 48 cc	jmp $cc48			jmp Jsr_Comma_YA
.a488					_interpreting:
.a488	20 b0 bb	jsr $bbb0			jsr Tick
.a48b	4c 3a a4	jmp $a43a			jmp Defer_Fetch
=20					CL	.var *-(WordListLink+wh_Xt)
=$a48e					en = *	; remember here
>a478	14					.byte CL	;wh_CodeLength
>a48e	55 73 65 72 41 64 64 72		L1:	.text "UserAddr"	;  name of word as a string, ending at wh_NameLastChar
>a496	08					.byte *-L1	;wh_NameLength	length of name
>a497	f5 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a499	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a49a	08					.byte NN	;wh_Flags	dictionary flags
=42006					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a49b	a0 02		ldy #$02	UserAddr:	ldy #>User0
.a49d	a9 ff		lda #$ff			lda #<User0
.a49f	4c f8 b6	jmp $b6f8			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a4a2					en = *	; remember here
>a499	07					.byte CL	;wh_CodeLength
>a4a2	42 75 66 66 65 72 3a		L1:	.text "Buffer:"	;  name of word as a string, ending at wh_NameLastChar
>a4a9	07					.byte *-L1	;wh_NameLength	length of name
>a4aa	16 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4ac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4ad	08					.byte NN	;wh_Flags	dictionary flags
=42025					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4ae	20 e9 c0	jsr $c0e9	Buffer_Colon:	jsr Create
.a4b1	4c 08 c0	jmp $c008			jmp Allot
=6					CL	.var *-(WordListLink+wh_Xt)
=$a4b4					en = *	; remember here
>a4ac	06					.byte CL	;wh_CodeLength
>a4b4	43 61 73 65			L1:	.text "Case"	;  name of word as a string, ending at wh_NameLastChar
>a4b8	04					.byte *-L1	;wh_NameLength	length of name
>a4b9	29 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4bc	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42040					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4bd					Case:
.a4bd	4c 49 b7	jmp $b749			jmp Zero	; init jmp fixup chain
=3					CL	.var *-(WordListLink+wh_Xt)
=$a4c0					en = *	; remember here
>a4bb	03					.byte CL	;wh_CodeLength
>a4c0	45 6e 64 43 61 73 65		L1:	.text "EndCase"	;  name of word as a string, ending at wh_NameLastChar
>a4c7	07					.byte *-L1	;wh_NameLength	length of name
>a4c8	38 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4ca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4cb	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42055					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4cc					EndCase:
.a4cc	20 37 cc	jsr $cc37			jsr Drop_Comma
.a4cf					_loop:
.a4cf	b5 25		lda $25,x			lda DStack+1,x	; while addr fixup entries left
.a4d1	f0 06		beq $a4d9			beq _done
.a4d3	20 56 a5	jsr $a556			jsr Then	;   fixup another one
.a4d6	4c cf a4	jmp $a4cf			jmp _loop
.a4d9					_done:
.a4d9	e8		inx				inx		; Drop the 0
.a4da	e8		inx				inx
=15					CL	.var *-(WordListLink+wh_Xt)
=$a4db					en = *	; remember here
>a4ca	0f					.byte CL	;wh_CodeLength
.a4db	60		rts				rts
>a4dc	4f 66				L1:	.text "Of"	;  name of word as a string, ending at wh_NameLastChar
>a4de	02					.byte *-L1	;wh_NameLength	length of name
>a4df	47 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4e2	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42078					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4e3					Of:
.a4e3	a0 a4		ldy #$a4			ldy #>_runtime		; Check if value is equal to this case.
.a4e5	a9 f8		lda #$f8			lda #<_runtime
.a4e7	20 48 cc	jsr $cc48			jsr Jsr_Comma_YA
.a4ea	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a4ec	20 09 cc	jsr $cc09			jsr C_Comma_A
.a4ef	20 2c c9	jsr $c92c			jsr Here		; Put the origination address on the stack for else/then
.a4f2	20 49 b7	jsr $b749			jsr Zero
.a4f5	4c 20 cc	jmp $cc20			jmp Comma
=21					CL	.var *-(WordListLink+wh_Xt)
=$a4f8					en = *	; remember here
>a4e1	15					.byte CL	;wh_CodeLength
.a4f8					_runtime:
.a4f8	b5 24		lda $24,x			lda DStack+0,x	; compare x1 with x2
.a4fa	d5 26		cmp $26,x			cmp DStack+2,x
.a4fc	d0 0a		bne $a508			bne _NotEq
.a4fe	b5 25		lda $25,x			lda DStack+1,x
.a500	d5 27		cmp $27,x			cmp DStack+3,x
.a502	d0 04		bne $a508			bne _NotEq
.a504	e8		inx				inx		; Drop x2
.a505	e8		inx				inx
.a506	d0 35		bne $a53d			bne zbranch_run2 ; Drop x1 & return to after the jmp abs
.a508	e8		inx		_NotEq:		inx		; Drop x2
.a509	e8		inx				inx
.a50a	60		rts				rts		; return to the jmp abs to next test
>a50b	45 6e 64 4f 66			L1:	.text "EndOf"	;  name of word as a string, ending at wh_NameLastChar
>a510	05					.byte *-L1	;wh_NameLength	length of name
>a511	5e a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a513	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a514	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42128					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a515					EndOf:
.a515	4c 68 a5	jmp $a568			jmp Else
=3					CL	.var *-(WordListLink+wh_Xt)
=$a518					en = *	; remember here
>a513	03					.byte CL	;wh_CodeLength
>a518	49 66				L1:	.text "If"	;  name of word as a string, ending at wh_NameLastChar
>a51a	02					.byte *-L1	;wh_NameLength	length of name
>a51b	90 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a51d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a51e	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42138					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a51f					If:
.a51f	20 30 a5	jsr $a530	If3:		jsr zbranch_jsr_comma	; Compile a 0BRANCH
.a522					zbranch_jmp0_comma:
.a522	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a524	20 09 cc	jsr $cc09			jsr C_Comma_A
.a527	20 2c c9	jsr $c92c			jsr Here		; save ptr to address for else/then
.a52a	a9 00		lda #$00			lda #0			; Stuff zero in for the branch address right now.
.a52c	a8		tay				tay			; THEN or ELSE will fix it later.
.a52d	4c 23 cc	jmp $cc23			jmp Comma_YA
=17					CL	.var *-(WordListLink+wh_Xt)
=$a530					en = *	; remember here
>a51d	11					.byte CL	;wh_CodeLength
=$cc5c					zbranch_jmp_comma = Jmp_Comma		; compile jmp abs
.a530					zbranch_jsr_comma:
.a530	a0 a5		ldy #$a5			ldy #>_runtime
.a532	a9 37		lda #$37			lda #<_runtime
.a534	4c 48 cc	jmp $cc48			jmp Jsr_Comma_YA
.a537					_runtime:
.a537	b5 24		lda $24,x			lda DStack+0,x		;flag is false?
.a539	15 25		ora $25,x			ora DStack+1,x
.a53b	f0 0d		beq $a54a			beq zbranch_run_done
.a53d	18		clc		zbranch_run2:	clc			; move RTS addr over the next jmp abs.
.a53e	68		pla				pla
.a53f	69 03		adc #$03			adc #3
.a541	90 06		bcc $a549			bcc +
.a543	a8		tay				tay
.a544	68		pla				pla
.a545	69 00		adc #$00			adc #0
.a547	48		pha				pha
.a548	98		tya				tya
.a549	48		pha		+		pha
.a54a					zbranch_run_done:
.a54a	e8		inx				inx			; Drop f
.a54b	e8		inx				inx
.a54c	60		rts				rts
>a54d	54 68 65 6e			L1:	.text "Then"	;  name of word as a string, ending at wh_NameLastChar
>a551	04					.byte *-L1	;wh_NameLength	length of name
>a552	9a a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a554	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a555	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42193					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a556					Then:
.a556	20 2c c9	jsr $c92c			jsr Here
.a559	20 88 ce	jsr $ce88			jsr Swap
.a55c	4c b7 cd	jmp $cdb7			jmp Store
=9					CL	.var *-(WordListLink+wh_Xt)
=$a55f					en = *	; remember here
>a554	09					.byte CL	;wh_CodeLength
>a55f	45 6c 73 65			L1:	.text "Else"	;  name of word as a string, ending at wh_NameLastChar
>a563	04					.byte *-L1	;wh_NameLength	length of name
>a564	d1 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a566	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a567	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42211					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a568					Else:
.a568	20 22 a5	jsr $a522			jsr zbranch_jmp0_comma	; compile jmp 0, push addr of addr
.a56b	20 2c c9	jsr $c92c			jsr Here
.a56e	20 6e cd	jsr $cd6e			jsr Rot
.a571	4c b7 cd	jmp $cdb7			jmp Store
=12					CL	.var *-(WordListLink+wh_Xt)
=$a574					en = *	; remember here
>a566	0c					.byte CL	;wh_CodeLength
>a574	42 65 67 69 6e			L1:	.text "Begin"	;  name of word as a string, ending at wh_NameLastChar
>a579	05					.byte *-L1	;wh_NameLength	length of name
>a57a	e3 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a57c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a57d	0d					.byte NN+CO+IM	;wh_Flags	dictionary flags
=42233					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a57e	20 2c c9	jsr $c92c	Begin:		jsr Here	; remember the loop starting location
.a581	a9 7e		lda #$7e			lda #<Begin	; pairing marker
.a583	4c 3a b7	jmp $b73a			jmp PushZA
=8					CL	.var *-(WordListLink+wh_Xt)
=$a586					en = *	; remember here
>a57c	08					.byte CL	;wh_CodeLength
>a586	41 67 61 69 6e			L1:	.text "Again"	;  name of word as a string, ending at wh_NameLastChar
>a58b	05					.byte *-L1	;wh_NameLength	length of name
>a58c	f9 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a58e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a58f	1d					.byte NN+CO+IM+UF	;wh_Flags	dictionary flags
=42251					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a590	20 7f b3	jsr $b37f	Again:		jsr underflow_2
.a593	a9 7e		lda #$7e			lda #<Begin	; check pairing
.a595	20 30 b2	jsr $b230			jsr QPairCtlA
.a598	4c 5c cc	jmp $cc5c			jmp Jmp_Comma	; Compile a jmp abs.
=11					CL	.var *-(WordListLink+wh_Xt)
=$a59b					en = *	; remember here
>a58e	0b					.byte CL	;wh_CodeLength
>a59b	55 6e 74 69 6c			L1:	.text "Until"	;  name of word as a string, ending at wh_NameLastChar
>a5a0	05					.byte *-L1	;wh_NameLength	length of name
>a5a1	0b a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5a3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5a4	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42272					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5a5	a9 7e		lda #$7e	Until:		lda #<Begin		; check pairing
.a5a7	20 30 b2	jsr $b230			jsr QPairCtlA
.a5aa	4c e3 a5	jmp $a5e3			jmp ZBranch_Comma	; The address to loop back to is on the stack.
=8					CL	.var *-(WordListLink+wh_Xt)
=$a5ad					en = *	; remember here
>a5a3	08					.byte CL	;wh_CodeLength
>a5ad	57 68 69 6c 65			L1:	.text "While"	;  name of word as a string, ending at wh_NameLastChar
>a5b2	05					.byte *-L1	;wh_NameLength	length of name
>a5b3	20 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5b5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5b6	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42290					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5b7	a9 7e		lda #$7e	While:		lda #<Begin	; check pairing
.a5b9	20 30 b2	jsr $b230			jsr QPairCtlA
.a5bc	20 1f a5	jsr $a51f			jsr If3		; Compile a 0branch & jmp, push addr of addr
.a5bf	20 88 ce	jsr $ce88			jsr Swap	; Swap the two addresses on the stack.
.a5c2	a9 7e		lda #$7e			lda #<Begin	; pairing marker
.a5c4	4c 3a b7	jmp $b73a			jmp PushZA
=16					CL	.var *-(WordListLink+wh_Xt)
=$a5c7					en = *	; remember here
>a5b5	10					.byte CL	;wh_CodeLength
>a5c7	52 65 70 65 61 74		L1:	.text "Repeat"	;  name of word as a string, ending at wh_NameLastChar
>a5cd	06					.byte *-L1	;wh_NameLength	length of name
>a5ce	32 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5d0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5d1	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42317					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5d2	a9 7e		lda #$7e	Repeat:		lda #<Begin	; check pairing
.a5d4	20 30 b2	jsr $b230			jsr QPairCtlA
.a5d7	20 5c cc	jsr $cc5c			jsr Jmp_Comma	; compile the jmp back
.a5da	20 2c c9	jsr $c92c			jsr Here	; patch the WHILE jmp operand
.a5dd	20 88 ce	jsr $ce88			jsr Swap
.a5e0	4c b7 cd	jmp $cdb7			jmp Store
=17					CL	.var *-(WordListLink+wh_Xt)
=$a5e3					en = *	; remember here
>a5d0	11					.byte CL	;wh_CodeLength
.a5e3					ZBranch_Comma:
.a5e3	a9 e8		lda #$e8			lda #$e8		; compile inx; inx
.a5e5	a8		tay				tay
.a5e6	20 23 cc	jsr $cc23			jsr Comma_YA
.a5e9	a9 b5		lda #$b5			lda #$b5		; compile lda DStack-2,x
.a5eb	a0 22		ldy #$22			ldy #DStack-2
.a5ed	20 23 cc	jsr $cc23			jsr Comma_YA
.a5f0	a9 15		lda #$15			lda #$15		; compile ora DStack-1,x
.a5f2	a0 23		ldy #$23			ldy #DStack-1
.a5f4	20 23 cc	jsr $cc23			jsr Comma_YA
.a5f7	a9 f0		lda #$f0			lda #$f0		; BEQ
.a5f9	d0 0c		bne $a607			bne Branch_Comma
>a5fb	42 72 61 6e 63 68 2c		L1:	.text "Branch,"	;  name of word as a string, ending at wh_NameLastChar
>a602	07					.byte *-L1	;wh_NameLength	length of name
>a603	4d a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a605	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a606	08					.byte NN	;wh_Flags	dictionary flags
=42370					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a607					Branch_Comma:
.a607	48		pha				pha			; save branch opcode
.a608	38		sec				sec			; AY= displacement+2
.a609	b5 24		lda $24,x			lda DStack+0,x
.a60b	e5 00		sbc $00				sbc cp+0
.a60d	a8		tay				tay
.a60e	b5 25		lda $25,x			lda DStack+1,x
.a610	e5 01		sbc $01				sbc cp+1
.a612	c9 ff		cmp #$ff			cmp #$ff		; offset maybe in range?
.a614	f0 0b		beq $a621			beq _rev
.a616	68		pla		_2byte:		pla			; restore branch opcode
.a617	49 20		eor #$20			eor #$20		; reverse branch sense
.a619	a0 03		ldy #$03			ldy #3			; compile Bcc *+5
.a61b	20 23 cc	jsr $cc23			jsr Comma_YA
.a61e	4c 5c cc	jmp $cc5c			jmp Jmp_Comma		; compile JMP abs
.a621	c0 82		cpy #$82	_rev:		cpy #$80+2		; offset in range?
.a623	90 f1		bcc $a616			bcc _2byte
.a625	e8		inx		_1byte:		inx			; Drop address
.a626	e8		inx				inx
.a627	88		dey				dey			; fix displacement
.a628	88		dey				dey
.a629	68		pla				pla			; restore branch opcode
.a62a	4c 23 cc	jmp $cc23			jmp Comma_YA		; compile Bcc
>a62d	57 6f 72 64			L1:	.text "Word"	;  name of word as a string, ending at wh_NameLastChar
>a631	04					.byte *-L1	;wh_NameLength	length of name
>a632	82 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a634	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a635	18					.byte UF+NN	;wh_Flags	dictionary flags
=42417					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a636					Word:
.a636	20 6a b3	jsr $b36a			jsr underflow_1
.a639	a4 08		ldy $08				ldy toin+0		; >IN
.a63b	c4 06		cpy $06		_DelimLoop:	cpy ciblen+0		; quit if end of input
.a63d	f0 09		beq $a648			beq _found_char
.a63f	b1 04		lda ($04),y			lda (cib),y
.a641	d5 24		cmp $24,x			cmp DStack+0,x		; ASCII of delimiter
.a643	d0 03		bne $a648			bne _found_char
.a645	c8		iny				iny
.a646	d0 f3		bne $a63b			bne _DelimLoop
.a648					_found_char:
.a648	84 08		sty $08				sty toin+0		; Save index of where word starts
.a64a	20 31 ba	jsr $ba31			jsr Parse		; The real work is done by parse
.a64d	20 24 b3	jsr $b324			jsr PopA		; pop u
.a650	85 16		sta $16				sta tmp2+0
.a652	20 4b b3	jsr $b34b			jsr PopTmp1		; pop addr
.a655	20 2c c9	jsr $c92c			jsr Here		; Return caddr
.a658	a5 16		lda $16				lda tmp2+0
.a65a	a0 00		ldy #$00			ldy #0			; Save length of string
.a65c	f0 03		beq $a661			beq _CopyStart
.a65e	b1 14		lda ($14),y	_CopyLoop:	lda (tmp1),y
.a660	c8		iny				iny
.a661	20 09 cc	jsr $cc09	_CopyStart:	jsr C_Comma_A
.a664	c4 16		cpy $16				cpy tmp2+0
.a666	90 f6		bcc $a65e			bcc _CopyLoop
=50					CL	.var *-(WordListLink+wh_Xt)
=$a668					en = *	; remember here
>a634	32					.byte CL	;wh_CodeLength
.a668	60		rts				rts
>a669	28				L1:	.text "("	;  name of word as a string, ending at wh_NameLastChar
>a66a	01					.byte *-L1	;wh_NameLength	length of name
>a66b	b1 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a66d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a66e	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42474					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a66f	a9 29		lda #$29	Paren:		lda #')'		; separator
.a671	20 34 ba	jsr $ba34			jsr Parse_A		; Call parse.
.a674	4c 2b c4	jmp $c42b			jmp Two_drop		; Throw away the result.
=8					CL	.var *-(WordListLink+wh_Xt)
=$a677					en = *	; remember here
>a66d	08					.byte CL	;wh_CodeLength
>a677	2e 28				L1:	.text ".("	;  name of word as a string, ending at wh_NameLastChar
>a679	02					.byte *-L1	;wh_NameLength	length of name
>a67a	ea a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a67c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a67d	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42489					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a67e	a9 29		lda #$29	Dot_paren:	lda #')'
.a680	20 34 ba	jsr $ba34			jsr Parse_A
.a683	4c f2 cc	jmp $ccf2			jmp Type
=8					CL	.var *-(WordListLink+wh_Xt)
=$a686					en = *	; remember here
>a67c	08					.byte CL	;wh_CodeLength
>a686	48 61 73 68			L1:	.text "Hash"	;  name of word as a string, ending at wh_NameLastChar
>a68a	04					.byte *-L1	;wh_NameLength	length of name
>a68b	f9 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a68d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a68e	08					.byte NN	;wh_Flags	dictionary flags
=42506					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a68f	20 24 b3	jsr $b324	Hash:		jsr PopA		; save length
.a692	85 16		sta $16				sta tmp2+0
.a694	b5 24		lda $24,x			lda DStack+0,x		; copy addr
.a696	b4 25		ldy $25,x			ldy DStack+1,x
.a698	85 14		sta $14				sta tmp1+0
.a69a	84 15		sty $15				sty tmp1+1
.a69c	a9 b3		lda #$b3			lda #$b3		; init hash
.a69e	95 24		sta $24,x			sta DStack+0,x
.a6a0	95 25		sta $25,x			sta DStack+1,x
.a6a2	a0 00		ldy #$00			ldy #0			; for each char
.a6a4	f0 15		beq $a6bb			beq _next
.a6a6	b1 14		lda ($14),y	_loop:		lda (tmp1),y		;   get char
.a6a8	c9 61		cmp #$61			cmp #'a'		;   uppercase
.a6aa	90 06		bcc $a6b2			bcc _3
.a6ac	c9 7b		cmp #$7b			cmp #'z'+1
.a6ae	b0 02		bcs $a6b2			bcs _3
.a6b0	29 df		and #$df			and #$df
.a6b2	16 24		asl $24,x	_3:		asl DStack+0,x		;   add to hash
.a6b4	36 25		rol $25,x			rol DStack+1,x
.a6b6	75 24		adc $24,x			adc DStack+0,x
.a6b8	95 24		sta $24,x			sta DStack+0,x
.a6ba	c8		iny				iny
.a6bb	c4 16		cpy $16		_Next:		cpy tmp2+0
.a6bd	90 e7		bcc $a6a6			bcc _loop
=48					CL	.var *-(WordListLink+wh_Xt)
=$a6bf					en = *	; remember here
>a68d	30					.byte CL	;wh_CodeLength
.a6bf	60		rts				rts
>a6c0	45 6e 76 69 72 6f 6e 6d		L1:	.text "Environment?"	;  name of word as a string, ending at wh_NameLastChar
>a6c8	65 6e 74 3f
>a6cc	0c					.byte *-L1	;wh_NameLength	length of name
>a6cd	0a a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6cf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6d0	08					.byte NN	;wh_Flags	dictionary flags
=42572					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6d1					Environment_Q:
.a6d1	20 8f a6	jsr $a68f			jsr Hash		; ( hash )
.a6d4	a0 00		ldy #$00			ldy #0			; Y= table index
.a6d6	f0 0a		beq $a6e2			beq _entry_test
.a6d8	98		tya		_entry_next:	tya
.a6d9	c0 30		cpy #$30			cpy #_table_dbl		; if double
.a6db	90 02		bcc $a6df			bcc +
.a6dd	69 01		adc #$01			adc #6-4-1		;   skip double
.a6df	69 04		adc #$04	+		adc #4			;   skip single
.a6e1	a8		tay		_3:		tay
.a6e2	b9 16 a7	lda $a716,y	_entry_test:	lda _Table+0,y		; match?
.a6e5	f0 28		beq $a70f			beq _notfound
.a6e7	d5 24		cmp $24,x			cmp DStack+0,x
.a6e9	d0 ed		bne $a6d8			bne _entry_next
.a6eb	b9 17 a7	lda $a717,y			lda _Table+1,y
.a6ee	d5 25		cmp $25,x			cmp DStack+1,x
.a6f0	d0 e6		bne $a6d8			bne _entry_next
.a6f2	b9 18 a7	lda $a718,y			lda _Table+2,y
.a6f5	95 24		sta $24,x			sta DStack+0,x
.a6f7	b9 19 a7	lda $a719,y			lda _Table+3,y
.a6fa	95 25		sta $25,x			sta DStack+1,x
.a6fc	c0 30		cpy #$30			cpy #_table_dbl		; single or double data?
.a6fe	90 0c		bcc $a70c			bcc _single
.a700	ca		dex				dex			;  push 2nd cell
.a701	ca		dex				dex
.a702	b9 1a a7	lda $a71a,y			lda _Table+4,y
.a705	95 24		sta $24,x			sta DStack+0,x
.a707	b9 1b a7	lda $a71b,y			lda _Table+5,y
.a70a	95 25		sta $25,x			sta DStack+1,x
.a70c					_single:
.a70c	4c 18 b7	jmp $b718			jmp True		; return True
.a70f					_notfound:
.a70f	a9 00		lda #$00			lda #0			; return 0
.a711	95 24		sta $24,x			sta DStack+0,x
.a713	95 25		sta $25,x			sta DStack+1,x
.a715	60		rts				rts
=69					CL	.var *-(WordListLink+wh_Xt)
=$a716					en = *	; remember here
>a6cf	45					.byte CL	;wh_CodeLength
.a716					_Table:
>a716	5e e6 ff 7f				.word $e65e,$7fff	; "/COUNTED-STRING"
>a71a	be 79 ff 00				.word $79BE,$ff		; "/HOLD"
>a71e	b9 3c 54 00				.word $3cb9,padoffset	; "/PAD"
>a722	8b 81 08 00				.word $818b,8		; "ADDRESS-UNIT-BITS"
>a726	57 fc 00 00				.word $fc57,0		; "FLOORED"	we have symmetric)
>a72a	4f fb ff 00				.word $fb4f,$ff		; "MAX-CHAR"
>a72e	56 7f ff 7f				.word $7f56,$7fff	; "MAX-N"
>a732	5d 7f ff ff				.word $7f5d,$ffff	; "MAX-U"
>a736	38 ce 80 00				.word $ce38,$80		; "RETURN-STACK-CELLS"
>a73a	f2 c0 14 00				.word $c0f2,DStack0/2	; "STACK-CELLS"
>a73e	36 e3 09 00				.word $e336,9		; "WORDLISTS"
>a742	01 99 0a 00				.word $9901,FDim	; "FLOATING-STACK"	n	yes	   If n = zero, floating-point numbers are
=48					_table_dbl = *-_Table	; These return a double-cell number
>a746	4c 7f ff ff ff 7f			.word $7f4c,$ffff,$7fff	; "MAX-D"
>a74c	fe fe ff ff ff ff			.word $fefe,$ffff,$ffff	; "MAX-UD"
>a752	00					.byte 0		; end of list
>a753	42 65 6c 6c			L1:	.text "Bell"	;  name of word as a string, ending at wh_NameLastChar
>a757	04					.byte *-L1	;wh_NameLength	length of name
>a758	4c a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a75a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a75b	08					.byte NN	;wh_Flags	dictionary flags
=42711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a75c	a9 07		lda #$07	Bell:		lda #7		; ASCII value for BELL
.a75e	4c d8 cc	jmp $ccd8			jmp Emit_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$a761					en = *	; remember here
>a75a	05					.byte CL	;wh_CodeLength
>a761	44 75 6d 70			L1:	.text "Dump"	;  name of word as a string, ending at wh_NameLastChar
>a765	04					.byte *-L1	;wh_NameLength	length of name
>a766	d7 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a768	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a769	18					.byte UF+NN	;wh_Flags	dictionary flags
=42725					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a76a					Dump:
.a76a	20 7f b3	jsr $b37f			jsr underflow_2
.a76d	ca		dex				dex			; alloc work area
.a76e	ca		dex				dex
.a76f					_row:
.a76f	20 7d aa	jsr $aa7d			jsr CR
.a772	b5 29		lda $29,x			lda DStack+5,x		; print address number
.a774	20 f3 a7	jsr $a7f3			jsr C_Dot_Hex_A
.a777	b5 28		lda $28,x			lda DStack+4,x
.a779	20 f3 a7	jsr $a7f3			jsr C_Dot_Hex_A
.a77c	20 e5 cc	jsr $cce5			jsr Space
.a77f	20 e5 cc	jsr $cce5			jsr Space
.a782	a9 00		lda #$00			lda #0
.a784	95 24		sta $24,x			sta DStack+0,x
.a786					_loop:
.a786	b5 26		lda $26,x			lda DStack+2,x
.a788	15 27		ora $27,x			ora DStack+3,x
.a78a	f0 36		beq $a7c2			beq _all_printed
.a78c	a1 28		lda ($28,x)			lda (DStack+4,x)
.a78e	20 f3 a7	jsr $a7f3			jsr C_Dot_Hex_A
.a791	20 e5 cc	jsr $cce5			jsr Space
.a794	a1 28		lda ($28,x)			lda (DStack+4,x)
.a796	20 1a a8	jsr $a81a			jsr is_printable
.a799	b0 02		bcs $a79d			bcs _printable
.a79b	a9 2e		lda #$2e			lda #'.'		 ; Print dot if not printable
.a79d					_printable:
.a79d	b4 24		ldy $24,x			ldy DStack+0,x
.a79f	91 00		sta ($00),y			sta (cp),y
.a7a1	c0 07		cpy #$07			cpy #7
.a7a3	d0 03		bne $a7a8			bne +
.a7a5	20 e5 cc	jsr $cce5			jsr Space
.a7a8					+
.a7a8	f6 28		inc $28,x			inc DStack+4,x
.a7aa	d0 02		bne $a7ae			bne +
.a7ac	f6 29		inc $29,x			inc DStack+5,x
.a7ae					+
.a7ae	20 46 c9	jsr $c946			jsr NOS_One_Minus	; loop counter
.a7b1	f6 24		inc $24,x			inc DStack+0,x
.a7b3	b5 24		lda $24,x			lda DStack+0,x
.a7b5	c9 10		cmp #$10			cmp #16
.a7b7	90 cd		bcc $a786			bcc _loop		; next byte
.a7b9	20 e5 cc	jsr $cce5			jsr Space
.a7bc	20 d1 a7	jsr $a7d1			jsr dump_print_ascii
.a7bf	4c 6f a7	jmp $a76f			jmp _row		; new row
.a7c2					_all_printed:
.a7c2	b5 24		lda $24,x			lda DStack+0,x
.a7c4	f0 06		beq $a7cc			beq _done
.a7c6	20 e5 cc	jsr $cce5			jsr Space
.a7c9	20 d1 a7	jsr $a7d1			jsr dump_print_ascii
.a7cc					_done:
.a7cc	e8		inx				inx			; drop work area
.a7cd	e8		inx				inx
.a7ce	4c 2b c4	jmp $c42b			jmp Two_drop		; one byte less than 4x INX
=103					CL	.var *-(WordListLink+wh_Xt)
=$a7d1					en = *	; remember here
>a768	67					.byte CL	;wh_CodeLength
.a7d1					dump_print_ascii:
.a7d1	a0 00		ldy #$00			ldy #0
.a7d3					_loop:
.a7d3	b1 00		lda ($00),y			lda (cp),y
.a7d5	20 d8 cc	jsr $ccd8			jsr Emit_A
.a7d8	c8		iny				iny
.a7d9	c0 08		cpy #$08			cpy #8
.a7db	d0 03		bne $a7e0			bne +
.a7dd	20 e5 cc	jsr $cce5			jsr Space
.a7e0					+
.a7e0	98		tya				tya
.a7e1	d5 24		cmp $24,x			cmp DStack+0,x
.a7e3	90 ee		bcc $a7d3			bcc _loop
.a7e5	60		rts				rts
>a7e6	43 2e 48 65 78			L1:	.text "C.Hex"	;  name of word as a string, ending at wh_NameLastChar
>a7eb	05					.byte *-L1	;wh_NameLength	length of name
>a7ec	e5 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a7ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a7ef	08					.byte NN	;wh_Flags	dictionary flags
=42859					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a7f0	20 24 b3	jsr $b324	C_Dot_Hex:	jsr PopA
.a7f3					C_Dot_Hex_A:
.a7f3	48		pha		                pha
.a7f4	4a		lsr a				lsr		; convert high nibble first
.a7f5	4a		lsr a				lsr
.a7f6	4a		lsr a				lsr
.a7f7	4a		lsr a				lsr
.a7f8	20 fc a7	jsr $a7fc			jsr _nibble_to_ascii
.a7fb	68		pla				pla
.a7fc					_nibble_to_ascii:
.a7fc	29 0f		and #$0f			and #$0F	; only use lower nibble
.a7fe	c9 0a		cmp #$0a			cmp #9+1
.a800	90 02		bcc $a804			bcc +
.a802	69 06		adc #$06			adc #6
.a804	69 30		adc #$30	+		adc #'0'
.a806	4c d8 cc	jmp $ccd8			jmp Emit_A
>a809	2e 48 65 78			L1:	.text ".Hex"	;  name of word as a string, ending at wh_NameLastChar
>a80d	04					.byte *-L1	;wh_NameLength	length of name
>a80e	6b a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a810	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a811	08					.byte NN	;wh_Flags	dictionary flags
=42893					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a812	b5 25		lda $25,x	Dot_Hex:	lda DStack+1,x	; do hi byte
.a814	20 f3 a7	jsr $a7f3			jsr C_Dot_Hex_A
.a817	4c f0 a7	jmp $a7f0			jmp C_Dot_Hex	; do lo byte
.a81a					is_printable:
.a81a	c9 20		cmp #$20	                cmp #AscSP              ; $20
.a81c	90 07		bcc $a825	                bcc _done
.a81e	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.a820	b0 02		bcs $a824	                bcs _failed
.a822	38		sec		                sec
.a823	60		rts		                rts
.a824	18		clc		_failed:	clc
.a825	60		rts		_done:		rts
>a826	2e 53				L1:	.text ".S"	;  name of word as a string, ending at wh_NameLastChar
>a828	02					.byte *-L1	;wh_NameLength	length of name
>a829	8d a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a82b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a82c	08					.byte NN	;wh_Flags	dictionary flags
=42920					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a82d					Dot_s:
.a82d	a9 3c		lda #$3c			lda #'<'
.a82f	20 d8 cc	jsr $ccd8			jsr Emit_A
.a832	20 68 c1	jsr $c168			jsr Depth	; ( -- u )
.a835	20 33 cb	jsr $cb33			jsr print_u
.a838	a9 3e		lda #$3e			lda #'>'
.a83a	20 d8 cc	jsr $ccd8			jsr Emit_A
.a83d	20 e5 cc	jsr $cce5			jsr Space
.a840	a0 28		ldy #$28			ldy #DStack0		; for each cell on the stack
.a842	88		dey		_loop:		dey
.a843	88		dey				dey
.a844	86 14		stx $14				stx tmp1
.a846	c4 14		cpy $14				cpy tmp1
.a848	90 15		bcc $a85f			bcc _done
.a84a	98		tya				tya			; save index
.a84b	48		pha				pha
.a84c	ca		dex				dex			; push stack[index]
.a84d	ca		dex				dex
.a84e	b9 24 00	lda $0024,y			lda DStack+0,y
.a851	95 24		sta $24,x			sta DStack+0,x
.a853	b9 25 00	lda $0025,y			lda DStack+1,y
.a856	95 25		sta $25,x			sta DStack+1,x
.a858	20 e6 ca	jsr $cae6			jsr Dot
.a85b	68		pla				pla			; restore index
.a85c	a8		tay				tay
.a85d	d0 e3		bne $a842			bne _loop
.a85f					_done:
=50					CL	.var *-(WordListLink+wh_Xt)
=$a85f					en = *	; remember here
>a82b	32					.byte CL	;wh_CodeLength
.a85f	60		rts				rts
>a860	43 6f 6d 70 61 72 65		L1:	.text "Compare"	;  name of word as a string, ending at wh_NameLastChar
>a867	07					.byte *-L1	;wh_NameLength	length of name
>a868	a8 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a86a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a86b	18					.byte UF+NN	;wh_Flags	dictionary flags
=42983					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a86c					Compare:
.a86c	20 89 b3	jsr $b389			jsr underflow_4
.a86f	b5 24		lda $24,x			lda DStack+0,x		; tmp3+1= u2.lo
.a871	85 19		sta $19				sta tmp3+1
.a873	b5 26		lda $26,x			lda DStack+2,x		; tmp2= addr2
.a875	b4 27		ldy $27,x			ldy DStack+3,x
.a877	85 16		sta $16				sta tmp2+0
.a879	84 17		sty $17				sty tmp2+1
.a87b	b5 28		lda $28,x			lda DStack+4,x		; tmp3+0= u1.lo
.a87d	85 18		sta $18				sta tmp3+0
.a87f	b5 2a		lda $2a,x			lda DStack+6,x		; tmp1= addr1
.a881	b4 2b		ldy $2b,x			ldy DStack+7,x
.a883	85 14		sta $14				sta tmp1+0
.a885	84 15		sty $15				sty tmp1+1
.a887	a0 00		ldy #$00			ldy #0		; for each char
.a889					_loop:
.a889	c4 18		cpy $18				cpy tmp3+0	; string1 empty?
.a88b	f0 13		beq $a8a0			beq _str1
.a88d					_L1:
.a88d	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a88f	f0 27		beq $a8b8			beq _str2
.a891					_L2:
.a891	b1 14		lda ($14),y			lda (tmp1),y	; Are they different?
.a893	d1 16		cmp ($16),y			cmp (tmp2),y
.a895	d0 19		bne $a8b0			bne _neq
.a897	c8		iny				iny		; to next char
.a898	d0 ef		bne $a889			bne _loop
.a89a	e6 15		inc $15				inc tmp1+1	; to next page
.a89c	e6 17		inc $17				inc tmp2+1
.a89e	d0 e9		bne $a889			bne _loop
.a8a0	d6 29		dec $29,x	_str1:		dec DStack+5,x	; string1 really empty?
.a8a2	10 e9		bpl $a88d			bpl _L1
.a8a4	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a8a6	d0 0a		bne $a8b2			bne _less
.a8a8	b5 25		lda $25,x			lda DStack+1,x
.a8aa	d0 06		bne $a8b2			bne _less
.a8ac	a9 00		lda #$00	_equal:		lda #0		; Return 0
.a8ae	f0 0e		beq $a8be			beq _gt2
.a8b0	b0 0a		bcs $a8bc	_neq:		bcs _greater
.a8b2	a9 ff		lda #$ff	_less:		lda #$FF	; Return -1
.a8b4	95 2a		sta $2a,x			sta DStack+6,x
.a8b6	d0 0a		bne $a8c2			bne _done
.a8b8	d6 25		dec $25,x	_str2:		dec DStack+1,x	; is string2 empty?
.a8ba	10 d5		bpl $a891			bpl _L2
.a8bc	a9 01		lda #$01	_greater:	lda #1		; Return 1
.a8be	95 2a		sta $2a,x	_gt2:		sta DStack+6,x
.a8c0	a9 00		lda #$00			lda #0
.a8c2	95 2b		sta $2b,x	_done:		sta DStack+7,x
.a8c4	8a		txa				txa		; Remove all but the result from the stack.
.a8c5	18		clc				clc
.a8c6	69 06		adc #$06			adc #6
.a8c8	aa		tax				tax
=93					CL	.var *-(WordListLink+wh_Xt)
=$a8c9					en = *	; remember here
>a86a	5d					.byte CL	;wh_CodeLength
.a8c9	60		rts				rts
>a8ca	53 65 61 72 63 68		L1:	.text "Search"	;  name of word as a string, ending at wh_NameLastChar
>a8d0	06					.byte *-L1	;wh_NameLength	length of name
>a8d1	e7 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a8d3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a8d4	18					.byte UF+NN	;wh_Flags	dictionary flags
=43088					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a8d5					Search:
.a8d5	20 89 b3	jsr $b389			jsr underflow_4
.a8d8	b5 24		lda $24,x			lda DStack+0,x
.a8da	15 25		ora $25,x			ora DStack+1,x
.a8dc	d0 09		bne $a8e7			bne _start_search
.a8de	e8		inx				inx		; Drop u2
.a8df	e8		inx				inx
.a8e0	a9 ff		lda #$ff			lda #$FF	; overwrite addr2 with a true flag
.a8e2	95 24		sta $24,x			sta DStack+0,x
.a8e4	95 25		sta $25,x			sta DStack+1,x
.a8e6	60		rts				rts
.a8e7					_start_search:
.a8e7	20 49 b7	jsr $b749			jsr Zero
.a8ea					_search_loop:
.a8ea	18		clc				clc
.a8eb	b5 24		lda $24,x			lda DStack+0,x
.a8ed	75 26		adc $26,x			adc DStack+2,x
.a8ef	85 14		sta $14				sta tmp1+0
.a8f1	b5 25		lda $25,x			lda DStack+1,x
.a8f3	75 27		adc $27,x			adc DStack+3,x
.a8f5	85 15		sta $15				sta tmp1+1
.a8f7	d5 2b		cmp $2b,x			cmp DStack+7,x
.a8f9	90 13		bcc $a90e			bcc _init_comparison ; Obviously less
.a8fb	d0 06		bne $a903			bne _not_found
.a8fd	b5 2a		lda $2a,x			lda DStack+6,x
.a8ff	c5 14		cmp $14				cmp tmp1
.a901	b0 0b		bcs $a90e			bcs _init_comparison
.a903					_not_found:
.a903	e8		inx				inx		; Remove offset
.a904	e8		inx				inx
.a905	e8		inx				inx		; Remove u2
.a906	e8		inx				inx
.a907	a9 00		lda #$00			lda #0
.a909	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a false flag
.a90b	95 25		sta $25,x			sta DStack+1,x
.a90d	60		rts				rts
.a90e					_init_comparison:
.a90e	18		clc				clc
.a90f	b5 2c		lda $2c,x			lda DStack+8,x
.a911	75 24		adc $24,x			adc DStack+0,x
.a913	85 14		sta $14				sta tmp1
.a915	b5 2d		lda $2d,x			lda DStack+9,x
.a917	75 25		adc $25,x			adc DStack+1,x
.a919	85 15		sta $15				sta tmp1+1
.a91b	b5 28		lda $28,x			lda DStack+4,x
.a91d	85 16		sta $16				sta tmp2
.a91f	b5 29		lda $29,x			lda DStack+5,x
.a921	85 17		sta $17				sta tmp2+1
.a923	b5 26		lda $26,x			lda DStack+2,x
.a925	85 18		sta $18				sta tmp3+0
.a927	b5 27		lda $27,x			lda DStack+3,x
.a929	85 19		sta $19				sta tmp3+1
.a92b					_comparison_loop:
.a92b	a0 00		ldy #$00			ldy #0
.a92d	b1 14		lda ($14),y			lda (tmp1),y
.a92f	d1 16		cmp ($16),y			cmp (tmp2),y
.a931	f0 06		beq $a939			beq _letters_match
.a933	20 60 c9	jsr $c960			jsr One_plus
.a936	4c ea a8	jmp $a8ea			jmp _search_loop
.a939					_letters_match:
.a939	e6 14		inc $14				inc tmp1
.a93b	d0 02		bne $a93f			bne +
.a93d	e6 15		inc $15				inc tmp1+1
.a93f					+
.a93f	e6 16		inc $16				inc tmp2
.a941	d0 02		bne $a945			bne +
.a943	e6 17		inc $17				inc tmp2+1
.a945					+
.a945	a5 18		lda $18				lda tmp3
.a947	d0 02		bne $a94b			bne +
.a949	c6 19		dec $19				dec tmp3+1
.a94b					+
.a94b	c6 18		dec $18				dec tmp3
.a94d	a5 18		lda $18				lda tmp3
.a94f	05 19		ora $19				ora tmp3+1
.a951	d0 d8		bne $a92b			bne _comparison_loop ; Check the next letter
.a953	18		clc				clc
.a954	b5 24		lda $24,x			lda DStack+0,x
.a956	75 2c		adc $2c,x			adc DStack+8,x
.a958	95 2c		sta $2c,x			sta DStack+8,x
.a95a	b5 25		lda $25,x			lda DStack+1,x
.a95c	75 2d		adc $2d,x			adc DStack+9,x
.a95e	95 2d		sta $2d,x			sta DStack+9,x
.a960	38		sec				sec
.a961	b5 2a		lda $2a,x			lda DStack+6,x
.a963	f5 24		sbc $24,x			sbc DStack+0,x
.a965	95 2a		sta $2a,x			sta DStack+6,x
.a967	b5 2b		lda $2b,x			lda DStack+7,x
.a969	f5 25		sbc $25,x			sbc DStack+1,x
.a96b	95 2b		sta $2b,x			sta DStack+7,x
.a96d	e8		inx				inx		; drop offset
.a96e	e8		inx				inx
.a96f	e8		inx				inx		; drop u2
.a970	e8		inx				inx
.a971	a9 ff		lda #$ff			lda #$FF
.a973	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a true flag.
.a975	95 25		sta $25,x			sta DStack+1,x
=162					CL	.var *-(WordListLink+wh_Xt)
=$a977					en = *	; remember here
>a8d3	a2					.byte CL	;wh_CodeLength
.a977	60		rts				rts
>a978	4d 61 72 6b 65 72		L1:	.text "Marker"	;  name of word as a string, ending at wh_NameLastChar
>a97e	06					.byte *-L1	;wh_NameLength	length of name
>a97f	50 a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a981	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a982	0c					.byte IM+NN	;wh_Flags	dictionary flags
=43262					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a983					Marker:
.a983	20 2c c9	jsr $c92c			jsr Here		; Save original CP, which
.a986	20 70 c0	jsr $c070			jsr Header_Build	; compile a word header, but don't link into wordlist
.a989	a0 a9		ldy #$a9			ldy #>_runtime		; compile JSR _runtime
.a98b	a9 a3		lda #$a3			lda #<_runtime
.a98d	20 48 cc	jsr $cc48			jsr Jsr_Comma_YA
.a990	20 20 cc	jsr $cc20			jsr Comma		; Append original CP
.a993	a0 00		ldy #$00			ldy #0			; Start at CURRENT
.a995	b9 10 03	lda $0310,y	_loop:		lda CurrentV,y
.a998	20 09 cc	jsr $cc09			jsr C_Comma_A
.a99b	c8		iny				iny
.a99c	c0 24		cpy #$24			cpy #MarkEnd-CurrentV	; One past the end of the search order.
.a99e	90 f5		bcc $a995			bcc _loop
.a9a0	4c 65 c0	jmp $c065			jmp Header_Link		; link built header into current dictionary
=32					CL	.var *-(WordListLink+wh_Xt)
=$a9a3					en = *	; remember here
>a981	20					.byte CL	;wh_CodeLength
.a9a3					_runtime:
.a9a3	68		pla				pla		; Pop the RTS address off the stack
.a9a4	85 14		sta $14				sta tmp1+0
.a9a6	68		pla				pla
.a9a7	85 15		sta $15				sta tmp1+1
.a9a9	a0 01		ldy #$01			ldy #1		; start just aftet JSR _runtime
.a9ab	b1 14		lda ($14),y			lda (tmp1),y	; CP was stored first
.a9ad	85 00		sta $00				sta cp+0
.a9af	c8		iny				iny
.a9b0	b1 14		lda ($14),y			lda (tmp1),y
.a9b2	85 01		sta $01				sta cp+1
.a9b4	c8		iny				iny
.a9b5					_rloop:
.a9b5	b1 14		lda ($14),y			lda (tmp1),y
.a9b7	99 0d 03	sta $030d,y			sta CurrentV-2-1,y
.a9ba	c8		iny				iny
.a9bb	c0 27		cpy #$27			cpy #MarkEnd-CurrentV+2+1 ; One past the end of the search order.
.a9bd	90 f6		bcc $a9b5			bcc _rloop
.a9bf	60		rts				rts
>a9c0	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
>a9c5	05					.byte *-L1	;wh_NameLength	length of name
>a9c6	fe a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9c8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9c9	08					.byte NN	;wh_Flags	dictionary flags
=43333					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9ca					Words:
.a9ca	a9 ff		lda #$ff			lda #$ff
.a9cc	20 3a b7	jsr $b73a			jsr PushZA		; Alloc space for line size & wordlist #
.a9cf	ca		dex				dex			; Alloc space for a nt
.a9d0	ca		dex				dex
.a9d1					_wordlist_next:
.a9d1	20 7d aa	jsr $aa7d			jsr CR			; start wordlist on new line
.a9d4	f6 26		inc $26,x			inc DStack+2,x		; step to next search wordlist
.a9d6	b4 26		ldy $26,x			ldy DStack+2,x		; Y= wordlist index
.a9d8	cc 2a 03	cpy $032a			cpy Num_OrderV
.a9db	b0 44		bcs $aa21			bcs _wordslist_done	; ran out of search wordlist entries?
.a9dd	b9 2b 03	lda $032b,y			lda Search_OrderV,y	; A= SEARCH-ORDER[Y]	Get the current wordlist id
.a9e0	0a		asl a				asl			; TOS= WORDLISTS[A]
.a9e1	a8		tay				tay
.a9e2	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.a9e5	95 24		sta $24,x			sta DStack+0,x
.a9e7	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.a9ea	95 25		sta $25,x			sta DStack+1,x
.a9ec	f0 e3		beq $a9d1			beq _wordlist_next	; end of list?
.a9ee					_word_loop:
.a9ee	20 6a ce	jsr $ce6a			jsr Dup			; ( wordlist# nt nt )
.a9f1	20 38 bd	jsr $bd38			jsr Name_To_String	; ( wordlist# nt addr u )
.a9f4	b5 2b		lda $2b,x			lda DStack+7,x
.a9f6	38		sec				sec			; don't forget the space between words
.a9f7	75 24		adc $24,x			adc DStack+0,x
.a9f9	c9 4e		cmp #$4e			cmp #MAX_LINE_LENGTH-1
.a9fb	90 05		bcc $aa02			bcc +
.a9fd	20 7d aa	jsr $aa7d			jsr CR
.aa00	b5 24		lda $24,x			lda DStack+0,x		; After going to next line, start
.aa02	95 2b		sta $2b,x	+		sta DStack+7,x
.aa04	20 f2 cc	jsr $ccf2			jsr Type		; ( wordlist# nt )
.aa07	20 e5 cc	jsr $cce5			jsr Space
.aa0a	b5 24		lda $24,x			lda DStack+0,x
.aa0c	85 14		sta $14				sta tmp1+0
.aa0e	b5 25		lda $25,x			lda DStack+1,x
.aa10	85 15		sta $15				sta tmp1+1
.aa12	a0 81		ldy #$81			ldy #wh_WordListLink	; get next word nt
.aa14	b1 14		lda ($14),y			lda (tmp1),y
.aa16	95 24		sta $24,x			sta DStack+0,x
.aa18	c8		iny				iny
.aa19	b1 14		lda ($14),y			lda (tmp1),y
.aa1b	95 25		sta $25,x			sta DStack+1,x
.aa1d	d0 cf		bne $a9ee			bne _word_loop		; end of list?
.aa1f	f0 b0		beq $a9d1			beq _wordlist_next
.aa21					_wordslist_done:
.aa21	4c 2b c4	jmp $c42b			jmp Two_Drop
=90					CL	.var *-(WordListLink+wh_Xt)
=$aa24					en = *	; remember here
>a9c8	5a					.byte CL	;wh_CodeLength
>aa24	57 6f 72 64 53 69 7a 65		L1:	.text "WordSize"	;  name of word as a string, ending at wh_NameLastChar
>aa2c	08					.byte *-L1	;wh_NameLength	length of name
>aa2d	45 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa2f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa30	08					.byte NN	;wh_Flags	dictionary flags
=43436					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa31	20 4b b3	jsr $b34b	WordSize:	jsr PopTmp1
.aa34	a0 83		ldy #$83			ldy #Wh_CodeLength
.aa36	b1 14		lda ($14),y			lda (tmp1),y
.aa38	4c 3a b7	jmp $b73a			jmp PushZA
=10					CL	.var *-(WordListLink+wh_Xt)
=$aa3b					en = *	; remember here
>aa2f	0a					.byte CL	;wh_CodeLength
>aa3b	41 6c 69 67 6e 65 64		L1:	.text "Aligned"	;  name of word as a string, ending at wh_NameLastChar
>aa42	07					.byte *-L1	;wh_NameLength	length of name
>aa43	ac a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa45	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa46	00					.byte 0	;wh_Flags	dictionary flags
=43458					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa47					Aligned:
=0					CL	.var *-(WordListLink+wh_Xt)
=$aa47					en = *	; remember here
>aa45	00					.byte CL	;wh_CodeLength
.aa47	60		rts				rts
>aa48	41 6c 69 67 6e			L1:	.text "Align"	;  name of word as a string, ending at wh_NameLastChar
>aa4d	05					.byte *-L1	;wh_NameLength	length of name
>aa4e	c2 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa50	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa51	00					.byte 0	;wh_Flags	dictionary flags
=43469					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa52					Align:
=0					CL	.var *-(WordListLink+wh_Xt)
=$aa52					en = *	; remember here
>aa50	00					.byte CL	;wh_CodeLength
.aa52	60		rts				rts
>aa53	4f 75 74 70 75 74		L1:	.text "Output"	;  name of word as a string, ending at wh_NameLastChar
>aa59	06					.byte *-L1	;wh_NameLength	length of name
>aa5a	cd a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa5c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa5d	08					.byte NN	;wh_Flags	dictionary flags
=43481					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa5e					xt_output:
.aa5e	a0 03		ldy #$03			ldy #>output
.aa60	a9 06		lda #$06			lda #<output
.aa62	4c f8 b6	jmp $b6f8			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$aa65					en = *	; remember here
>aa5c	07					.byte CL	;wh_CodeLength
>aa65	49 6e 70 75 74			L1:	.text "Input"	;  name of word as a string, ending at wh_NameLastChar
>aa6a	05					.byte *-L1	;wh_NameLength	length of name
>aa6b	d9 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa6d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa6e	08					.byte NN	;wh_Flags	dictionary flags
=43498					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa6f	a0 03		ldy #$03	xt_input:	ldy #>input
.aa71	a9 08		lda #$08			lda #<input
.aa73	4c f8 b6	jmp $b6f8			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$aa76					en = *	; remember here
>aa6d	07					.byte CL	;wh_CodeLength
>aa76	43 52				L1:	.text "CR"	;  name of word as a string, ending at wh_NameLastChar
>aa78	02					.byte *-L1	;wh_NameLength	length of name
>aa79	ea a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa7b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa7c	08					.byte NN	;wh_Flags	dictionary flags
=43512					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa7d					CR:
.aa7d	a9 0d		lda #$0d			lda #AscCR
.aa7f	20 d8 cc	jsr $ccd8			jsr Emit_A
.aa82	a9 0a		lda #$0a			lda #AscLF
.aa84	20 d8 cc	jsr $ccd8			jsr Emit_A
=10					CL	.var *-(WordListLink+wh_Xt)
=$aa87					en = *	; remember here
>aa7b	0a					.byte CL	;wh_CodeLength
.aa87	60		rts				rts
>aa88	50 61 67 65			L1:	.text "Page"	;  name of word as a string, ending at wh_NameLastChar
>aa8c	04					.byte *-L1	;wh_NameLength	length of name
>aa8d	f8 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa8f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa90	08					.byte NN	;wh_Flags	dictionary flags
=43532					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa91	20 19 b8	jsr $b819	Page:		jsr SLiteral_Runtime
.aa94	4c a1 aa	jmp $aaa1			  jmp +
>aa97	1b 5b 32 4a					  .text AscESC,"[2J"	; ANSI clear screen
>aa9b	1b 5b 31 3b 31 48				  .text AscESC,"[1;1H"	; move cursor to top left of screen
.aaa1	4c f2 cc	jmp $ccf2	+		jmp Type
=19					CL	.var *-(WordListLink+wh_Xt)
=$aaa4					en = *	; remember here
>aa8f	13					.byte CL	;wh_CodeLength
>aaa4	41 74 2d 58 59			L1:	.text "At-XY"	;  name of word as a string, ending at wh_NameLastChar
>aaa9	05					.byte *-L1	;wh_NameLength	length of name
>aaaa	0c aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aaac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aaad	18					.byte UF+NN	;wh_Flags	dictionary flags
=43561					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aaae					At_XY:
.aaae	20 7f b3	jsr $b37f			jsr underflow_2
.aab1	ad 00 03	lda $0300			lda base	; Save the BASE
.aab4	48		pha				pha
.aab5	20 f9 b0	jsr $b0f9			jsr Decimal	; ANSI escape code values need to be in decimal.
.aab8	a9 1b		lda #$1b			lda #AscESC
.aaba	20 d8 cc	jsr $ccd8			jsr Emit_A
.aabd	a9 5b		lda #$5b			lda #'['
.aabf	20 d8 cc	jsr $ccd8			jsr Emit_A
.aac2	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.aac4	20 33 cb	jsr $cb33			jsr print_u
.aac7	a9 3b		lda #$3b			lda #';'
.aac9	20 d8 cc	jsr $ccd8			jsr Emit_A
.aacc	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.aace	20 33 cb	jsr $cb33			jsr print_u
.aad1	a9 48		lda #$48			lda #'H'
.aad3	20 d8 cc	jsr $ccd8			jsr Emit_A
.aad6	68		pla				pla		; Restore the base
.aad7	8d 00 03	sta $0300			sta base
=44					CL	.var *-(WordListLink+wh_Xt)
=$aada					en = *	; remember here
>aaac	2c					.byte CL	;wh_CodeLength
.aada	60		rts				rts
>aadb	50 61 64			L1:	.text "Pad"	;  name of word as a string, ending at wh_NameLastChar
>aade	03					.byte *-L1	;wh_NameLength	length of name
>aadf	29 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aae1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aae2	00					.byte 0	;wh_Flags	dictionary flags
=43614					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aae3	ca		dex		Pad:		dex		; push cp+PadOffset
.aae4	ca		dex				dex
.aae5	18		clc				clc
.aae6	a5 00		lda $00				lda cp+0
.aae8	69 54		adc #$54			adc #PadOffset
.aaea	95 24		sta $24,x			sta DStack+0,x
.aaec	a5 01		lda $01				lda cp+1
.aaee	69 00		adc #$00			adc #0
.aaf0	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$aaf2					en = *	; remember here
>aae1	0f					.byte CL	;wh_CodeLength
.aaf2	60		rts				rts
>aaf3	3c 23				L1:	.text "<#"	;  name of word as a string, ending at wh_NameLastChar
>aaf5	02					.byte *-L1	;wh_NameLength	length of name
>aaf6	5e aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aaf8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aaf9	00					.byte 0	;wh_Flags	dictionary flags
=43637					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aafa					Less_Number_Sign:
.aafa	a9 54		lda #$54			lda #PadOffset		; init hold buffer index
.aafc	8d 34 03	sta $0334			sta ToHold
=5					CL	.var *-(WordListLink+wh_Xt)
=$aaff					en = *	; remember here
>aaf8	05					.byte CL	;wh_CodeLength
.aaff	60		rts				rts
>ab00	23 3e				L1:	.text "#>"	;  name of word as a string, ending at wh_NameLastChar
>ab02	02					.byte *-L1	;wh_NameLength	length of name
>ab03	75 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab05	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab06	10					.byte UF	;wh_Flags	dictionary flags
=43650					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab07					Number_Sign_Greater:
.ab07	20 7f b3	jsr $b37f			jsr underflow_2		; double number
.ab0a	18		clc				clc			; addr= cp + ToHold
.ab0b	a5 00		lda $00				lda cp+0
.ab0d	6d 34 03	adc $0334			adc ToHold
.ab10	95 26		sta $26,x			sta DStack+2,x
.ab12	a5 01		lda $01				lda cp+1
.ab14	69 00		adc #$00			adc #0
.ab16	95 27		sta $27,x			sta DStack+3,x
.ab18	38		sec				sec			; u= PadOffset - ToHold
.ab19	a9 54		lda #$54			lda #PadOffset
.ab1b	ed 34 03	sbc $0334			sbc ToHold
.ab1e	95 24		sta $24,x			sta DStack+0,x
.ab20	a9 00		lda #$00			lda #0
.ab22	95 25		sta $25,x			sta DStack+1,x
=29					CL	.var *-(WordListLink+wh_Xt)
=$ab24					en = *	; remember here
>ab05	1d					.byte CL	;wh_CodeLength
.ab24	60		rts				rts
>ab25	48 6f 6c 64			L1:	.text "Hold"	;  name of word as a string, ending at wh_NameLastChar
>ab29	04					.byte *-L1	;wh_NameLength	length of name
>ab2a	82 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab2c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab2d	00					.byte 0	;wh_Flags	dictionary flags
=43689					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab2e	20 24 b3	jsr $b324	Hold:		jsr PopA
.ab31	ce 34 03	dec $0334	Hold_A:		dec ToHold
.ab34	ac 34 03	ldy $0334			ldy ToHold
.ab37	91 00		sta ($00),y			sta (cp),y
=11					CL	.var *-(WordListLink+wh_Xt)
=$ab39					en = *	; remember here
>ab2c	0b					.byte CL	;wh_CodeLength
.ab39	60		rts				rts
>ab3a	23				L1:	.text "#"	;  name of word as a string, ending at wh_NameLastChar
>ab3b	01					.byte *-L1	;wh_NameLength	length of name
>ab3c	a9 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab3e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab3f	18					.byte UF+NN	;wh_Flags	dictionary flags
=43707					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab40					Number_Sign:
.ab40	20 7f b3	jsr $b37f			jsr underflow_2		; double number
.ab43	a9 00		lda #$00			lda #0			;   init remainder
.ab45	18		clc				clc
.ab46	a0 21		ldy #$21			ldy #32+1		;   for each bit
.ab48					_11:
.ab48	2a		rol a				rol a			;   shift remainder
.ab49	cd 00 03	cmp $0300			cmp base		;   will it fit?
.ab4c	90 03		bcc $ab51			bcc _27
.ab4e	ed 00 03	sbc $0300			sbc base
.ab51					_27:
.ab51	36 26		rol $26,x			rol DStack+2,x		;   shift ud
.ab53	36 27		rol $27,x			rol DStack+3,x
.ab55	36 24		rol $24,x			rol DStack+0,x
.ab57	36 25		rol $25,x			rol DStack+1,x
.ab59	88		dey				dey
.ab5a	d0 ec		bne $ab48			bne _11
.ab5c	c9 0a		cmp #$0a			cmp #9+1		; alternatively this could use s_abc_upper
.ab5e	90 02		bcc $ab62			bcc +
.ab60	69 06		adc #$06			adc #7-1
.ab62	69 30		adc #$30	+		adc #'0'
.ab64	d0 cb		bne $ab31			bne Hold_A
=38					CL	.var *-(WordListLink+wh_Xt)
=$ab66					en = *	; remember here
>ab3e	26					.byte CL	;wh_CodeLength
>ab66	23 53				L1:	.text "#S"	;  name of word as a string, ending at wh_NameLastChar
>ab68	02					.byte *-L1	;wh_NameLength	length of name
>ab69	bb aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab6b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab6c	10					.byte UF	;wh_Flags	dictionary flags
=43752					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab6d					Number_Sign_S:
.ab6d					_loop:
.ab6d	20 40 ab	jsr $ab40			jsr Number_sign	; convert a single number ("#")
.ab70	b5 24		lda $24,x			lda DStack+0,x	; stop when double-celled number in TOS is zero
.ab72	15 25		ora $25,x			ora DStack+1,x
.ab74	15 26		ora $26,x			ora DStack+2,x
.ab76	15 27		ora $27,x			ora DStack+3,x
.ab78	d0 f3		bne $ab6d			bne _loop
=13					CL	.var *-(WordListLink+wh_Xt)
=$ab7a					en = *	; remember here
>ab6b	0d					.byte CL	;wh_CodeLength
.ab7a	60		rts				rts
>ab7b	53 69 67 6e			L1:	.text "Sign"	;  name of word as a string, ending at wh_NameLastChar
>ab7f	04					.byte *-L1	;wh_NameLength	length of name
>ab80	e8 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab82	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab83	08					.byte NN	;wh_Flags	dictionary flags
=43775					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab84	20 40 b3	jsr $b340	Sign:		jsr PopYA
.ab87	98		tya				tya		; test MSB of TOS
.ab88					Sign_P:
.ab88	30 01		bmi $ab8b			bmi _minus
.ab8a	60		rts				rts
.ab8b	a9 2d		lda #$2d	_minus:		lda #'-'	; add minus sign
.ab8d	d0 a2		bne $ab31			bne hold_a
=11					CL	.var *-(WordListLink+wh_Xt)
=$ab8f					en = *	; remember here
>ab82	0b					.byte CL	;wh_CodeLength
>ab8f	43 6c 65 61 76 65		L1:	.text "Cleave"	;  name of word as a string, ending at wh_NameLastChar
>ab95	06					.byte *-L1	;wh_NameLength	length of name
>ab96	ff aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab98	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab99	18					.byte UF+NN	;wh_Flags	dictionary flags
=43797					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab9a					Cleave:
.ab9a	20 7f b3	jsr $b37f			jsr underflow_2
.ab9d	20 d8 c3	jsr $c3d8			jsr Minus_leading	; -LEADING ( addr u )
.aba0	20 1d c3	jsr $c31d			jsr Input_To_R	; save old imput state
.aba3	b5 24		lda $24,x			lda DStack+0,x	; u is new ciblen
.aba5	85 06		sta $06				sta ciblen
.aba7	b5 25		lda $25,x			lda DStack+1,x
.aba9	85 07		sta $07				sta ciblen+1
.abab	b5 26		lda $26,x			lda DStack+2,x	; addr is new cib
.abad	85 04		sta $04				sta cib
.abaf	b5 27		lda $27,x			lda DStack+3,x
.abb1	85 05		sta $05				sta cib+1
.abb3	a9 00		lda #$00			lda #0
.abb5	85 08		sta $08				sta toin	; >IN pointer is zero
.abb7	85 09		sta $09				sta toin+1
.abb9	20 e9 b9	jsr $b9e9			jsr parse_name	; ( addr u addr-s u-s )
.abbc	b5 24		lda $24,x			lda DStack+0,x
.abbe	15 25		ora $25,x			ora DStack+1,x
.abc0	f0 23		beq $abe5			beq _done
.abc2	38		sec				sec
.abc3	b5 28		lda $28,x			lda DStack+4,x	; LSB of original u
.abc5	f5 24		sbc $24,x			sbc DStack+0,x
.abc7	95 28		sta $28,x			sta DStack+4,x
.abc9	b5 29		lda $29,x			lda DStack+5,x	; MSB of original u
.abcb	f5 25		sbc $25,x			sbc DStack+1,x
.abcd	95 29		sta $29,x			sta DStack+5,x
.abcf	18		clc				clc
.abd0	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of original addr
.abd2	75 24		adc $24,x			adc DStack+0,x
.abd4	95 2a		sta $2a,x			sta DStack+6,x
.abd6	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of original addr
.abd8	75 25		adc $25,x			adc DStack+1,x
.abda	95 2b		sta $2b,x			sta DStack+7,x
.abdc	20 3d c4	jsr $c43d			jsr Two_swap		; ( addr-s u-s addr u )
.abdf	20 d8 c3	jsr $c3d8			jsr Minus_leading
.abe2	20 3d c4	jsr $c43d			jsr Two_swap		; ( addr u addr-s u-s )
.abe5					_done:
.abe5	20 3f c3	jsr $c33f			jsr R_To_Input
=78					CL	.var *-(WordListLink+wh_Xt)
=$abe8					en = *	; remember here
>ab98	4e					.byte CL	;wh_CodeLength
.abe8	60		rts				rts
>abe9	48 65 78 53 74 6f 72 65		L1:	.text "HexStore"	;  name of word as a string, ending at wh_NameLastChar
>abf1	08					.byte *-L1	;wh_NameLength	length of name
>abf2	15 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abf4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abf5	18					.byte UF+NN	;wh_Flags	dictionary flags
=43889					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abf6					Hexstore:
.abf6	20 84 b3	jsr $b384			jsr underflow_3
.abf9	20 6a ce	jsr $ce6a			jsr Dup		; Save copy of original address
.abfc	20 3e c5	jsr $c53e			jsr Two_to_r		; ( addr1 u1 ) ( R: addr2 addr2 )
.abff					_loop:
.abff	b5 24		lda $24,x			lda DStack+0,x
.ac01	15 25		ora $25,x			ora DStack+1,x
.ac03	f0 37		beq $ac3c			beq _done
.ac05	20 9a ab	jsr $ab9a			jsr Cleave		; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.ac08	20 3e c5	jsr $c53e			jsr Two_to_r
.ac0b	20 49 b7	jsr $b749			jsr Zero
.ac0e	20 49 b7	jsr $b749			jsr Zero
.ac11	20 19 c5	jsr $c519			jsr Two_r_from	; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.ac14	20 7a af	jsr $af7a			jsr To_Number	; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.ac17	b5 24		lda $24,x			lda DStack+0,x
.ac19	15 25		ora $25,x			ora DStack+1,x
.ac1b	d0 18		bne $ac35			bne _have_chars_left
.ac1d	20 2b c4	jsr $c42b			jsr Two_drop		; ( addr1 u1 n n ) ( R: addr2 addr2 )
.ac20	20 6e bf	jsr $bf6e			jsr D_To_S		; ( addr1 u1 n ) ( R: addr2 addr2 )
.ac23	20 2a ce	jsr $ce2a			jsr R_Fetch		; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.ac26	20 80 cc	jsr $cc80			jsr C_Store		; ( addr1 u1 ) ( R: addr2 addr2 )
.ac29	20 0e ce	jsr $ce0e			jsr R_From		; R>
.ac2c	20 60 c9	jsr $c960			jsr One_plus		; 1+
.ac2f	20 ef cd	jsr $cdef			jsr To_R		; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.ac32	4c ff ab	jmp $abff			jmp _loop
.ac35					_have_chars_left:
.ac35	8a		txa				txa
.ac36	18		clc				clc
.ac37	69 08		adc #$08			adc #8
.ac39	aa		tax				tax
.ac3a	d0 c3		bne $abff			bne _loop
.ac3c					_done:
.ac3c	e8		inx				inx
.ac3d	e8		inx				inx
.ac3e	e8		inx				inx
.ac3f	e8		inx				inx			; 2DROP
.ac40	20 19 c5	jsr $c519			jsr Two_r_from		; ( addr2+n addr2 )
.ac43	20 88 ce	jsr $ce88			jsr Swap
.ac46	4c cd ca	jmp $cacd			jmp Minus		; ( n )
=83					CL	.var *-(WordListLink+wh_Xt)
=$ac49					en = *	; remember here
>abf4	53					.byte CL	;wh_CodeLength
>ac49	57 69 74 68 69 6e		L1:	.text "Within"	;  name of word as a string, ending at wh_NameLastChar
>ac4f	06					.byte *-L1	;wh_NameLength	length of name
>ac50	71 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac52	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac53	18					.byte UF+NN	;wh_Flags	dictionary flags
=43983					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac54					Within:
.ac54	20 84 b3	jsr $b384			jsr underflow_3
.ac57	20 41 ce	jsr $ce41			jsr Over
.ac5a	20 cd ca	jsr $cacd			jsr Minus
.ac5d	20 ef cd	jsr $cdef			jsr To_R
.ac60	20 cd ca	jsr $cacd			jsr Minus
.ac63	20 0e ce	jsr $ce0e			jsr R_From
.ac66	4c 82 c7	jmp $c782			jmp U_Less_Than
=21					CL	.var *-(WordListLink+wh_Xt)
=$ac69					en = *	; remember here
>ac52	15					.byte CL	;wh_CodeLength
>ac69	5c				L1:	.text "\"	;  name of word as a string, ending at wh_NameLastChar
>ac6a	01					.byte *-L1	;wh_NameLength	length of name
>ac6b	cf ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac6d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac6e	0c					.byte IM+NN	;wh_Flags	dictionary flags
=44010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac6f					Backslash:
.ac6f	ad 0c 03	lda $030c			lda BlkV+0		; interpreting a block?
.ac72	0d 0d 03	ora $030d			ora BlkV+1
.ac75	f0 0e		beq $ac85			beq _not_block
.ac77	a5 08		lda $08		                lda toin+0		; Move toin to next multiple of 64.
.ac79	29 c0		and #$c0	                and #$C0        	;   Clear lower bits to move to beginning of line.
.ac7b	18		clc		                clc             	;   Add $40 (64 decimal) to move to next line.
.ac7c	69 40		adc #$40	                adc #$40
.ac7e	85 08		sta $08		                sta toin+0
.ac80	90 0b		bcc $ac8d	                bcc _rts
.ac82	e6 09		inc $09		                inc toin+1
.ac84	60		rts				rts
.ac85					_not_block:
.ac85	a5 06		lda $06		                lda ciblen+0
.ac87	85 08		sta $08		                sta toin+0
.ac89	a5 07		lda $07		                lda ciblen+1
.ac8b	85 09		sta $09		                sta toin+1
=30					CL	.var *-(WordListLink+wh_Xt)
=$ac8d					en = *	; remember here
>ac6d	1e					.byte CL	;wh_CodeLength
.ac8d	60		rts		_rts:		rts
>ac8e	4d 6f 76 65			L1:	.text "Move"	;  name of word as a string, ending at wh_NameLastChar
>ac92	04					.byte *-L1	;wh_NameLength	length of name
>ac93	ea ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac95	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac96	18					.byte NN+UF	;wh_Flags	dictionary flags
=44050					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac97					Move:
.ac97	b5 27		lda $27,x			lda DStack+3,x		; MSB of addr2
.ac99	d5 29		cmp $29,x			cmp DStack+5,x		; MSB of addr1
.ac9b	d0 04		bne $aca1			bne _ne
.ac9d	b5 26		lda $26,x			lda DStack+2,x		; LSB of addr2
.ac9f	d5 28		cmp $28,x			cmp DStack+4,x		; LSB of addr1
.aca1	90 5a		bcc $acfd	_ne:		bcc CMove
.aca3	d0 11		bne $acb6			bne CMove_up
.aca5	8a		txa		ThreeDrop:	txa		; drop three entries from Data Stack
.aca6	18		clc				clc
.aca7	69 06		adc #$06			adc #6
.aca9	aa		tax				tax
=19					CL	.var *-(WordListLink+wh_Xt)
=$acaa					en = *	; remember here
>ac95	13					.byte CL	;wh_CodeLength
.acaa	60		rts				rts
>acab	43 4d 6f 76 65 3e		L1:	.text "CMove>"	;  name of word as a string, ending at wh_NameLastChar
>acb1	06					.byte *-L1	;wh_NameLength	length of name
>acb2	12 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>acb4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acb5	18					.byte UF+NN	;wh_Flags	dictionary flags
=44081					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.acb6					CMove_up:
.acb6	20 84 b3	jsr $b384			jsr underflow_3
.acb9	b5 26		lda $26,x			lda DStack+2,x
.acbb	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.acbd	b5 27		lda $27,x			lda DStack+3,x
.acbf	18		clc				clc
.acc0	75 25		adc $25,x			adc DStack+1,x
.acc2	85 17		sta $17				sta tmp2+1	; point to last page of destination
.acc4	b5 28		lda $28,x			lda DStack+4,x
.acc6	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.acc8	b5 29		lda $29,x			lda DStack+5,x
.acca	18		clc				clc
.accb	75 25		adc $25,x			adc DStack+1,x
.accd	85 15		sta $15				sta tmp1+1	; point to last page of source
.accf	f6 25		inc $25,x			inc DStack+1,x	; allows us to use bne with dec DStack+1,x below
.acd1	b4 24		ldy $24,x			ldy DStack+0,x	; length of last page
.acd3	f0 10		beq $ace5			beq _nopartial
.acd5					_outerloop:
.acd5	88		dey				dey
.acd6	f0 07		beq $acdf			beq _finishpage
.acd8					_innerloop:
.acd8	b1 14		lda ($14),y			lda (tmp1),y
.acda	91 16		sta ($16),y			sta (tmp2),y
.acdc	88		dey				dey
.acdd	d0 f9		bne $acd8			bne _innerloop
.acdf					_finishpage:
.acdf	a0 00		ldy #$00			ldy #0
.ace1	b1 14		lda ($14),y			lda (tmp1),y	; handle y = 0 separately
.ace3	91 16		sta ($16),y			sta (tmp2),y
.ace5					_nopartial:
.ace5	c6 15		dec $15				dec tmp1+1	; back up to previous pages
.ace7	c6 17		dec $17				dec tmp2+1
.ace9	d6 25		dec $25,x			dec DStack+1,x
.aceb	d0 e8		bne $acd5			bne _outerloop
.aced					_done:
.aced	4c a5 ac	jmp $aca5			jmp ThreeDrop	; clear up the stack and leave
=58					CL	.var *-(WordListLink+wh_Xt)
=$acf0					en = *	; remember here
>acb4	3a					.byte CL	;wh_CodeLength
.acf0	4c 8e b3	jmp $b38e	Throw_Stack_14: jmp Throw_Stack
>acf3	43 4d 6f 76 65			L1:	.text "CMove"	;  name of word as a string, ending at wh_NameLastChar
>acf8	05					.byte *-L1	;wh_NameLength	length of name
>acf9	31 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>acfb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acfc	18					.byte UF+NN	;wh_Flags	dictionary flags
=44152					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.acfd					CMove:
.acfd	20 84 b3	jsr $b384			jsr underflow_3
.ad00	b5 26		lda $26,x			lda DStack+2,x
.ad02	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.ad04	b5 27		lda $27,x			lda DStack+3,x
.ad06	85 17		sta $17				sta tmp2+1
.ad08	b5 28		lda $28,x			lda DStack+4,x
.ad0a	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.ad0c	b5 29		lda $29,x			lda DStack+5,x
.ad0e	85 15		sta $15				sta tmp1+1
.ad10	a0 00		ldy #$00			ldy #0
.ad12	b5 25		lda $25,x			lda DStack+1,x	; number of whole pages to move
.ad14	f0 0f		beq $ad25			beq _dopartial
.ad16					_page:
.ad16	b1 14		lda ($14),y			lda (tmp1),y
.ad18	91 16		sta ($16),y			sta (tmp2),y
.ad1a	c8		iny				iny
.ad1b	d0 f9		bne $ad16			bne _page
.ad1d	e6 15		inc $15				inc tmp1+1
.ad1f	e6 17		inc $17				inc tmp2+1
.ad21	d6 25		dec $25,x			dec DStack+1,x
.ad23	d0 f1		bne $ad16			bne _page
.ad25					_dopartial:
.ad25	b5 24		lda $24,x			lda DStack+0,x	; length of last page
.ad27	f0 09		beq $ad32			beq _done
.ad29					_partial:
.ad29	b1 14		lda ($14),y			lda (tmp1),y
.ad2b	91 16		sta ($16),y			sta (tmp2),y
.ad2d	c8		iny				iny
.ad2e	d6 24		dec $24,x			dec DStack+0,x
.ad30	d0 f7		bne $ad29			bne _partial
.ad32	4c a5 ac	jmp $aca5	_done:		jmp ThreeDrop	; clear the stack
=56					CL	.var *-(WordListLink+wh_Xt)
=$ad35					en = *	; remember here
>acfb	38					.byte CL	;wh_CodeLength
>ad35	55 4d 2a			L1:	.text "UM*"	;  name of word as a string, ending at wh_NameLastChar
>ad38	03					.byte *-L1	;wh_NameLength	length of name
>ad39	78 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad3b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad3c	08					.byte NN	;wh_Flags	dictionary flags
=44216					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad3d					UM_Star:
.ad3d	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ad3f	b0 af		bcs $acf0		bcs Throw_Stack_14
.ad41	18		clc				clc		; tmp2= divsor-1
.ad42	b5 24		lda $24,x			lda DStack+0,x
.ad44	e9 00		sbc #$00			sbc #0
.ad46	85 16		sta $16				sta tmp2+0
.ad48	b5 25		lda $25,x			lda DStack+1,x
.ad4a	e9 00		sbc #$00			sbc #0
.ad4c	85 17		sta $17				sta tmp2+1
.ad4e	90 2e		bcc $ad7e			bcc _zero	; is divisor zero?
.ad50	a9 00		lda #$00			lda #0
.ad52	85 14		sta $14				sta tmp1
.ad54	86 18		stx $18				stx tmp3	; tested for exit from outer loop
.ad56	ca		dex				dex
.ad57	ca		dex				dex
.ad58					_outer_loop:
.ad58	a0 08		ldy #$08			ldy #8		; counter inner loop
.ad5a	56 28		lsr $28,x			lsr DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.ad5c					_inner_loop:
.ad5c	90 0c		bcc $ad6a			bcc _no_add
.ad5e	85 15		sta $15				sta tmp1+1	; save time, don't CLC
.ad60	a5 14		lda $14				lda tmp1
.ad62	65 16		adc $16				adc tmp2
.ad64	85 14		sta $14				sta tmp1
.ad66	a5 15		lda $15				lda tmp1+1
.ad68	65 17		adc $17				adc tmp2+1
.ad6a					_no_add:
.ad6a	6a		ror a				ror
.ad6b	66 14		ror $14				ror tmp1
.ad6d	76 28		ror $28,x			ror DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.ad6f	88		dey				dey
.ad70	d0 ea		bne $ad5c			bne _inner_loop ; go back for one more shift?
.ad72	e8		inx				inx
.ad73	e4 18		cpx $18				cpx tmp3
.ad75	d0 e1		bne $ad58			bne _outer_loop ; go back for eight more shifts?
.ad77	95 25		sta $25,x			sta DStack+1,x
.ad79	a5 14		lda $14				lda tmp1
.ad7b	95 24		sta $24,x			sta DStack+0,x
.ad7d	60		rts				rts
.ad7e	a9 00		lda #$00	_zero:		lda #0
.ad80	95 26		sta $26,x			sta DStack+2,x
.ad82	95 27		sta $27,x			sta DStack+3,x
.ad84	60		rts				rts
=72					CL	.var *-(WordListLink+wh_Xt)
=$ad85					en = *	; remember here
>ad3b	48					.byte CL	;wh_CodeLength
>ad85	4d 2a				L1:	.text "M*"	;  name of word as a string, ending at wh_NameLastChar
>ad87	02					.byte *-L1	;wh_NameLength	length of name
>ad88	b8 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad8a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad8b	08					.byte NN	;wh_Flags	dictionary flags
=44295					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad8c					M_Star:
.ad8c	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ad8e	b0 6d		bcs $adfd		bcs Throw_Stack_15
.ad90	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.ad92	55 27		eor $27,x			eor DStack+3,x	; MSB of n2
.ad94	08		php				php
.ad95	20 9d c5	jsr $c59d			jsr Abs
.ad98	20 88 ce	jsr $ce88			jsr Swap
.ad9b	20 9d c5	jsr $c59d			jsr Abs
.ad9e	20 3d ad	jsr $ad3d			jsr UM_Star		; ( d )
.ada1	28		plp				plp			; handle the sign
.ada2	10 03		bpl $ada7			bpl +
.ada4	4c b5 c5	jmp $c5b5			jmp DNegate
.ada7					+
=27					CL	.var *-(WordListLink+wh_Xt)
=$ada7					en = *	; remember here
>ad8a	1b					.byte CL	;wh_CodeLength
.ada7	60		rts				rts
>ada8	2a				L1:	.text "*"	;  name of word as a string, ending at wh_NameLastChar
>ada9	01					.byte *-L1	;wh_NameLength	length of name
>adaa	07 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>adac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>adad	00					.byte 0	;wh_Flags	dictionary flags
=44329					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.adae					Star:
.adae	20 3d ad	jsr $ad3d			jsr UM_Star
.adb1	e8		inx				inx		; UD>U	drop hi cell
.adb2	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$adb3					en = *	; remember here
>adac	05					.byte CL	;wh_CodeLength
.adb3	60		rts				rts
>adb4	55 4d 2f 4d 6f 64		L1:	.text "UM/Mod"	;  name of word as a string, ending at wh_NameLastChar
>adba	06					.byte *-L1	;wh_NameLength	length of name
>adbb	29 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>adbd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>adbe	08					.byte NN	;wh_Flags	dictionary flags
=44346					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.adbf					UM_Slash_Mod:
.adbf	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.adc1	b0 3a		bcs $adfd		bcs Throw_Stack_15
.adc3	b5 24		lda $24,x			lda DStack+0,x		; catch division by zero
.adc5	15 25		ora $25,x			ora DStack+1,x
.adc7	f0 2f		beq $adf8			beq _DivByZero
.adc9	a0 10		ldy #$10			ldy #16			; for 16 bits
.adcb					_loop:
.adcb	36 28		rol $28,x			rol DStack+4,x		;   rotate low cell of dividend one bit left
.adcd	36 29		rol $29,x			rol DStack+5,x
.adcf	36 26		rol $26,x			rol DStack+2,x		;   rotate high cell of dividend one bit left
.add1	36 27		rol $27,x			rol DStack+3,x
.add3	b0 0a		bcs $addf			bcs _subtract		;   overflow?
.add5	b5 26		lda $26,x			lda DStack+2,x		;   dividend.hi >= divisor?
.add7	d5 24		cmp $24,x			cmp DStack+0,x
.add9	b5 27		lda $27,x			lda DStack+3,x
.addb	f5 25		sbc $25,x			sbc DStack+1,x
.addd	90 0d		bcc $adec			bcc _next
.addf	b5 26		lda $26,x	_subtract:	lda DStack+2,x		;   dividend.hi -= divisor
.ade1	f5 24		sbc $24,x			sbc DStack+0,x
.ade3	95 26		sta $26,x			sta DStack+2,x
.ade5	b5 27		lda $27,x			lda DStack+3,x
.ade7	f5 25		sbc $25,x			sbc DStack+1,x
.ade9	95 27		sta $27,x			sta DStack+3,x
.adeb	38		sec				sec			;   it always fits
.adec	88		dey		_next:		dey			;  next
.aded	d0 dc		bne $adcb			bne _loop
.adef	36 28		rol $28,x			rol DStack+4,x		; finish rotating quotient bit in
.adf1	36 29		rol $29,x			rol DStack+5,x
.adf3	e8		inx				inx			; drop divisor
.adf4	e8		inx				inx
.adf5	4c 88 ce	jmp $ce88			jmp Swap
.adf8	a9 f6		lda #$f6	_DivByZero:	lda #$100+err_DivideBy0
.adfa	4c c9 b3	jmp $b3c9			jmp ThrowA
=62					CL	.var *-(WordListLink+wh_Xt)
=$adfd					en = *	; remember here
>adbd	3e					.byte CL	;wh_CodeLength
.adfd	4c 8e b3	jmp $b38e	Throw_Stack_15: jmp Throw_Stack
>ae00	53 4d 2f 52 65 6d		L1:	.text "SM/Rem"	;  name of word as a string, ending at wh_NameLastChar
>ae06	06					.byte *-L1	;wh_NameLength	length of name
>ae07	3a ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae09	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae0a	08					.byte NN	;wh_Flags	dictionary flags
=44422					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae0b					SM_Slash_Rem:
.ae0b	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ae0d	b0 ee		bcs $adfd		bcs Throw_Stack_15
.ae0f	b5 27		lda $27,x			lda DStack+3,x
.ae11	08		php				php
.ae12	55 25		eor $25,x			eor DStack+1,x
.ae14	08		php				php
.ae15	20 9d c5	jsr $c59d			jsr Abs
.ae18	e8		inx				inx		; pretend we pushed n1 to R
.ae19	e8		inx				inx
.ae1a	20 d2 c5	jsr $c5d2			jsr DAbs
.ae1d	ca		dex				dex
.ae1e	ca		dex				dex
.ae1f	20 bf ad	jsr $adbf			jsr UM_Slash_Mod	; UM/MOD
.ae22	28		plp				plp
.ae23	10 03		bpl $ae28			bpl +
.ae25	20 84 c5	jsr $c584			jsr Negate
.ae28					+
.ae28	28		plp				plp
.ae29	10 07		bpl $ae32			bpl _done
.ae2b	e8		inx				inx		; pretend we pushed quotient to R
.ae2c	e8		inx				inx
.ae2d	20 84 c5	jsr $c584			jsr Negate
.ae30	ca		dex				dex
.ae31	ca		dex				dex
.ae32					_done:
=39					CL	.var *-(WordListLink+wh_Xt)
=$ae32					en = *	; remember here
>ae09	27					.byte CL	;wh_CodeLength
.ae32	60		rts				rts
>ae33	46 4d 2f 4d 6f 64		L1:	.text "FM/Mod"	;  name of word as a string, ending at wh_NameLastChar
>ae39	06					.byte *-L1	;wh_NameLength	length of name
>ae3a	86 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae3c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae3d	08					.byte NN	;wh_Flags	dictionary flags
=44473					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae3e					FM_Slash_Mod:
.ae3e	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ae40	b0 bb		bcs $adfd		bcs Throw_Stack_15
.ae42	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.ae44	08		php				php		;  save sign
.ae45	10 0a		bpl $ae51			bpl +
.ae47	20 84 c5	jsr $c584			jsr Negate	; NEGATE
.ae4a	e8		inx				inx
.ae4b	e8		inx				inx
.ae4c	20 b5 c5	jsr $c5b5			jsr DNegate	; DNEGATE
.ae4f	ca		dex				dex
.ae50	ca		dex				dex
.ae51					+
.ae51	b5 27		lda $27,x			lda DStack+3,x	; MSB of high word of d
.ae53	10 0d		bpl $ae62			bpl +
.ae55	18		clc				clc
.ae56	b5 24		lda $24,x			lda DStack+0,x	; LSB of n1
.ae58	75 26		adc $26,x			adc DStack+2,x	; LSB of dh
.ae5a	95 26		sta $26,x			sta DStack+2,x
.ae5c	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.ae5e	75 27		adc $27,x			adc DStack+3,x	; MSB of dh
.ae60	95 27		sta $27,x			sta DStack+3,x
.ae62					+
.ae62	20 bf ad	jsr $adbf			jsr UM_Slash_Mod	; ( d n1 -- rem n2 )
.ae65	28		plp				plp
.ae66	10 07		bpl $ae6f			bpl +
.ae68	e8		inx				inx		; pretend that we SWAP
.ae69	e8		inx				inx
.ae6a	20 84 c5	jsr $c584			jsr Negate
.ae6d	ca		dex				dex
.ae6e	ca		dex				dex
.ae6f					+
=49					CL	.var *-(WordListLink+wh_Xt)
=$ae6f					en = *	; remember here
>ae3c	31					.byte CL	;wh_CodeLength
.ae6f	60		rts				rts
>ae70	2f 4d 6f 64			L1:	.text "/Mod"	;  name of word as a string, ending at wh_NameLastChar
>ae74	04					.byte *-L1	;wh_NameLength	length of name
>ae75	b9 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae77	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae78	08					.byte NN	;wh_Flags	dictionary flags
=44532					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae79	20 6a ce	jsr $ce6a	Slash_Mod:	jsr Dup			; ( n1 n_div n_div )
.ae7c	a0 00		ldy #$00			ldy #0			; sign extend n1
.ae7e	b5 29		lda $29,x			lda DStack+5,x
.ae80	10 01		bpl $ae83			bpl +
.ae82	88		dey				dey
.ae83	94 26		sty $26,x	+		sty DStack+2,x
.ae85	94 27		sty $27,x			sty DStack+3,x		; ( d1 n_div )
.ae87	4c 0b ae	jmp $ae0b			jmp SM_Slash_Rem	; SM/REM
=17					CL	.var *-(WordListLink+wh_Xt)
=$ae8a					en = *	; remember here
>ae77	11					.byte CL	;wh_CodeLength
>ae8a	2f				L1:	.text "/"	;  name of word as a string, ending at wh_NameLastChar
>ae8b	01					.byte *-L1	;wh_NameLength	length of name
>ae8c	f4 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae8e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae8f	08					.byte NN	;wh_Flags	dictionary flags
=44555					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae90	20 79 ae	jsr $ae79	Slash:		jsr Slash_Mod
.ae93	4c 85 c8	jmp $c885			jmp Nip		; Nip remainder
=6					CL	.var *-(WordListLink+wh_Xt)
=$ae96					en = *	; remember here
>ae8e	06					.byte CL	;wh_CodeLength
>ae96	4d 6f 64			L1:	.text "Mod"	;  name of word as a string, ending at wh_NameLastChar
>ae99	03					.byte *-L1	;wh_NameLength	length of name
>ae9a	0b ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae9c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae9d	00					.byte 0	;wh_Flags	dictionary flags
=44569					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae9e	20 79 ae	jsr $ae79	Mod:		jsr Slash_Mod
.aea1	e8		inx				inx		; Drop quotient
.aea2	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$aea3					en = *	; remember here
>ae9c	05					.byte CL	;wh_CodeLength
.aea3	60		rts				rts
>aea4	2a 2f 4d 6f 64			L1:	.text "*/Mod"	;  name of word as a string, ending at wh_NameLastChar
>aea9	05					.byte *-L1	;wh_NameLength	length of name
>aeaa	19 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aeac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aead	18					.byte UF+NN	;wh_Flags	dictionary flags
=44585					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aeae					Star_Slash_Mod:
.aeae	20 84 b3	jsr $b384			jsr underflow_3
.aeb1	20 ef cd	jsr $cdef			jsr To_R
.aeb4	20 8c ad	jsr $ad8c			jsr M_Star
.aeb7	20 0e ce	jsr $ce0e			jsr R_From
.aeba	4c 0b ae	jmp $ae0b			jmp SM_Slash_Rem
=15					CL	.var *-(WordListLink+wh_Xt)
=$aebd					en = *	; remember here
>aeac	0f					.byte CL	;wh_CodeLength
>aebd	2a 2f				L1:	.text "*/"	;  name of word as a string, ending at wh_NameLastChar
>aebf	02					.byte *-L1	;wh_NameLength	length of name
>aec0	29 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aec2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aec3	08					.byte NN	;wh_Flags	dictionary flags
=44607					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aec4					Star_Slash:
.aec4	20 ae ae	jsr $aeae			jsr Star_Slash_Mod
.aec7	4c 85 c8	jmp $c885			jmp Nip			; mod
=6					CL	.var *-(WordListLink+wh_Xt)
=$aeca					en = *	; remember here
>aec2	06					.byte CL	;wh_CodeLength
>aeca	4d 2a 2f			L1:	.text "M*/"	;  name of word as a string, ending at wh_NameLastChar
>aecd	03					.byte *-L1	;wh_NameLength	length of name
>aece	3f ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aed0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aed1	08					.byte NN	;wh_Flags	dictionary flags
=44621					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aed2					m_star_slash:
.aed2	20 89 b3	jsr $b389	                jsr underflow_4
.aed5	b5 24		lda $24,x			lda DStack+0,x		; calc result sign
.aed7	55 26		eor $26,x			eor DStack+2,x
.aed9	55 28		eor $28,x			eor DStack+4,x
.aedb	08		php				php
.aedc	20 9d c5	jsr $c59d	                jsr Abs			; Abs
.aedf	20 ef cd	jsr $cdef	                jsr To_R		; >R		( d1 n1 ) ( R: sign abs(n2) )
.aee2	20 9d c5	jsr $c59d	                jsr Abs			; Abs
.aee5	20 ef cd	jsr $cdef	                jsr To_R		; >R		( d1 ) ( R: sign abs(n2) abs(n1) )
.aee8	20 d2 c5	jsr $c5d2	                jsr DAbs		; DAbs		( abs(d1) ) ( R: sign abs(n2) abs(n1) )
.aeeb	20 88 ce	jsr $ce88	                jsr Swap		; Swap
.aeee	20 2a ce	jsr $ce2a	                jsr R_Fetch		; R@
.aef1	20 3d ad	jsr $ad3d	                jsr UM_Star		; UM*
.aef4	20 6e cd	jsr $cd6e	                jsr Rot			; Rot
.aef7	20 0e ce	jsr $ce0e	                jsr R_From		; R>
.aefa	20 3d ad	jsr $ad3d	                jsr UM_Star		; UM*
.aefd	20 6e cd	jsr $cd6e	                jsr Rot			; Rot
.af00	20 79 c9	jsr $c979	                jsr UMPlus		; 0 D+
.af03	20 2a ce	jsr $ce2a	                jsr R_Fetch		; R@
.af06	20 bf ad	jsr $adbf	                jsr UM_Slash_Mod	; UM/Mod
.af09	20 94 cd	jsr $cd94	                jsr Not_Rot		; Rot Rot
.af0c	20 0e ce	jsr $ce0e	                jsr R_From		; R>
.af0f	20 bf ad	jsr $adbf	                jsr UM_Slash_Mod	; UM/Mod
.af12	20 85 c8	jsr $c885	                jsr Nip			; Swap Drop
.af15	20 88 ce	jsr $ce88	                jsr Swap		; Swap
.af18	28		plp				plp
.af19	10 03		bpl $af1e			bpl _rts		; ... 0< if ...
.af1b	4c b5 c5	jmp $c5b5	                jmp DNegate
.af1e	60		rts		_rts:		rts
=77					CL	.var *-(WordListLink+wh_Xt)
=$af1f					en = *	; remember here
>aed0	4d					.byte CL	;wh_CodeLength
>af1f	45 76 61 6c 75 61 74 65		L1:	.text "Evaluate"	;  name of word as a string, ending at wh_NameLastChar
>af27	08					.byte *-L1	;wh_NameLength	length of name
>af28	4d ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af2a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af2b	08					.byte NN	;wh_Flags	dictionary flags
=44711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af2c					Evaluate:
.af2c	18		clc				clc			; Clear the flag to zero BLK.
.af2d	90 01		bcc $af30			bcc evaluate_got_work
.af2f					load_evaluate:
.af2f	38		sec				sec			; Set a flag to not zero BLK
.af30					evaluate_got_work:
.af30	ad 0d 03	lda $030d			lda BlkV+1	; Save the current value of BLK on the return stack.
.af33	48		pha				pha
.af34	ad 0c 03	lda $030c			lda BlkV+0
.af37	48		pha				pha
.af38	b0 08		bcs $af42			bcs +		; See if we should zero BLK.
.af3a	a9 00		lda #$00			lda #0		; Set BLK to zero.
.af3c	8d 0c 03	sta $030c			sta BlkV+0
.af3f	8d 0d 03	sta $030d			sta BlkV+1
.af42					+
.af42	20 1d c3	jsr $c31d			jsr Input_To_R	; Save the input state to the Return Stack
.af45	a9 ff		lda #$ff			lda #$ff	; set SOURCE-ID to -1
.af47	85 02		sta $02				sta insrc+0
.af49	85 03		sta $03				sta insrc+1
.af4b	a9 00		lda #$00			lda #0		; set >IN to zero
.af4d	85 08		sta $08				sta toin+0
.af4f	85 09		sta $09				sta toin+1
.af51	20 40 b3	jsr $b340			jsr PopYA	; pop u
.af54	85 06		sta $06				sta ciblen+0
.af56	84 07		sty $07				sty ciblen+1
.af58	20 40 b3	jsr $b340			jsr PopYA	; pop addr
.af5b	85 04		sta $04				sta cib+0
.af5d	84 05		sty $05				sty cib+1
.af5f	20 81 b4	jsr $b481			jsr interpret	; ( -- )
.af62	20 3f c3	jsr $c33f			jsr R_To_Input	; restore variables
.af65	68		pla				pla		; Restore BLK from the return stack.
.af66	8d 0c 03	sta $030c			sta BlkV+0
.af69	68		pla				pla
.af6a	8d 0d 03	sta $030d			sta BlkV+1
=65					CL	.var *-(WordListLink+wh_Xt)
=$af6d					en = *	; remember here
>af2a	41					.byte CL	;wh_CodeLength
.af6d	60		rts				rts
>af6e	3e 4e 75 6d 62 65 72		L1:	.text ">Number"	;  name of word as a string, ending at wh_NameLastChar
>af75	07					.byte *-L1	;wh_NameLength	length of name
>af76	a7 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af78	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af79	18					.byte UF+NN	;wh_Flags	dictionary flags
=44789					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af7a					To_Number:
.af7a	20 89 b3	jsr $b389			jsr underflow_4
.af7d	b5 24		lda $24,x			lda DStack+0,x		; no chars left?
.af7f	f0 72		beq $aff3			beq _done
.af81					_Char_loop:
.af81	a1 26		lda ($26,x)			lda (DStack+2,x)		; Get next character
.af83	c9 30		cmp #$30			cmp #'0'		; convert to value (Digit_Question)
.af85	90 6c		bcc $aff3			bcc _done
.af87	c9 3a		cmp #$3a			cmp #'9'+1
.af89	90 08		bcc $af93			bcc _digit
.af8b	29 df		and #$df			and #$df		;   ASCII uppercase
.af8d	c9 41		cmp #$41			cmp #'A'
.af8f	90 62		bcc $aff3			bcc _done
.af91	e9 07		sbc #$07			sbc #7 ;'A'-'0'-10	;   to make 'A'=10 below
.af93	38		sec		_digit:		sec
.af94	e9 30		sbc #$30			sbc #'0'
.af96	cd 00 03	cmp $0300			cmp base		; must be < base
.af99	b0 58		bcs $aff3			bcs _done
.af9b	48		pha				pha			; Save char value
.af9c	20 5f c4	jsr $c45f			jsr Two_Over		;   copy ud to work (multiplicand)
.af9f	a9 00		lda #$00			lda #0			;   zero ud (product)
.afa1	95 2c		sta $2c,x			sta DStack+8,x
.afa3	95 2d		sta $2d,x			sta DStack+9,x
.afa5	95 2e		sta $2e,x			sta DStack+10,x
.afa7	95 2f		sta $2f,x			sta DStack+11,x
.afa9	ad 00 03	lda $0300			lda base		;   get multiplier
.afac	d0 23		bne $afd1			bne _Mul_Test
.afae	48		pha		_Mul_Add:	pha			;   save multiplier
.afaf	18		clc				clc			;   ud += work
.afb0	b5 26		lda $26,x			lda DStack+2,x
.afb2	75 2e		adc $2e,x			adc DStack+10,x
.afb4	95 2e		sta $2e,x			sta DStack+10,x
.afb6	b5 27		lda $27,x			lda DStack+3,x
.afb8	75 2f		adc $2f,x			adc DStack+11,x
.afba	95 2f		sta $2f,x			sta DStack+11,x
.afbc	b5 24		lda $24,x			lda DStack+0,x
.afbe	75 2c		adc $2c,x			adc DStack+8,x
.afc0	95 2c		sta $2c,x			sta DStack+8,x
.afc2	b5 25		lda $25,x			lda DStack+1,x
.afc4	75 2d		adc $2d,x			adc DStack+9,x
.afc6	95 2d		sta $2d,x			sta DStack+9,x
.afc8	68		pla				pla			;   restore multiplier
.afc9	16 26		asl $26,x	_Mul_Shift:	asl DStack+2,x		;   work <<= 1
.afcb	36 27		rol $27,x			rol DStack+3,x
.afcd	36 24		rol $24,x			rol DStack+0,x
.afcf	36 25		rol $25,x			rol DStack+1,x
.afd1	4a		lsr a		_Mul_Test:	lsr a			;   shift multiplier
.afd2	b0 da		bcs $afae			bcs _Mul_Add
.afd4	d0 f3		bne $afc9			bne _Mul_Shift
.afd6	e8		inx				inx			;   2Drop work
.afd7	e8		inx				inx
.afd8	e8		inx				inx
.afd9	e8		inx				inx
.afda	68		pla				pla			; recover value
.afdb	18		clc				clc			; add to ud
.afdc	75 2a		adc $2a,x			adc DStack+6,x
.afde	95 2a		sta $2a,x			sta DStack+6,x
.afe0	90 0a		bcc $afec			bcc +
.afe2	f6 2b		inc $2b,x			inc DStack+7,x
.afe4	d0 06		bne $afec			bne +
.afe6	f6 28		inc $28,x			inc DStack+4,x
.afe8	d0 02		bne $afec			bne +
.afea	f6 29		inc $29,x			inc DStack+5,x
.afec					+
.afec	20 6a c9	jsr $c96a			jsr NOS_One_Plus	; consume the char
.afef	d6 24		dec $24,x			dec DStack+0,x
.aff1	d0 8e		bne $af81			bne _Char_loop
.aff3					_done:
=121					CL	.var *-(WordListLink+wh_Xt)
=$aff3					en = *	; remember here
>af78	79					.byte CL	;wh_CodeLength
.aff3	60		rts				rts
>aff4	4e 75 6d 62 65 72		L1:	.text "Number"	;  name of word as a string, ending at wh_NameLastChar
>affa	06					.byte *-L1	;wh_NameLength	length of name
>affb	f5 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>affd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>affe	18					.byte UF+NN	;wh_Flags	dictionary flags
=44922					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.afff					Number:
.afff	20 7f b3	jsr $b37f			jsr underflow_2
.b002	a9 00		lda #$00			lda #0
.b004	85 1a		sta $1a				sta tmp4+0	; flag for double
.b006	85 1b		sta $1b				sta tmp4+1	; flag for minus
.b008	ad 00 03	lda $0300			lda base
.b00b	48		pha				pha
.b00c	20 c4 cb	jsr $cbc4			jsr Two_dup		; ( addr u addr u )
.b00f	a1 26		lda ($26,x)			lda (DStack+2,x)	; get 1st char
.b011	20 d3 b0	jsr $b0d3			jsr _MinusCheck		; a minus sign?
.b014	a0 0a		ldy #$0a			ldy #10			; decimal?
.b016	c9 23		cmp #$23			cmp #'#'
.b018	f0 35		beq $b04f			beq _base_changed
.b01a	a0 10		ldy #$10			ldy #16			; hex?
.b01c	c9 24		cmp #$24			cmp #'$'
.b01e	f0 2f		beq $b04f			beq _base_changed
.b020	a0 02		ldy #$02			ldy #2			; binary?
.b022	c9 25		cmp #$25			cmp #'%'
.b024	f0 29		beq $b04f			beq _base_changed
.b026	c9 27		cmp #$27			cmp #$27		; ASCII for "'"
.b028	d0 2f		bne $b059			bne _check_dot
.b02a	b5 24		lda $24,x			lda DStack+0,x	; length=3 ?
.b02c	c9 03		cmp #$03			cmp #3
.b02e	d0 1c		bne $b04c			bne _not_a_char
.b030	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b032	85 1c		sta $1c				sta tmp5
.b034	b5 27		lda $27,x			lda DStack+3,x
.b036	85 1d		sta $1d				sta tmp5+1
.b038	a0 02		ldy #$02			ldy #2
.b03a	b1 1c		lda ($1c),y			lda (tmp5),y
.b03c	c9 27		cmp #$27			cmp #$27	; ASCII for "'"
.b03e	d0 0c		bne $b04c			bne _not_a_char
.b040	88		dey				dey		; The char we want is between the single quotes.
.b041	b1 1c		lda ($1c),y			lda (tmp5),y
.b043	95 26		sta $26,x			sta DStack+2,x
.b045	a9 00		lda #$00			lda #0
.b047	95 27		sta $27,x			sta DStack+3,x
.b049	4c a8 b0	jmp $b0a8			jmp _drop_original_string ; Single flag will drop the TOS for us.
.b04c					_not_a_char:
.b04c	4c 85 b0	jmp $b085			jmp _number_error
.b04f					_base_changed:
.b04f	8c 00 03	sty $0300			sty base	; Switch to the new base
.b052	20 6a c9	jsr $c96a			jsr NOS_One_Plus ; start one character later
.b055	d6 24		dec $24,x			dec DStack+0,x	; decrease string length by one
.b057	a1 26		lda ($26,x)			lda (DStack+2,x) ; Load the first char again
.b059					_check_dot:
.b059	20 d3 b0	jsr $b0d3			jsr _MinusCheck
.b05c	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b05e	85 1c		sta $1c				sta tmp5
.b060	b5 27		lda $27,x			lda DStack+3,x
.b062	85 1d		sta $1d				sta tmp5+1
.b064	b4 24		ldy $24,x			ldy DStack+0,x	; Y now points to the first character after the string,
.b066	88		dey				dey		; but we need the last character
.b067	b1 1c		lda ($1c),y			lda (tmp5),y
.b069	c9 2e		cmp #$2e			cmp #'.'
.b06b	d0 04		bne $b071			bne _main
.b06d	c6 1a		dec $1a				dec tmp4	; Flag the fact
.b06f	d6 24		dec $24,x			dec DStack+0,x	; reduce string length by one
.b071					_main:
.b071	20 c4 cb	jsr $cbc4			jsr Two_Dup
.b074	a9 00		lda #$00			lda #0
.b076	95 28		sta $28,x			sta DStack+4,x	; clear ud
.b078	95 29		sta $29,x			sta DStack+5,x
.b07a	95 2a		sta $2a,x			sta DStack+6,x
.b07c	95 2b		sta $2b,x			sta DStack+7,x
.b07e	20 7a af	jsr $af7a			jsr To_Number	; ( ud addr u -- ud addr u )
.b081	b5 24		lda $24,x			lda DStack+0,x
.b083	f0 1f		beq $b0a4			beq _all_converted
.b085					_number_error:
.b085	20 2b c4	jsr $c42b			jsr Two_drop	; >NUMBER modified addr u
.b088	20 2b c4	jsr $c42b			jsr Two_drop	; ud   (partially converted number)
.b08b	a9 3e		lda #$3e			lda #'>'	; print the unknown
.b08d	20 d8 cc	jsr $ccd8			jsr Emit_A	; word using the original addr u we saved at the beginning.
.b090	20 f2 cc	jsr $ccf2			jsr Type
.b093	a9 3c		lda #$3c			lda #'<'
.b095	20 d8 cc	jsr $ccd8			jsr Emit_A
.b098	20 e5 cc	jsr $cce5			jsr Space
.b09b	68		pla				pla		; restore base
.b09c	8d 00 03	sta $0300			sta base
.b09f	a9 f3		lda #$f3			lda #$100+err_UndefinedWord
.b0a1	4c c9 b3	jmp $b3c9			jmp ThrowA
.b0a4					_all_converted:
.b0a4	e8		inx				inx		; Drop the current addr u
.b0a5	e8		inx				inx
.b0a6	e8		inx				inx
.b0a7	e8		inx				inx
.b0a8					_drop_original_string:
.b0a8	20 37 bf	jsr $bf37			jsr TwoNip	 ; Drop the original addr u
.b0ab	a5 1a		lda $1a				lda tmp4	; flag for double
.b0ad	f0 10		beq $b0bf			beq _single
.b0af	a9 20		lda #$20			lda #%00100000
.b0b1	05 0c		ora $0c				ora status
.b0b3	85 0c		sta $0c				sta status
.b0b5	a5 1b		lda $1b				lda tmp4+1
.b0b7	f0 15		beq $b0ce			beq _done	; no minus, all done
.b0b9	20 b5 c5	jsr $c5b5			jsr DNegate
.b0bc	4c ce b0	jmp $b0ce			jmp _done
.b0bf					_single:
.b0bf	e8		inx				inx		; convert ud to u
.b0c0	e8		inx				inx
.b0c1	a9 df		lda #$df			lda #$ff-%00100000
.b0c3	25 0c		and $0c				and status
.b0c5	85 0c		sta $0c				sta status
.b0c7	a5 1b		lda $1b				lda tmp4+1
.b0c9	f0 03		beq $b0ce			beq _done	; no minus, all done
.b0cb	20 84 c5	jsr $c584			jsr Negate
.b0ce					_done:
.b0ce	68		pla				pla
.b0cf	8d 00 03	sta $0300			sta base
=211					CL	.var *-(WordListLink+wh_Xt)
=$b0d2					en = *	; remember here
>affd	d3					.byte CL	;wh_CodeLength
.b0d2	60		rts				rts
.b0d3					_MinusCheck:
.b0d3	c9 2d		cmp #$2d			cmp #'-'		; a minus sign?
.b0d5	d0 09		bne $b0e0			bne +
.b0d7	c6 1b		dec $1b				dec tmp4+1		; set flag
.b0d9	20 6a c9	jsr $c96a			jsr NOS_One_Plus	; start one character later
.b0dc	d6 24		dec $24,x			dec DStack+0,x		; decrease string length by one
.b0de	a1 26		lda ($26,x)			lda (DStack+2,x)	; get next char
.b0e0	60		rts		+		rts
>b0e1	48 65 78			L1:	.text "Hex"	;  name of word as a string, ending at wh_NameLastChar
>b0e4	03					.byte *-L1	;wh_NameLength	length of name
>b0e5	7a af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b0e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b0e8	08					.byte NN	;wh_Flags	dictionary flags
=45156					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b0e9	a9 10		lda #$10	Hex:		lda #16
.b0eb	d0 0e		bne $b0fb			bne decimal_a
=4					CL	.var *-(WordListLink+wh_Xt)
=$b0ed					en = *	; remember here
>b0e7	04					.byte CL	;wh_CodeLength
>b0ed	44 65 63 69 6d 61 6c		L1:	.text "Decimal"	;  name of word as a string, ending at wh_NameLastChar
>b0f4	07					.byte *-L1	;wh_NameLength	length of name
>b0f5	64 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b0f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b0f8	00					.byte 0	;wh_Flags	dictionary flags
=45172					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b0f9	a9 0a		lda #$0a	Decimal:	lda #10
.b0fb	8d 00 03	sta $0300	decimal_a:	sta base+0
.b0fe	a9 00		lda #$00			lda #0
.b100	8d 01 03	sta $0301			sta base+1		; paranoid
=10					CL	.var *-(WordListLink+wh_Xt)
=$b103					en = *	; remember here
>b0f7	0a					.byte CL	;wh_CodeLength
.b103	60		rts				rts
>b104	43 6f 75 6e 74			L1:	.text "Count"	;  name of word as a string, ending at wh_NameLastChar
>b109	05					.byte *-L1	;wh_NameLength	length of name
>b10a	74 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b10c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b10d	18					.byte UF+NN	;wh_Flags	dictionary flags
=45193					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b10e					Count:
.b10e	20 6a b3	jsr $b36a			jsr underflow_1
.b111	a1 24		lda ($24,x)			lda (DStack+0,x)	; A= number of characters
.b113	f6 24		inc $24,x			inc DStack+0,x		; move start address up by one
.b115	d0 02		bne $b119			bne +
.b117	f6 25		inc $25,x			inc DStack+1,x
.b119					+
.b119	4c 3a b7	jmp $b73a			jmp PushZA		; push number of characters, return
=14					CL	.var *-(WordListLink+wh_Xt)
=$b11c					en = *	; remember here
>b10c	0e					.byte CL	;wh_CodeLength
>0743					DoLeave  .word ?	; head of leave addr patch chain
>0745					DoStkIndex: .byte ?
>0746					DoIndexL: .fill DoStkDim
>074e					DoIndexH: .fill DoStkDim
>0756					DoFufaL:  .fill DoStkDim
>075e					DoFufaH:  .fill DoStkDim
>b11c	3f 44 6f			L1:	.text "?Do"	;  name of word as a string, ending at wh_NameLastChar
>b11f	03					.byte *-L1	;wh_NameLength	length of name
>b120	89 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b122	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b123	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45215					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b124					Question_Do:
.b124	20 7f b2	jsr $b27f			jsr Do_Leave_Init
.b127	a9 3b		lda #$3b			lda #<_runtime
.b129	a0 b1		ldy #$b1			ldy #>_runtime
.b12b	20 48 cc	jsr $cc48			jsr Jsr_Comma_YA	; compile JSR _runtime
.b12e	a9 d0		lda #$d0			lda #$d0		; compile BNE *+5
.b130	a0 03		ldy #$03			ldy #3
.b132	20 23 cc	jsr $cc23			jsr Comma_YA
.b135	20 62 b2	jsr $b262			jsr Leave		; compile JMP leave
.b138	4c 59 b1	jmp $b159			jmp Do_8		; finish
=23					CL	.var *-(WordListLink+wh_Xt)
=$b13b					en = *	; remember here
>b122	17					.byte CL	;wh_CodeLength
.b13b					_runtime:
.b13b	20 61 b1	jsr $b161			jsr Do_Runtime	; start normally (we assume TOS!=NOS)
.b13e	a5 12		lda $12				lda DoIndex+0	; Are TOS and NOS equal?
.b140	f0 01		beq $b143			beq _2
.b142	60		rts				rts		; return Z=0 to signal continue
.b143	a5 13		lda $13		_2:		lda DoIndex+1
.b145	c9 80		cmp #$80			cmp #$80
.b147	60		rts				rts		; return Z
>b148	44 6f				L1:	.text "Do"	;  name of word as a string, ending at wh_NameLastChar
>b14a	02					.byte *-L1	;wh_NameLength	length of name
>b14b	9f b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b14d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b14e	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45258					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b14f					Do:
.b14f	20 7f b2	jsr $b27f			jsr Do_Leave_Init
.b152	a9 61		lda #$61			lda #<Do_runtime
.b154	a0 b1		ldy #$b1			ldy #>Do_runtime
.b156	20 48 cc	jsr $cc48			jsr Jsr_Comma_YA	; compile JSR _runtime
.b159	20 2c c9	jsr $c92c	Do_8:		jsr Here		; remember loop body start addr
.b15c	a9 4f		lda #$4f			lda #<Do		; identifier
.b15e	4c 3a b7	jmp $b73a			jmp PushZA
=18					CL	.var *-(WordListLink+wh_Xt)
=$b161					en = *	; remember here
>b14d	12					.byte CL	;wh_CodeLength
.b161					Do_Runtime:
.b161	ce 45 07	dec $0745			dec DoStkIndex		; alloc DO stack entry
.b164	ac 45 07	ldy $0745			ldy DoStkIndex
.b167	30 2d		bmi $b196			bmi _TooDeep
.b169	a5 12		lda $12				lda DoIndex+0		; save previous DoIndex
.b16b	99 46 07	sta $0746,y			sta DoIndexL,y
.b16e	a5 13		lda $13				lda DoIndex+1
.b170	99 4e 07	sta $074e,y			sta DoIndexH,y
.b173	38		sec				sec			; fudge factor (FUFA)= $8000 - limit
.b174	a9 00		lda #$00			lda #0			;   the number that will trip the overflow flag
.b176	f5 26		sbc $26,x			sbc DStack+2,x
.b178	99 56 07	sta $0756,y			sta DoFuFaL,y
.b17b	a9 80		lda #$80			lda #$80
.b17d	f5 27		sbc $27,x			sbc DStack+3,x
.b17f	99 5e 07	sta $075e,y			sta DoFuFaH,y
.b182	18		clc				clc			; index= FUFA plus original index
.b183	b5 24		lda $24,x			lda DStack+0,x
.b185	79 56 07	adc $0756,y			adc DoFuFaL,y
.b188	85 12		sta $12				sta DoIndex+0
.b18a	b5 25		lda $25,x			lda DStack+1,x
.b18c	79 5e 07	adc $075e,y			adc DoFuFaH,y
.b18f	85 13		sta $13				sta DoIndex+1
.b191	e8		inx				inx			; Drop orig index
.b192	e8		inx				inx
.b193	e8		inx				inx			; Drop orig limit
.b194	e8		inx				inx
.b195	60		rts				rts			; return
.b196	a9 f9		lda #$f9	_TooDeep:	lda #$100+err_DoLoop_TooDeep
.b198	20 c9 b3	jsr $b3c9			jsr ThrowA
>b19b	4c 6f 6f 70			L1:	.text "Loop"	;  name of word as a string, ending at wh_NameLastChar
>b19f	04					.byte *-L1	;wh_NameLength	length of name
>b1a0	ca b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b1a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b1a3	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45343					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b1a4					Loop:
.b1a4	a9 ab		lda #$ab			lda #<_Runtime
.b1a6	a0 b1		ldy #$b1			ldy #>_Runtime
.b1a8	4c c7 b1	jmp $b1c7			jmp Plus_Loop_5
=7					CL	.var *-(WordListLink+wh_Xt)
=$b1ab					en = *	; remember here
>b1a2	07					.byte CL	;wh_CodeLength
.b1ab					_Runtime:
.b1ab	e6 12		inc $12				inc DoIndex+0
.b1ad	f0 02		beq $b1b1			beq _Runtime2
.b1af	b8		clv				clv			; return V=0 to signal loop back
.b1b0	60		rts				rts
.b1b1	18		clc		_Runtime2:	clc
.b1b2	a5 13		lda $13				lda DoIndex+1		; handle carry from lo byte
.b1b4	69 01		adc #$01			adc #1
.b1b6	85 13		sta $13				sta DoIndex+1
.b1b8	60		rts				rts			; return V to signal loop back
>b1b9	2b 4c 6f 6f 70			L1:	.text "+Loop"	;  name of word as a string, ending at wh_NameLastChar
>b1be	05					.byte *-L1	;wh_NameLength	length of name
>b1bf	1f b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b1c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b1c2	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45374					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b1c3					Plus_Loop:
.b1c3	a9 d1		lda #$d1			lda #<Plus_Loop_Runtime
.b1c5	a0 b1		ldy #$b1			ldy #>Plus_Loop_Runtime
.b1c7	20 e8 b1	jsr $b1e8	Plus_Loop_5:	jsr Loop_End		; compile JSR _runtime, BVC back
.b1ca	a9 47		lda #$47			lda #<Unloop
.b1cc	a0 b2		ldy #$b2			ldy #>Unloop
.b1ce	4c ee b5	jmp $b5ee			jmp Compile_Comma_WithNT_YA ; compile JSR Unloop, return
=14					CL	.var *-(WordListLink+wh_Xt)
=$b1d1					en = *	; remember here
>b1c1	0e					.byte CL	;wh_CodeLength
.b1d1					Plus_Loop_Runtime:
.b1d1	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b1d3	b0 10		bcs $b1e5		bcs Throw_Stack_12
.b1d5	18		clc				clc			; DoIndex += step
.b1d6	b5 24		lda $24,x			lda DStack+0,x
.b1d8	65 12		adc $12				adc DoIndex+0
.b1da	85 12		sta $12				sta DoIndex+0
.b1dc	b5 25		lda $25,x			lda DStack+1,x
.b1de	65 13		adc $13				adc DoIndex+1
.b1e0	85 13		sta $13				sta DoIndex+1
.b1e2	e8		inx				inx			; Drop step
.b1e3	e8		inx				inx
.b1e4	60		rts				rts			; return V=0 to signal loop back
.b1e5	4c 8e b3	jmp $b38e	Throw_Stack_12: jmp Throw_Stack
.b1e8					Loop_End:
.b1e8	20 48 cc	jsr $cc48			jsr Jsr_Comma_YA	; compile JSR runtime
.b1eb	a9 4f		lda #$4f			lda #<Do		; check id
.b1ed	20 30 b2	jsr $b230	Loop_End_3:	jsr QPairCtlA
.b1f0	a9 50		lda #$50			lda #$50		; compile BVC body
.b1f2	20 07 a6	jsr $a607			jsr Branch_Comma
.b1f5	ac 43 07	ldy $0743			ldy DoLeave+0		; for each leave addr entry
.b1f8	ad 44 07	lda $0744			lda DoLeave+1
.b1fb	f0 1b		beq $b218			beq _p9
.b1fd	84 14		sty $14		_p1:		sty tmp1+0		;   save entry pointer
.b1ff	85 15		sta $15				sta tmp1+1
.b201	a0 01		ldy #$01			ldy #1			;   save link
.b203	b1 14		lda ($14),y			lda (tmp1),y
.b205	48		pha				pha
.b206	88		dey				dey
.b207	b1 14		lda ($14),y			lda (tmp1),y
.b209	48		pha				pha
.b20a	a5 00		lda $00				lda cp+0		;   patch addr
.b20c	91 14		sta ($14),y			sta (tmp1),y
.b20e	a5 01		lda $01				lda cp+1
.b210	c8		iny				iny
.b211	91 14		sta ($14),y			sta (tmp1),y
.b213	68		pla				pla			;   get saved link
.b214	a8		tay				tay
.b215	68		pla				pla
.b216	d0 e5		bne $b1fd			bne _p1
.b218					_p9:
.b218	20 40 b3	jsr $b340			jsr PopYA		; restore DoLeave
.b21b	8d 43 07	sta $0743			sta DoLeave+0
.b21e	8c 44 07	sty $0744			sty DoLeave+1
.b221	60		rts				rts
>b222	3f 50 61 69 72 43 74 6c		L1:	.text "?PairCtlA"	;  name of word as a string, ending at wh_NameLastChar
>b22a	41
>b22b	09					.byte *-L1	;wh_NameLength	length of name
>b22c	3e b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b22e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b22f	08					.byte NN	;wh_Flags	dictionary flags
=45483					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b230	d5 24		cmp $24,x	QPairCtlA:	cmp DStack+0,x
.b232	f0 05		beq $b239			beq _8
.b234	a9 ea		lda #$ea			lda #$100+err_ControlMismatch
.b236	4c c9 b3	jmp $b3c9			jmp ThrowA
.b239	e8		inx		_8:		inx
.b23a	e8		inx				inx	; Drop n
.b23b	60		rts				rts
=12					CL	.var *-(WordListLink+wh_Xt)
=$b23c					en = *	; remember here
>b22e	0c					.byte CL	;wh_CodeLength
>b23c	55 6e 6c 6f 6f 70		L1:	.text "Unloop"	;  name of word as a string, ending at wh_NameLastChar
>b242	06					.byte *-L1	;wh_NameLength	length of name
>b243	ab b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b245	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b246	01					.byte CO	;wh_Flags	dictionary flags
=45506					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b247					Unloop:
.b247	ac 45 07	ldy $0745			ldy DoStkIndex
.b24a	b9 46 07	lda $0746,y			lda DoIndexL,y	; restore Index
.b24d	85 12		sta $12				sta DoIndex+0
.b24f	b9 4e 07	lda $074e,y			lda DoIndexH,y
.b252	85 13		sta $13				sta DoIndex+1
.b254	ee 45 07	inc $0745			inc DoStkIndex	; drop Do stack entry
=16					CL	.var *-(WordListLink+wh_Xt)
=$b257					en = *	; remember here
>b245	10					.byte CL	;wh_CodeLength
.b257	60		rts				rts
>b258	4c 65 61 76 65			L1:	.text "Leave"	;  name of word as a string, ending at wh_NameLastChar
>b25d	05					.byte *-L1	;wh_NameLength	length of name
>b25e	c2 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b260	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b261	0d					.byte IM+NN+CO	;wh_Flags	dictionary flags
=45533					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b262					Leave:
.b262	a9 4c		lda #$4c			lda #$4c	; JMP abs
.b264	20 09 cc	jsr $cc09			jsr C_Comma_A
.b267	a5 01		lda $01				lda cp+1	; save cp
.b269	48		pha				pha
.b26a	a5 00		lda $00				lda cp+0
.b26c	48		pha				pha
.b26d	ad 43 07	lda $0743			lda DoLeave+0	; compile DoLeave link, patched later
.b270	ac 44 07	ldy $0744			ldy DoLeave+1
.b273	20 23 cc	jsr $cc23			jsr Comma_YA
.b276	68		pla				pla		; update DoLeave
.b277	8d 43 07	sta $0743			sta DoLeave+0
.b27a	68		pla				pla
.b27b	8d 44 07	sta $0744			sta DoLeave+1
=28					CL	.var *-(WordListLink+wh_Xt)
=$b27e					en = *	; remember here
>b260	1c					.byte CL	;wh_CodeLength
.b27e	60		rts				rts
.b27f					Do_Leave_Init:
.b27f	ad 43 07	lda $0743			lda DoLeave+0
.b282	ac 44 07	ldy $0744			ldy DoLeave+1
.b285	20 f8 b6	jsr $b6f8			jsr PushYA	; save old leave head
.b288	a9 00		lda #$00			lda #0		; init
.b28a	8d 44 07	sta $0744			sta DoLeave+1
.b28d	60		rts				rts
>b28e	49				L1:	.text "I"	;  name of word as a string, ending at wh_NameLastChar
>b28f	01					.byte *-L1	;wh_NameLength	length of name
>b290	dd b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b292	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b293	01					.byte CO	;wh_Flags	dictionary flags
=45583					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b294	ac 45 07	ldy $0745	I:		ldy DoStkIndex
.b297	ca		dex				dex
.b298	ca		dex				dex
.b299	38		sec				sec		; n= fudged index - fudge factor (FUFA)
.b29a	a5 12		lda $12				lda DoIndex+0
.b29c	f9 56 07	sbc $0756,y			sbc DoFuFaL,y
.b29f	95 24		sta $24,x			sta DStack+0,x
.b2a1	a5 13		lda $13				lda DoIndex+1
.b2a3	f9 5e 07	sbc $075e,y			sbc DoFuFaH,y
.b2a6	95 25		sta $25,x			sta DStack+1,x
=20					CL	.var *-(WordListLink+wh_Xt)
=$b2a8					en = *	; remember here
>b292	14					.byte CL	;wh_CodeLength
.b2a8	60		rts				rts
>b2a9	4a				L1:	.text "J"	;  name of word as a string, ending at wh_NameLastChar
>b2aa	01					.byte *-L1	;wh_NameLength	length of name
>b2ab	0f b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2ad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2ae	01					.byte CO	;wh_Flags	dictionary flags
=45610					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2af	ac 45 07	ldy $0745	J:		ldy DoStkIndex
.b2b2	ca		dex				dex
.b2b3	ca		dex				dex
.b2b4	38		sec				sec		; n= 2nd fudged index - 2nd fudge factor (FUFA)
.b2b5	b9 46 07	lda $0746,y			lda DoIndexL+0,y	; LSB
.b2b8	f9 57 07	sbc $0757,y			sbc DoFufaL+1,y
.b2bb	95 24		sta $24,x			sta DStack+0,x
.b2bd	b9 4e 07	lda $074e,y			lda DoIndexH+0,y	; MSB
.b2c0	f9 5f 07	sbc $075f,y			sbc DoFufaH+1,y
.b2c3	95 25		sta $25,x			sta DStack+1,x
=22					CL	.var *-(WordListLink+wh_Xt)
=$b2c5					en = *	; remember here
>b2ad	16					.byte CL	;wh_CodeLength
.b2c5	60		rts				rts
>b2c6	52 65 63 75 72 73 65		L1:	.text "Recurse"	;  name of word as a string, ending at wh_NameLastChar
>b2cd	07					.byte *-L1	;wh_NameLength	length of name
>b2ce	2a b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2d0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2d1	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45645					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2d2					Recurse:
.b2d2	a5 0e		lda $0e				lda workword+0
.b2d4	a4 0f		ldy $0f				ldy workword+1
.b2d6	20 f8 b6	jsr $b6f8			jsr PushYA
.b2d9	24 0c		bit $0c				bit status		; does WORKWORD contain xt or nt?
.b2db	50 03		bvc $b2e0			bvc +
.b2dd	20 20 bd	jsr $bd20			jsr Name_To_Int		; convert nt to xt
.b2e0					+
.b2e0	4c 45 cc	jmp $cc45			jmp Jsr_Comma		; compile JSR xt, return
=17					CL	.var *-(WordListLink+wh_Xt)
=$b2e3					en = *	; remember here
>b2d0	11					.byte CL	;wh_CodeLength
>b2e3	41 62 6f 72 74 22		L1:	.text 'Abort"'	;  name of word as a string, ending at wh_NameLastChar
>b2e9	06					.byte *-L1	;wh_NameLength	length of name
>b2ea	4d b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2ec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2ed	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45673					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2ee					Abort_Quote:
.b2ee	20 62 b8	jsr $b862			jsr S_Quote		; compile the string literal
.b2f1	a0 b2		ldy #$b2			ldy #>_runtime		; compile JSR runtime, return
.b2f3	a9 f8		lda #$f8			lda #<_runtime
.b2f5	4c 48 cc	jmp $cc48			jmp Jsr_Comma_YA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b2f8					en = *	; remember here
>b2ec	0a					.byte CL	;wh_CodeLength
.b2f8					_runtime:
.b2f8	b5 28		lda $28,x			lda DStack+4,x
.b2fa	15 29		ora $29,x			ora DStack+5,x
.b2fc	d0 03		bne $b301			bne _do_abort	; true?
.b2fe	4c a5 ac	jmp $aca5			jmp ThreeDrop	; Drop three entries from the Data Stack
.b301					_do_abort:
.b301	20 f2 cc	jsr $ccf2			jsr Type	; print string
.b304	20 7d aa	jsr $aa7d			jsr CR		; We follow Gforth in going to a new line
.b307	a9 fe		lda #$fe			lda #$100+err_AbortQuote
.b309	4c c9 b3	jmp $b3c9			jmp ThrowA
>b30c	41 62 6f 72 74			L1:	.text "Abort"	;  name of word as a string, ending at wh_NameLastChar
>b311	05					.byte *-L1	;wh_NameLength	length of name
>b312	69 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b314	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b315	08					.byte NN	;wh_Flags	dictionary flags
=45713					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b316	a9 ff		lda #$ff	Abort:		lda #$100+err_Abort
.b318	4c c9 b3	jmp $b3c9			jmp ThrowA
=5					CL	.var *-(WordListLink+wh_Xt)
=$b31b					en = *	; remember here
>b314	05					.byte CL	;wh_CodeLength
>b31b	50 6f 70 41			L1:	.text "PopA"	;  name of word as a string, ending at wh_NameLastChar
>b31f	04					.byte *-L1	;wh_NameLength	length of name
>b320	91 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b322	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b323	08					.byte NN	;wh_Flags	dictionary flags
=45727					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b324					PopA:
.b324	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b326	b0 66		bcs $b38e		bcs Throw_Stack
.b328	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b32a	e8		inx				inx
.b32b	e8		inx				inx
=8					CL	.var *-(WordListLink+wh_Xt)
=$b32c					en = *	; remember here
>b322	08					.byte CL	;wh_CodeLength
.b32c	60		rts		                rts
.b32d					PopA2:
.b32d	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b32f	b0 5d		bcs $b38e		bcs Throw_Stack
.b331	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b333	e8		inx				inx
.b334	e8		inx				inx
.b335	60		rts		                rts
>b336	50 6f 70 59 41			L1:	.text "PopYA"	;  name of word as a string, ending at wh_NameLastChar
>b33b	05					.byte *-L1	;wh_NameLength	length of name
>b33c	9f b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b33e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b33f	08					.byte NN	;wh_Flags	dictionary flags
=45755					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b340					PopYA:
.b340	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b342	b0 4a		bcs $b38e		bcs Throw_Stack
.b344	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to YA
.b346	b4 25		ldy $25,x			ldy DStack+1,x
.b348	e8		inx				inx
.b349	e8		inx				inx
=10					CL	.var *-(WordListLink+wh_Xt)
=$b34a					en = *	; remember here
>b33e	0a					.byte CL	;wh_CodeLength
.b34a	60		rts				rts
.b34b					PopTmp1:
.b34b	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b34d	b0 3f		bcs $b38e		bcs Throw_Stack
.b34f	b5 24		lda $24,x			lda DStack+0,x	; PopYA
.b351	b4 25		ldy $25,x			ldy DStack+1,x
.b353	e8		inx				inx
.b354	e8		inx				inx
.b355	85 14		sta $14				sta tmp1+0
.b357	84 15		sty $15				sty tmp1+1
.b359	60		rts				rts
>b35a	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_1"	;  name of word as a string, ending at wh_NameLastChar
>b362	77 5f 31
>b365	0b					.byte *-L1	;wh_NameLength	length of name
>b366	bb b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b368	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b369	08					.byte NN	;wh_Flags	dictionary flags
=45797					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b36a					underflow_1:
.b36a	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b36c	b0 20		bcs $b38e		bcs Throw_Stack
=4					CL	.var *-(WordListLink+wh_Xt)
=$b36e					en = *	; remember here
>b368	04					.byte CL	;wh_CodeLength
.b36e	60		rts				rts
>b36f	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_2"	;  name of word as a string, ending at wh_NameLastChar
>b377	77 5f 32
>b37a	0b					.byte *-L1	;wh_NameLength	length of name
>b37b	e5 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b37d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b37e	08					.byte NN	;wh_Flags	dictionary flags
=45818					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b37f					underflow_2:
.b37f	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b381	b0 0b		bcs $b38e		bcs Throw_Stack
=4					CL	.var *-(WordListLink+wh_Xt)
=$b383					en = *	; remember here
>b37d	04					.byte CL	;wh_CodeLength
.b383	60		rts		                rts
.b384					underflow_3:
.b384	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.b386	b0 06		bcs $b38e		bcs Throw_Stack
.b388	60		rts		                rts
.b389					underflow_4:
.b389	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.b38b	b0 01		bcs $b38e		bcs Throw_Stack
.b38d	60		rts		                rts
.b38e					Throw_Stack:
.b38e	30 04		bmi $b394			bmi _over
.b390	a9 fc		lda #$fc			lda #$100+err_Stack_Underflow
.b392	d0 35		bne $b3c9			bne ThrowA
.b394	a9 fd		lda #$fd	_over:		lda #$100+err_Stack_Overflow
.b396	d0 31		bne $b3c9			bne ThrowA
.b398					Throw_FPStack:
.b398	30 04		bmi $b39e			bmi _over
.b39a	a9 d3		lda #$d3			lda #$100+err_FPStackUnderflow
.b39c	d0 2b		bne $b3c9			bne ThrowA
.b39e	a9 d4		lda #$d4	_over:		lda #$100+err_FPStackOverflow
.b3a0	d0 27		bne $b3c9			bne ThrowA
.b3a2					Throw_FpOutOfRange:
.b3a2	a9 d5		lda #$d5			lda #$100+err_FpOutOfRange
.b3a4	d0 23		bne $b3c9			bne ThrowA
>b3a6	3f 53 74 61 63 6b		L1:	.text "?Stack"	;  name of word as a string, ending at wh_NameLastChar
>b3ac	06					.byte *-L1	;wh_NameLength	length of name
>b3ad	fa b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b3af	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b3b0	08					.byte NN	;wh_Flags	dictionary flags
=45868					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b3b1					QStack:
.b3b1	e0 29		cpx #$29		cpx #-2*0+DStack0+1
.b3b3	b0 d9		bcs $b38e		bcs Throw_Stack
.b3b5	a4 4c		ldy $4c				ldy fp			; check floating point stack
.b3b7	c0 0b		cpy #$0b			cpy #FDim+1
.b3b9	b0 dd		bcs $b398			bcs Throw_FPStack
=10					CL	.var *-(WordListLink+wh_Xt)
=$b3bb					en = *	; remember here
>b3af	0a					.byte CL	;wh_CodeLength
.b3bb	60		rts				rts			; all OK
>b3bc	54 68 72 6f 77			L1:	.text "Throw"	;  name of word as a string, ending at wh_NameLastChar
>b3c1	05					.byte *-L1	;wh_NameLength	length of name
>b3c2	2c b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b3c4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b3c5	08					.byte NN	;wh_Flags	dictionary flags
=45889					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b3c6	20 24 b3	jsr $b324	Throw:		jsr PopA		; pop n
.b3c9	20 f2 b3	jsr $b3f2	ThrowA:		jsr Type_Exception_Text_A ; print the associated error string
.b3cc					Abort_Core:
.b3cc	20 19 b8	jsr $b819			jsr SLiteral_runtime
.b3cf	4c d5 b3	jmp $b3d5			  jmp +
>b3d2	3f 00 20					  .text "?",0," "	; signal an error to the simulator
.b3d5	20 f2 cc	jsr $ccf2	+		jsr Type
.b3d8	20 0e ce	jsr $ce0e			jsr R_From		; show return stack TOS
.b3db	20 9e 81	jsr $819e			jsr TypeSymbol
.b3de	20 2a ce	jsr $ce2a			jsr R_Fetch		; show return stack NOS
.b3e1	20 9e 81	jsr $819e			jsr TypeSymbol
.b3e4	20 7d aa	jsr $aa7d			jsr CR
.b3e7					Abort_Core2:
.b3e7	a9 08		lda #$08			lda #DoStkDim		; init do stack
.b3e9	8d 45 07	sta $0745			sta DoStkIndex
.b3ec	20 36 b4	jsr $b436			jsr Empty_Stack		; empty the Data Stack & FP stack
.b3ef	4c 46 b4	jmp $b446			jmp Quit		; continue into QUIT.
.b3f2					Type_Exception_Text_A:
.b3f2	85 16		sta $16				sta tmp2+0	; save error code
.b3f4	a9 76		lda #$76			lda #<Exception_Text_List
.b3f6	a0 da		ldy #$da			ldy #>Exception_Text_List	; for each table entry
.b3f8	85 18		sta $18				sta tmp3+0
.b3fa	84 19		sty $19				sty tmp3+1
.b3fc	a0 00		ldy #$00	_TestEntry:	ldy #0		;   code match?
.b3fe	b1 18		lda ($18),y			lda (tmp3),y
.b400	f0 1a		beq $b41c			beq _NotFound
.b402	c5 16		cmp $16				cmp tmp2+0
.b404	f0 11		beq $b417			beq _Found
.b406	c8		iny		-		iny		;   step to end of entry
.b407	b1 18		lda ($18),y			lda (tmp3),y
.b409	d0 fb		bne $b406			bne -
.b40b	98		tya				tya		;   step to next entry
.b40c	38		sec				sec
.b40d	65 18		adc $18				adc tmp3+0
.b40f	85 18		sta $18				sta tmp3+0
.b411	90 e9		bcc $b3fc			bcc _TestEntry
.b413	e6 19		inc $19				inc tmp3+1
.b415	d0 e5		bne $b3fc			bne _TestEntry
.b417					_Found:
.b417	a0 01		ldy #$01			ldy #1
.b419	4c 19 cd	jmp $cd19			jmp Print_ASCIIZ_tmp3_no_lf
.b41c	a0 ff		ldy #$ff	_NotFound:	ldy #$ff		; print code
.b41e	a5 16		lda $16				lda tmp2+0
.b420	20 f8 b6	jsr $b6f8			jsr PushYA
.b423	4c e6 ca	jmp $cae6			jmp Dot
>b426	45 6d 70 74 79 2d 53 74		L1:	.text "Empty-Stack"	;  name of word as a string, ending at wh_NameLastChar
>b42e	61 63 6b
>b431	0b					.byte *-L1	;wh_NameLength	length of name
>b432	41 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b434	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b435	08					.byte NN	;wh_Flags	dictionary flags
=46001					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b436	a2 28		ldx #$28	Empty_Stack:	ldx #DStack0	; empty data stack
.b438	a9 0a		lda #$0a			lda #FDim	; empty FP stack
.b43a	85 4c		sta $4c				sta fp
=6					CL	.var *-(WordListLink+wh_Xt)
=$b43c					en = *	; remember here
>b434	06					.byte CL	;wh_CodeLength
.b43c	60		rts				rts
>b43d	51 75 69 74			L1:	.text "Quit"	;  name of word as a string, ending at wh_NameLastChar
>b441	04					.byte *-L1	;wh_NameLength	length of name
>b442	b1 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b444	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b445	08					.byte NN	;wh_Flags	dictionary flags
=46017					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b446					Quit:
.b446	8a		txa				txa		; Save the DStack that we just defined
.b447	a2 ff		ldx #$ff			ldx #rsp0
.b449	9a		txs				txs
.b44a	aa		tax				tax		; Restore the DStack. Dude, seriously.
.b44b	a9 00		lda #$00			lda #0		; SOURCE-ID= zero (keyboard input)
.b44d	85 02		sta $02				sta insrc+0
.b44f	85 03		sta $03				sta insrc+1
.b451	20 85 b6	jsr $b685			jsr Left_Bracket_NoCheck ; switch to interpret state
.b454					_get_line:
.b454	a9 00		lda #$00			lda #<buffer0	; input buffer, this is paranoid
.b456	85 04		sta $04				sta cib+0
.b458	a9 02		lda #$02			lda #>buffer0
.b45a	85 05		sta $05				sta cib+1
.b45c	20 a1 c1	jsr $c1a1			jsr Refill		; ( -- f )
.b45f	b5 24		lda $24,x			lda DStack+0,x
.b461	d0 05		bne $b468			bne +
.b463	a9 6b		lda #$6b			lda #$100+err_Refill	; REFILL returned a FALSE flag, something went wrong
.b465	4c c9 b3	jmp $b3c9			jmp ThrowA
.b468	e8		inx		+		inx			; drop the flag
.b469	e8		inx				inx
.b46a	20 81 b4	jsr $b481			jsr interpret
.b46d	a5 0a		lda $0a				lda state
.b46f	d0 06		bne $b477			bne _print_compiled
.b471	a9 22		lda #$22			lda #<str_ok
.b473	a0 da		ldy #$da			ldy #>str_ok
.b475	d0 04		bne $b47b			bne _print
.b477	a9 26		lda #$26	_print_compiled: lda #<str_compiled	; "compile" string
.b479	a0 da		ldy #$da			ldy #>str_compiled
.b47b	20 0d cd	jsr $cd0d	_print:		jsr Print_ASCIIZ_YA
.b47e	4c 54 b4	jmp $b454			jmp _get_line
=59					CL	.var *-(WordListLink+wh_Xt)
=$b481					en = *	; remember here
>b444	3b					.byte CL	;wh_CodeLength
.b481					Interpret:
.b481					_loop:
.b481	20 b1 b3	jsr $b3b1			jsr QStack		; check stack bounds
.b484	20 e9 b9	jsr $b9e9			jsr parse_name		; ( "string" -- addr u )
.b487	b5 24		lda $24,x	                lda DStack+0,x		; empty line?
.b489	f0 53		beq $b4de	                beq _line_done
.b48b	20 c4 cb	jsr $cbc4			jsr Two_dup		; ( addr u -- addr u addr u )
.b48e	20 26 bc	jsr $bc26			jsr find_name		; ( addr u addr u -- addr u nt|0 )
.b491	b5 25		lda $25,x			lda DStack+1,x		; word found?
.b493	d0 1b		bne $b4b0			bne _got_name_token
.b495	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.b496	e8		inx		                inx
.b497	20 ff af	jsr $afff	                jsr Number           ; ( addr u -- u|d )
.b49a	a5 0a		lda $0a		                lda state		; interpreting?
.b49c	f0 e3		beq $b481	                beq _loop		;   we're done
.b49e	a9 20		lda #$20	                lda #$20		; double cell number?
.b4a0	24 0c		bit $0c		                bit status
.b4a2	f0 06		beq $b4aa	                beq _single_number
.b4a4	20 bf b7	jsr $b7bf			jsr Two_literal		; compile a double number
.b4a7	4c 81 b4	jmp $b481			jmp _loop
.b4aa	20 ab b6	jsr $b6ab	_single_number:	jsr Literal		; compile a single number
.b4ad	4c 81 b4	jmp $b481			jmp _loop
.b4b0					_got_name_token:
.b4b0	20 85 c8	jsr $c885			jsr Nip
.b4b3	20 85 c8	jsr $c885			jsr Nip			; ( nt )
.b4b6	85 14		sta $14				sta tmp1+0		; save a work copy of nt
.b4b8	84 15		sty $15				sty tmp1+1
.b4ba	20 20 bd	jsr $bd20			jsr Name_To_Int		; ( nt -- xt )
.b4bd	a0 84		ldy #$84			ldy #Wh_Flags		; get word flags, we'll need them shortly
.b4bf	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b4c1	a4 0a		ldy $0a				ldy state		; interpreting or compiling?
.b4c3	d0 0f		bne $b4d4			bne _compile
.b4c5	29 01		and #$01			and #CO			; is the word COMPILE-ONLY?
.b4c7	f0 05		beq $b4ce			beq _execute
.b4c9	a9 f2		lda #$f2			lda #$100+err_CompileOnly	;   complain & quit
.b4cb	4c c9 b3	jmp $b3c9			jmp ThrowA
.b4ce	20 30 cd	jsr $cd30	_execute:	jsr Execute		; EXECUTE the xt that is TOS
.b4d1	4c 81 b4	jmp $b481	                jmp _loop
.b4d4					_compile:
.b4d4	29 04		and #$04			and #IM			; is the word IMMEDIATE?
.b4d6	d0 f6		bne $b4ce			bne _execute		;   IMMEDIATE word, execute now
.b4d8	20 f1 b5	jsr $b5f1			jsr Compile_Comma_WithNT ; Compile the xt into the Dictionary
.b4db	4c 81 b4	jmp $b481			jmp _loop
.b4de					_line_done:
.b4de	e8		inx				inx			; drop stuff from PARSE_NAME
.b4df	e8		inx				inx
.b4e0	e8		inx				inx
.b4e1	e8		inx				inx
.b4e2	60		rts				rts
>b4e3	49 6d 6d 65 64 69 61 74		L1:	.text "Immediate"	;  name of word as a string, ending at wh_NameLastChar
>b4eb	65
>b4ec	09					.byte *-L1	;wh_NameLength	length of name
>b4ed	c1 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b4ef	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b4f0	08					.byte NN	;wh_Flags	dictionary flags
=46188					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b4f1	a9 04		lda #$04	Immediate:	lda #IM
.b4f3	48		pha		SetFlag:	pha
.b4f4	20 ba b9	jsr $b9ba			jsr current_to_dp
.b4f7	a0 84		ldy #$84			ldy #Wh_Flags
.b4f9	68		pla				pla
.b4fa	11 10		ora ($10),y			ora (dp),y
.b4fc	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b4fe					en = *	; remember here
>b4ef	0d					.byte CL	;wh_CodeLength
.b4fe	60		rts				rts
>b4ff	43 6f 6d 70 69 6c 65 2d		L1:	.text "Compile-only"	;  name of word as a string, ending at wh_NameLastChar
>b507	6f 6e 6c 79
>b50b	0c					.byte *-L1	;wh_NameLength	length of name
>b50c	6c b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b50e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b50f	08					.byte NN	;wh_Flags	dictionary flags
=46219					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b510	a9 01		lda #$01	Compile_Only:	lda #CO
.b512	d0 df		bne $b4f3			bne SetFlag
=4					CL	.var *-(WordListLink+wh_Xt)
=$b514					en = *	; remember here
>b50e	04					.byte CL	;wh_CodeLength
>b514	6e 65 76 65 72 2d 6e 61		L1:	.text "never-native"	;  name of word as a string, ending at wh_NameLastChar
>b51c	74 69 76 65
>b520	0c					.byte *-L1	;wh_NameLength	length of name
>b521	8b b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b523	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b524	08					.byte NN	;wh_Flags	dictionary flags
=46240					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b525	20 ba b9	jsr $b9ba	Never_Native:	jsr current_to_dp
.b528	a0 84		ldy #$84			ldy #Wh_Flags
.b52a	b1 10		lda ($10),y			lda (dp),y
.b52c	09 08		ora #$08			ora #NN		; set NN flag
.b52e	29 fd		and #$fd			and #$ff-AN	; clear AN flag
.b530	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b532					en = *	; remember here
>b523	0d					.byte CL	;wh_CodeLength
.b532	60		rts				rts
>b533	61 6c 77 61 79 73 2d 6e		L1:	.text "always-native"	;  name of word as a string, ending at wh_NameLastChar
>b53b	61 74 69 76 65
>b540	0d					.byte *-L1	;wh_NameLength	length of name
>b541	a0 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b543	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b544	08					.byte NN	;wh_Flags	dictionary flags
=46272					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b545	20 ba b9	jsr $b9ba	Always_Native:	jsr current_to_dp
.b548	a0 84		ldy #$84			ldy #Wh_Flags
.b54a	b1 10		lda ($10),y			lda (dp),y
.b54c	09 02		ora #$02			ora #AN		; Make sure AN flag is set
.b54e	29 f7		and #$f7			and #$ff-NN	; and NN flag is clear.
.b550	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b552					en = *	; remember here
>b543	0d					.byte CL	;wh_CodeLength
.b552	60		rts				rts
>b553	61 6c 6c 6f 77 2d 6e 61		L1:	.text "allow-native"	;  name of word as a string, ending at wh_NameLastChar
>b55b	74 69 76 65
>b55f	0c					.byte *-L1	;wh_NameLength	length of name
>b560	c0 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b562	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b563	08					.byte NN	;wh_Flags	dictionary flags
=46303					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b564	20 ba b9	jsr $b9ba	Allow_Native:	jsr current_to_dp
.b567	a0 84		ldy #$84			ldy #Wh_Flags	; offset for status byte
.b569	b1 10		lda ($10),y			lda (dp),y
.b56b	29 f5		and #$f5			and #$ff-NN-AN	; AN and NN flag is clear.
.b56d	91 10		sta ($10),y			sta (dp),y
=11					CL	.var *-(WordListLink+wh_Xt)
=$b56f					en = *	; remember here
>b562	0b					.byte CL	;wh_CodeLength
.b56f	60		rts				rts
>b570	6e 63 2d 6c 69 6d 69 74		L1:	.text "nc-limit"	;  name of word as a string, ending at wh_NameLastChar
>b578	08					.byte *-L1	;wh_NameLength	length of name
>b579	df b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b57b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b57c	08					.byte NN	;wh_Flags	dictionary flags
=46328					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b57d	a0 03		ldy #$03			ldy #>nc_limit
.b57f	a9 02		lda #$02			lda #<nc_limit
.b581	4c f8 b6	jmp $b6f8			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b584					en = *	; remember here
>b57b	07					.byte CL	;wh_CodeLength
>b584	73 74 72 69 70 2d 75 6e		L1:	.text "strip-underflow"	;  name of word as a string, ending at wh_NameLastChar
>b58c	64 65 72 66 6c 6f 77
>b593	0f					.byte *-L1	;wh_NameLength	length of name
>b594	f8 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b596	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b597	08					.byte NN	;wh_Flags	dictionary flags
=46355					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b598	a0 03		ldy #$03			ldy #>uf_strip
.b59a	a9 04		lda #$04			lda #<uf_strip
.b59c	4c f8 b6	jmp $b6f8			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b59f					en = *	; remember here
>b596	07					.byte CL	;wh_CodeLength
>b59f	70 6f 73 74 70 6f 6e 65		L1:	.text "postpone"	;  name of word as a string, ending at wh_NameLastChar
>b5a7	08					.byte *-L1	;wh_NameLength	length of name
>b5a8	13 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5aa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5ab	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=46375					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5ac					Postpone:
.b5ac	20 1a ba	jsr $ba1a			jsr parse_name_check	; ( -- addr n )
.b5af	20 52 bc	jsr $bc52			jsr find_name_check	; ( -- nt | 0 )
.b5b2	b5 24		lda $24,x			lda DStack+0,x
.b5b4	85 14		sta $14				sta tmp1+0
.b5b6	b5 25		lda $25,x			lda DStack+1,x
.b5b8	85 15		sta $15				sta tmp1+1
.b5ba	20 20 bd	jsr $bd20			jsr Name_To_Int	; ( nt -- xt )
.b5bd	a0 84		ldy #$84			ldy #Wh_Flags		; IMMEDIATE word?
.b5bf	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b5c1	29 04		and #$04			and #IM
.b5c3	f0 03		beq $b5c8			beq _not_immediate
.b5c5	4c f1 b5	jmp $b5f1			jmp Compile_Comma_WithNT ; compile it
.b5c8					_not_immediate:
.b5c8	20 de b6	jsr $b6de			jsr LDYA_Immed_Comma		; compile LDA #; LDY # with xt of the word
.b5cb	a0 b5		ldy #$b5			ldy #>Compile_Comma_WithNT_YA	; compile COMPILE,
.b5cd	a9 ee		lda #$ee			lda #<Compile_Comma_WithNT_YA
.b5cf	4c 48 cc	jmp $cc48			jmp Jsr_Comma_YA
=38					CL	.var *-(WordListLink+wh_Xt)
=$b5d2					en = *	; remember here
>b5aa	26					.byte CL	;wh_CodeLength
>b5d2	43 6f 6d 70 69 6c 65 2c		L1:	.text "Compile,"	;  name of word as a string, ending at wh_NameLastChar
>b5da	08					.byte *-L1	;wh_NameLength	length of name
>b5db	27 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5de	08					.byte NN	;wh_Flags	dictionary flags
=46426					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5df	20 40 b3	jsr $b340	Compile_Comma:	jsr PopYA		; pop xt (check stack, skippable)
.b5e2	20 f8 b6	jsr $b6f8	Compile_Comma_YA: jsr PushYA		; push xt
.b5e5	20 6a ce	jsr $ce6a			jsr Dup			; ( xt xt )
.b5e8	20 c9 bc	jsr $bcc9			jsr Int_To_Name		; ( xt nt )	does a dictionary search
.b5eb	4c f9 b5	jmp $b5f9			jmp Compile_Comma_B
.b5ee	20 f8 b6	jsr $b6f8	Compile_Comma_WithNT_YA: jsr PushYA
.b5f1					Compile_Comma_WithNT:
.b5f1	20 6a ce	jsr $ce6a			jsr Dup
.b5f4	a9 7b		lda #$7b			lda #$100-wh_xt		; convert xt to nt
.b5f6	20 4f c9	jsr $c94f			jsr Minus_A
.b5f9					Compile_Comma_B:
.b5f9	b5 24		lda $24,x			lda DStack+0,x		; tmp5 = nt
.b5fb	85 1c		sta $1c				sta tmp5+0
.b5fd	b5 25		lda $25,x			lda DStack+1,x
.b5ff	85 1d		sta $1d				sta tmp5+1
.b601	f0 36		beq $b639			beq _jsr		; no nt found?
.b603	a0 83		ldy #$83			ldy #wh_CodeLength
.b605	b1 1c		lda ($1c),y			lda (tmp5),y
.b607	95 24		sta $24,x			sta DStack+0,x		; ( xt u )
.b609	a0 84		ldy #$84			ldy #Wh_Flags		; save word flags
.b60b	b1 1c		lda ($1c),y			lda (tmp5),y
.b60d	95 25		sta $25,x			sta DStack+1,x
.b60f	29 02		and #$02			and #AN			; Always Native (AN) word?
.b611	d0 2b		bne $b63e			bne _inline
.b613	b5 25		lda $25,x			lda DStack+1,x		; Never Native (NN) word?
.b615	29 08		and #$08			and #NN
.b617	d0 0e		bne $b627			bne _jsr_opt
.b619	ad 03 03	lda $0303			lda nc_limit+1		; wordsize<=nc_limit?
.b61c	d0 20		bne $b63e			bne _inline
.b61e	ad 02 03	lda $0302			lda nc_limit+0
.b621	d5 24		cmp $24,x			cmp DStack+0,x
.b623	f0 02		beq $b627			beq _jsr_opt
.b625	b0 17		bcs $b63e			bcs _inline
.b627					_jsr_opt:
.b627	ad 04 03	lda $0304			lda uf_strip
.b62a	f0 0d		beq $b639			beq _jsr
.b62c	b5 25		lda $25,x			lda DStack+1,x		; underflow strip & not stack strip?
.b62e	49 10		eor #$10			eor #UF
.b630	29 50		and #$50			and #UF+R6
.b632	d0 05		bne $b639			bne _jsr
.b634	a9 03		lda #$03			lda #3			; skip the underflow check
.b636	20 19 c9	jsr $c919			jsr Nos_Plus_A
.b639					_jsr:
.b639	e8		inx				inx			; Drop len or nt
.b63a	e8		inx				inx
.b63b	4c 45 cc	jmp $cc45			jmp Jsr_Comma		; compile jsr, return
.b63e					_inline:
.b63e	b5 25		lda $25,x			lda DStack+1,x		; this word contains RTS addr save & restore?
.b640	29 40		and #$40			and #R6
.b642	f0 0a		beq $b64e			beq +
.b644	a9 06		lda #$06			lda #6			;   Adjust xt: skip over the leading RTS addr save
.b646	20 19 c9	jsr $c919			jsr Nos_Plus_A
.b649	a9 f4		lda #$f4			lda #$f4		;   Adjust u: omit the leading RTS addr save & trailing RTS addr restore
.b64b	20 4f c9	jsr $c94f			jsr minus_a
.b64e					+
.b64e	ad 04 03	lda $0304			lda uf_strip+0		; user wants underflow stripping?
.b651	f0 10		beq $b663			beq +
.b653	b5 25		lda $25,x			lda DStack+1,x		; this word contains underflow checking?
.b655	29 10		and #$10			and #UF
.b657	f0 0a		beq $b663			beq +
.b659	a9 03		lda #$03			lda #3			;   Adjust xt: Start after underflow check
.b65b	20 19 c9	jsr $c919			jsr Nos_Plus_A
.b65e	a9 fd		lda #$fd			lda #$fd		;   Adjust u: omit underflow check
.b660	20 4f c9	jsr $c94f			jsr minus_a
.b663					+
.b663	b5 24		lda $24,x			lda DStack+0,x		; compile code bytes
.b665	f0 0c		beq $b673			beq _copy_end
.b667	a1 26		lda ($26,x)	_copy_loop:	lda (DStack+2,x)
.b669	20 09 cc	jsr $cc09			jsr C_Comma_A
.b66c	20 6a c9	jsr $c96a			jsr NOS_One_Plus
.b66f	d6 24		dec $24,x			dec DStack+0,x
.b671	d0 f4		bne $b667			bne _copy_loop
.b673					_copy_end:
.b673	4c 2b c4	jmp $c42b			jmp Two_drop
=151					CL	.var *-(WordListLink+wh_Xt)
=$b676					en = *	; remember here
>b5dd	97					.byte CL	;wh_CodeLength
>b676	5b				L1:	.text "["	;  name of word as a string, ending at wh_NameLastChar
>b677	01					.byte *-L1	;wh_NameLength	length of name
>b678	5a b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b67a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b67b	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=46583					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b67c	a5 0a		lda $0a		Left_Bracket:	lda state+0		; Already in the interpret state?
.b67e	d0 05		bne $b685			bne Left_Bracket_NoCheck
.b680	a9 69		lda #$69			lda #$100+err_NotCompiling
.b682	4c c9 b3	jmp $b3c9			jmp ThrowA
.b685					Left_Bracket_NoCheck:
.b685	a9 00		lda #$00			lda #0
.b687	85 0a		sta $0a		Left_Bracket_3:	sta state+0
.b689	85 0b		sta $0b				sta state+1
=15					CL	.var *-(WordListLink+wh_Xt)
=$b68b					en = *	; remember here
>b67a	0f					.byte CL	;wh_CodeLength
.b68b	60		rts				rts
>b68c	5d				L1:	.text "]"	;  name of word as a string, ending at wh_NameLastChar
>b68d	01					.byte *-L1	;wh_NameLength	length of name
>b68e	f7 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b690	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b691	0c					.byte IM+NN	;wh_Flags	dictionary flags
=46605					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b692					Right_Bracket:
.b692	a5 0a		lda $0a				lda state+0		; Already in the compile state?
.b694	f0 05		beq $b69b			beq +
.b696	a9 68		lda #$68			lda #$100+err_AlreadyCompiling ;   complain and quit
.b698	4c c9 b3	jmp $b3c9			jmp ThrowA
.b69b					+
.b69b	a9 ff		lda #$ff			lda #$FF
.b69d	d0 e8		bne $b687			bne Left_Bracket_3
=13					CL	.var *-(WordListLink+wh_Xt)
=$b69f					en = *	; remember here
>b690	0d					.byte CL	;wh_CodeLength
>b69f	4c 69 74 65 72 61 6c		L1:	.text "Literal"	;  name of word as a string, ending at wh_NameLastChar
>b6a6	07					.byte *-L1	;wh_NameLength	length of name
>b6a7	0d b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6a9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6aa	1d					.byte IM+CO+UF+NN	;wh_Flags	dictionary flags
=46630					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6ab					Literal:
.b6ab	20 6a b3	jsr $b36a			jsr underflow_1
.b6ae	20 b4 b6	jsr $b6b4			jsr LitCompile		; compile load regs, choose a runtime routine
.b6b1	4c ee b5	jmp $b5ee			jmp Compile_Comma_WithNT_YA ; compile JSR runtime
=9					CL	.var *-(WordListLink+wh_Xt)
=$b6b4					en = *	; remember here
>b6a9	09					.byte CL	;wh_CodeLength
.b6b4					LitCompile:
.b6b4	b5 25		lda $25,x			lda DStack+1,x		; hi byte zero?
.b6b6	f0 08		beq $b6c0			beq _ZByte
.b6b8	20 de b6	jsr $b6de			jsr ldya_immed_comma	; compile "ldy #; lda #" using TOS
.b6bb	a9 f8		lda #$f8			lda #<PushYA		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b6bd	a0 b6		ldy #$b6			ldy #>PushYA
.b6bf	60		rts				rts
.b6c0					_ZByte:
.b6c0	b4 24		ldy $24,x			ldy DStack+0,x		; is it 0 ?
.b6c2	f0 08		beq $b6cc			beq _zero
.b6c4	20 e5 b6	jsr $b6e5			jsr lda_immed_comma	; compile "lda #" using TOS
.b6c7	a9 3a		lda #$3a			lda #<PushZA		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b6c9	a0 b7		ldy #$b7			ldy #>PushZA
.b6cb	60		rts				rts
.b6cc	e8		inx		_zero:		inx			; drop
.b6cd	e8		inx				inx
.b6ce	a9 49		lda #$49			lda #<Zero		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b6d0	a0 b7		ldy #$b7			ldy #>Zero
.b6d2	60		rts				rts
>b6d3	4c 44 59 41 23 2c		L1:	.text "LDYA#,"	;  name of word as a string, ending at wh_NameLastChar
>b6d9	06					.byte *-L1	;wh_NameLength	length of name
>b6da	26 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6dd	08					.byte NN	;wh_Flags	dictionary flags
=46681					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6de					ldya_immed_comma:
.b6de	a9 a0		lda #$a0			lda #$a0		; ldy #
.b6e0	b4 25		ldy $25,x			ldy DStack+1,x
.b6e2	20 23 cc	jsr $cc23			jsr Comma_YA
.b6e5					lda_immed_comma:
.b6e5	a9 a9		lda #$a9			lda #$a9		; lda #
.b6e7	20 09 cc	jsr $cc09			jsr C_Comma_A
.b6ea	4c 06 cc	jmp $cc06			jmp C_Comma
=15					CL	.var *-(WordListLink+wh_Xt)
=$b6ed					en = *	; remember here
>b6dc	0f					.byte CL	;wh_CodeLength
>b6ed	50 75 73 68 59 41		L1:	.text "PushYA"	;  name of word as a string, ending at wh_NameLastChar
>b6f3	06					.byte *-L1	;wh_NameLength	length of name
>b6f4	59 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6f6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6f7	00					.byte 0	;wh_Flags	dictionary flags
=46707					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6f8	ca		dex		PushYA:		dex
.b6f9	ca		dex				dex
.b6fa	95 24		sta $24,x			sta DStack+0,x
.b6fc	94 25		sty $25,x			sty DStack+1,x
=6					CL	.var *-(WordListLink+wh_Xt)
=$b6fe					en = *	; remember here
>b6f6	06					.byte CL	;wh_CodeLength
.b6fe	60		rts				rts
>b6ff	42 61 73 65			L1:	.text "Base"	;  name of word as a string, ending at wh_NameLastChar
>b703	04					.byte *-L1	;wh_NameLength	length of name
>b704	73 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b706	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b707	08					.byte NN	;wh_Flags	dictionary flags
=46723					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b708	a0 03		ldy #$03			ldy #>base
.b70a	a9 00		lda #$00			lda #<base
.b70c	4c f8 b6	jmp $b6f8			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b70f					en = *	; remember here
>b706	07					.byte CL	;wh_CodeLength
>b70f	54 72 75 65			L1:	.text "True"	;  name of word as a string, ending at wh_NameLastChar
>b713	04					.byte *-L1	;wh_NameLength	length of name
>b714	83 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b716	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b717	00					.byte 0	;wh_Flags	dictionary flags
=46739					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b718	a9 ff		lda #$ff	True:		lda #$FF
.b71a	ca		dex		PushAA:		dex
.b71b	ca		dex				dex
.b71c	95 24		sta $24,x			sta DStack+0,x
.b71e	95 25		sta $25,x			sta DStack+1,x
=8					CL	.var *-(WordListLink+wh_Xt)
=$b720					en = *	; remember here
>b716	08					.byte CL	;wh_CodeLength
.b720	60		rts				rts
>b721	46 61 6c 73 65			L1:	.text "False"	;  name of word as a string, ending at wh_NameLastChar
>b726	05					.byte *-L1	;wh_NameLength	length of name
>b727	93 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b729	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b72a	08					.byte NN	;wh_Flags	dictionary flags
=46758					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b72b	a9 00		lda #$00	False:		lda #0
.b72d	f0 0b		beq $b73a			beq PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b72f					en = *	; remember here
>b729	04					.byte CL	;wh_CodeLength
>b72f	50 75 73 68 5a 41		L1:	.text "PushZA"	;  name of word as a string, ending at wh_NameLastChar
>b735	06					.byte *-L1	;wh_NameLength	length of name
>b736	a6 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b738	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b739	00					.byte 0	;wh_Flags	dictionary flags
=46773					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b73a	ca		dex		PushZA:		dex
.b73b	ca		dex				dex
.b73c	95 24		sta $24,x			sta DStack+0,x
.b73e	a9 00		lda #$00			lda #0
.b740	95 25		sta $25,x			sta DStack+1,x
=8					CL	.var *-(WordListLink+wh_Xt)
=$b742					en = *	; remember here
>b738	08					.byte CL	;wh_CodeLength
.b742	60		rts				rts
>b743	30				L1:	.text "0"	;  name of word as a string, ending at wh_NameLastChar
>b744	01					.byte *-L1	;wh_NameLength	length of name
>b745	b5 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b747	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b748	08					.byte NN	;wh_Flags	dictionary flags
=46788					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b749	a9 00		lda #$00	Zero:		lda #0
.b74b	f0 ed		beq $b73a			beq PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b74d					en = *	; remember here
>b747	04					.byte CL	;wh_CodeLength
>b74d	31				L1:	.text "1"	;  name of word as a string, ending at wh_NameLastChar
>b74e	01					.byte *-L1	;wh_NameLength	length of name
>b74f	c4 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b751	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b752	08					.byte NN	;wh_Flags	dictionary flags
=46798					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b753	a9 01		lda #$01	One:		lda #1
.b755	d0 e3		bne $b73a			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b757					en = *	; remember here
>b751	04					.byte CL	;wh_CodeLength
>b757	32				L1:	.text "2"	;  name of word as a string, ending at wh_NameLastChar
>b758	01					.byte *-L1	;wh_NameLength	length of name
>b759	ce b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b75b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b75c	08					.byte NN	;wh_Flags	dictionary flags
=46808					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b75d	a9 02		lda #$02	Two:		lda #2
.b75f	d0 d9		bne $b73a			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b761					en = *	; remember here
>b75b	04					.byte CL	;wh_CodeLength
>b761	42 6c				L1:	.text "Bl"	;  name of word as a string, ending at wh_NameLastChar
>b763	02					.byte *-L1	;wh_NameLength	length of name
>b764	d8 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b766	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b767	08					.byte NN	;wh_Flags	dictionary flags
=46819					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b768	a9 20		lda #$20	Bl:		lda #AscSP
.b76a	d0 ce		bne $b73a			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b76c					en = *	; remember here
>b766	04					.byte CL	;wh_CodeLength
>b76c	3e 49 6e			L1:	.text ">In"	;  name of word as a string, ending at wh_NameLastChar
>b76f	03					.byte *-L1	;wh_NameLength	length of name
>b770	e3 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b772	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b773	08					.byte NN	;wh_Flags	dictionary flags
=46831					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b774	a9 08		lda #$08			lda #ToIn
.b776	4c 3a b7	jmp $b73a			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b779					en = *	; remember here
>b772	05					.byte CL	;wh_CodeLength
>b779	53 74 61 74 65			L1:	.text "State"	;  name of word as a string, ending at wh_NameLastChar
>b77e	05					.byte *-L1	;wh_NameLength	length of name
>b77f	ef b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b781	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b782	08					.byte NN	;wh_Flags	dictionary flags
=46846					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b783	a9 0a		lda #$0a			lda #state
.b785	4c 3a b7	jmp $b73a			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b788					en = *	; remember here
>b781	05					.byte CL	;wh_CodeLength
>b788	64 70				L1:	.text "dp"	;  name of word as a string, ending at wh_NameLastChar
>b78a	02					.byte *-L1	;wh_NameLength	length of name
>b78b	fe b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b78d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b78e	08					.byte NN	;wh_Flags	dictionary flags
=46858					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b78f	a9 10		lda #$10			lda #dp
.b791	4c 3a b7	jmp $b73a			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b794					en = *	; remember here
>b78d	05					.byte CL	;wh_CodeLength
>b794	54 6d 70 31			L1:	.text "Tmp1"	;  name of word as a string, ending at wh_NameLastChar
>b798	04					.byte *-L1	;wh_NameLength	length of name
>b799	0a b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b79b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b79c	08					.byte NN	;wh_Flags	dictionary flags
=46872					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b79d	a9 14		lda #$14			lda #tmp1
.b79f	4c 3a b7	jmp $b73a			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b7a2					en = *	; remember here
>b79b	05					.byte CL	;wh_CodeLength
>b7a2	44 53 74 61 63 6b		L1:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
>b7a8	06					.byte *-L1	;wh_NameLength	length of name
>b7a9	18 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7ac	08					.byte NN	;wh_Flags	dictionary flags
=46888					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7ad	a9 24		lda #$24			lda #DStack
.b7af	4c 3a b7	jmp $b73a			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b7b2					en = *	; remember here
>b7ab	05					.byte CL	;wh_CodeLength
>b7b2	32 4c 69 74 65 72 61 6c		L1:	.text "2Literal"	;  name of word as a string, ending at wh_NameLastChar
>b7ba	08					.byte *-L1	;wh_NameLength	length of name
>b7bb	28 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7bd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7be	1c					.byte UF+IM+NN	;wh_Flags	dictionary flags
=46906					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7bf					Two_literal:
.b7bf	20 7f b3	jsr $b37f			jsr underflow_2 ; double number
.b7c2	20 88 ce	jsr $ce88			jsr Swap
.b7c5	20 ab b6	jsr $b6ab			jsr Literal	; do lo cell
.b7c8	4c ab b6	jmp $b6ab			jmp Literal	; do hi cell
=12					CL	.var *-(WordListLink+wh_Xt)
=$b7cb					en = *	; remember here
>b7bd	0c					.byte CL	;wh_CodeLength
>b7cb	53 4c 69 74 65 72 61 6c		L1:	.text "SLiteral"	;  name of word as a string, ending at wh_NameLastChar
>b7d3	08					.byte *-L1	;wh_NameLength	length of name
>b7d4	3a b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7d6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7d7	1d					.byte CO+IM+UF+NN	;wh_Flags	dictionary flags
=46931					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7d8					SLiteral:
.b7d8	20 7f b3	jsr $b37f			jsr underflow_2
.b7db	20 fb b7	jsr $b7fb			jsr SLiteral_Start	; compile header
.b7de	4c ef b7	jmp $b7ef			jmp _Move_Test
.b7e1	a1 28		lda ($28,x)	_Move_Loop:	lda (DStack+4,x)
.b7e3	20 09 cc	jsr $cc09			jsr C_Comma_A
.b7e6	f6 28		inc $28,x			inc DStack+4,x
.b7e8	d0 02		bne $b7ec			bne +
.b7ea	f6 29		inc $29,x			inc DStack+5,x
.b7ec					+
.b7ec	20 46 c9	jsr $c946			jsr NOS_One_Minus
.b7ef	b5 26		lda $26,x	_Move_Test:	lda DStack+2,x
.b7f1	15 27		ora $27,x			ora DStack+3,x
.b7f3	d0 ec		bne $b7e1			bne _Move_Loop
.b7f5	20 08 b8	jsr $b808			jsr SLiteral_End
.b7f8	4c 2b c4	jmp $c42b			jmp Two_Drop		; clean up and leave
=35					CL	.var *-(WordListLink+wh_Xt)
=$b7fb					en = *	; remember here
>b7d6	23					.byte CL	;wh_CodeLength
.b7fb					SLiteral_Start:
.b7fb	a9 19		lda #$19			lda #<SLiteral_runtime	; compile JSR SLiteral_Runtime
.b7fd	a0 b8		ldy #$b8			ldy #>SLiteral_runtime
.b7ff	20 48 cc	jsr $cc48			jsr Jsr_Comma_YA
.b802	20 2c c9	jsr $c92c			jsr Here		; push addr of start of JMP
.b805	4c 5f cc	jmp $cc5f			jmp Jmp_Comma_YA	; compile JMP around string (dummy addr)
.b808					SLiteral_End:
.b808	20 60 c9	jsr $c960			jsr One_Plus
.b80b	a5 00		lda $00				lda cp+0		; Update the address of the jump to HERE.
.b80d	81 24		sta ($24,x)			sta (DStack+0,x)
.b80f	20 60 c9	jsr $c960			jsr One_Plus
.b812	a5 01		lda $01				lda cp+1
.b814	81 24		sta ($24,x)			sta (DStack+0,x)
.b816	e8		inx				inx			; drop herej
.b817	e8		inx				inx
.b818	60		rts				rts
.b819					SLiteral_Runtime:
.b819	86 16		stx $16				stx tmp2	; save data stack index
.b81b	ba		tsx				tsx
.b81c	bd 01 01	lda $0101,x	SLiteral_Run2:	lda RStack+1,x	; tmp1= RTS addr
.b81f	85 14		sta $14				sta tmp1+0
.b821	bd 02 01	lda $0102,x			lda RStack+2,x
.b824	85 15		sta $15				sta tmp1+1
.b826	a6 16		ldx $16				ldx tmp2	; restore data stack index
.b828	ca		dex				dex		; push string addr
.b829	ca		dex				dex
.b82a	18		clc				clc
.b82b	a5 14		lda $14				lda tmp1+0
.b82d	69 04		adc #$04			adc #3+1	;   just after the following JMP + correcting for JSR behavior
.b82f	95 24		sta $24,x			sta DStack+0,x
.b831	a5 15		lda $15				lda tmp1+1
.b833	69 00		adc #$00			adc #0
.b835	95 25		sta $25,x			sta DStack+1,x
.b837	ca		dex				dex		; push string length
.b838	ca		dex				dex
.b839	38		sec				sec
.b83a	a0 02		ldy #$02			ldy #2		;   = string_end - string_addr
.b83c	b1 14		lda ($14),y			lda (tmp1),y
.b83e	f5 26		sbc $26,x			sbc DStack+2,x
.b840	95 24		sta $24,x			sta DStack+0,x
.b842	c8		iny				iny
.b843	b1 14		lda ($14),y			lda (tmp1),y
.b845	f5 27		sbc $27,x			sbc DStack+3,x
.b847	95 25		sta $25,x			sta DStack+1,x
.b849	60		rts				rts
>b84a	2e 22				L1:	.text '."'	;  name of word as a string, ending at wh_NameLastChar
>b84c	02					.byte *-L1	;wh_NameLength	length of name
>b84d	53 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b84f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b850	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=47052					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b851					Dot_quote:
.b851	20 62 b8	jsr $b862			jsr S_Quote		; compile the string literal
.b854	a0 cc		ldy #$cc			ldy #>Type		; compile: print string
.b856	a9 f2		lda #$f2			lda #<Type
.b858	4c 48 cc	jmp $cc48			jmp Jsr_Comma_YA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b85b					en = *	; remember here
>b84f	0a					.byte CL	;wh_CodeLength
>b85b	53 22				L1:	.text 'S"'	;  name of word as a string, ending at wh_NameLastChar
>b85d	02					.byte *-L1	;wh_NameLength	length of name
>b85e	cc b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b860	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b861	0c					.byte IM+NN	;wh_Flags	dictionary flags
=47069					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b862					S_Quote:
.b862	a9 00		lda #$00			lda #0		; Don't handle escaped chars.
.b864					S_Quote_start:
.b864	48		pha				pha			; save "handle escaped chars" flag
.b865	a5 0a		lda $0a				lda state		; compiling?
.b867	f0 06		beq $b86f			beq _15
.b869	20 fb b7	jsr $b7fb			jsr SLiteral_Start	; compile SLiteral header
.b86c	4c 72 b8	jmp $b872			jmp _19
.b86f	20 2c c9	jsr $c92c	_15:		jsr Here		; remember start addr
.b872					_19:
.b872	68		pla				pla			; init t2 flags
.b873	20 3a b7	jsr $b73a			jsr PushZA
.b876	20 49 b7	jsr $b749			jsr Zero		; init t3 flags
.b879					_savechars_loop:
.b879	a5 08		lda $08				lda toin+0		; LSB
.b87b	c5 06		cmp $06				cmp ciblen+0
.b87d	a5 09		lda $09				lda toin+1		; MSB
.b87f	e5 07		sbc $07				sbc ciblen+1
.b881	90 10		bcc $b893			bcc _input_fine		; input buffer empty?
.b883	20 a1 c1	jsr $c1a1			jsr Refill		; Refill it  ( -- f )
.b886	b5 24		lda $24,x			lda DStack+0,x		; Check result of refill.
.b888	d0 05		bne $b88f			bne +
.b88a	a9 6b		lda #$6b			lda #$100+err_refill	; Something when wrong with refill.
.b88c	4c c9 b3	jmp $b3c9			jmp ThrowA
.b88f	e8		inx		+		inx			; Drop the refill flag
.b890	e8		inx				inx
.b891	d0 e6		bne $b879			bne _savechars_loop	; jump back up to the empty check, just in
.b893					_input_fine:
.b893	18		clc				clc			; tmp1= A= the char at Cib+ToIn
.b894	a5 04		lda $04				lda cib+0
.b896	85 14		sta $14				sta tmp1+0
.b898	a5 05		lda $05				lda cib+1
.b89a	65 09		adc $09				adc toin+1
.b89c	85 15		sta $15				sta tmp1+1
.b89e	a4 08		ldy $08				ldy ToIn
.b8a0	b1 14		lda ($14),y			lda (tmp1),y
.b8a2	85 14		sta $14				sta tmp1
.b8a4	e6 08		inc $08				inc toin+0		; Move on to the next character.
.b8a6	d0 02		bne $b8aa			bne +
.b8a8	e6 09		inc $09				inc toin+1
.b8aa					+
.b8aa	b4 26		ldy $26,x			ldy DStack+2,x		; handling escaped characters?
.b8ac	30 03		bmi $b8b1			bmi +
.b8ae	4c 54 b9	jmp $b954			jmp _regular_char
.b8b1					+
.b8b1	b4 27		ldy $27,x			ldy DStack+3,x  		; already seen the backslash?
.b8b3	30 03		bmi $b8b8			bmi +
.b8b5	4c 4a b9	jmp $b94a			jmp _not_escaped
.b8b8					+
.b8b8	84 15		sty $15				sty tmp1+1
.b8ba	24 15		bit $15				bit tmp1+1		; in the middle of a \x sequence ?
.b8bc	70 25		bvs $b8e3			bvs _check_esc_chars
.b8be	a9 01		lda #$01			lda #1
.b8c0	24 15		bit $15				bit tmp1+1
.b8c2	d0 11		bne $b8d5			bne _esc_x_second_digit
.b8c4	c8		iny				iny			; Adjust flag for second digit next time.
.b8c5	94 27		sty $27,x			sty DStack+3,x
.b8c7	a5 14		lda $14				lda tmp1+0		; Get the char again.
.b8c9	20 77 b9	jsr $b977			jsr convert_hex_value	; Convert to hex
.b8cc	0a		asl a				asl			; This is the upper nybble, so move it up.
.b8cd	0a		asl a				asl
.b8ce	0a		asl a				asl
.b8cf	0a		asl a				asl
.b8d0	95 24		sta $24,x			sta DStack+0,x		; Save it for later.
.b8d2	4c 5b b9	jmp $b95b			jmp _next_character
.b8d5					_esc_x_second_digit:
.b8d5	a9 00		lda #$00			lda #0			; Clear the escaped character flag
.b8d7	95 27		sta $27,x			sta DStack+3,x		;   (because we are handling it right here)
.b8d9	a5 14		lda $14				lda tmp1+0		; Convert to hex
.b8db	20 77 b9	jsr $b977			jsr convert_hex_value
.b8de	15 24		ora $24,x			ora DStack+0,x		; combine with value in t3
.b8e0	4c 58 b9	jmp $b958			jmp _save_character
.b8e3					_check_esc_chars:
.b8e3	a0 00		ldy #$00			ldy #0
.b8e5	94 27		sty $27,x			sty DStack+3,x
.b8e7	a8		tay				tay
.b8e8	a9 07		lda #$07			lda #AscBELL	      ; BEL (ASCII value 7)
.b8ea	c0 61		cpy #$61			cpy #'a'
.b8ec	f0 6a		beq $b958			beq _save_character
.b8ee	a9 08		lda #$08			lda #AscBS	      ; Backspace (ASCII value 8)
.b8f0	c0 62		cpy #$62			cpy #'b'
.b8f2	f0 64		beq $b958			beq _save_character
.b8f4	a9 1b		lda #$1b			lda #AscESC	       ; ESC (ASCII value 27)
.b8f6	c0 65		cpy #$65			cpy #'e'
.b8f8	f0 5e		beq $b958			beq _save_character
.b8fa	a9 0c		lda #$0c			lda #AscFF	       ; FF (ASCII value 12)
.b8fc	c0 66		cpy #$66			cpy #'f'
.b8fe	f0 58		beq $b958			beq _save_character
.b900	a9 0a		lda #$0a			lda #AscLF	       ; LF (ASCII value 10)
.b902	c0 6c		cpy #$6c			cpy #'l'
.b904	f0 52		beq $b958			beq _save_character
.b906	c0 6e		cpy #$6e			cpy #'n'
.b908	f0 4e		beq $b958			beq _save_character
.b90a	c0 6d		cpy #$6d			cpy #'m'
.b90c	d0 09		bne $b917			bne +
.b90e	a9 0d		lda #$0d			lda #AscCR		; CR/LF pair (ASCII values 13, 10)
.b910	20 09 cc	jsr $cc09			jsr C_Comma_A
.b913	a9 0a		lda #$0a			lda #AscLF
.b915	d0 41		bne $b958			bne _save_character
.b917					+
.b917	a9 22		lda #$22			lda #AscDQuote		; Double quote (ASCII value 34)
.b919	c0 71		cpy #$71			cpy #'q'
.b91b	f0 3b		beq $b958			beq _save_character
.b91d	c0 22		cpy #$22			cpy #AscDQuote
.b91f	f0 37		beq $b958			beq _save_character
.b921	a9 0d		lda #$0d			lda #AscCR		; CR (ASCII value 13)
.b923	c0 72		cpy #$72			cpy #'r'
.b925	f0 31		beq $b958			beq _save_character
.b927	a9 09		lda #$09			lda #AscHT		; Horizontal TAB (ASCII value 9)
.b929	c0 74		cpy #$74			cpy #'t'
.b92b	f0 2b		beq $b958			beq _save_character
.b92d	a9 0b		lda #$0b			lda #AscVT		; Vertical TAB (ASCII value 11)
.b92f	c0 76		cpy #$76			cpy #'v'
.b931	f0 25		beq $b958			beq _save_character
.b933	a9 00		lda #$00			lda #0			; NULL (ASCII value 0)
.b935	c0 7a		cpy #$7a			cpy #'z'
.b937	f0 1f		beq $b958			beq _save_character
.b939					_check_esc_x:
.b939	c0 78		cpy #$78			cpy #'x'
.b93b	d0 06		bne $b943			bne +
.b93d	a9 be		lda #$be			lda #$BE	; Clear bits 6 and 0
.b93f	95 27		sta $27,x			sta DStack+3,x
.b941	d0 18		bne $b95b			bne _next_character
.b943					+
.b943	a9 5c		lda #$5c			lda #AscBackslash	; Backslash (ASCII value 92)
.b945	c0 5c		cpy #$5c			cpy #AscBackslash
.b947	f0 0f		beq $b958			beq _save_character
.b949	98		tya				tya
.b94a					_not_escaped:
.b94a	c9 5c		cmp #$5c			cmp #$5C	; The backslash char
.b94c	d0 06		bne $b954			bne _regular_char
.b94e	a9 ff		lda #$ff			lda #$FF
.b950	95 27		sta $27,x			sta DStack+3,x
.b952	d0 07		bne $b95b			bne _next_character
.b954					_regular_char:
.b954	c9 22		cmp #$22			cmp #AscDQuote		; ASCII for "
.b956	f0 06		beq $b95e			beq _found_string_end
.b958					_save_character:
.b958	20 09 cc	jsr $cc09			jsr C_Comma_A		; compile this character into the dictionary
.b95b					_next_character:
.b95b	4c 79 b8	jmp $b879			jmp _savechars_loop
.b95e					_found_string_end:
.b95e	e8		inx				inx			; Drop t3
.b95f	e8		inx				inx
.b960	a5 0a		lda $0a				lda state		; What happens next depends on the state (which is bad, but
.b962	d0 0e		bne $b972			bne _cmpl		; that's the way it works at the moment).
.b964	38		sec				sec			; TOS= length of string = Here - start_addr
.b965	a5 00		lda $00				lda cp+0
.b967	f5 26		sbc $26,x			sbc DStack+2,x
.b969	95 24		sta $24,x			sta DStack+0,x		;   LSB
.b96b	a5 01		lda $01				lda cp+1
.b96d	f5 27		sbc $27,x			sbc DStack+3,x
.b96f	95 25		sta $25,x			sta DStack+1,x		;   MSB
.b971	60		rts				rts			; ( startaddr u )
.b972					_cmpl:
.b972	e8		inx				inx			; Drop t2
.b973	e8		inx				inx
.b974	4c 08 b8	jmp $b808			jmp SLiteral_End	; ( jmpaddr )
=277					CL	.var *-(WordListLink+wh_Xt)
=$ff					CL	 .var $ff
=$b977					en = *	; remember here
>b860	ff					.byte CL	;wh_CodeLength
.b977					convert_hex_value:
.b977	c9 41		cmp #$41			cmp #'A'
.b979	90 05		bcc $b980			bcc _digit
.b97b	29 1f		and #$1f	_alpha:		and #$1F		; Make it uppercase.
.b97d	69 08		adc #$08			adc #9-1		; gives value 10 for 'A'
.b97f	60		rts				rts
.b980					_digit:
.b980	e9 2f		sbc #$2f			sbc #'0'-1
.b982	60		rts				rts
>b983	53 5c 22			L1:	.text 'S\"'	;  name of word as a string, ending at wh_NameLastChar
>b986	03					.byte *-L1	;wh_NameLength	length of name
>b987	dd b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b989	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b98a	0c					.byte IM+NN	;wh_Flags	dictionary flags
=47366					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b98b					S_Backslash_Quote:
.b98b	a9 ff		lda #$ff			lda #$ff	; Do handle escaped chars.
.b98d	4c 64 b8	jmp $b864			jmp S_Quote_start
=5					CL	.var *-(WordListLink+wh_Xt)
=$b990					en = *	; remember here
>b989	05					.byte CL	;wh_CodeLength
>b990	4c 61 74 65 73 74 58 74		L1:	.text "LatestXt"	;  name of word as a string, ending at wh_NameLastChar
>b998	08					.byte *-L1	;wh_NameLength	length of name
>b999	06 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b99b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b99c	08					.byte NN	;wh_Flags	dictionary flags
=47384					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b99d	20 b0 b9	jsr $b9b0	LatestXt:	jsr LatestNt	; ( nt )
.b9a0	4c 20 bd	jmp $bd20			jmp Name_To_Int	; ( xt )
=6					CL	.var *-(WordListLink+wh_Xt)
=$b9a3					en = *	; remember here
>b99b	06					.byte CL	;wh_CodeLength
>b9a3	4c 61 74 65 73 74 4e 74		L1:	.text "LatestNt"	;  name of word as a string, ending at wh_NameLastChar
>b9ab	08					.byte *-L1	;wh_NameLength	length of name
>b9ac	18 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b9ae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b9af	08					.byte NN	;wh_Flags	dictionary flags
=47403					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b9b0	20 ba b9	jsr $b9ba	LatestNt:	jsr current_to_dp
.b9b3	a5 10		lda $10				lda dp+0
.b9b5	a4 11		ldy $11				ldy dp+1
.b9b7	4c f8 b6	jmp $b6f8			jmp PushYA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b9ba					en = *	; remember here
>b9ae	0a					.byte CL	;wh_CodeLength
.b9ba					current_to_dp:
.b9ba	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.b9bd	0a		asl a				asl			; dp= wordlists[A]
.b9be	a8		tay				tay
.b9bf	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.b9c2	85 10		sta $10				sta dp+0
.b9c4	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.b9c7	85 11		sta $11				sta dp+1
.b9c9	60		rts				rts
.b9ca					dp_to_current:
.b9ca	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.b9cd	0a		asl a		                asl			; wordlists[A]=dp
.b9ce	a8		tay		                tay
.b9cf	a5 10		lda $10		                lda dp+0
.b9d1	99 12 03	sta $0312,y			sta WordlistsV+0,y
.b9d4	a5 11		lda $11		                lda dp+1
.b9d6	99 13 03	sta $0313,y	                sta WordlistsV+1,y
.b9d9	60		rts		                rts
>b9da	50 61 72 73 65 2d 4e 61		L1:	.text "Parse-Name"	;  name of word as a string, ending at wh_NameLastChar
>b9e2	6d 65
>b9e4	0a					.byte *-L1	;wh_NameLength	length of name
>b9e5	2b b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b9e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b9e8	08					.byte NN	;wh_Flags	dictionary flags
=47460					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b9e9					Parse_Name:
.b9e9	a5 04		lda $04				lda cib+0		; tmp2= cib+(toin & $ff00)
.b9eb	85 16		sta $16				sta tmp2+0
.b9ed	18		clc				clc
.b9ee	a5 05		lda $05				lda cib+1
.b9f0	65 09		adc $09				adc toin+1
.b9f2	85 17		sta $17				sta tmp2+1
.b9f4	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.b9f6					_skip_loop:
.b9f6	c4 06		cpy $06				cpy ciblen+0		; more chars left?
.b9f8	a5 09		lda $09				lda toin+1
.b9fa	e5 07		sbc $07				sbc ciblen+1
.b9fc	b0 11		bcs $ba0f			bcs _empty_line
.b9fe	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.ba00	c9 21		cmp #$21			cmp #AscSP+1		; is_whitespace
.ba02	b0 10		bcs $ba14			bcs _char_found
.ba04	c8		iny				iny			; increment toin
.ba05	84 08		sty $08				sty toin+0
.ba07	d0 ed		bne $b9f6			bne _skip_loop
.ba09	e6 09		inc $09				inc toin+1
.ba0b	e6 17		inc $17				inc tmp2+1
.ba0d	d0 e7		bne $b9f6			bne _skip_loop
.ba0f					_empty_line:
.ba0f	ca		dex				dex			; junk address
.ba10	ca		dex				dex
.ba11	4c 49 b7	jmp $b749			jmp Zero		; length=0
.ba14					_char_found:
.ba14	20 68 b7	jsr $b768			jsr Bl			; push delimiter char
.ba17	4c 31 ba	jmp $ba31			jmp Parse
=49					CL	.var *-(WordListLink+wh_Xt)
=$ba1a					en = *	; remember here
>b9e7	31					.byte CL	;wh_CodeLength
.ba1a					parse_name_check:
.ba1a	20 e9 b9	jsr $b9e9			jsr parse_name		; get character from string
.ba1d	b5 24		lda $24,x			lda DStack+0,x		; empty string?
.ba1f	f0 01		beq $ba22			beq _empty
.ba21	60		rts				rts
.ba22	a9 f3		lda #$f3	_empty:		lda #$100+err_UndefinedWord	; complain & abort
.ba24	4c c9 b3	jmp $b3c9			jmp ThrowA
>ba27	50 61 72 73 65			L1:	.text "Parse"	;  name of word as a string, ending at wh_NameLastChar
>ba2c	05					.byte *-L1	;wh_NameLength	length of name
>ba2d	64 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba2f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba30	08					.byte NN	;wh_Flags	dictionary flags
=47532					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba31	20 24 b3	jsr $b324	Parse:		jsr PopA		; pop c (check for underflow)
.ba34	85 1c		sta $1c		Parse_A:	sta tmp5		; save delimiter
.ba36	ca		dex				dex			; alloc space for addr
.ba37	ca		dex				dex
.ba38	ca		dex				dex			; alloc space for length
.ba39	ca		dex				dex
.ba3a	18		clc				clc			; addr= cib+toin
.ba3b	a5 08		lda $08				lda toin+0
.ba3d	65 04		adc $04				adc cib+0
.ba3f	95 26		sta $26,x			sta DStack+2,x
.ba41	a5 09		lda $09				lda toin+1
.ba43	65 05		adc $05				adc cib+1
.ba45	95 27		sta $27,x			sta DStack+3,x
.ba47	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.ba49	84 14		sty $14				sty tmp1+0
.ba4b	a5 04		lda $04				lda cib+0		; tmp2= cib + (toin & $ff00)
.ba4d	85 16		sta $16				sta tmp2+0
.ba4f	18		clc				clc
.ba50	a5 09		lda $09				lda toin+1		; tmp1= toin
.ba52	85 15		sta $15				sta tmp1+1
.ba54	65 05		adc $05				adc cib+1
.ba56	85 17		sta $17				sta tmp2+1
.ba58	a9 00		lda #$00			lda #0		; Initialize the offset we use to adjust EOL or found delimiter
.ba5a	85 1d		sta $1d				sta tmp5+1
.ba5c					_loop:
.ba5c	c4 06		cpy $06				cpy ciblen+0		; end of string?
.ba5e	a5 09		lda $09				lda toin+1
.ba60	e5 07		sbc $07				sbc ciblen+1
.ba62	b0 1d		bcs $ba81			bcs _eol
.ba64	a5 1c		lda $1c				lda tmp5+0		; get delimiter
.ba66	c9 20		cmp #$20			cmp #AscSP		; is it whitespace?
.ba68	d0 08		bne $ba72			bne _not_whitespace
.ba6a	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.ba6c	c9 21		cmp #$21			cmp #AscSP+1		; we're looking for all whitespace
.ba6e	90 0f		bcc $ba7f			bcc _found_delimiter
.ba70	b0 04		bcs $ba76			bcs _not_delimiter
.ba72	d1 16		cmp ($16),y	_not_whitespace: cmp (tmp2),y		; compare delimter to cib[toin]
.ba74	f0 09		beq $ba7f			beq _found_delimiter
.ba76					_not_delimiter:
.ba76	c8		iny				iny			; next character
.ba77	d0 e3		bne $ba5c			bne _loop
.ba79	e6 09		inc $09				inc toin+1
.ba7b	e6 17		inc $17				inc tmp2+1
.ba7d	d0 dd		bne $ba5c			bne _loop
.ba7f					_found_delimiter:
.ba7f	e6 1d		inc $1d				inc tmp5+1
.ba81					_eol:
.ba81	38		sec				sec			; length = toin - tmp1
.ba82	98		tya				tya
.ba83	e5 14		sbc $14				sbc tmp1+0
.ba85	95 24		sta $24,x			sta DStack+0,x
.ba87	a5 09		lda $09				lda toin+1
.ba89	e5 15		sbc $15				sbc tmp1+1
.ba8b	95 25		sta $25,x			sta DStack+1,x
.ba8d	18		clc				clc			; toin = toin + delimiter_offset
.ba8e	98		tya				tya
.ba8f	65 1d		adc $1d				adc tmp5+1
.ba91	85 08		sta $08				sta toin+0
.ba93	90 02		bcc $ba97			bcc +
.ba95	e6 09		inc $09				inc toin+1
.ba97					+
=102					CL	.var *-(WordListLink+wh_Xt)
=$ba97					en = *	; remember here
>ba2f	66					.byte CL	;wh_CodeLength
.ba97	60		rts				rts
>ba98	45 78 65 63 75 74 65 2d		L1:	.text "Execute-Parsing"	;  name of word as a string, ending at wh_NameLastChar
>baa0	50 61 72 73 69 6e 67
>baa7	0f					.byte *-L1	;wh_NameLength	length of name
>baa8	ac b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>baaa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>baab	18					.byte UF+NN	;wh_Flags	dictionary flags
=47655					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.baac					Execute_parsing:
.baac	20 84 b3	jsr $b384			jsr underflow_3
.baaf	20 1d c3	jsr $c31d			jsr Input_To_R		; save existing input for later
.bab2	20 94 cd	jsr $cd94			jsr Not_Rot		; -ROT ( xt addr u )
.bab5	20 40 b3	jsr $b340			jsr PopYA		; TOS is new ciblen
.bab8	85 06		sta $06				sta ciblen+0
.baba	84 07		sty $07				sty ciblen+1
.babc	20 40 b3	jsr $b340			jsr PopYA		; NOS is new cib
.babf	85 04		sta $04				sta cib+0
.bac1	84 05		sty $05				sty cib+1
.bac3	a9 00		lda #$00			lda #0
.bac5	85 08		sta $08				sta toin+0		; Set >IN to zero
.bac7	85 09		sta $09				sta toin+1
.bac9	20 30 cd	jsr $cd30			jsr Execute
.bacc	20 3f c3	jsr $c33f			jsr R_To_Input		; restore
=35					CL	.var *-(WordListLink+wh_Xt)
=$bacf					en = *	; remember here
>baaa	23					.byte CL	;wh_CodeLength
.bacf	60		rts				rts
>bad0	53 6f 75 72 63 65		L1:	.text "Source"	;  name of word as a string, ending at wh_NameLastChar
>bad6	06					.byte *-L1	;wh_NameLength	length of name
>bad7	27 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bad9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bada	08					.byte NN	;wh_Flags	dictionary flags
=47702					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.badb					Source:
.badb	a5 04		lda $04				lda cib+0	; push address
.badd	a4 05		ldy $05				ldy cib+1
.badf	20 f8 b6	jsr $b6f8			jsr PushYA
.bae2	a5 06		lda $06				lda ciblen+0	; push size, return
.bae4	a4 07		ldy $07				ldy ciblen+1
.bae6	4c f8 b6	jmp $b6f8			jmp PushYA
=14					CL	.var *-(WordListLink+wh_Xt)
=$bae9					en = *	; remember here
>bad9	0e					.byte CL	;wh_CodeLength
>bae9	53 6f 75 72 63 65 2d 49		L1:	.text "Source-Id"	;  name of word as a string, ending at wh_NameLastChar
>baf1	64
>baf2	09					.byte *-L1	;wh_NameLength	length of name
>baf3	56 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>baf5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>baf6	08					.byte NN	;wh_Flags	dictionary flags
=47730					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.baf7	a5 02		lda $02		Source_Id:	lda insrc+0
.baf9	a4 03		ldy $03				ldy insrc+1
.bafb	4c f8 b6	jmp $b6f8			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$bafe					en = *	; remember here
>baf5	07					.byte CL	;wh_CodeLength
>bafe	45 78 69 74			L1:	.text "Exit"	;  name of word as a string, ending at wh_NameLastChar
>bb02	04					.byte *-L1	;wh_NameLength	length of name
>bb03	72 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb05	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb06	03					.byte AN+CO	;wh_Flags	dictionary flags
=47746					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb07					Exit:
.bb07	60		rts				rts		; keep before FEnd so it gets inlined
=1					CL	.var *-(WordListLink+wh_Xt)
=$bb08					en = *	; remember here
>bb05	01					.byte CL	;wh_CodeLength
>bb08	3b				L1:	.text ";"	;  name of word as a string, ending at wh_NameLastChar
>bb09	01					.byte *-L1	;wh_NameLength	length of name
>bb0a	82 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb0c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb0d	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=47753					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb0e					Semicolon:
.bb0e	20 7c b6	jsr $b67c			jsr Left_Bracket	; switch to interpret state
.bb11	24 0c		bit $0c				bit status		; is this a : word or a :NONAME word?
.bb13	70 0c		bvs $bb21			bvs _colonword
.bb15	a9 60		lda #$60			lda #$60		; compile an RTS
.bb17	20 09 cc	jsr $cc09			jsr C_Comma_A
.bb1a	a5 0e		lda $0e				lda workword+0		; push xt, return
.bb1c	a4 0f		ldy $0f				ldy workword+1
.bb1e	4c f8 b6	jmp $b6f8			jmp PushYA
.bb21					_colonword:
.bb21	24 0c		bit $0c				bit status
.bb23	10 1d		bpl $bb42			bpl _new_word	; Bit 7 is clear = new word
.bb25	a5 0e		lda $0e				lda WorkWord+0		; push our nt
.bb27	a4 0f		ldy $0f				ldy WorkWord+1
.bb29	20 f8 b6	jsr $b6f8			jsr PushYA
.bb2c	20 38 bd	jsr $bd38			jsr Name_To_String	; get our name string
.bb2f	a9 30		lda #$30			lda #<str_redefined	; string "redefined"
.bb31	a0 da		ldy #$da			ldy #>str_redefined
.bb33	20 13 cd	jsr $cd13			jsr Print_ASCIIZ_YA_no_lf
.bb36	20 f2 cc	jsr $ccf2			jsr Type		; print the offending word.
.bb39	20 e5 cc	jsr $cce5			jsr Space
.bb3c	a9 7f		lda #$7f			lda #$ff-%10000000
.bb3e	25 0c		and $0c				and status
.bb40	85 0c		sta $0c				sta status
.bb42					_new_word:
.bb42	20 65 c0	jsr $c065			jsr Header_Link		; finish linking into current dictionary
.bb45	20 4d bb	jsr $bb4d			jsr adjust_z		; fix word length
.bb48	a9 60		lda #$60			lda #$60		; compile an RTS
.bb4a	4c 09 cc	jmp $cc09			jmp C_Comma_A
=63					CL	.var *-(WordListLink+wh_Xt)
=$bb4d					en = *	; remember here
>bb0c	3f					.byte CL	;wh_CodeLength
.bb4d					adjust_z:
.bb4d	a5 10		lda $10				lda dp+0		; tmp1= xt
.bb4f	18		clc				clc
.bb50	69 85		adc #$85			adc #Wh_xt
.bb52	85 14		sta $14				sta tmp1+0
.bb54	a5 11		lda $11				lda dp+1
.bb56	69 00		adc #$00			adc #0
.bb58	85 15		sta $15				sta tmp1+1
.bb5a	38		sec				sec			; length= cp-xt
.bb5b	a5 00		lda $00				lda cp+0
.bb5d	e5 14		sbc $14				sbc tmp1+0
.bb5f	a8		tay				tay
.bb60	a5 01		lda $01				lda cp+1
.bb62	e5 15		sbc $15				sbc tmp1+1
.bb64	f0 0c		beq $bb72			beq _short		; length > $ff ?
.bb66	a0 84		ldy #$84			ldy #Wh_Flags		; make it NN
.bb68	b1 10		lda ($10),y			lda (dp),y
.bb6a	29 fd		and #$fd			and #$ff-AN
.bb6c	09 08		ora #$08			ora #NN
.bb6e	91 10		sta ($10),y			sta (dp),y
.bb70	a0 ff		ldy #$ff			ldy #$ff		; set max length for header
.bb72	98		tya		_short:		tya			; fill in length in header
.bb73	a0 83		ldy #$83			ldy #Wh_CodeLength
.bb75	91 10		sta ($10),y			sta (dp),y
.bb77	60		rts				rts
>bb78	3a				L1:	.text ":"	;  name of word as a string, ending at wh_NameLastChar
>bb79	01					.byte *-L1	;wh_NameLength	length of name
>bb7a	89 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb7c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb7d	08					.byte NN	;wh_Flags	dictionary flags
=47865					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb7e					Colon:
.bb7e	20 92 b6	jsr $b692			jsr Right_Bracket	; switch to compile state
.bb81	a5 0c		lda $0c				lda status
.bb83	09 40		ora #$40			ora #%01000000	; tell ";" and RECURSE this is a normal word
.bb85	09 80		ora #$80			ora #%10000000	; Tell Header_Build not to print warning for duplicate name.
.bb87	85 0c		sta $0c				sta status
.bb89	4c 70 c0	jmp $c070			jmp Header_Build	; compile word header (but don't link)
=14					CL	.var *-(WordListLink+wh_Xt)
=$bb8c					en = *	; remember here
>bb7c	0e					.byte CL	;wh_CodeLength
>bb8c	3a 4e 6f 4e 61 6d 65		L1:	.text ":NoName"	;  name of word as a string, ending at wh_NameLastChar
>bb93	07					.byte *-L1	;wh_NameLength	length of name
>bb94	f9 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb96	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb97	08					.byte NN	;wh_Flags	dictionary flags
=47891					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb98					Colon_NoName:
.bb98	20 92 b6	jsr $b692			jsr Right_Bracket	; switch to compile state
.bb9b	a9 bf		lda #$bf			lda #$ff-%01000000	; tell ";" and RECURSE this is
.bb9d	25 0c		and $0c				and status		; a :NONAME word.
.bb9f	85 0c		sta $0c				sta status
.bba1	a5 00		lda $00				lda cp+0
.bba3	85 0e		sta $0e				sta workword+0
.bba5	a5 01		lda $01				lda cp+1
.bba7	85 0f		sta $0f				sta workword+1
=17					CL	.var *-(WordListLink+wh_Xt)
=$bba9					en = *	; remember here
>bb96	11					.byte CL	;wh_CodeLength
.bba9	60		rts				rts
>bbaa	27				L1:	.text "'"	;  name of word as a string, ending at wh_NameLastChar
>bbab	01					.byte *-L1	;wh_NameLength	length of name
>bbac	13 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bbae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bbaf	08					.byte NN	;wh_Flags	dictionary flags
=47915					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bbb0	20 b6 bb	jsr $bbb6	Tick:		jsr Tick_Nt
.bbb3	4c 20 bd	jmp $bd20			jmp Name_To_Int	; ( nt -- xt )
=6					CL	.var *-(WordListLink+wh_Xt)
=$bbb6					en = *	; remember here
>bbae	06					.byte CL	;wh_CodeLength
.bbb6	20 1a ba	jsr $ba1a	Tick_Nt:	jsr parse_name_check	; ( -- addr u )
.bbb9	4c 52 bc	jmp $bc52			jmp find_name_check	; ( addr u -- nt )
>bbbc	5b 27 5d			L1:	.text "[']"	;  name of word as a string, ending at wh_NameLastChar
>bbbf	03					.byte *-L1	;wh_NameLength	length of name
>bbc0	2b bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bbc2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bbc3	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=47935					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bbc4	20 b0 bb	jsr $bbb0	Bracket_Tick:	jsr Tick
.bbc7	4c ab b6	jmp $b6ab			jmp Literal
=6					CL	.var *-(WordListLink+wh_Xt)
=$bbca					en = *	; remember here
>bbc2	06					.byte CL	;wh_CodeLength
>bbca	46 69 6e 64			L1:	.text "Find"	;  name of word as a string, ending at wh_NameLastChar
>bbce	04					.byte *-L1	;wh_NameLength	length of name
>bbcf	3f bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bbd1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bbd2	18					.byte UF+NN	;wh_Flags	dictionary flags
=47950					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bbd3					Find:
.bbd3	20 6a b3	jsr $b36a			jsr underflow_1
.bbd6	b5 25		lda $25,x			lda DStack+1,x		; MSB
.bbd8	48		pha				pha
.bbd9	b5 24		lda $24,x			lda DStack+0,x		; LSB
.bbdb	48		pha				pha
.bbdc	20 0e b1	jsr $b10e			jsr Count		; ( caddr -- addr u )
.bbdf	20 26 bc	jsr $bc26			jsr find_name		; ( addr u -- nt | 0 )
.bbe2	b5 25		lda $25,x			lda DStack+1,x		; word found?
.bbe4	d0 0a		bne $bbf0			bne _found_word
.bbe6	20 2b b7	jsr $b72b			jsr False		; ( 0 0 )
.bbe9	68		pla				pla			; LSB of address
.bbea	95 26		sta $26,x			sta DStack+2,x
.bbec	68		pla				pla
.bbed	95 27		sta $27,x			sta DStack+3,x		; MSB of address
.bbef	60		rts				rts			; ( addr 0 )
.bbf0					_found_word:
.bbf0	68		pla				pla			; We don't need the address after all, RDrop it
.bbf1	68		pla				pla
.bbf2	20 6a ce	jsr $ce6a			jsr Dup		; ( nt nt )
.bbf5	20 20 bd	jsr $bd20			jsr Name_To_Int	; ( nt xt )
.bbf8	20 88 ce	jsr $ce88			jsr Swap		; ( xt nt )
.bbfb	a0 00		ldy #$00			ldy #0			; Prepare flag
.bbfd	a9 84		lda #$84			lda #Wh_Flags		; get flags
.bbff	20 0f c9	jsr $c90f			jsr Plus_A		; ( xt nt+Wh_Flags )
.bc02	a1 24		lda ($24,x)			lda (DStack+0,x)		; ( xt flags )
.bc04	29 04		and #$04			and #IM
.bc06	d0 07		bne $bc0f			bne _immediate		; bit set, we're immediate
.bc08	a9 ff		lda #$ff			lda #$FF		; We're not immediate, return -1
.bc0a	95 24		sta $24,x			sta DStack+0,x
.bc0c	95 25		sta $25,x			sta DStack+1,x
.bc0e	60		rts				rts
.bc0f					_immediate:
.bc0f	a9 01		lda #$01			lda #1			; We're immediate, return 1
.bc11	95 24		sta $24,x			sta DStack+0,x
.bc13	a9 00		lda #$00			lda #0
.bc15	95 25		sta $25,x			sta DStack+1,x
=68					CL	.var *-(WordListLink+wh_Xt)
=$bc17					en = *	; remember here
>bbd1	44					.byte CL	;wh_CodeLength
.bc17	60		rts				rts
>bc18	46 69 6e 64 2d 4e 61 6d		L1:	.text "Find-Name"	;  name of word as a string, ending at wh_NameLastChar
>bc20	65
>bc21	09					.byte *-L1	;wh_NameLength	length of name
>bc22	4e bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc24	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc25	18					.byte UF+NN	;wh_Flags	dictionary flags
=48033					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc26					find_name:
.bc26	20 7f b3	jsr $b37f			jsr underflow_2
.bc29	20 5f bc	jsr $bc5f			jsr fina_pattern_prepare ; tmp2 = pseudo-header of pattern name
.bc2c	a9 ff		lda #$ff			lda #$ff		; for each wordlist in the wordlist search order.
.bc2e	95 25		sta $25,x			sta DStack+1,x
.bc30					_wordlist_next:
.bc30	f6 25		inc $25,x			inc DStack+1,x
.bc32	b4 25		ldy $25,x			ldy DStack+1,x
.bc34	cc 2a 03	cpy $032a			cpy Num_OrderV		; at end of list?
.bc37	90 06		bcc $bc3f			bcc _nextS
.bc39	d0 14		bne $bc4f			bne _fail
.bc3b	a9 03		lda #$03			lda #wid_Root		; also try root wordlist
.bc3d	d0 03		bne $bc42			bne _nextA
.bc3f	b9 2b 03	lda $032b,y	_nextS:		lda Search_OrderV,y	; A = search_order[Y]  get wordlist ID
.bc42	20 75 bc	jsr $bc75	_nextA:		jsr fina_search_wordlist
.bc45	f0 e9		beq $bc30			beq _wordlist_next
.bc47	a5 14		lda $14				lda tmp1+0		; NOS = nt
.bc49	95 26		sta $26,x			sta DStack+2,x
.bc4b	a5 15		lda $15				lda tmp1+1
.bc4d	95 27		sta $27,x			sta DStack+3,x
.bc4f					_fail:
.bc4f	e8		inx				inx			; Drop	pattern name length
.bc50	e8		inx				inx
=43					CL	.var *-(WordListLink+wh_Xt)
=$bc51					en = *	; remember here
>bc24	2b					.byte CL	;wh_CodeLength
.bc51	60		rts				rts
.bc52					find_name_check:
.bc52	20 26 bc	jsr $bc26			jsr find_name
.bc55	b5 25		lda $25,x			lda DStack+1,x		; not found?
.bc57	f0 01		beq $bc5a			beq _NotFound
.bc59	60		rts				rts
.bc5a	a9 f3		lda #$f3	_NotFound:	lda #$100+err_UndefinedWord	; complain & quit
.bc5c	4c c9 b3	jmp $b3c9			jmp ThrowA
.bc5f					fina_pattern_prepare:
.bc5f	38		sec				sec			; A= 0 - name start offset
.bc60	b5 24		lda $24,x			lda DStack+0,x
.bc62	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.bc64	75 26		adc $26,x			adc DStack+2,x		; tmp2 = pattern nt
.bc66	85 16		sta $16				sta tmp2+0
.bc68	a9 ff		lda #$ff			lda #$ff
.bc6a	75 27		adc $27,x			adc DStack+3,x
.bc6c	85 17		sta $17				sta tmp2+1
.bc6e	a9 00		lda #$00			lda #0			; assuming failure
.bc70	95 26		sta $26,x			sta DStack+2,x
.bc72	95 27		sta $27,x			sta DStack+3,x
.bc74	60		rts				rts
.bc75					fina_search_wordlist:
.bc75	0a		asl a				asl			; tmp1 = up->wordlists[A]
.bc76	a8		tay				tay
.bc77	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.bc7a	85 14		sta $14				sta tmp1+0
.bc7c	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bc7f	85 15		sta $15				sta tmp1+1
.bc81	d0 10		bne $bc93			bne _word_test		;   not end-of-list?
.bc83	60		rts		_rts:		rts			; Z= end_of_list
.bc84					_word_next:
.bc84	a0 82		ldy #$82			ldy #wh_WordListLink+1	; tmp1= tmp1->Wh_WordListLink
.bc86	b1 14		lda ($14),y			lda (tmp1),y
.bc88	48		pha				pha
.bc89	88		dey				dey
.bc8a	b1 14		lda ($14),y			lda (tmp1),y
.bc8c	85 14		sta $14				sta tmp1+0
.bc8e	68		pla				pla
.bc8f	85 15		sta $15				sta tmp1+1
.bc91	f0 f0		beq $bc83			beq _rts		; end of list?
.bc93					_word_test:
.bc93	a0 80		ldy #$80			ldy #Wh_NameLength	; Are strings the same length?
.bc95	b1 14		lda ($14),y			lda (tmp1),y
.bc97	d5 24		cmp $24,x			cmp DStack+0,x
.bc99	d0 e9		bne $bc84			bne _word_next
.bc9b	a9 7f		lda #$7f			lda #Wh_NameLastChar	; Y= index of 1st name char-1
.bc9d	38		sec				sec
.bc9e	f5 24		sbc $24,x			sbc DStack+0,x
.bca0	a8		tay				tay
.bca1	c8		iny		_char_next:	iny			; to next char
.bca2	30 df		bmi $bc83			bmi _rts		; end of string?
.bca4	b1 16		lda ($16),y			lda (tmp2),y		; char of mystery string
.bca6	51 14		eor ($14),y			eor (tmp1),y
.bca8	f0 f7		beq $bca1			beq _char_next		;   exact match?
.bcaa	29 df		and #$df			and #$df		;   only a case mismatch?
.bcac	d0 d6		bne $bc84			bne _word_next
.bcae	b1 14		lda ($14),y			lda (tmp1),y		;   verify it is alpha char
.bcb0	29 df		and #$df			and #$df
.bcb2	c9 41		cmp #$41			cmp #'A'
.bcb4	90 ce		bcc $bc84			bcc _word_next
.bcb6	c9 5b		cmp #$5b			cmp #'Z'+1
.bcb8	90 e7		bcc $bca1			bcc _char_next
.bcba	b0 c8		bcs $bc84			bcs _word_next
>bcbc	49 6e 74 3e 4e 61 6d 65		L1:	.text "Int>Name"	;  name of word as a string, ending at wh_NameLastChar
>bcc4	08					.byte *-L1	;wh_NameLength	length of name
>bcc5	a1 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bcc7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bcc8	18					.byte UF+NN	;wh_Flags	dictionary flags
=48196					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bcc9					Int_To_Name:
.bcc9	20 6a b3	jsr $b36a			jsr underflow_1
.bccc	a9 7b		lda #$7b			lda #$100-Wh_xt		; convert xt on stack to proposed nt
.bcce	20 4f c9	jsr $c94f			jsr Minus_A
.bcd1	a9 ff		lda #$ff			lda #$ff		; for each wordlist
.bcd3	20 3a b7	jsr $b73a			jsr PushZA
.bcd6					_wordlist_next:
.bcd6	f6 24		inc $24,x			inc DStack+0,x
.bcd8	b5 24		lda $24,x			lda DStack+0,x		; Get the current wordlist index
.bcda	c9 0c		cmp #$0c			cmp #(Num_OrderV-WordlistsV)/2
.bcdc	b0 2c		bcs $bd0a			bcs _fail
.bcde	0a		asl a				asl			; tmp2 = wordlist[A]
.bcdf	a8		tay				tay
.bce0	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.bce3	85 16		sta $16				sta tmp2+0
.bce5	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bce8	85 17		sta $17				sta tmp2+1
.bcea	f0 ea		beq $bcd6			beq _wordlist_next	;   empty wordlist?
.bcec	d0 0f		bne $bcfd			bne _word_test
.bcee	a0 82		ldy #$82	_word_next:	ldy #wh_WordListLink+1	; follow wh_WordListLink to next word
.bcf0	b1 16		lda ($16),y			lda (tmp2),y
.bcf2	48		pha				pha
.bcf3	88		dey				dey
.bcf4	b1 16		lda ($16),y			lda (tmp2),y
.bcf6	85 16		sta $16				sta tmp2+0
.bcf8	68		pla				pla
.bcf9	85 17		sta $17				sta tmp2+1
.bcfb	f0 d9		beq $bcd6			beq _wordlist_next	;  end of list?
.bcfd	55 27		eor $27,x	_word_test:	eor DStack+3,x		; tmp2 = nt ?
.bcff	d0 ed		bne $bcee			bne _word_next
.bd01	a5 16		lda $16				lda tmp2+0
.bd03	55 26		eor $26,x			eor DStack+2,x
.bd05	d0 e7		bne $bcee			bne _word_next
.bd07	e8		inx				inx			; Drop wordlist index
.bd08	e8		inx				inx
.bd09	60		rts				rts
.bd0a					_fail:
.bd0a	e8		inx				inx			; Drop wordlist index
.bd0b	e8		inx				inx
.bd0c	a9 00		lda #$00			lda #0			; return a zero to indicate that we didn't find it.
.bd0e	95 24		sta $24,x			sta DStack+0,x
.bd10	95 25		sta $25,x			sta DStack+1,x
=73					CL	.var *-(WordListLink+wh_Xt)
=$bd12					en = *	; remember here
>bcc7	49					.byte CL	;wh_CodeLength
.bd12	60		rts				rts
>bd13	4e 61 6d 65 3e 49 6e 74		L1:	.text "Name>Int"	;  name of word as a string, ending at wh_NameLastChar
>bd1b	08					.byte *-L1	;wh_NameLength	length of name
>bd1c	44 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd1e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd1f	18					.byte UF+NN	;wh_Flags	dictionary flags
=48283					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd20					Name_To_Int:
.bd20	20 6a b3	jsr $b36a			jsr underflow_1
.bd23	a9 85		lda #$85			lda #wh_Xt
.bd25	4c 0f c9	jmp $c90f			jmp Plus_A
=8					CL	.var *-(WordListLink+wh_Xt)
=$bd28					en = *	; remember here
>bd1e	08					.byte CL	;wh_CodeLength
>bd28	4e 61 6d 65 3e 53 74 72		L1:	.text "Name>String"	;  name of word as a string, ending at wh_NameLastChar
>bd30	69 6e 67
>bd33	0b					.byte *-L1	;wh_NameLength	length of name
>bd34	9b bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd36	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd37	18					.byte UF+NN	;wh_Flags	dictionary flags
=48307					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd38					Name_To_String:
.bd38	20 6a b3	jsr $b36a			jsr underflow_1
.bd3b	b5 24		lda $24,x			lda DStack+0,x		; tmp1 = nt
.bd3d	b4 25		ldy $25,x			ldy DStack+1,x
.bd3f	85 14		sta $14				sta tmp1+0
.bd41	84 15		sty $15				sty tmp1+1
.bd43	a0 80		ldy #$80			ldy #Wh_NameLength
.bd45	a9 80		lda #$80			lda #Wh_NameLastChar+1	; calc start offset
.bd47	38		sec				sec
.bd48	f1 14		sbc ($14),y			sbc (tmp1),y
.bd4a	20 0f c9	jsr $c90f			jsr Plus_A		; calc start addr
.bd4d	b1 14		lda ($14),y			lda (tmp1),y		; push length
.bd4f	4c 3a b7	jmp $b73a			jmp PushZA
=26					CL	.var *-(WordListLink+wh_Xt)
=$bd52					en = *	; remember here
>bd36	1a					.byte CL	;wh_CodeLength
>bd52	3e 42 6f 64 79			L1:	.text ">Body"	;  name of word as a string, ending at wh_NameLastChar
>bd57	05					.byte *-L1	;wh_NameLength	length of name
>bd58	b3 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd5a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd5b	18					.byte UF+NN	;wh_Flags	dictionary flags
=48343					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd5c					To_Body:
.bd5c	20 6a b3	jsr $b36a			jsr underflow_1
.bd5f	a9 03		lda #$03			lda #3		; PFA is after the beginning JSR abs
.bd61	4c 0f c9	jmp $c90f			jmp Plus_A
=8					CL	.var *-(WordListLink+wh_Xt)
=$bd64					en = *	; remember here
>bd5a	08					.byte CL	;wh_CodeLength
>bd64	45 72 61 73 65			L1:	.text "Erase"	;  name of word as a string, ending at wh_NameLastChar
>bd69	05					.byte *-L1	;wh_NameLength	length of name
>bd6a	d7 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd6c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd6d	08					.byte NN	;wh_Flags	dictionary flags
=48361					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd6e					Erase:
.bd6e	20 49 b7	jsr $b749			jsr Zero
.bd71	4c 8d bd	jmp $bd8d			jmp Fill
=6					CL	.var *-(WordListLink+wh_Xt)
=$bd74					en = *	; remember here
>bd6c	06					.byte CL	;wh_CodeLength
>bd74	42 6c 61 6e 6b			L1:	.text "Blank"	;  name of word as a string, ending at wh_NameLastChar
>bd79	05					.byte *-L1	;wh_NameLength	length of name
>bd7a	e9 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd7c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd7d	08					.byte NN	;wh_Flags	dictionary flags
=48377					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd7e					Blank:
.bd7e	20 68 b7	jsr $b768			jsr Bl
.bd81	4c 8d bd	jmp $bd8d			jmp Fill
=6					CL	.var *-(WordListLink+wh_Xt)
=$bd84					en = *	; remember here
>bd7c	06					.byte CL	;wh_CodeLength
>bd84	46 69 6c 6c			L1:	.text "Fill"	;  name of word as a string, ending at wh_NameLastChar
>bd88	04					.byte *-L1	;wh_NameLength	length of name
>bd89	f9 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd8b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd8c	18					.byte UF+NN	;wh_Flags	dictionary flags
=48392					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd8d					Fill:
.bd8d	20 84 b3	jsr $b384			jsr underflow_3
.bd90	b5 28		lda $28,x			lda DStack+4,x		; tmp1= address
.bd92	85 14		sta $14				sta tmp1+0
.bd94	b5 29		lda $29,x			lda DStack+5,x
.bd96	85 15		sta $15				sta tmp1+1
.bd98	b5 26		lda $26,x			lda DStack+2,x		; tmp2= counter.lo
.bd9a	85 16		sta $16				sta tmp2+0
.bd9c	f6 27		inc $27,x			inc DStack+3,x		; so decrement & test for 0 works
.bd9e	a0 00		ldy #$00			ldy #0
.bda0	b5 24		lda $24,x			lda DStack+0,x		; A= fill byte
.bda2	c4 16		cpy $16		_loop:		cpy tmp2+0		; done?
.bda4	f0 09		beq $bdaf			beq _test2
.bda6	91 14		sta ($14),y			sta (tmp1),y		; store a byte
.bda8	c8		iny				iny			; to next byte
.bda9	d0 f7		bne $bda2			bne _loop
.bdab	e6 15		inc $15				inc tmp1+1		; increment addr page
.bdad	d0 f3		bne $bda2			bne _loop
.bdaf	d6 27		dec $27,x	_test2:		dec DStack+3,x		; any more pages?
.bdb1	d0 ef		bne $bda2			bne _loop
.bdb3	4c a5 ac	jmp $aca5			jmp ThreeDrop	; Drop three cells off the Data Stack.
=41					CL	.var *-(WordListLink+wh_Xt)
=$bdb6					en = *	; remember here
>bd8b	29					.byte CL	;wh_CodeLength
>bdb6	56 61 72 69 61 62 6c 65		L1:	.text "Variable"	;  name of word as a string, ending at wh_NameLastChar
>bdbe	08					.byte *-L1	;wh_NameLength	length of name
>bdbf	08 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bdc1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bdc2	08					.byte NN	;wh_Flags	dictionary flags
=48446					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bdc3	20 e9 c0	jsr $c0e9	Variable:	jsr Create		; compile word header & push PFA
.bdc6	a9 00		lda #$00			lda #0			; allot & initialize the variable's data
.bdc8	a8		tay				tay
.bdc9	4c 23 cc	jmp $cc23			jmp Comma_YA
=9					CL	.var *-(WordListLink+wh_Xt)
=$bdcc					en = *	; remember here
>bdc1	09					.byte CL	;wh_CodeLength
>bdcc	32 56 61 72 69 61 62 6c		L1:	.text "2Variable"	;  name of word as a string, ending at wh_NameLastChar
>bdd4	65
>bdd5	09					.byte *-L1	;wh_NameLength	length of name
>bdd6	3e bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bdd8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bdd9	08					.byte NN	;wh_Flags	dictionary flags
=48469					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bdda	20 c3 bd	jsr $bdc3	Two_variable:	jsr Variable		; compile word header & push PFA & 1st cell of data
.bddd	4c 23 cc	jmp $cc23			jmp Comma_YA		; alloc & init 2nd cell of data
=6					CL	.var *-(WordListLink+wh_Xt)
=$bde0					en = *	; remember here
>bdd8	06					.byte CL	;wh_CodeLength
>bde0	43 6f 6e 73 74 61 6e 74		L1:	.text "Constant"	;  name of word as a string, ending at wh_NameLastChar
>bde8	08					.byte *-L1	;wh_NameLength	length of name
>bde9	55 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bdeb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bdec	18					.byte UF+NN	;wh_Flags	dictionary flags
=48488					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bded					Constant:
.bded	20 6a b3	jsr $b36a			jsr underflow_1
.bdf0	20 62 c0	jsr $c062			jsr Header_Comma	; compile word header
.bdf3	20 b4 b6	jsr $b6b4			jsr LitCompile		; compile code to load registers, & pick a subroutine
.bdf6	20 5f cc	jsr $cc5f			jsr Jmp_Comma_YA	; compile code to JMP to the subroutine
.bdf9	4c 4d bb	jmp $bb4d			jmp adjust_z		; fix word length
=15					CL	.var *-(WordListLink+wh_Xt)
=$bdfc					en = *	; remember here
>bdeb	0f					.byte CL	;wh_CodeLength
>bdfc	32 43 6f 6e 73 74 61 6e		L1:	.text "2Constant"	;  name of word as a string, ending at wh_NameLastChar
>be04	74
>be05	09					.byte *-L1	;wh_NameLength	length of name
>be06	68 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be08	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be09	18					.byte UF+NN	;wh_Flags	dictionary flags
=48517					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be0a					Two_constant:
.be0a	20 7f b3	jsr $b37f			jsr underflow_2
.be0d	20 62 c0	jsr $c062			jsr Header_Comma	; compile word header
.be10	20 88 ce	jsr $ce88			jsr Swap
.be13	20 ab b6	jsr $b6ab			jsr Literal		; compile push lo cell
.be16	20 b4 b6	jsr $b6b4			jsr LitCompile		; compile push hi cell, YA=exit routine
.be19	20 5f cc	jsr $cc5f			jsr Jmp_Comma_YA	; compile JMP from above
.be1c	4c 4d bb	jmp $bb4d			jmp adjust_z		; fix word length
=21					CL	.var *-(WordListLink+wh_Xt)
=$be1f					en = *	; remember here
>be08	15					.byte CL	;wh_CodeLength
>be1f	56 61 6c 75 65			L1:	.text "Value"	;  name of word as a string, ending at wh_NameLastChar
>be24	05					.byte *-L1	;wh_NameLength	length of name
>be25	85 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be27	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be28	18					.byte UF+NN	;wh_Flags	dictionary flags
=48548					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be29					Value:
.be29	20 6a b3	jsr $b36a			jsr underflow_1
.be2c	20 62 c0	jsr $c062			jsr Header_Comma	; compile word header
.be2f	20 de b6	jsr $b6de			jsr ldya_immed_comma	; compile lda # & ldy #
.be32	a9 f8		lda #$f8			lda #<PushYA		; compile jmp PushYA
.be34	a0 b6		ldy #$b6			ldy #>PushYA
.be36	20 5f cc	jsr $cc5f			jsr Jmp_Comma_YA
.be39	4c 4d bb	jmp $bb4d			jmp adjust_z		; fix word length
=19					CL	.var *-(WordListLink+wh_Xt)
=$be3c					en = *	; remember here
>be27	13					.byte CL	;wh_CodeLength
>be3c	32 56 61 6c 75 65		L1:	.text "2Value"	;  name of word as a string, ending at wh_NameLastChar
>be42	06					.byte *-L1	;wh_NameLength	length of name
>be43	a4 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be45	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be46	18					.byte UF+NN	;wh_Flags	dictionary flags
=48578					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be47					TwoValue:
.be47	20 7f b3	jsr $b37f			jsr underflow_2
.be4a	20 62 c0	jsr $c062			jsr Header_Comma	; compile word header
.be4d	a9 5a		lda #$5a			lda #<TwoValue_Runtime	; compile JSR TValue_Runtime
.be4f	a0 be		ldy #$be			ldy #>TwoValue_Runtime
.be51	20 48 cc	jsr $cc48			jsr Jsr_Comma_YA
.be54	20 4d bb	jsr $bb4d			jsr adjust_z		; fix word length
.be57	4c 31 cc	jmp $cc31			jmp Two_Comma		; compile the value, return
=19					CL	.var *-(WordListLink+wh_Xt)
=$be5a					en = *	; remember here
>be45	13					.byte CL	;wh_CodeLength
.be5a					TwoValue_Runtime:
.be5a	68		pla				pla			; pop RTS addr, +1,
.be5b	18		clc				clc
.be5c	69 01		adc #$01			adc #1
.be5e	85 14		sta $14				sta tmp1+0
.be60	68		pla				pla
.be61	69 00		adc #$00			adc #0
.be63	85 15		sta $15				sta tmp1+1
.be65	4c a7 c4	jmp $c4a7			jmp Two_Fetch_tmp1	; fetch the data, return
>be68	54 6f				L1:	.text "To"	;  name of word as a string, ending at wh_NameLastChar
>be6a	02					.byte *-L1	;wh_NameLength	length of name
>be6b	c2 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be6d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be6e	0c					.byte NN+IM	;wh_Flags	dictionary flags
=48618					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be6f					To:
.be6f	20 b0 bb	jsr $bbb0			jsr Tick		; We always need the xt of the target word
.be72	b5 24		lda $24,x			lda DStack+0,x		; tmp1= xt
.be74	b4 25		ldy $25,x			ldy DStack+1,x
.be76	85 14		sta $14				sta tmp1+0
.be78	84 15		sty $15				sty tmp1+1
.be7a	a0 00		ldy #$00			ldy #0			; determine what type xt points at
.be7c	b1 14		lda ($14),y			lda (tmp1),y
.be7e	c9 a0		cmp #$a0			cmp #$a0		;   LDY #
.be80	d0 38		bne $beba			bne _Test2
.be82	a5 0a		lda $0a				lda state		; check compile state
.be84	f0 20		beq $bea6			beq _Value_interpret
.be86	a9 40		lda #$40			lda #<PopYA		; compile jsr PopYA
.be88	a0 b3		ldy #$b3			ldy #>PopYA
.be8a	20 48 cc	jsr $cc48			jsr Jsr_Comma_YA
.be8d	a9 8c		lda #$8c			lda #$8C		; compile STY xt+1
.be8f	20 09 cc	jsr $cc09			jsr C_Comma_A
.be92	20 60 c9	jsr $c960			jsr One_plus
.be95	20 6a ce	jsr $ce6a			jsr Dup
.be98	20 20 cc	jsr $cc20			jsr Comma
.be9b	a9 8d		lda #$8d			lda #$8D		; compile STA xt+3
.be9d	20 09 cc	jsr $cc09			jsr C_Comma_A
.bea0	20 0a c9	jsr $c90a			jsr Cell_Plus
.bea3	4c 20 cc	jmp $cc20			jmp Comma
.bea6					_Value_interpret:
.bea6	20 7f b3	jsr $b37f			jsr underflow_2		; ( n xt )
.bea9	e8		inx				inx			; Drop xt
.beaa	e8		inx				inx
.beab	b5 24		lda $24,x			lda DStack+0,x		; LSB
.bead	a0 03		ldy #$03			ldy #3			;   modify LDA # data
.beaf	91 14		sta ($14),y			sta (tmp1),y
.beb1	b5 25		lda $25,x			lda DStack+1,x		; MSB
.beb3	a0 01		ldy #$01			ldy #1			;   modify LDY # data
.beb5	91 14		sta ($14),y			sta (tmp1),y
.beb7	e8		inx				inx			; Drop n
.beb8	e8		inx				inx
.beb9	60		rts				rts
.beba	c9 20		cmp #$20	_Test2:		cmp #$20		;   JSR abs ?
.bebc	d0 33		bne $bef1			bne _Err
.bebe	a9 03		lda #$03			lda #3			; advance xt over the JSR abs to the data
.bec0	20 0f c9	jsr $c90f			jsr Plus_A
.bec3	a0 01		ldy #$01			ldy #1			; get JSR abs addr lo byte
.bec5	b1 14		lda ($14),y			lda (tmp1),y
.bec7	c9 5a		cmp #$5a			cmp #<TwoValue_Runtime
.bec9	d0 11		bne $bedc			bne _Test3
.becb	a5 0a		lda $0a				lda state		; check compile state
.becd	f0 0a		beq $bed9			beq _2Value_runtime
.becf	20 de b6	jsr $b6de			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bed2	a9 7b		lda #$7b			lda #<Two_Store_YA
.bed4	a0 c4		ldy #$c4			ldy #>Two_Store_YA
.bed6	4c 48 cc	jmp $cc48			jmp Jsr_Comma_YA	; compile JSR TwoValue_runtime; return
.bed9	4c 75 c4	jmp $c475	_2Value_runtime: jmp Two_Store
.bedc					_Test3:
.bedc	c9 e4		cmp #$e4			cmp #<FValue_runtime
.bede	d0 11		bne $bef1			bne _Err
.bee0	a5 0a		lda $0a				lda state		; check compile state
.bee2	f0 0a		beq $beee			beq _FValue_interpret
.bee4	20 de b6	jsr $b6de			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bee7	a9 b0		lda #$b0			lda #<FStore_YA
.bee9	a0 85		ldy #$85			ldy #>FStore_YA
.beeb	4c 48 cc	jmp $cc48			jmp Jsr_Comma_YA	; compile JSR FValue_runtime; return
.beee	4c ad 85	jmp $85ad	_FValue_interpret: jmp FStore
.bef1	a9 e0		lda #$e0	_Err:		lda #$100+err_InvalidName ; unrecognized type.
.bef3	20 c9 b3	jsr $b3c9			jsr ThrowA
=135					CL	.var *-(WordListLink+wh_Xt)
=$bef6					en = *	; remember here
>be6d	87					.byte CL	;wh_CodeLength
>bef6	44 4d 61 78			L1:	.text "DMax"	;  name of word as a string, ending at wh_NameLastChar
>befa	04					.byte *-L1	;wh_NameLength	length of name
>befb	ea bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>befd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>befe	08					.byte NN	;wh_Flags	dictionary flags
=48762					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.beff	a9 80		lda #$80	DMax:		lda #$80
.bf01	d0 0b		bne $bf0e			bne DMin3
=4					CL	.var *-(WordListLink+wh_Xt)
=$bf03					en = *	; remember here
>befd	04					.byte CL	;wh_CodeLength
>bf03	44 4d 69 6e			L1:	.text "DMin"	;  name of word as a string, ending at wh_NameLastChar
>bf07	04					.byte *-L1	;wh_NameLength	length of name
>bf08	7a be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf0a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf0b	08					.byte NN	;wh_Flags	dictionary flags
=48775					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf0c	a9 00		lda #$00	DMin:		lda #0
.bf0e	85 16		sta $16		DMin3:		sta tmp2	; save sign correction
.bf10	20 89 b3	jsr $b389			jsr underflow_4
.bf13	b5 26		lda $26,x			lda DStack+2,x	; compare
.bf15	d5 2a		cmp $2a,x			cmp DStack+6,x
.bf17	b5 27		lda $27,x			lda DStack+3,x
.bf19	f5 2b		sbc $2b,x			sbc DStack+7,x
.bf1b	b5 24		lda $24,x			lda DStack+0,x
.bf1d	f5 28		sbc $28,x			sbc DStack+4,x
.bf1f	b5 25		lda $25,x			lda DStack+1,x
.bf21	f5 29		sbc $29,x			sbc DStack+5,x
.bf23	50 02		bvc $bf27			bvc +
.bf25	49 80		eor #$80			eor #$80	; fix sign
.bf27	45 16		eor $16		+		eor tmp2
.bf29	30 0f		bmi $bf3a			bmi TwoNip_nouf	; if negative, NOS is larger and needs to be kept
.bf2b	4c 2b c4	jmp $c42b			jmp Two_Drop
=34					CL	.var *-(WordListLink+wh_Xt)
=$bf2e					en = *	; remember here
>bf0a	22					.byte CL	;wh_CodeLength
>bf2e	32 4e 69 70			L1:	.text "2Nip"	;  name of word as a string, ending at wh_NameLastChar
>bf32	04					.byte *-L1	;wh_NameLength	length of name
>bf33	87 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf35	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf36	18					.byte UF+NN	;wh_Flags	dictionary flags
=48818					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf37	20 89 b3	jsr $b389	TwoNip:		jsr underflow_4
.bf3a	b5 24		lda $24,x	TwoNip_NoUf:	lda DStack+0,x	; copy dTOS to dNOS
.bf3c	95 28		sta $28,x			sta DStack+4,x
.bf3e	b5 25		lda $25,x			lda DStack+1,x
.bf40	95 29		sta $29,x			sta DStack+5,x
.bf42	b5 26		lda $26,x			lda DStack+2,x
.bf44	95 2a		sta $2a,x			sta DStack+6,x
.bf46	b5 27		lda $27,x			lda DStack+3,x
.bf48	95 2b		sta $2b,x			sta DStack+7,x
.bf4a	4c 2b c4	jmp $c42b			jmp Two_Drop
=22					CL	.var *-(WordListLink+wh_Xt)
=$bf4d					en = *	; remember here
>bf35	16					.byte CL	;wh_CodeLength
>bf4d	53 3e 44			L1:	.text "S>D"	;  name of word as a string, ending at wh_NameLastChar
>bf50	03					.byte *-L1	;wh_NameLength	length of name
>bf51	b2 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf53	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf54	10					.byte UF	;wh_Flags	dictionary flags
=48848					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf55					S_To_D:
.bf55	20 6a b3	jsr $b36a			jsr underflow_1
.bf58	a0 00		ldy #$00			ldy #0			; assume positive
.bf5a	b5 25		lda $25,x			lda DStack+1,x		; test n
.bf5c	10 01		bpl $bf5f			bpl +
.bf5e	88		dey				dey			; make negative
.bf5f					+
.bf5f	ca		dex				dex			; push new hi cell
.bf60	ca		dex				dex
.bf61	94 24		sty $24,x			sty DStack+0,x
.bf63	94 25		sty $25,x			sty DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$bf65					en = *	; remember here
>bf53	10					.byte CL	;wh_CodeLength
.bf65	60		rts				rts
>bf66	44 3e 53			L1:	.text "D>S"	;  name of word as a string, ending at wh_NameLastChar
>bf69	03					.byte *-L1	;wh_NameLength	length of name
>bf6a	d0 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf6c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf6d	10					.byte UF	;wh_Flags	dictionary flags
=48873					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf6e					D_To_S:
.bf6e	20 7f b3	jsr $b37f			jsr underflow_2
.bf71	e8		inx				inx		; Drop hi cell
.bf72	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$bf73					en = *	; remember here
>bf6c	05					.byte CL	;wh_CodeLength
.bf73	60		rts				rts
>bf74	44 2d				L1:	.text "D-"	;  name of word as a string, ending at wh_NameLastChar
>bf76	02					.byte *-L1	;wh_NameLength	length of name
>bf77	e9 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf79	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf7a	10					.byte UF	;wh_Flags	dictionary flags
=48886					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf7b					D_Minus:
.bf7b	20 89 b3	jsr $b389			jsr underflow_4 ; two double numbers
.bf7e	38		sec				sec
.bf7f	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of lower word
.bf81	f5 26		sbc $26,x			sbc DStack+2,x
.bf83	95 2a		sta $2a,x			sta DStack+6,x
.bf85	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of lower word
.bf87	f5 27		sbc $27,x			sbc DStack+3,x
.bf89	95 2b		sta $2b,x			sta DStack+7,x
.bf8b	b5 28		lda $28,x			lda DStack+4,x	; LSB of upper word
.bf8d	f5 24		sbc $24,x			sbc DStack+0,x
.bf8f	95 28		sta $28,x			sta DStack+4,x
.bf91	b5 29		lda $29,x			lda DStack+5,x	; MSB of upper word
.bf93	f5 25		sbc $25,x			sbc DStack+1,x
.bf95	95 29		sta $29,x			sta DStack+5,x
.bf97	e8		inx				inx
.bf98	e8		inx				inx
.bf99	e8		inx				inx
.bf9a	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$bf9b					en = *	; remember here
>bf79	20					.byte CL	;wh_CodeLength
.bf9b	60		rts				rts
>bf9c	44 2b				L1:	.text "D+"	;  name of word as a string, ending at wh_NameLastChar
>bf9e	02					.byte *-L1	;wh_NameLength	length of name
>bf9f	f6 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfa1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfa2	10					.byte UF	;wh_Flags	dictionary flags
=48926					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfa3					D_Plus:
.bfa3	20 89 b3	jsr $b389			jsr underflow_4 ; two double numbers
.bfa6	18		clc				clc
.bfa7	b5 26		lda $26,x			lda DStack+2,x	; LSB of lower word
.bfa9	75 2a		adc $2a,x			adc DStack+6,x
.bfab	95 2a		sta $2a,x			sta DStack+6,x
.bfad	b5 27		lda $27,x			lda DStack+3,x	; MSB of lower word
.bfaf	75 2b		adc $2b,x			adc DStack+7,x
.bfb1	95 2b		sta $2b,x			sta DStack+7,x
.bfb3	b5 24		lda $24,x			lda DStack+0,x	; LSB of upper word
.bfb5	75 28		adc $28,x			adc DStack+4,x
.bfb7	95 28		sta $28,x			sta DStack+4,x
.bfb9	b5 25		lda $25,x			lda DStack+1,x	; MSB of upper word
.bfbb	75 29		adc $29,x			adc DStack+5,x
.bfbd	95 29		sta $29,x			sta DStack+5,x
.bfbf	e8		inx				inx
.bfc0	e8		inx				inx
.bfc1	e8		inx				inx
.bfc2	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$bfc3					en = *	; remember here
>bfa1	20					.byte CL	;wh_CodeLength
.bfc3	60		rts				rts
>bfc4	44 31 2b			L1:	.text "D1+"	;  name of word as a string, ending at wh_NameLastChar
>bfc7	03					.byte *-L1	;wh_NameLength	length of name
>bfc8	1e bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfcb	10					.byte UF	;wh_Flags	dictionary flags
=48967					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfcc	20 7f b3	jsr $b37f	D1Plus:		jsr underflow_2
.bfcf	f6 26		inc $26,x			inc DStack+2,x
.bfd1	d0 0a		bne $bfdd			bne +
.bfd3	f6 27		inc $27,x			inc DStack+3,x
.bfd5	d0 06		bne $bfdd			bne +
.bfd7	f6 24		inc $24,x			inc DStack+0,x
.bfd9	d0 02		bne $bfdd			bne +
.bfdb	f6 25		inc $25,x			inc DStack+1,x
.bfdd					+
=17					CL	.var *-(WordListLink+wh_Xt)
=$bfdd					en = *	; remember here
>bfca	11					.byte CL	;wh_CodeLength
.bfdd	60		rts				rts
>bfde	44 31 2d			L1:	.text "D1-"	;  name of word as a string, ending at wh_NameLastChar
>bfe1	03					.byte *-L1	;wh_NameLength	length of name
>bfe2	47 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfe4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfe5	10					.byte UF	;wh_Flags	dictionary flags
=48993					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfe6	20 7f b3	jsr $b37f	D1Minus:	jsr underflow_2
.bfe9	b5 26		lda $26,x			lda DStack+2,x
.bfeb	d0 0e		bne $bffb			bne _1
.bfed	b5 27		lda $27,x			lda DStack+3,x
.bfef	d0 08		bne $bff9			bne _2
.bff1	b5 24		lda $24,x			lda DStack+0,x
.bff3	d0 02		bne $bff7			bne _3
.bff5	d6 25		dec $25,x			dec DStack+1,x
.bff7	d6 24		dec $24,x	_3:		dec DStack+0,x
.bff9	d6 27		dec $27,x	_2:		dec DStack+3,x
.bffb	d6 26		dec $26,x	_1:		dec DStack+2,x
=23					CL	.var *-(WordListLink+wh_Xt)
=$bffd					en = *	; remember here
>bfe4	17					.byte CL	;wh_CodeLength
.bffd	60		rts				rts
>bffe	41 6c 6c 6f 74			L1:	.text "Allot"	;  name of word as a string, ending at wh_NameLastChar
>c003	05					.byte *-L1	;wh_NameLength	length of name
>c004	61 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c006	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c007	18					.byte UF+NN	;wh_Flags	dictionary flags
=49027					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c008					Allot:
.c008	20 6a b3	jsr $b36a			jsr underflow_1
.c00b	18		clc				clc			; adjust cp
.c00c	b5 24		lda $24,x			lda DStack+0,x
.c00e	65 00		adc $00				adc cp+0
.c010	85 00		sta $00				sta cp+0
.c012	a8		tay				tay			;   save lo byte
.c013	b5 25		lda $25,x			lda DStack+1,x
.c015	85 14		sta $14				sta tmp1
.c017	65 01		adc $01				adc cp+1
.c019	85 01		sta $01				sta cp+1
.c01b	24 14		bit $14				bit tmp1
.c01d	30 15		bmi $c034			bmi _release
.c01f	b0 06		bcs $c027			bcs _pos_err		; carry from the add is bad
=32600					_last = cp_end-2*PadOffset
.c021	c0 58		cpy #$58			cpy #<_last		; cp < cp_end ?
.c023	e9 7f		sbc #$7f			sbc #>_last
.c025	90 2c		bcc $c053			bcc _done		; we're fine.
.c027					_pos_err:
.c027	a9 58		lda #$58			lda #<_last
.c029	85 00		sta $00				sta cp+0
.c02b	a9 7f		lda #$7f			lda #>_last
.c02d	85 01		sta $01				sta cp+1
.c02f	a9 c5		lda #$c5			lda #$100+err_Allocate
.c031	4c c9 b3	jmp $b3c9			jmp ThrowA
.c034					_release:
.c034	90 06		bcc $c03c			bcc _neg_err		; borrow indicates we've gone below 0
.c036	c0 66		cpy #$66			cpy #<cp0
.c038	e9 0b		sbc #$0b			sbc #>cp0
.c03a	b0 17		bcs $c053			bcs _done
.c03c					_neg_err:
.c03c	a9 66		lda #$66			lda #<cp0		; Set CP to CP0
.c03e	85 00		sta $00				sta cp+0
.c040	a9 0b		lda #$0b			lda #>cp0
.c042	85 01		sta $01				sta cp+1
.c044	a9 20		lda #$20			lda #<forth_dictionary_start	; set WordLists[Forth] to the first
.c046	8d 12 03	sta $0312			sta WordlistsV+0		; word in ROM
.c049	a9 ce		lda #$ce			lda #>forth_dictionary_start
.c04b	8d 13 03	sta $0313			sta WordlistsV+1
.c04e	a9 c4		lda #$c4			lda #$100+err_Free		; abort with an error
.c050	4c c9 b3	jmp $b3c9			jmp ThrowA
.c053					_done:
.c053	e8		inx				inx			; Drop n
.c054	e8		inx				inx
=77					CL	.var *-(WordListLink+wh_Xt)
=$c055					en = *	; remember here
>c006	4d					.byte CL	;wh_CodeLength
.c055	60		rts				rts
>c056	48 65 61 64 65 72 2c		L1:	.text "Header,"	;  name of word as a string, ending at wh_NameLastChar
>c05d	07					.byte *-L1	;wh_NameLength	length of name
>c05e	83 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c060	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c061	08					.byte NN	;wh_Flags	dictionary flags
=49117					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c062					Header_Comma:
.c062	20 70 c0	jsr $c070			jsr Header_Build
.c065					Header_Link:
.c065	a5 0e		lda $0e				lda WorkWord+0		; dp= WorkWord
.c067	85 10		sta $10				sta dp+0
.c069	a5 0f		lda $0f				lda WorkWord+1
.c06b	85 11		sta $11				sta dp+1
.c06d	4c ca b9	jmp $b9ca			jmp dp_to_current	; Update the CURRENT wordlist with the new DP.
.c070					Header_Build:
.c070	20 1a ba	jsr $ba1a			jsr parse_name_check	; get name string
.c073	20 c4 cb	jsr $cbc4			jsr Two_dup		; ( addr u addr u )
.c076	20 26 bc	jsr $bc26			jsr find_name		; ( addr u nt )
.c079	b5 25		lda $25,x			lda DStack+1,x		; not found?
.c07b	e8		inx				inx			; Drop flag from find-name.
.c07c	e8		inx				inx
.c07d	a8		tay				tay
.c07e	f0 1f		beq $c09f			beq _new_name		; We haven't seen this one before.
.c080	24 0c		bit $0c				bit status		; Check bit 7
.c082	10 08		bpl $c08c			bpl _redefined_name	; Bit 7 is zero, so print the message.
.c084	a9 80		lda #$80			lda #$80		; Set bit 7 to indicate dup
.c086	05 0c		ora $0c				ora status
.c088	85 0c		sta $0c				sta status
.c08a	d0 19		bne $c0a5			bne _process_name
.c08c					_redefined_name:
.c08c	a9 30		lda #$30			lda #<str_redefined
.c08e	a0 da		ldy #$da			ldy #>str_redefined
.c090	20 13 cd	jsr $cd13			jsr Print_ASCIIZ_YA_no_lf
.c093	20 c4 cb	jsr $cbc4			jsr Two_dup		 ; ( addr u addr u )
.c096	20 f2 cc	jsr $ccf2			jsr Type
.c099	20 e5 cc	jsr $cce5			jsr Space
.c09c	4c a5 c0	jmp $c0a5			jmp _process_name
.c09f					_new_name:
.c09f	a9 7f		lda #$7f			lda #$7F		; Clear bit 0 of status to indicate new word.
.c0a1	25 0c		and $0c				and status
.c0a3	85 0c		sta $0c				sta status
.c0a5					_process_name:
.c0a5	20 c4 cb	jsr $cbc4			jsr Two_dup		; compile name string ending at wh_NameLastChar
.c0a8	20 2c c9	jsr $c92c			jsr Here
.c0ab	20 88 ce	jsr $ce88			jsr Swap
.c0ae	20 fd ac	jsr $acfd			jsr CMove
.c0b1	20 6a ce	jsr $ce6a			jsr Dup
.c0b4	20 08 c0	jsr $c008			jsr Allot
.c0b7	20 06 cc	jsr $cc06			jsr C_Comma		; compile wh_NameLength
.c0ba	e8		inx				inx			; drop name string addr
.c0bb	e8		inx				inx
.c0bc	20 ba b9	jsr $b9ba			jsr current_to_dp	; Get the CURRENT dictionary pointer.
.c0bf	a5 10		lda $10				lda dp+0		; compile wh_WordListLink
.c0c1	a4 11		ldy $11				ldy dp+1
.c0c3	20 23 cc	jsr $cc23			jsr Comma_YA
.c0c6	a9 03		lda #$03			lda #3			; compile wh_CodeLength (temporary value, see adjust_z)
.c0c8	20 09 cc	jsr $cc09			jsr C_Comma_A
.c0cb	a9 08		lda #$08			lda #NN			; compile wh_Flags
.c0cd	20 09 cc	jsr $cc09			jsr C_Comma_A
.c0d0	38		sec				sec			; WorkWord= nt
.c0d1	a5 00		lda $00				lda cp+0
.c0d3	e9 85		sbc #$85			sbc #wh_xt
.c0d5	85 0e		sta $0e				sta WorkWord+0
.c0d7	a5 01		lda $01				lda cp+1
.c0d9	e9 00		sbc #$00			sbc #0
.c0db	85 0f		sta $0f				sta WorkWord+1
.c0dd	60		rts				rts
=124					CL	.var *-(WordListLink+wh_Xt)
=$c0de					en = *	; remember here
>c060	7c					.byte CL	;wh_CodeLength
>c0de	43 72 65 61 74 65		L1:	.text "Create"	;  name of word as a string, ending at wh_NameLastChar
>c0e4	06					.byte *-L1	;wh_NameLength	length of name
>c0e5	dd bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c0e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c0e8	08					.byte NN	;wh_Flags	dictionary flags
=49252					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c0e9					Create:
.c0e9	20 62 c0	jsr $c062			jsr Header_Comma	; compile word header
.c0ec	a9 f6		lda #$f6			lda #<DoVar
.c0ee	a0 c0		ldy #$c0			ldy #>DoVar
.c0f0	20 48 cc	jsr $cc48			jsr Jsr_Comma_YA
.c0f3	4c 4d bb	jmp $bb4d			jmp adjust_z
=13					CL	.var *-(WordListLink+wh_Xt)
=$c0f6					en = *	; remember here
>c0e7	0d					.byte CL	;wh_CodeLength
.c0f6					DoVar:
.c0f6	68		pla				pla		; Pull the return address off the machine's stack
.c0f7	18		clc				clc		;   +1 because of the way the JSR works
.c0f8	69 01		adc #$01			adc #1
.c0fa	ca		dex				dex		; push on data stack
.c0fb	ca		dex				dex
.c0fc	95 24		sta $24,x			sta DStack+0,x
.c0fe	68		pla				pla
.c0ff	69 00		adc #$00			adc #0
.c101	95 25		sta $25,x			sta DStack+1,x
.c103	60		rts				rts		; takes us to the original caller of the
>c104	44 6f 65 73 3e			L1:	.text "Does>"	;  name of word as a string, ending at wh_NameLastChar
>c109	05					.byte *-L1	;wh_NameLength	length of name
>c10a	64 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c10c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c10d	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=49289					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c10e					Does:
.c10e	a0 c1		ldy #$c1			ldy #>_runtime
.c110	a9 28		lda #$28			lda #<_runtime
.c112	20 48 cc	jsr $cc48			jsr Jsr_Comma_YA
.c115	a9 68		lda #$68			lda #$68		; compile PLA  to pop RTS addr (PFA-1) to AY
.c117	a0 a8		ldy #$a8			ldy #$a8		;    & TAY
.c119	20 23 cc	jsr $cc23			jsr Comma_YA
.c11c	a9 68		lda #$68			lda #$68		; compile PLA
.c11e	20 09 cc	jsr $cc09			jsr C_Comma_A
.c121	a0 c1		ldy #$c1			ldy #>_dodoes
.c123	a9 3a		lda #$3a			lda #<_dodoes
.c125	4c 48 cc	jmp $cc48			jmp Jsr_Comma_YA
=26					CL	.var *-(WordListLink+wh_Xt)
=$c128					en = *	; remember here
>c10c	1a					.byte CL	;wh_CodeLength
.c128					_runtime:
.c128	20 ba b9	jsr $b9ba			jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.c12b	18		clc				clc
.c12c	68		pla				pla		; RTS addr LSB
.c12d	69 01		adc #$01			adc #1		;   +1 for JSR bahavior
.c12f	a0 86		ldy #$86			ldy #Wh_xt+1
.c131	91 10		sta ($10),y			sta (dp),y
.c133	68		pla				pla		; RTS addr MSB
.c134	69 00		adc #$00			adc #0
.c136	c8		iny				iny
.c137	91 10		sta ($10),y			sta (dp),y
.c139	60		rts				rts
.c13a					_dodoes:
.c13a	c8		iny				iny		; +1 for JSR behavior
.c13b	d0 03		bne $c140			bne +
.c13d	18		clc				clc
.c13e	69 01		adc #$01			adc #1
.c140					+
.c140	4c 78 ce	jmp $ce78			jmp PushAY
>c143	55 6e 75 73 65 64		L1:	.text "Unused"	;  name of word as a string, ending at wh_NameLastChar
>c149	06					.byte *-L1	;wh_NameLength	length of name
>c14a	89 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c14c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c14d	00					.byte 0	;wh_Flags	dictionary flags
=49353					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c14e					Unused:
=32600					_last = cp_end-2*padoffset
.c14e	ca		dex				dex
.c14f	ca		dex				dex
.c150	38		sec				sec
.c151	a9 58		lda #$58			lda #<_last
.c153	e5 00		sbc $00				sbc cp+0
.c155	95 24		sta $24,x			sta DStack+0,x
.c157	a9 7f		lda #$7f			lda #>_last
.c159	e5 01		sbc $01				sbc cp+1
.c15b	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$c15d					en = *	; remember here
>c14c	0f					.byte CL	;wh_CodeLength
.c15d	60		rts				rts
>c15e	44 65 70 74 68			L1:	.text "Depth"	;  name of word as a string, ending at wh_NameLastChar
>c163	05					.byte *-L1	;wh_NameLength	length of name
>c164	c9 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c166	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c167	08					.byte NN	;wh_Flags	dictionary flags
=49379					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c168					Depth:
.c168	a9 28		lda #$28			lda #DStack0	; A= DStack0 - X
.c16a	86 1a		stx $1a				stx tmp4
.c16c	38		sec				sec
.c16d	e5 1a		sbc $1a				sbc tmp4
.c16f	4a		lsr a				lsr		; divide by two because each cell is two bytes
.c170	4c 3a b7	jmp $b73a			jmp PushZA
=11					CL	.var *-(WordListLink+wh_Xt)
=$c173					en = *	; remember here
>c166	0b					.byte CL	;wh_CodeLength
>c173	4b 65 79			L1:	.text "Key"	;  name of word as a string, ending at wh_NameLastChar
>c176	03					.byte *-L1	;wh_NameLength	length of name
>c177	e3 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c179	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c17a	08					.byte NN	;wh_Flags	dictionary flags
=49398					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c17b	20 81 c1	jsr $c181	Key:		jsr key_a		; returns char in A
.c17e	4c 3a b7	jmp $b73a			jmp PushZA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c181					en = *	; remember here
>c179	06					.byte CL	;wh_CodeLength
.c181					Key_A:
.c181	6c 08 03	jmp ($0308)			jmp (input)		; JSR/RTS
>c184	4b 65 79 3f			L1:	.text "Key?"	;  name of word as a string, ending at wh_NameLastChar
>c188	04					.byte *-L1	;wh_NameLength	length of name
>c189	f6 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c18b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c18c	08					.byte NN	;wh_Flags	dictionary flags
=49416					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c18d	20 93 c1	jsr $c193	KeyQ:		jsr KeyQ_A
.c190	4c 3a b7	jmp $b73a			jmp PushZA
.c193	6c 0a 03	jmp ($030a)	KeyQ_A:		jmp (HaveKey)
>c196	52 65 66 69 6c 6c		L1:	.text "Refill"	;  name of word as a string, ending at wh_NameLastChar
>c19c	06					.byte *-L1	;wh_NameLength	length of name
>c19d	08 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c19f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c1a0	08					.byte NN	;wh_Flags	dictionary flags
=49436					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c1a1					Refill:
.c1a1	a9 00		lda #$00			lda #0			; show empty in case of error
.c1a3	85 06		sta $06				sta ciblen+0
.c1a5	85 07		sta $07				sta ciblen+1
.c1a7	a5 02		lda $02				lda insrc		; cheat: We only check LSB
.c1a9	d0 24		bne $c1cf			bne _src_not_kbd
.c1ab	a5 04		lda $04				lda cib+0		; address of CIB is NOS
.c1ad	a4 05		ldy $05				ldy cib+1
.c1af	20 f8 b6	jsr $b6f8			jsr PushYA
.c1b2	a9 ff		lda #$ff			lda #bsize		; max number of chars is TOS
.c1b4	20 3a b7	jsr $b73a			jsr PushZA		;  cheat: We only accept max 255
.c1b7	20 e6 c1	jsr $c1e6			jsr Accept		; ( addr n1 -- n2)
.c1ba	b5 24		lda $24,x			lda DStack+0,x
.c1bc	85 06		sta $06				sta ciblen+0
.c1be	b5 25		lda $25,x			lda DStack+1,x
.c1c0	85 07		sta $07				sta ciblen+1		; though we only accept 255 chars
.c1c2	a9 00		lda #$00			lda #0
.c1c4	85 08		sta $08				sta toin+0
.c1c6	85 09		sta $09				sta toin+1
.c1c8	a9 ff		lda #$ff			lda #$FF		; overwrite with TRUE flag
.c1ca	95 24		sta $24,x			sta DStack+0,x
.c1cc	95 25		sta $25,x			sta DStack+1,x
.c1ce	60		rts				rts
.c1cf					_src_not_kbd:
.c1cf	c9 ff		cmp #$ff			cmp #$ff
.c1d1	d0 03		bne $c1d6			bne _src_not_string
.c1d3	4c 2b b7	jmp $b72b			jmp False
.c1d6					_src_not_string:
.c1d6	a9 eb		lda #$eb			lda #$100+err_Unsupported
.c1d8	20 c9 b3	jsr $b3c9			jsr ThrowA
=58					CL	.var *-(WordListLink+wh_Xt)
=$c1db					en = *	; remember here
>c19f	3a					.byte CL	;wh_CodeLength
>c1db	41 63 63 65 70 74		L1:	.text "Accept"	;  name of word as a string, ending at wh_NameLastChar
>c1e1	06					.byte *-L1	;wh_NameLength	length of name
>c1e2	1c c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c1e4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c1e5	18					.byte UF+NN	;wh_Flags	dictionary flags
=49505					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c1e6					Accept:
.c1e6	20 7f b3	jsr $b37f			jsr underflow_2
.c1e9	b5 24		lda $24,x			lda DStack+0,x		; Abort if we were asked to receive 0 chars
.c1eb	15 25		ora $25,x			ora DStack+1,x
.c1ed	d0 09		bne $c1f8			bne _not_zero
.c1ef	e8		inx				inx			; drop n
.c1f0	e8		inx				inx
.c1f1	95 24		sta $24,x			sta DStack+0,x		; replace addr with 0
.c1f3	95 25		sta $25,x			sta DStack+1,x
.c1f5	4c cd c2	jmp $c2cd			jmp accept_done
.c1f8					_not_zero:
.c1f8	b5 24		lda $24,x			lda DStack+0,x	; number of chars to get in tmp2 ...
.c1fa	85 16		sta $16				sta tmp2
.c1fc	a9 00		lda #$00			lda #0
.c1fe	85 17		sta $17				sta tmp2+1	; ... but we only accept max 255 chars
.c200	b5 26		lda $26,x			lda DStack+2,x	; address of buffer is NOS, to tmp1
.c202	85 14		sta $14				sta tmp1
.c204	b5 27		lda $27,x			lda DStack+3,x
.c206	85 15		sta $15				sta tmp1+1
.c208	e8		inx				inx
.c209	e8		inx				inx
.c20a	a0 00		ldy #$00			ldy #0
.c20c	a5 0c		lda $0c				lda status
.c20e	29 f7		and #$f7			and #$f7
.c210	18		clc				clc
.c211	69 01		adc #$01			adc #1
.c213	09 08		ora #$08			ora #$08
.c215	85 0c		sta $0c				sta status
.c217					accept_loop:
.c217	20 81 c1	jsr $c181			jsr key_a
.c21a	c9 0a		cmp #$0a			cmp #AscLF
.c21c	f0 20		beq $c23e			beq _eol
.c21e	c9 0d		cmp #$0d			cmp #AscCR
.c220	f0 1c		beq $c23e			beq _eol
.c222	c9 08		cmp #$08			cmp #AscBS
.c224	f0 24		beq $c24a			beq _backspace
.c226	c9 7f		cmp #$7f			cmp #AscDEL	; (CTRL-h)
.c228	f0 20		beq $c24a			beq _backspace
.c22a	c9 10		cmp #$10			cmp #AscCP
.c22c	f0 37		beq $c265			beq _ctrl_p
.c22e	c9 0e		cmp #$0e			cmp #AscCN
.c230	f0 46		beq $c278			beq _ctrl_n
.c232	91 14		sta ($14),y			sta (tmp1),y
.c234	c8		iny				iny
.c235	20 d8 cc	jsr $ccd8			jsr Emit_A
.c238	c4 16		cpy $16				cpy tmp2	; reached character limit?
.c23a	d0 db		bne $c217			bne accept_loop	      ; fall through if buffer limit reached
.c23c	f0 03		beq $c241			beq _buffer_full
.c23e					_eol:
.c23e	20 e5 cc	jsr $cce5			jsr Space	; print final space
.c241					_buffer_full:
.c241	94 24		sty $24,x			sty DStack+0,x	; Y contains number of chars accepted already
.c243	a9 00		lda #$00			lda #0
.c245	95 25		sta $25,x			sta DStack+1,x		; we only accept 256 chars
.c247	4c cd c2	jmp $c2cd			jmp accept_done
.c24a					_backspace:
.c24a	c0 00		cpy #$00			cpy #0		; buffer empty?
.c24c	d0 06		bne $c254			bne +
.c24e	a9 07		lda #$07			lda #AscBELL	; complain and don't delete beyond the start of line
.c250	20 d8 cc	jsr $ccd8			jsr Emit_A
.c253	c8		iny				iny
.c254					+
.c254	88		dey				dey
.c255	a9 08		lda #$08			lda #AscBS	; move back one
.c257	20 d8 cc	jsr $ccd8			jsr Emit_A
.c25a	20 e5 cc	jsr $cce5			jsr Space	; print a space (rubout)
.c25d	a9 08		lda #$08			lda #AscBS	; move back over space
.c25f	20 d8 cc	jsr $ccd8			jsr Emit_A
.c262	4c 17 c2	jmp $c217			jmp accept_loop
.c265					_ctrl_p:
.c265	a5 0c		lda $0c				lda status
.c267	29 07		and #$07			and #7
.c269	d0 08		bne $c273			bne _ctrl_p_dec
.c26b	a5 0c		lda $0c				lda status
.c26d	09 07		ora #$07			ora #7
.c26f	85 0c		sta $0c				sta status
.c271	d0 14		bne $c287			bne _recall_history
.c273					_ctrl_p_dec:
.c273	c6 0c		dec $0c				dec status
.c275	4c 87 c2	jmp $c287			jmp _recall_history
.c278					_ctrl_n:
.c278	a9 08		lda #$08			lda #$8
.c27a	24 0c		bit $0c				bit status
.c27c	d0 09		bne $c287			bne _recall_history
.c27e	a5 0c		lda $0c				lda status
.c280	29 f7		and #$f7			and #$f7
.c282	18		clc				clc
.c283	69 01		adc #$01			adc #1
.c285	85 0c		sta $0c				sta status
.c287					_recall_history:
.c287	a9 f7		lda #$f7			lda #$ff-%00001000
.c289	25 0c		and $0c				and status
.c28b	85 0c		sta $0c				sta status
.c28d	20 e8 c2	jsr $c2e8			jsr accept_total_recall
.c290	a9 0d		lda #$0d			lda #AscCR
.c292	20 d8 cc	jsr $ccd8			jsr Emit_A
.c295					input_clear:
.c295	c0 00		cpy #$00			cpy #0
.c297	f0 07		beq $c2a0			beq input_cleared
.c299	20 e5 cc	jsr $cce5			jsr Space
.c29c	88		dey				dey
.c29d	4c 95 c2	jmp $c295			jmp input_clear
.c2a0					input_cleared:
.c2a0	a9 0d		lda #$0d			lda #AscCR
.c2a2	20 d8 cc	jsr $ccd8			jsr Emit_A
.c2a5	b1 18		lda ($18),y			lda (tmp3),y
.c2a7	85 0d		sta $0d				sta status+1
.c2a9	e6 18		inc $18				inc tmp3
.c2ab	d0 02		bne $c2af			bne +		; Increment the upper byte on carry.
.c2ad	e6 19		inc $19				inc tmp3+1
.c2af					+
.c2af	a9 0d		lda #$0d			lda #AscCR
.c2b1	20 d8 cc	jsr $ccd8			jsr Emit_A
.c2b4					_history_loop:
.c2b4	c4 0d		cpy $0d				cpy status+1
.c2b6	d0 03		bne $c2bb			bne +
.c2b8	4c 17 c2	jmp $c217			jmp accept_loop	      ; Needs a long jump
.c2bb					+
.c2bb	c4 16		cpy $16				cpy tmp2
.c2bd	f0 0a		beq $c2c9			beq _hist_filled_buffer
.c2bf	b1 18		lda ($18),y			lda (tmp3),y
.c2c1	91 14		sta ($14),y			sta (tmp1),y
.c2c3	20 d8 cc	jsr $ccd8			jsr Emit_A
.c2c6	c8		iny				iny
.c2c7	d0 eb		bne $c2b4			bne _history_loop
.c2c9					_hist_filled_buffer:
.c2c9	88		dey				dey
.c2ca	4c 17 c2	jmp $c217			jmp accept_loop
.c2cd					accept_done:
.c2cd	20 e8 c2	jsr $c2e8			jsr accept_total_recall
.c2d0	85 0d		sta $0d				sta status+1
.c2d2	a0 00		ldy #$00			ldy #0
.c2d4	91 18		sta ($18),y			sta (tmp3),y
.c2d6	e6 18		inc $18				inc tmp3
.c2d8	d0 02		bne $c2dc			bne +		; Increment the upper byte on carry.
.c2da	e6 19		inc $19				inc tmp3+1
.c2dc					+
.c2dc					_save_history_loop:
.c2dc	c4 0d		cpy $0d				cpy status+1
.c2de	f0 07		beq $c2e7			beq _save_history_done
.c2e0	b1 14		lda ($14),y			lda (tmp1),y
.c2e2	91 18		sta ($18),y			sta (tmp3),y
.c2e4	c8		iny				iny
.c2e5	d0 f5		bne $c2dc			bne _save_history_loop
.c2e7					_save_history_done:
=257					CL	.var *-(WordListLink+wh_Xt)
=$ff					CL	 .var $ff
=$c2e7					en = *	; remember here
>c1e4	ff					.byte CL	;wh_CodeLength
.c2e7	60		rts				rts
.c2e8					accept_total_recall:
.c2e8	a9 66		lda #$66			lda #<hist_buff
.c2ea	85 18		sta $18				sta tmp3
.c2ec	a9 07		lda #$07			lda #>hist_buff
.c2ee	85 19		sta $19				sta tmp3+1
.c2f0	a5 0c		lda $0c				lda status
.c2f2	6a		ror a				ror
.c2f3	29 03		and #$03			and #3
.c2f5	18		clc				clc
.c2f6	65 19		adc $19				adc tmp3+1
.c2f8	85 19		sta $19				sta tmp3+1
.c2fa	a5 0c		lda $0c				lda status
.c2fc	6a		ror a				ror		; Rotate through carry into msb.
.c2fd	6a		ror a				ror
.c2fe	29 80		and #$80			and #$80
.c300	18		clc				clc
.c301	65 18		adc $18				adc tmp3
.c303	85 18		sta $18				sta tmp3
.c305	90 02		bcc $c309			bcc +		; Increment the upper byte on carry.
.c307	e6 19		inc $19				inc tmp3+1
.c309					+
.c309	98		tya				tya
.c30a	c9 80		cmp #$80			cmp #$80
.c30c	90 02		bcc $c310			bcc +
.c30e	a9 7f		lda #$7f			lda #$7F
.c310					+
.c310	60		rts				rts
>c311	49 6e 70 75 74 3e 52		L1:	.text "Input>R"	;  name of word as a string, ending at wh_NameLastChar
>c318	07					.byte *-L1	;wh_NameLength	length of name
>c319	61 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c31b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c31c	08					.byte NN	;wh_Flags	dictionary flags
=49816					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c31d					Input_To_R:
.c31d	68		pla				pla			; move it out of the way
.c31e	85 14		sta $14				sta tmp1+0
.c320	68		pla				pla
.c321	85 15		sta $15				sta tmp1+1
.c323	a0 07		ldy #$07			ldy #7
.c325	b9 02 00	lda $0002,y	_loop:		lda InSrc,y	; insrc+7 is toin+1
.c328	48		pha				pha
.c329	88		dey				dey
.c32a	10 f9		bpl $c325			bpl _loop
.c32c	a5 15		lda $15				lda tmp1+1		; Restore address for return jump
.c32e	48		pha				pha
.c32f	a5 14		lda $14				lda tmp1+0
.c331	48		pha				pha
=21					CL	.var *-(WordListLink+wh_Xt)
=$c332					en = *	; remember here
>c31b	15					.byte CL	;wh_CodeLength
.c332	60		rts				rts
>c333	52 3e 49 6e 70 75 74		L1:	.text "R>Input"	;  name of word as a string, ending at wh_NameLastChar
>c33a	07					.byte *-L1	;wh_NameLength	length of name
>c33b	98 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c33d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c33e	08					.byte NN	;wh_Flags	dictionary flags
=49850					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c33f					R_To_Input:
.c33f	68		pla				pla		 ; move it out of the way
.c340	85 14		sta $14				sta tmp1+0
.c342	68		pla				pla
.c343	85 15		sta $15				sta tmp1+1
.c345	a0 00		ldy #$00			ldy #0
.c347	68		pla		_loop:		pla
.c348	99 02 00	sta $0002,y			sta InSrc,y ; also cib ciblen toin
.c34b	c8		iny				iny
.c34c	c0 08		cpy #$08			cpy #8
.c34e	d0 f7		bne $c347			bne _loop
.c350	a5 15		lda $15				lda tmp1+1		; Restore address for return jump
.c352	48		pha				pha
.c353	a5 14		lda $14				lda tmp1+0
.c355	48		pha				pha
=23					CL	.var *-(WordListLink+wh_Xt)
=$c356					en = *	; remember here
>c33d	17					.byte CL	;wh_CodeLength
.c356	60		rts				rts
>c357	42 6f 75 6e 64 73		L1:	.text "Bounds"	;  name of word as a string, ending at wh_NameLastChar
>c35d	06					.byte *-L1	;wh_NameLength	length of name
>c35e	ba c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c360	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c361	10					.byte UF	;wh_Flags	dictionary flags
=49885					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c362					Bounds:
.c362	20 7f b3	jsr $b37f			jsr underflow_2
.c365	18		clc				clc
.c366	b5 26		lda $26,x			lda DStack+2,x		; LSB addr
.c368	a8		tay				tay
.c369	75 24		adc $24,x			adc DStack+0,x		; LSB u
.c36b	95 26		sta $26,x			sta DStack+2,x		; LSB addr+u
.c36d	94 24		sty $24,x			sty DStack+0,x
.c36f	b5 27		lda $27,x			lda DStack+3,x		; MSB addr
.c371	a8		tay				tay
.c372	75 25		adc $25,x			adc DStack+1,x		; MSB u
.c374	95 27		sta $27,x			sta DStack+3,x		; MSB addr+u
.c376	94 25		sty $25,x			sty DStack+1,x
=22					CL	.var *-(WordListLink+wh_Xt)
=$c378					en = *	; remember here
>c360	16					.byte CL	;wh_CodeLength
.c378	60		rts				rts
>c379	53 70 61 63 65 73		L1:	.text "Spaces"	;  name of word as a string, ending at wh_NameLastChar
>c37f	06					.byte *-L1	;wh_NameLength	length of name
>c380	dd c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c382	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c383	18					.byte UF+NN	;wh_Flags	dictionary flags
=49919					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c384					Spaces:
.c384	20 6a b3	jsr $b36a			jsr underflow_1
.c387	4c 8d c3	jmp $c38d			jmp _test
.c38a					_loop:
.c38a	20 e5 cc	jsr $cce5			jsr Space		; print a space
.c38d	d6 24		dec $24,x	_test:		dec DStack+0,x		; decrement & test
.c38f	10 f9		bpl $c38a			bpl _loop
.c391	e8		inx				inx			; Drop
.c392	e8		inx				inx
=15					CL	.var *-(WordListLink+wh_Xt)
=$c393					en = *	; remember here
>c382	0f					.byte CL	;wh_CodeLength
.c393	60		rts				rts
>c394	2d 54 72 61 69 6c 69 6e		L1:	.text "-Trailing"	;  name of word as a string, ending at wh_NameLastChar
>c39c	67
>c39d	09					.byte *-L1	;wh_NameLength	length of name
>c39e	ff c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3a0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3a1	18					.byte UF+NN	;wh_Flags	dictionary flags
=49949					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3a2					Minus_trailing:
.c3a2	20 7f b3	jsr $b37f			jsr underflow_2
.c3a5	b5 26		lda $26,x			lda DStack+2,x		; tmp1= addr + (u1 & $ff00)
.c3a7	85 14		sta $14				sta tmp1+0
.c3a9	b5 27		lda $27,x			lda DStack+3,x
.c3ab	18		clc				clc
.c3ac	75 25		adc $25,x			adc DStack+1,x
.c3ae	85 15		sta $15				sta tmp1+1
.c3b0	b4 24		ldy $24,x			ldy DStack+0,x
.c3b2	88		dey		_loop:		dey			; back 1 char
.c3b3	c0 ff		cpy #$ff			cpy #$ff
.c3b5	d0 06		bne $c3bd			bne +
.c3b7	c6 15		dec $15				dec tmp1+1		;   back 1 page
.c3b9	d6 25		dec $25,x			dec DStack+1,x
.c3bb	30 06		bmi $c3c3			bmi _done
.c3bd					+
.c3bd	b1 14		lda ($14),y			lda (tmp1),y		; if blank, keep going
.c3bf	c9 20		cmp #$20			cmp #AscSP
.c3c1	f0 ef		beq $c3b2			beq _loop
.c3c3	c8		iny		_done:		iny			; forward 1 char
.c3c4	d0 02		bne $c3c8			bne +
.c3c6	f6 25		inc $25,x			inc DStack+1,x
.c3c8	94 24		sty $24,x	+		sty DStack+0,x
=40					CL	.var *-(WordListLink+wh_Xt)
=$c3ca					en = *	; remember here
>c3a0	28					.byte CL	;wh_CodeLength
.c3ca	60		rts				rts
>c3cb	2d 4c 65 61 64 69 6e 67		L1:	.text "-Leading"	;  name of word as a string, ending at wh_NameLastChar
>c3d3	08					.byte *-L1	;wh_NameLength	length of name
>c3d4	1d c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3d6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3d7	18					.byte UF+NN	;wh_Flags	dictionary flags
=50003					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3d8					Minus_leading:
.c3d8	20 7f b3	jsr $b37f			jsr underflow_2
.c3db					_loop:
.c3db	b5 24		lda $24,x			lda DStack+0,x		; chars left?
.c3dd	15 25		ora $25,x			ora DStack+1,x
.c3df	f0 0f		beq $c3f0			beq _done
.c3e1	a1 26		lda ($26,x)			lda (DStack+2,x)	; get first character
.c3e3	c9 21		cmp #$21			cmp #AscSP+1		;   is_whitespace
.c3e5	b0 09		bcs $c3f0			bcs _done
.c3e7	20 6a c9	jsr $c96a			jsr NOS_One_Plus
.c3ea	20 3d c9	jsr $c93d			jsr One_Minus_NoUF
.c3ed	4c db c3	jmp $c3db			jmp _loop
.c3f0					_done:
=24					CL	.var *-(WordListLink+wh_Xt)
=$c3f0					en = *	; remember here
>c3d6	18					.byte CL	;wh_CodeLength
.c3f0	60		rts				rts
>c3f1	2f 53 74 72 69 6e 67		L1:	.text "/String"	;  name of word as a string, ending at wh_NameLastChar
>c3f8	07					.byte *-L1	;wh_NameLength	length of name
>c3f9	53 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3fb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3fc	18					.byte UF+NN	;wh_Flags	dictionary flags
=50040					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3fd					Slash_String:
.c3fd	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.c3ff	b0 1d		bcs $c41e		bcs Throw_Stack_20
.c401	18		clc				clc		; addr += n
.c402	b5 24		lda $24,x			lda DStack+0,x
.c404	75 28		adc $28,x			adc DStack+4,x
.c406	95 28		sta $28,x			sta DStack+4,x
.c408	b5 25		lda $25,x			lda DStack+1,x
.c40a	75 29		adc $29,x			adc DStack+5,x
.c40c	95 29		sta $29,x			sta DStack+5,x
.c40e	38		sec				sec		; u -= n
.c40f	b5 26		lda $26,x			lda DStack+2,x
.c411	f5 24		sbc $24,x			sbc DStack+0,x
.c413	95 26		sta $26,x			sta DStack+2,x
.c415	b5 27		lda $27,x			lda DStack+3,x
.c417	f5 25		sbc $25,x			sbc DStack+1,x
.c419	95 27		sta $27,x			sta DStack+3,x
.c41b	e8		inx				inx		; Drop n
.c41c	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c41d					en = *	; remember here
>c3fb	20					.byte CL	;wh_CodeLength
.c41d	60		rts				rts
.c41e	4c 8e b3	jmp $b38e	Throw_Stack_20: jmp Throw_Stack
>c421	32 44 72 6f 70			L1:	.text "2Drop"	;  name of word as a string, ending at wh_NameLastChar
>c426	05					.byte *-L1	;wh_NameLength	length of name
>c427	78 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c429	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c42a	10					.byte UF	;wh_Flags	dictionary flags
=50086					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c42b					Two_drop:
.c42b	20 7f b3	jsr $b37f			jsr underflow_2
.c42e	e8		inx				inx
.c42f	e8		inx				inx
.c430	e8		inx				inx
.c431	e8		inx				inx
=7					CL	.var *-(WordListLink+wh_Xt)
=$c432					en = *	; remember here
>c429	07					.byte CL	;wh_CodeLength
.c432	60		rts				rts
>c433	32 53 77 61 70			L1:	.text "2Swap"	;  name of word as a string, ending at wh_NameLastChar
>c438	05					.byte *-L1	;wh_NameLength	length of name
>c439	a6 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c43b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c43c	08					.byte NN	;wh_Flags	dictionary flags
=50104					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c43d					Two_swap:
.c43d	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c43f	b0 dd		bcs $c41e		bcs Throw_Stack_20
.c441	86 14		stx $14				stx tmp1
.c443	ca		dex				dex
.c444	ca		dex				dex
.c445	ca		dex				dex
.c446	ca		dex				dex
.c447	e8		inx		_loop:		inx
.c448	b5 27		lda $27,x			lda DStack+3,x	; 3 <-> 7
.c44a	b4 2b		ldy $2b,x			ldy DStack+7,x
.c44c	95 2b		sta $2b,x			sta DStack+7,x
.c44e	94 27		sty $27,x			sty DStack+3,x
.c450	e4 14		cpx $14				cpx tmp1
.c452	90 f3		bcc $c447			bcc _loop
=23					CL	.var *-(WordListLink+wh_Xt)
=$c454					en = *	; remember here
>c43b	17					.byte CL	;wh_CodeLength
.c454	60		rts				rts
>c455	32 4f 76 65 72			L1:	.text "2Over"	;  name of word as a string, ending at wh_NameLastChar
>c45a	05					.byte *-L1	;wh_NameLength	length of name
>c45b	b8 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c45d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c45e	18					.byte UF+NN	;wh_Flags	dictionary flags
=50138					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c45f					Two_over:
.c45f	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c461	b0 bb		bcs $c41e		bcs Throw_Stack_20
.c463	a0 04		ldy #$04			ldy #4
.c465	ca		dex		_loop:		dex
.c466	b5 2c		lda $2c,x			lda DStack+8,x
.c468	95 24		sta $24,x			sta DStack+0,x
.c46a	88		dey				dey
.c46b	d0 f8		bne $c465			bne _loop
=14					CL	.var *-(WordListLink+wh_Xt)
=$c46d					en = *	; remember here
>c45d	0e					.byte CL	;wh_CodeLength
.c46d	60		rts				rts
>c46e	32 21				L1:	.text "2!"	;  name of word as a string, ending at wh_NameLastChar
>c470	02					.byte *-L1	;wh_NameLength	length of name
>c471	da c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c473	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c474	10					.byte UF	;wh_Flags	dictionary flags
=50160					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c475					Two_Store:
.c475	20 84 b3	jsr $b384			jsr underflow_3
.c478	20 40 b3	jsr $b340			jsr PopYA
.c47b	85 14		sta $14		Two_Store_YA:	sta tmp1+0	; save addr
.c47d	84 15		sty $15				sty tmp1+1
.c47f	b5 24		lda $24,x			lda DStack+0,x	; copy MSB
.c481	a0 00		ldy #$00			ldy #0
.c483	91 14		sta ($14),y			sta (tmp1),y
.c485	b5 25		lda $25,x			lda DStack+1,x	; copy next
.c487	c8		iny				iny
.c488	91 14		sta ($14),y			sta (tmp1),y
.c48a	b5 26		lda $26,x			lda DStack+2,x	; copy next
.c48c	c8		iny				iny
.c48d	91 14		sta ($14),y			sta (tmp1),y
.c48f	b5 27		lda $27,x			lda DStack+3,x	; copy MSB
.c491	c8		iny				iny
.c492	91 14		sta ($14),y			sta (tmp1),y
.c494	e8		inx				inx		; 2Drop
.c495	e8		inx				inx
.c496	e8		inx				inx
.c497	e8		inx				inx
=35					CL	.var *-(WordListLink+wh_Xt)
=$c498					en = *	; remember here
>c473	23					.byte CL	;wh_CodeLength
.c498	60		rts				rts
>c499	32 40				L1:	.text "2@"	;  name of word as a string, ending at wh_NameLastChar
>c49b	02					.byte *-L1	;wh_NameLength	length of name
>c49c	f0 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c49e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c49f	00					.byte 0	;wh_Flags	dictionary flags
=50203					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4a0	20 40 b3	jsr $b340	Two_fetch:	jsr PopYA
.c4a3	85 14		sta $14		Two_Fetch_YA:	sta tmp1+0	; save addr
.c4a5	84 15		sty $15				sty tmp1+1
.c4a7					Two_Fetch_tmp1:
.c4a7	ca		dex				dex
.c4a8	ca		dex				dex
.c4a9	ca		dex				dex
.c4aa	ca		dex				dex
.c4ab	a0 00		ldy #$00			ldy #0		; copy LSB
.c4ad	b1 14		lda ($14),y			lda (tmp1),y
.c4af	95 24		sta $24,x			sta DStack+0,x
.c4b1	c8		iny				iny		; copy next
.c4b2	b1 14		lda ($14),y			lda (tmp1),y
.c4b4	95 25		sta $25,x			sta DStack+1,x
.c4b6	c8		iny				iny		; copy next
.c4b7	b1 14		lda ($14),y			lda (tmp1),y
.c4b9	95 26		sta $26,x			sta DStack+2,x
.c4bb	c8		iny				iny		; copy next
.c4bc	b1 14		lda ($14),y			lda (tmp1),y
.c4be	95 27		sta $27,x			sta DStack+3,x
=32					CL	.var *-(WordListLink+wh_Xt)
=$c4c0					en = *	; remember here
>c49e	20					.byte CL	;wh_CodeLength
.c4c0	60		rts				rts
>c4c1	44 40				L1:	.text "D@"	;  name of word as a string, ending at wh_NameLastChar
>c4c3	02					.byte *-L1	;wh_NameLength	length of name
>c4c4	1b c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4c6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4c7	08					.byte NN	;wh_Flags	dictionary flags
=50243					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4c8	20 40 b3	jsr $b340	DFetch:		jsr PopYA
.c4cb	85 14		sta $14		DFetchYA:	sta tmp1+0	; save addr
.c4cd	84 15		sty $15				sty tmp1+1
.c4cf	ca		dex				dex
.c4d0	ca		dex				dex
.c4d1	ca		dex				dex
.c4d2	ca		dex				dex
.c4d3	a0 00		ldy #$00			ldy #0
.c4d5	b1 14		lda ($14),y			lda (tmp1),y
.c4d7	95 26		sta $26,x			sta DStack+2,x
.c4d9	c8		iny				iny
.c4da	b1 14		lda ($14),y			lda (tmp1),y
.c4dc	95 27		sta $27,x			sta DStack+3,x
.c4de	c8		iny				iny
.c4df	b1 14		lda ($14),y			lda (tmp1),y
.c4e1	95 24		sta $24,x			sta DStack+0,x
.c4e3	c8		iny				iny
.c4e4	b1 14		lda ($14),y			lda (tmp1),y
.c4e6	95 25		sta $25,x			sta DStack+1,x
=32					CL	.var *-(WordListLink+wh_Xt)
=$c4e8					en = *	; remember here
>c4c6	20					.byte CL	;wh_CodeLength
.c4e8	60		rts				rts
>c4e9	32 52 40			L1:	.text "2R@"	;  name of word as a string, ending at wh_NameLastChar
>c4ec	03					.byte *-L1	;wh_NameLength	length of name
>c4ed	43 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4ef	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4f0	09					.byte CO+NN	;wh_Flags	dictionary flags
=50284					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4f1					Two_r_fetch:
.c4f1	8a		txa				txa		; Y= return stack index
.c4f2	ba		tsx				tsx
.c4f3	86 14		stx $14				stx tmp1
.c4f5	a4 14		ldy $14				ldy tmp1
.c4f7	aa		tax				tax
.c4f8	ca		dex				dex		; make room on the Data Stack
.c4f9	ca		dex				dex
.c4fa	ca		dex				dex
.c4fb	ca		dex				dex
.c4fc	b9 03 01	lda $0103,y			lda RStack+3,y	; LSB of top entry
.c4ff	95 24		sta $24,x			sta DStack+0,x
.c501	b9 04 01	lda $0104,y			lda RStack+4,y	; MSB of top entry
.c504	95 25		sta $25,x			sta DStack+1,x
.c506	b9 05 01	lda $0105,y			lda RStack+5,y	; LSB of bottom entry
.c509	95 26		sta $26,x			sta DStack+2,x
.c50b	b9 06 01	lda $0106,y			lda RStack+6,y	; MSB of bottom entry
.c50e	95 27		sta $27,x			sta DStack+3,x
=31					CL	.var *-(WordListLink+wh_Xt)
=$c510					en = *	; remember here
>c4ef	1f					.byte CL	;wh_CodeLength
.c510	60		rts				rts
>c511	32 52 3e			L1:	.text "2R>"	;  name of word as a string, ending at wh_NameLastChar
>c514	03					.byte *-L1	;wh_NameLength	length of name
>c515	6c c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c517	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c518	41					.byte CO+R6	;wh_Flags	dictionary flags
=50324					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c519					Two_r_from:
.c519	68		pla				pla			; save the return address
.c51a	85 14		sta $14				sta tmp1+0
.c51c	68		pla				pla
.c51d	85 15		sta $15				sta tmp1+1
.c51f	ca		dex				dex			; make room on stack
.c520	ca		dex				dex
.c521	ca		dex				dex
.c522	ca		dex				dex
.c523	68		pla				pla			; LSB
.c524	95 24		sta $24,x			sta DStack+0,x
.c526	68		pla				pla			; MSB
.c527	95 25		sta $25,x			sta DStack+1,x
.c529	68		pla				pla			; LSB
.c52a	95 26		sta $26,x			sta DStack+2,x
.c52c	68		pla				pla			; MSB
.c52d	95 27		sta $27,x			sta DStack+3,x
.c52f	a5 15		lda $15				lda tmp1+1		; restore return address
.c531	48		pha				pha
.c532	a5 14		lda $14				lda tmp1+0
.c534	48		pha				pha
=28					CL	.var *-(WordListLink+wh_Xt)
=$c535					en = *	; remember here
>c517	1c					.byte CL	;wh_CodeLength
.c535	60		rts				rts
>c536	32 3e 52			L1:	.text "2>R"	;  name of word as a string, ending at wh_NameLastChar
>c539	03					.byte *-L1	;wh_NameLength	length of name
>c53a	94 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c53c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c53d	51					.byte CO+UF+R6	;wh_Flags	dictionary flags
=50361					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c53e					Two_to_r:
.c53e	68		pla				pla		; save the return address
.c53f	85 14		sta $14				sta tmp1+0
.c541	68		pla				pla
.c542	85 15		sta $15				sta tmp1+1
.c544	20 7f b3	jsr $b37f			jsr underflow_2
.c547	b5 27		lda $27,x			lda DStack+3,x	; MSB
.c549	48		pha				pha
.c54a	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c54c	48		pha				pha
.c54d	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c54f	48		pha				pha
.c550	b5 24		lda $24,x			lda DStack+0,x	; LSB
.c552	48		pha				pha
.c553	e8		inx				inx
.c554	e8		inx				inx
.c555	e8		inx				inx
.c556	e8		inx				inx
.c557	a5 15		lda $15				lda tmp1+1	; restore return address
.c559	48		pha				pha
.c55a	a5 14		lda $14				lda tmp1+0
.c55c	48		pha				pha
=31					CL	.var *-(WordListLink+wh_Xt)
=$c55d					en = *	; remember here
>c53c	1f					.byte CL	;wh_CodeLength
.c55d	60		rts				rts
>c55e	49 6e 76 65 72 74		L1:	.text "Invert"	;  name of word as a string, ending at wh_NameLastChar
>c564	06					.byte *-L1	;wh_NameLength	length of name
>c565	b9 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c567	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c568	10					.byte UF	;wh_Flags	dictionary flags
=50404					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c569					Invert:
.c569	20 6a b3	jsr $b36a			jsr underflow_1
.c56c	a9 ff		lda #$ff			lda #$FF
.c56e	55 24		eor $24,x			eor DStack+0,x	; LSB
.c570	95 24		sta $24,x			sta DStack+0,x
.c572	a9 ff		lda #$ff			lda #$FF
.c574	55 25		eor $25,x			eor DStack+1,x	; MSB
.c576	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$c578					en = *	; remember here
>c567	0f					.byte CL	;wh_CodeLength
.c578	60		rts				rts
>c579	4e 65 67 61 74 65		L1:	.text "Negate"	;  name of word as a string, ending at wh_NameLastChar
>c57f	06					.byte *-L1	;wh_NameLength	length of name
>c580	e4 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c582	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c583	10					.byte UF	;wh_Flags	dictionary flags
=50431					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c584					Negate:
.c584	20 6a b3	jsr $b36a			jsr underflow_1
.c587	38		sec		Negate3:	sec
.c588	a9 00		lda #$00	Negate4:	lda #0
.c58a	f5 24		sbc $24,x			sbc DStack+0,x	; LSB
.c58c	95 24		sta $24,x			sta DStack+0,x
.c58e	a9 00		lda #$00			lda #0
.c590	f5 25		sbc $25,x			sbc DStack+1,x	; MSB
.c592	95 25		sta $25,x			sta DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$c594					en = *	; remember here
>c582	10					.byte CL	;wh_CodeLength
.c594	60		rts				rts
>c595	41 62 73			L1:	.text "Abs"	;  name of word as a string, ending at wh_NameLastChar
>c598	03					.byte *-L1	;wh_NameLength	length of name
>c599	ff c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c59b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c59c	08					.byte NN	;wh_Flags	dictionary flags
=50456					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c59d					Abs:
.c59d	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c59f	b0 05		bcs $c5a6		bcs Throw_Stack_17
.c5a1	b5 25		lda $25,x			lda DStack+1,x	; n negative?
.c5a3	30 e2		bmi $c587			bmi Negate3
=8					CL	.var *-(WordListLink+wh_Xt)
=$c5a5					en = *	; remember here
>c59b	08					.byte CL	;wh_CodeLength
.c5a5	60		rts				rts
.c5a6	4c 8e b3	jmp $b38e	Throw_Stack_17: jmp Throw_Stack
>c5a9	44 4e 65 67 61 74 65		L1:	.text "DNegate"	;  name of word as a string, ending at wh_NameLastChar
>c5b0	07					.byte *-L1	;wh_NameLength	length of name
>c5b1	18 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5b3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5b4	08					.byte NN	;wh_Flags	dictionary flags
=50480					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5b5					DNegate:
.c5b5	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c5b7	b0 ed		bcs $c5a6		bcs Throw_Stack_17
.c5b9	38		sec		DNegate3:	sec
.c5ba	a9 00		lda #$00			lda #0
.c5bc	f5 26		sbc $26,x			sbc DStack+2,x	; LSB of low cell
.c5be	95 26		sta $26,x			sta DStack+2,x
.c5c0	a9 00		lda #$00			lda #0
.c5c2	f5 27		sbc $27,x			sbc DStack+3,x	; MSB of low cell
.c5c4	95 27		sta $27,x			sta DStack+3,x
.c5c6	4c 88 c5	jmp $c588			jmp Negate4
=20					CL	.var *-(WordListLink+wh_Xt)
=$c5c9					en = *	; remember here
>c5b3	14					.byte CL	;wh_CodeLength
>c5c9	44 41 62 73			L1:	.text "DAbs"	;  name of word as a string, ending at wh_NameLastChar
>c5cd	04					.byte *-L1	;wh_NameLength	length of name
>c5ce	30 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5d0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5d1	08					.byte NN	;wh_Flags	dictionary flags
=50509					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5d2					DAbs:
.c5d2	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c5d4	b0 d0		bcs $c5a6		bcs Throw_Stack_17
.c5d6	b5 25		lda $25,x			lda DStack+1,x	; d negative?
.c5d8	30 df		bmi $c5b9			bmi DNegate3
=8					CL	.var *-(WordListLink+wh_Xt)
=$c5da					en = *	; remember here
>c5d0	08					.byte CL	;wh_CodeLength
.c5da	60		rts				rts
>c5db	44 3c 3e			L1:	.text "D<>"	;  name of word as a string, ending at wh_NameLastChar
>c5de	03					.byte *-L1	;wh_NameLength	length of name
>c5df	4d c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5e2	08					.byte NN	;wh_Flags	dictionary flags
=50526					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5e3	20 f0 c5	jsr $c5f0	DNEq:		jsr DEqual
.c5e6	4c eb c7	jmp $c7eb			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c5e9					en = *	; remember here
>c5e1	06					.byte CL	;wh_CodeLength
>c5e9	44 3d				L1:	.text "D="	;  name of word as a string, ending at wh_NameLastChar
>c5eb	02					.byte *-L1	;wh_NameLength	length of name
>c5ec	5e c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5ef	08					.byte NN	;wh_Flags	dictionary flags
=50539					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5f0	b5 2a		lda $2a,x	DEqual:		lda DStack+6,x
.c5f2	d5 26		cmp $26,x			cmp DStack+2,x
.c5f4	d0 50		bne $c646			bne False3
.c5f6	b5 2b		lda $2b,x			lda DStack+7,x
.c5f8	d5 27		cmp $27,x			cmp DStack+3,x
.c5fa	d0 4a		bne $c646			bne False3
.c5fc	b5 24		lda $24,x			lda DStack+0,x
.c5fe	d5 28		cmp $28,x			cmp DStack+4,x
.c600	d0 44		bne $c646			bne False3
.c602	b5 25		lda $25,x			lda DStack+1,x
.c604	d5 29		cmp $29,x			cmp DStack+5,x
.c606	d0 3e		bne $c646			bne False3
.c608	f0 62		beq $c66c			beq True3
=26					CL	.var *-(WordListLink+wh_Xt)
=$c60a					en = *	; remember here
>c5ee	1a					.byte CL	;wh_CodeLength
>c60a	44 55 3e			L1:	.text "DU>"	;  name of word as a string, ending at wh_NameLastChar
>c60d	03					.byte *-L1	;wh_NameLength	length of name
>c60e	6b c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c610	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c611	08					.byte NN	;wh_Flags	dictionary flags
=50573					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c612	20 ab c6	jsr $c6ab	DUGt:		jsr DGtSub
.c615	90 55		bcc $c66c			bcc True3
.c617	b0 2d		bcs $c646			bcs False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c619					en = *	; remember here
>c610	07					.byte CL	;wh_CodeLength
>c619	44 55 3c 3d			L1:	.text "DU<="	;  name of word as a string, ending at wh_NameLastChar
>c61d	04					.byte *-L1	;wh_NameLength	length of name
>c61e	8d c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c620	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c621	08					.byte NN	;wh_Flags	dictionary flags
=50589					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c622	20 ab c6	jsr $c6ab	DULe:		jsr DGtSub
.c625	b0 45		bcs $c66c			bcs True3
.c627	90 1d		bcc $c646			bcc False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c629					en = *	; remember here
>c620	07					.byte CL	;wh_CodeLength
>c629	44 55 3e 3d			L1:	.text "DU>="	;  name of word as a string, ending at wh_NameLastChar
>c62d	04					.byte *-L1	;wh_NameLength	length of name
>c62e	9d c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c630	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c631	08					.byte NN	;wh_Flags	dictionary flags
=50605					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c632	20 79 c6	jsr $c679	DUGe:		jsr DLessSub
.c635	b0 35		bcs $c66c			bcs True3
.c637	90 0d		bcc $c646			bcc False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c639					en = *	; remember here
>c630	07					.byte CL	;wh_CodeLength
>c639	44 55 3c			L1:	.text "DU<"	;  name of word as a string, ending at wh_NameLastChar
>c63c	03					.byte *-L1	;wh_NameLength	length of name
>c63d	ad c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c63f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c640	08					.byte NN	;wh_Flags	dictionary flags
=50620					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c641	20 79 c6	jsr $c679	DULess:		jsr DLessSub
.c644	90 26		bcc $c66c			bcc True3
.c646	a9 00		lda #$00	False3:		lda #0
.c648	f0 24		beq $c66e			beq DReturn3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c64a					en = *	; remember here
>c63f	09					.byte CL	;wh_CodeLength
.c64a	4c 8e b3	jmp $b38e	Throw_Stack_09: jmp Throw_Stack
>c64d	44 3e 3d			L1:	.text "D>="	;  name of word as a string, ending at wh_NameLastChar
>c650	03					.byte *-L1	;wh_NameLength	length of name
>c651	bc c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c653	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c654	08					.byte NN	;wh_Flags	dictionary flags
=50640					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c655	20 79 c6	jsr $c679	DGEq:		jsr DLessSub
.c658	70 10		bvs $c66a			bvs DLess3
.c65a	10 10		bpl $c66c	DGEq3:		bpl True3
.c65c	30 e8		bmi $c646			bmi False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c65e					en = *	; remember here
>c653	09					.byte CL	;wh_CodeLength
>c65e	44 3c				L1:	.text "D<"	;  name of word as a string, ending at wh_NameLastChar
>c660	02					.byte *-L1	;wh_NameLength	length of name
>c661	d0 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c663	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c664	08					.byte NN	;wh_Flags	dictionary flags
=50656					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c665	20 79 c6	jsr $c679	DLess:		jsr DLessSub
.c668	70 f0		bvs $c65a			bvs DGEq3
.c66a	10 da		bpl $c646	DLess3:		bpl False3
.c66c	a9 ff		lda #$ff	True3:		lda #$ff
.c66e					DReturn3:
.c66e	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c670	b0 d8		bcs $c64a		bcs Throw_Stack_09
.c672	95 2a		sta $2a,x			sta DStack+6,x
.c674	95 2b		sta $2b,x			sta DStack+7,x
.c676	4c a5 ac	jmp $aca5			jmp ThreeDrop
=20					CL	.var *-(WordListLink+wh_Xt)
=$c679					en = *	; remember here
>c663	14					.byte CL	;wh_CodeLength
.c679	b5 2a		lda $2a,x	DLessSub:	lda DStack+6,x
.c67b	d5 26		cmp $26,x			cmp DStack+2,x
.c67d	b5 2b		lda $2b,x			lda DStack+7,x
.c67f	f5 27		sbc $27,x			sbc DStack+3,x
.c681	b5 28		lda $28,x			lda DStack+4,x
.c683	f5 24		sbc $24,x			sbc DStack+0,x
.c685	b5 29		lda $29,x			lda DStack+5,x
.c687	f5 25		sbc $25,x			sbc DStack+1,x
.c689	60		rts				rts
>c68a	44 3c 3d			L1:	.text "D<="	;  name of word as a string, ending at wh_NameLastChar
>c68d	03					.byte *-L1	;wh_NameLength	length of name
>c68e	e0 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c690	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c691	08					.byte NN	;wh_Flags	dictionary flags
=50701					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c692	20 ab c6	jsr $c6ab	DLe:		jsr DGtSub
.c695	70 10		bvs $c6a7			bvs DGt3
.c697	10 d3		bpl $c66c	DLe3:		bpl True3
.c699	30 ab		bmi $c646			bmi False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c69b					en = *	; remember here
>c690	09					.byte CL	;wh_CodeLength
>c69b	44 3e				L1:	.text "D>"	;  name of word as a string, ending at wh_NameLastChar
>c69d	02					.byte *-L1	;wh_NameLength	length of name
>c69e	0d c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6a0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6a1	08					.byte NN	;wh_Flags	dictionary flags
=50717					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6a2	20 ab c6	jsr $c6ab	DGt:		jsr DGtSub
.c6a5	70 f0		bvs $c697			bvs DLe3
.c6a7	30 c3		bmi $c66c	DGt3:		bmi True3
.c6a9	10 9b		bpl $c646			bpl False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c6ab					en = *	; remember here
>c6a0	09					.byte CL	;wh_CodeLength
.c6ab	b5 26		lda $26,x	DGtSub:		lda DStack+2,x
.c6ad	d5 2a		cmp $2a,x			cmp DStack+6,x
.c6af	b5 27		lda $27,x			lda DStack+3,x
.c6b1	f5 2b		sbc $2b,x			sbc DStack+7,x
.c6b3	b5 24		lda $24,x			lda DStack+0,x
.c6b5	f5 28		sbc $28,x			sbc DStack+4,x
.c6b7	b5 25		lda $25,x			lda DStack+1,x
.c6b9	f5 29		sbc $29,x			sbc DStack+5,x
.c6bb	60		rts				rts
>c6bc	44 30 3c 3d			L1:	.text "D0<="	;  name of word as a string, ending at wh_NameLastChar
>c6c0	04					.byte *-L1	;wh_NameLength	length of name
>c6c1	1d c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6c4	08					.byte NN	;wh_Flags	dictionary flags
=50752					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6c5	b5 25		lda $25,x	D0Le:		lda DStack+1,x	; test sign
.c6c7	30 6b		bmi $c734			bmi True1
.c6c9	10 27		bpl $c6f2			bpl D0Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c6cb					en = *	; remember here
>c6c3	06					.byte CL	;wh_CodeLength
>c6cb	44 30 3e			L1:	.text "D0>"	;  name of word as a string, ending at wh_NameLastChar
>c6ce	03					.byte *-L1	;wh_NameLength	length of name
>c6cf	40 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6d2	08					.byte NN	;wh_Flags	dictionary flags
=50766					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6d3	b5 25		lda $25,x	D0Gt:		lda DStack+1,x	; test sign
.c6d5	10 0c		bpl $c6e3			bpl D0Ne
.c6d7	4c 54 c7	jmp $c754			jmp False1
>c6da	44 30 3c 3e			L1:	.text "D0<>"	;  name of word as a string, ending at wh_NameLastChar
>c6de	04					.byte *-L1	;wh_NameLength	length of name
>c6df	4e c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6e2	08					.byte NN	;wh_Flags	dictionary flags
=50782					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6e3	20 f9 c6	jsr $c6f9	D0Ne:		jsr D0EqSub
.c6e6	d0 4c		bne $c734			bne True1
.c6e8	f0 6a		beq $c754			beq False1
=7					CL	.var *-(WordListLink+wh_Xt)
=$c6ea					en = *	; remember here
>c6e1	07					.byte CL	;wh_CodeLength
>c6ea	44 30 3d			L1:	.text "D0="	;  name of word as a string, ending at wh_NameLastChar
>c6ed	03					.byte *-L1	;wh_NameLength	length of name
>c6ee	5e c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6f1	08					.byte NN	;wh_Flags	dictionary flags
=50797					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6f2	20 f9 c6	jsr $c6f9	D0Equal:	jsr D0EqSub
.c6f5	d0 5d		bne $c754			bne False1
.c6f7	f0 3b		beq $c734			beq True1
=7					CL	.var *-(WordListLink+wh_Xt)
=$c6f9					en = *	; remember here
>c6f0	07					.byte CL	;wh_CodeLength
.c6f9	b5 26		lda $26,x	D0EqSub:	lda DStack+2,x
.c6fb	15 27		ora $27,x			ora DStack+3,x
.c6fd	15 24		ora $24,x			ora DStack+0,x
.c6ff	15 25		ora $25,x			ora DStack+1,x
.c701	60		rts				rts
>c702	44 30 3c			L1:	.text "D0<"	;  name of word as a string, ending at wh_NameLastChar
>c705	03					.byte *-L1	;wh_NameLength	length of name
>c706	6d c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c708	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c709	08					.byte NN	;wh_Flags	dictionary flags
=50821					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c70a	b5 25		lda $25,x	D0Less:		lda DStack+1,x	; test sign
.c70c	30 26		bmi $c734			bmi True1
.c70e	10 44		bpl $c754			bpl False1
=6					CL	.var *-(WordListLink+wh_Xt)
=$c710					en = *	; remember here
>c708	06					.byte CL	;wh_CodeLength
>c710	44 30 3e 3d			L1:	.text "D0>="	;  name of word as a string, ending at wh_NameLastChar
>c714	04					.byte *-L1	;wh_NameLength	length of name
>c715	85 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c717	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c718	08					.byte NN	;wh_Flags	dictionary flags
=50836					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c719	b5 25		lda $25,x	D0Ge:		lda DStack+1,x	; test sign
.c71b	10 17		bpl $c734			bpl True1
.c71d	30 35		bmi $c754			bmi False1
=6					CL	.var *-(WordListLink+wh_Xt)
=$c71f					en = *	; remember here
>c717	06					.byte CL	;wh_CodeLength
.c71f	4c 8e b3	jmp $b38e	Throw_Stack_08: jmp Throw_Stack
>c722	3d				L1:	.text "="	;  name of word as a string, ending at wh_NameLastChar
>c723	01					.byte *-L1	;wh_NameLength	length of name
>c724	94 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c726	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c727	08					.byte NN	;wh_Flags	dictionary flags
=50851					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c728	b5 24		lda $24,x	Equal:		lda DStack+0,x		; LSB
.c72a	d5 26		cmp $26,x			cmp DStack+2,x
.c72c	d0 26		bne $c754			bne False1
.c72e	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c730	d5 27		cmp $27,x			cmp DStack+3,x
.c732	d0 20		bne $c754			bne False1
.c734	a9 ff		lda #$ff	True1:		lda #$ff	; return TRUE
.c736					Return1:
.c736	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c738	b0 e5		bcs $c71f		bcs Throw_Stack_08
.c73a	e8		inx				inx		; Drop
.c73b	e8		inx				inx
.c73c	95 24		sta $24,x			sta DStack+0,x	; store f
.c73e	95 25		sta $25,x			sta DStack+1,x
.c740	60		rts				rts
=25					CL	.var *-(WordListLink+wh_Xt)
=$c741					en = *	; remember here
>c726	19					.byte CL	;wh_CodeLength
>c741	3c 3e				L1:	.text "<>"	;  name of word as a string, ending at wh_NameLastChar
>c743	02					.byte *-L1	;wh_NameLength	length of name
>c744	a3 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c746	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c747	08					.byte NN	;wh_Flags	dictionary flags
=50883					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c748	b5 24		lda $24,x	Not_Equals:	lda DStack+0,x		; LSB
.c74a	d5 26		cmp $26,x			cmp DStack+2,x
.c74c	d0 e6		bne $c734			bne True1
.c74e	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c750	d5 27		cmp $27,x			cmp DStack+3,x
.c752	d0 e0		bne $c734			bne True1
.c754	a9 00		lda #$00	False1:		lda #0		; return FALSE
.c756	f0 de		beq $c736			beq Return1
=16					CL	.var *-(WordListLink+wh_Xt)
=$c758					en = *	; remember here
>c746	10					.byte CL	;wh_CodeLength
>c758	3c				L1:	.text "<"	;  name of word as a string, ending at wh_NameLastChar
>c759	01					.byte *-L1	;wh_NameLength	length of name
>c75a	c3 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c75c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c75d	08					.byte NN	;wh_Flags	dictionary flags
=50905					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c75e	b5 26		lda $26,x	Less_Than:	lda DStack+2,x	; compare
.c760	d5 24		cmp $24,x			cmp DStack+0,x
.c762	b5 27		lda $27,x			lda DStack+3,x
.c764	f5 25		sbc $25,x			sbc DStack+1,x
.c766	50 02		bvc $c76a			bvc _c
.c768	49 80		eor #$80			eor #$80	; fix sign
.c76a	10 e8		bpl $c754	_c:		bpl False1
.c76c	30 c6		bmi $c734			bmi True1
=16					CL	.var *-(WordListLink+wh_Xt)
=$c76e					en = *	; remember here
>c75c	10					.byte CL	;wh_CodeLength
>c76e	3e 3d				L1:	.text ">="	;  name of word as a string, ending at wh_NameLastChar
>c770	02					.byte *-L1	;wh_NameLength	length of name
>c771	d9 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c773	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c774	08					.byte NN	;wh_Flags	dictionary flags
=50928					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c775	20 5e c7	jsr $c75e	Ge:		jsr Less_Than
.c778	4c eb c7	jmp $c7eb			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c77b					en = *	; remember here
>c773	06					.byte CL	;wh_CodeLength
>c77b	55 3c				L1:	.text "U<"	;  name of word as a string, ending at wh_NameLastChar
>c77d	02					.byte *-L1	;wh_NameLength	length of name
>c77e	f0 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c780	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c781	08					.byte NN	;wh_Flags	dictionary flags
=50941					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c782	b5 26		lda $26,x	U_Less_Than:	lda DStack+2,x
.c784	d5 24		cmp $24,x			cmp DStack+0,x
.c786	b5 27		lda $27,x			lda DStack+3,x
.c788	f5 25		sbc $25,x			sbc DStack+1,x
.c78a	b0 c8		bcs $c754			bcs False1
.c78c	90 a6		bcc $c734			bcc True1
=12					CL	.var *-(WordListLink+wh_Xt)
=$c78e					en = *	; remember here
>c780	0c					.byte CL	;wh_CodeLength
>c78e	55 3e				L1:	.text "U>"	;  name of word as a string, ending at wh_NameLastChar
>c790	02					.byte *-L1	;wh_NameLength	length of name
>c791	fd c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c793	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c794	08					.byte NN	;wh_Flags	dictionary flags
=50960					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c795	b5 24		lda $24,x	U_Greater_Than:	lda DStack+0,x
.c797	d5 26		cmp $26,x			cmp DStack+2,x
.c799	b5 25		lda $25,x			lda DStack+1,x
.c79b	f5 27		sbc $27,x			sbc DStack+3,x
.c79d	b0 b5		bcs $c754			bcs False1
.c79f	90 93		bcc $c734			bcc True1
=12					CL	.var *-(WordListLink+wh_Xt)
=$c7a1					en = *	; remember here
>c793	0c					.byte CL	;wh_CodeLength
>c7a1	3e				L1:	.text ">"	;  name of word as a string, ending at wh_NameLastChar
>c7a2	01					.byte *-L1	;wh_NameLength	length of name
>c7a3	10 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7a5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7a6	08					.byte NN	;wh_Flags	dictionary flags
=50978					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7a7	b5 24		lda $24,x	Greater_Than:	lda DStack+0,x	; compare
.c7a9	d5 26		cmp $26,x			cmp DStack+2,x
.c7ab	b5 25		lda $25,x			lda DStack+1,x
.c7ad	f5 27		sbc $27,x			sbc DStack+3,x
.c7af	50 02		bvc $c7b3			bvc _c
.c7b1	49 80		eor #$80			eor #$80	; fix sign
.c7b3	10 9f		bpl $c754	_c:		bpl False1
.c7b5	4c 34 c7	jmp $c734			jmp True1
=17					CL	.var *-(WordListLink+wh_Xt)
=$c7b8					en = *	; remember here
>c7a5	11					.byte CL	;wh_CodeLength
>c7b8	3c 3d				L1:	.text "<="	;  name of word as a string, ending at wh_NameLastChar
>c7ba	02					.byte *-L1	;wh_NameLength	length of name
>c7bb	22 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7bd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7be	08					.byte NN	;wh_Flags	dictionary flags
=51002					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7bf	20 a7 c7	jsr $c7a7	Le:		jsr Greater_Than
.c7c2	4c eb c7	jmp $c7eb			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c7c5					en = *	; remember here
>c7bd	06					.byte CL	;wh_CodeLength
>c7c5	55 3e 3d			L1:	.text "U>="	;  name of word as a string, ending at wh_NameLastChar
>c7c8	03					.byte *-L1	;wh_NameLength	length of name
>c7c9	3a c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7cb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7cc	08					.byte NN	;wh_Flags	dictionary flags
=51016					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7cd	20 82 c7	jsr $c782	UGe:		jsr U_Less_Than
.c7d0	4c eb c7	jmp $c7eb			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c7d3					en = *	; remember here
>c7cb	06					.byte CL	;wh_CodeLength
>c7d3	55 3c 3d			L1:	.text "U<="	;  name of word as a string, ending at wh_NameLastChar
>c7d6	03					.byte *-L1	;wh_NameLength	length of name
>c7d7	48 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7d9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7da	08					.byte NN	;wh_Flags	dictionary flags
=51030					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7db	20 95 c7	jsr $c795	ULe:		jsr U_Greater_Than
.c7de	4c eb c7	jmp $c7eb			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c7e1					en = *	; remember here
>c7d9	06					.byte CL	;wh_CodeLength
.c7e1	4c 8e b3	jmp $b38e	Throw_Stack_11: jmp Throw_Stack
>c7e4	30 3d				L1:	.text "0="	;  name of word as a string, ending at wh_NameLastChar
>c7e6	02					.byte *-L1	;wh_NameLength	length of name
>c7e7	56 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7e9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7ea	08					.byte NN	;wh_Flags	dictionary flags
=51046					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7eb	b5 25		lda $25,x	Zero_Equal:	lda DStack+1,x
.c7ed	15 24		ora $24,x	ZEq3:		ora DStack+0,x
.c7ef	d0 26		bne $c817			bne False0
.c7f1	f0 0e		beq $c801			beq True0
=8					CL	.var *-(WordListLink+wh_Xt)
=$c7f3					en = *	; remember here
>c7e9	08					.byte CL	;wh_CodeLength
>c7f3	30 3c 3e			L1:	.text "0<>"	;  name of word as a string, ending at wh_NameLastChar
>c7f6	03					.byte *-L1	;wh_NameLength	length of name
>c7f7	66 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7f9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7fa	08					.byte NN	;wh_Flags	dictionary flags
=51062					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7fb	b5 25		lda $25,x	Zero_Unequal:	lda DStack+1,x
.c7fd	15 24		ora $24,x	ZNe3:		ora DStack+0,x
.c7ff	f0 16		beq $c817			beq False0
.c801	a9 ff		lda #$ff	True0:		lda #$ff	; return TRUE
.c803	95 24		sta $24,x	Return0:	sta DStack+0,x
.c805	95 25		sta $25,x			sta DStack+1,x
.c807	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c809	b0 39		bcs $c844		bcs Throw_Stack_05
.c80b	60		rts				rts
=17					CL	.var *-(WordListLink+wh_Xt)
=$c80c					en = *	; remember here
>c7f9	11					.byte CL	;wh_CodeLength
>c80c	30 3e				L1:	.text "0>"	;  name of word as a string, ending at wh_NameLastChar
>c80e	02					.byte *-L1	;wh_NameLength	length of name
>c80f	76 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c811	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c812	08					.byte NN	;wh_Flags	dictionary flags
=51086					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c813	b5 25		lda $25,x	Zero_Greater:	lda DStack+1,x	; MSB
.c815	10 e6		bpl $c7fd			bpl ZNe3	; >= 0 ?
.c817	a9 00		lda #$00	False0:		lda #0		; return FALSE
.c819	f0 e8		beq $c803			beq Return0
=8					CL	.var *-(WordListLink+wh_Xt)
=$c81b					en = *	; remember here
>c811	08					.byte CL	;wh_CodeLength
>c81b	30 3c 3d			L1:	.text "0<="	;  name of word as a string, ending at wh_NameLastChar
>c81e	03					.byte *-L1	;wh_NameLength	length of name
>c81f	8e c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c821	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c822	08					.byte NN	;wh_Flags	dictionary flags
=51102					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c823	b5 25		lda $25,x	ZLe:		lda DStack+1,x	; < 0 ?
.c825	30 da		bmi $c801			bmi True0
.c827	10 c4		bpl $c7ed			bpl ZEq3
=6					CL	.var *-(WordListLink+wh_Xt)
=$c829					en = *	; remember here
>c821	06					.byte CL	;wh_CodeLength
>c829	30 3e 3d			L1:	.text "0>="	;  name of word as a string, ending at wh_NameLastChar
>c82c	03					.byte *-L1	;wh_NameLength	length of name
>c82d	9e c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c82f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c830	08					.byte NN	;wh_Flags	dictionary flags
=51116					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c831	b5 25		lda $25,x	ZGe:		lda DStack+1,x
.c833	10 cc		bpl $c801			bpl True0
.c835	30 e0		bmi $c817			bmi False0
=6					CL	.var *-(WordListLink+wh_Xt)
=$c837					en = *	; remember here
>c82f	06					.byte CL	;wh_CodeLength
>c837	30 3c				L1:	.text "0<"	;  name of word as a string, ending at wh_NameLastChar
>c839	02					.byte *-L1	;wh_NameLength	length of name
>c83a	ac c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c83c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c83d	08					.byte NN	;wh_Flags	dictionary flags
=51129					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c83e	b5 25		lda $25,x	Zero_Less:	lda DStack+1,x	; MSB
.c840	10 d5		bpl $c817			bpl False0
.c842	30 bd		bmi $c801			bmi True0
=6					CL	.var *-(WordListLink+wh_Xt)
=$c844					en = *	; remember here
>c83c	06					.byte CL	;wh_CodeLength
.c844	4c 8e b3	jmp $b38e	Throw_Stack_05: jmp Throw_Stack
>c847	4d 69 6e			L1:	.text "Min"	;  name of word as a string, ending at wh_NameLastChar
>c84a	03					.byte *-L1	;wh_NameLength	length of name
>c84b	b9 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c84d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c84e	18					.byte UF+NN	;wh_Flags	dictionary flags
=51146					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c84f					Min:
.c84f	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c851	b0 f1		bcs $c844		bcs Throw_Stack_05
.c853	b5 24		lda $24,x			lda DStack+0,x	; compare n1 & n2; sets V & N but not Z
.c855	d5 26		cmp $26,x			cmp DStack+2,x
.c857	b5 25		lda $25,x			lda DStack+1,x
.c859	f5 27		sbc $27,x			sbc DStack+3,x
.c85b	70 1b		bvs $c878			bvs Max_3	; if overflow, the sign is backwards
.c85d	30 29		bmi $c888	Min_3:		bmi Nip_NoUf	; if negative, NOS is larger and needs to be dumped
.c85f	e8		inx				inx		; Drop n2
.c860	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$c861					en = *	; remember here
>c84d	12					.byte CL	;wh_CodeLength
.c861	60		rts				rts
>c862	4d 61 78			L1:	.text "Max"	;  name of word as a string, ending at wh_NameLastChar
>c865	03					.byte *-L1	;wh_NameLength	length of name
>c866	ca c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c868	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c869	08					.byte NN	;wh_Flags	dictionary flags
=51173					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c86a					Max:
.c86a	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c86c	b0 d6		bcs $c844		bcs Throw_Stack_05
.c86e	b5 24		lda $24,x			lda DStack+0,x	; Compare n1 & n2; sets V & N but not Z
.c870	d5 26		cmp $26,x			cmp DStack+2,x
.c872	b5 25		lda $25,x			lda DStack+1,x
.c874	f5 27		sbc $27,x			sbc DStack+3,x
.c876	70 e5		bvs $c85d			bvs Min_3	; if overflow, the sign is backwards
.c878	10 0e		bpl $c888	Max_3:		bpl Nip_NoUf	; if negative, NOS is larger and needs to be kept
.c87a	e8		inx				inx		; Drop n2
.c87b	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$c87c					en = *	; remember here
>c868	12					.byte CL	;wh_CodeLength
.c87c	60		rts				rts
>c87d	4e 69 70			L1:	.text "Nip"	;  name of word as a string, ending at wh_NameLastChar
>c880	03					.byte *-L1	;wh_NameLength	length of name
>c881	e5 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c883	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c884	10					.byte UF	;wh_Flags	dictionary flags
=51200					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c885					Nip:
.c885	20 7f b3	jsr $b37f			jsr underflow_2
.c888	b5 24		lda $24,x	Nip_NoUf:	lda DStack+0,x	; PopYA
.c88a	b4 25		ldy $25,x			ldy DStack+1,x
.c88c	e8		inx				inx
.c88d	e8		inx				inx
.c88e	95 24		sta $24,x			sta DStack+0,x	; store over n1
.c890	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$c892					en = *	; remember here
>c883	0d					.byte CL	;wh_CodeLength
.c892	60		rts				rts
>c893	50 69 63 6b			L1:	.text "Pick"	;  name of word as a string, ending at wh_NameLastChar
>c897	04					.byte *-L1	;wh_NameLength	length of name
>c898	00 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c89a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c89b	00					.byte 0	;wh_Flags	dictionary flags
=51223					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c89c					Pick:
.c89c	16 24		asl $24,x			asl DStack+0,x	; we assume u < 128 (stack is small)
.c89e	8a		txa				txa
.c89f	75 24		adc $24,x			adc DStack+0,x
.c8a1	a8		tay				tay
.c8a2	b9 26 00	lda $0026,y			lda DStack+2,y
.c8a5	95 24		sta $24,x			sta DStack+0,x
.c8a7	b9 27 00	lda $0027,y			lda DStack+3,y
.c8aa	95 25		sta $25,x			sta DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$c8ac					en = *	; remember here
>c89a	10					.byte CL	;wh_CodeLength
.c8ac	60		rts				rts
>c8ad	43 68 61 72			L1:	.text "Char"	;  name of word as a string, ending at wh_NameLastChar
>c8b1	04					.byte *-L1	;wh_NameLength	length of name
>c8b2	17 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8b4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8b5	08					.byte NN	;wh_Flags	dictionary flags
=51249					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8b6					Char:
.c8b6	20 1a ba	jsr $ba1a			jsr parse_name_check
.c8b9	e8		inx				inx		; Drop number of characters, leave addr
.c8ba	e8		inx				inx
.c8bb	4c 6d cc	jmp $cc6d			jmp C_Fetch	; get character ( C@ )
=8					CL	.var *-(WordListLink+wh_Xt)
=$c8be					en = *	; remember here
>c8b4	08					.byte CL	;wh_CodeLength
>c8be	5b 43 68 61 72 5d		L1:	.text "[Char]"	;  name of word as a string, ending at wh_NameLastChar
>c8c4	06					.byte *-L1	;wh_NameLength	length of name
>c8c5	31 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8c8	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=51268					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8c9	20 b6 c8	jsr $c8b6	Bracket_Char:	jsr Char
.c8cc	4c ab b6	jmp $b6ab			jmp Literal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c8cf					en = *	; remember here
>c8c7	06					.byte CL	;wh_CodeLength
>c8cf	43 68 61 72 2b			L1:	.text "Char+"	;  name of word as a string, ending at wh_NameLastChar
>c8d4	05					.byte *-L1	;wh_NameLength	length of name
>c8d5	44 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8d7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8d8	00					.byte 0	;wh_Flags	dictionary flags
=51284					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8d9					Char_Plus:
.c8d9	20 6a b3	jsr $b36a			jsr underflow_1
.c8dc	f6 24		inc $24,x			inc DStack+0,x
.c8de	d0 02		bne $c8e2			bne +
.c8e0	f6 25		inc $25,x			inc DStack+1,x
.c8e2					+
=9					CL	.var *-(WordListLink+wh_Xt)
=$c8e2					en = *	; remember here
>c8d7	09					.byte CL	;wh_CodeLength
.c8e2	60		rts				rts
>c8e3	43 68 61 72 73			L1:	.text "Chars"	;  name of word as a string, ending at wh_NameLastChar
>c8e8	05					.byte *-L1	;wh_NameLength	length of name
>c8e9	54 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8eb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8ec	02					.byte AN	;wh_Flags	dictionary flags
=51304					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8ed					Chars:
=0					CL	.var *-(WordListLink+wh_Xt)
=$c8ed					en = *	; remember here
>c8eb	00					.byte CL	;wh_CodeLength
.c8ed	60		rts				rts
>c8ee	43 65 6c 6c 73			L1:	.text "Cells"	;  name of word as a string, ending at wh_NameLastChar
>c8f3	05					.byte *-L1	;wh_NameLength	length of name
>c8f4	68 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8f6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8f7	10					.byte UF	;wh_Flags	dictionary flags
=51315					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8f8					Cells:
.c8f8	20 6a b3	jsr $b36a			jsr underflow_1
.c8fb	16 24		asl $24,x			asl DStack+0,x		; 2*
.c8fd	36 25		rol $25,x			rol DStack+1,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$c8ff					en = *	; remember here
>c8f6	07					.byte CL	;wh_CodeLength
.c8ff	60		rts				rts
>c900	43 65 6c 6c 2b			L1:	.text "Cell+"	;  name of word as a string, ending at wh_NameLastChar
>c905	05					.byte *-L1	;wh_NameLength	length of name
>c906	73 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c908	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c909	10					.byte UF	;wh_Flags	dictionary flags
=51333					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c90a					Cell_Plus:
.c90a	20 6a b3	jsr $b36a			jsr underflow_1
.c90d	a9 02		lda #$02	Cell_Plus_NoUf:	lda #2		; our cells are 2 bytes
.c90f					Plus_A:
.c90f	18		clc				clc
.c910	75 24		adc $24,x			adc DStack+0,x
.c912	95 24		sta $24,x			sta DStack+0,x
.c914	90 02		bcc $c918			bcc +
.c916	f6 25		inc $25,x			inc DStack+1,x
.c918					+
=14					CL	.var *-(WordListLink+wh_Xt)
=$c918					en = *	; remember here
>c908	0e					.byte CL	;wh_CodeLength
.c918	60		rts				rts
.c919					Nos_Plus_A:
.c919	18		clc				clc
.c91a	75 26		adc $26,x			adc DStack+2,x
.c91c	95 26		sta $26,x			sta DStack+2,x
.c91e	90 02		bcc $c922			bcc +
.c920	f6 27		inc $27,x			inc DStack+3,x
.c922	60		rts		+		rts
>c923	48 65 72 65			L1:	.text "Here"	;  name of word as a string, ending at wh_NameLastChar
>c927	04					.byte *-L1	;wh_NameLength	length of name
>c928	85 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c92a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c92b	08					.byte NN	;wh_Flags	dictionary flags
=51367					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c92c	a5 00		lda $00		Here:		lda cp+0
.c92e	a4 01		ldy $01				ldy cp+1
.c930	4c f8 b6	jmp $b6f8			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$c933					en = *	; remember here
>c92a	07					.byte CL	;wh_CodeLength
>c933	31 2d				L1:	.text "1-"	;  name of word as a string, ending at wh_NameLastChar
>c935	02					.byte *-L1	;wh_NameLength	length of name
>c936	a7 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c938	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c939	10					.byte UF	;wh_Flags	dictionary flags
=51381					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c93a					One_Minus:
.c93a	20 6a b3	jsr $b36a			jsr underflow_1
.c93d					One_Minus_NoUf:
.c93d	b5 24		lda $24,x			lda DStack+0,x
.c93f	d0 02		bne $c943			bne +
.c941	d6 25		dec $25,x			dec DStack+1,x
.c943	d6 24		dec $24,x	+		dec DStack+0,x
=11					CL	.var *-(WordListLink+wh_Xt)
=$c945					en = *	; remember here
>c938	0b					.byte CL	;wh_CodeLength
.c945	60		rts				rts
.c946					NOS_One_Minus:
.c946	b5 26		lda $26,x			lda DStack+2,x
.c948	d0 02		bne $c94c			bne +
.c94a	d6 27		dec $27,x			dec DStack+3,x
.c94c	d6 26		dec $26,x	+		dec DStack+2,x
.c94e	60		rts				rts
.c94f					Minus_A:
.c94f	18		clc				clc
.c950	75 24		adc $24,x			adc DStack+0,x
.c952	95 24		sta $24,x			sta DStack+0,x
.c954	b0 02		bcs $c958			bcs +
.c956	d6 25		dec $25,x			dec DStack+1,x
.c958	60		rts		+		rts
>c959	31 2b				L1:	.text "1+"	;  name of word as a string, ending at wh_NameLastChar
>c95b	02					.byte *-L1	;wh_NameLength	length of name
>c95c	b5 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c95e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c95f	10					.byte UF	;wh_Flags	dictionary flags
=51419					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c960					One_Plus:
.c960	20 6a b3	jsr $b36a			jsr underflow_1
.c963	f6 24		inc $24,x			inc DStack+0,x
.c965	d0 02		bne $c969			bne +
.c967	f6 25		inc $25,x			inc DStack+1,x
.c969					+
=9					CL	.var *-(WordListLink+wh_Xt)
=$c969					en = *	; remember here
>c95e	09					.byte CL	;wh_CodeLength
.c969	60		rts				rts
.c96a					NOS_One_Plus:
.c96a	f6 26		inc $26,x			inc DStack+2,x
.c96c	d0 02		bne $c970			bne +
.c96e	f6 27		inc $27,x			inc DStack+3,x
.c970	60		rts		+		rts
>c971	55 4d 2b			L1:	.text "UM+"	;  name of word as a string, ending at wh_NameLastChar
>c974	03					.byte *-L1	;wh_NameLength	length of name
>c975	db c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c977	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c978	00					.byte 0	;wh_Flags	dictionary flags
=51444					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c979	20 40 b3	jsr $b340	UMPlus:		jsr PopYA
.c97c	18		clc				clc		; add n to d1.lo
.c97d	75 26		adc $26,x			adc DStack+2,x
.c97f	95 26		sta $26,x			sta DStack+2,x
.c981	98		tya				tya
.c982	75 27		adc $27,x			adc DStack+3,x
.c984	95 27		sta $27,x			sta DStack+3,x
.c986	90 06		bcc $c98e			bcc +		; propagate carry thru d1.hi
.c988	f6 24		inc $24,x			inc DStack+0,x
.c98a	d0 02		bne $c98e			bne +
.c98c	f6 25		inc $25,x			inc DStack+1,x
.c98e					+
=21					CL	.var *-(WordListLink+wh_Xt)
=$c98e					en = *	; remember here
>c977	15					.byte CL	;wh_CodeLength
.c98e	60		rts				rts
>c98f	4d 2b				L1:	.text "M+"	;  name of word as a string, ending at wh_NameLastChar
>c991	02					.byte *-L1	;wh_NameLength	length of name
>c992	f4 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c994	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c995	08					.byte NN	;wh_Flags	dictionary flags
=51473					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c996	20 79 c9	jsr $c979	MPlus:		jsr UMPlus
.c999	98		tya				tya		; if n negative
.c99a	30 a1		bmi $c93d			bmi One_Minus_NoUf ;   decrement d1.hi
=6					CL	.var *-(WordListLink+wh_Xt)
=$c99c					en = *	; remember here
>c994	06					.byte CL	;wh_CodeLength
.c99c	60		rts				rts
>c99d	44 32 2a			L1:	.text "D2*"	;  name of word as a string, ending at wh_NameLastChar
>c9a0	03					.byte *-L1	;wh_NameLength	length of name
>c9a1	11 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9a3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9a4	10					.byte UF	;wh_Flags	dictionary flags
=51488					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9a5	20 7f b3	jsr $b37f	D2Star:		jsr underflow_2
.c9a8	16 26		asl $26,x			asl DStack+2,x
.c9aa	36 27		rol $27,x			rol DStack+3,x
.c9ac	36 24		rol $24,x			rol DStack+0,x
.c9ae	36 25		rol $25,x			rol DStack+1,x
=11					CL	.var *-(WordListLink+wh_Xt)
=$c9b0					en = *	; remember here
>c9a3	0b					.byte CL	;wh_CodeLength
.c9b0	60		rts				rts
>c9b1	44 32 2f			L1:	.text "D2/"	;  name of word as a string, ending at wh_NameLastChar
>c9b4	03					.byte *-L1	;wh_NameLength	length of name
>c9b5	20 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9b8	10					.byte UF	;wh_Flags	dictionary flags
=51508					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9b9	20 7f b3	jsr $b37f	D2Slash:	jsr underflow_2
.c9bc	b5 25		lda $25,x			lda DStack+1,x		; setup for sign-extended shift right
.c9be	0a		asl a				asl a
.c9bf	76 25		ror $25,x	D2SlashU:	ror DStack+1,x
.c9c1	76 24		ror $24,x			ror DStack+0,x
.c9c3	76 27		ror $27,x			ror DStack+3,x
.c9c5	76 26		ror $26,x			ror DStack+2,x
=14					CL	.var *-(WordListLink+wh_Xt)
=$c9c7					en = *	; remember here
>c9b7	0e					.byte CL	;wh_CodeLength
.c9c7	60		rts				rts
>c9c8	55 44 32 2f			L1:	.text "UD2/"	;  name of word as a string, ending at wh_NameLastChar
>c9cc	04					.byte *-L1	;wh_NameLength	length of name
>c9cd	34 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9cf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9d0	18					.byte UF+NN	;wh_Flags	dictionary flags
=51532					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9d1	20 7f b3	jsr $b37f	DU2Slash:	jsr underflow_2
.c9d4	18		clc				clc
.c9d5	90 e8		bcc $c9bf			bcc D2SlashU
=6					CL	.var *-(WordListLink+wh_Xt)
=$c9d7					en = *	; remember here
>c9cf	06					.byte CL	;wh_CodeLength
>c9d7	32 2a				L1:	.text "2*"	;  name of word as a string, ending at wh_NameLastChar
>c9d9	02					.byte *-L1	;wh_NameLength	length of name
>c9da	4c c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9dd	10					.byte UF	;wh_Flags	dictionary flags
=51545					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9de					Two_Star:
.c9de	20 6a b3	jsr $b36a			jsr underflow_1
.c9e1	16 24		asl $24,x			asl DStack+0,x
.c9e3	36 25		rol $25,x			rol DStack+1,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$c9e5					en = *	; remember here
>c9dc	07					.byte CL	;wh_CodeLength
.c9e5	60		rts				rts
>c9e6	32 2f				L1:	.text "2/"	;  name of word as a string, ending at wh_NameLastChar
>c9e8	02					.byte *-L1	;wh_NameLength	length of name
>c9e9	59 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9eb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9ec	10					.byte UF	;wh_Flags	dictionary flags
=51560					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9ed					Two_Slash:
.c9ed	20 6a b3	jsr $b36a			jsr underflow_1
.c9f0	b5 25		lda $25,x			lda DStack+1,x		; load sign into carry, for signed shift
.c9f2	0a		asl a				asl
.c9f3	76 25		ror $25,x			ror DStack+1,x
.c9f5	76 24		ror $24,x			ror DStack+0,x
=10					CL	.var *-(WordListLink+wh_Xt)
=$c9f7					en = *	; remember here
>c9eb	0a					.byte CL	;wh_CodeLength
.c9f7	60		rts				rts
>c9f8	55 32 2f			L1:	.text "U2/"	;  name of word as a string, ending at wh_NameLastChar
>c9fb	03					.byte *-L1	;wh_NameLength	length of name
>c9fc	68 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9ff	10					.byte UF	;wh_Flags	dictionary flags
=51579					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca00					UTwo_Slash:
.ca00	20 6a b3	jsr $b36a			jsr underflow_1
.ca03	56 25		lsr $25,x			lsr DStack+1,x
.ca05	76 24		ror $24,x			ror DStack+0,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$ca07					en = *	; remember here
>c9fe	07					.byte CL	;wh_CodeLength
.ca07	60		rts				rts
>ca08	44 52 53 68 69 66 74		L1:	.text "DRShift"	;  name of word as a string, ending at wh_NameLastChar
>ca0f	07					.byte *-L1	;wh_NameLength	length of name
>ca10	7b c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca12	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca13	00					.byte 0	;wh_Flags	dictionary flags
=51599					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca14	20 24 b3	jsr $b324	DRShift:	jsr PopA	; pop u
.ca17	a8		tay		DRShiftA:	tay
.ca18	f0 0e		beq $ca28			beq _9
.ca1a	b5 25		lda $25,x			lda DStack+1,x
.ca1c	4a		lsr a		_2:		lsr a
.ca1d	76 24		ror $24,x			ror DStack+0,x
.ca1f	76 27		ror $27,x			ror DStack+3,x
.ca21	76 26		ror $26,x			ror DStack+2,x
.ca23	88		dey				dey
.ca24	d0 f6		bne $ca1c			bne _2
.ca26	95 25		sta $25,x			sta DStack+1,x
.ca28					_9:
=20					CL	.var *-(WordListLink+wh_Xt)
=$ca28					en = *	; remember here
>ca12	14					.byte CL	;wh_CodeLength
.ca28	60		rts				rts
>ca29	52 53 68 69 66 74		L1:	.text "RShift"	;  name of word as a string, ending at wh_NameLastChar
>ca2f	06					.byte *-L1	;wh_NameLength	length of name
>ca30	8f c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca32	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca33	00					.byte 0	;wh_Flags	dictionary flags
=51631					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca34	20 2d b3	jsr $b32d	RShift:		jsr PopA2	; pop u, check for 2 params
.ca37	a8		tay		RShift_A:	tay		; get shift count
.ca38	f0 0a		beq $ca44			beq _done
.ca3a	b5 25		lda $25,x			lda DStack+1,x
.ca3c	4a		lsr a		_loop:		lsr a
.ca3d	76 24		ror $24,x			ror DStack+0,x
.ca3f	88		dey				dey
.ca40	d0 fa		bne $ca3c			bne _loop
.ca42	95 25		sta $25,x			sta DStack+1,x
.ca44					_done:
=16					CL	.var *-(WordListLink+wh_Xt)
=$ca44					en = *	; remember here
>ca32	10					.byte CL	;wh_CodeLength
.ca44	60		rts				rts
>ca45	4c 53 68 69 66 74		L1:	.text "LShift"	;  name of word as a string, ending at wh_NameLastChar
>ca4b	06					.byte *-L1	;wh_NameLength	length of name
>ca4c	af c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca4e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca4f	00					.byte 0	;wh_Flags	dictionary flags
=51659					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca50	20 2d b3	jsr $b32d	LShift:		jsr PopA2	; pop u, check for 2 params
.ca53	a8		tay		LShift_A:	tay		; get shift count
.ca54	f0 0a		beq $ca60			beq _done
.ca56	b5 25		lda $25,x			lda DStack+1,x
.ca58	16 24		asl $24,x	_loop:		asl DStack+0,x
.ca5a	2a		rol a				rol a
.ca5b	88		dey				dey
.ca5c	d0 fa		bne $ca58			bne _loop
.ca5e	95 25		sta $25,x			sta DStack+1,x
.ca60					_done:
=16					CL	.var *-(WordListLink+wh_Xt)
=$ca60					en = *	; remember here
>ca4e	10					.byte CL	;wh_CodeLength
.ca60	60		rts				rts
>ca61	41 6e 64			L1:	.text "And"	;  name of word as a string, ending at wh_NameLastChar
>ca64	03					.byte *-L1	;wh_NameLength	length of name
>ca65	cb c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca67	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca68	10					.byte UF	;wh_Flags	dictionary flags
=51684					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca69					And2:
.ca69	20 7f b3	jsr $b37f			jsr underflow_2
.ca6c	b5 24		lda $24,x			lda DStack+0,x
.ca6e	35 26		and $26,x			and DStack+2,x
.ca70	95 26		sta $26,x			sta DStack+2,x
.ca72	b5 25		lda $25,x			lda DStack+1,x
.ca74	35 27		and $27,x			and DStack+3,x
.ca76	95 27		sta $27,x			sta DStack+3,x
.ca78	e8		inx				inx		; Drop n2
.ca79	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$ca7a					en = *	; remember here
>ca67	11					.byte CL	;wh_CodeLength
.ca7a	60		rts				rts
>ca7b	4f 72				L1:	.text "Or"	;  name of word as a string, ending at wh_NameLastChar
>ca7d	02					.byte *-L1	;wh_NameLength	length of name
>ca7e	e4 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca80	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca81	10					.byte UF	;wh_Flags	dictionary flags
=51709					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca82					Or:
.ca82	20 7f b3	jsr $b37f			jsr underflow_2
.ca85	b5 24		lda $24,x			lda DStack+0,x
.ca87	15 26		ora $26,x			ora DStack+2,x
.ca89	95 26		sta $26,x			sta DStack+2,x
.ca8b	b5 25		lda $25,x			lda DStack+1,x
.ca8d	15 27		ora $27,x			ora DStack+3,x
.ca8f	95 27		sta $27,x			sta DStack+3,x
.ca91	e8		inx				inx		; Drop n2
.ca92	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$ca93					en = *	; remember here
>ca80	11					.byte CL	;wh_CodeLength
.ca93	60		rts				rts
>ca94	58 6f 72			L1:	.text "Xor"	;  name of word as a string, ending at wh_NameLastChar
>ca97	03					.byte *-L1	;wh_NameLength	length of name
>ca98	fd c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca9a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca9b	10					.byte UF	;wh_Flags	dictionary flags
=51735					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca9c					Xor:
.ca9c	20 7f b3	jsr $b37f			jsr underflow_2
.ca9f	b5 24		lda $24,x			lda DStack+0,x
.caa1	55 26		eor $26,x			eor DStack+2,x
.caa3	95 26		sta $26,x			sta DStack+2,x
.caa5	b5 25		lda $25,x			lda DStack+1,x
.caa7	55 27		eor $27,x			eor DStack+3,x
.caa9	95 27		sta $27,x			sta DStack+3,x
.caab	e8		inx				inx		; Drop n2
.caac	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$caad					en = *	; remember here
>ca9a	11					.byte CL	;wh_CodeLength
.caad	60		rts				rts
>caae	2b				L1:	.text "+"	;  name of word as a string, ending at wh_NameLastChar
>caaf	01					.byte *-L1	;wh_NameLength	length of name
>cab0	17 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cab2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cab3	10					.byte UF	;wh_Flags	dictionary flags
=51759					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cab4					Plus:
.cab4	20 7f b3	jsr $b37f			jsr underflow_2
.cab7	18		clc				clc
.cab8	b5 24		lda $24,x			lda DStack+0,x		; LSB
.caba	75 26		adc $26,x			adc DStack+2,x
.cabc	95 26		sta $26,x			sta DStack+2,x
.cabe	b5 25		lda $25,x			lda DStack+1,x		; MSB. No CLC, conserve carry bit
.cac0	75 27		adc $27,x			adc DStack+3,x
.cac2	95 27		sta $27,x			sta DStack+3,x
.cac4	e8		inx				inx
.cac5	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$cac6					en = *	; remember here
>cab2	12					.byte CL	;wh_CodeLength
.cac6	60		rts				rts
>cac7	2d				L1:	.text "-"	;  name of word as a string, ending at wh_NameLastChar
>cac8	01					.byte *-L1	;wh_NameLength	length of name
>cac9	2f ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cacb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cacc	10					.byte UF	;wh_Flags	dictionary flags
=51784					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cacd					Minus:
.cacd	20 7f b3	jsr $b37f			jsr underflow_2
.cad0	38		sec				sec
.cad1	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cad3	f5 24		sbc $24,x			sbc DStack+0,x
.cad5	95 26		sta $26,x			sta DStack+2,x
.cad7	b5 27		lda $27,x			lda DStack+3,x	; MSB
.cad9	f5 25		sbc $25,x			sbc DStack+1,x
.cadb	95 27		sta $27,x			sta DStack+3,x
.cadd	e8		inx				inx		; Drop n2
.cade	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$cadf					en = *	; remember here
>cacb	12					.byte CL	;wh_CodeLength
.cadf	60		rts				rts
>cae0	2e				L1:	.text "."	;  name of word as a string, ending at wh_NameLastChar
>cae1	01					.byte *-L1	;wh_NameLength	length of name
>cae2	48 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cae4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cae5	08					.byte NN	;wh_Flags	dictionary flags
=51809					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cae6	b5 25		lda $25,x	Dot:		lda DStack+1,x		; ( n )	save sign
.cae8	08		php				php
.cae9	20 9d c5	jsr $c59d			jsr Abs			; ( u )
.caec	20 49 b7	jsr $b749			jsr Zero		; ( ud )	u>d  cvt u to ud
.caef	4c ff ca	jmp $caff			jmp fmt_d3
=12					CL	.var *-(WordListLink+wh_Xt)
=$caf2					en = *	; remember here
>cae4	0c					.byte CL	;wh_CodeLength
>caf2	44 2e				L1:	.text "D."	;  name of word as a string, ending at wh_NameLastChar
>caf4	02					.byte *-L1	;wh_NameLength	length of name
>caf5	61 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>caf7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>caf8	08					.byte NN	;wh_Flags	dictionary flags
=51828					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.caf9	b5 25		lda $25,x	D_Dot:		lda DStack+1,x		; save sign
.cafb	08		php				php
.cafc	20 d2 c5	jsr $c5d2			jsr DAbs
.caff	20 fa aa	jsr $aafa	fmt_d3:		jsr Less_Number_Sign	; ( ud )	start formatting
.cb02	20 6d ab	jsr $ab6d			jsr Number_sign_s	; ( ud )	do all digits
.cb05	28		plp				plp			; ( ud )	do sign
.cb06	20 88 ab	jsr $ab88			jsr Sign_P		; ( ud )
.cb09	20 07 ab	jsr $ab07			jsr Number_sign_greater	; ( addr u )	end formatting
.cb0c	20 f2 cc	jsr $ccf2			jsr Type
.cb0f	4c e5 cc	jmp $cce5			jmp Space
=25					CL	.var *-(WordListLink+wh_Xt)
=$cb12					en = *	; remember here
>caf7	19					.byte CL	;wh_CodeLength
>cb12	55 2e				L1:	.text "U."	;  name of word as a string, ending at wh_NameLastChar
>cb14	02					.byte *-L1	;wh_NameLength	length of name
>cb15	74 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb17	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb18	18					.byte UF+NN	;wh_Flags	dictionary flags
=51860					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb19	20 6a b3	jsr $b36a	U_Dot:		jsr underflow_1
.cb1c	20 33 cb	jsr $cb33			jsr print_u
.cb1f	4c e5 cc	jmp $cce5			jmp Space
=9					CL	.var *-(WordListLink+wh_Xt)
=$cb22					en = *	; remember here
>cb17	09					.byte CL	;wh_CodeLength
>cb22	55 44 2e			L1:	.text "UD."	;  name of word as a string, ending at wh_NameLastChar
>cb25	03					.byte *-L1	;wh_NameLength	length of name
>cb26	94 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb28	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb29	18					.byte UF+NN	;wh_Flags	dictionary flags
=51877					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb2a	20 7f b3	jsr $b37f	UD_Dot:		jsr underflow_2 ; double number
.cb2d	20 36 cb	jsr $cb36			jsr print_ud
.cb30	4c e5 cc	jmp $cce5			jmp Space
=9					CL	.var *-(WordListLink+wh_Xt)
=$cb33					en = *	; remember here
>cb28	09					.byte CL	;wh_CodeLength
.cb33					print_u:
.cb33	20 49 b7	jsr $b749			jsr Zero			; convert to ud
.cb36					print_ud:
.cb36	20 fa aa	jsr $aafa			jsr Less_Number_Sign		; <#	start formatting
.cb39	20 6d ab	jsr $ab6d			jsr Number_sign_s		; #S	do all digits
.cb3c	20 07 ab	jsr $ab07			jsr Number_sign_greater		; #>	end formatting
.cb3f	4c f2 cc	jmp $ccf2			jmp Type
>cb42	55 2e 52			L1:	.text "U.R"	;  name of word as a string, ending at wh_NameLastChar
>cb45	03					.byte *-L1	;wh_NameLength	length of name
>cb46	a5 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb48	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb49	08					.byte NN	;wh_Flags	dictionary flags
=51909					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb4a	20 24 b3	jsr $b324	U_Dot_R:	jsr PopA		; save field width
.cb4d	48		pha		U_Dot_R_A:	pha
.cb4e	20 49 b7	jsr $b749			jsr Zero		; u>d  cvt u to ud
.cb51	4c 61 cb	jmp $cb61			jmp fmt_udr3
=10					CL	.var *-(WordListLink+wh_Xt)
=$cb54					en = *	; remember here
>cb48	0a					.byte CL	;wh_CodeLength
>cb54	55 44 2e 52			L1:	.text "UD.R"	;  name of word as a string, ending at wh_NameLastChar
>cb58	04					.byte *-L1	;wh_NameLength	length of name
>cb59	c5 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb5b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb5c	08					.byte NN	;wh_Flags	dictionary flags
=51928					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb5d	20 24 b3	jsr $b324	UD_Dot_R:	jsr PopA			; save field width
.cb60	48		pha		UD_Dot_R_A:	pha
.cb61	20 fa aa	jsr $aafa	fmt_udr3:	jsr Less_Number_Sign		; start formatted
.cb64	20 6d ab	jsr $ab6d			jsr Number_sign_s		; do all digits
.cb67	20 07 ab	jsr $ab07	fmt_r:		jsr Number_sign_greater		; finish formatted
.cb6a	68		pla				pla				; recover field width
.cb6b	38		sec				sec				; do leading spaces
.cb6c	f5 24		sbc $24,x			sbc DStack+0,x
.cb6e	90 06		bcc $cb76			bcc +
.cb70	20 3a b7	jsr $b73a			jsr PushZA
.cb73	20 84 c3	jsr $c384			jsr Spaces
.cb76	4c f2 cc	jmp $ccf2	+		jmp Type			; type formatted
=28					CL	.var *-(WordListLink+wh_Xt)
=$cb79					en = *	; remember here
>cb5b	1c					.byte CL	;wh_CodeLength
>cb79	2e 52				L1:	.text ".R"	;  name of word as a string, ending at wh_NameLastChar
>cb7b	02					.byte *-L1	;wh_NameLength	length of name
>cb7c	d8 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb7e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb7f	08					.byte NN	;wh_Flags	dictionary flags
=51963					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb80	20 24 b3	jsr $b324	Dot_R:		jsr PopA		; save field width
.cb83	48		pha		Dot_R_A:	pha
.cb84	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cb86	08		php				php
.cb87	20 9d c5	jsr $c59d			jsr Abs
.cb8a	20 49 b7	jsr $b749			jsr Zero		; u>d  cvt u to ud
.cb8d	4c a2 cb	jmp $cba2			jmp fmt_dr3
=16					CL	.var *-(WordListLink+wh_Xt)
=$cb90					en = *	; remember here
>cb7e	10					.byte CL	;wh_CodeLength
>cb90	44 2e 52			L1:	.text "D.R"	;  name of word as a string, ending at wh_NameLastChar
>cb93	03					.byte *-L1	;wh_NameLength	length of name
>cb94	fb ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb96	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb97	08					.byte NN	;wh_Flags	dictionary flags
=51987					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb98	20 24 b3	jsr $b324	D_Dot_R:	jsr PopA		; save field width
.cb9b	48		pha		D_Dot_R_A:	pha
.cb9c	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cb9e	08		php				php
.cb9f	20 d2 c5	jsr $c5d2			jsr DAbs
.cba2	20 fa aa	jsr $aafa	fmt_dr3:	jsr Less_Number_Sign	; start formatted output
.cba5	20 6d ab	jsr $ab6d			jsr Number_sign_s	; do all digits
.cba8	28		plp				plp			; do the sign
.cba9	20 88 ab	jsr $ab88			jsr Sign_P
.cbac	4c 67 cb	jmp $cb67			jmp fmt_r
=23					CL	.var *-(WordListLink+wh_Xt)
=$cbaf					en = *	; remember here
>cb96	17					.byte CL	;wh_CodeLength
>cbaf	3f				L1:	.text "?"	;  name of word as a string, ending at wh_NameLastChar
>cbb0	01					.byte *-L1	;wh_NameLength	length of name
>cbb1	13 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbb3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbb4	08					.byte NN	;wh_Flags	dictionary flags
=52016					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbb5					Question:
.cbb5	20 d4 cd	jsr $cdd4			jsr Fetch
.cbb8	4c e6 ca	jmp $cae6			jmp Dot
=6					CL	.var *-(WordListLink+wh_Xt)
=$cbbb					en = *	; remember here
>cbb3	06					.byte CL	;wh_CodeLength
>cbbb	32 44 75 70			L1:	.text "2Dup"	;  name of word as a string, ending at wh_NameLastChar
>cbbf	04					.byte *-L1	;wh_NameLength	length of name
>cbc0	30 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbc2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbc3	10					.byte UF	;wh_Flags	dictionary flags
=52031					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbc4					Two_Dup:
.cbc4	20 7f b3	jsr $b37f			jsr underflow_2
.cbc7	ca		dex				dex
.cbc8	ca		dex				dex
.cbc9	ca		dex				dex
.cbca	ca		dex				dex
.cbcb	b5 28		lda $28,x			lda DStack+4,x	; TOS
.cbcd	95 24		sta $24,x			sta DStack+0,x
.cbcf	b5 29		lda $29,x			lda DStack+5,x
.cbd1	95 25		sta $25,x			sta DStack+1,x
.cbd3	b5 2a		lda $2a,x			lda DStack+6,x	; NOS
.cbd5	95 26		sta $26,x			sta DStack+2,x
.cbd7	b5 2b		lda $2b,x			lda DStack+7,x
.cbd9	95 27		sta $27,x			sta DStack+3,x
=23					CL	.var *-(WordListLink+wh_Xt)
=$cbdb					en = *	; remember here
>cbc2	17					.byte CL	;wh_CodeLength
.cbdb	60		rts				rts
>cbdc	54 75 63 6b			L1:	.text "Tuck"	;  name of word as a string, ending at wh_NameLastChar
>cbe0	04					.byte *-L1	;wh_NameLength	length of name
>cbe1	3f cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbe3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbe4	10					.byte UF	;wh_Flags	dictionary flags
=52064					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbe5					Tuck:
.cbe5	20 7f b3	jsr $b37f			jsr underflow_2
.cbe8	ca		dex				dex
.cbe9	ca		dex				dex
.cbea	b4 28		ldy $28,x			ldy DStack+4,x	; LSB
.cbec	b5 26		lda $26,x			lda DStack+2,x
.cbee	95 28		sta $28,x			sta DStack+4,x
.cbf0	94 26		sty $26,x			sty DStack+2,x
.cbf2	95 24		sta $24,x			sta DStack+0,x
.cbf4	b4 29		ldy $29,x			ldy DStack+5,x	; MSB
.cbf6	b5 27		lda $27,x			lda DStack+3,x
.cbf8	95 29		sta $29,x			sta DStack+5,x
.cbfa	94 27		sty $27,x			sty DStack+3,x
.cbfc	95 25		sta $25,x			sta DStack+1,x
=25					CL	.var *-(WordListLink+wh_Xt)
=$cbfe					en = *	; remember here
>cbe3	19					.byte CL	;wh_CodeLength
.cbfe	60		rts				rts
>cbff	43 2c				L1:	.text "C,"	;  name of word as a string, ending at wh_NameLastChar
>cc01	02					.byte *-L1	;wh_NameLength	length of name
>cc02	60 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc04	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc05	08					.byte NN	;wh_Flags	dictionary flags
=52097					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc06	20 24 b3	jsr $b324	C_Comma:	jsr PopA	; pop c, with underflow check
.cc09					C_Comma_A:
.cc09	ca		dex				dex
.cc0a	94 24		sty $24,x			sty DStack+0,x	; save Y
.cc0c	a0 00		ldy #$00			ldy #0		; store A
.cc0e	91 00		sta ($00),y			sta (cp),y
.cc10	e6 00		inc $00				inc cp+0	; increment cp
.cc12	d0 02		bne $cc16			bne +
.cc14	e6 01		inc $01				inc cp+1
.cc16					+
.cc16	b4 24		ldy $24,x			ldy DStack+0,x	; restore Y
.cc18	e8		inx				inx
=19					CL	.var *-(WordListLink+wh_Xt)
=$cc19					en = *	; remember here
>cc04	13					.byte CL	;wh_CodeLength
.cc19	60		rts				rts
>cc1a	2c				L1:	.text ","	;  name of word as a string, ending at wh_NameLastChar
>cc1b	01					.byte *-L1	;wh_NameLength	length of name
>cc1c	81 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc1e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc1f	08					.byte NN	;wh_Flags	dictionary flags
=52123					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc20	20 40 b3	jsr $b340	Comma:		jsr PopYA	; pop n, with underflow check
.cc23					Comma_YA:
.cc23	20 09 cc	jsr $cc09			jsr C_Comma_A	; compile LSB
.cc26	98		tya				tya		; compile MSB
.cc27	4c 09 cc	jmp $cc09			jmp C_Comma_A
=10					CL	.var *-(WordListLink+wh_Xt)
=$cc2a					en = *	; remember here
>cc1e	0a					.byte CL	;wh_CodeLength
>cc2a	32 2c				L1:	.text "2,"	;  name of word as a string, ending at wh_NameLastChar
>cc2c	02					.byte *-L1	;wh_NameLength	length of name
>cc2d	9b cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc2f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc30	08					.byte NN	;wh_Flags	dictionary flags
=52140					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc31	20 20 cc	jsr $cc20	Two_Comma:	jsr Comma
.cc34	4c 20 cc	jmp $cc20			jmp Comma
=6					CL	.var *-(WordListLink+wh_Xt)
=$cc37					en = *	; remember here
>cc2f	06					.byte CL	;wh_CodeLength
.cc37	a9 e8		lda #$e8	Drop_Comma:	lda #$e8	;inx
.cc39	a8		tay				tay
.cc3a	d0 e7		bne $cc23			bne Comma_YA
>cc3c	4a 73 72 2c			L1:	.text "Jsr,"	;  name of word as a string, ending at wh_NameLastChar
>cc40	04					.byte *-L1	;wh_NameLength	length of name
>cc41	ac cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc43	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc44	08					.byte NN	;wh_Flags	dictionary flags
=52160					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc45	20 40 b3	jsr $b340	Jsr_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cc48	20 f8 b6	jsr $b6f8	Jsr_Comma_YA:	jsr PushYA	; push addr
.cc4b	a9 20		lda #$20			lda #$20	; JSR abs opcode
.cc4d	20 09 cc	jsr $cc09	Jsr_Comma_3:	jsr C_Comma_A
.cc50	4c 20 cc	jmp $cc20			jmp Comma	; compile addr
=14					CL	.var *-(WordListLink+wh_Xt)
=$cc53					en = *	; remember here
>cc43	0e					.byte CL	;wh_CodeLength
>cc53	4a 6d 70 2c			L1:	.text "Jmp,"	;  name of word as a string, ending at wh_NameLastChar
>cc57	04					.byte *-L1	;wh_NameLength	length of name
>cc58	c0 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc5a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc5b	08					.byte NN	;wh_Flags	dictionary flags
=52183					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc5c	20 40 b3	jsr $b340	Jmp_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cc5f	20 f8 b6	jsr $b6f8	Jmp_Comma_YA:	jsr PushYA	; push addr
.cc62	a9 4c		lda #$4c			lda #$4c	; JMP abs opcode
.cc64	d0 e7		bne $cc4d			bne Jsr_Comma_3
=10					CL	.var *-(WordListLink+wh_Xt)
=$cc66					en = *	; remember here
>cc5a	0a					.byte CL	;wh_CodeLength
>cc66	43 40				L1:	.text "C@"	;  name of word as a string, ending at wh_NameLastChar
>cc68	02					.byte *-L1	;wh_NameLength	length of name
>cc69	d7 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc6b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc6c	10					.byte UF	;wh_Flags	dictionary flags
=52200					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc6d	20 6a b3	jsr $b36a	C_Fetch:	jsr underflow_1
.cc70	a1 24		lda ($24,x)			lda (DStack+0,x)
.cc72	95 24		sta $24,x			sta DStack+0,x
.cc74	a9 00		lda #$00			lda #0
.cc76	95 25		sta $25,x			sta DStack+1,x	; zero MSB
=11					CL	.var *-(WordListLink+wh_Xt)
=$cc78					en = *	; remember here
>cc6b	0b					.byte CL	;wh_CodeLength
.cc78	60		rts				rts
>cc79	43 21				L1:	.text "C!"	;  name of word as a string, ending at wh_NameLastChar
>cc7b	02					.byte *-L1	;wh_NameLength	length of name
>cc7c	e8 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc7e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc7f	10					.byte UF	;wh_Flags	dictionary flags
=52219					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc80	20 7f b3	jsr $b37f	C_Store:	jsr underflow_2
.cc83	b5 26		lda $26,x			lda DStack+2,x
.cc85	81 24		sta ($24,x)			sta (DStack+0,x)
.cc87	e8		inx				inx
.cc88	e8		inx				inx
.cc89	e8		inx				inx
.cc8a	e8		inx				inx
=11					CL	.var *-(WordListLink+wh_Xt)
=$cc8b					en = *	; remember here
>cc7e	0b					.byte CL	;wh_CodeLength
.cc8b	60		rts				rts
>cc8c	31 2b 21			L1:	.text "1+!"	;  name of word as a string, ending at wh_NameLastChar
>cc8f	03					.byte *-L1	;wh_NameLength	length of name
>cc90	fb cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc92	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc93	00					.byte 0	;wh_Flags	dictionary flags
=52239					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc94					OnePlusStore:
.cc94	a9 01		lda #$01			lda #1
.cc96	18		clc				clc
.cc97	61 24		adc ($24,x)			adc (DStack+0,x)	; increment lo byte
.cc99	81 24		sta ($24,x)			sta (DStack+0,x)
.cc9b	90 0c		bcc $cca9			bcc _7			; if carry
.cc9d	f6 24		inc $24,x			inc DStack+0,x		;   point at hi byte
.cc9f	d0 02		bne $cca3			bne +
.cca1	f6 25		inc $25,x			inc DStack+1,x
.cca3					+
.cca3	a1 24		lda ($24,x)			lda (DStack+0,x)	;   increment hi byte
.cca5	69 00		adc #$00			adc #0
.cca7	81 24		sta ($24,x)			sta (Dstack+0,x)
.cca9					_7:
.cca9	e8		inx				inx			; Drop addr
.ccaa	e8		inx				inx
=23					CL	.var *-(WordListLink+wh_Xt)
=$ccab					en = *	; remember here
>cc92	17					.byte CL	;wh_CodeLength
.ccab	60		rts				rts
>ccac	2b 21				L1:	.text "+!"	;  name of word as a string, ending at wh_NameLastChar
>ccae	02					.byte *-L1	;wh_NameLength	length of name
>ccaf	0f cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccb1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccb2	18					.byte UF+NN	;wh_Flags	dictionary flags
=52270					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccb3					Plus_store:
.ccb3	20 7f b3	jsr $b37f			jsr underflow_2
.ccb6	18		clc				clc
.ccb7	b5 26		lda $26,x			lda DStack+2,x
.ccb9	61 24		adc ($24,x)			adc (DStack+0,x)
.ccbb	81 24		sta ($24,x)			sta (DStack+0,x)
.ccbd	f6 24		inc $24,x			inc DStack+0,x
.ccbf	d0 02		bne $ccc3			bne +
.ccc1	f6 25		inc $25,x			inc DStack+1,x
.ccc3					+
.ccc3	b5 27		lda $27,x			lda DStack+3,x
.ccc5	61 24		adc ($24,x)			adc (DStack+0,x)
.ccc7	81 24		sta ($24,x)			sta (DStack+0,x)
.ccc9	4c 2b c4	jmp $c42b			jmp Two_Drop
=25					CL	.var *-(WordListLink+wh_Xt)
=$cccc					en = *	; remember here
>ccb1	19					.byte CL	;wh_CodeLength
>cccc	45 6d 69 74			L1:	.text "Emit"	;  name of word as a string, ending at wh_NameLastChar
>ccd0	04					.byte *-L1	;wh_NameLength	length of name
>ccd1	2e cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccd3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccd4	08					.byte NN	;wh_Flags	dictionary flags
=52304					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccd5	20 24 b3	jsr $b324	Emit:		jsr PopA		; pop char, with underflow check
.ccd8					Emit_A:
.ccd8	6c 06 03	jmp ($0306)			jmp (output)		; JSR/RTS
=6					CL	.var *-(WordListLink+wh_Xt)
=$ccdb					en = *	; remember here
>ccd3	06					.byte CL	;wh_CodeLength
>ccdb	53 70 61 63 65			L1:	.text "Space"	;  name of word as a string, ending at wh_NameLastChar
>cce0	05					.byte *-L1	;wh_NameLength	length of name
>cce1	50 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cce3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cce4	08					.byte NN	;wh_Flags	dictionary flags
=52320					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cce5	a9 20		lda #$20	Space:		lda #AscSP
.cce7	d0 ef		bne $ccd8			bne Emit_A
=4					CL	.var *-(WordListLink+wh_Xt)
=$cce9					en = *	; remember here
>cce3	04					.byte CL	;wh_CodeLength
>cce9	54 79 70 65			L1:	.text "Type"	;  name of word as a string, ending at wh_NameLastChar
>cced	04					.byte *-L1	;wh_NameLength	length of name
>ccee	60 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccf0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccf1	18					.byte UF+NN	;wh_Flags	dictionary flags
=52333					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccf2					Type:
.ccf2	20 7f b3	jsr $b37f			jsr underflow_2
.ccf5	4c 02 cd	jmp $cd02			jmp _test
.ccf8					_loop:
.ccf8	d6 24		dec $24,x			dec DStack+0,x		; finish length decrement
.ccfa	a1 26		lda ($26,x)			lda (DStack+2,x)	; Send the current character
.ccfc	20 d8 cc	jsr $ccd8			jsr Emit_A
.ccff	20 6a c9	jsr $c96a			jsr NOS_One_Plus	; increment address
.cd02	b5 24		lda $24,x	_test:		lda DStack+0,x		; decrement length & test for <0
.cd04	d0 f2		bne $ccf8			bne _loop
.cd06	d6 25		dec $25,x			dec DStack+1,x
.cd08	10 ee		bpl $ccf8			bpl _loop
.cd0a	4c 2b c4	jmp $c42b			jmp Two_drop
=27					CL	.var *-(WordListLink+wh_Xt)
=$cd0d					en = *	; remember here
>ccf0	1b					.byte CL	;wh_CodeLength
.cd0d					Print_ASCIIZ_YA:
.cd0d	20 13 cd	jsr $cd13			jsr Print_ASCIIZ_YA_no_lf
.cd10	4c 7d aa	jmp $aa7d	                jmp CR
.cd13					Print_ASCIIZ_YA_no_lf:
.cd13	85 18		sta $18				sta tmp3+0		; save string address
.cd15	84 19		sty $19				sty tmp3+1
.cd17	a0 00		ldy #$00			ldy #0
.cd19					Print_ASCIIZ_tmp3_no_lf:
.cd19	b1 18		lda ($18),y			lda (tmp3),y
.cd1b	f0 06		beq $cd23			beq _done		; end of string?
.cd1d	20 d8 cc	jsr $ccd8			jsr emit_a
.cd20	c8		iny				iny
.cd21	d0 f6		bne $cd19			bne Print_ASCIIZ_tmp3_no_lf
.cd23					_done:
.cd23	60		rts				rts
>cd24	45 78 65 63 75 74 65		L1:	.text "Execute"	;  name of word as a string, ending at wh_NameLastChar
>cd2b	07					.byte *-L1	;wh_NameLength	length of name
>cd2c	6d cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd2e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd2f	08					.byte NN	;wh_Flags	dictionary flags
=52395					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd30					Execute:
.cd30	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.cd32	b0 2f		bcs $cd63		bcs Throw_Stack_03
.cd34	b5 25		lda $25,x			lda DStack+1,x	; addr for RTI
.cd36	48		pha				pha
.cd37	b5 24		lda $24,x			lda DStack+0,x
.cd39	48		pha				pha
.cd3a	e8		inx				inx		; drop addr
.cd3b	e8		inx				inx
.cd3c	08		php				php		; flags for RTI
.cd3d	40		rti				rti
=14					CL	.var *-(WordListLink+wh_Xt)
=$cd3e					en = *	; remember here
>cd2e	0e					.byte CL	;wh_CodeLength
>cd3e	32 52 6f 74			L1:	.text "2Rot"	;  name of word as a string, ending at wh_NameLastChar
>cd42	04					.byte *-L1	;wh_NameLength	length of name
>cd43	ab cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd45	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd46	08					.byte NN	;wh_Flags	dictionary flags
=52418					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd47					TwoRot:
.cd47	e0 1d		cpx #$1d		cpx #-2*6+DStack0+1
.cd49	b0 18		bcs $cd63		bcs Throw_Stack_03
.cd4b	86 14		stx $14				stx tmp1+0
.cd4d	e8		inx				inx		; do 4 times
.cd4e	e8		inx				inx
.cd4f	e8		inx				inx
.cd50	e8		inx				inx
.cd51	ca		dex		-		dex
.cd52	b4 2c		ldy $2c,x			ldy DStack+8,x	; do a byte
.cd54	b5 28		lda $28,x			lda DStack+4,x
.cd56	95 2c		sta $2c,x			sta DStack+8,x
.cd58	b5 24		lda $24,x			lda DStack+0,x
.cd5a	95 28		sta $28,x			sta DStack+4,x
.cd5c	94 24		sty $24,x			sty DStack+0,x
.cd5e	e4 14		cpx $14				cpx tmp1+0
.cd60	d0 ef		bne $cd51			bne -
=27					CL	.var *-(WordListLink+wh_Xt)
=$cd62					en = *	; remember here
>cd45	1b					.byte CL	;wh_CodeLength
.cd62	60		rts				rts
.cd63	4c 8e b3	jmp $b38e	Throw_Stack_03: jmp Throw_Stack
>cd66	52 6f 74			L1:	.text "Rot"	;  name of word as a string, ending at wh_NameLastChar
>cd69	03					.byte *-L1	;wh_NameLength	length of name
>cd6a	c2 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd6c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd6d	08					.byte NN	;wh_Flags	dictionary flags
=52457					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd6e					Rot:
.cd6e	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.cd70	b0 f1		bcs $cd63		bcs Throw_Stack_03
.cd72	b4 29		ldy $29,x			ldy DStack+5,x	; do MSB
.cd74	b5 27		lda $27,x			lda DStack+3,x
.cd76	95 29		sta $29,x			sta DStack+5,x
.cd78	b5 25		lda $25,x			lda DStack+1,x
.cd7a	95 27		sta $27,x			sta DStack+3,x
.cd7c	94 25		sty $25,x			sty DStack+1,x
.cd7e	b4 28		ldy $28,x			ldy DStack+4,x	; do LSB
.cd80	b5 26		lda $26,x			lda DStack+2,x
.cd82	95 28		sta $28,x			sta DStack+4,x
.cd84	b5 24		lda $24,x			lda DStack+0,x
.cd86	95 26		sta $26,x			sta DStack+2,x
.cd88	94 24		sty $24,x			sty DStack+0,x
=28					CL	.var *-(WordListLink+wh_Xt)
=$cd8a					en = *	; remember here
>cd6c	1c					.byte CL	;wh_CodeLength
.cd8a	60		rts				rts
>cd8b	2d 52 6f 74			L1:	.text "-Rot"	;  name of word as a string, ending at wh_NameLastChar
>cd8f	04					.byte *-L1	;wh_NameLength	length of name
>cd90	e9 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd92	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd93	08					.byte NN	;wh_Flags	dictionary flags
=52495					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd94					Not_Rot:
.cd94	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.cd96	b0 cb		bcs $cd63		bcs Throw_Stack_03
.cd98	b4 25		ldy $25,x			ldy DStack+1,x	; do MSB
.cd9a	b5 27		lda $27,x			lda DStack+3,x
.cd9c	95 25		sta $25,x			sta DStack+1,x
.cd9e	b5 29		lda $29,x			lda DStack+5,x
.cda0	95 27		sta $27,x			sta DStack+3,x
.cda2	94 29		sty $29,x			sty DStack+5,x
.cda4	b4 24		ldy $24,x			ldy DStack+0,x	; do LSB
.cda6	b5 26		lda $26,x			lda DStack+2,x
.cda8	95 24		sta $24,x			sta DStack+0,x
.cdaa	b5 28		lda $28,x			lda DStack+4,x
.cdac	95 26		sta $26,x			sta DStack+2,x
.cdae	94 28		sty $28,x			sty DStack+4,x
=28					CL	.var *-(WordListLink+wh_Xt)
=$cdb0					en = *	; remember here
>cd92	1c					.byte CL	;wh_CodeLength
.cdb0	60		rts				rts
>cdb1	21				L1:	.text "!"	;  name of word as a string, ending at wh_NameLastChar
>cdb2	01					.byte *-L1	;wh_NameLength	length of name
>cdb3	0f cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cdb5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdb6	08					.byte NN	;wh_Flags	dictionary flags
=52530					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdb7					Store:
.cdb7	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.cdb9	b0 a8		bcs $cd63		bcs Throw_Stack_03
.cdbb	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cdbd	81 24		sta ($24,x)			sta (DStack+0,x)
.cdbf	f6 24		inc $24,x			inc DStack+0,x
.cdc1	d0 02		bne $cdc5			bne +
.cdc3	f6 25		inc $25,x			inc DStack+1,x
.cdc5					+
.cdc5	b5 27		lda $27,x			lda DStack+3,x	; MSB
.cdc7	81 24		sta ($24,x)			sta (DStack+0,x)
.cdc9	e8		inx				inx		; 2Drop
.cdca	e8		inx				inx
.cdcb	e8		inx				inx
.cdcc	e8		inx				inx
=22					CL	.var *-(WordListLink+wh_Xt)
=$cdcd					en = *	; remember here
>cdb5	16					.byte CL	;wh_CodeLength
.cdcd	60		rts				rts
>cdce	40				L1:	.text "@"	;  name of word as a string, ending at wh_NameLastChar
>cdcf	01					.byte *-L1	;wh_NameLength	length of name
>cdd0	32 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cdd2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdd3	08					.byte NN	;wh_Flags	dictionary flags
=52559					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdd4					Fetch:
.cdd4	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.cdd6	b0 8b		bcs $cd63		bcs Throw_Stack_03
.cdd8	a1 24		lda ($24,x)			lda (DStack+0,x)		; LSB
.cdda	a8		tay				tay
.cddb	f6 24		inc $24,x			inc DStack+0,x
.cddd	d0 02		bne $cde1			bne +
.cddf	f6 25		inc $25,x			inc DStack+1,x
.cde1					+
.cde1	a1 24		lda ($24,x)			lda (DStack+0,x)		; MSB
.cde3	95 25		sta $25,x			sta DStack+1,x
.cde5	94 24		sty $24,x			sty DStack+0,x
=19					CL	.var *-(WordListLink+wh_Xt)
=$cde7					en = *	; remember here
>cdd2	13					.byte CL	;wh_CodeLength
.cde7	60		rts				rts
>cde8	3e 52				L1:	.text ">R"	;  name of word as a string, ending at wh_NameLastChar
>cdea	02					.byte *-L1	;wh_NameLength	length of name
>cdeb	4f cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cded	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdee	41					.byte CO+R6	;wh_Flags	dictionary flags
=52586					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdef					To_R:
.cdef	68		pla				pla		; move the return address out of the way
.cdf0	85 1c		sta $1c				sta tmp5+0
.cdf2	68		pla				pla
.cdf3	85 1d		sta $1d				sta tmp5+1
.cdf5	20 6a b3	jsr $b36a			jsr underflow_1
.cdf8	b5 25		lda $25,x			lda DStack+1,x	; MSB
.cdfa	48		pha				pha
.cdfb	b5 24		lda $24,x			lda DStack+0,x	; LSB
.cdfd	48		pha				pha
.cdfe	e8		inx				inx
.cdff	e8		inx				inx
.ce00	a5 1d		lda $1d				lda tmp5+1	; move the return address back in
.ce02	48		pha				pha
.ce03	a5 1c		lda $1c				lda tmp5+0
.ce05	48		pha				pha
=23					CL	.var *-(WordListLink+wh_Xt)
=$ce06					en = *	; remember here
>cded	17					.byte CL	;wh_CodeLength
.ce06	60		rts				rts
>ce07	52 3e				L1:	.text "R>"	;  name of word as a string, ending at wh_NameLastChar
>ce09	02					.byte *-L1	;wh_NameLength	length of name
>ce0a	6a cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce0c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce0d	41					.byte CO+R6	;wh_Flags	dictionary flags
=52617					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce0e					R_From:
.ce0e	68		pla				pla		; Move the RTS addr out of the way
.ce0f	85 1c		sta $1c				sta tmp5+0
.ce11	68		pla				pla
.ce12	85 1d		sta $1d				sta tmp5+1
.ce14	ca		dex				dex
.ce15	ca		dex				dex
.ce16	68		pla				pla		; LSB
.ce17	95 24		sta $24,x			sta DStack+0,x
.ce19	68		pla				pla		; MSB
.ce1a	95 25		sta $25,x			sta DStack+1,x
.ce1c	a5 1d		lda $1d				lda tmp5+1	; Restore the RTS addr
.ce1e	48		pha				pha
.ce1f	a5 1c		lda $1c				lda tmp5+0
.ce21	48		pha				pha
=20					CL	.var *-(WordListLink+wh_Xt)
=$ce22					en = *	; remember here
>ce0c	14					.byte CL	;wh_CodeLength
.ce22	60		rts				rts
>ce23	52 40				L1:	.text "R@"	;  name of word as a string, ending at wh_NameLastChar
>ce25	02					.byte *-L1	;wh_NameLength	length of name
>ce26	89 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce28	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce29	09					.byte NN+CO	;wh_Flags	dictionary flags
=52645					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce2a					R_Fetch:
.ce2a	86 14		stx $14				stx tmp1	; save data stack index
.ce2c	ba		tsx				tsx		; X= return stack index
.ce2d	bd 03 01	lda $0103,x			lda RStack+3,x
.ce30	bc 04 01	ldy $0104,x			ldy RStack+4,x
.ce33	a6 14		ldx $14				ldx tmp1	; restore data stack index
.ce35	4c f8 b6	jmp $b6f8			jmp PushYA
=14					CL	.var *-(WordListLink+wh_Xt)
=$ce38					en = *	; remember here
>ce28	0e					.byte CL	;wh_CodeLength
>ce38	4f 76 65 72			L1:	.text "Over"	;  name of word as a string, ending at wh_NameLastChar
>ce3c	04					.byte *-L1	;wh_NameLength	length of name
>ce3d	a5 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce3f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce40	10					.byte UF	;wh_Flags	dictionary flags
=52668					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce41					Over:
.ce41	20 7f b3	jsr $b37f			jsr underflow_2
.ce44	b5 26		lda $26,x			lda DStack+2,x	; LSB
.ce46	b4 27		ldy $27,x			ldy DStack+3,x	; MSB
.ce48	ca		dex				dex		; PushYA
.ce49	ca		dex				dex
.ce4a	95 24		sta $24,x			sta DStack+0,x
.ce4c	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$ce4e					en = *	; remember here
>ce3f	0d					.byte CL	;wh_CodeLength
.ce4e	60		rts				rts
>ce4f	3f 44 75 70			L1:	.text "?Dup"	;  name of word as a string, ending at wh_NameLastChar
>ce53	04					.byte *-L1	;wh_NameLength	length of name
>ce54	bc cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce56	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce57	18					.byte UF+NN	;wh_Flags	dictionary flags
=52691					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce58					Question_Dup:
.ce58	20 6a b3	jsr $b36a			jsr underflow_1
.ce5b	b5 24		lda $24,x			lda DStack+0,x	; Check if TOS is zero
.ce5d	15 25		ora $25,x			ora DStack+1,x
.ce5f	d0 0c		bne $ce6d			bne Dup_NoUf
=9					CL	.var *-(WordListLink+wh_Xt)
=$ce61					en = *	; remember here
>ce56	09					.byte CL	;wh_CodeLength
.ce61	60		rts				rts
>ce62	44 75 70			L1:	.text "Dup"	;  name of word as a string, ending at wh_NameLastChar
>ce65	03					.byte *-L1	;wh_NameLength	length of name
>ce66	d3 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce68	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce69	10					.byte UF	;wh_Flags	dictionary flags
=52709					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce6a					Dup:
.ce6a	20 6a b3	jsr $b36a			jsr underflow_1
.ce6d	b5 24		lda $24,x	Dup_NoUf:	lda DStack+0,x	; LSB
.ce6f	b4 25		ldy $25,x			ldy DStack+1,x	; MSB
.ce71	ca		dex				dex
.ce72	ca		dex				dex
.ce73	95 24		sta $24,x			sta DStack+0,x
.ce75	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$ce77					en = *	; remember here
>ce68	0d					.byte CL	;wh_CodeLength
.ce77	60		rts				rts
.ce78					PushAY:
.ce78	ca		dex				dex
.ce79	ca		dex				dex
.ce7a	94 24		sty $24,x			sty DStack+0,x
.ce7c	95 25		sta $25,x			sta DStack+1,x
.ce7e	60		rts				rts
>ce7f	53 77 61 70			L1:	.text "Swap"	;  name of word as a string, ending at wh_NameLastChar
>ce83	04					.byte *-L1	;wh_NameLength	length of name
>ce84	e5 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce86	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce87	10					.byte UF	;wh_Flags	dictionary flags
=52739					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce88					Swap:
.ce88	20 7f b3	jsr $b37f			jsr underflow_2
.ce8b	b5 24		lda $24,x			lda DStack+0,x	; do LSB
.ce8d	b4 26		ldy $26,x			ldy DStack+2,x
.ce8f	95 26		sta $26,x			sta DStack+2,x
.ce91	94 24		sty $24,x			sty DStack+0,x
.ce93	b5 25		lda $25,x			lda DStack+1,x	; do MSB
.ce95	b4 27		ldy $27,x			ldy DStack+3,x
.ce97	95 27		sta $27,x			sta DStack+3,x
.ce99	94 25		sty $25,x			sty DStack+1,x
=19					CL	.var *-(WordListLink+wh_Xt)
=$ce9b					en = *	; remember here
>ce86	13					.byte CL	;wh_CodeLength
.ce9b	60		rts				rts
>ce9c	44 72 6f 70			L1:	.text "Drop"	;  name of word as a string, ending at wh_NameLastChar
>cea0	04					.byte *-L1	;wh_NameLength	length of name
>cea1	03 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cea3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cea4	10					.byte UF	;wh_Flags	dictionary flags
=52768					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cea5					Drop:
.cea5	20 6a b3	jsr $b36a			jsr underflow_1
.cea8	e8		inx				inx
.cea9	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$ceaa					en = *	; remember here
>cea3	05					.byte CL	;wh_CodeLength
.ceaa	60		rts				rts
=52768					forth_dictionary_start = WordListLink ; END of FORTH-WORDLIST
=0					WordListLink .var 0
>ceab	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
>ceb0	05					.byte *-L1	;wh_NameLength	length of name
>ceb1	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ceb3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ceb4	08					.byte NN	;wh_Flags	dictionary flags
=52784					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ceb5	4c ca a9	jmp $a9ca			jmp Words
=3					CL	.var *-(WordListLink+wh_Xt)
=$ceb8					en = *	; remember here
>ceb3	03					.byte CL	;wh_CodeLength
>ceb8	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>cec0	72 64 6c 69 73 74
>cec6	0e					.byte *-L1	;wh_NameLength	length of name
>cec7	30 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cec9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ceca	08					.byte NN	;wh_Flags	dictionary flags
=52806					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cecb	4c 20 9f	jmp $9f20			jmp Forth_WordList
=3					CL	.var *-(WordListLink+wh_Xt)
=$cece					en = *	; remember here
>cec9	03					.byte CL	;wh_CodeLength
>cece	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
>ced3	05					.byte *-L1	;wh_NameLength	length of name
>ced4	46 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ced6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ced7	08					.byte NN	;wh_Flags	dictionary flags
=52819					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ced8	4c 19 a0	jmp $a019			jmp Forth
=3					CL	.var *-(WordListLink+wh_Xt)
=$cedb					en = *	; remember here
>ced6	03					.byte CL	;wh_CodeLength
>cedb	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>cee3	72
>cee4	09					.byte *-L1	;wh_NameLength	length of name
>cee5	53 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cee7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cee8	08					.byte NN	;wh_Flags	dictionary flags
=52836					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cee9	4c dd a0	jmp $a0dd			jmp Set_Order
=3					CL	.var *-(WordListLink+wh_Xt)
=$ceec					en = *	; remember here
>cee7	03					.byte CL	;wh_CodeLength
=52836					root_dictionary_start = WordListLink ; END of ROOT-WORDLIST
.ceec					assembler:
=0					WordListLink .var 0
.ceec					asm_r:
.ceec	68		pla			pla		; pop RTS addr
.ceed	a8		tay			tay
.ceee	68		pla			pla
.ceef	20 2e cf	jsr $cf2e		jsr asm_op	; compile opcode
.cef2	b5 25		lda $25,x		lda DStack+1,x	; check range
.cef4	f0 09		beq $ceff		beq _plus
.cef6	c9 ff		cmp #$ff		cmp #$ff
.cef8	f0 0b		beq $cf05		beq _minus
.cefa	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cefc	4c c9 b3	jmp $b3c9		jmp ThrowA
.ceff	b5 24		lda $24,x	_plus:	lda DStack+0,x
.cf01	30 f7		bmi $cefa		bmi _err
.cf03	10 04		bpl $cf09		bpl _store
.cf05	b5 24		lda $24,x	_minus:	lda DStack+0,x
.cf07	10 f1		bpl $cefa		bpl _err
.cf09	4c 06 cc	jmp $cc06	_store:	jmp C_Comma
.cf0c					asm_1:
.cf0c	68		pla			pla		; pop RTS addr
.cf0d	a8		tay			tay
.cf0e	68		pla			pla
.cf0f	20 2e cf	jsr $cf2e		jsr asm_op	; compile opcode
.cf12	b5 25		lda $25,x		lda DStack+1,x	; compile operand
.cf14	f0 04		beq $cf1a		beq _store	;   unsigned byte?
.cf16	c9 ff		cmp #$ff		cmp #$ff	;   signed byte?
.cf18	d0 03		bne $cf1d		bne _err
.cf1a	4c 06 cc	jmp $cc06	_store:	jmp C_Comma
.cf1d	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cf1f	4c c9 b3	jmp $b3c9		jmp ThrowA
.cf22					asm_2:
.cf22	68		pla			pla		; pop RTS addr
.cf23	a8		tay			tay
.cf24	68		pla			pla
.cf25	20 2e cf	jsr $cf2e		jsr asm_op	; compile opcode
.cf28	4c 20 cc	jmp $cc20		jmp Comma	; compile operand
.cf2b					asm_0:
.cf2b	68		pla			pla		; pop RTS addr
.cf2c	a8		tay			tay
.cf2d	68		pla			pla
.cf2e	84 14		sty $14		asm_op:	sty tmp1+0	; save RTS addr
.cf30	85 15		sta $15			sta tmp1+1
.cf32	a0 01		ldy #$01		ldy #1		; get opcode byte
.cf34	b1 14		lda ($14),y		lda (tmp1),y
.cf36	4c 09 cc	jmp $cc09		jmp C_Comma_A	; compile opcode
>cf39	61 64 63 2e 23			L1:	.text "adc.#"	;  name of word as a string, ending at wh_NameLastChar
>cf3e	05					.byte *-L1	;wh_NameLength	length of name
>cf3f	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf41	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf42	08					.byte NN	;wh_Flags	dictionary flags
=52926					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf43	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf46					en = *	; remember here
>cf41	03					.byte CL	;wh_CodeLength
>cf46	69					.byte $69
>cf47	61 64 63 2e 78			L1:	.text "adc.x"	;  name of word as a string, ending at wh_NameLastChar
>cf4c	05					.byte *-L1	;wh_NameLength	length of name
>cf4d	be ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf4f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf50	08					.byte NN	;wh_Flags	dictionary flags
=52940					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf51	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf54					en = *	; remember here
>cf4f	03					.byte CL	;wh_CodeLength
>cf54	7d					.byte $7d
>cf55	61 64 63 2e 79			L1:	.text "adc.y"	;  name of word as a string, ending at wh_NameLastChar
>cf5a	05					.byte *-L1	;wh_NameLength	length of name
>cf5b	cc ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf5d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf5e	08					.byte NN	;wh_Flags	dictionary flags
=52954					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf5f	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf62					en = *	; remember here
>cf5d	03					.byte CL	;wh_CodeLength
>cf62	79					.byte $79
>cf63	61 64 63 2e 7a			L1:	.text "adc.z"	;  name of word as a string, ending at wh_NameLastChar
>cf68	05					.byte *-L1	;wh_NameLength	length of name
>cf69	da ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf6b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf6c	08					.byte NN	;wh_Flags	dictionary flags
=52968					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf6d	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf70					en = *	; remember here
>cf6b	03					.byte CL	;wh_CodeLength
>cf70	65					.byte $65
>cf71	61 64 63 2e 7a 69 79		L1:	.text "adc.ziy"	;  name of word as a string, ending at wh_NameLastChar
>cf78	07					.byte *-L1	;wh_NameLength	length of name
>cf79	e8 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf7b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf7c	08					.byte NN	;wh_Flags	dictionary flags
=52984					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf7d	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf80					en = *	; remember here
>cf7b	03					.byte CL	;wh_CodeLength
>cf80	71					.byte $71
>cf81	61 64 63 2e 7a 78		L1:	.text "adc.zx"	;  name of word as a string, ending at wh_NameLastChar
>cf87	06					.byte *-L1	;wh_NameLength	length of name
>cf88	f8 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf8a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf8b	08					.byte NN	;wh_Flags	dictionary flags
=52999					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf8c	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf8f					en = *	; remember here
>cf8a	03					.byte CL	;wh_CodeLength
>cf8f	75					.byte $75
>cf90	61 64 63 2e 7a 78 69		L1:	.text "adc.zxi"	;  name of word as a string, ending at wh_NameLastChar
>cf97	07					.byte *-L1	;wh_NameLength	length of name
>cf98	07 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf9a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf9b	08					.byte NN	;wh_Flags	dictionary flags
=53015					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf9c	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf9f					en = *	; remember here
>cf9a	03					.byte CL	;wh_CodeLength
>cf9f	61					.byte $61
>cfa0	61 6e 64 2e			L1:	.text "and."	;  name of word as a string, ending at wh_NameLastChar
>cfa4	04					.byte *-L1	;wh_NameLength	length of name
>cfa5	17 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfa7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfa8	08					.byte NN	;wh_Flags	dictionary flags
=53028					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfa9	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfac					en = *	; remember here
>cfa7	03					.byte CL	;wh_CodeLength
>cfac	2d					.byte $2d
>cfad	61 6e 64 2e 23			L1:	.text "and.#"	;  name of word as a string, ending at wh_NameLastChar
>cfb2	05					.byte *-L1	;wh_NameLength	length of name
>cfb3	24 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfb5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfb6	08					.byte NN	;wh_Flags	dictionary flags
=53042					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfb7	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfba					en = *	; remember here
>cfb5	03					.byte CL	;wh_CodeLength
>cfba	29					.byte $29
>cfbb	61 6e 64 2e 78			L1:	.text "and.x"	;  name of word as a string, ending at wh_NameLastChar
>cfc0	05					.byte *-L1	;wh_NameLength	length of name
>cfc1	32 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfc3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfc4	08					.byte NN	;wh_Flags	dictionary flags
=53056					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfc5	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfc8					en = *	; remember here
>cfc3	03					.byte CL	;wh_CodeLength
>cfc8	3d					.byte $3d
>cfc9	61 6e 64 2e 79			L1:	.text "and.y"	;  name of word as a string, ending at wh_NameLastChar
>cfce	05					.byte *-L1	;wh_NameLength	length of name
>cfcf	40 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfd1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfd2	08					.byte NN	;wh_Flags	dictionary flags
=53070					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfd3	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfd6					en = *	; remember here
>cfd1	03					.byte CL	;wh_CodeLength
>cfd6	39					.byte $39
>cfd7	61 6e 64 2e 7a			L1:	.text "and.z"	;  name of word as a string, ending at wh_NameLastChar
>cfdc	05					.byte *-L1	;wh_NameLength	length of name
>cfdd	4e cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfdf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfe0	08					.byte NN	;wh_Flags	dictionary flags
=53084					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfe1	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfe4					en = *	; remember here
>cfdf	03					.byte CL	;wh_CodeLength
>cfe4	25					.byte $25
>cfe5	61 6e 64 2e 7a 69 79		L1:	.text "and.ziy"	;  name of word as a string, ending at wh_NameLastChar
>cfec	07					.byte *-L1	;wh_NameLength	length of name
>cfed	5c cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfef	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cff0	08					.byte NN	;wh_Flags	dictionary flags
=53100					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cff1	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cff4					en = *	; remember here
>cfef	03					.byte CL	;wh_CodeLength
>cff4	31					.byte $31
>cff5	61 6e 64 2e 7a 78		L1:	.text "and.zx"	;  name of word as a string, ending at wh_NameLastChar
>cffb	06					.byte *-L1	;wh_NameLength	length of name
>cffc	6c cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cffe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfff	08					.byte NN	;wh_Flags	dictionary flags
=53115					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d000	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d003					en = *	; remember here
>cffe	03					.byte CL	;wh_CodeLength
>d003	35					.byte $35
>d004	61 6e 64 2e 7a 78 69		L1:	.text "and.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d00b	07					.byte *-L1	;wh_NameLength	length of name
>d00c	7b cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d00e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d00f	08					.byte NN	;wh_Flags	dictionary flags
=53131					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d010	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d013					en = *	; remember here
>d00e	03					.byte CL	;wh_CodeLength
>d013	21					.byte $21
>d014	61 73 6c			L1:	.text "asl"	;  name of word as a string, ending at wh_NameLastChar
>d017	03					.byte *-L1	;wh_NameLength	length of name
>d018	8b cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d01a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d01b	08					.byte NN	;wh_Flags	dictionary flags
=53143					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d01c	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d01f					en = *	; remember here
>d01a	03					.byte CL	;wh_CodeLength
>d01f	0e					.byte $0e
>d020	61 73 6c 2e 61			L1:	.text "asl.a"	;  name of word as a string, ending at wh_NameLastChar
>d025	05					.byte *-L1	;wh_NameLength	length of name
>d026	97 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d028	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d029	08					.byte NN	;wh_Flags	dictionary flags
=53157					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d02a	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d02d					en = *	; remember here
>d028	03					.byte CL	;wh_CodeLength
>d02d	0a					.byte $0a
>d02e	61 73 6c 2e 78			L1:	.text "asl.x"	;  name of word as a string, ending at wh_NameLastChar
>d033	05					.byte *-L1	;wh_NameLength	length of name
>d034	a5 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d036	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d037	08					.byte NN	;wh_Flags	dictionary flags
=53171					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d038	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d03b					en = *	; remember here
>d036	03					.byte CL	;wh_CodeLength
>d03b	1e					.byte $1e
>d03c	61 73 6c 2e 7a			L1:	.text "asl.z"	;  name of word as a string, ending at wh_NameLastChar
>d041	05					.byte *-L1	;wh_NameLength	length of name
>d042	b3 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d044	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d045	08					.byte NN	;wh_Flags	dictionary flags
=53185					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d046	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d049					en = *	; remember here
>d044	03					.byte CL	;wh_CodeLength
>d049	06					.byte $06
>d04a	61 73 6c 2e 7a 78		L1:	.text "asl.zx"	;  name of word as a string, ending at wh_NameLastChar
>d050	06					.byte *-L1	;wh_NameLength	length of name
>d051	c1 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d053	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d054	08					.byte NN	;wh_Flags	dictionary flags
=53200					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d055	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d058					en = *	; remember here
>d053	03					.byte CL	;wh_CodeLength
>d058	16					.byte $16
>d059	62 63 63			L1:	.text "bcc"	;  name of word as a string, ending at wh_NameLastChar
>d05c	03					.byte *-L1	;wh_NameLength	length of name
>d05d	d0 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d05f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d060	08					.byte NN	;wh_Flags	dictionary flags
=53212					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d061	20 ec ce	jsr $ceec		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d064					en = *	; remember here
>d05f	03					.byte CL	;wh_CodeLength
>d064	90					.byte $90
>d065	62 63 73			L1:	.text "bcs"	;  name of word as a string, ending at wh_NameLastChar
>d068	03					.byte *-L1	;wh_NameLength	length of name
>d069	dc cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d06b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d06c	08					.byte NN	;wh_Flags	dictionary flags
=53224					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d06d	20 ec ce	jsr $ceec		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d070					en = *	; remember here
>d06b	03					.byte CL	;wh_CodeLength
>d070	b0					.byte $b0
>d071	62 65 71			L1:	.text "beq"	;  name of word as a string, ending at wh_NameLastChar
>d074	03					.byte *-L1	;wh_NameLength	length of name
>d075	e8 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d077	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d078	08					.byte NN	;wh_Flags	dictionary flags
=53236					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d079	20 ec ce	jsr $ceec		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d07c					en = *	; remember here
>d077	03					.byte CL	;wh_CodeLength
>d07c	f0					.byte $f0
>d07d	62 69 74			L1:	.text "bit"	;  name of word as a string, ending at wh_NameLastChar
>d080	03					.byte *-L1	;wh_NameLength	length of name
>d081	f4 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d083	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d084	08					.byte NN	;wh_Flags	dictionary flags
=53248					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d085	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d088					en = *	; remember here
>d083	03					.byte CL	;wh_CodeLength
>d088	2c					.byte $2c
>d089	62 69 74 2e 7a			L1:	.text "bit.z"	;  name of word as a string, ending at wh_NameLastChar
>d08e	05					.byte *-L1	;wh_NameLength	length of name
>d08f	00 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d091	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d092	08					.byte NN	;wh_Flags	dictionary flags
=53262					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d093	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d096					en = *	; remember here
>d091	03					.byte CL	;wh_CodeLength
>d096	24					.byte $24
>d097	62 6d 69			L1:	.text "bmi"	;  name of word as a string, ending at wh_NameLastChar
>d09a	03					.byte *-L1	;wh_NameLength	length of name
>d09b	0e d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d09d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d09e	08					.byte NN	;wh_Flags	dictionary flags
=53274					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d09f	20 ec ce	jsr $ceec		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0a2					en = *	; remember here
>d09d	03					.byte CL	;wh_CodeLength
>d0a2	30					.byte $30
>d0a3	62 6e 65			L1:	.text "bne"	;  name of word as a string, ending at wh_NameLastChar
>d0a6	03					.byte *-L1	;wh_NameLength	length of name
>d0a7	1a d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0a9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0aa	08					.byte NN	;wh_Flags	dictionary flags
=53286					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0ab	20 ec ce	jsr $ceec		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0ae					en = *	; remember here
>d0a9	03					.byte CL	;wh_CodeLength
>d0ae	d0					.byte $d0
>d0af	62 70 6c			L1:	.text "bpl"	;  name of word as a string, ending at wh_NameLastChar
>d0b2	03					.byte *-L1	;wh_NameLength	length of name
>d0b3	26 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0b5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0b6	08					.byte NN	;wh_Flags	dictionary flags
=53298					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0b7	20 ec ce	jsr $ceec		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0ba					en = *	; remember here
>d0b5	03					.byte CL	;wh_CodeLength
>d0ba	10					.byte $10
>d0bb	62 72 6b			L1:	.text "brk"	;  name of word as a string, ending at wh_NameLastChar
>d0be	03					.byte *-L1	;wh_NameLength	length of name
>d0bf	32 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0c2	08					.byte NN	;wh_Flags	dictionary flags
=53310					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0c3	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0c6					en = *	; remember here
>d0c1	03					.byte CL	;wh_CodeLength
>d0c6	00					.byte $00
>d0c7	62 76 63			L1:	.text "bvc"	;  name of word as a string, ending at wh_NameLastChar
>d0ca	03					.byte *-L1	;wh_NameLength	length of name
>d0cb	3e d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0ce	08					.byte NN	;wh_Flags	dictionary flags
=53322					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0cf	20 ec ce	jsr $ceec		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0d2					en = *	; remember here
>d0cd	03					.byte CL	;wh_CodeLength
>d0d2	50					.byte $50
>d0d3	62 76 73			L1:	.text "bvs"	;  name of word as a string, ending at wh_NameLastChar
>d0d6	03					.byte *-L1	;wh_NameLength	length of name
>d0d7	4a d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0d9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0da	08					.byte NN	;wh_Flags	dictionary flags
=53334					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0db	20 ec ce	jsr $ceec		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0de					en = *	; remember here
>d0d9	03					.byte CL	;wh_CodeLength
>d0de	70					.byte $70
>d0df	63 6c 63			L1:	.text "clc"	;  name of word as a string, ending at wh_NameLastChar
>d0e2	03					.byte *-L1	;wh_NameLength	length of name
>d0e3	56 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0e5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0e6	08					.byte NN	;wh_Flags	dictionary flags
=53346					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0e7	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0ea					en = *	; remember here
>d0e5	03					.byte CL	;wh_CodeLength
>d0ea	18					.byte $18
>d0eb	63 6c 64			L1:	.text "cld"	;  name of word as a string, ending at wh_NameLastChar
>d0ee	03					.byte *-L1	;wh_NameLength	length of name
>d0ef	62 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0f1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0f2	08					.byte NN	;wh_Flags	dictionary flags
=53358					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0f3	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0f6					en = *	; remember here
>d0f1	03					.byte CL	;wh_CodeLength
>d0f6	d8					.byte $d8
>d0f7	63 6c 69			L1:	.text "cli"	;  name of word as a string, ending at wh_NameLastChar
>d0fa	03					.byte *-L1	;wh_NameLength	length of name
>d0fb	6e d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0fd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0fe	08					.byte NN	;wh_Flags	dictionary flags
=53370					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0ff	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d102					en = *	; remember here
>d0fd	03					.byte CL	;wh_CodeLength
>d102	58					.byte $58
>d103	63 6c 76			L1:	.text "clv"	;  name of word as a string, ending at wh_NameLastChar
>d106	03					.byte *-L1	;wh_NameLength	length of name
>d107	7a d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d109	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d10a	08					.byte NN	;wh_Flags	dictionary flags
=53382					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d10b	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d10e					en = *	; remember here
>d109	03					.byte CL	;wh_CodeLength
>d10e	b8					.byte $b8
>d10f	63 6d 70			L1:	.text "cmp"	;  name of word as a string, ending at wh_NameLastChar
>d112	03					.byte *-L1	;wh_NameLength	length of name
>d113	86 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d115	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d116	08					.byte NN	;wh_Flags	dictionary flags
=53394					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d117	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d11a					en = *	; remember here
>d115	03					.byte CL	;wh_CodeLength
>d11a	cd					.byte $cd
>d11b	63 6d 70 2e 23			L1:	.text "cmp.#"	;  name of word as a string, ending at wh_NameLastChar
>d120	05					.byte *-L1	;wh_NameLength	length of name
>d121	92 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d123	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d124	08					.byte NN	;wh_Flags	dictionary flags
=53408					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d125	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d128					en = *	; remember here
>d123	03					.byte CL	;wh_CodeLength
>d128	c9					.byte $c9
>d129	63 6d 70 2e 78			L1:	.text "cmp.x"	;  name of word as a string, ending at wh_NameLastChar
>d12e	05					.byte *-L1	;wh_NameLength	length of name
>d12f	a0 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d131	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d132	08					.byte NN	;wh_Flags	dictionary flags
=53422					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d133	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d136					en = *	; remember here
>d131	03					.byte CL	;wh_CodeLength
>d136	dd					.byte $dd
>d137	63 6d 70 2e 79			L1:	.text "cmp.y"	;  name of word as a string, ending at wh_NameLastChar
>d13c	05					.byte *-L1	;wh_NameLength	length of name
>d13d	ae d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d13f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d140	08					.byte NN	;wh_Flags	dictionary flags
=53436					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d141	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d144					en = *	; remember here
>d13f	03					.byte CL	;wh_CodeLength
>d144	d9					.byte $d9
>d145	63 6d 70 2e 7a			L1:	.text "cmp.z"	;  name of word as a string, ending at wh_NameLastChar
>d14a	05					.byte *-L1	;wh_NameLength	length of name
>d14b	bc d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d14d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d14e	08					.byte NN	;wh_Flags	dictionary flags
=53450					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d14f	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d152					en = *	; remember here
>d14d	03					.byte CL	;wh_CodeLength
>d152	c5					.byte $c5
>d153	63 6d 70 2e 7a 69 79		L1:	.text "cmp.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d15a	07					.byte *-L1	;wh_NameLength	length of name
>d15b	ca d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d15d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d15e	08					.byte NN	;wh_Flags	dictionary flags
=53466					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d15f	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d162					en = *	; remember here
>d15d	03					.byte CL	;wh_CodeLength
>d162	d1					.byte $d1
>d163	63 6d 70 2e 7a 78		L1:	.text "cmp.zx"	;  name of word as a string, ending at wh_NameLastChar
>d169	06					.byte *-L1	;wh_NameLength	length of name
>d16a	da d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d16c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d16d	08					.byte NN	;wh_Flags	dictionary flags
=53481					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d16e	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d171					en = *	; remember here
>d16c	03					.byte CL	;wh_CodeLength
>d171	d5					.byte $d5
>d172	63 6d 70 2e 7a 78 69		L1:	.text "cmp.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d179	07					.byte *-L1	;wh_NameLength	length of name
>d17a	e9 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d17c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d17d	08					.byte NN	;wh_Flags	dictionary flags
=53497					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d17e	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d181					en = *	; remember here
>d17c	03					.byte CL	;wh_CodeLength
>d181	c1					.byte $c1
>d182	63 70 78			L1:	.text "cpx"	;  name of word as a string, ending at wh_NameLastChar
>d185	03					.byte *-L1	;wh_NameLength	length of name
>d186	f9 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d188	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d189	08					.byte NN	;wh_Flags	dictionary flags
=53509					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d18a	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d18d					en = *	; remember here
>d188	03					.byte CL	;wh_CodeLength
>d18d	ec					.byte $ec
>d18e	63 70 78 2e 23			L1:	.text "cpx.#"	;  name of word as a string, ending at wh_NameLastChar
>d193	05					.byte *-L1	;wh_NameLength	length of name
>d194	05 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d196	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d197	08					.byte NN	;wh_Flags	dictionary flags
=53523					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d198	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d19b					en = *	; remember here
>d196	03					.byte CL	;wh_CodeLength
>d19b	e0					.byte $e0
>d19c	63 70 78 2e 7a			L1:	.text "cpx.z"	;  name of word as a string, ending at wh_NameLastChar
>d1a1	05					.byte *-L1	;wh_NameLength	length of name
>d1a2	13 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1a4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1a5	08					.byte NN	;wh_Flags	dictionary flags
=53537					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1a6	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1a9					en = *	; remember here
>d1a4	03					.byte CL	;wh_CodeLength
>d1a9	e4					.byte $e4
>d1aa	63 70 79			L1:	.text "cpy"	;  name of word as a string, ending at wh_NameLastChar
>d1ad	03					.byte *-L1	;wh_NameLength	length of name
>d1ae	21 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1b0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1b1	08					.byte NN	;wh_Flags	dictionary flags
=53549					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1b2	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1b5					en = *	; remember here
>d1b0	03					.byte CL	;wh_CodeLength
>d1b5	cc					.byte $cc
>d1b6	63 70 79 2e 23			L1:	.text "cpy.#"	;  name of word as a string, ending at wh_NameLastChar
>d1bb	05					.byte *-L1	;wh_NameLength	length of name
>d1bc	2d d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1bf	08					.byte NN	;wh_Flags	dictionary flags
=53563					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1c0	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1c3					en = *	; remember here
>d1be	03					.byte CL	;wh_CodeLength
>d1c3	c0					.byte $c0
>d1c4	63 70 79 2e 7a			L1:	.text "cpy.z"	;  name of word as a string, ending at wh_NameLastChar
>d1c9	05					.byte *-L1	;wh_NameLength	length of name
>d1ca	3b d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1cd	08					.byte NN	;wh_Flags	dictionary flags
=53577					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1ce	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1d1					en = *	; remember here
>d1cc	03					.byte CL	;wh_CodeLength
>d1d1	c4					.byte $c4
>d1d2	64 65 63			L1:	.text "dec"	;  name of word as a string, ending at wh_NameLastChar
>d1d5	03					.byte *-L1	;wh_NameLength	length of name
>d1d6	49 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1d8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1d9	08					.byte NN	;wh_Flags	dictionary flags
=53589					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1da	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1dd					en = *	; remember here
>d1d8	03					.byte CL	;wh_CodeLength
>d1dd	ce					.byte $ce
>d1de	64 65 63 2e 61			L1:	.text "dec.a"	;  name of word as a string, ending at wh_NameLastChar
>d1e3	05					.byte *-L1	;wh_NameLength	length of name
>d1e4	55 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1e6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1e7	08					.byte NN	;wh_Flags	dictionary flags
=53603					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1e8	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1eb					en = *	; remember here
>d1e6	03					.byte CL	;wh_CodeLength
>d1eb	3a					.byte $3a
>d1ec	64 65 63 2e 78			L1:	.text "dec.x"	;  name of word as a string, ending at wh_NameLastChar
>d1f1	05					.byte *-L1	;wh_NameLength	length of name
>d1f2	63 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1f4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1f5	08					.byte NN	;wh_Flags	dictionary flags
=53617					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1f6	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1f9					en = *	; remember here
>d1f4	03					.byte CL	;wh_CodeLength
>d1f9	de					.byte $de
>d1fa	64 65 63 2e 7a			L1:	.text "dec.z"	;  name of word as a string, ending at wh_NameLastChar
>d1ff	05					.byte *-L1	;wh_NameLength	length of name
>d200	71 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d202	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d203	08					.byte NN	;wh_Flags	dictionary flags
=53631					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d204	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d207					en = *	; remember here
>d202	03					.byte CL	;wh_CodeLength
>d207	c6					.byte $c6
>d208	64 65 63 2e 7a 78		L1:	.text "dec.zx"	;  name of word as a string, ending at wh_NameLastChar
>d20e	06					.byte *-L1	;wh_NameLength	length of name
>d20f	7f d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d211	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d212	08					.byte NN	;wh_Flags	dictionary flags
=53646					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d213	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d216					en = *	; remember here
>d211	03					.byte CL	;wh_CodeLength
>d216	d6					.byte $d6
>d217	64 65 78			L1:	.text "dex"	;  name of word as a string, ending at wh_NameLastChar
>d21a	03					.byte *-L1	;wh_NameLength	length of name
>d21b	8e d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d21d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d21e	08					.byte NN	;wh_Flags	dictionary flags
=53658					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d21f	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d222					en = *	; remember here
>d21d	03					.byte CL	;wh_CodeLength
>d222	ca					.byte $ca
>d223	64 65 79			L1:	.text "dey"	;  name of word as a string, ending at wh_NameLastChar
>d226	03					.byte *-L1	;wh_NameLength	length of name
>d227	9a d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d229	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d22a	08					.byte NN	;wh_Flags	dictionary flags
=53670					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d22b	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d22e					en = *	; remember here
>d229	03					.byte CL	;wh_CodeLength
>d22e	88					.byte $88
>d22f	65 6f 72			L1:	.text "eor"	;  name of word as a string, ending at wh_NameLastChar
>d232	03					.byte *-L1	;wh_NameLength	length of name
>d233	a6 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d235	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d236	08					.byte NN	;wh_Flags	dictionary flags
=53682					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d237	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d23a					en = *	; remember here
>d235	03					.byte CL	;wh_CodeLength
>d23a	4d					.byte $4d
>d23b	65 6f 72 2e 23			L1:	.text "eor.#"	;  name of word as a string, ending at wh_NameLastChar
>d240	05					.byte *-L1	;wh_NameLength	length of name
>d241	b2 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d243	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d244	08					.byte NN	;wh_Flags	dictionary flags
=53696					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d245	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d248					en = *	; remember here
>d243	03					.byte CL	;wh_CodeLength
>d248	49					.byte $49
>d249	65 6f 72 2e 78			L1:	.text "eor.x"	;  name of word as a string, ending at wh_NameLastChar
>d24e	05					.byte *-L1	;wh_NameLength	length of name
>d24f	c0 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d251	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d252	08					.byte NN	;wh_Flags	dictionary flags
=53710					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d253	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d256					en = *	; remember here
>d251	03					.byte CL	;wh_CodeLength
>d256	5d					.byte $5d
>d257	65 6f 72 2e 79			L1:	.text "eor.y"	;  name of word as a string, ending at wh_NameLastChar
>d25c	05					.byte *-L1	;wh_NameLength	length of name
>d25d	ce d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d25f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d260	08					.byte NN	;wh_Flags	dictionary flags
=53724					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d261	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d264					en = *	; remember here
>d25f	03					.byte CL	;wh_CodeLength
>d264	59					.byte $59
>d265	65 6f 72 2e 7a			L1:	.text "eor.z"	;  name of word as a string, ending at wh_NameLastChar
>d26a	05					.byte *-L1	;wh_NameLength	length of name
>d26b	dc d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d26d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d26e	08					.byte NN	;wh_Flags	dictionary flags
=53738					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d26f	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d272					en = *	; remember here
>d26d	03					.byte CL	;wh_CodeLength
>d272	45					.byte $45
>d273	65 6f 72 2e 7a 69 79		L1:	.text "eor.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d27a	07					.byte *-L1	;wh_NameLength	length of name
>d27b	ea d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d27d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d27e	08					.byte NN	;wh_Flags	dictionary flags
=53754					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d27f	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d282					en = *	; remember here
>d27d	03					.byte CL	;wh_CodeLength
>d282	51					.byte $51
>d283	65 6f 72 2e 7a 78		L1:	.text "eor.zx"	;  name of word as a string, ending at wh_NameLastChar
>d289	06					.byte *-L1	;wh_NameLength	length of name
>d28a	fa d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d28c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d28d	08					.byte NN	;wh_Flags	dictionary flags
=53769					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d28e	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d291					en = *	; remember here
>d28c	03					.byte CL	;wh_CodeLength
>d291	55					.byte $55
>d292	65 6f 72 2e 7a 78 69		L1:	.text "eor.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d299	07					.byte *-L1	;wh_NameLength	length of name
>d29a	09 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d29c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d29d	08					.byte NN	;wh_Flags	dictionary flags
=53785					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d29e	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2a1					en = *	; remember here
>d29c	03					.byte CL	;wh_CodeLength
>d2a1	41					.byte $41
>d2a2	69 6e 63			L1:	.text "inc"	;  name of word as a string, ending at wh_NameLastChar
>d2a5	03					.byte *-L1	;wh_NameLength	length of name
>d2a6	19 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2a8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2a9	08					.byte NN	;wh_Flags	dictionary flags
=53797					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2aa	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2ad					en = *	; remember here
>d2a8	03					.byte CL	;wh_CodeLength
>d2ad	ee					.byte $ee
>d2ae	69 6e 63 2e 61			L1:	.text "inc.a"	;  name of word as a string, ending at wh_NameLastChar
>d2b3	05					.byte *-L1	;wh_NameLength	length of name
>d2b4	25 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2b6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2b7	08					.byte NN	;wh_Flags	dictionary flags
=53811					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2b8	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2bb					en = *	; remember here
>d2b6	03					.byte CL	;wh_CodeLength
>d2bb	1a					.byte $1a
>d2bc	69 6e 63 2e 78			L1:	.text "inc.x"	;  name of word as a string, ending at wh_NameLastChar
>d2c1	05					.byte *-L1	;wh_NameLength	length of name
>d2c2	33 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2c4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2c5	08					.byte NN	;wh_Flags	dictionary flags
=53825					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2c6	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2c9					en = *	; remember here
>d2c4	03					.byte CL	;wh_CodeLength
>d2c9	fe					.byte $fe
>d2ca	69 6e 63 2e 7a			L1:	.text "inc.z"	;  name of word as a string, ending at wh_NameLastChar
>d2cf	05					.byte *-L1	;wh_NameLength	length of name
>d2d0	41 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2d3	08					.byte NN	;wh_Flags	dictionary flags
=53839					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2d4	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2d7					en = *	; remember here
>d2d2	03					.byte CL	;wh_CodeLength
>d2d7	e6					.byte $e6
>d2d8	69 6e 63 2e 7a 78		L1:	.text "inc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d2de	06					.byte *-L1	;wh_NameLength	length of name
>d2df	4f d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2e2	08					.byte NN	;wh_Flags	dictionary flags
=53854					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2e3	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2e6					en = *	; remember here
>d2e1	03					.byte CL	;wh_CodeLength
>d2e6	f6					.byte $f6
>d2e7	69 6e 78			L1:	.text "inx"	;  name of word as a string, ending at wh_NameLastChar
>d2ea	03					.byte *-L1	;wh_NameLength	length of name
>d2eb	5e d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2ed	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2ee	08					.byte NN	;wh_Flags	dictionary flags
=53866					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2ef	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2f2					en = *	; remember here
>d2ed	03					.byte CL	;wh_CodeLength
>d2f2	e8					.byte $e8
>d2f3	69 6e 79			L1:	.text "iny"	;  name of word as a string, ending at wh_NameLastChar
>d2f6	03					.byte *-L1	;wh_NameLength	length of name
>d2f7	6a d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2f9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2fa	08					.byte NN	;wh_Flags	dictionary flags
=53878					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2fb	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2fe					en = *	; remember here
>d2f9	03					.byte CL	;wh_CodeLength
>d2fe	c8					.byte $c8
>d2ff	6a 6d 70			L1:	.text "jmp"	;  name of word as a string, ending at wh_NameLastChar
>d302	03					.byte *-L1	;wh_NameLength	length of name
>d303	76 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d305	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d306	08					.byte NN	;wh_Flags	dictionary flags
=53890					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d307	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d30a					en = *	; remember here
>d305	03					.byte CL	;wh_CodeLength
>d30a	4c					.byte $4c
>d30b	6a 6d 70 2e 69			L1:	.text "jmp.i"	;  name of word as a string, ending at wh_NameLastChar
>d310	05					.byte *-L1	;wh_NameLength	length of name
>d311	82 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d313	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d314	08					.byte NN	;wh_Flags	dictionary flags
=53904					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d315	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d318					en = *	; remember here
>d313	03					.byte CL	;wh_CodeLength
>d318	6c					.byte $6c
>d319	6a 73 72			L1:	.text "jsr"	;  name of word as a string, ending at wh_NameLastChar
>d31c	03					.byte *-L1	;wh_NameLength	length of name
>d31d	90 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d31f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d320	08					.byte NN	;wh_Flags	dictionary flags
=53916					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d321	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d324					en = *	; remember here
>d31f	03					.byte CL	;wh_CodeLength
>d324	20					.byte $20
>d325	6c 64 61			L1:	.text "lda"	;  name of word as a string, ending at wh_NameLastChar
>d328	03					.byte *-L1	;wh_NameLength	length of name
>d329	9c d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d32b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d32c	08					.byte NN	;wh_Flags	dictionary flags
=53928					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d32d	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d330					en = *	; remember here
>d32b	03					.byte CL	;wh_CodeLength
>d330	ad					.byte $ad
>d331	6c 64 61 2e 23			L1:	.text "lda.#"	;  name of word as a string, ending at wh_NameLastChar
>d336	05					.byte *-L1	;wh_NameLength	length of name
>d337	a8 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d339	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d33a	08					.byte NN	;wh_Flags	dictionary flags
=53942					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d33b	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d33e					en = *	; remember here
>d339	03					.byte CL	;wh_CodeLength
>d33e	a9					.byte $a9
>d33f	6c 64 61 2e 78			L1:	.text "lda.x"	;  name of word as a string, ending at wh_NameLastChar
>d344	05					.byte *-L1	;wh_NameLength	length of name
>d345	b6 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d347	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d348	08					.byte NN	;wh_Flags	dictionary flags
=53956					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d349	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d34c					en = *	; remember here
>d347	03					.byte CL	;wh_CodeLength
>d34c	bd					.byte $bd
>d34d	6c 64 61 2e 79			L1:	.text "lda.y"	;  name of word as a string, ending at wh_NameLastChar
>d352	05					.byte *-L1	;wh_NameLength	length of name
>d353	c4 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d355	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d356	08					.byte NN	;wh_Flags	dictionary flags
=53970					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d357	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d35a					en = *	; remember here
>d355	03					.byte CL	;wh_CodeLength
>d35a	b9					.byte $b9
>d35b	6c 64 61 2e 7a			L1:	.text "lda.z"	;  name of word as a string, ending at wh_NameLastChar
>d360	05					.byte *-L1	;wh_NameLength	length of name
>d361	d2 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d363	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d364	08					.byte NN	;wh_Flags	dictionary flags
=53984					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d365	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d368					en = *	; remember here
>d363	03					.byte CL	;wh_CodeLength
>d368	a5					.byte $a5
>d369	6c 64 61 2e 7a 69 79		L1:	.text "lda.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d370	07					.byte *-L1	;wh_NameLength	length of name
>d371	e0 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d373	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d374	08					.byte NN	;wh_Flags	dictionary flags
=54000					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d375	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d378					en = *	; remember here
>d373	03					.byte CL	;wh_CodeLength
>d378	b1					.byte $b1
>d379	6c 64 61 2e 7a 78		L1:	.text "lda.zx"	;  name of word as a string, ending at wh_NameLastChar
>d37f	06					.byte *-L1	;wh_NameLength	length of name
>d380	f0 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d382	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d383	08					.byte NN	;wh_Flags	dictionary flags
=54015					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d384	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d387					en = *	; remember here
>d382	03					.byte CL	;wh_CodeLength
>d387	b5					.byte $b5
>d388	6c 64 61 2e 7a 78 69		L1:	.text "lda.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d38f	07					.byte *-L1	;wh_NameLength	length of name
>d390	ff d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d392	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d393	08					.byte NN	;wh_Flags	dictionary flags
=54031					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d394	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d397					en = *	; remember here
>d392	03					.byte CL	;wh_CodeLength
>d397	a1					.byte $a1
>d398	6c 64 78			L1:	.text "ldx"	;  name of word as a string, ending at wh_NameLastChar
>d39b	03					.byte *-L1	;wh_NameLength	length of name
>d39c	0f d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d39e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d39f	08					.byte NN	;wh_Flags	dictionary flags
=54043					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3a0	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3a3					en = *	; remember here
>d39e	03					.byte CL	;wh_CodeLength
>d3a3	ae					.byte $ae
>d3a4	6c 64 78 2e 23			L1:	.text "ldx.#"	;  name of word as a string, ending at wh_NameLastChar
>d3a9	05					.byte *-L1	;wh_NameLength	length of name
>d3aa	1b d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3ac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3ad	08					.byte NN	;wh_Flags	dictionary flags
=54057					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3ae	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3b1					en = *	; remember here
>d3ac	03					.byte CL	;wh_CodeLength
>d3b1	a2					.byte $a2
>d3b2	6c 64 78 2e 79			L1:	.text "ldx.y"	;  name of word as a string, ending at wh_NameLastChar
>d3b7	05					.byte *-L1	;wh_NameLength	length of name
>d3b8	29 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3ba	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3bb	08					.byte NN	;wh_Flags	dictionary flags
=54071					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3bc	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3bf					en = *	; remember here
>d3ba	03					.byte CL	;wh_CodeLength
>d3bf	be					.byte $be
>d3c0	6c 64 78 2e 7a			L1:	.text "ldx.z"	;  name of word as a string, ending at wh_NameLastChar
>d3c5	05					.byte *-L1	;wh_NameLength	length of name
>d3c6	37 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3c8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3c9	08					.byte NN	;wh_Flags	dictionary flags
=54085					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3ca	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3cd					en = *	; remember here
>d3c8	03					.byte CL	;wh_CodeLength
>d3cd	a6					.byte $a6
>d3ce	6c 64 78 2e 7a 79		L1:	.text "ldx.zy"	;  name of word as a string, ending at wh_NameLastChar
>d3d4	06					.byte *-L1	;wh_NameLength	length of name
>d3d5	45 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3d7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3d8	08					.byte NN	;wh_Flags	dictionary flags
=54100					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3d9	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3dc					en = *	; remember here
>d3d7	03					.byte CL	;wh_CodeLength
>d3dc	b6					.byte $b6
>d3dd	6c 64 79			L1:	.text "ldy"	;  name of word as a string, ending at wh_NameLastChar
>d3e0	03					.byte *-L1	;wh_NameLength	length of name
>d3e1	54 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3e3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3e4	08					.byte NN	;wh_Flags	dictionary flags
=54112					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3e5	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3e8					en = *	; remember here
>d3e3	03					.byte CL	;wh_CodeLength
>d3e8	ac					.byte $ac
>d3e9	6c 64 79 2e 23			L1:	.text "ldy.#"	;  name of word as a string, ending at wh_NameLastChar
>d3ee	05					.byte *-L1	;wh_NameLength	length of name
>d3ef	60 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3f1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3f2	08					.byte NN	;wh_Flags	dictionary flags
=54126					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3f3	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3f6					en = *	; remember here
>d3f1	03					.byte CL	;wh_CodeLength
>d3f6	a0					.byte $a0
>d3f7	6c 64 79 2e 78			L1:	.text "ldy.x"	;  name of word as a string, ending at wh_NameLastChar
>d3fc	05					.byte *-L1	;wh_NameLength	length of name
>d3fd	6e d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3ff	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d400	08					.byte NN	;wh_Flags	dictionary flags
=54140					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d401	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d404					en = *	; remember here
>d3ff	03					.byte CL	;wh_CodeLength
>d404	bc					.byte $bc
>d405	6c 64 79 2e 7a			L1:	.text "ldy.z"	;  name of word as a string, ending at wh_NameLastChar
>d40a	05					.byte *-L1	;wh_NameLength	length of name
>d40b	7c d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d40d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d40e	08					.byte NN	;wh_Flags	dictionary flags
=54154					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d40f	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d412					en = *	; remember here
>d40d	03					.byte CL	;wh_CodeLength
>d412	a4					.byte $a4
>d413	6c 64 79 2e 7a 78		L1:	.text "ldy.zx"	;  name of word as a string, ending at wh_NameLastChar
>d419	06					.byte *-L1	;wh_NameLength	length of name
>d41a	8a d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d41c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d41d	08					.byte NN	;wh_Flags	dictionary flags
=54169					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d41e	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d421					en = *	; remember here
>d41c	03					.byte CL	;wh_CodeLength
>d421	b4					.byte $b4
>d422	6c 73 72			L1:	.text "lsr"	;  name of word as a string, ending at wh_NameLastChar
>d425	03					.byte *-L1	;wh_NameLength	length of name
>d426	99 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d428	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d429	08					.byte NN	;wh_Flags	dictionary flags
=54181					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d42a	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d42d					en = *	; remember here
>d428	03					.byte CL	;wh_CodeLength
>d42d	4e					.byte $4e
>d42e	6c 73 72 2e 61			L1:	.text "lsr.a"	;  name of word as a string, ending at wh_NameLastChar
>d433	05					.byte *-L1	;wh_NameLength	length of name
>d434	a5 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d436	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d437	08					.byte NN	;wh_Flags	dictionary flags
=54195					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d438	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d43b					en = *	; remember here
>d436	03					.byte CL	;wh_CodeLength
>d43b	4a					.byte $4a
>d43c	6c 73 72 2e 78			L1:	.text "lsr.x"	;  name of word as a string, ending at wh_NameLastChar
>d441	05					.byte *-L1	;wh_NameLength	length of name
>d442	b3 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d444	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d445	08					.byte NN	;wh_Flags	dictionary flags
=54209					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d446	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d449					en = *	; remember here
>d444	03					.byte CL	;wh_CodeLength
>d449	5e					.byte $5e
>d44a	6c 73 72 2e 7a			L1:	.text "lsr.z"	;  name of word as a string, ending at wh_NameLastChar
>d44f	05					.byte *-L1	;wh_NameLength	length of name
>d450	c1 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d452	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d453	08					.byte NN	;wh_Flags	dictionary flags
=54223					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d454	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d457					en = *	; remember here
>d452	03					.byte CL	;wh_CodeLength
>d457	46					.byte $46
>d458	6c 73 72 2e 7a 78		L1:	.text "lsr.zx"	;  name of word as a string, ending at wh_NameLastChar
>d45e	06					.byte *-L1	;wh_NameLength	length of name
>d45f	cf d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d461	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d462	08					.byte NN	;wh_Flags	dictionary flags
=54238					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d463	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d466					en = *	; remember here
>d461	03					.byte CL	;wh_CodeLength
>d466	56					.byte $56
>d467	6e 6f 70			L1:	.text "nop"	;  name of word as a string, ending at wh_NameLastChar
>d46a	03					.byte *-L1	;wh_NameLength	length of name
>d46b	de d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d46d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d46e	08					.byte NN	;wh_Flags	dictionary flags
=54250					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d46f	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d472					en = *	; remember here
>d46d	03					.byte CL	;wh_CodeLength
>d472	ea					.byte $ea
>d473	6f 72 61			L1:	.text "ora"	;  name of word as a string, ending at wh_NameLastChar
>d476	03					.byte *-L1	;wh_NameLength	length of name
>d477	ea d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d479	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d47a	08					.byte NN	;wh_Flags	dictionary flags
=54262					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d47b	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d47e					en = *	; remember here
>d479	03					.byte CL	;wh_CodeLength
>d47e	0d					.byte $0d
>d47f	6f 72 61 2e 23			L1:	.text "ora.#"	;  name of word as a string, ending at wh_NameLastChar
>d484	05					.byte *-L1	;wh_NameLength	length of name
>d485	f6 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d487	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d488	08					.byte NN	;wh_Flags	dictionary flags
=54276					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d489	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d48c					en = *	; remember here
>d487	03					.byte CL	;wh_CodeLength
>d48c	09					.byte $09
>d48d	6f 72 61 2e 78			L1:	.text "ora.x"	;  name of word as a string, ending at wh_NameLastChar
>d492	05					.byte *-L1	;wh_NameLength	length of name
>d493	04 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d495	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d496	08					.byte NN	;wh_Flags	dictionary flags
=54290					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d497	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d49a					en = *	; remember here
>d495	03					.byte CL	;wh_CodeLength
>d49a	1d					.byte $1d
>d49b	6f 72 61 2e 79			L1:	.text "ora.y"	;  name of word as a string, ending at wh_NameLastChar
>d4a0	05					.byte *-L1	;wh_NameLength	length of name
>d4a1	12 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4a3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4a4	08					.byte NN	;wh_Flags	dictionary flags
=54304					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4a5	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4a8					en = *	; remember here
>d4a3	03					.byte CL	;wh_CodeLength
>d4a8	19					.byte $19
>d4a9	6f 72 61 2e 7a			L1:	.text "ora.z"	;  name of word as a string, ending at wh_NameLastChar
>d4ae	05					.byte *-L1	;wh_NameLength	length of name
>d4af	20 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4b1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4b2	08					.byte NN	;wh_Flags	dictionary flags
=54318					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4b3	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4b6					en = *	; remember here
>d4b1	03					.byte CL	;wh_CodeLength
>d4b6	05					.byte $05
>d4b7	6f 72 61 2e 7a 69 79		L1:	.text "ora.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d4be	07					.byte *-L1	;wh_NameLength	length of name
>d4bf	2e d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4c2	08					.byte NN	;wh_Flags	dictionary flags
=54334					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4c3	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4c6					en = *	; remember here
>d4c1	03					.byte CL	;wh_CodeLength
>d4c6	11					.byte $11
>d4c7	6f 72 61 2e 7a 78		L1:	.text "ora.zx"	;  name of word as a string, ending at wh_NameLastChar
>d4cd	06					.byte *-L1	;wh_NameLength	length of name
>d4ce	3e d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4d0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4d1	08					.byte NN	;wh_Flags	dictionary flags
=54349					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4d2	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4d5					en = *	; remember here
>d4d0	03					.byte CL	;wh_CodeLength
>d4d5	15					.byte $15
>d4d6	6f 72 61 2e 7a 78 69		L1:	.text "ora.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d4dd	07					.byte *-L1	;wh_NameLength	length of name
>d4de	4d d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4e0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4e1	08					.byte NN	;wh_Flags	dictionary flags
=54365					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4e2	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4e5					en = *	; remember here
>d4e0	03					.byte CL	;wh_CodeLength
>d4e5	01					.byte $01
>d4e6	70 68 61			L1:	.text "pha"	;  name of word as a string, ending at wh_NameLastChar
>d4e9	03					.byte *-L1	;wh_NameLength	length of name
>d4ea	5d d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4ec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4ed	08					.byte NN	;wh_Flags	dictionary flags
=54377					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4ee	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4f1					en = *	; remember here
>d4ec	03					.byte CL	;wh_CodeLength
>d4f1	48					.byte $48
>d4f2	70 68 70			L1:	.text "php"	;  name of word as a string, ending at wh_NameLastChar
>d4f5	03					.byte *-L1	;wh_NameLength	length of name
>d4f6	69 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4f8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4f9	08					.byte NN	;wh_Flags	dictionary flags
=54389					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4fa	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4fd					en = *	; remember here
>d4f8	03					.byte CL	;wh_CodeLength
>d4fd	08					.byte $08
>d4fe	70 6c 61			L1:	.text "pla"	;  name of word as a string, ending at wh_NameLastChar
>d501	03					.byte *-L1	;wh_NameLength	length of name
>d502	75 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d504	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d505	08					.byte NN	;wh_Flags	dictionary flags
=54401					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d506	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d509					en = *	; remember here
>d504	03					.byte CL	;wh_CodeLength
>d509	68					.byte $68
>d50a	70 6c 70			L1:	.text "plp"	;  name of word as a string, ending at wh_NameLastChar
>d50d	03					.byte *-L1	;wh_NameLength	length of name
>d50e	81 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d510	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d511	08					.byte NN	;wh_Flags	dictionary flags
=54413					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d512	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d515					en = *	; remember here
>d510	03					.byte CL	;wh_CodeLength
>d515	28					.byte $28
>d516	72 6f 6c			L1:	.text "rol"	;  name of word as a string, ending at wh_NameLastChar
>d519	03					.byte *-L1	;wh_NameLength	length of name
>d51a	8d d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d51c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d51d	08					.byte NN	;wh_Flags	dictionary flags
=54425					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d51e	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d521					en = *	; remember here
>d51c	03					.byte CL	;wh_CodeLength
>d521	2e					.byte $2e
>d522	72 6f 6c 2e 61			L1:	.text "rol.a"	;  name of word as a string, ending at wh_NameLastChar
>d527	05					.byte *-L1	;wh_NameLength	length of name
>d528	99 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d52a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d52b	08					.byte NN	;wh_Flags	dictionary flags
=54439					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d52c	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d52f					en = *	; remember here
>d52a	03					.byte CL	;wh_CodeLength
>d52f	2a					.byte $2a
>d530	72 6f 6c 2e 78			L1:	.text "rol.x"	;  name of word as a string, ending at wh_NameLastChar
>d535	05					.byte *-L1	;wh_NameLength	length of name
>d536	a7 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d538	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d539	08					.byte NN	;wh_Flags	dictionary flags
=54453					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d53a	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d53d					en = *	; remember here
>d538	03					.byte CL	;wh_CodeLength
>d53d	3e					.byte $3e
>d53e	72 6f 6c 2e 7a			L1:	.text "rol.z"	;  name of word as a string, ending at wh_NameLastChar
>d543	05					.byte *-L1	;wh_NameLength	length of name
>d544	b5 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d546	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d547	08					.byte NN	;wh_Flags	dictionary flags
=54467					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d548	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d54b					en = *	; remember here
>d546	03					.byte CL	;wh_CodeLength
>d54b	26					.byte $26
>d54c	72 6f 6c 2e 7a 78		L1:	.text "rol.zx"	;  name of word as a string, ending at wh_NameLastChar
>d552	06					.byte *-L1	;wh_NameLength	length of name
>d553	c3 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d555	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d556	08					.byte NN	;wh_Flags	dictionary flags
=54482					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d557	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d55a					en = *	; remember here
>d555	03					.byte CL	;wh_CodeLength
>d55a	36					.byte $36
>d55b	72 6f 72			L1:	.text "ror"	;  name of word as a string, ending at wh_NameLastChar
>d55e	03					.byte *-L1	;wh_NameLength	length of name
>d55f	d2 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d561	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d562	08					.byte NN	;wh_Flags	dictionary flags
=54494					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d563	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d566					en = *	; remember here
>d561	03					.byte CL	;wh_CodeLength
>d566	6e					.byte $6e
>d567	72 6f 72 2e 61			L1:	.text "ror.a"	;  name of word as a string, ending at wh_NameLastChar
>d56c	05					.byte *-L1	;wh_NameLength	length of name
>d56d	de d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d56f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d570	08					.byte NN	;wh_Flags	dictionary flags
=54508					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d571	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d574					en = *	; remember here
>d56f	03					.byte CL	;wh_CodeLength
>d574	6a					.byte $6a
>d575	72 6f 72 2e 78			L1:	.text "ror.x"	;  name of word as a string, ending at wh_NameLastChar
>d57a	05					.byte *-L1	;wh_NameLength	length of name
>d57b	ec d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d57d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d57e	08					.byte NN	;wh_Flags	dictionary flags
=54522					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d57f	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d582					en = *	; remember here
>d57d	03					.byte CL	;wh_CodeLength
>d582	7e					.byte $7e
>d583	72 6f 72 2e 7a			L1:	.text "ror.z"	;  name of word as a string, ending at wh_NameLastChar
>d588	05					.byte *-L1	;wh_NameLength	length of name
>d589	fa d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d58b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d58c	08					.byte NN	;wh_Flags	dictionary flags
=54536					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d58d	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d590					en = *	; remember here
>d58b	03					.byte CL	;wh_CodeLength
>d590	66					.byte $66
>d591	72 6f 72 2e 7a 78		L1:	.text "ror.zx"	;  name of word as a string, ending at wh_NameLastChar
>d597	06					.byte *-L1	;wh_NameLength	length of name
>d598	08 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d59a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d59b	08					.byte NN	;wh_Flags	dictionary flags
=54551					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d59c	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d59f					en = *	; remember here
>d59a	03					.byte CL	;wh_CodeLength
>d59f	76					.byte $76
>d5a0	72 74 69			L1:	.text "rti"	;  name of word as a string, ending at wh_NameLastChar
>d5a3	03					.byte *-L1	;wh_NameLength	length of name
>d5a4	17 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5a6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5a7	08					.byte NN	;wh_Flags	dictionary flags
=54563					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5a8	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5ab					en = *	; remember here
>d5a6	03					.byte CL	;wh_CodeLength
>d5ab	40					.byte $40
>d5ac	72 74 73			L1:	.text "rts"	;  name of word as a string, ending at wh_NameLastChar
>d5af	03					.byte *-L1	;wh_NameLength	length of name
>d5b0	23 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5b3	08					.byte NN	;wh_Flags	dictionary flags
=54575					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5b4	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5b7					en = *	; remember here
>d5b2	03					.byte CL	;wh_CodeLength
>d5b7	60					.byte $60
>d5b8	73 62 63			L1:	.text "sbc"	;  name of word as a string, ending at wh_NameLastChar
>d5bb	03					.byte *-L1	;wh_NameLength	length of name
>d5bc	2f d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5bf	08					.byte NN	;wh_Flags	dictionary flags
=54587					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5c0	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5c3					en = *	; remember here
>d5be	03					.byte CL	;wh_CodeLength
>d5c3	ed					.byte $ed
>d5c4	73 62 63 2e 23			L1:	.text "sbc.#"	;  name of word as a string, ending at wh_NameLastChar
>d5c9	05					.byte *-L1	;wh_NameLength	length of name
>d5ca	3b d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5cd	08					.byte NN	;wh_Flags	dictionary flags
=54601					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5ce	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5d1					en = *	; remember here
>d5cc	03					.byte CL	;wh_CodeLength
>d5d1	e9					.byte $e9
>d5d2	73 62 63 2e 78			L1:	.text "sbc.x"	;  name of word as a string, ending at wh_NameLastChar
>d5d7	05					.byte *-L1	;wh_NameLength	length of name
>d5d8	49 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5da	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5db	08					.byte NN	;wh_Flags	dictionary flags
=54615					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5dc	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5df					en = *	; remember here
>d5da	03					.byte CL	;wh_CodeLength
>d5df	fd					.byte $fd
>d5e0	73 62 63 2e 79			L1:	.text "sbc.y"	;  name of word as a string, ending at wh_NameLastChar
>d5e5	05					.byte *-L1	;wh_NameLength	length of name
>d5e6	57 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5e8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5e9	08					.byte NN	;wh_Flags	dictionary flags
=54629					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5ea	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5ed					en = *	; remember here
>d5e8	03					.byte CL	;wh_CodeLength
>d5ed	f9					.byte $f9
>d5ee	73 62 63 2e 7a			L1:	.text "sbc.z"	;  name of word as a string, ending at wh_NameLastChar
>d5f3	05					.byte *-L1	;wh_NameLength	length of name
>d5f4	65 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5f6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5f7	08					.byte NN	;wh_Flags	dictionary flags
=54643					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5f8	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5fb					en = *	; remember here
>d5f6	03					.byte CL	;wh_CodeLength
>d5fb	e5					.byte $e5
>d5fc	73 62 63 2e 7a 69 79		L1:	.text "sbc.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d603	07					.byte *-L1	;wh_NameLength	length of name
>d604	73 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d606	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d607	08					.byte NN	;wh_Flags	dictionary flags
=54659					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d608	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d60b					en = *	; remember here
>d606	03					.byte CL	;wh_CodeLength
>d60b	f1					.byte $f1
>d60c	73 62 63 2e 7a 78		L1:	.text "sbc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d612	06					.byte *-L1	;wh_NameLength	length of name
>d613	83 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d615	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d616	08					.byte NN	;wh_Flags	dictionary flags
=54674					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d617	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d61a					en = *	; remember here
>d615	03					.byte CL	;wh_CodeLength
>d61a	f5					.byte $f5
>d61b	73 62 63 2e 7a 78 69		L1:	.text "sbc.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d622	07					.byte *-L1	;wh_NameLength	length of name
>d623	92 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d625	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d626	08					.byte NN	;wh_Flags	dictionary flags
=54690					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d627	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d62a					en = *	; remember here
>d625	03					.byte CL	;wh_CodeLength
>d62a	e1					.byte $e1
>d62b	73 65 63			L1:	.text "sec"	;  name of word as a string, ending at wh_NameLastChar
>d62e	03					.byte *-L1	;wh_NameLength	length of name
>d62f	a2 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d631	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d632	08					.byte NN	;wh_Flags	dictionary flags
=54702					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d633	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d636					en = *	; remember here
>d631	03					.byte CL	;wh_CodeLength
>d636	38					.byte $38
>d637	73 65 64			L1:	.text "sed"	;  name of word as a string, ending at wh_NameLastChar
>d63a	03					.byte *-L1	;wh_NameLength	length of name
>d63b	ae d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d63d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d63e	08					.byte NN	;wh_Flags	dictionary flags
=54714					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d63f	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d642					en = *	; remember here
>d63d	03					.byte CL	;wh_CodeLength
>d642	f8					.byte $f8
>d643	73 65 69			L1:	.text "sei"	;  name of word as a string, ending at wh_NameLastChar
>d646	03					.byte *-L1	;wh_NameLength	length of name
>d647	ba d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d649	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d64a	08					.byte NN	;wh_Flags	dictionary flags
=54726					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d64b	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d64e					en = *	; remember here
>d649	03					.byte CL	;wh_CodeLength
>d64e	78					.byte $78
>d64f	73 74 61			L1:	.text "sta"	;  name of word as a string, ending at wh_NameLastChar
>d652	03					.byte *-L1	;wh_NameLength	length of name
>d653	c6 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d655	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d656	08					.byte NN	;wh_Flags	dictionary flags
=54738					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d657	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d65a					en = *	; remember here
>d655	03					.byte CL	;wh_CodeLength
>d65a	8d					.byte $8d
>d65b	73 74 61 2e 78			L1:	.text "sta.x"	;  name of word as a string, ending at wh_NameLastChar
>d660	05					.byte *-L1	;wh_NameLength	length of name
>d661	d2 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d663	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d664	08					.byte NN	;wh_Flags	dictionary flags
=54752					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d665	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d668					en = *	; remember here
>d663	03					.byte CL	;wh_CodeLength
>d668	9d					.byte $9d
>d669	73 74 61 2e 79			L1:	.text "sta.y"	;  name of word as a string, ending at wh_NameLastChar
>d66e	05					.byte *-L1	;wh_NameLength	length of name
>d66f	e0 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d671	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d672	08					.byte NN	;wh_Flags	dictionary flags
=54766					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d673	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d676					en = *	; remember here
>d671	03					.byte CL	;wh_CodeLength
>d676	99					.byte $99
>d677	73 74 61 2e 7a			L1:	.text "sta.z"	;  name of word as a string, ending at wh_NameLastChar
>d67c	05					.byte *-L1	;wh_NameLength	length of name
>d67d	ee d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d67f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d680	08					.byte NN	;wh_Flags	dictionary flags
=54780					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d681	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d684					en = *	; remember here
>d67f	03					.byte CL	;wh_CodeLength
>d684	85					.byte $85
>d685	73 74 61 2e 7a 69 79		L1:	.text "sta.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d68c	07					.byte *-L1	;wh_NameLength	length of name
>d68d	fc d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d68f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d690	08					.byte NN	;wh_Flags	dictionary flags
=54796					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d691	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d694					en = *	; remember here
>d68f	03					.byte CL	;wh_CodeLength
>d694	91					.byte $91
>d695	73 74 61 2e 7a 78		L1:	.text "sta.zx"	;  name of word as a string, ending at wh_NameLastChar
>d69b	06					.byte *-L1	;wh_NameLength	length of name
>d69c	0c d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d69e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d69f	08					.byte NN	;wh_Flags	dictionary flags
=54811					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6a0	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6a3					en = *	; remember here
>d69e	03					.byte CL	;wh_CodeLength
>d6a3	95					.byte $95
>d6a4	73 74 61 2e 7a 78 69		L1:	.text "sta.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d6ab	07					.byte *-L1	;wh_NameLength	length of name
>d6ac	1b d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6ae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6af	08					.byte NN	;wh_Flags	dictionary flags
=54827					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6b0	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6b3					en = *	; remember here
>d6ae	03					.byte CL	;wh_CodeLength
>d6b3	81					.byte $81
>d6b4	73 74 78			L1:	.text "stx"	;  name of word as a string, ending at wh_NameLastChar
>d6b7	03					.byte *-L1	;wh_NameLength	length of name
>d6b8	2b d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6ba	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6bb	08					.byte NN	;wh_Flags	dictionary flags
=54839					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6bc	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6bf					en = *	; remember here
>d6ba	03					.byte CL	;wh_CodeLength
>d6bf	8e					.byte $8e
>d6c0	73 74 78 2e 7a			L1:	.text "stx.z"	;  name of word as a string, ending at wh_NameLastChar
>d6c5	05					.byte *-L1	;wh_NameLength	length of name
>d6c6	37 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6c8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6c9	08					.byte NN	;wh_Flags	dictionary flags
=54853					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6ca	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6cd					en = *	; remember here
>d6c8	03					.byte CL	;wh_CodeLength
>d6cd	86					.byte $86
>d6ce	73 74 78 2e 7a 79		L1:	.text "stx.zy"	;  name of word as a string, ending at wh_NameLastChar
>d6d4	06					.byte *-L1	;wh_NameLength	length of name
>d6d5	45 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6d7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6d8	08					.byte NN	;wh_Flags	dictionary flags
=54868					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6d9	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6dc					en = *	; remember here
>d6d7	03					.byte CL	;wh_CodeLength
>d6dc	96					.byte $96
>d6dd	73 74 79			L1:	.text "sty"	;  name of word as a string, ending at wh_NameLastChar
>d6e0	03					.byte *-L1	;wh_NameLength	length of name
>d6e1	54 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6e3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6e4	08					.byte NN	;wh_Flags	dictionary flags
=54880					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6e5	20 22 cf	jsr $cf22		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6e8					en = *	; remember here
>d6e3	03					.byte CL	;wh_CodeLength
>d6e8	8c					.byte $8c
>d6e9	73 74 79 2e 7a			L1:	.text "sty.z"	;  name of word as a string, ending at wh_NameLastChar
>d6ee	05					.byte *-L1	;wh_NameLength	length of name
>d6ef	60 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6f1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6f2	08					.byte NN	;wh_Flags	dictionary flags
=54894					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6f3	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6f6					en = *	; remember here
>d6f1	03					.byte CL	;wh_CodeLength
>d6f6	84					.byte $84
>d6f7	73 74 79 2e 7a 78		L1:	.text "sty.zx"	;  name of word as a string, ending at wh_NameLastChar
>d6fd	06					.byte *-L1	;wh_NameLength	length of name
>d6fe	6e d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d700	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d701	08					.byte NN	;wh_Flags	dictionary flags
=54909					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d702	20 0c cf	jsr $cf0c		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d705					en = *	; remember here
>d700	03					.byte CL	;wh_CodeLength
>d705	94					.byte $94
>d706	74 61 78			L1:	.text "tax"	;  name of word as a string, ending at wh_NameLastChar
>d709	03					.byte *-L1	;wh_NameLength	length of name
>d70a	7d d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d70c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d70d	08					.byte NN	;wh_Flags	dictionary flags
=54921					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d70e	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d711					en = *	; remember here
>d70c	03					.byte CL	;wh_CodeLength
>d711	aa					.byte $aa
>d712	74 61 79			L1:	.text "tay"	;  name of word as a string, ending at wh_NameLastChar
>d715	03					.byte *-L1	;wh_NameLength	length of name
>d716	89 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d718	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d719	08					.byte NN	;wh_Flags	dictionary flags
=54933					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d71a	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d71d					en = *	; remember here
>d718	03					.byte CL	;wh_CodeLength
>d71d	a8					.byte $a8
>d71e	74 73 78			L1:	.text "tsx"	;  name of word as a string, ending at wh_NameLastChar
>d721	03					.byte *-L1	;wh_NameLength	length of name
>d722	95 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d724	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d725	08					.byte NN	;wh_Flags	dictionary flags
=54945					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d726	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d729					en = *	; remember here
>d724	03					.byte CL	;wh_CodeLength
>d729	ba					.byte $BA
>d72a	74 78 61			L1:	.text "txa"	;  name of word as a string, ending at wh_NameLastChar
>d72d	03					.byte *-L1	;wh_NameLength	length of name
>d72e	a1 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d730	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d731	08					.byte NN	;wh_Flags	dictionary flags
=54957					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d732	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d735					en = *	; remember here
>d730	03					.byte CL	;wh_CodeLength
>d735	8a					.byte $8a
>d736	74 78 73			L1:	.text "txs"	;  name of word as a string, ending at wh_NameLastChar
>d739	03					.byte *-L1	;wh_NameLength	length of name
>d73a	ad d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d73c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d73d	08					.byte NN	;wh_Flags	dictionary flags
=54969					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d73e	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d741					en = *	; remember here
>d73c	03					.byte CL	;wh_CodeLength
>d741	9a					.byte $9a
>d742	74 79 61			L1:	.text "tya"	;  name of word as a string, ending at wh_NameLastChar
>d745	03					.byte *-L1	;wh_NameLength	length of name
>d746	b9 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d748	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d749	08					.byte NN	;wh_Flags	dictionary flags
=54981					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d74a	20 2b cf	jsr $cf2b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d74d					en = *	; remember here
>d748	03					.byte CL	;wh_CodeLength
>d74d	98					.byte $98
=54981					asm_table = WordListLink ; head of instruction word list for disassembler
>d74e	70 75 73 68 2d 61		L1:	.text "push-a"	;  name of word as a string, ending at wh_NameLastChar
>d754	06					.byte *-L1	;wh_NameLength	length of name
>d755	c5 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d757	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d758	0c					.byte IM+NN	;wh_Flags	dictionary flags
=54996					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d759	a9 3a		lda #$3a			lda #<PushZA
.d75b	a0 b7		ldy #$b7			ldy #>PushZA
.d75d	4c 48 cc	jmp $cc48			jmp Jsr_Comma_YA
=7					CL	.var *-(WordListLink+wh_Xt)
=$d760					en = *	; remember here
>d757	07					.byte CL	;wh_CodeLength
>d760	2d 2d 3e			L1:	.text "-->"	;  name of word as a string, ending at wh_NameLastChar
>d763	03					.byte *-L1	;wh_NameLength	length of name
>d764	d4 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d766	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d767	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55011					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d768	4c 2c c9	jmp $c92c			jmp Here
=3					CL	.var *-(WordListLink+wh_Xt)
=$d76b					en = *	; remember here
>d766	03					.byte CL	;wh_CodeLength
>d76b	3c 6a				L1:	.text "<j"	;  name of word as a string, ending at wh_NameLastChar
>d76d	02					.byte *-L1	;wh_NameLength	length of name
>d76e	e3 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d770	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d771	04					.byte IM	;wh_Flags	dictionary flags
=55021					WordListLink ::= *-wh_xt ; remember the nt of this word for later
=0					CL	.var *-(WordListLink+wh_Xt)
=$d772					en = *	; remember here
>d770	00					.byte CL	;wh_CodeLength
.d772	60		rts				rts
>d773	3c 62				L1:	.text "<b"	;  name of word as a string, ending at wh_NameLastChar
>d775	02					.byte *-L1	;wh_NameLength	length of name
>d776	ed d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d778	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d779	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55029					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d77a					asm_back_branch:
.d77a	20 2c c9	jsr $c92c			jsr Here		; ( addr-l addr-h )
.d77d	20 cd ca	jsr $cacd			jsr Minus		; ( offset )
.d780	a9 fe		lda #$fe			lda #$fe
.d782	4c 4f c9	jmp $c94f			jmp Minus_A
=11					CL	.var *-(WordListLink+wh_Xt)
=$d785					en = *	; remember here
>d778	0b					.byte CL	;wh_CodeLength
>d785	44 69 73 41 73 6d		L1:	.text "DisAsm"	;  name of word as a string, ending at wh_NameLastChar
>d78b	06					.byte *-L1	;wh_NameLength	length of name
>d78c	f5 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d78e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d78f	08					.byte NN	;wh_Flags	dictionary flags
=55051					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d790					DisAsm:
.d790	20 62 c3	jsr $c362			jsr Bounds		; ( addr_end addr )
.d793					_instr:
.d793	20 7f b3	jsr $b37f			jsr underflow_2
.d796	b5 24		lda $24,x			lda DStack+0,x		; addr >= addr_end?
.d798	d5 26		cmp $26,x			cmp DStack+2,x
.d79a	b5 25		lda $25,x			lda DStack+1,x
.d79c	f5 27		sbc $27,x			sbc DStack+3,x
.d79e	90 03		bcc $d7a3			bcc +
.d7a0	4c 2b c4	jmp $c42b			jmp Two_drop		; discard parms & return
.d7a3					+
.d7a3	20 7d aa	jsr $aa7d			jsr CR			; new line
.d7a6	20 6a ce	jsr $ce6a			jsr Dup			; print address
.d7a9	20 12 a8	jsr $a812			jsr Dot_Hex
.d7ac	20 e5 cc	jsr $cce5			jsr Space
.d7af	a1 24		lda ($24,x)			lda (DStack+0,x)	; print opcode byte
.d7b1	20 f2 d8	jsr $d8f2			jsr _print_a
.d7b4	a1 24		lda ($24,x)			lda (DStack+0,x)	; save opcode
.d7b6	85 16		sta $16				sta tmp2
.d7b8	20 60 c9	jsr $c960			jsr One_plus
.d7bb	a9 c5		lda #$c5			lda #<asm_table		; for each asm opcode word
.d7bd	a0 d6		ldy #$d6			ldy #>asm_table
.d7bf	85 14		sta $14				sta tmp1+0
.d7c1	84 15		sty $15				sty tmp1+1
.d7c3	d0 0f		bne $d7d4			bne _WTest
.d7c5	a0 82		ldy #$82	_WNext:		ldy #wh_WordListLink+1	;   next entry
.d7c7	b1 14		lda ($14),y			lda (tmp1),y
.d7c9	f0 2e		beq $d7f9			beq _unknown
.d7cb	48		pha				pha
.d7cc	88		dey				dey
.d7cd	b1 14		lda ($14),y			lda (tmp1),y
.d7cf	85 14		sta $14				sta tmp1+0
.d7d1	68		pla				pla
.d7d2	85 15		sta $15				sta tmp1+1
.d7d4	a0 88		ldy #$88	_WTest:		ldy #wh_Xt+3		;   opcode match?
.d7d6	b1 14		lda ($14),y			lda (tmp1),y
.d7d8	c5 16		cmp $16				cmp tmp2
.d7da	d0 e9		bne $d7c5			bne _WNext
.d7dc	a5 16		lda $16				lda tmp2		; save opcode
.d7de	48		pha				pha
.d7df	a5 15		lda $15				lda tmp1+1		; save its nt
.d7e1	48		pha				pha
.d7e2	a5 14		lda $14				lda tmp1+0
.d7e4	48		pha				pha
.d7e5	a0 86		ldy #$86			ldy #wh_xt+1		; get processor routine addr lo byte from JSR
.d7e7	b1 14		lda ($14),y			lda (tmp1),y
.d7e9	c9 2b		cmp #$2b			cmp #<asm_0		; goto disasm processor
.d7eb	f0 17		beq $d804			beq _c0
.d7ed	c9 0c		cmp #$0c			cmp #<asm_1
.d7ef	f0 49		beq $d83a			beq _c1
.d7f1	c9 22		cmp #$22			cmp #<asm_2
.d7f3	f0 61		beq $d856			beq _c2
.d7f5	c9 ec		cmp #$ec			cmp #<asm_r
.d7f7	f0 18		beq $d811			beq _cr
.d7f9					_unknown:
.d7f9	20 d3 d8	jsr $d8d3			jsr _tab		; to source area
.d7fc	a9 3f		lda #$3f			lda #'?'
.d7fe	20 d8 cc	jsr $ccd8			jsr Emit_A
.d801	4c 93 d7	jmp $d793			jmp _instr
.d804					_c0:
.d804	20 d3 d8	jsr $d8d3			jsr _tab		; to source area
.d807	68		pla				pla			; get opcode word nt
.d808	a8		tay				tay
.d809	68		pla				pla
.d80a	20 d8 d8	jsr $d8d8			jsr _print_opcode
.d80d	68		pla				pla			; discard opcode
.d80e	4c 93 d7	jmp $d793			jmp _instr
.d811					_cr:
.d811	20 e9 d8	jsr $d8e9			jsr _get_byte		; get displacement byte
.d814	a0 00		ldy #$00			ldy #0			; sign extend displacement
.d816	09 00		ora #$00			ora #0
.d818	10 01		bpl $d81b			bpl +
.d81a	88		dey				dey
.d81b	20 f8 b6	jsr $b6f8	+		jsr PushYA
.d81e	20 6a ce	jsr $ce6a			jsr Dup			; save for TypeSymbol
.d821	20 d3 d8	jsr $d8d3			jsr _tab		; to source area
.d824	20 19 cb	jsr $cb19			jsr U_Dot		; print dest address
.d827	68		pla				pla			; get opcode word nt
.d828	a8		tay				tay
.d829	68		pla				pla
.d82a	20 d8 d8	jsr $d8d8			jsr _print_opcode
.d82d	68		pla				pla			; discard opcode
.d82e	20 41 ce	jsr $ce41			jsr Over		; calc dest addr
.d831	20 b4 ca	jsr $cab4			jsr Plus
.d834	20 9e 81	jsr $819e			jsr TypeSymbol		; print dest addr symbolic
.d837	4c 93 d7	jmp $d793			jmp _instr
.d83a					_c1:
.d83a	20 e9 d8	jsr $d8e9			jsr _get_byte		; get operand
.d83d	20 3a b7	jsr $b73a			jsr PushZA
.d840	20 d3 d8	jsr $d8d3			jsr _tab		; to source area
.d843	20 6a ce	jsr $ce6a			jsr Dup
.d846	20 19 cb	jsr $cb19			jsr U_Dot		; print operand
.d849	68		pla				pla			; get opcode word nt
.d84a	a8		tay				tay
.d84b	68		pla				pla
.d84c	20 d8 d8	jsr $d8d8			jsr _print_opcode
.d84f	68		pla				pla			; discard opcode
.d850	20 9e 81	jsr $819e			jsr TypeSymbol
.d853	4c 93 d7	jmp $d793			jmp _instr
.d856					_c2:
.d856	20 e9 d8	jsr $d8e9			jsr _get_byte		; get operand lo byte
.d859	48		pha				pha
.d85a	20 e9 d8	jsr $d8e9			jsr _get_byte		; get operand hi byte
.d85d	ca		dex				dex			; push operand bytes
.d85e	ca		dex				dex
.d85f	95 25		sta $25,x			sta DStack+1,x
.d861	68		pla				pla
.d862	95 24		sta $24,x			sta DStack+0,x
.d864	20 d3 d8	jsr $d8d3			jsr _tab		; to source area
.d867	20 6a ce	jsr $ce6a			jsr Dup
.d86a	20 19 cb	jsr $cb19			jsr U_Dot		; print operand
.d86d	68		pla				pla			; AY= opcode word nt
.d86e	a8		tay				tay
.d86f	68		pla				pla
.d870	20 d8 d8	jsr $d8d8			jsr _print_opcode
.d873	20 6a ce	jsr $ce6a			jsr Dup
.d876	20 9e 81	jsr $819e			jsr TypeSymbol		; print operand as symbol
.d879	68		pla				pla			; get opcode
.d87a	c9 20		cmp #$20			cmp #$20		;  JSR
.d87c	f0 09		beq $d887			beq _jsr
.d87e	e8		inx		_jdrop:		inx			; Drop operand
.d87f	e8		inx				inx
.d880	4c 93 d7	jmp $d793			jmp _instr		; ( addr_end addr )
.d883	e8		inx		_2drop:		inx			; Drop jsr_nt
.d884	e8		inx				inx
.d885	d0 f7		bne $d87e			bne _jdrop
.d887					_jsr:
.d887	20 40 b3	jsr $b340			jsr PopYA
.d88a	c9 19		cmp #$19			cmp #<sliteral_runtime	; string literal?
.d88c	d0 42		bne $d8d0			bne _not_sliteral
.d88e	c0 b8		cpy #$b8			cpy #>sliteral_runtime
.d890	d0 3e		bne $d8d0			bne _not_sliteral
.d892	20 7d aa	jsr $aa7d			jsr CR
.d895	20 6a ce	jsr $ce6a			jsr Dup			; ( addr_end addr addr )
.d898	20 12 a8	jsr $a812			jsr Dot_Hex
.d89b	20 e5 cc	jsr $cce5			jsr Space
.d89e	20 6a ce	jsr $ce6a			jsr Dup			; ( addr_end ? addr )
.d8a1	20 e9 d8	jsr $d8e9			jsr _get_byte		; get JMP opcode
.d8a4	20 e9 d8	jsr $d8e9			jsr _get_byte		; get JMP addr lo byte
.d8a7	95 26		sta $26,x			sta DStack+2,x
.d8a9	20 e9 d8	jsr $d8e9			jsr _get_byte		; get JMP addr hi byte
.d8ac	95 27		sta $27,x			sta DStack+3,x		; ( addr_end string_end addr )
.d8ae	20 7d aa	jsr $aa7d			jsr CR
.d8b1	20 6a ce	jsr $ce6a			jsr Dup
.d8b4	20 12 a8	jsr $a812			jsr Dot_Hex
.d8b7	20 e5 cc	jsr $cce5			jsr Space
.d8ba	b5 24		lda $24,x	_slit_11:	lda DStack+0,x		; done with string data?
.d8bc	d5 26		cmp $26,x			cmp DStack+2,x
.d8be	b5 25		lda $25,x			lda DStack+1,x
.d8c0	f5 27		sbc $27,x			sbc DStack+3,x
.d8c2	b0 06		bcs $d8ca			bcs _slit_19
.d8c4	20 e9 d8	jsr $d8e9			jsr _get_byte
.d8c7	4c ba d8	jmp $d8ba			jmp _slit_11
.d8ca					_slit_19:
.d8ca	20 85 c8	jsr $c885			jsr Nip			; ( addr_end addr )
.d8cd	4c 93 d7	jmp $d793			jmp _instr
.d8d0					_not_sliteral:
.d8d0	4c 93 d7	jmp $d793			jmp _instr
.d8d3					_tab:
.d8d3	a9 09		lda #$09			lda #9
.d8d5	4c d8 cc	jmp $ccd8			jmp Emit_A
.d8d8					_print_opcode:
.d8d8	20 78 ce	jsr $ce78			jsr PushAY		; save opcode word nt
.d8db	20 e5 cc	jsr $cce5			jsr Space
.d8de	20 38 bd	jsr $bd38			jsr Name_To_String	; get name string
.d8e1	4c f2 cc	jmp $ccf2			jmp Type		; type word name
.d8e4					_get_byte_silent:
.d8e4	a1 24		lda ($24,x)			lda (DStack+0,x)
.d8e6	4c 60 c9	jmp $c960			jmp One_plus
.d8e9					_get_byte:
.d8e9	20 e4 d8	jsr $d8e4			jsr _get_byte_silent
.d8ec	48		pha				pha
.d8ed	20 f2 d8	jsr $d8f2			jsr _print_a
.d8f0	68		pla				pla
.d8f1	60		rts				rts
.d8f2					_print_a:
.d8f2	20 3a b7	jsr $b73a			jsr PushZA
.d8f5	20 f0 a7	jsr $a7f0			jsr C_Dot_Hex
.d8f8	4c e5 cc	jmp $cce5			jmp Space
=55051					assembler_dictionary_start = WordListLink ; END of ASSEMBLER-WORDLIST
=0					WordListLink .var 0
>d8fb	6c				L1:	.text "l"	;  name of word as a string, ending at wh_NameLastChar
>d8fc	01					.byte *-L1	;wh_NameLength	length of name
>d8fd	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d8ff	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d900	08					.byte NN	;wh_Flags	dictionary flags
=55420					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d901					Editor_l:
.d901	20 15 a2	jsr $a215			jsr Scr
.d904	20 d4 cd	jsr $cdd4			jsr Fetch
.d907	20 c4 a2	jsr $a2c4			jsr Block	; Get the current screen contents.
.d90a	20 7d aa	jsr $aa7d			jsr CR
.d90d	20 19 b8	jsr $b819			jsr SLiteral_Runtime
.d910	4c 1b d9	jmp $d91b			  jmp +				; for SLiteral_Runtime
>d913	53 63 72 65 65 6e 20 23				  .text "Screen #"		; for SLiteral_Runtime
.d91b					+
.d91b	20 f2 cc	jsr $ccf2			jsr Type
.d91e	20 15 a2	jsr $a215			jsr Scr		; print screen number
.d921	20 d4 cd	jsr $cdd4			jsr Fetch
.d924	a9 04		lda #$04			lda #4		;    in 4 positions
.d926	20 4d cb	jsr $cb4d			jsr U_Dot_R_A
.d929	a9 00		lda #$00			lda #0			; line #
.d92b					_line_loop:
.d92b	48		pha				pha
.d92c	20 7d aa	jsr $aa7d			jsr CR
.d92f	68		pla				pla		; Print the line number
.d930	48		pha				pha
.d931	20 3a b7	jsr $b73a			jsr PushZA
.d934	a9 02		lda #$02			lda #2		;   in 2 positions
.d936	20 4d cb	jsr $cb4d			jsr U_Dot_R_A
.d939	20 e5 cc	jsr $cce5			jsr Space
.d93c	20 6a ce	jsr $ce6a			jsr Dup		; Print one line using the address on the stack.
.d93f	a9 40		lda #$40			lda #64
.d941	20 3a b7	jsr $b73a			jsr PushZA
.d944	20 f2 cc	jsr $ccf2			jsr Type
.d947	a9 40		lda #$40			lda #64		; move address to the next line.
.d949	20 0f c9	jsr $c90f			jsr Plus_A
.d94c	68		pla				pla		; Increment the line number
.d94d	18		clc				clc
.d94e	69 01		adc #$01			adc #1
.d950	c9 10		cmp #$10			cmp #16		; See if we are done.
.d952	d0 d7		bne $d92b			bne _line_loop
.d954	e8		inx				inx		; Drop the address
.d955	e8		inx				inx
.d956	4c 7d aa	jmp $aa7d			jmp CR
=88					CL	.var *-(WordListLink+wh_Xt)
=$d959					en = *	; remember here
>d8ff	58					.byte CL	;wh_CodeLength
.d959					Editor_Screen_Helper:
.d959	20 6a ce	jsr $ce6a			jsr Dup
.d95c	20 15 a2	jsr $a215			jsr Scr
.d95f	20 b7 cd	jsr $cdb7			jsr Store
.d962	4c 2e a3	jmp $a32e			jmp Buffer
>d965	65 6e 74 65 72 2d 73 63		L1:	.text "enter-screen"	;  name of word as a string, ending at wh_NameLastChar
>d96d	72 65 65 6e
>d971	0c					.byte *-L1	;wh_NameLength	length of name
>d972	7c d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d974	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d975	08					.byte NN	;wh_Flags	dictionary flags
=55537					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d976					Editor_Enter_Screen:
.d976	20 59 d9	jsr $d959			jsr Editor_Screen_Helper
.d979	a9 00		lda #$00			lda #0			; Overwrite the lines one at a time.
.d97b	95 24		sta $24,x	_loop:		sta DStack+0,x
.d97d	20 3a b7	jsr $b73a			jsr PushZA		; Put the current line number on the stack.
.d980	20 e4 d9	jsr $d9e4			jsr Editor_o		; prompt for overwrite.
.d983	f6 24		inc $24,x			inc DStack+0,x		; Move on to the next line.
.d985	b5 24		lda $24,x			lda DStack+0,x
.d987	c9 10		cmp #$10			cmp #16
.d989	90 f0		bcc $d97b			bcc _loop
.d98b	e8		inx				inx			; Drop work area
.d98c	e8		inx				inx
=23					CL	.var *-(WordListLink+wh_Xt)
=$d98d					en = *	; remember here
>d974	17					.byte CL	;wh_CodeLength
.d98d	60		rts				rts
>d98e	6c 69 6e 65			L1:	.text "line"	;  name of word as a string, ending at wh_NameLastChar
>d992	04					.byte *-L1	;wh_NameLength	length of name
>d993	f1 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d995	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d996	08					.byte NN	;wh_Flags	dictionary flags
=55570					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d997					Editor_line:
.d997	a9 06		lda #$06			lda #6		; Multiply the TOS by 64 (chars/line) to compute offset.
.d999	20 53 ca	jsr $ca53			jsr LShift_A	; *64 is same as left shift 6 times.
.d99c	20 15 a2	jsr $a215			jsr Scr
.d99f	20 d4 cd	jsr $cdd4			jsr Fetch
.d9a2	20 c4 a2	jsr $a2c4			jsr Block
.d9a5	4c b4 ca	jmp $cab4			jmp Plus
=17					CL	.var *-(WordListLink+wh_Xt)
=$d9a8					en = *	; remember here
>d995	11					.byte CL	;wh_CodeLength
>d9a8	65 72 61 73 65 2d 73 63		L1:	.text "erase-screen"	;  name of word as a string, ending at wh_NameLastChar
>d9b0	72 65 65 6e
>d9b4	0c					.byte *-L1	;wh_NameLength	length of name
>d9b5	12 d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d9b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d9b8	08					.byte NN	;wh_Flags	dictionary flags
=55604					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d9b9					Editor_Erase_Screen:
.d9b9	20 59 d9	jsr $d959			jsr Editor_Screen_Helper
.d9bc	a9 00		lda #$00			lda #<1024
.d9be	a0 04		ldy #$04			ldy #>1024
.d9c0	20 f8 b6	jsr $b6f8			jsr PushYA
.d9c3	20 7e bd	jsr $bd7e			jsr Blank		; Erase the entire block (fill with spaces).
.d9c6	4c 1a a3	jmp $a31a			jmp Update		; Mark buffer as updated.
=16					CL	.var *-(WordListLink+wh_Xt)
=$d9c9					en = *	; remember here
>d9b7	10					.byte CL	;wh_CodeLength
>d9c9	65 6c				L1:	.text "el"	;  name of word as a string, ending at wh_NameLastChar
>d9cb	02					.byte *-L1	;wh_NameLength	length of name
>d9cc	34 d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d9ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d9cf	08					.byte NN	;wh_Flags	dictionary flags
=55627					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d9d0					Editor_el:
.d9d0	20 97 d9	jsr $d997			jsr Editor_line
.d9d3	a9 40		lda #$40			lda #64			;(# of chars/line)
.d9d5	20 3a b7	jsr $b73a			jsr PushZA
.d9d8	20 7e bd	jsr $bd7e			jsr Blank		; Fill with spaces.
.d9db	4c 1a a3	jmp $a31a			jmp Update		; Mark buffer as updated.
=14					CL	.var *-(WordListLink+wh_Xt)
=$d9de					en = *	; remember here
>d9ce	0e					.byte CL	;wh_CodeLength
>d9de	6f				L1:	.text "o"	;  name of word as a string, ending at wh_NameLastChar
>d9df	01					.byte *-L1	;wh_NameLength	length of name
>d9e0	4b d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d9e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d9e3	08					.byte NN	;wh_Flags	dictionary flags
=55647					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d9e4					Editor_o:
.d9e4	20 7d aa	jsr $aa7d			jsr CR
.d9e7	20 6a ce	jsr $ce6a			jsr Dup
.d9ea	a9 02		lda #$02			lda #2
.d9ec	20 4d cb	jsr $cb4d			jsr U_Dot_R_A
.d9ef	20 e5 cc	jsr $cce5			jsr Space
.d9f2	a9 2a		lda #$2a			lda #'*'
.d9f4	20 d8 cc	jsr $ccd8			jsr Emit_A
.d9f7	20 e5 cc	jsr $cce5			jsr Space
.d9fa	20 97 d9	jsr $d997			jsr Editor_line
.d9fd	20 6a ce	jsr $ce6a			jsr Dup		; Save a copy of the line address for later.
.da00	a9 40		lda #$40			lda #64		; chars/line
.da02	20 3a b7	jsr $b73a			jsr PushZA
.da05	20 e6 c1	jsr $c1e6			jsr Accept
.da08	20 6a ce	jsr $ce6a			jsr Dup
.da0b	20 94 cd	jsr $cd94			jsr Not_Rot
.da0e	20 b4 ca	jsr $cab4			jsr Plus
.da11	a9 40		lda #$40			lda #64		; chars/line
.da13	20 3a b7	jsr $b73a			jsr PushZA
.da16	20 6e cd	jsr $cd6e			jsr Rot
.da19	20 cd ca	jsr $cacd			jsr Minus
.da1c	20 7e bd	jsr $bd7e			jsr Blank
.da1f	4c 1a a3	jmp $a31a			jmp Update
=62					CL	.var *-(WordListLink+wh_Xt)
=$da22					en = *	; remember here
>d9e2	3e					.byte CL	;wh_CodeLength
=55647					editor_dictionary_start = WordListLink ; END of EDITOR-WORDLIST

;******  Processing file: platform/../strings.asm

>da22	20 6f 6b 00			str_ok:         .text " ok", 0         ; note space at beginning
>da26	20 63 6f 6d 70 69 6c 65		str_compiled:   .text " compiled", 0   ; note space at beginning
>da2e	64 00
>da30	72 65 64 65 66 69 6e 65		str_redefined:  .text "redefined ", 0  ; note space at end
>da38	64 20 00
>da3b	41 73 73 65 6d 62 6c 65		str_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>da43	72 20 00
>da46	45 64 69 74 6f 72 20 00		str_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>da4e	46 6f 72 74 68 20 00		str_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>da55	52 6f 6f 74 20 00		str_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>da5b	66 6c 61 67 73 3a 00		str_see_flags:  .text "flags:", 0
>da62	6e 74 3a 20 24 00		str_see_nt:     .text "nt: $", 0
>da68	78 74 3a 20 24 00		str_see_xt:     .text "xt: $", 0
>da6e	73 69 7a 65 3a 20 23 00		str_see_size:   .text "size: #", 0
.da76					Exception_Text_List:
>da76	ff 00					.text $100+err_Abort,0
>da78	fe 00					.text $100+err_AbortQuote,0
>da7a	fd 53 74 61 63 6b 20 4f			.text $100+err_Stack_Overflow,"Stack Overflow",0
>da82	76 65 72 66 6c 6f 77 00
>da8a	fc 53 74 61 63 6b 20 55			.text $100+err_Stack_Underflow,"Stack Underflow",0
>da92	6e 64 65 72 66 6c 6f 77 00
>da9b	f9 64 6f 2d 6c 6f 6f 70			.text $100+err_DoLoop_TooDeep,"do-loops nested too deeply during execution",0
>daa3	73 20 6e 65 73 74 65 64 20 74 6f 6f 20 64 65 65
>dab3	70 6c 79 20 64 75 72 69 6e 67 20 65 78 65 63 75
>dac3	74 69 6f 6e 00
>dac8	f6 44 69 76 69 64 65 20			.text $100+err_DivideBy0,"Divide by 0",0
>dad0	62 79 20 30 00
>dad5	f5 6f 75 74 20 6f 66 20			.text $100+err_OutOfRange,"out of range",0
>dadd	72 61 6e 67 65 00
>dae3	f4 61 72 67 75 6d 65 6e			.text $100+err_ArgTypeMismatch,"argument type mismatch",0
>daeb	74 20 74 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>dafb	f3 55 6e 64 65 66 69 6e			.text $100+err_UndefinedWord,"Undefined word",0
>db03	65 64 20 77 6f 72 64 00
>db0b	f2 49 6e 74 65 72 70 72			.text $100+err_CompileOnly,"Interpreting a Compile-only word",0
>db13	65 74 69 6e 67 20 61 20 43 6f 6d 70 69 6c 65 2d
>db23	6f 6e 6c 79 20 77 6f 72 64 00
>db2d	eb 75 6e 73 75 70 70 6f			.text $100+err_Unsupported,"unsupported operation",0 ;  (e.g., AT-XY on a too-dumb terminal)
>db35	72 74 65 64 20 6f 70 65 72 61 74 69 6f 6e 00
>db44	ea 63 6f 6e 74 72 6f 6c			.text $100+err_ControlMismatch,"control structure mismatch",0
>db4c	20 73 74 72 75 63 74 75 72 65 20 6d 69 73 6d 61
>db5c	74 63 68 00
>db60	e0 69 6e 76 61 6c 69 64			.text $100+err_InvalidName,"invalid name",0 ; argument (e.g., TO name)
>db68	20 6e 61 6d 65 00
>db6e	df 62 6c 6f 63 6b 20 72			.text $100+err_BlockRead,"block read",0
>db76	65 61 64 00
>db7a	de 62 6c 6f 63 6b 20 77			.text $100+err_BlockWrite,"block write",0
>db82	72 69 74 65 00
>db87	d6 46 50 20 64 69 76 69			.text $100+err_FPDivideBy0,"FP divide by zero",0
>db8f	64 65 20 62 79 20 7a 65 72 6f 00
>db9a	d5 46 50 20 72 65 73 75			.text $100+err_FPOutOfRange,"FP result out of range",0
>dba2	6c 74 20 6f 75 74 20 6f 66 20 72 61 6e 67 65 00
>dbb2	d4 46 50 20 73 74 61 63			.text $100+err_FPStackOverflow,"FP stack overflow",0
>dbba	6b 20 6f 76 65 72 66 6c 6f 77 00
>dbc5	d3 46 50 20 73 74 61 63			.text $100+err_FPStackUnderflow,"FP stack underflow",0
>dbcd	6b 20 75 6e 64 65 72 66 6c 6f 77 00
>dbd9	d2 46 50 20 69 6e 76 61			.text $100+err_FPInvalidArg,"FP invalid argument",0
>dbe1	6c 69 64 20 61 72 67 75 6d 65 6e 74 00
>dbee	ca 46 50 20 75 6e 64 65			.text $100+err_FPUnderflow,"FP underflow",0
>dbf6	72 66 6c 6f 77 00
>dbfc	c5 41 4c 4c 4f 43 41 54			.text $100+err_Allocate,"ALLOCATE",0
>dc04	45 00
>dc06	c4 46 52 45 45 00			.text $100+err_Free,"FREE",0
>dc0c	6b 52 65 66 69 6c 6c 00			.text $100+err_Refill,"Refill",0
>dc14	6a 44 65 66 65 72 20 6e			.text $100+err_Defer,"Defer not set",0
>dc1c	6f 74 20 73 65 74 00
>dc23	69 4e 6f 74 20 63 6f 6d			.text $100+err_NotCompiling,"Not compiling",0
>dc2b	70 69 6c 69 6e 67 00
>dc32	68 41 6c 72 65 61 64 79			.text $100+err_AlreadyCompiling,"Already compiling",0
>dc3a	20 63 6f 6d 70 69 6c 69 6e 67 00
>dc45	66 4e 6f 20 77 6f 72 64			.text $100+err_wordlist,"No wordlists available",0
>dc4d	6c 69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>dc5d	67 50 6c 65 61 73 65 20			.text $100+err_BlockWordsNotSet,"Please assign BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
>dc65	61 73 73 69 67 6e 20 42 4c 4f 43 4b 2d 52 45 41
>dc75	44 2d 56 45 43 54 4f 52 20 61 6e 64 20 42 4c 4f
>dc85	43 4b 2d 57 52 49 54 45 2d 56 45 43 54 4f 52 00
>dc95	00					.text 0 ; end of list

;******  Return to file: platform/../taliforth.asm


;******  Return to file: platform/platform-65816S.asm

>0766					hist_buff: .fill 8*128	; Input History for ACCEPT
.0b66					cp0:
.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 3b f0	lda $f03b,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 2b f0	jsr $f02b	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	d0 f5		bne $f013	                bne -
.f01e					_done:
.f01e	4c 4c 80	jmp $804c	                jmp Cold
.f021					kernel_getc:
.f021					_loop:
.f021	ee 35 03	inc $0335	-		inc RndState+0	; randomize
>f024	22						.byte $22	; jsl GET_BYTE_FROM_PC
>f025	33 e0						.word $e033
>f027	00						.byte 0
.f028	b0 f7		bcs $f021			bcs -
.f02a	60		rts				rts
.f02b					kernel_putc:
>f02b	22				-		.byte $22	; jsl SEND_BYTE_TO_PC
>f02c	63 e0						.word $e063
>f02e	00						.byte 0
.f02f	b0 fa		bcs $f02b			bcs -
.f031	60		rts				rts
.f032					platform_bye:
.f032	00		brk #		                brk
.f033					platform_CCAt:
.f033	ca		dex				dex
.f034	ca		dex				dex
.f035	ca		dex				dex
.f036	ca		dex				dex
>f037	02 f4 24					.byte $02,$F4,DStack ; cop $f4	get 65816s simulator cycle count in DStack,x
.f03a	60		rts				rts
.f03b					s_kernel_id:
>f03b	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 kernel for 65816s (31. May 2024)", AscCR,AscLF, 0
>f043	74 68 20 32 20 6b 65 72 6e 65 6c 20 66 6f 72 20
>f053	36 35 38 31 36 73 20 28 33 31 2e 20 4d 61 79 20
>f063	32 30 32 34 29 0d 0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
