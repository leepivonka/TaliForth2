
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/65816S-listing.txt --labels=docs/65816S-labelmap.txt --output TaliForth-65816S.bin platform/platform-65816S.asm
; Mon Jun 10 00:24:12 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-65816S.asm

=$0100					RStack = $0100	; begin of 6502 Return Stack
=$ff					rsp0      = $ff		; initial Return Stack Pointer (6502 stack)
=$8000					cp_end    = $8000	; Last RAM byte available for code
=84					padoffset = 84	     ; offset from CP to PAD (holds number strings)
=					TALI_OPTIONAL_WORDS := ["fp","fpe", "fpieee","fptrancendentals", "ed", "editor", "ramdrive", "block", "environment?", "assembler", "wordlist" ]
=["cr","lf"]				TALI_OPTION_CR_EOL := [ "cr", "lf" ]
=$ff					bsize     = $ff		; size of input/output buffers
>0200					buffer0: .fill bsize	; input buffer

;******  Processing file: platform/../taliforth.asm

=-1					err_Abort		= -1
=-2					err_AbortQuote		= -2
=-3					err_Stack_Overflow	= -3
=-4					err_Stack_Underflow	= -4
=-5					err_Return_Stack_Overflow = -5
=-6					err_Return_Stack_Underflow = -6
=-7					err_DoLoop_TooDeep	= -7	; do-loops nested too deeply during execution
=-8					err_Dictionary_Overflow	= -8
=-9					err_InvalidMemoryAddr	= -9	; invalid memory address
=-10					err_DivideBy0		= -10	; division by zero
=-11					err_OutOfRange		= -11	; result out of range
=-12					err_ArgTypeMismatch	= -12	; argument type mismatch
=-13					err_UndefinedWord	= -13
=-14					err_CompileOnly		= -14	; interpreting a compile-only word
=-15					err_Forget		= -15	; invalid FORGET
=-16					err_EmptyName		= -16	; attempt to use zero-length string as a name
=-17					err_PicStringOverflow	= -17	; pictured numeric output string overflow
=-18					err_ParsedStringOverflow = -18	; parsed string overflow
=-19					err_NameTooLong		= -19	; definition name too long
=-20					err_WriteToRO		= -20	; write to a read-only location
=-21					err_Unsupported		= -21	; unsupported operation  (e.g., AT-XY on a too-dumb terminal)
=-22					err_ControlMismatch	= -22	; control structure mismatch
=-23					err_AddrAlignment	= -23	; address alignment exception
=-24					err_InvalidNumericArg	= -24	; invalid numeric argument
=-25					err_ReturnStackImbalance = -25	; return stack imbalance
=-26					err_LoopParmUnavailable = -26	; loop parameters unavailable
=-27					err_InvalidRecursion	= -27	; invalid recursion
=-28					err_UserInterrupt	= -28	; user interrupt
=-29					err_CompilerNesting	= -29	; compiler nesting
=-30					err_Obsolete		= -30	; obsolescent feature
=-31					err_NoBody		= -31	; >BODY used on non-CREATEd definition
=-32					err_InvalidName		= -32	; invalid name argument (e.g., TO name)
=-33					err_BlockRead		= -33	; block read exception
=-34					err_BlockWrite		= -34	; block write exception
=-35					err_InvalidBlock	= -35	; invalid block number
=-36					err_InvalidFilePosition = -36	; invalid file position
=-37					err_FileIO		= -37	; file I/O exception
=-38					err_FileMissing		= -38	; non-existent file
=-39					err_EndOfFile		= -39	; unexpected end of file
=-40					err_InvalidBase		= -40	; invalid BASE for floating point conversion
=-41					err_LossOfPrecision	= -41	; loss of precision
=-42					err_FPDivideBy0		= -42	; floating-point divide by zero
=-43					err_FPOutOfRange	= -43	; floating-point result out of range
=-44					err_FPStackOverflow	= -44	; floating-point stack overflow
=-45					err_FPStackUnderflow	= -45	; floating-point stack underflow
=-46					err_FPInvalidArg	= -46	; floating-point invalid argument
=-47					err_CompileWordsDeleted = -47	; compilation word list deleted
=-48					err_PostponeInvalid	= -48	; invalid POSTPONE
=-49					err_SearchOrderOverflow = -49	; search-order overflow
=-50					err_SearchOrderUnderflow = -50	; search-order underflow
=-51					err_CompileWordlistChanged = -51 ; compilation word list changed
=-52					err_ControlStackOverflow = -52	; control-flow stack overflow
=-53					err_ExceptionStackOverflow = -53 ; exception stack overflow
=-54					err_FPUnderflow		= -54	; floating-point underflow
=-55					err_FPFault		= -55	; floating-point unidentified fault
=-56					err_Quit		= -56	; QUIT
=-57					err_ConsoleIO		= -57	; exception in sending or receiving a character
=-58					err_BracketIf		= -58	; [IF], [ELSE], or [THEN] exception
=-59					err_Allocate		= -59	; ALLOCATE
=-60					err_Free		= -60	; FREE
=-61					err_Resize		= -61	; RESIZE
=-62					err_CloseFile		= -62	; CLOSE-FILE
=-63					err_CreateFile		= -63	; CREATE-FILE
=-64					err_DeleteFile		= -64	; DELETE-FILE
=-65					err_FilePosition	= -65	; FILE-POSITION
=-66					err_FileSize		= -66	; FILE-SIZE
=-67					err_FileStatus		= -67	; FILE-STATUS
=-68					err_FlushFile		= -68	; FLUSH-FILE
=-69					err_OpenFile		= -69	; OPEN-FILE
=-70					err_ReadFile		= -70	; READ-FILE
=-71					err_ReadLine		= -71	; READ-LINE
=-72					err_RenameFile		= -72	; RENAME-FILE
=-73					err_RepositionFile	= -73	; REPOSITION-FILE
=-74					err_ResizeFile		= -74	; RESIZE-FILE
=-75					err_WriteFile		= -75	; WRITE-FILE
=-76					err_WriteLine		= -76	; WRITE-LINE
=-77					err_MalformedXChar	= -77	; Malformed xchar
=-78					err_Substitute		= -78	; SUBSTITUTE
=-79					err_Replaces		= -79	; REPLACES
=-149					err_Refill		= -149	; Refill failed
=-150					err_Defer		= -150	; Defer not set
=-151					err_NotCompiling	= -151
=-152					err_AlreadyCompiling	= -152
=-153					err_BlockWords		= -153
=-154					err_wordlist     	= -154
.0000					zp0:
>0000					cp:	.word ?		; Compiler Pointer (see HERE)
>0002					InSrc:	.word ?		; input Source for SOURCE-ID
>0004					Cib:	.word ?		; address of current input buffer
>0006					CibLen:	.word ?		; length of current input buffer
>0008					ToIn:	.word ?		; pointer to CIB (>IN in Forth)
>000a					state:	.word ?		; STATE: -1 compile, 0 interpret
>000c					status: .word ?		; internal status flags
>000e					ToHold:	.byte ?		; index for formatted output
>000f					WorkWord: .word ?	; nt or xt of word being compiled (see status)
>0011					dp:	.word ?		; Dictionary Pointer temp
>0013					DoIndex: .word ?	; current Do index
>0015					tmp1:	.word ?		; temporary storage
>0017					tmp2:	.word ?		; temporary storage
>0019					tmp3:	.word ?		; temporary storage
>001b					tmp4:	.word ?		; temporary storage (tmpdsp)
>001d					tmp5:	.word ?		; temporary storage (tmptos)
>001f					editor1: .word ?	; temporary for editors
>0021					editor2: .word ?	; temporary for editors
>0023					editor3: .word ?	; temporary for editors
>0025					DStack:	.fill 20*2	; data stack
=40					DStack0 = *-DStack	;   initial Data Stack index value
.8000					Cold_zp_table:
>8000	65 0b					.word cp0		; cp
>8002	00 00					.word 0			; insrc (SOURCE-ID is 0 for keyboard)
>8004	00 02					.word buffer0		; cib
>8006	00 00					.word 0			; ciblen
>8008	00 00					.word 0			; toin
>800a	00 00					.word 0			; state (0 = interpret)
>800c	00 00					.word 0			; status
=14					Cold_zp_table_length = *-Cold_zp_table
.02ff					User0:
>02ff					PrecisionV: .byte ?	; # of decimal places for FP print
>0300					base:	.word ?		; number radix, default decimal
>0302					nc_limit: .word ?	; limit for Native Compile size
>0304					uf_strip: .word ?	; flag to strip underflow detection code
>0306					output:	.word ?		; vector for EMIT
>0308					input:	.word ?		; vector for KEY
>030a					HaveKey: .word ?	; vector for KEY?
>030c					BlkV:	.word ?		; BLK
>030e					ScrV:	.word ?		; SCR
>0310					CurrentV: .byte ?	; CURRENT (byte) (Compilation wordlist)
>0311					Num_WordlistsV: .byte ?	; #WORDLISTS (byte)
=12					max_wordlists = 12	; Maximum number of wordlists supported
>0312					WordlistsV: .fill 2*max_wordlists	; WORDLISTS (cells)
>032a					Num_OrderV: .byte ?	; #ORDER (byte)
>032b					Search_OrderV: .fill 9	; SEARCH-ORDER (bytes)
.0334					MarkEnd:
>0334					RndState: .dword ?	; random # state
=0					wid_Forth = 0
=1					wid_Editor = 1
=2					wid_Assembler = 2
=3					wid_Root = 3
.800e					Cold_user_table:
>800e	08					.byte 8			; PrecisionV
>800f	0a 00					.word 10		; base
>8011	08 00					.word 8			; nc-limit
>8013	00 00					.word 0			; uf_strip (off by default)
>8015	2b f0					.word kernel_putc	; output
>8017	21 f0					.word kernel_getc	; input
>8019	10 b2					.word Abort		; havekey
>801b	00 00					.word 0				; BLK
>801d	00 00					.word 0				; SCR
>801f	00					.byte 0				; CURRENT = FORTH-WORDLIST
>8020	04					.byte 4				; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>8021	00 cd					.word forth_dictionary_start	; FORTH-WORDLIST
>8023	39 d8					.word editor_dictionary_start	; EDITOR-WORDLIST
>8025	eb d5					.word assembler_dictionary_start ; ASSEMBLER-WORDLIST
>8027	44 cd					.word root_dictionary_start	; ROOT-WORDLIST
>8029	00 00 00 00 00 00 00 00			.word 0,0,0,0,0,0,0,0		; User wordlists
>8031	00 00 00 00 00 00 00 00
>8039	02					.byte 2				; #ORDER
>803a	00 02 00 00 00 00 00 00			.byte wid_Forth,wid_Assembler,0,0,0,0,0,0,0	; search-order
>8042	00
=53					Cold_user_table_length = *-Cold_user_table
=$03					AscCC   = $03	; break (CTRL-c)
=$07					AscBELL = $07	; bell sound
=$08					AscBS   = $08	; backspace
=$09					AscHT	= $09	; tab
=$0a					AscLF   = $0a	; line feed
=$0b					AScVT	= $0b	; vertical tab
=$0c					AscFF	= $0c	; form feed
=$0d					AscCR   = $0d	; carriage return
=$0e					AscCN   = $0e	; CTRL-n (used to recall next input history)
=$10					AscCP   = $10	; CTRL-p (used to recall previous input history)
=$1b					AscESC  = $1b	; escape
=$20					AscSP   = $20	; space
=$22					AscDQuote = $22	; double quote
=$5c					AscBackslash = $5c ; backslash
=$7f					AscDEL  = $7f	; delete (CTRL-h)
=79					MAX_LINE_LENGTH  = 79      ; assumes 80 character lines
>0000							.fill $80 ; name, right justified
=127					wh_NameLastChar	= *-1	;last char of name
>0080					wh_NameLength:	.byte ?	;length of name
>0081					wh_WordListLink: .word ? ;link to nt of previous word in wordlist chain
>0083					wh_CodeLength:	.byte ?	;size of code (0xff = 255 or greater)
>0084					wh_Flags:	.byte ?	; created by adding the flags defined as:
=1					CO =   1 ; Compile Only
=2					AN =   2 ; Always Native Compile (may not be called by JSR)
=4					IM =   4 ; Immediate Word
=8					NN =   8 ; Never Native Compile (must always be called by JSR)
=$10					UF = $10 ; Includes strippable Underflow Check
=$40					R6 = $40 ; strip 6 bytes from begin & end when native compiling
.0085					wh_xt:
=0					WordListLink .var 0	 ; start of FORTH wordlist
>8043	43 6f 6c 64			L1:	.text "Cold"	;  name of word as a string, ending at wh_NameLastChar
>8047	04					.byte *-L1	;wh_NameLength	length of name
>8048	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>804a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>804b	08					.byte NN	;wh_Flags	dictionary flags
=32711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.804c					Cold:
.804c	d8		cld				cld
.804d	a2 ff		ldx #$ff			ldx #rsp0		; Initialize 6502 stack (Return Stack)
.804f	9a		txs				txs
.8050	a2 0d		ldx #$0d			ldx #Cold_zp_table_length-1
.8052					-
.8052	bd 00 80	lda $8000,x			lda Cold_zp_table,x
.8055	95 00		sta $00,x			sta zp0,x
.8057	ca		dex				dex
.8058	10 f8		bpl $8052			bpl -
.805a	a0 34		ldy #$34			ldy #Cold_user_table_length-1
.805c	b9 0e 80	lda $800e,y	-		lda Cold_user_table,y
.805f	99 ff 02	sta $02ff,y			sta User0,y
.8062	88		dey				dey
.8063	10 f7		bpl $805c			bpl -
.8065	20 31 b3	jsr $b331			jsr Empty_Stack
.8068	20 9e a0	jsr $a09e			jsr BlockInit
.806b	20 ce a9	jsr $a9ce			jsr CR
.806e	a9 9c		lda #$9c			lda #<forth_words_start		; push start address
.8070	a0 80		ldy #$80			ldy #>forth_words_start
.8072	20 e5 b5	jsr $b5e5			jsr PushYA
.8075	a9 d2		lda #$d2			lda #<forth_words_len		; push length
.8077	a0 00		ldy #$00			ldy #>forth_words_len
.8079	20 e5 b5	jsr $b5e5			jsr PushYA
.807c	20 29 ae	jsr $ae29			jsr Evaluate
.807f	a9 00		lda #$00			lda #0
.8081	8d 65 07	sta $0765			sta hist_buff
.8084	8d e5 07	sta $07e5			sta hist_buff+$80
.8087	8d 65 08	sta $0865			sta hist_buff+$100
.808a	8d e5 08	sta $08e5			sta hist_buff+$180
.808d	8d 65 09	sta $0965			sta hist_buff+$200
.8090	8d e5 09	sta $09e5			sta hist_buff+$280
.8093	8d 65 0a	sta $0a65			sta hist_buff+$300
.8096	8d e5 0a	sta $0ae5			sta hist_buff+$380
.8099	4c e2 b2	jmp $b2e2			jmp Abort_Core2	;Quit
=80					CL	.var *-(WordListLink+wh_Xt)
=$809c					en = *	; remember here
>804a	50					.byte CL	;wh_CodeLength
.809c					forth_words_start:
>809c	20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>80a4	61 6c 69 20 46 6f 72 74 68 20 32 20 72 65 6d 69
>80b4	78 20 66 6f 72 20 74 68 65 20 36 35 30 32 29 20
>80c4	63 72 20 2e 28 20 56 65 72 73 69 6f 6e 20 33 31
>80d4	2e 20 4d 61 79 20 32 30 32 34 20 29 20 63 72 20
>80e4	2e 28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31
>80f4	34 2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53
>8104	74 65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f
>8114	6c 77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c
>8124	69 20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20
>8134	77 69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20
>8144	4e 4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20
>8154	2e 28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f
>8164	20 65 78 69 74 29 20 63 72 20
=210					forth_words_len = *-forth_words_start
.816e					user_words_start:
>816e					.binary "user_words.asc"
=0					user_words_len = *-user_words_start
>816e	4e 6f 4f 70			L1:	.text "NoOp"	;  name of word as a string, ending at wh_NameLastChar
>8172	04					.byte *-L1	;wh_NameLength	length of name
>8173	c7 7f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8175	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8176	00					.byte 0	;wh_Flags	dictionary flags
=33010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8177	ea		nop				nop
=1					CL	.var *-(WordListLink+wh_Xt)
=$8178					en = *	; remember here
>8175	01					.byte CL	;wh_CodeLength
.8178	60		rts				rts
>8179	63 63 40			L1:	.text "cc@"	;  name of word as a string, ending at wh_NameLastChar
>817c	03					.byte *-L1	;wh_NameLength	length of name
>817d	f2 80					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>817f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8180	08					.byte NN	;wh_Flags	dictionary flags
=33020					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8181	4c 33 f0	jmp $f033	CCAt:		jmp platform_CCAt
=3					CL	.var *-(WordListLink+wh_Xt)
=$8184					en = *	; remember here
>817f	03					.byte CL	;wh_CodeLength
>8184	42 79 65			L1:	.text "Bye"	;  name of word as a string, ending at wh_NameLastChar
>8187	03					.byte *-L1	;wh_NameLength	length of name
>8188	fc 80					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>818a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>818b	08					.byte NN	;wh_Flags	dictionary flags
=33031					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.818c	4c 32 f0	jmp $f032	Bye:		jmp platform_bye
=3					CL	.var *-(WordListLink+wh_Xt)
=$818f					en = *	; remember here
>818a	03					.byte CL	;wh_CodeLength
>818f	54 79 70 65 53 79 6d 62		L1:	.text "TypeSymbol"	;  name of word as a string, ending at wh_NameLastChar
>8197	6f 6c
>8199	0a					.byte *-L1	;wh_NameLength	length of name
>819a	07 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>819c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>819d	08					.byte NN	;wh_Flags	dictionary flags
=33049					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.819e	20 c5 cb	jsr $cbc5	TypeSymbol:	jsr Space
.81a1	20 4a cd	jsr $cd4a			jsr Dup
.81a4	a9 24		lda #$24			lda #'$'
.81a6	20 b8 cb	jsr $cbb8			jsr Emit_A
.81a9	20 5b a7	jsr $a75b			jsr Dot_Hex
.81ac					TypeSymbolN:
.81ac	20 c5 cb	jsr $cbc5			jsr Space
.81af	a9 28		lda #$28			lda #'('
.81b1	20 b8 cb	jsr $cbb8			jsr Emit_A
.81b4	20 c5 cb	jsr $cbc5			jsr Space
.81b7	20 de 81	jsr $81de			jsr DictSearchXt	; ( addr_end addr operand offset nt )
.81ba	20 21 bc	jsr $bc21			jsr Name_To_String	; Change nt into the name
.81bd	20 d2 cb	jsr $cbd2			jsr Type		; print it.
.81c0	20 c5 cb	jsr $cbc5			jsr Space
.81c3	b5 25		lda $25,x			lda DStack+0,x		; if non-zero offset
.81c5	15 26		ora $26,x			ora DStack+1,x
.81c7	f0 0b		beq $81d4			beq +
.81c9	a9 2b		lda #$2b			lda #'+'		;   print offset
.81cb	20 b8 cb	jsr $cbb8			jsr Emit_A
.81ce	20 4a cd	jsr $cd4a			jsr Dup
.81d1	20 f9 c9	jsr $c9f9			jsr U_Dot
.81d4	e8		inx		+		inx
.81d5	e8		inx				inx
.81d6	a9 29		lda #$29			lda #')'
.81d8	20 b8 cb	jsr $cbb8			jsr Emit_A
.81db	4c c5 cb	jmp $cbc5			jmp Space
=64					CL	.var *-(WordListLink+wh_Xt)
=$81de					en = *	; remember here
>819c	40					.byte CL	;wh_CodeLength
.81de					DictSearchXt:
.81de	ca		dex				dex
.81df	ca		dex				dex
.81e0	20 21 cd	jsr $cd21			jsr Over
.81e3	a9 ff		lda #$ff			lda #$ff		; init best offset
.81e5	95 2a		sta $2a,x			sta DStack+5,x		; ( offset nt xt )
.81e7	a9 fe		lda #$fe			lda #$fe		; for each wordlist
.81e9	48		pha				pha
.81ea	68		pla		_ListNext:	pla
.81eb	18		clc				clc
.81ec	69 02		adc #$02			adc #2			; to next wordlist
.81ee	c9 18		cmp #$18			cmp #max_wordlists*2
.81f0	b0 56		bcs $8248			bcs _Done
.81f2	48		pha				pha
.81f3	a8		tay				tay
.81f4	b9 12 03	lda $0312,y			lda WordlistsV+0,y	; Get the DP for that wordlist.
.81f7	85 15		sta $15				sta tmp1+0
.81f9	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.81fc	85 16		sta $16				sta tmp1+1
.81fe	d0 11		bne $8211			bne _WordTest
.8200	f0 e8		beq $81ea			beq _ListNext		;   empty list?
.8202	a0 82		ldy #$82	_WordNext:	ldy #wh_WordListLink+1
.8204	b1 15		lda ($15),y			lda (tmp1),y
.8206	f0 e2		beq $81ea			beq _ListNext		; end of Dictionary?
.8208	48		pha				pha
.8209	88		dey				dey
.820a	b1 15		lda ($15),y			lda (tmp1),y
.820c	85 15		sta $15				sta tmp1+0
.820e	68		pla				pla
.820f	85 16		sta $16				sta tmp1+1
.8211	18		clc		_WordTest:	clc			; tmp2 = xt of word
.8212	a5 15		lda $15				lda tmp1+0
.8214	69 85		adc #$85			adc #wh_xt
.8216	85 17		sta $17				sta tmp2+0
.8218	a5 16		lda $16				lda tmp1+1
.821a	69 00		adc #$00			adc #0
.821c	85 18		sta $18				sta tmp2+1
.821e	38		sec				sec			; tmp2 = xt offset for this word
.821f	b5 25		lda $25,x			lda DStack+0,x
.8221	e5 17		sbc $17				sbc tmp2+0
.8223	85 17		sta $17				sta tmp2+0
.8225	b5 26		lda $26,x			lda DStack+1,x
.8227	e5 18		sbc $18				sbc tmp2+1
.8229	85 18		sta $18				sta tmp2+1
.822b	a5 17		lda $17				lda tmp2+0		; this word have smaller offset?
.822d	d5 29		cmp $29,x			cmp DStack+4,x
.822f	a5 18		lda $18				lda tmp2+1
.8231	f5 2a		sbc $2a,x			sbc DStack+5,x
.8233	b0 cd		bcs $8202			bcs _WordNext
.8235	a5 17		lda $17				lda tmp2+0		; save this better offset
.8237	a4 18		ldy $18				ldy tmp2+1
.8239	95 29		sta $29,x			sta DStack+4,x
.823b	94 2a		sty $2a,x			sty DStack+5,x
.823d	a5 15		lda $15				lda tmp1+0		; save this better nt
.823f	a4 16		ldy $16				ldy tmp1+1
.8241	95 27		sta $27,x			sta DStack+2,x
.8243	94 28		sty $28,x			sty DStack+3,x
.8245	4c 02 82	jmp $8202			jmp _WordNext
.8248	e8		inx		_Done:		inx			; Drop xt
.8249	e8		inx				inx
.824a	60		rts				rts
>824b	52 6e 64 53 74 61 74 65		L1:	.text "RndState"	;  name of word as a string, ending at wh_NameLastChar
>8253	08					.byte *-L1	;wh_NameLength	length of name
>8254	19 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8256	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8257	08					.byte NN	;wh_Flags	dictionary flags
=33235					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8258	a9 34		lda #$34			lda #<RndState
.825a	a0 03		ldy #$03			ldy #>RndState
.825c	4c e5 b5	jmp $b5e5			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$825f					en = *	; remember here
>8256	07					.byte CL	;wh_CodeLength
.825f					Rand:
.825f	4e 35 03	lsr $0335			lsr RndState+1
.8262	6e 34 03	ror $0334			ror RndState+0
.8265	6e 37 03	ror $0337			ror RndState+3
.8268	6e 36 03	ror $0336			ror RndState+2
.826b	90 10		bcc $827d			bcc _19			;  IfCs,
.826d	ad 35 03	lda $0335			lda RndState+1
.8270	49 d0		eor #$d0			eor #$d0
.8272	8d 35 03	sta $0335			sta RndState+1
.8275	ad 36 03	lda $0336			lda RndState+2
.8278	49 01		eor #$01			eor #$01
.827a	8d 36 03	sta $0336			sta RndState+2
.827d					_19:
.827d	60		rts				rts
>827e	52 61 6e 64 4d			L1:	.text "RandM"	;  name of word as a string, ending at wh_NameLastChar
>8283	05					.byte *-L1	;wh_NameLength	length of name
>8284	d3 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8286	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8287	08					.byte NN	;wh_Flags	dictionary flags
=33283					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8288	20 4a cd	jsr $cd4a	RandM:		jsr Dup		; ( umod umod )
.828b	20 5f 82	jsr $825f			jsr Rand
.828e	ad 36 03	lda $0336			lda RndState+2
.8291	ac 37 03	ldy $0337			ldy RndState+3
.8294	95 27		sta $27,x			sta DStack+2,x
.8296	94 28		sty $28,x			sty DStack+3,x	; ( rand umod )
.8298	4c f0 ad	jmp $adf0			jmp Mod
=19					CL	.var *-(WordListLink+wh_Xt)
=$829b					en = *	; remember here
>8286	13					.byte CL	;wh_CodeLength
=10					FDim = 10		; # entries in FP stack
>004d					fp:	.byte ?		; floating-point stack index
>004e					FSExp:   .fill FDim	; FP stack exponent     array
>0058					FSMant0: .fill FDim	; FP stack mantissa MSB array
>0062					FSMant1: .fill FDim	; FP stack mantissa 2nd array
>006c					FSMant2: .fill FDim	; FP stack mantissa 3rd array
>0076					FSMant3: .fill FDim	; FP stack mantissa 4th array
>829b	46 50				L1:	.text "FP"	;  name of word as a string, ending at wh_NameLastChar
>829d	02					.byte *-L1	;wh_NameLength	length of name
>829e	03 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82a0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82a1	08					.byte NN	;wh_Flags	dictionary flags
=33309					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82a2	a9 4d		lda #$4d			lda #fp
.82a4	4c 27 b6	jmp $b627			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$82a7					en = *	; remember here
>82a0	05					.byte CL	;wh_CodeLength
>82a7	46 44 69 6d			L1:	.text "FDim"	;  name of word as a string, ending at wh_NameLastChar
>82ab	04					.byte *-L1	;wh_NameLength	length of name
>82ac	1d 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82ae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82af	08					.byte NN	;wh_Flags	dictionary flags
=33323					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82b0	a9 0a		lda #$0a			lda #FDim
.82b2	4c 27 b6	jmp $b627			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$82b5					en = *	; remember here
>82ae	05					.byte CL	;wh_CodeLength
>82b5	46 53 45 78 70			L1:	.text "FSExp"	;  name of word as a string, ending at wh_NameLastChar
>82ba	05					.byte *-L1	;wh_NameLength	length of name
>82bb	2b 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82bd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82be	08					.byte NN	;wh_Flags	dictionary flags
=33338					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82bf	a9 4e		lda #$4e			lda #FSExp
.82c1	4c 27 b6	jmp $b627			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$82c4					en = *	; remember here
>82bd	05					.byte CL	;wh_CodeLength
>82c4	46 53 4d 61 6e 74 30		L1:	.text "FSMant0"	;  name of word as a string, ending at wh_NameLastChar
>82cb	07					.byte *-L1	;wh_NameLength	length of name
>82cc	3a 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82cf	08					.byte NN	;wh_Flags	dictionary flags
=33355					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82d0	a9 58		lda #$58			lda #FSMant0
.82d2	4c 27 b6	jmp $b627			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$82d5					en = *	; remember here
>82ce	05					.byte CL	;wh_CodeLength
>82d5	46 4d 61 6e 74 31		L1:	.text "FMant1"	;  name of word as a string, ending at wh_NameLastChar
>82db	06					.byte *-L1	;wh_NameLength	length of name
>82dc	4b 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82df	08					.byte NN	;wh_Flags	dictionary flags
=33371					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82e0	a9 62		lda #$62			lda #FSMant1
.82e2	4c 27 b6	jmp $b627			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$82e5					en = *	; remember here
>82de	05					.byte CL	;wh_CodeLength
>82e5	46 4d 61 6e 74 32		L1:	.text "FMant2"	;  name of word as a string, ending at wh_NameLastChar
>82eb	06					.byte *-L1	;wh_NameLength	length of name
>82ec	5b 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82ef	08					.byte NN	;wh_Flags	dictionary flags
=33387					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82f0	a9 6c		lda #$6c			lda #FSMant2
.82f2	4c 27 b6	jmp $b627			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$82f5					en = *	; remember here
>82ee	05					.byte CL	;wh_CodeLength
>82f5	46 4d 61 6e 74 33		L1:	.text "FMant3"	;  name of word as a string, ending at wh_NameLastChar
>82fb	06					.byte *-L1	;wh_NameLength	length of name
>82fc	6b 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82ff	08					.byte NN	;wh_Flags	dictionary flags
=33403					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8300	a9 76		lda #$76			lda #FSMant3
.8302	4c 27 b6	jmp $b627			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8305					en = *	; remember here
>82fe	05					.byte CL	;wh_CodeLength
>8305	46 6c 6f 61 74 2b		L1:	.text "Float+"	;  name of word as a string, ending at wh_NameLastChar
>830b	06					.byte *-L1	;wh_NameLength	length of name
>830c	7b 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>830e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>830f	08					.byte NN	;wh_Flags	dictionary flags
=33419					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8310	a9 05		lda #$05	FloatPlus:	lda #5
.8312	4c fb c7	jmp $c7fb			jmp plus_a
=5					CL	.var *-(WordListLink+wh_Xt)
=$8315					en = *	; remember here
>830e	05					.byte CL	;wh_CodeLength
>8315	46 6c 6f 61 74 73		L1:	.text "Floats"	;  name of word as a string, ending at wh_NameLastChar
>831b	06					.byte *-L1	;wh_NameLength	length of name
>831c	8b 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>831e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>831f	08					.byte NN	;wh_Flags	dictionary flags
=33435					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8320	a9 05		lda #$05	Floats:		lda #5
.8322	20 27 b6	jsr $b627			jsr PushZA
.8325	4c fa ac	jmp $acfa			jmp Star
=8					CL	.var *-(WordListLink+wh_Xt)
=$8328					en = *	; remember here
>831e	08					.byte CL	;wh_CodeLength
>8328	50 72 65 63 69 73 69 6f		L1:	.text "Precision"	;  name of word as a string, ending at wh_NameLastChar
>8330	6e
>8331	09					.byte *-L1	;wh_NameLength	length of name
>8332	9b 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8334	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8335	08					.byte NN	;wh_Flags	dictionary flags
=33457					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8336	ad ff 02	lda $02ff			lda PrecisionV
.8339	4c 27 b6	jmp $b627			jmp PushZA
=6					CL	.var *-(WordListLink+wh_Xt)
=$833c					en = *	; remember here
>8334	06					.byte CL	;wh_CodeLength
.833c	60		rts				rts
>833d	53 65 74 2d 50 72 65 63		L1:	.text "Set-Precision"	;  name of word as a string, ending at wh_NameLastChar
>8345	69 73 69 6f 6e
>834a	0d					.byte *-L1	;wh_NameLength	length of name
>834b	b1 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>834d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>834e	08					.byte NN	;wh_Flags	dictionary flags
=33482					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.834f	20 39 b2	jsr $b239			jsr PopA
.8352	8d ff 02	sta $02ff			sta PrecisionV
=6					CL	.var *-(WordListLink+wh_Xt)
=$8355					en = *	; remember here
>834d	06					.byte CL	;wh_CodeLength
.8355	60		rts				rts
>8356	46 44 72 6f 70			L1:	.text "FDrop"	;  name of word as a string, ending at wh_NameLastChar
>835b	05					.byte *-L1	;wh_NameLength	length of name
>835c	ca 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>835e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>835f	00					.byte 0	;wh_Flags	dictionary flags
=33499					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8360	e6 4d		inc $4d		FDrop:		inc fp
=2					CL	.var *-(WordListLink+wh_Xt)
=$8362					en = *	; remember here
>835e	02					.byte CL	;wh_CodeLength
.8362	60		rts				rts
>8363	46 32 44 72 6f 70		L1:	.text "F2Drop"	;  name of word as a string, ending at wh_NameLastChar
>8369	06					.byte *-L1	;wh_NameLength	length of name
>836a	db 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>836c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>836d	00					.byte 0	;wh_Flags	dictionary flags
=33513					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.836e	e6 4d		inc $4d		F2Drop:		inc fp
.8370	e6 4d		inc $4d				inc fp
=4					CL	.var *-(WordListLink+wh_Xt)
=$8372					en = *	; remember here
>836c	04					.byte CL	;wh_CodeLength
.8372	60		rts				rts
>8373	46 44 65 70 74 68		L1:	.text "FDepth"	;  name of word as a string, ending at wh_NameLastChar
>8379	06					.byte *-L1	;wh_NameLength	length of name
>837a	e9 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>837c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>837d	08					.byte NN	;wh_Flags	dictionary flags
=33529					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.837e	a9 0a		lda #$0a	FDepth:		lda #FDim
.8380	38		sec				sec
.8381	e5 4d		sbc $4d				sbc fp
.8383	4c 27 b6	jmp $b627			jmp PushZA
=8					CL	.var *-(WordListLink+wh_Xt)
=$8386					en = *	; remember here
>837c	08					.byte CL	;wh_CodeLength
>8386	46 41 6c 6c 6f 63 58		L1:	.text "FAllocX"	;  name of word as a string, ending at wh_NameLastChar
>838d	07					.byte *-L1	;wh_NameLength	length of name
>838e	f9 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8390	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8391	08					.byte NN	;wh_Flags	dictionary flags
=33549					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8392	86 15		stx $15		FAllocX:	stx tmp1+0	; save data stack index
.8394	a6 4d		ldx $4d				ldx fp		; X= floating point stack index
.8396	e0 0b		cpx #$0b			cpx #FDim+1	; underflow?
.8398	b0 0d		bcs $83a7			bcs _underflow
.839a	ca		dex				dex		; alloc FP stack entry
.839b	30 03		bmi $83a0			bmi _overflow
.839d	86 4d		stx $4d				stx fp
.839f	60		rts				rts		; return X= FP stack index
.83a0	a6 15		ldx $15		_overflow:	ldx tmp1+0	; restore data stack index
.83a2	a9 d4		lda #$d4			lda #$100+err_FPStackOverflow
.83a4	4c c4 b2	jmp $b2c4			jmp ThrowA
.83a7	a6 15		ldx $15		_underflow:	ldx tmp1+0	; restore data stack index
.83a9	a9 d3		lda #$d3			lda #$100+err_FPStackUnderflow
.83ab	4c c4 b2	jmp $b2c4			jmp ThrowA
=28					CL	.var *-(WordListLink+wh_Xt)
=$83ae					en = *	; remember here
>8390	1c					.byte CL	;wh_CodeLength
>83ae	46 4d 61 78			L1:	.text "FMax"	;  name of word as a string, ending at wh_NameLastChar
>83b2	04					.byte *-L1	;wh_NameLength	length of name
>83b3	0d 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83b5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83b6	08					.byte NN	;wh_Flags	dictionary flags
=33586					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83b7	20 a5 85	jsr $85a5	FMax:		jsr FCmpA
.83ba	10 a4		bpl $8360			bpl FDrop
.83bc	30 19		bmi $83d7			bmi FNip
=7					CL	.var *-(WordListLink+wh_Xt)
=$83be					en = *	; remember here
>83b5	07					.byte CL	;wh_CodeLength
>83be	46 4d 69 6e			L1:	.text "FMin"	;  name of word as a string, ending at wh_NameLastChar
>83c2	04					.byte *-L1	;wh_NameLength	length of name
>83c3	32 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83c5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83c6	08					.byte NN	;wh_Flags	dictionary flags
=33602					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83c7	20 a5 85	jsr $85a5	FMin:		jsr FCmpA
.83ca	30 94		bmi $8360			bmi FDrop
.83cc	10 09		bpl $83d7			bpl FNip
=7					CL	.var *-(WordListLink+wh_Xt)
=$83ce					en = *	; remember here
>83c5	07					.byte CL	;wh_CodeLength
>83ce	46 4e 69 70			L1:	.text "FNip"	;  name of word as a string, ending at wh_NameLastChar
>83d2	04					.byte *-L1	;wh_NameLength	length of name
>83d3	42 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83d5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83d6	00					.byte 0	;wh_Flags	dictionary flags
=33618					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83d7	86 15		stx $15		FNip:		stx tmp1		; save data stack index
.83d9	a6 4d		ldx $4d				ldx fp			; get FP stack index
.83db	b5 4e		lda $4e,x			lda FSExp+0,x		; copy exponent
.83dd	95 4f		sta $4f,x			sta FSExp+1,x
.83df	b5 58		lda $58,x			lda FSMant0+0,x		; copy mantissa
.83e1	95 59		sta $59,x			sta FSMant0+1,x
.83e3	b5 62		lda $62,x			lda FSMant1+0,x
.83e5	95 63		sta $63,x			sta FSMant1+1,x
.83e7	b5 6c		lda $6c,x			lda FSMant2+0,x
.83e9	95 6d		sta $6d,x			sta FSMant2+1,x
.83eb	b5 76		lda $76,x			lda FSMant3+0,x
.83ed	95 77		sta $77,x			sta FSMant3+1,x
.83ef	e6 4d		inc $4d				inc fp			; FDrop
.83f1	a6 15		ldx $15				ldx tmp1		; restore data stack index
=28					CL	.var *-(WordListLink+wh_Xt)
=$83f3					en = *	; remember here
>83d5	1c					.byte CL	;wh_CodeLength
.83f3	60		rts				rts
>83f4	46 44 75 70			L1:	.text "FDup"	;  name of word as a string, ending at wh_NameLastChar
>83f8	04					.byte *-L1	;wh_NameLength	length of name
>83f9	52 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83fb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83fc	00					.byte 0	;wh_Flags	dictionary flags
=33656					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83fd	20 92 83	jsr $8392	FDup:		jsr FAllocX		; alloc FP stack entry
.8400	b5 4f		lda $4f,x			lda FSExp+1,x		; copy exponent
.8402	95 4e		sta $4e,x			sta FSExp+0,x
.8404	b5 59		lda $59,x			lda FSMant0+1,x		; copy mantissa
.8406	95 58		sta $58,x			sta FSMant0+0,x
.8408	b5 63		lda $63,x			lda FSMant1+1,x
.840a	95 62		sta $62,x			sta FSMant1+0,x
.840c	b5 6d		lda $6d,x			lda FSMant2+1,x
.840e	95 6c		sta $6c,x			sta FSMant2+0,x
.8410	b5 77		lda $77,x			lda FSMant3+1,x
.8412	95 76		sta $76,x			sta FSMant3+0,x
.8414	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
=25					CL	.var *-(WordListLink+wh_Xt)
=$8416					en = *	; remember here
>83fb	19					.byte CL	;wh_CodeLength
.8416	60		rts				rts
>8417	46 4f 76 65 72			L1:	.text "FOver"	;  name of word as a string, ending at wh_NameLastChar
>841c	05					.byte *-L1	;wh_NameLength	length of name
>841d	78 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>841f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8420	00					.byte 0	;wh_Flags	dictionary flags
=33692					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8421	20 92 83	jsr $8392	FOver:		jsr FAllocX		; alloc FP stack entry
.8424	b5 50		lda $50,x			lda FSExp+2,x		; copy exponent
.8426	95 4e		sta $4e,x			sta FSExp+0,x
.8428	b5 5a		lda $5a,x			lda FSMant0+2,x		; copy mantissa
.842a	95 58		sta $58,x			sta FSMant0+0,x
.842c	b5 64		lda $64,x			lda FSMant1+2,x
.842e	95 62		sta $62,x			sta FSMant1+0,x
.8430	b5 6e		lda $6e,x			lda FSMant2+2,x
.8432	95 6c		sta $6c,x			sta FSMant2+0,x
.8434	b5 78		lda $78,x			lda FSMant3+2,x
.8436	95 76		sta $76,x			sta FSMant3+0,x
.8438	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
=25					CL	.var *-(WordListLink+wh_Xt)
=$843a					en = *	; remember here
>841f	19					.byte CL	;wh_CodeLength
.843a	60		rts				rts
>843b	46 50 69 63 6b			L1:	.text "FPick"	;  name of word as a string, ending at wh_NameLastChar
>8440	05					.byte *-L1	;wh_NameLength	length of name
>8441	9c 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8443	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8444	00					.byte 0	;wh_Flags	dictionary flags
=33728					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8445	20 39 b2	jsr $b239	FPick:		jsr PopA		; pop u
.8448	18		clc		FPickA:		clc
.8449	65 4d		adc $4d				adc fp
.844b	a8		tay		FPick3:		tay
.844c	20 92 83	jsr $8392			jsr FAllocX
.844f	b9 4e 00	lda $004e,y			lda FSExp,y		; copy exponent
.8452	95 4e		sta $4e,x			sta FSExp,x
.8454	b9 58 00	lda $0058,y			lda FSMant0,y		; copy mantissa
.8457	95 58		sta $58,x			sta FSMant0,x
.8459	b9 62 00	lda $0062,y			lda FSMant1,y
.845c	95 62		sta $62,x			sta FSMant1,x
.845e	b9 6c 00	lda $006c,y			lda FSMant2,y
.8461	95 6c		sta $6c,x			sta FSMant2,x
.8463	b9 76 00	lda $0076,y			lda FSMant3,y
.8466	95 76		sta $76,x			sta FSMant3,x
.8468	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
=37					CL	.var *-(WordListLink+wh_Xt)
=$846a					en = *	; remember here
>8443	25					.byte CL	;wh_CodeLength
.846a	60		rts				rts
>846b	46 32 44 75 70			L1:	.text "F2Dup"	;  name of word as a string, ending at wh_NameLastChar
>8470	05					.byte *-L1	;wh_NameLength	length of name
>8471	c0 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8473	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8474	08					.byte NN	;wh_Flags	dictionary flags
=33776					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8475	20 21 84	jsr $8421	F2Dup:		jsr FOver
.8478	4c 21 84	jmp $8421			jmp FOver
=6					CL	.var *-(WordListLink+wh_Xt)
=$847b					en = *	; remember here
>8473	06					.byte CL	;wh_CodeLength
>847b	46 53 77 61 70			L1:	.text "FSwap"	;  name of word as a string, ending at wh_NameLastChar
>8480	05					.byte *-L1	;wh_NameLength	length of name
>8481	f0 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8483	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8484	00					.byte 0	;wh_Flags	dictionary flags
=33792					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8485	86 15		stx $15		FSwap:		stx tmp1		; save data stack index
.8487	a6 4d		ldx $4d				ldx fp			; X=FP stack index
.8489	b5 4e		lda $4e,x			lda FSExp+0,x		; do FSExp
.848b	b4 4f		ldy $4f,x			ldy FSExp+1,x
.848d	95 4f		sta $4f,x			sta FSExp+1,x
.848f	94 4e		sty $4e,x			sty FSExp+0,x
.8491	b5 58		lda $58,x			lda FSMant0+0,x		; do FSMant0
.8493	b4 59		ldy $59,x			ldy FSMant0+1,x
.8495	95 59		sta $59,x			sta FSMant0+1,x
.8497	94 58		sty $58,x			sty FSMant0+0,x
.8499	b5 62		lda $62,x			lda FSMant1+0,x		; do FSMant1
.849b	b4 63		ldy $63,x			ldy FSMant1+1,x
.849d	95 63		sta $63,x			sta FSMant1+1,x
.849f	94 62		sty $62,x			sty FSMant1+0,x
.84a1	b5 6c		lda $6c,x			lda FSMant2+0,x		; do FSMant2
.84a3	b4 6d		ldy $6d,x			ldy FSMant2+1,x
.84a5	95 6d		sta $6d,x			sta FSMant2+1,x
.84a7	94 6c		sty $6c,x			sty FSMant2+0,x
.84a9	b5 76		lda $76,x			lda FSMant3+0,x		; do FSMant3
.84ab	b4 77		ldy $77,x			ldy FSMant3+1,x
.84ad	95 77		sta $77,x			sta FSMant3+1,x
.84af	94 76		sty $76,x			sty FSMant3+0,x
.84b1	a6 15		ldx $15				ldx tmp1		; restore data stack index
=46					CL	.var *-(WordListLink+wh_Xt)
=$84b3					en = *	; remember here
>8483	2e					.byte CL	;wh_CodeLength
.84b3	60		rts				rts
>84b4	46 54 75 63 6b			L1:	.text "FTuck"	;  name of word as a string, ending at wh_NameLastChar
>84b9	05					.byte *-L1	;wh_NameLength	length of name
>84ba	00 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84bd	08					.byte NN	;wh_Flags	dictionary flags
=33849					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84be	20 85 84	jsr $8485	FTuck:		jsr FSwap
.84c1	4c 21 84	jmp $8421			jmp FOver
=6					CL	.var *-(WordListLink+wh_Xt)
=$84c4					en = *	; remember here
>84bc	06					.byte CL	;wh_CodeLength
>84c4	46 52 6f 74			L1:	.text "FRot"	;  name of word as a string, ending at wh_NameLastChar
>84c8	04					.byte *-L1	;wh_NameLength	length of name
>84c9	39 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84cb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84cc	00					.byte 0	;wh_Flags	dictionary flags
=33864					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84cd	86 15		stx $15		FRot:		stx tmp1		; save data stack index
.84cf	a5 4d		lda $4d				lda fp			; for FSMant3, FSMant2, FSMant1, FSMant0, FSExp
.84d1	18		clc				clc
.84d2	69 28		adc #$28			adc #4*FDim
.84d4	d0 03		bne $84d9			bne _3
.84d6	8a		txa		_2:		txa			;    next byte
.84d7	e9 0a		sbc #$0a			sbc #FDim
.84d9	aa		tax		_3:		tax
.84da	b5 50		lda $50,x			lda FSExp+2,x		;   do a byte
.84dc	b4 4f		ldy $4f,x			ldy FSExp+1,x
.84de	94 50		sty $50,x			sty FSExp+2,x
.84e0	b4 4e		ldy $4e,x			ldy FSExp+0,x
.84e2	94 4f		sty $4f,x			sty FSExp+1,x
.84e4	95 4e		sta $4e,x			sta FSExp+0,x
.84e6	e4 4d		cpx $4d				cpx fp			; done?
.84e8	d0 ec		bne $84d6			bne _2
.84ea	a6 15		ldx $15				ldx tmp1		; restore param stack index
=31					CL	.var *-(WordListLink+wh_Xt)
=$84ec					en = *	; remember here
>84cb	1f					.byte CL	;wh_CodeLength
.84ec	60		rts				rts
>84ed	46 2d 52 6f 74			L1:	.text "F-Rot"	;  name of word as a string, ending at wh_NameLastChar
>84f2	05					.byte *-L1	;wh_NameLength	length of name
>84f3	48 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84f5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84f6	08					.byte NN	;wh_Flags	dictionary flags
=33906					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84f7	20 cd 84	jsr $84cd	FMRot:		jsr FRot
.84fa	4c cd 84	jmp $84cd			jmp FRot
=6					CL	.var *-(WordListLink+wh_Xt)
=$84fd					en = *	; remember here
>84f5	06					.byte CL	;wh_CodeLength
>84fd	46 40				L1:	.text "F@"	;  name of word as a string, ending at wh_NameLastChar
>84ff	02					.byte *-L1	;wh_NameLength	length of name
>8500	72 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8502	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8503	00					.byte 0	;wh_Flags	dictionary flags
=33919					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8504	20 55 b2	jsr $b255	FAt:		jsr PopYA		; pop addr
.8507	85 17		sta $17		FAt_YA:		sta tmp2+0		; save addr
.8509	84 18		sty $18				sty tmp2+1
.850b	20 92 83	jsr $8392	FAt_Tmp2:	jsr FAllocX		; alloc FP stack entry
.850e	a0 00		ldy #$00			ldy #0			; copy mantissa
.8510	b1 17		lda ($17),y			lda (tmp2),y
.8512	95 76		sta $76,x			sta FSMant3,x
.8514	c8		iny				iny
.8515	b1 17		lda ($17),y			lda (tmp2),y
.8517	95 6c		sta $6c,x			sta FSMant2,x
.8519	c8		iny				iny
.851a	b1 17		lda ($17),y			lda (tmp2),y
.851c	95 62		sta $62,x			sta FSMant1,x
.851e	c8		iny				iny
.851f	b1 17		lda ($17),y			lda (tmp2),y
.8521	95 58		sta $58,x			sta FSMant0,x
.8523	c8		iny				iny			; copy exponent
.8524	b1 17		lda ($17),y			lda (tmp2),y
.8526	95 4e		sta $4e,x			sta FSExp,x
.8528	a6 15		ldx $15				ldx tmp1		; restore data stack index
=38					CL	.var *-(WordListLink+wh_Xt)
=$852a					en = *	; remember here
>8502	26					.byte CL	;wh_CodeLength
.852a	60		rts				rts
>852b	46 21				L1:	.text "F!"	;  name of word as a string, ending at wh_NameLastChar
>852d	02					.byte *-L1	;wh_NameLength	length of name
>852e	7f 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8530	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8531	00					.byte 0	;wh_Flags	dictionary flags
=33965					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8532	20 55 b2	jsr $b255	FStore:		jsr PopYA		; pop addr
.8535	85 15		sta $15		FStore_YA:	sta tmp1+0		; save addr
.8537	84 16		sty $16				sty tmp1+1
.8539	86 17		stx $17				stx tmp2		; save data stack index
.853b	a6 4d		ldx $4d				ldx fp			; Y= FP stack index
.853d	b5 76		lda $76,x			lda FSMant3,x		; copy mantissa
.853f	a0 00		ldy #$00			ldy #0
.8541	91 15		sta ($15),y			sta (tmp1),y
.8543	b5 6c		lda $6c,x			lda FSMant2,x
.8545	c8		iny				iny
.8546	91 15		sta ($15),y			sta (tmp1),y
.8548	b5 62		lda $62,x			lda FSMant1,x
.854a	c8		iny				iny
.854b	91 15		sta ($15),y			sta (tmp1),y
.854d	b5 58		lda $58,x			lda FSMant0,x
.854f	c8		iny				iny
.8550	91 15		sta ($15),y			sta (tmp1),y
.8552	b5 4e		lda $4e,x			lda FSExp,x		; copy exponent
.8554	c8		iny				iny
.8555	91 15		sta ($15),y			sta (tmp1),y
.8557	e6 4d		inc $4d				inc fp			; FDrop
.8559	a6 17		ldx $17				ldx tmp2		; restore data stack index
=41					CL	.var *-(WordListLink+wh_Xt)
=$855b					en = *	; remember here
>8530	29					.byte CL	;wh_CodeLength
.855b	60		rts				rts
>855c	46 2c				L1:	.text "F,"	;  name of word as a string, ending at wh_NameLastChar
>855e	02					.byte *-L1	;wh_NameLength	length of name
>855f	ad 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8561	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8562	08					.byte NN	;wh_Flags	dictionary flags
=34014					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8563	a5 00		lda $00		FComma:		lda cp+0
.8565	a4 01		ldy $01				ldy cp+1
.8567	20 35 85	jsr $8535			jsr FStore_YA
.856a	a9 05		lda #$05			lda #5			; Float
.856c	20 27 b6	jsr $b627			jsr PushZA
.856f	4c f1 be	jmp $bef1			jmp Allot
=15					CL	.var *-(WordListLink+wh_Xt)
=$8572					en = *	; remember here
>8561	0f					.byte CL	;wh_CodeLength
>8572	46 30 21			L1:	.text "F0!"	;  name of word as a string, ending at wh_NameLastChar
>8575	03					.byte *-L1	;wh_NameLength	length of name
>8576	de 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8578	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8579	08					.byte NN	;wh_Flags	dictionary flags
=34037					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.857a	20 55 b2	jsr $b255	FZStore:	jsr PopYA		; pop addr
.857d	85 15		sta $15		FZStore_YA:	sta tmp1+0
.857f	84 16		sty $16				sty tmp1+1
.8581	a9 00		lda #$00			lda #0
.8583	a0 04		ldy #$04			ldy #5-1
.8585	91 15		sta ($15),y	-		sta (tmp1),y
.8587	88		dey				dey
.8588	10 fb		bpl $8585			bpl -
=16					CL	.var *-(WordListLink+wh_Xt)
=$858a					en = *	; remember here
>8578	10					.byte CL	;wh_CodeLength
.858a	60		rts				rts
>858b	46 43 6d 70			L1:	.text "FCmp"	;  name of word as a string, ending at wh_NameLastChar
>858f	04					.byte *-L1	;wh_NameLength	length of name
>8590	f5 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8592	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8593	08					.byte NN	;wh_Flags	dictionary flags
=34063					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8594	20 a5 85	jsr $85a5			jsr FCmpA		; compare #s
.8597	a8		tay				tay			; return >0, 0, <0
.8598	4c e5 b5	jmp $b5e5			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$859b					en = *	; remember here
>8592	07					.byte CL	;wh_CodeLength
>859b	46 43 6d 70 41			L1:	.text "FCmpA"	;  name of word as a string, ending at wh_NameLastChar
>85a0	05					.byte *-L1	;wh_NameLength	length of name
>85a1	0f 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85a3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85a4	08					.byte NN	;wh_Flags	dictionary flags
=34080					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85a5	86 15		stx $15		FCmpA:		stx tmp1		; save data stack index
.85a7	a6 4d		ldx $4d				ldx fp			; X= FP stack index
.85a9	b5 58		lda $58,x			lda FSMant0+0,x		; r2 mantissa = 0 ?
.85ab	f0 35		beq $85e2			beq _r2Zero
.85ad	b4 59		ldy $59,x			ldy FSMant0+1,x		; r1 mantissa = 0 ?
.85af	f0 2b		beq $85dc			beq _r1Zero
.85b1	55 59		eor $59,x			eor FSMant0+1,x		; compare mantissa sign
.85b3	30 3d		bmi $85f2			bmi _MantissaSignDifferent
.85b5	38		sec				sec			; compare exponent
.85b6	b5 4f		lda $4f,x			lda FSExp+1,x
.85b8	f5 4e		sbc $4e,x			sbc FSExp+0,x
.85ba	d0 2b		bne $85e7			bne _ExponentDifferent
.85bc	98		tya				tya			; compare mantissa MSB
.85bd	f5 58		sbc $58,x			sbc FSMant0+0,x		;   always same sign so can't overflow
.85bf	d0 17		bne $85d8			bne _13
.85c1	b5 63		lda $63,x			lda FSMant1+1,x		; compare mantissa 1
.85c3	f5 62		sbc $62,x			sbc FSMant1+0,x
.85c5	d0 0c		bne $85d3			bne _12
.85c7	b5 6d		lda $6d,x			lda FSMant2+1,x		; compare mantissa 2
.85c9	f5 6c		sbc $6c,x			sbc FSMant2+0,x
.85cb	d0 06		bne $85d3			bne _12
.85cd	b5 77		lda $77,x			lda FSMant3+1,x		; compare mantissa LSB
.85cf	f5 76		sbc $76,x			sbc FSMant3+0,x
.85d1	f0 05		beq $85d8			beq _13
.85d3	6a		ror a		_12:		ror a
.85d4	49 80		eor #$80	_14:		eor #$80
.85d6	09 01		ora #$01			ora #1
.85d8	a6 15		ldx $15		_13:		ldx tmp1		; restore data stack index
.85da	a8		tay				tay			; set CPU flags
.85db	60		rts				rts
.85dc	b5 58		lda $58,x	_r1Zero:	lda FSMant0+0,x		; return r2
.85de	d0 f4		bne $85d4			bne _14
.85e0	f0 f6		beq $85d8			beq _13
.85e2	b5 59		lda $59,x	_r2Zero:	lda FSMant0+1,x		; return 0-r1
.85e4	4c d8 85	jmp $85d8			jmp _13
.85e7					_ExponentDifferent:
.85e7	50 02		bvc $85eb			bvc +
.85e9	49 80		eor #$80			eor #$80
.85eb					+
.85eb	55 58		eor $58,x			eor FSMant0+0,x
.85ed	a6 15		ldx $15				ldx tmp1		; restore data stack index
.85ef	09 01		ora #$01			ora #1			; set CPU flags
.85f1	60		rts				rts
.85f2					_MantissaSignDifferent:
.85f2	98		tya				tya
.85f3	a6 15		ldx $15				ldx tmp1		; restore data stack index
.85f5	09 01		ora #$01			ora #1
.85f7	60		rts				rts
=83					CL	.var *-(WordListLink+wh_Xt)
=$85f8					en = *	; remember here
>85a3	53					.byte CL	;wh_CodeLength
>85f8	46 6c 6f 6f 72			L1:	.text "Floor"	;  name of word as a string, ending at wh_NameLastChar
>85fd	05					.byte *-L1	;wh_NameLength	length of name
>85fe	20 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8600	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8601	08					.byte NN	;wh_Flags	dictionary flags
=34173					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8602	a4 4d		ldy $4d		Floor:		ldy fp
.8604	b9 58 00	lda $0058,y			lda FSMant0,y		; negative?
.8607	10 19		bpl $8622			bpl _a
.8609	b9 4e 00	lda $004e,y			lda FSExp,y		; > -1 ?
.860c	10 14		bpl $8622			bpl _a
.860e	a9 80		lda #$80			lda #$80		; return -1
.8610	99 58 00	sta $0058,y			sta FSMant0,y
.8613	a9 00		lda #$00			lda #0
.8615	99 4e 00	sta $004e,y			sta FSExp,y
.8618	99 62 00	sta $0062,y			sta FSMant1,y
.861b	99 6c 00	sta $006c,y			sta FSMant2,y
.861e	99 76 00	sta $0076,y			sta FSMant3,y
.8621	60		rts				rts
.8622	a9 1f		lda #$1f	_a:		lda #31
.8624	20 2a 86	jsr $862a			jsr FIntAlignA
.8627	4c 1c 8a	jmp $8a1c			jmp FNorm
=40					CL	.var *-(WordListLink+wh_Xt)
=$862a					en = *	; remember here
>8600	28					.byte CL	;wh_CodeLength
.862a					FIntAlignA:
.862a	85 17		sta $17				sta tmp2+0		; save alignment
.862c	46 16		lsr $16				lsr tmp1+1		; init saved lo bit
.862e	86 15		stx $15				stx tmp1+0		; save data stack index
.8630	a6 4d		ldx $4d				ldx fp			; X= FP stack index
.8632	b5 58		lda $58,x			lda FSMant0,x
.8634	b4 4e		ldy $4e,x			ldy FSExp,x
.8636	10 18		bpl $8650			bpl _18
.8638	a4 17		ldy $17				ldy tmp2+0		; return zero
.863a	a9 00		lda #$00			lda #0
.863c	95 62		sta $62,x			sta FSMant1,x
.863e	95 6c		sta $6c,x			sta FSMant2,x
.8640	95 76		sta $76,x			sta FSMant3,x
.8642	f0 10		beq $8654			beq _30
.8644	c8		iny		_12:		iny			; exp += 1
.8645	c9 80		cmp #$80			cmp #$80		; mantissa >>=1
.8647	6a		ror a				ror a
.8648	76 62		ror $62,x			ror FSMant1,x
.864a	76 6c		ror $6c,x			ror FSMant2,x
.864c	76 76		ror $76,x			ror FSMant3,x
.864e	66 16		ror $16				ror tmp1+1		; save lo bit
.8650	c4 17		cpy $17		_18:		cpy tmp2+0		; while exp<alignment
.8652	90 f0		bcc $8644			bcc _12
.8654	95 58		sta $58,x	_30:		sta FSMant0,x
.8656	94 4e		sty $4e,x			sty FSExp,x
.8658	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
.865a	06 16		asl $16				asl tmp1+1		; set carry bit
.865c	60		rts				rts
>865d	46 54 72 75 6e 63		L1:	.text "FTrunc"	;  name of word as a string, ending at wh_NameLastChar
>8663	06					.byte *-L1	;wh_NameLength	length of name
>8664	7d 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8666	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8667	08					.byte NN	;wh_Flags	dictionary flags
=34275					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8668	a4 4d		ldy $4d		FTrunc:		ldy fp
.866a	b9 58 00	lda $0058,y			lda FSMant0,y
.866d	10 93		bpl $8602			bpl Floor
.866f	20 1e 8b	jsr $8b1e			jsr FNegate
.8672	20 02 86	jsr $8602			jsr Floor
.8675	4c 1e 8b	jmp $8b1e			jmp FNegate
>8678	46 52 6f 75 6e 64		L1:	.text "FRound"	;  name of word as a string, ending at wh_NameLastChar
>867e	06					.byte *-L1	;wh_NameLength	length of name
>867f	e3 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8681	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8682	08					.byte NN	;wh_Flags	dictionary flags
=34302					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8683	a9 1f		lda #$1f	FRound:		lda #31
.8685	20 2a 86	jsr $862a			jsr FIntAlignA
.8688	90 03		bcc $868d			bcc _15
.868a	4c da 8a	jmp $8ada			jmp F1Plus
.868d	4c 1c 8a	jmp $8a1c	_15:		jmp FNorm
=13					CL	.var *-(WordListLink+wh_Xt)
=$8690					en = *	; remember here
>8681	0d					.byte CL	;wh_CodeLength
>8690	46 49 6e 74 46 72 63		L1:	.text "FIntFrc"	;  name of word as a string, ending at wh_NameLastChar
>8697	07					.byte *-L1	;wh_NameLength	length of name
>8698	fe 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>869a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>869b	08					.byte NN	;wh_Flags	dictionary flags
=34327					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.869c	20 fd 83	jsr $83fd	FIntFrc:	jsr FDup	; ( r1 r1 )
.869f	20 02 86	jsr $8602			jsr Floor	; ( r1 rint )
.86a2	20 be 84	jsr $84be			jsr FTuck	; ( rint r1 rint )
.86a5	20 e7 8a	jsr $8ae7			jsr FMinus	; ( rint rfrac )
.86a8	4c 85 84	jmp $8485			jmp FSwap	; ( rfrac rint )
=15					CL	.var *-(WordListLink+wh_Xt)
=$86ab					en = *	; remember here
>869a	0f					.byte CL	;wh_CodeLength
.86ab					FTrue1:
.86ab	e6 4d		inc $4d				inc fp		; FDrop
.86ad	4c 05 b6	jmp $b605			jmp True	; return true
.86b0					FFalse1:
.86b0	e6 4d		inc $4d				inc fp		; FDrop
.86b2	4c 18 b6	jmp $b618			jmp False	; return false
>86b5	46 30 3d			L1:	.text "F0="	;  name of word as a string, ending at wh_NameLastChar
>86b8	03					.byte *-L1	;wh_NameLength	length of name
>86b9	17 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86bc	08					.byte NN	;wh_Flags	dictionary flags
=34360					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86bd	a4 4d		ldy $4d		FZEq:		ldy fp
.86bf	b9 58 00	lda $0058,y			lda FSMant0,y
.86c2	d0 ec		bne $86b0			bne FFalse1
.86c4	f0 e5		beq $86ab			beq FTrue1
=9					CL	.var *-(WordListLink+wh_Xt)
=$86c6					en = *	; remember here
>86bb	09					.byte CL	;wh_CodeLength
>86c6	46 30 3c 3e			L1:	.text "F0<>"	;  name of word as a string, ending at wh_NameLastChar
>86ca	04					.byte *-L1	;wh_NameLength	length of name
>86cb	38 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86ce	08					.byte NN	;wh_Flags	dictionary flags
=34378					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86cf	a4 4d		ldy $4d		FZNe:		ldy fp
.86d1	b9 58 00	lda $0058,y			lda FSMant0,y
.86d4	f0 da		beq $86b0			beq FFalse1
.86d6	d0 d3		bne $86ab			bne FTrue1
=9					CL	.var *-(WordListLink+wh_Xt)
=$86d8					en = *	; remember here
>86cd	09					.byte CL	;wh_CodeLength
>86d8	46 30 3c			L1:	.text "F0<"	;  name of word as a string, ending at wh_NameLastChar
>86db	03					.byte *-L1	;wh_NameLength	length of name
>86dc	4a 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86df	08					.byte NN	;wh_Flags	dictionary flags
=34395					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86e0	a4 4d		ldy $4d		FZLt:		ldy fp
.86e2	b9 58 00	lda $0058,y			lda FSMant0,y
.86e5	30 c4		bmi $86ab			bmi FTrue1
.86e7	10 c7		bpl $86b0			bpl FFalse1
=9					CL	.var *-(WordListLink+wh_Xt)
=$86e9					en = *	; remember here
>86de	09					.byte CL	;wh_CodeLength
>86e9	46 30 3e 3d			L1:	.text "F0>="	;  name of word as a string, ending at wh_NameLastChar
>86ed	04					.byte *-L1	;wh_NameLength	length of name
>86ee	5b 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86f1	08					.byte NN	;wh_Flags	dictionary flags
=34413					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86f2	a4 4d		ldy $4d		FZGe:		ldy fp
.86f4	b9 58 00	lda $0058,y			lda FSMant0,y
.86f7	10 b2		bpl $86ab			bpl FTrue1
.86f9	30 b5		bmi $86b0			bmi FFalse1
=9					CL	.var *-(WordListLink+wh_Xt)
=$86fb					en = *	; remember here
>86f0	09					.byte CL	;wh_CodeLength
>86fb	46 30 3e			L1:	.text "F0>"	;  name of word as a string, ending at wh_NameLastChar
>86fe	03					.byte *-L1	;wh_NameLength	length of name
>86ff	6d 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8701	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8702	08					.byte NN	;wh_Flags	dictionary flags
=34430					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8703	a4 4d		ldy $4d		FZGt:		ldy fp
.8705	b9 58 00	lda $0058,y			lda FSMant0,y
.8708	30 a6		bmi $86b0			bmi FFalse1
.870a	d0 9f		bne $86ab			bne FTrue1
.870c	f0 a2		beq $86b0			beq FFalse1
=11					CL	.var *-(WordListLink+wh_Xt)
=$870e					en = *	; remember here
>8701	0b					.byte CL	;wh_CodeLength
>870e	46 30 3c 3d			L1:	.text "F0<="	;  name of word as a string, ending at wh_NameLastChar
>8712	04					.byte *-L1	;wh_NameLength	length of name
>8713	7e 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8715	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8716	08					.byte NN	;wh_Flags	dictionary flags
=34450					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8717	a4 4d		ldy $4d		FZLe:		ldy fp
.8719	b9 58 00	lda $0058,y			lda FSMant0,y
.871c	30 8d		bmi $86ab			bmi FTrue1
.871e	d0 90		bne $86b0			bne FFalse1
.8720	f0 89		beq $86ab			beq FTrue1
=11					CL	.var *-(WordListLink+wh_Xt)
=$8722					en = *	; remember here
>8715	0b					.byte CL	;wh_CodeLength
>8722	46 3c				L1:	.text "F<"	;  name of word as a string, ending at wh_NameLastChar
>8724	02					.byte *-L1	;wh_NameLength	length of name
>8725	92 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8727	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8728	08					.byte NN	;wh_Flags	dictionary flags
=34468					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8729	20 a5 85	jsr $85a5	FLt:		jsr FCmpA
.872c	30 35		bmi $8763			bmi FTrue2
.872e					FFalse2:
.872e	e6 4d		inc $4d				inc fp		; FDrop
.8730	e6 4d		inc $4d				inc fp		; FDrop
.8732	4c 18 b6	jmp $b618			jmp False	; return False
=12					CL	.var *-(WordListLink+wh_Xt)
=$8735					en = *	; remember here
>8727	0c					.byte CL	;wh_CodeLength
>8735	46 3e 3d			L1:	.text "F>="	;  name of word as a string, ending at wh_NameLastChar
>8738	03					.byte *-L1	;wh_NameLength	length of name
>8739	a4 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>873b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>873c	08					.byte NN	;wh_Flags	dictionary flags
=34488					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.873d	20 a5 85	jsr $85a5	FGe:		jsr FCmpA
.8740	10 21		bpl $8763			bpl FTrue2
.8742	30 ea		bmi $872e			bmi FFalse2
=7					CL	.var *-(WordListLink+wh_Xt)
=$8744					en = *	; remember here
>873b	07					.byte CL	;wh_CodeLength
>8744	46 3e				L1:	.text "F>"	;  name of word as a string, ending at wh_NameLastChar
>8746	02					.byte *-L1	;wh_NameLength	length of name
>8747	b8 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8749	03					.byte 3		;wh_CodeLength  (with placeholder value)
>874a	08					.byte NN	;wh_Flags	dictionary flags
=34502					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.874b	20 a5 85	jsr $85a5	FGt:		jsr FCmpA
.874e	30 de		bmi $872e			bmi FFalse2
.8750	d0 11		bne $8763			bne FTrue2
.8752	f0 da		beq $872e			beq FFalse2
=9					CL	.var *-(WordListLink+wh_Xt)
=$8754					en = *	; remember here
>8749	09					.byte CL	;wh_CodeLength
>8754	46 3c 3d			L1:	.text "F<="	;  name of word as a string, ending at wh_NameLastChar
>8757	03					.byte *-L1	;wh_NameLength	length of name
>8758	c6 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>875a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>875b	08					.byte NN	;wh_Flags	dictionary flags
=34519					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.875c	20 a5 85	jsr $85a5	FLe:		jsr FCmpA
.875f	30 02		bmi $8763			bmi FTrue2
.8761	d0 cb		bne $872e			bne FFalse2
.8763					FTrue2:
.8763	e6 4d		inc $4d				inc fp		; FDrop
.8765	e6 4d		inc $4d				inc fp		; FDrop
.8767	4c 05 b6	jmp $b605			jmp True	; return True
=14					CL	.var *-(WordListLink+wh_Xt)
=$876a					en = *	; remember here
>875a	0e					.byte CL	;wh_CodeLength
>876a	46 3c 3e			L1:	.text "F<>"	;  name of word as a string, ending at wh_NameLastChar
>876d	03					.byte *-L1	;wh_NameLength	length of name
>876e	d7 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8770	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8771	08					.byte NN	;wh_Flags	dictionary flags
=34541					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8772	20 a5 85	jsr $85a5	FNe:		jsr FCmpA
.8775	d0 ec		bne $8763			bne FTrue2
.8777	f0 b5		beq $872e			beq FFalse2
=7					CL	.var *-(WordListLink+wh_Xt)
=$8779					en = *	; remember here
>8770	07					.byte CL	;wh_CodeLength
>8779	46 3d				L1:	.text "F="	;  name of word as a string, ending at wh_NameLastChar
>877b	02					.byte *-L1	;wh_NameLength	length of name
>877c	ed 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>877e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>877f	08					.byte NN	;wh_Flags	dictionary flags
=34555					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8780	20 a5 85	jsr $85a5	FEq:		jsr FCmpA
.8783	d0 a9		bne $872e			bne FFalse2
.8785	f0 dc		beq $8763			beq FTrue2
=7					CL	.var *-(WordListLink+wh_Xt)
=$8787					en = *	; remember here
>877e	07					.byte CL	;wh_CodeLength
>8787	46 7e 41 62 73			L1:	.text "F~Abs"	;  name of word as a string, ending at wh_NameLastChar
>878c	05					.byte *-L1	;wh_NameLength	length of name
>878d	fb 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>878f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8790	08					.byte NN	;wh_Flags	dictionary flags
=34572					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8791	20 f7 84	jsr $84f7	FTAbs:		jsr FMRot
.8794	20 e7 8a	jsr $8ae7			jsr FMinus
.8797	20 45 8b	jsr $8b45			jsr FAbs
.879a	4c 4b 87	jmp $874b			jmp FGt
=12					CL	.var *-(WordListLink+wh_Xt)
=$879d					en = *	; remember here
>878f	0c					.byte CL	;wh_CodeLength
>879d	46 7e 52 65 6c			L1:	.text "F~Rel"	;  name of word as a string, ending at wh_NameLastChar
>87a2	05					.byte *-L1	;wh_NameLength	length of name
>87a3	0c 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87a5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87a6	08					.byte NN	;wh_Flags	dictionary flags
=34594					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87a7	20 21 84	jsr $8421	FTRel:		jsr FOver
.87aa	a9 03		lda #$03			lda #3
.87ac	20 48 84	jsr $8448			jsr FPickA
.87af	20 a5 8a	jsr $8aa5			jsr FPlus
.87b2	20 45 8b	jsr $8b45			jsr FAbs
.87b5	20 72 8b	jsr $8b72			jsr FStar		; r1 r2 r3*|r1+r2|
.87b8	20 f7 84	jsr $84f7			jsr FMRot		; r3*|r1+r2| r1 r2
.87bb	20 e7 8a	jsr $8ae7			jsr FMinus
.87be	20 45 8b	jsr $8b45			jsr FAbs
.87c1	4c 4b 87	jmp $874b			jmp FGt
=29					CL	.var *-(WordListLink+wh_Xt)
=$87c4					en = *	; remember here
>87a5	1d					.byte CL	;wh_CodeLength
>87c4	46 7e				L1:	.text "F~"	;  name of word as a string, ending at wh_NameLastChar
>87c6	02					.byte *-L1	;wh_NameLength	length of name
>87c7	22 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87c9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87ca	08					.byte NN	;wh_Flags	dictionary flags
=34630					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87cb	a4 4d		ldy $4d		FTilde:		ldy fp
.87cd	b9 58 00	lda $0058,y			lda FSMant0,y
.87d0	30 06		bmi $87d8			bmi _10			; r3<0
.87d2	d0 bd		bne $8791			bne FTAbs		; r3>0
.87d4	e6 4d		inc $4d				inc fp			; r3=0
.87d6	d0 a8		bne $8780			bne FEq
.87d8	20 1e 8b	jsr $8b1e	_10:		jsr FNegate
.87db	4c a7 87	jmp $87a7			jmp FTRel
=19					CL	.var *-(WordListLink+wh_Xt)
=$87de					en = *	; remember here
>87c9	13					.byte CL	;wh_CodeLength
>87de	46 56 61 72 69 61 62 6c		L1:	.text "FVariable"	;  name of word as a string, ending at wh_NameLastChar
>87e6	65
>87e7	09					.byte *-L1	;wh_NameLength	length of name
>87e8	46 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87ea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87eb	0c					.byte IM+NN	;wh_Flags	dictionary flags
=34663					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87ec	20 d2 bf	jsr $bfd2	FVariable:	jsr Create		; compile word header & push PFA adr
.87ef	20 36 ba	jsr $ba36			jsr adjust_z		; fix word code length
.87f2	20 66 88	jsr $8866			jsr F0			; alloc & init data
.87f5	4c 63 85	jmp $8563			jmp FComma
=12					CL	.var *-(WordListLink+wh_Xt)
=$87f8					en = *	; remember here
>87ea	0c					.byte CL	;wh_CodeLength
>87f8	46 4c 69 74 65 72 61 6c		L1:	.text "FLiteral"	;  name of word as a string, ending at wh_NameLastChar
>8800	08					.byte *-L1	;wh_NameLength	length of name
>8801	67 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8803	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8804	0c					.byte IM+NN	;wh_Flags	dictionary flags
=34688					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8805	a4 4d		ldy $4d		FLiteral:	ldy fp
.8807	b9 62 00	lda $0062,y			lda FSMant1,y		; will short work?
.880a	19 6c 00	ora $006c,y			ora FSMant2,y
.880d	19 76 00	ora $0076,y			ora FSMant3,y
.8810	f0 0a		beq $881c			beq _Short
.8812	a9 46		lda #$46			lda #<FLitI		; compile FLitI call
.8814	a0 88		ldy #$88			ldy #>FLitI
.8816	20 28 cb	jsr $cb28			jsr Jsr_Comma_YA
.8819	4c 63 85	jmp $8563			jmp FComma		; inline operand, & return
.881c					_Short:
.881c	ca		dex				dex
.881d	ca		dex				dex
.881e	b9 4e 00	lda $004e,y			lda FSExp,y		;compile load value
.8821	95 26		sta $26,x			sta DStack+1,x
.8823	b9 58 00	lda $0058,y			lda FSMant0,y
.8826	95 25		sta $25,x			sta DStack+0,x
.8828	20 cb b5	jsr $b5cb			jsr ldya_immed_comma
.882b	e6 4d		inc $4d				inc fp			; FDrop
.882d	a9 34		lda #$34			lda #<FLitYA		; compile jsr FLitYA, & return
.882f	a0 88		ldy #$88			ldy #>FLitYA
.8831	4c 28 cb	jmp $cb28			jmp Jsr_Comma_YA
=47					CL	.var *-(WordListLink+wh_Xt)
=$8834					en = *	; remember here
>8803	2f					.byte CL	;wh_CodeLength
.8834					FLitYA:
.8834	20 92 83	jsr $8392			jsr FAllocX		; alloc FP stack entry
.8837	94 4e		sty $4e,x			sty FSExp,x
.8839	95 58		sta $58,x			sta FSMant0,x
.883b	a9 00		lda #$00			lda #0
.883d	95 62		sta $62,x			sta FSMant1,x
.883f	95 6c		sta $6c,x			sta FSMant2,x
.8841	95 76		sta $76,x			sta FSMant3,x
.8843	a6 15		ldx $15				ldx tmp1		; restore param stack index
.8845	60		rts				rts
.8846					FLitI:
.8846	68		pla				pla			; tmp2= RTS addr
.8847	85 17		sta $17				sta tmp2+0
.8849	18		clc				clc			; bump RTS addr over inline data
.884a	69 05		adc #$05			adc #5
.884c	a8		tay				tay
.884d	68		pla				pla
.884e	85 18		sta $18				sta tmp2+1
.8850	69 00		adc #$00			adc #0
.8852	48		pha				pha
.8853	98		tya				tya
.8854	48		pha				pha
.8855	e6 17		inc $17				inc tmp2+0		; tmp2 +=1 1 (correct RTS addr)
.8857	d0 02		bne $885b			bne +
.8859	e6 18		inc $18				inc tmp2+1
.885b					+
.885b	4c 0b 85	jmp $850b			jmp FAt_Tmp2		; fetch inline data, & return
>885e	30 2e 65			L1:	.text "0.e"	;  name of word as a string, ending at wh_NameLastChar
>8861	03					.byte *-L1	;wh_NameLength	length of name
>8862	80 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8864	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8865	08					.byte NN	;wh_Flags	dictionary flags
=34785					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8866	a9 00		lda #$00	F0:		lda #0
.8868	a0 80		ldy #$80			ldy #$80
.886a	d0 c8		bne $8834			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$886c					en = *	; remember here
>8864	06					.byte CL	;wh_CodeLength
>886c	31 30 2e 65			L1:	.text "10.e"	;  name of word as a string, ending at wh_NameLastChar
>8870	04					.byte *-L1	;wh_NameLength	length of name
>8871	e1 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8873	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8874	08					.byte NN	;wh_Flags	dictionary flags
=34800					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8875	a9 50		lda #$50	F10:		lda #$50
.8877	a0 04		ldy #$04			ldy #4
.8879	d0 b9		bne $8834			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$887b					en = *	; remember here
>8873	06					.byte CL	;wh_CodeLength
>887b	32 2e 65			L1:	.text "2.e"	;  name of word as a string, ending at wh_NameLastChar
>887e	03					.byte *-L1	;wh_NameLength	length of name
>887f	f0 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8881	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8882	08					.byte NN	;wh_Flags	dictionary flags
=34814					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8883	a9 40		lda #$40	F2:		lda #$40
.8885	a0 02		ldy #$02			ldy #2
.8887	d0 ab		bne $8834			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8889					en = *	; remember here
>8881	06					.byte CL	;wh_CodeLength
>8889	31 2e 65			L1:	.text "1.e"	;  name of word as a string, ending at wh_NameLastChar
>888c	03					.byte *-L1	;wh_NameLength	length of name
>888d	fe 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>888f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8890	08					.byte NN	;wh_Flags	dictionary flags
=34828					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8891	a9 40		lda #$40	F1:		lda #$40
.8893	a0 01		ldy #$01			ldy #1
.8895	d0 9d		bne $8834			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8897					en = *	; remember here
>888f	06					.byte CL	;wh_CodeLength
>8897	2e 31 65			L1:	.text ".1e"	;  name of word as a string, ending at wh_NameLastChar
>889a	03					.byte *-L1	;wh_NameLength	length of name
>889b	0c 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>889d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>889e	08					.byte NN	;wh_Flags	dictionary flags
=34842					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.889f	20 3e 89	jsr $893e	F10th:		jsr FConstantRun
>88a2	67 66 66 66					.dword $66666667	; 32 bit signed binary mantissa.  $40000000 = +0.5
>88a6	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$88a7					en = *	; remember here
>889d	08					.byte CL	;wh_CodeLength
>88a7	50 69				L1:	.text "Pi"	;  name of word as a string, ending at wh_NameLastChar
>88a9	02					.byte *-L1	;wh_NameLength	length of name
>88aa	1a 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88ac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88ad	08					.byte NN	;wh_Flags	dictionary flags
=34857					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88ae	20 3e 89	jsr $893e	FPi:		jsr FConstantRun
>88b1	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>88b5	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$88b6					en = *	; remember here
>88ac	08					.byte CL	;wh_CodeLength
>88b6	50 69 2f 32			L1:	.text "Pi/2"	;  name of word as a string, ending at wh_NameLastChar
>88ba	04					.byte *-L1	;wh_NameLength	length of name
>88bb	29 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88bd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88be	08					.byte NN	;wh_Flags	dictionary flags
=34874					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88bf	20 3e 89	jsr $893e	FPiH:		jsr FConstantRun
>88c2	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>88c6	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$88c7					en = *	; remember here
>88bd	08					.byte CL	;wh_CodeLength
>88c7	50 69 2f 34			L1:	.text "Pi/4"	;  name of word as a string, ending at wh_NameLastChar
>88cb	04					.byte *-L1	;wh_NameLength	length of name
>88cc	3a 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88cf	08					.byte NN	;wh_Flags	dictionary flags
=34891					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88d0	20 3e 89	jsr $893e	FPiQ:		jsr FConstantRun
>88d3	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>88d7	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$88d8					en = *	; remember here
>88ce	08					.byte CL	;wh_CodeLength
>88d8	32 50 69			L1:	.text "2Pi"	;  name of word as a string, ending at wh_NameLastChar
>88db	03					.byte *-L1	;wh_NameLength	length of name
>88dc	4b 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88df	08					.byte NN	;wh_Flags	dictionary flags
=34907					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88e0	20 3e 89	jsr $893e	F2Pi:		jsr FConstantRun
>88e3	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>88e7	03						.char 3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$88e8					en = *	; remember here
>88de	08					.byte CL	;wh_CodeLength
>88e8	46 2e 45			L1:	.text "F.E"	;  name of word as a string, ending at wh_NameLastChar
>88eb	03					.byte *-L1	;wh_NameLength	length of name
>88ec	5b 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88ef	08					.byte NN	;wh_Flags	dictionary flags
=34923					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88f0	20 3e 89	jsr $893e	FE:		jsr FConstantRun
>88f3	2c 2a fc 56					.dword $56fc2a2c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>88f7	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$88f8					en = *	; remember here
>88ee	08					.byte CL	;wh_CodeLength
>88f8	46 43 6f 6e 73 74 61 6e		L1:	.text "FConstant"	;  name of word as a string, ending at wh_NameLastChar
>8900	74
>8901	09					.byte *-L1	;wh_NameLength	length of name
>8902	6b 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8904	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8905	08					.byte NN	;wh_Flags	dictionary flags
=34945					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8906	20 4b bf	jsr $bf4b	FConstant:	jsr Header_Comma	; compile word header
.8909	a4 4d		ldy $4d				ldy fp
.890b	b9 62 00	lda $0062,y			lda FSMant1,y		; will short work?
.890e	19 6c 00	ora $006c,y			ora FSMant2,y
.8911	19 76 00	ora $0076,y			ora FSMant3,y
.8914	f0 0d		beq $8923			beq _Short
.8916	a9 3e		lda #$3e			lda #<FConstantRun	; compile call
.8918	a0 89		ldy #$89			ldy #>FConstantRun
.891a	20 28 cb	jsr $cb28			jsr Jsr_Comma_YA
.891d	20 36 ba	jsr $ba36			jsr adjust_z
.8920	4c 63 85	jmp $8563			jmp FComma		; inline operand, & return
.8923					_Short:
.8923	ca		dex				dex			; compile load value
.8924	ca		dex				dex
.8925	b9 4e 00	lda $004e,y			lda FSExp,y
.8928	95 26		sta $26,x			sta DStack+1,x
.892a	b9 58 00	lda $0058,y			lda FSMant0,y
.892d	95 25		sta $25,x			sta DStack+0,x
.892f	20 cb b5	jsr $b5cb			jsr ldya_immed_comma
.8932	e6 4d		inc $4d				inc fp			; FDrop
.8934	a9 34		lda #$34			lda #<FLitYA		; compile jmp FLitYA
.8936	a0 88		ldy #$88			ldy #>FLitYA
.8938	20 3f cb	jsr $cb3f			jsr Jmp_Comma_YA
.893b	4c 36 ba	jmp $ba36			jmp adjust_z
=56					CL	.var *-(WordListLink+wh_Xt)
=$893e					en = *	; remember here
>8904	38					.byte CL	;wh_CodeLength
.893e					FConstantRun:
.893e	68		pla				pla			; tmp2= pop RTS addr & add 1
.893f	18		clc				clc
.8940	69 01		adc #$01			adc #1
.8942	85 17		sta $17				sta tmp2+0
.8944	68		pla				pla
.8945	69 00		adc #$00			adc #0
.8947	85 18		sta $18				sta tmp2+1
.8949	4c 0b 85	jmp $850b			jmp FAt_Tmp2		; fetch inline data, & return
>894c	46 56 61 6c 75 65		L1:	.text "FValue"	;  name of word as a string, ending at wh_NameLastChar
>8952	06					.byte *-L1	;wh_NameLength	length of name
>8953	81 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8955	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8956	0c					.byte IM+NN	;wh_Flags	dictionary flags
=35026					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8957	20 4b bf	jsr $bf4b	FValue:		jsr Header_Comma	; compile word header
.895a	a9 67		lda #$67			lda #<FValue_runtime	; compile JSR FValue_runtime
.895c	a0 89		ldy #$89			ldy #>FValue_runtime
.895e	20 28 cb	jsr $cb28			jsr Jsr_Comma_YA
.8961	20 36 ba	jsr $ba36			jsr adjust_z		; fix word length
.8964	4c 63 85	jmp $8563			jmp FComma		; alloc & init value
=16					CL	.var *-(WordListLink+wh_Xt)
=$8967					en = *	; remember here
>8955	10					.byte CL	;wh_CodeLength
.8967					FValue_runtime:
.8967	4c 3e 89	jmp $893e			jmp FConstantRun
>896a	46 53 63 61 6c 65		L1:	.text "FScale"	;  name of word as a string, ending at wh_NameLastChar
>8970	06					.byte *-L1	;wh_NameLength	length of name
>8971	d2 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8973	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8974	08					.byte NN	;wh_Flags	dictionary flags
=35056					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8975	20 39 b2	jsr $b239	FScale:		jsr PopA		; pop n
.8978	86 15		stx $15		FScaleA:	stx tmp1		; save data stack index
.897a	a6 4d		ldx $4d				ldx fp
.897c	b4 58		ldy $58,x			ldy FSMant0,x		; mantissa zero?
.897e	f0 07		beq $8987			beq _8
.8980	18		clc				clc
.8981	75 4e		adc $4e,x			adc FSExp,x
.8983	95 4e		sta $4e,x			sta FSExp,x
.8985	70 03		bvs $898a			bvs _overflow		; overflow or underflow?
.8987	a6 15		ldx $15		_8:		ldx tmp1		; restore data stack index
.8989	60		rts				rts
.898a					_overflow:
.898a	a6 15		ldx $15				ldx tmp1		; restore data stack index
.898c	20 77 b2	jsr $b277			jsr Throw_FpOutOfRange
=26					CL	.var *-(WordListLink+wh_Xt)
=$898f					en = *	; remember here
>8973	1a					.byte CL	;wh_CodeLength
>898f	46 32 2a			L1:	.text "F2*"	;  name of word as a string, ending at wh_NameLastChar
>8992	03					.byte *-L1	;wh_NameLength	length of name
>8993	f0 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8995	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8996	08					.byte NN	;wh_Flags	dictionary flags
=35090					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8997	a9 01		lda #$01	F2Star:		lda #1
.8999	d0 dd		bne $8978			bne FScaleA
=4					CL	.var *-(WordListLink+wh_Xt)
=$899b					en = *	; remember here
>8995	04					.byte CL	;wh_CodeLength
>899b	46 32 2f			L1:	.text "F2/"	;  name of word as a string, ending at wh_NameLastChar
>899e	03					.byte *-L1	;wh_NameLength	length of name
>899f	12 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89a1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89a2	08					.byte NN	;wh_Flags	dictionary flags
=35102					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89a3	a9 ff		lda #$ff	F2Slash:	lda #$ff
.89a5	d0 d1		bne $8978			bne FScaleA
=4					CL	.var *-(WordListLink+wh_Xt)
=$89a7					en = *	; remember here
>89a1	04					.byte CL	;wh_CodeLength
>89a7	ae 89				L1:	.text FMAlignX	;  name of word as a string, ending at wh_NameLastChar
>89a9	02					.byte *-L1	;wh_NameLength	length of name
>89aa	1e 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89ac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89ad	08					.byte NN	;wh_Flags	dictionary flags
=35113					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89ae	86 15		stx $15		FMAlignX:	stx tmp1+0	; save data stack index
.89b0	a6 4d		ldx $4d				ldx fp		; load FP stack index
.89b2	b5 4e		lda $4e,x			lda FSExp+0,x
.89b4	38		sec				sec
.89b5	f5 4f		sbc $4f,x			sbc FSExp+1,x	; compare exponents
.89b7	a8		tay				tay
.89b8	f0 22		beq $89dc			beq _rts	; already = ?
.89ba	10 2b		bpl $89e7			bpl _2		; r2 smaller?
.89bc					_1:
.89bc	70 4a		bvs $8a08			bvs _2z		; was this a big positive #?
.89be	c0 e0		cpy #$e0			cpy #-32
.89c0	90 1b		bcc $89dd			bcc _1z		; all significant bits gone?
.89c2	b5 58		lda $58,x			lda FSMant0+0,x
.89c4	29 80		and #$80			and #$80
.89c6	85 16		sta $16				sta tmp1+1	; prepare sign for shifts
.89c8	b5 58		lda $58,x			lda FSMant0+0,x
.89ca	4a		lsr a		_1s:		lsr a
.89cb	05 16		ora $16				ora tmp1+1
.89cd	76 62		ror $62,x			ror FSMant1+0,x
.89cf	76 6c		ror $6c,x			ror FSMant2+0,x
.89d1	76 76		ror $76,x			ror FSMant3+0,x
.89d3	c8		iny				iny
.89d4	d0 f4		bne $89ca			bne _1s
.89d6	95 58		sta $58,x	_1e:		sta FSMant0+0,x
.89d8	b5 4f		lda $4f,x			lda FSExp+1,x
.89da	95 4e		sta $4e,x			sta FSExp+0,x
.89dc	60		rts		_rts:		rts
.89dd	a9 00		lda #$00	_1z:		lda #0		; TOS=0
.89df	95 62		sta $62,x			sta FSMant1+0,x
.89e1	95 6c		sta $6c,x			sta FSMant2+0,x
.89e3	95 76		sta $76,x			sta FSMant3+0,x
.89e5	f0 ef		beq $89d6			beq _1e
.89e7					_2:
.89e7	70 f4		bvs $89dd			bvs _1z		; was this a big negative #?
.89e9	c0 20		cpy #$20			cpy #32
.89eb	b0 1b		bcs $8a08			bcs _2z		; all significant bits gone?
.89ed	b5 59		lda $59,x			lda FSMant0+1,x
.89ef	29 80		and #$80			and #$80
.89f1	85 16		sta $16				sta tmp1+1	; prepare sign for shifts
.89f3	b5 59		lda $59,x			lda FSMant0+1,x
.89f5	4a		lsr a		_2s:		lsr a
.89f6	05 16		ora $16				ora tmp1+1
.89f8	76 63		ror $63,x			ror FSMant1+1,x
.89fa	76 6d		ror $6d,x			ror FSMant2+1,x
.89fc	76 77		ror $77,x			ror FSMant3+1,x
.89fe	88		dey				dey
.89ff	d0 f4		bne $89f5			bne _2s
.8a01	95 59		sta $59,x	_2e:		sta FSMant0+1,x
.8a03	b5 4e		lda $4e,x			lda FSExp+0,x
.8a05	95 4f		sta $4f,x			sta FSExp+1,x
.8a07	60		rts				rts
.8a08	a9 00		lda #$00	_2z:		lda #0		; NOS=0
.8a0a	95 63		sta $63,x			sta FSMant1+1,x
.8a0c	95 6d		sta $6d,x			sta FSMant2+1,x
.8a0e	95 77		sta $77,x			sta FSMant3+1,x
.8a10	f0 ef		beq $8a01			beq _2e
=100					CL	.var *-(WordListLink+wh_Xt)
=$8a12					en = *	; remember here
>89ac	64					.byte CL	;wh_CodeLength
>8a12	46 4e 6f 72 6d			L1:	.text "FNorm"	;  name of word as a string, ending at wh_NameLastChar
>8a17	05					.byte *-L1	;wh_NameLength	length of name
>8a18	29 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a1a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a1b	08					.byte NN	;wh_Flags	dictionary flags
=35223					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a1c	86 15		stx $15		FNorm:		stx tmp1+0		; save data stack index
.8a1e	a6 4d		ldx $4d		FNormX:		ldx fp			; switch to FP stack
.8a20	b4 4e		ldy $4e,x			ldy FSExp,x
.8a22	b5 58		lda $58,x			lda FSMant0,x		; mantissa negative?
.8a24	30 2d		bmi $8a53			bmi _Neg
.8a26	d0 0f		bne $8a37			bne _Pos2		; do byte shift
.8a28	20 86 8a	jsr $8a86			jsr _ShiftB
.8a2b	d0 0a		bne $8a37			bne _Pos2
.8a2d	20 86 8a	jsr $8a86			jsr _ShiftB
.8a30	d0 05		bne $8a37			bne _Pos2
.8a32	20 86 8a	jsr $8a86			jsr _ShiftB
.8a35	f0 43		beq $8a7a			beq _zero		; no significant bits left?
.8a37	18		clc		_Pos2:		clc
.8a38	30 0a		bmi $8a44			bmi _RShft
.8a3a	88		dey		_Pos3:		dey			; do bit shift
.8a3b	16 76		asl $76,x			asl FSMant3,x
.8a3d	36 6c		rol $6c,x			rol FSMant2,x
.8a3f	36 62		rol $62,x			rol FSMant1,x
.8a41	2a		rol a				rol a
.8a42	10 f6		bpl $8a3a			bpl _Pos3
.8a44					_RShft:
.8a44	c8		iny				iny
.8a45	6a		ror a				ror a
.8a46	76 62		ror $62,x			ror FSMant1,x
.8a48	76 6c		ror $6c,x			ror FSMant2,x
.8a4a	76 76		ror $76,x			ror FSMant3,x
.8a4c					_28:
.8a4c	95 58		sta $58,x			sta FSMant0,x
.8a4e	94 4e		sty $4e,x			sty FSExp,x
.8a50	a6 15		ldx $15				ldx tmp1+0	; restore data stack index
.8a52	60		rts				rts
.8a53					_Neg:
.8a53	c9 ff		cmp #$ff			cmp #$ff
.8a55	d0 11		bne $8a68			bne _Neg2	; do byte shift
.8a57	20 86 8a	jsr $8a86			jsr _ShiftB
.8a5a	c9 ff		cmp #$ff			cmp #$ff
.8a5c	d0 0a		bne $8a68			bne _Neg2
.8a5e	20 86 8a	jsr $8a86			jsr _ShiftB
.8a61	c9 ff		cmp #$ff			cmp #$ff
.8a63	d0 03		bne $8a68			bne _Neg2
.8a65	20 86 8a	jsr $8a86			jsr _ShiftB
.8a68	c9 00		cmp #$00	_Neg2:		cmp #0
.8a6a	10 d8		bpl $8a44			bpl _RShft
.8a6c	88		dey		_Neg3:		dey
.8a6d	16 76		asl $76,x			asl FSMant3,x
.8a6f	36 6c		rol $6c,x			rol FSMant2,x
.8a71	36 62		rol $62,x			rol FSMant1,x
.8a73	2a		rol a				rol a
.8a74	30 f6		bmi $8a6c			bmi _Neg3
.8a76	10 cc		bpl $8a44			bpl _RShft
.8a78	68		pla		_Zerop:		pla
.8a79	68		pla				pla		; pop rts addr from _ShiftB
.8a7a	a9 00		lda #$00	_zero:		lda #0
.8a7c	95 76		sta $76,x			sta FSMant3,x
.8a7e	95 6c		sta $6c,x			sta FSMant2,x
.8a80	95 62		sta $62,x			sta FSMant1,x
.8a82	a0 80		ldy #$80			ldy #$80
.8a84	d0 c6		bne $8a4c			bne _28
.8a86					_ShiftB:
.8a86	98		tya				tya
.8a87	38		sec				sec
.8a88	e9 08		sbc #$08			sbc #8
.8a8a	a8		tay				tay
.8a8b	70 eb		bvs $8a78			bvs _zerop	;is this useful? do we need more of them?
.8a8d	b5 62		lda $62,x			lda FSMant1,x
.8a8f	48		pha				pha
.8a90	b5 6c		lda $6c,x			lda FSMant2,x
.8a92	95 62		sta $62,x			sta FSMant1,x
.8a94	b5 76		lda $76,x			lda FSMant3,x
.8a96	95 6c		sta $6c,x			sta FSMant2,x
.8a98	a9 00		lda #$00			lda #0
.8a9a	95 76		sta $76,x			sta FSMant3,x
.8a9c	68		pla				pla
.8a9d	60		rts				rts
=130					CL	.var *-(WordListLink+wh_Xt)
=$8a9e					en = *	; remember here
>8a1a	82					.byte CL	;wh_CodeLength
>8a9e	46 2b				L1:	.text "F+"	;  name of word as a string, ending at wh_NameLastChar
>8aa0	02					.byte *-L1	;wh_NameLength	length of name
>8aa1	97 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8aa3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8aa4	08					.byte NN	;wh_Flags	dictionary flags
=35360					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8aa5	20 ae 89	jsr $89ae	FPlus:		jsr FMAlignX	; align mantissas
.8aa8	18		clc				clc		; add mantissas
.8aa9	b5 77		lda $77,x			lda FSMant3+1,x
.8aab	75 76		adc $76,x			adc FSMant3+0,x
.8aad	95 77		sta $77,x			sta FSMant3+1,x
.8aaf	b5 6d		lda $6d,x			lda FSMant2+1,x
.8ab1	75 6c		adc $6c,x			adc FSMant2+0,x
.8ab3	95 6d		sta $6d,x			sta FSMant2+1,x
.8ab5	b5 63		lda $63,x			lda FSMant1+1,x
.8ab7	75 62		adc $62,x			adc FSMant1+0,x
.8ab9	95 63		sta $63,x			sta FSMant1+1,x
.8abb	b5 59		lda $59,x			lda FSMant0+1,x
.8abd	75 58		adc $58,x			adc FSMant0+0,x
.8abf					FPlusFin:
.8abf	e8		inx				inx		; FDrop
.8ac0	86 4d		stx $4d				stx fp
.8ac2	50 09		bvc $8acd	FPlusFin3:	bvc _19		; if overflow
.8ac4	6a		ror a				ror a		;   shift mantissa right 1 bit
.8ac5	76 62		ror $62,x			ror FSMant1,x
.8ac7	76 6c		ror $6c,x			ror FSMant2,x
.8ac9	76 76		ror $76,x			ror FSMant3,x
.8acb	f6 4e		inc $4e,x			inc FSExp,x	;   adjust exponent
.8acd					_19:
.8acd	95 58		sta $58,x			sta FSMant0,x
.8acf	4c 1e 8a	jmp $8a1e			jmp FNormX	; normalize, return
=45					CL	.var *-(WordListLink+wh_Xt)
=$8ad2					en = *	; remember here
>8aa3	2d					.byte CL	;wh_CodeLength
>8ad2	46 31 2b			L1:	.text "F1+"	;  name of word as a string, ending at wh_NameLastChar
>8ad5	03					.byte *-L1	;wh_NameLength	length of name
>8ad6	20 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ad8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ad9	08					.byte NN	;wh_Flags	dictionary flags
=35413					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ada	20 91 88	jsr $8891	F1Plus:		jsr F1
.8add	4c a5 8a	jmp $8aa5			jmp FPlus
=6					CL	.var *-(WordListLink+wh_Xt)
=$8ae0					en = *	; remember here
>8ad8	06					.byte CL	;wh_CodeLength
>8ae0	46 2d				L1:	.text "F-"	;  name of word as a string, ending at wh_NameLastChar
>8ae2	02					.byte *-L1	;wh_NameLength	length of name
>8ae3	55 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ae5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ae6	08					.byte NN	;wh_Flags	dictionary flags
=35426					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ae7	20 ae 89	jsr $89ae	FMinus:		jsr FMAlignX	; align mantissas
.8aea	38		sec				sec		; subtract mantissas
.8aeb	b5 77		lda $77,x			lda FSMant3+1,x
.8aed	f5 76		sbc $76,x			sbc FSMant3+0,x
.8aef	95 77		sta $77,x			sta FSMant3+1,x
.8af1	b5 6d		lda $6d,x			lda FSMant2+1,x
.8af3	f5 6c		sbc $6c,x			sbc FSMant2+0,x
.8af5	95 6d		sta $6d,x			sta FSMant2+1,x
.8af7	b5 63		lda $63,x			lda FSMant1+1,x
.8af9	f5 62		sbc $62,x			sbc FSMant1+0,x
.8afb	95 63		sta $63,x			sta FSMant1+1,x
.8afd	b5 59		lda $59,x			lda FSMant0+1,x
.8aff	f5 58		sbc $58,x			sbc FSMant0+0,x
.8b01	4c bf 8a	jmp $8abf			jmp FPlusFin
=29					CL	.var *-(WordListLink+wh_Xt)
=$8b04					en = *	; remember here
>8ae5	1d					.byte CL	;wh_CodeLength
>8b04	46 31 2d			L1:	.text "F1-"	;  name of word as a string, ending at wh_NameLastChar
>8b07	03					.byte *-L1	;wh_NameLength	length of name
>8b08	62 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b0a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b0b	08					.byte NN	;wh_Flags	dictionary flags
=35463					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b0c	20 91 88	jsr $8891	F1Minus:	jsr F1
.8b0f	4c e7 8a	jmp $8ae7			jmp FMinus
=6					CL	.var *-(WordListLink+wh_Xt)
=$8b12					en = *	; remember here
>8b0a	06					.byte CL	;wh_CodeLength
>8b12	46 4e 65 67 61 74 65		L1:	.text "FNegate"	;  name of word as a string, ending at wh_NameLastChar
>8b19	07					.byte *-L1	;wh_NameLength	length of name
>8b1a	87 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b1c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b1d	08					.byte NN	;wh_Flags	dictionary flags
=35481					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b1e	86 15		stx $15		FNegate:	stx tmp1	; save data stack index
.8b20	a6 4d		ldx $4d				ldx fp		; X= FP stack index
.8b22	38		sec				sec		; mantissa = 0 - mantissa
.8b23	a9 00		lda #$00			lda #0
.8b25	f5 76		sbc $76,x			sbc FSMant3,x
.8b27	95 76		sta $76,x			sta FSMant3,x
.8b29	a9 00		lda #$00			lda #0
.8b2b	f5 6c		sbc $6c,x			sbc FSMant2,x
.8b2d	95 6c		sta $6c,x			sta FSMant2,x
.8b2f	a9 00		lda #$00			lda #0
.8b31	f5 62		sbc $62,x			sbc FSMant1,x
.8b33	95 62		sta $62,x			sta FSMant1,x
.8b35	a9 00		lda #$00			lda #0
.8b37	f5 58		sbc $58,x			sbc FSMant0,x
.8b39	4c c2 8a	jmp $8ac2			jmp FPlusFin3	; finish up, return
=30					CL	.var *-(WordListLink+wh_Xt)
=$8b3c					en = *	; remember here
>8b1c	1e					.byte CL	;wh_CodeLength
>8b3c	46 41 62 73			L1:	.text "FAbs"	;  name of word as a string, ending at wh_NameLastChar
>8b40	04					.byte *-L1	;wh_NameLength	length of name
>8b41	99 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b43	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b44	08					.byte NN	;wh_Flags	dictionary flags
=35520					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b45	a4 4d		ldy $4d		FAbs:		ldy fp
.8b47	b9 58 00	lda $0058,y			lda FSMant0,y		; mantissa negative?
.8b4a	30 d2		bmi $8b1e			bmi FNegate
.8b4c	60		rts				rts
=8					CL	.var *-(WordListLink+wh_Xt)
=$8b4d					en = *	; remember here
>8b43	08					.byte CL	;wh_CodeLength
.8b4d	a4 4d		ldy $4d		FPos:		ldy fp			; load FP stack index
.8b4f	b9 58 00	lda $0058,y			lda FSMant0+0,y		; calc result sign
.8b52	59 59 00	eor $0059,y			eor FSMant0+1,y
.8b55	08		php				php
.8b56	b9 59 00	lda $0059,y			lda FSMant0+1,y		; if NOS negative
.8b59	10 07		bpl $8b62			bpl +
.8b5b	e6 4d		inc $4d				inc fp			;   point at NOS
.8b5d	20 1e 8b	jsr $8b1e			jsr FNegate		;   negate NOS
.8b60	c6 4d		dec $4d				dec fp			;   restore fp
.8b62					+
.8b62	20 45 8b	jsr $8b45			jsr FAbs		; abs TOS
.8b65	86 15		stx $15				stx tmp1+0		; save data stack index
.8b67	a6 4d		ldx $4d				ldx fp			; load FP stack index
.8b69	28		plp				plp			; restore sign flag
.8b6a	60		rts				rts
>8b6b	46 2a				L1:	.text "F*"	;  name of word as a string, ending at wh_NameLastChar
>8b6d	02					.byte *-L1	;wh_NameLength	length of name
>8b6e	c0 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b70	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b71	08					.byte NN	;wh_Flags	dictionary flags
=35565					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b72					FStar:
.8b72	20 4d 8b	jsr $8b4d			jsr FPos		; make r1 & r2 positive,
.8b75	08		php				php			;   save r3 sign
.8b76	b5 4e		lda $4e,x			lda FSExp+0,x		; add exponents
.8b78	38		sec				sec
.8b79	75 4f		adc $4f,x			adc FSExp+1,x
.8b7b	95 4f		sta $4f,x			sta FSExp+1,x
.8b7d	50 12		bvc $8b91			bvc _49			; IfVs,
.8b7f	b0 06		bcs $8b87			bcs _zero		;   underflow?
.8b81	a6 15		ldx $15				ldx tmp1+0		;   restore data stack index
.8b83	28		plp				plp			; RDrop sign flag
.8b84	20 77 b2	jsr $b277			jsr Throw_FpOutOfRange
.8b87	e8		inx		_zero:		inx			; F2Drop
.8b88	e8		inx				inx
.8b89	86 4d		stx $4d				stx fp
.8b8b	28		plp				plp			; rdrop saved result sign
.8b8c	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
.8b8e	4c 66 88	jmp $8866			jmp F0			; return zero
.8b91					_49:
.8b91	b5 59		lda $59,x			lda FSMant0+1,x		; save r1 mantissa
.8b93	48		pha				pha
.8b94	b5 63		lda $63,x			lda FSMant1+1,x
.8b96	48		pha				pha
.8b97	b5 6d		lda $6d,x			lda FSMant2+1,x
.8b99	48		pha				pha
.8b9a	b5 77		lda $77,x			lda FSMant3+1,x
.8b9c	a0 00		ldy #$00			ldy #0			; init r3 mantissa
.8b9e	94 59		sty $59,x			sty FSMant0+1,x
.8ba0	94 63		sty $63,x			sty FSMant1+1,x
.8ba2	94 6d		sty $6d,x			sty FSMant2+1,x
.8ba4	94 77		sty $77,x			sty FSMant3+1,x
.8ba6	20 c2 8b	jsr $8bc2			jsr _Byte		; do bytes of r1 mantissa
.8ba9	68		pla				pla
.8baa	20 c2 8b	jsr $8bc2			jsr _Byte
.8bad	68		pla				pla
.8bae	20 c2 8b	jsr $8bc2			jsr _Byte
.8bb1	68		pla				pla
.8bb2	20 c2 8b	jsr $8bc2			jsr _Byte
.8bb5	e6 4d		inc $4d				inc fp			; FDrop
.8bb7	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
.8bb9	28		plp				plp			; fix result sign
.8bba	10 03		bpl $8bbf			bpl +
.8bbc	4c 1e 8b	jmp $8b1e			jmp FNegate
.8bbf					+
.8bbf	4c 1c 8a	jmp $8a1c			jmp FNorm
.8bc2					_Byte:
.8bc2	85 16		sta $16				sta tmp1+1
.8bc4	a0 08		ldy #$08			ldy #8			; for each bit in byte
.8bc6	46 16		lsr $16		_b1:		lsr tmp1+1		;   if bit set
.8bc8	90 19		bcc $8be3			bcc _b3
.8bca	18		clc				clc			;     r3 += r2
.8bcb	b5 77		lda $77,x			lda FSMant3+1,x
.8bcd	75 76		adc $76,x			adc FSMant3+0,x
.8bcf	95 77		sta $77,x			sta FSMant3+1,x
.8bd1	b5 6d		lda $6d,x			lda FSMant2+1,x
.8bd3	75 6c		adc $6c,x			adc FSMant2+0,x
.8bd5	95 6d		sta $6d,x			sta FSMant2+1,x
.8bd7	b5 63		lda $63,x			lda FSMant1+1,x
.8bd9	75 62		adc $62,x			adc FSMant1+0,x
.8bdb	95 63		sta $63,x			sta FSMant1+1,x
.8bdd	b5 59		lda $59,x			lda FSMant0+1,x
.8bdf	75 58		adc $58,x			adc FSMant0+0,x
.8be1	95 59		sta $59,x			sta FSMant0+1,x
.8be3	56 59		lsr $59,x	_b3:		lsr FSMant0+1,x		;   r3 >>= 1
.8be5	76 63		ror $63,x			ror FSMant1+1,x
.8be7	76 6d		ror $6d,x			ror FSMant2+1,x
.8be9	76 77		ror $77,x			ror FSMant3+1,x
.8beb	88		dey				dey			;  next bit
.8bec	d0 d8		bne $8bc6			bne _b1
.8bee	60		rts				rts
=125					CL	.var *-(WordListLink+wh_Xt)
=$8bef					en = *	; remember here
>8b70	7d					.byte CL	;wh_CodeLength
>8bef	46 53 71 72			L1:	.text "FSqr"	;  name of word as a string, ending at wh_NameLastChar
>8bf3	04					.byte *-L1	;wh_NameLength	length of name
>8bf4	ed 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8bf6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8bf7	08					.byte NN	;wh_Flags	dictionary flags
=35699					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8bf8	20 fd 83	jsr $83fd	FSqr:		jsr FDup
.8bfb	4c 72 8b	jmp $8b72			jmp FStar
=6					CL	.var *-(WordListLink+wh_Xt)
=$8bfe					en = *	; remember here
>8bf6	06					.byte CL	;wh_CodeLength
>8bfe	46 31 30 2a			L1:	.text "F10*"	;  name of word as a string, ending at wh_NameLastChar
>8c02	04					.byte *-L1	;wh_NameLength	length of name
>8c03	73 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8c05	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8c06	08					.byte NN	;wh_Flags	dictionary flags
=35714					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8c07	20 fd 83	jsr $83fd	F10Star:	jsr FDup
.8c0a	a4 4d		ldy $4d				ldy fp
.8c0c	b9 4e 00	lda $004e,y			lda FSExp+0,y
.8c0f	18		clc				clc
.8c10	69 01		adc #$01			adc #1
.8c12	99 4e 00	sta $004e,y			sta FSExp+0,y
.8c15	18		clc				clc
.8c16	69 02		adc #$02			adc #2
.8c18	99 4f 00	sta $004f,y			sta FSExp+1,y
.8c1b	4c a5 8a	jmp $8aa5			jmp FPlus
=23					CL	.var *-(WordListLink+wh_Xt)
=$8c1e					en = *	; remember here
>8c05	17					.byte CL	;wh_CodeLength
>8c1e	46 2f				L1:	.text "F/"	;  name of word as a string, ending at wh_NameLastChar
>8c20	02					.byte *-L1	;wh_NameLength	length of name
>8c21	82 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8c23	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8c24	08					.byte NN	;wh_Flags	dictionary flags
=35744					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8c25	20 4d 8b	jsr $8b4d	FSlash:		jsr FPos		; make r1 & r2 positive
.8c28	08		php				php			;   save result sign
.8c29	b5 4f		lda $4f,x			lda FSExp+1,x		; calc exponent
.8c2b	18		clc				clc
.8c2c	69 01		adc #$01			adc #1
.8c2e	38		sec				sec
.8c2f	f5 4e		sbc $4e,x			sbc FSExp+0,x
.8c31	95 4f		sta $4f,x			sta FSExp+1,x
.8c33	50 12		bvc $8c47			bvc _49			;  IfVs
.8c35	b0 06		bcs $8c3d			bcs _Zero		; underflow?
.8c37	28		plp				plp			; drop saved result sign
.8c38	a6 16		ldx $16				ldx tmp1+1		; restore data stack index
.8c3a	20 77 b2	jsr $b277			jsr Throw_FpOutOfRange	; overflow
.8c3d	e8		inx		_Zero:		inx			; F2Drop
.8c3e	e8		inx				inx
.8c3f	86 4d		stx $4d				stx fp
.8c41	28		plp				plp			; drop saved result sign
.8c42	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
.8c44	4c 66 88	jmp $8866			jmp F0			; return 0
.8c47					_49:
.8c47	b5 77		lda $77,x			lda FSMant3+1,x		; tmp32 = r1
.8c49	85 17		sta $17				sta tmp2+0
.8c4b	b5 6d		lda $6d,x			lda FSMant2+1,x
.8c4d	85 18		sta $18				sta tmp2+1
.8c4f	b5 63		lda $63,x			lda FSMant1+1,x
.8c51	85 19		sta $19				sta tmp3+0
.8c53	b5 59		lda $59,x			lda FSMant0+1,x
.8c55	85 1a		sta $1a				sta tmp3+1
.8c57	20 80 8c	jsr $8c80			jsr _Byte
.8c5a	95 59		sta $59,x			sta FSMant0+1,x
.8c5c	20 80 8c	jsr $8c80			jsr _Byte
.8c5f	95 63		sta $63,x			sta FSMant1+1,x
.8c61	20 80 8c	jsr $8c80			jsr _Byte
.8c64	95 6d		sta $6d,x			sta FSMant2+1,x
.8c66	20 80 8c	jsr $8c80			jsr _Byte
.8c69	95 77		sta $77,x			sta FSMant3+1,x
.8c6b	56 59		lsr $59,x			lsr FSMant0+1,x
.8c6d	76 63		ror $63,x			ror FSMant1+1,x
.8c6f	76 6d		ror $6d,x			ror FSMant2+1,x
.8c71	76 77		ror $77,x			ror FSMant3+1,x
.8c73	e6 4d		inc $4d				inc fp			; FDrop
.8c75	a6 15		ldx $15				ldx tmp1+0		; restore X
.8c77	28		plp				plp			; fix sign
.8c78	10 03		bpl $8c7d			bpl +
.8c7a	20 1e 8b	jsr $8b1e			jsr FNegate
.8c7d	4c 1c 8a	jmp $8a1c	+		jmp FNorm
.8c80					_Byte:
.8c80	a0 08		ldy #$08			ldy #8			; for 8 bits
.8c82					_1:
.8c82	a5 1a		lda $1a				lda tmp3+1		;   if r1>=r2
.8c84	d5 58		cmp $58,x			cmp FSMant0+0,x
.8c86	d0 10		bne $8c98			bne _4
.8c88	a5 19		lda $19				lda tmp3+0
.8c8a	d5 62		cmp $62,x			cmp FSMant1+0,x
.8c8c	d0 0a		bne $8c98			bne _4
.8c8e	a5 18		lda $18				lda tmp2+1
.8c90	d5 6c		cmp $6c,x			cmp FSMant2+0,x
.8c92	d0 04		bne $8c98			bne _4
.8c94	a5 17		lda $17				lda tmp2+0
.8c96	d5 76		cmp $76,x			cmp FSMant3+0,x
.8c98	90 18		bcc $8cb2	_4:		bcc _2
.8c9a	a5 17		lda $17				lda tmp2+0		;     tmp32 -= r2
.8c9c	f5 76		sbc $76,x			sbc FSMant3+0,x
.8c9e	85 17		sta $17				sta tmp2+0
.8ca0	a5 18		lda $18				lda tmp2+1
.8ca2	f5 6c		sbc $6c,x			sbc FSMant2+0,x
.8ca4	85 18		sta $18				sta tmp2+1
.8ca6	a5 19		lda $19				lda tmp3+0
.8ca8	f5 62		sbc $62,x			sbc FSMant1+0,x
.8caa	85 19		sta $19				sta tmp3+0
.8cac	a5 1a		lda $1a				lda tmp3+1
.8cae	f5 58		sbc $58,x			sbc FSMant0+0,x
.8cb0	85 1a		sta $1a				sta tmp3+1
.8cb2	26 16		rol $16		_2:		rol tmp1+1		;   accum quotient bits
.8cb4	06 17		asl $17				asl tmp2+0
.8cb6	26 18		rol $18				rol tmp2+1
.8cb8	26 19		rol $19				rol tmp3+0
.8cba	26 1a		rol $1a				rol tmp3+1		;   tmp32<<=1
.8cbc	88		dey				dey			;  next
.8cbd	d0 c3		bne $8c82			bne _1
.8cbf	a5 16		lda $16				lda tmp1+1		; return bits
.8cc1	60		rts				rts
=157					CL	.var *-(WordListLink+wh_Xt)
=$8cc2					en = *	; remember here
>8c23	9d					.byte CL	;wh_CodeLength
>8cc2	46 31 2f			L1:	.text "F1/"	;  name of word as a string, ending at wh_NameLastChar
>8cc5	03					.byte *-L1	;wh_NameLength	length of name
>8cc6	a0 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8cc8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8cc9	08					.byte NN	;wh_Flags	dictionary flags
=35909					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8cca	20 91 88	jsr $8891	F1Slash:	jsr F1
.8ccd	20 85 84	jsr $8485			jsr FSwap
.8cd0	4c 25 8c	jmp $8c25			jmp FSlash
=9					CL	.var *-(WordListLink+wh_Xt)
=$8cd3					en = *	; remember here
>8cc8	09					.byte CL	;wh_CodeLength
>8cd3	45 2a				L1:	.text "E*"	;  name of word as a string, ending at wh_NameLastChar
>8cd5	02					.byte *-L1	;wh_NameLength	length of name
>8cd6	45 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8cd8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8cd9	08					.byte NN	;wh_Flags	dictionary flags
=35925					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8cda					EStar:
.8cda	20 4d 8b	jsr $8b4d			jsr FPos		; make r1 & r2 positive
.8cdd	08		php				php			;   remember result sign
.8cde	b5 4e		lda $4e,x			lda FSExp+0,x		; add exponents
.8ce0	38		sec				sec
.8ce1	75 4f		adc $4f,x			adc FSExp+1,x
.8ce3	95 4f		sta $4f,x			sta FSExp+1,x
.8ce5	70 15		bvs $8cfc			bvs _ExpOvfl
.8ce7	b5 59		lda $59,x			lda FSMant0+1,x		; save e1
.8ce9	48		pha				pha
.8cea	b5 63		lda $63,x			lda FSMant1+1,x
.8cec	a0 00		ldy #$00			ldy #0
.8cee	94 59		sty $59,x			sty FSMant0+1,x
.8cf0	94 63		sty $63,x			sty FSMant1+1,x		; zero result
.8cf2	20 0b 8d	jsr $8d0b			jsr _Byte		; do FSMant1+1 byte
.8cf5	68		pla				pla
.8cf6	20 0b 8d	jsr $8d0b			jsr _Byte		; do FSMant0+1 byte
.8cf9	4c 28 8d	jmp $8d28			jmp EFix3		; finish
.8cfc					_ExpOvfl:
.8cfc	b0 05		bcs $8d03			bcs _Zero		;underflow?
.8cfe	a6 15		ldx $15				ldx tmp1+0		; restore X
.8d00	20 77 b2	jsr $b277			jsr Throw_FpOutOfRange	;overflow
.8d03	a9 00		lda #$00	_Zero:		lda #0
.8d05	95 63		sta $63,x			sta FSMant1+1,x
.8d07	95 59		sta $59,x			sta FSMant0+1,x
.8d09	f0 1d		beq $8d28			beq EFix3
.8d0b					_Byte:
.8d0b	85 16		sta $16				sta tmp1+1
.8d0d	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d0f	46 16		lsr $16		_b1:		lsr tmp1+1		;   if bit set
.8d11	90 0d		bcc $8d20			bcc _b5
.8d13	18		clc				clc			;     r3 += r2
.8d14	b5 62		lda $62,x			lda FSMant1+0,x
.8d16	75 63		adc $63,x			adc FSMant1+1,x
.8d18	95 63		sta $63,x			sta FSMant1+1,x
.8d1a	b5 58		lda $58,x			lda FSMant0+0,x
.8d1c	75 59		adc $59,x			adc FSMant0+1,x
.8d1e	95 59		sta $59,x			sta FSMant0+1,x
.8d20					_b5:
.8d20	76 59		ror $59,x			ror FSMant0+1,x		;   r3 <<= 1
.8d22	76 63		ror $63,x			ror FSMant1+1,x
.8d24	88		dey				dey			;  next bit
.8d25	d0 e8		bne $8d0f			bne _b1
.8d27	60		rts				rts
=78					CL	.var *-(WordListLink+wh_Xt)
=$8d28					en = *	; remember here
>8cd8	4e					.byte CL	;wh_CodeLength
.8d28					EFix3:
.8d28	a9 00		lda #$00			lda #0			; zero unused mantissa
.8d2a	95 6d		sta $6d,x			sta FSMant2+1,x
.8d2c	95 77		sta $77,x			sta FSMant3+1,x
.8d2e	e6 4d		inc $4d				inc fp			; FDrop
.8d30	a6 15		ldx $15				ldx tmp1+0		; restore X
.8d32	28		plp				plp			;fix result sign
.8d33	10 03		bpl $8d38			bpl +
.8d35	4c 1e 8b	jmp $8b1e			jmp FNegate
.8d38	4c 1c 8a	jmp $8a1c	+		jmp FNorm
>8d3b	45 53 71 72			L1:	.text "ESqr"	;  name of word as a string, ending at wh_NameLastChar
>8d3f	04					.byte *-L1	;wh_NameLength	length of name
>8d40	55 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8d42	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8d43	08					.byte NN	;wh_Flags	dictionary flags
=36031					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8d44	20 fd 83	jsr $83fd	ESqr:		jsr FDup
.8d47	4c da 8c	jmp $8cda			jmp EStar
=6					CL	.var *-(WordListLink+wh_Xt)
=$8d4a					en = *	; remember here
>8d42	06					.byte CL	;wh_CodeLength
>8d4a	45 2f				L1:	.text "E/"	;  name of word as a string, ending at wh_NameLastChar
>8d4c	02					.byte *-L1	;wh_NameLength	length of name
>8d4d	bf 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8d4f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8d50	08					.byte NN	;wh_Flags	dictionary flags
=36044					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8d51	20 4d 8b	jsr $8b4d	ESlash:		jsr FPos	; make r1 & r2 positive
.8d54	08		php				php		; remember result sign
.8d55	b5 4f		lda $4f,x			lda FSExp+1,x		; calc r3 exponent
.8d57	38		sec				sec
.8d58	f5 4e		sbc $4e,x			sbc FSExp+0,x
.8d5a	70 17		bvs $8d73			bvs _ExpOvfl
.8d5c	18		clc				clc
.8d5d	69 01		adc #$01			adc #1
.8d5f	95 4f		sta $4f,x			sta FSExp+1,x
.8d61	20 79 8d	jsr $8d79			jsr _Byte		; get quotient hi byte
.8d64	48		pha				pha
.8d65	20 79 8d	jsr $8d79			jsr _Byte		; get quotient lo byte
.8d68	95 63		sta $63,x			sta FSMant1+1,x
.8d6a	68		pla				pla
.8d6b	4a		lsr a				lsr a
.8d6c	95 59		sta $59,x			sta FSMant0+1,x
.8d6e	76 63		ror $63,x			ror FSMant1+1,x
.8d70	4c 28 8d	jmp $8d28			jmp EFix3
.8d73					_ExpOvfl:
.8d73	28		plp				plp			; rdrop saved result sign
.8d74	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
.8d76	20 77 b2	jsr $b277			jsr Throw_FpOutOfRange	; overflow
.8d79					_Byte:
.8d79	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d7b	b5 59		lda $59,x	_b1:		lda FSMant0+1,x		;   if r1 >= r2
.8d7d	d5 58		cmp $58,x			cmp FSMant0+0,x
.8d7f	d0 04		bne $8d85			bne _b2
.8d81	b5 63		lda $63,x			lda FSMant1+1,x
.8d83	f5 62		sbc $62,x			sbc FSMant1+0,x
.8d85	90 0c		bcc $8d93	_b2:		bcc _b5
.8d87	b5 63		lda $63,x			lda FSMant1+1,x		;     r1 -= r2
.8d89	f5 62		sbc $62,x			sbc FSMant1+0,x
.8d8b	95 63		sta $63,x			sta FSMant1+1,x
.8d8d	b5 59		lda $59,x			lda FSMant0+1,x
.8d8f	f5 58		sbc $58,x			sbc FSMant0+0,x
.8d91	95 59		sta $59,x			sta FSMant0+1,x
.8d93					_b5:
.8d93	26 16		rol $16				rol tmp1+1		;   save quotient bit
.8d95	16 63		asl $63,x			asl FSMant1+1,x		;   r1 *= 2
.8d97	36 59		rol $59,x			rol FSMant0+1,x
.8d99	88		dey				dey			;  next bit
.8d9a	d0 df		bne $8d7b			bne _b1
.8d9c	a5 16		lda $16				lda tmp1+1		; return bits
.8d9e	60		rts				rts
=78					CL	.var *-(WordListLink+wh_Xt)
=$8d9f					en = *	; remember here
>8d4f	4e					.byte CL	;wh_CodeLength
>8d9f	45 31 2f			L1:	.text "E1/"	;  name of word as a string, ending at wh_NameLastChar
>8da2	03					.byte *-L1	;wh_NameLength	length of name
>8da3	cc 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8da5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8da6	08					.byte NN	;wh_Flags	dictionary flags
=36130					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8da7	20 91 88	jsr $8891	E1Slash:	jsr F1
.8daa	20 85 84	jsr $8485			jsr FSwap
.8dad	4c 51 8d	jmp $8d51			jmp ESlash
=9					CL	.var *-(WordListLink+wh_Xt)
=$8db0					en = *	; remember here
>8da5	09					.byte CL	;wh_CodeLength
>8db0	53 3e 46			L1:	.text "S>F"	;  name of word as a string, ending at wh_NameLastChar
>8db3	03					.byte *-L1	;wh_NameLength	length of name
>8db4	22 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8db6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8db7	08					.byte NN	;wh_Flags	dictionary flags
=36147					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8db8	20 55 b2	jsr $b255	SToF:		jsr PopYA		; pop n
.8dbb	20 92 83	jsr $8392	SToFYA:		jsr FAllocX		; alloc FP stack entry
.8dbe	94 58		sty $58,x			sty FSMant0,x		; copy n to mantissa
.8dc0	95 62		sta $62,x			sta FSMant1,x
.8dc2	a9 00		lda #$00			lda #0			; pad mantissa
.8dc4	95 6c		sta $6c,x			sta FSMant2,x
.8dc6	95 76		sta $76,x			sta FSMant3,x
.8dc8	a9 0f		lda #$0f			lda #15			; set exponent
.8dca	95 4e		sta $4e,x			sta FSExp,x
.8dcc	4c 1e 8a	jmp $8a1e			jmp FNormX		; normalize, return
=23					CL	.var *-(WordListLink+wh_Xt)
=$8dcf					en = *	; remember here
>8db6	17					.byte CL	;wh_CodeLength
>8dcf	44 3e 46			L1:	.text "D>F"	;  name of word as a string, ending at wh_NameLastChar
>8dd2	03					.byte *-L1	;wh_NameLength	length of name
>8dd3	33 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8dd5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8dd6	08					.byte NN	;wh_Flags	dictionary flags
=36178					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8dd7	20 92 83	jsr $8392	FDToF:		jsr FAllocX		; alloc FP stack entry
.8dda	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
.8ddc	a4 4d		ldy $4d				ldy fp
.8dde	b5 27		lda $27,x			lda DStack+2,x		; mantissa= d
.8de0	99 76 00	sta $0076,y			sta FSMant3,y
.8de3	b5 28		lda $28,x			lda DStack+3,x
.8de5	99 6c 00	sta $006c,y			sta FSMant2,y
.8de8	b5 25		lda $25,x			lda DStack+0,x
.8dea	99 62 00	sta $0062,y			sta FSMant1,y
.8ded	b5 26		lda $26,x			lda DStack+1,x
.8def	99 58 00	sta $0058,y			sta FSMant0,y
.8df2	a9 1f		lda #$1f			lda #31			; set exponent
.8df4	99 4e 00	sta $004e,y			sta FSExp,y
.8df7	20 17 c3	jsr $c317			jsr Two_Drop
.8dfa	4c 1c 8a	jmp $8a1c			jmp FNorm		; normalize, & return
=38					CL	.var *-(WordListLink+wh_Xt)
=$8dfd					en = *	; remember here
>8dd5	26					.byte CL	;wh_CodeLength
>8dfd	46 3e 53			L1:	.text "F>S"	;  name of word as a string, ending at wh_NameLastChar
>8e00	03					.byte *-L1	;wh_NameLength	length of name
>8e01	52 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e03	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e04	08					.byte NN	;wh_Flags	dictionary flags
=36224					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e05	a4 4d		ldy $4d		FToS:		ldy fp
.8e07	b9 58 00	lda $0058,y			lda FSMant0,y		; save sign
.8e0a	08		php				php
.8e0b	10 03		bpl $8e10			bpl +
.8e0d	20 1e 8b	jsr $8b1e			jsr FNegate
.8e10					+
.8e10	a9 0f		lda #$0f			lda #15
.8e12	20 2a 86	jsr $862a			jsr FIntAlignA
.8e15	c0 10		cpy #$10			cpy #15+1		; always positive, so unsigned compare works
.8e17	b0 17		bcs $8e30			bcs _overflow
.8e19	a4 4d		ldy $4d				ldy fp
.8e1b	ca		dex				dex
.8e1c	ca		dex				dex
.8e1d	b9 58 00	lda $0058,y			lda FSMant0,y
.8e20	95 26		sta $26,x			sta DStack+1,x
.8e22	b9 62 00	lda $0062,y			lda FSMant1,y
.8e25	95 25		sta $25,x			sta DStack+0,x
.8e27	e6 4d		inc $4d				inc fp			; FDrop
.8e29	28		plp				plp			; apply saved sign
.8e2a	30 01		bmi $8e2d			bmi +
.8e2c	60		rts				rts
.8e2d	4c 70 c4	jmp $c470	+		jmp Negate
.8e30	28		plp		_overflow:	plp			; RDrop saved sign
.8e31	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8e33	20 c4 b2	jsr $b2c4			jsr ThrowA
=49					CL	.var *-(WordListLink+wh_Xt)
=$8e36					en = *	; remember here
>8e03	31					.byte CL	;wh_CodeLength
>8e36	46 3e 44			L1:	.text "F>D"	;  name of word as a string, ending at wh_NameLastChar
>8e39	03					.byte *-L1	;wh_NameLength	length of name
>8e3a	80 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e3c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e3d	08					.byte NN	;wh_Flags	dictionary flags
=36281					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e3e	a4 4d		ldy $4d		FToD:		ldy fp
.8e40	b9 58 00	lda $0058,y			lda FSMant0,y		; save sign
.8e43	08		php				php
.8e44	10 03		bpl $8e49			bpl +
.8e46	20 1e 8b	jsr $8b1e			jsr FNegate
.8e49					+
.8e49	a9 1f		lda #$1f			lda #31
.8e4b	20 2a 86	jsr $862a			jsr FIntAlignA
.8e4e	c0 20		cpy #$20			cpy #31+1		; always positive, so unsigned compare works
.8e50	b0 23		bcs $8e75			bcs _overflow
.8e52	a4 4d		ldy $4d				ldy fp
.8e54	ca		dex				dex
.8e55	ca		dex				dex
.8e56	ca		dex				dex
.8e57	ca		dex				dex
.8e58	b9 58 00	lda $0058,y			lda FSMant0,y
.8e5b	95 26		sta $26,x			sta DStack+1,x
.8e5d	b9 62 00	lda $0062,y			lda FSMant1,y
.8e60	95 25		sta $25,x			sta DStack+0,x
.8e62	b9 6c 00	lda $006c,y			lda FSMant2,y
.8e65	95 28		sta $28,x			sta DStack+3,x
.8e67	b9 76 00	lda $0076,y			lda FSMant3,y
.8e6a	95 27		sta $27,x			sta DStack+2,x
.8e6c	e6 4d		inc $4d				inc fp			; FDrop
.8e6e	28		plp				plp			; apply saved sign
.8e6f	30 01		bmi $8e72			bmi +
.8e71	60		rts				rts
.8e72	4c a1 c4	jmp $c4a1	+		jmp DNegate
.8e75	28		plp		_overflow:	plp			; RDrop sign
.8e76	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8e78	20 c4 b2	jsr $b2c4			jsr ThrowA
=61					CL	.var *-(WordListLink+wh_Xt)
=$8e7b					en = *	; remember here
>8e3c	3d					.byte CL	;wh_CodeLength
>8e7b	46 52 6e 64			L1:	.text "FRnd"	;  name of word as a string, ending at wh_NameLastChar
>8e7f	04					.byte *-L1	;wh_NameLength	length of name
>8e80	b9 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e82	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e83	08					.byte NN	;wh_Flags	dictionary flags
=36351					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e84	20 5f 82	jsr $825f	FRnd:		jsr Rand		; generate next RndState
.8e87	20 92 83	jsr $8392			jsr FAllocX		; alloc FP stack entry
.8e8a	a9 00		lda #$00			lda #0			; exponent=0
.8e8c	95 4e		sta $4e,x			sta FSExp,x
.8e8e	ad 35 03	lda $0335			lda RndState+1		; mantissa = RndState
.8e91	4a		lsr a				lsr a			;   make positive
.8e92	95 58		sta $58,x			sta FSMant0,x
.8e94	ad 34 03	lda $0334			lda RndState+0
.8e97	95 62		sta $62,x			sta FSMant1,x
.8e99	ad 37 03	lda $0337			lda RndState+3
.8e9c	95 6c		sta $6c,x			sta FSMant2,x
.8e9e	ad 36 03	lda $0336			lda RndState+2
.8ea1	95 76		sta $76,x			sta FSMant3,x
.8ea3	4c 1e 8a	jmp $8a1e			jmp FNormX		; normalize, return
=34					CL	.var *-(WordListLink+wh_Xt)
=$8ea6					en = *	; remember here
>8e82	22					.byte CL	;wh_CodeLength
>8ea6	46 53 71 72 74			L1:	.text "FSqrt"	;  name of word as a string, ending at wh_NameLastChar
>8eab	05					.byte *-L1	;wh_NameLength	length of name
>8eac	ff 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8eae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8eaf	08					.byte NN	;wh_Flags	dictionary flags
=36395					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8eb0	a4 4d		ldy $4d		FSqrt:		ldy fp
.8eb2	b9 58 00	lda $0058,y			lda FSMant0,y		; zero?
.8eb5	d0 01		bne $8eb8			bne +
.8eb7	60		rts				rts			;   just return the zero
.8eb8					+
.8eb8	20 fd 83	jsr $83fd			jsr FDup		; get trial value
.8ebb	a4 4d		ldy $4d				ldy fp
.8ebd	b9 4e 00	lda $004e,y			lda FSExp,y		; halve the exponent of trial value
.8ec0	c9 80		cmp #$80			cmp #$80
.8ec2	6a		ror a				ror a
.8ec3	99 4e 00	sta $004e,y			sta FSExp,y
.8ec6	a9 09		lda #$09			lda #9			; for 9 iterations
.8ec8	48		pha		_3:		pha
.8ec9	20 75 84	jsr $8475			jsr F2Dup		;   calc new trial value
.8ecc	20 25 8c	jsr $8c25			jsr FSlash
.8ecf	20 a5 8a	jsr $8aa5			jsr FPlus
.8ed2	20 a3 89	jsr $89a3			jsr F2Slash
.8ed5	68		pla				pla			;  next
.8ed6	38		sec				sec
.8ed7	e9 01		sbc #$01			sbc #1
.8ed9	d0 ed		bne $8ec8			bne _3
.8edb	4c d7 83	jmp $83d7			jmp FNip		; return trial value
=46					CL	.var *-(WordListLink+wh_Xt)
=$8ede					en = *	; remember here
>8eae	2e					.byte CL	;wh_CodeLength
>8ede	48 65 78 3e 46			L1:	.text "Hex>F"	;  name of word as a string, ending at wh_NameLastChar
>8ee3	05					.byte *-L1	;wh_NameLength	length of name
>8ee4	2b 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ee6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ee7	08					.byte NN	;wh_Flags	dictionary flags
=36451					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ee8	20 92 83	jsr $8392	HexToF:		jsr FAllocX		; alloc FP stack entry
.8eeb	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
.8eed	a4 4d		ldy $4d				ldy fp			; Y= FP stack index
.8eef	20 39 b2	jsr $b239			jsr PopA		; pop n_exp
.8ef2	99 4e 00	sta $004e,y			sta FSExp,y
.8ef5	b5 26		lda $26,x			lda DStack+1,x
.8ef7	99 58 00	sta $0058,y			sta FSMant0,y
.8efa	b5 25		lda $25,x			lda DStack+0,x
.8efc	99 62 00	sta $0062,y			sta FSMant1,y
.8eff	b5 28		lda $28,x			lda DStack+3,x
.8f01	99 6c 00	sta $006c,y			sta FSMant2,y
.8f04	b5 27		lda $27,x			lda DStack+2,x
.8f06	99 76 00	sta $0076,y			sta FSMant3,y
.8f09	4c 17 c3	jmp $c317			jmp Two_Drop
=36					CL	.var *-(WordListLink+wh_Xt)
=$8f0c					en = *	; remember here
>8ee6	24					.byte CL	;wh_CodeLength
>8f0c	46 3e 48 65 78			L1:	.text "F>Hex"	;  name of word as a string, ending at wh_NameLastChar
>8f11	05					.byte *-L1	;wh_NameLength	length of name
>8f12	63 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f14	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f15	08					.byte NN	;wh_Flags	dictionary flags
=36497					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f16	a4 4d		ldy $4d		FToHex:		ldy fp		; Y= FP stack index
.8f18	ca		dex				dex
.8f19	ca		dex				dex
.8f1a	ca		dex				dex
.8f1b	ca		dex				dex
.8f1c	ca		dex				dex
.8f1d	ca		dex				dex
.8f1e	b9 58 00	lda $0058,y			lda FSMant0,y	; copy mantissa
.8f21	95 28		sta $28,x			sta DStack+3,x
.8f23	b9 62 00	lda $0062,y			lda FSMant1,y
.8f26	95 27		sta $27,x			sta DStack+2,x
.8f28	b9 6c 00	lda $006c,y			lda FSMant2,y
.8f2b	95 2a		sta $2a,x			sta DStack+5,x
.8f2d	b9 76 00	lda $0076,y			lda FSMant3,y
.8f30	95 29		sta $29,x			sta DStack+4,x
.8f32	b9 4e 00	lda $004e,y			lda FSExp,y	; copy exponent
.8f35	95 25		sta $25,x			sta DStack+0,x
.8f37	29 80		and #$80			and #$80	;   sign extend
.8f39	f0 02		beq $8f3d			beq +
.8f3b	a9 ff		lda #$ff			lda #$ff
.8f3d	95 26		sta $26,x	+		sta DStack+1,x
.8f3f	e6 4d		inc $4d				inc fp		; FDrop
.8f41	60		rts				rts
=44					CL	.var *-(WordListLink+wh_Xt)
=$8f42					en = *	; remember here
>8f14	2c					.byte CL	;wh_CodeLength
>8f42	46 2e 48 65 78			L1:	.text "F.Hex"	;  name of word as a string, ending at wh_NameLastChar
>8f47	05					.byte *-L1	;wh_NameLength	length of name
>8f48	91 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f4a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f4b	08					.byte NN	;wh_Flags	dictionary flags
=36551					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f4c	20 16 8f	jsr $8f16	FDotHex:	jsr FToHex	; get parts of r
.8f4f	20 74 cc	jsr $cc74			jsr Not_Rot
.8f52	20 5b a7	jsr $a75b			jsr Dot_Hex	; do mantissa
.8f55	20 5b a7	jsr $a75b			jsr Dot_Hex
.8f58	a9 3a		lda #$3a			lda #':'
.8f5a	20 b8 cb	jsr $cbb8			jsr Emit_A
.8f5d	4c 39 a7	jmp $a739			jmp C_Dot_Hex	; do exponent
=20					CL	.var *-(WordListLink+wh_Xt)
=$8f60					en = *	; remember here
>8f4a	14					.byte CL	;wh_CodeLength
.8f60					pfcst:
.8f60	a9 01		lda #$01			lda #1
.8f62	85 0e		sta $0e				sta ToHold
.8f64	60		rts				rts
.8f65					pfch:
.8f65	a4 0e		ldy $0e				ldy ToHold
.8f67	91 00		sta ($00),y			sta (cp),y
.8f69	e6 0e		inc $0e				inc ToHold
.8f6b	60		rts				rts
.8f6c					pfcen:
.8f6c	a5 0e		lda $0e				lda ToHold
.8f6e	38		sec				sec
.8f6f	e9 01		sbc #$01			sbc #1
.8f71	a0 00		ldy #$00			ldy #0
.8f73	91 00		sta ($00),y			sta (cp),y		; fill in length
.8f75	4c 18 c8	jmp $c818			jmp Here		; push start addr
.8f78					pfciA:
.8f78	a8		tay				tay
.8f79	10 0a		bpl $8f85			bpl _15			; IfMi,
.8f7b	49 ff		eor #$ff			eor #$ff
.8f7d	18		clc				clc
.8f7e	69 01		adc #$01			adc #1
.8f80	48		pha				pha
.8f81	a9 2d		lda #$2d			lda #'-'
.8f83	d0 03		bne $8f88			bne _19
.8f85	48		pha		_15:		pha
.8f86	a9 2b		lda #$2b			lda #'+'
.8f88					_19:
.8f88	20 65 8f	jsr $8f65			jsr pfch
.8f8b	68		pla				pla
.8f8c	a0 2f		ldy #$2f			ldy #'0'-1
.8f8e	c8		iny		_20:		iny
.8f8f	38		sec				sec
.8f90	e9 0a		sbc #$0a			sbc #10
.8f92	b0 fa		bcs $8f8e			bcs _20
.8f94	69 0a		adc #$0a			adc #10
.8f96	48		pha				pha
.8f97	98		tya				tya
.8f98	20 65 8f	jsr $8f65			jsr pfch
.8f9b	68		pla				pla
.8f9c	09 30		ora #$30			ora #'0'
.8f9e	d0 c5		bne $8f65			bne pfch
.8fa0					FMSign:
.8fa0	a4 4d		ldy $4d				ldy fp			; if negative
.8fa2	b9 58 00	lda $0058,y			lda FSMant0,y
.8fa5	10 08		bpl $8faf			bpl _19
.8fa7	a9 2d		lda #$2d			lda #'-'		;   append sign
.8fa9	20 65 8f	jsr $8f65			jsr pfch
.8fac	4c 1e 8b	jmp $8b1e			jmp FNegate		;   make positive, return
.8faf	60		rts		_19:		rts
>8fb0	28 46 2e 29			L1:	.text "(F.)"	;  name of word as a string, ending at wh_NameLastChar
>8fb4	04					.byte *-L1	;wh_NameLength	length of name
>8fb5	c7 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8fb7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8fb8	08					.byte NN	;wh_Flags	dictionary flags
=36660					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8fb9	20 40 b6	jsr $b640	PFDot:		jsr One		;alloc & init work area
.8fbc	ad ff 02	lda $02ff			lda PrecisionV
.8fbf	20 27 b6	jsr $b627			jsr PushZA
=$27					_decimalPos   = DStack+2	; decimal point position
=$26					_mantNzFound  = DStack+1	; nonzero mantissa digit processed
=$25					_NumSigDigits = DStack+0	; # of significant digits
.8fc2	20 60 8f	jsr $8f60			jsr pfcst		;start collecting chars
.8fc5	20 a0 8f	jsr $8fa0			jsr FMSign		;do mantissa sign
.8fc8	a4 4d		ldy $4d		_a:		ldy fp
.8fca	b9 4e 00	lda $004e,y			lda FSExp,y		;scale down to <10
.8fcd	30 18		bmi $8fe7			bmi _a9			; exponent negative?
.8fcf	c9 04		cmp #$04			cmp #4
.8fd1	90 14		bcc $8fe7			bcc _a9			;   < 4 ?
.8fd3	d0 07		bne $8fdc			bne _a2			;   > 4 ?
.8fd5	b9 58 00	lda $0058,y			lda FSMant0,y
.8fd8	c9 50		cmp #$50			cmp #$50
.8fda	90 0b		bcc $8fe7			bcc _a9
.8fdc	f6 27		inc $27,x	_a2:		inc _decimalPos,x
.8fde	20 75 88	jsr $8875			jsr F10
.8fe1	20 25 8c	jsr $8c25			jsr FSlash
.8fe4	4c c8 8f	jmp $8fc8			jmp _a
.8fe7					_a9:
.8fe7					_c:
.8fe7	b5 27		lda $27,x			lda _decimalPos,x	;  insert decimal point here?
.8fe9	d0 05		bne $8ff0			bne _c2
.8feb	a9 2e		lda #$2e			lda #'.'
.8fed	20 65 8f	jsr $8f65			jsr pfch
.8ff0	d6 27		dec $27,x	_c2:		dec _decimalPos,x
.8ff2	20 fd 83	jsr $83fd			jsr FDup		;  do a digit
.8ff5	20 05 8e	jsr $8e05			jsr FToS		; ( work n )
.8ff8	b5 25		lda $25,x			lda DStack+0,x
.8ffa	15 28		ora $28,x			ora _mantNzFound+2,x	;  doing significant digits?
.8ffc	95 28		sta $28,x			sta _mantNzFound+2,x
.8ffe	f0 08		beq $9008			beq _c7
.9000	d6 27		dec $27,x			dec _NumSigDigits+2,x
.9002	10 04		bpl $9008			bpl +
.9004	e8		inx				inx			;    drop integer
.9005	e8		inx				inx
.9006	d0 17		bne $901f			bne _d
.9008					+
.9008	b5 25		lda $25,x	_c7:		lda DStack+0,x		;  store the char
.900a	09 30		ora #$30			ora #'0'
.900c	20 65 8f	jsr $8f65			jsr pfch
.900f	20 b8 8d	jsr $8db8			jsr SToF		; ( work )
.9012	20 e7 8a	jsr $8ae7			jsr FMinus
.9015	20 07 8c	jsr $8c07			jsr F10Star
.9018	a4 4d		ldy $4d				ldy fp			;  until mantissa==0
.901a	b9 58 00	lda $0058,y			lda FSMant0,y
.901d	d0 c8		bne $8fe7			bne _c
.901f	d6 27		dec $27,x	_d:		dec _decimalPos,x	;do trailing zeros
.9021	30 08		bmi $902b			bmi _d9
.9023	a9 30		lda #$30			lda #'0'
.9025	20 65 8f	jsr $8f65			jsr pfch
.9028	4c 1f 90	jmp $901f			jmp _d
.902b					_d9:
.902b	e8		inx				inx			; drop work area
.902c	e8		inx				inx
.902d	e8		inx				inx
.902e	e8		inx				inx
.902f	e6 4d		inc $4d				inc fp			; FDrop
.9031	4c 6c 8f	jmp $8f6c			jmp pfcen
=123					CL	.var *-(WordListLink+wh_Xt)
=$9034					en = *	; remember here
>8fb7	7b					.byte CL	;wh_CodeLength
>9034	46 2e				L1:	.text "F."	;  name of word as a string, ending at wh_NameLastChar
>9036	02					.byte *-L1	;wh_NameLength	length of name
>9037	34 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9039	03					.byte 3		;wh_CodeLength  (with placeholder value)
>903a	08					.byte NN	;wh_Flags	dictionary flags
=36790					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.903b	20 b9 8f	jsr $8fb9	FDot:		jsr PFDot
.903e	20 1b b0	jsr $b01b	FDot2:		jsr Count
.9041	20 d2 cb	jsr $cbd2			jsr Type
.9044	4c c5 cb	jmp $cbc5			jmp Space
=12					CL	.var *-(WordListLink+wh_Xt)
=$9047					en = *	; remember here
>9039	0c					.byte CL	;wh_CodeLength
>9047	46 2e 53			L1:	.text "F.S"	;  name of word as a string, ending at wh_NameLastChar
>904a	03					.byte *-L1	;wh_NameLength	length of name
>904b	b6 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>904d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>904e	08					.byte NN	;wh_Flags	dictionary flags
=36810					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.904f	a9 09		lda #$09	FDotS:		lda #FDim-1	; for each FP stack entry
.9051	d0 0b		bne $905e			bne _8
.9053	48		pha		_2:		pha
.9054	20 4b 84	jsr $844b			jsr FPick3	;   print it
.9057	20 3b 90	jsr $903b			jsr FDot
.905a	68		pla				pla		;  next
.905b	38		sec				sec
.905c	e9 01		sbc #$01			sbc #1
.905e	c5 4d		cmp $4d		_8:		cmp fp
.9060	b0 f1		bcs $9053			bcs _2
=19					CL	.var *-(WordListLink+wh_Xt)
=$9062					en = *	; remember here
>904d	13					.byte CL	;wh_CodeLength
.9062	60		rts				rts
>9063	28 46 53 2e 29			L1:	.text "(FS.)"	;  name of word as a string, ending at wh_NameLastChar
>9068	05					.byte *-L1	;wh_NameLength	length of name
>9069	ca 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>906b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>906c	08					.byte NN	;wh_Flags	dictionary flags
=36840					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.906d	20 36 b6	jsr $b636	PFSDot:		jsr Zero		; alloc work area
.9070	20 60 8f	jsr $8f60			jsr pfcst
.9073	20 a0 8f	jsr $8fa0			jsr FMSign		;do mantissa sign
.9076	a4 4d		ldy $4d		_1:		ldy fp
.9078	b9 4e 00	lda $004e,y			lda FSExp,y		;while TOS >= 10
.907b	30 1a		bmi $9097			bmi _19
.907d	c9 04		cmp #$04			cmp #4
.907f	90 16		bcc $9097			bcc _19
.9081	d0 09		bne $908c			bne _12
.9083	a4 4d		ldy $4d				ldy fp
.9085	b9 58 00	lda $0058,y			lda FSMant0,y
.9088	c9 50		cmp #$50			cmp #$50
.908a	90 0b		bcc $9097			bcc _19
.908c	f6 25		inc $25,x	_12:		inc DStack+0,x		;  fp*=0.1
.908e	20 9f 88	jsr $889f			jsr F10th
.9091	20 72 8b	jsr $8b72			jsr FStar
.9094	4c 76 90	jmp $9076			jmp _1
.9097					_19:
.9097	a4 4d		ldy $4d		_3:		ldy fp
.9099	b9 58 00	lda $0058,y			lda FSMant0,y
.909c	f0 0f		beq $90ad			beq _39
.909e	b9 4e 00	lda $004e,y			lda FSExp,y		;while fp < 1
.90a1	f0 02		beq $90a5			beq _31
.90a3	10 08		bpl $90ad			bpl _39
.90a5	d6 25		dec $25,x	_31:		dec DStack+0,x		;  fp*=10
.90a7	20 07 8c	jsr $8c07			jsr F10Star
.90aa	4c 97 90	jmp $9097			jmp _3
.90ad					_39:
.90ad	20 df 90	jsr $90df	_4:		jsr pedotd		;do mantissa digits
.90b0	a9 2e		lda #$2e			lda #'.'
.90b2	20 65 8f	jsr $8f65			jsr pfch
.90b5	20 df 90	jsr $90df			jsr pedotd
.90b8	20 df 90	jsr $90df			jsr pedotd
.90bb	20 df 90	jsr $90df			jsr pedotd
.90be	20 df 90	jsr $90df			jsr pedotd
.90c1	20 df 90	jsr $90df			jsr pedotd
.90c4	20 df 90	jsr $90df			jsr pedotd
.90c7	20 df 90	jsr $90df			jsr pedotd
.90ca	20 df 90	jsr $90df			jsr pedotd
.90cd	a9 45		lda #$45			lda #'E'
.90cf	20 65 8f	jsr $8f65			jsr pfch		; do exponent
.90d2	b5 25		lda $25,x			lda DStack+0,x
.90d4	20 78 8f	jsr $8f78			jsr pfciA
.90d7	e8		inx				inx			; Drop work area
.90d8	e8		inx				inx
.90d9	20 60 83	jsr $8360			jsr FDrop
.90dc	4c 6c 8f	jmp $8f6c			jmp pfcen
=114					CL	.var *-(WordListLink+wh_Xt)
=$90df					en = *	; remember here
>906b	72					.byte CL	;wh_CodeLength
.90df					pedotd:
.90df	20 fd 83	jsr $83fd			jsr FDup
.90e2	20 05 8e	jsr $8e05			jsr FToS
.90e5	b5 25		lda $25,x			lda DStack+0,x
.90e7	48		pha				pha
.90e8	20 b8 8d	jsr $8db8			jsr SToF
.90eb	20 e7 8a	jsr $8ae7			jsr FMinus
.90ee	68		pla				pla
.90ef	18		clc				clc
.90f0	69 30		adc #$30			adc #'0'
.90f2	20 65 8f	jsr $8f65			jsr pfch
.90f5	4c 07 8c	jmp $8c07			jmp F10Star
>90f8	46 53 2e			L1:	.text "FS."	;  name of word as a string, ending at wh_NameLastChar
>90fb	03					.byte *-L1	;wh_NameLength	length of name
>90fc	e8 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90ff	08					.byte NN	;wh_Flags	dictionary flags
=36987					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9100	20 6d 90	jsr $906d	FSDot:		jsr PFSDot
.9103	4c 3e 90	jmp $903e			jmp FDot2
=6					CL	.var *-(WordListLink+wh_Xt)
=$9106					en = *	; remember here
>90fe	06					.byte CL	;wh_CodeLength
>9106	46 22				L1:	.text 'F"'	;  name of word as a string, ending at wh_NameLastChar
>9108	02					.byte *-L1	;wh_NameLength	length of name
>9109	7b 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>910b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>910c	0c					.byte IM+NN	;wh_Flags	dictionary flags
=37000					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.910d	20 d1 b8	jsr $b8d1	FQuote:		jsr Parse_Name		; get string
.9110	20 31 91	jsr $9131			jsr ToFloat		; convert
.9113	b5 25		lda $25,x			lda DStack+0,x		; error?
.9115	f0 0a		beq $9121			beq _Err
.9117	e8		inx				inx
.9118	e8		inx				inx
.9119	a5 0a		lda $0a				lda State		; compiling?
.911b	d0 01		bne $911e			bne _compile
.911d	60		rts				rts
.911e	4c 05 88	jmp $8805	_compile:	jmp FLiteral		; compile a FP literal
.9121	a9 36		lda #$36	_Err:		lda #100+err_FPInvalidArg
.9123	20 c4 b2	jsr $b2c4			jsr ThrowA
=25					CL	.var *-(WordListLink+wh_Xt)
=$9126					en = *	; remember here
>910b	19					.byte CL	;wh_CodeLength
>9126	3e 46 6c 6f 61 74		L1:	.text ">Float"	;  name of word as a string, ending at wh_NameLastChar
>912c	06					.byte *-L1	;wh_NameLength	length of name
>912d	88 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>912f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9130	08					.byte NN	;wh_Flags	dictionary flags
=37036					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9131					ToFloat:
.9131	20 36 b6	jsr $b636			jsr Zero	; alloc & init workspace
.9134	20 36 b6	jsr $b636			jsr Zero
.9137	20 36 b6	jsr $b636			jsr Zero
=$2d					_addr		= DStack+8
=$2b					_len		= DStack+6
=$2a					_mantfound 	= DStack+5		;mantissa digits found
=$29					_exponent 	= DStack+4		;exponent
=$28					_decimalPos 	= DStack+3		;decimal point position
=$27					_DecPointFound1 = DStack+2
=$26					_MantissaNegative1 = DStack+1
=$25					_ExponentNegative1 = DStack+0
.913a	20 66 88	jsr $8866			jsr F0			; init result
.913d	20 0f 92	jsr $920f	_11:		jsr _GetChar		; get mantissa prefix
.9140	b0 57		bcs $9199			bcs _trueb ;_finishb
.9142	c9 20		cmp #$20			cmp #' '
.9144	f0 f7		beq $913d			beq _11
.9146	c9 2b		cmp #$2b			cmp #'+'
.9148	f0 06		beq $9150			beq _20
.914a	c9 2d		cmp #$2d			cmp #'-'
.914c	d0 07		bne $9155			bne _21
.914e	95 26		sta $26,x			sta _MantissaNegative1,x ; remember mantissa is negative
.9150	20 0f 92	jsr $920f	_20:		jsr _GetChar		; do next mantissa digits
.9153	b0 47		bcs $919c			bcs _finishb
.9155	c9 2e		cmp #$2e	_21:		cmp #'.'
.9157	f0 31		beq $918a			beq _27
.9159	c9 45		cmp #$45			cmp #'E'
.915b	f0 42		beq $919f			beq _30
.915d	c9 65		cmp #$65			cmp #'e'
.915f	f0 3e		beq $919f			beq _30
.9161	c9 44		cmp #$44			cmp #'D'
.9163	f0 3a		beq $919f			beq _30
.9165	c9 64		cmp #$64			cmp #'d'
.9167	f0 36		beq $919f			beq _30
.9169	38		sec				sec			;   a digit?
.916a	e9 30		sbc #$30			sbc #'0'
.916c	90 24		bcc $9192			bcc _fail
.916e	c9 0a		cmp #$0a			cmp #9+1
.9170	b0 20		bcs $9192			bcs _fail
.9172	48		pha				pha			; append digit to mantissa
.9173	20 07 8c	jsr $8c07			jsr F10Star
.9176	68		pla				pla
.9177	a0 00		ldy #$00			ldy #0
.9179	20 bb 8d	jsr $8dbb			jsr SToFYA
.917c	20 a5 8a	jsr $8aa5			jsr FPlus
.917f	f6 2a		inc $2a,x			inc _mantfound,x	; remember we found a mantissa digit
.9181	b5 27		lda $27,x			lda _DecPointFound1,x	; if mantissa decimal point found
.9183	f0 02		beq $9187			beq +
.9185	d6 28		dec $28,x			dec _decimalPos,x	;   increment decimal point position
.9187					+
.9187	4c 50 91	jmp $9150			jmp _20
.918a					_27:
.918a	b4 27		ldy $27,x			ldy _DecPointFound1,x	; already have one?
.918c	d0 04		bne $9192			bne _fail
.918e	95 27		sta $27,x			sta _DecPointFound1,x	; we have one now!
.9190	f0 be		beq $9150			beq _20
.9192					_fail:
.9192	20 60 83	jsr $8360			jsr FDrop
.9195	a9 00		lda #$00			lda #0			;return false
.9197	f0 69		beq $9202			beq _return
.9199	4c 00 92	jmp $9200	_trueb:		jmp _true
.919c	4c cd 91	jmp $91cd	_finishb:	jmp _finish
.919f					_30:
.919f	20 0f 92	jsr $920f			jsr _GetChar
.91a2	b0 29		bcs $91cd			bcs _finish
.91a4	c9 2b		cmp #$2b			cmp #'+'
.91a6	f0 06		beq $91ae			beq _40
.91a8	c9 2d		cmp #$2d			cmp #'-'
.91aa	d0 07		bne $91b3			bne _41
.91ac	95 25		sta $25,x			sta _ExponentNegative1,x ; remember exponent is negative
.91ae	20 0f 92	jsr $920f	_40:		jsr _GetChar		;get exponent digits
.91b1	b0 1a		bcs $91cd			bcs _finish
.91b3	38		sec		_41:		sec			;  digit?
.91b4	e9 30		sbc #$30			sbc #'0'
.91b6	90 da		bcc $9192			bcc _fail
.91b8	c9 0a		cmp #$0a			cmp #9+1
.91ba	b0 d6		bcs $9192			bcs _fail
.91bc	85 15		sta $15				sta tmp1
.91be	16 29		asl $29,x			asl _exponent,x		;  exponent *= 10
.91c0	b5 29		lda $29,x			lda _exponent,x
.91c2	0a		asl a				asl a
.91c3	0a		asl a				asl a
.91c4	75 29		adc $29,x			adc _exponent,x
.91c6	65 15		adc $15				adc tmp1		;  + digit
.91c8	95 29		sta $29,x			sta _exponent,x
.91ca	4c ae 91	jmp $91ae			jmp _40
.91cd					_finish:
.91cd	b5 2a		lda $2a,x			lda _mantfound,x	;some mantissa digits found?
.91cf	f0 c1		beq $9192			beq _fail
.91d1	b5 25		lda $25,x			lda _ExponentNegative1,x ;apply exponent sign
.91d3	f0 07		beq $91dc			beq +
.91d5	a9 00		lda #$00			lda #0
.91d7	38		sec				sec
.91d8	f5 29		sbc $29,x			sbc _exponent,x
.91da	95 29		sta $29,x			sta _exponent,x
.91dc					+
.91dc	b5 29		lda $29,x			lda _exponent,x		;apply decimal position to exponent
.91de	18		clc				clc
.91df	75 28		adc $28,x			adc _decimalPos,x
.91e1	95 29		sta $29,x			sta _exponent,x
.91e3	4c eb 91	jmp $91eb			jmp _93
.91e6	20 07 8c	jsr $8c07	_93b:		jsr F10Star		;apply exponent to mantissa
.91e9	d6 29		dec $29,x			dec _exponent,x
.91eb	f0 0a		beq $91f7	_93:		beq _94
.91ed	10 f7		bpl $91e6			bpl _93b
.91ef	20 75 88	jsr $8875	_94b:		jsr F10
.91f2	20 25 8c	jsr $8c25			jsr FSlash
.91f5	f6 29		inc $29,x			inc _exponent,x
.91f7	30 f6		bmi $91ef	_94:		bmi _94b
.91f9					_95:
.91f9	b5 26		lda $26,x			lda _MantissaNegative1,x ;apply mantissa sign
.91fb	f0 03		beq $9200			beq +
.91fd	20 1e 8b	jsr $8b1e			jsr FNegate
.9200					+
.9200	a9 ff		lda #$ff	_true:		lda #$ff		;return true
.9202					_return:
.9202	95 2d		sta $2d,x			sta _addr+0,x		; replace _addr with flag
.9204	95 2e		sta $2e,x			sta _addr+1,x
.9206	e8		inx				inx			; Drop work
.9207	e8		inx				inx
.9208	e8		inx				inx			; 2Drop work
.9209	e8		inx				inx
.920a	e8		inx				inx
.920b	e8		inx				inx
.920c	e8		inx				inx			; Drop len
.920d	e8		inx				inx
.920e	60		rts				rts
.920f					_GetChar:
.920f	38		sec				sec
.9210	b5 2b		lda $2b,x			lda _len,x
.9212	f0 0b		beq $921f			beq _gc_rts		; if end, return C=1
.9214	d6 2b		dec $2b,x			dec _len,x
.9216	a1 2d		lda ($2d,x)			lda (_addr,x)
.9218	f6 2d		inc $2d,x			inc _addr+0,x
.921a	d0 02		bne $921e			bne +
.921c	f6 2e		inc $2e,x			inc _addr+1,x
.921e					+
.921e	18		clc				clc			; get char, return C=0
.921f	60		rts		_gc_rts:	rts
>9220	53 46 40			L1:	.text "SF@"	;  name of word as a string, ending at wh_NameLastChar
>9223	03					.byte *-L1	;wh_NameLength	length of name
>9224	ac 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9226	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9227	08					.byte NN	;wh_Flags	dictionary flags
=37283					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9228	20 55 b2	jsr $b255	SFAt:		jsr PopYA		; pop sf_addr
.922b	85 17		sta $17		SFAt_YA:	sta tmp2+0		; save sf_addr
.922d	84 18		sty $18				sty tmp2+1
.922f	20 92 83	jsr $8392			jsr FAllocX		; alloc FP stack entry
.9232	a0 01		ldy #$01			ldy #1			; copy exponent
.9234	b1 17		lda ($17),y			lda (tmp2),y
.9236	0a		asl a				asl a
.9237	88		dey				dey
.9238	b1 17		lda ($17),y			lda (tmp2),y
.923a	2a		rol a				rol a
.923b	38		sec				sec
.923c	e9 7e		sbc #$7e			sbc #126
.923e	95 4e		sta $4e,x			sta FSExp,x
.9240	a0 01		ldy #$01			ldy #1			; copy mantissa
.9242	b1 17		lda ($17),y			lda (tmp2),y
.9244	09 80		ora #$80			ora #$80
.9246	4a		lsr a				lsr a
.9247	95 58		sta $58,x			sta FSMant0,x
.9249	c8		iny				iny
.924a	b1 17		lda ($17),y			lda (tmp2),y
.924c	6a		ror a				ror a
.924d	95 62		sta $62,x			sta FSMant1,x
.924f	c8		iny				iny
.9250	b1 17		lda ($17),y			lda (tmp2),y
.9252	6a		ror a				ror a
.9253	95 6c		sta $6c,x			sta FSMant2,x
.9255	a9 00		lda #$00			lda #0
.9257	6a		ror a				ror a
.9258	95 76		sta $76,x			sta FSMant3,x
.925a	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
.925c	a0 00		ldy #$00			ldy #0			; get sign
.925e	b1 17		lda ($17),y			lda (tmp2),y
.9260	10 03		bpl $9265			bpl +
.9262	20 1e 8b	jsr $8b1e			jsr FNegate
.9265					+
=61					CL	.var *-(WordListLink+wh_Xt)
=$9265					en = *	; remember here
>9226	3d					.byte CL	;wh_CodeLength
.9265	60		rts				rts
>9266	53 46 21			L1:	.text "SF!"	;  name of word as a string, ending at wh_NameLastChar
>9269	03					.byte *-L1	;wh_NameLength	length of name
>926a	a3 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>926c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>926d	08					.byte NN	;wh_Flags	dictionary flags
=37353					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.926e	20 55 b2	jsr $b255	SFStore:	jsr PopYA		; pop sf_addr
.9271	85 17		sta $17		SFStore_YA:	sta tmp2+0		; save
.9273	84 18		sty $18				sty tmp2+1
.9275	a4 4d		ldy $4d				ldy fp			; negative?
.9277	b9 58 00	lda $0058,y			lda FSMant0,y
.927a	29 80		and #$80			and #$80		;  save sign
.927c	85 1a		sta $1a				sta tmp3+1
.927e	10 03		bpl $9283			bpl +
.9280	20 1e 8b	jsr $8b1e			jsr FNegate
.9283					+
.9283	86 15		stx $15				stx tmp1+0		; save data stack index
.9285	a6 4d		ldx $4d				ldx fp			; switch to FP stack index
.9287	b5 4e		lda $4e,x			lda FSExp,x		; +128
.9289	18		clc				clc
.928a	69 7e		adc #$7e			adc #126
.928c	95 4e		sta $4e,x			sta FSExp,x
.928e	16 76		asl $76,x			asl FSMant3,x
.9290	b5 6c		lda $6c,x			lda FSMant2,x
.9292	2a		rol a				rol a
.9293	a0 03		ldy #$03			ldy #3			; +3 IEEE
.9295	91 17		sta ($17),y			sta (tmp2),y
.9297	b5 62		lda $62,x			lda FSMant1,x
.9299	2a		rol a				rol a
.929a	88		dey				dey			; +2 IEEE
.929b	91 17		sta ($17),y			sta (tmp2),y
.929d	b5 58		lda $58,x			lda FSMant0,x
.929f	2a		rol a				rol a
.92a0	2a		rol a				rol a
.92a1	56 4e		lsr $4e,x			lsr FSExp,x
.92a3	6a		ror a				ror a
.92a4	88		dey				dey			; +1 IEEE
.92a5	91 17		sta ($17),y			sta (tmp2),y
.92a7	b5 4e		lda $4e,x			lda FSExp,x
.92a9	05 1a		ora $1a				ora tmp3+1		;  insert sign
.92ab	88		dey				dey			; +0 IEEE
.92ac	91 17		sta ($17),y			sta (tmp2),y
.92ae	e6 4d		inc $4d				inc fp			; FDrop
.92b0	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
=68					CL	.var *-(WordListLink+wh_Xt)
=$92b2					en = *	; remember here
>926c	44					.byte CL	;wh_CodeLength
.92b2	60		rts				rts
>92b3	53 46 6c 6f 61 74 2b		L1:	.text "SFloat+"	;  name of word as a string, ending at wh_NameLastChar
>92ba	07					.byte *-L1	;wh_NameLength	length of name
>92bb	e9 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>92bd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>92be	08					.byte NN	;wh_Flags	dictionary flags
=37434					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.92bf	a9 04		lda #$04	SFloatPlus:	lda #4
.92c1	4c fb c7	jmp $c7fb			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$92c4					en = *	; remember here
>92bd	05					.byte CL	;wh_CodeLength
>92c4	53 46 6c 6f 61 74 73		L1:	.text "SFloats"	;  name of word as a string, ending at wh_NameLastChar
>92cb	07					.byte *-L1	;wh_NameLength	length of name
>92cc	3a 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>92ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>92cf	08					.byte NN	;wh_Flags	dictionary flags
=37451					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.92d0	a9 02		lda #$02	SFloats:	lda #2
.92d2	4c 33 c9	jmp $c933			jmp LShift_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$92d5					en = *	; remember here
>92ce	05					.byte CL	;wh_CodeLength
>92d5	44 46 21			L1:	.text "DF!"	;  name of word as a string, ending at wh_NameLastChar
>92d8	03					.byte *-L1	;wh_NameLength	length of name
>92d9	4b 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>92db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>92dc	08					.byte NN	;wh_Flags	dictionary flags
=37464					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.92dd	20 55 b2	jsr $b255	DFStore:	jsr PopYA		; pop df_addr
.92e0	85 17		sta $17		DFStore_YA:	sta tmp2+0		; save df_addr
.92e2	84 18		sty $18				sty tmp2+1
.92e4	a4 4d		ldy $4d				ldy fp			; negative?
.92e6	b9 58 00	lda $0058,y			lda FSMant0,y
.92e9	29 80		and #$80			and #$80		; remember sign
.92eb	85 1a		sta $1a				sta tmp3+1
.92ed	10 03		bpl $92f2			bpl +			; make positive
.92ef	20 1e 8b	jsr $8b1e			jsr FNegate
.92f2					+
.92f2	86 15		stx $15				stx tmp1+0		; save data stack index
.92f4	a6 4d		ldx $4d				ldx fp
.92f6	a9 00		lda #$00			lda #0
.92f8	a0 07		ldy #$07			ldy #7			; +7 IEEE
.92fa	91 17		sta ($17),y			sta (tmp2),y
.92fc	88		dey				dey			; +6 IEEE
.92fd	91 17		sta ($17),y			sta (tmp2),y
.92ff	20 47 93	jsr $9347			jsr _shift		; shift mantissa
.9302	20 47 93	jsr $9347			jsr _shift
.9305	88		dey				dey			; +5 IEEE
.9306	91 17		sta ($17),y			sta (tmp2),y
.9308	b5 76		lda $76,x			lda FSMant3,x
.930a	88		dey				dey			; +4 IEEE
.930b	91 17		sta ($17),y			sta (tmp2),y
.930d	b5 6c		lda $6c,x			lda FSMant2,x
.930f	88		dey				dey			; +3 IEEE
.9310	91 17		sta ($17),y			sta (tmp2),y
.9312	b5 62		lda $62,x			lda FSMant1,x
.9314	88		dey				dey			; +2 IEEE
.9315	91 17		sta ($17),y			sta (tmp2),y
.9317	b5 58		lda $58,x			lda FSMant0,x		; clear extra bits
.9319	29 0f		and #$0f			and #$f
.931b	95 58		sta $58,x			sta FSMant0,x
.931d	b5 4e		lda $4e,x			lda FSExp,x
.931f	38		sec				sec
.9320	e9 02		sbc #$02			sbc #2
.9322	95 4e		sta $4e,x			sta FSExp,x
.9324	0a		asl a				asl a
.9325	0a		asl a				asl a
.9326	0a		asl a				asl a
.9327	0a		asl a				asl a
.9328	15 58		ora $58,x			ora FSMant0,x
.932a	88		dey				dey			; +1 IEEE
.932b	91 17		sta ($17),y			sta (tmp2),y
.932d	b5 4e		lda $4e,x			lda FSExp,x
.932f	08		php				php
.9330	4a		lsr a				lsr a
.9331	4a		lsr a				lsr a
.9332	4a		lsr a				lsr a
.9333	4a		lsr a				lsr a
.9334	18		clc				clc
.9335	69 30		adc #$30			adc #$30
.9337	28		plp				plp
.9338	30 03		bmi $933d			bmi +
.933a	18		clc				clc
.933b	69 10		adc #$10			adc #$10
.933d	05 1a		ora $1a		+		ora tmp3+1		; add sign bit
.933f	88		dey				dey			; +0 IEEE
.9340	91 17		sta ($17),y			sta (tmp2),y
.9342	e6 4d		inc $4d				inc fp			; FDrop
.9344	a6 15		ldx $15				ldx tmp1+0		; restore data stack index
.9346	60		rts				rts
.9347	56 58		lsr $58,x	_shift:		lsr FSMant0,x
.9349	76 62		ror $62,x			ror FSMant1,x
.934b	76 6c		ror $6c,x			ror FSMant2,x
.934d	76 76		ror $76,x			ror FSMant3,x
.934f	6a		ror a				ror a
=115					CL	.var *-(WordListLink+wh_Xt)
=$9350					en = *	; remember here
>92db	73					.byte CL	;wh_CodeLength
.9350	60		rts				rts
>9351	44 46 40			L1:	.text "DF@"	;  name of word as a string, ending at wh_NameLastChar
>9354	03					.byte *-L1	;wh_NameLength	length of name
>9355	58 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9357	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9358	08					.byte NN	;wh_Flags	dictionary flags
=37588					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9359	20 55 b2	jsr $b255	DFAt:		jsr PopYA		; pop df_addr
.935c	85 17		sta $17		DFAt_YA:	sta tmp2+0		; save df_addr
.935e	84 18		sty $18				sty tmp2+1
.9360	20 92 83	jsr $8392			jsr FAllocX		; alloc FP stack entry
.9363	a0 00		ldy #$00			ldy #0			; +0 IEEE byte
.9365	b1 17		lda ($17),y			lda (tmp2),y
.9367	95 4e		sta $4e,x			sta FSExp,x
.9369	c8		iny				iny			; +1 IEEE byte
.936a	b1 17		lda ($17),y			lda (tmp2),y
.936c	95 58		sta $58,x			sta FSMant0,x
.936e	c8		iny				iny			; +2 IEEE byte
.936f	b1 17		lda ($17),y			lda (tmp2),y
.9371	95 62		sta $62,x			sta FSMant1,x
.9373	c8		iny				iny			; +3 IEEE byte
.9374	b1 17		lda ($17),y			lda (tmp2),y
.9376	95 6c		sta $6c,x			sta FSMant2,x
.9378	c8		iny				iny			; +4 IEEE byte
.9379	b1 17		lda ($17),y			lda (tmp2),y
.937b	95 76		sta $76,x			sta FSMant3,x
.937d	c8		iny				iny			; +5 IEEE byte
.937e	b1 17		lda ($17),y			lda (tmp2),y
.9380	20 a9 93	jsr $93a9			jsr _shifta		; shift exponent & mantissa bits into place
.9383	20 a9 93	jsr $93a9			jsr _shifta
.9386	b5 58		lda $58,x			lda FSMant0,x		; finish shifting exponent bits
.9388	0a		asl a				asl a
.9389	36 4e		rol $4e,x			rol FSExp,x
.938b	0a		asl a				asl a
.938c	36 4e		rol $4e,x			rol FSExp,x
.938e	b5 4e		lda $4e,x			lda FSExp,x		; remove +1023
.9390	18		clc				clc
.9391	69 02		adc #$02			adc #2
.9393	95 4e		sta $4e,x			sta FSExp,x
.9395	b5 58		lda $58,x			lda FSMant0,x
.9397	29 7f		and #$7f			and #$7f
.9399	09 40		ora #$40			ora #$40		;   insert implied 1
.939b	95 58		sta $58,x			sta FSMant0,x		;   insert sign=0
.939d	a6 15		ldx $15				ldx tmp1		; restore data stack index
.939f	a0 00		ldy #$00			ldy #0			; get sign from +0 IEEE byte
.93a1	b1 17		lda ($17),y			lda (tmp2),y
.93a3	10 03		bpl $93a8			bpl +
.93a5	20 1e 8b	jsr $8b1e			jsr FNegate
.93a8					+
.93a8	60		rts				rts
.93a9	0a		asl a		_shifta:	asl a
.93aa	36 76		rol $76,x			rol FSMant3,x
.93ac	36 6c		rol $6c,x			rol FSMant2,x
.93ae	36 62		rol $62,x			rol FSMant1,x
.93b0	36 58		rol $58,x			rol FSMant0,x
.93b2	36 4e		rol $4e,x			rol FSExp,x
.93b4	60		rts				rts
=92					CL	.var *-(WordListLink+wh_Xt)
=$93b5					en = *	; remember here
>9357	5c					.byte CL	;wh_CodeLength
>93b5	44 46 6c 6f 61 74 2b		L1:	.text "DFloat+"	;  name of word as a string, ending at wh_NameLastChar
>93bc	07					.byte *-L1	;wh_NameLength	length of name
>93bd	d4 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>93bf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>93c0	08					.byte NN	;wh_Flags	dictionary flags
=37692					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.93c1	a9 08		lda #$08	DFloatPlus:	lda #8
.93c3	4c fb c7	jmp $c7fb			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$93c6					en = *	; remember here
>93bf	05					.byte CL	;wh_CodeLength
>93c6	44 46 6c 6f 61 74 73		L1:	.text "DFloats"	;  name of word as a string, ending at wh_NameLastChar
>93cd	07					.byte *-L1	;wh_NameLength	length of name
>93ce	3c 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>93d0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>93d1	08					.byte NN	;wh_Flags	dictionary flags
=37709					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.93d2	a9 03		lda #$03	DFloats:	lda #3
.93d4	4c 33 c9	jmp $c933			jmp LShift_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$93d7					en = *	; remember here
>93d0	05					.byte CL	;wh_CodeLength
>93d7	46 4b 65 79			L1:	.text "FKey"	;  name of word as a string, ending at wh_NameLastChar
>93db	04					.byte *-L1	;wh_NameLength	length of name
>93dc	4d 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>93de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>93df	08					.byte NN	;wh_Flags	dictionary flags
=37723					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.93e0	ad 00 03	lda $0300	FKey:		lda base		; save base
.93e3	48		pha				pha
.93e4	20 06 b0	jsr $b006			jsr Decimal
.93e7	20 18 c8	jsr $c818			jsr Here		; ( addr )
.93ea	20 18 c8	jsr $c818			jsr Here		; ( addr addr )
.93ed	a9 28		lda #$28			lda #40			; ( addr addr 40 )
.93ef	20 27 b6	jsr $b627			jsr PushZA
.93f2	20 cf c0	jsr $c0cf			jsr Accept		; ( addr len )
.93f5	20 31 91	jsr $9131			jsr ToFloat		; ( true | false)
.93f8	68		pla				pla			; restore base
.93f9	8d 00 03	sta $0300			sta base
.93fc	e8		inx				inx			; err?
.93fd	e8		inx				inx
.93fe	b5 23		lda $23,x			lda DStack-2,x
.9400	f0 01		beq $9403			beq _err
.9402	60		rts				rts
.9403	20 01 b7	jsr $b701	_err:		jsr SLiteral_runtime
.9406	4c 0c 94	jmp $940c			  jmp +
>9409	20 3f 20					  .text " ? "
.940c	20 d2 cb	jsr $cbd2	+		jsr Type
.940f	4c e0 93	jmp $93e0			jmp FKey
>9412	46 4d 50 6f 6c 79		L1:	.text "FMPoly"	;  name of word as a string, ending at wh_NameLastChar
>9418	06					.byte *-L1	;wh_NameLength	length of name
>9419	5b 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>941b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>941c	08					.byte NN	;wh_Flags	dictionary flags
=37784					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.941d	20 55 b2	jsr $b255	FMPoly:		jsr PopYA
.9420	20 e5 b5	jsr $b5e5	FMPolyYA:	jsr PushYA		; push coefficent addr
.9423	20 07 85	jsr $8507			jsr FAt_YA		; fetch 1st coefficent
.9426	4c 39 94	jmp $9439			jmp _4
.9429	20 21 84	jsr $8421	_2:		jsr FOver
.942c	20 72 8b	jsr $8b72			jsr FStar
.942f	b5 25		lda $25,x			lda DStack+0,x		; fetch next coefficent
.9431	b4 26		ldy $26,x			ldy DStack+1,x
.9433	20 07 85	jsr $8507			jsr FAt_YA
.9436	20 a5 8a	jsr $8aa5			jsr FPlus
.9439	a9 05		lda #$05	_4:		lda #5			; bump coefficent ptr
.943b	20 fb c7	jsr $c7fb			jsr Plus_A
.943e	a1 25		lda ($25,x)			lda (DStack+0,x)	; end of coefficent list?
.9440	d0 e7		bne $9429			bne _2
.9442	e8		inx				inx			; Drop coefficent ptr
.9443	e8		inx				inx
=39					CL	.var *-(WordListLink+wh_Xt)
=$9444					en = *	; remember here
>941b	27					.byte CL	;wh_CodeLength
.9444	60		rts				rts
>9445	46 4c 6f 67 32 4d 31 4d		L1:	.text "FLog2M1M"	;  name of word as a string, ending at wh_NameLastChar
>944d	08					.byte *-L1	;wh_NameLength	length of name
>944e	98 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9450	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9451	08					.byte NN	;wh_Flags	dictionary flags
=37837					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9452	a9 5c		lda #$5c	FLog2M1M:	lda #<_c
.9454	a0 94		ldy #$94			ldy #>_c
.9456	20 20 94	jsr $9420			jsr FMPolyYA
.9459	4c 72 8b	jmp $8b72			jmp FStar
.945c					_c:
>945c	cc cf 97 7c					.dword $7C97CFCC	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9460	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9461	64 87 94 af					.dword $AF948764	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9465	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>9466	66 c8 d4 62					.dword $62D4C866	; 32 bit signed binary mantissa.  $40000000 = +0.5
>946a	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>946b	e2 9c c3 ac					.dword $ACC39CE2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>946f	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9470	1a c6 2b 79					.dword $792BC61A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9474	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9475	07 e1 c4 a3					.dword $A3C4E107	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9479	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>947a	91 a5 54 5c					.dword $5C54A591	; 32 bit signed binary mantissa.  $40000000 = +0.5
>947e	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>947f	00 00						.word 0
=47					CL	.var *-(WordListLink+wh_Xt)
=$9481					en = *	; remember here
>9450	2f					.byte CL	;wh_CodeLength
>9481	46 4c 6f 67 32			L1:	.text "FLog2"	;  name of word as a string, ending at wh_NameLastChar
>9486	05					.byte *-L1	;wh_NameLength	length of name
>9487	cd 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9489	03					.byte 3		;wh_CodeLength  (with placeholder value)
>948a	08					.byte NN	;wh_Flags	dictionary flags
=37894					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.948b	a4 4d		ldy $4d		FLog2:		ldy fp
.948d	b9 58 00	lda $0058,y			lda FSMant0,y	; bad param?
.9490	30 20		bmi $94b2			bmi _OutOfRange
.9492	f0 1e		beq $94b2			beq _OutOfRange
.9494	b9 4e 00	lda $004e,y			lda FSExp,y
.9497	48		pha				pha		; remember orig exponent
.9498	a9 01		lda #$01			lda #1
.949a	99 4e 00	sta $004e,y			sta FSExp,y	; set to 1
.949d	20 0c 8b	jsr $8b0c			jsr F1Minus
.94a0	20 52 94	jsr $9452			jsr FLog2M1M
.94a3	a0 00		ldy #$00			ldy #0		; add orig exponent to float
.94a5	68		pla				pla
.94a6	38		sec				sec
.94a7	e9 01		sbc #$01			sbc #1
.94a9	10 01		bpl $94ac			bpl +
.94ab	88		dey				dey
.94ac					+
.94ac	20 bb 8d	jsr $8dbb			jsr SToFYA
.94af	4c a5 8a	jmp $8aa5			jmp FPlus
.94b2	4c 77 b2	jmp $b277	_OutOfRange:	jmp Throw_FpOutOfRange
=42					CL	.var *-(WordListLink+wh_Xt)
=$94b5					en = *	; remember here
>9489	2a					.byte CL	;wh_CodeLength
>94b5	46 4c 6e			L1:	.text "FLn"	;  name of word as a string, ending at wh_NameLastChar
>94b8	03					.byte *-L1	;wh_NameLength	length of name
>94b9	06 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>94bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>94bc	08					.byte NN	;wh_Flags	dictionary flags
=37944					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.94bd	20 8b 94	jsr $948b	FLn:		jsr FLog2
.94c0	20 46 88	jsr $8846			jsr FLitI
>94c3	f8 0b b9 58					.dword $58b90bf8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94c7	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
.94c8	4c 72 8b	jmp $8b72			jmp FStar
=14					CL	.var *-(WordListLink+wh_Xt)
=$94cb					en = *	; remember here
>94bb	0e					.byte CL	;wh_CodeLength
>94cb	46 4c 6e 50 31			L1:	.text "FLnP1"	;  name of word as a string, ending at wh_NameLastChar
>94d0	05					.byte *-L1	;wh_NameLength	length of name
>94d1	38 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>94d3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>94d4	08					.byte NN	;wh_Flags	dictionary flags
=37968					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.94d5	20 da 8a	jsr $8ada	FlnP1:		jsr F1Plus
.94d8	4c bd 94	jmp $94bd			jmp FLn
=6					CL	.var *-(WordListLink+wh_Xt)
=$94db					en = *	; remember here
>94d3	06					.byte CL	;wh_CodeLength
>94db	46 4c 6f 67			L1:	.text "FLog"	;  name of word as a string, ending at wh_NameLastChar
>94df	04					.byte *-L1	;wh_NameLength	length of name
>94e0	50 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>94e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>94e3	08					.byte NN	;wh_Flags	dictionary flags
=37983					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.94e4	20 8b 94	jsr $948b	FLog:		jsr FLog2
.94e7	20 46 88	jsr $8846			jsr FLitI
>94ea	3c 4d 10 4d					.dword $4d104d3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94ee	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
.94ef	4c 72 8b	jmp $8b72			jmp FStar
=14					CL	.var *-(WordListLink+wh_Xt)
=$94f2					en = *	; remember here
>94e2	0e					.byte CL	;wh_CodeLength
>94f2	46 45 78 70 32 4d 31 4d		L1:	.text "FExp2M1M"	;  name of word as a string, ending at wh_NameLastChar
>94fa	08					.byte *-L1	;wh_NameLength	length of name
>94fb	5f 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>94fd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>94fe	08					.byte NN	;wh_Flags	dictionary flags
=38010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.94ff	a9 09		lda #$09	FExp2M1M:	lda #<_c
.9501	a0 95		ldy #$95			ldy #>_c
.9503	20 20 94	jsr $9420			jsr FMPolyYA
.9506	4c 72 8b	jmp $8b72			jmp FStar
=10					CL	.var *-(WordListLink+wh_Xt)
=$9509					en = *	; remember here
>94fd	0a					.byte CL	;wh_CodeLength
.9509					_c:
>9509	da dc 4f 7c					.dword $7C4FDCDa	; 32 bit signed binary mantissa.  $40000000 = +0.5
>950d	f7						.char -9		; 8 bit signed exponent.  $00 = 2**0
>950e	d6 ca 4c 49					.dword $494CCAD6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9512	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9513	f0 42 64 72					.dword $726442f0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9517	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9518	44 90 f4 7a					.dword $7AF49044	; 32 bit signed binary mantissa.  $40000000 = +0.5
>951c	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>951d	9b 3c b9 58					.dword $58B93C9b	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9521	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>9522	00						.byte 0
>9523	46 45 78 70 32			L1:	.text "FExp2"	;  name of word as a string, ending at wh_NameLastChar
>9528	05					.byte *-L1	;wh_NameLength	length of name
>9529	7a 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>952b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>952c	08					.byte NN	;wh_Flags	dictionary flags
=38056					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.952d	20 9c 86	jsr $869c	FExp2:		jsr FIntFrc	; ( f: r_rem r_int )
.9530	20 05 8e	jsr $8e05			jsr FToS
.9533	20 ff 94	jsr $94ff			jsr FExp2M1M
.9536	20 da 8a	jsr $8ada			jsr F1Plus
.9539	20 39 b2	jsr $b239			jsr PopA
.953c	a4 4d		ldy $4d				ldy fp
.953e	18		clc				clc
.953f	79 4e 00	adc $004e,y			adc FSExp,y
.9542	99 4e 00	sta $004e,y			sta FSExp,y
=24					CL	.var *-(WordListLink+wh_Xt)
=$9545					en = *	; remember here
>952b	18					.byte CL	;wh_CodeLength
.9545	60		rts				rts
>9546	46 45 78 70			L1:	.text "FExp"	;  name of word as a string, ending at wh_NameLastChar
>954a	04					.byte *-L1	;wh_NameLength	length of name
>954b	a8 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>954d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>954e	08					.byte NN	;wh_Flags	dictionary flags
=38090					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.954f					FExp:
.954f	20 46 88	jsr $8846			jsr FLitI
>9552	94 1d 55 5c					.dword $5c551d94	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9556	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
.9557	20 72 8b	jsr $8b72			jsr FStar
.955a	4c 2d 95	jmp $952d			jmp FExp2
=14					CL	.var *-(WordListLink+wh_Xt)
=$955d					en = *	; remember here
>954d	0e					.byte CL	;wh_CodeLength
>955d	46 45 78 70 4d 31		L1:	.text "FExpM1"	;  name of word as a string, ending at wh_NameLastChar
>9563	06					.byte *-L1	;wh_NameLength	length of name
>9564	ca 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9566	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9567	08					.byte NN	;wh_Flags	dictionary flags
=38115					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9568	20 4f 95	jsr $954f	FExpM1:		jsr FExp
.956b	4c 0c 8b	jmp $8b0c			jmp F1Minus
=6					CL	.var *-(WordListLink+wh_Xt)
=$956e					en = *	; remember here
>9566	06					.byte CL	;wh_CodeLength
>956e	46 41 4c 6f 67			L1:	.text "FALog"	;  name of word as a string, ending at wh_NameLastChar
>9573	05					.byte *-L1	;wh_NameLength	length of name
>9574	e3 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9576	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9577	08					.byte NN	;wh_Flags	dictionary flags
=38131					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9578					FALog:
.9578	20 46 88	jsr $8846			jsr FLitI
>957b	20 3c 4d 6a					.dword $6a4d3c20	; 32 bit signed binary mantissa.  $40000000 = +0.5
>957f	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
.9580	20 72 8b	jsr $8b72			jsr FStar
.9583	4c 2d 95	jmp $952d			jmp FExp2
=14					CL	.var *-(WordListLink+wh_Xt)
=$9586					en = *	; remember here
>9576	0e					.byte CL	;wh_CodeLength
>9586	46 2a 2a			L1:	.text "F**"	;  name of word as a string, ending at wh_NameLastChar
>9589	03					.byte *-L1	;wh_NameLength	length of name
>958a	f3 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>958c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>958d	08					.byte NN	;wh_Flags	dictionary flags
=38153					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.958e	20 85 84	jsr $8485	FPower:		jsr FSwap
.9591	20 8b 94	jsr $948b			jsr FLog2
.9594	20 72 8b	jsr $8b72			jsr FStar
.9597	4c 2d 95	jmp $952d			jmp FExp2
=12					CL	.var *-(WordListLink+wh_Xt)
=$959a					en = *	; remember here
>958c	0c					.byte CL	;wh_CodeLength
>959a	44 65 67 32 52 61 64		L1:	.text "Deg2Rad"	;  name of word as a string, ending at wh_NameLastChar
>95a1	07					.byte *-L1	;wh_NameLength	length of name
>95a2	09 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95a4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95a5	08					.byte NN	;wh_Flags	dictionary flags
=38177					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95a6					Deg2Rad:
.95a6	20 46 88	jsr $8846			jsr FLitI
>95a9	8a 1a 7d 47					.dword $477d1A8A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95ad	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
.95ae	4c 72 8b	jmp $8b72			jmp FStar
=11					CL	.var *-(WordListLink+wh_Xt)
=$95b1					en = *	; remember here
>95a4	0b					.byte CL	;wh_CodeLength
>95b1	52 61 64 32 44 65 67		L1:	.text "Rad2Deg"	;  name of word as a string, ending at wh_NameLastChar
>95b8	07					.byte *-L1	;wh_NameLength	length of name
>95b9	21 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95bc	08					.byte NN	;wh_Flags	dictionary flags
=38200					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95bd					Rad2Deg:
.95bd	20 46 88	jsr $8846			jsr FLitI
>95c0	68 70 97 72					.dword $72977068	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95c4	06						.char 6		; 8 bit signed exponent.  $00 = 2**0
.95c5	4c 72 8b	jmp $8b72			jmp FStar
=11					CL	.var *-(WordListLink+wh_Xt)
=$95c8					en = *	; remember here
>95bb	0b					.byte CL	;wh_CodeLength
>95c8	46 41 52 65 64 75 63 65		L1:	.text "FAReduce"	;  name of word as a string, ending at wh_NameLastChar
>95d0	08					.byte *-L1	;wh_NameLength	length of name
>95d1	38 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95d3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95d4	08					.byte NN	;wh_Flags	dictionary flags
=38224					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95d5	a4 4d		ldy $4d		FAReduce:	ldy fp
.95d7	b9 58 00	lda $0058,y			lda FSMant0,y		; zero?
.95da	f0 2f		beq $960b			beq _ok
.95dc	b9 4e 00	lda $004e,y			lda FSExp,y		; get exponent
.95df	30 2a		bmi $960b			bmi _ok			; small?
.95e1	c9 01		cmp #$01			cmp #1			; maybe need mirror?
.95e3	30 26		bmi $960b			bmi _ok			;if exponent <=0
.95e5	f0 24		beq $960b			beq _ok
.95e7	c9 02		cmp #$02			cmp #2			; maybe need rotation?
.95e9	b0 22		bcs $960d			bcs _exp2
.95eb	b9 58 00	lda $0058,y			lda FSMant0,y
.95ee	c9 65		cmp #$65			cmp #$65		;in -pi/2..pi/2 ?
.95f0	90 19		bcc $960b			bcc _ok
.95f2	c9 9b		cmp #$9b			cmp #$100-$65
.95f4	b0 15		bcs $960b			bcs _ok
.95f6					_mir:
.95f6	20 ae 88	jsr $88ae			jsr FPi
.95f9	a4 4d		ldy $4d				ldy fp
.95fb	b9 59 00	lda $0059,y			lda FSMant0+1,y
.95fe	10 03		bpl $9603			bpl _3
.9600	20 1e 8b	jsr $8b1e			jsr FNegate
.9603	20 85 84	jsr $8485	_3:		jsr FSwap
.9606	20 e7 8a	jsr $8ae7			jsr FMinus
.9609	38		sec				sec		; mirrored
.960a	60		rts				rts
.960b	18		clc		_ok:		clc		; not mirrored
.960c	60		rts				rts
.960d	d0 0b		bne $961a	_exp2:		bne _rot	;if exp>2 then fix
.960f	b9 58 00	lda $0058,y			lda FSMant0,y
.9612	c9 65		cmp #$65			cmp #$65	;if mant>pi or mant<-pi then fix
.9614	90 e0		bcc $95f6			bcc _mir
.9616	c9 9b		cmp #$9b			cmp #$100-$65
.9618	b0 dc		bcs $95f6			bcs _mir
.961a	20 e0 88	jsr $88e0	_rot:		jsr F2Pi
.961d	20 25 8c	jsr $8c25			jsr FSlash
.9620	20 9c 86	jsr $869c			jsr FIntFrc
.9623	e6 4d		inc $4d				inc fp		; FDrop integer part
.9625	a4 4d		ldy $4d				ldy fp		;if >=.5
.9627	b9 4e 00	lda $004e,y			lda FSExp,y
.962a	a8		tay				tay
.962b	30 03		bmi $9630			bmi _rot4
.962d	20 0c 8b	jsr $8b0c			jsr F1Minus	;  subtract 1
.9630	20 e0 88	jsr $88e0	_rot4:		jsr F2Pi
.9633	20 72 8b	jsr $8b72			jsr FStar
.9636	4c d5 95	jmp $95d5			jmp FAReduce	; rotate done, look again
=100					CL	.var *-(WordListLink+wh_Xt)
=$9639					en = *	; remember here
>95d3	64					.byte CL	;wh_CodeLength
>9639	46 53 69 6e 4d			L1:	.text "FSinM"	;  name of word as a string, ending at wh_NameLastChar
>963e	05					.byte *-L1	;wh_NameLength	length of name
>963f	50 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9641	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9642	08					.byte NN	;wh_Flags	dictionary flags
=38334					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9643	20 fd 83	jsr $83fd	FSinM:		jsr FDup
.9646	20 f8 8b	jsr $8bf8			jsr FSqr	; x x^2
.9649	a9 59		lda #$59			lda #<_c
.964b	a0 96		ldy #$96			ldy #>_c
.964d	20 20 94	jsr $9420			jsr FMPolyYA
.9650	20 72 8b	jsr $8b72			jsr FStar
.9653	20 da 8a	jsr $8ada			jsr F1Plus	; C0 +1.0
.9656	4c 72 8b	jmp $8b72			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$9659					en = *	; remember here
>9641	16					.byte CL	;wh_CodeLength
.9659					_c:
>9659	a6 a7 21 57					.dword $5721a7a6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>965d	ee						.char -18		; 8 bit signed exponent.  $00 = 2**0
>965e	4e 0b 2a 98					.dword $982a0b4e	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9662	f4						.char -12		; 8 bit signed exponent.  $00 = 2**0
>9663	3c 8f 43 44					.dword $44438f3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9667	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9668	37 ae aa aa					.dword $aaaaae37	; 32 bit signed binary mantissa.  $40000000 = +0.5
>966c	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>966d	00						.byte 0
>966e	46 53 69 6e			L1:	.text "FSin"	;  name of word as a string, ending at wh_NameLastChar
>9672	04					.byte *-L1	;wh_NameLength	length of name
>9673	be 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9675	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9676	08					.byte NN	;wh_Flags	dictionary flags
=38386					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9677	20 d5 95	jsr $95d5	FSin:		jsr FAReduce
.967a	4c 43 96	jmp $9643			jmp FSinM
=6					CL	.var *-(WordListLink+wh_Xt)
=$967d					en = *	; remember here
>9675	06					.byte CL	;wh_CodeLength
>967d	46 43 6f 73			L1:	.text "FCos"	;  name of word as a string, ending at wh_NameLastChar
>9681	04					.byte *-L1	;wh_NameLength	length of name
>9682	f2 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9684	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9685	08					.byte NN	;wh_Flags	dictionary flags
=38401					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9686	20 bf 88	jsr $88bf	FCos:		jsr FPiH
.9689	20 a5 8a	jsr $8aa5			jsr FPlus
.968c	4c 77 96	jmp $9677			jmp FSin
=9					CL	.var *-(WordListLink+wh_Xt)
=$968f					en = *	; remember here
>9684	09					.byte CL	;wh_CodeLength
>968f	46 53 69 6e 43 6f 73		L1:	.text "FSinCos"	;  name of word as a string, ending at wh_NameLastChar
>9696	07					.byte *-L1	;wh_NameLength	length of name
>9697	01 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9699	03					.byte 3		;wh_CodeLength  (with placeholder value)
>969a	08					.byte NN	;wh_Flags	dictionary flags
=38422					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.969b	20 fd 83	jsr $83fd	FSinCos:	jsr FDup
.969e	20 77 96	jsr $9677			jsr FSin
.96a1	20 85 84	jsr $8485			jsr FSwap
.96a4	4c 86 96	jmp $9686			jmp FCos
=12					CL	.var *-(WordListLink+wh_Xt)
=$96a7					en = *	; remember here
>9699	0c					.byte CL	;wh_CodeLength
>96a7	46 54 61 6e 4d			L1:	.text "FTanM"	;  name of word as a string, ending at wh_NameLastChar
>96ac	05					.byte *-L1	;wh_NameLength	length of name
>96ad	16 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96af	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96b0	08					.byte NN	;wh_Flags	dictionary flags
=38444					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.96b1	20 fd 83	jsr $83fd	FTanM:		jsr FDup
.96b4	20 f8 8b	jsr $8bf8			jsr FSqr		; x x^2
.96b7	a9 c7		lda #$c7			lda #<_c
.96b9	a0 96		ldy #$96			ldy #>_c
.96bb	20 20 94	jsr $9420			jsr FMPolyYA
.96be	20 72 8b	jsr $8b72			jsr FStar
.96c1	20 da 8a	jsr $8ada			jsr F1Plus		; c0 1.0
.96c4	4c 72 8b	jmp $8b72			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$96c7					en = *	; remember here
>96af	16					.byte CL	;wh_CodeLength
.96c7					_c:
>96c7	1e ae 4d 58					.dword $584DAE1E	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96cb	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>96cc	51 0a eb 57					.dword $57EB0A51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96d0	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>96d1	98 d9 14 77					.dword $7714D998	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96d5	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>96d6	f9 10 ea 43					.dword $43EA10F9	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96da	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>96db	1b e2 57 55					.dword $5557E21B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96df	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>96e0	00						.byte 0
>96e1	46 54 61 6e			L1:	.text "FTan"	;  name of word as a string, ending at wh_NameLastChar
>96e5	04					.byte *-L1	;wh_NameLength	length of name
>96e6	2c 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96e8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96e9	08					.byte NN	;wh_Flags	dictionary flags
=38501					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.96ea	20 d5 95	jsr $95d5	FTan:		jsr FAReduce
.96ed	90 06		bcc $96f5			bcc _30
.96ef	20 f5 96	jsr $96f5			jsr _30
.96f2	4c 1e 8b	jmp $8b1e			jmp FNegate
.96f5					_30:
.96f5	20 fd 83	jsr $83fd			jsr FDup
.96f8	20 45 8b	jsr $8b45			jsr FAbs
.96fb	20 d0 88	jsr $88d0			jsr FPiQ
.96fe	20 5c 87	jsr $875c			jsr FLe
.9701	e8		inx				inx			; pop f
.9702	e8		inx				inx
.9703	b5 25		lda $25,x			lda DStack+0,x
.9705	d0 aa		bne $96b1			bne FTanM
.9707	20 57 44	jsr $4457			jsr FPi/2
.970a	a4 4d		ldy $4d				ldy fp			; get sign
.970c	b9 58 00	lda $0058,y			lda FSMant0,y
.970f	10 03		bpl $9714			bpl +
.9711	20 1e 8b	jsr $8b1e			jsr FNegate
.9714					+
.9714	20 85 84	jsr $8485			jsr FSwap
.9717	20 e7 8a	jsr $8ae7			jsr FMinus
.971a	20 b1 96	jsr $96b1			jsr FTanM
.971d	4c ca 8c	jmp $8cca			jmp F1Slash
=54					CL	.var *-(WordListLink+wh_Xt)
=$9720					en = *	; remember here
>96e8	36					.byte CL	;wh_CodeLength
>9720	46 41 43 6f 73			L1:	.text "FACos"	;  name of word as a string, ending at wh_NameLastChar
>9725	05					.byte *-L1	;wh_NameLength	length of name
>9726	65 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9728	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9729	08					.byte NN	;wh_Flags	dictionary flags
=38565					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.972a	a4 4d		ldy $4d		FACos:		ldy fp
.972c	b9 58 00	lda $0058,y			lda FSMant0,y
.972f	08		php				php			; save sign
.9730	20 45 8b	jsr $8b45			jsr FAbs
.9733	a9 56		lda #$56			lda #<_c
.9735	a0 97		ldy #$97			ldy #>_c
.9737	20 20 94	jsr $9420			jsr FMPolyYA
.973a	20 85 84	jsr $8485			jsr FSwap
.973d	20 1e 8b	jsr $8b1e			jsr FNegate
.9740	20 da 8a	jsr $8ada			jsr F1Plus
.9743	20 b0 8e	jsr $8eb0			jsr FSqrt
.9746	20 72 8b	jsr $8b72			jsr FStar
.9749	28		plp				plp			; was r1 negative?
.974a	10 09		bpl $9755			bpl +
.974c	20 ae 88	jsr $88ae			jsr FPi
.974f	20 85 84	jsr $8485			jsr FSwap
.9752	20 e7 8a	jsr $8ae7			jsr FMinus
.9755					+
=43					CL	.var *-(WordListLink+wh_Xt)
=$9755					en = *	; remember here
>9728	2b					.byte CL	;wh_CodeLength
.9755	60		rts				rts
.9756					_c:
>9756	8b 5e 9f 4b					.dword $4B9F5E8B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>975a	f8						.char -8		; 8 bit signed exponent.  $00 = 2**0
>975b	ad cc 29 a4					.dword $A429CCAD	; 32 bit signed binary mantissa.  $40000000 = +0.5
>975f	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9760	98 a1 a3 6e					.dword $6EA3A198	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9764	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>9765	5a 10 e1 9b					.dword $9BE1105A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9769	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>976a	c6 71 ea 5a					.dword $5AEA71C6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>976e	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>976f	e0 56 21 92					.dword $922156E0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9773	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9774	41 ed 87 64					.dword $6487ED41	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9778	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>9779	00						.byte 0
>977a	46 41 53 69 6e			L1:	.text "FASin"	;  name of word as a string, ending at wh_NameLastChar
>977f	05					.byte *-L1	;wh_NameLength	length of name
>9780	a5 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9782	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9783	08					.byte NN	;wh_Flags	dictionary flags
=38655					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9784	20 2a 97	jsr $972a	FASin:		jsr FACos
.9787	20 1e 8b	jsr $8b1e			jsr FNegate
.978a	20 bf 88	jsr $88bf			jsr FPiH
.978d	4c a5 8a	jmp $8aa5			jmp FPlus
=12					CL	.var *-(WordListLink+wh_Xt)
=$9790					en = *	; remember here
>9782	0c					.byte CL	;wh_CodeLength
>9790	46 41 54 61 6e 4d		L1:	.text "FATanM"	;  name of word as a string, ending at wh_NameLastChar
>9796	06					.byte *-L1	;wh_NameLength	length of name
>9797	ff 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9799	03					.byte 3		;wh_CodeLength  (with placeholder value)
>979a	08					.byte NN	;wh_Flags	dictionary flags
=38678					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.979b	20 fd 83	jsr $83fd	FATanM:		jsr FDup		; x x
.979e	20 f8 8b	jsr $8bf8			jsr FSqr		; x xsqr
.97a1	a9 b1		lda #$b1			lda #<_c
.97a3	a0 97		ldy #$97			ldy #>_c
.97a5	20 20 94	jsr $9420			jsr FMPolyYA
.97a8	20 72 8b	jsr $8b72			jsr FStar		; x poly
.97ab	20 da 8a	jsr $8ada			jsr F1Plus		; x poly
.97ae	4c 72 8b	jmp $8b72			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$97b1					en = *	; remember here
>9799	16					.byte CL	;wh_CodeLength
.97b1					_c:
>97b1	98 08 2d 76					.dword $762D0898	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97b5	f9						.char -7		; 8 bit signed exponent.  $00 = 2**0
>97b6	55 a1 32 b8					.dword $B832A155	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97ba	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>97bb	a8 d7 a2 53					.dword $53A2D7A8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97bf	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>97c0	be 91 85 bb					.dword $BB8591BE	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97c4	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>97c5	06 65 aa 65					.dword $65AA6506	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97c9	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>97ca	12 21 b0 aa					.dword $AAB02112	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97ce	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>97cf	00						.byte 0
>97d0	46 41 54 61 6e			L1:	.text "FATan"	;  name of word as a string, ending at wh_NameLastChar
>97d5	05					.byte *-L1	;wh_NameLength	length of name
>97d6	16 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>97d8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>97d9	08					.byte NN	;wh_Flags	dictionary flags
=38741					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.97da					FATan:
.97da	a4 4d		ldy $4d				ldy fp
.97dc	b9 4e 00	lda $004e,y			lda FSExp,y		; Abs(r1)<1 ?
.97df	30 ba		bmi $979b			bmi FATanM
.97e1	f0 b8		beq $979b			beq FATanM
.97e3	b9 58 00	lda $0058,y			lda FSMant0,y		; save sign
.97e6	08		php				php
.97e7	20 ca 8c	jsr $8cca			jsr F1Slash
.97ea	20 9b 97	jsr $979b			jsr FATanM
.97ed	20 1e 8b	jsr $8b1e			jsr FNegate
.97f0	20 bf 88	jsr $88bf			jsr FPiH
.97f3	28		plp				plp
.97f4	10 03		bpl $97f9			bpl _18
.97f6	20 1e 8b	jsr $8b1e			jsr FNegate
.97f9	4c a5 8a	jmp $8aa5	_18:		jmp FPlus
>97fc	46 41 54 61 6e 32		L1:	.text "FATan2"	;  name of word as a string, ending at wh_NameLastChar
>9802	06					.byte *-L1	;wh_NameLength	length of name
>9803	55 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9805	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9806	08					.byte NN	;wh_Flags	dictionary flags
=38786					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9807	a4 4d		ldy $4d		FATan2:		ldy fp
.9809	b9 58 00	lda $0058,y			lda FSMant0+0,y	; get rx sign
.980c	f0 1c		beq $982a			beq _rxzero
.980e	0a		asl a				asl a		;   C=rx sign
.980f	b9 59 00	lda $0059,y			lda FSMant0+1,y	;   N=ry sign
.9812	08		php				php		; save signs
.9813	20 25 8c	jsr $8c25			jsr FSlash
.9816	20 da 97	jsr $97da			jsr FATan
.9819	28		plp				plp		; pop signs
.981a	b0 01		bcs $981d			bcs _rxneg
.981c	60		rts		_rts:		rts
.981d	08		php		_rxneg:		php
.981e	20 ae 88	jsr $88ae			jsr FPi
.9821	28		plp				plp
.9822	10 03		bpl $9827			bpl +
.9824	20 1e 8b	jsr $8b1e			jsr FNegate
.9827	4c a5 8a	jmp $8aa5	+		jmp FPlus
.982a	e6 4d		inc $4d		_rxzero:	inc fp		; FDrop rx
.982c	b9 58 00	lda $0058,y			lda FSMant0,y
.982f	08		php				php
.9830	e6 4d		inc $4d				inc fp		; FDrop ry
.9832	20 bf 88	jsr $88bf			jsr FPiH
.9835	28		plp				plp
.9836	10 e4		bpl $981c			bpl _rts
.9838	4c 1e 8b	jmp $8b1e			jmp FNegate
=52					CL	.var *-(WordListLink+wh_Xt)
=$983b					en = *	; remember here
>9805	34					.byte CL	;wh_CodeLength
>983b	45 64				L1:	.text "Ed"	;  name of word as a string, ending at wh_NameLastChar
>983d	02					.byte *-L1	;wh_NameLength	length of name
>983e	82 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9840	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9841	08					.byte NN	;wh_Flags	dictionary flags
=38845					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9842	4c 45 98	jmp $9845	Ed:		jmp ed6502
=3					CL	.var *-(WordListLink+wh_Xt)
=$9845					en = *	; remember here
>9840	03					.byte CL	;wh_CodeLength
=$1f					ed_head	 = editor1  ; pointer to first list element (addr) (2 bytes)
=$21					ed_cur	 = editor2  ; current line number (1 is first line) (2 bytes)
=$23					ed_flags = editor3  ; Flags used by ed, where
.9845					ed6502:
.9845	ad 00 03	lda $0300			lda base
.9848	85 24		sta $24				sta editor3+1
.984a	20 06 b0	jsr $b006			jsr Decimal
.984d	a9 00		lda #$00			lda #0
.984f	85 1f		sta $1f				sta ed_head
.9851	85 20		sta $20				sta ed_head+1
.9853	85 21		sta $21				sta ed_cur
.9855	85 22		sta $22				sta ed_cur+1
.9857	85 23		sta $23				sta ed_flags
.9859	20 36 b6	jsr $b636			jsr Zero
.985c	20 36 b6	jsr $b636			jsr Zero		; ( addr-t u-t )
.985f	20 ce a9	jsr $a9ce			jsr CR
.9862					ed_input_loop:
.9862	a9 7e		lda #$7e			lda #$ff-%10000001
.9864	25 23		and $23				and ed_flags
.9866	85 23		sta $23				sta ed_flags
.9868	20 12 9d	jsr $9d12			jsr ed_get_input
.986b	a5 06		lda $06				lda ciblen+0
.986d	d0 1e		bne $988d			bne _command_mode
.986f	a5 21		lda $21				lda ed_cur+0
.9871	a4 22		ldy $22				ldy ed_cur+1
.9873	20 e5 b5	jsr $b5e5			jsr PushYA		; ( addr-t u-t u )
.9876	a9 80		lda #$80			lda #%10000000
.9878	05 23		ora $23				ora ed_flags
.987a	85 23		sta $23				sta ed_flags
.987c	20 4c c8	jsr $c84c			jsr One_Plus		; ( addr-t u-t u+1 )
.987f	20 2d 9d	jsr $9d2d			jsr ed_is_valid_line
.9882	b0 03		bcs $9887			bcs +
.9884	4c 02 9d	jmp $9d02			jmp ed_error_1drop	; New line number is not legal, abort
.9887					+
.9887	20 36 b6	jsr $b636			jsr Zero		; ( addr-t u-t u+1 0 )
.988a	4c 4c 99	jmp $994c			jmp _line_number_only_from_external
.988d					_command_mode:
.988d	20 36 b6	jsr $b636			jsr Zero		; parameter 1 is NOS ( addr-t u-t 0 )
.9890	20 36 b6	jsr $b636			jsr Zero		; parameter 2 is TOS ( addr-t u-t 0 0 )
.9893	a0 00		ldy #$00			ldy #0			; get char
.9895	b1 04		lda ($04),y			lda (cib),y
.9897	c9 2e		cmp #$2e			cmp #'.'
.9899	d0 31		bne $98cc			bne _prefix_dollar
.989b	20 21 9d	jsr $9d21			jsr ed_have_text
.989e	a5 21		lda $21				lda ed_cur
.98a0	95 27		sta $27,x			sta DStack+2,x
.98a2	a5 22		lda $22				lda ed_cur+1
.98a4	95 28		sta $28,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.98a6	a9 80		lda #$80			lda #%10000000
.98a8	05 23		ora $23				ora ed_flags
.98aa	85 23		sta $23				sta ed_flags
.98ac	a5 06		lda $06				lda ciblen
.98ae	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.98b0	d0 03		bne $98b5			bne +
.98b2	4c 4c 99	jmp $994c			jmp _line_number_only_from_external
.98b5					+
.98b5	a5 04		lda $04				lda cib+0
.98b7	a4 05		ldy $05				ldy cib+1
.98b9	20 e5 b5	jsr $b5e5			jsr PushYA
.98bc	a5 06		lda $06				lda ciblen+0
.98be	a4 07		ldy $07				ldy ciblen+1
.98c0	20 e5 b5	jsr $b5e5			jsr PushYA
.98c3	20 26 c8	jsr $c826			jsr One_Minus		; ( addr-t u-t para1 0 addr u-1 )
.98c6	20 56 c8	jsr $c856			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr+1 u-1 )
.98c9	4c 9e 99	jmp $999e			jmp _check_for_para2
.98cc					_prefix_dollar:
.98cc	c9 24		cmp #$24			cmp #'$'
.98ce	d0 1f		bne $98ef			bne _prefix_percent
.98d0	20 21 9d	jsr $9d21			jsr ed_have_text
.98d3	e8		inx				inx
.98d4	e8		inx				inx			; ( addr-t u-t 0 )
.98d5	20 4e 9d	jsr $9d4e			jsr ed_last_line	; ( addr-t u-t 0 para1 )
.98d8	20 68 cd	jsr $cd68			jsr Swap		; ( addr-t u-t para1 0 )
.98db	a9 80		lda #$80			lda #%10000000
.98dd	05 23		ora $23				ora ed_flags
.98df	85 23		sta $23				sta ed_flags
.98e1	a5 06		lda $06				lda ciblen
.98e3	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.98e5	d0 03		bne $98ea			bne +
.98e7	4c 4c 99	jmp $994c			jmp _line_number_only_from_external
.98ea					+
.98ea	a0 01		ldy #$01			ldy #1
.98ec	4c 14 9a	jmp $9a14			jmp _check_command
.98ef					_prefix_percent:
.98ef	c9 25		cmp #$25			cmp #'%'
.98f1	f0 04		beq $98f7			beq _whole_text
.98f3	c9 2c		cmp #$2c			cmp #','
.98f5	d0 1b		bne $9912			bne _prefix_semicolon
.98f7					_whole_text:
.98f7	20 21 9d	jsr $9d21			jsr ed_have_text
.98fa	a9 01		lda #$01			lda #1
.98fc	95 27		sta $27,x			sta DStack+2,x		; LSB of NOS is para 1
.98fe	a9 00		lda #$00			lda #0
.9900	95 28		sta $28,x			sta DStack+3,x		; ( addr-t u-t para1 0 )
.9902					_semicolon_entry:
.9902	e8		inx				inx
.9903	e8		inx				inx			; DROP ( addr-t u-t para1 )
.9904	20 4e 9d	jsr $9d4e			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9907	a9 80		lda #$80			lda #%10000000
.9909	05 23		ora $23				ora ed_flags
.990b	85 23		sta $23				sta ed_flags
.990d	a0 01		ldy #$01			ldy #1
.990f	4c 14 9a	jmp $9a14			jmp _check_command
.9912					_prefix_semicolon:
.9912	c9 3b		cmp #$3b			cmp #';'
.9914	d0 0e		bne $9924			bne _prefix_number
.9916	20 21 9d	jsr $9d21			jsr ed_have_text
.9919	a5 21		lda $21				lda ed_cur
.991b	95 27		sta $27,x			sta DStack+2,x
.991d	a5 22		lda $22				lda ed_cur+1
.991f	95 28		sta $28,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9921	4c 02 99	jmp $9902			jmp _semicolon_entry
.9924					_prefix_number:
.9924	20 36 b6	jsr $b636			jsr Zero
.9927	20 36 b6	jsr $b636			jsr Zero		; ( addr-t u-t 0 0 0 0 )
.992a	a5 04		lda $04				lda cib+0
.992c	a4 05		ldy $05				ldy cib+1
.992e	20 e5 b5	jsr $b5e5			jsr PushYA
.9931	a5 06		lda $06				lda ciblen+0
.9933	a4 07		ldy $07				ldy ciblen+1
.9935	20 e5 b5	jsr $b5e5			jsr PushYA		; ( addr-t u-t 0 0 0 0 cib ciblen )
.9938	20 87 ae	jsr $ae87			jsr To_Number		; ( addr-t u-t 0 0 ud addr2 u2 )
.993b	b5 25		lda $25,x			lda DStack+0,x
.993d	15 26		ora $26,x			ora DStack+1,x
.993f	d0 25		bne $9966			bne _have_unconverted_chars
.9941	20 17 c3	jsr $c317			jsr Two_Drop		; ( addr-t u-t 0 0 ud )
.9944	20 57 be	jsr $be57			jsr D_To_S		; ( addr-t u-t 0 0 u )
.9947	20 74 cc	jsr $cc74			jsr Not_Rot		; ( addr-t u-t u 0 0 )
.994a	e8		inx				inx
.994b	e8		inx				inx			; ( addr-t u-t u 0 ) drop through
.994c					_line_number_only_from_external:
.994c	20 68 cd	jsr $cd68			jsr Swap		; ( addr-t u-t 0 u )
.994f	20 2d 9d	jsr $9d2d			jsr ed_is_valid_line
.9952	b0 03		bcs $9957			bcs +
.9954	4c 00 9d	jmp $9d00			jmp ed_error_2drop
.9957					+
.9957	20 68 cd	jsr $cd68			jsr Swap		; ( addr-t u-t u 0 )
.995a	20 8d 9d	jsr $9d8d			jsr ed_para1_to_cur
.995d	a9 80		lda #$80			lda #%10000000
.995f	05 23		ora $23				ora ed_flags
.9961	85 23		sta $23				sta ed_flags
.9963	4c e5 9b	jmp $9be5			jmp ed_cmd_p_from_external
.9966					_have_unconverted_chars:
.9966	a5 06		lda $06				lda ciblen+0
.9968	d5 25		cmp $25,x			cmp DStack+0,x
.996a	d0 16		bne $9982			bne _no_command_yet
.996c	a5 07		lda $07				lda ciblen+1
.996e	d5 26		cmp $26,x			cmp DStack+1,x
.9970	d0 10		bne $9982			bne _no_command_yet
.9972	8a		txa				txa
.9973	18		clc				clc
.9974	69 08		adc #$08			adc #8
.9976	aa		tax				tax			; ( addr-t u-t 0 0 )
.9977	a9 7f		lda #$7f			lda #$ff-%10000000
.9979	25 23		and $23				and ed_flags
.997b	85 23		sta $23				sta ed_flags
.997d	a0 00		ldy #$00			ldy #0
.997f	4c 14 9a	jmp $9a14			jmp _check_command
.9982					_no_command_yet:
.9982	20 cf cc	jsr $cccf			jsr To_R		; >R ( ... 0 0 ud addr2 ) (R: u2)
.9985	20 74 cc	jsr $cc74			jsr Not_Rot		; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.9988	20 57 be	jsr $be57			jsr D_To_S		; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.998b	b5 25		lda $25,x			lda DStack+0,x		; LSB
.998d	95 2b		sta $2b,x			sta DStack+6,x
.998f	b5 26		lda $26,x			lda DStack+1,x		; MSB
.9991	95 2c		sta $2c,x			sta DStack+7,x		; ( ... para1 0 addr2 para1 ) (R: u2)
.9993	e8		inx				inx
.9994	e8		inx				inx			; ( addr-t u-t para1 0 addr2 ) (R: u2)
.9995	20 ee cc	jsr $ccee			jsr R_From		; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.9998	a9 80		lda #$80			lda #%10000000
.999a	05 23		ora $23				ora ed_flags
.999c	85 23		sta $23				sta ed_flags
.999e					_check_for_para2:
.999e	a1 27		lda ($27,x)			lda (DStack+2,x)
.99a0	c9 2c		cmp #$2c			cmp #','
.99a2	f0 0c		beq $99b0			beq _got_comma
.99a4	38		sec				sec
.99a5	a5 06		lda $06				lda ciblen
.99a7	f5 25		sbc $25,x			sbc DStack+0,x
.99a9	a8		tay				tay
.99aa	20 17 c3	jsr $c317			jsr Two_Drop		; Remove the leftover stuff from >NUMBER
.99ad	4c 14 9a	jmp $9a14			jmp _check_command
.99b0					_got_comma:
.99b0	20 56 c8	jsr $c856			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr2+1 u2 )
.99b3	20 26 c8	jsr $c826			jsr One_Minus		; ( addr-t u-t para1 0 addr2+1 u2-1 )
.99b6	a1 27		lda ($27,x)			lda (DStack+2,x)
.99b8	c9 24		cmp #$24			cmp #'$'
.99ba	d0 16		bne $99d2			bne _para2_not_dollar
.99bc	38		sec				sec
.99bd	a5 06		lda $06				lda ciblen
.99bf	f5 27		sbc $27,x			sbc DStack+2,x
.99c1	a8		tay				tay
.99c2	c8		iny				iny
.99c3	98		tya				tya
.99c4	48		pha				pha
.99c5	8a		txa				txa
.99c6	18		clc				clc
.99c7	69 06		adc #$06			adc #6
.99c9	aa		tax				tax			; ( addr-t u-t para1 )
.99ca	20 4e 9d	jsr $9d4e			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.99cd	68		pla				pla
.99ce	a8		tay				tay
.99cf	4c 14 9a	jmp $9a14			jmp _check_command
.99d2					_para2_not_dollar:
.99d2	20 cf cc	jsr $cccf			jsr To_R		; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.99d5	20 36 b6	jsr $b636			jsr Zero		; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.99d8	20 36 b6	jsr $b636			jsr Zero		; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.99db	20 4e cc	jsr $cc4e			jsr Rot		; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.99de	20 ee cc	jsr $ccee			jsr R_From		; R> ( ... para1 0 0 0 addr2+1 u2-1)
.99e1	20 4a cd	jsr $cd4a			jsr Dup		; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.99e4	20 cf cc	jsr $cccf			jsr To_R		; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.99e7	20 87 ae	jsr $ae87			jsr To_Number	; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.99ea	20 4a cd	jsr $cd4a			jsr Dup		; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.99ed	20 ee cc	jsr $ccee			jsr R_From		; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.99f0	20 14 c6	jsr $c614			jsr Equal		; = ( ... para1 0 ud addr3 u3 f )
.99f3	b5 25		lda $25,x			lda DStack+0,x
.99f5	15 26		ora $26,x			ora DStack+1,x
.99f7	f0 08		beq $9a01			beq _second_number
.99f9	8a		txa				txa
.99fa	18		clc				clc
.99fb	69 0c		adc #$0c			adc #12
.99fd	aa		tax				tax			; back to ( addr-t u-t )
.99fe	4c 04 9d	jmp $9d04			jmp ed_error
.9a01					_second_number:
.9a01	e8		inx				inx
.9a02	e8		inx				inx			; ( addr-t u-t para1 0 ud addr3 u3 )
.9a03	38		sec				sec
.9a04	a5 06		lda $06				lda ciblen
.9a06	f5 25		sbc $25,x			sbc DStack+0,x
.9a08	48		pha				pha
.9a09	20 17 c3	jsr $c317			jsr Two_drop		; 2DROP ( addr-t u-t para1 0 ud )
.9a0c	20 57 be	jsr $be57			jsr D_To_S		; D>S  ( addr-t u-t para1 0 para2 )
.9a0f	20 71 c7	jsr $c771			jsr Nip			; NIP ( addr-t u-t para1 para2 )
.9a12	68		pla				pla
.9a13	a8		tay				tay
.9a14					_check_command:
.9a14	24 23		bit $23				bit ed_flags
.9a16	30 08		bmi $9a20			bmi _check_command_have_arg
.9a18	a5 21		lda $21				lda ed_cur+0
.9a1a	95 27		sta $27,x			sta DStack+2,x
.9a1c	a5 22		lda $22				lda ed_cur+1
.9a1e	95 28		sta $28,x			sta DStack+3,x
.9a20					_check_command_have_arg:
.9a20	b1 04		lda ($04),y			lda (cib),y		; get mystery char from input
.9a22	85 15		sta $15				sta tmp1+0
.9a24	85 16		sta $16				sta tmp1+1		; We need X for awhile, so it has to
.9a26	a2 ff		ldx #$ff			ldx #$ff		; for each char
.9a28	e8		inx		_cmd_loop:	inx			;   next char
.9a29	bd b5 9d	lda $9db5,x			lda ed_cmd_list,x
.9a2c	f0 13		beq $9a41			beq _illegal_command	;   end of list?
.9a2e	c5 15		cmp $15				cmp tmp1+0
.9a30	d0 f6		bne $9a28			bne _cmd_loop		;   not found?
.9a32	8a		txa				txa
.9a33	0a		asl a				asl
.9a34	aa		tax				tax			; X * 2 for table
.9a35	bd c1 9d	lda $9dc1,x			lda ed_cmd_table+1,x
.9a38	48		pha				pha
.9a39	bd c0 9d	lda $9dc0,x			lda ed_Cmd_table+0,x
.9a3c	48		pha				pha
.9a3d	a6 16		ldx $16				ldx tmp1+1		; restore X
.9a3f	08		php				php
.9a40	40		rti				rti			; jump to command routine
.9a41					_illegal_command:
.9a41	4c 00 9d	jmp $9d00			jmp ed_error_2drop
.9a44					ed_next_command:
.9a44	20 17 c3	jsr $c317			jsr Two_Drop		; ( addr-t u-t ) Fall through
.9a47					_next_command_empty:
.9a47	4c 62 98	jmp $9862			jmp ed_input_loop
.9a4a					ed_all_done:
.9a4a	a9 00		lda #$00			lda #0
.9a4c	85 06		sta $06				sta ciblen
.9a4e	85 07		sta $07				sta ciblen+1
.9a50	20 17 c3	jsr $c317			jsr Two_drop			; ( addr-t u-t )
.9a53	a5 24		lda $24				lda editor3+1
.9a55	8d 00 03	sta $0300			sta base
.9a58	60		rts				rts
.9a59					ed_cmd_a:
.9a59	e8		inx				inx
.9a5a	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9a5b					ed_entry_cmd_i:
.9a5b					ed_cmd_a_have_para:
.9a5b	20 72 9d	jsr $9d72			jsr ed_num_to_addr	  ;  ( addr-t u-t addr1 )
.9a5e	20 ce a9	jsr $a9ce			jsr CR
.9a61					_next_string_loop:
.9a61	20 12 9d	jsr $9d12			jsr ed_get_input
.9a64	a0 00		ldy #$00			ldy #0
.9a66	b1 04		lda ($04),y			lda (cib),y
.9a68	c9 2e		cmp #$2e			cmp #'.'
.9a6a	d0 18		bne $9a84			bne _add_line
.9a6c	a4 06		ldy $06				ldy ciblen
.9a6e	c0 01		cpy #$01			cpy #1
.9a70	d0 12		bne $9a84			bne _add_line
.9a72	a4 07		ldy $07				ldy ciblen+1
.9a74	d0 0e		bne $9a84			bne _add_line
.9a76	e8		inx				inx
.9a77	e8		inx				inx
.9a78	a9 40		lda #$40			lda #%01000000
.9a7a	05 23		ora $23				ora ed_flags
.9a7c	85 23		sta $23				sta ed_flags
.9a7e	20 ce a9	jsr $a9ce			jsr CR
.9a81	4c 62 98	jmp $9862			jmp ed_input_loop
.9a84					_add_line:
.9a84	20 4a cd	jsr $cd4a			jsr Dup			; ( addr-t u-t addr1 addr1 )
.9a87	20 18 c8	jsr $c818			jsr Here		; ( addr-t u-t addr1 addr1 here )
.9a8a	20 68 cd	jsr $cd68			jsr Swap		; ( addr-t u-t addr1 here addr1 )
.9a8d	20 b4 cc	jsr $ccb4			jsr Fetch		; ( addr-t u-t addr1 here addr2 )
.9a90	20 00 cb	jsr $cb00			jsr Comma		; ( addr-t u-t addr1 here )
.9a93	20 c5 ca	jsr $cac5			jsr Tuck		; TUCK ( addr-t u-t here addr1 here )
.9a96	20 68 cd	jsr $cd68			jsr Swap		; ( addr-t u-t here here addr1 )
.9a99	20 97 cc	jsr $cc97			jsr Store		; ( addr-t u-t here )
.9a9c	20 18 c8	jsr $c818			jsr Here		; HERE ( addr-t u-t here here2)
.9a9f	a9 04		lda #$04			lda #4
.9aa1	20 27 b6	jsr $b627			jsr PushZA
.9aa4	20 f1 be	jsr $bef1			jsr Allot
.9aa7	e6 21		inc $21				inc ed_cur
.9aa9	d0 02		bne $9aad			bne +
.9aab	e6 22		inc $22				inc ed_cur+1
.9aad					+
.9aad	20 18 c8	jsr $c818			jsr Here	; ( addr-t u-t here here2 here3 )
.9ab0	a5 04		lda $04				lda cib+0
.9ab2	a4 05		ldy $05				ldy cib+1
.9ab4	20 e5 b5	jsr $b5e5			jsr PushYA	; ( addr-t u-t here here2 here3 cib )
.9ab7	20 21 cd	jsr $cd21			jsr Over	; ( addr-t u-t here here2 here3 cib here3 )
.9aba	a5 06		lda $06				lda ciblen+0
.9abc	a4 07		ldy $07				ldy ciblen+1
.9abe	20 e5 b5	jsr $b5e5			jsr PushYA	; ( addr-t u-t here here2 here3 cib here3 ciblen )
.9ac1	20 e3 ab	jsr $abe3			jsr Move	; ( addr-t u-t here here2 here3 )
.9ac4	18		clc				clc
.9ac5	a5 00		lda $00				lda cp
.9ac7	65 06		adc $06				adc ciblen
.9ac9	85 00		sta $00				sta cp
.9acb	90 06		bcc $9ad3			bcc +
.9acd	a5 01		lda $01				lda cp+1
.9acf	65 07		adc $07				adc ciblen+1
.9ad1	85 01		sta $01				sta cp+1
.9ad3					+
.9ad3	20 21 cd	jsr $cd21			jsr Over		; ( addr-t u-t here here2 here3 here2 )
.9ad6	20 97 cc	jsr $cc97			jsr Store		; ( addr-t u-t here here2 )
.9ad9	a9 02		lda #$02			lda #2
.9adb	20 fb c7	jsr $c7fb			jsr plus_a		; ( addr-t u-t here here2+2 )
.9ade	20 4a cd	jsr $cd4a			jsr Dup			; ( addr-t u-t here here2+2 here2+2 )
.9ae1	a5 06		lda $06				lda ciblen
.9ae3	95 27		sta $27,x			sta DStack+2,x
.9ae5	a5 07		lda $07				lda ciblen+1
.9ae7	95 28		sta $28,x			sta DStack+3,x		; ( addr-t u-t here ciblen here2+2 )
.9ae9	20 97 cc	jsr $cc97			jsr Store		; ( addr-t u-t here )
.9aec	20 ce a9	jsr $a9ce			jsr CR			; Add a line feed for visuals
.9aef	4c 61 9a	jmp $9a61			jmp _next_string_loop
.9af2					ed_cmd_d:
.9af2	20 21 9d	jsr $9d21			jsr ed_have_text
.9af5	20 64 9d	jsr $9d64			jsr ed_no_line_zero
.9af8	b5 25		lda $25,x			lda DStack+0,x
.9afa	15 26		ora $26,x			ora DStack+1,x
.9afc	d0 09		bne $9b07			bne +
.9afe	20 21 cd	jsr $cd21			jsr Over		; ( addr-t u-t para1 0 para1 )
.9b01	20 3c 9b	jsr $9b3c			jsr _cmd_d_common	; ( addr-t u-t para1 0 )
.9b04	4c 30 9b	jmp $9b30			jmp _cmd_d_done
.9b07					+
.9b07	20 2d 9d	jsr $9d2d			jsr ed_is_valid_line	  ; result is in C flag
.9b0a	b0 03		bcs $9b0f			bcs _cmd_d_loop
.9b0c	4c 00 9d	jmp $9d00			jmp ed_error_2drop
.9b0f					_cmd_d_loop:
.9b0f	b5 25		lda $25,x			lda DStack+0,x		; para1 > para2 ?
.9b11	d5 27		cmp $27,x			cmp DStack+2,x
.9b13	b5 26		lda $26,x			lda DStack+1,x
.9b15	f5 28		sbc $28,x			sbc DStack+3,x
.9b17	90 0c		bcc $9b25			bcc _cmd_d_done_with_flag
.9b19	20 4a cd	jsr $cd4a			jsr Dup		; DUP ( addr-t u-t para1 para2 para2 )
.9b1c	20 3c 9b	jsr $9b3c			jsr _cmd_d_common	; ( addr-t u-t para1 para2 )
.9b1f	20 26 c8	jsr $c826			jsr One_minus	; 1- ( addr-t u-t para1 para2-1 )
.9b22	4c 0f 9b	jmp $9b0f			jmp _cmd_d_loop
.9b25					_cmd_d_done_with_flag:
.9b25	20 32 c8	jsr $c832			jsr NOS_One_Minus
.9b28	b5 27		lda $27,x			lda DStack+2,x
.9b2a	85 21		sta $21				sta ed_cur
.9b2c	b5 28		lda $28,x			lda DStack+3,x
.9b2e	85 22		sta $22				sta ed_cur+1		; drop through to _cmd_d_done
.9b30					_cmd_d_done:
.9b30	a9 40		lda #$40			lda #%01000000
.9b32	05 23		ora $23				ora ed_flags
.9b34	85 23		sta $23				sta ed_flags
.9b36	20 ce a9	jsr $a9ce			jsr CR
.9b39	4c 44 9a	jmp $9a44			jmp ed_next_command
.9b3c					_cmd_d_common:
.9b3c	20 4a cd	jsr $cd4a			jsr Dup			; ( addr-t u-t u u )
.9b3f	20 72 9d	jsr $9d72			jsr ed_num_to_addr	; ( addr-t u-t u addr )
.9b42	20 b4 cc	jsr $ccb4			jsr Fetch		; ( addr-t u-t u addr1 )
.9b45	20 68 cd	jsr $cd68			jsr Swap		; ( addr-t u-t addr1 u )
.9b48	20 26 c8	jsr $c826			jsr One_minus		; ( addr-t u-t addr1 u-1 )
.9b4b	20 72 9d	jsr $9d72			jsr ed_num_to_addr	; ( addr-t u-t addr1 addr-1 )
.9b4e	4c 97 cc	jmp $cc97			jmp Store		; ( addr-t u-t )
.9b51					ed_cmd_equ:
.9b51	a5 1f		lda $1f				lda ed_head
.9b53	05 20		ora $20				ora ed_head+1
.9b55	d0 06		bne $9b5d			bne _cmd_equ_have_text
.9b57	20 36 b6	jsr $b636			jsr Zero		; ( addr-t u-t para1 para2 0 )
.9b5a	4c 7d 9b	jmp $9b7d			jmp _cmd_equ_done
.9b5d					_cmd_equ_have_text:
.9b5d	20 64 9d	jsr $9d64			jsr ed_no_line_zero
.9b60	24 23		bit $23				bit ed_flags
.9b62	30 0a		bmi $9b6e			bmi _cmd_equ_have_para
.9b64	a5 21		lda $21				lda ed_cur+0		; ( addr-t u-t para1 para2 ? )
.9b66	a4 22		ldy $22				ldy ed_cur+1
.9b68	20 e5 b5	jsr $b5e5			jsr PushYA
.9b6b	4c 7d 9b	jmp $9b7d			jmp _cmd_equ_done	; ( addr-t u-t para1 para2 cur )
.9b6e					_cmd_equ_have_para:
.9b6e	b5 25		lda $25,x			lda DStack+0,x
.9b70	15 26		ora $26,x			ora DStack+1,x
.9b72	d0 06		bne $9b7a			bne _cmd_equ_two_paras
.9b74	20 21 cd	jsr $cd21			jsr Over		; ( addr-t u-t para1 para2 para1)
.9b77	4c 7d 9b	jmp $9b7d			jmp _cmd_equ_done
.9b7a					_cmd_equ_two_paras:
.9b7a	20 4a cd	jsr $cd4a			jsr Dup			; ( addr-t u-t para1 para2 para2) drop through
.9b7d					_cmd_equ_done:
.9b7d	20 ce a9	jsr $a9ce			jsr CR			; number goes on new line
.9b80	20 f9 c9	jsr $c9f9			jsr U_Dot		; ( addr-t u-t para1 para2 )
.9b83	20 ce a9	jsr $a9ce			jsr CR
.9b86	4c 44 9a	jmp $9a44			jmp ed_next_command
.9b89					ed_cmd_f:
.9b89	24 23		bit $23				bit ed_flags
.9b8b	30 18		bmi $9ba5			bmi _cmd_f_have_para
.9b8d	20 ce a9	jsr $a9ce			jsr CR
.9b90	20 cf cc	jsr $cccf			jsr To_R		; ( addr-t u-t 0 ) ( R: 0 )
.9b93	20 4e cc	jsr $cc4e			jsr Rot			; ( u-t 0 addr-t ) ( R: 0 )
.9b96	20 4a cd	jsr $cd4a			jsr Dup			; ( u-t 0 addr-t addr-t ) ( R: 0 )
.9b99	20 f9 c9	jsr $c9f9			jsr U_Dot		; ( u-t 0 addr-t ) ( R: 0 )
.9b9c	20 74 cc	jsr $cc74			jsr Not_Rot		; ( addr-t u-t 0 ) ( R: 0 )
.9b9f	20 ee cc	jsr $ccee			jsr R_From		; ( addr-t u-t 0 0 )
.9ba2	4c b6 9b	jmp $9bb6			jmp _cmd_f_done
.9ba5					_cmd_f_have_para:
.9ba5	20 21 cd	jsr $cd21			jsr Over
.9ba8	20 ce a9	jsr $a9ce			jsr CR
.9bab	20 f9 c9	jsr $c9f9			jsr U_Dot
.9bae	b5 27		lda $27,x			lda DStack+2,x
.9bb0	95 2b		sta $2b,x			sta DStack+6,x
.9bb2	b5 28		lda $28,x			lda DStack+3,x
.9bb4	95 2c		sta $2c,x			sta DStack+7,x		; fall through to _cmd_f_done
.9bb6					_cmd_f_done:
.9bb6	20 ce a9	jsr $a9ce			jsr CR
.9bb9	4c 44 9a	jmp $9a44			jmp ed_next_command
.9bbc					ed_cmd_i:
.9bbc	e8		inx				inx
.9bbd	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9bbe	24 23		bit $23				bit ed_flags
.9bc0	30 08		bmi $9bca			bmi _cmd_i_have_para
.9bc2	a5 21		lda $21				lda ed_cur
.9bc4	95 25		sta $25,x			sta DStack+0,x
.9bc6	a5 22		lda $22				lda ed_cur+1
.9bc8	95 26		sta $26,x			sta DStack+1,x		;  ( addr-t u-t cur ) drop through
.9bca					_cmd_i_have_para:
.9bca	b5 25		lda $25,x			lda DStack+0,x
.9bcc	15 26		ora $26,x			ora DStack+1,x
.9bce	f0 09		beq $9bd9			beq _cmd_i_done
.9bd0	20 26 c8	jsr $c826			jsr One_minus		; ( addr-t u-t para1-1 )
.9bd3	20 36 b6	jsr $b636			jsr Zero		; ( addr-t u-t para1-1 0 )
.9bd6	20 56 c7	jsr $c756			jsr Max			; ( addr-t u-t para1-1 | 0 )
.9bd9					_cmd_i_done:
.9bd9	4c 5b 9a	jmp $9a5b			jmp ed_entry_cmd_i
.9bdc					ed_cmd_n:
.9bdc	a9 01		lda #$01			lda #%00000001
.9bde	05 23		ora $23				ora ed_flags
.9be0	85 23		sta $23				sta ed_flags
.9be2	4c eb 9b	jmp $9beb			jmp ed_cmd_p_entry_for_cmd_n
.9be5					ed_cmd_p:
.9be5					ed_cmd_p_from_external:
.9be5	a9 fe		lda #$fe			lda #$ff-%00000001
.9be7	25 23		and $23				and ed_flags
.9be9	85 23		sta $23				sta ed_flags
.9beb					ed_cmd_p_entry_for_cmd_n:
.9beb	20 21 9d	jsr $9d21			jsr ed_have_text
.9bee	20 64 9d	jsr $9d64			jsr ed_no_line_zero
.9bf1	20 ce a9	jsr $a9ce			jsr CR
.9bf4	b5 25		lda $25,x			lda DStack+0,x
.9bf6	15 26		ora $26,x			ora DStack+1,x
.9bf8	d0 11		bne $9c0b			bne _cmd_p_loop
.9bfa	b5 27		lda $27,x			lda DStack+2,x
.9bfc	85 21		sta $21				sta ed_cur
.9bfe	b5 28		lda $28,x			lda DStack+3,x
.9c00	85 22		sta $22				sta ed_cur+1
.9c02	20 21 cd	jsr $cd21			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9c05	20 2c 9c	jsr $9c2c			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9c08	4c 29 9c	jmp $9c29			jmp _cmd_p_all_done
.9c0b					_cmd_p_loop:
.9c0b	b5 25		lda $25,x			lda DStack+0,x		; para1 > para2 ?
.9c0d	d5 27		cmp $27,x			cmp DStack+2,x
.9c0f	b5 26		lda $26,x			lda DStack+1,x
.9c11	f5 28		sbc $28,x			sbc DStack+3,x
.9c13	90 0c		bcc $9c21			bcc _cmd_p_done
.9c15	20 21 cd	jsr $cd21			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9c18	20 2c 9c	jsr $9c2c			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9c1b	20 56 c8	jsr $c856			jsr NOS_One_Plus
.9c1e	4c 0b 9c	jmp $9c0b			jmp _cmd_p_loop
.9c21					_cmd_p_done:
.9c21	b5 25		lda $25,x			lda DStack+0,x
.9c23	85 21		sta $21				sta ed_cur
.9c25	b5 26		lda $26,x			lda DStack+1,x
.9c27	85 22		sta $22				sta ed_cur+1
.9c29					_cmd_p_all_done:
.9c29	4c 44 9a	jmp $9a44			jmp ed_next_command
.9c2c					_cmd_p_common:
.9c2c	a5 23		lda $23				lda ed_flags
.9c2e	4a		lsr a				lsr			; bit 0 now in carry
.9c2f	90 0b		bcc $9c3c			bcc _cmd_p_common_no_num
.9c31	20 4a cd	jsr $cd4a			jsr Dup			; ( addr-t u-t para1 para1 )
.9c34	20 f9 c9	jsr $c9f9			jsr U_Dot		; ( addr-t u-t para1 )
.9c37	a9 09		lda #$09			lda #AscHT
.9c39	20 b8 cb	jsr $cbb8			jsr Emit_A
.9c3c					_cmd_p_common_no_num:
.9c3c	20 72 9d	jsr $9d72			jsr ed_num_to_addr	  ; ( addr-t u-t addr )
.9c3f	4c 96 9d	jmp $9d96			jmp ed_print_addr
.9c42					ed_cmd_q:
.9c42	24 23		bit $23				bit ed_flags		; bit 6 is change flag
.9c44	50 03		bvc $9c49			bvc +
.9c46	4c 00 9d	jmp $9d00			jmp ed_error_2drop
.9c49					+
.9c49	4c 4a 9a	jmp $9a4a			jmp ed_all_done		   ; can't fall thru because of PLX
.9c4c					ed_cmd_qq:
.9c4c	4c 4a 9a	jmp $9a4a			jmp ed_all_done
.9c4f					ed_cmd_w:
.9c4f	20 21 9d	jsr $9d21			jsr ed_have_text
.9c52	24 23		bit $23				bit ed_flags
.9c54	30 14		bmi $9c6a			bmi _cmd_w_have_para
.9c56	b5 2b		lda $2b,x			lda DStack+6,x
.9c58	15 2c		ora $2c,x			ora DStack+7,x
.9c5a	d0 03		bne $9c5f			bne +
.9c5c	4c 00 9d	jmp $9d00			jmp ed_error_2drop
.9c5f					+
.9c5f	b5 2b		lda $2b,x			lda DStack+6,x
.9c61	95 27		sta $27,x			sta DStack+2,x
.9c63	b5 2c		lda $2c,x			lda DStack+7,x
.9c65	95 28		sta $28,x			sta DStack+3,x		; ( addr-t u-t addr-t ? )
.9c67	4c 72 9c	jmp $9c72			jmp _cmd_w_para_ready
.9c6a					_cmd_w_have_para:
.9c6a	b5 27		lda $27,x			lda DStack+2,x
.9c6c	95 2b		sta $2b,x			sta DStack+6,x
.9c6e	b5 28		lda $28,x			lda DStack+3,x
.9c70	95 2c		sta $2c,x			sta DStack+7,x		; drop through to _cmd_w_para_ready
.9c72					_cmd_w_para_ready:
.9c72	a9 1f		lda #$1f			lda #<ed_head
.9c74	95 25		sta $25,x			sta DStack+0,x
.9c76	a9 00		lda #$00			lda #>ed_head
.9c78	95 26		sta $26,x			sta DStack+1,x		; ( addr-t u-t addr-t addr-h )
.9c7a	20 21 cd	jsr $cd21			jsr Over		; ( addr-t u-t addr-t addr-h addr-t )
.9c7d	20 cf cc	jsr $cccf			jsr To_R		; ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.9c80					_cmd_w_loop:
.9c80	20 b4 cc	jsr $ccb4			jsr Fetch		; ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.9c83	b5 25		lda $25,x			lda DStack+0,x
.9c85	15 26		ora $26,x			ora DStack+1,x
.9c87	f0 51		beq $9cda			beq _cmd_w_eol
.9c89	20 a4 ca	jsr $caa4			jsr Two_dup		; ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.9c8c	20 2a c4	jsr $c42a			jsr Two_to_r		; ( addr-t addr-1 ) (R: ... )
.9c8f	a9 02		lda #$02			lda #2
.9c91	20 fb c7	jsr $c7fb			jsr plus_a		; ( addr-t addr1+2 ) (R: ... )
.9c94	20 4a cd	jsr $cd4a			jsr Dup			; ( addr-t addr1+2 addr1+2 ) ( R: ... )
.9c97	20 b4 cc	jsr $ccb4			jsr Fetch		; ( addr-t addr1+2 addr-s ) ( R: ... )
.9c9a	20 68 cd	jsr $cd68			jsr Swap		; ( addr-t addr-s addr1+2 ) ( R: ... )
.9c9d	a9 02		lda #$02			lda #2
.9c9f	20 fb c7	jsr $c7fb			jsr plus_a		; ( addr-t addr-s addr1+2 ) (R: ... )
.9ca2	20 b4 cc	jsr $ccb4			jsr Fetch		; ( addr-t addr-s u-s ) ( R: ... )
.9ca5	20 74 cc	jsr $cc74			jsr Not_Rot		; ( u-s addr-t addr-s ) ( R: ... )
.9ca8	20 68 cd	jsr $cd68			jsr Swap		; ( u-s addr-s addr-t ) ( R: ... )
.9cab	20 4e cc	jsr $cc4e			jsr Rot			; (addr-s addr-t u-s ) ( R: ... )
.9cae	20 4a cd	jsr $cd4a			jsr Dup			; (addr-s addr-t u-s u-s ) ( R: ... )
.9cb1	20 cf cc	jsr $cccf			jsr To_R		; (addr-s addr-t u-s ) ( R: ... u-s )
.9cb4	20 e3 ab	jsr $abe3			jsr Move		; ( )( R: addr-t addr-1 addr-t )
.9cb7	20 ee cc	jsr $ccee			jsr R_From		; ( u-s )  ( R: addr-t addr-h addr-t )
.9cba	20 05 c4	jsr $c405			jsr Two_r_from		; ( u-s addr-t addr-h ) ( R: addr-t )
.9cbd	20 74 cc	jsr $cc74			jsr Not_Rot		; ( addr-h u-s addr-t ) ( R: addr-t )
.9cc0	20 94 c9	jsr $c994			jsr Plus		; ( addr-h addr-t1 ) ( R: addr-t )
.9cc3	20 4a cd	jsr $cd4a			jsr Dup			; ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.9cc6	a9 0a		lda #$0a			lda #AscLF
.9cc8	20 27 b6	jsr $b627			jsr PushZA		; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.9ccb	20 68 cd	jsr $cd68			jsr Swap		; ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.9cce	20 97 cc	jsr $cc97			jsr Store		; ( addr-h addr-t1 ) ( R: addr-t )
.9cd1	20 4c c8	jsr $c84c			jsr One_plus		; ( addr-h addr-t1+1 ) ( R: addr-t )
.9cd4	20 68 cd	jsr $cd68			jsr Swap		; ( addr-t1+1 addr-h ) ( R: addr-t )
.9cd7	4c 80 9c	jmp $9c80			jmp _cmd_w_loop
.9cda					_cmd_w_eol:
.9cda	20 68 cd	jsr $cd68			jsr Swap		; ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.9cdd	20 ee cc	jsr $ccee			jsr R_From		; ( addr-t u-t addr-n addr-tn addr-t )
.9ce0	20 ad c9	jsr $c9ad			jsr Minus		; ( addr-t u-t addr-n u )
.9ce3	b5 25		lda $25,x			lda DStack+0,x
.9ce5	95 29		sta $29,x			sta DStack+4,x
.9ce7	b5 26		lda $26,x			lda DStack+1,x
.9ce9	95 2a		sta $2a,x			sta DStack+5,x		; ( addr-t u addr-n u )
.9ceb	20 ce a9	jsr $a9ce			jsr CR
.9cee	20 4a cd	jsr $cd4a			jsr Dup			; ( addr-t u addr-n u u )
.9cf1	20 f9 c9	jsr $c9f9			jsr U_Dot		; ( addr-t u addr-n u )
.9cf4	20 ce a9	jsr $a9ce			jsr CR
.9cf7	a9 bf		lda #$bf			lda #$ff-%01000000
.9cf9	25 23		and $23				and ed_flags
.9cfb	85 23		sta $23				sta ed_flags
.9cfd	4c 44 9a	jmp $9a44			jmp ed_next_command
.9d00					ed_error_2drop:
.9d00	e8		inx				inx			; Drop para2
.9d01	e8		inx				inx
.9d02					ed_error_1drop:
.9d02	e8		inx				inx			; Drop para1
.9d03	e8		inx				inx
.9d04					ed_error:
.9d04	20 ce a9	jsr $a9ce			jsr CR
.9d07	a9 3f		lda #$3f			lda #'?'
.9d09	20 b8 cb	jsr $cbb8			jsr Emit_A
.9d0c	20 ce a9	jsr $a9ce			jsr CR
.9d0f	4c 62 98	jmp $9862			jmp ed_input_loop
.9d12					ed_get_input:
.9d12	20 8a c0	jsr $c08a			jsr Refill		;  ( addr-t u-t f )
.9d15	b5 25		lda $25,x			lda DStack+0,x
.9d17	d0 05		bne $9d1e			bne +
.9d19	68		pla				pla
.9d1a	68		pla				pla
.9d1b	4c 02 9d	jmp $9d02			jmp ed_error_1drop
.9d1e					+
.9d1e	e8		inx				inx
.9d1f	e8		inx				inx
.9d20	60		rts				rts
.9d21					ed_have_text:
.9d21	a5 1f		lda $1f				lda ed_head
.9d23	05 20		ora $20				ora ed_head+1
.9d25	d0 05		bne $9d2c			bne +
.9d27	68		pla				pla
.9d28	68		pla				pla
.9d29	4c 04 9d	jmp $9d04			jmp ed_error
.9d2c					+
.9d2c	60		rts				rts
.9d2d					ed_is_valid_line:
.9d2d	38		sec				sec				; default is legal line number
.9d2e	b5 25		lda $25,x			lda DStack+0,x
.9d30	15 26		ora $26,x			ora DStack+1,x
.9d32	f0 18		beq $9d4c			beq _nope_zero	; ( n )
.9d34	20 4a cd	jsr $cd4a			jsr Dup				; ( n n )
.9d37	20 4e 9d	jsr $9d4e			jsr ed_last_line		; ( n n last )
.9d3a	20 68 cd	jsr $cd68			jsr Swap			; ( n last n )
.9d3d	20 4a c6	jsr $c64a			jsr Less_Than			; ( n f )
.9d40	b5 25		lda $25,x			lda DStack+0,x			; 0 flag is good
.9d42	15 26		ora $26,x			ora DStack+1,x
.9d44	d0 04		bne $9d4a			bne _too_small
.9d46	e8		inx				inx
.9d47	e8		inx				inx			; DROP flag ( n )
.9d48	38		sec				sec			; signal valid
.9d49	60		rts				rts
.9d4a					_too_small:
.9d4a	e8		inx				inx
.9d4b	e8		inx				inx
.9d4c					_nope_zero:
.9d4c	18		clc				clc			; signal not valid
.9d4d	60		rts				rts
.9d4e					ed_last_line:
.9d4e	20 36 b6	jsr $b636			jsr Zero		; Set counter to zero
.9d51	a9 1f		lda #$1f			lda #ed_head
.9d53	20 27 b6	jsr $b627			jsr PushZA		; ( count addr )
.9d56					_loop:
.9d56	20 b4 cc	jsr $ccb4			jsr Fetch		; ( count addr|0 )
.9d59	b5 26		lda $26,x			lda DStack+1,x		; at end-of-list?
.9d5b	f0 06		beq $9d63			beq _done
.9d5d	20 56 c8	jsr $c856			jsr NOS_One_Plus	; Increase counter
.9d60	4c 56 9d	jmp $9d56			jmp _loop		; continue
.9d63					_done:
.9d63	60		rts				rts
.9d64					ed_no_line_zero:
.9d64	b5 27		lda $27,x			lda DStack+2,x
.9d66	15 28		ora $28,x			ora DStack+3,x
.9d68	d0 07		bne $9d71			bne _done
.9d6a	24 23		bit $23				bit ed_flags
.9d6c	10 03		bpl $9d71			bpl _done
.9d6e	4c 00 9d	jmp $9d00			jmp ed_error_2drop
.9d71					_done:
.9d71	60		rts				rts
.9d72					ed_num_to_addr:
.9d72	a9 1f		lda #$1f			lda #ed_head
.9d74	20 27 b6	jsr $b627			jsr PushZA		; ( u addr-h )
.9d77	4c 84 9d	jmp $9d84			jmp _test
.9d7a					_loop:
.9d7a	20 b4 cc	jsr $ccb4			jsr Fetch		; @ ( u addr1 )
.9d7d	b5 26		lda $26,x			lda DStack+1,x		; at end of list?
.9d7f	f0 09		beq $9d8a			beq _finished
.9d81	20 32 c8	jsr $c832			jsr NOS_One_Minus	; decrement the line count
.9d84	b5 27		lda $27,x	_test:		lda DStack+2,x		; is the nth element we're looking for?
.9d86	15 28		ora $28,x			ora DStack+3,x
.9d88	d0 f0		bne $9d7a			bne _loop
.9d8a					_finished:
.9d8a	4c 71 c7	jmp $c771			jmp Nip			; ( addr )
.9d8d					ed_para1_to_cur:
.9d8d	b5 27		lda $27,x			lda DStack+2,x
.9d8f	85 21		sta $21				sta ed_cur
.9d91	b5 28		lda $28,x			lda DStack+3,x
.9d93	85 22		sta $22				sta ed_cur+1
.9d95	60		rts				rts
.9d96					ed_print_addr:
.9d96	a9 02		lda #$02			lda #2
.9d98	20 fb c7	jsr $c7fb			jsr plus_a		; ( addr+2 )
.9d9b	20 4a cd	jsr $cd4a			jsr Dup			; ( addr+2 addr+2 )
.9d9e	a9 02		lda #$02			lda #2
.9da0	20 fb c7	jsr $c7fb			jsr plus_a		; ( addr+2 addr+4 )
.9da3	20 b4 cc	jsr $ccb4			jsr Fetch		; ( addr+2 u-s )
.9da6	20 68 cd	jsr $cd68			jsr Swap		; ( u-s addr+2 )
.9da9	20 b4 cc	jsr $ccb4			jsr Fetch		; ( u-s addr-s )
.9dac	20 68 cd	jsr $cd68			jsr Swap		; ( addr-s u-s )
.9daf	20 d2 cb	jsr $cbd2			jsr Type
.9db2	4c ce a9	jmp $a9ce			jmp CR
>9db5	61 66 69 64 70 6e 3d 77		ed_cmd_list:	.text "afidpn=wqQ", 0
>9dbd	71 51 00
.9dc0					ed_cmd_table:
>9dc0	59 9a 89 9b bc 9b f2 9a				.word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>9dc8	e5 9b dc 9b
>9dcc	51 9b 4f 9c 42 9c 4c 9c				.word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.9dd4					ed6502_end:
>9dd4	53 65 65			L1:	.text "See"	;  name of word as a string, ending at wh_NameLastChar
>9dd7	03					.byte *-L1	;wh_NameLength	length of name
>9dd8	bd 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9dda	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9ddb	08					.byte NN	;wh_Flags	dictionary flags
=40279					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9ddc					See:
.9ddc	20 9f ba	jsr $ba9f			jsr Tick_Nt		; ( nt )
.9ddf	20 ce a9	jsr $a9ce			jsr CR
.9de2	ad 00 03	lda $0300			lda base		; Save the current number base
.9de5	48		pha				pha
.9de6	a9 3c		lda #$3c			lda #<str_see_nt	; print nt
.9de8	a0 d9		ldy #$d9			ldy #>str_see_nt
.9dea	20 f3 cb	jsr $cbf3			jsr Print_ASCIIZ_YA_no_lf
.9ded	20 4a cd	jsr $cd4a			jsr Dup			; ( nt nt )
.9df0	20 5b a7	jsr $a75b			jsr Dot_Hex
.9df3	20 c5 cb	jsr $cbc5			jsr Space		; ( nt )
.9df6	20 4a cd	jsr $cd4a			jsr Dup			; ( nt nt )
.9df9	20 09 bc	jsr $bc09			jsr Name_To_Int		; ( nt xt )
.9dfc	a9 42		lda #$42			lda #<str_see_xt	; print xt
.9dfe	a0 d9		ldy #$d9			ldy #>str_see_xt
.9e00	20 f3 cb	jsr $cbf3			jsr Print_ASCIIZ_YA_no_lf
.9e03	20 4a cd	jsr $cd4a			jsr Dup			; ( nt xt xt )
.9e06	20 5b a7	jsr $a75b			jsr Dot_Hex
.9e09	20 ce a9	jsr $a9ce			jsr CR			; ( nt xt )
.9e0c	a9 35		lda #$35			lda #<str_see_flags
.9e0e	a0 d9		ldy #$d9			ldy #>str_see_flags
.9e10	20 f3 cb	jsr $cbf3			jsr Print_ASCIIZ_YA_no_lf
.9e13	20 21 cd	jsr $cd21			jsr Over		; ( nt xt nt )
.9e16	a9 84		lda #$84			lda #Wh_Flags
.9e18	20 fb c7	jsr $c7fb			jsr plus_a		; ( nt xt ^flags )
.9e1b	a1 25		lda ($25,x)			lda (DStack+0,x)	; ( nt xt ^flags )
.9e1d	95 25		sta $25,x			sta DStack+0,x		; ( nt xt flags )
.9e1f	a0 0e		ldy #$0e			ldy #2*7		; for bit 7..0
.9e21	20 c5 cb	jsr $cbc5	_flag_loop:	jsr Space
.9e24	b9 70 9e	lda $9e70,y			lda _FlagLabels+0,y	;   print label
.9e27	20 b8 cb	jsr $cbb8			jsr Emit_A
.9e2a	b9 71 9e	lda $9e71,y			lda _FlagLabels+1,y
.9e2d	20 b8 cb	jsr $cbb8			jsr Emit_A
.9e30	a9 3d		lda #$3d			lda #'='
.9e32	20 b8 cb	jsr $cbb8			jsr Emit_A
.9e35	16 25		asl $25,x			asl DStack+0,x		;   c = flag, rotate the rest
.9e37	a9 00		lda #$00			lda #0
.9e39	69 30		adc #$30			adc #'0'
.9e3b	20 b8 cb	jsr $cbb8			jsr Emit_A
.9e3e	88		dey				dey
.9e3f	88		dey				dey
.9e40	10 df		bpl $9e21			bpl _flag_loop
.9e42	e8		inx				inx
.9e43	e8		inx				inx			; ( nt xt )
.9e44	20 ce a9	jsr $a9ce			jsr CR
.9e47	a9 48		lda #$48			lda #<str_see_size	; print size
.9e49	a0 d9		ldy #$d9			ldy #>str_see_size
.9e4b	20 f3 cb	jsr $cbf3			jsr Print_ASCIIZ_YA_no_lf
.9e4e	20 68 cd	jsr $cd68			jsr Swap		; ( xt nt )
.9e51	20 82 a9	jsr $a982			jsr WordSize		; ( xt u )
.9e54	20 4a cd	jsr $cd4a			jsr Dup			; ( xt u u ) for DUMP and DISASM
.9e57	20 06 b0	jsr $b006			jsr Decimal
.9e5a	20 f9 c9	jsr $c9f9			jsr U_Dot		; ( xt u )
.9e5d	20 ce a9	jsr $a9ce			jsr CR
.9e60	68		pla				pla			; restore base
.9e61	8d 00 03	sta $0300			sta base
.9e64	20 a4 ca	jsr $caa4			jsr Two_dup
.9e67	20 b3 a6	jsr $a6b3			jsr Dump		; dump
.9e6a	20 ce a9	jsr $a9ce			jsr CR
.9e6d	4c 70 d6	jmp $d670			jmp DisAsm		; disassemble
=148					CL	.var *-(WordListLink+wh_Xt)
=$9e70					en = *	; remember here
>9dda	94					.byte CL	;wh_CodeLength
>9e70	43 4f 41 4e 49 4d 4e 4e		_FlagLabels:	.text "COANIMNNUF__R6__"
>9e78	55 46 5f 5f 52 36 5f 5f
>9e80	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9e88	72 64 4c 69 73 74
>9e8e	0e					.byte *-L1	;wh_NameLength	length of name
>9e8f	57 9d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9e91	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9e92	08					.byte NN	;wh_Flags	dictionary flags
=40462					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9e93	4c 36 b6	jmp $b636	Forth_WordList:	jmp Zero
=3					CL	.var *-(WordListLink+wh_Xt)
=$9e96					en = *	; remember here
>9e91	03					.byte CL	;wh_CodeLength
>9e96	45 64 69 74 6f 72 2d 57		L1:	.text "Editor-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9e9e	6f 72 64 4c 69 73 74
>9ea5	0f					.byte *-L1	;wh_NameLength	length of name
>9ea6	0e 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9ea8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9ea9	08					.byte NN	;wh_Flags	dictionary flags
=40485					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9eaa					Editor_WordList:
.9eaa	4c 40 b6	jmp $b640			jmp One
=3					CL	.var *-(WordListLink+wh_Xt)
=$9ead					en = *	; remember here
>9ea8	03					.byte CL	;wh_CodeLength
>9ead	41 73 73 65 6d 62 6c 65		L1:	.text "Assembler-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9eb5	72 2d 57 6f 72 64 4c 69 73 74
>9ebf	12					.byte *-L1	;wh_NameLength	length of name
>9ec0	25 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9ec2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9ec3	08					.byte NN	;wh_Flags	dictionary flags
=40511					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9ec4					Assembler_WordList:
.9ec4	4c 4a b6	jmp $b64a			jmp Two
=3					CL	.var *-(WordListLink+wh_Xt)
=$9ec7					en = *	; remember here
>9ec2	03					.byte CL	;wh_CodeLength
>9ec7	52 6f 6f 74 2d 57 6f 72		L1:	.text "Root-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>9ecf	64 6c 69 73 74
>9ed4	0d					.byte *-L1	;wh_NameLength	length of name
>9ed5	3f 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9ed7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9ed8	08					.byte NN	;wh_Flags	dictionary flags
=40532					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9ed9	a9 03		lda #$03	Root_WordList:	lda #wid_Root
.9edb	4c 27 b6	jmp $b627			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$9ede					en = *	; remember here
>9ed7	05					.byte CL	;wh_CodeLength
>9ede	4f 6e 6c 79			L1:	.text "Only"	;  name of word as a string, ending at wh_NameLastChar
>9ee2	04					.byte *-L1	;wh_NameLength	length of name
>9ee3	54 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9ee5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9ee6	08					.byte NN	;wh_Flags	dictionary flags
=40546					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9ee7	20 05 b6	jsr $b605	Only:		jsr True	; Push -1
.9eea	4c 52 a0	jmp $a052			jmp Set_Order	; set the minimum search order.
=6					CL	.var *-(WordListLink+wh_Xt)
=$9eed					en = *	; remember here
>9ee5	06					.byte CL	;wh_CodeLength
>9eed	41 6c 73 6f			L1:	.text "Also"	;  name of word as a string, ending at wh_NameLastChar
>9ef1	04					.byte *-L1	;wh_NameLength	length of name
>9ef2	62 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9ef4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9ef5	08					.byte NN	;wh_Flags	dictionary flags
=40561					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9ef6	20 8a a0	jsr $a08a	Also:		jsr Get_Order
.9ef9	20 21 cd	jsr $cd21			jsr Over
.9efc	20 68 cd	jsr $cd68			jsr Swap
.9eff	20 4c c8	jsr $c84c			jsr One_plus
.9f02	4c 52 a0	jmp $a052			jmp Set_Order
=15					CL	.var *-(WordListLink+wh_Xt)
=$9f05					en = *	; remember here
>9ef4	0f					.byte CL	;wh_CodeLength
>9f05	50 72 65 76 69 6f 75 73		L1:	.text "Previous"	;  name of word as a string, ending at wh_NameLastChar
>9f0d	08					.byte *-L1	;wh_NameLength	length of name
>9f0e	71 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f10	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f11	08					.byte NN	;wh_Flags	dictionary flags
=40589					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f12	20 8a a0	jsr $a08a	Previous:	jsr Get_Order
.9f15	20 71 c7	jsr $c771			jsr Nip
.9f18	20 26 c8	jsr $c826			jsr One_minus
.9f1b	4c 52 a0	jmp $a052			jmp Set_Order
=12					CL	.var *-(WordListLink+wh_Xt)
=$9f1e					en = *	; remember here
>9f10	0c					.byte CL	;wh_CodeLength
>9f1e	3e 4f 72 64 65 72		L1:	.text ">Order"	;  name of word as a string, ending at wh_NameLastChar
>9f24	06					.byte *-L1	;wh_NameLength	length of name
>9f25	8d 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f27	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f28	08					.byte NN	;wh_Flags	dictionary flags
=40612					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f29					To_Order:
.9f29	20 cf cc	jsr $cccf			jsr To_R		; Put the wid on the return stack for now.
.9f2c	20 8a a0	jsr $a08a			jsr Get_Order		; Get the current search order.
.9f2f	20 ee cc	jsr $ccee			jsr R_From		; Get back the wid and add it to the list.
.9f32	20 68 cd	jsr $cd68			jsr Swap
.9f35	20 4c c8	jsr $c84c			jsr One_plus
.9f38	4c 52 a0	jmp $a052			jmp Set_Order		; Set the search order with the new list.
=18					CL	.var *-(WordListLink+wh_Xt)
=$9f3b					en = *	; remember here
>9f27	12					.byte CL	;wh_CodeLength
>9f3b	4f 72 64 65 72			L1:	.text "Order"	;  name of word as a string, ending at wh_NameLastChar
>9f40	05					.byte *-L1	;wh_NameLength	length of name
>9f41	a4 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f43	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f44	08					.byte NN	;wh_Flags	dictionary flags
=40640					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f45					Order:
.9f45	20 ce a9	jsr $a9ce			jsr CR
.9f48	a0 00		ldy #$00			ldy #0			; for each search_orderV[]
.9f4a	f0 0b		beq $9f57			beq _test
.9f4c	98		tya		_loop:		tya
.9f4d	48		pha				pha
.9f4e	b9 2b 03	lda $032b,y			lda Search_orderV,y
.9f51	20 62 9f	jsr $9f62			jsr order_print_wid_string   ; internal helper function
.9f54	68		pla				pla
.9f55	a8		tay				tay
.9f56	c8		iny				iny			;  next
.9f57	cc 2a 03	cpy $032a	_test:		cpy Num_orderV
.9f5a	90 f0		bcc $9f4c			bcc _loop
.9f5c	20 ce a9	jsr $a9ce			jsr CR
.9f5f	ad 10 03	lda $0310			lda CurrentV		; print the current wordlist.
.9f62					order_print_wid_string:
.9f62	c9 04		cmp #$04			cmp #wid_Root+1		; do we have a string?
.9f64	90 06		bcc $9f6c			bcc _string
.9f66	20 27 b6	jsr $b627			jsr PushZA		; print the WID number
.9f69	4c f9 c9	jmp $c9f9			jmp U_Dot		; JSR/RTS
.9f6c	0a		asl a		_string:	asl		; Get the string based on WID 0 to 3
.9f6d	a8		tay				tay
.9f6e	b9 7a 9f	lda $9f7a,y			lda _wid_Table+0,y
.9f71	48		pha				pha
.9f72	b9 7b 9f	lda $9f7b,y			lda _wid_Table+1,y
.9f75	a8		tay				tay
.9f76	68		pla				pla
.9f77	4c f3 cb	jmp $cbf3			jmp Print_ASCIIZ_YA_no_lf ; Print without a line feed
=53					CL	.var *-(WordListLink+wh_Xt)
=$9f7a					en = *	; remember here
>9f43	35					.byte CL	;wh_CodeLength
.9f7a					_wid_Table:
>9f7a	28 d9					.word str_wid_forth	       ; WID 0: "Forth"
>9f7c	20 d9					.word str_wid_editor	       ; WID 1: "Editor"
>9f7e	15 d9					.word str_wid_asm	       ; WID 2: "Assembler"
>9f80	2f d9					.word str_wid_root	       ; WID 3: "Root"
>9f82	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
>9f87	05					.byte *-L1	;wh_NameLength	length of name
>9f88	c0 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f8a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f8b	08					.byte NN	;wh_Flags	dictionary flags
=40711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f8c	a9 00		lda #$00	Forth:		lda #wid_Forth
.9f8e	8d 2b 03	sta $032b			sta Search_OrderV+0
=5					CL	.var *-(WordListLink+wh_Xt)
=$9f91					en = *	; remember here
>9f8a	05					.byte CL	;wh_CodeLength
.9f91	60		rts				rts
>9f92	44 65 66 69 6e 69 74 69		L1:	.text "Definitions"	;  name of word as a string, ending at wh_NameLastChar
>9f9a	6f 6e 73
>9f9d	0b					.byte *-L1	;wh_NameLength	length of name
>9f9e	07 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fa0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fa1	08					.byte NN	;wh_Flags	dictionary flags
=40733					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9fa2	ad 2b 03	lda $032b	Definitions:	lda Search_OrderV	; Transfer SEARCH_ORDER[0] to
.9fa5	8d 10 03	sta $0310			sta CurrentV		;   byte variable CURRENT.
=6					CL	.var *-(WordListLink+wh_Xt)
=$9fa8					en = *	; remember here
>9fa0	06					.byte CL	;wh_CodeLength
.9fa8	60		rts				rts
>9fa9	57 6f 72 64 4c 69 73 74		L1:	.text "WordList"	;  name of word as a string, ending at wh_NameLastChar
>9fb1	08					.byte *-L1	;wh_NameLength	length of name
>9fb2	1d 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fb4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fb5	08					.byte NN	;wh_Flags	dictionary flags
=40753					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9fb6					WordList:
.9fb6	ad 11 03	lda $0311			lda Num_wordlistsV	; This is a byte variable
.9fb9	c9 0c		cmp #$0c			cmp #max_wordlists	; already at the max?
.9fbb	90 05		bcc $9fc2			bcc +
.9fbd	a9 66		lda #$66			lda #$100+err_wordlist	;   Print an error message
.9fbf	4c c4 b2	jmp $b2c4			jmp ThrowA
.9fc2					+
.9fc2	69 01		adc #$01			adc #1
.9fc4	8d 11 03	sta $0311			sta Num_WordlistsV	; Save it into byte variable #wordlists
.9fc7	4c 27 b6	jmp $b627			jmp PushZA		; and put it on the stack.
=20					CL	.var *-(WordListLink+wh_Xt)
=$9fca					en = *	; remember here
>9fb4	14					.byte CL	;wh_CodeLength
>9fca	53 65 61 72 63 68 2d 57		L1:	.text "Search-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>9fd2	6f 72 64 6c 69 73 74
>9fd9	0f					.byte *-L1	;wh_NameLength	length of name
>9fda	31 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fdc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fdd	18					.byte UF+NN	;wh_Flags	dictionary flags
=40793					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9fde					Search_WordList:
.9fde	20 ad b2	jsr $b2ad			jsr underflow_3
.9fe1	b5 25		lda $25,x			lda DStack+0,x			; Pop wid
.9fe3	e8		inx				inx
.9fe4	e8		inx				inx
.9fe5	48		pha				pha
.9fe6	20 48 bb	jsr $bb48			jsr fina_pattern_prepare ; tmp2 = pseudo-header for pattern name, zeros NOS
.9fe9	68		pla				pla
.9fea	20 5e bb	jsr $bb5e			jsr fina_search_wordlist ; tmp1 = nt of matching word
.9fed	f0 25		beq $a014			beq _fail
.9fef	18		clc				clc
.9ff0	a5 15		lda $15				lda tmp1+0		; NOS = xt
.9ff2	69 85		adc #$85			adc #Wh_xt
.9ff4	95 27		sta $27,x			sta DStack+2,x
.9ff6	a5 16		lda $16				lda tmp1+1
.9ff8	69 00		adc #$00			adc #0
.9ffa	95 28		sta $28,x			sta DStack+3,x
.9ffc	a0 84		ldy #$84			ldy #Wh_Flags		; get flags
.9ffe	b1 15		lda ($15),y			lda (tmp1),y
.a000	29 04		and #$04			and #IM
.a002	d0 07		bne $a00b			bne _immediate		; bit set, we're immediate
.a004	a9 ff		lda #$ff			lda #$FF		; We're not immediate, return -1
.a006	95 25		sta $25,x			sta DStack+0,x
.a008	95 26		sta $26,x			sta DStack+1,x
.a00a	60		rts				rts
.a00b					_immediate:
.a00b	a9 01		lda #$01			lda #1			; We're immediate, return 1
.a00d	95 25		sta $25,x			sta DStack+0,x
.a00f	a9 00		lda #$00			lda #0
.a011	95 26		sta $26,x			sta DStack+1,x
.a013	60		rts				rts
.a014					_fail:
.a014	e8		inx				inx			; Drop u
.a015	e8		inx				inx
.a016	60		rts				rts
=57					CL	.var *-(WordListLink+wh_Xt)
=$a017					en = *	; remember here
>9fdc	39					.byte CL	;wh_CodeLength
>a017	53 65 74 2d 43 75 72 72		L1:	.text "Set-Current"	;  name of word as a string, ending at wh_NameLastChar
>a01f	65 6e 74
>a022	0b					.byte *-L1	;wh_NameLength	length of name
>a023	59 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a025	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a026	08					.byte NN	;wh_Flags	dictionary flags
=40866					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a027	20 39 b2	jsr $b239	Set_Current:	jsr PopA	; pop wid
.a02a	8d 10 03	sta $0310			sta CurrentV	; so only the LSB is used.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a02d					en = *	; remember here
>a025	06					.byte CL	;wh_CodeLength
.a02d	60		rts				rts
>a02e	47 65 74 2d 43 75 72 72		L1:	.text "Get-Current"	;  name of word as a string, ending at wh_NameLastChar
>a036	65 6e 74
>a039	0b					.byte *-L1	;wh_NameLength	length of name
>a03a	a2 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a03c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a03d	08					.byte NN	;wh_Flags	dictionary flags
=40889					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a03e					Get_Current:
.a03e	ad 10 03	lda $0310			lda CurrentV
.a041	4c 27 b6	jmp $b627			jmp PushZA	; CURRENT is a byte variable
=6					CL	.var *-(WordListLink+wh_Xt)
=$a044					en = *	; remember here
>a03c	06					.byte CL	;wh_CodeLength
>a044	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>a04c	72
>a04d	09					.byte *-L1	;wh_NameLength	length of name
>a04e	b9 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a050	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a051	00					.byte 0	;wh_Flags	dictionary flags
=40909					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a052					Set_Order:
.a052	b5 26		lda $26,x			lda DStack+1,x		; Test for -1 TOS
.a054	10 0b		bpl $a061			bpl _start
.a056	a9 00		lda #$00			lda #0
.a058	95 26		sta $26,x			sta DStack+1,x
.a05a	a9 03		lda #$03			lda #wid_Root
.a05c	95 25		sta $25,x			sta DStack+0,x
.a05e	20 40 b6	jsr $b640			jsr One		; Count is 1.
.a061					_start:
.a061	b5 25		lda $25,x			lda DStack+0,x
.a063	99 2a 03	sta $032a,y			sta Num_orderV,y	; #ORDER is a byte variable.
.a066	85 15		sta $15				sta tmp1	; Save a copy for zero check and looping.
.a068	e8		inx				inx		; Drop the count off the data stack.
.a069	e8		inx				inx
.a06a	a5 15		lda $15				lda tmp1
.a06c	f0 0d		beq $a07b			beq _done	; If zero, there are no wordlists.
.a06e	a0 00		ldy #$00			ldy #0
.a070					_loop:
.a070	20 39 b2	jsr $b239			jsr PopA		; The search order is a byte array
.a073	99 2b 03	sta $032b,y			sta Search_OrderV,y	; so only save the LSB
.a076	c8		iny				iny
.a077	c6 15		dec $15				dec tmp1
.a079	d0 f5		bne $a070			bne _loop
.a07b					_done:
=41					CL	.var *-(WordListLink+wh_Xt)
=$a07b					en = *	; remember here
>a050	29					.byte CL	;wh_CodeLength
.a07b	60		rts				rts
>a07c	47 65 74 2d 4f 72 64 65		L1:	.text "Get-Order"	;  name of word as a string, ending at wh_NameLastChar
>a084	72
>a085	09					.byte *-L1	;wh_NameLength	length of name
>a086	cd 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a088	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a089	08					.byte NN	;wh_Flags	dictionary flags
=40965					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a08a					Get_Order:
.a08a	ac 2a 03	ldy $032a			ldy Num_OrderV	; Get #ORDER - the number of wordlists in the search order.
.a08d	f0 09		beq $a098			beq _done	; If zero, there are no wordlists.
.a08f					_loop:
.a08f	b9 2a 03	lda $032a,y			lda Search_OrderV-1,y	; Put that wordlist id on the stack.
.a092	20 27 b6	jsr $b627			jsr PushZA
.a095	88		dey				dey
.a096	d0 f7		bne $a08f			bne _loop		; See if that was the last one to process (first in the list).
.a098					_done:
.a098	ad 2a 03	lda $032a			lda Num_OrderV		; Put the number of items on the stack.
.a09b	4c 27 b6	jmp $b627			jmp PushZA
=20					CL	.var *-(WordListLink+wh_Xt)
=$a09e					en = *	; remember here
>a088	14					.byte CL	;wh_CodeLength
>0338					BuffBlockNumV: .word ?	; Block number current in BlockBuffer
>033a					BuffStatusV: .word ?	; Status of BlockBuffer (bit 0 = used, bit 1 = dirty)
>033c					BlockBuffer: .fill 1024
>073c					BlockReadV: .word ?	; Vector to block reading routine
>073e					BlockWriteV: .word ?	; Vector to block writing routine
.a09e					BlockInit:
.a09e	a9 00		lda #$00			lda #0
.a0a0	8d 3a 03	sta $033a			sta BuffStatusV
.a0a3	a9 00		lda #$00			lda #<Block_Word_Error
.a0a5	a0 a2		ldy #$a2			ldy #>Block_Word_Error
.a0a7	8d 3c 07	sta $073c			sta BlockReadV+0
.a0aa	8c 3d 07	sty $073d			sty BlockReadV+1
.a0ad	8d 3e 07	sta $073e			sta BlockWriteV+0
.a0b0	8c 3f 07	sty $073f			sty BlockWriteV+1
.a0b3	60		rts				rts
>0740					RamDriveV: .word ?
>a0b4	42 6c 6f 63 6b 2d 52 61		L1:	.text "Block-RamDrive-Init"	;  name of word as a string, ending at wh_NameLastChar
>a0bc	6d 44 72 69 76 65 2d 49 6e 69 74
>a0c7	13					.byte *-L1	;wh_NameLength	length of name
>a0c8	05 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0ca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0cb	18					.byte UF+NN	;wh_Flags	dictionary flags
=41031					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0cc					Block_RamDrive_Init:
.a0cc	a9 0a		lda #$0a			lda #10			; Calculate how many bytes are needed for numblocks blocks
.a0ce	20 27 b6	jsr $b627			jsr PushZA
.a0d1	20 30 c9	jsr $c930			jsr LShift
.a0d4	20 18 c8	jsr $c818			jsr Here		; ( size addr )
.a0d7	8d 40 07	sta $0740			sta RamDriveV+0
.a0da	8c 41 07	sty $0741			sty RamDriveV+1
.a0dd	20 21 cd	jsr $cd21			jsr Over
.a0e0	20 f1 be	jsr $bef1			jsr Allot		; Create ramdrive buffer
.a0e3	20 68 cd	jsr $cd68			jsr Swap		; blank the buffer
.a0e6	20 67 bc	jsr $bc67			jsr Blank
.a0e9	a9 fe		lda #$fe			lda #<_read		; set block read vector
.a0eb	a0 a0		ldy #$a0			ldy #>_read
.a0ed	8d 3c 07	sta $073c			sta BlockReadV+0
.a0f0	8c 3d 07	sty $073d			sty BlockReadV+1
.a0f3	a9 0e		lda #$0e			lda #<_write		; set block write vector
.a0f5	a0 a1		ldy #$a1			ldy #>_write
.a0f7	8d 3e 07	sta $073e			sta BlockWriteV+0
.a0fa	8c 3f 07	sty $073f			sty BlockWriteV+1
.a0fd	60		rts				rts
=50					CL	.var *-(WordListLink+wh_Xt)
=$a0fe					en = *	; remember here
>a0ca	32					.byte CL	;wh_CodeLength
.a0fe					_read:
.a0fe	20 1b a1	jsr $a11b			jsr _addr
.a101	20 68 cd	jsr $cd68			jsr Swap
.a104	a9 00		lda #$00			lda #0
.a106	a0 04		ldy #$04			ldy #>1024
.a108	20 e5 b5	jsr $b5e5			jsr PushYA
.a10b	4c e3 ab	jmp $abe3			jmp Move
.a10e					_write:
.a10e	20 1b a1	jsr $a11b			jsr _addr
.a111	a9 00		lda #$00			lda #0
.a113	a0 04		ldy #$04			ldy #>1024
.a115	20 e5 b5	jsr $b5e5			jsr PushYA
.a118	4c e3 ab	jmp $abe3			jmp Move
.a11b					_addr:
.a11b	a9 0a		lda #$0a			lda #10
.a11d	20 27 b6	jsr $b627			jsr PushZA
.a120	20 30 c9	jsr $c930			jsr LShift
.a123	20 36 a1	jsr $a136			jsr RamDrive
.a126	4c 94 c9	jmp $c994			jmp Plus
>a129	52 61 6d 44 72 69 76 65		L1:	.text "RamDrive"	;  name of word as a string, ending at wh_NameLastChar
>a131	08					.byte *-L1	;wh_NameLength	length of name
>a132	47 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a134	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a135	08					.byte NN	;wh_Flags	dictionary flags
=41137					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a136	ad 40 07	lda $0740	RamDrive:	lda RamDriveV+0
.a139	ac 41 07	ldy $0741			ldy RamDriveV+1
.a13c	4c e5 b5	jmp $b5e5			jmp PushYA
=9					CL	.var *-(WordListLink+wh_Xt)
=$a13f					en = *	; remember here
>a134	09					.byte CL	;wh_CodeLength
>a13f	42 75 66 66 53 74 61 74		L1:	.text "BuffStatus"	;  name of word as a string, ending at wh_NameLastChar
>a147	75 73
>a149	0a					.byte *-L1	;wh_NameLength	length of name
>a14a	b1 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a14c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a14d	08					.byte NN	;wh_Flags	dictionary flags
=41161					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a14e	a9 3a		lda #$3a	BuffStatus:	lda #<BuffStatusV
.a150	a0 03		ldy #$03			ldy #>BuffStatusV
.a152	4c e5 b5	jmp $b5e5			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a155					en = *	; remember here
>a14c	07					.byte CL	;wh_CodeLength
>a155	42 75 66 66 42 6c 6f 63		L1:	.text "BuffBlockNum"	;  name of word as a string, ending at wh_NameLastChar
>a15d	6b 4e 75 6d
>a161	0c					.byte *-L1	;wh_NameLength	length of name
>a162	c9 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a164	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a165	08					.byte NN	;wh_Flags	dictionary flags
=41185					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a166	a9 38		lda #$38	BuffBlockNum:	lda #<BuffBlockNumV
.a168	a0 03		ldy #$03			ldy #>BuffBlockNumV
.a16a	4c e5 b5	jmp $b5e5			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a16d					en = *	; remember here
>a164	07					.byte CL	;wh_CodeLength
>a16d	42 6c 6b 42 75 66 66 65		L1:	.text "BlkBuffer"	;  name of word as a string, ending at wh_NameLastChar
>a175	72
>a176	09					.byte *-L1	;wh_NameLength	length of name
>a177	e1 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a179	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a17a	08					.byte NN	;wh_Flags	dictionary flags
=41206					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a17b	a9 3c		lda #$3c	BlkBuffer:	lda #<BlockBuffer
.a17d	a0 03		ldy #$03			ldy #>BlockBuffer
.a17f	4c e5 b5	jmp $b5e5			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a182					en = *	; remember here
>a179	07					.byte CL	;wh_CodeLength
>a182	53 63 72			L1:	.text "Scr"	;  name of word as a string, ending at wh_NameLastChar
>a185	03					.byte *-L1	;wh_NameLength	length of name
>a186	f6 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a188	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a189	08					.byte NN	;wh_Flags	dictionary flags
=41221					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a18a	a9 0e		lda #$0e	Scr:		lda #<ScrV
.a18c	a0 03		ldy #$03			ldy #>ScrV
.a18e	4c e5 b5	jmp $b5e5			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a191					en = *	; remember here
>a188	07					.byte CL	;wh_CodeLength
>a191	42 6c 6b			L1:	.text "Blk"	;  name of word as a string, ending at wh_NameLastChar
>a194	03					.byte *-L1	;wh_NameLength	length of name
>a195	05 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a197	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a198	08					.byte NN	;wh_Flags	dictionary flags
=41236					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a199	a9 0c		lda #$0c	Blk:		lda #<BlkV
.a19b	a0 03		ldy #$03			ldy #>BlkV
.a19d	4c e5 b5	jmp $b5e5			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a1a0					en = *	; remember here
>a197	07					.byte CL	;wh_CodeLength
>a1a0	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write"	;  name of word as a string, ending at wh_NameLastChar
>a1a8	69 74 65
>a1ab	0b					.byte *-L1	;wh_NameLength	length of name
>a1ac	14 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1ae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1af	08					.byte NN	;wh_Flags	dictionary flags
=41259					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1b0	6c 3e 07	jmp ($073e)	Block_Write:	jmp (BlockWriteV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-(WordListLink+wh_Xt)
=$a1b3					en = *	; remember here
>a1ae	03					.byte CL	;wh_CodeLength
>a1b3	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a1bb	69 74 65 2d 56 65 63 74 6f 72
>a1c5	12					.byte *-L1	;wh_NameLength	length of name
>a1c6	2b a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1c8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1c9	08					.byte NN	;wh_Flags	dictionary flags
=41285					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1ca					Block_Write_Vector:
.a1ca	a9 3e		lda #$3e			lda #<BlockWriteV	; Get the BLOCK-WRITE-VECTOR address
.a1cc	a0 07		ldy #$07			ldy #>BlockWriteV
.a1ce	4c e5 b5	jmp $b5e5			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a1d1					en = *	; remember here
>a1c8	07					.byte CL	;wh_CodeLength
>a1d1	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read"	;  name of word as a string, ending at wh_NameLastChar
>a1d9	61 64
>a1db	0a					.byte *-L1	;wh_NameLength	length of name
>a1dc	45 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1df	08					.byte NN	;wh_Flags	dictionary flags
=41307					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1e0	6c 3c 07	jmp ($073c)	Block_Read:	jmp (BlockReadV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-(WordListLink+wh_Xt)
=$a1e3					en = *	; remember here
>a1de	03					.byte CL	;wh_CodeLength
>a1e3	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a1eb	61 64 2d 56 65 63 74 6f 72
>a1f4	11					.byte *-L1	;wh_NameLength	length of name
>a1f5	5b a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1f8	08					.byte NN	;wh_Flags	dictionary flags
=41332					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1f9					Block_Read_Vector:
.a1f9	a9 3c		lda #$3c			lda #<BlockReadV	; Get the BLOCK-READ-VECTOR address
.a1fb	a0 07		ldy #$07			ldy #>BlockReadV
.a1fd	4c e5 b5	jmp $b5e5			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a200					en = *	; remember here
>a1f7	07					.byte CL	;wh_CodeLength
.a200					Block_Word_Error:
.a200	a9 67		lda #$67			lda #$100+err_BlockWords
.a202	20 c4 b2	jsr $b2c4			jsr ThrowA
>a205	53 61 76 65 2d 42 75 66		L1:	.text "Save-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a20d	66 65 72 73
>a211	0c					.byte *-L1	;wh_NameLength	length of name
>a212	74 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a214	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a215	00					.byte 0	;wh_Flags	dictionary flags
=41361					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a216					Save_Buffers:
.a216	ad 3a 03	lda $033a			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a219	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a21b	d0 11		bne $a22e			bne _done	; Either not used or not dirty = done!
.a21d	20 7b a1	jsr $a17b			jsr BlkBuffer
.a220	20 66 a1	jsr $a166			jsr BuffBlockNum
.a223	20 b4 cc	jsr $ccb4			jsr Fetch
.a226	20 b0 a1	jsr $a1b0			jsr Block_Write
.a229	a9 01		lda #$01			lda #1
.a22b	8d 3a 03	sta $033a			sta BuffStatusV+0
.a22e					_done:
=24					CL	.var *-(WordListLink+wh_Xt)
=$a22e					en = *	; remember here
>a214	18					.byte CL	;wh_CodeLength
.a22e	60		rts				rts
>a22f	42 6c 6f 63 6b			L1:	.text "Block"	;  name of word as a string, ending at wh_NameLastChar
>a234	05					.byte *-L1	;wh_NameLength	length of name
>a235	91 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a237	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a238	00					.byte 0	;wh_Flags	dictionary flags
=41396					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a239					Block:
.a239	ad 38 03	lda $0338			lda BuffBlockNumV+0	; check the LSB
.a23c	d5 25		cmp $25,x			cmp DStack+0,x
.a23e	d0 0e		bne $a24e			bne _not_in_buffer
.a240	ad 39 03	lda $0339			lda BuffBlockNumV+1	; check the MSB
.a243	d5 26		cmp $26,x			cmp DStack+1,x
.a245	d0 07		bne $a24e			bne _not_in_buffer
.a247	ad 3a 03	lda $033a			lda BuffStatusV+0
.a24a	29 01		and #$01			and #1		; Check the in-use flag (bit 0)
.a24c	d0 2d		bne $a27b			bne _done	; It's already in the buffer and in use.
.a24e					_not_in_buffer:
.a24e	ad 3a 03	lda $033a			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a251	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a253	d0 0c		bne $a261			bne _buffer_available ; Unused or not dirty = available
.a255	20 7b a1	jsr $a17b			jsr BlkBuffer
.a258	20 66 a1	jsr $a166			jsr BuffBlockNum
.a25b	20 b4 cc	jsr $ccb4			jsr Fetch
.a25e	20 b0 a1	jsr $a1b0			jsr Block_Write
.a261					_buffer_available:
.a261	b5 25		lda $25,x			lda DStack+0,x
.a263	8d 38 03	sta $0338			sta BuffBlockNumV+0
.a266	b5 26		lda $26,x			lda DStack+1,x
.a268	8d 39 03	sta $0339			sta BuffBlockNumV+1
.a26b	20 7b a1	jsr $a17b			jsr BlkBuffer
.a26e	20 68 cd	jsr $cd68			jsr Swap
.a271	20 e0 a1	jsr $a1e0			jsr Block_Read
.a274	a9 01		lda #$01			lda #1
.a276	8d 3a 03	sta $033a			sta BuffStatusV+0
.a279	ca		dex				dex
.a27a	ca		dex				dex
.a27b					_done:
.a27b	a9 3c		lda #$3c			lda #<BlockBuffer
.a27d	95 25		sta $25,x			sta DStack+0,x
.a27f	a9 03		lda #$03			lda #>BlockBuffer
.a281	95 26		sta $26,x			sta DStack+1,x
=74					CL	.var *-(WordListLink+wh_Xt)
=$a283					en = *	; remember here
>a237	4a					.byte CL	;wh_CodeLength
.a283	60		rts				rts
>a284	55 70 64 61 74 65		L1:	.text "Update"	;  name of word as a string, ending at wh_NameLastChar
>a28a	06					.byte *-L1	;wh_NameLength	length of name
>a28b	b4 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a28d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a28e	00					.byte 0	;wh_Flags	dictionary flags
=41482					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a28f					Update:
.a28f	ad 3a 03	lda $033a			lda BuffStatusV+0
.a292	09 02		ora #$02			ora #2		; Turn on dirty flag (bit 2)
.a294	8d 3a 03	sta $033a			sta BuffStatusV+0
=8					CL	.var *-(WordListLink+wh_Xt)
=$a297					en = *	; remember here
>a28d	08					.byte CL	;wh_CodeLength
.a297	60		rts				rts
>a298	42 75 66 66 65 72		L1:	.text "Buffer"	;  name of word as a string, ending at wh_NameLastChar
>a29e	06					.byte *-L1	;wh_NameLength	length of name
>a29f	0a a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a2a1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a2a2	00					.byte 0	;wh_Flags	dictionary flags
=41502					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2a3					Buffer:
.a2a3	ad 3a 03	lda $033a			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a2a6	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a2a8	d0 0c		bne $a2b6			bne _buffer_available ; Unused or not dirty = available
.a2aa	20 7b a1	jsr $a17b			jsr BlkBuffer
.a2ad	20 66 a1	jsr $a166			jsr BuffBlockNum
.a2b0	20 b4 cc	jsr $ccb4			jsr Fetch
.a2b3	20 b0 a1	jsr $a1b0			jsr Block_Write
.a2b6					_buffer_available:
.a2b6	b5 25		lda $25,x			lda DStack+0,x
.a2b8	8d 38 03	sta $0338			sta BuffBlockNumV+0
.a2bb	b5 26		lda $26,x			lda DStack+1,x
.a2bd	8d 39 03	sta $0339			sta BuffBlockNumV+1
.a2c0	a9 01		lda #$01			lda #1
.a2c2	8d 3a 03	sta $033a			sta BuffStatusV+0
.a2c5					_done:
.a2c5	a9 3c		lda #$3c			lda #<BlockBuffer
.a2c7	95 25		sta $25,x			sta DStack+0,x
.a2c9	a9 03		lda #$03			lda #>BlockBuffer
.a2cb	95 26		sta $26,x			sta DStack+1,x
=42					CL	.var *-(WordListLink+wh_Xt)
=$a2cd					en = *	; remember here
>a2a1	2a					.byte CL	;wh_CodeLength
.a2cd	60		rts				rts
>a2ce	45 6d 70 74 79 2d 42 75		L1:	.text "Empty-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a2d6	66 66 65 72 73
>a2db	0d					.byte *-L1	;wh_NameLength	length of name
>a2dc	1e a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a2de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a2df	08					.byte NN	;wh_Flags	dictionary flags
=41563					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2e0	a9 00		lda #$00	Empty_Buffers:	lda #0		; Set the buffer status to empty.
.a2e2	8d 3a 03	sta $033a			sta BuffStatusV+0 ; Only LSB is used.
=5					CL	.var *-(WordListLink+wh_Xt)
=$a2e5					en = *	; remember here
>a2de	05					.byte CL	;wh_CodeLength
.a2e5	60		rts				rts
>a2e6	46 6c 75 73 68			L1:	.text "Flush"	;  name of word as a string, ending at wh_NameLastChar
>a2eb	05					.byte *-L1	;wh_NameLength	length of name
>a2ec	5b a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a2ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a2ef	08					.byte NN	;wh_Flags	dictionary flags
=41579					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2f0	20 16 a2	jsr $a216	Flush:		jsr Save_Buffers
.a2f3	4c e0 a2	jmp $a2e0			jmp Empty_Buffers
=6					CL	.var *-(WordListLink+wh_Xt)
=$a2f6					en = *	; remember here
>a2ee	06					.byte CL	;wh_CodeLength
>a2f6	4c 6f 61 64			L1:	.text "Load"	;  name of word as a string, ending at wh_NameLastChar
>a2fa	04					.byte *-L1	;wh_NameLength	length of name
>a2fb	6b a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a2fd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a2fe	10					.byte UF	;wh_Flags	dictionary flags
=41594					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2ff					Load:
.a2ff	20 93 b2	jsr $b293			jsr underflow_1
.a302	ad 0d 03	lda $030d			lda BlkV+1	; Save the current value of BLK on the return stack.
.a305	48		pha				pha
.a306	ad 0c 03	lda $030c			lda BlkV+0
.a309	48		pha				pha
.a30a	b5 25		lda $25,x			lda DStack+0,x		; Set BLK to the given block/screen number.
.a30c	8d 0c 03	sta $030c			sta BlkV+0
.a30f	b5 26		lda $26,x			lda DStack+1,x
.a311	8d 0d 03	sta $030d			sta BlkV+1
.a314	20 39 a2	jsr $a239			jsr Block		; Load that block into a buffer
.a317	a9 00		lda #$00			lda #<1024		; screen length.
.a319	a0 04		ldy #$04			ldy #>1024
.a31b	20 e5 b5	jsr $b5e5			jsr PushYA
.a31e	20 39 ae	jsr $ae39			jsr load_evaluate
.a321	68		pla				pla
.a322	ad 0c 03	lda $030c			lda BlkV+0
.a325	68		pla				pla
.a326	8d 0d 03	sta $030d			sta BlkV+1
.a329	0d 0c 03	ora $030c			ora BlkV+0
.a32c	f0 0e		beq $a33c			beq _done
.a32e	ad 0c 03	lda $030c			lda BlkV+0
.a331	ac 0d 03	ldy $030d			ldy BlkV+1
.a334	20 e5 b5	jsr $b5e5			jsr PushYA
.a337	20 39 a2	jsr $a239			jsr Block
.a33a	e8		inx				inx		; Drop the buffer address.
.a33b	e8		inx				inx
.a33c					_done:
=61					CL	.var *-(WordListLink+wh_Xt)
=$a33c					en = *	; remember here
>a2fd	3d					.byte CL	;wh_CodeLength
.a33c	60		rts				rts
>a33d	54 68 72 75			L1:	.text "Thru"	;  name of word as a string, ending at wh_NameLastChar
>a341	04					.byte *-L1	;wh_NameLength	length of name
>a342	7a a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a344	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a345	18					.byte UF+NN	;wh_Flags	dictionary flags
=41665					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a346					Thru:
.a346	20 a8 b2	jsr $b2a8			jsr underflow_2
.a349	20 cf cc	jsr $cccf			jsr To_R
.a34c					_loop:
.a34c	b5 26		lda $26,x			lda DStack+1,x		; copy to return stack
.a34e	48		pha				pha
.a34f	b5 25		lda $25,x			lda DStack+0,x
.a351	48		pha				pha
.a352	20 ff a2	jsr $a2ff			jsr Load		; Load this screen.
.a355	20 ee cc	jsr $ccee			jsr R_From		; Get the screen # we just loaded.
.a358	20 4c c8	jsr $c84c			jsr One_plus		; increment
.a35b	86 15		stx $15				stx tmp1
.a35d	ba		tsx				tsx
.a35e	8a		txa				txa
.a35f	a8		tay				tay
.a360	a6 15		ldx $15				ldx tmp1
.a362	b9 01 01	lda $0101,y			lda RStack+1,y
.a365	d5 25		cmp $25,x			cmp DStack+0,x
.a367	b9 02 01	lda $0102,y			lda RStack+2,y
.a36a	f5 26		sbc $26,x			sbc DStack+1,x
.a36c	b0 de		bcs $a34c			bcs _loop
.a36e	e8		inx				inx			; Drop index
.a36f	e8		inx				inx
.a370	68		pla				pla			; RDrop limit
.a371	68		pla				pla
=44					CL	.var *-(WordListLink+wh_Xt)
=$a372					en = *	; remember here
>a344	2c					.byte CL	;wh_CodeLength
.a372	60		rts				rts
>a373	4c 69 73 74			L1:	.text "List"	;  name of word as a string, ending at wh_NameLastChar
>a377	04					.byte *-L1	;wh_NameLength	length of name
>a378	c1 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a37a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a37b	18					.byte UF+NN	;wh_Flags	dictionary flags
=41719					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a37c					List:
.a37c	20 93 b2	jsr $b293			jsr underflow_1
.a37f	20 8a a1	jsr $a18a			jsr Scr
.a382	20 97 cc	jsr $cc97			jsr Store
.a385	4c db d7	jmp $d7db			jmp Editor_l
=12					CL	.var *-(WordListLink+wh_Xt)
=$a388					en = *	; remember here
>a37a	0c					.byte CL	;wh_CodeLength
>a388	44 65 66 65 72			L1:	.text "Defer"	;  name of word as a string, ending at wh_NameLastChar
>a38d	05					.byte *-L1	;wh_NameLength	length of name
>a38e	f7 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a390	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a391	08					.byte NN	;wh_Flags	dictionary flags
=41741					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a392					Defer:
.a392	20 4b bf	jsr $bf4b			jsr Header_Comma	; compile word header
.a395	a9 9f		lda #$9f			lda #<_undefined	; compile "jmp _undefined"
.a397	a0 a3		ldy #$a3			ldy #>_undefined
.a399	20 3f cb	jsr $cb3f			jsr Jmp_Comma_YA
.a39c	4c 36 ba	jmp $ba36			jmp adjust_z	; adjust header to correct length
=13					CL	.var *-(WordListLink+wh_Xt)
=$a39f					en = *	; remember here
>a390	0d					.byte CL	;wh_CodeLength
.a39f					_undefined:
.a39f	a9 6a		lda #$6a			lda #$100+err_Defer	; throw exception
.a3a1	4c c4 b2	jmp $b2c4			jmp ThrowA
>a3a4	44 65 66 65 72 40		L1:	.text "Defer@"	;  name of word as a string, ending at wh_NameLastChar
>a3aa	06					.byte *-L1	;wh_NameLength	length of name
>a3ab	0d a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3ad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3ae	08					.byte NN	;wh_Flags	dictionary flags
=41770					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3af					Defer_Fetch:
.a3af	20 4c c8	jsr $c84c			jsr One_plus
.a3b2	4c b4 cc	jmp $ccb4			jmp Fetch
=6					CL	.var *-(WordListLink+wh_Xt)
=$a3b5					en = *	; remember here
>a3ad	06					.byte CL	;wh_CodeLength
>a3b5	44 65 66 65 72 21		L1:	.text "Defer!"	;  name of word as a string, ending at wh_NameLastChar
>a3bb	06					.byte *-L1	;wh_NameLength	length of name
>a3bc	2a a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3bf	08					.byte NN	;wh_Flags	dictionary flags
=41787					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3c0					Defer_Store:
.a3c0	20 4c c8	jsr $c84c			jsr One_plus
.a3c3	4c 97 cc	jmp $cc97			jmp Store
=6					CL	.var *-(WordListLink+wh_Xt)
=$a3c6					en = *	; remember here
>a3be	06					.byte CL	;wh_CodeLength
>a3c6	49 73				L1:	.text "Is"	;  name of word as a string, ending at wh_NameLastChar
>a3c8	02					.byte *-L1	;wh_NameLength	length of name
>a3c9	3b a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3cb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3cc	0c					.byte IM+NN	;wh_Flags	dictionary flags
=41800					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3cd					Is:
.a3cd	a5 0a		lda $0a				lda state		; Check STATE
.a3cf	f0 0a		beq $a3db			beq _interpreting
.a3d1					_compiling:
.a3d1	20 ad ba	jsr $baad			jsr Bracket_Tick	; compile the xt of the next word as a literal.
.a3d4	a0 a3		ldy #$a3			ldy #>Defer_Store	; Postpone DEFER! by compiling a JSR to it.
.a3d6	a9 c0		lda #$c0			lda #<Defer_Store
.a3d8	4c 28 cb	jmp $cb28			jmp Jsr_Comma_YA
.a3db					_interpreting:
.a3db	20 99 ba	jsr $ba99			jsr Tick
.a3de	4c c0 a3	jmp $a3c0			jmp Defer_Store
=20					CL	.var *-(WordListLink+wh_Xt)
=$a3e1					en = *	; remember here
>a3cb	14					.byte CL	;wh_CodeLength
>a3e1	41 63 74 69 6f 6e 2d 4f		L1:	.text "Action-Of"	;  name of word as a string, ending at wh_NameLastChar
>a3e9	66
>a3ea	09					.byte *-L1	;wh_NameLength	length of name
>a3eb	48 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3ed	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3ee	0c					.byte IM+NN	;wh_Flags	dictionary flags
=41834					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3ef					Action_Of:
.a3ef	a5 0a		lda $0a				lda state		; Check STATE
.a3f1	f0 0a		beq $a3fd			beq _interpreting
.a3f3					_compiling:
.a3f3	20 ad ba	jsr $baad			jsr Bracket_Tick	; compile the xt of the next word as a literal.
.a3f6	a0 a3		ldy #$a3			ldy #>Defer_Fetch	; Postpone DEFER@ by compiling a JSR to it.
.a3f8	a9 af		lda #$af			lda #<Defer_Fetch
.a3fa	4c 28 cb	jmp $cb28			jmp Jsr_Comma_YA
.a3fd					_interpreting:
.a3fd	20 99 ba	jsr $ba99			jsr Tick
.a400	4c af a3	jmp $a3af			jmp Defer_Fetch
=20					CL	.var *-(WordListLink+wh_Xt)
=$a403					en = *	; remember here
>a3ed	14					.byte CL	;wh_CodeLength
>a403	55 73 65 72 41 64 64 72		L1:	.text "UserAddr"	;  name of word as a string, ending at wh_NameLastChar
>a40b	08					.byte *-L1	;wh_NameLength	length of name
>a40c	6a a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a40e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a40f	08					.byte NN	;wh_Flags	dictionary flags
=41867					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a410	a9 ff		lda #$ff	UserAddr:	lda #<User0
.a412	a0 02		ldy #$02			ldy #>User0
.a414	4c e5 b5	jmp $b5e5			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a417					en = *	; remember here
>a40e	07					.byte CL	;wh_CodeLength
>a417	42 75 66 66 65 72 3a		L1:	.text "Buffer:"	;  name of word as a string, ending at wh_NameLastChar
>a41e	07					.byte *-L1	;wh_NameLength	length of name
>a41f	8b a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a421	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a422	08					.byte NN	;wh_Flags	dictionary flags
=41886					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a423	20 d2 bf	jsr $bfd2	Buffer_Colon:	jsr Create
.a426	4c f1 be	jmp $bef1			jmp Allot
=6					CL	.var *-(WordListLink+wh_Xt)
=$a429					en = *	; remember here
>a421	06					.byte CL	;wh_CodeLength
>a429	43 61 73 65			L1:	.text "Case"	;  name of word as a string, ending at wh_NameLastChar
>a42d	04					.byte *-L1	;wh_NameLength	length of name
>a42e	9e a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a430	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a431	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=41901					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a432					Case:
.a432	4c 36 b6	jmp $b636			jmp Zero	; init jmp fixup chain
=3					CL	.var *-(WordListLink+wh_Xt)
=$a435					en = *	; remember here
>a430	03					.byte CL	;wh_CodeLength
>a435	45 6e 64 43 61 73 65		L1:	.text "EndCase"	;  name of word as a string, ending at wh_NameLastChar
>a43c	07					.byte *-L1	;wh_NameLength	length of name
>a43d	ad a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a43f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a440	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=41916					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a441					EndCase:
.a441	20 17 cb	jsr $cb17			jsr Drop_Comma
.a444					_loop:
.a444	b5 26		lda $26,x			lda DStack+1,x	; while addr fixup entries left
.a446	f0 06		beq $a44e			beq _done
.a448	20 cb a4	jsr $a4cb			jsr Then	;   fixup another one
.a44b	4c 44 a4	jmp $a444			jmp _loop
.a44e					_done:
.a44e	e8		inx				inx		; Drop the 0
.a44f	e8		inx				inx
=15					CL	.var *-(WordListLink+wh_Xt)
=$a450					en = *	; remember here
>a43f	0f					.byte CL	;wh_CodeLength
.a450	60		rts				rts
>a451	4f 66				L1:	.text "Of"	;  name of word as a string, ending at wh_NameLastChar
>a453	02					.byte *-L1	;wh_NameLength	length of name
>a454	bc a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a456	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a457	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=41939					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a458					Of:
.a458	a0 a4		ldy #$a4			ldy #>OfX		; Check if value is equal to this case.
.a45a	a9 6d		lda #$6d			lda #<OfX
.a45c	20 28 cb	jsr $cb28			jsr Jsr_Comma_YA
.a45f	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a461	20 e9 ca	jsr $cae9			jsr C_Comma_A
.a464	20 18 c8	jsr $c818			jsr Here		; Put the origination address on the stack for else/then
.a467	20 36 b6	jsr $b636			jsr Zero
.a46a	4c 00 cb	jmp $cb00			jmp Comma
=21					CL	.var *-(WordListLink+wh_Xt)
=$a46d					en = *	; remember here
>a456	15					.byte CL	;wh_CodeLength
.a46d					OfX:
.a46d	b5 25		lda $25,x			lda DStack+0,x	; compare x1 with x2
.a46f	d5 27		cmp $27,x			cmp DStack+2,x
.a471	d0 0a		bne $a47d			bne _NotEq
.a473	b5 26		lda $26,x			lda DStack+1,x
.a475	d5 28		cmp $28,x			cmp DStack+3,x
.a477	d0 04		bne $a47d			bne _NotEq
.a479	e8		inx				inx		; Drop x2
.a47a	e8		inx				inx
.a47b	d0 35		bne $a4b2			bne zbranch_run2 ; Drop x1 & return to after the jmp abs
.a47d	e8		inx		_NotEq:		inx		; Drop x2
.a47e	e8		inx				inx
.a47f	60		rts				rts		; return to the jmp abs to next test
>a480	45 6e 64 4f 66			L1:	.text "EndOf"	;  name of word as a string, ending at wh_NameLastChar
>a485	05					.byte *-L1	;wh_NameLength	length of name
>a486	d3 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a488	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a489	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=41989					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a48a					EndOf:
.a48a	4c dd a4	jmp $a4dd			jmp Else
=3					CL	.var *-(WordListLink+wh_Xt)
=$a48d					en = *	; remember here
>a488	03					.byte CL	;wh_CodeLength
>a48d	49 66				L1:	.text "If"	;  name of word as a string, ending at wh_NameLastChar
>a48f	02					.byte *-L1	;wh_NameLength	length of name
>a490	05 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a492	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a493	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=41999					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a494					If:
.a494	20 a5 a4	jsr $a4a5			jsr zbranch_jsr_comma	; Compile a 0BRANCH
.a497					zbranch_jmp0_comma:
.a497	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a499	20 e9 ca	jsr $cae9			jsr C_Comma_A
.a49c	20 18 c8	jsr $c818			jsr Here		; save ptr to address for else/then
.a49f	a9 00		lda #$00			lda #0			; Stuff zero in for the branch address right now.
.a4a1	a8		tay				tay			; THEN or ELSE will fix it later.
.a4a2	4c 03 cb	jmp $cb03			jmp Comma_YA
=17					CL	.var *-(WordListLink+wh_Xt)
=$a4a5					en = *	; remember here
>a492	11					.byte CL	;wh_CodeLength
=$cb3c					zbranch_jmp_comma = Jmp_Comma		; compile jmp abs
.a4a5					zbranch_jsr_comma:
.a4a5	a0 a4		ldy #$a4			ldy #>_runtime
.a4a7	a9 ac		lda #$ac			lda #<_runtime
.a4a9	4c 28 cb	jmp $cb28			jmp Jsr_Comma_YA
.a4ac					_runtime:
.a4ac	b5 25		lda $25,x			lda DStack+0,x		;flag is false?
.a4ae	15 26		ora $26,x			ora DStack+1,x
.a4b0	f0 0d		beq $a4bf			beq zbranch_run_done
.a4b2	18		clc		zbranch_run2:	clc			; move RTS addr over the next jmp abs.
.a4b3	68		pla				pla
.a4b4	69 03		adc #$03			adc #3
.a4b6	90 06		bcc $a4be			bcc +
.a4b8	a8		tay				tay
.a4b9	68		pla				pla
.a4ba	69 00		adc #$00			adc #0
.a4bc	48		pha				pha
.a4bd	98		tya				tya
.a4be	48		pha		+		pha
.a4bf					zbranch_run_done:
.a4bf	e8		inx				inx			; Drop f
.a4c0	e8		inx				inx
.a4c1	60		rts				rts
>a4c2	54 68 65 6e			L1:	.text "Then"	;  name of word as a string, ending at wh_NameLastChar
>a4c6	04					.byte *-L1	;wh_NameLength	length of name
>a4c7	0f a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4c9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4ca	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42054					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4cb					Then:
.a4cb	20 18 c8	jsr $c818			jsr Here
.a4ce	20 68 cd	jsr $cd68			jsr Swap
.a4d1	4c 97 cc	jmp $cc97			jmp Store
=9					CL	.var *-(WordListLink+wh_Xt)
=$a4d4					en = *	; remember here
>a4c9	09					.byte CL	;wh_CodeLength
>a4d4	45 6c 73 65			L1:	.text "Else"	;  name of word as a string, ending at wh_NameLastChar
>a4d8	04					.byte *-L1	;wh_NameLength	length of name
>a4d9	46 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4dc	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42072					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4dd					Else:
.a4dd	20 97 a4	jsr $a497			jsr zbranch_jmp0_comma	; compile jmp 0, push addr of addr
.a4e0	20 18 c8	jsr $c818			jsr Here
.a4e3	20 4e cc	jsr $cc4e			jsr Rot
.a4e6	4c 97 cc	jmp $cc97			jmp Store
=12					CL	.var *-(WordListLink+wh_Xt)
=$a4e9					en = *	; remember here
>a4db	0c					.byte CL	;wh_CodeLength
>a4e9	42 65 67 69 6e			L1:	.text "Begin"	;  name of word as a string, ending at wh_NameLastChar
>a4ee	05					.byte *-L1	;wh_NameLength	length of name
>a4ef	58 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4f1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4f2	0d					.byte NN+CO+IM	;wh_Flags	dictionary flags
=42094					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4f3	4c 18 c8	jmp $c818	Begin:		jmp Here	; remember the loop starting location
=3					CL	.var *-(WordListLink+wh_Xt)
=$a4f6					en = *	; remember here
>a4f1	03					.byte CL	;wh_CodeLength
>a4f6	41 67 61 69 6e			L1:	.text "Again"	;  name of word as a string, ending at wh_NameLastChar
>a4fb	05					.byte *-L1	;wh_NameLength	length of name
>a4fc	6e a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4ff	1d					.byte NN+CO+IM+UF	;wh_Flags	dictionary flags
=42107					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a500					Again:
.a500	20 93 b2	jsr $b293			jsr underflow_1
.a503	4c 3c cb	jmp $cb3c			jmp Jmp_Comma	; Compile a jmp abs.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a506					en = *	; remember here
>a4fe	06					.byte CL	;wh_CodeLength
>a506	57 68 69 6c 65			L1:	.text "While"	;  name of word as a string, ending at wh_NameLastChar
>a50b	05					.byte *-L1	;wh_NameLength	length of name
>a50c	7b a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a50e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a50f	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42123					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a510					While:
.a510	20 94 a4	jsr $a494			jsr If		; Compile a 0branch & jmp, push addr of addr
.a513	4c 68 cd	jmp $cd68			jmp Swap	; Swap the two addresses on the stack.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a516					en = *	; remember here
>a50e	06					.byte CL	;wh_CodeLength
>a516	52 65 70 65 61 74		L1:	.text "Repeat"	;  name of word as a string, ending at wh_NameLastChar
>a51c	06					.byte *-L1	;wh_NameLength	length of name
>a51d	8b a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a51f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a520	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42140					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a521					Repeat:
.a521	20 00 a5	jsr $a500			jsr Again	; compile the jmp back
.a524	20 18 c8	jsr $c818			jsr Here	; patch the WHILE jmp operand
.a527	20 68 cd	jsr $cd68			jsr Swap
.a52a	4c 97 cc	jmp $cc97			jmp Store
=12					CL	.var *-(WordListLink+wh_Xt)
=$a52d					en = *	; remember here
>a51f	0c					.byte CL	;wh_CodeLength
>a52d	55 6e 74 69 6c			L1:	.text "Until"	;  name of word as a string, ending at wh_NameLastChar
>a532	05					.byte *-L1	;wh_NameLength	length of name
>a533	9c a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a535	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a536	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42162					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a537					Until:
.a537	4c 3a a5	jmp $a53a			jmp ZBranch_Comma	; The address to loop back to is on the stack.
=3					CL	.var *-(WordListLink+wh_Xt)
=$a53a					en = *	; remember here
>a535	03					.byte CL	;wh_CodeLength
.a53a					ZBranch_Comma:
.a53a	a9 e8		lda #$e8			lda #$e8		; compile inx; inx
.a53c	a8		tay				tay
.a53d	20 03 cb	jsr $cb03			jsr Comma_YA
.a540	a9 b5		lda #$b5			lda #$b5		; compile lda DStack-2,x
.a542	a0 23		ldy #$23			ldy #DStack-2
.a544	20 03 cb	jsr $cb03			jsr Comma_YA
.a547	a9 15		lda #$15			lda #$15		; compile ora DStack-1,x
.a549	a0 24		ldy #$24			ldy #DStack-1
.a54b	20 03 cb	jsr $cb03			jsr Comma_YA
.a54e	a9 f0		lda #$f0			lda #$f0		; BEQ
.a550					Branch_Comma:
.a550	48		pha				pha			; save branch opcode
.a551	38		sec				sec			; AY= displacement+2
.a552	b5 25		lda $25,x			lda DStack+0,x
.a554	e5 00		sbc $00				sbc cp+0
.a556	a8		tay				tay
.a557	b5 26		lda $26,x			lda DStack+1,x
.a559	e5 01		sbc $01				sbc cp+1
.a55b	c9 ff		cmp #$ff			cmp #$ff		; offset maybe in range?
.a55d	f0 0b		beq $a56a			beq _rev
.a55f	68		pla		_2byte:		pla			; restore branch opcode
.a560	49 20		eor #$20			eor #$20		; reverse branch sense
.a562	a0 03		ldy #$03			ldy #3			; compile Bcc *+5
.a564	20 03 cb	jsr $cb03			jsr Comma_YA
.a567	4c 3c cb	jmp $cb3c			jmp Jmp_Comma		; compile JMP abs
.a56a	c0 82		cpy #$82	_rev:		cpy #$80+2		; offset in range?
.a56c	90 f1		bcc $a55f			bcc _2byte
.a56e	e8		inx		_1byte:		inx			; Drop address
.a56f	e8		inx				inx
.a570	88		dey				dey			; fix displacement
.a571	88		dey				dey
.a572	68		pla				pla			; restore branch opcode
.a573	4c 03 cb	jmp $cb03			jmp Comma_YA		; compile Bcc
>a576	57 6f 72 64			L1:	.text "Word"	;  name of word as a string, ending at wh_NameLastChar
>a57a	04					.byte *-L1	;wh_NameLength	length of name
>a57b	b2 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a57d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a57e	18					.byte UF+NN	;wh_Flags	dictionary flags
=42234					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a57f					Word:
.a57f	20 93 b2	jsr $b293			jsr underflow_1
.a582	a4 08		ldy $08				ldy toin+0		; >IN
.a584	c4 06		cpy $06		_DelimLoop:	cpy ciblen+0		; quit if end of input
.a586	f0 09		beq $a591			beq _found_char
.a588	b1 04		lda ($04),y			lda (cib),y
.a58a	d5 25		cmp $25,x			cmp DStack+0,x		; ASCII of delimiter
.a58c	d0 03		bne $a591			bne _found_char
.a58e	c8		iny				iny
.a58f	d0 f3		bne $a584			bne _DelimLoop
.a591					_found_char:
.a591	84 08		sty $08				sty toin+0		; Save index of where word starts
.a593	20 1a b9	jsr $b91a			jsr Parse		; The real work is done by parse
.a596	20 39 b2	jsr $b239			jsr PopA		; pop u
.a599	85 17		sta $17				sta tmp2+0
.a59b	20 60 b2	jsr $b260			jsr PopTmp1		; pop addr
.a59e	20 18 c8	jsr $c818			jsr Here		; Return caddr
.a5a1	a5 17		lda $17				lda tmp2+0
.a5a3	a0 00		ldy #$00			ldy #0			; Save length of string
.a5a5	f0 03		beq $a5aa			beq _CopyStart
.a5a7	b1 15		lda ($15),y	_CopyLoop:	lda (tmp1),y
.a5a9	c8		iny				iny
.a5aa	20 e9 ca	jsr $cae9	_CopyStart:	jsr C_Comma_A
.a5ad	c4 17		cpy $17				cpy tmp2+0
.a5af	90 f6		bcc $a5a7			bcc _CopyLoop
=50					CL	.var *-(WordListLink+wh_Xt)
=$a5b1					en = *	; remember here
>a57d	32					.byte CL	;wh_CodeLength
.a5b1	60		rts				rts
>a5b2	28				L1:	.text "("	;  name of word as a string, ending at wh_NameLastChar
>a5b3	01					.byte *-L1	;wh_NameLength	length of name
>a5b4	fa a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5b6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5b7	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42291					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5b8					Paren:
.a5b8	a9 29		lda #$29			lda #')'		; separator
.a5ba	20 1d b9	jsr $b91d			jsr Parse_A		; Call parse.
.a5bd	4c 17 c3	jmp $c317			jmp Two_drop		; Throw away the result.
=8					CL	.var *-(WordListLink+wh_Xt)
=$a5c0					en = *	; remember here
>a5b6	08					.byte CL	;wh_CodeLength
>a5c0	2e 28				L1:	.text ".("	;  name of word as a string, ending at wh_NameLastChar
>a5c2	02					.byte *-L1	;wh_NameLength	length of name
>a5c3	33 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5c5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5c6	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42306					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5c7					Dot_paren:
.a5c7	a9 29		lda #$29			lda #')'
.a5c9	20 1d b9	jsr $b91d			jsr Parse_A
.a5cc	4c d2 cb	jmp $cbd2			jmp Type
=8					CL	.var *-(WordListLink+wh_Xt)
=$a5cf					en = *	; remember here
>a5c5	08					.byte CL	;wh_CodeLength
>a5cf	48 61 73 68			L1:	.text "Hash"	;  name of word as a string, ending at wh_NameLastChar
>a5d3	04					.byte *-L1	;wh_NameLength	length of name
>a5d4	42 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5d6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5d7	08					.byte NN	;wh_Flags	dictionary flags
=42323					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5d8	20 39 b2	jsr $b239	Hash:		jsr PopA		; save length
.a5db	85 17		sta $17				sta tmp2+0
.a5dd	b5 25		lda $25,x			lda DStack+0,x		; copy addr
.a5df	b4 26		ldy $26,x			ldy DStack+1,x
.a5e1	85 15		sta $15				sta tmp1+0
.a5e3	84 16		sty $16				sty tmp1+1
.a5e5	a9 b3		lda #$b3			lda #$b3		; init hash
.a5e7	95 25		sta $25,x			sta DStack+0,x
.a5e9	95 26		sta $26,x			sta DStack+1,x
.a5eb	a0 00		ldy #$00			ldy #0			; for each char
.a5ed	f0 15		beq $a604			beq _next
.a5ef	b1 15		lda ($15),y	_loop:		lda (tmp1),y		;   get char
.a5f1	c9 61		cmp #$61			cmp #'a'		;   uppercase
.a5f3	90 06		bcc $a5fb			bcc _3
.a5f5	c9 7b		cmp #$7b			cmp #'z'+1
.a5f7	b0 02		bcs $a5fb			bcs _3
.a5f9	29 df		and #$df			and #$df
.a5fb	16 25		asl $25,x	_3:		asl DStack+0,x		;   add to hash
.a5fd	36 26		rol $26,x			rol DStack+1,x
.a5ff	75 25		adc $25,x			adc DStack+0,x
.a601	95 25		sta $25,x			sta DStack+0,x
.a603	c8		iny				iny
.a604	c4 17		cpy $17		_Next:		cpy tmp2+0
.a606	90 e7		bcc $a5ef			bcc _loop
=48					CL	.var *-(WordListLink+wh_Xt)
=$a608					en = *	; remember here
>a5d6	30					.byte CL	;wh_CodeLength
.a608	60		rts				rts
>a609	45 6e 76 69 72 6f 6e 6d		L1:	.text "Environment?"	;  name of word as a string, ending at wh_NameLastChar
>a611	65 6e 74 3f
>a615	0c					.byte *-L1	;wh_NameLength	length of name
>a616	53 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a618	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a619	08					.byte NN	;wh_Flags	dictionary flags
=42389					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a61a					Environment_Q:
.a61a	20 d8 a5	jsr $a5d8			jsr Hash		; ( hash )
.a61d	a0 00		ldy #$00			ldy #0			; Y= table index
.a61f	f0 0a		beq $a62b			beq _entry_test
.a621	98		tya		_entry_next:	tya
.a622	c0 30		cpy #$30			cpy #_table_dbl		; if double
.a624	90 02		bcc $a628			bcc +
.a626	69 01		adc #$01			adc #6-4-1		;   skip double
.a628	69 04		adc #$04	+		adc #4			;   skip single
.a62a	a8		tay		_3:		tay
.a62b	b9 5f a6	lda $a65f,y	_entry_test:	lda _Table+0,y		; match?
.a62e	f0 28		beq $a658			beq _notfound
.a630	d5 25		cmp $25,x			cmp DStack+0,x
.a632	d0 ed		bne $a621			bne _entry_next
.a634	b9 60 a6	lda $a660,y			lda _Table+1,y
.a637	d5 26		cmp $26,x			cmp DStack+1,x
.a639	d0 e6		bne $a621			bne _entry_next
.a63b	b9 61 a6	lda $a661,y			lda _Table+2,y
.a63e	95 25		sta $25,x			sta DStack+0,x
.a640	b9 62 a6	lda $a662,y			lda _Table+3,y
.a643	95 26		sta $26,x			sta DStack+1,x
.a645	c0 30		cpy #$30			cpy #_table_dbl		; single or double data?
.a647	90 0c		bcc $a655			bcc _single
.a649	ca		dex				dex			;  push 2nd cell
.a64a	ca		dex				dex
.a64b	b9 63 a6	lda $a663,y			lda _Table+4,y
.a64e	95 25		sta $25,x			sta DStack+0,x
.a650	b9 64 a6	lda $a664,y			lda _Table+5,y
.a653	95 26		sta $26,x			sta DStack+1,x
.a655					_single:
.a655	4c 05 b6	jmp $b605			jmp True		; return True
.a658					_notfound:
.a658	a9 00		lda #$00			lda #0			; return 0
.a65a	95 25		sta $25,x			sta DStack+0,x
.a65c	95 26		sta $26,x			sta DStack+1,x
.a65e	60		rts				rts
=69					CL	.var *-(WordListLink+wh_Xt)
=$a65f					en = *	; remember here
>a618	45					.byte CL	;wh_CodeLength
.a65f					_Table:
>a65f	5e e6 ff 7f				.word $e65e,$7fff	; "/COUNTED-STRING"
>a663	be 79 ff 00				.word $79BE,$ff		; "/HOLD"
>a667	b9 3c 54 00				.word $3cb9,padoffset	; "/PAD"
>a66b	8b 81 08 00				.word $818b,8		; "ADDRESS-UNIT-BITS"
>a66f	57 fc 00 00				.word $fc57,0		; "FLOORED"	we have symmetric)
>a673	4f fb ff 00				.word $fb4f,$ff		; "MAX-CHAR"
>a677	56 7f ff 7f				.word $7f56,$7fff	; "MAX-N"
>a67b	5d 7f ff ff				.word $7f5d,$ffff	; "MAX-U"
>a67f	38 ce 80 00				.word $ce38,$80		; "RETURN-STACK-CELLS"
>a683	f2 c0 14 00				.word $c0f2,DStack0/2	; "STACK-CELLS"
>a687	36 e3 09 00				.word $e336,9		; "WORDLISTS"
>a68b	01 99 0a 00				.word $9901,FDim	; "FLOATING-STACK"	n	yes	   If n = zero, floating-point numbers are
=48					_table_dbl = *-_Table	; These return a double-cell number
>a68f	4c 7f ff ff ff 7f			.word $7f4c,$ffff,$7fff	; "MAX-D"
>a695	fe fe ff ff ff ff			.word $fefe,$ffff,$ffff	; "MAX-UD"
>a69b	00					.byte 0		; end of list
>a69c	42 65 6c 6c			L1:	.text "Bell"	;  name of word as a string, ending at wh_NameLastChar
>a6a0	04					.byte *-L1	;wh_NameLength	length of name
>a6a1	95 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6a3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6a4	08					.byte NN	;wh_Flags	dictionary flags
=42528					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6a5	a9 07		lda #$07	Bell:		lda #7		; ASCII value for BELL
.a6a7	4c b8 cb	jmp $cbb8			jmp Emit_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$a6aa					en = *	; remember here
>a6a3	05					.byte CL	;wh_CodeLength
>a6aa	44 75 6d 70			L1:	.text "Dump"	;  name of word as a string, ending at wh_NameLastChar
>a6ae	04					.byte *-L1	;wh_NameLength	length of name
>a6af	20 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6b1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6b2	18					.byte UF+NN	;wh_Flags	dictionary flags
=42542					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6b3					Dump:
.a6b3	20 a8 b2	jsr $b2a8			jsr underflow_2
.a6b6	ca		dex				dex			; alloc work area
.a6b7	ca		dex				dex
.a6b8					_row:
.a6b8	20 ce a9	jsr $a9ce			jsr CR
.a6bb	b5 2a		lda $2a,x			lda DStack+5,x		; print address number
.a6bd	20 3c a7	jsr $a73c			jsr C_Dot_Hex_A
.a6c0	b5 29		lda $29,x			lda DStack+4,x
.a6c2	20 3c a7	jsr $a73c			jsr C_Dot_Hex_A
.a6c5	20 c5 cb	jsr $cbc5			jsr Space
.a6c8	20 c5 cb	jsr $cbc5			jsr Space
.a6cb	a9 00		lda #$00			lda #0
.a6cd	95 25		sta $25,x			sta DStack+0,x
.a6cf					_loop:
.a6cf	b5 27		lda $27,x			lda DStack+2,x
.a6d1	15 28		ora $28,x			ora DStack+3,x
.a6d3	f0 36		beq $a70b			beq _all_printed
.a6d5	a1 29		lda ($29,x)			lda (DStack+4,x)
.a6d7	20 3c a7	jsr $a73c			jsr C_Dot_Hex_A
.a6da	20 c5 cb	jsr $cbc5			jsr Space
.a6dd	a1 29		lda ($29,x)			lda (DStack+4,x)
.a6df	20 63 a7	jsr $a763			jsr is_printable
.a6e2	b0 02		bcs $a6e6			bcs _printable
.a6e4	a9 2e		lda #$2e			lda #'.'		 ; Print dot if not printable
.a6e6					_printable:
.a6e6	b4 25		ldy $25,x			ldy DStack+0,x
.a6e8	91 00		sta ($00),y			sta (cp),y
.a6ea	c0 07		cpy #$07			cpy #7
.a6ec	d0 03		bne $a6f1			bne +
.a6ee	20 c5 cb	jsr $cbc5			jsr Space
.a6f1					+
.a6f1	f6 29		inc $29,x			inc DStack+4,x
.a6f3	d0 02		bne $a6f7			bne +
.a6f5	f6 2a		inc $2a,x			inc DStack+5,x
.a6f7					+
.a6f7	20 32 c8	jsr $c832			jsr NOS_One_Minus	; loop counter
.a6fa	f6 25		inc $25,x			inc DStack+0,x
.a6fc	b5 25		lda $25,x			lda DStack+0,x
.a6fe	c9 10		cmp #$10			cmp #16
.a700	90 cd		bcc $a6cf			bcc _loop		; next byte
.a702	20 c5 cb	jsr $cbc5			jsr Space
.a705	20 1a a7	jsr $a71a			jsr dump_print_ascii
.a708	4c b8 a6	jmp $a6b8			jmp _row		; new row
.a70b					_all_printed:
.a70b	b5 25		lda $25,x			lda DStack+0,x
.a70d	f0 06		beq $a715			beq _done
.a70f	20 c5 cb	jsr $cbc5			jsr Space
.a712	20 1a a7	jsr $a71a			jsr dump_print_ascii
.a715					_done:
.a715	e8		inx				inx			; drop work area
.a716	e8		inx				inx
.a717	4c 17 c3	jmp $c317			jmp Two_drop		; one byte less than 4x INX
=103					CL	.var *-(WordListLink+wh_Xt)
=$a71a					en = *	; remember here
>a6b1	67					.byte CL	;wh_CodeLength
.a71a					dump_print_ascii:
.a71a	a0 00		ldy #$00			ldy #0
.a71c					_loop:
.a71c	b1 00		lda ($00),y			lda (cp),y
.a71e	20 b8 cb	jsr $cbb8			jsr Emit_A
.a721	c8		iny				iny
.a722	c0 08		cpy #$08			cpy #8
.a724	d0 03		bne $a729			bne +
.a726	20 c5 cb	jsr $cbc5			jsr Space
.a729					+
.a729	98		tya				tya
.a72a	d5 25		cmp $25,x			cmp DStack+0,x
.a72c	90 ee		bcc $a71c			bcc _loop
.a72e	60		rts				rts
>a72f	43 2e 48 65 78			L1:	.text "C.Hex"	;  name of word as a string, ending at wh_NameLastChar
>a734	05					.byte *-L1	;wh_NameLength	length of name
>a735	2e a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a737	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a738	08					.byte NN	;wh_Flags	dictionary flags
=42676					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a739	20 39 b2	jsr $b239	C_Dot_Hex:	jsr PopA
.a73c					C_Dot_Hex_A:
.a73c	48		pha		                pha
.a73d	4a		lsr a				lsr		; convert high nibble first
.a73e	4a		lsr a				lsr
.a73f	4a		lsr a				lsr
.a740	4a		lsr a				lsr
.a741	20 45 a7	jsr $a745			jsr _nibble_to_ascii
.a744	68		pla				pla
.a745					_nibble_to_ascii:
.a745	29 0f		and #$0f			and #$0F	; only use lower nibble
.a747	c9 0a		cmp #$0a			cmp #9+1
.a749	90 02		bcc $a74d			bcc +
.a74b	69 06		adc #$06			adc #6
.a74d	69 30		adc #$30	+		adc #'0'
.a74f	4c b8 cb	jmp $cbb8			jmp Emit_A
>a752	2e 48 65 78			L1:	.text ".Hex"	;  name of word as a string, ending at wh_NameLastChar
>a756	04					.byte *-L1	;wh_NameLength	length of name
>a757	b4 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a759	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a75a	08					.byte NN	;wh_Flags	dictionary flags
=42710					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a75b	b5 26		lda $26,x	Dot_Hex:	lda DStack+1,x	; do hi byte
.a75d	20 3c a7	jsr $a73c			jsr C_Dot_Hex_A
.a760	4c 39 a7	jmp $a739			jmp C_Dot_Hex	; do lo byte
.a763					is_printable:
.a763	c9 20		cmp #$20	                cmp #AscSP              ; $20
.a765	90 07		bcc $a76e	                bcc _done
.a767	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.a769	b0 02		bcs $a76d	                bcs _failed
.a76b	38		sec		                sec
.a76c	60		rts		                rts
.a76d	18		clc		_failed:	clc
.a76e	60		rts		_done:		rts
.a76f					is_whitespace:
.a76f	c9 21		cmp #$21	                cmp #AscSP+1
.a771	b0 02		bcs $a775	                bcs _failed
.a773	38		sec		                sec
.a774	60		rts		                rts
.a775	18		clc		_failed:	clc
.a776	60		rts				rts
>a777	2e 53				L1:	.text ".S"	;  name of word as a string, ending at wh_NameLastChar
>a779	02					.byte *-L1	;wh_NameLength	length of name
>a77a	d6 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a77c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a77d	08					.byte NN	;wh_Flags	dictionary flags
=42745					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a77e					Dot_s:
.a77e	a9 3c		lda #$3c			lda #'<'
.a780	20 b8 cb	jsr $cbb8			jsr Emit_A
.a783	20 51 c0	jsr $c051			jsr Depth	; ( -- u )
.a786	20 13 ca	jsr $ca13			jsr print_u
.a789	a9 3e		lda #$3e			lda #'>'
.a78b	20 b8 cb	jsr $cbb8			jsr Emit_A
.a78e	20 c5 cb	jsr $cbc5			jsr Space
.a791	a0 28		ldy #$28			ldy #DStack0		; for each cell on the stack
.a793	88		dey		_loop:		dey
.a794	88		dey				dey
.a795	86 15		stx $15				stx tmp1
.a797	c4 15		cpy $15				cpy tmp1
.a799	90 15		bcc $a7b0			bcc _done
.a79b	98		tya				tya			; save index
.a79c	48		pha				pha
.a79d	ca		dex				dex			; push stack[index]
.a79e	ca		dex				dex
.a79f	b9 25 00	lda $0025,y			lda DStack+0,y
.a7a2	95 25		sta $25,x			sta DStack+0,x
.a7a4	b9 26 00	lda $0026,y			lda DStack+1,y
.a7a7	95 26		sta $26,x			sta DStack+1,x
.a7a9	20 c6 c9	jsr $c9c6			jsr Dot
.a7ac	68		pla				pla			; restore index
.a7ad	a8		tay				tay
.a7ae	d0 e3		bne $a793			bne _loop
.a7b0					_done:
=50					CL	.var *-(WordListLink+wh_Xt)
=$a7b0					en = *	; remember here
>a77c	32					.byte CL	;wh_CodeLength
.a7b0	60		rts				rts
>a7b1	43 6f 6d 70 61 72 65		L1:	.text "Compare"	;  name of word as a string, ending at wh_NameLastChar
>a7b8	07					.byte *-L1	;wh_NameLength	length of name
>a7b9	f9 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a7bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a7bc	18					.byte UF+NN	;wh_Flags	dictionary flags
=42808					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a7bd					Compare:
.a7bd	20 b2 b2	jsr $b2b2			jsr underflow_4
.a7c0	b5 25		lda $25,x			lda DStack+0,x		; tmp3+1= u2.lo
.a7c2	85 1a		sta $1a				sta tmp3+1
.a7c4	b5 27		lda $27,x			lda DStack+2,x		; tmp2= addr2
.a7c6	b4 28		ldy $28,x			ldy DStack+3,x
.a7c8	85 17		sta $17				sta tmp2+0
.a7ca	84 18		sty $18				sty tmp2+1
.a7cc	b5 29		lda $29,x			lda DStack+4,x		; tmp3+0= u1.lo
.a7ce	85 19		sta $19				sta tmp3+0
.a7d0	b5 2b		lda $2b,x			lda DStack+6,x		; tmp1= addr1
.a7d2	b4 2c		ldy $2c,x			ldy DStack+7,x
.a7d4	85 15		sta $15				sta tmp1+0
.a7d6	84 16		sty $16				sty tmp1+1
.a7d8	a0 00		ldy #$00			ldy #0		; for each char
.a7da					_loop:
.a7da	c4 19		cpy $19				cpy tmp3+0	; string1 empty?
.a7dc	f0 13		beq $a7f1			beq _str1
.a7de					_L1:
.a7de	c4 1a		cpy $1a				cpy tmp3+1	; string2 empty?
.a7e0	f0 27		beq $a809			beq _str2
.a7e2					_L2:
.a7e2	b1 15		lda ($15),y			lda (tmp1),y	; Are they different?
.a7e4	d1 17		cmp ($17),y			cmp (tmp2),y
.a7e6	d0 19		bne $a801			bne _neq
.a7e8	c8		iny				iny		; to next char
.a7e9	d0 ef		bne $a7da			bne _loop
.a7eb	e6 16		inc $16				inc tmp1+1	; to next page
.a7ed	e6 18		inc $18				inc tmp2+1
.a7ef	d0 e9		bne $a7da			bne _loop
.a7f1	d6 2a		dec $2a,x	_str1:		dec DStack+5,x	; string1 really empty?
.a7f3	10 e9		bpl $a7de			bpl _L1
.a7f5	c4 1a		cpy $1a				cpy tmp3+1	; string2 empty?
.a7f7	d0 0a		bne $a803			bne _less
.a7f9	b5 26		lda $26,x			lda DStack+1,x
.a7fb	d0 06		bne $a803			bne _less
.a7fd	a9 00		lda #$00	_equal:		lda #0		; Return 0
.a7ff	f0 0e		beq $a80f			beq _gt2
.a801	b0 0a		bcs $a80d	_neq:		bcs _greater
.a803	a9 ff		lda #$ff	_less:		lda #$FF	; Return -1
.a805	95 2b		sta $2b,x			sta DStack+6,x
.a807	d0 0a		bne $a813			bne _done
.a809	d6 26		dec $26,x	_str2:		dec DStack+1,x	; is string2 empty?
.a80b	10 d5		bpl $a7e2			bpl _L2
.a80d	a9 01		lda #$01	_greater:	lda #1		; Return 1
.a80f	95 2b		sta $2b,x	_gt2:		sta DStack+6,x
.a811	a9 00		lda #$00			lda #0
.a813	95 2c		sta $2c,x	_done:		sta DStack+7,x
.a815	8a		txa				txa		; Remove all but the result from the stack.
.a816	18		clc				clc
.a817	69 06		adc #$06			adc #6
.a819	aa		tax				tax
=93					CL	.var *-(WordListLink+wh_Xt)
=$a81a					en = *	; remember here
>a7bb	5d					.byte CL	;wh_CodeLength
.a81a	60		rts				rts
>a81b	53 65 61 72 63 68		L1:	.text "Search"	;  name of word as a string, ending at wh_NameLastChar
>a821	06					.byte *-L1	;wh_NameLength	length of name
>a822	38 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a824	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a825	18					.byte UF+NN	;wh_Flags	dictionary flags
=42913					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a826					Search:
.a826	20 b2 b2	jsr $b2b2			jsr underflow_4
.a829	b5 25		lda $25,x			lda DStack+0,x
.a82b	15 26		ora $26,x			ora DStack+1,x
.a82d	d0 09		bne $a838			bne _start_search
.a82f	e8		inx				inx		; Drop u2
.a830	e8		inx				inx
.a831	a9 ff		lda #$ff			lda #$FF	; overwrite addr2 with a true flag
.a833	95 25		sta $25,x			sta DStack+0,x
.a835	95 26		sta $26,x			sta DStack+1,x
.a837	60		rts				rts
.a838					_start_search:
.a838	20 36 b6	jsr $b636			jsr Zero
.a83b					_search_loop:
.a83b	18		clc				clc
.a83c	b5 25		lda $25,x			lda DStack+0,x
.a83e	75 27		adc $27,x			adc DStack+2,x
.a840	85 15		sta $15				sta tmp1+0
.a842	b5 26		lda $26,x			lda DStack+1,x
.a844	75 28		adc $28,x			adc DStack+3,x
.a846	85 16		sta $16				sta tmp1+1
.a848	d5 2c		cmp $2c,x			cmp DStack+7,x
.a84a	90 13		bcc $a85f			bcc _init_comparison ; Obviously less
.a84c	d0 06		bne $a854			bne _not_found
.a84e	b5 2b		lda $2b,x			lda DStack+6,x
.a850	c5 15		cmp $15				cmp tmp1
.a852	b0 0b		bcs $a85f			bcs _init_comparison
.a854					_not_found:
.a854	e8		inx				inx		; Remove offset
.a855	e8		inx				inx
.a856	e8		inx				inx		; Remove u2
.a857	e8		inx				inx
.a858	a9 00		lda #$00			lda #0
.a85a	95 25		sta $25,x			sta DStack+0,x	; Turn addr2 into a false flag
.a85c	95 26		sta $26,x			sta DStack+1,x
.a85e	60		rts				rts
.a85f					_init_comparison:
.a85f	18		clc				clc
.a860	b5 2d		lda $2d,x			lda DStack+8,x
.a862	75 25		adc $25,x			adc DStack+0,x
.a864	85 15		sta $15				sta tmp1
.a866	b5 2e		lda $2e,x			lda DStack+9,x
.a868	75 26		adc $26,x			adc DStack+1,x
.a86a	85 16		sta $16				sta tmp1+1
.a86c	b5 29		lda $29,x			lda DStack+4,x
.a86e	85 17		sta $17				sta tmp2
.a870	b5 2a		lda $2a,x			lda DStack+5,x
.a872	85 18		sta $18				sta tmp2+1
.a874	b5 27		lda $27,x			lda DStack+2,x
.a876	85 19		sta $19				sta tmp3+0
.a878	b5 28		lda $28,x			lda DStack+3,x
.a87a	85 1a		sta $1a				sta tmp3+1
.a87c					_comparison_loop:
.a87c	a0 00		ldy #$00			ldy #0
.a87e	b1 15		lda ($15),y			lda (tmp1),y
.a880	d1 17		cmp ($17),y			cmp (tmp2),y
.a882	f0 06		beq $a88a			beq _letters_match
.a884	20 4c c8	jsr $c84c			jsr One_plus
.a887	4c 3b a8	jmp $a83b			jmp _search_loop
.a88a					_letters_match:
.a88a	e6 15		inc $15				inc tmp1
.a88c	d0 02		bne $a890			bne +
.a88e	e6 16		inc $16				inc tmp1+1
.a890					+
.a890	e6 17		inc $17				inc tmp2
.a892	d0 02		bne $a896			bne +
.a894	e6 18		inc $18				inc tmp2+1
.a896					+
.a896	a5 19		lda $19				lda tmp3
.a898	d0 02		bne $a89c			bne +
.a89a	c6 1a		dec $1a				dec tmp3+1
.a89c					+
.a89c	c6 19		dec $19				dec tmp3
.a89e	a5 19		lda $19				lda tmp3
.a8a0	05 1a		ora $1a				ora tmp3+1
.a8a2	d0 d8		bne $a87c			bne _comparison_loop ; Check the next letter
.a8a4	18		clc				clc
.a8a5	b5 25		lda $25,x			lda DStack+0,x
.a8a7	75 2d		adc $2d,x			adc DStack+8,x
.a8a9	95 2d		sta $2d,x			sta DStack+8,x
.a8ab	b5 26		lda $26,x			lda DStack+1,x
.a8ad	75 2e		adc $2e,x			adc DStack+9,x
.a8af	95 2e		sta $2e,x			sta DStack+9,x
.a8b1	38		sec				sec
.a8b2	b5 2b		lda $2b,x			lda DStack+6,x
.a8b4	f5 25		sbc $25,x			sbc DStack+0,x
.a8b6	95 2b		sta $2b,x			sta DStack+6,x
.a8b8	b5 2c		lda $2c,x			lda DStack+7,x
.a8ba	f5 26		sbc $26,x			sbc DStack+1,x
.a8bc	95 2c		sta $2c,x			sta DStack+7,x
.a8be	e8		inx				inx		; drop offset
.a8bf	e8		inx				inx
.a8c0	e8		inx				inx		; drop u2
.a8c1	e8		inx				inx
.a8c2	a9 ff		lda #$ff			lda #$FF
.a8c4	95 25		sta $25,x			sta DStack+0,x	; Turn addr2 into a true flag.
.a8c6	95 26		sta $26,x			sta DStack+1,x
=162					CL	.var *-(WordListLink+wh_Xt)
=$a8c8					en = *	; remember here
>a824	a2					.byte CL	;wh_CodeLength
.a8c8	60		rts				rts
>a8c9	4d 61 72 6b 65 72		L1:	.text "Marker"	;  name of word as a string, ending at wh_NameLastChar
>a8cf	06					.byte *-L1	;wh_NameLength	length of name
>a8d0	a1 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a8d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a8d3	0c					.byte IM+NN	;wh_Flags	dictionary flags
=43087					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a8d4					Marker:
.a8d4	20 18 c8	jsr $c818			jsr Here		; Save original CP, which
.a8d7	20 59 bf	jsr $bf59			jsr Header_Build	; compile a word header, but don't link into wordlist
.a8da	a0 a8		ldy #$a8			ldy #>_runtime		; compile JSR _runtime
.a8dc	a9 f4		lda #$f4			lda #<_runtime
.a8de	20 28 cb	jsr $cb28			jsr Jsr_Comma_YA
.a8e1	20 00 cb	jsr $cb00			jsr Comma		; Append original CP
.a8e4	a0 00		ldy #$00			ldy #0			; Start at CURRENT
.a8e6	b9 10 03	lda $0310,y	_loop:		lda CurrentV,y
.a8e9	20 e9 ca	jsr $cae9			jsr C_Comma_A
.a8ec	c8		iny				iny
.a8ed	c0 24		cpy #$24			cpy #MarkEnd-CurrentV	; One past the end of the search order.
.a8ef	90 f5		bcc $a8e6			bcc _loop
.a8f1	4c 4e bf	jmp $bf4e			jmp Header_Link		; link built header into current dictionary
=32					CL	.var *-(WordListLink+wh_Xt)
=$a8f4					en = *	; remember here
>a8d2	20					.byte CL	;wh_CodeLength
.a8f4					_runtime:
.a8f4	68		pla				pla		; Pop the RTS address off the stack
.a8f5	85 15		sta $15				sta tmp1+0
.a8f7	68		pla				pla
.a8f8	85 16		sta $16				sta tmp1+1
.a8fa	a0 01		ldy #$01			ldy #1		; start just aftet JSR _runtime
.a8fc	b1 15		lda ($15),y			lda (tmp1),y	; CP was stored first
.a8fe	85 00		sta $00				sta cp+0
.a900	c8		iny				iny
.a901	b1 15		lda ($15),y			lda (tmp1),y
.a903	85 01		sta $01				sta cp+1
.a905	c8		iny				iny
.a906					_rloop:
.a906	b1 15		lda ($15),y			lda (tmp1),y
.a908	99 0d 03	sta $030d,y			sta CurrentV-2-1,y
.a90b	c8		iny				iny
.a90c	c0 27		cpy #$27			cpy #MarkEnd-CurrentV+2+1 ; One past the end of the search order.
.a90e	90 f6		bcc $a906			bcc _rloop
.a910	60		rts				rts
>a911	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
>a916	05					.byte *-L1	;wh_NameLength	length of name
>a917	4f a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a919	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a91a	08					.byte NN	;wh_Flags	dictionary flags
=43158					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a91b					Words:
.a91b	a9 ff		lda #$ff			lda #$ff
.a91d	20 27 b6	jsr $b627			jsr PushZA		; Alloc space for line size & wordlist #
.a920	ca		dex				dex			; Alloc space for a nt
.a921	ca		dex				dex
.a922					_wordlist_next:
.a922	20 ce a9	jsr $a9ce			jsr CR			; start wordlist on new line
.a925	f6 27		inc $27,x			inc DStack+2,x		; step to next search wordlist
.a927	b4 27		ldy $27,x			ldy DStack+2,x		; Y= wordlist index
.a929	cc 2a 03	cpy $032a			cpy Num_OrderV
.a92c	b0 44		bcs $a972			bcs _wordslist_done	; ran out of search wordlist entries?
.a92e	b9 2b 03	lda $032b,y			lda Search_OrderV,y	; A= SEARCH-ORDER[Y]	Get the current wordlist id
.a931	0a		asl a				asl			; TOS= WORDLISTS[A]
.a932	a8		tay				tay
.a933	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.a936	95 25		sta $25,x			sta DStack+0,x
.a938	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.a93b	95 26		sta $26,x			sta DStack+1,x
.a93d	f0 e3		beq $a922			beq _wordlist_next	; end of list?
.a93f					_word_loop:
.a93f	20 4a cd	jsr $cd4a			jsr Dup			; ( wordlist# nt nt )
.a942	20 21 bc	jsr $bc21			jsr Name_To_String	; ( wordlist# nt addr u )
.a945	b5 2c		lda $2c,x			lda DStack+7,x
.a947	38		sec				sec			; don't forget the space between words
.a948	75 25		adc $25,x			adc DStack+0,x
.a94a	c9 4e		cmp #$4e			cmp #MAX_LINE_LENGTH-1
.a94c	90 05		bcc $a953			bcc +
.a94e	20 ce a9	jsr $a9ce			jsr CR
.a951	b5 25		lda $25,x			lda DStack+0,x		; After going to next line, start
.a953	95 2c		sta $2c,x	+		sta DStack+7,x
.a955	20 d2 cb	jsr $cbd2			jsr Type		; ( wordlist# nt )
.a958	20 c5 cb	jsr $cbc5			jsr Space
.a95b	b5 25		lda $25,x			lda DStack+0,x
.a95d	85 15		sta $15				sta tmp1+0
.a95f	b5 26		lda $26,x			lda DStack+1,x
.a961	85 16		sta $16				sta tmp1+1
.a963	a0 81		ldy #$81			ldy #wh_WordListLink	; get next word nt
.a965	b1 15		lda ($15),y			lda (tmp1),y
.a967	95 25		sta $25,x			sta DStack+0,x
.a969	c8		iny				iny
.a96a	b1 15		lda ($15),y			lda (tmp1),y
.a96c	95 26		sta $26,x			sta DStack+1,x
.a96e	d0 cf		bne $a93f			bne _word_loop		; end of list?
.a970	f0 b0		beq $a922			beq _wordlist_next
.a972					_wordslist_done:
.a972	4c 17 c3	jmp $c317			jmp Two_Drop
=90					CL	.var *-(WordListLink+wh_Xt)
=$a975					en = *	; remember here
>a919	5a					.byte CL	;wh_CodeLength
>a975	57 6f 72 64 53 69 7a 65		L1:	.text "WordSize"	;  name of word as a string, ending at wh_NameLastChar
>a97d	08					.byte *-L1	;wh_NameLength	length of name
>a97e	96 a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a980	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a981	08					.byte NN	;wh_Flags	dictionary flags
=43261					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a982	20 60 b2	jsr $b260	WordSize:	jsr PopTmp1
.a985	a0 83		ldy #$83			ldy #Wh_CodeLength
.a987	b1 15		lda ($15),y			lda (tmp1),y
.a989	4c 27 b6	jmp $b627			jmp PushZA
=10					CL	.var *-(WordListLink+wh_Xt)
=$a98c					en = *	; remember here
>a980	0a					.byte CL	;wh_CodeLength
>a98c	41 6c 69 67 6e 65 64		L1:	.text "Aligned"	;  name of word as a string, ending at wh_NameLastChar
>a993	07					.byte *-L1	;wh_NameLength	length of name
>a994	fd a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a996	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a997	00					.byte 0	;wh_Flags	dictionary flags
=43283					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a998					Aligned:
=0					CL	.var *-(WordListLink+wh_Xt)
=$a998					en = *	; remember here
>a996	00					.byte CL	;wh_CodeLength
.a998	60		rts				rts
>a999	41 6c 69 67 6e			L1:	.text "Align"	;  name of word as a string, ending at wh_NameLastChar
>a99e	05					.byte *-L1	;wh_NameLength	length of name
>a99f	13 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9a1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9a2	00					.byte 0	;wh_Flags	dictionary flags
=43294					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9a3					Align:
=0					CL	.var *-(WordListLink+wh_Xt)
=$a9a3					en = *	; remember here
>a9a1	00					.byte CL	;wh_CodeLength
.a9a3	60		rts				rts
>a9a4	4f 75 74 70 75 74		L1:	.text "Output"	;  name of word as a string, ending at wh_NameLastChar
>a9aa	06					.byte *-L1	;wh_NameLength	length of name
>a9ab	1e a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9ad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9ae	08					.byte NN	;wh_Flags	dictionary flags
=43306					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9af					xt_output:
.a9af	a9 06		lda #$06			lda #<output
.a9b1	a0 03		ldy #$03			ldy #>output
.a9b3	4c e5 b5	jmp $b5e5			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a9b6					en = *	; remember here
>a9ad	07					.byte CL	;wh_CodeLength
>a9b6	49 6e 70 75 74			L1:	.text "Input"	;  name of word as a string, ending at wh_NameLastChar
>a9bb	05					.byte *-L1	;wh_NameLength	length of name
>a9bc	2a a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9bf	08					.byte NN	;wh_Flags	dictionary flags
=43323					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9c0	a9 08		lda #$08	xt_input:	lda #<input
.a9c2	a0 03		ldy #$03			ldy #>input
.a9c4	4c e5 b5	jmp $b5e5			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a9c7					en = *	; remember here
>a9be	07					.byte CL	;wh_CodeLength
>a9c7	43 52				L1:	.text "CR"	;  name of word as a string, ending at wh_NameLastChar
>a9c9	02					.byte *-L1	;wh_NameLength	length of name
>a9ca	3b a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9cd	08					.byte NN	;wh_Flags	dictionary flags
=43337					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9ce					CR:
.a9ce	a9 0d		lda #$0d			lda #AscCR
.a9d0	20 b8 cb	jsr $cbb8			jsr Emit_A
.a9d3	a9 0a		lda #$0a			lda #AscLF
.a9d5	20 b8 cb	jsr $cbb8			jsr Emit_A
=10					CL	.var *-(WordListLink+wh_Xt)
=$a9d8					en = *	; remember here
>a9cc	0a					.byte CL	;wh_CodeLength
.a9d8	60		rts				rts
>a9d9	50 61 67 65			L1:	.text "Page"	;  name of word as a string, ending at wh_NameLastChar
>a9dd	04					.byte *-L1	;wh_NameLength	length of name
>a9de	49 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9e0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9e1	08					.byte NN	;wh_Flags	dictionary flags
=43357					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9e2	20 01 b7	jsr $b701	Page:		jsr SLiteral_Runtime
.a9e5	4c f2 a9	jmp $a9f2			  jmp +
>a9e8	1b 5b 32 4a					  .text AscESC,"[2J"	; ANSI clear screen
>a9ec	1b 5b 31 3b 31 48				  .text AscESC,"[1;1H"	; move cursor to top left of screen
.a9f2	4c d2 cb	jmp $cbd2	+		jmp Type
=19					CL	.var *-(WordListLink+wh_Xt)
=$a9f5					en = *	; remember here
>a9e0	13					.byte CL	;wh_CodeLength
>a9f5	41 74 2d 58 59			L1:	.text "At-XY"	;  name of word as a string, ending at wh_NameLastChar
>a9fa	05					.byte *-L1	;wh_NameLength	length of name
>a9fb	5d a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9fd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9fe	18					.byte UF+NN	;wh_Flags	dictionary flags
=43386					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9ff					At_XY:
.a9ff	20 a8 b2	jsr $b2a8			jsr underflow_2
.aa02	ad 00 03	lda $0300			lda base
.aa05	48		pha				pha
.aa06	20 06 b0	jsr $b006			jsr Decimal
.aa09	a9 1b		lda #$1b			lda #AscESC
.aa0b	20 b8 cb	jsr $cbb8			jsr Emit_A
.aa0e	a9 5b		lda #$5b			lda #'['
.aa10	20 b8 cb	jsr $cbb8			jsr Emit_A
.aa13	f6 25		inc $25,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.aa15	20 13 ca	jsr $ca13			jsr print_u
.aa18	a9 3b		lda #$3b			lda #';'
.aa1a	20 b8 cb	jsr $cbb8			jsr Emit_A
.aa1d	f6 25		inc $25,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.aa1f	20 13 ca	jsr $ca13			jsr print_u
.aa22	a9 48		lda #$48			lda #'H'
.aa24	20 b8 cb	jsr $cbb8			jsr Emit_A
.aa27	68		pla				pla
.aa28	8d 00 03	sta $0300			sta base
=44					CL	.var *-(WordListLink+wh_Xt)
=$aa2b					en = *	; remember here
>a9fd	2c					.byte CL	;wh_CodeLength
.aa2b	60		rts				rts
>aa2c	3c 23				L1:	.text "<#"	;  name of word as a string, ending at wh_NameLastChar
>aa2e	02					.byte *-L1	;wh_NameLength	length of name
>aa2f	7a a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa31	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa32	08					.byte NN	;wh_Flags	dictionary flags
=43438					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa33					Less_Number_Sign:
.aa33	a9 54		lda #$54			lda #padoffset
.aa35	85 0e		sta $0e				sta tohold
=4					CL	.var *-(WordListLink+wh_Xt)
=$aa37					en = *	; remember here
>aa31	04					.byte CL	;wh_CodeLength
.aa37	60		rts				rts
>aa38	23 3e				L1:	.text "#>"	;  name of word as a string, ending at wh_NameLastChar
>aa3a	02					.byte *-L1	;wh_NameLength	length of name
>aa3b	ae a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa3d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa3e	18					.byte UF+NN	;wh_Flags	dictionary flags
=43450					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa3f					Number_Sign_Greater:
.aa3f	20 a8 b2	jsr $b2a8			jsr underflow_2		; double number
.aa42	18		clc				clc			; start addr
.aa43	a5 00		lda $00				lda cp+0
.aa45	65 0e		adc $0e				adc tohold
.aa47	95 27		sta $27,x			sta DStack+2,x
.aa49	a5 01		lda $01				lda cp+1
.aa4b	69 00		adc #$00			adc #0
.aa4d	95 28		sta $28,x			sta DStack+3,x
.aa4f	38		sec				sec			; length
.aa50	a9 54		lda #$54			lda #padoffset
.aa52	e5 0e		sbc $0e				sbc tohold
.aa54	95 25		sta $25,x			sta DStack+0,x
.aa56	a9 00		lda #$00			lda #0
.aa58	95 26		sta $26,x			sta DStack+1,x
=27					CL	.var *-(WordListLink+wh_Xt)
=$aa5a					en = *	; remember here
>aa3d	1b					.byte CL	;wh_CodeLength
.aa5a	60		rts				rts
>aa5b	48 6f 6c 64			L1:	.text "Hold"	;  name of word as a string, ending at wh_NameLastChar
>aa5f	04					.byte *-L1	;wh_NameLength	length of name
>aa60	ba a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa62	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa63	08					.byte NN	;wh_Flags	dictionary flags
=43487					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa64	20 39 b2	jsr $b239	Hold:		jsr PopA
.aa67	c6 0e		dec $0e		Hold_A:		dec tohold
.aa69	a4 0e		ldy $0e				ldy tohold
.aa6b	91 00		sta ($00),y			sta (cp),y
=9					CL	.var *-(WordListLink+wh_Xt)
=$aa6d					en = *	; remember here
>aa62	09					.byte CL	;wh_CodeLength
.aa6d	60		rts				rts
>aa6e	23				L1:	.text "#"	;  name of word as a string, ending at wh_NameLastChar
>aa6f	01					.byte *-L1	;wh_NameLength	length of name
>aa70	df a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa72	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa73	18					.byte UF+NN	;wh_Flags	dictionary flags
=43503					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa74					Number_Sign:
.aa74	20 a8 b2	jsr $b2a8			jsr underflow_2		; double number
.aa77	a9 00		lda #$00			lda #0			;   init remainder
.aa79	18		clc				clc
.aa7a	a0 21		ldy #$21			ldy #32+1		;   for each bit
.aa7c					_11:
.aa7c	2a		rol a				rol a			;   shift remainder
.aa7d	cd 00 03	cmp $0300			cmp base		;   will it fit?
.aa80	90 03		bcc $aa85			bcc _27
.aa82	ed 00 03	sbc $0300			sbc base
.aa85					_27:
.aa85	36 27		rol $27,x			rol DStack+2,x		;   shift ud
.aa87	36 28		rol $28,x			rol DStack+3,x
.aa89	36 25		rol $25,x			rol DStack+0,x
.aa8b	36 26		rol $26,x			rol DStack+1,x
.aa8d	88		dey				dey
.aa8e	d0 ec		bne $aa7c			bne _11
.aa90	c9 0a		cmp #$0a			cmp #9+1		; alternatively this could use s_abc_upper
.aa92	90 02		bcc $aa96			bcc +
.aa94	69 06		adc #$06			adc #7-1
.aa96	69 30		adc #$30	+		adc #'0'
.aa98	d0 cd		bne $aa67			bne Hold_A
=38					CL	.var *-(WordListLink+wh_Xt)
=$aa9a					en = *	; remember here
>aa72	26					.byte CL	;wh_CodeLength
>aa9a	23 53				L1:	.text "#S"	;  name of word as a string, ending at wh_NameLastChar
>aa9c	02					.byte *-L1	;wh_NameLength	length of name
>aa9d	ef a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa9f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aaa0	18					.byte UF+NN	;wh_Flags	dictionary flags
=43548					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aaa1					Number_Sign_S:
.aaa1					_loop:
.aaa1	20 74 aa	jsr $aa74			jsr Number_sign	; convert a single number ("#")
.aaa4	b5 25		lda $25,x			lda DStack+0,x	; stop when double-celled number in TOS is zero
.aaa6	15 26		ora $26,x			ora DStack+1,x
.aaa8	15 27		ora $27,x			ora DStack+2,x
.aaaa	15 28		ora $28,x			ora DStack+3,x
.aaac	d0 f3		bne $aaa1			bne _loop
=13					CL	.var *-(WordListLink+wh_Xt)
=$aaae					en = *	; remember here
>aa9f	0d					.byte CL	;wh_CodeLength
.aaae	60		rts				rts
>aaaf	53 69 67 6e			L1:	.text "Sign"	;  name of word as a string, ending at wh_NameLastChar
>aab3	04					.byte *-L1	;wh_NameLength	length of name
>aab4	1c aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aab6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aab7	08					.byte NN	;wh_Flags	dictionary flags
=43571					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aab8	20 55 b2	jsr $b255	Sign:		jsr PopYA
.aabb	98		tya				tya		; test MSB of TOS
.aabc					Sign_P:
.aabc	30 01		bmi $aabf			bmi _minus
.aabe	60		rts				rts
.aabf	a9 2d		lda #$2d	_minus:		lda #'-'	; add minus sign
.aac1	d0 a4		bne $aa67			bne hold_a
=11					CL	.var *-(WordListLink+wh_Xt)
=$aac3					en = *	; remember here
>aab6	0b					.byte CL	;wh_CodeLength
>aac3	50 61 64			L1:	.text "Pad"	;  name of word as a string, ending at wh_NameLastChar
>aac6	03					.byte *-L1	;wh_NameLength	length of name
>aac7	33 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aac9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aaca	00					.byte 0	;wh_Flags	dictionary flags
=43590					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aacb					Pad:
.aacb	ca		dex				dex		; push cp+padoffset
.aacc	ca		dex				dex
.aacd	18		clc				clc
.aace	a5 00		lda $00				lda cp+0
.aad0	69 54		adc #$54			adc #padoffset
.aad2	95 25		sta $25,x			sta DStack+0,x
.aad4	a5 01		lda $01				lda cp+1
.aad6	69 00		adc #$00			adc #0
.aad8	95 26		sta $26,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$aada					en = *	; remember here
>aac9	0f					.byte CL	;wh_CodeLength
.aada	60		rts				rts
>aadb	43 6c 65 61 76 65		L1:	.text "Cleave"	;  name of word as a string, ending at wh_NameLastChar
>aae1	06					.byte *-L1	;wh_NameLength	length of name
>aae2	46 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aae4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aae5	18					.byte UF+NN	;wh_Flags	dictionary flags
=43617					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aae6					Cleave:
.aae6	20 a8 b2	jsr $b2a8			jsr underflow_2
.aae9	20 c3 c2	jsr $c2c3			jsr Minus_leading	; -LEADING ( addr u )
.aaec	20 06 c2	jsr $c206			jsr Input_To_R	; save old imput state
.aaef	b5 25		lda $25,x			lda DStack+0,x	; u is new ciblen
.aaf1	85 06		sta $06				sta ciblen
.aaf3	b5 26		lda $26,x			lda DStack+1,x
.aaf5	85 07		sta $07				sta ciblen+1
.aaf7	b5 27		lda $27,x			lda DStack+2,x	; addr is new cib
.aaf9	85 04		sta $04				sta cib
.aafb	b5 28		lda $28,x			lda DStack+3,x
.aafd	85 05		sta $05				sta cib+1
.aaff	a9 00		lda #$00			lda #0
.ab01	85 08		sta $08				sta toin	; >IN pointer is zero
.ab03	85 09		sta $09				sta toin+1
.ab05	20 d1 b8	jsr $b8d1			jsr parse_name	; ( addr u addr-s u-s )
.ab08	b5 25		lda $25,x			lda DStack+0,x
.ab0a	15 26		ora $26,x			ora DStack+1,x
.ab0c	f0 23		beq $ab31			beq _done
.ab0e	38		sec				sec
.ab0f	b5 29		lda $29,x			lda DStack+4,x	; LSB of original u
.ab11	f5 25		sbc $25,x			sbc DStack+0,x
.ab13	95 29		sta $29,x			sta DStack+4,x
.ab15	b5 2a		lda $2a,x			lda DStack+5,x	; MSB of original u
.ab17	f5 26		sbc $26,x			sbc DStack+1,x
.ab19	95 2a		sta $2a,x			sta DStack+5,x
.ab1b	18		clc				clc
.ab1c	b5 2b		lda $2b,x			lda DStack+6,x	; LSB of original addr
.ab1e	75 25		adc $25,x			adc DStack+0,x
.ab20	95 2b		sta $2b,x			sta DStack+6,x
.ab22	b5 2c		lda $2c,x			lda DStack+7,x	; MSB of original addr
.ab24	75 26		adc $26,x			adc DStack+1,x
.ab26	95 2c		sta $2c,x			sta DStack+7,x
.ab28	20 29 c3	jsr $c329			jsr Two_swap		; ( addr-s u-s addr u )
.ab2b	20 c3 c2	jsr $c2c3			jsr Minus_leading
.ab2e	20 29 c3	jsr $c329			jsr Two_swap		; ( addr u addr-s u-s )
.ab31					_done:
.ab31	20 28 c2	jsr $c228			jsr R_To_Input
=78					CL	.var *-(WordListLink+wh_Xt)
=$ab34					en = *	; remember here
>aae4	4e					.byte CL	;wh_CodeLength
.ab34	60		rts				rts
>ab35	48 65 78 53 74 6f 72 65		L1:	.text "HexStore"	;  name of word as a string, ending at wh_NameLastChar
>ab3d	08					.byte *-L1	;wh_NameLength	length of name
>ab3e	61 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab40	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab41	18					.byte UF+NN	;wh_Flags	dictionary flags
=43709					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab42					Hexstore:
.ab42	20 ad b2	jsr $b2ad			jsr underflow_3
.ab45	20 4a cd	jsr $cd4a			jsr Dup		; Save copy of original address
.ab48	20 2a c4	jsr $c42a			jsr Two_to_r		; ( addr1 u1 ) ( R: addr2 addr2 )
.ab4b					_loop:
.ab4b	b5 25		lda $25,x			lda DStack+0,x
.ab4d	15 26		ora $26,x			ora DStack+1,x
.ab4f	f0 37		beq $ab88			beq _done
.ab51	20 e6 aa	jsr $aae6			jsr Cleave		; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.ab54	20 2a c4	jsr $c42a			jsr Two_to_r
.ab57	20 36 b6	jsr $b636			jsr Zero
.ab5a	20 36 b6	jsr $b636			jsr Zero
.ab5d	20 05 c4	jsr $c405			jsr Two_r_from	; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.ab60	20 87 ae	jsr $ae87			jsr To_Number	; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.ab63	b5 25		lda $25,x			lda DStack+0,x
.ab65	15 26		ora $26,x			ora DStack+1,x
.ab67	d0 18		bne $ab81			bne _have_chars_left
.ab69	20 17 c3	jsr $c317			jsr Two_drop		; ( addr1 u1 n n ) ( R: addr2 addr2 )
.ab6c	20 57 be	jsr $be57			jsr D_To_S		; ( addr1 u1 n ) ( R: addr2 addr2 )
.ab6f	20 0a cd	jsr $cd0a			jsr R_Fetch		; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.ab72	20 60 cb	jsr $cb60			jsr C_Store		; ( addr1 u1 ) ( R: addr2 addr2 )
.ab75	20 ee cc	jsr $ccee			jsr R_From		; R>
.ab78	20 4c c8	jsr $c84c			jsr One_plus		; 1+
.ab7b	20 cf cc	jsr $cccf			jsr To_R		; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.ab7e	4c 4b ab	jmp $ab4b			jmp _loop
.ab81					_have_chars_left:
.ab81	8a		txa				txa
.ab82	18		clc				clc
.ab83	69 08		adc #$08			adc #8
.ab85	aa		tax				tax
.ab86	d0 c3		bne $ab4b			bne _loop
.ab88					_done:
.ab88	e8		inx				inx
.ab89	e8		inx				inx
.ab8a	e8		inx				inx
.ab8b	e8		inx				inx			; 2DROP
.ab8c	20 05 c4	jsr $c405			jsr Two_r_from		; ( addr2+n addr2 )
.ab8f	20 68 cd	jsr $cd68			jsr Swap
.ab92	4c ad c9	jmp $c9ad			jmp Minus		; ( n )
=83					CL	.var *-(WordListLink+wh_Xt)
=$ab95					en = *	; remember here
>ab40	53					.byte CL	;wh_CodeLength
>ab95	57 69 74 68 69 6e		L1:	.text "Within"	;  name of word as a string, ending at wh_NameLastChar
>ab9b	06					.byte *-L1	;wh_NameLength	length of name
>ab9c	bd aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab9e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab9f	18					.byte UF+NN	;wh_Flags	dictionary flags
=43803					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aba0					Within:
.aba0	20 ad b2	jsr $b2ad			jsr underflow_3
.aba3	20 21 cd	jsr $cd21			jsr Over
.aba6	20 ad c9	jsr $c9ad			jsr Minus
.aba9	20 cf cc	jsr $cccf			jsr To_R
.abac	20 ad c9	jsr $c9ad			jsr Minus
.abaf	20 ee cc	jsr $ccee			jsr R_From
.abb2	4c 6e c6	jmp $c66e			jmp U_Less_Than
=21					CL	.var *-(WordListLink+wh_Xt)
=$abb5					en = *	; remember here
>ab9e	15					.byte CL	;wh_CodeLength
>abb5	5c				L1:	.text "\"	;  name of word as a string, ending at wh_NameLastChar
>abb6	01					.byte *-L1	;wh_NameLength	length of name
>abb7	1b ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abb9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abba	0c					.byte IM+NN	;wh_Flags	dictionary flags
=43830					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abbb					Backslash:
.abbb	ad 0c 03	lda $030c			lda BlkV+0		; interpreting a block?
.abbe	0d 0d 03	ora $030d			ora BlkV+1
.abc1	f0 0e		beq $abd1			beq _not_block
.abc3	a5 08		lda $08		                lda toin+0		; Move toin to next multiple of 64.
.abc5	29 c0		and #$c0	                and #$C0        	;   Clear lower bits to move to beginning of line.
.abc7	18		clc		                clc             	;   Add $40 (64 decimal) to move to next line.
.abc8	69 40		adc #$40	                adc #$40
.abca	85 08		sta $08		                sta toin+0
.abcc	90 0b		bcc $abd9	                bcc _rts
.abce	e6 09		inc $09		                inc toin+1
.abd0	60		rts				rts
.abd1					_not_block:
.abd1	a5 06		lda $06		                lda ciblen+0
.abd3	85 08		sta $08		                sta toin+0
.abd5	a5 07		lda $07		                lda ciblen+1
.abd7	85 09		sta $09		                sta toin+1
=30					CL	.var *-(WordListLink+wh_Xt)
=$abd9					en = *	; remember here
>abb9	1e					.byte CL	;wh_CodeLength
.abd9	60		rts		_rts:		rts
>abda	4d 6f 76 65			L1:	.text "Move"	;  name of word as a string, ending at wh_NameLastChar
>abde	04					.byte *-L1	;wh_NameLength	length of name
>abdf	36 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abe1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abe2	18					.byte NN+UF	;wh_Flags	dictionary flags
=43870					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abe3					Move:
.abe3	b5 28		lda $28,x			lda DStack+3,x		; MSB of addr2
.abe5	d5 2a		cmp $2a,x			cmp DStack+5,x		; MSB of addr1
.abe7	d0 04		bne $abed			bne _ne
.abe9	b5 27		lda $27,x			lda DStack+2,x		; LSB of addr2
.abeb	d5 29		cmp $29,x			cmp DStack+4,x		; LSB of addr1
.abed	90 5a		bcc $ac49	_ne:		bcc CMove
.abef	d0 11		bne $ac02			bne CMove_up
.abf1					_equal:
.abf1	8a		txa		ThreeDrop:	txa		; drop three entries from Data Stack
.abf2	18		clc				clc
.abf3	69 06		adc #$06			adc #6
.abf5	aa		tax				tax
=19					CL	.var *-(WordListLink+wh_Xt)
=$abf6					en = *	; remember here
>abe1	13					.byte CL	;wh_CodeLength
.abf6	60		rts				rts
>abf7	43 4d 6f 76 65 3e		L1:	.text "CMove>"	;  name of word as a string, ending at wh_NameLastChar
>abfd	06					.byte *-L1	;wh_NameLength	length of name
>abfe	5e ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac00	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac01	18					.byte UF+NN	;wh_Flags	dictionary flags
=43901					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac02					CMove_up:
.ac02	20 ad b2	jsr $b2ad			jsr underflow_3
.ac05	b5 27		lda $27,x			lda DStack+2,x
.ac07	85 17		sta $17				sta tmp2	; use tmp2 because easier to remember
.ac09	b5 28		lda $28,x			lda DStack+3,x
.ac0b	18		clc				clc
.ac0c	75 26		adc $26,x			adc DStack+1,x
.ac0e	85 18		sta $18				sta tmp2+1	; point to last page of destination
.ac10	b5 29		lda $29,x			lda DStack+4,x
.ac12	85 15		sta $15				sta tmp1	; use tmp1 because easier to remember
.ac14	b5 2a		lda $2a,x			lda DStack+5,x
.ac16	18		clc				clc
.ac17	75 26		adc $26,x			adc DStack+1,x
.ac19	85 16		sta $16				sta tmp1+1	; point to last page of source
.ac1b	f6 26		inc $26,x			inc DStack+1,x	; allows us to use bne with dec DStack+1,x below
.ac1d	b4 25		ldy $25,x			ldy DStack+0,x	; length of last page
.ac1f	f0 10		beq $ac31			beq _nopartial
.ac21					_outerloop:
.ac21	88		dey				dey
.ac22	f0 07		beq $ac2b			beq _finishpage
.ac24					_innerloop:
.ac24	b1 15		lda ($15),y			lda (tmp1),y
.ac26	91 17		sta ($17),y			sta (tmp2),y
.ac28	88		dey				dey
.ac29	d0 f9		bne $ac24			bne _innerloop
.ac2b					_finishpage:
.ac2b	a0 00		ldy #$00			ldy #0
.ac2d	b1 15		lda ($15),y			lda (tmp1),y	; handle y = 0 separately
.ac2f	91 17		sta ($17),y			sta (tmp2),y
.ac31					_nopartial:
.ac31	c6 16		dec $16				dec tmp1+1	; back up to previous pages
.ac33	c6 18		dec $18				dec tmp2+1
.ac35	d6 26		dec $26,x			dec DStack+1,x
.ac37	d0 e8		bne $ac21			bne _outerloop
.ac39					_done:
.ac39	4c f1 ab	jmp $abf1			jmp ThreeDrop	; clear up the stack and leave
=58					CL	.var *-(WordListLink+wh_Xt)
=$ac3c					en = *	; remember here
>ac00	3a					.byte CL	;wh_CodeLength
.ac3c	4c 7f b2	jmp $b27f	Throw_Underflow_14: jmp Throw_Underflow
>ac3f	43 4d 6f 76 65			L1:	.text "CMove"	;  name of word as a string, ending at wh_NameLastChar
>ac44	05					.byte *-L1	;wh_NameLength	length of name
>ac45	7d ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac47	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac48	18					.byte UF+NN	;wh_Flags	dictionary flags
=43972					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac49					CMove:
.ac49	20 ad b2	jsr $b2ad			jsr underflow_3
.ac4c	b5 27		lda $27,x			lda DStack+2,x
.ac4e	85 17		sta $17				sta tmp2	; use tmp2 because easier to remember
.ac50	b5 28		lda $28,x			lda DStack+3,x
.ac52	85 18		sta $18				sta tmp2+1
.ac54	b5 29		lda $29,x			lda DStack+4,x
.ac56	85 15		sta $15				sta tmp1	; use tmp1 because easier to remember
.ac58	b5 2a		lda $2a,x			lda DStack+5,x
.ac5a	85 16		sta $16				sta tmp1+1
.ac5c	a0 00		ldy #$00			ldy #0
.ac5e	b5 26		lda $26,x			lda DStack+1,x	; number of whole pages to move
.ac60	f0 0f		beq $ac71			beq _dopartial
.ac62					_page:
.ac62	b1 15		lda ($15),y			lda (tmp1),y
.ac64	91 17		sta ($17),y			sta (tmp2),y
.ac66	c8		iny				iny
.ac67	d0 f9		bne $ac62			bne _page
.ac69	e6 16		inc $16				inc tmp1+1
.ac6b	e6 18		inc $18				inc tmp2+1
.ac6d	d6 26		dec $26,x			dec DStack+1,x
.ac6f	d0 f1		bne $ac62			bne _page
.ac71					_dopartial:
.ac71	b5 25		lda $25,x			lda DStack+0,x	; length of last page
.ac73	f0 09		beq $ac7e			beq _done
.ac75					_partial:
.ac75	b1 15		lda ($15),y			lda (tmp1),y
.ac77	91 17		sta ($17),y			sta (tmp2),y
.ac79	c8		iny				iny
.ac7a	d6 25		dec $25,x			dec DStack+0,x
.ac7c	d0 f7		bne $ac75			bne _partial
.ac7e	4c f1 ab	jmp $abf1	_done:		jmp ThreeDrop	; clear the stack
=56					CL	.var *-(WordListLink+wh_Xt)
=$ac81					en = *	; remember here
>ac47	38					.byte CL	;wh_CodeLength
>ac81	55 4d 2a			L1:	.text "UM*"	;  name of word as a string, ending at wh_NameLastChar
>ac84	03					.byte *-L1	;wh_NameLength	length of name
>ac85	c4 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac87	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac88	08					.byte NN	;wh_Flags	dictionary flags
=44036					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac89					UM_Star:
.ac89	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ac8b	b0 af		bcs $ac3c		bcs Throw_Underflow_14
.ac8d	18		clc				clc		; tmp2= divsor-1
.ac8e	b5 25		lda $25,x			lda DStack+0,x
.ac90	e9 00		sbc #$00			sbc #0
.ac92	85 17		sta $17				sta tmp2+0
.ac94	b5 26		lda $26,x			lda DStack+1,x
.ac96	e9 00		sbc #$00			sbc #0
.ac98	85 18		sta $18				sta tmp2+1
.ac9a	90 2e		bcc $acca			bcc _zero	; is divisor zero?
.ac9c	a9 00		lda #$00			lda #0
.ac9e	85 15		sta $15				sta tmp1
.aca0	86 19		stx $19				stx tmp3	; tested for exit from outer loop
.aca2	ca		dex				dex
.aca3	ca		dex				dex
.aca4					_outer_loop:
.aca4	a0 08		ldy #$08			ldy #8		; counter inner loop
.aca6	56 29		lsr $29,x			lsr DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.aca8					_inner_loop:
.aca8	90 0c		bcc $acb6			bcc _no_add
.acaa	85 16		sta $16				sta tmp1+1	; save time, don't CLC
.acac	a5 15		lda $15				lda tmp1
.acae	65 17		adc $17				adc tmp2
.acb0	85 15		sta $15				sta tmp1
.acb2	a5 16		lda $16				lda tmp1+1
.acb4	65 18		adc $18				adc tmp2+1
.acb6					_no_add:
.acb6	6a		ror a				ror
.acb7	66 15		ror $15				ror tmp1
.acb9	76 29		ror $29,x			ror DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.acbb	88		dey				dey
.acbc	d0 ea		bne $aca8			bne _inner_loop ; go back for one more shift?
.acbe	e8		inx				inx
.acbf	e4 19		cpx $19				cpx tmp3
.acc1	d0 e1		bne $aca4			bne _outer_loop ; go back for eight more shifts?
.acc3	95 26		sta $26,x			sta DStack+1,x
.acc5	a5 15		lda $15				lda tmp1
.acc7	95 25		sta $25,x			sta DStack+0,x
.acc9	60		rts				rts
.acca	a9 00		lda #$00	_zero:		lda #0
.accc	95 27		sta $27,x			sta DStack+2,x
.acce	95 28		sta $28,x			sta DStack+3,x
.acd0	60		rts				rts
=72					CL	.var *-(WordListLink+wh_Xt)
=$acd1					en = *	; remember here
>ac87	48					.byte CL	;wh_CodeLength
>acd1	4d 2a				L1:	.text "M*"	;  name of word as a string, ending at wh_NameLastChar
>acd3	02					.byte *-L1	;wh_NameLength	length of name
>acd4	04 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>acd6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acd7	08					.byte NN	;wh_Flags	dictionary flags
=44115					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.acd8					M_Star:
.acd8	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.acda	b0 6d		bcs $ad49		bcs Throw_Underflow_15
.acdc	b5 26		lda $26,x			lda DStack+1,x	; MSB of n1
.acde	55 28		eor $28,x			eor DStack+3,x	; MSB of n2
.ace0	48		pha				pha
.ace1	20 89 c4	jsr $c489			jsr Abs
.ace4	20 68 cd	jsr $cd68			jsr Swap
.ace7	20 89 c4	jsr $c489			jsr Abs
.acea	20 89 ac	jsr $ac89			jsr UM_Star		; ( d )
.aced	68		pla				pla
.acee	10 03		bpl $acf3			bpl _done
.acf0	4c a1 c4	jmp $c4a1			jmp DNegate
.acf3					_done:
=27					CL	.var *-(WordListLink+wh_Xt)
=$acf3					en = *	; remember here
>acd6	1b					.byte CL	;wh_CodeLength
.acf3	60		rts				rts
>acf4	2a				L1:	.text "*"	;  name of word as a string, ending at wh_NameLastChar
>acf5	01					.byte *-L1	;wh_NameLength	length of name
>acf6	53 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>acf8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acf9	00					.byte 0	;wh_Flags	dictionary flags
=44149					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.acfa					Star:
.acfa	20 89 ac	jsr $ac89			jsr UM_Star
.acfd	e8		inx				inx		; UD>U	drop hi cell
.acfe	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$acff					en = *	; remember here
>acf8	05					.byte CL	;wh_CodeLength
.acff	60		rts				rts
>ad00	55 4d 2f 4d 6f 64		L1:	.text "UM/Mod"	;  name of word as a string, ending at wh_NameLastChar
>ad06	06					.byte *-L1	;wh_NameLength	length of name
>ad07	75 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad09	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad0a	08					.byte NN	;wh_Flags	dictionary flags
=44166					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad0b					UM_Slash_Mod:
.ad0b	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ad0d	b0 3a		bcs $ad49		bcs Throw_Underflow_15
.ad0f	b5 25		lda $25,x			lda DStack+0,x		; catch division by zero
.ad11	15 26		ora $26,x			ora DStack+1,x
.ad13	f0 2f		beq $ad44			beq _DivByZero
.ad15	a0 10		ldy #$10			ldy #16			; for 16 bits
.ad17					_loop:
.ad17	36 29		rol $29,x			rol DStack+4,x		;   rotate low cell of dividend one bit left
.ad19	36 2a		rol $2a,x			rol DStack+5,x
.ad1b	36 27		rol $27,x			rol DStack+2,x		;   rotate high cell of dividend one bit left
.ad1d	36 28		rol $28,x			rol DStack+3,x
.ad1f	b0 0a		bcs $ad2b			bcs _subtract		;   overflow?
.ad21	b5 27		lda $27,x			lda DStack+2,x		;   dividend.hi >= divisor?
.ad23	d5 25		cmp $25,x			cmp DStack+0,x
.ad25	b5 28		lda $28,x			lda DStack+3,x
.ad27	f5 26		sbc $26,x			sbc DStack+1,x
.ad29	90 0d		bcc $ad38			bcc _next
.ad2b	b5 27		lda $27,x	_subtract:	lda DStack+2,x		;   dividend.hi -= divisor
.ad2d	f5 25		sbc $25,x			sbc DStack+0,x
.ad2f	95 27		sta $27,x			sta DStack+2,x
.ad31	b5 28		lda $28,x			lda DStack+3,x
.ad33	f5 26		sbc $26,x			sbc DStack+1,x
.ad35	95 28		sta $28,x			sta DStack+3,x
.ad37	38		sec				sec			;   it always fits
.ad38	88		dey		_next:		dey			;  next
.ad39	d0 dc		bne $ad17			bne _loop
.ad3b	36 29		rol $29,x			rol DStack+4,x		; finish rotating quotient bit in
.ad3d	36 2a		rol $2a,x			rol DStack+5,x
.ad3f	e8		inx				inx			; drop divisor
.ad40	e8		inx				inx
.ad41	4c 68 cd	jmp $cd68			jmp Swap
.ad44	a9 f6		lda #$f6	_DivByZero:	lda #$100+err_DivideBy0
.ad46	4c c4 b2	jmp $b2c4			jmp ThrowA
=62					CL	.var *-(WordListLink+wh_Xt)
=$ad49					en = *	; remember here
>ad09	3e					.byte CL	;wh_CodeLength
.ad49	4c 7f b2	jmp $b27f	Throw_Underflow_15: jmp Throw_Underflow
>ad4c	53 4d 2f 52 65 6d		L1:	.text "SM/Rem"	;  name of word as a string, ending at wh_NameLastChar
>ad52	06					.byte *-L1	;wh_NameLength	length of name
>ad53	86 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad55	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad56	08					.byte NN	;wh_Flags	dictionary flags
=44242					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad57					SM_Slash_Rem:
.ad57	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ad59	b0 ee		bcs $ad49		bcs Throw_Underflow_15
.ad5b	b5 28		lda $28,x			lda DStack+3,x
.ad5d	48		pha				pha
.ad5e	b5 26		lda $26,x			lda DStack+1,x
.ad60	55 28		eor $28,x			eor DStack+3,x
.ad62	48		pha				pha
.ad63	20 89 c4	jsr $c489			jsr Abs
.ad66	e8		inx				inx		; pretend we pushed n1 to R
.ad67	e8		inx				inx
.ad68	20 be c4	jsr $c4be			jsr DAbs
.ad6b	ca		dex				dex
.ad6c	ca		dex				dex
.ad6d	20 0b ad	jsr $ad0b			jsr UM_Slash_Mod	; UM/MOD
.ad70	68		pla				pla
.ad71	10 03		bpl $ad76			bpl +
.ad73	20 70 c4	jsr $c470			jsr Negate
.ad76					+
.ad76	68		pla				pla
.ad77	10 07		bpl $ad80			bpl _done
.ad79	e8		inx				inx		; pretend we pushed quotient to R
.ad7a	e8		inx				inx
.ad7b	20 70 c4	jsr $c470			jsr Negate
.ad7e	ca		dex				dex
.ad7f	ca		dex				dex
.ad80					_done:
=41					CL	.var *-(WordListLink+wh_Xt)
=$ad80					en = *	; remember here
>ad55	29					.byte CL	;wh_CodeLength
.ad80	60		rts				rts
>ad81	46 4d 2f 4d 6f 64		L1:	.text "FM/Mod"	;  name of word as a string, ending at wh_NameLastChar
>ad87	06					.byte *-L1	;wh_NameLength	length of name
>ad88	d2 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad8a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad8b	08					.byte NN	;wh_Flags	dictionary flags
=44295					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad8c					FM_Slash_Mod:
.ad8c	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ad8e	b0 b9		bcs $ad49		bcs Throw_Underflow_15
.ad90	b5 26		lda $26,x			lda DStack+1,x	; MSB of n1
.ad92	08		php				php		;  save sign
.ad93	10 0e		bpl $ada3			bpl _check_d
.ad95	e6 17		inc $17				inc tmp2	; set flag to negative for n1
.ad97	20 70 c4	jsr $c470			jsr Negate	; NEGATE
.ad9a	20 cf cc	jsr $cccf			jsr To_R	; >R
.ad9d	20 a1 c4	jsr $c4a1			jsr DNegate	; DNEGATE
.ada0	20 ee cc	jsr $ccee			jsr R_From	; R>
.ada3					_check_d:
.ada3	b5 28		lda $28,x			lda DStack+3,x	; MSB of high word of d
.ada5	10 0d		bpl $adb4			bpl _multiply
.ada7	18		clc				clc
.ada8	b5 25		lda $25,x			lda DStack+0,x	; LSB of n1
.adaa	75 27		adc $27,x			adc DStack+2,x	; LSB of dh
.adac	95 27		sta $27,x			sta DStack+2,x
.adae	b5 26		lda $26,x			lda DStack+1,x	; MSB of n1
.adb0	75 28		adc $28,x			adc DStack+3,x	; MSB of dh
.adb2	95 28		sta $28,x			sta DStack+3,x
.adb4					_multiply:
.adb4	20 0b ad	jsr $ad0b			jsr UM_Slash_Mod	; ( d n1 -- rem n2 )
.adb7	28		plp				plp
.adb8	10 07		bpl $adc1			bpl _done
.adba	e8		inx				inx		; pretend that we SWAP
.adbb	e8		inx				inx
.adbc	20 70 c4	jsr $c470			jsr Negate
.adbf	ca		dex				dex
.adc0	ca		dex				dex
.adc1					_done:
=53					CL	.var *-(WordListLink+wh_Xt)
=$adc1					en = *	; remember here
>ad8a	35					.byte CL	;wh_CodeLength
.adc1	60		rts				rts
>adc2	2f 4d 6f 64			L1:	.text "/Mod"	;  name of word as a string, ending at wh_NameLastChar
>adc6	04					.byte *-L1	;wh_NameLength	length of name
>adc7	07 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>adc9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>adca	08					.byte NN	;wh_Flags	dictionary flags
=44358					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.adcb	20 4a cd	jsr $cd4a	Slash_Mod:	jsr Dup			; ( n1 n_div n_div )
.adce	a0 00		ldy #$00			ldy #0			; sign extend n1
.add0	b5 2a		lda $2a,x			lda DStack+5,x
.add2	10 01		bpl $add5			bpl +
.add4	88		dey				dey
.add5	94 27		sty $27,x	+		sty DStack+2,x
.add7	94 28		sty $28,x			sty DStack+3,x		; ( d1 n_div )
.add9	4c 57 ad	jmp $ad57			jmp SM_Slash_Rem	; SM/REM
=17					CL	.var *-(WordListLink+wh_Xt)
=$addc					en = *	; remember here
>adc9	11					.byte CL	;wh_CodeLength
>addc	2f				L1:	.text "/"	;  name of word as a string, ending at wh_NameLastChar
>addd	01					.byte *-L1	;wh_NameLength	length of name
>adde	46 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ade0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ade1	08					.byte NN	;wh_Flags	dictionary flags
=44381					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ade2	20 cb ad	jsr $adcb	Slash:		jsr Slash_Mod
.ade5	4c 71 c7	jmp $c771			jmp Nip		; Nip remainder
=6					CL	.var *-(WordListLink+wh_Xt)
=$ade8					en = *	; remember here
>ade0	06					.byte CL	;wh_CodeLength
>ade8	4d 6f 64			L1:	.text "Mod"	;  name of word as a string, ending at wh_NameLastChar
>adeb	03					.byte *-L1	;wh_NameLength	length of name
>adec	5d ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>adee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>adef	00					.byte 0	;wh_Flags	dictionary flags
=44395					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.adf0	20 cb ad	jsr $adcb	Mod:		jsr Slash_Mod
.adf3	e8		inx				inx		; Drop quotient
.adf4	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$adf5					en = *	; remember here
>adee	05					.byte CL	;wh_CodeLength
.adf5	60		rts				rts
>adf6	2a 2f 4d 6f 64			L1:	.text "*/Mod"	;  name of word as a string, ending at wh_NameLastChar
>adfb	05					.byte *-L1	;wh_NameLength	length of name
>adfc	6b ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>adfe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>adff	18					.byte UF+NN	;wh_Flags	dictionary flags
=44411					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae00					Star_Slash_Mod:
.ae00	20 ad b2	jsr $b2ad			jsr underflow_3
.ae03	20 cf cc	jsr $cccf			jsr To_R
.ae06	20 d8 ac	jsr $acd8			jsr M_Star
.ae09	20 ee cc	jsr $ccee			jsr R_From
.ae0c	4c 57 ad	jmp $ad57			jmp SM_Slash_Rem
=15					CL	.var *-(WordListLink+wh_Xt)
=$ae0f					en = *	; remember here
>adfe	0f					.byte CL	;wh_CodeLength
>ae0f	2a 2f				L1:	.text "*/"	;  name of word as a string, ending at wh_NameLastChar
>ae11	02					.byte *-L1	;wh_NameLength	length of name
>ae12	7b ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae14	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae15	08					.byte NN	;wh_Flags	dictionary flags
=44433					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae16					Star_Slash:
.ae16	20 00 ae	jsr $ae00			jsr Star_Slash_Mod
.ae19	4c 71 c7	jmp $c771			jmp Nip			; mod
=6					CL	.var *-(WordListLink+wh_Xt)
=$ae1c					en = *	; remember here
>ae14	06					.byte CL	;wh_CodeLength
>ae1c	45 76 61 6c 75 61 74 65		L1:	.text "Evaluate"	;  name of word as a string, ending at wh_NameLastChar
>ae24	08					.byte *-L1	;wh_NameLength	length of name
>ae25	91 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae27	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae28	18					.byte UF+NN	;wh_Flags	dictionary flags
=44452					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae29					Evaluate:
.ae29	20 a8 b2	jsr $b2a8			jsr underflow_2
.ae2c	a9 00		lda #$00			lda #0
.ae2e	85 15		sta $15				sta tmp1
.ae30	b5 25		lda $25,x			lda DStack+0,x
.ae32	15 26		ora $26,x			ora DStack+1,x
.ae34	d0 07		bne $ae3d			bne evaluate_got_work
.ae36	4c 17 c3	jmp $c317			jmp Two_Drop
.ae39					load_evaluate:
.ae39	a9 ff		lda #$ff			lda #$FF
.ae3b	85 15		sta $15				sta tmp1
.ae3d					load_evaluate_start:
.ae3d					evaluate_got_work:
.ae3d	ad 0d 03	lda $030d			lda BlkV+1	; Save the current value of BLK on the return stack.
.ae40	48		pha				pha
.ae41	ad 0c 03	lda $030c			lda BlkV+0
.ae44	48		pha				pha
.ae45	a5 15		lda $15				lda tmp1	; See if we should zero BLK.
.ae47	d0 06		bne $ae4f			bne _nozero
.ae49	8d 0c 03	sta $030c			sta BlkV+0
.ae4c	8d 0d 03	sta $030d			sta BlkV+1
.ae4f					_nozero:
.ae4f	20 06 c2	jsr $c206			jsr Input_To_R	; Save the input state to the Return Stack
.ae52	a9 ff		lda #$ff			lda #$ff	; set SOURCE-ID to -1
.ae54	85 02		sta $02				sta insrc+0
.ae56	85 03		sta $03				sta insrc+1
.ae58	a9 00		lda #$00			lda #0		; set >IN to zero
.ae5a	85 08		sta $08				sta toin+0
.ae5c	85 09		sta $09				sta toin+1
.ae5e	20 55 b2	jsr $b255			jsr PopYA	; pop u
.ae61	85 06		sta $06				sta ciblen+0
.ae63	84 07		sty $07				sty ciblen+1
.ae65	20 55 b2	jsr $b255			jsr PopYA	; pop addr
.ae68	85 04		sta $04				sta cib+0
.ae6a	84 05		sty $05				sty cib+1
.ae6c	20 7c b3	jsr $b37c			jsr interpret	; ( -- )
.ae6f	20 28 c2	jsr $c228			jsr R_To_Input	; restore variables
.ae72	68		pla				pla		; Restore BLK from the return stack.
.ae73	8d 0c 03	sta $030c			sta BlkV+0
.ae76	68		pla				pla
.ae77	8d 0d 03	sta $030d			sta BlkV+1
=81					CL	.var *-(WordListLink+wh_Xt)
=$ae7a					en = *	; remember here
>ae27	51					.byte CL	;wh_CodeLength
.ae7a	60		rts				rts
>ae7b	3e 4e 75 6d 62 65 72		L1:	.text ">Number"	;  name of word as a string, ending at wh_NameLastChar
>ae82	07					.byte *-L1	;wh_NameLength	length of name
>ae83	a4 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae85	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae86	18					.byte UF+NN	;wh_Flags	dictionary flags
=44546					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae87					To_Number:
.ae87	20 b2 b2	jsr $b2b2			jsr underflow_4
.ae8a	b5 25		lda $25,x			lda DStack+0,x		; no chars left?
.ae8c	f0 72		beq $af00			beq _done
.ae8e					_Char_loop:
.ae8e	a1 27		lda ($27,x)			lda (DStack+2,x)		; Get next character
.ae90	c9 30		cmp #$30			cmp #'0'		; convert to value (Digit_Question)
.ae92	90 6c		bcc $af00			bcc _done
.ae94	c9 3a		cmp #$3a			cmp #'9'+1
.ae96	90 08		bcc $aea0			bcc _digit
.ae98	29 df		and #$df			and #$df		;   ASCII uppercase
.ae9a	c9 41		cmp #$41			cmp #'A'
.ae9c	90 62		bcc $af00			bcc _done
.ae9e	e9 07		sbc #$07			sbc #7 ;'A'-'0'-10	;   to make 'A'=10 below
.aea0	38		sec		_digit:		sec
.aea1	e9 30		sbc #$30			sbc #'0'
.aea3	cd 00 03	cmp $0300			cmp base		; must be < base
.aea6	b0 58		bcs $af00			bcs _done
.aea8	48		pha				pha			; Save char value
.aea9	20 4b c3	jsr $c34b			jsr Two_Over		;   copy ud to work (multiplicand)
.aeac	a9 00		lda #$00			lda #0			;   zero ud (product)
.aeae	95 2d		sta $2d,x			sta DStack+8,x
.aeb0	95 2e		sta $2e,x			sta DStack+9,x
.aeb2	95 2f		sta $2f,x			sta DStack+10,x
.aeb4	95 30		sta $30,x			sta DStack+11,x
.aeb6	ad 00 03	lda $0300			lda base		;   get multiplier
.aeb9	d0 23		bne $aede			bne _Mul_Test
.aebb	48		pha		_Mul_Add:	pha			;   save multiplier
.aebc	18		clc				clc			;   ud += work
.aebd	b5 27		lda $27,x			lda DStack+2,x
.aebf	75 2f		adc $2f,x			adc DStack+10,x
.aec1	95 2f		sta $2f,x			sta DStack+10,x
.aec3	b5 28		lda $28,x			lda DStack+3,x
.aec5	75 30		adc $30,x			adc DStack+11,x
.aec7	95 30		sta $30,x			sta DStack+11,x
.aec9	b5 25		lda $25,x			lda DStack+0,x
.aecb	75 2d		adc $2d,x			adc DStack+8,x
.aecd	95 2d		sta $2d,x			sta DStack+8,x
.aecf	b5 26		lda $26,x			lda DStack+1,x
.aed1	75 2e		adc $2e,x			adc DStack+9,x
.aed3	95 2e		sta $2e,x			sta DStack+9,x
.aed5	68		pla				pla			;   restore multiplier
.aed6	16 27		asl $27,x	_Mul_Shift:	asl DStack+2,x		;   work <<= 1
.aed8	36 28		rol $28,x			rol DStack+3,x
.aeda	36 25		rol $25,x			rol DStack+0,x
.aedc	36 26		rol $26,x			rol DStack+1,x
.aede	4a		lsr a		_Mul_Test:	lsr a			;   shift multiplier
.aedf	b0 da		bcs $aebb			bcs _Mul_Add
.aee1	d0 f3		bne $aed6			bne _Mul_Shift
.aee3	e8		inx				inx			;   2Drop work
.aee4	e8		inx				inx
.aee5	e8		inx				inx
.aee6	e8		inx				inx
.aee7	68		pla				pla			; recover value
.aee8	18		clc				clc			; add to ud
.aee9	75 2b		adc $2b,x			adc DStack+6,x
.aeeb	95 2b		sta $2b,x			sta DStack+6,x
.aeed	90 0a		bcc $aef9			bcc +
.aeef	f6 2c		inc $2c,x			inc DStack+7,x
.aef1	d0 06		bne $aef9			bne +
.aef3	f6 29		inc $29,x			inc DStack+4,x
.aef5	d0 02		bne $aef9			bne +
.aef7	f6 2a		inc $2a,x			inc DStack+5,x
.aef9					+
.aef9	20 56 c8	jsr $c856			jsr NOS_One_Plus	; consume the char
.aefc	d6 25		dec $25,x			dec DStack+0,x
.aefe	d0 8e		bne $ae8e			bne _Char_loop
.af00					_done:
=121					CL	.var *-(WordListLink+wh_Xt)
=$af00					en = *	; remember here
>ae85	79					.byte CL	;wh_CodeLength
.af00	60		rts				rts
>af01	4e 75 6d 62 65 72		L1:	.text "Number"	;  name of word as a string, ending at wh_NameLastChar
>af07	06					.byte *-L1	;wh_NameLength	length of name
>af08	02 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af0a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af0b	18					.byte UF+NN	;wh_Flags	dictionary flags
=44679					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af0c					Number:
.af0c	20 a8 b2	jsr $b2a8			jsr underflow_2
.af0f	a9 00		lda #$00			lda #0
.af11	85 1b		sta $1b				sta tmp4+0	; flag for double
.af13	85 1c		sta $1c				sta tmp4+1	; flag for minus
.af15	ad 00 03	lda $0300			lda base
.af18	48		pha				pha
.af19	20 a4 ca	jsr $caa4			jsr Two_dup		; ( addr u addr u )
.af1c	a1 27		lda ($27,x)			lda (DStack+2,x)	; get 1st char
.af1e	20 e0 af	jsr $afe0			jsr _MinusCheck		; a minus sign?
.af21	a0 0a		ldy #$0a			ldy #10			; decimal?
.af23	c9 23		cmp #$23			cmp #'#'
.af25	f0 35		beq $af5c			beq _base_changed
.af27	a0 10		ldy #$10			ldy #16			; hex?
.af29	c9 24		cmp #$24			cmp #'$'
.af2b	f0 2f		beq $af5c			beq _base_changed
.af2d	a0 02		ldy #$02			ldy #2			; binary?
.af2f	c9 25		cmp #$25			cmp #'%'
.af31	f0 29		beq $af5c			beq _base_changed
.af33	c9 27		cmp #$27			cmp #$27		; ASCII for "'"
.af35	d0 2f		bne $af66			bne _check_dot
.af37	b5 25		lda $25,x			lda DStack+0,x	; length=3 ?
.af39	c9 03		cmp #$03			cmp #3
.af3b	d0 1c		bne $af59			bne _not_a_char
.af3d	b5 27		lda $27,x			lda DStack+2,x	; LSB of address
.af3f	85 1d		sta $1d				sta tmp5
.af41	b5 28		lda $28,x			lda DStack+3,x
.af43	85 1e		sta $1e				sta tmp5+1
.af45	a0 02		ldy #$02			ldy #2
.af47	b1 1d		lda ($1d),y			lda (tmp5),y
.af49	c9 27		cmp #$27			cmp #$27	; ASCII for "'"
.af4b	d0 0c		bne $af59			bne _not_a_char
.af4d	88		dey				dey		; The char we want is between the single quotes.
.af4e	b1 1d		lda ($1d),y			lda (tmp5),y
.af50	95 27		sta $27,x			sta DStack+2,x
.af52	a9 00		lda #$00			lda #0
.af54	95 28		sta $28,x			sta DStack+3,x
.af56	4c b5 af	jmp $afb5			jmp _drop_original_string ; Single flag will drop the TOS for us.
.af59					_not_a_char:
.af59	4c 92 af	jmp $af92			jmp _number_error
.af5c					_base_changed:
.af5c	8c 00 03	sty $0300			sty base	; Switch to the new base
.af5f	20 56 c8	jsr $c856			jsr NOS_One_Plus ; start one character later
.af62	d6 25		dec $25,x			dec DStack+0,x	; decrease string length by one
.af64	a1 27		lda ($27,x)			lda (DStack+2,x) ; Load the first char again
.af66					_check_dot:
.af66	20 e0 af	jsr $afe0			jsr _MinusCheck
.af69	b5 27		lda $27,x			lda DStack+2,x	; LSB of address
.af6b	85 1d		sta $1d				sta tmp5
.af6d	b5 28		lda $28,x			lda DStack+3,x
.af6f	85 1e		sta $1e				sta tmp5+1
.af71	b4 25		ldy $25,x			ldy DStack+0,x	; Y now points to the first character after the string,
.af73	88		dey				dey		; but we need the last character
.af74	b1 1d		lda ($1d),y			lda (tmp5),y
.af76	c9 2e		cmp #$2e			cmp #'.'
.af78	d0 04		bne $af7e			bne _main
.af7a	c6 1b		dec $1b				dec tmp4	; Flag the fact
.af7c	d6 25		dec $25,x			dec DStack+0,x	; reduce string length by one
.af7e					_main:
.af7e	20 a4 ca	jsr $caa4			jsr Two_Dup
.af81	a9 00		lda #$00			lda #0
.af83	95 29		sta $29,x			sta DStack+4,x	; clear ud
.af85	95 2a		sta $2a,x			sta DStack+5,x
.af87	95 2b		sta $2b,x			sta DStack+6,x
.af89	95 2c		sta $2c,x			sta DStack+7,x
.af8b	20 87 ae	jsr $ae87			jsr To_Number	; ( ud addr u -- ud addr u )
.af8e	b5 25		lda $25,x			lda DStack+0,x
.af90	f0 1f		beq $afb1			beq _all_converted
.af92					_number_error:
.af92	20 17 c3	jsr $c317			jsr Two_drop	; >NUMBER modified addr u
.af95	20 17 c3	jsr $c317			jsr Two_drop	; ud   (partially converted number)
.af98	a9 3e		lda #$3e			lda #'>'	; print the unknown
.af9a	20 b8 cb	jsr $cbb8			jsr Emit_A	; word using the original addr u we saved at the beginning.
.af9d	20 d2 cb	jsr $cbd2			jsr Type
.afa0	a9 3c		lda #$3c			lda #'<'
.afa2	20 b8 cb	jsr $cbb8			jsr Emit_A
.afa5	20 c5 cb	jsr $cbc5			jsr Space
.afa8	68		pla				pla		; restore base
.afa9	8d 00 03	sta $0300			sta base
.afac	a9 f3		lda #$f3			lda #$100+err_UndefinedWord
.afae	4c c4 b2	jmp $b2c4			jmp ThrowA
.afb1					_all_converted:
.afb1	e8		inx				inx		; Drop the current addr u
.afb2	e8		inx				inx
.afb3	e8		inx				inx
.afb4	e8		inx				inx
.afb5					_drop_original_string:
.afb5	20 20 be	jsr $be20			jsr TwoNip	 ; Drop the original addr u
.afb8	a5 1b		lda $1b				lda tmp4	; flag for double
.afba	f0 10		beq $afcc			beq _single
.afbc	a9 20		lda #$20			lda #%00100000
.afbe	05 0c		ora $0c				ora status
.afc0	85 0c		sta $0c				sta status
.afc2	a5 1c		lda $1c				lda tmp4+1
.afc4	f0 15		beq $afdb			beq _done	; no minus, all done
.afc6	20 a1 c4	jsr $c4a1			jsr DNegate
.afc9	4c db af	jmp $afdb			jmp _done
.afcc					_single:
.afcc	e8		inx				inx		; convert ud to u
.afcd	e8		inx				inx
.afce	a9 df		lda #$df			lda #$ff-%00100000
.afd0	25 0c		and $0c				and status
.afd2	85 0c		sta $0c				sta status
.afd4	a5 1c		lda $1c				lda tmp4+1
.afd6	f0 03		beq $afdb			beq _done	; no minus, all done
.afd8	20 70 c4	jsr $c470			jsr Negate
.afdb					_done:
.afdb	68		pla				pla
.afdc	8d 00 03	sta $0300			sta base
=211					CL	.var *-(WordListLink+wh_Xt)
=$afdf					en = *	; remember here
>af0a	d3					.byte CL	;wh_CodeLength
.afdf	60		rts				rts
.afe0					_MinusCheck:
.afe0	c9 2d		cmp #$2d			cmp #'-'		; a minus sign?
.afe2	d0 09		bne $afed			bne +
.afe4	c6 1c		dec $1c				dec tmp4+1		; set flag
.afe6	20 56 c8	jsr $c856			jsr NOS_One_Plus	; start one character later
.afe9	d6 25		dec $25,x			dec DStack+0,x		; decrease string length by one
.afeb	a1 27		lda ($27,x)			lda (DStack+2,x)	; get next char
.afed	60		rts		+		rts
>afee	48 65 78			L1:	.text "Hex"	;  name of word as a string, ending at wh_NameLastChar
>aff1	03					.byte *-L1	;wh_NameLength	length of name
>aff2	87 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aff4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aff5	08					.byte NN	;wh_Flags	dictionary flags
=44913					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aff6	a9 10		lda #$10	Hex:		lda #16
.aff8	d0 0e		bne $b008			bne decimal_a
=4					CL	.var *-(WordListLink+wh_Xt)
=$affa					en = *	; remember here
>aff4	04					.byte CL	;wh_CodeLength
>affa	44 65 63 69 6d 61 6c		L1:	.text "Decimal"	;  name of word as a string, ending at wh_NameLastChar
>b001	07					.byte *-L1	;wh_NameLength	length of name
>b002	71 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b004	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b005	00					.byte 0	;wh_Flags	dictionary flags
=44929					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b006	a9 0a		lda #$0a	Decimal:	lda #10
.b008	8d 00 03	sta $0300	decimal_a:	sta base+0
.b00b	a9 00		lda #$00			lda #0
.b00d	8d 01 03	sta $0301			sta base+1		; paranoid
=10					CL	.var *-(WordListLink+wh_Xt)
=$b010					en = *	; remember here
>b004	0a					.byte CL	;wh_CodeLength
.b010	60		rts				rts
>b011	43 6f 75 6e 74			L1:	.text "Count"	;  name of word as a string, ending at wh_NameLastChar
>b016	05					.byte *-L1	;wh_NameLength	length of name
>b017	81 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b019	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b01a	18					.byte UF+NN	;wh_Flags	dictionary flags
=44950					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b01b					Count:
.b01b	20 93 b2	jsr $b293			jsr underflow_1
.b01e	a1 25		lda ($25,x)			lda (DStack+0,x)	; A= number of characters
.b020	f6 25		inc $25,x			inc DStack+0,x		; move start address up by one
.b022	d0 02		bne $b026			bne +
.b024	f6 26		inc $26,x			inc DStack+1,x
.b026					+
.b026	4c 27 b6	jmp $b627			jmp PushZA		; push number of characters, return
=14					CL	.var *-(WordListLink+wh_Xt)
=$b029					en = *	; remember here
>b019	0e					.byte CL	;wh_CodeLength
>0742					DoLeave  .word ?	; head of leave addr patch chain
>0744					DoStkIndex: .byte ?
=8					DoStkDim = 8
>0745					DoIndexL: .fill DoStkDim
>074d					DoIndexH: .fill DoStkDim
>0755					DoFufaL:  .fill DoStkDim
>075d					DoFufaH:  .fill DoStkDim
>b029	3f 44 6f			L1:	.text "?Do"	;  name of word as a string, ending at wh_NameLastChar
>b02c	03					.byte *-L1	;wh_NameLength	length of name
>b02d	96 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b02f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b030	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=44972					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b031					Question_Do:
.b031	20 79 b1	jsr $b179			jsr Do_Leave_Init
.b034	a9 48		lda #$48			lda #<_runtime
.b036	a0 b0		ldy #$b0			ldy #>_runtime
.b038	20 28 cb	jsr $cb28			jsr Jsr_Comma_YA	; compile JSR _runtime
.b03b	a9 d0		lda #$d0			lda #$d0		; compile BNE *+5
.b03d	a0 03		ldy #$03			ldy #3
.b03f	20 03 cb	jsr $cb03			jsr Comma_YA
.b042	20 5c b1	jsr $b15c			jsr Leave		; compile JMP leave
.b045	4c 66 b0	jmp $b066			jmp Do_8		; finish
=23					CL	.var *-(WordListLink+wh_Xt)
=$b048					en = *	; remember here
>b02f	17					.byte CL	;wh_CodeLength
.b048					_runtime:
.b048	20 6e b0	jsr $b06e			jsr Do_Runtime	; start normally (we assume TOS!=NOS)
.b04b	a5 13		lda $13				lda DoIndex+0	; Are TOS and NOS equal?
.b04d	f0 01		beq $b050			beq _2
.b04f	60		rts				rts		; return Z=0 to signal continue
.b050	a5 14		lda $14		_2:		lda DoIndex+1
.b052	49 80		eor #$80			eor #$80
.b054	60		rts				rts		; return Z
>b055	44 6f				L1:	.text "Do"	;  name of word as a string, ending at wh_NameLastChar
>b057	02					.byte *-L1	;wh_NameLength	length of name
>b058	ac af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b05a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b05b	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45015					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b05c					Do:
.b05c	20 79 b1	jsr $b179			jsr Do_Leave_Init
.b05f	a9 6e		lda #$6e			lda #<Do_runtime
.b061	a0 b0		ldy #$b0			ldy #>Do_runtime
.b063	20 28 cb	jsr $cb28			jsr Jsr_Comma_YA	; compile JSR _runtime
.b066	20 18 c8	jsr $c818	Do_8:		jsr Here		; remember loop body start addr
.b069	a9 5c		lda #$5c			lda #<Do		; identifier
.b06b	4c 27 b6	jmp $b627			jmp PushZA
=18					CL	.var *-(WordListLink+wh_Xt)
=$b06e					en = *	; remember here
>b05a	12					.byte CL	;wh_CodeLength
.b06e					Do_Runtime:
.b06e	ce 44 07	dec $0744			dec DoStkIndex		; alloc DO stack entry
.b071	ac 44 07	ldy $0744			ldy DoStkIndex
.b074	30 2d		bmi $b0a3			bmi _TooDeep
.b076	a5 13		lda $13				lda DoIndex+0		; save previous DoIndex
.b078	99 45 07	sta $0745,y			sta DoIndexL,y
.b07b	a5 14		lda $14				lda DoIndex+1
.b07d	99 4d 07	sta $074d,y			sta DoIndexH,y
.b080	38		sec				sec			; fudge factor (FUFA)= $8000 - limit
.b081	a9 00		lda #$00			lda #0			;   the number that will trip the overflow flag
.b083	f5 27		sbc $27,x			sbc DStack+2,x
.b085	99 55 07	sta $0755,y			sta DoFuFaL,y
.b088	a9 80		lda #$80			lda #$80
.b08a	f5 28		sbc $28,x			sbc DStack+3,x
.b08c	99 5d 07	sta $075d,y			sta DoFuFaH,y
.b08f	18		clc				clc			; index= FUFA plus original index
.b090	b5 25		lda $25,x			lda DStack+0,x
.b092	79 55 07	adc $0755,y			adc DoFuFaL,y
.b095	85 13		sta $13				sta DoIndex+0
.b097	b5 26		lda $26,x			lda DStack+1,x
.b099	79 5d 07	adc $075d,y			adc DoFuFaH,y
.b09c	85 14		sta $14				sta DoIndex+1
.b09e	e8		inx				inx			; Drop orig index
.b09f	e8		inx				inx
.b0a0	e8		inx				inx			; Drop orig limit
.b0a1	e8		inx				inx
.b0a2	60		rts				rts			; return
.b0a3	a9 f9		lda #$f9	_TooDeep:	lda #$100+err_DoLoop_TooDeep
.b0a5	20 c4 b2	jsr $b2c4			jsr ThrowA
>b0a8	4c 6f 6f 70			L1:	.text "Loop"	;  name of word as a string, ending at wh_NameLastChar
>b0ac	04					.byte *-L1	;wh_NameLength	length of name
>b0ad	d7 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b0af	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b0b0	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45100					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b0b1					Loop:
.b0b1	a9 b8		lda #$b8			lda #<_Runtime
.b0b3	a0 b0		ldy #$b0			ldy #>_Runtime
.b0b5	4c d4 b0	jmp $b0d4			jmp Plus_Loop_5
=7					CL	.var *-(WordListLink+wh_Xt)
=$b0b8					en = *	; remember here
>b0af	07					.byte CL	;wh_CodeLength
.b0b8					_Runtime:
.b0b8	e6 13		inc $13				inc DoIndex+0
.b0ba	f0 02		beq $b0be			beq _Runtime2
.b0bc	b8		clv				clv			; return V=0 to signal loop back
.b0bd	60		rts				rts
.b0be	18		clc		_Runtime2:	clc
.b0bf	a5 14		lda $14				lda DoIndex+1		; handle carry from lo byte
.b0c1	69 01		adc #$01			adc #1
.b0c3	85 14		sta $14				sta DoIndex+1
.b0c5	60		rts				rts			; return V to signal loop back
>b0c6	2b 4c 6f 6f 70			L1:	.text "+Loop"	;  name of word as a string, ending at wh_NameLastChar
>b0cb	05					.byte *-L1	;wh_NameLength	length of name
>b0cc	2c b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b0ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b0cf	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45131					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b0d0					Plus_Loop:
.b0d0	a9 de		lda #$de			lda #<Plus_Loop_Runtime
.b0d2	a0 b0		ldy #$b0			ldy #>Plus_Loop_Runtime
.b0d4	20 f5 b0	jsr $b0f5	Plus_Loop_5:	jsr Loop_End		; compile JSR _runtime, BVC back
.b0d7	a9 41		lda #$41			lda #<Unloop
.b0d9	a0 b1		ldy #$b1			ldy #>Unloop
.b0db	4c 28 cb	jmp $cb28			jmp Jsr_Comma_YA	; compile JSR Unloop, return
=14					CL	.var *-(WordListLink+wh_Xt)
=$b0de					en = *	; remember here
>b0ce	0e					.byte CL	;wh_CodeLength
.b0de					Plus_Loop_Runtime:
.b0de	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b0e0	b0 10		bcs $b0f2		bcs Throw_Underflow_12
.b0e2	18		clc				clc			; DoIndex += step
.b0e3	b5 25		lda $25,x			lda DStack+0,x
.b0e5	65 13		adc $13				adc DoIndex+0
.b0e7	85 13		sta $13				sta DoIndex+0
.b0e9	b5 26		lda $26,x			lda DStack+1,x
.b0eb	65 14		adc $14				adc DoIndex+1
.b0ed	85 14		sta $14				sta DoIndex+1
.b0ef	e8		inx				inx			; Drop step
.b0f0	e8		inx				inx
.b0f1	60		rts				rts			; return V=0 to signal loop back
.b0f2	4c 7f b2	jmp $b27f	Throw_Underflow_12: jmp Throw_Underflow
.b0f5					Loop_End:
.b0f5	20 28 cb	jsr $cb28			jsr Jsr_Comma_YA	; compile JSR runtime
.b0f8	20 39 b2	jsr $b239			jsr PopA		; check id
.b0fb	c9 5c		cmp #$5c			cmp #<Do
.b0fd	f0 05		beq $b104	Loop_End_3:	beq +
.b0ff	a9 ea		lda #$ea			lda #$100+err_ControlMismatch
.b101	20 c4 b2	jsr $b2c4			jsr ThrowA
.b104					+
.b104	a9 50		lda #$50			lda #$50		; compile BVC body
.b106	20 50 a5	jsr $a550			jsr Branch_Comma
.b109	ac 42 07	ldy $0742			ldy DoLeave+0		; for each leave addr entry
.b10c	ad 43 07	lda $0743			lda DoLeave+1
.b10f	f0 1b		beq $b12c			beq _p9
.b111	84 15		sty $15		_p1:		sty tmp1+0		;   save entry pointer
.b113	85 16		sta $16				sta tmp1+1
.b115	a0 01		ldy #$01			ldy #1			;   save link
.b117	b1 15		lda ($15),y			lda (tmp1),y
.b119	48		pha				pha
.b11a	88		dey				dey
.b11b	b1 15		lda ($15),y			lda (tmp1),y
.b11d	48		pha				pha
.b11e	a5 00		lda $00				lda cp+0		;   patch addr
.b120	91 15		sta ($15),y			sta (tmp1),y
.b122	a5 01		lda $01				lda cp+1
.b124	c8		iny				iny
.b125	91 15		sta ($15),y			sta (tmp1),y
.b127	68		pla				pla			;   get saved link
.b128	a8		tay				tay
.b129	68		pla				pla
.b12a	d0 e5		bne $b111			bne _p1
.b12c					_p9:
.b12c	20 55 b2	jsr $b255			jsr PopYA		; restore DoLeave
.b12f	8d 42 07	sta $0742			sta DoLeave+0
.b132	8c 43 07	sty $0743			sty DoLeave+1
.b135	60		rts				rts
>b136	55 6e 6c 6f 6f 70		L1:	.text "Unloop"	;  name of word as a string, ending at wh_NameLastChar
>b13c	06					.byte *-L1	;wh_NameLength	length of name
>b13d	4b b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b13f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b140	09					.byte NN+CO	;wh_Flags	dictionary flags
=45244					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b141					Unloop:
.b141	ac 44 07	ldy $0744			ldy DoStkIndex
.b144	b9 45 07	lda $0745,y			lda DoIndexL,y	; restore Index
.b147	85 13		sta $13				sta DoIndex+0
.b149	b9 4d 07	lda $074d,y			lda DoIndexH,y
.b14c	85 14		sta $14				sta DoIndex+1
.b14e	ee 44 07	inc $0744			inc DoStkIndex	; drop Do stack entry
=16					CL	.var *-(WordListLink+wh_Xt)
=$b151					en = *	; remember here
>b13f	10					.byte CL	;wh_CodeLength
.b151	60		rts				rts
>b152	4c 65 61 76 65			L1:	.text "Leave"	;  name of word as a string, ending at wh_NameLastChar
>b157	05					.byte *-L1	;wh_NameLength	length of name
>b158	bc b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b15a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b15b	0d					.byte IM+NN+CO	;wh_Flags	dictionary flags
=45271					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b15c					Leave:
.b15c	a9 4c		lda #$4c			lda #$4c	; JMP abs
.b15e	20 e9 ca	jsr $cae9			jsr C_Comma_A
.b161	a5 01		lda $01				lda cp+1	; save cp
.b163	48		pha				pha
.b164	a5 00		lda $00				lda cp+0
.b166	48		pha				pha
.b167	ad 42 07	lda $0742			lda DoLeave+0	; compile DoLeave link, patched later
.b16a	ac 43 07	ldy $0743			ldy DoLeave+1
.b16d	20 03 cb	jsr $cb03			jsr Comma_YA
.b170	68		pla				pla		; update DoLeave
.b171	8d 42 07	sta $0742			sta DoLeave+0
.b174	68		pla				pla
.b175	8d 43 07	sta $0743			sta DoLeave+1
=28					CL	.var *-(WordListLink+wh_Xt)
=$b178					en = *	; remember here
>b15a	1c					.byte CL	;wh_CodeLength
.b178	60		rts				rts
.b179					Do_Leave_Init:
.b179	ad 42 07	lda $0742			lda DoLeave+0
.b17c	ac 43 07	ldy $0743			ldy DoLeave+1
.b17f	20 e5 b5	jsr $b5e5			jsr PushYA	; save old leave head
.b182	a9 00		lda #$00			lda #0		; init
.b184	8d 43 07	sta $0743			sta DoLeave+1
.b187	60		rts				rts
>b188	49				L1:	.text "I"	;  name of word as a string, ending at wh_NameLastChar
>b189	01					.byte *-L1	;wh_NameLength	length of name
>b18a	d7 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b18c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b18d	01					.byte CO	;wh_Flags	dictionary flags
=45321					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b18e	ac 44 07	ldy $0744	I:		ldy DoStkIndex
.b191	ca		dex				dex
.b192	ca		dex				dex
.b193	38		sec				sec		; n= fudged index - fudge factor (FUFA)
.b194	a5 13		lda $13				lda DoIndex+0
.b196	f9 55 07	sbc $0755,y			sbc DoFuFaL,y
.b199	95 25		sta $25,x			sta DStack+0,x
.b19b	a5 14		lda $14				lda DoIndex+1
.b19d	f9 5d 07	sbc $075d,y			sbc DoFuFaH,y
.b1a0	95 26		sta $26,x			sta DStack+1,x
=20					CL	.var *-(WordListLink+wh_Xt)
=$b1a2					en = *	; remember here
>b18c	14					.byte CL	;wh_CodeLength
.b1a2	60		rts				rts
>b1a3	4a				L1:	.text "J"	;  name of word as a string, ending at wh_NameLastChar
>b1a4	01					.byte *-L1	;wh_NameLength	length of name
>b1a5	09 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b1a7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b1a8	01					.byte CO	;wh_Flags	dictionary flags
=45348					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b1a9	ac 44 07	ldy $0744	J:		ldy DoStkIndex
.b1ac	ca		dex				dex
.b1ad	ca		dex				dex
.b1ae	38		sec				sec		; n= 2nd fudged index - 2nd fudge factor (FUFA)
.b1af	b9 45 07	lda $0745,y			lda DoIndexL+0,y	; LSB
.b1b2	f9 56 07	sbc $0756,y			sbc DoFufaL+1,y
.b1b5	95 25		sta $25,x			sta DStack+0,x
.b1b7	b9 4d 07	lda $074d,y			lda DoIndexH+0,y	; MSB
.b1ba	f9 5e 07	sbc $075e,y			sbc DoFufaH+1,y
.b1bd	95 26		sta $26,x			sta DStack+1,x
=22					CL	.var *-(WordListLink+wh_Xt)
=$b1bf					en = *	; remember here
>b1a7	16					.byte CL	;wh_CodeLength
.b1bf	60		rts				rts
>b1c0	52 65 63 75 72 73 65		L1:	.text "Recurse"	;  name of word as a string, ending at wh_NameLastChar
>b1c7	07					.byte *-L1	;wh_NameLength	length of name
>b1c8	24 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b1ca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b1cb	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45383					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b1cc					Recurse:
.b1cc	a5 0f		lda $0f				lda workword+0
.b1ce	a4 10		ldy $10				ldy workword+1
.b1d0	20 e5 b5	jsr $b5e5			jsr PushYA
.b1d3	24 0c		bit $0c				bit status		; does WORKWORD contain xt or nt?
.b1d5	50 03		bvc $b1da			bvc +
.b1d7	20 09 bc	jsr $bc09			jsr Name_To_Int		; convert nt to xt
.b1da					+
.b1da	4c 25 cb	jmp $cb25			jmp Jsr_Comma		; compile JSR xt, return
=17					CL	.var *-(WordListLink+wh_Xt)
=$b1dd					en = *	; remember here
>b1ca	11					.byte CL	;wh_CodeLength
>b1dd	41 62 6f 72 74 22		L1:	.text 'Abort"'	;  name of word as a string, ending at wh_NameLastChar
>b1e3	06					.byte *-L1	;wh_NameLength	length of name
>b1e4	47 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b1e6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b1e7	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45411					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b1e8					Abort_Quote:
.b1e8	20 4a b7	jsr $b74a			jsr S_Quote		; compile the string literal
.b1eb	a0 b1		ldy #$b1			ldy #>_runtime		; compile JSR runtime, return
.b1ed	a9 f2		lda #$f2			lda #<_runtime
.b1ef	4c 28 cb	jmp $cb28			jmp Jsr_Comma_YA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b1f2					en = *	; remember here
>b1e6	0a					.byte CL	;wh_CodeLength
.b1f2					_runtime:
.b1f2	b5 29		lda $29,x			lda DStack+4,x
.b1f4	15 2a		ora $2a,x			ora DStack+5,x
.b1f6	d0 03		bne $b1fb			bne _do_abort	; true?
.b1f8	4c f1 ab	jmp $abf1			jmp ThreeDrop	; Drop three entries from the Data Stack
.b1fb					_do_abort:
.b1fb	20 d2 cb	jsr $cbd2			jsr Type	; print string
.b1fe	20 ce a9	jsr $a9ce			jsr CR		; We follow Gforth in going to a new line
.b201	a9 fe		lda #$fe			lda #$100+err_AbortQuote
.b203	4c c4 b2	jmp $b2c4			jmp ThrowA
>b206	41 62 6f 72 74			L1:	.text "Abort"	;  name of word as a string, ending at wh_NameLastChar
>b20b	05					.byte *-L1	;wh_NameLength	length of name
>b20c	63 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b20e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b20f	08					.byte NN	;wh_Flags	dictionary flags
=45451					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b210	a9 ff		lda #$ff	Abort:		lda #$100+err_Abort
.b212	4c c4 b2	jmp $b2c4			jmp ThrowA
=5					CL	.var *-(WordListLink+wh_Xt)
=$b215					en = *	; remember here
>b20e	05					.byte CL	;wh_CodeLength
>b215	3f 53 74 61 63 6b		L1:	.text "?Stack"	;  name of word as a string, ending at wh_NameLastChar
>b21b	06					.byte *-L1	;wh_NameLength	length of name
>b21c	8b b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b21e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b21f	08					.byte NN	;wh_Flags	dictionary flags
=45467					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b220	8a		txa		QStack:		txa
.b221	30 58		bmi $b27b			bmi Throw_Overflow
.b223	e0 29		cpx #$29			cpx #DStack0+1		; check data stack (UnderflowCheck)
.b225	b0 58		bcs $b27f			bcs Throw_Underflow
.b227	a4 4d		ldy $4d				ldy fp			; check floating point stack
.b229	30 44		bmi $b26f			bmi Throw_FPOverflow
.b22b	c0 0b		cpy #$0b			cpy #FDim+1
.b22d	b0 44		bcs $b273			bcs Throw_FPUnderflow
.b22f	60		rts				rts			; all OK
>b230	50 6f 70 41			L1:	.text "PopA"	;  name of word as a string, ending at wh_NameLastChar
>b234	04					.byte *-L1	;wh_NameLength	length of name
>b235	9b b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b237	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b238	08					.byte NN	;wh_Flags	dictionary flags
=45492					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b239					PopA:
.b239	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b23b	b0 42		bcs $b27f		bcs Throw_Underflow
.b23d	b5 25		lda $25,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b23f	e8		inx				inx
.b240	e8		inx				inx
=8					CL	.var *-(WordListLink+wh_Xt)
=$b241					en = *	; remember here
>b237	08					.byte CL	;wh_CodeLength
.b241	60		rts		                rts
.b242					PopA2:
.b242	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b244	b0 39		bcs $b27f		bcs Throw_Underflow
.b246	b5 25		lda $25,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b248	e8		inx				inx
.b249	e8		inx				inx
.b24a	60		rts		                rts
>b24b	50 6f 70 59 41			L1:	.text "PopYA"	;  name of word as a string, ending at wh_NameLastChar
>b250	05					.byte *-L1	;wh_NameLength	length of name
>b251	b4 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b253	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b254	08					.byte NN	;wh_Flags	dictionary flags
=45520					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b255					PopYA:
.b255	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b257	b0 26		bcs $b27f		bcs Throw_Underflow
.b259	b5 25		lda $25,x			lda DStack+0,x		; pop TOS to YA
.b25b	b4 26		ldy $26,x			ldy DStack+1,x
.b25d	e8		inx				inx
.b25e	e8		inx				inx
=10					CL	.var *-(WordListLink+wh_Xt)
=$b25f					en = *	; remember here
>b253	0a					.byte CL	;wh_CodeLength
.b25f	60		rts				rts
.b260					PopTmp1:
.b260	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b262	b0 1b		bcs $b27f		bcs Throw_Underflow
.b264	b5 25		lda $25,x			lda DStack+0,x	; PopYA
.b266	b4 26		ldy $26,x			ldy DStack+1,x
.b268	e8		inx				inx
.b269	e8		inx				inx
.b26a	85 15		sta $15				sta tmp1+0
.b26c	84 16		sty $16				sty tmp1+1
.b26e	60		rts				rts
.b26f					Throw_FPOverflow:
.b26f	a9 d4		lda #$d4			lda #$100+err_FPStackOverflow
.b271	d0 51		bne $b2c4			bne ThrowA
.b273					Throw_FPUnderflow:
.b273	a9 d3		lda #$d3			lda #$100+err_FPStackUnderflow
.b275	d0 4d		bne $b2c4			bne ThrowA
.b277					Throw_FpOutOfRange:
.b277	a9 d5		lda #$d5			lda #$100+err_FpOutOfRange
.b279	d0 49		bne $b2c4			bne ThrowA
.b27b	a9 fd		lda #$fd	Throw_Overflow:	lda #$100+err_Stack_Overflow
.b27d	d0 45		bne $b2c4			bne ThrowA
.b27f					Throw_Underflow:
.b27f	a9 fc		lda #$fc			lda #$100+err_Stack_Underflow
.b281	d0 41		bne $b2c4			bne ThrowA
>b283	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_1"	;  name of word as a string, ending at wh_NameLastChar
>b28b	77 5f 31
>b28e	0b					.byte *-L1	;wh_NameLength	length of name
>b28f	d0 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b291	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b292	08					.byte NN	;wh_Flags	dictionary flags
=45582					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b293					underflow_1:
.b293	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b295	b0 e8		bcs $b27f		bcs Throw_Underflow
=4					CL	.var *-(WordListLink+wh_Xt)
=$b297					en = *	; remember here
>b291	04					.byte CL	;wh_CodeLength
.b297	60		rts				rts
>b298	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_2"	;  name of word as a string, ending at wh_NameLastChar
>b2a0	77 5f 32
>b2a3	0b					.byte *-L1	;wh_NameLength	length of name
>b2a4	0e b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2a6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2a7	08					.byte NN	;wh_Flags	dictionary flags
=45603					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2a8					underflow_2:
.b2a8	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b2aa	b0 d3		bcs $b27f		bcs Throw_Underflow
=4					CL	.var *-(WordListLink+wh_Xt)
=$b2ac					en = *	; remember here
>b2a6	04					.byte CL	;wh_CodeLength
.b2ac	60		rts		                rts
.b2ad					underflow_3:
.b2ad	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.b2af	b0 ce		bcs $b27f		bcs Throw_Underflow
.b2b1	60		rts		                rts
.b2b2					underflow_4:
.b2b2	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.b2b4	b0 c9		bcs $b27f		bcs Throw_Underflow
.b2b6	60		rts		                rts
>b2b7	54 68 72 6f 77			L1:	.text "Throw"	;  name of word as a string, ending at wh_NameLastChar
>b2bc	05					.byte *-L1	;wh_NameLength	length of name
>b2bd	23 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2bf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2c0	08					.byte NN	;wh_Flags	dictionary flags
=45628					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2c1	20 39 b2	jsr $b239	Throw:		jsr PopA		; pop n
.b2c4	20 ed b2	jsr $b2ed	ThrowA:		jsr Type_Exception_Text_A ; print the associated error string
.b2c7					Abort_Core:
.b2c7	20 01 b7	jsr $b701			jsr SLiteral_runtime
.b2ca	4c d0 b2	jmp $b2d0			  jmp +
>b2cd	3f 00 20					  .text "?",0," "	; signal an error to the simulator
.b2d0	20 d2 cb	jsr $cbd2	+		jsr Type
.b2d3	20 ee cc	jsr $ccee			jsr R_From		; show return stack TOS
.b2d6	20 9e 81	jsr $819e			jsr TypeSymbol
.b2d9	20 0a cd	jsr $cd0a			jsr R_Fetch		; show return stack NOS
.b2dc	20 9e 81	jsr $819e			jsr TypeSymbol
.b2df	20 ce a9	jsr $a9ce			jsr CR
.b2e2					Abort_Core2:
.b2e2	a9 08		lda #$08			lda #DoStkDim		; init do stack
.b2e4	8d 44 07	sta $0744			sta DoStkIndex
.b2e7	20 31 b3	jsr $b331			jsr Empty_Stack		; empty the Data Stack & FP stack
.b2ea	4c 41 b3	jmp $b341			jmp Quit		; continue into QUIT.
.b2ed					Type_Exception_Text_A:
.b2ed	85 17		sta $17				sta tmp2+0	; save error code
.b2ef	a9 50		lda #$50			lda #<Exception_Text_List
.b2f1	a0 d9		ldy #$d9			ldy #>Exception_Text_List	; for each table entry
.b2f3	85 19		sta $19				sta tmp3+0
.b2f5	84 1a		sty $1a				sty tmp3+1
.b2f7	a0 00		ldy #$00	_TestEntry:	ldy #0		;   code match?
.b2f9	b1 19		lda ($19),y			lda (tmp3),y
.b2fb	f0 1a		beq $b317			beq _NotFound
.b2fd	c5 17		cmp $17				cmp tmp2+0
.b2ff	f0 11		beq $b312			beq _Found
.b301	c8		iny		-		iny		;   step to end of entry
.b302	b1 19		lda ($19),y			lda (tmp3),y
.b304	d0 fb		bne $b301			bne -
.b306	98		tya				tya		;   step to next entry
.b307	38		sec				sec
.b308	65 19		adc $19				adc tmp3+0
.b30a	85 19		sta $19				sta tmp3+0
.b30c	90 e9		bcc $b2f7			bcc _TestEntry
.b30e	e6 1a		inc $1a				inc tmp3+1
.b310	d0 e5		bne $b2f7			bne _TestEntry
.b312					_Found:
.b312	a0 01		ldy #$01			ldy #1
.b314	4c f9 cb	jmp $cbf9			jmp Print_ASCIIZ_tmp3_no_lf
.b317	a0 ff		ldy #$ff	_NotFound:	ldy #$ff		; print code
.b319	a5 17		lda $17				lda tmp2+0
.b31b	20 e5 b5	jsr $b5e5			jsr PushYA
.b31e	4c c6 c9	jmp $c9c6			jmp Dot
>b321	45 6d 70 74 79 2d 53 74		L1:	.text "Empty-Stack"	;  name of word as a string, ending at wh_NameLastChar
>b329	61 63 6b
>b32c	0b					.byte *-L1	;wh_NameLength	length of name
>b32d	3c b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b32f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b330	08					.byte NN	;wh_Flags	dictionary flags
=45740					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b331					Empty_Stack:
.b331	a2 28		ldx #$28			ldx #DStack0	; empty data stack
.b333	a9 0a		lda #$0a			lda #FDim	; empty FP stack
.b335	85 4d		sta $4d				sta fp
=6					CL	.var *-(WordListLink+wh_Xt)
=$b337					en = *	; remember here
>b32f	06					.byte CL	;wh_CodeLength
.b337	60		rts				rts
>b338	51 75 69 74			L1:	.text "Quit"	;  name of word as a string, ending at wh_NameLastChar
>b33c	04					.byte *-L1	;wh_NameLength	length of name
>b33d	ac b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b33f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b340	08					.byte NN	;wh_Flags	dictionary flags
=45756					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b341					Quit:
.b341	8a		txa				txa		; Save the DStack that we just defined
.b342	a2 ff		ldx #$ff			ldx #rsp0
.b344	9a		txs				txs
.b345	aa		tax				tax		; Restore the DStack. Dude, seriously.
.b346	a9 00		lda #$00			lda #0		; SOURCE-ID= zero (keyboard input)
.b348	85 02		sta $02				sta insrc+0
.b34a	85 03		sta $03				sta insrc+1
.b34c	20 72 b5	jsr $b572			jsr Left_Bracket_NoCheck ; switch to interpret state
.b34f					_get_line:
.b34f	a9 00		lda #$00			lda #<buffer0	; input buffer, this is paranoid
.b351	85 04		sta $04				sta cib+0
.b353	a9 02		lda #$02			lda #>buffer0
.b355	85 05		sta $05				sta cib+1
.b357	20 8a c0	jsr $c08a			jsr Refill		; ( -- f )
.b35a	b5 25		lda $25,x			lda DStack+0,x
.b35c	d0 05		bne $b363			bne +
.b35e	a9 6b		lda #$6b			lda #$100+err_Refill	; REFILL returned a FALSE flag, something went wrong
.b360	4c c4 b2	jmp $b2c4			jmp ThrowA
.b363	e8		inx		+		inx			; drop the flag
.b364	e8		inx				inx
.b365	20 7c b3	jsr $b37c			jsr interpret
.b368	a5 0a		lda $0a				lda state
.b36a	d0 06		bne $b372			bne _print_compiled
.b36c	a9 fc		lda #$fc			lda #<str_ok
.b36e	a0 d8		ldy #$d8			ldy #>str_ok
.b370	d0 04		bne $b376			bne _print
.b372	a9 00		lda #$00	_print_compiled: lda #<str_compiled	; "compile" string
.b374	a0 d9		ldy #$d9			ldy #>str_compiled
.b376	20 ed cb	jsr $cbed	_print:		jsr Print_ASCIIZ_YA
.b379	4c 4f b3	jmp $b34f			jmp _get_line
=59					CL	.var *-(WordListLink+wh_Xt)
=$b37c					en = *	; remember here
>b33f	3b					.byte CL	;wh_CodeLength
.b37c					Interpret:
.b37c					_loop:
.b37c	20 20 b2	jsr $b220			jsr QStack		; check stack bounds
.b37f	20 d1 b8	jsr $b8d1			jsr parse_name		; ( "string" -- addr u )
.b382	b5 25		lda $25,x	                lda DStack+0,x		; empty line?
.b384	f0 53		beq $b3d9	                beq _line_done
.b386	20 a4 ca	jsr $caa4			jsr Two_dup		; ( addr u -- addr u addr u )
.b389	20 0f bb	jsr $bb0f			jsr find_name		; ( addr u addr u -- addr u nt|0 )
.b38c	b5 26		lda $26,x			lda DStack+1,x		; word found?
.b38e	d0 1b		bne $b3ab			bne _got_name_token
.b390	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.b391	e8		inx		                inx
.b392	20 0c af	jsr $af0c	                jsr Number           ; ( addr u -- u|d )
.b395	a5 0a		lda $0a		                lda state		; interpreting?
.b397	f0 e3		beq $b37c	                beq _loop		;   we're done
.b399	a9 20		lda #$20	                lda #$20		; double cell number?
.b39b	24 0c		bit $0c		                bit status
.b39d	f0 06		beq $b3a5	                beq _single_number
.b39f	20 a7 b6	jsr $b6a7			jsr Two_literal		; compile a double number
.b3a2	4c 7c b3	jmp $b37c			jmp _loop
.b3a5	20 98 b5	jsr $b598	_single_number:	jsr Literal		; compile a single number
.b3a8	4c 7c b3	jmp $b37c			jmp _loop
.b3ab					_got_name_token:
.b3ab	20 71 c7	jsr $c771			jsr Nip
.b3ae	20 71 c7	jsr $c771			jsr Nip			; ( nt )
.b3b1	85 15		sta $15				sta tmp1+0		; save a work copy of nt
.b3b3	84 16		sty $16				sty tmp1+1
.b3b5	20 09 bc	jsr $bc09			jsr Name_To_Int		; ( nt -- xt )
.b3b8	a0 84		ldy #$84			ldy #Wh_Flags		; get word flags, we'll need them shortly
.b3ba	b1 15		lda ($15),y			lda (tmp1),y		;    using saved nt
.b3bc	a4 0a		ldy $0a				ldy state		; interpreting or compiling?
.b3be	d0 0f		bne $b3cf			bne _compile
.b3c0	29 01		and #$01			and #CO			; is the word COMPILE-ONLY?
.b3c2	f0 05		beq $b3c9			beq _execute
.b3c4	a9 f2		lda #$f2			lda #$100+err_CompileOnly	;   complain & quit
.b3c6	4c c4 b2	jmp $b2c4			jmp ThrowA
.b3c9	20 10 cc	jsr $cc10	_execute:	jsr Execute		; EXECUTE the xt that is TOS
.b3cc	4c 7c b3	jmp $b37c	                jmp _loop
.b3cf					_compile:
.b3cf	29 04		and #$04			and #IM			; is the word IMMEDIATE?
.b3d1	d0 f6		bne $b3c9			bne _execute		;   IMMEDIATE word, execute now
.b3d3	20 da b4	jsr $b4da			jsr Compile_Comma	; Compile the xt into the Dictionary
.b3d6	4c 7c b3	jmp $b37c			jmp _loop
.b3d9					_line_done:
.b3d9	e8		inx				inx			; drop stuff from PARSE_NAME
.b3da	e8		inx				inx
.b3db	e8		inx				inx
.b3dc	e8		inx				inx
.b3dd	60		rts				rts
>b3de	49 6d 6d 65 64 69 61 74		L1:	.text "Immediate"	;  name of word as a string, ending at wh_NameLastChar
>b3e6	65
>b3e7	09					.byte *-L1	;wh_NameLength	length of name
>b3e8	bc b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b3ea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b3eb	08					.byte NN	;wh_Flags	dictionary flags
=45927					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b3ec	a9 04		lda #$04	Immediate:	lda #IM
.b3ee	48		pha		SetFlag:	pha
.b3ef	20 a2 b8	jsr $b8a2			jsr current_to_dp
.b3f2	a0 84		ldy #$84			ldy #Wh_Flags
.b3f4	68		pla				pla
.b3f5	11 11		ora ($11),y			ora (dp),y
.b3f7	91 11		sta ($11),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b3f9					en = *	; remember here
>b3ea	0d					.byte CL	;wh_CodeLength
.b3f9	60		rts				rts
>b3fa	43 6f 6d 70 69 6c 65 2d		L1:	.text "Compile-only"	;  name of word as a string, ending at wh_NameLastChar
>b402	6f 6e 6c 79
>b406	0c					.byte *-L1	;wh_NameLength	length of name
>b407	67 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b409	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b40a	08					.byte NN	;wh_Flags	dictionary flags
=45958					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b40b	a9 01		lda #$01	Compile_Only:	lda #CO
.b40d	d0 df		bne $b3ee			bne SetFlag
=4					CL	.var *-(WordListLink+wh_Xt)
=$b40f					en = *	; remember here
>b409	04					.byte CL	;wh_CodeLength
>b40f	6e 65 76 65 72 2d 6e 61		L1:	.text "never-native"	;  name of word as a string, ending at wh_NameLastChar
>b417	74 69 76 65
>b41b	0c					.byte *-L1	;wh_NameLength	length of name
>b41c	86 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b41e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b41f	08					.byte NN	;wh_Flags	dictionary flags
=45979					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b420	20 a2 b8	jsr $b8a2	Never_Native:	jsr current_to_dp
.b423	a0 84		ldy #$84			ldy #Wh_Flags
.b425	b1 11		lda ($11),y			lda (dp),y
.b427	09 08		ora #$08			ora #NN		; set NN flag
.b429	29 fd		and #$fd			and #$ff-AN	; clear AN flag
.b42b	91 11		sta ($11),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b42d					en = *	; remember here
>b41e	0d					.byte CL	;wh_CodeLength
.b42d	60		rts				rts
>b42e	61 6c 77 61 79 73 2d 6e		L1:	.text "always-native"	;  name of word as a string, ending at wh_NameLastChar
>b436	61 74 69 76 65
>b43b	0d					.byte *-L1	;wh_NameLength	length of name
>b43c	9b b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b43e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b43f	08					.byte NN	;wh_Flags	dictionary flags
=46011					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b440	20 a2 b8	jsr $b8a2	Always_Native:	jsr current_to_dp
.b443	a0 84		ldy #$84			ldy #Wh_Flags
.b445	b1 11		lda ($11),y			lda (dp),y
.b447	09 02		ora #$02			ora #AN		; Make sure AN flag is set
.b449	29 f7		and #$f7			and #$ff-NN	; and NN flag is clear.
.b44b	91 11		sta ($11),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b44d					en = *	; remember here
>b43e	0d					.byte CL	;wh_CodeLength
.b44d	60		rts				rts
>b44e	61 6c 6c 6f 77 2d 6e 61		L1:	.text "allow-native"	;  name of word as a string, ending at wh_NameLastChar
>b456	74 69 76 65
>b45a	0c					.byte *-L1	;wh_NameLength	length of name
>b45b	bb b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b45d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b45e	08					.byte NN	;wh_Flags	dictionary flags
=46042					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b45f	20 a2 b8	jsr $b8a2	Allow_Native:	jsr current_to_dp
.b462	a0 84		ldy #$84			ldy #Wh_Flags	; offset for status byte
.b464	b1 11		lda ($11),y			lda (dp),y
.b466	29 f5		and #$f5			and #$ff-NN-AN	; AN and NN flag is clear.
.b468	91 11		sta ($11),y			sta (dp),y
=11					CL	.var *-(WordListLink+wh_Xt)
=$b46a					en = *	; remember here
>b45d	0b					.byte CL	;wh_CodeLength
.b46a	60		rts				rts
>b46b	6e 63 2d 6c 69 6d 69 74		L1:	.text "nc-limit"	;  name of word as a string, ending at wh_NameLastChar
>b473	08					.byte *-L1	;wh_NameLength	length of name
>b474	da b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b476	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b477	08					.byte NN	;wh_Flags	dictionary flags
=46067					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b478	a9 02		lda #$02			lda #<nc_limit
.b47a	a0 03		ldy #$03			ldy #>nc_limit
.b47c	4c e5 b5	jmp $b5e5			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b47f					en = *	; remember here
>b476	07					.byte CL	;wh_CodeLength
>b47f	73 74 72 69 70 2d 75 6e		L1:	.text "strip-underflow"	;  name of word as a string, ending at wh_NameLastChar
>b487	64 65 72 66 6c 6f 77
>b48e	0f					.byte *-L1	;wh_NameLength	length of name
>b48f	f3 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b491	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b492	08					.byte NN	;wh_Flags	dictionary flags
=46094					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b493	a9 04		lda #$04			lda #<uf_strip
.b495	a0 03		ldy #$03			ldy #>uf_strip
.b497	4c e5 b5	jmp $b5e5			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b49a					en = *	; remember here
>b491	07					.byte CL	;wh_CodeLength
>b49a	70 6f 73 74 70 6f 6e 65		L1:	.text "postpone"	;  name of word as a string, ending at wh_NameLastChar
>b4a2	08					.byte *-L1	;wh_NameLength	length of name
>b4a3	0e b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b4a5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b4a6	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=46114					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b4a7					Postpone:
.b4a7	20 03 b9	jsr $b903			jsr parse_name_check	; ( -- addr n )
.b4aa	20 3b bb	jsr $bb3b			jsr find_name_check	; ( -- nt | 0 )
.b4ad	b5 25		lda $25,x			lda DStack+0,x
.b4af	85 15		sta $15				sta tmp1+0
.b4b1	b5 26		lda $26,x			lda DStack+1,x
.b4b3	85 16		sta $16				sta tmp1+1
.b4b5	20 09 bc	jsr $bc09			jsr Name_To_Int	; ( nt -- xt )
.b4b8	a0 84		ldy #$84			ldy #Wh_Flags		; IMMEDIATE word?
.b4ba	b1 15		lda ($15),y			lda (tmp1),y		;    using saved nt
.b4bc	29 04		and #$04			and #IM
.b4be	f0 03		beq $b4c3			beq _not_immediate
.b4c0	4c da b4	jmp $b4da			jmp Compile_Comma	; compile it
.b4c3					_not_immediate:
.b4c3	20 98 b5	jsr $b598			jsr Literal		; compile the xt of the word
.b4c6	a0 b4		ldy #$b4			ldy #>Compile_Comma	; compile COMPILE,
.b4c8	a9 da		lda #$da			lda #<Compile_Comma
.b4ca	4c 28 cb	jmp $cb28			jmp Jsr_Comma_YA
=38					CL	.var *-(WordListLink+wh_Xt)
=$b4cd					en = *	; remember here
>b4a5	26					.byte CL	;wh_CodeLength
>b4cd	43 6f 6d 70 69 6c 65 2c		L1:	.text "Compile,"	;  name of word as a string, ending at wh_NameLastChar
>b4d5	08					.byte *-L1	;wh_NameLength	length of name
>b4d6	22 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b4d8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b4d9	08					.byte NN	;wh_Flags	dictionary flags
=46165					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b4da	20 55 b2	jsr $b255	Compile_Comma:	jsr PopYA		; pop xt (check stack, skippable)
.b4dd	20 e5 b5	jsr $b5e5	Compile_Comma_YA: jsr PushYA		; push xt
.b4e0	20 4a cd	jsr $cd4a			jsr Dup			; ( xt xt )
.b4e3	20 b2 bb	jsr $bbb2			jsr Int_To_Name		; ( xt nt )
.b4e6	b5 25		lda $25,x			lda DStack+0,x		; tmp5 = nt
.b4e8	85 1d		sta $1d				sta tmp5+0
.b4ea	b5 26		lda $26,x			lda DStack+1,x
.b4ec	85 1e		sta $1e				sta tmp5+1
.b4ee	f0 36		beq $b526			beq _jsr		; no nt found?
.b4f0	a0 83		ldy #$83			ldy #wh_CodeLength
.b4f2	b1 1d		lda ($1d),y			lda (tmp5),y
.b4f4	95 25		sta $25,x			sta DStack+0,x		; ( xt u )
.b4f6	a0 84		ldy #$84			ldy #Wh_Flags		; save word flags
.b4f8	b1 1d		lda ($1d),y			lda (tmp5),y
.b4fa	95 26		sta $26,x			sta DStack+1,x
.b4fc	29 02		and #$02			and #AN			; Always Native (AN) word?
.b4fe	d0 2b		bne $b52b			bne _inline
.b500	b5 26		lda $26,x			lda DStack+1,x		; Never Native (NN) word?
.b502	29 08		and #$08			and #NN
.b504	d0 0e		bne $b514			bne _jsr_opt
.b506	ad 03 03	lda $0303			lda nc_limit+1		; wordsize<=nc_limit?
.b509	d0 20		bne $b52b			bne _inline
.b50b	ad 02 03	lda $0302			lda nc_limit+0
.b50e	d5 25		cmp $25,x			cmp DStack+0,x
.b510	f0 02		beq $b514			beq _jsr_opt
.b512	b0 17		bcs $b52b			bcs _inline
.b514					_jsr_opt:
.b514	ad 04 03	lda $0304			lda uf_strip
.b517	f0 0d		beq $b526			beq _jsr
.b519	b5 26		lda $26,x			lda DStack+1,x		; underflow strip & not stack strip?
.b51b	49 10		eor #$10			eor #UF
.b51d	29 50		and #$50			and #UF+R6
.b51f	d0 05		bne $b526			bne _jsr
.b521	a9 03		lda #$03			lda #3			; skip the underflow check
.b523	20 05 c8	jsr $c805			jsr Nos_plus_A
.b526					_jsr:
.b526	e8		inx				inx			; Drop len or nt
.b527	e8		inx				inx
.b528	4c 25 cb	jmp $cb25			jmp Jsr_Comma		; compile jsr, return
.b52b					_inline:
.b52b	b5 26		lda $26,x			lda DStack+1,x		; this word contains RTS addr save & restore?
.b52d	29 40		and #$40			and #R6
.b52f	f0 0a		beq $b53b			beq +
.b531	a9 06		lda #$06			lda #6			;   Adjust xt: skip over the leading RTS addr save
.b533	20 05 c8	jsr $c805			jsr Nos_plus_A
.b536	a9 f4		lda #$f4			lda #$f4		;   Adjust u: omit the leading RTS addr save & trailing RTS addr restore
.b538	20 3b c8	jsr $c83b			jsr minus_a
.b53b					+
.b53b	ad 04 03	lda $0304			lda uf_strip+0		; user wants underflow stripping?
.b53e	f0 10		beq $b550			beq +
.b540	b5 26		lda $26,x			lda DStack+1,x		; this word contains underflow checking?
.b542	29 10		and #$10			and #UF
.b544	f0 0a		beq $b550			beq +
.b546	a9 03		lda #$03			lda #3			;   Adjust xt: Start after underflow check
.b548	20 05 c8	jsr $c805			jsr Nos_plus_A
.b54b	a9 fd		lda #$fd			lda #$fd		;   Adjust u: omit underflow check
.b54d	20 3b c8	jsr $c83b			jsr minus_a
.b550					+
.b550	b5 25		lda $25,x			lda DStack+0,x		; compile code bytes
.b552	f0 0c		beq $b560			beq _copy_end
.b554	a1 27		lda ($27,x)	_copy_loop:	lda (DStack+2,x)
.b556	20 e9 ca	jsr $cae9			jsr C_Comma_A
.b559	20 56 c8	jsr $c856			jsr NOS_One_Plus
.b55c	d6 25		dec $25,x			dec DStack+0,x
.b55e	d0 f4		bne $b554			bne _copy_loop
.b560					_copy_end:
.b560	4c 17 c3	jmp $c317			jmp Two_drop
=137					CL	.var *-(WordListLink+wh_Xt)
=$b563					en = *	; remember here
>b4d8	89					.byte CL	;wh_CodeLength
>b563	5b				L1:	.text "["	;  name of word as a string, ending at wh_NameLastChar
>b564	01					.byte *-L1	;wh_NameLength	length of name
>b565	55 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b567	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b568	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=46308					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b569	a5 0a		lda $0a		Left_Bracket:	lda state+0		; Already in the interpret state?
.b56b	d0 05		bne $b572			bne Left_Bracket_NoCheck
.b56d	a9 69		lda #$69			lda #$100+err_NotCompiling
.b56f	4c c4 b2	jmp $b2c4			jmp ThrowA
.b572					Left_Bracket_NoCheck:
.b572	a9 00		lda #$00			lda #0
.b574	85 0a		sta $0a		Left_Bracket_3:	sta state+0
.b576	85 0b		sta $0b				sta state+1
=15					CL	.var *-(WordListLink+wh_Xt)
=$b578					en = *	; remember here
>b567	0f					.byte CL	;wh_CodeLength
.b578	60		rts				rts
>b579	5d				L1:	.text "]"	;  name of word as a string, ending at wh_NameLastChar
>b57a	01					.byte *-L1	;wh_NameLength	length of name
>b57b	e4 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b57d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b57e	0c					.byte IM+NN	;wh_Flags	dictionary flags
=46330					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b57f					Right_Bracket:
.b57f	a5 0a		lda $0a				lda state+0		; Already in the compile state?
.b581	f0 05		beq $b588			beq +
.b583	a9 68		lda #$68			lda #$100+err_AlreadyCompiling ;   complain and quit
.b585	4c c4 b2	jmp $b2c4			jmp ThrowA
.b588					+
.b588	a9 ff		lda #$ff			lda #$FF
.b58a	d0 e8		bne $b574			bne Left_Bracket_3
=13					CL	.var *-(WordListLink+wh_Xt)
=$b58c					en = *	; remember here
>b57d	0d					.byte CL	;wh_CodeLength
>b58c	4c 69 74 65 72 61 6c		L1:	.text "Literal"	;  name of word as a string, ending at wh_NameLastChar
>b593	07					.byte *-L1	;wh_NameLength	length of name
>b594	fa b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b596	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b597	1d					.byte IM+CO+UF+NN	;wh_Flags	dictionary flags
=46355					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b598					Literal:
.b598	20 93 b2	jsr $b293			jsr underflow_1
.b59b	20 a1 b5	jsr $b5a1			jsr LitCompile		; compile load regs, choose a runtime routine
.b59e	4c dd b4	jmp $b4dd			jmp Compile_Comma_YA	; compile JSR runtime
=9					CL	.var *-(WordListLink+wh_Xt)
=$b5a1					en = *	; remember here
>b596	09					.byte CL	;wh_CodeLength
.b5a1					LitCompile:
.b5a1	b5 26		lda $26,x			lda DStack+1,x		; hi byte zero?
.b5a3	f0 08		beq $b5ad			beq _ZByte
.b5a5	20 cb b5	jsr $b5cb			jsr ldya_immed_comma	; compile "ldy #; lda #" using TOS
.b5a8	a9 e5		lda #$e5			lda #<PushYA		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b5aa	a0 b5		ldy #$b5			ldy #>PushYA
.b5ac	60		rts				rts
.b5ad					_ZByte:
.b5ad	b4 25		ldy $25,x			ldy DStack+0,x		; is it 0 ?
.b5af	f0 08		beq $b5b9			beq _zero
.b5b1	20 d2 b5	jsr $b5d2			jsr lda_immed_comma	; compile "lda #" using TOS
.b5b4	a9 27		lda #$27			lda #<PushZA		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b5b6	a0 b6		ldy #$b6			ldy #>PushZA
.b5b8	60		rts				rts
.b5b9	e8		inx		_zero:		inx			; drop
.b5ba	e8		inx				inx
.b5bb	a9 36		lda #$36			lda #<Zero		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b5bd	a0 b6		ldy #$b6			ldy #>Zero
.b5bf	60		rts				rts
>b5c0	4c 44 59 41 23 2c		L1:	.text "LDYA#,"	;  name of word as a string, ending at wh_NameLastChar
>b5c6	06					.byte *-L1	;wh_NameLength	length of name
>b5c7	13 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5c9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5ca	08					.byte NN	;wh_Flags	dictionary flags
=46406					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5cb					ldya_immed_comma:
.b5cb	a9 a0		lda #$a0			lda #$a0		; ldy #
.b5cd	b4 26		ldy $26,x			ldy DStack+1,x
.b5cf	20 03 cb	jsr $cb03			jsr Comma_YA
.b5d2					lda_immed_comma:
.b5d2	a9 a9		lda #$a9			lda #$a9		; lda #
.b5d4	20 e9 ca	jsr $cae9			jsr C_Comma_A
.b5d7	4c e6 ca	jmp $cae6			jmp C_Comma
=15					CL	.var *-(WordListLink+wh_Xt)
=$b5da					en = *	; remember here
>b5c9	0f					.byte CL	;wh_CodeLength
>b5da	50 75 73 68 59 41		L1:	.text "PushYA"	;  name of word as a string, ending at wh_NameLastChar
>b5e0	06					.byte *-L1	;wh_NameLength	length of name
>b5e1	46 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5e3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5e4	00					.byte 0	;wh_Flags	dictionary flags
=46432					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5e5	ca		dex		PushYA:		dex
.b5e6	ca		dex				dex
.b5e7	95 25		sta $25,x			sta DStack+0,x
.b5e9	94 26		sty $26,x			sty DStack+1,x
=6					CL	.var *-(WordListLink+wh_Xt)
=$b5eb					en = *	; remember here
>b5e3	06					.byte CL	;wh_CodeLength
.b5eb	60		rts				rts
>b5ec	42 61 73 65			L1:	.text "Base"	;  name of word as a string, ending at wh_NameLastChar
>b5f0	04					.byte *-L1	;wh_NameLength	length of name
>b5f1	60 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5f4	08					.byte NN	;wh_Flags	dictionary flags
=46448					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5f5	a9 00		lda #$00			lda #<base
.b5f7	a0 03		ldy #$03			ldy #>base
.b5f9	4c e5 b5	jmp $b5e5			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b5fc					en = *	; remember here
>b5f3	07					.byte CL	;wh_CodeLength
>b5fc	54 72 75 65			L1:	.text "True"	;  name of word as a string, ending at wh_NameLastChar
>b600	04					.byte *-L1	;wh_NameLength	length of name
>b601	70 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b603	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b604	00					.byte 0	;wh_Flags	dictionary flags
=46464					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b605	a9 ff		lda #$ff	True:		lda #$FF
.b607	ca		dex				dex
.b608	ca		dex				dex
.b609	95 25		sta $25,x			sta DStack+0,x
.b60b	95 26		sta $26,x			sta DStack+1,x
=8					CL	.var *-(WordListLink+wh_Xt)
=$b60d					en = *	; remember here
>b603	08					.byte CL	;wh_CodeLength
.b60d	60		rts				rts
>b60e	46 61 6c 73 65			L1:	.text "False"	;  name of word as a string, ending at wh_NameLastChar
>b613	05					.byte *-L1	;wh_NameLength	length of name
>b614	80 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b616	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b617	08					.byte NN	;wh_Flags	dictionary flags
=46483					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b618	a9 00		lda #$00	False:		lda #0
.b61a	f0 0b		beq $b627			beq PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b61c					en = *	; remember here
>b616	04					.byte CL	;wh_CodeLength
>b61c	50 75 73 68 5a 41		L1:	.text "PushZA"	;  name of word as a string, ending at wh_NameLastChar
>b622	06					.byte *-L1	;wh_NameLength	length of name
>b623	93 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b625	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b626	00					.byte 0	;wh_Flags	dictionary flags
=46498					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b627	ca		dex		PushZA:		dex
.b628	ca		dex				dex
.b629	95 25		sta $25,x			sta DStack+0,x
.b62b	a9 00		lda #$00			lda #0
.b62d	95 26		sta $26,x			sta DStack+1,x
=8					CL	.var *-(WordListLink+wh_Xt)
=$b62f					en = *	; remember here
>b625	08					.byte CL	;wh_CodeLength
.b62f	60		rts				rts
>b630	30				L1:	.text "0"	;  name of word as a string, ending at wh_NameLastChar
>b631	01					.byte *-L1	;wh_NameLength	length of name
>b632	a2 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b634	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b635	08					.byte NN	;wh_Flags	dictionary flags
=46513					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b636	a9 00		lda #$00	Zero:		lda #0
.b638	f0 ed		beq $b627			beq PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b63a					en = *	; remember here
>b634	04					.byte CL	;wh_CodeLength
>b63a	31				L1:	.text "1"	;  name of word as a string, ending at wh_NameLastChar
>b63b	01					.byte *-L1	;wh_NameLength	length of name
>b63c	b1 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b63e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b63f	08					.byte NN	;wh_Flags	dictionary flags
=46523					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b640	a9 01		lda #$01	One:		lda #1
.b642	d0 e3		bne $b627			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b644					en = *	; remember here
>b63e	04					.byte CL	;wh_CodeLength
>b644	32				L1:	.text "2"	;  name of word as a string, ending at wh_NameLastChar
>b645	01					.byte *-L1	;wh_NameLength	length of name
>b646	bb b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b648	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b649	08					.byte NN	;wh_Flags	dictionary flags
=46533					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b64a	a9 02		lda #$02	Two:		lda #2
.b64c	d0 d9		bne $b627			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b64e					en = *	; remember here
>b648	04					.byte CL	;wh_CodeLength
>b64e	42 6c				L1:	.text "Bl"	;  name of word as a string, ending at wh_NameLastChar
>b650	02					.byte *-L1	;wh_NameLength	length of name
>b651	c5 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b653	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b654	08					.byte NN	;wh_Flags	dictionary flags
=46544					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b655	a9 20		lda #$20	Bl:		lda #AscSP
.b657	d0 ce		bne $b627			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b659					en = *	; remember here
>b653	04					.byte CL	;wh_CodeLength
>b659	3e 49 6e			L1:	.text ">In"	;  name of word as a string, ending at wh_NameLastChar
>b65c	03					.byte *-L1	;wh_NameLength	length of name
>b65d	d0 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b65f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b660	08					.byte NN	;wh_Flags	dictionary flags
=46556					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b661	a9 08		lda #$08			lda #toin
.b663	d0 c2		bne $b627			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b665					en = *	; remember here
>b65f	04					.byte CL	;wh_CodeLength
>b665	53 74 61 74 65			L1:	.text "State"	;  name of word as a string, ending at wh_NameLastChar
>b66a	05					.byte *-L1	;wh_NameLength	length of name
>b66b	dc b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b66d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b66e	08					.byte NN	;wh_Flags	dictionary flags
=46570					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b66f	a9 0a		lda #$0a			lda #state
.b671	d0 b4		bne $b627			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b673					en = *	; remember here
>b66d	04					.byte CL	;wh_CodeLength
>b673	64 70				L1:	.text "dp"	;  name of word as a string, ending at wh_NameLastChar
>b675	02					.byte *-L1	;wh_NameLength	length of name
>b676	ea b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b678	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b679	08					.byte NN	;wh_Flags	dictionary flags
=46581					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b67a	a9 11		lda #$11			lda #dp
.b67c	d0 a9		bne $b627			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b67e					en = *	; remember here
>b678	04					.byte CL	;wh_CodeLength
>b67e	54 6d 70 31			L1:	.text "Tmp1"	;  name of word as a string, ending at wh_NameLastChar
>b682	04					.byte *-L1	;wh_NameLength	length of name
>b683	f5 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b685	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b686	08					.byte NN	;wh_Flags	dictionary flags
=46594					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b687	a9 15		lda #$15			lda #tmp1
.b689	d0 9c		bne $b627			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b68b					en = *	; remember here
>b685	04					.byte CL	;wh_CodeLength
>b68b	44 53 74 61 63 6b		L1:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
>b691	06					.byte *-L1	;wh_NameLength	length of name
>b692	02 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b694	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b695	08					.byte NN	;wh_Flags	dictionary flags
=46609					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b696	a9 25		lda #$25			lda #DStack
.b698	d0 8d		bne $b627			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b69a					en = *	; remember here
>b694	04					.byte CL	;wh_CodeLength
>b69a	32 4c 69 74 65 72 61 6c		L1:	.text "2Literal"	;  name of word as a string, ending at wh_NameLastChar
>b6a2	08					.byte *-L1	;wh_NameLength	length of name
>b6a3	11 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6a5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6a6	1c					.byte UF+IM+NN	;wh_Flags	dictionary flags
=46626					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6a7					Two_literal:
.b6a7	20 a8 b2	jsr $b2a8			jsr underflow_2 ; double number
.b6aa	20 68 cd	jsr $cd68			jsr Swap
.b6ad	20 98 b5	jsr $b598			jsr Literal	; do lo cell
.b6b0	4c 98 b5	jmp $b598			jmp Literal	; do hi cell
=12					CL	.var *-(WordListLink+wh_Xt)
=$b6b3					en = *	; remember here
>b6a5	0c					.byte CL	;wh_CodeLength
>b6b3	53 4c 69 74 65 72 61 6c		L1:	.text "SLiteral"	;  name of word as a string, ending at wh_NameLastChar
>b6bb	08					.byte *-L1	;wh_NameLength	length of name
>b6bc	22 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6bf	1d					.byte CO+IM+UF+NN	;wh_Flags	dictionary flags
=46651					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6c0					SLiteral:
.b6c0	20 a8 b2	jsr $b2a8			jsr underflow_2
.b6c3	20 e3 b6	jsr $b6e3			jsr SLiteral_Start	; compile header
.b6c6	4c d7 b6	jmp $b6d7			jmp _Move_Test
.b6c9	a1 29		lda ($29,x)	_Move_Loop:	lda (DStack+4,x)
.b6cb	20 e9 ca	jsr $cae9			jsr C_Comma_A
.b6ce	f6 29		inc $29,x			inc DStack+4,x
.b6d0	d0 02		bne $b6d4			bne +
.b6d2	f6 2a		inc $2a,x			inc DStack+5,x
.b6d4					+
.b6d4	20 32 c8	jsr $c832			jsr NOS_One_Minus
.b6d7	b5 27		lda $27,x	_Move_Test:	lda DStack+2,x
.b6d9	15 28		ora $28,x			ora DStack+3,x
.b6db	d0 ec		bne $b6c9			bne _Move_Loop
.b6dd	20 f0 b6	jsr $b6f0			jsr SLiteral_End
.b6e0	4c 17 c3	jmp $c317			jmp Two_Drop		; clean up and leave
=35					CL	.var *-(WordListLink+wh_Xt)
=$b6e3					en = *	; remember here
>b6be	23					.byte CL	;wh_CodeLength
.b6e3					SLiteral_Start:
.b6e3	a9 01		lda #$01			lda #<SLiteral_runtime	; compile JSR SLiteral_Runtime
.b6e5	a0 b7		ldy #$b7			ldy #>SLiteral_runtime
.b6e7	20 28 cb	jsr $cb28			jsr Jsr_Comma_YA
.b6ea	20 18 c8	jsr $c818			jsr Here		; push addr of start of JMP
.b6ed	4c 3f cb	jmp $cb3f			jmp Jmp_Comma_YA	; compile JMP around string (dummy addr)
.b6f0					SLiteral_End:
.b6f0	20 4c c8	jsr $c84c			jsr One_Plus
.b6f3	a5 00		lda $00				lda cp+0		; Update the address of the jump to HERE.
.b6f5	81 25		sta ($25,x)			sta (DStack+0,x)
.b6f7	20 4c c8	jsr $c84c			jsr One_Plus
.b6fa	a5 01		lda $01				lda cp+1
.b6fc	81 25		sta ($25,x)			sta (DStack+0,x)
.b6fe	e8		inx				inx			; drop herej
.b6ff	e8		inx				inx
.b700	60		rts				rts
.b701					SLiteral_Runtime:
.b701	86 17		stx $17				stx tmp2	; save data stack index
.b703	ba		tsx				tsx
.b704	bd 01 01	lda $0101,x	SLiteral_Run2:	lda RStack+1,x	; tmp1= RTS addr
.b707	85 15		sta $15				sta tmp1+0
.b709	bd 02 01	lda $0102,x			lda RStack+2,x
.b70c	85 16		sta $16				sta tmp1+1
.b70e	a6 17		ldx $17				ldx tmp2	; restore data stack index
.b710	ca		dex				dex		; push string addr
.b711	ca		dex				dex
.b712	18		clc				clc
.b713	a5 15		lda $15				lda tmp1+0
.b715	69 04		adc #$04			adc #3+1	;   just after the following JMP + correcting for JSR behavior
.b717	95 25		sta $25,x			sta DStack+0,x
.b719	a5 16		lda $16				lda tmp1+1
.b71b	69 00		adc #$00			adc #0
.b71d	95 26		sta $26,x			sta DStack+1,x
.b71f	ca		dex				dex		; push string length
.b720	ca		dex				dex
.b721	38		sec				sec
.b722	a0 02		ldy #$02			ldy #2		;   = string_end - string_addr
.b724	b1 15		lda ($15),y			lda (tmp1),y
.b726	f5 27		sbc $27,x			sbc DStack+2,x
.b728	95 25		sta $25,x			sta DStack+0,x
.b72a	c8		iny				iny
.b72b	b1 15		lda ($15),y			lda (tmp1),y
.b72d	f5 28		sbc $28,x			sbc DStack+3,x
.b72f	95 26		sta $26,x			sta DStack+1,x
.b731	60		rts				rts
>b732	2e 22				L1:	.text '."'	;  name of word as a string, ending at wh_NameLastChar
>b734	02					.byte *-L1	;wh_NameLength	length of name
>b735	3b b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b737	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b738	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=46772					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b739					Dot_quote:
.b739	20 4a b7	jsr $b74a			jsr S_Quote		; compile the string literal
.b73c	a0 cb		ldy #$cb			ldy #>Type		; compile: print string
.b73e	a9 d2		lda #$d2			lda #<Type
.b740	4c 28 cb	jmp $cb28			jmp Jsr_Comma_YA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b743					en = *	; remember here
>b737	0a					.byte CL	;wh_CodeLength
>b743	53 22				L1:	.text 'S"'	;  name of word as a string, ending at wh_NameLastChar
>b745	02					.byte *-L1	;wh_NameLength	length of name
>b746	b4 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b748	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b749	0c					.byte IM+NN	;wh_Flags	dictionary flags
=46789					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b74a					S_Quote:
.b74a	a9 00		lda #$00			lda #0		; Don't handle escaped chars.
.b74c					S_Quote_start:
.b74c	48		pha				pha			; save "handle escaped chars" flag
.b74d	a5 0a		lda $0a				lda state		; compiling?
.b74f	f0 06		beq $b757			beq _15
.b751	20 e3 b6	jsr $b6e3			jsr SLiteral_Start	; compile SLiteral header
.b754	4c 5a b7	jmp $b75a			jmp _19
.b757	20 18 c8	jsr $c818	_15:		jsr Here		; remember start addr
.b75a					_19:
.b75a	68		pla				pla			; init t2 flags
.b75b	20 27 b6	jsr $b627			jsr PushZA
.b75e	20 36 b6	jsr $b636			jsr Zero		; init t3 flags
.b761					_savechars_loop:
.b761	a5 08		lda $08				lda toin+0		; LSB
.b763	c5 06		cmp $06				cmp ciblen+0
.b765	a5 09		lda $09				lda toin+1		; MSB
.b767	e5 07		sbc $07				sbc ciblen+1
.b769	90 10		bcc $b77b			bcc _input_fine		; input buffer empty?
.b76b	20 8a c0	jsr $c08a			jsr Refill		; Refill it  ( -- f )
.b76e	b5 25		lda $25,x			lda DStack+0,x		; Check result of refill.
.b770	d0 05		bne $b777			bne +
.b772	a9 6b		lda #$6b			lda #$100+err_refill	; Something when wrong with refill.
.b774	4c c4 b2	jmp $b2c4			jmp ThrowA
.b777	e8		inx		+		inx			; Drop the refill flag
.b778	e8		inx				inx
.b779	d0 e6		bne $b761			bne _savechars_loop	; jump back up to the empty check, just in
.b77b					_input_fine:
.b77b	18		clc				clc			; tmp1= A= the char at Cib+ToIn
.b77c	a5 04		lda $04				lda cib+0
.b77e	85 15		sta $15				sta tmp1+0
.b780	a5 05		lda $05				lda cib+1
.b782	65 09		adc $09				adc toin+1
.b784	85 16		sta $16				sta tmp1+1
.b786	a4 08		ldy $08				ldy ToIn
.b788	b1 15		lda ($15),y			lda (tmp1),y
.b78a	85 15		sta $15				sta tmp1
.b78c	e6 08		inc $08				inc toin+0		; Move on to the next character.
.b78e	d0 02		bne $b792			bne +
.b790	e6 09		inc $09				inc toin+1
.b792					+
.b792	b4 27		ldy $27,x			ldy DStack+2,x		; handling escaped characters?
.b794	30 03		bmi $b799			bmi +
.b796	4c 3c b8	jmp $b83c			jmp _regular_char
.b799					+
.b799	b4 28		ldy $28,x			ldy DStack+3,x  		; already seen the backslash?
.b79b	30 03		bmi $b7a0			bmi +
.b79d	4c 32 b8	jmp $b832			jmp _not_escaped
.b7a0					+
.b7a0	84 16		sty $16				sty tmp1+1
.b7a2	24 16		bit $16				bit tmp1+1		; in the middle of a \x sequence ?
.b7a4	70 25		bvs $b7cb			bvs _check_esc_chars
.b7a6	a9 01		lda #$01			lda #1
.b7a8	24 16		bit $16				bit tmp1+1
.b7aa	d0 11		bne $b7bd			bne _esc_x_second_digit
.b7ac	c8		iny				iny			; Adjust flag for second digit next time.
.b7ad	94 28		sty $28,x			sty DStack+3,x
.b7af	a5 15		lda $15				lda tmp1+0		; Get the char again.
.b7b1	20 5f b8	jsr $b85f			jsr convert_hex_value	; Convert to hex
.b7b4	0a		asl a				asl			; This is the upper nybble, so move it up.
.b7b5	0a		asl a				asl
.b7b6	0a		asl a				asl
.b7b7	0a		asl a				asl
.b7b8	95 25		sta $25,x			sta DStack+0,x		; Save it for later.
.b7ba	4c 43 b8	jmp $b843			jmp _next_character
.b7bd					_esc_x_second_digit:
.b7bd	a9 00		lda #$00			lda #0			; Clear the escaped character flag
.b7bf	95 28		sta $28,x			sta DStack+3,x		;   (because we are handling it right here)
.b7c1	a5 15		lda $15				lda tmp1+0		; Convert to hex
.b7c3	20 5f b8	jsr $b85f			jsr convert_hex_value
.b7c6	15 25		ora $25,x			ora DStack+0,x		; combine with value in t3
.b7c8	4c 40 b8	jmp $b840			jmp _save_character
.b7cb					_check_esc_chars:
.b7cb	a0 00		ldy #$00			ldy #0
.b7cd	94 28		sty $28,x			sty DStack+3,x
.b7cf	a8		tay				tay
.b7d0	a9 07		lda #$07			lda #AscBELL	      ; BEL (ASCII value 7)
.b7d2	c0 61		cpy #$61			cpy #'a'
.b7d4	f0 6a		beq $b840			beq _save_character
.b7d6	a9 08		lda #$08			lda #AscBS	      ; Backspace (ASCII value 8)
.b7d8	c0 62		cpy #$62			cpy #'b'
.b7da	f0 64		beq $b840			beq _save_character
.b7dc	a9 1b		lda #$1b			lda #AscESC	       ; ESC (ASCII value 27)
.b7de	c0 65		cpy #$65			cpy #'e'
.b7e0	f0 5e		beq $b840			beq _save_character
.b7e2	a9 0c		lda #$0c			lda #AscFF	       ; FF (ASCII value 12)
.b7e4	c0 66		cpy #$66			cpy #'f'
.b7e6	f0 58		beq $b840			beq _save_character
.b7e8	a9 0a		lda #$0a			lda #AscLF	       ; LF (ASCII value 10)
.b7ea	c0 6c		cpy #$6c			cpy #'l'
.b7ec	f0 52		beq $b840			beq _save_character
.b7ee	c0 6e		cpy #$6e			cpy #'n'
.b7f0	f0 4e		beq $b840			beq _save_character
.b7f2	c0 6d		cpy #$6d			cpy #'m'
.b7f4	d0 09		bne $b7ff			bne +
.b7f6	a9 0d		lda #$0d			lda #AscCR		; CR/LF pair (ASCII values 13, 10)
.b7f8	20 e9 ca	jsr $cae9			jsr C_Comma_A
.b7fb	a9 0a		lda #$0a			lda #AscLF
.b7fd	d0 41		bne $b840			bne _save_character
.b7ff					+
.b7ff	a9 22		lda #$22			lda #AscDQuote		; Double quote (ASCII value 34)
.b801	c0 71		cpy #$71			cpy #'q'
.b803	f0 3b		beq $b840			beq _save_character
.b805	c0 22		cpy #$22			cpy #AscDQuote
.b807	f0 37		beq $b840			beq _save_character
.b809	a9 0d		lda #$0d			lda #AscCR		; CR (ASCII value 13)
.b80b	c0 72		cpy #$72			cpy #'r'
.b80d	f0 31		beq $b840			beq _save_character
.b80f	a9 09		lda #$09			lda #AscHT		; Horizontal TAB (ASCII value 9)
.b811	c0 74		cpy #$74			cpy #'t'
.b813	f0 2b		beq $b840			beq _save_character
.b815	a9 0b		lda #$0b			lda #AscVT		; Vertical TAB (ASCII value 11)
.b817	c0 76		cpy #$76			cpy #'v'
.b819	f0 25		beq $b840			beq _save_character
.b81b	a9 00		lda #$00			lda #0			; NULL (ASCII value 0)
.b81d	c0 7a		cpy #$7a			cpy #'z'
.b81f	f0 1f		beq $b840			beq _save_character
.b821					_check_esc_x:
.b821	c0 78		cpy #$78			cpy #'x'
.b823	d0 06		bne $b82b			bne +
.b825	a9 be		lda #$be			lda #$BE	; Clear bits 6 and 0
.b827	95 28		sta $28,x			sta DStack+3,x
.b829	d0 18		bne $b843			bne _next_character
.b82b					+
.b82b	a9 5c		lda #$5c			lda #AscBackslash	; Backslash (ASCII value 92)
.b82d	c0 5c		cpy #$5c			cpy #AscBackslash
.b82f	f0 0f		beq $b840			beq _save_character
.b831	98		tya				tya
.b832					_not_escaped:
.b832	c9 5c		cmp #$5c			cmp #$5C	; The backslash char
.b834	d0 06		bne $b83c			bne _regular_char
.b836	a9 ff		lda #$ff			lda #$FF
.b838	95 28		sta $28,x			sta DStack+3,x
.b83a	d0 07		bne $b843			bne _next_character
.b83c					_regular_char:
.b83c	c9 22		cmp #$22			cmp #AscDQuote		; ASCII for "
.b83e	f0 06		beq $b846			beq _found_string_end
.b840					_save_character:
.b840	20 e9 ca	jsr $cae9			jsr C_Comma_A		; compile this character into the dictionary
.b843					_next_character:
.b843	4c 61 b7	jmp $b761			jmp _savechars_loop
.b846					_found_string_end:
.b846	e8		inx				inx			; Drop t3
.b847	e8		inx				inx
.b848	a5 0a		lda $0a				lda state		; What happens next depends on the state (which is bad, but
.b84a	d0 0e		bne $b85a			bne _cmpl		; that's the way it works at the moment).
.b84c	38		sec				sec			; TOS= length of string = Here - start_addr
.b84d	a5 00		lda $00				lda cp+0
.b84f	f5 27		sbc $27,x			sbc DStack+2,x
.b851	95 25		sta $25,x			sta DStack+0,x		;   LSB
.b853	a5 01		lda $01				lda cp+1
.b855	f5 28		sbc $28,x			sbc DStack+3,x
.b857	95 26		sta $26,x			sta DStack+1,x		;   MSB
.b859	60		rts				rts			; ( startaddr u )
.b85a					_cmpl:
.b85a	e8		inx				inx			; Drop t2
.b85b	e8		inx				inx
.b85c	4c f0 b6	jmp $b6f0			jmp SLiteral_End	; ( jmpaddr )
=277					CL	.var *-(WordListLink+wh_Xt)
=$ff					CL	 .var $ff
=$b85f					en = *	; remember here
>b748	ff					.byte CL	;wh_CodeLength
.b85f					convert_hex_value:
.b85f	c9 41		cmp #$41			cmp #'A'
.b861	90 05		bcc $b868			bcc _digit
.b863	29 1f		and #$1f	_alpha:		and #$1F		; Make it uppercase.
.b865	69 08		adc #$08			adc #9-1		; gives value 10 for 'A'
.b867	60		rts				rts
.b868					_digit:
.b868	e9 2f		sbc #$2f			sbc #'0'-1
.b86a	60		rts				rts
>b86b	53 5c 22			L1:	.text 'S\"'	;  name of word as a string, ending at wh_NameLastChar
>b86e	03					.byte *-L1	;wh_NameLength	length of name
>b86f	c5 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b871	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b872	0c					.byte IM+NN	;wh_Flags	dictionary flags
=47086					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b873					S_Backslash_Quote:
.b873	a9 ff		lda #$ff			lda #$ff	; Do handle escaped chars.
.b875	4c 4c b7	jmp $b74c			jmp S_Quote_start
=5					CL	.var *-(WordListLink+wh_Xt)
=$b878					en = *	; remember here
>b871	05					.byte CL	;wh_CodeLength
>b878	4c 61 74 65 73 74 58 74		L1:	.text "LatestXt"	;  name of word as a string, ending at wh_NameLastChar
>b880	08					.byte *-L1	;wh_NameLength	length of name
>b881	ee b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b883	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b884	08					.byte NN	;wh_Flags	dictionary flags
=47104					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b885	20 98 b8	jsr $b898	LatestXt:	jsr LatestNt	; ( nt )
.b888	4c 09 bc	jmp $bc09			jmp Name_To_Int	; ( xt )
=6					CL	.var *-(WordListLink+wh_Xt)
=$b88b					en = *	; remember here
>b883	06					.byte CL	;wh_CodeLength
>b88b	4c 61 74 65 73 74 4e 74		L1:	.text "LatestNt"	;  name of word as a string, ending at wh_NameLastChar
>b893	08					.byte *-L1	;wh_NameLength	length of name
>b894	00 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b896	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b897	08					.byte NN	;wh_Flags	dictionary flags
=47123					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b898	20 a2 b8	jsr $b8a2	LatestNt:	jsr current_to_dp
.b89b	a5 11		lda $11				lda dp+0
.b89d	a4 12		ldy $12				ldy dp+1
.b89f	4c e5 b5	jmp $b5e5			jmp PushYA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b8a2					en = *	; remember here
>b896	0a					.byte CL	;wh_CodeLength
.b8a2					current_to_dp:
.b8a2	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.b8a5	0a		asl a				asl			; dp= wordlists[A]
.b8a6	a8		tay				tay
.b8a7	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.b8aa	85 11		sta $11				sta dp+0
.b8ac	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.b8af	85 12		sta $12				sta dp+1
.b8b1	60		rts				rts
.b8b2					dp_to_current:
.b8b2	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.b8b5	0a		asl a		                asl			; wordlists[A]=dp
.b8b6	a8		tay		                tay
.b8b7	a5 11		lda $11		                lda dp+0
.b8b9	99 12 03	sta $0312,y			sta WordlistsV+0,y
.b8bc	a5 12		lda $12		                lda dp+1
.b8be	99 13 03	sta $0313,y	                sta WordlistsV+1,y
.b8c1	60		rts		                rts
>b8c2	50 61 72 73 65 2d 4e 61		L1:	.text "Parse-Name"	;  name of word as a string, ending at wh_NameLastChar
>b8ca	6d 65
>b8cc	0a					.byte *-L1	;wh_NameLength	length of name
>b8cd	13 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b8cf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b8d0	08					.byte NN	;wh_Flags	dictionary flags
=47180					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b8d1					Parse_Name:
.b8d1	a5 04		lda $04				lda cib+0		; tmp2= cib+(toin & $ff00)
.b8d3	85 17		sta $17				sta tmp2+0
.b8d5	18		clc				clc
.b8d6	a5 05		lda $05				lda cib+1
.b8d8	65 09		adc $09				adc toin+1
.b8da	85 18		sta $18				sta tmp2+1
.b8dc	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.b8de					_skip_loop:
.b8de	c4 06		cpy $06				cpy ciblen+0		; more chars left?
.b8e0	a5 09		lda $09				lda toin+1
.b8e2	e5 07		sbc $07				sbc ciblen+1
.b8e4	b0 12		bcs $b8f8			bcs _empty_line
.b8e6	b1 17		lda ($17),y			lda (tmp2),y		; get cib[toin]
.b8e8	20 6f a7	jsr $a76f			jsr is_whitespace
.b8eb	90 10		bcc $b8fd			bcc _char_found
.b8ed	c8		iny				iny			; increment toin
.b8ee	84 08		sty $08				sty toin+0
.b8f0	d0 ec		bne $b8de			bne _skip_loop
.b8f2	e6 09		inc $09				inc toin+1
.b8f4	e6 18		inc $18				inc tmp2+1
.b8f6	d0 e6		bne $b8de			bne _skip_loop
.b8f8					_empty_line:
.b8f8	ca		dex				dex			; junk address
.b8f9	ca		dex				dex
.b8fa	4c 36 b6	jmp $b636			jmp Zero		; length=0
.b8fd					_char_found:
.b8fd	20 55 b6	jsr $b655			jsr Bl			; push delimiter char
.b900	4c 1a b9	jmp $b91a			jmp Parse
=50					CL	.var *-(WordListLink+wh_Xt)
=$b903					en = *	; remember here
>b8cf	32					.byte CL	;wh_CodeLength
.b903					parse_name_check:
.b903	20 d1 b8	jsr $b8d1			jsr parse_name		; get character from string
.b906	b5 25		lda $25,x			lda DStack+0,x		; empty string?
.b908	f0 01		beq $b90b			beq _empty
.b90a	60		rts				rts
.b90b	a9 f3		lda #$f3	_empty:		lda #$100+err_UndefinedWord	; complain & abort
.b90d	4c c4 b2	jmp $b2c4			jmp ThrowA
>b910	50 61 72 73 65			L1:	.text "Parse"	;  name of word as a string, ending at wh_NameLastChar
>b915	05					.byte *-L1	;wh_NameLength	length of name
>b916	4c b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b918	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b919	08					.byte NN	;wh_Flags	dictionary flags
=47253					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b91a	20 39 b2	jsr $b239	Parse:		jsr PopA		; pop c (check for underflow)
.b91d	85 1d		sta $1d		Parse_A:	sta tmp5		; save delimiter
.b91f	ca		dex				dex			; alloc space for addr
.b920	ca		dex				dex
.b921	ca		dex				dex			; alloc space for length
.b922	ca		dex				dex
.b923	18		clc				clc			; addr= cib+toin
.b924	a5 08		lda $08				lda toin+0
.b926	65 04		adc $04				adc cib+0
.b928	95 27		sta $27,x			sta DStack+2,x
.b92a	a5 09		lda $09				lda toin+1
.b92c	65 05		adc $05				adc cib+1
.b92e	95 28		sta $28,x			sta DStack+3,x
.b930	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.b932	84 15		sty $15				sty tmp1+0
.b934	a5 04		lda $04				lda cib+0		; tmp2= cib + (toin & $ff00)
.b936	85 17		sta $17				sta tmp2+0
.b938	18		clc				clc
.b939	a5 09		lda $09				lda toin+1		; tmp1= toin
.b93b	85 16		sta $16				sta tmp1+1
.b93d	65 05		adc $05				adc cib+1
.b93f	85 18		sta $18				sta tmp2+1
.b941	a9 00		lda #$00			lda #0		; Initialize the offset we use to adjust EOL or found delimiter
.b943	85 1e		sta $1e				sta tmp5+1
.b945					_loop:
.b945	c4 06		cpy $06				cpy ciblen+0		; end of string?
.b947	a5 09		lda $09				lda toin+1
.b949	e5 07		sbc $07				sbc ciblen+1
.b94b	b0 1d		bcs $b96a			bcs _eol
.b94d	a5 1d		lda $1d				lda tmp5+0		; get delimiter
.b94f	c9 20		cmp #$20			cmp #AscSP		; is it whitespace?
.b951	d0 08		bne $b95b			bne _not_whitespace
.b953	b1 17		lda ($17),y			lda (tmp2),y		; get cib[toin]
.b955	c9 21		cmp #$21			cmp #AscSP+1		; we're looking for all whitespace
.b957	90 0f		bcc $b968			bcc _found_delimiter
.b959	b0 04		bcs $b95f			bcs _not_delimiter
.b95b	d1 17		cmp ($17),y	_not_whitespace: cmp (tmp2),y		; compare delimter to cib[toin]
.b95d	f0 09		beq $b968			beq _found_delimiter
.b95f					_not_delimiter:
.b95f	c8		iny				iny			; next character
.b960	d0 e3		bne $b945			bne _loop
.b962	e6 09		inc $09				inc toin+1
.b964	e6 18		inc $18				inc tmp2+1
.b966	d0 dd		bne $b945			bne _loop
.b968					_found_delimiter:
.b968	e6 1e		inc $1e				inc tmp5+1
.b96a					_eol:
.b96a	38		sec				sec			; length = toin - tmp1
.b96b	98		tya				tya
.b96c	e5 15		sbc $15				sbc tmp1+0
.b96e	95 25		sta $25,x			sta DStack+0,x
.b970	a5 09		lda $09				lda toin+1
.b972	e5 16		sbc $16				sbc tmp1+1
.b974	95 26		sta $26,x			sta DStack+1,x
.b976	18		clc				clc			; toin = toin + delimiter_offset
.b977	98		tya				tya
.b978	65 1e		adc $1e				adc tmp5+1
.b97a	85 08		sta $08				sta toin+0
.b97c	90 02		bcc $b980			bcc +
.b97e	e6 09		inc $09				inc toin+1
.b980					+
=102					CL	.var *-(WordListLink+wh_Xt)
=$b980					en = *	; remember here
>b918	66					.byte CL	;wh_CodeLength
.b980	60		rts				rts
>b981	45 78 65 63 75 74 65 2d		L1:	.text "Execute-Parsing"	;  name of word as a string, ending at wh_NameLastChar
>b989	50 61 72 73 69 6e 67
>b990	0f					.byte *-L1	;wh_NameLength	length of name
>b991	95 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b993	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b994	18					.byte UF+NN	;wh_Flags	dictionary flags
=47376					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b995					Execute_parsing:
.b995	20 ad b2	jsr $b2ad			jsr underflow_3
.b998	20 06 c2	jsr $c206			jsr Input_To_R		; save existing input for later
.b99b	20 74 cc	jsr $cc74			jsr Not_Rot		; -ROT ( xt addr u )
.b99e	20 55 b2	jsr $b255			jsr PopYA		; TOS is new ciblen
.b9a1	85 06		sta $06				sta ciblen+0
.b9a3	84 07		sty $07				sty ciblen+1
.b9a5	20 55 b2	jsr $b255			jsr PopYA		; NOS is new cib
.b9a8	85 04		sta $04				sta cib+0
.b9aa	84 05		sty $05				sty cib+1
.b9ac	a9 00		lda #$00			lda #0
.b9ae	85 08		sta $08				sta toin+0		; Set >IN to zero
.b9b0	85 09		sta $09				sta toin+1
.b9b2	20 10 cc	jsr $cc10			jsr Execute
.b9b5	20 28 c2	jsr $c228			jsr R_To_Input		; restore
=35					CL	.var *-(WordListLink+wh_Xt)
=$b9b8					en = *	; remember here
>b993	23					.byte CL	;wh_CodeLength
.b9b8	60		rts				rts
>b9b9	53 6f 75 72 63 65		L1:	.text "Source"	;  name of word as a string, ending at wh_NameLastChar
>b9bf	06					.byte *-L1	;wh_NameLength	length of name
>b9c0	10 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b9c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b9c3	08					.byte NN	;wh_Flags	dictionary flags
=47423					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b9c4					Source:
.b9c4	a5 04		lda $04				lda cib+0	; push address
.b9c6	a4 05		ldy $05				ldy cib+1
.b9c8	20 e5 b5	jsr $b5e5			jsr PushYA
.b9cb	a5 06		lda $06				lda ciblen+0	; push size, return
.b9cd	a4 07		ldy $07				ldy ciblen+1
.b9cf	4c e5 b5	jmp $b5e5			jmp PushYA
=14					CL	.var *-(WordListLink+wh_Xt)
=$b9d2					en = *	; remember here
>b9c2	0e					.byte CL	;wh_CodeLength
>b9d2	53 6f 75 72 63 65 2d 49		L1:	.text "Source-Id"	;  name of word as a string, ending at wh_NameLastChar
>b9da	64
>b9db	09					.byte *-L1	;wh_NameLength	length of name
>b9dc	3f b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b9de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b9df	08					.byte NN	;wh_Flags	dictionary flags
=47451					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b9e0	a5 02		lda $02		Source_Id:	lda insrc+0
.b9e2	a4 03		ldy $03				ldy insrc+1
.b9e4	4c e5 b5	jmp $b5e5			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b9e7					en = *	; remember here
>b9de	07					.byte CL	;wh_CodeLength
>b9e7	45 78 69 74			L1:	.text "Exit"	;  name of word as a string, ending at wh_NameLastChar
>b9eb	04					.byte *-L1	;wh_NameLength	length of name
>b9ec	5b b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b9ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b9ef	03					.byte AN+CO	;wh_Flags	dictionary flags
=47467					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b9f0					Exit:
.b9f0	60		rts				rts		; keep before FEnd so it gets inlined
=1					CL	.var *-(WordListLink+wh_Xt)
=$b9f1					en = *	; remember here
>b9ee	01					.byte CL	;wh_CodeLength
>b9f1	3b				L1:	.text ";"	;  name of word as a string, ending at wh_NameLastChar
>b9f2	01					.byte *-L1	;wh_NameLength	length of name
>b9f3	6b b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b9f5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b9f6	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=47474					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b9f7					Semicolon:
.b9f7	20 69 b5	jsr $b569			jsr Left_Bracket	; switch to interpret state
.b9fa	24 0c		bit $0c				bit status		; is this a : word or a :NONAME word?
.b9fc	70 0c		bvs $ba0a			bvs _colonword
.b9fe	a9 60		lda #$60			lda #$60		; compile an RTS
.ba00	20 e9 ca	jsr $cae9			jsr C_Comma_A
.ba03	a5 0f		lda $0f				lda workword+0		; push xt, return
.ba05	a4 10		ldy $10				ldy workword+1
.ba07	4c e5 b5	jmp $b5e5			jmp PushYA
.ba0a					_colonword:
.ba0a	24 0c		bit $0c				bit status
.ba0c	10 1d		bpl $ba2b			bpl _new_word	; Bit 7 is clear = new word
.ba0e	a5 0f		lda $0f				lda WorkWord+0		; push our nt
.ba10	a4 10		ldy $10				ldy WorkWord+1
.ba12	20 e5 b5	jsr $b5e5			jsr PushYA
.ba15	20 21 bc	jsr $bc21			jsr Name_To_String	; get our name string
.ba18	a9 0a		lda #$0a			lda #<str_redefined	; string "redefined"
.ba1a	a0 d9		ldy #$d9			ldy #>str_redefined
.ba1c	20 f3 cb	jsr $cbf3			jsr Print_ASCIIZ_YA_no_lf
.ba1f	20 d2 cb	jsr $cbd2			jsr Type		; print the offending word.
.ba22	20 c5 cb	jsr $cbc5			jsr Space
.ba25	a9 7f		lda #$7f			lda #$ff-%10000000
.ba27	25 0c		and $0c				and status
.ba29	85 0c		sta $0c				sta status
.ba2b					_new_word:
.ba2b	20 4e bf	jsr $bf4e			jsr Header_Link		; finish linking into current dictionary
.ba2e	20 36 ba	jsr $ba36			jsr adjust_z		; fix word length
.ba31	a9 60		lda #$60			lda #$60		; compile an RTS
.ba33	4c e9 ca	jmp $cae9			jmp C_Comma_A
=63					CL	.var *-(WordListLink+wh_Xt)
=$ba36					en = *	; remember here
>b9f5	3f					.byte CL	;wh_CodeLength
.ba36					adjust_z:
.ba36	a5 11		lda $11				lda dp+0		; tmp1= xt
.ba38	18		clc				clc
.ba39	69 85		adc #$85			adc #Wh_xt
.ba3b	85 15		sta $15				sta tmp1+0
.ba3d	a5 12		lda $12				lda dp+1
.ba3f	69 00		adc #$00			adc #0
.ba41	85 16		sta $16				sta tmp1+1
.ba43	38		sec				sec			; length= cp-xt
.ba44	a5 00		lda $00				lda cp+0
.ba46	e5 15		sbc $15				sbc tmp1+0
.ba48	a8		tay				tay
.ba49	a5 01		lda $01				lda cp+1
.ba4b	e5 16		sbc $16				sbc tmp1+1
.ba4d	f0 0c		beq $ba5b			beq _short		; length > $ff ?
.ba4f	a0 84		ldy #$84			ldy #Wh_Flags		; make it NN
.ba51	b1 11		lda ($11),y			lda (dp),y
.ba53	29 fd		and #$fd			and #$ff-AN
.ba55	09 08		ora #$08			ora #NN
.ba57	91 11		sta ($11),y			sta (dp),y
.ba59	a0 ff		ldy #$ff			ldy #$ff		; set max length for header
.ba5b	98		tya		_short:		tya			; fill in length in header
.ba5c	a0 83		ldy #$83			ldy #Wh_CodeLength
.ba5e	91 11		sta ($11),y			sta (dp),y
.ba60	60		rts				rts
>ba61	3a				L1:	.text ":"	;  name of word as a string, ending at wh_NameLastChar
>ba62	01					.byte *-L1	;wh_NameLength	length of name
>ba63	72 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba65	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba66	08					.byte NN	;wh_Flags	dictionary flags
=47586					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba67					Colon:
.ba67	20 7f b5	jsr $b57f			jsr Right_Bracket	; switch to compile state
.ba6a	a5 0c		lda $0c				lda status
.ba6c	09 40		ora #$40			ora #%01000000	; tell ";" and RECURSE this is a normal word
.ba6e	09 80		ora #$80			ora #%10000000	; Tell Header_Build not to print warning for duplicate name.
.ba70	85 0c		sta $0c				sta status
.ba72	4c 59 bf	jmp $bf59			jmp Header_Build	; compile word header (but don't link)
=14					CL	.var *-(WordListLink+wh_Xt)
=$ba75					en = *	; remember here
>ba65	0e					.byte CL	;wh_CodeLength
>ba75	3a 4e 6f 4e 61 6d 65		L1:	.text ":NoName"	;  name of word as a string, ending at wh_NameLastChar
>ba7c	07					.byte *-L1	;wh_NameLength	length of name
>ba7d	e2 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba7f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba80	08					.byte NN	;wh_Flags	dictionary flags
=47612					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba81					Colon_NoName:
.ba81	20 7f b5	jsr $b57f			jsr Right_Bracket	; switch to compile state
.ba84	a9 bf		lda #$bf			lda #$ff-%01000000	; tell ";" and RECURSE this is
.ba86	25 0c		and $0c				and status		; a :NONAME word.
.ba88	85 0c		sta $0c				sta status
.ba8a	a5 00		lda $00				lda cp+0
.ba8c	85 0f		sta $0f				sta workword+0
.ba8e	a5 01		lda $01				lda cp+1
.ba90	85 10		sta $10				sta workword+1
=17					CL	.var *-(WordListLink+wh_Xt)
=$ba92					en = *	; remember here
>ba7f	11					.byte CL	;wh_CodeLength
.ba92	60		rts				rts
>ba93	27				L1:	.text "'"	;  name of word as a string, ending at wh_NameLastChar
>ba94	01					.byte *-L1	;wh_NameLength	length of name
>ba95	fc b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba97	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba98	08					.byte NN	;wh_Flags	dictionary flags
=47636					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba99	20 9f ba	jsr $ba9f	Tick:		jsr Tick_Nt
.ba9c	4c 09 bc	jmp $bc09			jmp Name_To_Int	; ( nt -- xt )
=6					CL	.var *-(WordListLink+wh_Xt)
=$ba9f					en = *	; remember here
>ba97	06					.byte CL	;wh_CodeLength
.ba9f	20 03 b9	jsr $b903	Tick_Nt:	jsr parse_name_check	; ( -- addr u )
.baa2	4c 3b bb	jmp $bb3b			jmp find_name_check	; ( addr u -- nt )
>baa5	5b 27 5d			L1:	.text "[']"	;  name of word as a string, ending at wh_NameLastChar
>baa8	03					.byte *-L1	;wh_NameLength	length of name
>baa9	14 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>baab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>baac	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=47656					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.baad	20 99 ba	jsr $ba99	Bracket_Tick:	jsr Tick
.bab0	4c 98 b5	jmp $b598			jmp Literal
=6					CL	.var *-(WordListLink+wh_Xt)
=$bab3					en = *	; remember here
>baab	06					.byte CL	;wh_CodeLength
>bab3	46 69 6e 64			L1:	.text "Find"	;  name of word as a string, ending at wh_NameLastChar
>bab7	04					.byte *-L1	;wh_NameLength	length of name
>bab8	28 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>baba	03					.byte 3		;wh_CodeLength  (with placeholder value)
>babb	18					.byte UF+NN	;wh_Flags	dictionary flags
=47671					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.babc					Find:
.babc	20 93 b2	jsr $b293			jsr underflow_1
.babf	b5 26		lda $26,x			lda DStack+1,x		; MSB
.bac1	48		pha				pha
.bac2	b5 25		lda $25,x			lda DStack+0,x		; LSB
.bac4	48		pha				pha
.bac5	20 1b b0	jsr $b01b			jsr Count		; ( caddr -- addr u )
.bac8	20 0f bb	jsr $bb0f			jsr find_name		; ( addr u -- nt | 0 )
.bacb	b5 26		lda $26,x			lda DStack+1,x		; word found?
.bacd	d0 0a		bne $bad9			bne _found_word
.bacf	20 18 b6	jsr $b618			jsr False		; ( 0 0 )
.bad2	68		pla				pla			; LSB of address
.bad3	95 27		sta $27,x			sta DStack+2,x
.bad5	68		pla				pla
.bad6	95 28		sta $28,x			sta DStack+3,x		; MSB of address
.bad8	60		rts				rts			; ( addr 0 )
.bad9					_found_word:
.bad9	68		pla				pla			; We don't need the address after all, RDrop it
.bada	68		pla				pla
.badb	20 4a cd	jsr $cd4a			jsr Dup		; ( nt nt )
.bade	20 09 bc	jsr $bc09			jsr Name_To_Int	; ( nt xt )
.bae1	20 68 cd	jsr $cd68			jsr Swap		; ( xt nt )
.bae4	a0 00		ldy #$00			ldy #0			; Prepare flag
.bae6	a9 84		lda #$84			lda #Wh_Flags		; get flags
.bae8	20 fb c7	jsr $c7fb			jsr plus_a		; ( xt nt+Wh_Flags )
.baeb	a1 25		lda ($25,x)			lda (DStack+0,x)		; ( xt flags )
.baed	29 04		and #$04			and #IM
.baef	d0 07		bne $baf8			bne _immediate		; bit set, we're immediate
.baf1	a9 ff		lda #$ff			lda #$FF		; We're not immediate, return -1
.baf3	95 25		sta $25,x			sta DStack+0,x
.baf5	95 26		sta $26,x			sta DStack+1,x
.baf7	60		rts				rts
.baf8					_immediate:
.baf8	a9 01		lda #$01			lda #1			; We're immediate, return 1
.bafa	95 25		sta $25,x			sta DStack+0,x
.bafc	a9 00		lda #$00			lda #0
.bafe	95 26		sta $26,x			sta DStack+1,x
=68					CL	.var *-(WordListLink+wh_Xt)
=$bb00					en = *	; remember here
>baba	44					.byte CL	;wh_CodeLength
.bb00	60		rts				rts
>bb01	46 69 6e 64 2d 4e 61 6d		L1:	.text "Find-Name"	;  name of word as a string, ending at wh_NameLastChar
>bb09	65
>bb0a	09					.byte *-L1	;wh_NameLength	length of name
>bb0b	37 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb0d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb0e	18					.byte UF+NN	;wh_Flags	dictionary flags
=47754					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb0f					find_name:
.bb0f	20 a8 b2	jsr $b2a8			jsr underflow_2
.bb12	20 48 bb	jsr $bb48			jsr fina_pattern_prepare ; tmp2 = pseudo-header of pattern name
.bb15	a9 ff		lda #$ff			lda #$ff		; for each wordlist in the wordlist search order.
.bb17	95 26		sta $26,x			sta DStack+1,x
.bb19					_wordlist_next:
.bb19	f6 26		inc $26,x			inc DStack+1,x
.bb1b	b4 26		ldy $26,x			ldy DStack+1,x
.bb1d	cc 2a 03	cpy $032a			cpy Num_OrderV		; at end of list?
.bb20	90 06		bcc $bb28			bcc _nextS
.bb22	d0 14		bne $bb38			bne _fail
.bb24	a9 03		lda #$03			lda #wid_Root		; also try root wordlist
.bb26	d0 03		bne $bb2b			bne _nextA
.bb28	b9 2b 03	lda $032b,y	_nextS:		lda Search_OrderV,y	; A = search_order[Y]  get wordlist ID
.bb2b	20 5e bb	jsr $bb5e	_nextA:		jsr fina_search_wordlist
.bb2e	f0 e9		beq $bb19			beq _wordlist_next
.bb30	a5 15		lda $15				lda tmp1+0		; NOS = nt
.bb32	95 27		sta $27,x			sta DStack+2,x
.bb34	a5 16		lda $16				lda tmp1+1
.bb36	95 28		sta $28,x			sta DStack+3,x
.bb38					_fail:
.bb38	e8		inx				inx			; Drop	pattern name length
.bb39	e8		inx				inx
=43					CL	.var *-(WordListLink+wh_Xt)
=$bb3a					en = *	; remember here
>bb0d	2b					.byte CL	;wh_CodeLength
.bb3a	60		rts				rts
.bb3b					find_name_check:
.bb3b	20 0f bb	jsr $bb0f			jsr find_name
.bb3e	b5 26		lda $26,x			lda DStack+1,x		; not found?
.bb40	f0 01		beq $bb43			beq _NotFound
.bb42	60		rts				rts
.bb43	a9 f3		lda #$f3	_NotFound:	lda #$100+err_UndefinedWord	; complain & quit
.bb45	4c c4 b2	jmp $b2c4			jmp ThrowA
.bb48					fina_pattern_prepare:
.bb48	38		sec				sec			; A= 0 - name start offset
.bb49	b5 25		lda $25,x			lda DStack+0,x
.bb4b	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.bb4d	75 27		adc $27,x			adc DStack+2,x		; tmp2 = pattern name nt
.bb4f	85 17		sta $17				sta tmp2+0
.bb51	a9 ff		lda #$ff			lda #$ff
.bb53	75 28		adc $28,x			adc DStack+3,x
.bb55	85 18		sta $18				sta tmp2+1
.bb57	a9 00		lda #$00			lda #0			; assuming failure
.bb59	95 27		sta $27,x			sta DStack+2,x
.bb5b	95 28		sta $28,x			sta DStack+3,x
.bb5d	60		rts				rts
.bb5e					fina_search_wordlist:
.bb5e	0a		asl a				asl			; tmp1 = up->wordlists[A]
.bb5f	a8		tay				tay
.bb60	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.bb63	85 15		sta $15				sta tmp1+0
.bb65	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bb68	85 16		sta $16				sta tmp1+1
.bb6a	d0 10		bne $bb7c			bne _word_test		;   not end-of-list?
.bb6c	60		rts		_rts:		rts			; Z= end_of_list
.bb6d					_word_next:
.bb6d	a0 82		ldy #$82			ldy #wh_WordListLink+1	; tmp1= tmp1->Wh_WordListLink
.bb6f	b1 15		lda ($15),y			lda (tmp1),y
.bb71	48		pha				pha
.bb72	88		dey				dey
.bb73	b1 15		lda ($15),y			lda (tmp1),y
.bb75	85 15		sta $15				sta tmp1+0
.bb77	68		pla				pla
.bb78	85 16		sta $16				sta tmp1+1
.bb7a	f0 f0		beq $bb6c			beq _rts		; end of list?
.bb7c					_word_test:
.bb7c	a0 80		ldy #$80			ldy #Wh_NameLength	; Are strings the same length?
.bb7e	b1 15		lda ($15),y			lda (tmp1),y
.bb80	d5 25		cmp $25,x			cmp DStack+0,x
.bb82	d0 e9		bne $bb6d			bne _word_next
.bb84	a9 7f		lda #$7f			lda #Wh_NameLastChar	; Y= index of 1st name char-1
.bb86	38		sec				sec
.bb87	f5 25		sbc $25,x			sbc DStack+0,x
.bb89	a8		tay				tay
.bb8a	c8		iny		_char_next:	iny			; to next char
.bb8b	30 df		bmi $bb6c			bmi _rts		; end of string?
.bb8d	b1 17		lda ($17),y			lda (tmp2),y		; char of mystery string
.bb8f	51 15		eor ($15),y			eor (tmp1),y
.bb91	f0 f7		beq $bb8a			beq _char_next		;   exact match?
.bb93	29 df		and #$df			and #$df		;   maybe only a case mismatch?
.bb95	d0 d6		bne $bb6d			bne _word_next
.bb97	b1 15		lda ($15),y			lda (tmp1),y		;   verify it is alpha char
.bb99	29 df		and #$df			and #$df
.bb9b	c9 41		cmp #$41			cmp #'A'
.bb9d	90 ce		bcc $bb6d			bcc _word_next
.bb9f	c9 5b		cmp #$5b			cmp #'Z'+1
.bba1	90 e7		bcc $bb8a			bcc _char_next
.bba3	b0 c8		bcs $bb6d			bcs _word_next
>bba5	49 6e 74 3e 4e 61 6d 65		L1:	.text "Int>Name"	;  name of word as a string, ending at wh_NameLastChar
>bbad	08					.byte *-L1	;wh_NameLength	length of name
>bbae	8a ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bbb0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bbb1	18					.byte UF+NN	;wh_Flags	dictionary flags
=47917					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bbb2					Int_To_Name:
.bbb2	20 93 b2	jsr $b293			jsr underflow_1
.bbb5	a9 7b		lda #$7b			lda #$100-Wh_xt		; convert xt on stack to proposed nt
.bbb7	20 3b c8	jsr $c83b			jsr Minus_A
.bbba	a9 ff		lda #$ff			lda #$ff		; for each wordlist
.bbbc	20 27 b6	jsr $b627			jsr PushZA
.bbbf					_wordlist_next:
.bbbf	f6 25		inc $25,x			inc DStack+0,x
.bbc1	b5 25		lda $25,x			lda DStack+0,x		; Get the current wordlist index
.bbc3	c9 0c		cmp #$0c			cmp #(Num_OrderV-WordlistsV)/2
.bbc5	b0 2c		bcs $bbf3			bcs _fail
.bbc7	0a		asl a				asl			; tmp2 = wordlist[A]
.bbc8	a8		tay				tay
.bbc9	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.bbcc	85 17		sta $17				sta tmp2+0
.bbce	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bbd1	85 18		sta $18				sta tmp2+1
.bbd3	f0 ea		beq $bbbf			beq _wordlist_next	;   empty wordlist?
.bbd5	d0 0f		bne $bbe6			bne _word_test
.bbd7	a0 82		ldy #$82	_word_next:	ldy #wh_WordListLink+1	; follow wh_WordListLink to next word
.bbd9	b1 17		lda ($17),y			lda (tmp2),y
.bbdb	48		pha				pha
.bbdc	88		dey				dey
.bbdd	b1 17		lda ($17),y			lda (tmp2),y
.bbdf	85 17		sta $17				sta tmp2+0
.bbe1	68		pla				pla
.bbe2	85 18		sta $18				sta tmp2+1
.bbe4	f0 d9		beq $bbbf			beq _wordlist_next	;  end of list?
.bbe6	55 28		eor $28,x	_word_test:	eor DStack+3,x		; tmp2 = nt ?
.bbe8	d0 ed		bne $bbd7			bne _word_next
.bbea	a5 17		lda $17				lda tmp2+0
.bbec	55 27		eor $27,x			eor DStack+2,x
.bbee	d0 e7		bne $bbd7			bne _word_next
.bbf0	e8		inx				inx			; Drop wordlist index
.bbf1	e8		inx				inx
.bbf2	60		rts				rts
.bbf3					_fail:
.bbf3	e8		inx				inx			; Drop wordlist index
.bbf4	e8		inx				inx
.bbf5	a9 00		lda #$00			lda #0			; return a zero to indicate that we didn't find it.
.bbf7	95 25		sta $25,x			sta DStack+0,x
.bbf9	95 26		sta $26,x			sta DStack+1,x
=73					CL	.var *-(WordListLink+wh_Xt)
=$bbfb					en = *	; remember here
>bbb0	49					.byte CL	;wh_CodeLength
.bbfb	60		rts				rts
>bbfc	4e 61 6d 65 3e 49 6e 74		L1:	.text "Name>Int"	;  name of word as a string, ending at wh_NameLastChar
>bc04	08					.byte *-L1	;wh_NameLength	length of name
>bc05	2d bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc07	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc08	18					.byte UF+NN	;wh_Flags	dictionary flags
=48004					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc09					Name_To_Int:
.bc09	20 93 b2	jsr $b293			jsr underflow_1
.bc0c	a9 85		lda #$85			lda #wh_Xt
.bc0e	4c fb c7	jmp $c7fb			jmp Plus_A
=8					CL	.var *-(WordListLink+wh_Xt)
=$bc11					en = *	; remember here
>bc07	08					.byte CL	;wh_CodeLength
>bc11	4e 61 6d 65 3e 53 74 72		L1:	.text "Name>String"	;  name of word as a string, ending at wh_NameLastChar
>bc19	69 6e 67
>bc1c	0b					.byte *-L1	;wh_NameLength	length of name
>bc1d	84 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc1f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc20	18					.byte UF+NN	;wh_Flags	dictionary flags
=48028					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc21					Name_To_String:
.bc21	20 93 b2	jsr $b293			jsr underflow_1
.bc24	b5 25		lda $25,x			lda DStack+0,x		; tmp1 = nt
.bc26	b4 26		ldy $26,x			ldy DStack+1,x
.bc28	85 15		sta $15				sta tmp1+0
.bc2a	84 16		sty $16				sty tmp1+1
.bc2c	a0 80		ldy #$80			ldy #Wh_NameLength
.bc2e	a9 80		lda #$80			lda #Wh_NameLastChar+1	; calc start offset
.bc30	38		sec				sec
.bc31	f1 15		sbc ($15),y			sbc (tmp1),y
.bc33	20 fb c7	jsr $c7fb			jsr plus_a		; calc start addr
.bc36	b1 15		lda ($15),y			lda (tmp1),y		; push length
.bc38	4c 27 b6	jmp $b627			jmp PushZA
=26					CL	.var *-(WordListLink+wh_Xt)
=$bc3b					en = *	; remember here
>bc1f	1a					.byte CL	;wh_CodeLength
>bc3b	3e 42 6f 64 79			L1:	.text ">Body"	;  name of word as a string, ending at wh_NameLastChar
>bc40	05					.byte *-L1	;wh_NameLength	length of name
>bc41	9c bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc43	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc44	18					.byte UF+NN	;wh_Flags	dictionary flags
=48064					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc45					To_Body:
.bc45	20 93 b2	jsr $b293			jsr underflow_1
.bc48	a9 03		lda #$03			lda #3		; PFA is after the beginning JSR abs
.bc4a	4c fb c7	jmp $c7fb			jmp plus_a
=8					CL	.var *-(WordListLink+wh_Xt)
=$bc4d					en = *	; remember here
>bc43	08					.byte CL	;wh_CodeLength
>bc4d	45 72 61 73 65			L1:	.text "Erase"	;  name of word as a string, ending at wh_NameLastChar
>bc52	05					.byte *-L1	;wh_NameLength	length of name
>bc53	c0 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc55	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc56	08					.byte NN	;wh_Flags	dictionary flags
=48082					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc57					Erase:
.bc57	20 36 b6	jsr $b636			jsr Zero
.bc5a	4c 76 bc	jmp $bc76			jmp Fill
=6					CL	.var *-(WordListLink+wh_Xt)
=$bc5d					en = *	; remember here
>bc55	06					.byte CL	;wh_CodeLength
>bc5d	42 6c 61 6e 6b			L1:	.text "Blank"	;  name of word as a string, ending at wh_NameLastChar
>bc62	05					.byte *-L1	;wh_NameLength	length of name
>bc63	d2 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc65	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc66	08					.byte NN	;wh_Flags	dictionary flags
=48098					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc67					Blank:
.bc67	20 55 b6	jsr $b655			jsr Bl
.bc6a	4c 76 bc	jmp $bc76			jmp Fill
=6					CL	.var *-(WordListLink+wh_Xt)
=$bc6d					en = *	; remember here
>bc65	06					.byte CL	;wh_CodeLength
>bc6d	46 69 6c 6c			L1:	.text "Fill"	;  name of word as a string, ending at wh_NameLastChar
>bc71	04					.byte *-L1	;wh_NameLength	length of name
>bc72	e2 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc74	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc75	18					.byte UF+NN	;wh_Flags	dictionary flags
=48113					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc76					Fill:
.bc76	20 ad b2	jsr $b2ad			jsr underflow_3
.bc79	b5 29		lda $29,x			lda DStack+4,x		; tmp1= address
.bc7b	85 15		sta $15				sta tmp1+0
.bc7d	b5 2a		lda $2a,x			lda DStack+5,x
.bc7f	85 16		sta $16				sta tmp1+1
.bc81	b5 27		lda $27,x			lda DStack+2,x		; tmp2= counter.lo
.bc83	85 17		sta $17				sta tmp2+0
.bc85	f6 28		inc $28,x			inc DStack+3,x		; so decrement & test for 0 works
.bc87	a0 00		ldy #$00			ldy #0
.bc89	b5 25		lda $25,x			lda DStack+0,x		; A= fill byte
.bc8b	c4 17		cpy $17		_loop:		cpy tmp2+0		; done?
.bc8d	f0 09		beq $bc98			beq _test2
.bc8f	91 15		sta ($15),y			sta (tmp1),y		; store a byte
.bc91	c8		iny				iny			; to next byte
.bc92	d0 f7		bne $bc8b			bne _loop
.bc94	e6 16		inc $16				inc tmp1+1		; increment addr page
.bc96	d0 f3		bne $bc8b			bne _loop
.bc98	d6 28		dec $28,x	_test2:		dec DStack+3,x		; any more pages?
.bc9a	d0 ef		bne $bc8b			bne _loop
.bc9c	4c f1 ab	jmp $abf1			jmp ThreeDrop	; Drop three cells off the Data Stack.
=41					CL	.var *-(WordListLink+wh_Xt)
=$bc9f					en = *	; remember here
>bc74	29					.byte CL	;wh_CodeLength
>bc9f	56 61 72 69 61 62 6c 65		L1:	.text "Variable"	;  name of word as a string, ending at wh_NameLastChar
>bca7	08					.byte *-L1	;wh_NameLength	length of name
>bca8	f1 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bcaa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bcab	08					.byte NN	;wh_Flags	dictionary flags
=48167					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bcac	20 d2 bf	jsr $bfd2	Variable:	jsr Create		; compile word header & push PFA
.bcaf	a9 00		lda #$00			lda #0			; allot & initialize the variable's data
.bcb1	a8		tay				tay
.bcb2	4c 03 cb	jmp $cb03			jmp Comma_YA
=9					CL	.var *-(WordListLink+wh_Xt)
=$bcb5					en = *	; remember here
>bcaa	09					.byte CL	;wh_CodeLength
>bcb5	32 56 61 72 69 61 62 6c		L1:	.text "2Variable"	;  name of word as a string, ending at wh_NameLastChar
>bcbd	65
>bcbe	09					.byte *-L1	;wh_NameLength	length of name
>bcbf	27 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bcc1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bcc2	08					.byte NN	;wh_Flags	dictionary flags
=48190					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bcc3	20 ac bc	jsr $bcac	Two_variable:	jsr Variable		; compile word header & push PFA
.bcc6	4c 03 cb	jmp $cb03			jmp Comma_YA		; alloc & init 2nd cell of data
=6					CL	.var *-(WordListLink+wh_Xt)
=$bcc9					en = *	; remember here
>bcc1	06					.byte CL	;wh_CodeLength
>bcc9	43 6f 6e 73 74 61 6e 74		L1:	.text "Constant"	;  name of word as a string, ending at wh_NameLastChar
>bcd1	08					.byte *-L1	;wh_NameLength	length of name
>bcd2	3e bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bcd4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bcd5	18					.byte UF+NN	;wh_Flags	dictionary flags
=48209					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bcd6					Constant:
.bcd6	20 93 b2	jsr $b293			jsr underflow_1
.bcd9	20 4b bf	jsr $bf4b			jsr Header_Comma	; compile word header
.bcdc	20 a1 b5	jsr $b5a1			jsr LitCompile		; compile code to load registers, & pick a subroutine
.bcdf	20 3f cb	jsr $cb3f			jsr Jmp_Comma_YA	; compile code to JMP to the subroutine
.bce2	4c 36 ba	jmp $ba36			jmp adjust_z		; fix word length
=15					CL	.var *-(WordListLink+wh_Xt)
=$bce5					en = *	; remember here
>bcd4	0f					.byte CL	;wh_CodeLength
>bce5	32 43 6f 6e 73 74 61 6e		L1:	.text "2Constant"	;  name of word as a string, ending at wh_NameLastChar
>bced	74
>bcee	09					.byte *-L1	;wh_NameLength	length of name
>bcef	51 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bcf1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bcf2	18					.byte UF+NN	;wh_Flags	dictionary flags
=48238					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bcf3					Two_constant:
.bcf3	20 a8 b2	jsr $b2a8			jsr underflow_2
.bcf6	20 4b bf	jsr $bf4b			jsr Header_Comma	; compile word header
.bcf9	20 68 cd	jsr $cd68			jsr Swap
.bcfc	20 98 b5	jsr $b598			jsr Literal		; compile push lo cell
.bcff	20 a1 b5	jsr $b5a1			jsr LitCompile		; compile push hi cell, YA=exit routine
.bd02	20 3f cb	jsr $cb3f			jsr Jmp_Comma_YA	; compile JMP from above
.bd05	4c 36 ba	jmp $ba36			jmp adjust_z		; fix word length
=21					CL	.var *-(WordListLink+wh_Xt)
=$bd08					en = *	; remember here
>bcf1	15					.byte CL	;wh_CodeLength
>bd08	56 61 6c 75 65			L1:	.text "Value"	;  name of word as a string, ending at wh_NameLastChar
>bd0d	05					.byte *-L1	;wh_NameLength	length of name
>bd0e	6e bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd10	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd11	18					.byte UF+NN	;wh_Flags	dictionary flags
=48269					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd12					Value:
.bd12	20 93 b2	jsr $b293			jsr underflow_1
.bd15	20 4b bf	jsr $bf4b			jsr Header_Comma	; compile word header
.bd18	20 cb b5	jsr $b5cb			jsr ldya_immed_comma	; compile lda # & ldy #
.bd1b	a9 e5		lda #$e5			lda #<PushYA		; compile jmp PushYA
.bd1d	a0 b5		ldy #$b5			ldy #>PushYA
.bd1f	20 3f cb	jsr $cb3f			jsr Jmp_Comma_YA
.bd22	4c 36 ba	jmp $ba36			jmp adjust_z		; fix word length
=19					CL	.var *-(WordListLink+wh_Xt)
=$bd25					en = *	; remember here
>bd10	13					.byte CL	;wh_CodeLength
>bd25	32 56 61 6c 75 65		L1:	.text "2Value"	;  name of word as a string, ending at wh_NameLastChar
>bd2b	06					.byte *-L1	;wh_NameLength	length of name
>bd2c	8d bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd2e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd2f	18					.byte UF+NN	;wh_Flags	dictionary flags
=48299					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd30					TwoValue:
.bd30	20 a8 b2	jsr $b2a8			jsr underflow_2
.bd33	20 4b bf	jsr $bf4b			jsr Header_Comma	; compile word header
.bd36	a9 43		lda #$43			lda #<TwoValue_Runtime	; compile JSR TValue_Runtime
.bd38	a0 bd		ldy #$bd			ldy #>TwoValue_Runtime
.bd3a	20 28 cb	jsr $cb28			jsr Jsr_Comma_YA
.bd3d	20 36 ba	jsr $ba36			jsr adjust_z		; fix word length
.bd40	4c 11 cb	jmp $cb11			jmp Two_Comma		; compile the value, return
=19					CL	.var *-(WordListLink+wh_Xt)
=$bd43					en = *	; remember here
>bd2e	13					.byte CL	;wh_CodeLength
.bd43					TwoValue_Runtime:
.bd43	68		pla				pla			; pop RTS addr, +1,
.bd44	18		clc				clc
.bd45	69 01		adc #$01			adc #1
.bd47	85 15		sta $15				sta tmp1+0
.bd49	68		pla				pla
.bd4a	69 00		adc #$00			adc #0
.bd4c	85 16		sta $16				sta tmp1+1
.bd4e	4c 93 c3	jmp $c393			jmp Two_Fetch_tmp1	; fetch the data, return
>bd51	54 6f				L1:	.text "To"	;  name of word as a string, ending at wh_NameLastChar
>bd53	02					.byte *-L1	;wh_NameLength	length of name
>bd54	ab bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd56	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd57	0c					.byte NN+IM	;wh_Flags	dictionary flags
=48339					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd58					To:
.bd58	20 99 ba	jsr $ba99			jsr Tick		; We always need the xt of the target word
.bd5b	b5 25		lda $25,x			lda DStack+0,x		; tmp1= xt
.bd5d	b4 26		ldy $26,x			ldy DStack+1,x
.bd5f	85 15		sta $15				sta tmp1+0
.bd61	84 16		sty $16				sty tmp1+1
.bd63	a0 00		ldy #$00			ldy #0			; determine what type xt points at
.bd65	b1 15		lda ($15),y			lda (tmp1),y
.bd67	c9 a0		cmp #$a0			cmp #$a0		;   LDY #
.bd69	d0 38		bne $bda3			bne _Test2
.bd6b	a5 0a		lda $0a				lda state		; check compile state
.bd6d	f0 20		beq $bd8f			beq _Value_interpret
.bd6f	a9 55		lda #$55			lda #<PopYA		; compile jsr PopYA
.bd71	a0 b2		ldy #$b2			ldy #>PopYA
.bd73	20 28 cb	jsr $cb28			jsr Jsr_Comma_YA
.bd76	a9 8c		lda #$8c			lda #$8C		; compile STY xt+1
.bd78	20 e9 ca	jsr $cae9			jsr C_Comma_A
.bd7b	20 4c c8	jsr $c84c			jsr One_plus
.bd7e	20 4a cd	jsr $cd4a			jsr Dup
.bd81	20 00 cb	jsr $cb00			jsr Comma
.bd84	a9 8d		lda #$8d			lda #$8D		; compile STA xt+3
.bd86	20 e9 ca	jsr $cae9			jsr C_Comma_A
.bd89	20 f6 c7	jsr $c7f6			jsr Cell_Plus
.bd8c	4c 00 cb	jmp $cb00			jmp Comma
.bd8f					_Value_interpret:
.bd8f	20 a8 b2	jsr $b2a8			jsr underflow_2		; ( n xt )
.bd92	e8		inx				inx			; Drop xt
.bd93	e8		inx				inx
.bd94	b5 25		lda $25,x			lda DStack+0,x		; LSB
.bd96	a0 03		ldy #$03			ldy #3			;   modify LDA # data
.bd98	91 15		sta ($15),y			sta (tmp1),y
.bd9a	b5 26		lda $26,x			lda DStack+1,x		; MSB
.bd9c	a0 01		ldy #$01			ldy #1			;   modify LDY # data
.bd9e	91 15		sta ($15),y			sta (tmp1),y
.bda0	e8		inx				inx			; Drop n
.bda1	e8		inx				inx
.bda2	60		rts				rts
.bda3	c9 20		cmp #$20	_Test2:		cmp #$20		;   JSR abs ?
.bda5	d0 33		bne $bdda			bne _Err
.bda7	a9 03		lda #$03			lda #3			; advance xt over the JSR abs to the data
.bda9	20 fb c7	jsr $c7fb			jsr Plus_A
.bdac	a0 01		ldy #$01			ldy #1			; get JSR abs addr lo byte
.bdae	b1 15		lda ($15),y			lda (tmp1),y
.bdb0	c9 43		cmp #$43			cmp #<TwoValue_Runtime
.bdb2	d0 11		bne $bdc5			bne _Test3
.bdb4	a5 0a		lda $0a				lda state		; check compile state
.bdb6	f0 0a		beq $bdc2			beq _2Value_runtime
.bdb8	20 cb b5	jsr $b5cb			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bdbb	a9 67		lda #$67			lda #<Two_Store_YA
.bdbd	a0 c3		ldy #$c3			ldy #>Two_Store_YA
.bdbf	4c 28 cb	jmp $cb28			jmp Jsr_Comma_YA	; compile JSR TwoValue_runtime; return
.bdc2	4c 61 c3	jmp $c361	_2Value_runtime: jmp Two_Store
.bdc5					_Test3:
.bdc5	c9 67		cmp #$67			cmp #<FValue_runtime
.bdc7	d0 11		bne $bdda			bne _Err
.bdc9	a5 0a		lda $0a				lda state		; check compile state
.bdcb	f0 0a		beq $bdd7			beq _FValue_interpret
.bdcd	20 cb b5	jsr $b5cb			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bdd0	a9 35		lda #$35			lda #<FStore_YA
.bdd2	a0 85		ldy #$85			ldy #>FStore_YA
.bdd4	4c 28 cb	jmp $cb28			jmp Jsr_Comma_YA	; compile JSR FValue_runtime; return
.bdd7	4c 32 85	jmp $8532	_FValue_interpret: jmp FStore
.bdda	a9 e0		lda #$e0	_Err:		lda #$100+err_InvalidName ; unrecognized type.
.bddc	20 c4 b2	jsr $b2c4			jsr ThrowA
=135					CL	.var *-(WordListLink+wh_Xt)
=$bddf					en = *	; remember here
>bd56	87					.byte CL	;wh_CodeLength
>bddf	44 4d 61 78			L1:	.text "DMax"	;  name of word as a string, ending at wh_NameLastChar
>bde3	04					.byte *-L1	;wh_NameLength	length of name
>bde4	d3 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bde6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bde7	08					.byte NN	;wh_Flags	dictionary flags
=48483					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bde8	a9 80		lda #$80	DMax:		lda #$80
.bdea	d0 0b		bne $bdf7			bne DMin3
=4					CL	.var *-(WordListLink+wh_Xt)
=$bdec					en = *	; remember here
>bde6	04					.byte CL	;wh_CodeLength
>bdec	44 4d 69 6e			L1:	.text "DMin"	;  name of word as a string, ending at wh_NameLastChar
>bdf0	04					.byte *-L1	;wh_NameLength	length of name
>bdf1	63 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bdf3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bdf4	08					.byte NN	;wh_Flags	dictionary flags
=48496					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bdf5	a9 00		lda #$00	DMin:		lda #0
.bdf7	85 17		sta $17		DMin3:		sta tmp2	; save sign correction
.bdf9	20 b2 b2	jsr $b2b2			jsr underflow_4
.bdfc	b5 27		lda $27,x			lda DStack+2,x	; compare
.bdfe	d5 2b		cmp $2b,x			cmp DStack+6,x
.be00	b5 28		lda $28,x			lda DStack+3,x
.be02	f5 2c		sbc $2c,x			sbc DStack+7,x
.be04	b5 25		lda $25,x			lda DStack+0,x
.be06	f5 29		sbc $29,x			sbc DStack+4,x
.be08	b5 26		lda $26,x			lda DStack+1,x
.be0a	f5 2a		sbc $2a,x			sbc DStack+5,x
.be0c	50 02		bvc $be10			bvc +
.be0e	49 80		eor #$80			eor #$80	; fix sign
.be10	45 17		eor $17		+		eor tmp2
.be12	30 0f		bmi $be23			bmi TwoNip_nouf	; if negative, NOS is larger and needs to be kept
.be14	4c 17 c3	jmp $c317			jmp Two_Drop
=34					CL	.var *-(WordListLink+wh_Xt)
=$be17					en = *	; remember here
>bdf3	22					.byte CL	;wh_CodeLength
>be17	32 4e 69 70			L1:	.text "2Nip"	;  name of word as a string, ending at wh_NameLastChar
>be1b	04					.byte *-L1	;wh_NameLength	length of name
>be1c	70 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be1e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be1f	18					.byte UF+NN	;wh_Flags	dictionary flags
=48539					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be20	20 b2 b2	jsr $b2b2	TwoNip:		jsr underflow_4
.be23	b5 25		lda $25,x	TwoNip_NoUf:	lda DStack+0,x	; copy dTOS to dNOS
.be25	95 29		sta $29,x			sta DStack+4,x
.be27	b5 26		lda $26,x			lda DStack+1,x
.be29	95 2a		sta $2a,x			sta DStack+5,x
.be2b	b5 27		lda $27,x			lda DStack+2,x
.be2d	95 2b		sta $2b,x			sta DStack+6,x
.be2f	b5 28		lda $28,x			lda DStack+3,x
.be31	95 2c		sta $2c,x			sta DStack+7,x
.be33	4c 17 c3	jmp $c317			jmp Two_Drop
=22					CL	.var *-(WordListLink+wh_Xt)
=$be36					en = *	; remember here
>be1e	16					.byte CL	;wh_CodeLength
>be36	53 3e 44			L1:	.text "S>D"	;  name of word as a string, ending at wh_NameLastChar
>be39	03					.byte *-L1	;wh_NameLength	length of name
>be3a	9b bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be3c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be3d	10					.byte UF	;wh_Flags	dictionary flags
=48569					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be3e					S_To_D:
.be3e	20 93 b2	jsr $b293			jsr underflow_1
.be41	a0 00		ldy #$00			ldy #0			; assume positive
.be43	b5 26		lda $26,x			lda DStack+1,x		; test n
.be45	10 01		bpl $be48			bpl +
.be47	88		dey				dey			; make negative
.be48					+
.be48	ca		dex				dex			; push new hi cell
.be49	ca		dex				dex
.be4a	94 25		sty $25,x			sty DStack+0,x
.be4c	94 26		sty $26,x			sty DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$be4e					en = *	; remember here
>be3c	10					.byte CL	;wh_CodeLength
.be4e	60		rts				rts
>be4f	44 3e 53			L1:	.text "D>S"	;  name of word as a string, ending at wh_NameLastChar
>be52	03					.byte *-L1	;wh_NameLength	length of name
>be53	b9 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be55	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be56	10					.byte UF	;wh_Flags	dictionary flags
=48594					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be57					D_To_S:
.be57	20 a8 b2	jsr $b2a8			jsr underflow_2
.be5a	e8		inx				inx		; Drop hi cell
.be5b	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$be5c					en = *	; remember here
>be55	05					.byte CL	;wh_CodeLength
.be5c	60		rts				rts
>be5d	44 2d				L1:	.text "D-"	;  name of word as a string, ending at wh_NameLastChar
>be5f	02					.byte *-L1	;wh_NameLength	length of name
>be60	d2 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be62	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be63	10					.byte UF	;wh_Flags	dictionary flags
=48607					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be64					D_Minus:
.be64	20 b2 b2	jsr $b2b2			jsr underflow_4 ; two double numbers
.be67	38		sec				sec
.be68	b5 2b		lda $2b,x			lda DStack+6,x	; LSB of lower word
.be6a	f5 27		sbc $27,x			sbc DStack+2,x
.be6c	95 2b		sta $2b,x			sta DStack+6,x
.be6e	b5 2c		lda $2c,x			lda DStack+7,x	; MSB of lower word
.be70	f5 28		sbc $28,x			sbc DStack+3,x
.be72	95 2c		sta $2c,x			sta DStack+7,x
.be74	b5 29		lda $29,x			lda DStack+4,x	; LSB of upper word
.be76	f5 25		sbc $25,x			sbc DStack+0,x
.be78	95 29		sta $29,x			sta DStack+4,x
.be7a	b5 2a		lda $2a,x			lda DStack+5,x	; MSB of upper word
.be7c	f5 26		sbc $26,x			sbc DStack+1,x
.be7e	95 2a		sta $2a,x			sta DStack+5,x
.be80	e8		inx				inx
.be81	e8		inx				inx
.be82	e8		inx				inx
.be83	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$be84					en = *	; remember here
>be62	20					.byte CL	;wh_CodeLength
.be84	60		rts				rts
>be85	44 2b				L1:	.text "D+"	;  name of word as a string, ending at wh_NameLastChar
>be87	02					.byte *-L1	;wh_NameLength	length of name
>be88	df bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be8a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be8b	10					.byte UF	;wh_Flags	dictionary flags
=48647					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be8c					D_Plus:
.be8c	20 b2 b2	jsr $b2b2			jsr underflow_4 ; two double numbers
.be8f	18		clc				clc
.be90	b5 27		lda $27,x			lda DStack+2,x	; LSB of lower word
.be92	75 2b		adc $2b,x			adc DStack+6,x
.be94	95 2b		sta $2b,x			sta DStack+6,x
.be96	b5 28		lda $28,x			lda DStack+3,x	; MSB of lower word
.be98	75 2c		adc $2c,x			adc DStack+7,x
.be9a	95 2c		sta $2c,x			sta DStack+7,x
.be9c	b5 25		lda $25,x			lda DStack+0,x	; LSB of upper word
.be9e	75 29		adc $29,x			adc DStack+4,x
.bea0	95 29		sta $29,x			sta DStack+4,x
.bea2	b5 26		lda $26,x			lda DStack+1,x	; MSB of upper word
.bea4	75 2a		adc $2a,x			adc DStack+5,x
.bea6	95 2a		sta $2a,x			sta DStack+5,x
.bea8	e8		inx				inx
.bea9	e8		inx				inx
.beaa	e8		inx				inx
.beab	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$beac					en = *	; remember here
>be8a	20					.byte CL	;wh_CodeLength
.beac	60		rts				rts
>bead	44 31 2b			L1:	.text "D1+"	;  name of word as a string, ending at wh_NameLastChar
>beb0	03					.byte *-L1	;wh_NameLength	length of name
>beb1	07 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>beb3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>beb4	10					.byte UF	;wh_Flags	dictionary flags
=48688					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.beb5	20 a8 b2	jsr $b2a8	D1Plus:		jsr underflow_2
.beb8	f6 27		inc $27,x			inc DStack+2,x
.beba	d0 0a		bne $bec6			bne +
.bebc	f6 28		inc $28,x			inc DStack+3,x
.bebe	d0 06		bne $bec6			bne +
.bec0	f6 25		inc $25,x			inc DStack+0,x
.bec2	d0 02		bne $bec6			bne +
.bec4	f6 26		inc $26,x			inc DStack+1,x
.bec6					+
=17					CL	.var *-(WordListLink+wh_Xt)
=$bec6					en = *	; remember here
>beb3	11					.byte CL	;wh_CodeLength
.bec6	60		rts				rts
>bec7	44 31 2d			L1:	.text "D1-"	;  name of word as a string, ending at wh_NameLastChar
>beca	03					.byte *-L1	;wh_NameLength	length of name
>becb	30 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>becd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bece	10					.byte UF	;wh_Flags	dictionary flags
=48714					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.becf	20 a8 b2	jsr $b2a8	D1Minus:	jsr underflow_2
.bed2	b5 27		lda $27,x			lda DStack+2,x
.bed4	d0 0e		bne $bee4			bne _1
.bed6	b5 28		lda $28,x			lda DStack+3,x
.bed8	d0 08		bne $bee2			bne _2
.beda	b5 25		lda $25,x			lda DStack+0,x
.bedc	d0 02		bne $bee0			bne _3
.bede	d6 26		dec $26,x			dec DStack+1,x
.bee0	d6 25		dec $25,x	_3:		dec DStack+0,x
.bee2	d6 28		dec $28,x	_2:		dec DStack+3,x
.bee4	d6 27		dec $27,x	_1:		dec DStack+2,x
=23					CL	.var *-(WordListLink+wh_Xt)
=$bee6					en = *	; remember here
>becd	17					.byte CL	;wh_CodeLength
.bee6	60		rts				rts
>bee7	41 6c 6c 6f 74			L1:	.text "Allot"	;  name of word as a string, ending at wh_NameLastChar
>beec	05					.byte *-L1	;wh_NameLength	length of name
>beed	4a be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>beef	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bef0	18					.byte UF+NN	;wh_Flags	dictionary flags
=48748					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bef1					Allot:
.bef1	20 93 b2	jsr $b293			jsr underflow_1
.bef4	18		clc				clc			; adjust cp
.bef5	b5 25		lda $25,x			lda DStack+0,x
.bef7	65 00		adc $00				adc cp+0
.bef9	85 00		sta $00				sta cp+0
.befb	a8		tay				tay			;   save lo byte
.befc	b5 26		lda $26,x			lda DStack+1,x
.befe	85 15		sta $15				sta tmp1
.bf00	65 01		adc $01				adc cp+1
.bf02	85 01		sta $01				sta cp+1
.bf04	24 15		bit $15				bit tmp1
.bf06	30 15		bmi $bf1d			bmi _release
.bf08	b0 06		bcs $bf10			bcs _pos_err		; carry from the add is bad
=32600					_last = cp_end-2*padoffset
.bf0a	c0 58		cpy #$58			cpy #<_last		; cp < cp_end ?
.bf0c	e9 7f		sbc #$7f			sbc #>_last
.bf0e	90 2c		bcc $bf3c			bcc _done		; we're fine.
.bf10					_pos_err:
.bf10	a9 58		lda #$58			lda #<_last
.bf12	85 00		sta $00				sta cp+0
.bf14	a9 7f		lda #$7f			lda #>_last
.bf16	85 01		sta $01				sta cp+1
.bf18	a9 c5		lda #$c5			lda #$100+err_Allocate
.bf1a	4c c4 b2	jmp $b2c4			jmp ThrowA
.bf1d					_release:
.bf1d	90 06		bcc $bf25			bcc _neg_err		; borrow indicates we've gone below 0
.bf1f	c0 65		cpy #$65			cpy #<cp0
.bf21	e9 0b		sbc #$0b			sbc #>cp0
.bf23	b0 17		bcs $bf3c			bcs _done
.bf25					_neg_err:
.bf25	a9 65		lda #$65			lda #<cp0		; Set CP to CP0
.bf27	85 00		sta $00				sta cp+0
.bf29	a9 0b		lda #$0b			lda #>cp0
.bf2b	85 01		sta $01				sta cp+1
.bf2d	a9 00		lda #$00			lda #<forth_dictionary_start	; set WordLists[Forth] to the first
.bf2f	8d 12 03	sta $0312			sta WordlistsV+0		; word in ROM
.bf32	a9 cd		lda #$cd			lda #>forth_dictionary_start
.bf34	8d 13 03	sta $0313			sta WordlistsV+1
.bf37	a9 c4		lda #$c4			lda #$100+err_Free		; abort with an error
.bf39	4c c4 b2	jmp $b2c4			jmp ThrowA
.bf3c					_done:
.bf3c	e8		inx				inx			; Drop n
.bf3d	e8		inx				inx
=77					CL	.var *-(WordListLink+wh_Xt)
=$bf3e					en = *	; remember here
>beef	4d					.byte CL	;wh_CodeLength
.bf3e	60		rts				rts
>bf3f	48 65 61 64 65 72 2c		L1:	.text "Header,"	;  name of word as a string, ending at wh_NameLastChar
>bf46	07					.byte *-L1	;wh_NameLength	length of name
>bf47	6c be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf49	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf4a	08					.byte NN	;wh_Flags	dictionary flags
=48838					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf4b					Header_Comma:
.bf4b	20 59 bf	jsr $bf59			jsr Header_Build
.bf4e					Header_Link:
.bf4e	a5 0f		lda $0f				lda WorkWord+0		; dp= WorkWord
.bf50	85 11		sta $11				sta dp+0
.bf52	a5 10		lda $10				lda WorkWord+1
.bf54	85 12		sta $12				sta dp+1
.bf56	4c b2 b8	jmp $b8b2			jmp dp_to_current	; Update the CURRENT wordlist with the new DP.
.bf59					Header_Build:
.bf59	20 03 b9	jsr $b903			jsr parse_name_check	; get name string
.bf5c	20 a4 ca	jsr $caa4			jsr Two_dup		; ( addr u addr u )
.bf5f	20 0f bb	jsr $bb0f			jsr find_name		; ( addr u nt )
.bf62	b5 26		lda $26,x			lda DStack+1,x		; not found?
.bf64	e8		inx				inx			; Drop flag from find-name.
.bf65	e8		inx				inx
.bf66	a8		tay				tay
.bf67	f0 1f		beq $bf88			beq _new_name		; We haven't seen this one before.
.bf69	24 0c		bit $0c				bit status		; Check bit 7
.bf6b	10 08		bpl $bf75			bpl _redefined_name	; Bit 7 is zero, so print the message.
.bf6d	a9 80		lda #$80			lda #$80		; Set bit 7 to indicate dup
.bf6f	05 0c		ora $0c				ora status
.bf71	85 0c		sta $0c				sta status
.bf73	d0 19		bne $bf8e			bne _process_name
.bf75					_redefined_name:
.bf75	a9 0a		lda #$0a			lda #<str_redefined
.bf77	a0 d9		ldy #$d9			ldy #>str_redefined
.bf79	20 f3 cb	jsr $cbf3			jsr Print_ASCIIZ_YA_no_lf
.bf7c	20 a4 ca	jsr $caa4			jsr Two_dup		 ; ( addr u addr u )
.bf7f	20 d2 cb	jsr $cbd2			jsr Type
.bf82	20 c5 cb	jsr $cbc5			jsr Space
.bf85	4c 8e bf	jmp $bf8e			jmp _process_name
.bf88					_new_name:
.bf88	a9 7f		lda #$7f			lda #$7F		; Clear bit 0 of status to indicate new word.
.bf8a	25 0c		and $0c				and status
.bf8c	85 0c		sta $0c				sta status
.bf8e					_process_name:
.bf8e	20 a4 ca	jsr $caa4			jsr Two_dup		; compile name string ending at wh_NameLastChar
.bf91	20 18 c8	jsr $c818			jsr Here
.bf94	20 68 cd	jsr $cd68			jsr Swap
.bf97	20 49 ac	jsr $ac49			jsr CMove
.bf9a	20 4a cd	jsr $cd4a			jsr Dup
.bf9d	20 f1 be	jsr $bef1			jsr Allot
.bfa0	20 e6 ca	jsr $cae6			jsr C_Comma		; compile wh_NameLength
.bfa3	e8		inx				inx			; drop name string addr
.bfa4	e8		inx				inx
.bfa5	20 a2 b8	jsr $b8a2			jsr current_to_dp	; Get the CURRENT dictionary pointer.
.bfa8	a5 11		lda $11				lda dp+0		; compile wh_WordListLink
.bfaa	a4 12		ldy $12				ldy dp+1
.bfac	20 03 cb	jsr $cb03			jsr Comma_YA
.bfaf	a9 03		lda #$03			lda #3			; compile wh_CodeLength (temporary value, see adjust_z)
.bfb1	20 e9 ca	jsr $cae9			jsr C_Comma_A
.bfb4	a9 08		lda #$08			lda #NN			; compile wh_Flags
.bfb6	20 e9 ca	jsr $cae9			jsr C_Comma_A
.bfb9	38		sec				sec			; WorkWord= nt
.bfba	a5 00		lda $00				lda cp+0
.bfbc	e9 85		sbc #$85			sbc #wh_xt
.bfbe	85 0f		sta $0f				sta WorkWord+0
.bfc0	a5 01		lda $01				lda cp+1
.bfc2	e9 00		sbc #$00			sbc #0
.bfc4	85 10		sta $10				sta WorkWord+1
.bfc6	60		rts				rts
=124					CL	.var *-(WordListLink+wh_Xt)
=$bfc7					en = *	; remember here
>bf49	7c					.byte CL	;wh_CodeLength
>bfc7	43 72 65 61 74 65		L1:	.text "Create"	;  name of word as a string, ending at wh_NameLastChar
>bfcd	06					.byte *-L1	;wh_NameLength	length of name
>bfce	c6 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfd0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfd1	08					.byte NN	;wh_Flags	dictionary flags
=48973					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfd2					Create:
.bfd2	20 4b bf	jsr $bf4b			jsr Header_Comma	; compile word header
.bfd5	a9 df		lda #$df			lda #<DoVar
.bfd7	a0 bf		ldy #$bf			ldy #>DoVar
.bfd9	20 28 cb	jsr $cb28			jsr Jsr_Comma_YA
.bfdc	4c 36 ba	jmp $ba36			jmp adjust_z
=13					CL	.var *-(WordListLink+wh_Xt)
=$bfdf					en = *	; remember here
>bfd0	0d					.byte CL	;wh_CodeLength
.bfdf					DoVar:
.bfdf	68		pla				pla		; Pull the return address off the machine's stack
.bfe0	18		clc				clc		;   +1 because of the way the JSR works
.bfe1	69 01		adc #$01			adc #1
.bfe3	ca		dex				dex		; push on data stack
.bfe4	ca		dex				dex
.bfe5	95 25		sta $25,x			sta DStack+0,x
.bfe7	68		pla				pla
.bfe8	69 00		adc #$00			adc #0
.bfea	95 26		sta $26,x			sta DStack+1,x
.bfec	60		rts				rts		; takes us to the original caller of the
>bfed	44 6f 65 73 3e			L1:	.text "Does>"	;  name of word as a string, ending at wh_NameLastChar
>bff2	05					.byte *-L1	;wh_NameLength	length of name
>bff3	4d bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bff5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bff6	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=49010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bff7					Does:
.bff7	a0 c0		ldy #$c0			ldy #>_runtime
.bff9	a9 11		lda #$11			lda #<_runtime
.bffb	20 28 cb	jsr $cb28			jsr Jsr_Comma_YA
.bffe	a9 68		lda #$68			lda #$68		; compile PLA  to pop RTS addr (PFA-1) to AY
.c000	a0 a8		ldy #$a8			ldy #$a8		;    & TAY
.c002	20 03 cb	jsr $cb03			jsr Comma_YA
.c005	a9 68		lda #$68			lda #$68		; compile PLA
.c007	20 e9 ca	jsr $cae9			jsr C_Comma_A
.c00a	a0 c0		ldy #$c0			ldy #>_dodoes
.c00c	a9 23		lda #$23			lda #<_dodoes
.c00e	4c 28 cb	jmp $cb28			jmp Jsr_Comma_YA
=26					CL	.var *-(WordListLink+wh_Xt)
=$c011					en = *	; remember here
>bff5	1a					.byte CL	;wh_CodeLength
.c011					_runtime:
.c011	20 a2 b8	jsr $b8a2			jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.c014	18		clc				clc
.c015	68		pla				pla		; RTS addr LSB
.c016	69 01		adc #$01			adc #1		;   +1 for JSR bahavior
.c018	a0 86		ldy #$86			ldy #Wh_xt+1
.c01a	91 11		sta ($11),y			sta (dp),y
.c01c	68		pla				pla		; RTS addr MSB
.c01d	69 00		adc #$00			adc #0
.c01f	c8		iny				iny
.c020	91 11		sta ($11),y			sta (dp),y
.c022	60		rts				rts
.c023					_dodoes:
.c023	c8		iny				iny		; +1 for JSR behavior
.c024	d0 03		bne $c029			bne +
.c026	18		clc				clc
.c027	69 01		adc #$01			adc #1
.c029					+
.c029	4c 58 cd	jmp $cd58			jmp PushAY
>c02c	55 6e 75 73 65 64		L1:	.text "Unused"	;  name of word as a string, ending at wh_NameLastChar
>c032	06					.byte *-L1	;wh_NameLength	length of name
>c033	72 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c035	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c036	00					.byte 0	;wh_Flags	dictionary flags
=49074					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c037					Unused:
=32600					_last = cp_end-2*padoffset
.c037	ca		dex				dex
.c038	ca		dex				dex
.c039	38		sec				sec
.c03a	a9 58		lda #$58			lda #<_last
.c03c	e5 00		sbc $00				sbc cp+0
.c03e	95 25		sta $25,x			sta DStack+0,x
.c040	a9 7f		lda #$7f			lda #>_last
.c042	e5 01		sbc $01				sbc cp+1
.c044	95 26		sta $26,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$c046					en = *	; remember here
>c035	0f					.byte CL	;wh_CodeLength
.c046	60		rts				rts
>c047	44 65 70 74 68			L1:	.text "Depth"	;  name of word as a string, ending at wh_NameLastChar
>c04c	05					.byte *-L1	;wh_NameLength	length of name
>c04d	b2 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c04f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c050	08					.byte NN	;wh_Flags	dictionary flags
=49100					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c051					Depth:
.c051	a9 28		lda #$28			lda #DStack0	; A= DStack0 - X
.c053	86 1b		stx $1b				stx tmp4
.c055	38		sec				sec
.c056	e5 1b		sbc $1b				sbc tmp4
.c058	4a		lsr a				lsr		; divide by two because each cell is two bytes
.c059	4c 27 b6	jmp $b627			jmp PushZA
=11					CL	.var *-(WordListLink+wh_Xt)
=$c05c					en = *	; remember here
>c04f	0b					.byte CL	;wh_CodeLength
>c05c	4b 65 79			L1:	.text "Key"	;  name of word as a string, ending at wh_NameLastChar
>c05f	03					.byte *-L1	;wh_NameLength	length of name
>c060	cc bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c062	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c063	08					.byte NN	;wh_Flags	dictionary flags
=49119					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c064	20 6a c0	jsr $c06a	Key:		jsr key_a		; returns char in A
.c067	4c 27 b6	jmp $b627			jmp PushZA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c06a					en = *	; remember here
>c062	06					.byte CL	;wh_CodeLength
.c06a					Key_A:
.c06a	6c 08 03	jmp ($0308)			jmp (input)		; JSR/RTS
>c06d	4b 65 79 3f			L1:	.text "Key?"	;  name of word as a string, ending at wh_NameLastChar
>c071	04					.byte *-L1	;wh_NameLength	length of name
>c072	df bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c074	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c075	08					.byte NN	;wh_Flags	dictionary flags
=49137					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c076	20 7c c0	jsr $c07c	KeyQ:		jsr KeyQ_A
.c079	4c 27 b6	jmp $b627			jmp PushZA
.c07c	6c 0a 03	jmp ($030a)	KeyQ_A:		jmp (HaveKey)
>c07f	52 65 66 69 6c 6c		L1:	.text "Refill"	;  name of word as a string, ending at wh_NameLastChar
>c085	06					.byte *-L1	;wh_NameLength	length of name
>c086	f1 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c088	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c089	08					.byte NN	;wh_Flags	dictionary flags
=49157					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c08a					Refill:
.c08a	a9 00		lda #$00			lda #0			; show empty in case of error
.c08c	85 06		sta $06				sta ciblen+0
.c08e	85 07		sta $07				sta ciblen+1
.c090	a5 02		lda $02				lda insrc		; cheat: We only check LSB
.c092	d0 24		bne $c0b8			bne _src_not_kbd
.c094	a5 04		lda $04				lda cib+0		; address of CIB is NOS
.c096	a4 05		ldy $05				ldy cib+1
.c098	20 e5 b5	jsr $b5e5			jsr PushYA
.c09b	a9 ff		lda #$ff			lda #bsize		; max number of chars is TOS
.c09d	20 27 b6	jsr $b627			jsr PushZA		;  cheat: We only accept max 255
.c0a0	20 cf c0	jsr $c0cf			jsr Accept		; ( addr n1 -- n2)
.c0a3	b5 25		lda $25,x			lda DStack+0,x
.c0a5	85 06		sta $06				sta ciblen+0
.c0a7	b5 26		lda $26,x			lda DStack+1,x
.c0a9	85 07		sta $07				sta ciblen+1		; though we only accept 255 chars
.c0ab	a9 00		lda #$00			lda #0
.c0ad	85 08		sta $08				sta toin+0
.c0af	85 09		sta $09				sta toin+1
.c0b1	a9 ff		lda #$ff			lda #$FF		; overwrite with TRUE flag
.c0b3	95 25		sta $25,x			sta DStack+0,x
.c0b5	95 26		sta $26,x			sta DStack+1,x
.c0b7	60		rts				rts
.c0b8					_src_not_kbd:
.c0b8	c9 ff		cmp #$ff			cmp #$ff
.c0ba	d0 03		bne $c0bf			bne _src_not_string
.c0bc	4c 18 b6	jmp $b618			jmp False
.c0bf					_src_not_string:
.c0bf	a9 eb		lda #$eb			lda #$100+err_Unsupported
.c0c1	20 c4 b2	jsr $b2c4			jsr ThrowA
=58					CL	.var *-(WordListLink+wh_Xt)
=$c0c4					en = *	; remember here
>c088	3a					.byte CL	;wh_CodeLength
>c0c4	41 63 63 65 70 74		L1:	.text "Accept"	;  name of word as a string, ending at wh_NameLastChar
>c0ca	06					.byte *-L1	;wh_NameLength	length of name
>c0cb	05 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c0cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c0ce	18					.byte UF+NN	;wh_Flags	dictionary flags
=49226					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c0cf					Accept:
.c0cf	20 a8 b2	jsr $b2a8			jsr underflow_2
.c0d2	b5 25		lda $25,x			lda DStack+0,x		; Abort if we were asked to receive 0 chars
.c0d4	15 26		ora $26,x			ora DStack+1,x
.c0d6	d0 09		bne $c0e1			bne _not_zero
.c0d8	e8		inx				inx			; drop n
.c0d9	e8		inx				inx
.c0da	95 25		sta $25,x			sta DStack+0,x		; replace addr with 0
.c0dc	95 26		sta $26,x			sta DStack+1,x
.c0de	4c b6 c1	jmp $c1b6			jmp accept_done
.c0e1					_not_zero:
.c0e1	b5 25		lda $25,x			lda DStack+0,x	; number of chars to get in tmp2 ...
.c0e3	85 17		sta $17				sta tmp2
.c0e5	a9 00		lda #$00			lda #0
.c0e7	85 18		sta $18				sta tmp2+1	; ... but we only accept max 255 chars
.c0e9	b5 27		lda $27,x			lda DStack+2,x	; address of buffer is NOS, to tmp1
.c0eb	85 15		sta $15				sta tmp1
.c0ed	b5 28		lda $28,x			lda DStack+3,x
.c0ef	85 16		sta $16				sta tmp1+1
.c0f1	e8		inx				inx
.c0f2	e8		inx				inx
.c0f3	a0 00		ldy #$00			ldy #0
.c0f5	a5 0c		lda $0c				lda status
.c0f7	29 f7		and #$f7			and #$f7
.c0f9	18		clc				clc
.c0fa	69 01		adc #$01			adc #1
.c0fc	09 08		ora #$08			ora #$08
.c0fe	85 0c		sta $0c				sta status
.c100					accept_loop:
.c100	20 6a c0	jsr $c06a			jsr key_a
.c103	c9 0a		cmp #$0a			cmp #AscLF
.c105	f0 20		beq $c127			beq _eol
.c107	c9 0d		cmp #$0d			cmp #AscCR
.c109	f0 1c		beq $c127			beq _eol
.c10b	c9 08		cmp #$08			cmp #AscBS
.c10d	f0 24		beq $c133			beq _backspace
.c10f	c9 7f		cmp #$7f			cmp #AscDEL	; (CTRL-h)
.c111	f0 20		beq $c133			beq _backspace
.c113	c9 10		cmp #$10			cmp #AscCP
.c115	f0 37		beq $c14e			beq _ctrl_p
.c117	c9 0e		cmp #$0e			cmp #AscCN
.c119	f0 46		beq $c161			beq _ctrl_n
.c11b	91 15		sta ($15),y			sta (tmp1),y
.c11d	c8		iny				iny
.c11e	20 b8 cb	jsr $cbb8			jsr Emit_A
.c121	c4 17		cpy $17				cpy tmp2	; reached character limit?
.c123	d0 db		bne $c100			bne accept_loop	      ; fall through if buffer limit reached
.c125	f0 03		beq $c12a			beq _buffer_full
.c127					_eol:
.c127	20 c5 cb	jsr $cbc5			jsr Space	; print final space
.c12a					_buffer_full:
.c12a	94 25		sty $25,x			sty DStack+0,x	; Y contains number of chars accepted already
.c12c	a9 00		lda #$00			lda #0
.c12e	95 26		sta $26,x			sta DStack+1,x		; we only accept 256 chars
.c130	4c b6 c1	jmp $c1b6			jmp accept_done
.c133					_backspace:
.c133	c0 00		cpy #$00			cpy #0		; buffer empty?
.c135	d0 06		bne $c13d			bne +
.c137	a9 07		lda #$07			lda #AscBELL	; complain and don't delete beyond the start of line
.c139	20 b8 cb	jsr $cbb8			jsr Emit_A
.c13c	c8		iny				iny
.c13d					+
.c13d	88		dey				dey
.c13e	a9 08		lda #$08			lda #AscBS	; move back one
.c140	20 b8 cb	jsr $cbb8			jsr Emit_A
.c143	20 c5 cb	jsr $cbc5			jsr Space	; print a space (rubout)
.c146	a9 08		lda #$08			lda #AscBS	; move back over space
.c148	20 b8 cb	jsr $cbb8			jsr Emit_A
.c14b	4c 00 c1	jmp $c100			jmp accept_loop
.c14e					_ctrl_p:
.c14e	a5 0c		lda $0c				lda status
.c150	29 07		and #$07			and #7
.c152	d0 08		bne $c15c			bne _ctrl_p_dec
.c154	a5 0c		lda $0c				lda status
.c156	09 07		ora #$07			ora #7
.c158	85 0c		sta $0c				sta status
.c15a	d0 14		bne $c170			bne _recall_history
.c15c					_ctrl_p_dec:
.c15c	c6 0c		dec $0c				dec status
.c15e	4c 70 c1	jmp $c170			jmp _recall_history
.c161					_ctrl_n:
.c161	a9 08		lda #$08			lda #$8
.c163	24 0c		bit $0c				bit status
.c165	d0 09		bne $c170			bne _recall_history
.c167	a5 0c		lda $0c				lda status
.c169	29 f7		and #$f7			and #$f7
.c16b	18		clc				clc
.c16c	69 01		adc #$01			adc #1
.c16e	85 0c		sta $0c				sta status
.c170					_recall_history:
.c170	a9 f7		lda #$f7			lda #$ff-%00001000
.c172	25 0c		and $0c				and status
.c174	85 0c		sta $0c				sta status
.c176	20 d1 c1	jsr $c1d1			jsr accept_total_recall
.c179	a9 0d		lda #$0d			lda #AscCR
.c17b	20 b8 cb	jsr $cbb8			jsr Emit_A
.c17e					input_clear:
.c17e	c0 00		cpy #$00			cpy #0
.c180	f0 07		beq $c189			beq input_cleared
.c182	20 c5 cb	jsr $cbc5			jsr Space
.c185	88		dey				dey
.c186	4c 7e c1	jmp $c17e			jmp input_clear
.c189					input_cleared:
.c189	a9 0d		lda #$0d			lda #AscCR
.c18b	20 b8 cb	jsr $cbb8			jsr Emit_A
.c18e	b1 19		lda ($19),y			lda (tmp3),y
.c190	85 0d		sta $0d				sta status+1
.c192	e6 19		inc $19				inc tmp3
.c194	d0 02		bne $c198			bne +		; Increment the upper byte on carry.
.c196	e6 1a		inc $1a				inc tmp3+1
.c198					+
.c198	a9 0d		lda #$0d			lda #AscCR
.c19a	20 b8 cb	jsr $cbb8			jsr Emit_A
.c19d					_history_loop:
.c19d	c4 0d		cpy $0d				cpy status+1
.c19f	d0 03		bne $c1a4			bne +
.c1a1	4c 00 c1	jmp $c100			jmp accept_loop	      ; Needs a long jump
.c1a4					+
.c1a4	c4 17		cpy $17				cpy tmp2
.c1a6	f0 0a		beq $c1b2			beq _hist_filled_buffer
.c1a8	b1 19		lda ($19),y			lda (tmp3),y
.c1aa	91 15		sta ($15),y			sta (tmp1),y
.c1ac	20 b8 cb	jsr $cbb8			jsr Emit_A
.c1af	c8		iny				iny
.c1b0	d0 eb		bne $c19d			bne _history_loop
.c1b2					_hist_filled_buffer:
.c1b2	88		dey				dey
.c1b3	4c 00 c1	jmp $c100			jmp accept_loop
.c1b6					accept_done:
.c1b6	20 d1 c1	jsr $c1d1			jsr accept_total_recall
.c1b9	85 0d		sta $0d				sta status+1
.c1bb	a0 00		ldy #$00			ldy #0
.c1bd	91 19		sta ($19),y			sta (tmp3),y
.c1bf	e6 19		inc $19				inc tmp3
.c1c1	d0 02		bne $c1c5			bne +		; Increment the upper byte on carry.
.c1c3	e6 1a		inc $1a				inc tmp3+1
.c1c5					+
.c1c5					_save_history_loop:
.c1c5	c4 0d		cpy $0d				cpy status+1
.c1c7	f0 07		beq $c1d0			beq _save_history_done
.c1c9	b1 15		lda ($15),y			lda (tmp1),y
.c1cb	91 19		sta ($19),y			sta (tmp3),y
.c1cd	c8		iny				iny
.c1ce	d0 f5		bne $c1c5			bne _save_history_loop
.c1d0					_save_history_done:
=257					CL	.var *-(WordListLink+wh_Xt)
=$ff					CL	 .var $ff
=$c1d0					en = *	; remember here
>c0cd	ff					.byte CL	;wh_CodeLength
.c1d0	60		rts				rts
.c1d1					accept_total_recall:
.c1d1	a9 65		lda #$65			lda #<hist_buff
.c1d3	85 19		sta $19				sta tmp3
.c1d5	a9 07		lda #$07			lda #>hist_buff
.c1d7	85 1a		sta $1a				sta tmp3+1
.c1d9	a5 0c		lda $0c				lda status
.c1db	6a		ror a				ror
.c1dc	29 03		and #$03			and #3
.c1de	18		clc				clc
.c1df	65 1a		adc $1a				adc tmp3+1
.c1e1	85 1a		sta $1a				sta tmp3+1
.c1e3	a5 0c		lda $0c				lda status
.c1e5	6a		ror a				ror		; Rotate through carry into msb.
.c1e6	6a		ror a				ror
.c1e7	29 80		and #$80			and #$80
.c1e9	18		clc				clc
.c1ea	65 19		adc $19				adc tmp3
.c1ec	85 19		sta $19				sta tmp3
.c1ee	90 02		bcc $c1f2			bcc +		; Increment the upper byte on carry.
.c1f0	e6 1a		inc $1a				inc tmp3+1
.c1f2					+
.c1f2	98		tya				tya
.c1f3	c9 80		cmp #$80			cmp #$80
.c1f5	90 02		bcc $c1f9			bcc +
.c1f7	a9 7f		lda #$7f			lda #$7F
.c1f9					+
.c1f9	60		rts				rts
>c1fa	49 6e 70 75 74 3e 52		L1:	.text "Input>R"	;  name of word as a string, ending at wh_NameLastChar
>c201	07					.byte *-L1	;wh_NameLength	length of name
>c202	4a c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c204	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c205	08					.byte NN	;wh_Flags	dictionary flags
=49537					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c206					Input_To_R:
.c206	68		pla				pla			; move it out of the way
.c207	85 15		sta $15				sta tmp1+0
.c209	68		pla				pla
.c20a	85 16		sta $16				sta tmp1+1
.c20c	a0 07		ldy #$07			ldy #7
.c20e	b9 02 00	lda $0002,y	_loop:		lda InSrc,y	; insrc+7 is toin+1
.c211	48		pha				pha
.c212	88		dey				dey
.c213	10 f9		bpl $c20e			bpl _loop
.c215	a5 16		lda $16				lda tmp1+1		; Restore address for return jump
.c217	48		pha				pha
.c218	a5 15		lda $15				lda tmp1+0
.c21a	48		pha				pha
=21					CL	.var *-(WordListLink+wh_Xt)
=$c21b					en = *	; remember here
>c204	15					.byte CL	;wh_CodeLength
.c21b	60		rts				rts
>c21c	52 3e 49 6e 70 75 74		L1:	.text "R>Input"	;  name of word as a string, ending at wh_NameLastChar
>c223	07					.byte *-L1	;wh_NameLength	length of name
>c224	81 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c226	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c227	08					.byte NN	;wh_Flags	dictionary flags
=49571					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c228					R_To_Input:
.c228	68		pla				pla		 ; move it out of the way
.c229	85 15		sta $15				sta tmp1+0
.c22b	68		pla				pla
.c22c	85 16		sta $16				sta tmp1+1
.c22e	a0 00		ldy #$00			ldy #0
.c230	68		pla		_loop:		pla
.c231	99 02 00	sta $0002,y			sta InSrc,y ; also cib ciblen toin
.c234	c8		iny				iny
.c235	c0 08		cpy #$08			cpy #8
.c237	d0 f7		bne $c230			bne _loop
.c239	a5 16		lda $16				lda tmp1+1		; Restore address for return jump
.c23b	48		pha				pha
.c23c	a5 15		lda $15				lda tmp1+0
.c23e	48		pha				pha
=23					CL	.var *-(WordListLink+wh_Xt)
=$c23f					en = *	; remember here
>c226	17					.byte CL	;wh_CodeLength
.c23f	60		rts				rts
>c240	42 6f 75 6e 64 73		L1:	.text "Bounds"	;  name of word as a string, ending at wh_NameLastChar
>c246	06					.byte *-L1	;wh_NameLength	length of name
>c247	a3 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c249	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c24a	10					.byte UF	;wh_Flags	dictionary flags
=49606					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c24b					Bounds:
.c24b	20 a8 b2	jsr $b2a8			jsr underflow_2
.c24e	18		clc				clc
.c24f	b5 25		lda $25,x			lda DStack+0,x		; LSB u
.c251	b4 27		ldy $27,x			ldy DStack+2,x		; LSB addr
.c253	75 27		adc $27,x			adc DStack+2,x
.c255	95 27		sta $27,x			sta DStack+2,x		; LSB addr+u
.c257	94 25		sty $25,x			sty DStack+0,x
.c259	b5 26		lda $26,x			lda DStack+1,x		; MSB u
.c25b	b4 28		ldy $28,x			ldy DStack+3,x		; MSB addr
.c25d	75 28		adc $28,x			adc DStack+3,x
.c25f	95 28		sta $28,x			sta DStack+3,x		; MSB addr+u
.c261	94 26		sty $26,x			sty DStack+1,x
=24					CL	.var *-(WordListLink+wh_Xt)
=$c263					en = *	; remember here
>c249	18					.byte CL	;wh_CodeLength
.c263	60		rts				rts
>c264	53 70 61 63 65 73		L1:	.text "Spaces"	;  name of word as a string, ending at wh_NameLastChar
>c26a	06					.byte *-L1	;wh_NameLength	length of name
>c26b	c6 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c26d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c26e	18					.byte UF+NN	;wh_Flags	dictionary flags
=49642					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c26f					Spaces:
.c26f	20 93 b2	jsr $b293			jsr underflow_1
.c272	4c 78 c2	jmp $c278			jmp _test
.c275					_loop:
.c275	20 c5 cb	jsr $cbc5			jsr Space		; print a space
.c278	d6 25		dec $25,x	_test:		dec DStack+0,x		; decrement & test
.c27a	10 f9		bpl $c275			bpl _loop
.c27c	e8		inx				inx			; Drop
.c27d	e8		inx				inx
=15					CL	.var *-(WordListLink+wh_Xt)
=$c27e					en = *	; remember here
>c26d	0f					.byte CL	;wh_CodeLength
.c27e	60		rts				rts
>c27f	2d 54 72 61 69 6c 69 6e		L1:	.text "-Trailing"	;  name of word as a string, ending at wh_NameLastChar
>c287	67
>c288	09					.byte *-L1	;wh_NameLength	length of name
>c289	ea c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c28b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c28c	18					.byte UF+NN	;wh_Flags	dictionary flags
=49672					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c28d					Minus_trailing:
.c28d	20 a8 b2	jsr $b2a8			jsr underflow_2
.c290	b5 27		lda $27,x			lda DStack+2,x		; tmp1= addr + (u1 & $ff00)
.c292	85 15		sta $15				sta tmp1+0
.c294	b5 28		lda $28,x			lda DStack+3,x
.c296	18		clc				clc
.c297	75 26		adc $26,x			adc DStack+1,x
.c299	85 16		sta $16				sta tmp1+1
.c29b	b4 25		ldy $25,x			ldy DStack+0,x
.c29d	88		dey		_loop:		dey			; back 1 char
.c29e	c0 ff		cpy #$ff			cpy #$ff
.c2a0	d0 06		bne $c2a8			bne +
.c2a2	c6 16		dec $16				dec tmp1+1		;   back 1 page
.c2a4	d6 26		dec $26,x			dec DStack+1,x
.c2a6	30 06		bmi $c2ae			bmi _done
.c2a8					+
.c2a8	b1 15		lda ($15),y			lda (tmp1),y		; if blank, keep going
.c2aa	c9 20		cmp #$20			cmp #AscSP
.c2ac	f0 ef		beq $c29d			beq _loop
.c2ae	c8		iny		_done:		iny			; forward 1 char
.c2af	d0 02		bne $c2b3			bne +
.c2b1	f6 26		inc $26,x			inc DStack+1,x
.c2b3	94 25		sty $25,x	+		sty DStack+0,x
=40					CL	.var *-(WordListLink+wh_Xt)
=$c2b5					en = *	; remember here
>c28b	28					.byte CL	;wh_CodeLength
.c2b5	60		rts				rts
>c2b6	2d 4c 65 61 64 69 6e 67		L1:	.text "-Leading"	;  name of word as a string, ending at wh_NameLastChar
>c2be	08					.byte *-L1	;wh_NameLength	length of name
>c2bf	08 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c2c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c2c2	18					.byte UF+NN	;wh_Flags	dictionary flags
=49726					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c2c3					Minus_leading:
.c2c3	20 a8 b2	jsr $b2a8			jsr underflow_2
.c2c6					_loop:
.c2c6	b5 25		lda $25,x			lda DStack+0,x		; chars left?
.c2c8	15 26		ora $26,x			ora DStack+1,x
.c2ca	f0 10		beq $c2dc			beq _done
.c2cc	a1 27		lda ($27,x)			lda (DStack+2,x)	; get first character
.c2ce	20 6f a7	jsr $a76f			jsr is_whitespace
.c2d1	90 09		bcc $c2dc			bcc _done
.c2d3	20 40 b6	jsr $b640			jsr One			; ( addr u 1 )
.c2d6	20 e9 c2	jsr $c2e9			jsr Slash_String	; ( addr+ u-1 )
.c2d9	4c c6 c2	jmp $c2c6			jmp _loop
.c2dc					_done:
=25					CL	.var *-(WordListLink+wh_Xt)
=$c2dc					en = *	; remember here
>c2c1	19					.byte CL	;wh_CodeLength
.c2dc	60		rts				rts
>c2dd	2f 53 74 72 69 6e 67		L1:	.text "/String"	;  name of word as a string, ending at wh_NameLastChar
>c2e4	07					.byte *-L1	;wh_NameLength	length of name
>c2e5	3e c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c2e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c2e8	18					.byte UF+NN	;wh_Flags	dictionary flags
=49764					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c2e9					Slash_String:
.c2e9	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.c2eb	b0 1d		bcs $c30a		bcs Throw_Underflow_20
.c2ed	18		clc				clc		; addr += n
.c2ee	b5 25		lda $25,x			lda DStack+0,x
.c2f0	75 29		adc $29,x			adc DStack+4,x
.c2f2	95 29		sta $29,x			sta DStack+4,x
.c2f4	b5 26		lda $26,x			lda DStack+1,x
.c2f6	75 2a		adc $2a,x			adc DStack+5,x
.c2f8	95 2a		sta $2a,x			sta DStack+5,x
.c2fa	38		sec				sec		; u -= n
.c2fb	b5 27		lda $27,x			lda DStack+2,x
.c2fd	f5 25		sbc $25,x			sbc DStack+0,x
.c2ff	95 27		sta $27,x			sta DStack+2,x
.c301	b5 28		lda $28,x			lda DStack+3,x
.c303	f5 26		sbc $26,x			sbc DStack+1,x
.c305	95 28		sta $28,x			sta DStack+3,x
.c307	e8		inx				inx		; Drop n
.c308	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c309					en = *	; remember here
>c2e7	20					.byte CL	;wh_CodeLength
.c309	60		rts				rts
.c30a	4c 7f b2	jmp $b27f	Throw_Underflow_20: jmp Throw_Underflow
>c30d	32 44 72 6f 70			L1:	.text "2Drop"	;  name of word as a string, ending at wh_NameLastChar
>c312	05					.byte *-L1	;wh_NameLength	length of name
>c313	64 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c315	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c316	10					.byte UF	;wh_Flags	dictionary flags
=49810					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c317					Two_drop:
.c317	20 a8 b2	jsr $b2a8			jsr underflow_2
.c31a	e8		inx				inx
.c31b	e8		inx				inx
.c31c	e8		inx				inx
.c31d	e8		inx				inx
=7					CL	.var *-(WordListLink+wh_Xt)
=$c31e					en = *	; remember here
>c315	07					.byte CL	;wh_CodeLength
.c31e	60		rts				rts
>c31f	32 53 77 61 70			L1:	.text "2Swap"	;  name of word as a string, ending at wh_NameLastChar
>c324	05					.byte *-L1	;wh_NameLength	length of name
>c325	92 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c327	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c328	18					.byte UF+NN	;wh_Flags	dictionary flags
=49828					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c329					Two_swap:
.c329	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c32b	b0 dd		bcs $c30a		bcs Throw_Underflow_20
.c32d	86 15		stx $15				stx tmp1
.c32f	ca		dex				dex
.c330	ca		dex				dex
.c331	ca		dex				dex
.c332	ca		dex				dex
.c333	e8		inx		_loop:		inx
.c334	b5 28		lda $28,x			lda DStack+3,x	; 3 <-> 7
.c336	b4 2c		ldy $2c,x			ldy DStack+7,x
.c338	95 2c		sta $2c,x			sta DStack+7,x
.c33a	94 28		sty $28,x			sty DStack+3,x
.c33c	e4 15		cpx $15				cpx tmp1
.c33e	90 f3		bcc $c333			bcc _loop
=23					CL	.var *-(WordListLink+wh_Xt)
=$c340					en = *	; remember here
>c327	17					.byte CL	;wh_CodeLength
.c340	60		rts				rts
>c341	32 4f 76 65 72			L1:	.text "2Over"	;  name of word as a string, ending at wh_NameLastChar
>c346	05					.byte *-L1	;wh_NameLength	length of name
>c347	a4 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c349	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c34a	18					.byte UF+NN	;wh_Flags	dictionary flags
=49862					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c34b					Two_over:
.c34b	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c34d	b0 bb		bcs $c30a		bcs Throw_Underflow_20
.c34f	a0 04		ldy #$04			ldy #4
.c351	ca		dex		_loop:		dex
.c352	b5 2d		lda $2d,x			lda DStack+8,x
.c354	95 25		sta $25,x			sta DStack+0,x
.c356	88		dey				dey
.c357	d0 f8		bne $c351			bne _loop
=14					CL	.var *-(WordListLink+wh_Xt)
=$c359					en = *	; remember here
>c349	0e					.byte CL	;wh_CodeLength
.c359	60		rts				rts
>c35a	32 21				L1:	.text "2!"	;  name of word as a string, ending at wh_NameLastChar
>c35c	02					.byte *-L1	;wh_NameLength	length of name
>c35d	c6 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c35f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c360	10					.byte UF	;wh_Flags	dictionary flags
=49884					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c361					Two_Store:
.c361	20 ad b2	jsr $b2ad			jsr underflow_3
.c364	20 55 b2	jsr $b255			jsr PopYA
.c367	85 15		sta $15		Two_Store_YA:	sta tmp1+0	; save addr
.c369	84 16		sty $16				sty tmp1+1
.c36b	b5 25		lda $25,x			lda DStack+0,x	; copy MSB
.c36d	a0 00		ldy #$00			ldy #0
.c36f	91 15		sta ($15),y			sta (tmp1),y
.c371	b5 26		lda $26,x			lda DStack+1,x	; copy next
.c373	c8		iny				iny
.c374	91 15		sta ($15),y			sta (tmp1),y
.c376	b5 27		lda $27,x			lda DStack+2,x	; copy next
.c378	c8		iny				iny
.c379	91 15		sta ($15),y			sta (tmp1),y
.c37b	b5 28		lda $28,x			lda DStack+3,x	; copy MSB
.c37d	c8		iny				iny
.c37e	91 15		sta ($15),y			sta (tmp1),y
.c380	e8		inx				inx		; 2Drop
.c381	e8		inx				inx
.c382	e8		inx				inx
.c383	e8		inx				inx
=35					CL	.var *-(WordListLink+wh_Xt)
=$c384					en = *	; remember here
>c35f	23					.byte CL	;wh_CodeLength
.c384	60		rts				rts
>c385	32 40				L1:	.text "2@"	;  name of word as a string, ending at wh_NameLastChar
>c387	02					.byte *-L1	;wh_NameLength	length of name
>c388	dc c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c38a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c38b	00					.byte 0	;wh_Flags	dictionary flags
=49927					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c38c	20 55 b2	jsr $b255	Two_fetch:	jsr PopYA
.c38f	85 15		sta $15		Two_Fetch_YA:	sta tmp1+0	; save addr
.c391	84 16		sty $16				sty tmp1+1
.c393					Two_Fetch_tmp1:
.c393	ca		dex				dex
.c394	ca		dex				dex
.c395	ca		dex				dex
.c396	ca		dex				dex
.c397	a0 00		ldy #$00			ldy #0		; copy LSB
.c399	b1 15		lda ($15),y			lda (tmp1),y
.c39b	95 25		sta $25,x			sta DStack+0,x
.c39d	c8		iny				iny		; copy next
.c39e	b1 15		lda ($15),y			lda (tmp1),y
.c3a0	95 26		sta $26,x			sta DStack+1,x
.c3a2	c8		iny				iny		; copy next
.c3a3	b1 15		lda ($15),y			lda (tmp1),y
.c3a5	95 27		sta $27,x			sta DStack+2,x
.c3a7	c8		iny				iny		; copy next
.c3a8	b1 15		lda ($15),y			lda (tmp1),y
.c3aa	95 28		sta $28,x			sta DStack+3,x
=32					CL	.var *-(WordListLink+wh_Xt)
=$c3ac					en = *	; remember here
>c38a	20					.byte CL	;wh_CodeLength
.c3ac	60		rts				rts
>c3ad	44 40				L1:	.text "D@"	;  name of word as a string, ending at wh_NameLastChar
>c3af	02					.byte *-L1	;wh_NameLength	length of name
>c3b0	07 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3b3	08					.byte NN	;wh_Flags	dictionary flags
=49967					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3b4	20 55 b2	jsr $b255	DFetch:		jsr PopYA
.c3b7	85 15		sta $15		DFetchYA:	sta tmp1+0	; save addr
.c3b9	84 16		sty $16				sty tmp1+1
.c3bb	ca		dex				dex
.c3bc	ca		dex				dex
.c3bd	ca		dex				dex
.c3be	ca		dex				dex
.c3bf	a0 00		ldy #$00			ldy #0
.c3c1	b1 15		lda ($15),y			lda (tmp1),y
.c3c3	95 27		sta $27,x			sta DStack+2,x
.c3c5	c8		iny				iny
.c3c6	b1 15		lda ($15),y			lda (tmp1),y
.c3c8	95 28		sta $28,x			sta DStack+3,x
.c3ca	c8		iny				iny
.c3cb	b1 15		lda ($15),y			lda (tmp1),y
.c3cd	95 25		sta $25,x			sta DStack+0,x
.c3cf	c8		iny				iny
.c3d0	b1 15		lda ($15),y			lda (tmp1),y
.c3d2	95 26		sta $26,x			sta DStack+1,x
=32					CL	.var *-(WordListLink+wh_Xt)
=$c3d4					en = *	; remember here
>c3b2	20					.byte CL	;wh_CodeLength
.c3d4	60		rts				rts
>c3d5	32 52 40			L1:	.text "2R@"	;  name of word as a string, ending at wh_NameLastChar
>c3d8	03					.byte *-L1	;wh_NameLength	length of name
>c3d9	2f c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3dc	09					.byte CO+NN	;wh_Flags	dictionary flags
=50008					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3dd					Two_r_fetch:
.c3dd	8a		txa				txa		; Y= return stack index
.c3de	ba		tsx				tsx
.c3df	86 15		stx $15				stx tmp1
.c3e1	a4 15		ldy $15				ldy tmp1
.c3e3	aa		tax				tax
.c3e4	ca		dex				dex		; make room on the Data Stack
.c3e5	ca		dex				dex
.c3e6	ca		dex				dex
.c3e7	ca		dex				dex
.c3e8	b9 03 01	lda $0103,y			lda RStack+3,y	; LSB of top entry
.c3eb	95 25		sta $25,x			sta DStack+0,x
.c3ed	b9 04 01	lda $0104,y			lda RStack+4,y	; MSB of top entry
.c3f0	95 26		sta $26,x			sta DStack+1,x
.c3f2	b9 05 01	lda $0105,y			lda RStack+5,y	; LSB of bottom entry
.c3f5	95 27		sta $27,x			sta DStack+2,x
.c3f7	b9 06 01	lda $0106,y			lda RStack+6,y	; MSB of bottom entry
.c3fa	95 28		sta $28,x			sta DStack+3,x
=31					CL	.var *-(WordListLink+wh_Xt)
=$c3fc					en = *	; remember here
>c3db	1f					.byte CL	;wh_CodeLength
.c3fc	60		rts				rts
>c3fd	32 52 3e			L1:	.text "2R>"	;  name of word as a string, ending at wh_NameLastChar
>c400	03					.byte *-L1	;wh_NameLength	length of name
>c401	58 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c403	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c404	41					.byte CO+R6	;wh_Flags	dictionary flags
=50048					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c405					Two_r_from:
.c405	68		pla				pla			; save the return address
.c406	85 15		sta $15				sta tmp1+0
.c408	68		pla				pla
.c409	85 16		sta $16				sta tmp1+1
.c40b	ca		dex				dex			; make room on stack
.c40c	ca		dex				dex
.c40d	ca		dex				dex
.c40e	ca		dex				dex
.c40f	68		pla				pla			; LSB
.c410	95 25		sta $25,x			sta DStack+0,x
.c412	68		pla				pla			; MSB
.c413	95 26		sta $26,x			sta DStack+1,x
.c415	68		pla				pla			; LSB
.c416	95 27		sta $27,x			sta DStack+2,x
.c418	68		pla				pla			; MSB
.c419	95 28		sta $28,x			sta DStack+3,x
.c41b	a5 16		lda $16				lda tmp1+1		; restore return address
.c41d	48		pha				pha
.c41e	a5 15		lda $15				lda tmp1+0
.c420	48		pha				pha
=28					CL	.var *-(WordListLink+wh_Xt)
=$c421					en = *	; remember here
>c403	1c					.byte CL	;wh_CodeLength
.c421	60		rts				rts
>c422	32 3e 52			L1:	.text "2>R"	;  name of word as a string, ending at wh_NameLastChar
>c425	03					.byte *-L1	;wh_NameLength	length of name
>c426	80 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c428	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c429	51					.byte CO+UF+R6	;wh_Flags	dictionary flags
=50085					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c42a					Two_to_r:
.c42a	68		pla				pla		; save the return address
.c42b	85 15		sta $15				sta tmp1+0
.c42d	68		pla				pla
.c42e	85 16		sta $16				sta tmp1+1
.c430	20 a8 b2	jsr $b2a8			jsr underflow_2
.c433	b5 28		lda $28,x			lda DStack+3,x	; MSB
.c435	48		pha				pha
.c436	b5 27		lda $27,x			lda DStack+2,x	; LSB
.c438	48		pha				pha
.c439	b5 26		lda $26,x			lda DStack+1,x	; MSB
.c43b	48		pha				pha
.c43c	b5 25		lda $25,x			lda DStack+0,x	; LSB
.c43e	48		pha				pha
.c43f	e8		inx				inx
.c440	e8		inx				inx
.c441	e8		inx				inx
.c442	e8		inx				inx
.c443	a5 16		lda $16				lda tmp1+1	; restore return address
.c445	48		pha				pha
.c446	a5 15		lda $15				lda tmp1+0
.c448	48		pha				pha
=31					CL	.var *-(WordListLink+wh_Xt)
=$c449					en = *	; remember here
>c428	1f					.byte CL	;wh_CodeLength
.c449	60		rts				rts
>c44a	49 6e 76 65 72 74		L1:	.text "Invert"	;  name of word as a string, ending at wh_NameLastChar
>c450	06					.byte *-L1	;wh_NameLength	length of name
>c451	a5 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c453	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c454	10					.byte UF	;wh_Flags	dictionary flags
=50128					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c455					Invert:
.c455	20 93 b2	jsr $b293			jsr underflow_1
.c458	a9 ff		lda #$ff			lda #$FF
.c45a	55 25		eor $25,x			eor DStack+0,x	; LSB
.c45c	95 25		sta $25,x			sta DStack+0,x
.c45e	a9 ff		lda #$ff			lda #$FF
.c460	55 26		eor $26,x			eor DStack+1,x	; MSB
.c462	95 26		sta $26,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$c464					en = *	; remember here
>c453	0f					.byte CL	;wh_CodeLength
.c464	60		rts				rts
>c465	4e 65 67 61 74 65		L1:	.text "Negate"	;  name of word as a string, ending at wh_NameLastChar
>c46b	06					.byte *-L1	;wh_NameLength	length of name
>c46c	d0 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c46e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c46f	10					.byte UF	;wh_Flags	dictionary flags
=50155					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c470					Negate:
.c470	20 93 b2	jsr $b293			jsr underflow_1
.c473	38		sec		Negate3:	sec
.c474	a9 00		lda #$00	Negate4:	lda #0
.c476	f5 25		sbc $25,x			sbc DStack+0,x	; LSB
.c478	95 25		sta $25,x			sta DStack+0,x
.c47a	a9 00		lda #$00			lda #0
.c47c	f5 26		sbc $26,x			sbc DStack+1,x	; MSB
.c47e	95 26		sta $26,x			sta DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$c480					en = *	; remember here
>c46e	10					.byte CL	;wh_CodeLength
.c480	60		rts				rts
>c481	41 62 73			L1:	.text "Abs"	;  name of word as a string, ending at wh_NameLastChar
>c484	03					.byte *-L1	;wh_NameLength	length of name
>c485	eb c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c487	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c488	08					.byte NN	;wh_Flags	dictionary flags
=50180					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c489					Abs:
.c489	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c48b	b0 05		bcs $c492		bcs Throw_Underflow_17
.c48d	b5 26		lda $26,x			lda DStack+1,x	; n negative?
.c48f	30 e2		bmi $c473			bmi Negate3
=8					CL	.var *-(WordListLink+wh_Xt)
=$c491					en = *	; remember here
>c487	08					.byte CL	;wh_CodeLength
.c491	60		rts				rts
.c492	4c 7f b2	jmp $b27f	Throw_Underflow_17: jmp Throw_Underflow
>c495	44 4e 65 67 61 74 65		L1:	.text "DNegate"	;  name of word as a string, ending at wh_NameLastChar
>c49c	07					.byte *-L1	;wh_NameLength	length of name
>c49d	04 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c49f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4a0	08					.byte NN	;wh_Flags	dictionary flags
=50204					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4a1					DNegate:
.c4a1	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c4a3	b0 ed		bcs $c492		bcs Throw_Underflow_17
.c4a5	38		sec		DNegate3:	sec
.c4a6	a9 00		lda #$00			lda #0
.c4a8	f5 27		sbc $27,x			sbc DStack+2,x	; LSB of low cell
.c4aa	95 27		sta $27,x			sta DStack+2,x
.c4ac	a9 00		lda #$00			lda #0
.c4ae	f5 28		sbc $28,x			sbc DStack+3,x	; MSB of low cell
.c4b0	95 28		sta $28,x			sta DStack+3,x
.c4b2	4c 74 c4	jmp $c474			jmp Negate4
=20					CL	.var *-(WordListLink+wh_Xt)
=$c4b5					en = *	; remember here
>c49f	14					.byte CL	;wh_CodeLength
>c4b5	44 41 62 73			L1:	.text "DAbs"	;  name of word as a string, ending at wh_NameLastChar
>c4b9	04					.byte *-L1	;wh_NameLength	length of name
>c4ba	1c c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4bd	08					.byte NN	;wh_Flags	dictionary flags
=50233					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4be					DAbs:
.c4be	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c4c0	b0 d0		bcs $c492		bcs Throw_Underflow_17
.c4c2	b5 26		lda $26,x			lda DStack+1,x	; d negative?
.c4c4	30 df		bmi $c4a5			bmi DNegate3
=8					CL	.var *-(WordListLink+wh_Xt)
=$c4c6					en = *	; remember here
>c4bc	08					.byte CL	;wh_CodeLength
.c4c6	60		rts				rts
>c4c7	44 3c 3e			L1:	.text "D<>"	;  name of word as a string, ending at wh_NameLastChar
>c4ca	03					.byte *-L1	;wh_NameLength	length of name
>c4cb	39 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4ce	08					.byte NN	;wh_Flags	dictionary flags
=50250					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4cf	20 dc c4	jsr $c4dc	DNEq:		jsr DEqual
.c4d2	4c d7 c6	jmp $c6d7			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c4d5					en = *	; remember here
>c4cd	06					.byte CL	;wh_CodeLength
>c4d5	44 3d				L1:	.text "D="	;  name of word as a string, ending at wh_NameLastChar
>c4d7	02					.byte *-L1	;wh_NameLength	length of name
>c4d8	4a c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4da	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4db	08					.byte NN	;wh_Flags	dictionary flags
=50263					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4dc	b5 2b		lda $2b,x	DEqual:		lda DStack+6,x
.c4de	d5 27		cmp $27,x			cmp DStack+2,x
.c4e0	d0 50		bne $c532			bne False3
.c4e2	b5 2c		lda $2c,x			lda DStack+7,x
.c4e4	d5 28		cmp $28,x			cmp DStack+3,x
.c4e6	d0 4a		bne $c532			bne False3
.c4e8	b5 25		lda $25,x			lda DStack+0,x
.c4ea	d5 29		cmp $29,x			cmp DStack+4,x
.c4ec	d0 44		bne $c532			bne False3
.c4ee	b5 26		lda $26,x			lda DStack+1,x
.c4f0	d5 2a		cmp $2a,x			cmp DStack+5,x
.c4f2	d0 3e		bne $c532			bne False3
.c4f4	f0 62		beq $c558			beq True3
=26					CL	.var *-(WordListLink+wh_Xt)
=$c4f6					en = *	; remember here
>c4da	1a					.byte CL	;wh_CodeLength
>c4f6	44 55 3e			L1:	.text "DU>"	;  name of word as a string, ending at wh_NameLastChar
>c4f9	03					.byte *-L1	;wh_NameLength	length of name
>c4fa	57 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4fd	08					.byte NN	;wh_Flags	dictionary flags
=50297					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4fe	20 97 c5	jsr $c597	DUGt:		jsr DGtSub
.c501	90 55		bcc $c558			bcc True3
.c503	b0 2d		bcs $c532			bcs False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c505					en = *	; remember here
>c4fc	07					.byte CL	;wh_CodeLength
>c505	44 55 3c 3d			L1:	.text "DU<="	;  name of word as a string, ending at wh_NameLastChar
>c509	04					.byte *-L1	;wh_NameLength	length of name
>c50a	79 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c50c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c50d	08					.byte NN	;wh_Flags	dictionary flags
=50313					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c50e	20 97 c5	jsr $c597	DULe:		jsr DGtSub
.c511	b0 45		bcs $c558			bcs True3
.c513	90 1d		bcc $c532			bcc False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c515					en = *	; remember here
>c50c	07					.byte CL	;wh_CodeLength
>c515	44 55 3e 3d			L1:	.text "DU>="	;  name of word as a string, ending at wh_NameLastChar
>c519	04					.byte *-L1	;wh_NameLength	length of name
>c51a	89 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c51c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c51d	08					.byte NN	;wh_Flags	dictionary flags
=50329					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c51e	20 65 c5	jsr $c565	DUGe:		jsr DLessSub
.c521	b0 35		bcs $c558			bcs True3
.c523	90 0d		bcc $c532			bcc False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c525					en = *	; remember here
>c51c	07					.byte CL	;wh_CodeLength
>c525	44 55 3c			L1:	.text "DU<"	;  name of word as a string, ending at wh_NameLastChar
>c528	03					.byte *-L1	;wh_NameLength	length of name
>c529	99 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c52b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c52c	08					.byte NN	;wh_Flags	dictionary flags
=50344					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c52d	20 65 c5	jsr $c565	DULess:		jsr DLessSub
.c530	90 26		bcc $c558			bcc True3
.c532	a9 00		lda #$00	False3:		lda #0
.c534	f0 24		beq $c55a			beq DReturn3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c536					en = *	; remember here
>c52b	09					.byte CL	;wh_CodeLength
.c536	4c 7f b2	jmp $b27f	Throw_Underflow_09: jmp Throw_Underflow
>c539	44 3e 3d			L1:	.text "D>="	;  name of word as a string, ending at wh_NameLastChar
>c53c	03					.byte *-L1	;wh_NameLength	length of name
>c53d	a8 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c53f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c540	08					.byte NN	;wh_Flags	dictionary flags
=50364					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c541	20 65 c5	jsr $c565	DGEq:		jsr DLessSub
.c544	70 10		bvs $c556			bvs DLess3
.c546	10 10		bpl $c558	DGEq3:		bpl True3
.c548	30 e8		bmi $c532			bmi False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c54a					en = *	; remember here
>c53f	09					.byte CL	;wh_CodeLength
>c54a	44 3c				L1:	.text "D<"	;  name of word as a string, ending at wh_NameLastChar
>c54c	02					.byte *-L1	;wh_NameLength	length of name
>c54d	bc c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c54f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c550	08					.byte NN	;wh_Flags	dictionary flags
=50380					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c551	20 65 c5	jsr $c565	DLess:		jsr DLessSub
.c554	70 f0		bvs $c546			bvs DGEq3
.c556	10 da		bpl $c532	DLess3:		bpl False3
.c558	a9 ff		lda #$ff	True3:		lda #$ff
.c55a					DReturn3:
.c55a	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c55c	b0 d8		bcs $c536		bcs Throw_Underflow_09
.c55e	95 2b		sta $2b,x			sta DStack+6,x
.c560	95 2c		sta $2c,x			sta DStack+7,x
.c562	4c f1 ab	jmp $abf1			jmp ThreeDrop
=20					CL	.var *-(WordListLink+wh_Xt)
=$c565					en = *	; remember here
>c54f	14					.byte CL	;wh_CodeLength
.c565	b5 2b		lda $2b,x	DLessSub:	lda DStack+6,x
.c567	d5 27		cmp $27,x			cmp DStack+2,x
.c569	b5 2c		lda $2c,x			lda DStack+7,x
.c56b	f5 28		sbc $28,x			sbc DStack+3,x
.c56d	b5 29		lda $29,x			lda DStack+4,x
.c56f	f5 25		sbc $25,x			sbc DStack+0,x
.c571	b5 2a		lda $2a,x			lda DStack+5,x
.c573	f5 26		sbc $26,x			sbc DStack+1,x
.c575	60		rts				rts
>c576	44 3c 3d			L1:	.text "D<="	;  name of word as a string, ending at wh_NameLastChar
>c579	03					.byte *-L1	;wh_NameLength	length of name
>c57a	cc c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c57c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c57d	08					.byte NN	;wh_Flags	dictionary flags
=50425					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c57e	20 97 c5	jsr $c597	DLe:		jsr DGtSub
.c581	70 10		bvs $c593			bvs DGt3
.c583	10 d3		bpl $c558	DLe3:		bpl True3
.c585	30 ab		bmi $c532			bmi False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c587					en = *	; remember here
>c57c	09					.byte CL	;wh_CodeLength
>c587	44 3e				L1:	.text "D>"	;  name of word as a string, ending at wh_NameLastChar
>c589	02					.byte *-L1	;wh_NameLength	length of name
>c58a	f9 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c58c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c58d	08					.byte NN	;wh_Flags	dictionary flags
=50441					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c58e	20 97 c5	jsr $c597	DGt:		jsr DGtSub
.c591	70 f0		bvs $c583			bvs DLe3
.c593	30 c3		bmi $c558	DGt3:		bmi True3
.c595	10 9b		bpl $c532			bpl False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c597					en = *	; remember here
>c58c	09					.byte CL	;wh_CodeLength
.c597	b5 27		lda $27,x	DGtSub:		lda DStack+2,x
.c599	d5 2b		cmp $2b,x			cmp DStack+6,x
.c59b	b5 28		lda $28,x			lda DStack+3,x
.c59d	f5 2c		sbc $2c,x			sbc DStack+7,x
.c59f	b5 25		lda $25,x			lda DStack+0,x
.c5a1	f5 29		sbc $29,x			sbc DStack+4,x
.c5a3	b5 26		lda $26,x			lda DStack+1,x
.c5a5	f5 2a		sbc $2a,x			sbc DStack+5,x
.c5a7	60		rts				rts
>c5a8	44 30 3c 3d			L1:	.text "D0<="	;  name of word as a string, ending at wh_NameLastChar
>c5ac	04					.byte *-L1	;wh_NameLength	length of name
>c5ad	09 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5af	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5b0	08					.byte NN	;wh_Flags	dictionary flags
=50476					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5b1	b5 26		lda $26,x	D0Le:		lda DStack+1,x	; test sign
.c5b3	30 6b		bmi $c620			bmi True1
.c5b5	10 27		bpl $c5de			bpl D0Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c5b7					en = *	; remember here
>c5af	06					.byte CL	;wh_CodeLength
>c5b7	44 30 3e			L1:	.text "D0>"	;  name of word as a string, ending at wh_NameLastChar
>c5ba	03					.byte *-L1	;wh_NameLength	length of name
>c5bb	2c c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5bd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5be	08					.byte NN	;wh_Flags	dictionary flags
=50490					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5bf	b5 26		lda $26,x	D0Gt:		lda DStack+1,x	; test sign
.c5c1	10 0c		bpl $c5cf			bpl D0Ne
.c5c3	4c 40 c6	jmp $c640			jmp False1
>c5c6	44 30 3c 3e			L1:	.text "D0<>"	;  name of word as a string, ending at wh_NameLastChar
>c5ca	04					.byte *-L1	;wh_NameLength	length of name
>c5cb	3a c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5ce	08					.byte NN	;wh_Flags	dictionary flags
=50506					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5cf	20 e5 c5	jsr $c5e5	D0Ne:		jsr D0EqSub
.c5d2	d0 4c		bne $c620			bne True1
.c5d4	f0 6a		beq $c640			beq False1
=7					CL	.var *-(WordListLink+wh_Xt)
=$c5d6					en = *	; remember here
>c5cd	07					.byte CL	;wh_CodeLength
>c5d6	44 30 3d			L1:	.text "D0="	;  name of word as a string, ending at wh_NameLastChar
>c5d9	03					.byte *-L1	;wh_NameLength	length of name
>c5da	4a c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5dd	08					.byte NN	;wh_Flags	dictionary flags
=50521					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5de	20 e5 c5	jsr $c5e5	D0Equal:	jsr D0EqSub
.c5e1	d0 5d		bne $c640			bne False1
.c5e3	f0 3b		beq $c620			beq True1
=7					CL	.var *-(WordListLink+wh_Xt)
=$c5e5					en = *	; remember here
>c5dc	07					.byte CL	;wh_CodeLength
.c5e5	b5 27		lda $27,x	D0EqSub:	lda DStack+2,x
.c5e7	15 28		ora $28,x			ora DStack+3,x
.c5e9	15 25		ora $25,x			ora DStack+0,x
.c5eb	15 26		ora $26,x			ora DStack+1,x
.c5ed	60		rts				rts
>c5ee	44 30 3c			L1:	.text "D0<"	;  name of word as a string, ending at wh_NameLastChar
>c5f1	03					.byte *-L1	;wh_NameLength	length of name
>c5f2	59 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5f4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5f5	08					.byte NN	;wh_Flags	dictionary flags
=50545					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5f6	b5 26		lda $26,x	D0Less:		lda DStack+1,x	; test sign
.c5f8	30 26		bmi $c620			bmi True1
.c5fa	10 44		bpl $c640			bpl False1
=6					CL	.var *-(WordListLink+wh_Xt)
=$c5fc					en = *	; remember here
>c5f4	06					.byte CL	;wh_CodeLength
>c5fc	44 30 3e 3d			L1:	.text "D0>="	;  name of word as a string, ending at wh_NameLastChar
>c600	04					.byte *-L1	;wh_NameLength	length of name
>c601	71 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c603	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c604	08					.byte NN	;wh_Flags	dictionary flags
=50560					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c605	b5 26		lda $26,x	D0Ge:		lda DStack+1,x	; test sign
.c607	10 17		bpl $c620			bpl True1
.c609	30 35		bmi $c640			bmi False1
=6					CL	.var *-(WordListLink+wh_Xt)
=$c60b					en = *	; remember here
>c603	06					.byte CL	;wh_CodeLength
.c60b	4c 7f b2	jmp $b27f	Throw_Underflow_08: jmp Throw_Underflow
>c60e	3d				L1:	.text "="	;  name of word as a string, ending at wh_NameLastChar
>c60f	01					.byte *-L1	;wh_NameLength	length of name
>c610	80 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c612	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c613	08					.byte NN	;wh_Flags	dictionary flags
=50575					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c614	b5 25		lda $25,x	Equal:		lda DStack+0,x		; LSB
.c616	d5 27		cmp $27,x			cmp DStack+2,x
.c618	d0 26		bne $c640			bne False1
.c61a	b5 26		lda $26,x			lda DStack+1,x		; MSB
.c61c	d5 28		cmp $28,x			cmp DStack+3,x
.c61e	d0 20		bne $c640			bne False1
.c620	a9 ff		lda #$ff	True1:		lda #$ff	; return TRUE
.c622					Return1:
.c622	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c624	b0 e5		bcs $c60b		bcs Throw_Underflow_08
.c626	e8		inx				inx		; Drop
.c627	e8		inx				inx
.c628	95 25		sta $25,x			sta DStack+0,x	; store f
.c62a	95 26		sta $26,x			sta DStack+1,x
.c62c	60		rts				rts
=25					CL	.var *-(WordListLink+wh_Xt)
=$c62d					en = *	; remember here
>c612	19					.byte CL	;wh_CodeLength
>c62d	3c 3e				L1:	.text "<>"	;  name of word as a string, ending at wh_NameLastChar
>c62f	02					.byte *-L1	;wh_NameLength	length of name
>c630	8f c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c632	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c633	08					.byte NN	;wh_Flags	dictionary flags
=50607					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c634	b5 25		lda $25,x	Not_Equals:	lda DStack+0,x		; LSB
.c636	d5 27		cmp $27,x			cmp DStack+2,x
.c638	d0 e6		bne $c620			bne True1
.c63a	b5 26		lda $26,x			lda DStack+1,x		; MSB
.c63c	d5 28		cmp $28,x			cmp DStack+3,x
.c63e	d0 e0		bne $c620			bne True1
.c640	a9 00		lda #$00	False1:		lda #0		; return FALSE
.c642	f0 de		beq $c622			beq Return1
=16					CL	.var *-(WordListLink+wh_Xt)
=$c644					en = *	; remember here
>c632	10					.byte CL	;wh_CodeLength
>c644	3c				L1:	.text "<"	;  name of word as a string, ending at wh_NameLastChar
>c645	01					.byte *-L1	;wh_NameLength	length of name
>c646	af c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c648	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c649	08					.byte NN	;wh_Flags	dictionary flags
=50629					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c64a	b5 27		lda $27,x	Less_Than:	lda DStack+2,x	; compare
.c64c	d5 25		cmp $25,x			cmp DStack+0,x
.c64e	b5 28		lda $28,x			lda DStack+3,x
.c650	f5 26		sbc $26,x			sbc DStack+1,x
.c652	50 02		bvc $c656			bvc _c
.c654	49 80		eor #$80			eor #$80	; fix sign
.c656	10 e8		bpl $c640	_c:		bpl False1
.c658	30 c6		bmi $c620			bmi True1
=16					CL	.var *-(WordListLink+wh_Xt)
=$c65a					en = *	; remember here
>c648	10					.byte CL	;wh_CodeLength
>c65a	3e 3d				L1:	.text ">="	;  name of word as a string, ending at wh_NameLastChar
>c65c	02					.byte *-L1	;wh_NameLength	length of name
>c65d	c5 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c65f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c660	08					.byte NN	;wh_Flags	dictionary flags
=50652					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c661	20 4a c6	jsr $c64a	Ge:		jsr Less_Than
.c664	4c d7 c6	jmp $c6d7			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c667					en = *	; remember here
>c65f	06					.byte CL	;wh_CodeLength
>c667	55 3c				L1:	.text "U<"	;  name of word as a string, ending at wh_NameLastChar
>c669	02					.byte *-L1	;wh_NameLength	length of name
>c66a	dc c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c66c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c66d	08					.byte NN	;wh_Flags	dictionary flags
=50665					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c66e	b5 27		lda $27,x	U_Less_Than:	lda DStack+2,x
.c670	d5 25		cmp $25,x			cmp DStack+0,x
.c672	b5 28		lda $28,x			lda DStack+3,x
.c674	f5 26		sbc $26,x			sbc DStack+1,x
.c676	b0 c8		bcs $c640			bcs False1
.c678	90 a6		bcc $c620			bcc True1
=12					CL	.var *-(WordListLink+wh_Xt)
=$c67a					en = *	; remember here
>c66c	0c					.byte CL	;wh_CodeLength
>c67a	55 3e				L1:	.text "U>"	;  name of word as a string, ending at wh_NameLastChar
>c67c	02					.byte *-L1	;wh_NameLength	length of name
>c67d	e9 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c67f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c680	08					.byte NN	;wh_Flags	dictionary flags
=50684					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c681	b5 25		lda $25,x	U_Greater_Than:	lda DStack+0,x
.c683	d5 27		cmp $27,x			cmp DStack+2,x
.c685	b5 26		lda $26,x			lda DStack+1,x
.c687	f5 28		sbc $28,x			sbc DStack+3,x
.c689	b0 b5		bcs $c640			bcs False1
.c68b	90 93		bcc $c620			bcc True1
=12					CL	.var *-(WordListLink+wh_Xt)
=$c68d					en = *	; remember here
>c67f	0c					.byte CL	;wh_CodeLength
>c68d	3e				L1:	.text ">"	;  name of word as a string, ending at wh_NameLastChar
>c68e	01					.byte *-L1	;wh_NameLength	length of name
>c68f	fc c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c691	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c692	08					.byte NN	;wh_Flags	dictionary flags
=50702					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c693	b5 25		lda $25,x	Greater_Than:	lda DStack+0,x	; compare
.c695	d5 27		cmp $27,x			cmp DStack+2,x
.c697	b5 26		lda $26,x			lda DStack+1,x
.c699	f5 28		sbc $28,x			sbc DStack+3,x
.c69b	50 02		bvc $c69f			bvc _c
.c69d	49 80		eor #$80			eor #$80	; fix sign
.c69f	10 9f		bpl $c640	_c:		bpl False1
.c6a1	4c 20 c6	jmp $c620			jmp True1
=17					CL	.var *-(WordListLink+wh_Xt)
=$c6a4					en = *	; remember here
>c691	11					.byte CL	;wh_CodeLength
>c6a4	3c 3d				L1:	.text "<="	;  name of word as a string, ending at wh_NameLastChar
>c6a6	02					.byte *-L1	;wh_NameLength	length of name
>c6a7	0e c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6a9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6aa	08					.byte NN	;wh_Flags	dictionary flags
=50726					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6ab	20 93 c6	jsr $c693	Le:		jsr Greater_Than
.c6ae	4c d7 c6	jmp $c6d7			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c6b1					en = *	; remember here
>c6a9	06					.byte CL	;wh_CodeLength
>c6b1	55 3e 3d			L1:	.text "U>="	;  name of word as a string, ending at wh_NameLastChar
>c6b4	03					.byte *-L1	;wh_NameLength	length of name
>c6b5	26 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6b8	08					.byte NN	;wh_Flags	dictionary flags
=50740					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6b9	20 6e c6	jsr $c66e	UGe:		jsr U_Less_Than
.c6bc	4c d7 c6	jmp $c6d7			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c6bf					en = *	; remember here
>c6b7	06					.byte CL	;wh_CodeLength
>c6bf	55 3c 3d			L1:	.text "U<="	;  name of word as a string, ending at wh_NameLastChar
>c6c2	03					.byte *-L1	;wh_NameLength	length of name
>c6c3	34 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6c5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6c6	08					.byte NN	;wh_Flags	dictionary flags
=50754					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6c7	20 81 c6	jsr $c681	ULe:		jsr U_Greater_Than
.c6ca	4c d7 c6	jmp $c6d7			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c6cd					en = *	; remember here
>c6c5	06					.byte CL	;wh_CodeLength
.c6cd	4c 7f b2	jmp $b27f	Throw_Underflow_11: jmp Throw_Underflow
>c6d0	30 3d				L1:	.text "0="	;  name of word as a string, ending at wh_NameLastChar
>c6d2	02					.byte *-L1	;wh_NameLength	length of name
>c6d3	42 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6d5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6d6	08					.byte NN	;wh_Flags	dictionary flags
=50770					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6d7	b5 26		lda $26,x	Zero_Equal:	lda DStack+1,x
.c6d9	15 25		ora $25,x	ZEq3:		ora DStack+0,x
.c6db	d0 26		bne $c703			bne False0
.c6dd	f0 0e		beq $c6ed			beq True0
=8					CL	.var *-(WordListLink+wh_Xt)
=$c6df					en = *	; remember here
>c6d5	08					.byte CL	;wh_CodeLength
>c6df	30 3c 3e			L1:	.text "0<>"	;  name of word as a string, ending at wh_NameLastChar
>c6e2	03					.byte *-L1	;wh_NameLength	length of name
>c6e3	52 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6e5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6e6	08					.byte NN	;wh_Flags	dictionary flags
=50786					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6e7	b5 26		lda $26,x	Zero_Unequal:	lda DStack+1,x
.c6e9	15 25		ora $25,x	ZNe3:		ora DStack+0,x
.c6eb	f0 16		beq $c703			beq False0
.c6ed	a9 ff		lda #$ff	True0:		lda #$ff	; return TRUE
.c6ef	95 25		sta $25,x	Return0:	sta DStack+0,x
.c6f1	95 26		sta $26,x			sta DStack+1,x
.c6f3	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c6f5	b0 39		bcs $c730		bcs Throw_Underflow_05
.c6f7	60		rts				rts
=17					CL	.var *-(WordListLink+wh_Xt)
=$c6f8					en = *	; remember here
>c6e5	11					.byte CL	;wh_CodeLength
>c6f8	30 3e				L1:	.text "0>"	;  name of word as a string, ending at wh_NameLastChar
>c6fa	02					.byte *-L1	;wh_NameLength	length of name
>c6fb	62 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6fd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6fe	08					.byte NN	;wh_Flags	dictionary flags
=50810					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6ff	b5 26		lda $26,x	Zero_Greater:	lda DStack+1,x	; MSB
.c701	10 e6		bpl $c6e9			bpl ZNe3	; >= 0 ?
.c703	a9 00		lda #$00	False0:		lda #0		; return FALSE
.c705	f0 e8		beq $c6ef			beq Return0
=8					CL	.var *-(WordListLink+wh_Xt)
=$c707					en = *	; remember here
>c6fd	08					.byte CL	;wh_CodeLength
>c707	30 3c 3d			L1:	.text "0<="	;  name of word as a string, ending at wh_NameLastChar
>c70a	03					.byte *-L1	;wh_NameLength	length of name
>c70b	7a c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c70d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c70e	08					.byte NN	;wh_Flags	dictionary flags
=50826					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c70f	b5 26		lda $26,x	ZLe:		lda DStack+1,x	; < 0 ?
.c711	30 da		bmi $c6ed			bmi True0
.c713	10 c4		bpl $c6d9			bpl ZEq3
=6					CL	.var *-(WordListLink+wh_Xt)
=$c715					en = *	; remember here
>c70d	06					.byte CL	;wh_CodeLength
>c715	30 3e 3d			L1:	.text "0>="	;  name of word as a string, ending at wh_NameLastChar
>c718	03					.byte *-L1	;wh_NameLength	length of name
>c719	8a c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c71b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c71c	08					.byte NN	;wh_Flags	dictionary flags
=50840					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c71d	b5 26		lda $26,x	ZGe:		lda DStack+1,x
.c71f	10 cc		bpl $c6ed			bpl True0
.c721	30 e0		bmi $c703			bmi False0
=6					CL	.var *-(WordListLink+wh_Xt)
=$c723					en = *	; remember here
>c71b	06					.byte CL	;wh_CodeLength
>c723	30 3c				L1:	.text "0<"	;  name of word as a string, ending at wh_NameLastChar
>c725	02					.byte *-L1	;wh_NameLength	length of name
>c726	98 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c728	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c729	08					.byte NN	;wh_Flags	dictionary flags
=50853					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c72a	b5 26		lda $26,x	Zero_Less:	lda DStack+1,x	; MSB
.c72c	10 d5		bpl $c703			bpl False0
.c72e	30 bd		bmi $c6ed			bmi True0
=6					CL	.var *-(WordListLink+wh_Xt)
=$c730					en = *	; remember here
>c728	06					.byte CL	;wh_CodeLength
.c730	4c 7f b2	jmp $b27f	Throw_Underflow_05: jmp Throw_Underflow
>c733	4d 69 6e			L1:	.text "Min"	;  name of word as a string, ending at wh_NameLastChar
>c736	03					.byte *-L1	;wh_NameLength	length of name
>c737	a5 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c739	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c73a	18					.byte UF+NN	;wh_Flags	dictionary flags
=50870					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c73b					Min:
.c73b	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c73d	b0 f1		bcs $c730		bcs Throw_Underflow_05
.c73f	b5 25		lda $25,x			lda DStack+0,x	; compare n1 & n2; sets V & N but not Z
.c741	d5 27		cmp $27,x			cmp DStack+2,x
.c743	b5 26		lda $26,x			lda DStack+1,x
.c745	f5 28		sbc $28,x			sbc DStack+3,x
.c747	70 1b		bvs $c764			bvs Max_3	; if overflow, the sign is backwards
.c749	30 29		bmi $c774	Min_3:		bmi Nip_NoUf	; if negative, NOS is larger and needs to be dumped
.c74b	e8		inx				inx		; Drop n2
.c74c	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$c74d					en = *	; remember here
>c739	12					.byte CL	;wh_CodeLength
.c74d	60		rts				rts
>c74e	4d 61 78			L1:	.text "Max"	;  name of word as a string, ending at wh_NameLastChar
>c751	03					.byte *-L1	;wh_NameLength	length of name
>c752	b6 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c754	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c755	08					.byte NN	;wh_Flags	dictionary flags
=50897					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c756					Max:
.c756	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c758	b0 d6		bcs $c730		bcs Throw_Underflow_05
.c75a	b5 25		lda $25,x			lda DStack+0,x	; Compare n1 & n2; sets V & N but not Z
.c75c	d5 27		cmp $27,x			cmp DStack+2,x
.c75e	b5 26		lda $26,x			lda DStack+1,x
.c760	f5 28		sbc $28,x			sbc DStack+3,x
.c762	70 e5		bvs $c749			bvs Min_3	; if overflow, the sign is backwards
.c764	10 0e		bpl $c774	Max_3:		bpl Nip_NoUf	; if negative, NOS is larger and needs to be kept
.c766	e8		inx				inx		; Drop n2
.c767	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$c768					en = *	; remember here
>c754	12					.byte CL	;wh_CodeLength
.c768	60		rts				rts
>c769	4e 69 70			L1:	.text "Nip"	;  name of word as a string, ending at wh_NameLastChar
>c76c	03					.byte *-L1	;wh_NameLength	length of name
>c76d	d1 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c76f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c770	10					.byte UF	;wh_Flags	dictionary flags
=50924					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c771					Nip:
.c771	20 a8 b2	jsr $b2a8			jsr underflow_2
.c774	b5 25		lda $25,x	Nip_NoUf:	lda DStack+0,x	; PopYA
.c776	b4 26		ldy $26,x			ldy DStack+1,x
.c778	e8		inx				inx
.c779	e8		inx				inx
.c77a	95 25		sta $25,x			sta DStack+0,x	; store over n1
.c77c	94 26		sty $26,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$c77e					en = *	; remember here
>c76f	0d					.byte CL	;wh_CodeLength
.c77e	60		rts				rts
>c77f	50 69 63 6b			L1:	.text "Pick"	;  name of word as a string, ending at wh_NameLastChar
>c783	04					.byte *-L1	;wh_NameLength	length of name
>c784	ec c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c786	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c787	00					.byte 0	;wh_Flags	dictionary flags
=50947					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c788					Pick:
.c788	16 25		asl $25,x			asl DStack+0,x	; we assume u < 128 (stack is small)
.c78a	8a		txa				txa
.c78b	75 25		adc $25,x			adc DStack+0,x
.c78d	a8		tay				tay
.c78e	b9 27 00	lda $0027,y			lda DStack+2,y
.c791	95 25		sta $25,x			sta DStack+0,x
.c793	b9 28 00	lda $0028,y			lda DStack+3,y
.c796	95 26		sta $26,x			sta DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$c798					en = *	; remember here
>c786	10					.byte CL	;wh_CodeLength
.c798	60		rts				rts
>c799	43 68 61 72			L1:	.text "Char"	;  name of word as a string, ending at wh_NameLastChar
>c79d	04					.byte *-L1	;wh_NameLength	length of name
>c79e	03 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7a0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7a1	08					.byte NN	;wh_Flags	dictionary flags
=50973					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7a2					Char:
.c7a2	20 03 b9	jsr $b903			jsr parse_name_check
.c7a5	e8		inx				inx		; Drop number of characters, leave addr
.c7a6	e8		inx				inx
.c7a7	4c 4d cb	jmp $cb4d			jmp C_Fetch	; get character ( C@ )
=8					CL	.var *-(WordListLink+wh_Xt)
=$c7aa					en = *	; remember here
>c7a0	08					.byte CL	;wh_CodeLength
>c7aa	5b 43 68 61 72 5d		L1:	.text "[Char]"	;  name of word as a string, ending at wh_NameLastChar
>c7b0	06					.byte *-L1	;wh_NameLength	length of name
>c7b1	1d c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7b3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7b4	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=50992					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7b5	20 a2 c7	jsr $c7a2	Bracket_Char:	jsr Char
.c7b8	4c 98 b5	jmp $b598			jmp Literal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c7bb					en = *	; remember here
>c7b3	06					.byte CL	;wh_CodeLength
>c7bb	43 68 61 72 2b			L1:	.text "Char+"	;  name of word as a string, ending at wh_NameLastChar
>c7c0	05					.byte *-L1	;wh_NameLength	length of name
>c7c1	30 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7c4	00					.byte 0	;wh_Flags	dictionary flags
=51008					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7c5					Char_Plus:
.c7c5	20 93 b2	jsr $b293			jsr underflow_1
.c7c8	f6 25		inc $25,x			inc DStack+0,x
.c7ca	d0 02		bne $c7ce			bne +
.c7cc	f6 26		inc $26,x			inc DStack+1,x
.c7ce					+
=9					CL	.var *-(WordListLink+wh_Xt)
=$c7ce					en = *	; remember here
>c7c3	09					.byte CL	;wh_CodeLength
.c7ce	60		rts				rts
>c7cf	43 68 61 72 73			L1:	.text "Chars"	;  name of word as a string, ending at wh_NameLastChar
>c7d4	05					.byte *-L1	;wh_NameLength	length of name
>c7d5	40 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7d7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7d8	02					.byte AN	;wh_Flags	dictionary flags
=51028					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7d9					Chars:
=0					CL	.var *-(WordListLink+wh_Xt)
=$c7d9					en = *	; remember here
>c7d7	00					.byte CL	;wh_CodeLength
.c7d9	60		rts				rts
>c7da	43 65 6c 6c 73			L1:	.text "Cells"	;  name of word as a string, ending at wh_NameLastChar
>c7df	05					.byte *-L1	;wh_NameLength	length of name
>c7e0	54 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7e3	10					.byte UF	;wh_Flags	dictionary flags
=51039					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7e4					Cells:
.c7e4	20 93 b2	jsr $b293			jsr underflow_1
.c7e7	16 25		asl $25,x			asl DStack+0,x		; 2*
.c7e9	36 26		rol $26,x			rol DStack+1,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$c7eb					en = *	; remember here
>c7e2	07					.byte CL	;wh_CodeLength
.c7eb	60		rts				rts
>c7ec	43 65 6c 6c 2b			L1:	.text "Cell+"	;  name of word as a string, ending at wh_NameLastChar
>c7f1	05					.byte *-L1	;wh_NameLength	length of name
>c7f2	5f c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7f4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7f5	10					.byte UF	;wh_Flags	dictionary flags
=51057					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7f6					Cell_Plus:
.c7f6	20 93 b2	jsr $b293			jsr underflow_1
.c7f9	a9 02		lda #$02			lda #2		; our cells are 2 bytes
.c7fb					Plus_A:
.c7fb	18		clc				clc
.c7fc	75 25		adc $25,x			adc DStack+0,x
.c7fe	95 25		sta $25,x			sta DStack+0,x
.c800	90 02		bcc $c804			bcc +
.c802	f6 26		inc $26,x			inc DStack+1,x
.c804					+
=14					CL	.var *-(WordListLink+wh_Xt)
=$c804					en = *	; remember here
>c7f4	0e					.byte CL	;wh_CodeLength
.c804	60		rts				rts
.c805					Nos_Plus_A:
.c805	18		clc				clc
.c806	75 27		adc $27,x			adc DStack+2,x
.c808	95 27		sta $27,x			sta DStack+2,x
.c80a	90 02		bcc $c80e			bcc +
.c80c	f6 28		inc $28,x			inc DStack+3,x
.c80e	60		rts		+		rts
>c80f	48 65 72 65			L1:	.text "Here"	;  name of word as a string, ending at wh_NameLastChar
>c813	04					.byte *-L1	;wh_NameLength	length of name
>c814	71 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c816	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c817	08					.byte NN	;wh_Flags	dictionary flags
=51091					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c818	a5 00		lda $00		Here:		lda cp+0
.c81a	a4 01		ldy $01				ldy cp+1
.c81c	4c e5 b5	jmp $b5e5			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$c81f					en = *	; remember here
>c816	07					.byte CL	;wh_CodeLength
>c81f	31 2d				L1:	.text "1-"	;  name of word as a string, ending at wh_NameLastChar
>c821	02					.byte *-L1	;wh_NameLength	length of name
>c822	93 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c824	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c825	10					.byte UF	;wh_Flags	dictionary flags
=51105					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c826					One_Minus:
.c826	20 93 b2	jsr $b293			jsr underflow_1
.c829					One_Minus_NoUf:
.c829	b5 25		lda $25,x			lda DStack+0,x
.c82b	d0 02		bne $c82f			bne +
.c82d	d6 26		dec $26,x			dec DStack+1,x
.c82f	d6 25		dec $25,x	+		dec DStack+0,x
=11					CL	.var *-(WordListLink+wh_Xt)
=$c831					en = *	; remember here
>c824	0b					.byte CL	;wh_CodeLength
.c831	60		rts				rts
.c832					NOS_One_Minus:
.c832	b5 27		lda $27,x			lda DStack+2,x
.c834	d0 02		bne $c838			bne +
.c836	d6 28		dec $28,x			dec DStack+3,x
.c838	d6 27		dec $27,x	+		dec DStack+2,x
.c83a	60		rts				rts
.c83b					Minus_A:
.c83b	18		clc				clc
.c83c	75 25		adc $25,x			adc DStack+0,x
.c83e	95 25		sta $25,x			sta DStack+0,x
.c840	b0 02		bcs $c844			bcs +
.c842	d6 26		dec $26,x			dec DStack+1,x
.c844	60		rts		+		rts
>c845	31 2b				L1:	.text "1+"	;  name of word as a string, ending at wh_NameLastChar
>c847	02					.byte *-L1	;wh_NameLength	length of name
>c848	a1 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c84a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c84b	10					.byte UF	;wh_Flags	dictionary flags
=51143					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c84c					One_Plus:
.c84c	20 93 b2	jsr $b293			jsr underflow_1
.c84f	f6 25		inc $25,x			inc DStack+0,x
.c851	d0 02		bne $c855			bne +
.c853	f6 26		inc $26,x			inc DStack+1,x
.c855					+
=9					CL	.var *-(WordListLink+wh_Xt)
=$c855					en = *	; remember here
>c84a	09					.byte CL	;wh_CodeLength
.c855	60		rts				rts
.c856					NOS_One_Plus:
.c856	f6 27		inc $27,x			inc DStack+2,x
.c858	d0 02		bne $c85c			bne +
.c85a	f6 28		inc $28,x			inc DStack+3,x
.c85c	60		rts		+		rts
>c85d	4d 2b				L1:	.text "M+"	;  name of word as a string, ending at wh_NameLastChar
>c85f	02					.byte *-L1	;wh_NameLength	length of name
>c860	c7 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c862	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c863	08					.byte NN	;wh_Flags	dictionary flags
=51167					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c864	20 55 b2	jsr $b255	MPlus:		jsr PopYA
.c867	18		clc				clc		; add n to lo word of d1
.c868	75 27		adc $27,x			adc DStack+2,x
.c86a	95 27		sta $27,x			sta DStack+2,x
.c86c	98		tya				tya
.c86d	75 28		adc $28,x			adc DStack+3,x
.c86f	95 28		sta $28,x			sta DStack+3,x
.c871	90 06		bcc $c879			bcc +		; propagate carry thru hi word of d1
.c873	f6 25		inc $25,x			inc DStack+0,x
.c875	d0 02		bne $c879			bne +
.c877	f6 26		inc $26,x			inc DStack+1,x
.c879					+
.c879	98		tya				tya		; if n negative
.c87a	30 ad		bmi $c829			bmi One_Minus_NoUf ;   decrement hi word of d1
=24					CL	.var *-(WordListLink+wh_Xt)
=$c87c					en = *	; remember here
>c862	18					.byte CL	;wh_CodeLength
.c87c	60		rts				rts
>c87d	44 32 2a			L1:	.text "D2*"	;  name of word as a string, ending at wh_NameLastChar
>c880	03					.byte *-L1	;wh_NameLength	length of name
>c881	df c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c883	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c884	10					.byte UF	;wh_Flags	dictionary flags
=51200					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c885	20 a8 b2	jsr $b2a8	D2Star:		jsr underflow_2
.c888	16 27		asl $27,x			asl DStack+2,x
.c88a	36 28		rol $28,x			rol DStack+3,x
.c88c	36 25		rol $25,x			rol DStack+0,x
.c88e	36 26		rol $26,x			rol DStack+1,x
=11					CL	.var *-(WordListLink+wh_Xt)
=$c890					en = *	; remember here
>c883	0b					.byte CL	;wh_CodeLength
.c890	60		rts				rts
>c891	44 32 2f			L1:	.text "D2/"	;  name of word as a string, ending at wh_NameLastChar
>c894	03					.byte *-L1	;wh_NameLength	length of name
>c895	00 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c897	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c898	10					.byte UF	;wh_Flags	dictionary flags
=51220					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c899	20 a8 b2	jsr $b2a8	D2Slash:	jsr underflow_2
.c89c	b5 26		lda $26,x			lda DStack+1,x
.c89e	0a		asl a				asl a
.c89f	76 26		ror $26,x	D2SlashU:	ror DStack+1,x
.c8a1	76 25		ror $25,x			ror DStack+0,x
.c8a3	76 28		ror $28,x			ror DStack+3,x
.c8a5	76 27		ror $27,x			ror DStack+2,x
=14					CL	.var *-(WordListLink+wh_Xt)
=$c8a7					en = *	; remember here
>c897	0e					.byte CL	;wh_CodeLength
.c8a7	60		rts				rts
>c8a8	55 44 32 2f			L1:	.text "UD2/"	;  name of word as a string, ending at wh_NameLastChar
>c8ac	04					.byte *-L1	;wh_NameLength	length of name
>c8ad	14 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8af	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8b0	18					.byte UF+NN	;wh_Flags	dictionary flags
=51244					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8b1	20 a8 b2	jsr $b2a8	DU2Slash:	jsr underflow_2
.c8b4	18		clc				clc
.c8b5	90 e8		bcc $c89f			bcc D2SlashU
=6					CL	.var *-(WordListLink+wh_Xt)
=$c8b7					en = *	; remember here
>c8af	06					.byte CL	;wh_CodeLength
>c8b7	32 2a				L1:	.text "2*"	;  name of word as a string, ending at wh_NameLastChar
>c8b9	02					.byte *-L1	;wh_NameLength	length of name
>c8ba	2c c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8bd	10					.byte UF	;wh_Flags	dictionary flags
=51257					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8be					Two_Star:
.c8be	20 93 b2	jsr $b293			jsr underflow_1
.c8c1	16 25		asl $25,x			asl DStack+0,x
.c8c3	36 26		rol $26,x			rol DStack+1,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$c8c5					en = *	; remember here
>c8bc	07					.byte CL	;wh_CodeLength
.c8c5	60		rts				rts
>c8c6	32 2f				L1:	.text "2/"	;  name of word as a string, ending at wh_NameLastChar
>c8c8	02					.byte *-L1	;wh_NameLength	length of name
>c8c9	39 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8cb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8cc	10					.byte UF	;wh_Flags	dictionary flags
=51272					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8cd					Two_Slash:
.c8cd	20 93 b2	jsr $b293			jsr underflow_1
.c8d0	b5 26		lda $26,x			lda DStack+1,x		; load sign into carry, for signed shift
.c8d2	0a		asl a				asl
.c8d3	76 26		ror $26,x			ror DStack+1,x
.c8d5	76 25		ror $25,x			ror DStack+0,x
=10					CL	.var *-(WordListLink+wh_Xt)
=$c8d7					en = *	; remember here
>c8cb	0a					.byte CL	;wh_CodeLength
.c8d7	60		rts				rts
>c8d8	55 32 2f			L1:	.text "U2/"	;  name of word as a string, ending at wh_NameLastChar
>c8db	03					.byte *-L1	;wh_NameLength	length of name
>c8dc	48 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8df	10					.byte UF	;wh_Flags	dictionary flags
=51291					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8e0					UTwo_Slash:
.c8e0	20 93 b2	jsr $b293			jsr underflow_1
.c8e3	56 26		lsr $26,x			lsr DStack+1,x
.c8e5	76 25		ror $25,x			ror DStack+0,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$c8e7					en = *	; remember here
>c8de	07					.byte CL	;wh_CodeLength
.c8e7	60		rts				rts
>c8e8	44 52 53 68 69 66 74		L1:	.text "DRShift"	;  name of word as a string, ending at wh_NameLastChar
>c8ef	07					.byte *-L1	;wh_NameLength	length of name
>c8f0	5b c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8f2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8f3	00					.byte 0	;wh_Flags	dictionary flags
=51311					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8f4	20 39 b2	jsr $b239	DRShift:	jsr PopA	; pop u
.c8f7	a8		tay		DRShiftA:	tay
.c8f8	f0 0e		beq $c908			beq _9
.c8fa	b5 26		lda $26,x			lda DStack+1,x
.c8fc	4a		lsr a		_2:		lsr a
.c8fd	76 25		ror $25,x			ror DStack+0,x
.c8ff	76 28		ror $28,x			ror DStack+3,x
.c901	76 27		ror $27,x			ror DStack+2,x
.c903	88		dey				dey
.c904	d0 f6		bne $c8fc			bne _2
.c906	95 26		sta $26,x			sta DStack+1,x
.c908					_9:
=20					CL	.var *-(WordListLink+wh_Xt)
=$c908					en = *	; remember here
>c8f2	14					.byte CL	;wh_CodeLength
.c908	60		rts				rts
>c909	52 53 68 69 66 74		L1:	.text "RShift"	;  name of word as a string, ending at wh_NameLastChar
>c90f	06					.byte *-L1	;wh_NameLength	length of name
>c910	6f c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c912	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c913	00					.byte 0	;wh_Flags	dictionary flags
=51343					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c914	20 42 b2	jsr $b242	RShift:		jsr PopA2	; pop u, check for 2 params
.c917	a8		tay		RShift_A:	tay		; get shift count
.c918	f0 0a		beq $c924			beq _done
.c91a	b5 26		lda $26,x			lda DStack+1,x
.c91c	4a		lsr a		_loop:		lsr a
.c91d	76 25		ror $25,x			ror DStack+0,x
.c91f	88		dey				dey
.c920	d0 fa		bne $c91c			bne _loop
.c922	95 26		sta $26,x			sta DStack+1,x
.c924					_done:
=16					CL	.var *-(WordListLink+wh_Xt)
=$c924					en = *	; remember here
>c912	10					.byte CL	;wh_CodeLength
.c924	60		rts				rts
>c925	4c 53 68 69 66 74		L1:	.text "LShift"	;  name of word as a string, ending at wh_NameLastChar
>c92b	06					.byte *-L1	;wh_NameLength	length of name
>c92c	8f c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c92e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c92f	00					.byte 0	;wh_Flags	dictionary flags
=51371					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c930	20 42 b2	jsr $b242	LShift:		jsr PopA2	; pop u, check for 2 params
.c933	a8		tay		LShift_A:	tay		; get shift count
.c934	f0 0a		beq $c940			beq _done
.c936	b5 26		lda $26,x			lda DStack+1,x
.c938	16 25		asl $25,x	_loop:		asl DStack+0,x
.c93a	2a		rol a				rol a
.c93b	88		dey				dey
.c93c	d0 fa		bne $c938			bne _loop
.c93e	95 26		sta $26,x			sta DStack+1,x
.c940					_done:
=16					CL	.var *-(WordListLink+wh_Xt)
=$c940					en = *	; remember here
>c92e	10					.byte CL	;wh_CodeLength
.c940	60		rts				rts
>c941	41 6e 64			L1:	.text "And"	;  name of word as a string, ending at wh_NameLastChar
>c944	03					.byte *-L1	;wh_NameLength	length of name
>c945	ab c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c947	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c948	10					.byte UF	;wh_Flags	dictionary flags
=51396					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c949					And2:
.c949	20 a8 b2	jsr $b2a8			jsr underflow_2
.c94c	b5 25		lda $25,x			lda DStack+0,x
.c94e	35 27		and $27,x			and DStack+2,x
.c950	95 27		sta $27,x			sta DStack+2,x
.c952	b5 26		lda $26,x			lda DStack+1,x
.c954	35 28		and $28,x			and DStack+3,x
.c956	95 28		sta $28,x			sta DStack+3,x
.c958	e8		inx				inx		; Drop n2
.c959	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$c95a					en = *	; remember here
>c947	11					.byte CL	;wh_CodeLength
.c95a	60		rts				rts
>c95b	4f 72				L1:	.text "Or"	;  name of word as a string, ending at wh_NameLastChar
>c95d	02					.byte *-L1	;wh_NameLength	length of name
>c95e	c4 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c960	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c961	10					.byte UF	;wh_Flags	dictionary flags
=51421					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c962					Or:
.c962	20 a8 b2	jsr $b2a8			jsr underflow_2
.c965	b5 25		lda $25,x			lda DStack+0,x
.c967	15 27		ora $27,x			ora DStack+2,x
.c969	95 27		sta $27,x			sta DStack+2,x
.c96b	b5 26		lda $26,x			lda DStack+1,x
.c96d	15 28		ora $28,x			ora DStack+3,x
.c96f	95 28		sta $28,x			sta DStack+3,x
.c971	e8		inx				inx		; Drop n2
.c972	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$c973					en = *	; remember here
>c960	11					.byte CL	;wh_CodeLength
.c973	60		rts				rts
>c974	58 6f 72			L1:	.text "Xor"	;  name of word as a string, ending at wh_NameLastChar
>c977	03					.byte *-L1	;wh_NameLength	length of name
>c978	dd c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c97a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c97b	10					.byte UF	;wh_Flags	dictionary flags
=51447					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c97c					Xor:
.c97c	20 a8 b2	jsr $b2a8			jsr underflow_2
.c97f	b5 25		lda $25,x			lda DStack+0,x
.c981	55 27		eor $27,x			eor DStack+2,x
.c983	95 27		sta $27,x			sta DStack+2,x
.c985	b5 26		lda $26,x			lda DStack+1,x
.c987	55 28		eor $28,x			eor DStack+3,x
.c989	95 28		sta $28,x			sta DStack+3,x
.c98b	e8		inx				inx		; Drop n2
.c98c	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$c98d					en = *	; remember here
>c97a	11					.byte CL	;wh_CodeLength
.c98d	60		rts				rts
>c98e	2b				L1:	.text "+"	;  name of word as a string, ending at wh_NameLastChar
>c98f	01					.byte *-L1	;wh_NameLength	length of name
>c990	f7 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c992	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c993	10					.byte UF	;wh_Flags	dictionary flags
=51471					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c994					Plus:
.c994	20 a8 b2	jsr $b2a8			jsr underflow_2
.c997	18		clc				clc
.c998	b5 25		lda $25,x			lda DStack+0,x		; LSB
.c99a	75 27		adc $27,x			adc DStack+2,x
.c99c	95 27		sta $27,x			sta DStack+2,x
.c99e	b5 26		lda $26,x			lda DStack+1,x		; MSB. No CLC, conserve carry bit
.c9a0	75 28		adc $28,x			adc DStack+3,x
.c9a2	95 28		sta $28,x			sta DStack+3,x
.c9a4	e8		inx				inx
.c9a5	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$c9a6					en = *	; remember here
>c992	12					.byte CL	;wh_CodeLength
.c9a6	60		rts				rts
>c9a7	2d				L1:	.text "-"	;  name of word as a string, ending at wh_NameLastChar
>c9a8	01					.byte *-L1	;wh_NameLength	length of name
>c9a9	0f c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9ac	10					.byte UF	;wh_Flags	dictionary flags
=51496					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9ad					Minus:
.c9ad	20 a8 b2	jsr $b2a8			jsr underflow_2
.c9b0	38		sec				sec
.c9b1	b5 27		lda $27,x			lda DStack+2,x	; LSB
.c9b3	f5 25		sbc $25,x			sbc DStack+0,x
.c9b5	95 27		sta $27,x			sta DStack+2,x
.c9b7	b5 28		lda $28,x			lda DStack+3,x	; MSB
.c9b9	f5 26		sbc $26,x			sbc DStack+1,x
.c9bb	95 28		sta $28,x			sta DStack+3,x
.c9bd	e8		inx				inx		; Drop n2
.c9be	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$c9bf					en = *	; remember here
>c9ab	12					.byte CL	;wh_CodeLength
.c9bf	60		rts				rts
>c9c0	2e				L1:	.text "."	;  name of word as a string, ending at wh_NameLastChar
>c9c1	01					.byte *-L1	;wh_NameLength	length of name
>c9c2	28 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9c4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9c5	08					.byte NN	;wh_Flags	dictionary flags
=51521					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9c6	b5 26		lda $26,x	Dot:		lda DStack+1,x		; ( n )	save sign
.c9c8	08		php				php
.c9c9	20 89 c4	jsr $c489			jsr Abs			; ( u )
.c9cc	20 36 b6	jsr $b636			jsr Zero		; ( ud )	u>d  cvt u to ud
.c9cf	4c df c9	jmp $c9df			jmp fmt_d3
=12					CL	.var *-(WordListLink+wh_Xt)
=$c9d2					en = *	; remember here
>c9c4	0c					.byte CL	;wh_CodeLength
>c9d2	44 2e				L1:	.text "D."	;  name of word as a string, ending at wh_NameLastChar
>c9d4	02					.byte *-L1	;wh_NameLength	length of name
>c9d5	41 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9d7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9d8	08					.byte NN	;wh_Flags	dictionary flags
=51540					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9d9	b5 26		lda $26,x	D_Dot:		lda DStack+1,x		; save sign
.c9db	08		php				php
.c9dc	20 be c4	jsr $c4be			jsr DAbs
.c9df	20 33 aa	jsr $aa33	fmt_d3:		jsr Less_Number_Sign	; ( ud )	start formatting
.c9e2	20 a1 aa	jsr $aaa1			jsr Number_sign_s	; ( ud )	do all digits
.c9e5	28		plp				plp			; ( ud )	do sign
.c9e6	20 bc aa	jsr $aabc			jsr Sign_P		; ( ud )
.c9e9	20 3f aa	jsr $aa3f			jsr Number_sign_greater	; ( addr u )	end formatting
.c9ec	20 d2 cb	jsr $cbd2			jsr Type
.c9ef	4c c5 cb	jmp $cbc5			jmp Space
=25					CL	.var *-(WordListLink+wh_Xt)
=$c9f2					en = *	; remember here
>c9d7	19					.byte CL	;wh_CodeLength
>c9f2	55 2e				L1:	.text "U."	;  name of word as a string, ending at wh_NameLastChar
>c9f4	02					.byte *-L1	;wh_NameLength	length of name
>c9f5	54 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9f8	18					.byte UF+NN	;wh_Flags	dictionary flags
=51572					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9f9	20 93 b2	jsr $b293	U_Dot:		jsr underflow_1
.c9fc	20 13 ca	jsr $ca13			jsr print_u
.c9ff	4c c5 cb	jmp $cbc5			jmp Space
=9					CL	.var *-(WordListLink+wh_Xt)
=$ca02					en = *	; remember here
>c9f7	09					.byte CL	;wh_CodeLength
>ca02	55 44 2e			L1:	.text "UD."	;  name of word as a string, ending at wh_NameLastChar
>ca05	03					.byte *-L1	;wh_NameLength	length of name
>ca06	74 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca08	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca09	18					.byte UF+NN	;wh_Flags	dictionary flags
=51589					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca0a	20 a8 b2	jsr $b2a8	UD_Dot:		jsr underflow_2 ; double number
.ca0d	20 16 ca	jsr $ca16			jsr print_ud
.ca10	4c c5 cb	jmp $cbc5			jmp Space
=9					CL	.var *-(WordListLink+wh_Xt)
=$ca13					en = *	; remember here
>ca08	09					.byte CL	;wh_CodeLength
.ca13					print_u:
.ca13	20 36 b6	jsr $b636			jsr Zero			; convert to ud
.ca16					print_ud:
.ca16	20 33 aa	jsr $aa33			jsr Less_Number_Sign		; <#	start formatting
.ca19	20 a1 aa	jsr $aaa1			jsr Number_sign_s		; #S	do all digits
.ca1c	20 3f aa	jsr $aa3f			jsr Number_sign_greater		; #>	end formatting
.ca1f	4c d2 cb	jmp $cbd2			jmp Type
>ca22	55 2e 52			L1:	.text "U.R"	;  name of word as a string, ending at wh_NameLastChar
>ca25	03					.byte *-L1	;wh_NameLength	length of name
>ca26	85 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca28	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca29	08					.byte NN	;wh_Flags	dictionary flags
=51621					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca2a	20 39 b2	jsr $b239	U_Dot_R:	jsr PopA		; save field width
.ca2d	48		pha		U_Dot_R_A:	pha
.ca2e	20 36 b6	jsr $b636			jsr Zero		; u>d  cvt u to ud
.ca31	4c 41 ca	jmp $ca41			jmp fmt_udr3
=10					CL	.var *-(WordListLink+wh_Xt)
=$ca34					en = *	; remember here
>ca28	0a					.byte CL	;wh_CodeLength
>ca34	55 44 2e 52			L1:	.text "UD.R"	;  name of word as a string, ending at wh_NameLastChar
>ca38	04					.byte *-L1	;wh_NameLength	length of name
>ca39	a5 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca3b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca3c	08					.byte NN	;wh_Flags	dictionary flags
=51640					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca3d	20 39 b2	jsr $b239	UD_Dot_R:	jsr PopA			; save field width
.ca40	48		pha		UD_Dot_R_A:	pha
.ca41	20 33 aa	jsr $aa33	fmt_udr3:	jsr Less_Number_Sign		; start formatted
.ca44	20 a1 aa	jsr $aaa1			jsr Number_sign_s		; do all digits
.ca47	20 3f aa	jsr $aa3f	fmt_r:		jsr Number_sign_greater		; finish formatted
.ca4a	68		pla				pla				; recover field width
.ca4b	38		sec				sec				; do leading spaces
.ca4c	f5 25		sbc $25,x			sbc DStack+0,x
.ca4e	90 06		bcc $ca56			bcc +
.ca50	20 27 b6	jsr $b627			jsr PushZA
.ca53	20 6f c2	jsr $c26f			jsr Spaces
.ca56	4c d2 cb	jmp $cbd2	+		jmp Type			; type formatted
=28					CL	.var *-(WordListLink+wh_Xt)
=$ca59					en = *	; remember here
>ca3b	1c					.byte CL	;wh_CodeLength
>ca59	2e 52				L1:	.text ".R"	;  name of word as a string, ending at wh_NameLastChar
>ca5b	02					.byte *-L1	;wh_NameLength	length of name
>ca5c	b8 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca5e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca5f	08					.byte NN	;wh_Flags	dictionary flags
=51675					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca60	20 39 b2	jsr $b239	Dot_R:		jsr PopA		; save field width
.ca63	48		pha		Dot_R_A:	pha
.ca64	b5 26		lda $26,x			lda DStack+1,x		; save sign
.ca66	08		php				php
.ca67	20 89 c4	jsr $c489			jsr Abs
.ca6a	20 36 b6	jsr $b636			jsr Zero		; u>d  cvt u to ud
.ca6d	4c 82 ca	jmp $ca82			jmp fmt_dr3
=16					CL	.var *-(WordListLink+wh_Xt)
=$ca70					en = *	; remember here
>ca5e	10					.byte CL	;wh_CodeLength
>ca70	44 2e 52			L1:	.text "D.R"	;  name of word as a string, ending at wh_NameLastChar
>ca73	03					.byte *-L1	;wh_NameLength	length of name
>ca74	db c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca76	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca77	08					.byte NN	;wh_Flags	dictionary flags
=51699					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca78	20 39 b2	jsr $b239	D_Dot_R:	jsr PopA		; save field width
.ca7b	48		pha		D_Dot_R_A:	pha
.ca7c	b5 26		lda $26,x			lda DStack+1,x		; save sign
.ca7e	08		php				php
.ca7f	20 be c4	jsr $c4be			jsr DAbs
.ca82	20 33 aa	jsr $aa33	fmt_dr3:	jsr Less_Number_Sign	; start formatted output
.ca85	20 a1 aa	jsr $aaa1			jsr Number_sign_s	; do all digits
.ca88	28		plp				plp			; do the sign
.ca89	20 bc aa	jsr $aabc			jsr Sign_P
.ca8c	4c 47 ca	jmp $ca47			jmp fmt_r
=23					CL	.var *-(WordListLink+wh_Xt)
=$ca8f					en = *	; remember here
>ca76	17					.byte CL	;wh_CodeLength
>ca8f	3f				L1:	.text "?"	;  name of word as a string, ending at wh_NameLastChar
>ca90	01					.byte *-L1	;wh_NameLength	length of name
>ca91	f3 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca93	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca94	08					.byte NN	;wh_Flags	dictionary flags
=51728					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca95					Question:
.ca95	20 b4 cc	jsr $ccb4			jsr Fetch
.ca98	4c c6 c9	jmp $c9c6			jmp Dot
=6					CL	.var *-(WordListLink+wh_Xt)
=$ca9b					en = *	; remember here
>ca93	06					.byte CL	;wh_CodeLength
>ca9b	32 44 75 70			L1:	.text "2Dup"	;  name of word as a string, ending at wh_NameLastChar
>ca9f	04					.byte *-L1	;wh_NameLength	length of name
>caa0	10 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>caa2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>caa3	10					.byte UF	;wh_Flags	dictionary flags
=51743					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.caa4					Two_Dup:
.caa4	20 a8 b2	jsr $b2a8			jsr underflow_2
.caa7	ca		dex				dex
.caa8	ca		dex				dex
.caa9	ca		dex				dex
.caaa	ca		dex				dex
.caab	b5 29		lda $29,x			lda DStack+4,x	; TOS
.caad	95 25		sta $25,x			sta DStack+0,x
.caaf	b5 2a		lda $2a,x			lda DStack+5,x
.cab1	95 26		sta $26,x			sta DStack+1,x
.cab3	b5 2b		lda $2b,x			lda DStack+6,x	; NOS
.cab5	95 27		sta $27,x			sta DStack+2,x
.cab7	b5 2c		lda $2c,x			lda DStack+7,x
.cab9	95 28		sta $28,x			sta DStack+3,x
=23					CL	.var *-(WordListLink+wh_Xt)
=$cabb					en = *	; remember here
>caa2	17					.byte CL	;wh_CodeLength
.cabb	60		rts				rts
>cabc	54 75 63 6b			L1:	.text "Tuck"	;  name of word as a string, ending at wh_NameLastChar
>cac0	04					.byte *-L1	;wh_NameLength	length of name
>cac1	1f ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cac3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cac4	10					.byte UF	;wh_Flags	dictionary flags
=51776					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cac5					Tuck:
.cac5	20 a8 b2	jsr $b2a8			jsr underflow_2
.cac8	ca		dex				dex
.cac9	ca		dex				dex
.caca	b4 29		ldy $29,x			ldy DStack+4,x	; LSB
.cacc	b5 27		lda $27,x			lda DStack+2,x
.cace	95 29		sta $29,x			sta DStack+4,x
.cad0	94 27		sty $27,x			sty DStack+2,x
.cad2	95 25		sta $25,x			sta DStack+0,x
.cad4	b4 2a		ldy $2a,x			ldy DStack+5,x	; MSB
.cad6	b5 28		lda $28,x			lda DStack+3,x
.cad8	95 2a		sta $2a,x			sta DStack+5,x
.cada	94 28		sty $28,x			sty DStack+3,x
.cadc	95 26		sta $26,x			sta DStack+1,x
=25					CL	.var *-(WordListLink+wh_Xt)
=$cade					en = *	; remember here
>cac3	19					.byte CL	;wh_CodeLength
.cade	60		rts				rts
>cadf	43 2c				L1:	.text "C,"	;  name of word as a string, ending at wh_NameLastChar
>cae1	02					.byte *-L1	;wh_NameLength	length of name
>cae2	40 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cae4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cae5	08					.byte NN	;wh_Flags	dictionary flags
=51809					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cae6	20 39 b2	jsr $b239	C_Comma:	jsr PopA	; pop c, with underflow check
.cae9					C_Comma_A:
.cae9	ca		dex				dex
.caea	94 25		sty $25,x			sty DStack+0,x	; save Y
.caec	a0 00		ldy #$00			ldy #0		; store A
.caee	91 00		sta ($00),y			sta (cp),y
.caf0	e6 00		inc $00				inc cp+0	; increment cp
.caf2	d0 02		bne $caf6			bne +
.caf4	e6 01		inc $01				inc cp+1
.caf6					+
.caf6	b4 25		ldy $25,x			ldy DStack+0,x	; restore Y
.caf8	e8		inx				inx
=19					CL	.var *-(WordListLink+wh_Xt)
=$caf9					en = *	; remember here
>cae4	13					.byte CL	;wh_CodeLength
.caf9	60		rts				rts
>cafa	2c				L1:	.text ","	;  name of word as a string, ending at wh_NameLastChar
>cafb	01					.byte *-L1	;wh_NameLength	length of name
>cafc	61 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cafe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>caff	08					.byte NN	;wh_Flags	dictionary flags
=51835					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb00	20 55 b2	jsr $b255	Comma:		jsr PopYA	; pop n, with underflow check
.cb03					Comma_YA:
.cb03	20 e9 ca	jsr $cae9			jsr C_Comma_A	; compile LSB
.cb06	98		tya				tya		; compile MSB
.cb07	4c e9 ca	jmp $cae9			jmp C_Comma_A
=10					CL	.var *-(WordListLink+wh_Xt)
=$cb0a					en = *	; remember here
>cafe	0a					.byte CL	;wh_CodeLength
>cb0a	32 2c				L1:	.text "2,"	;  name of word as a string, ending at wh_NameLastChar
>cb0c	02					.byte *-L1	;wh_NameLength	length of name
>cb0d	7b ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb0f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb10	08					.byte NN	;wh_Flags	dictionary flags
=51852					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb11	20 00 cb	jsr $cb00	Two_Comma:	jsr Comma
.cb14	4c 00 cb	jmp $cb00			jmp Comma
=6					CL	.var *-(WordListLink+wh_Xt)
=$cb17					en = *	; remember here
>cb0f	06					.byte CL	;wh_CodeLength
.cb17	a9 e8		lda #$e8	Drop_Comma:	lda #$e8	;inx
.cb19	a8		tay				tay
.cb1a	d0 e7		bne $cb03			bne Comma_YA
>cb1c	4a 73 72 2c			L1:	.text "Jsr,"	;  name of word as a string, ending at wh_NameLastChar
>cb20	04					.byte *-L1	;wh_NameLength	length of name
>cb21	8c ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb23	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb24	08					.byte NN	;wh_Flags	dictionary flags
=51872					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb25	20 55 b2	jsr $b255	Jsr_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cb28	20 e5 b5	jsr $b5e5	Jsr_Comma_YA:	jsr PushYA	; push addr
.cb2b	a9 20		lda #$20			lda #$20	; JSR abs opcode
.cb2d	20 e9 ca	jsr $cae9	Jsr_Comma_3:	jsr C_Comma_A
.cb30	4c 00 cb	jmp $cb00			jmp Comma	; compile addr
=14					CL	.var *-(WordListLink+wh_Xt)
=$cb33					en = *	; remember here
>cb23	0e					.byte CL	;wh_CodeLength
>cb33	4a 6d 70 2c			L1:	.text "Jmp,"	;  name of word as a string, ending at wh_NameLastChar
>cb37	04					.byte *-L1	;wh_NameLength	length of name
>cb38	a0 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb3a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb3b	08					.byte NN	;wh_Flags	dictionary flags
=51895					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb3c	20 55 b2	jsr $b255	Jmp_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cb3f	20 e5 b5	jsr $b5e5	Jmp_Comma_YA:	jsr PushYA	; push addr
.cb42	a9 4c		lda #$4c			lda #$4c	; JMP abs opcode
.cb44	d0 e7		bne $cb2d			bne Jsr_Comma_3
=10					CL	.var *-(WordListLink+wh_Xt)
=$cb46					en = *	; remember here
>cb3a	0a					.byte CL	;wh_CodeLength
>cb46	43 40				L1:	.text "C@"	;  name of word as a string, ending at wh_NameLastChar
>cb48	02					.byte *-L1	;wh_NameLength	length of name
>cb49	b7 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb4b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb4c	10					.byte UF	;wh_Flags	dictionary flags
=51912					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb4d	20 93 b2	jsr $b293	C_Fetch:	jsr underflow_1
.cb50	a1 25		lda ($25,x)			lda (DStack+0,x)
.cb52	95 25		sta $25,x			sta DStack+0,x
.cb54	a9 00		lda #$00			lda #0
.cb56	95 26		sta $26,x			sta DStack+1,x	; zero MSB
=11					CL	.var *-(WordListLink+wh_Xt)
=$cb58					en = *	; remember here
>cb4b	0b					.byte CL	;wh_CodeLength
.cb58	60		rts				rts
>cb59	43 21				L1:	.text "C!"	;  name of word as a string, ending at wh_NameLastChar
>cb5b	02					.byte *-L1	;wh_NameLength	length of name
>cb5c	c8 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb5e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb5f	10					.byte UF	;wh_Flags	dictionary flags
=51931					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb60	20 a8 b2	jsr $b2a8	C_Store:	jsr underflow_2
.cb63	b5 27		lda $27,x			lda DStack+2,x
.cb65	81 25		sta ($25,x)			sta (DStack+0,x)
.cb67	e8		inx				inx
.cb68	e8		inx				inx
.cb69	e8		inx				inx
.cb6a	e8		inx				inx
=11					CL	.var *-(WordListLink+wh_Xt)
=$cb6b					en = *	; remember here
>cb5e	0b					.byte CL	;wh_CodeLength
.cb6b	60		rts				rts
>cb6c	31 2b 21			L1:	.text "1+!"	;  name of word as a string, ending at wh_NameLastChar
>cb6f	03					.byte *-L1	;wh_NameLength	length of name
>cb70	db ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb72	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb73	08					.byte NN	;wh_Flags	dictionary flags
=51951					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb74					OnePlusStore:
.cb74	a1 25		lda ($25,x)			lda (DStack+0,x)
.cb76	18		clc				clc
.cb77	69 01		adc #$01			adc #1
.cb79	81 25		sta ($25,x)			sta (DStack+0,x)
.cb7b	90 0c		bcc $cb89			bcc _7
.cb7d	e6 25		inc $25				inc DStack+0
.cb7f	d0 02		bne $cb83			bne +
.cb81	e6 26		inc $26				inc DStack+1
.cb83					+
.cb83	a1 25		lda ($25,x)			lda (DStack+0,x)
.cb85	69 00		adc #$00			adc #0
.cb87	81 25		sta ($25,x)			sta (Dstack+0,x)
.cb89					_7:
.cb89	e8		inx				inx
.cb8a	e8		inx				inx
=23					CL	.var *-(WordListLink+wh_Xt)
=$cb8b					en = *	; remember here
>cb72	17					.byte CL	;wh_CodeLength
.cb8b	60		rts				rts
>cb8c	2b 21				L1:	.text "+!"	;  name of word as a string, ending at wh_NameLastChar
>cb8e	02					.byte *-L1	;wh_NameLength	length of name
>cb8f	ef ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb91	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb92	10					.byte UF	;wh_Flags	dictionary flags
=51982					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb93					Plus_store:
.cb93	20 a8 b2	jsr $b2a8			jsr underflow_2
.cb96	20 60 b2	jsr $b260			jsr PopTmp1	; pop addr to tmp1
.cb99	a0 00		ldy #$00			ldy #0		; LSB
.cb9b	b1 15		lda ($15),y			lda (tmp1),y
.cb9d	18		clc				clc
.cb9e	75 25		adc $25,x			adc DStack+0,x
.cba0	91 15		sta ($15),y			sta (tmp1),y
.cba2	c8		iny				iny		; MSB
.cba3	b1 15		lda ($15),y			lda (tmp1),y
.cba5	75 26		adc $26,x			adc DStack+1,x
.cba7	91 15		sta ($15),y			sta (tmp1),y
.cba9	e8		inx				inx
.cbaa	e8		inx				inx
=24					CL	.var *-(WordListLink+wh_Xt)
=$cbab					en = *	; remember here
>cb91	18					.byte CL	;wh_CodeLength
.cbab	60		rts				rts
>cbac	45 6d 69 74			L1:	.text "Emit"	;  name of word as a string, ending at wh_NameLastChar
>cbb0	04					.byte *-L1	;wh_NameLength	length of name
>cbb1	0e cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbb3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbb4	08					.byte NN	;wh_Flags	dictionary flags
=52016					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbb5	20 39 b2	jsr $b239	Emit:		jsr PopA		; pop char, with underflow check
.cbb8					Emit_A:
.cbb8	6c 06 03	jmp ($0306)			jmp (output)		; JSR/RTS
=6					CL	.var *-(WordListLink+wh_Xt)
=$cbbb					en = *	; remember here
>cbb3	06					.byte CL	;wh_CodeLength
>cbbb	53 70 61 63 65			L1:	.text "Space"	;  name of word as a string, ending at wh_NameLastChar
>cbc0	05					.byte *-L1	;wh_NameLength	length of name
>cbc1	30 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbc3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbc4	08					.byte NN	;wh_Flags	dictionary flags
=52032					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbc5	a9 20		lda #$20	Space:		lda #AscSP
.cbc7	d0 ef		bne $cbb8			bne Emit_A
=4					CL	.var *-(WordListLink+wh_Xt)
=$cbc9					en = *	; remember here
>cbc3	04					.byte CL	;wh_CodeLength
>cbc9	54 79 70 65			L1:	.text "Type"	;  name of word as a string, ending at wh_NameLastChar
>cbcd	04					.byte *-L1	;wh_NameLength	length of name
>cbce	40 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbd0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbd1	18					.byte UF+NN	;wh_Flags	dictionary flags
=52045					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbd2					Type:
.cbd2	20 a8 b2	jsr $b2a8			jsr underflow_2
.cbd5	4c e2 cb	jmp $cbe2			jmp _test
.cbd8					_loop:
.cbd8	d6 25		dec $25,x			dec DStack+0,x		; finish length decrement
.cbda	a1 27		lda ($27,x)			lda (DStack+2,x)	; Send the current character
.cbdc	20 b8 cb	jsr $cbb8			jsr Emit_A
.cbdf	20 56 c8	jsr $c856			jsr NOS_One_Plus	; increment address
.cbe2	b5 25		lda $25,x	_test:		lda DStack+0,x		; decrement length & test for <0
.cbe4	d0 f2		bne $cbd8			bne _loop
.cbe6	d6 26		dec $26,x			dec DStack+1,x
.cbe8	10 ee		bpl $cbd8			bpl _loop
.cbea	4c 17 c3	jmp $c317			jmp Two_drop
=27					CL	.var *-(WordListLink+wh_Xt)
=$cbed					en = *	; remember here
>cbd0	1b					.byte CL	;wh_CodeLength
.cbed					Print_ASCIIZ_YA:
.cbed	20 f3 cb	jsr $cbf3			jsr Print_ASCIIZ_YA_no_lf
.cbf0	4c ce a9	jmp $a9ce	                jmp CR
.cbf3					Print_ASCIIZ_YA_no_lf:
.cbf3	85 19		sta $19				sta tmp3+0		; save string address
.cbf5	84 1a		sty $1a				sty tmp3+1
.cbf7	a0 00		ldy #$00			ldy #0
.cbf9					Print_ASCIIZ_tmp3_no_lf:
.cbf9	b1 19		lda ($19),y			lda (tmp3),y
.cbfb	f0 06		beq $cc03			beq _done		; end of string?
.cbfd	20 b8 cb	jsr $cbb8			jsr emit_a
.cc00	c8		iny				iny
.cc01	d0 f6		bne $cbf9			bne Print_ASCIIZ_tmp3_no_lf
.cc03					_done:
.cc03	60		rts				rts
>cc04	45 78 65 63 75 74 65		L1:	.text "Execute"	;  name of word as a string, ending at wh_NameLastChar
>cc0b	07					.byte *-L1	;wh_NameLength	length of name
>cc0c	4d cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc0e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc0f	08					.byte NN	;wh_Flags	dictionary flags
=52107					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc10					Execute:
.cc10	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.cc12	b0 2f		bcs $cc43		bcs Throw_Underflow_03
.cc14	b5 26		lda $26,x			lda DStack+1,x	; addr for RTI
.cc16	48		pha				pha
.cc17	b5 25		lda $25,x			lda DStack+0,x
.cc19	48		pha				pha
.cc1a	e8		inx				inx		; drop addr
.cc1b	e8		inx				inx
.cc1c	08		php				php		; flags for RTI
.cc1d	40		rti				rti
=14					CL	.var *-(WordListLink+wh_Xt)
=$cc1e					en = *	; remember here
>cc0e	0e					.byte CL	;wh_CodeLength
>cc1e	32 52 6f 74			L1:	.text "2Rot"	;  name of word as a string, ending at wh_NameLastChar
>cc22	04					.byte *-L1	;wh_NameLength	length of name
>cc23	8b cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc25	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc26	08					.byte NN	;wh_Flags	dictionary flags
=52130					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc27					TwoRot:
.cc27	e0 1d		cpx #$1d		cpx #-2*6+DStack0+1
.cc29	b0 18		bcs $cc43		bcs Throw_Underflow_03
.cc2b	86 15		stx $15				stx tmp1+0
.cc2d	e8		inx				inx		; do 4 times
.cc2e	e8		inx				inx
.cc2f	e8		inx				inx
.cc30	e8		inx				inx
.cc31	ca		dex		-		dex
.cc32	b4 2d		ldy $2d,x			ldy DStack+8,x	; do a byte
.cc34	b5 29		lda $29,x			lda DStack+4,x
.cc36	95 2d		sta $2d,x			sta DStack+8,x
.cc38	b5 25		lda $25,x			lda DStack+0,x
.cc3a	95 29		sta $29,x			sta DStack+4,x
.cc3c	94 25		sty $25,x			sty DStack+0,x
.cc3e	e4 15		cpx $15				cpx tmp1+0
.cc40	d0 ef		bne $cc31			bne -
=27					CL	.var *-(WordListLink+wh_Xt)
=$cc42					en = *	; remember here
>cc25	1b					.byte CL	;wh_CodeLength
.cc42	60		rts				rts
.cc43	4c 7f b2	jmp $b27f	Throw_Underflow_03: jmp Throw_Underflow
>cc46	52 6f 74			L1:	.text "Rot"	;  name of word as a string, ending at wh_NameLastChar
>cc49	03					.byte *-L1	;wh_NameLength	length of name
>cc4a	a2 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc4c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc4d	08					.byte NN	;wh_Flags	dictionary flags
=52169					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc4e					Rot:
.cc4e	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.cc50	b0 f1		bcs $cc43		bcs Throw_Underflow_03
.cc52	b4 2a		ldy $2a,x			ldy DStack+5,x	; do MSB
.cc54	b5 28		lda $28,x			lda DStack+3,x
.cc56	95 2a		sta $2a,x			sta DStack+5,x
.cc58	b5 26		lda $26,x			lda DStack+1,x
.cc5a	95 28		sta $28,x			sta DStack+3,x
.cc5c	94 26		sty $26,x			sty DStack+1,x
.cc5e	b4 29		ldy $29,x			ldy DStack+4,x	; do LSB
.cc60	b5 27		lda $27,x			lda DStack+2,x
.cc62	95 29		sta $29,x			sta DStack+4,x
.cc64	b5 25		lda $25,x			lda DStack+0,x
.cc66	95 27		sta $27,x			sta DStack+2,x
.cc68	94 25		sty $25,x			sty DStack+0,x
=28					CL	.var *-(WordListLink+wh_Xt)
=$cc6a					en = *	; remember here
>cc4c	1c					.byte CL	;wh_CodeLength
.cc6a	60		rts				rts
>cc6b	2d 52 6f 74			L1:	.text "-Rot"	;  name of word as a string, ending at wh_NameLastChar
>cc6f	04					.byte *-L1	;wh_NameLength	length of name
>cc70	c9 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc72	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc73	08					.byte NN	;wh_Flags	dictionary flags
=52207					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc74					Not_Rot:
.cc74	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.cc76	b0 cb		bcs $cc43		bcs Throw_Underflow_03
.cc78	b4 26		ldy $26,x			ldy DStack+1,x	; do MSB
.cc7a	b5 28		lda $28,x			lda DStack+3,x
.cc7c	95 26		sta $26,x			sta DStack+1,x
.cc7e	b5 2a		lda $2a,x			lda DStack+5,x
.cc80	95 28		sta $28,x			sta DStack+3,x
.cc82	94 2a		sty $2a,x			sty DStack+5,x
.cc84	b4 25		ldy $25,x			ldy DStack+0,x	; do LSB
.cc86	b5 27		lda $27,x			lda DStack+2,x
.cc88	95 25		sta $25,x			sta DStack+0,x
.cc8a	b5 29		lda $29,x			lda DStack+4,x
.cc8c	95 27		sta $27,x			sta DStack+2,x
.cc8e	94 29		sty $29,x			sty DStack+4,x
=28					CL	.var *-(WordListLink+wh_Xt)
=$cc90					en = *	; remember here
>cc72	1c					.byte CL	;wh_CodeLength
.cc90	60		rts				rts
>cc91	21				L1:	.text "!"	;  name of word as a string, ending at wh_NameLastChar
>cc92	01					.byte *-L1	;wh_NameLength	length of name
>cc93	ef cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc95	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc96	08					.byte NN	;wh_Flags	dictionary flags
=52242					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc97					Store:
.cc97	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.cc99	b0 a8		bcs $cc43		bcs Throw_Underflow_03
.cc9b	b5 27		lda $27,x			lda DStack+2,x	; LSB
.cc9d	81 25		sta ($25,x)			sta (DStack+0,x)
.cc9f	f6 25		inc $25,x			inc DStack+0,x
.cca1	d0 02		bne $cca5			bne +
.cca3	f6 26		inc $26,x			inc DStack+1,x
.cca5					+
.cca5	b5 28		lda $28,x			lda DStack+3,x	; MSB
.cca7	81 25		sta ($25,x)			sta (DStack+0,x)
.cca9	e8		inx				inx		; 2Drop
.ccaa	e8		inx				inx
.ccab	e8		inx				inx
.ccac	e8		inx				inx
=22					CL	.var *-(WordListLink+wh_Xt)
=$ccad					en = *	; remember here
>cc95	16					.byte CL	;wh_CodeLength
.ccad	60		rts				rts
>ccae	40				L1:	.text "@"	;  name of word as a string, ending at wh_NameLastChar
>ccaf	01					.byte *-L1	;wh_NameLength	length of name
>ccb0	12 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccb2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccb3	08					.byte NN	;wh_Flags	dictionary flags
=52271					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccb4					Fetch:
.ccb4	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.ccb6	b0 8b		bcs $cc43		bcs Throw_Underflow_03
.ccb8	a1 25		lda ($25,x)			lda (DStack+0,x)		; LSB
.ccba	a8		tay				tay
.ccbb	f6 25		inc $25,x			inc DStack+0,x
.ccbd	d0 02		bne $ccc1			bne +
.ccbf	f6 26		inc $26,x			inc DStack+1,x
.ccc1					+
.ccc1	a1 25		lda ($25,x)			lda (DStack+0,x)		; MSB
.ccc3	95 26		sta $26,x			sta DStack+1,x
.ccc5	94 25		sty $25,x			sty DStack+0,x
=19					CL	.var *-(WordListLink+wh_Xt)
=$ccc7					en = *	; remember here
>ccb2	13					.byte CL	;wh_CodeLength
.ccc7	60		rts				rts
>ccc8	3e 52				L1:	.text ">R"	;  name of word as a string, ending at wh_NameLastChar
>ccca	02					.byte *-L1	;wh_NameLength	length of name
>cccb	2f cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cccd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccce	41					.byte CO+R6	;wh_Flags	dictionary flags
=52298					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cccf					To_R:
.cccf	68		pla				pla		; move the return address out of the way
.ccd0	85 1d		sta $1d				sta tmp5+0
.ccd2	68		pla				pla
.ccd3	85 1e		sta $1e				sta tmp5+1
.ccd5	20 93 b2	jsr $b293			jsr underflow_1
.ccd8	b5 26		lda $26,x			lda DStack+1,x	; MSB
.ccda	48		pha				pha
.ccdb	b5 25		lda $25,x			lda DStack+0,x	; LSB
.ccdd	48		pha				pha
.ccde	e8		inx				inx
.ccdf	e8		inx				inx
.cce0	a5 1e		lda $1e				lda tmp5+1	; move the return address back in
.cce2	48		pha				pha
.cce3	a5 1d		lda $1d				lda tmp5+0
.cce5	48		pha				pha
=23					CL	.var *-(WordListLink+wh_Xt)
=$cce6					en = *	; remember here
>cccd	17					.byte CL	;wh_CodeLength
.cce6	60		rts				rts
>cce7	52 3e				L1:	.text "R>"	;  name of word as a string, ending at wh_NameLastChar
>cce9	02					.byte *-L1	;wh_NameLength	length of name
>ccea	4a cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cced	41					.byte CO+R6	;wh_Flags	dictionary flags
=52329					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccee					R_From:
.ccee	68		pla				pla		; Move the RTS addr out of the way
.ccef	85 1d		sta $1d				sta tmp5+0
.ccf1	68		pla				pla
.ccf2	85 1e		sta $1e				sta tmp5+1
.ccf4	ca		dex				dex		; move n
.ccf5	ca		dex				dex
.ccf6	68		pla				pla		; LSB
.ccf7	95 25		sta $25,x			sta DStack+0,x
.ccf9	68		pla				pla		; MSB
.ccfa	95 26		sta $26,x			sta DStack+1,x
.ccfc	a5 1e		lda $1e				lda tmp5+1	; Restore the RTS addr
.ccfe	48		pha				pha
.ccff	a5 1d		lda $1d				lda tmp5+0
.cd01	48		pha				pha
=20					CL	.var *-(WordListLink+wh_Xt)
=$cd02					en = *	; remember here
>ccec	14					.byte CL	;wh_CodeLength
.cd02	60		rts				rts
>cd03	52 40				L1:	.text "R@"	;  name of word as a string, ending at wh_NameLastChar
>cd05	02					.byte *-L1	;wh_NameLength	length of name
>cd06	69 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd08	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd09	09					.byte NN+CO	;wh_Flags	dictionary flags
=52357					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd0a					R_Fetch:
.cd0a	86 15		stx $15				stx tmp1	; save data stack index
.cd0c	ba		tsx				tsx		; X= return stack index
.cd0d	bd 03 01	lda $0103,x			lda RStack+3,x
.cd10	bc 04 01	ldy $0104,x			ldy RStack+4,x
.cd13	a6 15		ldx $15				ldx tmp1	; restore data stack index
.cd15	4c e5 b5	jmp $b5e5			jmp PushYA
=14					CL	.var *-(WordListLink+wh_Xt)
=$cd18					en = *	; remember here
>cd08	0e					.byte CL	;wh_CodeLength
>cd18	4f 76 65 72			L1:	.text "Over"	;  name of word as a string, ending at wh_NameLastChar
>cd1c	04					.byte *-L1	;wh_NameLength	length of name
>cd1d	85 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd1f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd20	10					.byte UF	;wh_Flags	dictionary flags
=52380					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd21					Over:
.cd21	20 a8 b2	jsr $b2a8			jsr underflow_2
.cd24	b5 27		lda $27,x			lda DStack+2,x	; LSB
.cd26	b4 28		ldy $28,x			ldy DStack+3,x	; MSB
.cd28	ca		dex				dex		; PushYA
.cd29	ca		dex				dex
.cd2a	95 25		sta $25,x			sta DStack+0,x
.cd2c	94 26		sty $26,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$cd2e					en = *	; remember here
>cd1f	0d					.byte CL	;wh_CodeLength
.cd2e	60		rts				rts
>cd2f	3f 44 75 70			L1:	.text "?Dup"	;  name of word as a string, ending at wh_NameLastChar
>cd33	04					.byte *-L1	;wh_NameLength	length of name
>cd34	9c cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd36	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd37	18					.byte UF+NN	;wh_Flags	dictionary flags
=52403					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd38					Question_Dup:
.cd38	20 93 b2	jsr $b293			jsr underflow_1
.cd3b	b5 25		lda $25,x			lda DStack+0,x	; Check if TOS is zero
.cd3d	15 26		ora $26,x			ora DStack+1,x
.cd3f	d0 0c		bne $cd4d			bne Dup_NoUf
=9					CL	.var *-(WordListLink+wh_Xt)
=$cd41					en = *	; remember here
>cd36	09					.byte CL	;wh_CodeLength
.cd41	60		rts				rts
>cd42	44 75 70			L1:	.text "Dup"	;  name of word as a string, ending at wh_NameLastChar
>cd45	03					.byte *-L1	;wh_NameLength	length of name
>cd46	b3 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd48	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd49	10					.byte UF	;wh_Flags	dictionary flags
=52421					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd4a					Dup:
.cd4a	20 93 b2	jsr $b293			jsr underflow_1
.cd4d	b5 25		lda $25,x	Dup_NoUf:	lda DStack+0,x	; LSB
.cd4f	b4 26		ldy $26,x			ldy DStack+1,x	; MSB
.cd51	ca		dex				dex
.cd52	ca		dex				dex
.cd53	95 25		sta $25,x			sta DStack+0,x
.cd55	94 26		sty $26,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$cd57					en = *	; remember here
>cd48	0d					.byte CL	;wh_CodeLength
.cd57	60		rts				rts
.cd58					PushAY:
.cd58	ca		dex				dex
.cd59	ca		dex				dex
.cd5a	94 25		sty $25,x			sty DStack+0,x
.cd5c	95 26		sta $26,x			sta DStack+1,x
.cd5e	60		rts				rts
>cd5f	53 77 61 70			L1:	.text "Swap"	;  name of word as a string, ending at wh_NameLastChar
>cd63	04					.byte *-L1	;wh_NameLength	length of name
>cd64	c5 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd66	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd67	10					.byte UF	;wh_Flags	dictionary flags
=52451					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd68					Swap:
.cd68	20 a8 b2	jsr $b2a8			jsr underflow_2
.cd6b	b5 25		lda $25,x			lda DStack+0,x	; do LSB
.cd6d	b4 27		ldy $27,x			ldy DStack+2,x
.cd6f	95 27		sta $27,x			sta DStack+2,x
.cd71	94 25		sty $25,x			sty DStack+0,x
.cd73	b5 26		lda $26,x			lda DStack+1,x	; do MSB
.cd75	b4 28		ldy $28,x			ldy DStack+3,x
.cd77	95 28		sta $28,x			sta DStack+3,x
.cd79	94 26		sty $26,x			sty DStack+1,x
=19					CL	.var *-(WordListLink+wh_Xt)
=$cd7b					en = *	; remember here
>cd66	13					.byte CL	;wh_CodeLength
.cd7b	60		rts				rts
>cd7c	44 72 6f 70			L1:	.text "Drop"	;  name of word as a string, ending at wh_NameLastChar
>cd80	04					.byte *-L1	;wh_NameLength	length of name
>cd81	e3 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd83	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd84	10					.byte UF	;wh_Flags	dictionary flags
=52480					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd85					Drop:
.cd85	20 93 b2	jsr $b293			jsr underflow_1
.cd88	e8		inx				inx
.cd89	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$cd8a					en = *	; remember here
>cd83	05					.byte CL	;wh_CodeLength
.cd8a	60		rts				rts
=52480					forth_dictionary_start = WordListLink ; END of FORTH-WORDLIST
=0					WordListLink .var 0
>cd8b	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
>cd90	05					.byte *-L1	;wh_NameLength	length of name
>cd91	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd93	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd94	08					.byte NN	;wh_Flags	dictionary flags
=52496					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd95	4c 1b a9	jmp $a91b			jmp Words
=3					CL	.var *-(WordListLink+wh_Xt)
=$cd98					en = *	; remember here
>cd93	03					.byte CL	;wh_CodeLength
>cd98	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>cda0	72 64 6c 69 73 74
>cda6	0e					.byte *-L1	;wh_NameLength	length of name
>cda7	10 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cda9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdaa	08					.byte NN	;wh_Flags	dictionary flags
=52518					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdab	4c 93 9e	jmp $9e93			jmp Forth_WordList
=3					CL	.var *-(WordListLink+wh_Xt)
=$cdae					en = *	; remember here
>cda9	03					.byte CL	;wh_CodeLength
>cdae	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
>cdb3	05					.byte *-L1	;wh_NameLength	length of name
>cdb4	26 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cdb6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdb7	08					.byte NN	;wh_Flags	dictionary flags
=52531					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdb8	4c 8c 9f	jmp $9f8c			jmp Forth
=3					CL	.var *-(WordListLink+wh_Xt)
=$cdbb					en = *	; remember here
>cdb6	03					.byte CL	;wh_CodeLength
>cdbb	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>cdc3	72
>cdc4	09					.byte *-L1	;wh_NameLength	length of name
>cdc5	33 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cdc7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdc8	08					.byte NN	;wh_Flags	dictionary flags
=52548					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdc9	4c 52 a0	jmp $a052			jmp Set_Order
=3					CL	.var *-(WordListLink+wh_Xt)
=$cdcc					en = *	; remember here
>cdc7	03					.byte CL	;wh_CodeLength
=52548					root_dictionary_start = WordListLink ; END of ROOT-WORDLIST
.cdcc					assembler:
=0					WordListLink .var 0
.cdcc					asm_r:
.cdcc	68		pla			pla		; pop RTS addr
.cdcd	a8		tay			tay
.cdce	68		pla			pla
.cdcf	20 0e ce	jsr $ce0e		jsr asm_op	; compile opcode
.cdd2	b5 26		lda $26,x		lda DStack+1,x	; check range
.cdd4	f0 09		beq $cddf		beq _plus
.cdd6	c9 ff		cmp #$ff		cmp #$ff
.cdd8	f0 0b		beq $cde5		beq _minus
.cdda	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cddc	4c c4 b2	jmp $b2c4		jmp ThrowA
.cddf	b5 25		lda $25,x	_plus:	lda DStack+0,x
.cde1	30 f7		bmi $cdda		bmi _err
.cde3	10 04		bpl $cde9		bpl _store
.cde5	b5 25		lda $25,x	_minus:	lda DStack+0,x
.cde7	10 f1		bpl $cdda		bpl _err
.cde9	4c e6 ca	jmp $cae6	_store:	jmp C_Comma
.cdec					asm_1:
.cdec	68		pla			pla		; pop RTS addr
.cded	a8		tay			tay
.cdee	68		pla			pla
.cdef	20 0e ce	jsr $ce0e		jsr asm_op	; compile opcode
.cdf2	b5 26		lda $26,x		lda DStack+1,x	; compile operand
.cdf4	f0 04		beq $cdfa		beq _store	;   unsigned byte?
.cdf6	c9 ff		cmp #$ff		cmp #$ff	;   signed byte?
.cdf8	d0 03		bne $cdfd		bne _err
.cdfa	4c e6 ca	jmp $cae6	_store:	jmp C_Comma
.cdfd	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cdff	4c c4 b2	jmp $b2c4		jmp ThrowA
.ce02					asm_2:
.ce02	68		pla			pla		; pop RTS addr
.ce03	a8		tay			tay
.ce04	68		pla			pla
.ce05	20 0e ce	jsr $ce0e		jsr asm_op	; compile opcode
.ce08	4c 00 cb	jmp $cb00		jmp Comma	; compile operand
.ce0b					asm_0:
.ce0b	68		pla			pla		; pop RTS addr
.ce0c	a8		tay			tay
.ce0d	68		pla			pla
.ce0e	84 15		sty $15		asm_op:	sty tmp1+0	; save RTS addr
.ce10	85 16		sta $16			sta tmp1+1
.ce12	a0 01		ldy #$01		ldy #1		; get opcode byte
.ce14	b1 15		lda ($15),y		lda (tmp1),y
.ce16	4c e9 ca	jmp $cae9		jmp C_Comma_A	; compile opcode
>ce19	61 64 63 2e 23			L1:	.text "adc.#"	;  name of word as a string, ending at wh_NameLastChar
>ce1e	05					.byte *-L1	;wh_NameLength	length of name
>ce1f	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce21	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce22	08					.byte NN	;wh_Flags	dictionary flags
=52638					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce23	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$ce26					en = *	; remember here
>ce21	03					.byte CL	;wh_CodeLength
>ce26	69					.byte $69
>ce27	61 64 63 2e 78			L1:	.text "adc.x"	;  name of word as a string, ending at wh_NameLastChar
>ce2c	05					.byte *-L1	;wh_NameLength	length of name
>ce2d	9e cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce2f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce30	08					.byte NN	;wh_Flags	dictionary flags
=52652					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce31	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$ce34					en = *	; remember here
>ce2f	03					.byte CL	;wh_CodeLength
>ce34	7d					.byte $7d
>ce35	61 64 63 2e 79			L1:	.text "adc.y"	;  name of word as a string, ending at wh_NameLastChar
>ce3a	05					.byte *-L1	;wh_NameLength	length of name
>ce3b	ac cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce3d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce3e	08					.byte NN	;wh_Flags	dictionary flags
=52666					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce3f	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$ce42					en = *	; remember here
>ce3d	03					.byte CL	;wh_CodeLength
>ce42	79					.byte $79
>ce43	61 64 63 2e 7a			L1:	.text "adc.z"	;  name of word as a string, ending at wh_NameLastChar
>ce48	05					.byte *-L1	;wh_NameLength	length of name
>ce49	ba cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce4b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce4c	08					.byte NN	;wh_Flags	dictionary flags
=52680					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce4d	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$ce50					en = *	; remember here
>ce4b	03					.byte CL	;wh_CodeLength
>ce50	65					.byte $65
>ce51	61 64 63 2e 7a 69 79		L1:	.text "adc.ziy"	;  name of word as a string, ending at wh_NameLastChar
>ce58	07					.byte *-L1	;wh_NameLength	length of name
>ce59	c8 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce5b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce5c	08					.byte NN	;wh_Flags	dictionary flags
=52696					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce5d	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$ce60					en = *	; remember here
>ce5b	03					.byte CL	;wh_CodeLength
>ce60	71					.byte $71
>ce61	61 64 63 2e 7a 78		L1:	.text "adc.zx"	;  name of word as a string, ending at wh_NameLastChar
>ce67	06					.byte *-L1	;wh_NameLength	length of name
>ce68	d8 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce6a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce6b	08					.byte NN	;wh_Flags	dictionary flags
=52711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce6c	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$ce6f					en = *	; remember here
>ce6a	03					.byte CL	;wh_CodeLength
>ce6f	75					.byte $75
>ce70	61 64 63 2e 7a 78 69		L1:	.text "adc.zxi"	;  name of word as a string, ending at wh_NameLastChar
>ce77	07					.byte *-L1	;wh_NameLength	length of name
>ce78	e7 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce7a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce7b	08					.byte NN	;wh_Flags	dictionary flags
=52727					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce7c	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$ce7f					en = *	; remember here
>ce7a	03					.byte CL	;wh_CodeLength
>ce7f	61					.byte $61
>ce80	61 6e 64 2e			L1:	.text "and."	;  name of word as a string, ending at wh_NameLastChar
>ce84	04					.byte *-L1	;wh_NameLength	length of name
>ce85	f7 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce87	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce88	08					.byte NN	;wh_Flags	dictionary flags
=52740					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce89	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$ce8c					en = *	; remember here
>ce87	03					.byte CL	;wh_CodeLength
>ce8c	2d					.byte $2d
>ce8d	61 6e 64 2e 23			L1:	.text "and.#"	;  name of word as a string, ending at wh_NameLastChar
>ce92	05					.byte *-L1	;wh_NameLength	length of name
>ce93	04 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce95	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce96	08					.byte NN	;wh_Flags	dictionary flags
=52754					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce97	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$ce9a					en = *	; remember here
>ce95	03					.byte CL	;wh_CodeLength
>ce9a	29					.byte $29
>ce9b	61 6e 64 2e 78			L1:	.text "and.x"	;  name of word as a string, ending at wh_NameLastChar
>cea0	05					.byte *-L1	;wh_NameLength	length of name
>cea1	12 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cea3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cea4	08					.byte NN	;wh_Flags	dictionary flags
=52768					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cea5	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cea8					en = *	; remember here
>cea3	03					.byte CL	;wh_CodeLength
>cea8	3d					.byte $3d
>cea9	61 6e 64 2e 79			L1:	.text "and.y"	;  name of word as a string, ending at wh_NameLastChar
>ceae	05					.byte *-L1	;wh_NameLength	length of name
>ceaf	20 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ceb1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ceb2	08					.byte NN	;wh_Flags	dictionary flags
=52782					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ceb3	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$ceb6					en = *	; remember here
>ceb1	03					.byte CL	;wh_CodeLength
>ceb6	39					.byte $39
>ceb7	61 6e 64 2e 7a			L1:	.text "and.z"	;  name of word as a string, ending at wh_NameLastChar
>cebc	05					.byte *-L1	;wh_NameLength	length of name
>cebd	2e ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cebf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cec0	08					.byte NN	;wh_Flags	dictionary flags
=52796					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cec1	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cec4					en = *	; remember here
>cebf	03					.byte CL	;wh_CodeLength
>cec4	25					.byte $25
>cec5	61 6e 64 2e 7a 69 79		L1:	.text "and.ziy"	;  name of word as a string, ending at wh_NameLastChar
>cecc	07					.byte *-L1	;wh_NameLength	length of name
>cecd	3c ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cecf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ced0	08					.byte NN	;wh_Flags	dictionary flags
=52812					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ced1	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$ced4					en = *	; remember here
>cecf	03					.byte CL	;wh_CodeLength
>ced4	31					.byte $31
>ced5	61 6e 64 2e 7a 78		L1:	.text "and.zx"	;  name of word as a string, ending at wh_NameLastChar
>cedb	06					.byte *-L1	;wh_NameLength	length of name
>cedc	4c ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cede	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cedf	08					.byte NN	;wh_Flags	dictionary flags
=52827					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cee0	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cee3					en = *	; remember here
>cede	03					.byte CL	;wh_CodeLength
>cee3	35					.byte $35
>cee4	61 6e 64 2e 7a 78 69		L1:	.text "and.zxi"	;  name of word as a string, ending at wh_NameLastChar
>ceeb	07					.byte *-L1	;wh_NameLength	length of name
>ceec	5b ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ceee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ceef	08					.byte NN	;wh_Flags	dictionary flags
=52843					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cef0	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cef3					en = *	; remember here
>ceee	03					.byte CL	;wh_CodeLength
>cef3	21					.byte $21
>cef4	61 73 6c			L1:	.text "asl"	;  name of word as a string, ending at wh_NameLastChar
>cef7	03					.byte *-L1	;wh_NameLength	length of name
>cef8	6b ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cefa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cefb	08					.byte NN	;wh_Flags	dictionary flags
=52855					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cefc	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$ceff					en = *	; remember here
>cefa	03					.byte CL	;wh_CodeLength
>ceff	0e					.byte $0e
>cf00	61 73 6c 2e 61			L1:	.text "asl.a"	;  name of word as a string, ending at wh_NameLastChar
>cf05	05					.byte *-L1	;wh_NameLength	length of name
>cf06	77 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf08	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf09	08					.byte NN	;wh_Flags	dictionary flags
=52869					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf0a	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf0d					en = *	; remember here
>cf08	03					.byte CL	;wh_CodeLength
>cf0d	0a					.byte $0a
>cf0e	61 73 6c 2e 78			L1:	.text "asl.x"	;  name of word as a string, ending at wh_NameLastChar
>cf13	05					.byte *-L1	;wh_NameLength	length of name
>cf14	85 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf16	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf17	08					.byte NN	;wh_Flags	dictionary flags
=52883					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf18	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf1b					en = *	; remember here
>cf16	03					.byte CL	;wh_CodeLength
>cf1b	1e					.byte $1e
>cf1c	61 73 6c 2e 7a			L1:	.text "asl.z"	;  name of word as a string, ending at wh_NameLastChar
>cf21	05					.byte *-L1	;wh_NameLength	length of name
>cf22	93 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf24	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf25	08					.byte NN	;wh_Flags	dictionary flags
=52897					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf26	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf29					en = *	; remember here
>cf24	03					.byte CL	;wh_CodeLength
>cf29	06					.byte $06
>cf2a	61 73 6c 2e 7a 78		L1:	.text "asl.zx"	;  name of word as a string, ending at wh_NameLastChar
>cf30	06					.byte *-L1	;wh_NameLength	length of name
>cf31	a1 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf33	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf34	08					.byte NN	;wh_Flags	dictionary flags
=52912					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf35	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf38					en = *	; remember here
>cf33	03					.byte CL	;wh_CodeLength
>cf38	16					.byte $16
>cf39	62 63 63			L1:	.text "bcc"	;  name of word as a string, ending at wh_NameLastChar
>cf3c	03					.byte *-L1	;wh_NameLength	length of name
>cf3d	b0 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf3f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf40	08					.byte NN	;wh_Flags	dictionary flags
=52924					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf41	20 cc cd	jsr $cdcc		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf44					en = *	; remember here
>cf3f	03					.byte CL	;wh_CodeLength
>cf44	90					.byte $90
>cf45	62 63 73			L1:	.text "bcs"	;  name of word as a string, ending at wh_NameLastChar
>cf48	03					.byte *-L1	;wh_NameLength	length of name
>cf49	bc ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf4b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf4c	08					.byte NN	;wh_Flags	dictionary flags
=52936					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf4d	20 cc cd	jsr $cdcc		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf50					en = *	; remember here
>cf4b	03					.byte CL	;wh_CodeLength
>cf50	b0					.byte $b0
>cf51	62 65 71			L1:	.text "beq"	;  name of word as a string, ending at wh_NameLastChar
>cf54	03					.byte *-L1	;wh_NameLength	length of name
>cf55	c8 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf57	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf58	08					.byte NN	;wh_Flags	dictionary flags
=52948					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf59	20 cc cd	jsr $cdcc		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf5c					en = *	; remember here
>cf57	03					.byte CL	;wh_CodeLength
>cf5c	f0					.byte $f0
>cf5d	62 69 74			L1:	.text "bit"	;  name of word as a string, ending at wh_NameLastChar
>cf60	03					.byte *-L1	;wh_NameLength	length of name
>cf61	d4 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf63	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf64	08					.byte NN	;wh_Flags	dictionary flags
=52960					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf65	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf68					en = *	; remember here
>cf63	03					.byte CL	;wh_CodeLength
>cf68	2c					.byte $2c
>cf69	62 69 74 2e 7a			L1:	.text "bit.z"	;  name of word as a string, ending at wh_NameLastChar
>cf6e	05					.byte *-L1	;wh_NameLength	length of name
>cf6f	e0 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf71	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf72	08					.byte NN	;wh_Flags	dictionary flags
=52974					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf73	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf76					en = *	; remember here
>cf71	03					.byte CL	;wh_CodeLength
>cf76	24					.byte $24
>cf77	62 6d 69			L1:	.text "bmi"	;  name of word as a string, ending at wh_NameLastChar
>cf7a	03					.byte *-L1	;wh_NameLength	length of name
>cf7b	ee ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf7d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf7e	08					.byte NN	;wh_Flags	dictionary flags
=52986					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf7f	20 cc cd	jsr $cdcc		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf82					en = *	; remember here
>cf7d	03					.byte CL	;wh_CodeLength
>cf82	30					.byte $30
>cf83	62 6e 65			L1:	.text "bne"	;  name of word as a string, ending at wh_NameLastChar
>cf86	03					.byte *-L1	;wh_NameLength	length of name
>cf87	fa ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf89	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf8a	08					.byte NN	;wh_Flags	dictionary flags
=52998					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf8b	20 cc cd	jsr $cdcc		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf8e					en = *	; remember here
>cf89	03					.byte CL	;wh_CodeLength
>cf8e	d0					.byte $d0
>cf8f	62 70 6c			L1:	.text "bpl"	;  name of word as a string, ending at wh_NameLastChar
>cf92	03					.byte *-L1	;wh_NameLength	length of name
>cf93	06 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf95	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf96	08					.byte NN	;wh_Flags	dictionary flags
=53010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf97	20 cc cd	jsr $cdcc		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf9a					en = *	; remember here
>cf95	03					.byte CL	;wh_CodeLength
>cf9a	10					.byte $10
>cf9b	62 72 6b			L1:	.text "brk"	;  name of word as a string, ending at wh_NameLastChar
>cf9e	03					.byte *-L1	;wh_NameLength	length of name
>cf9f	12 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfa1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfa2	08					.byte NN	;wh_Flags	dictionary flags
=53022					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfa3	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfa6					en = *	; remember here
>cfa1	03					.byte CL	;wh_CodeLength
>cfa6	00					.byte $00
>cfa7	62 76 63			L1:	.text "bvc"	;  name of word as a string, ending at wh_NameLastChar
>cfaa	03					.byte *-L1	;wh_NameLength	length of name
>cfab	1e cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfae	08					.byte NN	;wh_Flags	dictionary flags
=53034					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfaf	20 cc cd	jsr $cdcc		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfb2					en = *	; remember here
>cfad	03					.byte CL	;wh_CodeLength
>cfb2	50					.byte $50
>cfb3	62 76 73			L1:	.text "bvs"	;  name of word as a string, ending at wh_NameLastChar
>cfb6	03					.byte *-L1	;wh_NameLength	length of name
>cfb7	2a cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfb9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfba	08					.byte NN	;wh_Flags	dictionary flags
=53046					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfbb	20 cc cd	jsr $cdcc		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfbe					en = *	; remember here
>cfb9	03					.byte CL	;wh_CodeLength
>cfbe	70					.byte $70
>cfbf	63 6c 63			L1:	.text "clc"	;  name of word as a string, ending at wh_NameLastChar
>cfc2	03					.byte *-L1	;wh_NameLength	length of name
>cfc3	36 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfc5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfc6	08					.byte NN	;wh_Flags	dictionary flags
=53058					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfc7	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfca					en = *	; remember here
>cfc5	03					.byte CL	;wh_CodeLength
>cfca	18					.byte $18
>cfcb	63 6c 64			L1:	.text "cld"	;  name of word as a string, ending at wh_NameLastChar
>cfce	03					.byte *-L1	;wh_NameLength	length of name
>cfcf	42 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfd1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfd2	08					.byte NN	;wh_Flags	dictionary flags
=53070					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfd3	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfd6					en = *	; remember here
>cfd1	03					.byte CL	;wh_CodeLength
>cfd6	d8					.byte $d8
>cfd7	63 6c 69			L1:	.text "cli"	;  name of word as a string, ending at wh_NameLastChar
>cfda	03					.byte *-L1	;wh_NameLength	length of name
>cfdb	4e cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfdd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfde	08					.byte NN	;wh_Flags	dictionary flags
=53082					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfdf	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfe2					en = *	; remember here
>cfdd	03					.byte CL	;wh_CodeLength
>cfe2	58					.byte $58
>cfe3	63 6c 76			L1:	.text "clv"	;  name of word as a string, ending at wh_NameLastChar
>cfe6	03					.byte *-L1	;wh_NameLength	length of name
>cfe7	5a cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfe9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfea	08					.byte NN	;wh_Flags	dictionary flags
=53094					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfeb	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfee					en = *	; remember here
>cfe9	03					.byte CL	;wh_CodeLength
>cfee	b8					.byte $b8
>cfef	63 6d 70			L1:	.text "cmp"	;  name of word as a string, ending at wh_NameLastChar
>cff2	03					.byte *-L1	;wh_NameLength	length of name
>cff3	66 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cff5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cff6	08					.byte NN	;wh_Flags	dictionary flags
=53106					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cff7	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cffa					en = *	; remember here
>cff5	03					.byte CL	;wh_CodeLength
>cffa	cd					.byte $cd
>cffb	63 6d 70 2e 23			L1:	.text "cmp.#"	;  name of word as a string, ending at wh_NameLastChar
>d000	05					.byte *-L1	;wh_NameLength	length of name
>d001	72 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d003	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d004	08					.byte NN	;wh_Flags	dictionary flags
=53120					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d005	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d008					en = *	; remember here
>d003	03					.byte CL	;wh_CodeLength
>d008	c9					.byte $c9
>d009	63 6d 70 2e 78			L1:	.text "cmp.x"	;  name of word as a string, ending at wh_NameLastChar
>d00e	05					.byte *-L1	;wh_NameLength	length of name
>d00f	80 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d011	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d012	08					.byte NN	;wh_Flags	dictionary flags
=53134					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d013	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d016					en = *	; remember here
>d011	03					.byte CL	;wh_CodeLength
>d016	dd					.byte $dd
>d017	63 6d 70 2e 79			L1:	.text "cmp.y"	;  name of word as a string, ending at wh_NameLastChar
>d01c	05					.byte *-L1	;wh_NameLength	length of name
>d01d	8e cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d01f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d020	08					.byte NN	;wh_Flags	dictionary flags
=53148					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d021	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d024					en = *	; remember here
>d01f	03					.byte CL	;wh_CodeLength
>d024	d9					.byte $d9
>d025	63 6d 70 2e 7a			L1:	.text "cmp.z"	;  name of word as a string, ending at wh_NameLastChar
>d02a	05					.byte *-L1	;wh_NameLength	length of name
>d02b	9c cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d02d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d02e	08					.byte NN	;wh_Flags	dictionary flags
=53162					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d02f	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d032					en = *	; remember here
>d02d	03					.byte CL	;wh_CodeLength
>d032	c5					.byte $c5
>d033	63 6d 70 2e 7a 69 79		L1:	.text "cmp.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d03a	07					.byte *-L1	;wh_NameLength	length of name
>d03b	aa cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d03d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d03e	08					.byte NN	;wh_Flags	dictionary flags
=53178					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d03f	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d042					en = *	; remember here
>d03d	03					.byte CL	;wh_CodeLength
>d042	d1					.byte $d1
>d043	63 6d 70 2e 7a 78		L1:	.text "cmp.zx"	;  name of word as a string, ending at wh_NameLastChar
>d049	06					.byte *-L1	;wh_NameLength	length of name
>d04a	ba cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d04c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d04d	08					.byte NN	;wh_Flags	dictionary flags
=53193					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d04e	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d051					en = *	; remember here
>d04c	03					.byte CL	;wh_CodeLength
>d051	d5					.byte $d5
>d052	63 6d 70 2e 7a 78 69		L1:	.text "cmp.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d059	07					.byte *-L1	;wh_NameLength	length of name
>d05a	c9 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d05c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d05d	08					.byte NN	;wh_Flags	dictionary flags
=53209					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d05e	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d061					en = *	; remember here
>d05c	03					.byte CL	;wh_CodeLength
>d061	c1					.byte $c1
>d062	63 70 78			L1:	.text "cpx"	;  name of word as a string, ending at wh_NameLastChar
>d065	03					.byte *-L1	;wh_NameLength	length of name
>d066	d9 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d068	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d069	08					.byte NN	;wh_Flags	dictionary flags
=53221					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d06a	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d06d					en = *	; remember here
>d068	03					.byte CL	;wh_CodeLength
>d06d	ec					.byte $ec
>d06e	63 70 78 2e 23			L1:	.text "cpx.#"	;  name of word as a string, ending at wh_NameLastChar
>d073	05					.byte *-L1	;wh_NameLength	length of name
>d074	e5 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d076	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d077	08					.byte NN	;wh_Flags	dictionary flags
=53235					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d078	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d07b					en = *	; remember here
>d076	03					.byte CL	;wh_CodeLength
>d07b	e0					.byte $e0
>d07c	63 70 78 2e 7a			L1:	.text "cpx.z"	;  name of word as a string, ending at wh_NameLastChar
>d081	05					.byte *-L1	;wh_NameLength	length of name
>d082	f3 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d084	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d085	08					.byte NN	;wh_Flags	dictionary flags
=53249					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d086	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d089					en = *	; remember here
>d084	03					.byte CL	;wh_CodeLength
>d089	e4					.byte $e4
>d08a	63 70 79			L1:	.text "cpy"	;  name of word as a string, ending at wh_NameLastChar
>d08d	03					.byte *-L1	;wh_NameLength	length of name
>d08e	01 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d090	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d091	08					.byte NN	;wh_Flags	dictionary flags
=53261					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d092	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d095					en = *	; remember here
>d090	03					.byte CL	;wh_CodeLength
>d095	cc					.byte $cc
>d096	63 70 79 2e 23			L1:	.text "cpy.#"	;  name of word as a string, ending at wh_NameLastChar
>d09b	05					.byte *-L1	;wh_NameLength	length of name
>d09c	0d d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d09e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d09f	08					.byte NN	;wh_Flags	dictionary flags
=53275					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0a0	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0a3					en = *	; remember here
>d09e	03					.byte CL	;wh_CodeLength
>d0a3	c0					.byte $c0
>d0a4	63 70 79 2e 7a			L1:	.text "cpy.z"	;  name of word as a string, ending at wh_NameLastChar
>d0a9	05					.byte *-L1	;wh_NameLength	length of name
>d0aa	1b d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0ac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0ad	08					.byte NN	;wh_Flags	dictionary flags
=53289					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0ae	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0b1					en = *	; remember here
>d0ac	03					.byte CL	;wh_CodeLength
>d0b1	c4					.byte $c4
>d0b2	64 65 63			L1:	.text "dec"	;  name of word as a string, ending at wh_NameLastChar
>d0b5	03					.byte *-L1	;wh_NameLength	length of name
>d0b6	29 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0b8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0b9	08					.byte NN	;wh_Flags	dictionary flags
=53301					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0ba	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0bd					en = *	; remember here
>d0b8	03					.byte CL	;wh_CodeLength
>d0bd	ce					.byte $ce
>d0be	64 65 63 2e 61			L1:	.text "dec.a"	;  name of word as a string, ending at wh_NameLastChar
>d0c3	05					.byte *-L1	;wh_NameLength	length of name
>d0c4	35 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0c6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0c7	08					.byte NN	;wh_Flags	dictionary flags
=53315					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0c8	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0cb					en = *	; remember here
>d0c6	03					.byte CL	;wh_CodeLength
>d0cb	3a					.byte $3a
>d0cc	64 65 63 2e 78			L1:	.text "dec.x"	;  name of word as a string, ending at wh_NameLastChar
>d0d1	05					.byte *-L1	;wh_NameLength	length of name
>d0d2	43 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0d4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0d5	08					.byte NN	;wh_Flags	dictionary flags
=53329					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0d6	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0d9					en = *	; remember here
>d0d4	03					.byte CL	;wh_CodeLength
>d0d9	de					.byte $de
>d0da	64 65 63 2e 7a			L1:	.text "dec.z"	;  name of word as a string, ending at wh_NameLastChar
>d0df	05					.byte *-L1	;wh_NameLength	length of name
>d0e0	51 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0e3	08					.byte NN	;wh_Flags	dictionary flags
=53343					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0e4	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0e7					en = *	; remember here
>d0e2	03					.byte CL	;wh_CodeLength
>d0e7	c6					.byte $c6
>d0e8	64 65 63 2e 7a 78		L1:	.text "dec.zx"	;  name of word as a string, ending at wh_NameLastChar
>d0ee	06					.byte *-L1	;wh_NameLength	length of name
>d0ef	5f d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0f1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0f2	08					.byte NN	;wh_Flags	dictionary flags
=53358					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0f3	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0f6					en = *	; remember here
>d0f1	03					.byte CL	;wh_CodeLength
>d0f6	d6					.byte $d6
>d0f7	64 65 78			L1:	.text "dex"	;  name of word as a string, ending at wh_NameLastChar
>d0fa	03					.byte *-L1	;wh_NameLength	length of name
>d0fb	6e d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0fd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0fe	08					.byte NN	;wh_Flags	dictionary flags
=53370					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0ff	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d102					en = *	; remember here
>d0fd	03					.byte CL	;wh_CodeLength
>d102	ca					.byte $ca
>d103	64 65 79			L1:	.text "dey"	;  name of word as a string, ending at wh_NameLastChar
>d106	03					.byte *-L1	;wh_NameLength	length of name
>d107	7a d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d109	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d10a	08					.byte NN	;wh_Flags	dictionary flags
=53382					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d10b	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d10e					en = *	; remember here
>d109	03					.byte CL	;wh_CodeLength
>d10e	88					.byte $88
>d10f	65 6f 72			L1:	.text "eor"	;  name of word as a string, ending at wh_NameLastChar
>d112	03					.byte *-L1	;wh_NameLength	length of name
>d113	86 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d115	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d116	08					.byte NN	;wh_Flags	dictionary flags
=53394					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d117	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d11a					en = *	; remember here
>d115	03					.byte CL	;wh_CodeLength
>d11a	4d					.byte $4d
>d11b	65 6f 72 2e 23			L1:	.text "eor.#"	;  name of word as a string, ending at wh_NameLastChar
>d120	05					.byte *-L1	;wh_NameLength	length of name
>d121	92 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d123	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d124	08					.byte NN	;wh_Flags	dictionary flags
=53408					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d125	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d128					en = *	; remember here
>d123	03					.byte CL	;wh_CodeLength
>d128	49					.byte $49
>d129	65 6f 72 2e 78			L1:	.text "eor.x"	;  name of word as a string, ending at wh_NameLastChar
>d12e	05					.byte *-L1	;wh_NameLength	length of name
>d12f	a0 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d131	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d132	08					.byte NN	;wh_Flags	dictionary flags
=53422					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d133	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d136					en = *	; remember here
>d131	03					.byte CL	;wh_CodeLength
>d136	5d					.byte $5d
>d137	65 6f 72 2e 79			L1:	.text "eor.y"	;  name of word as a string, ending at wh_NameLastChar
>d13c	05					.byte *-L1	;wh_NameLength	length of name
>d13d	ae d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d13f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d140	08					.byte NN	;wh_Flags	dictionary flags
=53436					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d141	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d144					en = *	; remember here
>d13f	03					.byte CL	;wh_CodeLength
>d144	59					.byte $59
>d145	65 6f 72 2e 7a			L1:	.text "eor.z"	;  name of word as a string, ending at wh_NameLastChar
>d14a	05					.byte *-L1	;wh_NameLength	length of name
>d14b	bc d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d14d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d14e	08					.byte NN	;wh_Flags	dictionary flags
=53450					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d14f	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d152					en = *	; remember here
>d14d	03					.byte CL	;wh_CodeLength
>d152	45					.byte $45
>d153	65 6f 72 2e 7a 69 79		L1:	.text "eor.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d15a	07					.byte *-L1	;wh_NameLength	length of name
>d15b	ca d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d15d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d15e	08					.byte NN	;wh_Flags	dictionary flags
=53466					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d15f	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d162					en = *	; remember here
>d15d	03					.byte CL	;wh_CodeLength
>d162	51					.byte $51
>d163	65 6f 72 2e 7a 78		L1:	.text "eor.zx"	;  name of word as a string, ending at wh_NameLastChar
>d169	06					.byte *-L1	;wh_NameLength	length of name
>d16a	da d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d16c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d16d	08					.byte NN	;wh_Flags	dictionary flags
=53481					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d16e	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d171					en = *	; remember here
>d16c	03					.byte CL	;wh_CodeLength
>d171	55					.byte $55
>d172	65 6f 72 2e 7a 78 69		L1:	.text "eor.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d179	07					.byte *-L1	;wh_NameLength	length of name
>d17a	e9 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d17c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d17d	08					.byte NN	;wh_Flags	dictionary flags
=53497					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d17e	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d181					en = *	; remember here
>d17c	03					.byte CL	;wh_CodeLength
>d181	41					.byte $41
>d182	69 6e 63			L1:	.text "inc"	;  name of word as a string, ending at wh_NameLastChar
>d185	03					.byte *-L1	;wh_NameLength	length of name
>d186	f9 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d188	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d189	08					.byte NN	;wh_Flags	dictionary flags
=53509					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d18a	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d18d					en = *	; remember here
>d188	03					.byte CL	;wh_CodeLength
>d18d	ee					.byte $ee
>d18e	69 6e 63 2e 61			L1:	.text "inc.a"	;  name of word as a string, ending at wh_NameLastChar
>d193	05					.byte *-L1	;wh_NameLength	length of name
>d194	05 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d196	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d197	08					.byte NN	;wh_Flags	dictionary flags
=53523					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d198	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d19b					en = *	; remember here
>d196	03					.byte CL	;wh_CodeLength
>d19b	1a					.byte $1a
>d19c	69 6e 63 2e 78			L1:	.text "inc.x"	;  name of word as a string, ending at wh_NameLastChar
>d1a1	05					.byte *-L1	;wh_NameLength	length of name
>d1a2	13 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1a4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1a5	08					.byte NN	;wh_Flags	dictionary flags
=53537					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1a6	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1a9					en = *	; remember here
>d1a4	03					.byte CL	;wh_CodeLength
>d1a9	fe					.byte $fe
>d1aa	69 6e 63 2e 7a			L1:	.text "inc.z"	;  name of word as a string, ending at wh_NameLastChar
>d1af	05					.byte *-L1	;wh_NameLength	length of name
>d1b0	21 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1b3	08					.byte NN	;wh_Flags	dictionary flags
=53551					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1b4	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1b7					en = *	; remember here
>d1b2	03					.byte CL	;wh_CodeLength
>d1b7	e6					.byte $e6
>d1b8	69 6e 63 2e 7a 78		L1:	.text "inc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d1be	06					.byte *-L1	;wh_NameLength	length of name
>d1bf	2f d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1c2	08					.byte NN	;wh_Flags	dictionary flags
=53566					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1c3	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1c6					en = *	; remember here
>d1c1	03					.byte CL	;wh_CodeLength
>d1c6	f6					.byte $f6
>d1c7	69 6e 78			L1:	.text "inx"	;  name of word as a string, ending at wh_NameLastChar
>d1ca	03					.byte *-L1	;wh_NameLength	length of name
>d1cb	3e d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1ce	08					.byte NN	;wh_Flags	dictionary flags
=53578					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1cf	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1d2					en = *	; remember here
>d1cd	03					.byte CL	;wh_CodeLength
>d1d2	e8					.byte $e8
>d1d3	69 6e 79			L1:	.text "iny"	;  name of word as a string, ending at wh_NameLastChar
>d1d6	03					.byte *-L1	;wh_NameLength	length of name
>d1d7	4a d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1d9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1da	08					.byte NN	;wh_Flags	dictionary flags
=53590					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1db	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1de					en = *	; remember here
>d1d9	03					.byte CL	;wh_CodeLength
>d1de	c8					.byte $c8
>d1df	6a 6d 70			L1:	.text "jmp"	;  name of word as a string, ending at wh_NameLastChar
>d1e2	03					.byte *-L1	;wh_NameLength	length of name
>d1e3	56 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1e5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1e6	08					.byte NN	;wh_Flags	dictionary flags
=53602					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1e7	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1ea					en = *	; remember here
>d1e5	03					.byte CL	;wh_CodeLength
>d1ea	4c					.byte $4c
>d1eb	6a 6d 70 2e 69			L1:	.text "jmp.i"	;  name of word as a string, ending at wh_NameLastChar
>d1f0	05					.byte *-L1	;wh_NameLength	length of name
>d1f1	62 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1f4	08					.byte NN	;wh_Flags	dictionary flags
=53616					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1f5	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1f8					en = *	; remember here
>d1f3	03					.byte CL	;wh_CodeLength
>d1f8	6c					.byte $6c
>d1f9	6a 73 72			L1:	.text "jsr"	;  name of word as a string, ending at wh_NameLastChar
>d1fc	03					.byte *-L1	;wh_NameLength	length of name
>d1fd	70 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1ff	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d200	08					.byte NN	;wh_Flags	dictionary flags
=53628					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d201	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d204					en = *	; remember here
>d1ff	03					.byte CL	;wh_CodeLength
>d204	20					.byte $20
>d205	6c 64 61			L1:	.text "lda"	;  name of word as a string, ending at wh_NameLastChar
>d208	03					.byte *-L1	;wh_NameLength	length of name
>d209	7c d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d20b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d20c	08					.byte NN	;wh_Flags	dictionary flags
=53640					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d20d	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d210					en = *	; remember here
>d20b	03					.byte CL	;wh_CodeLength
>d210	ad					.byte $ad
>d211	6c 64 61 2e 23			L1:	.text "lda.#"	;  name of word as a string, ending at wh_NameLastChar
>d216	05					.byte *-L1	;wh_NameLength	length of name
>d217	88 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d219	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d21a	08					.byte NN	;wh_Flags	dictionary flags
=53654					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d21b	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d21e					en = *	; remember here
>d219	03					.byte CL	;wh_CodeLength
>d21e	a9					.byte $a9
>d21f	6c 64 61 2e 78			L1:	.text "lda.x"	;  name of word as a string, ending at wh_NameLastChar
>d224	05					.byte *-L1	;wh_NameLength	length of name
>d225	96 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d227	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d228	08					.byte NN	;wh_Flags	dictionary flags
=53668					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d229	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d22c					en = *	; remember here
>d227	03					.byte CL	;wh_CodeLength
>d22c	bd					.byte $bd
>d22d	6c 64 61 2e 79			L1:	.text "lda.y"	;  name of word as a string, ending at wh_NameLastChar
>d232	05					.byte *-L1	;wh_NameLength	length of name
>d233	a4 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d235	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d236	08					.byte NN	;wh_Flags	dictionary flags
=53682					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d237	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d23a					en = *	; remember here
>d235	03					.byte CL	;wh_CodeLength
>d23a	b9					.byte $b9
>d23b	6c 64 61 2e 7a			L1:	.text "lda.z"	;  name of word as a string, ending at wh_NameLastChar
>d240	05					.byte *-L1	;wh_NameLength	length of name
>d241	b2 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d243	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d244	08					.byte NN	;wh_Flags	dictionary flags
=53696					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d245	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d248					en = *	; remember here
>d243	03					.byte CL	;wh_CodeLength
>d248	a5					.byte $a5
>d249	6c 64 61 2e 7a 69 79		L1:	.text "lda.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d250	07					.byte *-L1	;wh_NameLength	length of name
>d251	c0 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d253	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d254	08					.byte NN	;wh_Flags	dictionary flags
=53712					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d255	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d258					en = *	; remember here
>d253	03					.byte CL	;wh_CodeLength
>d258	b1					.byte $b1
>d259	6c 64 61 2e 7a 78		L1:	.text "lda.zx"	;  name of word as a string, ending at wh_NameLastChar
>d25f	06					.byte *-L1	;wh_NameLength	length of name
>d260	d0 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d262	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d263	08					.byte NN	;wh_Flags	dictionary flags
=53727					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d264	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d267					en = *	; remember here
>d262	03					.byte CL	;wh_CodeLength
>d267	b5					.byte $b5
>d268	6c 64 61 2e 7a 78 69		L1:	.text "lda.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d26f	07					.byte *-L1	;wh_NameLength	length of name
>d270	df d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d272	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d273	08					.byte NN	;wh_Flags	dictionary flags
=53743					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d274	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d277					en = *	; remember here
>d272	03					.byte CL	;wh_CodeLength
>d277	a1					.byte $a1
>d278	6c 64 78			L1:	.text "ldx"	;  name of word as a string, ending at wh_NameLastChar
>d27b	03					.byte *-L1	;wh_NameLength	length of name
>d27c	ef d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d27e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d27f	08					.byte NN	;wh_Flags	dictionary flags
=53755					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d280	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d283					en = *	; remember here
>d27e	03					.byte CL	;wh_CodeLength
>d283	ae					.byte $ae
>d284	6c 64 78 2e 23			L1:	.text "ldx.#"	;  name of word as a string, ending at wh_NameLastChar
>d289	05					.byte *-L1	;wh_NameLength	length of name
>d28a	fb d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d28c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d28d	08					.byte NN	;wh_Flags	dictionary flags
=53769					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d28e	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d291					en = *	; remember here
>d28c	03					.byte CL	;wh_CodeLength
>d291	a2					.byte $a2
>d292	6c 64 78 2e 79			L1:	.text "ldx.y"	;  name of word as a string, ending at wh_NameLastChar
>d297	05					.byte *-L1	;wh_NameLength	length of name
>d298	09 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d29a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d29b	08					.byte NN	;wh_Flags	dictionary flags
=53783					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d29c	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d29f					en = *	; remember here
>d29a	03					.byte CL	;wh_CodeLength
>d29f	be					.byte $be
>d2a0	6c 64 78 2e 7a			L1:	.text "ldx.z"	;  name of word as a string, ending at wh_NameLastChar
>d2a5	05					.byte *-L1	;wh_NameLength	length of name
>d2a6	17 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2a8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2a9	08					.byte NN	;wh_Flags	dictionary flags
=53797					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2aa	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2ad					en = *	; remember here
>d2a8	03					.byte CL	;wh_CodeLength
>d2ad	a6					.byte $a6
>d2ae	6c 64 78 2e 7a 79		L1:	.text "ldx.zy"	;  name of word as a string, ending at wh_NameLastChar
>d2b4	06					.byte *-L1	;wh_NameLength	length of name
>d2b5	25 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2b8	08					.byte NN	;wh_Flags	dictionary flags
=53812					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2b9	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2bc					en = *	; remember here
>d2b7	03					.byte CL	;wh_CodeLength
>d2bc	b6					.byte $b6
>d2bd	6c 64 79			L1:	.text "ldy"	;  name of word as a string, ending at wh_NameLastChar
>d2c0	03					.byte *-L1	;wh_NameLength	length of name
>d2c1	34 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2c4	08					.byte NN	;wh_Flags	dictionary flags
=53824					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2c5	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2c8					en = *	; remember here
>d2c3	03					.byte CL	;wh_CodeLength
>d2c8	ac					.byte $ac
>d2c9	6c 64 79 2e 23			L1:	.text "ldy.#"	;  name of word as a string, ending at wh_NameLastChar
>d2ce	05					.byte *-L1	;wh_NameLength	length of name
>d2cf	40 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2d2	08					.byte NN	;wh_Flags	dictionary flags
=53838					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2d3	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2d6					en = *	; remember here
>d2d1	03					.byte CL	;wh_CodeLength
>d2d6	a0					.byte $a0
>d2d7	6c 64 79 2e 78			L1:	.text "ldy.x"	;  name of word as a string, ending at wh_NameLastChar
>d2dc	05					.byte *-L1	;wh_NameLength	length of name
>d2dd	4e d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2df	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2e0	08					.byte NN	;wh_Flags	dictionary flags
=53852					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2e1	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2e4					en = *	; remember here
>d2df	03					.byte CL	;wh_CodeLength
>d2e4	bc					.byte $bc
>d2e5	6c 64 79 2e 7a			L1:	.text "ldy.z"	;  name of word as a string, ending at wh_NameLastChar
>d2ea	05					.byte *-L1	;wh_NameLength	length of name
>d2eb	5c d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2ed	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2ee	08					.byte NN	;wh_Flags	dictionary flags
=53866					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2ef	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2f2					en = *	; remember here
>d2ed	03					.byte CL	;wh_CodeLength
>d2f2	a4					.byte $a4
>d2f3	6c 64 79 2e 7a 78		L1:	.text "ldy.zx"	;  name of word as a string, ending at wh_NameLastChar
>d2f9	06					.byte *-L1	;wh_NameLength	length of name
>d2fa	6a d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2fd	08					.byte NN	;wh_Flags	dictionary flags
=53881					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2fe	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d301					en = *	; remember here
>d2fc	03					.byte CL	;wh_CodeLength
>d301	b4					.byte $b4
>d302	6c 73 72			L1:	.text "lsr"	;  name of word as a string, ending at wh_NameLastChar
>d305	03					.byte *-L1	;wh_NameLength	length of name
>d306	79 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d308	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d309	08					.byte NN	;wh_Flags	dictionary flags
=53893					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d30a	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d30d					en = *	; remember here
>d308	03					.byte CL	;wh_CodeLength
>d30d	4e					.byte $4e
>d30e	6c 73 72 2e 61			L1:	.text "lsr.a"	;  name of word as a string, ending at wh_NameLastChar
>d313	05					.byte *-L1	;wh_NameLength	length of name
>d314	85 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d316	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d317	08					.byte NN	;wh_Flags	dictionary flags
=53907					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d318	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d31b					en = *	; remember here
>d316	03					.byte CL	;wh_CodeLength
>d31b	4a					.byte $4a
>d31c	6c 73 72 2e 78			L1:	.text "lsr.x"	;  name of word as a string, ending at wh_NameLastChar
>d321	05					.byte *-L1	;wh_NameLength	length of name
>d322	93 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d324	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d325	08					.byte NN	;wh_Flags	dictionary flags
=53921					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d326	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d329					en = *	; remember here
>d324	03					.byte CL	;wh_CodeLength
>d329	5e					.byte $5e
>d32a	6c 73 72 2e 7a			L1:	.text "lsr.z"	;  name of word as a string, ending at wh_NameLastChar
>d32f	05					.byte *-L1	;wh_NameLength	length of name
>d330	a1 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d332	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d333	08					.byte NN	;wh_Flags	dictionary flags
=53935					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d334	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d337					en = *	; remember here
>d332	03					.byte CL	;wh_CodeLength
>d337	46					.byte $46
>d338	6c 73 72 2e 7a 78		L1:	.text "lsr.zx"	;  name of word as a string, ending at wh_NameLastChar
>d33e	06					.byte *-L1	;wh_NameLength	length of name
>d33f	af d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d341	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d342	08					.byte NN	;wh_Flags	dictionary flags
=53950					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d343	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d346					en = *	; remember here
>d341	03					.byte CL	;wh_CodeLength
>d346	56					.byte $56
>d347	6e 6f 70			L1:	.text "nop"	;  name of word as a string, ending at wh_NameLastChar
>d34a	03					.byte *-L1	;wh_NameLength	length of name
>d34b	be d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d34d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d34e	08					.byte NN	;wh_Flags	dictionary flags
=53962					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d34f	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d352					en = *	; remember here
>d34d	03					.byte CL	;wh_CodeLength
>d352	ea					.byte $ea
>d353	6f 72 61			L1:	.text "ora"	;  name of word as a string, ending at wh_NameLastChar
>d356	03					.byte *-L1	;wh_NameLength	length of name
>d357	ca d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d359	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d35a	08					.byte NN	;wh_Flags	dictionary flags
=53974					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d35b	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d35e					en = *	; remember here
>d359	03					.byte CL	;wh_CodeLength
>d35e	0d					.byte $0d
>d35f	6f 72 61 2e 23			L1:	.text "ora.#"	;  name of word as a string, ending at wh_NameLastChar
>d364	05					.byte *-L1	;wh_NameLength	length of name
>d365	d6 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d367	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d368	08					.byte NN	;wh_Flags	dictionary flags
=53988					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d369	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d36c					en = *	; remember here
>d367	03					.byte CL	;wh_CodeLength
>d36c	09					.byte $09
>d36d	6f 72 61 2e 78			L1:	.text "ora.x"	;  name of word as a string, ending at wh_NameLastChar
>d372	05					.byte *-L1	;wh_NameLength	length of name
>d373	e4 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d375	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d376	08					.byte NN	;wh_Flags	dictionary flags
=54002					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d377	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d37a					en = *	; remember here
>d375	03					.byte CL	;wh_CodeLength
>d37a	1d					.byte $1d
>d37b	6f 72 61 2e 79			L1:	.text "ora.y"	;  name of word as a string, ending at wh_NameLastChar
>d380	05					.byte *-L1	;wh_NameLength	length of name
>d381	f2 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d383	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d384	08					.byte NN	;wh_Flags	dictionary flags
=54016					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d385	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d388					en = *	; remember here
>d383	03					.byte CL	;wh_CodeLength
>d388	19					.byte $19
>d389	6f 72 61 2e 7a			L1:	.text "ora.z"	;  name of word as a string, ending at wh_NameLastChar
>d38e	05					.byte *-L1	;wh_NameLength	length of name
>d38f	00 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d391	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d392	08					.byte NN	;wh_Flags	dictionary flags
=54030					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d393	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d396					en = *	; remember here
>d391	03					.byte CL	;wh_CodeLength
>d396	05					.byte $05
>d397	6f 72 61 2e 7a 69 79		L1:	.text "ora.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d39e	07					.byte *-L1	;wh_NameLength	length of name
>d39f	0e d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3a1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3a2	08					.byte NN	;wh_Flags	dictionary flags
=54046					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3a3	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3a6					en = *	; remember here
>d3a1	03					.byte CL	;wh_CodeLength
>d3a6	11					.byte $11
>d3a7	6f 72 61 2e 7a 78		L1:	.text "ora.zx"	;  name of word as a string, ending at wh_NameLastChar
>d3ad	06					.byte *-L1	;wh_NameLength	length of name
>d3ae	1e d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3b0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3b1	08					.byte NN	;wh_Flags	dictionary flags
=54061					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3b2	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3b5					en = *	; remember here
>d3b0	03					.byte CL	;wh_CodeLength
>d3b5	15					.byte $15
>d3b6	6f 72 61 2e 7a 78 69		L1:	.text "ora.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d3bd	07					.byte *-L1	;wh_NameLength	length of name
>d3be	2d d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3c0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3c1	08					.byte NN	;wh_Flags	dictionary flags
=54077					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3c2	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3c5					en = *	; remember here
>d3c0	03					.byte CL	;wh_CodeLength
>d3c5	01					.byte $01
>d3c6	70 68 61			L1:	.text "pha"	;  name of word as a string, ending at wh_NameLastChar
>d3c9	03					.byte *-L1	;wh_NameLength	length of name
>d3ca	3d d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3cd	08					.byte NN	;wh_Flags	dictionary flags
=54089					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3ce	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3d1					en = *	; remember here
>d3cc	03					.byte CL	;wh_CodeLength
>d3d1	48					.byte $48
>d3d2	70 68 70			L1:	.text "php"	;  name of word as a string, ending at wh_NameLastChar
>d3d5	03					.byte *-L1	;wh_NameLength	length of name
>d3d6	49 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3d8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3d9	08					.byte NN	;wh_Flags	dictionary flags
=54101					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3da	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3dd					en = *	; remember here
>d3d8	03					.byte CL	;wh_CodeLength
>d3dd	08					.byte $08
>d3de	70 6c 61			L1:	.text "pla"	;  name of word as a string, ending at wh_NameLastChar
>d3e1	03					.byte *-L1	;wh_NameLength	length of name
>d3e2	55 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3e4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3e5	08					.byte NN	;wh_Flags	dictionary flags
=54113					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3e6	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3e9					en = *	; remember here
>d3e4	03					.byte CL	;wh_CodeLength
>d3e9	68					.byte $68
>d3ea	70 6c 70			L1:	.text "plp"	;  name of word as a string, ending at wh_NameLastChar
>d3ed	03					.byte *-L1	;wh_NameLength	length of name
>d3ee	61 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3f1	08					.byte NN	;wh_Flags	dictionary flags
=54125					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3f2	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3f5					en = *	; remember here
>d3f0	03					.byte CL	;wh_CodeLength
>d3f5	28					.byte $28
>d3f6	72 6f 6c			L1:	.text "rol"	;  name of word as a string, ending at wh_NameLastChar
>d3f9	03					.byte *-L1	;wh_NameLength	length of name
>d3fa	6d d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3fd	08					.byte NN	;wh_Flags	dictionary flags
=54137					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3fe	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d401					en = *	; remember here
>d3fc	03					.byte CL	;wh_CodeLength
>d401	2e					.byte $2e
>d402	72 6f 6c 2e 61			L1:	.text "rol.a"	;  name of word as a string, ending at wh_NameLastChar
>d407	05					.byte *-L1	;wh_NameLength	length of name
>d408	79 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d40a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d40b	08					.byte NN	;wh_Flags	dictionary flags
=54151					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d40c	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d40f					en = *	; remember here
>d40a	03					.byte CL	;wh_CodeLength
>d40f	2a					.byte $2a
>d410	72 6f 6c 2e 78			L1:	.text "rol.x"	;  name of word as a string, ending at wh_NameLastChar
>d415	05					.byte *-L1	;wh_NameLength	length of name
>d416	87 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d418	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d419	08					.byte NN	;wh_Flags	dictionary flags
=54165					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d41a	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d41d					en = *	; remember here
>d418	03					.byte CL	;wh_CodeLength
>d41d	3e					.byte $3e
>d41e	72 6f 6c 2e 7a			L1:	.text "rol.z"	;  name of word as a string, ending at wh_NameLastChar
>d423	05					.byte *-L1	;wh_NameLength	length of name
>d424	95 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d426	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d427	08					.byte NN	;wh_Flags	dictionary flags
=54179					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d428	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d42b					en = *	; remember here
>d426	03					.byte CL	;wh_CodeLength
>d42b	26					.byte $26
>d42c	72 6f 6c 2e 7a 78		L1:	.text "rol.zx"	;  name of word as a string, ending at wh_NameLastChar
>d432	06					.byte *-L1	;wh_NameLength	length of name
>d433	a3 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d435	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d436	08					.byte NN	;wh_Flags	dictionary flags
=54194					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d437	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d43a					en = *	; remember here
>d435	03					.byte CL	;wh_CodeLength
>d43a	36					.byte $36
>d43b	72 6f 72			L1:	.text "ror"	;  name of word as a string, ending at wh_NameLastChar
>d43e	03					.byte *-L1	;wh_NameLength	length of name
>d43f	b2 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d441	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d442	08					.byte NN	;wh_Flags	dictionary flags
=54206					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d443	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d446					en = *	; remember here
>d441	03					.byte CL	;wh_CodeLength
>d446	6e					.byte $6e
>d447	72 6f 72 2e 61			L1:	.text "ror.a"	;  name of word as a string, ending at wh_NameLastChar
>d44c	05					.byte *-L1	;wh_NameLength	length of name
>d44d	be d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d44f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d450	08					.byte NN	;wh_Flags	dictionary flags
=54220					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d451	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d454					en = *	; remember here
>d44f	03					.byte CL	;wh_CodeLength
>d454	6a					.byte $6a
>d455	72 6f 72 2e 78			L1:	.text "ror.x"	;  name of word as a string, ending at wh_NameLastChar
>d45a	05					.byte *-L1	;wh_NameLength	length of name
>d45b	cc d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d45d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d45e	08					.byte NN	;wh_Flags	dictionary flags
=54234					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d45f	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d462					en = *	; remember here
>d45d	03					.byte CL	;wh_CodeLength
>d462	7e					.byte $7e
>d463	72 6f 72 2e 7a			L1:	.text "ror.z"	;  name of word as a string, ending at wh_NameLastChar
>d468	05					.byte *-L1	;wh_NameLength	length of name
>d469	da d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d46b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d46c	08					.byte NN	;wh_Flags	dictionary flags
=54248					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d46d	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d470					en = *	; remember here
>d46b	03					.byte CL	;wh_CodeLength
>d470	66					.byte $66
>d471	72 6f 72 2e 7a 78		L1:	.text "ror.zx"	;  name of word as a string, ending at wh_NameLastChar
>d477	06					.byte *-L1	;wh_NameLength	length of name
>d478	e8 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d47a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d47b	08					.byte NN	;wh_Flags	dictionary flags
=54263					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d47c	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d47f					en = *	; remember here
>d47a	03					.byte CL	;wh_CodeLength
>d47f	76					.byte $76
>d480	72 74 69			L1:	.text "rti"	;  name of word as a string, ending at wh_NameLastChar
>d483	03					.byte *-L1	;wh_NameLength	length of name
>d484	f7 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d486	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d487	08					.byte NN	;wh_Flags	dictionary flags
=54275					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d488	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d48b					en = *	; remember here
>d486	03					.byte CL	;wh_CodeLength
>d48b	40					.byte $40
>d48c	72 74 73			L1:	.text "rts"	;  name of word as a string, ending at wh_NameLastChar
>d48f	03					.byte *-L1	;wh_NameLength	length of name
>d490	03 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d492	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d493	08					.byte NN	;wh_Flags	dictionary flags
=54287					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d494	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d497					en = *	; remember here
>d492	03					.byte CL	;wh_CodeLength
>d497	60					.byte $60
>d498	73 62 63			L1:	.text "sbc"	;  name of word as a string, ending at wh_NameLastChar
>d49b	03					.byte *-L1	;wh_NameLength	length of name
>d49c	0f d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d49e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d49f	08					.byte NN	;wh_Flags	dictionary flags
=54299					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4a0	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4a3					en = *	; remember here
>d49e	03					.byte CL	;wh_CodeLength
>d4a3	ed					.byte $ed
>d4a4	73 62 63 2e 23			L1:	.text "sbc.#"	;  name of word as a string, ending at wh_NameLastChar
>d4a9	05					.byte *-L1	;wh_NameLength	length of name
>d4aa	1b d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4ac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4ad	08					.byte NN	;wh_Flags	dictionary flags
=54313					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4ae	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4b1					en = *	; remember here
>d4ac	03					.byte CL	;wh_CodeLength
>d4b1	e9					.byte $e9
>d4b2	73 62 63 2e 78			L1:	.text "sbc.x"	;  name of word as a string, ending at wh_NameLastChar
>d4b7	05					.byte *-L1	;wh_NameLength	length of name
>d4b8	29 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4ba	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4bb	08					.byte NN	;wh_Flags	dictionary flags
=54327					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4bc	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4bf					en = *	; remember here
>d4ba	03					.byte CL	;wh_CodeLength
>d4bf	fd					.byte $fd
>d4c0	73 62 63 2e 79			L1:	.text "sbc.y"	;  name of word as a string, ending at wh_NameLastChar
>d4c5	05					.byte *-L1	;wh_NameLength	length of name
>d4c6	37 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4c8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4c9	08					.byte NN	;wh_Flags	dictionary flags
=54341					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4ca	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4cd					en = *	; remember here
>d4c8	03					.byte CL	;wh_CodeLength
>d4cd	f9					.byte $f9
>d4ce	73 62 63 2e 7a			L1:	.text "sbc.z"	;  name of word as a string, ending at wh_NameLastChar
>d4d3	05					.byte *-L1	;wh_NameLength	length of name
>d4d4	45 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4d6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4d7	08					.byte NN	;wh_Flags	dictionary flags
=54355					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4d8	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4db					en = *	; remember here
>d4d6	03					.byte CL	;wh_CodeLength
>d4db	e5					.byte $e5
>d4dc	73 62 63 2e 7a 69 79		L1:	.text "sbc.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d4e3	07					.byte *-L1	;wh_NameLength	length of name
>d4e4	53 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4e6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4e7	08					.byte NN	;wh_Flags	dictionary flags
=54371					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4e8	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4eb					en = *	; remember here
>d4e6	03					.byte CL	;wh_CodeLength
>d4eb	f1					.byte $f1
>d4ec	73 62 63 2e 7a 78		L1:	.text "sbc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d4f2	06					.byte *-L1	;wh_NameLength	length of name
>d4f3	63 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4f5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4f6	08					.byte NN	;wh_Flags	dictionary flags
=54386					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4f7	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4fa					en = *	; remember here
>d4f5	03					.byte CL	;wh_CodeLength
>d4fa	f5					.byte $f5
>d4fb	73 62 63 2e 7a 78 69		L1:	.text "sbc.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d502	07					.byte *-L1	;wh_NameLength	length of name
>d503	72 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d505	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d506	08					.byte NN	;wh_Flags	dictionary flags
=54402					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d507	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d50a					en = *	; remember here
>d505	03					.byte CL	;wh_CodeLength
>d50a	e1					.byte $e1
>d50b	73 65 63			L1:	.text "sec"	;  name of word as a string, ending at wh_NameLastChar
>d50e	03					.byte *-L1	;wh_NameLength	length of name
>d50f	82 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d511	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d512	08					.byte NN	;wh_Flags	dictionary flags
=54414					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d513	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d516					en = *	; remember here
>d511	03					.byte CL	;wh_CodeLength
>d516	38					.byte $38
>d517	73 65 64			L1:	.text "sed"	;  name of word as a string, ending at wh_NameLastChar
>d51a	03					.byte *-L1	;wh_NameLength	length of name
>d51b	8e d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d51d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d51e	08					.byte NN	;wh_Flags	dictionary flags
=54426					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d51f	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d522					en = *	; remember here
>d51d	03					.byte CL	;wh_CodeLength
>d522	f8					.byte $f8
>d523	73 65 69			L1:	.text "sei"	;  name of word as a string, ending at wh_NameLastChar
>d526	03					.byte *-L1	;wh_NameLength	length of name
>d527	9a d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d529	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d52a	08					.byte NN	;wh_Flags	dictionary flags
=54438					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d52b	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d52e					en = *	; remember here
>d529	03					.byte CL	;wh_CodeLength
>d52e	78					.byte $78
>d52f	73 74 61			L1:	.text "sta"	;  name of word as a string, ending at wh_NameLastChar
>d532	03					.byte *-L1	;wh_NameLength	length of name
>d533	a6 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d535	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d536	08					.byte NN	;wh_Flags	dictionary flags
=54450					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d537	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d53a					en = *	; remember here
>d535	03					.byte CL	;wh_CodeLength
>d53a	8d					.byte $8d
>d53b	73 74 61 2e 78			L1:	.text "sta.x"	;  name of word as a string, ending at wh_NameLastChar
>d540	05					.byte *-L1	;wh_NameLength	length of name
>d541	b2 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d543	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d544	08					.byte NN	;wh_Flags	dictionary flags
=54464					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d545	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d548					en = *	; remember here
>d543	03					.byte CL	;wh_CodeLength
>d548	9d					.byte $9d
>d549	73 74 61 2e 79			L1:	.text "sta.y"	;  name of word as a string, ending at wh_NameLastChar
>d54e	05					.byte *-L1	;wh_NameLength	length of name
>d54f	c0 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d551	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d552	08					.byte NN	;wh_Flags	dictionary flags
=54478					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d553	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d556					en = *	; remember here
>d551	03					.byte CL	;wh_CodeLength
>d556	99					.byte $99
>d557	73 74 61 2e 7a			L1:	.text "sta.z"	;  name of word as a string, ending at wh_NameLastChar
>d55c	05					.byte *-L1	;wh_NameLength	length of name
>d55d	ce d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d55f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d560	08					.byte NN	;wh_Flags	dictionary flags
=54492					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d561	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d564					en = *	; remember here
>d55f	03					.byte CL	;wh_CodeLength
>d564	85					.byte $85
>d565	73 74 61 2e 7a 69 79		L1:	.text "sta.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d56c	07					.byte *-L1	;wh_NameLength	length of name
>d56d	dc d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d56f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d570	08					.byte NN	;wh_Flags	dictionary flags
=54508					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d571	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d574					en = *	; remember here
>d56f	03					.byte CL	;wh_CodeLength
>d574	91					.byte $91
>d575	73 74 61 2e 7a 78		L1:	.text "sta.zx"	;  name of word as a string, ending at wh_NameLastChar
>d57b	06					.byte *-L1	;wh_NameLength	length of name
>d57c	ec d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d57e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d57f	08					.byte NN	;wh_Flags	dictionary flags
=54523					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d580	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d583					en = *	; remember here
>d57e	03					.byte CL	;wh_CodeLength
>d583	95					.byte $95
>d584	73 74 61 2e 7a 78 69		L1:	.text "sta.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d58b	07					.byte *-L1	;wh_NameLength	length of name
>d58c	fb d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d58e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d58f	08					.byte NN	;wh_Flags	dictionary flags
=54539					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d590	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d593					en = *	; remember here
>d58e	03					.byte CL	;wh_CodeLength
>d593	81					.byte $81
>d594	73 74 78			L1:	.text "stx"	;  name of word as a string, ending at wh_NameLastChar
>d597	03					.byte *-L1	;wh_NameLength	length of name
>d598	0b d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d59a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d59b	08					.byte NN	;wh_Flags	dictionary flags
=54551					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d59c	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d59f					en = *	; remember here
>d59a	03					.byte CL	;wh_CodeLength
>d59f	8e					.byte $8e
>d5a0	73 74 78 2e 7a			L1:	.text "stx.z"	;  name of word as a string, ending at wh_NameLastChar
>d5a5	05					.byte *-L1	;wh_NameLength	length of name
>d5a6	17 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5a8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5a9	08					.byte NN	;wh_Flags	dictionary flags
=54565					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5aa	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5ad					en = *	; remember here
>d5a8	03					.byte CL	;wh_CodeLength
>d5ad	86					.byte $86
>d5ae	73 74 78 2e 7a 79		L1:	.text "stx.zy"	;  name of word as a string, ending at wh_NameLastChar
>d5b4	06					.byte *-L1	;wh_NameLength	length of name
>d5b5	25 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5b8	08					.byte NN	;wh_Flags	dictionary flags
=54580					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5b9	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5bc					en = *	; remember here
>d5b7	03					.byte CL	;wh_CodeLength
>d5bc	96					.byte $96
>d5bd	73 74 79			L1:	.text "sty"	;  name of word as a string, ending at wh_NameLastChar
>d5c0	03					.byte *-L1	;wh_NameLength	length of name
>d5c1	34 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5c4	08					.byte NN	;wh_Flags	dictionary flags
=54592					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5c5	20 02 ce	jsr $ce02		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5c8					en = *	; remember here
>d5c3	03					.byte CL	;wh_CodeLength
>d5c8	8c					.byte $8c
>d5c9	73 74 79 2e 7a			L1:	.text "sty.z"	;  name of word as a string, ending at wh_NameLastChar
>d5ce	05					.byte *-L1	;wh_NameLength	length of name
>d5cf	40 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5d2	08					.byte NN	;wh_Flags	dictionary flags
=54606					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5d3	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5d6					en = *	; remember here
>d5d1	03					.byte CL	;wh_CodeLength
>d5d6	84					.byte $84
>d5d7	73 74 79 2e 7a 78		L1:	.text "sty.zx"	;  name of word as a string, ending at wh_NameLastChar
>d5dd	06					.byte *-L1	;wh_NameLength	length of name
>d5de	4e d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5e0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5e1	08					.byte NN	;wh_Flags	dictionary flags
=54621					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5e2	20 ec cd	jsr $cdec		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5e5					en = *	; remember here
>d5e0	03					.byte CL	;wh_CodeLength
>d5e5	94					.byte $94
>d5e6	74 61 78			L1:	.text "tax"	;  name of word as a string, ending at wh_NameLastChar
>d5e9	03					.byte *-L1	;wh_NameLength	length of name
>d5ea	5d d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5ec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5ed	08					.byte NN	;wh_Flags	dictionary flags
=54633					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5ee	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5f1					en = *	; remember here
>d5ec	03					.byte CL	;wh_CodeLength
>d5f1	aa					.byte $aa
>d5f2	74 61 79			L1:	.text "tay"	;  name of word as a string, ending at wh_NameLastChar
>d5f5	03					.byte *-L1	;wh_NameLength	length of name
>d5f6	69 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5f8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5f9	08					.byte NN	;wh_Flags	dictionary flags
=54645					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5fa	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5fd					en = *	; remember here
>d5f8	03					.byte CL	;wh_CodeLength
>d5fd	a8					.byte $a8
>d5fe	74 73 78			L1:	.text "tsx"	;  name of word as a string, ending at wh_NameLastChar
>d601	03					.byte *-L1	;wh_NameLength	length of name
>d602	75 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d604	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d605	08					.byte NN	;wh_Flags	dictionary flags
=54657					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d606	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d609					en = *	; remember here
>d604	03					.byte CL	;wh_CodeLength
>d609	ba					.byte $BA
>d60a	74 78 61			L1:	.text "txa"	;  name of word as a string, ending at wh_NameLastChar
>d60d	03					.byte *-L1	;wh_NameLength	length of name
>d60e	81 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d610	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d611	08					.byte NN	;wh_Flags	dictionary flags
=54669					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d612	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d615					en = *	; remember here
>d610	03					.byte CL	;wh_CodeLength
>d615	8a					.byte $8a
>d616	74 78 73			L1:	.text "txs"	;  name of word as a string, ending at wh_NameLastChar
>d619	03					.byte *-L1	;wh_NameLength	length of name
>d61a	8d d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d61c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d61d	08					.byte NN	;wh_Flags	dictionary flags
=54681					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d61e	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d621					en = *	; remember here
>d61c	03					.byte CL	;wh_CodeLength
>d621	9a					.byte $9a
>d622	74 79 61			L1:	.text "tya"	;  name of word as a string, ending at wh_NameLastChar
>d625	03					.byte *-L1	;wh_NameLength	length of name
>d626	99 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d628	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d629	08					.byte NN	;wh_Flags	dictionary flags
=54693					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d62a	20 0b ce	jsr $ce0b		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d62d					en = *	; remember here
>d628	03					.byte CL	;wh_CodeLength
>d62d	98					.byte $98
=54693					asm_table = WordListLink ; head of instruction word list for disassembler
>d62e	70 75 73 68 2d 61		L1:	.text "push-a"	;  name of word as a string, ending at wh_NameLastChar
>d634	06					.byte *-L1	;wh_NameLength	length of name
>d635	a5 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d637	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d638	0c					.byte IM+NN	;wh_Flags	dictionary flags
=54708					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d639	a9 27		lda #$27			lda #<PushZA
.d63b	a0 b6		ldy #$b6			ldy #>PushZA
.d63d	4c 28 cb	jmp $cb28			jmp Jsr_Comma_YA
=7					CL	.var *-(WordListLink+wh_Xt)
=$d640					en = *	; remember here
>d637	07					.byte CL	;wh_CodeLength
>d640	2d 2d 3e			L1:	.text "-->"	;  name of word as a string, ending at wh_NameLastChar
>d643	03					.byte *-L1	;wh_NameLength	length of name
>d644	b4 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d646	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d647	0c					.byte IM+NN	;wh_Flags	dictionary flags
=54723					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d648	4c 18 c8	jmp $c818			jmp Here
=3					CL	.var *-(WordListLink+wh_Xt)
=$d64b					en = *	; remember here
>d646	03					.byte CL	;wh_CodeLength
>d64b	3c 6a				L1:	.text "<j"	;  name of word as a string, ending at wh_NameLastChar
>d64d	02					.byte *-L1	;wh_NameLength	length of name
>d64e	c3 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d650	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d651	04					.byte IM	;wh_Flags	dictionary flags
=54733					WordListLink ::= *-wh_xt ; remember the nt of this word for later
=0					CL	.var *-(WordListLink+wh_Xt)
=$d652					en = *	; remember here
>d650	00					.byte CL	;wh_CodeLength
.d652	60		rts				rts
>d653	3c 62				L1:	.text "<b"	;  name of word as a string, ending at wh_NameLastChar
>d655	02					.byte *-L1	;wh_NameLength	length of name
>d656	cd d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d658	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d659	0c					.byte IM+NN	;wh_Flags	dictionary flags
=54741					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d65a					asm_back_branch:
.d65a	20 18 c8	jsr $c818			jsr Here		; ( addr-l addr-h )
.d65d	20 ad c9	jsr $c9ad			jsr Minus		; ( offset )
.d660	a9 fe		lda #$fe			lda #$fe
.d662	4c 3b c8	jmp $c83b			jmp Minus_A
=11					CL	.var *-(WordListLink+wh_Xt)
=$d665					en = *	; remember here
>d658	0b					.byte CL	;wh_CodeLength
>d665	44 69 73 41 73 6d		L1:	.text "DisAsm"	;  name of word as a string, ending at wh_NameLastChar
>d66b	06					.byte *-L1	;wh_NameLength	length of name
>d66c	d5 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d66e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d66f	08					.byte NN	;wh_Flags	dictionary flags
=54763					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d670					DisAsm:
.d670	20 4b c2	jsr $c24b			jsr Bounds		; ( addr_end addr )
.d673					_instr:
.d673	20 a8 b2	jsr $b2a8			jsr underflow_2
.d676	b5 25		lda $25,x			lda DStack+0,x		; addr >= addr_end?
.d678	d5 27		cmp $27,x			cmp DStack+2,x
.d67a	b5 26		lda $26,x			lda DStack+1,x
.d67c	f5 28		sbc $28,x			sbc DStack+3,x
.d67e	90 03		bcc $d683			bcc +
.d680	4c 17 c3	jmp $c317			jmp Two_drop		; discard parms & return
.d683					+
.d683	20 ce a9	jsr $a9ce			jsr CR			; new line
.d686	20 4a cd	jsr $cd4a			jsr Dup			; print address
.d689	20 5b a7	jsr $a75b			jsr Dot_Hex
.d68c	20 c5 cb	jsr $cbc5			jsr Space
.d68f	a1 25		lda ($25,x)			lda (DStack+0,x)	; print opcode byte
.d691	20 cc d7	jsr $d7cc			jsr _print_a
.d694	a1 25		lda ($25,x)			lda (DStack+0,x)	; save opcode
.d696	85 17		sta $17				sta tmp2
.d698	20 4c c8	jsr $c84c			jsr One_plus
.d69b	a9 a5		lda #$a5			lda #<asm_table		; for each asm opcode word
.d69d	a0 d5		ldy #$d5			ldy #>asm_table
.d69f	85 15		sta $15				sta tmp1+0
.d6a1	84 16		sty $16				sty tmp1+1
.d6a3	d0 0f		bne $d6b4			bne _WTest
.d6a5	a0 82		ldy #$82	_WNext:		ldy #wh_WordListLink+1	;   next entry
.d6a7	b1 15		lda ($15),y			lda (tmp1),y
.d6a9	f0 2e		beq $d6d9			beq _unknown
.d6ab	48		pha				pha
.d6ac	88		dey				dey
.d6ad	b1 15		lda ($15),y			lda (tmp1),y
.d6af	85 15		sta $15				sta tmp1+0
.d6b1	68		pla				pla
.d6b2	85 16		sta $16				sta tmp1+1
.d6b4	a0 88		ldy #$88	_WTest:		ldy #wh_Xt+3		;   opcode match?
.d6b6	b1 15		lda ($15),y			lda (tmp1),y
.d6b8	c5 17		cmp $17				cmp tmp2
.d6ba	d0 e9		bne $d6a5			bne _WNext
.d6bc	a5 17		lda $17				lda tmp2		; save opcode
.d6be	48		pha				pha
.d6bf	a5 16		lda $16				lda tmp1+1		; save its nt
.d6c1	48		pha				pha
.d6c2	a5 15		lda $15				lda tmp1+0
.d6c4	48		pha				pha
.d6c5	a0 86		ldy #$86			ldy #wh_xt+1		; get processor routine addr lo byte from JSR
.d6c7	b1 15		lda ($15),y			lda (tmp1),y
.d6c9	c9 0b		cmp #$0b			cmp #<asm_0		; goto disasm processor
.d6cb	f0 17		beq $d6e4			beq _c0
.d6cd	c9 ec		cmp #$ec			cmp #<asm_1
.d6cf	f0 49		beq $d71a			beq _c1
.d6d1	c9 02		cmp #$02			cmp #<asm_2
.d6d3	f0 5b		beq $d730			beq _c2
.d6d5	c9 cc		cmp #$cc			cmp #<asm_r
.d6d7	f0 18		beq $d6f1			beq _cr
.d6d9					_unknown:
.d6d9	20 ad d7	jsr $d7ad			jsr _tab		; to source area
.d6dc	a9 3f		lda #$3f			lda #'?'
.d6de	20 b8 cb	jsr $cbb8			jsr Emit_A
.d6e1	4c 73 d6	jmp $d673			jmp _instr
.d6e4					_c0:
.d6e4	20 ad d7	jsr $d7ad			jsr _tab		; to source area
.d6e7	68		pla				pla			; get opcode word nt
.d6e8	a8		tay				tay
.d6e9	68		pla				pla
.d6ea	20 b2 d7	jsr $d7b2			jsr _print_opcode
.d6ed	68		pla				pla			; discard opcode
.d6ee	4c 73 d6	jmp $d673			jmp _instr
.d6f1					_cr:
.d6f1	20 c3 d7	jsr $d7c3			jsr _get_byte		; get displacement byte
.d6f4	a0 00		ldy #$00			ldy #0			; sign extend displacement
.d6f6	09 00		ora #$00			ora #0
.d6f8	10 01		bpl $d6fb			bpl +
.d6fa	88		dey				dey
.d6fb	20 e5 b5	jsr $b5e5	+		jsr PushYA
.d6fe	20 21 cd	jsr $cd21			jsr Over		; calc dest addr
.d701	20 94 c9	jsr $c994			jsr Plus
.d704	20 4a cd	jsr $cd4a			jsr Dup			; save for TypeSymbolN
.d707	20 ad d7	jsr $d7ad			jsr _tab		; to source area
.d70a	20 f9 c9	jsr $c9f9			jsr U_Dot		; print dest address
.d70d	68		pla				pla			; get opcode word nt
.d70e	a8		tay				tay
.d70f	68		pla				pla
.d710	20 b2 d7	jsr $d7b2			jsr _print_opcode
.d713	68		pla				pla			; discard opcode
.d714	20 ac 81	jsr $81ac			jsr TypeSymbolN		; print dest addr symbolic
.d717	4c 73 d6	jmp $d673			jmp _instr
.d71a					_c1:
.d71a	20 c3 d7	jsr $d7c3			jsr _get_byte		; get operand
.d71d	20 27 b6	jsr $b627			jsr PushZA
.d720	20 ad d7	jsr $d7ad			jsr _tab		; to source area
.d723	20 f9 c9	jsr $c9f9			jsr U_Dot		; print operand
.d726	68		pla				pla			; get opcode word nt
.d727	a8		tay				tay
.d728	68		pla				pla
.d729	20 b2 d7	jsr $d7b2			jsr _print_opcode
.d72c	68		pla				pla			; discard opcode
.d72d	4c 73 d6	jmp $d673			jmp _instr
.d730					_c2:
.d730	20 c3 d7	jsr $d7c3			jsr _get_byte		; get operand lo byte
.d733	48		pha				pha
.d734	20 c3 d7	jsr $d7c3			jsr _get_byte		; get operand hi byte
.d737	ca		dex				dex			; push operand bytes
.d738	ca		dex				dex
.d739	95 26		sta $26,x			sta DStack+1,x
.d73b	68		pla				pla
.d73c	95 25		sta $25,x			sta DStack+0,x
.d73e	20 ad d7	jsr $d7ad			jsr _tab		; to source area
.d741	20 4a cd	jsr $cd4a			jsr Dup
.d744	20 f9 c9	jsr $c9f9			jsr U_Dot		; print operand
.d747	68		pla				pla			; AY= opcode word nt
.d748	a8		tay				tay
.d749	68		pla				pla
.d74a	20 b2 d7	jsr $d7b2			jsr _print_opcode
.d74d	20 4a cd	jsr $cd4a			jsr Dup
.d750	20 ac 81	jsr $81ac			jsr TypeSymbolN		; print operand as symbol
.d753	68		pla				pla			; get opcode
.d754	c9 20		cmp #$20			cmp #$20		;  JSR
.d756	f0 09		beq $d761			beq _jsr
.d758	e8		inx		_jdrop:		inx			; Drop operand
.d759	e8		inx				inx
.d75a	4c 73 d6	jmp $d673			jmp _instr		; ( addr_end addr )
.d75d	e8		inx		_2drop:		inx			; Drop jsr_nt
.d75e	e8		inx				inx
.d75f	d0 f7		bne $d758			bne _jdrop
.d761					_jsr:
.d761	20 55 b2	jsr $b255			jsr PopYA
.d764	c9 01		cmp #$01			cmp #<sliteral_runtime	; string literal?
.d766	d0 42		bne $d7aa			bne _not_sliteral
.d768	c0 b7		cpy #$b7			cpy #>sliteral_runtime
.d76a	d0 3e		bne $d7aa			bne _not_sliteral
.d76c	20 ce a9	jsr $a9ce			jsr CR
.d76f	20 4a cd	jsr $cd4a			jsr Dup			; ( addr_end addr addr )
.d772	20 5b a7	jsr $a75b			jsr Dot_Hex
.d775	20 c5 cb	jsr $cbc5			jsr Space
.d778	20 4a cd	jsr $cd4a			jsr Dup			; ( addr_end ? addr )
.d77b	20 c3 d7	jsr $d7c3			jsr _get_byte		; get JMP opcode
.d77e	20 c3 d7	jsr $d7c3			jsr _get_byte		; get JMP addr lo byte
.d781	95 27		sta $27,x			sta DStack+2,x
.d783	20 c3 d7	jsr $d7c3			jsr _get_byte		; get JMP addr hi byte
.d786	95 28		sta $28,x			sta DStack+3,x		; ( addr_end string_end addr )
.d788	20 ce a9	jsr $a9ce			jsr CR
.d78b	20 4a cd	jsr $cd4a			jsr Dup
.d78e	20 5b a7	jsr $a75b			jsr Dot_Hex
.d791	20 c5 cb	jsr $cbc5			jsr Space
.d794	b5 25		lda $25,x	_slit_11:	lda DStack+0,x		; done with string data?
.d796	d5 27		cmp $27,x			cmp DStack+2,x
.d798	b5 26		lda $26,x			lda DStack+1,x
.d79a	f5 28		sbc $28,x			sbc DStack+3,x
.d79c	b0 06		bcs $d7a4			bcs _slit_19
.d79e	20 c3 d7	jsr $d7c3			jsr _get_byte
.d7a1	4c 94 d7	jmp $d794			jmp _slit_11
.d7a4					_slit_19:
.d7a4	20 71 c7	jsr $c771			jsr Nip			; ( addr_end addr )
.d7a7	4c 73 d6	jmp $d673			jmp _instr
.d7aa					_not_sliteral:
.d7aa	4c 73 d6	jmp $d673			jmp _instr
.d7ad					_tab:
.d7ad	a9 09		lda #$09			lda #9
.d7af	4c b8 cb	jmp $cbb8			jmp Emit_A
.d7b2					_print_opcode:
.d7b2	20 58 cd	jsr $cd58			jsr PushAY		; save opcode word nt
.d7b5	20 c5 cb	jsr $cbc5			jsr Space
.d7b8	20 21 bc	jsr $bc21			jsr Name_To_String	; get name string
.d7bb	4c d2 cb	jmp $cbd2			jmp Type		; type word name
.d7be					_get_byte_silent:
.d7be	a1 25		lda ($25,x)			lda (DStack+0,x)
.d7c0	4c 4c c8	jmp $c84c			jmp One_plus
.d7c3					_get_byte:
.d7c3	20 be d7	jsr $d7be			jsr _get_byte_silent
.d7c6	48		pha				pha
.d7c7	20 cc d7	jsr $d7cc			jsr _print_a
.d7ca	68		pla				pla
.d7cb	60		rts				rts
.d7cc					_print_a:
.d7cc	20 27 b6	jsr $b627			jsr PushZA
.d7cf	20 39 a7	jsr $a739			jsr C_Dot_Hex
.d7d2	4c c5 cb	jmp $cbc5			jmp Space
=54763					assembler_dictionary_start = WordListLink ; END of ASSEMBLER-WORDLIST
=0					WordListLink .var 0
>d7d5	6c				L1:	.text "l"	;  name of word as a string, ending at wh_NameLastChar
>d7d6	01					.byte *-L1	;wh_NameLength	length of name
>d7d7	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7d9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7da	08					.byte NN	;wh_Flags	dictionary flags
=55126					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7db					Editor_l:
.d7db	20 8a a1	jsr $a18a			jsr Scr
.d7de	20 b4 cc	jsr $ccb4			jsr Fetch
.d7e1	20 39 a2	jsr $a239			jsr Block	; Get the current screen contents.
.d7e4	20 ce a9	jsr $a9ce			jsr CR
.d7e7	20 01 b7	jsr $b701			jsr SLiteral_Runtime
.d7ea	4c f5 d7	jmp $d7f5			  jmp +				; for SLiteral_Runtime
>d7ed	53 63 72 65 65 6e 20 23				  .text "Screen #"		; for SLiteral_Runtime
.d7f5					+
.d7f5	20 d2 cb	jsr $cbd2			jsr Type
.d7f8	20 8a a1	jsr $a18a			jsr Scr		; print screen number
.d7fb	20 b4 cc	jsr $ccb4			jsr Fetch
.d7fe	a9 04		lda #$04			lda #4		;    in 4 positions
.d800	20 2d ca	jsr $ca2d			jsr U_Dot_R_A
.d803	a9 00		lda #$00			lda #0			; line #
.d805					_line_loop:
.d805	48		pha				pha
.d806	20 ce a9	jsr $a9ce			jsr CR
.d809	68		pla				pla		; Print the line number
.d80a	48		pha				pha
.d80b	20 27 b6	jsr $b627			jsr PushZA
.d80e	a9 02		lda #$02			lda #2		;   in 2 positions
.d810	20 2d ca	jsr $ca2d			jsr U_Dot_R_A
.d813	20 c5 cb	jsr $cbc5			jsr Space
.d816	20 4a cd	jsr $cd4a			jsr Dup		; Print one line using the address on the stack.
.d819	a9 40		lda #$40			lda #64
.d81b	20 27 b6	jsr $b627			jsr PushZA
.d81e	20 d2 cb	jsr $cbd2			jsr Type
.d821	a9 40		lda #$40			lda #64		; move address to the next line.
.d823	20 fb c7	jsr $c7fb			jsr plus_a
.d826	68		pla				pla		; Increment the line number
.d827	18		clc				clc
.d828	69 01		adc #$01			adc #1
.d82a	c9 10		cmp #$10			cmp #16		; See if we are done.
.d82c	d0 d7		bne $d805			bne _line_loop
.d82e	e8		inx				inx		; Drop the address
.d82f	e8		inx				inx
.d830	4c ce a9	jmp $a9ce			jmp CR
=88					CL	.var *-(WordListLink+wh_Xt)
=$d833					en = *	; remember here
>d7d9	58					.byte CL	;wh_CodeLength
.d833					Editor_Screen_Helper:
.d833	20 4a cd	jsr $cd4a			jsr Dup
.d836	20 8a a1	jsr $a18a			jsr Scr
.d839	20 97 cc	jsr $cc97			jsr Store
.d83c	4c a3 a2	jmp $a2a3			jmp Buffer
>d83f	65 6e 74 65 72 2d 73 63		L1:	.text "enter-screen"	;  name of word as a string, ending at wh_NameLastChar
>d847	72 65 65 6e
>d84b	0c					.byte *-L1	;wh_NameLength	length of name
>d84c	56 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d84e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d84f	08					.byte NN	;wh_Flags	dictionary flags
=55243					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d850					Editor_Enter_Screen:
.d850	20 33 d8	jsr $d833			jsr Editor_Screen_Helper
.d853	a9 00		lda #$00			lda #0			; Overwrite the lines one at a time.
.d855	95 25		sta $25,x	_loop:		sta DStack+0,x
.d857	20 27 b6	jsr $b627			jsr PushZA		; Put the current line number on the stack.
.d85a	20 be d8	jsr $d8be			jsr Editor_o		; prompt for overwrite.
.d85d	f6 25		inc $25,x			inc DStack+0,x		; Move on to the next line.
.d85f	b5 25		lda $25,x			lda DStack+0,x
.d861	c9 10		cmp #$10			cmp #16
.d863	90 f0		bcc $d855			bcc _loop
.d865	e8		inx				inx			; Drop work area
.d866	e8		inx				inx
=23					CL	.var *-(WordListLink+wh_Xt)
=$d867					en = *	; remember here
>d84e	17					.byte CL	;wh_CodeLength
.d867	60		rts				rts
>d868	6c 69 6e 65			L1:	.text "line"	;  name of word as a string, ending at wh_NameLastChar
>d86c	04					.byte *-L1	;wh_NameLength	length of name
>d86d	cb d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d86f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d870	08					.byte NN	;wh_Flags	dictionary flags
=55276					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d871					Editor_line:
.d871	a9 06		lda #$06			lda #6		; Multiply the TOS by 64 (chars/line) to compute offset.
.d873	20 33 c9	jsr $c933			jsr LShift_A	; *64 is same as left shift 6 times.
.d876	20 8a a1	jsr $a18a			jsr Scr
.d879	20 b4 cc	jsr $ccb4			jsr Fetch
.d87c	20 39 a2	jsr $a239			jsr Block
.d87f	4c 94 c9	jmp $c994			jmp Plus
=17					CL	.var *-(WordListLink+wh_Xt)
=$d882					en = *	; remember here
>d86f	11					.byte CL	;wh_CodeLength
>d882	65 72 61 73 65 2d 73 63		L1:	.text "erase-screen"	;  name of word as a string, ending at wh_NameLastChar
>d88a	72 65 65 6e
>d88e	0c					.byte *-L1	;wh_NameLength	length of name
>d88f	ec d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d891	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d892	08					.byte NN	;wh_Flags	dictionary flags
=55310					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d893					Editor_Erase_Screen:
.d893	20 33 d8	jsr $d833			jsr Editor_Screen_Helper
.d896	a9 00		lda #$00			lda #<1024
.d898	a0 04		ldy #$04			ldy #>1024
.d89a	20 e5 b5	jsr $b5e5			jsr PushYA
.d89d	20 67 bc	jsr $bc67			jsr Blank		; Erase the entire block (fill with spaces).
.d8a0	4c 8f a2	jmp $a28f			jmp Update		; Mark buffer as updated.
=16					CL	.var *-(WordListLink+wh_Xt)
=$d8a3					en = *	; remember here
>d891	10					.byte CL	;wh_CodeLength
>d8a3	65 6c				L1:	.text "el"	;  name of word as a string, ending at wh_NameLastChar
>d8a5	02					.byte *-L1	;wh_NameLength	length of name
>d8a6	0e d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d8a8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d8a9	08					.byte NN	;wh_Flags	dictionary flags
=55333					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d8aa					Editor_el:
.d8aa	20 71 d8	jsr $d871			jsr Editor_line
.d8ad	a9 40		lda #$40			lda #64			;(# of chars/line)
.d8af	20 27 b6	jsr $b627			jsr PushZA
.d8b2	20 67 bc	jsr $bc67			jsr Blank		; Fill with spaces.
.d8b5	4c 8f a2	jmp $a28f			jmp Update		; Mark buffer as updated.
=14					CL	.var *-(WordListLink+wh_Xt)
=$d8b8					en = *	; remember here
>d8a8	0e					.byte CL	;wh_CodeLength
>d8b8	6f				L1:	.text "o"	;  name of word as a string, ending at wh_NameLastChar
>d8b9	01					.byte *-L1	;wh_NameLength	length of name
>d8ba	25 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d8bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d8bd	08					.byte NN	;wh_Flags	dictionary flags
=55353					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d8be					Editor_o:
.d8be	20 ce a9	jsr $a9ce			jsr CR
.d8c1	20 4a cd	jsr $cd4a			jsr Dup
.d8c4	a9 02		lda #$02			lda #2
.d8c6	20 2d ca	jsr $ca2d			jsr U_Dot_R_A
.d8c9	20 c5 cb	jsr $cbc5			jsr Space
.d8cc	a9 2a		lda #$2a			lda #'*'
.d8ce	20 b8 cb	jsr $cbb8			jsr Emit_A
.d8d1	20 c5 cb	jsr $cbc5			jsr Space
.d8d4	20 71 d8	jsr $d871			jsr Editor_line
.d8d7	20 4a cd	jsr $cd4a			jsr Dup		; Save a copy of the line address for later.
.d8da	a9 40		lda #$40			lda #64		; chars/line
.d8dc	20 27 b6	jsr $b627			jsr PushZA
.d8df	20 cf c0	jsr $c0cf			jsr Accept
.d8e2	20 4a cd	jsr $cd4a			jsr Dup
.d8e5	20 74 cc	jsr $cc74			jsr Not_Rot
.d8e8	20 94 c9	jsr $c994			jsr Plus
.d8eb	a9 40		lda #$40			lda #64		; chars/line
.d8ed	20 27 b6	jsr $b627			jsr PushZA
.d8f0	20 4e cc	jsr $cc4e			jsr Rot
.d8f3	20 ad c9	jsr $c9ad			jsr Minus
.d8f6	20 67 bc	jsr $bc67			jsr Blank
.d8f9	4c 8f a2	jmp $a28f			jmp Update
=62					CL	.var *-(WordListLink+wh_Xt)
=$d8fc					en = *	; remember here
>d8bc	3e					.byte CL	;wh_CodeLength
=55353					editor_dictionary_start = WordListLink ; END of EDITOR-WORDLIST

;******  Processing file: platform/../strings.asm

>d8fc	20 6f 6b 00			str_ok:         .text " ok", 0         ; note space at beginning
>d900	20 63 6f 6d 70 69 6c 65		str_compiled:   .text " compiled", 0   ; note space at beginning
>d908	64 00
>d90a	72 65 64 65 66 69 6e 65		str_redefined:  .text "redefined ", 0  ; note space at end
>d912	64 20 00
>d915	41 73 73 65 6d 62 6c 65		str_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>d91d	72 20 00
>d920	45 64 69 74 6f 72 20 00		str_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>d928	46 6f 72 74 68 20 00		str_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>d92f	52 6f 6f 74 20 00		str_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>d935	66 6c 61 67 73 3a 00		str_see_flags:  .text "flags:", 0
>d93c	6e 74 3a 20 24 00		str_see_nt:     .text "nt: $", 0
>d942	78 74 3a 20 24 00		str_see_xt:     .text "xt: $", 0
>d948	73 69 7a 65 3a 20 23 00		str_see_size:   .text "size: #", 0
.d950					Exception_Text_List:
>d950	ff 00					.text $100+err_Abort,0
>d952	fe 00					.text $100+err_AbortQuote,0
>d954	fd 53 74 61 63 6b 20 4f			.text $100+err_Stack_Overflow,"Stack Overflow",0
>d95c	76 65 72 66 6c 6f 77 00
>d964	fc 53 74 61 63 6b 20 55			.text $100+err_Stack_Underflow,"Stack Underflow",0
>d96c	6e 64 65 72 66 6c 6f 77 00
>d975	f9 64 6f 2d 6c 6f 6f 70			.text $100+err_DoLoop_TooDeep,"do-loops nested too deeply during execution",0
>d97d	73 20 6e 65 73 74 65 64 20 74 6f 6f 20 64 65 65
>d98d	70 6c 79 20 64 75 72 69 6e 67 20 65 78 65 63 75
>d99d	74 69 6f 6e 00
>d9a2	f6 44 69 76 69 64 65 20			.text $100+err_DivideBy0,"Divide by 0",0
>d9aa	62 79 20 30 00
>d9af	f5 6f 75 74 20 6f 66 20			.text $100+err_OutOfRange,"out of range",0
>d9b7	72 61 6e 67 65 00
>d9bd	f4 61 72 67 75 6d 65 6e			.text $100+err_ArgTypeMismatch,"argument type mismatch",0
>d9c5	74 20 74 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>d9d5	f3 55 6e 64 65 66 69 6e			.text $100+err_UndefinedWord,"Undefined word",0
>d9dd	65 64 20 77 6f 72 64 00
>d9e5	f2 49 6e 74 65 72 70 72			.text $100+err_CompileOnly,"Interpreting a Compile-only word",0
>d9ed	65 74 69 6e 67 20 61 20 43 6f 6d 70 69 6c 65 2d
>d9fd	6f 6e 6c 79 20 77 6f 72 64 00
>da07	eb 75 6e 73 75 70 70 6f			.text $100+err_Unsupported,"unsupported operation",0 ;  (e.g., AT-XY on a too-dumb terminal)
>da0f	72 74 65 64 20 6f 70 65 72 61 74 69 6f 6e 00
>da1e	ea 63 6f 6e 74 72 6f 6c			.text $100+err_ControlMismatch,"control structure mismatch",0
>da26	20 73 74 72 75 63 74 75 72 65 20 6d 69 73 6d 61
>da36	74 63 68 00
>da3a	e0 69 6e 76 61 6c 69 64			.text $100+err_InvalidName,"invalid name",0 ; argument (e.g., TO name)
>da42	20 6e 61 6d 65 00
>da48	df 62 6c 6f 63 6b 20 72			.text $100+err_BlockRead,"block read",0
>da50	65 61 64 00
>da54	de 62 6c 6f 63 6b 20 77			.text $100+err_BlockWrite,"block write",0
>da5c	72 69 74 65 00
>da61	d6 46 50 20 64 69 76 69			.text $100+err_FPDivideBy0,"FP divide by zero",0
>da69	64 65 20 62 79 20 7a 65 72 6f 00
>da74	d5 46 50 20 72 65 73 75			.text $100+err_FPOutOfRange,"FP result out of range",0
>da7c	6c 74 20 6f 75 74 20 6f 66 20 72 61 6e 67 65 00
>da8c	d4 46 50 20 73 74 61 63			.text $100+err_FPStackOverflow,"FP stack overflow",0
>da94	6b 20 6f 76 65 72 66 6c 6f 77 00
>da9f	d3 46 50 20 73 74 61 63			.text $100+err_FPStackUnderflow,"FP stack underflow",0
>daa7	6b 20 75 6e 64 65 72 66 6c 6f 77 00
>dab3	d2 46 50 20 69 6e 76 61			.text $100+err_FPInvalidArg,"FP invalid argument",0
>dabb	6c 69 64 20 61 72 67 75 6d 65 6e 74 00
>dac8	ca 46 50 20 75 6e 64 65			.text $100+err_FPUnderflow,"FP underflow",0
>dad0	72 66 6c 6f 77 00
>dad6	c5 41 4c 4c 4f 43 41 54			.text $100+err_Allocate,"ALLOCATE",0
>dade	45 00
>dae0	c4 46 52 45 45 00			.text $100+err_Free,"FREE",0
>dae6	6b 52 65 66 69 6c 6c 00			.text $100+err_Refill,"Refill",0
>daee	6a 44 65 66 65 72 20 6e			.text $100+err_Defer,"Defer not set",0
>daf6	6f 74 20 73 65 74 00
>dafd	69 4e 6f 74 20 63 6f 6d			.text $100+err_NotCompiling,"Not compiling",0
>db05	70 69 6c 69 6e 67 00
>db0c	68 41 6c 72 65 61 64 79			.text $100+err_AlreadyCompiling,"Already compiling",0
>db14	20 63 6f 6d 70 69 6c 69 6e 67 00
>db1f	66 4e 6f 20 77 6f 72 64			.text $100+err_wordlist,"No wordlists available",0
>db27	6c 69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>db37	67 50 6c 65 61 73 65 20			.text $100+err_blockwords,"Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
>db3f	61 73 73 69 67 6e 20 76 65 63 74 6f 72 73 20 42
>db4f	4c 4f 43 4b 2d 52 45 41 44 2d 56 45 43 54 4f 52
>db5f	20 61 6e 64 20 42 4c 4f 43 4b 2d 57 52 49 54 45
>db6f	2d 56 45 43 54 4f 52 00
>db77	00					.text 0 ; end of list

;******  Return to file: platform/../taliforth.asm


;******  Return to file: platform/platform-65816S.asm

>0765					hist_buff: .fill 8*128	; Input History for ACCEPT
.0b65					cp0:
.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 3b f0	lda $f03b,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 2b f0	jsr $f02b	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	d0 f5		bne $f013	                bne -
.f01e					_done:
.f01e	4c 4c 80	jmp $804c	                jmp Cold
.f021					kernel_getc:
.f021					_loop:
.f021	ee 34 03	inc $0334	-		inc RndState+0	; randomize
>f024	22						.byte $22	; jsl GET_BYTE_FROM_PC
>f025	33 e0						.word $e033
>f027	00						.byte 0
.f028	b0 f7		bcs $f021			bcs -
.f02a	60		rts				rts
.f02b					kernel_putc:
>f02b	22				-		.byte $22	; jsl SEND_BYTE_TO_PC
>f02c	63 e0						.word $e063
>f02e	00						.byte 0
.f02f	b0 fa		bcs $f02b			bcs -
.f031	60		rts				rts
.f032					platform_bye:
.f032	00		brk #		                brk
.f033					platform_CCAt:
.f033	ca		dex				dex
.f034	ca		dex				dex
.f035	ca		dex				dex
.f036	ca		dex				dex
>f037	02 f4 25					.byte $02,$F4,DStack ; cop $f4	get 65816s simulator cycle count in DStack,x
.f03a	60		rts				rts
.f03b					s_kernel_id:
>f03b	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 kernel for 65816s (31. May 2024)", AscCR,AscLF, 0
>f043	74 68 20 32 20 6b 65 72 6e 65 6c 20 66 6f 72 20
>f053	36 35 38 31 36 73 20 28 33 31 2e 20 4d 61 79 20
>f063	32 30 32 34 29 0d 0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
