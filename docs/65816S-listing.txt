
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/65816S-listing.txt --labels=docs/65816S-labelmap.txt --output TaliForth-65816S.bin platform/platform-65816S.asm
; Mon Jun 24 23:53:59 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-65816S.asm

=$0100					RStack = $0100	; begin of 6502 Return Stack
=$ff					rsp0      = $ff		; initial Return Stack Pointer (6502 stack)
=$8000					cp_end    = $8000	; Last RAM byte available for code
=84					PadOffset = 84	; offset from CP to PAD (holds number strings)
=79					MAX_LINE_LENGTH  = 79      ; output line size
=20					DDim = 20	; # of cells in data stack
=10					FDim = 10	; # of entries in floating-point stack
=8					DoStkDim = 8	; # of entries in Do stack
=["cr","lf"]				TALI_OPTION_CR_EOL := [ "cr", "lf" ]
=$ff					bsize     = $ff		; size of input/output buffers
>0200					buffer0: .fill bsize	; input buffer

;******  Processing file: platform/../taliforth.asm

=					TALI_OPTIONAL_WORDS := ["fp","fpe", "fpieee","fptrancendentals", "fphyperbolic", "ed", "editor", "ramdrive", "block", "environment?", "assembler", "wordlist" ]
=-1					err_Abort		= -1
=-2					err_AbortQuote		= -2
=-3					err_Stack_Overflow	= -3
=-4					err_Stack_Underflow	= -4
=-5					err_Return_Stack_Overflow = -5
=-6					err_Return_Stack_Underflow = -6
=-7					err_DoLoop_TooDeep	= -7	; do-loops nested too deeply during execution
=-8					err_Dictionary_Overflow	= -8
=-9					err_InvalidMemoryAddr	= -9	; invalid memory address
=-10					err_DivideBy0		= -10	; division by zero
=-11					err_OutOfRange		= -11	; result out of range
=-12					err_ArgTypeMismatch	= -12	; argument type mismatch
=-13					err_UndefinedWord	= -13
=-14					err_CompileOnly		= -14	; interpreting a compile-only word
=-15					err_Forget		= -15	; invalid FORGET
=-16					err_EmptyName		= -16	; attempt to use zero-length string as a name
=-17					err_PicStringOverflow	= -17	; pictured numeric output string overflow
=-18					err_ParsedStringOverflow = -18	; parsed string overflow
=-19					err_NameTooLong		= -19	; definition name too long
=-20					err_WriteToRO		= -20	; write to a read-only location
=-21					err_Unsupported		= -21	; unsupported operation  (e.g., AT-XY on a too-dumb terminal)
=-22					err_ControlMismatch	= -22	; control structure mismatch
=-23					err_AddrAlignment	= -23	; address alignment exception
=-24					err_InvalidNumericArg	= -24	; invalid numeric argument
=-25					err_ReturnStackImbalance = -25	; return stack imbalance
=-26					err_LoopParmUnavailable = -26	; loop parameters unavailable
=-27					err_InvalidRecursion	= -27	; invalid recursion
=-28					err_UserInterrupt	= -28	; user interrupt
=-29					err_CompilerNesting	= -29	; compiler nesting
=-30					err_Obsolete		= -30	; obsolescent feature
=-31					err_NoBody		= -31	; >BODY used on non-CREATEd definition
=-32					err_InvalidName		= -32	; invalid name argument (e.g., TO name)
=-33					err_BlockRead		= -33	; block read exception
=-34					err_BlockWrite		= -34	; block write exception
=-35					err_InvalidBlock	= -35	; invalid block number
=-36					err_InvalidFilePosition = -36	; invalid file position
=-37					err_FileIO		= -37	; file I/O exception
=-38					err_FileMissing		= -38	; non-existent file
=-39					err_EndOfFile		= -39	; unexpected end of file
=-40					err_InvalidBase		= -40	; invalid BASE for floating point conversion
=-41					err_LossOfPrecision	= -41	; loss of precision
=-42					err_FPDivideBy0		= -42	; floating-point divide by zero
=-43					err_FPOutOfRange	= -43	; floating-point result out of range
=-44					err_FPStackOverflow	= -44	; floating-point stack overflow
=-45					err_FPStackUnderflow	= -45	; floating-point stack underflow
=-46					err_FPInvalidArg	= -46	; floating-point invalid argument
=-47					err_CompileWordsDeleted = -47	; compilation word list deleted
=-48					err_PostponeInvalid	= -48	; invalid POSTPONE
=-49					err_SearchOrderOverflow = -49	; search-order overflow
=-50					err_SearchOrderUnderflow = -50	; search-order underflow
=-51					err_CompileWordlistChanged = -51 ; compilation word list changed
=-52					err_ControlStackOverflow = -52	; control-flow stack overflow
=-53					err_ExceptionStackOverflow = -53 ; exception stack overflow
=-54					err_FPUnderflow		= -54	; floating-point underflow
=-55					err_FPFault		= -55	; floating-point unidentified fault
=-56					err_Quit		= -56	; QUIT
=-57					err_ConsoleIO		= -57	; exception in sending or receiving a character
=-58					err_BracketIf		= -58	; [IF], [ELSE], or [THEN] exception
=-59					err_Allocate		= -59	; ALLOCATE
=-60					err_Free		= -60	; FREE
=-61					err_Resize		= -61	; RESIZE
=-62					err_CloseFile		= -62	; CLOSE-FILE
=-63					err_CreateFile		= -63	; CREATE-FILE
=-64					err_DeleteFile		= -64	; DELETE-FILE
=-65					err_FilePosition	= -65	; FILE-POSITION
=-66					err_FileSize		= -66	; FILE-SIZE
=-67					err_FileStatus		= -67	; FILE-STATUS
=-68					err_FlushFile		= -68	; FLUSH-FILE
=-69					err_OpenFile		= -69	; OPEN-FILE
=-70					err_ReadFile		= -70	; READ-FILE
=-71					err_ReadLine		= -71	; READ-LINE
=-72					err_RenameFile		= -72	; RENAME-FILE
=-73					err_RepositionFile	= -73	; REPOSITION-FILE
=-74					err_ResizeFile		= -74	; RESIZE-FILE
=-75					err_WriteFile		= -75	; WRITE-FILE
=-76					err_WriteLine		= -76	; WRITE-LINE
=-77					err_MalformedXChar	= -77	; Malformed xchar
=-78					err_Substitute		= -78	; SUBSTITUTE
=-79					err_Replaces		= -79	; REPLACES
=-149					err_Refill		= -149	; Refill failed
=-150					err_Defer		= -150	; Defer not set
=-151					err_AlreadyInterpreting	= -151	; entering interpret when already interpreting
=-152					err_AlreadyCompiling	= -152	; entering compile when already compiling
=-154					err_TooManyWordlists   	= -154
.0000					zp0:
>0000					cp:	.word ?		; Compiler Pointer (see HERE)
>0002					InSrc:	.word ?		; input Source for SOURCE-ID
>0004					Cib:	.word ?		; address of current input buffer
>0006					CibLen:	.word ?		; length of current input buffer
>0008					ToIn:	.word ?		; pointer to CIB (>IN in Forth)
>000a					state:	.word ?		; STATE: -1 compile, 0 interpret
>000c					status: .word ?		; internal status flags
>000e					WorkWord: .word ?	; nt or xt of word being compiled (see status)
>0010					dp:	.word ?		; Dictionary Pointer temp
>0012					DoIndex: .word ?	; current Do index
>0014					tmp1:	.word ?		; temporary storage
>0016					tmp2:	.word ?		; temporary storage
>0018					tmp3:	.word ?		; temporary storage
>001a					tmp4:	.word ?		; temporary storage (tmpdsp)
>001c					tmp5:	.word ?		; temporary storage (tmptos)
>001e					editor1: .word ?	; temporary for editors
>0020					editor2: .word ?	; temporary for editors
>0022					editor3: .word ?	; temporary for editors
>0024					DStack:	.fill DDim*2	; data stack
=40					DStack0 = *-DStack	;   initial Data Stack index value
.8000					Cold_zp_table:
>8000	66 0b					.word cp0		; cp
>8002	00 00					.word 0			; insrc (SOURCE-ID is 0 for keyboard)
>8004	00 02					.word buffer0		; cib
>8006	00 00					.word 0			; ciblen
>8008	00 00					.word 0			; toin
>800a	00 00					.word 0			; state (0 = interpret)
>800c	00 00					.word 0			; status
=14					Cold_zp_table_length = *-Cold_zp_table
.02ff					User0:
>02ff					PrecisionV: .byte ?	; # of decimal places for FP print
>0300					base:	.word ?		; number radix, default decimal
>0302					nc_limit: .word ?	; limit for Native Compile size
>0304					uf_strip: .word ?	; flag to strip underflow detection code
>0306					output:	.word ?		; vector for EMIT
>0308					input:	.word ?		; vector for KEY
>030a					HaveKey: .word ?	; vector for KEY?
>030c					BlkV:	.word ?		; BLK
>030e					ScrV:	.word ?		; SCR
>0310					CurrentV: .byte ?	; CURRENT (byte) (Compilation wordlist)
>0311					Num_WordlistsV: .byte ?	; #WORDLISTS (byte)
=12					max_wordlists = 12	; Maximum number of wordlists supported
>0312					WordlistsV: .fill 2*max_wordlists	; WORDLISTS (cells)
>032a					Num_OrderV: .byte ?	; #ORDER (byte)
>032b					Search_OrderV: .fill 9	; SEARCH-ORDER (bytes)
.0334					MarkEnd:
>0334					ToHold:	.byte ?		; pad buffer index for formatted output
>0335					RndState: .dword ?	; random # state
=0					wid_Forth = 0
=1					wid_Editor = 1
=2					wid_Assembler = 2
=3					wid_Root = 3
.800e					Cold_user_table:
>800e	08					.byte 8			; PrecisionV
>800f	0a 00					.word 10		; base
>8011	08 00					.word 8			; nc-limit
>8013	00 00					.word 0			; uf_strip (off by default)
>8015	20 f1					.word kernel_putc	; output
>8017	11 f1					.word kernel_getc	; input
>8019	1b f1					.word kernel_havekey	; havekey
>801b	00 00					.word 0				; BLK
>801d	00 00					.word 0				; SCR
>801f	00					.byte 0				; CURRENT = FORTH-WORDLIST
>8020	04					.byte 4				; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>8021	3b d0					.word forth_dictionary_start	; FORTH-WORDLIST
>8023	25 db					.word editor_dictionary_start	; EDITOR-WORDLIST
>8025	26 d9					.word assembler_dictionary_start ; ASSEMBLER-WORDLIST
>8027	7f d0					.word root_dictionary_start	; ROOT-WORDLIST
>8029	00 00 00 00 00 00 00 00			.word 0,0,0,0,0,0,0,0		; User wordlists
>8031	00 00 00 00 00 00 00 00
>8039	02					.byte 2				; #ORDER
>803a	00 02 00 00 00 00 00 00			.byte wid_Forth,wid_Assembler,0,0,0,0,0,0,0	; search-order
>8042	00
=53					Cold_user_table_length = *-Cold_user_table
=$03					AscCC   = $03	; break (CTRL-c)
=$07					AscBELL = $07	; bell sound
=$08					AscBS   = $08	; backspace
=$09					AscHT	= $09	; tab
=$0a					AscLF   = $0a	; line feed
=$0b					AScVT	= $0b	; vertical tab
=$0c					AscFF	= $0c	; form feed
=$0d					AscCR   = $0d	; carriage return
=$0e					AscCN   = $0e	; CTRL-n (used to recall next input history)
=$10					AscCP   = $10	; CTRL-p (used to recall previous input history)
=$1b					AscESC  = $1b	; escape
=$20					AscSP   = $20	; space
=$22					AscDQuote = $22	; double quote
=$5c					AscBackslash = $5c ; backslash
=$7f					AscDEL  = $7f	; delete (CTRL-h)
>0000							.fill $80 ; name, right justified
=127					wh_NameLastChar	= *-1	;last char of name
>0080					wh_HNL:		.byte ?	;
=$e0					wh_HNL_HashMask = $e0		; lo 3 bits of last char of name
=$1f					wh_HNL_NameLengthMask = $1f	; length of name
.0081					wh_
>0081					wh_WordListLink: .word ? ;link to nt of previous word in wordlist chain
>0083					wh_CodeLength:	.byte ?	;size of code (0xff = 255 or greater)
>0084					wh_Flags:	.byte ?	; created by adding the flags defined as:
=1					CO =   1 ; Compile Only
=2					AN =   2 ; Always Native Compile (may not be called by JSR)
=4					IM =   4 ; Immediate Word
=8					NN =   8 ; Never Native Compile (must always be called by JSR)
=$10					UF = $10 ; Includes strippable Underflow Check
=$40					R6 = $40 ; strip 6 bytes from begin & end when native compiling
.0085					wh_xt:
=0					WordListLink .var 0	 ; start of FORTH wordlist
>8043	43 6f 6c 64			L1:	.text "Cold"	;  name of word as a string, ending at wh_NameLastChar
>8047	84					.byte (("Cold"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8048	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>804a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>804b	08					.byte NN	;wh_Flags	dictionary flags
=32711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.804c					Cold:
.804c	d8		cld				cld
.804d	a2 ff		ldx #$ff			ldx #rsp0		; Initialize 6502 stack (Return Stack)
.804f	9a		txs				txs
.8050	a2 0d		ldx #$0d			ldx #Cold_zp_table_length-1
.8052					-
.8052	bd 00 80	lda $8000,x			lda Cold_zp_table,x
.8055	95 00		sta $00,x			sta zp0,x
.8057	ca		dex				dex
.8058	10 f8		bpl $8052			bpl -
.805a	a0 34		ldy #$34			ldy #Cold_user_table_length-1
.805c	b9 0e 80	lda $800e,y	-		lda Cold_user_table,y
.805f	99 ff 02	sta $02ff,y			sta User0,y
.8062	88		dey				dey
.8063	10 f7		bpl $805c			bpl -
.8065	20 db b5	jsr $b5db			jsr Empty_Stack
.8068	20 85 a2	jsr $a285			jsr BlockInit
.806b	20 28 ac	jsr $ac28			jsr CR
.806e	a9 9c		lda #$9c			lda #<forth_words_start		; push start address
.8070	a0 80		ldy #$80			ldy #>forth_words_start
.8072	20 be b8	jsr $b8be			jsr PushYA
.8075	a9 d2		lda #$d2			lda #<forth_words_len		; push length
.8077	a0 00		ldy #$00			ldy #>forth_words_len
.8079	20 be b8	jsr $b8be			jsr PushYA
.807c	20 df b0	jsr $b0df			jsr Evaluate
.807f	a9 00		lda #$00			lda #0
.8081	8d 66 07	sta $0766			sta hist_buff
.8084	8d e6 07	sta $07e6			sta hist_buff+$80
.8087	8d 66 08	sta $0866			sta hist_buff+$100
.808a	8d e6 08	sta $08e6			sta hist_buff+$180
.808d	8d 66 09	sta $0966			sta hist_buff+$200
.8090	8d e6 09	sta $09e6			sta hist_buff+$280
.8093	8d 66 0a	sta $0a66			sta hist_buff+$300
.8096	8d e6 0a	sta $0ae6			sta hist_buff+$380
.8099	4c 8c b5	jmp $b58c			jmp Abort_Core2	;Quit
=80					CL	.var *-(WordListLink+wh_Xt)
=$809c					en = *	; remember here
>804a	50					.byte CL	;wh_CodeLength
.809c					forth_words_start:
>809c	20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>80a4	61 6c 69 20 46 6f 72 74 68 20 32 20 72 65 6d 69
>80b4	78 20 66 6f 72 20 74 68 65 20 36 35 30 32 29 20
>80c4	63 72 20 2e 28 20 56 65 72 73 69 6f 6e 20 33 31
>80d4	2e 20 4d 61 79 20 32 30 32 34 20 29 20 63 72 20
>80e4	2e 28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31
>80f4	34 2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53
>8104	74 65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f
>8114	6c 77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c
>8124	69 20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20
>8134	77 69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20
>8144	4e 4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20
>8154	2e 28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f
>8164	20 65 78 69 74 29 20 63 72 20
=210					forth_words_len = *-forth_words_start
.816e					user_words_start:
>816e					.binary "user_words.asc"
=0					user_words_len = *-user_words_start
>816e	4e 6f 4f 70			L1:	.text "NoOp"	;  name of word as a string, ending at wh_NameLastChar
>8172	04					.byte (("NoOp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8173	c7 7f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8175	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8176	00					.byte 0	;wh_Flags	dictionary flags
=33010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8177	ea		nop				nop
=1					CL	.var *-(WordListLink+wh_Xt)
=$8178					en = *	; remember here
>8175	01					.byte CL	;wh_CodeLength
.8178	60		rts				rts
>8179	43 43 40			L1:	.text "CC@"	;  name of word as a string, ending at wh_NameLastChar
>817c	03					.byte (("CC@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>817d	f2 80					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>817f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8180	08					.byte NN	;wh_Flags	dictionary flags
=33020					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8181	4c 28 f1	jmp $f128	CCAt:		jmp platform_CCAt
=3					CL	.var *-(WordListLink+wh_Xt)
=$8184					en = *	; remember here
>817f	03					.byte CL	;wh_CodeLength
>8184	42 79 65			L1:	.text "Bye"	;  name of word as a string, ending at wh_NameLastChar
>8187	a3					.byte (("Bye"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8188	fc 80					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>818a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>818b	08					.byte NN	;wh_Flags	dictionary flags
=33031					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.818c	4c 27 f1	jmp $f127	Bye:		jmp platform_bye
=3					CL	.var *-(WordListLink+wh_Xt)
=$818f					en = *	; remember here
>818a	03					.byte CL	;wh_CodeLength
>818f	54 79 70 65 53 79 6d 62		L1:	.text "TypeSymbol"	;  name of word as a string, ending at wh_NameLastChar
>8197	6f 6c
>8199	8a					.byte (("TypeSymbol"[-1]&7)<<5)+(*-L1)	;wh_HNL
>819a	07 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>819c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>819d	08					.byte NN	;wh_Flags	dictionary flags
=33049					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.819e	20 13 b9	jsr $b913	TypeSymbol:	jsr Two
.81a1	20 63 c5	jsr $c563			jsr Spaces
.81a4	a9 28		lda #$28			lda #'('
.81a6	20 f3 ce	jsr $cef3			jsr Emit_A
.81a9	20 00 cf	jsr $cf00			jsr Space
.81ac	20 85 d0	jsr $d085			jsr Dup
.81af	a9 24		lda #$24			lda #'$'
.81b1	20 f3 ce	jsr $cef3			jsr Emit_A
.81b4	20 bd a9	jsr $a9bd			jsr Dot_Hex
.81b7	20 00 cf	jsr $cf00			jsr Space
.81ba	20 e1 81	jsr $81e1			jsr DictSearchXt	; ( addr_end addr operand offset nt )
.81bd	20 00 bf	jsr $bf00			jsr Name_To_String	; Change nt into the name
.81c0	20 0d cf	jsr $cf0d			jsr Type		; print it.
.81c3	20 00 cf	jsr $cf00			jsr Space
.81c6	b5 24		lda $24,x			lda DStack+0,x		; if non-zero offset
.81c8	15 25		ora $25,x			ora DStack+1,x
.81ca	f0 0b		beq $81d7			beq +
.81cc	a9 2b		lda #$2b			lda #'+'		;   print offset
.81ce	20 f3 ce	jsr $cef3			jsr Emit_A
.81d1	20 85 d0	jsr $d085			jsr Dup
.81d4	20 1e cd	jsr $cd1e			jsr U_Dot
.81d7	e8		inx		+		inx
.81d8	e8		inx				inx
.81d9	a9 29		lda #$29			lda #')'
.81db	20 f3 ce	jsr $cef3			jsr Emit_A
.81de	4c 00 cf	jmp $cf00			jmp Space
=67					CL	.var *-(WordListLink+wh_Xt)
=$81e1					en = *	; remember here
>819c	43					.byte CL	;wh_CodeLength
.81e1					DictSearchXt:
.81e1	ca		dex				dex
.81e2	ca		dex				dex
.81e3	20 5c d0	jsr $d05c			jsr Over
.81e6	a9 ff		lda #$ff			lda #$ff		; init best offset
.81e8	95 29		sta $29,x			sta DStack+5,x		; ( offset nt xt )
.81ea	a9 fe		lda #$fe			lda #$fe		; for each wordlist
.81ec	48		pha				pha
.81ed	68		pla		_ListNext:	pla
.81ee	18		clc				clc
.81ef	69 02		adc #$02			adc #2			; to next wordlist
.81f1	c9 18		cmp #$18			cmp #max_wordlists*2
.81f3	b0 10		bcs $8205			bcs _Done
.81f5	48		pha				pha
.81f6	a8		tay				tay
.81f7	b9 12 03	lda $0312,y			lda WordlistsV+0,y	; Get the DP for that wordlist.
.81fa	85 14		sta $14				sta tmp1+0
.81fc	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.81ff	85 15		sta $15				sta tmp1+1
.8201	d0 14		bne $8217			bne _WordTest
.8203	f0 e8		beq $81ed			beq _ListNext		;   empty list
.8205	e8		inx		_Done:		inx			; Drop xt
.8206	e8		inx				inx
.8207	60		rts				rts
.8208	a0 82		ldy #$82	_WordNext:	ldy #wh_WordListLink+1
.820a	b1 14		lda ($14),y			lda (tmp1),y
.820c	f0 df		beq $81ed			beq _ListNext		; end of Dictionary?
.820e	48		pha				pha
.820f	88		dey				dey
.8210	b1 14		lda ($14),y			lda (tmp1),y
.8212	85 14		sta $14				sta tmp1+0
.8214	68		pla				pla
.8215	85 15		sta $15				sta tmp1+1
.8217	18		clc		_WordTest:	clc			; tmp2 = xt of this word
.8218	a5 14		lda $14				lda tmp1+0
.821a	69 85		adc #$85			adc #wh_xt
.821c	85 16		sta $16				sta tmp2+0
.821e	a5 15		lda $15				lda tmp1+1
.8220	69 00		adc #$00			adc #0
.8222	85 17		sta $17				sta tmp2+1
.8224	38		sec				sec			; tmp2 = xt offset for this word
.8225	b5 24		lda $24,x			lda DStack+0,x
.8227	e5 16		sbc $16				sbc tmp2+0
.8229	85 16		sta $16				sta tmp2+0
.822b	b5 25		lda $25,x			lda DStack+1,x
.822d	e5 17		sbc $17				sbc tmp2+1
.822f	85 17		sta $17				sta tmp2+1
.8231	20 97 82	jsr $8297			jsr _test
.8234	a0 85		ldy #$85			ldy #wh_xt+0		; is this word a constant?
.8236	b1 14		lda ($14),y			lda (tmp1),y
.8238	c9 a0		cmp #$a0			cmp #$a0
.823a	f0 28		beq $8264			beq _PushYA
.823c	c9 a9		cmp #$a9			cmp #$a9
.823e	d0 c8		bne $8208			bne _WordNext
.8240	c8		iny		_PushZA:	iny			; get lda # operand
.8241	b5 24		lda $24,x			lda DStack+0,x
.8243	f1 14		sbc ($14),y			sbc (tmp1),y
.8245	85 16		sta $16				sta tmp2+0
.8247	b5 25		lda $25,x			lda DStack+1,x
.8249	e9 00		sbc #$00			sbc #0
.824b	85 17		sta $17				sta tmp2+1
.824d	c8		iny				iny			; check jmp opcode
.824e	b1 14		lda ($14),y			lda (tmp1),y
.8250	c9 4c		cmp #$4c			cmp #$4c
.8252	d0 b4		bne $8208			bne _WordNext
.8254	c8		iny				iny			; check jmp operand lo
.8255	b1 14		lda ($14),y			lda (tmp1),y
.8257	c9 f0		cmp #$f0			cmp #<PushZA
.8259	d0 ad		bne $8208			bne _WordNext
.825b	c8		iny				iny			; check jmp operand hi
.825c	b1 14		lda ($14),y			lda (tmp1),y
.825e	c9 b8		cmp #$b8			cmp #>PushZA
.8260	d0 a6		bne $8208			bne _WordNext
.8262	f0 2d		beq $8291			beq _KTest
.8264	a0 87		ldy #$87	_PushYA:	ldy #wh_xt+2		; check LDA # opcode
.8266	b1 14		lda ($14),y			lda (tmp1),y
.8268	c9 a9		cmp #$a9			cmp #$a9
.826a	d0 9c		bne $8208			bne _WordNext
.826c	c8		iny				iny			; get lda # operand
.826d	b5 24		lda $24,x			lda DStack+0,x
.826f	f1 14		sbc ($14),y			sbc (tmp1),y
.8271	85 16		sta $16				sta tmp2+0
.8273	a0 86		ldy #$86			ldy #wh_xt+1		; get LDY # operand
.8275	b5 25		lda $25,x			lda DStack+1,x
.8277	f1 14		sbc ($14),y			sbc (tmp1),y
.8279	85 17		sta $17				sta tmp2+1
.827b	a0 89		ldy #$89			ldy #wh_xt+4		; check JMP opcode
.827d	b1 14		lda ($14),y			lda (tmp1),y
.827f	c9 4c		cmp #$4c			cmp #$4c
.8281	d0 85		bne $8208			bne _WordNext
.8283	c8		iny				iny			; check JMP operand lo
.8284	b1 14		lda ($14),y			lda (tmp1),y
.8286	c9 be		cmp #$be			cmp #<PushYA
.8288	d0 0a		bne $8294			bne _WordNext3
.828a	c8		iny				iny			; check JMP operand hi
.828b	b1 14		lda ($14),y			lda (tmp1),y
.828d	c9 b8		cmp #$b8			cmp #>PushYA
.828f	d0 03		bne $8294			bne _WordNext3
.8291	20 97 82	jsr $8297	_KTest:		jsr _test
.8294	4c 08 82	jmp $8208	_WordNext3:	jmp _WordNext
.8297					_test:
.8297	a5 16		lda $16				lda tmp2+0		; this word have smaller offset?
.8299	d5 28		cmp $28,x			cmp DStack+4,x
.829b	a5 17		lda $17				lda tmp2+1
.829d	f5 29		sbc $29,x			sbc DStack+5,x
.829f	b0 10		bcs $82b1			bcs _trts
.82a1	a5 16		lda $16				lda tmp2+0		;   save this better offset
.82a3	a4 17		ldy $17				ldy tmp2+1
.82a5	95 28		sta $28,x			sta DStack+4,x
.82a7	94 29		sty $29,x			sty DStack+5,x
.82a9	a5 14		lda $14				lda tmp1+0		;   save this better nt
.82ab	a4 15		ldy $15				ldy tmp1+1
.82ad	95 26		sta $26,x			sta DStack+2,x
.82af	94 27		sty $27,x			sty DStack+3,x
.82b1	60		rts		_trts:		rts
>82b2	44 53 74 61 63 6b		L1:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
>82b8	66					.byte (("DStack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>82b9	19 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82bc	08					.byte NN	;wh_Flags	dictionary flags
=33336					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82bd	a9 24		lda #$24			lda #DStack
.82bf	4c f0 b8	jmp $b8f0			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$82c2					en = *	; remember here
>82bb	05					.byte CL	;wh_CodeLength
>82c2	52 6e 64 53 74 61 74 65		L1:	.text "RndState"	;  name of word as a string, ending at wh_NameLastChar
>82ca	a8					.byte (("RndState"[-1]&7)<<5)+(*-L1)	;wh_HNL
>82cb	38 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82ce	08					.byte NN	;wh_Flags	dictionary flags
=33354					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82cf	a0 03		ldy #$03			ldy #>RndState
.82d1	a9 35		lda #$35			lda #<RndState
.82d3	4c be b8	jmp $b8be			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$82d6					en = *	; remember here
>82cd	07					.byte CL	;wh_CodeLength
>82d6	52 61 6e 64			L1:	.text "Rand"	;  name of word as a string, ending at wh_NameLastChar
>82da	84					.byte (("Rand"[-1]&7)<<5)+(*-L1)	;wh_HNL
>82db	4a 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82de	00					.byte 0	;wh_Flags	dictionary flags
=33370					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82df					Rand:
.82df	4e 36 03	lsr $0336			lsr RndState+1
.82e2	6e 35 03	ror $0335			ror RndState+0
.82e5	6e 38 03	ror $0338			ror RndState+3
.82e8	6e 37 03	ror $0337			ror RndState+2
.82eb	90 10		bcc $82fd			bcc _19			;  IfCs,
.82ed	ad 36 03	lda $0336			lda RndState+1
.82f0	49 d0		eor #$d0			eor #$d0
.82f2	8d 36 03	sta $0336			sta RndState+1
.82f5	ad 37 03	lda $0337			lda RndState+2
.82f8	49 01		eor #$01			eor #$01
.82fa	8d 37 03	sta $0337			sta RndState+2
.82fd					_19:
.82fd	ad 37 03	lda $0337			lda RndState+2
.8300	ac 38 03	ldy $0338			ldy RndState+3
=36					CL	.var *-(WordListLink+wh_Xt)
=$8303					en = *	; remember here
>82dd	24					.byte CL	;wh_CodeLength
.8303	60		rts				rts
>8304	52 61 6e 64 4d			L1:	.text "RandM"	;  name of word as a string, ending at wh_NameLastChar
>8309	a5					.byte (("RandM"[-1]&7)<<5)+(*-L1)	;wh_HNL
>830a	5a 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>830c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>830d	08					.byte NN	;wh_Flags	dictionary flags
=33417					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.830e	20 85 d0	jsr $d085	RandM:		jsr Dup		; ( umod umod )
.8311	20 df 82	jsr $82df			jsr Rand
.8314	4a		lsr a				lsr a		; make positive
.8315	95 27		sta $27,x			sta DStack+3,x
.8317	94 26		sty $26,x			sty DStack+2,x	; ( rand umod )
.8319	4c 51 b0	jmp $b051			jmp Mod
=14					CL	.var *-(WordListLink+wh_Xt)
=$831c					en = *	; remember here
>830c	0e					.byte CL	;wh_CodeLength
>004c					fp:	.byte ?		; floating-point stack index. empty=FDim, full=0
>004d					FSExp:   .fill FDim	; FP stack exponent        array
>0057					FSMant0: .fill FDim	; FP stack mantissa MSByte array
>0061					FSMant1: .fill FDim	; FP stack mantissa 2nd    array
>006b					FSMant2: .fill FDim	; FP stack mantissa 3rd    array
>0075					FSMant3: .fill FDim	; FP stack mantissa 4th    array
>831c	46 50				L1:	.text "FP"	;  name of word as a string, ending at wh_NameLastChar
>831e	02					.byte (("FP"[-1]&7)<<5)+(*-L1)	;wh_HNL
>831f	89 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8321	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8322	08					.byte NN	;wh_Flags	dictionary flags
=33438					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8323	a9 4c		lda #$4c			lda #fp
.8325	4c f0 b8	jmp $b8f0			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8328					en = *	; remember here
>8321	05					.byte CL	;wh_CodeLength
>8328	46 44 69 6d			L1:	.text "FDim"	;  name of word as a string, ending at wh_NameLastChar
>832c	a4					.byte (("FDim"[-1]&7)<<5)+(*-L1)	;wh_HNL
>832d	9e 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>832f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8330	08					.byte NN	;wh_Flags	dictionary flags
=33452					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8331	a9 0a		lda #$0a			lda #FDim
.8333	4c f0 b8	jmp $b8f0			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8336					en = *	; remember here
>832f	05					.byte CL	;wh_CodeLength
>8336	46 53 45 78 70			L1:	.text "FSExp"	;  name of word as a string, ending at wh_NameLastChar
>833b	05					.byte (("FSExp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>833c	ac 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>833e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>833f	08					.byte NN	;wh_Flags	dictionary flags
=33467					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8340	a9 4d		lda #$4d			lda #FSExp
.8342	4c f0 b8	jmp $b8f0			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8345					en = *	; remember here
>833e	05					.byte CL	;wh_CodeLength
>8345	46 53 4d 61 6e 74 30		L1:	.text "FSMant0"	;  name of word as a string, ending at wh_NameLastChar
>834c	07					.byte (("FSMant0"[-1]&7)<<5)+(*-L1)	;wh_HNL
>834d	bb 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>834f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8350	08					.byte NN	;wh_Flags	dictionary flags
=33484					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8351	a9 57		lda #$57			lda #FSMant0
.8353	4c f0 b8	jmp $b8f0			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8356					en = *	; remember here
>834f	05					.byte CL	;wh_CodeLength
>8356	46 53 4d 61 6e 74 31		L1:	.text "FSMant1"	;  name of word as a string, ending at wh_NameLastChar
>835d	27					.byte (("FSMant1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>835e	cc 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8360	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8361	08					.byte NN	;wh_Flags	dictionary flags
=33501					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8362	a9 61		lda #$61			lda #FSMant1
.8364	4c f0 b8	jmp $b8f0			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8367					en = *	; remember here
>8360	05					.byte CL	;wh_CodeLength
>8367	46 53 4d 61 6e 74 32		L1:	.text "FSMant2"	;  name of word as a string, ending at wh_NameLastChar
>836e	47					.byte (("FSMant2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>836f	dd 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8371	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8372	08					.byte NN	;wh_Flags	dictionary flags
=33518					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8373	a9 6b		lda #$6b			lda #FSMant2
.8375	4c f0 b8	jmp $b8f0			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8378					en = *	; remember here
>8371	05					.byte CL	;wh_CodeLength
>8378	46 53 4d 61 6e 74 33		L1:	.text "FSMant3"	;  name of word as a string, ending at wh_NameLastChar
>837f	67					.byte (("FSMant3"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8380	ee 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8382	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8383	08					.byte NN	;wh_Flags	dictionary flags
=33535					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8384	a9 75		lda #$75			lda #FSMant3
.8386	4c f0 b8	jmp $b8f0			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8389					en = *	; remember here
>8382	05					.byte CL	;wh_CodeLength
>8389	46 6c 6f 61 74 2b		L1:	.text "Float+"	;  name of word as a string, ending at wh_NameLastChar
>838f	66					.byte (("Float+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8390	ff 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8392	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8393	08					.byte NN	;wh_Flags	dictionary flags
=33551					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8394	a9 05		lda #$05	FloatPlus:	lda #5
.8396	4c 14 cb	jmp $cb14			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$8399					en = *	; remember here
>8392	05					.byte CL	;wh_CodeLength
>8399	46 6c 6f 61 74 73		L1:	.text "Floats"	;  name of word as a string, ending at wh_NameLastChar
>839f	66					.byte (("Floats"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83a0	0f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83a3	08					.byte NN	;wh_Flags	dictionary flags
=33567					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83a4	a9 05		lda #$05	Floats:		lda #5
.83a6	20 f0 b8	jsr $b8f0			jsr PushZA
.83a9	4c 61 af	jmp $af61			jmp Star
=8					CL	.var *-(WordListLink+wh_Xt)
=$83ac					en = *	; remember here
>83a2	08					.byte CL	;wh_CodeLength
>83ac	46 41 6c 69 67 6e		L1:	.text "FAlign"	;  name of word as a string, ending at wh_NameLastChar
>83b2	c6					.byte (("FAlign"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83b3	1f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83b5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83b6	00					.byte 0	;wh_Flags	dictionary flags
=33586					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83b7					FAlign:
=0					CL	.var *-(WordListLink+wh_Xt)
=$83b7					en = *	; remember here
>83b5	00					.byte CL	;wh_CodeLength
.83b7	60		rts				rts
>83b8	46 41 6c 69 67 6e 65 64		L1:	.text "FAligned"	;  name of word as a string, ending at wh_NameLastChar
>83c0	88					.byte (("FAligned"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83c1	32 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83c4	00					.byte 0	;wh_Flags	dictionary flags
=33600					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83c5					FAligned:
=0					CL	.var *-(WordListLink+wh_Xt)
=$83c5					en = *	; remember here
>83c3	00					.byte CL	;wh_CodeLength
.83c5	60		rts				rts
>83c6	48 65 78 3e 46			L1:	.text "Hex>F"	;  name of word as a string, ending at wh_NameLastChar
>83cb	c5					.byte (("Hex>F"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83cc	40 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83cf	08					.byte NN	;wh_Flags	dictionary flags
=33611					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83d0	20 b1 84	jsr $84b1	HexToF:		jsr FAllocX		; alloc FP stack entry, X= fp stack index
.83d3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.83d5	a4 4c		ldy $4c				ldy fp			; Y= FP stack index
.83d7	20 c7 b4	jsr $b4c7			jsr PopA		; pop n_exp
.83da	99 4d 00	sta $004d,y			sta FSExp,y
.83dd	b5 25		lda $25,x			lda DStack+1,x
.83df	99 57 00	sta $0057,y			sta FSMant0,y
.83e2	b5 24		lda $24,x			lda DStack+0,x
.83e4	99 61 00	sta $0061,y			sta FSMant1,y
.83e7	b5 27		lda $27,x			lda DStack+3,x
.83e9	99 6b 00	sta $006b,y			sta FSMant2,y
.83ec	b5 26		lda $26,x			lda DStack+2,x
.83ee	99 75 00	sta $0075,y			sta FSMant3,y
.83f1	4c 0a c6	jmp $c60a			jmp Two_Drop
=36					CL	.var *-(WordListLink+wh_Xt)
=$83f4					en = *	; remember here
>83ce	24					.byte CL	;wh_CodeLength
>83f4	46 3e 48 65 78			L1:	.text "F>Hex"	;  name of word as a string, ending at wh_NameLastChar
>83f9	05					.byte (("F>Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83fa	4b 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83fd	08					.byte NN	;wh_Flags	dictionary flags
=33657					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83fe	a4 4c		ldy $4c		FToHex:		ldy fp		; Y= FP stack index
.8400	ca		dex				dex
.8401	ca		dex				dex
.8402	ca		dex				dex
.8403	ca		dex				dex
.8404	ca		dex				dex
.8405	ca		dex				dex
.8406	b9 57 00	lda $0057,y			lda FSMant0,y	; copy mantissa
.8409	95 27		sta $27,x			sta DStack+3,x
.840b	b9 61 00	lda $0061,y			lda FSMant1,y
.840e	95 26		sta $26,x			sta DStack+2,x
.8410	b9 6b 00	lda $006b,y			lda FSMant2,y
.8413	95 29		sta $29,x			sta DStack+5,x
.8415	b9 75 00	lda $0075,y			lda FSMant3,y
.8418	95 28		sta $28,x			sta DStack+4,x
.841a	b9 4d 00	lda $004d,y			lda FSExp,y	; copy exponent
.841d	95 24		sta $24,x			sta DStack+0,x
.841f	29 80		and #$80			and #$80	;   sign extend
.8421	f0 02		beq $8425			beq +
.8423	a9 ff		lda #$ff			lda #$ff
.8425	95 25		sta $25,x	+		sta DStack+1,x
.8427	e6 4c		inc $4c				inc fp		; FDrop
.8429	60		rts				rts
=44					CL	.var *-(WordListLink+wh_Xt)
=$842a					en = *	; remember here
>83fc	2c					.byte CL	;wh_CodeLength
>842a	46 2e 48 65 78			L1:	.text "F.Hex"	;  name of word as a string, ending at wh_NameLastChar
>842f	05					.byte (("F.Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8430	79 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8432	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8433	08					.byte NN	;wh_Flags	dictionary flags
=33711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8434	20 fe 83	jsr $83fe	FDotHex:	jsr FToHex	; get parts of r
.8437	20 af cf	jsr $cfaf			jsr Not_Rot
.843a	20 bd a9	jsr $a9bd			jsr Dot_Hex	; do mantissa
.843d	20 bd a9	jsr $a9bd			jsr Dot_Hex
.8440	a9 3a		lda #$3a			lda #':'
.8442	20 f3 ce	jsr $cef3			jsr Emit_A
.8445	4c 9b a9	jmp $a99b			jmp C_Dot_Hex	; do exponent
=20					CL	.var *-(WordListLink+wh_Xt)
=$8448					en = *	; remember here
>8432	14					.byte CL	;wh_CodeLength
>8448	46 43 6d 70 41			L1:	.text "FCmpA"	;  name of word as a string, ending at wh_NameLastChar
>844d	25					.byte (("FCmpA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>844e	af 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8450	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8451	08					.byte NN	;wh_Flags	dictionary flags
=33741					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8452	86 14		stx $14		FCmpA:		stx tmp1		; save data stack index
.8454	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.8456	b5 57		lda $57,x			lda FSMant0+0,x		; r2 mantissa = 0 ?
.8458	f0 35		beq $848f			beq _r2Zero
.845a	b4 58		ldy $58,x			ldy FSMant0+1,x		; r1 mantissa = 0 ?
.845c	f0 2b		beq $8489			beq _r1Zero
.845e	55 58		eor $58,x			eor FSMant0+1,x		; compare mantissa sign
.8460	30 3d		bmi $849f			bmi _MantissaSignDifferent
.8462	38		sec				sec			; compare exponent
.8463	b5 4e		lda $4e,x			lda FSExp+1,x
.8465	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8467	d0 2b		bne $8494			bne _ExponentDifferent
.8469	98		tya				tya			; compare mantissa MSB
.846a	f5 57		sbc $57,x			sbc FSMant0+0,x		;   always same sign so can't overflow
.846c	d0 17		bne $8485			bne _13
.846e	b5 62		lda $62,x			lda FSMant1+1,x		; compare mantissa 1
.8470	f5 61		sbc $61,x			sbc FSMant1+0,x
.8472	d0 0c		bne $8480			bne _12
.8474	b5 6c		lda $6c,x			lda FSMant2+1,x		; compare mantissa 2
.8476	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8478	d0 06		bne $8480			bne _12
.847a	b5 76		lda $76,x			lda FSMant3+1,x		; compare mantissa LSB
.847c	f5 75		sbc $75,x			sbc FSMant3+0,x
.847e	f0 05		beq $8485			beq _13
.8480	6a		ror a		_12:		ror a
.8481	49 80		eor #$80	_14:		eor #$80
.8483	09 01		ora #$01			ora #1
.8485	a6 14		ldx $14		_13:		ldx tmp1		; restore data stack index
.8487	a8		tay				tay			; set CPU flags
.8488	60		rts				rts
.8489	b5 57		lda $57,x	_r1Zero:	lda FSMant0+0,x		; return r2
.848b	d0 f4		bne $8481			bne _14
.848d	f0 f6		beq $8485			beq _13
.848f	b5 58		lda $58,x	_r2Zero:	lda FSMant0+1,x		; return 0-r1
.8491	4c 85 84	jmp $8485			jmp _13
.8494					_ExponentDifferent:
.8494	50 02		bvc $8498			bvc +
.8496	49 80		eor #$80			eor #$80
.8498					+
.8498	55 57		eor $57,x			eor FSMant0+0,x
.849a	a6 14		ldx $14				ldx tmp1		; restore data stack index
.849c	09 01		ora #$01			ora #1			; set CPU flags
.849e	60		rts				rts
.849f					_MantissaSignDifferent:
.849f	98		tya				tya
.84a0	a6 14		ldx $14				ldx tmp1		; restore data stack index
.84a2	09 01		ora #$01			ora #1
.84a4	60		rts				rts
=83					CL	.var *-(WordListLink+wh_Xt)
=$84a5					en = *	; remember here
>8450	53					.byte CL	;wh_CodeLength
>84a5	46 41 6c 6c 6f 63 58		L1:	.text "FAllocX"	;  name of word as a string, ending at wh_NameLastChar
>84ac	07					.byte (("FAllocX"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84ad	cd 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84af	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84b0	08					.byte NN	;wh_Flags	dictionary flags
=33836					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84b1	86 14		stx $14		FAllocX:	stx tmp1+0	; save data stack index
.84b3	a6 4c		ldx $4c				ldx fp		; X= floating point stack index
.84b5	ca		dex				dex		; alloc FP stack entry
.84b6	e0 0a		cpx #$0a			cpx #FDim	; overflow or underflow?
.84b8	b0 03		bcs $84bd			bcs _err
.84ba	86 4c		stx $4c				stx fp
.84bc	60		rts				rts		; return X= FP stack index
.84bd	08		php		_err:		php		; save sign bit
.84be	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.84c0	28		plp				plp		; restore sign bit
.84c1	4c 3b b5	jmp $b53b			jmp Throw_FPStack
=19					CL	.var *-(WordListLink+wh_Xt)
=$84c4					en = *	; remember here
>84af	13					.byte CL	;wh_CodeLength
>84c4	46 4d 61 78			L1:	.text "FMax"	;  name of word as a string, ending at wh_NameLastChar
>84c8	04					.byte (("FMax"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84c9	2c 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84cb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84cc	08					.byte NN	;wh_Flags	dictionary flags
=33864					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84cd	20 52 84	jsr $8452	FMax:		jsr FCmpA
.84d0	10 2f		bpl $8501			bpl FDrop
.84d2	30 49		bmi $851d			bmi FNip
=7					CL	.var *-(WordListLink+wh_Xt)
=$84d4					en = *	; remember here
>84cb	07					.byte CL	;wh_CodeLength
>84d4	46 4d 69 6e			L1:	.text "FMin"	;  name of word as a string, ending at wh_NameLastChar
>84d8	c4					.byte (("FMin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84d9	48 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84dc	08					.byte NN	;wh_Flags	dictionary flags
=33880					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84dd	20 52 84	jsr $8452	FMin:		jsr FCmpA
.84e0	30 1f		bmi $8501			bmi FDrop
.84e2	10 39		bpl $851d			bpl FNip
=7					CL	.var *-(WordListLink+wh_Xt)
=$84e4					en = *	; remember here
>84db	07					.byte CL	;wh_CodeLength
>84e4	46 44 65 70 74 68		L1:	.text "FDepth"	;  name of word as a string, ending at wh_NameLastChar
>84ea	06					.byte (("FDepth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84eb	58 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84ed	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84ee	08					.byte NN	;wh_Flags	dictionary flags
=33898					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84ef	a9 0a		lda #$0a	FDepth:		lda #FDim
.84f1	38		sec				sec
.84f2	e5 4c		sbc $4c				sbc fp
.84f4	4c f0 b8	jmp $b8f0			jmp PushZA
=8					CL	.var *-(WordListLink+wh_Xt)
=$84f7					en = *	; remember here
>84ed	08					.byte CL	;wh_CodeLength
>84f7	46 44 72 6f 70			L1:	.text "FDrop"	;  name of word as a string, ending at wh_NameLastChar
>84fc	05					.byte (("FDrop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84fd	6a 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84ff	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8500	00					.byte 0	;wh_Flags	dictionary flags
=33916					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8501	e6 4c		inc $4c		FDrop:		inc fp
=2					CL	.var *-(WordListLink+wh_Xt)
=$8503					en = *	; remember here
>84ff	02					.byte CL	;wh_CodeLength
.8503	60		rts				rts
>8504	46 32 44 72 6f 70		L1:	.text "F2Drop"	;  name of word as a string, ending at wh_NameLastChar
>850a	06					.byte (("F2Drop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>850b	7c 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>850d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>850e	00					.byte 0	;wh_Flags	dictionary flags
=33930					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.850f	e6 4c		inc $4c		F2Drop:		inc fp
.8511	e6 4c		inc $4c				inc fp
=4					CL	.var *-(WordListLink+wh_Xt)
=$8513					en = *	; remember here
>850d	04					.byte CL	;wh_CodeLength
.8513	60		rts				rts
>8514	46 4e 69 70			L1:	.text "FNip"	;  name of word as a string, ending at wh_NameLastChar
>8518	04					.byte (("FNip"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8519	8a 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>851b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>851c	00					.byte 0	;wh_Flags	dictionary flags
=33944					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.851d	86 14		stx $14		FNip:		stx tmp1		; save data stack index
.851f	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.8521	b5 4d		lda $4d,x			lda FSExp+0,x		; copy exponent
.8523	95 4e		sta $4e,x			sta FSExp+1,x
.8525	b5 57		lda $57,x			lda FSMant0+0,x		; copy mantissa
.8527	95 58		sta $58,x			sta FSMant0+1,x
.8529	b5 61		lda $61,x			lda FSMant1+0,x
.852b	95 62		sta $62,x			sta FSMant1+1,x
.852d	b5 6b		lda $6b,x			lda FSMant2+0,x
.852f	95 6c		sta $6c,x			sta FSMant2+1,x
.8531	b5 75		lda $75,x			lda FSMant3+0,x
.8533	95 76		sta $76,x			sta FSMant3+1,x
.8535	e6 4c		inc $4c				inc fp			; FDrop
.8537	a6 14		ldx $14				ldx tmp1		; restore data stack index
=28					CL	.var *-(WordListLink+wh_Xt)
=$8539					en = *	; remember here
>851b	1c					.byte CL	;wh_CodeLength
.8539	60		rts				rts
>853a	46 44 75 70			L1:	.text "FDup"	;  name of word as a string, ending at wh_NameLastChar
>853e	04					.byte (("FDup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>853f	98 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8541	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8542	00					.byte 0	;wh_Flags	dictionary flags
=33982					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8543	20 b1 84	jsr $84b1	FDup:		jsr FAllocX		; alloc FP stack entry, X=fp stack index
.8546	b5 4e		lda $4e,x			lda FSExp+1,x		; copy exponent
.8548	95 4d		sta $4d,x			sta FSExp+0,x
.854a	b5 58		lda $58,x			lda FSMant0+1,x		; copy mantissa
.854c	95 57		sta $57,x			sta FSMant0+0,x
.854e	b5 62		lda $62,x			lda FSMant1+1,x
.8550	95 61		sta $61,x			sta FSMant1+0,x
.8552	b5 6c		lda $6c,x			lda FSMant2+1,x
.8554	95 6b		sta $6b,x			sta FSMant2+0,x
.8556	b5 76		lda $76,x			lda FSMant3+1,x
.8558	95 75		sta $75,x			sta FSMant3+0,x
.855a	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CL	.var *-(WordListLink+wh_Xt)
=$855c					en = *	; remember here
>8541	19					.byte CL	;wh_CodeLength
.855c	60		rts				rts
>855d	46 4f 76 65 72			L1:	.text "FOver"	;  name of word as a string, ending at wh_NameLastChar
>8562	45					.byte (("FOver"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8563	be 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8565	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8566	00					.byte 0	;wh_Flags	dictionary flags
=34018					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8567	20 b1 84	jsr $84b1	FOver:		jsr FAllocX		; alloc FP stack entry, X=fp stack index
.856a	b5 4f		lda $4f,x			lda FSExp+2,x		; copy exponent
.856c	95 4d		sta $4d,x			sta FSExp+0,x
.856e	b5 59		lda $59,x			lda FSMant0+2,x		; copy mantissa
.8570	95 57		sta $57,x			sta FSMant0+0,x
.8572	b5 63		lda $63,x			lda FSMant1+2,x
.8574	95 61		sta $61,x			sta FSMant1+0,x
.8576	b5 6d		lda $6d,x			lda FSMant2+2,x
.8578	95 6b		sta $6b,x			sta FSMant2+0,x
.857a	b5 77		lda $77,x			lda FSMant3+2,x
.857c	95 75		sta $75,x			sta FSMant3+0,x
.857e	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CL	.var *-(WordListLink+wh_Xt)
=$8580					en = *	; remember here
>8565	19					.byte CL	;wh_CodeLength
.8580	60		rts				rts
>8581	46 50 69 63 6b			L1:	.text "FPick"	;  name of word as a string, ending at wh_NameLastChar
>8586	65					.byte (("FPick"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8587	e2 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8589	03					.byte 3		;wh_CodeLength  (with placeholder value)
>858a	00					.byte 0	;wh_Flags	dictionary flags
=34054					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.858b	20 c7 b4	jsr $b4c7	FPick:		jsr PopA		; pop u (desired entry #)
.858e	18		clc		FPickA:		clc			; Y= fp stack index of [u]
.858f	65 4c		adc $4c				adc fp
.8591	a8		tay		FPick3:		tay
.8592	20 b1 84	jsr $84b1			jsr FAllocX		; alloc FP stack entry, X=fp stack index
.8595	b9 4d 00	lda $004d,y			lda FSExp,y		; copy exponent
.8598	95 4d		sta $4d,x			sta FSExp,x
.859a	b9 57 00	lda $0057,y			lda FSMant0,y		; copy mantissa
.859d	95 57		sta $57,x			sta FSMant0,x
.859f	b9 61 00	lda $0061,y			lda FSMant1,y
.85a2	95 61		sta $61,x			sta FSMant1,x
.85a4	b9 6b 00	lda $006b,y			lda FSMant2,y
.85a7	95 6b		sta $6b,x			sta FSMant2,x
.85a9	b9 75 00	lda $0075,y			lda FSMant3,y
.85ac	95 75		sta $75,x			sta FSMant3,x
.85ae	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=37					CL	.var *-(WordListLink+wh_Xt)
=$85b0					en = *	; remember here
>8589	25					.byte CL	;wh_CodeLength
.85b0	60		rts				rts
>85b1	46 32 44 75 70			L1:	.text "F2Dup"	;  name of word as a string, ending at wh_NameLastChar
>85b6	05					.byte (("F2Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>85b7	06 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85b9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85ba	08					.byte NN	;wh_Flags	dictionary flags
=34102					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85bb	20 67 85	jsr $8567	F2Dup:		jsr FOver
.85be	4c 67 85	jmp $8567			jmp FOver
=6					CL	.var *-(WordListLink+wh_Xt)
=$85c1					en = *	; remember here
>85b9	06					.byte CL	;wh_CodeLength
>85c1	46 53 77 61 70			L1:	.text "FSwap"	;  name of word as a string, ending at wh_NameLastChar
>85c6	05					.byte (("FSwap"[-1]&7)<<5)+(*-L1)	;wh_HNL
>85c7	36 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85c9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85ca	00					.byte 0	;wh_Flags	dictionary flags
=34118					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85cb	86 14		stx $14		FSwap:		stx tmp1+0		; save data stack index
.85cd	a6 4c		ldx $4c				ldx fp			; X=FP stack index
.85cf	b5 4d		lda $4d,x			lda FSExp+0,x		; do FSExp
.85d1	b4 4e		ldy $4e,x			ldy FSExp+1,x
.85d3	95 4e		sta $4e,x			sta FSExp+1,x
.85d5	94 4d		sty $4d,x			sty FSExp+0,x
.85d7	b5 57		lda $57,x			lda FSMant0+0,x		; do FSMant0
.85d9	b4 58		ldy $58,x			ldy FSMant0+1,x
.85db	95 58		sta $58,x			sta FSMant0+1,x
.85dd	94 57		sty $57,x			sty FSMant0+0,x
.85df	b5 61		lda $61,x			lda FSMant1+0,x		; do FSMant1
.85e1	b4 62		ldy $62,x			ldy FSMant1+1,x
.85e3	95 62		sta $62,x			sta FSMant1+1,x
.85e5	94 61		sty $61,x			sty FSMant1+0,x
.85e7	b5 6b		lda $6b,x			lda FSMant2+0,x		; do FSMant2
.85e9	b4 6c		ldy $6c,x			ldy FSMant2+1,x
.85eb	95 6c		sta $6c,x			sta FSMant2+1,x
.85ed	94 6b		sty $6b,x			sty FSMant2+0,x
.85ef	b5 75		lda $75,x			lda FSMant3+0,x		; do FSMant3
.85f1	b4 76		ldy $76,x			ldy FSMant3+1,x
.85f3	95 76		sta $76,x			sta FSMant3+1,x
.85f5	94 75		sty $75,x			sty FSMant3+0,x
.85f7	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=46					CL	.var *-(WordListLink+wh_Xt)
=$85f9					en = *	; remember here
>85c9	2e					.byte CL	;wh_CodeLength
.85f9	60		rts				rts
>85fa	46 54 75 63 6b			L1:	.text "FTuck"	;  name of word as a string, ending at wh_NameLastChar
>85ff	65					.byte (("FTuck"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8600	46 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8602	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8603	08					.byte NN	;wh_Flags	dictionary flags
=34175					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8604	20 cb 85	jsr $85cb	FTuck:		jsr FSwap
.8607	4c 67 85	jmp $8567			jmp FOver
=6					CL	.var *-(WordListLink+wh_Xt)
=$860a					en = *	; remember here
>8602	06					.byte CL	;wh_CodeLength
>860a	46 52 6f 74			L1:	.text "FRot"	;  name of word as a string, ending at wh_NameLastChar
>860e	84					.byte (("FRot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>860f	7f 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8611	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8612	00					.byte 0	;wh_Flags	dictionary flags
=34190					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8613	86 14		stx $14		FRot:		stx tmp1		; save data stack index
.8615	a5 4c		lda $4c				lda fp			; for FSMant3, FSMant2, FSMant1, FSMant0, FSExp
.8617	18		clc				clc
.8618	69 28		adc #$28			adc #4*FDim
.861a	d0 03		bne $861f			bne _3
.861c	8a		txa		_2:		txa			;    next byte
.861d	e9 0a		sbc #$0a			sbc #FDim
.861f	aa		tax		_3:		tax
.8620	b5 4f		lda $4f,x			lda FSExp+2,x		;   do a byte
.8622	b4 4e		ldy $4e,x			ldy FSExp+1,x
.8624	94 4f		sty $4f,x			sty FSExp+2,x
.8626	b4 4d		ldy $4d,x			ldy FSExp+0,x
.8628	94 4e		sty $4e,x			sty FSExp+1,x
.862a	95 4d		sta $4d,x			sta FSExp+0,x
.862c	e4 4c		cpx $4c				cpx fp			; done?
.862e	d0 ec		bne $861c			bne _2
.8630	a6 14		ldx $14				ldx tmp1		; restore param stack index
=31					CL	.var *-(WordListLink+wh_Xt)
=$8632					en = *	; remember here
>8611	1f					.byte CL	;wh_CodeLength
.8632	60		rts				rts
>8633	46 2d 52 6f 74			L1:	.text "F-Rot"	;  name of word as a string, ending at wh_NameLastChar
>8638	85					.byte (("F-Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8639	8e 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>863b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>863c	08					.byte NN	;wh_Flags	dictionary flags
=34232					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.863d	20 13 86	jsr $8613	FMRot:		jsr FRot
.8640	4c 13 86	jmp $8613			jmp FRot
=6					CL	.var *-(WordListLink+wh_Xt)
=$8643					en = *	; remember here
>863b	06					.byte CL	;wh_CodeLength
>8643	46 40				L1:	.text "F@"	;  name of word as a string, ending at wh_NameLastChar
>8645	02					.byte (("F@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8646	b8 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8648	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8649	00					.byte 0	;wh_Flags	dictionary flags
=34245					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.864a	20 e3 b4	jsr $b4e3	FAt:		jsr PopYA		; pop addr
.864d	85 16		sta $16		FAt_YA:		sta tmp2+0		; save addr
.864f	84 17		sty $17				sty tmp2+1
.8651	a0 00		ldy #$00			ldy #0			; starting offset from tmp2
.8653	20 b1 84	jsr $84b1	FAt_Tmp2Y:	jsr FAllocX		; alloc FP stack entry, X= fp stack index
.8656	b1 16		lda ($16),y			lda (tmp2),y		; copy mantissa
.8658	95 75		sta $75,x			sta FSMant3,x
.865a	c8		iny				iny
.865b	b1 16		lda ($16),y			lda (tmp2),y
.865d	95 6b		sta $6b,x			sta FSMant2,x
.865f	c8		iny				iny
.8660	b1 16		lda ($16),y			lda (tmp2),y
.8662	95 61		sta $61,x			sta FSMant1,x
.8664	c8		iny				iny
.8665	b1 16		lda ($16),y			lda (tmp2),y
.8667	95 57		sta $57,x			sta FSMant0,x
.8669	c8		iny				iny			; copy exponent
.866a	b1 16		lda ($16),y			lda (tmp2),y
.866c	95 4d		sta $4d,x			sta FSExp,x
.866e	a6 14		ldx $14				ldx tmp1		; restore data stack index
=38					CL	.var *-(WordListLink+wh_Xt)
=$8670					en = *	; remember here
>8648	26					.byte CL	;wh_CodeLength
.8670	60		rts				rts
>8671	46 21				L1:	.text "F!"	;  name of word as a string, ending at wh_NameLastChar
>8673	22					.byte (("F!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8674	c5 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8676	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8677	00					.byte 0	;wh_Flags	dictionary flags
=34291					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8678	20 e3 b4	jsr $b4e3	FStore:		jsr PopYA		; pop addr
.867b	85 14		sta $14		FStore_YA:	sta tmp1+0		; save addr
.867d	84 15		sty $15				sty tmp1+1
.867f	a0 00		ldy #$00			ldy #0
.8681	86 16		stx $16				stx tmp2		; save data stack index
.8683	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.8685	b5 75		lda $75,x			lda FSMant3,x		; copy mantissa
.8687	91 14		sta ($14),y			sta (tmp1),y
.8689	b5 6b		lda $6b,x			lda FSMant2,x
.868b	c8		iny				iny
.868c	91 14		sta ($14),y			sta (tmp1),y
.868e	b5 61		lda $61,x			lda FSMant1,x
.8690	c8		iny				iny
.8691	91 14		sta ($14),y			sta (tmp1),y
.8693	b5 57		lda $57,x			lda FSMant0,x
.8695	c8		iny				iny
.8696	91 14		sta ($14),y			sta (tmp1),y
.8698	b5 4d		lda $4d,x			lda FSExp,x		; copy exponent
.869a	c8		iny				iny
.869b	91 14		sta ($14),y			sta (tmp1),y
.869d	e6 4c		inc $4c				inc fp			; FDrop
.869f	a6 16		ldx $16				ldx tmp2		; restore data stack index
=41					CL	.var *-(WordListLink+wh_Xt)
=$86a1					en = *	; remember here
>8676	29					.byte CL	;wh_CodeLength
.86a1	60		rts				rts
>86a2	46 2c				L1:	.text "F,"	;  name of word as a string, ending at wh_NameLastChar
>86a4	82					.byte (("F,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>86a5	f3 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86a7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86a8	08					.byte NN	;wh_Flags	dictionary flags
=34340					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86a9	a5 00		lda $00		FComma:		lda cp+0		; store f at Here
.86ab	a4 01		ldy $01				ldy cp+1
.86ad	20 7b 86	jsr $867b			jsr FStore_YA
.86b0	a9 05		lda #$05			lda #5			; Float
.86b2	20 f0 b8	jsr $b8f0			jsr PushZA
.86b5	4c d1 c1	jmp $c1d1			jmp Allot
=15					CL	.var *-(WordListLink+wh_Xt)
=$86b8					en = *	; remember here
>86a7	0f					.byte CL	;wh_CodeLength
>86b8	46 30 21			L1:	.text "F0!"	;  name of word as a string, ending at wh_NameLastChar
>86bb	23					.byte (("F0!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>86bc	24 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86bf	08					.byte NN	;wh_Flags	dictionary flags
=34363					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86c0	20 bf 88	jsr $88bf	FZStore:	jsr F0
.86c3	4c 78 86	jmp $8678			jmp FStore
=6					CL	.var *-(WordListLink+wh_Xt)
=$86c6					en = *	; remember here
>86be	06					.byte CL	;wh_CodeLength
>86c6	46 30 3d			L1:	.text "F0="	;  name of word as a string, ending at wh_NameLastChar
>86c9	a3					.byte (("F0="[-1]&7)<<5)+(*-L1)	;wh_HNL
>86ca	3b 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86cd	08					.byte NN	;wh_Flags	dictionary flags
=34377					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86ce	a4 4c		ldy $4c		FZEq:		ldy fp
.86d0	b9 57 00	lda $0057,y			lda FSMant0,y
.86d3	d0 26		bne $86fb			bne FFalse1
.86d5					FTrue1:
.86d5	e6 4c		inc $4c				inc fp		; FDrop
.86d7	4c ce b8	jmp $b8ce			jmp True	; return true
=12					CL	.var *-(WordListLink+wh_Xt)
=$86da					en = *	; remember here
>86cc	0c					.byte CL	;wh_CodeLength
>86da	46 30 3c 3e			L1:	.text "F0<>"	;  name of word as a string, ending at wh_NameLastChar
>86de	c4					.byte (("F0<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>86df	49 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86e2	08					.byte NN	;wh_Flags	dictionary flags
=34398					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86e3	a4 4c		ldy $4c		FZNe:		ldy fp
.86e5	b9 57 00	lda $0057,y			lda FSMant0,y
.86e8	d0 eb		bne $86d5			bne FTrue1
.86ea	f0 0f		beq $86fb			beq FFalse1
=9					CL	.var *-(WordListLink+wh_Xt)
=$86ec					en = *	; remember here
>86e1	09					.byte CL	;wh_CodeLength
>86ec	46 30 3c			L1:	.text "F0<"	;  name of word as a string, ending at wh_NameLastChar
>86ef	83					.byte (("F0<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>86f0	5e 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86f2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86f3	08					.byte NN	;wh_Flags	dictionary flags
=34415					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86f4	a4 4c		ldy $4c		FZLt:		ldy fp
.86f6	b9 57 00	lda $0057,y			lda FSMant0,y
.86f9	30 da		bmi $86d5			bmi FTrue1
.86fb					FFalse1:
.86fb	e6 4c		inc $4c				inc fp		; FDrop
.86fd	4c e1 b8	jmp $b8e1			jmp False	; return false
=12					CL	.var *-(WordListLink+wh_Xt)
=$8700					en = *	; remember here
>86f2	0c					.byte CL	;wh_CodeLength
>8700	46 30 3e 3d			L1:	.text "F0>="	;  name of word as a string, ending at wh_NameLastChar
>8704	a4					.byte (("F0>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>8705	6f 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8707	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8708	08					.byte NN	;wh_Flags	dictionary flags
=34436					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8709	a4 4c		ldy $4c		FZGe:		ldy fp
.870b	b9 57 00	lda $0057,y			lda FSMant0,y
.870e	10 c5		bpl $86d5			bpl FTrue1
.8710	30 e9		bmi $86fb			bmi FFalse1
=9					CL	.var *-(WordListLink+wh_Xt)
=$8712					en = *	; remember here
>8707	09					.byte CL	;wh_CodeLength
>8712	46 30 3e			L1:	.text "F0>"	;  name of word as a string, ending at wh_NameLastChar
>8715	c3					.byte (("F0>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8716	84 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8718	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8719	08					.byte NN	;wh_Flags	dictionary flags
=34453					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.871a	a4 4c		ldy $4c		FZGt:		ldy fp
.871c	b9 57 00	lda $0057,y			lda FSMant0,y
.871f	30 da		bmi $86fb			bmi FFalse1
.8721	d0 b2		bne $86d5			bne FTrue1
.8723	f0 d6		beq $86fb			beq FFalse1
=11					CL	.var *-(WordListLink+wh_Xt)
=$8725					en = *	; remember here
>8718	0b					.byte CL	;wh_CodeLength
>8725	46 30 3c 3d			L1:	.text "F0<="	;  name of word as a string, ending at wh_NameLastChar
>8729	a4					.byte (("F0<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>872a	95 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>872c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>872d	08					.byte NN	;wh_Flags	dictionary flags
=34473					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.872e	a4 4c		ldy $4c		FZLe:		ldy fp
.8730	b9 57 00	lda $0057,y			lda FSMant0,y
.8733	30 a0		bmi $86d5			bmi FTrue1
.8735	d0 c4		bne $86fb			bne FFalse1
.8737	f0 9c		beq $86d5			beq FTrue1
=11					CL	.var *-(WordListLink+wh_Xt)
=$8739					en = *	; remember here
>872c	0b					.byte CL	;wh_CodeLength
>8739	46 3c				L1:	.text "F<"	;  name of word as a string, ending at wh_NameLastChar
>873b	82					.byte (("F<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>873c	a9 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>873e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>873f	08					.byte NN	;wh_Flags	dictionary flags
=34491					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8740	20 52 84	jsr $8452	FLt:		jsr FCmpA
.8743	30 35		bmi $877a			bmi FTrue2
.8745					FFalse2:
.8745	e6 4c		inc $4c				inc fp		; FDrop
.8747	e6 4c		inc $4c				inc fp		; FDrop
.8749	4c e1 b8	jmp $b8e1			jmp False	; return False
=12					CL	.var *-(WordListLink+wh_Xt)
=$874c					en = *	; remember here
>873e	0c					.byte CL	;wh_CodeLength
>874c	46 3e 3d			L1:	.text "F>="	;  name of word as a string, ending at wh_NameLastChar
>874f	a3					.byte (("F>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>8750	bb 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8752	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8753	08					.byte NN	;wh_Flags	dictionary flags
=34511					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8754	20 52 84	jsr $8452	FGe:		jsr FCmpA
.8757	10 21		bpl $877a			bpl FTrue2
.8759	30 ea		bmi $8745			bmi FFalse2
=7					CL	.var *-(WordListLink+wh_Xt)
=$875b					en = *	; remember here
>8752	07					.byte CL	;wh_CodeLength
>875b	46 3e				L1:	.text "F>"	;  name of word as a string, ending at wh_NameLastChar
>875d	c2					.byte (("F>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>875e	cf 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8760	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8761	08					.byte NN	;wh_Flags	dictionary flags
=34525					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8762	20 52 84	jsr $8452	FGt:		jsr FCmpA
.8765	30 de		bmi $8745			bmi FFalse2
.8767	d0 11		bne $877a			bne FTrue2
.8769	f0 da		beq $8745			beq FFalse2
=9					CL	.var *-(WordListLink+wh_Xt)
=$876b					en = *	; remember here
>8760	09					.byte CL	;wh_CodeLength
>876b	46 3c 3d			L1:	.text "F<="	;  name of word as a string, ending at wh_NameLastChar
>876e	a3					.byte (("F<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>876f	dd 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8771	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8772	08					.byte NN	;wh_Flags	dictionary flags
=34542					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8773	20 52 84	jsr $8452	FLe:		jsr FCmpA
.8776	30 02		bmi $877a			bmi FTrue2
.8778	d0 cb		bne $8745			bne FFalse2
.877a					FTrue2:
.877a	e6 4c		inc $4c				inc fp		; FDrop
.877c	e6 4c		inc $4c				inc fp		; FDrop
.877e	4c ce b8	jmp $b8ce			jmp True	; return True
=14					CL	.var *-(WordListLink+wh_Xt)
=$8781					en = *	; remember here
>8771	0e					.byte CL	;wh_CodeLength
>8781	46 3c 3e			L1:	.text "F<>"	;  name of word as a string, ending at wh_NameLastChar
>8784	c3					.byte (("F<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8785	ee 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8787	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8788	08					.byte NN	;wh_Flags	dictionary flags
=34564					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8789	20 52 84	jsr $8452	FNe:		jsr FCmpA
.878c	d0 ec		bne $877a			bne FTrue2
.878e	f0 b5		beq $8745			beq FFalse2
=7					CL	.var *-(WordListLink+wh_Xt)
=$8790					en = *	; remember here
>8787	07					.byte CL	;wh_CodeLength
>8790	46 3d				L1:	.text "F="	;  name of word as a string, ending at wh_NameLastChar
>8792	a2					.byte (("F="[-1]&7)<<5)+(*-L1)	;wh_HNL
>8793	04 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8795	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8796	08					.byte NN	;wh_Flags	dictionary flags
=34578					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8797	20 52 84	jsr $8452	FEq:		jsr FCmpA
.879a	d0 a9		bne $8745			bne FFalse2
.879c	f0 dc		beq $877a			beq FTrue2
=7					CL	.var *-(WordListLink+wh_Xt)
=$879e					en = *	; remember here
>8795	07					.byte CL	;wh_CodeLength
>879e	46 7e 41 62 73			L1:	.text "F~Abs"	;  name of word as a string, ending at wh_NameLastChar
>87a3	65					.byte (("F~Abs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>87a4	12 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87a6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87a7	08					.byte NN	;wh_Flags	dictionary flags
=34595					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87a8	20 3d 86	jsr $863d	FTAbs:		jsr FMRot
.87ab	20 80 8b	jsr $8b80			jsr FMinus
.87ae	20 de 8b	jsr $8bde			jsr FAbs
.87b1	4c 62 87	jmp $8762			jmp FGt
=12					CL	.var *-(WordListLink+wh_Xt)
=$87b4					en = *	; remember here
>87a6	0c					.byte CL	;wh_CodeLength
>87b4	46 7e 52 65 6c			L1:	.text "F~Rel"	;  name of word as a string, ending at wh_NameLastChar
>87b9	85					.byte (("F~Rel"[-1]&7)<<5)+(*-L1)	;wh_HNL
>87ba	23 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87bd	08					.byte NN	;wh_Flags	dictionary flags
=34617					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87be	20 67 85	jsr $8567	FTRel:		jsr FOver
.87c1	a9 03		lda #$03			lda #3
.87c3	20 8e 85	jsr $858e			jsr FPickA
.87c6	20 3e 8b	jsr $8b3e			jsr FPlus
.87c9	20 de 8b	jsr $8bde			jsr FAbs
.87cc	20 12 8c	jsr $8c12			jsr FStar		; r1 r2 r3*|r1+r2|
.87cf	20 3d 86	jsr $863d			jsr FMRot		; r3*|r1+r2| r1 r2
.87d2	20 80 8b	jsr $8b80			jsr FMinus
.87d5	20 de 8b	jsr $8bde			jsr FAbs
.87d8	4c 62 87	jmp $8762			jmp FGt
=29					CL	.var *-(WordListLink+wh_Xt)
=$87db					en = *	; remember here
>87bc	1d					.byte CL	;wh_CodeLength
>87db	46 7e				L1:	.text "F~"	;  name of word as a string, ending at wh_NameLastChar
>87dd	c2					.byte (("F~"[-1]&7)<<5)+(*-L1)	;wh_HNL
>87de	39 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87e0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87e1	08					.byte NN	;wh_Flags	dictionary flags
=34653					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87e2	a4 4c		ldy $4c		FTilde:		ldy fp
.87e4	b9 57 00	lda $0057,y			lda FSMant0,y
.87e7	30 06		bmi $87ef			bmi _10			; r3<0
.87e9	d0 bd		bne $87a8			bne FTAbs		; r3>0
.87eb	e6 4c		inc $4c				inc fp			; r3=0
.87ed	d0 a8		bne $8797			bne FEq
.87ef	20 b7 8b	jsr $8bb7	_10:		jsr FNegate
.87f2	4c be 87	jmp $87be			jmp FTRel
=19					CL	.var *-(WordListLink+wh_Xt)
=$87f5					en = *	; remember here
>87e0	13					.byte CL	;wh_CodeLength
>87f5	46 56 61 72 69 61 62 6c		L1:	.text "FVariable"	;  name of word as a string, ending at wh_NameLastChar
>87fd	65
>87fe	a9					.byte (("FVariable"[-1]&7)<<5)+(*-L1)	;wh_HNL
>87ff	5d 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8801	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8802	0c					.byte IM+NN	;wh_Flags	dictionary flags
=34686					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8803	20 c8 c2	jsr $c2c8	FVariable:	jsr Create		; compile word header & push PFA adr
.8806	20 03 bd	jsr $bd03			jsr adjust_z		; fix word code length
.8809	20 bf 88	jsr $88bf			jsr F0			; alloc & init data
.880c	4c a9 86	jmp $86a9			jmp FComma
=12					CL	.var *-(WordListLink+wh_Xt)
=$880f					en = *	; remember here
>8801	0c					.byte CL	;wh_CodeLength
>880f	46 4c 69 74 65 72 61 6c		L1:	.text "FLiteral"	;  name of word as a string, ending at wh_NameLastChar
>8817	88					.byte (("FLiteral"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8818	7e 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>881a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>881b	0c					.byte IM+NN	;wh_Flags	dictionary flags
=34711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.881c	20 31 88	jsr $8831	FLiteral:	jsr FLitTest
.881f	f0 0a		beq $882b			beq _Short
.8821	a9 5a		lda #$5a			lda #<FLitI		; compile JSR FLitI
.8823	a0 88		ldy #$88			ldy #>FLitI
.8825	20 4d ce	jsr $ce4d			jsr Jsr_Comma_YA
.8828	4c a9 86	jmp $86a9			jmp FComma		; inline operand, return
.882b	20 3d 88	jsr $883d	_Short:		jsr FLitShort
.882e	4c 4d ce	jmp $ce4d			jmp Jsr_Comma_YA	; compile jsr FLitYA, & return
=21					CL	.var *-(WordListLink+wh_Xt)
=$8831					en = *	; remember here
>881a	15					.byte CL	;wh_CodeLength
.8831					FLitTest:
.8831	a4 4c		ldy $4c				ldy fp
.8833	b9 61 00	lda $0061,y			lda FSMant1,y		; will short work?
.8836	19 6b 00	ora $006b,y			ora FSMant2,y
.8839	19 75 00	ora $0075,y			ora FSMant3,y
.883c	60		rts				rts
.883d					FLitShort:
.883d	a9 a9		lda #$a9			lda #$a9		; compile LDA #mant0
.883f	20 0e ce	jsr $ce0e			jsr C_Comma_A
.8842	b9 57 00	lda $0057,y			lda FSMant0,y
.8845	20 0e ce	jsr $ce0e			jsr C_Comma_A
.8848	a9 a0		lda #$a0			lda #$a0		; compile LDY #exp
.884a	20 0e ce	jsr $ce0e			jsr C_Comma_A
.884d	b9 4d 00	lda $004d,y			lda FSExp,y
.8850	20 0e ce	jsr $ce0e			jsr C_Comma_A
.8853	e6 4c		inc $4c				inc fp			; FDrop
.8855	a9 a5		lda #$a5			lda #<FLitYA		; point at FLitYA
.8857	a0 88		ldy #$88			ldy #>FLitYA
.8859	60		rts				rts
.885a					FLitI:
.885a	68		pla				pla			; tmp2= RTS addr
.885b	85 16		sta $16				sta tmp2+0
.885d	18		clc				clc			; bump RTS addr over inline float data
.885e	69 05		adc #$05			adc #5
.8860	a8		tay				tay
.8861	68		pla				pla
.8862	85 17		sta $17				sta tmp2+1
.8864	69 00		adc #$00			adc #0
.8866	48		pha				pha
.8867	98		tya				tya
.8868	48		pha				pha
.8869	a0 01		ldy #$01			ldy #1			; correct for RTS addr
.886b	4c 53 86	jmp $8653			jmp FAt_Tmp2Y		; fetch inline data, & return
>886e	46 43 6f 6e 73 74 61 6e		L1:	.text "FConstant"	;  name of word as a string, ending at wh_NameLastChar
>8876	74
>8877	89					.byte (("FConstant"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8878	97 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>887a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>887b	08					.byte NN	;wh_Flags	dictionary flags
=34807					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.887c	20 2b c2	jsr $c22b	FConstant:	jsr Header_Comma	; compile word header
.887f	20 31 88	jsr $8831			jsr FLitTest		; will short work?
.8882	f0 0d		beq $8891			beq _Short
.8884	a9 9a		lda #$9a			lda #<FConstantRun	; compile call
.8886	a0 88		ldy #$88			ldy #>FConstantRun
.8888	20 4d ce	jsr $ce4d			jsr Jsr_Comma_YA
.888b	20 03 bd	jsr $bd03			jsr adjust_z
.888e	4c a9 86	jmp $86a9			jmp FComma		; inline operand, & return
.8891					_Short:
.8891	20 3d 88	jsr $883d			jsr FLitShort		; compile load value
.8894	20 64 ce	jsr $ce64			jsr Jmp_Comma_YA	; compile JMP
.8897	4c 03 bd	jmp $bd03			jmp adjust_z
=30					CL	.var *-(WordListLink+wh_Xt)
=$889a					en = *	; remember here
>887a	1e					.byte CL	;wh_CodeLength
.889a					FConstantRun:
.889a	68		pla				pla			; tmp2= pop RTS addr
.889b	85 16		sta $16				sta tmp2+0
.889d	68		pla				pla
.889e	85 17		sta $17				sta tmp2+1
.88a0	a0 01		ldy #$01			ldy #1			; correct for RTS addr
.88a2	4c 53 86	jmp $8653			jmp FAt_Tmp2Y		; fetch inline data, & return
.88a5					FLitYA:
.88a5	20 b1 84	jsr $84b1			jsr FAllocX		; alloc FP stack entry, X=fp stack index
.88a8	94 4d		sty $4d,x			sty FSExp,x		; exp= Y
.88aa	95 57		sta $57,x			sta FSMant0,x		; Mant= A,0,0,0
.88ac	a9 00		lda #$00			lda #0
.88ae	95 61		sta $61,x			sta FSMant1,x
.88b0	95 6b		sta $6b,x			sta FSMant2,x
.88b2	95 75		sta $75,x			sta FSMant3,x
.88b4	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.88b6	60		rts				rts
>88b7	30 2e 65			L1:	.text "0.e"	;  name of word as a string, ending at wh_NameLastChar
>88ba	a3					.byte (("0.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>88bb	f7 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88bd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88be	08					.byte NN	;wh_Flags	dictionary flags
=34874					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88bf	a9 00		lda #$00	F0:		lda #0
.88c1	a0 80		ldy #$80			ldy #$80
.88c3	d0 e0		bne $88a5			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$88c5					en = *	; remember here
>88bd	06					.byte CL	;wh_CodeLength
>88c5	31 30 30 30 2e 65		L1:	.text "1000.e"	;  name of word as a string, ending at wh_NameLastChar
>88cb	a6					.byte (("1000.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>88cc	3a 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88cf	08					.byte NN	;wh_Flags	dictionary flags
=34891					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88d0	a9 7d		lda #$7d	F1000:		lda #$7d
.88d2	a0 0a		ldy #$0a			ldy #10
.88d4	d0 cf		bne $88a5			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$88d6					en = *	; remember here
>88ce	06					.byte CL	;wh_CodeLength
>88d6	31 30 2e 65			L1:	.text "10.e"	;  name of word as a string, ending at wh_NameLastChar
>88da	a4					.byte (("10.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>88db	4b 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88de	08					.byte NN	;wh_Flags	dictionary flags
=34906					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88df	a9 50		lda #$50	F10:		lda #$50
.88e1	a0 04		ldy #$04			ldy #4
.88e3	d0 c0		bne $88a5			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$88e5					en = *	; remember here
>88dd	06					.byte CL	;wh_CodeLength
>88e5	32 2e 65			L1:	.text "2.e"	;  name of word as a string, ending at wh_NameLastChar
>88e8	a3					.byte (("2.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>88e9	5a 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88eb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88ec	08					.byte NN	;wh_Flags	dictionary flags
=34920					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88ed	a9 40		lda #$40	F2:		lda #$40
.88ef	a0 02		ldy #$02			ldy #2
.88f1	d0 b2		bne $88a5			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$88f3					en = *	; remember here
>88eb	06					.byte CL	;wh_CodeLength
>88f3	31 2e 65			L1:	.text "1.e"	;  name of word as a string, ending at wh_NameLastChar
>88f6	a3					.byte (("1.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>88f7	68 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88f9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88fa	08					.byte NN	;wh_Flags	dictionary flags
=34934					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88fb	a9 40		lda #$40	F1:		lda #$40
.88fd	a0 01		ldy #$01			ldy #1
.88ff	d0 a4		bne $88a5			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8901					en = *	; remember here
>88f9	06					.byte CL	;wh_CodeLength
>8901	2e 31 65			L1:	.text ".1e"	;  name of word as a string, ending at wh_NameLastChar
>8904	a3					.byte ((".1e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8905	76 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8907	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8908	08					.byte NN	;wh_Flags	dictionary flags
=34948					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8909	20 9a 88	jsr $889a	F10th:		jsr FConstantRun
>890c	67 66 66 66					.dword $66666667	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8910	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$8911					en = *	; remember here
>8907	08					.byte CL	;wh_CodeLength
>8911	50 69				L1:	.text "Pi"	;  name of word as a string, ending at wh_NameLastChar
>8913	22					.byte (("Pi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8914	84 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8916	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8917	08					.byte NN	;wh_Flags	dictionary flags
=34963					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8918	20 9a 88	jsr $889a	FPi:		jsr FConstantRun
>891b	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>891f	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$8920					en = *	; remember here
>8916	08					.byte CL	;wh_CodeLength
>8920	50 69 2f 32			L1:	.text "Pi/2"	;  name of word as a string, ending at wh_NameLastChar
>8924	44					.byte (("Pi/2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8925	93 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8927	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8928	08					.byte NN	;wh_Flags	dictionary flags
=34980					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8929	20 9a 88	jsr $889a	FPiH:		jsr FConstantRun
>892c	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8930	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$8931					en = *	; remember here
>8927	08					.byte CL	;wh_CodeLength
>8931	50 69 2f 34			L1:	.text "Pi/4"	;  name of word as a string, ending at wh_NameLastChar
>8935	84					.byte (("Pi/4"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8936	a4 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8938	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8939	08					.byte NN	;wh_Flags	dictionary flags
=34997					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.893a	20 9a 88	jsr $889a	FPiQ:		jsr FConstantRun
>893d	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8941	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$8942					en = *	; remember here
>8938	08					.byte CL	;wh_CodeLength
>8942	32 50 69			L1:	.text "2Pi"	;  name of word as a string, ending at wh_NameLastChar
>8945	23					.byte (("2Pi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8946	b5 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8948	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8949	08					.byte NN	;wh_Flags	dictionary flags
=35013					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.894a	20 9a 88	jsr $889a	F2Pi:		jsr FConstantRun
>894d	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8951	03						.char 3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$8952					en = *	; remember here
>8948	08					.byte CL	;wh_CodeLength
>8952	46 2e 45			L1:	.text "F.E"	;  name of word as a string, ending at wh_NameLastChar
>8955	a3					.byte (("F.E"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8956	c5 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8958	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8959	08					.byte NN	;wh_Flags	dictionary flags
=35029					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.895a	20 9a 88	jsr $889a	FE:		jsr FConstantRun
>895d	2c 2a fc 56					.dword $56fc2a2c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8961	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$8962					en = *	; remember here
>8958	08					.byte CL	;wh_CodeLength
>8962	46 56 61 6c 75 65		L1:	.text "FValue"	;  name of word as a string, ending at wh_NameLastChar
>8968	a6					.byte (("FValue"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8969	d5 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>896b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>896c	0c					.byte IM+NN	;wh_Flags	dictionary flags
=35048					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.896d	20 2b c2	jsr $c22b	FValue:		jsr Header_Comma	; compile word header
.8970	a9 7d		lda #$7d			lda #<FValue_runtime	; compile JSR FValue_runtime
.8972	a0 89		ldy #$89			ldy #>FValue_runtime
.8974	20 4d ce	jsr $ce4d			jsr Jsr_Comma_YA
.8977	20 03 bd	jsr $bd03			jsr adjust_z		; fix word length
.897a	4c a9 86	jmp $86a9			jmp FComma		; alloc & init value
=16					CL	.var *-(WordListLink+wh_Xt)
=$897d					en = *	; remember here
>896b	10					.byte CL	;wh_CodeLength
.897d					FValue_runtime:
.897d	4c 9a 88	jmp $889a			jmp FConstantRun
>8980	46 53 63 61 6c 65		L1:	.text "FScale"	;  name of word as a string, ending at wh_NameLastChar
>8986	a6					.byte (("FScale"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8987	e8 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8989	03					.byte 3		;wh_CodeLength  (with placeholder value)
>898a	08					.byte NN	;wh_Flags	dictionary flags
=35078					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.898b	20 c7 b4	jsr $b4c7	FScale:		jsr PopA		; pop n
.898e	86 14		stx $14		FScaleA:	stx tmp1		; save data stack index
.8990	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.8992	b4 57		ldy $57,x			ldy FSMant0,x		; mantissa zero?
.8994	f0 07		beq $899d			beq _8
.8996	18		clc				clc
.8997	75 4d		adc $4d,x			adc FSExp,x
.8999	95 4d		sta $4d,x			sta FSExp,x
.899b	70 03		bvs $89a0			bvs _overflow		; overflow or underflow?
.899d	a6 14		ldx $14		_8:		ldx tmp1		; restore data stack index
.899f	60		rts				rts
.89a0					_overflow:
.89a0	a6 14		ldx $14				ldx tmp1		; restore data stack index
.89a2	20 45 b5	jsr $b545			jsr Throw_FpOutOfRange
=26					CL	.var *-(WordListLink+wh_Xt)
=$89a5					en = *	; remember here
>8989	1a					.byte CL	;wh_CodeLength
>89a5	46 32 2a			L1:	.text "F2*"	;  name of word as a string, ending at wh_NameLastChar
>89a8	43					.byte (("F2*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>89a9	06 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89ac	08					.byte NN	;wh_Flags	dictionary flags
=35112					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89ad	a9 01		lda #$01	F2Star:		lda #1
.89af	d0 dd		bne $898e			bne FScaleA
=4					CL	.var *-(WordListLink+wh_Xt)
=$89b1					en = *	; remember here
>89ab	04					.byte CL	;wh_CodeLength
>89b1	46 32 2f			L1:	.text "F2/"	;  name of word as a string, ending at wh_NameLastChar
>89b4	e3					.byte (("F2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>89b5	28 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89b8	08					.byte NN	;wh_Flags	dictionary flags
=35124					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89b9	a9 ff		lda #$ff	F2Slash:	lda #$ff
.89bb	d0 d1		bne $898e			bne FScaleA
=4					CL	.var *-(WordListLink+wh_Xt)
=$89bd					en = *	; remember here
>89b7	04					.byte CL	;wh_CodeLength
>89bd	46 6c 6f 6f 72			L1:	.text "Floor"	;  name of word as a string, ending at wh_NameLastChar
>89c2	45					.byte (("Floor"[-1]&7)<<5)+(*-L1)	;wh_HNL
>89c3	34 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89c5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89c6	08					.byte NN	;wh_Flags	dictionary flags
=35138					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89c7	a4 4c		ldy $4c		Floor:		ldy fp
.89c9	b9 57 00	lda $0057,y			lda FSMant0,y		; negative?
.89cc	10 19		bpl $89e7			bpl _a
.89ce	b9 4d 00	lda $004d,y			lda FSExp,y		; > -1 ?
.89d1	10 14		bpl $89e7			bpl _a
.89d3	a9 80		lda #$80			lda #$80		; return -1
.89d5	99 57 00	sta $0057,y			sta FSMant0,y
.89d8	a9 00		lda #$00			lda #0
.89da	99 4d 00	sta $004d,y			sta FSExp,y
.89dd	99 61 00	sta $0061,y			sta FSMant1,y
.89e0	99 6b 00	sta $006b,y			sta FSMant2,y
.89e3	99 75 00	sta $0075,y			sta FSMant3,y
.89e6	60		rts				rts
.89e7	a9 1f		lda #$1f	_a:		lda #31
.89e9	20 ef 89	jsr $89ef			jsr FShiftA
.89ec	4c b7 8a	jmp $8ab7			jmp FNormX
=40					CL	.var *-(WordListLink+wh_Xt)
=$89ef					en = *	; remember here
>89c5	28					.byte CL	;wh_CodeLength
.89ef	86 14		stx $14		FShiftA:	stx tmp1+0		; save data stack index
.89f1	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.89f3	a8		tay		FShiftAX:	tay			; save desired alignment
.89f4	38		sec				sec			; calc bit shift count
.89f5	f5 4d		sbc $4d,x			sbc FSExp,x
.89f7	f0 2e		beq $8a27			beq _leave
.89f9	70 1e		bvs $8a19			bvs _overflow
.89fb	30 2a		bmi $8a27			bmi _leave
.89fd	c9 20		cmp #$20			cmp #32
.89ff	b0 1a		bcs $8a1b			bcs _zero
.8a01	94 4d		sty $4d,x			sty FSExp,x
.8a03	a8		tay				tay
.8a04	b5 57		lda $57,x			lda FSMant0,x
.8a06	c9 80		cmp #$80	_12:		cmp #$80		; mantissa >>=1
.8a08	6a		ror a				ror a
.8a09	76 61		ror $61,x			ror FSMant1,x
.8a0b	76 6b		ror $6b,x			ror FSMant2,x
.8a0d	76 75		ror $75,x			ror FSMant3,x
.8a0f	88		dey				dey
.8a10	d0 f4		bne $8a06			bne _12
.8a12	95 57		sta $57,x			sta FSMant0,x
.8a14	b4 4d		ldy $4d,x	_30:		ldy FSExp,x
.8a16	a6 4c		ldx $4c				ldx fp			; restore fp stack index (FShiftAX could have had a funny one)
.8a18	60		rts				rts
.8a19	10 0c		bpl $8a27	_overflow:	bpl _leave
.8a1b	94 4d		sty $4d,x	_zero:		sty FSExp,x		; return zero
.8a1d	a9 00		lda #$00			lda #0
.8a1f	95 57		sta $57,x			sta FSMant0,x
.8a21	95 61		sta $61,x			sta FSMant1,x
.8a23	95 6b		sta $6b,x			sta FSMant2,x
.8a25	95 75		sta $75,x			sta FSMant3,x
.8a27	18		clc		_leave:		clc
.8a28	90 ea		bcc $8a14			bcc _30
>8a2a	46 54 72 75 6e 63		L1:	.text "FTrunc"	;  name of word as a string, ending at wh_NameLastChar
>8a30	66					.byte (("FTrunc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a31	42 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a33	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a34	08					.byte NN	;wh_Flags	dictionary flags
=35248					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a35	a4 4c		ldy $4c		FTrunc:		ldy fp
.8a37	b9 57 00	lda $0057,y			lda FSMant0,y
.8a3a	10 8b		bpl $89c7			bpl Floor
.8a3c	20 b7 8b	jsr $8bb7			jsr FNegate
.8a3f	20 c7 89	jsr $89c7			jsr Floor
.8a42	4c b7 8b	jmp $8bb7			jmp FNegate
>8a45	46 52 6f 75 6e 64		L1:	.text "FRound"	;  name of word as a string, ending at wh_NameLastChar
>8a4b	86					.byte (("FRound"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a4c	b0 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a4e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a4f	08					.byte NN	;wh_Flags	dictionary flags
=35275					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a50	a9 1f		lda #$1f	FRound:		lda #31
.8a52	20 ef 89	jsr $89ef			jsr FShiftA
.8a55	90 05		bcc $8a5c			bcc _15
.8a57	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8a59	4c 73 8b	jmp $8b73			jmp F1Plus
.8a5c	4c b7 8a	jmp $8ab7	_15:		jmp FNormX
=15					CL	.var *-(WordListLink+wh_Xt)
=$8a5f					en = *	; remember here
>8a4e	0f					.byte CL	;wh_CodeLength
>8a5f	46 49 6e 74 46 72 63		L1:	.text "FIntFrc"	;  name of word as a string, ending at wh_NameLastChar
>8a66	67					.byte (("FIntFrc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a67	cb 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a69	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a6a	08					.byte NN	;wh_Flags	dictionary flags
=35302					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a6b	20 43 85	jsr $8543	FIntFrc:	jsr FDup	; ( r1 r1 )
.8a6e	20 c7 89	jsr $89c7			jsr Floor	; ( r1 rint )
.8a71	20 04 86	jsr $8604			jsr FTuck	; ( rint r1 rint )
.8a74	20 80 8b	jsr $8b80			jsr FMinus	; ( rint rfrac )
.8a77	4c cb 85	jmp $85cb			jmp FSwap	; ( rfrac rint )
=15					CL	.var *-(WordListLink+wh_Xt)
=$8a7a					en = *	; remember here
>8a69	0f					.byte CL	;wh_CodeLength
>8a7a	46 4d 41 6c 69 67 6e 58		L1:	.text "FMAlignX"	;  name of word as a string, ending at wh_NameLastChar
>8a82	08					.byte (("FMAlignX"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a83	e6 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a85	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a86	08					.byte NN	;wh_Flags	dictionary flags
=35330					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a87	86 14		stx $14		FMAlignX:	stx tmp1+0	; save data stack index
.8a89	a6 4c		ldx $4c				ldx fp		; load FP stack index
.8a8b	e0 09		cpx #$09			cpx #FDim-1	; check FP stack for >=2 entries
.8a8d	b0 19		bcs $8aa8			bcs Throw_FPStack_3
.8a8f	b5 4d		lda $4d,x			lda FSExp+0,x	; compare exponents
.8a91	38		sec				sec
.8a92	f5 4e		sbc $4e,x			sbc FSExp+1,x
.8a94	30 03		bmi $8a99			bmi _1		; r1 smaller?
.8a96	d0 08		bne $8aa0			bne _2		; r2 smaller?
.8a98	60		rts				rts
.8a99					_1:
.8a99	70 07		bvs $8aa2			bvs _2b		; was this a big positive #?
.8a9b	b5 4e		lda $4e,x	_1b:		lda FSExp+1,x	; make r1 like r2
.8a9d	4c f3 89	jmp $89f3			jmp FShiftAX
.8aa0					_2:
.8aa0	70 f7		bvs $8a99			bvs _1		; was this a big negative #?
.8aa2	b5 4d		lda $4d,x	_2b:		lda FSExp+0,x	; make r2 like r1
.8aa4	e8		inx				inx
.8aa5	4c f3 89	jmp $89f3			jmp FShiftAX
=33					CL	.var *-(WordListLink+wh_Xt)
=$8aa8					en = *	; remember here
>8a85	21					.byte CL	;wh_CodeLength
.8aa8	20 3b b5	jsr $b53b	Throw_FPStack_3: jsr Throw_FPStack
>8aab	46 4e 6f 72 6d			L1:	.text "FNorm"	;  name of word as a string, ending at wh_NameLastChar
>8ab0	a5					.byte (("FNorm"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8ab1	02 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ab3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ab4	08					.byte NN	;wh_Flags	dictionary flags
=35376					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ab5	86 14		stx $14		FNorm:		stx tmp1+0		; save data stack index
.8ab7	a6 4c		ldx $4c		FNormX:		ldx fp			; switch to FP stack
.8ab9	b4 4d		ldy $4d,x			ldy FSExp,x
.8abb	b5 57		lda $57,x			lda FSMant0,x		; mantissa negative?
.8abd	30 2d		bmi $8aec			bmi _Neg
.8abf	d0 0f		bne $8ad0			bne _Pos2		; do byte shift
.8ac1	20 1f 8b	jsr $8b1f			jsr _ShiftB
.8ac4	d0 0a		bne $8ad0			bne _Pos2
.8ac6	20 1f 8b	jsr $8b1f			jsr _ShiftB
.8ac9	d0 05		bne $8ad0			bne _Pos2
.8acb	20 1f 8b	jsr $8b1f			jsr _ShiftB
.8ace	f0 43		beq $8b13			beq _zero		; no significant bits left?
.8ad0	18		clc		_Pos2:		clc
.8ad1	30 0a		bmi $8add			bmi _RShft
.8ad3	88		dey		_Pos3:		dey			; do bit shift
.8ad4	16 75		asl $75,x			asl FSMant3,x
.8ad6	36 6b		rol $6b,x			rol FSMant2,x
.8ad8	36 61		rol $61,x			rol FSMant1,x
.8ada	2a		rol a				rol a
.8adb	10 f6		bpl $8ad3			bpl _Pos3
.8add					_RShft:
.8add	c8		iny				iny
.8ade	6a		ror a				ror a
.8adf	76 61		ror $61,x			ror FSMant1,x
.8ae1	76 6b		ror $6b,x			ror FSMant2,x
.8ae3	76 75		ror $75,x			ror FSMant3,x
.8ae5					_28:
.8ae5	95 57		sta $57,x			sta FSMant0,x
.8ae7	94 4d		sty $4d,x			sty FSExp,x
.8ae9	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.8aeb	60		rts				rts
.8aec					_Neg:
.8aec	c9 ff		cmp #$ff			cmp #$ff
.8aee	d0 11		bne $8b01			bne _Neg2	; do byte shift
.8af0	20 1f 8b	jsr $8b1f			jsr _ShiftB
.8af3	c9 ff		cmp #$ff			cmp #$ff
.8af5	d0 0a		bne $8b01			bne _Neg2
.8af7	20 1f 8b	jsr $8b1f			jsr _ShiftB
.8afa	c9 ff		cmp #$ff			cmp #$ff
.8afc	d0 03		bne $8b01			bne _Neg2
.8afe	20 1f 8b	jsr $8b1f			jsr _ShiftB
.8b01	c9 00		cmp #$00	_Neg2:		cmp #0
.8b03	10 d8		bpl $8add			bpl _RShft
.8b05	88		dey		_Neg3:		dey
.8b06	16 75		asl $75,x			asl FSMant3,x
.8b08	36 6b		rol $6b,x			rol FSMant2,x
.8b0a	36 61		rol $61,x			rol FSMant1,x
.8b0c	2a		rol a				rol a
.8b0d	30 f6		bmi $8b05			bmi _Neg3
.8b0f	10 cc		bpl $8add			bpl _RShft
.8b11	68		pla		_Zerop:		pla
.8b12	68		pla				pla		; pop rts addr from _ShiftB
.8b13	a9 00		lda #$00	_zero:		lda #0
.8b15	95 75		sta $75,x			sta FSMant3,x
.8b17	95 6b		sta $6b,x			sta FSMant2,x
.8b19	95 61		sta $61,x			sta FSMant1,x
.8b1b	a0 80		ldy #$80			ldy #$80
.8b1d	d0 c6		bne $8ae5			bne _28
.8b1f					_ShiftB:
.8b1f	98		tya				tya		; exponent -= 8
.8b20	38		sec				sec
.8b21	e9 08		sbc #$08			sbc #8
.8b23	a8		tay				tay
.8b24	70 eb		bvs $8b11			bvs _zerop	;is this useful? do we need more of them?
.8b26	b5 61		lda $61,x			lda FSMant1,x
.8b28	48		pha				pha
.8b29	b5 6b		lda $6b,x			lda FSMant2,x
.8b2b	95 61		sta $61,x			sta FSMant1,x
.8b2d	b5 75		lda $75,x			lda FSMant3,x
.8b2f	95 6b		sta $6b,x			sta FSMant2,x
.8b31	a9 00		lda #$00			lda #0
.8b33	95 75		sta $75,x			sta FSMant3,x
.8b35	68		pla				pla
.8b36	60		rts				rts
=130					CL	.var *-(WordListLink+wh_Xt)
=$8b37					en = *	; remember here
>8ab3	82					.byte CL	;wh_CodeLength
>8b37	46 2b				L1:	.text "F+"	;  name of word as a string, ending at wh_NameLastChar
>8b39	62					.byte (("F+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b3a	30 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b3c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b3d	08					.byte NN	;wh_Flags	dictionary flags
=35513					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b3e	20 87 8a	jsr $8a87	FPlus:		jsr FMAlignX	; align mantissas, X= fp stack index
.8b41	18		clc				clc		; add mantissas
.8b42	b5 76		lda $76,x			lda FSMant3+1,x
.8b44	75 75		adc $75,x			adc FSMant3+0,x
.8b46	95 76		sta $76,x			sta FSMant3+1,x
.8b48	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b4a	75 6b		adc $6b,x			adc FSMant2+0,x
.8b4c	95 6c		sta $6c,x			sta FSMant2+1,x
.8b4e	b5 62		lda $62,x			lda FSMant1+1,x
.8b50	75 61		adc $61,x			adc FSMant1+0,x
.8b52	95 62		sta $62,x			sta FSMant1+1,x
.8b54	b5 58		lda $58,x			lda FSMant0+1,x
.8b56	75 57		adc $57,x			adc FSMant0+0,x
.8b58					FPlusFin:
.8b58	e8		inx				inx		; FDrop r2
.8b59	86 4c		stx $4c				stx fp
.8b5b	50 09		bvc $8b66	FPlusFin3:	bvc _19		; if overflow
.8b5d	6a		ror a				ror a		;   shift mantissa right 1 bit
.8b5e	76 61		ror $61,x			ror FSMant1,x
.8b60	76 6b		ror $6b,x			ror FSMant2,x
.8b62	76 75		ror $75,x			ror FSMant3,x
.8b64	f6 4d		inc $4d,x			inc FSExp,x	;   adjust exponent
.8b66					_19:
.8b66	95 57		sta $57,x			sta FSMant0,x
.8b68	4c b7 8a	jmp $8ab7			jmp FNormX	; normalize, return
=45					CL	.var *-(WordListLink+wh_Xt)
=$8b6b					en = *	; remember here
>8b3c	2d					.byte CL	;wh_CodeLength
>8b6b	46 31 2b			L1:	.text "F1+"	;  name of word as a string, ending at wh_NameLastChar
>8b6e	63					.byte (("F1+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b6f	b9 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b71	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b72	08					.byte NN	;wh_Flags	dictionary flags
=35566					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b73	20 fb 88	jsr $88fb	F1Plus:		jsr F1
.8b76	4c 3e 8b	jmp $8b3e			jmp FPlus
=6					CL	.var *-(WordListLink+wh_Xt)
=$8b79					en = *	; remember here
>8b71	06					.byte CL	;wh_CodeLength
>8b79	46 2d				L1:	.text "F-"	;  name of word as a string, ending at wh_NameLastChar
>8b7b	a2					.byte (("F-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b7c	ee 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b7e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b7f	08					.byte NN	;wh_Flags	dictionary flags
=35579					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b80	20 87 8a	jsr $8a87	FMinus:		jsr FMAlignX	; align mantissas
.8b83	38		sec				sec		; subtract mantissas
.8b84	b5 76		lda $76,x			lda FSMant3+1,x
.8b86	f5 75		sbc $75,x			sbc FSMant3+0,x
.8b88	95 76		sta $76,x			sta FSMant3+1,x
.8b8a	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b8c	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8b8e	95 6c		sta $6c,x			sta FSMant2+1,x
.8b90	b5 62		lda $62,x			lda FSMant1+1,x
.8b92	f5 61		sbc $61,x			sbc FSMant1+0,x
.8b94	95 62		sta $62,x			sta FSMant1+1,x
.8b96	b5 58		lda $58,x			lda FSMant0+1,x
.8b98	f5 57		sbc $57,x			sbc FSMant0+0,x
.8b9a	4c 58 8b	jmp $8b58			jmp FPlusFin
=29					CL	.var *-(WordListLink+wh_Xt)
=$8b9d					en = *	; remember here
>8b7e	1d					.byte CL	;wh_CodeLength
>8b9d	46 31 2d			L1:	.text "F1-"	;  name of word as a string, ending at wh_NameLastChar
>8ba0	a3					.byte (("F1-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8ba1	fb 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ba3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ba4	08					.byte NN	;wh_Flags	dictionary flags
=35616					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ba5	20 fb 88	jsr $88fb	F1Minus:	jsr F1
.8ba8	4c 80 8b	jmp $8b80			jmp FMinus
=6					CL	.var *-(WordListLink+wh_Xt)
=$8bab					en = *	; remember here
>8ba3	06					.byte CL	;wh_CodeLength
>8bab	46 4e 65 67 61 74 65		L1:	.text "FNegate"	;  name of word as a string, ending at wh_NameLastChar
>8bb2	a7					.byte (("FNegate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8bb3	20 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8bb5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8bb6	08					.byte NN	;wh_Flags	dictionary flags
=35634					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8bb7	86 14		stx $14		FNegate:	stx tmp1	; save data stack index
.8bb9	a6 4c		ldx $4c				ldx fp		; X= FP stack index
.8bbb	38		sec				sec		; mantissa = 0 - mantissa
.8bbc	a9 00		lda #$00			lda #0
.8bbe	f5 75		sbc $75,x			sbc FSMant3,x
.8bc0	95 75		sta $75,x			sta FSMant3,x
.8bc2	a9 00		lda #$00			lda #0
.8bc4	f5 6b		sbc $6b,x			sbc FSMant2,x
.8bc6	95 6b		sta $6b,x			sta FSMant2,x
.8bc8	a9 00		lda #$00			lda #0
.8bca	f5 61		sbc $61,x			sbc FSMant1,x
.8bcc	95 61		sta $61,x			sta FSMant1,x
.8bce	a9 00		lda #$00			lda #0
.8bd0	f5 57		sbc $57,x			sbc FSMant0,x
.8bd2	4c 5b 8b	jmp $8b5b			jmp FPlusFin3	; finish up, return
=30					CL	.var *-(WordListLink+wh_Xt)
=$8bd5					en = *	; remember here
>8bb5	1e					.byte CL	;wh_CodeLength
>8bd5	46 41 62 73			L1:	.text "FAbs"	;  name of word as a string, ending at wh_NameLastChar
>8bd9	64					.byte (("FAbs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8bda	32 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8bdc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8bdd	08					.byte NN	;wh_Flags	dictionary flags
=35673					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8bde	a4 4c		ldy $4c		FAbs:		ldy fp
.8be0	b9 57 00	lda $0057,y			lda FSMant0,y		; mantissa negative?
.8be3	30 d2		bmi $8bb7			bmi FNegate
.8be5	60		rts				rts
=8					CL	.var *-(WordListLink+wh_Xt)
=$8be6					en = *	; remember here
>8bdc	08					.byte CL	;wh_CodeLength
.8be6	4c 3b b5	jmp $b53b	Throw_FPStack_4: jmp Throw_FPStack
.8be9	a4 4c		ldy $4c		FPos:		ldy fp			; load FP stack index
.8beb	c0 09		cpy #$09			cpy #FDim-1		; check FP stack for 2
.8bed	b0 f7		bcs $8be6			bcs Throw_FPStack_4
.8bef	b9 57 00	lda $0057,y			lda FSMant0+0,y		; calc result sign
.8bf2	59 58 00	eor $0058,y			eor FSMant0+1,y
.8bf5	08		php				php
.8bf6	b9 58 00	lda $0058,y			lda FSMant0+1,y		; if NOS negative
.8bf9	10 07		bpl $8c02			bpl +
.8bfb	e6 4c		inc $4c				inc fp			;   point at NOS
.8bfd	20 b7 8b	jsr $8bb7			jsr FNegate		;   negate NOS
.8c00	c6 4c		dec $4c				dec fp			;   restore fp
.8c02					+
.8c02	20 de 8b	jsr $8bde			jsr FAbs		; abs TOS
.8c05	86 14		stx $14				stx tmp1+0		; save data stack index
.8c07	a6 4c		ldx $4c				ldx fp			; load FP stack index
.8c09	28		plp				plp			; restore sign flag
.8c0a	60		rts				rts
>8c0b	46 2a				L1:	.text "F*"	;  name of word as a string, ending at wh_NameLastChar
>8c0d	42					.byte (("F*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8c0e	59 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8c10	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8c11	08					.byte NN	;wh_Flags	dictionary flags
=35725					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8c12					FStar:
.8c12	20 e9 8b	jsr $8be9			jsr FPos		; make r1 & r2 positive,
.8c15	08		php				php			;   save r3 sign
.8c16	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8c18	38		sec				sec
.8c19	75 4e		adc $4e,x			adc FSExp+1,x
.8c1b	95 4e		sta $4e,x			sta FSExp+1,x
.8c1d	50 12		bvc $8c31			bvc _49			; IfVs,
.8c1f	b0 06		bcs $8c27			bcs _zero		;   underflow?
.8c21	a6 14		ldx $14				ldx tmp1+0		;   restore data stack index
.8c23	28		plp				plp			; RDrop sign flag
.8c24	20 45 b5	jsr $b545			jsr Throw_FpOutOfRange
.8c27	e8		inx		_zero:		inx			; F2Drop
.8c28	e8		inx				inx
.8c29	86 4c		stx $4c				stx fp
.8c2b	28		plp				plp			; rdrop saved result sign
.8c2c	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c2e	4c bf 88	jmp $88bf			jmp F0			; return zero
.8c31					_49:
.8c31	a9 00		lda #$00			lda #0			; tmp32= 0
.8c33	85 16		sta $16				sta tmp2+0
.8c35	85 17		sta $17				sta tmp2+1
.8c37	85 18		sta $18				sta tmp3+0
.8c39	85 19		sta $19				sta tmp3+1
.8c3b	b5 76		lda $76,x			lda FSMant3+1,x
.8c3d	20 6c 8c	jsr $8c6c			jsr _Byte		; do bytes of r1 mantissa
.8c40	b5 6c		lda $6c,x			lda FSMant2+1,x
.8c42	20 6c 8c	jsr $8c6c			jsr _Byte
.8c45	b5 62		lda $62,x			lda FSMant1+1,x
.8c47	20 6c 8c	jsr $8c6c			jsr _Byte
.8c4a	b5 58		lda $58,x			lda FSMant0+1,x
.8c4c	20 6c 8c	jsr $8c6c			jsr _Byte
.8c4f	a5 16		lda $16				lda tmp2+0		; r1.mant= tmp32
.8c51	95 76		sta $76,x			sta FSMant3+1,x
.8c53	a5 17		lda $17				lda tmp2+1
.8c55	95 6c		sta $6c,x			sta FSMant2+1,x
.8c57	a5 18		lda $18				lda tmp3+0
.8c59	95 62		sta $62,x			sta FSMant1+1,x
.8c5b	a5 19		lda $19				lda tmp3+1
.8c5d	95 58		sta $58,x			sta FSMant0+1,x
.8c5f	e6 4c		inc $4c				inc fp			; FDrop
.8c61	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c63	28		plp				plp			; fix result sign
.8c64	10 03		bpl $8c69			bpl +
.8c66	4c b7 8b	jmp $8bb7			jmp FNegate
.8c69					+
.8c69	4c b5 8a	jmp $8ab5			jmp FNorm
.8c6c					_Byte:
.8c6c	49 ff		eor #$ff			eor #$ff
.8c6e	85 15		sta $15				sta tmp1+1
.8c70	a0 08		ldy #$08			ldy #8			; for each bit in byte
.8c72	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8c74	b0 18		bcs $8c8e			bcs _b3
.8c76	a5 16		lda $16				lda tmp2+0		;     tmp32 += r2
.8c78	75 75		adc $75,x			adc FSMant3+0,x
.8c7a	85 16		sta $16				sta tmp2+0
.8c7c	a5 17		lda $17				lda tmp2+1
.8c7e	75 6b		adc $6b,x			adc FSMant2+0,x
.8c80	85 17		sta $17				sta tmp2+1
.8c82	a5 18		lda $18				lda tmp3+0
.8c84	75 61		adc $61,x			adc FSMant1+0,x
.8c86	85 18		sta $18				sta tmp3+0
.8c88	a5 19		lda $19				lda tmp3+1
.8c8a	75 57		adc $57,x			adc FSMant0+0,x
.8c8c	85 19		sta $19				sta tmp3+1
.8c8e	46 19		lsr $19		_b3:		lsr tmp3+1		;   tmp32 >>= 1
.8c90	66 18		ror $18				ror tmp3+0
.8c92	66 17		ror $17				ror tmp2+1
.8c94	66 16		ror $16				ror tmp2+0
.8c96	88		dey				dey			;  next bit
.8c97	d0 d9		bne $8c72			bne _b1
.8c99	60		rts				rts
=136					CL	.var *-(WordListLink+wh_Xt)
=$8c9a					en = *	; remember here
>8c10	88					.byte CL	;wh_CodeLength
>8c9a	46 53 71 72			L1:	.text "FSqr"	;  name of word as a string, ending at wh_NameLastChar
>8c9e	44					.byte (("FSqr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8c9f	8d 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ca1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ca2	08					.byte NN	;wh_Flags	dictionary flags
=35870					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ca3	20 43 85	jsr $8543	FSqr:		jsr FDup
.8ca6	4c 12 8c	jmp $8c12			jmp FStar
=6					CL	.var *-(WordListLink+wh_Xt)
=$8ca9					en = *	; remember here
>8ca1	06					.byte CL	;wh_CodeLength
>8ca9	46 31 30 2a			L1:	.text "F10*"	;  name of word as a string, ending at wh_NameLastChar
>8cad	44					.byte (("F10*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8cae	1e 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8cb0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8cb1	08					.byte NN	;wh_Flags	dictionary flags
=35885					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8cb2	20 43 85	jsr $8543	F10Star:	jsr FDup
.8cb5	a4 4c		ldy $4c				ldy fp
.8cb7	b9 4d 00	lda $004d,y			lda FSExp+0,y
.8cba	18		clc				clc
.8cbb	69 01		adc #$01			adc #1
.8cbd	99 4d 00	sta $004d,y			sta FSExp+0,y
.8cc0	18		clc				clc
.8cc1	69 02		adc #$02			adc #2
.8cc3	99 4e 00	sta $004e,y			sta FSExp+1,y
.8cc6	4c 3e 8b	jmp $8b3e			jmp FPlus
=23					CL	.var *-(WordListLink+wh_Xt)
=$8cc9					en = *	; remember here
>8cb0	17					.byte CL	;wh_CodeLength
>8cc9	46 2f				L1:	.text "F/"	;  name of word as a string, ending at wh_NameLastChar
>8ccb	e2					.byte (("F/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8ccc	2d 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8cce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ccf	08					.byte NN	;wh_Flags	dictionary flags
=35915					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8cd0	20 e9 8b	jsr $8be9	FSlash:		jsr FPos		; make r1 & r2 positive
.8cd3	08		php				php			;   save result sign
.8cd4	b5 4e		lda $4e,x			lda FSExp+1,x		; calc exponent
.8cd6	18		clc				clc
.8cd7	69 01		adc #$01			adc #1
.8cd9	38		sec				sec
.8cda	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8cdc	95 4e		sta $4e,x			sta FSExp+1,x
.8cde	50 12		bvc $8cf2			bvc _49			;  IfVs
.8ce0	b0 06		bcs $8ce8			bcs _Zero		; underflow?
.8ce2	28		plp				plp			; drop saved result sign
.8ce3	a6 15		ldx $15				ldx tmp1+1		; restore data stack index
.8ce5	20 45 b5	jsr $b545			jsr Throw_FpOutOfRange	; overflow
.8ce8	e8		inx		_Zero:		inx			; F2Drop
.8ce9	e8		inx				inx
.8cea	86 4c		stx $4c				stx fp
.8cec	28		plp				plp			; drop saved result sign
.8ced	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8cef	4c bf 88	jmp $88bf			jmp F0			; return 0
.8cf2					_49:
.8cf2	b5 76		lda $76,x			lda FSMant3+1,x		; tmp32 = r1
.8cf4	85 16		sta $16				sta tmp2+0
.8cf6	b5 6c		lda $6c,x			lda FSMant2+1,x
.8cf8	85 17		sta $17				sta tmp2+1
.8cfa	b5 62		lda $62,x			lda FSMant1+1,x
.8cfc	85 18		sta $18				sta tmp3+0
.8cfe	b5 58		lda $58,x			lda FSMant0+1,x
.8d00	85 19		sta $19				sta tmp3+1
.8d02	20 2b 8d	jsr $8d2b			jsr _Byte
.8d05	95 58		sta $58,x			sta FSMant0+1,x
.8d07	20 2b 8d	jsr $8d2b			jsr _Byte
.8d0a	95 62		sta $62,x			sta FSMant1+1,x
.8d0c	20 2b 8d	jsr $8d2b			jsr _Byte
.8d0f	95 6c		sta $6c,x			sta FSMant2+1,x
.8d11	20 2b 8d	jsr $8d2b			jsr _Byte
.8d14	95 76		sta $76,x			sta FSMant3+1,x
.8d16	56 58		lsr $58,x			lsr FSMant0+1,x
.8d18	76 62		ror $62,x			ror FSMant1+1,x
.8d1a	76 6c		ror $6c,x			ror FSMant2+1,x
.8d1c	76 76		ror $76,x			ror FSMant3+1,x
.8d1e	e6 4c		inc $4c				inc fp			; FDrop
.8d20	a6 14		ldx $14				ldx tmp1+0		; restore X
.8d22	28		plp				plp			; fix sign
.8d23	10 03		bpl $8d28			bpl +
.8d25	20 b7 8b	jsr $8bb7			jsr FNegate
.8d28	4c b5 8a	jmp $8ab5	+		jmp FNorm
.8d2b					_Byte:
.8d2b	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d2d					_1:
.8d2d	a5 19		lda $19				lda tmp3+1		;   if r1>=r2
.8d2f	d5 57		cmp $57,x			cmp FSMant0+0,x
.8d31	d0 10		bne $8d43			bne _4
.8d33	a5 18		lda $18				lda tmp3+0
.8d35	d5 61		cmp $61,x			cmp FSMant1+0,x
.8d37	d0 0a		bne $8d43			bne _4
.8d39	a5 17		lda $17				lda tmp2+1
.8d3b	d5 6b		cmp $6b,x			cmp FSMant2+0,x
.8d3d	d0 04		bne $8d43			bne _4
.8d3f	a5 16		lda $16				lda tmp2+0
.8d41	d5 75		cmp $75,x			cmp FSMant3+0,x
.8d43	90 18		bcc $8d5d	_4:		bcc _2
.8d45	a5 16		lda $16				lda tmp2+0		;     tmp32 -= r2
.8d47	f5 75		sbc $75,x			sbc FSMant3+0,x
.8d49	85 16		sta $16				sta tmp2+0
.8d4b	a5 17		lda $17				lda tmp2+1
.8d4d	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8d4f	85 17		sta $17				sta tmp2+1
.8d51	a5 18		lda $18				lda tmp3+0
.8d53	f5 61		sbc $61,x			sbc FSMant1+0,x
.8d55	85 18		sta $18				sta tmp3+0
.8d57	a5 19		lda $19				lda tmp3+1
.8d59	f5 57		sbc $57,x			sbc FSMant0+0,x
.8d5b	85 19		sta $19				sta tmp3+1
.8d5d	26 15		rol $15		_2:		rol tmp1+1		;   accum quotient bits
.8d5f	06 16		asl $16				asl tmp2+0
.8d61	26 17		rol $17				rol tmp2+1
.8d63	26 18		rol $18				rol tmp3+0
.8d65	26 19		rol $19				rol tmp3+1		;   tmp32<<=1
.8d67	88		dey				dey			;  next
.8d68	d0 c3		bne $8d2d			bne _1
.8d6a	a5 15		lda $15				lda tmp1+1		; return bits
.8d6c	60		rts				rts
=157					CL	.var *-(WordListLink+wh_Xt)
=$8d6d					en = *	; remember here
>8cce	9d					.byte CL	;wh_CodeLength
>8d6d	46 31 2f			L1:	.text "F1/"	;  name of word as a string, ending at wh_NameLastChar
>8d70	e3					.byte (("F1/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8d71	4b 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8d73	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8d74	08					.byte NN	;wh_Flags	dictionary flags
=36080					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8d75	20 fb 88	jsr $88fb	F1Slash:	jsr F1
.8d78	20 cb 85	jsr $85cb			jsr FSwap
.8d7b	4c d0 8c	jmp $8cd0			jmp FSlash
=9					CL	.var *-(WordListLink+wh_Xt)
=$8d7e					en = *	; remember here
>8d73	09					.byte CL	;wh_CodeLength
>8d7e	45 2a				L1:	.text "E*"	;  name of word as a string, ending at wh_NameLastChar
>8d80	42					.byte (("E*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8d81	f0 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8d83	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8d84	08					.byte NN	;wh_Flags	dictionary flags
=36096					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8d85					EStar:
.8d85	20 e9 8b	jsr $8be9			jsr FPos		; make r1 & r2 positive
.8d88	08		php				php			;   remember result sign
.8d89	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8d8b	38		sec				sec
.8d8c	75 4e		adc $4e,x			adc FSExp+1,x
.8d8e	95 4e		sta $4e,x			sta FSExp+1,x
.8d90	70 15		bvs $8da7			bvs _ExpOvfl
.8d92	b5 58		lda $58,x			lda FSMant0+1,x		; save e1
.8d94	48		pha				pha
.8d95	b5 62		lda $62,x			lda FSMant1+1,x
.8d97	a0 00		ldy #$00			ldy #0
.8d99	94 58		sty $58,x			sty FSMant0+1,x
.8d9b	94 62		sty $62,x			sty FSMant1+1,x		; zero result
.8d9d	20 b6 8d	jsr $8db6			jsr _Byte		; do FSMant1+1 byte
.8da0	68		pla				pla
.8da1	20 b6 8d	jsr $8db6			jsr _Byte		; do FSMant0+1 byte
.8da4	4c d3 8d	jmp $8dd3			jmp EFix3		; finish
.8da7					_ExpOvfl:
.8da7	b0 05		bcs $8dae			bcs _Zero		;underflow?
.8da9	a6 14		ldx $14				ldx tmp1+0		; restore X
.8dab	20 45 b5	jsr $b545			jsr Throw_FpOutOfRange	;overflow
.8dae	a9 00		lda #$00	_Zero:		lda #0
.8db0	95 62		sta $62,x			sta FSMant1+1,x
.8db2	95 58		sta $58,x			sta FSMant0+1,x
.8db4	f0 1d		beq $8dd3			beq EFix3
.8db6					_Byte:
.8db6	85 15		sta $15				sta tmp1+1
.8db8	a0 08		ldy #$08			ldy #8			; for 8 bits
.8dba	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8dbc	90 0d		bcc $8dcb			bcc _b5
.8dbe	18		clc				clc			;     r3 += r2
.8dbf	b5 61		lda $61,x			lda FSMant1+0,x
.8dc1	75 62		adc $62,x			adc FSMant1+1,x
.8dc3	95 62		sta $62,x			sta FSMant1+1,x
.8dc5	b5 57		lda $57,x			lda FSMant0+0,x
.8dc7	75 58		adc $58,x			adc FSMant0+1,x
.8dc9	95 58		sta $58,x			sta FSMant0+1,x
.8dcb					_b5:
.8dcb	76 58		ror $58,x			ror FSMant0+1,x		;   r3 <<= 1
.8dcd	76 62		ror $62,x			ror FSMant1+1,x
.8dcf	88		dey				dey			;  next bit
.8dd0	d0 e8		bne $8dba			bne _b1
.8dd2	60		rts				rts
=78					CL	.var *-(WordListLink+wh_Xt)
=$8dd3					en = *	; remember here
>8d83	4e					.byte CL	;wh_CodeLength
.8dd3					EFix3:
.8dd3	a9 00		lda #$00			lda #0			; zero unused mantissa
.8dd5	95 6c		sta $6c,x			sta FSMant2+1,x
.8dd7	95 76		sta $76,x			sta FSMant3+1,x
.8dd9	e6 4c		inc $4c				inc fp			; FDrop
.8ddb	a6 14		ldx $14				ldx tmp1+0		; restore X
.8ddd	28		plp				plp			;fix result sign
.8dde	10 03		bpl $8de3			bpl +
.8de0	4c b7 8b	jmp $8bb7			jmp FNegate
.8de3	4c b5 8a	jmp $8ab5	+		jmp FNorm
>8de6	45 53 71 72			L1:	.text "ESqr"	;  name of word as a string, ending at wh_NameLastChar
>8dea	44					.byte (("ESqr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8deb	00 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ded	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8dee	08					.byte NN	;wh_Flags	dictionary flags
=36202					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8def	20 43 85	jsr $8543	ESqr:		jsr FDup
.8df2	4c 85 8d	jmp $8d85			jmp EStar
=6					CL	.var *-(WordListLink+wh_Xt)
=$8df5					en = *	; remember here
>8ded	06					.byte CL	;wh_CodeLength
>8df5	45 2f				L1:	.text "E/"	;  name of word as a string, ending at wh_NameLastChar
>8df7	e2					.byte (("E/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8df8	6a 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8dfa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8dfb	08					.byte NN	;wh_Flags	dictionary flags
=36215					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8dfc	20 e9 8b	jsr $8be9	ESlash:		jsr FPos	; make r1 & r2 positive
.8dff	08		php				php		; remember result sign
.8e00	b5 4e		lda $4e,x			lda FSExp+1,x		; calc r3 exponent
.8e02	38		sec				sec
.8e03	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8e05	70 17		bvs $8e1e			bvs _ExpOvfl
.8e07	18		clc				clc
.8e08	69 01		adc #$01			adc #1
.8e0a	95 4e		sta $4e,x			sta FSExp+1,x
.8e0c	20 24 8e	jsr $8e24			jsr _Byte		; gen quotient hi byte
.8e0f	48		pha				pha
.8e10	20 24 8e	jsr $8e24			jsr _Byte		; gen quotient lo byte
.8e13	95 62		sta $62,x			sta FSMant1+1,x
.8e15	68		pla				pla
.8e16	4a		lsr a				lsr a
.8e17	95 58		sta $58,x			sta FSMant0+1,x
.8e19	76 62		ror $62,x			ror FSMant1+1,x
.8e1b	4c d3 8d	jmp $8dd3			jmp EFix3
.8e1e					_ExpOvfl:
.8e1e	28		plp				plp			; rdrop saved result sign
.8e1f	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e21	20 45 b5	jsr $b545			jsr Throw_FpOutOfRange	; overflow
.8e24					_Byte:
.8e24	a0 08		ldy #$08			ldy #8			; for 8 bits
.8e26	b5 62		lda $62,x	_b1:		lda FSMant1+1,x		;   if r1 >= r2
.8e28	d5 61		cmp $61,x			cmp FSMant1+0,x
.8e2a	b5 58		lda $58,x			lda FSMant0+1,x
.8e2c	f5 57		sbc $57,x			sbc FSMant0+0,x
.8e2e	90 09		bcc $8e39			bcc _b5
.8e30	95 58		sta $58,x			sta FSMant0+1,x
.8e32	b5 62		lda $62,x			lda FSMant1+1,x		;     r1 -= r2
.8e34	f5 61		sbc $61,x			sbc FSMant1+0,x
.8e36	95 62		sta $62,x			sta FSMant1+1,x
.8e38	38		sec				sec
.8e39					_b5:
.8e39	26 15		rol $15				rol tmp1+1		;   save quotient bit
.8e3b	16 62		asl $62,x			asl FSMant1+1,x		;   r1 *= 2
.8e3d	36 58		rol $58,x			rol FSMant0+1,x
.8e3f	88		dey				dey			;  next bit
.8e40	d0 e4		bne $8e26			bne _b1
.8e42	a5 15		lda $15				lda tmp1+1		; return bits
.8e44	60		rts				rts
=73					CL	.var *-(WordListLink+wh_Xt)
=$8e45					en = *	; remember here
>8dfa	49					.byte CL	;wh_CodeLength
>8e45	45 31 2f			L1:	.text "E1/"	;  name of word as a string, ending at wh_NameLastChar
>8e48	e3					.byte (("E1/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e49	77 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e4b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e4c	08					.byte NN	;wh_Flags	dictionary flags
=36296					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e4d	20 fb 88	jsr $88fb	E1Slash:	jsr F1
.8e50	20 cb 85	jsr $85cb			jsr FSwap
.8e53	4c fc 8d	jmp $8dfc			jmp ESlash
=9					CL	.var *-(WordListLink+wh_Xt)
=$8e56					en = *	; remember here
>8e4b	09					.byte CL	;wh_CodeLength
>8e56	53 3e 46			L1:	.text "S>F"	;  name of word as a string, ending at wh_NameLastChar
>8e59	c3					.byte (("S>F"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e5a	c8 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e5c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e5d	08					.byte NN	;wh_Flags	dictionary flags
=36313					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e5e	20 e3 b4	jsr $b4e3	SToF:		jsr PopYA		; pop n
.8e61	20 b1 84	jsr $84b1	SToFYA:		jsr FAllocX		; alloc FP stack entry
.8e64	94 57		sty $57,x			sty FSMant0,x		; copy n to mantissa
.8e66	95 61		sta $61,x			sta FSMant1,x
.8e68	a9 00		lda #$00			lda #0			; pad mantissa
.8e6a	95 6b		sta $6b,x			sta FSMant2,x
.8e6c	95 75		sta $75,x			sta FSMant3,x
.8e6e	a9 0f		lda #$0f			lda #15			; set exponent
.8e70	95 4d		sta $4d,x			sta FSExp,x
.8e72	4c b7 8a	jmp $8ab7			jmp FNormX		; normalize, return
=23					CL	.var *-(WordListLink+wh_Xt)
=$8e75					en = *	; remember here
>8e5c	17					.byte CL	;wh_CodeLength
>8e75	44 3e 46			L1:	.text "D>F"	;  name of word as a string, ending at wh_NameLastChar
>8e78	c3					.byte (("D>F"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e79	d9 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e7b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e7c	08					.byte NN	;wh_Flags	dictionary flags
=36344					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e7d	20 b1 84	jsr $84b1	FDToF:		jsr FAllocX		; alloc FP stack entry
.8e80	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e82	a4 4c		ldy $4c				ldy fp			; Y= fp stack index
.8e84	b5 26		lda $26,x			lda DStack+2,x		; mantissa= d
.8e86	99 75 00	sta $0075,y			sta FSMant3,y
.8e89	b5 27		lda $27,x			lda DStack+3,x
.8e8b	99 6b 00	sta $006b,y			sta FSMant2,y
.8e8e	b5 24		lda $24,x			lda DStack+0,x
.8e90	99 61 00	sta $0061,y			sta FSMant1,y
.8e93	b5 25		lda $25,x			lda DStack+1,x
.8e95	99 57 00	sta $0057,y			sta FSMant0,y
.8e98	a9 1f		lda #$1f			lda #31			; set exponent
.8e9a	99 4d 00	sta $004d,y			sta FSExp,y
.8e9d	20 0a c6	jsr $c60a			jsr Two_Drop
.8ea0	4c b5 8a	jmp $8ab5			jmp FNorm		; normalize, return
=38					CL	.var *-(WordListLink+wh_Xt)
=$8ea3					en = *	; remember here
>8e7b	26					.byte CL	;wh_CodeLength
>8ea3	46 3e 53			L1:	.text "F>S"	;  name of word as a string, ending at wh_NameLastChar
>8ea6	63					.byte (("F>S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8ea7	f8 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ea9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8eaa	08					.byte NN	;wh_Flags	dictionary flags
=36390					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8eab	a4 4c		ldy $4c		FToS:		ldy fp
.8ead	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8eb0	08		php				php
.8eb1	10 03		bpl $8eb6			bpl +
.8eb3	20 b7 8b	jsr $8bb7			jsr FNegate
.8eb6					+
.8eb6	a9 0f		lda #$0f			lda #15
.8eb8	20 ef 89	jsr $89ef			jsr FShiftA
.8ebb	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8ebd	c0 10		cpy #$10			cpy #15+1		; always positive, so unsigned compare works
.8ebf	b0 17		bcs $8ed8			bcs _overflow
.8ec1	a4 4c		ldy $4c				ldy fp
.8ec3	ca		dex				dex
.8ec4	ca		dex				dex
.8ec5	b9 57 00	lda $0057,y			lda FSMant0,y
.8ec8	95 25		sta $25,x			sta DStack+1,x
.8eca	b9 61 00	lda $0061,y			lda FSMant1,y
.8ecd	95 24		sta $24,x			sta DStack+0,x
.8ecf	e6 4c		inc $4c				inc fp			; FDrop
.8ed1	28		plp				plp			; apply saved sign
.8ed2	30 01		bmi $8ed5			bmi +
.8ed4	60		rts				rts
.8ed5	4c 89 c7	jmp $c789	+		jmp Negate
.8ed8	28		plp		_overflow:	plp			; RDrop saved sign
.8ed9	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8edb	20 6c b5	jsr $b56c			jsr ThrowA
=51					CL	.var *-(WordListLink+wh_Xt)
=$8ede					en = *	; remember here
>8ea9	33					.byte CL	;wh_CodeLength
>8ede	46 3e 44			L1:	.text "F>D"	;  name of word as a string, ending at wh_NameLastChar
>8ee1	83					.byte (("F>D"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8ee2	26 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ee4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ee5	08					.byte NN	;wh_Flags	dictionary flags
=36449					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ee6	a4 4c		ldy $4c		FToD:		ldy fp
.8ee8	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8eeb	08		php				php
.8eec	10 03		bpl $8ef1			bpl +
.8eee	20 b7 8b	jsr $8bb7			jsr FNegate
.8ef1					+
.8ef1	a9 1f		lda #$1f			lda #31
.8ef3	20 ef 89	jsr $89ef			jsr FShiftA
.8ef6	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8ef8	c0 20		cpy #$20			cpy #31+1		; always positive, so unsigned compare works
.8efa	b0 23		bcs $8f1f			bcs _overflow
.8efc	a4 4c		ldy $4c				ldy fp
.8efe	ca		dex				dex			; d= mantissa
.8eff	ca		dex				dex
.8f00	ca		dex				dex
.8f01	ca		dex				dex
.8f02	b9 57 00	lda $0057,y			lda FSMant0,y
.8f05	95 25		sta $25,x			sta DStack+1,x
.8f07	b9 61 00	lda $0061,y			lda FSMant1,y
.8f0a	95 24		sta $24,x			sta DStack+0,x
.8f0c	b9 6b 00	lda $006b,y			lda FSMant2,y
.8f0f	95 27		sta $27,x			sta DStack+3,x
.8f11	b9 75 00	lda $0075,y			lda FSMant3,y
.8f14	95 26		sta $26,x			sta DStack+2,x
.8f16	e6 4c		inc $4c				inc fp			; FDrop
.8f18	28		plp				plp			; apply saved sign
.8f19	30 01		bmi $8f1c			bmi +
.8f1b	60		rts				rts
.8f1c	4c ba c7	jmp $c7ba	+		jmp DNegate
.8f1f	28		plp		_overflow:	plp			; RDrop sign
.8f20	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8f22	20 6c b5	jsr $b56c			jsr ThrowA
=63					CL	.var *-(WordListLink+wh_Xt)
=$8f25					en = *	; remember here
>8ee4	3f					.byte CL	;wh_CodeLength
>8f25	46 52 6e 64			L1:	.text "FRnd"	;  name of word as a string, ending at wh_NameLastChar
>8f29	84					.byte (("FRnd"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f2a	61 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f2c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f2d	08					.byte NN	;wh_Flags	dictionary flags
=36521					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f2e	20 df 82	jsr $82df	FRnd:		jsr Rand		; generate next RndState
.8f31	20 b1 84	jsr $84b1			jsr FAllocX		; alloc FP stack entry
.8f34	4a		lsr a				lsr a			;   make positive
.8f35	95 57		sta $57,x			sta FSMant0,x
.8f37	94 61		sty $61,x			sty FSMant1,x
.8f39	ad 35 03	lda $0335			lda RndState+0
.8f3c	95 6b		sta $6b,x			sta FSMant2,x
.8f3e	ad 36 03	lda $0336			lda RndState+1
.8f41	95 75		sta $75,x			sta FSMant3,x
.8f43	a9 00		lda #$00			lda #0			; exponent=0
.8f45	95 4d		sta $4d,x			sta FSExp,x
.8f47	4c b7 8a	jmp $8ab7			jmp FNormX		; normalize, return
=28					CL	.var *-(WordListLink+wh_Xt)
=$8f4a					en = *	; remember here
>8f2c	1c					.byte CL	;wh_CodeLength
>8f4a	46 53 71 72 74			L1:	.text "FSqrt"	;  name of word as a string, ending at wh_NameLastChar
>8f4f	85					.byte (("FSqrt"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f50	a9 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f52	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f53	08					.byte NN	;wh_Flags	dictionary flags
=36559					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f54	a4 4c		ldy $4c		FSqrt:		ldy fp
.8f56	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.8f59	d0 01		bne $8f5c			bne +
.8f5b	60		rts				rts			;   just return the zero
.8f5c					+
.8f5c	20 43 85	jsr $8543			jsr FDup		; get trial value
.8f5f	a4 4c		ldy $4c				ldy fp
.8f61	b9 4d 00	lda $004d,y			lda FSExp,y		; halve the exponent of trial value
.8f64	c9 80		cmp #$80			cmp #$80
.8f66	6a		ror a				ror a
.8f67	99 4d 00	sta $004d,y			sta FSExp,y
.8f6a	a9 09		lda #$09			lda #9			; for 9 iterations
.8f6c	48		pha		_3:		pha
.8f6d	20 bb 85	jsr $85bb			jsr F2Dup		;   calc new trial value
.8f70	20 d0 8c	jsr $8cd0			jsr FSlash
.8f73	20 3e 8b	jsr $8b3e			jsr FPlus
.8f76	20 b9 89	jsr $89b9			jsr F2Slash
.8f79	68		pla				pla			;  next
.8f7a	38		sec				sec
.8f7b	e9 01		sbc #$01			sbc #1
.8f7d	d0 ed		bne $8f6c			bne _3
.8f7f	4c 1d 85	jmp $851d			jmp FNip		; return trial value
=46					CL	.var *-(WordListLink+wh_Xt)
=$8f82					en = *	; remember here
>8f52	2e					.byte CL	;wh_CodeLength
>8f82	50 72 65 63 69 73 69 6f		L1:	.text "Precision"	;  name of word as a string, ending at wh_NameLastChar
>8f8a	6e
>8f8b	c9					.byte (("Precision"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f8c	cf 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f8e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f8f	08					.byte NN	;wh_Flags	dictionary flags
=36619					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f90	ad ff 02	lda $02ff	Precision:	lda PrecisionV
.8f93	4c f0 b8	jmp $b8f0			jmp PushZA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8f96					en = *	; remember here
>8f8e	06					.byte CL	;wh_CodeLength
.8f96	60		rts				rts
>8f97	53 65 74 2d 50 72 65 63		L1:	.text "Set-Precision"	;  name of word as a string, ending at wh_NameLastChar
>8f9f	69 73 69 6f 6e
>8fa4	cd					.byte (("Set-Precision"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8fa5	0b 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8fa7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8fa8	08					.byte NN	;wh_Flags	dictionary flags
=36644					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8fa9	20 c7 b4	jsr $b4c7			jsr PopA
.8fac	8d ff 02	sta $02ff			sta PrecisionV
=6					CL	.var *-(WordListLink+wh_Xt)
=$8faf					en = *	; remember here
>8fa7	06					.byte CL	;wh_CodeLength
.8faf	60		rts				rts
>8fb0	28 46 2e 29			L1:	.text "(F.)"	;  name of word as a string, ending at wh_NameLastChar
>8fb4	24					.byte (("(F.)"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8fb5	24 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8fb7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8fb8	08					.byte NN	;wh_Flags	dictionary flags
=36660					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8fb9	20 36 90	jsr $9036	PFDot:		jsr pfcst		;start collecting chars, make r positive
.8fbc	20 c2 8f	jsr $8fc2			jsr PFDotSub
.8fbf	4c 54 90	jmp $9054			jmp pfcen
.8fc2					PFDotSub:
.8fc2	20 90 8f	jsr $8f90			jsr Precision	;alloc & init work area
.8fc5	20 09 b9	jsr $b909			jsr One
=$27					_mantNzFound  = DStack+3	; nonzero mantissa digit processed
=$26					_NumSigDigits = DStack+2	; # of significant digits
=$24					_decimalPos   = DStack+0	; decimal point position
.8fc8	20 16 90	jsr $9016			jsr FLt10		; scale down to <10, counting exponent
.8fcb					_c:
.8fcb	b5 24		lda $24,x			lda _decimalPos,x	;  insert decimal point here?
.8fcd	d0 05		bne $8fd4			bne _c2
.8fcf	a9 2e		lda #$2e			lda #'.'
.8fd1	20 4b 90	jsr $904b			jsr pfch
.8fd4	d6 24		dec $24,x	_c2:		dec _decimalPos,x
.8fd6	20 43 85	jsr $8543			jsr FDup		;  do a digit
.8fd9	20 ab 8e	jsr $8eab			jsr FToS		; ( work n )
.8fdc	b5 24		lda $24,x			lda DStack+0,x
.8fde	15 29		ora $29,x			ora _mantNzFound+2,x	;  doing significant digits?
.8fe0	95 29		sta $29,x			sta _mantNzFound+2,x
.8fe2	f0 08		beq $8fec			beq _c7
.8fe4	d6 28		dec $28,x			dec _NumSigDigits+2,x
.8fe6	10 04		bpl $8fec			bpl +
.8fe8	e8		inx				inx			;    drop integer
.8fe9	e8		inx				inx
.8fea	d0 17		bne $9003			bne _d
.8fec					+
.8fec	b5 24		lda $24,x	_c7:		lda DStack+0,x		;  store the char
.8fee	09 30		ora #$30			ora #'0'
.8ff0	20 4b 90	jsr $904b			jsr pfch
.8ff3	20 5e 8e	jsr $8e5e			jsr SToF		; ( work )
.8ff6	20 80 8b	jsr $8b80			jsr FMinus
.8ff9	20 b2 8c	jsr $8cb2			jsr F10Star
.8ffc	a4 4c		ldy $4c				ldy fp			;  until mantissa==0
.8ffe	b9 57 00	lda $0057,y			lda FSMant0,y
.9001	d0 c8		bne $8fcb			bne _c
.9003	d6 24		dec $24,x	_d:		dec _decimalPos,x	;do trailing zeros
.9005	30 08		bmi $900f			bmi _d9
.9007	a9 30		lda #$30			lda #'0'
.9009	20 4b 90	jsr $904b			jsr pfch
.900c	4c 03 90	jmp $9003			jmp _d
.900f					_d9:
.900f	e8		inx				inx			; drop work area
.9010	e8		inx				inx
.9011	e8		inx				inx
.9012	e8		inx				inx
.9013	e6 4c		inc $4c				inc fp			; FDrop
.9015	60		rts				rts
=93					CL	.var *-(WordListLink+wh_Xt)
=$9016					en = *	; remember here
>8fb7	5d					.byte CL	;wh_CodeLength
.9016					FLt10:
.9016	a4 4c		ldy $4c		_1:		ldy fp			; while r >= 10
.9018	b9 4d 00	lda $004d,y			lda FSExp,y
.901b	30 18		bmi $9035			bmi _9			;   exponent negative?
.901d	c9 04		cmp #$04			cmp #4
.901f	90 14		bcc $9035			bcc _9			;   < 4 ?
.9021	d0 07		bne $902a			bne _2			;   > 4 ?
.9023	b9 57 00	lda $0057,y			lda FSMant0,y
.9026	c9 50		cmp #$50			cmp #$50
.9028	90 0b		bcc $9035			bcc _9
.902a	f6 24		inc $24,x	_2:		inc DStack+0,x		;   exp ++
.902c	20 df 88	jsr $88df			jsr F10			;   r /= 10
.902f	20 d0 8c	jsr $8cd0			jsr FSlash
.9032	4c 16 90	jmp $9016			jmp _1
.9035	60		rts		_9:		rts
.9036					pfcst:
.9036	a9 01		lda #$01			lda #1
.9038	8d 34 03	sta $0334			sta ToHold
.903b	a4 4c		ldy $4c				ldy fp			; if r1 negative
.903d	b9 57 00	lda $0057,y			lda FSMant0,y
.9040	10 08		bpl $904a			bpl _19
.9042	a9 2d		lda #$2d			lda #'-'		;   append sign
.9044	20 4b 90	jsr $904b			jsr pfch
.9047	4c b7 8b	jmp $8bb7			jmp FNegate		;   make positive, return
.904a	60		rts		_19:		rts
.904b					pfch:
.904b	ac 34 03	ldy $0334			ldy ToHold
.904e	91 00		sta ($00),y			sta (cp),y
.9050	ee 34 03	inc $0334			inc ToHold
.9053	60		rts				rts
.9054					pfcen:
.9054	ad 34 03	lda $0334			lda ToHold
.9057	38		sec				sec
.9058	e9 01		sbc #$01			sbc #1
.905a	a0 00		ldy #$00			ldy #0
.905c	91 00		sta ($00),y			sta (cp),y		; fill in length
.905e	4c 31 cb	jmp $cb31			jmp Here		; push start addr
.9061					pfciA:
.9061	a8		tay				tay
.9062	10 0a		bpl $906e			bpl _15			; IfMi,
.9064	49 ff		eor #$ff			eor #$ff
.9066	18		clc				clc
.9067	69 01		adc #$01			adc #1
.9069	48		pha				pha
.906a	a9 2d		lda #$2d			lda #'-'
.906c	d0 03		bne $9071			bne _19
.906e	48		pha		_15:		pha
.906f	a9 2b		lda #$2b			lda #'+'
.9071					_19:
.9071	20 4b 90	jsr $904b			jsr pfch
.9074	68		pla				pla
.9075	a0 2f		ldy #$2f			ldy #'0'-1
.9077	c8		iny		_20:		iny
.9078	38		sec				sec
.9079	e9 0a		sbc #$0a			sbc #10
.907b	b0 fa		bcs $9077			bcs _20
.907d	69 0a		adc #$0a			adc #10
.907f	48		pha				pha
.9080	98		tya				tya
.9081	20 4b 90	jsr $904b			jsr pfch
.9084	68		pla				pla
.9085	09 30		ora #$30			ora #'0'
.9087	d0 c2		bne $904b			bne pfch
>9089	46 2e				L1:	.text "F."	;  name of word as a string, ending at wh_NameLastChar
>908b	c2					.byte (("F."[-1]&7)<<5)+(*-L1)	;wh_HNL
>908c	34 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>908e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>908f	08					.byte NN	;wh_Flags	dictionary flags
=36875					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9090	20 b9 8f	jsr $8fb9	FDot:		jsr PFDot
.9093	20 ce b2	jsr $b2ce	FDot2:		jsr Count
.9096	20 0d cf	jsr $cf0d			jsr Type
.9099	4c 00 cf	jmp $cf00			jmp Space
=12					CL	.var *-(WordListLink+wh_Xt)
=$909c					en = *	; remember here
>908e	0c					.byte CL	;wh_CodeLength
>909c	46 2e 53			L1:	.text "F.S"	;  name of word as a string, ending at wh_NameLastChar
>909f	63					.byte (("F.S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>90a0	0b 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90a3	08					.byte NN	;wh_Flags	dictionary flags
=36895					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90a4	a9 09		lda #$09	FDotS:		lda #FDim-1	; for each FP stack entry
.90a6	d0 0b		bne $90b3			bne _8
.90a8	48		pha		_2:		pha
.90a9	20 91 85	jsr $8591			jsr FPick3	;   print it
.90ac	20 90 90	jsr $9090			jsr FDot
.90af	68		pla				pla		;  next
.90b0	38		sec				sec
.90b1	e9 01		sbc #$01			sbc #1
.90b3	c5 4c		cmp $4c		_8:		cmp fp
.90b5	b0 f1		bcs $90a8			bcs _2
=19					CL	.var *-(WordListLink+wh_Xt)
=$90b7					en = *	; remember here
>90a2	13					.byte CL	;wh_CodeLength
.90b7	60		rts				rts
>90b8	28 46 53 2e 29			L1:	.text "(FS.)"	;  name of word as a string, ending at wh_NameLastChar
>90bd	25					.byte (("(FS.)"[-1]&7)<<5)+(*-L1)	;wh_HNL
>90be	1f 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90c0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90c1	08					.byte NN	;wh_Flags	dictionary flags
=36925					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90c2	20 ff b8	jsr $b8ff	PFSDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.90c5	20 36 90	jsr $9036			jsr pfcst		; start collecting chars, make r positive
.90c8	20 16 90	jsr $9016			jsr FLt10		; scale down to <10
.90cb	a4 4c		ldy $4c		_c1:		ldy fp			; while r < 1
.90cd	b9 57 00	lda $0057,y			lda FSMant0,y		;   mantissa == 0 ?
.90d0	f0 0f		beq $90e1			beq _c9
.90d2	b9 4d 00	lda $004d,y			lda FSExp,y		;   exp < 1 ?
.90d5	f0 02		beq $90d9			beq _c2
.90d7	10 08		bpl $90e1			bpl _c9
.90d9	d6 24		dec $24,x	_c2:		dec DStack+0,x		;  exp -= 1
.90db	20 b2 8c	jsr $8cb2			jsr F10Star		;  r *= 10
.90de	4c cb 90	jmp $90cb			jmp _c1
.90e1					_c9:
.90e1	20 c2 8f	jsr $8fc2	PFSDotM:	jsr PFDotSub		; do mantissa
.90e4	a9 45		lda #$45			lda #'E'
.90e6	20 4b 90	jsr $904b			jsr pfch		; do exponent
.90e9	b5 24		lda $24,x			lda DStack+0,x		;   _exp
.90eb	20 61 90	jsr $9061			jsr pfciA
.90ee	e8		inx				inx			; Drop work area
.90ef	e8		inx				inx
.90f0	4c 54 90	jmp $9054			jmp pfcen		; finish string
=49					CL	.var *-(WordListLink+wh_Xt)
=$90f3					en = *	; remember here
>90c0	31					.byte CL	;wh_CodeLength
>90f3	46 53 2e			L1:	.text "FS."	;  name of word as a string, ending at wh_NameLastChar
>90f6	c3					.byte (("FS."[-1]&7)<<5)+(*-L1)	;wh_HNL
>90f7	3d 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90f9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90fa	08					.byte NN	;wh_Flags	dictionary flags
=36982					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90fb	20 c2 90	jsr $90c2	FSDot:		jsr PFSDot
.90fe	4c 93 90	jmp $9093			jmp FDot2
=6					CL	.var *-(WordListLink+wh_Xt)
=$9101					en = *	; remember here
>90f9	06					.byte CL	;wh_CodeLength
>9101	28 46 45 2e 29			L1:	.text "(FE.)"	;  name of word as a string, ending at wh_NameLastChar
>9106	25					.byte (("(FE.)"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9107	76 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9109	03					.byte 3		;wh_CodeLength  (with placeholder value)
>910a	08					.byte NN	;wh_Flags	dictionary flags
=36998					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.910b	20 ff b8	jsr $b8ff	PFEDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.910e	20 36 90	jsr $9036			jsr pfcst		; start collecting chars, make r positive
.9111	a4 4c		ldy $4c		_30:		ldy fp			; while r < 1
.9113	b9 57 00	lda $0057,y			lda FSMant0,y
.9116	f0 16		beq $912e			beq _39
.9118	b9 4d 00	lda $004d,y			lda FSExp,y
.911b	f0 02		beq $911f			beq _31
.911d	10 0f		bpl $912e			bpl _39
.911f	d6 24		dec $24,x	_31:		dec _exp,x		;  exp -= 3
.9121	d6 24		dec $24,x			dec _exp,x
.9123	d6 24		dec $24,x			dec _exp,x
.9125	20 d0 88	jsr $88d0			jsr F1000		;  r *= 1000
.9128	20 12 8c	jsr $8c12			jsr FStar
.912b	4c 11 91	jmp $9111			jmp _30
.912e					_39:
.912e	a4 4c		ldy $4c		_a:		ldy fp			; while r >= 1000
.9130	b9 4d 00	lda $004d,y			lda FSExp,y
.9133	30 1c		bmi $9151			bmi _a9			; exponent negative?
.9135	c9 0a		cmp #$0a			cmp #10
.9137	90 18		bcc $9151			bcc _a9			;   < 10 ?
.9139	d0 07		bne $9142			bne _a2			;   > 10 ?
.913b	b9 57 00	lda $0057,y			lda FSMant0,y
.913e	c9 7d		cmp #$7d			cmp #$7d
.9140	90 0f		bcc $9151			bcc _a9
.9142	f6 24		inc $24,x	_a2:		inc _exp,x		;   exp += 3
.9144	f6 24		inc $24,x			inc _exp,x
.9146	f6 24		inc $24,x			inc _exp,x
.9148	20 d0 88	jsr $88d0			jsr F1000		;   r /= 1000
.914b	20 d0 8c	jsr $8cd0			jsr FSlash
.914e	4c 2e 91	jmp $912e			jmp _a
.9151					_a9:
.9151	4c e1 90	jmp $90e1			jmp PFSDotM
=73					CL	.var *-(WordListLink+wh_Xt)
=$9154					en = *	; remember here
>9109	49					.byte CL	;wh_CodeLength
>9154	46 45 2e			L1:	.text "FE."	;  name of word as a string, ending at wh_NameLastChar
>9157	c3					.byte (("FE."[-1]&7)<<5)+(*-L1)	;wh_HNL
>9158	86 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>915a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>915b	08					.byte NN	;wh_Flags	dictionary flags
=37079					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.915c	20 0b 91	jsr $910b	FEDot:		jsr PFEDot
.915f	4c 93 90	jmp $9093			jmp FDot2
=6					CL	.var *-(WordListLink+wh_Xt)
=$9162					en = *	; remember here
>915a	06					.byte CL	;wh_CodeLength
>9162	46 22				L1:	.text 'F"'	;  name of word as a string, ending at wh_NameLastChar
>9164	42					.byte (('F"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>9165	d7 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9167	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9168	0c					.byte IM+NN	;wh_Flags	dictionary flags
=37092					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9169	20 9f bb	jsr $bb9f	FQuote:		jsr Parse_Name		; get string
.916c	20 8d 91	jsr $918d			jsr ToFloat		; convert
.916f	b5 24		lda $24,x			lda DStack+0,x		; error?
.9171	f0 0a		beq $917d			beq _Err
.9173	e8		inx				inx
.9174	e8		inx				inx
.9175	a5 0a		lda $0a				lda State		; compiling?
.9177	d0 01		bne $917a			bne _compile
.9179	60		rts				rts
.917a	4c 1c 88	jmp $881c	_compile:	jmp FLiteral		; compile a FP literal
.917d	a9 36		lda #$36	_Err:		lda #100+err_FPInvalidArg
.917f	20 6c b5	jsr $b56c			jsr ThrowA
=25					CL	.var *-(WordListLink+wh_Xt)
=$9182					en = *	; remember here
>9167	19					.byte CL	;wh_CodeLength
>9182	3e 46 6c 6f 61 74		L1:	.text ">Float"	;  name of word as a string, ending at wh_NameLastChar
>9188	86					.byte ((">Float"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9189	e4 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>918b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>918c	08					.byte NN	;wh_Flags	dictionary flags
=37128					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.918d					ToFloat:
.918d	20 ff b8	jsr $b8ff			jsr Zero	; alloc & init workspace
.9190	20 ff b8	jsr $b8ff			jsr Zero
.9193	20 ff b8	jsr $b8ff			jsr Zero
=$2c					_addr		= DStack+8
=$2a					_len		= DStack+6
=$29					_mantfound 	= DStack+5		;mantissa digits found
=$28					_exponent 	= DStack+4		;exponent
=$27					_decimalPos 	= DStack+3		;decimal point position
=$26					_DecPointFound1 = DStack+2
=$25					_MantissaNegative1 = DStack+1
=$24					_ExponentNegative1 = DStack+0
.9196	20 bf 88	jsr $88bf			jsr F0			; init result
.9199	20 6b 92	jsr $926b	_11:		jsr _GetChar		; get mantissa prefix
.919c	b0 57		bcs $91f5			bcs _trueb ;_finishb
.919e	c9 20		cmp #$20			cmp #' '
.91a0	f0 f7		beq $9199			beq _11
.91a2	c9 2b		cmp #$2b			cmp #'+'
.91a4	f0 06		beq $91ac			beq _20
.91a6	c9 2d		cmp #$2d			cmp #'-'
.91a8	d0 07		bne $91b1			bne _21
.91aa	95 25		sta $25,x			sta _MantissaNegative1,x ; remember mantissa is negative
.91ac	20 6b 92	jsr $926b	_20:		jsr _GetChar		; do next mantissa digits
.91af	b0 47		bcs $91f8			bcs _finishb
.91b1	c9 2e		cmp #$2e	_21:		cmp #'.'
.91b3	f0 31		beq $91e6			beq _27
.91b5	c9 45		cmp #$45			cmp #'E'
.91b7	f0 42		beq $91fb			beq _30
.91b9	c9 65		cmp #$65			cmp #'e'
.91bb	f0 3e		beq $91fb			beq _30
.91bd	c9 44		cmp #$44			cmp #'D'
.91bf	f0 3a		beq $91fb			beq _30
.91c1	c9 64		cmp #$64			cmp #'d'
.91c3	f0 36		beq $91fb			beq _30
.91c5	38		sec				sec			;   a digit?
.91c6	e9 30		sbc #$30			sbc #'0'
.91c8	90 24		bcc $91ee			bcc _fail
.91ca	c9 0a		cmp #$0a			cmp #9+1
.91cc	b0 20		bcs $91ee			bcs _fail
.91ce	48		pha				pha			; append digit to mantissa
.91cf	20 b2 8c	jsr $8cb2			jsr F10Star
.91d2	68		pla				pla
.91d3	a0 00		ldy #$00			ldy #0
.91d5	20 61 8e	jsr $8e61			jsr SToFYA
.91d8	20 3e 8b	jsr $8b3e			jsr FPlus
.91db	f6 29		inc $29,x			inc _mantfound,x	; remember we found a mantissa digit
.91dd	b5 26		lda $26,x			lda _DecPointFound1,x	; if mantissa decimal point found
.91df	f0 02		beq $91e3			beq +
.91e1	d6 27		dec $27,x			dec _decimalPos,x	;   increment decimal point position
.91e3					+
.91e3	4c ac 91	jmp $91ac			jmp _20
.91e6					_27:
.91e6	b4 26		ldy $26,x			ldy _DecPointFound1,x	; already have one?
.91e8	d0 04		bne $91ee			bne _fail
.91ea	95 26		sta $26,x			sta _DecPointFound1,x	; we have one now!
.91ec	f0 be		beq $91ac			beq _20
.91ee					_fail:
.91ee	20 01 85	jsr $8501			jsr FDrop
.91f1	a9 00		lda #$00			lda #0			;return false
.91f3	f0 69		beq $925e			beq _return
.91f5	4c 5c 92	jmp $925c	_trueb:		jmp _true
.91f8	4c 29 92	jmp $9229	_finishb:	jmp _finish
.91fb					_30:
.91fb	20 6b 92	jsr $926b			jsr _GetChar
.91fe	b0 29		bcs $9229			bcs _finish
.9200	c9 2b		cmp #$2b			cmp #'+'
.9202	f0 06		beq $920a			beq _40
.9204	c9 2d		cmp #$2d			cmp #'-'
.9206	d0 07		bne $920f			bne _41
.9208	95 24		sta $24,x			sta _ExponentNegative1,x ; remember exponent is negative
.920a	20 6b 92	jsr $926b	_40:		jsr _GetChar		;get exponent digits
.920d	b0 1a		bcs $9229			bcs _finish
.920f	38		sec		_41:		sec			;  digit?
.9210	e9 30		sbc #$30			sbc #'0'
.9212	90 da		bcc $91ee			bcc _fail
.9214	c9 0a		cmp #$0a			cmp #9+1
.9216	b0 d6		bcs $91ee			bcs _fail
.9218	85 14		sta $14				sta tmp1
.921a	16 28		asl $28,x			asl _exponent,x		;  exponent *= 10
.921c	b5 28		lda $28,x			lda _exponent,x
.921e	0a		asl a				asl a
.921f	0a		asl a				asl a
.9220	75 28		adc $28,x			adc _exponent,x
.9222	65 14		adc $14				adc tmp1		;  + digit
.9224	95 28		sta $28,x			sta _exponent,x
.9226	4c 0a 92	jmp $920a			jmp _40
.9229					_finish:
.9229	b5 29		lda $29,x			lda _mantfound,x	;some mantissa digits found?
.922b	f0 c1		beq $91ee			beq _fail
.922d	b5 24		lda $24,x			lda _ExponentNegative1,x ;apply exponent sign
.922f	f0 07		beq $9238			beq +
.9231	a9 00		lda #$00			lda #0
.9233	38		sec				sec
.9234	f5 28		sbc $28,x			sbc _exponent,x
.9236	95 28		sta $28,x			sta _exponent,x
.9238					+
.9238	b5 28		lda $28,x			lda _exponent,x		;apply decimal position to exponent
.923a	18		clc				clc
.923b	75 27		adc $27,x			adc _decimalPos,x
.923d	95 28		sta $28,x			sta _exponent,x
.923f	4c 47 92	jmp $9247			jmp _93
.9242	20 b2 8c	jsr $8cb2	_93b:		jsr F10Star		;apply exponent to mantissa
.9245	d6 28		dec $28,x			dec _exponent,x
.9247	f0 0a		beq $9253	_93:		beq _94
.9249	10 f7		bpl $9242			bpl _93b
.924b	20 df 88	jsr $88df	_94b:		jsr F10
.924e	20 d0 8c	jsr $8cd0			jsr FSlash
.9251	f6 28		inc $28,x			inc _exponent,x
.9253	30 f6		bmi $924b	_94:		bmi _94b
.9255					_95:
.9255	b5 25		lda $25,x			lda _MantissaNegative1,x ;apply mantissa sign
.9257	f0 03		beq $925c			beq +
.9259	20 b7 8b	jsr $8bb7			jsr FNegate
.925c					+
.925c	a9 ff		lda #$ff	_true:		lda #$ff		;return true
.925e					_return:
.925e	95 2c		sta $2c,x			sta _addr+0,x		; replace _addr with flag
.9260	95 2d		sta $2d,x			sta _addr+1,x
.9262	e8		inx				inx			; Drop work
.9263	e8		inx				inx
.9264	e8		inx				inx			; 2Drop work
.9265	e8		inx				inx
.9266	e8		inx				inx
.9267	e8		inx				inx
.9268	e8		inx				inx			; Drop len
.9269	e8		inx				inx
.926a	60		rts				rts
.926b					_GetChar:
.926b	38		sec				sec
.926c	b5 2a		lda $2a,x			lda _len,x
.926e	f0 0b		beq $927b			beq _gc_rts		; if end, return C=1
.9270	d6 2a		dec $2a,x			dec _len,x
.9272	a1 2c		lda ($2c,x)			lda (_addr,x)
.9274	f6 2c		inc $2c,x			inc _addr+0,x
.9276	d0 02		bne $927a			bne +
.9278	f6 2d		inc $2d,x			inc _addr+1,x
.927a					+
.927a	18		clc				clc			; get char, return C=0
.927b	60		rts		_gc_rts:	rts
>927c	46 4b 65 79			L1:	.text "FKey"	;  name of word as a string, ending at wh_NameLastChar
>9280	24					.byte (("FKey"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9281	08 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9283	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9284	08					.byte NN	;wh_Flags	dictionary flags
=37376					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9285					FKey:
.9285	20 31 cb	jsr $cb31			jsr Here		; ( addr )
.9288	20 31 cb	jsr $cb31			jsr Here		; ( addr addr )
.928b	a9 28		lda #$28			lda #40			; ( addr addr 40 )
.928d	20 f0 b8	jsr $b8f0			jsr PushZA
.9290	20 c5 c3	jsr $c3c5			jsr Accept		; ( addr len )
.9293	20 8d 91	jsr $918d			jsr ToFloat		; ( true | false)
.9296	e8		inx				inx			; err?
.9297	e8		inx				inx
.9298	b5 22		lda $22,x			lda DStack-2,x
.929a	f0 01		beq $929d			beq _err
.929c	60		rts				rts
.929d	20 cf b9	jsr $b9cf	_err:		jsr SLiteral_runtime
.92a0	4c a6 92	jmp $92a6			  jmp +
>92a3	20 3f 20					  .text " ? "
.92a6	20 0d cf	jsr $cf0d	+		jsr Type
.92a9	4c 85 92	jmp $9285			jmp FKey
>92ac	53 46 40			L1:	.text "SF@"	;  name of word as a string, ending at wh_NameLastChar
>92af	03					.byte (("SF@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>92b0	00 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>92b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>92b3	08					.byte NN	;wh_Flags	dictionary flags
=37423					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.92b4	20 e3 b4	jsr $b4e3	SFAt:		jsr PopYA		; pop sf_addr
.92b7	85 16		sta $16		SFAt_YA:	sta tmp2+0		; save sf_addr
.92b9	84 17		sty $17				sty tmp2+1
.92bb	20 b1 84	jsr $84b1			jsr FAllocX		; alloc FP stack entry
.92be	a0 01		ldy #$01			ldy #1			; copy exponent
.92c0	b1 16		lda ($16),y			lda (tmp2),y
.92c2	0a		asl a				asl a
.92c3	88		dey				dey
.92c4	b1 16		lda ($16),y			lda (tmp2),y
.92c6	2a		rol a				rol a
.92c7	38		sec				sec
.92c8	e9 7e		sbc #$7e			sbc #126
.92ca	95 4d		sta $4d,x			sta FSExp,x
.92cc	a0 01		ldy #$01			ldy #1			; copy mantissa
.92ce	b1 16		lda ($16),y			lda (tmp2),y
.92d0	09 80		ora #$80			ora #$80
.92d2	4a		lsr a				lsr a
.92d3	95 57		sta $57,x			sta FSMant0,x
.92d5	c8		iny				iny
.92d6	b1 16		lda ($16),y			lda (tmp2),y
.92d8	6a		ror a				ror a
.92d9	95 61		sta $61,x			sta FSMant1,x
.92db	c8		iny				iny
.92dc	b1 16		lda ($16),y			lda (tmp2),y
.92de	6a		ror a				ror a
.92df	95 6b		sta $6b,x			sta FSMant2,x
.92e1	a9 00		lda #$00			lda #0
.92e3	6a		ror a				ror a
.92e4	95 75		sta $75,x			sta FSMant3,x
.92e6	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.92e8	a0 00		ldy #$00			ldy #0			; get sign
.92ea	b1 16		lda ($16),y			lda (tmp2),y
.92ec	10 03		bpl $92f1			bpl +
.92ee	20 b7 8b	jsr $8bb7			jsr FNegate
.92f1					+
=61					CL	.var *-(WordListLink+wh_Xt)
=$92f1					en = *	; remember here
>92b2	3d					.byte CL	;wh_CodeLength
.92f1	60		rts				rts
>92f2	53 46 21			L1:	.text "SF!"	;  name of word as a string, ending at wh_NameLastChar
>92f5	23					.byte (("SF!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>92f6	2f 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>92f8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>92f9	08					.byte NN	;wh_Flags	dictionary flags
=37493					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.92fa	20 e3 b4	jsr $b4e3	SFStore:	jsr PopYA		; pop sf_addr
.92fd	85 16		sta $16		SFStore_YA:	sta tmp2+0		; save
.92ff	84 17		sty $17				sty tmp2+1
.9301	a4 4c		ldy $4c				ldy fp			; negative?
.9303	b9 57 00	lda $0057,y			lda FSMant0,y
.9306	29 80		and #$80			and #$80		;  save sign
.9308	85 19		sta $19				sta tmp3+1
.930a	10 03		bpl $930f			bpl +
.930c	20 b7 8b	jsr $8bb7			jsr FNegate
.930f					+
.930f	86 14		stx $14				stx tmp1+0		; save data stack index
.9311	a6 4c		ldx $4c				ldx fp			; switch to FP stack index
.9313	b5 4d		lda $4d,x			lda FSExp,x		; +128
.9315	18		clc				clc
.9316	69 7e		adc #$7e			adc #126
.9318	95 4d		sta $4d,x			sta FSExp,x
.931a	16 75		asl $75,x			asl FSMant3,x
.931c	b5 6b		lda $6b,x			lda FSMant2,x
.931e	2a		rol a				rol a
.931f	a0 03		ldy #$03			ldy #3			; +3 IEEE
.9321	91 16		sta ($16),y			sta (tmp2),y
.9323	b5 61		lda $61,x			lda FSMant1,x
.9325	2a		rol a				rol a
.9326	88		dey				dey			; +2 IEEE
.9327	91 16		sta ($16),y			sta (tmp2),y
.9329	b5 57		lda $57,x			lda FSMant0,x
.932b	2a		rol a				rol a
.932c	2a		rol a				rol a
.932d	56 4d		lsr $4d,x			lsr FSExp,x
.932f	6a		ror a				ror a
.9330	88		dey				dey			; +1 IEEE
.9331	91 16		sta ($16),y			sta (tmp2),y
.9333	b5 4d		lda $4d,x			lda FSExp,x
.9335	05 19		ora $19				ora tmp3+1		;  insert sign
.9337	88		dey				dey			; +0 IEEE
.9338	91 16		sta ($16),y			sta (tmp2),y
.933a	e6 4c		inc $4c				inc fp			; FDrop
.933c	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=68					CL	.var *-(WordListLink+wh_Xt)
=$933e					en = *	; remember here
>92f8	44					.byte CL	;wh_CodeLength
.933e	60		rts				rts
>933f	53 46 6c 6f 61 74 2b		L1:	.text "SFloat+"	;  name of word as a string, ending at wh_NameLastChar
>9346	67					.byte (("SFloat+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9347	75 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9349	03					.byte 3		;wh_CodeLength  (with placeholder value)
>934a	08					.byte NN	;wh_Flags	dictionary flags
=37574					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.934b	a9 04		lda #$04	SFloatPlus:	lda #4
.934d	4c 14 cb	jmp $cb14			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9350					en = *	; remember here
>9349	05					.byte CL	;wh_CodeLength
>9350	53 46 6c 6f 61 74 73		L1:	.text "SFloats"	;  name of word as a string, ending at wh_NameLastChar
>9357	67					.byte (("SFloats"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9358	c6 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>935a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>935b	08					.byte NN	;wh_Flags	dictionary flags
=37591					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.935c	a9 02		lda #$02	SFloats:	lda #2
.935e	4c 58 cc	jmp $cc58			jmp LShift_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9361					en = *	; remember here
>935a	05					.byte CL	;wh_CodeLength
>9361	44 46 21			L1:	.text "DF!"	;  name of word as a string, ending at wh_NameLastChar
>9364	23					.byte (("DF!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9365	d7 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9367	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9368	08					.byte NN	;wh_Flags	dictionary flags
=37604					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9369	20 e3 b4	jsr $b4e3	DFStore:	jsr PopYA		; pop df_addr
.936c	85 16		sta $16		DFStore_YA:	sta tmp2+0		; save df_addr
.936e	84 17		sty $17				sty tmp2+1
.9370	a4 4c		ldy $4c				ldy fp			; negative?
.9372	b9 57 00	lda $0057,y			lda FSMant0,y
.9375	29 80		and #$80			and #$80		; remember sign
.9377	85 19		sta $19				sta tmp3+1
.9379	10 03		bpl $937e			bpl +			; make positive
.937b	20 b7 8b	jsr $8bb7			jsr FNegate
.937e					+
.937e	86 14		stx $14				stx tmp1+0		; save data stack index
.9380	a6 4c		ldx $4c				ldx fp
.9382	a9 00		lda #$00			lda #0
.9384	a0 07		ldy #$07			ldy #7			; +7 IEEE
.9386	91 16		sta ($16),y			sta (tmp2),y
.9388	88		dey				dey			; +6 IEEE
.9389	91 16		sta ($16),y			sta (tmp2),y
.938b	20 d3 93	jsr $93d3			jsr _shift		; shift mantissa
.938e	20 d3 93	jsr $93d3			jsr _shift
.9391	88		dey				dey			; +5 IEEE
.9392	91 16		sta ($16),y			sta (tmp2),y
.9394	b5 75		lda $75,x			lda FSMant3,x
.9396	88		dey				dey			; +4 IEEE
.9397	91 16		sta ($16),y			sta (tmp2),y
.9399	b5 6b		lda $6b,x			lda FSMant2,x
.939b	88		dey				dey			; +3 IEEE
.939c	91 16		sta ($16),y			sta (tmp2),y
.939e	b5 61		lda $61,x			lda FSMant1,x
.93a0	88		dey				dey			; +2 IEEE
.93a1	91 16		sta ($16),y			sta (tmp2),y
.93a3	b5 57		lda $57,x			lda FSMant0,x		; clear extra bits
.93a5	29 0f		and #$0f			and #$f
.93a7	95 57		sta $57,x			sta FSMant0,x
.93a9	b5 4d		lda $4d,x			lda FSExp,x
.93ab	38		sec				sec
.93ac	e9 02		sbc #$02			sbc #2
.93ae	95 4d		sta $4d,x			sta FSExp,x
.93b0	0a		asl a				asl a
.93b1	0a		asl a				asl a
.93b2	0a		asl a				asl a
.93b3	0a		asl a				asl a
.93b4	15 57		ora $57,x			ora FSMant0,x
.93b6	88		dey				dey			; +1 IEEE
.93b7	91 16		sta ($16),y			sta (tmp2),y
.93b9	b5 4d		lda $4d,x			lda FSExp,x
.93bb	08		php				php
.93bc	4a		lsr a				lsr a
.93bd	4a		lsr a				lsr a
.93be	4a		lsr a				lsr a
.93bf	4a		lsr a				lsr a
.93c0	18		clc				clc
.93c1	69 30		adc #$30			adc #$30
.93c3	28		plp				plp
.93c4	30 03		bmi $93c9			bmi +
.93c6	18		clc				clc
.93c7	69 10		adc #$10			adc #$10
.93c9	05 19		ora $19		+		ora tmp3+1		; add sign bit
.93cb	88		dey				dey			; +0 IEEE
.93cc	91 16		sta ($16),y			sta (tmp2),y
.93ce	e6 4c		inc $4c				inc fp			; FDrop
.93d0	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.93d2	60		rts				rts
.93d3	56 57		lsr $57,x	_shift:		lsr FSMant0,x
.93d5	76 61		ror $61,x			ror FSMant1,x
.93d7	76 6b		ror $6b,x			ror FSMant2,x
.93d9	76 75		ror $75,x			ror FSMant3,x
.93db	6a		ror a				ror a
=115					CL	.var *-(WordListLink+wh_Xt)
=$93dc					en = *	; remember here
>9367	73					.byte CL	;wh_CodeLength
.93dc	60		rts				rts
>93dd	44 46 40			L1:	.text "DF@"	;  name of word as a string, ending at wh_NameLastChar
>93e0	03					.byte (("DF@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>93e1	e4 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>93e3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>93e4	08					.byte NN	;wh_Flags	dictionary flags
=37728					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.93e5	20 e3 b4	jsr $b4e3	DFAt:		jsr PopYA		; pop df_addr
.93e8	85 16		sta $16		DFAt_YA:	sta tmp2+0		; save df_addr
.93ea	84 17		sty $17				sty tmp2+1
.93ec	20 b1 84	jsr $84b1			jsr FAllocX		; alloc FP stack entry
.93ef	a0 00		ldy #$00			ldy #0			; +0 IEEE byte
.93f1	b1 16		lda ($16),y			lda (tmp2),y
.93f3	95 4d		sta $4d,x			sta FSExp,x
.93f5	c8		iny				iny			; +1 IEEE byte
.93f6	b1 16		lda ($16),y			lda (tmp2),y
.93f8	95 57		sta $57,x			sta FSMant0,x
.93fa	c8		iny				iny			; +2 IEEE byte
.93fb	b1 16		lda ($16),y			lda (tmp2),y
.93fd	95 61		sta $61,x			sta FSMant1,x
.93ff	c8		iny				iny			; +3 IEEE byte
.9400	b1 16		lda ($16),y			lda (tmp2),y
.9402	95 6b		sta $6b,x			sta FSMant2,x
.9404	c8		iny				iny			; +4 IEEE byte
.9405	b1 16		lda ($16),y			lda (tmp2),y
.9407	95 75		sta $75,x			sta FSMant3,x
.9409	c8		iny				iny			; +5 IEEE byte
.940a	b1 16		lda ($16),y			lda (tmp2),y
.940c	20 35 94	jsr $9435			jsr _shifta		; shift exponent & mantissa bits into place
.940f	20 35 94	jsr $9435			jsr _shifta
.9412	b5 57		lda $57,x			lda FSMant0,x		; finish shifting exponent bits
.9414	0a		asl a				asl a
.9415	36 4d		rol $4d,x			rol FSExp,x
.9417	0a		asl a				asl a
.9418	36 4d		rol $4d,x			rol FSExp,x
.941a	b5 4d		lda $4d,x			lda FSExp,x		; remove +1023
.941c	18		clc				clc
.941d	69 02		adc #$02			adc #2
.941f	95 4d		sta $4d,x			sta FSExp,x
.9421	b5 57		lda $57,x			lda FSMant0,x
.9423	29 7f		and #$7f			and #$7f
.9425	09 40		ora #$40			ora #$40		;   insert implied 1
.9427	95 57		sta $57,x			sta FSMant0,x		;   insert sign=0
.9429	a6 14		ldx $14				ldx tmp1		; restore data stack index
.942b	a0 00		ldy #$00			ldy #0			; get sign from +0 IEEE byte
.942d	b1 16		lda ($16),y			lda (tmp2),y
.942f	10 03		bpl $9434			bpl +
.9431	20 b7 8b	jsr $8bb7			jsr FNegate
.9434					+
.9434	60		rts				rts
.9435	0a		asl a		_shifta:	asl a
.9436	36 75		rol $75,x			rol FSMant3,x
.9438	36 6b		rol $6b,x			rol FSMant2,x
.943a	36 61		rol $61,x			rol FSMant1,x
.943c	36 57		rol $57,x			rol FSMant0,x
.943e	36 4d		rol $4d,x			rol FSExp,x
.9440	60		rts				rts
=92					CL	.var *-(WordListLink+wh_Xt)
=$9441					en = *	; remember here
>93e3	5c					.byte CL	;wh_CodeLength
>9441	44 46 6c 6f 61 74 2b		L1:	.text "DFloat+"	;  name of word as a string, ending at wh_NameLastChar
>9448	67					.byte (("DFloat+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9449	60 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>944b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>944c	08					.byte NN	;wh_Flags	dictionary flags
=37832					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.944d	a9 08		lda #$08	DFloatPlus:	lda #8
.944f	4c 14 cb	jmp $cb14			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9452					en = *	; remember here
>944b	05					.byte CL	;wh_CodeLength
>9452	44 46 6c 6f 61 74 73		L1:	.text "DFloats"	;  name of word as a string, ending at wh_NameLastChar
>9459	67					.byte (("DFloats"[-1]&7)<<5)+(*-L1)	;wh_HNL
>945a	c8 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>945c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>945d	08					.byte NN	;wh_Flags	dictionary flags
=37849					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.945e	a9 03		lda #$03	DFloats:	lda #3
.9460	4c 58 cc	jmp $cc58			jmp LShift_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9463					en = *	; remember here
>945c	05					.byte CL	;wh_CodeLength
>9463	46 4d 50 6f 6c 79		L1:	.text "FMPoly"	;  name of word as a string, ending at wh_NameLastChar
>9469	26					.byte (("FMPoly"[-1]&7)<<5)+(*-L1)	;wh_HNL
>946a	d9 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>946c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>946d	08					.byte NN	;wh_Flags	dictionary flags
=37865					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.946e	20 e3 b4	jsr $b4e3	FMPoly:		jsr PopYA
.9471	20 be b8	jsr $b8be	FMPolyYA:	jsr PushYA		; push coefficent addr
.9474	20 4d 86	jsr $864d			jsr FAt_YA		; fetch 1st coefficent
.9477	4c 8a 94	jmp $948a			jmp _4
.947a	20 67 85	jsr $8567	_2:		jsr FOver
.947d	20 12 8c	jsr $8c12			jsr FStar
.9480	b5 24		lda $24,x			lda DStack+0,x		; fetch next coefficent
.9482	b4 25		ldy $25,x			ldy DStack+1,x
.9484	20 4d 86	jsr $864d			jsr FAt_YA
.9487	20 3e 8b	jsr $8b3e			jsr FPlus
.948a	a9 05		lda #$05	_4:		lda #5			; bump coefficent ptr
.948c	20 14 cb	jsr $cb14			jsr Plus_A
.948f	a1 24		lda ($24,x)			lda (DStack+0,x)	; end of coefficent list?
.9491	d0 e7		bne $947a			bne _2
.9493	e8		inx				inx			; Drop coefficent ptr
.9494	e8		inx				inx
=39					CL	.var *-(WordListLink+wh_Xt)
=$9495					en = *	; remember here
>946c	27					.byte CL	;wh_CodeLength
.9495	60		rts				rts
>9496	46 4c 6f 67 32 4d 31 4d		L1:	.text "FLog2M1M"	;  name of word as a string, ending at wh_NameLastChar
>949e	a8					.byte (("FLog2M1M"[-1]&7)<<5)+(*-L1)	;wh_HNL
>949f	e9 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>94a1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>94a2	08					.byte NN	;wh_Flags	dictionary flags
=37918					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.94a3	a9 ad		lda #$ad	FLog2M1M:	lda #<_c
.94a5	a0 94		ldy #$94			ldy #>_c
.94a7	20 71 94	jsr $9471			jsr FMPolyYA
.94aa	4c 12 8c	jmp $8c12			jmp FStar
=10					CL	.var *-(WordListLink+wh_Xt)
=$94ad					en = *	; remember here
>94a1	0a					.byte CL	;wh_CodeLength
.94ad					_c:
>94ad	cc cf 97 7c					.dword $7C97CFCC	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94b1	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>94b2	64 87 94 af					.dword $AF948764	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94b6	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>94b7	66 c8 d4 62					.dword $62D4C866	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94bb	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>94bc	e2 9c c3 ac					.dword $ACC39CE2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94c0	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>94c1	1a c6 2b 79					.dword $792BC61A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94c5	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>94c6	07 e1 c4 a3					.dword $A3C4E107	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94ca	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>94cb	91 a5 54 5c					.dword $5C54A591	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94cf	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>94d0	00 00						.word 0
>94d2	46 4c 6f 67 32			L1:	.text "FLog2"	;  name of word as a string, ending at wh_NameLastChar
>94d7	45					.byte (("FLog2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>94d8	1e 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>94da	03					.byte 3		;wh_CodeLength  (with placeholder value)
>94db	08					.byte NN	;wh_Flags	dictionary flags
=37975					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.94dc	a4 4c		ldy $4c		FLog2:		ldy fp
.94de	b9 57 00	lda $0057,y			lda FSMant0,y	; bad param?
.94e1	30 20		bmi $9503			bmi _OutOfRange
.94e3	f0 1e		beq $9503			beq _OutOfRange
.94e5	b9 4d 00	lda $004d,y			lda FSExp,y
.94e8	48		pha				pha		; remember orig exponent
.94e9	a9 01		lda #$01			lda #1
.94eb	99 4d 00	sta $004d,y			sta FSExp,y	; set to 1
.94ee	20 a5 8b	jsr $8ba5			jsr F1Minus
.94f1	20 a3 94	jsr $94a3			jsr FLog2M1M
.94f4	a0 00		ldy #$00			ldy #0		; add orig exponent to float
.94f6	68		pla				pla
.94f7	38		sec				sec
.94f8	e9 01		sbc #$01			sbc #1
.94fa	10 01		bpl $94fd			bpl +
.94fc	88		dey				dey
.94fd					+
.94fd	20 61 8e	jsr $8e61			jsr SToFYA
.9500	4c 3e 8b	jmp $8b3e			jmp FPlus
.9503	4c 45 b5	jmp $b545	_OutOfRange:	jmp Throw_FpOutOfRange
=42					CL	.var *-(WordListLink+wh_Xt)
=$9506					en = *	; remember here
>94da	2a					.byte CL	;wh_CodeLength
>9506	46 4c 6e			L1:	.text "FLn"	;  name of word as a string, ending at wh_NameLastChar
>9509	c3					.byte (("FLn"[-1]&7)<<5)+(*-L1)	;wh_HNL
>950a	57 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>950c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>950d	08					.byte NN	;wh_Flags	dictionary flags
=38025					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.950e	20 dc 94	jsr $94dc	FLn:		jsr FLog2
.9511	20 5a 88	jsr $885a			jsr FLitI
>9514	f8 0b b9 58					.dword $58b90bf8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9518	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
.9519	4c 12 8c	jmp $8c12			jmp FStar
=14					CL	.var *-(WordListLink+wh_Xt)
=$951c					en = *	; remember here
>950c	0e					.byte CL	;wh_CodeLength
>951c	46 4c 6e 50 31			L1:	.text "FLnP1"	;  name of word as a string, ending at wh_NameLastChar
>9521	25					.byte (("FLnP1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9522	89 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9524	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9525	08					.byte NN	;wh_Flags	dictionary flags
=38049					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9526	20 73 8b	jsr $8b73	FlnP1:		jsr F1Plus
.9529	4c 0e 95	jmp $950e			jmp FLn
=6					CL	.var *-(WordListLink+wh_Xt)
=$952c					en = *	; remember here
>9524	06					.byte CL	;wh_CodeLength
>952c	46 4c 6f 67			L1:	.text "FLog"	;  name of word as a string, ending at wh_NameLastChar
>9530	e4					.byte (("FLog"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9531	a1 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9533	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9534	08					.byte NN	;wh_Flags	dictionary flags
=38064					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9535	20 dc 94	jsr $94dc	FLog:		jsr FLog2
.9538	20 5a 88	jsr $885a			jsr FLitI
>953b	3c 4d 10 4d					.dword $4d104d3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>953f	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
.9540	4c 12 8c	jmp $8c12			jmp FStar
=14					CL	.var *-(WordListLink+wh_Xt)
=$9543					en = *	; remember here
>9533	0e					.byte CL	;wh_CodeLength
>9543	46 45 78 70 32 4d 31 4d		L1:	.text "FExp2M1M"	;  name of word as a string, ending at wh_NameLastChar
>954b	a8					.byte (("FExp2M1M"[-1]&7)<<5)+(*-L1)	;wh_HNL
>954c	b0 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>954e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>954f	08					.byte NN	;wh_Flags	dictionary flags
=38091					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9550	a9 5a		lda #$5a	FExp2M1M:	lda #<_c
.9552	a0 95		ldy #$95			ldy #>_c
.9554	20 71 94	jsr $9471			jsr FMPolyYA
.9557	4c 12 8c	jmp $8c12			jmp FStar
=10					CL	.var *-(WordListLink+wh_Xt)
=$955a					en = *	; remember here
>954e	0a					.byte CL	;wh_CodeLength
.955a					_c:
>955a	e7 dc 4f 7c					.dword $7C4FDCe7	; 32 bit signed binary mantissa.  $40000000 = +0.5
>955e	f7						.char -9		; 8 bit signed exponent.  $00 = 2**0
>955f	de ca 4c 49					.dword $494CCADe	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9563	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9564	fb 42 64 72					.dword $726442fb	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9568	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9569	50 90 f4 7a					.dword $7AF49050	; 32 bit signed binary mantissa.  $40000000 = +0.5
>956d	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>956e	a2 3c b9 58					.dword $58B93Ca2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9572	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>9573	00						.byte 0
>9574	46 45 78 70 32			L1:	.text "FExp2"	;  name of word as a string, ending at wh_NameLastChar
>9579	45					.byte (("FExp2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>957a	cb 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>957c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>957d	08					.byte NN	;wh_Flags	dictionary flags
=38137					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.957e	20 6b 8a	jsr $8a6b	FExp2:		jsr FIntFrc	; ( f: r_rem r_int )
.9581	20 ab 8e	jsr $8eab			jsr FToS
.9584	20 50 95	jsr $9550			jsr FExp2M1M
.9587	20 73 8b	jsr $8b73			jsr F1Plus
.958a	20 c7 b4	jsr $b4c7			jsr PopA
.958d	a4 4c		ldy $4c				ldy fp
.958f	18		clc				clc
.9590	79 4d 00	adc $004d,y			adc FSExp,y
.9593	99 4d 00	sta $004d,y			sta FSExp,y
=24					CL	.var *-(WordListLink+wh_Xt)
=$9596					en = *	; remember here
>957c	18					.byte CL	;wh_CodeLength
.9596	60		rts				rts
>9597	46 45 78 70			L1:	.text "FExp"	;  name of word as a string, ending at wh_NameLastChar
>959b	04					.byte (("FExp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>959c	f9 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>959e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>959f	08					.byte NN	;wh_Flags	dictionary flags
=38171					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95a0					FExp:
.95a0	20 5a 88	jsr $885a			jsr FLitI
>95a3	94 1d 55 5c					.dword $5c551d94	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95a7	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
.95a8	20 12 8c	jsr $8c12			jsr FStar
.95ab	4c 7e 95	jmp $957e			jmp FExp2
=14					CL	.var *-(WordListLink+wh_Xt)
=$95ae					en = *	; remember here
>959e	0e					.byte CL	;wh_CodeLength
>95ae	46 45 78 70 4d 31		L1:	.text "FExpM1"	;  name of word as a string, ending at wh_NameLastChar
>95b4	26					.byte (("FExpM1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95b5	1b 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95b8	08					.byte NN	;wh_Flags	dictionary flags
=38196					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95b9	20 a0 95	jsr $95a0	FExpM1:		jsr FExp
.95bc	4c a5 8b	jmp $8ba5			jmp F1Minus
=6					CL	.var *-(WordListLink+wh_Xt)
=$95bf					en = *	; remember here
>95b7	06					.byte CL	;wh_CodeLength
>95bf	46 41 4c 6f 67			L1:	.text "FALog"	;  name of word as a string, ending at wh_NameLastChar
>95c4	e5					.byte (("FALog"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95c5	34 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95c8	08					.byte NN	;wh_Flags	dictionary flags
=38212					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95c9					FALog:
.95c9	20 5a 88	jsr $885a			jsr FLitI
>95cc	25 3c 4d 6a					.dword $6a4d3c25	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95d0	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
.95d1	20 12 8c	jsr $8c12			jsr FStar
.95d4	4c 7e 95	jmp $957e			jmp FExp2
=14					CL	.var *-(WordListLink+wh_Xt)
=$95d7					en = *	; remember here
>95c7	0e					.byte CL	;wh_CodeLength
>95d7	46 2a 2a			L1:	.text "F**"	;  name of word as a string, ending at wh_NameLastChar
>95da	43					.byte (("F**"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95db	44 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95de	08					.byte NN	;wh_Flags	dictionary flags
=38234					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95df	20 cb 85	jsr $85cb	FPower:		jsr FSwap
.95e2	20 dc 94	jsr $94dc			jsr FLog2
.95e5	20 12 8c	jsr $8c12			jsr FStar
.95e8	4c 7e 95	jmp $957e			jmp FExp2
=12					CL	.var *-(WordListLink+wh_Xt)
=$95eb					en = *	; remember here
>95dd	0c					.byte CL	;wh_CodeLength
>95eb	44 65 67 32 52 61 64		L1:	.text "Deg2Rad"	;  name of word as a string, ending at wh_NameLastChar
>95f2	87					.byte (("Deg2Rad"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95f3	5a 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95f5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95f6	08					.byte NN	;wh_Flags	dictionary flags
=38258					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95f7					Deg2Rad:
.95f7	20 5a 88	jsr $885a			jsr FLitI
>95fa	8a 1a 7d 47					.dword $477d1A8A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95fe	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
.95ff	4c 12 8c	jmp $8c12			jmp FStar
=11					CL	.var *-(WordListLink+wh_Xt)
=$9602					en = *	; remember here
>95f5	0b					.byte CL	;wh_CodeLength
>9602	52 61 64 32 44 65 67		L1:	.text "Rad2Deg"	;  name of word as a string, ending at wh_NameLastChar
>9609	e7					.byte (("Rad2Deg"[-1]&7)<<5)+(*-L1)	;wh_HNL
>960a	72 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>960c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>960d	08					.byte NN	;wh_Flags	dictionary flags
=38281					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.960e					Rad2Deg:
.960e	20 5a 88	jsr $885a			jsr FLitI
>9611	68 70 97 72					.dword $72977068	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9615	06						.char 6		; 8 bit signed exponent.  $00 = 2**0
.9616	4c 12 8c	jmp $8c12			jmp FStar
=11					CL	.var *-(WordListLink+wh_Xt)
=$9619					en = *	; remember here
>960c	0b					.byte CL	;wh_CodeLength
>9619	46 41 52 65 64 75 63 65		L1:	.text "FAReduce"	;  name of word as a string, ending at wh_NameLastChar
>9621	a8					.byte (("FAReduce"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9622	89 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9624	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9625	08					.byte NN	;wh_Flags	dictionary flags
=38305					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9626	a4 4c		ldy $4c		FAReduce:	ldy fp
.9628	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.962b	f0 2f		beq $965c			beq _ok
.962d	b9 4d 00	lda $004d,y			lda FSExp,y		; get exponent
.9630	30 2a		bmi $965c			bmi _ok			; small?
.9632	c9 01		cmp #$01			cmp #1			; maybe need mirror?
.9634	30 26		bmi $965c			bmi _ok			;if exponent <=0
.9636	f0 24		beq $965c			beq _ok
.9638	c9 02		cmp #$02			cmp #2			; maybe need rotation?
.963a	b0 22		bcs $965e			bcs _exp2
.963c	b9 57 00	lda $0057,y			lda FSMant0,y
.963f	c9 65		cmp #$65			cmp #$65		;in -pi/2..pi/2 ?
.9641	90 19		bcc $965c			bcc _ok
.9643	c9 9b		cmp #$9b			cmp #$100-$65
.9645	b0 15		bcs $965c			bcs _ok
.9647					_mir:
.9647	20 18 89	jsr $8918			jsr FPi
.964a	a4 4c		ldy $4c				ldy fp
.964c	b9 58 00	lda $0058,y			lda FSMant0+1,y
.964f	10 03		bpl $9654			bpl _3
.9651	20 b7 8b	jsr $8bb7			jsr FNegate
.9654	20 cb 85	jsr $85cb	_3:		jsr FSwap
.9657	20 80 8b	jsr $8b80			jsr FMinus
.965a	38		sec				sec		; mirrored
.965b	60		rts				rts
.965c	18		clc		_ok:		clc		; not mirrored
.965d	60		rts				rts
.965e	d0 0b		bne $966b	_exp2:		bne _rot	;if exp>2 then fix
.9660	b9 57 00	lda $0057,y			lda FSMant0,y
.9663	c9 65		cmp #$65			cmp #$65	;if mant>pi or mant<-pi then fix
.9665	90 e0		bcc $9647			bcc _mir
.9667	c9 9b		cmp #$9b			cmp #$100-$65
.9669	b0 dc		bcs $9647			bcs _mir
.966b	20 4a 89	jsr $894a	_rot:		jsr F2Pi
.966e	20 d0 8c	jsr $8cd0			jsr FSlash
.9671	20 6b 8a	jsr $8a6b			jsr FIntFrc
.9674	e6 4c		inc $4c				inc fp		; FDrop integer part
.9676	a4 4c		ldy $4c				ldy fp		;if >=.5
.9678	b9 4d 00	lda $004d,y			lda FSExp,y
.967b	a8		tay				tay
.967c	30 03		bmi $9681			bmi _rot4
.967e	20 a5 8b	jsr $8ba5			jsr F1Minus	;  subtract 1
.9681	20 4a 89	jsr $894a	_rot4:		jsr F2Pi
.9684	20 12 8c	jsr $8c12			jsr FStar
.9687	4c 26 96	jmp $9626			jmp FAReduce	; rotate done, look again
=100					CL	.var *-(WordListLink+wh_Xt)
=$968a					en = *	; remember here
>9624	64					.byte CL	;wh_CodeLength
>968a	46 53 69 6e			L1:	.text "FSin"	;  name of word as a string, ending at wh_NameLastChar
>968e	c4					.byte (("FSin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>968f	a1 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9691	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9692	08					.byte NN	;wh_Flags	dictionary flags
=38414					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9693	20 26 96	jsr $9626	FSin:		jsr FAReduce
.9696	4c 99 96	jmp $9699			jmp FSinM
=6					CL	.var *-(WordListLink+wh_Xt)
=$9699					en = *	; remember here
>9691	06					.byte CL	;wh_CodeLength
.9699	20 43 85	jsr $8543	FSinM:		jsr FDup
.969c	20 a3 8c	jsr $8ca3			jsr FSqr	; x x^2
.969f	a9 af		lda #$af			lda #<_c
.96a1	a0 96		ldy #$96			ldy #>_c
.96a3	20 71 94	jsr $9471			jsr FMPolyYA
.96a6	20 12 8c	jsr $8c12			jsr FStar
.96a9	20 73 8b	jsr $8b73			jsr F1Plus	; C0 +1.0
.96ac	4c 12 8c	jmp $8c12			jmp FStar
.96af					_c:
>96af	ba a7 21 57					.dword $5721a7ba	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96b3	ee						.char -18		; 8 bit signed exponent.  $00 = 2**0
>96b4	3a 0b 2a 98					.dword $982a0b3a	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96b8	f4						.char -12		; 8 bit signed exponent.  $00 = 2**0
>96b9	4c 8f 43 44					.dword $44438f4c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96bd	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>96be	2b ae aa aa					.dword $aaaaae2b	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96c2	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>96c3	00						.byte 0
>96c4	46 43 73 63			L1:	.text "FCsc"	;  name of word as a string, ending at wh_NameLastChar
>96c8	64					.byte (("FCsc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>96c9	0e 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96cb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96cc	08					.byte NN	;wh_Flags	dictionary flags
=38472					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.96cd	20 93 96	jsr $9693	FCsc:		jsr FSin
.96d0	4c 75 8d	jmp $8d75			jmp F1Slash		; 1/SIN(r1)
=6					CL	.var *-(WordListLink+wh_Xt)
=$96d3					en = *	; remember here
>96cb	06					.byte CL	;wh_CodeLength
>96d3	46 43 6f 73			L1:	.text "FCos"	;  name of word as a string, ending at wh_NameLastChar
>96d7	64					.byte (("FCos"[-1]&7)<<5)+(*-L1)	;wh_HNL
>96d8	48 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96da	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96db	08					.byte NN	;wh_Flags	dictionary flags
=38487					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.96dc	20 29 89	jsr $8929	FCos:		jsr FPiH
.96df	20 3e 8b	jsr $8b3e			jsr FPlus
.96e2	4c 93 96	jmp $9693			jmp FSin
=9					CL	.var *-(WordListLink+wh_Xt)
=$96e5					en = *	; remember here
>96da	09					.byte CL	;wh_CodeLength
>96e5	46 53 65 63			L1:	.text "FSec"	;  name of word as a string, ending at wh_NameLastChar
>96e9	64					.byte (("FSec"[-1]&7)<<5)+(*-L1)	;wh_HNL
>96ea	57 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96ec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96ed	08					.byte NN	;wh_Flags	dictionary flags
=38505					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.96ee	20 dc 96	jsr $96dc	FSec:		jsr FCos
.96f1	4c 75 8d	jmp $8d75			jmp F1Slash		; 1/COS(r1)
=6					CL	.var *-(WordListLink+wh_Xt)
=$96f4					en = *	; remember here
>96ec	06					.byte CL	;wh_CodeLength
>96f4	46 53 69 6e 43 6f 73		L1:	.text "FSinCos"	;  name of word as a string, ending at wh_NameLastChar
>96fb	67					.byte (("FSinCos"[-1]&7)<<5)+(*-L1)	;wh_HNL
>96fc	69 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96ff	08					.byte NN	;wh_Flags	dictionary flags
=38523					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9700	20 43 85	jsr $8543	FSinCos:	jsr FDup
.9703	20 93 96	jsr $9693			jsr FSin
.9706	20 cb 85	jsr $85cb			jsr FSwap
.9709	4c dc 96	jmp $96dc			jmp FCos
=12					CL	.var *-(WordListLink+wh_Xt)
=$970c					en = *	; remember here
>96fe	0c					.byte CL	;wh_CodeLength
>970c	46 54 61 6e			L1:	.text "FTan"	;  name of word as a string, ending at wh_NameLastChar
>9710	c4					.byte (("FTan"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9711	7b 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9713	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9714	08					.byte NN	;wh_Flags	dictionary flags
=38544					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9715	20 26 96	jsr $9626	FTan:		jsr FAReduce
.9718	90 06		bcc $9720			bcc _30
.971a	20 20 97	jsr $9720			jsr _30
.971d	4c b7 8b	jmp $8bb7			jmp FNegate
.9720					_30:
.9720	20 43 85	jsr $8543			jsr FDup
.9723	20 de 8b	jsr $8bde			jsr FAbs
.9726	20 3a 89	jsr $893a			jsr FPiQ
.9729	20 73 87	jsr $8773			jsr FLe
.972c	e8		inx				inx			; pop f
.972d	e8		inx				inx
.972e	b5 24		lda $24,x			lda DStack+0,x
.9730	d0 19		bne $974b			bne FTanM
.9732	20 8c 44	jsr $448c			jsr FPi/2
.9735	a4 4c		ldy $4c				ldy fp			; get sign
.9737	b9 57 00	lda $0057,y			lda FSMant0,y
.973a	10 03		bpl $973f			bpl +
.973c	20 b7 8b	jsr $8bb7			jsr FNegate
.973f					+
.973f	20 cb 85	jsr $85cb			jsr FSwap
.9742	20 80 8b	jsr $8b80			jsr FMinus
.9745	20 4b 97	jsr $974b			jsr FTanM
.9748	4c 75 8d	jmp $8d75			jmp F1Slash
=54					CL	.var *-(WordListLink+wh_Xt)
=$974b					en = *	; remember here
>9713	36					.byte CL	;wh_CodeLength
.974b	20 43 85	jsr $8543	FTanM:		jsr FDup
.974e	20 a3 8c	jsr $8ca3			jsr FSqr		; x x^2
.9751	a9 61		lda #$61			lda #<_c
.9753	a0 97		ldy #$97			ldy #>_c
.9755	20 71 94	jsr $9471			jsr FMPolyYA
.9758	20 12 8c	jsr $8c12			jsr FStar
.975b	20 73 8b	jsr $8b73			jsr F1Plus		; c0 1.0
.975e	4c 12 8c	jmp $8c12			jmp FStar
.9761					_c:
>9761	1e ae 4d 58					.dword $584DAE1E	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9765	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>9766	51 0a eb 57					.dword $57EB0A51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>976a	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>976b	98 d9 14 77					.dword $7714D998	; 32 bit signed binary mantissa.  $40000000 = +0.5
>976f	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9770	f9 10 ea 43					.dword $43EA10F9	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9774	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9775	1b e2 57 55					.dword $5557E21B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9779	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>977a	00						.byte 0
>977b	46 43 6f 74			L1:	.text "FCot"	;  name of word as a string, ending at wh_NameLastChar
>977f	84					.byte (("FCot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9780	90 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9782	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9783	08					.byte NN	;wh_Flags	dictionary flags
=38655					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9784	20 15 97	jsr $9715	FCot:		jsr FTan
.9787	4c 75 8d	jmp $8d75			jmp F1Slash	; =1/TAN(r1)
=6					CL	.var *-(WordListLink+wh_Xt)
=$978a					en = *	; remember here
>9782	06					.byte CL	;wh_CodeLength
>978a	46 41 43 6f 73			L1:	.text "FACos"	;  name of word as a string, ending at wh_NameLastChar
>978f	65					.byte (("FACos"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9790	ff 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9792	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9793	08					.byte NN	;wh_Flags	dictionary flags
=38671					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9794	a4 4c		ldy $4c		FACos:		ldy fp
.9796	b9 57 00	lda $0057,y			lda FSMant0,y
.9799	08		php				php			; save sign
.979a	20 de 8b	jsr $8bde			jsr FAbs
.979d	a9 c0		lda #$c0			lda #<_c
.979f	a0 97		ldy #$97			ldy #>_c
.97a1	20 71 94	jsr $9471			jsr FMPolyYA
.97a4	20 cb 85	jsr $85cb			jsr FSwap
.97a7	20 b7 8b	jsr $8bb7			jsr FNegate
.97aa	20 73 8b	jsr $8b73			jsr F1Plus
.97ad	20 54 8f	jsr $8f54			jsr FSqrt
.97b0	20 12 8c	jsr $8c12			jsr FStar
.97b3	28		plp				plp			; was r1 negative?
.97b4	10 09		bpl $97bf			bpl +
.97b6	20 18 89	jsr $8918			jsr FPi
.97b9	20 cb 85	jsr $85cb			jsr FSwap
.97bc	20 80 8b	jsr $8b80			jsr FMinus
.97bf					+
=43					CL	.var *-(WordListLink+wh_Xt)
=$97bf					en = *	; remember here
>9792	2b					.byte CL	;wh_CodeLength
.97bf	60		rts				rts
.97c0					_c:
>97c0	8b 5e 9f 4b					.dword $4B9F5E8B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97c4	f8						.char -8		; 8 bit signed exponent.  $00 = 2**0
>97c5	ad cc 29 a4					.dword $A429CCAD	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97c9	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>97ca	98 a1 a3 6e					.dword $6EA3A198	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97ce	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>97cf	5a 10 e1 9b					.dword $9BE1105A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97d3	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>97d4	c6 71 ea 5a					.dword $5AEA71C6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97d8	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>97d9	e0 56 21 92					.dword $922156E0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97dd	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>97de	41 ed 87 64					.dword $6487ED41	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97e2	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>97e3	00						.byte 0
>97e4	46 41 53 65 63			L1:	.text "FASec"	;  name of word as a string, ending at wh_NameLastChar
>97e9	65					.byte (("FASec"[-1]&7)<<5)+(*-L1)	;wh_HNL
>97ea	0f 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>97ec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>97ed	08					.byte NN	;wh_Flags	dictionary flags
=38761					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.97ee	20 75 8d	jsr $8d75	FASec:		jsr F1Slash
.97f1	4c 94 97	jmp $9794			jmp FACos
=6					CL	.var *-(WordListLink+wh_Xt)
=$97f4					en = *	; remember here
>97ec	06					.byte CL	;wh_CodeLength
>97f4	46 41 53 69 6e			L1:	.text "FASin"	;  name of word as a string, ending at wh_NameLastChar
>97f9	c5					.byte (("FASin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>97fa	69 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>97fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>97fd	08					.byte NN	;wh_Flags	dictionary flags
=38777					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.97fe	20 94 97	jsr $9794	FASin:		jsr FACos
.9801	20 b7 8b	jsr $8bb7			jsr FNegate
.9804	20 29 89	jsr $8929			jsr FPiH
.9807	4c 3e 8b	jmp $8b3e			jmp FPlus
=12					CL	.var *-(WordListLink+wh_Xt)
=$980a					en = *	; remember here
>97fc	0c					.byte CL	;wh_CodeLength
>980a	46 41 43 73 63			L1:	.text "FACsc"	;  name of word as a string, ending at wh_NameLastChar
>980f	65					.byte (("FACsc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9810	79 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9812	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9813	08					.byte NN	;wh_Flags	dictionary flags
=38799					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9814	20 75 8d	jsr $8d75	FACsc:		jsr F1Slash
.9817	4c fe 97	jmp $97fe			jmp FASin
=6					CL	.var *-(WordListLink+wh_Xt)
=$981a					en = *	; remember here
>9812	06					.byte CL	;wh_CodeLength
>981a	46 41 54 61 6e			L1:	.text "FATan"	;  name of word as a string, ending at wh_NameLastChar
>981f	c5					.byte (("FATan"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9820	8f 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9822	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9823	08					.byte NN	;wh_Flags	dictionary flags
=38815					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9824					FATan:
.9824	a4 4c		ldy $4c				ldy fp
.9826	b9 4d 00	lda $004d,y			lda FSExp,y		; Abs(r1)<1 ?
.9829	30 1b		bmi $9846			bmi FATanM
.982b	f0 19		beq $9846			beq FATanM
.982d	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.9830	08		php				php
.9831	20 75 8d	jsr $8d75			jsr F1Slash
.9834	20 46 98	jsr $9846			jsr FATanM
.9837	20 b7 8b	jsr $8bb7			jsr FNegate
.983a	20 29 89	jsr $8929			jsr FPiH
.983d	28		plp				plp
.983e	10 03		bpl $9843			bpl _18
.9840	20 b7 8b	jsr $8bb7			jsr FNegate
.9843	4c 3e 8b	jmp $8b3e	_18:		jmp FPlus
.9846	20 43 85	jsr $8543	FATanM:		jsr FDup		; x x
.9849	20 a3 8c	jsr $8ca3			jsr FSqr		; x xsqr
.984c	a9 5c		lda #$5c			lda #<_c
.984e	a0 98		ldy #$98			ldy #>_c
.9850	20 71 94	jsr $9471			jsr FMPolyYA
.9853	20 12 8c	jsr $8c12			jsr FStar		; x poly
.9856	20 73 8b	jsr $8b73			jsr F1Plus		; x poly
.9859	4c 12 8c	jmp $8c12			jmp FStar
.985c					_c:
>985c	98 08 2d 76					.dword $762D0898	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9860	f9						.char -7		; 8 bit signed exponent.  $00 = 2**0
>9861	55 a1 32 b8					.dword $B832A155	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9865	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9866	a8 d7 a2 53					.dword $53A2D7A8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>986a	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>986b	be 91 85 bb					.dword $BB8591BE	; 32 bit signed binary mantissa.  $40000000 = +0.5
>986f	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9870	06 65 aa 65					.dword $65AA6506	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9874	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9875	12 21 b0 aa					.dword $AAB02112	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9879	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>987a	00						.byte 0
>987b	46 41 43 6f 74			L1:	.text "FACot"	;  name of word as a string, ending at wh_NameLastChar
>9880	85					.byte (("FACot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9881	9f 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9883	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9884	08					.byte NN	;wh_Flags	dictionary flags
=38912					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9885	20 75 8d	jsr $8d75	FACot:		jsr F1Slash
.9888	4c 24 98	jmp $9824			jmp FATan
=6					CL	.var *-(WordListLink+wh_Xt)
=$988b					en = *	; remember here
>9883	06					.byte CL	;wh_CodeLength
>988b	46 41 54 61 6e 32		L1:	.text "FATan2"	;  name of word as a string, ending at wh_NameLastChar
>9891	46					.byte (("FATan2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9892	00 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9894	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9895	08					.byte NN	;wh_Flags	dictionary flags
=38929					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9896	a4 4c		ldy $4c		FATan2:		ldy fp
.9898	b9 57 00	lda $0057,y			lda FSMant0+0,y	; get rx sign
.989b	f0 1c		beq $98b9			beq _rxzero
.989d	0a		asl a				asl a		;   C=rx sign
.989e	b9 58 00	lda $0058,y			lda FSMant0+1,y	;   N=ry sign
.98a1	08		php				php		; save signs
.98a2	20 d0 8c	jsr $8cd0			jsr FSlash
.98a5	20 24 98	jsr $9824			jsr FATan
.98a8	28		plp				plp		; pop signs
.98a9	b0 01		bcs $98ac			bcs _rxneg
.98ab	60		rts		_rts:		rts
.98ac	08		php		_rxneg:		php
.98ad	20 18 89	jsr $8918			jsr FPi
.98b0	28		plp				plp
.98b1	10 03		bpl $98b6			bpl +
.98b3	20 b7 8b	jsr $8bb7			jsr FNegate
.98b6	4c 3e 8b	jmp $8b3e	+		jmp FPlus
.98b9	e6 4c		inc $4c		_rxzero:	inc fp		; FDrop rx
.98bb	b9 57 00	lda $0057,y			lda FSMant0,y
.98be	08		php				php
.98bf	e6 4c		inc $4c				inc fp		; FDrop ry
.98c1	20 29 89	jsr $8929			jsr FPiH
.98c4	28		plp				plp
.98c5	10 e4		bpl $98ab			bpl _rts
.98c7	4c b7 8b	jmp $8bb7			jmp FNegate
=52					CL	.var *-(WordListLink+wh_Xt)
=$98ca					en = *	; remember here
>9894	34					.byte CL	;wh_CodeLength
>98ca	46 53 67 6e			L1:	.text "FSgn"	;  name of word as a string, ending at wh_NameLastChar
>98ce	c4					.byte (("FSgn"[-1]&7)<<5)+(*-L1)	;wh_HNL
>98cf	11 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>98d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>98d2	08					.byte NN	;wh_Flags	dictionary flags
=38990					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.98d3	a4 4c		ldy $4c		FSgn:		ldy fp
.98d5	b9 57 00	lda $0057,y			lda FSMant0,y
.98d8	f0 0a		beq $98e4			beq _zero
.98da	e6 4c		inc $4c				inc fp
.98dc	b9 57 00	lda $0057,y			lda FSMant0,y
.98df	30 04		bmi $98e5			bmi FM1
.98e1	4c fb 88	jmp $88fb			jmp F1
.98e4	60		rts		_zero:		rts
=18					CL	.var *-(WordListLink+wh_Xt)
=$98e5					en = *	; remember here
>98d1	12					.byte CL	;wh_CodeLength
.98e5	a9 80		lda #$80	FM1:		lda #$80
.98e7	a0 00		ldy #$00			ldy #0
.98e9	4c a5 88	jmp $88a5			jmp FLitYA
>98ec	46 53 69 6e 48			L1:	.text "FSinH"	;  name of word as a string, ending at wh_NameLastChar
>98f1	05					.byte (("FSinH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>98f2	4e 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>98f4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>98f5	08					.byte NN	;wh_Flags	dictionary flags
=39025					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.98f6	20 43 85	jsr $8543	FSinH:		jsr FDup
.98f9	20 a0 95	jsr $95a0			jsr FExp
.98fc	20 cb 85	jsr $85cb			jsr FSwap
.98ff	20 b7 8b	jsr $8bb7			jsr FNegate
.9902	20 a0 95	jsr $95a0			jsr FExp
.9905	20 80 8b	jsr $8b80			jsr FMinus
.9908	4c b9 89	jmp $89b9			jmp F2Slash
=21					CL	.var *-(WordListLink+wh_Xt)
=$990b					en = *	; remember here
>98f4	15					.byte CL	;wh_CodeLength
>990b	46 43 73 63 48			L1:	.text "FCscH"	;  name of word as a string, ending at wh_NameLastChar
>9910	05					.byte (("FCscH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9911	71 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9913	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9914	08					.byte NN	;wh_Flags	dictionary flags
=39056					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9915	20 f6 98	jsr $98f6	FCscH:		jsr FSinH
.9918	4c 75 8d	jmp $8d75			jmp F1Slash
=6					CL	.var *-(WordListLink+wh_Xt)
=$991b					en = *	; remember here
>9913	06					.byte CL	;wh_CodeLength
>991b	46 43 6f 73 48			L1:	.text "FCosH"	;  name of word as a string, ending at wh_NameLastChar
>9920	05					.byte (("FCosH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9921	90 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9923	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9924	08					.byte NN	;wh_Flags	dictionary flags
=39072					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9925	20 43 85	jsr $8543	FCosH:		jsr FDup
.9928	20 a0 95	jsr $95a0			jsr FExp
.992b	20 cb 85	jsr $85cb			jsr FSwap
.992e	20 b7 8b	jsr $8bb7			jsr FNegate
.9931	20 a0 95	jsr $95a0			jsr FExp
.9934	20 3e 8b	jsr $8b3e			jsr FPlus
.9937	4c b9 89	jmp $89b9			jmp F2Slash
=21					CL	.var *-(WordListLink+wh_Xt)
=$993a					en = *	; remember here
>9923	15					.byte CL	;wh_CodeLength
>993a	46 53 65 63 48			L1:	.text "FSecH"	;  name of word as a string, ending at wh_NameLastChar
>993f	05					.byte (("FSecH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9940	a0 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9942	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9943	08					.byte NN	;wh_Flags	dictionary flags
=39103					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9944	20 25 99	jsr $9925	FSecH:		jsr FCosH
.9947	4c 75 8d	jmp $8d75			jmp F1Slash
=6					CL	.var *-(WordListLink+wh_Xt)
=$994a					en = *	; remember here
>9942	06					.byte CL	;wh_CodeLength
>994a	46 54 61 6e 48			L1:	.text "FTanH"	;  name of word as a string, ending at wh_NameLastChar
>994f	05					.byte (("FTanH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9950	bf 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9952	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9953	08					.byte NN	;wh_Flags	dictionary flags
=39119					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9954	20 43 85	jsr $8543	FTanH:		jsr FDup
.9957	20 b7 8b	jsr $8bb7			jsr FNegate	; X -X
.995a	20 a0 95	jsr $95a0			jsr FExp	; X Exp(-X)
.995d	20 cb 85	jsr $85cb			jsr FSwap	; Exp(-X) X
.9960	20 a0 95	jsr $95a0			jsr FExp	; Exp(-X) Exp(X)
.9963	20 67 85	jsr $8567			jsr FOver	; Exp(-X) Exp(X) Exp(-X)
.9966	20 3e 8b	jsr $8b3e			jsr FPlus	; Exp(-X) Exp(X)+Exp(-X)
.9969	20 d0 8c	jsr $8cd0			jsr FSlash	; Exp(-X)/(Exp(X)+Exp(-X))
.996c	20 ad 89	jsr $89ad			jsr F2Star	; Exp(-X)/(Exp(X)+Exp(-X))*2
.996f	20 b7 8b	jsr $8bb7			jsr FNegate
.9972	4c 73 8b	jmp $8b73			jmp F1Plus
=33					CL	.var *-(WordListLink+wh_Xt)
=$9975					en = *	; remember here
>9952	21					.byte CL	;wh_CodeLength
>9975	46 43 6f 74 48			L1:	.text "FCotH"	;  name of word as a string, ending at wh_NameLastChar
>997a	05					.byte (("FCotH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>997b	cf 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>997d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>997e	08					.byte NN	;wh_Flags	dictionary flags
=39162					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.997f	20 54 99	jsr $9954	FCotH:		jsr FTanH
.9982	4c 75 8d	jmp $8d75			jmp F1Slash
=6					CL	.var *-(WordListLink+wh_Xt)
=$9985					en = *	; remember here
>997d	06					.byte CL	;wh_CodeLength
>9985	46 41 53 69 6e 48		L1:	.text "FASinH"	;  name of word as a string, ending at wh_NameLastChar
>998b	06					.byte (("FASinH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>998c	fa 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>998e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>998f	08					.byte NN	;wh_Flags	dictionary flags
=39179					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9990	20 43 85	jsr $8543	FASinH:		jsr FDup	; X X
.9993	20 a3 8c	jsr $8ca3			jsr FSqr	; X X*X
.9996	20 73 8b	jsr $8b73			jsr F1Plus	; X X*X+1
.9999	20 54 8f	jsr $8f54			jsr FSqrt	; X sqrt(X*X+1)
.999c	20 3e 8b	jsr $8b3e			jsr FPlus	;
.999f	4c 0e 95	jmp $950e			jmp FLn
=18					CL	.var *-(WordListLink+wh_Xt)
=$99a2					en = *	; remember here
>998e	12					.byte CL	;wh_CodeLength
>99a2	46 41 43 73 63 48		L1:	.text "FACscH"	;  name of word as a string, ending at wh_NameLastChar
>99a8	06					.byte (("FACscH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>99a9	0b 99					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>99ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>99ac	08					.byte NN	;wh_Flags	dictionary flags
=39208					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.99ad	20 75 8d	jsr $8d75	FACscH:		jsr F1Slash
.99b0	4c 90 99	jmp $9990			jmp FASinH
=6					CL	.var *-(WordListLink+wh_Xt)
=$99b3					en = *	; remember here
>99ab	06					.byte CL	;wh_CodeLength
>99b3	46 41 43 6f 73 48		L1:	.text "FACosH"	;  name of word as a string, ending at wh_NameLastChar
>99b9	06					.byte (("FACosH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>99ba	28 99					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>99bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>99bd	08					.byte NN	;wh_Flags	dictionary flags
=39225					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.99be	20 43 85	jsr $8543	FACosH:		jsr FDup
.99c1	20 a3 8c	jsr $8ca3			jsr FSqr
.99c4	20 a5 8b	jsr $8ba5			jsr F1Minus
.99c7	20 54 8f	jsr $8f54			jsr FSqrt
.99ca	20 3e 8b	jsr $8b3e			jsr FPlus
.99cd	4c 0e 95	jmp $950e			jmp FLn
=18					CL	.var *-(WordListLink+wh_Xt)
=$99d0					en = *	; remember here
>99bc	12					.byte CL	;wh_CodeLength
>99d0	46 41 53 65 63 48		L1:	.text "FASecH"	;  name of word as a string, ending at wh_NameLastChar
>99d6	06					.byte (("FASecH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>99d7	39 99					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>99d9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>99da	08					.byte NN	;wh_Flags	dictionary flags
=39254					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.99db	20 75 8d	jsr $8d75	FASecH:		jsr F1Slash
.99de	4c be 99	jmp $99be			jmp FACosH
=6					CL	.var *-(WordListLink+wh_Xt)
=$99e1					en = *	; remember here
>99d9	06					.byte CL	;wh_CodeLength
>99e1	46 41 54 61 6e 48		L1:	.text "FATanH"	;  name of word as a string, ending at wh_NameLastChar
>99e7	06					.byte (("FATanH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>99e8	56 99					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>99ea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>99eb	08					.byte NN	;wh_Flags	dictionary flags
=39271					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.99ec	20 43 85	jsr $8543	FAtanH:		jsr FDup	; x x
.99ef	20 73 8b	jsr $8b73			jsr F1Plus	; x x+1
.99f2	20 cb 85	jsr $85cb			jsr FSwap	; 1+x x
.99f5	20 fb 88	jsr $88fb			jsr F1
.99f8	20 cb 85	jsr $85cb			jsr FSwap
.99fb	20 80 8b	jsr $8b80			jsr FMinus	; 1+x 1-x
.99fe	20 d0 8c	jsr $8cd0			jsr FSlash	; (1+x)/(1-x)
.9a01	20 0e 95	jsr $950e			jsr FLn
.9a04	4c b9 89	jmp $89b9			jmp F2Slash
=27					CL	.var *-(WordListLink+wh_Xt)
=$9a07					en = *	; remember here
>99ea	1b					.byte CL	;wh_CodeLength
>9a07	46 41 43 6f 74 48		L1:	.text "FACotH"	;  name of word as a string, ending at wh_NameLastChar
>9a0d	06					.byte (("FACotH"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9a0e	67 99					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9a10	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9a11	08					.byte NN	;wh_Flags	dictionary flags
=39309					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9a12	20 75 8d	jsr $8d75	FACotH: 	jsr F1Slash
.9a15	4c ec 99	jmp $99ec			jmp FATanH
=6					CL	.var *-(WordListLink+wh_Xt)
=$9a18					en = *	; remember here
>9a10	06					.byte CL	;wh_CodeLength
>9a18	45 64				L1:	.text "Ed"	;  name of word as a string, ending at wh_NameLastChar
>9a1a	82					.byte (("Ed"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9a1b	8d 99					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9a1d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9a1e	08					.byte NN	;wh_Flags	dictionary flags
=39322					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9a1f	4c 22 9a	jmp $9a22	Ed:		jmp ed6502
=3					CL	.var *-(WordListLink+wh_Xt)
=$9a22					en = *	; remember here
>9a1d	03					.byte CL	;wh_CodeLength
=$1e					ed_head	 = editor1  ; pointer to first list element (addr) (2 bytes)
=$20					ed_cur	 = editor2  ; current line number (1 is first line) (2 bytes)
=$22					ed_flags = editor3  ; Flags used by ed, where
.9a22					ed6502:
.9a22	ad 00 03	lda $0300			lda base
.9a25	85 23		sta $23				sta editor3+1
.9a27	20 a9 b2	jsr $b2a9			jsr Decimal
.9a2a	a9 00		lda #$00			lda #0
.9a2c	85 1e		sta $1e				sta ed_head
.9a2e	85 1f		sta $1f				sta ed_head+1
.9a30	85 20		sta $20				sta ed_cur
.9a32	85 21		sta $21				sta ed_cur+1
.9a34	85 22		sta $22				sta ed_flags
.9a36	20 ff b8	jsr $b8ff			jsr Zero
.9a39	20 ff b8	jsr $b8ff			jsr Zero		; ( addr-t u-t )
.9a3c	20 28 ac	jsr $ac28			jsr CR
.9a3f					ed_input_loop:
.9a3f	a9 7e		lda #$7e			lda #$ff-%10000001
.9a41	25 22		and $22				and ed_flags
.9a43	85 22		sta $22				sta ed_flags
.9a45	20 e7 9e	jsr $9ee7			jsr ed_get_input
.9a48	a5 06		lda $06				lda ciblen+0
.9a4a	d0 1e		bne $9a6a			bne _command_mode
.9a4c	a5 20		lda $20				lda ed_cur+0
.9a4e	a4 21		ldy $21				ldy ed_cur+1
.9a50	20 be b8	jsr $b8be			jsr PushYA		; ( addr-t u-t u )
.9a53	a9 80		lda #$80			lda #%10000000
.9a55	05 22		ora $22				ora ed_flags
.9a57	85 22		sta $22				sta ed_flags
.9a59	20 65 cb	jsr $cb65			jsr One_Plus		; ( addr-t u-t u+1 )
.9a5c	20 02 9f	jsr $9f02			jsr ed_is_valid_line
.9a5f	b0 03		bcs $9a64			bcs +
.9a61	4c d7 9e	jmp $9ed7			jmp ed_error_1drop	; New line number is not legal, abort
.9a64					+
.9a64	20 ff b8	jsr $b8ff			jsr Zero		; ( addr-t u-t u+1 0 )
.9a67	4c 29 9b	jmp $9b29			jmp _line_number_only_from_external
.9a6a					_command_mode:
.9a6a	20 ff b8	jsr $b8ff			jsr Zero		; parameter 1 is NOS ( addr-t u-t 0 )
.9a6d	20 ff b8	jsr $b8ff			jsr Zero		; parameter 2 is TOS ( addr-t u-t 0 0 )
.9a70	a0 00		ldy #$00			ldy #0			; get char
.9a72	b1 04		lda ($04),y			lda (cib),y
.9a74	c9 2e		cmp #$2e			cmp #'.'
.9a76	d0 31		bne $9aa9			bne _prefix_dollar
.9a78	20 f6 9e	jsr $9ef6			jsr ed_have_text
.9a7b	a5 20		lda $20				lda ed_cur
.9a7d	95 26		sta $26,x			sta DStack+2,x
.9a7f	a5 21		lda $21				lda ed_cur+1
.9a81	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9a83	a9 80		lda #$80			lda #%10000000
.9a85	05 22		ora $22				ora ed_flags
.9a87	85 22		sta $22				sta ed_flags
.9a89	a5 06		lda $06				lda ciblen
.9a8b	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9a8d	d0 03		bne $9a92			bne +
.9a8f	4c 29 9b	jmp $9b29			jmp _line_number_only_from_external
.9a92					+
.9a92	a5 04		lda $04				lda cib+0
.9a94	a4 05		ldy $05				ldy cib+1
.9a96	20 be b8	jsr $b8be			jsr PushYA
.9a99	a5 06		lda $06				lda ciblen+0
.9a9b	a4 07		ldy $07				ldy ciblen+1
.9a9d	20 be b8	jsr $b8be			jsr PushYA
.9aa0	20 3f cb	jsr $cb3f			jsr One_Minus		; ( addr-t u-t para1 0 addr u-1 )
.9aa3	20 6f cb	jsr $cb6f			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr+1 u-1 )
.9aa6	4c 7b 9b	jmp $9b7b			jmp _check_for_para2
.9aa9					_prefix_dollar:
.9aa9	c9 24		cmp #$24			cmp #'$'
.9aab	d0 1f		bne $9acc			bne _prefix_percent
.9aad	20 f6 9e	jsr $9ef6			jsr ed_have_text
.9ab0	e8		inx				inx
.9ab1	e8		inx				inx			; ( addr-t u-t 0 )
.9ab2	20 23 9f	jsr $9f23			jsr ed_last_line	; ( addr-t u-t 0 para1 )
.9ab5	20 a3 d0	jsr $d0a3			jsr Swap		; ( addr-t u-t para1 0 )
.9ab8	a9 80		lda #$80			lda #%10000000
.9aba	05 22		ora $22				ora ed_flags
.9abc	85 22		sta $22				sta ed_flags
.9abe	a5 06		lda $06				lda ciblen
.9ac0	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9ac2	d0 03		bne $9ac7			bne +
.9ac4	4c 29 9b	jmp $9b29			jmp _line_number_only_from_external
.9ac7					+
.9ac7	a0 01		ldy #$01			ldy #1
.9ac9	4c f1 9b	jmp $9bf1			jmp _check_command
.9acc					_prefix_percent:
.9acc	c9 25		cmp #$25			cmp #'%'
.9ace	f0 04		beq $9ad4			beq _whole_text
.9ad0	c9 2c		cmp #$2c			cmp #','
.9ad2	d0 1b		bne $9aef			bne _prefix_semicolon
.9ad4					_whole_text:
.9ad4	20 f6 9e	jsr $9ef6			jsr ed_have_text
.9ad7	a9 01		lda #$01			lda #1
.9ad9	95 26		sta $26,x			sta DStack+2,x		; LSB of NOS is para 1
.9adb	a9 00		lda #$00			lda #0
.9add	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t para1 0 )
.9adf					_semicolon_entry:
.9adf	e8		inx				inx
.9ae0	e8		inx				inx			; DROP ( addr-t u-t para1 )
.9ae1	20 23 9f	jsr $9f23			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9ae4	a9 80		lda #$80			lda #%10000000
.9ae6	05 22		ora $22				ora ed_flags
.9ae8	85 22		sta $22				sta ed_flags
.9aea	a0 01		ldy #$01			ldy #1
.9aec	4c f1 9b	jmp $9bf1			jmp _check_command
.9aef					_prefix_semicolon:
.9aef	c9 3b		cmp #$3b			cmp #';'
.9af1	d0 0e		bne $9b01			bne _prefix_number
.9af3	20 f6 9e	jsr $9ef6			jsr ed_have_text
.9af6	a5 20		lda $20				lda ed_cur
.9af8	95 26		sta $26,x			sta DStack+2,x
.9afa	a5 21		lda $21				lda ed_cur+1
.9afc	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9afe	4c df 9a	jmp $9adf			jmp _semicolon_entry
.9b01					_prefix_number:
.9b01	20 ff b8	jsr $b8ff			jsr Zero
.9b04	20 ff b8	jsr $b8ff			jsr Zero		; ( addr-t u-t 0 0 0 0 )
.9b07	a5 04		lda $04				lda cib+0
.9b09	a4 05		ldy $05				ldy cib+1
.9b0b	20 be b8	jsr $b8be			jsr PushYA
.9b0e	a5 06		lda $06				lda ciblen+0
.9b10	a4 07		ldy $07				ldy ciblen+1
.9b12	20 be b8	jsr $b8be			jsr PushYA		; ( addr-t u-t 0 0 0 0 cib ciblen )
.9b15	20 2a b1	jsr $b12a			jsr To_Number		; ( addr-t u-t 0 0 ud addr2 u2 )
.9b18	b5 24		lda $24,x			lda DStack+0,x
.9b1a	15 25		ora $25,x			ora DStack+1,x
.9b1c	d0 25		bne $9b43			bne _have_unconverted_chars
.9b1e	20 0a c6	jsr $c60a			jsr Two_Drop		; ( addr-t u-t 0 0 ud )
.9b21	20 37 c1	jsr $c137			jsr D_To_S		; ( addr-t u-t 0 0 u )
.9b24	20 af cf	jsr $cfaf			jsr Not_Rot		; ( addr-t u-t u 0 0 )
.9b27	e8		inx				inx
.9b28	e8		inx				inx			; ( addr-t u-t u 0 ) drop through
.9b29					_line_number_only_from_external:
.9b29	20 a3 d0	jsr $d0a3			jsr Swap		; ( addr-t u-t 0 u )
.9b2c	20 02 9f	jsr $9f02			jsr ed_is_valid_line
.9b2f	b0 03		bcs $9b34			bcs +
.9b31	4c d5 9e	jmp $9ed5			jmp ed_error_2drop
.9b34					+
.9b34	20 a3 d0	jsr $d0a3			jsr Swap		; ( addr-t u-t u 0 )
.9b37	20 62 9f	jsr $9f62			jsr ed_para1_to_cur
.9b3a	a9 80		lda #$80			lda #%10000000
.9b3c	05 22		ora $22				ora ed_flags
.9b3e	85 22		sta $22				sta ed_flags
.9b40	4c c0 9d	jmp $9dc0			jmp ed_cmd_p_from_external
.9b43					_have_unconverted_chars:
.9b43	a5 06		lda $06				lda ciblen+0
.9b45	d5 24		cmp $24,x			cmp DStack+0,x
.9b47	d0 16		bne $9b5f			bne _no_command_yet
.9b49	a5 07		lda $07				lda ciblen+1
.9b4b	d5 25		cmp $25,x			cmp DStack+1,x
.9b4d	d0 10		bne $9b5f			bne _no_command_yet
.9b4f	8a		txa				txa
.9b50	18		clc				clc
.9b51	69 08		adc #$08			adc #8
.9b53	aa		tax				tax			; ( addr-t u-t 0 0 )
.9b54	a9 7f		lda #$7f			lda #$ff-%10000000
.9b56	25 22		and $22				and ed_flags
.9b58	85 22		sta $22				sta ed_flags
.9b5a	a0 00		ldy #$00			ldy #0
.9b5c	4c f1 9b	jmp $9bf1			jmp _check_command
.9b5f					_no_command_yet:
.9b5f	20 0a d0	jsr $d00a			jsr To_R		; >R ( ... 0 0 ud addr2 ) (R: u2)
.9b62	20 af cf	jsr $cfaf			jsr Not_Rot		; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.9b65	20 37 c1	jsr $c137			jsr D_To_S		; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.9b68	b5 24		lda $24,x			lda DStack+0,x		; LSB
.9b6a	95 2a		sta $2a,x			sta DStack+6,x
.9b6c	b5 25		lda $25,x			lda DStack+1,x		; MSB
.9b6e	95 2b		sta $2b,x			sta DStack+7,x		; ( ... para1 0 addr2 para1 ) (R: u2)
.9b70	e8		inx				inx
.9b71	e8		inx				inx			; ( addr-t u-t para1 0 addr2 ) (R: u2)
.9b72	20 29 d0	jsr $d029			jsr R_From		; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.9b75	a9 80		lda #$80			lda #%10000000
.9b77	05 22		ora $22				ora ed_flags
.9b79	85 22		sta $22				sta ed_flags
.9b7b					_check_for_para2:
.9b7b	a1 26		lda ($26,x)			lda (DStack+2,x)
.9b7d	c9 2c		cmp #$2c			cmp #','
.9b7f	f0 0c		beq $9b8d			beq _got_comma
.9b81	38		sec				sec
.9b82	a5 06		lda $06				lda ciblen
.9b84	f5 24		sbc $24,x			sbc DStack+0,x
.9b86	a8		tay				tay
.9b87	20 0a c6	jsr $c60a			jsr Two_Drop		; Remove the leftover stuff from >NUMBER
.9b8a	4c f1 9b	jmp $9bf1			jmp _check_command
.9b8d					_got_comma:
.9b8d	20 6f cb	jsr $cb6f			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr2+1 u2 )
.9b90	20 3f cb	jsr $cb3f			jsr One_Minus		; ( addr-t u-t para1 0 addr2+1 u2-1 )
.9b93	a1 26		lda ($26,x)			lda (DStack+2,x)
.9b95	c9 24		cmp #$24			cmp #'$'
.9b97	d0 16		bne $9baf			bne _para2_not_dollar
.9b99	38		sec				sec
.9b9a	a5 06		lda $06				lda ciblen
.9b9c	f5 26		sbc $26,x			sbc DStack+2,x
.9b9e	a8		tay				tay
.9b9f	c8		iny				iny
.9ba0	98		tya				tya
.9ba1	48		pha				pha
.9ba2	8a		txa				txa
.9ba3	18		clc				clc
.9ba4	69 06		adc #$06			adc #6
.9ba6	aa		tax				tax			; ( addr-t u-t para1 )
.9ba7	20 23 9f	jsr $9f23			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9baa	68		pla				pla
.9bab	a8		tay				tay
.9bac	4c f1 9b	jmp $9bf1			jmp _check_command
.9baf					_para2_not_dollar:
.9baf	20 0a d0	jsr $d00a			jsr To_R		; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.9bb2	20 ff b8	jsr $b8ff			jsr Zero		; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.9bb5	20 ff b8	jsr $b8ff			jsr Zero		; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.9bb8	20 89 cf	jsr $cf89			jsr Rot		; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.9bbb	20 29 d0	jsr $d029			jsr R_From		; R> ( ... para1 0 0 0 addr2+1 u2-1)
.9bbe	20 85 d0	jsr $d085			jsr Dup		; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.9bc1	20 0a d0	jsr $d00a			jsr To_R		; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.9bc4	20 2a b1	jsr $b12a			jsr To_Number	; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.9bc7	20 85 d0	jsr $d085			jsr Dup		; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.9bca	20 29 d0	jsr $d029			jsr R_From		; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.9bcd	20 2d c9	jsr $c92d			jsr Equal		; = ( ... para1 0 ud addr3 u3 f )
.9bd0	b5 24		lda $24,x			lda DStack+0,x
.9bd2	15 25		ora $25,x			ora DStack+1,x
.9bd4	f0 08		beq $9bde			beq _second_number
.9bd6	8a		txa				txa
.9bd7	18		clc				clc
.9bd8	69 0c		adc #$0c			adc #12
.9bda	aa		tax				tax			; back to ( addr-t u-t )
.9bdb	4c d9 9e	jmp $9ed9			jmp ed_error
.9bde					_second_number:
.9bde	e8		inx				inx
.9bdf	e8		inx				inx			; ( addr-t u-t para1 0 ud addr3 u3 )
.9be0	38		sec				sec
.9be1	a5 06		lda $06				lda ciblen
.9be3	f5 24		sbc $24,x			sbc DStack+0,x
.9be5	48		pha				pha
.9be6	20 0a c6	jsr $c60a			jsr Two_drop		; 2DROP ( addr-t u-t para1 0 ud )
.9be9	20 37 c1	jsr $c137			jsr D_To_S		; D>S  ( addr-t u-t para1 0 para2 )
.9bec	20 91 ca	jsr $ca91			jsr Nip			; NIP ( addr-t u-t para1 para2 )
.9bef	68		pla				pla
.9bf0	a8		tay				tay
.9bf1					_check_command:
.9bf1	24 22		bit $22				bit ed_flags
.9bf3	30 08		bmi $9bfd			bmi _check_command_have_arg
.9bf5	a5 20		lda $20				lda ed_cur+0
.9bf7	95 26		sta $26,x			sta DStack+2,x
.9bf9	a5 21		lda $21				lda ed_cur+1
.9bfb	95 27		sta $27,x			sta DStack+3,x
.9bfd					_check_command_have_arg:
.9bfd	b1 04		lda ($04),y			lda (cib),y		; get mystery char from input
.9bff	85 14		sta $14				sta tmp1+0
.9c01	85 15		sta $15				sta tmp1+1		; We need X for awhile, so it has to
.9c03	a2 ff		ldx #$ff			ldx #$ff		; for each char
.9c05	e8		inx		_cmd_loop:	inx			;   next char
.9c06	bd 86 9f	lda $9f86,x			lda ed_cmd_list,x
.9c09	f0 13		beq $9c1e			beq _illegal_command	;   end of list?
.9c0b	c5 14		cmp $14				cmp tmp1+0
.9c0d	d0 f6		bne $9c05			bne _cmd_loop		;   not found?
.9c0f	8a		txa				txa
.9c10	0a		asl a				asl
.9c11	aa		tax				tax			; X * 2 for table
.9c12	bd 92 9f	lda $9f92,x			lda ed_cmd_table+1,x
.9c15	48		pha				pha
.9c16	bd 91 9f	lda $9f91,x			lda ed_Cmd_table+0,x
.9c19	48		pha				pha
.9c1a	a6 15		ldx $15				ldx tmp1+1		; restore X
.9c1c	08		php				php
.9c1d	40		rti				rti			; jump to command routine
.9c1e					_illegal_command:
.9c1e	4c d5 9e	jmp $9ed5			jmp ed_error_2drop
.9c21					ed_next_command:
.9c21	20 0a c6	jsr $c60a			jsr Two_Drop		; ( addr-t u-t ) Fall through
.9c24					_next_command_empty:
.9c24	4c 3f 9a	jmp $9a3f			jmp ed_input_loop
.9c27					ed_all_done:
.9c27	a9 00		lda #$00			lda #0
.9c29	85 06		sta $06				sta ciblen
.9c2b	85 07		sta $07				sta ciblen+1
.9c2d	20 0a c6	jsr $c60a			jsr Two_drop			; ( addr-t u-t )
.9c30	a5 23		lda $23				lda editor3+1
.9c32	8d 00 03	sta $0300			sta base
.9c35	60		rts				rts
.9c36					ed_cmd_a:
.9c36	e8		inx				inx
.9c37	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9c38					ed_entry_cmd_i:
.9c38					ed_cmd_a_have_para:
.9c38	20 47 9f	jsr $9f47			jsr ed_num_to_addr	  ;  ( addr-t u-t addr1 )
.9c3b	20 28 ac	jsr $ac28			jsr CR
.9c3e					_next_string_loop:
.9c3e	20 e7 9e	jsr $9ee7			jsr ed_get_input
.9c41	a0 00		ldy #$00			ldy #0
.9c43	b1 04		lda ($04),y			lda (cib),y
.9c45	c9 2e		cmp #$2e			cmp #'.'
.9c47	d0 18		bne $9c61			bne _add_line
.9c49	a4 06		ldy $06				ldy ciblen
.9c4b	c0 01		cpy #$01			cpy #1
.9c4d	d0 12		bne $9c61			bne _add_line
.9c4f	a4 07		ldy $07				ldy ciblen+1
.9c51	d0 0e		bne $9c61			bne _add_line
.9c53	e8		inx				inx
.9c54	e8		inx				inx
.9c55	a9 40		lda #$40			lda #%01000000
.9c57	05 22		ora $22				ora ed_flags
.9c59	85 22		sta $22				sta ed_flags
.9c5b	20 28 ac	jsr $ac28			jsr CR
.9c5e	4c 3f 9a	jmp $9a3f			jmp ed_input_loop
.9c61					_add_line:
.9c61	20 85 d0	jsr $d085			jsr Dup			; ( addr-t u-t addr1 addr1 )
.9c64	20 31 cb	jsr $cb31			jsr Here		; ( addr-t u-t addr1 addr1 here )
.9c67	20 a3 d0	jsr $d0a3			jsr Swap		; ( addr-t u-t addr1 here addr1 )
.9c6a	20 ef cf	jsr $cfef			jsr Fetch		; ( addr-t u-t addr1 here addr2 )
.9c6d	20 25 ce	jsr $ce25			jsr Comma		; ( addr-t u-t addr1 here )
.9c70	20 ea cd	jsr $cdea			jsr Tuck		; TUCK ( addr-t u-t here addr1 here )
.9c73	20 a3 d0	jsr $d0a3			jsr Swap		; ( addr-t u-t here here addr1 )
.9c76	20 d2 cf	jsr $cfd2			jsr Store		; ( addr-t u-t here )
.9c79	20 31 cb	jsr $cb31			jsr Here		; HERE ( addr-t u-t here here2)
.9c7c	a9 04		lda #$04			lda #4
.9c7e	20 f0 b8	jsr $b8f0			jsr PushZA
.9c81	20 d1 c1	jsr $c1d1			jsr Allot
.9c84	e6 20		inc $20				inc ed_cur
.9c86	d0 02		bne $9c8a			bne +
.9c88	e6 21		inc $21				inc ed_cur+1
.9c8a					+
.9c8a	20 31 cb	jsr $cb31			jsr Here	; ( addr-t u-t here here2 here3 )
.9c8d	a5 04		lda $04				lda cib+0
.9c8f	a4 05		ldy $05				ldy cib+1
.9c91	20 be b8	jsr $b8be			jsr PushYA	; ( addr-t u-t here here2 here3 cib )
.9c94	20 5c d0	jsr $d05c			jsr Over	; ( addr-t u-t here here2 here3 cib here3 )
.9c97	a5 06		lda $06				lda ciblen+0
.9c99	a4 07		ldy $07				ldy ciblen+1
.9c9b	20 be b8	jsr $b8be			jsr PushYA	; ( addr-t u-t here here2 here3 cib here3 ciblen )
.9c9e	20 4a ae	jsr $ae4a			jsr Move	; ( addr-t u-t here here2 here3 )
.9ca1	18		clc				clc
.9ca2	a5 00		lda $00				lda cp
.9ca4	65 06		adc $06				adc ciblen
.9ca6	85 00		sta $00				sta cp
.9ca8	90 06		bcc $9cb0			bcc +
.9caa	a5 01		lda $01				lda cp+1
.9cac	65 07		adc $07				adc ciblen+1
.9cae	85 01		sta $01				sta cp+1
.9cb0					+
.9cb0	20 5c d0	jsr $d05c			jsr Over		; ( addr-t u-t here here2 here3 here2 )
.9cb3	20 d2 cf	jsr $cfd2			jsr Store		; ( addr-t u-t here here2 )
.9cb6	20 12 cb	jsr $cb12			jsr Cell_Plus_NoUf	; ( addr-t u-t here here2+2 )
.9cb9	20 85 d0	jsr $d085			jsr Dup			; ( addr-t u-t here here2+2 here2+2 )
.9cbc	a5 06		lda $06				lda ciblen
.9cbe	95 26		sta $26,x			sta DStack+2,x
.9cc0	a5 07		lda $07				lda ciblen+1
.9cc2	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t here ciblen here2+2 )
.9cc4	20 d2 cf	jsr $cfd2			jsr Store		; ( addr-t u-t here )
.9cc7	20 28 ac	jsr $ac28			jsr CR			; Add a line feed for visuals
.9cca	4c 3e 9c	jmp $9c3e			jmp _next_string_loop
.9ccd					ed_cmd_d:
.9ccd	20 f6 9e	jsr $9ef6			jsr ed_have_text
.9cd0	20 39 9f	jsr $9f39			jsr ed_no_line_zero
.9cd3	b5 24		lda $24,x			lda DStack+0,x
.9cd5	15 25		ora $25,x			ora DStack+1,x
.9cd7	d0 09		bne $9ce2			bne +
.9cd9	20 5c d0	jsr $d05c			jsr Over		; ( addr-t u-t para1 0 para1 )
.9cdc	20 17 9d	jsr $9d17			jsr _cmd_d_common	; ( addr-t u-t para1 0 )
.9cdf	4c 0b 9d	jmp $9d0b			jmp _cmd_d_done
.9ce2					+
.9ce2	20 02 9f	jsr $9f02			jsr ed_is_valid_line	  ; result is in C flag
.9ce5	b0 03		bcs $9cea			bcs _cmd_d_loop
.9ce7	4c d5 9e	jmp $9ed5			jmp ed_error_2drop
.9cea					_cmd_d_loop:
.9cea	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9cec	d5 26		cmp $26,x			cmp DStack+2,x
.9cee	b5 25		lda $25,x			lda DStack+1,x
.9cf0	f5 27		sbc $27,x			sbc DStack+3,x
.9cf2	90 0c		bcc $9d00			bcc _cmd_d_done_with_flag
.9cf4	20 85 d0	jsr $d085			jsr Dup		; DUP ( addr-t u-t para1 para2 para2 )
.9cf7	20 17 9d	jsr $9d17			jsr _cmd_d_common	; ( addr-t u-t para1 para2 )
.9cfa	20 3f cb	jsr $cb3f			jsr One_minus	; 1- ( addr-t u-t para1 para2-1 )
.9cfd	4c ea 9c	jmp $9cea			jmp _cmd_d_loop
.9d00					_cmd_d_done_with_flag:
.9d00	20 4b cb	jsr $cb4b			jsr NOS_One_Minus
.9d03	b5 26		lda $26,x			lda DStack+2,x
.9d05	85 20		sta $20				sta ed_cur
.9d07	b5 27		lda $27,x			lda DStack+3,x
.9d09	85 21		sta $21				sta ed_cur+1		; drop through to _cmd_d_done
.9d0b					_cmd_d_done:
.9d0b	a9 40		lda #$40			lda #%01000000
.9d0d	05 22		ora $22				ora ed_flags
.9d0f	85 22		sta $22				sta ed_flags
.9d11	20 28 ac	jsr $ac28			jsr CR
.9d14	4c 21 9c	jmp $9c21			jmp ed_next_command
.9d17					_cmd_d_common:
.9d17	20 85 d0	jsr $d085			jsr Dup			; ( addr-t u-t u u )
.9d1a	20 47 9f	jsr $9f47			jsr ed_num_to_addr	; ( addr-t u-t u addr )
.9d1d	20 ef cf	jsr $cfef			jsr Fetch		; ( addr-t u-t u addr1 )
.9d20	20 a3 d0	jsr $d0a3			jsr Swap		; ( addr-t u-t addr1 u )
.9d23	20 3f cb	jsr $cb3f			jsr One_minus		; ( addr-t u-t addr1 u-1 )
.9d26	20 47 9f	jsr $9f47			jsr ed_num_to_addr	; ( addr-t u-t addr1 addr-1 )
.9d29	4c d2 cf	jmp $cfd2			jmp Store		; ( addr-t u-t )
.9d2c					ed_cmd_equ:
.9d2c	a5 1e		lda $1e				lda ed_head
.9d2e	05 1f		ora $1f				ora ed_head+1
.9d30	d0 06		bne $9d38			bne _cmd_equ_have_text
.9d32	20 ff b8	jsr $b8ff			jsr Zero		; ( addr-t u-t para1 para2 0 )
.9d35	4c 58 9d	jmp $9d58			jmp _cmd_equ_done
.9d38					_cmd_equ_have_text:
.9d38	20 39 9f	jsr $9f39			jsr ed_no_line_zero
.9d3b	24 22		bit $22				bit ed_flags
.9d3d	30 0a		bmi $9d49			bmi _cmd_equ_have_para
.9d3f	a5 20		lda $20				lda ed_cur+0		; ( addr-t u-t para1 para2 ? )
.9d41	a4 21		ldy $21				ldy ed_cur+1
.9d43	20 be b8	jsr $b8be			jsr PushYA
.9d46	4c 58 9d	jmp $9d58			jmp _cmd_equ_done	; ( addr-t u-t para1 para2 cur )
.9d49					_cmd_equ_have_para:
.9d49	b5 24		lda $24,x			lda DStack+0,x
.9d4b	15 25		ora $25,x			ora DStack+1,x
.9d4d	d0 06		bne $9d55			bne _cmd_equ_two_paras
.9d4f	20 5c d0	jsr $d05c			jsr Over		; ( addr-t u-t para1 para2 para1)
.9d52	4c 58 9d	jmp $9d58			jmp _cmd_equ_done
.9d55					_cmd_equ_two_paras:
.9d55	20 85 d0	jsr $d085			jsr Dup			; ( addr-t u-t para1 para2 para2) drop through
.9d58					_cmd_equ_done:
.9d58	20 28 ac	jsr $ac28			jsr CR			; number goes on new line
.9d5b	20 1e cd	jsr $cd1e			jsr U_Dot		; ( addr-t u-t para1 para2 )
.9d5e	20 28 ac	jsr $ac28			jsr CR
.9d61	4c 21 9c	jmp $9c21			jmp ed_next_command
.9d64					ed_cmd_f:
.9d64	24 22		bit $22				bit ed_flags
.9d66	30 18		bmi $9d80			bmi _cmd_f_have_para
.9d68	20 28 ac	jsr $ac28			jsr CR
.9d6b	20 0a d0	jsr $d00a			jsr To_R		; ( addr-t u-t 0 ) ( R: 0 )
.9d6e	20 89 cf	jsr $cf89			jsr Rot			; ( u-t 0 addr-t ) ( R: 0 )
.9d71	20 85 d0	jsr $d085			jsr Dup			; ( u-t 0 addr-t addr-t ) ( R: 0 )
.9d74	20 1e cd	jsr $cd1e			jsr U_Dot		; ( u-t 0 addr-t ) ( R: 0 )
.9d77	20 af cf	jsr $cfaf			jsr Not_Rot		; ( addr-t u-t 0 ) ( R: 0 )
.9d7a	20 29 d0	jsr $d029			jsr R_From		; ( addr-t u-t 0 0 )
.9d7d	4c 91 9d	jmp $9d91			jmp _cmd_f_done
.9d80					_cmd_f_have_para:
.9d80	20 5c d0	jsr $d05c			jsr Over
.9d83	20 28 ac	jsr $ac28			jsr CR
.9d86	20 1e cd	jsr $cd1e			jsr U_Dot
.9d89	b5 26		lda $26,x			lda DStack+2,x
.9d8b	95 2a		sta $2a,x			sta DStack+6,x
.9d8d	b5 27		lda $27,x			lda DStack+3,x
.9d8f	95 2b		sta $2b,x			sta DStack+7,x		; fall through to _cmd_f_done
.9d91					_cmd_f_done:
.9d91	20 28 ac	jsr $ac28			jsr CR
.9d94	4c 21 9c	jmp $9c21			jmp ed_next_command
.9d97					ed_cmd_i:
.9d97	e8		inx				inx
.9d98	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9d99	24 22		bit $22				bit ed_flags
.9d9b	30 08		bmi $9da5			bmi _cmd_i_have_para
.9d9d	a5 20		lda $20				lda ed_cur
.9d9f	95 24		sta $24,x			sta DStack+0,x
.9da1	a5 21		lda $21				lda ed_cur+1
.9da3	95 25		sta $25,x			sta DStack+1,x		;  ( addr-t u-t cur ) drop through
.9da5					_cmd_i_have_para:
.9da5	b5 24		lda $24,x			lda DStack+0,x
.9da7	15 25		ora $25,x			ora DStack+1,x
.9da9	f0 09		beq $9db4			beq _cmd_i_done
.9dab	20 3f cb	jsr $cb3f			jsr One_minus		; ( addr-t u-t para1-1 )
.9dae	20 ff b8	jsr $b8ff			jsr Zero		; ( addr-t u-t para1-1 0 )
.9db1	20 76 ca	jsr $ca76			jsr Max			; ( addr-t u-t para1-1 | 0 )
.9db4					_cmd_i_done:
.9db4	4c 38 9c	jmp $9c38			jmp ed_entry_cmd_i
.9db7					ed_cmd_n:
.9db7	a9 01		lda #$01			lda #%00000001
.9db9	05 22		ora $22				ora ed_flags
.9dbb	85 22		sta $22				sta ed_flags
.9dbd	4c c6 9d	jmp $9dc6			jmp ed_cmd_p_entry_for_cmd_n
.9dc0					ed_cmd_p:
.9dc0					ed_cmd_p_from_external:
.9dc0	a9 fe		lda #$fe			lda #$ff-%00000001
.9dc2	25 22		and $22				and ed_flags
.9dc4	85 22		sta $22				sta ed_flags
.9dc6					ed_cmd_p_entry_for_cmd_n:
.9dc6	20 f6 9e	jsr $9ef6			jsr ed_have_text
.9dc9	20 39 9f	jsr $9f39			jsr ed_no_line_zero
.9dcc	20 28 ac	jsr $ac28			jsr CR
.9dcf	b5 24		lda $24,x			lda DStack+0,x
.9dd1	15 25		ora $25,x			ora DStack+1,x
.9dd3	d0 11		bne $9de6			bne _cmd_p_loop
.9dd5	b5 26		lda $26,x			lda DStack+2,x
.9dd7	85 20		sta $20				sta ed_cur
.9dd9	b5 27		lda $27,x			lda DStack+3,x
.9ddb	85 21		sta $21				sta ed_cur+1
.9ddd	20 5c d0	jsr $d05c			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9de0	20 07 9e	jsr $9e07			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9de3	4c 04 9e	jmp $9e04			jmp _cmd_p_all_done
.9de6					_cmd_p_loop:
.9de6	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9de8	d5 26		cmp $26,x			cmp DStack+2,x
.9dea	b5 25		lda $25,x			lda DStack+1,x
.9dec	f5 27		sbc $27,x			sbc DStack+3,x
.9dee	90 0c		bcc $9dfc			bcc _cmd_p_done
.9df0	20 5c d0	jsr $d05c			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9df3	20 07 9e	jsr $9e07			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9df6	20 6f cb	jsr $cb6f			jsr NOS_One_Plus
.9df9	4c e6 9d	jmp $9de6			jmp _cmd_p_loop
.9dfc					_cmd_p_done:
.9dfc	b5 24		lda $24,x			lda DStack+0,x
.9dfe	85 20		sta $20				sta ed_cur
.9e00	b5 25		lda $25,x			lda DStack+1,x
.9e02	85 21		sta $21				sta ed_cur+1
.9e04					_cmd_p_all_done:
.9e04	4c 21 9c	jmp $9c21			jmp ed_next_command
.9e07					_cmd_p_common:
.9e07	a5 22		lda $22				lda ed_flags
.9e09	4a		lsr a				lsr			; bit 0 now in carry
.9e0a	90 0b		bcc $9e17			bcc _cmd_p_common_no_num
.9e0c	20 85 d0	jsr $d085			jsr Dup			; ( addr-t u-t para1 para1 )
.9e0f	20 1e cd	jsr $cd1e			jsr U_Dot		; ( addr-t u-t para1 )
.9e12	a9 09		lda #$09			lda #AscHT
.9e14	20 f3 ce	jsr $cef3			jsr Emit_A
.9e17					_cmd_p_common_no_num:
.9e17	20 47 9f	jsr $9f47			jsr ed_num_to_addr	  ; ( addr-t u-t addr )
.9e1a	4c 6b 9f	jmp $9f6b			jmp ed_print_addr
.9e1d					ed_cmd_q:
.9e1d	24 22		bit $22				bit ed_flags		; bit 6 is change flag
.9e1f	50 03		bvc $9e24			bvc +
.9e21	4c d5 9e	jmp $9ed5			jmp ed_error_2drop
.9e24					+
.9e24	4c 27 9c	jmp $9c27			jmp ed_all_done		   ; can't fall thru because of PLX
.9e27					ed_cmd_qq:
.9e27	4c 27 9c	jmp $9c27			jmp ed_all_done
.9e2a					ed_cmd_w:
.9e2a	20 f6 9e	jsr $9ef6			jsr ed_have_text
.9e2d	24 22		bit $22				bit ed_flags		; parameter given?
.9e2f	30 12		bmi $9e43			bmi _cmd_w_have_para
.9e31	b5 2b		lda $2b,x			lda DStack+7,x		; $0000 thru $00ff ?
.9e33	d0 03		bne $9e38			bne +
.9e35	4c d5 9e	jmp $9ed5			jmp ed_error_2drop
.9e38					+
.9e38	b5 2a		lda $2a,x			lda DStack+6,x
.9e3a	95 26		sta $26,x			sta DStack+2,x
.9e3c	b5 2b		lda $2b,x			lda DStack+7,x
.9e3e	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t addr-t ? )
.9e40	4c 4b 9e	jmp $9e4b			jmp _cmd_w_para_ready
.9e43					_cmd_w_have_para:
.9e43	b5 26		lda $26,x			lda DStack+2,x
.9e45	95 2a		sta $2a,x			sta DStack+6,x
.9e47	b5 27		lda $27,x			lda DStack+3,x
.9e49	95 2b		sta $2b,x			sta DStack+7,x		; drop through to _cmd_w_para_ready
.9e4b					_cmd_w_para_ready:
.9e4b	a9 1e		lda #$1e			lda #<ed_head
.9e4d	95 24		sta $24,x			sta DStack+0,x
.9e4f	a9 00		lda #$00			lda #>ed_head
.9e51	95 25		sta $25,x			sta DStack+1,x		; ( addr-t u-t addr-t addr-h )
.9e53	20 5c d0	jsr $d05c			jsr Over		; ( addr-t u-t addr-t addr-h addr-t )
.9e56	20 0a d0	jsr $d00a			jsr To_R		; ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.9e59					_cmd_w_loop:
.9e59	20 ef cf	jsr $cfef			jsr Fetch		; ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.9e5c	b5 24		lda $24,x			lda DStack+0,x
.9e5e	15 25		ora $25,x			ora DStack+1,x
.9e60	f0 4d		beq $9eaf			beq _cmd_w_eol
.9e62	20 c9 cd	jsr $cdc9			jsr Two_dup		; ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.9e65	20 43 c7	jsr $c743			jsr Two_to_r		; ( addr-t addr-1 ) (R: ... )
.9e68	20 12 cb	jsr $cb12			jsr Cell_Plus_NoUf	; ( addr-t addr1+2 ) (R: ... )
.9e6b	20 85 d0	jsr $d085			jsr Dup			; ( addr-t addr1+2 addr1+2 ) ( R: ... )
.9e6e	20 ef cf	jsr $cfef			jsr Fetch		; ( addr-t addr1+2 addr-s ) ( R: ... )
.9e71	20 a3 d0	jsr $d0a3			jsr Swap		; ( addr-t addr-s addr1+2 ) ( R: ... )
.9e74	20 12 cb	jsr $cb12			jsr Cell_Plus_NoUf	; ( addr-t addr-s addr1+2 ) (R: ... )
.9e77	20 ef cf	jsr $cfef			jsr Fetch		; ( addr-t addr-s u-s ) ( R: ... )
.9e7a	20 af cf	jsr $cfaf			jsr Not_Rot		; ( u-s addr-t addr-s ) ( R: ... )
.9e7d	20 a3 d0	jsr $d0a3			jsr Swap		; ( u-s addr-s addr-t ) ( R: ... )
.9e80	20 89 cf	jsr $cf89			jsr Rot			; (addr-s addr-t u-s ) ( R: ... )
.9e83	20 85 d0	jsr $d085			jsr Dup			; (addr-s addr-t u-s u-s ) ( R: ... )
.9e86	20 0a d0	jsr $d00a			jsr To_R		; (addr-s addr-t u-s ) ( R: ... u-s )
.9e89	20 4a ae	jsr $ae4a			jsr Move		; ( )( R: addr-t addr-1 addr-t )
.9e8c	20 29 d0	jsr $d029			jsr R_From		; ( u-s )  ( R: addr-t addr-h addr-t )
.9e8f	20 1e c7	jsr $c71e			jsr Two_r_from		; ( u-s addr-t addr-h ) ( R: addr-t )
.9e92	20 af cf	jsr $cfaf			jsr Not_Rot		; ( addr-h u-s addr-t ) ( R: addr-t )
.9e95	20 b9 cc	jsr $ccb9			jsr Plus		; ( addr-h addr-t1 ) ( R: addr-t )
.9e98	20 85 d0	jsr $d085			jsr Dup			; ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.9e9b	a9 0a		lda #$0a			lda #AscLF
.9e9d	20 f0 b8	jsr $b8f0			jsr PushZA		; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.9ea0	20 a3 d0	jsr $d0a3			jsr Swap		; ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.9ea3	20 d2 cf	jsr $cfd2			jsr Store		; ( addr-h addr-t1 ) ( R: addr-t )
.9ea6	20 65 cb	jsr $cb65			jsr One_plus		; ( addr-h addr-t1+1 ) ( R: addr-t )
.9ea9	20 a3 d0	jsr $d0a3			jsr Swap		; ( addr-t1+1 addr-h ) ( R: addr-t )
.9eac	4c 59 9e	jmp $9e59			jmp _cmd_w_loop
.9eaf					_cmd_w_eol:
.9eaf	20 a3 d0	jsr $d0a3			jsr Swap		; ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.9eb2	20 29 d0	jsr $d029			jsr R_From		; ( addr-t u-t addr-n addr-tn addr-t )
.9eb5	20 d2 cc	jsr $ccd2			jsr Minus		; ( addr-t u-t addr-n u )
.9eb8	b5 24		lda $24,x			lda DStack+0,x
.9eba	95 28		sta $28,x			sta DStack+4,x
.9ebc	b5 25		lda $25,x			lda DStack+1,x
.9ebe	95 29		sta $29,x			sta DStack+5,x		; ( addr-t u addr-n u )
.9ec0	20 28 ac	jsr $ac28			jsr CR
.9ec3	20 85 d0	jsr $d085			jsr Dup			; ( addr-t u addr-n u u )
.9ec6	20 1e cd	jsr $cd1e			jsr U_Dot		; ( addr-t u addr-n u )
.9ec9	20 28 ac	jsr $ac28			jsr CR
.9ecc	a9 bf		lda #$bf			lda #$ff-%01000000
.9ece	25 22		and $22				and ed_flags
.9ed0	85 22		sta $22				sta ed_flags
.9ed2	4c 21 9c	jmp $9c21			jmp ed_next_command
.9ed5					ed_error_2drop:
.9ed5	e8		inx				inx			; Drop para2
.9ed6	e8		inx				inx
.9ed7					ed_error_1drop:
.9ed7	e8		inx				inx			; Drop para1
.9ed8	e8		inx				inx
.9ed9					ed_error:
.9ed9	20 28 ac	jsr $ac28			jsr CR
.9edc	a9 3f		lda #$3f			lda #'?'
.9ede	20 f3 ce	jsr $cef3			jsr Emit_A
.9ee1	20 28 ac	jsr $ac28			jsr CR
.9ee4	4c 3f 9a	jmp $9a3f			jmp ed_input_loop
.9ee7					ed_get_input:
.9ee7	20 80 c3	jsr $c380			jsr Refill		;  ( addr-t u-t f )
.9eea	b5 24		lda $24,x			lda DStack+0,x
.9eec	d0 05		bne $9ef3			bne +
.9eee	68		pla				pla
.9eef	68		pla				pla
.9ef0	4c d7 9e	jmp $9ed7			jmp ed_error_1drop
.9ef3					+
.9ef3	e8		inx				inx
.9ef4	e8		inx				inx
.9ef5	60		rts				rts
.9ef6					ed_have_text:
.9ef6	a5 1e		lda $1e				lda ed_head
.9ef8	05 1f		ora $1f				ora ed_head+1
.9efa	d0 05		bne $9f01			bne +
.9efc	68		pla				pla
.9efd	68		pla				pla
.9efe	4c d9 9e	jmp $9ed9			jmp ed_error
.9f01					+
.9f01	60		rts				rts
.9f02					ed_is_valid_line:
.9f02	38		sec				sec				; default is legal line number
.9f03	b5 24		lda $24,x			lda DStack+0,x
.9f05	15 25		ora $25,x			ora DStack+1,x
.9f07	f0 18		beq $9f21			beq _nope_zero	; ( n )
.9f09	20 85 d0	jsr $d085			jsr Dup				; ( n n )
.9f0c	20 23 9f	jsr $9f23			jsr ed_last_line		; ( n n last )
.9f0f	20 a3 d0	jsr $d0a3			jsr Swap			; ( n last n )
.9f12	20 63 c9	jsr $c963			jsr Less_Than			; ( n f )
.9f15	b5 24		lda $24,x			lda DStack+0,x			; 0 flag is good
.9f17	15 25		ora $25,x			ora DStack+1,x
.9f19	d0 04		bne $9f1f			bne _too_small
.9f1b	e8		inx				inx
.9f1c	e8		inx				inx			; DROP flag ( n )
.9f1d	38		sec				sec			; signal valid
.9f1e	60		rts				rts
.9f1f					_too_small:
.9f1f	e8		inx				inx
.9f20	e8		inx				inx
.9f21					_nope_zero:
.9f21	18		clc				clc			; signal not valid
.9f22	60		rts				rts
.9f23					ed_last_line:
.9f23	20 ff b8	jsr $b8ff			jsr Zero		; Set counter to zero
.9f26	a9 1e		lda #$1e			lda #ed_head
.9f28	20 f0 b8	jsr $b8f0			jsr PushZA		; ( count addr )
.9f2b					_loop:
.9f2b	20 ef cf	jsr $cfef			jsr Fetch		; ( count addr|0 )
.9f2e	b5 25		lda $25,x			lda DStack+1,x		; at end-of-list?
.9f30	f0 06		beq $9f38			beq _done
.9f32	20 6f cb	jsr $cb6f			jsr NOS_One_Plus	; Increase counter
.9f35	4c 2b 9f	jmp $9f2b			jmp _loop		; continue
.9f38					_done:
.9f38	60		rts				rts
.9f39					ed_no_line_zero:
.9f39	b5 26		lda $26,x			lda DStack+2,x
.9f3b	15 27		ora $27,x			ora DStack+3,x
.9f3d	d0 07		bne $9f46			bne _done
.9f3f	24 22		bit $22				bit ed_flags
.9f41	10 03		bpl $9f46			bpl _done
.9f43	4c d5 9e	jmp $9ed5			jmp ed_error_2drop
.9f46					_done:
.9f46	60		rts				rts
.9f47					ed_num_to_addr:
.9f47	a9 1e		lda #$1e			lda #ed_head
.9f49	20 f0 b8	jsr $b8f0			jsr PushZA		; ( u addr-h )
.9f4c	4c 59 9f	jmp $9f59			jmp _test
.9f4f					_loop:
.9f4f	20 ef cf	jsr $cfef			jsr Fetch		; @ ( u addr1 )
.9f52	b5 25		lda $25,x			lda DStack+1,x		; at end of list?
.9f54	f0 09		beq $9f5f			beq _finished
.9f56	20 4b cb	jsr $cb4b			jsr NOS_One_Minus	; decrement the line count
.9f59	b5 26		lda $26,x	_test:		lda DStack+2,x		; is the nth element we're looking for?
.9f5b	15 27		ora $27,x			ora DStack+3,x
.9f5d	d0 f0		bne $9f4f			bne _loop
.9f5f					_finished:
.9f5f	4c 91 ca	jmp $ca91			jmp Nip			; ( addr )
.9f62					ed_para1_to_cur:
.9f62	b5 26		lda $26,x			lda DStack+2,x
.9f64	85 20		sta $20				sta ed_cur
.9f66	b5 27		lda $27,x			lda DStack+3,x
.9f68	85 21		sta $21				sta ed_cur+1
.9f6a	60		rts				rts
.9f6b					ed_print_addr:
.9f6b	20 0f cb	jsr $cb0f			jsr Cell_Plus		; ( addr+2 )
.9f6e	20 85 d0	jsr $d085			jsr Dup			; ( addr+2 addr+2 )
.9f71	20 0f cb	jsr $cb0f			jsr Cell_Plus		; ( addr+2 addr+4 )
.9f74	20 ef cf	jsr $cfef			jsr Fetch		; ( addr+2 u-s )
.9f77	20 a3 d0	jsr $d0a3			jsr Swap		; ( u-s addr+2 )
.9f7a	20 ef cf	jsr $cfef			jsr Fetch		; ( u-s addr-s )
.9f7d	20 a3 d0	jsr $d0a3			jsr Swap		; ( addr-s u-s )
.9f80	20 0d cf	jsr $cf0d			jsr Type
.9f83	4c 28 ac	jmp $ac28			jmp CR
>9f86	61 66 69 64 70 6e 3d 77		ed_cmd_list:	.text "afidpn=wqQ", 0
>9f8e	71 51 00
.9f91					ed_cmd_table:
>9f91	36 9c 64 9d 97 9d cd 9c				.word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>9f99	c0 9d b7 9d
>9f9d	2c 9d 2a 9e 1d 9e 27 9e				.word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.9fa5					ed6502_end:
>9fa5	53 65 65			L1:	.text "See"	;  name of word as a string, ending at wh_NameLastChar
>9fa8	a3					.byte (("See"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9fa9	9a 99					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fac	08					.byte NN	;wh_Flags	dictionary flags
=40744					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9fad					See:
.9fad	20 6c bd	jsr $bd6c			jsr Tick_Nt		; ( nt )
.9fb0	20 28 ac	jsr $ac28			jsr CR
.9fb3	ad 00 03	lda $0300			lda base		; Save the current number base
.9fb6	48		pha				pha
.9fb7	a9 28		lda #$28			lda #<str_see_nt	; print nt
.9fb9	a0 dc		ldy #$dc			ldy #>str_see_nt
.9fbb	20 28 cf	jsr $cf28			jsr Print_ASCIIZ_YA_no_lf
.9fbe	20 85 d0	jsr $d085			jsr Dup			; ( nt nt )
.9fc1	20 bd a9	jsr $a9bd			jsr Dot_Hex
.9fc4	20 00 cf	jsr $cf00			jsr Space		; ( nt )
.9fc7	20 85 d0	jsr $d085			jsr Dup			; ( nt nt )
.9fca	20 e8 be	jsr $bee8			jsr Name_To_Int		; ( nt xt )
.9fcd	a9 2e		lda #$2e			lda #<str_see_xt	; print xt
.9fcf	a0 dc		ldy #$dc			ldy #>str_see_xt
.9fd1	20 28 cf	jsr $cf28			jsr Print_ASCIIZ_YA_no_lf
.9fd4	20 85 d0	jsr $d085			jsr Dup			; ( nt xt xt )
.9fd7	20 bd a9	jsr $a9bd			jsr Dot_Hex
.9fda	20 28 ac	jsr $ac28			jsr CR			; ( nt xt )
.9fdd	a9 21		lda #$21			lda #<str_see_flags
.9fdf	a0 dc		ldy #$dc			ldy #>str_see_flags
.9fe1	20 28 cf	jsr $cf28			jsr Print_ASCIIZ_YA_no_lf
.9fe4	20 5c d0	jsr $d05c			jsr Over		; ( nt xt nt )
.9fe7	a9 84		lda #$84			lda #Wh_Flags
.9fe9	20 14 cb	jsr $cb14			jsr Plus_A		; ( nt xt ^flags )
.9fec	a1 24		lda ($24,x)			lda (DStack+0,x)	; ( nt xt ^flags )
.9fee	95 24		sta $24,x			sta DStack+0,x		; ( nt xt flags )
.9ff0	a0 0e		ldy #$0e			ldy #2*7		; for bit 7..0
.9ff2	20 00 cf	jsr $cf00	_flag_loop:	jsr Space
.9ff5	b9 59 a0	lda $a059,y			lda _FlagLabels+0,y	;   print label
.9ff8	20 f3 ce	jsr $cef3			jsr Emit_A
.9ffb	b9 5a a0	lda $a05a,y			lda _FlagLabels+1,y
.9ffe	20 f3 ce	jsr $cef3			jsr Emit_A
.a001	a9 3d		lda #$3d			lda #'='
.a003	20 f3 ce	jsr $cef3			jsr Emit_A
.a006	16 24		asl $24,x			asl DStack+0,x		;   c = flag, rotate the rest
.a008	a9 00		lda #$00			lda #0
.a00a	69 30		adc #$30			adc #'0'
.a00c	20 f3 ce	jsr $cef3			jsr Emit_A
.a00f	88		dey				dey
.a010	88		dey				dey
.a011	10 df		bpl $9ff2			bpl _flag_loop
.a013	e8		inx				inx
.a014	e8		inx				inx			; ( nt xt )
.a015	20 28 ac	jsr $ac28			jsr CR
.a018	a9 34		lda #$34			lda #<str_see_size	; print size
.a01a	a0 dc		ldy #$dc			ldy #>str_see_size
.a01c	20 28 cf	jsr $cf28			jsr Print_ASCIIZ_YA_no_lf
.a01f	20 a3 d0	jsr $d0a3			jsr Swap		; ( xt nt )
.a022	20 dc ab	jsr $abdc			jsr WordSize		; ( xt u )
.a025	20 a9 b2	jsr $b2a9			jsr Decimal
.a028	b5 24		lda $24,x			lda DStack+0,x		; if = 255
.a02a	c9 ff		cmp #$ff			cmp #$ff
.a02c	d0 11		bne $a03f			bne _size5
.a02e	20 cf b9	jsr $b9cf			jsr sliteral_runtime	;   type "large"
.a031	4c 39 a0	jmp $a039			  jmp _size2
>a034	6c 61 72 67 65					  .text "large"
.a039	20 0d cf	jsr $cf0d	_size2:		jsr Type
.a03c	4c 45 a0	jmp $a045			jmp _size9		;  else
.a03f	20 85 d0	jsr $d085	_size5:		jsr Dup			;    type size
.a042	20 1e cd	jsr $cd1e			jsr U_Dot
.a045					_size9:
.a045	20 28 ac	jsr $ac28			jsr CR
.a048	68		pla				pla			; restore base
.a049	8d 00 03	sta $0300			sta base
.a04c	20 c9 cd	jsr $cdc9			jsr Two_dup
.a04f	20 15 a9	jsr $a915			jsr Dump		; dump
.a052	20 28 ac	jsr $ac28			jsr CR
.a055	20 ab d9	jsr $d9ab			jsr DisAsm		; disassemble
=171					CL	.var *-(WordListLink+wh_Xt)
=$a058					en = *	; remember here
>9fab	ab					.byte CL	;wh_CodeLength
.a058	60		rts				rts
>a059	43 4f 41 4e 49 4d 4e 4e		_FlagLabels:	.text "COANIMNNUF__R6__"
>a061	55 46 5f 5f 52 36 5f 5f
>a069	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-WordList"	;  name of word as a string, ending at wh_NameLastChar
>a071	72 64 4c 69 73 74
>a077	8e					.byte (("Forth-WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a078	28 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a07a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a07b	08					.byte NN	;wh_Flags	dictionary flags
=40951					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a07c	4c ff b8	jmp $b8ff	Forth_WordList:	jmp Zero
=3					CL	.var *-(WordListLink+wh_Xt)
=$a07f					en = *	; remember here
>a07a	03					.byte CL	;wh_CodeLength
>a07f	45 64 69 74 6f 72 2d 57		L1:	.text "Editor-WordList"	;  name of word as a string, ending at wh_NameLastChar
>a087	6f 72 64 4c 69 73 74
>a08e	8f					.byte (("Editor-WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a08f	f7 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a091	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a092	08					.byte NN	;wh_Flags	dictionary flags
=40974					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a093					Editor_WordList:
.a093	4c 09 b9	jmp $b909			jmp One
=3					CL	.var *-(WordListLink+wh_Xt)
=$a096					en = *	; remember here
>a091	03					.byte CL	;wh_CodeLength
>a096	41 73 73 65 6d 62 6c 65		L1:	.text "Assembler-WordList"	;  name of word as a string, ending at wh_NameLastChar
>a09e	72 2d 57 6f 72 64 4c 69 73 74
>a0a8	92					.byte (("Assembler-WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0a9	0e a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0ac	08					.byte NN	;wh_Flags	dictionary flags
=41000					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0ad					Assembler_WordList:
.a0ad	4c 13 b9	jmp $b913			jmp Two
=3					CL	.var *-(WordListLink+wh_Xt)
=$a0b0					en = *	; remember here
>a0ab	03					.byte CL	;wh_CodeLength
>a0b0	52 6f 6f 74 2d 57 6f 72		L1:	.text "Root-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a0b8	64 6c 69 73 74
>a0bd	8d					.byte (("Root-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0be	28 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0c0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0c1	08					.byte NN	;wh_Flags	dictionary flags
=41021					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0c2	a9 03		lda #$03	Root_WordList:	lda #wid_Root
.a0c4	4c f0 b8	jmp $b8f0			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$a0c7					en = *	; remember here
>a0c0	05					.byte CL	;wh_CodeLength
>a0c7	4f 6e 6c 79			L1:	.text "Only"	;  name of word as a string, ending at wh_NameLastChar
>a0cb	24					.byte (("Only"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0cc	3d a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0cf	08					.byte NN	;wh_Flags	dictionary flags
=41035					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0d0	20 ce b8	jsr $b8ce	Only:		jsr True	; Push -1
.a0d3	4c 39 a2	jmp $a239			jmp Set_Order	; set the minimum search order.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a0d6					en = *	; remember here
>a0ce	06					.byte CL	;wh_CodeLength
>a0d6	41 6c 73 6f			L1:	.text "Also"	;  name of word as a string, ending at wh_NameLastChar
>a0da	e4					.byte (("Also"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0db	4b a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0de	08					.byte NN	;wh_Flags	dictionary flags
=41050					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0df	20 71 a2	jsr $a271	Also:		jsr Get_Order
.a0e2	20 5c d0	jsr $d05c			jsr Over
.a0e5	20 a3 d0	jsr $d0a3			jsr Swap
.a0e8	20 65 cb	jsr $cb65			jsr One_plus
.a0eb	4c 39 a2	jmp $a239			jmp Set_Order
=15					CL	.var *-(WordListLink+wh_Xt)
=$a0ee					en = *	; remember here
>a0dd	0f					.byte CL	;wh_CodeLength
>a0ee	50 72 65 76 69 6f 75 73		L1:	.text "Previous"	;  name of word as a string, ending at wh_NameLastChar
>a0f6	68					.byte (("Previous"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0f7	5a a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0f9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0fa	08					.byte NN	;wh_Flags	dictionary flags
=41078					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0fb	20 71 a2	jsr $a271	Previous:	jsr Get_Order
.a0fe	20 91 ca	jsr $ca91			jsr Nip
.a101	20 3f cb	jsr $cb3f			jsr One_minus
.a104	4c 39 a2	jmp $a239			jmp Set_Order
=12					CL	.var *-(WordListLink+wh_Xt)
=$a107					en = *	; remember here
>a0f9	0c					.byte CL	;wh_CodeLength
>a107	3e 4f 72 64 65 72		L1:	.text ">Order"	;  name of word as a string, ending at wh_NameLastChar
>a10d	46					.byte ((">Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a10e	76 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a110	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a111	08					.byte NN	;wh_Flags	dictionary flags
=41101					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a112					To_Order:
.a112	20 0a d0	jsr $d00a			jsr To_R		; Put the wid on the return stack for now.
.a115	20 71 a2	jsr $a271			jsr Get_Order		; Get the current search order.
.a118	20 29 d0	jsr $d029			jsr R_From		; Get back the wid and add it to the list.
.a11b	20 a3 d0	jsr $d0a3			jsr Swap
.a11e	20 65 cb	jsr $cb65			jsr One_plus
.a121	4c 39 a2	jmp $a239			jmp Set_Order		; Set the search order with the new list.
=18					CL	.var *-(WordListLink+wh_Xt)
=$a124					en = *	; remember here
>a110	12					.byte CL	;wh_CodeLength
>a124	4f 72 64 65 72			L1:	.text "Order"	;  name of word as a string, ending at wh_NameLastChar
>a129	45					.byte (("Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a12a	8d a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a12c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a12d	08					.byte NN	;wh_Flags	dictionary flags
=41129					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a12e					Order:
.a12e	20 28 ac	jsr $ac28			jsr CR
.a131	a0 00		ldy #$00			ldy #0			; for each search_orderV[]
.a133	f0 0b		beq $a140			beq _test
.a135	98		tya		_loop:		tya
.a136	48		pha				pha
.a137	b9 2b 03	lda $032b,y			lda Search_orderV,y
.a13a	20 4b a1	jsr $a14b			jsr order_print_wid_string   ; internal helper function
.a13d	68		pla				pla
.a13e	a8		tay				tay
.a13f	c8		iny				iny			;  next
.a140	cc 2a 03	cpy $032a	_test:		cpy Num_orderV
.a143	90 f0		bcc $a135			bcc _loop
.a145	20 28 ac	jsr $ac28			jsr CR
.a148	ad 10 03	lda $0310			lda CurrentV		; print the current wordlist.
.a14b					order_print_wid_string:
.a14b	c9 04		cmp #$04			cmp #wid_Root+1		; do we have a string?
.a14d	90 06		bcc $a155			bcc _string
.a14f	20 f0 b8	jsr $b8f0			jsr PushZA		; print the WID number
.a152	4c 1e cd	jmp $cd1e			jmp U_Dot		; JSR/RTS
.a155	0a		asl a		_string:	asl		; Get the string based on WID 0 to 3
.a156	a8		tay				tay
.a157	b9 63 a1	lda $a163,y			lda _wid_Table+0,y
.a15a	48		pha				pha
.a15b	b9 64 a1	lda $a164,y			lda _wid_Table+1,y
.a15e	a8		tay				tay
.a15f	68		pla				pla
.a160	4c 28 cf	jmp $cf28			jmp Print_ASCIIZ_YA_no_lf ; Print without a line feed
=53					CL	.var *-(WordListLink+wh_Xt)
=$a163					en = *	; remember here
>a12c	35					.byte CL	;wh_CodeLength
.a163					_wid_Table:
>a163	14 dc					.word str_wid_forth	       ; WID 0: "Forth"
>a165	0c dc					.word str_wid_editor	       ; WID 1: "Editor"
>a167	01 dc					.word str_wid_asm	       ; WID 2: "Assembler"
>a169	1b dc					.word str_wid_root	       ; WID 3: "Root"
>a16b	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
>a170	05					.byte (("Forth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a171	a9 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a173	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a174	08					.byte NN	;wh_Flags	dictionary flags
=41200					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a175	a9 00		lda #$00	Forth:		lda #wid_Forth
.a177	8d 2b 03	sta $032b			sta Search_OrderV+0
=5					CL	.var *-(WordListLink+wh_Xt)
=$a17a					en = *	; remember here
>a173	05					.byte CL	;wh_CodeLength
.a17a	60		rts				rts
>a17b	44 65 66 69 6e 69 74 69		L1:	.text "Definitions"	;  name of word as a string, ending at wh_NameLastChar
>a183	6f 6e 73
>a186	6b					.byte (("Definitions"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a187	f0 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a189	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a18a	08					.byte NN	;wh_Flags	dictionary flags
=41222					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a18b	ad 2b 03	lda $032b	Definitions:	lda Search_OrderV	; Transfer SEARCH_ORDER[0] to
.a18e	8d 10 03	sta $0310			sta CurrentV		;   byte variable CURRENT.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a191					en = *	; remember here
>a189	06					.byte CL	;wh_CodeLength
.a191	60		rts				rts
>a192	57 6f 72 64 4c 69 73 74		L1:	.text "WordList"	;  name of word as a string, ending at wh_NameLastChar
>a19a	88					.byte (("WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a19b	06 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a19d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a19e	08					.byte NN	;wh_Flags	dictionary flags
=41242					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a19f					WordList:
.a19f	ad 11 03	lda $0311			lda Num_wordlistsV	; Get the current number of wordlists
.a1a2	c9 0c		cmp #$0c			cmp #max_wordlists	; already at the max?
.a1a4	90 05		bcc $a1ab			bcc +
.a1a6	a9 66		lda #$66			lda #$100+err_TooManyWordlists	;   Print an error message
.a1a8	4c 6c b5	jmp $b56c			jmp ThrowA
.a1ab					+
.a1ab	ee 11 03	inc $0311			inc Num_WordlistsV	; increment wordlist count
.a1ae	4c f0 b8	jmp $b8f0			jmp PushZA		; and put it on the stack.
=18					CL	.var *-(WordListLink+wh_Xt)
=$a1b1					en = *	; remember here
>a19d	12					.byte CL	;wh_CodeLength
>a1b1	53 65 61 72 63 68 2d 57		L1:	.text "Search-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a1b9	6f 72 64 6c 69 73 74
>a1c0	8f					.byte (("Search-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a1c1	1a a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1c4	18					.byte UF+NN	;wh_Flags	dictionary flags
=41280					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1c5					Search_WordList:
.a1c5	20 27 b5	jsr $b527			jsr underflow_3
.a1c8	b5 24		lda $24,x			lda DStack+0,x		; Pop wid
.a1ca	e8		inx				inx
.a1cb	e8		inx				inx
.a1cc	48		pha				pha
.a1cd	20 15 be	jsr $be15			jsr fina_pattern_prepare ; tmp2 = pseudo-header for pattern name, zeros NOS
.a1d0	68		pla				pla			; pop wid
.a1d1	20 3f be	jsr $be3f			jsr fina_search_wordlist ; tmp1 = nt of matching word
.a1d4	f0 25		beq $a1fb			beq _fail
.a1d6	18		clc				clc
.a1d7	a5 14		lda $14				lda tmp1+0		; NOS = xt
.a1d9	69 85		adc #$85			adc #Wh_xt
.a1db	95 26		sta $26,x			sta DStack+2,x
.a1dd	a5 15		lda $15				lda tmp1+1
.a1df	69 00		adc #$00			adc #0
.a1e1	95 27		sta $27,x			sta DStack+3,x
.a1e3	a0 84		ldy #$84			ldy #Wh_Flags		; get flags
.a1e5	b1 14		lda ($14),y			lda (tmp1),y
.a1e7	29 04		and #$04			and #IM
.a1e9	d0 07		bne $a1f2			bne _immediate		; bit set, we're immediate
.a1eb	a9 ff		lda #$ff			lda #$FF		; We're not immediate, return -1
.a1ed	95 24		sta $24,x			sta DStack+0,x
.a1ef	95 25		sta $25,x			sta DStack+1,x
.a1f1	60		rts				rts
.a1f2					_immediate:
.a1f2	a9 01		lda #$01			lda #1			; We're immediate, return 1
.a1f4	95 24		sta $24,x			sta DStack+0,x
.a1f6	a9 00		lda #$00			lda #0
.a1f8	95 25		sta $25,x			sta DStack+1,x
.a1fa	60		rts				rts
.a1fb					_fail:
.a1fb	e8		inx				inx			; Drop u
.a1fc	e8		inx				inx
.a1fd	60		rts				rts
=57					CL	.var *-(WordListLink+wh_Xt)
=$a1fe					en = *	; remember here
>a1c3	39					.byte CL	;wh_CodeLength
>a1fe	53 65 74 2d 43 75 72 72		L1:	.text "Set-Current"	;  name of word as a string, ending at wh_NameLastChar
>a206	65 6e 74
>a209	8b					.byte (("Set-Current"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a20a	40 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a20c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a20d	00					.byte 0	;wh_Flags	dictionary flags
=41353					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a20e	20 c7 b4	jsr $b4c7	Set_Current:	jsr PopA	; pop wid
.a211	8d 10 03	sta $0310			sta CurrentV	; only the LSB is used.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a214					en = *	; remember here
>a20c	06					.byte CL	;wh_CodeLength
.a214	60		rts				rts
>a215	47 65 74 2d 43 75 72 72		L1:	.text "Get-Current"	;  name of word as a string, ending at wh_NameLastChar
>a21d	65 6e 74
>a220	8b					.byte (("Get-Current"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a221	89 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a223	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a224	08					.byte NN	;wh_Flags	dictionary flags
=41376					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a225					Get_Current:
.a225	ad 10 03	lda $0310			lda CurrentV
.a228	4c f0 b8	jmp $b8f0			jmp PushZA	; CURRENT is a byte variable
=6					CL	.var *-(WordListLink+wh_Xt)
=$a22b					en = *	; remember here
>a223	06					.byte CL	;wh_CodeLength
>a22b	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>a233	72
>a234	49					.byte (("Set-Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a235	a0 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a237	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a238	00					.byte 0	;wh_Flags	dictionary flags
=41396					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a239					Set_Order:
.a239	b5 25		lda $25,x			lda DStack+1,x		; Test for -1 TOS
.a23b	10 0b		bpl $a248			bpl _start
.a23d	a9 00		lda #$00			lda #0
.a23f	95 25		sta $25,x			sta DStack+1,x
.a241	a9 03		lda #$03			lda #wid_Root
.a243	95 24		sta $24,x			sta DStack+0,x
.a245	20 09 b9	jsr $b909			jsr One			; Count is 1.
.a248					_start:
.a248	b5 24		lda $24,x			lda DStack+0,x
.a24a	99 2a 03	sta $032a,y			sta Num_orderV,y	; #ORDER is a byte variable.
.a24d	85 14		sta $14				sta tmp1	; Save a copy for zero check and looping.
.a24f	e8		inx				inx		; Drop the count off the data stack.
.a250	e8		inx				inx
.a251	a5 14		lda $14				lda tmp1
.a253	f0 0d		beq $a262			beq _done	; If zero, there are no wordlists.
.a255	a0 00		ldy #$00			ldy #0
.a257					_loop:
.a257	20 c7 b4	jsr $b4c7			jsr PopA		; The search order is a byte array
.a25a	99 2b 03	sta $032b,y			sta Search_OrderV,y	; so only save the LSB
.a25d	c8		iny				iny
.a25e	c6 14		dec $14				dec tmp1
.a260	d0 f5		bne $a257			bne _loop
.a262					_done:
=41					CL	.var *-(WordListLink+wh_Xt)
=$a262					en = *	; remember here
>a237	29					.byte CL	;wh_CodeLength
.a262	60		rts				rts
>a263	47 65 74 2d 4f 72 64 65		L1:	.text "Get-Order"	;  name of word as a string, ending at wh_NameLastChar
>a26b	72
>a26c	49					.byte (("Get-Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a26d	b4 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a26f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a270	08					.byte NN	;wh_Flags	dictionary flags
=41452					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a271					Get_Order:
.a271	ac 2a 03	ldy $032a			ldy Num_OrderV	; Get #ORDER - the number of wordlists in the search order.
.a274	f0 09		beq $a27f			beq _done	; If zero, there are no wordlists.
.a276					_loop:
.a276	b9 2a 03	lda $032a,y			lda Search_OrderV-1,y	; Put that wordlist id on the stack.
.a279	20 f0 b8	jsr $b8f0			jsr PushZA
.a27c	88		dey				dey
.a27d	d0 f7		bne $a276			bne _loop		; See if that was the last one to process (first in the list).
.a27f					_done:
.a27f	ad 2a 03	lda $032a			lda Num_OrderV		; Push the number of items
.a282	4c f0 b8	jmp $b8f0			jmp PushZA
=20					CL	.var *-(WordListLink+wh_Xt)
=$a285					en = *	; remember here
>a26f	14					.byte CL	;wh_CodeLength
>0339					BlockReadV: .word ?	; Vector to block reading routine
>033b					BlockWriteV: .word ?	; Vector to block writing routine
>033d					BuffBlockNumV: .word ?	; Block number current in BlockBuffer
>033f					BuffStatusV: .word ?	; Status of BlockBuffer (bit 0 = used, bit 1 = dirty)
>0341					BlockBuffer: .fill 1024
.a285					BlockInit:
.a285	a9 00		lda #$00			lda #0
.a287	8d 3f 03	sta $033f			sta BuffStatusV
.a28a	a9 30		lda #$30			lda #<Platform_Block_Read
.a28c	a0 f1		ldy #$f1			ldy #>Platform_Block_Read
.a28e	8d 39 03	sta $0339			sta BlockReadV+0
.a291	8c 3a 03	sty $033a			sty BlockReadV+1
.a294	a9 30		lda #$30			lda #<Platform_Block_Write
.a296	a0 f1		ldy #$f1			ldy #>Platform_Block_Write
.a298	8d 3b 03	sta $033b			sta BlockWriteV+0
.a29b	8c 3c 03	sty $033c			sty BlockWriteV+1
.a29e	60		rts				rts
>0741					RamDriveV: .word ?	; ptr to RamDrive storage area
=0					io_blk_status = 0
=0					io_blk_action = 0
=0					io_blk_number = 0
=0					io_blk_buffer = 0
>a29f	42 6c 6f 63 6b 2d 52 61		L1:	.text "Block-RamDrive-Init"	;  name of word as a string, ending at wh_NameLastChar
>a2a7	6d 44 72 69 76 65 2d 49 6e 69 74
>a2b2	93					.byte (("Block-RamDrive-Init"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a2b3	ec a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a2b5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a2b6	18					.byte UF+NN	;wh_Flags	dictionary flags
=41522					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2b7					Block_RamDrive_Init:
.a2b7	a9 0a		lda #$0a			lda #10			; Calculate how many bytes are needed for numblocks blocks
.a2b9	20 f0 b8	jsr $b8f0			jsr PushZA
.a2bc	20 55 cc	jsr $cc55			jsr LShift
.a2bf	20 31 cb	jsr $cb31			jsr Here		; ( size addr )
.a2c2	8d 41 07	sta $0741			sta RamDriveV+0
.a2c5	8c 42 07	sty $0742			sty RamDriveV+1
.a2c8	20 5c d0	jsr $d05c			jsr Over
.a2cb	20 d1 c1	jsr $c1d1			jsr Allot		; Create ramdrive buffer
.a2ce	20 a3 d0	jsr $d0a3			jsr Swap		; blank the buffer
.a2d1	20 4a bf	jsr $bf4a			jsr Blank
.a2d4	a9 e9		lda #$e9			lda #<_read		; set block read vector
.a2d6	a0 a2		ldy #$a2			ldy #>_read
.a2d8	8d 39 03	sta $0339			sta BlockReadV+0
.a2db	8c 3a 03	sty $033a			sty BlockReadV+1
.a2de	a9 f9		lda #$f9			lda #<_write		; set block write vector
.a2e0	a0 a2		ldy #$a2			ldy #>_write
.a2e2	8d 3b 03	sta $033b			sta BlockWriteV+0
.a2e5	8c 3c 03	sty $033c			sty BlockWriteV+1
.a2e8	60		rts				rts
=50					CL	.var *-(WordListLink+wh_Xt)
=$a2e9					en = *	; remember here
>a2b5	32					.byte CL	;wh_CodeLength
.a2e9					_read:
.a2e9	20 06 a3	jsr $a306			jsr _addr
.a2ec	20 a3 d0	jsr $d0a3			jsr Swap
.a2ef	a9 00		lda #$00			lda #0
.a2f1	a0 04		ldy #$04			ldy #>1024
.a2f3	20 be b8	jsr $b8be			jsr PushYA
.a2f6	4c 4a ae	jmp $ae4a			jmp Move
.a2f9					_write:
.a2f9	20 06 a3	jsr $a306			jsr _addr
.a2fc	a9 00		lda #$00			lda #0
.a2fe	a0 04		ldy #$04			ldy #>1024
.a300	20 be b8	jsr $b8be			jsr PushYA
.a303	4c 4a ae	jmp $ae4a			jmp Move
.a306					_addr:
.a306	a9 0a		lda #$0a			lda #10
.a308	20 f0 b8	jsr $b8f0			jsr PushZA
.a30b	20 55 cc	jsr $cc55			jsr LShift
.a30e	20 21 a3	jsr $a321			jsr RamDrive
.a311	4c b9 cc	jmp $ccb9			jmp Plus
>a314	52 61 6d 44 72 69 76 65		L1:	.text "RamDrive"	;  name of word as a string, ending at wh_NameLastChar
>a31c	a8					.byte (("RamDrive"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a31d	32 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a31f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a320	08					.byte NN	;wh_Flags	dictionary flags
=41628					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a321	ad 41 07	lda $0741	RamDrive:	lda RamDriveV+0
.a324	ac 42 07	ldy $0742			ldy RamDriveV+1
.a327	4c be b8	jmp $b8be			jmp PushYA
=9					CL	.var *-(WordListLink+wh_Xt)
=$a32a					en = *	; remember here
>a31f	09					.byte CL	;wh_CodeLength
>a32a	42 75 66 66 53 74 61 74		L1:	.text "BuffStatus"	;  name of word as a string, ending at wh_NameLastChar
>a332	75 73
>a334	6a					.byte (("BuffStatus"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a335	9c a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a337	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a338	08					.byte NN	;wh_Flags	dictionary flags
=41652					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a339	a0 03		ldy #$03	BuffStatus:	ldy #>BuffStatusV
.a33b	a9 3f		lda #$3f			lda #<BuffStatusV
.a33d	4c be b8	jmp $b8be			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a340					en = *	; remember here
>a337	07					.byte CL	;wh_CodeLength
>a340	42 75 66 66 42 6c 6f 63		L1:	.text "BuffBlockNum"	;  name of word as a string, ending at wh_NameLastChar
>a348	6b 4e 75 6d
>a34c	ac					.byte (("BuffBlockNum"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a34d	b4 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a34f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a350	08					.byte NN	;wh_Flags	dictionary flags
=41676					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a351	a0 03		ldy #$03	BuffBlockNum:	ldy #>BuffBlockNumV
.a353	a9 3d		lda #$3d			lda #<BuffBlockNumV
.a355	4c be b8	jmp $b8be			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a358					en = *	; remember here
>a34f	07					.byte CL	;wh_CodeLength
>a358	42 6c 6b 42 75 66 66 65		L1:	.text "BlkBuffer"	;  name of word as a string, ending at wh_NameLastChar
>a360	72
>a361	49					.byte (("BlkBuffer"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a362	cc a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a364	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a365	08					.byte NN	;wh_Flags	dictionary flags
=41697					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a366	a0 03		ldy #$03	BlkBuffer:	ldy #>BlockBuffer
.a368	a9 41		lda #$41			lda #<BlockBuffer
.a36a	4c be b8	jmp $b8be			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a36d					en = *	; remember here
>a364	07					.byte CL	;wh_CodeLength
>a36d	53 63 72			L1:	.text "Scr"	;  name of word as a string, ending at wh_NameLastChar
>a370	43					.byte (("Scr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a371	e1 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a373	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a374	08					.byte NN	;wh_Flags	dictionary flags
=41712					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a375	a0 03		ldy #$03	Scr:		ldy #>ScrV
.a377	a9 0e		lda #$0e			lda #<ScrV
.a379	4c be b8	jmp $b8be			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a37c					en = *	; remember here
>a373	07					.byte CL	;wh_CodeLength
>a37c	42 6c 6b			L1:	.text "Blk"	;  name of word as a string, ending at wh_NameLastChar
>a37f	63					.byte (("Blk"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a380	f0 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a382	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a383	08					.byte NN	;wh_Flags	dictionary flags
=41727					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a384	a0 03		ldy #$03	Blk:		ldy #>BlkV
.a386	a9 0c		lda #$0c			lda #<BlkV
.a388	4c be b8	jmp $b8be			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a38b					en = *	; remember here
>a382	07					.byte CL	;wh_CodeLength
>a38b	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write"	;  name of word as a string, ending at wh_NameLastChar
>a393	69 74 65
>a396	ab					.byte (("Block-Write"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a397	ff a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a399	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a39a	08					.byte NN	;wh_Flags	dictionary flags
=41750					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a39b	6c 3b 03	jmp ($033b)	Block_Write:	jmp (BlockWriteV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-(WordListLink+wh_Xt)
=$a39e					en = *	; remember here
>a399	03					.byte CL	;wh_CodeLength
>a39e	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a3a6	69 74 65 2d 56 65 63 74 6f 72
>a3b0	52					.byte (("Block-Write-Vector"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a3b1	16 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3b3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3b4	08					.byte NN	;wh_Flags	dictionary flags
=41776					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3b5					Block_Write_Vector:
.a3b5	a0 03		ldy #$03			ldy #>BlockWriteV
.a3b7	a9 3b		lda #$3b			lda #<BlockWriteV	; Get the BLOCK-WRITE-VECTOR address
.a3b9	4c be b8	jmp $b8be			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a3bc					en = *	; remember here
>a3b3	07					.byte CL	;wh_CodeLength
>a3bc	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read"	;  name of word as a string, ending at wh_NameLastChar
>a3c4	61 64
>a3c6	8a					.byte (("Block-Read"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a3c7	30 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3c9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3ca	08					.byte NN	;wh_Flags	dictionary flags
=41798					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3cb	6c 39 03	jmp ($0339)	Block_Read:	jmp (BlockReadV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-(WordListLink+wh_Xt)
=$a3ce					en = *	; remember here
>a3c9	03					.byte CL	;wh_CodeLength
>a3ce	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a3d6	61 64 2d 56 65 63 74 6f 72
>a3df	51					.byte (("Block-Read-Vector"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a3e0	46 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3e3	08					.byte NN	;wh_Flags	dictionary flags
=41823					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3e4					Block_Read_Vector:
.a3e4	a0 03		ldy #$03			ldy #>BlockReadV
.a3e6	a9 39		lda #$39			lda #<BlockReadV	; Get the BLOCK-READ-VECTOR address
.a3e8	4c be b8	jmp $b8be			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a3eb					en = *	; remember here
>a3e2	07					.byte CL	;wh_CodeLength
>a3eb	53 61 76 65 2d 42 75 66		L1:	.text "Save-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a3f3	66 65 72 73
>a3f7	6c					.byte (("Save-Buffers"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a3f8	5f a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3fa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3fb	00					.byte 0	;wh_Flags	dictionary flags
=41847					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3fc					Save_Buffers:
.a3fc	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a3ff	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a401	d0 11		bne $a414			bne _done	; Either not used or not dirty = done!
.a403	20 66 a3	jsr $a366			jsr BlkBuffer
.a406	20 51 a3	jsr $a351			jsr BuffBlockNum
.a409	20 ef cf	jsr $cfef			jsr Fetch
.a40c	20 9b a3	jsr $a39b			jsr Block_Write
.a40f	a9 01		lda #$01			lda #1
.a411	8d 3f 03	sta $033f			sta BuffStatusV+0
.a414					_done:
=24					CL	.var *-(WordListLink+wh_Xt)
=$a414					en = *	; remember here
>a3fa	18					.byte CL	;wh_CodeLength
.a414	60		rts				rts
>a415	42 6c 6f 63 6b			L1:	.text "Block"	;  name of word as a string, ending at wh_NameLastChar
>a41a	65					.byte (("Block"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a41b	77 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a41d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a41e	00					.byte 0	;wh_Flags	dictionary flags
=41882					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a41f					Block:
.a41f	ad 3d 03	lda $033d			lda BuffBlockNumV+0	; check the LSB
.a422	d5 24		cmp $24,x			cmp DStack+0,x
.a424	d0 0e		bne $a434			bne _not_in_buffer
.a426	ad 3e 03	lda $033e			lda BuffBlockNumV+1	; check the MSB
.a429	d5 25		cmp $25,x			cmp DStack+1,x
.a42b	d0 07		bne $a434			bne _not_in_buffer
.a42d	ad 3f 03	lda $033f			lda BuffStatusV+0
.a430	29 01		and #$01			and #1		; Check the in-use flag (bit 0)
.a432	d0 2d		bne $a461			bne _done	; It's already in the buffer and in use.
.a434					_not_in_buffer:
.a434	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a437	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a439	d0 0c		bne $a447			bne _buffer_available ; Unused or not dirty = available
.a43b	20 66 a3	jsr $a366			jsr BlkBuffer
.a43e	20 51 a3	jsr $a351			jsr BuffBlockNum
.a441	20 ef cf	jsr $cfef			jsr Fetch
.a444	20 9b a3	jsr $a39b			jsr Block_Write
.a447					_buffer_available:
.a447	b5 24		lda $24,x			lda DStack+0,x
.a449	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a44c	b5 25		lda $25,x			lda DStack+1,x
.a44e	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a451	20 66 a3	jsr $a366			jsr BlkBuffer
.a454	20 a3 d0	jsr $d0a3			jsr Swap
.a457	20 cb a3	jsr $a3cb			jsr Block_Read
.a45a	a9 01		lda #$01			lda #1
.a45c	8d 3f 03	sta $033f			sta BuffStatusV+0
.a45f	ca		dex				dex
.a460	ca		dex				dex
.a461					_done:
.a461	a9 41		lda #$41			lda #<BlockBuffer
.a463	95 24		sta $24,x			sta DStack+0,x
.a465	a9 03		lda #$03			lda #>BlockBuffer
.a467	95 25		sta $25,x			sta DStack+1,x
=74					CL	.var *-(WordListLink+wh_Xt)
=$a469					en = *	; remember here
>a41d	4a					.byte CL	;wh_CodeLength
.a469	60		rts				rts
>a46a	55 70 64 61 74 65		L1:	.text "Update"	;  name of word as a string, ending at wh_NameLastChar
>a470	a6					.byte (("Update"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a471	9a a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a473	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a474	00					.byte 0	;wh_Flags	dictionary flags
=41968					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a475					Update:
.a475	ad 3f 03	lda $033f			lda BuffStatusV+0
.a478	09 02		ora #$02			ora #2		; Turn on dirty flag (bit 2)
.a47a	8d 3f 03	sta $033f			sta BuffStatusV+0
=8					CL	.var *-(WordListLink+wh_Xt)
=$a47d					en = *	; remember here
>a473	08					.byte CL	;wh_CodeLength
.a47d	60		rts				rts
>a47e	42 75 66 66 65 72		L1:	.text "Buffer"	;  name of word as a string, ending at wh_NameLastChar
>a484	46					.byte (("Buffer"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a485	f0 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a487	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a488	08					.byte NN	;wh_Flags	dictionary flags
=41988					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a489					Buffer:
.a489	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a48c	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a48e	d0 0c		bne $a49c			bne _buffer_available ; Unused or not dirty = available
.a490	20 66 a3	jsr $a366			jsr BlkBuffer
.a493	20 51 a3	jsr $a351			jsr BuffBlockNum
.a496	20 ef cf	jsr $cfef			jsr Fetch
.a499	20 9b a3	jsr $a39b			jsr Block_Write
.a49c					_buffer_available:
.a49c	b5 24		lda $24,x			lda DStack+0,x
.a49e	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a4a1	b5 25		lda $25,x			lda DStack+1,x
.a4a3	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a4a6	a9 01		lda #$01			lda #1
.a4a8	8d 3f 03	sta $033f			sta BuffStatusV+0
.a4ab					_done:
.a4ab	a9 41		lda #$41			lda #<BlockBuffer
.a4ad	95 24		sta $24,x			sta DStack+0,x
.a4af	a9 03		lda #$03			lda #>BlockBuffer
.a4b1	95 25		sta $25,x			sta DStack+1,x
=42					CL	.var *-(WordListLink+wh_Xt)
=$a4b3					en = *	; remember here
>a487	2a					.byte CL	;wh_CodeLength
.a4b3	60		rts				rts
>a4b4	45 6d 70 74 79 2d 42 75		L1:	.text "Empty-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a4bc	66 66 65 72 73
>a4c1	6d					.byte (("Empty-Buffers"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4c2	04 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4c4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4c5	08					.byte NN	;wh_Flags	dictionary flags
=42049					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4c6	a9 00		lda #$00	Empty_Buffers:	lda #0		; Set the buffer status to empty.
.a4c8	8d 3f 03	sta $033f			sta BuffStatusV+0 ; Only LSB is used.
=5					CL	.var *-(WordListLink+wh_Xt)
=$a4cb					en = *	; remember here
>a4c4	05					.byte CL	;wh_CodeLength
.a4cb	60		rts				rts
>a4cc	46 6c 75 73 68			L1:	.text "Flush"	;  name of word as a string, ending at wh_NameLastChar
>a4d1	05					.byte (("Flush"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4d2	41 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4d4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4d5	08					.byte NN	;wh_Flags	dictionary flags
=42065					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4d6	20 fc a3	jsr $a3fc	Flush:		jsr Save_Buffers
.a4d9	4c c6 a4	jmp $a4c6			jmp Empty_Buffers
=6					CL	.var *-(WordListLink+wh_Xt)
=$a4dc					en = *	; remember here
>a4d4	06					.byte CL	;wh_CodeLength
>a4dc	4c 6f 61 64			L1:	.text "Load"	;  name of word as a string, ending at wh_NameLastChar
>a4e0	84					.byte (("Load"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4e1	51 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4e3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4e4	10					.byte UF	;wh_Flags	dictionary flags
=42080					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4e5					Load:
.a4e5	20 0d b5	jsr $b50d			jsr underflow_1
.a4e8	ad 0d 03	lda $030d			lda BlkV+1		; Save the current value of BLK on the return stack.
.a4eb	48		pha				pha
.a4ec	ad 0c 03	lda $030c			lda BlkV+0
.a4ef	48		pha				pha
.a4f0	b5 24		lda $24,x			lda DStack+0,x		; Set BLK to the given block/screen number.
.a4f2	8d 0c 03	sta $030c			sta BlkV+0
.a4f5	b5 25		lda $25,x			lda DStack+1,x
.a4f7	8d 0d 03	sta $030d			sta BlkV+1
.a4fa	20 1f a4	jsr $a41f			jsr Block		; Load that block into a buffer
.a4fd	a9 00		lda #$00			lda #<1024		; block length.
.a4ff	a0 04		ldy #$04			ldy #>1024
.a501	20 be b8	jsr $b8be			jsr PushYA
.a504	38		sec				sec		; Set a flag to not zero BLK
.a505	20 e0 b0	jsr $b0e0			jsr load_evaluate
.a508	68		pla				pla
.a509	8d 0c 03	sta $030c			sta BlkV+0
.a50c	68		pla				pla
.a50d	8d 0d 03	sta $030d			sta BlkV+1
.a510	0d 0c 03	ora $030c			ora BlkV+0
.a513	f0 13		beq $a528			beq _done
.a515	ad 0c 03	lda $030c			lda BlkV+0
.a518	ac 0d 03	ldy $030d			ldy BlkV+1
.a51b	20 be b8	jsr $b8be			jsr PushYA
.a51e	20 1f a4	jsr $a41f			jsr Block
.a521	20 e3 b4	jsr $b4e3			jsr PopYA	; Pop the buffer address.
.a524	85 04		sta $04				sta cib+0
.a526	84 05		sty $05				sty cib+1
.a528					_done:
=67					CL	.var *-(WordListLink+wh_Xt)
=$a528					en = *	; remember here
>a4e3	43					.byte CL	;wh_CodeLength
.a528	60		rts				rts
>a529	54 68 72 75			L1:	.text "Thru"	;  name of word as a string, ending at wh_NameLastChar
>a52d	a4					.byte (("Thru"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a52e	60 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a530	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a531	18					.byte UF+NN	;wh_Flags	dictionary flags
=42157					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a532					Thru:
.a532	20 22 b5	jsr $b522			jsr underflow_2
.a535	20 0a d0	jsr $d00a			jsr To_R
.a538					_loop:
.a538	b5 25		lda $25,x			lda DStack+1,x		; copy to return stack
.a53a	48		pha				pha
.a53b	b5 24		lda $24,x			lda DStack+0,x
.a53d	48		pha				pha
.a53e	20 e5 a4	jsr $a4e5			jsr Load		; Load this screen.
.a541	20 29 d0	jsr $d029			jsr R_From		; Get the screen # we just loaded.
.a544	20 65 cb	jsr $cb65			jsr One_plus		; increment
.a547	86 14		stx $14				stx tmp1
.a549	ba		tsx				tsx
.a54a	8a		txa				txa
.a54b	a8		tay				tay
.a54c	a6 14		ldx $14				ldx tmp1
.a54e	b9 01 01	lda $0101,y			lda RStack+1,y
.a551	d5 24		cmp $24,x			cmp DStack+0,x
.a553	b9 02 01	lda $0102,y			lda RStack+2,y
.a556	f5 25		sbc $25,x			sbc DStack+1,x
.a558	b0 de		bcs $a538			bcs _loop
.a55a	e8		inx				inx			; Drop index
.a55b	e8		inx				inx
.a55c	68		pla				pla			; RDrop limit
.a55d	68		pla				pla
=44					CL	.var *-(WordListLink+wh_Xt)
=$a55e					en = *	; remember here
>a530	2c					.byte CL	;wh_CodeLength
.a55e	60		rts				rts
>a55f	4c 69 73 74			L1:	.text "List"	;  name of word as a string, ending at wh_NameLastChar
>a563	84					.byte (("List"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a564	ad a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a566	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a567	08					.byte NN	;wh_Flags	dictionary flags
=42211					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a568	20 e3 b4	jsr $b4e3	List:		jsr PopYA	; Save the screen number
.a56b	8d 0e 03	sta $030e			sta ScrV+0
.a56e	8c 0f 03	sty $030f			sty ScrV+1
.a571					ListScr:
.a571	20 75 a3	jsr $a375			jsr Scr
.a574	20 ef cf	jsr $cfef			jsr Fetch
.a577	20 1f a4	jsr $a41f			jsr Block	; Get the current screen contents.
.a57a	20 28 ac	jsr $ac28			jsr CR
.a57d	20 cf b9	jsr $b9cf			jsr SLiteral_Runtime
.a580	4c 8b a5	jmp $a58b			  jmp +				; for SLiteral_Runtime
>a583	53 63 72 65 65 6e 20 23				  .text "Screen #"		; for SLiteral_Runtime
.a58b					+
.a58b	20 0d cf	jsr $cf0d			jsr Type
.a58e	20 75 a3	jsr $a375			jsr Scr		; print screen number
.a591	20 ef cf	jsr $cfef			jsr Fetch
.a594	a9 04		lda #$04			lda #4		;    in 4 positions
.a596	20 52 cd	jsr $cd52			jsr U_Dot_R_A
.a599	a9 00		lda #$00			lda #0			; line #
.a59b					_line_loop:
.a59b	48		pha				pha
.a59c	20 28 ac	jsr $ac28			jsr CR
.a59f	68		pla				pla		; Print the line number
.a5a0	48		pha				pha
.a5a1	20 f0 b8	jsr $b8f0			jsr PushZA
.a5a4	a9 02		lda #$02			lda #2		;   in 2 positions
.a5a6	20 52 cd	jsr $cd52			jsr U_Dot_R_A
.a5a9	20 00 cf	jsr $cf00			jsr Space
.a5ac	20 85 d0	jsr $d085			jsr Dup		; Print one line using the address on the stack.
.a5af	a9 40		lda #$40			lda #64
.a5b1	20 f0 b8	jsr $b8f0			jsr PushZA
.a5b4	20 0d cf	jsr $cf0d			jsr Type
.a5b7	a9 40		lda #$40			lda #64		; move address to the next line.
.a5b9	20 14 cb	jsr $cb14			jsr Plus_A
.a5bc	68		pla				pla		; Increment the line number
.a5bd	18		clc				clc
.a5be	69 01		adc #$01			adc #1
.a5c0	c9 10		cmp #$10			cmp #16		; See if we are done.
.a5c2	d0 d7		bne $a59b			bne _line_loop
.a5c4	e8		inx				inx		; Drop the address
.a5c5	e8		inx				inx
.a5c6	4c 28 ac	jmp $ac28			jmp CR
=97					CL	.var *-(WordListLink+wh_Xt)
=$a5c9					en = *	; remember here
>a566	61					.byte CL	;wh_CodeLength
>a5c9	44 65 66 65 72			L1:	.text "Defer"	;  name of word as a string, ending at wh_NameLastChar
>a5ce	45					.byte (("Defer"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5cf	e3 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5d2	08					.byte NN	;wh_Flags	dictionary flags
=42318					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5d3					Defer:
.a5d3	20 2b c2	jsr $c22b			jsr Header_Comma	; compile word header
.a5d6	a9 e0		lda #$e0			lda #<_undefined	; compile "jmp _undefined"
.a5d8	a0 a5		ldy #$a5			ldy #>_undefined
.a5da	20 64 ce	jsr $ce64			jsr Jmp_Comma_YA
.a5dd	4c 03 bd	jmp $bd03			jmp adjust_z	; adjust header to correct length
=13					CL	.var *-(WordListLink+wh_Xt)
=$a5e0					en = *	; remember here
>a5d1	0d					.byte CL	;wh_CodeLength
.a5e0					_undefined:
.a5e0	a9 6a		lda #$6a			lda #$100+err_Defer	; throw exception
.a5e2	4c 6c b5	jmp $b56c			jmp ThrowA
>a5e5	44 65 66 65 72 40		L1:	.text "Defer@"	;  name of word as a string, ending at wh_NameLastChar
>a5eb	06					.byte (("Defer@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5ec	4e a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5ef	08					.byte NN	;wh_Flags	dictionary flags
=42347					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5f0					Defer_Fetch:
.a5f0	20 65 cb	jsr $cb65			jsr One_plus	; step over JMP opcode to operand
.a5f3	4c ef cf	jmp $cfef			jmp Fetch	; get JMP operand, return
=6					CL	.var *-(WordListLink+wh_Xt)
=$a5f6					en = *	; remember here
>a5ee	06					.byte CL	;wh_CodeLength
>a5f6	44 65 66 65 72 21		L1:	.text "Defer!"	;  name of word as a string, ending at wh_NameLastChar
>a5fc	26					.byte (("Defer!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5fd	6b a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5ff	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a600	08					.byte NN	;wh_Flags	dictionary flags
=42364					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a601					Defer_Store:
.a601	20 65 cb	jsr $cb65			jsr One_plus	; step over JMP opcode to operand
.a604	4c d2 cf	jmp $cfd2			jmp Store	; set JMP operand, return
=6					CL	.var *-(WordListLink+wh_Xt)
=$a607					en = *	; remember here
>a5ff	06					.byte CL	;wh_CodeLength
>a607	49 73				L1:	.text "Is"	;  name of word as a string, ending at wh_NameLastChar
>a609	62					.byte (("Is"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a60a	7c a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a60c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a60d	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42377					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a60e					Is:
.a60e	a5 0a		lda $0a				lda state		; Check STATE
.a610	f0 0a		beq $a61c			beq _interpreting
.a612					_compiling:
.a612	20 7a bd	jsr $bd7a			jsr Bracket_Tick	; compile the xt of the next word as a literal.
.a615	a0 a6		ldy #$a6			ldy #>Defer_Store	; Postpone DEFER! by compiling a JSR to it.
.a617	a9 01		lda #$01			lda #<Defer_Store
.a619	4c 4d ce	jmp $ce4d			jmp Jsr_Comma_YA
.a61c					_interpreting:
.a61c	20 66 bd	jsr $bd66			jsr Tick
.a61f	4c 01 a6	jmp $a601			jmp Defer_Store
=20					CL	.var *-(WordListLink+wh_Xt)
=$a622					en = *	; remember here
>a60c	14					.byte CL	;wh_CodeLength
>a622	41 63 74 69 6f 6e 2d 4f		L1:	.text "Action-Of"	;  name of word as a string, ending at wh_NameLastChar
>a62a	66
>a62b	c9					.byte (("Action-Of"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a62c	89 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a62e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a62f	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42411					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a630					Action_Of:
.a630	a5 0a		lda $0a				lda state		; Check STATE
.a632	f0 0a		beq $a63e			beq _interpreting
.a634					_compiling:
.a634	20 7a bd	jsr $bd7a			jsr Bracket_Tick	; compile the xt of the next word as a literal.
.a637	a0 a5		ldy #$a5			ldy #>Defer_Fetch	; Postpone DEFER@ by compiling a JSR to it.
.a639	a9 f0		lda #$f0			lda #<Defer_Fetch
.a63b	4c 4d ce	jmp $ce4d			jmp Jsr_Comma_YA
.a63e					_interpreting:
.a63e	20 66 bd	jsr $bd66			jsr Tick
.a641	4c f0 a5	jmp $a5f0			jmp Defer_Fetch
=20					CL	.var *-(WordListLink+wh_Xt)
=$a644					en = *	; remember here
>a62e	14					.byte CL	;wh_CodeLength
>a644	55 73 65 72 41 64 64 72		L1:	.text "UserAddr"	;  name of word as a string, ending at wh_NameLastChar
>a64c	48					.byte (("UserAddr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a64d	ab a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a64f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a650	08					.byte NN	;wh_Flags	dictionary flags
=42444					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a651	a0 02		ldy #$02	UserAddr:	ldy #>User0
.a653	a9 ff		lda #$ff			lda #<User0
.a655	4c be b8	jmp $b8be			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a658					en = *	; remember here
>a64f	07					.byte CL	;wh_CodeLength
>a658	42 75 66 66 65 72 3a		L1:	.text "Buffer:"	;  name of word as a string, ending at wh_NameLastChar
>a65f	47					.byte (("Buffer:"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a660	cc a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a662	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a663	08					.byte NN	;wh_Flags	dictionary flags
=42463					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a664	20 c8 c2	jsr $c2c8	Buffer_Colon:	jsr Create
.a667	4c d1 c1	jmp $c1d1			jmp Allot
=6					CL	.var *-(WordListLink+wh_Xt)
=$a66a					en = *	; remember here
>a662	06					.byte CL	;wh_CodeLength
>a66a	43 61 73 65			L1:	.text "Case"	;  name of word as a string, ending at wh_NameLastChar
>a66e	a4					.byte (("Case"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a66f	df a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a671	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a672	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42478					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a673					Case:
.a673	4c ff b8	jmp $b8ff			jmp Zero	; init jmp fixup chain
=3					CL	.var *-(WordListLink+wh_Xt)
=$a676					en = *	; remember here
>a671	03					.byte CL	;wh_CodeLength
>a676	45 6e 64 43 61 73 65		L1:	.text "EndCase"	;  name of word as a string, ending at wh_NameLastChar
>a67d	a7					.byte (("EndCase"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a67e	ee a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a680	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a681	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42493					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a682					EndCase:
.a682	20 3c ce	jsr $ce3c			jsr Drop_Comma
.a685					_loop:
.a685	b5 25		lda $25,x			lda DStack+1,x	; while addr fixup entries left
.a687	f0 06		beq $a68f			beq _done
.a689	20 08 a7	jsr $a708			jsr Then	;   fixup another one
.a68c	4c 85 a6	jmp $a685			jmp _loop
.a68f					_done:
.a68f	e8		inx				inx		; Drop the 0
.a690	e8		inx				inx
=15					CL	.var *-(WordListLink+wh_Xt)
=$a691					en = *	; remember here
>a680	0f					.byte CL	;wh_CodeLength
.a691	60		rts				rts
>a692	4f 66				L1:	.text "Of"	;  name of word as a string, ending at wh_NameLastChar
>a694	c2					.byte (("Of"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a695	fd a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a697	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a698	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42516					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a699					Of:
.a699	a0 a6		ldy #$a6			ldy #>_runtime		; Check if value is equal to this case.
.a69b	a9 ae		lda #$ae			lda #<_runtime
.a69d	20 4d ce	jsr $ce4d			jsr Jsr_Comma_YA
.a6a0	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a6a2	20 0e ce	jsr $ce0e			jsr C_Comma_A
.a6a5	20 31 cb	jsr $cb31			jsr Here		; Put the origination address on the stack for else/then
.a6a8	20 ff b8	jsr $b8ff			jsr Zero
.a6ab	4c 25 ce	jmp $ce25			jmp Comma
=21					CL	.var *-(WordListLink+wh_Xt)
=$a6ae					en = *	; remember here
>a697	15					.byte CL	;wh_CodeLength
.a6ae					_runtime:
.a6ae	e8		inx				inx		; Drop x2
.a6af	e8		inx				inx
.a6b0	b5 22		lda $22,x			lda DStack-2,x	; compare x1 with x2
.a6b2	d5 24		cmp $24,x			cmp DStack+0,x
.a6b4	d0 06		bne $a6bc			bne _NotEq
.a6b6	b5 23		lda $23,x			lda DStack-1,x
.a6b8	d5 25		cmp $25,x			cmp DStack+1,x
.a6ba	f0 33		beq $a6ef			beq zbranch_run2 ; Drop x1 & return to after the jmp abs
.a6bc	60		rts		_NotEq:		rts		; return to the jmp abs to next test
>a6bd	45 6e 64 4f 66			L1:	.text "EndOf"	;  name of word as a string, ending at wh_NameLastChar
>a6c2	c5					.byte (("EndOf"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a6c3	14 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6c5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6c6	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42562					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6c7	4c 1a a7	jmp $a71a	EndOf:		jmp Else
=3					CL	.var *-(WordListLink+wh_Xt)
=$a6ca					en = *	; remember here
>a6c5	03					.byte CL	;wh_CodeLength
>a6ca	49 66				L1:	.text "If"	;  name of word as a string, ending at wh_NameLastChar
>a6cc	c2					.byte (("If"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a6cd	42 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6cf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6d0	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42572					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6d1					If:
.a6d1	20 e2 a6	jsr $a6e2	If3:		jsr zbranch_jsr_comma	; Compile a 0BRANCH
.a6d4					zbranch_jmp0_comma:
.a6d4	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a6d6	20 0e ce	jsr $ce0e			jsr C_Comma_A
.a6d9	20 31 cb	jsr $cb31			jsr Here		; save ptr to address for else/then
.a6dc	a9 00		lda #$00			lda #0			; Stuff zero in for the branch address right now.
.a6de	a8		tay				tay			; THEN or ELSE will fix it later.
.a6df	4c 28 ce	jmp $ce28			jmp Comma_YA
=17					CL	.var *-(WordListLink+wh_Xt)
=$a6e2					en = *	; remember here
>a6cf	11					.byte CL	;wh_CodeLength
=$ce61					zbranch_jmp_comma = Jmp_Comma		; compile jmp abs
.a6e2					zbranch_jsr_comma:
.a6e2	a0 a6		ldy #$a6			ldy #>_runtime
.a6e4	a9 e9		lda #$e9			lda #<_runtime
.a6e6	4c 4d ce	jmp $ce4d			jmp Jsr_Comma_YA
.a6e9					_runtime:
.a6e9	b5 24		lda $24,x			lda DStack+0,x		;flag is false?
.a6eb	15 25		ora $25,x			ora DStack+1,x
.a6ed	f0 0d		beq $a6fc			beq zbranch_run_done
.a6ef	18		clc		zbranch_run2:	clc			; move RTS addr over the next jmp abs.
.a6f0	68		pla				pla
.a6f1	69 03		adc #$03			adc #3
.a6f3	90 06		bcc $a6fb			bcc +
.a6f5	a8		tay				tay
.a6f6	68		pla				pla
.a6f7	69 00		adc #$00			adc #0
.a6f9	48		pha				pha
.a6fa	98		tya				tya
.a6fb	48		pha		+		pha
.a6fc					zbranch_run_done:
.a6fc	e8		inx				inx			; Drop f
.a6fd	e8		inx				inx
.a6fe	60		rts				rts
>a6ff	54 68 65 6e			L1:	.text "Then"	;  name of word as a string, ending at wh_NameLastChar
>a703	c4					.byte (("Then"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a704	4c a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a706	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a707	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42627					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a708					Then:
.a708	20 31 cb	jsr $cb31			jsr Here
.a70b	20 a3 d0	jsr $d0a3			jsr Swap
.a70e	4c d2 cf	jmp $cfd2			jmp Store
=9					CL	.var *-(WordListLink+wh_Xt)
=$a711					en = *	; remember here
>a706	09					.byte CL	;wh_CodeLength
>a711	45 6c 73 65			L1:	.text "Else"	;  name of word as a string, ending at wh_NameLastChar
>a715	a4					.byte (("Else"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a716	83 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a718	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a719	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42645					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a71a					Else:
.a71a	20 d4 a6	jsr $a6d4			jsr zbranch_jmp0_comma	; compile jmp 0, push addr of addr
.a71d	20 31 cb	jsr $cb31			jsr Here
.a720	20 89 cf	jsr $cf89			jsr Rot
.a723	4c d2 cf	jmp $cfd2			jmp Store
=12					CL	.var *-(WordListLink+wh_Xt)
=$a726					en = *	; remember here
>a718	0c					.byte CL	;wh_CodeLength
>a726	42 65 67 69 6e			L1:	.text "Begin"	;  name of word as a string, ending at wh_NameLastChar
>a72b	c5					.byte (("Begin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a72c	95 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a72e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a72f	0d					.byte NN+CO+IM	;wh_Flags	dictionary flags
=42667					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a730	20 31 cb	jsr $cb31	Begin:		jsr Here	; remember the loop starting location
.a733	a9 30		lda #$30			lda #<Begin	; pairing marker
.a735	4c f0 b8	jmp $b8f0			jmp PushZA
=8					CL	.var *-(WordListLink+wh_Xt)
=$a738					en = *	; remember here
>a72e	08					.byte CL	;wh_CodeLength
>a738	41 67 61 69 6e			L1:	.text "Again"	;  name of word as a string, ending at wh_NameLastChar
>a73d	c5					.byte (("Again"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a73e	ab a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a740	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a741	1d					.byte NN+CO+IM+UF	;wh_Flags	dictionary flags
=42685					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a742	20 22 b5	jsr $b522	Again:		jsr underflow_2
.a745	a9 30		lda #$30			lda #<Begin	; check pairing
.a747	20 ea b2	jsr $b2ea			jsr QPairCtlA
.a74a	4c 61 ce	jmp $ce61			jmp Jmp_Comma	; Compile a jmp abs.
=11					CL	.var *-(WordListLink+wh_Xt)
=$a74d					en = *	; remember here
>a740	0b					.byte CL	;wh_CodeLength
>a74d	55 6e 74 69 6c			L1:	.text "Until"	;  name of word as a string, ending at wh_NameLastChar
>a752	85					.byte (("Until"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a753	bd a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a755	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a756	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42706					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a757	a9 30		lda #$30	Until:		lda #<Begin		; check pairing
.a759	20 ea b2	jsr $b2ea			jsr QPairCtlA
.a75c	4c 95 a7	jmp $a795			jmp ZBranch_Comma	; The address to loop back to is on the stack.
=8					CL	.var *-(WordListLink+wh_Xt)
=$a75f					en = *	; remember here
>a755	08					.byte CL	;wh_CodeLength
>a75f	57 68 69 6c 65			L1:	.text "While"	;  name of word as a string, ending at wh_NameLastChar
>a764	a5					.byte (("While"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a765	d2 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a767	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a768	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42724					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a769	a9 30		lda #$30	While:		lda #<Begin	; check pairing
.a76b	20 ea b2	jsr $b2ea			jsr QPairCtlA
.a76e	20 d1 a6	jsr $a6d1			jsr If3		; Compile a 0branch & jmp, push addr of addr
.a771	20 a3 d0	jsr $d0a3			jsr Swap	; Swap the two addresses on the stack.
.a774	a9 30		lda #$30			lda #<Begin	; pairing marker
.a776	4c f0 b8	jmp $b8f0			jmp PushZA
=16					CL	.var *-(WordListLink+wh_Xt)
=$a779					en = *	; remember here
>a767	10					.byte CL	;wh_CodeLength
>a779	52 65 70 65 61 74		L1:	.text "Repeat"	;  name of word as a string, ending at wh_NameLastChar
>a77f	86					.byte (("Repeat"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a780	e4 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a782	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a783	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42751					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a784	a9 30		lda #$30	Repeat:		lda #<Begin	; check pairing
.a786	20 ea b2	jsr $b2ea			jsr QPairCtlA
.a789	20 61 ce	jsr $ce61			jsr Jmp_Comma	; compile the jmp back
.a78c	20 31 cb	jsr $cb31			jsr Here	; patch the WHILE jmp operand
.a78f	20 a3 d0	jsr $d0a3			jsr Swap
.a792	4c d2 cf	jmp $cfd2			jmp Store
=17					CL	.var *-(WordListLink+wh_Xt)
=$a795					en = *	; remember here
>a782	11					.byte CL	;wh_CodeLength
.a795					ZBranch_Comma:
.a795	a9 e8		lda #$e8			lda #$e8		; compile inx; inx
.a797	a8		tay				tay
.a798	20 28 ce	jsr $ce28			jsr Comma_YA
.a79b	a9 b5		lda #$b5			lda #$b5		; compile lda DStack-2,x
.a79d	a0 22		ldy #$22			ldy #DStack-2
.a79f	20 28 ce	jsr $ce28			jsr Comma_YA
.a7a2	a9 15		lda #$15			lda #$15		; compile ora DStack-1,x
.a7a4	a0 23		ldy #$23			ldy #DStack-1
.a7a6	20 28 ce	jsr $ce28			jsr Comma_YA
.a7a9	a9 f0		lda #$f0			lda #$f0		; BEQ
.a7ab	d0 0f		bne $a7bc			bne Branch_CommaA
>a7ad	42 72 61 6e 63 68 2c		L1:	.text "Branch,"	;  name of word as a string, ending at wh_NameLastChar
>a7b4	87					.byte (("Branch,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a7b5	ff a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a7b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a7b8	08					.byte NN	;wh_Flags	dictionary flags
=42804					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a7b9	20 c7 b4	jsr $b4c7			jsr PopA		; pop opcode to A
.a7bc					Branch_CommaA:
.a7bc	48		pha				pha			; save branch opcode
.a7bd	38		sec				sec			; AY= displacement+2
.a7be	b5 24		lda $24,x			lda DStack+0,x
.a7c0	e5 00		sbc $00				sbc cp+0
.a7c2	a8		tay				tay
.a7c3	b5 25		lda $25,x			lda DStack+1,x
.a7c5	e5 01		sbc $01				sbc cp+1
.a7c7	c9 ff		cmp #$ff			cmp #$ff		; offset maybe in range?
.a7c9	f0 0b		beq $a7d6			beq _rev
.a7cb	68		pla		_2byte:		pla			; restore branch opcode
.a7cc	49 20		eor #$20			eor #$20		; reverse branch sense
.a7ce	a0 03		ldy #$03			ldy #3			; compile Bcc *+5
.a7d0	20 28 ce	jsr $ce28			jsr Comma_YA
.a7d3	4c 61 ce	jmp $ce61			jmp Jmp_Comma		; compile JMP abs
.a7d6	c0 82		cpy #$82	_rev:		cpy #$80+2		; offset in range?
.a7d8	90 f1		bcc $a7cb			bcc _2byte
.a7da	e8		inx		_1byte:		inx			; Drop address
.a7db	e8		inx				inx
.a7dc	88		dey				dey			; fix displacement
.a7dd	88		dey				dey
.a7de	68		pla				pla			; restore branch opcode
.a7df	4c 28 ce	jmp $ce28			jmp Comma_YA		; compile Bcc
>a7e2	57 6f 72 64			L1:	.text "Word"	;  name of word as a string, ending at wh_NameLastChar
>a7e6	84					.byte (("Word"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a7e7	34 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a7e9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a7ea	18					.byte UF+NN	;wh_Flags	dictionary flags
=42854					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a7eb					Word:
.a7eb	20 0d b5	jsr $b50d			jsr underflow_1
.a7ee	a4 08		ldy $08				ldy toin+0		; >IN
.a7f0	c4 06		cpy $06		_DelimLoop:	cpy ciblen+0		; quit if end of input
.a7f2	f0 09		beq $a7fd			beq _found_char
.a7f4	b1 04		lda ($04),y			lda (cib),y
.a7f6	d5 24		cmp $24,x			cmp DStack+0,x		; ASCII of delimiter
.a7f8	d0 03		bne $a7fd			bne _found_char
.a7fa	c8		iny				iny
.a7fb	d0 f3		bne $a7f0			bne _DelimLoop
.a7fd					_found_char:
.a7fd	84 08		sty $08				sty toin+0		; Save index of where word starts
.a7ff	20 e7 bb	jsr $bbe7			jsr Parse		; The real work is done by parse
.a802	20 c7 b4	jsr $b4c7			jsr PopA		; pop u
.a805	85 16		sta $16				sta tmp2+0
.a807	20 ee b4	jsr $b4ee			jsr PopTmp1		; pop addr
.a80a	20 31 cb	jsr $cb31			jsr Here		; Return caddr
.a80d	a5 16		lda $16				lda tmp2+0
.a80f	a0 00		ldy #$00			ldy #0			; Save length of string
.a811	f0 03		beq $a816			beq _CopyStart
.a813	b1 14		lda ($14),y	_CopyLoop:	lda (tmp1),y
.a815	c8		iny				iny
.a816	20 0e ce	jsr $ce0e	_CopyStart:	jsr C_Comma_A
.a819	c4 16		cpy $16				cpy tmp2+0
.a81b	90 f6		bcc $a813			bcc _CopyLoop
=50					CL	.var *-(WordListLink+wh_Xt)
=$a81d					en = *	; remember here
>a7e9	32					.byte CL	;wh_CodeLength
.a81d	60		rts				rts
>a81e	28				L1:	.text "("	;  name of word as a string, ending at wh_NameLastChar
>a81f	01					.byte (("("[-1]&7)<<5)+(*-L1)	;wh_HNL
>a820	66 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a822	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a823	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42911					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a824	a9 29		lda #$29	Paren:		lda #')'		; separator
.a826	20 ea bb	jsr $bbea			jsr Parse_A		; Call parse.
.a829	4c 0a c6	jmp $c60a			jmp Two_drop		; 2Drop the result.
=8					CL	.var *-(WordListLink+wh_Xt)
=$a82c					en = *	; remember here
>a822	08					.byte CL	;wh_CodeLength
>a82c	2e 28				L1:	.text ".("	;  name of word as a string, ending at wh_NameLastChar
>a82e	02					.byte ((".("[-1]&7)<<5)+(*-L1)	;wh_HNL
>a82f	9f a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a831	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a832	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42926					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a833	a9 29		lda #$29	Dot_paren:	lda #')'
.a835	20 ea bb	jsr $bbea			jsr Parse_A
.a838	4c 0d cf	jmp $cf0d			jmp Type
=8					CL	.var *-(WordListLink+wh_Xt)
=$a83b					en = *	; remember here
>a831	08					.byte CL	;wh_CodeLength
>a83b	48 61 73 68			L1:	.text "Hash"	;  name of word as a string, ending at wh_NameLastChar
>a83f	04					.byte (("Hash"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a840	ae a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a842	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a843	08					.byte NN	;wh_Flags	dictionary flags
=42943					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a844	20 c7 b4	jsr $b4c7	Hash:		jsr PopA		; save length
.a847	85 16		sta $16				sta tmp2+0
.a849	b5 24		lda $24,x			lda DStack+0,x		; copy addr
.a84b	b4 25		ldy $25,x			ldy DStack+1,x
.a84d	85 14		sta $14				sta tmp1+0
.a84f	84 15		sty $15				sty tmp1+1
.a851	a9 b3		lda #$b3			lda #$b3		; init hash
.a853	95 24		sta $24,x			sta DStack+0,x
.a855	95 25		sta $25,x			sta DStack+1,x
.a857	a0 00		ldy #$00			ldy #0			; for each char
.a859	f0 15		beq $a870			beq _next
.a85b	b1 14		lda ($14),y	_loop:		lda (tmp1),y		;   get char
.a85d	c9 61		cmp #$61			cmp #'a'		;   uppercase
.a85f	90 06		bcc $a867			bcc _3
.a861	c9 7b		cmp #$7b			cmp #'z'+1
.a863	b0 02		bcs $a867			bcs _3
.a865	29 df		and #$df			and #$df
.a867	16 24		asl $24,x	_3:		asl DStack+0,x		;   add to hash
.a869	36 25		rol $25,x			rol DStack+1,x
.a86b	75 24		adc $24,x			adc DStack+0,x
.a86d	95 24		sta $24,x			sta DStack+0,x
.a86f	c8		iny				iny
.a870	c4 16		cpy $16		_Next:		cpy tmp2+0
.a872	90 e7		bcc $a85b			bcc _loop
=48					CL	.var *-(WordListLink+wh_Xt)
=$a874					en = *	; remember here
>a842	30					.byte CL	;wh_CodeLength
.a874	60		rts				rts
>a875	45 6e 76 69 72 6f 6e 6d		L1:	.text "Environment?"	;  name of word as a string, ending at wh_NameLastChar
>a87d	65 6e 74 3f
>a881	ec					.byte (("Environment?"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a882	bf a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a884	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a885	08					.byte NN	;wh_Flags	dictionary flags
=43009					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a886					Environment_Q:
.a886	20 44 a8	jsr $a844			jsr Hash		; ( hash )
.a889	a0 00		ldy #$00			ldy #0			; Y= table index
.a88b	f0 0a		beq $a897			beq _entry_test
.a88d	98		tya		_entry_next:	tya
.a88e	c0 34		cpy #$34			cpy #_table_dbl		; if double
.a890	90 02		bcc $a894			bcc +
.a892	69 01		adc #$01			adc #6-4-1		;   skip double
.a894	69 04		adc #$04	+		adc #4			;   skip single
.a896	a8		tay		_3:		tay
.a897	b9 cb a8	lda $a8cb,y	_entry_test:	lda _Table+0,y		; match?
.a89a	f0 28		beq $a8c4			beq _notfound
.a89c	d5 24		cmp $24,x			cmp DStack+0,x
.a89e	d0 ed		bne $a88d			bne _entry_next
.a8a0	b9 cc a8	lda $a8cc,y			lda _Table+1,y
.a8a3	d5 25		cmp $25,x			cmp DStack+1,x
.a8a5	d0 e6		bne $a88d			bne _entry_next
.a8a7	b9 cd a8	lda $a8cd,y			lda _Table+2,y
.a8aa	95 24		sta $24,x			sta DStack+0,x
.a8ac	b9 ce a8	lda $a8ce,y			lda _Table+3,y
.a8af	95 25		sta $25,x			sta DStack+1,x
.a8b1	c0 34		cpy #$34			cpy #_table_dbl		; single or double data?
.a8b3	90 0c		bcc $a8c1			bcc _single
.a8b5	ca		dex				dex			;  push 2nd cell
.a8b6	ca		dex				dex
.a8b7	b9 cf a8	lda $a8cf,y			lda _Table+4,y
.a8ba	95 24		sta $24,x			sta DStack+0,x
.a8bc	b9 d0 a8	lda $a8d0,y			lda _Table+5,y
.a8bf	95 25		sta $25,x			sta DStack+1,x
.a8c1					_single:
.a8c1	4c ce b8	jmp $b8ce			jmp True		; return True
.a8c4					_notfound:
.a8c4	a9 00		lda #$00			lda #0			; return 0
.a8c6	95 24		sta $24,x			sta DStack+0,x
.a8c8	95 25		sta $25,x			sta DStack+1,x
.a8ca	60		rts				rts
=69					CL	.var *-(WordListLink+wh_Xt)
=$a8cb					en = *	; remember here
>a884	45					.byte CL	;wh_CodeLength
.a8cb					_Table:
>a8cb	5e e6 ff 7f				.word $e65e,$7fff	; "/COUNTED-STRING"
>a8cf	be 79 ff 00				.word $79BE,$ff		; "/HOLD"
>a8d3	b9 3c 54 00				.word $3cb9,padoffset	; "/PAD"
>a8d7	8b 81 08 00				.word $818b,8		; "ADDRESS-UNIT-BITS"
>a8db	57 fc 00 00				.word $fc57,0		; "FLOORED"	we have symmetric)
>a8df	4f fb ff 00				.word $fb4f,$ff		; "MAX-CHAR"
>a8e3	56 7f ff 7f				.word $7f56,$7fff	; "MAX-N"
>a8e7	5d 7f ff ff				.word $7f5d,$ffff	; "MAX-U"
>a8eb	38 ce 80 00				.word $ce38,$80		; "RETURN-STACK-CELLS"
>a8ef	f2 c0 14 00				.word $c0f2,DStack0/2	; "STACK-CELLS"
>a8f3	36 e3 09 00				.word $e336,9		; "WORDLISTS"
>a8f7	4a f2 ff ff				.word $f24a,$ffff	; "FLOATING"		flag	no	   floating-point word set present
>a8fb	01 99 0a 00				.word $9901,FDim	; "FLOATING-STACK"	n	yes	   If n = zero, floating-point numbers are
=52					_table_dbl = *-_Table	; These return a double-cell number
>a8ff	4c 7f ff ff ff 7f			.word $7f4c,$ffff,$7fff	; "MAX-D"
>a905	fe fe ff ff ff ff			.word $fefe,$ffff,$ffff	; "MAX-UD"
>a90b	00					.byte 0		; end of list
>a90c	44 75 6d 70			L1:	.text "Dump"	;  name of word as a string, ending at wh_NameLastChar
>a910	04					.byte (("Dump"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a911	01 a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a913	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a914	18					.byte UF+NN	;wh_Flags	dictionary flags
=43152					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a915					Dump:
.a915	20 22 b5	jsr $b522			jsr underflow_2
.a918	ca		dex				dex			; alloc work area
.a919	ca		dex				dex
.a91a					_row:
.a91a	20 28 ac	jsr $ac28			jsr CR
.a91d	b5 29		lda $29,x			lda DStack+5,x		; print address number
.a91f	20 9e a9	jsr $a99e			jsr C_Dot_Hex_A
.a922	b5 28		lda $28,x			lda DStack+4,x
.a924	20 9e a9	jsr $a99e			jsr C_Dot_Hex_A
.a927	20 00 cf	jsr $cf00			jsr Space
.a92a	20 00 cf	jsr $cf00			jsr Space
.a92d	a9 00		lda #$00			lda #0
.a92f	95 24		sta $24,x			sta DStack+0,x
.a931					_loop:
.a931	b5 26		lda $26,x			lda DStack+2,x
.a933	15 27		ora $27,x			ora DStack+3,x
.a935	f0 36		beq $a96d			beq _all_printed
.a937	a1 28		lda ($28,x)			lda (DStack+4,x)
.a939	20 9e a9	jsr $a99e			jsr C_Dot_Hex_A
.a93c	20 00 cf	jsr $cf00			jsr Space
.a93f	a1 28		lda ($28,x)			lda (DStack+4,x)
.a941	20 c5 a9	jsr $a9c5			jsr is_printable
.a944	b0 02		bcs $a948			bcs _printable
.a946	a9 2e		lda #$2e			lda #'.'		 ; Print dot if not printable
.a948					_printable:
.a948	b4 24		ldy $24,x			ldy DStack+0,x
.a94a	91 00		sta ($00),y			sta (cp),y
.a94c	c0 07		cpy #$07			cpy #7
.a94e	d0 03		bne $a953			bne +
.a950	20 00 cf	jsr $cf00			jsr Space
.a953					+
.a953	f6 28		inc $28,x			inc DStack+4,x
.a955	d0 02		bne $a959			bne +
.a957	f6 29		inc $29,x			inc DStack+5,x
.a959					+
.a959	20 4b cb	jsr $cb4b			jsr NOS_One_Minus	; loop counter
.a95c	f6 24		inc $24,x			inc DStack+0,x
.a95e	b5 24		lda $24,x			lda DStack+0,x
.a960	c9 10		cmp #$10			cmp #16
.a962	90 cd		bcc $a931			bcc _loop		; next byte
.a964	20 00 cf	jsr $cf00			jsr Space
.a967	20 7c a9	jsr $a97c			jsr dump_print_ascii
.a96a	4c 1a a9	jmp $a91a			jmp _row		; new row
.a96d					_all_printed:
.a96d	b5 24		lda $24,x			lda DStack+0,x
.a96f	f0 06		beq $a977			beq _done
.a971	20 00 cf	jsr $cf00			jsr Space
.a974	20 7c a9	jsr $a97c			jsr dump_print_ascii
.a977					_done:
.a977	e8		inx				inx			; drop work area
.a978	e8		inx				inx
.a979	4c 0a c6	jmp $c60a			jmp Two_drop		; one byte less than 4x INX
.a97c					dump_print_ascii:
.a97c	a0 00		ldy #$00			ldy #0
.a97e					_loop:
.a97e	b1 00		lda ($00),y			lda (cp),y
.a980	20 f3 ce	jsr $cef3			jsr Emit_A
.a983	c8		iny				iny
.a984	c0 08		cpy #$08			cpy #8
.a986	d0 03		bne $a98b			bne +
.a988	20 00 cf	jsr $cf00			jsr Space
.a98b					+
.a98b	98		tya				tya
.a98c	d5 24		cmp $24,x			cmp DStack+0,x
.a98e	90 ee		bcc $a97e			bcc _loop
.a990	60		rts				rts
=124					CL	.var *-(WordListLink+wh_Xt)
=$a991					en = *	; remember here
>a913	7c					.byte CL	;wh_CodeLength
>a991	43 2e 48 65 78			L1:	.text "C.Hex"	;  name of word as a string, ending at wh_NameLastChar
>a996	05					.byte (("C.Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a997	90 a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a999	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a99a	08					.byte NN	;wh_Flags	dictionary flags
=43286					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a99b	20 c7 b4	jsr $b4c7	C_Dot_Hex:	jsr PopA
.a99e	48		pha		C_Dot_Hex_A:	pha
.a99f	4a		lsr a				lsr		; convert high nibble first
.a9a0	4a		lsr a				lsr
.a9a1	4a		lsr a				lsr
.a9a2	4a		lsr a				lsr
.a9a3	20 a7 a9	jsr $a9a7			jsr _nibble_to_ascii
.a9a6	68		pla				pla
.a9a7					_nibble_to_ascii:
.a9a7	29 0f		and #$0f			and #$0F	; only use lower nibble
.a9a9	c9 0a		cmp #$0a			cmp #9+1
.a9ab	90 02		bcc $a9af			bcc +
.a9ad	69 06		adc #$06			adc #6
.a9af	69 30		adc #$30	+		adc #'0'
.a9b1	4c f3 ce	jmp $cef3			jmp Emit_A
=25					CL	.var *-(WordListLink+wh_Xt)
=$a9b4					en = *	; remember here
>a999	19					.byte CL	;wh_CodeLength
>a9b4	2e 48 65 78			L1:	.text ".Hex"	;  name of word as a string, ending at wh_NameLastChar
>a9b8	04					.byte ((".Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a9b9	16 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9bc	08					.byte NN	;wh_Flags	dictionary flags
=43320					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9bd	b5 25		lda $25,x	Dot_Hex:	lda DStack+1,x	; do hi byte
.a9bf	20 9e a9	jsr $a99e			jsr C_Dot_Hex_A
.a9c2	4c 9b a9	jmp $a99b			jmp C_Dot_Hex	; do lo byte
=8					CL	.var *-(WordListLink+wh_Xt)
=$a9c5					en = *	; remember here
>a9bb	08					.byte CL	;wh_CodeLength
.a9c5					is_printable:
.a9c5	c9 20		cmp #$20	                cmp #AscSP              ; $20
.a9c7	90 07		bcc $a9d0	                bcc _done
.a9c9	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.a9cb	b0 02		bcs $a9cf	                bcs _failed
.a9cd	38		sec		                sec
.a9ce	60		rts		                rts
.a9cf	18		clc		_failed:	clc
.a9d0	60		rts		_done:		rts
>a9d1	2e 53				L1:	.text ".S"	;  name of word as a string, ending at wh_NameLastChar
>a9d3	62					.byte ((".S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a9d4	38 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9d6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9d7	08					.byte NN	;wh_Flags	dictionary flags
=43347					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9d8					Dot_s:
.a9d8	a9 3c		lda #$3c			lda #'<'
.a9da	20 f3 ce	jsr $cef3			jsr Emit_A
.a9dd	20 47 c3	jsr $c347			jsr Depth	; ( -- u )
.a9e0	20 38 cd	jsr $cd38			jsr print_u
.a9e3	a9 3e		lda #$3e			lda #'>'
.a9e5	20 f3 ce	jsr $cef3			jsr Emit_A
.a9e8	20 00 cf	jsr $cf00			jsr Space
.a9eb	a0 28		ldy #$28			ldy #DStack0		; for each cell on the stack
.a9ed	88		dey		_loop:		dey
.a9ee	88		dey				dey
.a9ef	86 14		stx $14				stx tmp1
.a9f1	c4 14		cpy $14				cpy tmp1
.a9f3	90 15		bcc $aa0a			bcc _done
.a9f5	98		tya				tya			; save index
.a9f6	48		pha				pha
.a9f7	ca		dex				dex			; push stack[index]
.a9f8	ca		dex				dex
.a9f9	b9 24 00	lda $0024,y			lda DStack+0,y
.a9fc	95 24		sta $24,x			sta DStack+0,x
.a9fe	b9 25 00	lda $0025,y			lda DStack+1,y
.aa01	95 25		sta $25,x			sta DStack+1,x
.aa03	20 eb cc	jsr $cceb			jsr Dot
.aa06	68		pla				pla			; restore index
.aa07	a8		tay				tay
.aa08	d0 e3		bne $a9ed			bne _loop
.aa0a					_done:
=50					CL	.var *-(WordListLink+wh_Xt)
=$aa0a					en = *	; remember here
>a9d6	32					.byte CL	;wh_CodeLength
.aa0a	60		rts				rts
>aa0b	43 6f 6d 70 61 72 65		L1:	.text "Compare"	;  name of word as a string, ending at wh_NameLastChar
>aa12	a7					.byte (("Compare"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aa13	53 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa15	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa16	18					.byte UF+NN	;wh_Flags	dictionary flags
=43410					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa17					Compare:
.aa17	20 2c b5	jsr $b52c			jsr underflow_4
.aa1a	b5 24		lda $24,x			lda DStack+0,x		; tmp3+1= u2.lo
.aa1c	85 19		sta $19				sta tmp3+1
.aa1e	b5 26		lda $26,x			lda DStack+2,x		; tmp2= addr2
.aa20	b4 27		ldy $27,x			ldy DStack+3,x
.aa22	85 16		sta $16				sta tmp2+0
.aa24	84 17		sty $17				sty tmp2+1
.aa26	b5 28		lda $28,x			lda DStack+4,x		; tmp3+0= u1.lo
.aa28	85 18		sta $18				sta tmp3+0
.aa2a	b5 2a		lda $2a,x			lda DStack+6,x		; tmp1= addr1
.aa2c	b4 2b		ldy $2b,x			ldy DStack+7,x
.aa2e	85 14		sta $14				sta tmp1+0
.aa30	84 15		sty $15				sty tmp1+1
.aa32	a0 00		ldy #$00			ldy #0		; for each char
.aa34					_loop:
.aa34	c4 18		cpy $18				cpy tmp3+0	; string1 empty?
.aa36	f0 13		beq $aa4b			beq _str1
.aa38					_L1:
.aa38	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.aa3a	f0 27		beq $aa63			beq _str2
.aa3c					_L2:
.aa3c	b1 14		lda ($14),y			lda (tmp1),y	; Are they different?
.aa3e	d1 16		cmp ($16),y			cmp (tmp2),y
.aa40	d0 19		bne $aa5b			bne _neq
.aa42	c8		iny				iny		; to next char
.aa43	d0 ef		bne $aa34			bne _loop
.aa45	e6 15		inc $15				inc tmp1+1	; to next page
.aa47	e6 17		inc $17				inc tmp2+1
.aa49	d0 e9		bne $aa34			bne _loop
.aa4b	d6 29		dec $29,x	_str1:		dec DStack+5,x	; string1 really empty?
.aa4d	10 e9		bpl $aa38			bpl _L1
.aa4f	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.aa51	d0 0a		bne $aa5d			bne _less
.aa53	b5 25		lda $25,x			lda DStack+1,x
.aa55	d0 06		bne $aa5d			bne _less
.aa57	a9 00		lda #$00	_equal:		lda #0		; Return 0
.aa59	f0 0e		beq $aa69			beq _gt2
.aa5b	b0 0a		bcs $aa67	_neq:		bcs _greater
.aa5d	a9 ff		lda #$ff	_less:		lda #$FF	; Return -1
.aa5f	95 2a		sta $2a,x			sta DStack+6,x
.aa61	d0 0a		bne $aa6d			bne _done
.aa63	d6 25		dec $25,x	_str2:		dec DStack+1,x	; is string2 empty?
.aa65	10 d5		bpl $aa3c			bpl _L2
.aa67	a9 01		lda #$01	_greater:	lda #1		; Return 1
.aa69	95 2a		sta $2a,x	_gt2:		sta DStack+6,x
.aa6b	a9 00		lda #$00			lda #0
.aa6d	95 2b		sta $2b,x	_done:		sta DStack+7,x
.aa6f	8a		txa				txa		; Remove all but the result from the stack.
.aa70	18		clc				clc
.aa71	69 06		adc #$06			adc #6
.aa73	aa		tax				tax
=93					CL	.var *-(WordListLink+wh_Xt)
=$aa74					en = *	; remember here
>aa15	5d					.byte CL	;wh_CodeLength
.aa74	60		rts				rts
>aa75	53 65 61 72 63 68		L1:	.text "Search"	;  name of word as a string, ending at wh_NameLastChar
>aa7b	06					.byte (("Search"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aa7c	92 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa7e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa7f	18					.byte UF+NN	;wh_Flags	dictionary flags
=43515					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa80					Search:
.aa80	20 2c b5	jsr $b52c			jsr underflow_4
.aa83	b5 24		lda $24,x			lda DStack+0,x
.aa85	15 25		ora $25,x			ora DStack+1,x
.aa87	d0 09		bne $aa92			bne _start_search
.aa89	e8		inx				inx		; Drop u2
.aa8a	e8		inx				inx
.aa8b	a9 ff		lda #$ff			lda #$FF	; overwrite addr2 with a true flag
.aa8d	95 24		sta $24,x			sta DStack+0,x
.aa8f	95 25		sta $25,x			sta DStack+1,x
.aa91	60		rts				rts
.aa92					_start_search:
.aa92	20 ff b8	jsr $b8ff			jsr Zero
.aa95					_search_loop:
.aa95	18		clc				clc
.aa96	b5 24		lda $24,x			lda DStack+0,x
.aa98	75 26		adc $26,x			adc DStack+2,x
.aa9a	85 14		sta $14				sta tmp1+0
.aa9c	b5 25		lda $25,x			lda DStack+1,x
.aa9e	75 27		adc $27,x			adc DStack+3,x
.aaa0	85 15		sta $15				sta tmp1+1
.aaa2	d5 2b		cmp $2b,x			cmp DStack+7,x
.aaa4	90 13		bcc $aab9			bcc _init_comparison ; Obviously less
.aaa6	d0 06		bne $aaae			bne _not_found
.aaa8	b5 2a		lda $2a,x			lda DStack+6,x
.aaaa	c5 14		cmp $14				cmp tmp1
.aaac	b0 0b		bcs $aab9			bcs _init_comparison
.aaae					_not_found:
.aaae	e8		inx				inx		; Remove offset
.aaaf	e8		inx				inx
.aab0	e8		inx				inx		; Remove u2
.aab1	e8		inx				inx
.aab2	a9 00		lda #$00			lda #0
.aab4	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a false flag
.aab6	95 25		sta $25,x			sta DStack+1,x
.aab8	60		rts				rts
.aab9					_init_comparison:
.aab9	18		clc				clc
.aaba	b5 2c		lda $2c,x			lda DStack+8,x
.aabc	75 24		adc $24,x			adc DStack+0,x
.aabe	85 14		sta $14				sta tmp1
.aac0	b5 2d		lda $2d,x			lda DStack+9,x
.aac2	75 25		adc $25,x			adc DStack+1,x
.aac4	85 15		sta $15				sta tmp1+1
.aac6	b5 28		lda $28,x			lda DStack+4,x
.aac8	85 16		sta $16				sta tmp2
.aaca	b5 29		lda $29,x			lda DStack+5,x
.aacc	85 17		sta $17				sta tmp2+1
.aace	b5 26		lda $26,x			lda DStack+2,x
.aad0	85 18		sta $18				sta tmp3+0
.aad2	b5 27		lda $27,x			lda DStack+3,x
.aad4	85 19		sta $19				sta tmp3+1
.aad6					_comparison_loop:
.aad6	a0 00		ldy #$00			ldy #0
.aad8	b1 14		lda ($14),y			lda (tmp1),y
.aada	d1 16		cmp ($16),y			cmp (tmp2),y
.aadc	f0 06		beq $aae4			beq _letters_match
.aade	20 65 cb	jsr $cb65			jsr One_plus
.aae1	4c 95 aa	jmp $aa95			jmp _search_loop
.aae4					_letters_match:
.aae4	e6 14		inc $14				inc tmp1
.aae6	d0 02		bne $aaea			bne +
.aae8	e6 15		inc $15				inc tmp1+1
.aaea					+
.aaea	e6 16		inc $16				inc tmp2
.aaec	d0 02		bne $aaf0			bne +
.aaee	e6 17		inc $17				inc tmp2+1
.aaf0					+
.aaf0	a5 18		lda $18				lda tmp3
.aaf2	d0 02		bne $aaf6			bne +
.aaf4	c6 19		dec $19				dec tmp3+1
.aaf6					+
.aaf6	c6 18		dec $18				dec tmp3
.aaf8	a5 18		lda $18				lda tmp3
.aafa	05 19		ora $19				ora tmp3+1
.aafc	d0 d8		bne $aad6			bne _comparison_loop ; Check the next letter
.aafe	18		clc				clc
.aaff	b5 24		lda $24,x			lda DStack+0,x
.ab01	75 2c		adc $2c,x			adc DStack+8,x
.ab03	95 2c		sta $2c,x			sta DStack+8,x
.ab05	b5 25		lda $25,x			lda DStack+1,x
.ab07	75 2d		adc $2d,x			adc DStack+9,x
.ab09	95 2d		sta $2d,x			sta DStack+9,x
.ab0b	38		sec				sec
.ab0c	b5 2a		lda $2a,x			lda DStack+6,x
.ab0e	f5 24		sbc $24,x			sbc DStack+0,x
.ab10	95 2a		sta $2a,x			sta DStack+6,x
.ab12	b5 2b		lda $2b,x			lda DStack+7,x
.ab14	f5 25		sbc $25,x			sbc DStack+1,x
.ab16	95 2b		sta $2b,x			sta DStack+7,x
.ab18	e8		inx				inx		; drop offset
.ab19	e8		inx				inx
.ab1a	e8		inx				inx		; drop u2
.ab1b	e8		inx				inx
.ab1c	a9 ff		lda #$ff			lda #$FF
.ab1e	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a true flag.
.ab20	95 25		sta $25,x			sta DStack+1,x
=162					CL	.var *-(WordListLink+wh_Xt)
=$ab22					en = *	; remember here
>aa7e	a2					.byte CL	;wh_CodeLength
.ab22	60		rts				rts
>ab23	4d 61 72 6b 65 72		L1:	.text "Marker"	;  name of word as a string, ending at wh_NameLastChar
>ab29	46					.byte (("Marker"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab2a	fb a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab2c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab2d	0c					.byte IM+NN	;wh_Flags	dictionary flags
=43689					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab2e					Marker:
.ab2e	20 31 cb	jsr $cb31			jsr Here		; Save original CP, which
.ab31	20 39 c2	jsr $c239			jsr Header_Build	; compile a word header, but don't link into wordlist
.ab34	a0 ab		ldy #$ab			ldy #>_runtime		; compile JSR _runtime
.ab36	a9 4e		lda #$4e			lda #<_runtime
.ab38	20 4d ce	jsr $ce4d			jsr Jsr_Comma_YA
.ab3b	20 25 ce	jsr $ce25			jsr Comma		; Append original CP
.ab3e	a0 00		ldy #$00			ldy #0			; Start at CURRENT
.ab40	b9 10 03	lda $0310,y	_loop:		lda CurrentV,y
.ab43	20 0e ce	jsr $ce0e			jsr C_Comma_A
.ab46	c8		iny				iny
.ab47	c0 24		cpy #$24			cpy #MarkEnd-CurrentV	; One past the end of the search order.
.ab49	90 f5		bcc $ab40			bcc _loop
.ab4b	4c 2e c2	jmp $c22e			jmp Header_Link		; link built header into current dictionary
=32					CL	.var *-(WordListLink+wh_Xt)
=$ab4e					en = *	; remember here
>ab2c	20					.byte CL	;wh_CodeLength
.ab4e					_runtime:
.ab4e	68		pla				pla		; Pop the RTS address off the stack
.ab4f	85 14		sta $14				sta tmp1+0
.ab51	68		pla				pla
.ab52	85 15		sta $15				sta tmp1+1
.ab54	a0 01		ldy #$01			ldy #1		; start just aftet JSR _runtime
.ab56	b1 14		lda ($14),y			lda (tmp1),y	; CP was stored first
.ab58	85 00		sta $00				sta cp+0
.ab5a	c8		iny				iny
.ab5b	b1 14		lda ($14),y			lda (tmp1),y
.ab5d	85 01		sta $01				sta cp+1
.ab5f	c8		iny				iny
.ab60					_rloop:
.ab60	b1 14		lda ($14),y			lda (tmp1),y
.ab62	99 0d 03	sta $030d,y			sta CurrentV-2-1,y
.ab65	c8		iny				iny
.ab66	c0 27		cpy #$27			cpy #MarkEnd-CurrentV+2+1 ; One past the end of the search order.
.ab68	90 f6		bcc $ab60			bcc _rloop
.ab6a	60		rts				rts
>ab6b	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
>ab70	65					.byte (("Words"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab71	a9 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab73	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab74	08					.byte NN	;wh_Flags	dictionary flags
=43760					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab75					Words:
.ab75	a9 ff		lda #$ff			lda #$ff
.ab77	20 f0 b8	jsr $b8f0			jsr PushZA		; Alloc space for line size & wordlist #
.ab7a	ca		dex				dex			; Alloc space for a nt
.ab7b	ca		dex				dex
.ab7c					_wordlist_next:
.ab7c	20 28 ac	jsr $ac28			jsr CR			; start wordlist on new line
.ab7f	f6 26		inc $26,x			inc DStack+2,x		; step to next search wordlist
.ab81	b4 26		ldy $26,x			ldy DStack+2,x		; Y= wordlist index
.ab83	cc 2a 03	cpy $032a			cpy Num_OrderV
.ab86	b0 44		bcs $abcc			bcs _wordslist_done	; ran out of search wordlist entries?
.ab88	b9 2b 03	lda $032b,y			lda Search_OrderV,y	; A= SEARCH-ORDER[Y]	Get the current wordlist id
.ab8b	0a		asl a				asl			; TOS= WORDLISTS[A]
.ab8c	a8		tay				tay
.ab8d	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.ab90	95 24		sta $24,x			sta DStack+0,x
.ab92	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.ab95	95 25		sta $25,x			sta DStack+1,x
.ab97	f0 e3		beq $ab7c			beq _wordlist_next	; end of list?
.ab99					_word_loop:
.ab99	20 85 d0	jsr $d085			jsr Dup			; ( wordlist# nt nt )
.ab9c	20 00 bf	jsr $bf00			jsr Name_To_String	; ( wordlist# nt addr u )
.ab9f	b5 2b		lda $2b,x			lda DStack+7,x
.aba1	38		sec				sec			; don't forget the space between words
.aba2	75 24		adc $24,x			adc DStack+0,x
.aba4	c9 4e		cmp #$4e			cmp #MAX_LINE_LENGTH-1
.aba6	90 05		bcc $abad			bcc +
.aba8	20 28 ac	jsr $ac28			jsr CR
.abab	b5 24		lda $24,x			lda DStack+0,x		; After going to next line, start
.abad	95 2b		sta $2b,x	+		sta DStack+7,x
.abaf	20 0d cf	jsr $cf0d			jsr Type		; ( wordlist# nt )
.abb2	20 00 cf	jsr $cf00			jsr Space
.abb5	b5 24		lda $24,x			lda DStack+0,x
.abb7	85 14		sta $14				sta tmp1+0
.abb9	b5 25		lda $25,x			lda DStack+1,x
.abbb	85 15		sta $15				sta tmp1+1
.abbd	a0 81		ldy #$81			ldy #wh_WordListLink	; get next word nt
.abbf	b1 14		lda ($14),y			lda (tmp1),y
.abc1	95 24		sta $24,x			sta DStack+0,x
.abc3	c8		iny				iny
.abc4	b1 14		lda ($14),y			lda (tmp1),y
.abc6	95 25		sta $25,x			sta DStack+1,x
.abc8	d0 cf		bne $ab99			bne _word_loop		; end of list?
.abca	f0 b0		beq $ab7c			beq _wordlist_next
.abcc					_wordslist_done:
.abcc	4c 0a c6	jmp $c60a			jmp Two_Drop
=90					CL	.var *-(WordListLink+wh_Xt)
=$abcf					en = *	; remember here
>ab73	5a					.byte CL	;wh_CodeLength
>abcf	57 6f 72 64 53 69 7a 65		L1:	.text "WordSize"	;  name of word as a string, ending at wh_NameLastChar
>abd7	a8					.byte (("WordSize"[-1]&7)<<5)+(*-L1)	;wh_HNL
>abd8	f0 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abda	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abdb	08					.byte NN	;wh_Flags	dictionary flags
=43863					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abdc	20 ee b4	jsr $b4ee	WordSize:	jsr PopTmp1
.abdf	a0 83		ldy #$83			ldy #Wh_CodeLength
.abe1	b1 14		lda ($14),y			lda (tmp1),y
.abe3	4c f0 b8	jmp $b8f0			jmp PushZA
=10					CL	.var *-(WordListLink+wh_Xt)
=$abe6					en = *	; remember here
>abda	0a					.byte CL	;wh_CodeLength
>abe6	41 6c 69 67 6e 65 64		L1:	.text "Aligned"	;  name of word as a string, ending at wh_NameLastChar
>abed	87					.byte (("Aligned"[-1]&7)<<5)+(*-L1)	;wh_HNL
>abee	57 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abf0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abf1	00					.byte 0	;wh_Flags	dictionary flags
=43885					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abf2					Aligned:
=0					CL	.var *-(WordListLink+wh_Xt)
=$abf2					en = *	; remember here
>abf0	00					.byte CL	;wh_CodeLength
.abf2	60		rts				rts
>abf3	41 6c 69 67 6e			L1:	.text "Align"	;  name of word as a string, ending at wh_NameLastChar
>abf8	c5					.byte (("Align"[-1]&7)<<5)+(*-L1)	;wh_HNL
>abf9	6d ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abfb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abfc	00					.byte 0	;wh_Flags	dictionary flags
=43896					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abfd					Align:
=0					CL	.var *-(WordListLink+wh_Xt)
=$abfd					en = *	; remember here
>abfb	00					.byte CL	;wh_CodeLength
.abfd	60		rts				rts
>abfe	4f 75 74 70 75 74		L1:	.text "Output"	;  name of word as a string, ending at wh_NameLastChar
>ac04	86					.byte (("Output"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ac05	78 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac07	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac08	08					.byte NN	;wh_Flags	dictionary flags
=43908					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac09					xt_output:
.ac09	a0 03		ldy #$03			ldy #>output
.ac0b	a9 06		lda #$06			lda #<output
.ac0d	4c be b8	jmp $b8be			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$ac10					en = *	; remember here
>ac07	07					.byte CL	;wh_CodeLength
>ac10	49 6e 70 75 74			L1:	.text "Input"	;  name of word as a string, ending at wh_NameLastChar
>ac15	85					.byte (("Input"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ac16	84 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac18	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac19	08					.byte NN	;wh_Flags	dictionary flags
=43925					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac1a	a0 03		ldy #$03	xt_input:	ldy #>input
.ac1c	a9 08		lda #$08			lda #<input
.ac1e	4c be b8	jmp $b8be			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$ac21					en = *	; remember here
>ac18	07					.byte CL	;wh_CodeLength
>ac21	43 52				L1:	.text "CR"	;  name of word as a string, ending at wh_NameLastChar
>ac23	42					.byte (("CR"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ac24	95 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac26	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac27	08					.byte NN	;wh_Flags	dictionary flags
=43939					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac28					CR:
.ac28	a9 0d		lda #$0d			lda #AscCR
.ac2a	20 f3 ce	jsr $cef3			jsr Emit_A
.ac2d	a9 0a		lda #$0a			lda #AscLF
.ac2f	20 f3 ce	jsr $cef3			jsr Emit_A
=10					CL	.var *-(WordListLink+wh_Xt)
=$ac32					en = *	; remember here
>ac26	0a					.byte CL	;wh_CodeLength
.ac32	60		rts				rts
>ac33	50 61 67 65			L1:	.text "Page"	;  name of word as a string, ending at wh_NameLastChar
>ac37	a4					.byte (("Page"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ac38	a3 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac3a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac3b	08					.byte NN	;wh_Flags	dictionary flags
=43959					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac3c	20 cf b9	jsr $b9cf	Page:		jsr SLiteral_Runtime
.ac3f	4c 4c ac	jmp $ac4c			  jmp +
>ac42	1b 5b 32 4a					  .text AscESC,"[2J"	; ANSI clear screen
>ac46	1b 5b 31 3b 31 48				  .text AscESC,"[1;1H"	; move cursor to top left of screen
.ac4c	4c 0d cf	jmp $cf0d	+		jmp Type
=19					CL	.var *-(WordListLink+wh_Xt)
=$ac4f					en = *	; remember here
>ac3a	13					.byte CL	;wh_CodeLength
>ac4f	41 74 2d 58 59			L1:	.text "At-XY"	;  name of word as a string, ending at wh_NameLastChar
>ac54	25					.byte (("At-XY"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ac55	b7 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac57	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac58	18					.byte UF+NN	;wh_Flags	dictionary flags
=43988					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac59					At_XY:
.ac59	20 22 b5	jsr $b522			jsr underflow_2
.ac5c	ad 00 03	lda $0300			lda base	; Save the BASE
.ac5f	48		pha				pha
.ac60	20 a9 b2	jsr $b2a9			jsr Decimal	; ANSI escape code values need to be in decimal.
.ac63	a9 1b		lda #$1b			lda #AscESC
.ac65	20 f3 ce	jsr $cef3			jsr Emit_A
.ac68	a9 5b		lda #$5b			lda #'['
.ac6a	20 f3 ce	jsr $cef3			jsr Emit_A
.ac6d	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.ac6f	20 38 cd	jsr $cd38			jsr print_u
.ac72	a9 3b		lda #$3b			lda #';'
.ac74	20 f3 ce	jsr $cef3			jsr Emit_A
.ac77	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.ac79	20 38 cd	jsr $cd38			jsr print_u
.ac7c	a9 48		lda #$48			lda #'H'
.ac7e	20 f3 ce	jsr $cef3			jsr Emit_A
.ac81	68		pla				pla		; Restore the base
.ac82	8d 00 03	sta $0300			sta base
=44					CL	.var *-(WordListLink+wh_Xt)
=$ac85					en = *	; remember here
>ac57	2c					.byte CL	;wh_CodeLength
.ac85	60		rts				rts
>ac86	50 61 64			L1:	.text "Pad"	;  name of word as a string, ending at wh_NameLastChar
>ac89	83					.byte (("Pad"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ac8a	d4 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac8c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac8d	00					.byte 0	;wh_Flags	dictionary flags
=44041					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac8e	ca		dex		Pad:		dex		; push cp+PadOffset
.ac8f	ca		dex				dex
.ac90	18		clc				clc
.ac91	a5 00		lda $00				lda cp+0
.ac93	69 54		adc #$54			adc #PadOffset
.ac95	95 24		sta $24,x			sta DStack+0,x
.ac97	a5 01		lda $01				lda cp+1
.ac99	69 00		adc #$00			adc #0
.ac9b	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$ac9d					en = *	; remember here
>ac8c	0f					.byte CL	;wh_CodeLength
.ac9d	60		rts				rts
>ac9e	3c 23				L1:	.text "<#"	;  name of word as a string, ending at wh_NameLastChar
>aca0	62					.byte (("<#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aca1	09 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aca3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aca4	00					.byte 0	;wh_Flags	dictionary flags
=44064					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aca5					Less_Number_Sign:
.aca5	a9 54		lda #$54			lda #PadOffset		; init hold buffer index
.aca7	8d 34 03	sta $0334			sta ToHold
=5					CL	.var *-(WordListLink+wh_Xt)
=$acaa					en = *	; remember here
>aca3	05					.byte CL	;wh_CodeLength
.acaa	60		rts				rts
>acab	23 3e				L1:	.text "#>"	;  name of word as a string, ending at wh_NameLastChar
>acad	c2					.byte (("#>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>acae	20 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>acb0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acb1	10					.byte UF	;wh_Flags	dictionary flags
=44077					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.acb2					Number_Sign_Greater:
.acb2	20 22 b5	jsr $b522			jsr underflow_2		; double number
.acb5	18		clc				clc			; addr= cp + ToHold
.acb6	a5 00		lda $00				lda cp+0
.acb8	6d 34 03	adc $0334			adc ToHold
.acbb	95 26		sta $26,x			sta DStack+2,x
.acbd	a5 01		lda $01				lda cp+1
.acbf	69 00		adc #$00			adc #0
.acc1	95 27		sta $27,x			sta DStack+3,x
.acc3	38		sec				sec			; u= PadOffset - ToHold
.acc4	a9 54		lda #$54			lda #PadOffset
.acc6	ed 34 03	sbc $0334			sbc ToHold
.acc9	95 24		sta $24,x			sta DStack+0,x
.accb	a9 00		lda #$00			lda #0
.accd	95 25		sta $25,x			sta DStack+1,x
=29					CL	.var *-(WordListLink+wh_Xt)
=$accf					en = *	; remember here
>acb0	1d					.byte CL	;wh_CodeLength
.accf	60		rts				rts
>acd0	48 6f 6c 64			L1:	.text "Hold"	;  name of word as a string, ending at wh_NameLastChar
>acd4	84					.byte (("Hold"[-1]&7)<<5)+(*-L1)	;wh_HNL
>acd5	2d ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>acd7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acd8	00					.byte 0	;wh_Flags	dictionary flags
=44116					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.acd9	20 c7 b4	jsr $b4c7	Hold:		jsr PopA
.acdc	ce 34 03	dec $0334	Hold_A:		dec ToHold
.acdf	ac 34 03	ldy $0334			ldy ToHold
.ace2	91 00		sta ($00),y			sta (cp),y
=11					CL	.var *-(WordListLink+wh_Xt)
=$ace4					en = *	; remember here
>acd7	0b					.byte CL	;wh_CodeLength
.ace4	60		rts				rts
>ace5	23				L1:	.text "#"	;  name of word as a string, ending at wh_NameLastChar
>ace6	61					.byte (("#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ace7	54 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ace9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acea	18					.byte UF+NN	;wh_Flags	dictionary flags
=44134					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aceb					Number_Sign:
.aceb	20 22 b5	jsr $b522			jsr underflow_2		; double number
.acee	a9 00		lda #$00			lda #0			;   init remainder
.acf0	18		clc				clc
.acf1	a0 21		ldy #$21			ldy #32+1		;   for each bit
.acf3					_11:
.acf3	2a		rol a				rol a			;   shift remainder
.acf4	cd 00 03	cmp $0300			cmp base		;   will it fit?
.acf7	90 03		bcc $acfc			bcc _27
.acf9	ed 00 03	sbc $0300			sbc base
.acfc					_27:
.acfc	36 26		rol $26,x			rol DStack+2,x		;   shift ud
.acfe	36 27		rol $27,x			rol DStack+3,x
.ad00	36 24		rol $24,x			rol DStack+0,x
.ad02	36 25		rol $25,x			rol DStack+1,x
.ad04	88		dey				dey
.ad05	d0 ec		bne $acf3			bne _11
.ad07	c9 0a		cmp #$0a			cmp #9+1		; alternatively this could use s_abc_upper
.ad09	90 02		bcc $ad0d			bcc +
.ad0b	69 06		adc #$06			adc #7-1
.ad0d	69 30		adc #$30	+		adc #'0'
.ad0f	d0 cb		bne $acdc			bne Hold_A
=38					CL	.var *-(WordListLink+wh_Xt)
=$ad11					en = *	; remember here
>ace9	26					.byte CL	;wh_CodeLength
>ad11	23 53				L1:	.text "#S"	;  name of word as a string, ending at wh_NameLastChar
>ad13	62					.byte (("#S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ad14	66 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad16	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad17	00					.byte 0	;wh_Flags	dictionary flags
=44179					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad18					Number_Sign_S:
.ad18					_loop:
.ad18	20 eb ac	jsr $aceb			jsr Number_sign	; convert a single number ("#")
.ad1b	b5 24		lda $24,x			lda DStack+0,x	; until d is zero
.ad1d	15 25		ora $25,x			ora DStack+1,x
.ad1f	15 26		ora $26,x			ora DStack+2,x
.ad21	15 27		ora $27,x			ora DStack+3,x
.ad23	d0 f3		bne $ad18			bne _loop
=13					CL	.var *-(WordListLink+wh_Xt)
=$ad25					en = *	; remember here
>ad16	0d					.byte CL	;wh_CodeLength
.ad25	60		rts				rts
>ad26	53 69 67 6e			L1:	.text "Sign"	;  name of word as a string, ending at wh_NameLastChar
>ad2a	c4					.byte (("Sign"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ad2b	93 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad2d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad2e	08					.byte NN	;wh_Flags	dictionary flags
=44202					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad2f	20 e3 b4	jsr $b4e3	Sign:		jsr PopYA
.ad32	98		tya				tya		; test MSB of TOS
.ad33					Sign_P:
.ad33	30 01		bmi $ad36			bmi _minus
.ad35	60		rts				rts
.ad36	a9 2d		lda #$2d	_minus:		lda #'-'	; add minus sign
.ad38	d0 a2		bne $acdc			bne hold_a
=11					CL	.var *-(WordListLink+wh_Xt)
=$ad3a					en = *	; remember here
>ad2d	0b					.byte CL	;wh_CodeLength
>ad3a	43 6c 65 61 76 65		L1:	.text "Cleave"	;  name of word as a string, ending at wh_NameLastChar
>ad40	a6					.byte (("Cleave"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ad41	aa ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad43	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad44	18					.byte UF+NN	;wh_Flags	dictionary flags
=44224					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad45					Cleave:
.ad45	20 22 b5	jsr $b522			jsr underflow_2
.ad48	20 b7 c5	jsr $c5b7			jsr Minus_leading	; -LEADING ( addr u )
.ad4b	20 fc c4	jsr $c4fc			jsr Input_To_R	; save old imput state
.ad4e	b5 24		lda $24,x			lda DStack+0,x	; u is new ciblen
.ad50	85 06		sta $06				sta ciblen
.ad52	b5 25		lda $25,x			lda DStack+1,x
.ad54	85 07		sta $07				sta ciblen+1
.ad56	b5 26		lda $26,x			lda DStack+2,x	; addr is new cib
.ad58	85 04		sta $04				sta cib
.ad5a	b5 27		lda $27,x			lda DStack+3,x
.ad5c	85 05		sta $05				sta cib+1
.ad5e	a9 00		lda #$00			lda #0
.ad60	85 08		sta $08				sta toin	; >IN pointer is zero
.ad62	85 09		sta $09				sta toin+1
.ad64	20 9f bb	jsr $bb9f			jsr parse_name	; ( addr u addr-s u-s )
.ad67	b5 24		lda $24,x			lda DStack+0,x
.ad69	15 25		ora $25,x			ora DStack+1,x
.ad6b	f0 23		beq $ad90			beq _done
.ad6d	38		sec				sec
.ad6e	b5 28		lda $28,x			lda DStack+4,x	; LSB of original u
.ad70	f5 24		sbc $24,x			sbc DStack+0,x
.ad72	95 28		sta $28,x			sta DStack+4,x
.ad74	b5 29		lda $29,x			lda DStack+5,x	; MSB of original u
.ad76	f5 25		sbc $25,x			sbc DStack+1,x
.ad78	95 29		sta $29,x			sta DStack+5,x
.ad7a	18		clc				clc
.ad7b	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of original addr
.ad7d	75 24		adc $24,x			adc DStack+0,x
.ad7f	95 2a		sta $2a,x			sta DStack+6,x
.ad81	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of original addr
.ad83	75 25		adc $25,x			adc DStack+1,x
.ad85	95 2b		sta $2b,x			sta DStack+7,x
.ad87	20 1c c6	jsr $c61c			jsr Two_swap		; ( addr-s u-s addr u )
.ad8a	20 b7 c5	jsr $c5b7			jsr Minus_leading
.ad8d	20 1c c6	jsr $c61c			jsr Two_swap		; ( addr u addr-s u-s )
.ad90					_done:
.ad90	20 1e c5	jsr $c51e			jsr R_To_Input
=78					CL	.var *-(WordListLink+wh_Xt)
=$ad93					en = *	; remember here
>ad43	4e					.byte CL	;wh_CodeLength
.ad93	60		rts				rts
>ad94	48 65 78 53 74 6f 72 65		L1:	.text "HexStore"	;  name of word as a string, ending at wh_NameLastChar
>ad9c	a8					.byte (("HexStore"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ad9d	c0 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad9f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ada0	18					.byte UF+NN	;wh_Flags	dictionary flags
=44316					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ada1					Hexstore:
.ada1	20 27 b5	jsr $b527			jsr underflow_3
.ada4	20 85 d0	jsr $d085			jsr Dup		; Save copy of original address
.ada7	20 43 c7	jsr $c743			jsr Two_to_r		; ( addr1 u1 ) ( R: addr2 addr2 )
.adaa					_loop:
.adaa	b5 24		lda $24,x			lda DStack+0,x
.adac	15 25		ora $25,x			ora DStack+1,x
.adae	f0 37		beq $ade7			beq _done
.adb0	20 45 ad	jsr $ad45			jsr Cleave		; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.adb3	20 43 c7	jsr $c743			jsr Two_to_r
.adb6	20 ff b8	jsr $b8ff			jsr Zero
.adb9	20 ff b8	jsr $b8ff			jsr Zero
.adbc	20 1e c7	jsr $c71e			jsr Two_r_from	; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.adbf	20 2a b1	jsr $b12a			jsr To_Number	; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.adc2	b5 24		lda $24,x			lda DStack+0,x
.adc4	15 25		ora $25,x			ora DStack+1,x
.adc6	d0 18		bne $ade0			bne _have_chars_left
.adc8	20 0a c6	jsr $c60a			jsr Two_drop		; ( addr1 u1 n n ) ( R: addr2 addr2 )
.adcb	20 37 c1	jsr $c137			jsr D_To_S		; ( addr1 u1 n ) ( R: addr2 addr2 )
.adce	20 45 d0	jsr $d045			jsr R_Fetch		; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.add1	20 8e ce	jsr $ce8e			jsr C_Store		; ( addr1 u1 ) ( R: addr2 addr2 )
.add4	20 29 d0	jsr $d029			jsr R_From		; R>
.add7	20 65 cb	jsr $cb65			jsr One_plus		; 1+
.adda	20 0a d0	jsr $d00a			jsr To_R		; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.addd	4c aa ad	jmp $adaa			jmp _loop
.ade0					_have_chars_left:
.ade0	8a		txa				txa
.ade1	18		clc				clc
.ade2	69 08		adc #$08			adc #8
.ade4	aa		tax				tax
.ade5	d0 c3		bne $adaa			bne _loop
.ade7					_done:
.ade7	e8		inx				inx
.ade8	e8		inx				inx
.ade9	e8		inx				inx
.adea	e8		inx				inx			; 2DROP
.adeb	20 1e c7	jsr $c71e			jsr Two_r_from		; ( addr2+n addr2 )
.adee	20 a3 d0	jsr $d0a3			jsr Swap
.adf1	4c d2 cc	jmp $ccd2			jmp Minus		; ( n )
=83					CL	.var *-(WordListLink+wh_Xt)
=$adf4					en = *	; remember here
>ad9f	53					.byte CL	;wh_CodeLength
>adf4	57 69 74 68 69 6e		L1:	.text "Within"	;  name of word as a string, ending at wh_NameLastChar
>adfa	c6					.byte (("Within"[-1]&7)<<5)+(*-L1)	;wh_HNL
>adfb	1c ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>adfd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>adfe	18					.byte UF+NN	;wh_Flags	dictionary flags
=44410					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.adff					Within:
.adff	20 27 b5	jsr $b527			jsr underflow_3
.ae02	20 5c d0	jsr $d05c			jsr Over
.ae05	20 d2 cc	jsr $ccd2			jsr Minus
.ae08	20 0a d0	jsr $d00a			jsr To_R
.ae0b	20 d2 cc	jsr $ccd2			jsr Minus
.ae0e	20 29 d0	jsr $d029			jsr R_From
.ae11	4c 87 c9	jmp $c987			jmp U_Less_Than
=21					CL	.var *-(WordListLink+wh_Xt)
=$ae14					en = *	; remember here
>adfd	15					.byte CL	;wh_CodeLength
>ae14	5c				L1:	.text "\"	;  name of word as a string, ending at wh_NameLastChar
>ae15	81					.byte (("\"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ae16	7a ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae18	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae19	0c					.byte IM+NN	;wh_Flags	dictionary flags
=44437					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae1a					Backslash:
.ae1a	ad 0c 03	lda $030c			lda BlkV+0		; interpreting a block?
.ae1d	0d 0d 03	ora $030d			ora BlkV+1
.ae20	f0 16		beq $ae38			beq _not_block
.ae22	a5 08		lda $08				lda toin+0
.ae24	29 3f		and #$3f			and #$3F
.ae26	c9 02		cmp #$02			cmp #2
.ae28	90 16		bcc $ae40			bcc _rts
.ae2a	a5 08		lda $08		                lda toin+0		; Move toin to next multiple of 64.
.ae2c	29 c0		and #$c0	                and #$C0        	;   Clear lower bits to move to beginning of line.
.ae2e	18		clc		                clc             	;   Add $40 (64 decimal) to move to next line.
.ae2f	69 40		adc #$40	                adc #$40
.ae31	85 08		sta $08		                sta toin+0
.ae33	90 0b		bcc $ae40	                bcc _rts
.ae35	e6 09		inc $09		                inc toin+1
.ae37	60		rts				rts
.ae38					_not_block:
.ae38	a5 06		lda $06		                lda ciblen+0
.ae3a	85 08		sta $08		                sta toin+0
.ae3c	a5 07		lda $07		                lda ciblen+1
.ae3e	85 09		sta $09		                sta toin+1
=38					CL	.var *-(WordListLink+wh_Xt)
=$ae40					en = *	; remember here
>ae18	26					.byte CL	;wh_CodeLength
.ae40	60		rts		_rts:		rts
>ae41	4d 6f 76 65			L1:	.text "Move"	;  name of word as a string, ending at wh_NameLastChar
>ae45	a4					.byte (("Move"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ae46	95 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae48	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae49	18					.byte NN+UF	;wh_Flags	dictionary flags
=44485					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae4a					Move:
.ae4a	b5 27		lda $27,x			lda DStack+3,x		; MSB of addr2
.ae4c	d5 29		cmp $29,x			cmp DStack+5,x		; MSB of addr1
.ae4e	d0 04		bne $ae54			bne _ne
.ae50	b5 26		lda $26,x			lda DStack+2,x		; LSB of addr2
.ae52	d5 28		cmp $28,x			cmp DStack+4,x		; LSB of addr1
.ae54	90 5a		bcc $aeb0	_ne:		bcc CMove
.ae56	d0 11		bne $ae69			bne CMove_up
.ae58	8a		txa		ThreeDrop:	txa		; drop three entries from Data Stack
.ae59	18		clc				clc
.ae5a	69 06		adc #$06			adc #6
.ae5c	aa		tax				tax
=19					CL	.var *-(WordListLink+wh_Xt)
=$ae5d					en = *	; remember here
>ae48	13					.byte CL	;wh_CodeLength
.ae5d	60		rts				rts
>ae5e	43 4d 6f 76 65 3e		L1:	.text "CMove>"	;  name of word as a string, ending at wh_NameLastChar
>ae64	c6					.byte (("CMove>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ae65	c5 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae67	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae68	18					.byte UF+NN	;wh_Flags	dictionary flags
=44516					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae69					CMove_up:
.ae69	20 27 b5	jsr $b527			jsr underflow_3
.ae6c	b5 26		lda $26,x			lda DStack+2,x
.ae6e	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.ae70	b5 27		lda $27,x			lda DStack+3,x
.ae72	18		clc				clc
.ae73	75 25		adc $25,x			adc DStack+1,x
.ae75	85 17		sta $17				sta tmp2+1	; point to last page of destination
.ae77	b5 28		lda $28,x			lda DStack+4,x
.ae79	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.ae7b	b5 29		lda $29,x			lda DStack+5,x
.ae7d	18		clc				clc
.ae7e	75 25		adc $25,x			adc DStack+1,x
.ae80	85 15		sta $15				sta tmp1+1	; point to last page of source
.ae82	f6 25		inc $25,x			inc DStack+1,x	; allows us to use bne with dec DStack+1,x below
.ae84	b4 24		ldy $24,x			ldy DStack+0,x	; length of last page
.ae86	f0 10		beq $ae98			beq _nopartial
.ae88					_outerloop:
.ae88	88		dey				dey
.ae89	f0 07		beq $ae92			beq _finishpage
.ae8b					_innerloop:
.ae8b	b1 14		lda ($14),y			lda (tmp1),y
.ae8d	91 16		sta ($16),y			sta (tmp2),y
.ae8f	88		dey				dey
.ae90	d0 f9		bne $ae8b			bne _innerloop
.ae92					_finishpage:
.ae92	a0 00		ldy #$00			ldy #0
.ae94	b1 14		lda ($14),y			lda (tmp1),y	; handle y = 0 separately
.ae96	91 16		sta ($16),y			sta (tmp2),y
.ae98					_nopartial:
.ae98	c6 15		dec $15				dec tmp1+1	; back up to previous pages
.ae9a	c6 17		dec $17				dec tmp2+1
.ae9c	d6 25		dec $25,x			dec DStack+1,x
.ae9e	d0 e8		bne $ae88			bne _outerloop
.aea0					_done:
.aea0	4c 58 ae	jmp $ae58			jmp ThreeDrop	; clear up the stack and leave
=58					CL	.var *-(WordListLink+wh_Xt)
=$aea3					en = *	; remember here
>ae67	3a					.byte CL	;wh_CodeLength
.aea3	4c 31 b5	jmp $b531	Throw_Stack_14: jmp Throw_Stack
>aea6	43 4d 6f 76 65			L1:	.text "CMove"	;  name of word as a string, ending at wh_NameLastChar
>aeab	a5					.byte (("CMove"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aeac	e4 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aeae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aeaf	18					.byte UF+NN	;wh_Flags	dictionary flags
=44587					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aeb0					CMove:
.aeb0	20 27 b5	jsr $b527			jsr underflow_3
.aeb3	b5 26		lda $26,x			lda DStack+2,x
.aeb5	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.aeb7	b5 27		lda $27,x			lda DStack+3,x
.aeb9	85 17		sta $17				sta tmp2+1
.aebb	b5 28		lda $28,x			lda DStack+4,x
.aebd	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.aebf	b5 29		lda $29,x			lda DStack+5,x
.aec1	85 15		sta $15				sta tmp1+1
.aec3	a0 00		ldy #$00			ldy #0
.aec5	b5 25		lda $25,x			lda DStack+1,x	; number of whole pages to move
.aec7	f0 0f		beq $aed8			beq _dopartial
.aec9					_page:
.aec9	b1 14		lda ($14),y			lda (tmp1),y
.aecb	91 16		sta ($16),y			sta (tmp2),y
.aecd	c8		iny				iny
.aece	d0 f9		bne $aec9			bne _page
.aed0	e6 15		inc $15				inc tmp1+1
.aed2	e6 17		inc $17				inc tmp2+1
.aed4	d6 25		dec $25,x			dec DStack+1,x
.aed6	d0 f1		bne $aec9			bne _page
.aed8					_dopartial:
.aed8	b5 24		lda $24,x			lda DStack+0,x	; length of last page
.aeda	f0 09		beq $aee5			beq _done
.aedc					_partial:
.aedc	b1 14		lda ($14),y			lda (tmp1),y
.aede	91 16		sta ($16),y			sta (tmp2),y
.aee0	c8		iny				iny
.aee1	d6 24		dec $24,x			dec DStack+0,x
.aee3	d0 f7		bne $aedc			bne _partial
.aee5	4c 58 ae	jmp $ae58	_done:		jmp ThreeDrop	; clear the stack
=56					CL	.var *-(WordListLink+wh_Xt)
=$aee8					en = *	; remember here
>aeae	38					.byte CL	;wh_CodeLength
>aee8	55 4d 2a			L1:	.text "UM*"	;  name of word as a string, ending at wh_NameLastChar
>aeeb	43					.byte (("UM*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aeec	2b ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aeee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aeef	08					.byte NN	;wh_Flags	dictionary flags
=44651					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aef0					UM_Star:
.aef0	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.aef2	b0 af		bcs $aea3		bcs Throw_Stack_14
.aef4	18		clc				clc		; tmp2= divsor-1
.aef5	b5 24		lda $24,x			lda DStack+0,x
.aef7	e9 00		sbc #$00			sbc #0
.aef9	85 16		sta $16				sta tmp2+0
.aefb	b5 25		lda $25,x			lda DStack+1,x
.aefd	e9 00		sbc #$00			sbc #0
.aeff	85 17		sta $17				sta tmp2+1
.af01	90 2e		bcc $af31			bcc _zero	; is divisor zero?
.af03	a9 00		lda #$00			lda #0
.af05	85 14		sta $14				sta tmp1
.af07	86 18		stx $18				stx tmp3	; tested for exit from outer loop
.af09	ca		dex				dex
.af0a	ca		dex				dex
.af0b					_outer_loop:
.af0b	a0 08		ldy #$08			ldy #8		; counter inner loop
.af0d	56 28		lsr $28,x			lsr DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.af0f					_inner_loop:
.af0f	90 0c		bcc $af1d			bcc _no_add
.af11	85 15		sta $15				sta tmp1+1	; save time, don't CLC
.af13	a5 14		lda $14				lda tmp1
.af15	65 16		adc $16				adc tmp2
.af17	85 14		sta $14				sta tmp1
.af19	a5 15		lda $15				lda tmp1+1
.af1b	65 17		adc $17				adc tmp2+1
.af1d					_no_add:
.af1d	6a		ror a				ror
.af1e	66 14		ror $14				ror tmp1
.af20	76 28		ror $28,x			ror DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.af22	88		dey				dey
.af23	d0 ea		bne $af0f			bne _inner_loop ; go back for one more shift?
.af25	e8		inx				inx
.af26	e4 18		cpx $18				cpx tmp3
.af28	d0 e1		bne $af0b			bne _outer_loop ; go back for eight more shifts?
.af2a	95 25		sta $25,x			sta DStack+1,x
.af2c	a5 14		lda $14				lda tmp1
.af2e	95 24		sta $24,x			sta DStack+0,x
.af30	60		rts				rts
.af31	a9 00		lda #$00	_zero:		lda #0
.af33	95 26		sta $26,x			sta DStack+2,x
.af35	95 27		sta $27,x			sta DStack+3,x
.af37	60		rts				rts
=72					CL	.var *-(WordListLink+wh_Xt)
=$af38					en = *	; remember here
>aeee	48					.byte CL	;wh_CodeLength
>af38	4d 2a				L1:	.text "M*"	;  name of word as a string, ending at wh_NameLastChar
>af3a	42					.byte (("M*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af3b	6b ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af3d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af3e	08					.byte NN	;wh_Flags	dictionary flags
=44730					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af3f					M_Star:
.af3f	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.af41	b0 6d		bcs $afb0		bcs Throw_Stack_15
.af43	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.af45	55 27		eor $27,x			eor DStack+3,x	; MSB of n2
.af47	08		php				php
.af48	20 a2 c7	jsr $c7a2			jsr Abs
.af4b	20 a3 d0	jsr $d0a3			jsr Swap
.af4e	20 a2 c7	jsr $c7a2			jsr Abs
.af51	20 f0 ae	jsr $aef0			jsr UM_Star		; ( d )
.af54	28		plp				plp			; handle the sign
.af55	10 03		bpl $af5a			bpl +
.af57	4c ba c7	jmp $c7ba			jmp DNegate
.af5a					+
=27					CL	.var *-(WordListLink+wh_Xt)
=$af5a					en = *	; remember here
>af3d	1b					.byte CL	;wh_CodeLength
.af5a	60		rts				rts
>af5b	2a				L1:	.text "*"	;  name of word as a string, ending at wh_NameLastChar
>af5c	41					.byte (("*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af5d	ba ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af5f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af60	00					.byte 0	;wh_Flags	dictionary flags
=44764					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af61					Star:
.af61	20 f0 ae	jsr $aef0			jsr UM_Star
.af64	e8		inx				inx		; D>S	drop hi cell
.af65	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$af66					en = *	; remember here
>af5f	05					.byte CL	;wh_CodeLength
.af66	60		rts				rts
>af67	55 4d 2f 4d 6f 64		L1:	.text "UM/Mod"	;  name of word as a string, ending at wh_NameLastChar
>af6d	86					.byte (("UM/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af6e	dc ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af70	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af71	08					.byte NN	;wh_Flags	dictionary flags
=44781					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af72					UM_Slash_Mod:
.af72	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.af74	b0 3a		bcs $afb0		bcs Throw_Stack_15
.af76	b5 24		lda $24,x			lda DStack+0,x		; catch division by zero
.af78	15 25		ora $25,x			ora DStack+1,x
.af7a	f0 2f		beq $afab			beq _DivByZero
.af7c	a0 10		ldy #$10			ldy #16			; for 16 bits
.af7e					_loop:
.af7e	36 28		rol $28,x			rol DStack+4,x		;   rotate low cell of dividend one bit left
.af80	36 29		rol $29,x			rol DStack+5,x
.af82	36 26		rol $26,x			rol DStack+2,x		;   rotate high cell of dividend one bit left
.af84	36 27		rol $27,x			rol DStack+3,x
.af86	b0 0a		bcs $af92			bcs _subtract		;   overflow?
.af88	b5 26		lda $26,x			lda DStack+2,x		;   dividend.hi >= divisor?
.af8a	d5 24		cmp $24,x			cmp DStack+0,x
.af8c	b5 27		lda $27,x			lda DStack+3,x
.af8e	f5 25		sbc $25,x			sbc DStack+1,x
.af90	90 0d		bcc $af9f			bcc _next
.af92	b5 26		lda $26,x	_subtract:	lda DStack+2,x		;   dividend.hi -= divisor
.af94	f5 24		sbc $24,x			sbc DStack+0,x
.af96	95 26		sta $26,x			sta DStack+2,x
.af98	b5 27		lda $27,x			lda DStack+3,x
.af9a	f5 25		sbc $25,x			sbc DStack+1,x
.af9c	95 27		sta $27,x			sta DStack+3,x
.af9e	38		sec				sec			;   it always fits
.af9f	88		dey		_next:		dey			;  next
.afa0	d0 dc		bne $af7e			bne _loop
.afa2	36 28		rol $28,x			rol DStack+4,x		; finish rotating quotient bit in
.afa4	36 29		rol $29,x			rol DStack+5,x
.afa6	e8		inx				inx			; drop divisor
.afa7	e8		inx				inx
.afa8	4c a3 d0	jmp $d0a3			jmp Swap
.afab	a9 f6		lda #$f6	_DivByZero:	lda #$100+err_DivideBy0
.afad	4c 6c b5	jmp $b56c			jmp ThrowA
=62					CL	.var *-(WordListLink+wh_Xt)
=$afb0					en = *	; remember here
>af70	3e					.byte CL	;wh_CodeLength
.afb0	4c 31 b5	jmp $b531	Throw_Stack_15: jmp Throw_Stack
>afb3	53 4d 2f 52 65 6d		L1:	.text "SM/Rem"	;  name of word as a string, ending at wh_NameLastChar
>afb9	a6					.byte (("SM/Rem"[-1]&7)<<5)+(*-L1)	;wh_HNL
>afba	ed ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>afbc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>afbd	08					.byte NN	;wh_Flags	dictionary flags
=44857					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.afbe					SM_Slash_Rem:
.afbe	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.afc0	b0 ee		bcs $afb0		bcs Throw_Stack_15
.afc2	b5 27		lda $27,x			lda DStack+3,x
.afc4	08		php				php
.afc5	55 25		eor $25,x			eor DStack+1,x
.afc7	08		php				php
.afc8	20 a2 c7	jsr $c7a2			jsr Abs
.afcb	e8		inx				inx		; pretend we pushed n1 to R
.afcc	e8		inx				inx
.afcd	20 d7 c7	jsr $c7d7			jsr DAbs
.afd0	ca		dex				dex
.afd1	ca		dex				dex
.afd2	20 72 af	jsr $af72			jsr UM_Slash_Mod	; UM/MOD
.afd5	28		plp				plp
.afd6	10 03		bpl $afdb			bpl +
.afd8	20 89 c7	jsr $c789			jsr Negate
.afdb					+
.afdb	28		plp				plp
.afdc	10 07		bpl $afe5			bpl _done
.afde	e8		inx				inx		; pretend we pushed quotient to R
.afdf	e8		inx				inx
.afe0	20 89 c7	jsr $c789			jsr Negate
.afe3	ca		dex				dex
.afe4	ca		dex				dex
.afe5					_done:
=39					CL	.var *-(WordListLink+wh_Xt)
=$afe5					en = *	; remember here
>afbc	27					.byte CL	;wh_CodeLength
.afe5	60		rts				rts
>afe6	46 4d 2f 4d 6f 64		L1:	.text "FM/Mod"	;  name of word as a string, ending at wh_NameLastChar
>afec	86					.byte (("FM/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>afed	39 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>afef	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aff0	08					.byte NN	;wh_Flags	dictionary flags
=44908					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aff1					FM_Slash_Mod:
.aff1	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.aff3	b0 bb		bcs $afb0		bcs Throw_Stack_15
.aff5	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.aff7	08		php				php		;  save sign
.aff8	10 0a		bpl $b004			bpl +
.affa	20 89 c7	jsr $c789			jsr Negate	; NEGATE
.affd	e8		inx				inx
.affe	e8		inx				inx
.afff	20 ba c7	jsr $c7ba			jsr DNegate	; DNEGATE
.b002	ca		dex				dex
.b003	ca		dex				dex
.b004					+
.b004	b5 27		lda $27,x			lda DStack+3,x	; MSB of high word of d
.b006	10 0d		bpl $b015			bpl +
.b008	18		clc				clc
.b009	b5 24		lda $24,x			lda DStack+0,x	; LSB of n1
.b00b	75 26		adc $26,x			adc DStack+2,x	; LSB of dh
.b00d	95 26		sta $26,x			sta DStack+2,x
.b00f	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.b011	75 27		adc $27,x			adc DStack+3,x	; MSB of dh
.b013	95 27		sta $27,x			sta DStack+3,x
.b015					+
.b015	20 72 af	jsr $af72			jsr UM_Slash_Mod	; ( d n1 -- rem n2 )
.b018	28		plp				plp
.b019	10 07		bpl $b022			bpl +
.b01b	e8		inx				inx		; pretend that we SWAP
.b01c	e8		inx				inx
.b01d	20 89 c7	jsr $c789			jsr Negate
.b020	ca		dex				dex
.b021	ca		dex				dex
.b022					+
=49					CL	.var *-(WordListLink+wh_Xt)
=$b022					en = *	; remember here
>afef	31					.byte CL	;wh_CodeLength
.b022	60		rts				rts
>b023	2f 4d 6f 64			L1:	.text "/Mod"	;  name of word as a string, ending at wh_NameLastChar
>b027	84					.byte (("/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b028	6c af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b02a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b02b	08					.byte NN	;wh_Flags	dictionary flags
=44967					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b02c	20 85 d0	jsr $d085	Slash_Mod:	jsr Dup			; ( n1 n_div n_div )
.b02f	a0 00		ldy #$00			ldy #0			; sign extend n1
.b031	b5 29		lda $29,x			lda DStack+5,x
.b033	10 01		bpl $b036			bpl +
.b035	88		dey				dey
.b036	94 26		sty $26,x	+		sty DStack+2,x
.b038	94 27		sty $27,x			sty DStack+3,x		; ( d1 n_div )
.b03a	4c be af	jmp $afbe			jmp SM_Slash_Rem	; SM/REM
=17					CL	.var *-(WordListLink+wh_Xt)
=$b03d					en = *	; remember here
>b02a	11					.byte CL	;wh_CodeLength
>b03d	2f				L1:	.text "/"	;  name of word as a string, ending at wh_NameLastChar
>b03e	e1					.byte (("/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b03f	a7 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b041	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b042	08					.byte NN	;wh_Flags	dictionary flags
=44990					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b043	20 2c b0	jsr $b02c	Slash:		jsr Slash_Mod
.b046	4c 91 ca	jmp $ca91			jmp Nip		; Nip remainder
=6					CL	.var *-(WordListLink+wh_Xt)
=$b049					en = *	; remember here
>b041	06					.byte CL	;wh_CodeLength
>b049	4d 6f 64			L1:	.text "Mod"	;  name of word as a string, ending at wh_NameLastChar
>b04c	83					.byte (("Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b04d	be af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b04f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b050	00					.byte 0	;wh_Flags	dictionary flags
=45004					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b051	20 2c b0	jsr $b02c	Mod:		jsr Slash_Mod
.b054	e8		inx				inx		; Drop quotient
.b055	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$b056					en = *	; remember here
>b04f	05					.byte CL	;wh_CodeLength
.b056	60		rts				rts
>b057	2a 2f 4d 6f 64			L1:	.text "*/Mod"	;  name of word as a string, ending at wh_NameLastChar
>b05c	85					.byte (("*/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b05d	cc af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b05f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b060	18					.byte UF+NN	;wh_Flags	dictionary flags
=45020					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b061					Star_Slash_Mod:
.b061	20 27 b5	jsr $b527			jsr underflow_3
.b064	20 0a d0	jsr $d00a			jsr To_R
.b067	20 3f af	jsr $af3f			jsr M_Star
.b06a	20 29 d0	jsr $d029			jsr R_From
.b06d	4c be af	jmp $afbe			jmp SM_Slash_Rem
=15					CL	.var *-(WordListLink+wh_Xt)
=$b070					en = *	; remember here
>b05f	0f					.byte CL	;wh_CodeLength
>b070	2a 2f				L1:	.text "*/"	;  name of word as a string, ending at wh_NameLastChar
>b072	e2					.byte (("*/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b073	dc af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b075	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b076	08					.byte NN	;wh_Flags	dictionary flags
=45042					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b077					Star_Slash:
.b077	20 61 b0	jsr $b061			jsr Star_Slash_Mod
.b07a	4c 91 ca	jmp $ca91			jmp Nip			; mod
=6					CL	.var *-(WordListLink+wh_Xt)
=$b07d					en = *	; remember here
>b075	06					.byte CL	;wh_CodeLength
>b07d	4d 2a 2f			L1:	.text "M*/"	;  name of word as a string, ending at wh_NameLastChar
>b080	e3					.byte (("M*/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b081	f2 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b083	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b084	08					.byte NN	;wh_Flags	dictionary flags
=45056					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b085					m_star_slash:
.b085	20 2c b5	jsr $b52c	                jsr underflow_4
.b088	b5 24		lda $24,x			lda DStack+0,x		; calc result sign
.b08a	55 26		eor $26,x			eor DStack+2,x
.b08c	55 28		eor $28,x			eor DStack+4,x
.b08e	08		php				php
.b08f	20 a2 c7	jsr $c7a2	                jsr Abs			; Abs
.b092	20 0a d0	jsr $d00a	                jsr To_R		; >R		( d1 n1 ) ( R: sign abs(n2) )
.b095	20 a2 c7	jsr $c7a2	                jsr Abs			; Abs
.b098	20 0a d0	jsr $d00a	                jsr To_R		; >R		( d1 ) ( R: sign abs(n2) abs(n1) )
.b09b	20 d7 c7	jsr $c7d7	                jsr DAbs		; DAbs		( abs(d1) ) ( R: sign abs(n2) abs(n1) )
.b09e	20 a3 d0	jsr $d0a3	                jsr Swap		; Swap
.b0a1	20 45 d0	jsr $d045	                jsr R_Fetch		; R@
.b0a4	20 f0 ae	jsr $aef0	                jsr UM_Star		; UM*
.b0a7	20 89 cf	jsr $cf89	                jsr Rot			; Rot
.b0aa	20 29 d0	jsr $d029	                jsr R_From		; R>
.b0ad	20 f0 ae	jsr $aef0	                jsr UM_Star		; UM*
.b0b0	20 89 cf	jsr $cf89	                jsr Rot			; Rot
.b0b3	20 7e cb	jsr $cb7e	                jsr UMPlus		; 0 D+
.b0b6	20 45 d0	jsr $d045	                jsr R_Fetch		; R@
.b0b9	20 72 af	jsr $af72	                jsr UM_Slash_Mod	; UM/Mod
.b0bc	20 af cf	jsr $cfaf	                jsr Not_Rot		; Rot Rot
.b0bf	20 29 d0	jsr $d029	                jsr R_From		; R>
.b0c2	20 72 af	jsr $af72	                jsr UM_Slash_Mod	; UM/Mod
.b0c5	20 91 ca	jsr $ca91	                jsr Nip			; Swap Drop
.b0c8	20 a3 d0	jsr $d0a3	                jsr Swap		; Swap
.b0cb	28		plp				plp
.b0cc	10 03		bpl $b0d1			bpl _rts		; ... 0< if ...
.b0ce	4c ba c7	jmp $c7ba	                jmp DNegate
.b0d1	60		rts		_rts:		rts
=77					CL	.var *-(WordListLink+wh_Xt)
=$b0d2					en = *	; remember here
>b083	4d					.byte CL	;wh_CodeLength
>b0d2	45 76 61 6c 75 61 74 65		L1:	.text "Evaluate"	;  name of word as a string, ending at wh_NameLastChar
>b0da	a8					.byte (("Evaluate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b0db	00 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b0dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b0de	08					.byte NN	;wh_Flags	dictionary flags
=45146					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b0df					Evaluate:
.b0df	18		clc				clc			; signal to zero BLK.
.b0e0					load_evaluate:
.b0e0	ad 0d 03	lda $030d			lda BlkV+1	; Save the current value of BLK on the return stack.
.b0e3	48		pha				pha
.b0e4	ad 0c 03	lda $030c			lda BlkV+0
.b0e7	48		pha				pha
.b0e8	b0 08		bcs $b0f2			bcs +		; See if we should zero BLK.
.b0ea	a9 00		lda #$00			lda #0		; Set BLK to zero.
.b0ec	8d 0c 03	sta $030c			sta BlkV+0
.b0ef	8d 0d 03	sta $030d			sta BlkV+1
.b0f2					+
.b0f2	20 fc c4	jsr $c4fc			jsr Input_To_R	; Save the input state to the Return Stack
.b0f5	a9 ff		lda #$ff			lda #$ff	; SOURCE-ID= -1
.b0f7	85 02		sta $02				sta insrc+0
.b0f9	85 03		sta $03				sta insrc+1
.b0fb	a9 00		lda #$00			lda #0		; >IN= zero
.b0fd	85 08		sta $08				sta toin+0
.b0ff	85 09		sta $09				sta toin+1
.b101	20 e3 b4	jsr $b4e3			jsr PopYA	; ciblen= string length (u)
.b104	85 06		sta $06				sta ciblen+0
.b106	84 07		sty $07				sty ciblen+1
.b108	20 e3 b4	jsr $b4e3			jsr PopYA	; cib= string addr
.b10b	85 04		sta $04				sta cib+0
.b10d	84 05		sty $05				sty cib+1
.b10f	20 26 b6	jsr $b626			jsr interpret	; ( -- )
.b112	20 1e c5	jsr $c51e			jsr R_To_Input	; restore input state
.b115	68		pla				pla		; Restore BLK from the return stack.
.b116	8d 0c 03	sta $030c			sta BlkV+0
.b119	68		pla				pla
.b11a	8d 0d 03	sta $030d			sta BlkV+1
=62					CL	.var *-(WordListLink+wh_Xt)
=$b11d					en = *	; remember here
>b0dd	3e					.byte CL	;wh_CodeLength
.b11d	60		rts				rts
>b11e	3e 4e 75 6d 62 65 72		L1:	.text ">Number"	;  name of word as a string, ending at wh_NameLastChar
>b125	47					.byte ((">Number"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b126	5a b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b128	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b129	18					.byte UF+NN	;wh_Flags	dictionary flags
=45221					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b12a					To_Number:
.b12a	20 2c b5	jsr $b52c			jsr underflow_4
.b12d	b5 24		lda $24,x			lda DStack+0,x		; no chars left?
.b12f	f0 72		beq $b1a3			beq _done
.b131					_Char_loop:
.b131	a1 26		lda ($26,x)			lda (DStack+2,x)		; Get next character
.b133	c9 30		cmp #$30			cmp #'0'		; convert to value (Digit_Question)
.b135	90 6c		bcc $b1a3			bcc _done
.b137	c9 3a		cmp #$3a			cmp #'9'+1
.b139	90 08		bcc $b143			bcc _digit
.b13b	29 df		and #$df			and #$df		;   ASCII uppercase
.b13d	c9 41		cmp #$41			cmp #'A'
.b13f	90 62		bcc $b1a3			bcc _done
.b141	e9 07		sbc #$07			sbc #7 ;'A'-'0'-10	;   to make 'A'=10 below
.b143	38		sec		_digit:		sec
.b144	e9 30		sbc #$30			sbc #'0'
.b146	cd 00 03	cmp $0300			cmp base		; must be < base
.b149	b0 58		bcs $b1a3			bcs _done
.b14b	48		pha				pha			; Save char value
.b14c	20 3e c6	jsr $c63e			jsr Two_Over		;   copy ud to work (multiplicand)
.b14f	a9 00		lda #$00			lda #0			;   zero ud (product)
.b151	95 2c		sta $2c,x			sta DStack+8,x
.b153	95 2d		sta $2d,x			sta DStack+9,x
.b155	95 2e		sta $2e,x			sta DStack+10,x
.b157	95 2f		sta $2f,x			sta DStack+11,x
.b159	ad 00 03	lda $0300			lda base		;   get multiplier
.b15c	d0 23		bne $b181			bne _Mul_Test
.b15e	48		pha		_Mul_Add:	pha			;   save multiplier
.b15f	18		clc				clc			;   ud += work
.b160	b5 26		lda $26,x			lda DStack+2,x
.b162	75 2e		adc $2e,x			adc DStack+10,x
.b164	95 2e		sta $2e,x			sta DStack+10,x
.b166	b5 27		lda $27,x			lda DStack+3,x
.b168	75 2f		adc $2f,x			adc DStack+11,x
.b16a	95 2f		sta $2f,x			sta DStack+11,x
.b16c	b5 24		lda $24,x			lda DStack+0,x
.b16e	75 2c		adc $2c,x			adc DStack+8,x
.b170	95 2c		sta $2c,x			sta DStack+8,x
.b172	b5 25		lda $25,x			lda DStack+1,x
.b174	75 2d		adc $2d,x			adc DStack+9,x
.b176	95 2d		sta $2d,x			sta DStack+9,x
.b178	68		pla				pla			;   restore multiplier
.b179	16 26		asl $26,x	_Mul_Shift:	asl DStack+2,x		;   work <<= 1
.b17b	36 27		rol $27,x			rol DStack+3,x
.b17d	36 24		rol $24,x			rol DStack+0,x
.b17f	36 25		rol $25,x			rol DStack+1,x
.b181	4a		lsr a		_Mul_Test:	lsr a			;   shift multiplier
.b182	b0 da		bcs $b15e			bcs _Mul_Add
.b184	d0 f3		bne $b179			bne _Mul_Shift
.b186	e8		inx				inx			;   2Drop work
.b187	e8		inx				inx
.b188	e8		inx				inx
.b189	e8		inx				inx
.b18a	68		pla				pla			; recover value
.b18b	18		clc				clc			; add to ud
.b18c	75 2a		adc $2a,x			adc DStack+6,x
.b18e	95 2a		sta $2a,x			sta DStack+6,x
.b190	90 0a		bcc $b19c			bcc +
.b192	f6 2b		inc $2b,x			inc DStack+7,x
.b194	d0 06		bne $b19c			bne +
.b196	f6 28		inc $28,x			inc DStack+4,x
.b198	d0 02		bne $b19c			bne +
.b19a	f6 29		inc $29,x			inc DStack+5,x
.b19c					+
.b19c	20 6f cb	jsr $cb6f			jsr NOS_One_Plus	; consume the char
.b19f	d6 24		dec $24,x			dec DStack+0,x
.b1a1	d0 8e		bne $b131			bne _Char_loop
.b1a3					_done:
=121					CL	.var *-(WordListLink+wh_Xt)
=$b1a3					en = *	; remember here
>b128	79					.byte CL	;wh_CodeLength
.b1a3	60		rts				rts
>b1a4	4e 75 6d 62 65 72		L1:	.text "Number"	;  name of word as a string, ending at wh_NameLastChar
>b1aa	46					.byte (("Number"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b1ab	a5 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b1ad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b1ae	18					.byte UF+NN	;wh_Flags	dictionary flags
=45354					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b1af					Number:
.b1af	20 22 b5	jsr $b522			jsr underflow_2
.b1b2	a9 00		lda #$00			lda #0
.b1b4	85 1a		sta $1a				sta tmp4+0	; flag for double
.b1b6	85 1b		sta $1b				sta tmp4+1	; flag for minus
.b1b8	ad 00 03	lda $0300			lda base
.b1bb	48		pha				pha
.b1bc	20 c9 cd	jsr $cdc9			jsr Two_dup		; ( addr u addr u )
.b1bf	a1 26		lda ($26,x)			lda (DStack+2,x)	; get 1st char
.b1c1	20 83 b2	jsr $b283			jsr _MinusCheck		; a minus sign?
.b1c4	a0 0a		ldy #$0a			ldy #10			; decimal?
.b1c6	c9 23		cmp #$23			cmp #'#'
.b1c8	f0 35		beq $b1ff			beq _base_changed
.b1ca	a0 10		ldy #$10			ldy #16			; hex?
.b1cc	c9 24		cmp #$24			cmp #'$'
.b1ce	f0 2f		beq $b1ff			beq _base_changed
.b1d0	a0 02		ldy #$02			ldy #2			; binary?
.b1d2	c9 25		cmp #$25			cmp #'%'
.b1d4	f0 29		beq $b1ff			beq _base_changed
.b1d6	c9 27		cmp #$27			cmp #$27		; ASCII for "'"
.b1d8	d0 2f		bne $b209			bne _check_dot
.b1da	b5 24		lda $24,x			lda DStack+0,x	; length=3 ?
.b1dc	c9 03		cmp #$03			cmp #3
.b1de	d0 1c		bne $b1fc			bne _not_a_char
.b1e0	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b1e2	85 1c		sta $1c				sta tmp5
.b1e4	b5 27		lda $27,x			lda DStack+3,x
.b1e6	85 1d		sta $1d				sta tmp5+1
.b1e8	a0 02		ldy #$02			ldy #2
.b1ea	b1 1c		lda ($1c),y			lda (tmp5),y
.b1ec	c9 27		cmp #$27			cmp #$27	; ASCII for "'"
.b1ee	d0 0c		bne $b1fc			bne _not_a_char
.b1f0	88		dey				dey		; The char we want is between the single quotes.
.b1f1	b1 1c		lda ($1c),y			lda (tmp5),y
.b1f3	95 26		sta $26,x			sta DStack+2,x
.b1f5	a9 00		lda #$00			lda #0
.b1f7	95 27		sta $27,x			sta DStack+3,x
.b1f9	4c 58 b2	jmp $b258			jmp _drop_original_string ; Single flag will drop the TOS for us.
.b1fc					_not_a_char:
.b1fc	4c 35 b2	jmp $b235			jmp _number_error
.b1ff					_base_changed:
.b1ff	8c 00 03	sty $0300			sty base	; Switch to the new base
.b202	20 6f cb	jsr $cb6f			jsr NOS_One_Plus ; start one character later
.b205	d6 24		dec $24,x			dec DStack+0,x	; decrease string length by one
.b207	a1 26		lda ($26,x)			lda (DStack+2,x) ; Load the first char again
.b209					_check_dot:
.b209	20 83 b2	jsr $b283			jsr _MinusCheck
.b20c	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b20e	85 1c		sta $1c				sta tmp5
.b210	b5 27		lda $27,x			lda DStack+3,x
.b212	85 1d		sta $1d				sta tmp5+1
.b214	b4 24		ldy $24,x			ldy DStack+0,x	; Y now points to the first character after the string,
.b216	88		dey				dey		; but we need the last character
.b217	b1 1c		lda ($1c),y			lda (tmp5),y
.b219	c9 2e		cmp #$2e			cmp #'.'
.b21b	d0 04		bne $b221			bne _main
.b21d	c6 1a		dec $1a				dec tmp4	; Flag the fact
.b21f	d6 24		dec $24,x			dec DStack+0,x	; reduce string length by one
.b221					_main:
.b221	20 c9 cd	jsr $cdc9			jsr Two_Dup
.b224	a9 00		lda #$00			lda #0
.b226	95 28		sta $28,x			sta DStack+4,x	; clear ud
.b228	95 29		sta $29,x			sta DStack+5,x
.b22a	95 2a		sta $2a,x			sta DStack+6,x
.b22c	95 2b		sta $2b,x			sta DStack+7,x
.b22e	20 2a b1	jsr $b12a			jsr To_Number	; ( ud addr u -- ud addr u )
.b231	b5 24		lda $24,x			lda DStack+0,x
.b233	f0 1f		beq $b254			beq _all_converted
.b235					_number_error:
.b235	20 0a c6	jsr $c60a			jsr Two_drop	; >NUMBER modified addr u
.b238	20 0a c6	jsr $c60a			jsr Two_drop	; ud   (partially converted number)
.b23b	a9 3e		lda #$3e			lda #'>'	; print the unknown
.b23d	20 f3 ce	jsr $cef3			jsr Emit_A	; word using the original addr u we saved at the beginning.
.b240	20 0d cf	jsr $cf0d			jsr Type
.b243	a9 3c		lda #$3c			lda #'<'
.b245	20 f3 ce	jsr $cef3			jsr Emit_A
.b248	20 00 cf	jsr $cf00			jsr Space
.b24b	68		pla				pla		; restore base
.b24c	8d 00 03	sta $0300			sta base
.b24f	a9 f3		lda #$f3			lda #$100+err_UndefinedWord
.b251	4c 6c b5	jmp $b56c			jmp ThrowA
.b254					_all_converted:
.b254	e8		inx				inx		; Drop the current addr u
.b255	e8		inx				inx
.b256	e8		inx				inx
.b257	e8		inx				inx
.b258					_drop_original_string:
.b258	20 00 c1	jsr $c100			jsr TwoNip	 ; Drop the original addr u
.b25b	a5 1a		lda $1a				lda tmp4	; flag for double
.b25d	f0 10		beq $b26f			beq _single
.b25f	a9 20		lda #$20			lda #%00100000
.b261	05 0c		ora $0c				ora status
.b263	85 0c		sta $0c				sta status
.b265	a5 1b		lda $1b				lda tmp4+1
.b267	f0 15		beq $b27e			beq _done	; no minus, all done
.b269	20 ba c7	jsr $c7ba			jsr DNegate
.b26c	4c 7e b2	jmp $b27e			jmp _done
.b26f					_single:
.b26f	e8		inx				inx		; convert ud to u
.b270	e8		inx				inx
.b271	a9 df		lda #$df			lda #$ff-%00100000
.b273	25 0c		and $0c				and status
.b275	85 0c		sta $0c				sta status
.b277	a5 1b		lda $1b				lda tmp4+1
.b279	f0 03		beq $b27e			beq _done	; no minus, all done
.b27b	20 89 c7	jsr $c789			jsr Negate
.b27e					_done:
.b27e	68		pla				pla
.b27f	8d 00 03	sta $0300			sta base
=211					CL	.var *-(WordListLink+wh_Xt)
=$b282					en = *	; remember here
>b1ad	d3					.byte CL	;wh_CodeLength
.b282	60		rts				rts
.b283					_MinusCheck:
.b283	c9 2d		cmp #$2d			cmp #'-'		; a minus sign?
.b285	d0 09		bne $b290			bne +
.b287	c6 1b		dec $1b				dec tmp4+1		; set flag
.b289	20 6f cb	jsr $cb6f			jsr NOS_One_Plus	; start one character later
.b28c	d6 24		dec $24,x			dec DStack+0,x		; decrease string length by one
.b28e	a1 26		lda ($26,x)			lda (DStack+2,x)	; get next char
.b290	60		rts		+		rts
>b291	48 65 78			L1:	.text "Hex"	;  name of word as a string, ending at wh_NameLastChar
>b294	03					.byte (("Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b295	2a b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b297	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b298	08					.byte NN	;wh_Flags	dictionary flags
=45588					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b299	a9 10		lda #$10	Hex:		lda #16
.b29b	d0 0e		bne $b2ab			bne decimal_a
=4					CL	.var *-(WordListLink+wh_Xt)
=$b29d					en = *	; remember here
>b297	04					.byte CL	;wh_CodeLength
>b29d	44 65 63 69 6d 61 6c		L1:	.text "Decimal"	;  name of word as a string, ending at wh_NameLastChar
>b2a4	87					.byte (("Decimal"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b2a5	14 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2a7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2a8	00					.byte 0	;wh_Flags	dictionary flags
=45604					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2a9	a9 0a		lda #$0a	Decimal:	lda #10
.b2ab	8d 00 03	sta $0300	decimal_a:	sta base+0
.b2ae	a9 00		lda #$00			lda #0
.b2b0	8d 01 03	sta $0301			sta base+1		; paranoid
=10					CL	.var *-(WordListLink+wh_Xt)
=$b2b3					en = *	; remember here
>b2a7	0a					.byte CL	;wh_CodeLength
.b2b3	60		rts				rts
>b2b4	42 61 73 65			L1:	.text "Base"	;  name of word as a string, ending at wh_NameLastChar
>b2b8	a4					.byte (("Base"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b2b9	24 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2bc	08					.byte NN	;wh_Flags	dictionary flags
=45624					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2bd	a0 03		ldy #$03			ldy #>base
.b2bf	a9 00		lda #$00			lda #<base
.b2c1	4c be b8	jmp $b8be			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b2c4					en = *	; remember here
>b2bb	07					.byte CL	;wh_CodeLength
>b2c4	43 6f 75 6e 74			L1:	.text "Count"	;  name of word as a string, ending at wh_NameLastChar
>b2c9	85					.byte (("Count"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b2ca	38 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2cd	18					.byte UF+NN	;wh_Flags	dictionary flags
=45641					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2ce					Count:
.b2ce	20 0d b5	jsr $b50d			jsr underflow_1
.b2d1	a1 24		lda ($24,x)			lda (DStack+0,x)	; A= number of characters
.b2d3	f6 24		inc $24,x			inc DStack+0,x		; move start address up by one
.b2d5	d0 02		bne $b2d9			bne +
.b2d7	f6 25		inc $25,x			inc DStack+1,x
.b2d9					+
.b2d9	4c f0 b8	jmp $b8f0			jmp PushZA		; push number of characters, return
=14					CL	.var *-(WordListLink+wh_Xt)
=$b2dc					en = *	; remember here
>b2cc	0e					.byte CL	;wh_CodeLength
>b2dc	3f 50 61 69 72 43 74 6c		L1:	.text "?PairCtlA"	;  name of word as a string, ending at wh_NameLastChar
>b2e4	41
>b2e5	29					.byte (("?PairCtlA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b2e6	49 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2e8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2e9	08					.byte NN	;wh_Flags	dictionary flags
=45669					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2ea	d5 24		cmp $24,x	QPairCtlA:	cmp DStack+0,x
.b2ec	f0 05		beq $b2f3			beq _8
.b2ee	a9 ea		lda #$ea			lda #$100+err_ControlMismatch
.b2f0	4c 6c b5	jmp $b56c			jmp ThrowA
.b2f3	e8		inx		_8:		inx
.b2f4	e8		inx				inx	; Drop n
.b2f5	60		rts				rts
=12					CL	.var *-(WordListLink+wh_Xt)
=$b2f6					en = *	; remember here
>b2e8	0c					.byte CL	;wh_CodeLength
>0743					DoLeave  .word ?	; head of leave addr patch chain
>0745					DoStkIndex: .byte ?
>0746					DoIndexL: .fill DoStkDim
>074e					DoIndexH: .fill DoStkDim
>0756					DoFufaL:  .fill DoStkDim
>075e					DoFufaH:  .fill DoStkDim
>b2f6	3f 44 6f			L1:	.text "?Do"	;  name of word as a string, ending at wh_NameLastChar
>b2f9	e3					.byte (("?Do"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b2fa	65 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2fd	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45689					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2fe					Question_Do:
.b2fe	20 3f b4	jsr $b43f			jsr Do_Leave_Init
.b301	a9 15		lda #$15			lda #<_runtime
.b303	a0 b3		ldy #$b3			ldy #>_runtime
.b305	20 4d ce	jsr $ce4d			jsr Jsr_Comma_YA	; compile JSR _runtime
.b308	a9 d0		lda #$d0			lda #$d0		; compile BNE *+5
.b30a	a0 03		ldy #$03			ldy #3
.b30c	20 28 ce	jsr $ce28			jsr Comma_YA
.b30f	20 22 b4	jsr $b422			jsr Leave		; compile JMP leave
.b312	4c 33 b3	jmp $b333			jmp Do_8		; finish
=23					CL	.var *-(WordListLink+wh_Xt)
=$b315					en = *	; remember here
>b2fc	17					.byte CL	;wh_CodeLength
.b315					_runtime:
.b315	20 3b b3	jsr $b33b			jsr Do_Runtime	; start normally (we assume TOS!=NOS)
.b318	a5 12		lda $12				lda DoIndex+0	; Are TOS and NOS equal?
.b31a	f0 01		beq $b31d			beq _2
.b31c	60		rts				rts		; return Z=0 to signal continue
.b31d	a5 13		lda $13		_2:		lda DoIndex+1
.b31f	c9 80		cmp #$80			cmp #$80
.b321	60		rts				rts		; return Z
>b322	44 6f				L1:	.text "Do"	;  name of word as a string, ending at wh_NameLastChar
>b324	e2					.byte (("Do"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b325	79 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b327	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b328	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45732					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b329					Do:
.b329	20 3f b4	jsr $b43f			jsr Do_Leave_Init
.b32c	a9 3b		lda #$3b			lda #<Do_runtime
.b32e	a0 b3		ldy #$b3			ldy #>Do_runtime
.b330	20 4d ce	jsr $ce4d			jsr Jsr_Comma_YA	; compile JSR _runtime
.b333	20 31 cb	jsr $cb31	Do_8:		jsr Here		; remember loop body start addr
.b336	a9 29		lda #$29			lda #<Do		; identifier
.b338	4c f0 b8	jmp $b8f0			jmp PushZA
=18					CL	.var *-(WordListLink+wh_Xt)
=$b33b					en = *	; remember here
>b327	12					.byte CL	;wh_CodeLength
.b33b					Do_Runtime:
.b33b	ce 45 07	dec $0745			dec DoStkIndex		; alloc DO stack entry
.b33e	ac 45 07	ldy $0745			ldy DoStkIndex
.b341	30 2d		bmi $b370			bmi _TooDeep
.b343	a5 12		lda $12				lda DoIndex+0		; save previous DoIndex
.b345	99 46 07	sta $0746,y			sta DoIndexL,y
.b348	a5 13		lda $13				lda DoIndex+1
.b34a	99 4e 07	sta $074e,y			sta DoIndexH,y
.b34d	38		sec				sec			; fudge factor (FUFA)= $8000 - limit
.b34e	a9 00		lda #$00			lda #0			;   the number that will trip the overflow flag
.b350	f5 26		sbc $26,x			sbc DStack+2,x
.b352	99 56 07	sta $0756,y			sta DoFuFaL,y
.b355	a9 80		lda #$80			lda #$80
.b357	f5 27		sbc $27,x			sbc DStack+3,x
.b359	99 5e 07	sta $075e,y			sta DoFuFaH,y
.b35c	18		clc				clc			; index= FUFA plus original index
.b35d	b5 24		lda $24,x			lda DStack+0,x
.b35f	79 56 07	adc $0756,y			adc DoFuFaL,y
.b362	85 12		sta $12				sta DoIndex+0
.b364	b5 25		lda $25,x			lda DStack+1,x
.b366	79 5e 07	adc $075e,y			adc DoFuFaH,y
.b369	85 13		sta $13				sta DoIndex+1
.b36b	e8		inx				inx			; Drop orig index
.b36c	e8		inx				inx
.b36d	e8		inx				inx			; Drop orig limit
.b36e	e8		inx				inx
.b36f	60		rts				rts			; return
.b370	a9 f9		lda #$f9	_TooDeep:	lda #$100+err_DoLoop_TooDeep
.b372	20 6c b5	jsr $b56c			jsr ThrowA
>b375	4c 6f 6f 70			L1:	.text "Loop"	;  name of word as a string, ending at wh_NameLastChar
>b379	04					.byte (("Loop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b37a	a4 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b37c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b37d	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45817					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b37e					Loop:
.b37e	a9 85		lda #$85			lda #<_Runtime
.b380	a0 b3		ldy #$b3			ldy #>_Runtime
.b382	4c a1 b3	jmp $b3a1			jmp Plus_Loop_5
=7					CL	.var *-(WordListLink+wh_Xt)
=$b385					en = *	; remember here
>b37c	07					.byte CL	;wh_CodeLength
.b385					_Runtime:
.b385	e6 12		inc $12				inc DoIndex+0
.b387	f0 02		beq $b38b			beq _Runtime2
.b389	b8		clv				clv			; return V=0 to signal loop back
.b38a	60		rts				rts
.b38b	18		clc		_Runtime2:	clc
.b38c	a5 13		lda $13				lda DoIndex+1		; handle carry from lo byte
.b38e	69 01		adc #$01			adc #1
.b390	85 13		sta $13				sta DoIndex+1
.b392	60		rts				rts			; return V to signal loop back
>b393	2b 4c 6f 6f 70			L1:	.text "+Loop"	;  name of word as a string, ending at wh_NameLastChar
>b398	05					.byte (("+Loop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b399	f9 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b39b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b39c	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45848					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b39d					Plus_Loop:
.b39d	a9 ab		lda #$ab			lda #<Plus_Loop_Runtime
.b39f	a0 b3		ldy #$b3			ldy #>Plus_Loop_Runtime
.b3a1	20 c2 b3	jsr $b3c2	Plus_Loop_5:	jsr Loop_End		; compile JSR _runtime, BVC back
.b3a4	a9 82		lda #$82			lda #<(Unloop-wh_xt)
.b3a6	a0 b3		ldy #$b3			ldy #>(Unloop-wh_xt)
.b3a8	4c b5 b7	jmp $b7b5			jmp Compile_Comma_NT_YA ; compile Unloop, return
=14					CL	.var *-(WordListLink+wh_Xt)
=$b3ab					en = *	; remember here
>b39b	0e					.byte CL	;wh_CodeLength
.b3ab					Plus_Loop_Runtime:
.b3ab	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b3ad	b0 10		bcs $b3bf		bcs Throw_Stack_12
.b3af	18		clc				clc			; DoIndex += step
.b3b0	b5 24		lda $24,x			lda DStack+0,x
.b3b2	65 12		adc $12				adc DoIndex+0
.b3b4	85 12		sta $12				sta DoIndex+0
.b3b6	b5 25		lda $25,x			lda DStack+1,x
.b3b8	65 13		adc $13				adc DoIndex+1
.b3ba	85 13		sta $13				sta DoIndex+1
.b3bc	e8		inx				inx			; Drop step
.b3bd	e8		inx				inx
.b3be	60		rts				rts			; return V=0 to signal loop back
.b3bf	4c 31 b5	jmp $b531	Throw_Stack_12: jmp Throw_Stack
.b3c2					Loop_End:
.b3c2	20 4d ce	jsr $ce4d			jsr Jsr_Comma_YA	; compile JSR runtime
.b3c5	a9 29		lda #$29			lda #<Do		; check id
.b3c7	20 ea b2	jsr $b2ea	Loop_End_3:	jsr QPairCtlA
.b3ca	a9 50		lda #$50			lda #$50		; compile BVC body
.b3cc	20 bc a7	jsr $a7bc			jsr Branch_CommaA
.b3cf	ac 43 07	ldy $0743			ldy DoLeave+0		; for each leave addr entry
.b3d2	ad 44 07	lda $0744			lda DoLeave+1
.b3d5	f0 1b		beq $b3f2			beq _p9
.b3d7	84 14		sty $14		_p1:		sty tmp1+0		;   save entry pointer
.b3d9	85 15		sta $15				sta tmp1+1
.b3db	a0 01		ldy #$01			ldy #1			;   save link
.b3dd	b1 14		lda ($14),y			lda (tmp1),y
.b3df	48		pha				pha
.b3e0	88		dey				dey
.b3e1	b1 14		lda ($14),y			lda (tmp1),y
.b3e3	48		pha				pha
.b3e4	a5 00		lda $00				lda cp+0		;   patch addr
.b3e6	91 14		sta ($14),y			sta (tmp1),y
.b3e8	a5 01		lda $01				lda cp+1
.b3ea	c8		iny				iny
.b3eb	91 14		sta ($14),y			sta (tmp1),y
.b3ed	68		pla				pla			;   get saved link
.b3ee	a8		tay				tay
.b3ef	68		pla				pla
.b3f0	d0 e5		bne $b3d7			bne _p1
.b3f2					_p9:
.b3f2	20 e3 b4	jsr $b4e3			jsr PopYA		; restore DoLeave
.b3f5	8d 43 07	sta $0743			sta DoLeave+0
.b3f8	8c 44 07	sty $0744			sty DoLeave+1
.b3fb	60		rts				rts
>b3fc	55 6e 6c 6f 6f 70		L1:	.text "Unloop"	;  name of word as a string, ending at wh_NameLastChar
>b402	06					.byte (("Unloop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b403	18 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b405	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b406	01					.byte CO	;wh_Flags	dictionary flags
=45954					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b407					Unloop:
.b407	ac 45 07	ldy $0745			ldy DoStkIndex
.b40a	b9 46 07	lda $0746,y			lda DoIndexL,y	; restore Index
.b40d	85 12		sta $12				sta DoIndex+0
.b40f	b9 4e 07	lda $074e,y			lda DoIndexH,y
.b412	85 13		sta $13				sta DoIndex+1
.b414	ee 45 07	inc $0745			inc DoStkIndex	; drop Do stack entry
=16					CL	.var *-(WordListLink+wh_Xt)
=$b417					en = *	; remember here
>b405	10					.byte CL	;wh_CodeLength
.b417	60		rts				rts
>b418	4c 65 61 76 65			L1:	.text "Leave"	;  name of word as a string, ending at wh_NameLastChar
>b41d	a5					.byte (("Leave"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b41e	82 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b420	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b421	0d					.byte IM+NN+CO	;wh_Flags	dictionary flags
=45981					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b422					Leave:
.b422	a9 4c		lda #$4c			lda #$4c	; JMP abs
.b424	20 0e ce	jsr $ce0e			jsr C_Comma_A
.b427	a5 01		lda $01				lda cp+1	; save cp
.b429	48		pha				pha
.b42a	a5 00		lda $00				lda cp+0
.b42c	48		pha				pha
.b42d	ad 43 07	lda $0743			lda DoLeave+0	; compile DoLeave link, patched later
.b430	ac 44 07	ldy $0744			ldy DoLeave+1
.b433	20 28 ce	jsr $ce28			jsr Comma_YA
.b436	68		pla				pla		; update DoLeave
.b437	8d 43 07	sta $0743			sta DoLeave+0
.b43a	68		pla				pla
.b43b	8d 44 07	sta $0744			sta DoLeave+1
=28					CL	.var *-(WordListLink+wh_Xt)
=$b43e					en = *	; remember here
>b420	1c					.byte CL	;wh_CodeLength
.b43e	60		rts				rts
.b43f					Do_Leave_Init:
.b43f	ad 43 07	lda $0743			lda DoLeave+0
.b442	ac 44 07	ldy $0744			ldy DoLeave+1
.b445	20 be b8	jsr $b8be			jsr PushYA	; save old leave head
.b448	a9 00		lda #$00			lda #0		; init
.b44a	8d 44 07	sta $0744			sta DoLeave+1
.b44d	60		rts				rts
>b44e	49				L1:	.text "I"	;  name of word as a string, ending at wh_NameLastChar
>b44f	21					.byte (("I"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b450	9d b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b452	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b453	01					.byte CO	;wh_Flags	dictionary flags
=46031					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b454	ac 45 07	ldy $0745	I:		ldy DoStkIndex
.b457	ca		dex				dex
.b458	ca		dex				dex
.b459	38		sec				sec		; n= fudged index - fudge factor (FUFA)
.b45a	a5 12		lda $12				lda DoIndex+0
.b45c	f9 56 07	sbc $0756,y			sbc DoFuFaL,y
.b45f	95 24		sta $24,x			sta DStack+0,x
.b461	a5 13		lda $13				lda DoIndex+1
.b463	f9 5e 07	sbc $075e,y			sbc DoFuFaH,y
.b466	95 25		sta $25,x			sta DStack+1,x
=20					CL	.var *-(WordListLink+wh_Xt)
=$b468					en = *	; remember here
>b452	14					.byte CL	;wh_CodeLength
.b468	60		rts				rts
>b469	4a				L1:	.text "J"	;  name of word as a string, ending at wh_NameLastChar
>b46a	41					.byte (("J"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b46b	cf b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b46d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b46e	01					.byte CO	;wh_Flags	dictionary flags
=46058					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b46f	ac 45 07	ldy $0745	J:		ldy DoStkIndex
.b472	ca		dex				dex
.b473	ca		dex				dex
.b474	38		sec				sec		; n= 2nd fudged index - 2nd fudge factor (FUFA)
.b475	b9 46 07	lda $0746,y			lda DoIndexL+0,y	; LSB
.b478	f9 57 07	sbc $0757,y			sbc DoFufaL+1,y
.b47b	95 24		sta $24,x			sta DStack+0,x
.b47d	b9 4e 07	lda $074e,y			lda DoIndexH+0,y	; MSB
.b480	f9 5f 07	sbc $075f,y			sbc DoFufaH+1,y
.b483	95 25		sta $25,x			sta DStack+1,x
=22					CL	.var *-(WordListLink+wh_Xt)
=$b485					en = *	; remember here
>b46d	16					.byte CL	;wh_CodeLength
.b485	60		rts				rts
>b486	41 62 6f 72 74 22		L1:	.text 'Abort"'	;  name of word as a string, ending at wh_NameLastChar
>b48c	46					.byte (('Abort"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>b48d	ea b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b48f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b490	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=46092					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b491					Abort_Quote:
.b491	20 18 ba	jsr $ba18			jsr S_Quote		; compile the string literal
.b494	a0 b4		ldy #$b4			ldy #>_runtime		; compile JSR runtime, return
.b496	a9 9b		lda #$9b			lda #<_runtime
.b498	4c 4d ce	jmp $ce4d			jmp Jsr_Comma_YA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b49b					en = *	; remember here
>b48f	0a					.byte CL	;wh_CodeLength
.b49b					_runtime:
.b49b	b5 28		lda $28,x			lda DStack+4,x
.b49d	15 29		ora $29,x			ora DStack+5,x
.b49f	d0 03		bne $b4a4			bne _do_abort	; true?
.b4a1	4c 58 ae	jmp $ae58			jmp ThreeDrop	; Drop three entries from the Data Stack
.b4a4					_do_abort:
.b4a4	20 0d cf	jsr $cf0d			jsr Type	; print string
.b4a7	20 28 ac	jsr $ac28			jsr CR		; We follow Gforth in going to a new line
.b4aa	a9 fe		lda #$fe			lda #$100+err_AbortQuote
.b4ac	4c 6c b5	jmp $b56c			jmp ThrowA
>b4af	41 62 6f 72 74			L1:	.text "Abort"	;  name of word as a string, ending at wh_NameLastChar
>b4b4	85					.byte (("Abort"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b4b5	0c b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b4b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b4b8	08					.byte NN	;wh_Flags	dictionary flags
=46132					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b4b9	a9 ff		lda #$ff	Abort:		lda #$100+err_Abort
.b4bb	4c 6c b5	jmp $b56c			jmp ThrowA
=5					CL	.var *-(WordListLink+wh_Xt)
=$b4be					en = *	; remember here
>b4b7	05					.byte CL	;wh_CodeLength
>b4be	50 6f 70 41			L1:	.text "PopA"	;  name of word as a string, ending at wh_NameLastChar
>b4c2	24					.byte (("PopA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b4c3	34 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b4c5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b4c6	08					.byte NN	;wh_Flags	dictionary flags
=46146					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b4c7					PopA:
.b4c7	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b4c9	b0 66		bcs $b531		bcs Throw_Stack
.b4cb	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b4cd	e8		inx				inx
.b4ce	e8		inx				inx
=8					CL	.var *-(WordListLink+wh_Xt)
=$b4cf					en = *	; remember here
>b4c5	08					.byte CL	;wh_CodeLength
.b4cf	60		rts		                rts
.b4d0					PopA2:
.b4d0	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b4d2	b0 5d		bcs $b531		bcs Throw_Stack
.b4d4	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b4d6	e8		inx				inx
.b4d7	e8		inx				inx
.b4d8	60		rts		                rts
>b4d9	50 6f 70 59 41			L1:	.text "PopYA"	;  name of word as a string, ending at wh_NameLastChar
>b4de	25					.byte (("PopYA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b4df	42 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b4e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b4e2	08					.byte NN	;wh_Flags	dictionary flags
=46174					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b4e3					PopYA:
.b4e3	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b4e5	b0 4a		bcs $b531		bcs Throw_Stack
.b4e7	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to YA
.b4e9	b4 25		ldy $25,x			ldy DStack+1,x
.b4eb	e8		inx				inx
.b4ec	e8		inx				inx
=10					CL	.var *-(WordListLink+wh_Xt)
=$b4ed					en = *	; remember here
>b4e1	0a					.byte CL	;wh_CodeLength
.b4ed	60		rts				rts
.b4ee					PopTmp1:
.b4ee	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b4f0	b0 3f		bcs $b531		bcs Throw_Stack
.b4f2	b5 24		lda $24,x			lda DStack+0,x	; PopYA
.b4f4	b4 25		ldy $25,x			ldy DStack+1,x
.b4f6	e8		inx				inx
.b4f7	e8		inx				inx
.b4f8	85 14		sta $14				sta tmp1+0
.b4fa	84 15		sty $15				sty tmp1+1
.b4fc	60		rts				rts
>b4fd	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_1"	;  name of word as a string, ending at wh_NameLastChar
>b505	77 5f 31
>b508	2b					.byte (("underflow_1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b509	5e b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b50b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b50c	08					.byte NN	;wh_Flags	dictionary flags
=46216					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b50d					underflow_1:
.b50d	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b50f	b0 20		bcs $b531		bcs Throw_Stack
=4					CL	.var *-(WordListLink+wh_Xt)
=$b511					en = *	; remember here
>b50b	04					.byte CL	;wh_CodeLength
.b511	60		rts				rts
>b512	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_2"	;  name of word as a string, ending at wh_NameLastChar
>b51a	77 5f 32
>b51d	4b					.byte (("underflow_2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b51e	88 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b520	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b521	08					.byte NN	;wh_Flags	dictionary flags
=46237					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b522					underflow_2:
.b522	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b524	b0 0b		bcs $b531		bcs Throw_Stack
=4					CL	.var *-(WordListLink+wh_Xt)
=$b526					en = *	; remember here
>b520	04					.byte CL	;wh_CodeLength
.b526	60		rts		                rts
.b527					underflow_3:
.b527	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.b529	b0 06		bcs $b531		bcs Throw_Stack
.b52b	60		rts		                rts
.b52c					underflow_4:
.b52c	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.b52e	b0 01		bcs $b531		bcs Throw_Stack
.b530	60		rts		                rts
.b531					Throw_Stack:
.b531	30 04		bmi $b537			bmi _over
.b533	a9 fc		lda #$fc			lda #$100+err_Stack_Underflow
.b535	d0 35		bne $b56c			bne ThrowA
.b537	a9 fd		lda #$fd	_over:		lda #$100+err_Stack_Overflow
.b539	d0 31		bne $b56c			bne ThrowA
.b53b					Throw_FPStack:
.b53b	30 04		bmi $b541			bmi _over
.b53d	a9 d3		lda #$d3			lda #$100+err_FPStackUnderflow
.b53f	d0 2b		bne $b56c			bne ThrowA
.b541	a9 d4		lda #$d4	_over:		lda #$100+err_FPStackOverflow
.b543	d0 27		bne $b56c			bne ThrowA
.b545					Throw_FpOutOfRange:
.b545	a9 d5		lda #$d5			lda #$100+err_FpOutOfRange
.b547	d0 23		bne $b56c			bne ThrowA
>b549	3f 53 74 61 63 6b		L1:	.text "?Stack"	;  name of word as a string, ending at wh_NameLastChar
>b54f	66					.byte (("?Stack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b550	9d b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b552	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b553	08					.byte NN	;wh_Flags	dictionary flags
=46287					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b554					QStack:
.b554	e0 29		cpx #$29		cpx #-2*0+DStack0+1
.b556	b0 d9		bcs $b531		bcs Throw_Stack
.b558	a4 4c		ldy $4c				ldy fp			; check floating point stack
.b55a	c0 0b		cpy #$0b			cpy #FDim+1
.b55c	b0 dd		bcs $b53b			bcs Throw_FPStack
=10					CL	.var *-(WordListLink+wh_Xt)
=$b55e					en = *	; remember here
>b552	0a					.byte CL	;wh_CodeLength
.b55e	60		rts				rts			; all OK
>b55f	54 68 72 6f 77			L1:	.text "Throw"	;  name of word as a string, ending at wh_NameLastChar
>b564	e5					.byte (("Throw"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b565	cf b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b567	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b568	08					.byte NN	;wh_Flags	dictionary flags
=46308					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b569	20 c7 b4	jsr $b4c7	Throw:		jsr PopA		; pop n
.b56c	20 97 b5	jsr $b597	ThrowA:		jsr Type_Exception_Text_A ; print the associated error string
.b56f	a2 28		ldx #$28			ldx #DStack0		; reset data stack (in case of underflow)
.b571					Abort_Core:
.b571	20 cf b9	jsr $b9cf			jsr SLiteral_runtime
.b574	4c 7a b5	jmp $b57a			  jmp +
>b577	3f 00 20					  .text "?",0," "	; signal an error to the simulator
.b57a	20 0d cf	jsr $cf0d	+		jsr Type
.b57d	20 29 d0	jsr $d029			jsr R_From		; show return stack TOS
.b580	20 9e 81	jsr $819e			jsr TypeSymbol
.b583	20 45 d0	jsr $d045			jsr R_Fetch		; show return stack NOS
.b586	20 9e 81	jsr $819e			jsr TypeSymbol
.b589	20 28 ac	jsr $ac28			jsr CR
.b58c					Abort_Core2:
.b58c	a9 08		lda #$08			lda #DoStkDim		; init do stack
.b58e	8d 45 07	sta $0745			sta DoStkIndex
.b591	20 db b5	jsr $b5db			jsr Empty_Stack		; empty the Data Stack & FP stack
.b594	4c eb b5	jmp $b5eb			jmp Quit		; continue into QUIT.
.b597					Type_Exception_Text_A:
.b597	85 16		sta $16				sta tmp2+0	; save error code
.b599	a9 3c		lda #$3c			lda #<Exception_Text_List
.b59b	a0 dc		ldy #$dc			ldy #>Exception_Text_List	; for each table entry
.b59d	85 18		sta $18				sta tmp3+0
.b59f	84 19		sty $19				sty tmp3+1
.b5a1	a0 00		ldy #$00	_TestEntry:	ldy #0		;   code match?
.b5a3	b1 18		lda ($18),y			lda (tmp3),y
.b5a5	f0 1a		beq $b5c1			beq _NotFound
.b5a7	c5 16		cmp $16				cmp tmp2+0
.b5a9	f0 11		beq $b5bc			beq _Found
.b5ab	c8		iny		-		iny		;   step to end of entry
.b5ac	b1 18		lda ($18),y			lda (tmp3),y
.b5ae	d0 fb		bne $b5ab			bne -
.b5b0	98		tya				tya		;   step to next entry
.b5b1	38		sec				sec
.b5b2	65 18		adc $18				adc tmp3+0
.b5b4	85 18		sta $18				sta tmp3+0
.b5b6	90 e9		bcc $b5a1			bcc _TestEntry
.b5b8	e6 19		inc $19				inc tmp3+1
.b5ba	d0 e5		bne $b5a1			bne _TestEntry
.b5bc					_Found:
.b5bc	a0 01		ldy #$01			ldy #1
.b5be	4c 2e cf	jmp $cf2e			jmp Print_ASCIIZ_tmp3_no_lf
.b5c1	a0 ff		ldy #$ff	_NotFound:	ldy #$ff		; print code
.b5c3	a5 16		lda $16				lda tmp2+0
.b5c5	20 be b8	jsr $b8be			jsr PushYA
.b5c8	4c eb cc	jmp $cceb			jmp Dot
>b5cb	45 6d 70 74 79 2d 53 74		L1:	.text "Empty-Stack"	;  name of word as a string, ending at wh_NameLastChar
>b5d3	61 63 6b
>b5d6	6b					.byte (("Empty-Stack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b5d7	e4 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5d9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5da	08					.byte NN	;wh_Flags	dictionary flags
=46422					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5db	a2 28		ldx #$28	Empty_Stack:	ldx #DStack0	; empty data stack
.b5dd	a9 0a		lda #$0a			lda #FDim	; empty FP stack
.b5df	85 4c		sta $4c				sta fp
=6					CL	.var *-(WordListLink+wh_Xt)
=$b5e1					en = *	; remember here
>b5d9	06					.byte CL	;wh_CodeLength
.b5e1	60		rts				rts
>b5e2	51 75 69 74			L1:	.text "Quit"	;  name of word as a string, ending at wh_NameLastChar
>b5e6	84					.byte (("Quit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b5e7	56 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5e9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5ea	08					.byte NN	;wh_Flags	dictionary flags
=46438					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5eb					Quit:
.b5eb	8a		txa				txa		; Save the DStack that we just defined
.b5ec	a2 ff		ldx #$ff			ldx #rsp0
.b5ee	9a		txs				txs
.b5ef	aa		tax				tax		; Restore the DStack. Dude, seriously.
.b5f0	a9 00		lda #$00			lda #0		; SOURCE-ID= zero (keyboard input)
.b5f2	85 02		sta $02				sta insrc+0
.b5f4	85 03		sta $03				sta insrc+1
.b5f6	20 4b b8	jsr $b84b			jsr Left_Bracket_NoCheck ; switch to interpret state
.b5f9					_get_line:
.b5f9	a9 00		lda #$00			lda #<buffer0	; input buffer, this is paranoid
.b5fb	85 04		sta $04				sta cib+0
.b5fd	a9 02		lda #$02			lda #>buffer0
.b5ff	85 05		sta $05				sta cib+1
.b601	20 80 c3	jsr $c380			jsr Refill		; ( -- f )
.b604	b5 24		lda $24,x			lda DStack+0,x
.b606	d0 05		bne $b60d			bne +
.b608	a9 6b		lda #$6b			lda #$100+err_Refill	; REFILL returned a FALSE flag, something went wrong
.b60a	4c 6c b5	jmp $b56c			jmp ThrowA
.b60d	e8		inx		+		inx			; drop the flag
.b60e	e8		inx				inx
.b60f	20 26 b6	jsr $b626			jsr interpret
.b612	a5 0a		lda $0a				lda state
.b614	d0 06		bne $b61c			bne _print_compiled
.b616	a9 e8		lda #$e8			lda #<str_ok
.b618	a0 db		ldy #$db			ldy #>str_ok
.b61a	d0 04		bne $b620			bne _print
.b61c	a9 ec		lda #$ec	_print_compiled: lda #<str_compiled	; "compile" string
.b61e	a0 db		ldy #$db			ldy #>str_compiled
.b620	20 39 cf	jsr $cf39	_print:		jsr Print_ASCIIZ_YA
.b623	4c f9 b5	jmp $b5f9			jmp _get_line
=59					CL	.var *-(WordListLink+wh_Xt)
=$b626					en = *	; remember here
>b5e9	3b					.byte CL	;wh_CodeLength
.b626					Interpret:
.b626					_loop:
.b626	20 54 b5	jsr $b554			jsr QStack		; check stack bounds
.b629	20 9f bb	jsr $bb9f			jsr parse_name		; ( "string" -- addr u )
.b62c	b5 24		lda $24,x	                lda DStack+0,x		; empty line?
.b62e	f0 53		beq $b683	                beq _line_done
.b630	20 c9 cd	jsr $cdc9			jsr Two_dup		; ( addr u -- addr u addr u )
.b633	20 dc bd	jsr $bddc			jsr find_name		; ( addr u addr u -- addr u nt|0 )
.b636	b5 25		lda $25,x			lda DStack+1,x		; word found?
.b638	d0 1b		bne $b655			bne _got_name_token
.b63a	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.b63b	e8		inx		                inx
.b63c	20 af b1	jsr $b1af	                jsr Number           ; ( addr u -- u|d )
.b63f	a5 0a		lda $0a		                lda state		; interpreting?
.b641	f0 e3		beq $b626	                beq _loop		;   we're done
.b643	a9 20		lda #$20	                lda #$20		; double cell number?
.b645	24 0c		bit $0c		                bit status
.b647	f0 06		beq $b64f	                beq _single_number
.b649	20 75 b9	jsr $b975			jsr Two_literal		; compile a double number
.b64c	4c 26 b6	jmp $b626			jmp _loop
.b64f	20 71 b8	jsr $b871	_single_number:	jsr Literal		; compile a single number
.b652	4c 26 b6	jmp $b626			jmp _loop
.b655					_got_name_token:
.b655	20 91 ca	jsr $ca91			jsr Nip
.b658	20 91 ca	jsr $ca91			jsr Nip			; ( nt )
.b65b	85 14		sta $14				sta tmp1+0		; save a work copy of nt
.b65d	84 15		sty $15				sty tmp1+1
.b65f	a0 84		ldy #$84			ldy #Wh_Flags		; get word flags, we'll need them shortly
.b661	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b663	a4 0a		ldy $0a				ldy state		; interpreting or compiling?
.b665	d0 12		bne $b679			bne _compile
.b667	29 01		and #$01			and #CO			; is the word COMPILE-ONLY?
.b669	f0 05		beq $b670			beq _execute
.b66b	a9 f2		lda #$f2			lda #$100+err_CompileOnly ;   complain & quit
.b66d	20 6c b5	jsr $b56c			jsr ThrowA
.b670	20 e8 be	jsr $bee8	_execute:	jsr Name_To_Int		; ( nt -- xt )
.b673	20 4b cf	jsr $cf4b			jsr Execute		; EXECUTE the xt that is TOS
.b676	4c 26 b6	jmp $b626	                jmp _loop
.b679					_compile:
.b679	29 04		and #$04			and #IM			; is the word IMMEDIATE?
.b67b	d0 f3		bne $b670			bne _execute		;   IMMEDIATE word, execute now
.b67d	20 b2 b7	jsr $b7b2			jsr Compile_Comma_NT	; Compile the nt into the Dictionary
.b680	4c 26 b6	jmp $b626			jmp _loop
.b683					_line_done:
.b683	e8		inx				inx			; drop stuff from PARSE_NAME
.b684	e8		inx				inx
.b685	e8		inx				inx
.b686	e8		inx				inx
.b687	60		rts				rts
>b688	49 6d 6d 65 64 69 61 74		L1:	.text "Immediate"	;  name of word as a string, ending at wh_NameLastChar
>b690	65
>b691	a9					.byte (("Immediate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b692	66 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b694	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b695	08					.byte NN	;wh_Flags	dictionary flags
=46609					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b696	a9 04		lda #$04	Immediate:	lda #IM
.b698	48		pha		SetFlag:	pha
.b699	20 70 bb	jsr $bb70			jsr current_to_dp
.b69c	a0 84		ldy #$84			ldy #Wh_Flags
.b69e	68		pla				pla
.b69f	11 10		ora ($10),y			ora (dp),y
.b6a1	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b6a3					en = *	; remember here
>b694	0d					.byte CL	;wh_CodeLength
.b6a3	60		rts				rts
>b6a4	43 6f 6d 70 69 6c 65 2d		L1:	.text "Compile-only"	;  name of word as a string, ending at wh_NameLastChar
>b6ac	6f 6e 6c 79
>b6b0	2c					.byte (("Compile-only"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b6b1	11 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6b3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6b4	08					.byte NN	;wh_Flags	dictionary flags
=46640					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6b5	a9 01		lda #$01	Compile_Only:	lda #CO
.b6b7	d0 df		bne $b698			bne SetFlag
=4					CL	.var *-(WordListLink+wh_Xt)
=$b6b9					en = *	; remember here
>b6b3	04					.byte CL	;wh_CodeLength
>b6b9	6e 65 76 65 72 2d 6e 61		L1:	.text "never-native"	;  name of word as a string, ending at wh_NameLastChar
>b6c1	74 69 76 65
>b6c5	ac					.byte (("never-native"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b6c6	30 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6c8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6c9	08					.byte NN	;wh_Flags	dictionary flags
=46661					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6ca	20 70 bb	jsr $bb70	Never_Native:	jsr current_to_dp
.b6cd	a0 84		ldy #$84			ldy #Wh_Flags
.b6cf	b1 10		lda ($10),y			lda (dp),y
.b6d1	09 08		ora #$08			ora #NN		; set NN flag
.b6d3	29 fd		and #$fd			and #$ff-AN	; clear AN flag
.b6d5	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b6d7					en = *	; remember here
>b6c8	0d					.byte CL	;wh_CodeLength
.b6d7	60		rts				rts
>b6d8	61 6c 77 61 79 73 2d 6e		L1:	.text "always-native"	;  name of word as a string, ending at wh_NameLastChar
>b6e0	61 74 69 76 65
>b6e5	ad					.byte (("always-native"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b6e6	45 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6e8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6e9	08					.byte NN	;wh_Flags	dictionary flags
=46693					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6ea	20 70 bb	jsr $bb70	Always_Native:	jsr current_to_dp
.b6ed	a0 84		ldy #$84			ldy #Wh_Flags
.b6ef	b1 10		lda ($10),y			lda (dp),y
.b6f1	09 02		ora #$02			ora #AN		; Make sure AN flag is set
.b6f3	29 f7		and #$f7			and #$ff-NN	; and NN flag is clear.
.b6f5	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b6f7					en = *	; remember here
>b6e8	0d					.byte CL	;wh_CodeLength
.b6f7	60		rts				rts
>b6f8	61 6c 6c 6f 77 2d 6e 61		L1:	.text "allow-native"	;  name of word as a string, ending at wh_NameLastChar
>b700	74 69 76 65
>b704	ac					.byte (("allow-native"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b705	65 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b707	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b708	08					.byte NN	;wh_Flags	dictionary flags
=46724					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b709	20 70 bb	jsr $bb70	Allow_Native:	jsr current_to_dp
.b70c	a0 84		ldy #$84			ldy #Wh_Flags	; offset for status byte
.b70e	b1 10		lda ($10),y			lda (dp),y
.b710	29 f5		and #$f5			and #$ff-NN-AN	; AN and NN flag is clear.
.b712	91 10		sta ($10),y			sta (dp),y
=11					CL	.var *-(WordListLink+wh_Xt)
=$b714					en = *	; remember here
>b707	0b					.byte CL	;wh_CodeLength
.b714	60		rts				rts
>b715	6e 63 2d 6c 69 6d 69 74		L1:	.text "nc-limit"	;  name of word as a string, ending at wh_NameLastChar
>b71d	88					.byte (("nc-limit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b71e	84 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b720	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b721	08					.byte NN	;wh_Flags	dictionary flags
=46749					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b722	a0 03		ldy #$03			ldy #>nc_limit
.b724	a9 02		lda #$02			lda #<nc_limit
.b726	4c be b8	jmp $b8be			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b729					en = *	; remember here
>b720	07					.byte CL	;wh_CodeLength
>b729	73 74 72 69 70 2d 75 6e		L1:	.text "strip-underflow"	;  name of word as a string, ending at wh_NameLastChar
>b731	64 65 72 66 6c 6f 77
>b738	ef					.byte (("strip-underflow"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b739	9d b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b73b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b73c	08					.byte NN	;wh_Flags	dictionary flags
=46776					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b73d	a0 03		ldy #$03			ldy #>uf_strip
.b73f	a9 04		lda #$04			lda #<uf_strip
.b741	4c be b8	jmp $b8be			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b744					en = *	; remember here
>b73b	07					.byte CL	;wh_CodeLength
>b744	70 6f 73 74 70 6f 6e 65		L1:	.text "postpone"	;  name of word as a string, ending at wh_NameLastChar
>b74c	a8					.byte (("postpone"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b74d	b8 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b74f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b750	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=46796					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b751					Postpone:
.b751	20 d0 bb	jsr $bbd0			jsr parse_name_check	; get name string
.b754	20 08 be	jsr $be08			jsr find_name_check	; lookup name
.b757	a0 84		ldy #$84			ldy #Wh_Flags		; IMMEDIATE word?
.b759	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b75b	29 04		and #$04			and #IM
.b75d	f0 03		beq $b762			beq _not_immediate
.b75f	4c b2 b7	jmp $b7b2			jmp Compile_Comma_NT	; compile it as if it was not IMMEDIATE
.b762					_not_immediate:
.b762	20 a4 b8	jsr $b8a4			jsr LDYA_Immed_Comma		; compile LDA #; LDY # with nt of the word
.b765	a0 b7		ldy #$b7			ldy #>Compile_Comma_NT_YA	; compile COMPILE,
.b767	a9 b5		lda #$b5			lda #<Compile_Comma_NT_YA
.b769	4c 4d ce	jmp $ce4d			jmp Jsr_Comma_YA
=27					CL	.var *-(WordListLink+wh_Xt)
=$b76c					en = *	; remember here
>b74f	1b					.byte CL	;wh_CodeLength
>b76c	52 65 63 75 72 73 65		L1:	.text "Recurse"	;  name of word as a string, ending at wh_NameLastChar
>b773	a7					.byte (("Recurse"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b774	cc b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b776	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b777	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=46835					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b778					Recurse:
.b778	a5 0e		lda $0e				lda WorkWord+0
.b77a	a4 0f		ldy $0f				ldy WorkWord+1
.b77c	20 be b8	jsr $b8be			jsr PushYA
.b77f	24 0c		bit $0c				bit status		; does WorkWord contain xt or nt?
.b781	50 10		bvc $b793			bvc _xt
.b783	a0 84		ldy #$84			ldy #wh_Flags		; is it Always-Native ?
.b785	b1 0e		lda ($0e),y			lda (WorkWord),y
.b787	29 02		and #$02			and #AN
.b789	f0 05		beq $b790			beq _NotAn
.b78b	a9 e5		lda #$e5			lda #$100+err_InvalidRecursion
.b78d	20 6c b5	jsr $b56c			jsr ThrowA
.b790					_NotAN:
.b790	20 e8 be	jsr $bee8			jsr Name_To_Int		; convert nt to xt
.b793					_xt:
.b793	4c 4a ce	jmp $ce4a			jmp Jsr_Comma		; compile JSR xt, return
=30					CL	.var *-(WordListLink+wh_Xt)
=$b796					en = *	; remember here
>b776	1e					.byte CL	;wh_CodeLength
>b796	43 6f 6d 70 69 6c 65 2c		L1:	.text "Compile,"	;  name of word as a string, ending at wh_NameLastChar
>b79e	88					.byte (("Compile,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b79f	f3 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7a1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7a2	08					.byte NN	;wh_Flags	dictionary flags
=46878					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7a3					Compile_Comma:
.b7a3	20 85 d0	jsr $d085			jsr Dup			; ( xt xt )
.b7a6	20 8e be	jsr $be8e			jsr Int_To_Name		; ( xt nt )	does a dictionary search, tmp1=nt
.b7a9	e8		inx				inx			; drop nt
.b7aa	e8		inx				inx
.b7ab	a5 15		lda $15				lda tmp1+1
.b7ad	d0 0a		bne $b7b9			bne Compile_Comma_NT_Tmp1
.b7af	4c 4a ce	jmp $ce4a			jmp Jsr_Comma		; compile jsr, return
.b7b2					Compile_Comma_NT:
.b7b2	20 e3 b4	jsr $b4e3			jsr PopYA
.b7b5					Compile_Comma_NT_YA:
.b7b5	85 14		sta $14				sta tmp1+0		; tmp1= nt
.b7b7	84 15		sty $15				sty tmp1+1
.b7b9					Compile_Comma_NT_Tmp1:
.b7b9	ca		dex				dex
.b7ba	ca		dex				dex
.b7bb	18		clc				clc
.b7bc	a5 14		lda $14				lda tmp1+0
.b7be	69 85		adc #$85			adc #wh_xt
.b7c0	95 24		sta $24,x			sta DSTack+0,x
.b7c2	a5 15		lda $15				lda tmp1+1
.b7c4	69 00		adc #$00			adc #0
.b7c6	95 25		sta $25,x			sta DStack+1,x		; ( xt )
.b7c8	a0 83		ldy #$83			ldy #wh_CodeLength
.b7ca	b1 14		lda ($14),y			lda (tmp1),y
.b7cc	20 f0 b8	jsr $b8f0			jsr PushZA		; ( xt u )
.b7cf	a0 84		ldy #$84			ldy #Wh_Flags		; save word flags
.b7d1	b1 14		lda ($14),y			lda (tmp1),y
.b7d3	95 25		sta $25,x			sta DStack+1,x
.b7d5	29 02		and #$02			and #AN			; Always Native (AN) word?
.b7d7	d0 2b		bne $b804			bne _inline
.b7d9	b5 25		lda $25,x			lda DStack+1,x		; Never Native (NN) word?
.b7db	29 08		and #$08			and #NN
.b7dd	d0 0e		bne $b7ed			bne _jsr_opt
.b7df	ad 03 03	lda $0303			lda nc_limit+1		; wordsize<=nc_limit?
.b7e2	d0 20		bne $b804			bne _inline
.b7e4	ad 02 03	lda $0302			lda nc_limit+0
.b7e7	d5 24		cmp $24,x			cmp DStack+0,x
.b7e9	f0 02		beq $b7ed			beq _jsr_opt
.b7eb	b0 17		bcs $b804			bcs _inline
.b7ed					_jsr_opt:
.b7ed	ad 04 03	lda $0304			lda uf_strip
.b7f0	f0 0d		beq $b7ff			beq _jsr
.b7f2	b5 25		lda $25,x			lda DStack+1,x		; underflow strip & not stack strip?
.b7f4	49 10		eor #$10			eor #UF
.b7f6	29 50		and #$50			and #UF+R6
.b7f8	d0 05		bne $b7ff			bne _jsr
.b7fa	a9 03		lda #$03			lda #3			; skip the underflow check
.b7fc	20 1e cb	jsr $cb1e			jsr Nos_Plus_A
.b7ff					_jsr:
.b7ff	e8		inx				inx			; Drop len or nt
.b800	e8		inx				inx
.b801	4c 4a ce	jmp $ce4a			jmp Jsr_Comma		; compile jsr, return
.b804					_inline:
.b804	b5 25		lda $25,x			lda DStack+1,x		; this word contains RTS addr save & restore?
.b806	29 40		and #$40			and #R6
.b808	f0 0a		beq $b814			beq +
.b80a	a9 06		lda #$06			lda #6			;   Adjust xt: skip over the leading RTS addr save
.b80c	20 1e cb	jsr $cb1e			jsr Nos_Plus_A
.b80f	a9 f4		lda #$f4			lda #$f4		;   Adjust u: omit the leading RTS addr save & trailing RTS addr restore
.b811	20 54 cb	jsr $cb54			jsr minus_a
.b814					+
.b814	ad 04 03	lda $0304			lda uf_strip+0		; user wants underflow stripping?
.b817	f0 10		beq $b829			beq +
.b819	b5 25		lda $25,x			lda DStack+1,x		; this word contains underflow checking?
.b81b	29 10		and #$10			and #UF
.b81d	f0 0a		beq $b829			beq +
.b81f	a9 03		lda #$03			lda #3			;   Adjust xt: Start after underflow check
.b821	20 1e cb	jsr $cb1e			jsr Nos_Plus_A
.b824	a9 fd		lda #$fd			lda #$fd		;   Adjust u: omit underflow check
.b826	20 54 cb	jsr $cb54			jsr minus_a
.b829					+
.b829	b5 24		lda $24,x			lda DStack+0,x		; compile code bytes
.b82b	f0 0c		beq $b839			beq _copy_end
.b82d	a1 26		lda ($26,x)	_copy_loop:	lda (DStack+2,x)
.b82f	20 0e ce	jsr $ce0e			jsr C_Comma_A
.b832	20 6f cb	jsr $cb6f			jsr NOS_One_Plus
.b835	d6 24		dec $24,x			dec DStack+0,x
.b837	d0 f4		bne $b82d			bne _copy_loop
.b839					_copy_end:
.b839	4c 0a c6	jmp $c60a			jmp Two_drop
=153					CL	.var *-(WordListLink+wh_Xt)
=$b83c					en = *	; remember here
>b7a1	99					.byte CL	;wh_CodeLength
>b83c	5b				L1:	.text "["	;  name of word as a string, ending at wh_NameLastChar
>b83d	61					.byte (("["[-1]&7)<<5)+(*-L1)	;wh_HNL
>b83e	1e b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b840	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b841	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=47037					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b842	a5 0a		lda $0a		Left_Bracket:	lda state+0		; Already in the interpret state?
.b844	d0 05		bne $b84b			bne Left_Bracket_NoCheck
.b846	a9 69		lda #$69			lda #$100+err_AlreadyInterpreting
.b848	4c 6c b5	jmp $b56c			jmp ThrowA
.b84b					Left_Bracket_NoCheck:
.b84b	a9 00		lda #$00			lda #0
.b84d	85 0a		sta $0a		Left_Bracket_3:	sta state+0
.b84f	85 0b		sta $0b				sta state+1
=15					CL	.var *-(WordListLink+wh_Xt)
=$b851					en = *	; remember here
>b840	0f					.byte CL	;wh_CodeLength
.b851	60		rts				rts
>b852	5d				L1:	.text "]"	;  name of word as a string, ending at wh_NameLastChar
>b853	a1					.byte (("]"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b854	bd b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b856	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b857	0c					.byte IM+NN	;wh_Flags	dictionary flags
=47059					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b858					Right_Bracket:
.b858	a5 0a		lda $0a				lda state+0		; Already in the compile state?
.b85a	f0 05		beq $b861			beq +
.b85c	a9 68		lda #$68			lda #$100+err_AlreadyCompiling ;   complain and quit
.b85e	4c 6c b5	jmp $b56c			jmp ThrowA
.b861					+
.b861	a9 ff		lda #$ff			lda #$FF
.b863	d0 e8		bne $b84d			bne Left_Bracket_3
=13					CL	.var *-(WordListLink+wh_Xt)
=$b865					en = *	; remember here
>b856	0d					.byte CL	;wh_CodeLength
>b865	4c 69 74 65 72 61 6c		L1:	.text "Literal"	;  name of word as a string, ending at wh_NameLastChar
>b86c	87					.byte (("Literal"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b86d	d3 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b86f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b870	1d					.byte IM+CO+UF+NN	;wh_Flags	dictionary flags
=47084					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b871					Literal:
.b871	20 0d b5	jsr $b50d			jsr underflow_1
.b874	20 7a b8	jsr $b87a			jsr LitCompile		; compile load regs, choose a runtime routine
.b877	4c b5 b7	jmp $b7b5			jmp Compile_Comma_NT_YA ; compile JSR runtime
=9					CL	.var *-(WordListLink+wh_Xt)
=$b87a					en = *	; remember here
>b86f	09					.byte CL	;wh_CodeLength
.b87a					LitCompile:
.b87a	b5 25		lda $25,x			lda DStack+1,x		; hi byte zero?
.b87c	f0 08		beq $b886			beq _ZByte
.b87e	20 a4 b8	jsr $b8a4			jsr ldya_immed_comma	; compile "ldy #; lda #" using TOS
.b881	a9 39		lda #$39			lda #<(PushYA-wh_xt)	; prepare for Compile_Comma_NT_YA or Jmp_Comma_NT_YA
.b883	a0 b8		ldy #$b8			ldy #>(PushYA-wh_xt)
.b885	60		rts				rts
.b886					_ZByte:
.b886	b4 24		ldy $24,x			ldy DStack+0,x		; is it 0 ?
.b888	f0 08		beq $b892			beq _zero
.b88a	20 ab b8	jsr $b8ab			jsr lda_immed_comma	; compile "lda #" using TOS
.b88d	a9 6b		lda #$6b			lda #<(PushZA-wh_xt)	; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b88f	a0 b8		ldy #$b8			ldy #>(PushZA-wh_xt)
.b891	60		rts				rts
.b892	e8		inx		_zero:		inx			; drop
.b893	e8		inx				inx
.b894	a9 7a		lda #$7a			lda #<(Zero-wh_xt)	; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b896	a0 b8		ldy #$b8			ldy #>(Zero-wh_xt)
.b898	60		rts				rts
>b899	4c 44 59 41 23 2c		L1:	.text "LDYA#,"	;  name of word as a string, ending at wh_NameLastChar
>b89f	86					.byte (("LDYA#,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b8a0	ec b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b8a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b8a3	08					.byte NN	;wh_Flags	dictionary flags
=47135					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b8a4					ldya_immed_comma:
.b8a4	a9 a0		lda #$a0			lda #$a0		; ldy #
.b8a6	b4 25		ldy $25,x			ldy DStack+1,x
.b8a8	20 28 ce	jsr $ce28			jsr Comma_YA
.b8ab					lda_immed_comma:
.b8ab	a9 a9		lda #$a9			lda #$a9		; lda #
.b8ad	20 0e ce	jsr $ce0e			jsr C_Comma_A
.b8b0	4c 0b ce	jmp $ce0b			jmp C_Comma
=15					CL	.var *-(WordListLink+wh_Xt)
=$b8b3					en = *	; remember here
>b8a2	0f					.byte CL	;wh_CodeLength
>b8b3	50 75 73 68 59 41		L1:	.text "PushYA"	;  name of word as a string, ending at wh_NameLastChar
>b8b9	26					.byte (("PushYA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b8ba	1f b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b8bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b8bd	00					.byte 0	;wh_Flags	dictionary flags
=47161					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b8be	ca		dex		PushYA:		dex
.b8bf	ca		dex				dex
.b8c0	95 24		sta $24,x			sta DStack+0,x
.b8c2	94 25		sty $25,x			sty DStack+1,x
=6					CL	.var *-(WordListLink+wh_Xt)
=$b8c4					en = *	; remember here
>b8bc	06					.byte CL	;wh_CodeLength
.b8c4	60		rts				rts
>b8c5	54 72 75 65			L1:	.text "True"	;  name of word as a string, ending at wh_NameLastChar
>b8c9	a4					.byte (("True"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b8ca	39 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b8cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b8cd	00					.byte 0	;wh_Flags	dictionary flags
=47177					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b8ce	a9 ff		lda #$ff	True:		lda #$FF
.b8d0	ca		dex		PushAA:		dex
.b8d1	ca		dex				dex
.b8d2	95 24		sta $24,x			sta DStack+0,x
.b8d4	95 25		sta $25,x			sta DStack+1,x
=8					CL	.var *-(WordListLink+wh_Xt)
=$b8d6					en = *	; remember here
>b8cc	08					.byte CL	;wh_CodeLength
.b8d6	60		rts				rts
>b8d7	46 61 6c 73 65			L1:	.text "False"	;  name of word as a string, ending at wh_NameLastChar
>b8dc	a5					.byte (("False"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b8dd	49 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b8df	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b8e0	08					.byte NN	;wh_Flags	dictionary flags
=47196					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b8e1	a9 00		lda #$00	False:		lda #0
.b8e3	f0 0b		beq $b8f0			beq PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b8e5					en = *	; remember here
>b8df	04					.byte CL	;wh_CodeLength
>b8e5	50 75 73 68 5a 41		L1:	.text "PushZA"	;  name of word as a string, ending at wh_NameLastChar
>b8eb	26					.byte (("PushZA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b8ec	5c b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b8ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b8ef	00					.byte 0	;wh_Flags	dictionary flags
=47211					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b8f0	ca		dex		PushZA:		dex
.b8f1	ca		dex				dex
.b8f2	95 24		sta $24,x			sta DStack+0,x
.b8f4	a9 00		lda #$00			lda #0
.b8f6	95 25		sta $25,x			sta DStack+1,x
=8					CL	.var *-(WordListLink+wh_Xt)
=$b8f8					en = *	; remember here
>b8ee	08					.byte CL	;wh_CodeLength
.b8f8	60		rts				rts
>b8f9	30				L1:	.text "0"	;  name of word as a string, ending at wh_NameLastChar
>b8fa	01					.byte (("0"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b8fb	6b b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b8fd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b8fe	08					.byte NN	;wh_Flags	dictionary flags
=47226					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b8ff	a9 00		lda #$00	Zero:		lda #0
.b901	f0 ed		beq $b8f0			beq PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b903					en = *	; remember here
>b8fd	04					.byte CL	;wh_CodeLength
>b903	31				L1:	.text "1"	;  name of word as a string, ending at wh_NameLastChar
>b904	21					.byte (("1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b905	7a b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b907	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b908	08					.byte NN	;wh_Flags	dictionary flags
=47236					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b909	a9 01		lda #$01	One:		lda #1
.b90b	d0 e3		bne $b8f0			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b90d					en = *	; remember here
>b907	04					.byte CL	;wh_CodeLength
>b90d	32				L1:	.text "2"	;  name of word as a string, ending at wh_NameLastChar
>b90e	41					.byte (("2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b90f	84 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b911	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b912	08					.byte NN	;wh_Flags	dictionary flags
=47246					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b913	a9 02		lda #$02	Two:		lda #2
.b915	d0 d9		bne $b8f0			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b917					en = *	; remember here
>b911	04					.byte CL	;wh_CodeLength
>b917	42 6c				L1:	.text "Bl"	;  name of word as a string, ending at wh_NameLastChar
>b919	82					.byte (("Bl"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b91a	8e b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b91c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b91d	08					.byte NN	;wh_Flags	dictionary flags
=47257					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b91e	a9 20		lda #$20	Bl:		lda #AscSP
.b920	d0 ce		bne $b8f0			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b922					en = *	; remember here
>b91c	04					.byte CL	;wh_CodeLength
>b922	3e 49 6e			L1:	.text ">In"	;  name of word as a string, ending at wh_NameLastChar
>b925	c3					.byte ((">In"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b926	99 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b928	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b929	08					.byte NN	;wh_Flags	dictionary flags
=47269					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b92a	a9 08		lda #$08			lda #ToIn
.b92c	4c f0 b8	jmp $b8f0			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b92f					en = *	; remember here
>b928	05					.byte CL	;wh_CodeLength
>b92f	53 74 61 74 65			L1:	.text "State"	;  name of word as a string, ending at wh_NameLastChar
>b934	a5					.byte (("State"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b935	a5 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b937	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b938	08					.byte NN	;wh_Flags	dictionary flags
=47284					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b939	a9 0a		lda #$0a			lda #state
.b93b	4c f0 b8	jmp $b8f0			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b93e					en = *	; remember here
>b937	05					.byte CL	;wh_CodeLength
>b93e	64 70				L1:	.text "dp"	;  name of word as a string, ending at wh_NameLastChar
>b940	02					.byte (("dp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b941	b4 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b943	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b944	08					.byte NN	;wh_Flags	dictionary flags
=47296					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b945	a9 10		lda #$10			lda #dp
.b947	4c f0 b8	jmp $b8f0			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b94a					en = *	; remember here
>b943	05					.byte CL	;wh_CodeLength
>b94a	54 6d 70 31			L1:	.text "Tmp1"	;  name of word as a string, ending at wh_NameLastChar
>b94e	24					.byte (("Tmp1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b94f	c0 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b951	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b952	08					.byte NN	;wh_Flags	dictionary flags
=47310					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b953	a9 14		lda #$14			lda #tmp1
.b955	4c f0 b8	jmp $b8f0			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b958					en = *	; remember here
>b951	05					.byte CL	;wh_CodeLength
>b958	44 53 74 61 63 6b		L1:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
>b95e	66					.byte (("DStack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b95f	ce b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b961	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b962	08					.byte NN	;wh_Flags	dictionary flags
=47326					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b963	a9 24		lda #$24			lda #DStack
.b965	4c f0 b8	jmp $b8f0			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b968					en = *	; remember here
>b961	05					.byte CL	;wh_CodeLength
>b968	32 4c 69 74 65 72 61 6c		L1:	.text "2Literal"	;  name of word as a string, ending at wh_NameLastChar
>b970	88					.byte (("2Literal"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b971	de b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b973	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b974	1c					.byte UF+IM+NN	;wh_Flags	dictionary flags
=47344					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b975					Two_literal:
.b975	20 22 b5	jsr $b522			jsr underflow_2 ; check double number
.b978	20 a3 d0	jsr $d0a3			jsr Swap
.b97b	20 71 b8	jsr $b871			jsr Literal	; do lo cell
.b97e	4c 71 b8	jmp $b871			jmp Literal	; do hi cell
=12					CL	.var *-(WordListLink+wh_Xt)
=$b981					en = *	; remember here
>b973	0c					.byte CL	;wh_CodeLength
>b981	53 4c 69 74 65 72 61 6c		L1:	.text "SLiteral"	;  name of word as a string, ending at wh_NameLastChar
>b989	88					.byte (("SLiteral"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b98a	f0 b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b98c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b98d	1d					.byte CO+IM+UF+NN	;wh_Flags	dictionary flags
=47369					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b98e					SLiteral:
.b98e	20 22 b5	jsr $b522			jsr underflow_2
.b991	20 b1 b9	jsr $b9b1			jsr SLiteral_Start	; compile header
.b994	4c a5 b9	jmp $b9a5			jmp _Move_Test
.b997	a1 28		lda ($28,x)	_Move_Loop:	lda (DStack+4,x)
.b999	20 0e ce	jsr $ce0e			jsr C_Comma_A
.b99c	f6 28		inc $28,x			inc DStack+4,x
.b99e	d0 02		bne $b9a2			bne +
.b9a0	f6 29		inc $29,x			inc DStack+5,x
.b9a2					+
.b9a2	20 4b cb	jsr $cb4b			jsr NOS_One_Minus
.b9a5	b5 26		lda $26,x	_Move_Test:	lda DStack+2,x
.b9a7	15 27		ora $27,x			ora DStack+3,x
.b9a9	d0 ec		bne $b997			bne _Move_Loop
.b9ab	20 be b9	jsr $b9be			jsr SLiteral_End
.b9ae	4c 0a c6	jmp $c60a			jmp Two_Drop		; clean up and leave
=35					CL	.var *-(WordListLink+wh_Xt)
=$b9b1					en = *	; remember here
>b98c	23					.byte CL	;wh_CodeLength
.b9b1					SLiteral_Start:
.b9b1	a9 cf		lda #$cf			lda #<SLiteral_runtime	; compile JSR SLiteral_Runtime
.b9b3	a0 b9		ldy #$b9			ldy #>SLiteral_runtime
.b9b5	20 4d ce	jsr $ce4d			jsr Jsr_Comma_YA
.b9b8	20 31 cb	jsr $cb31			jsr Here		; push addr of start of JMP
.b9bb	4c 64 ce	jmp $ce64			jmp Jmp_Comma_YA	; compile JMP around string (dummy addr)
.b9be					SLiteral_End:
.b9be	20 65 cb	jsr $cb65			jsr One_Plus
.b9c1	a5 00		lda $00				lda cp+0		; Update the address of the jump to HERE.
.b9c3	81 24		sta ($24,x)			sta (DStack+0,x)
.b9c5	20 65 cb	jsr $cb65			jsr One_Plus
.b9c8	a5 01		lda $01				lda cp+1
.b9ca	81 24		sta ($24,x)			sta (DStack+0,x)
.b9cc	e8		inx				inx			; drop herej
.b9cd	e8		inx				inx
.b9ce	60		rts				rts
.b9cf					SLiteral_Runtime:
.b9cf	86 16		stx $16				stx tmp2	; save data stack index
.b9d1	ba		tsx				tsx
.b9d2	bd 01 01	lda $0101,x	SLiteral_Run2:	lda RStack+1,x	; tmp1= RTS addr
.b9d5	85 14		sta $14				sta tmp1+0
.b9d7	bd 02 01	lda $0102,x			lda RStack+2,x
.b9da	85 15		sta $15				sta tmp1+1
.b9dc	a6 16		ldx $16				ldx tmp2	; restore data stack index
.b9de	ca		dex				dex		; push string addr
.b9df	ca		dex				dex
.b9e0	18		clc				clc
.b9e1	a5 14		lda $14				lda tmp1+0
.b9e3	69 04		adc #$04			adc #3+1	;   just after the following JMP + correcting for JSR behavior
.b9e5	95 24		sta $24,x			sta DStack+0,x
.b9e7	a5 15		lda $15				lda tmp1+1
.b9e9	69 00		adc #$00			adc #0
.b9eb	95 25		sta $25,x			sta DStack+1,x
.b9ed	ca		dex				dex		; push string length
.b9ee	ca		dex				dex
.b9ef	38		sec				sec
.b9f0	a0 02		ldy #$02			ldy #2		;   = string_end - string_addr
.b9f2	b1 14		lda ($14),y			lda (tmp1),y
.b9f4	f5 26		sbc $26,x			sbc DStack+2,x
.b9f6	95 24		sta $24,x			sta DStack+0,x
.b9f8	c8		iny				iny
.b9f9	b1 14		lda ($14),y			lda (tmp1),y
.b9fb	f5 27		sbc $27,x			sbc DStack+3,x
.b9fd	95 25		sta $25,x			sta DStack+1,x
.b9ff	60		rts				rts
>ba00	2e 22				L1:	.text '."'	;  name of word as a string, ending at wh_NameLastChar
>ba02	42					.byte (('."'[-1]&7)<<5)+(*-L1)	;wh_HNL
>ba03	09 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba05	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba06	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=47490					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba07					Dot_quote:
.ba07	20 18 ba	jsr $ba18			jsr S_Quote		; compile the string literal
.ba0a	a0 cf		ldy #$cf			ldy #>Type		; compile: print string
.ba0c	a9 0d		lda #$0d			lda #<Type
.ba0e	4c 4d ce	jmp $ce4d			jmp Jsr_Comma_YA
=10					CL	.var *-(WordListLink+wh_Xt)
=$ba11					en = *	; remember here
>ba05	0a					.byte CL	;wh_CodeLength
>ba11	53 22				L1:	.text 'S"'	;  name of word as a string, ending at wh_NameLastChar
>ba13	42					.byte (('S"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>ba14	82 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba16	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba17	0c					.byte IM+NN	;wh_Flags	dictionary flags
=47507					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba18					S_Quote:
.ba18	a9 00		lda #$00			lda #0		; Don't handle escaped chars.
.ba1a					S_Quote_start:
.ba1a	48		pha				pha			; save "handle escaped chars" flag
.ba1b	a5 0a		lda $0a				lda state		; compiling?
.ba1d	f0 06		beq $ba25			beq _15
.ba1f	20 b1 b9	jsr $b9b1			jsr SLiteral_Start	; compile SLiteral header
.ba22	4c 28 ba	jmp $ba28			jmp _19
.ba25	20 31 cb	jsr $cb31	_15:		jsr Here		; remember start addr
.ba28					_19:
.ba28	68		pla				pla			; init t2 flags
.ba29	20 f0 b8	jsr $b8f0			jsr PushZA
.ba2c	20 ff b8	jsr $b8ff			jsr Zero		; init t3 flags
.ba2f					_savechars_loop:
.ba2f	a5 08		lda $08				lda toin+0		; LSB
.ba31	c5 06		cmp $06				cmp ciblen+0
.ba33	a5 09		lda $09				lda toin+1		; MSB
.ba35	e5 07		sbc $07				sbc ciblen+1
.ba37	90 10		bcc $ba49			bcc _input_fine		; input buffer empty?
.ba39	20 80 c3	jsr $c380			jsr Refill		; Refill it  ( -- f )
.ba3c	b5 24		lda $24,x			lda DStack+0,x		; Check result of refill.
.ba3e	d0 05		bne $ba45			bne +
.ba40	a9 6b		lda #$6b			lda #$100+err_refill	; Something when wrong with refill.
.ba42	4c 6c b5	jmp $b56c			jmp ThrowA
.ba45	e8		inx		+		inx			; Drop the refill flag
.ba46	e8		inx				inx
.ba47	d0 e6		bne $ba2f			bne _savechars_loop	; jump back up to the empty check, just in
.ba49					_input_fine:
.ba49	18		clc				clc			; tmp1= A= the char at Cib+ToIn
.ba4a	a5 04		lda $04				lda cib+0
.ba4c	85 14		sta $14				sta tmp1+0
.ba4e	a5 05		lda $05				lda cib+1
.ba50	65 09		adc $09				adc toin+1
.ba52	85 15		sta $15				sta tmp1+1
.ba54	a4 08		ldy $08				ldy ToIn
.ba56	b1 14		lda ($14),y			lda (tmp1),y
.ba58	85 14		sta $14				sta tmp1
.ba5a	e6 08		inc $08				inc toin+0		; Move on to the next character.
.ba5c	d0 02		bne $ba60			bne +
.ba5e	e6 09		inc $09				inc toin+1
.ba60					+
.ba60	b4 26		ldy $26,x			ldy DStack+2,x		; handling escaped characters?
.ba62	30 03		bmi $ba67			bmi +
.ba64	4c 0a bb	jmp $bb0a			jmp _regular_char
.ba67					+
.ba67	b4 27		ldy $27,x			ldy DStack+3,x  		; already seen the backslash?
.ba69	30 03		bmi $ba6e			bmi +
.ba6b	4c 00 bb	jmp $bb00			jmp _not_escaped
.ba6e					+
.ba6e	84 15		sty $15				sty tmp1+1
.ba70	24 15		bit $15				bit tmp1+1		; in the middle of a \x sequence ?
.ba72	70 25		bvs $ba99			bvs _check_esc_chars
.ba74	a9 01		lda #$01			lda #1
.ba76	24 15		bit $15				bit tmp1+1
.ba78	d0 11		bne $ba8b			bne _esc_x_second_digit
.ba7a	c8		iny				iny			; Adjust flag for second digit next time.
.ba7b	94 27		sty $27,x			sty DStack+3,x
.ba7d	a5 14		lda $14				lda tmp1+0		; Get the char again.
.ba7f	20 2d bb	jsr $bb2d			jsr convert_hex_value	; Convert to hex
.ba82	0a		asl a				asl			; This is the upper nybble, so move it up.
.ba83	0a		asl a				asl
.ba84	0a		asl a				asl
.ba85	0a		asl a				asl
.ba86	95 24		sta $24,x			sta DStack+0,x		; Save it for later.
.ba88	4c 11 bb	jmp $bb11			jmp _next_character
.ba8b					_esc_x_second_digit:
.ba8b	a9 00		lda #$00			lda #0			; Clear the escaped character flag
.ba8d	95 27		sta $27,x			sta DStack+3,x		;   (because we are handling it right here)
.ba8f	a5 14		lda $14				lda tmp1+0		; Convert to hex
.ba91	20 2d bb	jsr $bb2d			jsr convert_hex_value
.ba94	15 24		ora $24,x			ora DStack+0,x		; combine with value in t3
.ba96	4c 0e bb	jmp $bb0e			jmp _save_character
.ba99					_check_esc_chars:
.ba99	a0 00		ldy #$00			ldy #0
.ba9b	94 27		sty $27,x			sty DStack+3,x
.ba9d	a8		tay				tay
.ba9e	a9 07		lda #$07			lda #AscBELL	      ; BEL (ASCII value 7)
.baa0	c0 61		cpy #$61			cpy #'a'
.baa2	f0 6a		beq $bb0e			beq _save_character
.baa4	a9 08		lda #$08			lda #AscBS	      ; Backspace (ASCII value 8)
.baa6	c0 62		cpy #$62			cpy #'b'
.baa8	f0 64		beq $bb0e			beq _save_character
.baaa	a9 1b		lda #$1b			lda #AscESC	       ; ESC (ASCII value 27)
.baac	c0 65		cpy #$65			cpy #'e'
.baae	f0 5e		beq $bb0e			beq _save_character
.bab0	a9 0c		lda #$0c			lda #AscFF	       ; FF (ASCII value 12)
.bab2	c0 66		cpy #$66			cpy #'f'
.bab4	f0 58		beq $bb0e			beq _save_character
.bab6	a9 0a		lda #$0a			lda #AscLF	       ; LF (ASCII value 10)
.bab8	c0 6c		cpy #$6c			cpy #'l'
.baba	f0 52		beq $bb0e			beq _save_character
.babc	c0 6e		cpy #$6e			cpy #'n'
.babe	f0 4e		beq $bb0e			beq _save_character
.bac0	c0 6d		cpy #$6d			cpy #'m'
.bac2	d0 09		bne $bacd			bne +
.bac4	a9 0d		lda #$0d			lda #AscCR		; CR/LF pair (ASCII values 13, 10)
.bac6	20 0e ce	jsr $ce0e			jsr C_Comma_A
.bac9	a9 0a		lda #$0a			lda #AscLF
.bacb	d0 41		bne $bb0e			bne _save_character
.bacd					+
.bacd	a9 22		lda #$22			lda #AscDQuote		; Double quote (ASCII value 34)
.bacf	c0 71		cpy #$71			cpy #'q'
.bad1	f0 3b		beq $bb0e			beq _save_character
.bad3	c0 22		cpy #$22			cpy #AscDQuote
.bad5	f0 37		beq $bb0e			beq _save_character
.bad7	a9 0d		lda #$0d			lda #AscCR		; CR (ASCII value 13)
.bad9	c0 72		cpy #$72			cpy #'r'
.badb	f0 31		beq $bb0e			beq _save_character
.badd	a9 09		lda #$09			lda #AscHT		; Horizontal TAB (ASCII value 9)
.badf	c0 74		cpy #$74			cpy #'t'
.bae1	f0 2b		beq $bb0e			beq _save_character
.bae3	a9 0b		lda #$0b			lda #AscVT		; Vertical TAB (ASCII value 11)
.bae5	c0 76		cpy #$76			cpy #'v'
.bae7	f0 25		beq $bb0e			beq _save_character
.bae9	a9 00		lda #$00			lda #0			; NULL (ASCII value 0)
.baeb	c0 7a		cpy #$7a			cpy #'z'
.baed	f0 1f		beq $bb0e			beq _save_character
.baef					_check_esc_x:
.baef	c0 78		cpy #$78			cpy #'x'
.baf1	d0 06		bne $baf9			bne +
.baf3	a9 be		lda #$be			lda #$BE	; Clear bits 6 and 0
.baf5	95 27		sta $27,x			sta DStack+3,x
.baf7	d0 18		bne $bb11			bne _next_character
.baf9					+
.baf9	a9 5c		lda #$5c			lda #AscBackslash	; Backslash (ASCII value 92)
.bafb	c0 5c		cpy #$5c			cpy #AscBackslash
.bafd	f0 0f		beq $bb0e			beq _save_character
.baff	98		tya				tya
.bb00					_not_escaped:
.bb00	c9 5c		cmp #$5c			cmp #$5C	; The backslash char
.bb02	d0 06		bne $bb0a			bne _regular_char
.bb04	a9 ff		lda #$ff			lda #$FF
.bb06	95 27		sta $27,x			sta DStack+3,x
.bb08	d0 07		bne $bb11			bne _next_character
.bb0a					_regular_char:
.bb0a	c9 22		cmp #$22			cmp #AscDQuote		; ASCII for "
.bb0c	f0 06		beq $bb14			beq _found_string_end
.bb0e					_save_character:
.bb0e	20 0e ce	jsr $ce0e			jsr C_Comma_A		; compile this character into the dictionary
.bb11					_next_character:
.bb11	4c 2f ba	jmp $ba2f			jmp _savechars_loop
.bb14					_found_string_end:
.bb14	e8		inx				inx			; Drop t3
.bb15	e8		inx				inx
.bb16	a5 0a		lda $0a				lda state		; What happens next depends on the state (which is bad, but
.bb18	d0 0e		bne $bb28			bne _cmpl		; that's the way it works at the moment).
.bb1a	38		sec				sec			; TOS= length of string = Here - start_addr
.bb1b	a5 00		lda $00				lda cp+0
.bb1d	f5 26		sbc $26,x			sbc DStack+2,x
.bb1f	95 24		sta $24,x			sta DStack+0,x		;   LSB
.bb21	a5 01		lda $01				lda cp+1
.bb23	f5 27		sbc $27,x			sbc DStack+3,x
.bb25	95 25		sta $25,x			sta DStack+1,x		;   MSB
.bb27	60		rts				rts			; ( startaddr u )
.bb28					_cmpl:
.bb28	e8		inx				inx			; Drop t2
.bb29	e8		inx				inx
.bb2a	4c be b9	jmp $b9be			jmp SLiteral_End	; ( jmpaddr )
=277					CL	.var *-(WordListLink+wh_Xt)
=$ff					CL	 .var $ff
=$bb2d					en = *	; remember here
>ba16	ff					.byte CL	;wh_CodeLength
.bb2d					convert_hex_value:
.bb2d	c9 41		cmp #$41			cmp #'A'
.bb2f	90 05		bcc $bb36			bcc _digit
.bb31	29 1f		and #$1f	_alpha:		and #$1F		; Make it uppercase.
.bb33	69 08		adc #$08			adc #9-1		; gives value 10 for 'A'
.bb35	60		rts				rts
.bb36					_digit:
.bb36	e9 2f		sbc #$2f			sbc #'0'-1
.bb38	60		rts				rts
>bb39	53 5c 22			L1:	.text 'S\"'	;  name of word as a string, ending at wh_NameLastChar
>bb3c	43					.byte (('S\"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb3d	93 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb3f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb40	0c					.byte IM+NN	;wh_Flags	dictionary flags
=47804					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb41					S_Backslash_Quote:
.bb41	a9 ff		lda #$ff			lda #$ff	; Do handle escaped chars.
.bb43	4c 1a ba	jmp $ba1a			jmp S_Quote_start
=5					CL	.var *-(WordListLink+wh_Xt)
=$bb46					en = *	; remember here
>bb3f	05					.byte CL	;wh_CodeLength
>bb46	4c 61 74 65 73 74 58 74		L1:	.text "LatestXt"	;  name of word as a string, ending at wh_NameLastChar
>bb4e	88					.byte (("LatestXt"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb4f	bc ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb51	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb52	08					.byte NN	;wh_Flags	dictionary flags
=47822					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb53	20 66 bb	jsr $bb66	LatestXt:	jsr LatestNt	; ( nt )
.bb56	4c e8 be	jmp $bee8			jmp Name_To_Int	; ( xt )
=6					CL	.var *-(WordListLink+wh_Xt)
=$bb59					en = *	; remember here
>bb51	06					.byte CL	;wh_CodeLength
>bb59	4c 61 74 65 73 74 4e 74		L1:	.text "LatestNt"	;  name of word as a string, ending at wh_NameLastChar
>bb61	88					.byte (("LatestNt"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb62	ce ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb64	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb65	08					.byte NN	;wh_Flags	dictionary flags
=47841					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb66	20 70 bb	jsr $bb70	LatestNt:	jsr current_to_dp
.bb69	a5 10		lda $10				lda dp+0
.bb6b	a4 11		ldy $11				ldy dp+1
.bb6d	4c be b8	jmp $b8be			jmp PushYA
=10					CL	.var *-(WordListLink+wh_Xt)
=$bb70					en = *	; remember here
>bb64	0a					.byte CL	;wh_CodeLength
.bb70					current_to_dp:
.bb70	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.bb73	0a		asl a				asl			; dp= wordlists[A]
.bb74	a8		tay				tay
.bb75	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.bb78	85 10		sta $10				sta dp+0
.bb7a	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bb7d	85 11		sta $11				sta dp+1
.bb7f	60		rts				rts
.bb80					dp_to_current:
.bb80	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.bb83	0a		asl a		                asl			; wordlists[A]=dp
.bb84	a8		tay		                tay
.bb85	a5 10		lda $10		                lda dp+0
.bb87	99 12 03	sta $0312,y			sta WordlistsV+0,y
.bb8a	a5 11		lda $11		                lda dp+1
.bb8c	99 13 03	sta $0313,y	                sta WordlistsV+1,y
.bb8f	60		rts		                rts
>bb90	50 61 72 73 65 2d 4e 61		L1:	.text "Parse-Name"	;  name of word as a string, ending at wh_NameLastChar
>bb98	6d 65
>bb9a	aa					.byte (("Parse-Name"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb9b	e1 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb9d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb9e	08					.byte NN	;wh_Flags	dictionary flags
=47898					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb9f					Parse_Name:
.bb9f	a5 04		lda $04				lda cib+0		; tmp2= cib+(toin & $ff00)
.bba1	85 16		sta $16				sta tmp2+0
.bba3	18		clc				clc
.bba4	a5 05		lda $05				lda cib+1
.bba6	65 09		adc $09				adc toin+1
.bba8	85 17		sta $17				sta tmp2+1
.bbaa	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.bbac					_skip_loop:
.bbac	c4 06		cpy $06				cpy ciblen+0		; more chars left?
.bbae	a5 09		lda $09				lda toin+1
.bbb0	e5 07		sbc $07				sbc ciblen+1
.bbb2	b0 11		bcs $bbc5			bcs _empty_line
.bbb4	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.bbb6	c9 21		cmp #$21			cmp #AscSP+1		; is_whitespace
.bbb8	b0 10		bcs $bbca			bcs _char_found
.bbba	c8		iny				iny			; increment toin
.bbbb	84 08		sty $08				sty toin+0
.bbbd	d0 ed		bne $bbac			bne _skip_loop
.bbbf	e6 09		inc $09				inc toin+1
.bbc1	e6 17		inc $17				inc tmp2+1
.bbc3	d0 e7		bne $bbac			bne _skip_loop
.bbc5					_empty_line:
.bbc5	ca		dex				dex			; junk address
.bbc6	ca		dex				dex
.bbc7	4c ff b8	jmp $b8ff			jmp Zero		; length=0
.bbca					_char_found:
.bbca	20 1e b9	jsr $b91e			jsr Bl			; push delimiter char
.bbcd	4c e7 bb	jmp $bbe7			jmp Parse
=49					CL	.var *-(WordListLink+wh_Xt)
=$bbd0					en = *	; remember here
>bb9d	31					.byte CL	;wh_CodeLength
.bbd0					parse_name_check:
.bbd0	20 9f bb	jsr $bb9f			jsr parse_name		; get character from string
.bbd3	b5 24		lda $24,x			lda DStack+0,x		; empty string?
.bbd5	f0 01		beq $bbd8			beq _empty
.bbd7	60		rts				rts
.bbd8	a9 f3		lda #$f3	_empty:		lda #$100+err_UndefinedWord	; complain & abort
.bbda	4c 6c b5	jmp $b56c			jmp ThrowA
>bbdd	50 61 72 73 65			L1:	.text "Parse"	;  name of word as a string, ending at wh_NameLastChar
>bbe2	a5					.byte (("Parse"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bbe3	1a bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bbe5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bbe6	08					.byte NN	;wh_Flags	dictionary flags
=47970					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bbe7	20 c7 b4	jsr $b4c7	Parse:		jsr PopA		; pop c (check for underflow)
.bbea	85 1c		sta $1c		Parse_A:	sta tmp5		; save delimiter
.bbec	ca		dex				dex			; alloc space for addr
.bbed	ca		dex				dex
.bbee	ca		dex				dex			; alloc space for length
.bbef	ca		dex				dex
.bbf0	18		clc				clc			; addr= cib+toin
.bbf1	a5 08		lda $08				lda toin+0
.bbf3	65 04		adc $04				adc cib+0
.bbf5	95 26		sta $26,x			sta DStack+2,x
.bbf7	a5 09		lda $09				lda toin+1
.bbf9	65 05		adc $05				adc cib+1
.bbfb	95 27		sta $27,x			sta DStack+3,x
.bbfd	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.bbff	84 14		sty $14				sty tmp1+0
.bc01	a5 04		lda $04				lda cib+0		; tmp2= cib + (toin & $ff00)
.bc03	85 16		sta $16				sta tmp2+0
.bc05	18		clc				clc
.bc06	a5 09		lda $09				lda toin+1		; tmp1= toin
.bc08	85 15		sta $15				sta tmp1+1
.bc0a	65 05		adc $05				adc cib+1
.bc0c	85 17		sta $17				sta tmp2+1
.bc0e	a9 00		lda #$00			lda #0		; Initialize the offset we use to adjust EOL or found delimiter
.bc10	85 1d		sta $1d				sta tmp5+1
.bc12					_loop:
.bc12	c4 06		cpy $06				cpy ciblen+0		; end of string?
.bc14	a5 09		lda $09				lda toin+1
.bc16	e5 07		sbc $07				sbc ciblen+1
.bc18	b0 1d		bcs $bc37			bcs _eol
.bc1a	a5 1c		lda $1c				lda tmp5+0		; get delimiter
.bc1c	c9 20		cmp #$20			cmp #AscSP		; is it whitespace?
.bc1e	d0 08		bne $bc28			bne _not_whitespace
.bc20	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.bc22	c9 21		cmp #$21			cmp #AscSP+1		; we're looking for all whitespace
.bc24	90 0f		bcc $bc35			bcc _found_delimiter
.bc26	b0 04		bcs $bc2c			bcs _not_delimiter
.bc28	d1 16		cmp ($16),y	_not_whitespace: cmp (tmp2),y		; compare delimter to cib[toin]
.bc2a	f0 09		beq $bc35			beq _found_delimiter
.bc2c					_not_delimiter:
.bc2c	c8		iny				iny			; next character
.bc2d	d0 e3		bne $bc12			bne _loop
.bc2f	e6 09		inc $09				inc toin+1
.bc31	e6 17		inc $17				inc tmp2+1
.bc33	d0 dd		bne $bc12			bne _loop
.bc35					_found_delimiter:
.bc35	e6 1d		inc $1d				inc tmp5+1
.bc37					_eol:
.bc37	38		sec				sec			; length = toin - tmp1
.bc38	98		tya				tya
.bc39	e5 14		sbc $14				sbc tmp1+0
.bc3b	95 24		sta $24,x			sta DStack+0,x
.bc3d	a5 09		lda $09				lda toin+1
.bc3f	e5 15		sbc $15				sbc tmp1+1
.bc41	95 25		sta $25,x			sta DStack+1,x
.bc43	18		clc				clc			; toin = toin + delimiter_offset
.bc44	98		tya				tya
.bc45	65 1d		adc $1d				adc tmp5+1
.bc47	85 08		sta $08				sta toin+0
.bc49	90 02		bcc $bc4d			bcc +
.bc4b	e6 09		inc $09				inc toin+1
.bc4d					+
=102					CL	.var *-(WordListLink+wh_Xt)
=$bc4d					en = *	; remember here
>bbe5	66					.byte CL	;wh_CodeLength
.bc4d	60		rts				rts
>bc4e	45 78 65 63 75 74 65 2d		L1:	.text "Execute-Parsing"	;  name of word as a string, ending at wh_NameLastChar
>bc56	50 61 72 73 69 6e 67
>bc5d	ef					.byte (("Execute-Parsing"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bc5e	62 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc60	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc61	18					.byte UF+NN	;wh_Flags	dictionary flags
=48093					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc62					Execute_parsing:
.bc62	20 27 b5	jsr $b527			jsr underflow_3
.bc65	20 fc c4	jsr $c4fc			jsr Input_To_R		; save existing input for later
.bc68	20 af cf	jsr $cfaf			jsr Not_Rot		; -ROT ( xt addr u )
.bc6b	20 e3 b4	jsr $b4e3			jsr PopYA		; TOS is new ciblen
.bc6e	85 06		sta $06				sta ciblen+0
.bc70	84 07		sty $07				sty ciblen+1
.bc72	20 e3 b4	jsr $b4e3			jsr PopYA		; NOS is new cib
.bc75	85 04		sta $04				sta cib+0
.bc77	84 05		sty $05				sty cib+1
.bc79	a9 00		lda #$00			lda #0
.bc7b	85 08		sta $08				sta toin+0		; Set >IN to zero
.bc7d	85 09		sta $09				sta toin+1
.bc7f	20 4b cf	jsr $cf4b			jsr Execute
.bc82	20 1e c5	jsr $c51e			jsr R_To_Input		; restore
=35					CL	.var *-(WordListLink+wh_Xt)
=$bc85					en = *	; remember here
>bc60	23					.byte CL	;wh_CodeLength
.bc85	60		rts				rts
>bc86	53 6f 75 72 63 65		L1:	.text "Source"	;  name of word as a string, ending at wh_NameLastChar
>bc8c	a6					.byte (("Source"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bc8d	dd bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc8f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc90	08					.byte NN	;wh_Flags	dictionary flags
=48140					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc91					Source:
.bc91	a5 04		lda $04				lda cib+0	; push address
.bc93	a4 05		ldy $05				ldy cib+1
.bc95	20 be b8	jsr $b8be			jsr PushYA
.bc98	a5 06		lda $06				lda ciblen+0	; push size, return
.bc9a	a4 07		ldy $07				ldy ciblen+1
.bc9c	4c be b8	jmp $b8be			jmp PushYA
=14					CL	.var *-(WordListLink+wh_Xt)
=$bc9f					en = *	; remember here
>bc8f	0e					.byte CL	;wh_CodeLength
>bc9f	53 6f 75 72 63 65 2d 49		L1:	.text "Source-Id"	;  name of word as a string, ending at wh_NameLastChar
>bca7	64
>bca8	89					.byte (("Source-Id"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bca9	0c bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bcab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bcac	08					.byte NN	;wh_Flags	dictionary flags
=48168					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bcad	a5 02		lda $02		Source_Id:	lda insrc+0
.bcaf	a4 03		ldy $03				ldy insrc+1
.bcb1	4c be b8	jmp $b8be			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$bcb4					en = *	; remember here
>bcab	07					.byte CL	;wh_CodeLength
>bcb4	45 78 69 74			L1:	.text "Exit"	;  name of word as a string, ending at wh_NameLastChar
>bcb8	84					.byte (("Exit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bcb9	28 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bcbb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bcbc	03					.byte AN+CO	;wh_Flags	dictionary flags
=48184					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bcbd					Exit:
.bcbd	60		rts				rts		; keep before FEnd so it gets inlined
=1					CL	.var *-(WordListLink+wh_Xt)
=$bcbe					en = *	; remember here
>bcbb	01					.byte CL	;wh_CodeLength
>bcbe	3b				L1:	.text ";"	;  name of word as a string, ending at wh_NameLastChar
>bcbf	61					.byte ((";"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bcc0	38 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bcc2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bcc3	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=48191					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bcc4					Semicolon:
.bcc4	20 42 b8	jsr $b842			jsr Left_Bracket	; switch to interpret state
.bcc7	24 0c		bit $0c				bit status		; is this a : word or a :NONAME word?
.bcc9	70 0c		bvs $bcd7			bvs _colonword
.bccb	a9 60		lda #$60			lda #$60		; compile an RTS
.bccd	20 0e ce	jsr $ce0e			jsr C_Comma_A
.bcd0	a5 0e		lda $0e				lda WorkWord+0		; push xt, return
.bcd2	a4 0f		ldy $0f				ldy WorkWord+1
.bcd4	4c be b8	jmp $b8be			jmp PushYA
.bcd7					_colonword:
.bcd7	24 0c		bit $0c				bit status
.bcd9	10 1d		bpl $bcf8			bpl _new_word	; Bit 7 is clear = new word
.bcdb	a5 0e		lda $0e				lda WorkWord+0		; push our nt
.bcdd	a4 0f		ldy $0f				ldy WorkWord+1
.bcdf	20 be b8	jsr $b8be			jsr PushYA
.bce2	20 00 bf	jsr $bf00			jsr Name_To_String	; get our name string
.bce5	a9 f6		lda #$f6			lda #<str_redefined	; string "redefined"
.bce7	a0 db		ldy #$db			ldy #>str_redefined
.bce9	20 28 cf	jsr $cf28			jsr Print_ASCIIZ_YA_no_lf
.bcec	20 0d cf	jsr $cf0d			jsr Type		; print the offending word.
.bcef	20 00 cf	jsr $cf00			jsr Space
.bcf2	a9 7f		lda #$7f			lda #$ff-%10000000
.bcf4	25 0c		and $0c				and status
.bcf6	85 0c		sta $0c				sta status
.bcf8					_new_word:
.bcf8	20 2e c2	jsr $c22e			jsr Header_Link		; finish linking into current dictionary
.bcfb	20 03 bd	jsr $bd03			jsr adjust_z		; fix word length
.bcfe	a9 60		lda #$60			lda #$60		; compile an RTS
.bd00	4c 0e ce	jmp $ce0e			jmp C_Comma_A
=63					CL	.var *-(WordListLink+wh_Xt)
=$bd03					en = *	; remember here
>bcc2	3f					.byte CL	;wh_CodeLength
.bd03					adjust_z:
.bd03	a5 10		lda $10				lda dp+0		; tmp1= xt
.bd05	18		clc				clc
.bd06	69 85		adc #$85			adc #Wh_xt
.bd08	85 14		sta $14				sta tmp1+0
.bd0a	a5 11		lda $11				lda dp+1
.bd0c	69 00		adc #$00			adc #0
.bd0e	85 15		sta $15				sta tmp1+1
.bd10	38		sec				sec			; length= cp-xt
.bd11	a5 00		lda $00				lda cp+0
.bd13	e5 14		sbc $14				sbc tmp1+0
.bd15	a8		tay				tay
.bd16	a5 01		lda $01				lda cp+1
.bd18	e5 15		sbc $15				sbc tmp1+1
.bd1a	f0 0c		beq $bd28			beq _short		; length > $ff ?
.bd1c	a0 84		ldy #$84			ldy #Wh_Flags		; make it NN
.bd1e	b1 10		lda ($10),y			lda (dp),y
.bd20	29 fd		and #$fd			and #$ff-AN
.bd22	09 08		ora #$08			ora #NN
.bd24	91 10		sta ($10),y			sta (dp),y
.bd26	a0 ff		ldy #$ff			ldy #$ff		; set max length for header
.bd28	98		tya		_short:		tya			; fill in length in header
.bd29	a0 83		ldy #$83			ldy #Wh_CodeLength
.bd2b	91 10		sta ($10),y			sta (dp),y
.bd2d	60		rts				rts
>bd2e	3a				L1:	.text ":"	;  name of word as a string, ending at wh_NameLastChar
>bd2f	41					.byte ((":"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bd30	3f bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd32	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd33	08					.byte NN	;wh_Flags	dictionary flags
=48303					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd34					Colon:
.bd34	20 58 b8	jsr $b858			jsr Right_Bracket	; switch to compile state
.bd37	a5 0c		lda $0c				lda status
.bd39	09 40		ora #$40			ora #%01000000	; tell ";" and RECURSE this is a normal word
.bd3b	09 80		ora #$80			ora #%10000000	; Tell Header_Build not to print warning for duplicate name.
.bd3d	85 0c		sta $0c				sta status
.bd3f	4c 39 c2	jmp $c239			jmp Header_Build	; compile word header (but don't link)
=14					CL	.var *-(WordListLink+wh_Xt)
=$bd42					en = *	; remember here
>bd32	0e					.byte CL	;wh_CodeLength
>bd42	3a 4e 6f 4e 61 6d 65		L1:	.text ":NoName"	;  name of word as a string, ending at wh_NameLastChar
>bd49	a7					.byte ((":NoName"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bd4a	af bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd4c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd4d	08					.byte NN	;wh_Flags	dictionary flags
=48329					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd4e					Colon_NoName:
.bd4e	20 58 b8	jsr $b858			jsr Right_Bracket	; switch to compile state
.bd51	a9 bf		lda #$bf			lda #$ff-%01000000	; tell ";" and RECURSE this is
.bd53	25 0c		and $0c				and status		; a :NONAME word.
.bd55	85 0c		sta $0c				sta status
.bd57	a5 00		lda $00				lda cp+0
.bd59	85 0e		sta $0e				sta WorkWord+0
.bd5b	a5 01		lda $01				lda cp+1
.bd5d	85 0f		sta $0f				sta WorkWord+1
=17					CL	.var *-(WordListLink+wh_Xt)
=$bd5f					en = *	; remember here
>bd4c	11					.byte CL	;wh_CodeLength
.bd5f	60		rts				rts
>bd60	27				L1:	.text "'"	;  name of word as a string, ending at wh_NameLastChar
>bd61	e1					.byte (("'"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bd62	c9 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd64	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd65	08					.byte NN	;wh_Flags	dictionary flags
=48353					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd66	20 6c bd	jsr $bd6c	Tick:		jsr Tick_Nt
.bd69	4c e8 be	jmp $bee8			jmp Name_To_Int	; ( nt -- xt )
=6					CL	.var *-(WordListLink+wh_Xt)
=$bd6c					en = *	; remember here
>bd64	06					.byte CL	;wh_CodeLength
.bd6c	20 d0 bb	jsr $bbd0	Tick_Nt:	jsr parse_name_check	; ( -- addr u )
.bd6f	4c 08 be	jmp $be08			jmp find_name_check	; ( addr u -- nt )
>bd72	5b 27 5d			L1:	.text "[']"	;  name of word as a string, ending at wh_NameLastChar
>bd75	a3					.byte (("[']"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bd76	e1 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd78	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd79	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=48373					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd7a	20 66 bd	jsr $bd66	Bracket_Tick:	jsr Tick
.bd7d	4c 71 b8	jmp $b871			jmp Literal
=6					CL	.var *-(WordListLink+wh_Xt)
=$bd80					en = *	; remember here
>bd78	06					.byte CL	;wh_CodeLength
>bd80	46 69 6e 64			L1:	.text "Find"	;  name of word as a string, ending at wh_NameLastChar
>bd84	84					.byte (("Find"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bd85	f5 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd87	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd88	18					.byte UF+NN	;wh_Flags	dictionary flags
=48388					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd89					Find:
.bd89	20 0d b5	jsr $b50d			jsr underflow_1
.bd8c	b5 25		lda $25,x			lda DStack+1,x		; MSB
.bd8e	48		pha				pha
.bd8f	b5 24		lda $24,x			lda DStack+0,x		; LSB
.bd91	48		pha				pha
.bd92	20 ce b2	jsr $b2ce			jsr Count		; ( caddr -- addr u )
.bd95	20 dc bd	jsr $bddc			jsr find_name		; ( addr u -- nt | 0 )
.bd98	b5 25		lda $25,x			lda DStack+1,x		; word found?
.bd9a	d0 0a		bne $bda6			bne _found_word
.bd9c	20 e1 b8	jsr $b8e1			jsr False		; ( 0 0 )
.bd9f	68		pla				pla			; LSB of address
.bda0	95 26		sta $26,x			sta DStack+2,x
.bda2	68		pla				pla
.bda3	95 27		sta $27,x			sta DStack+3,x		; MSB of address
.bda5	60		rts				rts			; ( addr 0 )
.bda6					_found_word:
.bda6	68		pla				pla			; We don't need the address after all, RDrop it
.bda7	68		pla				pla
.bda8	20 85 d0	jsr $d085			jsr Dup		; ( nt nt )
.bdab	20 e8 be	jsr $bee8			jsr Name_To_Int	; ( nt xt )
.bdae	20 a3 d0	jsr $d0a3			jsr Swap		; ( xt nt )
.bdb1	a0 00		ldy #$00			ldy #0			; Prepare flag
.bdb3	a9 84		lda #$84			lda #Wh_Flags		; get flags
.bdb5	20 14 cb	jsr $cb14			jsr Plus_A		; ( xt nt+Wh_Flags )
.bdb8	a1 24		lda ($24,x)			lda (DStack+0,x)		; ( xt flags )
.bdba	29 04		and #$04			and #IM
.bdbc	d0 07		bne $bdc5			bne _immediate		; bit set, we're immediate
.bdbe	a9 ff		lda #$ff			lda #$FF		; We're not immediate, return -1
.bdc0	95 24		sta $24,x			sta DStack+0,x
.bdc2	95 25		sta $25,x			sta DStack+1,x
.bdc4	60		rts				rts
.bdc5					_immediate:
.bdc5	a9 01		lda #$01			lda #1			; We're immediate, return 1
.bdc7	95 24		sta $24,x			sta DStack+0,x
.bdc9	a9 00		lda #$00			lda #0
.bdcb	95 25		sta $25,x			sta DStack+1,x
=68					CL	.var *-(WordListLink+wh_Xt)
=$bdcd					en = *	; remember here
>bd87	44					.byte CL	;wh_CodeLength
.bdcd	60		rts				rts
>bdce	46 69 6e 64 2d 4e 61 6d		L1:	.text "Find-Name"	;  name of word as a string, ending at wh_NameLastChar
>bdd6	65
>bdd7	a9					.byte (("Find-Name"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bdd8	04 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bdda	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bddb	18					.byte UF+NN	;wh_Flags	dictionary flags
=48471					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bddc					find_name:
.bddc	20 22 b5	jsr $b522			jsr underflow_2
.bddf	20 15 be	jsr $be15			jsr fina_pattern_prepare ; tmp2 = pseudo-header of pattern name
.bde2	a9 ff		lda #$ff			lda #$ff		; for each wordlist in the wordlist search order.
.bde4	95 25		sta $25,x			sta DStack+1,x
.bde6					_wordlist_next:
.bde6	f6 25		inc $25,x			inc DStack+1,x
.bde8	b4 25		ldy $25,x			ldy DStack+1,x
.bdea	cc 2a 03	cpy $032a			cpy Num_OrderV		; at end of list?
.bded	90 06		bcc $bdf5			bcc _nextS
.bdef	d0 14		bne $be05			bne _fail
.bdf1	a9 03		lda #$03			lda #wid_Root		; also try root wordlist
.bdf3	d0 03		bne $bdf8			bne _nextA
.bdf5	b9 2b 03	lda $032b,y	_nextS:		lda Search_OrderV,y	; A = search_order[Y]  get wordlist ID
.bdf8	20 3f be	jsr $be3f	_nextA:		jsr fina_search_wordlist
.bdfb	f0 e9		beq $bde6			beq _wordlist_next
.bdfd	a5 14		lda $14				lda tmp1+0		; NOS = nt
.bdff	95 26		sta $26,x			sta DStack+2,x
.be01	a5 15		lda $15				lda tmp1+1
.be03	95 27		sta $27,x			sta DStack+3,x
.be05					_fail:
.be05	e8		inx				inx			; Drop	pattern name length
.be06	e8		inx				inx
=43					CL	.var *-(WordListLink+wh_Xt)
=$be07					en = *	; remember here
>bdda	2b					.byte CL	;wh_CodeLength
.be07	60		rts				rts
.be08					find_name_check:
.be08	20 dc bd	jsr $bddc			jsr find_name
.be0b	b5 25		lda $25,x			lda DStack+1,x		; not found?
.be0d	f0 01		beq $be10			beq _NotFound
.be0f	60		rts				rts
.be10	a9 f3		lda #$f3	_NotFound:	lda #$100+err_UndefinedWord	; complain & quit
.be12	4c 6c b5	jmp $b56c			jmp ThrowA
.be15					fina_pattern_prepare:
.be15	38		sec				sec			; A= 0 - name start offset
.be16	b5 24		lda $24,x			lda DStack+0,x
.be18	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.be1a	75 26		adc $26,x			adc DStack+2,x		; tmp2 = pattern nt
.be1c	85 16		sta $16				sta tmp2+0
.be1e	a9 ff		lda #$ff			lda #$ff
.be20	75 27		adc $27,x			adc DStack+3,x
.be22	85 17		sta $17				sta tmp2+1
.be24	a9 7f		lda #$7f			lda #wh_NameLastChar
.be26	38		sec				sec
.be27	f5 24		sbc $24,x			sbc DStack+0,x
.be29	85 1a		sta $1a				sta tmp4+0
.be2b	a0 7f		ldy #$7f			ldy #wh_NameLastChar	; tmp3+0= wh_HNL (hash & length)
.be2d	b1 16		lda ($16),y			lda (tmp2),y
.be2f	0a		asl a				asl a
.be30	0a		asl a				asl a
.be31	0a		asl a				asl a
.be32	0a		asl a				asl a
.be33	0a		asl a				asl a
.be34	15 24		ora $24,x			ora DStack+0,x
.be36	85 18		sta $18				sta tmp3+0
.be38	a9 00		lda #$00			lda #0			; assuming failure
.be3a	95 26		sta $26,x			sta DStack+2,x
.be3c	95 27		sta $27,x			sta DStack+3,x
.be3e	60		rts				rts
.be3f					fina_search_wordlist:
.be3f	86 19		stx $19				stx tmp3+1		; save data stack index
.be41	0a		asl a				asl			; tmp1 = up->wordlists[A]
.be42	a8		tay				tay
.be43	be 12 03	ldx $0312,y			ldx WordlistsV+0,y
.be46	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.be49	d0 0f		bne $be5a			bne _word_3		;   not end-of-list?
.be4b	08		php		_rts:		php
.be4c	a6 19		ldx $19				ldx tmp3+1		; restore data stack index
.be4e	28		plp				plp
.be4f	60		rts				rts			; Z= end_of_list
.be50					_word_next:
.be50	a0 81		ldy #$81			ldy #wh_WordListLink	; tmp1= tmp1->Wh_WordListLink
.be52	b1 14		lda ($14),y			lda (tmp1),y
.be54	aa		tax				tax
.be55	c8		iny				iny
.be56	b1 14		lda ($14),y			lda (tmp1),y
.be58	f0 f1		beq $be4b			beq _rts		; end of list?
.be5a	85 15		sta $15		_word_3:	sta tmp1+1
.be5c	86 14		stx $14				stx tmp1+0
.be5e	a0 80		ldy #$80			ldy #Wh_HNL		; Are hash & name length the same?
.be60	b1 14		lda ($14),y			lda (tmp1),y
.be62	c5 18		cmp $18				cmp tmp3+0
.be64	d0 ea		bne $be50			bne _word_next
.be66	a4 1a		ldy $1a				ldy tmp4+0		; Y= index of 1st char -1
.be68	c8		iny		_char_next:	iny			; to next char
.be69	30 e0		bmi $be4b			bmi _rts		; end of string?
.be6b	b1 16		lda ($16),y			lda (tmp2),y		; char of pattern name
.be6d	51 14		eor ($14),y			eor (tmp1),y		; char of this word name
.be6f	f0 f7		beq $be68			beq _char_next		;   exact match?
.be71	c9 20		cmp #$20			cmp #$20		;   only a case mismatch?
.be73	d0 db		bne $be50			bne _word_next
.be75	b1 14		lda ($14),y			lda (tmp1),y		;   verify it is alpha char
.be77	29 df		and #$df			and #$df
.be79	e9 41		sbc #$41			sbc #'A'
.be7b	c9 1a		cmp #$1a			cmp #'Z'-'A'+1
.be7d	90 e9		bcc $be68			bcc _char_next
.be7f	b0 cf		bcs $be50			bcs _word_next
>be81	49 6e 74 3e 4e 61 6d 65		L1:	.text "Int>Name"	;  name of word as a string, ending at wh_NameLastChar
>be89	a8					.byte (("Int>Name"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be8a	57 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be8c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be8d	18					.byte UF+NN	;wh_Flags	dictionary flags
=48649					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be8e					Int_To_Name:
.be8e	20 0d b5	jsr $b50d			jsr underflow_1
.be91	a9 7b		lda #$7b			lda #$100-Wh_xt		; convert xt on stack to proposed nt
.be93	20 54 cb	jsr $cb54			jsr Minus_A
.be96	b5 24		lda $24,x			lda DStack+0,x		; tmp3= proposed nt
.be98	b4 25		ldy $25,x			ldy DStack+1,x
.be9a	85 18		sta $18				sta tmp3+0
.be9c	84 19		sty $19				sty tmp3+1
.be9e	86 16		stx $16				stx tmp2+0		; save data stack index
.bea0	a9 fe		lda #$fe			lda #$100-2		; for each wordlist
.bea2	85 17		sta $17				sta tmp2+1
.bea4					_wordlist_next:
.bea4	a4 17		ldy $17				ldy tmp2+1		; get next wordlist index
.bea6	c8		iny				iny
.bea7	c8		iny				iny
.bea8	84 17		sty $17				sty tmp2+1
.beaa	c0 0c		cpy #$0c			cpy #(Num_OrderV-WordlistsV)/2
.beac	b0 22		bcs $bed0			bcs _fail
.beae	be 12 03	ldx $0312,y			ldx WordlistsV+0,y
.beb1	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.beb4	4c c3 be	jmp $bec3			jmp _word_3
.beb7	86 14		stx $14		_word_next:	stx tmp1+0
.beb9	85 15		sta $15				sta tmp1+1
.bebb	a0 81		ldy #$81			ldy #wh_WordListLink	; follow wh_WordListLink to next word
.bebd	b1 14		lda ($14),y			lda (tmp1),y
.bebf	aa		tax				tax
.bec0	c8		iny				iny
.bec1	b1 14		lda ($14),y			lda (tmp1),y
.bec3	f0 df		beq $bea4	_word_3:	beq _wordlist_next	;  end of list?
.bec5	c5 19		cmp $19				cmp tmp3+1		;  match?
.bec7	d0 ee		bne $beb7			bne _word_next
.bec9	e4 18		cpx $18				cpx tmp3+0
.becb	d0 ea		bne $beb7			bne _word_next
.becd	a6 16		ldx $16				ldx tmp2+0		; restore data stack index
.becf	60		rts				rts			; return P.Z=0
.bed0					_fail:
.bed0	a6 16		ldx $16				ldx tmp2+0		; restore data stack index
.bed2	a9 00		lda #$00			lda #0			; return a zero to indicate that we didn't find it.
.bed4	95 24		sta $24,x			sta DStack+0,x
.bed6	95 25		sta $25,x			sta DStack+1,x
.bed8	85 15		sta $15				sta tmp1+1
.beda	60		rts				rts			; return P.Z=1
=77					CL	.var *-(WordListLink+wh_Xt)
=$bedb					en = *	; remember here
>be8c	4d					.byte CL	;wh_CodeLength
>bedb	4e 61 6d 65 3e 49 6e 74		L1:	.text "Name>Int"	;  name of word as a string, ending at wh_NameLastChar
>bee3	88					.byte (("Name>Int"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bee4	09 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bee6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bee7	18					.byte UF+NN	;wh_Flags	dictionary flags
=48739					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bee8					Name_To_Int:
.bee8	20 0d b5	jsr $b50d			jsr underflow_1
.beeb	a9 85		lda #$85			lda #wh_Xt
.beed	4c 14 cb	jmp $cb14			jmp Plus_A
=8					CL	.var *-(WordListLink+wh_Xt)
=$bef0					en = *	; remember here
>bee6	08					.byte CL	;wh_CodeLength
>bef0	4e 61 6d 65 3e 53 74 72		L1:	.text "Name>String"	;  name of word as a string, ending at wh_NameLastChar
>bef8	69 6e 67
>befb	eb					.byte (("Name>String"[-1]&7)<<5)+(*-L1)	;wh_HNL
>befc	63 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>befe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>beff	18					.byte UF+NN	;wh_Flags	dictionary flags
=48763					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf00					Name_To_String:
.bf00	20 0d b5	jsr $b50d			jsr underflow_1
.bf03	b5 24		lda $24,x			lda DStack+0,x		; tmp1 = nt
.bf05	b4 25		ldy $25,x			ldy DStack+1,x
.bf07	85 14		sta $14				sta tmp1+0
.bf09	84 15		sty $15				sty tmp1+1
.bf0b	a0 80		ldy #$80			ldy #Wh_HNL
.bf0d	b1 14		lda ($14),y			lda (tmp1),y
.bf0f	29 1f		and #$1f			and #wh_HNL_NameLengthMask
.bf11	48		pha				pha
.bf12	49 ff		eor #$ff			eor #$ff
.bf14	38		sec				sec
.bf15	69 80		adc #$80			adc #Wh_NameLastChar+1	; calc start offset
.bf17	20 14 cb	jsr $cb14			jsr Plus_A		; calc start addr
.bf1a	68		pla				pla			; push length
.bf1b	4c f0 b8	jmp $b8f0			jmp PushZA
=30					CL	.var *-(WordListLink+wh_Xt)
=$bf1e					en = *	; remember here
>befe	1e					.byte CL	;wh_CodeLength
>bf1e	3e 42 6f 64 79			L1:	.text ">Body"	;  name of word as a string, ending at wh_NameLastChar
>bf23	25					.byte ((">Body"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bf24	7b be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf26	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf27	18					.byte UF+NN	;wh_Flags	dictionary flags
=48803					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf28					To_Body:
.bf28	20 0d b5	jsr $b50d			jsr underflow_1
.bf2b	a9 03		lda #$03			lda #3		; PFA is after the beginning JSR abs
.bf2d	4c 14 cb	jmp $cb14			jmp Plus_A
=8					CL	.var *-(WordListLink+wh_Xt)
=$bf30					en = *	; remember here
>bf26	08					.byte CL	;wh_CodeLength
>bf30	45 72 61 73 65			L1:	.text "Erase"	;  name of word as a string, ending at wh_NameLastChar
>bf35	a5					.byte (("Erase"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bf36	a3 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf38	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf39	08					.byte NN	;wh_Flags	dictionary flags
=48821					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf3a					Erase:
.bf3a	20 ff b8	jsr $b8ff			jsr Zero
.bf3d	4c 59 bf	jmp $bf59			jmp Fill
=6					CL	.var *-(WordListLink+wh_Xt)
=$bf40					en = *	; remember here
>bf38	06					.byte CL	;wh_CodeLength
>bf40	42 6c 61 6e 6b			L1:	.text "Blank"	;  name of word as a string, ending at wh_NameLastChar
>bf45	65					.byte (("Blank"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bf46	b5 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf48	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf49	08					.byte NN	;wh_Flags	dictionary flags
=48837					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf4a					Blank:
.bf4a	20 1e b9	jsr $b91e			jsr Bl
.bf4d	4c 59 bf	jmp $bf59			jmp Fill
=6					CL	.var *-(WordListLink+wh_Xt)
=$bf50					en = *	; remember here
>bf48	06					.byte CL	;wh_CodeLength
>bf50	46 69 6c 6c			L1:	.text "Fill"	;  name of word as a string, ending at wh_NameLastChar
>bf54	84					.byte (("Fill"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bf55	c5 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf57	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf58	18					.byte UF+NN	;wh_Flags	dictionary flags
=48852					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf59					Fill:
.bf59	20 27 b5	jsr $b527			jsr underflow_3
.bf5c	b5 28		lda $28,x			lda DStack+4,x		; tmp1= address
.bf5e	85 14		sta $14				sta tmp1+0
.bf60	b5 29		lda $29,x			lda DStack+5,x
.bf62	85 15		sta $15				sta tmp1+1
.bf64	b5 26		lda $26,x			lda DStack+2,x		; tmp2= counter.lo
.bf66	85 16		sta $16				sta tmp2+0
.bf68	f6 27		inc $27,x			inc DStack+3,x		; so decrement & test for 0 works
.bf6a	b5 24		lda $24,x			lda DStack+0,x		; A= fill byte
.bf6c	a0 00		ldy #$00			ldy #0
.bf6e	c4 16		cpy $16		_loop:		cpy tmp2+0		; done?
.bf70	f0 09		beq $bf7b			beq _test2
.bf72	91 14		sta ($14),y	_3:		sta (tmp1),y		; store a byte
.bf74	c8		iny				iny			; to next byte
.bf75	d0 f7		bne $bf6e			bne _loop
.bf77	e6 15		inc $15				inc tmp1+1		; increment addr page
.bf79	d0 f3		bne $bf6e			bne _loop
.bf7b	d6 27		dec $27,x	_test2:		dec DStack+3,x		; any more pages?
.bf7d	d0 f3		bne $bf72			bne _3
.bf7f	4c 58 ae	jmp $ae58			jmp ThreeDrop	; Drop three cells off the Data Stack.
=41					CL	.var *-(WordListLink+wh_Xt)
=$bf82					en = *	; remember here
>bf57	29					.byte CL	;wh_CodeLength
>bf82	56 61 72 69 61 62 6c 65		L1:	.text "Variable"	;  name of word as a string, ending at wh_NameLastChar
>bf8a	a8					.byte (("Variable"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bf8b	d4 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf8d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf8e	08					.byte NN	;wh_Flags	dictionary flags
=48906					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf8f	20 c8 c2	jsr $c2c8	Variable:	jsr Create		; compile word header & push PFA
.bf92	a9 00		lda #$00			lda #0			; allot & initialize the variable's data
.bf94	a8		tay				tay
.bf95	4c 28 ce	jmp $ce28			jmp Comma_YA
=9					CL	.var *-(WordListLink+wh_Xt)
=$bf98					en = *	; remember here
>bf8d	09					.byte CL	;wh_CodeLength
>bf98	32 56 61 72 69 61 62 6c		L1:	.text "2Variable"	;  name of word as a string, ending at wh_NameLastChar
>bfa0	65
>bfa1	a9					.byte (("2Variable"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bfa2	0a bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfa4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfa5	08					.byte NN	;wh_Flags	dictionary flags
=48929					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfa6	20 8f bf	jsr $bf8f	Two_variable:	jsr Variable		; compile word header & push PFA & 1st cell of data
.bfa9	4c 28 ce	jmp $ce28			jmp Comma_YA		; alloc & init 2nd cell of data
=6					CL	.var *-(WordListLink+wh_Xt)
=$bfac					en = *	; remember here
>bfa4	06					.byte CL	;wh_CodeLength
>bfac	43 6f 6e 73 74 61 6e 74		L1:	.text "Constant"	;  name of word as a string, ending at wh_NameLastChar
>bfb4	88					.byte (("Constant"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bfb5	21 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfb7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfb8	18					.byte UF+NN	;wh_Flags	dictionary flags
=48948					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfb9					Constant:
.bfb9	20 0d b5	jsr $b50d			jsr underflow_1
.bfbc	20 2b c2	jsr $c22b			jsr Header_Comma	; compile word header
.bfbf	20 7a b8	jsr $b87a			jsr LitCompile		; compile code to load registers, & pick a subroutine
.bfc2	20 6b ce	jsr $ce6b			jsr Jmp_Comma_NT_YA	; compile code to JMP to the subroutine
.bfc5	4c 03 bd	jmp $bd03			jmp adjust_z		; fix word length
=15					CL	.var *-(WordListLink+wh_Xt)
=$bfc8					en = *	; remember here
>bfb7	0f					.byte CL	;wh_CodeLength
>bfc8	32 43 6f 6e 73 74 61 6e		L1:	.text "2Constant"	;  name of word as a string, ending at wh_NameLastChar
>bfd0	74
>bfd1	89					.byte (("2Constant"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bfd2	34 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfd4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfd5	18					.byte UF+NN	;wh_Flags	dictionary flags
=48977					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfd6					Two_constant:
.bfd6	20 22 b5	jsr $b522			jsr underflow_2
.bfd9	20 2b c2	jsr $c22b			jsr Header_Comma	; compile word header
.bfdc	20 a3 d0	jsr $d0a3			jsr Swap
.bfdf	20 71 b8	jsr $b871			jsr Literal		; compile push lo cell
.bfe2	20 7a b8	jsr $b87a			jsr LitCompile		; compile push hi cell, YA=exit routine
.bfe5	20 6b ce	jsr $ce6b			jsr Jmp_Comma_NT_YA	; compile JMP from above
.bfe8	4c 03 bd	jmp $bd03			jmp adjust_z		; fix word length
=21					CL	.var *-(WordListLink+wh_Xt)
=$bfeb					en = *	; remember here
>bfd4	15					.byte CL	;wh_CodeLength
>bfeb	56 61 6c 75 65			L1:	.text "Value"	;  name of word as a string, ending at wh_NameLastChar
>bff0	a5					.byte (("Value"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bff1	51 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bff3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bff4	18					.byte UF+NN	;wh_Flags	dictionary flags
=49008					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bff5					Value:
.bff5	20 0d b5	jsr $b50d			jsr underflow_1
.bff8	20 2b c2	jsr $c22b			jsr Header_Comma	; compile word header
.bffb	20 a4 b8	jsr $b8a4			jsr ldya_immed_comma	; compile lda # & ldy #
.bffe	a9 be		lda #$be			lda #<PushYA		; compile jmp PushYA
.c000	a0 b8		ldy #$b8			ldy #>PushYA
.c002	20 64 ce	jsr $ce64			jsr Jmp_Comma_YA
.c005	4c 03 bd	jmp $bd03			jmp adjust_z		; fix word length
=19					CL	.var *-(WordListLink+wh_Xt)
=$c008					en = *	; remember here
>bff3	13					.byte CL	;wh_CodeLength
>c008	32 56 61 6c 75 65		L1:	.text "2Value"	;  name of word as a string, ending at wh_NameLastChar
>c00e	a6					.byte (("2Value"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c00f	70 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c011	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c012	18					.byte UF+NN	;wh_Flags	dictionary flags
=49038					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c013					TwoValue:
.c013	20 22 b5	jsr $b522			jsr underflow_2
.c016	20 2b c2	jsr $c22b			jsr Header_Comma	; compile word header
.c019	a9 26		lda #$26			lda #<TwoValue_Runtime	; compile JSR TValue_Runtime
.c01b	a0 c0		ldy #$c0			ldy #>TwoValue_Runtime
.c01d	20 4d ce	jsr $ce4d			jsr Jsr_Comma_YA
.c020	20 03 bd	jsr $bd03			jsr adjust_z		; fix word length
.c023	4c 36 ce	jmp $ce36			jmp Two_Comma		; compile the value, return
=19					CL	.var *-(WordListLink+wh_Xt)
=$c026					en = *	; remember here
>c011	13					.byte CL	;wh_CodeLength
.c026					TwoValue_Runtime:
.c026	68		pla				pla			; pop RTS addr
.c027	85 14		sta $14				sta tmp1+0
.c029	68		pla				pla
.c02a	85 15		sta $15				sta tmp1+1
.c02c	a0 01		ldy #$01			ldy #1			; start at offset 1 (for RTS addr behavior)
.c02e	4c 88 c6	jmp $c688			jmp Two_Fetch_Tmp1Y	; fetch the data, return
>c031	54 6f				L1:	.text "To"	;  name of word as a string, ending at wh_NameLastChar
>c033	e2					.byte (("To"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c034	8e bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c036	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c037	0c					.byte NN+IM	;wh_Flags	dictionary flags
=49075					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c038					To:
.c038	20 66 bd	jsr $bd66			jsr Tick		; We always need the xt of the target word
.c03b	b5 24		lda $24,x			lda DStack+0,x		; tmp1= xt
.c03d	b4 25		ldy $25,x			ldy DStack+1,x
.c03f	85 14		sta $14				sta tmp1+0
.c041	84 15		sty $15				sty tmp1+1
.c043	a0 00		ldy #$00			ldy #0			; determine what type xt points at
.c045	b1 14		lda ($14),y			lda (tmp1),y
.c047	c9 a0		cmp #$a0			cmp #$a0		;   LDY #
.c049	d0 38		bne $c083			bne _Test2
.c04b	a5 0a		lda $0a				lda state		; check compile state
.c04d	f0 20		beq $c06f			beq _Value_interpret
.c04f	a9 e3		lda #$e3			lda #<PopYA		; compile jsr PopYA
.c051	a0 b4		ldy #$b4			ldy #>PopYA
.c053	20 4d ce	jsr $ce4d			jsr Jsr_Comma_YA
.c056	a9 8c		lda #$8c			lda #$8C		; compile STY xt+1
.c058	20 0e ce	jsr $ce0e			jsr C_Comma_A
.c05b	20 65 cb	jsr $cb65			jsr One_plus
.c05e	20 85 d0	jsr $d085			jsr Dup
.c061	20 25 ce	jsr $ce25			jsr Comma
.c064	a9 8d		lda #$8d			lda #$8D		; compile STA xt+3
.c066	20 0e ce	jsr $ce0e			jsr C_Comma_A
.c069	20 0f cb	jsr $cb0f			jsr Cell_Plus
.c06c	4c 25 ce	jmp $ce25			jmp Comma
.c06f					_Value_interpret:
.c06f	20 22 b5	jsr $b522			jsr underflow_2		; ( n xt )
.c072	e8		inx				inx			; Drop xt
.c073	e8		inx				inx
.c074	b5 24		lda $24,x			lda DStack+0,x		; LSB
.c076	a0 03		ldy #$03			ldy #3			;   modify LDA # data
.c078	91 14		sta ($14),y			sta (tmp1),y
.c07a	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c07c	a0 01		ldy #$01			ldy #1			;   modify LDY # data
.c07e	91 14		sta ($14),y			sta (tmp1),y
.c080	e8		inx				inx			; Drop n
.c081	e8		inx				inx
.c082	60		rts				rts
.c083	c9 20		cmp #$20	_Test2:		cmp #$20		;   JSR abs ?
.c085	d0 33		bne $c0ba			bne _Err
.c087	a9 03		lda #$03			lda #3			; advance xt over the JSR abs to the data
.c089	20 14 cb	jsr $cb14			jsr Plus_A
.c08c	a0 01		ldy #$01			ldy #1			; get JSR abs addr lo byte
.c08e	b1 14		lda ($14),y			lda (tmp1),y
.c090	c9 26		cmp #$26			cmp #<TwoValue_Runtime
.c092	d0 11		bne $c0a5			bne _Test3
.c094	a5 0a		lda $0a				lda state		; check compile state
.c096	f0 0a		beq $c0a2			beq _2Value_runtime
.c098	20 a4 b8	jsr $b8a4			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.c09b	a9 5a		lda #$5a			lda #<Two_Store_YA
.c09d	a0 c6		ldy #$c6			ldy #>Two_Store_YA
.c09f	4c 4d ce	jmp $ce4d			jmp Jsr_Comma_YA	; compile JSR Two_Store_YA; return
.c0a2	4c 54 c6	jmp $c654	_2Value_runtime: jmp Two_Store
.c0a5					_Test3:
.c0a5	c9 7d		cmp #$7d			cmp #<FValue_runtime
.c0a7	d0 11		bne $c0ba			bne _Err
.c0a9	a5 0a		lda $0a				lda state		; check compile state
.c0ab	f0 0a		beq $c0b7			beq _FValue_interpret
.c0ad	20 a4 b8	jsr $b8a4			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.c0b0	a9 7b		lda #$7b			lda #<FStore_YA
.c0b2	a0 86		ldy #$86			ldy #>FStore_YA
.c0b4	4c 4d ce	jmp $ce4d			jmp Jsr_Comma_YA	; compile JSR FStore_YA; return
.c0b7	4c 78 86	jmp $8678	_FValue_interpret: jmp FStore
.c0ba	a9 e0		lda #$e0	_Err:		lda #$100+err_InvalidName ; unrecognized type.
.c0bc	20 6c b5	jsr $b56c			jsr ThrowA
=135					CL	.var *-(WordListLink+wh_Xt)
=$c0bf					en = *	; remember here
>c036	87					.byte CL	;wh_CodeLength
>c0bf	44 4d 61 78			L1:	.text "DMax"	;  name of word as a string, ending at wh_NameLastChar
>c0c3	04					.byte (("DMax"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c0c4	b3 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c0c6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c0c7	08					.byte NN	;wh_Flags	dictionary flags
=49219					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c0c8	a9 80		lda #$80	DMax:		lda #$80
.c0ca	d0 0b		bne $c0d7			bne DMin3
=4					CL	.var *-(WordListLink+wh_Xt)
=$c0cc					en = *	; remember here
>c0c6	04					.byte CL	;wh_CodeLength
>c0cc	44 4d 69 6e			L1:	.text "DMin"	;  name of word as a string, ending at wh_NameLastChar
>c0d0	c4					.byte (("DMin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c0d1	43 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c0d3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c0d4	08					.byte NN	;wh_Flags	dictionary flags
=49232					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c0d5	a9 00		lda #$00	DMin:		lda #0
.c0d7	85 16		sta $16		DMin3:		sta tmp2	; save sign correction
.c0d9	20 2c b5	jsr $b52c			jsr underflow_4
.c0dc	b5 26		lda $26,x			lda DStack+2,x	; compare
.c0de	d5 2a		cmp $2a,x			cmp DStack+6,x
.c0e0	b5 27		lda $27,x			lda DStack+3,x
.c0e2	f5 2b		sbc $2b,x			sbc DStack+7,x
.c0e4	b5 24		lda $24,x			lda DStack+0,x
.c0e6	f5 28		sbc $28,x			sbc DStack+4,x
.c0e8	b5 25		lda $25,x			lda DStack+1,x
.c0ea	f5 29		sbc $29,x			sbc DStack+5,x
.c0ec	50 02		bvc $c0f0			bvc +
.c0ee	49 80		eor #$80			eor #$80	; fix sign
.c0f0	45 16		eor $16		+		eor tmp2
.c0f2	30 0f		bmi $c103			bmi TwoNip_nouf	; if negative, NOS is larger and needs to be kept
.c0f4	4c 0a c6	jmp $c60a			jmp Two_Drop
=34					CL	.var *-(WordListLink+wh_Xt)
=$c0f7					en = *	; remember here
>c0d3	22					.byte CL	;wh_CodeLength
>c0f7	32 4e 69 70			L1:	.text "2Nip"	;  name of word as a string, ending at wh_NameLastChar
>c0fb	04					.byte (("2Nip"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c0fc	50 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c0fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c0ff	18					.byte UF+NN	;wh_Flags	dictionary flags
=49275					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c100	20 2c b5	jsr $b52c	TwoNip:		jsr underflow_4
.c103	b5 24		lda $24,x	TwoNip_NoUf:	lda DStack+0,x	; copy dTOS to dNOS
.c105	95 28		sta $28,x			sta DStack+4,x
.c107	b5 25		lda $25,x			lda DStack+1,x
.c109	95 29		sta $29,x			sta DStack+5,x
.c10b	b5 26		lda $26,x			lda DStack+2,x
.c10d	95 2a		sta $2a,x			sta DStack+6,x
.c10f	b5 27		lda $27,x			lda DStack+3,x
.c111	95 2b		sta $2b,x			sta DStack+7,x
.c113	4c 0a c6	jmp $c60a			jmp Two_Drop
=22					CL	.var *-(WordListLink+wh_Xt)
=$c116					en = *	; remember here
>c0fe	16					.byte CL	;wh_CodeLength
>c116	53 3e 44			L1:	.text "S>D"	;  name of word as a string, ending at wh_NameLastChar
>c119	83					.byte (("S>D"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c11a	7b c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c11c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c11d	10					.byte UF	;wh_Flags	dictionary flags
=49305					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c11e					S_To_D:
.c11e	20 0d b5	jsr $b50d			jsr underflow_1
.c121	a0 00		ldy #$00			ldy #0			; assume positive
.c123	b5 25		lda $25,x			lda DStack+1,x		; test n
.c125	10 01		bpl $c128			bpl +
.c127	88		dey				dey			; make negative
.c128					+
.c128	ca		dex				dex			; push new hi cell
.c129	ca		dex				dex
.c12a	94 24		sty $24,x			sty DStack+0,x
.c12c	94 25		sty $25,x			sty DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$c12e					en = *	; remember here
>c11c	10					.byte CL	;wh_CodeLength
.c12e	60		rts				rts
>c12f	44 3e 53			L1:	.text "D>S"	;  name of word as a string, ending at wh_NameLastChar
>c132	63					.byte (("D>S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c133	99 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c135	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c136	10					.byte UF	;wh_Flags	dictionary flags
=49330					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c137					D_To_S:
.c137	20 22 b5	jsr $b522			jsr underflow_2
.c13a	e8		inx				inx		; Drop hi cell
.c13b	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$c13c					en = *	; remember here
>c135	05					.byte CL	;wh_CodeLength
.c13c	60		rts				rts
>c13d	44 2d				L1:	.text "D-"	;  name of word as a string, ending at wh_NameLastChar
>c13f	a2					.byte (("D-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c140	b2 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c142	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c143	10					.byte UF	;wh_Flags	dictionary flags
=49343					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c144					D_Minus:
.c144	20 2c b5	jsr $b52c			jsr underflow_4 ; two double numbers
.c147	38		sec				sec
.c148	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of lower word
.c14a	f5 26		sbc $26,x			sbc DStack+2,x
.c14c	95 2a		sta $2a,x			sta DStack+6,x
.c14e	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of lower word
.c150	f5 27		sbc $27,x			sbc DStack+3,x
.c152	95 2b		sta $2b,x			sta DStack+7,x
.c154	b5 28		lda $28,x			lda DStack+4,x	; LSB of upper word
.c156	f5 24		sbc $24,x			sbc DStack+0,x
.c158	95 28		sta $28,x			sta DStack+4,x
.c15a	b5 29		lda $29,x			lda DStack+5,x	; MSB of upper word
.c15c	f5 25		sbc $25,x			sbc DStack+1,x
.c15e	95 29		sta $29,x			sta DStack+5,x
.c160	e8		inx				inx
.c161	e8		inx				inx
.c162	e8		inx				inx
.c163	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c164					en = *	; remember here
>c142	20					.byte CL	;wh_CodeLength
.c164	60		rts				rts
>c165	44 2b				L1:	.text "D+"	;  name of word as a string, ending at wh_NameLastChar
>c167	62					.byte (("D+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c168	bf c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c16a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c16b	10					.byte UF	;wh_Flags	dictionary flags
=49383					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c16c					D_Plus:
.c16c	20 2c b5	jsr $b52c			jsr underflow_4 ; two double numbers
.c16f	18		clc				clc
.c170	b5 26		lda $26,x			lda DStack+2,x	; LSB of lower word
.c172	75 2a		adc $2a,x			adc DStack+6,x
.c174	95 2a		sta $2a,x			sta DStack+6,x
.c176	b5 27		lda $27,x			lda DStack+3,x	; MSB of lower word
.c178	75 2b		adc $2b,x			adc DStack+7,x
.c17a	95 2b		sta $2b,x			sta DStack+7,x
.c17c	b5 24		lda $24,x			lda DStack+0,x	; LSB of upper word
.c17e	75 28		adc $28,x			adc DStack+4,x
.c180	95 28		sta $28,x			sta DStack+4,x
.c182	b5 25		lda $25,x			lda DStack+1,x	; MSB of upper word
.c184	75 29		adc $29,x			adc DStack+5,x
.c186	95 29		sta $29,x			sta DStack+5,x
.c188	e8		inx				inx
.c189	e8		inx				inx
.c18a	e8		inx				inx
.c18b	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c18c					en = *	; remember here
>c16a	20					.byte CL	;wh_CodeLength
.c18c	60		rts				rts
>c18d	44 31 2b			L1:	.text "D1+"	;  name of word as a string, ending at wh_NameLastChar
>c190	63					.byte (("D1+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c191	e7 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c193	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c194	10					.byte UF	;wh_Flags	dictionary flags
=49424					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c195	20 22 b5	jsr $b522	D1Plus:		jsr underflow_2
.c198	f6 26		inc $26,x			inc DStack+2,x
.c19a	d0 0a		bne $c1a6			bne +
.c19c	f6 27		inc $27,x			inc DStack+3,x
.c19e	d0 06		bne $c1a6			bne +
.c1a0	f6 24		inc $24,x			inc DStack+0,x
.c1a2	d0 02		bne $c1a6			bne +
.c1a4	f6 25		inc $25,x			inc DStack+1,x
.c1a6					+
=17					CL	.var *-(WordListLink+wh_Xt)
=$c1a6					en = *	; remember here
>c193	11					.byte CL	;wh_CodeLength
.c1a6	60		rts				rts
>c1a7	44 31 2d			L1:	.text "D1-"	;  name of word as a string, ending at wh_NameLastChar
>c1aa	a3					.byte (("D1-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c1ab	10 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c1ad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c1ae	10					.byte UF	;wh_Flags	dictionary flags
=49450					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c1af	20 22 b5	jsr $b522	D1Minus:	jsr underflow_2
.c1b2	b5 26		lda $26,x			lda DStack+2,x
.c1b4	d0 0e		bne $c1c4			bne _1
.c1b6	b5 27		lda $27,x			lda DStack+3,x
.c1b8	d0 08		bne $c1c2			bne _2
.c1ba	b5 24		lda $24,x			lda DStack+0,x
.c1bc	d0 02		bne $c1c0			bne _3
.c1be	d6 25		dec $25,x			dec DStack+1,x
.c1c0	d6 24		dec $24,x	_3:		dec DStack+0,x
.c1c2	d6 27		dec $27,x	_2:		dec DStack+3,x
.c1c4	d6 26		dec $26,x	_1:		dec DStack+2,x
=23					CL	.var *-(WordListLink+wh_Xt)
=$c1c6					en = *	; remember here
>c1ad	17					.byte CL	;wh_CodeLength
.c1c6	60		rts				rts
>c1c7	41 6c 6c 6f 74			L1:	.text "Allot"	;  name of word as a string, ending at wh_NameLastChar
>c1cc	85					.byte (("Allot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c1cd	2a c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c1cf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c1d0	18					.byte UF+NN	;wh_Flags	dictionary flags
=49484					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c1d1					Allot:
.c1d1	20 0d b5	jsr $b50d			jsr underflow_1
.c1d4	18		clc				clc			; adjust cp
.c1d5	b5 24		lda $24,x			lda DStack+0,x
.c1d7	65 00		adc $00				adc cp+0
.c1d9	85 00		sta $00				sta cp+0
.c1db	a8		tay				tay			;   save lo byte
.c1dc	b5 25		lda $25,x			lda DStack+1,x
.c1de	85 14		sta $14				sta tmp1
.c1e0	65 01		adc $01				adc cp+1
.c1e2	85 01		sta $01				sta cp+1
.c1e4	24 14		bit $14				bit tmp1
.c1e6	30 15		bmi $c1fd			bmi _release
.c1e8	b0 06		bcs $c1f0			bcs _pos_err		; carry from the add is bad
=32600					_last = cp_end-2*PadOffset
.c1ea	c0 58		cpy #$58			cpy #<_last		; cp < cp_end ?
.c1ec	e9 7f		sbc #$7f			sbc #>_last
.c1ee	90 2c		bcc $c21c			bcc _done		; we're fine.
.c1f0					_pos_err:
.c1f0	a9 58		lda #$58			lda #<_last
.c1f2	85 00		sta $00				sta cp+0
.c1f4	a9 7f		lda #$7f			lda #>_last
.c1f6	85 01		sta $01				sta cp+1
.c1f8	a9 c5		lda #$c5			lda #$100+err_Allocate
.c1fa	4c 6c b5	jmp $b56c			jmp ThrowA
.c1fd					_release:
.c1fd	90 06		bcc $c205			bcc _neg_err		; borrow indicates we've gone below 0
.c1ff	c0 66		cpy #$66			cpy #<cp0
.c201	e9 0b		sbc #$0b			sbc #>cp0
.c203	b0 17		bcs $c21c			bcs _done
.c205					_neg_err:
.c205	a9 66		lda #$66			lda #<cp0		; Set CP to CP0
.c207	85 00		sta $00				sta cp+0
.c209	a9 0b		lda #$0b			lda #>cp0
.c20b	85 01		sta $01				sta cp+1
.c20d	a9 3b		lda #$3b			lda #<forth_dictionary_start	; set WordLists[Forth] to the first
.c20f	8d 12 03	sta $0312			sta WordlistsV+0		; word in ROM
.c212	a9 d0		lda #$d0			lda #>forth_dictionary_start
.c214	8d 13 03	sta $0313			sta WordlistsV+1
.c217	a9 c4		lda #$c4			lda #$100+err_Free		; abort with an error
.c219	4c 6c b5	jmp $b56c			jmp ThrowA
.c21c					_done:
.c21c	e8		inx				inx			; Drop n
.c21d	e8		inx				inx
=77					CL	.var *-(WordListLink+wh_Xt)
=$c21e					en = *	; remember here
>c1cf	4d					.byte CL	;wh_CodeLength
.c21e	60		rts				rts
>c21f	48 65 61 64 65 72 2c		L1:	.text "Header,"	;  name of word as a string, ending at wh_NameLastChar
>c226	87					.byte (("Header,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c227	4c c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c229	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c22a	08					.byte NN	;wh_Flags	dictionary flags
=49574					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c22b					Header_Comma:
.c22b	20 39 c2	jsr $c239			jsr Header_Build
.c22e					Header_Link:
.c22e	a5 0e		lda $0e				lda WorkWord+0		; dp= WorkWord
.c230	85 10		sta $10				sta dp+0
.c232	a5 0f		lda $0f				lda WorkWord+1
.c234	85 11		sta $11				sta dp+1
.c236	4c 80 bb	jmp $bb80			jmp dp_to_current	; Update the CURRENT wordlist with the new DP.
.c239					Header_Build:
.c239	20 d0 bb	jsr $bbd0			jsr parse_name_check	; get name string, throw error if empty string
.c23c	20 c9 cd	jsr $cdc9			jsr Two_dup		; ( addr u addr u )
.c23f	20 25 a2	jsr $a225			jsr Get_Current
.c242	20 c5 a1	jsr $a1c5			jsr Search_WordList	; ( addr u xt f ) or ( addr u 0 )
.c245	e8		inx				inx			; pop flag.
.c246	e8		inx				inx
.c247	b5 22		lda $22,x			lda DStack-2,x		; not found?
.c249	f0 21		beq $c26c			beq _new_name		; We haven't seen this one before.
.c24b	e8		inx				inx			; Drop xt
.c24c	e8		inx				inx
.c24d	24 0c		bit $0c				bit status		; Check bit 7
.c24f	10 08		bpl $c259			bpl _redefined_name	; Bit 7 is zero, so print the message.
.c251	a9 80		lda #$80			lda #$80		; Set bit 7 to indicate dup
.c253	05 0c		ora $0c				ora status
.c255	85 0c		sta $0c				sta status
.c257	d0 19		bne $c272			bne _process_name
.c259					_redefined_name:
.c259	a9 f6		lda #$f6			lda #<str_redefined
.c25b	a0 db		ldy #$db			ldy #>str_redefined
.c25d	20 28 cf	jsr $cf28			jsr Print_ASCIIZ_YA_no_lf
.c260	20 c9 cd	jsr $cdc9			jsr Two_dup		 ; ( addr u addr u )
.c263	20 0d cf	jsr $cf0d			jsr Type
.c266	20 00 cf	jsr $cf00			jsr Space
.c269	4c 72 c2	jmp $c272			jmp _process_name
.c26c					_new_name:
.c26c	a9 7f		lda #$7f			lda #$7F		; Clear bit 0 of status to indicate new word.
.c26e	25 0c		and $0c				and status
.c270	85 0c		sta $0c				sta status
.c272					_process_name:
.c272	20 c9 cd	jsr $cdc9			jsr Two_dup		; compile name string ending at wh_NameLastChar
.c275	20 31 cb	jsr $cb31			jsr Here
.c278	20 a3 d0	jsr $d0a3			jsr Swap
.c27b	20 b0 ae	jsr $aeb0			jsr CMove
.c27e	20 85 d0	jsr $d085			jsr Dup		;   save length
.c281	20 d1 c1	jsr $c1d1			jsr Allot
.c284	20 31 cb	jsr $cb31			jsr Here
.c287	20 3f cb	jsr $cb3f			jsr One_Minus
.c28a	a1 24		lda ($24,x)			lda (DStack+0,x)
.c28c	0a		asl a				asl a
.c28d	0a		asl a				asl a
.c28e	0a		asl a				asl a
.c28f	0a		asl a				asl a
.c290	0a		asl a				asl a
.c291	95 24		sta $24,x			sta DStack+0,x
.c293	20 87 cc	jsr $cc87			jsr Or
.c296	20 0b ce	jsr $ce0b			jsr C_Comma		; compile wh_HNL
.c299	e8		inx				inx			; drop name string addr
.c29a	e8		inx				inx
.c29b	20 70 bb	jsr $bb70			jsr current_to_dp	; Get the CURRENT dictionary pointer.
.c29e	a5 10		lda $10				lda dp+0		; compile wh_WordListLink
.c2a0	a4 11		ldy $11				ldy dp+1
.c2a2	20 28 ce	jsr $ce28			jsr Comma_YA
.c2a5	a9 03		lda #$03			lda #3			; compile wh_CodeLength (temporary value, see adjust_z)
.c2a7	20 0e ce	jsr $ce0e			jsr C_Comma_A
.c2aa	a9 08		lda #$08			lda #NN			; compile wh_Flags
.c2ac	20 0e ce	jsr $ce0e			jsr C_Comma_A
.c2af	38		sec				sec			; WorkWord= nt
.c2b0	a5 00		lda $00				lda cp+0
.c2b2	e9 85		sbc #$85			sbc #wh_xt
.c2b4	85 0e		sta $0e				sta WorkWord+0
.c2b6	a5 01		lda $01				lda cp+1
.c2b8	e9 00		sbc #$00			sbc #0
.c2ba	85 0f		sta $0f				sta WorkWord+1
.c2bc	60		rts				rts
=146					CL	.var *-(WordListLink+wh_Xt)
=$c2bd					en = *	; remember here
>c229	92					.byte CL	;wh_CodeLength
>c2bd	43 72 65 61 74 65		L1:	.text "Create"	;  name of word as a string, ending at wh_NameLastChar
>c2c3	a6					.byte (("Create"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c2c4	a6 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c2c6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c2c7	08					.byte NN	;wh_Flags	dictionary flags
=49731					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c2c8					Create:
.c2c8	20 2b c2	jsr $c22b			jsr Header_Comma	; compile word header
.c2cb	a9 d5		lda #$d5			lda #<DoVar		; compile JSR DoVar
.c2cd	a0 c2		ldy #$c2			ldy #>DoVar
.c2cf	20 4d ce	jsr $ce4d			jsr Jsr_Comma_YA
.c2d2	4c 03 bd	jmp $bd03			jmp adjust_z
=13					CL	.var *-(WordListLink+wh_Xt)
=$c2d5					en = *	; remember here
>c2c6	0d					.byte CL	;wh_CodeLength
.c2d5					DoVar:
.c2d5	68		pla				pla		; Pull the return address off the machine's stack
.c2d6	18		clc				clc		;   +1 because of the way the JSR works
.c2d7	69 01		adc #$01			adc #1
.c2d9	ca		dex				dex		; push on data stack
.c2da	ca		dex				dex
.c2db	95 24		sta $24,x			sta DStack+0,x
.c2dd	68		pla				pla
.c2de	69 00		adc #$00			adc #0
.c2e0	95 25		sta $25,x			sta DStack+1,x
.c2e2	60		rts				rts		; takes us to the original caller of the
>c2e3	44 6f 65 73 3e			L1:	.text "Does>"	;  name of word as a string, ending at wh_NameLastChar
>c2e8	c5					.byte (("Does>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c2e9	43 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c2eb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c2ec	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=49768					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c2ed					Does:
.c2ed	a0 c3		ldy #$c3			ldy #>_runtime		; compile JSR _runtime
.c2ef	a9 07		lda #$07			lda #<_runtime
.c2f1	20 4d ce	jsr $ce4d			jsr Jsr_Comma_YA
.c2f4	a9 68		lda #$68			lda #$68		; compile PLA  to pop RTS addr (PFA-1) to AY
.c2f6	a0 a8		ldy #$a8			ldy #$a8		;    & TAY
.c2f8	20 28 ce	jsr $ce28			jsr Comma_YA
.c2fb	a9 68		lda #$68			lda #$68		; compile PLA
.c2fd	20 0e ce	jsr $ce0e			jsr C_Comma_A
.c300	a0 c3		ldy #$c3			ldy #>_DoDoes		; compile JSR _DoDoes
.c302	a9 19		lda #$19			lda #<_DoDoes
.c304	4c 4d ce	jmp $ce4d			jmp Jsr_Comma_YA
=26					CL	.var *-(WordListLink+wh_Xt)
=$c307					en = *	; remember here
>c2eb	1a					.byte CL	;wh_CodeLength
.c307					_runtime:
.c307	20 70 bb	jsr $bb70			jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.c30a	18		clc				clc
.c30b	68		pla				pla		; RTS addr LSB
.c30c	69 01		adc #$01			adc #1		;   +1 for JSR bahavior
.c30e	a0 86		ldy #$86			ldy #Wh_xt+1
.c310	91 10		sta ($10),y			sta (dp),y
.c312	68		pla				pla		; RTS addr MSB
.c313	69 00		adc #$00			adc #0
.c315	c8		iny				iny
.c316	91 10		sta ($10),y			sta (dp),y
.c318	60		rts				rts
.c319					_DoDoes:
.c319	c8		iny				iny		; +1 for JSR behavior
.c31a	d0 03		bne $c31f			bne +
.c31c	18		clc				clc
.c31d	69 01		adc #$01			adc #1
.c31f					+
.c31f	4c 93 d0	jmp $d093			jmp PushAY
>c322	55 6e 75 73 65 64		L1:	.text "Unused"	;  name of word as a string, ending at wh_NameLastChar
>c328	86					.byte (("Unused"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c329	68 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c32b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c32c	00					.byte 0	;wh_Flags	dictionary flags
=49832					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c32d					Unused:
=32600					_last = cp_end-2*padoffset
.c32d	ca		dex				dex
.c32e	ca		dex				dex
.c32f	38		sec				sec
.c330	a9 58		lda #$58			lda #<_last
.c332	e5 00		sbc $00				sbc cp+0
.c334	95 24		sta $24,x			sta DStack+0,x
.c336	a9 7f		lda #$7f			lda #>_last
.c338	e5 01		sbc $01				sbc cp+1
.c33a	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$c33c					en = *	; remember here
>c32b	0f					.byte CL	;wh_CodeLength
.c33c	60		rts				rts
>c33d	44 65 70 74 68			L1:	.text "Depth"	;  name of word as a string, ending at wh_NameLastChar
>c342	05					.byte (("Depth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c343	a8 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c345	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c346	08					.byte NN	;wh_Flags	dictionary flags
=49858					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c347					Depth:
.c347	a9 28		lda #$28			lda #DStack0	; A= DStack0 - X
.c349	86 1a		stx $1a				stx tmp4
.c34b	38		sec				sec
.c34c	e5 1a		sbc $1a				sbc tmp4
.c34e	4a		lsr a				lsr		; divide by two because each cell is two bytes
.c34f	4c f0 b8	jmp $b8f0			jmp PushZA
=11					CL	.var *-(WordListLink+wh_Xt)
=$c352					en = *	; remember here
>c345	0b					.byte CL	;wh_CodeLength
>c352	4b 65 79			L1:	.text "Key"	;  name of word as a string, ending at wh_NameLastChar
>c355	23					.byte (("Key"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c356	c2 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c358	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c359	08					.byte NN	;wh_Flags	dictionary flags
=49877					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c35a	20 60 c3	jsr $c360	Key:		jsr key_a		; returns char in A
.c35d	4c f0 b8	jmp $b8f0			jmp PushZA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c360					en = *	; remember here
>c358	06					.byte CL	;wh_CodeLength
.c360					Key_A:
.c360	6c 08 03	jmp ($0308)			jmp (input)		; JSR/RTS
>c363	4b 65 79 3f			L1:	.text "Key?"	;  name of word as a string, ending at wh_NameLastChar
>c367	e4					.byte (("Key?"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c368	d5 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c36a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c36b	08					.byte NN	;wh_Flags	dictionary flags
=49895					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c36c	20 72 c3	jsr $c372	KeyQ:		jsr KeyQ_A
.c36f	4c f0 b8	jmp $b8f0			jmp PushZA
.c372	6c 0a 03	jmp ($030a)	KeyQ_A:		jmp (HaveKey)
>c375	52 65 66 69 6c 6c		L1:	.text "Refill"	;  name of word as a string, ending at wh_NameLastChar
>c37b	86					.byte (("Refill"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c37c	e7 c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c37e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c37f	08					.byte NN	;wh_Flags	dictionary flags
=49915					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c380					Refill:
.c380	a9 00		lda #$00			lda #0			; show empty in case of error
.c382	85 06		sta $06				sta ciblen+0
.c384	85 07		sta $07				sta ciblen+1
.c386	a5 02		lda $02				lda insrc		; cheat: We only check LSB
.c388	d0 24		bne $c3ae			bne _src_not_kbd
.c38a	a5 04		lda $04				lda cib+0		; address of CIB is NOS
.c38c	a4 05		ldy $05				ldy cib+1
.c38e	20 be b8	jsr $b8be			jsr PushYA
.c391	a9 ff		lda #$ff			lda #bsize		; max number of chars is TOS
.c393	20 f0 b8	jsr $b8f0			jsr PushZA		;  cheat: We only accept max 255
.c396	20 c5 c3	jsr $c3c5			jsr Accept		; ( addr n1 -- n2)
.c399	b5 24		lda $24,x			lda DStack+0,x
.c39b	85 06		sta $06				sta ciblen+0
.c39d	b5 25		lda $25,x			lda DStack+1,x
.c39f	85 07		sta $07				sta ciblen+1		; though we only accept 255 chars
.c3a1	a9 00		lda #$00			lda #0
.c3a3	85 08		sta $08				sta toin+0
.c3a5	85 09		sta $09				sta toin+1
.c3a7	a9 ff		lda #$ff			lda #$FF		; overwrite with TRUE flag
.c3a9	95 24		sta $24,x			sta DStack+0,x
.c3ab	95 25		sta $25,x			sta DStack+1,x
.c3ad	60		rts				rts
.c3ae					_src_not_kbd:
.c3ae	c9 ff		cmp #$ff			cmp #$ff
.c3b0	d0 03		bne $c3b5			bne _src_not_string
.c3b2	4c e1 b8	jmp $b8e1			jmp False
.c3b5					_src_not_string:
.c3b5	a9 eb		lda #$eb			lda #$100+err_Unsupported
.c3b7	20 6c b5	jsr $b56c			jsr ThrowA
=58					CL	.var *-(WordListLink+wh_Xt)
=$c3ba					en = *	; remember here
>c37e	3a					.byte CL	;wh_CodeLength
>c3ba	41 63 63 65 70 74		L1:	.text "Accept"	;  name of word as a string, ending at wh_NameLastChar
>c3c0	86					.byte (("Accept"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c3c1	fb c2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3c4	18					.byte UF+NN	;wh_Flags	dictionary flags
=49984					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3c5					Accept:
.c3c5	20 22 b5	jsr $b522			jsr underflow_2
.c3c8	b5 24		lda $24,x			lda DStack+0,x		; Abort if we were asked to receive 0 chars
.c3ca	15 25		ora $25,x			ora DStack+1,x
.c3cc	d0 09		bne $c3d7			bne _not_zero
.c3ce	e8		inx				inx			; drop n
.c3cf	e8		inx				inx
.c3d0	95 24		sta $24,x			sta DStack+0,x		; replace addr with 0
.c3d2	95 25		sta $25,x			sta DStack+1,x
.c3d4	4c ac c4	jmp $c4ac			jmp accept_done
.c3d7					_not_zero:
.c3d7	b5 24		lda $24,x			lda DStack+0,x	; number of chars to get in tmp2 ...
.c3d9	85 16		sta $16				sta tmp2
.c3db	a9 00		lda #$00			lda #0
.c3dd	85 17		sta $17				sta tmp2+1	; ... but we only accept max 255 chars
.c3df	b5 26		lda $26,x			lda DStack+2,x	; address of buffer is NOS, to tmp1
.c3e1	85 14		sta $14				sta tmp1
.c3e3	b5 27		lda $27,x			lda DStack+3,x
.c3e5	85 15		sta $15				sta tmp1+1
.c3e7	e8		inx				inx
.c3e8	e8		inx				inx
.c3e9	a0 00		ldy #$00			ldy #0
.c3eb	a5 0c		lda $0c				lda status
.c3ed	29 f7		and #$f7			and #$f7
.c3ef	18		clc				clc
.c3f0	69 01		adc #$01			adc #1
.c3f2	09 08		ora #$08			ora #$08
.c3f4	85 0c		sta $0c				sta status
.c3f6					accept_loop:
.c3f6	20 60 c3	jsr $c360			jsr key_a
.c3f9	c9 0a		cmp #$0a			cmp #AscLF
.c3fb	f0 20		beq $c41d			beq _eol
.c3fd	c9 0d		cmp #$0d			cmp #AscCR
.c3ff	f0 1c		beq $c41d			beq _eol
.c401	c9 08		cmp #$08			cmp #AscBS
.c403	f0 24		beq $c429			beq _backspace
.c405	c9 7f		cmp #$7f			cmp #AscDEL	; (CTRL-h)
.c407	f0 20		beq $c429			beq _backspace
.c409	c9 10		cmp #$10			cmp #AscCP
.c40b	f0 37		beq $c444			beq _ctrl_p
.c40d	c9 0e		cmp #$0e			cmp #AscCN
.c40f	f0 46		beq $c457			beq _ctrl_n
.c411	91 14		sta ($14),y			sta (tmp1),y
.c413	c8		iny				iny
.c414	20 f3 ce	jsr $cef3			jsr Emit_A
.c417	c4 16		cpy $16				cpy tmp2	; reached character limit?
.c419	d0 db		bne $c3f6			bne accept_loop	      ; fall through if buffer limit reached
.c41b	f0 03		beq $c420			beq _buffer_full
.c41d					_eol:
.c41d	20 00 cf	jsr $cf00			jsr Space	; print final space
.c420					_buffer_full:
.c420	94 24		sty $24,x			sty DStack+0,x	; Y contains number of chars accepted already
.c422	a9 00		lda #$00			lda #0
.c424	95 25		sta $25,x			sta DStack+1,x		; we only accept 256 chars
.c426	4c ac c4	jmp $c4ac			jmp accept_done
.c429					_backspace:
.c429	c0 00		cpy #$00			cpy #0		; buffer empty?
.c42b	d0 06		bne $c433			bne +
.c42d	a9 07		lda #$07			lda #AscBELL	; complain and don't delete beyond the start of line
.c42f	20 f3 ce	jsr $cef3			jsr Emit_A
.c432	c8		iny				iny
.c433					+
.c433	88		dey				dey
.c434	a9 08		lda #$08			lda #AscBS	; move back one
.c436	20 f3 ce	jsr $cef3			jsr Emit_A
.c439	20 00 cf	jsr $cf00			jsr Space	; print a space (rubout)
.c43c	a9 08		lda #$08			lda #AscBS	; move back over space
.c43e	20 f3 ce	jsr $cef3			jsr Emit_A
.c441	4c f6 c3	jmp $c3f6			jmp accept_loop
.c444					_ctrl_p:
.c444	a5 0c		lda $0c				lda status
.c446	29 07		and #$07			and #7
.c448	d0 08		bne $c452			bne _ctrl_p_dec
.c44a	a5 0c		lda $0c				lda status
.c44c	09 07		ora #$07			ora #7
.c44e	85 0c		sta $0c				sta status
.c450	d0 14		bne $c466			bne _recall_history
.c452					_ctrl_p_dec:
.c452	c6 0c		dec $0c				dec status
.c454	4c 66 c4	jmp $c466			jmp _recall_history
.c457					_ctrl_n:
.c457	a9 08		lda #$08			lda #$8
.c459	24 0c		bit $0c				bit status
.c45b	d0 09		bne $c466			bne _recall_history
.c45d	a5 0c		lda $0c				lda status
.c45f	29 f7		and #$f7			and #$f7
.c461	18		clc				clc
.c462	69 01		adc #$01			adc #1
.c464	85 0c		sta $0c				sta status
.c466					_recall_history:
.c466	a9 f7		lda #$f7			lda #$ff-%00001000
.c468	25 0c		and $0c				and status
.c46a	85 0c		sta $0c				sta status
.c46c	20 c7 c4	jsr $c4c7			jsr accept_total_recall
.c46f	a9 0d		lda #$0d			lda #AscCR
.c471	20 f3 ce	jsr $cef3			jsr Emit_A
.c474					input_clear:
.c474	c0 00		cpy #$00			cpy #0
.c476	f0 07		beq $c47f			beq input_cleared
.c478	20 00 cf	jsr $cf00			jsr Space
.c47b	88		dey				dey
.c47c	4c 74 c4	jmp $c474			jmp input_clear
.c47f					input_cleared:
.c47f	a9 0d		lda #$0d			lda #AscCR
.c481	20 f3 ce	jsr $cef3			jsr Emit_A
.c484	b1 18		lda ($18),y			lda (tmp3),y
.c486	85 0d		sta $0d				sta status+1
.c488	e6 18		inc $18				inc tmp3
.c48a	d0 02		bne $c48e			bne +		; Increment the upper byte on carry.
.c48c	e6 19		inc $19				inc tmp3+1
.c48e					+
.c48e	a9 0d		lda #$0d			lda #AscCR
.c490	20 f3 ce	jsr $cef3			jsr Emit_A
.c493					_history_loop:
.c493	c4 0d		cpy $0d				cpy status+1
.c495	d0 03		bne $c49a			bne +
.c497	4c f6 c3	jmp $c3f6			jmp accept_loop	      ; Needs a long jump
.c49a					+
.c49a	c4 16		cpy $16				cpy tmp2
.c49c	f0 0a		beq $c4a8			beq _hist_filled_buffer
.c49e	b1 18		lda ($18),y			lda (tmp3),y
.c4a0	91 14		sta ($14),y			sta (tmp1),y
.c4a2	20 f3 ce	jsr $cef3			jsr Emit_A
.c4a5	c8		iny				iny
.c4a6	d0 eb		bne $c493			bne _history_loop
.c4a8					_hist_filled_buffer:
.c4a8	88		dey				dey
.c4a9	4c f6 c3	jmp $c3f6			jmp accept_loop
.c4ac					accept_done:
.c4ac	20 c7 c4	jsr $c4c7			jsr accept_total_recall
.c4af	85 0d		sta $0d				sta status+1
.c4b1	a0 00		ldy #$00			ldy #0
.c4b3	91 18		sta ($18),y			sta (tmp3),y
.c4b5	e6 18		inc $18				inc tmp3
.c4b7	d0 02		bne $c4bb			bne +		; Increment the upper byte on carry.
.c4b9	e6 19		inc $19				inc tmp3+1
.c4bb					+
.c4bb					_save_history_loop:
.c4bb	c4 0d		cpy $0d				cpy status+1
.c4bd	f0 07		beq $c4c6			beq _save_history_done
.c4bf	b1 14		lda ($14),y			lda (tmp1),y
.c4c1	91 18		sta ($18),y			sta (tmp3),y
.c4c3	c8		iny				iny
.c4c4	d0 f5		bne $c4bb			bne _save_history_loop
.c4c6					_save_history_done:
=257					CL	.var *-(WordListLink+wh_Xt)
=$ff					CL	 .var $ff
=$c4c6					en = *	; remember here
>c3c3	ff					.byte CL	;wh_CodeLength
.c4c6	60		rts				rts
.c4c7					accept_total_recall:
.c4c7	a9 66		lda #$66			lda #<hist_buff
.c4c9	85 18		sta $18				sta tmp3
.c4cb	a9 07		lda #$07			lda #>hist_buff
.c4cd	85 19		sta $19				sta tmp3+1
.c4cf	a5 0c		lda $0c				lda status
.c4d1	6a		ror a				ror
.c4d2	29 03		and #$03			and #3
.c4d4	18		clc				clc
.c4d5	65 19		adc $19				adc tmp3+1
.c4d7	85 19		sta $19				sta tmp3+1
.c4d9	a5 0c		lda $0c				lda status
.c4db	6a		ror a				ror		; Rotate through carry into msb.
.c4dc	6a		ror a				ror
.c4dd	29 80		and #$80			and #$80
.c4df	18		clc				clc
.c4e0	65 18		adc $18				adc tmp3
.c4e2	85 18		sta $18				sta tmp3
.c4e4	90 02		bcc $c4e8			bcc +		; Increment the upper byte on carry.
.c4e6	e6 19		inc $19				inc tmp3+1
.c4e8					+
.c4e8	98		tya				tya
.c4e9	c9 80		cmp #$80			cmp #$80
.c4eb	90 02		bcc $c4ef			bcc +
.c4ed	a9 7f		lda #$7f			lda #$7F
.c4ef					+
.c4ef	60		rts				rts
>c4f0	49 6e 70 75 74 3e 52		L1:	.text "Input>R"	;  name of word as a string, ending at wh_NameLastChar
>c4f7	47					.byte (("Input>R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c4f8	40 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4fa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4fb	48					.byte NN+R6	;wh_Flags	dictionary flags
=50295					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4fc					Input_To_R:
.c4fc	68		pla				pla			; move it out of the way
.c4fd	85 14		sta $14				sta tmp1+0
.c4ff	68		pla				pla
.c500	85 15		sta $15				sta tmp1+1
.c502	a0 07		ldy #$07			ldy #7
.c504	b9 02 00	lda $0002,y	_loop:		lda InSrc,y	; insrc+7 is toin+1
.c507	48		pha				pha
.c508	88		dey				dey
.c509	10 f9		bpl $c504			bpl _loop
.c50b	a5 15		lda $15				lda tmp1+1		; Restore address for return jump
.c50d	48		pha				pha
.c50e	a5 14		lda $14				lda tmp1+0
.c510	48		pha				pha
=21					CL	.var *-(WordListLink+wh_Xt)
=$c511					en = *	; remember here
>c4fa	15					.byte CL	;wh_CodeLength
.c511	60		rts				rts
>c512	52 3e 49 6e 70 75 74		L1:	.text "R>Input"	;  name of word as a string, ending at wh_NameLastChar
>c519	87					.byte (("R>Input"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c51a	77 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c51c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c51d	48					.byte NN+R6	;wh_Flags	dictionary flags
=50329					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c51e					R_To_Input:
.c51e	68		pla				pla		 ; move RTS addr out of the way
.c51f	85 14		sta $14				sta tmp1+0
.c521	68		pla				pla
.c522	85 15		sta $15				sta tmp1+1
.c524	a0 00		ldy #$00			ldy #0
.c526	68		pla		_loop:		pla
.c527	99 02 00	sta $0002,y			sta InSrc,y ; also cib ciblen toin
.c52a	c8		iny				iny
.c52b	c0 08		cpy #$08			cpy #8
.c52d	d0 f7		bne $c526			bne _loop
.c52f	a5 15		lda $15				lda tmp1+1	; Restore RTS address
.c531	48		pha				pha
.c532	a5 14		lda $14				lda tmp1+0
.c534	48		pha				pha
=23					CL	.var *-(WordListLink+wh_Xt)
=$c535					en = *	; remember here
>c51c	17					.byte CL	;wh_CodeLength
.c535	60		rts				rts
>c536	42 6f 75 6e 64 73		L1:	.text "Bounds"	;  name of word as a string, ending at wh_NameLastChar
>c53c	66					.byte (("Bounds"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c53d	99 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c53f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c540	10					.byte UF	;wh_Flags	dictionary flags
=50364					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c541					Bounds:
.c541	20 22 b5	jsr $b522			jsr underflow_2
.c544	18		clc				clc
.c545	b5 26		lda $26,x			lda DStack+2,x		; LSB addr
.c547	a8		tay				tay
.c548	75 24		adc $24,x			adc DStack+0,x		; LSB u
.c54a	95 26		sta $26,x			sta DStack+2,x		; LSB addr+u
.c54c	94 24		sty $24,x			sty DStack+0,x
.c54e	b5 27		lda $27,x			lda DStack+3,x		; MSB addr
.c550	a8		tay				tay
.c551	75 25		adc $25,x			adc DStack+1,x		; MSB u
.c553	95 27		sta $27,x			sta DStack+3,x		; MSB addr+u
.c555	94 25		sty $25,x			sty DStack+1,x
=22					CL	.var *-(WordListLink+wh_Xt)
=$c557					en = *	; remember here
>c53f	16					.byte CL	;wh_CodeLength
.c557	60		rts				rts
>c558	53 70 61 63 65 73		L1:	.text "Spaces"	;  name of word as a string, ending at wh_NameLastChar
>c55e	66					.byte (("Spaces"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c55f	bc c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c561	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c562	18					.byte UF+NN	;wh_Flags	dictionary flags
=50398					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c563					 Spaces:
.c563	20 0d b5	jsr $b50d			jsr underflow_1
.c566	4c 6c c5	jmp $c56c			jmp _test
.c569					_loop:
.c569	20 00 cf	jsr $cf00			jsr Space		; print a space
.c56c	d6 24		dec $24,x	_test:		dec DStack+0,x		; decrement & test
.c56e	10 f9		bpl $c569			bpl _loop
.c570	e8		inx				inx			; Drop
.c571	e8		inx				inx
=15					CL	.var *-(WordListLink+wh_Xt)
=$c572					en = *	; remember here
>c561	0f					.byte CL	;wh_CodeLength
.c572	60		rts				rts
>c573	2d 54 72 61 69 6c 69 6e		L1:	.text "-Trailing"	;  name of word as a string, ending at wh_NameLastChar
>c57b	67
>c57c	e9					.byte (("-Trailing"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c57d	de c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c57f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c580	18					.byte UF+NN	;wh_Flags	dictionary flags
=50428					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c581					Minus_trailing:
.c581	20 22 b5	jsr $b522			jsr underflow_2
.c584	b5 26		lda $26,x			lda DStack+2,x		; tmp1= addr + (u1 & $ff00)
.c586	85 14		sta $14				sta tmp1+0
.c588	b5 27		lda $27,x			lda DStack+3,x
.c58a	18		clc				clc
.c58b	75 25		adc $25,x			adc DStack+1,x
.c58d	85 15		sta $15				sta tmp1+1
.c58f	b4 24		ldy $24,x			ldy DStack+0,x
.c591	88		dey		_loop:		dey			; back 1 char
.c592	c0 ff		cpy #$ff			cpy #$ff
.c594	d0 06		bne $c59c			bne +
.c596	c6 15		dec $15				dec tmp1+1		;   back 1 page
.c598	d6 25		dec $25,x			dec DStack+1,x
.c59a	30 06		bmi $c5a2			bmi _done
.c59c					+
.c59c	b1 14		lda ($14),y			lda (tmp1),y		; if blank, keep going
.c59e	c9 20		cmp #$20			cmp #AscSP
.c5a0	f0 ef		beq $c591			beq _loop
.c5a2	c8		iny		_done:		iny			; forward 1 char
.c5a3	d0 02		bne $c5a7			bne +
.c5a5	f6 25		inc $25,x			inc DStack+1,x
.c5a7	94 24		sty $24,x	+		sty DStack+0,x
=40					CL	.var *-(WordListLink+wh_Xt)
=$c5a9					en = *	; remember here
>c57f	28					.byte CL	;wh_CodeLength
.c5a9	60		rts				rts
>c5aa	2d 4c 65 61 64 69 6e 67		L1:	.text "-Leading"	;  name of word as a string, ending at wh_NameLastChar
>c5b2	e8					.byte (("-Leading"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c5b3	fc c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5b5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5b6	18					.byte UF+NN	;wh_Flags	dictionary flags
=50482					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5b7					Minus_leading:
.c5b7	20 22 b5	jsr $b522			jsr underflow_2
.c5ba					_loop:
.c5ba	b5 24		lda $24,x			lda DStack+0,x		; chars left?
.c5bc	15 25		ora $25,x			ora DStack+1,x
.c5be	f0 0f		beq $c5cf			beq _done
.c5c0	a1 26		lda ($26,x)			lda (DStack+2,x)	; get first character
.c5c2	c9 21		cmp #$21			cmp #AscSP+1		;   is_whitespace
.c5c4	b0 09		bcs $c5cf			bcs _done
.c5c6	20 6f cb	jsr $cb6f			jsr NOS_One_Plus
.c5c9	20 42 cb	jsr $cb42			jsr One_Minus_NoUF
.c5cc	4c ba c5	jmp $c5ba			jmp _loop
.c5cf					_done:
=24					CL	.var *-(WordListLink+wh_Xt)
=$c5cf					en = *	; remember here
>c5b5	18					.byte CL	;wh_CodeLength
.c5cf	60		rts				rts
>c5d0	2f 53 74 72 69 6e 67		L1:	.text "/String"	;  name of word as a string, ending at wh_NameLastChar
>c5d7	e7					.byte (("/String"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c5d8	32 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5da	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5db	18					.byte UF+NN	;wh_Flags	dictionary flags
=50519					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5dc					Slash_String:
.c5dc	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.c5de	b0 1d		bcs $c5fd		bcs Throw_Stack_20
.c5e0	18		clc				clc		; addr += n
.c5e1	b5 24		lda $24,x			lda DStack+0,x
.c5e3	75 28		adc $28,x			adc DStack+4,x
.c5e5	95 28		sta $28,x			sta DStack+4,x
.c5e7	b5 25		lda $25,x			lda DStack+1,x
.c5e9	75 29		adc $29,x			adc DStack+5,x
.c5eb	95 29		sta $29,x			sta DStack+5,x
.c5ed	38		sec				sec		; u -= n
.c5ee	b5 26		lda $26,x			lda DStack+2,x
.c5f0	f5 24		sbc $24,x			sbc DStack+0,x
.c5f2	95 26		sta $26,x			sta DStack+2,x
.c5f4	b5 27		lda $27,x			lda DStack+3,x
.c5f6	f5 25		sbc $25,x			sbc DStack+1,x
.c5f8	95 27		sta $27,x			sta DStack+3,x
.c5fa	e8		inx				inx		; Drop n
.c5fb	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c5fc					en = *	; remember here
>c5da	20					.byte CL	;wh_CodeLength
.c5fc	60		rts				rts
.c5fd	4c 31 b5	jmp $b531	Throw_Stack_20: jmp Throw_Stack
>c600	32 44 72 6f 70			L1:	.text "2Drop"	;  name of word as a string, ending at wh_NameLastChar
>c605	05					.byte (("2Drop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c606	57 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c608	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c609	10					.byte UF	;wh_Flags	dictionary flags
=50565					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c60a					Two_drop:
.c60a	20 22 b5	jsr $b522			jsr underflow_2
.c60d	e8		inx				inx
.c60e	e8		inx				inx
.c60f	e8		inx				inx
.c610	e8		inx				inx
=7					CL	.var *-(WordListLink+wh_Xt)
=$c611					en = *	; remember here
>c608	07					.byte CL	;wh_CodeLength
.c611	60		rts				rts
>c612	32 53 77 61 70			L1:	.text "2Swap"	;  name of word as a string, ending at wh_NameLastChar
>c617	05					.byte (("2Swap"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c618	85 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c61a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c61b	08					.byte NN	;wh_Flags	dictionary flags
=50583					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c61c					Two_Swap:
.c61c	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c61e	b0 dd		bcs $c5fd		bcs Throw_Stack_20
.c620	86 14		stx $14				stx tmp1
.c622	ca		dex				dex
.c623	ca		dex				dex
.c624	ca		dex				dex
.c625	ca		dex				dex
.c626	e8		inx		_loop:		inx
.c627	b5 27		lda $27,x			lda DStack+3,x	; 3 <-> 7
.c629	b4 2b		ldy $2b,x			ldy DStack+7,x
.c62b	95 2b		sta $2b,x			sta DStack+7,x
.c62d	94 27		sty $27,x			sty DStack+3,x
.c62f	e4 14		cpx $14				cpx tmp1
.c631	90 f3		bcc $c626			bcc _loop
=23					CL	.var *-(WordListLink+wh_Xt)
=$c633					en = *	; remember here
>c61a	17					.byte CL	;wh_CodeLength
.c633	60		rts				rts
>c634	32 4f 76 65 72			L1:	.text "2Over"	;  name of word as a string, ending at wh_NameLastChar
>c639	45					.byte (("2Over"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c63a	97 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c63c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c63d	18					.byte UF+NN	;wh_Flags	dictionary flags
=50617					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c63e					Two_over:
.c63e	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c640	b0 bb		bcs $c5fd		bcs Throw_Stack_20
.c642	a0 04		ldy #$04			ldy #4
.c644	ca		dex		_loop:		dex
.c645	b5 2c		lda $2c,x			lda DStack+8,x
.c647	95 24		sta $24,x			sta DStack+0,x
.c649	88		dey				dey
.c64a	d0 f8		bne $c644			bne _loop
=14					CL	.var *-(WordListLink+wh_Xt)
=$c64c					en = *	; remember here
>c63c	0e					.byte CL	;wh_CodeLength
.c64c	60		rts				rts
>c64d	32 21				L1:	.text "2!"	;  name of word as a string, ending at wh_NameLastChar
>c64f	22					.byte (("2!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c650	b9 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c652	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c653	10					.byte UF	;wh_Flags	dictionary flags
=50639					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c654					Two_Store:
.c654	20 27 b5	jsr $b527			jsr underflow_3
.c657	20 e3 b4	jsr $b4e3			jsr PopYA
.c65a	85 14		sta $14		Two_Store_YA:	sta tmp1+0	; save addr
.c65c	84 15		sty $15				sty tmp1+1
.c65e	b5 24		lda $24,x			lda DStack+0,x	; copy MSB
.c660	a0 00		ldy #$00			ldy #0
.c662	91 14		sta ($14),y			sta (tmp1),y
.c664	b5 25		lda $25,x			lda DStack+1,x	; copy next
.c666	c8		iny				iny
.c667	91 14		sta ($14),y			sta (tmp1),y
.c669	b5 26		lda $26,x			lda DStack+2,x	; copy next
.c66b	c8		iny				iny
.c66c	91 14		sta ($14),y			sta (tmp1),y
.c66e	b5 27		lda $27,x			lda DStack+3,x	; copy MSB
.c670	c8		iny				iny
.c671	91 14		sta ($14),y			sta (tmp1),y
.c673	e8		inx				inx		; 2Drop
.c674	e8		inx				inx
.c675	e8		inx				inx
.c676	e8		inx				inx
=35					CL	.var *-(WordListLink+wh_Xt)
=$c677					en = *	; remember here
>c652	23					.byte CL	;wh_CodeLength
.c677	60		rts				rts
>c678	32 40				L1:	.text "2@"	;  name of word as a string, ending at wh_NameLastChar
>c67a	02					.byte (("2@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c67b	cf c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c67d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c67e	00					.byte 0	;wh_Flags	dictionary flags
=50682					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c67f	20 e3 b4	jsr $b4e3	Two_fetch:	jsr PopYA
.c682	85 14		sta $14		Two_Fetch_YA:	sta tmp1+0	; save addr
.c684	84 15		sty $15				sty tmp1+1
.c686	a0 00		ldy #$00			ldy #0
.c688					Two_Fetch_Tmp1Y:
.c688	ca		dex				dex
.c689	ca		dex				dex
.c68a	ca		dex				dex
.c68b	ca		dex				dex
.c68c	b1 14		lda ($14),y			lda (tmp1),y	; copy LSB
.c68e	95 24		sta $24,x			sta DStack+0,x
.c690	c8		iny				iny		; copy next
.c691	b1 14		lda ($14),y			lda (tmp1),y
.c693	95 25		sta $25,x			sta DStack+1,x
.c695	c8		iny				iny		; copy next
.c696	b1 14		lda ($14),y			lda (tmp1),y
.c698	95 26		sta $26,x			sta DStack+2,x
.c69a	c8		iny				iny		; copy next
.c69b	b1 14		lda ($14),y			lda (tmp1),y
.c69d	95 27		sta $27,x			sta DStack+3,x
=32					CL	.var *-(WordListLink+wh_Xt)
=$c69f					en = *	; remember here
>c67d	20					.byte CL	;wh_CodeLength
.c69f	60		rts				rts
>c6a0	44 40				L1:	.text "D@"	;  name of word as a string, ending at wh_NameLastChar
>c6a2	02					.byte (("D@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6a3	fa c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6a5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6a6	08					.byte NN	;wh_Flags	dictionary flags
=50722					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6a7	20 e3 b4	jsr $b4e3	DFetch:		jsr PopYA
.c6aa	85 14		sta $14		DFetchYA:	sta tmp1+0	; save addr
.c6ac	84 15		sty $15				sty tmp1+1
.c6ae	ca		dex				dex
.c6af	ca		dex				dex
.c6b0	ca		dex				dex
.c6b1	ca		dex				dex
.c6b2	a0 00		ldy #$00			ldy #0
.c6b4	b1 14		lda ($14),y			lda (tmp1),y
.c6b6	95 26		sta $26,x			sta DStack+2,x
.c6b8	c8		iny				iny
.c6b9	b1 14		lda ($14),y			lda (tmp1),y
.c6bb	95 27		sta $27,x			sta DStack+3,x
.c6bd	c8		iny				iny
.c6be	b1 14		lda ($14),y			lda (tmp1),y
.c6c0	95 24		sta $24,x			sta DStack+0,x
.c6c2	c8		iny				iny
.c6c3	b1 14		lda ($14),y			lda (tmp1),y
.c6c5	95 25		sta $25,x			sta DStack+1,x
=32					CL	.var *-(WordListLink+wh_Xt)
=$c6c7					en = *	; remember here
>c6a5	20					.byte CL	;wh_CodeLength
.c6c7	60		rts				rts
>c6c8	44 21				L1:	.text "D!"	;  name of word as a string, ending at wh_NameLastChar
>c6ca	22					.byte (("D!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6cb	22 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6ce	08					.byte NN	;wh_Flags	dictionary flags
=50762					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6cf	20 e3 b4	jsr $b4e3	DStore:		jsr PopYA
.c6d2	85 14		sta $14		DStoreYA:	sta tmp1+0	; save addr
.c6d4	84 15		sty $15				sty tmp1+1
.c6d6	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c6d8	a0 00		ldy #$00			ldy #0
.c6da	91 14		sta ($14),y			sta (tmp1),y
.c6dc	b5 27		lda $27,x			lda DStack+3,x
.c6de	c8		iny				iny
.c6df	91 14		sta ($14),y			sta (tmp1),y
.c6e1	b5 24		lda $24,x			lda DStack+0,x
.c6e3	c8		iny				iny
.c6e4	91 14		sta ($14),y			sta (tmp1),y
.c6e6	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c6e8	c8		iny				iny
.c6e9	91 14		sta ($14),y			sta (tmp1),y
.c6eb	4c 0a c6	jmp $c60a			jmp Two_Drop	; also check underflow, return
=31					CL	.var *-(WordListLink+wh_Xt)
=$c6ee					en = *	; remember here
>c6cd	1f					.byte CL	;wh_CodeLength
>c6ee	32 52 40			L1:	.text "2R@"	;  name of word as a string, ending at wh_NameLastChar
>c6f1	03					.byte (("2R@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6f2	4a c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6f4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6f5	09					.byte CO+NN	;wh_Flags	dictionary flags
=50801					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6f6					Two_r_fetch:
.c6f6	8a		txa				txa		; Y= return stack index
.c6f7	ba		tsx				tsx
.c6f8	86 14		stx $14				stx tmp1
.c6fa	a4 14		ldy $14				ldy tmp1
.c6fc	aa		tax				tax
.c6fd	ca		dex				dex		; make room on the Data Stack
.c6fe	ca		dex				dex
.c6ff	ca		dex				dex
.c700	ca		dex				dex
.c701	b9 03 01	lda $0103,y			lda RStack+3,y	; LSB of top entry
.c704	95 24		sta $24,x			sta DStack+0,x
.c706	b9 04 01	lda $0104,y			lda RStack+4,y	; MSB of top entry
.c709	95 25		sta $25,x			sta DStack+1,x
.c70b	b9 05 01	lda $0105,y			lda RStack+5,y	; LSB of bottom entry
.c70e	95 26		sta $26,x			sta DStack+2,x
.c710	b9 06 01	lda $0106,y			lda RStack+6,y	; MSB of bottom entry
.c713	95 27		sta $27,x			sta DStack+3,x
=31					CL	.var *-(WordListLink+wh_Xt)
=$c715					en = *	; remember here
>c6f4	1f					.byte CL	;wh_CodeLength
.c715	60		rts				rts
>c716	32 52 3e			L1:	.text "2R>"	;  name of word as a string, ending at wh_NameLastChar
>c719	c3					.byte (("2R>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c71a	71 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c71c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c71d	41					.byte CO+R6	;wh_Flags	dictionary flags
=50841					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c71e					Two_r_from:
.c71e	68		pla				pla			; save the return address
.c71f	85 14		sta $14				sta tmp1+0
.c721	68		pla				pla
.c722	85 15		sta $15				sta tmp1+1
.c724	ca		dex				dex			; make room on stack
.c725	ca		dex				dex
.c726	ca		dex				dex
.c727	ca		dex				dex
.c728	68		pla				pla			; LSB
.c729	95 24		sta $24,x			sta DStack+0,x
.c72b	68		pla				pla			; MSB
.c72c	95 25		sta $25,x			sta DStack+1,x
.c72e	68		pla				pla			; LSB
.c72f	95 26		sta $26,x			sta DStack+2,x
.c731	68		pla				pla			; MSB
.c732	95 27		sta $27,x			sta DStack+3,x
.c734	a5 15		lda $15				lda tmp1+1		; restore return address
.c736	48		pha				pha
.c737	a5 14		lda $14				lda tmp1+0
.c739	48		pha				pha
=28					CL	.var *-(WordListLink+wh_Xt)
=$c73a					en = *	; remember here
>c71c	1c					.byte CL	;wh_CodeLength
.c73a	60		rts				rts
>c73b	32 3e 52			L1:	.text "2>R"	;  name of word as a string, ending at wh_NameLastChar
>c73e	43					.byte (("2>R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c73f	99 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c741	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c742	51					.byte CO+UF+R6	;wh_Flags	dictionary flags
=50878					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c743					Two_to_r:
.c743	68		pla				pla		; save the return address
.c744	85 14		sta $14				sta tmp1+0
.c746	68		pla				pla
.c747	85 15		sta $15				sta tmp1+1
.c749	20 22 b5	jsr $b522			jsr underflow_2
.c74c	b5 27		lda $27,x			lda DStack+3,x	; MSB
.c74e	48		pha				pha
.c74f	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c751	48		pha				pha
.c752	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c754	48		pha				pha
.c755	b5 24		lda $24,x			lda DStack+0,x	; LSB
.c757	48		pha				pha
.c758	e8		inx				inx
.c759	e8		inx				inx
.c75a	e8		inx				inx
.c75b	e8		inx				inx
.c75c	a5 15		lda $15				lda tmp1+1	; restore return address
.c75e	48		pha				pha
.c75f	a5 14		lda $14				lda tmp1+0
.c761	48		pha				pha
=31					CL	.var *-(WordListLink+wh_Xt)
=$c762					en = *	; remember here
>c741	1f					.byte CL	;wh_CodeLength
.c762	60		rts				rts
>c763	49 6e 76 65 72 74		L1:	.text "Invert"	;  name of word as a string, ending at wh_NameLastChar
>c769	86					.byte (("Invert"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c76a	be c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c76c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c76d	10					.byte UF	;wh_Flags	dictionary flags
=50921					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c76e					Invert:
.c76e	20 0d b5	jsr $b50d			jsr underflow_1
.c771	a9 ff		lda #$ff			lda #$FF
.c773	55 24		eor $24,x			eor DStack+0,x	; LSB
.c775	95 24		sta $24,x			sta DStack+0,x
.c777	a9 ff		lda #$ff			lda #$FF
.c779	55 25		eor $25,x			eor DStack+1,x	; MSB
.c77b	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$c77d					en = *	; remember here
>c76c	0f					.byte CL	;wh_CodeLength
.c77d	60		rts				rts
>c77e	4e 65 67 61 74 65		L1:	.text "Negate"	;  name of word as a string, ending at wh_NameLastChar
>c784	a6					.byte (("Negate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c785	e9 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c787	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c788	10					.byte UF	;wh_Flags	dictionary flags
=50948					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c789					Negate:
.c789	20 0d b5	jsr $b50d			jsr underflow_1
.c78c	38		sec		Negate3:	sec
.c78d	a9 00		lda #$00	Negate4:	lda #0
.c78f	f5 24		sbc $24,x			sbc DStack+0,x	; LSB
.c791	95 24		sta $24,x			sta DStack+0,x
.c793	a9 00		lda #$00			lda #0
.c795	f5 25		sbc $25,x			sbc DStack+1,x	; MSB
.c797	95 25		sta $25,x			sta DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$c799					en = *	; remember here
>c787	10					.byte CL	;wh_CodeLength
.c799	60		rts				rts
>c79a	41 62 73			L1:	.text "Abs"	;  name of word as a string, ending at wh_NameLastChar
>c79d	63					.byte (("Abs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c79e	04 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7a0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7a1	08					.byte NN	;wh_Flags	dictionary flags
=50973					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7a2					Abs:
.c7a2	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c7a4	b0 05		bcs $c7ab		bcs Throw_Stack_17
.c7a6	b5 25		lda $25,x			lda DStack+1,x	; n negative?
.c7a8	30 e2		bmi $c78c			bmi Negate3
=8					CL	.var *-(WordListLink+wh_Xt)
=$c7aa					en = *	; remember here
>c7a0	08					.byte CL	;wh_CodeLength
.c7aa	60		rts				rts
.c7ab	4c 31 b5	jmp $b531	Throw_Stack_17: jmp Throw_Stack
>c7ae	44 4e 65 67 61 74 65		L1:	.text "DNegate"	;  name of word as a string, ending at wh_NameLastChar
>c7b5	a7					.byte (("DNegate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7b6	1d c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7b8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7b9	08					.byte NN	;wh_Flags	dictionary flags
=50997					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7ba					DNegate:
.c7ba	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c7bc	b0 ed		bcs $c7ab		bcs Throw_Stack_17
.c7be	38		sec		DNegate3:	sec
.c7bf	a9 00		lda #$00			lda #0
.c7c1	f5 26		sbc $26,x			sbc DStack+2,x	; LSB of low cell
.c7c3	95 26		sta $26,x			sta DStack+2,x
.c7c5	a9 00		lda #$00			lda #0
.c7c7	f5 27		sbc $27,x			sbc DStack+3,x	; MSB of low cell
.c7c9	95 27		sta $27,x			sta DStack+3,x
.c7cb	4c 8d c7	jmp $c78d			jmp Negate4
=20					CL	.var *-(WordListLink+wh_Xt)
=$c7ce					en = *	; remember here
>c7b8	14					.byte CL	;wh_CodeLength
>c7ce	44 41 62 73			L1:	.text "DAbs"	;  name of word as a string, ending at wh_NameLastChar
>c7d2	64					.byte (("DAbs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7d3	35 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7d5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7d6	08					.byte NN	;wh_Flags	dictionary flags
=51026					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7d7					DAbs:
.c7d7	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c7d9	b0 d0		bcs $c7ab		bcs Throw_Stack_17
.c7db	b5 25		lda $25,x			lda DStack+1,x	; d negative?
.c7dd	30 df		bmi $c7be			bmi DNegate3
=8					CL	.var *-(WordListLink+wh_Xt)
=$c7df					en = *	; remember here
>c7d5	08					.byte CL	;wh_CodeLength
.c7df	60		rts				rts
>c7e0	44 3c 3e			L1:	.text "D<>"	;  name of word as a string, ending at wh_NameLastChar
>c7e3	c3					.byte (("D<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7e4	52 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7e6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7e7	08					.byte NN	;wh_Flags	dictionary flags
=51043					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7e8	20 f5 c7	jsr $c7f5	DNEq:		jsr DEqual
.c7eb	4c f8 c9	jmp $c9f8			jmp ZEqA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c7ee					en = *	; remember here
>c7e6	06					.byte CL	;wh_CodeLength
>c7ee	44 3d				L1:	.text "D="	;  name of word as a string, ending at wh_NameLastChar
>c7f0	a2					.byte (("D="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7f1	63 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7f4	08					.byte NN	;wh_Flags	dictionary flags
=51056					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7f5	b5 2a		lda $2a,x	DEqual:		lda DStack+6,x
.c7f7	d5 26		cmp $26,x			cmp DStack+2,x
.c7f9	d0 50		bne $c84b			bne False3
.c7fb	b5 2b		lda $2b,x			lda DStack+7,x
.c7fd	d5 27		cmp $27,x			cmp DStack+3,x
.c7ff	d0 4a		bne $c84b			bne False3
.c801	b5 24		lda $24,x			lda DStack+0,x
.c803	d5 28		cmp $28,x			cmp DStack+4,x
.c805	d0 44		bne $c84b			bne False3
.c807	b5 25		lda $25,x			lda DStack+1,x
.c809	d5 29		cmp $29,x			cmp DStack+5,x
.c80b	d0 3e		bne $c84b			bne False3
.c80d	f0 62		beq $c871			beq True3
=26					CL	.var *-(WordListLink+wh_Xt)
=$c80f					en = *	; remember here
>c7f3	1a					.byte CL	;wh_CodeLength
>c80f	44 55 3e			L1:	.text "DU>"	;  name of word as a string, ending at wh_NameLastChar
>c812	c3					.byte (("DU>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c813	70 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c815	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c816	08					.byte NN	;wh_Flags	dictionary flags
=51090					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c817	20 b0 c8	jsr $c8b0	DUGt:		jsr DGtSub
.c81a	90 55		bcc $c871			bcc True3
.c81c	b0 2d		bcs $c84b			bcs False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c81e					en = *	; remember here
>c815	07					.byte CL	;wh_CodeLength
>c81e	44 55 3c 3d			L1:	.text "DU<="	;  name of word as a string, ending at wh_NameLastChar
>c822	a4					.byte (("DU<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c823	92 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c825	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c826	08					.byte NN	;wh_Flags	dictionary flags
=51106					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c827	20 b0 c8	jsr $c8b0	DULe:		jsr DGtSub
.c82a	b0 45		bcs $c871			bcs True3
.c82c	90 1d		bcc $c84b			bcc False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c82e					en = *	; remember here
>c825	07					.byte CL	;wh_CodeLength
>c82e	44 55 3e 3d			L1:	.text "DU>="	;  name of word as a string, ending at wh_NameLastChar
>c832	a4					.byte (("DU>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c833	a2 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c835	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c836	08					.byte NN	;wh_Flags	dictionary flags
=51122					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c837	20 7e c8	jsr $c87e	DUGe:		jsr DLessSub
.c83a	b0 35		bcs $c871			bcs True3
.c83c	90 0d		bcc $c84b			bcc False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c83e					en = *	; remember here
>c835	07					.byte CL	;wh_CodeLength
>c83e	44 55 3c			L1:	.text "DU<"	;  name of word as a string, ending at wh_NameLastChar
>c841	83					.byte (("DU<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c842	b2 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c844	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c845	08					.byte NN	;wh_Flags	dictionary flags
=51137					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c846	20 7e c8	jsr $c87e	DULess:		jsr DLessSub
.c849	90 26		bcc $c871			bcc True3
.c84b	a9 00		lda #$00	False3:		lda #0
.c84d	f0 24		beq $c873			beq DReturn3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c84f					en = *	; remember here
>c844	09					.byte CL	;wh_CodeLength
.c84f	4c 31 b5	jmp $b531	Throw_Stack_09: jmp Throw_Stack
>c852	44 3e 3d			L1:	.text "D>="	;  name of word as a string, ending at wh_NameLastChar
>c855	a3					.byte (("D>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c856	c1 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c858	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c859	08					.byte NN	;wh_Flags	dictionary flags
=51157					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c85a	20 7e c8	jsr $c87e	DGEq:		jsr DLessSub
.c85d	70 10		bvs $c86f			bvs DLess3
.c85f	10 10		bpl $c871	DGEq3:		bpl True3
.c861	30 e8		bmi $c84b			bmi False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c863					en = *	; remember here
>c858	09					.byte CL	;wh_CodeLength
>c863	44 3c				L1:	.text "D<"	;  name of word as a string, ending at wh_NameLastChar
>c865	82					.byte (("D<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c866	d5 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c868	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c869	08					.byte NN	;wh_Flags	dictionary flags
=51173					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c86a	20 7e c8	jsr $c87e	DLess:		jsr DLessSub
.c86d	70 f0		bvs $c85f			bvs DGEq3
.c86f	10 da		bpl $c84b	DLess3:		bpl False3
.c871	a9 ff		lda #$ff	True3:		lda #$ff
.c873					DReturn3:
.c873	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c875	b0 d8		bcs $c84f		bcs Throw_Stack_09
.c877	95 2a		sta $2a,x			sta DStack+6,x
.c879	95 2b		sta $2b,x			sta DStack+7,x
.c87b	4c 58 ae	jmp $ae58			jmp ThreeDrop
=20					CL	.var *-(WordListLink+wh_Xt)
=$c87e					en = *	; remember here
>c868	14					.byte CL	;wh_CodeLength
.c87e	b5 2a		lda $2a,x	DLessSub:	lda DStack+6,x
.c880	d5 26		cmp $26,x			cmp DStack+2,x
.c882	b5 2b		lda $2b,x			lda DStack+7,x
.c884	f5 27		sbc $27,x			sbc DStack+3,x
.c886	b5 28		lda $28,x			lda DStack+4,x
.c888	f5 24		sbc $24,x			sbc DStack+0,x
.c88a	b5 29		lda $29,x			lda DStack+5,x
.c88c	f5 25		sbc $25,x			sbc DStack+1,x
.c88e	60		rts				rts
>c88f	44 3c 3d			L1:	.text "D<="	;  name of word as a string, ending at wh_NameLastChar
>c892	a3					.byte (("D<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c893	e5 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c895	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c896	08					.byte NN	;wh_Flags	dictionary flags
=51218					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c897	20 b0 c8	jsr $c8b0	DLe:		jsr DGtSub
.c89a	70 10		bvs $c8ac			bvs DGt3
.c89c	10 d3		bpl $c871	DLe3:		bpl True3
.c89e	30 ab		bmi $c84b			bmi False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c8a0					en = *	; remember here
>c895	09					.byte CL	;wh_CodeLength
>c8a0	44 3e				L1:	.text "D>"	;  name of word as a string, ending at wh_NameLastChar
>c8a2	c2					.byte (("D>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8a3	12 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8a5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8a6	08					.byte NN	;wh_Flags	dictionary flags
=51234					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8a7	20 b0 c8	jsr $c8b0	DGt:		jsr DGtSub
.c8aa	70 f0		bvs $c89c			bvs DLe3
.c8ac	30 c3		bmi $c871	DGt3:		bmi True3
.c8ae	10 9b		bpl $c84b			bpl False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c8b0					en = *	; remember here
>c8a5	09					.byte CL	;wh_CodeLength
.c8b0	b5 26		lda $26,x	DGtSub:		lda DStack+2,x
.c8b2	d5 2a		cmp $2a,x			cmp DStack+6,x
.c8b4	b5 27		lda $27,x			lda DStack+3,x
.c8b6	f5 2b		sbc $2b,x			sbc DStack+7,x
.c8b8	b5 24		lda $24,x			lda DStack+0,x
.c8ba	f5 28		sbc $28,x			sbc DStack+4,x
.c8bc	b5 25		lda $25,x			lda DStack+1,x
.c8be	f5 29		sbc $29,x			sbc DStack+5,x
.c8c0	60		rts				rts
>c8c1	44 30 3c 3d			L1:	.text "D0<="	;  name of word as a string, ending at wh_NameLastChar
>c8c5	a4					.byte (("D0<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8c6	22 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8c8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8c9	08					.byte NN	;wh_Flags	dictionary flags
=51269					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8ca	b5 25		lda $25,x	D0Le:		lda DStack+1,x	; test sign
.c8cc	30 6b		bmi $c939			bmi True1
.c8ce	10 27		bpl $c8f7			bpl D0Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c8d0					en = *	; remember here
>c8c8	06					.byte CL	;wh_CodeLength
>c8d0	44 30 3e			L1:	.text "D0>"	;  name of word as a string, ending at wh_NameLastChar
>c8d3	c3					.byte (("D0>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8d4	45 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8d6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8d7	08					.byte NN	;wh_Flags	dictionary flags
=51283					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8d8	b5 25		lda $25,x	D0Gt:		lda DStack+1,x	; test sign
.c8da	10 0c		bpl $c8e8			bpl D0Ne
.c8dc	4c 59 c9	jmp $c959			jmp False1
>c8df	44 30 3c 3e			L1:	.text "D0<>"	;  name of word as a string, ending at wh_NameLastChar
>c8e3	c4					.byte (("D0<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8e4	53 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8e6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8e7	08					.byte NN	;wh_Flags	dictionary flags
=51299					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8e8	20 fe c8	jsr $c8fe	D0Ne:		jsr D0EqSub
.c8eb	d0 4c		bne $c939			bne True1
.c8ed	f0 6a		beq $c959			beq False1
=7					CL	.var *-(WordListLink+wh_Xt)
=$c8ef					en = *	; remember here
>c8e6	07					.byte CL	;wh_CodeLength
>c8ef	44 30 3d			L1:	.text "D0="	;  name of word as a string, ending at wh_NameLastChar
>c8f2	a3					.byte (("D0="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8f3	63 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8f5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8f6	08					.byte NN	;wh_Flags	dictionary flags
=51314					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8f7	20 fe c8	jsr $c8fe	D0Equal:	jsr D0EqSub
.c8fa	d0 5d		bne $c959			bne False1
.c8fc	f0 3b		beq $c939			beq True1
=7					CL	.var *-(WordListLink+wh_Xt)
=$c8fe					en = *	; remember here
>c8f5	07					.byte CL	;wh_CodeLength
.c8fe	b5 26		lda $26,x	D0EqSub:	lda DStack+2,x
.c900	15 27		ora $27,x			ora DStack+3,x
.c902	15 24		ora $24,x			ora DStack+0,x
.c904	15 25		ora $25,x			ora DStack+1,x
.c906	60		rts				rts
>c907	44 30 3c			L1:	.text "D0<"	;  name of word as a string, ending at wh_NameLastChar
>c90a	83					.byte (("D0<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c90b	72 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c90d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c90e	08					.byte NN	;wh_Flags	dictionary flags
=51338					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c90f	b5 25		lda $25,x	D0Less:		lda DStack+1,x	; test sign
.c911	30 26		bmi $c939			bmi True1
.c913	10 44		bpl $c959			bpl False1
=6					CL	.var *-(WordListLink+wh_Xt)
=$c915					en = *	; remember here
>c90d	06					.byte CL	;wh_CodeLength
>c915	44 30 3e 3d			L1:	.text "D0>="	;  name of word as a string, ending at wh_NameLastChar
>c919	a4					.byte (("D0>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c91a	8a c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c91c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c91d	08					.byte NN	;wh_Flags	dictionary flags
=51353					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c91e	b5 25		lda $25,x	D0Ge:		lda DStack+1,x	; test sign
.c920	10 17		bpl $c939			bpl True1
.c922	30 35		bmi $c959			bmi False1
=6					CL	.var *-(WordListLink+wh_Xt)
=$c924					en = *	; remember here
>c91c	06					.byte CL	;wh_CodeLength
.c924	4c 31 b5	jmp $b531	Throw_Stack_08: jmp Throw_Stack
>c927	3d				L1:	.text "="	;  name of word as a string, ending at wh_NameLastChar
>c928	a1					.byte (("="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c929	99 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c92b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c92c	08					.byte NN	;wh_Flags	dictionary flags
=51368					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c92d	b5 24		lda $24,x	Equal:		lda DStack+0,x		; LSB
.c92f	d5 26		cmp $26,x			cmp DStack+2,x
.c931	d0 26		bne $c959			bne False1
.c933	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c935	d5 27		cmp $27,x			cmp DStack+3,x
.c937	d0 20		bne $c959			bne False1
.c939	a9 ff		lda #$ff	True1:		lda #$ff	; return TRUE
.c93b					Return1:
.c93b	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c93d	b0 e5		bcs $c924		bcs Throw_Stack_08
.c93f	e8		inx				inx		; Drop
.c940	e8		inx				inx
.c941	95 24		sta $24,x			sta DStack+0,x	; store f
.c943	95 25		sta $25,x			sta DStack+1,x
.c945	60		rts				rts
=25					CL	.var *-(WordListLink+wh_Xt)
=$c946					en = *	; remember here
>c92b	19					.byte CL	;wh_CodeLength
>c946	3c 3e				L1:	.text "<>"	;  name of word as a string, ending at wh_NameLastChar
>c948	c2					.byte (("<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c949	a8 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c94b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c94c	08					.byte NN	;wh_Flags	dictionary flags
=51400					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c94d	b5 24		lda $24,x	Not_Equals:	lda DStack+0,x		; LSB
.c94f	d5 26		cmp $26,x			cmp DStack+2,x
.c951	d0 e6		bne $c939			bne True1
.c953	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c955	d5 27		cmp $27,x			cmp DStack+3,x
.c957	d0 e0		bne $c939			bne True1
.c959	a9 00		lda #$00	False1:		lda #0		; return FALSE
.c95b	f0 de		beq $c93b			beq Return1
=16					CL	.var *-(WordListLink+wh_Xt)
=$c95d					en = *	; remember here
>c94b	10					.byte CL	;wh_CodeLength
>c95d	3c				L1:	.text "<"	;  name of word as a string, ending at wh_NameLastChar
>c95e	81					.byte (("<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c95f	c8 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c961	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c962	08					.byte NN	;wh_Flags	dictionary flags
=51422					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c963	b5 26		lda $26,x	Less_Than:	lda DStack+2,x	; compare
.c965	d5 24		cmp $24,x			cmp DStack+0,x
.c967	b5 27		lda $27,x			lda DStack+3,x
.c969	f5 25		sbc $25,x			sbc DStack+1,x
.c96b	50 02		bvc $c96f			bvc _c
.c96d	49 80		eor #$80			eor #$80	; fix sign
.c96f	10 e8		bpl $c959	_c:		bpl False1
.c971	30 c6		bmi $c939			bmi True1
=16					CL	.var *-(WordListLink+wh_Xt)
=$c973					en = *	; remember here
>c961	10					.byte CL	;wh_CodeLength
>c973	3e 3d				L1:	.text ">="	;  name of word as a string, ending at wh_NameLastChar
>c975	a2					.byte ((">="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c976	de c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c978	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c979	08					.byte NN	;wh_Flags	dictionary flags
=51445					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c97a	20 63 c9	jsr $c963	Ge:		jsr Less_Than
.c97d	4c f8 c9	jmp $c9f8			jmp ZEqA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c980					en = *	; remember here
>c978	06					.byte CL	;wh_CodeLength
>c980	55 3c				L1:	.text "U<"	;  name of word as a string, ending at wh_NameLastChar
>c982	82					.byte (("U<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c983	f5 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c985	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c986	08					.byte NN	;wh_Flags	dictionary flags
=51458					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c987	b5 26		lda $26,x	U_Less_Than:	lda DStack+2,x
.c989	d5 24		cmp $24,x			cmp DStack+0,x
.c98b	b5 27		lda $27,x			lda DStack+3,x
.c98d	f5 25		sbc $25,x			sbc DStack+1,x
.c98f	b0 c8		bcs $c959			bcs False1
.c991	90 a6		bcc $c939			bcc True1
=12					CL	.var *-(WordListLink+wh_Xt)
=$c993					en = *	; remember here
>c985	0c					.byte CL	;wh_CodeLength
>c993	55 3e				L1:	.text "U>"	;  name of word as a string, ending at wh_NameLastChar
>c995	c2					.byte (("U>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c996	02 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c998	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c999	08					.byte NN	;wh_Flags	dictionary flags
=51477					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c99a	b5 24		lda $24,x	U_Greater_Than:	lda DStack+0,x
.c99c	d5 26		cmp $26,x			cmp DStack+2,x
.c99e	b5 25		lda $25,x			lda DStack+1,x
.c9a0	f5 27		sbc $27,x			sbc DStack+3,x
.c9a2	b0 b5		bcs $c959			bcs False1
.c9a4	90 93		bcc $c939			bcc True1
=12					CL	.var *-(WordListLink+wh_Xt)
=$c9a6					en = *	; remember here
>c998	0c					.byte CL	;wh_CodeLength
>c9a6	3e				L1:	.text ">"	;  name of word as a string, ending at wh_NameLastChar
>c9a7	c1					.byte ((">"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9a8	15 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9aa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9ab	08					.byte NN	;wh_Flags	dictionary flags
=51495					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9ac	b5 24		lda $24,x	Greater_Than:	lda DStack+0,x	; compare
.c9ae	d5 26		cmp $26,x			cmp DStack+2,x
.c9b0	b5 25		lda $25,x			lda DStack+1,x
.c9b2	f5 27		sbc $27,x			sbc DStack+3,x
.c9b4	50 02		bvc $c9b8			bvc _c
.c9b6	49 80		eor #$80			eor #$80	; fix sign
.c9b8	10 9f		bpl $c959	_c:		bpl False1
.c9ba	4c 39 c9	jmp $c939			jmp True1
=17					CL	.var *-(WordListLink+wh_Xt)
=$c9bd					en = *	; remember here
>c9aa	11					.byte CL	;wh_CodeLength
>c9bd	3c 3d				L1:	.text "<="	;  name of word as a string, ending at wh_NameLastChar
>c9bf	a2					.byte (("<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9c0	27 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9c3	08					.byte NN	;wh_Flags	dictionary flags
=51519					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9c4	20 ac c9	jsr $c9ac	Le:		jsr Greater_Than
.c9c7	4c f8 c9	jmp $c9f8			jmp ZEqA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c9ca					en = *	; remember here
>c9c2	06					.byte CL	;wh_CodeLength
>c9ca	55 3e 3d			L1:	.text "U>="	;  name of word as a string, ending at wh_NameLastChar
>c9cd	a3					.byte (("U>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9ce	3f c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9d0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9d1	08					.byte NN	;wh_Flags	dictionary flags
=51533					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9d2	20 87 c9	jsr $c987	UGe:		jsr U_Less_Than
.c9d5	4c f8 c9	jmp $c9f8			jmp ZEqA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c9d8					en = *	; remember here
>c9d0	06					.byte CL	;wh_CodeLength
>c9d8	55 3c 3d			L1:	.text "U<="	;  name of word as a string, ending at wh_NameLastChar
>c9db	a3					.byte (("U<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9dc	4d c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9df	08					.byte NN	;wh_Flags	dictionary flags
=51547					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9e0	20 9a c9	jsr $c99a	ULe:		jsr U_Greater_Than
.c9e3	4c f8 c9	jmp $c9f8			jmp ZEqA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c9e6					en = *	; remember here
>c9de	06					.byte CL	;wh_CodeLength
.c9e6	4c 31 b5	jmp $b531	Throw_Stack_11: jmp Throw_Stack
>c9e9	30 3d				L1:	.text "0="	;  name of word as a string, ending at wh_NameLastChar
>c9eb	a2					.byte (("0="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9ec	5b c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9ef	08					.byte NN	;wh_Flags	dictionary flags
=51563					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9f0	b5 25		lda $25,x	Zero_Equal:	lda DStack+1,x
.c9f2	15 24		ora $24,x	ZEq3:		ora DStack+0,x
.c9f4	d0 2d		bne $ca23			bne False0
.c9f6	f0 15		beq $ca0d			beq True0
=8					CL	.var *-(WordListLink+wh_Xt)
=$c9f8					en = *	; remember here
>c9ee	08					.byte CL	;wh_CodeLength
.c9f8					ZEqA:
.c9f8	49 ff		eor #$ff			eor #$ff
.c9fa	95 24		sta $24,x			sta DStack+0,x
.c9fc	95 25		sta $25,x			sta DStack+1,x
.c9fe	60		rts				rts
>c9ff	30 3c 3e			L1:	.text "0<>"	;  name of word as a string, ending at wh_NameLastChar
>ca02	c3					.byte (("0<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca03	6b c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca05	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca06	08					.byte NN	;wh_Flags	dictionary flags
=51586					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca07	b5 25		lda $25,x	Zero_Unequal:	lda DStack+1,x
.ca09	15 24		ora $24,x	ZNe3:		ora DStack+0,x
.ca0b	f0 16		beq $ca23			beq False0
.ca0d	a9 ff		lda #$ff	True0:		lda #$ff	; return TRUE
.ca0f	95 24		sta $24,x	Return0:	sta DStack+0,x
.ca11	95 25		sta $25,x			sta DStack+1,x
.ca13	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.ca15	b0 39		bcs $ca50		bcs Throw_Stack_05
.ca17	60		rts				rts
=17					CL	.var *-(WordListLink+wh_Xt)
=$ca18					en = *	; remember here
>ca05	11					.byte CL	;wh_CodeLength
>ca18	30 3e				L1:	.text "0>"	;  name of word as a string, ending at wh_NameLastChar
>ca1a	c2					.byte (("0>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca1b	82 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca1d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca1e	08					.byte NN	;wh_Flags	dictionary flags
=51610					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca1f	b5 25		lda $25,x	Zero_Greater:	lda DStack+1,x	; MSB
.ca21	10 e6		bpl $ca09			bpl ZNe3	; >= 0 ?
.ca23	a9 00		lda #$00	False0:		lda #0		; return FALSE
.ca25	f0 e8		beq $ca0f			beq Return0
=8					CL	.var *-(WordListLink+wh_Xt)
=$ca27					en = *	; remember here
>ca1d	08					.byte CL	;wh_CodeLength
>ca27	30 3c 3d			L1:	.text "0<="	;  name of word as a string, ending at wh_NameLastChar
>ca2a	a3					.byte (("0<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca2b	9a c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca2d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca2e	08					.byte NN	;wh_Flags	dictionary flags
=51626					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca2f	b5 25		lda $25,x	ZLe:		lda DStack+1,x	; < 0 ?
.ca31	30 da		bmi $ca0d			bmi True0
.ca33	10 bd		bpl $c9f2			bpl ZEq3
=6					CL	.var *-(WordListLink+wh_Xt)
=$ca35					en = *	; remember here
>ca2d	06					.byte CL	;wh_CodeLength
>ca35	30 3e 3d			L1:	.text "0>="	;  name of word as a string, ending at wh_NameLastChar
>ca38	a3					.byte (("0>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca39	aa c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca3b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca3c	08					.byte NN	;wh_Flags	dictionary flags
=51640					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca3d	b5 25		lda $25,x	ZGe:		lda DStack+1,x
.ca3f	10 cc		bpl $ca0d			bpl True0
.ca41	30 e0		bmi $ca23			bmi False0
=6					CL	.var *-(WordListLink+wh_Xt)
=$ca43					en = *	; remember here
>ca3b	06					.byte CL	;wh_CodeLength
>ca43	30 3c				L1:	.text "0<"	;  name of word as a string, ending at wh_NameLastChar
>ca45	82					.byte (("0<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca46	b8 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca48	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca49	08					.byte NN	;wh_Flags	dictionary flags
=51653					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca4a	b5 25		lda $25,x	Zero_Less:	lda DStack+1,x	; MSB
.ca4c	10 d5		bpl $ca23			bpl False0
.ca4e	30 bd		bmi $ca0d			bmi True0
=6					CL	.var *-(WordListLink+wh_Xt)
=$ca50					en = *	; remember here
>ca48	06					.byte CL	;wh_CodeLength
.ca50	4c 31 b5	jmp $b531	Throw_Stack_05: jmp Throw_Stack
>ca53	4d 69 6e			L1:	.text "Min"	;  name of word as a string, ending at wh_NameLastChar
>ca56	c3					.byte (("Min"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca57	c5 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca59	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca5a	18					.byte UF+NN	;wh_Flags	dictionary flags
=51670					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca5b					Min:
.ca5b	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ca5d	b0 f1		bcs $ca50		bcs Throw_Stack_05
.ca5f	b5 24		lda $24,x			lda DStack+0,x	; compare n1 & n2; sets V & N but not Z
.ca61	d5 26		cmp $26,x			cmp DStack+2,x
.ca63	b5 25		lda $25,x			lda DStack+1,x
.ca65	f5 27		sbc $27,x			sbc DStack+3,x
.ca67	70 1b		bvs $ca84			bvs Max_3	; if overflow, the sign is backwards
.ca69	30 29		bmi $ca94	Min_3:		bmi Nip_NoUf	; if negative, NOS is larger and needs to be dumped
.ca6b	e8		inx				inx		; Drop n2
.ca6c	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$ca6d					en = *	; remember here
>ca59	12					.byte CL	;wh_CodeLength
.ca6d	60		rts				rts
>ca6e	4d 61 78			L1:	.text "Max"	;  name of word as a string, ending at wh_NameLastChar
>ca71	03					.byte (("Max"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca72	d6 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca74	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca75	08					.byte NN	;wh_Flags	dictionary flags
=51697					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca76					Max:
.ca76	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ca78	b0 d6		bcs $ca50		bcs Throw_Stack_05
.ca7a	b5 24		lda $24,x			lda DStack+0,x	; Compare n1 & n2; sets V & N but not Z
.ca7c	d5 26		cmp $26,x			cmp DStack+2,x
.ca7e	b5 25		lda $25,x			lda DStack+1,x
.ca80	f5 27		sbc $27,x			sbc DStack+3,x
.ca82	70 e5		bvs $ca69			bvs Min_3	; if overflow, the sign is backwards
.ca84	10 0e		bpl $ca94	Max_3:		bpl Nip_NoUf	; if negative, NOS is larger and needs to be kept
.ca86	e8		inx				inx		; Drop n2
.ca87	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$ca88					en = *	; remember here
>ca74	12					.byte CL	;wh_CodeLength
.ca88	60		rts				rts
>ca89	4e 69 70			L1:	.text "Nip"	;  name of word as a string, ending at wh_NameLastChar
>ca8c	03					.byte (("Nip"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca8d	f1 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca8f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca90	10					.byte UF	;wh_Flags	dictionary flags
=51724					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca91					Nip:
.ca91	20 22 b5	jsr $b522			jsr underflow_2
.ca94	b5 24		lda $24,x	Nip_NoUf:	lda DStack+0,x	; PopYA
.ca96	b4 25		ldy $25,x			ldy DStack+1,x
.ca98	e8		inx				inx
.ca99	e8		inx				inx
.ca9a	95 24		sta $24,x			sta DStack+0,x	; store over n1
.ca9c	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$ca9e					en = *	; remember here
>ca8f	0d					.byte CL	;wh_CodeLength
.ca9e	60		rts				rts
>ca9f	50 69 63 6b			L1:	.text "Pick"	;  name of word as a string, ending at wh_NameLastChar
>caa3	64					.byte (("Pick"[-1]&7)<<5)+(*-L1)	;wh_HNL
>caa4	0c ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>caa6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>caa7	00					.byte 0	;wh_Flags	dictionary flags
=51747					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.caa8					Pick:
.caa8	16 24		asl $24,x			asl DStack+0,x	; we assume u < 128 (stack is small)
.caaa	8a		txa				txa
.caab	75 24		adc $24,x			adc DStack+0,x
.caad	a8		tay				tay
.caae	b9 26 00	lda $0026,y			lda DStack+2,y
.cab1	95 24		sta $24,x			sta DStack+0,x
.cab3	b9 27 00	lda $0027,y			lda DStack+3,y
.cab6	95 25		sta $25,x			sta DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$cab8					en = *	; remember here
>caa6	10					.byte CL	;wh_CodeLength
.cab8	60		rts				rts
>cab9	43 68 61 72			L1:	.text "Char"	;  name of word as a string, ending at wh_NameLastChar
>cabd	44					.byte (("Char"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cabe	23 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cac0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cac1	08					.byte NN	;wh_Flags	dictionary flags
=51773					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cac2					Char:
.cac2	20 d0 bb	jsr $bbd0			jsr parse_name_check
.cac5	e8		inx				inx		; Drop number of characters, leave addr
.cac6	e8		inx				inx
.cac7	4c 7b ce	jmp $ce7b			jmp C_Fetch	; get character ( C@ )
=8					CL	.var *-(WordListLink+wh_Xt)
=$caca					en = *	; remember here
>cac0	08					.byte CL	;wh_CodeLength
>caca	5b 43 68 61 72 5d		L1:	.text "[Char]"	;  name of word as a string, ending at wh_NameLastChar
>cad0	a6					.byte (("[Char]"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cad1	3d ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cad3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cad4	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=51792					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cad5	20 c2 ca	jsr $cac2	Bracket_Char:	jsr Char
.cad8	4c 71 b8	jmp $b871			jmp Literal
=6					CL	.var *-(WordListLink+wh_Xt)
=$cadb					en = *	; remember here
>cad3	06					.byte CL	;wh_CodeLength
>cadb	43 68 61 72 2b			L1:	.text "Char+"	;  name of word as a string, ending at wh_NameLastChar
>cae0	65					.byte (("Char+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cae1	50 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cae3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cae4	08					.byte NN	;wh_Flags	dictionary flags
=51808					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cae5	4c 65 cb	jmp $cb65	Char_Plus:	jmp One_Plus
=3					CL	.var *-(WordListLink+wh_Xt)
=$cae8					en = *	; remember here
>cae3	03					.byte CL	;wh_CodeLength
>cae8	43 68 61 72 73			L1:	.text "Chars"	;  name of word as a string, ending at wh_NameLastChar
>caed	65					.byte (("Chars"[-1]&7)<<5)+(*-L1)	;wh_HNL
>caee	60 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>caf0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>caf1	02					.byte AN	;wh_Flags	dictionary flags
=51821					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.caf2					Chars:
=0					CL	.var *-(WordListLink+wh_Xt)
=$caf2					en = *	; remember here
>caf0	00					.byte CL	;wh_CodeLength
.caf2	60		rts				rts
>caf3	43 65 6c 6c 73			L1:	.text "Cells"	;  name of word as a string, ending at wh_NameLastChar
>caf8	65					.byte (("Cells"[-1]&7)<<5)+(*-L1)	;wh_HNL
>caf9	6d ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cafb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cafc	10					.byte UF	;wh_Flags	dictionary flags
=51832					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cafd	20 0d b5	jsr $b50d	Cells:		jsr underflow_1
.cb00	16 24		asl $24,x			asl DStack+0,x		; 2*
.cb02	36 25		rol $25,x			rol DStack+1,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$cb04					en = *	; remember here
>cafb	07					.byte CL	;wh_CodeLength
.cb04	60		rts				rts
>cb05	43 65 6c 6c 2b			L1:	.text "Cell+"	;  name of word as a string, ending at wh_NameLastChar
>cb0a	65					.byte (("Cell+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb0b	78 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb0d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb0e	10					.byte UF	;wh_Flags	dictionary flags
=51850					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb0f	20 0d b5	jsr $b50d	Cell_Plus:	jsr underflow_1
.cb12	a9 02		lda #$02	Cell_Plus_NoUf:	lda #2		; our cells are 2 bytes
.cb14					Plus_A:
.cb14	18		clc				clc
.cb15	75 24		adc $24,x			adc DStack+0,x
.cb17	95 24		sta $24,x			sta DStack+0,x
.cb19	90 02		bcc $cb1d			bcc +
.cb1b	f6 25		inc $25,x			inc DStack+1,x
.cb1d					+
=14					CL	.var *-(WordListLink+wh_Xt)
=$cb1d					en = *	; remember here
>cb0d	0e					.byte CL	;wh_CodeLength
.cb1d	60		rts				rts
.cb1e					Nos_Plus_A:
.cb1e	18		clc				clc
.cb1f	75 26		adc $26,x			adc DStack+2,x
.cb21	95 26		sta $26,x			sta DStack+2,x
.cb23	90 02		bcc $cb27			bcc +
.cb25	f6 27		inc $27,x			inc DStack+3,x
.cb27	60		rts		+		rts
>cb28	48 65 72 65			L1:	.text "Here"	;  name of word as a string, ending at wh_NameLastChar
>cb2c	a4					.byte (("Here"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb2d	8a ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb2f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb30	08					.byte NN	;wh_Flags	dictionary flags
=51884					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb31	a5 00		lda $00		Here:		lda cp+0
.cb33	a4 01		ldy $01				ldy cp+1
.cb35	4c be b8	jmp $b8be			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$cb38					en = *	; remember here
>cb2f	07					.byte CL	;wh_CodeLength
>cb38	31 2d				L1:	.text "1-"	;  name of word as a string, ending at wh_NameLastChar
>cb3a	a2					.byte (("1-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb3b	ac ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb3d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb3e	10					.byte UF	;wh_Flags	dictionary flags
=51898					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb3f	20 0d b5	jsr $b50d	One_Minus:	jsr underflow_1
.cb42					One_Minus_NoUf:
.cb42	b5 24		lda $24,x			lda DStack+0,x
.cb44	d0 02		bne $cb48			bne +
.cb46	d6 25		dec $25,x			dec DStack+1,x
.cb48	d6 24		dec $24,x	+		dec DStack+0,x
=11					CL	.var *-(WordListLink+wh_Xt)
=$cb4a					en = *	; remember here
>cb3d	0b					.byte CL	;wh_CodeLength
.cb4a	60		rts				rts
.cb4b					NOS_One_Minus:
.cb4b	b5 26		lda $26,x			lda DStack+2,x
.cb4d	d0 02		bne $cb51			bne +
.cb4f	d6 27		dec $27,x			dec DStack+3,x
.cb51	d6 26		dec $26,x	+		dec DStack+2,x
.cb53	60		rts				rts
.cb54					Minus_A:
.cb54	18		clc				clc
.cb55	75 24		adc $24,x			adc DStack+0,x
.cb57	95 24		sta $24,x			sta DStack+0,x
.cb59	b0 02		bcs $cb5d			bcs +
.cb5b	d6 25		dec $25,x			dec DStack+1,x
.cb5d	60		rts		+		rts
>cb5e	31 2b				L1:	.text "1+"	;  name of word as a string, ending at wh_NameLastChar
>cb60	62					.byte (("1+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb61	ba ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb63	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb64	10					.byte UF	;wh_Flags	dictionary flags
=51936					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb65	20 0d b5	jsr $b50d	One_Plus:	jsr underflow_1
.cb68	f6 24		inc $24,x			inc DStack+0,x
.cb6a	d0 02		bne $cb6e			bne +
.cb6c	f6 25		inc $25,x			inc DStack+1,x
.cb6e					+
=9					CL	.var *-(WordListLink+wh_Xt)
=$cb6e					en = *	; remember here
>cb63	09					.byte CL	;wh_CodeLength
.cb6e	60		rts				rts
.cb6f					NOS_One_Plus:
.cb6f	f6 26		inc $26,x			inc DStack+2,x
.cb71	d0 02		bne $cb75			bne +
.cb73	f6 27		inc $27,x			inc DStack+3,x
.cb75	60		rts		+		rts
>cb76	55 4d 2b			L1:	.text "UM+"	;  name of word as a string, ending at wh_NameLastChar
>cb79	63					.byte (("UM+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb7a	e0 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb7c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb7d	00					.byte 0	;wh_Flags	dictionary flags
=51961					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb7e	20 e3 b4	jsr $b4e3	UMPlus:		jsr PopYA
.cb81	18		clc				clc		; add n to d1.lo
.cb82	75 26		adc $26,x			adc DStack+2,x
.cb84	95 26		sta $26,x			sta DStack+2,x
.cb86	98		tya				tya
.cb87	75 27		adc $27,x			adc DStack+3,x
.cb89	95 27		sta $27,x			sta DStack+3,x
.cb8b	90 06		bcc $cb93			bcc +		; propagate carry thru d1.hi
.cb8d	f6 24		inc $24,x			inc DStack+0,x
.cb8f	d0 02		bne $cb93			bne +
.cb91	f6 25		inc $25,x			inc DStack+1,x
.cb93					+
=21					CL	.var *-(WordListLink+wh_Xt)
=$cb93					en = *	; remember here
>cb7c	15					.byte CL	;wh_CodeLength
.cb93	60		rts				rts
>cb94	4d 2b				L1:	.text "M+"	;  name of word as a string, ending at wh_NameLastChar
>cb96	62					.byte (("M+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb97	f9 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb99	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb9a	08					.byte NN	;wh_Flags	dictionary flags
=51990					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb9b	20 7e cb	jsr $cb7e	MPlus:		jsr UMPlus
.cb9e	98		tya				tya		; if n negative
.cb9f	30 a1		bmi $cb42			bmi One_Minus_NoUf ;   decrement d1.hi
=6					CL	.var *-(WordListLink+wh_Xt)
=$cba1					en = *	; remember here
>cb99	06					.byte CL	;wh_CodeLength
.cba1	60		rts				rts
>cba2	44 32 2a			L1:	.text "D2*"	;  name of word as a string, ending at wh_NameLastChar
>cba5	43					.byte (("D2*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cba6	16 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cba8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cba9	10					.byte UF	;wh_Flags	dictionary flags
=52005					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbaa	20 22 b5	jsr $b522	D2Star:		jsr underflow_2
.cbad	16 26		asl $26,x			asl DStack+2,x
.cbaf	36 27		rol $27,x			rol DStack+3,x
.cbb1	36 24		rol $24,x			rol DStack+0,x
.cbb3	36 25		rol $25,x			rol DStack+1,x
=11					CL	.var *-(WordListLink+wh_Xt)
=$cbb5					en = *	; remember here
>cba8	0b					.byte CL	;wh_CodeLength
.cbb5	60		rts				rts
>cbb6	44 32 2f			L1:	.text "D2/"	;  name of word as a string, ending at wh_NameLastChar
>cbb9	e3					.byte (("D2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbba	25 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbbc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbbd	10					.byte UF	;wh_Flags	dictionary flags
=52025					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbbe	20 22 b5	jsr $b522	D2Slash:	jsr underflow_2
.cbc1	b5 25		lda $25,x			lda DStack+1,x		; setup for sign-extended shift right
.cbc3	0a		asl a				asl a
.cbc4	76 25		ror $25,x	D2SlashU:	ror DStack+1,x
.cbc6	76 24		ror $24,x			ror DStack+0,x
.cbc8	76 27		ror $27,x			ror DStack+3,x
.cbca	76 26		ror $26,x			ror DStack+2,x
=14					CL	.var *-(WordListLink+wh_Xt)
=$cbcc					en = *	; remember here
>cbbc	0e					.byte CL	;wh_CodeLength
.cbcc	60		rts				rts
>cbcd	55 44 32 2f			L1:	.text "UD2/"	;  name of word as a string, ending at wh_NameLastChar
>cbd1	e4					.byte (("UD2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbd2	39 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbd4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbd5	18					.byte UF+NN	;wh_Flags	dictionary flags
=52049					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbd6	20 22 b5	jsr $b522	DU2Slash:	jsr underflow_2
.cbd9	18		clc				clc
.cbda	90 e8		bcc $cbc4			bcc D2SlashU
=6					CL	.var *-(WordListLink+wh_Xt)
=$cbdc					en = *	; remember here
>cbd4	06					.byte CL	;wh_CodeLength
>cbdc	32 2a				L1:	.text "2*"	;  name of word as a string, ending at wh_NameLastChar
>cbde	42					.byte (("2*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbdf	51 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbe1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbe2	10					.byte UF	;wh_Flags	dictionary flags
=52062					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbe3					Two_Star:
.cbe3	20 0d b5	jsr $b50d			jsr underflow_1
.cbe6	16 24		asl $24,x			asl DStack+0,x
.cbe8	36 25		rol $25,x			rol DStack+1,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$cbea					en = *	; remember here
>cbe1	07					.byte CL	;wh_CodeLength
.cbea	60		rts				rts
>cbeb	32 2f				L1:	.text "2/"	;  name of word as a string, ending at wh_NameLastChar
>cbed	e2					.byte (("2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbee	5e cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbf0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbf1	10					.byte UF	;wh_Flags	dictionary flags
=52077					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbf2					Two_Slash:
.cbf2	20 0d b5	jsr $b50d			jsr underflow_1
.cbf5	b5 25		lda $25,x			lda DStack+1,x		; load sign into carry, for signed shift
.cbf7	0a		asl a				asl
.cbf8	76 25		ror $25,x			ror DStack+1,x
.cbfa	76 24		ror $24,x			ror DStack+0,x
=10					CL	.var *-(WordListLink+wh_Xt)
=$cbfc					en = *	; remember here
>cbf0	0a					.byte CL	;wh_CodeLength
.cbfc	60		rts				rts
>cbfd	55 32 2f			L1:	.text "U2/"	;  name of word as a string, ending at wh_NameLastChar
>cc00	e3					.byte (("U2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc01	6d cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc03	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc04	10					.byte UF	;wh_Flags	dictionary flags
=52096					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc05					UTwo_Slash:
.cc05	20 0d b5	jsr $b50d			jsr underflow_1
.cc08	56 25		lsr $25,x			lsr DStack+1,x
.cc0a	76 24		ror $24,x			ror DStack+0,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$cc0c					en = *	; remember here
>cc03	07					.byte CL	;wh_CodeLength
.cc0c	60		rts				rts
>cc0d	44 52 53 68 69 66 74		L1:	.text "DRShift"	;  name of word as a string, ending at wh_NameLastChar
>cc14	87					.byte (("DRShift"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc15	80 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc17	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc18	00					.byte 0	;wh_Flags	dictionary flags
=52116					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc19	20 c7 b4	jsr $b4c7	DRShift:	jsr PopA	; pop u
.cc1c	a8		tay		DRShiftA:	tay
.cc1d	f0 0e		beq $cc2d			beq _9
.cc1f	b5 25		lda $25,x			lda DStack+1,x
.cc21	4a		lsr a		_2:		lsr a
.cc22	76 24		ror $24,x			ror DStack+0,x
.cc24	76 27		ror $27,x			ror DStack+3,x
.cc26	76 26		ror $26,x			ror DStack+2,x
.cc28	88		dey				dey
.cc29	d0 f6		bne $cc21			bne _2
.cc2b	95 25		sta $25,x			sta DStack+1,x
.cc2d					_9:
=20					CL	.var *-(WordListLink+wh_Xt)
=$cc2d					en = *	; remember here
>cc17	14					.byte CL	;wh_CodeLength
.cc2d	60		rts				rts
>cc2e	52 53 68 69 66 74		L1:	.text "RShift"	;  name of word as a string, ending at wh_NameLastChar
>cc34	86					.byte (("RShift"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc35	94 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc37	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc38	00					.byte 0	;wh_Flags	dictionary flags
=52148					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc39	20 d0 b4	jsr $b4d0	RShift:		jsr PopA2	; pop u, check for 2 params
.cc3c	a8		tay		RShift_A:	tay		; get shift count
.cc3d	f0 0a		beq $cc49			beq _done
.cc3f	b5 25		lda $25,x			lda DStack+1,x
.cc41	4a		lsr a		_loop:		lsr a
.cc42	76 24		ror $24,x			ror DStack+0,x
.cc44	88		dey				dey
.cc45	d0 fa		bne $cc41			bne _loop
.cc47	95 25		sta $25,x			sta DStack+1,x
.cc49					_done:
=16					CL	.var *-(WordListLink+wh_Xt)
=$cc49					en = *	; remember here
>cc37	10					.byte CL	;wh_CodeLength
.cc49	60		rts				rts
>cc4a	4c 53 68 69 66 74		L1:	.text "LShift"	;  name of word as a string, ending at wh_NameLastChar
>cc50	86					.byte (("LShift"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc51	b4 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc53	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc54	00					.byte 0	;wh_Flags	dictionary flags
=52176					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc55	20 d0 b4	jsr $b4d0	LShift:		jsr PopA2	; pop u, check for 2 params
.cc58	a8		tay		LShift_A:	tay		; get shift count
.cc59	f0 0a		beq $cc65			beq _done
.cc5b	b5 25		lda $25,x			lda DStack+1,x
.cc5d	16 24		asl $24,x	_loop:		asl DStack+0,x
.cc5f	2a		rol a				rol a
.cc60	88		dey				dey
.cc61	d0 fa		bne $cc5d			bne _loop
.cc63	95 25		sta $25,x			sta DStack+1,x
.cc65					_done:
=16					CL	.var *-(WordListLink+wh_Xt)
=$cc65					en = *	; remember here
>cc53	10					.byte CL	;wh_CodeLength
.cc65	60		rts				rts
>cc66	41 6e 64			L1:	.text "And"	;  name of word as a string, ending at wh_NameLastChar
>cc69	83					.byte (("And"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc6a	d0 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc6c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc6d	10					.byte UF	;wh_Flags	dictionary flags
=52201					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc6e					And2:
.cc6e	20 22 b5	jsr $b522			jsr underflow_2
.cc71	b5 24		lda $24,x			lda DStack+0,x
.cc73	35 26		and $26,x			and DStack+2,x
.cc75	95 26		sta $26,x			sta DStack+2,x
.cc77	b5 25		lda $25,x			lda DStack+1,x
.cc79	35 27		and $27,x			and DStack+3,x
.cc7b	95 27		sta $27,x			sta DStack+3,x
.cc7d	e8		inx				inx		; Drop n2
.cc7e	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$cc7f					en = *	; remember here
>cc6c	11					.byte CL	;wh_CodeLength
.cc7f	60		rts				rts
>cc80	4f 72				L1:	.text "Or"	;  name of word as a string, ending at wh_NameLastChar
>cc82	42					.byte (("Or"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc83	e9 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc85	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc86	10					.byte UF	;wh_Flags	dictionary flags
=52226					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc87					Or:
.cc87	20 22 b5	jsr $b522			jsr underflow_2
.cc8a	b5 24		lda $24,x			lda DStack+0,x
.cc8c	15 26		ora $26,x			ora DStack+2,x
.cc8e	95 26		sta $26,x			sta DStack+2,x
.cc90	b5 25		lda $25,x			lda DStack+1,x
.cc92	15 27		ora $27,x			ora DStack+3,x
.cc94	95 27		sta $27,x			sta DStack+3,x
.cc96	e8		inx				inx		; Drop n2
.cc97	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$cc98					en = *	; remember here
>cc85	11					.byte CL	;wh_CodeLength
.cc98	60		rts				rts
>cc99	58 6f 72			L1:	.text "Xor"	;  name of word as a string, ending at wh_NameLastChar
>cc9c	43					.byte (("Xor"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc9d	02 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc9f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cca0	10					.byte UF	;wh_Flags	dictionary flags
=52252					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cca1					Xor:
.cca1	20 22 b5	jsr $b522			jsr underflow_2
.cca4	b5 24		lda $24,x			lda DStack+0,x
.cca6	55 26		eor $26,x			eor DStack+2,x
.cca8	95 26		sta $26,x			sta DStack+2,x
.ccaa	b5 25		lda $25,x			lda DStack+1,x
.ccac	55 27		eor $27,x			eor DStack+3,x
.ccae	95 27		sta $27,x			sta DStack+3,x
.ccb0	e8		inx				inx		; Drop n2
.ccb1	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$ccb2					en = *	; remember here
>cc9f	11					.byte CL	;wh_CodeLength
.ccb2	60		rts				rts
>ccb3	2b				L1:	.text "+"	;  name of word as a string, ending at wh_NameLastChar
>ccb4	61					.byte (("+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ccb5	1c cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccb7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccb8	10					.byte UF	;wh_Flags	dictionary flags
=52276					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccb9					Plus:
.ccb9	20 22 b5	jsr $b522			jsr underflow_2
.ccbc	18		clc				clc
.ccbd	b5 24		lda $24,x			lda DStack+0,x		; LSB
.ccbf	75 26		adc $26,x			adc DStack+2,x
.ccc1	95 26		sta $26,x			sta DStack+2,x
.ccc3	b5 25		lda $25,x			lda DStack+1,x		; MSB. No CLC, conserve carry bit
.ccc5	75 27		adc $27,x			adc DStack+3,x
.ccc7	95 27		sta $27,x			sta DStack+3,x
.ccc9	e8		inx				inx
.ccca	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$cccb					en = *	; remember here
>ccb7	12					.byte CL	;wh_CodeLength
.cccb	60		rts				rts
>cccc	2d				L1:	.text "-"	;  name of word as a string, ending at wh_NameLastChar
>cccd	a1					.byte (("-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ccce	34 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccd0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccd1	10					.byte UF	;wh_Flags	dictionary flags
=52301					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccd2					Minus:
.ccd2	20 22 b5	jsr $b522			jsr underflow_2
.ccd5	38		sec				sec
.ccd6	b5 26		lda $26,x			lda DStack+2,x	; LSB
.ccd8	f5 24		sbc $24,x			sbc DStack+0,x
.ccda	95 26		sta $26,x			sta DStack+2,x
.ccdc	b5 27		lda $27,x			lda DStack+3,x	; MSB
.ccde	f5 25		sbc $25,x			sbc DStack+1,x
.cce0	95 27		sta $27,x			sta DStack+3,x
.cce2	e8		inx				inx		; Drop n2
.cce3	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$cce4					en = *	; remember here
>ccd0	12					.byte CL	;wh_CodeLength
.cce4	60		rts				rts
>cce5	2e				L1:	.text "."	;  name of word as a string, ending at wh_NameLastChar
>cce6	c1					.byte (("."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cce7	4d cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cce9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccea	08					.byte NN	;wh_Flags	dictionary flags
=52326					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cceb	b5 25		lda $25,x	Dot:		lda DStack+1,x		; ( n )	save sign
.cced	08		php				php
.ccee	20 a2 c7	jsr $c7a2			jsr Abs			; ( u )
.ccf1	20 ff b8	jsr $b8ff			jsr Zero		; ( ud )	u>d  cvt u to ud
.ccf4	4c 04 cd	jmp $cd04			jmp fmt_d3
=12					CL	.var *-(WordListLink+wh_Xt)
=$ccf7					en = *	; remember here
>cce9	0c					.byte CL	;wh_CodeLength
>ccf7	44 2e				L1:	.text "D."	;  name of word as a string, ending at wh_NameLastChar
>ccf9	c2					.byte (("D."[-1]&7)<<5)+(*-L1)	;wh_HNL
>ccfa	66 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccfc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccfd	08					.byte NN	;wh_Flags	dictionary flags
=52345					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccfe	b5 25		lda $25,x	D_Dot:		lda DStack+1,x		; save sign
.cd00	08		php				php
.cd01	20 d7 c7	jsr $c7d7			jsr DAbs
.cd04	20 a5 ac	jsr $aca5	fmt_d3:		jsr Less_Number_Sign	; ( ud )	start formatting
.cd07	20 18 ad	jsr $ad18			jsr Number_sign_s	; ( ud )	do all digits
.cd0a	28		plp				plp			; ( ud )	do sign
.cd0b	20 33 ad	jsr $ad33			jsr Sign_P		; ( ud )
.cd0e	20 b2 ac	jsr $acb2			jsr Number_sign_greater	; ( addr u )	end formatting
.cd11	20 0d cf	jsr $cf0d			jsr Type
.cd14	4c 00 cf	jmp $cf00			jmp Space
=25					CL	.var *-(WordListLink+wh_Xt)
=$cd17					en = *	; remember here
>ccfc	19					.byte CL	;wh_CodeLength
>cd17	55 2e				L1:	.text "U."	;  name of word as a string, ending at wh_NameLastChar
>cd19	c2					.byte (("U."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd1a	79 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd1c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd1d	18					.byte UF+NN	;wh_Flags	dictionary flags
=52377					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd1e	20 0d b5	jsr $b50d	U_Dot:		jsr underflow_1
.cd21	20 38 cd	jsr $cd38			jsr print_u
.cd24	4c 00 cf	jmp $cf00			jmp Space
=9					CL	.var *-(WordListLink+wh_Xt)
=$cd27					en = *	; remember here
>cd1c	09					.byte CL	;wh_CodeLength
>cd27	55 44 2e			L1:	.text "UD."	;  name of word as a string, ending at wh_NameLastChar
>cd2a	c3					.byte (("UD."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd2b	99 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd2d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd2e	18					.byte UF+NN	;wh_Flags	dictionary flags
=52394					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd2f	20 22 b5	jsr $b522	UD_Dot:		jsr underflow_2 ; double number
.cd32	20 3b cd	jsr $cd3b			jsr print_ud
.cd35	4c 00 cf	jmp $cf00			jmp Space
=9					CL	.var *-(WordListLink+wh_Xt)
=$cd38					en = *	; remember here
>cd2d	09					.byte CL	;wh_CodeLength
.cd38					print_u:
.cd38	20 ff b8	jsr $b8ff			jsr Zero			; convert to ud
.cd3b					print_ud:
.cd3b	20 a5 ac	jsr $aca5			jsr Less_Number_Sign		; <#	start formatting
.cd3e	20 18 ad	jsr $ad18			jsr Number_sign_s		; #S	do all digits
.cd41	20 b2 ac	jsr $acb2			jsr Number_sign_greater		; #>	end formatting
.cd44	4c 0d cf	jmp $cf0d			jmp Type
>cd47	55 2e 52			L1:	.text "U.R"	;  name of word as a string, ending at wh_NameLastChar
>cd4a	43					.byte (("U.R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd4b	aa cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd4d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd4e	08					.byte NN	;wh_Flags	dictionary flags
=52426					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd4f	20 c7 b4	jsr $b4c7	U_Dot_R:	jsr PopA		; save field width
.cd52	48		pha		U_Dot_R_A:	pha
.cd53	20 ff b8	jsr $b8ff			jsr Zero		; u>d  cvt u to ud
.cd56	4c 66 cd	jmp $cd66			jmp fmt_udr3
=10					CL	.var *-(WordListLink+wh_Xt)
=$cd59					en = *	; remember here
>cd4d	0a					.byte CL	;wh_CodeLength
>cd59	55 44 2e 52			L1:	.text "UD.R"	;  name of word as a string, ending at wh_NameLastChar
>cd5d	44					.byte (("UD.R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd5e	ca cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd60	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd61	08					.byte NN	;wh_Flags	dictionary flags
=52445					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd62	20 c7 b4	jsr $b4c7	UD_Dot_R:	jsr PopA			; save field width
.cd65	48		pha		UD_Dot_R_A:	pha
.cd66	20 a5 ac	jsr $aca5	fmt_udr3:	jsr Less_Number_Sign		; start formatted
.cd69	20 18 ad	jsr $ad18			jsr Number_sign_s		; do all digits
.cd6c	20 b2 ac	jsr $acb2	fmt_r:		jsr Number_sign_greater		; finish formatted
.cd6f	68		pla				pla				; recover field width
.cd70	38		sec				sec				; do leading spaces
.cd71	f5 24		sbc $24,x			sbc DStack+0,x
.cd73	90 06		bcc $cd7b			bcc +
.cd75	20 f0 b8	jsr $b8f0			jsr PushZA
.cd78	20 63 c5	jsr $c563			jsr Spaces
.cd7b	4c 0d cf	jmp $cf0d	+		jmp Type			; type formatted
=28					CL	.var *-(WordListLink+wh_Xt)
=$cd7e					en = *	; remember here
>cd60	1c					.byte CL	;wh_CodeLength
>cd7e	2e 52				L1:	.text ".R"	;  name of word as a string, ending at wh_NameLastChar
>cd80	42					.byte ((".R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd81	dd cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd83	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd84	08					.byte NN	;wh_Flags	dictionary flags
=52480					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd85	20 c7 b4	jsr $b4c7	Dot_R:		jsr PopA		; save field width
.cd88	48		pha		Dot_R_A:	pha
.cd89	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cd8b	08		php				php
.cd8c	20 a2 c7	jsr $c7a2			jsr Abs
.cd8f	20 ff b8	jsr $b8ff			jsr Zero		; u>d  cvt u to ud
.cd92	4c a7 cd	jmp $cda7			jmp fmt_dr3
=16					CL	.var *-(WordListLink+wh_Xt)
=$cd95					en = *	; remember here
>cd83	10					.byte CL	;wh_CodeLength
>cd95	44 2e 52			L1:	.text "D.R"	;  name of word as a string, ending at wh_NameLastChar
>cd98	43					.byte (("D.R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd99	00 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd9b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd9c	08					.byte NN	;wh_Flags	dictionary flags
=52504					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd9d	20 c7 b4	jsr $b4c7	D_Dot_R:	jsr PopA		; save field width
.cda0	48		pha		D_Dot_R_A:	pha
.cda1	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cda3	08		php				php
.cda4	20 d7 c7	jsr $c7d7			jsr DAbs
.cda7	20 a5 ac	jsr $aca5	fmt_dr3:	jsr Less_Number_Sign	; start formatted output
.cdaa	20 18 ad	jsr $ad18			jsr Number_sign_s	; do all digits
.cdad	28		plp				plp			; do the sign
.cdae	20 33 ad	jsr $ad33			jsr Sign_P
.cdb1	4c 6c cd	jmp $cd6c			jmp fmt_r
=23					CL	.var *-(WordListLink+wh_Xt)
=$cdb4					en = *	; remember here
>cd9b	17					.byte CL	;wh_CodeLength
>cdb4	3f				L1:	.text "?"	;  name of word as a string, ending at wh_NameLastChar
>cdb5	e1					.byte (("?"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cdb6	18 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cdb8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdb9	08					.byte NN	;wh_Flags	dictionary flags
=52533					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdba					Question:
.cdba	20 ef cf	jsr $cfef			jsr Fetch
.cdbd	4c eb cc	jmp $cceb			jmp Dot
=6					CL	.var *-(WordListLink+wh_Xt)
=$cdc0					en = *	; remember here
>cdb8	06					.byte CL	;wh_CodeLength
>cdc0	32 44 75 70			L1:	.text "2Dup"	;  name of word as a string, ending at wh_NameLastChar
>cdc4	04					.byte (("2Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cdc5	35 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cdc7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdc8	10					.byte UF	;wh_Flags	dictionary flags
=52548					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdc9					Two_Dup:
.cdc9	20 22 b5	jsr $b522			jsr underflow_2
.cdcc	ca		dex				dex
.cdcd	ca		dex				dex
.cdce	ca		dex				dex
.cdcf	ca		dex				dex
.cdd0	b5 28		lda $28,x			lda DStack+4,x	; TOS
.cdd2	95 24		sta $24,x			sta DStack+0,x
.cdd4	b5 29		lda $29,x			lda DStack+5,x
.cdd6	95 25		sta $25,x			sta DStack+1,x
.cdd8	b5 2a		lda $2a,x			lda DStack+6,x	; NOS
.cdda	95 26		sta $26,x			sta DStack+2,x
.cddc	b5 2b		lda $2b,x			lda DStack+7,x
.cdde	95 27		sta $27,x			sta DStack+3,x
=23					CL	.var *-(WordListLink+wh_Xt)
=$cde0					en = *	; remember here
>cdc7	17					.byte CL	;wh_CodeLength
.cde0	60		rts				rts
>cde1	54 75 63 6b			L1:	.text "Tuck"	;  name of word as a string, ending at wh_NameLastChar
>cde5	64					.byte (("Tuck"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cde6	44 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cde8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cde9	10					.byte UF	;wh_Flags	dictionary flags
=52581					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdea					Tuck:
.cdea	20 22 b5	jsr $b522			jsr underflow_2
.cded	ca		dex				dex
.cdee	ca		dex				dex
.cdef	b4 28		ldy $28,x			ldy DStack+4,x	; LSB
.cdf1	b5 26		lda $26,x			lda DStack+2,x
.cdf3	95 28		sta $28,x			sta DStack+4,x
.cdf5	94 26		sty $26,x			sty DStack+2,x
.cdf7	95 24		sta $24,x			sta DStack+0,x
.cdf9	b4 29		ldy $29,x			ldy DStack+5,x	; MSB
.cdfb	b5 27		lda $27,x			lda DStack+3,x
.cdfd	95 29		sta $29,x			sta DStack+5,x
.cdff	94 27		sty $27,x			sty DStack+3,x
.ce01	95 25		sta $25,x			sta DStack+1,x
=25					CL	.var *-(WordListLink+wh_Xt)
=$ce03					en = *	; remember here
>cde8	19					.byte CL	;wh_CodeLength
.ce03	60		rts				rts
>ce04	43 2c				L1:	.text "C,"	;  name of word as a string, ending at wh_NameLastChar
>ce06	82					.byte (("C,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce07	65 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce09	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce0a	08					.byte NN	;wh_Flags	dictionary flags
=52614					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce0b	20 c7 b4	jsr $b4c7	C_Comma:	jsr PopA	; pop c, with underflow check
.ce0e					C_Comma_A:
.ce0e	ca		dex				dex
.ce0f	94 24		sty $24,x			sty DStack+0,x	; save Y
.ce11	a0 00		ldy #$00			ldy #0		; store A
.ce13	91 00		sta ($00),y			sta (cp),y
.ce15	e6 00		inc $00				inc cp+0	; increment cp
.ce17	d0 02		bne $ce1b			bne +
.ce19	e6 01		inc $01				inc cp+1
.ce1b					+
.ce1b	b4 24		ldy $24,x			ldy DStack+0,x	; restore Y
.ce1d	e8		inx				inx
=19					CL	.var *-(WordListLink+wh_Xt)
=$ce1e					en = *	; remember here
>ce09	13					.byte CL	;wh_CodeLength
.ce1e	60		rts				rts
>ce1f	2c				L1:	.text ","	;  name of word as a string, ending at wh_NameLastChar
>ce20	81					.byte ((","[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce21	86 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce23	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce24	08					.byte NN	;wh_Flags	dictionary flags
=52640					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce25	20 e3 b4	jsr $b4e3	Comma:		jsr PopYA	; pop n, with underflow check
.ce28					Comma_YA:
.ce28	20 0e ce	jsr $ce0e			jsr C_Comma_A	; compile LSB
.ce2b	98		tya				tya		; compile MSB
.ce2c	4c 0e ce	jmp $ce0e			jmp C_Comma_A
=10					CL	.var *-(WordListLink+wh_Xt)
=$ce2f					en = *	; remember here
>ce23	0a					.byte CL	;wh_CodeLength
>ce2f	32 2c				L1:	.text "2,"	;  name of word as a string, ending at wh_NameLastChar
>ce31	82					.byte (("2,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce32	a0 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce34	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce35	08					.byte NN	;wh_Flags	dictionary flags
=52657					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce36	20 25 ce	jsr $ce25	Two_Comma:	jsr Comma
.ce39	4c 25 ce	jmp $ce25			jmp Comma
=6					CL	.var *-(WordListLink+wh_Xt)
=$ce3c					en = *	; remember here
>ce34	06					.byte CL	;wh_CodeLength
.ce3c	a9 e8		lda #$e8	Drop_Comma:	lda #$e8	;inx
.ce3e	a8		tay				tay
.ce3f	d0 e7		bne $ce28			bne Comma_YA
>ce41	4a 73 72 2c			L1:	.text "Jsr,"	;  name of word as a string, ending at wh_NameLastChar
>ce45	84					.byte (("Jsr,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce46	b1 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce48	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce49	08					.byte NN	;wh_Flags	dictionary flags
=52677					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce4a	20 e3 b4	jsr $b4e3	Jsr_Comma:	jsr PopYA	; pop addr (optimize can skip)
.ce4d	20 be b8	jsr $b8be	Jsr_Comma_YA:	jsr PushYA	; push addr
.ce50	a9 20		lda #$20			lda #$20	; JSR abs opcode
.ce52	20 0e ce	jsr $ce0e	Jsr_Comma_3:	jsr C_Comma_A
.ce55	4c 25 ce	jmp $ce25			jmp Comma	; compile addr
=14					CL	.var *-(WordListLink+wh_Xt)
=$ce58					en = *	; remember here
>ce48	0e					.byte CL	;wh_CodeLength
>ce58	4a 6d 70 2c			L1:	.text "Jmp,"	;  name of word as a string, ending at wh_NameLastChar
>ce5c	84					.byte (("Jmp,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce5d	c5 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce5f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce60	08					.byte NN	;wh_Flags	dictionary flags
=52700					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce61	20 e3 b4	jsr $b4e3	Jmp_Comma:	jsr PopYA	; pop addr (optimize can skip)
.ce64	20 be b8	jsr $b8be	Jmp_Comma_YA:	jsr PushYA	; push addr
.ce67	a9 4c		lda #$4c			lda #$4c	; JMP abs opcode
.ce69	d0 e7		bne $ce52			bne Jsr_Comma_3
.ce6b					Jmp_Comma_NT_YA:
.ce6b	20 be b8	jsr $b8be			jsr PushYA
.ce6e	20 e8 be	jsr $bee8			jsr Name_To_Int	; convert nt to xt
.ce71	4c 61 ce	jmp $ce61			jmp Jmp_Comma
=19					CL	.var *-(WordListLink+wh_Xt)
=$ce74					en = *	; remember here
>ce5f	13					.byte CL	;wh_CodeLength
>ce74	43 40				L1:	.text "C@"	;  name of word as a string, ending at wh_NameLastChar
>ce76	02					.byte (("C@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce77	dc cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce79	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce7a	10					.byte UF	;wh_Flags	dictionary flags
=52726					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce7b	20 0d b5	jsr $b50d	C_Fetch:	jsr underflow_1
.ce7e	a1 24		lda ($24,x)			lda (DStack+0,x)
.ce80	95 24		sta $24,x			sta DStack+0,x
.ce82	a9 00		lda #$00			lda #0
.ce84	95 25		sta $25,x			sta DStack+1,x	; zero MSB
=11					CL	.var *-(WordListLink+wh_Xt)
=$ce86					en = *	; remember here
>ce79	0b					.byte CL	;wh_CodeLength
.ce86	60		rts				rts
>ce87	43 21				L1:	.text "C!"	;  name of word as a string, ending at wh_NameLastChar
>ce89	22					.byte (("C!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce8a	f6 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce8c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce8d	10					.byte UF	;wh_Flags	dictionary flags
=52745					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce8e	20 22 b5	jsr $b522	C_Store:	jsr underflow_2
.ce91	b5 26		lda $26,x			lda DStack+2,x
.ce93	81 24		sta ($24,x)			sta (DStack+0,x)
.ce95	e8		inx				inx
.ce96	e8		inx				inx
.ce97	e8		inx				inx
.ce98	e8		inx				inx
=11					CL	.var *-(WordListLink+wh_Xt)
=$ce99					en = *	; remember here
>ce8c	0b					.byte CL	;wh_CodeLength
.ce99	60		rts				rts
>ce9a	31 2b 21			L1:	.text "1+!"	;  name of word as a string, ending at wh_NameLastChar
>ce9d	23					.byte (("1+!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce9e	09 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cea0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cea1	00					.byte 0	;wh_Flags	dictionary flags
=52765					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cea2					OnePlusStore:
.cea2	a9 01		lda #$01			lda #1
.cea4	18		clc				clc
.cea5	61 24		adc ($24,x)			adc (DStack+0,x)	; increment lo byte
.cea7	81 24		sta ($24,x)			sta (DStack+0,x)
.cea9	90 0c		bcc $ceb7			bcc _7			; if carry
.ceab	f6 24		inc $24,x			inc DStack+0,x		;   point at hi byte
.cead	d0 02		bne $ceb1			bne +
.ceaf	f6 25		inc $25,x			inc DStack+1,x
.ceb1					+
.ceb1	a1 24		lda ($24,x)			lda (DStack+0,x)	;   increment hi byte
.ceb3	69 00		adc #$00			adc #0
.ceb5	81 24		sta ($24,x)			sta (Dstack+0,x)
.ceb7					_7:
.ceb7	e8		inx				inx			; Drop addr
.ceb8	e8		inx				inx
=23					CL	.var *-(WordListLink+wh_Xt)
=$ceb9					en = *	; remember here
>cea0	17					.byte CL	;wh_CodeLength
.ceb9	60		rts				rts
>ceba	2b 21				L1:	.text "+!"	;  name of word as a string, ending at wh_NameLastChar
>cebc	22					.byte (("+!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cebd	1d ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cebf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cec0	18					.byte UF+NN	;wh_Flags	dictionary flags
=52796					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cec1					Plus_store:
.cec1	20 22 b5	jsr $b522			jsr underflow_2
.cec4	18		clc				clc
.cec5	b5 26		lda $26,x			lda DStack+2,x
.cec7	61 24		adc ($24,x)			adc (DStack+0,x)
.cec9	81 24		sta ($24,x)			sta (DStack+0,x)
.cecb	f6 24		inc $24,x			inc DStack+0,x
.cecd	d0 02		bne $ced1			bne +
.cecf	f6 25		inc $25,x			inc DStack+1,x
.ced1					+
.ced1	b5 27		lda $27,x			lda DStack+3,x
.ced3	61 24		adc ($24,x)			adc (DStack+0,x)
.ced5	81 24		sta ($24,x)			sta (DStack+0,x)
.ced7	4c 0a c6	jmp $c60a			jmp Two_Drop
=25					CL	.var *-(WordListLink+wh_Xt)
=$ceda					en = *	; remember here
>cebf	19					.byte CL	;wh_CodeLength
>ceda	42 65 6c 6c			L1:	.text "Bell"	;  name of word as a string, ending at wh_NameLastChar
>cede	84					.byte (("Bell"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cedf	3c ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cee1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cee2	08					.byte NN	;wh_Flags	dictionary flags
=52830					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cee3	a9 07		lda #$07	Bell:		lda #7		; ASCII value for BELL
.cee5	d0 0c		bne $cef3			bne Emit_A
=4					CL	.var *-(WordListLink+wh_Xt)
=$cee7					en = *	; remember here
>cee1	04					.byte CL	;wh_CodeLength
>cee7	45 6d 69 74			L1:	.text "Emit"	;  name of word as a string, ending at wh_NameLastChar
>ceeb	84					.byte (("Emit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ceec	5e ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ceee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ceef	08					.byte NN	;wh_Flags	dictionary flags
=52843					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cef0	20 c7 b4	jsr $b4c7	Emit:		jsr PopA		; pop char, with underflow check
.cef3					Emit_A:
.cef3	6c 06 03	jmp ($0306)			jmp (output)		; JSR/RTS
=6					CL	.var *-(WordListLink+wh_Xt)
=$cef6					en = *	; remember here
>ceee	06					.byte CL	;wh_CodeLength
>cef6	53 70 61 63 65			L1:	.text "Space"	;  name of word as a string, ending at wh_NameLastChar
>cefb	a5					.byte (("Space"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cefc	6b ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cefe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ceff	08					.byte NN	;wh_Flags	dictionary flags
=52859					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf00	a9 20		lda #$20	Space:		lda #AscSP
.cf02	d0 ef		bne $cef3			bne Emit_A
=4					CL	.var *-(WordListLink+wh_Xt)
=$cf04					en = *	; remember here
>cefe	04					.byte CL	;wh_CodeLength
>cf04	54 79 70 65			L1:	.text "Type"	;  name of word as a string, ending at wh_NameLastChar
>cf08	a4					.byte (("Type"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf09	7b ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf0b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf0c	18					.byte UF+NN	;wh_Flags	dictionary flags
=52872					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf0d					Type:
.cf0d	20 22 b5	jsr $b522			jsr underflow_2
.cf10	4c 1d cf	jmp $cf1d			jmp _test
.cf13					_loop:
.cf13	d6 24		dec $24,x			dec DStack+0,x		; finish length decrement
.cf15	a1 26		lda ($26,x)			lda (DStack+2,x)	; Send the current character
.cf17	20 f3 ce	jsr $cef3			jsr Emit_A
.cf1a	20 6f cb	jsr $cb6f			jsr NOS_One_Plus	; increment address
.cf1d	b5 24		lda $24,x	_test:		lda DStack+0,x		; decrement length & test for <0
.cf1f	d0 f2		bne $cf13			bne _loop
.cf21	d6 25		dec $25,x			dec DStack+1,x
.cf23	10 ee		bpl $cf13			bpl _loop
.cf25	4c 0a c6	jmp $c60a			jmp Two_drop
=27					CL	.var *-(WordListLink+wh_Xt)
=$cf28					en = *	; remember here
>cf0b	1b					.byte CL	;wh_CodeLength
.cf28					Print_ASCIIZ_YA_no_lf:
.cf28	85 18		sta $18				sta tmp3+0		; save string address
.cf2a	84 19		sty $19				sty tmp3+1
.cf2c	a0 00		ldy #$00			ldy #0
.cf2e					Print_ASCIIZ_tmp3_no_lf:
.cf2e	b1 18		lda ($18),y			lda (tmp3),y
.cf30	f0 06		beq $cf38			beq _done		; end of string?
.cf32	20 f3 ce	jsr $cef3			jsr emit_a
.cf35	c8		iny				iny
.cf36	d0 f6		bne $cf2e			bne Print_ASCIIZ_tmp3_no_lf
.cf38					_done:
.cf38	60		rts				rts
.cf39					Print_ASCIIZ_YA:
.cf39	20 28 cf	jsr $cf28			jsr Print_ASCIIZ_YA_no_lf
.cf3c	4c 28 ac	jmp $ac28	                jmp CR
>cf3f	45 78 65 63 75 74 65		L1:	.text "Execute"	;  name of word as a string, ending at wh_NameLastChar
>cf46	a7					.byte (("Execute"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf47	88 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf49	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf4a	08					.byte NN	;wh_Flags	dictionary flags
=52934					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf4b					Execute:
.cf4b	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.cf4d	b0 2f		bcs $cf7e		bcs Throw_Stack_03
.cf4f	b5 25		lda $25,x			lda DStack+1,x	; addr for RTI
.cf51	48		pha				pha
.cf52	b5 24		lda $24,x			lda DStack+0,x
.cf54	48		pha				pha
.cf55	e8		inx				inx		; drop addr
.cf56	e8		inx				inx
.cf57	08		php				php		; flags for RTI
.cf58	40		rti				rti
=14					CL	.var *-(WordListLink+wh_Xt)
=$cf59					en = *	; remember here
>cf49	0e					.byte CL	;wh_CodeLength
>cf59	32 52 6f 74			L1:	.text "2Rot"	;  name of word as a string, ending at wh_NameLastChar
>cf5d	84					.byte (("2Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf5e	c6 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf60	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf61	08					.byte NN	;wh_Flags	dictionary flags
=52957					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf62					TwoRot:
.cf62	e0 1d		cpx #$1d		cpx #-2*6+DStack0+1
.cf64	b0 18		bcs $cf7e		bcs Throw_Stack_03
.cf66	86 14		stx $14				stx tmp1+0
.cf68	e8		inx				inx		; do 4 times
.cf69	e8		inx				inx
.cf6a	e8		inx				inx
.cf6b	e8		inx				inx
.cf6c	ca		dex		-		dex
.cf6d	b4 2c		ldy $2c,x			ldy DStack+8,x	; do a byte
.cf6f	b5 28		lda $28,x			lda DStack+4,x
.cf71	95 2c		sta $2c,x			sta DStack+8,x
.cf73	b5 24		lda $24,x			lda DStack+0,x
.cf75	95 28		sta $28,x			sta DStack+4,x
.cf77	94 24		sty $24,x			sty DStack+0,x
.cf79	e4 14		cpx $14				cpx tmp1+0
.cf7b	d0 ef		bne $cf6c			bne -
=27					CL	.var *-(WordListLink+wh_Xt)
=$cf7d					en = *	; remember here
>cf60	1b					.byte CL	;wh_CodeLength
.cf7d	60		rts				rts
.cf7e	4c 31 b5	jmp $b531	Throw_Stack_03: jmp Throw_Stack
>cf81	52 6f 74			L1:	.text "Rot"	;  name of word as a string, ending at wh_NameLastChar
>cf84	83					.byte (("Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf85	dd ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf87	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf88	08					.byte NN	;wh_Flags	dictionary flags
=52996					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf89					Rot:
.cf89	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.cf8b	b0 f1		bcs $cf7e		bcs Throw_Stack_03
.cf8d	b4 29		ldy $29,x			ldy DStack+5,x	; do MSB
.cf8f	b5 27		lda $27,x			lda DStack+3,x
.cf91	95 29		sta $29,x			sta DStack+5,x
.cf93	b5 25		lda $25,x			lda DStack+1,x
.cf95	95 27		sta $27,x			sta DStack+3,x
.cf97	94 25		sty $25,x			sty DStack+1,x
.cf99	b4 28		ldy $28,x			ldy DStack+4,x	; do LSB
.cf9b	b5 26		lda $26,x			lda DStack+2,x
.cf9d	95 28		sta $28,x			sta DStack+4,x
.cf9f	b5 24		lda $24,x			lda DStack+0,x
.cfa1	95 26		sta $26,x			sta DStack+2,x
.cfa3	94 24		sty $24,x			sty DStack+0,x
=28					CL	.var *-(WordListLink+wh_Xt)
=$cfa5					en = *	; remember here
>cf87	1c					.byte CL	;wh_CodeLength
.cfa5	60		rts				rts
>cfa6	2d 52 6f 74			L1:	.text "-Rot"	;  name of word as a string, ending at wh_NameLastChar
>cfaa	84					.byte (("-Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cfab	04 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfae	08					.byte NN	;wh_Flags	dictionary flags
=53034					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfaf					Not_Rot:
.cfaf	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.cfb1	b0 cb		bcs $cf7e		bcs Throw_Stack_03
.cfb3	b4 25		ldy $25,x			ldy DStack+1,x	; do MSB
.cfb5	b5 27		lda $27,x			lda DStack+3,x
.cfb7	95 25		sta $25,x			sta DStack+1,x
.cfb9	b5 29		lda $29,x			lda DStack+5,x
.cfbb	95 27		sta $27,x			sta DStack+3,x
.cfbd	94 29		sty $29,x			sty DStack+5,x
.cfbf	b4 24		ldy $24,x			ldy DStack+0,x	; do LSB
.cfc1	b5 26		lda $26,x			lda DStack+2,x
.cfc3	95 24		sta $24,x			sta DStack+0,x
.cfc5	b5 28		lda $28,x			lda DStack+4,x
.cfc7	95 26		sta $26,x			sta DStack+2,x
.cfc9	94 28		sty $28,x			sty DStack+4,x
=28					CL	.var *-(WordListLink+wh_Xt)
=$cfcb					en = *	; remember here
>cfad	1c					.byte CL	;wh_CodeLength
.cfcb	60		rts				rts
>cfcc	21				L1:	.text "!"	;  name of word as a string, ending at wh_NameLastChar
>cfcd	21					.byte (("!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cfce	2a cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfd0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfd1	08					.byte NN	;wh_Flags	dictionary flags
=53069					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfd2					Store:
.cfd2	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.cfd4	b0 a8		bcs $cf7e		bcs Throw_Stack_03
.cfd6	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cfd8	81 24		sta ($24,x)			sta (DStack+0,x)
.cfda	f6 24		inc $24,x			inc DStack+0,x
.cfdc	d0 02		bne $cfe0			bne +
.cfde	f6 25		inc $25,x			inc DStack+1,x
.cfe0					+
.cfe0	b5 27		lda $27,x			lda DStack+3,x	; MSB
.cfe2	81 24		sta ($24,x)			sta (DStack+0,x)
.cfe4	e8		inx				inx		; 2Drop
.cfe5	e8		inx				inx
.cfe6	e8		inx				inx
.cfe7	e8		inx				inx
=22					CL	.var *-(WordListLink+wh_Xt)
=$cfe8					en = *	; remember here
>cfd0	16					.byte CL	;wh_CodeLength
.cfe8	60		rts				rts
>cfe9	40				L1:	.text "@"	;  name of word as a string, ending at wh_NameLastChar
>cfea	01					.byte (("@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cfeb	4d cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfed	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfee	08					.byte NN	;wh_Flags	dictionary flags
=53098					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfef					Fetch:
.cfef	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.cff1	b0 8b		bcs $cf7e		bcs Throw_Stack_03
.cff3	a1 24		lda ($24,x)			lda (DStack+0,x)		; LSB
.cff5	a8		tay				tay
.cff6	f6 24		inc $24,x			inc DStack+0,x
.cff8	d0 02		bne $cffc			bne +
.cffa	f6 25		inc $25,x			inc DStack+1,x
.cffc					+
.cffc	a1 24		lda ($24,x)			lda (DStack+0,x)		; MSB
.cffe	95 25		sta $25,x			sta DStack+1,x
.d000	94 24		sty $24,x			sty DStack+0,x
=19					CL	.var *-(WordListLink+wh_Xt)
=$d002					en = *	; remember here
>cfed	13					.byte CL	;wh_CodeLength
.d002	60		rts				rts
>d003	3e 52				L1:	.text ">R"	;  name of word as a string, ending at wh_NameLastChar
>d005	42					.byte ((">R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d006	6a cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d008	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d009	41					.byte CO+R6	;wh_Flags	dictionary flags
=53125					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d00a					To_R:
.d00a	68		pla				pla		; move the RTS address out of the way
.d00b	85 1c		sta $1c				sta tmp5+0
.d00d	68		pla				pla
.d00e	85 1d		sta $1d				sta tmp5+1
.d010	20 0d b5	jsr $b50d			jsr underflow_1
.d013	b5 25		lda $25,x			lda DStack+1,x	; MSB
.d015	48		pha				pha
.d016	b5 24		lda $24,x			lda DStack+0,x	; LSB
.d018	48		pha				pha
.d019	e8		inx				inx
.d01a	e8		inx				inx
.d01b	a5 1d		lda $1d				lda tmp5+1	; move the RTS address back in
.d01d	48		pha				pha
.d01e	a5 1c		lda $1c				lda tmp5+0
.d020	48		pha				pha
=23					CL	.var *-(WordListLink+wh_Xt)
=$d021					en = *	; remember here
>d008	17					.byte CL	;wh_CodeLength
.d021	60		rts				rts
>d022	52 3e				L1:	.text "R>"	;  name of word as a string, ending at wh_NameLastChar
>d024	c2					.byte (("R>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d025	85 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d027	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d028	41					.byte CO+R6	;wh_Flags	dictionary flags
=53156					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d029					R_From:
.d029	68		pla				pla		; Move the RTS addr out of the way
.d02a	85 1c		sta $1c				sta tmp5+0
.d02c	68		pla				pla
.d02d	85 1d		sta $1d				sta tmp5+1
.d02f	ca		dex				dex
.d030	ca		dex				dex
.d031	68		pla				pla		; LSB
.d032	95 24		sta $24,x			sta DStack+0,x
.d034	68		pla				pla		; MSB
.d035	95 25		sta $25,x			sta DStack+1,x
.d037	a5 1d		lda $1d				lda tmp5+1	; Restore the RTS addr
.d039	48		pha				pha
.d03a	a5 1c		lda $1c				lda tmp5+0
.d03c	48		pha				pha
=20					CL	.var *-(WordListLink+wh_Xt)
=$d03d					en = *	; remember here
>d027	14					.byte CL	;wh_CodeLength
.d03d	60		rts				rts
>d03e	52 40				L1:	.text "R@"	;  name of word as a string, ending at wh_NameLastChar
>d040	02					.byte (("R@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d041	a4 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d043	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d044	09					.byte NN+CO	;wh_Flags	dictionary flags
=53184					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d045					R_Fetch:
.d045	86 14		stx $14				stx tmp1	; save data stack index
.d047	ba		tsx				tsx		; X= return stack index
.d048	bd 03 01	lda $0103,x			lda RStack+3,x
.d04b	bc 04 01	ldy $0104,x			ldy RStack+4,x
.d04e	a6 14		ldx $14				ldx tmp1	; restore data stack index
.d050	4c be b8	jmp $b8be			jmp PushYA
=14					CL	.var *-(WordListLink+wh_Xt)
=$d053					en = *	; remember here
>d043	0e					.byte CL	;wh_CodeLength
>d053	4f 76 65 72			L1:	.text "Over"	;  name of word as a string, ending at wh_NameLastChar
>d057	44					.byte (("Over"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d058	c0 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d05a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d05b	10					.byte UF	;wh_Flags	dictionary flags
=53207					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d05c					Over:
.d05c	20 22 b5	jsr $b522			jsr underflow_2
.d05f	b5 26		lda $26,x			lda DStack+2,x	; LSB
.d061	b4 27		ldy $27,x			ldy DStack+3,x	; MSB
.d063	ca		dex				dex		; PushYA
.d064	ca		dex				dex
.d065	95 24		sta $24,x			sta DStack+0,x
.d067	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$d069					en = *	; remember here
>d05a	0d					.byte CL	;wh_CodeLength
.d069	60		rts				rts
>d06a	3f 44 75 70			L1:	.text "?Dup"	;  name of word as a string, ending at wh_NameLastChar
>d06e	04					.byte (("?Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d06f	d7 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d071	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d072	18					.byte UF+NN	;wh_Flags	dictionary flags
=53230					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d073					Question_Dup:
.d073	20 0d b5	jsr $b50d			jsr underflow_1
.d076	b5 24		lda $24,x			lda DStack+0,x	; Check if TOS is zero
.d078	15 25		ora $25,x			ora DStack+1,x
.d07a	d0 0c		bne $d088			bne Dup_NoUf
=9					CL	.var *-(WordListLink+wh_Xt)
=$d07c					en = *	; remember here
>d071	09					.byte CL	;wh_CodeLength
.d07c	60		rts				rts
>d07d	44 75 70			L1:	.text "Dup"	;  name of word as a string, ending at wh_NameLastChar
>d080	03					.byte (("Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d081	ee cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d083	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d084	10					.byte UF	;wh_Flags	dictionary flags
=53248					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d085					Dup:
.d085	20 0d b5	jsr $b50d			jsr underflow_1
.d088	b5 24		lda $24,x	Dup_NoUf:	lda DStack+0,x	; LSB
.d08a	b4 25		ldy $25,x			ldy DStack+1,x	; MSB
.d08c	ca		dex				dex
.d08d	ca		dex				dex
.d08e	95 24		sta $24,x			sta DStack+0,x
.d090	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$d092					en = *	; remember here
>d083	0d					.byte CL	;wh_CodeLength
.d092	60		rts				rts
.d093					PushAY:
.d093	ca		dex				dex
.d094	ca		dex				dex
.d095	94 24		sty $24,x			sty DStack+0,x
.d097	95 25		sta $25,x			sta DStack+1,x
.d099	60		rts				rts
>d09a	53 77 61 70			L1:	.text "Swap"	;  name of word as a string, ending at wh_NameLastChar
>d09e	04					.byte (("Swap"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d09f	00 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0a1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0a2	10					.byte UF	;wh_Flags	dictionary flags
=53278					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0a3					Swap:
.d0a3	20 22 b5	jsr $b522			jsr underflow_2
.d0a6	b5 24		lda $24,x			lda DStack+0,x	; do LSB
.d0a8	b4 26		ldy $26,x			ldy DStack+2,x
.d0aa	95 26		sta $26,x			sta DStack+2,x
.d0ac	94 24		sty $24,x			sty DStack+0,x
.d0ae	b5 25		lda $25,x			lda DStack+1,x	; do MSB
.d0b0	b4 27		ldy $27,x			ldy DStack+3,x
.d0b2	95 27		sta $27,x			sta DStack+3,x
.d0b4	94 25		sty $25,x			sty DStack+1,x
=19					CL	.var *-(WordListLink+wh_Xt)
=$d0b6					en = *	; remember here
>d0a1	13					.byte CL	;wh_CodeLength
.d0b6	60		rts				rts
>d0b7	44 72 6f 70			L1:	.text "Drop"	;  name of word as a string, ending at wh_NameLastChar
>d0bb	04					.byte (("Drop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0bc	1e d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0bf	10					.byte UF	;wh_Flags	dictionary flags
=53307					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0c0					Drop:
.d0c0	20 0d b5	jsr $b50d			jsr underflow_1
.d0c3	e8		inx				inx
.d0c4	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$d0c5					en = *	; remember here
>d0be	05					.byte CL	;wh_CodeLength
.d0c5	60		rts				rts
=53307					forth_dictionary_start = WordListLink ; END of FORTH-WORDLIST
=0					WordListLink .var 0
>d0c6	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
>d0cb	65					.byte (("Words"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0cc	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0cf	08					.byte NN	;wh_Flags	dictionary flags
=53323					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0d0	4c 75 ab	jmp $ab75			jmp Words
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0d3					en = *	; remember here
>d0ce	03					.byte CL	;wh_CodeLength
>d0d3	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>d0db	72 64 6c 69 73 74
>d0e1	8e					.byte (("Forth-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0e2	4b d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0e4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0e5	08					.byte NN	;wh_Flags	dictionary flags
=53345					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0e6	4c 7c a0	jmp $a07c			jmp Forth_WordList
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0e9					en = *	; remember here
>d0e4	03					.byte CL	;wh_CodeLength
>d0e9	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
>d0ee	05					.byte (("Forth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0ef	61 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0f1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0f2	08					.byte NN	;wh_Flags	dictionary flags
=53358					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0f3	4c 75 a1	jmp $a175			jmp Forth
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0f6					en = *	; remember here
>d0f1	03					.byte CL	;wh_CodeLength
>d0f6	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>d0fe	72
>d0ff	49					.byte (("Set-Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d100	6e d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d102	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d103	08					.byte NN	;wh_Flags	dictionary flags
=53375					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d104	4c 39 a2	jmp $a239			jmp Set_Order
=3					CL	.var *-(WordListLink+wh_Xt)
=$d107					en = *	; remember here
>d102	03					.byte CL	;wh_CodeLength
=53375					root_dictionary_start = WordListLink ; END of ROOT-WORDLIST
=0					WordListLink .var 0
.d107					asm_r:
.d107	68		pla			pla		; pop RTS addr
.d108	a8		tay			tay
.d109	68		pla			pla
.d10a	20 49 d1	jsr $d149		jsr asm_op	; compile opcode
.d10d	b5 25		lda $25,x		lda DStack+1,x	; check range
.d10f	f0 09		beq $d11a		beq _plus
.d111	c9 ff		cmp #$ff		cmp #$ff
.d113	f0 0b		beq $d120		beq _minus
.d115	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.d117	4c 6c b5	jmp $b56c		jmp ThrowA
.d11a	b5 24		lda $24,x	_plus:	lda DStack+0,x
.d11c	30 f7		bmi $d115		bmi _err
.d11e	10 04		bpl $d124		bpl _store
.d120	b5 24		lda $24,x	_minus:	lda DStack+0,x
.d122	10 f1		bpl $d115		bpl _err
.d124	4c 0b ce	jmp $ce0b	_store:	jmp C_Comma
.d127					asm_1:
.d127	68		pla			pla		; pop RTS addr
.d128	a8		tay			tay
.d129	68		pla			pla
.d12a	20 49 d1	jsr $d149		jsr asm_op	; compile opcode
.d12d	b5 25		lda $25,x		lda DStack+1,x	; compile operand
.d12f	f0 04		beq $d135		beq _store	;   unsigned byte?
.d131	c9 ff		cmp #$ff		cmp #$ff	;   signed byte?
.d133	d0 03		bne $d138		bne _err
.d135	4c 0b ce	jmp $ce0b	_store:	jmp C_Comma
.d138	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.d13a	4c 6c b5	jmp $b56c		jmp ThrowA
.d13d					asm_2:
.d13d	68		pla			pla		; pop RTS addr
.d13e	a8		tay			tay
.d13f	68		pla			pla
.d140	20 49 d1	jsr $d149		jsr asm_op	; compile opcode
.d143	4c 25 ce	jmp $ce25		jmp Comma	; compile operand
.d146					asm_0:
.d146	68		pla			pla		; pop RTS addr
.d147	a8		tay			tay
.d148	68		pla			pla
.d149	84 14		sty $14		asm_op:	sty tmp1+0	; save RTS addr
.d14b	85 15		sta $15			sta tmp1+1
.d14d	a0 01		ldy #$01		ldy #1		; get opcode byte
.d14f	b1 14		lda ($14),y		lda (tmp1),y
.d151	4c 0e ce	jmp $ce0e		jmp C_Comma_A	; compile opcode
>d154	61 64 63 2e 23			L1:	.text "adc.#"	;  name of word as a string, ending at wh_NameLastChar
>d159	65					.byte (("adc.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d15a	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d15c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d15d	08					.byte NN	;wh_Flags	dictionary flags
=53465					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d15e	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d161					en = *	; remember here
>d15c	03					.byte CL	;wh_CodeLength
>d161	69					.byte $69
>d162	61 64 63 2e 78			L1:	.text "adc.x"	;  name of word as a string, ending at wh_NameLastChar
>d167	05					.byte (("adc.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d168	d9 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d16a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d16b	08					.byte NN	;wh_Flags	dictionary flags
=53479					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d16c	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d16f					en = *	; remember here
>d16a	03					.byte CL	;wh_CodeLength
>d16f	7d					.byte $7d
>d170	61 64 63 2e 79			L1:	.text "adc.y"	;  name of word as a string, ending at wh_NameLastChar
>d175	25					.byte (("adc.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d176	e7 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d178	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d179	08					.byte NN	;wh_Flags	dictionary flags
=53493					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d17a	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d17d					en = *	; remember here
>d178	03					.byte CL	;wh_CodeLength
>d17d	79					.byte $79
>d17e	61 64 63 2e 7a			L1:	.text "adc.z"	;  name of word as a string, ending at wh_NameLastChar
>d183	45					.byte (("adc.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d184	f5 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d186	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d187	08					.byte NN	;wh_Flags	dictionary flags
=53507					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d188	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d18b					en = *	; remember here
>d186	03					.byte CL	;wh_CodeLength
>d18b	65					.byte $65
>d18c	61 64 63 2e 7a 69 79		L1:	.text "adc.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d193	27					.byte (("adc.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d194	03 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d196	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d197	08					.byte NN	;wh_Flags	dictionary flags
=53523					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d198	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d19b					en = *	; remember here
>d196	03					.byte CL	;wh_CodeLength
>d19b	71					.byte $71
>d19c	61 64 63 2e 7a 78		L1:	.text "adc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d1a2	06					.byte (("adc.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1a3	13 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1a5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1a6	08					.byte NN	;wh_Flags	dictionary flags
=53538					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1a7	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1aa					en = *	; remember here
>d1a5	03					.byte CL	;wh_CodeLength
>d1aa	75					.byte $75
>d1ab	61 64 63 2e 7a 78 69		L1:	.text "adc.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d1b2	27					.byte (("adc.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1b3	22 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1b5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1b6	08					.byte NN	;wh_Flags	dictionary flags
=53554					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1b7	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1ba					en = *	; remember here
>d1b5	03					.byte CL	;wh_CodeLength
>d1ba	61					.byte $61
>d1bb	61 6e 64 2e			L1:	.text "and."	;  name of word as a string, ending at wh_NameLastChar
>d1bf	c4					.byte (("and."[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1c0	32 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1c3	08					.byte NN	;wh_Flags	dictionary flags
=53567					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1c4	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1c7					en = *	; remember here
>d1c2	03					.byte CL	;wh_CodeLength
>d1c7	2d					.byte $2d
>d1c8	61 6e 64 2e 23			L1:	.text "and.#"	;  name of word as a string, ending at wh_NameLastChar
>d1cd	65					.byte (("and.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1ce	3f d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1d0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1d1	08					.byte NN	;wh_Flags	dictionary flags
=53581					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1d2	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1d5					en = *	; remember here
>d1d0	03					.byte CL	;wh_CodeLength
>d1d5	29					.byte $29
>d1d6	61 6e 64 2e 78			L1:	.text "and.x"	;  name of word as a string, ending at wh_NameLastChar
>d1db	05					.byte (("and.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1dc	4d d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1df	08					.byte NN	;wh_Flags	dictionary flags
=53595					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1e0	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1e3					en = *	; remember here
>d1de	03					.byte CL	;wh_CodeLength
>d1e3	3d					.byte $3d
>d1e4	61 6e 64 2e 79			L1:	.text "and.y"	;  name of word as a string, ending at wh_NameLastChar
>d1e9	25					.byte (("and.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1ea	5b d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1ec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1ed	08					.byte NN	;wh_Flags	dictionary flags
=53609					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1ee	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1f1					en = *	; remember here
>d1ec	03					.byte CL	;wh_CodeLength
>d1f1	39					.byte $39
>d1f2	61 6e 64 2e 7a			L1:	.text "and.z"	;  name of word as a string, ending at wh_NameLastChar
>d1f7	45					.byte (("and.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1f8	69 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1fa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1fb	08					.byte NN	;wh_Flags	dictionary flags
=53623					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1fc	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1ff					en = *	; remember here
>d1fa	03					.byte CL	;wh_CodeLength
>d1ff	25					.byte $25
>d200	61 6e 64 2e 7a 69 79		L1:	.text "and.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d207	27					.byte (("and.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d208	77 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d20a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d20b	08					.byte NN	;wh_Flags	dictionary flags
=53639					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d20c	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d20f					en = *	; remember here
>d20a	03					.byte CL	;wh_CodeLength
>d20f	31					.byte $31
>d210	61 6e 64 2e 7a 78		L1:	.text "and.zx"	;  name of word as a string, ending at wh_NameLastChar
>d216	06					.byte (("and.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d217	87 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d219	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d21a	08					.byte NN	;wh_Flags	dictionary flags
=53654					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d21b	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d21e					en = *	; remember here
>d219	03					.byte CL	;wh_CodeLength
>d21e	35					.byte $35
>d21f	61 6e 64 2e 7a 78 69		L1:	.text "and.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d226	27					.byte (("and.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d227	96 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d229	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d22a	08					.byte NN	;wh_Flags	dictionary flags
=53670					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d22b	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d22e					en = *	; remember here
>d229	03					.byte CL	;wh_CodeLength
>d22e	21					.byte $21
>d22f	61 73 6c			L1:	.text "asl"	;  name of word as a string, ending at wh_NameLastChar
>d232	83					.byte (("asl"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d233	a6 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d235	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d236	08					.byte NN	;wh_Flags	dictionary flags
=53682					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d237	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d23a					en = *	; remember here
>d235	03					.byte CL	;wh_CodeLength
>d23a	0e					.byte $0e
>d23b	61 73 6c 2e 61			L1:	.text "asl.a"	;  name of word as a string, ending at wh_NameLastChar
>d240	25					.byte (("asl.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d241	b2 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d243	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d244	08					.byte NN	;wh_Flags	dictionary flags
=53696					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d245	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d248					en = *	; remember here
>d243	03					.byte CL	;wh_CodeLength
>d248	0a					.byte $0a
>d249	61 73 6c 2e 78			L1:	.text "asl.x"	;  name of word as a string, ending at wh_NameLastChar
>d24e	05					.byte (("asl.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d24f	c0 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d251	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d252	08					.byte NN	;wh_Flags	dictionary flags
=53710					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d253	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d256					en = *	; remember here
>d251	03					.byte CL	;wh_CodeLength
>d256	1e					.byte $1e
>d257	61 73 6c 2e 7a			L1:	.text "asl.z"	;  name of word as a string, ending at wh_NameLastChar
>d25c	45					.byte (("asl.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d25d	ce d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d25f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d260	08					.byte NN	;wh_Flags	dictionary flags
=53724					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d261	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d264					en = *	; remember here
>d25f	03					.byte CL	;wh_CodeLength
>d264	06					.byte $06
>d265	61 73 6c 2e 7a 78		L1:	.text "asl.zx"	;  name of word as a string, ending at wh_NameLastChar
>d26b	06					.byte (("asl.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d26c	dc d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d26e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d26f	08					.byte NN	;wh_Flags	dictionary flags
=53739					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d270	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d273					en = *	; remember here
>d26e	03					.byte CL	;wh_CodeLength
>d273	16					.byte $16
>d274	62 63 63			L1:	.text "bcc"	;  name of word as a string, ending at wh_NameLastChar
>d277	63					.byte (("bcc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d278	eb d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d27a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d27b	08					.byte NN	;wh_Flags	dictionary flags
=53751					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d27c	20 07 d1	jsr $d107		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d27f					en = *	; remember here
>d27a	03					.byte CL	;wh_CodeLength
>d27f	90					.byte $90
>d280	62 63 73			L1:	.text "bcs"	;  name of word as a string, ending at wh_NameLastChar
>d283	63					.byte (("bcs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d284	f7 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d286	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d287	08					.byte NN	;wh_Flags	dictionary flags
=53763					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d288	20 07 d1	jsr $d107		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d28b					en = *	; remember here
>d286	03					.byte CL	;wh_CodeLength
>d28b	b0					.byte $b0
>d28c	62 65 71			L1:	.text "beq"	;  name of word as a string, ending at wh_NameLastChar
>d28f	23					.byte (("beq"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d290	03 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d292	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d293	08					.byte NN	;wh_Flags	dictionary flags
=53775					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d294	20 07 d1	jsr $d107		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d297					en = *	; remember here
>d292	03					.byte CL	;wh_CodeLength
>d297	f0					.byte $f0
>d298	62 69 74			L1:	.text "bit"	;  name of word as a string, ending at wh_NameLastChar
>d29b	83					.byte (("bit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d29c	0f d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d29e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d29f	08					.byte NN	;wh_Flags	dictionary flags
=53787					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2a0	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2a3					en = *	; remember here
>d29e	03					.byte CL	;wh_CodeLength
>d2a3	2c					.byte $2c
>d2a4	62 69 74 2e 7a			L1:	.text "bit.z"	;  name of word as a string, ending at wh_NameLastChar
>d2a9	45					.byte (("bit.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2aa	1b d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2ac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2ad	08					.byte NN	;wh_Flags	dictionary flags
=53801					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2ae	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2b1					en = *	; remember here
>d2ac	03					.byte CL	;wh_CodeLength
>d2b1	24					.byte $24
>d2b2	62 6d 69			L1:	.text "bmi"	;  name of word as a string, ending at wh_NameLastChar
>d2b5	23					.byte (("bmi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2b6	29 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2b8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2b9	08					.byte NN	;wh_Flags	dictionary flags
=53813					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2ba	20 07 d1	jsr $d107		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2bd					en = *	; remember here
>d2b8	03					.byte CL	;wh_CodeLength
>d2bd	30					.byte $30
>d2be	62 6e 65			L1:	.text "bne"	;  name of word as a string, ending at wh_NameLastChar
>d2c1	a3					.byte (("bne"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2c2	35 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2c4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2c5	08					.byte NN	;wh_Flags	dictionary flags
=53825					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2c6	20 07 d1	jsr $d107		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2c9					en = *	; remember here
>d2c4	03					.byte CL	;wh_CodeLength
>d2c9	d0					.byte $d0
>d2ca	62 70 6c			L1:	.text "bpl"	;  name of word as a string, ending at wh_NameLastChar
>d2cd	83					.byte (("bpl"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2ce	41 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2d0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2d1	08					.byte NN	;wh_Flags	dictionary flags
=53837					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2d2	20 07 d1	jsr $d107		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2d5					en = *	; remember here
>d2d0	03					.byte CL	;wh_CodeLength
>d2d5	10					.byte $10
>d2d6	62 72 6b			L1:	.text "brk"	;  name of word as a string, ending at wh_NameLastChar
>d2d9	63					.byte (("brk"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2da	4d d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2dd	08					.byte NN	;wh_Flags	dictionary flags
=53849					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2de	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2e1					en = *	; remember here
>d2dc	03					.byte CL	;wh_CodeLength
>d2e1	00					.byte $00
>d2e2	62 76 63			L1:	.text "bvc"	;  name of word as a string, ending at wh_NameLastChar
>d2e5	63					.byte (("bvc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2e6	59 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2e8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2e9	08					.byte NN	;wh_Flags	dictionary flags
=53861					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2ea	20 07 d1	jsr $d107		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2ed					en = *	; remember here
>d2e8	03					.byte CL	;wh_CodeLength
>d2ed	50					.byte $50
>d2ee	62 76 73			L1:	.text "bvs"	;  name of word as a string, ending at wh_NameLastChar
>d2f1	63					.byte (("bvs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2f2	65 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2f4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2f5	08					.byte NN	;wh_Flags	dictionary flags
=53873					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2f6	20 07 d1	jsr $d107		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2f9					en = *	; remember here
>d2f4	03					.byte CL	;wh_CodeLength
>d2f9	70					.byte $70
>d2fa	63 6c 63			L1:	.text "clc"	;  name of word as a string, ending at wh_NameLastChar
>d2fd	63					.byte (("clc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2fe	71 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d300	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d301	08					.byte NN	;wh_Flags	dictionary flags
=53885					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d302	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d305					en = *	; remember here
>d300	03					.byte CL	;wh_CodeLength
>d305	18					.byte $18
>d306	63 6c 64			L1:	.text "cld"	;  name of word as a string, ending at wh_NameLastChar
>d309	83					.byte (("cld"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d30a	7d d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d30c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d30d	08					.byte NN	;wh_Flags	dictionary flags
=53897					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d30e	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d311					en = *	; remember here
>d30c	03					.byte CL	;wh_CodeLength
>d311	d8					.byte $d8
>d312	63 6c 69			L1:	.text "cli"	;  name of word as a string, ending at wh_NameLastChar
>d315	23					.byte (("cli"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d316	89 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d318	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d319	08					.byte NN	;wh_Flags	dictionary flags
=53909					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d31a	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d31d					en = *	; remember here
>d318	03					.byte CL	;wh_CodeLength
>d31d	58					.byte $58
>d31e	63 6c 76			L1:	.text "clv"	;  name of word as a string, ending at wh_NameLastChar
>d321	c3					.byte (("clv"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d322	95 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d324	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d325	08					.byte NN	;wh_Flags	dictionary flags
=53921					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d326	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d329					en = *	; remember here
>d324	03					.byte CL	;wh_CodeLength
>d329	b8					.byte $b8
>d32a	63 6d 70			L1:	.text "cmp"	;  name of word as a string, ending at wh_NameLastChar
>d32d	03					.byte (("cmp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d32e	a1 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d330	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d331	08					.byte NN	;wh_Flags	dictionary flags
=53933					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d332	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d335					en = *	; remember here
>d330	03					.byte CL	;wh_CodeLength
>d335	cd					.byte $cd
>d336	63 6d 70 2e 23			L1:	.text "cmp.#"	;  name of word as a string, ending at wh_NameLastChar
>d33b	65					.byte (("cmp.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d33c	ad d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d33e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d33f	08					.byte NN	;wh_Flags	dictionary flags
=53947					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d340	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d343					en = *	; remember here
>d33e	03					.byte CL	;wh_CodeLength
>d343	c9					.byte $c9
>d344	63 6d 70 2e 78			L1:	.text "cmp.x"	;  name of word as a string, ending at wh_NameLastChar
>d349	05					.byte (("cmp.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d34a	bb d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d34c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d34d	08					.byte NN	;wh_Flags	dictionary flags
=53961					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d34e	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d351					en = *	; remember here
>d34c	03					.byte CL	;wh_CodeLength
>d351	dd					.byte $dd
>d352	63 6d 70 2e 79			L1:	.text "cmp.y"	;  name of word as a string, ending at wh_NameLastChar
>d357	25					.byte (("cmp.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d358	c9 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d35a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d35b	08					.byte NN	;wh_Flags	dictionary flags
=53975					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d35c	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d35f					en = *	; remember here
>d35a	03					.byte CL	;wh_CodeLength
>d35f	d9					.byte $d9
>d360	63 6d 70 2e 7a			L1:	.text "cmp.z"	;  name of word as a string, ending at wh_NameLastChar
>d365	45					.byte (("cmp.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d366	d7 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d368	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d369	08					.byte NN	;wh_Flags	dictionary flags
=53989					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d36a	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d36d					en = *	; remember here
>d368	03					.byte CL	;wh_CodeLength
>d36d	c5					.byte $c5
>d36e	63 6d 70 2e 7a 69 79		L1:	.text "cmp.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d375	27					.byte (("cmp.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d376	e5 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d378	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d379	08					.byte NN	;wh_Flags	dictionary flags
=54005					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d37a	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d37d					en = *	; remember here
>d378	03					.byte CL	;wh_CodeLength
>d37d	d1					.byte $d1
>d37e	63 6d 70 2e 7a 78		L1:	.text "cmp.zx"	;  name of word as a string, ending at wh_NameLastChar
>d384	06					.byte (("cmp.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d385	f5 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d387	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d388	08					.byte NN	;wh_Flags	dictionary flags
=54020					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d389	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d38c					en = *	; remember here
>d387	03					.byte CL	;wh_CodeLength
>d38c	d5					.byte $d5
>d38d	63 6d 70 2e 7a 78 69		L1:	.text "cmp.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d394	27					.byte (("cmp.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d395	04 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d397	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d398	08					.byte NN	;wh_Flags	dictionary flags
=54036					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d399	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d39c					en = *	; remember here
>d397	03					.byte CL	;wh_CodeLength
>d39c	c1					.byte $c1
>d39d	63 70 78			L1:	.text "cpx"	;  name of word as a string, ending at wh_NameLastChar
>d3a0	03					.byte (("cpx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3a1	14 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3a3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3a4	08					.byte NN	;wh_Flags	dictionary flags
=54048					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3a5	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3a8					en = *	; remember here
>d3a3	03					.byte CL	;wh_CodeLength
>d3a8	ec					.byte $ec
>d3a9	63 70 78 2e 23			L1:	.text "cpx.#"	;  name of word as a string, ending at wh_NameLastChar
>d3ae	65					.byte (("cpx.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3af	20 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3b1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3b2	08					.byte NN	;wh_Flags	dictionary flags
=54062					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3b3	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3b6					en = *	; remember here
>d3b1	03					.byte CL	;wh_CodeLength
>d3b6	e0					.byte $e0
>d3b7	63 70 78 2e 7a			L1:	.text "cpx.z"	;  name of word as a string, ending at wh_NameLastChar
>d3bc	45					.byte (("cpx.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3bd	2e d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3bf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3c0	08					.byte NN	;wh_Flags	dictionary flags
=54076					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3c1	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3c4					en = *	; remember here
>d3bf	03					.byte CL	;wh_CodeLength
>d3c4	e4					.byte $e4
>d3c5	63 70 79			L1:	.text "cpy"	;  name of word as a string, ending at wh_NameLastChar
>d3c8	23					.byte (("cpy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3c9	3c d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3cb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3cc	08					.byte NN	;wh_Flags	dictionary flags
=54088					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3cd	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3d0					en = *	; remember here
>d3cb	03					.byte CL	;wh_CodeLength
>d3d0	cc					.byte $cc
>d3d1	63 70 79 2e 23			L1:	.text "cpy.#"	;  name of word as a string, ending at wh_NameLastChar
>d3d6	65					.byte (("cpy.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3d7	48 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3d9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3da	08					.byte NN	;wh_Flags	dictionary flags
=54102					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3db	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3de					en = *	; remember here
>d3d9	03					.byte CL	;wh_CodeLength
>d3de	c0					.byte $c0
>d3df	63 70 79 2e 7a			L1:	.text "cpy.z"	;  name of word as a string, ending at wh_NameLastChar
>d3e4	45					.byte (("cpy.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3e5	56 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3e8	08					.byte NN	;wh_Flags	dictionary flags
=54116					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3e9	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3ec					en = *	; remember here
>d3e7	03					.byte CL	;wh_CodeLength
>d3ec	c4					.byte $c4
>d3ed	64 65 63			L1:	.text "dec"	;  name of word as a string, ending at wh_NameLastChar
>d3f0	63					.byte (("dec"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3f1	64 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3f4	08					.byte NN	;wh_Flags	dictionary flags
=54128					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3f5	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3f8					en = *	; remember here
>d3f3	03					.byte CL	;wh_CodeLength
>d3f8	ce					.byte $ce
>d3f9	64 65 63 2e 61			L1:	.text "dec.a"	;  name of word as a string, ending at wh_NameLastChar
>d3fe	25					.byte (("dec.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3ff	70 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d401	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d402	08					.byte NN	;wh_Flags	dictionary flags
=54142					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d403	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d406					en = *	; remember here
>d401	03					.byte CL	;wh_CodeLength
>d406	3a					.byte $3a
>d407	64 65 63 2e 78			L1:	.text "dec.x"	;  name of word as a string, ending at wh_NameLastChar
>d40c	05					.byte (("dec.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d40d	7e d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d40f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d410	08					.byte NN	;wh_Flags	dictionary flags
=54156					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d411	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d414					en = *	; remember here
>d40f	03					.byte CL	;wh_CodeLength
>d414	de					.byte $de
>d415	64 65 63 2e 7a			L1:	.text "dec.z"	;  name of word as a string, ending at wh_NameLastChar
>d41a	45					.byte (("dec.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d41b	8c d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d41d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d41e	08					.byte NN	;wh_Flags	dictionary flags
=54170					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d41f	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d422					en = *	; remember here
>d41d	03					.byte CL	;wh_CodeLength
>d422	c6					.byte $c6
>d423	64 65 63 2e 7a 78		L1:	.text "dec.zx"	;  name of word as a string, ending at wh_NameLastChar
>d429	06					.byte (("dec.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d42a	9a d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d42c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d42d	08					.byte NN	;wh_Flags	dictionary flags
=54185					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d42e	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d431					en = *	; remember here
>d42c	03					.byte CL	;wh_CodeLength
>d431	d6					.byte $d6
>d432	64 65 78			L1:	.text "dex"	;  name of word as a string, ending at wh_NameLastChar
>d435	03					.byte (("dex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d436	a9 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d438	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d439	08					.byte NN	;wh_Flags	dictionary flags
=54197					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d43a	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d43d					en = *	; remember here
>d438	03					.byte CL	;wh_CodeLength
>d43d	ca					.byte $ca
>d43e	64 65 79			L1:	.text "dey"	;  name of word as a string, ending at wh_NameLastChar
>d441	23					.byte (("dey"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d442	b5 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d444	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d445	08					.byte NN	;wh_Flags	dictionary flags
=54209					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d446	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d449					en = *	; remember here
>d444	03					.byte CL	;wh_CodeLength
>d449	88					.byte $88
>d44a	65 6f 72			L1:	.text "eor"	;  name of word as a string, ending at wh_NameLastChar
>d44d	43					.byte (("eor"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d44e	c1 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d450	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d451	08					.byte NN	;wh_Flags	dictionary flags
=54221					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d452	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d455					en = *	; remember here
>d450	03					.byte CL	;wh_CodeLength
>d455	4d					.byte $4d
>d456	65 6f 72 2e 23			L1:	.text "eor.#"	;  name of word as a string, ending at wh_NameLastChar
>d45b	65					.byte (("eor.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d45c	cd d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d45e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d45f	08					.byte NN	;wh_Flags	dictionary flags
=54235					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d460	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d463					en = *	; remember here
>d45e	03					.byte CL	;wh_CodeLength
>d463	49					.byte $49
>d464	65 6f 72 2e 78			L1:	.text "eor.x"	;  name of word as a string, ending at wh_NameLastChar
>d469	05					.byte (("eor.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d46a	db d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d46c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d46d	08					.byte NN	;wh_Flags	dictionary flags
=54249					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d46e	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d471					en = *	; remember here
>d46c	03					.byte CL	;wh_CodeLength
>d471	5d					.byte $5d
>d472	65 6f 72 2e 79			L1:	.text "eor.y"	;  name of word as a string, ending at wh_NameLastChar
>d477	25					.byte (("eor.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d478	e9 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d47a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d47b	08					.byte NN	;wh_Flags	dictionary flags
=54263					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d47c	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d47f					en = *	; remember here
>d47a	03					.byte CL	;wh_CodeLength
>d47f	59					.byte $59
>d480	65 6f 72 2e 7a			L1:	.text "eor.z"	;  name of word as a string, ending at wh_NameLastChar
>d485	45					.byte (("eor.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d486	f7 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d488	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d489	08					.byte NN	;wh_Flags	dictionary flags
=54277					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d48a	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d48d					en = *	; remember here
>d488	03					.byte CL	;wh_CodeLength
>d48d	45					.byte $45
>d48e	65 6f 72 2e 7a 69 79		L1:	.text "eor.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d495	27					.byte (("eor.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d496	05 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d498	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d499	08					.byte NN	;wh_Flags	dictionary flags
=54293					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d49a	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d49d					en = *	; remember here
>d498	03					.byte CL	;wh_CodeLength
>d49d	51					.byte $51
>d49e	65 6f 72 2e 7a 78		L1:	.text "eor.zx"	;  name of word as a string, ending at wh_NameLastChar
>d4a4	06					.byte (("eor.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4a5	15 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4a7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4a8	08					.byte NN	;wh_Flags	dictionary flags
=54308					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4a9	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4ac					en = *	; remember here
>d4a7	03					.byte CL	;wh_CodeLength
>d4ac	55					.byte $55
>d4ad	65 6f 72 2e 7a 78 69		L1:	.text "eor.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d4b4	27					.byte (("eor.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4b5	24 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4b7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4b8	08					.byte NN	;wh_Flags	dictionary flags
=54324					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4b9	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4bc					en = *	; remember here
>d4b7	03					.byte CL	;wh_CodeLength
>d4bc	41					.byte $41
>d4bd	69 6e 63			L1:	.text "inc"	;  name of word as a string, ending at wh_NameLastChar
>d4c0	63					.byte (("inc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4c1	34 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4c4	08					.byte NN	;wh_Flags	dictionary flags
=54336					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4c5	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4c8					en = *	; remember here
>d4c3	03					.byte CL	;wh_CodeLength
>d4c8	ee					.byte $ee
>d4c9	69 6e 63 2e 61			L1:	.text "inc.a"	;  name of word as a string, ending at wh_NameLastChar
>d4ce	25					.byte (("inc.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4cf	40 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4d2	08					.byte NN	;wh_Flags	dictionary flags
=54350					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4d3	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4d6					en = *	; remember here
>d4d1	03					.byte CL	;wh_CodeLength
>d4d6	1a					.byte $1a
>d4d7	69 6e 63 2e 78			L1:	.text "inc.x"	;  name of word as a string, ending at wh_NameLastChar
>d4dc	05					.byte (("inc.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4dd	4e d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4df	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4e0	08					.byte NN	;wh_Flags	dictionary flags
=54364					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4e1	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4e4					en = *	; remember here
>d4df	03					.byte CL	;wh_CodeLength
>d4e4	fe					.byte $fe
>d4e5	69 6e 63 2e 7a			L1:	.text "inc.z"	;  name of word as a string, ending at wh_NameLastChar
>d4ea	45					.byte (("inc.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4eb	5c d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4ed	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4ee	08					.byte NN	;wh_Flags	dictionary flags
=54378					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4ef	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4f2					en = *	; remember here
>d4ed	03					.byte CL	;wh_CodeLength
>d4f2	e6					.byte $e6
>d4f3	69 6e 63 2e 7a 78		L1:	.text "inc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d4f9	06					.byte (("inc.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4fa	6a d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4fd	08					.byte NN	;wh_Flags	dictionary flags
=54393					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4fe	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d501					en = *	; remember here
>d4fc	03					.byte CL	;wh_CodeLength
>d501	f6					.byte $f6
>d502	69 6e 78			L1:	.text "inx"	;  name of word as a string, ending at wh_NameLastChar
>d505	03					.byte (("inx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d506	79 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d508	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d509	08					.byte NN	;wh_Flags	dictionary flags
=54405					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d50a	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d50d					en = *	; remember here
>d508	03					.byte CL	;wh_CodeLength
>d50d	e8					.byte $e8
>d50e	69 6e 79			L1:	.text "iny"	;  name of word as a string, ending at wh_NameLastChar
>d511	23					.byte (("iny"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d512	85 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d514	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d515	08					.byte NN	;wh_Flags	dictionary flags
=54417					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d516	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d519					en = *	; remember here
>d514	03					.byte CL	;wh_CodeLength
>d519	c8					.byte $c8
>d51a	6a 6d 70			L1:	.text "jmp"	;  name of word as a string, ending at wh_NameLastChar
>d51d	03					.byte (("jmp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d51e	91 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d520	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d521	08					.byte NN	;wh_Flags	dictionary flags
=54429					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d522	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d525					en = *	; remember here
>d520	03					.byte CL	;wh_CodeLength
>d525	4c					.byte $4c
>d526	6a 6d 70 2e 69			L1:	.text "jmp.i"	;  name of word as a string, ending at wh_NameLastChar
>d52b	25					.byte (("jmp.i"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d52c	9d d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d52e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d52f	08					.byte NN	;wh_Flags	dictionary flags
=54443					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d530	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d533					en = *	; remember here
>d52e	03					.byte CL	;wh_CodeLength
>d533	6c					.byte $6c
>d534	6a 73 72			L1:	.text "jsr"	;  name of word as a string, ending at wh_NameLastChar
>d537	43					.byte (("jsr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d538	ab d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d53a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d53b	08					.byte NN	;wh_Flags	dictionary flags
=54455					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d53c	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d53f					en = *	; remember here
>d53a	03					.byte CL	;wh_CodeLength
>d53f	20					.byte $20
>d540	6c 64 61			L1:	.text "lda"	;  name of word as a string, ending at wh_NameLastChar
>d543	23					.byte (("lda"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d544	b7 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d546	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d547	08					.byte NN	;wh_Flags	dictionary flags
=54467					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d548	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d54b					en = *	; remember here
>d546	03					.byte CL	;wh_CodeLength
>d54b	ad					.byte $ad
>d54c	6c 64 61 2e 23			L1:	.text "lda.#"	;  name of word as a string, ending at wh_NameLastChar
>d551	65					.byte (("lda.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d552	c3 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d554	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d555	08					.byte NN	;wh_Flags	dictionary flags
=54481					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d556	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d559					en = *	; remember here
>d554	03					.byte CL	;wh_CodeLength
>d559	a9					.byte $a9
>d55a	6c 64 61 2e 78			L1:	.text "lda.x"	;  name of word as a string, ending at wh_NameLastChar
>d55f	05					.byte (("lda.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d560	d1 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d562	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d563	08					.byte NN	;wh_Flags	dictionary flags
=54495					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d564	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d567					en = *	; remember here
>d562	03					.byte CL	;wh_CodeLength
>d567	bd					.byte $bd
>d568	6c 64 61 2e 79			L1:	.text "lda.y"	;  name of word as a string, ending at wh_NameLastChar
>d56d	25					.byte (("lda.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d56e	df d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d570	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d571	08					.byte NN	;wh_Flags	dictionary flags
=54509					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d572	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d575					en = *	; remember here
>d570	03					.byte CL	;wh_CodeLength
>d575	b9					.byte $b9
>d576	6c 64 61 2e 7a			L1:	.text "lda.z"	;  name of word as a string, ending at wh_NameLastChar
>d57b	45					.byte (("lda.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d57c	ed d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d57e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d57f	08					.byte NN	;wh_Flags	dictionary flags
=54523					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d580	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d583					en = *	; remember here
>d57e	03					.byte CL	;wh_CodeLength
>d583	a5					.byte $a5
>d584	6c 64 61 2e 7a 69 79		L1:	.text "lda.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d58b	27					.byte (("lda.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d58c	fb d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d58e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d58f	08					.byte NN	;wh_Flags	dictionary flags
=54539					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d590	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d593					en = *	; remember here
>d58e	03					.byte CL	;wh_CodeLength
>d593	b1					.byte $b1
>d594	6c 64 61 2e 7a 78		L1:	.text "lda.zx"	;  name of word as a string, ending at wh_NameLastChar
>d59a	06					.byte (("lda.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d59b	0b d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d59d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d59e	08					.byte NN	;wh_Flags	dictionary flags
=54554					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d59f	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5a2					en = *	; remember here
>d59d	03					.byte CL	;wh_CodeLength
>d5a2	b5					.byte $b5
>d5a3	6c 64 61 2e 7a 78 69		L1:	.text "lda.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d5aa	27					.byte (("lda.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5ab	1a d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5ad	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5ae	08					.byte NN	;wh_Flags	dictionary flags
=54570					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5af	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5b2					en = *	; remember here
>d5ad	03					.byte CL	;wh_CodeLength
>d5b2	a1					.byte $a1
>d5b3	6c 64 78			L1:	.text "ldx"	;  name of word as a string, ending at wh_NameLastChar
>d5b6	03					.byte (("ldx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5b7	2a d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5b9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5ba	08					.byte NN	;wh_Flags	dictionary flags
=54582					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5bb	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5be					en = *	; remember here
>d5b9	03					.byte CL	;wh_CodeLength
>d5be	ae					.byte $ae
>d5bf	6c 64 78 2e 23			L1:	.text "ldx.#"	;  name of word as a string, ending at wh_NameLastChar
>d5c4	65					.byte (("ldx.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5c5	36 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5c8	08					.byte NN	;wh_Flags	dictionary flags
=54596					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5c9	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5cc					en = *	; remember here
>d5c7	03					.byte CL	;wh_CodeLength
>d5cc	a2					.byte $a2
>d5cd	6c 64 78 2e 79			L1:	.text "ldx.y"	;  name of word as a string, ending at wh_NameLastChar
>d5d2	25					.byte (("ldx.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5d3	44 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5d5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5d6	08					.byte NN	;wh_Flags	dictionary flags
=54610					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5d7	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5da					en = *	; remember here
>d5d5	03					.byte CL	;wh_CodeLength
>d5da	be					.byte $be
>d5db	6c 64 78 2e 7a			L1:	.text "ldx.z"	;  name of word as a string, ending at wh_NameLastChar
>d5e0	45					.byte (("ldx.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5e1	52 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5e3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5e4	08					.byte NN	;wh_Flags	dictionary flags
=54624					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5e5	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5e8					en = *	; remember here
>d5e3	03					.byte CL	;wh_CodeLength
>d5e8	a6					.byte $a6
>d5e9	6c 64 78 2e 7a 79		L1:	.text "ldx.zy"	;  name of word as a string, ending at wh_NameLastChar
>d5ef	26					.byte (("ldx.zy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5f0	60 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5f2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5f3	08					.byte NN	;wh_Flags	dictionary flags
=54639					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5f4	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5f7					en = *	; remember here
>d5f2	03					.byte CL	;wh_CodeLength
>d5f7	b6					.byte $b6
>d5f8	6c 64 79			L1:	.text "ldy"	;  name of word as a string, ending at wh_NameLastChar
>d5fb	23					.byte (("ldy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5fc	6f d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5ff	08					.byte NN	;wh_Flags	dictionary flags
=54651					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d600	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d603					en = *	; remember here
>d5fe	03					.byte CL	;wh_CodeLength
>d603	ac					.byte $ac
>d604	6c 64 79 2e 23			L1:	.text "ldy.#"	;  name of word as a string, ending at wh_NameLastChar
>d609	65					.byte (("ldy.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d60a	7b d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d60c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d60d	08					.byte NN	;wh_Flags	dictionary flags
=54665					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d60e	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d611					en = *	; remember here
>d60c	03					.byte CL	;wh_CodeLength
>d611	a0					.byte $a0
>d612	6c 64 79 2e 78			L1:	.text "ldy.x"	;  name of word as a string, ending at wh_NameLastChar
>d617	05					.byte (("ldy.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d618	89 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d61a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d61b	08					.byte NN	;wh_Flags	dictionary flags
=54679					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d61c	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d61f					en = *	; remember here
>d61a	03					.byte CL	;wh_CodeLength
>d61f	bc					.byte $bc
>d620	6c 64 79 2e 7a			L1:	.text "ldy.z"	;  name of word as a string, ending at wh_NameLastChar
>d625	45					.byte (("ldy.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d626	97 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d628	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d629	08					.byte NN	;wh_Flags	dictionary flags
=54693					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d62a	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d62d					en = *	; remember here
>d628	03					.byte CL	;wh_CodeLength
>d62d	a4					.byte $a4
>d62e	6c 64 79 2e 7a 78		L1:	.text "ldy.zx"	;  name of word as a string, ending at wh_NameLastChar
>d634	06					.byte (("ldy.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d635	a5 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d637	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d638	08					.byte NN	;wh_Flags	dictionary flags
=54708					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d639	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d63c					en = *	; remember here
>d637	03					.byte CL	;wh_CodeLength
>d63c	b4					.byte $b4
>d63d	6c 73 72			L1:	.text "lsr"	;  name of word as a string, ending at wh_NameLastChar
>d640	43					.byte (("lsr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d641	b4 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d643	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d644	08					.byte NN	;wh_Flags	dictionary flags
=54720					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d645	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d648					en = *	; remember here
>d643	03					.byte CL	;wh_CodeLength
>d648	4e					.byte $4e
>d649	6c 73 72 2e 61			L1:	.text "lsr.a"	;  name of word as a string, ending at wh_NameLastChar
>d64e	25					.byte (("lsr.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d64f	c0 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d651	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d652	08					.byte NN	;wh_Flags	dictionary flags
=54734					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d653	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d656					en = *	; remember here
>d651	03					.byte CL	;wh_CodeLength
>d656	4a					.byte $4a
>d657	6c 73 72 2e 78			L1:	.text "lsr.x"	;  name of word as a string, ending at wh_NameLastChar
>d65c	05					.byte (("lsr.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d65d	ce d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d65f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d660	08					.byte NN	;wh_Flags	dictionary flags
=54748					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d661	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d664					en = *	; remember here
>d65f	03					.byte CL	;wh_CodeLength
>d664	5e					.byte $5e
>d665	6c 73 72 2e 7a			L1:	.text "lsr.z"	;  name of word as a string, ending at wh_NameLastChar
>d66a	45					.byte (("lsr.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d66b	dc d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d66d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d66e	08					.byte NN	;wh_Flags	dictionary flags
=54762					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d66f	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d672					en = *	; remember here
>d66d	03					.byte CL	;wh_CodeLength
>d672	46					.byte $46
>d673	6c 73 72 2e 7a 78		L1:	.text "lsr.zx"	;  name of word as a string, ending at wh_NameLastChar
>d679	06					.byte (("lsr.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d67a	ea d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d67c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d67d	08					.byte NN	;wh_Flags	dictionary flags
=54777					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d67e	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d681					en = *	; remember here
>d67c	03					.byte CL	;wh_CodeLength
>d681	56					.byte $56
>d682	6e 6f 70			L1:	.text "nop"	;  name of word as a string, ending at wh_NameLastChar
>d685	03					.byte (("nop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d686	f9 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d688	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d689	08					.byte NN	;wh_Flags	dictionary flags
=54789					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d68a	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d68d					en = *	; remember here
>d688	03					.byte CL	;wh_CodeLength
>d68d	ea					.byte $ea
>d68e	6f 72 61			L1:	.text "ora"	;  name of word as a string, ending at wh_NameLastChar
>d691	23					.byte (("ora"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d692	05 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d694	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d695	08					.byte NN	;wh_Flags	dictionary flags
=54801					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d696	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d699					en = *	; remember here
>d694	03					.byte CL	;wh_CodeLength
>d699	0d					.byte $0d
>d69a	6f 72 61 2e 23			L1:	.text "ora.#"	;  name of word as a string, ending at wh_NameLastChar
>d69f	65					.byte (("ora.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6a0	11 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6a3	08					.byte NN	;wh_Flags	dictionary flags
=54815					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6a4	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6a7					en = *	; remember here
>d6a2	03					.byte CL	;wh_CodeLength
>d6a7	09					.byte $09
>d6a8	6f 72 61 2e 78			L1:	.text "ora.x"	;  name of word as a string, ending at wh_NameLastChar
>d6ad	05					.byte (("ora.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6ae	1f d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6b0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6b1	08					.byte NN	;wh_Flags	dictionary flags
=54829					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6b2	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6b5					en = *	; remember here
>d6b0	03					.byte CL	;wh_CodeLength
>d6b5	1d					.byte $1d
>d6b6	6f 72 61 2e 79			L1:	.text "ora.y"	;  name of word as a string, ending at wh_NameLastChar
>d6bb	25					.byte (("ora.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6bc	2d d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6bf	08					.byte NN	;wh_Flags	dictionary flags
=54843					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6c0	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6c3					en = *	; remember here
>d6be	03					.byte CL	;wh_CodeLength
>d6c3	19					.byte $19
>d6c4	6f 72 61 2e 7a			L1:	.text "ora.z"	;  name of word as a string, ending at wh_NameLastChar
>d6c9	45					.byte (("ora.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6ca	3b d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6cc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6cd	08					.byte NN	;wh_Flags	dictionary flags
=54857					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6ce	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6d1					en = *	; remember here
>d6cc	03					.byte CL	;wh_CodeLength
>d6d1	05					.byte $05
>d6d2	6f 72 61 2e 7a 69 79		L1:	.text "ora.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d6d9	27					.byte (("ora.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6da	49 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6dd	08					.byte NN	;wh_Flags	dictionary flags
=54873					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6de	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6e1					en = *	; remember here
>d6dc	03					.byte CL	;wh_CodeLength
>d6e1	11					.byte $11
>d6e2	6f 72 61 2e 7a 78		L1:	.text "ora.zx"	;  name of word as a string, ending at wh_NameLastChar
>d6e8	06					.byte (("ora.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6e9	59 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6eb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6ec	08					.byte NN	;wh_Flags	dictionary flags
=54888					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6ed	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6f0					en = *	; remember here
>d6eb	03					.byte CL	;wh_CodeLength
>d6f0	15					.byte $15
>d6f1	6f 72 61 2e 7a 78 69		L1:	.text "ora.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d6f8	27					.byte (("ora.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6f9	68 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6fb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6fc	08					.byte NN	;wh_Flags	dictionary flags
=54904					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6fd	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d700					en = *	; remember here
>d6fb	03					.byte CL	;wh_CodeLength
>d700	01					.byte $01
>d701	70 68 61			L1:	.text "pha"	;  name of word as a string, ending at wh_NameLastChar
>d704	23					.byte (("pha"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d705	78 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d707	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d708	08					.byte NN	;wh_Flags	dictionary flags
=54916					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d709	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d70c					en = *	; remember here
>d707	03					.byte CL	;wh_CodeLength
>d70c	48					.byte $48
>d70d	70 68 70			L1:	.text "php"	;  name of word as a string, ending at wh_NameLastChar
>d710	03					.byte (("php"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d711	84 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d713	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d714	08					.byte NN	;wh_Flags	dictionary flags
=54928					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d715	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d718					en = *	; remember here
>d713	03					.byte CL	;wh_CodeLength
>d718	08					.byte $08
>d719	70 6c 61			L1:	.text "pla"	;  name of word as a string, ending at wh_NameLastChar
>d71c	23					.byte (("pla"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d71d	90 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d71f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d720	08					.byte NN	;wh_Flags	dictionary flags
=54940					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d721	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d724					en = *	; remember here
>d71f	03					.byte CL	;wh_CodeLength
>d724	68					.byte $68
>d725	70 6c 70			L1:	.text "plp"	;  name of word as a string, ending at wh_NameLastChar
>d728	03					.byte (("plp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d729	9c d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d72b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d72c	08					.byte NN	;wh_Flags	dictionary flags
=54952					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d72d	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d730					en = *	; remember here
>d72b	03					.byte CL	;wh_CodeLength
>d730	28					.byte $28
>d731	72 6f 6c			L1:	.text "rol"	;  name of word as a string, ending at wh_NameLastChar
>d734	83					.byte (("rol"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d735	a8 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d737	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d738	08					.byte NN	;wh_Flags	dictionary flags
=54964					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d739	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d73c					en = *	; remember here
>d737	03					.byte CL	;wh_CodeLength
>d73c	2e					.byte $2e
>d73d	72 6f 6c 2e 61			L1:	.text "rol.a"	;  name of word as a string, ending at wh_NameLastChar
>d742	25					.byte (("rol.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d743	b4 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d745	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d746	08					.byte NN	;wh_Flags	dictionary flags
=54978					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d747	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d74a					en = *	; remember here
>d745	03					.byte CL	;wh_CodeLength
>d74a	2a					.byte $2a
>d74b	72 6f 6c 2e 78			L1:	.text "rol.x"	;  name of word as a string, ending at wh_NameLastChar
>d750	05					.byte (("rol.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d751	c2 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d753	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d754	08					.byte NN	;wh_Flags	dictionary flags
=54992					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d755	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d758					en = *	; remember here
>d753	03					.byte CL	;wh_CodeLength
>d758	3e					.byte $3e
>d759	72 6f 6c 2e 7a			L1:	.text "rol.z"	;  name of word as a string, ending at wh_NameLastChar
>d75e	45					.byte (("rol.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d75f	d0 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d761	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d762	08					.byte NN	;wh_Flags	dictionary flags
=55006					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d763	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d766					en = *	; remember here
>d761	03					.byte CL	;wh_CodeLength
>d766	26					.byte $26
>d767	72 6f 6c 2e 7a 78		L1:	.text "rol.zx"	;  name of word as a string, ending at wh_NameLastChar
>d76d	06					.byte (("rol.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d76e	de d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d770	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d771	08					.byte NN	;wh_Flags	dictionary flags
=55021					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d772	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d775					en = *	; remember here
>d770	03					.byte CL	;wh_CodeLength
>d775	36					.byte $36
>d776	72 6f 72			L1:	.text "ror"	;  name of word as a string, ending at wh_NameLastChar
>d779	43					.byte (("ror"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d77a	ed d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d77c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d77d	08					.byte NN	;wh_Flags	dictionary flags
=55033					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d77e	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d781					en = *	; remember here
>d77c	03					.byte CL	;wh_CodeLength
>d781	6e					.byte $6e
>d782	72 6f 72 2e 61			L1:	.text "ror.a"	;  name of word as a string, ending at wh_NameLastChar
>d787	25					.byte (("ror.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d788	f9 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d78a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d78b	08					.byte NN	;wh_Flags	dictionary flags
=55047					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d78c	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d78f					en = *	; remember here
>d78a	03					.byte CL	;wh_CodeLength
>d78f	6a					.byte $6a
>d790	72 6f 72 2e 78			L1:	.text "ror.x"	;  name of word as a string, ending at wh_NameLastChar
>d795	05					.byte (("ror.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d796	07 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d798	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d799	08					.byte NN	;wh_Flags	dictionary flags
=55061					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d79a	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d79d					en = *	; remember here
>d798	03					.byte CL	;wh_CodeLength
>d79d	7e					.byte $7e
>d79e	72 6f 72 2e 7a			L1:	.text "ror.z"	;  name of word as a string, ending at wh_NameLastChar
>d7a3	45					.byte (("ror.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7a4	15 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7a6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7a7	08					.byte NN	;wh_Flags	dictionary flags
=55075					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7a8	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7ab					en = *	; remember here
>d7a6	03					.byte CL	;wh_CodeLength
>d7ab	66					.byte $66
>d7ac	72 6f 72 2e 7a 78		L1:	.text "ror.zx"	;  name of word as a string, ending at wh_NameLastChar
>d7b2	06					.byte (("ror.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7b3	23 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7b5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7b6	08					.byte NN	;wh_Flags	dictionary flags
=55090					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7b7	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7ba					en = *	; remember here
>d7b5	03					.byte CL	;wh_CodeLength
>d7ba	76					.byte $76
>d7bb	72 74 69			L1:	.text "rti"	;  name of word as a string, ending at wh_NameLastChar
>d7be	23					.byte (("rti"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7bf	32 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7c2	08					.byte NN	;wh_Flags	dictionary flags
=55102					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7c3	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7c6					en = *	; remember here
>d7c1	03					.byte CL	;wh_CodeLength
>d7c6	40					.byte $40
>d7c7	72 74 73			L1:	.text "rts"	;  name of word as a string, ending at wh_NameLastChar
>d7ca	63					.byte (("rts"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7cb	3e d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7ce	08					.byte NN	;wh_Flags	dictionary flags
=55114					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7cf	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7d2					en = *	; remember here
>d7cd	03					.byte CL	;wh_CodeLength
>d7d2	60					.byte $60
>d7d3	73 62 63			L1:	.text "sbc"	;  name of word as a string, ending at wh_NameLastChar
>d7d6	63					.byte (("sbc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7d7	4a d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7d9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7da	08					.byte NN	;wh_Flags	dictionary flags
=55126					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7db	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7de					en = *	; remember here
>d7d9	03					.byte CL	;wh_CodeLength
>d7de	ed					.byte $ed
>d7df	73 62 63 2e 23			L1:	.text "sbc.#"	;  name of word as a string, ending at wh_NameLastChar
>d7e4	65					.byte (("sbc.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7e5	56 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7e8	08					.byte NN	;wh_Flags	dictionary flags
=55140					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7e9	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7ec					en = *	; remember here
>d7e7	03					.byte CL	;wh_CodeLength
>d7ec	e9					.byte $e9
>d7ed	73 62 63 2e 78			L1:	.text "sbc.x"	;  name of word as a string, ending at wh_NameLastChar
>d7f2	05					.byte (("sbc.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7f3	64 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7f5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7f6	08					.byte NN	;wh_Flags	dictionary flags
=55154					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7f7	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7fa					en = *	; remember here
>d7f5	03					.byte CL	;wh_CodeLength
>d7fa	fd					.byte $fd
>d7fb	73 62 63 2e 79			L1:	.text "sbc.y"	;  name of word as a string, ending at wh_NameLastChar
>d800	25					.byte (("sbc.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d801	72 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d803	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d804	08					.byte NN	;wh_Flags	dictionary flags
=55168					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d805	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d808					en = *	; remember here
>d803	03					.byte CL	;wh_CodeLength
>d808	f9					.byte $f9
>d809	73 62 63 2e 7a			L1:	.text "sbc.z"	;  name of word as a string, ending at wh_NameLastChar
>d80e	45					.byte (("sbc.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d80f	80 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d811	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d812	08					.byte NN	;wh_Flags	dictionary flags
=55182					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d813	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d816					en = *	; remember here
>d811	03					.byte CL	;wh_CodeLength
>d816	e5					.byte $e5
>d817	73 62 63 2e 7a 69 79		L1:	.text "sbc.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d81e	27					.byte (("sbc.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d81f	8e d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d821	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d822	08					.byte NN	;wh_Flags	dictionary flags
=55198					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d823	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d826					en = *	; remember here
>d821	03					.byte CL	;wh_CodeLength
>d826	f1					.byte $f1
>d827	73 62 63 2e 7a 78		L1:	.text "sbc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d82d	06					.byte (("sbc.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d82e	9e d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d830	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d831	08					.byte NN	;wh_Flags	dictionary flags
=55213					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d832	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d835					en = *	; remember here
>d830	03					.byte CL	;wh_CodeLength
>d835	f5					.byte $f5
>d836	73 62 63 2e 7a 78 69		L1:	.text "sbc.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d83d	27					.byte (("sbc.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d83e	ad d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d840	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d841	08					.byte NN	;wh_Flags	dictionary flags
=55229					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d842	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d845					en = *	; remember here
>d840	03					.byte CL	;wh_CodeLength
>d845	e1					.byte $e1
>d846	73 65 63			L1:	.text "sec"	;  name of word as a string, ending at wh_NameLastChar
>d849	63					.byte (("sec"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d84a	bd d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d84c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d84d	08					.byte NN	;wh_Flags	dictionary flags
=55241					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d84e	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d851					en = *	; remember here
>d84c	03					.byte CL	;wh_CodeLength
>d851	38					.byte $38
>d852	73 65 64			L1:	.text "sed"	;  name of word as a string, ending at wh_NameLastChar
>d855	83					.byte (("sed"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d856	c9 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d858	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d859	08					.byte NN	;wh_Flags	dictionary flags
=55253					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d85a	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d85d					en = *	; remember here
>d858	03					.byte CL	;wh_CodeLength
>d85d	f8					.byte $f8
>d85e	73 65 69			L1:	.text "sei"	;  name of word as a string, ending at wh_NameLastChar
>d861	23					.byte (("sei"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d862	d5 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d864	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d865	08					.byte NN	;wh_Flags	dictionary flags
=55265					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d866	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d869					en = *	; remember here
>d864	03					.byte CL	;wh_CodeLength
>d869	78					.byte $78
>d86a	73 74 61			L1:	.text "sta"	;  name of word as a string, ending at wh_NameLastChar
>d86d	23					.byte (("sta"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d86e	e1 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d870	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d871	08					.byte NN	;wh_Flags	dictionary flags
=55277					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d872	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d875					en = *	; remember here
>d870	03					.byte CL	;wh_CodeLength
>d875	8d					.byte $8d
>d876	73 74 61 2e 78			L1:	.text "sta.x"	;  name of word as a string, ending at wh_NameLastChar
>d87b	05					.byte (("sta.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d87c	ed d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d87e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d87f	08					.byte NN	;wh_Flags	dictionary flags
=55291					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d880	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d883					en = *	; remember here
>d87e	03					.byte CL	;wh_CodeLength
>d883	9d					.byte $9d
>d884	73 74 61 2e 79			L1:	.text "sta.y"	;  name of word as a string, ending at wh_NameLastChar
>d889	25					.byte (("sta.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d88a	fb d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d88c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d88d	08					.byte NN	;wh_Flags	dictionary flags
=55305					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d88e	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d891					en = *	; remember here
>d88c	03					.byte CL	;wh_CodeLength
>d891	99					.byte $99
>d892	73 74 61 2e 7a			L1:	.text "sta.z"	;  name of word as a string, ending at wh_NameLastChar
>d897	45					.byte (("sta.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d898	09 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d89a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d89b	08					.byte NN	;wh_Flags	dictionary flags
=55319					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d89c	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d89f					en = *	; remember here
>d89a	03					.byte CL	;wh_CodeLength
>d89f	85					.byte $85
>d8a0	73 74 61 2e 7a 69 79		L1:	.text "sta.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d8a7	27					.byte (("sta.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d8a8	17 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d8aa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d8ab	08					.byte NN	;wh_Flags	dictionary flags
=55335					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d8ac	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d8af					en = *	; remember here
>d8aa	03					.byte CL	;wh_CodeLength
>d8af	91					.byte $91
>d8b0	73 74 61 2e 7a 78		L1:	.text "sta.zx"	;  name of word as a string, ending at wh_NameLastChar
>d8b6	06					.byte (("sta.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d8b7	27 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d8b9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d8ba	08					.byte NN	;wh_Flags	dictionary flags
=55350					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d8bb	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d8be					en = *	; remember here
>d8b9	03					.byte CL	;wh_CodeLength
>d8be	95					.byte $95
>d8bf	73 74 61 2e 7a 78 69		L1:	.text "sta.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d8c6	27					.byte (("sta.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d8c7	36 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d8c9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d8ca	08					.byte NN	;wh_Flags	dictionary flags
=55366					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d8cb	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d8ce					en = *	; remember here
>d8c9	03					.byte CL	;wh_CodeLength
>d8ce	81					.byte $81
>d8cf	73 74 78			L1:	.text "stx"	;  name of word as a string, ending at wh_NameLastChar
>d8d2	03					.byte (("stx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d8d3	46 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d8d5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d8d6	08					.byte NN	;wh_Flags	dictionary flags
=55378					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d8d7	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d8da					en = *	; remember here
>d8d5	03					.byte CL	;wh_CodeLength
>d8da	8e					.byte $8e
>d8db	73 74 78 2e 7a			L1:	.text "stx.z"	;  name of word as a string, ending at wh_NameLastChar
>d8e0	45					.byte (("stx.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d8e1	52 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d8e3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d8e4	08					.byte NN	;wh_Flags	dictionary flags
=55392					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d8e5	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d8e8					en = *	; remember here
>d8e3	03					.byte CL	;wh_CodeLength
>d8e8	86					.byte $86
>d8e9	73 74 78 2e 7a 79		L1:	.text "stx.zy"	;  name of word as a string, ending at wh_NameLastChar
>d8ef	26					.byte (("stx.zy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d8f0	60 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d8f2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d8f3	08					.byte NN	;wh_Flags	dictionary flags
=55407					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d8f4	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d8f7					en = *	; remember here
>d8f2	03					.byte CL	;wh_CodeLength
>d8f7	96					.byte $96
>d8f8	73 74 79			L1:	.text "sty"	;  name of word as a string, ending at wh_NameLastChar
>d8fb	23					.byte (("sty"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d8fc	6f d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d8fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d8ff	08					.byte NN	;wh_Flags	dictionary flags
=55419					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d900	20 3d d1	jsr $d13d		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d903					en = *	; remember here
>d8fe	03					.byte CL	;wh_CodeLength
>d903	8c					.byte $8c
>d904	73 74 79 2e 7a			L1:	.text "sty.z"	;  name of word as a string, ending at wh_NameLastChar
>d909	45					.byte (("sty.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d90a	7b d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d90c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d90d	08					.byte NN	;wh_Flags	dictionary flags
=55433					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d90e	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d911					en = *	; remember here
>d90c	03					.byte CL	;wh_CodeLength
>d911	84					.byte $84
>d912	73 74 79 2e 7a 78		L1:	.text "sty.zx"	;  name of word as a string, ending at wh_NameLastChar
>d918	06					.byte (("sty.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d919	89 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d91b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d91c	08					.byte NN	;wh_Flags	dictionary flags
=55448					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d91d	20 27 d1	jsr $d127		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d920					en = *	; remember here
>d91b	03					.byte CL	;wh_CodeLength
>d920	94					.byte $94
>d921	74 61 78			L1:	.text "tax"	;  name of word as a string, ending at wh_NameLastChar
>d924	03					.byte (("tax"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d925	98 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d927	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d928	08					.byte NN	;wh_Flags	dictionary flags
=55460					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d929	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d92c					en = *	; remember here
>d927	03					.byte CL	;wh_CodeLength
>d92c	aa					.byte $aa
>d92d	74 61 79			L1:	.text "tay"	;  name of word as a string, ending at wh_NameLastChar
>d930	23					.byte (("tay"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d931	a4 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d933	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d934	08					.byte NN	;wh_Flags	dictionary flags
=55472					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d935	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d938					en = *	; remember here
>d933	03					.byte CL	;wh_CodeLength
>d938	a8					.byte $a8
>d939	74 73 78			L1:	.text "tsx"	;  name of word as a string, ending at wh_NameLastChar
>d93c	03					.byte (("tsx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d93d	b0 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d93f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d940	08					.byte NN	;wh_Flags	dictionary flags
=55484					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d941	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d944					en = *	; remember here
>d93f	03					.byte CL	;wh_CodeLength
>d944	ba					.byte $BA
>d945	74 78 61			L1:	.text "txa"	;  name of word as a string, ending at wh_NameLastChar
>d948	23					.byte (("txa"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d949	bc d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d94b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d94c	08					.byte NN	;wh_Flags	dictionary flags
=55496					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d94d	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d950					en = *	; remember here
>d94b	03					.byte CL	;wh_CodeLength
>d950	8a					.byte $8a
>d951	74 78 73			L1:	.text "txs"	;  name of word as a string, ending at wh_NameLastChar
>d954	63					.byte (("txs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d955	c8 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d957	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d958	08					.byte NN	;wh_Flags	dictionary flags
=55508					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d959	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d95c					en = *	; remember here
>d957	03					.byte CL	;wh_CodeLength
>d95c	9a					.byte $9a
>d95d	74 79 61			L1:	.text "tya"	;  name of word as a string, ending at wh_NameLastChar
>d960	23					.byte (("tya"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d961	d4 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d963	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d964	08					.byte NN	;wh_Flags	dictionary flags
=55520					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d965	20 46 d1	jsr $d146		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d968					en = *	; remember here
>d963	03					.byte CL	;wh_CodeLength
>d968	98					.byte $98
=55520					asm_table = WordListLink ; head of instruction word list for disassembler
>d969	70 75 73 68 2d 61		L1:	.text "push-a"	;  name of word as a string, ending at wh_NameLastChar
>d96f	26					.byte (("push-a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d970	e0 d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d972	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d973	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55535					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d974	a9 f0		lda #$f0			lda #<PushZA
.d976	a0 b8		ldy #$b8			ldy #>PushZA
.d978	4c 4d ce	jmp $ce4d			jmp Jsr_Comma_YA
=7					CL	.var *-(WordListLink+wh_Xt)
=$d97b					en = *	; remember here
>d972	07					.byte CL	;wh_CodeLength
>d97b	2d 2d 3e			L1:	.text "-->"	;  name of word as a string, ending at wh_NameLastChar
>d97e	c3					.byte (("-->"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d97f	ef d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d981	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d982	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55550					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d983	4c 31 cb	jmp $cb31			jmp Here
=3					CL	.var *-(WordListLink+wh_Xt)
=$d986					en = *	; remember here
>d981	03					.byte CL	;wh_CodeLength
>d986	3c 6a				L1:	.text "<j"	;  name of word as a string, ending at wh_NameLastChar
>d988	42					.byte (("<j"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d989	fe d8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d98b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d98c	04					.byte IM	;wh_Flags	dictionary flags
=55560					WordListLink ::= *-wh_xt ; remember the nt of this word for later
=0					CL	.var *-(WordListLink+wh_Xt)
=$d98d					en = *	; remember here
>d98b	00					.byte CL	;wh_CodeLength
.d98d	60		rts				rts
>d98e	3c 62				L1:	.text "<b"	;  name of word as a string, ending at wh_NameLastChar
>d990	42					.byte (("<b"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d991	08 d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d993	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d994	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55568					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d995					asm_back_branch:
.d995	20 31 cb	jsr $cb31			jsr Here		; ( addr-l addr-h )
.d998	20 d2 cc	jsr $ccd2			jsr Minus		; ( offset )
.d99b	a9 fe		lda #$fe			lda #$fe
.d99d	4c 54 cb	jmp $cb54			jmp Minus_A
=11					CL	.var *-(WordListLink+wh_Xt)
=$d9a0					en = *	; remember here
>d993	0b					.byte CL	;wh_CodeLength
>d9a0	44 69 73 41 73 6d		L1:	.text "DisAsm"	;  name of word as a string, ending at wh_NameLastChar
>d9a6	a6					.byte (("DisAsm"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d9a7	10 d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d9a9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d9aa	08					.byte NN	;wh_Flags	dictionary flags
=55590					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d9ab					DisAsm:
.d9ab	20 41 c5	jsr $c541			jsr Bounds		; ( addr_end addr )
.d9ae					_instr:
.d9ae	20 22 b5	jsr $b522			jsr underflow_2
.d9b1	b5 24		lda $24,x			lda DStack+0,x		; addr >= addr_end?
.d9b3	d5 26		cmp $26,x			cmp DStack+2,x
.d9b5	b5 25		lda $25,x			lda DStack+1,x
.d9b7	f5 27		sbc $27,x			sbc DStack+3,x
.d9b9	90 03		bcc $d9be			bcc +
.d9bb	4c 0a c6	jmp $c60a			jmp Two_drop		; discard parms & return
.d9be					+
.d9be	20 28 ac	jsr $ac28			jsr CR			; new line
.d9c1	20 85 d0	jsr $d085			jsr Dup			; print address
.d9c4	20 bd a9	jsr $a9bd			jsr Dot_Hex
.d9c7	20 00 cf	jsr $cf00			jsr Space
.d9ca	a1 24		lda ($24,x)			lda (DStack+0,x)	; print opcode byte
.d9cc	20 0d db	jsr $db0d			jsr _print_a
.d9cf	a1 24		lda ($24,x)			lda (DStack+0,x)	; save opcode
.d9d1	85 16		sta $16				sta tmp2
.d9d3	20 65 cb	jsr $cb65			jsr One_plus
.d9d6	a9 e0		lda #$e0			lda #<asm_table		; for each asm opcode word
.d9d8	a0 d8		ldy #$d8			ldy #>asm_table
.d9da	85 14		sta $14				sta tmp1+0
.d9dc	84 15		sty $15				sty tmp1+1
.d9de	d0 0f		bne $d9ef			bne _WTest
.d9e0	a0 82		ldy #$82	_WNext:		ldy #wh_WordListLink+1	;   next entry
.d9e2	b1 14		lda ($14),y			lda (tmp1),y
.d9e4	f0 2e		beq $da14			beq _unknown
.d9e6	48		pha				pha
.d9e7	88		dey				dey
.d9e8	b1 14		lda ($14),y			lda (tmp1),y
.d9ea	85 14		sta $14				sta tmp1+0
.d9ec	68		pla				pla
.d9ed	85 15		sta $15				sta tmp1+1
.d9ef	a0 88		ldy #$88	_WTest:		ldy #wh_Xt+3		;   opcode match?
.d9f1	b1 14		lda ($14),y			lda (tmp1),y
.d9f3	c5 16		cmp $16				cmp tmp2
.d9f5	d0 e9		bne $d9e0			bne _WNext
.d9f7	a5 16		lda $16				lda tmp2		; save opcode
.d9f9	48		pha				pha
.d9fa	a5 15		lda $15				lda tmp1+1		; save its nt
.d9fc	48		pha				pha
.d9fd	a5 14		lda $14				lda tmp1+0
.d9ff	48		pha				pha
.da00	a0 86		ldy #$86			ldy #wh_xt+1		; get processor routine addr lo byte from JSR
.da02	b1 14		lda ($14),y			lda (tmp1),y
.da04	c9 46		cmp #$46			cmp #<asm_0		; goto disasm processor
.da06	f0 17		beq $da1f			beq _c0
.da08	c9 27		cmp #$27			cmp #<asm_1
.da0a	f0 49		beq $da55			beq _c1
.da0c	c9 3d		cmp #$3d			cmp #<asm_2
.da0e	f0 61		beq $da71			beq _c2
.da10	c9 07		cmp #$07			cmp #<asm_r
.da12	f0 18		beq $da2c			beq _cr
.da14					_unknown:
.da14	20 ee da	jsr $daee			jsr _tab		; to source area
.da17	a9 3f		lda #$3f			lda #'?'
.da19	20 f3 ce	jsr $cef3			jsr Emit_A
.da1c	4c ae d9	jmp $d9ae			jmp _instr
.da1f					_c0:
.da1f	20 ee da	jsr $daee			jsr _tab		; to source area
.da22	68		pla				pla			; get opcode word nt
.da23	a8		tay				tay
.da24	68		pla				pla
.da25	20 f3 da	jsr $daf3			jsr _print_opcode
.da28	68		pla				pla			; discard opcode
.da29	4c ae d9	jmp $d9ae			jmp _instr
.da2c					_cr:
.da2c	20 04 db	jsr $db04			jsr _get_byte		; get displacement byte
.da2f	a0 00		ldy #$00			ldy #0			; sign extend displacement
.da31	09 00		ora #$00			ora #0
.da33	10 01		bpl $da36			bpl +
.da35	88		dey				dey
.da36	20 be b8	jsr $b8be	+		jsr PushYA
.da39	20 85 d0	jsr $d085			jsr Dup			; save for TypeSymbol
.da3c	20 ee da	jsr $daee			jsr _tab		; to source area
.da3f	20 1e cd	jsr $cd1e			jsr U_Dot		; print dest address
.da42	68		pla				pla			; get opcode word nt
.da43	a8		tay				tay
.da44	68		pla				pla
.da45	20 f3 da	jsr $daf3			jsr _print_opcode
.da48	68		pla				pla			; discard opcode
.da49	20 5c d0	jsr $d05c			jsr Over		; calc dest addr
.da4c	20 b9 cc	jsr $ccb9			jsr Plus
.da4f	20 9e 81	jsr $819e			jsr TypeSymbol		; print dest addr symbolic
.da52	4c ae d9	jmp $d9ae			jmp _instr
.da55					_c1:
.da55	20 04 db	jsr $db04			jsr _get_byte		; get operand
.da58	20 f0 b8	jsr $b8f0			jsr PushZA
.da5b	20 ee da	jsr $daee			jsr _tab		; to source area
.da5e	20 85 d0	jsr $d085			jsr Dup
.da61	20 1e cd	jsr $cd1e			jsr U_Dot		; print operand
.da64	68		pla				pla			; get opcode word nt
.da65	a8		tay				tay
.da66	68		pla				pla
.da67	20 f3 da	jsr $daf3			jsr _print_opcode
.da6a	68		pla				pla			; discard opcode
.da6b	20 9e 81	jsr $819e			jsr TypeSymbol
.da6e	4c ae d9	jmp $d9ae			jmp _instr
.da71					_c2:
.da71	20 04 db	jsr $db04			jsr _get_byte		; get operand lo byte
.da74	48		pha				pha
.da75	20 04 db	jsr $db04			jsr _get_byte		; get operand hi byte
.da78	ca		dex				dex			; push operand bytes
.da79	ca		dex				dex
.da7a	95 25		sta $25,x			sta DStack+1,x
.da7c	68		pla				pla
.da7d	95 24		sta $24,x			sta DStack+0,x
.da7f	20 ee da	jsr $daee			jsr _tab		; to source area
.da82	20 85 d0	jsr $d085			jsr Dup
.da85	20 1e cd	jsr $cd1e			jsr U_Dot		; print operand
.da88	68		pla				pla			; AY= opcode word nt
.da89	a8		tay				tay
.da8a	68		pla				pla
.da8b	20 f3 da	jsr $daf3			jsr _print_opcode
.da8e	20 85 d0	jsr $d085			jsr Dup
.da91	20 9e 81	jsr $819e			jsr TypeSymbol		; print operand as symbol
.da94	68		pla				pla			; get opcode
.da95	c9 20		cmp #$20			cmp #$20		;  JSR
.da97	f0 09		beq $daa2			beq _jsr
.da99	e8		inx		_jdrop:		inx			; Drop operand
.da9a	e8		inx				inx
.da9b	4c ae d9	jmp $d9ae			jmp _instr		; ( addr_end addr )
.da9e	e8		inx		_2drop:		inx			; Drop jsr_nt
.da9f	e8		inx				inx
.daa0	d0 f7		bne $da99			bne _jdrop
.daa2					_jsr:
.daa2	20 e3 b4	jsr $b4e3			jsr PopYA
.daa5	c9 cf		cmp #$cf			cmp #<sliteral_runtime	; string literal?
.daa7	d0 42		bne $daeb			bne _not_sliteral
.daa9	c0 b9		cpy #$b9			cpy #>sliteral_runtime
.daab	d0 3e		bne $daeb			bne _not_sliteral
.daad	20 28 ac	jsr $ac28			jsr CR
.dab0	20 85 d0	jsr $d085			jsr Dup			; ( addr_end addr addr )
.dab3	20 bd a9	jsr $a9bd			jsr Dot_Hex
.dab6	20 00 cf	jsr $cf00			jsr Space
.dab9	20 85 d0	jsr $d085			jsr Dup			; ( addr_end ? addr )
.dabc	20 04 db	jsr $db04			jsr _get_byte		; get JMP opcode
.dabf	20 04 db	jsr $db04			jsr _get_byte		; get JMP addr lo byte
.dac2	95 26		sta $26,x			sta DStack+2,x
.dac4	20 04 db	jsr $db04			jsr _get_byte		; get JMP addr hi byte
.dac7	95 27		sta $27,x			sta DStack+3,x		; ( addr_end string_end addr )
.dac9	20 28 ac	jsr $ac28			jsr CR
.dacc	20 85 d0	jsr $d085			jsr Dup
.dacf	20 bd a9	jsr $a9bd			jsr Dot_Hex
.dad2	20 00 cf	jsr $cf00			jsr Space
.dad5	b5 24		lda $24,x	_slit_11:	lda DStack+0,x		; done with string data?
.dad7	d5 26		cmp $26,x			cmp DStack+2,x
.dad9	b5 25		lda $25,x			lda DStack+1,x
.dadb	f5 27		sbc $27,x			sbc DStack+3,x
.dadd	b0 06		bcs $dae5			bcs _slit_19
.dadf	20 04 db	jsr $db04			jsr _get_byte
.dae2	4c d5 da	jmp $dad5			jmp _slit_11
.dae5					_slit_19:
.dae5	20 91 ca	jsr $ca91			jsr Nip			; ( addr_end addr )
.dae8	4c ae d9	jmp $d9ae			jmp _instr
.daeb					_not_sliteral:
.daeb	4c ae d9	jmp $d9ae			jmp _instr
.daee					_tab:
.daee	a9 09		lda #$09			lda #9
.daf0	4c f3 ce	jmp $cef3			jmp Emit_A
.daf3					_print_opcode:
.daf3	20 93 d0	jsr $d093			jsr PushAY		; save opcode word nt
.daf6	20 00 cf	jsr $cf00			jsr Space
.daf9	20 00 bf	jsr $bf00			jsr Name_To_String	; get name string
.dafc	4c 0d cf	jmp $cf0d			jmp Type		; type word name
.daff					_get_byte_silent:
.daff	a1 24		lda ($24,x)			lda (DStack+0,x)
.db01	4c 65 cb	jmp $cb65			jmp One_plus
.db04					_get_byte:
.db04	20 ff da	jsr $daff			jsr _get_byte_silent
.db07	48		pha				pha
.db08	20 0d db	jsr $db0d			jsr _print_a
.db0b	68		pla				pla
.db0c	60		rts				rts
.db0d					_print_a:
.db0d	20 f0 b8	jsr $b8f0			jsr PushZA
.db10	20 9b a9	jsr $a99b			jsr C_Dot_Hex
.db13	4c 00 cf	jmp $cf00			jmp Space
=55590					assembler_dictionary_start = WordListLink ; END of ASSEMBLER-WORDLIST
=0					WordListLink .var 0	; start wordlist
>db16	6c				L1:	.text "l"	;  name of word as a string, ending at wh_NameLastChar
>db17	81					.byte (("l"[-1]&7)<<5)+(*-L1)	;wh_HNL
>db18	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>db1a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>db1b	08					.byte NN	;wh_Flags	dictionary flags
=55959					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.db1c	4c 71 a5	jmp $a571	Editor_l:	jmp ListScr
=3					CL	.var *-(WordListLink+wh_Xt)
=$db1f					en = *	; remember here
>db1a	03					.byte CL	;wh_CodeLength
.db1f					Editor_Screen_Helper:
.db1f	20 85 d0	jsr $d085			jsr Dup
.db22	20 75 a3	jsr $a375			jsr Scr
.db25	20 d2 cf	jsr $cfd2			jsr Store
.db28	4c 89 a4	jmp $a489			jmp Buffer
>db2b	65 6e 74 65 72 2d 73 63		L1:	.text "enter-screen"	;  name of word as a string, ending at wh_NameLastChar
>db33	72 65 65 6e
>db37	cc					.byte (("enter-screen"[-1]&7)<<5)+(*-L1)	;wh_HNL
>db38	97 da					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>db3a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>db3b	08					.byte NN	;wh_Flags	dictionary flags
=55991					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.db3c					Editor_Enter_Screen:
.db3c	20 1f db	jsr $db1f			jsr Editor_Screen_Helper
.db3f	a9 00		lda #$00			lda #0			; Overwrite the lines one at a time.
.db41	95 24		sta $24,x	_loop:		sta DStack+0,x
.db43	20 f0 b8	jsr $b8f0			jsr PushZA		; Put the current line number on the stack.
.db46	20 aa db	jsr $dbaa			jsr Editor_o		; prompt for overwrite.
.db49	f6 24		inc $24,x			inc DStack+0,x		; Move on to the next line.
.db4b	b5 24		lda $24,x			lda DStack+0,x
.db4d	c9 10		cmp #$10			cmp #16
.db4f	90 f0		bcc $db41			bcc _loop
.db51	e8		inx				inx			; Drop work area
.db52	e8		inx				inx
=23					CL	.var *-(WordListLink+wh_Xt)
=$db53					en = *	; remember here
>db3a	17					.byte CL	;wh_CodeLength
.db53	60		rts				rts
>db54	6c 69 6e 65			L1:	.text "line"	;  name of word as a string, ending at wh_NameLastChar
>db58	a4					.byte (("line"[-1]&7)<<5)+(*-L1)	;wh_HNL
>db59	b7 da					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>db5b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>db5c	08					.byte NN	;wh_Flags	dictionary flags
=56024					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.db5d					Editor_line:
.db5d	a9 06		lda #$06			lda #6		; Multiply the TOS by 64 (chars/line) to compute offset.
.db5f	20 58 cc	jsr $cc58			jsr LShift_A	; *64 is same as left shift 6 times.
.db62	20 75 a3	jsr $a375			jsr Scr
.db65	20 ef cf	jsr $cfef			jsr Fetch
.db68	20 1f a4	jsr $a41f			jsr Block
.db6b	4c b9 cc	jmp $ccb9			jmp Plus
=17					CL	.var *-(WordListLink+wh_Xt)
=$db6e					en = *	; remember here
>db5b	11					.byte CL	;wh_CodeLength
>db6e	65 72 61 73 65 2d 73 63		L1:	.text "erase-screen"	;  name of word as a string, ending at wh_NameLastChar
>db76	72 65 65 6e
>db7a	cc					.byte (("erase-screen"[-1]&7)<<5)+(*-L1)	;wh_HNL
>db7b	d8 da					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>db7d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>db7e	08					.byte NN	;wh_Flags	dictionary flags
=56058					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.db7f					Editor_Erase_Screen:
.db7f	20 1f db	jsr $db1f			jsr Editor_Screen_Helper
.db82	a9 00		lda #$00			lda #<1024
.db84	a0 04		ldy #$04			ldy #>1024
.db86	20 be b8	jsr $b8be			jsr PushYA
.db89	20 4a bf	jsr $bf4a			jsr Blank		; Erase the entire block (fill with spaces).
.db8c	4c 75 a4	jmp $a475			jmp Update		; Mark buffer as updated.
=16					CL	.var *-(WordListLink+wh_Xt)
=$db8f					en = *	; remember here
>db7d	10					.byte CL	;wh_CodeLength
>db8f	65 6c				L1:	.text "el"	;  name of word as a string, ending at wh_NameLastChar
>db91	82					.byte (("el"[-1]&7)<<5)+(*-L1)	;wh_HNL
>db92	fa da					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>db94	03					.byte 3		;wh_CodeLength  (with placeholder value)
>db95	08					.byte NN	;wh_Flags	dictionary flags
=56081					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.db96					Editor_el:
.db96	20 5d db	jsr $db5d			jsr Editor_line
.db99	a9 40		lda #$40			lda #64			;(# of chars/line)
.db9b	20 f0 b8	jsr $b8f0			jsr PushZA
.db9e	20 4a bf	jsr $bf4a			jsr Blank		; Fill with spaces.
.dba1	4c 75 a4	jmp $a475			jmp Update		; Mark buffer as updated.
=14					CL	.var *-(WordListLink+wh_Xt)
=$dba4					en = *	; remember here
>db94	0e					.byte CL	;wh_CodeLength
>dba4	6f				L1:	.text "o"	;  name of word as a string, ending at wh_NameLastChar
>dba5	e1					.byte (("o"[-1]&7)<<5)+(*-L1)	;wh_HNL
>dba6	11 db					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>dba8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>dba9	08					.byte NN	;wh_Flags	dictionary flags
=56101					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.dbaa					Editor_o:
.dbaa	20 28 ac	jsr $ac28			jsr CR
.dbad	20 85 d0	jsr $d085			jsr Dup
.dbb0	a9 02		lda #$02			lda #2
.dbb2	20 52 cd	jsr $cd52			jsr U_Dot_R_A
.dbb5	20 00 cf	jsr $cf00			jsr Space
.dbb8	a9 2a		lda #$2a			lda #'*'
.dbba	20 f3 ce	jsr $cef3			jsr Emit_A
.dbbd	20 00 cf	jsr $cf00			jsr Space
.dbc0	20 5d db	jsr $db5d			jsr Editor_line
.dbc3	20 85 d0	jsr $d085			jsr Dup		; Save a copy of the line address for later.
.dbc6	a9 40		lda #$40			lda #64		; chars/line
.dbc8	20 f0 b8	jsr $b8f0			jsr PushZA
.dbcb	20 c5 c3	jsr $c3c5			jsr Accept
.dbce	20 85 d0	jsr $d085			jsr Dup
.dbd1	20 af cf	jsr $cfaf			jsr Not_Rot
.dbd4	20 b9 cc	jsr $ccb9			jsr Plus
.dbd7	a9 40		lda #$40			lda #64		; chars/line
.dbd9	20 f0 b8	jsr $b8f0			jsr PushZA
.dbdc	20 89 cf	jsr $cf89			jsr Rot
.dbdf	20 d2 cc	jsr $ccd2			jsr Minus
.dbe2	20 4a bf	jsr $bf4a			jsr Blank
.dbe5	4c 75 a4	jmp $a475			jmp Update
=62					CL	.var *-(WordListLink+wh_Xt)
=$dbe8					en = *	; remember here
>dba8	3e					.byte CL	;wh_CodeLength
=56101					editor_dictionary_start = WordListLink ; END of EDITOR-WORDLIST

;******  Processing file: platform/../strings.asm

>dbe8	20 6f 6b 00			str_ok:         .text " ok", 0         ; note space at beginning
>dbec	20 63 6f 6d 70 69 6c 65		str_compiled:   .text " compiled", 0   ; note space at beginning
>dbf4	64 00
>dbf6	72 65 64 65 66 69 6e 65		str_redefined:  .text "redefined ", 0  ; note space at end
>dbfe	64 20 00
>dc01	41 73 73 65 6d 62 6c 65		str_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>dc09	72 20 00
>dc0c	45 64 69 74 6f 72 20 00		str_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>dc14	46 6f 72 74 68 20 00		str_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>dc1b	52 6f 6f 74 20 00		str_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>dc21	66 6c 61 67 73 3a 00		str_see_flags:  .text "flags:", 0
>dc28	6e 74 3a 20 24 00		str_see_nt:     .text "nt: $", 0
>dc2e	78 74 3a 20 24 00		str_see_xt:     .text "xt: $", 0
>dc34	73 69 7a 65 3a 20 23 00		str_see_size:   .text "size: #", 0
.dc3c					Exception_Text_List:
>dc3c	ff 00					.text $100+err_Abort,0
>dc3e	fe 00					.text $100+err_AbortQuote,0
>dc40	fd 53 74 61 63 6b 20 4f			.text $100+err_Stack_Overflow,"Stack Overflow",0
>dc48	76 65 72 66 6c 6f 77 00
>dc50	fc 53 74 61 63 6b 20 55			.text $100+err_Stack_Underflow,"Stack Underflow",0
>dc58	6e 64 65 72 66 6c 6f 77 00
>dc61	f9 64 6f 2d 6c 6f 6f 70			.text $100+err_DoLoop_TooDeep,"do-loops nested too deeply during execution",0
>dc69	73 20 6e 65 73 74 65 64 20 74 6f 6f 20 64 65 65
>dc79	70 6c 79 20 64 75 72 69 6e 67 20 65 78 65 63 75
>dc89	74 69 6f 6e 00
>dc8e	f6 44 69 76 69 64 65 20			.text $100+err_DivideBy0,"Divide by 0",0
>dc96	62 79 20 30 00
>dc9b	f5 6f 75 74 20 6f 66 20			.text $100+err_OutOfRange,"out of range",0
>dca3	72 61 6e 67 65 00
>dca9	f4 61 72 67 75 6d 65 6e			.text $100+err_ArgTypeMismatch,"argument type mismatch",0
>dcb1	74 20 74 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>dcc1	f3 55 6e 64 65 66 69 6e			.text $100+err_UndefinedWord,"Undefined word",0
>dcc9	65 64 20 77 6f 72 64 00
>dcd1	f2 49 6e 74 65 72 70 72			.text $100+err_CompileOnly,"Interpreting a Compile-only word",0
>dcd9	65 74 69 6e 67 20 61 20 43 6f 6d 70 69 6c 65 2d
>dce9	6f 6e 6c 79 20 77 6f 72 64 00
>dcf3	eb 75 6e 73 75 70 70 6f			.text $100+err_Unsupported,"unsupported operation",0 ;  (e.g., AT-XY on a too-dumb terminal)
>dcfb	72 74 65 64 20 6f 70 65 72 61 74 69 6f 6e 00
>dd0a	ea 63 6f 6e 74 72 6f 6c			.text $100+err_ControlMismatch,"control structure mismatch",0
>dd12	20 73 74 72 75 63 74 75 72 65 20 6d 69 73 6d 61
>dd22	74 63 68 00
>dd26	e0 69 6e 76 61 6c 69 64			.text $100+err_InvalidName,"invalid name",0 ; argument (e.g., TO name)
>dd2e	20 6e 61 6d 65 00
>dd34	df 62 6c 6f 63 6b 20 72			.text $100+err_BlockRead,"block read",0
>dd3c	65 61 64 00
>dd40	de 62 6c 6f 63 6b 20 77			.text $100+err_BlockWrite,"block write",0
>dd48	72 69 74 65 00
>dd4d	d6 46 50 20 64 69 76 69			.text $100+err_FPDivideBy0,"FP divide by zero",0
>dd55	64 65 20 62 79 20 7a 65 72 6f 00
>dd60	d5 46 50 20 72 65 73 75			.text $100+err_FPOutOfRange,"FP result out of range",0
>dd68	6c 74 20 6f 75 74 20 6f 66 20 72 61 6e 67 65 00
>dd78	d4 46 50 20 73 74 61 63			.text $100+err_FPStackOverflow,"FP stack overflow",0
>dd80	6b 20 6f 76 65 72 66 6c 6f 77 00
>dd8b	d3 46 50 20 73 74 61 63			.text $100+err_FPStackUnderflow,"FP stack underflow",0
>dd93	6b 20 75 6e 64 65 72 66 6c 6f 77 00
>dd9f	d2 46 50 20 69 6e 76 61			.text $100+err_FPInvalidArg,"FP invalid argument",0
>dda7	6c 69 64 20 61 72 67 75 6d 65 6e 74 00
>ddb4	ca 46 50 20 75 6e 64 65			.text $100+err_FPUnderflow,"FP underflow",0
>ddbc	72 66 6c 6f 77 00
>ddc2	c5 41 4c 4c 4f 43 41 54			.text $100+err_Allocate,"ALLOCATE",0
>ddca	45 00
>ddcc	c4 46 52 45 45 00			.text $100+err_Free,"FREE",0
>ddd2	6b 52 65 66 69 6c 6c 00			.text $100+err_Refill,"Refill",0
>ddda	6a 44 65 66 65 72 20 6e			.text $100+err_Defer,"Defer not set",0
>dde2	6f 74 20 73 65 74 00
>dde9	69 41 6c 72 65 61 64 79			.text $100+err_AlreadyInterpreting,"Already interpreting",0
>ddf1	20 69 6e 74 65 72 70 72 65 74 69 6e 67 00
>ddff	68 41 6c 72 65 61 64 79			.text $100+err_AlreadyCompiling,"Already compiling",0
>de07	20 63 6f 6d 70 69 6c 69 6e 67 00
>de12	66 4e 6f 20 77 6f 72 64			.text $100+err_TooManyWordlists,"No wordlists available",0
>de1a	6c 69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>de2a	00					.text 0 ; end of list

;******  Return to file: platform/../taliforth.asm


;******  Return to file: platform/platform-65816S.asm

>0766					hist_buff: .fill 8*128	; Input History for ACCEPT
.0b66					cp0:
.f100					v_nmi:
.f100					v_reset:
.f100					v_irq:
.f100					kernel_init:
.f100	78		sei		                sei             ; Disable interrupts
.f101	a2 00		ldx #$00	                ldx #0
.f103	bd 35 f1	lda $f135,x	-               lda s_kernel_id,x
.f106	f0 06		beq $f10e	                beq _done
.f108	20 20 f1	jsr $f120	                jsr kernel_putc
.f10b	e8		inx		                inx
.f10c	d0 f5		bne $f103	                bne -
.f10e					_done:
.f10e	4c 4c 80	jmp $804c	                jmp Cold
.f111					kernel_getc:
.f111	ee 35 03	inc $0335	-		inc RndState+0	; randomize
>f114	22						.byte $22	; jsl GET_BYTE_FROM_PC
>f115	33 e0						.word $e033
>f117	00						.byte 0
.f118	b0 f7		bcs $f111			bcs -
.f11a	60		rts				rts
.f11b					kernel_havekey:
.f11b	a9 eb		lda #$eb			lda #$100+err_unsupported
.f11d	4c 6c b5	jmp $b56c			jmp ThrowA
.f120					kernel_putc:
>f120	22				-		.byte $22	; jsl SEND_BYTE_TO_PC
>f121	63 e0						.word $e063
>f123	00						.byte 0
.f124	b0 fa		bcs $f120			bcs -
.f126	60		rts				rts
.f127					platform_bye:
.f127	00		brk #		                brk
.f128					platform_CCAt:
.f128	ca		dex				dex
.f129	ca		dex				dex
.f12a	ca		dex				dex
.f12b	ca		dex				dex
>f12c	02 f4 24					.byte $02,$F4,DStack ; cop $f4	get 65816s simulator cycle count in DStack,x
.f12f	60		rts				rts
.f130					Platform_Block_Read:
.f130					Platform_Block_Write:
.f130	a9 eb		lda #$eb			lda #$100+err_Unsupported
.f132	20 6c b5	jsr $b56c			jsr ThrowA
.f135					s_kernel_id:
>f135	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 kernel for 65816s (31. May 2024)", AscCR,AscLF, 0
>f13d	74 68 20 32 20 6b 65 72 6e 65 6c 20 66 6f 72 20
>f14d	36 35 38 31 36 73 20 28 33 31 2e 20 4d 61 79 20
>f15d	32 30 32 34 29 0d 0a 00
>fffa	00 f1				.word v_nmi
>fffc	00 f1				.word v_reset
>fffe	00 f1				.word v_irq

;******  End of listing
